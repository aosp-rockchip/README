From c1886ed7a3082cbf394ddd421bdefc76a203b35d Mon Sep 17 00:00:00 2001
From: Yifeng Zhao <zyf@rock-chips.com>
Date: Sun, 29 Sep 2019 08:39:10 +0800
Subject: [PATCH] drivers: rk_nand: support Micron B05A and B16A

include commit:
1.f7468ce49e84: drivers: rk_nand: fix the exception of f2fs execution discard function
2.6dfc7913e70b: drivers: rk_nand: support SKHynix 14nm 2D 16GB Nand Flash
3.c76939e892ef: drivers: rk_nand: fix ota update loader fail issue
4.d44aa2f187e4: drivers: rk_nand: add zftl for arm32

Change-Id: Ie430a7388c9b2a21b32fca91e5197e5f035b5ac1
Signed-off-by: Yifeng Zhao <zyf@rock-chips.com>
---
 drivers/rk_nand/Makefile              |     2 +-
 drivers/rk_nand/rk_ftl_arm_v7.S       | 10861 ++++----
 drivers/rk_nand/rk_ftl_arm_v7_thumb.S |  3827 +--
 drivers/rk_nand/rk_ftl_arm_v8.S       |  3205 +--
 drivers/rk_nand/rk_ftlv5_arm32.S      | 26943 ++++++++++++++++++
 drivers/rk_nand/rk_ftlv5_arm64.S      |  2481 +-
 drivers/rk_nand/rk_zftl_arm32.S       | 34797 ++++++++++++++++++++++++
 drivers/rk_nand/rk_zftl_arm64.S       | 23603 +++++++++-------
 8 files changed, 85035 insertions(+), 20684 deletions(-)
 create mode 100644 drivers/rk_nand/rk_ftlv5_arm32.S
 create mode 100644 drivers/rk_nand/rk_zftl_arm32.S

diff --git a/drivers/rk_nand/Makefile b/drivers/rk_nand/Makefile
index 40aedbeb60e4..8ea7fe0c0c64 100644
--- a/drivers/rk_nand/Makefile
+++ b/drivers/rk_nand/Makefile
@@ -4,5 +4,5 @@ ifdef CONFIG_THUMB2_KERNEL
 rk_ftl-$(CONFIG_THUMB2_KERNEL) += rk_ftl_arm_v7_thumb.o
 else
 rk_ftl-$(CONFIG_ARM64) += rk_zftl_arm64.o rk_ftlv5_arm64.o
-rk_ftl-$(CONFIG_ARM) += rk_ftl_arm_v7.o
+rk_ftl-$(CONFIG_ARM) += rk_zftl_arm32.o rk_ftlv5_arm32.o
 endif
diff --git a/drivers/rk_nand/rk_ftl_arm_v7.S b/drivers/rk_nand/rk_ftl_arm_v7.S
index 1e6e554f3481..657651528d56 100644
--- a/drivers/rk_nand/rk_ftl_arm_v7.S
+++ b/drivers/rk_nand/rk_ftl_arm_v7.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2019-05-08
+ * date: 2019-09-29
  */
 	.arch armv7-a
 	.fpu softvfp
@@ -19,8 +19,6 @@
 	.eabi_attribute 34, 1
 	.eabi_attribute 18, 2
 	.file	"rk_ftl_arm_v7.S"
-#APP
-	.syntax unified
 	.text
 	.align	2
 	.global	FlashMemCmp8
@@ -375,19 +373,26 @@ FlashProgSecondCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L71
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L72
 	add	r0, r3, r0, asl #3
-	ldrb	r2, [r0, #16]	@ zero_extendqisi2
-	ldr	r3, [r0, #12]
-	add	r3, r3, r2, asl #8
-	mov	r2, #16
-	str	r2, [r3, #2056]
-	bx	lr
-.L72:
+	ldr	r3, .L72+4
+	ldrb	r5, [r0, #16]	@ zero_extendqisi2
+	ldr	r4, [r0, #12]
+	ldr	r3, [r3, #4]
+	add	r4, r4, r5, asl #8
+	ldr	r0, .L72+8
+	blx	r3
+	mov	r3, #16
+	str	r3, [r4, #2056]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L73:
 	.align	2
-.L71:
+.L72:
 	.word	.LANCHOR0
+	.word	arm_delay_ops
+	.word	64424500
 	.fnend
 	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
 	.align	2
@@ -398,7 +403,7 @@ FlashProgDpFirstCmd:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L74
+	ldr	r2, .L75
 	add	r0, r2, r0, asl #3
 	ldrb	r2, [r2, #54]	@ zero_extendqisi2
 	ldrb	r1, [r0, #16]	@ zero_extendqisi2
@@ -406,9 +411,9 @@ FlashProgDpFirstCmd:
 	add	r3, r3, r1, asl #8
 	str	r2, [r3, #2056]
 	bx	lr
-.L75:
+.L76:
 	.align	2
-.L74:
+.L75:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
@@ -420,23 +425,23 @@ js_hash:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L80
+	ldr	r3, .L81
 	add	r1, r0, r1
-.L77:
+.L78:
 	cmp	r0, r1
-	beq	.L79
+	beq	.L80
 	mov	r2, r3, asl #5
 	ldrb	ip, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsr #2
 	add	r2, r2, ip
 	eor	r3, r3, r2
-	b	.L77
-.L79:
+	b	.L78
+.L80:
 	mov	r0, r3
 	bx	lr
-.L81:
+.L82:
 	.align	2
-.L80:
+.L81:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -471,7 +476,7 @@ ftl_flash_suspend:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L85
+	ldr	r3, .L86
 	ldr	r2, [r3, #76]
 	ldr	r1, [r2]
 	str	r1, [r3, #80]
@@ -490,9 +495,9 @@ ftl_flash_suspend:
 	str	r1, [r3, #104]
 	str	r2, [r3, #108]
 	bx	lr
-.L86:
+.L87:
 	.align	2
-.L85:
+.L86:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_flash_suspend, .-ftl_flash_suspend
@@ -508,7 +513,7 @@ LogAddr2PhyAddr:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r5, r0
-	ldr	r0, .L93
+	ldr	r0, .L94
 	mov	r8, r3
 	ldr	ip, [r5, #4]
 	mov	r9, r1
@@ -536,13 +541,13 @@ LogAddr2PhyAddr:
 	rsb	r6, r4, r6
 	ubfx	r4, ip, #0, #10
 	uxth	r6, r6
-	bne	.L89
+	bne	.L90
 	ldrb	r3, [fp, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldreq	r3, .L93
+	ldreq	r3, .L94
 	addeq	r4, r3, r4, asl #1
 	ldreqh	r4, [r4, #144]
-.L89:
+.L90:
 	add	ip, fp, r0, asl #2
 	ldrb	r3, [sp, #48]	@ zero_extendqisi2
 	ldr	r1, [ip, #656]
@@ -561,9 +566,9 @@ LogAddr2PhyAddr:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L94:
+.L95:
 	.align	2
-.L93:
+.L94:
 	.word	.LANCHOR0
 	.fnend
 	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
@@ -575,14 +580,14 @@ FlashScheduleEnSet:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L96
+	ldr	r3, .L97
 	ldr	r2, [r3, #688]
 	str	r0, [r3, #688]
 	mov	r0, r2
 	bx	lr
-.L97:
+.L98:
 	.align	2
-.L96:
+.L97:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
@@ -594,13 +599,13 @@ FlashGetPageSize:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L99
+	ldr	r3, .L100
 	ldr	r3, [r3, #692]
 	ldrb	r0, [r3, #9]	@ zero_extendqisi2
 	bx	lr
-.L100:
+.L101:
 	.align	2
-.L99:
+.L100:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetPageSize, .-FlashGetPageSize
@@ -623,16 +628,16 @@ NandcGetChipIf:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L103
+	ldr	r3, .L104
 	add	r0, r3, r0, asl #3
 	ldrb	r2, [r0, #16]	@ zero_extendqisi2
 	ldr	r0, [r0, #12]
 	add	r2, r2, #8
 	add	r0, r0, r2, asl #8
 	bx	lr
-.L104:
+.L105:
 	.align	2
-.L103:
+.L104:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetChipIf, .-NandcGetChipIf
@@ -644,16 +649,16 @@ NandcSetDdrPara:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L106
+	ldr	r3, .L107
 	ldr	r2, [r3, #76]
 	mov	r3, r0, asl #8
 	orr	r0, r3, r0, asl #16
 	orr	r3, r0, #1
 	str	r3, [r2, #304]
 	bx	lr
-.L107:
+.L108:
 	.align	2
-.L106:
+.L107:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrPara, .-NandcSetDdrPara
@@ -665,14 +670,14 @@ NandcSetDdrDiv:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L109
+	ldr	r3, .L110
 	orr	r0, r0, #16640
 	ldr	r3, [r3, #76]
 	str	r0, [r3, #344]
 	bx	lr
-.L110:
+.L111:
 	.align	2
-.L109:
+.L110:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
@@ -684,7 +689,7 @@ NandcSetDdrMode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L114
+	ldr	r3, .L115
 	cmp	r0, #0
 	ldr	r2, [r3, #76]
 	ldr	r3, [r2]
@@ -692,9 +697,9 @@ NandcSetDdrMode:
 	orrne	r3, r3, #253952
 	str	r3, [r2]
 	bx	lr
-.L115:
+.L116:
 	.align	2
-.L114:
+.L115:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrMode, .-NandcSetDdrMode
@@ -706,18 +711,18 @@ NandcSetMode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L123
+	ldr	r3, .L124
 	ands	r1, r0, #6
 	ldr	r2, [r3, #76]
 	ldr	r3, [r2]
 	bfieq	r3, r1, #13, #1
-	beq	.L119
+	beq	.L120
 	orr	r3, r3, #24576
 	movw	r1, #8322
 	bfc	r3, #15, #1
 	str	r1, [r2, #344]
 	orr	r3, r3, #196608
-	ldr	r1, .L123+4
+	ldr	r1, .L124+4
 	tst	r0, #4
 	orrne	r3, r3, #32768
 	str	r1, [r2, #304]
@@ -725,13 +730,13 @@ NandcSetMode:
 	str	r1, [r2, #308]
 	mov	r1, #39
 	str	r1, [r2, #308]
-.L119:
+.L120:
 	str	r3, [r2]
 	mov	r0, #0
 	bx	lr
-.L124:
+.L125:
 	.align	2
-.L123:
+.L124:
 	.word	.LANCHOR0
 	.word	1052675
 	.fnend
@@ -744,7 +749,7 @@ NandcFlashCs:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L126
+	ldr	r2, .L127
 	add	r0, r2, r0, asl #3
 	mov	r2, #1
 	ldr	r1, [r0, #12]
@@ -754,9 +759,9 @@ NandcFlashCs:
 	bfi	r3, r2, #0, #8
 	str	r3, [r1]
 	bx	lr
-.L127:
+.L128:
 	.align	2
-.L126:
+.L127:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcFlashCs, .-NandcFlashCs
@@ -768,7 +773,7 @@ NandcFlashDeCs:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L129
+	ldr	r3, .L130
 	add	r0, r3, r0, asl #3
 	ldr	r2, [r0, #12]
 	ldr	r3, [r2]
@@ -776,9 +781,9 @@ NandcFlashDeCs:
 	bfc	r3, #17, #1
 	str	r3, [r2]
 	bx	lr
-.L130:
+.L131:
 	.align	2
-.L129:
+.L130:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcFlashDeCs, .-NandcFlashDeCs
@@ -792,18 +797,18 @@ NandcDelayns:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	add	r0, r0, #996
-	ldr	r3, .L133
+	ldr	r3, .L134
 	add	r0, r0, #3
 	umull	r0, r1, r0, r3
-	ldr	r3, .L133+4
+	ldr	r3, .L134+4
 	ldr	r3, [r3, #8]
 	mov	r0, r1, lsr #6
 	blx	r3
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L134:
+.L135:
 	.align	2
-.L133:
+.L134:
 	.word	274877907
 	.word	arm_delay_ops
 	.fnend
@@ -818,7 +823,7 @@ FlashReadStatus:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r2, #112
-	ldr	r3, .L137
+	ldr	r3, .L138
 	add	r0, r3, r0, asl #3
 	ldrb	r4, [r0, #16]	@ zero_extendqisi2
 	ldr	r5, [r0, #12]
@@ -829,9 +834,9 @@ FlashReadStatus:
 	bl	NandcDelayns
 	ldr	r0, [r5, r4, asl #8]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L138:
+.L139:
 	.align	2
-.L137:
+.L138:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadStatus, .-FlashReadStatus
@@ -845,16 +850,16 @@ ToshibaSetRRPara:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	add	r8, r1, r1, asl #2
-	ldr	r9, .L149
+	ldr	r9, .L150
 	mov	r5, r0
-	ldr	r7, .L149+4
+	ldr	r7, .L150+4
 	mov	r6, r1
 	add	r10, r9, #256
 	mov	r4, #0
-.L140:
+.L141:
 	ldrb	r3, [r7, #697]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcs	.L148
+	bcs	.L149
 	mov	r3, #85
 	str	r3, [r5, #8]
 	ldrsb	r3, [r4, r10]
@@ -865,26 +870,26 @@ ToshibaSetRRPara:
 	cmp	r3, #34
 	addeq	r3, r4, r8
 	addeq	r3, r10, r3
-	beq	.L147
+	beq	.L148
 	cmp	r3, #35
 	addne	r3, r9, r6
 	addne	r3, r3, #400
 	ldrnesb	r3, [r3]
-	bne	.L146
-	ldr	r3, .L149+8
+	bne	.L147
+	ldr	r3, .L150+8
 	add	r2, r4, r8
 	add	r3, r3, r2
-.L147:
+.L148:
 	ldrsb	r3, [r3, #5]
-.L146:
+.L147:
 	str	r3, [r5]
 	add	r4, r4, #1
-	b	.L140
-.L148:
+	b	.L141
+.L149:
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L150:
+.L151:
 	.align	2
-.L149:
+.L150:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR1+304
@@ -897,21 +902,21 @@ SamsungSetRRPara:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L156
+	ldr	r3, .L157
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	add	r1, r3, r1, asl #2
-	ldr	r8, .L156+4
+	ldr	r8, .L157+4
 	mov	r4, #0
 	add	r5, r1, #3
 	mov	r6, r0
 	mov	r7, r3
 	mov	r9, #161
 	mov	r10, r4
-.L152:
+.L153:
 	ldrb	r3, [r8, #697]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcs	.L155
+	bcs	.L156
 	str	r9, [r6, #8]
 	mov	r0, #300
 	str	r10, [r6]
@@ -921,12 +926,12 @@ SamsungSetRRPara:
 	ldrsb	r3, [r5, #1]!
 	str	r3, [r6]
 	bl	NandcDelayns
-	b	.L152
-.L155:
+	b	.L153
+.L156:
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L157:
+.L158:
 	.align	2
-.L156:
+.L157:
 	.word	.LANCHOR1+408
 	.word	.LANCHOR0
 	.fnend
@@ -942,9 +947,9 @@ HynixSetRRPara:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r6, r3
-	ldr	r5, .L167
+	ldr	r5, .L168
 	mov	r9, r2
-	ldr	r4, .L167+4
+	ldr	r4, .L168+4
 	mov	r7, r0
 	mov	r8, r1
 	ldr	r3, [r5, #692]
@@ -954,24 +959,24 @@ HynixSetRRPara:
 	addeq	r4, r4, r0, asl #6
 	addeq	r4, r4, #20
 	addeq	r4, r4, r6, asl #2
-	beq	.L160
+	beq	.L161
 	cmp	r2, #7
-	bne	.L161
+	bne	.L162
 	mov	r2, #160
 	mla	r4, r2, r0, r4
 	add	r2, r6, r6, asl #2
 	add	r4, r4, #28
 	add	r4, r4, r2, asl #1
-	b	.L160
-.L161:
+	b	.L161
+.L162:
 	cmp	r2, #8
 	addne	r2, r6, r3
 	addeq	r2, r6, r6, asl #2
-	ldreq	r4, .L167+8
+	ldreq	r4, .L168+8
 	addne	r4, r4, r2, asl #3
 	addeq	r4, r4, r2
 	addne	r4, r4, #20
-.L160:
+.L161:
 	add	r3, r5, r3
 	mov	r0, r7
 	sub	r8, r8, #1
@@ -985,9 +990,9 @@ HynixSetRRPara:
 	mov	r2, #54
 	add	fp, r10, r3
 	str	r2, [fp, #2056]
-.L163:
+.L164:
 	cmp	ip, r9
-	beq	.L166
+	beq	.L167
 	ldrb	r2, [ip, #1]!	@ zero_extendqisi2
 	mov	r0, #200
 	str	r3, [sp, #4]
@@ -998,8 +1003,8 @@ HynixSetRRPara:
 	str	r2, [fp, #2048]
 	ldr	r3, [sp, #4]
 	ldr	ip, [sp]
-	b	.L163
-.L166:
+	b	.L164
+.L167:
 	add	r10, r10, r3
 	mov	r0, r7
 	mov	r3, #22
@@ -1010,9 +1015,9 @@ HynixSetRRPara:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L168:
+.L169:
 	.align	2
-.L167:
+.L168:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+698
 	.word	.LANCHOR0+726
@@ -1025,7 +1030,7 @@ FlashSetReadRetryDefault:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L177
+	ldr	r3, .L178
 	ldr	r2, [r3, #692]
 	ldrb	r2, [r2, #19]	@ zero_extendqisi2
 	sub	r2, r2, #1
@@ -1034,25 +1039,25 @@ FlashSetReadRetryDefault:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r4, #0
-	ldr	r6, .L177+4
+	ldr	r6, .L178+4
 	mov	r5, r3
-.L170:
+.L171:
 	ldrb	r3, [r6, r4, asl #3]	@ zero_extendqisi2
 	uxtb	r0, r4
 	cmp	r3, #173
-	bne	.L171
+	bne	.L172
 	ldrb	r1, [r5, #699]	@ zero_extendqisi2
 	mov	r3, #0
-	ldr	r2, .L177+8
+	ldr	r2, .L178+8
 	bl	HynixSetRRPara
-.L171:
+.L172:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L170
+	bne	.L171
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L178:
+.L179:
 	.align	2
-.L177:
+.L178:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1556
 	.word	.LANCHOR0+702
@@ -1065,7 +1070,7 @@ FlashReadStatusEN:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L190
+	ldr	ip, .L191
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	add	r0, ip, r0, asl #3
@@ -1079,7 +1084,7 @@ FlashReadStatusEN:
 	add	r5, r5, #8
 	movne	r2, #112
 	strne	r2, [r3, #2056]
-	bne	.L184
+	bne	.L185
 	cmp	r2, #0
 	add	r3, r4, r3
 	ldrneb	r2, [ip, #58]	@ zero_extendqisi2
@@ -1089,25 +1094,25 @@ FlashReadStatusEN:
 	cmp	r0, #0
 	addne	ip, r4, r5, asl #8
 	movne	r2, #0
-	beq	.L184
-.L183:
+	beq	.L185
+.L184:
 	cmp	r2, r0
-	bcs	.L184
+	bcs	.L185
 	mov	r3, r2, asl #3
 	add	r2, r2, #1
 	mov	r3, r1, lsr r3
 	uxtb	r3, r3
 	str	r3, [ip, #4]
-	b	.L183
-.L184:
+	b	.L184
+.L185:
 	mov	r0, #80
 	bl	NandcDelayns
 	ldr	r0, [r4, r5, asl #8]
 	uxtb	r0, r0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L191:
+.L192:
 	.align	2
-.L190:
+.L191:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadStatusEN, .-FlashReadStatusEN
@@ -1123,15 +1128,15 @@ FlashWaitReadyEN:
 	mov	r4, r0
 	mov	r5, r1
 	mov	r6, r2
-.L196:
+.L197:
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, r6
 	bl	FlashReadStatusEN
 	cmp	r0, #255
-	beq	.L196
+	beq	.L197
 	tst	r0, #64
-	beq	.L196
+	beq	.L197
 	ldmfd	sp!, {r4, r5, r6, pc}
 	.fnend
 	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
@@ -1144,12 +1149,12 @@ FlashWaitCmdDone:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r5, .L208
+	ldr	r5, .L209
 	add	r4, r5, r0, asl #4
 	ldr	r3, [r4, #1596]
 	ldrb	r7, [r4, #1588]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L202
+	beq	.L203
 	mov	r6, r0
 	mov	r0, r7
 	add	r5, r5, r6, asl #2
@@ -1172,12 +1177,12 @@ FlashWaitCmdDone:
 	cmp	r1, r2
 	strne	r3, [r1]
 	strne	r2, [r4, #1600]
-.L202:
+.L203:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L209:
+.L210:
 	.align	2
-.L208:
+.L209:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
@@ -1187,7 +1192,7 @@ flash_read_ecc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L212
+	ldr	r2, .L213
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	add	r0, r2, r0, asl #3
@@ -1213,9 +1218,9 @@ flash_read_ecc:
 	cmp	r0, r3
 	movcc	r0, r3
 	ldmfd	sp!, {r4, pc}
-.L213:
+.L214:
 	.align	2
-.L212:
+.L213:
 	.word	.LANCHOR0
 	.fnend
 	.size	flash_read_ecc, .-flash_read_ecc
@@ -1226,34 +1231,34 @@ NandcWaitFlashReadyNoDelay:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L220
+	ldr	r3, .L221
 	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
 	.save {r4, r5, lr}
 	.pad #12
 	add	r0, r3, r0, asl #3
-	ldr	r4, .L220+4
+	ldr	r4, .L221+4
 	ldr	r5, [r0, #12]
-.L216:
+.L217:
 	ldr	r3, [r5]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #512
-	bne	.L217
+	bne	.L218
 	mov	r0, #10
 	bl	NandcDelayns
 	subs	r4, r4, #1
-	bne	.L216
+	bne	.L217
 	mvn	r0, #0
-	b	.L215
-.L217:
+	b	.L216
+.L218:
 	mov	r0, #0
-.L215:
+.L216:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, pc}
-.L221:
+.L222:
 	.align	2
-.L220:
+.L221:
 	.word	.LANCHOR0
 	.word	100000
 	.fnend
@@ -1265,36 +1270,36 @@ NandcWaitFlashReady:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L228
+	ldr	r3, .L229
 	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
 	.save {r4, r5, lr}
 	.pad #12
 	add	r0, r3, r0, asl #3
-	ldr	r4, .L228+4
+	ldr	r4, .L229+4
 	ldr	r5, [r0, #12]
 	mov	r0, #150
 	bl	NandcDelayns
-.L224:
+.L225:
 	ldr	r3, [r5]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #512
-	bne	.L225
+	bne	.L226
 	mov	r0, #10
 	bl	NandcDelayns
 	subs	r4, r4, #1
-	bne	.L224
+	bne	.L225
 	mvn	r0, #0
-	b	.L223
-.L225:
+	b	.L224
+.L226:
 	mov	r0, #0
-.L223:
+.L224:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, pc}
-.L229:
+.L230:
 	.align	2
-.L228:
+.L229:
 	.word	.LANCHOR0
 	.word	100000
 	.fnend
@@ -1306,7 +1311,7 @@ FlashReset:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L232
+	ldr	r3, .L233
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	add	r3, r3, r0, asl #3
@@ -1322,9 +1327,9 @@ FlashReset:
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	NandcFlashDeCs
-.L233:
+.L234:
 	.align	2
-.L232:
+.L233:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReset, .-FlashReset
@@ -1337,7 +1342,7 @@ flash_enter_slc_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r4, .L237
+	ldr	r4, .L238
 	ldrb	r3, [r4, #140]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldmeqfd	sp!, {r3, r4, r5, pc}
@@ -1368,9 +1373,9 @@ flash_enter_slc_mode:
 	str	r3, [r4, #2056]
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	NandcWaitFlashReady
-.L238:
+.L239:
 	.align	2
-.L237:
+.L238:
 	.word	.LANCHOR0
 	.fnend
 	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
@@ -1383,7 +1388,7 @@ flash_exit_slc_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r4, .L242
+	ldr	r4, .L243
 	ldrb	r3, [r4, #140]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldmeqfd	sp!, {r3, r4, r5, pc}
@@ -1415,9 +1420,9 @@ flash_exit_slc_mode:
 	str	r3, [r4, #2056]
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	NandcWaitFlashReady
-.L243:
+.L244:
 	.align	2
-.L242:
+.L243:
 	.word	.LANCHOR0
 	.fnend
 	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
@@ -1459,14 +1464,14 @@ FlashSetInterfaceMode:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L269
+	ldr	r1, .L270
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
 	ldrb	fp, [r1, #1716]	@ zero_extendqisi2
 	mov	lr, #0
-	ldr	r7, .L269+4
+	ldr	r7, .L270+4
 	mov	r4, #239
 	and	r2, fp, #4
 	and	r3, fp, #1
@@ -1481,71 +1486,71 @@ FlashSetInterfaceMode:
 	str	r3, [sp, #4]
 	add	r3, r1, #12
 	str	r3, [sp, #12]
-.L256:
+.L257:
 	ldr	r3, [sp, #12]
 	ldrb	ip, [lr, r7]	@ zero_extendqisi2
 	ldr	r1, [r3, lr]!
 	cmp	ip, #69
 	cmpne	ip, #152
 	ldrb	r3, [r3, #4]	@ zero_extendqisi2
-	beq	.L247
+	beq	.L248
 	cmp	ip, #44
 	cmpne	ip, #173
-	bne	.L248
-.L247:
-	cmp	r0, #1
 	bne	.L249
+.L248:
+	cmp	r0, #1
+	bne	.L250
 	ldr	fp, [sp, #8]
 	cmp	fp, #0
-	beq	.L248
+	beq	.L249
 	mov	r3, r3, asl #8
 	cmp	ip, #173
 	add	fp, r1, r3
 	str	r4, [fp, #2056]
 	streq	r0, [fp, #2052]
-	beq	.L268
+	beq	.L269
 	cmp	ip, #44
 	streq	r0, [fp, #2052]
 	strne	r5, [fp, #2052]
 	streq	r10, [fp, #2048]
 	strne	r0, [fp, #2048]
-	b	.L254
-.L249:
+	b	.L255
+.L250:
 	ldr	fp, [sp, #4]
 	cmp	fp, #0
-	beq	.L248
+	beq	.L249
 	mov	r3, r3, asl #8
 	cmp	ip, #173
 	add	fp, r1, r3
 	str	r4, [fp, #2056]
 	streq	r6, [fp, #2052]
 	streq	r9, [fp, #2048]
-	beq	.L254
+	beq	.L255
 	cmp	ip, #44
 	streq	r6, [fp, #2052]
 	streq	r8, [fp, #2048]
-	beq	.L254
+	beq	.L255
 	str	r5, [fp, #2052]
-.L268:
+.L269:
 	str	r2, [fp, #2048]
-.L254:
+.L255:
 	add	r3, r1, r3
 	str	r2, [r3, #2048]
 	str	r2, [r3, #2048]
 	str	r2, [r3, #2048]
-.L248:
+.L249:
 	add	lr, lr, #8
 	cmp	lr, #32
-	bne	.L256
+	bne	.L257
 	mov	r0, #0
 	bl	NandcWaitFlashReady
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L270:
+.L271:
 	.align	2
-.L269:
+.L270:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1556
 	.fnend
@@ -1557,11 +1562,11 @@ FlashReadSpare:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L273
+	ldr	ip, .L274
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	add	ip, ip, r0, asl #3
-	ldr	r3, .L273+4
+	ldr	r3, .L274+4
 	mov	r5, r2
 	ldrb	r2, [ip, #16]	@ zero_extendqisi2
 	ldr	r4, [ip, #12]
@@ -1585,9 +1590,9 @@ FlashReadSpare:
 	ldr	r3, [r4, #2048]
 	strb	r3, [r5]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L274:
+.L275:
 	.align	2
-.L273:
+.L274:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -1599,7 +1604,7 @@ SandiskProgTestBadBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L277
+	ldr	r2, .L278
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	add	r2, r2, r0, asl #3
@@ -1629,9 +1634,9 @@ SandiskProgTestBadBlock:
 	ldr	r0, [r4, #2048]
 	and	r0, r0, #1
 	ldmfd	sp!, {r4, pc}
-.L278:
+.L279:
 	.align	2
-.L277:
+.L278:
 	.word	.LANCHOR0
 	.fnend
 	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
@@ -1652,15 +1657,15 @@ SandiskSetRRPara:
 	mov	r0, #200
 	mov	r4, r1
 	bl	NandcDelayns
-	ldr	r0, .L287
-	ldr	r1, .L287+4
+	ldr	r0, .L288
+	ldr	r1, .L288+4
 	add	r4, r4, r4, asl #2
 	sub	ip, r0, #48
 	mov	r2, #0
-.L280:
+.L281:
 	ldrb	r3, [r1, #697]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcs	.L286
+	bcs	.L287
 	ldrb	r3, [r1, #696]	@ zero_extendqisi2
 	cmp	r3, #67
 	add	r3, r2, r4
@@ -1669,14 +1674,14 @@ SandiskSetRRPara:
 	add	r2, r2, #1
 	ldrsb	r3, [r3, #5]
 	str	r3, [r5]
-	b	.L280
-.L286:
+	b	.L281
+.L287:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	NandcWaitFlashReady
-.L288:
+.L289:
 	.align	2
-.L287:
+.L288:
 	.word	.LANCHOR1+304
 	.word	.LANCHOR0
 	.fnend
@@ -1693,7 +1698,7 @@ micron_auto_read_calibration_config:
 	mov	r4, r0
 	mov	r5, r1
 	bl	NandcWaitFlashReady
-	ldr	r3, .L291
+	ldr	r3, .L292
 	mov	r0, #200
 	add	r2, r3, r4, asl #3
 	ldrb	r4, [r2, #16]	@ zero_extendqisi2
@@ -1710,9 +1715,9 @@ micron_auto_read_calibration_config:
 	str	r3, [r4, #2048]
 	str	r3, [r4, #2048]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L292:
+.L293:
 	.align	2
-.L291:
+.L292:
 	.word	.LANCHOR0
 	.fnend
 	.size	micron_auto_read_calibration_config, .-micron_auto_read_calibration_config
@@ -1726,18 +1731,18 @@ FlashEraseSLc2KBlocks:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, #0
-	ldr	r7, .L306
+	ldr	r7, .L307
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r9, .L306+4
+	ldr	r9, .L307+4
 	mov	r6, r0
 	mov	r10, r1
 	mov	r8, r5
 	ldr	r3, [r7]
 	str	r3, [sp, #20]
-.L294:
+.L295:
 	cmp	r8, r10
-	beq	.L305
+	beq	.L306
 	rsb	r3, r8, r10
 	add	r2, sp, #12
 	add	r0, r6, r5
@@ -1751,7 +1756,7 @@ FlashEraseSLc2KBlocks:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r6, r5]
-	bcs	.L296
+	bcs	.L297
 	add	r2, r9, r3
 	add	r3, r9, r3, asl #4
 	ldrb	r4, [r2, #1720]	@ zero_extendqisi2
@@ -1787,31 +1792,31 @@ FlashEraseSLc2KBlocks:
 	strne	r3, [r6, r5]
 	ldr	r3, [r6, r5]
 	cmn	r3, #1
-	bne	.L298
-	ldr	r0, .L306+8
+	bne	.L299
+	ldr	r0, .L307+8
 	ldr	r1, [sp, #12]
 	bl	printk
-.L298:
+.L299:
 	mov	r0, r4
 	bl	NandcFlashDeCs
-.L296:
+.L297:
 	add	r8, r8, #1
 	add	r5, r5, #36
-	b	.L294
-.L305:
+	b	.L295
+.L306:
 	ldr	r2, [sp, #20]
 	mov	r0, #0
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L300
+	beq	.L301
 	bl	__stack_chk_fail
-.L300:
+.L301:
 	add	sp, sp, #24
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L307:
+.L308:
 	.align	2
-.L306:
+.L307:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC1
@@ -1827,7 +1832,7 @@ FlashReadDpCmd:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r1
-	ldr	r3, .L313
+	ldr	r3, .L314
 	mov	r7, r0
 	uxtb	lr, r6
 	mov	ip, r6, lsr #8
@@ -1845,7 +1850,7 @@ FlashReadDpCmd:
 	add	r4, fp, r4
 	mov	r1, r6, lsr #16
 	str	r10, [r4, #2056]
-	bne	.L309
+	bne	.L310
 	mov	r10, #0
 	str	r10, [r4, #2052]
 	str	r10, [r4, #2052]
@@ -1857,13 +1862,13 @@ FlashReadDpCmd:
 	str	r10, [r4, #2056]
 	str	r10, [r4, #2052]
 	str	r10, [r4, #2052]
-	b	.L312
-.L309:
+	b	.L313
+.L310:
 	str	lr, [r4, #2052]
 	str	ip, [r4, #2052]
 	str	r1, [r4, #2052]
 	str	r3, [r4, #2056]
-.L312:
+.L313:
 	str	r9, [r4, #2052]
 	mov	r3, #48
 	str	r8, [r4, #2052]
@@ -1873,9 +1878,9 @@ FlashReadDpCmd:
 	str	r3, [r4, #2056]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	FlashSetRandomizer
-.L314:
+.L315:
 	.align	2
-.L313:
+.L314:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadDpCmd, .-FlashReadDpCmd
@@ -1889,39 +1894,39 @@ ftl_flash_de_init:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #0
-	ldr	r4, .L326
+	ldr	r4, .L327
 	bl	NandcWaitFlashReady
 	bl	FlashSetReadRetryDefault
 	ldr	r0, [r4, #1728]
 	cmp	r0, #0
-	beq	.L316
+	beq	.L317
 	mov	r0, #0
 	bl	flash_enter_slc_mode
-	b	.L317
-.L316:
-	bl	flash_exit_slc_mode
+	b	.L318
 .L317:
+	bl	flash_exit_slc_mode
+.L318:
 	ldrb	r3, [r4, #1732]	@ zero_extendqisi2
-	ldr	r5, .L326
+	ldr	r5, .L327
 	cmp	r3, #0
-	beq	.L318
+	beq	.L319
 	ldrb	r3, [r5, #1716]	@ zero_extendqisi2
 	tst	r3, #1
-	beq	.L318
+	beq	.L319
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
 	mov	r3, #0
 	strb	r3, [r5, #1732]
-.L318:
+.L319:
 	ldr	r3, [r4, #12]
 	mov	r0, #0
 	str	r0, [r3, #336]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L327:
+.L328:
 	.align	2
-.L326:
+.L327:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_flash_de_init, .-ftl_flash_de_init
@@ -1933,14 +1938,14 @@ NandcRandmzSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L329
+	ldr	r3, .L330
 	add	r0, r3, r0, asl #3
 	ldr	r3, [r0, #12]
 	str	r1, [r3, #336]
 	bx	lr
-.L330:
+.L331:
 	.align	2
-.L329:
+.L330:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcRandmzSel, .-NandcRandmzSel
@@ -1957,35 +1962,35 @@ NandcTimeCfg:
 	mov	r4, r0
 	mov	r0, #0
 	bl	rknand_get_clk_rate
-	ldr	r1, .L342
+	ldr	r1, .L343
 	bl	__aeabi_idiv
-	ldr	r3, .L342+4
+	ldr	r3, .L343+4
 	ldr	r3, [r3, #76]
 	cmp	r0, #250
 	movwgt	r2, #8354
-	bgt	.L340
-	cmp	r0, #220
 	bgt	.L341
+	cmp	r0, #220
+	bgt	.L342
 	cmp	r0, #185
 	movwgt	r2, #4226
-	bgt	.L340
+	bgt	.L341
 	cmp	r0, #160
 	movwgt	r2, #4194
-	bgt	.L340
+	bgt	.L341
 	cmp	r4, #35
 	movwls	r2, #4193
-	bls	.L340
+	bls	.L341
 	cmp	r4, #99
 	movwls	r2, #4225
-	bls	.L340
-.L341:
+	bls	.L341
+.L342:
 	movw	r2, #8322
-.L340:
+.L341:
 	str	r2, [r3, #4]
 	ldmfd	sp!, {r4, pc}
-.L343:
+.L344:
 	.align	2
-.L342:
+.L343:
 	.word	1000000
 	.word	.LANCHOR0
 	.fnend
@@ -2002,21 +2007,21 @@ FlashTimingCfg:
 	sub	r3, r3, #33
 	bic	r3, r3, #32
 	cmp	r3, #1
-	bls	.L345
+	bls	.L346
 	movw	r3, #8322
 	cmp	r0, r3
-	bne	.L346
-.L345:
-	ldr	r3, .L347
+	bne	.L347
+.L346:
+	ldr	r3, .L348
 	ldr	r3, [r3, #76]
 	str	r0, [r3, #4]
-.L346:
-	ldr	r3, .L347+4
+.L347:
+	ldr	r3, .L348+4
 	ldrb	r0, [r3, #493]	@ zero_extendqisi2
 	b	NandcTimeCfg
-.L348:
+.L349:
 	.align	2
-.L347:
+.L348:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -2031,7 +2036,7 @@ NandcInit:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r1, #0
-	ldr	r3, .L352
+	ldr	r3, .L353
 	mov	r2, #1
 	mov	r5, #0
 	str	r1, [r3, #16]
@@ -2070,7 +2075,7 @@ NandcInit:
 	movw	r2, #8322
 	mov	r0, #36864
 	str	r2, [r3, #344]
-	ldr	r2, .L352+4
+	ldr	r2, .L353+4
 	str	r2, [r3, #304]
 	bl	ftl_malloc
 	str	r5, [r4, #1776]
@@ -2080,9 +2085,9 @@ NandcInit:
 	add	r0, r0, #32768
 	str	r0, [r4, #1756]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L353:
+.L354:
 	.align	2
-.L352:
+.L353:
 	.word	.LANCHOR0
 	.word	1579009
 	.fnend
@@ -2094,7 +2099,7 @@ NandcGetTimeCfg:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L356
+	ldr	ip, .L357
 	str	lr, [sp, #-4]!
 	.save {lr}
 	ldr	lr, [ip, #76]
@@ -2113,9 +2118,9 @@ NandcGetTimeCfg:
 	orr	r2, r2, r1, asl #16
 	str	r2, [r3]
 	ldr	pc, [sp], #4
-.L357:
+.L358:
 	.align	2
-.L356:
+.L357:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
@@ -2127,7 +2132,7 @@ NandcBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L366
+	ldr	r3, .L367
 	mov	r1, #1
 	ldr	r2, [r3, #76]
 	str	r0, [r3, #1788]
@@ -2137,25 +2142,25 @@ NandcBchSel:
 	cmp	r0, r1
 	bfi	r3, r1, #8, #8
 	bfc	r3, #18, #1
-	bne	.L359
-.L362:
+	bne	.L360
+.L363:
 	bfc	r3, #4, #1
-	b	.L360
-.L359:
+	b	.L361
+.L360:
 	cmp	r0, #24
 	orreq	r3, r3, #16
-	beq	.L360
+	beq	.L361
 	cmp	r0, #40
 	orr	r3, r3, #262144
 	orr	r3, r3, #16
-	beq	.L362
-.L360:
+	beq	.L363
+.L361:
 	orr	r3, r3, #1
 	str	r3, [r2, #12]
 	bx	lr
-.L367:
+.L368:
 	.align	2
-.L366:
+.L367:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcBchSel, .-NandcBchSel
@@ -2167,12 +2172,12 @@ FlashBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L369
+	ldr	r3, .L370
 	strb	r0, [r3, #1792]
 	b	NandcBchSel
-.L370:
+.L371:
 	.align	2
-.L369:
+.L370:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashBchSel, .-FlashBchSel
@@ -2183,14 +2188,14 @@ ftl_flash_resume:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L380
+	ldr	r3, .L381
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, #0
 	ldr	r2, [r3, #76]
 	mov	r4, r3
 	ldr	r1, [r3, #80]
-	ldr	r6, .L380+4
+	ldr	r6, .L381+4
 	str	r1, [r2]
 	ldr	r1, [r3, #84]
 	ldr	r2, [r3, #76]
@@ -2207,22 +2212,22 @@ ftl_flash_resume:
 	str	r1, [r2, #336]
 	ldr	r1, [r3, #108]
 	str	r1, [r2, #344]
-.L373:
+.L374:
 	ldrb	r3, [r6, r5, asl #3]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L372
+	bhi	.L373
 	uxtb	r0, r5
 	bl	FlashReset
-.L372:
+.L373:
 	add	r5, r5, #1
 	cmp	r5, #4
-	bne	.L373
+	bne	.L374
 	ldrb	r3, [r4, #1732]	@ zero_extendqisi2
-	ldr	r5, .L380
+	ldr	r5, .L381
 	cmp	r3, #0
-	beq	.L374
+	beq	.L375
 	mov	r0, #1
 	bl	NandcSetMode
 	ldrb	r0, [r5, #1716]	@ zero_extendqisi2
@@ -2231,14 +2236,14 @@ ftl_flash_resume:
 	bl	NandcSetMode
 	ldrb	r0, [r5, #97]	@ zero_extendqisi2
 	bl	NandcSetDdrPara
-.L374:
+.L375:
 	ldr	r3, [r4, #692]
 	ldmfd	sp!, {r4, r5, r6, lr}
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
 	b	FlashBchSel
-.L381:
+.L382:
 	.align	2
-.L380:
+.L381:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1556
 	.fnend
@@ -2291,11 +2296,11 @@ NandcIqrWaitFlashReady:
 	str	r3, [r4, #364]
 	ldr	r3, [r4]
 	tst	r3, #512
-	bne	.L385
+	bne	.L386
 	mov	r0, r4
 	ldmfd	sp!, {r4, lr}
 	b	wait_for_nand_flash_ready
-.L385:
+.L386:
 	ldr	r3, [r4, #368]
 	orr	r3, r3, #2
 	str	r3, [r4, #368]
@@ -2315,10 +2320,10 @@ FlashEraseBlocks:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r4, .L424
+	ldr	r4, .L425
 	.pad #36
 	sub	sp, sp, #36
-	ldr	r3, .L424+4
+	ldr	r3, .L425+4
 	ldrb	r5, [r4]	@ zero_extendqisi2
 	ldr	r2, [r3]
 	cmp	r5, #0
@@ -2327,11 +2332,11 @@ FlashEraseBlocks:
 	moveq	r9, r0
 	moveq	r10, r1
 	moveq	fp, r4
-	beq	.L388
+	beq	.L389
 	mov	r1, r8
 	bl	FlashEraseSLc2KBlocks
-	b	.L389
-.L397:
+	b	.L390
+.L398:
 	mov	r3, #36
 	mov	r1, #0
 	mul	r6, r3, r5
@@ -2350,24 +2355,24 @@ FlashEraseBlocks:
 	cmp	r0, r3
 	mvncs	r3, #0
 	strcs	r3, [r9, r6]
-	bcc	.L421
-.L391:
+	bcc	.L422
+.L392:
 	add	r5, r5, #1
-.L388:
+.L389:
 	cmp	r5, r8
-	bcc	.L397
-	b	.L422
-.L421:
+	bcc	.L398
+	b	.L423
+.L422:
 	ldrb	r3, [fp, #1793]	@ zero_extendqisi2
 	cmp	r3, #0
 	add	r3, r4, r0, asl #4
 	ldr	r3, [r3, #1596]
 	moveq	r7, #0
 	cmp	r3, #0
-	beq	.L393
+	beq	.L394
 	uxtb	r0, r0
 	bl	FlashWaitCmdDone
-.L393:
+.L394:
 	ldr	r2, [sp, #24]
 	cmp	r7, #0
 	ldr	r0, [sp, #8]
@@ -2389,15 +2394,15 @@ FlashEraseBlocks:
 	bl	NandcFlashCs
 	cmp	r10, #1
 	mov	r0, r6
-	bne	.L395
+	bne	.L396
 	ldrb	r3, [fp, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L395
+	beq	.L396
 	bl	flash_enter_slc_mode
-	b	.L396
-.L395:
-	bl	flash_exit_slc_mode
+	b	.L397
 .L396:
+	bl	flash_exit_slc_mode
+.L397:
 	ldr	r3, [sp, #24]
 	mov	r0, r6
 	ldr	r1, [sp, #20]
@@ -2413,65 +2418,65 @@ FlashEraseBlocks:
 	bl	FlashEraseCmd
 	mov	r0, r6
 	bl	NandcFlashDeCs
-	b	.L391
-.L422:
+	b	.L392
+.L423:
 	ldr	r0, [r4, #76]
 	mov	r5, #0
 	bl	NandcIqrWaitFlashReady
-	ldr	r6, .L424
-	ldr	r7, .L424+8
-.L398:
+	ldr	r6, .L425
+	ldr	r7, .L425+8
+.L399:
 	ldrb	r2, [r4, #1717]	@ zero_extendqisi2
-	ldr	r3, .L424
+	ldr	r3, .L425
 	cmp	r5, r2
-	bcs	.L423
+	bcs	.L424
 	uxtb	r0, r5
 	bl	FlashWaitCmdDone
 	cmp	r10, #1
-	bne	.L399
+	bne	.L400
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L399
+	beq	.L400
 	ldrb	r0, [r7, r5, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L399:
+.L400:
 	add	r5, r5, #1
-	b	.L398
-.L423:
+	b	.L399
+.L424:
 	ldr	r2, [r3, #1796]
 	cmp	r2, #0
-	bne	.L401
-.L403:
+	bne	.L402
+.L404:
 	mov	r0, #0
-	b	.L389
-.L401:
+	b	.L390
+.L402:
 	ldrb	r3, [r3, #1556]	@ zero_extendqisi2
 	cmp	r3, #69
-	bne	.L403
+	bne	.L404
 	mov	r3, #0
 	mov	r2, #36
 	mov	r1, r3
-.L402:
+.L403:
 	cmp	r3, r8
-	beq	.L403
+	beq	.L404
 	mul	r0, r2, r3
 	add	r3, r3, #1
 	str	r1, [r9, r0]
-	b	.L402
-.L389:
+	b	.L403
+.L390:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #28]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L405
+	beq	.L406
 	bl	__stack_chk_fail
-.L405:
+.L406:
 	add	sp, sp, #36
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L425:
+.L426:
 	.align	2
-.L424:
+.L425:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR0+1588
@@ -2505,7 +2510,7 @@ NandcSendDumpDataStart:
 	ldr	r2, [r0, #16]
 	.pad #8
 	sub	sp, sp, #8
-	ldr	r3, .L429
+	ldr	r3, .L430
 	str	r2, [sp, #4]
 	ldr	r2, [sp, #4]
 	bic	r2, r2, #4
@@ -2518,9 +2523,9 @@ NandcSendDumpDataStart:
 	add	sp, sp, #8
 	@ sp needed
 	bx	lr
-.L430:
+.L431:
 	.align	2
-.L429:
+.L430:
 	.word	538969130
 	.fnend
 	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
@@ -2534,12 +2539,12 @@ NandcSendDumpDataDone:
 	@ link register save eliminated.
 	.pad #8
 	sub	sp, sp, #8
-.L432:
+.L433:
 	ldr	r3, [r0, #8]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #1048576
-	beq	.L432
+	beq	.L433
 	add	sp, sp, #8
 	@ sp needed
 	bx	lr
@@ -2555,7 +2560,7 @@ NandcXferStart:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	lr, #16
-	ldr	r5, .L454
+	ldr	r5, .L455
 	mov	r4, #0
 	.pad #28
 	sub	sp, sp, #28
@@ -2578,7 +2583,7 @@ NandcXferStart:
 	bfi	r4, r3, #4, #1
 	ldr	r3, [r5, #1740]
 	cmp	r3, #3
-	bls	.L437
+	bls	.L438
 	ldr	r3, [r6, #16]
 	str	r3, [sp, #20]
 	ldr	r3, [sp, #20]
@@ -2589,10 +2594,10 @@ NandcXferStart:
 	cmp	ip, #0
 	cmpeq	r8, #0
 	str	r3, [sp, #8]
-	beq	.L438
+	beq	.L439
 	cmp	r1, #0
-	bne	.L439
-.L447:
+	bne	.L440
+.L448:
 	mov	r0, r6
 	mov	r10, r2
 	mov	r9, r1
@@ -2609,8 +2614,8 @@ NandcXferStart:
 	orr	r3, r3, #1
 	str	r3, [r6, #364]
 	ldreq	r0, [r5, #1752]
-	b	.L441
-.L439:
+	b	.L442
+.L440:
 	ldr	r3, [r5, #1788]
 	mov	r9, r5
 	cmp	r3, #25
@@ -2621,10 +2626,10 @@ NandcXferStart:
 	str	r3, [sp, #12]
 	mov	r3, #0
 	mov	r0, r3
-.L443:
+.L444:
 	ldr	lr, [sp, #12]
 	cmp	r0, lr
-	bcs	.L447
+	bcs	.L448
 	ldr	lr, [sp, #8]
 	mov	r10, r3, lsr #2
 	add	r0, r0, #1
@@ -2639,8 +2644,8 @@ NandcXferStart:
 	strne	lr, [fp, r10, asl #2]
 	ldr	lr, [sp, #4]
 	add	r3, r3, lr
-	b	.L443
-.L441:
+	b	.L444
+.L442:
 	ldr	r3, [r5, #1756]
 	ubfx	r10, r4, #22, #5
 	mov	r2, r9
@@ -2686,10 +2691,10 @@ NandcXferStart:
 	ldr	r3, [sp, #20]
 	orr	r3, r3, #1
 	str	r3, [sp, #20]
-.L438:
+.L439:
 	ldr	r3, [sp, #20]
 	str	r3, [r6, #16]
-.L437:
+.L438:
 	str	r7, [r6, #12]
 	str	r4, [r6, #8]
 	orr	r4, r4, #4
@@ -2697,9 +2702,9 @@ NandcXferStart:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L455:
+.L456:
 	.align	2
-.L454:
+.L455:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferStart, .-NandcXferStart
@@ -2713,13 +2718,13 @@ Ftl_log2:
 	@ link register save eliminated.
 	mov	r1, #0
 	mov	r2, #1
-.L457:
+.L458:
 	cmp	r2, r0
 	uxth	r3, r1
 	add	r1, r1, #1
 	movls	r2, r2, asl #1
-	bls	.L457
-.L459:
+	bls	.L458
+.L460:
 	sub	r0, r3, #1
 	uxth	r0, r0
 	bx	lr
@@ -2744,7 +2749,7 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L463
+	ldr	r3, .L464
 	movw	r2, #1804
 	cmp	r0, #23
 	movw	r1, #1814
@@ -2762,9 +2767,9 @@ FtlSysBlkNumInit:
 	rsb	r2, r2, r1
 	str	r2, [r3, #1816]
 	bx	lr
-.L464:
+.L465:
 	.align	2
-.L463:
+.L464:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -2778,7 +2783,7 @@ FtlConstantsInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movw	r1, #1828
-	ldr	r4, .L493
+	ldr	r4, .L494
 	mov	r5, r0
 	ldrh	r6, [r0, #8]
 	.pad #20
@@ -2790,22 +2795,22 @@ FtlConstantsInit:
 	movw	r3, #1826
 	strh	r2, [r4, r3]	@ movhi
 	ldrh	r3, [r0, #12]
-	ldr	r0, .L493+4
+	ldr	r0, .L494+4
 	strh	r3, [r4, r1]	@ movhi
 	movw	r1, #1814
 	strh	lr, [r4, r1]	@ movhi
 	mov	r1, #0
-.L466:
+.L467:
 	strb	r1, [r1, r0]
 	add	r1, r1, #1
 	cmp	r1, #32
-	bne	.L466
+	bne	.L467
 	ldrh	r0, [r5, #14]
 	ldrh	r1, [r5, #20]
 	cmp	r1, r0, lsr #8
-	bcs	.L467
+	bcs	.L468
 	uxtb	r10, r3
-	ldr	r9, .L493+4
+	ldr	r9, .L494+4
 	mov	r1, r10, asl #1
 	uxtb	r1, r1
 	str	r1, [sp, #4]
@@ -2813,9 +2818,9 @@ FtlConstantsInit:
 	mul	r1, r3, r1
 	str	r1, [sp]
 	mov	r1, #0
-.L468:
+.L469:
 	cmp	r1, r3
-	bcs	.L470
+	bcs	.L471
 	ldr	ip, [sp]
 	uxtb	r0, r1
 	rsb	r7, r3, r1
@@ -2826,10 +2831,10 @@ FtlConstantsInit:
 	mov	ip, #0
 	str	r7, [sp, #12]
 	mov	r8, ip
-.L471:
+.L472:
 	cmp	r8, r2
 	add	ip, ip, r3
-	bcs	.L492
+	bcs	.L493
 	ldr	r7, [sp, #12]
 	add	fp, r0, r10
 	add	r8, r8, #1
@@ -2839,18 +2844,18 @@ FtlConstantsInit:
 	ldr	r7, [sp, #4]
 	add	r0, r0, r7
 	uxtb	r0, r0
-	b	.L471
-.L492:
+	b	.L472
+.L493:
 	add	r1, r1, #1
-	b	.L468
-.L470:
+	b	.L469
+.L471:
 	movw	r1, #1826
 	mov	r2, r2, asl #1
 	strh	r2, [r4, r1]	@ movhi
 	movw	r2, #1814
 	mov	lr, lr, lsr #1
 	strh	lr, [r4, r2]	@ movhi
-.L467:
+.L468:
 	cmp	r6, #1
 	movw	r2, #1864
 	mov	r1, #5
@@ -2858,7 +2863,7 @@ FtlConstantsInit:
 	movw	r1, #1866
 	mov	r0, #0
 	strh	r0, [r4, r1]	@ movhi
-	ldreq	r1, .L493
+	ldreq	r1, .L494
 	ldrb	r9, [r4]	@ zero_extendqisi2
 	ldrh	r10, [r5, #16]
 	streqh	r6, [r1, r2]	@ movhi
@@ -2867,12 +2872,12 @@ FtlConstantsInit:
 	mov	r1, #4352
 	strh	r1, [r4, r2]	@ movhi
 	movne	r0, #384
-	ldrne	r1, .L493
+	ldrne	r1, .L494
 	strneh	r0, [r1, r2]	@ movhi
 	movw	r1, #1826
 	ldrh	r8, [r4, r1]
 	movw	r1, #1804
-	ldr	r2, .L493
+	ldr	r2, .L494
 	smulbb	r8, r8, r3
 	add	r7, r2, #1872
 	str	r2, [sp, #8]
@@ -2913,7 +2918,7 @@ FtlConstantsInit:
 	strh	r0, [r4, ip]	@ movhi
 	ldrh	ip, [r5, #26]
 	movw	r0, #1886
-	ldr	r5, .L493
+	ldr	r5, .L494
 	strh	ip, [r4, r0]	@ movhi
 	movwhi	ip, #1866
 	mul	r0, r6, r8
@@ -2935,7 +2940,7 @@ FtlConstantsInit:
 	bl	__aeabi_idiv
 	movw	r3, #1892
 	mov	r1, r8
-	ldr	r10, .L493
+	ldr	r10, .L494
 	uxth	r0, r0
 	cmp	r0, #4
 	strhih	r0, [r5, r3]	@ movhi
@@ -2956,7 +2961,7 @@ FtlConstantsInit:
 	movw	r3, #1896
 	strh	r5, [r4, r3]	@ movhi
 	uxth	r5, r5
-	ldr	r6, .L493
+	ldr	r6, .L494
 	mul	r3, r8, r5
 	add	r5, r5, #8
 	str	r3, [r4, #1900]
@@ -3006,13 +3011,13 @@ FtlConstantsInit:
 	add	r0, r3, #3
 	addne	r3, r3, #5
 	str	r0, [r4, #1900]
-	bne	.L491
+	bne	.L492
 	cmp	r0, #7
-	bhi	.L481
+	bhi	.L482
 	mov	r3, #8
-.L491:
+.L492:
 	str	r3, [r6, #1900]
-.L481:
+.L482:
 	movw	r2, #1916
 	mov	r3, #0
 	strh	r3, [r4, r2]	@ movhi
@@ -3024,15 +3029,15 @@ FtlConstantsInit:
 	add	r3, r3, #52
 	add	r5, r3, r5, asl #2
 	cmp	r5, r7, asl #9
-	ldrcc	r3, .L493
+	ldrcc	r3, .L494
 	movcc	r1, #1
 	strcch	r1, [r3, r2]	@ movhi
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L494:
+.L495:
 	.align	2
-.L493:
+.L494:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1832
 	.fnend
@@ -3045,29 +3050,29 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L502
+	ldr	r2, .L503
 	movw	r3, #1918
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L501
+	beq	.L502
 	movw	r1, #1892
 	ldr	r3, [r2, #1920]
 	ldrh	r2, [r2, r1]
 	add	r2, r3, r2, asl #1
-.L497:
+.L498:
 	cmp	r3, r2
-	beq	.L501
+	beq	.L502
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L497
+	bne	.L498
 	mov	r0, #1
 	bx	lr
-.L501:
+.L502:
 	mov	r0, #0
 	bx	lr
-.L503:
+.L504:
 	.align	2
-.L502:
+.L503:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -3078,16 +3083,16 @@ FtlCacheMetchLpa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L511
+	ldr	r2, .L512
 	ldr	r3, [r2, #1924]
 	cmp	r3, #0
-	beq	.L507
+	beq	.L508
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r5, #36
 	ldr	r4, [r2, #1928]
 	mov	r2, #0
-.L506:
+.L507:
 	mla	ip, r5, r2, r4
 	ldr	lr, [ip, #16]
 	cmp	lr, r0
@@ -3096,21 +3101,21 @@ FtlCacheMetchLpa:
 	cmp	lr, r1
 	movhi	ip, #0
 	cmp	ip, #0
-	bne	.L508
+	bne	.L509
 	add	r2, r2, #1
 	cmp	r2, r3
-	bne	.L506
+	bne	.L507
 	mov	r0, ip
 	ldmfd	sp!, {r4, r5, pc}
-.L507:
+.L508:
 	mov	r0, r3
 	bx	lr
-.L508:
+.L509:
 	mov	r0, #1
 	ldmfd	sp!, {r4, r5, pc}
-.L512:
+.L513:
 	.align	2
-.L511:
+.L512:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
@@ -3122,12 +3127,12 @@ FtlGetCap:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L514
+	ldr	r3, .L515
 	ldr	r0, [r3, #1912]
 	bx	lr
-.L515:
+.L516:
 	.align	2
-.L514:
+.L515:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCap, .-FtlGetCap
@@ -3139,12 +3144,12 @@ ftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L517
+	ldr	r3, .L518
 	ldr	r0, [r3, #1912]
 	bx	lr
-.L518:
+.L519:
 	.align	2
-.L517:
+.L518:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_density, .-ftl_get_density
@@ -3156,12 +3161,12 @@ FtlGetLpn:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L520
+	ldr	r3, .L521
 	ldr	r0, [r3, #1932]
 	bx	lr
-.L521:
+.L522:
 	.align	2
-.L520:
+.L521:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLpn, .-FtlGetLpn
@@ -3176,7 +3181,7 @@ FtlBbmMapBadBlock:
 	.save {r4, r5, r6, lr}
 	.pad #8
 	movw	r3, #1870
-	ldr	r5, .L524
+	ldr	r5, .L525
 	mov	r6, r0
 	ldrh	r4, [r5, r3]
 	mov	r1, r4
@@ -3193,7 +3198,7 @@ FtlBbmMapBadBlock:
 	mov	lr, r3, lsr #5
 	ldr	r0, [ip, lr, asl #2]
 	orr	r1, r0, r4, asl r1
-	ldr	r0, .L524+4
+	ldr	r0, .L525+4
 	str	r1, [ip, lr, asl #2]
 	str	r1, [sp]
 	mov	r1, r6
@@ -3205,9 +3210,9 @@ FtlBbmMapBadBlock:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L525:
+.L526:
 	.align	2
-.L524:
+.L525:
 	.word	.LANCHOR0
 	.word	.LC2
 	.fnend
@@ -3223,7 +3228,7 @@ FtlBbmIsBadBlock:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movw	r3, #1870
-	ldr	r5, .L528
+	ldr	r5, .L529
 	mov	r7, r0
 	ldrh	r6, [r5, r3]
 	mov	r1, r6
@@ -3241,9 +3246,9 @@ FtlBbmIsBadBlock:
 	mov	r0, r0, lsr r4
 	and	r0, r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L529:
+.L530:
 	.align	2
-.L528:
+.L529:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -3268,29 +3273,29 @@ FtlBbtCalcTotleCnt:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movw	r3, #1870
-	ldr	r4, .L540
+	ldr	r4, .L541
 	mov	r5, #0
 	ldrh	r6, [r4, r3]
 	movw	r3, #1826
 	ldrh	r3, [r4, r3]
 	mov	r4, r5
 	mul	r6, r3, r6
-.L532:
+.L533:
 	uxth	r0, r5
 	cmp	r0, r6
-	bge	.L539
+	bge	.L540
 	bl	FtlBbmIsBadBlock
 	add	r5, r5, #1
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	b	.L532
-.L539:
+	b	.L533
+.L540:
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L541:
+.L542:
 	.align	2
-.L540:
+.L541:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -3304,7 +3309,7 @@ V2P_block:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movw	r3, #1828
-	ldr	r6, .L544
+	ldr	r6, .L545
 	mov	r4, r1
 	mov	r7, r0
 	ldrh	r5, [r6, r3]
@@ -3319,9 +3324,9 @@ V2P_block:
 	smlabb	r0, r3, r0, r4
 	uxth	r0, r0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L545:
+.L546:
 	.align	2
-.L544:
+.L545:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -3332,7 +3337,7 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L548
+	ldr	r3, .L549
 	movw	r2, #1828
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
@@ -3348,9 +3353,9 @@ P2V_plane:
 	add	r1, r4, r1
 	uxth	r0, r1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L549:
+.L550:
 	.align	2
-.L548:
+.L549:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -3364,7 +3369,7 @@ P2V_block_in_plane:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	movw	r3, #1870
-	ldr	r4, .L552
+	ldr	r4, .L553
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_uidivmod
 	movw	r3, #1828
@@ -3373,9 +3378,9 @@ P2V_block_in_plane:
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	ldmfd	sp!, {r4, pc}
-.L553:
+.L554:
 	.align	2
-.L552:
+.L553:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -3388,13 +3393,13 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L555
+	bls	.L556
 	rsb	r0, r1, r0
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L555:
+.L556:
 	rsb	r0, r0, r1
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -3410,14 +3415,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L558
+	ldr	r3, .L559
 	ldrh	r0, [r3, #6]
 	clz	r0, r0
 	mov	r0, r0, lsr #5
 	bx	lr
-.L559:
+.L560:
 	.align	2
-.L558:
+.L559:
 	.word	.LANCHOR0+1996
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -3429,15 +3434,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L561
+	ldr	r3, .L562
 	ldrh	r0, [r3, #6]
 	sub	r0, r0, #1024
 	clz	r0, r0
 	mov	r0, r0, lsr #5
 	bx	lr
-.L562:
+.L563:
 	.align	2
-.L561:
+.L562:
 	.word	.LANCHOR0+1996
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -3456,16 +3461,16 @@ FtlFreeSysBlkQueueIn:
 	uxth	r3, r3
 	cmp	r3, r2
 	ldmhifd	sp!, {r3, r4, r5, r6, r7, pc}
-	ldr	r4, .L573
-	ldr	r5, .L573+4
+	ldr	r4, .L574
+	ldr	r5, .L574+4
 	ldrh	r3, [r4, #6]
 	cmp	r3, #1024
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	cmp	r1, #0
-	beq	.L565
+	beq	.L566
 	ldr	r3, [r5, #4052]
 	cmp	r3, #0
-	bne	.L565
+	bne	.L566
 	bl	P2V_block_in_plane
 	mov	r1, #1
 	mov	r3, r7, asl #10
@@ -3482,7 +3487,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r5, #4064]
 	add	r3, r3, #1
 	str	r3, [r5, #4064]
-.L565:
+.L566:
 	ldrh	r3, [r4, #6]
 	add	r3, r3, #1
 	strh	r3, [r4, #6]	@ movhi
@@ -3493,9 +3498,9 @@ FtlFreeSysBlkQueueIn:
 	strh	r3, [r4, #4]	@ movhi
 	strh	r7, [r2, #8]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L574:
+.L575:
 	.align	2
-.L573:
+.L574:
 	.word	.LANCHOR0+1996
 	.word	.LANCHOR0
 	.fnend
@@ -3507,9 +3512,9 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L588
+	ldr	r3, .L589
 	ldrh	ip, [r3, #28]
-	ldr	r3, .L588+4
+	ldr	r3, .L589+4
 	ldrh	r2, [r3, #6]
 	cmp	r2, #0
 	bxeq	lr
@@ -3520,11 +3525,11 @@ FtlFreeSysBLkSort:
 	and	ip, ip, #31
 	ldrh	r2, [r3, #4]
 	mov	r4, r0
-.L577:
+.L578:
 	uxth	lr, r0
 	add	r0, r0, #1
 	cmp	lr, ip
-	bge	.L587
+	bge	.L588
 	add	lr, r3, r1, asl #1
 	add	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -3534,15 +3539,15 @@ FtlFreeSysBLkSort:
 	mov	r4, #1
 	add	r2, r2, r4
 	ubfx	r2, r2, #0, #10
-	b	.L577
-.L587:
+	b	.L578
+.L588:
 	cmp	r4, #0
 	strneh	r1, [r3, #2]	@ movhi
 	strneh	r2, [r3, #4]	@ movhi
 	ldmfd	sp!, {r4, pc}
-.L589:
+.L590:
 	.align	2
-.L588:
+.L589:
 	.word	.LANCHOR0+4068
 	.word	.LANCHOR0+1996
 	.fnend
@@ -3556,13 +3561,13 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
-	ldr	r6, .L601
-	ldr	r5, .L601+4
+	ldr	r6, .L602
+	ldr	r5, .L602+4
 	mov	r7, r6
-.L591:
+.L592:
 	ldrh	r1, [r5, #6]
 	cmp	r1, #0
-	beq	.L592
+	beq	.L593
 	ldrh	r3, [r5, #2]
 	sub	r1, r1, #1
 	ldr	r9, [r6, #4052]
@@ -3573,7 +3578,7 @@ FtlFreeSysBlkQueueOut:
 	ubfx	r3, r3, #0, #10
 	ldrh	r4, [r2, #8]
 	strh	r3, [r5, #2]	@ movhi
-	bne	.L593
+	bne	.L594
 	mov	r0, r4
 	bl	P2V_block_in_plane
 	mov	r3, r4, asl #10
@@ -3582,11 +3587,11 @@ FtlFreeSysBlkQueueOut:
 	str	r3, [r0, #4]
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L594
+	beq	.L595
 	mov	r1, r9
 	mov	r2, #1
 	bl	FlashEraseBlocks
-.L594:
+.L595:
 	mov	r1, #1
 	ldr	r0, [r7, #4056]
 	mov	r2, r1
@@ -3599,30 +3604,30 @@ FtlFreeSysBlkQueueOut:
 	ldr	r3, [r7, #4064]
 	add	r3, r3, #1
 	str	r3, [r7, #4064]
-	b	.L593
-.L592:
-	ldr	r0, .L601+8
-	bl	printk
-.L595:
-	b	.L595
+	b	.L594
 .L593:
+	ldr	r0, .L602+8
+	bl	printk
+.L596:
+	b	.L596
+.L594:
 	sub	r3, r4, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L596
-	ldr	r3, .L601+4
+	bls	.L597
+	ldr	r3, .L602+4
 	mov	r1, r4
-	ldr	r0, .L601+12
+	ldr	r0, .L602+12
 	ldrh	r2, [r3, #6]
 	bl	printk
-	b	.L591
-.L596:
+	b	.L592
+.L597:
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L602:
+.L603:
 	.align	2
-.L601:
+.L602:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1996
 	.word	.LC3
@@ -3636,35 +3641,35 @@ test_node_in_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L609
+	ldr	r3, .L610
 	str	lr, [sp, #-4]!
 	.save {lr}
 	movw	lr, #65535
 	ldr	ip, [r3, #-4068]
 	ldr	r2, [r0]
-	ldr	r3, .L609+4
+	ldr	r3, .L610+4
 	rsb	r0, ip, r2
 	mov	r0, r0, asr #1
 	mul	r3, r3, r0
 	mov	r0, #6
 	uxth	r3, r3
-.L605:
+.L606:
 	cmp	r1, r3
-	beq	.L606
+	beq	.L607
 	ldrh	r3, [r2]
 	cmp	r3, lr
-	beq	.L607
+	beq	.L608
 	mla	r2, r0, r3, ip
-	b	.L605
-.L606:
+	b	.L606
+.L607:
 	mov	r0, #1
 	ldr	pc, [sp], #4
-.L607:
+.L608:
 	mov	r0, #0
 	ldr	pc, [sp], #4
-.L610:
+.L611:
 	.align	2
-.L609:
+.L610:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -3680,11 +3685,11 @@ insert_data_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r3, #1812
-	ldr	r5, .L628
+	ldr	r5, .L629
 	ldrh	r3, [r5, r3]
 	cmp	r3, r0
-	bls	.L613
-	ldr	r2, .L628+4
+	bls	.L614
+	ldr	r2, .L629+4
 	mov	lr, #6
 	mul	lr, lr, r0
 	mvn	ip, #0
@@ -3695,7 +3700,7 @@ insert_data_list:
 	strh	ip, [r6, lr]	@ movhi
 	ldr	r3, [r2, #-4064]
 	cmp	r3, #0
-	beq	.L627
+	beq	.L628
 	ldr	r8, [r2, #-4060]
 	mov	r4, r0, asl #1
 	ldrh	r2, [r1, #4]
@@ -3704,7 +3709,7 @@ insert_data_list:
 	cmp	r2, #0
 	rsb	r10, r7, r3
 	mulne	ip, r2, r9
-	ldr	r2, .L628+8
+	ldr	r2, .L629+8
 	mov	r10, r10, asr #1
 	movw	r9, #1812
 	ldrh	r9, [r5, r9]
@@ -3715,7 +3720,7 @@ insert_data_list:
 	str	r4, [sp, #4]
 	uxth	r2, r10
 	mov	r4, #0
-.L622:
+.L623:
 	add	r4, r4, #1
 	ldr	r5, [sp]
 	uxth	r4, r4
@@ -3725,7 +3730,7 @@ insert_data_list:
 	cmp	r0, r2
 	orreq	r5, r5, #1
 	cmp	r5, #0
-	bne	.L613
+	bne	.L614
 	mov	r10, r2, asl #1
 	ldrh	r5, [r3, #4]
 	ldrh	fp, [r8, r10]
@@ -3733,56 +3738,56 @@ insert_data_list:
 	mvneq	r5, #0
 	mulne	r5, r5, fp
 	cmp	r5, ip
-	bne	.L618
+	bne	.L619
 	ldr	r5, [sp, #4]
 	ldrh	r10, [r9, r10]
 	ldrh	r5, [r5]
 	cmp	r10, r5
-	bcc	.L620
-	b	.L619
-.L618:
-	bhi	.L619
-.L620:
+	bcc	.L621
+	b	.L620
+.L619:
+	bhi	.L620
+.L621:
 	ldrh	r5, [r3]
 	movw	r10, #65535
 	cmp	r5, r10
 	streqh	r2, [r1, #2]	@ movhi
 	streqh	r0, [r3]	@ movhi
-	ldreq	r3, .L628+4
+	ldreq	r3, .L629+4
 	streq	r1, [r3, #-4056]
-	beq	.L613
-.L621:
+	beq	.L614
+.L622:
 	mov	r3, #6
 	mov	r2, r5
 	mla	r3, r3, r5, r7
-	b	.L622
-.L619:
+	b	.L623
+.L620:
 	strh	r2, [r6, lr]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [r1, #2]	@ movhi
-	ldr	r2, .L628+4
+	ldr	r2, .L629+4
 	ldr	ip, [r2, #-4064]
 	cmp	r3, ip
-	bne	.L623
+	bne	.L624
 	strh	r0, [r3, #2]	@ movhi
-.L627:
+.L628:
 	str	r1, [r2, #-4064]
-	b	.L613
-.L623:
+	b	.L614
+.L624:
 	ldrh	ip, [r3, #2]
 	ldr	r1, [r2, #-4068]
 	mov	r2, #6
 	mul	r2, r2, ip
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L613:
+.L614:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L629:
+.L630:
 	.align	2
-.L628:
+.L629:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1431655765
@@ -3798,14 +3803,14 @@ INSERT_DATA_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L632
+	ldr	r2, .L633
 	ldrh	r3, [r2, #-4]
 	add	r3, r3, #1
 	strh	r3, [r2, #-4]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L633:
+.L634:
 	.align	2
-.L632:
+.L633:
 	.word	.LANCHOR2-4048
 	.fnend
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -3820,8 +3825,8 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L635
-	ldr	r2, .L643
+	beq	.L636
+	ldr	r2, .L644
 	mov	lr, #6
 	mul	r5, lr, r0
 	mvn	r3, #0
@@ -3832,56 +3837,56 @@ insert_free_list:
 	strh	r3, [r6, r5]	@ movhi
 	ldr	r3, [r2, #-4048]
 	cmp	r3, #0
-	beq	.L642
-	ldr	r2, .L643+4
+	beq	.L643
+	ldr	r2, .L644+4
 	ldr	r8, [r7, #-4068]
 	ldr	r9, [r2, #4060]
 	mov	r2, r0, asl #1
 	rsb	r1, r8, r3
 	ldrh	r10, [r9, r2]
 	mov	r1, r1, asr #1
-	ldr	r2, .L643+8
+	ldr	r2, .L644+8
 	mul	r1, r2, r1
 	uxth	r2, r1
-.L639:
+.L640:
 	mov	r1, r2, asl #1
 	ldrh	r1, [r9, r1]
 	cmp	r1, r10
-	bcs	.L637
+	bcs	.L638
 	ldrh	r1, [r3]
 	cmp	r1, r4
 	streqh	r2, [ip, #2]	@ movhi
 	streqh	r0, [r3]	@ movhi
-	beq	.L635
-.L638:
+	beq	.L636
+.L639:
 	mla	r3, lr, r1, r8
 	mov	r2, r1
-	b	.L639
-.L637:
+	b	.L640
+.L638:
 	ldrh	r1, [r3, #2]
 	strh	r1, [ip, #2]	@ movhi
 	strh	r2, [r6, r5]	@ movhi
 	ldr	r1, [r7, #-4048]
-	ldr	r2, .L643
+	ldr	r2, .L644
 	cmp	r3, r1
-	bne	.L640
+	bne	.L641
 	strh	r0, [r3, #2]	@ movhi
-.L642:
+.L643:
 	str	ip, [r2, #-4048]
-	b	.L635
-.L640:
+	b	.L636
+.L641:
 	ldrh	ip, [r3, #2]
 	ldr	r1, [r2, #-4068]
 	mov	r2, #6
 	mul	r2, r2, ip
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L635:
+.L636:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L644:
+.L645:
 	.align	2
-.L643:
+.L644:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	-1431655765
@@ -3897,14 +3902,14 @@ INSERT_FREE_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L647
+	ldr	r2, .L648
 	ldrh	r3, [r2, #-12]
 	add	r3, r3, #1
 	strh	r3, [r2, #-12]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L648:
+.L649:
 	.align	2
-.L647:
+.L648:
 	.word	.LANCHOR2-4032
 	.fnend
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -3918,7 +3923,7 @@ List_remove_node:
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	ip, #6
-	ldr	r4, .L655
+	ldr	r4, .L656
 	movw	r5, #65535
 	mul	r1, ip, r1
 	ldr	r3, [r0]
@@ -3926,7 +3931,7 @@ List_remove_node:
 	add	lr, r2, r1
 	cmp	lr, r3
 	ldrh	r3, [r2, r1]
-	bne	.L650
+	bne	.L651
 	cmp	r3, r5
 	mlane	r3, ip, r3, r2
 	moveq	r3, #0
@@ -3934,17 +3939,17 @@ List_remove_node:
 	strne	r3, [r0]
 	mvnne	r0, #0
 	strneh	r0, [r3, #2]	@ movhi
-	b	.L652
-.L650:
+	b	.L653
+.L651:
 	cmp	r3, r5
 	ldrh	r0, [lr, #2]
-	bne	.L653
+	bne	.L654
 	cmp	r0, r3
 	mulne	r0, ip, r0
 	mvnne	r3, #0
 	strneh	r3, [r2, r0]	@ movhi
-	b	.L652
-.L653:
+	b	.L653
+.L654:
 	mla	r3, ip, r3, r2
 	strh	r0, [r3, #2]	@ movhi
 	ldrh	r5, [lr, #2]
@@ -3952,15 +3957,15 @@ List_remove_node:
 	ldr	r3, [r4, #-4068]
 	mul	ip, ip, r5
 	strh	r0, [r3, ip]	@ movhi
-.L652:
+.L653:
 	mvn	r3, #0
 	mov	r0, #0
 	strh	r3, [r2, r1]	@ movhi
 	strh	r3, [lr, #2]	@ movhi
 	ldmfd	sp!, {r4, r5, pc}
-.L656:
+.L657:
 	.align	2
-.L655:
+.L656:
 	.word	.LANCHOR2
 	.fnend
 	.size	List_remove_node, .-List_remove_node
@@ -3973,19 +3978,19 @@ List_pop_index_node:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	ldr	r3, [r0]
 	cmp	r3, #0
-	beq	.L663
-	ldr	r2, .L666
+	beq	.L664
+	ldr	r2, .L667
 	movw	ip, #65535
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	lr, #6
 	ldr	r4, [r2, #-4068]
-.L659:
+.L660:
 	cmp	r1, #0
-	bne	.L660
-.L662:
+	bne	.L661
+.L663:
 	rsb	r4, r4, r3
-	ldr	r3, .L666+4
+	ldr	r3, .L667+4
 	mov	r4, r4, asr #1
 	mul	r4, r3, r4
 	uxth	r4, r4
@@ -3993,20 +3998,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L660:
+.L661:
 	ldrh	r2, [r3]
 	cmp	r2, ip
-	beq	.L662
+	beq	.L663
 	sub	r1, r1, #1
 	mla	r3, lr, r2, r4
 	uxth	r1, r1
-	b	.L659
-.L663:
+	b	.L660
+.L664:
 	movw	r0, #65535
 	bx	lr
-.L667:
+.L668:
 	.align	2
-.L666:
+.L667:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4019,35 +4024,35 @@ List_get_gc_head_node:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L675
+	ldr	r2, .L676
 	ldr	r3, [r2, #-4064]
 	cmp	r3, #0
 	ldrne	r1, [r2, #-4068]
 	movne	ip, #6
 	movwne	r2, #65535
-	beq	.L673
-.L670:
+	beq	.L674
+.L671:
 	cmp	r0, #0
-	beq	.L671
+	beq	.L672
 	ldrh	r3, [r3]
 	cmp	r3, r2
 	subne	r0, r0, #1
 	mlane	r3, ip, r3, r1
 	uxthne	r0, r0
-	bne	.L670
-.L673:
+	bne	.L671
+.L674:
 	movw	r0, #65535
 	bx	lr
-.L671:
+.L672:
 	rsb	r3, r1, r3
-	ldr	r0, .L675+4
+	ldr	r0, .L676+4
 	mov	r3, r3, asr #1
 	mul	r0, r0, r3
 	uxth	r0, r0
 	bx	lr
-.L676:
+.L677:
 	.align	2
-.L675:
+.L676:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4059,19 +4064,19 @@ List_update_data_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L686
+	ldr	r3, .L687
 	sub	r2, r3, #4032
 	ldrh	r2, [r2, #-8]
 	cmp	r2, r0
-	beq	.L685
+	beq	.L686
 	sub	r2, r3, #3984
 	ldrh	r2, [r2, #-8]
 	cmp	r2, r0
-	beq	.L685
+	beq	.L686
 	sub	r2, r3, #3936
 	ldrh	r2, [r2, #-8]
 	cmp	r2, r0
-	beq	.L685
+	beq	.L686
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	lr, #6
@@ -4080,7 +4085,7 @@ List_update_data_list:
 	ldr	r2, [r3, #-4064]
 	add	ip, r1, lr
 	cmp	ip, r2
-	beq	.L678
+	beq	.L679
 	ldr	r4, [r3, #-4060]
 	mov	r3, r0, asl #1
 	ldrh	r2, [r4, r3]
@@ -4091,14 +4096,14 @@ List_update_data_list:
 	mvneq	r2, #0
 	movw	r3, #65535
 	cmp	ip, r3
-	bne	.L680
+	bne	.L681
 	ldrh	r3, [r1, lr]
 	cmp	r3, ip
-	beq	.L678
-.L680:
+	beq	.L679
+.L681:
 	mov	r3, #6
 	mul	ip, r3, ip
-	ldr	r3, .L686+4
+	ldr	r3, .L687+4
 	add	r1, r1, ip
 	mov	lr, ip, asr #1
 	mul	r3, r3, lr
@@ -4109,26 +4114,26 @@ List_update_data_list:
 	mulne	r3, r3, lr
 	mvneq	r3, #0
 	cmp	r2, r3
-	bcs	.L678
+	bcs	.L679
 	mov	r4, r0
-	ldr	r0, .L686+8
+	ldr	r0, .L687+8
 	mov	r1, r4
 	bl	List_remove_node
-	ldr	r2, .L686+12
+	ldr	r2, .L687+12
 	mov	r0, r4
 	ldrh	r3, [r2, #-4]
 	sub	r3, r3, #1
 	strh	r3, [r2, #-4]	@ movhi
 	bl	INSERT_DATA_LIST
-.L678:
+.L679:
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L685:
+.L686:
 	mov	r0, #0
 	bx	lr
-.L687:
+.L688:
 	.align	2
-.L686:
+.L687:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.word	.LANCHOR2-4064
@@ -4147,16 +4152,16 @@ ftl_map_blk_alloc_new_blk:
 	mov	r3, #0
 	ldrh	r1, [r0, #10]
 	ldr	r2, [r0, #12]
-.L689:
+.L690:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L692
+	bcs	.L693
 	mov	r7, r2
 	add	r3, r3, #1
 	ldrh	r6, [r7]
 	add	r2, r2, #2
 	cmp	r6, #0
-	bne	.L689
+	bne	.L690
 	mov	r4, r0
 	bl	FtlFreeSysBlkQueueOut
 	movw	r2, #65533
@@ -4165,14 +4170,14 @@ ftl_map_blk_alloc_new_blk:
 	strh	r0, [r7]	@ movhi
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L690
-	ldr	r3, .L696
-	ldr	r0, .L696+4
+	bls	.L691
+	ldr	r3, .L697
+	ldr	r0, .L697+4
 	ldrh	r2, [r3, #6]
 	bl	printk
+.L692:
+	b	.L692
 .L691:
-	b	.L691
-.L690:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	add	r3, r3, #1
@@ -4181,12 +4186,12 @@ ftl_map_blk_alloc_new_blk:
 	strh	r5, [r4]	@ movhi
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L692:
+.L693:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L697:
+.L698:
 	.align	2
-.L696:
+.L697:
 	.word	.LANCHOR0+1996
 	.word	.LC5
 	.fnend
@@ -4198,35 +4203,35 @@ select_l2p_ram_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L714
+	ldr	r2, .L715
 	movw	r3, #1910
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r1, #0
 	ldrh	r2, [r2, r3]
 	mov	ip, #12
-	ldr	r3, .L714+4
+	ldr	r3, .L715+4
 	movw	lr, #65535
 	ldr	r3, [r3, #-3896]
-.L699:
+.L700:
 	uxth	r0, r1
 	cmp	r0, r2
-	bcs	.L711
+	bcs	.L712
 	add	r1, r1, #1
 	mla	r4, ip, r1, r3
 	ldrh	r4, [r4, #-12]
 	cmp	r4, lr
-	bne	.L699
+	bne	.L700
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L711:
+.L712:
 	mov	r0, r2
 	mov	r1, #0
 	mov	ip, #-2147483648
 	mov	r5, #12
-.L702:
+.L703:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcs	.L712
+	bcs	.L713
 	mla	lr, r5, r1, r3
 	add	r1, r1, #1
 	ldr	lr, [lr, #4]
@@ -4237,35 +4242,35 @@ select_l2p_ram_region:
 	cmp	r6, #0
 	movne	ip, lr
 	movne	r0, r4
-	b	.L702
-.L712:
+	b	.L703
+.L713:
 	cmp	r0, r2
 	ldmccfd	sp!, {r4, r5, r6, pc}
-	ldr	r1, .L714+8
+	ldr	r1, .L715+8
 	mov	r0, r2
 	mvn	ip, #0
 	ldrh	r5, [r1, #-4]
 	mov	r1, #0
-.L705:
+.L706:
 	uxth	lr, r1
 	cmp	lr, r2
-	bcs	.L713
+	bcs	.L714
 	ldr	r4, [r3, #4]
 	cmp	r4, ip
-	bcs	.L706
+	bcs	.L707
 	ldrh	r6, [r3]
 	cmp	r6, r5
 	movne	ip, r4
 	movne	r0, lr
-.L706:
+.L707:
 	add	r1, r1, #1
 	add	r3, r3, #12
-	b	.L705
-.L713:
+	b	.L706
+.L714:
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L715:
+.L716:
 	.align	2
-.L714:
+.L715:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3888
@@ -4278,7 +4283,7 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L724
+	ldr	r3, .L725
 	sub	r1, r3, #3888
 	ldrh	r2, [r1, #-2]
 	cmp	r2, #4
@@ -4286,7 +4291,7 @@ FtlUpdateVaildLpn:
 	addeq	r2, r2, #1
 	streqh	r2, [r1, #-2]	@ movhi
 	bxeq	lr
-	ldr	r0, .L724+4
+	ldr	r0, .L725+4
 	mov	r2, #0
 	str	lr, [sp, #-4]!
 	.save {lr}
@@ -4297,20 +4302,20 @@ FtlUpdateVaildLpn:
 	str	r2, [r3, #-3888]
 	ldr	r2, [r3, #-4060]
 	add	r0, r2, r0, asl #1
-.L718:
+.L719:
 	cmp	r2, r0
-	beq	.L723
+	beq	.L724
 	ldrh	r1, [r2], #2
 	cmp	r1, ip
 	ldrne	lr, [r3, #-3888]
 	addne	r1, r1, lr
 	strne	r1, [r3, #-3888]
-	b	.L718
-.L723:
+	b	.L719
+.L724:
 	ldr	pc, [sp], #4
-.L725:
+.L726:
 	.align	2
-.L724:
+.L725:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -4323,7 +4328,7 @@ ftl_set_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L730
+	ldr	r2, .L731
 	mov	r3, r0, lsr #5
 	cmp	r1, #0
 	and	r0, r0, #31
@@ -4335,9 +4340,9 @@ ftl_set_blk_mode:
 	biceq	r0, r2, ip, asl r0
 	str	r0, [r1, r3, asl #2]
 	bx	lr
-.L731:
+.L732:
 	.align	2
-.L730:
+.L731:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -4349,7 +4354,7 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L733
+	ldr	r3, .L734
 	mov	r2, r0, lsr #5
 	and	r0, r0, #31
 	ldr	r3, [r3, #-3884]
@@ -4357,9 +4362,9 @@ ftl_get_blk_mode:
 	mov	r0, r3, lsr r0
 	and	r0, r0, #1
 	bx	lr
-.L734:
+.L735:
 	.align	2
-.L733:
+.L734:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -4370,7 +4375,7 @@ ftl_sb_update_avl_pages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L745
+	ldr	ip, .L746
 	mov	r3, #0
 	strh	r3, [r0, #4]	@ movhi
 	movw	r3, #1804
@@ -4380,9 +4385,9 @@ ftl_sb_update_avl_pages:
 	ldrh	lr, [ip, r3]
 	add	r3, r2, #7
 	add	r3, r0, r3, asl #1
-.L736:
+.L737:
 	cmp	r2, lr
-	bcs	.L743
+	bcs	.L744
 	ldrh	ip, [r3, #2]!
 	add	r2, r2, #1
 	cmp	ip, r4
@@ -4390,17 +4395,17 @@ ftl_sb_update_avl_pages:
 	ldrneh	ip, [r0, #4]
 	addne	ip, ip, #1
 	strneh	ip, [r0, #4]	@ movhi
-	b	.L736
-.L743:
-	ldr	r3, .L745+4
+	b	.L737
+.L744:
+	ldr	r3, .L746+4
 	add	ip, r0, #14
 	mov	r2, #0
 	movw	r5, #65535
 	ldrh	r4, [r3]
-.L739:
+.L740:
 	uxth	r3, r2
 	cmp	r3, lr
-	bcs	.L744
+	bcs	.L745
 	ldrh	r3, [ip, #2]!
 	add	r2, r2, #1
 	cmp	r3, r5
@@ -4409,12 +4414,12 @@ ftl_sb_update_avl_pages:
 	subne	r3, r3, #1
 	rsbne	r3, r1, r3
 	strneh	r3, [r0, #4]	@ movhi
-	b	.L739
-.L744:
+	b	.L740
+.L745:
 	ldmfd	sp!, {r4, r5, pc}
-.L746:
+.L747:
 	.align	2
-.L745:
+.L746:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1872
 	.fnend
@@ -4429,9 +4434,9 @@ make_superblock:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movw	r2, #1804
-	ldr	r6, .L761
+	ldr	r6, .L762
 	mov	r3, #0
-	ldr	r10, .L761+4
+	ldr	r10, .L762+4
 	add	r7, r0, #16
 	mov	r4, r0
 	mov	r5, r3
@@ -4439,10 +4444,10 @@ make_superblock:
 	mvn	r9, #0
 	strh	r3, [r0, #4]	@ movhi
 	strb	r3, [r0, #7]
-.L748:
+.L749:
 	uxth	r3, r5
 	cmp	r3, r8
-	bcs	.L760
+	bcs	.L761
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	add	r7, r7, #2
 	ldrh	r1, [r4]
@@ -4456,9 +4461,9 @@ make_superblock:
 	ldreqb	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	streqb	r3, [r4, #7]
-	b	.L748
-.L760:
-	ldr	r2, .L761
+	b	.L749
+.L761:
+	ldr	r2, .L762
 	ldrb	r1, [r4, #7]	@ zero_extendqisi2
 	add	r3, r2, #1872
 	ldrh	r3, [r3]
@@ -4468,7 +4473,7 @@ make_superblock:
 	strb	r3, [r4, #9]
 	ldr	r3, [r6, #1796]
 	cmp	r3, #0
-	beq	.L751
+	beq	.L752
 	ldrh	r3, [r4]
 	ldr	r2, [r2, #4060]
 	mov	r3, r3, asl #1
@@ -4476,16 +4481,16 @@ make_superblock:
 	cmp	r3, #79
 	movls	r3, #1
 	strlsb	r3, [r4, #9]
-.L751:
+.L752:
 	ldrb	r3, [r6]	@ zero_extendqisi2
 	mov	r0, #0
 	cmp	r3, #0
 	movne	r3, #1
 	strneb	r3, [r4, #9]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L762:
+.L763:
 	.align	2
-.L761:
+.L762:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1832
 	.fnend
@@ -4500,7 +4505,7 @@ update_multiplier_value:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movw	r2, #1804
-	ldr	r3, .L773
+	ldr	r3, .L774
 	mov	r5, #0
 	mov	r6, r0
 	mov	r4, r5
@@ -4508,10 +4513,10 @@ update_multiplier_value:
 	add	r3, r3, #1872
 	sub	r9, r3, #40
 	ldrh	r8, [r3]
-.L764:
+.L765:
 	uxth	r3, r5
 	cmp	r3, r7
-	bcs	.L772
+	bcs	.L773
 	ldrb	r0, [r9, r5]	@ zero_extendqisi2
 	mov	r1, r6
 	bl	V2P_block
@@ -4520,25 +4525,25 @@ update_multiplier_value:
 	cmp	r0, #0
 	addeq	r4, r4, r8
 	uxtheq	r4, r4
-	b	.L764
-.L772:
+	b	.L765
+.L773:
 	cmp	r4, #0
-	beq	.L767
+	beq	.L768
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r4, r0
-.L767:
-	ldr	r3, .L773+4
+.L768:
+	ldr	r3, .L774+4
 	mov	r2, #6
 	mov	r0, #0
 	ldr	r3, [r3, #-4068]
 	mla	r6, r2, r6, r3
 	strh	r4, [r6, #4]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L774:
+.L775:
 	.align	2
-.L773:
+.L774:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4551,24 +4556,24 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L778
+	ldr	r3, .L779
 	ldr	r0, [r3, #-4048]
 	cmp	r0, #0
 	bxeq	lr
 	ldr	r3, [r3, #-4068]
 	rsb	r0, r3, r0
-	ldr	r3, .L778+4
+	ldr	r3, .L779+4
 	mov	r0, r0, asr #1
 	mul	r0, r3, r0
-	ldr	r3, .L778+8
+	ldr	r3, .L779+8
 	ldr	r3, [r3, #4060]
 	uxth	r0, r0
 	mov	r0, r0, asl #1
 	ldrh	r0, [r3, r0]
 	bx	lr
-.L779:
+.L780:
 	.align	2
-.L778:
+.L779:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.word	.LANCHOR0
@@ -4581,10 +4586,10 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L790
+	ldr	r1, .L791
 	ldr	r3, [r1, #-4048]
 	cmp	r3, #0
-	beq	.L786
+	beq	.L787
 	sub	r2, r1, #4032
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
@@ -4598,34 +4603,34 @@ GetFreeBlockMaxEraseCount:
 	mov	r3, r3, asr #1
 	cmp	r0, r2
 	uxthgt	r0, r2
-	ldr	r2, .L790+4
+	ldr	r2, .L791+4
 	mul	r3, r2, r3
 	mov	r2, #0
 	uxth	r3, r3
-.L783:
+.L784:
 	uxth	ip, r2
 	cmp	ip, r0
-	bcs	.L785
+	bcs	.L786
 	mul	ip, lr, r3
 	add	r2, r2, #1
 	ldrh	ip, [r1, ip]
 	cmp	ip, r4
-	bne	.L787
-.L785:
-	ldr	r2, .L790+8
+	bne	.L788
+.L786:
+	ldr	r2, .L791+8
 	mov	r3, r3, asl #1
 	ldr	r2, [r2, #4060]
 	ldrh	r0, [r2, r3]
 	ldmfd	sp!, {r4, pc}
-.L787:
+.L788:
 	mov	r3, ip
-	b	.L783
-.L786:
+	b	.L784
+.L787:
 	mov	r0, r3
 	bx	lr
-.L791:
+.L792:
 	.align	2
-.L790:
+.L791:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.word	.LANCHOR0
@@ -4641,38 +4646,38 @@ FtlPrintInfo2buf:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r7, .L804
+	ldr	r7, .L805
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r6, .L804+4
+	ldr	r6, .L805+4
 	add	r5, r8, #12
-	ldr	r1, .L804+8
+	ldr	r1, .L805+8
 	ldr	r3, [r7]
 	str	r3, [sp, #44]
 	bl	strcpy
 	mov	r0, r5
-	ldr	r1, .L804+12
+	ldr	r1, .L805+12
 	ldr	r2, [r6, #112]
 	bl	sprintf
-	ldr	r1, .L804+16
+	ldr	r1, .L805+16
 	ldr	r2, [r6, #1888]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L804+20
+	ldr	r3, .L805+20
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
 	add	r4, r5, r0
-	bne	.L798
+	bne	.L799
 	add	r0, sp, #28
 	add	r1, sp, #32
 	add	r2, sp, #36
 	add	r3, sp, #40
 	bl	NandcGetTimeCfg
 	mov	r0, r4
-	ldr	r1, .L804+24
-	ldr	r9, .L804+28
-	ldr	r10, .L804+32
+	ldr	r1, .L805+24
+	ldr	r9, .L805+28
+	ldr	r10, .L805+32
 	sub	fp, r9, #4032
 	ldr	r3, [sp, #36]
 	ldr	r2, [sp, #28]
@@ -4681,69 +4686,69 @@ FtlPrintInfo2buf:
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #32]
 	bl	sprintf
-	ldr	r1, .L804+36
+	ldr	r1, .L805+36
 	add	r4, r4, r0
 	add	r5, r4, #10
 	mov	r0, r4
 	add	r4, r6, #1936
 	bl	strcpy
 	mov	r0, r5
-	ldr	r1, .L804+40
+	ldr	r1, .L805+40
 	ldr	r2, [r6, #1932]
 	bl	sprintf
-	ldr	r1, .L804+44
+	ldr	r1, .L805+44
 	ldr	r2, [r9, #-3888]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+48
+	ldr	r1, .L805+48
 	ldr	r2, [r9, #-3880]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+52
+	ldr	r1, .L805+52
 	ldr	r2, [r9, #-3876]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+56
+	ldr	r1, .L805+56
 	ldr	r2, [r9, #-3872]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+60
+	ldr	r1, .L805+60
 	ldr	r2, [r9, #-3868]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+64
+	ldr	r1, .L805+64
 	ldr	r2, [r9, #-3864]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+68
+	ldr	r1, .L805+68
 	ldr	r2, [r9, #-3860]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldr	r2, [r9, #-3856]
-	ldr	r1, .L804+72
+	ldr	r1, .L805+72
 	mov	r2, r2, lsr #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldr	r2, [r9, #-3852]
-	ldr	r1, .L804+76
+	ldr	r1, .L805+76
 	mov	r2, r2, lsr #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+80
+	ldr	r1, .L805+80
 	ldr	r2, [r9, #-3848]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+84
+	ldr	r1, .L805+84
 	ldr	r2, [r9, #-3844]
 	add	r5, r5, r0
 	mov	r0, r5
@@ -4751,218 +4756,218 @@ FtlPrintInfo2buf:
 	add	r5, r5, r0
 	bl	FtlBbtCalcTotleCnt
 	ldrh	r2, [r4, #6]
-	ldr	r1, .L804+88
+	ldr	r1, .L805+88
 	mov	r3, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+92
+	ldr	r1, .L805+92
 	ldrh	r2, [fp, #-12]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+96
+	ldr	r1, .L805+96
 	ldr	r2, [r9, #-3840]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+100
+	ldr	r1, .L805+100
 	ldr	r2, [r9, #-3836]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+104
+	ldr	r1, .L805+104
 	ldr	r2, [r9, #-3832]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+108
+	ldr	r1, .L805+108
 	ldr	r2, [r6, #4064]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+112
+	ldr	r1, .L805+112
 	ldr	r2, [r9, #-3828]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+116
+	ldr	r1, .L805+116
 	ldr	r2, [r9, #-3824]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #30]
-	ldr	r1, .L804+120
+	ldr	r1, .L805+120
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #28]
-	ldr	r1, .L804+124
+	ldr	r1, .L805+124
 	sub	r10, r9, #3808
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+128
+	ldr	r1, .L805+128
 	ldr	r2, [r6, #1912]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+132
+	ldr	r1, .L805+132
 	ldr	r2, [r6, #1904]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+136
+	ldr	r1, .L805+136
 	ldr	r2, [r6, #1800]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #66]
-	ldr	r1, .L804+140
+	ldr	r1, .L805+140
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	movw	r3, #1812
 	ldrh	r2, [r6, r3]
-	ldr	r1, .L804+144
+	ldr	r1, .L805+144
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-12]
-	ldr	r1, .L804+148
+	ldr	r1, .L805+148
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+152
+	ldr	r1, .L805+152
 	ldr	r2, [r6, #1816]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-8]
-	ldr	r1, .L804+156
+	ldr	r1, .L805+156
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4]
-	ldr	r1, .L804+160
+	ldr	r1, .L805+160
 	sub	r4, r9, #3984
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-230]
-	ldr	r1, .L804+164
+	ldr	r1, .L805+164
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+168
+	ldr	r1, .L805+168
 	ldrb	r2, [r9, #-4034]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+172
+	ldr	r1, .L805+172
 	ldrh	r2, [fp, #-8]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+176
+	ldr	r1, .L805+176
 	ldrb	r2, [r9, #-4032]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-228]
-	ldr	r1, .L804+180
+	ldr	r1, .L805+180
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r3, [fp, #-8]
 	ldr	r2, [r9, #-4060]
-	ldr	r1, .L804+184
+	ldr	r1, .L805+184
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-182]
-	ldr	r1, .L804+188
+	ldr	r1, .L805+188
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+192
+	ldr	r1, .L805+192
 	ldrb	r2, [r9, #-3986]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #-8]
-	ldr	r1, .L804+196
+	ldr	r1, .L805+196
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+200
+	ldr	r1, .L805+200
 	ldrb	r2, [r9, #-3984]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-180]
-	ldr	r1, .L804+204
+	ldr	r1, .L805+204
 	sub	r10, r9, #3936
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r3, [r4, #-8]
 	ldr	r2, [r9, #-4060]
-	ldr	r1, .L804+208
+	ldr	r1, .L805+208
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #42]
-	ldr	r1, .L804+212
+	ldr	r1, .L805+212
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+216
+	ldr	r1, .L805+216
 	ldrb	r2, [r9, #-3938]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r10, #-8]
-	ldr	r1, .L804+220
+	ldr	r1, .L805+220
 	sub	r10, r9, #3792
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+224
+	ldr	r1, .L805+224
 	ldrb	r2, [r9, #-3936]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #44]
-	ldr	r1, .L804+228
+	ldr	r1, .L805+228
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #186]
-	ldr	r1, .L804+232
+	ldr	r1, .L805+232
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+236
+	ldr	r1, .L805+236
 	ldrb	r2, [r9, #-3794]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+240
+	ldr	r1, .L805+240
 	ldrh	r2, [r10, #-8]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L804+244
+	ldr	r1, .L805+244
 	ldrb	r2, [r9, #-3792]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, #188]
-	ldr	r1, .L804+248
+	ldr	r1, .L805+248
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
@@ -4976,50 +4981,50 @@ FtlPrintInfo2buf:
 	ldr	r1, [r9, #-3672]
 	mov	r0, r5
 	str	r1, [sp, #4]
-	ldr	r1, .L804+252
+	ldr	r1, .L805+252
 	bl	sprintf
-	ldr	r1, .L804+256
+	ldr	r1, .L805+256
 	ldr	r2, [r9, #-3676]
 	add	r4, r5, r0
 	sub	r5, r9, #3232
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L804+260
+	ldr	r1, .L805+260
 	ldr	r2, [r9, #-3652]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L804+264
+	ldr	r1, .L805+264
 	ldrh	r2, [r5, #-4]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L804+268
+	ldr	r1, .L805+268
 	ldrh	r2, [r5, #-2]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L804+272
+	ldr	r1, .L805+272
 	ldr	r2, [r9, #-3232]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
 	sub	r3, r9, #3216
-	ldr	r1, .L804+276
+	ldr	r1, .L805+276
 	ldrh	r2, [r3, #-12]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L804+280
+	ldr	r1, .L805+280
 	mov	r2, r0
 	mov	r0, r4
 	bl	sprintf
 	add	r4, r4, r0
 	ldrh	r0, [fp, #-12]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L804+284
+	ldr	r1, .L805+284
 	mov	r2, r0
 	mov	r0, r4
 	bl	sprintf
@@ -5027,25 +5032,25 @@ FtlPrintInfo2buf:
 	movw	r2, #65535
 	cmp	r3, r2
 	add	r4, r4, r0
-	beq	.L795
+	beq	.L796
 	ldr	r2, [r9, #-4060]
 	mov	r3, r3, asl #1
 	mov	r0, r4
-	ldr	r1, .L804+288
+	ldr	r1, .L805+288
 	ldrh	r2, [r2, r3]
 	bl	sprintf
 	add	r4, r4, r0
-.L795:
+.L796:
 	mov	r0, #0
 	mov	r5, #0
 	bl	List_get_gc_head_node
 	mov	fp, #6
 	movw	ip, #65535
 	uxth	r3, r0
-.L797:
+.L798:
 	cmp	r3, ip
 	str	ip, [sp, #20]
-	beq	.L796
+	beq	.L797
 	ldr	r2, [r9, #-4060]
 	mov	r1, r3, asl #1
 	mul	r10, fp, r3
@@ -5058,7 +5063,7 @@ FtlPrintInfo2buf:
 	str	r2, [sp, #4]
 	ldr	r2, [r6, #4060]
 	ldrh	r2, [r2, r1]
-	ldr	r1, .L804+292
+	ldr	r1, .L805+292
 	str	r2, [sp, #8]
 	mov	r2, r5
 	bl	sprintf
@@ -5068,22 +5073,22 @@ FtlPrintInfo2buf:
 	ldrh	r3, [r3, r10]
 	add	r4, r4, r0
 	ldr	ip, [sp, #20]
-	bne	.L797
-.L796:
+	bne	.L798
+.L797:
 	ldr	r3, [r9, #-4048]
 	mov	r10, #0
 	ldr	r5, [r9, #-4068]
 	movw	ip, #65535
 	rsb	r5, r5, r3
-	ldr	r3, .L804+296
+	ldr	r3, .L805+296
 	mov	r5, r5, asr #1
 	mul	r3, r3, r5
 	mov	r5, #6
 	uxth	r3, r3
-.L799:
+.L800:
 	cmp	r3, ip
 	str	ip, [sp, #20]
-	beq	.L798
+	beq	.L799
 	mul	fp, r5, r3
 	ldr	r2, [r9, #-4068]
 	ldr	r1, [r6, #4060]
@@ -5093,7 +5098,7 @@ FtlPrintInfo2buf:
 	str	r2, [sp]
 	mov	r2, r3, asl #1
 	ldrh	r2, [r1, r2]
-	ldr	r1, .L804+300
+	ldr	r1, .L805+300
 	str	r2, [sp, #4]
 	mov	r2, r10
 	bl	sprintf
@@ -5103,21 +5108,21 @@ FtlPrintInfo2buf:
 	ldrh	r3, [r3, fp]
 	add	r4, r4, r0
 	ldr	ip, [sp, #20]
-	bne	.L799
-.L798:
+	bne	.L800
+.L799:
 	ldr	r2, [sp, #44]
 	rsb	r0, r8, r4
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L800
+	beq	.L801
 	bl	__stack_chk_fail
-.L800:
+.L801:
 	add	sp, sp, #52
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L805:
+.L806:
 	.align	2
-.L804:
+.L805:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC6
@@ -5206,8 +5211,8 @@ ftl_proc_ftl_read:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r1, .L808
-	ldr	r2, .L808+4
+	ldr	r1, .L809
+	ldr	r2, .L809+4
 	bl	sprintf
 	add	r4, r5, r0
 	mov	r0, r4
@@ -5215,9 +5220,9 @@ ftl_proc_ftl_read:
 	add	r0, r4, r0
 	rsb	r0, r5, r0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L809:
+.L810:
 	.align	2
-.L808:
+.L809:
 	.word	.LC76
 	.word	.LC77
 	.fnend
@@ -5233,12 +5238,12 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L840
+	ldr	r4, .L841
 	ldr	r2, [r4, #-3832]
 	ldr	r3, [r4, #-3824]
 	cmp	r2, r3
-	bcs	.L811
-	ldr	r2, .L840+4
+	bcs	.L812
+	ldr	r2, .L841+4
 	movw	r1, #1812
 	mov	r3, #0
 	str	r3, [r4, #-3840]
@@ -5246,16 +5251,16 @@ GetSwlReplaceBlock:
 	mov	r5, r2
 	ldrh	r1, [r2, r1]
 	sub	r0, r0, #2
-.L812:
+.L813:
 	cmp	r3, r1
-	bcs	.L839
+	bcs	.L840
 	ldrh	r2, [r0, #2]!
 	add	r3, r3, #1
 	ldr	ip, [r4, #-3840]
 	add	r2, r2, ip
 	str	r2, [r4, #-3840]
-	b	.L812
-.L839:
+	b	.L813
+.L840:
 	ldr	r6, [r4, #-3840]
 	mov	r0, r6
 	bl	__aeabi_uidiv
@@ -5266,39 +5271,39 @@ GetSwlReplaceBlock:
 	rsb	r0, r0, r6
 	bl	__aeabi_uidiv
 	str	r0, [r4, #-3840]
-	b	.L814
-.L811:
+	b	.L815
+.L812:
 	ldr	r3, [r4, #-3828]
 	cmp	r2, r3
-	bls	.L814
-	ldr	lr, .L840+4
+	bls	.L815
+	ldr	lr, .L841+4
 	add	r3, r3, #1
-	ldr	ip, .L840+8
+	ldr	ip, .L841+8
 	str	r3, [r4, #-3828]
 	mov	r3, #0
-.L816:
+.L817:
 	ldrh	r2, [ip]
 	cmp	r3, r2
-	bcs	.L814
+	bcs	.L815
 	ldr	r0, [lr, #4060]
 	mov	r1, r3, asl #1
 	add	r3, r3, #1
 	ldrh	r2, [r0, r1]
 	add	r2, r2, #1
 	strh	r2, [r0, r1]	@ movhi
-	b	.L816
-.L814:
+	b	.L817
+.L815:
 	ldr	r6, [r4, #-3824]
 	ldr	r8, [r4, #-3832]
 	add	r3, r6, #256
 	cmp	r3, r8
-	bls	.L819
-	ldr	r2, .L840
+	bls	.L820
+	ldr	r2, .L841
 	add	r3, r6, #768
 	ldr	r2, [r2, #-3828]
 	cmp	r3, r2
-	bls	.L819
-	ldr	r3, .L840+4
+	bls	.L820
+	ldr	r3, .L841+4
 	cmp	r6, #40
 	ldr	r2, [r3, #1796]
 	movls	r3, #0
@@ -5306,12 +5311,12 @@ GetSwlReplaceBlock:
 	cmp	r2, #0
 	orreq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L819
-.L821:
+	beq	.L820
+.L822:
 	movw	r0, #65535
-	b	.L820
-.L819:
-	ldr	r5, .L840
+	b	.L821
+.L820:
+	ldr	r5, .L841
 	sub	r3, r5, #4032
 	ldrh	r0, [r3, #-12]
 	add	r0, r0, r0, asl #1
@@ -5325,13 +5330,13 @@ GetSwlReplaceBlock:
 	cmp	r6, #40
 	movls	r1, #0
 	cmp	r1, #0
-	bne	.L821
+	bne	.L822
 	ldr	r3, [r5, #-4064]
 	cmp	r3, #0
-	beq	.L821
-	ldr	r2, .L840+4
+	beq	.L822
+	ldr	r2, .L841+4
 	movw	r0, #1812
-	ldr	ip, .L840+12
+	ldr	ip, .L841+12
 	movw	r7, #65535
 	mov	lr, #6
 	ldrh	r0, [r2, r0]
@@ -5339,19 +5344,19 @@ GetSwlReplaceBlock:
 	str	r0, [sp, #20]
 	ldr	r0, [r5, #-4068]
 	mov	r5, r7
-.L822:
+.L823:
 	ldrh	r2, [r3]
 	movw	fp, #65535
 	cmp	r2, fp
-	beq	.L824
+	beq	.L825
 	add	r1, r1, #1
 	ldr	fp, [sp, #20]
 	uxth	r1, r1
 	cmp	r1, fp
-	bhi	.L821
+	bhi	.L822
 	ldrh	fp, [r3, #4]
 	cmp	fp, #0
-	beq	.L823
+	beq	.L824
 	rsb	r3, r0, r3
 	mov	r3, r3, asr #1
 	mul	r3, ip, r3
@@ -5359,45 +5364,45 @@ GetSwlReplaceBlock:
 	mov	fp, r3, asl #1
 	ldrh	fp, [r10, fp]
 	cmp	fp, r6
-	bls	.L828
+	bls	.L829
 	cmp	fp, r7
 	movcc	r7, fp
 	movcc	r5, r3
-.L823:
+.L824:
 	mla	r3, lr, r2, r0
-	b	.L822
-.L828:
+	b	.L823
+.L829:
 	mov	r5, r3
-.L824:
+.L825:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L821
+	beq	.L822
 	mov	r3, r5, asl #1
 	ldrh	fp, [r10, r3]
 	cmp	fp, r6
-	bls	.L826
+	bls	.L827
 	str	r3, [sp, #20]
 	bl	GetFreeBlockMinEraseCount
 	ldr	r3, [sp, #20]
 	cmp	r0, r6
 	strhi	r7, [r4, #-3824]
-.L826:
+.L827:
 	cmp	fp, r8
-	bcs	.L821
+	bcs	.L822
 	add	r2, fp, #128
 	cmp	r9, r2
-	ble	.L821
+	ble	.L822
 	add	r2, fp, #256
 	cmp	r2, r8
-	bcc	.L827
+	bcc	.L828
 	ldr	r2, [r4, #-3828]
 	add	fp, fp, #768
 	cmp	fp, r2
-	bcs	.L821
-.L827:
+	bcs	.L822
+.L828:
 	ldr	r2, [r4, #-4060]
 	mov	r1, r5
-	ldr	r0, .L840+16
+	ldr	r0, .L841+16
 	ldrh	r2, [r2, r3]
 	str	r2, [sp]
 	mov	r2, r8
@@ -5408,13 +5413,13 @@ GetSwlReplaceBlock:
 	mov	r0, r5
 	mov	r3, #1
 	str	r3, [r4, #-3224]
-.L820:
+.L821:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L841:
+.L842:
 	.align	2
-.L840:
+.L841:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1812
@@ -5433,19 +5438,19 @@ free_data_superblock:
 	cmp	r0, r2
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	beq	.L843
-	ldr	r2, .L845
+	beq	.L844
+	ldr	r2, .L846
 	mov	r3, r0, asl #1
 	mov	r1, #0
 	ldr	r2, [r2, #-4060]
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
-.L843:
+.L844:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L846:
+.L847:
 	.align	2
-.L845:
+.L846:
 	.word	.LANCHOR2
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -5456,9 +5461,9 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L855
+	ldr	ip, .L856
 	mov	r3, #0
-	ldr	r1, .L855+4
+	ldr	r1, .L856+4
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	add	r7, ip, #78
@@ -5466,12 +5471,12 @@ FtlGcBufInit:
 	mov	r6, #1
 	mov	r8, #36
 	str	r3, [r1, #-3220]
-.L848:
+.L849:
 	ldrh	r2, [ip]
 	add	r4, r3, #1
 	uxth	r3, r3
 	cmp	r3, r2
-	bcs	.L853
+	bcs	.L854
 	mul	r0, r5, r3
 	ldr	lr, [r1, #-3216]
 	add	r2, lr, r0
@@ -5485,7 +5490,7 @@ FtlGcBufInit:
 	bic	r2, r2, #3
 	add	r2, r9, r2
 	str	r2, [lr, r0]
-	ldr	r2, .L855+8
+	ldr	r2, .L856+8
 	ldr	r9, [r1, #-3216]
 	ldrh	r2, [r2]
 	add	lr, r9, r0
@@ -5504,16 +5509,16 @@ FtlGcBufInit:
 	ldr	r2, [lr, #4]
 	str	r2, [r3, #12]
 	mov	r3, r4
-	b	.L848
-.L853:
-	ldr	r0, .L855+4
+	b	.L849
+.L854:
+	ldr	r0, .L856+4
 	mov	ip, #12
-	ldr	r4, .L855+12
+	ldr	r4, .L856+12
 	mov	lr, #0
-.L850:
+.L851:
 	ldr	r3, [r1, #-3200]
 	cmp	r2, r3
-	bcs	.L854
+	bcs	.L855
 	mul	r5, ip, r2
 	ldr	r7, [r0, #-3216]
 	add	r3, r7, r5
@@ -5527,7 +5532,7 @@ FtlGcBufInit:
 	bic	r3, r3, #3
 	add	r3, r6, r3
 	str	r3, [r7, r5]
-	ldr	r3, .L855+8
+	ldr	r3, .L856+8
 	ldr	r6, [r0, #-3216]
 	ldrh	r3, [r3]
 	add	r5, r6, r5
@@ -5541,12 +5546,12 @@ FtlGcBufInit:
 	bic	r3, r3, #3
 	add	r3, r6, r3
 	str	r3, [r5, #4]
-	b	.L850
-.L854:
+	b	.L851
+.L855:
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L856:
+.L857:
 	.align	2
-.L855:
+.L856:
 	.word	.LANCHOR0+1804
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1884
@@ -5560,7 +5565,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L865
+	ldr	r3, .L866
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	lr, #0
@@ -5569,30 +5574,30 @@ FtlGcBufFree:
 	ldr	r4, [r3, #-3216]
 	mov	r7, lr
 	mov	r8, #12
-.L858:
+.L859:
 	uxth	ip, lr
 	cmp	ip, r1
 	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
 	mla	ip, r5, ip, r0
 	mov	r2, #0
-.L859:
+.L860:
 	uxth	r3, r2
 	cmp	r3, r6
-	bcs	.L860
+	bcs	.L861
 	mul	r3, r8, r3
 	add	r2, r2, #1
 	add	r9, r4, r3
 	ldr	r10, [r4, r3]
 	ldr	r3, [ip, #8]
 	cmp	r10, r3
-	bne	.L859
+	bne	.L860
 	str	r7, [r9, #8]
-.L860:
+.L861:
 	add	lr, lr, #1
-	b	.L858
-.L866:
+	b	.L859
+.L867:
 	.align	2
-.L865:
+.L866:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -5603,7 +5608,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L876
+	ldr	r3, .L877
 	mov	ip, #0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -5612,34 +5617,34 @@ FtlGcBufAlloc:
 	mov	r7, #1
 	ldr	r5, [r3, #-3216]
 	mov	r8, #36
-.L868:
+.L869:
 	uxth	r2, ip
 	cmp	r2, r1
-	bcs	.L875
+	bcs	.L876
 	mov	lr, #0
-.L869:
+.L870:
 	uxth	r3, lr
 	cmp	r3, r4
-	bcs	.L870
+	bcs	.L871
 	mla	r3, r6, r3, r5
 	add	lr, lr, #1
 	ldr	r9, [r3, #8]
 	cmp	r9, #0
-	bne	.L869
+	bne	.L870
 	mla	r2, r8, r2, r0
 	ldr	lr, [r3]
 	str	r7, [r3, #8]
 	str	lr, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L870:
+.L871:
 	add	ip, ip, #1
-	b	.L868
-.L875:
+	b	.L869
+.L876:
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
-.L877:
+.L878:
 	.align	2
-.L876:
+.L877:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -5651,25 +5656,25 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L884
+	ldr	r2, .L885
 	sub	r2, r2, #3184
 	ldr	r3, [r2, #-12]
 	ldrh	r2, [r2, #-8]
 	add	r2, r3, r2, asl #1
-.L879:
+.L880:
 	cmp	r3, r2
-	beq	.L883
+	beq	.L884
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L879
+	bne	.L880
 	mov	r0, #1
 	bx	lr
-.L883:
+.L884:
 	mov	r0, #0
 	bx	lr
-.L885:
+.L886:
 	.align	2
-.L884:
+.L885:
 	.word	.LANCHOR2
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -5683,7 +5688,7 @@ FtlGcUpdatePage:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, r0
-	ldr	r4, .L894
+	ldr	r4, .L895
 	ubfx	r0, r0, #10, #16
 	mov	r6, r1
 	mov	r7, r2
@@ -5693,22 +5698,22 @@ FtlGcUpdatePage:
 	mov	lr, #0
 	ldrh	r1, [r3, #-8]
 	sub	r8, r2, #2
-.L887:
+.L888:
 	uxth	ip, lr
 	cmp	ip, r1
-	bcs	.L891
+	bcs	.L892
 	ldrh	r9, [r8, #2]!
 	add	lr, lr, #1
 	cmp	r9, r0
-	bne	.L887
-.L891:
+	bne	.L888
+.L892:
 	cmp	ip, r1
 	moveq	ip, ip, asl #1
 	streqh	r0, [r2, ip]	@ movhi
 	ldreqh	ip, [r3, #-8]
 	addeq	ip, ip, #1
 	streqh	ip, [r3, #-8]	@ movhi
-.L889:
+.L890:
 	ldrh	r2, [r3]
 	mov	ip, #12
 	mul	ip, ip, r2
@@ -5720,9 +5725,9 @@ FtlGcUpdatePage:
 	add	r2, r2, #1
 	strh	r2, [r3]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L895:
+.L896:
 	.align	2
-.L894:
+.L895:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -5736,44 +5741,44 @@ FtlGcRefreshOpenBlock:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L904
+	ldr	r4, .L905
 	ldrh	r3, [r4, #-14]
 	cmp	r3, r0
-	beq	.L898
+	beq	.L899
 	ldrh	r3, [r4, #-12]
 	cmp	r3, r0
-	beq	.L898
+	beq	.L899
 	ldrh	r3, [r4, #-10]
 	cmp	r3, r0
-	beq	.L898
+	beq	.L899
 	ldrh	r3, [r4, #-8]
 	cmp	r3, r0
-	beq	.L898
-	ldr	r0, .L904+4
+	beq	.L899
+	ldr	r0, .L905+4
 	mov	r1, r5
 	bl	printk
 	ldrh	r2, [r4, #-14]
 	movw	r3, #65535
 	cmp	r2, r3
 	streqh	r5, [r4, #-14]	@ movhi
-	beq	.L898
+	beq	.L899
 	ldrh	r2, [r4, #-12]
 	cmp	r2, r3
 	streqh	r5, [r4, #-12]	@ movhi
-	beq	.L898
+	beq	.L899
 	ldrh	r2, [r4, #-10]
 	cmp	r2, r3
 	streqh	r5, [r4, #-10]	@ movhi
-	beq	.L898
+	beq	.L899
 	ldrh	r2, [r4, #-8]
 	cmp	r2, r3
 	streqh	r5, [r4, #-8]	@ movhi
-.L898:
+.L899:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L905:
+.L906:
 	.align	2
-.L904:
+.L905:
 	.word	.LANCHOR2-3168
 	.word	.LC79
 	.fnend
@@ -5788,48 +5793,48 @@ FtlGcRefreshBlock:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L917
+	ldr	r4, .L918
 	ldrh	r3, [r4, #-14]
 	cmp	r3, r0
-	beq	.L914
+	beq	.L915
 	ldrh	r3, [r4, #-12]
 	cmp	r3, r0
-	beq	.L914
+	beq	.L915
 	ldrh	r3, [r4, #-10]
 	cmp	r3, r0
-	beq	.L914
+	beq	.L915
 	ldrh	r3, [r4, #-8]
 	cmp	r3, r0
-	beq	.L914
-	ldr	r0, .L917+4
+	beq	.L915
+	ldr	r0, .L918+4
 	mov	r1, r5
 	bl	printk
 	ldrh	r2, [r4, #-14]
 	movw	r3, #65535
 	cmp	r2, r3
 	streqh	r5, [r4, #-14]	@ movhi
-	beq	.L914
+	beq	.L915
 	ldrh	r2, [r4, #-12]
 	cmp	r2, r3
 	streqh	r5, [r4, #-12]	@ movhi
-	beq	.L914
+	beq	.L915
 	ldrh	r2, [r4, #-10]
 	cmp	r2, r3
 	streqh	r5, [r4, #-10]	@ movhi
-	beq	.L914
+	beq	.L915
 	ldrh	r2, [r4, #-8]
 	cmp	r2, r3
-	bne	.L915
+	bne	.L916
 	strh	r5, [r4, #-8]	@ movhi
-.L914:
+.L915:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L915:
+.L916:
 	mvn	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L918:
+.L919:
 	.align	2
-.L917:
+.L918:
 	.word	.LANCHOR2-3168
 	.word	.LC79
 	.fnend
@@ -5845,51 +5850,51 @@ FtlGcMarkBadPhyBlk:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	bl	P2V_block_in_plane
-	ldr	r6, .L929
+	ldr	r6, .L930
 	mov	r2, r5
 	ldrh	r1, [r6, #-6]
 	mov	r4, r0
-	ldr	r0, .L929+4
+	ldr	r0, .L930+4
 	bl	printk
 	mov	r0, r4
 	bl	FtlGcRefreshBlock
-	ldr	r3, .L929+8
+	ldr	r3, .L930+8
 	ldr	r2, [r3, #1796]
 	cmp	r2, #0
-	beq	.L920
+	beq	.L921
 	ldr	r2, [r3, #4060]
 	mov	r4, r4, asl #1
 	ldrh	r3, [r2, r4]
 	cmp	r3, #39
 	subhi	r3, r3, #40
 	strhih	r3, [r2, r4]	@ movhi
-.L920:
+.L921:
 	ldrh	r3, [r6, #-6]
 	mov	r2, #0
-	ldr	r0, .L929+12
-.L921:
+	ldr	r0, .L930+12
+.L922:
 	uxth	r1, r2
 	cmp	r1, r3
-	bcs	.L928
+	bcs	.L929
 	add	r2, r2, #1
 	add	r1, r0, r2, asl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L921
-	b	.L922
-.L928:
+	bne	.L922
+	b	.L923
+.L929:
 	cmp	r3, #15
 	addls	r2, r3, #1
 	strlsh	r2, [r6, #-6]	@ movhi
-	ldrls	r2, .L929+12
+	ldrls	r2, .L930+12
 	movls	r3, r3, asl #1
 	strlsh	r5, [r2, r3]	@ movhi
-.L922:
+.L923:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L930:
+.L931:
 	.align	2
-.L929:
+.L930:
 	.word	.LANCHOR2-3168
 	.word	.LC80
 	.word	.LANCHOR0
@@ -5905,18 +5910,18 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L938
+	ldr	r4, .L939
 	ldrh	r3, [r4, #-6]
 	cmp	r3, #0
-	beq	.L932
+	beq	.L933
 	ldrh	r1, [r4, #-14]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L932
+	bne	.L933
 	add	r4, r4, #32
 	ldrh	r2, [r4, #-2]
 	cmp	r2, r3
-	ldr	r2, .L938+4
+	ldr	r2, .L939+4
 	movcs	r3, #0
 	strcsh	r3, [r4, #-2]	@ movhi
 	ldrh	r3, [r4, #-2]
@@ -5927,12 +5932,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, #-2]
 	add	r3, r3, #1
 	strh	r3, [r4, #-2]	@ movhi
-.L932:
+.L933:
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L939:
+.L940:
 	.align	2
-.L938:
+.L939:
 	.word	.LANCHOR2-3168
 	.word	.LANCHOR2-3172
 	.fnend
@@ -5959,30 +5964,30 @@ BuildFlashLsbPageTable:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, r1
-	bne	.L942
-	ldr	r3, .L972
-.L943:
+	bne	.L943
+	ldr	r3, .L973
+.L944:
 	mov	r2, r0, asl #1
 	strh	r0, [r2, r3]	@ movhi
 	add	r0, r0, #1
 	cmp	r0, #256
-	bne	.L943
-.L947:
+	bne	.L944
+.L948:
 	mov	r1, #255
-	ldr	r0, .L972+4
+	ldr	r0, .L973+4
 	mov	r2, #1024
 	uxth	r4, r4
 	bl	ftl_memset
 	mov	r3, #0
-	ldr	r1, .L972
-	ldr	r0, .L972+4
-	b	.L944
-.L942:
+	ldr	r1, .L973
+	ldr	r0, .L973+4
+	b	.L945
+.L943:
 	cmp	r0, #1
-	bne	.L945
-	ldr	ip, .L972
+	bne	.L946
+	ldr	ip, .L973
 	mov	r3, #0
-.L946:
+.L947:
 	uxth	r2, r3
 	mov	lr, r3, asl #1
 	cmp	r2, #3
@@ -5997,14 +6002,14 @@ BuildFlashLsbPageTable:
 	movne	r2, r1
 	cmp	r3, #256
 	strh	r2, [lr, ip]	@ movhi
-	bne	.L946
-	b	.L947
-.L945:
+	bne	.L947
+	b	.L948
+.L946:
 	cmp	r0, #2
-	bne	.L948
-	ldr	r1, .L972
+	bne	.L949
+	ldr	r1, .L973
 	mov	r3, #0
-.L949:
+.L950:
 	uxth	r2, r3
 	mov	r0, r3, asl #1
 	cmp	r2, #1
@@ -6013,14 +6018,14 @@ BuildFlashLsbPageTable:
 	subhi	r2, ip, #1
 	cmp	r3, #256
 	strh	r2, [r0, r1]	@ movhi
-	bne	.L949
-	b	.L947
-.L948:
-	cmp	r0, #3
 	bne	.L950
-	ldr	ip, .L972
+	b	.L948
+.L949:
+	cmp	r0, #3
+	bne	.L951
+	ldr	ip, .L973
 	mov	r3, #0
-.L951:
+.L952:
 	uxth	r2, r3
 	mov	lr, r3, asl #1
 	cmp	r2, #5
@@ -6035,13 +6040,13 @@ BuildFlashLsbPageTable:
 	movne	r2, r1
 	cmp	r3, #256
 	strh	r2, [lr, ip]	@ movhi
-	bne	.L951
-	b	.L947
-.L950:
+	bne	.L952
+	b	.L948
+.L951:
 	cmp	r0, #4
 	mov	r3, #0
-	bne	.L952
-	ldr	r2, .L972+8
+	bne	.L953
+	ldr	r2, .L973+8
 	strh	r3, [r2, #144]	@ movhi
 	mov	r3, #1
 	strh	r0, [r2, #152]	@ movhi
@@ -6056,7 +6061,7 @@ BuildFlashLsbPageTable:
 	strh	r3, [r2, #156]	@ movhi
 	mov	r3, #8
 	strh	r3, [r2, #158]!	@ movhi
-.L953:
+.L954:
 	tst	r3, #1
 	movne	r1, #7
 	moveq	r1, #6
@@ -6065,31 +6070,31 @@ BuildFlashLsbPageTable:
 	strh	r1, [r2, #2]!	@ movhi
 	uxth	r3, r3
 	cmp	r3, #256
-	bne	.L953
-	b	.L947
-.L952:
-	cmp	r0, #5
 	bne	.L954
-	ldr	r2, .L972
-.L955:
+	b	.L948
+.L953:
+	cmp	r0, #5
+	bne	.L955
+	ldr	r2, .L973
+.L956:
 	mov	r1, r3, asl #1
 	strh	r3, [r1, r2]	@ movhi
 	add	r3, r3, #1
 	cmp	r3, #16
-	bne	.L955
-	ldr	r2, .L972+12
-.L956:
-	strh	r3, [r2, #2]!	@ movhi
+	bne	.L956
+	ldr	r2, .L973+12
+.L957:
+	strh	r3, [r2, #2]!	@ movhi
 	add	r3, r3, #2
 	uxth	r3, r3
 	cmp	r3, #496
-	bne	.L956
-	b	.L947
-.L954:
-	cmp	r0, #6
 	bne	.L957
-	ldr	r1, .L972+16
-.L958:
+	b	.L948
+.L955:
+	cmp	r0, #6
+	bne	.L958
+	ldr	r1, .L973+16
+.L959:
 	cmp	r3, #5
 	add	r2, r3, r3, asl #1
 	movls	r0, #0
@@ -6104,12 +6109,12 @@ BuildFlashLsbPageTable:
 	strh	r2, [r1, #2]!	@ movhi
 	uxth	r3, r3
 	cmp	r3, #256
-	bne	.L958
-	b	.L947
-.L957:
+	bne	.L959
+	b	.L948
+.L958:
 	cmp	r0, #9
-	bne	.L947
-	ldr	r2, .L972+8
+	bne	.L948
+	ldr	r2, .L973+8
 	movw	r1, #509
 	strh	r3, [r2, #144]	@ movhi
 	mov	r3, #1
@@ -6117,28 +6122,28 @@ BuildFlashLsbPageTable:
 	mov	r3, #2
 	strh	r3, [r2, #148]!	@ movhi
 	mov	r3, #3
-.L959:
+.L960:
 	strh	r3, [r2, #2]!	@ movhi
 	add	r3, r3, #2
 	uxth	r3, r3
 	cmp	r3, r1
-	bne	.L959
-	b	.L947
-.L944:
+	bne	.L960
+	b	.L948
+.L945:
 	uxth	r2, r3
 	cmp	r2, r4
-	bcs	.L971
+	bcs	.L972
 	mov	r2, r3, asl #1
 	add	r3, r3, #1
 	ldrh	r2, [r2, r1]
 	mov	ip, r2, asl #1
 	strh	r2, [r0, ip]	@ movhi
-	b	.L944
-.L971:
+	b	.L945
+.L972:
 	ldmfd	sp!, {r4, pc}
-.L973:
+.L974:
 	.align	2
-.L972:
+.L973:
 	.word	.LANCHOR0+144
 	.word	.LANCHOR2-3136
 	.word	.LANCHOR0
@@ -6156,9 +6161,9 @@ FlashDieInfoInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, #0
-	ldr	r3, .L989
-	ldr	r4, .L989+4
-	ldr	r9, .L989+8
+	ldr	r3, .L990
+	ldr	r4, .L990+4
+	ldr	r9, .L990+8
 	ldrh	r0, [r3, #10]
 	strb	r6, [r4, #1717]
 	mov	r7, r4
@@ -6166,27 +6171,27 @@ FlashDieInfoInit:
 	bl	FlashBlockAlignInit
 	mov	r1, r6
 	mov	r2, #8
-	ldr	r0, .L989+12
+	ldr	r0, .L990+12
 	bl	ftl_memset
 	mov	r1, r6
 	mov	r2, #32
 	add	r0, r4, #656
 	bl	ftl_memset
-	ldr	r0, .L989+16
+	ldr	r0, .L990+16
 	mov	r1, r6
 	mov	r2, #128
 	bl	ftl_memset
 	ldr	r5, [r4, #692]
-	ldr	fp, .L989+20
+	ldr	fp, .L990+20
 	add	r8, r5, #1
-.L976:
+.L977:
 	mov	r0, r8
 	add	r1, fp, r6, asl #3
 	ldrb	r2, [r5]	@ zero_extendqisi2
 	bl	FlashMemCmp8
-	ldr	r10, .L989+20
+	ldr	r10, .L990+20
 	cmp	r0, #0
-	bne	.L975
+	bne	.L976
 	ldrb	r3, [r7, #1717]	@ zero_extendqisi2
 	add	r2, r7, r3, asl #2
 	str	r0, [r2, #656]
@@ -6194,35 +6199,35 @@ FlashDieInfoInit:
 	add	r3, r7, r3
 	strb	r2, [r7, #1717]
 	strb	r6, [r3, #1720]
-.L975:
+.L976:
 	add	r6, r6, #1
 	cmp	r6, #4
-	bne	.L976
+	bne	.L977
 	ldrb	r3, [r4, #1717]	@ zero_extendqisi2
-	ldr	r7, .L989+4
+	ldr	r7, .L990+4
 	strb	r3, [r9, #-2112]
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	cmp	r3, #2
-	beq	.L977
-.L981:
+	beq	.L978
+.L982:
 	ldrb	r3, [r5, #13]	@ zero_extendqisi2
 	ldrb	r2, [r4, #1717]	@ zero_extendqisi2
 	smulbb	r2, r2, r3
 	ldrh	r3, [r5, #14]
 	smulbb	r3, r2, r3
-	ldr	r2, .L989+24
+	ldr	r2, .L990+24
 	strh	r3, [r2, #-14]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L977:
+.L978:
 	ldr	r9, [r7, #4]
 	mov	r6, #0
-.L980:
+.L981:
 	mov	r0, r8
 	add	r1, r10, r6, asl #3
 	ldrb	r2, [r5]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	cmp	r0, #0
-	bne	.L978
+	bne	.L979
 	ldrb	r1, [r5, #13]	@ zero_extendqisi2
 	ldrh	r3, [r5, #14]
 	ldrb	r2, [r7, #1717]	@ zero_extendqisi2
@@ -6239,14 +6244,14 @@ FlashDieInfoInit:
 	add	r2, r4, r2
 	strb	r3, [r4, #1717]
 	strb	r6, [r2, #1720]
-.L978:
+.L979:
 	add	r6, r6, #1
 	cmp	r6, #4
-	bne	.L980
-	b	.L981
-.L990:
+	bne	.L981
+	b	.L982
+.L991:
 	.align	2
-.L989:
+.L990:
 	.word	.LANCHOR1+472
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -6269,8 +6274,8 @@ ftl_read_flash_info:
 	mov	r2, #11
 	mov	r4, r0
 	bl	ftl_memset
-	ldr	r2, .L996
-	ldr	r0, .L996+4
+	ldr	r2, .L997
+	ldr	r0, .L997+4
 	mov	ip, #1
 	ldr	r3, [r2, #692]
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
@@ -6291,21 +6296,21 @@ ftl_read_flash_info:
 	strb	r3, [r4, #9]
 	mov	r3, #0
 	strb	r3, [r4, #10]
-.L992:
+.L993:
 	uxtb	r2, r3
 	cmp	r2, r1
-	bcs	.L995
+	bcs	.L996
 	ldrb	lr, [r3, r0]	@ zero_extendqisi2
 	add	r3, r3, #1
 	ldrb	r2, [r4, #10]	@ zero_extendqisi2
 	orr	r2, r2, ip, asl lr
 	strb	r2, [r4, #10]
-	b	.L992
-.L995:
+	b	.L993
+.L996:
 	ldmfd	sp!, {r4, pc}
-.L997:
+.L998:
 	.align	2
-.L996:
+.L997:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1720
 	.fnend
@@ -6320,9 +6325,9 @@ FtlMemInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r6, #0
-	ldr	r4, .L1103
+	ldr	r4, .L1104
 	mvn	r2, #0
-	ldr	r5, .L1103+4
+	ldr	r5, .L1104+4
 	mov	r1, #32
 	sub	r3, r4, #2096
 	mov	r0, #1024
@@ -6452,7 +6457,7 @@ FtlMemInit:
 	mov	r0, r6, asl #3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r7]
-	ldr	r6, .L1103+8
+	ldr	r6, .L1104+8
 	add	r6, r6, #48
 	str	r0, [r4, #-2036]
 	ldr	r0, [r4, #-3200]
@@ -6565,142 +6570,142 @@ FtlMemInit:
 	ldrh	r2, [r6, #-8]
 	ldrh	lr, [r5, r7]
 	mov	r3, #1
-	ldr	ip, .L1103+12
+	ldr	ip, .L1104+12
 	mov	r2, r2, asl #2
 	mov	r1, r2
 	str	r0, [r5, #1964]
-.L1000:
+.L1001:
 	cmp	r3, lr
-	bcs	.L1101
+	bcs	.L1102
 	ldr	r0, [r5, #1964]
 	add	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [ip, #4]!
-	b	.L1000
-.L1101:
-	ldr	r2, .L1103+16
+	b	.L1001
+.L1102:
+	ldr	r2, .L1104+16
 	mov	r1, #0
-.L1002:
+.L1003:
 	cmp	r3, #8
 	addne	r0, r2, r3, asl #2
 	addne	r3, r3, #1
 	strne	r1, [r0, #28]
-	bne	.L1002
-.L1102:
+	bne	.L1003
+.L1103:
 	ldr	r2, [r4, #-2012]
-	ldr	r3, .L1103
+	ldr	r3, .L1104
 	cmp	r2, #0
-	bne	.L1004
-.L1006:
-	ldr	r1, .L1103+20
-	ldr	r0, .L1103+24
+	bne	.L1005
+.L1007:
+	ldr	r1, .L1104+20
+	ldr	r0, .L1104+24
 	bl	printk
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L1004:
+.L1005:
 	ldr	r2, [r3, #-2008]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-1992]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-1984]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-3896]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-1980]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-4068]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r5, #1964]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r3, [r3, #-4060]
 	cmp	r3, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r4, #-3196]
-	ldr	r3, .L1103
+	ldr	r3, .L1104
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-3188]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2076]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2068]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r5, #4056]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-3204]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2072]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2064]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2060]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r3, [r3, #-2056]
 	cmp	r3, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r4, #-3212]
-	ldr	r3, .L1103
+	ldr	r3, .L1104
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2048]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2044]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-3216]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2040]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2036]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-3208]
 	cmp	r2, #0
-	beq	.L1006
-	ldr	r2, .L1103+4
+	beq	.L1007
+	ldr	r2, .L1104+4
 	ldr	r1, [r2, #4060]
 	cmp	r1, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r3, [r3, #-2024]
 	cmp	r3, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r3, [r2, #1920]
 	cmp	r3, #0
-	beq	.L1006
-	ldr	r3, .L1103
+	beq	.L1007
+	ldr	r3, .L1104
 	ldr	r2, [r3, #-2004]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r2, [r3, #-2000]
 	cmp	r2, #0
-	beq	.L1006
+	beq	.L1007
 	ldr	r3, [r3, #-1996]
 	cmp	r3, #0
-	beq	.L1006
+	beq	.L1007
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L1104:
+.L1105:
 	.align	2
-.L1103:
+.L1104:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR2-2016
@@ -6717,37 +6722,42 @@ FtlBbt2Bitmap:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
+	ldr	r3, .L1112
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r4, r0
-	ldr	r3, .L1111
+	ldrh	r2, [r3, #-8]
 	mov	r0, r1
 	mov	r5, r1
 	mov	r1, #0
-	ldrh	r2, [r3, #-8]
+	movw	r6, #65535
 	mov	r2, r2, asl #2
 	bl	ftl_memset
 	add	r3, r4, #1020
+	ldr	ip, .L1112+4
 	add	r3, r3, #2
 	sub	r1, r4, #2
-	mov	lr, #1
-	movw	r4, #65535
-.L1107:
+	mov	r4, #1
+.L1108:
 	ldrh	r2, [r1, #2]!
-	cmp	r2, r4
-	ldmeqfd	sp!, {r3, r4, r5, pc}
-	mov	ip, r2, lsr #5
-	cmp	r1, r3
+	cmp	r2, r6
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mov	lr, r2, lsr #5
 	and	r2, r2, #31
-	ldr	r0, [r5, ip, asl #2]
-	orr	r2, r0, lr, asl r2
-	str	r2, [r5, ip, asl #2]
-	bne	.L1107
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L1112:
+	cmp	r1, r3
+	ldr	r0, [r5, lr, asl #2]
+	orr	r2, r0, r4, asl r2
+	str	r2, [r5, lr, asl #2]
+	ldrh	r2, [ip, #6]
+	add	r2, r2, #1
+	strh	r2, [ip, #6]	@ movhi
+	bne	.L1108
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1113:
 	.align	2
-.L1111:
+.L1112:
 	.word	.LANCHOR2-1968
+	.word	.LANCHOR0+1936
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	2
@@ -6758,7 +6768,7 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L1114
+	ldr	r0, .L1115
 	mvn	r3, #0
 	mov	r1, #255
 	mov	r2, #16
@@ -6767,9 +6777,9 @@ FtlBbtMemInit:
 	mov	r3, #0
 	strh	r3, [r0, #-6]	@ movhi
 	b	ftl_memset
-.L1115:
+.L1116:
 	.align	2
-.L1114:
+.L1115:
 	.word	.LANCHOR0+1936
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
@@ -6780,7 +6790,7 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L1118
+	ldr	r1, .L1119
 	movw	r2, #1996
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
@@ -6796,9 +6806,9 @@ FtlFreeSysBlkQueueInit:
 	bl	ftl_memset
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L1119:
+.L1120:
 	.align	2
-.L1118:
+.L1119:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
@@ -6821,19 +6831,19 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r2, #0
-.L1121:
+.L1122:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bls	.L1141
+	bls	.L1142
 	ldr	r0, [r6, r3, asl #2]
 	mov	r1, #0
 	ubfx	r0, r0, #10, #16
-.L1122:
+.L1123:
 	ldrh	ip, [r4, #10]
 	uxth	r3, r1
 	cmp	ip, r3
-	bls	.L1142
+	bls	.L1143
 	mov	r3, r3, asl #1
 	add	r1, r1, #1
 	ldrh	ip, [r7, r3]
@@ -6846,12 +6856,12 @@ ftl_free_no_use_map_blk:
 	ldrneh	ip, [r5, r3]
 	addne	ip, ip, #1
 	strneh	ip, [r5, r3]	@ movhi
+	b	.L1123
+.L1143:
+	add	r2, r2, #1
 	b	.L1122
 .L1142:
-	add	r2, r2, #1
-	b	.L1121
-.L1141:
-	ldr	r2, .L1144
+	ldr	r2, .L1145
 	movw	r3, #1874
 	mov	r8, #0
 	mov	r1, r8
@@ -6861,36 +6871,36 @@ ftl_free_no_use_map_blk:
 	mov	r3, r3, asl #1
 	strh	r2, [r5, r3]	@ movhi
 	ldrh	r9, [r5]
-.L1126:
+.L1127:
 	ldrh	r3, [r4, #10]
 	uxth	r6, r8
 	cmp	r3, r6
-	bls	.L1143
+	bls	.L1144
 	mov	r2, r6, asl #1
 	ldrh	r3, [r5, r2]
 	cmp	r9, r3
-	bls	.L1127
+	bls	.L1128
 	ldrh	r0, [r7, r2]
 	add	r10, r7, r2
 	cmp	r0, #0
-	bne	.L1128
-	b	.L1129
-.L1127:
-	cmp	r3, #0
 	bne	.L1129
+	b	.L1130
+.L1128:
+	cmp	r3, #0
+	bne	.L1130
 	ldrh	r0, [r7, r2]
 	add	r10, r7, r2
 	cmp	r0, #0
 	movne	r6, r1
-	beq	.L1129
-	b	.L1131
-.L1128:
+	beq	.L1130
+	b	.L1132
+.L1129:
 	cmp	r3, #0
 	movne	r1, r6
 	movne	r9, r3
-	bne	.L1129
+	bne	.L1130
 	mov	r9, r3
-.L1131:
+.L1132:
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	strh	fp, [r10]	@ movhi
@@ -6898,15 +6908,15 @@ ftl_free_no_use_map_blk:
 	mov	r1, r6
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L1129:
+.L1130:
 	add	r8, r8, #1
-	b	.L1126
-.L1143:
+	b	.L1127
+.L1144:
 	mov	r0, r1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1145:
+.L1146:
 	.align	2
-.L1144:
+.L1145:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -6920,9 +6930,9 @@ FtlL2PDataInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r1, #0
-	ldr	r5, .L1151
+	ldr	r5, .L1152
 	mvn	r6, #0
-	ldr	r4, .L1151+4
+	ldr	r4, .L1152+4
 	ldr	r2, [r5, #1900]
 	ldr	r0, [r4, #-2008]
 	mov	r2, r2, asl #1
@@ -6935,19 +6945,19 @@ FtlL2PDataInit:
 	ldr	r0, [r4, #-1980]
 	mul	r2, r2, r3
 	bl	ftl_memset
-	ldr	ip, .L1151+8
+	ldr	ip, .L1152+8
 	mov	r1, #0
 	mov	r3, r4
 	sub	r7, ip, #28
 	mov	r4, #12
 	mov	r5, r1
-.L1147:
+.L1148:
 	ldrh	r2, [ip]
 	add	lr, r1, #1
 	uxth	r1, r1
-	ldr	r0, .L1151
+	ldr	r0, .L1152
 	cmp	r2, r1
-	bls	.L1150
+	bls	.L1151
 	mul	r0, r4, r1
 	ldr	r2, [r3, #-3896]
 	add	r8, r2, r0
@@ -6962,9 +6972,9 @@ FtlL2PDataInit:
 	add	r2, r1, r2
 	mov	r1, lr
 	str	r2, [r0, #8]
-	b	.L1147
-.L1150:
-	ldr	r1, .L1151+12
+	b	.L1148
+.L1151:
+	ldr	r1, .L1152+12
 	mvn	ip, #0
 	sub	r2, r1, #4
 	strh	ip, [r1, #-2]	@ movhi
@@ -6972,7 +6982,7 @@ FtlL2PDataInit:
 	ldr	ip, [r0, #1900]
 	strh	ip, [r1, #6]	@ movhi
 	ldrh	r1, [r1, #40]
-	ldr	ip, .L1151+16
+	ldr	ip, .L1152+16
 	strh	r1, [r2, #8]	@ movhi
 	movw	r1, #1908
 	ldrh	r1, [r0, r1]
@@ -6987,9 +6997,9 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #-1992]
 	str	r2, [r3, #-1948]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1152:
+.L1153:
 	.align	2
-.L1151:
+.L1152:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1910
@@ -7007,9 +7017,9 @@ FtlVariablesInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mvn	r3, #0
-	ldr	r6, .L1155
+	ldr	r6, .L1156
 	mov	r4, #0
-	ldr	r5, .L1155+4
+	ldr	r5, .L1156+4
 	mov	r1, r4
 	sub	r2, r6, #1920
 	movw	r7, #1814
@@ -7050,9 +7060,9 @@ FtlVariablesInit:
 	bl	FtlL2PDataInit
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1156:
+.L1157:
 	.align	2
-.L1155:
+.L1156:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -7067,9 +7077,9 @@ SupperBlkListInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movw	r3, #1814
-	ldr	r7, .L1169
+	ldr	r7, .L1170
 	mov	r2, #6
-	ldr	r6, .L1169+4
+	ldr	r6, .L1170+4
 	mov	r1, #0
 	.pad #28
 	sub	sp, sp, #28
@@ -7094,15 +7104,15 @@ SupperBlkListInit:
 	strh	r3, [r2, #-12]	@ movhi
 	str	r7, [sp, #8]
 	str	r1, [sp, #12]
-.L1158:
-	ldr	r3, .L1169+8
+.L1159:
+	ldr	r3, .L1170+8
 	uxth	r7, r4
 	sxth	r10, r7
 	ldrh	r2, [r3]
 	cmp	r10, r2
-	bge	.L1165
+	bge	.L1166
 	sub	r3, r3, #8
-	ldr	r2, .L1169+12
+	ldr	r2, .L1170+12
 	mov	ip, r7
 	ldrh	r3, [r3]
 	str	r3, [sp]
@@ -7110,11 +7120,11 @@ SupperBlkListInit:
 	mov	r2, #0
 	mov	r6, r2
 	str	r3, [sp, #4]
-.L1166:
+.L1167:
 	ldr	r3, [sp]
 	sxth	r1, r2
 	cmp	r1, r3
-	bge	.L1168
+	bge	.L1169
 	ldr	r3, [sp, #8]
 	str	r2, [sp, #20]
 	add	r1, r3, r1
@@ -7130,65 +7140,65 @@ SupperBlkListInit:
 	add	r2, r2, #1
 	addeq	r6, r3, r6
 	uxtheq	r6, r6
-	b	.L1166
-.L1168:
+	b	.L1167
+.L1169:
 	cmp	r6, #0
-	beq	.L1161
+	beq	.L1162
 	sxth	r1, r6
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r6, r0
-	b	.L1162
-.L1161:
+	b	.L1163
+.L1162:
 	sxth	r7, r7
 	ldr	r2, [r5, #-4060]
 	mvn	r1, #0
 	mov	r7, r7, asl #1
 	strh	r1, [r2, r7]	@ movhi
-.L1162:
+.L1163:
 	mov	r1, r10, asl #1
 	ldr	r2, [r5, #-4068]
 	add	r0, r1, r10
 	add	r2, r2, r0, asl #1
 	strh	r6, [r2, #4]	@ movhi
-	ldr	r2, .L1169+16
+	ldr	r2, .L1170+16
 	ldrh	r0, [r2]
 	cmp	r10, r0
-	beq	.L1163
+	beq	.L1164
 	ldrh	r0, [r2, #48]
 	cmp	r10, r0
-	beq	.L1163
+	beq	.L1164
 	ldrh	r2, [r2, #96]
 	cmp	r10, r2
-	beq	.L1163
+	beq	.L1164
 	ldr	r3, [fp, #-4060]
 	uxth	r0, r4
 	ldrh	r3, [r3, r1]
 	cmp	r3, #0
-	bne	.L1164
+	bne	.L1165
 	add	r8, r8, #1
 	uxth	r8, r8
 	bl	INSERT_FREE_LIST
-	b	.L1163
-.L1164:
+	b	.L1164
+.L1165:
 	add	r9, r9, #1
 	uxth	r9, r9
 	bl	INSERT_DATA_LIST
-.L1163:
+.L1164:
 	add	r4, r4, #1
-	b	.L1158
-.L1165:
+	b	.L1159
+.L1166:
 	ldr	r3, [sp, #12]
 	mov	r0, #0
 	strh	r9, [r3, #-4]	@ movhi
-	ldr	r3, .L1169+20
+	ldr	r3, .L1170+20
 	strh	r8, [r3, #-12]	@ movhi
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1170:
+.L1171:
 	.align	2
-.L1169:
+.L1170:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1812
@@ -7207,9 +7217,9 @@ FtlGcPageVarInit:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movw	r5, #1876
-	ldr	r4, .L1173
+	ldr	r4, .L1174
 	mov	r2, #0
-	ldr	r6, .L1173+4
+	ldr	r6, .L1174+4
 	mov	r1, #255
 	sub	r3, r4, #3184
 	ldr	r0, [r4, #-3196]
@@ -7226,9 +7236,9 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlGcBufInit
-.L1174:
+.L1175:
 	.align	2
-.L1173:
+.L1174:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -7254,13 +7264,13 @@ FlashReadIdbData:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	mov	r2, #2048
-	ldr	r1, .L1178
+	ldr	r1, .L1179
 	bl	ftl_memcpy
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1179:
+.L1180:
 	.align	2
-.L1178:
+.L1179:
 	.word	.LANCHOR2-1904
 	.fnend
 	.size	FlashReadIdbData, .-FlashReadIdbData
@@ -7274,43 +7284,43 @@ FlashLoadPhyInfoInRam:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r4, #0
-	ldr	r8, .L1193
-.L1184:
+	ldr	r8, .L1194
+.L1185:
 	mov	r7, r4, asl #5
-	ldr	r1, .L1193+4
+	ldr	r1, .L1194+4
 	add	r0, r7, #1
 	ldrb	r2, [r8, r4, asl #5]	@ zero_extendqisi2
 	add	r0, r8, r0
-	ldr	r6, .L1193+8
+	ldr	r6, .L1194+8
 	bl	FlashMemCmp8
 	add	r9, r6, #508
 	subs	r5, r0, #0
-	bne	.L1181
+	bne	.L1182
 	adds	r9, r9, r7
-	beq	.L1187
+	beq	.L1188
 	add	r4, r6, r7
 	mov	r3, r5
-	ldr	r1, .L1193+12
+	ldr	r1, .L1194+12
 	ldrb	r2, [r4, #530]	@ zero_extendqisi2
-	b	.L1186
-.L1181:
+	b	.L1187
+.L1182:
 	add	r4, r4, #1
 	cmp	r4, #81
-	bne	.L1184
-	b	.L1187
-.L1192:
+	bne	.L1185
+	b	.L1188
+.L1193:
 	add	r3, r3, #1
 	cmp	r3, #4
-	beq	.L1185
-.L1186:
+	beq	.L1186
+.L1187:
 	ldrb	r0, [r1, r3, asl #5]	@ zero_extendqisi2
 	cmp	r0, r2
-	bne	.L1192
-.L1185:
-	ldr	r4, .L1193+16
+	bne	.L1193
+.L1186:
+	ldr	r4, .L1194+16
 	mov	r2, #32
-	ldr	r1, .L1193+12
-	ldr	r0, .L1193+20
+	ldr	r1, .L1194+12
+	ldr	r0, .L1194+20
 	add	r1, r1, r3, asl #5
 	bl	ftl_memcpy
 	mov	r0, r4
@@ -7319,15 +7329,15 @@ FlashLoadPhyInfoInRam:
 	bl	ftl_memcpy
 	ldrh	r0, [r4, #10]
 	bl	FlashBlockAlignInit
-	b	.L1182
-.L1187:
+	b	.L1183
+.L1188:
 	mvn	r5, #0
-.L1182:
+.L1183:
 	mov	r0, r5
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L1194:
+.L1195:
 	.align	2
-.L1193:
+.L1194:
 	.word	.LANCHOR1+508
 	.word	.LANCHOR0+1556
 	.word	.LANCHOR1
@@ -7351,14 +7361,14 @@ NandcCopy1KB:
 	ldr	r5, [sp, #16]
 	add	r6, r0, #512
 	add	r2, r2, r4, asl #9
-	bne	.L1196
+	bne	.L1197
 	cmp	r3, #0
-	beq	.L1197
+	beq	.L1198
 	mov	r0, r2
 	mov	r1, r3
 	mov	r2, #1024
 	bl	ftl_memcpy
-.L1197:
+.L1198:
 	cmp	r5, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	ldrb	r3, [r5, #2]	@ zero_extendqisi2
@@ -7373,14 +7383,14 @@ NandcCopy1KB:
 	orr	r3, r3, r2, asl #24
 	str	r3, [r6, r4, asl #4]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L1196:
+.L1197:
 	cmp	r3, #0
-	beq	.L1200
+	beq	.L1201
 	mov	r1, r2
 	mov	r0, r3
 	mov	r2, #1024
 	bl	ftl_memcpy
-.L1200:
+.L1201:
 	cmp	r5, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	mov	r4, r4, lsr #1
@@ -7405,13 +7415,13 @@ ftl_memcpy32:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	mov	r3, #0
-.L1213:
+.L1214:
 	cmp	r3, r2
 	ldrne	ip, [r1, r3, asl #2]
 	strne	ip, [r0, r3, asl #2]
 	addne	r3, r3, #1
-	bne	.L1213
-.L1215:
+	bne	.L1214
+.L1216:
 	bx	lr
 	.fnend
 	.size	ftl_memcpy32, .-ftl_memcpy32
@@ -7434,12 +7444,12 @@ timer_get_time:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1218
+	ldr	r3, .L1219
 	ldr	r0, [r3]
 	b	jiffies_to_msecs
-.L1219:
+.L1220:
 	.align	2
-.L1218:
+.L1219:
 	.word	jiffies
 	.fnend
 	.size	timer_get_time, .-timer_get_time
@@ -7450,13 +7460,13 @@ FlashSramLoadStore:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L1224
+	ldr	ip, .L1225
 	cmp	r2, #0
 	moveq	r2, r3
 	ldr	ip, [ip, #144]
 	add	ip, ip, #4096
 	add	r1, ip, r1
-	beq	.L1223
+	beq	.L1224
 	str	lr, [sp, #-4]!
 	.save {lr}
 	mov	lr, r0
@@ -7464,11 +7474,11 @@ FlashSramLoadStore:
 	mov	r1, lr
 	ldr	lr, [sp], #4
 	mov	r2, r3
-.L1223:
+.L1224:
 	b	ftl_memcpy
-.L1225:
+.L1226:
 	.align	2
-.L1224:
+.L1225:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashSramLoadStore, .-FlashSramLoadStore
@@ -7513,12 +7523,12 @@ rk_ftl_get_capacity:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1230
+	ldr	r3, .L1231
 	ldr	r0, [r3, #1912]
 	bx	lr
-.L1231:
+.L1232:
 	.align	2
-.L1230:
+.L1231:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
@@ -7571,47 +7581,47 @@ rknand_print_hex:
 	mov	r7, r2
 	mov	r8, r3
 	mov	r4, r5
-.L1236:
+.L1237:
 	cmp	r4, r8
-	beq	.L1245
+	beq	.L1246
 	cmp	r5, #0
-	bne	.L1237
-	ldr	r0, .L1246
+	bne	.L1238
+	ldr	r0, .L1247
 	mov	r1, r9
 	mov	r2, r6
 	mov	r3, r4
 	bl	printk
-.L1237:
+.L1238:
 	cmp	r7, #4
-	ldreq	r0, .L1246+4
+	ldreq	r0, .L1247+4
 	ldreq	r1, [r6, r4, asl #2]
-	beq	.L1244
+	beq	.L1245
 	cmp	r7, #2
 	moveq	r3, r4, asl #1
-	ldreq	r0, .L1246+4
+	ldreq	r0, .L1247+4
 	ldreqsh	r1, [r6, r3]
-	ldrne	r0, .L1246+4
+	ldrne	r0, .L1247+4
 	ldrneb	r1, [r6, r4]	@ zero_extendqisi2
-.L1244:
+.L1245:
 	add	r5, r5, #1
 	bl	printk
 	cmp	r5, #15
-	bls	.L1241
-	ldr	r0, .L1246+8
+	bls	.L1242
+	ldr	r0, .L1247+8
 	mov	r5, #0
-	ldr	r1, .L1246+12
+	ldr	r1, .L1247+12
 	bl	printk
-.L1241:
+.L1242:
 	add	r4, r4, #1
-	b	.L1236
-.L1245:
-	ldr	r0, .L1246+8
-	ldr	r1, .L1246+12
+	b	.L1237
+.L1246:
+	ldr	r0, .L1247+8
+	ldr	r1, .L1247+12
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	b	printk
-.L1247:
+.L1248:
 	.align	2
-.L1246:
+.L1247:
 	.word	.LC82
 	.word	.LC83
 	.word	.LC76
@@ -7628,7 +7638,7 @@ HynixGetReadRetryDefault:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	cmp	r0, #2
-	ldr	r7, .L1357
+	ldr	r7, .L1358
 	mvn	r3, #83
 	mvn	r1, #82
 	mvn	r2, #81
@@ -7641,17 +7651,17 @@ HynixGetReadRetryDefault:
 	strb	r1, [r7, #703]
 	strb	r2, [r7, #704]
 	strb	r3, [r7, #705]
-	bne	.L1249
+	bne	.L1250
 	mvn	r3, #88
 	strb	r3, [r7, #702]
-	ldr	r3, .L1357+4
+	ldr	r3, .L1358+4
 	mvn	r2, #8
 	mov	r5, #7
 	strb	r2, [r3, #3245]
-	b	.L1310
-.L1249:
+	b	.L1311
+.L1250:
 	cmp	r0, #3
-	bne	.L1251
+	bne	.L1252
 	mvn	r3, #79
 	strb	r3, [r7, #702]
 	mvn	r3, #78
@@ -7667,10 +7677,10 @@ HynixGetReadRetryDefault:
 	mvn	r3, #73
 	strb	r3, [r7, #708]
 	mvn	r3, #72
-	b	.L1351
-.L1251:
+	b	.L1352
+.L1252:
 	cmp	r0, #4
-	bne	.L1252
+	bne	.L1253
 	mvn	r0, #51
 	strb	r1, [r7, #707]
 	strb	r0, [r7, #702]
@@ -7683,14 +7693,14 @@ HynixGetReadRetryDefault:
 	strb	r0, [r7, #705]
 	mvn	r0, #50
 	strb	r0, [r7, #706]
-.L1351:
+.L1352:
 	mov	r5, #8
 	strb	r3, [r7, #709]
 	mov	r6, r5
-	b	.L1250
-.L1252:
+	b	.L1251
+.L1253:
 	cmp	r0, #5
-	bne	.L1253
+	bne	.L1254
 	mov	r3, #56
 	mov	r5, #8
 	strb	r3, [r7, #702]
@@ -7700,10 +7710,10 @@ HynixGetReadRetryDefault:
 	strb	r3, [r7, #704]
 	mov	r3, #59
 	strb	r3, [r7, #705]
-	b	.L1310
-.L1253:
+	b	.L1311
+.L1254:
 	cmp	r0, #6
-	bne	.L1254
+	bne	.L1255
 	mov	r3, #14
 	mov	r5, #12
 	strb	r3, [r7, #702]
@@ -7713,10 +7723,10 @@ HynixGetReadRetryDefault:
 	strb	r3, [r7, #704]
 	mov	r3, #17
 	strb	r3, [r7, #705]
-	b	.L1310
-.L1254:
+	b	.L1311
+.L1255:
 	cmp	r0, #7
-	bne	.L1255
+	bne	.L1256
 	mvn	r3, #79
 	mov	r5, #12
 	strb	r3, [r7, #702]
@@ -7739,11 +7749,11 @@ HynixGetReadRetryDefault:
 	strb	r3, [r7, #710]
 	mvn	r3, #42
 	strb	r3, [r7, #711]
-	b	.L1250
-.L1255:
+	b	.L1251
+.L1256:
 	cmp	r0, #8
 	mov	r5, #7
-	bne	.L1310
+	bne	.L1311
 	mov	r3, #6
 	strb	r5, [r7, #703]
 	strb	r3, [r7, #702]
@@ -7754,24 +7764,24 @@ HynixGetReadRetryDefault:
 	mov	r6, #5
 	mov	r3, #10
 	strb	r3, [r7, #706]
-	b	.L1250
-.L1310:
+	b	.L1251
+.L1311:
 	mov	r6, #4
-.L1250:
+.L1251:
 	sub	r3, r4, #1
 	cmp	r3, #1
-	bhi	.L1347
-	ldr	r10, .L1357+8
+	bhi	.L1348
+	ldr	r10, .L1358+8
 	mov	r9, #0
-.L1256:
+.L1257:
 	ldrb	r1, [r7, #1717]	@ zero_extendqisi2
 	uxtb	r2, r9
-	ldr	r3, .L1357
+	ldr	r3, .L1358
 	cmp	r1, r2
-	bls	.L1263
+	bls	.L1264
 	add	r2, r3, r2
-	ldr	r4, .L1357+12
-	ldr	r1, .L1357+16
+	ldr	r4, .L1358+12
+	ldr	r1, .L1358+16
 	mov	ip, #55
 	ldrb	r2, [r2, #1720]	@ zero_extendqisi2
 	add	r3, r3, r2, asl #3
@@ -7782,7 +7792,7 @@ HynixGetReadRetryDefault:
 	mov	fp, r4
 	mov	r2, r4
 	add	r8, r0, r8, asl #8
-.L1258:
+.L1259:
 	str	ip, [r8, #2056]
 	mov	r0, #80
 	ldrb	r3, [r1, #1]!	@ zero_extendqisi2
@@ -7799,23 +7809,23 @@ HynixGetReadRetryDefault:
 	rsb	r3, r4, r2
 	uxtb	r3, r3
 	cmp	r3, r6
-	bcc	.L1258
+	bcc	.L1259
 	mov	r2, #0
-.L1259:
+.L1260:
 	add	r0, r10, r2
 	mov	r3, #1
-.L1260:
+.L1261:
 	ldrb	r1, [r0, r3, asl #2]	@ zero_extendqisi2
 	ldrb	ip, [fp]	@ zero_extendqisi2
 	add	r1, r1, ip
 	strb	r1, [fp, r3, asl #3]
 	add	r3, r3, #1
 	cmp	r3, #7
-	bne	.L1260
+	bne	.L1261
 	add	r2, r2, #1
 	add	fp, fp, #1
 	cmp	r2, #4
-	bne	.L1259
+	bne	.L1260
 	mov	r3, #0
 	add	r9, r9, #1
 	strb	r3, [r4, #16]
@@ -7825,11 +7835,11 @@ HynixGetReadRetryDefault:
 	strb	r3, [r4, #48]
 	strb	r3, [r4, #41]
 	strb	r3, [r4, #49]
-	b	.L1256
-.L1347:
+	b	.L1257
+.L1348:
 	sub	r3, r4, #3
 	cmp	r3, #5
-	bhi	.L1263
+	bhi	.L1264
 	smulbb	r2, r6, r5
 	mov	r3, r2, asl #4
 	mov	r2, r2, asr #1
@@ -7837,28 +7847,28 @@ HynixGetReadRetryDefault:
 	mov	r3, r2, asl #1
 	str	r3, [sp, #8]
 	mov	r3, #0
-.L1355:
+.L1356:
 	str	r3, [sp, #16]
 	ldrb	r3, [sp, #16]	@ zero_extendqisi2
 	str	r3, [sp, #12]
-	ldr	r3, .L1357
+	ldr	r3, .L1358
 	ldr	r2, [sp, #12]
 	ldrb	r3, [r3, #1717]	@ zero_extendqisi2
 	cmp	r3, r2
-	bhi	.L1308
-.L1263:
-	ldr	r3, .L1357
+	bhi	.L1309
+.L1264:
+	ldr	r3, .L1358
 	strb	r6, [r3, #699]
 	strb	r5, [r3, #700]
 	add	sp, sp, #44
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1308:
+.L1309:
 	ldr	r2, [sp, #12]
-	ldr	r3, .L1357
+	ldr	r3, .L1358
 	add	r3, r3, r2
 	ldrb	r10, [r3, #1720]	@ zero_extendqisi2
-	ldr	r3, .L1357
+	ldr	r3, .L1358
 	add	r3, r3, r10, asl #3
 	mov	r0, r10
 	ldrb	fp, [r3, #16]	@ zero_extendqisi2
@@ -7869,55 +7879,55 @@ HynixGetReadRetryDefault:
 	str	r3, [r7, #2056]
 	bl	NandcWaitFlashReady
 	cmp	r4, #7
-	ldreq	r3, .L1357+12
+	ldreq	r3, .L1358+12
 	moveq	r7, #160
 	mlaeq	r7, r7, r10, r3
 	addeq	r3, r7, #28
-	beq	.L1352
-.L1265:
+	beq	.L1353
+.L1266:
 	cmp	r4, #8
-	beq	.L1267
-	ldr	r3, .L1357+12
+	beq	.L1268
+	ldr	r3, .L1358+12
 	add	r7, r3, r10, asl #6
 	add	r3, r7, #20
-.L1352:
+.L1353:
 	str	r3, [sp, #20]
 	cmp	r4, #4
 	add	r3, r8, fp, asl #8
 	mov	r2, #54
 	str	r2, [r3, #2056]
-	bne	.L1268
+	bne	.L1269
 	add	r9, r8, r9
 	mov	r3, #255
 	str	r3, [r9, #2052]
 	mov	r3, #64
 	str	r3, [r9, #2048]
 	mov	r3, #204
-	b	.L1353
-.L1268:
+	b	.L1354
+.L1269:
 	sub	r2, r4, #5
 	cmp	r2, #1
-	bhi	.L1270
-	ldr	r2, .L1357
+	bhi	.L1271
+	ldr	r2, .L1358
 	ldrb	r2, [r2, #702]	@ zero_extendqisi2
 	str	r2, [r3, #2052]
 	mov	r2, #82
 	str	r2, [r3, #2048]
-	b	.L1269
-.L1270:
+	b	.L1270
+.L1271:
 	cmp	r4, #7
-	bne	.L1269
+	bne	.L1270
 	add	r9, r8, r9
 	mov	r3, #174
 	str	r3, [r9, #2052]
 	mov	r3, #0
 	str	r3, [r9, #2048]
 	mov	r3, #176
-.L1353:
+.L1354:
 	str	r3, [r9, #2052]
 	mov	r3, #77
 	str	r3, [r9, #2048]
-.L1269:
+.L1270:
 	add	r3, r8, fp, asl #8
 	cmp	r4, #6
 	mov	r2, #22
@@ -7938,7 +7948,7 @@ HynixGetReadRetryDefault:
 	str	r2, [r3, #2052]
 	mov	r2, #0
 	str	r2, [r3, #2052]
-.L1309:
+.L1310:
 	add	r3, r8, fp, asl #8
 	mov	r2, #48
 	mov	r0, r10
@@ -7957,134 +7967,134 @@ HynixGetReadRetryDefault:
 	ldr	r3, [sp, #24]
 	orrs	r3, r3, r2
 	movne	ip, #16
-	bne	.L1273
+	bne	.L1274
 	cmp	r4, #7
 	movne	ip, #2
 	moveq	ip, #32
-.L1273:
-	ldr	r3, .L1357+20
+.L1274:
+	ldr	r3, .L1358+20
 	add	r0, r8, fp, asl #8
 	ldr	r3, [r3, #148]
 	mov	r1, r3
-.L1274:
+.L1275:
 	ldr	r2, [r0, #2048]
 	strb	r2, [r1], #1
 	rsb	r2, r3, r1
 	uxtb	r2, r2
 	cmp	r2, ip
-	bcc	.L1274
+	bcc	.L1275
 	ldr	r2, [sp, #4]
 	cmp	r2, #0
-	beq	.L1275
+	beq	.L1276
 	mov	r2, #0
-.L1277:
+.L1278:
 	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
 	uxtb	r1, r2
 	cmp	ip, #50
-	beq	.L1276
+	beq	.L1277
 	add	ip, r3, r2, asl #2
 	ldrb	ip, [ip, #1]	@ zero_extendqisi2
 	cmp	ip, #5
-	beq	.L1276
+	beq	.L1277
 	add	r2, r2, #1
 	cmp	r2, #8
-	bne	.L1277
-	b	.L1278
-.L1276:
+	bne	.L1278
+	b	.L1279
+.L1277:
 	cmp	r1, #6
-	bls	.L1279
-.L1278:
-	ldr	r0, .L1357+24
+	bls	.L1280
+.L1279:
+	ldr	r0, .L1358+24
 	mov	r1, #0
 	bl	printk
-.L1280:
-	b	.L1280
-.L1275:
+.L1281:
+	b	.L1281
+.L1276:
 	cmp	r4, #7
-	bne	.L1281
+	bne	.L1282
 	ldr	r2, [sp, #4]
-.L1283:
+.L1284:
 	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
 	uxtb	r1, r2
 	cmp	ip, #12
-	beq	.L1282
+	beq	.L1283
 	add	ip, r3, r2, asl #2
 	ldrb	ip, [ip, #1]	@ zero_extendqisi2
 	cmp	ip, #10
-	beq	.L1282
+	beq	.L1283
 	add	r2, r2, #1
 	cmp	r2, #8
-	bne	.L1283
-	b	.L1284
-.L1282:
+	bne	.L1284
+	b	.L1285
+.L1283:
 	cmp	r1, #7
-	bne	.L1279
-.L1284:
-	ldr	r0, .L1357+24
+	bne	.L1280
+.L1285:
+	ldr	r0, .L1358+24
 	mov	r1, #0
 	bl	printk
-.L1285:
-	b	.L1285
-.L1281:
+.L1286:
+	b	.L1286
+.L1282:
 	cmp	r4, #6
-	bne	.L1279
+	bne	.L1280
 	sub	r2, r3, #1
 	add	r3, r3, #7
-.L1286:
+.L1287:
 	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 	cmp	r1, #12
-	beq	.L1279
+	beq	.L1280
 	ldrb	r1, [r2, #8]	@ zero_extendqisi2
 	cmp	r1, #4
-	beq	.L1279
+	beq	.L1280
 	cmp	r2, r3
-	bne	.L1286
-	ldr	r0, .L1357+24
+	bne	.L1287
+	ldr	r0, .L1358+24
 	mov	r1, #0
 	bl	printk
-.L1288:
-	b	.L1288
-.L1279:
-	ldr	r1, .L1357+20
+.L1289:
+	b	.L1289
+.L1280:
+	ldr	r1, .L1358+20
 	ldr	ip, [sp, #36]
 	ldr	r2, [r1, #148]
 	add	ip, r2, ip
 	mov	r3, r2
-.L1289:
+.L1290:
 	cmp	r3, ip
 	ldrne	lr, [r0, #2048]
 	strneb	lr, [r3], #1
-	bne	.L1289
-.L1356:
+	bne	.L1290
+.L1357:
 	ldr	r3, [r1, #148]
 	mov	r0, #8
 	ldr	r1, [sp, #8]
 	add	r1, r3, r1
 	str	r1, [sp, #28]
-.L1292:
+.L1293:
 	ldr	ip, [sp, #8]
 	add	lr, r1, ip
-.L1291:
+.L1292:
 	ldrh	ip, [r1]
 	mvn	ip, ip
 	strh	ip, [r1], #2	@ movhi
 	cmp	r1, lr
-	bne	.L1291
+	bne	.L1292
 	ldr	ip, [sp, #8]
 	subs	r0, r0, #1
 	add	r1, r1, ip
-	bne	.L1292
-.L1293:
+	bne	.L1293
+.L1294:
 	mov	ip, #0
 	mov	r0, ip
-.L1296:
+.L1297:
 	mov	r1, #1
 	mov	lr, #0
 	mov	r1, r1, asl r0
 	mov	r7, #16
 	str	r7, [sp, #32]
 	mov	r7, lr
-.L1294:
+.L1295:
 	ldrh	r9, [r3, lr]
 	and	r9, r9, r1
 	cmp	r9, r1
@@ -8094,71 +8104,71 @@ HynixGetReadRetryDefault:
 	ldr	r9, [sp, #32]
 	subs	r9, r9, #1
 	str	r9, [sp, #32]
-	bne	.L1294
+	bne	.L1295
 	cmp	r7, #8
 	add	r0, r0, #1
 	orrhi	ip, ip, r1
 	uxthhi	ip, ip
 	cmp	r0, #16
-	bne	.L1296
+	bne	.L1297
 	ldr	r1, [sp, #28]
 	strh	ip, [r3], #2	@ movhi
 	cmp	r3, r1
-	bne	.L1293
-	ldr	r3, .L1357+20
+	bne	.L1294
+	ldr	r3, .L1358+20
 	ldr	r1, [r3, #148]
 	mov	r3, #0
 	sub	r0, r1, #4
 	add	ip, r1, #28
-.L1298:
+.L1299:
 	ldr	lr, [r0, #4]!
 	cmp	lr, #0
 	addeq	r3, r3, #1
 	cmp	r0, ip
-	bne	.L1298
+	bne	.L1299
 	cmp	r3, #7
-	ble	.L1299
-	ldr	r0, .L1357+28
+	ble	.L1300
+	ldr	r0, .L1358+28
 	mov	r2, #1
 	mov	r3, #1024
 	bl	rknand_print_hex
-	ldr	r0, .L1357+24
+	ldr	r0, .L1358+24
 	mov	r1, #0
 	bl	printk
+.L1301:
+	b	.L1301
 .L1300:
-	b	.L1300
-.L1299:
 	cmp	r4, #6
 	moveq	r0, #4
-	beq	.L1301
+	beq	.L1302
 	cmp	r4, #7
 	moveq	r0, #10
-	beq	.L1301
+	beq	.L1302
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
 	moveq	r0, #8
 	movne	r0, #5
-.L1301:
+.L1302:
 	sub	r9, r6, #1
 	ldr	r1, [sp, #20]
 	mov	ip, #0
 	uxtb	r9, r9
 	add	r9, r9, #1
-.L1302:
+.L1303:
 	mov	r7, r1
 	mov	r3, r2
-.L1303:
+.L1304:
 	ldrb	lr, [r3], #1	@ zero_extendqisi2
 	strb	lr, [r7], #1
 	rsb	lr, r2, r3
 	uxtb	lr, lr
 	cmp	lr, r6
-	bcc	.L1303
+	bcc	.L1304
 	add	ip, ip, #1
 	add	r2, r2, r9
 	cmp	ip, r5
 	add	r1, r1, r0
-	blt	.L1302
+	blt	.L1303
 	add	r7, r8, fp, asl #8
 	mov	r3, #255
 	mov	r0, r10
@@ -8166,10 +8176,10 @@ HynixGetReadRetryDefault:
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #24]
 	cmp	r3, #0
-	beq	.L1305
+	beq	.L1306
 	mov	r3, #54
 	str	r3, [r7, #2056]
-	ldr	r3, .L1357
+	ldr	r3, .L1358
 	mvn	r1, #0
 	ldr	r0, [sp, #12]
 	ldrb	r3, [r3, #702]	@ zero_extendqisi2
@@ -8179,20 +8189,20 @@ HynixGetReadRetryDefault:
 	mov	r3, #22
 	str	r3, [r7, #2056]
 	bl	FlashReadCmd
-	b	.L1306
-.L1305:
+	b	.L1307
+.L1306:
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
 	movne	r3, #190
 	moveq	r3, #56
 	str	r3, [r7, #2056]
-.L1306:
+.L1307:
 	mov	r0, r10
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #16]
 	add	r3, r3, #1
-	b	.L1355
-.L1267:
+	b	.L1356
+.L1268:
 	mov	r3, #120
 	mov	r2, #23
 	str	r3, [r7, #2056]
@@ -8214,12 +8224,12 @@ HynixGetReadRetryDefault:
 	str	r1, [r7, #2052]
 	str	r2, [r7, #2052]
 	str	r3, [r7, #2052]
-	ldr	r3, .L1357+32
+	ldr	r3, .L1358+32
 	str	r3, [sp, #20]
-	b	.L1309
-.L1358:
+	b	.L1310
+.L1359:
 	.align	2
-.L1357:
+.L1358:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LANCHOR1+3228
@@ -8243,62 +8253,62 @@ FlashGetReadRetryDefault:
 	bxeq	lr
 	sub	r2, r3, #1
 	cmp	r2, #7
-	bhi	.L1361
+	bhi	.L1362
 	b	HynixGetReadRetryDefault
-.L1361:
+.L1362:
 	cmp	r3, #49
-	bne	.L1362
-	ldr	r2, .L1373
-	ldr	r0, .L1373+4
-	ldr	r1, .L1373+8
+	bne	.L1363
+	ldr	r2, .L1374
+	ldr	r0, .L1374+4
+	ldr	r1, .L1374+8
 	strb	r3, [r2, #698]
 	mov	r3, #4
 	strb	r3, [r2, #699]
 	mov	r3, #15
 	strb	r3, [r2, #700]
 	mov	r2, #64
-	b	.L1371
-.L1362:
+	b	.L1372
+.L1363:
 	sub	r2, r3, #65
 	cmp	r3, #33
 	cmpne	r2, #1
-	ldrls	r2, .L1373
+	ldrls	r2, .L1374
 	strlsb	r3, [r2, #698]
 	movls	r3, #4
-	bls	.L1372
-.L1363:
+	bls	.L1373
+.L1364:
 	cmp	r3, #34
 	cmpne	r3, #67
-	bne	.L1364
-	ldr	r2, .L1373
+	bne	.L1365
+	ldr	r2, .L1374
 	strb	r3, [r2, #698]
 	mov	r3, #5
-.L1372:
+.L1373:
 	strb	r3, [r2, #699]
 	mov	r3, #7
-	ldr	r0, .L1373+4
+	ldr	r0, .L1374+4
 	strb	r3, [r2, #700]
 	mov	r2, #45
-	ldr	r1, .L1373+12
-	b	.L1371
-.L1364:
+	ldr	r1, .L1374+12
+	b	.L1372
+.L1365:
 	cmp	r3, #35
 	cmpne	r3, #68
 	bxne	lr
-	ldr	r2, .L1373
-	ldr	r0, .L1373+4
-	ldr	r1, .L1373+16
+	ldr	r2, .L1374
+	ldr	r0, .L1374+4
+	ldr	r1, .L1374+16
 	strb	r3, [r2, #698]
 	mov	r3, #5
 	strb	r3, [r2, #699]
 	mov	r3, #17
 	strb	r3, [r2, #700]
 	mov	r2, #95
-.L1371:
+.L1372:
 	b	ftl_memcpy
-.L1374:
+.L1375:
 	.align	2
-.L1373:
+.L1374:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+702
 	.word	.LANCHOR1+408
@@ -8316,15 +8326,15 @@ NandcXferComp:
 	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	.pad #8
-	ldr	r5, .L1415
+	ldr	r5, .L1416
 	add	r0, r5, r0, asl #3
 	ldr	r3, [r5, #1740]
 	ldr	r4, [r0, #12]
 	cmp	r3, #3
-	bls	.L1406
+	bls	.L1407
 	ldr	r3, [r4, #16]
 	tst	r3, #4
-	beq	.L1406
+	beq	.L1407
 	mov	r0, r4
 	bl	wait_for_nandc_xfer_completed
 	ldr	r6, [r4, #16]
@@ -8333,49 +8343,49 @@ NandcXferComp:
 	cmp	r6, #0
 	movne	r6, #0
 	str	r3, [sp]
-	beq	.L1388
-.L1378:
+	beq	.L1389
+.L1379:
 	ldr	r2, [r4, #28]
 	ldr	r3, [sp]
 	ubfx	r2, r2, #16, #5
 	ubfx	r3, r3, #22, #6
 	cmp	r2, r3
-	bge	.L1386
+	bge	.L1387
 	ldr	r3, [r5, #1740]
 	cmp	r3, #5
-	bhi	.L1379
-.L1382:
+	bhi	.L1380
+.L1383:
 	add	r6, r6, #1
 	bic	r3, r6, #-16777216
 	cmp	r3, #0
-	bne	.L1378
+	bne	.L1379
 	ldr	r2, [r4, #28]
 	mov	r1, r6
 	ldr	r3, [sp]
 	ubfx	r2, r2, #16, #5
-	ldr	r0, .L1415+4
+	ldr	r0, .L1416+4
 	ubfx	r3, r3, #22, #6
 	bl	printk
-	ldr	r0, .L1415+8
+	ldr	r0, .L1416+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-	b	.L1378
-.L1379:
+	b	.L1379
+.L1380:
 	ldr	r3, [r4]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #8192
-	beq	.L1382
+	beq	.L1383
 	ldr	r3, [sp, #4]
 	tst	r3, #131072
-	beq	.L1382
-.L1386:
+	beq	.L1383
+.L1387:
 	ldr	r3, [r5, #1776]
-	ldr	r4, .L1415
+	ldr	r4, .L1416
 	cmp	r3, #0
-	beq	.L1387
+	beq	.L1388
 	ldr	r1, [sp]
 	mov	r2, #0
 	ldr	r0, [r4, #1768]
@@ -8388,39 +8398,39 @@ NandcXferComp:
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-	b	.L1387
-.L1390:
+	b	.L1388
+.L1391:
 	ldr	r3, [r4, #8]
 	add	r6, r6, #1
 	str	r3, [sp]
 	bic	r3, r6, #-16777216
 	cmp	r3, #0
-	bne	.L1388
+	bne	.L1389
 	ldr	r2, [sp]
 	mov	r1, r6
 	ldr	r3, [r4, #28]
-	ldr	r0, .L1415+12
+	ldr	r0, .L1416+12
 	ubfx	r3, r3, #16, #5
 	bl	printk
-	ldr	r0, .L1415+8
+	ldr	r0, .L1416+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L1388:
+.L1389:
 	ldr	r3, [sp]
 	tst	r3, #1048576
-	beq	.L1390
+	beq	.L1391
 	ldr	r3, [r5, #1784]
 	cmp	r3, #0
-	beq	.L1391
+	beq	.L1392
 	mov	r0, r4
 	bl	NandcSendDumpDataStart
-.L1391:
+.L1392:
 	ldr	r3, [r5, #1776]
-	ldr	r6, .L1415
+	ldr	r6, .L1416
 	cmp	r3, #0
-	beq	.L1392
+	beq	.L1393
 	ldr	r1, [sp]
 	mov	r2, #1
 	ldr	r0, [r6, #1768]
@@ -8433,29 +8443,29 @@ NandcXferComp:
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-.L1392:
+.L1393:
 	ldr	r3, [r5, #1784]
 	cmp	r3, #0
-	beq	.L1387
+	beq	.L1388
 	mov	r0, r4
 	bl	NandcSendDumpDataDone
-.L1387:
+.L1388:
 	mov	r3, #0
 	str	r3, [r5, #1776]
-	b	.L1375
-.L1406:
+	b	.L1376
+.L1407:
 	ldr	r3, [r4, #8]
 	str	r3, [sp]
 	ldr	r3, [sp]
 	tst	r3, #1048576
-	beq	.L1406
-.L1375:
+	beq	.L1407
+.L1376:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L1416:
+.L1417:
 	.align	2
-.L1415:
+.L1416:
 	.word	.LANCHOR0
 	.word	.LC87
 	.word	.LC88
@@ -8472,11 +8482,11 @@ NandcXferData:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	fp, r3
-	ldr	r3, .L1466
+	ldr	r3, .L1467
 	mov	r8, r2
 	.pad #100
 	sub	sp, sp, #100
-	ldr	r4, .L1466+4
+	ldr	r4, .L1467+4
 	tst	fp, #63
 	mov	r10, r0
 	ldr	r2, [r3]
@@ -8486,15 +8496,15 @@ NandcXferData:
 	str	r2, [sp, #92]
 	add	r2, r4, r0, asl #3
 	ldr	r9, [r2, #12]
-	bne	.L1418
-	cmp	r5, #0
 	bne	.L1419
+	cmp	r5, #0
+	bne	.L1420
 	add	r0, sp, #28
 	mov	r1, #255
 	mov	r2, #64
 	bl	ftl_memset
 	add	r5, sp, #28
-.L1419:
+.L1420:
 	mov	r0, r10
 	mov	r1, r7
 	mov	r2, r8
@@ -8506,7 +8516,7 @@ NandcXferData:
 	bl	NandcXferComp
 	cmp	r7, #0
 	movne	r6, #0
-	bne	.L1420
+	bne	.L1421
 	ldr	r3, [r4, #1788]
 	mov	r1, r8, lsr #1
 	mov	r2, r7
@@ -8514,11 +8524,11 @@ NandcXferData:
 	mov	r3, r7
 	movcc	r0, #64
 	movcs	r0, #128
-.L1422:
+.L1423:
 	cmp	r2, r1
 	add	r5, r5, #4
 	add	ip, r3, r0
-	bcs	.L1464
+	bcs	.L1465
 	ldr	lr, [r4, #1756]
 	mov	r3, r3, lsr #2
 	add	r2, r2, #1
@@ -8531,30 +8541,30 @@ NandcXferData:
 	strb	lr, [r5, #-2]
 	strb	r3, [r5, #-1]
 	mov	r3, ip
-	b	.L1422
-.L1464:
+	b	.L1423
+.L1465:
 	ldr	r1, [r4, #1788]
 	mov	r2, #0
 	ldr	r0, [r4, #1740]
 	mov	r8, r8, lsr #2
 	mov	r6, r2
-.L1424:
+.L1425:
 	cmp	r2, r8
-	bcs	.L1420
+	bcs	.L1421
 	cmp	r1, #0
-	beq	.L1420
+	beq	.L1421
 	add	r3, r2, #8
 	ldr	r3, [r9, r3, asl #2]
 	str	r3, [sp, #24]
 	ldr	r3, [sp, #24]
 	tst	r3, #4
-	bne	.L1449
+	bne	.L1450
 	ldr	r4, [sp, #24]
 	ubfx	r4, r4, #15, #1
 	cmp	r4, #0
-	bne	.L1449
+	bne	.L1450
 	cmp	r0, #5
-	bls	.L1426
+	bls	.L1427
 	ldr	ip, [sp, #24]
 	ldr	r4, [sp, #24]
 	ldr	r3, [sp, #24]
@@ -8573,10 +8583,10 @@ NandcXferData:
 	ubfxls	r3, r3, #16, #5
 	ubfxhi	r4, r4, #27, #1
 	ubfxls	r4, r4, #29, #1
-	b	.L1463
-.L1426:
+	b	.L1464
+.L1427:
 	cmp	r0, #3
-	bls	.L1428
+	bls	.L1429
 	ldr	ip, [sp, #24]
 	ldr	r4, [sp, #24]
 	ldr	r3, [sp, #24]
@@ -8588,41 +8598,41 @@ NandcXferData:
 	orr	ip, ip, r4, asl #5
 	orr	r3, r3, lr, asl #5
 	cmp	ip, r3
-	bls	.L1429
+	bls	.L1430
 	ldr	r3, [sp, #24]
 	ldr	r4, [sp, #24]
 	ubfx	r3, r3, #3, #5
 	ubfx	r4, r4, #28, #1
-.L1463:
+.L1464:
 	orr	r4, r3, r4, asl #5
-	b	.L1428
-.L1429:
+	b	.L1429
+.L1430:
 	ldr	r5, [sp, #24]
 	ldr	r4, [sp, #24]
 	ubfx	r5, r5, #16, #5
 	ubfx	r4, r4, #30, #1
 	orr	r4, r5, r4, asl #5
-.L1428:
+.L1429:
 	cmp	r6, r4
 	movcc	r6, r4
-	b	.L1425
-.L1449:
+	b	.L1426
+.L1450:
 	mvn	r6, #0
-.L1425:
+.L1426:
 	add	r2, r2, #1
-	b	.L1424
-.L1420:
+	b	.L1425
+.L1421:
 	mov	r3, #0
 	str	r3, [r9, #16]
-	b	.L1431
-.L1418:
+	b	.L1432
+.L1419:
 	cmp	r1, #1
 	mov	r4, #0
-	bne	.L1461
+	bne	.L1462
 	mov	r6, r4
-.L1432:
+.L1433:
 	cmp	r4, r8
-	bcs	.L1465
+	bcs	.L1466
 	cmp	fp, #0
 	and	ip, r4, #3
 	addne	r3, fp, r4, asl #9
@@ -8648,11 +8658,11 @@ NandcXferData:
 	bl	NandcXferStart
 	mov	r0, r10
 	bl	NandcXferComp
-	b	.L1432
-.L1465:
+	b	.L1433
+.L1466:
 	mov	r6, #0
-	b	.L1431
-.L1461:
+	b	.L1432
+.L1462:
 	str	r4, [sp]
 	mov	r1, r4
 	str	r4, [sp, #4]
@@ -8661,16 +8671,16 @@ NandcXferData:
 	mov	r6, r4
 	bl	NandcXferStart
 	str	fp, [sp, #12]
-.L1437:
+.L1438:
 	cmp	r4, r8
-	bcs	.L1431
+	bcs	.L1432
 	mov	r0, r10
 	bl	NandcXferComp
 	ldr	r3, [r9, #32]
 	add	ip, r4, #2
 	cmp	ip, r8
 	str	r3, [sp, #24]
-	bcs	.L1438
+	bcs	.L1439
 	mov	r3, #0
 	mov	r0, r10
 	str	r3, [sp]
@@ -8681,11 +8691,11 @@ NandcXferData:
 	str	ip, [sp, #20]
 	bl	NandcXferStart
 	ldr	ip, [sp, #20]
-.L1438:
+.L1439:
 	ldr	r3, [sp, #24]
 	tst	r3, #4
 	mvnne	r6, #0
-	bne	.L1439
+	bne	.L1440
 	ldr	r2, [sp, #24]
 	ldr	r3, [sp, #24]
 	ubfx	r2, r2, #3, #5
@@ -8693,7 +8703,7 @@ NandcXferData:
 	orr	r3, r2, r3, asl #5
 	cmp	r6, r3
 	movcc	r6, r3
-.L1439:
+.L1440:
 	cmp	fp, #0
 	ldr	r3, [sp, #12]
 	sub	r2, ip, #2
@@ -8713,37 +8723,37 @@ NandcXferData:
 	mov	r4, ip
 	add	r3, r3, #1024
 	str	r3, [sp, #12]
-	b	.L1437
-.L1431:
-	ldr	r3, .L1466+4
+	b	.L1438
+.L1432:
+	ldr	r3, .L1467+4
 	clz	r7, r7
 	mov	r7, r7, lsr #5
 	ldr	r3, [r3, #1740]
 	cmp	r3, #5
 	movls	r7, #0
 	cmp	r7, #0
-	beq	.L1443
+	beq	.L1444
 	ldr	r3, [r9]
 	and	r2, r3, #139264
 	cmp	r2, #139264
 	orreq	r3, r3, #131072
 	streq	r3, [r9]
 	mvneq	r6, #0
-.L1443:
+.L1444:
 	ldr	r3, [sp, #16]
 	mov	r0, r6
 	ldr	r2, [sp, #92]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1445
+	beq	.L1446
 	bl	__stack_chk_fail
-.L1445:
+.L1446:
 	add	sp, sp, #100
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1467:
+.L1468:
 	.align	2
-.L1466:
+.L1467:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -8759,19 +8769,19 @@ FlashReadRawPage:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r8, r3
-	ldr	r3, .L1471
+	ldr	r3, .L1472
 	subs	r4, r0, #0
 	mov	r6, r1
 	mov	r7, r2
 	ldrb	r5, [r3, #481]	@ zero_extendqisi2
-	bne	.L1469
-	ldr	r2, .L1471+4
+	bne	.L1470
+	ldr	r2, .L1472+4
 	ldrb	r3, [r2, #1]	@ zero_extendqisi2
 	ldr	r2, [r2, #4]
 	mul	r2, r2, r3
 	cmp	r1, r2
 	movcc	r5, #4
-.L1469:
+.L1470:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8794,9 +8804,9 @@ FlashReadRawPage:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1472:
+.L1473:
 	.align	2
-.L1471:
+.L1472:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8811,7 +8821,7 @@ FlashDdrTunningRead:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, r3
-	ldr	r4, .L1500
+	ldr	r4, .L1501
 	.pad #20
 	sub	sp, sp, #20
 	mov	r10, r0
@@ -8827,7 +8837,7 @@ FlashDdrTunningRead:
 	movcs	r9, #12
 	cmp	r3, #0
 	moveq	r6, #1024
-	beq	.L1475
+	beq	.L1476
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
@@ -8845,19 +8855,19 @@ FlashDdrTunningRead:
 	ldrb	r0, [r4, #1716]	@ zero_extendqisi2
 	bl	NandcSetMode
 	cmn	r6, #1
-	bne	.L1476
-.L1485:
+	bne	.L1477
+.L1486:
 	mvn	r6, #0
-	b	.L1477
-.L1476:
+	b	.L1478
+.L1477:
 	mov	r2, r6
-	ldr	r0, .L1500+4
+	ldr	r0, .L1501+4
 	ldr	r1, [sp]
 	bl	printk
 	cmp	r6, #9
 	addls	r4, r4, r10, asl #3
 	ldrls	r3, [r4, #12]
-	ldr	r4, .L1500+8
+	ldr	r4, .L1501+8
 	ldrls	r2, [r3, #3840]
 	ldrls	r2, [r3]
 	orrls	r2, r2, #131072
@@ -8869,14 +8879,14 @@ FlashDdrTunningRead:
 	movcs	r7, #0
 	strcs	r7, [r4, #152]
 	movcs	fp, r7
-	bcc	.L1477
-.L1475:
+	bcc	.L1478
+.L1476:
 	mov	r4, #0
 	mvn	r8, #0
 	mov	ip, r4
 	mov	r5, r4
 	str	r4, [sp, #4]
-.L1483:
+.L1484:
 	uxtb	r0, r9
 	str	ip, [sp, #12]
 	bl	NandcSetDdrPara
@@ -8888,74 +8898,74 @@ FlashDdrTunningRead:
 	add	r3, r6, #1
 	cmp	r0, r3
 	ldr	ip, [sp, #12]
-	bhi	.L1479
+	bhi	.L1480
 	cmp	r0, #2
-	bhi	.L1489
+	bhi	.L1490
 	add	r5, r5, #1
 	cmp	r5, #9
-	bls	.L1489
+	bls	.L1490
 	rsb	r4, r5, r9
 	mov	r6, r0
 	mov	r8, #0
-	b	.L1481
-.L1479:
+	b	.L1482
+.L1480:
 	ldr	r3, [sp, #4]
 	cmp	r3, r5
-	bcs	.L1490
+	bcs	.L1491
 	cmp	r5, #7
 	rsb	ip, r5, r4
-	bhi	.L1491
+	bhi	.L1492
 	str	r5, [sp, #4]
-	b	.L1490
-.L1489:
+	b	.L1491
+.L1490:
 	mov	r8, #0
 	mov	r4, r9
 	mov	r6, r0
 	mov	r7, r8
 	mov	fp, r8
-	b	.L1480
-.L1490:
+	b	.L1481
+.L1491:
 	mov	r5, #0
-.L1480:
+.L1481:
 	add	r9, r9, #2
 	cmp	r9, #69
-	bls	.L1483
-.L1481:
+	bls	.L1484
+.L1482:
 	ldr	r3, [sp, #4]
 	cmp	r3, r5
 	movcs	r4, ip
-	b	.L1482
-.L1491:
+	b	.L1483
+.L1492:
 	mov	r4, ip
-.L1482:
+.L1483:
 	cmp	r4, #0
-	beq	.L1484
-	ldr	r0, .L1500+12
+	beq	.L1485
+	ldr	r0, .L1501+12
 	mov	r1, r4
 	bl	printk
 	uxtb	r0, r4
 	bl	NandcSetDdrPara
-.L1484:
+.L1485:
 	cmn	r8, #1
-	bne	.L1477
-	ldr	r0, .L1500+16
+	bne	.L1478
+	ldr	r0, .L1501+16
 	mov	r1, r10
 	ldr	r2, [sp]
 	bl	printk
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
-	beq	.L1485
+	beq	.L1486
 	ldr	r3, [sp, #8]
 	ubfx	r0, r3, #8, #8
 	bl	NandcSetDdrPara
-.L1477:
+.L1478:
 	mov	r0, r6
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1501:
+.L1502:
 	.align	2
-.L1500:
+.L1501:
 	.word	.LANCHOR0
 	.word	.LC90
 	.word	.LANCHOR2
@@ -8980,19 +8990,19 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	cmn	r0, #1
 	mov	r4, r0
-	bne	.L1503
-	ldr	r9, .L1523
+	bne	.L1504
+	ldr	r9, .L1524
 	ldrb	fp, [r9, #8]	@ zero_extendqisi2
 	mov	r10, r9
 	cmp	fp, #0
-	bne	.L1504
-.L1506:
+	bne	.L1505
+.L1507:
 	ldrb	r3, [r10, #1732]	@ zero_extendqisi2
-	ldr	r9, .L1523
+	ldr	r9, .L1524
 	cmp	r3, #0
-	beq	.L1503
-	b	.L1522
-.L1504:
+	beq	.L1504
+	b	.L1523
+.L1505:
 	mov	r3, #0
 	mov	r0, r5
 	strb	r3, [r9, #8]
@@ -9003,9 +9013,9 @@ FlashReadPage:
 	strb	fp, [r9, #8]
 	cmn	r0, #1
 	movne	r4, r0
-	beq	.L1506
-	b	.L1503
-.L1522:
+	beq	.L1507
+	b	.L1504
+.L1523:
 	ldr	r3, [r9, #76]
 	mov	r0, r5
 	mov	r1, r6
@@ -9017,22 +9027,22 @@ FlashReadPage:
 	bl	FlashDdrTunningRead
 	cmn	r0, #1
 	mov	r4, r0
-	beq	.L1507
+	beq	.L1508
 	ldrb	r3, [r9, #1792]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1503
-.L1507:
+	bls	.L1504
+.L1508:
 	ubfx	r0, r10, #8, #8
 	bl	NandcSetDdrPara
-.L1503:
-	ldr	r9, .L1523+4
+.L1504:
+	ldr	r9, .L1524+4
 	ldr	ip, [r9, #156]
 	adds	r3, ip, #0
 	movne	r3, #1
 	cmn	r4, #1
 	movne	r3, #0
 	cmp	r3, #0
-	beq	.L1508
+	beq	.L1509
 	mov	r1, r6
 	mov	r2, r8
 	mov	r3, r7
@@ -9041,15 +9051,15 @@ FlashReadPage:
 	mov	r2, r5
 	mov	r3, r6
 	mov	r4, r0
-	ldr	r0, .L1523+8
+	ldr	r0, .L1524+8
 	mov	r1, r4
 	bl	printk
 	cmn	r4, #1
-	bne	.L1508
-	ldr	r3, .L1523
+	bne	.L1509
+	ldr	r3, .L1524
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1508
+	beq	.L1509
 	mov	r0, r5
 	bl	flash_enter_slc_mode
 	ldr	ip, [r9, #156]
@@ -9061,14 +9071,14 @@ FlashReadPage:
 	mov	r4, r0
 	mov	r0, r5
 	bl	flash_exit_slc_mode
-.L1508:
+.L1509:
 	mov	r0, r4
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1524:
+.L1525:
 	.align	2
-.L1523:
+.L1524:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC93
@@ -9085,7 +9095,7 @@ FlashDdrParaScan:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r7, r0
-	ldr	r5, .L1535
+	ldr	r5, .L1536
 	mov	r6, r1
 	mov	r4, #0
 	ldrb	r0, [r5, #1716]	@ zero_extendqisi2
@@ -9107,27 +9117,27 @@ FlashDdrParaScan:
 	mov	r3, r5
 	cmn	r0, #1
 	cmnne	r8, #1
-	bne	.L1526
+	bne	.L1527
 	ldrb	r2, [r5, #1716]	@ zero_extendqisi2
 	tst	r2, #1
-	beq	.L1526
+	beq	.L1527
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
 	strb	r4, [r5, #1732]
-	b	.L1527
-.L1526:
+	b	.L1528
+.L1527:
 	mov	r2, #1
 	strb	r2, [r3, #1732]
-.L1527:
+.L1528:
 	mov	r0, #0
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1536:
+.L1537:
 	.align	2
-.L1535:
+.L1536:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashDdrParaScan, .-FlashDdrParaScan
@@ -9142,17 +9152,17 @@ FlashLoadPhyInfo:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r10, .L1554
+	ldr	r10, .L1555
 	mov	r6, #0
-	ldr	r7, .L1554+4
+	ldr	r7, .L1555+4
 	mov	r4, r6
-	ldr	r5, .L1554+8
+	ldr	r5, .L1555+8
 	mov	r9, #4
 	ldr	r3, [r10]
 	mvn	r8, #0
 	str	r6, [r5, #164]
 	str	r3, [sp, #12]
-	ldr	r3, .L1554+12
+	ldr	r3, .L1555+12
 	ldr	r0, [r3]	@ unaligned
 	ldr	r3, [r7, #4]
 	str	r0, [sp, #8]	@ unaligned
@@ -9163,10 +9173,10 @@ FlashLoadPhyInfo:
 	str	r3, [r5, #160]
 	bl	flash_enter_slc_mode
 	str	r10, [sp, #4]
-.L1538:
+.L1539:
 	add	fp, r4, #1
 	mov	r10, #0
-.L1540:
+.L1541:
 	add	r3, sp, #8
 	ldrb	r0, [r3, r10]	@ zero_extendqisi2
 	bl	FlashBchSel
@@ -9176,39 +9186,39 @@ FlashLoadPhyInfo:
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1539
+	bne	.L1540
 	mov	r0, #0
 	mov	r1, fp
 	ldr	r2, [r6, #148]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1539
+	bne	.L1540
 	add	r10, r10, #1
 	cmp	r10, #4
-	beq	.L1541
-	b	.L1540
-.L1542:
+	beq	.L1542
+	b	.L1541
+.L1543:
 	add	r0, fp, #12
 	movw	r1, #2036
 	bl	js_hash
 	ldr	r3, [fp, #8]
 	cmp	r3, r0
 	mvnne	r8, #0
-	bne	.L1541
-	ldr	r8, .L1554+16
+	bne	.L1542
+	ldr	r8, .L1555+16
 	add	r1, fp, #160
 	mov	r2, #32
 	mov	r0, r8
 	bl	ftl_memcpy
 	ldr	r1, [r6, #160]
 	mov	r2, #32
-	ldr	r0, .L1554+20
+	ldr	r0, .L1555+20
 	add	r1, r1, #192
 	bl	ftl_memcpy
 	ldr	r1, [r6, #160]
 	mov	r2, #852
-	ldr	r0, .L1554+24
+	ldr	r0, .L1555+24
 	add	r1, r1, #224
 	bl	ftl_memcpy
 	ldrh	r0, [r8, #10]
@@ -9228,44 +9238,44 @@ FlashLoadPhyInfo:
 	ldrh	r3, [r8, #14]
 	mov	r8, #0
 	strb	r3, [r5, #172]
-.L1541:
+.L1542:
 	ldr	r3, [sp]
 	subs	r9, r9, #1
 	add	r4, r4, r3
-	bne	.L1538
+	bne	.L1539
 	mov	r0, r9
-.L1553:
+.L1554:
 	bl	flash_exit_slc_mode
 	mov	r0, r8
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1548
+	beq	.L1549
 	bl	__stack_chk_fail
-.L1539:
+.L1540:
 	ldr	fp, [r5, #160]
-	ldr	r2, .L1554+28
+	ldr	r2, .L1555+28
 	ldr	r3, [fp]
 	cmp	r3, r2
-	bne	.L1541
-	cmp	r8, #0
 	bne	.L1542
+	cmp	r8, #0
+	bne	.L1543
 	mov	r0, r4
 	ldr	r1, [r7, #4]
 	bl	__aeabi_uidiv
-	ldr	r3, .L1554+8
+	ldr	r3, .L1555+8
 	add	r0, r0, #1
 	str	r0, [r3, #168]
 	mov	r0, r8
-	b	.L1553
-.L1548:
+	b	.L1554
+.L1549:
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1555:
+.L1556:
 	.align	2
-.L1554:
+.L1555:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -9292,7 +9302,7 @@ ToshibaReadRetrial:
 	str	r2, [sp, #8]
 	str	r1, [sp, #16]
 	bl	NandcWaitFlashReady
-	ldr	r4, .L1585
+	ldr	r4, .L1586
 	add	r3, r4, r9, asl #3
 	ldrb	r2, [r3, #16]	@ zero_extendqisi2
 	ldr	r6, [r3, #12]
@@ -9305,50 +9315,50 @@ ToshibaReadRetrial:
 	str	r3, [sp, #12]
 	movls	r3, #0
 	strls	r3, [sp, #4]
-	bls	.L1557
+	bls	.L1558
 	ldrb	r5, [r4, #1732]	@ zero_extendqisi2
 	cmp	r5, #0
 	streq	r5, [sp, #4]
-	beq	.L1558
+	beq	.L1559
 	mov	r0, #0
 	str	r2, [sp, #20]
 	bl	NandcSetDdrMode
 	mov	r3, #1
 	ldr	r2, [sp, #20]
 	str	r3, [sp, #4]
-.L1558:
+.L1559:
 	ldr	r3, [sp, #12]
 	mov	r1, #92
 	add	r3, r6, r3
 	str	r1, [r3, #2056]
 	mov	r1, #197
 	str	r1, [r3, #2056]
-.L1557:
+.L1558:
 	mov	r8, #1
 	mvn	r10, #0
 	mov	r3, r2, asl #8
 	str	r3, [sp, #20]
-.L1559:
-	ldr	r3, .L1585+4
+.L1560:
+	ldr	r3, .L1586+4
 	ldrb	r3, [r3, #173]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r8, r3
-	bcs	.L1584
+	bcs	.L1585
 	ldrb	r3, [r4, #696]	@ zero_extendqisi2
 	mov	r0, r7
 	uxtb	r1, r8
 	sub	r3, r3, #67
 	cmp	r3, #1
-	bhi	.L1560
+	bhi	.L1561
 	bl	SandiskSetRRPara
-	b	.L1561
-.L1560:
-	bl	ToshibaSetRRPara
+	b	.L1562
 .L1561:
+	bl	ToshibaSetRRPara
+.L1562:
 	ldrb	r3, [r4, #696]	@ zero_extendqisi2
 	cmp	r3, #34
-	bne	.L1562
-	ldr	r3, .L1585+4
+	bne	.L1563
+	ldr	r3, .L1586+4
 	ldrb	r3, [r3, #173]	@ zero_extendqisi2
 	sub	r3, r3, #3
 	cmp	r8, r3
@@ -9356,7 +9366,7 @@ ToshibaReadRetrial:
 	moveq	r2, #179
 	addeq	r3, r6, r3
 	streq	r2, [r3, #2056]
-.L1562:
+.L1563:
 	ldr	r3, [sp, #12]
 	mov	r2, #38
 	add	r3, r6, r3
@@ -9365,7 +9375,7 @@ ToshibaReadRetrial:
 	str	r2, [r3, #2056]
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
-	beq	.L1563
+	beq	.L1564
 	mov	r0, #4
 	bl	NandcSetDdrMode
 	mov	r0, r9
@@ -9376,42 +9386,42 @@ ToshibaReadRetrial:
 	mov	r5, r0
 	mov	r0, #0
 	bl	NandcSetDdrMode
-	b	.L1564
-.L1563:
+	b	.L1565
+.L1564:
 	mov	r0, r9
 	ldr	r1, [sp, #16]
 	ldr	r2, [sp, #8]
 	mov	r3, fp
 	bl	FlashReadRawPage
 	mov	r5, r0
-.L1564:
+.L1565:
 	cmn	r5, #1
-	beq	.L1565
+	beq	.L1566
 	ldrb	r2, [r4, #1792]	@ zero_extendqisi2
 	cmn	r10, #1
 	moveq	r10, r5
 	add	r2, r2, r2, asl #1
 	cmp	r5, r2, asr #2
-	bcc	.L1567
+	bcc	.L1568
 	mov	fp, #0
 	str	fp, [sp, #8]
-.L1565:
+.L1566:
 	add	r8, r8, #1
-	b	.L1559
-.L1584:
+	b	.L1560
+.L1585:
 	mov	r5, r10
-.L1567:
+.L1568:
 	ldrb	r2, [r4, #696]	@ zero_extendqisi2
 	mov	r0, r7
 	mov	r1, #0
 	sub	r2, r2, #67
 	cmp	r2, #1
-	bhi	.L1569
+	bhi	.L1570
 	bl	SandiskSetRRPara
-	b	.L1570
-.L1569:
-	bl	ToshibaSetRRPara
+	b	.L1571
 .L1570:
+	bl	ToshibaSetRRPara
+.L1571:
 	ldr	r3, [sp, #12]
 	mov	r2, #255
 	add	r6, r6, r3
@@ -9419,25 +9429,25 @@ ToshibaReadRetrial:
 	ldrb	r2, [r4, #1792]	@ zero_extendqisi2
 	add	r2, r2, r2, asl #1
 	cmp	r5, r2, asr #2
-	bcc	.L1571
+	bcc	.L1572
 	cmn	r5, #1
 	movne	r5, #256
-.L1571:
+.L1572:
 	mov	r0, r9
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
-	beq	.L1572
+	beq	.L1573
 	mov	r0, #4
 	bl	NandcSetDdrMode
-.L1572:
+.L1573:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1586:
+.L1587:
 	.align	2
-.L1585:
+.L1586:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -9453,24 +9463,24 @@ SamsungReadRetrial:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r9, r0
-	ldr	r5, .L1601
+	ldr	r5, .L1602
 	mov	r10, r2
 	mov	r8, r3
 	mov	fp, r1
 	bl	NandcWaitFlashReady
 	add	r2, r5, r9, asl #3
-	ldr	ip, .L1601+4
+	ldr	ip, .L1602+4
 	mov	r7, #1
 	ldrb	r3, [r2, #16]	@ zero_extendqisi2
 	mvn	r4, #0
 	ldr	r6, [r2, #12]
 	add	r3, r3, #8
 	add	r6, r6, r3, asl #8
-.L1588:
+.L1589:
 	ldrb	r3, [ip, #173]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r7, r3
-	bcs	.L1591
+	bcs	.L1592
 	mov	r0, r6
 	uxtb	r1, r7
 	str	ip, [sp, #4]
@@ -9482,38 +9492,38 @@ SamsungReadRetrial:
 	bl	FlashReadRawPage
 	cmn	r0, #1
 	ldr	ip, [sp, #4]
-	beq	.L1589
+	beq	.L1590
 	ldrb	r3, [r5, #1792]	@ zero_extendqisi2
 	cmn	r4, #1
 	moveq	r4, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, asr #2
-	bcc	.L1594
+	bcc	.L1595
 	mov	r8, #0
 	mov	r10, r8
-.L1589:
+.L1590:
 	add	r7, r7, #1
-	b	.L1588
-.L1594:
+	b	.L1589
+.L1595:
 	mov	r4, r0
-.L1591:
+.L1592:
 	mov	r0, r6
 	mov	r1, #0
 	bl	SamsungSetRRPara
 	ldrb	r3, [r5, #1792]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r4, r3, asr #2
-	bcc	.L1593
+	bcc	.L1594
 	cmn	r4, #1
 	movne	r4, #256
-.L1593:
+.L1594:
 	mov	r0, r4
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1602:
+.L1603:
 	.align	2
-.L1601:
+.L1602:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -9525,11 +9535,11 @@ MicronReadRetrial:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-.L1605:
+.L1606:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r3
-	ldr	r3, .L1629
+	ldr	r3, .L1630
 	mov	fp, r2
 	.pad #36
 	sub	sp, sp, #36
@@ -9540,14 +9550,14 @@ MicronReadRetrial:
 	str	r1, [sp, #20]
 	cmp	r3, #0
 	addeq	r5, r5, r5, asl #1
-	ldrne	r2, .L1629+4
+	ldrne	r2, .L1630+4
 	ubfxeq	r5, r5, #2, #8
 	smullne	r2, r3, r5, r2
 	uxtbne	r5, r3
-	ldr	r3, .L1629
+	ldr	r3, .L1630
 	add	r3, r3, r0, asl #3
 	str	r3, [sp, #24]
-.L1615:
+.L1616:
 	mov	r0, r6
 	mov	r9, #0
 	bl	NandcWaitFlashReady
@@ -9561,11 +9571,11 @@ MicronReadRetrial:
 	ldr	r2, [sp, #16]
 	ldr	r3, [sp, #12]
 	add	r7, r3, r2, asl #8
-.L1606:
-	ldr	r3, .L1629+8
+.L1607:
+	ldr	r3, .L1630+8
 	ldrb	r3, [r3, #173]	@ zero_extendqisi2
 	cmp	r9, r3
-	bcs	.L1609
+	bcs	.L1610
 	mov	r3, #239
 	mov	r0, #200
 	str	r3, [r7, #2056]
@@ -9586,22 +9596,22 @@ MicronReadRetrial:
 	str	ip, [sp, #28]
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	beq	.L1607
+	beq	.L1608
 	cmn	r4, #1
 	ldr	ip, [sp, #28]
 	moveq	r4, r0
 	cmp	r0, r5
-	bcc	.L1617
+	bcc	.L1618
 	mov	r8, ip
 	mov	fp, ip
-.L1607:
+.L1608:
 	ldr	r9, [sp, #8]
-	b	.L1606
-.L1617:
+	b	.L1607
+.L1618:
 	mov	r4, r0
 	mov	r8, ip
 	mov	fp, ip
-.L1609:
+.L1610:
 	ldr	r2, [sp, #16]
 	mov	r0, #200
 	ldr	r3, [sp, #12]
@@ -9617,10 +9627,10 @@ MicronReadRetrial:
 	str	r3, [r7, #2048]
 	str	r3, [r7, #2048]
 	str	r3, [r7, #2048]
-	bcc	.L1611
+	bcc	.L1612
 	cmn	r4, #1
 	movne	r4, #256
-.L1611:
+.L1612:
 	cmn	r4, #1
 	movne	r7, #0
 	moveq	r7, #1
@@ -9628,48 +9638,48 @@ MicronReadRetrial:
 	movne	r1, r7
 	orreq	r1, r7, #1
 	cmp	r1, #0
-	beq	.L1612
+	beq	.L1613
 	str	r4, [sp]
 	mov	r1, r9
-	ldr	r0, .L1629+12
+	ldr	r0, .L1630+12
 	mov	r3, r9
 	ldr	r2, [sp, #20]
 	bl	printk
 	cmp	r10, #0
-	bne	.L1613
-	ldr	r3, .L1629
+	bne	.L1614
+	ldr	r3, .L1630
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
 	moveq	r7, #0
 	andne	r7, r7, #1
 	cmp	r7, #0
-	beq	.L1622
+	beq	.L1623
 	mov	r0, r6
 	mov	r1, #3
 	bl	micron_auto_read_calibration_config
 	mov	r10, #1
-	b	.L1615
-.L1613:
+	b	.L1616
+.L1614:
 	mov	r0, r6
 	mov	r1, #0
 	bl	micron_auto_read_calibration_config
 	cmn	r4, #1
 	movne	r4, #256
-	b	.L1622
-.L1612:
+	b	.L1623
+.L1613:
 	cmp	r10, #0
-	beq	.L1622
+	beq	.L1623
 	mov	r0, r6
 	mov	r4, #256
 	bl	micron_auto_read_calibration_config
-.L1622:
+.L1623:
 	mov	r0, r4
 	add	sp, sp, #36
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1630:
+.L1631:
 	.align	2
-.L1629:
+.L1630:
 	.word	.LANCHOR0
 	.word	1431655766
 	.word	.LANCHOR2
@@ -9687,7 +9697,7 @@ HynixReadRetrial:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r8, r3
-	ldr	r5, .L1649
+	ldr	r5, .L1650
 	mov	r10, r2
 	mov	r7, r0
 	mov	fp, r1
@@ -9702,14 +9712,14 @@ HynixReadRetrial:
 	ldrlsb	r4, [r2, #718]	@ zero_extendqisi2
 	bl	NandcWaitFlashReady
 	mov	ip, #0
-.L1633:
+.L1634:
 	cmp	ip, r9
-	bcs	.L1637
+	bcs	.L1638
 	add	r4, r4, #1
 	mov	r0, r7
 	ldrb	r1, [r5, #699]	@ zero_extendqisi2
 	uxtb	r4, r4
-	ldr	r2, .L1649+4
+	ldr	r2, .L1650+4
 	cmp	r4, r9
 	str	ip, [sp, #4]
 	movcs	r4, #0
@@ -9722,21 +9732,21 @@ HynixReadRetrial:
 	bl	FlashReadRawPage
 	cmn	r0, #1
 	ldr	ip, [sp, #4]
-	beq	.L1635
+	beq	.L1636
 	ldrb	r3, [r5, #1792]	@ zero_extendqisi2
 	cmn	r6, #1
 	moveq	r6, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, asr #2
-	bcc	.L1642
+	bcc	.L1643
 	mov	r8, #0
 	mov	r10, r8
-.L1635:
+.L1636:
 	add	ip, ip, #1
-	b	.L1633
-.L1642:
+	b	.L1634
+.L1643:
 	mov	r6, r0
-.L1637:
+.L1638:
 	ldr	r3, [r5, #692]
 	add	r7, r5, r7
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
@@ -9747,17 +9757,17 @@ HynixReadRetrial:
 	strhib	r4, [r7, #710]
 	add	r3, r3, r3, asl #1
 	cmp	r6, r3, asr #2
-	bcc	.L1641
+	bcc	.L1642
 	cmn	r6, #1
 	movne	r6, #256
-.L1641:
+.L1642:
 	mov	r0, r6
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1650:
+.L1651:
 	.align	2
-.L1649:
+.L1650:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+702
 	.fnend
@@ -9773,23 +9783,23 @@ FlashProgPage:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r8, r3
-	ldr	r3, .L1655
+	ldr	r3, .L1656
 	subs	r4, r0, #0
 	mov	r5, r1
 	mov	r7, r2
 	ldrb	r6, [r3, #481]	@ zero_extendqisi2
-	bne	.L1652
-	ldr	r2, .L1655+4
+	bne	.L1653
+	ldr	r2, .L1656+4
 	ldrb	r3, [r2, #1]	@ zero_extendqisi2
 	ldr	r1, [r2, #4]
 	mul	r1, r1, r3
 	cmp	r5, r1
-	bcs	.L1652
+	bcs	.L1653
 	ldrb	r3, [r2]	@ zero_extendqisi2
 	cmp	r3, #0
 	subeq	r6, r6, #2
 	movne	r6, #4
-.L1652:
+.L1653:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -9818,9 +9828,9 @@ FlashProgPage:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1656:
+.L1657:
 	.align	2
-.L1655:
+.L1656:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -9835,9 +9845,9 @@ FlashSavePhyInfo:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r4, .L1667
-	ldr	r5, .L1667+4
-	ldr	r8, .L1667+8
+	ldr	r4, .L1668
+	ldr	r5, .L1668+4
+	ldr	r8, .L1668+8
 	ldr	r3, [r4, #148]
 	mov	r9, r4
 	ldrb	r0, [r4, #174]	@ zero_extendqisi2
@@ -9849,7 +9859,7 @@ FlashSavePhyInfo:
 	ldr	r0, [r4, #148]
 	bl	ftl_memset
 	ldr	r3, [r4, #160]
-	ldr	r1, .L1667+12
+	ldr	r1, .L1668+12
 	mov	r2, #32
 	str	r8, [r3]
 	ldr	r0, [r4, #160]
@@ -9862,7 +9872,7 @@ FlashSavePhyInfo:
 	str	r3, [r0, #1060]
 	bl	ftl_memcpy
 	ldr	r0, [r4, #160]
-	ldr	r1, .L1667+16
+	ldr	r1, .L1668+16
 	mov	r2, #8
 	add	r0, r0, #80
 	bl	ftl_memcpy
@@ -9872,7 +9882,7 @@ FlashSavePhyInfo:
 	add	r0, r0, #96
 	bl	ftl_memcpy
 	ldr	r0, [r4, #160]
-	ldr	r1, .L1667+20
+	ldr	r1, .L1668+20
 	mov	r2, #32
 	add	r0, r0, #160
 	bl	ftl_memcpy
@@ -9883,7 +9893,7 @@ FlashSavePhyInfo:
 	bl	ftl_memcpy
 	ldr	r0, [r4, #160]
 	mov	r2, #852
-	ldr	r1, .L1667+24
+	ldr	r1, .L1668+24
 	add	r0, r0, #224
 	bl	ftl_memcpy
 	ldr	r6, [r4, #160]
@@ -9899,7 +9909,7 @@ FlashSavePhyInfo:
 	bl	flash_enter_slc_mode
 	mov	r6, #0
 	mov	r7, r6
-.L1660:
+.L1661:
 	ldr	r1, [r5, #4]
 	mov	r0, #0
 	mov	r2, r0
@@ -9926,11 +9936,11 @@ FlashSavePhyInfo:
 	bl	FlashReadRawPage
 	add	r2, r7, #1
 	cmn	r0, #1
-	beq	.L1658
+	beq	.L1659
 	ldr	fp, [r9, #160]
 	ldr	r3, [fp]
 	cmp	r3, r8
-	bne	.L1658
+	bne	.L1659
 	add	r0, fp, #12
 	movw	r1, #2036
 	str	r2, [sp, #4]
@@ -9938,22 +9948,22 @@ FlashSavePhyInfo:
 	ldr	r3, [fp, #8]
 	cmp	r3, r0
 	ldr	r2, [sp, #4]
-	bne	.L1658
+	bne	.L1659
 	ldr	r3, [r10, #4]
 	cmp	r6, #1
 	str	r2, [r9, #168]
 	mul	r7, r3, r7
 	str	r7, [r9, #164]
-	beq	.L1661
+	beq	.L1662
 	mov	r6, #1
-.L1658:
+.L1659:
 	cmp	r2, #4
 	mov	r7, r2
-	bne	.L1660
-	b	.L1659
-.L1661:
+	bne	.L1661
+	b	.L1660
+.L1662:
 	mov	r6, #2
-.L1659:
+.L1660:
 	mov	r0, #0
 	bl	flash_exit_slc_mode
 	clz	r0, r6
@@ -9962,9 +9972,9 @@ FlashSavePhyInfo:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1668:
+.L1669:
 	.align	2
-.L1667:
+.L1668:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	1312902724
@@ -9981,41 +9991,41 @@ FlashReadIdbDataRaw:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1690
+	ldr	r3, .L1691
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
 	ldr	r2, [r3]
 	mov	r9, r0
-	ldr	r4, .L1690+4
+	ldr	r4, .L1691+4
 	str	r3, [sp]
 	str	r2, [sp, #12]
-	ldr	r2, .L1690+8
+	ldr	r2, .L1691+8
 	ldrb	r10, [r4, #1792]	@ zero_extendqisi2
 	ldr	r0, [r2]	@ unaligned
 	ldr	r2, [r4, #1728]
 	cmp	r2, #0
 	str	r0, [sp, #8]	@ unaligned
-	beq	.L1670
+	beq	.L1671
 	mov	r0, #0
 	bl	flash_enter_slc_mode
-.L1670:
+.L1671:
 	mov	r0, r9
 	mov	r1, #0
 	mov	r2, #2048
 	mvn	r8, #0
 	bl	ftl_memset
 	mov	r5, #2
-.L1671:
+.L1672:
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcs	.L1675
-	ldr	fp, .L1690+12
+	bcs	.L1676
+	ldr	fp, .L1691+12
 	mov	r7, #0
-.L1673:
+.L1674:
 	add	r3, sp, #8
-	ldr	r6, .L1690+12
+	ldr	r6, .L1691+12
 	ldrb	ip, [r3, r7]	@ zero_extendqisi2
 	mov	r0, ip
 	str	ip, [sp, #4]
@@ -10028,62 +10038,62 @@ FlashReadIdbDataRaw:
 	bl	FlashReadRawPage
 	cmn	r0, #1
 	ldr	ip, [sp, #4]
-	bne	.L1672
+	bne	.L1673
 	add	r7, r7, #1
 	cmp	r7, #4
-	bne	.L1673
-	b	.L1674
-.L1672:
+	bne	.L1674
+	b	.L1675
+.L1673:
 	ldr	r3, [r6, #148]
-	ldr	r2, .L1690+16
+	ldr	r2, .L1691+16
 	ldr	r3, [r3]
 	cmp	r3, r2
-	bne	.L1674
+	bne	.L1675
 	mov	r1, ip
-	ldr	r0, .L1690+20
+	ldr	r0, .L1691+20
 	bl	printk
 	mov	r2, #2048
 	mov	r0, r9
 	ldr	r1, [r6, #148]
 	bl	ftl_memcpy
 	ldr	r3, [r6, #148]
-	ldr	r2, .L1690+4
+	ldr	r2, .L1691+4
 	ldr	r3, [r3, #512]
 	strb	r3, [r2, #1]
 	ldr	r3, [r6, #168]
 	cmp	r3, r5
-	bls	.L1679
+	bls	.L1680
 	str	r5, [r6, #168]
 	bl	FlashSavePhyInfo
 	mov	r8, #0
-.L1674:
+.L1675:
 	add	r5, r5, #1
-	b	.L1671
-.L1679:
+	b	.L1672
+.L1680:
 	mov	r8, #0
-.L1675:
+.L1676:
 	mov	r0, r10
 	bl	FlashBchSel
 	ldr	r3, [r4, #1728]
 	cmp	r3, #0
-	beq	.L1676
+	beq	.L1677
 	mov	r0, #0
 	bl	flash_exit_slc_mode
-.L1676:
+.L1677:
 	ldr	r3, [sp]
 	mov	r0, r8
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1678
+	beq	.L1679
 	bl	__stack_chk_fail
-.L1678:
+.L1679:
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1691:
+.L1692:
 	.align	2
-.L1690:
+.L1691:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR3+11
@@ -10106,8 +10116,8 @@ FlashInit:
 	sub	sp, sp, #20
 	mov	r0, #32768
 	bl	ftl_malloc
-	ldr	r8, .L1787
-	ldr	r4, .L1787+4
+	ldr	r8, .L1788
+	ldr	r4, .L1788+4
 	mov	r7, #0
 	add	r9, r4, #12
 	str	r0, [r8, #148]
@@ -10137,8 +10147,8 @@ FlashInit:
 	str	r0, [r8, #188]
 	mov	r0, r5
 	bl	NandcInit
-	ldr	r5, .L1787+8
-.L1698:
+	ldr	r5, .L1788+8
+.L1699:
 	add	r3, r9, r7, asl #3
 	uxtb	fp, r7
 	ldr	r6, [r9, r7, asl #3]
@@ -10168,7 +10178,7 @@ FlashInit:
 	strb	r1, [r5, #4]
 	ldr	r1, [r6, #2048]
 	strb	r1, [r5, #5]
-	bne	.L1693
+	bne	.L1694
 	mov	r2, #239
 	mov	r0, #200
 	str	r2, [r6, #2056]
@@ -10180,17 +10190,17 @@ FlashInit:
 	str	r10, [r6, #2048]
 	str	r10, [r6, #2048]
 	str	r10, [r6, #2048]
-.L1693:
+.L1694:
 	mov	r0, fp
 	bl	NandcFlashDeCs
 	ldrb	r2, [r5]	@ zero_extendqisi2
 	sub	r3, r2, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L1694
+	bhi	.L1695
 	ldrb	r1, [r5, #2]	@ zero_extendqisi2
 	ldrb	r3, [r5, #1]	@ zero_extendqisi2
-	ldr	r0, .L1787+12
+	ldr	r0, .L1788+12
 	str	r1, [sp]
 	ldrb	r1, [r5, #3]	@ zero_extendqisi2
 	str	r1, [sp, #4]
@@ -10200,19 +10210,19 @@ FlashInit:
 	str	r1, [sp, #12]
 	add	r1, r7, #1
 	bl	printk
-.L1694:
+.L1695:
 	cmp	r7, #0
-	bne	.L1695
+	bne	.L1696
 	ldrb	r3, [r4, #1556]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L1744
-	ldr	r3, .L1787+4
+	bhi	.L1745
+	ldr	r3, .L1788+4
 	ldrb	r3, [r3, #1557]	@ zero_extendqisi2
 	cmp	r3, #255
-	beq	.L1744
-.L1695:
+	beq	.L1745
+.L1696:
 	ldrb	r3, [r5]	@ zero_extendqisi2
 	add	r7, r7, #1
 	add	r5, r5, #8
@@ -10220,28 +10230,28 @@ FlashInit:
 	moveq	r3, #44
 	streqb	r3, [r5, #-8]
 	cmp	r7, #4
-	bne	.L1698
+	bne	.L1699
 	ldrb	r3, [r4, #1556]	@ zero_extendqisi2
 	cmp	r3, #173
-	beq	.L1699
-	ldr	r3, .L1787+4
+	beq	.L1700
+	ldr	r3, .L1788+4
 	ldr	r0, [r3, #1736]
 	bl	NandcSetDdrMode
-.L1699:
+.L1700:
 	mov	r2, #852
-	ldr	r0, .L1787+16
+	ldr	r0, .L1788+16
 	mov	r1, #0
-	ldr	r5, .L1787+20
+	ldr	r5, .L1788+20
 	bl	ftl_memset
 	ldr	r6, [r4, #1744]
-	ldr	r3, .L1787+24
+	ldr	r3, .L1788+24
 	cmp	r6, r5
 	ldrb	r0, [r4, #1557]	@ zero_extendqisi2
 	str	r3, [r4, #692]
 	mov	r3, #0
 	strb	r3, [r4, #8]
 	sub	ip, r0, #218
-	ldreq	r3, .L1787+4
+	ldreq	r3, .L1788+4
 	clz	ip, ip
 	moveq	r2, #1
 	mov	ip, ip, lsr #5
@@ -10255,132 +10265,132 @@ FlashInit:
 	cmp	r2, #209
 	orreq	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1701
-	cmp	r0, #220
 	bne	.L1702
-	ldr	r3, .L1787+4
+	cmp	r0, #220
+	bne	.L1703
+	ldr	r3, .L1788+4
 	ldrb	r3, [r3, #1559]	@ zero_extendqisi2
 	cmp	r3, #149
-	bne	.L1702
-.L1701:
+	bne	.L1703
+.L1702:
 	ldrb	lr, [r4, #1556]	@ zero_extendqisi2
 	mov	r3, #16
 	strb	r3, [r4, #1]
 	mov	r1, #1
 	strb	r3, [r8, #174]
 	cmp	lr, #152
-	ldr	r3, .L1787+28
+	ldr	r3, .L1788+28
 	strb	r1, [r4]
-	ldr	r2, .L1787
+	ldr	r2, .L1788
 	strb	lr, [r3, #3257]
 	strb	r0, [r3, #3258]
-	bne	.L1704
-	ldr	r7, .L1787+4
+	bne	.L1705
+	ldr	r7, .L1788+4
 	movw	lr, #1560
 	ldrsb	lr, [r7, lr]
 	cmp	lr, #0
 	strltb	r1, [r2, #192]
 	movge	r1, #24
 	strgeb	r1, [r2, #174]
-.L1704:
+.L1705:
 	movw	r2, #2049
 	cmp	r6, r5
 	cmpne	r6, r2
 	moveq	r2, #16
 	streqb	r2, [r8, #174]
 	cmp	ip, #0
-	ldrne	r2, .L1787+32
+	ldrne	r2, .L1788+32
 	movne	r1, #2048
 	strneh	r1, [r2, #14]	@ movhi
 	mvnne	r2, #37
-	bne	.L1781
-.L1708:
+	bne	.L1782
+.L1709:
 	cmp	r0, #220
-	bne	.L1710
-	ldr	r2, .L1787+32
+	bne	.L1711
+	ldr	r2, .L1788+32
 	mov	r1, #4096
 	strh	r1, [r2, #14]	@ movhi
 	mvn	r2, #35
-.L1781:
+.L1782:
 	strb	r2, [r3, #3258]
-	b	.L1709
-.L1710:
+	b	.L1710
+.L1711:
 	cmp	r0, #211
-	ldreq	r2, .L1787+32
+	ldreq	r2, .L1788+32
 	moveq	r1, #4096
 	streqh	r1, [r2, #14]	@ movhi
 	moveq	r2, #2
 	streqb	r2, [r3, #3269]
-.L1709:
-	ldr	r1, .L1787+36
+.L1710:
+	ldr	r1, .L1788+36
 	mov	r2, #32
-	ldr	r0, .L1787+40
+	ldr	r0, .L1788+40
 	bl	ftl_memcpy
-	ldr	r0, .L1787+24
+	ldr	r0, .L1788+24
 	mov	r2, #32
 	add	r1, r0, #2784
 	bl	ftl_memcpy
-.L1702:
+.L1703:
 	ldrb	r3, [r4]	@ zero_extendqisi2
-	ldr	r6, .L1787+4
+	ldr	r6, .L1788+4
 	cmp	r3, #0
-	bne	.L1711
+	bne	.L1712
 	bl	FlashLoadPhyInfoInRam
 	cmp	r0, #0
-	bne	.L1713
+	bne	.L1714
 	ldr	r3, [r6, #692]
 	ldrh	r3, [r3, #16]
 	mov	r3, r3, lsr #8
 	tst	r3, #1
 	and	r0, r3, #7
 	strb	r0, [r6, #1716]
-	bne	.L1713
+	bne	.L1714
 	mov	r3, #1
 	strb	r3, [r6, #1732]
 	bl	FlashSetInterfaceMode
 	ldrb	r0, [r6, #1716]	@ zero_extendqisi2
 	bl	NandcSetMode
-.L1713:
+.L1714:
 	ldr	r3, [r4, #692]
-	ldr	r6, .L1787+4
+	ldr	r6, .L1788+4
 	ldrb	r3, [r3, #26]	@ zero_extendqisi2
 	strb	r3, [r4, #140]
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L1711
+	beq	.L1712
 	ldr	r3, [r6, #1736]
 	cmp	r3, #0
-	beq	.L1716
+	beq	.L1717
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
-	b	.L1782
-.L1716:
+	b	.L1783
+.L1717:
 	ldrb	r0, [r6, #1716]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
 	ldrb	r0, [r6, #1716]	@ zero_extendqisi2
-.L1782:
+.L1783:
 	bl	NandcSetMode
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L1711
+	beq	.L1712
 	mov	r0, #1
-	ldr	r6, .L1787+4
+	ldr	r6, .L1788+4
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
 	ldr	r3, [r4, #692]
-	ldr	r0, .L1787+44
+	ldr	r0, .L1788+44
 	ldrh	r1, [r3, #14]
 	bl	printk
 	bl	FlashLoadPhyInfoInRam
 	cmn	r0, #1
-	beq	.L1757
+	beq	.L1758
 	bl	FlashDieInfoInit
 	ldr	r3, [r6, #692]
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
 	bl	FlashGetReadRetryDefault
-	ldr	r3, .L1787+48
+	ldr	r3, .L1788+48
 	ldr	r2, [r6, #692]
 	ldrh	r3, [r3, #-14]
 	ldrb	r1, [r2, #9]	@ zero_extendqisi2
@@ -10388,27 +10398,27 @@ FlashInit:
 	add	r3, r3, #15
 	cmp	r1, r3, asr #12
 	ldrh	r3, [r2, #14]
-	blt	.L1718
+	blt	.L1719
 	add	r0, r3, #255
 	cmp	r1, r0, asr #8
-	bge	.L1719
-.L1718:
+	bge	.L1720
+.L1719:
 	bic	r3, r3, #255
 	strh	r3, [r2, #14]	@ movhi
-.L1719:
+.L1720:
 	ldrb	r3, [r4, #1716]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L1720
+	beq	.L1721
 	bl	FlashSavePhyInfo
 	mov	r0, #0
 	ldr	r1, [r8, #164]
 	bl	FlashDdrParaScan
-.L1720:
+.L1721:
 	bl	FlashSavePhyInfo
-.L1711:
+.L1712:
 	ldr	r2, [r4, #692]
-	ldr	r7, .L1787+4
-	ldr	r6, .L1787
+	ldr	r7, .L1788+4
+	ldr	r6, .L1788
 	ldrb	r3, [r2, #26]	@ zero_extendqisi2
 	ldrh	r0, [r2, #10]
 	ldrb	r9, [r2, #18]	@ zero_extendqisi2
@@ -10433,7 +10443,7 @@ FlashInit:
 	ldr	r3, [r4, #692]
 	ldrh	r2, [r3, #16]
 	tst	r2, #64
-	beq	.L1722
+	beq	.L1723
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
 	ldrb	r3, [r7, #699]	@ zero_extendqisi2
 	strb	r0, [r7, #696]
@@ -10442,8 +10452,8 @@ FlashInit:
 	strb	r3, [r6, #173]
 	sub	r3, r0, #1
 	cmp	r3, #7
-	bhi	.L1723
-	ldr	r3, .L1787+52
+	bhi	.L1724
+	ldr	r3, .L1788+52
 	sub	r2, r0, #8
 	clz	r2, r2
 	str	r3, [r6, #156]
@@ -10451,54 +10461,54 @@ FlashInit:
 	cmp	r0, #8
 	cmpne	r3, #1
 	mov	r2, r2, lsr #5
-	ldr	r6, .L1787+56
+	ldr	r6, .L1788+56
 	movls	r3, #1
 	strls	r3, [r7, #1784]
 	cmp	r0, #7
-	beq	.L1726
+	beq	.L1727
 	sub	r3, r6, #8
 	cmp	r2, #0
 	moveq	r6, r3
-.L1726:
+.L1727:
 	sub	r2, r6, #1
 	add	r6, r6, #31
 	mov	r3, #0
-.L1727:
+.L1728:
 	ldrsb	r1, [r2, #1]!
 	cmp	r1, #0
 	addeq	r3, r3, #1
 	cmp	r2, r6
-	bne	.L1727
+	bne	.L1728
 	cmp	r3, #27
-	bls	.L1722
+	bls	.L1723
 	bl	FlashGetReadRetryDefault
 	bl	FlashSavePhyInfo
-	b	.L1722
-.L1723:
+	b	.L1723
+.L1724:
 	sub	r3, r0, #17
 	cmp	r3, #2
-	bhi	.L1729
-	ldr	r3, .L1787+60
+	bhi	.L1730
+	ldr	r3, .L1788+60
 	cmp	r0, #19
 	str	r3, [r6, #156]
 	moveq	r3, #15
-	bne	.L1786
-	b	.L1784
-.L1729:
+	bne	.L1787
+	b	.L1785
+.L1730:
 	sub	r3, r0, #65
 	cmp	r0, #33
 	cmpne	r3, #1
-	bhi	.L1731
-	ldr	r3, .L1787+64
+	bhi	.L1732
+	ldr	r3, .L1788+64
 	str	r3, [r6, #156]
 	mov	r3, #4
 	strb	r3, [r7, #697]
-.L1786:
+.L1787:
 	mov	r3, #7
-.L1784:
+.L1785:
 	strb	r3, [r6, #173]
-	b	.L1722
-.L1731:
+	b	.L1723
+.L1732:
 	sub	r3, r0, #67
 	sub	r2, r0, #34
 	cmp	r3, #1
@@ -10506,8 +10516,8 @@ FlashInit:
 	movls	r1, #1
 	cmp	r3, #1
 	cmphi	r2, #1
-	bhi	.L1732
-	ldr	r3, .L1787+64
+	bhi	.L1733
+	ldr	r3, .L1788+64
 	cmp	r0, #68
 	cmpne	r0, #35
 	str	r3, [r6, #156]
@@ -10518,52 +10528,52 @@ FlashInit:
 	movne	r3, #4
 	moveq	r3, #5
 	strb	r3, [r4, #697]
-	b	.L1722
-.L1732:
+	b	.L1723
+.L1733:
 	cmp	r0, #49
-	ldreq	r3, .L1787+68
+	ldreq	r3, .L1788+68
 	streq	r3, [r6, #156]
-.L1722:
+.L1723:
 	ldr	r2, [r4, #1744]
-	ldr	r3, .L1787+4
+	ldr	r3, .L1788+4
 	cmp	r2, r5
-	bne	.L1736
+	bne	.L1737
 	ldrb	r1, [r3, #140]	@ zero_extendqisi2
 	cmp	r1, #0
 	ldrne	r3, [r3, #692]
 	movne	r1, #0
 	strneb	r1, [r3, #18]
-.L1736:
+.L1737:
 	ldrb	r1, [r4, #1556]	@ zero_extendqisi2
-	ldr	r3, .L1787+4
+	ldr	r3, .L1788+4
 	cmp	r1, #44
-	bne	.L1737
+	bne	.L1738
 	ldrb	r1, [r3, #1732]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L1737
+	beq	.L1738
 	cmp	r2, r5
-	bne	.L1738
+	bne	.L1739
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1737
-.L1738:
+	bne	.L1738
+.L1739:
 	mov	r0, #1
 	mov	r3, #0
 	strb	r3, [r4, #1732]
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
-.L1737:
+.L1738:
 	ldrb	r3, [r4, #1716]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L1739
-	ldr	r2, .L1787+4
+	beq	.L1740
+	ldr	r2, .L1788+4
 	ldrb	r2, [r2, #1732]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1740
+	bne	.L1741
 	tst	r3, #1
-	bne	.L1739
-.L1740:
+	bne	.L1740
+.L1741:
 	mov	r0, #0
 	bl	flash_enter_slc_mode
 	mov	r0, #0
@@ -10571,15 +10581,15 @@ FlashInit:
 	bl	FlashDdrParaScan
 	mov	r0, #0
 	bl	flash_exit_slc_mode
-.L1739:
+.L1740:
 	ldr	r3, [r4, #692]
 	mov	r8, #16
-	ldr	r6, .L1787+4
+	ldr	r6, .L1788+4
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
-	ldr	r0, .L1787+72
+	ldr	r0, .L1788+72
 	bl	FlashReadIdbDataRaw
-	ldr	r0, .L1787+76
+	ldr	r0, .L1788+76
 	strb	r8, [r4, #1]
 	bl	FlashTimingCfg
 	ldr	r5, [r4, #692]
@@ -10614,7 +10624,7 @@ FlashInit:
 	ldrb	r1, [r4]	@ zero_extendqisi2
 	strh	r3, [r4, #134]	@ movhi
 	cmp	r1, #1
-	bne	.L1742
+	bne	.L1743
 	mov	r3, r3, asl #1
 	mov	r1, r7, lsr #1
 	mov	r2, r2, asl #1
@@ -10624,21 +10634,21 @@ FlashInit:
 	strh	r1, [r6, #126]	@ movhi
 	strh	r2, [r6, #132]	@ movhi
 	strh	r3, [r6, #138]	@ movhi
-.L1742:
+.L1743:
 	ldrb	r0, [r5, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
 	bl	ftl_flash_suspend
 	mov	r0, #0
-	b	.L1757
-.L1744:
+	b	.L1758
+.L1745:
 	mvn	r0, #1
-.L1757:
+.L1758:
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1788:
+.L1789:
 	.align	2
-.L1787:
+.L1788:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1556
@@ -10671,7 +10681,7 @@ FlashPageProgMsbFFData:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r2
-	ldr	r3, .L1806
+	ldr	r3, .L1807
 	mov	r8, r0
 	mov	r9, r1
 	ldr	r2, [r3, #692]
@@ -10679,27 +10689,27 @@ FlashPageProgMsbFFData:
 	ldrb	r7, [r2, #19]	@ zero_extendqisi2
 	ldrb	r2, [r3, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L1790
+	beq	.L1791
 	ldr	r3, [r3, #1728]
 	cmp	r3, #0
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1790:
+.L1791:
 	sub	r3, r7, #5
 	cmp	r7, #68
 	cmpne	r3, #3
-	bls	.L1791
+	bls	.L1792
 	sub	r3, r7, #19
 	tst	r3, #239
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1791:
-	ldr	r5, .L1806+4
+.L1792:
+	ldr	r5, .L1807+4
 	movw	fp, #65535
 	sub	r10, r5, #3136
-.L1793:
+.L1794:
 	ldr	r3, [r6, #692]
 	ldrh	r3, [r3, #10]
 	cmp	r3, r4
-	bls	.L1805
+	bls	.L1806
 	mov	r3, r4, asl #1
 	ldrh	r3, [r10, r3]
 	cmp	r3, fp
@@ -10710,7 +10720,7 @@ FlashPageProgMsbFFData:
 	moveq	r1, #0
 	movne	r1, #255
 	bl	ftl_memset
-	ldr	r3, .L1806+4
+	ldr	r3, .L1807+4
 	add	r1, r4, r9
 	add	r4, r4, #1
 	mov	r0, r8
@@ -10718,12 +10728,12 @@ FlashPageProgMsbFFData:
 	uxth	r4, r4
 	mov	r3, r2
 	bl	FlashProgPage
-	b	.L1793
-.L1805:
+	b	.L1794
+.L1806:
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1807:
+.L1808:
 	.align	2
-.L1806:
+.L1807:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -10735,12 +10745,12 @@ FlashReadSlc2KPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1860
+	ldr	r3, .L1861
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #44
 	sub	sp, sp, #44
-	ldr	r9, .L1860+4
+	ldr	r9, .L1861+4
 	mov	r4, r0
 	str	r2, [sp, #16]
 	mov	r8, #0
@@ -10749,13 +10759,13 @@ FlashReadSlc2KPages:
 	str	r1, [sp, #12]
 	str	r3, [sp, #20]
 	str	r2, [sp, #36]
-	ldr	r2, .L1860+8
+	ldr	r2, .L1861+8
 	ldrb	r2, [r2, #481]	@ zero_extendqisi2
 	str	r2, [sp, #8]
-.L1809:
+.L1810:
 	ldr	r3, [sp, #12]
 	cmp	r8, r3
-	beq	.L1859
+	beq	.L1860
 	ldr	r3, [sp, #12]
 	add	r2, sp, #32
 	mov	r0, r4
@@ -10770,7 +10780,7 @@ FlashReadSlc2KPages:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r4]
-	bcs	.L1811
+	bcs	.L1812
 	add	r3, r9, r3
 	mov	r7, #0
 	ldrb	r5, [r3, #1720]	@ zero_extendqisi2
@@ -10778,7 +10788,7 @@ FlashReadSlc2KPages:
 	bl	NandcWaitFlashReady
 	mov	r0, r5
 	bl	NandcFlashCs
-.L1812:
+.L1813:
 	ldr	r1, [sp, #32]
 	mov	r0, r5
 	bl	FlashReadCmd
@@ -10791,27 +10801,27 @@ FlashReadSlc2KPages:
 	ldr	r2, [sp, #8]
 	ldr	r3, [r4, #8]
 	bl	NandcXferData
-	ldr	r3, .L1860+12
+	ldr	r3, .L1861+12
 	ldrb	r3, [r3, #192]	@ zero_extendqisi2
 	cmp	r3, #0
 	mov	r6, r0
-	beq	.L1813
+	beq	.L1814
 	mov	r0, r5
 	bl	flash_read_ecc
 	cmp	r0, #5
 	movhi	r6, #256
-.L1813:
+.L1814:
 	cmp	r7, #9
 	cmnls	r6, #1
 	moveq	r3, #1
 	movne	r3, #0
 	addeq	r7, r7, #1
-	beq	.L1812
-.L1814:
+	beq	.L1813
+.L1815:
 	cmp	r7, #0
 	mov	r7, r3
 	movne	r6, #256
-.L1816:
+.L1817:
 	ldr	r3, [sp, #32]
 	mov	r0, r5
 	ldr	r1, [r10, #4]
@@ -10830,21 +10840,21 @@ FlashReadSlc2KPages:
 	str	r2, [sp]
 	ldr	r2, [sp, #8]
 	bl	NandcXferData
-	ldr	r3, .L1860+12
+	ldr	r3, .L1861+12
 	ldrb	r2, [r3, #192]	@ zero_extendqisi2
 	cmp	r2, #0
 	mov	fp, r0
-	beq	.L1819
+	beq	.L1820
 	mov	r0, r5
 	bl	flash_read_ecc
 	cmp	r0, #5
 	movhi	fp, #256
-.L1819:
+.L1820:
 	cmp	r7, #9
 	cmnls	fp, #1
 	addeq	r7, r7, #1
-	beq	.L1816
-.L1820:
+	beq	.L1817
+.L1821:
 	cmp	r7, #0
 	mov	r0, r5
 	movne	fp, #256
@@ -10855,68 +10865,68 @@ FlashReadSlc2KPages:
 	movcc	r3, r6
 	add	r2, r2, r2, asl #1
 	cmp	r3, r2, asr #2
-	bls	.L1822
+	bls	.L1823
 	cmn	r3, #1
 	movne	r3, #256
-.L1822:
+.L1823:
 	cmp	r3, #256
 	cmnne	r3, #1
 	movne	r3, #0
 	str	r3, [r4]
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1825
+	beq	.L1826
 	ldr	r2, [r3, #12]
 	cmn	r2, #1
-	bne	.L1825
+	bne	.L1826
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L1825
+	bne	.L1826
 	ldr	r3, [r3]
 	cmn	r3, #1
 	strne	r2, [r4]
-.L1825:
+.L1826:
 	ldr	r3, [r4]
 	cmn	r3, #1
-	bne	.L1811
+	bne	.L1812
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1860+16
+	ldr	r0, .L1861+16
 	ldrb	r2, [r10, #1792]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r4, #8]
 	cmp	r1, #0
-	beq	.L1827
-	ldr	r0, .L1860+20
+	beq	.L1828
+	ldr	r0, .L1861+20
 	mov	r2, #4
 	mov	r3, #8
 	bl	rknand_print_hex
-.L1827:
+.L1828:
 	ldr	r1, [r4, #12]
 	cmp	r1, #0
-	beq	.L1811
+	beq	.L1812
 	mov	r2, #4
-	ldr	r0, .L1860+24
+	ldr	r0, .L1861+24
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1811:
+.L1812:
 	add	r8, r8, #1
 	add	r4, r4, #36
-	b	.L1809
-.L1859:
+	b	.L1810
+.L1860:
 	ldr	r3, [sp, #20]
 	mov	r0, #0
 	ldr	r2, [sp, #36]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1830
+	beq	.L1831
 	bl	__stack_chk_fail
-.L1830:
+.L1831:
 	add	sp, sp, #44
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1861:
+.L1862:
 	.align	2
-.L1860:
+.L1861:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -10933,16 +10943,16 @@ FlashReadPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1938
+	ldr	r3, .L1939
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #60
 	sub	sp, sp, #60
 	ldr	r3, [r3]
-	ldr	r6, .L1938+4
+	ldr	r6, .L1939+4
 	str	r1, [sp, #20]
 	str	r3, [sp, #52]
-	ldr	r3, .L1938+8
+	ldr	r3, .L1939+8
 	ldrb	r8, [r6]	@ zero_extendqisi2
 	str	r2, [sp, #24]
 	ldrb	r3, [r3, #481]	@ zero_extendqisi2
@@ -10950,17 +10960,17 @@ FlashReadPages:
 	str	r3, [sp, #16]
 	ldrb	r3, [r6, #8]	@ zero_extendqisi2
 	str	r3, [sp, #28]
-	beq	.L1900
+	beq	.L1901
 	bl	FlashReadSlc2KPages
-	b	.L1864
-.L1900:
-	ldr	r10, .L1938+12
+	b	.L1865
+.L1901:
+	ldr	r10, .L1939+12
 	mov	r9, r0
 	mov	fp, r8
-.L1863:
+.L1864:
 	ldr	r3, [sp, #20]
 	cmp	fp, r3
-	bcs	.L1936
+	bcs	.L1937
 	mov	r3, #36
 	add	r2, sp, #48
 	mul	r3, r3, fp
@@ -10983,7 +10993,7 @@ FlashReadPages:
 	ldrcs	r2, [sp, #8]
 	mvncs	r3, #0
 	strcs	r3, [r9, r2]
-	bcs	.L1866
+	bcs	.L1867
 	add	r3, r6, r3
 	ldrb	r4, [r3, #1720]	@ zero_extendqisi2
 	ldrb	r3, [r10, #193]	@ zero_extendqisi2
@@ -10991,27 +11001,27 @@ FlashReadPages:
 	mov	r0, r4
 	moveq	r5, #0
 	bl	NandcWaitFlashReady
-	ldr	r3, .L1938+4
+	ldr	r3, .L1939+4
 	ldr	r3, [r3, #692]
 	ldrb	r2, [r3, #19]	@ zero_extendqisi2
 	sub	r3, r2, #1
 	cmp	r3, #7
-	bhi	.L1868
+	bhi	.L1869
 	sub	r2, r2, #7
 	add	r1, r6, r4
 	cmp	r2, #1
-	ldr	r2, .L1938+4
+	ldr	r2, .L1939+4
 	ldrb	r3, [r1, #710]	@ zero_extendqisi2
 	add	r2, r2, r4
 	ldrlsb	r3, [r1, #718]	@ zero_extendqisi2
 	ldrb	r2, [r2, #1552]	@ zero_extendqisi2
 	cmp	r2, r3
-	beq	.L1868
+	beq	.L1869
 	mov	r0, r4
 	ldrb	r1, [r6, #699]	@ zero_extendqisi2
-	ldr	r2, .L1938+16
+	ldr	r2, .L1939+16
 	bl	HynixSetRRPara
-.L1868:
+.L1869:
 	mov	r0, r4
 	bl	NandcFlashCs
 	mov	r0, r4
@@ -11022,42 +11032,42 @@ FlashReadPages:
 	orreq	r3, r3, #1
 	str	r3, [sp, #12]
 	cmp	r3, #0
-	beq	.L1870
-	ldr	r3, .L1938+4
+	beq	.L1871
+	ldr	r3, .L1939+4
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1870
+	beq	.L1871
 	bl	flash_enter_slc_mode
-	b	.L1871
-.L1870:
-	bl	flash_exit_slc_mode
+	b	.L1872
 .L1871:
+	bl	flash_exit_slc_mode
+.L1872:
 	ldr	r1, [sp, #48]
 	cmn	r1, #1
 	cmpeq	r4, #255
 	moveq	r3, #0
 	movne	r3, #1
 	moveq	r5, r3
-	beq	.L1873
-	cmp	r5, #0
 	beq	.L1874
+	cmp	r5, #0
+	beq	.L1875
 	ldr	r2, [r6, #4]
 	mov	r0, r4
 	add	r2, r1, r2
 	bl	FlashReadDpCmd
-	b	.L1875
-.L1874:
+	b	.L1876
+.L1875:
 	mov	r0, r4
 	bl	FlashReadCmd
-.L1875:
+.L1876:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	cmp	r5, #0
-	beq	.L1873
+	beq	.L1874
 	mov	r0, r4
 	ldr	r1, [sp, #48]
 	bl	FlashReadDpDataOutCmd
-.L1873:
+.L1874:
 	ldr	r3, [r7, #12]
 	mov	r0, r4
 	ldr	r2, [sp, #16]
@@ -11075,11 +11085,11 @@ FlashReadPages:
 	movne	r3, #0
 	strneb	r3, [r6, #8]
 	movne	r5, r3
-	bne	.L1871
-.L1876:
+	bne	.L1872
+.L1877:
 	cmp	r5, #0
-	beq	.L1877
-	ldr	r3, .L1938+4
+	beq	.L1878
+	ldr	r3, .L1939+4
 	str	r0, [sp, #32]
 	mov	r0, r4
 	str	r2, [sp, #36]
@@ -11102,7 +11112,7 @@ FlashReadPages:
 	ldr	ip, [sp, #32]
 	mov	r8, r0
 	moveq	r5, #0
-.L1877:
+.L1878:
 	mov	r0, r4
 	str	ip, [sp, #32]
 	bl	NandcFlashDeCs
@@ -11110,16 +11120,16 @@ FlashReadPages:
 	ldrb	r3, [sp, #28]	@ zero_extendqisi2
 	cmn	ip, #1
 	strb	r3, [r6, #8]
-	bne	.L1884
+	bne	.L1885
 	ldrb	r3, [r6, #1732]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1879
-.L1883:
+	bne	.L1880
+.L1884:
 	ldr	r5, [r10, #156]
 	cmp	r5, #0
-	bne	.L1880
-	b	.L1937
-.L1879:
+	bne	.L1881
+	b	.L1938
+.L1880:
 	ldr	r3, [r6, #76]
 	mov	r0, r4
 	ldr	r1, [sp, #48]
@@ -11131,19 +11141,19 @@ FlashReadPages:
 	bl	FlashDdrTunningRead
 	cmn	r0, #1
 	mov	ip, r0
-	beq	.L1882
+	beq	.L1883
 	ldrb	r3, [r6, #1792]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1903
-.L1882:
+	bls	.L1904
+.L1883:
 	ubfx	r0, r5, #8, #8
 	str	ip, [sp, #32]
 	bl	NandcSetDdrPara
 	ldr	ip, [sp, #32]
 	cmn	ip, #1
-	beq	.L1883
-	b	.L1903
-.L1880:
+	beq	.L1884
+	b	.L1904
+.L1881:
 	mov	r0, r4
 	ldr	r1, [sp, #48]
 	ldr	r2, [r7, #8]
@@ -11151,18 +11161,18 @@ FlashReadPages:
 	blx	r5
 	cmn	r0, #1
 	mov	ip, r0
-	bne	.L1905
+	bne	.L1906
 	ldr	r3, [r6, #692]
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	cmp	r3, #7
-	bhi	.L1886
+	bhi	.L1887
 	mov	r0, r4
 	ldrb	r1, [r6, #699]	@ zero_extendqisi2
-	ldr	r2, .L1938+16
+	ldr	r2, .L1939+16
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L1886:
+.L1887:
 	ldr	r1, [sp, #48]
 	mov	r0, r4
 	ldr	r2, [r7, #8]
@@ -11171,25 +11181,25 @@ FlashReadPages:
 	ldr	r1, [r7, #4]
 	ldrb	r2, [r6, #1792]	@ zero_extendqisi2
 	mov	ip, r0
-	ldr	r0, .L1938+20
+	ldr	r0, .L1939+20
 	mov	r3, ip
 	str	ip, [sp, #32]
 	bl	printk
 	ldr	ip, [sp, #32]
 	cmn	ip, #1
-	bne	.L1905
+	bne	.L1906
 	ldrb	r5, [r6, #140]	@ zero_extendqisi2
 	cmp	r5, #0
-	beq	.L1885
+	beq	.L1886
 	ldr	r3, [sp, #12]
 	mov	r0, r4
 	cmp	r3, #0
-	beq	.L1887
+	beq	.L1888
 	bl	flash_enter_slc_mode
-	b	.L1888
-.L1887:
-	bl	flash_exit_slc_mode
+	b	.L1889
 .L1888:
+	bl	flash_exit_slc_mode
+.L1889:
 	ldr	ip, [r10, #156]
 	mov	r0, r4
 	ldr	r1, [sp, #48]
@@ -11197,29 +11207,29 @@ FlashReadPages:
 	ldr	r3, [r7, #12]
 	blx	ip
 	mov	ip, r0
-	b	.L1905
-.L1937:
+	b	.L1906
+.L1938:
 	mov	r0, r4
 	ldr	r1, [sp, #48]
 	ldr	r2, [r7, #8]
 	ldr	r3, [r7, #12]
 	bl	FlashReadRawPage
 	mov	ip, r0
-	b	.L1885
-.L1903:
+	b	.L1886
+.L1904:
 	mov	r5, #0
-.L1884:
+.L1885:
 	ldrb	r3, [r6, #1792]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	ip, r3, asr #2
-	bls	.L1885
+	bls	.L1886
 	ldr	r3, [r10, #156]
 	cmp	r3, #0
 	moveq	ip, #256
-	b	.L1885
-.L1905:
+	b	.L1886
+.L1906:
 	mov	r5, #0
-.L1885:
+.L1886:
 	cmp	ip, #256
 	cmnne	ip, #1
 	ldreq	r3, [sp, #8]
@@ -11230,29 +11240,29 @@ FlashReadPages:
 	ldr	r3, [sp, #8]
 	ldr	r3, [r9, r3]
 	cmn	r3, #1
-	bne	.L1892
+	bne	.L1893
 	ldr	r1, [r7, #4]
-	ldr	r0, .L1938+24
+	ldr	r0, .L1939+24
 	ldrb	r2, [r6, #1792]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r7, #12]
 	cmp	r1, #0
-	beq	.L1892
+	beq	.L1893
 	mov	r2, #4
-	ldr	r0, .L1938+28
+	ldr	r0, .L1939+28
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1892:
+.L1893:
 	cmp	r5, #0
-	beq	.L1894
+	beq	.L1895
 	ldrb	r3, [r6, #1792]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r8, r3, asr #2
-	bls	.L1895
+	bls	.L1896
 	ldr	r3, [r10, #156]
 	cmp	r3, #0
 	moveq	r8, #256
-.L1895:
+.L1896:
 	ldr	r3, [sp, #8]
 	cmp	r8, #256
 	cmnne	r8, #1
@@ -11260,35 +11270,35 @@ FlashReadPages:
 	movne	r2, #0
 	streq	r8, [r9, r3]
 	strne	r2, [r9, r3]
-.L1894:
+.L1895:
 	ldr	r3, [sp, #12]
 	add	fp, fp, r5
 	cmp	r3, #0
-	beq	.L1866
+	beq	.L1867
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1866
+	beq	.L1867
 	mov	r0, r4
 	bl	flash_exit_slc_mode
-.L1866:
+.L1867:
 	add	fp, fp, #1
-	b	.L1863
-.L1936:
+	b	.L1864
+.L1937:
 	mov	r0, #0
-.L1864:
-	ldr	r3, .L1938
+.L1865:
+	ldr	r3, .L1939
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1899
+	beq	.L1900
 	bl	__stack_chk_fail
-.L1899:
+.L1900:
 	add	sp, sp, #60
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1939:
+.L1940:
 	.align	2
-.L1938:
+.L1939:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -11310,11 +11320,11 @@ FlashLoadFactorBbt:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #60
 	sub	sp, sp, #60
-	ldr	r7, .L1954
+	ldr	r7, .L1955
 	mov	r1, #0
-	ldr	r8, .L1954+4
+	ldr	r8, .L1955+4
 	mov	r2, #16
-	ldr	r4, .L1954+8
+	ldr	r4, .L1955+8
 	mov	r5, #0
 	ldr	r3, [r7]
 	mov	r10, r5
@@ -11331,18 +11341,18 @@ FlashLoadFactorBbt:
 	str	r5, [sp, #24]
 	str	r3, [sp, #28]
 	str	r7, [sp, #4]
-.L1941:
+.L1942:
 	ldrb	r3, [r8, #1717]	@ zero_extendqisi2
 	uxtb	r7, r5
 	cmp	r3, r7
-	bls	.L1953
+	bls	.L1954
 	mul	ip, r6, r7
 	sub	r4, r6, #1
 	sub	r3, r6, #12
 	uxth	r4, r4
-.L1942:
+.L1943:
 	cmp	r4, r3
-	ble	.L1944
+	ble	.L1945
 	add	r2, ip, r4
 	mov	r1, #1
 	add	r0, sp, #16
@@ -11356,47 +11366,47 @@ FlashLoadFactorBbt:
 	ldr	ip, [sp, #8]
 	cmn	r2, #1
 	ldr	r3, [sp, #12]
-	beq	.L1943
+	beq	.L1944
 	ldr	r2, [r9, #180]
 	ldrh	r1, [r2]
 	movw	r2, #61664
 	cmp	r1, r2
-	bne	.L1943
+	bne	.L1944
 	mov	r1, r7
-	ldr	r0, .L1954+12
+	ldr	r0, .L1955+12
 	mov	r2, r4
 	add	r10, r10, #1
 	bl	printk
-	ldr	r3, .L1954+8
+	ldr	r3, .L1955+8
 	uxth	r10, r10
 	add	r7, r3, r7, asl #1
 	strh	r4, [r7, #196]	@ movhi
-	b	.L1944
-.L1943:
+	b	.L1945
+.L1944:
 	sub	r4, r4, #1
 	uxth	r4, r4
-	b	.L1942
-.L1944:
+	b	.L1943
+.L1945:
 	ldrb	r3, [r8, #1717]	@ zero_extendqisi2
 	add	r5, r5, #1
 	cmp	r3, r10
 	moveq	fp, #0
-	b	.L1941
-.L1953:
+	b	.L1942
+.L1954:
 	ldr	r3, [sp, #4]
 	mov	r0, fp
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1948
+	beq	.L1949
 	bl	__stack_chk_fail
-.L1948:
+.L1949:
 	add	sp, sp, #60
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1955:
+.L1956:
 	.align	2
-.L1954:
+.L1955:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -11415,21 +11425,21 @@ FlashProgSlc2KPages:
 	.pad #68
 	sub	sp, sp, #68
 	mov	r9, r2
-	ldr	r8, .L1988
+	ldr	r8, .L1989
 	str	r3, [sp, #8]
 	mov	r6, r1
-	ldr	r3, .L1988+4
+	ldr	r3, .L1989+4
 	mov	r4, r0
 	mov	fp, r0
 	mov	r7, #0
 	ldr	r2, [r3]
 	str	r3, [sp, #12]
 	str	r2, [sp, #60]
-	ldr	r2, .L1988+8
+	ldr	r2, .L1989+8
 	ldrb	r10, [r2, #481]	@ zero_extendqisi2
-.L1957:
+.L1958:
 	cmp	r7, r6
-	beq	.L1987
+	beq	.L1988
 	rsb	r3, r7, r6
 	add	r2, sp, #16
 	mov	r0, fp
@@ -11443,7 +11453,7 @@ FlashProgSlc2KPages:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [fp]
-	bcs	.L1959
+	bcs	.L1960
 	add	r3, r8, r3
 	ldrb	r5, [r3, #1720]	@ zero_extendqisi2
 	mov	r0, r5
@@ -11501,37 +11511,37 @@ FlashProgSlc2KPages:
 	mvnne	r3, #0
 	strne	r3, [fp]
 	bl	NandcFlashDeCs
-.L1959:
+.L1960:
 	add	r7, r7, #1
 	add	fp, fp, #36
-	b	.L1957
-.L1987:
+	b	.L1958
+.L1988:
 	ldr	r3, [sp, #8]
 	cmp	r3, #0
-	bne	.L1975
-.L1971:
+	bne	.L1976
+.L1972:
 	ldr	r3, [sp, #12]
 	mov	r0, #0
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1972
+	beq	.L1973
 	bl	__stack_chk_fail
-.L1975:
-	ldr	r5, .L1988+12
+.L1976:
+	ldr	r5, .L1989+12
 	mov	r7, #0
 	mov	r8, r5
-.L1964:
+.L1965:
 	cmp	r7, r6
-	beq	.L1971
+	beq	.L1972
 	ldr	r3, [r4]
 	cmn	r3, #1
-	bne	.L1965
+	bne	.L1966
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1988+16
+	ldr	r0, .L1989+16
 	bl	printk
-	b	.L1966
-.L1965:
+	b	.L1967
+.L1966:
 	rsb	r3, r7, r6
 	mov	r1, r9
 	add	r2, sp, #16
@@ -11563,50 +11573,50 @@ FlashProgSlc2KPages:
 	bl	FlashReadPages
 	ldr	r10, [sp, #24]
 	cmn	r10, #1
-	bne	.L1967
-	ldr	r0, .L1988+20
+	bne	.L1968
+	ldr	r0, .L1989+20
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r10, [r4]
-.L1967:
+.L1968:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1968
+	beq	.L1969
 	ldr	r2, [r3]
 	ldr	r3, [r8, #188]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1968
-	ldr	r0, .L1988+24
+	beq	.L1969
+	ldr	r0, .L1989+24
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L1968:
+.L1969:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L1966
+	beq	.L1967
 	ldr	r2, [r3]
 	ldr	r3, [r8, #184]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1966
-	ldr	r0, .L1988+28
+	beq	.L1967
+	ldr	r0, .L1989+28
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L1966:
+.L1967:
 	add	r7, r7, #1
 	add	r4, r4, #36
-	b	.L1964
-.L1972:
+	b	.L1965
+.L1973:
 	add	sp, sp, #68
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1989:
+.L1990:
 	.align	2
-.L1988:
+.L1989:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
@@ -11628,8 +11638,8 @@ FtlLoadFactoryBbt:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r7, #0
-	ldr	r5, .L2002
-	ldr	r6, .L2002+4
+	ldr	r5, .L2003
+	ldr	r6, .L2003+4
 	ldr	r3, [r5, #-2064]
 	sub	r9, r6, #76
 	ldr	r8, [r5, #-2040]
@@ -11637,24 +11647,24 @@ FtlLoadFactoryBbt:
 	mov	fp, r9
 	str	r3, [r5, #220]
 	str	r8, [r5, #224]
-.L1991:
+.L1992:
 	ldrh	r3, [r10]
 	cmp	r7, r3
-	bcs	.L2001
+	bcs	.L2002
 	ldrh	r4, [r9]
 	mvn	r3, #0
 	movw	ip, #61664
 	strh	r3, [r6, #2]!	@ movhi
 	add	r4, r4, r3
 	uxth	r4, r4
-.L1992:
+.L1993:
 	ldrh	r3, [fp]
 	sub	r2, r3, #16
 	cmp	r4, r2
-	ble	.L1994
+	ble	.L1995
 	mla	r3, r3, r7, r4
 	mov	r1, #1
-	ldr	r0, .L2002+8
+	ldr	r0, .L2003+8
 	mov	r2, r1
 	str	ip, [sp, #4]
 	mov	r3, r3, asl #10
@@ -11663,26 +11673,26 @@ FtlLoadFactoryBbt:
 	ldr	r3, [r5, #212]
 	cmn	r3, #1
 	ldr	ip, [sp, #4]
-	beq	.L1993
+	beq	.L1994
 	ldrh	r3, [r8]
 	cmp	r3, ip
 	streqh	r4, [r6]	@ movhi
-	beq	.L1994
-.L1993:
+	beq	.L1995
+.L1994:
 	sub	r4, r4, #1
 	uxth	r4, r4
-	b	.L1992
-.L1994:
+	b	.L1993
+.L1995:
 	add	r7, r7, #1
-	b	.L1991
-.L2001:
+	b	.L1992
+.L2002:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2003:
+.L2004:
 	.align	2
-.L2002:
+.L2003:
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1946
 	.word	.LANCHOR2+212
@@ -11698,10 +11708,10 @@ FtlGetLastWrittenPage:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	cmp	r1, #1
-	ldr	r6, .L2017
+	ldr	r6, .L2018
 	.pad #108
 	sub	sp, sp, #108
-	ldreq	r2, .L2017+4
+	ldreq	r2, .L2018+4
 	mov	r9, r1
 	mov	r7, r0, asl #10
 	mov	r1, #1
@@ -11711,7 +11721,7 @@ FtlGetLastWrittenPage:
 	str	r8, [sp, #8]
 	str	r3, [sp, #100]
 	movweq	r3, #1874
-	ldrne	r3, .L2017+8
+	ldrne	r3, .L2018+8
 	ldreqh	r4, [r2, r3]
 	mov	r2, r9
 	ldrneh	r4, [r3]
@@ -11725,12 +11735,12 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #36]
 	cmn	r3, #1
-	bne	.L2007
-.L2008:
+	bne	.L2008
+.L2009:
 	sxth	r4, r8
 	sxth	r3, r5
 	cmp	r4, r3
-	bgt	.L2007
+	bgt	.L2008
 	add	r4, r4, r3
 	mov	r0, sp
 	mov	r1, #1
@@ -11743,33 +11753,33 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #36]
 	cmn	r3, #1
-	bne	.L2009
+	bne	.L2010
 	ldr	r3, [sp, #40]
 	cmn	r3, #1
-	bne	.L2009
+	bne	.L2010
 	ldr	r3, [sp]
 	cmn	r3, #1
 	subne	r5, r4, #1
 	uxthne	r5, r5
-	bne	.L2008
-.L2009:
+	bne	.L2009
+.L2010:
 	add	r3, r4, #1
 	uxth	r8, r3
-	b	.L2008
-.L2007:
+	b	.L2009
+.L2008:
 	ldr	r2, [sp, #100]
 	sxth	r0, r5
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L2012
+	beq	.L2013
 	bl	__stack_chk_fail
-.L2012:
+.L2013:
 	add	sp, sp, #108
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
-.L2018:
+.L2019:
 	.align	2
-.L2017:
+.L2018:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1872
@@ -11784,9 +11794,9 @@ FtlLoadBbt:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
-	ldr	r4, .L2052
-	ldr	r7, .L2052+4
-	ldr	r8, .L2052+8
+	ldr	r4, .L2053
+	ldr	r7, .L2053+4
+	ldr	r8, .L2053+8
 	ldr	r3, [r4, #-2064]
 	mov	r9, r4
 	ldr	r6, [r4, #-2040]
@@ -11797,69 +11807,69 @@ FtlLoadBbt:
 	ldrh	r5, [r7, r3]
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L2020:
+.L2021:
 	ldrh	r3, [r8]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	ble	.L2023
+	ble	.L2024
 	mov	r1, #1
-	ldr	r0, .L2052+12
+	ldr	r0, .L2053+12
 	mov	r2, r1
 	mov	r3, r5, asl #10
 	str	r3, [r4, #216]
 	bl	FlashReadPages
 	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	bne	.L2021
+	bne	.L2022
 	ldr	r3, [r9, #216]
 	mov	r1, #1
-	ldr	r0, .L2052+12
+	ldr	r0, .L2053+12
 	mov	r2, r1
 	add	r3, r3, #1
 	str	r3, [r9, #216]
 	bl	FlashReadPages
-.L2021:
+.L2022:
 	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	beq	.L2022
+	beq	.L2023
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L2022
+	bne	.L2023
 	ldr	r2, [r6, #4]
-	ldr	r3, .L2052+16
+	ldr	r3, .L2053+16
 	str	r2, [r7, #1944]
 	ldrh	r2, [r6, #8]
 	strh	r5, [r3]	@ movhi
 	strh	r2, [r3, #4]	@ movhi
-	b	.L2023
-.L2022:
+	b	.L2024
+.L2023:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L2020
-.L2023:
-	ldr	r7, .L2052+4
+	b	.L2021
+.L2024:
+	ldr	r7, .L2053+4
 	movw	r2, #65535
 	add	r5, r7, #1936
 	ldrh	r3, [r5]
 	cmp	r3, r2
-	beq	.L2037
+	beq	.L2038
 	ldrh	r3, [r5, #4]
 	cmp	r3, r2
-	beq	.L2027
+	beq	.L2028
 	mov	r1, #1
-	ldr	r0, .L2052+12
+	ldr	r0, .L2053+12
 	mov	r2, r1
 	mov	r3, r3, asl #10
 	str	r3, [r4, #216]
 	bl	FlashReadPages
 	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	beq	.L2027
+	beq	.L2028
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L2027
+	bne	.L2028
 	ldr	r3, [r6, #4]
 	ldr	r2, [r7, #1944]
 	cmp	r3, r2
@@ -11868,7 +11878,7 @@ FtlLoadBbt:
 	ldrhih	r3, [r6, #8]
 	strhih	r2, [r5]	@ movhi
 	strhih	r3, [r5, #4]	@ movhi
-.L2027:
+.L2028:
 	ldrh	r0, [r5]
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
@@ -11876,13 +11886,13 @@ FtlLoadBbt:
 	uxth	r7, r0
 	add	r0, r0, #1
 	strh	r0, [r5, #2]	@ movhi
-.L2029:
+.L2030:
 	sxth	r3, r7
 	cmp	r3, #0
-	blt	.L2034
+	blt	.L2035
 	ldrh	r2, [r5]
 	mov	r1, #1
-	ldr	r0, .L2052+12
+	ldr	r0, .L2053+12
 	orr	r3, r3, r2, asl #10
 	str	r3, [r4, #216]
 	ldr	r3, [r4, #-2064]
@@ -11891,43 +11901,43 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	beq	.L2030
+	beq	.L2031
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L2030
-.L2034:
+	bne	.L2031
+.L2035:
 	ldrh	r2, [r6, #10]
 	ldrh	r0, [r6, #12]
-	ldr	r3, .L2052+4
+	ldr	r3, .L2053+4
 	strh	r2, [r5, #6]	@ movhi
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L2031
-	b	.L2032
-.L2030:
+	bne	.L2032
+	b	.L2033
+.L2031:
 	sub	r7, r7, #1
 	uxth	r7, r7
-	b	.L2029
-.L2031:
+	b	.L2030
+.L2032:
 	ldr	r2, [r3, #1800]
 	cmp	r0, r2
-	beq	.L2032
+	beq	.L2033
 	movw	r1, #1814
 	ldrh	r3, [r3, r1]
 	mov	r3, r3, lsr #2
 	cmp	r0, r3
 	cmpcc	r2, r3
-	bcs	.L2032
+	bcs	.L2033
 	bl	FtlSysBlkNumInit
-.L2032:
-	ldr	r6, .L2052+20
+.L2033:
+	ldr	r6, .L2053+20
 	mov	r5, #0
-	ldr	r8, .L2052+24
+	ldr	r8, .L2053+24
 	sub	r7, r6, #134
-.L2035:
+.L2036:
 	ldrh	r3, [r7]
 	cmp	r5, r3
-	bcs	.L2051
+	bcs	.L2052
 	ldrh	r2, [r8]
 	ldr	r1, [r4, #220]
 	ldr	r0, [r6, #4]!
@@ -11935,16 +11945,16 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	bl	ftl_memcpy
 	add	r5, r5, #1
-	b	.L2035
-.L2051:
+	b	.L2036
+.L2052:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L2037:
+.L2038:
 	mvn	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L2053:
+.L2054:
 	.align	2
-.L2052:
+.L2053:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1870
@@ -11964,9 +11974,9 @@ FtlScanSysBlk:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, #0
-	ldr	r7, .L2139
+	ldr	r7, .L2140
 	mov	r1, r5
-	ldr	r4, .L2139+4
+	ldr	r4, .L2140+4
 	.pad #36
 	sub	sp, sp, #36
 	movw	r6, #1892
@@ -11994,7 +12004,7 @@ FtlScanSysBlk:
 	mov	r1, r5
 	mov	r2, r2, asl #1
 	bl	ftl_memset
-	ldr	r0, .L2139+8
+	ldr	r0, .L2140+8
 	mov	r1, #255
 	mov	r2, #16
 	bl	ftl_memset
@@ -12003,16 +12013,16 @@ FtlScanSysBlk:
 	str	r7, [sp, #20]
 	mov	r7, r4
 	str	r3, [sp, #8]
-.L2055:
-	ldr	r3, .L2139+12
+.L2056:
+	ldr	r3, .L2140+12
 	ldr	r2, [sp, #8]
-	ldr	r0, .L2139
+	ldr	r0, .L2140
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bls	.L2096
-	ldr	r1, .L2139+16
+	bls	.L2097
+	ldr	r1, .L2140+16
 	mov	r6, #36
-	ldr	r3, .L2139+20
+	ldr	r3, .L2140+20
 	mov	r5, #0
 	ldr	ip, [r4, #-2076]
 	sub	r9, r1, #52
@@ -12021,10 +12031,10 @@ FtlScanSysBlk:
 	ldr	fp, [r4, #-3208]
 	ldrh	r10, [r1]
 	str	r5, [sp, #4]
-.L2097:
+.L2098:
 	uxth	r1, r5
 	cmp	r1, r3
-	bcs	.L2134
+	bcs	.L2135
 	ldr	r1, [sp, #8]
 	ldrb	r0, [r9, r5]	@ zero_extendqisi2
 	str	r2, [sp, #28]
@@ -12038,7 +12048,7 @@ FtlScanSysBlk:
 	ldr	r3, [sp, #16]
 	ldr	ip, [sp, #24]
 	ldr	r2, [sp, #28]
-	bne	.L2056
+	bne	.L2057
 	ldr	r0, [sp, #4]
 	mov	r1, r1, asl #10
 	mla	r0, r6, r0, ip
@@ -12055,25 +12065,25 @@ FtlScanSysBlk:
 	add	r0, r1, #1
 	uxth	r1, r0
 	str	r1, [sp, #4]
-.L2056:
+.L2057:
 	add	r5, r5, #1
-	b	.L2097
-.L2134:
+	b	.L2098
+.L2135:
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
-	beq	.L2059
+	beq	.L2060
 	mov	r1, r3
 	ldr	r0, [r4, #-2076]
 	mov	r2, #1
-	ldr	r9, .L2139
+	ldr	r9, .L2140
 	bl	FlashReadPages
 	mov	r3, #0
 	str	r3, [sp, #12]
-.L2060:
+.L2061:
 	ldrh	r3, [sp, #12]
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bcs	.L2059
+	bcs	.L2060
 	ldr	r3, [sp, #12]
 	mov	r10, #36
 	mul	r10, r10, r3
@@ -12084,10 +12094,10 @@ FtlScanSysBlk:
 	cmn	r3, #1
 	ldr	r6, [r2, #12]
 	ubfx	r5, r5, #10, #16
-	bne	.L2062
+	bne	.L2063
 	mov	fp, #16
 	movw	r3, #65535
-.L2061:
+.L2062:
 	ldr	r0, [r4, #-2076]
 	mov	r1, #1
 	str	r3, [sp, #16]
@@ -12103,41 +12113,41 @@ FtlScanSysBlk:
 	ldreq	r3, [r8, #-2076]
 	mvneq	r2, #0
 	streq	r2, [r3, r10]
-	beq	.L2062
-.L2063:
+	beq	.L2063
+.L2064:
 	ldr	r2, [r7, #-2076]
 	ldr	r2, [r2, r10]
 	cmn	r2, #1
-	bne	.L2062
+	bne	.L2063
 	sub	fp, fp, #1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L2061
-.L2062:
+	bne	.L2062
+.L2063:
 	ldr	r3, [r7, #-2076]
 	ldr	r3, [r3, r10]
 	cmn	r3, #1
-	beq	.L2065
+	beq	.L2066
 	ldr	r2, [r7, #-3848]
 	ldr	r3, [r6, #4]
 	cmn	r2, #1
-	beq	.L2066
+	beq	.L2067
 	cmp	r2, r3
-	bhi	.L2067
-.L2066:
+	bhi	.L2068
+.L2067:
 	cmn	r3, #1
 	addne	r2, r3, #1
 	strne	r2, [r8, #-3848]
-.L2067:
+.L2068:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L2069
-	bhi	.L2070
+	beq	.L2070
+	bhi	.L2071
 	movw	r3, #61574
 	cmp	r2, r3
-	bne	.L2068
-	ldr	r2, .L2139+24
+	bne	.L2069
+	ldr	r2, .L2140+24
 	ldr	lr, [r8, #-2000]
 	ldrh	ip, [r2]
 	ldrh	r1, [r2, #26]
@@ -12145,19 +12155,19 @@ FtlScanSysBlk:
 	rsb	r2, r1, r0
 	str	r2, [sp, #16]
 	uxth	r3, r0
-	b	.L2083
-.L2070:
+	b	.L2084
+.L2071:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L2072
+	beq	.L2073
 	movw	r3, #65535
 	cmp	r2, r3
 	moveq	r0, r5
-	beq	.L2133
-	b	.L2068
-.L2072:
+	beq	.L2134
+	b	.L2069
+.L2073:
 	ldr	r3, [sp, #20]
-	ldr	fp, .L2139+28
+	ldr	fp, .L2140+28
 	ldr	lr, [r4, #-1984]
 	ldr	ip, [r3, #1900]
 	ldrh	r2, [fp]
@@ -12168,30 +12178,30 @@ FtlScanSysBlk:
 	uxth	r3, r3
 	sxth	r1, r1
 	str	r1, [sp, #24]
-.L2074:
+.L2075:
 	ldr	r1, [sp, #24]
 	sxth	r0, r3
 	cmp	r0, r1
-	ble	.L2135
+	ble	.L2136
 	mov	r10, r0, asl #2
 	ldr	r1, [r6, #4]
 	str	r10, [sp, #16]
 	ldr	r10, [lr, r0, asl #2]
 	cmp	r1, r10
-	bls	.L2075
+	bls	.L2076
 	ldr	r1, [lr]
 	cmp	r1, #0
-	bne	.L2076
+	bne	.L2077
 	cmp	r2, ip
 	addne	r2, r2, #1
 	strneh	r2, [fp]	@ movhi
-.L2076:
+.L2077:
 	uxth	lr, r3
 	mov	r1, #0
-.L2077:
+.L2078:
 	uxth	r2, r1
 	cmp	r2, lr
-	bcs	.L2136
+	bcs	.L2137
 	ldr	ip, [r7, #-1984]
 	sxth	r2, r2
 	add	r1, r1, #1
@@ -12203,8 +12213,8 @@ FtlScanSysBlk:
 	add	r10, ip, r2
 	ldrh	r10, [r10, #2]
 	strh	r10, [ip, r2]	@ movhi
-	b	.L2077
-.L2136:
+	b	.L2078
+.L2137:
 	ldr	r2, [r4, #-1984]
 	mov	r0, r0, asl #1
 	ldr	r1, [r6, #4]
@@ -12214,26 +12224,26 @@ FtlScanSysBlk:
 	strh	r5, [r2, r0]	@ movhi
 	sxth	r0, r3
 	cmp	r0, #0
-	bge	.L2079
-	b	.L2068
-.L2075:
+	bge	.L2080
+	b	.L2069
+.L2076:
 	sub	r3, r3, #1
 	uxth	r3, r3
-	b	.L2074
-.L2135:
+	b	.L2075
+.L2136:
 	cmp	r0, #0
-	bge	.L2110
-	b	.L2068
-.L2079:
-	ldr	r2, .L2139+28
+	bge	.L2111
+	b	.L2069
+.L2080:
+	ldr	r2, .L2140+28
 	ldr	r1, [r9, #1900]
 	ldrh	r2, [r2]
 	rsb	r1, r2, r1
 	sub	r1, r1, #1
 	sxth	r1, r1
 	cmp	r0, r1
-	bgt	.L2068
-.L2110:
+	bgt	.L2069
+.L2111:
 	add	r2, r2, #1
 	ldr	r1, [r6, #4]
 	strh	r2, [fp]	@ movhi
@@ -12242,36 +12252,36 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, asl #2]
 	mov	r3, r3, asl #1
 	ldr	r2, [r4, #-2012]
-	b	.L2131
-.L2089:
+	b	.L2132
+.L2090:
 	ldr	r10, [lr, r2, asl #2]
 	mov	fp, r2, asl #2
 	ldr	r0, [r6, #4]
 	cmp	r0, r10
-	bhi	.L2137
+	bhi	.L2138
 	sub	r3, r3, #1
 	uxth	r3, r3
-.L2083:
+.L2084:
 	ldr	r0, [sp, #16]
 	sxth	r2, r3
 	cmp	r2, r0
-	bgt	.L2089
-	b	.L2088
-.L2137:
+	bgt	.L2090
+	b	.L2089
+.L2138:
 	ldr	r0, [lr]
 	cmp	r0, #0
-	bne	.L2085
+	bne	.L2086
 	cmp	r1, ip
 	addne	r1, r1, #1
-	ldrne	r0, .L2139+32
+	ldrne	r0, .L2140+32
 	strneh	r1, [r0]	@ movhi
-.L2085:
+.L2086:
 	uxth	lr, r3
 	mov	r0, #0
-.L2086:
+.L2087:
 	uxth	r1, r0
 	cmp	r1, lr
-	bcs	.L2138
+	bcs	.L2139
 	ldr	ip, [r4, #-2000]
 	sxth	r1, r1
 	add	r0, r0, #1
@@ -12283,27 +12293,27 @@ FtlScanSysBlk:
 	add	r10, ip, r1
 	ldrh	r10, [r10, #2]
 	strh	r10, [ip, r1]	@ movhi
-	b	.L2086
-.L2138:
+	b	.L2087
+.L2139:
 	ldr	r1, [r8, #-2000]
 	mov	r2, r2, asl #1
 	ldr	r0, [r6, #4]
 	str	r0, [r1, fp]
-	ldr	r1, .L2139
+	ldr	r1, .L2140
 	ldr	r1, [r1, #1920]
 	strh	r5, [r1, r2]	@ movhi
-.L2088:
+.L2089:
 	sxth	r3, r3
 	cmp	r3, #0
-	blt	.L2068
-	ldr	r0, .L2139+32
+	blt	.L2069
+	ldr	r0, .L2140+32
 	ldrh	r2, [r0, #-26]
 	ldrh	r1, [r0]
 	sub	r2, r2, #1
 	rsb	r2, r1, r2
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L2068
+	bgt	.L2069
 	add	r1, r1, #1
 	ldr	r2, [r8, #-2000]
 	strh	r1, [r0]	@ movhi
@@ -12311,90 +12321,90 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, asl #2]
 	mov	r3, r3, asl #1
 	ldr	r2, [r9, #1920]
-.L2131:
+.L2132:
 	strh	r5, [r2, r3]	@ movhi
-	b	.L2068
-.L2069:
-	ldr	r2, .L2139+8
+	b	.L2069
+.L2070:
+	ldr	r2, .L2140+8
 	movw	r1, #65535
 	ldrh	r0, [r2]
 	cmp	r0, r1
 	streqh	r5, [r2]	@ movhi
-	beq	.L2132
+	beq	.L2133
 	ldrh	r0, [r2, #4]
 	cmp	r0, r1
-	beq	.L2091
+	beq	.L2092
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L2091:
+.L2092:
 	ldr	r3, [r6, #4]
 	ldr	r2, [r8, #-3808]
 	cmp	r2, r3
-	ldr	r3, .L2139+8
+	ldr	r3, .L2140+8
 	strcsh	r5, [r3, #4]	@ movhi
-	bcs	.L2068
+	bcs	.L2069
 	ldrh	r2, [r3]
 	strh	r5, [r3]	@ movhi
 	strh	r2, [r3, #4]	@ movhi
 	ldr	r3, [r6, #4]
-.L2132:
+.L2133:
 	str	r3, [r7, #-3808]
-	b	.L2068
-.L2065:
+	b	.L2069
+.L2066:
 	ldrb	r1, [r9, #140]	@ zero_extendqisi2
 	mov	r0, r5
 	cmp	r1, #0
-	beq	.L2093
-.L2133:
+	beq	.L2094
+.L2134:
 	mov	r1, #0
-.L2093:
+.L2094:
 	bl	FtlFreeSysBlkQueueIn
-.L2068:
+.L2069:
 	ldr	r3, [sp, #12]
 	add	r3, r3, #1
 	str	r3, [sp, #12]
-	b	.L2060
-.L2059:
+	b	.L2061
+.L2060:
 	ldr	r3, [sp, #8]
 	add	r5, r3, #1
 	uxth	r3, r5
 	str	r3, [sp, #8]
-	b	.L2055
-.L2096:
-	ldr	r3, .L2139+4
+	b	.L2056
+.L2097:
+	ldr	r3, .L2140+4
 	ldr	ip, [r3, #-2012]
 	ldrh	r2, [ip]
 	cmp	r2, #0
-	beq	.L2098
-.L2101:
+	beq	.L2099
+.L2102:
 	ldr	r0, [r0, #1920]
-	ldr	r3, .L2139
+	ldr	r3, .L2140
 	ldrh	r2, [r0]
 	cmp	r2, #0
-	beq	.L2099
-	b	.L2122
-.L2098:
+	beq	.L2100
+	b	.L2123
+.L2099:
 	sub	r3, r3, #1920
 	ldrh	r3, [r3, #-8]
 	cmp	r3, #0
 	ldrne	lr, [r0, #1900]
-	beq	.L2101
-.L2102:
+	beq	.L2102
+.L2103:
 	uxth	r3, r2
 	sxth	r1, r3
 	cmp	r1, lr
-	bcs	.L2101
+	bcs	.L2102
 	mov	r5, r1, asl #1
 	add	r2, r2, #1
 	ldrh	r5, [ip, r5]
 	cmp	r5, #0
-	beq	.L2102
+	beq	.L2103
 	mov	r6, #0
-.L2103:
+.L2104:
 	ldr	ip, [r0, #1900]
 	sxth	r2, r3
 	cmp	r2, ip
-	bcs	.L2101
+	bcs	.L2102
 	ldr	lr, [r4, #-2012]
 	mov	ip, r2, asl #1
 	rsb	r5, r1, r2
@@ -12408,32 +12418,32 @@ FtlScanSysBlk:
 	str	r2, [lr, r5, asl #2]
 	ldr	r2, [r4, #-2012]
 	strh	r6, [r2, ip]	@ movhi
-	b	.L2103
-.L2099:
+	b	.L2104
+.L2100:
 	movw	r1, #1918
 	ldrh	r1, [r3, r1]
 	cmp	r1, #0
 	movwne	r1, #1892
 	ldrneh	ip, [r3, r1]
-	beq	.L2122
-.L2106:
+	beq	.L2123
+.L2107:
 	uxth	r3, r2
 	sxth	r1, r3
 	cmp	r1, ip
-	bge	.L2122
+	bge	.L2123
 	mov	lr, r1, asl #1
 	add	r2, r2, #1
 	ldrh	lr, [r0, lr]
 	cmp	lr, #0
-	beq	.L2106
-	ldr	r0, .L2139
+	beq	.L2107
+	ldr	r0, .L2140
 	mov	r7, #0
-	ldr	r6, .L2139+24
-.L2107:
+	ldr	r6, .L2140+24
+.L2108:
 	ldrh	ip, [r6]
 	sxth	r2, r3
 	cmp	r2, ip
-	bge	.L2122
+	bge	.L2123
 	ldr	lr, [r0, #1920]
 	mov	ip, r2, asl #1
 	rsb	r5, r1, r2
@@ -12447,15 +12457,15 @@ FtlScanSysBlk:
 	str	r2, [lr, r5, asl #2]
 	ldr	r2, [r0, #1920]
 	strh	r7, [r2, ip]	@ movhi
-	b	.L2107
-.L2122:
+	b	.L2108
+.L2123:
 	mov	r0, #0
 	add	sp, sp, #36
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2140:
+.L2141:
 	.align	2
-.L2139:
+.L2140:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3816
@@ -12474,124 +12484,142 @@ FtlLoadSysInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
 	mov	r1, #0
-	ldr	r6, .L2170
-	ldr	r4, .L2170+4
-	sub	r7, r6, #3808
-	ldr	r3, [r6, #-2064]
-	sub	r8, r7, #8
-	ldr	r0, [r6, #-4060]
-	str	r3, [r6, #220]
-	ldr	r3, [r6, #-2040]
-	str	r3, [r6, #224]
+	ldr	r4, .L2171
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r6, .L2171+4
+	sub	r7, r4, #3808
+	ldr	r3, [r4, #-2064]
+	ldr	r0, [r4, #-4060]
+	str	r3, [r4, #220]
+	ldr	r3, [r4, #-2040]
+	str	r3, [r4, #224]
 	movw	r3, #1812
-	ldrh	r2, [r4, r3]
+	ldrh	r2, [r6, r3]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r0, [r7, #-8]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L2142
-.L2153:
+	bne	.L2143
+.L2154:
 	mvn	r0, #0
-	b	.L2143
-.L2142:
+	b	.L2144
+.L2143:
 	mov	r1, #1
-	ldr	r10, .L2170+8
 	bl	FtlGetLastWrittenPage
-	ldrh	r7, [r7, #-8]
-	mov	r5, r6
-	mov	fp, r5
-	uxth	r6, r0
+	ldr	r3, .L2171+8
+	ldrh	r9, [r7, #-8]
+	mov	r7, r4
+	uxth	r5, r0
 	add	r0, r0, #1
-	strh	r0, [r8, #2]	@ movhi
-.L2144:
-	sxth	r3, r6
+	strh	r0, [r3, #2]	@ movhi
+.L2145:
+	sxth	r3, r5
 	cmp	r3, #0
-	blt	.L2152
-	sxth	r9, r7
+	blt	.L2153
+	sxth	fp, r9
 	mov	r1, #1
-	ldr	r0, .L2170+12
+	ldr	r0, .L2171+12
 	mov	r2, r1
-	orr	r3, r3, r9, asl #10
-	str	r3, [r5, #216]
-	ldr	r3, [r5, #-2064]
-	str	r3, [r5, #220]
+	orr	r3, r3, fp, asl #10
+	str	r3, [r4, #216]
+	ldr	r3, [r4, #-2064]
+	str	r3, [r4, #220]
 	bl	FlashReadPages
-	ldrb	r3, [r4]	@ zero_extendqisi2
+	ldrb	r3, [r6]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2145
-	ldr	r3, [fp, #224]
-	ldr	r2, [r3, #12]
-	cmp	r2, #0
-	beq	.L2145
-	ldr	r3, .L2170+16
-	ldr	r0, [fp, #220]
-	str	r2, [sp, #4]
-	ldrh	r1, [r3]
-	str	r3, [sp]
+	beq	.L2146
+	ldr	r8, [r7, #224]
+	ldr	r3, [r8, #12]
+	cmp	r3, #0
+	beq	.L2146
+	ldr	r2, [r7, #220]
+	ldr	r10, .L2171+16
+	str	r3, [sp, #28]
+	mov	r0, r2
+	str	r2, [sp, #24]
+	ldrh	r1, [r10]
 	bl	js_hash
-	ldr	r2, [sp, #4]
-	cmp	r2, r0
-	beq	.L2145
-	cmp	r6, #0
-	ldr	r3, [sp]
-	bne	.L2146
-	ldr	r2, .L2170+20
-	ldrh	r2, [r2, #4]
-	cmp	r9, r2
-	uxthne	r7, r2
-	ldrneh	r6, [r3, #-8]
-	bne	.L2148
-.L2146:
+	ldr	r3, [sp, #28]
+	cmp	r3, r0
+	beq	.L2146
+	cmp	r5, #0
+	ldr	r2, [sp, #24]
+	bne	.L2147
+	ldr	ip, .L2171+8
+	ldrh	r1, [ip, #4]
+	cmp	fp, r1
+	beq	.L2147
+	ldr	r0, [r8]
+	ldrh	r1, [ip]
+	str	ip, [sp, #24]
+	str	r0, [sp]
+	ldr	r0, [r8, #4]
+	str	r0, [sp, #4]
+	ldr	r0, [r8, #8]
+	str	r3, [sp, #12]
+	str	r0, [sp, #8]
+	ldr	r3, [r2]
+	ldr	r0, .L2171+20
+	str	r3, [sp, #16]
+	ldr	r2, [r7, #212]
+	ldr	r3, [r7, #216]
+	bl	printk
+	ldrh	r5, [r10, #-8]
+	ldr	ip, [sp, #24]
+	ldrh	r9, [ip, #4]
+	b	.L2149
+.L2147:
 	mvn	r3, #0
-	str	r3, [r5, #212]
-.L2145:
-	ldr	r3, [r5, #212]
+	str	r3, [r4, #212]
+.L2146:
+	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	beq	.L2148
-	ldr	r3, [fp, #-2064]
+	beq	.L2149
+	ldr	r3, [r7, #-2064]
+	ldr	r2, .L2171+24
 	ldr	r3, [r3]
-	cmp	r3, r10
-	bne	.L2148
-	ldr	r3, [fp, #-2040]
+	cmp	r3, r2
+	bne	.L2149
+	ldr	r3, [r7, #-2040]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L2148
-.L2152:
-	ldr	r1, [r5, #220]
+	bne	.L2149
+.L2153:
+	ldr	r1, [r4, #220]
 	mov	r2, #48
-	movw	r9, #1812
-	ldr	r0, .L2170+24
+	movw	r8, #1812
+	ldr	r0, .L2171+28
 	bl	ftl_memcpy
-	ldrh	r2, [r4, r9]
-	ldr	r1, [r5, #220]
-	ldr	r0, [r5, #-4060]
+	ldrh	r2, [r6, r8]
+	ldr	r1, [r4, #220]
+	ldr	r0, [r4, #-4060]
 	add	r1, r1, #48
 	mov	r2, r2, asl #1
 	bl	ftl_memcpy
-	ldrh	r2, [r4, r9]
-	ldr	r1, [r5, #220]
+	ldrh	r2, [r6, r8]
+	ldr	r1, [r4, #220]
 	add	r3, r2, #24
-	ldr	r0, [r5, #-3884]
+	ldr	r0, [r4, #-3884]
 	ubfx	r3, r3, #1, #30
 	mov	r2, r2, lsr #3
 	add	r2, r2, #4
-	ldr	r7, .L2170+4
+	ldr	r7, .L2171+4
 	add	r1, r1, r3, asl #2
-	ldr	r6, .L2170
+	ldr	r5, .L2171
 	bl	ftl_memcpy
 	movw	r3, #1916
-	ldrh	r3, [r4, r3]
+	ldrh	r3, [r6, r3]
 	cmp	r3, #0
-	beq	.L2150
-	ldrh	r2, [r7, r9]
-	ldr	r1, [r6, #220]
-	ldr	r0, [r6, #-1988]
+	beq	.L2151
+	ldrh	r2, [r7, r8]
+	ldr	r1, [r5, #220]
+	ldr	r0, [r5, #-1988]
 	mov	r3, r2, lsr #3
 	add	r3, r3, r2, asl #1
 	movw	r2, #1908
@@ -12601,145 +12629,146 @@ FtlLoadSysInfo:
 	mov	r2, r2, asl #2
 	add	r1, r1, r3, asl #2
 	bl	ftl_memcpy
-	b	.L2150
-.L2148:
-	sub	r6, r6, #1
-	uxth	r6, r6
-	b	.L2144
-.L2150:
-	ldr	r2, [r4, #4068]
-	ldr	r3, .L2170+8
-	ldr	r6, .L2170+4
+	b	.L2151
+.L2149:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L2145
+.L2151:
+	ldr	r2, [r6, #4068]
+	ldr	r3, .L2171+24
+	ldr	r5, .L2171+4
 	cmp	r2, r3
-	bne	.L2153
-	ldr	r7, .L2170+24
+	bne	.L2154
+	ldr	r7, .L2171+28
 	movw	r2, #1826
-	ldrb	r1, [r6, #4078]	@ zero_extendqisi2
-	ldrh	r2, [r6, r2]
+	ldr	r6, .L2171
+	ldrb	r1, [r5, #4078]	@ zero_extendqisi2
+	ldrh	r2, [r5, r2]
+	sub	r8, r6, #3808
 	ldrh	r3, [r7, #8]
-	ldr	r4, .L2170
 	cmp	r1, r2
-	sub	r9, r4, #3808
-	strh	r3, [r8, #6]	@ movhi
-	bne	.L2153
-	add	r2, r6, #1872
+	strh	r3, [r8, #-2]	@ movhi
+	bne	.L2154
+	add	r2, r5, #1872
 	movw	r1, #1878
-	ldrh	r1, [r6, r1]
+	ldrh	r1, [r5, r1]
 	ldrh	r2, [r2]
-	str	r3, [r4, #248]
+	str	r3, [r6, #248]
 	mul	r2, r3, r2
-	str	r2, [r6, #1932]
+	str	r2, [r5, #1932]
 	mul	r2, r1, r2
-	str	r2, [r6, #1912]
-	add	r2, r6, #1936
+	str	r2, [r5, #1912]
+	add	r2, r5, #1936
 	ldrh	r0, [r2, #6]
-	ldr	r2, [r6, #1816]
+	ldr	r2, [r5, #1816]
 	rsb	r0, r0, r2
 	rsb	r0, r3, r0
 	movw	r3, #1804
-	ldrh	r1, [r6, r3]
-	add	r6, r6, #4096
+	ldrh	r1, [r5, r3]
+	add	r5, r5, #4096
 	bl	__aeabi_uidiv
-	sub	r3, r4, #4032
-	sub	r2, r4, #3984
-	sub	ip, r4, #3792
+	sub	r3, r6, #4032
+	sub	r2, r6, #3984
+	sub	ip, r6, #3792
 	add	lr, r2, #40
-	strh	r0, [r9, #-12]	@ movhi
+	mov	r9, r2
+	strh	r0, [r8, #-12]	@ movhi
 	ldrh	r0, [r7, #14]
 	strh	r0, [r3, #-8]	@ movhi
 	ldrh	r3, [r7, #16]
 	mov	r1, r3, lsr #6
-	strh	r1, [r9, #-230]	@ movhi
+	strh	r1, [r8, #-230]	@ movhi
 	ldrh	r1, [r7, #18]
 	and	r3, r3, #63
-	strb	r3, [r4, #-4034]
-	ldrb	r3, [r6, #-17]	@ zero_extendqisi2
+	strb	r3, [r6, #-4034]
+	ldrb	r3, [r5, #-17]	@ zero_extendqisi2
 	strh	r1, [r2, #-8]	@ movhi
 	ldrh	r1, [r7, #20]
-	strb	r3, [r4, #-4032]
+	strb	r3, [r6, #-4032]
 	mvn	r3, #0
 	strh	r3, [ip, #-8]	@ movhi
 	mov	r3, #0
+	strh	r3, [r8, #10]	@ movhi
 	mov	r8, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-3986]
-	ldrb	r1, [r6, #-16]	@ zero_extendqisi2
+	strb	r1, [r6, #-3986]
+	ldrb	r1, [r5, #-16]	@ zero_extendqisi2
 	strh	r8, [r2, #-6]	@ movhi
-	sub	r8, r4, #3936
-	strh	r3, [r9, #10]	@ movhi
-	mov	r9, r2
-	strb	r1, [r4, #-3984]
+	sub	r8, r6, #3936
+	strb	r3, [r6, #-3794]
+	strb	r1, [r6, #-3984]
 	ldrh	r1, [r7, #22]
-	strb	r3, [r4, #-3794]
-	strb	r3, [r4, #-3792]
+	strb	r3, [r6, #-3792]
+	str	r3, [r6, #-3860]
 	strh	r1, [r8, #-8]	@ movhi
 	ldrh	r1, [r7, #24]
-	str	r3, [r4, #-3860]
 	mov	r7, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-3938]
-	ldrb	r1, [r6, #-15]	@ zero_extendqisi2
+	strb	r1, [r6, #-3938]
+	ldrb	r1, [r5, #-15]	@ zero_extendqisi2
 	strh	r7, [r2, #42]	@ movhi
 	mov	r7, ip
-	strb	r1, [r4, #-3936]
-	str	r3, [r4, #-3872]
-	ldr	r1, [r6, #4]
-	str	r3, [r4, #-3880]
-	str	r3, [r4, #-3864]
-	str	r3, [r4, #-3836]
-	str	r3, [r4, #-3828]
-	str	r3, [r4, #-3868]
-	ldr	r3, [r6, #12]
-	str	r1, [r4, #-3840]
-	ldr	r1, [r4, #-3848]
-	ldr	r2, [r5, #-3844]
+	strb	r1, [r6, #-3936]
+	str	r3, [r6, #-3872]
+	ldr	r1, [r5, #4]
+	str	r3, [r6, #-3880]
+	str	r3, [r6, #-3864]
+	str	r3, [r6, #-3836]
+	str	r3, [r6, #-3828]
+	str	r3, [r6, #-3868]
+	ldr	r3, [r5, #12]
+	str	r1, [r6, #-3840]
+	ldr	r1, [r6, #-3848]
+	ldr	r2, [r4, #-3844]
 	cmp	r3, r1
-	strhi	r3, [r4, #-3848]
-	ldr	r3, [r6, #8]
+	strhi	r3, [r6, #-3848]
+	ldr	r3, [r5, #8]
 	cmp	r3, r2
-	ldrhi	r2, .L2170
+	ldrhi	r2, .L2171
 	strhi	r3, [r2, #-3844]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L2156
-	ldr	r0, .L2170+28
-	bl	make_superblock
-.L2156:
-	ldrh	r2, [r9, #-8]
-	movw	r3, #65535
-	cmp	r2, r3
 	beq	.L2157
-	ldr	r0, .L2170+32
+	ldr	r0, .L2171+32
 	bl	make_superblock
 .L2157:
-	ldrh	r2, [r8, #-8]
+	ldrh	r2, [r9, #-8]
 	movw	r3, #65535
 	cmp	r2, r3
 	beq	.L2158
-	ldr	r0, .L2170+36
+	ldr	r0, .L2171+36
 	bl	make_superblock
 .L2158:
-	ldrh	r2, [r7, #-8]
+	ldrh	r2, [r8, #-8]
 	movw	r3, #65535
 	cmp	r2, r3
 	beq	.L2159
-	ldr	r0, .L2170+40
+	ldr	r0, .L2171+40
 	bl	make_superblock
 .L2159:
+	ldrh	r2, [r7, #-8]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2160
+	ldr	r0, .L2171+44
+	bl	make_superblock
+.L2160:
 	mov	r0, #0
-.L2143:
-	add	sp, sp, #12
+.L2144:
+	add	sp, sp, #36
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2171:
+.L2172:
 	.align	2
-.L2170:
+.L2171:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	1179929683
+	.word	.LANCHOR2-3816
 	.word	.LANCHOR2+212
 	.word	.LANCHOR0+1882
-	.word	.LANCHOR2-3816
+	.word	.LC107
+	.word	1179929683
 	.word	.LANCHOR0+4068
 	.word	.LANCHOR2-4040
 	.word	.LANCHOR2-3992
@@ -12754,7 +12783,7 @@ FtlDumpBlockInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 80
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2187
+	ldr	r3, .L2188
 	ubfx	r0, r0, #10, #16
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -12762,20 +12791,20 @@ FtlDumpBlockInfo:
 	sub	sp, sp, #108
 	ldr	r3, [r3]
 	mov	r4, r1
-	ldr	r8, .L2187+4
-	ldr	r7, .L2187+8
+	ldr	r8, .L2188+4
+	ldr	r7, .L2188+8
 	str	r3, [sp, #100]
 	bl	P2V_block_in_plane
 	add	r5, r8, #1872
-	ldr	r1, .L2187+12
+	ldr	r1, .L2188+12
 	ldrh	r9, [r5]
 	mov	r6, r0
-	ldr	r0, .L2187+16
+	ldr	r0, .L2188+16
 	bl	printk
 	ldr	r2, [r7, #-4060]
 	mov	r3, r6, asl #1
 	mov	r1, r6
-	ldr	r0, .L2187+20
+	ldr	r0, .L2188+20
 	ldrh	r2, [r2, r3]
 	bl	printk
 	add	r0, sp, #104
@@ -12789,23 +12818,23 @@ FtlDumpBlockInfo:
 	cmp	r3, #0
 	moveq	r4, r3
 	str	r7, [sp, #44]
-	beq	.L2173
+	beq	.L2174
 	mov	r0, r6
 	bl	ftl_get_blk_mode
 	cmp	r0, #1
 	mov	r4, r0
 	movweq	r3, #1874
 	ldreqh	r9, [r8, r3]
-.L2173:
-	ldr	r0, .L2187+24
+.L2174:
+	ldr	r0, .L2188+24
 	mov	r1, r4
 	mov	r2, r9
 	ldrh	r3, [r5]
 	bl	printk
-	ldr	r8, .L2187+8
+	ldr	r8, .L2188+8
 	mov	r6, #0
-.L2174:
-	ldr	r3, .L2187+28
+.L2175:
+	ldr	r3, .L2188+28
 	add	r0, sp, #66
 	movw	lr, #65535
 	mov	r10, #36
@@ -12815,7 +12844,7 @@ FtlDumpBlockInfo:
 	str	r3, [sp, #28]
 	ldr	r3, [r8, #-3212]
 	str	r3, [sp, #32]
-	ldr	r3, .L2187+32
+	ldr	r3, .L2188+32
 	ldrh	r2, [r3]
 	ldrh	ip, [r3, #2]
 	str	r2, [sp, #36]
@@ -12823,13 +12852,13 @@ FtlDumpBlockInfo:
 	str	r2, [sp, #40]
 	mov	r2, #0
 	mov	r5, r2
-.L2175:
+.L2176:
 	uxth	r3, r2
 	cmp	r3, r7
-	bcs	.L2185
+	bcs	.L2186
 	ldrh	r3, [r0, #2]!
 	cmp	r3, lr
-	beq	.L2176
+	beq	.L2177
 	ldr	r1, [sp, #28]
 	orr	r3, r6, r3, asl #10
 	mla	r1, r10, r5, r1
@@ -12853,20 +12882,20 @@ FtlDumpBlockInfo:
 	bic	r3, r3, #3
 	add	r3, fp, r3
 	str	r3, [r1, #12]
-.L2176:
+.L2177:
 	add	r2, r2, #1
-	b	.L2175
-.L2185:
+	b	.L2176
+.L2186:
 	ldr	r0, [r8, #-2076]
 	mov	r1, r5
 	mov	r2, r4
 	mov	r10, #0
 	bl	FlashReadPages
 	mov	fp, #36
-.L2178:
+.L2179:
 	uxth	r3, r10
 	cmp	r3, r5
-	bcs	.L2186
+	bcs	.L2187
 	ldr	r3, [sp, #44]
 	mul	r2, fp, r10
 	ldrh	r1, [sp, #52]
@@ -12886,42 +12915,42 @@ FtlDumpBlockInfo:
 	ldr	r3, [r0]
 	str	r3, [sp, #16]
 	ldr	r3, [r0, #4]
-	ldr	r0, .L2187+36
+	ldr	r0, .L2188+36
 	str	r3, [sp, #20]
 	ldr	r2, [lr, r2]
 	ldr	r3, [ip, #4]
 	bl	printk
-	b	.L2178
-.L2186:
+	b	.L2179
+.L2187:
 	add	r6, r6, #1
 	uxth	r6, r6
 	cmp	r6, r9
-	bne	.L2174
-.L2180:
-	ldr	r3, .L2187
+	bne	.L2175
+.L2181:
+	ldr	r3, .L2188
 	mov	r0, #0
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2181
+	beq	.L2182
 	bl	__stack_chk_fail
-.L2181:
+.L2182:
 	add	sp, sp, #108
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2188:
+.L2189:
 	.align	2
-.L2187:
+.L2188:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3+16
-	.word	.LC107
 	.word	.LC108
 	.word	.LC109
+	.word	.LC110
 	.word	.LANCHOR0+1804
 	.word	.LANCHOR0+1882
-	.word	.LC110
+	.word	.LC111
 	.fnend
 	.size	FtlDumpBlockInfo, .-FtlDumpBlockInfo
 	.align	2
@@ -12935,22 +12964,22 @@ FtlScanAllBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #100
 	sub	sp, sp, #100
-	ldr	r5, .L2205
+	ldr	r5, .L2206
 	mov	r6, #0
-	ldr	r0, .L2205+4
-	ldr	r1, .L2205+8
+	ldr	r0, .L2206+4
+	ldr	r1, .L2206+8
 	ldr	r3, [r5]
 	str	r3, [sp, #92]
 	bl	printk
 	str	r5, [sp, #36]
-	ldr	r5, .L2205+12
+	ldr	r5, .L2206+12
 	mov	r7, r5
-.L2190:
-	ldr	r3, .L2205+16
+.L2191:
+	ldr	r3, .L2206+16
 	uxth	r4, r6
 	ldrh	r3, [r3]
 	cmp	r3, r4
-	bls	.L2201
+	bls	.L2202
 	add	r8, sp, #96
 	mov	r0, r4
 	movw	r9, #65535
@@ -12962,11 +12991,11 @@ FtlScanAllBlock:
 	mov	r1, r4
 	ldrh	r2, [ip, r2]
 	mov	r3, r0
-	ldr	r0, .L2205+20
+	ldr	r0, .L2206+20
 	bl	printk
 	mov	r0, r8
 	bl	make_superblock
-	ldr	r3, .L2205+24
+	ldr	r3, .L2206+24
 	ldr	lr, [r5, #-3208]
 	ldrh	r2, [r3]
 	ldrh	ip, [r3, #78]
@@ -12979,14 +13008,14 @@ FtlScanAllBlock:
 	str	r2, [sp, #32]
 	mov	r2, #0
 	mov	r4, r2
-.L2191:
+.L2192:
 	ldr	r1, [sp, #24]
 	uxth	r3, r2
 	cmp	r3, r1
-	bcs	.L2202
+	bcs	.L2203
 	ldrh	r3, [r0, #2]!
 	cmp	r3, r9
-	beq	.L2192
+	beq	.L2193
 	ldr	r1, [sp, #28]
 	mov	r3, r3, asl #10
 	mla	r1, r10, r4, r1
@@ -13008,20 +13037,20 @@ FtlScanAllBlock:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L2192:
+.L2193:
 	add	r2, r2, #1
-	b	.L2191
-.L2202:
+	b	.L2192
+.L2203:
 	ldr	r0, [r5, #-2076]
 	mov	r1, r4
 	mov	r2, #0
 	mov	r8, #0
 	bl	FlashReadPages
 	mov	r9, #36
-.L2194:
+.L2195:
 	uxth	r3, r8
 	cmp	r3, r4
-	bcs	.L2203
+	bcs	.L2204
 	mul	r2, r9, r8
 	ldr	lr, [r7, #-2076]
 	ldrh	r1, [sp, #44]
@@ -13040,23 +13069,23 @@ FtlScanAllBlock:
 	ldr	r3, [r0]
 	str	r3, [sp, #16]
 	ldr	r3, [r0, #4]
-	ldr	r0, .L2205+28
+	ldr	r0, .L2206+28
 	str	r3, [sp, #20]
 	ldr	r2, [lr, r2]
 	ldr	r3, [ip, #4]
 	bl	printk
-	b	.L2194
-.L2203:
+	b	.L2195
+.L2204:
 	ldr	r0, [r7, #-2076]
 	mov	r1, r4
 	mov	r2, #1
 	mov	r8, #0
 	bl	FlashReadPages
 	mov	r9, #36
-.L2196:
+.L2197:
 	uxth	r3, r8
 	cmp	r3, r4
-	bcs	.L2204
+	bcs	.L2205
 	mul	r2, r9, r8
 	ldr	lr, [r7, #-2076]
 	ldrh	r1, [sp, #44]
@@ -13075,39 +13104,39 @@ FtlScanAllBlock:
 	ldr	r3, [r0]
 	str	r3, [sp, #16]
 	ldr	r3, [r0, #4]
-	ldr	r0, .L2205+32
+	ldr	r0, .L2206+32
 	str	r3, [sp, #20]
 	ldr	r2, [lr, r2]
 	ldr	r3, [ip, #4]
 	bl	printk
-	b	.L2196
-.L2204:
+	b	.L2197
+.L2205:
 	add	r6, r6, #1
-	b	.L2190
-.L2201:
+	b	.L2191
+.L2202:
 	ldr	r3, [sp, #36]
 	mov	r0, #0
 	ldr	r2, [sp, #92]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2199
+	beq	.L2200
 	bl	__stack_chk_fail
-.L2199:
+.L2200:
 	add	sp, sp, #100
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2206:
+.L2207:
 	.align	2
-.L2205:
+.L2206:
 	.word	__stack_chk_guard
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR3+36
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1814
-	.word	.LC111
-	.word	.LANCHOR0+1804
 	.word	.LC112
+	.word	.LANCHOR0+1804
 	.word	.LC113
+	.word	.LC114
 	.fnend
 	.size	FtlScanAllBlock, .-FtlScanAllBlock
 	.align	2
@@ -13117,7 +13146,7 @@ ftl_scan_all_ppa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2214
+	ldr	r3, .L2215
 	movw	r2, #1870
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -13125,28 +13154,28 @@ ftl_scan_all_ppa:
 	ldrh	r1, [r3, r2]
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r0, .L2214+4
+	ldr	r0, .L2215+4
 	sub	r9, r7, #2
 	ldrh	r2, [r7]
 	mov	r6, #0
 	bl	printk
-	ldr	r4, .L2214+8
-.L2208:
+	ldr	r4, .L2215+8
+.L2209:
 	ldrh	r3, [r9]
 	cmp	r6, r3
-	bcs	.L2210
+	bcs	.L2211
 	mov	r8, r6, asl #10
 	mov	r5, #0
-.L2211:
+.L2212:
 	ldrh	r3, [r7]
 	cmp	r5, r3
-	bcs	.L2213
+	bcs	.L2214
 	add	r3, r5, r8
 	str	r3, [r4, #216]
 	ldr	r3, [r4, #-2064]
 	mov	r2, #0
 	mov	r1, #1
-	ldr	r0, .L2214+12
+	ldr	r0, .L2215+12
 	str	r2, [r4, #212]
 	add	r5, r5, #1
 	str	r3, [r4, #220]
@@ -13155,7 +13184,7 @@ ftl_scan_all_ppa:
 	bl	FlashReadPages
 	ldr	r3, [r4, #224]
 	ldr	r2, [r4, #220]
-	ldr	r0, .L2214+16
+	ldr	r0, .L2215+16
 	ldr	r1, [r3, #4]
 	str	r1, [sp]
 	ldr	r1, [r3, #8]
@@ -13170,26 +13199,26 @@ ftl_scan_all_ppa:
 	ldr	r2, [r4, #212]
 	ldr	r3, [r3]
 	bl	printk
-	b	.L2211
-.L2213:
+	b	.L2212
+.L2214:
 	add	r6, r6, #1
-	b	.L2208
-.L2210:
-	ldr	r0, .L2214+20
-	ldr	r1, .L2214+24
+	b	.L2209
+.L2211:
+	ldr	r0, .L2215+20
+	ldr	r1, .L2215+24
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 	b	printk
-.L2215:
+.L2216:
 	.align	2
-.L2214:
+.L2215:
 	.word	.LANCHOR0
-	.word	.LC114
+	.word	.LC115
 	.word	.LANCHOR2
 	.word	.LANCHOR2+212
-	.word	.LC115
 	.word	.LC116
+	.word	.LC117
 	.word	.LANCHOR3+52
 	.fnend
 	.size	ftl_scan_all_ppa, .-ftl_scan_all_ppa
@@ -13200,14 +13229,14 @@ FlashProgPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L2274
+	ldr	ip, .L2275
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
 	ldr	ip, [ip]
 	mov	r4, r0
-	ldr	r5, .L2274+4
+	ldr	r5, .L2275+4
 	mov	r9, r2
 	str	r1, [sp, #8]
 	str	ip, [sp, #68]
@@ -13217,13 +13246,13 @@ FlashProgPages:
 	ldrb	ip, [ip, #19]	@ zero_extendqisi2
 	cmp	r7, #0
 	str	ip, [sp, #16]
-	ldr	ip, .L2274+8
+	ldr	ip, .L2275+8
 	ldrb	ip, [ip, #481]	@ zero_extendqisi2
 	str	ip, [sp, #12]
-	beq	.L2217
+	beq	.L2218
 	bl	FlashProgSlc2KPages
-	b	.L2218
-.L2231:
+	b	.L2219
+.L2232:
 	mov	r3, #36
 	add	r2, sp, #24
 	mul	r8, r3, r7
@@ -13242,31 +13271,31 @@ FlashProgPages:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r4, r8]
-	bcc	.L2271
-.L2220:
+	bcc	.L2272
+.L2221:
 	add	r7, r7, #1
-.L2217:
+.L2218:
 	ldr	r3, [sp, #8]
-	ldr	r6, .L2274+4
+	ldr	r6, .L2275+4
 	cmp	r7, r3
-	bcc	.L2231
-	b	.L2272
-.L2271:
+	bcc	.L2232
+	b	.L2273
+.L2272:
 	ldrb	r1, [r5, #1793]	@ zero_extendqisi2
 	add	r3, r5, r3, asl #4
 	cmp	r1, #0
 	ldr	r3, [r3, #1596]
 	moveq	r10, #0
 	cmp	r3, #0
-	beq	.L2222
+	beq	.L2223
 	cmp	r2, #1
-	bne	.L2223
+	bne	.L2224
 	ldr	r0, [r5, #76]
 	bl	NandcIqrWaitFlashReady
-.L2223:
+.L2224:
 	ldrb	r0, [sp, #28]	@ zero_extendqisi2
 	bl	FlashWaitCmdDone
-.L2222:
+.L2223:
 	ldr	r3, [sp, #28]
 	mov	r1, #0
 	cmp	r10, #0
@@ -13285,10 +13314,10 @@ FlashProgPages:
 	mov	r0, r6
 	ldrb	r3, [r5, #1717]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L2225
+	bne	.L2226
 	bl	NandcWaitFlashReady
-	b	.L2226
-.L2225:
+	b	.L2227
+.L2226:
 	bl	NandcFlashCs
 	mov	r0, r6
 	ldr	r3, [sp, #28]
@@ -13300,34 +13329,34 @@ FlashProgPages:
 	bl	FlashWaitReadyEN
 	mov	r0, r6
 	bl	NandcFlashDeCs
-.L2226:
+.L2227:
 	ldr	r3, [sp, #16]
 	sub	r3, r3, #1
 	cmp	r3, #7
-	bhi	.L2227
+	bhi	.L2228
 	add	r3, r5, r6
 	ldrb	r3, [r3, #1552]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2227
+	beq	.L2228
 	mov	r0, r6
 	ldrb	r1, [r5, #699]	@ zero_extendqisi2
-	ldr	r2, .L2274+12
+	ldr	r2, .L2275+12
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L2227:
+.L2228:
 	mov	r0, r6
 	bl	NandcFlashCs
 	cmp	r9, #1
 	mov	r0, r6
-	bne	.L2228
+	bne	.L2229
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2228
+	beq	.L2229
 	bl	flash_enter_slc_mode
-	b	.L2229
-.L2228:
-	bl	flash_exit_slc_mode
+	b	.L2230
 .L2229:
+	bl	flash_exit_slc_mode
+.L2230:
 	mov	r0, r6
 	ldr	r1, [sp, #24]
 	bl	FlashProgFirstCmd
@@ -13339,7 +13368,7 @@ FlashProgPages:
 	ldr	r3, [fp, #8]
 	bl	NandcXferData
 	cmp	r10, #0
-	beq	.L2230
+	beq	.L2231
 	mov	r0, r6
 	ldr	r1, [sp, #24]
 	bl	FlashProgDpFirstCmd
@@ -13365,59 +13394,59 @@ FlashProgPages:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r8, #8]
 	bl	NandcXferData
-.L2230:
+.L2231:
 	mov	r0, r6
 	ldr	r1, [sp, #24]
 	bl	FlashProgSecondCmd
 	mov	r0, r6
 	bl	NandcFlashDeCs
 	add	r7, r7, r10
-	b	.L2220
-.L2272:
+	b	.L2221
+.L2273:
 	ldr	r0, [r6, #76]
 	mov	r5, #0
 	bl	NandcIqrWaitFlashReady
-	ldr	r8, .L2274+16
+	ldr	r8, .L2275+16
 	mov	r7, r6
-.L2232:
+.L2233:
 	ldrb	r3, [r6, #1717]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcs	.L2273
+	bcs	.L2274
 	uxtb	r0, r5
 	bl	FlashWaitCmdDone
 	cmp	r9, #1
-	bne	.L2233
+	bne	.L2234
 	ldrb	r3, [r7, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2233
+	beq	.L2234
 	ldrb	r0, [r8, r5, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L2233:
+.L2234:
 	add	r5, r5, #1
-	b	.L2232
-.L2273:
+	b	.L2233
+.L2274:
 	ldr	r3, [sp, #20]
 	cmp	r3, #0
-	bne	.L2235
-.L2243:
+	bne	.L2236
+.L2244:
 	mov	r0, #0
-	b	.L2218
-.L2235:
-	ldr	r5, .L2274+20
+	b	.L2219
+.L2236:
+	ldr	r5, .L2275+20
 	mov	r6, #0
 	mov	r7, r5
-.L2236:
+.L2237:
 	ldr	r3, [sp, #8]
 	cmp	r6, r3
-	beq	.L2243
+	beq	.L2244
 	ldr	r3, [r4]
 	cmn	r3, #1
-	bne	.L2237
+	bne	.L2238
 	ldr	r1, [r4, #4]
-	ldr	r0, .L2274+24
+	ldr	r0, .L2275+24
 	bl	printk
-	b	.L2238
-.L2237:
+	b	.L2239
+.L2238:
 	ldr	r3, [sp, #8]
 	mov	r1, r9
 	add	r2, sp, #24
@@ -13450,57 +13479,57 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	r8, [sp, #32]
 	cmn	r8, #1
-	bne	.L2239
-	ldr	r0, .L2274+28
+	bne	.L2240
+	ldr	r0, .L2275+28
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r8, [r4]
-.L2239:
+.L2240:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L2240
+	beq	.L2241
 	ldr	r2, [r3]
 	ldr	r3, [r7, #188]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2240
-	ldr	r0, .L2274+32
+	beq	.L2241
+	ldr	r0, .L2275+32
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L2240:
+.L2241:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L2238
+	beq	.L2239
 	ldr	r2, [r3]
 	ldr	r3, [r7, #184]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2238
-	ldr	r0, .L2274+36
+	beq	.L2239
+	ldr	r0, .L2275+36
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L2238:
+.L2239:
 	add	r6, r6, #1
 	add	r4, r4, #36
-	b	.L2236
-.L2218:
-	ldr	r3, .L2274
+	b	.L2237
+.L2219:
+	ldr	r3, .L2275
 	ldr	r2, [sp, #68]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2244
+	beq	.L2245
 	bl	__stack_chk_fail
-.L2244:
+.L2245:
 	add	sp, sp, #76
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2275:
+.L2276:
 	.align	2
-.L2274:
+.L2275:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -13520,20 +13549,20 @@ FlashTestBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2281
+	ldr	r3, .L2282
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	.pad #104
 	sub	sp, sp, #104
 	ldr	r2, [r3]
 	mov	r4, r0
-	ldr	r5, .L2281+4
+	ldr	r5, .L2282+4
 	mov	r6, r3
 	str	r2, [sp, #100]
 	ldr	r2, [r5, #168]
 	cmp	r0, r2
 	movcc	r4, #0
-	bcc	.L2277
+	bcc	.L2278
 	ldr	r3, [r5, #176]
 	add	r0, sp, #36
 	mov	r1, #165
@@ -13564,20 +13593,20 @@ FlashTestBlk:
 	movne	r4, #1
 	rsb	r4, r4, #0
 	bl	FlashEraseBlocks
-.L2277:
+.L2278:
 	ldr	r2, [sp, #100]
 	mov	r0, r4
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L2278
+	beq	.L2279
 	bl	__stack_chk_fail
-.L2278:
+.L2279:
 	add	sp, sp, #104
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2282:
+.L2283:
 	.align	2
-.L2281:
+.L2282:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.fnend
@@ -13589,19 +13618,19 @@ FlashMakeFactorBbt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2339
+	ldr	r3, .L2340
 	mov	r1, #1
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #92
 	sub	sp, sp, #92
 	ldr	r3, [r3]
-	ldr	r5, .L2339+4
-	ldr	r4, .L2339+8
+	ldr	r5, .L2340+4
+	ldr	r4, .L2340+8
 	str	r3, [sp, #84]
 	ldr	r3, [r5, #180]
 	ldrh	r8, [r4, #124]
-	ldr	r0, .L2339+12
+	ldr	r0, .L2340+12
 	str	r3, [sp, #20]
 	ldrh	r3, [r4, #126]
 	smulbb	r8, r8, r3
@@ -13612,7 +13641,7 @@ FlashMakeFactorBbt:
 	ldrh	r3, [r4, #4]
 	str	r3, [sp, #16]
 	ldrb	r3, [r4]	@ zero_extendqisi2
-	ldr	r4, .L2339+8
+	ldr	r4, .L2340+8
 	cmp	r3, #1
 	ldreq	r3, [sp, #16]
 	moveq	r3, r3, asl #1
@@ -13623,20 +13652,20 @@ FlashMakeFactorBbt:
 	mov	r1, #0
 	mov	r2, #4096
 	bl	ftl_memset
-	ldr	r5, .L2339+4
+	ldr	r5, .L2340+4
 	mov	r3, r8, lsr #4
 	str	r3, [sp, #28]
 	mov	r3, #0
 	str	r3, [sp, #8]
-.L2285:
+.L2286:
 	ldrb	r7, [sp, #8]	@ zero_extendqisi2
 	ldrb	r3, [r4, #1717]	@ zero_extendqisi2
 	cmp	r3, r7
-	bls	.L2335
+	bls	.L2336
 	add	r3, r5, r7, asl #1
 	ldrh	r6, [r3, #196]
 	cmp	r6, #0
-	bne	.L2315
+	bne	.L2316
 	ldrh	r2, [r4, #132]
 	mov	r1, r6
 	ldr	r0, [r5, #148]
@@ -13649,17 +13678,17 @@ FlashMakeFactorBbt:
 	add	fp, r4, r3
 	str	r6, [sp, #4]
 	str	r3, [sp, #32]
-.L2287:
+.L2288:
 	ldrh	r3, [sp, #4]
 	cmp	r3, r8
 	str	r3, [sp, #12]
-	bcs	.L2296
+	bcs	.L2297
 	mvn	r3, #0
 	strb	r3, [sp, #46]
 	strb	r3, [sp, #47]
 	ldr	r3, [sp, #24]
 	tst	r3, #1
-	beq	.L2289
+	beq	.L2290
 	ldr	r3, [fp, #656]
 	add	r2, sp, #46
 	mov	r0, r10
@@ -13670,7 +13699,7 @@ FlashMakeFactorBbt:
 	ldrb	r2, [r4]	@ zero_extendqisi2
 	cmp	r2, #1
 	ldr	r3, [sp, #36]
-	bne	.L2289
+	bne	.L2290
 	ldr	r1, [r4, #4]
 	add	r2, sp, #47
 	mov	r0, r10
@@ -13680,10 +13709,10 @@ FlashMakeFactorBbt:
 	ldrb	r2, [sp, #47]	@ zero_extendqisi2
 	and	r3, r3, r2
 	strb	r3, [sp, #46]
-.L2289:
+.L2290:
 	ldr	r3, [sp, #24]
 	tst	r3, #2
-	beq	.L2291
+	beq	.L2292
 	ldr	r3, [r4, #692]
 	mov	r0, r10
 	add	r2, sp, #47
@@ -13693,45 +13722,45 @@ FlashMakeFactorBbt:
 	add	r1, r1, r3
 	add	r1, r1, r6
 	bl	FlashReadSpare
-.L2291:
+.L2292:
 	ldr	r3, [r4, #692]
 	ldrb	r3, [r3, #7]	@ zero_extendqisi2
 	cmp	r3, #1
 	cmpne	r3, #8
 	ldrb	r3, [sp, #46]	@ zero_extendqisi2
-	bne	.L2292
+	bne	.L2293
 	cmp	r3, #0
 	ldrneb	r0, [sp, #47]	@ zero_extendqisi2
 	clzne	r0, r0
 	movne	r0, r0, lsr #5
-	bne	.L2293
-	b	.L2314
-.L2292:
+	bne	.L2294
+	b	.L2315
+.L2293:
 	cmp	r3, #255
-	bne	.L2314
+	bne	.L2315
 	ldrb	r0, [sp, #47]	@ zero_extendqisi2
 	subs	r0, r0, #255
 	movne	r0, #1
-	b	.L2293
-.L2314:
+	b	.L2294
+.L2315:
 	mov	r0, #1
-.L2293:
+.L2294:
 	ldr	r3, [sp, #24]
 	tst	r3, #4
-	beq	.L2294
-	ldr	r3, .L2339+8
+	beq	.L2295
+	ldr	r3, .L2340+8
 	mov	r0, r10
 	ldr	r2, [sp, #32]
 	add	r3, r3, r2
 	ldr	r1, [r3, #656]
 	add	r1, r6, r1
 	bl	SandiskProgTestBadBlock
-.L2294:
+.L2295:
 	cmp	r0, #0
-	beq	.L2295
+	beq	.L2296
 	mov	r1, r7
 	ldr	r2, [sp, #4]
-	ldr	r0, .L2339+16
+	ldr	r0, .L2340+16
 	add	r9, r9, #1
 	bl	printk
 	ldr	r1, [r5, #148]
@@ -13747,46 +13776,46 @@ FlashMakeFactorBbt:
 	ldrb	r3, [r4, #1717]	@ zero_extendqisi2
 	mul	r3, r3, r2
 	cmp	r9, r3
-	bgt	.L2296
-.L2295:
+	bgt	.L2297
+.L2296:
 	ldr	r3, [sp, #4]
 	add	r3, r3, #1
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #16]
 	add	r6, r6, r3
-	b	.L2287
-.L2296:
+	b	.L2288
+.L2297:
 	mov	r2, r9
-	ldr	r0, .L2339+20
+	ldr	r0, .L2340+20
 	mov	r1, r7
 	bl	printk
 	ldrb	r3, [r4, #1717]	@ zero_extendqisi2
 	ldr	r2, [sp, #28]
 	mul	r3, r3, r2
 	cmp	r9, r3
-	blt	.L2298
+	blt	.L2299
 	ldrh	r2, [r4, #132]
 	mov	r1, #0
 	ldr	r0, [r5, #148]
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L2298:
+.L2299:
 	cmp	r7, #0
 	ldreqh	r10, [r5, #168]
 	moveq	r6, r7
 	moveq	r9, #1
-	bne	.L2300
-.L2301:
-	ldr	r3, .L2339+8
+	bne	.L2301
+.L2302:
+	ldr	r3, .L2340+8
 	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 	cmp	r3, r10
-	bls	.L2336
+	bls	.L2337
 	mov	r0, r10
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L2302
+	beq	.L2303
 	mov	r1, r10
-	ldr	r0, .L2339+24
+	ldr	r0, .L2340+24
 	bl	printk
 	ldr	r1, [r5, #148]
 	mov	r0, r10, lsr #5
@@ -13796,24 +13825,24 @@ FlashMakeFactorBbt:
 	uxth	r6, r6
 	orr	r3, r2, r9, asl r3
 	str	r3, [r1, r0, asl #2]
-.L2302:
+.L2303:
 	add	r10, r10, #1
 	uxth	r10, r10
-	b	.L2301
-.L2336:
+	b	.L2302
+.L2337:
 	sub	fp, r8, #1
 	sub	r9, r8, #50
 	mov	r10, #1
 	uxth	fp, fp
-.L2304:
+.L2305:
 	cmp	fp, r9
-	ble	.L2337
+	ble	.L2338
 	mov	r0, fp
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L2305
+	beq	.L2306
 	mov	r1, fp
-	ldr	r0, .L2339+24
+	ldr	r0, .L2340+24
 	bl	printk
 	ldr	r1, [r5, #148]
 	mov	r0, fp, lsr #5
@@ -13821,35 +13850,35 @@ FlashMakeFactorBbt:
 	ldr	r2, [r1, r0, asl #2]
 	orr	r3, r2, r10, asl r3
 	str	r3, [r1, r0, asl #2]
-.L2305:
+.L2306:
 	sub	fp, fp, #1
 	uxth	fp, fp
-	b	.L2304
-.L2337:
-	ldr	r3, .L2339+8
+	b	.L2305
+.L2338:
+	ldr	r3, .L2340+8
 	ldr	r2, [r5, #168]
 	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 	rsb	r3, r2, r3
 	cmp	r6, r3
-	bcc	.L2300
+	bcc	.L2301
 	ldrh	r2, [r4, #132]
 	mov	r1, #0
 	ldr	r0, [r5, #148]
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L2300:
+.L2301:
 	ldrb	r6, [sp, #8]	@ zero_extendqisi2
 	sub	r10, r8, #1
 	add	r9, r5, r7, asl #1
 	uxth	r10, r10
 	mul	r6, r8, r6
-.L2308:
+.L2309:
 	mov	r1, r7
-	ldr	r0, .L2339+28
+	ldr	r0, .L2340+28
 	mov	r2, r10
 	bl	printk
 	ldr	r1, [r5, #148]
-.L2309:
+.L2310:
 	mov	r2, r10, lsr #5
 	and	r3, r10, #31
 	ldr	r2, [r1, r2, asl #2]
@@ -13857,11 +13886,11 @@ FlashMakeFactorBbt:
 	ands	r3, r3, #1
 	subne	r10, r10, #1
 	uxthne	r10, r10
-	bne	.L2309
-.L2338:
+	bne	.L2310
+.L2339:
 	ldr	r1, [sp, #20]
 	add	r0, sp, #48
-	ldr	r2, .L2339+32
+	ldr	r2, .L2340+32
 	strh	r10, [r9, #196]	@ movhi
 	strh	r10, [r1, #2]	@ movhi
 	strh	r2, [r1]	@ movhi
@@ -13885,34 +13914,34 @@ FlashMakeFactorBbt:
 	cmp	r3, #0
 	subne	r10, r10, #1
 	uxthne	r10, r10
-	bne	.L2308
-.L2315:
+	bne	.L2309
+.L2316:
 	ldr	r3, [sp, #8]
 	add	r3, r3, #1
 	str	r3, [sp, #8]
-	b	.L2285
-.L2335:
-	ldr	r3, .L2339
+	b	.L2286
+.L2336:
+	ldr	r3, .L2340
 	ldr	r2, [sp, #84]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2312
+	beq	.L2313
 	bl	__stack_chk_fail
-.L2312:
+.L2313:
 	add	sp, sp, #92
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2340:
+.L2341:
 	.align	2
-.L2339:
+.L2340:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC117
 	.word	.LC118
 	.word	.LC119
 	.word	.LC120
 	.word	.LC121
+	.word	.LC122
 	.word	-3872
 	.fnend
 	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
@@ -13927,16 +13956,16 @@ FtlLowFormatEraseBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r5, .L2391
+	ldr	r5, .L2392
 	ldr	r7, [r5, #4052]
 	ldrb	r3, [r5, #1793]	@ zero_extendqisi2
 	cmp	r7, #0
 	str	r3, [sp, #20]
 	movne	r0, #0
-	bne	.L2342
+	bne	.L2343
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	mov	r10, r5
-	ldr	r6, .L2391+4
+	ldr	r6, .L2392+4
 	mov	fp, r7
 	mov	r5, r7
 	mov	r4, r7
@@ -13946,13 +13975,13 @@ FtlLowFormatEraseBlock:
 	str	r0, [sp, #8]
 	str	r3, [sp, #12]
 	str	r0, [r6, #-2088]
-.L2343:
-	ldr	r3, .L2391+8
+.L2344:
+	ldr	r3, .L2392+8
 	uxth	r2, fp
-	ldr	r7, .L2391
+	ldr	r7, .L2392
 	ldrh	r1, [r3]
 	cmp	r1, r2
-	bls	.L2386
+	bls	.L2387
 	mul	r1, r9, r2
 	ldr	r0, [r8, #4056]
 	add	r2, r8, r2
@@ -13964,18 +13993,18 @@ FtlLowFormatEraseBlock:
 	ldr	r3, [sp, #4]
 	mov	r7, r0
 	cmp	r3, #0
-	beq	.L2344
+	beq	.L2345
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L2345
-.L2344:
+	bne	.L2346
+.L2345:
 	mov	r0, r7
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	bne	.L2345
-	ldr	r3, .L2391+12
+	bne	.L2346
+	ldr	r3, .L2392+12
 	mov	r7, r7, asl #10
 	ldr	r1, [r10, #4056]
 	ldrh	r2, [r3]
@@ -13992,12 +14021,12 @@ FtlLowFormatEraseBlock:
 	bic	r2, r2, #3
 	add	r2, r0, r2
 	str	r2, [r1, #12]
-.L2345:
+.L2346:
 	add	fp, fp, #1
-	b	.L2343
-.L2386:
+	b	.L2344
+.L2387:
 	cmp	r5, #0
-	beq	.L2366
+	beq	.L2367
 	ldr	r3, [sp, #12]
 	mov	r2, r5
 	ldr	r0, [r7, #4056]
@@ -14011,35 +14040,35 @@ FtlLowFormatEraseBlock:
 	strb	r3, [r7, #1793]
 	mov	r7, r8
 	mov	r8, #36
-.L2349:
+.L2350:
 	uxth	r3, r7
 	cmp	r3, r5
-	bcs	.L2387
+	bcs	.L2388
 	mul	r3, r8, r7
 	ldr	r2, [r10, #4056]
 	add	r0, r2, r3
 	ldr	r3, [r2, r3]
 	cmn	r3, #1
-	bne	.L2350
+	bne	.L2351
 	ldr	r0, [r0, #4]
 	add	r4, r4, #1
 	ubfx	r0, r0, #10, #16
 	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-.L2350:
+.L2351:
 	add	r7, r7, #1
-	b	.L2349
-.L2387:
+	b	.L2350
+.L2388:
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
-	bne	.L2352
+	bne	.L2353
 	mov	r3, #6
 	uxth	r6, r6
 	str	r3, [sp, #16]
 	mov	r3, #1
 	str	r3, [sp, #12]
-	b	.L2353
-.L2352:
+	b	.L2354
+.L2353:
 	movw	r3, #1874
 	ldrh	r3, [r10, r3]
 	str	r3, [sp, #12]
@@ -14051,20 +14080,20 @@ FtlLowFormatEraseBlock:
 	strne	r6, [sp, #16]
 	moveq	r3, r3, lsr #2
 	streq	r3, [sp, #16]
-.L2353:
-	ldr	r8, .L2391
+.L2354:
+	ldr	r8, .L2392
 	mov	r7, #0
-.L2362:
-	ldr	fp, .L2391+4
+.L2363:
+	ldr	fp, .L2392+4
 	mov	r9, #0
 	mov	r5, r9
-.L2354:
-	ldr	r3, .L2391+8
-	ldr	r10, .L2391
+.L2355:
+	ldr	r3, .L2392+8
+	ldr	r10, .L2392
 	ldrh	r2, [r3]
 	uxth	r3, r9
 	cmp	r2, r3
-	bls	.L2388
+	bls	.L2389
 	mov	r2, #36
 	ldr	r1, [r8, #4056]
 	mul	r2, r2, r3
@@ -14077,22 +14106,22 @@ FtlLowFormatEraseBlock:
 	ldr	r3, [sp, #4]
 	mov	r10, r0
 	cmp	r3, #0
-	beq	.L2355
+	beq	.L2356
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L2356
-.L2355:
+	bne	.L2357
+.L2356:
 	mov	r0, r10
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L2356
+	bne	.L2357
 	ldr	r2, [r8, #4056]
 	mov	r3, #36
 	add	r10, r7, r10, asl #10
 	mla	r2, r3, r5, r2
 	ldr	r3, [fp, #-2048]
 	str	r3, [r2, #8]
-	ldr	r3, .L2391+12
+	ldr	r3, .L2392+12
 	str	r10, [r2, #4]
 	ldrh	r3, [r3]
 	mul	r3, r3, r5
@@ -14105,13 +14134,13 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r1, r3
 	str	r3, [r2, #12]
-.L2356:
+.L2357:
 	add	r9, r9, #1
-	b	.L2354
-.L2388:
+	b	.L2355
+.L2389:
 	cmp	r5, #0
-	beq	.L2366
-	ldr	r2, .L2391
+	beq	.L2367
+	ldr	r2, .L2392
 	mov	r3, #0
 	mov	r1, r5
 	mov	r9, #0
@@ -14121,78 +14150,78 @@ FtlLowFormatEraseBlock:
 	ldr	r0, [r2, #4056]
 	mov	r2, r6
 	bl	FlashProgPages
-	ldr	r3, .L2391
+	ldr	r3, .L2392
 	ldrb	r2, [sp, #20]	@ zero_extendqisi2
 	strb	r2, [r3, #1793]
-.L2359:
+.L2360:
 	uxth	r3, r9
 	cmp	r3, r5
-	bcs	.L2389
+	bcs	.L2390
 	mul	r3, fp, r9
-	ldr	r2, .L2391
+	ldr	r2, .L2392
 	ldr	r2, [r2, #4056]
 	add	r0, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L2360
+	beq	.L2361
 	ldr	r0, [r0, #4]
 	add	r4, r4, #1
 	ubfx	r0, r0, #10, #16
 	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-.L2360:
+.L2361:
 	add	r9, r9, #1
-	b	.L2359
-.L2389:
+	b	.L2360
+.L2390:
 	ldr	r3, [sp, #16]
 	add	r7, r7, r3
 	ldr	r3, [sp, #12]
 	uxth	r7, r7
 	cmp	r7, r3
-	bcc	.L2362
+	bcc	.L2363
 	mov	r7, #0
 	mov	r8, #36
-.L2363:
+.L2364:
 	uxth	r3, r7
 	cmp	r3, r5
 	ldr	r3, [sp, #4]
-	bcs	.L2390
+	bcs	.L2391
 	cmp	r3, #0
-	beq	.L2364
+	beq	.L2365
 	mul	r3, r8, r7
 	ldr	r2, [r10, #4056]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L2364
+	bne	.L2365
 	ldr	r0, [r1, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L2364:
+.L2365:
 	add	r7, r7, #1
-	b	.L2363
-.L2390:
+	b	.L2364
+.L2391:
 	adds	r3, r3, #0
 	ldr	r2, [sp, #8]
 	movne	r3, #1
 	cmp	r2, #63
 	orrls	r3, r3, #1
 	cmp	r3, #0
-	beq	.L2366
+	beq	.L2367
 	ldr	r0, [r10, #4056]
 	mov	r1, r6
 	mov	r2, r5
 	bl	FlashEraseBlocks
-.L2366:
+.L2367:
 	mov	r0, r4
-.L2342:
+.L2343:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2392:
+.L2393:
 	.align	2
-.L2391:
+.L2392:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1804
@@ -14210,14 +14239,14 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r5, .L2411
+	ldr	r5, .L2412
 	ldr	r6, [r5, #4052]
 	cmp	r6, #0
-	bne	.L2395
-	ldr	r4, .L2411+4
+	bne	.L2396
+	ldr	r4, .L2412+4
 	mov	r1, r6
-	ldr	r7, .L2411+8
-	ldr	r10, .L2411+12
+	ldr	r7, .L2412+8
+	ldr	r10, .L2412+12
 	ldr	r3, [r4, #-2040]
 	ldr	r0, [r4, #-2064]
 	str	r3, [r4, #224]
@@ -14227,11 +14256,11 @@ FtlBbmTblFlush:
 	str	r0, [r4, #220]
 	bl	ftl_memset
 	sub	r9, r5, #110
-.L2396:
+.L2397:
 	ldrh	r3, [r9]
-	ldr	r8, .L2411
+	ldr	r8, .L2412
 	cmp	r6, r3
-	bge	.L2410
+	bge	.L2411
 	ldrh	r2, [r10]
 	ldr	r3, [r4, #220]
 	ldr	r1, [r7, #4]!
@@ -14240,17 +14269,17 @@ FtlBbmTblFlush:
 	add	r6, r6, #1
 	add	r0, r3, r0, asl #2
 	bl	ftl_memcpy
-	b	.L2396
-.L2410:
+	b	.L2397
+.L2411:
 	ldr	r6, [r4, #224]
 	mov	r1, #255
 	mov	r2, #16
-	ldr	fp, .L2411+4
+	ldr	fp, .L2412+4
 	mov	r7, #0
 	mov	r0, r6
 	mov	r10, r7
 	bl	ftl_memset
-	ldr	r3, .L2411+16
+	ldr	r3, .L2412+16
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r8, #1944]
 	str	r3, [r6, #4]
@@ -14262,7 +14291,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #10]	@ movhi
 	ldr	r3, [r8, #1800]
 	strh	r3, [r6, #12]	@ movhi
-.L2398:
+.L2399:
 	ldr	r3, [r4, #-2064]
 	mov	ip, #0
 	ldrh	r1, [r5]
@@ -14277,15 +14306,15 @@ FtlBbmTblFlush:
 	str	r3, [r4, #216]
 	ldrh	r3, [r5, #4]
 	str	r0, [sp]
-	ldr	r0, .L2411+20
+	ldr	r0, .L2412+20
 	bl	printk
-	ldr	r9, .L2411+24
+	ldr	r9, .L2412+24
 	ldrh	r2, [r5, #2]
 	ldrh	r3, [r9, #-62]
 	sub	r3, r3, #1
 	cmp	r2, r3
 	ldr	ip, [sp, #12]
-	blt	.L2399
+	blt	.L2400
 	ldr	r3, [r8, #1944]
 	mov	r1, #1
 	ldrh	r2, [r9]
@@ -14303,8 +14332,8 @@ FtlBbmTblFlush:
 	str	r3, [r0, #4]
 	strh	ip, [r9, #2]	@ movhi
 	bl	FlashEraseBlocks
-.L2399:
-	ldr	r9, .L2411+4
+.L2400:
+	ldr	r9, .L2412+4
 	mov	r1, #1
 	mov	r3, r1
 	mov	r2, r1
@@ -14315,45 +14344,45 @@ FtlBbmTblFlush:
 	strh	r3, [r5, #2]	@ movhi
 	ldr	r3, [r4, #212]
 	cmn	r3, #1
-	bne	.L2400
+	bne	.L2401
 	add	r7, r7, #1
-	ldr	r0, .L2411+28
+	ldr	r0, .L2412+28
 	ldr	r1, [fp, #216]
 	uxth	r7, r7
 	bl	printk
 	cmp	r7, #3
-	bls	.L2398
+	bls	.L2399
 	mov	r2, r7
-	ldr	r0, .L2411+32
+	ldr	r0, .L2412+32
 	ldr	r1, [r9, #216]
 	bl	printk
-	ldr	r3, .L2411
+	ldr	r3, .L2412
 	mov	r2, #1
 	str	r2, [r3, #4052]
-	b	.L2395
-.L2400:
+	b	.L2396
+.L2401:
 	add	r10, r10, #1
 	cmp	r10, #1
-	beq	.L2398
+	beq	.L2399
 	cmp	r3, #256
-	beq	.L2398
-.L2395:
+	beq	.L2399
+.L2396:
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2412:
+.L2413:
 	.align	2
-.L2411:
+.L2412:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1960
 	.word	.LANCHOR2-1976
 	.word	-3887
-	.word	.LC122
-	.word	.LANCHOR0+1936
 	.word	.LC123
+	.word	.LANCHOR0+1936
 	.word	.LC124
+	.word	.LC125
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
@@ -14367,18 +14396,18 @@ allocate_data_superblock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r6, .L2468
+	ldr	r6, .L2469
 	ldr	r3, [r6, #4052]
 	cmp	r3, #0
-	bne	.L2414
-	ldr	r10, .L2468+4
+	bne	.L2415
+	ldr	r10, .L2469+4
 	mov	r4, r0
 	mov	r7, r10
-.L2415:
-	ldr	r3, .L2468+8
+.L2416:
+	ldr	r3, .L2469+8
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r4, r3
-	bne	.L2416
+	bne	.L2417
 	sub	r3, r3, #100
 	ldr	ip, [r10, #-3224]
 	ldrh	r3, [r3]
@@ -14389,73 +14418,73 @@ allocate_data_superblock:
 	ldr	lr, [r6, #1796]
 	cmp	lr, #0
 	uxth	r1, r1
-	beq	.L2417
+	beq	.L2418
 	ldr	lr, [r10, #-3824]
 	cmp	lr, #39
-	bhi	.L2417
+	bhi	.L2418
 	cmp	lr, #2
-	bls	.L2442
+	bls	.L2443
 	cmp	ip, #0
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
 	moveq	r1, r0
-	beq	.L2417
-	b	.L2442
-.L2416:
+	beq	.L2418
+	b	.L2443
+.L2417:
 	cmp	r2, #1
-	bne	.L2442
-	ldr	r0, .L2468
+	bne	.L2443
+	ldr	r0, .L2469
 	add	r3, r0, #1824
 	ldrh	r3, [r3]
 	cmp	r3, #1
-	beq	.L2442
+	beq	.L2443
 	ldrb	r3, [r0, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2442
-	ldr	r3, .L2468+12
+	bne	.L2443
+	ldr	r3, .L2469+12
 	ldr	r0, [r0, #1796]
 	ldrh	r3, [r3]
 	cmp	r0, #0
 	mov	r1, r3, lsr #3
-	beq	.L2417
+	beq	.L2418
 	ldr	r0, [r10, #-3824]
 	cmp	r0, #1
 	rsbls	r3, r3, r3, asl #3
 	ubfxls	r1, r3, #3, #16
-.L2417:
+.L2418:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-	b	.L2418
-.L2442:
+	b	.L2419
+.L2443:
 	mov	r1, #0
-.L2418:
-	ldr	r0, .L2468+16
+.L2419:
+	ldr	r0, .L2469+16
 	bl	List_pop_index_node
-	ldr	r2, .L2468+12
+	ldr	r2, .L2469+12
 	ldrh	r3, [r2]
 	sub	r3, r3, #1
 	strh	r3, [r2]	@ movhi
-	ldr	r3, .L2468+20
+	ldr	r3, .L2469+20
 	ldrh	r3, [r3]
 	uxth	r9, r0
 	cmp	r3, r9
-	bls	.L2415
+	bls	.L2416
 	ldr	r3, [r10, #-4060]
 	mov	r8, r9, asl #1
 	ldrh	r5, [r3, r8]
 	cmp	r5, #0
-	bne	.L2415
+	bne	.L2416
 	strh	r9, [r4]	@ movhi
 	mov	r0, r4
 	bl	make_superblock
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2420
-	ldr	r3, .L2468
+	beq	.L2421
+	ldr	r3, .L2469
 	mov	fp, #36
-	ldr	r2, .L2468+24
+	ldr	r2, .L2469+24
 	add	r0, r4, #14
 	ldr	r1, [r3, #4056]
 	ldrh	ip, [r2]
@@ -14463,14 +14492,14 @@ allocate_data_superblock:
 	mla	r2, fp, ip, r1
 	mov	ip, r5
 	str	r2, [sp]
-	b	.L2421
-.L2420:
-	ldr	r3, [r10, #-4060]
-	b	.L2463
+	b	.L2422
 .L2421:
+	ldr	r3, [r10, #-4060]
+	b	.L2464
+.L2422:
 	ldr	r2, [sp]
 	cmp	r3, r2
-	beq	.L2465
+	beq	.L2466
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
@@ -14482,9 +14511,9 @@ allocate_data_superblock:
 	addne	r5, r5, #1
 	uxthne	r5, r5
 	strne	r2, [lr, #4]
-	b	.L2421
-.L2465:
-	ldr	r3, .L2468+28
+	b	.L2422
+.L2466:
+	ldr	r3, .L2469+28
 	ldr	r2, [r6, #1796]
 	rsb	r3, r3, r4
 	clz	r3, r3
@@ -14492,20 +14521,20 @@ allocate_data_superblock:
 	mov	r3, r3, lsr #5
 	moveq	r3, #0
 	cmp	r3, #0
-	beq	.L2424
-	ldr	r3, .L2468
+	beq	.L2425
+	ldr	r3, .L2469
 	ldr	r3, [r3, #4060]
 	ldrh	r3, [r3, r8]
 	cmp	r3, #40
 	movhi	r3, #0
 	strhib	r3, [r10, #-4032]
-.L2424:
+.L2425:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	ldr	r2, [r6, #4060]
 	cmp	r3, #0
-	ldr	fp, .L2468+32
+	ldr	fp, .L2469+32
 	ldrh	r3, [r2, r8]
-	bne	.L2425
+	bne	.L2426
 	cmp	r3, #0
 	mov	r0, r9
 	ldrneh	r1, [fp]
@@ -14518,8 +14547,8 @@ allocate_data_superblock:
 	add	r3, r3, #1
 	str	r3, [r7, #-3840]
 	bl	ftl_set_blk_mode
-	b	.L2427
-.L2425:
+	b	.L2428
+.L2426:
 	add	r3, r3, #1
 	strh	r3, [r2, r8]	@ movhi
 	ldr	r2, [r7, #-3884]
@@ -14532,7 +14561,7 @@ allocate_data_superblock:
 	and	r3, r9, #31
 	orr	r3, ip, r0, asl r3
 	str	r3, [r2, r1, asl #2]
-.L2427:
+.L2428:
 	ldr	r3, [r6, #4060]
 	ldr	r2, [r7, #-3828]
 	ldr	r0, [r7, #-3840]
@@ -14542,7 +14571,7 @@ allocate_data_superblock:
 	strhi	r3, [r10, #-3828]
 	ldr	r3, [r7, #-3836]
 	mla	r0, r0, r2, r3
-	ldr	r3, .L2468+20
+	ldr	r3, .L2469+20
 	ldrh	r1, [r3]
 	bl	__aeabi_uidiv
 	ldr	r2, [r7, #-2020]
@@ -14555,19 +14584,19 @@ allocate_data_superblock:
 	mla	r3, r3, r5, r1
 	add	r3, r3, #40
 	str	r0, [r7, #-3832]
-.L2429:
+.L2430:
 	add	r2, r2, #36
 	cmp	r2, r3
 	ldrne	r1, [r2, #-36]
 	bicne	r1, r1, #1020
 	bicne	r1, r1, #3
 	strne	r1, [r2, #-36]
-	bne	.L2429
-.L2466:
+	bne	.L2430
+.L2467:
 	ldrb	r2, [r6, #140]	@ zero_extendqisi2
-	ldr	r3, .L2468
+	ldr	r3, .L2469
 	cmp	r2, #0
-	beq	.L2431
+	beq	.L2432
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	ldr	r0, [r3, #4056]
 	cmp	r2, #1
@@ -14575,7 +14604,7 @@ allocate_data_superblock:
 	moveq	r1, #0
 	movne	r1, #1
 	bl	FlashEraseBlocks
-.L2431:
+.L2432:
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	mov	r2, r5
 	ldr	r0, [r6, #4056]
@@ -14584,16 +14613,16 @@ allocate_data_superblock:
 	add	r1, r4, #16
 	mov	r2, fp
 	mov	ip, #36
-.L2433:
+.L2434:
 	uxth	r3, fp
 	cmp	r3, r5
-	bcs	.L2467
+	bcs	.L2468
 	mul	r3, ip, fp
 	ldr	lr, [r6, #4056]
 	add	r0, lr, r3
 	ldr	r3, [lr, r3]
 	cmn	r3, #1
-	bne	.L2434
+	bne	.L2435
 	ldr	r0, [r0, #4]
 	add	r2, r2, #1
 	stmib	sp, {r1, r3, ip}
@@ -14607,35 +14636,35 @@ allocate_data_superblock:
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	strb	r3, [r4, #7]
-.L2434:
+.L2435:
 	add	fp, fp, #1
 	add	r1, r1, #2
-	b	.L2433
-.L2467:
+	b	.L2434
+.L2468:
 	cmp	r2, #0
-	beq	.L2436
+	beq	.L2437
 	mov	r0, r9
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L2436:
+.L2437:
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2437
+	bne	.L2438
 	ldr	r3, [r7, #-4060]
-.L2463:
+.L2464:
 	mvn	r2, #0
 	strh	r2, [r3, r8]	@ movhi
-	b	.L2415
-.L2437:
-	ldr	r2, .L2468+36
-	ldr	r1, .L2468+4
+	b	.L2416
+.L2438:
+	ldr	r2, .L2469+36
+	ldr	r1, .L2469+4
 	ldrh	r2, [r2]
 	strh	r9, [r4]	@ movhi
 	smulbb	r3, r2, r3
 	mov	r2, #0
 	strh	r2, [r4, #2]	@ movhi
 	strb	r2, [r4, #6]
-	ldr	r2, .L2468+4
+	ldr	r2, .L2469+4
 	uxth	r3, r3
 	strh	r3, [r4, #4]	@ movhi
 	ldr	r2, [r2, #-3848]
@@ -14646,14 +14675,14 @@ allocate_data_superblock:
 	ldr	r1, [r1, #-4060]
 	mov	r2, r2, asl #1
 	strh	r3, [r1, r2]	@ movhi
-.L2414:
+.L2415:
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2469:
+.L2470:
 	.align	2
-.L2468:
+.L2469:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3944
@@ -14676,40 +14705,40 @@ FtlGcFreeBadSuperBlk:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r5, .L2484
+	ldr	r5, .L2485
 	ldrh	r3, [r5, #-6]
 	cmp	r3, #0
-	beq	.L2472
+	beq	.L2473
 	sub	r5, r5, #6
 	mov	r8, r0
 	mov	r7, #0
 	mov	r9, r5
-.L2471:
-	ldr	r3, .L2484+4
+.L2472:
+	ldr	r3, .L2485+4
 	uxth	r2, r7
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bls	.L2481
-	ldr	r3, .L2484+8
+	bls	.L2482
+	ldr	r3, .L2485+8
 	mov	r1, r8
 	mov	r10, #0
 	add	r3, r3, r2
 	ldrb	r0, [r3, #1832]	@ zero_extendqisi2
 	bl	V2P_block
-	ldr	ip, .L2484+12
+	ldr	ip, .L2485+12
 	mov	fp, r0
-.L2473:
+.L2474:
 	ldrh	r3, [r5]
 	uxth	r4, r10
 	cmp	r3, r4
-	bls	.L2482
+	bls	.L2483
 	mov	r3, r4, asl #1
 	add	r6, ip, r3
 	ldrh	r3, [ip, r3]
 	cmp	r3, fp
-	bne	.L2474
+	bne	.L2475
 	mov	r1, fp
-	ldr	r0, .L2484+16
+	ldr	r0, .L2485+16
 	str	ip, [sp, #4]
 	bl	printk
 	mov	r0, fp
@@ -14718,37 +14747,37 @@ FtlGcFreeBadSuperBlk:
 	ldrh	r2, [r5]
 	mov	r3, r6
 	ldr	ip, [sp, #4]
-.L2475:
+.L2476:
 	cmp	r4, r2
 	ldrcch	r1, [r3, #2]
 	addcc	r4, r4, #1
 	uxthcc	r4, r4
 	strcch	r1, [r3], #2	@ movhi
-	bcc	.L2475
-.L2483:
+	bcc	.L2476
+.L2484:
 	sub	r2, r2, #1
 	strh	r2, [r9]	@ movhi
-.L2474:
+.L2475:
 	add	r10, r10, #1
-	b	.L2473
-.L2482:
+	b	.L2474
+.L2483:
 	add	r7, r7, #1
-	b	.L2471
-.L2481:
+	b	.L2472
+.L2482:
 	bl	FtlGcReFreshBadBlk
-.L2472:
+.L2473:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2485:
+.L2486:
 	.align	2
-.L2484:
+.L2485:
 	.word	.LANCHOR2-3168
 	.word	.LANCHOR0+1804
 	.word	.LANCHOR0
 	.word	.LANCHOR2-3172
-	.word	.LC125
+	.word	.LC126
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
@@ -14758,7 +14787,7 @@ update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L2496
+	ldr	r2, .L2497
 	mov	r3, r0, asl #1
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
@@ -14766,30 +14795,30 @@ update_vpc_list:
 	ldr	r1, [r2, #-4060]
 	ldrh	r3, [r1, r3]
 	cmp	r3, #0
-	bne	.L2487
+	bne	.L2488
 	sub	r1, r2, #3792
 	ldrh	r0, [r1, #-8]
 	cmp	r0, r4
 	mvneq	r3, #0
 	streqh	r3, [r1, #-8]	@ movhi
-	beq	.L2489
+	beq	.L2490
 	sub	r1, r2, #4032
 	ldrh	r1, [r1, #-8]
 	cmp	r1, r4
-	beq	.L2495
+	beq	.L2496
 	sub	r1, r2, #3984
 	ldrh	r1, [r1, #-8]
 	cmp	r1, r4
-	beq	.L2495
+	beq	.L2496
 	sub	r2, r2, #3936
 	ldrh	r2, [r2, #-8]
 	cmp	r2, r4
-	beq	.L2495
-.L2489:
+	beq	.L2496
+.L2490:
 	mov	r1, r4
-	ldr	r0, .L2496+4
+	ldr	r0, .L2497+4
 	bl	List_remove_node
-	ldr	r2, .L2496+8
+	ldr	r2, .L2497+8
 	mov	r0, r4
 	ldrh	r3, [r2, #-4]
 	sub	r3, r3, #1
@@ -14799,14 +14828,14 @@ update_vpc_list:
 	bl	FtlGcFreeBadSuperBlk
 	mov	r0, #1
 	ldmfd	sp!, {r4, pc}
-.L2487:
+.L2488:
 	bl	List_update_data_list
-.L2495:
+.L2496:
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L2497:
+.L2498:
 	.align	2
-.L2496:
+.L2497:
 	.word	.LANCHOR2
 	.word	.LANCHOR2-4064
 	.word	.LANCHOR2-4048
@@ -14824,17 +14853,17 @@ decrement_vpc_count:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r4, r0
-	beq	.L2499
-	ldr	r5, .L2509
+	beq	.L2500
+	ldr	r5, .L2510
 	mov	r6, r0, asl #1
 	ldr	r3, [r5, #-4060]
 	ldrh	r2, [r3, r6]
 	cmp	r2, #0
 	subne	r2, r2, #1
 	strneh	r2, [r3, r6]	@ movhi
-	bne	.L2499
+	bne	.L2500
 	mov	r1, r4
-	ldr	r0, .L2509+4
+	ldr	r0, .L2510+4
 	bl	printk
 	ldr	r3, [r5, #-4060]
 	mov	r2, #32
@@ -14843,7 +14872,7 @@ decrement_vpc_count:
 	strh	r2, [r3, r6]	@ movhi
 	bl	test_node_in_list
 	cmp	r0, #0
-	beq	.L2501
+	beq	.L2502
 	mov	r1, r4
 	sub	r0, r5, #4048
 	bl	List_remove_node
@@ -14854,37 +14883,37 @@ decrement_vpc_count:
 	strh	r3, [r2, #-12]	@ movhi
 	bl	INSERT_DATA_LIST
 	ldr	r3, [r5, #-4060]
-	ldr	r0, .L2509+8
+	ldr	r0, .L2510+8
 	mov	r1, r4
 	ldrh	r2, [r3, r6]
 	bl	printk
-.L2501:
+.L2502:
 	mov	r0, r4
 	bl	FtlGcRefreshBlock
-	b	.L2504
-.L2499:
-	ldr	r5, .L2509+12
+	b	.L2505
+.L2500:
+	ldr	r5, .L2510+12
 	movw	r3, #65535
 	ldrh	r0, [r5]
 	cmp	r0, r3
 	streqh	r4, [r5]	@ movhi
-	beq	.L2504
+	beq	.L2505
 	cmp	r0, r4
-	beq	.L2504
+	beq	.L2505
 	bl	update_vpc_list
 	strh	r4, [r5]	@ movhi
 	adds	r0, r0, #0
 	movne	r0, #1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2504:
+.L2505:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2510:
+.L2511:
 	.align	2
-.L2509:
+.L2510:
 	.word	.LANCHOR2
-	.word	.LC126
 	.word	.LC127
+	.word	.LC128
 	.word	.LANCHOR2-1920
 	.fnend
 	.size	decrement_vpc_count, .-decrement_vpc_count
@@ -14906,16 +14935,16 @@ FtlSlcSuperblockCheck:
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	mov	r4, r0
-	ldr	r5, .L2525
-	ldr	r6, .L2525+4
+	ldr	r5, .L2526
+	ldr	r6, .L2526+4
 	add	r3, r0, r3, asl #1
-	ldr	r7, .L2525+8
+	ldr	r7, .L2526+8
 	ldrh	r3, [r3, #16]
-.L2515:
+.L2516:
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L2524
-.L2517:
+	bne	.L2525
+.L2518:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	ldrh	r2, [r7]
 	add	r3, r3, #1
@@ -14930,19 +14959,19 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r3, [r3, #16]
-	b	.L2515
-.L2524:
+	b	.L2516
+.L2525:
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r2, #1
-	bne	.L2518
+	bne	.L2519
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2518
+	bne	.L2519
 	ldrh	r3, [r4, #2]
 	mov	r3, r3, asl #1
 	ldrh	r3, [r6, r3]
 	cmp	r3, r1
-	bne	.L2518
+	bne	.L2519
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4]
 	sub	r3, r3, #1
@@ -14950,12 +14979,12 @@ FtlSlcSuperblockCheck:
 	bl	decrement_vpc_count
 	ldrh	r2, [r4, #4]
 	cmp	r2, #0
-	bne	.L2517
+	bne	.L2518
 	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
-	b	.L2523
-.L2518:
-	ldr	r3, .L2525
+	b	.L2524
+.L2519:
+	ldr	r3, .L2526
 	ldrb	r1, [r3, #140]	@ zero_extendqisi2
 	cmp	r1, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
@@ -14966,7 +14995,7 @@ FtlSlcSuperblockCheck:
 	ldrh	r2, [r3, r2]
 	cmp	r1, r2
 	ldmccfd	sp!, {r3, r4, r5, r6, r7, pc}
-	ldr	r1, .L2525+12
+	ldr	r1, .L2526+12
 	add	r3, r3, #1872
 	ldrh	r2, [r4]
 	ldrh	ip, [r4, #4]
@@ -14978,13 +15007,13 @@ FtlSlcSuperblockCheck:
 	ldrh	r3, [r3]
 	mov	r2, #0
 	strh	r2, [r4, #4]	@ movhi
-.L2523:
+.L2524:
 	strh	r3, [r4, #2]	@ movhi
 	strb	r2, [r4, #6]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2526:
+.L2527:
 	.align	2
-.L2525:
+.L2526:
 	.word	.LANCHOR0
 	.word	.LANCHOR2-3136
 	.word	.LANCHOR0+1804
@@ -15004,17 +15033,17 @@ get_new_active_ppa:
 	strb	r3, [r0, #10]
 	mov	r4, r0
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
-	ldr	r7, .L2545
-	ldr	r8, .L2545+4
+	ldr	r7, .L2546
+	ldr	r8, .L2546+4
 	add	r3, r0, r3, asl #1
-	ldr	r9, .L2545+8
+	ldr	r9, .L2546+8
 	ldrh	r2, [r3, #16]
-.L2528:
+.L2529:
 	movw	r1, #65535
 	cmp	r2, r1
-	ldr	r6, .L2545
-	bne	.L2544
-.L2529:
+	ldr	r6, .L2546
+	bne	.L2545
+.L2530:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	ldrh	r2, [r7]
 	add	r3, r3, #1
@@ -15029,35 +15058,35 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r2, [r3, #16]
-	b	.L2528
-.L2544:
+	b	.L2529
+.L2545:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	ldrh	r5, [r4, #2]
 	cmp	r3, #1
 	ldrh	r3, [r4, #4]
-	bne	.L2531
+	bne	.L2532
 	ldrb	r0, [r8, #140]	@ zero_extendqisi2
 	cmp	r0, #0
-	bne	.L2531
+	bne	.L2532
 	mov	r0, r5, asl #1
 	ldrh	r0, [r9, r0]
 	cmp	r0, r1
-	bne	.L2531
+	bne	.L2532
 	sub	r3, r3, #1
 	ldrh	r0, [r4]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L2529
-.L2531:
-	ldr	r7, .L2545+4
+	b	.L2530
+.L2532:
+	ldr	r7, .L2546+4
 	orr	r5, r5, r2, asl #10
 	sub	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
-.L2532:
+.L2533:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	movw	r2, #65535
 	ldrh	r0, [r6]
-.L2534:
+.L2535:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r0
@@ -15068,40 +15097,40 @@ get_new_active_ppa:
 	add	r1, r4, r3, asl #1
 	ldrh	r1, [r1, #16]
 	cmp	r1, r2
-	beq	.L2534
+	beq	.L2535
 	strb	r3, [r4, #6]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L2539
+	bne	.L2540
 	ldrb	r3, [r7, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2536
+	bne	.L2537
 	ldrh	r3, [r4, #2]
-	ldr	r2, .L2545+8
+	ldr	r2, .L2546+8
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2536
+	bne	.L2537
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L2536
+	beq	.L2537
 	sub	r3, r3, #1
 	ldrh	r0, [r4]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L2532
-.L2536:
-	ldr	r3, .L2545+4
+	b	.L2533
+.L2537:
+	ldr	r3, .L2546+4
 	ldrb	r2, [r3, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L2539
+	beq	.L2540
 	movw	r2, #1874
 	ldrh	r1, [r4, #2]
 	ldrh	r2, [r3, r2]
 	cmp	r1, r2
-	bcc	.L2539
-	ldr	r1, .L2545+12
+	bcc	.L2540
+	ldr	r1, .L2546+12
 	add	r3, r3, #1872
 	ldrh	r2, [r4]
 	ldrh	ip, [r4, #4]
@@ -15115,12 +15144,12 @@ get_new_active_ppa:
 	strh	r2, [r4, #4]	@ movhi
 	strb	r2, [r4, #6]
 	strh	r3, [r4, #2]	@ movhi
-.L2539:
+.L2540:
 	mov	r0, r5
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L2546:
+.L2547:
 	.align	2
-.L2545:
+.L2546:
 	.word	.LANCHOR0+1804
 	.word	.LANCHOR0
 	.word	.LANCHOR2-3136
@@ -15137,13 +15166,13 @@ FtlVpcTblFlush:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r5, .L2565
+	ldr	r5, .L2566
 	ldr	r3, [r5, #4052]
 	cmp	r3, #0
-	bne	.L2549
-	ldr	r4, .L2565+4
+	bne	.L2550
+	ldr	r4, .L2566+4
 	mov	r1, #255
-	ldr	r8, .L2565+8
+	ldr	r8, .L2566+8
 	ldr	r2, [r4, #-2064]
 	ldr	r6, [r4, #-2040]
 	str	r2, [r4, #220]
@@ -15153,14 +15182,14 @@ FtlVpcTblFlush:
 	ldrh	r2, [r2, #-8]
 	str	r3, [r6, #12]
 	strh	r2, [r6, #2]	@ movhi
-	ldr	r2, .L2565+12
+	ldr	r2, .L2566+12
 	strh	r2, [r6]	@ movhi
 	ldr	r2, [r4, #-3808]
 	stmib	r6, {r2, r3}
-	ldr	r3, .L2565+16
+	ldr	r3, .L2566+16
 	ldrh	r2, [r7, #-222]
 	str	r3, [r5, #4068]
-	ldr	r3, .L2565+20
+	ldr	r3, .L2566+20
 	str	r3, [r5, #4072]
 	ldrh	r3, [r7, #6]
 	strh	r3, [r8, #8]	@ movhi
@@ -15232,7 +15261,7 @@ FtlVpcTblFlush:
 	movw	r3, #1916
 	ldrh	r3, [r5, r3]
 	cmp	r3, #0
-	beq	.L2550
+	beq	.L2551
 	ldrh	r2, [r5, r8]
 	ldr	r0, [r4, #220]
 	ldr	r1, [r4, #-1992]
@@ -15245,14 +15274,14 @@ FtlVpcTblFlush:
 	mov	r2, r2, asl #2
 	add	r0, r0, r3, asl #2
 	bl	ftl_memcpy
-.L2550:
+.L2551:
 	mov	r0, #0
-	ldr	r9, .L2565+4
+	ldr	r9, .L2566+4
 	bl	FtlUpdateVaildLpn
-	ldr	fp, .L2565+24
+	ldr	fp, .L2566+24
 	mov	r8, #0
 	movw	r10, #65535
-.L2551:
+.L2552:
 	ldrh	r1, [r7]
 	ldrh	r0, [r7, #2]
 	ldr	r3, [r4, #-2064]
@@ -15264,8 +15293,8 @@ FtlVpcTblFlush:
 	ldr	r3, [r4, #-2040]
 	cmp	r0, r2
 	str	r3, [r4, #224]
-	ldr	r3, .L2565+28
-	blt	.L2552
+	ldr	r3, .L2566+28
+	blt	.L2553
 	ldrh	r10, [r3, #4]
 	mov	r2, #0
 	strh	r1, [r3, #4]	@ movhi
@@ -15282,18 +15311,18 @@ FtlVpcTblFlush:
 	str	r2, [r9, #216]
 	str	r3, [r6, #4]
 	strh	r0, [r6, #2]	@ movhi
-.L2552:
+.L2553:
 	ldrb	r3, [r5]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2553
-	ldr	r3, .L2565+32
+	beq	.L2554
+	ldr	r3, .L2566+32
 	ldr	r0, [r4, #-2064]
 	ldrh	r1, [r3]
 	bl	js_hash
 	str	r0, [r6, #12]
-.L2553:
+.L2554:
 	mov	r1, #1
-	ldr	r0, .L2565+36
+	ldr	r0, .L2566+36
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
@@ -15303,53 +15332,53 @@ FtlVpcTblFlush:
 	cmn	r2, #1
 	uxth	r3, r3
 	strh	r3, [r7, #2]	@ movhi
-	bne	.L2554
+	bne	.L2555
 	cmp	r3, #1
 	add	r8, r8, #1
-	ldreq	r3, .L2565+24
+	ldreq	r3, .L2566+24
 	uxth	r8, r8
-	ldreq	r2, .L2565+28
+	ldreq	r2, .L2566+28
 	ldreqh	r3, [r3]
 	subeq	r3, r3, #1
 	streqh	r3, [r2, #2]	@ movhi
 	cmp	r8, #3
-	bls	.L2551
-	ldr	r0, .L2565+40
+	bls	.L2552
+	ldr	r0, .L2566+40
 	mov	r2, r8
 	ldr	r1, [r4, #216]
 	bl	printk
 	mov	r3, #1
 	str	r3, [r5, #4052]
-	b	.L2549
-.L2554:
+	b	.L2550
+.L2555:
 	cmp	r2, #256
 	cmpne	r3, #1
-	beq	.L2551
+	beq	.L2552
 	movw	r3, #65535
 	cmp	r10, r3
-	beq	.L2549
+	beq	.L2550
 	mov	r0, r10
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L2549:
+.L2550:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2566:
+.L2567:
 	.align	2
-.L2565:
+.L2566:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+4068
 	.word	-3932
 	.word	1179929683
-	.word	1342177366
+	.word	1342177367
 	.word	.LANCHOR0+1874
 	.word	.LANCHOR2-3816
 	.word	.LANCHOR0+1882
 	.word	.LANCHOR2+212
-	.word	.LC128
+	.word	.LC129
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	2
@@ -15363,28 +15392,28 @@ FtlSuperblockPowerLostFix:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #44
 	sub	sp, sp, #44
-	ldr	r8, .L2585
+	ldr	r8, .L2586
 	ldr	r3, [r8]
 	str	r3, [sp, #36]
-	ldr	r3, .L2585+4
+	ldr	r3, .L2586+4
 	ldr	r5, [r3, #4052]
 	cmp	r5, #0
-	bne	.L2567
+	bne	.L2568
 	ldrb	r6, [r3, #140]	@ zero_extendqisi2
 	mov	r4, r0
 	cmp	r6, #0
-	beq	.L2584
+	beq	.L2585
 	ldrb	r6, [r0, #8]	@ zero_extendqisi2
 	cmp	r6, #1
 	ldreqh	fp, [r0, #4]
-	beq	.L2569
+	beq	.L2570
 	mov	r6, r5
-.L2584:
+.L2585:
 	mov	fp, #12
-.L2569:
+.L2570:
 	mvn	r3, #0
 	str	r3, [sp, #16]
-	ldr	r3, .L2585+8
+	ldr	r3, .L2586+8
 	mov	r9, #0
 	movw	r1, #61589
 	ldr	r7, [r3, #-2040]
@@ -15402,16 +15431,16 @@ FtlSuperblockPowerLostFix:
 	strh	r2, [r7, #2]	@ movhi
 	ldr	r2, [r3, #-2064]
 	str	r1, [r2]
-	ldr	r1, .L2585+12
+	ldr	r1, .L2586+12
 	ldr	r2, [r3, #-2064]
 	str	r1, [r2, #4]
-.L2570:
+.L2571:
 	subs	fp, fp, #1
-	bcc	.L2573
+	bcc	.L2574
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L2571
-.L2573:
+	bne	.L2572
+.L2574:
 	ldrh	r3, [r4]
 	ldr	r1, [r5, #-4060]
 	ldrh	r0, [r4, #4]
@@ -15419,19 +15448,19 @@ FtlSuperblockPowerLostFix:
 	ldrh	r2, [r1, r3]
 	rsb	r2, r0, r2
 	strh	r2, [r1, r3]	@ movhi
-	ldr	r3, .L2585+16
+	ldr	r3, .L2586+16
 	ldrh	r3, [r3]
 	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #0
 	strb	r3, [r4, #6]
 	strh	r3, [r4, #4]	@ movhi
-	b	.L2567
-.L2571:
+	b	.L2568
+.L2572:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	cmn	r0, #1
 	str	r0, [sp, #4]
-	beq	.L2573
+	beq	.L2574
 	ldr	r3, [r5, #-3844]
 	mov	r1, #1
 	mov	r2, r6
@@ -15445,20 +15474,20 @@ FtlSuperblockPowerLostFix:
 	bl	FlashProgPages
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
-	b	.L2570
-.L2567:
+	b	.L2571
+.L2568:
 	ldr	r2, [sp, #36]
 	ldr	r3, [r8]
 	cmp	r2, r3
-	beq	.L2577
+	beq	.L2578
 	bl	__stack_chk_fail
-.L2577:
+.L2578:
 	add	sp, sp, #44
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2586:
+.L2587:
 	.align	2
-.L2585:
+.L2586:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -15483,17 +15512,17 @@ ftl_map_blk_gc:
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
 	sub	r3, r3, #4
-	ldr	r7, .L2601
+	ldr	r7, .L2602
 	cmp	r2, r3
-	blt	.L2588
+	blt	.L2589
 	uxth	r0, r0
 	mov	r0, r0, asl #1
 	ldrh	r10, [r5, r0]
 	cmp	r10, #0
-	beq	.L2588
+	beq	.L2589
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L2588
+	bne	.L2589
 	mov	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r5, r0]	@ movhi
@@ -15504,25 +15533,25 @@ ftl_map_blk_gc:
 	movw	r3, #1874
 	ldrh	r3, [r7, r3]
 	cmp	r2, r3
-	bcc	.L2589
+	bcc	.L2590
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L2589:
-	ldr	r5, .L2601+4
-	mov	fp, #0
 .L2590:
+	ldr	r5, .L2602+4
+	mov	fp, #0
+.L2591:
 	ldrh	r3, [r4, #6]
 	uxth	r6, fp
 	cmp	r3, r6
-	bls	.L2600
+	bls	.L2601
 	ldr	r2, [r8, r6, asl #2]
 	add	r3, r8, r6, asl #2
 	cmp	r10, r2, lsr #10
-	bne	.L2591
+	bne	.L2592
 	ldr	r2, [r5, #-2060]
 	mov	r1, #1
 	ldr	r9, [r5, #-2040]
-	ldr	r0, .L2601+8
+	ldr	r0, .L2602+8
 	str	r2, [r5, #220]
 	str	r9, [r5, #224]
 	ldr	r2, [r8, r6, asl #2]
@@ -15533,58 +15562,58 @@ ftl_map_blk_gc:
 	ldr	r2, [r5, #212]
 	cmn	r2, #1
 	ldr	r3, [sp, #4]
-	bne	.L2592
-.L2594:
+	bne	.L2593
+.L2595:
 	mov	r2, #0
 	str	r2, [r3]
-	ldr	r3, .L2601+4
-	ldr	r0, .L2601+12
+	ldr	r3, .L2602+4
+	ldr	r0, .L2602+12
 	ldrh	r2, [r9, #8]
 	ldr	r1, [r3, #216]
 	bl	printk
 	mov	r3, #1
 	str	r3, [r7, #4052]
-	b	.L2593
-.L2592:
+	b	.L2594
+.L2593:
 	ldrh	r1, [r9, #8]
 	cmp	r1, r6
-	bne	.L2594
+	bne	.L2595
 	ldrh	r0, [r9]
 	ldrh	r2, [r4, #4]
 	cmp	r0, r2
-	bne	.L2594
+	bne	.L2595
 	mov	r0, r4
 	ldr	r2, [r5, #220]
 	bl	FtlMapWritePage
-.L2591:
+.L2592:
 	add	fp, fp, #1
-	b	.L2590
-.L2600:
+	b	.L2591
+.L2601:
 	mov	r0, r10
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L2588:
+.L2589:
 	movw	r3, #1874
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r7, r3]
 	cmp	r2, r3
-	bcc	.L2593
+	bcc	.L2594
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L2593:
+.L2594:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2602:
+.L2603:
 	.align	2
-.L2601:
+.L2602:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2+212
-	.word	.LC129
+	.word	.LC130
 	.fnend
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
@@ -15596,17 +15625,17 @@ Ftl_write_map_blk_to_last_page:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	ldr	r6, .L2615
+	ldr	r6, .L2616
 	ldr	r5, [r0, #12]
 	ldr	r7, [r0, #24]
 	ldr	r10, [r6, #4052]
 	cmp	r10, #0
-	bne	.L2604
+	bne	.L2605
 	ldrh	r3, [r0]
 	movw	r2, #65535
 	mov	r4, r0
 	cmp	r3, r2
-	bne	.L2605
+	bne	.L2606
 	ldrh	r3, [r0, #8]
 	add	r3, r3, #1
 	strh	r3, [r0, #8]	@ movhi
@@ -15617,12 +15646,12 @@ Ftl_write_map_blk_to_last_page:
 	add	r3, r3, #1
 	strh	r10, [r4]	@ movhi
 	str	r3, [r4, #28]
-	b	.L2604
-.L2605:
+	b	.L2605
+.L2606:
 	mov	r3, r3, asl #1
 	mov	r1, #255
 	ldrh	r9, [r5, r3]
-	ldr	r5, .L2615+4
+	ldr	r5, .L2616+4
 	ldrh	r3, [r0, #2]
 	orr	r3, r3, r9, asl #10
 	str	r3, [r5, #216]
@@ -15632,7 +15661,7 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r0, #28]
 	str	r8, [r5, #224]
 	str	r3, [r8, #4]
-	ldr	r3, .L2615+8
+	ldr	r3, .L2616+8
 	strh	r3, [r8, #8]	@ movhi
 	ldrh	r3, [r0, #4]
 	strh	r9, [r8, #2]	@ movhi
@@ -15644,14 +15673,14 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	r1, r10
 	mov	r3, r10
-.L2606:
+.L2607:
 	ldrh	r0, [r4, #6]
 	uxth	r2, r1
 	cmp	r0, r2
-	bls	.L2614
+	bls	.L2615
 	ldr	r0, [r7, r2, asl #2]
 	cmp	r9, r0, lsr #10
-	bne	.L2607
+	bne	.L2608
 	add	r3, r3, #1
 	ldr	r0, [r5, #-2064]
 	uxth	r3, r3
@@ -15660,23 +15689,23 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r2, [r5, #-2064]
 	add	r2, r2, r3, asl #3
 	str	r0, [r2, #4]
-.L2607:
+.L2608:
 	add	r1, r1, #1
-	b	.L2606
-.L2614:
+	b	.L2607
+.L2615:
 	ldrb	r3, [r6]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2609
-	ldr	r2, .L2615
+	beq	.L2610
+	ldr	r2, .L2616
 	movw	r3, #1882
 	ldr	r0, [r5, #220]
 	ldrh	r1, [r2, r3]
 	bl	js_hash
 	str	r0, [r8, #12]
-.L2609:
+.L2610:
 	mov	r1, #1
 	mov	r3, #0
-	ldr	r0, .L2615+12
+	ldr	r0, .L2616+12
 	mov	r2, r1
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
@@ -15684,12 +15713,12 @@ Ftl_write_map_blk_to_last_page:
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-.L2604:
+.L2605:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L2616:
+.L2617:
 	.align	2
-.L2615:
+.L2616:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1291
@@ -15707,36 +15736,36 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r10, r0
-	ldr	r6, .L2636
+	ldr	r6, .L2637
 	mov	r8, r1
 	mov	r4, #0
 	str	r2, [sp]
 	mov	r5, r6
-.L2618:
+.L2619:
 	ldr	r3, [r6, #-3864]
-	ldr	r9, .L2636
+	ldr	r9, .L2637
 	add	r3, r3, #1
 	str	r3, [r6, #-3864]
-	ldr	r3, .L2636+4
+	ldr	r3, .L2637+4
 	ldrh	r2, [r10, #2]
 	ldrh	r3, [r3]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L2619
+	bge	.L2620
 	ldrh	r2, [r10]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2620
-.L2619:
+	bne	.L2621
+.L2620:
 	mov	r0, r10
 	bl	Ftl_write_map_blk_to_last_page
-.L2620:
-	ldr	r3, .L2636+8
+.L2621:
+	ldr	r3, .L2637+8
 	ldr	r1, [r3, #4052]
 	mov	fp, r3
 	str	r3, [sp, #4]
 	cmp	r1, #0
-	bne	.L2621
+	bne	.L2622
 	ldrh	r2, [r10]
 	ldr	r0, [r10, #12]
 	ldr	r3, [sp]
@@ -15760,17 +15789,17 @@ FtlMapWritePage:
 	ldr	r3, [sp, #4]
 	ldrb	r3, [r3]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2622
-	ldr	r3, .L2636+12
+	beq	.L2623
+	ldr	r3, .L2637+12
 	ldr	r0, [r6, #220]
 	str	r2, [sp, #4]
 	ldrh	r1, [r3]
 	bl	js_hash
 	ldr	r2, [sp, #4]
 	str	r0, [r2, #12]
-.L2622:
+.L2623:
 	mov	r1, #1
-	ldr	r0, .L2636+16
+	ldr	r0, .L2637+16
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
@@ -15780,59 +15809,59 @@ FtlMapWritePage:
 	strh	r3, [r10, #2]	@ movhi
 	ldr	r2, [r5, #212]
 	cmn	r2, #1
-	bne	.L2623
-	ldr	r0, .L2636+20
+	bne	.L2624
+	ldr	r0, .L2637+20
 	add	r4, r4, #1
 	ldr	r1, [r6, #216]
 	bl	printk
 	ldrh	r3, [r10, #2]
 	uxth	r4, r4
 	cmp	r3, #2
-	ldrls	r3, .L2636+4
+	ldrls	r3, .L2637+4
 	ldrlsh	r3, [r3]
 	subls	r3, r3, #1
 	strlsh	r3, [r10, #2]	@ movhi
 	cmp	r4, #3
-	bls	.L2618
-	ldr	r0, .L2636+24
+	bls	.L2619
+	ldr	r0, .L2637+24
 	mov	r2, r4
 	ldr	r1, [r9, #216]
 	bl	printk
 	mov	r3, #1
 	str	r3, [fp, #4052]
-	b	.L2621
-.L2623:
+	b	.L2622
+.L2624:
 	cmp	r2, #0
 	strneh	r7, [r10, #40]	@ movhi
 	cmp	r2, #256
 	cmpne	r3, #1
-	beq	.L2627
+	beq	.L2628
 	ldr	r3, [r10, #36]
 	cmp	r3, #0
-	beq	.L2628
-.L2627:
+	beq	.L2629
+.L2628:
 	mov	r3, #0
 	str	r3, [r10, #36]
-	b	.L2618
-.L2628:
+	b	.L2619
+.L2629:
 	ldr	r2, [r9, #216]
 	ldr	r3, [r10, #24]
 	str	r2, [r3, r8, asl #2]
-.L2621:
+.L2622:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2637:
+.L2638:
 	.align	2
-.L2636:
+.L2637:
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1874
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1882
 	.word	.LANCHOR2+212
-	.word	.LC130
 	.word	.LC131
+	.word	.LC132
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
@@ -15845,7 +15874,7 @@ flush_l2p_region:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, #12
-	ldr	r5, .L2640
+	ldr	r5, .L2641
 	mul	r4, r4, r0
 	sub	r0, r5, #1968
 	ldr	r3, [r5, #-3896]
@@ -15861,9 +15890,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L2641:
+.L2642:
 	.align	2
-.L2640:
+.L2641:
 	.word	.LANCHOR2
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -15884,13 +15913,13 @@ FtlMapTblRecovery:
 	mov	r1, #0
 	ldr	r8, [r0, #24]
 	mov	r6, #0
-	ldr	r5, .L2685
+	ldr	r5, .L2686
 	str	r3, [sp, #4]
 	mov	r2, r10, asl #2
 	ldrh	r3, [r0, #8]
 	ldr	r9, [r0, #12]
 	mov	r0, r8
-	ldr	fp, .L2685+4
+	ldr	fp, .L2686+4
 	str	r3, [sp]
 	bl	ftl_memset
 	ldr	r3, [r5, #-2064]
@@ -15904,17 +15933,17 @@ FtlMapTblRecovery:
 	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #1
 	str	r3, [r4, #36]
-.L2643:
+.L2644:
 	uxth	r2, r6
 	ldr	r1, [sp]
 	sxth	r3, r2
 	cmp	r3, r1
-	bge	.L2661
+	bge	.L2662
 	ldr	r1, [sp]
 	sub	r1, r1, #1
 	cmp	r3, r1
 	mov	r1, r3, asl #1
-	bne	.L2644
+	bne	.L2645
 	ldrh	r0, [r9, r1]
 	mov	r6, #0
 	str	r3, [sp, #12]
@@ -15923,7 +15952,7 @@ FtlMapTblRecovery:
 	str	r2, [sp, #8]
 	str	r3, [sp]
 	bl	FtlGetLastWrittenPage
-	ldr	fp, .L2685
+	ldr	fp, .L2686
 	ldr	r2, [sp, #8]
 	add	r1, r0, #1
 	ldr	r3, [sp, #12]
@@ -15934,27 +15963,27 @@ FtlMapTblRecovery:
 	ldr	r2, [sp, #4]
 	ldr	r3, [r2, r3, asl #2]
 	str	r3, [r4, #28]
-.L2645:
+.L2646:
 	sxth	r3, r6
 	cmp	r3, r9
-	bge	.L2661
+	bge	.L2662
 	ldr	r2, [sp]
 	mov	r1, #1
-	ldr	r0, .L2685+8
+	ldr	r0, .L2686+8
 	ldrh	r2, [r2]
 	orr	r3, r3, r2, asl #10
 	mov	r2, r1
 	str	r3, [r5, #216]
 	bl	FlashReadPages
-	ldr	r3, .L2685+12
+	ldr	r3, .L2686+12
 	ldrb	r3, [r3]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2646
+	beq	.L2647
 	ldr	r3, [fp, #224]
 	ldr	r3, [r3, #12]
 	cmp	r3, #0
-	beq	.L2646
-	ldr	r2, .L2685+16
+	beq	.L2647
+	ldr	r2, .L2686+16
 	ldr	r0, [fp, #220]
 	str	r3, [sp, #4]
 	ldrh	r1, [r2]
@@ -15963,36 +15992,36 @@ FtlMapTblRecovery:
 	cmp	r3, r0
 	mvnne	r3, #0
 	strne	r3, [fp, #212]
-.L2646:
+.L2647:
 	ldr	r3, [fp, #212]
 	cmn	r3, #1
-	beq	.L2647
+	beq	.L2648
 	ldrh	r3, [r7, #8]
 	cmp	r3, r10
-	bcs	.L2647
+	bcs	.L2648
 	ldrh	r2, [r4, #4]
 	ldrh	r1, [r7]
 	cmp	r1, r2
 	ldreq	r2, [fp, #216]
 	streq	r2, [r8, r3, asl #2]
-.L2647:
+.L2648:
 	add	r6, r6, #1
-	b	.L2645
-.L2661:
+	b	.L2646
+.L2662:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
-	ldr	r1, .L2685+12
+	ldr	r1, .L2686+12
 	movw	r3, #1874
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bne	.L2650
+	bne	.L2651
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-	b	.L2650
-.L2644:
+	b	.L2651
+.L2645:
 	ldr	r3, [r5, #-2064]
-	ldr	r0, .L2685+8
+	ldr	r0, .L2686+8
 	str	r3, [r5, #220]
 	add	r3, r9, r1
 	ldrh	r2, [r9, r1]
@@ -16006,26 +16035,26 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r5, #212]
 	cmn	r3, #1
-	beq	.L2663
+	beq	.L2664
 	ldrh	r2, [r7]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L2663
+	bne	.L2664
 	ldrh	r2, [r7, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	bne	.L2663
+	bne	.L2664
 	mov	r1, #0
 	mov	ip, #8
 	mov	lr, #4
-.L2652:
-	ldr	r0, .L2685+4
+.L2653:
+	ldr	r0, .L2686+4
 	uxth	r3, r1
 	sxth	r2, r3
 	ldrh	r0, [r0]
 	sub	r0, r0, #1
 	cmp	r2, r0
-	bge	.L2655
+	bge	.L2656
 	ldr	r0, [r5, #-2064]
 	add	r1, r1, #1
 	ldr	r2, [r0, r2, asl #3]
@@ -16034,18 +16063,18 @@ FtlMapTblRecovery:
 	smlabbcc	r3, r3, ip, lr
 	ldrcc	r3, [r0, r3]
 	strcc	r3, [r8, r2, asl #2]
-	b	.L2652
-.L2663:
-	ldr	ip, .L2685
+	b	.L2653
+.L2664:
+	ldr	ip, .L2686
 	mov	r3, #0
-.L2683:
+.L2684:
 	ldrh	r1, [fp]
 	sxth	r2, r3
 	cmp	r2, r1
-	bge	.L2655
+	bge	.L2656
 	str	r3, [sp, #16]
 	ldr	r3, [sp, #8]
-	ldr	r0, .L2685+8
+	ldr	r0, .L2686+8
 	str	ip, [sp, #12]
 	ldrh	r1, [r3]
 	orr	r2, r2, r1, asl #10
@@ -16053,17 +16082,17 @@ FtlMapTblRecovery:
 	str	r2, [ip, #216]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r3, .L2685+12
+	ldr	r3, .L2686+12
 	ldrb	r2, [r3]	@ zero_extendqisi2
 	cmp	r2, #0
 	ldr	ip, [sp, #12]
 	ldr	r3, [sp, #16]
-	beq	.L2656
+	beq	.L2657
 	ldr	r2, [ip, #224]
 	ldr	r2, [r2, #12]
 	cmp	r2, #0
-	beq	.L2656
-	ldr	r1, .L2685+16
+	beq	.L2657
+	ldr	r1, .L2686+16
 	ldr	r0, [ip, #220]
 	str	r2, [sp, #20]
 	ldrh	r1, [r1]
@@ -16074,26 +16103,26 @@ FtlMapTblRecovery:
 	cmp	r2, r0
 	mvnne	r2, #0
 	strne	r2, [ip, #212]
-.L2656:
-	ldr	r2, .L2685
+.L2657:
+	ldr	r2, .L2686
 	ldr	r2, [r2, #212]
 	cmn	r2, #1
-	beq	.L2657
+	beq	.L2658
 	ldrh	r2, [r7, #8]
 	cmp	r2, r10
-	bcs	.L2657
+	bcs	.L2658
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r7]
 	cmp	r0, r1
 	ldreq	r1, [ip, #216]
 	streq	r1, [r8, r2, asl #2]
-.L2657:
+.L2658:
 	add	r3, r3, #1
-	b	.L2683
-.L2655:
+	b	.L2684
+.L2656:
 	add	r6, r6, #1
-	b	.L2643
-.L2650:
+	b	.L2644
+.L2651:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -16102,9 +16131,9 @@ FtlMapTblRecovery:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2686:
+.L2687:
 	.align	2
-.L2685:
+.L2686:
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1874
 	.word	.LANCHOR2+212
@@ -16122,13 +16151,13 @@ FtlLoadVonderInfo:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	movw	r2, #1892
-	ldr	r3, .L2689
-	ldr	r0, .L2689+4
+	ldr	r3, .L2690
+	ldr	r0, .L2690+4
 	ldrh	r1, [r3, r2]
 	movw	r2, #262
 	strh	r1, [r0, r2]	@ movhi
 	add	r2, r0, #256
-	ldr	r1, .L2689+8
+	ldr	r1, .L2690+8
 	strh	r1, [r2]	@ movhi
 	movw	r1, #1918
 	ldrh	r1, [r3, r1]
@@ -16150,9 +16179,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L2690:
+.L2691:
 	.align	2
-.L2689:
+.L2690:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-3962
@@ -16168,13 +16197,13 @@ FtlLoadMapInfo:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L2693
+	ldr	r0, .L2694
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L2694:
+.L2695:
 	.align	2
-.L2693:
+.L2694:
 	.word	.LANCHOR2-1972
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -16185,7 +16214,7 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2707
+	ldr	r3, .L2708
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
@@ -16197,29 +16226,29 @@ FtlVendorPartWrite:
 	mov	r6, r0
 	str	r3, [sp, #12]
 	str	r2, [sp, #60]
-	ldr	r2, .L2707+4
+	ldr	r2, .L2708+4
 	ldrh	r5, [r2, r1]
 	add	r1, r0, r4
 	movw	r0, #1868
 	ldrh	r2, [r2, r0]
 	cmp	r1, r2
 	mvnhi	r0, #0
-	bhi	.L2696
-	ldr	fp, .L2707+8
+	bhi	.L2697
+	ldr	fp, .L2708+8
 	mov	r5, r6, lsr r5
 	mov	r3, r5, asl #2
 	str	r3, [sp, #8]
 	mov	r7, fp
 	mov	r3, #0
 	str	r3, [sp, #4]
-.L2697:
+.L2698:
 	cmp	r4, #0
-	beq	.L2706
+	beq	.L2707
 	ldr	r2, [sp, #8]
 	mov	r0, r6
 	ldr	r3, [fp, #-1996]
 	ldr	ip, [r3, r2]
-	ldr	r3, .L2707+12
+	ldr	r3, .L2708+12
 	str	ip, [sp, #20]
 	ldrh	r2, [r3]
 	mov	r1, r2
@@ -16236,7 +16265,7 @@ FtlVendorPartWrite:
 	cmpne	ip, #0
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L2699
+	beq	.L2700
 	ldr	r2, [r7, #-2056]
 	mov	r1, #1
 	add	r0, sp, #24
@@ -16246,13 +16275,13 @@ FtlVendorPartWrite:
 	str	r2, [sp, #36]
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L2700
-.L2699:
-	ldr	r2, .L2707+16
+	b	.L2701
+.L2700:
+	ldr	r2, .L2708+16
 	ldr	r0, [r7, #-2056]
 	ldrh	r2, [r2]
 	bl	ftl_memset
-.L2700:
+.L2701:
 	mov	ip, r9, asl #9
 	ldr	r0, [r7, #-2056]
 	uxth	r8, r8
@@ -16263,7 +16292,7 @@ FtlVendorPartWrite:
 	rsb	r4, r9, r4
 	bl	ftl_memcpy
 	mov	r1, r5
-	ldr	r0, .L2707+20
+	ldr	r0, .L2708+20
 	add	r5, r5, #1
 	ldr	r2, [r7, #-2056]
 	add	r6, r6, r9
@@ -16277,23 +16306,23 @@ FtlVendorPartWrite:
 	ldr	r3, [sp, #8]
 	add	r3, r3, #4
 	str	r3, [sp, #8]
-	b	.L2697
-.L2706:
+	b	.L2698
+.L2707:
 	ldr	r0, [sp, #4]
-.L2696:
+.L2697:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2703
+	beq	.L2704
 	bl	__stack_chk_fail
-.L2703:
+.L2704:
 	add	sp, sp, #68
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2708:
+.L2709:
 	.align	2
-.L2707:
+.L2708:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -16310,12 +16339,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L2711
-	ldr	r2, .L2711+4
+	ldr	r3, .L2712
+	ldr	r2, .L2712+4
 	ldr	r1, [r3, #-3748]
 	cmp	r1, r2
 	bxne	lr
-	ldr	r2, .L2711+8
+	ldr	r2, .L2712+8
 	mov	r0, #0
 	mov	r1, #1
 	str	r2, [r3, #-3744]
@@ -16333,7 +16362,7 @@ Ftl_save_ext_data:
 	str	r2, [r3, #-3728]
 	ldr	r2, [r3, #-3836]
 	str	r2, [r3, #-3720]
-	ldr	r2, .L2711+12
+	ldr	r2, .L2712+12
 	ldr	r2, [r2, #4064]
 	str	r2, [r3, #-3716]
 	ldr	r2, [r3, #-3876]
@@ -16348,14 +16377,14 @@ Ftl_save_ext_data:
 	str	r2, [r3, #-3688]
 	ldr	r2, [r3, #-2104]
 	str	r2, [r3, #-3684]
-	ldr	r2, .L2711+16
+	ldr	r2, .L2712+16
 	b	FtlVendorPartWrite
-.L2712:
+.L2713:
 	.align	2
-.L2711:
+.L2712:
 	.word	.LANCHOR2
 	.word	1179929683
-	.word	1342177366
+	.word	1342177367
 	.word	.LANCHOR0
 	.word	.LANCHOR2-3748
 	.fnend
@@ -16369,39 +16398,39 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L2721
-	ldr	r2, .L2721+4
+	ldr	r3, .L2722
+	ldr	r2, .L2722+4
 	ldr	r3, [r3, #1796]
 	cmp	r3, #0
 	moveq	r3, #32
-	beq	.L2714
+	beq	.L2715
 	ldr	r3, [r2, #-3824]
 	cmp	r3, #39
 	movhi	r3, #32
 	movls	r3, #4
-.L2714:
-	ldr	ip, .L2721+8
+.L2715:
+	ldr	ip, .L2722+8
 	ldrh	r1, [ip]
 	cmp	r1, #31
 	addls	r1, r1, #1
 	strlsh	r1, [ip]	@ movhi
 	movls	r3, #1
 	cmp	r0, #0
-	bne	.L2716
+	bne	.L2717
 	ldr	r1, [r2, #-2020]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r3, r3, r0
 	cmp	r1, r3
-	bcc	.L2717
-.L2716:
+	bcc	.L2718
+.L2717:
 	ldr	r3, [r2, #-2020]
 	mov	r0, #64
 	ldr	r1, [r3, #16]
 	str	r1, [r3, #20]
-	ldr	r1, .L2721+12
+	ldr	r1, .L2722+12
 	str	r1, [r3]
-	ldr	r3, .L2721+16
+	ldr	r3, .L2722+16
 	ldr	r2, [r2, #-2020]
 	ldrh	r1, [r3, #-12]
 	mov	r3, r1, asl #9
@@ -16413,12 +16442,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L2717:
+.L2718:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L2722:
+.L2723:
 	.align	2
-.L2721:
+.L2722:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2+296
@@ -16433,7 +16462,7 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2736
+	ldr	r3, .L2737
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, r2
@@ -16445,29 +16474,29 @@ FtlVendorPartRead:
 	mov	r6, r0
 	str	r3, [sp, #12]
 	str	r2, [sp, #52]
-	ldr	r2, .L2736+4
+	ldr	r2, .L2737+4
 	ldrh	r4, [r2, r1]
 	add	r1, r0, r5
 	movw	r0, #1868
 	ldrh	r2, [r2, r0]
 	cmp	r1, r2
 	mvnhi	r0, #0
-	bhi	.L2724
-	ldr	r10, .L2736+8
+	bhi	.L2725
+	ldr	r10, .L2737+8
 	mov	r4, r6, lsr r4
 	mov	r3, r4, asl #2
 	str	r3, [sp, #4]
 	mov	fp, r10
 	mov	r3, #0
 	str	r3, [sp]
-.L2725:
+.L2726:
 	cmp	r5, #0
-	beq	.L2735
+	beq	.L2736
 	ldr	r3, [r10, #-1996]
 	mov	r0, r6
 	ldr	r2, [sp, #4]
 	ldr	r8, [r3, r2]
-	ldr	r3, .L2736+12
+	ldr	r3, .L2737+12
 	ldrh	r9, [r3]
 	mov	r1, r9
 	bl	__aeabi_uidivmod
@@ -16477,7 +16506,7 @@ FtlVendorPartRead:
 	cmp	r9, r5
 	uxthhi	r9, r5
 	cmp	r8, #0
-	beq	.L2727
+	beq	.L2728
 	ldr	r2, [fp, #-2056]
 	mov	r1, #1
 	add	r0, sp, #16
@@ -16494,29 +16523,29 @@ FtlVendorPartRead:
 	mvneq	r3, #0
 	cmp	r2, #256
 	str	r3, [sp]
-	bne	.L2729
+	bne	.L2730
 	mov	r1, r4
 	mov	r2, r8
-	ldr	r0, .L2736+16
+	ldr	r0, .L2737+16
 	bl	printk
-	ldr	r0, .L2736+20
+	ldr	r0, .L2737+20
 	mov	r1, r4
 	ldr	r2, [r10, #-2056]
 	bl	FtlMapWritePage
-.L2729:
+.L2730:
 	ldrh	r8, [sp, #8]
 	mov	r0, r7
 	ldr	r1, [fp, #-2056]
 	mov	r2, r9, asl #9
 	add	r1, r1, r8, asl #9
 	bl	ftl_memcpy
-	b	.L2730
-.L2727:
+	b	.L2731
+.L2728:
 	mov	r0, r7
 	mov	r1, r8
 	mov	r2, r9, asl #9
 	bl	ftl_memset
-.L2730:
+.L2731:
 	ldr	r3, [sp, #4]
 	add	r4, r4, #1
 	rsb	r5, r9, r5
@@ -16524,28 +16553,28 @@ FtlVendorPartRead:
 	add	r3, r3, #4
 	add	r7, r7, r9, asl #9
 	str	r3, [sp, #4]
-	b	.L2725
-.L2735:
+	b	.L2726
+.L2736:
 	ldr	r0, [sp]
-.L2724:
+.L2725:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2732
+	beq	.L2733
 	bl	__stack_chk_fail
-.L2732:
+.L2733:
 	add	sp, sp, #60
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2737:
+.L2738:
 	.align	2
-.L2736:
+.L2737:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1878
-	.word	.LC132
+	.word	.LC133
 	.word	.LANCHOR2+252
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
@@ -16559,33 +16588,33 @@ FtlLoadEctTbl:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #64
-	ldr	r4, .L2741
+	ldr	r4, .L2742
 	sub	r5, r4, #2016
 	ldr	r2, [r4, #-2020]
 	ldrh	r1, [r5, #-12]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #-2020]
 	ldr	r2, [r3]
-	ldr	r3, .L2741+4
+	ldr	r3, .L2742+4
 	cmp	r2, r3
-	beq	.L2739
-	ldr	r1, .L2741+8
-	ldr	r0, .L2741+12
+	beq	.L2740
+	ldr	r1, .L2742+8
+	ldr	r0, .L2742+12
 	bl	printk
 	ldrh	r2, [r5, #-12]
 	ldr	r0, [r4, #-2020]
 	mov	r1, #0
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L2739:
+.L2740:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L2742:
+.L2743:
 	.align	2
-.L2741:
+.L2742:
 	.word	.LANCHOR2
 	.word	1112818501
-	.word	.LC133
+	.word	.LC134
 	.word	.LC76
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
@@ -16599,25 +16628,25 @@ Ftl_load_ext_data:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #0
-	ldr	r4, .L2748
+	ldr	r4, .L2749
 	mov	r1, #1
-	ldr	r2, .L2748+4
+	ldr	r2, .L2749+4
 	bl	FtlVendorPartRead
-	ldr	r5, .L2748+8
+	ldr	r5, .L2749+8
 	ldr	r3, [r4, #-3748]
 	cmp	r3, r5
-	beq	.L2744
-	ldr	r0, .L2748+4
+	beq	.L2745
+	ldr	r0, .L2749+4
 	mov	r1, #0
 	mov	r2, #512
 	bl	ftl_memset
 	str	r5, [r4, #-3748]
-.L2744:
+.L2745:
 	ldr	r2, [r4, #-3748]
-	ldr	r3, .L2748
+	ldr	r3, .L2749
 	cmp	r2, r5
-	ldr	r5, .L2748+12
-	bne	.L2745
+	ldr	r5, .L2749+12
+	bne	.L2746
 	ldr	r2, [r3, #-3660]
 	str	r2, [r3, #-3856]
 	ldr	r2, [r3, #-3656]
@@ -16644,19 +16673,19 @@ Ftl_load_ext_data:
 	str	r2, [r3, #-3824]
 	ldr	r2, [r3, #-3688]
 	str	r2, [r3, #-3752]
-.L2745:
+.L2746:
 	mov	r3, #0
 	ldr	r2, [r4, #-3680]
 	str	r3, [r4, #-2104]
-	ldr	r3, .L2748+16
+	ldr	r3, .L2749+16
 	cmp	r2, r3
-	bne	.L2746
-	ldr	r0, .L2748+20
+	bne	.L2747
+	ldr	r0, .L2749+20
 	mov	r3, #1
-	ldr	r1, .L2748+24
+	ldr	r1, .L2749+24
 	str	r3, [r5, #1796]
 	bl	printk
-.L2746:
+.L2747:
 	movw	r3, #1864
 	ldr	r0, [r4, #-3840]
 	ldrh	r2, [r5, r3]
@@ -16667,16 +16696,16 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #-3832]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L2749:
+.L2750:
 	.align	2
-.L2748:
+.L2749:
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3748
 	.word	1179929683
 	.word	.LANCHOR0
 	.word	305432421
 	.word	.LC76
-	.word	.LC134
+	.word	.LC135
 	.fnend
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	2
@@ -16693,13 +16722,13 @@ FtlMapBlkWriteDumpData:
 	cmp	r3, #0
 	ldr	r1, [r0, #24]
 	ldmeqfd	sp!, {r4, r5, r6, pc}
-	ldr	r2, .L2757
+	ldr	r2, .L2758
 	mov	r3, #0
 	str	r3, [r0, #36]
 	ldr	r3, [r2, #4052]
 	cmp	r3, #0
 	ldmnefd	sp!, {r4, r5, r6, pc}
-	ldr	r3, .L2757+4
+	ldr	r3, .L2758+4
 	sub	r5, r5, #1
 	mov	r6, r0
 	uxth	r5, r5
@@ -16711,26 +16740,26 @@ FtlMapBlkWriteDumpData:
 	ldr	r1, [r1, r5, asl #2]
 	cmp	r1, #0
 	str	r1, [r3, #216]
-	beq	.L2754
+	beq	.L2755
 	mov	r1, #1
 	add	r0, r3, #212
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L2755
-.L2754:
+	b	.L2756
+.L2755:
 	movw	r3, #1882
 	mov	r1, #255
 	ldrh	r2, [r2, r3]
 	bl	ftl_memset
-.L2755:
+.L2756:
 	mov	r0, r6
 	mov	r1, r5
 	ldr	r2, [r4, #220]
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L2758:
+.L2759:
 	.align	2
-.L2757:
+.L2758:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -16746,14 +16775,14 @@ FlashReadFacBbtData:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #44
 	sub	sp, sp, #44
-	ldr	r9, .L2775
+	ldr	r9, .L2776
 	mov	r10, r2
-	ldr	r8, .L2775+4
+	ldr	r8, .L2776+4
 	mov	r5, r0
 	mov	r7, r1
 	ldr	r3, [r9]
 	str	r3, [sp, #36]
-	ldr	r3, .L2775+8
+	ldr	r3, .L2776+8
 	ldrh	r2, [r3, #124]
 	ldrh	r4, [r3, #126]
 	ldr	r3, [r8, #148]
@@ -16766,9 +16795,9 @@ FlashReadFacBbtData:
 	sub	r4, r0, #16
 	mul	fp, r0, r1
 	uxth	r6, r6
-.L2760:
+.L2761:
 	cmp	r6, r4
-	ble	.L2774
+	ble	.L2775
 	mov	r1, #1
 	add	r3, r6, fp
 	mov	r0, sp
@@ -16778,67 +16807,67 @@ FlashReadFacBbtData:
 	bl	FlashReadPages
 	ldr	r3, [sp]
 	cmn	r3, #1
-	beq	.L2761
+	beq	.L2762
 	ldr	r3, [r8, #180]
 	ldrh	r2, [r3]
 	movw	r3, #61664
 	cmp	r2, r3
-	bne	.L2761
+	bne	.L2762
 	cmp	r5, #0
 	moveq	r0, r5
-	beq	.L2762
+	beq	.L2763
 	cmp	r7, #0
-	ldreq	ip, .L2775+4
+	ldreq	ip, .L2776+4
 	moveq	lr, #1
-	beq	.L2763
-.L2765:
+	beq	.L2764
+.L2766:
 	ldr	r1, [r8, #148]
 	mov	r2, r10
 	mov	r0, r5
 	bl	ftl_memcpy
 	mov	r2, #4
-	ldr	r0, .L2775+12
+	ldr	r0, .L2776+12
 	mov	r1, r5
 	mov	r3, r2
 	bl	rknand_print_hex
 	mov	r0, #0
-	b	.L2762
-.L2763:
+	b	.L2763
+.L2764:
 	ldr	r3, [r8, #168]
 	uxth	r4, r7
 	add	r7, r7, #1
 	cmp	r4, r3
-	bcs	.L2765
+	bcs	.L2766
 	ldr	r2, [ip, #148]
 	mov	r1, r4, lsr #5
 	and	r0, r4, #31
 	ldr	r3, [r2, r1, asl #2]
 	orr	r0, r3, lr, asl r0
 	str	r0, [r2, r1, asl #2]
-	b	.L2763
-.L2761:
+	b	.L2764
+.L2762:
 	sub	r6, r6, #1
 	uxth	r6, r6
-	b	.L2760
-.L2774:
+	b	.L2761
+.L2775:
 	mvn	r0, #0
-.L2762:
+.L2763:
 	ldr	r2, [sp, #36]
 	ldr	r3, [r9]
 	cmp	r2, r3
-	beq	.L2767
+	beq	.L2768
 	bl	__stack_chk_fail
-.L2767:
+.L2768:
 	add	sp, sp, #44
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2776:
+.L2777:
 	.align	2
-.L2775:
+.L2776:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC135
+	.word	.LC136
 	.fnend
 	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
 	.align	2
@@ -16848,12 +16877,12 @@ FlashGetBadBlockList:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2788
+	ldr	r3, .L2789
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r5, r0
 	ldr	r3, [r3, #692]
-	ldr	r6, .L2788+4
+	ldr	r6, .L2789+4
 	ldrb	r4, [r3, #13]	@ zero_extendqisi2
 	ldrh	r3, [r3, #14]
 	ldr	r0, [r6, #176]
@@ -16863,20 +16892,20 @@ FlashGetBadBlockList:
 	mov	r2, r2, asr #3
 	bl	FlashReadFacBbtData
 	cmn	r0, #1
-	bne	.L2778
-.L2782:
+	bne	.L2779
+.L2783:
 	mov	r3, #0
-	b	.L2779
-.L2778:
+	b	.L2780
+.L2779:
 	mov	lr, r4, lsr #4
 	mov	ip, #0
 	sub	r4, r4, #1
 	mov	r3, ip
 	mov	r7, #1
-.L2780:
+.L2781:
 	uxth	r0, ip
 	cmp	r0, r4
-	bge	.L2779
+	bge	.L2780
 	ldr	r8, [r6, #176]
 	mov	r1, r0, lsr #5
 	and	r2, r0, #31
@@ -16888,17 +16917,17 @@ FlashGetBadBlockList:
 	strneh	r0, [r5, r3]	@ movhi
 	uxthne	r3, r2
 	cmp	r3, lr
-	bcc	.L2780
-	b	.L2782
-.L2779:
+	bcc	.L2781
+	b	.L2783
+.L2780:
 	mov	r3, r3, asl #1
 	mvn	r2, #0
 	mov	r0, #0
 	strh	r2, [r5, r3]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2789:
+.L2790:
 	.align	2
-.L2788:
+.L2789:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -16914,34 +16943,34 @@ FtlMakeBbt:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r6, .L2814
+	ldr	r6, .L2815
 	ldr	r5, [r6, #4052]
 	cmp	r5, #0
-	bne	.L2791
+	bne	.L2792
 	bl	FtlBbtMemInit
-	ldr	r8, .L2814+4
+	ldr	r8, .L2815+4
 	bl	FtlLoadFactoryBbt
-	ldr	r7, .L2814+8
+	ldr	r7, .L2815+8
 	sub	r9, r8, #18
 	add	r4, r6, #1936
 	mov	r10, r7
-.L2792:
-	ldr	r3, .L2814+12
+.L2793:
+	ldr	r3, .L2815+12
 	ldrh	r3, [r3]
 	cmp	r5, r3
-	bcs	.L2811
+	bcs	.L2812
 	ldrh	r2, [r9, #2]!
 	movw	r3, #65535
 	ldr	r0, [r7, #-2064]
 	ldr	fp, [r7, #-2040]
 	cmp	r2, r3
-	ldr	r3, .L2814+16
+	ldr	r3, .L2815+16
 	str	r0, [r7, #220]
 	str	fp, [r7, #224]
-	beq	.L2793
+	beq	.L2794
 	ldrh	ip, [r3]
 	mov	r1, #1
-	ldr	r0, .L2814+20
+	ldr	r0, .L2815+20
 	str	r3, [sp, #8]
 	mla	ip, ip, r5, r2
 	mov	r2, ip, asl #10
@@ -16957,8 +16986,8 @@ FtlMakeBbt:
 	mov	r2, r2, asr #3
 	bl	ftl_memcpy
 	ldr	ip, [sp, #4]
-	b	.L2794
-.L2793:
+	b	.L2795
+.L2794:
 	mov	r1, r5
 	str	r3, [sp, #4]
 	bl	FlashGetBadBlockList
@@ -16970,7 +16999,7 @@ FtlMakeBbt:
 	sub	r2, r2, #1
 	uxth	r2, r2
 	stmib	sp, {r2, r3}
-.L2795:
+.L2796:
 	ldr	r3, [sp, #8]
 	ldrh	r0, [r3]
 	ldr	r3, [sp, #4]
@@ -16982,15 +17011,15 @@ FtlMakeBbt:
 	subeq	r3, r3, #1
 	uxtheq	r3, r3
 	streq	r3, [sp, #4]
-	beq	.L2795
-.L2812:
+	beq	.L2796
+.L2813:
 	ldrh	r3, [sp, #4]
 	mov	r1, #0
 	mov	r2, #16
 	ldr	r0, [r10, #-2040]
 	strh	r3, [r9]	@ movhi
 	bl	ftl_memset
-	ldr	r3, .L2814+24
+	ldr	r3, .L2815+24
 	strh	r3, [fp]	@ movhi
 	mov	r3, #0
 	str	r3, [fp, #4]
@@ -17004,79 +17033,79 @@ FtlMakeBbt:
 	mla	ip, ip, r5, r3
 	mov	r3, ip, asl #10
 	str	r3, [r10, #216]
-	ldr	r3, .L2814+28
+	ldr	r3, .L2815+28
 	str	ip, [sp, #12]
 	ldrh	r2, [r3]
 	mov	r2, r2, asl #2
 	bl	ftl_memcpy
 	mov	r1, #1
 	mov	r2, r1
-	ldr	r0, .L2814+20
+	ldr	r0, .L2815+20
 	bl	FlashEraseBlocks
 	mov	r1, #1
 	mov	r3, r1
-	ldr	r0, .L2814+20
+	ldr	r0, .L2815+20
 	mov	r2, r1
 	bl	FlashProgPages
 	ldr	r3, [r10, #212]
 	cmn	r3, #1
 	ldr	ip, [sp, #12]
-	bne	.L2794
+	bne	.L2795
 	uxth	r0, ip
 	bl	FtlBbmMapBadBlock
-	b	.L2795
-.L2794:
+	b	.L2796
+.L2795:
 	uxth	r0, ip
 	add	r5, r5, #1
 	bl	FtlBbmMapBadBlock
 	add	r8, r8, #4
-	b	.L2792
-.L2811:
-	ldr	r7, .L2814+32
+	b	.L2793
+.L2812:
+	ldr	r7, .L2815+32
 	mov	r5, #0
-.L2799:
+.L2800:
 	ldrh	r3, [r7]
 	uxth	r0, r5
 	add	r5, r5, #1
 	cmp	r3, r0
-	bls	.L2813
+	bls	.L2814
 	bl	FtlBbmMapBadBlock
-	b	.L2799
-.L2813:
+	b	.L2800
+.L2814:
 	ldrh	r5, [r4, #12]
 	movw	r8, #65535
-	ldr	r7, .L2814+36
+	ldr	r7, .L2815+36
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L2801:
+.L2802:
 	ldrh	r3, [r4, #12]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	ble	.L2805
+	ble	.L2806
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L2802
+	beq	.L2803
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L2803
+	beq	.L2804
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-	b	.L2802
-.L2803:
+	b	.L2803
+.L2804:
 	ldrh	r3, [r7]
 	cmp	r3, r8
 	streqh	r5, [r7]	@ movhi
-.L2804:
-	ldrne	r3, .L2814+36
+.L2805:
+	ldrne	r3, .L2815+36
 	strneh	r5, [r3, #4]	@ movhi
-	bne	.L2805
-.L2802:
+	bne	.L2806
+.L2803:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L2801
-.L2805:
+	b	.L2802
+.L2806:
 	ldr	r0, [r6, #4056]
 	mov	r5, #0
 	ldrh	r3, [r4]
@@ -17104,14 +17133,14 @@ FtlMakeBbt:
 	strh	r2, [r4]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
 	bl	FtlBbmTblFlush
-.L2791:
+.L2792:
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2815:
+.L2816:
 	.align	2
-.L2814:
+.L2815:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1964
 	.word	.LANCHOR2
@@ -17135,13 +17164,13 @@ log2phys:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r3, #1880
-	ldr	r7, .L2833
+	ldr	r7, .L2834
 	ldrh	r10, [r7, r3]
 	ldr	r3, [r7, #1932]
 	cmp	r0, r3
-	bcs	.L2817
+	bcs	.L2818
 	add	r10, r10, #7
-	ldr	fp, .L2833+4
+	ldr	fp, .L2834+4
 	mov	r5, r0, lsr r10
 	movw	r3, #1910
 	str	r2, [sp, #4]
@@ -17153,22 +17182,22 @@ log2phys:
 	ldr	r8, [fp, #-3896]
 	mov	r4, #0
 	mov	r1, #12
-	b	.L2818
-.L2817:
+	b	.L2819
+.L2818:
 	cmp	r2, #0
 	mvn	r0, #0
 	streq	r0, [r1]
-	b	.L2819
-.L2823:
+	b	.L2820
+.L2824:
 	add	r4, r4, #1
 	mla	r0, r1, r4, r8
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r5
-	beq	.L2820
-.L2818:
+	beq	.L2821
+.L2819:
 	uxth	r7, r4
 	cmp	r7, r2
-	bcc	.L2823
+	bcc	.L2824
 	bl	select_l2p_ram_region
 	mov	r4, #12
 	movw	r3, #65535
@@ -17177,13 +17206,13 @@ log2phys:
 	add	r2, r8, r4
 	ldrh	r1, [r8, r4]
 	cmp	r1, r3
-	bne	.L2832
-.L2824:
+	bne	.L2833
+.L2825:
 	ldr	r3, [fp, #-1992]
-	ldr	r8, .L2833+4
+	ldr	r8, .L2834+4
 	ldr	fp, [r3, r5, asl #2]
 	cmp	fp, #0
-	bne	.L2825
+	bne	.L2826
 	ldr	r3, [r8, #-3896]
 	mov	r1, #255
 	add	r3, r3, r4
@@ -17196,23 +17225,23 @@ log2phys:
 	ldr	r3, [r8, #-3896]
 	add	r4, r3, r4
 	str	fp, [r4, #4]
-.L2820:
+.L2821:
 	ldr	r2, [sp]
 	mvn	r3, #0
 	mov	r6, #12
 	bic	r10, r2, r3, asl r10
 	ldr	r3, [sp, #4]
-	ldr	r2, .L2833+4
+	ldr	r2, .L2834+4
 	cmp	r3, #0
 	uxth	r10, r10
-	bne	.L2821
+	bne	.L2822
 	ldr	r3, [r2, #-3896]
 	mla	r6, r6, r7, r3
 	ldr	r3, [r6, #8]
 	ldr	r3, [r3, r10, asl #2]
 	str	r3, [r9]
-	b	.L2822
-.L2821:
+	b	.L2823
+.L2822:
 	mul	r6, r6, r7
 	ldr	r3, [r2, #-3896]
 	ldr	r1, [r9]
@@ -17226,7 +17255,7 @@ log2phys:
 	str	r3, [r6, #4]
 	sub	r3, r2, #3888
 	strh	r5, [r3, #-4]	@ movhi
-.L2822:
+.L2823:
 	ldr	r2, [r2, #-3896]
 	mov	r3, #12
 	mov	r0, #0
@@ -17235,14 +17264,14 @@ log2phys:
 	cmn	r3, #1
 	addne	r3, r3, #1
 	strne	r3, [r7, #4]
-	b	.L2819
-.L2832:
+	b	.L2820
+.L2833:
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L2824
+	bge	.L2825
 	bl	flush_l2p_region
-	b	.L2824
-.L2825:
+	b	.L2825
+.L2826:
 	ldr	r3, [r8, #-3896]
 	mov	r1, #1
 	add	r0, r8, #212
@@ -17257,60 +17286,60 @@ log2phys:
 	ldr	r3, [r8, #224]
 	ldrh	r3, [r3, #8]
 	cmp	r3, r5
-	beq	.L2826
+	beq	.L2827
 	mov	r1, r5
 	mov	r2, fp
-	ldr	r0, .L2833+8
+	ldr	r0, .L2834+8
 	bl	printk
 	mov	r2, #4
 	mov	r3, r2
-	ldr	r0, .L2833+12
+	ldr	r0, .L2834+12
 	ldr	r1, [r8, #224]
 	bl	rknand_print_hex
 	movw	r3, #1908
 	ldrh	r3, [r6, r3]
 	mov	r2, #4
-	ldr	r0, .L2833+16
+	ldr	r0, .L2834+16
 	ldr	r1, [r8, #-1992]
 	bl	rknand_print_hex
 	mov	r3, #1
 	str	r3, [r6, #4052]
-	b	.L2827
-.L2826:
+	b	.L2828
+.L2827:
 	ldr	r3, [r8, #212]
 	cmp	r3, #256
-	bne	.L2827
+	bne	.L2828
 	mov	r1, r5
 	mov	r2, fp
-	ldr	r0, .L2833+20
+	ldr	r0, .L2834+20
 	bl	printk
 	ldr	r3, [r8, #-3896]
-	ldr	r0, .L2833+24
+	ldr	r0, .L2834+24
 	mov	r1, r5
 	add	r3, r3, r4
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-.L2827:
-	ldr	r3, .L2833+4
+.L2828:
+	ldr	r3, .L2834+4
 	mov	r1, #0
 	ldr	r3, [r3, #-3896]
 	add	r2, r3, r4
 	str	r1, [r2, #4]
 	strh	r5, [r3, r4]	@ movhi
-	b	.L2820
-.L2819:
+	b	.L2821
+.L2820:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2834:
+.L2835:
 	.align	2
-.L2833:
+.L2834:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC136
-	.word	.LC100
 	.word	.LC137
+	.word	.LC100
 	.word	.LC138
+	.word	.LC139
 	.word	.LANCHOR2-1972
 	.fnend
 	.size	log2phys, .-log2phys
@@ -17321,38 +17350,38 @@ FtlWriteDumpData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2855
+	ldr	r3, .L2856
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #60
 	sub	sp, sp, #60
 	ldr	r2, [r3]
-	ldr	r8, .L2855+4
+	ldr	r8, .L2856+4
 	str	r3, [sp]
 	str	r2, [sp, #52]
 	ldr	r2, [r8, #4052]
 	cmp	r2, #0
-	bne	.L2835
-	ldr	r7, .L2855+8
-	ldr	r4, .L2855+12
+	bne	.L2836
+	ldr	r7, .L2856+8
+	ldr	r4, .L2856+12
 	ldrh	r5, [r7, #4]
 	cmp	r5, #0
-	beq	.L2837
+	beq	.L2838
 	ldrb	r3, [r4, #-4032]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2837
+	bne	.L2838
 	add	r3, r8, #1872
 	ldrb	r2, [r4, #-4033]	@ zero_extendqisi2
 	ldrh	r3, [r3]
 	mul	r3, r3, r2
 	cmp	r5, r3
-	beq	.L2837
+	beq	.L2838
 	ldrb	r10, [r4, #-4030]	@ zero_extendqisi2
 	movw	r3, #1804
 	ldr	r6, [r8, #1932]
 	cmp	r10, #0
 	ldrh	r9, [r8, r3]
-	bne	.L2835
+	bne	.L2836
 	sub	r6, r6, #1
 	add	r1, sp, #12
 	mov	r2, r10
@@ -17367,35 +17396,35 @@ FtlWriteDumpData:
 	str	r3, [sp, #20]
 	str	r5, [sp, #28]
 	str	r10, [r5, #4]
-	beq	.L2839
+	beq	.L2840
 	mov	r1, #1
 	mov	r2, r10
 	add	r0, sp, #16
 	bl	FlashReadPages
-	b	.L2840
-.L2839:
+	b	.L2841
+.L2840:
 	movw	r3, #1882
 	mov	r1, #255
 	ldrh	r2, [r8, r3]
 	bl	ftl_memset
-.L2840:
-	ldr	r3, .L2855+16
+.L2841:
+	ldr	r3, .L2856+16
 	mov	r8, #0
-	ldr	r10, .L2855+12
+	ldr	r10, .L2856+12
 	mov	r9, r9, asl #2
-	ldr	ip, .L2855+8
+	ldr	ip, .L2856+8
 	mov	fp, r8
 	strh	r3, [r5]	@ movhi
-.L2841:
+.L2842:
 	cmp	r8, r9
-	beq	.L2842
+	beq	.L2843
 	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	beq	.L2842
+	beq	.L2843
 	ldr	r3, [sp, #20]
 	add	r8, r8, #1
 	str	r6, [r5, #8]
-	ldr	r0, .L2855+8
+	ldr	r0, .L2856+8
 	str	r3, [r5, #12]
 	ldrh	r3, [ip]
 	str	ip, [sp, #4]
@@ -17416,28 +17445,28 @@ FtlWriteDumpData:
 	ldrh	r0, [r7]
 	bl	decrement_vpc_count
 	ldr	ip, [sp, #4]
-	b	.L2841
-.L2842:
+	b	.L2842
+.L2843:
 	mov	r3, #1
-	b	.L2854
-.L2837:
+	b	.L2855
+.L2838:
 	mov	r3, #0
-.L2854:
+.L2855:
 	strb	r3, [r4, #-4030]
-.L2835:
+.L2836:
 	ldr	r3, [sp]
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2846
+	beq	.L2847
 	bl	__stack_chk_fail
-.L2846:
+.L2847:
 	add	sp, sp, #60
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2856:
+.L2857:
 	.align	2
-.L2855:
+.L2856:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2-4040
@@ -17456,29 +17485,29 @@ l2p_flush:
 	.save {r3, r4, r5, r6, r7, lr}
 	bl	FtlWriteDumpData
 	mov	r4, #0
-	ldr	r5, .L2863
+	ldr	r5, .L2864
 	mov	r7, #12
-	ldr	r6, .L2863+4
-.L2858:
+	ldr	r6, .L2864+4
+.L2859:
 	ldrh	r3, [r5]
 	uxth	r0, r4
 	cmp	r3, r0
-	bls	.L2862
+	bls	.L2863
 	ldr	r3, [r6, #-3896]
 	mla	r3, r7, r0, r3
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L2859
+	bge	.L2860
 	bl	flush_l2p_region
-.L2859:
+.L2860:
 	add	r4, r4, #1
-	b	.L2858
-.L2862:
+	b	.L2859
+.L2863:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2864:
+.L2865:
 	.align	2
-.L2863:
+.L2864:
 	.word	.LANCHOR0+1910
 	.word	.LANCHOR2
 	.fnend
@@ -17490,102 +17519,102 @@ allocate_new_data_superblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L2892
+	ldr	r1, .L2893
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	ldr	r3, [r1, #4052]
 	ldrh	r5, [r0]
 	cmp	r3, #0
-	bne	.L2866
+	bne	.L2867
 	movw	r3, #65535
 	cmp	r5, r3
 	mov	r7, r1
 	mov	r4, r0
-	ldr	r6, .L2892+4
-	beq	.L2867
+	ldr	r6, .L2893+4
+	beq	.L2868
 	ldr	r2, [r6, #-4060]
 	mov	r3, r5, asl #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L2868
+	beq	.L2869
 	bl	INSERT_DATA_LIST
-	b	.L2867
-.L2868:
+	b	.L2868
+.L2869:
 	bl	INSERT_FREE_LIST
-.L2867:
+.L2868:
 	mov	r3, #0
 	strb	r3, [r4, #8]
-	ldr	r3, .L2892+8
+	ldr	r3, .L2893+8
 	cmp	r4, r3
-	beq	.L2869
-	ldr	r2, .L2892
+	beq	.L2870
+	ldr	r2, .L2893
 	add	r3, r2, #1824
 	ldrh	r3, [r3]
 	cmp	r3, #1
-	beq	.L2869
+	beq	.L2870
 	ldrb	r2, [r2, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L2870
-.L2869:
+	beq	.L2871
+.L2870:
 	mov	r3, #1
 	strb	r3, [r4, #8]
-	b	.L2871
-.L2870:
-	ldr	r2, .L2892+12
+	b	.L2872
+.L2871:
+	ldr	r2, .L2893+12
 	cmp	r4, r2
-	bne	.L2871
+	bne	.L2872
 	cmp	r3, #3
-	beq	.L2873
-	ldr	r3, .L2892+4
+	beq	.L2874
+	ldr	r3, .L2893+4
 	ldr	r3, [r3, #-3752]
 	cmp	r3, #1
-	bne	.L2874
-.L2873:
+	bne	.L2875
+.L2874:
 	mov	r3, #1
 	strb	r3, [r6, #-4032]
-.L2874:
+.L2875:
 	ldr	r3, [r7, #1796]
 	cmp	r3, #0
-	beq	.L2871
+	beq	.L2872
 	ldr	r3, [r6, #-3824]
 	cmp	r3, #39
-	ldrls	r3, .L2892+4
+	ldrls	r3, .L2893+4
 	movls	r2, #1
 	strlsb	r2, [r3, #-4032]
-.L2871:
-	ldr	r2, .L2892+4
+.L2872:
+	ldr	r2, .L2893+4
 	movw	r1, #65535
 	sub	r3, r2, #1920
 	ldrh	r0, [r3]
 	mov	r6, r3
 	cmp	r0, r1
-	beq	.L2876
+	beq	.L2877
 	cmp	r5, r0
-	bne	.L2877
+	bne	.L2878
 	ldr	r2, [r2, #-4060]
 	mov	r3, r0, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L2878
-.L2877:
-	bl	update_vpc_list
+	beq	.L2879
 .L2878:
+	bl	update_vpc_list
+.L2879:
 	mvn	r3, #0
 	strh	r3, [r6]	@ movhi
-.L2876:
+.L2877:
 	mov	r0, r4
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	mov	r0, #0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2866:
+.L2867:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2893:
+.L2894:
 	.align	2
-.L2892:
+.L2893:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3992
@@ -17603,64 +17632,64 @@ FtlCheckVpc:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	mov	r4, #0
-	ldr	r6, .L2916
-	ldr	r1, .L2916+4
-	ldr	r0, .L2916+8
+	ldr	r6, .L2917
+	ldr	r1, .L2917+4
+	ldr	r0, .L2917+8
 	ldr	r3, [r6]
-	ldr	r7, .L2916+12
-	ldr	r5, .L2916+16
+	ldr	r7, .L2917+12
+	ldr	r5, .L2917+16
 	str	r3, [sp, #4]
 	bl	printk
-	ldr	r0, .L2916+16
+	ldr	r0, .L2917+16
 	mov	r1, #0
 	mov	r2, #8192
 	bl	memset
-.L2895:
+.L2896:
 	ldr	r3, [r7, #1932]
 	cmp	r4, r3
-	bcs	.L2914
+	bcs	.L2915
 	mov	r0, r4
 	mov	r1, sp
 	mov	r2, #0
 	bl	log2phys
 	ldr	r0, [sp]
 	cmn	r0, #1
-	beq	.L2896
+	beq	.L2897
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r0, r0, asl #1
 	ldrh	r3, [r5, r0]
 	add	r3, r3, #1
 	strh	r3, [r5, r0]	@ movhi
-.L2896:
+.L2897:
 	add	r4, r4, #1
-	b	.L2895
-.L2914:
-	ldr	r5, .L2916+20
+	b	.L2896
+.L2915:
+	ldr	r5, .L2917+20
 	mov	r4, #0
-	ldr	r8, .L2916+24
+	ldr	r8, .L2917+24
 	add	r9, r5, #300
-.L2898:
+.L2899:
 	ldrh	r3, [r8]
 	uxth	r1, r4
-	ldr	r7, .L2916+20
+	ldr	r7, .L2917+20
 	cmp	r3, r1
-	bls	.L2915
+	bls	.L2916
 	ldr	r2, [r5, #-4060]
 	mov	r3, r1, asl #1
 	ldrh	r2, [r2, r3]
 	ldrh	r3, [r9, r3]
 	cmp	r2, r3
-	beq	.L2899
-	ldr	r0, .L2916+28
+	beq	.L2900
+	ldr	r0, .L2917+28
 	bl	printk
-.L2899:
+.L2900:
 	add	r4, r4, #1
-	b	.L2898
-.L2915:
+	b	.L2899
+.L2916:
 	ldr	r4, [r7, #-4048]
 	cmp	r4, #0
-	beq	.L2894
+	beq	.L2895
 	sub	r3, r7, #4032
 	add	r9, r7, #300
 	mov	r5, #0
@@ -17668,54 +17697,54 @@ FtlCheckVpc:
 	ldrh	r8, [r3, #-12]
 	ldr	r3, [r7, #-4068]
 	rsb	r4, r3, r4
-	ldr	r3, .L2916+32
+	ldr	r3, .L2917+32
 	mov	r4, r4, asr #1
 	mul	r4, r3, r4
 	uxth	r4, r4
-.L2902:
+.L2903:
 	uxth	r3, r5
 	cmp	r3, r8
-	bcs	.L2894
+	bcs	.L2895
 	ldr	r2, [r7, #-4060]
 	mov	r3, r4, asl #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L2903
-	ldr	r0, .L2916+36
+	beq	.L2904
+	ldr	r0, .L2917+36
 	mov	r1, r4
 	ldrh	r3, [r9, r3]
 	bl	printk
-.L2903:
+.L2904:
 	mul	r4, r10, r4
 	ldr	r3, [r7, #-4068]
 	add	r5, r5, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L2902
-.L2894:
+	bne	.L2903
+.L2895:
 	ldr	r2, [sp, #4]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L2906
+	beq	.L2907
 	bl	__stack_chk_fail
-.L2906:
+.L2907:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L2917:
+.L2918:
 	.align	2
-.L2916:
+.L2917:
 	.word	__stack_chk_guard
 	.word	.LANCHOR3+72
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR0
 	.word	.LANCHOR2+300
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1812
-	.word	.LC139
-	.word	-1431655765
 	.word	.LC140
+	.word	-1431655765
+	.word	.LC141
 	.fnend
 	.size	FtlCheckVpc, .-FtlCheckVpc
 	.align	2
@@ -17729,54 +17758,54 @@ Ftlscanalldata:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #32
 	sub	sp, sp, #32
-	ldr	r6, .L2929
+	ldr	r6, .L2930
 	mov	r1, #0
-	ldr	r0, .L2929+4
+	ldr	r0, .L2930+4
 	mov	r4, #0
-	ldr	r8, .L2929+8
+	ldr	r8, .L2930+8
 	ldr	r3, [r6]
-	ldr	r5, .L2929+12
+	ldr	r5, .L2930+12
 	str	r3, [sp, #28]
 	bl	printk
-.L2919:
+.L2920:
 	ldr	r3, [r8, #1932]
 	cmp	r4, r3
-	bcs	.L2928
+	bcs	.L2929
 	mov	r0, r4
 	add	r1, sp, #24
 	mov	r2, #0
 	bl	log2phys
 	ubfx	r3, r4, #0, #11
 	cmp	r3, #0
-	bne	.L2920
-	ldr	r0, .L2929+16
+	bne	.L2921
+	ldr	r0, .L2930+16
 	mov	r1, r4
 	ldr	r2, [sp, #24]
 	bl	printk
-.L2920:
+.L2921:
 	ldr	r3, [sp, #24]
 	cmn	r3, #1
-	beq	.L2922
+	beq	.L2923
 	str	r3, [r5, #216]
 	mov	r2, #0
 	ldr	r3, [r5, #-2064]
 	mov	r1, #1
 	ldr	r7, [r5, #-2040]
-	ldr	r0, .L2929+20
+	ldr	r0, .L2930+20
 	str	r3, [r5, #220]
 	str	r2, [r5, #212]
 	str	r4, [r5, #228]
 	str	r7, [r5, #224]
 	bl	FlashReadPages
 	ldr	r3, [r5, #212]
-	ldr	r2, .L2929+12
+	ldr	r2, .L2930+12
 	cmn	r3, #1
 	cmpne	r3, #256
-	beq	.L2923
+	beq	.L2924
 	ldr	r3, [r7, #8]
 	cmp	r3, r4
-	beq	.L2922
-.L2923:
+	beq	.L2923
+.L2924:
 	ldr	r3, [r2, #224]
 	ldr	r1, [r2, #220]
 	ldr	r0, [r3, #4]
@@ -17788,35 +17817,35 @@ Ftlscanalldata:
 	ldr	r0, [r1]
 	str	r0, [sp, #12]
 	ldr	r1, [r1, #4]
-	ldr	r0, .L2929+24
+	ldr	r0, .L2930+24
 	str	r1, [sp, #16]
 	mov	r1, r4
 	ldr	r2, [r2, #216]
 	ldr	r3, [r3]
 	bl	printk
-.L2922:
+.L2923:
 	add	r4, r4, #1
-	b	.L2919
-.L2928:
+	b	.L2920
+.L2929:
 	ldr	r2, [sp, #28]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L2926
+	beq	.L2927
 	bl	__stack_chk_fail
-.L2926:
+.L2927:
 	add	sp, sp, #32
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2930:
+.L2931:
 	.align	2
-.L2929:
+.L2930:
 	.word	__stack_chk_guard
-	.word	.LC141
+	.word	.LC142
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC142
-	.word	.LANCHOR2+212
 	.word	.LC143
+	.word	.LANCHOR2+212
+	.word	.LC144
 	.fnend
 	.size	Ftlscanalldata, .-Ftlscanalldata
 	.align	2
@@ -17833,20 +17862,20 @@ FtlReUsePrevPpa:
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
-	ldr	r6, .L2941
+	ldr	r6, .L2942
 	ldr	r4, [r6, #-4060]
 	mov	r7, r0, asl #1
 	ldrh	r3, [r4, r7]
 	cmp	r3, #0
 	addne	r3, r3, #1
 	strneh	r3, [r4, r7]	@ movhi
-	bne	.L2933
+	bne	.L2934
 	ldr	r4, [r6, #-4048]
 	cmp	r4, #0
-	beq	.L2933
+	beq	.L2934
 	ldr	r1, [r6, #-4068]
 	sub	r2, r6, #4032
-	ldr	lr, .L2941+4
+	ldr	lr, .L2942+4
 	movw	r9, #65535
 	rsb	r4, r1, r4
 	ldrh	ip, [r2, #-12]
@@ -17855,14 +17884,14 @@ FtlReUsePrevPpa:
 	mul	r4, lr, r4
 	mov	lr, #6
 	uxth	r4, r4
-.L2934:
+.L2935:
 	uxth	r2, r3
 	cmp	r2, ip
-	bcs	.L2933
+	bcs	.L2934
 	cmp	r4, r0
-	bne	.L2935
+	bne	.L2936
 	mov	r1, r4
-	ldr	r0, .L2941+8
+	ldr	r0, .L2942+8
 	bl	List_remove_node
 	ldrh	r3, [r8, #-12]
 	mov	r0, r4
@@ -17873,14 +17902,14 @@ FtlReUsePrevPpa:
 	ldrh	r3, [r2, r7]
 	add	r3, r3, #1
 	strh	r3, [r2, r7]	@ movhi
-	b	.L2933
-.L2935:
+	b	.L2934
+.L2936:
 	mul	r4, lr, r4
 	add	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, r9
-	bne	.L2934
-.L2933:
+	bne	.L2935
+.L2934:
 	mov	r0, r5
 	add	r1, sp, #4
 	mov	r2, #1
@@ -17888,9 +17917,9 @@ FtlReUsePrevPpa:
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
-.L2942:
+.L2943:
 	.align	2
-.L2941:
+.L2942:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.word	.LANCHOR2-4048
@@ -17903,7 +17932,7 @@ FtlRecoverySuperblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3099
+	ldr	r3, .L3104
 	movw	r2, #65535
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -17914,57 +17943,57 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #60]
 	ldrh	r3, [r0]
 	cmp	r3, r2
-	beq	.L2945
+	beq	.L2946
 	ldrh	r3, [r0, #2]
 	str	r3, [sp, #8]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp, #8]
 	str	r3, [sp, #28]
-	ldr	r3, .L3099+4
+	ldr	r3, .L3104+4
 	ldrh	r3, [r3]
 	cmp	r3, r1
 	mov	r3, #0
 	streqh	r3, [r0, #4]	@ movhi
 	ldrneh	r0, [r0, #16]
-	beq	.L3091
-.L2947:
+	beq	.L3096
+.L2948:
 	cmp	r0, r2
 	add	r3, r3, #1
 	uxtheq	r1, r3
 	addeq	r1, r4, r1, asl #1
 	ldreqh	r0, [r1, #16]
-	beq	.L2947
-.L3094:
+	beq	.L2948
+.L3099:
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	cmp	r1, #1
-	bne	.L2949
+	bne	.L2950
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r5, r0
-	beq	.L2950
-	ldr	r3, .L3099+8
+	beq	.L2951
+	ldr	r3, .L3104+8
 	ldrb	r2, [r3, #140]	@ zero_extendqisi2
 	cmp	r2, #0
 	addeq	r3, r3, r0, asl #1
 	ldreqh	r7, [r3, #144]
-	beq	.L3020
-	b	.L3084
-.L2949:
+	beq	.L3022
+	b	.L3089
+.L2950:
 	mov	r1, #0
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r5, r0
-	beq	.L2950
-.L3084:
+	beq	.L2951
+.L3089:
 	mov	r7, r5
-.L3020:
-	ldr	r3, .L3099+8
+.L3022:
+	ldr	r3, .L3104+8
 	movw	r2, #1804
 	movw	r8, #65535
 	mov	r9, #36
 	ldrh	r2, [r3, r2]
 	str	r2, [sp, #4]
-	ldr	r2, .L3099+12
+	ldr	r2, .L3104+12
 	ldr	r1, [r2, #-2076]
 	ldr	ip, [r2, #-3208]
 	movw	r2, #1884
@@ -17976,17 +18005,17 @@ FtlRecoverySuperblock:
 	mov	r0, r3
 	mov	r6, r2
 	mov	r10, r2
-	b	.L2952
-.L2950:
+	b	.L2953
+.L2951:
 	mov	r3, #0
 	strh	r3, [r4, #2]	@ movhi
-.L3091:
+.L3096:
 	strb	r3, [r4, #6]
-	b	.L2945
-.L2954:
+	b	.L2946
+.L2955:
 	ldrh	r3, [r0, #2]!
 	cmp	r3, r8
-	beq	.L2953
+	beq	.L2954
 	ldr	r1, [sp, #12]
 	orr	r3, r7, r3, asl #10
 	mla	r1, r9, r6, r1
@@ -18000,23 +18029,23 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, ip, r3
 	str	r3, [r1, #12]
-.L2953:
+.L2954:
 	add	r2, r2, #1
-.L2952:
+.L2953:
 	ldr	r1, [sp, #4]
 	uxth	r3, r2
 	cmp	r3, r1
-	bcc	.L2954
+	bcc	.L2955
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
 	movne	r3, #0
-	bne	.L3085
-	ldr	r3, .L3099+8
+	bne	.L3090
+	ldr	r3, .L3104+8
 	ldrb	r1, [r3, #140]	@ zero_extendqisi2
 	adds	r3, r1, #0
 	movne	r3, #1
-.L3085:
-	ldr	r8, .L3099+12
+.L3090:
+	ldr	r8, .L3104+12
 	mov	r1, r6
 	str	r3, [sp, #24]
 	mov	fp, #0
@@ -18028,21 +18057,21 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #36]
 	movw	r3, #65535
 	str	r3, [sp, #16]
-.L2956:
+.L2957:
 	uxth	r9, fp
 	cmp	r9, r6
-	bcs	.L2963
+	bcs	.L2964
 	mov	r1, #36
 	ldr	r0, [r8, #-2076]
 	mul	r1, r1, fp
 	add	ip, r0, r1
 	ldr	r1, [r0, r1]
 	cmp	r1, #0
-	bne	.L2957
+	bne	.L2958
 	ldr	ip, [ip, #12]
 	ldr	r10, [ip, #4]
 	cmn	r10, #1
-	beq	.L2958
+	beq	.L2959
 	mov	r0, r10
 	ldr	r1, [r8, #-3844]
 	str	ip, [sp, #4]
@@ -18051,33 +18080,33 @@ FtlRecoverySuperblock:
 	cmp	r0, #0
 	addne	r10, r10, #1
 	strne	r10, [r8, #-3844]
-.L2958:
+.L2959:
 	ldr	r1, [ip]
 	cmn	r1, #1
-	bne	.L2959
-.L2963:
+	bne	.L2960
+.L2964:
 	cmp	r9, r6
-	ldr	r6, .L3099+12
-	bne	.L3081
+	ldr	r6, .L3104+12
+	bne	.L3086
 	add	r5, r5, #1
 	uxth	r3, r5
 	str	r3, [sp, #4]
 	ldr	r3, [r6, #-2076]
 	ldr	r0, [r3, #4]
-	b	.L3086
-.L2957:
+	b	.L3091
+.L2958:
 	ldr	r1, [ip, #4]
-	ldr	r0, .L3099+16
+	ldr	r0, .L3104+16
 	bl	printk
 	uxth	r3, r7
 	ldrh	r1, [r4]
 	str	r3, [sp, #16]
-	ldr	r3, .L3099+20
+	ldr	r3, .L3104+20
 	strh	r1, [r3]	@ movhi
-.L2959:
+.L2960:
 	add	fp, fp, #1
-	b	.L2956
-.L3081:
+	b	.L2957
+.L3086:
 	uxth	r3, r5
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #12]
@@ -18085,22 +18114,22 @@ FtlRecoverySuperblock:
 	ldr	r3, [r3, #-2076]
 	mla	r9, r2, r9, r3
 	ldr	r0, [r9, #4]
-.L3086:
+.L3091:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
 	str	r0, [sp, #12]
-	bne	.L2965
-	ldr	r2, .L3099+8
+	bne	.L2966
+	ldr	r2, .L3104+8
 	ldrb	r1, [r2, #140]	@ zero_extendqisi2
 	cmp	r1, #0
 	ldreq	r1, [sp, #4]
 	addeq	r2, r2, r1, asl #1
 	ldreqh	r2, [r2, #144]
 	streq	r2, [sp, #4]
-.L2965:
-	ldr	r2, .L3099+4
+.L2966:
+	ldr	r2, .L3104+4
 	ldr	r1, [sp, #4]
 	ldr	r0, [sp, #12]
 	ldrh	r2, [r2]
@@ -18119,7 +18148,7 @@ FtlRecoverySuperblock:
 	cmpeq	r0, ip
 	moveq	r0, r4
 	moveq	r1, r2
-	beq	.L3092
+	beq	.L3097
 	clz	r3, r3
 	ldr	r2, [sp, #36]
 	ldr	r1, [sp, #16]
@@ -18129,14 +18158,14 @@ FtlRecoverySuperblock:
 	cmp	r1, r2
 	orrne	r3, r3, #1
 	cmp	r3, #0
-	beq	.L2969
+	beq	.L2970
 	ldr	r3, [r6, #-1908]
 	uxth	fp, r7
-	ldr	r8, .L3099+12
+	ldr	r8, .L3104+12
 	mvn	r9, #0
 	cmn	r3, #1
 	mov	r7, r9
-	ldreq	r3, .L3099+12
+	ldreq	r3, .L3104+12
 	streq	r10, [r3, #-1908]
 	ldr	r3, [r6, #-1908]
 	str	r3, [sp, #16]
@@ -18146,10 +18175,10 @@ FtlRecoverySuperblock:
 	subgt	r5, fp, #7
 	ldrle	r5, [sp, #8]
 	uxthgt	r5, r5
-.L2972:
+.L2973:
 	cmp	r5, fp
-	bhi	.L2985
-	ldr	r3, .L3099+24
+	bhi	.L2986
+	ldr	r3, .L3104+24
 	mov	r0, #36
 	ldr	lr, [r8, #-2076]
 	ldr	r1, [sp, #20]
@@ -18157,11 +18186,11 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #28]
 	mov	r3, #0
 	mov	r6, r3
-.L2986:
+.L2987:
 	ldr	ip, [sp, #28]
 	uxth	r2, r3
 	cmp	r2, ip
-	bcs	.L3095
+	bcs	.L3100
 	ldrh	r2, [r1, #2]!
 	movw	ip, #65535
 	add	r3, r3, #1
@@ -18171,151 +18200,151 @@ FtlRecoverySuperblock:
 	addne	r6, r6, #1
 	uxthne	r6, r6
 	strne	r2, [ip, #4]
-	b	.L2986
-.L3095:
+	b	.L2987
+.L3100:
 	mov	r1, r6
 	ldr	r2, [sp, #24]
 	ldr	r0, [r8, #-2076]
 	bl	FlashReadPages
-	ldr	r3, .L3099+8
+	ldr	r3, .L3104+8
 	mov	r2, #36
 	movw	r1, #65535
 	ldrb	ip, [r3, #140]	@ zero_extendqisi2
 	ldr	r3, [r8, #-2076]
 	mla	r6, r2, r6, r3
-	ldr	r2, .L3099+28
+	ldr	r2, .L3104+28
 	add	r2, r2, r5, asl #1
-.L2975:
+.L2976:
 	cmp	r3, r6
-	beq	.L3096
+	beq	.L3101
 	ldr	r0, [r3]
 	cmp	r0, #0
-	bne	.L2976
+	bne	.L2977
 	ldr	r0, [r3, #12]
 	ldrh	lr, [r0]
 	cmp	lr, r1
-	beq	.L2977
+	beq	.L2978
 	ldr	r0, [r0, #4]
 	cmn	r0, #1
-	beq	.L2977
+	beq	.L2978
 	cmn	r9, #1
 	ldr	r7, [r8, #-1908]
 	str	r0, [r8, #-1908]
-	bne	.L2977
+	bne	.L2978
 	ldrh	r0, [r2]
 	cmp	r0, r1
-	bne	.L2978
+	bne	.L2979
 	cmp	ip, #0
-	beq	.L2977
-.L2978:
+	beq	.L2978
+.L2979:
 	cmp	r7, r10
 	mvneq	r9, #0
 	movne	r9, r7
-	b	.L2977
-.L2976:
-	ldr	r3, .L3099+20
+	b	.L2978
+.L2977:
+	ldr	r3, .L3104+20
 	ldrh	r2, [r4]
 	strh	r2, [r3]	@ movhi
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2969
-	ldr	r3, .L3099+12
+	bne	.L2970
+	ldr	r3, .L3104+12
 	mov	r5, r5, asl #1
 	sub	r2, r3, #3136
 	ldrh	r1, [r2, r5]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L2980
+	bne	.L2981
 	cmn	r9, #1
 	strne	r9, [r3, #-1908]
-	bne	.L2969
+	bne	.L2970
 	ldr	r2, [sp, #16]
 	cmp	r2, r10
-	bne	.L3087
+	bne	.L3092
 	ldr	r2, [r3, #-1908]
-	b	.L3093
-.L2980:
+	b	.L3098
+.L2981:
 	cmp	r7, r10
-	beq	.L2983
+	beq	.L2984
 	cmn	r7, #1
 	strne	r7, [r3, #-1908]
-	b	.L2969
-.L2983:
+	b	.L2970
+.L2984:
 	ldr	r2, [r3, #-1908]
 	cmp	r2, r10
-	beq	.L2969
-.L3093:
+	beq	.L2970
+.L3098:
 	sub	r2, r2, #1
-	b	.L3087
-.L2977:
+	b	.L3092
+.L2978:
 	add	r3, r3, #36
-	b	.L2975
-.L3096:
+	b	.L2976
+.L3101:
 	add	r5, r5, #1
 	uxth	r5, r5
-	b	.L2972
-.L2985:
-	ldr	r3, .L3099+12
+	b	.L2973
+.L2986:
+	ldr	r3, .L3104+12
 	mvn	r2, #0
-.L3087:
+.L3092:
 	str	r2, [r3, #-1908]
-.L2969:
-	ldr	r2, .L3099+32
+.L2970:
+	ldr	r2, .L3104+32
 	movw	r3, #310
 	ldr	fp, [sp, #8]
 	mov	r1, #1
-	ldr	r5, .L3099+12
+	ldr	r5, .L3104+12
 	strh	r1, [r2, r3]	@ movhi
-.L2987:
-	ldr	r3, .L3099+24
+.L2988:
+	ldr	r3, .L3104+24
 	movw	r1, #65535
 	ldr	r9, [r5, #-2076]
 	mov	r0, #36
 	ldr	r7, [sp, #20]
 	mov	r6, #0
 	ldrh	r8, [r3]
-	ldr	r3, .L3099+8
+	ldr	r3, .L3104+8
 	str	r6, [sp, #16]
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	str	r3, [sp, #28]
-.L2988:
+.L2989:
 	uxth	r3, r6
 	cmp	r3, r8
-	bcs	.L3097
+	bcs	.L3102
 	ldrh	r3, [r7, #2]!
 	cmp	r3, r1
-	beq	.L2989
+	beq	.L2990
 	ldr	r2, [sp, #16]
 	orr	r3, fp, r3, asl #10
 	mla	r2, r0, r2, r9
 	str	r3, [r2, #4]
 	ldrb	ip, [r4, #8]	@ zero_extendqisi2
 	cmp	ip, #1
-	bne	.L2990
+	bne	.L2991
 	ldr	ip, [sp, #28]
 	cmp	ip, #0
 	orrne	r3, r3, #-2147483648
 	strne	r3, [r2, #4]
-.L2990:
+.L2991:
 	ldr	r3, [sp, #16]
 	add	lr, r3, #1
 	uxth	r3, lr
 	str	r3, [sp, #16]
-.L2989:
+.L2990:
 	add	r6, r6, #1
-	b	.L2988
-.L3097:
+	b	.L2989
+.L3102:
 	ldr	r0, [r5, #-2076]
 	ldr	r1, [sp, #16]
 	ldr	r2, [sp, #24]
 	bl	FlashReadPages
 	mov	r3, #0
-.L3090:
+.L3095:
 	str	r3, [sp, #28]
 	ldr	r2, [sp, #16]
 	ldrh	r3, [sp, #28]
 	cmp	r3, r2
-	bcs	.L3098
+	bcs	.L3103
 	ldr	r3, [sp, #28]
 	mov	r6, #36
 	ldr	r9, [r5, #-2076]
@@ -18327,7 +18356,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp, #8]
 	cmp	fp, r3
-	bcc	.L2993
+	bcc	.L2994
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #8]
 	cmp	r0, r3
@@ -18336,31 +18365,31 @@ FtlRecoverySuperblock:
 	cmp	fp, r2
 	movne	r3, #0
 	cmp	r3, #0
-	bne	.L2993
+	bne	.L2994
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #4]
 	cmp	r0, r3
 	cmpeq	fp, r2
-	beq	.L2994
+	beq	.L2995
 	ldr	r3, [r9, r6]
 	cmn	r3, #1
-	beq	.L2995
+	beq	.L2996
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
 	ldrneh	r0, [r4]
-	bne	.L3088
+	bne	.L3093
 	ldr	r10, [r8, #4]
 	cmn	r10, #1
-	beq	.L2997
+	beq	.L2998
 	ldr	r1, [r5, #-3844]
 	mov	r0, r10
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
 	addne	r3, r10, #1
 	strne	r3, [r5, #-3844]
-.L2997:
+.L2998:
 	ldr	r7, [r8, #8]
 	add	r1, sp, #52
 	ldr	r3, [r8, #12]
@@ -18370,14 +18399,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r5, #-1908]
 	cmn	r1, #1
-	beq	.L2998
+	beq	.L2999
 	mov	r0, r10
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L2998
+	beq	.L2999
 	ldr	r3, [sp, #48]
 	cmn	r3, #1
-	beq	.L2999
+	beq	.L3000
 	ldr	r0, [r5, #-2076]
 	mov	r2, #0
 	mov	r1, #1
@@ -18391,22 +18420,22 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #36]
 	ldr	r3, [r2, r6]
 	cmn	r3, #1
-	bne	.L3000
-	b	.L3001
-.L2999:
+	bne	.L3001
+	b	.L3002
+.L3000:
 	ldr	r3, [sp, #56]
 	ldr	r2, [sp, #52]
 	cmp	r2, r3
-	bne	.L2993
+	bne	.L2994
 	mov	r0, r7
 	add	r1, sp, #48
 	mov	r2, #1
 	bl	log2phys
-	b	.L2993
-.L3000:
+	b	.L2994
+.L3001:
 	ldr	r8, [r9, #8]
 	cmp	r8, r7
-	bne	.L3001
+	bne	.L3002
 	ldr	r0, [r5, #-1908]
 	ldr	r1, [sp, #36]
 	str	r2, [sp, #44]
@@ -18415,85 +18444,84 @@ FtlRecoverySuperblock:
 	cmp	r0, #0
 	ldr	ip, [sp, #40]
 	ldr	r2, [sp, #44]
-	beq	.L3001
+	beq	.L3002
 	ldr	r3, [sp, #52]
 	ldr	r1, [sp, #56]
 	cmp	r3, r1
-	beq	.L3006
+	beq	.L3007
 	ldr	r1, [sp, #48]
 	cmp	r3, r1
-	beq	.L3001
+	beq	.L3002
 	cmn	r3, #1
 	streq	r3, [r2, r6]
-	beq	.L3005
+	beq	.L3006
 	str	r3, [ip, #4]
 	mov	r0, ip
 	mov	r1, #1
 	mov	r2, #0
 	ldr	r9, [ip, #12]
 	bl	FlashReadPages
-.L3005:
+.L3006:
 	ldr	r3, [r5, #-2076]
 	ldr	r3, [r3, r6]
 	cmn	r3, #1
-	beq	.L3006
+	beq	.L3007
 	ldr	r6, [r9, #4]
 	ldr	r0, [r5, #-1908]
 	mov	r1, r6
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L3006
+	beq	.L3007
 	ldr	r0, [sp, #36]
 	mov	r1, r6
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L3001
-.L3006:
+	beq	.L3002
+.L3007:
 	mov	r0, r8
 	ldr	r1, [sp, #48]
 	bl	FtlReUsePrevPpa
-.L3001:
+.L3002:
 	mvn	r3, #0
 	str	r3, [sp, #48]
-	b	.L3008
-.L2998:
+	b	.L3009
+.L2999:
 	ldr	r3, [sp, #56]
 	ldr	r2, [sp, #52]
 	cmp	r2, r3
-	beq	.L3008
+	beq	.L3009
 	ldr	r3, [sp, #48]
-	ldr	r2, .L3099+8
-	mov	r1, r3, lsr #10
-	adds	r3, r3, #1
+	cmn	r3, #1
+	beq	.L3011
+	ldr	r2, .L3104+8
+	ubfx	r3, r3, #10, #21
 	ldr	r2, [r2, #1820]
-	movne	r3, #1
-	cmp	r1, r2
-	movcc	r3, #0
-	cmp	r3, #0
-	bne	.L2993
+	cmp	r3, r2
+	bcs	.L2994
+.L3011:
 	mov	r0, r7
 	add	r1, sp, #56
 	mov	r2, #1
 	bl	log2phys
 	ldr	r6, [sp, #52]
 	cmn	r6, #1
-	beq	.L3008
+	beq	.L3009
 	ldr	r3, [sp, #48]
 	cmp	r6, r3
-	beq	.L3008
+	beq	.L3009
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, .L3099+36
+	ldr	r3, .L3104+36
 	ldrh	r2, [r3]
 	cmp	r2, r0
-	beq	.L3011
+	beq	.L3013
 	ldrh	r2, [r3, #48]
 	cmp	r2, r0
-	beq	.L3011
+	beq	.L3013
 	ldrh	r3, [r3, #96]
 	cmp	r3, r0
-	bne	.L3008
-.L3011:
+	bne	.L3009
+.L3013:
 	ldr	r0, [r5, #-2076]
 	mov	r1, #1
 	mov	r2, #0
@@ -18504,19 +18532,19 @@ FtlRecoverySuperblock:
 	ldr	r1, [r8, #4]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L3008
+	beq	.L3009
 	mov	r0, r10
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L3008
+	bne	.L3009
 	mov	r0, r7
 	add	r1, sp, #52
 	mov	r2, #1
 	bl	log2phys
-.L3008:
+.L3009:
 	ldr	r0, [sp, #48]
 	cmn	r0, #1
-	beq	.L2993
+	beq	.L2994
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r5, #-4060]
@@ -18524,124 +18552,124 @@ FtlRecoverySuperblock:
 	mov	r1, r0
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L3012
-.L3088:
+	beq	.L3014
+.L3093:
 	bl	decrement_vpc_count
-	b	.L2993
-.L3012:
-	ldr	r0, .L3099+40
+	b	.L2994
+.L3014:
+	ldr	r0, .L3104+40
 	bl	printk
-	b	.L2993
-.L2995:
+	b	.L2994
+.L2996:
 	ldrh	r2, [r4]
 	mov	r1, r7
-	ldr	r3, .L3099+20
-	ldr	r0, .L3099+44
+	ldr	r3, .L3104+20
+	ldr	r0, .L3104+44
 	strh	r2, [r3]	@ movhi
 	mov	r2, r10
 	bl	printk
-	ldr	r3, .L3099+32
+	ldr	r3, .L3104+32
 	ldr	r3, [r3, #312]
 	cmp	r3, #31
-	bhi	.L3013
-	ldr	r2, .L3099+32
+	bhi	.L3015
+	ldr	r2, .L3104+32
 	ldr	r1, [sp, #56]
 	add	r2, r2, r3, asl #2
 	add	r3, r3, #1
 	str	r1, [r2, #316]
-	ldr	r2, .L3099+32
+	ldr	r2, .L3104+32
 	str	r3, [r2, #312]
-.L3013:
+.L3015:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
 	ldr	r3, [r5, #-1908]
 	cmn	r3, #1
-	beq	.L3089
+	beq	.L3094
 	cmp	r3, r10
-	bls	.L2993
-.L3089:
+	bls	.L2994
+.L3094:
 	str	r10, [r5, #-1908]
-.L2993:
+.L2994:
 	ldr	r3, [sp, #28]
 	add	r3, r3, #1
-	b	.L3090
-.L3098:
+	b	.L3095
+.L3103:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	add	fp, fp, #1
 	cmp	r3, #1
 	uxth	fp, fp
-	bne	.L3016
-	ldr	r3, .L3099+8
+	bne	.L3018
+	ldr	r3, .L3104+8
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3016
-	ldr	r3, .L3099+48
+	beq	.L3018
+	ldr	r3, .L3104+48
 	ldr	r2, [sp, #4]
 	ldrh	r3, [r3]
 	cmp	r2, fp
 	cmpeq	r3, fp
-	beq	.L2994
-.L3016:
-	ldr	r2, .L3099+8
+	beq	.L2995
+.L3018:
+	ldr	r2, .L3104+8
 	add	r3, r2, #1872
 	ldrh	r3, [r3]
 	cmp	fp, r3
-	bne	.L2987
+	bne	.L2988
 	movw	r1, #1804
 	movw	r0, #65535
 	ldrh	r1, [r2, r1]
 	mov	r3, #0
 	strh	fp, [r4, #2]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
-.L3017:
+.L3019:
 	uxth	r2, r3
 	cmp	r2, r1
-	bcs	.L2945
+	bcs	.L2946
 	ldr	lr, [sp, #20]
 	add	r3, r3, #1
 	ldrh	ip, [lr, #2]!
 	cmp	ip, r0
 	str	lr, [sp, #20]
-	beq	.L3017
+	beq	.L3019
 	strb	r2, [r4, #6]
-	b	.L2945
-.L2994:
+	b	.L2946
+.L2995:
 	ldrb	r3, [sp, #12]	@ zero_extendqisi2
 	mov	r0, r4
 	ldr	r1, [sp, #4]
 	strb	r3, [r4, #6]
 	ldrh	r3, [sp, #4]
 	strh	r3, [r4, #2]	@ movhi
-.L3092:
+.L3097:
 	ldr	r2, [sp, #12]
 	bl	ftl_sb_update_avl_pages
-.L2945:
-	ldr	r3, .L3099
+.L2946:
+	ldr	r3, .L3104
 	mov	r0, #0
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3021
+	beq	.L3023
 	bl	__stack_chk_fail
-.L3021:
+.L3023:
 	add	sp, sp, #68
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3100:
+.L3105:
 	.align	2
-.L3099:
+.L3104:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0+1872
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC144
+	.word	.LC145
 	.word	.LANCHOR4+308
 	.word	.LANCHOR0+1804
 	.word	.LANCHOR2-3136
 	.word	.LANCHOR4
 	.word	.LANCHOR2-4040
-	.word	.LC145
 	.word	.LC146
+	.word	.LC147
 	.word	.LANCHOR0+1874
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
@@ -18656,12 +18684,12 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	mov	r4, #0
-	ldr	r7, .L3118
-	ldr	r5, .L3118+4
-	ldr	r1, .L3118+8
+	ldr	r7, .L3123
+	ldr	r5, .L3123+4
+	ldr	r1, .L3123+8
 	ldr	r3, [r7]
-	ldr	r0, .L3118+12
-	ldr	r6, .L3118+16
+	ldr	r0, .L3123+12
+	ldr	r6, .L3123+16
 	str	r3, [sp, #4]
 	bl	printk
 	movw	r3, #1814
@@ -18670,17 +18698,17 @@ FtlVpcCheckAndModify:
 	ldr	r0, [r6, #-2016]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
-.L3102:
+.L3107:
 	ldr	r3, [r5, #1932]
 	cmp	r4, r3
-	bcs	.L3116
+	bcs	.L3121
 	mov	r0, r4
 	mov	r1, sp
 	mov	r2, #0
 	bl	log2phys
 	ldr	r0, [sp]
 	cmn	r0, #1
-	beq	.L3103
+	beq	.L3108
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r6, #-2016]
@@ -18688,18 +18716,18 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L3103:
+.L3108:
 	add	r4, r4, #1
-	b	.L3102
-.L3116:
-	ldr	r10, .L3118+20
+	b	.L3107
+.L3121:
+	ldr	r10, .L3123+20
 	mov	r8, #0
-	ldr	r9, .L3118+16
-.L3105:
+	ldr	r9, .L3123+16
+.L3110:
 	ldrh	r3, [r10]
 	uxth	r4, r8
 	cmp	r3, r4
-	bls	.L3117
+	bls	.L3122
 	ldr	r3, [r6, #-4060]
 	mov	r5, r4, asl #1
 	movw	r1, #65535
@@ -18708,54 +18736,54 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r3, r5]
 	cmp	r2, r3
 	cmpne	r2, r1
-	beq	.L3107
-	ldr	r0, .L3118+24
+	beq	.L3112
+	ldr	r0, .L3123+24
 	mov	r1, r4
 	bl	printk
-	ldr	r3, .L3118+28
+	ldr	r3, .L3123+28
 	ldrh	r2, [r3]
 	cmp	r2, r4
-	beq	.L3107
+	beq	.L3112
 	ldrh	r2, [r3, #96]
 	cmp	r2, r4
-	beq	.L3107
+	beq	.L3112
 	ldrh	r3, [r3, #48]
 	cmp	r3, r4
-	beq	.L3107
+	beq	.L3112
 	ldr	r3, [r9, #-4060]
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	ldr	r2, [r9, #-2016]
 	ldrh	r2, [r2, r5]
 	strh	r2, [r3, r5]	@ movhi
-	beq	.L3107
+	beq	.L3112
 	mov	r0, r4
 	bl	update_vpc_list
-.L3107:
+.L3112:
 	add	r8, r8, #1
-	b	.L3105
-.L3117:
+	b	.L3110
+.L3122:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	r2, [sp, #4]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L3111
+	beq	.L3116
 	bl	__stack_chk_fail
-.L3111:
+.L3116:
 	add	sp, sp, #8
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L3119:
+.L3124:
 	.align	2
-.L3118:
+.L3123:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR3+84
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1812
-	.word	.LC147
+	.word	.LC148
 	.word	.LANCHOR2-4040
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
@@ -18766,50 +18794,50 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 72
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3168
+	ldr	r3, .L3173
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
 	ldr	r3, [r3]
 	mov	r4, r0
-	ldr	r2, .L3168+4
+	ldr	r2, .L3173+4
 	str	r1, [sp, #12]
 	str	r3, [sp, #68]
 	movw	r3, #3288
 	ldrh	r5, [r2, r3]
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L3152
+	beq	.L3157
 	cmp	r5, #0
-	bne	.L3121
-	b	.L3122
-.L3152:
+	bne	.L3126
+	b	.L3127
+.L3157:
 	mov	r5, #0
-.L3121:
-	ldr	r3, .L3168+8
+.L3126:
+	ldr	r3, .L3173+8
 	ldr	r2, [sp, #12]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L3123
-.L3122:
+	bne	.L3128
+.L3127:
 	bl	FtlGcPageVarInit
-.L3123:
-	ldr	r6, .L3168+12
+.L3128:
+	ldr	r6, .L3173+12
 	mvn	r3, #0
 	str	r3, [sp, #8]
 	mov	r3, #0
 	str	r3, [sp]
-.L3124:
+.L3129:
 	ldrh	r2, [r4]
 	mov	r3, #0
 	strb	r3, [r4, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L3125
-.L3126:
-.L3148:
-	ldr	r3, .L3168+16
+	beq	.L3130
+.L3131:
+.L3153:
+	ldr	r3, .L3173+16
 	mov	r2, #0
 	ldr	lr, [r6, #-3208]
 	add	r0, r4, #14
@@ -18822,17 +18850,17 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #16]
 	ldr	r3, [r6, #-3212]
 	str	r3, [sp, #20]
-	ldr	r3, .L3168+20
+	ldr	r3, .L3173+20
 	ldrh	ip, [r3]
 	ldrh	r8, [r3, #2]
-.L3127:
+.L3132:
 	ldr	r1, [sp, #4]
 	uxth	r3, r2
 	cmp	r3, r1
-	bcs	.L3166
+	bcs	.L3171
 	ldrh	r3, [r0, #2]!
 	cmp	r3, r9
-	beq	.L3128
+	beq	.L3133
 	ldr	r1, [sp, #16]
 	orr	r3, r5, r3, asl #10
 	mla	r1, r10, r7, r1
@@ -18854,48 +18882,48 @@ FtlGcScanTempBlk:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L3128:
+.L3133:
 	add	r2, r2, #1
-	b	.L3127
-.L3166:
+	b	.L3132
+.L3171:
 	ldr	r0, [r6, #-2076]
 	mov	r1, r7
 	mov	r2, #0
-	ldr	fp, .L3168+24
+	ldr	fp, .L3173+24
 	bl	FlashReadPages
 	mov	r10, #0
-.L3130:
+.L3135:
 	uxth	r3, r10
 	cmp	r3, r7
-	bcs	.L3167
+	bcs	.L3172
 	mov	r9, #36
 	ldr	r2, [r6, #-2076]
 	mul	r9, r9, r10
-	ldr	ip, .L3168+12
+	ldr	ip, .L3173+12
 	add	r3, r2, r9
 	ldr	r8, [r2, r9]
 	ldr	r1, [r3, #4]
 	cmp	r8, #0
 	ldr	r3, [r3, #12]
 	str	r1, [sp, #4]
-	bne	.L3131
+	bne	.L3136
 	ldrh	r1, [r3]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L3132
-.L3134:
-	ldr	r2, .L3168+12
+	bne	.L3137
+.L3139:
+	ldr	r2, .L3173+12
 	ldrh	r3, [r4]
 	ldr	r2, [r2, #-4060]
-	b	.L3165
-.L3132:
+	b	.L3170
+.L3137:
 	ldr	r0, [r3, #8]
 	ldr	r2, [fp, #1932]
 	cmp	r0, r2
-	bhi	.L3134
+	bhi	.L3139
 	ldrb	r2, [fp]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3136
+	beq	.L3141
 	add	r1, sp, #28
 	mov	r2, r8
 	str	r3, [sp, #16]
@@ -18909,7 +18937,7 @@ FtlGcScanTempBlk:
 	mov	r0, r0, lsr #5
 	moveq	r0, #0
 	cmp	r0, #0
-	beq	.L3136
+	beq	.L3141
 	str	r2, [sp, #36]
 	mov	r1, #1
 	ldr	r2, [r6, #-2044]
@@ -18919,81 +18947,81 @@ FtlGcScanTempBlk:
 	str	r2, [sp, #44]
 	mov	r2, r8
 	bl	FlashReadPages
-	ldr	r2, .L3168+28
+	ldr	r2, .L3173+28
 	ldr	r1, [r6, #-2076]
 	ldrh	r2, [r2]
 	add	r9, r1, r9
 	mov	r2, r2, asl #7
 	ldr	r1, [sp, #40]
 	ldr	r3, [sp, #16]
-	b	.L3138
-.L3139:
+	b	.L3143
+.L3144:
 	add	r8, r8, #1
-.L3138:
+.L3143:
 	cmp	r8, r2
-	beq	.L3136
+	beq	.L3141
 	ldr	r0, [r9, #8]
 	ldr	ip, [r0, r8, asl #2]
 	ldr	r0, [r1, r8, asl #2]
 	cmp	ip, r0
-	beq	.L3139
+	beq	.L3144
 	ldr	r2, [sp, #36]
-	ldr	r0, .L3168+32
+	ldr	r0, .L3173+32
 	ldrh	r1, [r4]
 	bl	printk
 	ldrh	r3, [r4]
 	ldr	r2, [r6, #-4060]
-.L3165:
+.L3170:
 	mov	r3, r3, asl #1
 	mov	r1, #0
 	strh	r1, [r2, r3]	@ movhi
 	ldrh	r0, [r4]
 	bl	INSERT_FREE_LIST
-	ldr	r2, .L3168+36
+	ldr	r2, .L3173+36
 	mvn	r3, #0
 	strh	r3, [r4]	@ movhi
 	strh	r3, [r2]	@ movhi
-	b	.L3164
-.L3136:
+	b	.L3169
+.L3141:
 	ldr	r0, [r3, #12]
 	add	r10, r10, #1
 	ldr	r1, [sp, #4]
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-	b	.L3130
-.L3131:
+	b	.L3135
+.L3136:
 	ldr	r2, [sp, #4]
-	ldr	r0, .L3168+40
+	ldr	r0, .L3173+40
 	ldrh	r1, [r4]
 	str	ip, [sp, #16]
 	bl	printk
-	ldr	r3, .L3168+24
+	ldr	r3, .L3173+24
 	ldrh	r5, [r4]
 	ldr	r2, [r3, #1796]
 	cmp	r2, #0
 	ldr	ip, [sp, #16]
-	bne	.L3142
+	bne	.L3147
 	ldrb	r2, [r3, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3143
-.L3142:
+	beq	.L3148
+.L3147:
 	ldr	r2, [r3, #4060]
 	mov	r3, r5, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #159
-	bls	.L3144
-.L3143:
+	bls	.L3149
+.L3148:
 	ldr	r3, [ip, #-2076]
 	ldr	r3, [r3, r9]
 	cmn	r3, #1
-	bne	.L3145
-.L3144:
+	bne	.L3150
+.L3149:
 	ldr	r3, [ip, #-2076]
 	add	r9, r3, r9
 	ldr	r3, [r9, #4]
 	str	r3, [sp, #8]
-.L3145:
-	ldr	r3, .L3168+12
+.L3150:
+	ldr	r3, .L3173+12
 	mov	r5, r5, asl #1
 	mov	r2, #0
 	ldr	r3, [r3, #-4060]
@@ -19002,11 +19030,11 @@ FtlGcScanTempBlk:
 	bl	INSERT_FREE_LIST
 	mvn	r3, #0
 	strh	r3, [r4]	@ movhi
-.L3164:
+.L3169:
 	bl	FtlGcPageVarInit
 	mov	r5, #0
-	b	.L3124
-.L3167:
+	b	.L3129
+.L3172:
 	ldr	r3, [sp]
 	add	r5, r5, #1
 	ldr	r2, [sp, #12]
@@ -19014,28 +19042,28 @@ FtlGcScanTempBlk:
 	uxth	r5, r5
 	cmp	r3, r2
 	str	r3, [sp]
-	ldr	r2, .L3168+8
-	bcs	.L3147
-.L3149:
+	ldr	r2, .L3173+8
+	bcs	.L3152
+.L3154:
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bhi	.L3148
-	b	.L3125
-.L3147:
-	ldr	r1, .L3168+44
+	bhi	.L3153
+	b	.L3130
+.L3152:
+	ldr	r1, .L3173+44
 	movw	r0, #65535
 	ldrh	r3, [r1]
 	cmp	r3, r0
-	beq	.L3149
+	beq	.L3154
 	ldr	r0, [sp]
 	add	r3, r3, r0
 	strh	r3, [r1]	@ movhi
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bls	.L3149
-	b	.L3150
-.L3125:
-	ldr	r2, .L3168+4
+	bls	.L3154
+	b	.L3155
+.L3130:
+	ldr	r2, .L3173+4
 	movw	r3, #3288
 	mvn	r1, #0
 	strh	r5, [r4, #2]	@ movhi
@@ -19045,21 +19073,21 @@ FtlGcScanTempBlk:
 	mov	r1, r5
 	strb	r2, [r4, #6]
 	bl	ftl_sb_update_avl_pages
-.L3150:
-	ldr	r3, .L3168
+.L3155:
+	ldr	r3, .L3173
 	ldr	r2, [sp, #68]
 	ldr	r0, [sp, #8]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3151
+	beq	.L3156
 	bl	__stack_chk_fail
-.L3151:
+.L3156:
 	add	sp, sp, #76
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3169:
+.L3174:
 	.align	2
-.L3168:
+.L3173:
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
 	.word	.LANCHOR0+1872
@@ -19068,9 +19096,9 @@ FtlGcScanTempBlk:
 	.word	.LANCHOR0+1882
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1878
-	.word	.LC148
-	.word	.LANCHOR2-3800
 	.word	.LC149
+	.word	.LANCHOR2-3800
+	.word	.LC150
 	.word	.LANCHOR1+3288
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
@@ -19085,26 +19113,26 @@ FtlReadRefresh:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r5, .L3188
-	ldr	r7, .L3188+4
-	ldr	r4, .L3188+8
+	ldr	r5, .L3193
+	ldr	r7, .L3193+4
+	ldr	r4, .L3193+8
 	ldr	r10, [r5, #-3668]
 	mov	r6, r5
 	ldr	r3, [r7]
 	cmp	r10, #0
 	str	r3, [sp, #44]
-	beq	.L3171
+	beq	.L3176
 	ldr	r2, [r5, #-3664]
 	ldr	r3, [r4, #1932]
 	cmp	r2, r3
-	bcs	.L3172
+	bcs	.L3177
 	mov	r5, #2048
 	mov	r8, r6
-.L3177:
+.L3182:
 	ldr	r0, [r6, #-3664]
 	ldr	r3, [r4, #1932]
 	cmp	r0, r3
-	bcs	.L3176
+	bcs	.L3181
 	mov	r2, #0
 	add	r1, sp, #4
 	bl	log2phys
@@ -19113,7 +19141,7 @@ FtlReadRefresh:
 	str	r3, [r8, #-3664]
 	ldr	r2, [sp, #4]
 	cmn	r2, #1
-	beq	.L3175
+	beq	.L3180
 	add	r0, sp, #48
 	str	r2, [sp, #12]
 	mov	r1, #1
@@ -19125,26 +19153,26 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #8]
 	cmp	r3, #256
-	bne	.L3176
+	bne	.L3181
 	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3176:
+.L3181:
 	mvn	r0, #0
-	b	.L3179
-.L3175:
+	b	.L3184
+.L3180:
 	subs	r5, r5, #1
-	bne	.L3177
-	b	.L3176
-.L3172:
+	bne	.L3182
+	b	.L3181
+.L3177:
 	ldr	r3, [r5, #-3880]
 	mov	r0, #0
 	str	r0, [r5, #-3668]
 	str	r0, [r5, #-3664]
 	str	r3, [r5, #-3672]
-	b	.L3179
-.L3171:
+	b	.L3184
+.L3176:
 	ldr	r1, [r5, #-3828]
 	ldr	r9, [r5, #-3880]
 	ldr	r3, [r4, #1932]
@@ -19152,11 +19180,11 @@ FtlReadRefresh:
 	ldr	r8, [r5, #-3672]
 	cmp	r1, r4
 	add	r2, r9, #1048576
-	ldr	fp, .L3188+12
+	ldr	fp, .L3193+12
 	movhi	r4, #31
 	movls	r4, #63
 	cmp	r8, r2
-	bhi	.L3181
+	bhi	.L3186
 	mov	r1, r1, lsr #10
 	mov	r0, #1000
 	mul	r0, r0, r3
@@ -19164,15 +19192,15 @@ FtlReadRefresh:
 	bl	__aeabi_uidiv
 	add	r0, r0, r8
 	cmp	r0, r9
-	bcc	.L3181
+	bcc	.L3186
 	ldrh	r3, [fp, #28]
 	ands	r0, r4, r3
 	movne	r0, r10
-	bne	.L3179
+	bne	.L3184
 	ldr	r2, [r5, #-3648]
 	cmp	r2, r3
-	beq	.L3179
-.L3181:
+	beq	.L3184
+.L3186:
 	ldrh	r3, [fp, #28]
 	mov	r0, #0
 	str	r9, [r6, #-3672]
@@ -19180,19 +19208,19 @@ FtlReadRefresh:
 	str	r3, [r6, #-3648]
 	mov	r3, #1
 	str	r3, [r6, #-3668]
-.L3179:
+.L3184:
 	ldr	r2, [sp, #44]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L3182
+	beq	.L3187
 	bl	__stack_chk_fail
-.L3182:
+.L3187:
 	add	sp, sp, #52
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3189:
+.L3194:
 	.align	2
-.L3188:
+.L3193:
 	.word	.LANCHOR2
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
@@ -19210,8 +19238,8 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r9, .L3230
-	ldr	r2, .L3230+4
+	ldr	r9, .L3235
+	ldr	r2, .L3235+4
 	add	r6, r9, #1872
 	ldr	ip, [r9, #4052]
 	ldr	r3, [r2]
@@ -19219,23 +19247,23 @@ FtlGcFreeTempBlock:
 	ldrh	r1, [r6]
 	str	r2, [sp, #4]
 	str	r3, [sp, #20]
-	bne	.L3228
-	ldr	r5, .L3230+8
+	bne	.L3233
+	ldr	r5, .L3235+8
 	mov	r4, r9
 	movw	lr, #65535
 	add	r8, r5, #3936
 	ldrh	r9, [r5, #-8]
 	cmp	r9, lr
-	bne	.L3193
-.L3202:
+	bne	.L3198
+.L3207:
 	ldrh	r2, [r5, #-8]
 	movw	r3, #65535
-	ldr	r9, .L3230+12
+	ldr	r9, .L3235+12
 	mov	r7, #0
 	cmp	r2, r3
 	str	r7, [r8, #-1912]
 	sub	r10, r9, #3936
-	beq	.L3228
+	beq	.L3233
 	bl	FtlCacheWriteBack
 	ldrh	r2, [r6]
 	ldrb	r0, [r9, #-3937]	@ zero_extendqisi2
@@ -19251,44 +19279,44 @@ FtlGcFreeTempBlock:
 	add	r3, r3, r2
 	str	r3, [r9, #-3860]
 	str	r9, [sp, #8]
-	b	.L3203
-.L3193:
+	b	.L3208
+.L3198:
 	cmp	r0, #0
-	beq	.L3196
-	ldr	r2, .L3230+16
+	beq	.L3201
+	ldr	r2, .L3235+16
 	movw	r3, #3288
 	ldrh	r0, [r2, r3]
 	cmp	r0, lr
-	beq	.L3197
-.L3198:
+	beq	.L3202
+.L3203:
 	mov	r1, #2
-	b	.L3196
-.L3197:
+	b	.L3201
+.L3202:
 	strh	ip, [r2, r3]	@ movhi
 	sub	r3, r8, #4032
 	ldrh	r3, [r3, #-12]
 	cmp	r3, #17
-	bhi	.L3198
-.L3196:
-	ldr	r0, .L3230+20
+	bhi	.L3203
+.L3201:
+	ldr	r0, .L3235+20
 	bl	FtlGcScanTempBlk
 	cmn	r0, #1
 	str	r0, [sp, #16]
-	beq	.L3199
+	beq	.L3204
 	ldr	r2, [r4, #4060]
 	mov	r9, r9, asl #1
 	ldrh	r3, [r2, r9]
 	cmp	r3, #4
-	bls	.L3200
+	bls	.L3205
 	sub	r3, r3, #5
 	mov	r0, #1
 	strh	r3, [r2, r9]	@ movhi
 	bl	FtlEctTblFlush
-.L3200:
+.L3205:
 	ldr	r3, [r8, #-1912]
-	ldr	r2, .L3230+12
+	ldr	r2, .L3235+12
 	cmp	r3, #0
-	bne	.L3201
+	bne	.L3206
 	ldr	r0, [sp, #16]
 	ldr	r3, [r2, #-3652]
 	ubfx	r0, r0, #10, #16
@@ -19296,29 +19324,29 @@ FtlGcFreeTempBlock:
 	str	r3, [r2, #-3652]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L3201:
+.L3206:
 	mov	r3, #0
 	str	r3, [r8, #-1912]
-	b	.L3214
-.L3199:
-	ldr	r2, .L3230+16
+	b	.L3219
+.L3204:
+	ldr	r2, .L3235+16
 	movw	r3, #3288
 	ldrh	r2, [r2, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3214
-	b	.L3202
-.L3206:
+	bne	.L3219
+	b	.L3207
+.L3211:
 	ldr	r3, [fp, #4]
 	cmp	r0, r3
-	bne	.L3226
-.L3205:
+	bne	.L3231
+.L3210:
 	add	r7, r7, #1
-.L3203:
+.L3208:
 	ldrh	r3, [r6]
 	uxth	r9, r7
 	cmp	r3, r9
-	bls	.L3229
+	bls	.L3234
 	mov	r3, #12
 	ldr	r2, [r4, #1932]
 	mul	r9, r3, r9
@@ -19327,7 +19355,7 @@ FtlGcFreeTempBlock:
 	add	fp, ip, r9
 	ldr	r0, [fp, #8]
 	cmp	r0, r2
-	bcs	.L3226
+	bcs	.L3231
 	mov	r2, #0
 	add	r1, sp, #16
 	str	ip, [sp, #12]
@@ -19336,7 +19364,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [sp, #16]
 	ldr	r2, [ip, r9]
 	cmp	r0, r2
-	bne	.L3206
+	bne	.L3211
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	add	r1, fp, #4
@@ -19345,34 +19373,34 @@ FtlGcFreeTempBlock:
 	ldr	r0, [fp, #8]
 	bl	log2phys
 	mov	r0, r9
-	b	.L3227
-.L3226:
+	b	.L3232
+.L3231:
 	ldrh	r0, [r10]
-.L3227:
+.L3232:
 	bl	decrement_vpc_count
-	b	.L3205
-.L3229:
+	b	.L3210
+.L3234:
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrb	r3, [r4, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3208
-	ldr	r0, .L3230+24
+	beq	.L3213
+	ldr	r0, .L3235+24
 	ldrh	r1, [r5, #-8]
 	bl	printk
-.L3208:
+.L3213:
 	ldrh	r0, [r5, #-8]
 	ldr	r2, [r8, #-4060]
 	mov	r3, r0, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L3209
+	beq	.L3214
 	bl	INSERT_DATA_LIST
-	b	.L3210
-.L3209:
+	b	.L3215
+.L3214:
 	bl	INSERT_FREE_LIST
-.L3210:
-	ldr	r7, .L3230+12
+.L3215:
+	ldr	r7, .L3235+12
 	mvn	r8, #0
 	strh	r8, [r5, #-8]	@ movhi
 	mov	r5, #0
@@ -19388,53 +19416,53 @@ FtlGcFreeTempBlock:
 	cmp	r3, r5
 	sub	r3, r7, #3808
 	ldrh	r3, [r3, #-12]
-	beq	.L3211
+	beq	.L3216
 	ldr	r1, [r7, #-3824]
 	cmp	r1, #39
-	bhi	.L3211
+	bhi	.L3216
 	cmp	r2, r3
 	subcc	r7, r7, #3232
 	movcc	r3, r3, asl #1
 	strcch	r3, [r7, #-4]	@ movhi
-	b	.L3228
-.L3211:
+	b	.L3233
+.L3216:
 	add	r1, r3, r3, asl #1
 	cmp	r2, r1, asr #2
-	ble	.L3228
+	ble	.L3233
 	ldrb	r0, [r4, #140]	@ zero_extendqisi2
-	ldr	r2, .L3230+28
+	ldr	r2, .L3235+28
 	cmp	r0, #0
 	moveq	r3, #20
 	streqh	r3, [r2, #-4]	@ movhi
-	beq	.L3192
+	beq	.L3197
 	sub	r3, r3, #2
 	strh	r3, [r2, #-4]	@ movhi
-.L3228:
+.L3233:
 	mov	r0, #0
-	b	.L3192
-.L3214:
+	b	.L3197
+.L3219:
 	mov	r0, #1
-.L3192:
+.L3197:
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #20]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3213
+	beq	.L3218
 	bl	__stack_chk_fail
-.L3213:
+.L3218:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3231:
+.L3236:
 	.align	2
-.L3230:
+.L3235:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR2-3936
 	.word	.LANCHOR2
 	.word	.LANCHOR1
 	.word	.LANCHOR2-3944
-	.word	.LC150
+	.word	.LC151
 	.word	.LANCHOR2-3232
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
@@ -19447,8 +19475,8 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r5, .L3235
-	ldr	r4, .L3235+4
+	ldr	r5, .L3240
+	ldr	r4, .L3240+4
 	mov	r0, r5
 	ldrh	r1, [r4]
 	bl	FtlGcScanTempBlk
@@ -19456,17 +19484,17 @@ FtlGcPageRecovery:
 	ldrh	r3, [r4]
 	cmp	r2, r3
 	ldmccfd	sp!, {r3, r4, r5, pc}
-	ldr	r0, .L3235+8
+	ldr	r0, .L3240+8
 	bl	FtlMapBlkWriteDumpData
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r3, .L3235+12
+	ldr	r3, .L3240+12
 	mov	r2, #0
 	str	r2, [r3, #-1912]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L3236:
+.L3241:
 	.align	2
-.L3235:
+.L3240:
 	.word	.LANCHOR2-3944
 	.word	.LANCHOR0+1872
 	.word	.LANCHOR2-1972
@@ -19483,8 +19511,8 @@ FtlPowerLostRecovery:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, #0
-	ldr	r4, .L3239
-	ldr	r3, .L3239+4
+	ldr	r4, .L3244
+	ldr	r3, .L3244+4
 	sub	r5, r4, #4032
 	sub	r4, r4, #3984
 	sub	r5, r5, #8
@@ -19503,9 +19531,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r6
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3240:
+.L3245:
 	.align	2
-.L3239:
+.L3244:
 	.word	.LANCHOR2
 	.word	.LANCHOR4
 	.fnend
@@ -19520,10 +19548,10 @@ FtlSysBlkInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movw	r3, #310
-	ldr	r7, .L3259
+	ldr	r7, .L3264
 	mov	r2, #0
-	ldr	r6, .L3259+4
-	ldr	r4, .L3259+8
+	ldr	r6, .L3264+4
+	ldr	r4, .L3264+8
 	strh	r2, [r7, r3]	@ movhi
 	add	r3, r7, #308
 	mvn	r2, #0
@@ -19536,14 +19564,14 @@ FtlSysBlkInit:
 	ldrh	r2, [r3, #-8]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3242
-.L3244:
+	bne	.L3247
+.L3249:
 	mvn	r8, #0
-	b	.L3243
-.L3242:
+	b	.L3248
+.L3247:
 	bl	FtlLoadSysInfo
 	subs	r8, r0, #0
-	bne	.L3244
+	bne	.L3249
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -19558,46 +19586,46 @@ FtlSysBlkInit:
 	mov	r0, #12
 	ldrh	r1, [r6, r3]
 	mov	r3, r8
-.L3245:
+.L3250:
 	cmp	r3, r1
-	bge	.L3250
+	bge	.L3255
 	mla	ip, r0, r3, r2
 	ldr	ip, [ip, #4]
 	cmp	ip, #0
-	bge	.L3246
-.L3250:
-	ldr	r5, .L3259+12
+	bge	.L3251
+.L3255:
+	ldr	r5, .L3264+12
 	cmp	r3, r1
-	ldr	r9, .L3259+16
+	ldr	r9, .L3264+16
 	ldrh	r2, [r5, #28]
 	add	r2, r2, #1
 	strh	r2, [r5, #28]	@ movhi
 	sub	r2, r9, #8
-	bge	.L3257
-	b	.L3247
-.L3246:
+	bge	.L3262
+	b	.L3252
+.L3251:
 	add	r3, r3, #1
-	b	.L3245
-.L3257:
+	b	.L3250
+.L3262:
 	movw	r3, #310
 	ldrh	r3, [r7, r3]
 	cmp	r3, #0
-	beq	.L3251
-.L3247:
+	beq	.L3256
+.L3252:
 	ldrh	r3, [r9, #-8]
 	ldr	r0, [r4, #-4060]
 	ldrh	ip, [r2, #4]
 	mov	r3, r3, asl #1
 	ldrh	r1, [r0, r3]
 	rsb	r1, ip, r1
-	ldr	ip, .L3259+20
+	ldr	ip, .L3264+20
 	strh	r1, [r0, r3]	@ movhi
 	ldr	lr, [r4, #-4060]
 	ldrh	r3, [ip]
 	strh	r3, [r2, #2]	@ movhi
 	mov	r3, #0
 	strh	r3, [r2, #4]	@ movhi
-	ldr	r2, .L3259+24
+	ldr	r2, .L3264+24
 	strb	r3, [r4, #-4034]
 	sub	r1, r2, #8
 	ldrh	r2, [r2, #-8]
@@ -19616,20 +19644,20 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L3251:
+.L3256:
 	ldrh	r0, [r9, #-8]
 	movw	r3, #65535
-	ldr	r4, .L3259+28
+	ldr	r4, .L3264+28
 	cmp	r0, r3
-	beq	.L3252
+	beq	.L3257
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L3252
+	bne	.L3257
 	ldrh	r3, [r4, #52]
 	add	r9, r4, #56
 	add	r7, r4, #48
 	cmp	r3, #0
-	bne	.L3252
+	bne	.L3257
 	bl	FtlGcRefreshOpenBlock
 	ldrh	r0, [r4, #48]
 	bl	FtlGcRefreshOpenBlock
@@ -19638,21 +19666,21 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-.L3252:
+.L3257:
 	ldrb	r3, [r6]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L3253
+	bne	.L3258
 	ldrh	r3, [r5, #28]
 	tst	r3, #31
-	bne	.L3243
-.L3253:
+	bne	.L3248
+.L3258:
 	bl	FtlVpcCheckAndModify
-.L3243:
+.L3248:
 	mov	r0, r8
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
-.L3260:
+.L3265:
 	.align	2
-.L3259:
+.L3264:
 	.word	.LANCHOR4
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -19673,12 +19701,12 @@ FtlLowFormat:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r5, .L3296
+	ldr	r5, .L3301
 	ldr	r6, [r5, #4052]
 	cmp	r6, #0
-	bne	.L3263
+	bne	.L3268
 	movw	r7, #1908
-	ldr	r4, .L3296+4
+	ldr	r4, .L3301+4
 	ldrh	r2, [r5, r7]
 	mov	r1, r6
 	ldr	r0, [r4, #-1988]
@@ -19696,37 +19724,37 @@ FtlLowFormat:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L3264
+	beq	.L3269
 	bl	FtlMakeBbt
-.L3264:
-	ldr	r0, .L3296+8
+.L3269:
+	ldr	r0, .L3301+8
 	mov	r2, #0
-	ldr	ip, .L3296+12
-.L3265:
+	ldr	ip, .L3301+12
+.L3270:
 	ldrh	r1, [r0]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, asl #7
-	bge	.L3293
+	bge	.L3298
 	ldr	lr, [r4, #-2048]
 	mvn	r1, r3
 	orr	r1, r3, r1, asl #16
 	str	r1, [lr, r3, asl #2]
 	ldr	r1, [r4, #-2044]
 	str	ip, [r1, r3, asl #2]
-	b	.L3265
-.L3293:
-	ldr	r2, .L3296
+	b	.L3270
+.L3298:
+	ldr	r2, .L3301
 	movw	r3, #1812
-	ldr	r10, .L3296+16
+	ldr	r10, .L3301+16
 	mov	r6, #0
 	ldrh	r7, [r2, r3]
-.L3267:
+.L3272:
 	ldrh	r3, [r10]
-	ldr	r8, .L3296
+	ldr	r8, .L3301
 	cmp	r3, r7
-	ldr	r9, .L3296+16
-	bls	.L3294
+	ldr	r9, .L3301+16
+	bls	.L3299
 	mov	r0, r7
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -19734,19 +19762,19 @@ FtlLowFormat:
 	uxth	r7, r7
 	add	r0, r6, r0
 	uxth	r6, r0
-	b	.L3267
-.L3294:
+	b	.L3272
+.L3299:
 	movw	r3, #1804
 	ldrh	r1, [r8, r3]
 	sub	r3, r6, #3
 	cmp	r3, r1, asl #1
-	bge	.L3269
-.L3273:
+	bge	.L3274
+.L3278:
 	mov	r6, #0
-	ldr	r7, .L3296+20
+	ldr	r7, .L3301+20
 	mov	r8, r6
-	b	.L3270
-.L3269:
+	b	.L3275
+.L3274:
 	mov	r0, r6
 	bl	__aeabi_uidiv
 	ldr	r3, [r8, #1904]
@@ -19758,33 +19786,33 @@ FtlLowFormat:
 	bl	FtlFreeSysBlkQueueInit
 	movw	r3, #1812
 	ldrh	r6, [r8, r3]
-.L3271:
+.L3276:
 	ldrh	r3, [r9]
 	cmp	r3, r6
-	bls	.L3273
+	bls	.L3278
 	mov	r0, r6
 	add	r6, r6, #1
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r6, r6
-	b	.L3271
-.L3270:
+	b	.L3276
+.L3275:
 	ldrh	r3, [r7]
 	uxth	r0, r6
-	ldr	fp, .L3296
+	ldr	fp, .L3301
 	add	r6, r6, #1
 	cmp	r3, r0
-	bls	.L3295
+	bls	.L3300
 	mov	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r0, r8, r0
 	uxth	r8, r0
-	b	.L3270
-.L3295:
+	b	.L3275
+.L3300:
 	movw	r3, #1814
 	ldr	r2, [fp, #1816]
 	ldrh	r3, [fp, r3]
-	ldr	r6, .L3296+24
+	ldr	r6, .L3301+24
 	mov	r0, r2
 	str	r2, [sp, #4]
 	str	r3, [r4, #-2088]
@@ -19801,7 +19829,7 @@ FtlLowFormat:
 	mul	r3, r3, r7
 	ldr	r2, [sp, #4]
 	cmp	r8, r3
-	ble	.L3275
+	ble	.L3280
 	rsb	r0, r8, r2
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -19809,10 +19837,10 @@ FtlLowFormat:
 	mov	r0, r0, lsr #5
 	add	r0, r0, #24
 	strh	r0, [r6, #-12]	@ movhi
-.L3275:
+.L3280:
 	ldr	r3, [r5, #1796]
 	cmp	r3, #1
-	bne	.L3276
+	bne	.L3281
 	mov	r0, r8
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -19820,10 +19848,10 @@ FtlLowFormat:
 	uxtah	r0, fp, r0
 	add	fp, fp, r0, asr #2
 	strh	fp, [r6, #-12]	@ movhi
-.L3276:
+.L3281:
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3277
+	beq	.L3282
 	mov	r0, r8
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -19831,29 +19859,29 @@ FtlLowFormat:
 	uxtah	r0, fp, r0
 	add	fp, fp, r0, asr #2
 	strh	fp, [r6, #-12]	@ movhi
-.L3277:
+.L3282:
 	movw	r3, #1866
 	ldrh	r3, [r5, r3]
 	cmp	r3, #0
-	beq	.L3279
+	beq	.L3284
 	ldrh	r2, [r6, #-12]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r6, #-12]	@ movhi
 	mul	r2, r7, r3
 	cmp	r2, r8
 	addgt	r3, r3, #32
-	ldrgt	r2, .L3296
+	ldrgt	r2, .L3301
 	addgt	r3, r9, r3
 	strgt	r10, [r2, #1932]
-	ldrgt	r2, .L3296+24
+	ldrgt	r2, .L3301+24
 	strgth	r3, [r2, #-12]	@ movhi
-.L3279:
+.L3284:
 	ldrh	r2, [r6, #-12]
 	mvn	r9, #0
 	ldr	r3, [r5, #1932]
 	rsb	r3, r2, r3
 	mul	r7, r7, r3
-	ldr	r3, .L3296+28
+	ldr	r3, .L3301+28
 	ldrh	r3, [r3]
 	str	r7, [r4, #248]
 	mul	r7, r3, r7
@@ -19864,7 +19892,7 @@ FtlLowFormat:
 	str	r7, [r5, #1912]
 	bl	FtlBbmTblFlush
 	movw	r3, #1814
-	ldr	r7, .L3296+32
+	ldr	r7, .L3301+32
 	ldrh	r2, [r5, r3]
 	mov	r1, #0
 	sub	r8, r7, #248
@@ -19890,23 +19918,23 @@ FtlLowFormat:
 	add	r7, r7, #3792
 	mov	r2, r2, lsr #3
 	bl	ftl_memset
-.L3281:
-	ldr	r10, .L3296+36
-	ldr	r5, .L3296+4
+.L3286:
+	ldr	r10, .L3301+36
+	ldr	r5, .L3301+4
 	mov	r0, r10
 	bl	make_superblock
 	ldrb	r3, [r4, #-4033]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r8]
-	bne	.L3282
+	bne	.L3287
 	ldr	r2, [r7, #-4060]
 	mov	r3, r3, asl #1
 	strh	r9, [r2, r3]	@ movhi
 	ldrh	r3, [fp]
 	add	r3, r3, #1
 	strh	r3, [fp]	@ movhi
-	b	.L3281
-.L3282:
+	b	.L3286
+.L3287:
 	ldr	r2, [r5, #-3848]
 	mov	r3, r3, asl #1
 	ldrh	r1, [r10, #4]
@@ -19927,23 +19955,23 @@ FtlLowFormat:
 	strh	r3, [r2, #-8]	@ movhi
 	mov	r3, #1
 	strb	r3, [r5, #-3984]
-.L3283:
-	ldr	r8, .L3296+40
-	ldr	r5, .L3296+4
+.L3288:
+	ldr	r8, .L3301+40
+	ldr	r5, .L3301+4
 	mov	r0, r8
 	bl	make_superblock
 	ldrb	r3, [r4, #-3985]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r7]
-	bne	.L3284
+	bne	.L3289
 	ldr	r2, [r9, #-4060]
 	mov	r3, r3, asl #1
 	strh	r10, [r2, r3]	@ movhi
 	ldrh	r3, [r7]
 	add	r3, r3, #1
 	strh	r3, [r7]	@ movhi
-	b	.L3283
-.L3284:
+	b	.L3288
+.L3289:
 	ldr	r2, [r5, #-3848]
 	mov	r3, r3, asl #1
 	ldrh	r1, [r8, #4]
@@ -19956,7 +19984,7 @@ FtlLowFormat:
 	sub	r3, r5, #3936
 	strh	r4, [r3, #-8]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L3296+44
+	ldr	r3, .L3301+44
 	mov	r2, #0
 	strh	r2, [r3, #2]	@ movhi
 	ldr	r2, [r5, #248]
@@ -19970,17 +19998,17 @@ FtlLowFormat:
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	ldreq	r3, .L3296+48
+	ldreq	r3, .L3301+48
 	moveq	r2, #1
 	streq	r2, [r3, #504]
-.L3263:
+.L3268:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3297:
+.L3302:
 	.align	2
-.L3296:
+.L3301:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1878
@@ -20007,32 +20035,32 @@ FtlReInitForSDUpdata:
 	.save {r4, r5, r6, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r5, .L3328
-	ldr	r0, .L3328+4
+	ldr	r5, .L3333
+	ldr	r0, .L3333+4
 	ldr	r3, [r5]
 	str	r3, [sp, #20]
 	ldrb	r3, [r0, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3299
-.L3301:
+	beq	.L3304
+.L3306:
 	mov	r0, #0
-	b	.L3300
-.L3299:
-	ldr	r6, .L3328+8
+	b	.L3305
+.L3304:
+	ldr	r6, .L3333+8
 	mov	r4, r0
 	ldr	r0, [r6, #144]
 	bl	FlashInit
 	cmp	r0, #0
-	bne	.L3301
+	bne	.L3306
 	bl	FlashLoadFactorBbt
 	cmp	r0, #0
-	beq	.L3302
+	beq	.L3307
 	bl	FlashMakeFactorBbt
-.L3302:
+.L3307:
 	ldr	r0, [r6, #176]
 	bl	FlashReadIdbDataRaw
 	cmp	r0, #0
-	beq	.L3303
+	beq	.L3308
 	mov	r2, #16
 	add	r0, sp, #4
 	mov	r1, #0
@@ -20041,76 +20069,76 @@ FtlReInitForSDUpdata:
 	mov	r0, r3
 	mov	ip, #1
 	ldr	r2, [sp, #4]
-.L3304:
+.L3309:
 	ands	lr, r2, ip, asl r0
 	add	r1, r3, #1
 	add	r0, r0, #1
 	movne	r3, r1
 	cmp	r0, #16
-	bne	.L3304
+	bne	.L3309
 	cmp	r3, #6
-	bls	.L3324
+	bls	.L3329
 	mov	r0, #0
 	mov	ip, #1
-.L3307:
+.L3312:
 	ands	lr, r2, ip, asl r0
 	add	r1, r3, #1
 	add	r0, r0, #1
 	movne	r3, r1
 	cmp	r0, #24
-	bne	.L3307
+	bne	.L3312
 	cmp	r3, #17
 	movhi	r3, #36
 	strhib	r3, [r4, #1]
-	bhi	.L3306
-.L3324:
+	bhi	.L3311
+.L3329:
 	strb	r0, [r4, #1]
-.L3306:
+.L3311:
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	strh	r3, [r4, #138]	@ movhi
-.L3303:
-	ldr	r1, .L3328+12
-	ldr	r0, .L3328+16
+.L3308:
+	ldr	r1, .L3333+12
+	ldr	r0, .L3333+16
 	bl	printk
-	ldr	r0, .L3328+20
+	ldr	r0, .L3333+20
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
 	ldr	r0, [r4, #1808]
 	mov	r4, #1
 	uxth	r0, r0
 	bl	FtlFreeSysBlkQueueInit
-.L3309:
+.L3314:
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L3310
-.L3326:
+	beq	.L3315
+.L3331:
 	bl	FtlLowFormat
 	cmp	r4, #3
 	addls	r4, r4, #1
-	bls	.L3309
-.L3327:
+	bls	.L3314
+.L3332:
 	mvn	r0, #0
-	b	.L3300
-.L3310:
+	b	.L3305
+.L3315:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L3326
-	ldr	r3, .L3328+24
+	bne	.L3331
+	ldr	r3, .L3333+24
 	mov	r2, #1
 	str	r2, [r3, #504]
-.L3300:
+.L3305:
 	ldr	r2, [sp, #20]
 	ldr	r3, [r5]
 	cmp	r2, r3
-	beq	.L3314
+	beq	.L3319
 	bl	__stack_chk_fail
-.L3314:
+.L3319:
 	add	sp, sp, #24
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3329:
+.L3334:
 	.align	2
-.L3328:
+.L3333:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -20127,41 +20155,41 @@ Ftl_gc_temp_data_write_back:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3349
+	ldr	r3, .L3354
 	ldr	r2, [r3, #4052]
 	cmp	r2, #0
-	bne	.L3347
+	bne	.L3352
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
-	ldr	r5, .L3349+4
+	ldr	r5, .L3354+4
 	cmp	r3, #0
-	beq	.L3333
+	beq	.L3338
 	ldr	r3, [r5, #-3220]
 	tst	r3, #1
-	beq	.L3333
-	ldr	r3, .L3349+8
+	beq	.L3338
+	ldr	r3, .L3354+8
 	ldrh	r3, [r3, #4]
 	cmp	r3, #0
-	beq	.L3333
-.L3334:
+	beq	.L3338
+.L3339:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L3333:
+.L3338:
 	mov	r2, #0
 	ldr	r0, [r5, #-2072]
 	ldr	r1, [r5, #-3220]
 	mov	r3, r2
 	bl	FlashProgPages
-	ldr	r7, .L3349+4
+	ldr	r7, .L3354+4
 	mov	r6, #0
 	mov	r8, #36
-.L3335:
+.L3340:
 	ldr	r1, [r5, #-3220]
 	uxth	r3, r6
-	ldr	r4, .L3349+4
+	ldr	r4, .L3354+4
 	cmp	r3, r1
-	bcs	.L3348
+	bcs	.L3353
 	mul	r3, r8, r3
 	ldr	r0, [r7, #-2072]
 	add	r6, r6, #1
@@ -20169,7 +20197,7 @@ Ftl_gc_temp_data_write_back:
 	ldr	r0, [r0, r3]
 	ldr	r2, [r1, #12]
 	cmn	r0, #1
-	bne	.L3336
+	bne	.L3341
 	sub	r1, r4, #3936
 	ldr	ip, [r4, #-4060]
 	mov	lr, #0
@@ -20187,33 +20215,33 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L3346
-.L3336:
+	b	.L3351
+.L3341:
 	ldr	r0, [r2, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r2, #8]
 	bl	FtlGcUpdatePage
-	b	.L3335
-.L3348:
+	b	.L3340
+.L3353:
 	ldr	r0, [r4, #-2072]
 	bl	FtlGcBufFree
 	mov	r3, #0
 	str	r3, [r4, #-3220]
-	ldr	r3, .L3349+8
+	ldr	r3, .L3354+8
 	ldrh	r3, [r3, #4]
 	cmp	r3, #0
-	bne	.L3334
+	bne	.L3339
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-.L3346:
+.L3351:
 	mov	r0, #1
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L3347:
+.L3352:
 	mov	r0, #0
 	bx	lr
-.L3350:
+.L3355:
 	.align	2
-.L3349:
+.L3354:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3944
@@ -20228,24 +20256,24 @@ Ftl_get_new_temp_ppa:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r3, .L3355
+	ldr	r3, .L3360
 	sub	r2, r3, #8
 	ldrh	r1, [r3, #-8]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L3352
+	beq	.L3357
 	ldrh	r3, [r2, #4]
 	cmp	r3, #0
-	bne	.L3353
-.L3352:
-	ldr	r4, .L3355+4
+	bne	.L3358
+.L3357:
+	ldr	r4, .L3360+4
 	bl	FtlCacheWriteBack
 	mov	r0, #0
 	mov	r5, #0
 	bl	FtlGcFreeTempBlock
 	sub	r4, r4, #3184
 	strb	r5, [r4, #-752]
-	ldr	r0, .L3355+8
+	ldr	r0, .L3360+8
 	bl	allocate_data_superblock
 	strh	r5, [r4, #-8]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -20253,13 +20281,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3353:
-	ldr	r0, .L3355+8
+.L3358:
+	ldr	r0, .L3360+8
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L3356:
+.L3361:
 	.align	2
-.L3355:
+.L3360:
 	.word	.LANCHOR2-3936
 	.word	.LANCHOR2
 	.word	.LANCHOR2-3944
@@ -20276,8 +20304,8 @@ ftl_do_gc:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r5, .L3521
-	ldr	r3, .L3521+4
+	ldr	r5, .L3526
+	ldr	r3, .L3526+4
 	str	r0, [sp, #12]
 	ldr	r0, [r5, #4052]
 	ldr	r3, [r3]
@@ -20285,51 +20313,51 @@ ftl_do_gc:
 	str	r1, [sp, #8]
 	str	r3, [sp, #44]
 	movne	r0, #0
-	bne	.L3358
-	ldr	r2, .L3521+8
+	bne	.L3363
+	ldr	r2, .L3526+8
 	ldr	r3, [r2, #504]
 	cmn	r3, #1
-	beq	.L3358
-	ldr	r3, .L3521+12
+	beq	.L3363
+	ldr	r3, .L3526+12
 	ldr	r4, [r3, #-2100]
 	mov	r7, r3
 	cmp	r4, #0
-	bne	.L3358
+	bne	.L3363
 	sub	r1, r3, #4048
 	ldrh	r1, [r1, #-4]
 	cmp	r1, #47
 	movls	r0, r4
-	bls	.L3358
+	bls	.L3363
 	movw	r1, #3288
 	ldrh	r1, [r2, r1]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L3359
-.L3362:
-	ldr	r6, .L3521+16
+	bne	.L3364
+.L3367:
+	ldr	r6, .L3526+16
 	movw	r2, #65535
 	ldrh	r4, [r6, #-12]
 	cmp	r4, r2
-	bne	.L3360
-	b	.L3361
-.L3359:
+	bne	.L3365
+	b	.L3366
+.L3364:
 	sub	r3, r3, #3936
 	ldrh	r3, [r3, #-8]
 	cmp	r3, r2
-	beq	.L3362
+	beq	.L3367
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L3362
+	beq	.L3367
 	mov	r0, #1
-	b	.L3358
-.L3360:
+	b	.L3363
+.L3365:
 	ldrh	r3, [r6, #-14]
 	cmp	r3, r2
-	bne	.L3361
+	bne	.L3366
 	ldrh	r1, [r6, #-10]
 	cmp	r1, r3
-	beq	.L3361
+	beq	.L3366
 	ldrh	r2, [r6, #-8]
 	cmp	r2, r3
 	strneh	r4, [r6, #-14]	@ movhi
@@ -20337,29 +20365,29 @@ ftl_do_gc:
 	mvnne	r3, #0
 	strneh	r2, [r6, #-10]	@ movhi
 	strneh	r3, [r6, #-8]	@ movhi
-.L3361:
+.L3366:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r7, #-3232]
-	ldr	r8, .L3521+20
+	ldr	r8, .L3526+20
 	cmp	r2, #1
 	add	r3, r3, #1
 	add	r3, r3, r2, asl #7
 	sub	r10, r8, #240
 	str	r3, [r7, #-3232]
-	bne	.L3373
+	bne	.L3378
 	ldr	r2, [r5, #1796]
 	cmp	r2, #0
-	bne	.L3364
-	ldr	r2, .L3521
+	bne	.L3369
+	ldr	r2, .L3526
 	ldrb	r2, [r2, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3373
-.L3364:
+	beq	.L3378
+.L3369:
 	ldr	r2, [r7, #-3824]
-	ldr	r9, .L3521+12
+	ldr	r9, .L3526+12
 	cmp	r2, #39
-	bhi	.L3373
-	ldr	r4, .L3521+24
+	bhi	.L3378
+	ldr	r4, .L3526+24
 	ldrh	r2, [r4]
 	add	r3, r3, r2
 	str	r3, [r9, #-3232]
@@ -20367,49 +20395,49 @@ ftl_do_gc:
 	ldrh	r3, [r8, #-8]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L3373
+	bne	.L3378
 	ldrh	r2, [r6, #-14]
 	cmp	r2, r3
-	bne	.L3373
+	bne	.L3378
 	ldr	r3, [r9, #-3232]
 	cmp	r3, #1024
-	bhi	.L3365
+	bhi	.L3370
 	ldrh	r3, [r10, #-12]
 	cmp	r3, #63
-	bhi	.L3373
-.L3365:
-	ldr	r3, .L3521+12
+	bhi	.L3378
+.L3370:
+	ldr	r3, .L3526+12
 	mov	r0, #0
 	ldrh	ip, [r10, #-12]
 	sub	r2, r3, #3232
-	ldr	r1, .L3521+24
+	ldr	r1, .L3526+24
 	strh	r0, [r4]	@ movhi
 	ldrh	r2, [r2, #-2]
 	add	r2, r2, #64
 	cmp	ip, r2
-	bgt	.L3373
+	bgt	.L3378
 	str	r0, [r3, #-3232]
 	ldr	r3, [r3, #-3824]
 	cmp	r3, r0
 	moveq	r3, #6
-	beq	.L3513
+	beq	.L3518
 	cmp	r3, #5
-	bhi	.L3367
+	bhi	.L3372
 	mov	r3, #18
-.L3513:
+.L3518:
 	strh	r3, [r1]	@ movhi
-.L3367:
+.L3372:
 	mov	r0, #32
 	bl	List_get_gc_head_node
 	movw	r3, #65535
 	uxth	lr, r0
 	cmp	lr, r3
-	beq	.L3372
-	ldr	fp, .L3521+12
+	beq	.L3377
+	ldr	fp, .L3526+12
 	sub	r9, fp, #3216
 	ldrh	r0, [r9, #-12]
 	cmp	r0, #0
-	beq	.L3369
+	beq	.L3374
 	movw	r1, #1874
 	ldr	r2, [fp, #-4060]
 	ldrh	r4, [r5, r1]
@@ -20420,7 +20448,7 @@ ftl_do_gc:
 	mul	r1, r1, r4
 	add	r1, r1, #1
 	cmp	lr, r1
-	bgt	.L3372
+	bgt	.L3377
 	add	r1, r0, #1
 	str	ip, [sp, #28]
 	str	r3, [sp, #24]
@@ -20437,9 +20465,9 @@ ftl_do_gc:
 	cmp	r4, r3
 	ldr	r2, [sp, #20]
 	ldr	ip, [sp, #28]
-	beq	.L3372
+	beq	.L3377
 	mov	r10, r4, asl #1
-	ldr	r0, .L3521+28
+	ldr	r0, .L3526+28
 	ldrh	r3, [r2, r10]
 	ldrh	r2, [r2, ip]
 	str	r2, [sp]
@@ -20447,108 +20475,108 @@ ftl_do_gc:
 	bl	printk
 	ldrh	r3, [r9, #-12]
 	cmp	r3, #40
-	bls	.L3370
+	bls	.L3375
 	ldr	r3, [fp, #-4060]
 	ldrh	r3, [r3, r10]
 	cmp	r3, #32
 	movhi	r3, #0
 	strhih	r3, [r9, #-12]	@ movhi
-.L3370:
-	ldr	r3, .L3521+24
+.L3375:
+	ldr	r3, .L3526+24
 	mov	r2, #6
 	strh	r2, [r3]	@ movhi
-	b	.L3374
-.L3369:
+	b	.L3379
+.L3374:
 	mov	r3, #1
 	strh	r3, [r9, #-12]	@ movhi
-.L3372:
+.L3377:
 	bl	GetSwlReplaceBlock
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r4, r0
-	bne	.L3374
-	ldr	r3, .L3521+24
+	bne	.L3379
+	ldr	r3, .L3526+24
 	mov	r2, #0
 	strh	r2, [r3]	@ movhi
-.L3373:
+.L3378:
 	ldrh	r3, [r8, #-8]
 	movw	r4, #65535
-	ldr	r9, .L3521+12
+	ldr	r9, .L3526+12
 	cmp	r3, r4
-	bne	.L3374
+	bne	.L3379
 	sub	r2, r9, #3936
 	ldrh	r4, [r2, #-8]
 	cmp	r4, r3
 	movne	r4, r3
-	beq	.L3518
-.L3374:
+	beq	.L3523
+.L3379:
 	movw	r1, #65535
 	rsb	r3, r1, r4
 	clz	r3, r3
 	ldr	r2, [sp, #12]
-	ldr	r9, .L3521+32
+	ldr	r9, .L3526+32
 	mov	r3, r3, lsr #5
 	cmp	r2, #0
 	movne	ip, #0
 	andeq	ip, r3, #1
 	cmp	ip, #0
-	beq	.L3387
+	beq	.L3392
 	ldrh	r0, [r9, #-12]
 	cmp	r0, #24
 	movhi	r10, #1
-	bhi	.L3388
-	ldr	r3, .L3521+36
+	bhi	.L3393
+	ldr	r3, .L3526+36
 	cmp	r0, #16
 	ldrh	r10, [r3]
 	movhi	r10, r10, lsr #5
-	bhi	.L3388
+	bhi	.L3393
 	cmp	r0, #12
 	movhi	r10, r10, lsr #4
-	bhi	.L3388
+	bhi	.L3393
 	cmp	r0, #8
 	movhi	r10, r10, lsr #2
-.L3388:
-	ldr	r1, .L3521+12
+.L3393:
+	ldr	r1, .L3526+12
 	sub	r2, r1, #3232
 	ldrh	r3, [r2, #-4]
 	cmp	r3, r0
-	bcs	.L3392
+	bcs	.L3397
 	sub	r3, r1, #3936
 	movw	r0, #65535
 	ldrh	r3, [r3, #-8]
 	cmp	r3, r0
-	bne	.L3393
+	bne	.L3398
 	sub	r0, r1, #3168
 	ldrh	r0, [r0, #-14]
 	cmp	r0, r3
-	bne	.L3393
-	ldr	r3, .L3521+24
+	bne	.L3398
+	ldr	r3, .L3526+24
 	ldrh	r0, [r3]
 	cmp	r0, #0
-	bne	.L3394
+	bne	.L3399
 	ldr	r3, [r5, #1932]
 	ldr	r1, [r1, #-3888]
 	add	r3, r3, r3, asl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L3395
-.L3394:
-	ldr	r3, .L3521+40
+	bcs	.L3400
+.L3399:
+	ldr	r3, .L3526+40
 	ldrh	r3, [r3, #-12]
 	add	r3, r3, r3, asl #1
 	ubfx	r3, r3, #2, #16
-.L3395:
+.L3400:
 	strh	r3, [r2, #-4]	@ movhi
 	mov	r3, #0
 	str	r3, [r7, #-3224]
-	b	.L3358
-.L3393:
-	ldr	r3, .L3521+40
+	b	.L3363
+.L3398:
+	ldr	r3, .L3526+40
 	ldrh	r3, [r3, #-12]
 	add	r3, r3, r3, asl #1
 	mov	r3, r3, asr #2
 	strh	r3, [r2, #-4]	@ movhi
-.L3392:
+.L3397:
 	ldr	r3, [sp, #8]
 	movw	r4, #65535
 	ldr	r2, [r5, #1796]
@@ -20560,48 +20588,48 @@ ftl_do_gc:
 	cmp	r3, #0
 	addne	r10, r10, #1
 	uxthne	r10, r10
-	b	.L3397
-.L3387:
+	b	.L3402
+.L3392:
 	ldrh	r0, [r9, #88]
 	add	r2, r9, #4032
 	cmp	r0, r1
-	bne	.L3398
+	bne	.L3403
 	ldrh	r1, [r6, #-14]
 	cmp	r1, r0
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L3398
+	beq	.L3403
 	sub	r3, r2, #3792
 	ldrh	r3, [r3, #-8]
 	cmp	r3, r0
-	beq	.L3399
-.L3403:
+	beq	.L3404
+.L3408:
 	movw	r4, #65535
-	b	.L3398
-.L3399:
+	b	.L3403
+.L3404:
 	sub	r4, r2, #3232
 	ldrh	r1, [r9, #-12]
 	str	ip, [r2, #-3224]
 	ldrh	r3, [r4, #-4]
-	ldr	r10, .L3521+24
+	ldr	r10, .L3526+24
 	cmp	r1, r3
-	bls	.L3400
+	bls	.L3405
 	ldrh	r3, [r10]
 	cmp	r3, #0
-	bne	.L3401
+	bne	.L3406
 	ldr	r3, [r5, #1932]
 	ldr	r2, [r2, #-3888]
 	add	r3, r3, r3, asl #1
 	cmp	r2, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L3402
-.L3401:
-	ldr	r3, .L3521+40
+	bcs	.L3407
+.L3406:
+	ldr	r3, .L3526+40
 	ldrh	r3, [r3, #-12]
 	add	r3, r3, r3, asl #1
 	ubfx	r3, r3, #2, #16
-.L3402:
+.L3407:
 	strh	r3, [r4, #-4]	@ movhi
 	bl	FtlReadRefresh
 	mov	r0, #0
@@ -20612,12 +20640,12 @@ ftl_do_gc:
 	ldrh	r3, [r3, r0]
 	cmp	r3, #4
 	ldrhih	r0, [r10]
-	bhi	.L3358
-.L3400:
+	bhi	.L3363
+.L3405:
 	ldrh	r0, [r10]
 	cmp	r0, #0
-	bne	.L3403
-	ldr	r3, .L3521+40
+	bne	.L3408
+	ldr	r3, .L3526+40
 	ldrh	r10, [r3, #-12]
 	add	r3, r10, r10, asl #1
 	mov	r3, r3, asr #2
@@ -20634,40 +20662,40 @@ ftl_do_gc:
 	mul	r3, r3, r2
 	add	r3, r3, r3, lsr #31
 	cmp	r1, r3, asr #1
-	ble	.L3404
+	ble	.L3409
 	ldrh	r3, [r9, #-12]
 	sub	r2, r10, #1
 	cmp	r3, r2
-	blt	.L3404
+	blt	.L3409
 	bl	FtlReadRefresh
-	b	.L3516
-.L3404:
+	b	.L3521
+.L3409:
 	cmp	r1, #0
-	bne	.L3403
+	bne	.L3408
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r9, #-12]
 	add	r0, r0, #1
-	b	.L3358
-.L3398:
+	b	.L3363
+.L3403:
 	ldr	r3, [r5, #1796]
 	cmp	r3, #0
 	moveq	r10, #1
 	movne	r10, #2
-.L3397:
+.L3402:
 	ldrh	r3, [r8, #-8]
 	movw	r0, #65535
-	ldr	r2, .L3521+12
+	ldr	r2, .L3526+12
 	cmp	r3, r0
 	sub	r1, r2, #3792
-	bne	.L3406
+	bne	.L3411
 	cmp	r4, r3
 	strneh	r4, [r1, #-8]	@ movhi
-	bne	.L3408
+	bne	.L3413
 	sub	r1, r2, #3168
 	ldrh	r3, [r1, #-14]
 	cmp	r3, r4
-	beq	.L3408
+	beq	.L3413
 	ldr	r2, [r2, #-4060]
 	mov	r3, r3, asl #1
 	ldrh	r3, [r2, r3]
@@ -20678,35 +20706,35 @@ ftl_do_gc:
 	strh	r3, [r8, #-8]	@ movhi
 	mvn	r3, #0
 	strh	r3, [r6, #-14]	@ movhi
-.L3408:
+.L3413:
 	ldrh	r0, [r8, #-8]
 	mov	r3, #0
 	strb	r3, [r7, #-3792]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L3406
+	beq	.L3411
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	ldrne	r3, .L3521+20
+	ldrne	r3, .L3526+20
 	mvnne	r2, #0
 	strneh	r2, [r3, #-8]	@ movhi
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3412
+	beq	.L3417
 	ldrh	r0, [r8, #-8]
 	bl	ftl_get_blk_mode
 	strb	r0, [r7, #-3792]
-.L3412:
+.L3417:
 	ldrh	r2, [r8, #-8]
 	movw	r3, #65535
-	ldr	r6, .L3521+12
+	ldr	r6, .L3526+12
 	cmp	r2, r3
 	sub	r7, r6, #3792
 	sub	r5, r7, #8
-	beq	.L3406
+	beq	.L3411
 	mov	r0, r5
 	bl	make_superblock
-	ldr	r3, .L3521+44
+	ldr	r3, .L3526+44
 	movw	r1, #446
 	mov	r2, #0
 	strh	r2, [r7, #-6]	@ movhi
@@ -20718,35 +20746,35 @@ ftl_do_gc:
 	mov	r2, r2, asl #1
 	ldrh	r2, [r1, r2]
 	strh	r2, [r3]	@ movhi
-.L3406:
+.L3411:
 	ldrh	r3, [r8, #-8]
 	ldrh	r2, [r9, #-8]
 	cmp	r2, r3
-	beq	.L3413
-	ldr	r2, .L3521+48
+	beq	.L3418
+	ldr	r2, .L3526+48
 	ldrh	r1, [r2, #-8]
 	cmp	r1, r3
-	beq	.L3413
+	beq	.L3418
 	ldrh	r2, [r2, #40]
 	cmp	r2, r3
-	bne	.L3447
-.L3413:
-	ldr	r3, .L3521+20
+	bne	.L3452
+.L3418:
+	ldr	r3, .L3526+20
 	mvn	r2, #0
 	strh	r2, [r3, #-8]	@ movhi
-.L3447:
-	ldr	r7, .L3521+52
+.L3452:
+	ldr	r7, .L3526+52
 	movw	r3, #65535
-	ldr	r6, .L3521+12
+	ldr	r6, .L3526+12
 	ldrh	r2, [r7]
 	mov	fp, r7
 	mov	r8, r6
 	cmp	r2, r3
-	bne	.L3415
+	bne	.L3420
 	mov	r3, #0
 	str	r3, [r6, #-3224]
-.L3416:
-	ldr	r9, .L3521+56
+.L3421:
+	ldr	r9, .L3526+56
 	ldrh	r5, [r9]
 	mov	r0, r5
 	bl	List_get_gc_head_node
@@ -20757,83 +20785,83 @@ ftl_do_gc:
 	moveq	r3, #0
 	moveq	r0, #8
 	streqh	r3, [r9]	@ movhi
-	beq	.L3358
-.L3417:
+	beq	.L3363
+.L3422:
 	mov	r0, r3
 	str	r3, [sp, #8]
 	bl	IsBlkInGcList
 	add	r5, r5, #1
 	cmp	r0, #0
 	ldr	r3, [sp, #8]
-	ldrne	r3, .L3521+56
+	ldrne	r3, .L3526+56
 	strneh	r5, [r3]	@ movhi
-	bne	.L3416
-	ldr	r2, .L3521+56
+	bne	.L3421
+	ldr	r2, .L3526+56
 	uxth	r5, r5
 	ldr	r0, [r8, #-4060]
 	mov	r1, r3, asl #1
 	strh	r5, [r2]	@ movhi
-	ldr	r2, .L3521+36
+	ldr	r2, .L3526+36
 	ldrh	ip, [r0, r1]
 	ldrh	lr, [r2]
 	ldrh	r2, [r2, #-68]
 	mul	r2, r2, lr
 	add	lr, r2, r2, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L3420
+	bgt	.L3425
 	cmp	ip, #8
 	cmphi	r5, #48
-	bls	.L3421
+	bls	.L3426
 	ldrh	ip, [r9, #36]
 	cmp	ip, #35
-	bhi	.L3421
-.L3420:
-	ldr	lr, .L3521+56
+	bhi	.L3426
+.L3425:
+	ldr	lr, .L3526+56
 	mov	ip, #0
 	strh	ip, [lr]	@ movhi
-.L3421:
+.L3426:
 	ldrh	r1, [r0, r1]
 	movw	r0, #65535
 	cmp	r1, r2
 	cmpge	r4, r0
-	bne	.L3422
-	ldr	r2, .L3521+56
+	bne	.L3427
+	ldr	r2, .L3526+56
 	ldrh	r0, [r2]
 	cmp	r0, #3
-	bhi	.L3422
+	bhi	.L3427
 	sub	r3, r2, #564
 	mvn	r1, #0
 	strh	r1, [r3, #-8]	@ movhi
 	mov	r3, #0
 	strh	r3, [r2]	@ movhi
-	b	.L3516
-.L3422:
+	b	.L3521
+.L3427:
 	cmp	r1, #0
-	bne	.L3423
+	bne	.L3428
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L3521+56
-	ldr	r2, .L3521+56
+	ldr	r3, .L3526+56
+	ldr	r2, .L3526+56
 	ldrh	r3, [r3]
 	add	r3, r3, #1
 	strh	r3, [r2]	@ movhi
-	b	.L3416
-.L3423:
+	b	.L3421
+.L3428:
 	mov	r2, #0
 	strb	r2, [r6, #-3792]
-	ldr	r2, .L3521
+	ldr	r2, .L3526
 	ldrb	r2, [r2, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3424
+	beq	.L3429
 	mov	r0, r3
 	bl	ftl_get_blk_mode
-	ldr	r3, .L3521+12
+	ldr	r3, .L3526+12
 	strb	r0, [r3, #-3792]
-.L3424:
-	ldr	r0, .L3521+52
+.L3429:
+	ldr	r0, .L3526+52
 	bl	make_superblock
 	ldrh	r2, [r7]
-	ldr	r1, .L3521+60
+	ldr	r1, .L3526+60
 	mov	r3, #0
 	ldr	r0, [r6, #-4060]
 	mov	r2, r2, asl #1
@@ -20842,58 +20870,58 @@ ftl_do_gc:
 	strh	r3, [r7, #2]	@ movhi
 	strb	r3, [r6, #-3794]
 	strh	r2, [r1, #2]	@ movhi
-.L3415:
+.L3420:
 	ldr	r3, [sp, #12]
 	cmp	r3, #1
-	bne	.L3425
+	bne	.L3430
 	bl	FtlReadRefresh
-.L3425:
+.L3430:
 	mov	r3, #1
 	str	r3, [r6, #-2100]
-	ldr	r3, .L3521
+	ldr	r3, .L3526
 	add	r2, r3, #1872
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	ldrh	r2, [r2]
 	cmp	r3, #0
 	str	r2, [sp, #8]
-	beq	.L3426
-	ldr	r3, .L3521+12
+	beq	.L3431
+	ldr	r3, .L3526+12
 	ldrb	r3, [r3, #-3792]	@ zero_extendqisi2
 	cmp	r3, #1
-	ldreq	r3, .L3521+64
+	ldreq	r3, .L3526+64
 	ldreqh	r3, [r3]
 	streq	r3, [sp, #8]
-.L3426:
+.L3431:
 	ldrh	r3, [r7, #2]
 	mov	r7, #0
 	ldr	r1, [sp, #8]
 	add	r2, r3, r10
-	ldr	r5, .L3521+12
+	ldr	r5, .L3526+12
 	cmp	r2, r1
 	movgt	r2, r1
 	rsbgt	r3, r3, r2
 	uxthgt	r10, r3
-.L3428:
+.L3433:
 	uxth	r3, r7
-	ldr	r6, .L3521+12
+	ldr	r6, .L3526+12
 	cmp	r3, r10
-	ldr	r8, .L3521+52
-	bcs	.L3435
-	ldr	r3, .L3521+68
+	ldr	r8, .L3526+52
+	bcs	.L3440
+	ldr	r3, .L3526+68
 	movw	lr, #65535
 	ldr	r8, [r5, #-3204]
 	mov	ip, #36
 	ldrh	r9, [r3]
-	ldr	r3, .L3521+52
+	ldr	r3, .L3526+52
 	add	r0, r3, #14
 	ldrh	r1, [r3, #2]
 	mov	r3, #0
 	mov	r6, r3
 	add	r1, r1, r7
-.L3436:
+.L3441:
 	uxth	r2, r3
 	cmp	r2, r9
-	bcs	.L3519
+	bcs	.L3524
 	ldrh	r2, [r0, #2]!
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -20902,17 +20930,17 @@ ftl_do_gc:
 	addne	r6, r6, #1
 	uxthne	r6, r6
 	strne	r2, [fp, #4]
-	b	.L3436
-.L3519:
+	b	.L3441
+.L3524:
 	ldr	r0, [r5, #-3204]
 	mov	r1, r6
 	ldrb	r2, [r5, #-3792]	@ zero_extendqisi2
 	mov	r9, #0
 	bl	FlashReadPages
-.L3431:
+.L3436:
 	uxth	r3, r9
 	cmp	r3, r6
-	bcs	.L3520
+	bcs	.L3525
 	mov	r3, #36
 	ldr	r2, [r5, #-3204]
 	mul	r8, r3, r9
@@ -20920,11 +20948,11 @@ ftl_do_gc:
 	ldr	r2, [r2, r8]
 	ldr	fp, [r1, #12]
 	cmn	r2, #1
-	beq	.L3468
+	beq	.L3473
 	ldrh	r1, [fp]
 	movw	r2, #61589
 	cmp	r1, r2
-	bne	.L3468
+	bne	.L3473
 	add	r1, sp, r3
 	mov	r2, #0
 	ldr	r0, [fp, #8]
@@ -20937,9 +20965,9 @@ ftl_do_gc:
 	ldr	r3, [sp, #16]
 	bic	r1, r1, #-2147483648
 	cmp	r1, r0
-	bne	.L3468
-	ldr	r1, .L3521+60
-	ldr	r0, .L3521+60
+	bne	.L3473
+	ldr	r1, .L3526+60
+	ldr	r0, .L3526+60
 	ldr	r2, [r2, #16]
 	ldrh	r1, [r1]
 	str	r3, [sp, #20]
@@ -20966,7 +20994,7 @@ ftl_do_gc:
 	str	r2, [r3, #12]
 	ldr	r3, [sp, #36]
 	str	r3, [fp, #12]
-	ldr	r3, .L3521+72
+	ldr	r3, .L3526+72
 	ldrh	r3, [r3]
 	strh	r3, [fp, #2]	@ movhi
 	ldr	r3, [r5, #-3844]
@@ -20977,89 +21005,89 @@ ftl_do_gc:
 	add	r3, r3, #1
 	str	r3, [r5, #-3220]
 	bl	FtlGcBufAlloc
-	ldr	r3, .L3521
+	ldr	r3, .L3526
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L3433
+	bne	.L3438
 	ldrb	r3, [r5, #-3937]	@ zero_extendqisi2
 	ldr	r2, [r5, #-3220]
 	cmp	r2, r3
-	beq	.L3433
-	ldr	r3, .L3521+72
+	beq	.L3438
+	ldr	r3, .L3526+72
 	ldrh	r3, [r3, #4]
 	cmp	r3, #0
-	bne	.L3468
-.L3433:
+	bne	.L3473
+.L3438:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	beq	.L3468
-	ldr	r3, .L3521+12
+	beq	.L3473
+	ldr	r3, .L3526+12
 	mov	r2, #0
 	mvn	r1, #0
 	sub	r3, r3, #3792
 	str	r2, [r3, #1692]
 	strh	r1, [r3, #-8]	@ movhi
 	strh	r2, [r3, #-6]	@ movhi
-	b	.L3516
-.L3468:
+	b	.L3521
+.L3473:
 	add	r9, r9, #1
-	b	.L3431
-.L3520:
+	b	.L3436
+.L3525:
 	add	r7, r7, #1
-	b	.L3428
-.L3435:
+	b	.L3433
+.L3440:
 	ldrh	r3, [r8, #2]
 	add	r10, r10, r3
 	ldr	r3, [sp, #8]
 	uxth	r10, r10
 	strh	r10, [r8, #2]	@ movhi
 	cmp	r10, r3
-	bcc	.L3437
+	bcc	.L3442
 	ldr	r3, [r6, #-3220]
 	cmp	r3, #0
-	beq	.L3438
+	beq	.L3443
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	beq	.L3438
+	beq	.L3443
 	mov	r3, #0
 	str	r3, [r6, #-2100]
-.L3516:
-	ldr	r3, .L3521+24
+.L3521:
+	ldr	r3, .L3526+24
 	ldrh	r0, [r3]
-	b	.L3358
-.L3438:
-	ldr	r3, .L3521+60
+	b	.L3363
+.L3443:
+	ldr	r3, .L3526+60
 	ldrh	r5, [r3]
 	cmp	r5, #0
-	bne	.L3439
+	bne	.L3444
 	ldrh	r3, [r8]
 	ldr	r2, [r6, #-4060]
 	mov	r3, r3, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L3439
-	ldr	r7, .L3521
-.L3440:
+	beq	.L3444
+	ldr	r7, .L3526
+.L3445:
 	ldr	r3, [r7, #1932]
 	cmp	r5, r3
-	bcs	.L3445
+	bcs	.L3450
 	mov	r0, r5
 	add	r1, sp, #40
 	mov	r2, #0
 	bl	log2phys
 	ldr	r0, [sp, #40]
 	cmn	r0, #1
-	beq	.L3441
+	beq	.L3446
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r8]
 	cmp	r3, r0
-	bne	.L3441
-.L3445:
-	ldr	r3, .L3521
+	bne	.L3446
+.L3450:
+	ldr	r3, .L3526
 	ldr	r3, [r3, #1932]
 	cmp	r5, r3
-	bcc	.L3439
+	bcc	.L3444
 	ldrh	r3, [r8]
 	mov	r1, #0
 	ldr	r2, [r6, #-4060]
@@ -21070,40 +21098,40 @@ ftl_do_gc:
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L3439
-.L3441:
+	b	.L3444
+.L3446:
 	add	r5, r5, #1
-	b	.L3440
-.L3439:
+	b	.L3445
+.L3444:
 	mvn	r3, #0
 	strh	r3, [r8]	@ movhi
-.L3437:
-	ldr	r3, .L3521+76
+.L3442:
+	ldr	r3, .L3526+76
 	ldrh	r3, [r3]
 	cmp	r3, #2
-	ldrls	r3, .L3521+36
+	ldrls	r3, .L3526+36
 	ldrlsh	r10, [r3]
-	bls	.L3447
-.L3446:
-	ldr	r2, .L3521+12
+	bls	.L3452
+.L3451:
+	ldr	r2, .L3526+12
 	mov	r1, #0
 	str	r1, [r2, #-2100]
-	ldr	r2, .L3521+24
+	ldr	r2, .L3526+24
 	ldrh	r0, [r2]
 	cmp	r0, r1
 	addeq	r0, r3, #1
-.L3358:
-	ldr	r3, .L3521+4
+.L3363:
+	ldr	r3, .L3526+4
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3451
+	beq	.L3456
 	bl	__stack_chk_fail
-.L3518:
+.L3523:
 	sub	r3, r9, #3168
 	ldrh	fp, [r3, #-14]
 	cmp	fp, r4
-	bne	.L3374
+	bne	.L3379
 	sub	r3, r9, #4032
 	ldr	r1, [r9, #-3232]
 	ldrh	r2, [r3, #-12]
@@ -21112,8 +21140,8 @@ ftl_do_gc:
 	movcs	r2, #1024
 	cmp	r1, r2
 	movls	r4, fp
-	bls	.L3374
-	ldr	r1, .L3521+24
+	bls	.L3379
+	ldr	r1, .L3526+24
 	mov	r2, #0
 	str	r3, [sp, #16]
 	str	r2, [r7, #-3232]
@@ -21123,33 +21151,33 @@ ftl_do_gc:
 	mov	r4, r0
 	sub	fp, r9, #3232
 	ldr	r3, [sp, #16]
-	bne	.L3376
+	bne	.L3381
 	ldrh	r2, [r3, #-12]
 	ldrh	r3, [fp, #-2]
 	cmp	r2, r3
-	bcs	.L3377
+	bcs	.L3382
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r4
-	beq	.L3386
+	beq	.L3391
 	ldr	r2, [r9, #-2104]
-	ldr	r1, .L3521+80
+	ldr	r1, .L3526+80
 	cmp	r2, #0
-	bne	.L3379
+	bne	.L3384
 	ldrh	r0, [r1]
 	cmp	r0, #3
-	beq	.L3379
+	beq	.L3384
 	ldr	r0, [r9, #-3752]
 	cmp	r0, #0
-	bne	.L3379
+	bne	.L3384
 	ldr	r0, [r1, #-28]
 	cmp	r0, #0
-	bne	.L3379
+	bne	.L3384
 	ldrb	r0, [r1, #-1684]	@ zero_extendqisi2
 	cmp	r0, #0
-	beq	.L3380
-.L3379:
+	beq	.L3385
+.L3384:
 	ldr	r2, [r7, #-4060]
 	mov	r3, r3, asl #1
 	ldrh	r1, [r1]
@@ -21164,7 +21192,7 @@ ftl_do_gc:
 	movne	r3, #0
 	add	r3, r2, r3
 	cmp	r0, r3
-	bgt	.L3382
+	bgt	.L3387
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	ldr	r3, [r5, #1932]
@@ -21173,58 +21201,58 @@ ftl_do_gc:
 	cmp	r2, r3, lsr #2
 	movls	r3, #160
 	uxth	r4, r0
-	bls	.L3514
-	b	.L3517
-.L3380:
+	bls	.L3519
+	b	.L3522
+.L3385:
 	ldr	r2, [r9, #-4060]
 	mov	r3, r3, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #7
-	bhi	.L3385
+	bhi	.L3390
 	bl	List_get_gc_head_node
 	uxth	r4, r0
-.L3517:
+.L3522:
 	mov	r3, #128
-.L3514:
+.L3519:
 	strh	r3, [fp, #-2]	@ movhi
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L3386
-	b	.L3376
-.L3382:
+	beq	.L3391
+	b	.L3381
+.L3387:
 	mov	r3, #128
-	b	.L3515
-.L3385:
+	b	.L3520
+.L3390:
 	mov	r3, #64
-	b	.L3515
-.L3377:
+	b	.L3520
+.L3382:
 	mov	r3, #80
-.L3515:
+.L3520:
 	strh	r3, [fp, #-2]	@ movhi
-	b	.L3386
-.L3376:
+	b	.L3391
+.L3381:
 	ldr	r0, [r5, #4060]
 	mov	r1, r4, asl #1
 	ldr	r3, [r7, #-4060]
 	ldrh	r2, [r10, #-12]
 	ldrh	r3, [r3, r1]
 	ldrh	r1, [r0, r1]
-	ldr	r0, .L3521+84
+	ldr	r0, .L3526+84
 	str	r1, [sp]
 	ldrh	r1, [fp, #-4]
 	str	r1, [sp, #4]
 	mov	r1, r4
 	bl	printk
-.L3386:
+.L3391:
 	bl	FtlGcReFreshBadBlk
-	b	.L3374
-.L3451:
+	b	.L3379
+.L3456:
 	add	sp, sp, #52
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3522:
+.L3527:
 	.align	2
-.L3521:
+.L3526:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
@@ -21232,7 +21260,7 @@ ftl_do_gc:
 	.word	.LANCHOR2-3168
 	.word	.LANCHOR2-3792
 	.word	.LANCHOR4+444
-	.word	.LC151
+	.word	.LC152
 	.word	.LANCHOR2-4032
 	.word	.LANCHOR0+1872
 	.word	.LANCHOR2-3808
@@ -21246,7 +21274,7 @@ ftl_do_gc:
 	.word	.LANCHOR2-3944
 	.word	.LANCHOR2-4044
 	.word	.LANCHOR0+1824
-	.word	.LC152
+	.word	.LC153
 	.fnend
 	.size	ftl_do_gc, .-ftl_do_gc
 	.align	2
@@ -21256,47 +21284,47 @@ FtlCacheWriteBack:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3568
+	ldr	r3, .L3573
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
 	ldr	r2, [r3]
-	ldr	r4, .L3568+4
+	ldr	r4, .L3573+4
 	str	r3, [sp, #4]
 	str	r2, [sp, #12]
-	ldr	r2, .L3568+8
+	ldr	r2, .L3573+8
 	ldr	r5, [r2, #452]
 	ldr	r2, [r4, #4052]
 	cmp	r2, #0
-	bne	.L3525
+	bne	.L3530
 	ldr	r1, [r4, #1924]
 	cmp	r1, #0
-	beq	.L3525
+	beq	.L3530
 	ldrb	r6, [r4, #140]	@ zero_extendqisi2
 	mov	r8, #0
 	ldr	r0, [r4, #1928]
 	cmp	r6, #0
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
-	ldr	r9, .L3568+4
+	ldr	r9, .L3573+4
 	ldrneb	r6, [r5, #8]	@ zero_extendqisi2
-	ldr	r10, .L3568+12
+	ldr	r10, .L3573+12
 	subne	r6, r6, #1
 	clzne	r6, r6
 	movne	r6, r6, lsr #5
 	mov	r2, r6
 	bl	FlashProgPages
-.L3528:
+.L3533:
 	ldr	r3, [r4, #1924]
 	cmp	r8, r3
-	bcs	.L3546
+	bcs	.L3551
 	mov	r7, #36
 	ldr	r3, [r9, #1928]
 	mul	r7, r7, r8
 	add	r2, r3, r7
 	ldr	r3, [r3, r7]
 	cmn	r3, #1
-	beq	.L3550
+	beq	.L3555
 	ldr	r3, [r2, #4]
 	cmp	r6, #0
 	ldr	r0, [r2, #16]
@@ -21310,7 +21338,7 @@ FtlCacheWriteBack:
 	ldr	r3, [r7, #12]
 	ldr	r0, [r3, #12]
 	cmn	r0, #1
-	beq	.L3532
+	beq	.L3537
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r10, #-4060]
@@ -21318,58 +21346,58 @@ FtlCacheWriteBack:
 	mov	r7, r0
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L3533
-	ldr	r0, .L3568+16
+	bne	.L3538
+	ldr	r0, .L3573+16
 	mov	r1, r7
 	bl	printk
-.L3533:
+.L3538:
 	mov	r0, r7
 	bl	decrement_vpc_count
-.L3532:
+.L3537:
 	add	r8, r8, #1
-	b	.L3528
-.L3566:
-	ldr	r6, .L3568+20
+	b	.L3533
+.L3571:
+	ldr	r6, .L3573+20
 	movw	r5, #16386
-.L3545:
+.L3550:
 	ldrh	r3, [r6]
 	cmp	r3, #0
-	beq	.L3546
+	beq	.L3551
 	mov	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	subs	r5, r5, #1
-	bne	.L3545
-.L3546:
+	bne	.L3550
+.L3551:
 	mov	r3, #0
 	str	r3, [r4, #1924]
-	b	.L3525
-.L3550:
-	ldr	r10, .L3568+4
+	b	.L3530
+.L3555:
+	ldr	r10, .L3573+4
 	mov	r8, #0
-	ldr	r9, .L3568+12
-.L3529:
+	ldr	r9, .L3573+12
+.L3534:
 	ldr	r3, [r4, #1924]
 	cmp	r8, r3
-	bcs	.L3566
+	bcs	.L3571
 	mov	r7, #36
 	ldr	r3, [r10, #1928]
 	mul	r7, r7, r8
-	ldr	fp, .L3568+24
+	ldr	fp, .L3573+24
 	mvn	r2, #0
 	str	r2, [r3, r7]
-.L3535:
+.L3540:
 	ldr	r3, [r4, #1928]
 	add	r2, r3, r7
 	ldr	r3, [r3, r7]
 	cmn	r3, #1
-	bne	.L3567
+	bne	.L3572
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r5]
 	cmp	r3, r0
-	bne	.L3536
+	bne	.L3541
 	ldr	r1, [r9, #-4060]
 	mov	r3, r3, asl #1
 	ldrh	r0, [r5, #4]
@@ -21381,13 +21409,13 @@ FtlCacheWriteBack:
 	mov	r3, #0
 	strb	r3, [r5, #6]
 	strh	r3, [r5, #4]	@ movhi
-.L3536:
+.L3541:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	bne	.L3537
+	bne	.L3542
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L3537:
+.L3542:
 	ldr	r3, [r9, #-3652]
 	add	r3, r3, #1
 	str	r3, [r9, #-3652]
@@ -21414,9 +21442,9 @@ FtlCacheWriteBack:
 	streq	r3, [r10, #4052]
 	ldr	r3, [r4, #4052]
 	cmp	r3, #0
-	beq	.L3535
-	b	.L3525
-.L3567:
+	beq	.L3540
+	b	.L3530
+.L3572:
 	ldr	r3, [r2, #4]
 	cmp	r6, #0
 	ldr	r0, [r2, #16]
@@ -21430,7 +21458,7 @@ FtlCacheWriteBack:
 	ldr	r3, [r7, #12]
 	ldr	r0, [r3, #12]
 	cmn	r0, #1
-	beq	.L3542
+	beq	.L3547
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r9, #-4060]
@@ -21438,36 +21466,36 @@ FtlCacheWriteBack:
 	mov	r7, r0
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L3543
-	ldr	r0, .L3568+16
+	bne	.L3548
+	ldr	r0, .L3573+16
 	mov	r1, r7
 	bl	printk
-.L3543:
+.L3548:
 	mov	r0, r7
 	bl	decrement_vpc_count
-.L3542:
+.L3547:
 	add	r8, r8, #1
-	b	.L3529
-.L3525:
+	b	.L3534
+.L3530:
 	ldr	r3, [sp, #4]
 	mov	r0, #0
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3548
+	beq	.L3553
 	bl	__stack_chk_fail
-.L3548:
+.L3553:
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3569:
+.L3574:
 	.align	2
-.L3568:
+.L3573:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR4
 	.word	.LANCHOR2
-	.word	.LC153
+	.word	.LC154
 	.word	.LANCHOR2-3174
 	.word	.LANCHOR0+1872
 	.fnend
@@ -21481,25 +21509,25 @@ FtlSysFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3576
+	ldr	r3, .L3581
 	ldr	r3, [r3, #4052]
 	cmp	r3, #0
-	bne	.L3571
-	ldr	r3, .L3576+4
+	bne	.L3576
+	ldr	r3, .L3581+4
 	ldr	r3, [r3, #504]
 	cmn	r3, #1
-	beq	.L3571
+	beq	.L3576
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	mov	r0, #1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3571:
+.L3576:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L3577:
+.L3582:
 	.align	2
-.L3576:
+.L3581:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -21513,17 +21541,17 @@ FtlDeInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3581
+	ldr	r3, .L3586
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
-	bne	.L3579
+	bne	.L3584
 	bl	FtlSysFlush
-.L3579:
+.L3584:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L3582:
+.L3587:
 	.align	2
-.L3581:
+.L3586:
 	.word	.LANCHOR1
 	.fnend
 	.size	FtlDeInit, .-FtlDeInit
@@ -21552,14 +21580,14 @@ rk_ftl_de_init:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	mov	r1, #0
-	ldr	r0, .L3587
+	ldr	r0, .L3592
 	bl	printk
 	ldmfd	sp!, {r3, lr}
 	b	ftl_deinit
-.L3588:
+.L3593:
 	.align	2
-.L3587:
-	.word	.LC154
+.L3592:
+	.word	.LC155
 	.fnend
 	.size	rk_ftl_de_init, .-rk_ftl_de_init
 	.align	2
@@ -21595,9 +21623,9 @@ ftl_discard:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r6, .L3611
+	ldr	r6, .L3616
 	add	r2, r0, r1
-	ldr	r4, .L3611+4
+	ldr	r4, .L3616+4
 	mov	r7, r0
 	mov	r5, r1
 	ldr	r3, [r6]
@@ -21605,16 +21633,16 @@ ftl_discard:
 	ldr	r3, [r4, #1912]
 	cmp	r2, r3
 	mvnhi	r0, #0
-	bhi	.L3592
-	ldr	r3, .L3611+8
+	bhi	.L3597
+	ldr	r3, .L3616+8
 	ldr	r0, [r3, #504]
 	cmn	r0, #1
-	beq	.L3592
+	beq	.L3597
 	cmp	r1, #31
-	bls	.L3602
+	bls	.L3607
 	ldr	r3, [r4, #4052]
 	cmp	r3, #0
-	bne	.L3602
+	bne	.L3607
 	bl	FtlCacheWriteBack
 	movw	r3, #1878
 	ldrh	r4, [r4, r3]
@@ -21626,31 +21654,31 @@ ftl_discard:
 	rsb	r7, r3, r7
 	uxth	r7, r7
 	cmp	r7, #0
-	beq	.L3593
+	beq	.L3598
 	rsb	r4, r7, r4
 	add	r8, r0, #1
 	cmp	r4, r5
 	movcs	r4, r5
 	uxth	r4, r4
 	rsb	r5, r4, r5
-.L3593:
-	ldr	r4, .L3611+12
+.L3598:
+	ldr	r4, .L3616+12
 	mvn	r3, #0
-	ldr	r9, .L3611+16
+	ldr	r9, .L3616+16
 	str	r3, [sp, #8]
 	mov	r7, r4
-.L3594:
+.L3599:
 	ldrh	r3, [r4]
 	cmp	r5, r3
-	bcc	.L3610
+	bcc	.L3615
 	mov	r0, r8
 	add	r1, sp, #4
 	mov	r2, #0
 	bl	log2phys
 	ldr	r3, [sp, #4]
 	cmn	r3, #1
-	beq	.L3595
-	ldr	r2, .L3611+20
+	beq	.L3600
+	ldr	r2, .L3616+20
 	add	r1, sp, #8
 	ldr	r3, [r9, #456]
 	mov	r0, r8
@@ -21665,35 +21693,35 @@ ftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L3595:
+.L3600:
 	ldrh	r3, [r7]
 	add	r8, r8, #1
 	rsb	r5, r3, r5
-	b	.L3594
-.L3610:
-	ldr	r3, .L3611+16
+	b	.L3599
+.L3615:
+	ldr	r3, .L3616+16
 	ldr	r2, [r3, #456]
 	cmp	r2, #32
-	bls	.L3602
+	bls	.L3607
 	mov	r2, #0
 	str	r2, [r3, #456]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L3602:
+.L3607:
 	mov	r0, #0
-.L3592:
+.L3597:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L3598
+	beq	.L3603
 	bl	__stack_chk_fail
-.L3598:
+.L3603:
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
-.L3612:
+.L3617:
 	.align	2
-.L3611:
+.L3616:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -21723,35 +21751,35 @@ ftl_read:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r3
-	ldr	r3, .L3662
+	ldr	r3, .L3667
 	.pad #84
 	sub	sp, sp, #84
 	str	r2, [sp, #36]
 	ldr	r3, [r3]
 	str	r3, [sp, #76]
-	ldr	r3, .L3662+4
+	ldr	r3, .L3667+4
 	ldr	r3, [r3, #504]
 	cmn	r3, #1
 	moveq	r0, r3
-	beq	.L3615
+	beq	.L3620
 	cmp	r0, #16
 	mov	r7, r1
-	bne	.L3616
+	bne	.L3621
 	add	r0, r1, #256
 	mov	r1, r2
 	mov	r2, r8
 	bl	FtlVendorPartRead
-	b	.L3615
-.L3616:
+	b	.L3620
+.L3621:
 	ldr	r3, [sp, #36]
 	add	r3, r1, r3
 	str	r3, [sp, #40]
-	ldr	r3, .L3662+8
+	ldr	r3, .L3667+8
 	ldr	r1, [sp, #40]
 	ldr	r2, [r3, #1912]
 	cmp	r1, r2
 	mvnhi	r0, #0
-	bhi	.L3615
+	bhi	.L3620
 	movw	r2, #1878
 	mov	r0, r7
 	ldrh	r4, [r3, r2]
@@ -21765,7 +21793,7 @@ ftl_read:
 	rsb	r3, r10, #1
 	add	r3, r3, r0
 	str	r3, [sp, #28]
-	ldr	r3, .L3662+12
+	ldr	r3, .L3667+12
 	ldr	r1, [sp, #36]
 	str	r0, [sp, #32]
 	mov	r0, r10
@@ -21779,32 +21807,32 @@ ftl_read:
 	str	r2, [r3, #-3880]
 	bl	FtlCacheMetchLpa
 	cmp	r0, #0
-	beq	.L3617
+	beq	.L3622
 	bl	FtlCacheWriteBack
-.L3617:
-	ldr	r4, .L3662+12
+.L3622:
+	ldr	r4, .L3667+12
 	mov	r9, #0
 	mov	r5, r10
 	mov	r6, r9
 	str	r9, [sp, #48]
 	str	r9, [sp, #52]
-.L3618:
+.L3623:
 	ldr	r3, [sp, #28]
 	cmp	r3, #0
-	beq	.L3661
+	beq	.L3666
 	mov	r0, r5
 	add	r1, sp, #72
 	mov	r2, #0
 	bl	log2phys
 	ldr	r3, [sp, #72]
 	cmn	r3, #1
-	bne	.L3657
+	bne	.L3662
 	mov	fp, #0
-.L3619:
-	ldr	r3, .L3662+16
+.L3624:
+	ldr	r3, .L3667+16
 	ldrh	r0, [r3]
 	cmp	fp, r0
-	bcs	.L3623
+	bcs	.L3628
 	mla	r0, r0, r5, fp
 	ldr	r2, [sp, #40]
 	cmp	r0, r7
@@ -21813,26 +21841,26 @@ ftl_read:
 	cmp	r0, r2
 	movcs	r3, #0
 	cmp	r3, #0
-	beq	.L3621
+	beq	.L3626
 	rsb	r0, r7, r0
 	mov	r1, #0
 	mov	r2, #512
 	add	r0, r8, r0, asl #9
 	bl	ftl_memset
-.L3621:
+.L3626:
 	add	fp, fp, #1
-	b	.L3619
-.L3657:
+	b	.L3624
+.L3662:
 	ldr	r2, [r4, #-2076]
 	mov	fp, #36
 	cmp	r5, r10
 	mla	fp, fp, r6, r2
 	str	r3, [fp, #4]
-	bne	.L3624
+	bne	.L3629
 	ldr	r3, [r4, #-2048]
 	mov	r0, r7
 	str	r3, [fp, #8]
-	ldr	r3, .L3662+16
+	ldr	r3, .L3667+16
 	ldrh	ip, [r3]
 	mov	r1, ip
 	str	ip, [sp, #44]
@@ -21846,31 +21874,31 @@ ftl_read:
 	cmp	r3, ip
 	str	r3, [sp, #48]
 	streq	r8, [fp, #8]
-	b	.L3625
-.L3624:
+	b	.L3630
+.L3629:
 	ldr	r3, [sp, #32]
 	cmp	r5, r3
-	bne	.L3626
+	bne	.L3631
 	ldr	r3, [r4, #-2044]
 	ldr	r1, [sp, #40]
 	str	r3, [fp, #8]
-	ldr	r3, .L3662+16
+	ldr	r3, .L3667+16
 	ldrh	r2, [r3]
 	mul	r3, r2, r5
 	rsb	r9, r3, r1
 	cmp	r9, r2
-	bne	.L3625
-	b	.L3659
-.L3626:
-	ldr	r3, .L3662+16
+	bne	.L3630
+	b	.L3664
+.L3631:
+	ldr	r3, .L3667+16
 	ldrh	r3, [r3]
 	mul	r3, r3, r5
-.L3659:
+.L3664:
 	rsb	r3, r7, r3
 	add	r3, r8, r3, asl #9
 	str	r3, [fp, #8]
-.L3625:
-	ldr	r3, .L3662+20
+.L3630:
+	ldr	r3, .L3667+20
 	ldr	r2, [r4, #-2036]
 	str	r5, [fp, #16]
 	ldrh	r3, [r3]
@@ -21879,19 +21907,19 @@ ftl_read:
 	bic	r3, r3, #3
 	add	r3, r2, r3
 	str	r3, [fp, #12]
-.L3623:
+.L3628:
 	ldr	r3, [sp, #28]
 	add	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #28]
-	beq	.L3627
-	ldr	r3, .L3662+24
+	beq	.L3632
+	ldr	r3, .L3667+24
 	ldrh	r3, [r3]
 	cmp	r6, r3, asl #3
-	bne	.L3618
-.L3627:
+	bne	.L3623
+.L3632:
 	cmp	r6, #0
-	beq	.L3618
+	beq	.L3623
 	ldr	r0, [r4, #-2076]
 	mov	r1, r6
 	mov	r2, #0
@@ -21906,7 +21934,7 @@ ftl_read:
 	str	r3, [sp, #68]
 	mov	r3, #0
 	str	r3, [sp, #44]
-.L3634:
+.L3639:
 	ldr	r3, [sp, #44]
 	mov	ip, #36
 	mul	fp, ip, r3
@@ -21914,34 +21942,34 @@ ftl_read:
 	add	r3, r3, fp
 	ldr	r2, [r3, #16]
 	cmp	r2, r10
-	bne	.L3629
+	bne	.L3634
 	ldr	r1, [r3, #8]
 	ldr	r3, [r4, #-2048]
 	cmp	r1, r3
-	bne	.L3630
+	bne	.L3635
 	ldr	r3, [sp, #60]
 	mov	r0, r8
 	ldr	r2, [sp, #64]
 	add	r1, r1, r3
-	b	.L3660
-.L3629:
+	b	.L3665
+.L3634:
 	ldr	r1, [sp, #32]
 	cmp	r2, r1
-	bne	.L3630
+	bne	.L3635
 	ldr	r1, [r3, #8]
 	ldr	r3, [r4, #-2044]
 	cmp	r1, r3
-	bne	.L3630
-	ldr	r3, .L3662+16
+	bne	.L3635
+	ldr	r3, .L3667+16
 	ldr	r2, [sp, #68]
 	ldrh	r0, [r3]
 	ldr	r3, [sp, #32]
 	mul	r0, r0, r3
 	rsb	r0, r7, r0
 	add	r0, r8, r0, asl #9
-.L3660:
+.L3665:
 	bl	ftl_memcpy
-.L3630:
+.L3635:
 	ldr	r2, [r4, #-2076]
 	add	r3, r2, fp
 	ldr	r1, [r2, fp]
@@ -21954,9 +21982,9 @@ ftl_read:
 	ldr	r1, [r3, #16]
 	ldr	r2, [r2, #8]
 	cmp	r1, r2
-	beq	.L3632
+	beq	.L3637
 	ldr	r2, [r4, #-3676]
-	ldr	r0, .L3662+28
+	ldr	r0, .L3667+28
 	add	r2, r2, #1
 	str	r2, [r4, #-3676]
 	ldr	lr, [r3, #12]
@@ -21975,48 +22003,48 @@ ftl_read:
 	ldr	r2, [r3, #4]
 	ldr	r3, [lr]
 	bl	printk
-.L3632:
+.L3637:
 	ldr	r3, [r4, #-2076]
 	add	r2, r3, fp
 	ldr	r3, [r3, fp]
 	cmp	r3, #256
-	bne	.L3633
+	bne	.L3638
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3633:
+.L3638:
 	ldr	r3, [sp, #44]
 	add	r3, r3, #1
 	str	r3, [sp, #44]
 	cmp	r3, r6
-	bne	.L3634
+	bne	.L3639
 	mov	r6, #0
-	b	.L3618
-.L3661:
-	ldr	r3, .L3662+32
+	b	.L3623
+.L3666:
+	ldr	r3, .L3667+32
 	ldrh	r3, [r3, #-6]
 	cmp	r3, #0
-	beq	.L3636
+	beq	.L3641
 	ldr	r0, [sp, #28]
 	mov	r1, #1
 	bl	ftl_do_gc
-.L3636:
+.L3641:
 	ldr	r0, [sp, #52]
-.L3615:
-	ldr	r3, .L3662
+.L3620:
+	ldr	r3, .L3667
 	ldr	r2, [sp, #76]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3637
+	beq	.L3642
 	bl	__stack_chk_fail
-.L3637:
+.L3642:
 	add	sp, sp, #84
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3663:
+.L3668:
 	.align	2
-.L3662:
+.L3667:
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
 	.word	.LANCHOR0
@@ -22024,7 +22052,7 @@ ftl_read:
 	.word	.LANCHOR0+1878
 	.word	.LANCHOR0+1884
 	.word	.LANCHOR0+1804
-	.word	.LC143
+	.word	.LC144
 	.word	.LANCHOR2-3168
 	.fnend
 	.size	ftl_read, .-ftl_read
@@ -22060,23 +22088,23 @@ FlashBootVendorRead:
 	mov	r6, r0
 	mov	r5, r1
 	bl	rknand_device_lock
-	ldr	r3, .L3670
+	ldr	r3, .L3675
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
 	mvnne	r4, #0
-	bne	.L3667
+	bne	.L3672
 	mov	r2, r4
 	mov	r0, r6
 	mov	r1, r5
 	bl	ftl_vendor_read
 	mov	r4, r0
-.L3667:
+.L3672:
 	bl	rknand_device_unlock
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3671:
+.L3676:
 	.align	2
-.L3670:
+.L3675:
 	.word	.LANCHOR1
 	.fnend
 	.size	FlashBootVendorRead, .-FlashBootVendorRead
@@ -22143,11 +22171,11 @@ FtlInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mvn	r3, #0
-	ldr	r2, .L3693
-	ldr	r5, .L3693+4
-	ldr	r6, .L3693+8
-	ldr	r1, .L3693+12
-	ldr	r0, .L3693+16
+	ldr	r2, .L3698
+	ldr	r5, .L3698+4
+	ldr	r6, .L3698+8
+	ldr	r1, .L3698+12
+	ldr	r0, .L3698+16
 	str	r3, [r6, #504]
 	mov	r3, #0
 	str	r3, [r2, #460]
@@ -22162,40 +22190,40 @@ FtlInit:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	ldrne	r0, .L3693+20
-	bne	.L3692
+	ldrne	r0, .L3698+20
+	bne	.L3697
 	bl	FtlSysBlkInit
 	subs	r4, r0, #0
-	beq	.L3679
-	ldr	r0, .L3693+24
-.L3692:
-	ldr	r1, .L3693+28
+	beq	.L3684
+	ldr	r0, .L3698+24
+.L3697:
+	ldr	r1, .L3698+28
 	bl	printk
-	b	.L3678
-.L3679:
+	b	.L3683
+.L3684:
 	mov	r1, #1
 	str	r1, [r6, #504]
 	bl	ftl_do_gc
-	ldr	r3, .L3693+32
+	ldr	r3, .L3698+32
 	ldrh	r7, [r3, #-12]
 	cmp	r7, #15
-	bhi	.L3680
-	ldr	r8, .L3693+36
+	bhi	.L3685
+	ldr	r8, .L3698+36
 	add	r5, r3, #232
 	sub	r6, r3, #12
-.L3683:
+.L3688:
 	ldrh	r3, [r5]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L3681
+	bne	.L3686
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	bne	.L3681
+	bne	.L3686
 	and	r0, r4, #7
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L3681:
+.L3686:
 	mov	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
@@ -22205,35 +22233,35 @@ FtlInit:
 	ldrh	r2, [r6]
 	add	r3, r7, #2
 	cmp	r2, r3
-	bhi	.L3678
+	bhi	.L3683
 	add	r4, r4, #1
 	cmp	r4, #1024
-	bne	.L3683
-	b	.L3678
-.L3680:
+	bne	.L3688
+	b	.L3683
+.L3685:
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3678
+	beq	.L3683
 	mov	r4, #128
-.L3685:
+.L3690:
 	mov	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	subs	r4, r4, #1
-	bne	.L3685
-.L3678:
+	bne	.L3690
+.L3683:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L3694:
+.L3699:
 	.align	2
-.L3693:
+.L3698:
 	.word	.LANCHOR4
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC77
 	.word	.LC76
-	.word	.LC155
 	.word	.LC156
+	.word	.LC157
 	.word	.LANCHOR3+108
 	.word	.LANCHOR2-4032
 	.word	.LANCHOR2-3182
@@ -22250,8 +22278,8 @@ rk_ftl_init:
 	.save {r4, r5, r6, lr}
 	mov	r0, #2048
 	bl	ftl_malloc
-	ldr	r6, .L3700
-	ldr	r4, .L3700+4
+	ldr	r6, .L3705
+	ldr	r4, .L3705+4
 	mov	r5, #0
 	mov	r1, r6
 	str	r5, [r1, #468]!
@@ -22261,7 +22289,7 @@ rk_ftl_init:
 	bl	rknand_get_reg_addr
 	ldr	r3, [r4, #144]
 	cmp	r3, r5
-	beq	.L3698
+	beq	.L3703
 	bl	rk_nandc_irq_init
 	mov	r1, r5
 	mov	r2, r5
@@ -22272,23 +22300,23 @@ rk_ftl_init:
 	ldr	r0, [r4, #144]
 	bl	FlashInit
 	subs	r4, r0, #0
-	bne	.L3697
+	bne	.L3702
 	bl	FtlInit
-.L3697:
+.L3702:
 	mov	r1, r4
-	ldr	r0, .L3700+8
+	ldr	r0, .L3705+8
 	bl	printk
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3698:
+.L3703:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3701:
+.L3706:
 	.align	2
-.L3700:
+.L3705:
 	.word	.LANCHOR4
 	.word	.LANCHOR2
-	.word	.LC157
+	.word	.LC158
 	.fnend
 	.size	rk_ftl_init, .-rk_ftl_init
 	.align	2
@@ -22298,7 +22326,7 @@ ftl_fix_nand_power_lost_error:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3719
+	ldr	r3, .L3724
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #68
@@ -22306,15 +22334,15 @@ ftl_fix_nand_power_lost_error:
 	ldr	r2, [r3]
 	str	r3, [sp]
 	str	r2, [sp, #60]
-	ldr	r2, .L3719+4
+	ldr	r2, .L3724+4
 	ldrb	r1, [r2, #140]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L3702
-	ldr	r9, .L3719+8
+	beq	.L3707
+	ldr	r9, .L3724+8
 	mov	r6, r2
-	ldr	r4, .L3719+12
+	ldr	r4, .L3724+12
 	movw	r5, #4097
-	ldr	r0, .L3719+16
+	ldr	r0, .L3724+16
 	ldrh	r8, [r9]
 	ldr	r3, [r4, #-4060]
 	mov	r7, r8, asl #1
@@ -22327,31 +22355,31 @@ ftl_fix_nand_power_lost_error:
 	sub	r3, r4, #3984
 	ldrh	r0, [r3, #-8]
 	bl	FtlGcRefreshOpenBlock
-	ldr	r0, .L3719+20
+	ldr	r0, .L3724+20
 	bl	allocate_new_data_superblock
-	ldr	r0, .L3719+24
+	ldr	r0, .L3724+24
 	bl	allocate_new_data_superblock
 	str	r9, [sp, #4]
-.L3704:
+.L3709:
 	subs	r5, r5, #1
-	beq	.L3708
+	beq	.L3713
 	mov	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	ldr	r3, [r4, #-4060]
 	ldrh	r3, [r3, r7]
 	cmp	r3, #0
-	bne	.L3704
-.L3708:
+	bne	.L3709
+.L3713:
 	ldr	r3, [r4, #-4060]
 	mov	r1, r8
-	ldr	r0, .L3719+16
+	ldr	r0, .L3724+16
 	ldrh	r2, [r3, r7]
 	bl	printk
 	ldr	r3, [r4, #-4060]
 	ldrh	r5, [r3, r7]
 	cmp	r5, #0
-	bne	.L3706
+	bne	.L3711
 	add	r0, sp, #64
 	movw	r10, #65535
 	mov	fp, #36
@@ -22363,10 +22391,10 @@ ftl_fix_nand_power_lost_error:
 	mov	r3, r5
 	mov	ip, r3
 	add	r0, sp, #26
-.L3709:
+.L3714:
 	uxth	r2, r3
 	cmp	r2, lr
-	bcs	.L3718
+	bcs	.L3723
 	ldrh	r2, [r0, #2]!
 	add	r3, r3, #1
 	cmp	r2, r10
@@ -22376,11 +22404,11 @@ ftl_fix_nand_power_lost_error:
 	uxthne	r5, r5
 	stmneib	r1, {r2, ip}
 	strne	ip, [r1, #12]
-	b	.L3709
-.L3718:
+	b	.L3714
+.L3723:
 	ldr	r3, [r4, #-4060]
 	mov	r1, r8
-	ldr	r0, .L3719+28
+	ldr	r0, .L3724+28
 	ldrh	r2, [r3, r7]
 	bl	printk
 	mov	r1, #0
@@ -22391,32 +22419,32 @@ ftl_fix_nand_power_lost_error:
 	mov	r1, #1
 	mov	r2, r5
 	bl	FlashEraseBlocks
-.L3706:
+.L3711:
 	ldr	r2, [sp, #4]
 	mvn	r3, #0
 	strh	r3, [r2]	@ movhi
-.L3702:
+.L3707:
 	ldr	r3, [sp]
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3712
+	beq	.L3717
 	bl	__stack_chk_fail
-.L3712:
+.L3717:
 	add	sp, sp, #68
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3720:
+.L3725:
 	.align	2
-.L3719:
+.L3724:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR4+308
 	.word	.LANCHOR2
-	.word	.LC158
+	.word	.LC159
 	.word	.LANCHOR2-4040
 	.word	.LANCHOR2-3992
-	.word	.LC159
+	.word	.LC160
 	.fnend
 	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
 	.align	2
@@ -22441,35 +22469,35 @@ ftl_write:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #108
 	sub	sp, sp, #108
-	ldr	r9, .L3796
+	ldr	r9, .L3801
 	str	r3, [sp, #4]
-	ldr	r3, .L3796+4
+	ldr	r3, .L3801+4
 	ldr	r3, [r3]
 	str	r3, [sp, #100]
 	ldr	r3, [r9, #4052]
 	cmp	r3, #0
-	bne	.L3764
+	bne	.L3769
 	mov	r8, r2
-	ldr	r2, .L3796+8
+	ldr	r2, .L3801+8
 	ldr	r2, [r2, #504]
 	cmn	r2, #1
 	moveq	r0, r3
-	beq	.L3723
+	beq	.L3728
 	cmp	r0, #16
 	mov	r7, r1
-	bne	.L3724
+	bne	.L3729
 	add	r0, r1, #256
 	ldr	r2, [sp, #4]
 	mov	r1, r8
 	bl	FtlVendorPartWrite
-	b	.L3723
-.L3724:
+	b	.L3728
+.L3729:
 	ldr	r3, [r9, #1912]
 	add	r5, r1, r8
 	cmp	r5, r3
 	mvnhi	r0, #0
-	bhi	.L3723
-	ldr	r6, .L3796+12
+	bhi	.L3728
+	ldr	r6, .L3801+12
 	mov	r3, #2048
 	mov	r0, r1
 	str	r3, [r6, #472]
@@ -22487,7 +22515,7 @@ ftl_write:
 	rsb	r5, r2, r0
 	add	r3, r5, #1
 	str	r3, [sp]
-	ldr	r3, .L3796+16
+	ldr	r3, .L3801+16
 	ldr	r1, [sp]
 	ldr	r2, [r3, #-3872]
 	add	r2, r1, r2
@@ -22500,7 +22528,7 @@ ftl_write:
 	movcc	r2, #0
 	cmp	r1, #0
 	str	r2, [sp, #20]
-	beq	.L3726
+	beq	.L3731
 	mov	r2, #36
 	ldr	r10, [r9, #1928]
 	mul	r2, r2, r1
@@ -22509,7 +22537,7 @@ ftl_write:
 	add	r10, r10, r2
 	ldr	r2, [r10, #16]
 	cmp	r1, r2
-	bne	.L3727
+	bne	.L3732
 	ldr	r2, [r3, #-3868]
 	mov	r1, r4
 	mov	r0, r7
@@ -22529,11 +22557,11 @@ ftl_write:
 	mov	r2, r9
 	bl	ftl_memcpy
 	cmp	r5, #0
-	bne	.L3728
+	bne	.L3733
 	ldr	r3, [r6, #476]
 	cmp	r3, #2
-	ble	.L3764
-.L3728:
+	ble	.L3769
+.L3733:
 	ldr	r3, [sp, #4]
 	rsb	r8, r4, r8
 	add	r7, r7, r4
@@ -22543,70 +22571,70 @@ ftl_write:
 	ldr	r3, [sp, #8]
 	add	r3, r3, #1
 	str	r3, [sp, #8]
-.L3727:
+.L3732:
 	mov	r3, #0
 	str	r3, [r6, #476]
-.L3726:
+.L3731:
 	ldr	r0, [sp, #8]
 	ldr	r1, [sp, #28]
 	bl	FtlCacheMetchLpa
 	cmp	r0, #0
-	beq	.L3729
+	beq	.L3734
 	bl	FtlCacheWriteBack
-.L3729:
-	ldr	r5, .L3796+20
+.L3734:
+	ldr	r5, .L3801+20
 	mov	r3, #0
-	ldr	r4, .L3796
+	ldr	r4, .L3801
 	str	r3, [sp, #12]
 	str	r5, [r6, #452]
 	ldr	r6, [sp, #8]
 	mov	r10, r4
 	str	r3, [sp, #32]
-.L3730:
+.L3735:
 	ldr	r3, [sp]
 	cmp	r3, #0
-	beq	.L3795
+	beq	.L3800
 	ldrh	r2, [r5, #4]
 	cmp	r2, #0
-	bne	.L3731
-	ldr	r3, .L3796+20
-	ldr	r9, .L3796+8
+	bne	.L3736
+	ldr	r3, .L3801+20
+	ldr	r9, .L3801+8
 	cmp	r5, r3
-	bne	.L3732
+	bne	.L3737
 	add	r0, r3, #48
 	ldrh	r5, [r0, #4]
 	cmp	r5, #0
-	bne	.L3733
+	bne	.L3738
 	bl	allocate_new_data_superblock
 	str	r5, [r9, #3292]
-.L3733:
-	ldr	r0, .L3796+20
+.L3738:
+	ldr	r0, .L3801+20
 	bl	allocate_new_data_superblock
 	ldr	r3, [r9, #3292]
 	cmp	r3, #0
-	ldrne	r5, .L3796+24
-	bne	.L3734
-.L3735:
-	ldr	r5, .L3796+20
-	b	.L3734
-.L3732:
+	ldrne	r5, .L3801+24
+	bne	.L3739
+.L3740:
+	ldr	r5, .L3801+20
+	b	.L3739
+.L3737:
 	ldrh	r3, [r3, #4]
 	str	r2, [r9, #3292]
 	cmp	r3, #0
-	bne	.L3735
+	bne	.L3740
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L3734:
+.L3739:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	bne	.L3736
+	bne	.L3741
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L3736:
-	ldr	r3, .L3796+12
+.L3741:
+	ldr	r3, .L3801+12
 	str	r5, [r3, #452]
-.L3731:
-	ldr	r2, .L3796+16
+.L3736:
+	ldr	r2, .L3801+16
 	ldr	r1, [r4, #1924]
 	ldrh	r3, [r5, #4]
 	ldr	r2, [r2, #-2080]
@@ -22618,15 +22646,15 @@ ftl_write:
 	movcs	r3, r2
 	str	r3, [sp, #44]
 	mov	r3, #0
-.L3793:
+.L3798:
 	str	r3, [sp, #16]
 	ldr	r3, [sp, #16]
 	ldr	r2, [sp, #44]
 	cmp	r3, r2
-	beq	.L3738
+	beq	.L3743
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L3738
+	beq	.L3743
 	ldr	r3, [sp, #28]
 	ldr	r2, [sp, #16]
 	rsb	ip, r3, r6
@@ -22638,14 +22666,14 @@ ftl_write:
 	moveq	r3, #0
 	andne	r3, r3, #1
 	cmp	r3, #0
-	beq	.L3739
-	ldr	r3, .L3796+28
+	beq	.L3744
+	ldr	r3, .L3801+28
 	ldrh	r2, [r3]
 	add	r3, r8, r7
 	mls	r3, r2, r6, r3
 	cmp	r3, r2
-	bne	.L3738
-.L3739:
+	bne	.L3743
+.L3744:
 	add	r1, sp, #60
 	mov	r2, #0
 	mov	r0, r6
@@ -22656,14 +22684,14 @@ ftl_write:
 	ldr	r2, [r4, #1924]
 	ldr	r1, [r4, #1928]
 	mov	r3, #36
-	ldr	fp, .L3796+32
+	ldr	fp, .L3801+32
 	mla	r1, r3, r2, r1
 	ldrh	r2, [fp]
 	str	r6, [r1, #16]
 	str	r3, [sp, #48]
 	ldr	r3, [r4, #1924]
 	str	r0, [r1, #4]
-	ldr	r0, .L3796+16
+	ldr	r0, .L3801+16
 	mul	lr, r3, r2
 	bic	r3, lr, #3
 	str	r3, [sp, #36]
@@ -22690,10 +22718,10 @@ ftl_write:
 	str	r3, [sp, #24]
 	orrs	r3, r3, ip
 	ldr	r3, [sp, #48]
-	beq	.L3740
+	beq	.L3745
 	ldr	r3, [sp, #24]
 	cmp	r3, #0
-	beq	.L3741
+	beq	.L3746
 	ldrh	fp, [fp, #-6]
 	mov	r0, r7
 	mov	r1, fp
@@ -22705,11 +22733,11 @@ ftl_write:
 	movcc	r3, fp
 	movcs	r3, r8
 	str	r3, [sp, #12]
-	b	.L3742
-.L3741:
+	b	.L3747
+.L3746:
 	cmp	ip, #0
-	beq	.L3742
-	ldr	r2, .L3796+28
+	beq	.L3747
+	ldr	r2, .L3801+28
 	add	r3, r8, r7
 	ldrh	r2, [r2]
 	smulbb	r2, r2, r6
@@ -22718,12 +22746,12 @@ ftl_write:
 	str	r3, [sp, #12]
 	ldr	r3, [sp, #24]
 	str	r3, [sp, #32]
-.L3742:
-	ldr	r3, .L3796+28
+.L3747:
+	ldr	r3, .L3801+28
 	ldr	r2, [sp, #12]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L3743
+	bne	.L3748
 	ldr	r3, [sp, #24]
 	ldr	r0, [r10, #1928]
 	cmp	r3, #0
@@ -22739,16 +22767,16 @@ ftl_write:
 	mov	r3, #36
 	mla	r3, r3, r2, r0
 	strne	r1, [r3, #8]
-	bne	.L3746
+	bne	.L3751
 	ldr	r0, [r3, #8]
-	ldr	r3, .L3796+36
+	ldr	r3, .L3801+36
 	ldrh	r2, [r3]
-	b	.L3791
-.L3743:
+	b	.L3796
+.L3748:
 	ldr	r2, [sp, #60]
 	mov	r3, #36
 	cmn	r2, #1
-	beq	.L3747
+	beq	.L3752
 	ldr	r1, [r4, #1928]
 	add	r0, sp, #64
 	str	r2, [sp, #68]
@@ -22764,36 +22792,36 @@ ftl_write:
 	bl	FlashReadPages
 	ldr	r3, [sp, #64]
 	cmn	r3, #1
-	ldr	r3, .L3796+16
+	ldr	r3, .L3801+16
 	ldreq	r2, [r3, #-3676]
 	addeq	r2, r2, #1
 	streq	r2, [r3, #-3676]
-	beq	.L3750
+	beq	.L3755
 	ldr	r2, [r9, #8]
 	cmp	r2, r6
-	beq	.L3750
+	beq	.L3755
 	ldr	r2, [r3, #-3676]
-	ldr	r0, .L3796+40
+	ldr	r0, .L3801+40
 	add	r2, r2, #1
 	str	r2, [r3, #-3676]
 	mov	r2, r6
 	ldr	r1, [r9, #8]
 	bl	printk
-	b	.L3750
-.L3747:
+	b	.L3755
+.L3752:
 	ldr	r2, [r4, #1924]
 	ldr	r1, [r4, #1928]
 	mla	r3, r3, r2, r1
 	mov	r1, #0
 	ldr	r0, [r3, #8]
-	ldr	r3, .L3796+36
+	ldr	r3, .L3801+36
 	ldrh	r2, [r3]
 	bl	ftl_memset
-.L3750:
+.L3755:
 	ldr	r3, [sp, #24]
 	cmp	r3, #0
 	mov	r3, #36
-	beq	.L3751
+	beq	.L3756
 	ldr	r1, [r4, #1928]
 	ldr	r2, [r4, #1924]
 	mla	r3, r3, r2, r1
@@ -22801,41 +22829,41 @@ ftl_write:
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #32]
 	add	r0, r0, r3, asl #9
-	b	.L3794
-.L3751:
+	b	.L3799
+.L3756:
 	ldr	r1, [r4, #1924]
 	ldr	r2, [r4, #1928]
 	mla	r3, r3, r1, r2
-	ldr	r2, .L3796+28
+	ldr	r2, .L3801+28
 	ldrh	r1, [r2]
 	ldr	r0, [r3, #8]
 	mul	r1, r1, r6
 	ldr	r3, [sp, #4]
 	rsb	r1, r7, r1
 	add	r1, r3, r1, asl #9
-.L3794:
+.L3799:
 	ldr	r3, [sp, #12]
 	mov	r2, r3, asl #9
-	b	.L3791
-.L3740:
+	b	.L3796
+.L3745:
 	ldr	r2, [sp, #20]
 	cmp	r2, #0
 	ldr	r2, [r4, #1924]
-	beq	.L3752
+	beq	.L3757
 	ldr	r1, [r4, #1928]
 	mla	r3, r3, r2, r1
-	ldr	r2, .L3796+28
+	ldr	r2, .L3801+28
 	ldrh	fp, [r2]
 	ldr	r2, [sp, #4]
 	mul	fp, fp, r6
 	rsb	fp, r7, fp
 	add	fp, r2, fp, asl #9
 	str	fp, [r3, #8]
-	b	.L3746
-.L3752:
+	b	.L3751
+.L3757:
 	ldr	r0, [r4, #1928]
 	mla	r3, r3, r2, r0
-	ldr	r2, .L3796+28
+	ldr	r2, .L3801+28
 	ldrh	r1, [r2]
 	ldrh	r2, [fp, #-2]
 	ldr	r0, [r3, #8]
@@ -22843,14 +22871,14 @@ ftl_write:
 	ldr	r3, [sp, #4]
 	rsb	r1, r7, r1
 	add	r1, r3, r1, asl #9
-.L3791:
+.L3796:
 	bl	ftl_memcpy
-.L3746:
-	ldr	r3, .L3796+44
+.L3751:
+	ldr	r3, .L3801+44
 	ldr	r2, [sp, #40]
 	ldr	r1, [sp, #36]
 	strh	r3, [r2, r1]	@ movhi
-	ldr	r2, .L3796+16
+	ldr	r2, .L3801+16
 	str	r6, [r9, #8]
 	add	r6, r6, #1
 	ldr	r3, [r2, #-3844]
@@ -22868,73 +22896,73 @@ ftl_write:
 	str	r3, [r4, #1924]
 	ldr	r3, [sp, #16]
 	add	r3, r3, #1
-	b	.L3793
-.L3738:
+	b	.L3798
+.L3743:
 	ldr	r3, [sp]
 	ldr	r2, [sp, #16]
 	ldr	r1, [sp, #20]
 	rsb	r3, r2, r3
-	ldr	r2, .L3796+16
+	ldr	r2, .L3801+16
 	str	r3, [sp]
 	ldr	r3, [r4, #1924]
 	ldr	r2, [r2, #-2080]
 	cmp	r3, r2
 	orrcs	r1, r1, #1
 	cmp	r1, #0
-	bne	.L3756
+	bne	.L3761
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L3756
-.L3758:
+	beq	.L3761
+.L3763:
 	mov	r3, #0
 	str	r3, [sp, #20]
-	b	.L3730
-.L3756:
+	b	.L3735
+.L3761:
 	bl	FtlCacheWriteBack
 	mov	r3, #0
 	str	r3, [r10, #1924]
 	ldr	r3, [sp]
 	cmp	r3, #1
-	bhi	.L3730
-	b	.L3758
-.L3795:
+	bhi	.L3735
+	b	.L3763
+.L3800:
 	mov	r0, r3
 	ldr	r2, [sp, #8]
 	ldr	r3, [sp, #28]
 	rsb	r1, r2, r3
 	bl	ftl_do_gc
-	ldr	r3, .L3796+48
+	ldr	r3, .L3801+48
 	ldrh	r3, [r3, #-12]
 	cmp	r3, #5
-	bls	.L3769
+	bls	.L3774
 	cmp	r3, #31
-	bhi	.L3764
-	ldr	r3, .L3796
+	bhi	.L3769
+	ldr	r3, .L3801
 	ldrb	r3, [r3]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L3764
-.L3769:
-	ldr	r5, .L3796+52
+	bne	.L3769
+.L3774:
+	ldr	r5, .L3801+52
 	ldr	r4, [sp]
-	ldr	r6, .L3796+56
+	ldr	r6, .L3801+56
 	add	r7, r5, #620
-.L3782:
+.L3787:
 	ldrh	r2, [r5]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3762
+	bne	.L3767
 	ldrh	r3, [r6]
 	cmp	r3, r2
-	bne	.L3762
+	bne	.L3767
 	ldrh	r2, [r7]
 	cmp	r2, r3
-	bne	.L3762
+	bne	.L3767
 	and	r0, r4, #7
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L3762:
-	ldr	r3, .L3796+60
+.L3767:
+	ldr	r3, .L3801+60
 	mov	r0, #1
 	mov	r1, r0
 	mov	r2, #128
@@ -22944,33 +22972,33 @@ ftl_write:
 	mov	r0, #0
 	mov	r1, #1
 	bl	ftl_do_gc
-	ldr	r3, .L3796
+	ldr	r3, .L3801
 	ldr	r3, [r3, #4052]
 	cmp	r3, #0
-	bne	.L3764
-	ldr	r3, .L3796+64
+	bne	.L3769
+	ldr	r3, .L3801+64
 	ldrh	r3, [r3]
 	cmp	r3, #2
-	bhi	.L3764
+	bhi	.L3769
 	add	r4, r4, #1
 	cmp	r4, #256
-	bne	.L3782
-.L3764:
+	bne	.L3787
+.L3769:
 	mov	r0, #0
-.L3723:
-	ldr	r3, .L3796+4
+.L3728:
+	ldr	r3, .L3801+4
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3763
+	beq	.L3768
 	bl	__stack_chk_fail
-.L3763:
+.L3768:
 	add	sp, sp, #108
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3797:
+.L3802:
 	.align	2
-.L3796:
+.L3801:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
@@ -22981,7 +23009,7 @@ ftl_write:
 	.word	.LANCHOR0+1878
 	.word	.LANCHOR0+1884
 	.word	.LANCHOR0+1882
-	.word	.LC160
+	.word	.LC161
 	.word	-3947
 	.word	.LANCHOR2-4032
 	.word	.LANCHOR2-3800
@@ -23022,23 +23050,23 @@ FlashBootVendorWrite:
 	mov	r6, r0
 	mov	r5, r1
 	bl	rknand_device_lock
-	ldr	r3, .L3804
+	ldr	r3, .L3809
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
 	mvnne	r4, #0
-	bne	.L3801
+	bne	.L3806
 	mov	r2, r4
 	mov	r0, r6
 	mov	r1, r5
 	bl	ftl_vendor_write
 	mov	r4, r0
-.L3801:
+.L3806:
 	bl	rknand_device_unlock
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L3805:
+.L3810:
 	.align	2
-.L3804:
+.L3809:
 	.word	.LANCHOR1
 	.fnend
 	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
@@ -23090,10 +23118,10 @@ FtlDumpSysBlock:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	mov	r8, r0, asl #10
-	ldr	r4, .L3818
+	ldr	r4, .L3823
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L3818+4
+	ldr	r7, .L3823+4
 	mov	r6, r0
 	mov	r5, #0
 	ldr	r3, [r4, #-2064]
@@ -23101,20 +23129,20 @@ FtlDumpSysBlock:
 	str	r3, [r4, #220]
 	ldr	r3, [r4, #-2040]
 	str	r3, [r4, #224]
-.L3810:
+.L3815:
 	ldrh	r2, [r7]
 	sxth	r3, r5
 	cmp	r3, r2
-	bge	.L3817
+	bge	.L3822
 	mov	r1, #1
-	ldr	r0, .L3818+8
+	ldr	r0, .L3823+8
 	mov	r2, r1
 	orr	r3, r3, r8
 	str	r3, [r4, #216]
 	bl	FlashReadPages
 	ldr	r3, [r4, #224]
 	mov	r1, r6
-	ldr	r0, .L3818+12
+	ldr	r0, .L3823+12
 	ldr	r2, [r3]
 	str	r2, [sp]
 	ldr	r2, [r3, #4]
@@ -23132,27 +23160,27 @@ FtlDumpSysBlock:
 	ldr	r3, [r4, #224]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L3811
-	ldr	r0, .L3818+16
+	beq	.L3816
+	ldr	r0, .L3823+16
 	mov	r2, #4
 	ldr	r1, [r9, #-2064]
 	mov	r3, #768
 	bl	rknand_print_hex
-.L3811:
+.L3816:
 	add	r5, r5, #1
-	b	.L3810
-.L3817:
+	b	.L3815
+.L3822:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
-.L3819:
+.L3824:
 	.align	2
-.L3818:
+.L3823:
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1874
 	.word	.LANCHOR2+212
-	.word	.LC161
 	.word	.LC162
+	.word	.LC163
 	.fnend
 	.size	FtlDumpSysBlock, .-FtlDumpSysBlock
 	.align	2
@@ -23165,18 +23193,18 @@ dump_map_info:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movw	r3, #1812
-	ldr	r6, .L3838
+	ldr	r6, .L3843
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r10, .L3838+4
+	ldr	r10, .L3843+4
 	ldrh	r7, [r6, r3]
 	add	fp, r10, #18
-.L3821:
+.L3826:
 	ldrh	r3, [r10]
-	ldr	r4, .L3838+8
+	ldr	r4, .L3843+8
 	cmp	r3, r7
-	bls	.L3834
-	ldr	r1, .L3838+12
+	bls	.L3839
+	ldr	r1, .L3843+12
 	mov	r8, #0
 	ldr	r2, [r4, #-2076]
 	mov	r5, r8
@@ -23185,10 +23213,10 @@ dump_map_info:
 	ldr	r9, [r4, #-3208]
 	ldrh	r1, [r1, #80]
 	str	r1, [sp, #28]
-.L3830:
+.L3835:
 	uxth	r1, r8
 	cmp	r1, ip
-	bcs	.L3836
+	bcs	.L3841
 	mov	r1, r7
 	ldrb	r0, [fp, r8]	@ zero_extendqisi2
 	str	r3, [sp, #44]
@@ -23202,7 +23230,7 @@ dump_map_info:
 	ldr	ip, [sp, #36]
 	ldr	r2, [sp, #40]
 	ldr	r3, [sp, #44]
-	bne	.L3822
+	bne	.L3827
 	mov	r0, #36
 	mov	r1, r1, asl #10
 	mla	r0, r0, r5, r2
@@ -23217,24 +23245,24 @@ dump_map_info:
 	bic	r1, r1, #3
 	add	r1, r9, r1
 	str	r1, [r0, #12]
-.L3822:
+.L3827:
 	add	r8, r8, #1
-	b	.L3830
-.L3836:
+	b	.L3835
+.L3841:
 	cmp	r5, #0
-	beq	.L3825
+	beq	.L3830
 	ldr	r0, [r4, #-2076]
 	mov	r1, r5
 	mov	r2, #1
 	mov	r8, #0
 	bl	FlashReadPages
 	mov	r9, #36
-.L3826:
+.L3831:
 	uxth	r3, r8
 	cmp	r3, r5
-	bcs	.L3825
+	bcs	.L3830
 	ldr	r3, [r4, #-2076]
-	ldr	r0, .L3838+16
+	ldr	r0, .L3843+16
 	mla	r3, r9, r8, r3
 	add	r8, r8, #1
 	ldmib	r3, {r2, r3, ip}
@@ -23251,32 +23279,32 @@ dump_map_info:
 	str	r3, [sp, #16]
 	ldr	r3, [ip]
 	bl	printk
-	b	.L3826
-.L3825:
+	b	.L3831
+.L3830:
 	add	r7, r7, #1
 	uxth	r7, r7
-	b	.L3821
-.L3834:
-	ldr	r9, .L3838+20
+	b	.L3826
+.L3839:
+	ldr	r9, .L3843+20
 	mov	r8, #0
-.L3829:
-	ldr	r3, .L3838+24
+.L3834:
+	ldr	r3, .L3843+24
 	sxth	r5, r8
-	ldr	r7, .L3838+8
+	ldr	r7, .L3843+8
 	ldrh	r3, [r3]
 	cmp	r5, r3
-	bge	.L3832
+	bge	.L3837
 	mov	r5, r5, asl #1
 	mov	r7, #0
-.L3833:
+.L3838:
 	ldrh	r2, [r9]
 	sxth	r3, r7
 	add	r7, r7, #1
 	cmp	r3, r2
-	bge	.L3837
+	bge	.L3842
 	ldr	r2, [r4, #-2012]
 	mov	r1, #1
-	ldr	r0, .L3838+28
+	ldr	r0, .L3843+28
 	ldrh	r2, [r2, r5]
 	orr	r3, r3, r2, asl #10
 	mov	r2, r1
@@ -23293,7 +23321,7 @@ dump_map_info:
 	ldr	r0, [r3, #8]
 	str	r0, [sp, #8]
 	ldr	r3, [r3, #12]
-	ldr	r0, .L3838+32
+	ldr	r0, .L3843+32
 	str	r3, [sp, #12]
 	ldr	r3, [r2]
 	str	r3, [sp, #16]
@@ -23302,23 +23330,23 @@ dump_map_info:
 	ldr	r2, [r4, #212]
 	ldr	r3, [r4, #216]
 	bl	printk
-	b	.L3833
-.L3837:
+	b	.L3838
+.L3842:
 	add	r8, r8, #1
-	b	.L3829
-.L3832:
+	b	.L3834
+.L3837:
 	ldr	r1, [r7, #-2012]
 	movw	r4, #1908
 	ldr	r3, [r6, #1900]
 	mov	r2, #2
-	ldr	r0, .L3838+36
+	ldr	r0, .L3843+36
 	bl	rknand_print_hex
 	ldr	r1, [r7, #-1992]
 	ldrh	r3, [r6, r4]
 	mov	r2, #4
-	ldr	r0, .L3838+40
+	ldr	r0, .L3843+40
 	bl	rknand_print_hex
-	ldr	r0, .L3838+44
+	ldr	r0, .L3843+44
 	ldr	r1, [r7, #-1988]
 	mov	r2, #4
 	ldrh	r3, [r6, r4]
@@ -23326,21 +23354,21 @@ dump_map_info:
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	rknand_print_hex
-.L3839:
+.L3844:
 	.align	2
-.L3838:
+.L3843:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+1814
 	.word	.LANCHOR2
 	.word	.LANCHOR0+1804
-	.word	.LC163
+	.word	.LC164
 	.word	.LANCHOR0+1874
 	.word	.LANCHOR2-1928
 	.word	.LANCHOR2+212
-	.word	.LC110
-	.word	.LC164
+	.word	.LC111
 	.word	.LC165
 	.word	.LC166
+	.word	.LC167
 	.fnend
 	.size	dump_map_info, .-dump_map_info
 	.align	2
@@ -23351,15 +23379,15 @@ flash_boot_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3842
+	ldr	r3, .L3847
 	ldr	r2, [r3, #1744]
-	ldr	r3, .L3842+4
+	ldr	r3, .L3847+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_enter_slc_mode
-.L3843:
+.L3848:
 	.align	2
-.L3842:
+.L3847:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -23372,15 +23400,15 @@ flash_boot_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3846
+	ldr	r3, .L3851
 	ldr	r2, [r3, #1744]
-	ldr	r3, .L3846+4
+	ldr	r3, .L3851+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_exit_slc_mode
-.L3847:
+.L3852:
 	.align	2
-.L3846:
+.L3851:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -23394,13 +23422,13 @@ IdBlockReadData:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r4, .L3857
+	ldr	r4, .L3862
 	mov	r8, r1
 	.pad #20
 	sub	sp, sp, #20
 	mov	r1, r6
 	mov	fp, r2
-	ldr	r0, .L3857+4
+	ldr	r0, .L3862+4
 	ldr	r3, [r4, #692]
 	mov	r2, r8
 	ldr	r5, [r4, #4]
@@ -23417,9 +23445,9 @@ IdBlockReadData:
 	rsb	r3, r1, r6
 	str	r3, [sp]
 	ubfx	ip, ip, #2, #2
-.L3849:
+.L3854:
 	cmp	r7, r8
-	bcs	.L3856
+	bcs	.L3861
 	add	r2, r7, r10
 	ldrb	r1, [r4, #140]	@ zero_extendqisi2
 	ubfx	r2, r2, #2, #16
@@ -23428,13 +23456,13 @@ IdBlockReadData:
 	add	r3, r4, r2, asl #1
 	uxth	r5, r5
 	ldrh	r3, [r3, #144]
-	beq	.L3850
-	ldr	r1, .L3857
-	ldr	r0, .L3857+8
+	beq	.L3855
+	ldr	r1, .L3862
+	ldr	r0, .L3862+8
 	ldr	r1, [r1, #1744]
 	cmp	r1, r0
 	moveq	r3, r2
-.L3850:
+.L3855:
 	ldr	r2, [sp]
 	add	r7, r5, r7
 	add	r2, ip, r2
@@ -23445,7 +23473,7 @@ IdBlockReadData:
 	str	ip, [sp, #4]
 	ldrb	r1, [r2, #9]	@ zero_extendqisi2
 	str	r3, [sp, #12]
-	ldr	r3, .L3857+12
+	ldr	r3, .L3862+12
 	str	r1, [sp, #8]
 	ldrb	r0, [r3, #174]	@ zero_extendqisi2
 	bl	FlashBchSel
@@ -23467,25 +23495,25 @@ IdBlockReadData:
 	mov	r0, ip
 	bl	FlashBchSel
 	mov	ip, #0
-	b	.L3849
-.L3856:
+	b	.L3854
+.L3861:
 	mov	r1, r6
 	mov	r2, r8
 	mov	r3, #0
-	ldr	r0, .L3857+16
+	ldr	r0, .L3862+16
 	bl	printk
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3858:
+.L3863:
 	.align	2
-.L3857:
+.L3862:
 	.word	.LANCHOR0
-	.word	.LC167
+	.word	.LC168
 	.word	1446522928
 	.word	.LANCHOR2
-	.word	.LC168
+	.word	.LC169
 	.fnend
 	.size	IdBlockReadData, .-IdBlockReadData
 	.align	2
@@ -23495,14 +23523,14 @@ write_idblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 128
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3906
+	ldr	r3, .L3911
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #140
 	sub	sp, sp, #140
 	ldr	r3, [r3]
 	mov	r4, r0
-	ldr	r7, .L3906+4
+	ldr	r7, .L3911+4
 	mov	r0, #256000
 	mov	r6, r1
 	mov	r5, r2
@@ -23513,22 +23541,22 @@ write_idblock:
 	bl	ftl_malloc
 	subs	r3, r0, #0
 	str	r3, [sp, #12]
-	beq	.L3884
+	beq	.L3889
 	add	r4, r4, #508
 	add	r4, r4, #3
 	mov	r4, r4, lsr #9
 	cmp	r4, #8
-	bls	.L3882
+	bls	.L3887
 	cmp	r4, #500
-	bhi	.L3884
-	b	.L3861
-.L3882:
+	bhi	.L3889
+	b	.L3866
+.L3887:
 	mov	r4, #8
-.L3861:
+.L3866:
 	ldr	r2, [r6]
-	ldr	r3, .L3906+8
+	ldr	r3, .L3911+8
 	cmp	r2, r3
-	bne	.L3884
+	bne	.L3889
 	smulbb	r3, r9, r8
 	uxth	fp, r3
 	sub	r0, fp, #1
@@ -23540,10 +23568,10 @@ write_idblock:
 	str	r0, [sp, #32]
 	add	r0, r6, #254976
 	add	r0, r0, #512
-.L3865:
+.L3870:
 	ldr	r1, [r0, #-4]!
 	cmp	r1, #0
-	bne	.L3862
+	bne	.L3867
 	ldr	r1, [r6, r3, asl #2]
 	add	r3, r3, #1
 	cmp	r3, #4096
@@ -23551,32 +23579,32 @@ write_idblock:
 	movhi	r3, #0
 	cmp	r2, #4096
 	str	r1, [r0, #512]
-	bne	.L3865
-	b	.L3864
-.L3862:
-	ldr	r0, .L3906+12
+	bne	.L3870
+	b	.L3869
+.L3867:
+	ldr	r0, .L3911+12
 	bl	printk
-.L3864:
+.L3869:
 	mov	r1, r5
 	mov	r3, #5
-	ldr	r0, .L3906+16
+	ldr	r0, .L3911+16
 	mov	r2, #4
 	bl	rknand_print_hex
 	ldrb	r2, [r7, #1]	@ zero_extendqisi2
 	ldr	r1, [r6, #512]
 	sub	r5, r5, #4
-	ldr	r0, .L3906+20
+	ldr	r0, .L3911+20
 	bl	printk
-	ldr	r2, .L3906+24
+	ldr	r2, .L3911+24
 	ldrh	r3, [r7, #138]
 	mov	r1, r4
-	ldr	r0, .L3906+28
+	ldr	r0, .L3911+28
 	ldr	r2, [r2, #168]
 	str	r2, [sp]
 	mov	r2, r4
 	bl	printk
 	ldrb	r3, [r7, #1]	@ zero_extendqisi2
-	ldr	r7, .L3906+4
+	ldr	r7, .L3911+4
 	ldr	r2, [r6, #512]
 	cmp	r2, r3
 	strhi	r3, [r6, #512]
@@ -23585,16 +23613,16 @@ write_idblock:
 	mov	r3, #0
 	str	r3, [sp, #20]
 	str	r3, [sp, #16]
-.L3879:
+.L3884:
 	ldr	r2, [r5, #4]
 	ldrb	r3, [r7, #1]	@ zero_extendqisi2
-	ldr	r9, .L3906+4
+	ldr	r9, .L3911+4
 	cmp	r2, r3
-	bcs	.L3867
-	ldr	r3, .L3906+24
+	bcs	.L3872
+	ldr	r3, .L3911+24
 	ldr	r3, [r3, #168]
 	cmp	r2, r3
-	bcc	.L3867
+	bcc	.L3872
 	ldr	r3, [sp, #32]
 	ldr	r1, [sp, #32]
 	cmp	r3, #1
@@ -23604,12 +23632,12 @@ write_idblock:
 	ldr	r3, [sp, #16]
 	cmp	r3, #0
 	cmpne	r1, #1
-	bls	.L3868
+	bls	.L3873
 	ldr	r3, [r5]
 	add	r3, r3, #1
 	cmp	r2, r3
-	beq	.L3867
-.L3868:
+	beq	.L3872
+.L3873:
 	mov	r1, #0
 	mov	r2, #512
 	ldr	r0, [sp, #12]
@@ -23620,7 +23648,7 @@ write_idblock:
 	ldr	r9, [r9, #4]
 	mul	r8, r8, fp
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
-	ldr	r0, .L3906+32
+	ldr	r0, .L3911+32
 	mov	r1, r8
 	str	r3, [sp, #24]
 	ldrh	r3, [sp, #24]
@@ -23638,13 +23666,13 @@ write_idblock:
 	bl	FlashEraseBlock
 	cmp	r4, r9
 	movls	r10, #1
-	bls	.L3869
+	bls	.L3874
 	mov	r0, #0
 	add	r1, r8, r9
 	mov	r2, r0
 	mov	r10, #2
 	bl	FlashEraseBlock
-.L3869:
+.L3874:
 	mov	r0, #0
 	bl	flash_boot_exit_slc_mode
 	ldr	r3, [r7, #692]
@@ -23662,57 +23690,57 @@ write_idblock:
 	rsb	r3, r1, r8
 	str	r6, [sp, #28]
 	str	r3, [sp, #40]
-.L3870:
+.L3875:
 	ldr	r3, [sp, #52]
 	cmp	r9, r3
-	bcs	.L3905
+	bcs	.L3910
 	add	r3, r9, ip
 	ubfx	r3, r3, #2, #16
 	cmp	r3, #0
-	beq	.L3871
+	beq	.L3876
 	add	r2, r3, #1
 	add	r1, r7, r2, asl #1
 	ldrh	r10, [r1, #144]
 	ldrb	r1, [r7, #140]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L3872
+	beq	.L3877
 	ldr	r1, [r7, #1744]
-	ldr	r0, .L3906+36
+	ldr	r0, .L3911+36
 	cmp	r1, r0
 	moveq	r10, r2
-.L3872:
+.L3877:
 	sub	r10, r10, #-1073741823
 	mov	r10, r10, asl #2
 	str	r10, [sp, #68]
-.L3871:
+.L3876:
 	movw	r2, #61424
 	str	r2, [sp, #72]
 	add	r2, r7, r3, asl #1
 	ldrh	r10, [r2, #144]
 	ldrb	r2, [r7, #140]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3873
+	beq	.L3878
 	ldr	r2, [r7, #1744]
-	ldr	r1, .L3906+36
+	ldr	r1, .L3911+36
 	cmp	r2, r1
 	moveq	r10, r3
-.L3873:
+.L3878:
 	ldr	r3, [sp, #24]
 	add	r9, r9, #4
 	ldr	r2, [sp, #40]
 	str	ip, [sp, #60]
 	uxth	r9, r9
 	mla	r2, r3, r10, r2
-	ldr	r3, .L3906+4
+	ldr	r3, .L3911+4
 	ldrb	r3, [r3, #1792]	@ zero_extendqisi2
 	str	r2, [sp, #56]
 	str	r3, [sp, #48]
-	ldr	r3, .L3906+24
+	ldr	r3, .L3911+24
 	ldrb	r0, [r3, #174]	@ zero_extendqisi2
 	bl	FlashBchSel
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r3, .L3906+4
+	ldr	r3, .L3911+4
 	ldr	r3, [r3, #692]
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
 	ldr	r2, [sp, #56]
@@ -23739,12 +23767,12 @@ write_idblock:
 	ldr	ip, [sp, #60]
 	add	r3, r3, #2048
 	str	r3, [sp, #28]
-	b	.L3870
-.L3905:
+	b	.L3875
+.L3910:
 	mov	r1, r8
 	mov	r3, #0
 	mov	r2, r4
-	ldr	r0, .L3906+40
+	ldr	r0, .L3911+40
 	bl	printk
 	ldr	r0, [r5, #4]
 	mov	r1, r4
@@ -23754,7 +23782,7 @@ write_idblock:
 	bl	IdBlockReadData
 	mov	r3, r6
 	ldr	r2, [sp, #12]
-.L3878:
+.L3883:
 	mov	r10, r2
 	mov	r9, r3
 	ldr	r0, [r10]
@@ -23762,13 +23790,13 @@ write_idblock:
 	ldr	r1, [r9]
 	add	r3, r3, #4
 	cmp	r0, r1
-	beq	.L3875
+	beq	.L3880
 	mov	r1, #0
 	mov	r2, #512
 	ldr	r0, [sp, #12]
 	bl	memset
 	ldr	r3, [r10]
-	ldr	r0, .L3906+44
+	ldr	r0, .L3911+44
 	str	r3, [sp]
 	ldr	r3, [r9]
 	bic	r9, r8, #255
@@ -23778,13 +23806,13 @@ write_idblock:
 	mov	r3, r8
 	ldr	r2, [r5, #4]
 	bl	printk
-	ldr	r0, .L3906+48
+	ldr	r0, .L3911+48
 	add	r1, r6, r9
 	mov	r2, #4
 	mov	r3, #256
 	bl	rknand_print_hex
 	mov	r2, #4
-	ldr	r0, .L3906+52
+	ldr	r0, .L3911+52
 	ldr	r3, [sp, #12]
 	add	r1, r3, r9
 	mov	r3, #256
@@ -23798,76 +23826,76 @@ write_idblock:
 	bl	FlashEraseBlock
 	ldr	r3, [sp, #44]
 	cmp	r3, #0
-	beq	.L3876
+	beq	.L3881
 	ldr	r1, [r5, #4]
 	mov	r0, #0
 	mov	r2, r0
 	mla	r1, r1, fp, fp
 	bl	FlashEraseBlock
-.L3876:
+.L3881:
 	mov	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	r0, .L3906+56
+	ldr	r0, .L3911+56
 	ldr	r1, [r5, #4]
 	bl	printk
 	ldr	r3, [sp, #36]
 	cmp	r8, r3
-	bcc	.L3867
-	b	.L3877
-.L3875:
+	bcc	.L3872
+	b	.L3882
+.L3880:
 	ldr	r1, [sp, #36]
 	add	r8, r8, #1
 	cmp	r8, r1
-	bne	.L3878
-.L3877:
+	bne	.L3883
+.L3882:
 	ldr	r3, [sp, #20]
 	add	r3, r3, #1
 	str	r3, [sp, #20]
-.L3867:
+.L3872:
 	ldr	r3, [sp, #16]
 	add	r5, r5, #4
 	add	r3, r3, #1
 	str	r3, [sp, #16]
 	cmp	r3, #5
-	bne	.L3879
+	bne	.L3884
 	ldr	r0, [sp, #12]
 	bl	ftl_free
 	ldr	r3, [sp, #20]
 	clz	r0, r3
 	mov	r0, r0, lsr #5
 	rsb	r0, r0, #0
-	b	.L3860
-.L3884:
+	b	.L3865
+.L3889:
 	mvn	r0, #0
-.L3860:
-	ldr	r3, .L3906
+.L3865:
+	ldr	r3, .L3911
 	ldr	r2, [sp, #132]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3880
+	beq	.L3885
 	bl	__stack_chk_fail
-.L3880:
+.L3885:
 	add	sp, sp, #140
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3907:
+.L3912:
 	.align	2
-.L3906:
+.L3911:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	-52655045
-	.word	.LC169
 	.word	.LC170
 	.word	.LC171
-	.word	.LANCHOR2
 	.word	.LC172
+	.word	.LANCHOR2
 	.word	.LC173
-	.word	1446522928
 	.word	.LC174
+	.word	1446522928
 	.word	.LC175
 	.word	.LC176
 	.word	.LC177
 	.word	.LC178
+	.word	.LC179
 	.fnend
 	.size	write_idblock, .-write_idblock
 	.align	2
@@ -23878,24 +23906,24 @@ CRC_32:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	ip, .L3912
+	ldr	ip, .L3917
 	add	r1, r0, r1
 	mov	r2, #0
-.L3909:
+.L3914:
 	cmp	r0, r1
-	beq	.L3911
+	beq	.L3916
 	ldrb	r3, [r0], #1	@ zero_extendqisi2
 	eor	r3, r3, r2, lsr #24
 	add	r3, ip, r3, asl #2
 	ldr	r3, [r3, #3296]
 	eor	r2, r3, r2, asl #8
-	b	.L3909
-.L3911:
+	b	.L3914
+.L3916:
 	mov	r0, r2
 	bx	lr
-.L3913:
+.L3918:
 	.align	2
-.L3912:
+.L3917:
 	.word	.LANCHOR1
 	.fnend
 	.size	CRC_32, .-CRC_32
@@ -23909,20 +23937,20 @@ write_loader_lba:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	cmp	r0, #64
-	ldr	r6, .L3938
+	ldr	r6, .L3943
 	.pad #56
 	sub	sp, sp, #56
 	mov	r5, r0
 	mov	r7, r1
 	mov	r9, r2
-	ldr	r4, .L3938+4
+	ldr	r4, .L3943+4
 	ldr	r3, [r6]
 	str	r3, [sp, #52]
-	bne	.L3915
+	bne	.L3920
 	ldr	r2, [r2]
-	ldr	r3, .L3938+8
+	ldr	r3, .L3943+8
 	cmp	r2, r3
-	bne	.L3915
+	bne	.L3920
 	mov	r0, #256000
 	mov	r3, #1
 	strb	r3, [r4, #480]
@@ -23932,21 +23960,21 @@ write_loader_lba:
 	str	r0, [r4, #484]
 	bl	ftl_memset
 	str	r5, [r4, #488]
-.L3915:
+.L3920:
 	str	r7, [sp]
 	mov	r3, r5
-	ldr	r0, .L3938+12
+	ldr	r0, .L3943+12
 	ldr	r1, [r4, #484]
 	ldr	r2, [r9]
 	bl	printk
 	ldrb	r3, [r4, #480]	@ zero_extendqisi2
-	ldr	r10, .L3938+4
+	ldr	r10, .L3943+4
 	cmp	r3, #0
-	beq	.L3914
+	beq	.L3919
 	sub	r0, r5, #64
 	ldr	r8, [r10, #484]
 	cmp	r0, #500
-	bcs	.L3917
+	bcs	.L3922
 	rsb	r2, r5, #564
 	add	r0, r8, r0, asl #9
 	cmp	r2, r7
@@ -23954,30 +23982,30 @@ write_loader_lba:
 	movcs	r2, r7
 	mov	r2, r2, asl #9
 	bl	ftl_memcpy
-	b	.L3918
-.L3917:
+	b	.L3923
+.L3922:
 	cmp	r5, #564
-	bcs	.L3926
-.L3918:
+	bcs	.L3931
+.L3923:
 	ldr	r3, [r4, #488]
 	cmp	r3, r5
-	beq	.L3924
-	ldr	r2, .L3938+4
+	beq	.L3929
+	ldr	r2, .L3943+4
 	mov	r3, #0
 	cmp	r8, r3
 	mov	r9, r3
 	strb	r3, [r2, #480]
-	beq	.L3925
+	beq	.L3930
 	mov	r0, r8
 	bl	ftl_free
-.L3925:
+.L3930:
 	str	r9, [r4, #484]
-.L3924:
+.L3929:
 	add	r5, r5, r7
 	str	r5, [r4, #488]
-	b	.L3914
-.L3926:
-	ldr	r3, .L3938+16
+	b	.L3919
+.L3931:
+	ldr	r3, .L3943+16
 	ldr	r0, [r10, #488]
 	ldr	r3, [r3, #692]
 	sub	r0, r0, #64
@@ -23985,7 +24013,7 @@ write_loader_lba:
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	movcs	r0, #500
 	cmp	r3, #4
-	beq	.L3928
+	beq	.L3933
 	mov	r3, #2
 	str	r3, [sp, #12]
 	mov	r3, #3
@@ -23996,10 +24024,10 @@ write_loader_lba:
 	str	r3, [sp, #24]
 	mov	r3, #6
 	str	r3, [sp, #28]
-	b	.L3920
-.L3928:
+	b	.L3925
+.L3933:
 	mov	r3, #0
-.L3919:
+.L3924:
 	cmp	r0, #256
 	add	r1, sp, #12
 	mov	r2, r3, asl #1
@@ -24007,21 +24035,21 @@ write_loader_lba:
 	str	r2, [r1, r3, asl #2]
 	add	r3, r3, #1
 	cmp	r3, #5
-	bne	.L3919
-.L3920:
+	bne	.L3924
+.L3925:
 	movw	r3, #63872
-.L3923:
+.L3928:
 	ldr	r2, [r8, r3, asl #2]
 	cmp	r2, #0
 	addne	r3, r3, #128
 	movne	r0, r3, asl #2
-	bne	.L3922
-.L3921:
+	bne	.L3927
+.L3926:
 	sub	r3, r3, #1
 	cmp	r3, #4096
-	bne	.L3923
+	bne	.L3928
 	mov	r0, r0, asl #9
-.L3922:
+.L3927:
 	mov	r1, r8
 	add	r2, sp, #12
 	bl	write_idblock
@@ -24030,24 +24058,24 @@ write_loader_lba:
 	strb	r8, [r4, #480]
 	bl	ftl_free
 	str	r8, [r4, #484]
-	b	.L3924
-.L3914:
+	b	.L3929
+.L3919:
 	ldr	r2, [sp, #52]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L3927
+	beq	.L3932
 	bl	__stack_chk_fail
-.L3927:
+.L3932:
 	add	sp, sp, #56
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L3939:
+.L3944:
 	.align	2
-.L3938:
+.L3943:
 	.word	__stack_chk_guard
 	.word	.LANCHOR4
 	.word	-52655045
-	.word	.LC179
+	.word	.LC180
 	.word	.LANCHOR0
 	.fnend
 	.size	write_loader_lba, .-write_loader_lba
@@ -24071,12 +24099,12 @@ FtlWrite:
 	cmp	r0, #0
 	movne	r2, #0
 	cmp	r2, #0
-	beq	.L3941
+	beq	.L3946
 	mov	r0, r1
 	mov	r2, r3
 	mov	r1, r6
 	bl	write_loader_lba
-.L3941:
+.L3946:
 	mov	r0, r7
 	mov	r1, r4
 	mov	r2, r6
@@ -24096,116 +24124,116 @@ rknand_sys_storage_ioctl:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #528
 	sub	sp, sp, #528
-	ldr	r5, .L4053
+	ldr	r5, .L4058
 	mov	r4, r1
 	mov	r6, r2
 	ldr	r3, [r5]
 	str	r3, [sp, #524]
-	ldr	r3, .L4053+4
+	ldr	r3, .L4058+4
 	cmp	r1, r3
-	beq	.L3948
-	bhi	.L3949
+	beq	.L3953
+	bhi	.L3954
 	sub	r3, r3, #3456
 	sub	r3, r3, #5
 	cmp	r1, r3
-	beq	.L3950
-	bhi	.L3951
+	beq	.L3955
+	bhi	.L3956
 	sub	r3, r3, #125
 	cmp	r1, r3
-	beq	.L3952
-	bhi	.L3953
+	beq	.L3957
+	bhi	.L3958
 	sub	r3, r3, #237
 	cmp	r1, r3
-	bne	.L4010
+	bne	.L4015
 	bl	rknand_dev_flush
-	b	.L4041
-.L3953:
-	ldr	r3, .L4053+8
+	b	.L4046
+.L3958:
+	ldr	r3, .L4058+8
 	cmp	r1, r3
-	beq	.L3955
+	beq	.L3960
 	add	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3956
-	b	.L4010
-.L3951:
-	ldr	r3, .L4053+12
+	beq	.L3961
+	b	.L4015
+.L3956:
+	ldr	r3, .L4058+12
 	cmp	r1, r3
-	beq	.L3957
-	bhi	.L3958
+	beq	.L3962
+	bhi	.L3963
 	sub	r3, r3, #1952
 	sub	r3, r3, #9
 	cmp	r1, r3
-	beq	.L3959
-	b	.L4010
-.L3958:
-	ldr	r3, .L4053+16
+	beq	.L3964
+	b	.L4015
+.L3963:
+	ldr	r3, .L4058+16
 	cmp	r1, r3
-	beq	.L3957
+	beq	.L3962
 	add	r3, r3, #10
 	cmp	r1, r3
-	beq	.L3957
-	b	.L4010
-.L3949:
-	ldr	r3, .L4053+20
+	beq	.L3962
+	b	.L4015
+.L3954:
+	ldr	r3, .L4058+20
 	cmp	r1, r3
-	beq	.L3960
-	bhi	.L3961
+	beq	.L3965
+	bhi	.L3966
 	sub	r3, r3, #78
 	cmp	r1, r3
-	beq	.L3962
-	bcc	.L3963
+	beq	.L3967
+	bcc	.L3968
 	add	r3, r3, #21
 	cmp	r1, r3
-	beq	.L3964
+	beq	.L3969
 	add	r3, r3, #56
 	cmp	r1, r3
-	beq	.L3965
-	b	.L4010
-.L3961:
-	ldr	r3, .L4053+24
+	beq	.L3970
+	b	.L4015
+.L3966:
+	ldr	r3, .L4058+24
 	cmp	r1, r3
 	mov	r7, r3
-	beq	.L3966
-	bhi	.L3967
+	beq	.L3971
+	bhi	.L3972
 	sub	r3, r3, #956
 	sub	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3968
+	beq	.L3973
 	add	r3, r3, #956
 	cmp	r1, r3
-	beq	.L3969
-	b	.L4010
-.L3967:
-	ldr	r3, .L4053+28
+	beq	.L3974
+	b	.L4015
+.L3972:
+	ldr	r3, .L4058+28
 	cmp	r1, r3
-	beq	.L3969
+	beq	.L3974
 	add	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3966
-	b	.L4010
-.L3963:
-	ldr	r0, .L4053+32
+	beq	.L3971
+	b	.L4015
+.L3968:
+	ldr	r0, .L4058+32
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r4, r0, #0
-	bne	.L3970
-.L3975:
+	bne	.L3975
+.L3980:
 	mvn	r0, #11
-	b	.L3947
-.L3970:
+	b	.L3952
+.L3975:
 	mov	r1, r6
 	mov	r2, #512
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L4047
-	ldr	r0, .L4053+36
+	bne	.L4052
+	ldr	r0, .L4058+36
 	ldmia	r4, {r1, r2}
 	bl	printk
 	ldr	r3, [r4, #4]
 	cmp	r3, #8
 	str	r3, [sp]
-	bhi	.L4045
+	bhi	.L4050
 	bl	rknand_device_lock
 	mov	r2, r4
 	ldr	r0, [r4]
@@ -24218,101 +24246,101 @@ rknand_sys_storage_ioctl:
 	mov	r2, r2, asl #9
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L4040
-	ldr	r0, .L4053+40
-.L4043:
+	beq	.L4045
+	ldr	r0, .L4058+40
+.L4048:
 	bl	printk
-.L4045:
+.L4050:
 	mov	r0, r4
-.L4046:
+.L4051:
 	bl	ftl_free
-.L4044:
+.L4049:
 	mvn	r0, #13
-	b	.L3947
-.L3962:
-	ldr	r0, .L4053+44
+	b	.L3952
+.L3967:
+	ldr	r0, .L4058+44
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r4, r0, #0
-	beq	.L3975
+	beq	.L3980
 	mov	r1, r6
 	mov	r2, #4096
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L3976
-.L4047:
-	ldr	r0, .L4053+48
-	b	.L4043
-.L3976:
-	ldr	r6, .L4053+52
-	ldr	r0, .L4053+56
+	beq	.L3981
+.L4052:
+	ldr	r0, .L4058+48
+	b	.L4048
+.L3981:
+	ldr	r6, .L4058+52
+	ldr	r0, .L4058+56
 	ldmia	r4, {r1, r2}
 	bl	printk
 	ldr	r7, [r6, #492]
 	mov	r8, r6
 	cmp	r7, #0
-	bne	.L3977
+	bne	.L3982
 	mov	r0, #260096
 	bl	ftl_malloc
 	cmp	r0, #0
 	str	r0, [r6, #492]
-	beq	.L4045
+	beq	.L4050
 	mov	r1, r7
 	mov	r2, #260096
 	bl	memset
-.L3977:
+.L3982:
 	ldr	r2, [r4, #4]
 	movw	r3, #4088
 	cmp	r2, r3
-	bhi	.L4045
+	bhi	.L4050
 	ldr	r3, [r4]
 	cmp	r3, #251904
-	bhi	.L4045
+	bhi	.L4050
 	ldr	r0, [r8, #492]
 	add	r1, r4, #8
 	add	r0, r0, r3
 	bl	memcpy
-.L4040:
+.L4045:
 	mov	r0, r4
 	bl	ftl_free
-.L4041:
+.L4046:
 	mov	r4, #0
-	b	.L3974
-.L3965:
-	ldr	r0, .L4053+60
+	b	.L3979
+.L3970:
+	ldr	r0, .L4058+60
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r7, r0, #0
-	beq	.L3975
+	beq	.L3980
 	mov	r1, r6
 	mov	r2, #28
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L3980
-	ldr	r0, .L4053+48
+	beq	.L3985
+	ldr	r0, .L4058+48
 	bl	printk
-	b	.L3981
-.L3980:
+	b	.L3986
+.L3985:
 	ldmia	r7, {r1, r2}
-	ldr	r0, .L4053+64
+	ldr	r0, .L4058+64
 	bl	printk
 	ldr	r1, [r7]
 	cmp	r1, #256000
-	bhi	.L3981
-	ldr	r6, .L4053+52
+	bhi	.L3986
+	ldr	r6, .L4058+52
 	ldr	r0, [r6, #492]
 	cmp	r0, #0
-	beq	.L3981
+	beq	.L3986
 	bl	CRC_32
 	ldr	r3, [r7, #4]
 	cmp	r3, r0
-	beq	.L3983
+	beq	.L3988
 	mov	r0, r7
 	bl	ftl_free
-	b	.L4011
-.L3983:
+	b	.L4016
+.L3988:
 	bl	rknand_device_lock
 	ldr	r1, [r6, #492]
 	add	r2, r7, #8
@@ -24324,59 +24352,59 @@ rknand_sys_storage_ioctl:
 	bl	ftl_free
 	str	r4, [r6, #492]
 	mov	r0, r7
-	b	.L3987
-.L3981:
+	b	.L3992
+.L3986:
 	mov	r0, r7
-	b	.L4046
-.L3964:
-	ldr	r0, .L4053+68
+	b	.L4051
+.L3969:
+	ldr	r0, .L4058+68
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r7, r0, #0
-	beq	.L3975
+	beq	.L3980
 	bl	ftl_read_flash_info
 	mov	r0, r6
 	mov	r1, r7
 	mov	r2, #11
-	b	.L4051
-.L3948:
-	ldr	r0, .L4053+72
+	b	.L4056
+.L3953:
+	ldr	r0, .L4058+72
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r7, r0, #0
-	beq	.L3975
+	beq	.L3980
 	mov	r1, #0
 	mov	r2, #64
 	bl	ftl_memset
 	mov	r0, r6
 	mov	r1, r7
 	mov	r2, #64
-	b	.L4051
-.L3960:
-	ldr	r0, .L4053+76
+	b	.L4056
+.L3965:
+	ldr	r0, .L4058+76
 	bl	printk
-	ldr	r3, .L4053+52
+	ldr	r3, .L4058+52
 	mov	r0, r6
 	mov	r2, #4
 	ldr	r3, [r3, #496]
 	ldr	r3, [r3, #20]
 	add	r1, sp, #528
 	str	r3, [r1, #-528]!
-.L4035:
+.L4040:
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	bne	.L4044
-	b	.L4041
-.L3968:
-	ldr	r0, .L4053+80
+	bne	.L4049
+	b	.L4046
+.L3973:
+	ldr	r0, .L4058+80
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r7, r0, #0
-	beq	.L3975
+	beq	.L3980
 	bl	rknand_device_lock
 	mov	r1, #264
 	mov	r2, #2
@@ -24387,87 +24415,87 @@ rknand_sys_storage_ioctl:
 	mov	r0, r6
 	mov	r1, r7
 	mov	r2, #1024
-.L4051:
+.L4056:
 	bl	rk_copy_to_user
 	subs	r4, r0, #0
 	mov	r0, r7
-	bne	.L4046
-.L3987:
+	bne	.L4051
+.L3992:
 	bl	ftl_free
-	b	.L3974
-.L3952:
-	ldr	r0, .L4053+84
+	b	.L3979
+.L3957:
+	ldr	r0, .L4058+84
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	subs	r4, r0, #0
-	beq	.L3988
-.L3993:
-	ldr	r0, .L4053+48
+	beq	.L3993
+.L3998:
+	ldr	r0, .L4058+48
 	bl	printk
-	b	.L4044
-.L3988:
+	b	.L4049
+.L3993:
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+88
+	ldr	r3, .L4058+88
 	cmp	r2, r3
-	beq	.L3989
-.L3990:
+	beq	.L3994
+.L3995:
 	mvn	r4, #0
-	b	.L3974
-.L3989:
+	b	.L3979
+.L3994:
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3990
-	ldr	r7, .L4053+52
+	bhi	.L3995
+	ldr	r7, .L4058+52
 	mov	r2, #512
 	add	r0, sp, #4
 	ldr	r1, [r7, #496]
 	bl	memcpy
 	ldr	r2, [r7, #500]
-	ldr	r3, .L4053+92
+	ldr	r3, .L4058+92
 	cmp	r2, r3
-	beq	.L3991
+	beq	.L3996
 	add	r0, sp, #68
 	mov	r1, r4
 	mov	r2, #128
 	str	r4, [sp, #12]
 	str	r4, [sp, #16]
 	bl	memset
-.L3991:
+.L3996:
 	mov	r1, #0
 	mov	r2, #256
 	add	r0, sp, #260
 	str	r1, [sp, #20]
 	bl	memset
-	b	.L4049
-.L3955:
-	ldr	r0, .L4053+96
+	b	.L4054
+.L3960:
+	ldr	r0, .L4058+96
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+88
+	ldr	r3, .L4058+88
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3990
-	ldr	r2, .L4053+52
-	ldr	r3, .L4053+92
+	bhi	.L3995
+	ldr	r2, .L4058+52
+	ldr	r3, .L4058+92
 	ldr	r1, [r2, #500]
 	cmp	r1, r3
-	bne	.L4011
+	bne	.L4016
 	ldr	r3, [sp, #16]
 	sub	r1, r3, #1
 	cmp	r1, #127
 	mvnhi	r0, #2
-	bhi	.L3947
+	bhi	.L3952
 	ldr	r4, [r2, #496]
 	add	r1, sp, #68
 	add	r0, r4, #64
@@ -24476,36 +24504,36 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	r0, #1
 	mov	r1, r4
-	b	.L4042
-.L3959:
-	ldr	r0, .L4053+100
+	b	.L4047
+.L3964:
+	ldr	r0, .L4058+100
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+104
+	ldr	r3, .L4058+104
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3990
-	ldr	r6, .L4053+52
+	bhi	.L3995
+	ldr	r6, .L4058+52
 	ldr	r3, [r6, #504]
 	cmp	r3, #0
-	bne	.L3994
-.L3997:
+	bne	.L3999
+.L4002:
 	mov	r0, #0
-	b	.L3947
-.L3994:
+	b	.L3952
+.L3999:
 	ldr	r3, [r6, #508]
-	ldr	r2, .L4053+108
+	ldr	r2, .L4058+108
 	ldr	r1, [r3]
 	cmp	r1, r2
-	beq	.L3995
+	beq	.L4000
 	str	r2, [r3]
 	mov	r2, #504
 	ldr	r3, [r6, #508]
@@ -24513,19 +24541,19 @@ rknand_sys_storage_ioctl:
 	mov	r2, #0
 	str	r2, [r3, #8]
 	str	r2, [r3, #12]
-.L3995:
+.L4000:
 	ldr	r1, [r6, #508]
 	mov	r4, #0
 	mov	r0, r4
 	str	r4, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r6, #496]
-	ldr	r2, .L4053+88
+	ldr	r2, .L4058+88
 	ldr	r1, [r3]
 	cmp	r1, r2
 	strne	r2, [r3]
 	ldr	r7, [r6, #496]
-	ldrne	r3, .L4053+52
+	ldrne	r3, .L4058+52
 	movne	r2, #504
 	add	r0, r7, #64
 	ldrne	r3, [r3, #496]
@@ -24540,30 +24568,30 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	str	r4, [r6, #504]
 	str	r4, [r6, #500]
-	b	.L3974
-.L3950:
-	ldr	r0, .L4053+112
+	b	.L3979
+.L3955:
+	ldr	r0, .L4058+112
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+116
+	ldr	r3, .L4058+116
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3990
-	ldr	r6, .L4053+52
+	bhi	.L3995
+	ldr	r6, .L4058+52
 	ldr	r3, [r6, #504]
 	cmp	r3, #1
-	beq	.L3997
+	beq	.L4002
 	ldr	r3, [r6, #508]
 	mov	r4, #0
-	ldr	r2, .L4053+108
+	ldr	r2, .L4058+108
 	ldr	r1, [r3]
 	cmp	r1, r2
 	strne	r2, [r3]
@@ -24578,12 +24606,12 @@ rknand_sys_storage_ioctl:
 	str	r3, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r6, #496]
-	ldr	r2, .L4053+88
+	ldr	r2, .L4058+88
 	ldr	r1, [r3]
 	cmp	r1, r2
 	strne	r2, [r3]
 	ldr	r7, [r6, #496]
-	ldrne	r3, .L4053+52
+	ldrne	r3, .L4058+52
 	movne	r1, #504
 	movne	r2, #0
 	add	r0, r7, #64
@@ -24598,51 +24626,51 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	mov	r3, #1
 	str	r3, [r6, #504]
-	b	.L3974
-.L3956:
-	ldr	r0, .L4053+120
+	b	.L3979
+.L3961:
+	ldr	r0, .L4058+120
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+124
+	ldr	r3, .L4058+124
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r2, [sp, #8]
 	cmp	r2, #512
 	addls	r0, sp, #12
-	ldrls	r1, .L4053+128
-	bls	.L4048
-	b	.L3990
-.L3957:
-	ldr	r8, .L4053+16
+	ldrls	r1, .L4058+128
+	bls	.L4053
+	b	.L3995
+.L3962:
+	ldr	r8, .L4058+16
 	cmp	r4, r8
-	ldreq	r0, .L4053+132
-	beq	.L4038
-	ldr	r3, .L4053+136
+	ldreq	r0, .L4058+132
+	beq	.L4043
+	ldr	r3, .L4058+136
 	cmp	r4, r3
-	ldreq	r0, .L4053+140
-	ldrne	r0, .L4053+144
-.L4038:
+	ldreq	r0, .L4058+140
+	ldrne	r0, .L4058+144
+.L4043:
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+148
+	ldr	r3, .L4058+148
 	cmp	r2, r3
-	bne	.L4044
-	ldr	r3, .L4053+136
-	ldr	r7, .L4053+52
+	bne	.L4049
+	ldr	r3, .L4058+136
+	ldr	r7, .L4058+52
 	cmp	r4, r3
-	bne	.L4003
+	bne	.L4008
 	ldr	r3, [r7, #496]
 	mov	r0, r6
 	add	r1, sp, #4
@@ -24652,12 +24680,12 @@ rknand_sys_storage_ioctl:
 	strb	r3, [sp, #12]
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L3947
-	b	.L4044
-.L4003:
+	beq	.L3952
+	b	.L4049
+.L4008:
 	ldr	r3, [r7, #1024]
 	cmp	r3, #10
-	bhi	.L4044
+	bhi	.L4049
 	ldr	r1, [r7, #496]
 	ldr	r2, [sp, #8]
 	ldr	r3, [r1, #24]
@@ -24665,15 +24693,15 @@ rknand_sys_storage_ioctl:
 	cmpne	r3, #0
 	movne	r3, #1
 	moveq	r3, #0
-	beq	.L4004
-	ldr	r0, .L4053+152
+	beq	.L4009
+	ldr	r0, .L4058+152
 	mov	r1, r2
 	bl	printk
 	ldr	r3, [r7, #1024]
 	add	r3, r3, #1
 	str	r3, [r7, #1024]
-	b	.L4044
-.L4004:
+	b	.L4049
+.L4009:
 	cmp	r4, r8
 	str	r3, [r7, #1024]
 	mov	r0, #1
@@ -24684,98 +24712,98 @@ rknand_sys_storage_ioctl:
 	str	r3, [r1, #20]
 	bl	StorageSysDataStore
 	cmn	r0, #1
-	bne	.L4041
+	bne	.L4046
 	mvn	r4, #1
-	b	.L3974
-.L3969:
-	ldr	r0, .L4053+156
+	b	.L3979
+.L3974:
+	ldr	r0, .L4058+156
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+160
+	ldr	r3, .L4058+160
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r2, [sp, #8]
 	cmp	r2, #504
-	bhi	.L3990
-	ldr	r3, .L4053+164
+	bhi	.L3995
+	ldr	r3, .L4058+164
 	add	r0, sp, #12
 	cmp	r4, r3
-	ldr	r3, .L4053+52
+	ldr	r3, .L4058+52
 	ldreq	r1, [r3, #1028]
 	ldrne	r1, [r3, #1032]
 	add	r1, r1, #8
-.L4048:
+.L4053:
 	bl	memcpy
-.L4049:
+.L4054:
 	mov	r0, r6
 	add	r1, sp, #4
 	mov	r2, #520
-	b	.L4035
-.L3966:
-	ldr	r0, .L4053+168
+	b	.L4040
+.L3971:
+	ldr	r0, .L4058+168
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3993
+	bne	.L3998
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4053+160
+	ldr	r3, .L4058+160
 	cmp	r2, r3
-	bne	.L3990
+	bne	.L3995
 	ldr	r2, [sp, #8]
 	cmp	r2, #504
-	bhi	.L3990
+	bhi	.L3995
 	cmp	r4, r7
 	add	r2, r2, #8
-	ldr	r4, .L4053+52
-	bne	.L4008
+	ldr	r4, .L4058+52
+	bne	.L4013
 	add	r1, sp, #4
 	ldr	r0, [r4, #1028]
 	bl	memcpy
 	mov	r0, #2
 	ldr	r1, [r4, #1028]
-	b	.L4042
-.L4008:
+	b	.L4047
+.L4013:
 	add	r1, sp, #4
 	ldr	r0, [r4, #1032]
 	bl	memcpy
 	ldr	r1, [r4, #1032]
 	mov	r0, #3
-.L4042:
+.L4047:
 	bl	StorageSysDataStore
 	mov	r4, r0
-.L3974:
-	ldr	r0, .L4053+172
+.L3979:
+	ldr	r0, .L4058+172
 	mov	r1, r4
 	bl	printk
 	mov	r0, r4
-	b	.L3947
-.L4010:
+	b	.L3952
+.L4015:
 	mvn	r0, #21
-	b	.L3947
-.L4011:
+	b	.L3952
+.L4016:
 	mvn	r0, #1
-.L3947:
+.L3952:
 	ldr	r2, [sp, #524]
 	ldr	r3, [r5]
 	cmp	r2, r3
-	beq	.L4009
+	beq	.L4014
 	bl	__stack_chk_fail
-.L4009:
+.L4014:
 	add	sp, sp, #528
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L4054:
+.L4059:
 	.align	2
-.L4053:
+.L4058:
 	.word	__stack_chk_guard
 	.word	1074033155
 	.word	1074029570
@@ -24784,13 +24812,12 @@ rknand_sys_storage_ioctl:
 	.word	1074033235
 	.word	1074034193
 	.word	1074034194
-	.word	.LC180
-	.word	.LC182
+	.word	.LC181
 	.word	.LC183
 	.word	.LC184
-	.word	.LC181
-	.word	.LANCHOR4
 	.word	.LC185
+	.word	.LC182
+	.word	.LANCHOR4
 	.word	.LC186
 	.word	.LC187
 	.word	.LC188
@@ -24798,28 +24825,29 @@ rknand_sys_storage_ioctl:
 	.word	.LC190
 	.word	.LC191
 	.word	.LC192
+	.word	.LC193
 	.word	1263358532
 	.word	-1067903959
-	.word	.LC193
 	.word	.LC194
+	.word	.LC195
 	.word	1112753220
 	.word	1146313043
-	.word	.LC195
-	.word	1112755781
 	.word	.LC196
+	.word	1112755781
+	.word	.LC197
 	.word	1094995539
 	.word	.LANCHOR4+512
-	.word	.LC197
-	.word	1074031676
 	.word	.LC198
+	.word	1074031676
 	.word	.LC199
-	.word	1280262987
 	.word	.LC200
+	.word	1280262987
 	.word	.LC201
+	.word	.LC202
 	.word	1145980246
 	.word	1074034192
-	.word	.LC202
 	.word	.LC203
+	.word	.LC204
 	.fnend
 	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
 	.align	2
@@ -24832,7 +24860,7 @@ rk_ftl_storage_sys_init:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r2, #512
-	ldr	r4, .L4065
+	ldr	r4, .L4070
 	mvn	r3, #0
 	mov	r5, #0
 	add	r0, r4, #512
@@ -24856,23 +24884,23 @@ rk_ftl_storage_sys_init:
 	ldr	r3, [r6, #16]
 	cmp	r7, r5
 	str	r3, [r4, #504]
-	beq	.L4056
+	beq	.L4061
 	mov	r0, r6
 	mov	r1, #508
 	bl	js_hash
 	cmp	r7, r0
-	beq	.L4056
+	beq	.L4061
 	str	r5, [r6, #16]
-	ldr	r0, .L4065+4
+	ldr	r0, .L4070+4
 	str	r5, [r4, #504]
 	bl	printk
-.L4056:
+.L4061:
 	ldr	r3, [r4, #504]
 	mov	r0, #2
 	ldr	r1, [r4, #1028]
 	cmp	r3, #0
-	ldrne	r3, .L4065
-	ldrne	r2, .L4065+8
+	ldrne	r3, .L4070
+	ldrne	r2, .L4070+8
 	strne	r2, [r3, #500]
 	bl	StorageSysDataLoad
 	ldr	r1, [r4, #1032]
@@ -24880,11 +24908,11 @@ rk_ftl_storage_sys_init:
 	bl	StorageSysDataLoad
 	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	b	rknand_sys_storage_init
-.L4066:
+.L4071:
 	.align	2
-.L4065:
+.L4070:
 	.word	.LANCHOR4
-	.word	.LC204
+	.word	.LC205
 	.word	-1067903959
 	.fnend
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
@@ -24911,24 +24939,24 @@ rk_ftl_vendor_storage_init:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
 	bl	ftl_malloc
-	ldr	r6, .L4079
+	ldr	r6, .L4084
 	cmp	r0, #0
 	str	r0, [r6, #1036]
-	beq	.L4074
-	ldr	r9, .L4079+4
+	beq	.L4079
+	ldr	r9, .L4084+4
 	mov	r8, #0
 	mov	r4, r8
 	mov	r7, r8
 	mov	r10, r6
-.L4072:
+.L4077:
 	mov	r0, r7, asl #7
 	mov	r1, #128
 	ldr	r2, [r6, #1036]
 	bl	FlashBootVendorRead
 	cmp	r0, #0
-	bne	.L4070
+	bne	.L4075
 	ldr	r3, [r10, #1036]
-	ldr	r0, .L4079+8
+	ldr	r0, .L4084+8
 	add	r2, r3, #61440
 	ldr	r1, [r3]
 	ldr	r2, [r2, #4092]
@@ -24937,7 +24965,7 @@ rk_ftl_vendor_storage_init:
 	ldr	r5, [r10, #1036]
 	ldr	r3, [r5]
 	cmp	r3, r9
-	bne	.L4071
+	bne	.L4076
 	add	r2, r5, #61440
 	ldr	r3, [r5, #4]
 	ldr	r1, [r2, #4092]
@@ -24949,51 +24977,51 @@ rk_ftl_vendor_storage_init:
 	cmp	r2, #0
 	movne	r8, r7
 	movne	r4, r3
-.L4071:
+.L4076:
 	cmp	r7, #1
 	movne	r7, #1
-	bne	.L4072
-.L4078:
+	bne	.L4077
+.L4083:
 	cmp	r4, #0
-	beq	.L4073
+	beq	.L4078
 	mov	r0, r8, asl #7
 	mov	r1, #128
 	mov	r2, r5
 	bl	FlashBootVendorRead
 	cmp	r0, #0
-	bne	.L4070
+	bne	.L4075
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L4073:
+.L4078:
 	mov	r0, r5
 	mov	r1, r4
 	mov	r2, #65536
 	bl	memset
-	ldr	r3, .L4079+4
+	ldr	r3, .L4084+4
 	str	r7, [r5, #4]
 	mov	r0, r4
 	str	r3, [r5]
 	add	r3, r5, #61440
 	str	r7, [r3, #4092]
-	ldr	r3, .L4079+12
+	ldr	r3, .L4084+12
 	strh	r4, [r5, #12]	@ movhi
 	strh	r3, [r5, #14]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L4070:
+.L4075:
 	ldr	r0, [r6, #1036]
 	bl	kfree
 	mov	r3, #0
 	mvn	r0, #0
 	str	r3, [r6, #1036]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L4074:
+.L4079:
 	mvn	r0, #11
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
-.L4080:
+.L4085:
 	.align	2
-.L4079:
+.L4084:
 	.word	.LANCHOR4
 	.word	1380668996
-	.word	.LC205
+	.word	.LC206
 	.word	-1032
 	.fnend
 	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
@@ -25006,19 +25034,19 @@ rk_ftl_vendor_read:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r3, .L4088
+	ldr	r3, .L4093
 	ldr	ip, [r3, #1036]
 	cmp	ip, #0
 	ldrneh	r4, [ip, #10]
 	movne	r3, #0
-	beq	.L4086
-.L4083:
+	beq	.L4091
+.L4088:
 	cmp	r3, r4
-	bcs	.L4086
+	bcs	.L4091
 	add	lr, ip, r3, asl #3
 	ldrh	r5, [lr, #16]
 	cmp	r5, r0
-	bne	.L4084
+	bne	.L4089
 	ldrh	r3, [lr, #20]
 	mov	r0, r1
 	ldrh	r1, [lr, #18]
@@ -25031,15 +25059,15 @@ rk_ftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L4084:
+.L4089:
 	add	r3, r3, #1
-	b	.L4083
-.L4086:
+	b	.L4088
+.L4091:
 	mvn	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L4089:
+.L4094:
 	.align	2
-.L4088:
+.L4093:
 	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
@@ -25053,12 +25081,12 @@ rk_ftl_vendor_write:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r2
-	ldr	r2, .L4113
+	ldr	r2, .L4118
 	.pad #28
 	sub	sp, sp, #28
 	ldr	r4, [r2, #1036]
 	cmp	r4, #0
-	beq	.L4105
+	beq	.L4110
 	mov	r3, r1
 	add	r7, r9, #63
 	ldrh	r1, [r4, #8]
@@ -25067,31 +25095,31 @@ rk_ftl_vendor_write:
 	mov	ip, r0
 	mov	r6, #0
 	str	r1, [sp, #4]
-.L4092:
+.L4097:
 	cmp	r6, r2
-	bcs	.L4111
+	bcs	.L4116
 	add	r5, r4, r6, asl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, ip
-	bne	.L4093
+	bne	.L4098
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	str	r1, [sp, #8]
 	cmp	r9, r1
-	bls	.L4094
+	bls	.L4099
 	ldrh	r1, [r4, #14]
 	cmp	r1, r7
 	subcs	r2, r2, #1
 	strcs	r2, [sp, #12]
 	ldrcsh	r8, [r5, #18]
-	bcc	.L4105
-.L4095:
+	bcc	.L4110
+.L4100:
 	ldr	r2, [sp, #12]
 	add	r5, r5, #8
 	cmp	r6, r2
-	bcs	.L4112
+	bcs	.L4117
 	ldrh	r10, [r5, #20]
 	add	r0, fp, r8
 	ldrh	r2, [r5, #16]
@@ -25110,8 +25138,8 @@ rk_ftl_vendor_write:
 	add	r8, r8, r10
 	ldr	r3, [sp, #20]
 	ldr	ip, [sp, #16]
-	b	.L4095
-.L4112:
+	b	.L4100
+.L4117:
 	add	r6, r4, r6, asl #3
 	uxth	r8, r8
 	add	r0, fp, r8
@@ -25129,22 +25157,22 @@ rk_ftl_vendor_write:
 	add	r5, r3, r5
 	rsb	r7, r7, r5
 	strh	r7, [r4, #14]	@ movhi
-	b	.L4110
-.L4094:
+	b	.L4115
+.L4099:
 	ldrh	r0, [r5, #18]
 	mov	r1, r3
 	mov	r2, r9
 	add	r0, fp, r0
 	bl	memcpy
 	strh	r9, [r5, #20]	@ movhi
-	b	.L4110
-.L4093:
+	b	.L4115
+.L4098:
 	add	r6, r6, #1
-	b	.L4092
-.L4111:
+	b	.L4097
+.L4116:
 	ldrh	r1, [r4, #14]
 	cmp	r1, r7
-	bcc	.L4105
+	bcc	.L4110
 	add	r2, r4, r2, asl #3
 	uxth	r7, r7
 	rsb	r1, r7, r1
@@ -25164,7 +25192,7 @@ rk_ftl_vendor_write:
 	ldrh	r3, [r4, #10]
 	add	r3, r3, #1
 	strh	r3, [r4, #10]	@ movhi
-.L4110:
+.L4115:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	mov	r1, #128
@@ -25182,16 +25210,16 @@ rk_ftl_vendor_write:
 	mov	r0, r3, asl #7
 	bl	FlashBootVendorWrite
 	mov	r0, #0
-	b	.L4091
-.L4105:
+	b	.L4096
+.L4110:
 	mvn	r0, #0
-.L4091:
+.L4096:
 	add	sp, sp, #28
 	@ sp needed
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L4114:
+.L4119:
 	.align	2
-.L4113:
+.L4118:
 	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
@@ -25210,34 +25238,34 @@ rk_ftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L4116
-	ldr	r3, .L4132
+	beq	.L4121
+	ldr	r3, .L4137
 	cmp	r6, r3
-	beq	.L4118
+	beq	.L4123
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L4119
-	b	.L4130
-.L4118:
+	beq	.L4124
+	b	.L4135
+.L4123:
 	mov	r1, r5
 	mov	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L4130
+	bne	.L4135
 	ldr	r2, [r4]
-	ldr	r3, .L4132+4
+	ldr	r3, .L4137+4
 	cmp	r2, r3
-	beq	.L4121
-.L4122:
+	beq	.L4126
+.L4127:
 	mvn	r5, #0
-	b	.L4117
-.L4121:
+	b	.L4122
+.L4126:
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_read
 	cmn	r0, #1
-	beq	.L4122
+	beq	.L4127
 	uxth	r2, r0
 	strh	r0, [r4, #6]	@ movhi
 	mov	r1, r4
@@ -25247,44 +25275,44 @@ rk_ftl_vendor_storage_ioctl:
 	cmp	r0, #0
 	moveq	r5, #0
 	mvnne	r5, #13
-	b	.L4117
-.L4119:
+	b	.L4122
+.L4124:
 	mov	r1, r5
 	mov	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L4130
+	bne	.L4135
 	ldr	r2, [r4]
-	ldr	r3, .L4132+4
+	ldr	r3, .L4137+4
 	cmp	r2, r3
-	bne	.L4122
+	bne	.L4127
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L4122
+	bhi	.L4127
 	mov	r0, r4
 	mov	r1, r5
 	add	r2, r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L4130
+	bne	.L4135
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_write
 	mov	r5, r0
-	b	.L4117
-.L4130:
+	b	.L4122
+.L4135:
 	mvn	r5, #13
-.L4117:
+.L4122:
 	mov	r0, r4
 	bl	kfree
-.L4116:
+.L4121:
 	mov	r0, r5
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L4133:
+.L4138:
 	.align	2
-.L4132:
+.L4137:
 	.word	1074034177
 	.word	1448232273
 	.fnend
@@ -25535,9 +25563,9 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	2
 .LANCHOR3 = . + 0
-	.type	__func__.20216, %object
-	.size	__func__.20216, 11
-__func__.20216:
+	.type	__func__.20217, %object
+	.size	__func__.20217, 11
+__func__.20217:
 	.ascii	"FtlMemInit\000"
 .LC0:
 	.byte	60
@@ -25545,32 +25573,32 @@ __func__.20216:
 	.byte	24
 	.byte	16
 	.space	1
-	.type	__func__.20991, %object
-	.size	__func__.20991, 17
-__func__.20991:
+	.type	__func__.20992, %object
+	.size	__func__.20992, 17
+__func__.20992:
 	.ascii	"FtlDumpBlockInfo\000"
 	.space	3
-	.type	__func__.21010, %object
-	.size	__func__.21010, 16
-__func__.21010:
+	.type	__func__.21011, %object
+	.size	__func__.21011, 16
+__func__.21011:
 	.ascii	"FtlScanAllBlock\000"
-	.type	__func__.21276, %object
-	.size	__func__.21276, 17
-__func__.21276:
+	.type	__func__.21277, %object
+	.size	__func__.21277, 17
+__func__.21277:
 	.ascii	"ftl_scan_all_ppa\000"
 	.space	3
-	.type	__func__.20959, %object
-	.size	__func__.20959, 12
-__func__.20959:
+	.type	__func__.20960, %object
+	.size	__func__.20960, 12
+__func__.20960:
 	.ascii	"FtlCheckVpc\000"
-	.type	__func__.21258, %object
-	.size	__func__.21258, 21
-__func__.21258:
+	.type	__func__.21259, %object
+	.size	__func__.21259, 21
+__func__.21259:
 	.ascii	"FtlVpcCheckAndModify\000"
 	.space	3
-	.type	__func__.20289, %object
-	.size	__func__.20289, 8
-__func__.20289:
+	.type	__func__.20290, %object
+	.size	__func__.20290, 8
+__func__.20290:
 	.ascii	"FtlInit\000"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC1:
@@ -25728,7 +25756,7 @@ __func__.20289:
 .LC76:
 	.ascii	"%s\012\000"
 .LC77:
-	.ascii	"FTL version: 5.0.56 20190508\000"
+	.ascii	"FTL version: 5.0.57 20190927\000"
 .LC78:
 	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
 	.ascii	"\012\000"
@@ -25790,211 +25818,214 @@ __func__.20289:
 .LC106:
 	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC107:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data= %x\012"
+	.ascii	"\000"
 .LC108:
-	.ascii	"superBlkID = %x vpc=%x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC109:
-	.ascii	"flashmode = %x pagenum = %x %x\012\000"
+	.ascii	"superBlkID = %x vpc=%x\012\000"
 .LC110:
+	.ascii	"flashmode = %x pagenum = %x %x\012\000"
+.LC111:
 	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC111:
-	.ascii	"blk = %x vpc=%x mode = %x\012\000"
 .LC112:
+	.ascii	"blk = %x vpc=%x mode = %x\012\000"
+.LC113:
 	.ascii	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
 	.ascii	"%x\012\000"
-.LC113:
+.LC114:
 	.ascii	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
 	.ascii	"%x\012\000"
-.LC114:
-	.ascii	"ftl_scan_all_ppa blk %x page %x\012\000"
 .LC115:
+	.ascii	"ftl_scan_all_ppa blk %x page %x\012\000"
+.LC116:
 	.ascii	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC116:
-	.ascii	"%s finished\012\000"
 .LC117:
-	.ascii	"FlashMakeFactorBbt %d\012\000"
+	.ascii	"%s finished\012\000"
 .LC118:
-	.ascii	"bad block:%d %d\012\000"
+	.ascii	"FlashMakeFactorBbt %d\012\000"
 .LC119:
-	.ascii	"FMFB:%d %d\012\000"
+	.ascii	"bad block:%d %d\012\000"
 .LC120:
-	.ascii	"E:bad block:%d\012\000"
+	.ascii	"FMFB:%d %d\012\000"
 .LC121:
-	.ascii	"FMFB:Save %d %d\012\000"
+	.ascii	"E:bad block:%d\012\000"
 .LC122:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FMFB:Save %d %d\012\000"
 .LC123:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC124:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC125:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC126:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC127:
-	.ascii	"decrement_vpc_count %x = %d in free list\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC128:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"decrement_vpc_count %x = %d in free list\012\000"
 .LC129:
-	.ascii	"page map lost: %x %x\012\000"
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC130:
-	.ascii	"FtlMapWritePage error = %x\012\000"
+	.ascii	"page map lost: %x %x\012\000"
 .LC131:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"FtlMapWritePage error = %x\012\000"
 .LC132:
-	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC133:
-	.ascii	"no ect\000"
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC134:
-	.ascii	"slc mode\000"
+	.ascii	"no ect\000"
 .LC135:
-	.ascii	"BBT:\000"
+	.ascii	"slc mode\000"
 .LC136:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"BBT:\000"
 .LC137:
-	.ascii	"map_ppn:\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC138:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC139:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC140:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC141:
-	.ascii	"Ftlscanalldata = %x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC142:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"Ftlscanalldata = %x\012\000"
 .LC143:
+	.ascii	"scan lpa = %x ppa= %x\012\000"
+.LC144:
 	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC144:
-	.ascii	"RSB refresh addr %x\012\000"
 .LC145:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"RSB refresh addr %x\012\000"
 .LC146:
-	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC147:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
 .LC148:
-	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC149:
-	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC150:
-	.ascii	"GC des block %x done\012\000"
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
 .LC151:
-	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+	.ascii	"GC des block %x done\012\000"
 .LC152:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
 .LC153:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC154:
-	.ascii	"rk_ftl_de_init %x\012\000"
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC155:
+	.ascii	"rk_ftl_de_init %x\012\000"
+.LC156:
 	.ascii	"...%s: no bad block mapping table, format device\012"
 	.ascii	"\000"
-.LC156:
-	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC157:
-	.ascii	"FtlInit %x\012\000"
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC158:
-	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+	.ascii	"FtlInit %x\012\000"
 .LC159:
-	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
 .LC160:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
 .LC161:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC162:
 	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\012"
 	.ascii	"\000"
-.LC162:
-	.ascii	":\000"
 .LC163:
+	.ascii	":\000"
+.LC164:
 	.ascii	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC164:
-	.ascii	"Mblk:\000"
 .LC165:
-	.ascii	"L2P:\000"
+	.ascii	"Mblk:\000"
 .LC166:
-	.ascii	"L2PC:\000"
+	.ascii	"L2P:\000"
 .LC167:
-	.ascii	"IdBlockReadData %x %x\012\000"
+	.ascii	"L2PC:\000"
 .LC168:
-	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+	.ascii	"IdBlockReadData %x %x\012\000"
 .LC169:
-	.ascii	"write_idblock fix data %x %x\012\000"
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
 .LC170:
-	.ascii	"idblk:\000"
+	.ascii	"write_idblock fix data %x %x\012\000"
 .LC171:
-	.ascii	"idb reverse %x %x\012\000"
+	.ascii	"idblk:\000"
 .LC172:
-	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
+	.ascii	"idb reverse %x %x\012\000"
 .LC173:
-	.ascii	"IDBlockWriteData %x %x\012\000"
+	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
 .LC174:
-	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+	.ascii	"IDBlockWriteData %x %x\012\000"
 .LC175:
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+.LC176:
 	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
 	.ascii	"\012\000"
-.LC176:
-	.ascii	"write\000"
 .LC177:
-	.ascii	"read\000"
+	.ascii	"write\000"
 .LC178:
-	.ascii	"write_idblock error %d\012\000"
+	.ascii	"read\000"
 .LC179:
-	.ascii	"wl_lba %p %x %x %x\012\000"
+	.ascii	"write_idblock error %d\012\000"
 .LC180:
-	.ascii	"READ_SECTOR_IO\012\000"
+	.ascii	"wl_lba %p %x %x %x\012\000"
 .LC181:
-	.ascii	"rk_copy_from_user error\012\000"
+	.ascii	"READ_SECTOR_IO\012\000"
 .LC182:
-	.ascii	"READ_SECTOR_IO %x %x\012\000"
+	.ascii	"rk_copy_from_user error\012\000"
 .LC183:
-	.ascii	"rk_copy_to_user error\012\000"
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
 .LC184:
-	.ascii	"WRITE_SECTOR_IO\012\000"
+	.ascii	"rk_copy_to_user error\012\000"
 .LC185:
-	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"WRITE_SECTOR_IO\012\000"
 .LC186:
-	.ascii	"END_WRITE_SECTOR_IO\012\000"
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
 .LC187:
-	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
 .LC188:
-	.ascii	"GET_FLASH_INFO_IO\012\000"
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
 .LC189:
-	.ascii	"GET_BAD_BLOCK_IO\012\000"
+	.ascii	"GET_FLASH_INFO_IO\012\000"
 .LC190:
-	.ascii	"GET_LOCK_FLAG_IO\012\000"
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
 .LC191:
-	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
 .LC192:
-	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
 .LC193:
-	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
 .LC194:
-	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
 .LC195:
-	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
 .LC196:
-	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
 .LC197:
-	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
 .LC198:
-	.ascii	"RKNAND_LOADER_STATUS\012\000"
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
 .LC199:
-	.ascii	"RKNAND_LOADER_LOCK\012\000"
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
 .LC200:
-	.ascii	"LockKey not match %d\012\000"
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
 .LC201:
-	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+	.ascii	"LockKey not match %d\012\000"
 .LC202:
-	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
 .LC203:
-	.ascii	"return ret = %lx\012\000"
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
 .LC204:
-	.ascii	"secureBootEn check error\012\000"
+	.ascii	"return ret = %lx\012\000"
 .LC205:
+	.ascii	"secureBootEn check error\012\000"
+.LC206:
 	.ascii	"\0013vendor storage %x,%x,%x\012\000"
 	.data
 	.align	2
diff --git a/drivers/rk_nand/rk_ftl_arm_v7_thumb.S b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
index 4bfb2fa426ea..781d21ae6ffc 100644
--- a/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
+++ b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2019-05-08
+ * date: 2019-09-29
  */
 	.syntax unified
 	.arch armv7-a
@@ -21,8 +21,6 @@
 	.eabi_attribute 18, 2
 	.thumb
 	.file	"rk_ftl_arm_v7.S"
-#APP
-	.syntax unified
 	.thumb
 	.text
 	.align	1
@@ -404,19 +402,26 @@ FlashProgSecondCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
 	ldr	r3, .L67
 	add	r0, r3, r0, lsl #3
-	ldrb	r2, [r0, #16]	@ zero_extendqisi2
-	ldr	r3, [r0, #12]
-	add	r3, r3, r2, lsl #8
-	movs	r2, #16
-	str	r2, [r3, #2056]
-	bx	lr
+	ldr	r3, .L67+4
+	ldr	r4, [r0, #12]
+	ldrb	r5, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r3, #4]
+	ldr	r0, .L67+8
+	blx	r3
+	add	r4, r4, r5, lsl #8
+	movs	r3, #16
+	str	r3, [r4, #2056]
+	pop	{r3, r4, r5, pc}
 .L68:
 	.align	2
 .L67:
 	.word	.LANCHOR0
+	.word	arm_delay_ops
+	.word	64424500
 	.fnend
 	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
 	.align	1
@@ -6958,24 +6963,28 @@ FtlBbt2Bitmap:
 	mov	r0, r1
 	mov	r5, r1
 	movs	r1, #0
-	movs	r6, #1
-	movw	r7, #65535
+	movs	r7, #1
 	ldrh	r2, [r3, #1864]
 	lsls	r2, r2, #2
 	bl	ftl_memset
+	ldr	r1, .L1041+4
 	subs	r2, r4, #2
 	addw	r4, r4, #1022
+	movw	lr, #65535
 .L1038:
 	ldrh	r3, [r2, #2]!
-	cmp	r3, r7
+	cmp	r3, lr
 	beq	.L1036
-	lsrs	r1, r3, #5
-	cmp	r2, r4
+	lsrs	r0, r3, #5
 	and	r3, r3, #31
-	ldr	r0, [r5, r1, lsl #2]
-	lsl	r3, r6, r3
-	orr	r3, r3, r0
-	str	r3, [r5, r1, lsl #2]
+	lsl	r3, r7, r3
+	cmp	r2, r4
+	ldr	r6, [r5, r0, lsl #2]
+	orr	r3, r3, r6
+	str	r3, [r5, r0, lsl #2]
+	ldrh	r3, [r1, #1942]
+	add	r3, r3, #1
+	strh	r3, [r1, #1942]	@ movhi
 	bne	.L1038
 .L1036:
 	pop	{r3, r4, r5, r6, r7, pc}
@@ -6983,6 +6992,7 @@ FtlBbt2Bitmap:
 	.align	2
 .L1041:
 	.word	.LANCHOR2
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	1
@@ -12827,11 +12837,12 @@ FtlLoadSysInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
 	movs	r1, #0
 	ldr	r4, .L2132
+	.pad #36
+	sub	sp, sp, #36
 	ldr	r7, .L2132+4
 	ldr	r3, [r4, #1776]
 	mov	r5, r4
@@ -12851,10 +12862,9 @@ FtlLoadSysInfo:
 	b	.L2106
 .L2105:
 	movs	r1, #1
-	ldr	r10, .L2132+12
+	mov	r6, r5
 	bl	FtlGetLastWrittenPage
 	ldrh	r8, [r5, #24]
-	mov	r6, r5
 	uxth	r4, r0
 	adds	r0, r0, #1
 	strh	r0, [r5, #26]	@ movhi
@@ -12875,20 +12885,37 @@ FtlLoadSysInfo:
 	ldrb	r3, [r7]	@ zero_extendqisi2
 	cbz	r3, .L2108
 	ldr	r3, [r6, #4064]
-	ldr	r3, [r3, #12]
-	cbz	r3, .L2108
-	ldr	r0, [r6, #4060]
+	ldr	r2, [r3, #12]
+	cbz	r2, .L2108
+	ldr	r10, [r6, #4060]
 	ldrh	r1, [fp, #1882]
-	str	r3, [sp, #4]
+	str	r2, [sp, #28]
+	mov	r0, r10
+	str	r3, [sp, #24]
 	bl	js_hash
-	ldr	r3, [sp, #4]
-	cmp	r3, r0
+	ldr	r2, [sp, #28]
+	cmp	r2, r0
 	beq	.L2108
+	ldr	r3, [sp, #24]
 	cbnz	r4, .L2109
-	ldrh	r3, [r6, #28]
-	cmp	r9, r3
+	ldrh	r1, [r6, #28]
+	cmp	r9, r1
 	beq	.L2109
-	uxth	r8, r3
+	ldr	r0, [r3]
+	ldrh	r1, [r6, #24]
+	str	r0, [sp]
+	ldr	r0, [r3, #4]
+	str	r0, [sp, #4]
+	ldr	r3, [r3, #8]
+	str	r2, [sp, #12]
+	ldr	r0, .L2132+12
+	str	r3, [sp, #8]
+	ldr	r3, [r10]
+	str	r3, [sp, #16]
+	ldr	r2, [r6, #4052]
+	ldr	r3, [r6, #4056]
+	bl	printk
+	ldrh	r8, [r6, #28]
 	ldrh	r4, [fp, #1874]
 	b	.L2111
 .L2109:
@@ -12899,8 +12926,9 @@ FtlLoadSysInfo:
 	adds	r3, r3, #1
 	beq	.L2111
 	ldr	r3, [r6, #1776]
+	ldr	r2, .L2132+16
 	ldr	r3, [r3]
-	cmp	r3, r10
+	cmp	r3, r2
 	bne	.L2111
 	ldr	r3, [r6, #1800]
 	ldrh	r2, [r3]
@@ -12949,7 +12977,7 @@ FtlLoadSysInfo:
 	b	.L2107
 .L2113:
 	ldr	r2, [r7, #4068]
-	ldr	r3, .L2132+12
+	ldr	r3, .L2132+16
 	ldr	r6, .L2132+4
 	cmp	r2, r3
 	bne	.L2116
@@ -13032,33 +13060,33 @@ FtlLoadSysInfo:
 	movw	r3, #65535
 	cmp	r1, r3
 	beq	.L2119
-	ldr	r0, .L2132+16
+	ldr	r0, .L2132+20
 	bl	make_superblock
 .L2119:
 	ldrh	r2, [r5, #-152]
 	movw	r3, #65535
 	cmp	r2, r3
 	beq	.L2120
-	ldr	r0, .L2132+20
+	ldr	r0, .L2132+24
 	bl	make_superblock
 .L2120:
 	ldrh	r2, [r5, #-104]
 	movw	r3, #65535
 	cmp	r2, r3
 	beq	.L2121
-	ldr	r0, .L2132+24
+	ldr	r0, .L2132+28
 	bl	make_superblock
 .L2121:
 	ldrh	r2, [r5, #40]
 	movw	r3, #65535
 	cmp	r2, r3
 	beq	.L2122
-	ldr	r0, .L2132+28
+	ldr	r0, .L2132+32
 	bl	make_superblock
 .L2122:
 	movs	r0, #0
 .L2106:
-	add	sp, sp, #12
+	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 .L2133:
@@ -13067,6 +13095,7 @@ FtlLoadSysInfo:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR2+4052
+	.word	.LC107
 	.word	1179929683
 	.word	.LANCHOR2-200
 	.word	.LANCHOR2-152
@@ -13242,10 +13271,10 @@ FtlDumpBlockInfo:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3+16
-	.word	.LC107
 	.word	.LC108
 	.word	.LC109
 	.word	.LC110
+	.word	.LC111
 	.fnend
 	.size	FtlDumpBlockInfo, .-FtlDumpBlockInfo
 	.align	1
@@ -13425,13 +13454,13 @@ FtlScanAllBlock:
 	.align	2
 .L2170:
 	.word	__stack_chk_guard
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR3+36
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC111
 	.word	.LC112
 	.word	.LC113
+	.word	.LC114
 	.fnend
 	.size	FtlScanAllBlock, .-FtlScanAllBlock
 	.align	1
@@ -13508,11 +13537,11 @@ ftl_scan_all_ppa:
 	.align	2
 .L2178:
 	.word	.LANCHOR0
-	.word	.LC114
+	.word	.LC115
 	.word	.LANCHOR2
 	.word	.LANCHOR2+4052
-	.word	.LC115
 	.word	.LC116
+	.word	.LC117
 	.word	.LANCHOR3+52
 	.fnend
 	.size	ftl_scan_all_ppa, .-ftl_scan_all_ppa
@@ -14231,11 +14260,11 @@ FlashMakeFactorBbt:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC117
 	.word	.LC118
 	.word	.LC119
 	.word	.LC120
 	.word	.LC121
+	.word	.LC122
 .L2299:
 	ldr	r3, .L2305
 	ldr	r2, [sp, #84]
@@ -14667,9 +14696,9 @@ FtlBbmTblFlush:
 .L2378:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC122
 	.word	.LC123
 	.word	.LC124
+	.word	.LC125
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	1
@@ -15050,7 +15079,7 @@ FtlGcFreeBadSuperBlk:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR2+668
-	.word	.LC125
+	.word	.LC126
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	1
@@ -15184,8 +15213,8 @@ decrement_vpc_count:
 	.align	2
 .L2474:
 	.word	.LANCHOR2
-	.word	.LC126
 	.word	.LC127
+	.word	.LC128
 	.fnend
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	1
@@ -15620,9 +15649,9 @@ FtlVpcTblFlush:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	1179929683
-	.word	1342177366
+	.word	1342177367
 	.word	.LANCHOR2+4052
-	.word	.LC128
+	.word	.LC129
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	1
@@ -15858,7 +15887,7 @@ ftl_map_blk_gc:
 .L2566:
 	.word	.LANCHOR2
 	.word	.LANCHOR2+4052
-	.word	.LC129
+	.word	.LC130
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
@@ -16103,8 +16132,8 @@ FtlMapWritePage:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR2+4052
-	.word	.LC130
 	.word	.LC131
+	.word	.LC132
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	1
@@ -16633,7 +16662,7 @@ Ftl_save_ext_data:
 .L2678:
 	.word	.LANCHOR2
 	.word	1179929683
-	.word	1342177366
+	.word	1342177367
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
@@ -16827,7 +16856,7 @@ FtlVendorPartRead:
 .L2701:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
-	.word	.LC132
+	.word	.LC133
 	.word	.LANCHOR2+4092
 	.word	.LANCHOR2
 	.fnend
@@ -16869,7 +16898,7 @@ FtlLoadEctTbl:
 .L2705:
 	.word	.LANCHOR2
 	.word	1112818501
-	.word	.LC133
+	.word	.LC134
 	.word	.LC76
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
@@ -16958,7 +16987,7 @@ Ftl_load_ext_data:
 	.word	.LANCHOR0
 	.word	305432421
 	.word	.LC76
-	.word	.LC134
+	.word	.LC135
 	.fnend
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	1
@@ -17126,7 +17155,7 @@ FlashReadFacBbtData:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC135
+	.word	.LC136
 	.fnend
 	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
 	.align	1
@@ -17580,10 +17609,10 @@ log2phys:
 .L2790:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC136
-	.word	.LC100
 	.word	.LC137
+	.word	.LC100
 	.word	.LC138
+	.word	.LC139
 	.fnend
 	.size	log2phys, .-log2phys
 	.align	1
@@ -17964,13 +17993,13 @@ FtlCheckVpc:
 .L2869:
 	.word	__stack_chk_guard
 	.word	.LANCHOR3+72
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR0
 	.word	.LANCHOR4-204
 	.word	.LANCHOR2
-	.word	.LC139
-	.word	-1431655765
 	.word	.LC140
+	.word	-1431655765
+	.word	.LC141
 	.word	.LANCHOR4
 	.fnend
 	.size	FtlCheckVpc, .-FtlCheckVpc
@@ -18069,11 +18098,11 @@ Ftlscanalldata:
 	.align	2
 .L2887:
 	.word	__stack_chk_guard
-	.word	.LC141
-	.word	.LANCHOR2
 	.word	.LC142
-	.word	.LANCHOR2+4052
+	.word	.LANCHOR2
 	.word	.LC143
+	.word	.LANCHOR2+4052
+	.word	.LC144
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftlscanalldata, .-Ftlscanalldata
@@ -18162,7 +18191,7 @@ FtlRecoverySuperblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3061
+	ldr	r3, .L3064
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #68
@@ -18176,7 +18205,7 @@ FtlRecoverySuperblock:
 	beq	.L2902
 	ldrh	r3, [r0, #2]
 	movs	r5, #0
-	ldr	r6, .L3061+4
+	ldr	r6, .L3064+4
 	str	r3, [sp, #12]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r2, [sp, #12]
@@ -18192,12 +18221,12 @@ FtlRecoverySuperblock:
 .L2904:
 	cmp	r0, r7
 	add	r5, r5, #1
-	bne	.L3056
+	bne	.L3059
 	uxth	r3, r5
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
 	b	.L2904
-.L3056:
+.L3059:
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	cmp	r1, #1
 	bne	.L2906
@@ -18206,8 +18235,8 @@ FtlRecoverySuperblock:
 	mov	r5, r0
 	beq	.L2907
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
-	cbnz	r3, .L3047
-	ldr	r3, .L3061+4
+	cbnz	r3, .L3050
+	ldr	r3, .L3064+4
 	add	r3, r3, r0, lsl #1
 	ldrh	r7, [r3, #144]
 	b	.L2981
@@ -18217,10 +18246,10 @@ FtlRecoverySuperblock:
 	adds	r3, r0, #1
 	mov	r5, r0
 	beq	.L2907
-.L3047:
+.L3050:
 	mov	r7, r5
 .L2981:
-	ldr	r3, .L3061+8
+	ldr	r3, .L3064+8
 	movw	r9, #65535
 	ldrh	ip, [r6, #1804]
 	mov	r10, #36
@@ -18267,16 +18296,16 @@ FtlRecoverySuperblock:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
 	bne	.L2984
-	ldr	r3, .L3061+4
+	ldr	r3, .L3064+4
 	ldrb	r1, [r3, #140]	@ zero_extendqisi2
 	adds	r3, r1, #0
 	it	ne
 	movne	r3, #1
-	b	.L3048
+	b	.L3051
 .L2984:
 	movs	r3, #0
-.L3048:
-	ldr	r8, .L3061+8
+.L3051:
+	ldr	r8, .L3064+8
 	mov	r1, r6
 	str	r3, [sp, #24]
 	mov	fp, #0
@@ -18317,37 +18346,37 @@ FtlRecoverySuperblock:
 	bne	.L2917
 .L2921:
 	cmp	r9, r6
-	ldr	r6, .L3061+8
-	bne	.L3045
+	ldr	r6, .L3064+8
+	bne	.L3048
 	ldr	r3, [r6, #1764]
 	adds	r5, r5, #1
 	uxth	r10, r5
 	ldr	r0, [r3, #4]
-	b	.L3049
+	b	.L3052
 .L2915:
 	ldr	r1, [lr, #4]
-	ldr	r0, .L3061+12
+	ldr	r0, .L3064+12
 	bl	printk
 	uxth	r3, r7
 	ldrh	r1, [r4]
 	str	r3, [sp, #16]
-	ldr	r3, .L3061+16
+	ldr	r3, .L3064+16
 	strh	r1, [r3, #3644]	@ movhi
 .L2917:
 	add	fp, fp, #1
 	b	.L2914
-.L3045:
+.L3048:
 	ldr	r3, [sp, #8]
 	movs	r2, #36
 	uxth	r10, r5
 	ldr	r3, [r3, #1764]
 	mla	r9, r2, r9, r3
 	ldr	r0, [r9, #4]
-.L3049:
+.L3052:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
 	ldrb	r5, [r4, #8]	@ zero_extendqisi2
-	ldr	r2, .L3061+4
+	ldr	r2, .L3064+4
 	cmp	r5, #1
 	str	r0, [sp, #8]
 	bne	.L2923
@@ -18375,7 +18404,7 @@ FtlRecoverySuperblock:
 	mov	r0, r4
 	mov	r1, r10
 	mov	r2, r3
-	b	.L3054
+	b	.L3057
 .L2925:
 	ldr	r2, [sp, #16]
 	movw	r3, #65535
@@ -18387,11 +18416,11 @@ FtlRecoverySuperblock:
 	ldr	r3, [r6, #1932]
 	uxth	fp, r7
 	mov	r9, #-1
-	ldr	r7, .L3061+8
+	ldr	r7, .L3064+8
 	adds	r3, r3, #1
 	mov	r8, r9
 	ittt	eq
-	ldreq	r3, .L3061+8
+	ldreq	r3, .L3064+8
 	ldreq	r2, [sp, #4]
 	streq	r2, [r3, #1932]
 	ldr	r3, [r6, #1932]
@@ -18406,7 +18435,7 @@ FtlRecoverySuperblock:
 .L2930:
 	cmp	r5, fp
 	bhi	.L2943
-	ldr	r3, .L3061+4
+	ldr	r3, .L3064+4
 	ldr	r1, [sp, #20]
 	ldrh	ip, [r3, #1804]
 	ldr	r3, [r7, #1764]
@@ -18416,7 +18445,7 @@ FtlRecoverySuperblock:
 .L2944:
 	uxth	r2, r3
 	cmp	r2, ip
-	bcs	.L3057
+	bcs	.L3060
 	ldrh	r2, [r1, #2]!
 	movw	r0, #65535
 	cmp	r2, r0
@@ -18431,20 +18460,20 @@ FtlRecoverySuperblock:
 .L2931:
 	adds	r3, r3, #1
 	b	.L2944
-.L3062:
+.L3065:
 	.align	2
-.L3061:
+.L3064:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC144
+	.word	.LC145
 	.word	.LANCHOR5
-.L3057:
+.L3060:
 	mov	r1, r6
 	ldr	r2, [sp, #24]
 	ldr	r0, [r7, #1764]
 	bl	FlashReadPages
-	ldr	r3, .L3063
+	ldr	r3, .L3066
 	movs	r2, #36
 	add	lr, r7, r5, lsl #1
 	movw	r1, #65535
@@ -18453,7 +18482,7 @@ FtlRecoverySuperblock:
 	mla	r6, r2, r6, r3
 .L2933:
 	cmp	r3, r6
-	beq	.L3058
+	beq	.L3061
 	ldr	r2, [r3]
 	cbnz	r2, .L2934
 	ldr	r2, [r3, #12]
@@ -18479,12 +18508,12 @@ FtlRecoverySuperblock:
 	moveq	r9, #-1
 	b	.L2935
 .L2934:
-	ldr	r3, .L3063+4
+	ldr	r3, .L3066+4
 	ldrh	r2, [r4]
 	strh	r2, [r3, #3644]	@ movhi
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cbnz	r3, .L2927
-	ldr	r3, .L3063+8
+	ldr	r3, .L3066+8
 	movw	r2, #65535
 	add	r5, r3, r5, lsl #1
 	ldrh	r1, [r5, #704]
@@ -18498,9 +18527,9 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #16]
 	ldr	r1, [sp, #4]
 	cmp	r2, r1
-	bne	.L3050
+	bne	.L3053
 	ldr	r2, [r3, #1932]
-	b	.L3055
+	b	.L3058
 .L2938:
 	ldr	r2, [sp, #4]
 	cmp	r8, r2
@@ -18514,29 +18543,29 @@ FtlRecoverySuperblock:
 	ldr	r1, [sp, #4]
 	cmp	r2, r1
 	beq	.L2927
-.L3055:
+.L3058:
 	subs	r2, r2, #1
-	b	.L3050
+	b	.L3053
 .L2935:
 	adds	r3, r3, #36
 	b	.L2933
-.L3058:
+.L3061:
 	adds	r5, r5, #1
 	uxth	r5, r5
 	b	.L2930
 .L2943:
-	ldr	r3, .L3063+8
+	ldr	r3, .L3066+8
 	mov	r2, #-1
-.L3050:
+.L3053:
 	str	r2, [r3, #1932]
 .L2927:
-	ldr	r3, .L3063+4
+	ldr	r3, .L3066+4
 	movs	r2, #1
 	ldr	fp, [sp, #12]
-	ldr	r5, .L3063+8
+	ldr	r5, .L3066+8
 	strh	r2, [r3, #3646]	@ movhi
 .L2945:
-	ldr	r3, .L3063
+	ldr	r3, .L3066
 	movw	r9, #65535
 	ldr	r1, [r5, #1764]
 	movs	r6, #0
@@ -18547,7 +18576,7 @@ FtlRecoverySuperblock:
 .L2946:
 	uxth	r3, r6
 	cmp	r3, r8
-	bcs	.L3059
+	bcs	.L3062
 	ldrh	r3, [r7, #2]!
 	cmp	r3, r9
 	beq	.L2947
@@ -18570,18 +18599,18 @@ FtlRecoverySuperblock:
 .L2947:
 	adds	r6, r6, #1
 	b	.L2946
-.L3059:
+.L3062:
 	ldr	r0, [r5, #1764]
 	ldr	r1, [sp, #16]
 	ldr	r2, [sp, #24]
 	bl	FlashReadPages
 	movs	r3, #0
-.L3053:
+.L3056:
 	str	r3, [sp, #28]
 	ldr	r2, [sp, #16]
 	ldrh	r3, [sp, #28]
 	cmp	r3, r2
-	bcs	.L3060
+	bcs	.L3063
 	ldr	r3, [sp, #28]
 	movs	r6, #36
 	ldr	r9, [r5, #1764]
@@ -18614,7 +18643,7 @@ FtlRecoverySuperblock:
 	cmp	r2, r3
 	beq	.L2956
 	ldrh	r0, [r4]
-	b	.L3051
+	b	.L3054
 .L2956:
 	ldr	r3, [r8, #4]
 	adds	r7, r3, #1
@@ -18689,7 +18718,7 @@ FtlRecoverySuperblock:
 	ldr	r1, [sp, #48]
 	cmp	r3, r1
 	beq	.L2961
-	adds	r0, r3, #1
+	adds	r7, r3, #1
 	beq	.L2964
 	str	r3, [ip, #4]
 	mov	r0, ip
@@ -18722,9 +18751,9 @@ FtlRecoverySuperblock:
 	mov	r3, #-1
 	str	r3, [sp, #48]
 	b	.L2968
-.L3064:
+.L3067:
 	.align	2
-.L3063:
+.L3066:
 	.word	.LANCHOR0
 	.word	.LANCHOR5
 	.word	.LANCHOR2
@@ -18733,13 +18762,14 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #52]
 	cmp	r2, r3
 	beq	.L2968
-	ldr	r2, .L3065
 	ldr	r3, [sp, #48]
+	adds	r0, r3, #1
+	beq	.L2970
+	ldr	r2, .L3068
+	ubfx	r3, r3, #10, #21
 	ldr	r2, [r2, #1820]
-	cmp	r2, r3, lsr #10
-	bhi	.L2970
-	adds	r3, r3, #1
-	bne	.L2951
+	cmp	r3, r2
+	bcs	.L2951
 .L2970:
 	mov	r0, r7
 	add	r1, sp, #56
@@ -18763,14 +18793,14 @@ FtlRecoverySuperblock:
 	cmp	r3, r0
 	bne	.L2968
 .L2972:
-	ldr	r3, .L3065+4
+	ldr	r3, .L3068+4
 	movs	r1, #1
 	movs	r2, #0
 	ldr	r0, [r3, #1764]
 	str	r8, [r0, #4]
 	ldr	r6, [r0, #12]
 	bl	FlashReadPages
-	ldr	r3, .L3065+4
+	ldr	r3, .L3068+4
 	ldr	r1, [r6, #4]
 	ldr	r3, [r3, #1764]
 	ldr	r3, [r3]
@@ -18793,31 +18823,31 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r3, r0, lsl #1]
 	mov	r1, r0
 	cbz	r3, .L2973
-.L3051:
+.L3054:
 	bl	decrement_vpc_count
 	b	.L2951
 .L2973:
-	ldr	r0, .L3065+8
+	ldr	r0, .L3068+8
 	bl	printk
 	b	.L2951
 .L2955:
 	ldrh	r3, [r4]
 	mov	r1, r7
-	ldr	r2, .L3065+12
-	ldr	r0, .L3065+16
+	ldr	r2, .L3068+12
+	ldr	r0, .L3068+16
 	strh	r3, [r2, #3644]	@ movhi
 	ldr	r2, [sp, #4]
 	bl	printk
-	ldr	r3, .L3065+12
+	ldr	r3, .L3068+12
 	ldr	r3, [r3, #3648]
 	cmp	r3, #31
 	bhi	.L2974
-	ldr	r2, .L3065+12
+	ldr	r2, .L3068+12
 	ldr	r1, [sp, #56]
 	add	r2, r2, r3, lsl #2
 	adds	r3, r3, #1
 	str	r1, [r2, #3652]
-	ldr	r2, .L3065+12
+	ldr	r2, .L3068+12
 	str	r3, [r2, #3648]
 .L2974:
 	ldrh	r0, [r4]
@@ -18826,24 +18856,24 @@ FtlRecoverySuperblock:
 	adds	r2, r3, #1
 	bne	.L2975
 	ldr	r3, [sp, #4]
-	b	.L3052
+	b	.L3055
 .L2975:
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
 	bls	.L2951
 	mov	r3, r2
-.L3052:
+.L3055:
 	str	r3, [r5, #1932]
 .L2951:
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	b	.L3053
-.L3060:
+	b	.L3056
+.L3063:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	add	fp, fp, #1
 	cmp	r3, #1
 	uxth	fp, fp
-	ldr	r3, .L3065
+	ldr	r3, .L3068
 	bne	.L2977
 	ldrb	r2, [r3, #140]	@ zero_extendqisi2
 	cbz	r2, .L2977
@@ -18856,7 +18886,7 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r3, #1872]
 	cmp	fp, r3
 	bne	.L2945
-	ldr	r2, .L3065
+	ldr	r2, .L3068
 	movw	r0, #65535
 	movs	r3, #0
 	strh	fp, [r4, #2]	@ movhi
@@ -18881,10 +18911,10 @@ FtlRecoverySuperblock:
 	mov	r1, r10
 	strh	r10, [r4, #2]	@ movhi
 	strb	r3, [r4, #6]
-.L3054:
+.L3057:
 	bl	ftl_sb_update_avl_pages
 .L2902:
-	ldr	r3, .L3065+20
+	ldr	r3, .L3068+20
 	movs	r0, #0
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
@@ -18895,14 +18925,14 @@ FtlRecoverySuperblock:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3066:
+.L3069:
 	.align	2
-.L3065:
+.L3068:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC145
-	.word	.LANCHOR5
 	.word	.LC146
+	.word	.LANCHOR5
+	.word	.LC147
 	.word	__stack_chk_guard
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
@@ -18919,13 +18949,13 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	movs	r4, #0
-	ldr	r6, .L3083
-	ldr	r7, .L3083+4
-	ldr	r1, .L3083+8
+	ldr	r6, .L3086
+	ldr	r7, .L3086+4
+	ldr	r1, .L3086+8
 	ldr	r3, [r6]
 	mov	r8, r6
-	ldr	r0, .L3083+12
-	ldr	r5, .L3083+16
+	ldr	r0, .L3086+12
+	ldr	r5, .L3086+16
 	str	r3, [sp, #4]
 	bl	printk
 	ldrh	r2, [r7, #1814]
@@ -18933,92 +18963,92 @@ FtlVpcCheckAndModify:
 	ldr	r0, [r5, #1824]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L3068:
+.L3071:
 	ldr	r3, [r7, #1932]
 	cmp	r4, r3
-	bcs	.L3081
+	bcs	.L3084
 	mov	r0, r4
 	mov	r1, sp
 	movs	r2, #0
 	bl	log2phys
 	ldr	r0, [sp]
 	adds	r3, r0, #1
-	beq	.L3069
+	beq	.L3072
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r5, #1824]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L3069:
+.L3072:
 	adds	r4, r4, #1
-	b	.L3068
-.L3081:
-	ldr	r6, .L3083+16
+	b	.L3071
+.L3084:
+	ldr	r6, .L3086+16
 	mov	r9, #0
 	movw	r10, #65535
-.L3071:
+.L3074:
 	ldrh	r3, [r7, #1812]
 	uxth	r4, r9
 	cmp	r3, r4
-	bls	.L3082
+	bls	.L3085
 	ldr	r3, [r5, #-220]
 	ldrh	r2, [r3, r4, lsl #1]
 	ldr	r3, [r5, #1824]
 	ldrh	r3, [r3, r4, lsl #1]
 	cmp	r2, r3
-	beq	.L3073
+	beq	.L3076
 	cmp	r2, r10
-	beq	.L3073
-	ldr	r0, .L3083+20
+	beq	.L3076
+	ldr	r0, .L3086+20
 	mov	r1, r4
 	bl	printk
 	ldrh	r3, [r6, #-200]
 	cmp	r3, r4
-	beq	.L3073
+	beq	.L3076
 	ldrh	r3, [r6, #-104]
 	cmp	r3, r4
-	beq	.L3073
+	beq	.L3076
 	ldrh	r3, [r6, #-152]
 	cmp	r3, r4
-	beq	.L3073
+	beq	.L3076
 	ldr	r3, [r6, #-220]
 	ldrh	r2, [r3, r4, lsl #1]
-	cbnz	r2, .L3075
+	cbnz	r2, .L3078
 	ldr	r2, [r6, #1824]
 	ldrh	r2, [r2, r4, lsl #1]
 	strh	r2, [r3, r4, lsl #1]	@ movhi
-	b	.L3073
-.L3075:
+	b	.L3076
+.L3078:
 	ldr	r2, [r6, #1824]
 	mov	r0, r4
 	ldrh	r2, [r2, r4, lsl #1]
 	strh	r2, [r3, r4, lsl #1]	@ movhi
 	bl	update_vpc_list
-.L3073:
+.L3076:
 	add	r9, r9, #1
-	b	.L3071
-.L3082:
+	b	.L3074
+.L3085:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	r2, [sp, #4]
 	ldr	r3, [r8]
 	cmp	r2, r3
-	beq	.L3077
+	beq	.L3080
 	bl	__stack_chk_fail
-.L3077:
+.L3080:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3084:
+.L3087:
 	.align	2
-.L3083:
+.L3086:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR3+84
-	.word	.LC107
+	.word	.LC108
 	.word	.LANCHOR2
-	.word	.LC147
+	.word	.LC148
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	1
@@ -19030,7 +19060,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 80
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3133
+	ldr	r3, .L3136
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #84
@@ -19039,39 +19069,39 @@ FtlGcScanTempBlk:
 	mov	r4, r0
 	str	r1, [sp, #16]
 	str	r3, [sp, #76]
-	ldr	r3, .L3133+4
+	ldr	r3, .L3136+4
 	ldrh	r5, [r3, #3288]
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L3119
-	cbnz	r5, .L3086
-	b	.L3087
-.L3119:
+	beq	.L3122
+	cbnz	r5, .L3089
+	b	.L3090
+.L3122:
 	movs	r5, #0
-.L3086:
-	ldr	r3, .L3133+8
+.L3089:
+	ldr	r3, .L3136+8
 	ldr	r2, [sp, #16]
 	ldrh	r3, [r3, #1872]
 	cmp	r2, r3
-	bne	.L3088
-.L3087:
+	bne	.L3091
+.L3090:
 	bl	FtlGcPageVarInit
-.L3088:
-	ldr	r6, .L3133+12
+.L3091:
+	ldr	r6, .L3136+12
 	mov	r3, #-1
 	str	r3, [sp, #12]
 	movs	r3, #0
 	str	r3, [sp, #4]
-.L3089:
+.L3092:
 	ldrh	r2, [r4]
 	movs	r3, #0
 	strb	r3, [r4, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L3090
-.L3091:
-	ldr	r10, .L3133+8
-.L3115:
+	beq	.L3093
+.L3094:
+	ldr	r10, .L3136+8
+.L3118:
 	ldr	r3, [r6, #1764]
 	movs	r2, #0
 	ldrh	r9, [r10, #1804]
@@ -19087,13 +19117,13 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #24]
 	ldrh	r3, [r10, #1884]
 	str	r3, [sp, #28]
-.L3092:
+.L3095:
 	uxth	r3, r2
 	cmp	r3, r9
-	bcs	.L3131
+	bcs	.L3134
 	ldrh	r3, [lr, #2]!
 	cmp	r3, ip
-	beq	.L3093
+	beq	.L3096
 	ldr	r1, [sp, #8]
 	orr	r3, r5, r3, lsl #10
 	ldr	r0, [sp, #20]
@@ -19116,22 +19146,22 @@ FtlGcScanTempBlk:
 	uxth	r7, r7
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L3093:
+.L3096:
 	adds	r2, r2, #1
-	b	.L3092
-.L3131:
+	b	.L3095
+.L3134:
 	ldr	r0, [r6, #1764]
 	mov	r1, r7
 	movs	r2, #0
 	mov	fp, #0
 	bl	FlashReadPages
-.L3097:
+.L3100:
 	uxth	r3, fp
 	cmp	r3, r7
-	bcs	.L3132
+	bcs	.L3135
 	mov	r9, #36
 	ldr	r2, [r6, #1764]
-	ldr	ip, .L3133+12
+	ldr	ip, .L3136+12
 	mul	r9, r9, fp
 	add	r3, r2, r9
 	ldr	r1, [r3, #4]
@@ -19139,32 +19169,32 @@ FtlGcScanTempBlk:
 	ldr	r3, [r3, #12]
 	str	r1, [sp, #8]
 	cmp	r8, #0
-	bne	.L3098
+	bne	.L3101
 	ldrh	r1, [r3]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L3099
-.L3101:
-	ldr	r3, .L3133+12
+	bne	.L3102
+.L3104:
+	ldr	r3, .L3136+12
 	movs	r1, #0
 	ldrh	r2, [r4]
 	ldr	r3, [r3, #-220]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
 	ldrh	r0, [r4]
 	bl	INSERT_FREE_LIST
-	ldr	r2, .L3133+12
+	ldr	r2, .L3136+12
 	movw	r3, #65535
 	strh	r3, [r4]	@ movhi
 	strh	r3, [r2, #40]	@ movhi
-	b	.L3130
-.L3099:
+	b	.L3133
+.L3102:
 	ldr	r0, [r3, #8]
 	ldr	r2, [r10, #1932]
 	cmp	r0, r2
-	bhi	.L3101
+	bhi	.L3104
 	ldrb	r2, [r10]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L3103
+	beq	.L3106
 	add	r1, sp, #36
 	mov	r2, r8
 	str	r3, [sp, #20]
@@ -19173,9 +19203,9 @@ FtlGcScanTempBlk:
 	ldr	r2, [sp, #36]
 	ldr	r1, [r3, #12]
 	cmp	r2, r1
-	bne	.L3103
+	bne	.L3106
 	adds	r1, r2, #1
-	beq	.L3103
+	beq	.L3106
 	str	r2, [sp, #44]
 	movs	r1, #1
 	ldr	r2, [r6, #1796]
@@ -19191,17 +19221,17 @@ FtlGcScanTempBlk:
 	add	r9, r9, r1
 	ldr	r0, [sp, #48]
 	ldr	r3, [sp, #20]
-.L3105:
+.L3108:
 	cmp	r8, lr
-	beq	.L3103
+	beq	.L3106
 	ldr	r1, [r9, #8]
 	ldr	r2, [r0, r8, lsl #2]
 	ldr	r1, [r1, r8, lsl #2]
 	cmp	r1, r2
-	beq	.L3106
+	beq	.L3109
 	ldrh	r1, [r4]
 	ldr	r2, [sp, #44]
-	ldr	r0, .L3133+16
+	ldr	r0, .L3136+16
 	bl	printk
 	ldr	r3, [r6, #-220]
 	ldrh	r2, [r4]
@@ -19212,47 +19242,47 @@ FtlGcScanTempBlk:
 	movw	r3, #65535
 	strh	r3, [r4]	@ movhi
 	strh	r3, [r6, #40]	@ movhi
-	b	.L3130
-.L3106:
+	b	.L3133
+.L3109:
 	add	r8, r8, #1
-	b	.L3105
-.L3103:
+	b	.L3108
+.L3106:
 	ldr	r0, [r3, #12]
 	add	fp, fp, #1
 	ldr	r1, [sp, #8]
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-	b	.L3097
-.L3098:
+	b	.L3100
+.L3101:
 	ldrh	r1, [r4]
 	ldr	r2, [sp, #8]
-	ldr	r0, .L3133+20
+	ldr	r0, .L3136+20
 	str	ip, [sp, #20]
 	bl	printk
-	ldr	r3, .L3133+8
+	ldr	r3, .L3136+8
 	ldrh	r2, [r4]
 	ldr	r1, [r3, #1796]
 	ldr	ip, [sp, #20]
-	cbnz	r1, .L3109
+	cbnz	r1, .L3112
 	ldrb	r1, [r3, #140]	@ zero_extendqisi2
-	cbz	r1, .L3110
-.L3109:
+	cbz	r1, .L3113
+.L3112:
 	ldr	r3, [r3, #4060]
 	ldrh	r3, [r3, r2, lsl #1]
 	cmp	r3, #159
-	bls	.L3111
-.L3110:
+	bls	.L3114
+.L3113:
 	ldr	r3, [ip, #1764]
 	ldr	r3, [r3, r9]
 	adds	r3, r3, #1
-	bne	.L3112
-.L3111:
+	bne	.L3115
+.L3114:
 	ldr	r3, [ip, #1764]
 	add	r9, r9, r3
 	ldr	r3, [r9, #4]
 	str	r3, [sp, #12]
-.L3112:
-	ldr	r3, .L3133+12
+.L3115:
+	ldr	r3, .L3136+12
 	movs	r1, #0
 	ldr	r3, [r3, #-220]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
@@ -19260,11 +19290,11 @@ FtlGcScanTempBlk:
 	bl	INSERT_FREE_LIST
 	movw	r3, #65535
 	strh	r3, [r4]	@ movhi
-.L3130:
+.L3133:
 	bl	FtlGcPageVarInit
 	movs	r5, #0
-	b	.L3089
-.L3132:
+	b	.L3092
+.L3135:
 	ldr	r3, [sp, #4]
 	adds	r5, r5, #1
 	ldr	r2, [sp, #16]
@@ -19272,27 +19302,27 @@ FtlGcScanTempBlk:
 	uxth	r5, r5
 	cmp	r3, r2
 	str	r3, [sp, #4]
-	bcs	.L3114
-.L3116:
+	bcs	.L3117
+.L3119:
 	ldrh	r3, [r10, #1872]
 	cmp	r3, r5
-	bhi	.L3115
-	b	.L3090
-.L3114:
-	ldr	r2, .L3133+4
+	bhi	.L3118
+	b	.L3093
+.L3117:
+	ldr	r2, .L3136+4
 	movw	r1, #65535
 	ldrh	r3, [r2, #3288]
 	cmp	r3, r1
-	beq	.L3116
+	beq	.L3119
 	ldr	r1, [sp, #4]
 	add	r3, r3, r1
 	strh	r3, [r2, #3288]	@ movhi
 	ldrh	r3, [r10, #1872]
 	cmp	r3, r5
-	bls	.L3116
-	b	.L3117
-.L3090:
-	ldr	r3, .L3133+4
+	bls	.L3119
+	b	.L3120
+.L3093:
+	ldr	r3, .L3136+4
 	movw	r2, #65535
 	strh	r5, [r4, #2]	@ movhi
 	mov	r0, r4
@@ -19301,27 +19331,27 @@ FtlGcScanTempBlk:
 	movs	r2, #0
 	strb	r2, [r4, #6]
 	bl	ftl_sb_update_avl_pages
-.L3117:
-	ldr	r3, .L3133
+.L3120:
+	ldr	r3, .L3136
 	ldr	r2, [sp, #76]
 	ldr	r0, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3118
+	beq	.L3121
 	bl	__stack_chk_fail
-.L3118:
+.L3121:
 	add	sp, sp, #84
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3134:
+.L3137:
 	.align	2
-.L3133:
+.L3136:
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC148
 	.word	.LC149
+	.word	.LC150
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	1
@@ -19337,25 +19367,25 @@ FtlReadRefresh:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r7, .L3152
-	ldr	r5, .L3152+4
-	ldr	r8, .L3152+8
+	ldr	r7, .L3155
+	ldr	r5, .L3155+4
+	ldr	r8, .L3155+8
 	ldr	r3, [r7]
 	ldr	fp, [r5, #172]
 	mov	r6, r5
 	str	r3, [sp, #44]
 	cmp	fp, #0
-	beq	.L3136
+	beq	.L3139
 	ldr	r2, [r5, #176]
 	ldr	r3, [r8, #1932]
 	cmp	r2, r3
-	bcs	.L3137
+	bcs	.L3140
 	mov	r4, #2048
-.L3142:
+.L3145:
 	ldr	r0, [r6, #176]
 	ldr	r3, [r8, #1932]
 	cmp	r0, r3
-	bcs	.L3141
+	bcs	.L3144
 	add	r1, sp, #4
 	movs	r2, #0
 	bl	log2phys
@@ -19364,7 +19394,7 @@ FtlReadRefresh:
 	str	r3, [r5, #176]
 	ldr	r2, [sp, #4]
 	adds	r1, r2, #1
-	beq	.L3140
+	beq	.L3143
 	add	r0, sp, #48
 	str	r2, [sp, #12]
 	movs	r1, #1
@@ -19376,26 +19406,26 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #8]
 	cmp	r3, #256
-	bne	.L3141
+	bne	.L3144
 	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3141:
+.L3144:
 	mov	r0, #-1
+	b	.L3147
+.L3143:
+	subs	r4, r4, #1
+	bne	.L3145
 	b	.L3144
 .L3140:
-	subs	r4, r4, #1
-	bne	.L3142
-	b	.L3141
-.L3137:
 	ldr	r3, [r5, #-40]
 	movs	r0, #0
 	str	r0, [r5, #172]
 	str	r0, [r5, #176]
 	str	r3, [r5, #168]
-	b	.L3144
-.L3136:
+	b	.L3147
+.L3139:
 	ldr	r10, [r5, #-40]
 	movw	r4, #10000
 	ldr	r1, [r5, #12]
@@ -19408,7 +19438,7 @@ FtlReadRefresh:
 	ldr	r3, [r8, #1932]
 	cmp	r9, r2
 	add	r8, r8, #4096
-	bhi	.L3146
+	bhi	.L3149
 	mov	r0, #1000
 	lsrs	r1, r1, #10
 	adds	r1, r1, #1
@@ -19416,14 +19446,14 @@ FtlReadRefresh:
 	bl	__aeabi_uidiv
 	add	r0, r0, r9
 	cmp	r0, r10
-	bcc	.L3146
+	bcc	.L3149
 	ldrh	r3, [r8]
 	ands	r0, r4, r3
-	bne	.L3149
+	bne	.L3152
 	ldr	r2, [r5, #192]
 	cmp	r2, r3
-	beq	.L3144
-.L3146:
+	beq	.L3147
+.L3149:
 	ldrh	r3, [r8]
 	movs	r0, #0
 	str	r10, [r6, #168]
@@ -19431,22 +19461,22 @@ FtlReadRefresh:
 	str	r3, [r6, #192]
 	movs	r3, #1
 	str	r3, [r6, #172]
-	b	.L3144
-.L3149:
+	b	.L3147
+.L3152:
 	mov	r0, fp
-.L3144:
+.L3147:
 	ldr	r2, [sp, #44]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L3147
+	beq	.L3150
 	bl	__stack_chk_fail
-.L3147:
+.L3150:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3153:
+.L3156:
 	.align	2
-.L3152:
+.L3155:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
@@ -19465,27 +19495,27 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r6, .L3193
-	ldr	r7, .L3193+4
+	ldr	r6, .L3196
+	ldr	r7, .L3196+4
 	ldr	r2, [r6, #4052]
 	ldr	r3, [r7]
 	ldrh	r1, [r6, #1872]
 	str	r3, [sp, #12]
 	cmp	r2, #0
-	bne	.L3191
-	ldr	r4, .L3193+8
+	bne	.L3194
+	ldr	r4, .L3196+8
 	movw	lr, #65535
 	ldrh	r5, [r4, #-104]
 	cmp	r5, lr
-	bne	.L3157
-.L3166:
+	bne	.L3160
+.L3169:
 	ldrh	r2, [r4, #-104]
 	movw	r3, #65535
 	mov	r8, #0
-	ldr	r5, .L3193+8
+	ldr	r5, .L3196+8
 	cmp	r2, r3
 	str	r8, [r4, #1928]
-	beq	.L3191
+	beq	.L3194
 	bl	FtlCacheWriteBack
 	ldrb	r0, [r5, #-97]	@ zero_extendqisi2
 	ldrh	r3, [r6, #1872]
@@ -19498,39 +19528,39 @@ FtlGcFreeTempBlock:
 	ldrh	r2, [r5, #656]
 	add	r3, r3, r2
 	str	r3, [r5, #-20]
-	b	.L3167
-.L3157:
-	cbz	r0, .L3160
-	ldr	r3, .L3193+12
+	b	.L3170
+.L3160:
+	cbz	r0, .L3163
+	ldr	r3, .L3196+12
 	ldrh	r0, [r3, #3288]
 	cmp	r0, lr
-	beq	.L3161
-.L3162:
+	beq	.L3164
+.L3165:
 	movs	r1, #2
-	b	.L3160
-.L3161:
+	b	.L3163
+.L3164:
 	strh	r2, [r3, #3288]	@ movhi
 	ldrh	r3, [r4, #-204]
 	cmp	r3, #17
-	bhi	.L3162
-.L3160:
-	ldr	r0, .L3193+16
+	bhi	.L3165
+.L3163:
+	ldr	r0, .L3196+16
 	bl	FtlGcScanTempBlk
 	str	r0, [sp, #8]
 	adds	r0, r0, #1
-	beq	.L3163
+	beq	.L3166
 	ldr	r2, [r6, #4060]
 	ldrh	r3, [r2, r5, lsl #1]
 	cmp	r3, #4
-	bls	.L3164
+	bls	.L3167
 	subs	r3, r3, #5
 	movs	r0, #1
 	strh	r3, [r2, r5, lsl #1]	@ movhi
 	bl	FtlEctTblFlush
-.L3164:
+.L3167:
 	ldr	r3, [r4, #1928]
-	ldr	r2, .L3193+8
-	cbnz	r3, .L3165
+	ldr	r2, .L3196+8
+	cbnz	r3, .L3168
 	ldr	r0, [sp, #8]
 	ldr	r3, [r2, #188]
 	ubfx	r0, r0, #10, #16
@@ -19538,35 +19568,35 @@ FtlGcFreeTempBlock:
 	str	r3, [r2, #188]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L3165:
+.L3168:
 	movs	r3, #0
 	str	r3, [r4, #1928]
-	b	.L3178
-.L3163:
-	ldr	r3, .L3193+12
+	b	.L3181
+.L3166:
+	ldr	r3, .L3196+12
 	ldrh	r2, [r3, #3288]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3178
-	b	.L3166
-.L3170:
+	bne	.L3181
+	b	.L3169
+.L3173:
 	ldr	r3, [fp, #4]
 	cmp	r0, r3
-	bne	.L3189
-.L3169:
+	bne	.L3192
+.L3172:
 	add	r8, r8, #1
-.L3167:
+.L3170:
 	ldrh	r3, [r4, #656]
 	uxth	r9, r8
 	cmp	r3, r9
-	bls	.L3192
+	bls	.L3195
 	mul	r9, r10, r9
 	ldr	r3, [r5, #652]
 	ldr	r2, [r6, #1932]
 	add	fp, r3, r9
 	ldr	r0, [fp, #8]
 	cmp	r0, r2
-	bcs	.L3189
+	bcs	.L3192
 	add	r1, sp, #8
 	movs	r2, #0
 	str	r3, [sp, #4]
@@ -19575,7 +19605,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [sp, #8]
 	ldr	r3, [r3, r9]
 	cmp	r0, r3
-	bne	.L3170
+	bne	.L3173
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	add	r1, fp, #4
@@ -19584,31 +19614,31 @@ FtlGcFreeTempBlock:
 	ldr	r0, [fp, #8]
 	bl	log2phys
 	mov	r0, r9
-	b	.L3190
-.L3189:
+	b	.L3193
+.L3192:
 	ldrh	r0, [r5, #-104]
-.L3190:
+.L3193:
 	bl	decrement_vpc_count
-	b	.L3169
-.L3192:
+	b	.L3172
+.L3195:
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
-	cbz	r3, .L3172
-	ldr	r3, .L3193+8
-	ldr	r0, .L3193+20
+	cbz	r3, .L3175
+	ldr	r3, .L3196+8
+	ldr	r0, .L3196+20
 	ldrh	r1, [r3, #-104]
 	bl	printk
-.L3172:
+.L3175:
 	ldrh	r0, [r4, #-104]
 	ldr	r3, [r4, #-220]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L3173
+	cbz	r3, .L3176
 	bl	INSERT_DATA_LIST
-	b	.L3174
-.L3173:
+	b	.L3177
+.L3176:
 	bl	INSERT_FREE_LIST
-.L3174:
+.L3177:
 	movw	r9, #65535
 	movs	r5, #0
 	strh	r9, [r4, #-104]	@ movhi
@@ -19617,58 +19647,58 @@ FtlGcFreeTempBlock:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	r3, [r6, #1796]
-	ldr	r8, .L3193+8
+	ldr	r8, .L3196+8
 	strh	r9, [r4, #40]	@ movhi
-	cbz	r3, .L3175
+	cbz	r3, .L3178
 	ldr	r3, [r8, #16]
 	cmp	r3, #39
-	bhi	.L3175
+	bhi	.L3178
 	ldrh	r3, [r8, #20]
 	ldrh	r2, [r8, #-204]
 	cmp	r2, r3
-	bcs	.L3191
+	bcs	.L3194
 	lsls	r3, r3, #1
 	strh	r3, [r8, #604]	@ movhi
-	b	.L3191
-.L3175:
+	b	.L3194
+.L3178:
 	ldrh	r3, [r4, #20]
 	ldrh	r1, [r4, #-204]
-	ldr	r2, .L3193+8
+	ldr	r2, .L3196+8
 	add	r0, r3, r3, lsl #1
 	cmp	r1, r0, asr #2
-	ble	.L3191
+	ble	.L3194
 	ldrb	r0, [r6, #140]	@ zero_extendqisi2
-	cbz	r0, .L3176
+	cbz	r0, .L3179
 	subs	r3, r3, #2
 	strh	r3, [r2, #604]	@ movhi
-.L3191:
+.L3194:
 	movs	r0, #0
-	b	.L3156
-.L3176:
+	b	.L3159
+.L3179:
 	movs	r3, #20
 	strh	r3, [r2, #604]	@ movhi
-	b	.L3156
-.L3178:
+	b	.L3159
+.L3181:
 	movs	r0, #1
-.L3156:
+.L3159:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L3177
+	beq	.L3180
 	bl	__stack_chk_fail
-.L3177:
+.L3180:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3194:
+.L3197:
 	.align	2
-.L3193:
+.L3196:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR1
 	.word	.LANCHOR2-104
-	.word	.LC150
+	.word	.LC151
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	1
@@ -19682,26 +19712,26 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r5, .L3197
-	ldr	r4, .L3197+4
+	ldr	r5, .L3200
+	ldr	r4, .L3200+4
 	ldrh	r1, [r5, #1872]
 	sub	r0, r4, #104
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #-102]
 	ldrh	r3, [r5, #1872]
 	cmp	r2, r3
-	bcc	.L3195
+	bcc	.L3198
 	addw	r0, r4, #1868
 	bl	FtlMapBlkWriteDumpData
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
 	str	r3, [r4, #1928]
-.L3195:
-	pop	{r3, r4, r5, pc}
 .L3198:
+	pop	{r3, r4, r5, pc}
+.L3201:
 	.align	2
-.L3197:
+.L3200:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -19718,8 +19748,8 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L3200
-	ldr	r3, .L3200+4
+	ldr	r4, .L3203
+	ldr	r3, .L3203+4
 	sub	r6, r4, #200
 	subs	r4, r4, #152
 	mov	r0, r6
@@ -19736,9 +19766,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L3201:
+.L3204:
 	.align	2
-.L3200:
+.L3203:
 	.word	.LANCHOR2
 	.word	.LANCHOR5
 	.fnend
@@ -19755,10 +19785,10 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r3, #0
-	ldr	r5, .L3219
+	ldr	r5, .L3222
 	movw	r6, #65535
-	ldr	r7, .L3219+4
-	ldr	r4, .L3219+8
+	ldr	r7, .L3222+4
+	ldr	r4, .L3222+8
 	ldrh	r0, [r5, #1808]
 	strh	r3, [r7, #3646]	@ movhi
 	strh	r6, [r7, #3644]	@ movhi
@@ -19766,15 +19796,15 @@ FtlSysBlkInit:
 	bl	FtlScanSysBlk
 	ldrh	r3, [r4, #24]
 	cmp	r3, r6
-	bne	.L3203
-.L3205:
+	bne	.L3206
+.L3208:
 	mov	r8, #-1
-	b	.L3204
-.L3203:
+	b	.L3207
+.L3206:
 	bl	FtlLoadSysInfo
 	mov	r8, r0
 	cmp	r0, #0
-	bne	.L3205
+	bne	.L3208
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -19788,28 +19818,28 @@ FtlSysBlkInit:
 	ldr	r2, [r4, #-56]
 	movs	r0, #12
 	mov	r3, r8
-.L3206:
+.L3209:
 	cmp	r3, r1
-	bge	.L3211
+	bge	.L3214
 	mla	r6, r0, r3, r2
 	ldr	r6, [r6, #4]
 	cmp	r6, #0
-	bge	.L3207
-.L3211:
-	ldr	r6, .L3219+12
+	bge	.L3210
+.L3214:
+	ldr	r6, .L3222+12
 	cmp	r3, r1
 	ldrh	r2, [r6]
 	add	r2, r2, #1
 	strh	r2, [r6]	@ movhi
-	bge	.L3218
-	b	.L3208
-.L3207:
+	bge	.L3221
+	b	.L3211
+.L3210:
 	adds	r3, r3, #1
-	b	.L3206
-.L3218:
+	b	.L3209
+.L3221:
 	ldrh	r3, [r7, #3646]
-	cbz	r3, .L3212
-.L3208:
+	cbz	r3, .L3215
+.L3211:
 	ldrh	r1, [r4, #-200]
 	ldr	r2, [r4, #-220]
 	ldrh	r0, [r4, #-196]
@@ -19838,16 +19868,16 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L3212:
+.L3215:
 	ldrh	r0, [r4, #-200]
 	movw	r3, #65535
-	ldr	r7, .L3219+8
+	ldr	r7, .L3222+8
 	cmp	r0, r3
-	beq	.L3213
+	beq	.L3216
 	ldrh	r3, [r7, #-196]
-	cbnz	r3, .L3213
+	cbnz	r3, .L3216
 	ldrh	r3, [r7, #-148]
-	cbnz	r3, .L3213
+	cbnz	r3, .L3216
 	bl	FtlGcRefreshOpenBlock
 	ldrh	r0, [r7, #-152]
 	bl	FtlGcRefreshOpenBlock
@@ -19856,20 +19886,20 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	sub	r0, r7, #152
 	bl	allocate_new_data_superblock
-.L3213:
+.L3216:
 	ldrb	r3, [r5]	@ zero_extendqisi2
-	cbnz	r3, .L3214
+	cbnz	r3, .L3217
 	ldrh	r3, [r6]
 	lsls	r3, r3, #27
-	bne	.L3204
-.L3214:
+	bne	.L3207
+.L3217:
 	bl	FtlVpcCheckAndModify
-.L3204:
+.L3207:
 	mov	r0, r8
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3220:
+.L3223:
 	.align	2
-.L3219:
+.L3222:
 	.word	.LANCHOR0
 	.word	.LANCHOR5
 	.word	.LANCHOR2
@@ -19887,11 +19917,11 @@ FtlLowFormat:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	ldr	r5, .L3255
+	ldr	r5, .L3258
 	ldr	r6, [r5, #4052]
 	cmp	r6, #0
-	bne	.L3223
-	ldr	r4, .L3255+4
+	bne	.L3226
+	ldr	r4, .L3258+4
 	mov	r1, r6
 	ldrh	r2, [r5, #1908]
 	ldr	r0, [r4, #1852]
@@ -19907,33 +19937,33 @@ FtlLowFormat:
 	str	r6, [r4, #-4]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L3224
+	cbz	r0, .L3227
 	bl	FtlMakeBbt
-.L3224:
-	ldr	r0, .L3255+8
+.L3227:
+	ldr	r0, .L3258+8
 	movs	r2, #0
-.L3225:
+.L3228:
 	ldrh	r1, [r5, #1878]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	bge	.L3252
+	bge	.L3255
 	ldr	r6, [r4, #1792]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r6, r3, lsl #2]
 	ldr	r1, [r4, #1796]
 	str	r0, [r1, r3, lsl #2]
-	b	.L3225
-.L3252:
-	ldr	r3, .L3255
+	b	.L3228
+.L3255:
+	ldr	r3, .L3258
 	movs	r6, #0
 	ldrh	r7, [r3, #1812]
-.L3227:
+.L3230:
 	ldrh	r3, [r5, #1814]
-	ldr	r8, .L3255
+	ldr	r8, .L3258
 	cmp	r3, r7
-	bls	.L3253
+	bls	.L3256
 	mov	r0, r7
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -19941,17 +19971,17 @@ FtlLowFormat:
 	uxth	r7, r7
 	add	r0, r0, r6
 	uxth	r6, r0
-	b	.L3227
-.L3253:
+	b	.L3230
+.L3256:
 	ldrh	r1, [r8, #1804]
 	subs	r3, r6, #3
 	cmp	r3, r1, lsl #1
-	bge	.L3229
-.L3233:
+	bge	.L3232
+.L3236:
 	movs	r6, #0
 	mov	r7, r6
-	b	.L3230
-.L3229:
+	b	.L3233
+.L3232:
 	mov	r0, r6
 	bl	__aeabi_uidiv
 	ldr	r3, [r8, #1904]
@@ -19961,29 +19991,29 @@ FtlLowFormat:
 	ldrh	r0, [r8, #1808]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r6, [r8, #1812]
-.L3231:
+.L3234:
 	ldrh	r3, [r5, #1814]
 	cmp	r3, r6
-	bls	.L3233
+	bls	.L3236
 	mov	r0, r6
 	adds	r6, r6, #1
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r6, r6
-	b	.L3231
-.L3230:
+	b	.L3234
+.L3233:
 	ldrh	r3, [r5, #1812]
 	uxth	r0, r6
-	ldr	r10, .L3255
+	ldr	r10, .L3258
 	adds	r6, r6, #1
 	cmp	r3, r0
-	bls	.L3254
+	bls	.L3257
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r0, r0, r7
 	uxth	r7, r0
-	b	.L3230
-.L3254:
+	b	.L3233
+.L3257:
 	ldrh	r3, [r10, #1814]
 	ldrh	r6, [r10, #1804]
 	ldr	fp, [r10, #1816]
@@ -19999,19 +20029,19 @@ FtlLowFormat:
 	str	r0, [r10, #1932]
 	muls	r3, r6, r3
 	cmp	r7, r3
-	ble	.L3235
+	ble	.L3238
 	rsb	r0, r7, fp
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldr	r3, .L3255+4
+	ldr	r3, .L3258+4
 	str	r0, [r10, #1932]
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r3, #20]	@ movhi
-.L3235:
+.L3238:
 	ldr	r3, [r5, #1796]
 	cmp	r3, #1
-	bne	.L3236
+	bne	.L3239
 	mov	r0, r7
 	mov	r1, r6
 	bl	__aeabi_uidiv
@@ -20019,9 +20049,9 @@ FtlLowFormat:
 	uxtah	r0, r10, r0
 	add	r10, r10, r0, asr #2
 	strh	r10, [r4, #20]	@ movhi
-.L3236:
+.L3239:
 	ldrb	r3, [r5, #140]	@ zero_extendqisi2
-	cbz	r3, .L3237
+	cbz	r3, .L3240
 	mov	r0, r7
 	mov	r1, r6
 	bl	__aeabi_uidiv
@@ -20029,9 +20059,9 @@ FtlLowFormat:
 	uxtah	r0, r10, r0
 	add	r10, r10, r0, asr #2
 	strh	r10, [r4, #20]	@ movhi
-.L3237:
+.L3240:
 	ldrh	r3, [r5, #1866]
-	cbz	r3, .L3239
+	cbz	r3, .L3242
 	ldrh	r2, [r4, #20]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #20]	@ movhi
@@ -20039,16 +20069,16 @@ FtlLowFormat:
 	cmp	r2, r7
 	itttt	gt
 	addgt	r3, r3, #32
-	ldrgt	r2, .L3255
+	ldrgt	r2, .L3258
 	addgt	r3, r3, r8
 	strgt	r9, [r2, #1932]
 	itt	gt
-	ldrgt	r2, .L3255+4
+	ldrgt	r2, .L3258+4
 	strhgt	r3, [r2, #20]	@ movhi
-.L3239:
+.L3242:
 	ldrh	r2, [r4, #20]
 	ldr	r3, [r5, #1932]
-	ldr	r7, .L3255+4
+	ldr	r7, .L3258+4
 	subs	r3, r3, r2
 	muls	r6, r3, r6
 	ldrh	r3, [r5, #1872]
@@ -20081,20 +20111,20 @@ FtlLowFormat:
 	movs	r3, #1
 	strb	r3, [r4, #-192]
 	bl	ftl_memset
-.L3241:
-	ldr	r5, .L3255+4
+.L3244:
+	ldr	r5, .L3258+4
 	sub	r0, r5, #200
 	bl	make_superblock
 	ldrb	r3, [r4, #-193]	@ zero_extendqisi2
 	ldrh	r2, [r4, #-200]
-	cbnz	r3, .L3242
+	cbnz	r3, .L3245
 	ldr	r3, [r7, #-220]
 	strh	r6, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r7, #-200]
 	adds	r3, r3, #1
 	strh	r3, [r7, #-200]	@ movhi
-	b	.L3241
-.L3242:
+	b	.L3244
+.L3245:
 	ldr	r3, [r5, #-8]
 	movw	r7, #65535
 	ldrh	r1, [r5, #-196]
@@ -20111,20 +20141,20 @@ FtlLowFormat:
 	strh	r3, [r5, #-152]	@ movhi
 	movs	r3, #1
 	strb	r3, [r5, #-144]
-.L3243:
-	ldr	r6, .L3255+4
+.L3246:
+	ldr	r6, .L3258+4
 	sub	r0, r6, #152
 	bl	make_superblock
 	ldrb	r3, [r4, #-145]	@ zero_extendqisi2
 	ldrh	r2, [r4, #-152]
-	cbnz	r3, .L3244
+	cbnz	r3, .L3247
 	ldr	r3, [r5, #-220]
 	strh	r7, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r5, #-152]
 	adds	r3, r3, #1
 	strh	r3, [r5, #-152]	@ movhi
-	b	.L3243
-.L3244:
+	b	.L3246
+.L3247:
 	ldr	r3, [r6, #-8]
 	movw	r4, #65535
 	ldrh	r1, [r6, #-148]
@@ -20147,16 +20177,16 @@ FtlLowFormat:
 	strh	r0, [r6, #24]	@ movhi
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L3223
-	ldr	r3, .L3255+12
+	cbnz	r0, .L3226
+	ldr	r3, .L3258+12
 	movs	r2, #1
 	str	r2, [r3, #504]
-.L3223:
+.L3226:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3256:
+.L3259:
 	.align	2
-.L3255:
+.L3258:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	168778952
@@ -20176,29 +20206,29 @@ FtlReInitForSDUpdata:
 	.save {r4, r5, r6, r7, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r5, .L3286
-	ldr	r0, .L3286+4
+	ldr	r5, .L3289
+	ldr	r0, .L3289+4
 	ldr	r3, [r5]
 	mov	r4, r0
 	str	r3, [sp, #20]
 	ldrb	r3, [r0, #140]	@ zero_extendqisi2
-	cbz	r3, .L3258
-.L3260:
+	cbz	r3, .L3261
+.L3263:
 	movs	r0, #0
-	b	.L3259
-.L3258:
-	ldr	r6, .L3286+8
+	b	.L3262
+.L3261:
+	ldr	r6, .L3289+8
 	ldr	r0, [r6, #3984]
 	bl	FlashInit
 	cmp	r0, #0
-	bne	.L3260
+	bne	.L3263
 	bl	FlashLoadFactorBbt
-	cbz	r0, .L3261
+	cbz	r0, .L3264
 	bl	FlashMakeFactorBbt
-.L3261:
+.L3264:
 	ldr	r0, [r6, #4016]
 	bl	FlashReadIdbDataRaw
-	cbz	r0, .L3262
+	cbz	r0, .L3265
 	movs	r2, #16
 	add	r0, sp, #4
 	movs	r1, #0
@@ -20207,7 +20237,7 @@ FtlReInitForSDUpdata:
 	movs	r3, #0
 	mov	r0, r3
 	ldr	r2, [sp, #4]
-.L3263:
+.L3266:
 	lsl	r6, r7, r0
 	adds	r1, r3, #1
 	tst	r6, r2
@@ -20215,12 +20245,12 @@ FtlReInitForSDUpdata:
 	it	ne
 	movne	r3, r1
 	cmp	r0, #16
-	bne	.L3263
+	bne	.L3266
 	cmp	r3, #6
-	bls	.L3282
+	bls	.L3285
 	movs	r0, #0
 	movs	r7, #1
-.L3266:
+.L3269:
 	lsl	r6, r7, r0
 	adds	r1, r3, #1
 	tst	r6, r2
@@ -20228,60 +20258,60 @@ FtlReInitForSDUpdata:
 	it	ne
 	movne	r3, r1
 	cmp	r0, #24
-	bne	.L3266
+	bne	.L3269
 	cmp	r3, #17
-	bhi	.L3267
-.L3282:
+	bhi	.L3270
+.L3285:
 	strb	r0, [r4, #1]
-	b	.L3265
-.L3267:
+	b	.L3268
+.L3270:
 	movs	r3, #36
 	strb	r3, [r4, #1]
-.L3265:
+.L3268:
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	strh	r3, [r4, #138]	@ movhi
-.L3262:
-	ldr	r1, .L3286+12
-	ldr	r0, .L3286+16
+.L3265:
+	ldr	r1, .L3289+12
+	ldr	r0, .L3289+16
 	bl	printk
-	ldr	r0, .L3286+20
+	ldr	r0, .L3289+20
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
 	ldrh	r0, [r4, #1808]
 	bl	FtlFreeSysBlkQueueInit
 	movs	r4, #1
-.L3268:
+.L3271:
 	bl	FtlLoadBbt
-	cbz	r0, .L3269
-.L3284:
+	cbz	r0, .L3272
+.L3287:
 	bl	FtlLowFormat
 	cmp	r4, #3
-	bhi	.L3285
+	bhi	.L3288
 	adds	r4, r4, #1
-	b	.L3268
-.L3285:
+	b	.L3271
+.L3288:
 	mov	r0, #-1
-	b	.L3259
-.L3269:
+	b	.L3262
+.L3272:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L3284
-	ldr	r3, .L3286+24
+	bne	.L3287
+	ldr	r3, .L3289+24
 	movs	r2, #1
 	str	r2, [r3, #504]
-.L3259:
+.L3262:
 	ldr	r2, [sp, #20]
 	ldr	r3, [r5]
 	cmp	r2, r3
-	beq	.L3273
+	beq	.L3276
 	bl	__stack_chk_fail
-.L3273:
+.L3276:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L3287:
+.L3290:
 	.align	2
-.L3286:
+.L3289:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -20300,39 +20330,39 @@ Ftl_gc_temp_data_write_back:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3304
+	ldr	r3, .L3307
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	ldr	r2, [r3, #4052]
-	cbz	r2, .L3289
-.L3292:
+	cbz	r2, .L3292
+.L3295:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3289:
+.L3292:
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
-	ldr	r5, .L3304+4
-	cbz	r3, .L3291
+	ldr	r5, .L3307+4
+	cbz	r3, .L3294
 	ldr	r3, [r5, #620]
 	lsls	r3, r3, #31
-	bpl	.L3291
+	bpl	.L3294
 	ldrh	r3, [r5, #-100]
 	cmp	r3, #0
-	bne	.L3292
-.L3291:
+	bne	.L3295
+.L3294:
 	movs	r2, #0
 	ldr	r0, [r5, #1768]
 	ldr	r1, [r5, #620]
 	movs	r6, #0
 	mov	r3, r2
-	ldr	r7, .L3304+4
+	ldr	r7, .L3307+4
 	bl	FlashProgPages
 	mov	r8, #36
-.L3293:
+.L3296:
 	ldr	r1, [r5, #620]
 	uxth	r3, r6
-	ldr	r4, .L3304+4
+	ldr	r4, .L3307+4
 	cmp	r3, r1
-	bcs	.L3303
+	bcs	.L3306
 	mul	r3, r8, r3
 	ldr	r0, [r7, #1768]
 	adds	r6, r6, #1
@@ -20340,7 +20370,7 @@ Ftl_gc_temp_data_write_back:
 	ldr	r0, [r0, r3]
 	ldr	r2, [r1, #12]
 	cmp	r0, #-1
-	bne	.L3294
+	bne	.L3297
 	ldrh	r1, [r4, #-104]
 	movs	r5, #0
 	ldr	r2, [r4, #-220]
@@ -20356,29 +20386,29 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L3302
-.L3294:
+	b	.L3305
+.L3297:
 	ldr	r0, [r2, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r2, #8]
 	bl	FtlGcUpdatePage
-	b	.L3293
-.L3303:
+	b	.L3296
+.L3306:
 	ldr	r0, [r4, #1768]
 	bl	FtlGcBufFree
 	movs	r3, #0
 	str	r3, [r4, #620]
 	ldrh	r3, [r4, #-100]
 	cmp	r3, #0
-	bne	.L3292
+	bne	.L3295
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
-.L3302:
+.L3305:
 	movs	r0, #1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3305:
+.L3308:
 	.align	2
-.L3304:
+.L3307:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -20395,18 +20425,18 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L3309
+	ldr	r4, .L3312
 	ldrh	r2, [r4, #-104]
 	cmp	r2, r3
-	beq	.L3307
+	beq	.L3310
 	ldrh	r3, [r4, #-100]
-	cbnz	r3, .L3308
-.L3307:
+	cbnz	r3, .L3311
+.L3310:
 	bl	FtlCacheWriteBack
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L3309+4
+	ldr	r0, .L3312+4
 	strb	r5, [r4, #-96]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #648]	@ movhi
@@ -20415,13 +20445,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3308:
-	ldr	r0, .L3309+4
+.L3311:
+	ldr	r0, .L3312+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L3310:
+.L3313:
 	.align	2
-.L3309:
+.L3312:
 	.word	.LANCHOR2
 	.word	.LANCHOR2-104
 	.fnend
@@ -20438,56 +20468,56 @@ ftl_do_gc:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r3, .L3486
+	ldr	r3, .L3489
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r6, .L3486+4
+	ldr	r6, .L3489+4
 	mov	r9, r1
 	ldr	r3, [r3]
 	ldr	r0, [r6, #4052]
 	str	r3, [sp, #44]
 	cmp	r0, #0
-	bne	.L3412
-	ldr	r2, .L3486+8
+	bne	.L3415
+	ldr	r2, .L3489+8
 	ldr	r3, [r2, #504]
 	adds	r3, r3, #1
-	beq	.L3312
-	ldr	r3, .L3486+12
+	beq	.L3315
+	ldr	r3, .L3489+12
 	ldr	r4, [r3, #1740]
 	mov	r7, r3
 	cmp	r4, #0
-	bne	.L3312
+	bne	.L3315
 	ldrh	r1, [r3, #-212]
 	cmp	r1, #47
-	bls	.L3415
+	bls	.L3418
 	ldrh	r1, [r2, #3288]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L3313
-.L3316:
+	bne	.L3316
+.L3319:
 	ldrh	r4, [r7, #660]
 	movw	r1, #65535
-	ldr	r3, .L3486+12
+	ldr	r3, .L3489+12
 	cmp	r4, r1
-	bne	.L3314
-	b	.L3315
-.L3313:
+	bne	.L3317
+	b	.L3318
+.L3316:
 	ldrh	r3, [r3, #-104]
 	cmp	r3, r2
-	beq	.L3316
+	beq	.L3319
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L3316
+	beq	.L3319
 	movs	r0, #1
-	b	.L3312
-.L3314:
+	b	.L3315
+.L3317:
 	ldrh	r2, [r3, #658]
 	cmp	r2, r1
-	bne	.L3315
+	bne	.L3318
 	ldrh	r0, [r3, #662]
 	cmp	r0, r2
-	beq	.L3315
+	beq	.L3318
 	ldrh	r1, [r3, #664]
 	cmp	r1, r2
 	itttt	ne
@@ -20495,25 +20525,25 @@ ftl_do_gc:
 	strhne	r0, [r3, #660]	@ movhi
 	strhne	r1, [r3, #662]	@ movhi
 	strhne	r2, [r3, #664]	@ movhi
-.L3315:
+.L3318:
 	ldr	r4, [r7, #608]
 	cmp	r8, #1
 	add	r4, r4, #1
 	add	r4, r4, r8, lsl #7
 	str	r4, [r7, #608]
-	bne	.L3327
+	bne	.L3330
 	ldr	r3, [r6, #1796]
-	cbnz	r3, .L3318
-	ldr	r3, .L3486+4
+	cbnz	r3, .L3321
+	ldr	r3, .L3489+4
 	ldrb	r3, [r3, #140]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L3327
-.L3318:
+	beq	.L3330
+.L3321:
 	ldr	r3, [r7, #16]
-	ldr	r5, .L3486+12
+	ldr	r5, .L3489+12
 	cmp	r3, #39
-	bhi	.L3327
-	ldr	r10, .L3486+16
+	bhi	.L3330
+	ldr	r10, .L3489+16
 	ldrh	r3, [r10, #3780]
 	add	r4, r4, r3
 	str	r4, [r5, #608]
@@ -20521,48 +20551,48 @@ ftl_do_gc:
 	ldrh	r3, [r5, #40]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L3327
+	bne	.L3330
 	ldrh	r2, [r5, #658]
 	cmp	r2, r3
-	bne	.L3327
+	bne	.L3330
 	ldr	r3, [r5, #608]
 	cmp	r3, #1024
-	bhi	.L3319
+	bhi	.L3322
 	ldrh	r3, [r5, #-204]
 	cmp	r3, #63
-	bhi	.L3327
-.L3319:
+	bhi	.L3330
+.L3322:
 	ldrh	r3, [r7, #606]
 	movs	r0, #0
 	ldrh	r4, [r7, #-204]
 	adds	r3, r3, #64
-	ldr	r2, .L3486+16
+	ldr	r2, .L3489+16
 	cmp	r4, r3
 	strh	r0, [r10, #3780]	@ movhi
-	ldr	r1, .L3486+12
-	bgt	.L3327
+	ldr	r1, .L3489+12
+	bgt	.L3330
 	ldr	r3, [r1, #16]
 	str	r0, [r1, #608]
-	cbnz	r3, .L3320
+	cbnz	r3, .L3323
 	movs	r3, #6
-	b	.L3473
-.L3320:
+	b	.L3476
+.L3323:
 	cmp	r3, #5
-	bhi	.L3321
+	bhi	.L3324
 	movs	r3, #18
-.L3473:
+.L3476:
 	strh	r3, [r2, #3780]	@ movhi
-.L3321:
+.L3324:
 	movs	r0, #32
 	bl	List_get_gc_head_node
 	movw	r1, #65535
 	uxth	ip, r0
 	cmp	ip, r1
-	beq	.L3326
+	beq	.L3329
 	ldrh	r0, [r7, #612]
-	ldr	r5, .L3486+12
+	ldr	r5, .L3489+12
 	cmp	r0, #0
-	beq	.L3323
+	beq	.L3326
 	ldrh	lr, [r6, #1874]
 	ldrh	r3, [r6, #1804]
 	ldr	r2, [r5, #-220]
@@ -20570,7 +20600,7 @@ ftl_do_gc:
 	ldrh	r4, [r2, ip, lsl #1]
 	adds	r3, r3, #1
 	cmp	r4, r3
-	bgt	.L3326
+	bgt	.L3329
 	adds	r3, r0, #1
 	str	r1, [sp, #24]
 	str	ip, [sp, #20]
@@ -20587,50 +20617,50 @@ ftl_do_gc:
 	cmp	r4, r1
 	ldr	r2, [sp, #16]
 	ldr	ip, [sp, #20]
-	beq	.L3326
+	beq	.L3329
 	ldrh	lr, [r2, r4, lsl #1]
 	mov	r1, r3
 	ldrh	r2, [r2, ip, lsl #1]
-	ldr	r0, .L3486+20
+	ldr	r0, .L3489+20
 	mov	r3, lr
 	str	r2, [sp]
 	mov	r2, r4
 	bl	printk
 	ldrh	r3, [r5, #612]
 	cmp	r3, #40
-	bls	.L3324
+	bls	.L3327
 	ldr	r3, [r5, #-220]
 	ldrh	r3, [r3, r4, lsl #1]
 	cmp	r3, #32
 	it	hi
 	strhhi	fp, [r5, #612]	@ movhi
-.L3324:
+.L3327:
 	movs	r3, #6
 	strh	r3, [r10, #3780]	@ movhi
-	b	.L3343
-.L3323:
+	b	.L3346
+.L3326:
 	movs	r3, #1
 	strh	r3, [r5, #612]	@ movhi
-.L3326:
+.L3329:
 	bl	GetSwlReplaceBlock
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r4, r0
-	bne	.L3343
+	bne	.L3346
 	movs	r3, #0
 	strh	r3, [r10, #3780]	@ movhi
-.L3327:
+.L3330:
 	ldrh	r3, [r7, #40]
 	movw	r4, #65535
-	ldr	r5, .L3486+12
+	ldr	r5, .L3489+12
 	cmp	r3, r4
-	bne	.L3478
+	bne	.L3481
 	ldrh	r4, [r5, #-104]
 	cmp	r4, r3
-	bne	.L3328
+	bne	.L3331
 	ldrh	fp, [r5, #658]
 	cmp	fp, r4
-	bne	.L3329
+	bne	.L3332
 	ldrh	r3, [r5, #-204]
 	ldr	r2, [r5, #608]
 	cmp	r3, #24
@@ -20638,72 +20668,72 @@ ftl_do_gc:
 	movcc	r3, #5120
 	movcs	r3, #1024
 	cmp	r2, r3
-	bls	.L3331
-	ldr	r2, .L3486+16
+	bls	.L3334
+	ldr	r2, .L3489+16
 	movs	r3, #0
 	str	r3, [r7, #608]
 	strh	r3, [r2, #3780]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, fp
 	mov	r4, r0
-	bne	.L3332
+	bne	.L3335
 	ldrh	r2, [r5, #-204]
 	ldrh	r3, [r5, #606]
 	cmp	r2, r3
-	bcs	.L3333
+	bcs	.L3336
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r4
-	bne	.L3479
-.L3342:
+	bne	.L3482
+.L3345:
 	bl	FtlGcReFreshBadBlk
 	cmp	r8, #0
-	beq	.L3480
-.L3343:
+	beq	.L3483
+.L3346:
 	ldrh	r2, [r7, #-104]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3354
-.L3409:
+	bne	.L3357
+.L3412:
 	ldrh	r3, [r7, #658]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L3354
+	bne	.L3357
 	cmp	r4, r3
-	bne	.L3354
-.L3410:
+	bne	.L3357
+.L3413:
 	ldrh	r1, [r7, #40]
 	movw	r3, #65535
-	ldr	r2, .L3486+12
+	ldr	r2, .L3489+12
 	cmp	r1, r3
-	beq	.L3355
-.L3359:
+	beq	.L3358
+.L3362:
 	movw	r4, #65535
-	b	.L3354
-.L3355:
+	b	.L3357
+.L3358:
 	movs	r3, #0
 	ldrh	r1, [r2, #-204]
 	str	r3, [r2, #616]
 	ldrh	r3, [r2, #604]
-	ldr	r4, .L3486+16
+	ldr	r4, .L3489+16
 	cmp	r1, r3
-	bls	.L3356
+	bls	.L3359
 	ldrh	r3, [r4, #3780]
-	cbnz	r3, .L3357
+	cbnz	r3, .L3360
 	ldr	r3, [r6, #1932]
 	ldr	r2, [r2, #-48]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L3423
-.L3357:
+	bcs	.L3426
+.L3360:
 	ldrh	r3, [r7, #20]
 	add	r3, r3, r3, lsl #1
 	ubfx	r3, r3, #2, #16
-	b	.L3358
-.L3423:
+	b	.L3361
+.L3426:
 	movs	r3, #18
-.L3358:
+.L3361:
 	strh	r3, [r7, #604]	@ movhi
 	bl	FtlReadRefresh
 	movs	r0, #0
@@ -20712,13 +20742,13 @@ ftl_do_gc:
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #4
-	bls	.L3356
+	bls	.L3359
 	ldrh	r0, [r4, #3780]
-	b	.L3312
-.L3356:
+	b	.L3315
+.L3359:
 	ldrh	r0, [r4, #3780]
 	cmp	r0, #0
-	bne	.L3359
+	bne	.L3362
 	ldrh	r4, [r7, #20]
 	add	r3, r4, r4, lsl #1
 	asrs	r3, r3, #2
@@ -20732,110 +20762,110 @@ ftl_do_gc:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L3360
-	ldr	r3, .L3486+12
+	ble	.L3363
+	ldr	r3, .L3489+12
 	subs	r4, r4, #1
 	ldrh	r3, [r3, #-204]
 	cmp	r3, r4
-	blt	.L3360
+	blt	.L3363
 	bl	FtlReadRefresh
-	b	.L3477
-.L3487:
+	b	.L3480
+.L3490:
 	.align	2
-.L3486:
+.L3489:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LANCHOR2
 	.word	.LANCHOR5
-	.word	.LC151
-.L3360:
+	.word	.LC152
+.L3363:
 	cmp	r2, #0
-	bne	.L3359
+	bne	.L3362
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r7, #-204]
 	adds	r0, r0, #1
-	b	.L3312
-.L3354:
+	b	.L3315
+.L3357:
 	ldr	r3, [r6, #1796]
 	cmp	r3, #0
 	ite	eq
 	moveq	r5, #1
 	movne	r5, #2
-	b	.L3353
-.L3480:
+	b	.L3356
+.L3483:
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L3343
-.L3408:
+	bne	.L3346
+.L3411:
 	ldrh	r4, [r7, #-204]
 	cmp	r4, #24
-	bhi	.L3419
+	bhi	.L3422
 	cmp	r4, #16
 	ldrh	r5, [r6, #1872]
-	bls	.L3345
+	bls	.L3348
 	lsrs	r5, r5, #5
-.L3344:
+.L3347:
 	ldrh	r3, [r7, #604]
-	ldr	r2, .L3488
+	ldr	r2, .L3491
 	cmp	r3, r4
-	bcc	.L3481
-.L3348:
+	bcc	.L3484
+.L3351:
 	ldr	r3, [r6, #1796]
 	cmp	r3, #0
-	bne	.L3482
-.L3422:
+	bne	.L3485
+.L3425:
 	movw	r4, #65535
-.L3353:
+.L3356:
 	ldrh	r2, [r7, #40]
 	movw	r1, #65535
-	ldr	r3, .L3488
+	ldr	r3, .L3491
 	cmp	r2, r1
-	bne	.L3362
+	bne	.L3365
 	cmp	r4, r2
-	beq	.L3363
+	beq	.L3366
 	strh	r4, [r3, #40]	@ movhi
-	b	.L3364
-.L3363:
+	b	.L3367
+.L3366:
 	ldrh	r2, [r3, #658]
 	cmp	r2, r4
-	beq	.L3364
+	beq	.L3367
 	ldr	r1, [r3, #-220]
 	ldrh	r2, [r1, r2, lsl #1]
-	cbnz	r2, .L3365
+	cbnz	r2, .L3368
 	strh	r4, [r3, #658]	@ movhi
-.L3365:
+.L3368:
 	ldrh	r3, [r7, #658]
 	strh	r3, [r7, #40]	@ movhi
 	movw	r3, #65535
 	strh	r3, [r7, #658]	@ movhi
-.L3364:
+.L3367:
 	ldrh	r0, [r7, #40]
 	movw	r9, #65535
 	movs	r3, #0
 	strb	r3, [r7, #48]
 	cmp	r0, r9
-	beq	.L3362
+	beq	.L3365
 	bl	IsBlkInGcList
-	cbz	r0, .L3367
-	ldr	r3, .L3488
+	cbz	r0, .L3370
+	ldr	r3, .L3491
 	strh	r9, [r3, #40]	@ movhi
-.L3367:
+.L3370:
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
-	cbz	r3, .L3368
+	cbz	r3, .L3371
 	ldrh	r0, [r7, #40]
 	bl	ftl_get_blk_mode
 	strb	r0, [r7, #48]
-.L3368:
+.L3371:
 	ldrh	r2, [r7, #40]
 	movw	r3, #65535
-	ldr	r6, .L3488
+	ldr	r6, .L3491
 	cmp	r2, r3
-	beq	.L3362
+	beq	.L3365
 	add	r0, r6, #40
 	bl	make_superblock
-	ldr	r2, .L3488+4
+	ldr	r2, .L3491+4
 	movs	r3, #0
 	ldrh	r1, [r6, #40]
 	strh	r3, [r6, #42]	@ movhi
@@ -20844,34 +20874,34 @@ ftl_do_gc:
 	ldr	r3, [r6, #-220]
 	ldrh	r3, [r3, r1, lsl #1]
 	strh	r3, [r2, #3784]	@ movhi
-.L3362:
+.L3365:
 	ldrh	r3, [r7, #40]
 	ldrh	r1, [r7, #-200]
-	ldr	r2, .L3488
+	ldr	r2, .L3491
 	cmp	r1, r3
-	beq	.L3369
+	beq	.L3372
 	ldrh	r1, [r2, #-152]
 	cmp	r1, r3
-	beq	.L3369
+	beq	.L3372
 	ldrh	r2, [r2, #-104]
 	cmp	r2, r3
-	bne	.L3370
-.L3369:
+	bne	.L3373
+.L3372:
 	movw	r3, #65535
 	strh	r3, [r7, #40]	@ movhi
-.L3370:
-	ldr	r7, .L3488+8
-.L3403:
-	ldr	r6, .L3488
+.L3373:
+	ldr	r7, .L3491+8
+.L3406:
+	ldr	r6, .L3491
 	movw	r3, #65535
 	ldrh	r2, [r6, #40]
 	mov	fp, r6
 	cmp	r2, r3
-	bne	.L3371
+	bne	.L3374
 	mov	r10, r6
 	movs	r3, #0
 	str	r3, [r6, #616]
-.L3372:
+.L3375:
 	ldrh	r9, [fp, #612]
 	mov	r0, r9
 	bl	List_get_gc_head_node
@@ -20879,22 +20909,22 @@ ftl_do_gc:
 	uxth	r3, r0
 	strh	r3, [fp, #40]	@ movhi
 	cmp	r3, r2
-	bne	.L3373
-	ldr	r3, .L3488
+	bne	.L3376
+	ldr	r3, .L3491
 	movs	r2, #0
 	movs	r0, #8
 	strh	r2, [r3, #612]	@ movhi
-	b	.L3312
-.L3373:
+	b	.L3315
+.L3376:
 	mov	r0, r3
 	str	r3, [sp, #12]
 	bl	IsBlkInGcList
 	add	r9, r9, #1
 	ldr	r3, [sp, #12]
-	cbz	r0, .L3374
+	cbz	r0, .L3377
 	strh	r9, [r10, #612]	@ movhi
-	b	.L3372
-.L3374:
+	b	.L3375
+.L3377:
 	ldrh	lr, [r7, #1804]
 	uxth	r9, r9
 	ldrh	r2, [r7, #1872]
@@ -20904,57 +20934,57 @@ ftl_do_gc:
 	ldrh	r0, [r1, r3, lsl #1]
 	add	lr, r2, r2, lsr #31
 	cmp	r0, lr, asr #1
-	bgt	.L3376
+	bgt	.L3379
 	cmp	r9, #48
-	bls	.L3377
+	bls	.L3380
 	cmp	r0, #8
-	bls	.L3377
+	bls	.L3380
 	ldrh	r0, [r10, #648]
 	cmp	r0, #35
-	bhi	.L3377
-.L3376:
+	bhi	.L3380
+.L3379:
 	movs	r0, #0
 	strh	r0, [fp, #612]	@ movhi
-.L3377:
+.L3380:
 	ldrh	r1, [r1, r3, lsl #1]
 	cmp	r1, r2
-	blt	.L3378
+	blt	.L3381
 	movw	r2, #65535
 	cmp	r4, r2
-	bne	.L3378
+	bne	.L3381
 	ldrh	r0, [fp, #612]
-	ldr	r2, .L3488
+	ldr	r2, .L3491
 	cmp	r0, #3
-	bhi	.L3378
+	bhi	.L3381
 	movs	r3, #0
 	strh	r4, [r2, #40]	@ movhi
 	strh	r3, [r2, #612]	@ movhi
-.L3477:
-	ldr	r3, .L3488+4
+.L3480:
+	ldr	r3, .L3491+4
 	ldrh	r0, [r3, #3780]
-	b	.L3312
-.L3378:
-	cbnz	r1, .L3379
+	b	.L3315
+.L3381:
+	cbnz	r1, .L3382
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [fp, #612]
 	adds	r3, r3, #1
 	strh	r3, [fp, #612]	@ movhi
-	b	.L3372
-.L3379:
+	b	.L3375
+.L3382:
 	movs	r2, #0
 	strb	r2, [r6, #48]
-	ldr	r2, .L3488+8
+	ldr	r2, .L3491+8
 	ldrb	r2, [r2, #140]	@ zero_extendqisi2
-	cbz	r2, .L3380
+	cbz	r2, .L3383
 	mov	r0, r3
 	bl	ftl_get_blk_mode
-	ldr	r3, .L3488
+	ldr	r3, .L3491
 	strb	r0, [r3, #48]
-.L3380:
-	ldr	r0, .L3488+12
+.L3383:
+	ldr	r0, .L3491+12
 	bl	make_superblock
-	ldr	r2, .L3488+4
+	ldr	r2, .L3491+4
 	ldrh	r0, [r6, #40]
 	movs	r3, #0
 	ldr	r1, [r6, #-220]
@@ -20963,24 +20993,24 @@ ftl_do_gc:
 	strh	r3, [r6, #42]	@ movhi
 	strb	r3, [r6, #46]
 	strh	r1, [r2, #3784]	@ movhi
-.L3371:
+.L3374:
 	cmp	r8, #1
-	bne	.L3381
+	bne	.L3384
 	bl	FtlReadRefresh
-.L3381:
+.L3384:
 	movs	r3, #1
 	str	r3, [r6, #1740]
 	ldrh	r3, [r7, #1872]
 	str	r3, [sp, #12]
 	ldrb	r3, [r7, #140]	@ zero_extendqisi2
-	cbz	r3, .L3382
-	ldr	r3, .L3488
+	cbz	r3, .L3385
+	ldr	r3, .L3491
 	ldrb	r3, [r3, #48]	@ zero_extendqisi2
 	cmp	r3, #1
 	itt	eq
 	ldrheq	r3, [r7, #1874]
 	streq	r3, [sp, #12]
-.L3382:
+.L3385:
 	ldrh	r3, [r6, #42]
 	ldr	r1, [sp, #12]
 	adds	r2, r3, r5
@@ -20990,12 +21020,12 @@ ftl_do_gc:
 	subgt	r3, r2, r3
 	uxthgt	r5, r3
 	movs	r3, #0
-.L3476:
+.L3479:
 	str	r3, [sp, #16]
 	ldrh	r3, [sp, #16]
-	ldr	r6, .L3488
+	ldr	r6, .L3491
 	cmp	r3, r5
-	bcs	.L3391
+	bcs	.L3394
 	ldr	r3, [r6, #636]
 	add	r1, r6, #54
 	ldr	r2, [sp, #16]
@@ -21006,13 +21036,13 @@ ftl_do_gc:
 	add	ip, r3, r2
 	movs	r3, #0
 	mov	r9, r3
-.L3392:
+.L3395:
 	uxth	r2, r3
 	cmp	r2, r10
-	bcs	.L3483
+	bcs	.L3486
 	ldrh	r2, [r1, #2]!
 	cmp	r2, lr
-	beq	.L3385
+	beq	.L3388
 	ldr	r0, [sp, #20]
 	mov	fp, #36
 	orr	r2, ip, r2, lsl #10
@@ -21020,27 +21050,27 @@ ftl_do_gc:
 	add	r9, r9, #1
 	uxth	r9, r9
 	str	r2, [fp, #4]
-.L3385:
+.L3388:
 	adds	r3, r3, #1
-	b	.L3392
-.L3489:
+	b	.L3395
+.L3492:
 	.align	2
-.L3488:
+.L3491:
 	.word	.LANCHOR2
 	.word	.LANCHOR5
 	.word	.LANCHOR0
 	.word	.LANCHOR2+40
-.L3483:
+.L3486:
 	ldr	r0, [r6, #636]
 	mov	r1, r9
 	ldrb	r2, [r6, #48]	@ zero_extendqisi2
 	mov	fp, #0
 	bl	FlashReadPages
-	ldr	r6, .L3490
-.L3387:
+	ldr	r6, .L3493
+.L3390:
 	uxth	r3, fp
 	cmp	r3, r9
-	bcs	.L3484
+	bcs	.L3487
 	mov	ip, #36
 	ldr	r2, [r6, #636]
 	mul	r10, ip, fp
@@ -21048,11 +21078,11 @@ ftl_do_gc:
 	ldr	r2, [r2, r10]
 	ldr	r3, [r3, #12]
 	adds	r2, r2, #1
-	beq	.L3426
+	beq	.L3429
 	ldrh	r1, [r3]
 	movw	r2, #61589
 	cmp	r1, r2
-	bne	.L3426
+	bne	.L3429
 	add	r1, sp, ip
 	ldr	r0, [r3, #8]
 	movs	r2, #0
@@ -21067,9 +21097,9 @@ ftl_do_gc:
 	bic	r2, r2, #-2147483648
 	ldr	ip, [sp, #24]
 	cmp	r2, r0
-	bne	.L3426
+	bne	.L3429
 	str	r3, [sp, #28]
-	ldr	r3, .L3490+4
+	ldr	r3, .L3493+4
 	ldr	r0, [r6, #620]
 	ldr	r1, [r1, #16]
 	ldrh	r2, [r3, #3782]
@@ -21107,75 +21137,75 @@ ftl_do_gc:
 	str	r3, [r6, #620]
 	bl	FtlGcBufAlloc
 	ldrb	r3, [r7, #140]	@ zero_extendqisi2
-	cbnz	r3, .L3389
+	cbnz	r3, .L3392
 	ldrb	r3, [r6, #-97]	@ zero_extendqisi2
 	ldr	r2, [r6, #620]
 	cmp	r2, r3
-	beq	.L3389
+	beq	.L3392
 	ldrh	r3, [r6, #-100]
-	cbnz	r3, .L3426
-.L3389:
+	cbnz	r3, .L3429
+.L3392:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L3426
-	ldr	r3, .L3490
+	cbz	r0, .L3429
+	ldr	r3, .L3493
 	movs	r2, #0
 	movw	r1, #65535
 	str	r2, [r3, #1740]
 	strh	r1, [r3, #40]	@ movhi
 	strh	r2, [r3, #42]	@ movhi
-	b	.L3477
-.L3426:
+	b	.L3480
+.L3429:
 	add	fp, fp, #1
-	b	.L3387
-.L3484:
+	b	.L3390
+.L3487:
 	ldr	r3, [sp, #16]
 	adds	r3, r3, #1
-	b	.L3476
-.L3391:
+	b	.L3479
+.L3394:
 	ldrh	r3, [r6, #42]
 	add	r5, r5, r3
 	ldr	r3, [sp, #12]
 	uxth	r5, r5
 	strh	r5, [r6, #42]	@ movhi
 	cmp	r5, r3
-	bcc	.L3393
+	bcc	.L3396
 	ldr	r3, [r6, #620]
-	ldr	r5, .L3490+4
-	cbz	r3, .L3394
+	ldr	r5, .L3493+4
+	cbz	r3, .L3397
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L3394
+	cbz	r0, .L3397
 	movs	r3, #0
 	ldrh	r0, [r5, #3780]
 	str	r3, [r6, #1740]
-	b	.L3312
-.L3394:
+	b	.L3315
+.L3397:
 	ldrh	r5, [r5, #3782]
-	cbnz	r5, .L3395
+	cbnz	r5, .L3398
 	ldrh	r2, [r6, #40]
 	ldr	r3, [r6, #-220]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbz	r3, .L3395
-.L3396:
+	cbz	r3, .L3398
+.L3399:
 	ldr	r3, [r7, #1932]
 	cmp	r5, r3
-	bcs	.L3401
+	bcs	.L3404
 	mov	r0, r5
 	add	r1, sp, #40
 	movs	r2, #0
 	bl	log2phys
 	ldr	r0, [sp, #40]
 	adds	r3, r0, #1
-	beq	.L3397
+	beq	.L3400
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r6, #40]
 	cmp	r3, r0
-	bne	.L3397
-.L3401:
-	ldr	r3, .L3490+8
+	bne	.L3400
+.L3404:
+	ldr	r3, .L3493+8
 	ldr	r3, [r3, #1932]
 	cmp	r5, r3
-	bcc	.L3395
+	bcc	.L3398
 	ldrh	r2, [r6, #40]
 	movs	r1, #0
 	ldr	r3, [r6, #-220]
@@ -21185,75 +21215,75 @@ ftl_do_gc:
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L3395
-.L3397:
+	b	.L3398
+.L3400:
 	adds	r5, r5, #1
-	b	.L3396
-.L3395:
+	b	.L3399
+.L3398:
 	movw	r3, #65535
 	strh	r3, [r6, #40]	@ movhi
-.L3393:
+.L3396:
 	ldrh	r3, [r6, #-204]
 	cmp	r3, #2
-	bhi	.L3402
+	bhi	.L3405
 	ldrh	r5, [r7, #1872]
-	b	.L3403
-.L3402:
-	ldr	r2, .L3490
+	b	.L3406
+.L3405:
+	ldr	r2, .L3493
 	movs	r1, #0
 	str	r1, [r2, #1740]
-	ldr	r2, .L3490+4
+	ldr	r2, .L3493+4
 	ldrh	r0, [r2, #3780]
-	cbnz	r0, .L3312
+	cbnz	r0, .L3315
 	adds	r0, r3, #1
-	b	.L3312
-.L3412:
-	movs	r0, #0
-	b	.L3312
+	b	.L3315
 .L3415:
+	movs	r0, #0
+	b	.L3315
+.L3418:
 	mov	r0, r4
-	b	.L3312
-.L3481:
+	b	.L3315
+.L3484:
 	ldrh	r3, [r2, #-104]
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L3349
+	bne	.L3352
 	ldrh	r1, [r2, #658]
 	cmp	r1, r3
-	bne	.L3349
-	ldr	r3, .L3490+4
+	bne	.L3352
+	ldr	r3, .L3493+4
 	ldrh	r0, [r3, #3780]
 	cmp	r0, #0
-	beq	.L3485
-.L3350:
+	beq	.L3488
+.L3353:
 	ldrh	r3, [r7, #20]
 	add	r3, r3, r3, lsl #1
 	ubfx	r3, r3, #2, #16
-.L3351:
+.L3354:
 	strh	r3, [r7, #604]	@ movhi
 	movs	r3, #0
 	str	r3, [r7, #616]
-.L3312:
-	ldr	r3, .L3490+12
+.L3315:
+	ldr	r3, .L3493+12
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3411
+	beq	.L3414
 	bl	__stack_chk_fail
-.L3479:
+.L3482:
 	ldr	r2, [r5, #1736]
-	cbnz	r2, .L3335
+	cbnz	r2, .L3338
 	ldrh	r1, [r6, #1824]
-	ldr	r2, .L3490+8
+	ldr	r2, .L3493+8
 	cmp	r1, #3
-	beq	.L3335
+	beq	.L3338
 	ldr	r1, [r5, #88]
-	cbnz	r1, .L3335
+	cbnz	r1, .L3338
 	ldr	r1, [r2, #1796]
-	cbnz	r1, .L3335
+	cbnz	r1, .L3338
 	ldrb	r0, [r2, #140]	@ zero_extendqisi2
-	cbz	r0, .L3336
-.L3335:
+	cbz	r0, .L3339
+.L3338:
 	ldr	r2, [r7, #-220]
 	ldrh	r0, [r6, #1824]
 	ldrh	r1, [r2, r3, lsl #1]
@@ -21266,11 +21296,11 @@ ftl_do_gc:
 	movne	r3, #0
 	add	r3, r3, r2
 	cmp	r1, r3
-	bgt	.L3338
+	bgt	.L3341
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	ldr	r3, [r6, #1932]
-	ldr	r2, .L3490
+	ldr	r2, .L3493
 	ldr	r1, [r7, #-48]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
@@ -21279,104 +21309,104 @@ ftl_do_gc:
 	movls	r3, #160
 	strh	r3, [r2, #606]	@ movhi
 	uxth	r4, r0
-	b	.L3340
-.L3338:
+	b	.L3343
+.L3341:
 	movs	r3, #128
-	b	.L3475
-.L3336:
+	b	.L3478
+.L3339:
 	ldr	r2, [r5, #-220]
 	ldrh	r3, [r2, r3, lsl #1]
 	cmp	r3, #7
-	bhi	.L3341
+	bhi	.L3344
 	bl	List_get_gc_head_node
 	movs	r3, #128
 	strh	r3, [r7, #606]	@ movhi
 	uxth	r4, r0
-	b	.L3340
-.L3341:
+	b	.L3343
+.L3344:
 	movs	r3, #64
-.L3475:
+.L3478:
 	strh	r3, [r7, #606]	@ movhi
-	b	.L3342
-.L3333:
+	b	.L3345
+.L3336:
 	movs	r3, #80
 	strh	r3, [r5, #606]	@ movhi
-	b	.L3342
-.L3340:
+	b	.L3345
+.L3343:
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L3342
-.L3332:
+	beq	.L3345
+.L3335:
 	ldr	r1, [r6, #4060]
 	ldr	r3, [r7, #-220]
 	ldrh	r2, [r7, #-204]
 	ldrh	r1, [r1, r4, lsl #1]
 	ldrh	r3, [r3, r4, lsl #1]
-	ldr	r0, .L3490+16
+	ldr	r0, .L3493+16
 	str	r1, [sp]
 	ldrh	r1, [r7, #604]
 	str	r1, [sp, #4]
 	mov	r1, r4
 	bl	printk
-	b	.L3342
-.L3345:
+	b	.L3345
+.L3348:
 	cmp	r4, #12
-	bls	.L3346
+	bls	.L3349
 	lsrs	r5, r5, #4
-	b	.L3344
-.L3346:
+	b	.L3347
+.L3349:
 	cmp	r4, #8
-	bls	.L3344
+	bls	.L3347
 	lsrs	r5, r5, #2
-	b	.L3344
-.L3419:
+	b	.L3347
+.L3422:
 	movs	r5, #1
-	b	.L3344
-.L3491:
+	b	.L3347
+.L3494:
 	.align	2
-.L3490:
+.L3493:
 	.word	.LANCHOR2
 	.word	.LANCHOR5
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
-	.word	.LC152
-.L3485:
+	.word	.LC153
+.L3488:
 	ldr	r3, [r6, #1932]
 	ldr	r2, [r2, #-48]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcc	.L3350
+	bcc	.L3353
 	movs	r3, #18
-	b	.L3351
-.L3349:
+	b	.L3354
+.L3352:
 	ldrh	r3, [r7, #20]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r7, #604]	@ movhi
-	b	.L3348
-.L3482:
+	b	.L3351
+.L3485:
 	cmp	r9, #2
-	bhi	.L3422
+	bhi	.L3425
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L3422
-.L3478:
-	cmp	r8, #0
-	beq	.L3408
-	b	.L3343
-.L3329:
+	b	.L3425
+.L3481:
 	cmp	r8, #0
-	beq	.L3408
-	b	.L3409
-.L3328:
+	beq	.L3411
+	b	.L3346
+.L3332:
 	cmp	r8, #0
-	beq	.L3408
-	b	.L3359
+	beq	.L3411
+	b	.L3412
 .L3331:
 	cmp	r8, #0
-	beq	.L3408
-	b	.L3410
-.L3411:
+	beq	.L3411
+	b	.L3362
+.L3334:
+	cmp	r8, #0
+	beq	.L3411
+	b	.L3413
+.L3414:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
@@ -21391,52 +21421,52 @@ FtlCacheWriteBack:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3536
+	ldr	r3, .L3539
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
 	ldr	r2, [r3]
-	ldr	r4, .L3536+4
+	ldr	r4, .L3539+4
 	str	r3, [sp, #4]
 	str	r2, [sp, #12]
-	ldr	r2, .L3536+8
+	ldr	r2, .L3539+8
 	ldr	r5, [r2, #3788]
 	ldr	r2, [r4, #4052]
 	cmp	r2, #0
-	bne	.L3494
+	bne	.L3497
 	ldr	r1, [r4, #1924]
 	cmp	r1, #0
-	beq	.L3494
+	beq	.L3497
 	ldrb	r7, [r4, #140]	@ zero_extendqisi2
-	cbz	r7, .L3496
+	cbz	r7, .L3499
 	ldrb	r7, [r5, #8]	@ zero_extendqisi2
 	subs	r0, r7, #1
 	rsbs	r7, r0, #0
 	adcs	r7, r7, r0
-.L3496:
+.L3499:
 	ldr	r0, [r4, #1928]
 	mov	r2, r7
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r8, #0
 	bl	FlashProgPages
-	ldr	r9, .L3536+4
-	ldr	r10, .L3536+16
-.L3497:
+	ldr	r9, .L3539+4
+	ldr	r10, .L3539+16
+.L3500:
 	ldr	r3, [r4, #1924]
 	cmp	r8, r3
-	bcs	.L3515
+	bcs	.L3518
 	movs	r6, #36
 	ldr	r3, [r9, #1928]
 	mul	r6, r6, r8
 	adds	r2, r3, r6
 	ldr	r3, [r3, r6]
 	adds	r3, r3, #1
-	beq	.L3519
+	beq	.L3522
 	ldr	r3, [r2, #4]
-	cbz	r7, .L3532
+	cbz	r7, .L3535
 	orr	r3, r3, #-2147483648
-.L3532:
+.L3535:
 	ldr	r0, [r2, #16]
 	add	r1, sp, #8
 	movs	r2, #1
@@ -21447,63 +21477,63 @@ FtlCacheWriteBack:
 	ldr	r3, [r6, #12]
 	ldr	r0, [r3, #12]
 	adds	r2, r0, #1
-	beq	.L3501
+	beq	.L3504
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r3, [r10, #-220]
 	ldrh	r2, [r3, r0, lsl #1]
 	mov	r6, r0
-	cbnz	r2, .L3502
-	ldr	r0, .L3536+12
+	cbnz	r2, .L3505
+	ldr	r0, .L3539+12
 	mov	r1, r6
 	bl	printk
-.L3502:
+.L3505:
 	mov	r0, r6
 	bl	decrement_vpc_count
-.L3501:
+.L3504:
 	add	r8, r8, #1
-	b	.L3497
-.L3534:
-	ldr	r6, .L3536+16
+	b	.L3500
+.L3537:
+	ldr	r6, .L3539+16
 	movw	r5, #16386
-.L3514:
+.L3517:
 	ldrh	r3, [r6, #666]
-	cbz	r3, .L3515
+	cbz	r3, .L3518
 	movs	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	subs	r5, r5, #1
-	bne	.L3514
-.L3515:
+	bne	.L3517
+.L3518:
 	movs	r3, #0
 	str	r3, [r4, #1924]
-	b	.L3494
-.L3519:
-	ldr	r10, .L3536+4
+	b	.L3497
+.L3522:
+	ldr	r10, .L3539+4
 	mov	r8, #0
-	ldr	r9, .L3536+16
-.L3498:
+	ldr	r9, .L3539+16
+.L3501:
 	ldr	r3, [r4, #1924]
 	cmp	r8, r3
-	bcs	.L3534
+	bcs	.L3537
 	movs	r6, #36
 	ldr	r3, [r10, #1928]
 	mov	fp, #0
 	mov	r2, #-1
 	mul	r6, r6, r8
 	str	r2, [r3, r6]
-.L3504:
+.L3507:
 	ldr	r3, [r4, #1928]
 	adds	r2, r3, r6
 	ldr	r3, [r3, r6]
 	adds	r3, r3, #1
-	bne	.L3535
+	bne	.L3538
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r5]
 	cmp	r3, r0
-	bne	.L3505
+	bne	.L3508
 	ldr	r1, [r9, #-220]
 	ldrh	r0, [r5, #4]
 	ldrh	r2, [r1, r3, lsl #1]
@@ -21513,12 +21543,12 @@ FtlCacheWriteBack:
 	strb	fp, [r5, #6]
 	strh	fp, [r5, #4]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
-.L3505:
+.L3508:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L3506
+	cbnz	r3, .L3509
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L3506:
+.L3509:
 	ldr	r3, [r9, #188]
 	adds	r3, r3, #1
 	str	r3, [r9, #188]
@@ -21546,13 +21576,13 @@ FtlCacheWriteBack:
 	streq	r3, [r10, #4052]
 	ldr	r3, [r4, #4052]
 	cmp	r3, #0
-	beq	.L3504
-	b	.L3494
-.L3535:
+	beq	.L3507
+	b	.L3497
+.L3538:
 	ldr	r3, [r2, #4]
-	cbz	r7, .L3533
+	cbz	r7, .L3536
 	orr	r3, r3, #-2147483648
-.L3533:
+.L3536:
 	ldr	r0, [r2, #16]
 	add	r1, sp, #8
 	movs	r2, #1
@@ -21563,41 +21593,41 @@ FtlCacheWriteBack:
 	ldr	r3, [r6, #12]
 	ldr	r0, [r3, #12]
 	adds	r3, r0, #1
-	beq	.L3511
+	beq	.L3514
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r3, [r9, #-220]
 	ldrh	r2, [r3, r0, lsl #1]
 	mov	r6, r0
-	cbnz	r2, .L3512
-	ldr	r0, .L3536+12
+	cbnz	r2, .L3515
+	ldr	r0, .L3539+12
 	mov	r1, r6
 	bl	printk
-.L3512:
+.L3515:
 	mov	r0, r6
 	bl	decrement_vpc_count
-.L3511:
+.L3514:
 	add	r8, r8, #1
-	b	.L3498
-.L3494:
+	b	.L3501
+.L3497:
 	ldr	r3, [sp, #4]
 	movs	r0, #0
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3517
+	beq	.L3520
 	bl	__stack_chk_fail
-.L3517:
+.L3520:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3537:
+.L3540:
 	.align	2
-.L3536:
+.L3539:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR5
-	.word	.LC153
+	.word	.LC154
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
@@ -21612,24 +21642,24 @@ FtlSysFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3543
+	ldr	r3, .L3546
 	ldr	r3, [r3, #4052]
-	cbnz	r3, .L3539
-	ldr	r3, .L3543+4
+	cbnz	r3, .L3542
+	ldr	r3, .L3546+4
 	ldr	r3, [r3, #504]
 	adds	r3, r3, #1
-	beq	.L3539
+	beq	.L3542
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	movs	r0, #1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3539:
+.L3542:
 	movs	r0, #0
 	pop	{r3, pc}
-.L3544:
+.L3547:
 	.align	2
-.L3543:
+.L3546:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -21645,17 +21675,17 @@ FtlDeInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3547
+	ldr	r3, .L3550
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
-	bne	.L3546
+	bne	.L3549
 	bl	FtlSysFlush
-.L3546:
+.L3549:
 	movs	r0, #0
 	pop	{r3, pc}
-.L3548:
+.L3551:
 	.align	2
-.L3547:
+.L3550:
 	.word	.LANCHOR1
 	.fnend
 	.size	FtlDeInit, .-FtlDeInit
@@ -21688,14 +21718,14 @@ rk_ftl_de_init:
 	push	{r3, lr}
 	.save {r3, lr}
 	movs	r1, #0
-	ldr	r0, .L3551
+	ldr	r0, .L3554
 	bl	printk
 	pop	{r3, lr}
 	b	ftl_deinit
-.L3552:
+.L3555:
 	.align	2
-.L3551:
-	.word	.LC154
+.L3554:
+	.word	.LC155
 	.fnend
 	.size	rk_ftl_de_init, .-rk_ftl_de_init
 	.align	1
@@ -21736,9 +21766,9 @@ ftl_discard:
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	adds	r2, r0, r1
-	ldr	r6, .L3574
+	ldr	r6, .L3577
 	mov	r8, r0
-	ldr	r0, .L3574+4
+	ldr	r0, .L3577+4
 	.pad #20
 	sub	sp, sp, #20
 	mov	r5, r1
@@ -21747,16 +21777,16 @@ ftl_discard:
 	str	r3, [sp, #12]
 	ldr	r3, [r0, #1912]
 	cmp	r2, r3
-	bhi	.L3563
-	ldr	r3, .L3574+8
+	bhi	.L3566
+	ldr	r3, .L3577+8
 	ldr	r0, [r3, #504]
 	adds	r3, r0, #1
-	beq	.L3556
+	beq	.L3559
 	cmp	r1, #31
-	bls	.L3566
+	bls	.L3569
 	ldr	r3, [r7, #4052]
 	cmp	r3, #0
-	bne	.L3566
+	bne	.L3569
 	bl	FtlCacheWriteBack
 	ldrh	r4, [r7, #1878]
 	mov	r0, r8
@@ -21766,7 +21796,7 @@ ftl_discard:
 	mov	r9, r0
 	rsb	r3, r3, r8
 	uxth	r3, r3
-	cbz	r3, .L3557
+	cbz	r3, .L3560
 	subs	r4, r4, r3
 	add	r9, r0, #1
 	cmp	r4, r5
@@ -21774,22 +21804,22 @@ ftl_discard:
 	movcs	r4, r5
 	uxth	r4, r4
 	subs	r5, r5, r4
-.L3557:
-	ldr	r4, .L3574+12
+.L3560:
+	ldr	r4, .L3577+12
 	mov	r3, #-1
-	ldr	r8, .L3574+16
+	ldr	r8, .L3577+16
 	str	r3, [sp, #8]
-.L3558:
+.L3561:
 	ldrh	r3, [r7, #1878]
 	cmp	r5, r3
-	bcc	.L3573
+	bcc	.L3576
 	mov	r0, r9
 	add	r1, sp, #4
 	movs	r2, #0
 	bl	log2phys
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L3559
+	beq	.L3562
 	ldr	r3, [r4, #3792]
 	add	r1, sp, #8
 	movs	r2, #1
@@ -21804,39 +21834,39 @@ ftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L3559:
+.L3562:
 	ldrh	r3, [r7, #1878]
 	add	r9, r9, #1
 	subs	r5, r5, r3
-	b	.L3558
-.L3573:
-	ldr	r3, .L3574+12
+	b	.L3561
+.L3576:
+	ldr	r3, .L3577+12
 	ldr	r2, [r3, #3792]
 	cmp	r2, #32
-	bls	.L3566
+	bls	.L3569
 	movs	r2, #0
 	str	r2, [r3, #3792]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L3566
-.L3563:
-	mov	r0, #-1
-	b	.L3556
+	b	.L3569
 .L3566:
+	mov	r0, #-1
+	b	.L3559
+.L3569:
 	movs	r0, #0
-.L3556:
+.L3559:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L3562
+	beq	.L3565
 	bl	__stack_chk_fail
-.L3562:
+.L3565:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L3575:
+.L3578:
 	.align	2
-.L3574:
+.L3577:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -21869,33 +21899,33 @@ ftl_read:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r3
-	ldr	r3, .L3621
+	ldr	r3, .L3624
 	.pad #84
 	sub	sp, sp, #84
 	mov	r7, r1
 	str	r2, [sp, #44]
 	ldr	r3, [r3]
 	str	r3, [sp, #76]
-	ldr	r3, .L3621+4
+	ldr	r3, .L3624+4
 	ldr	r3, [r3, #504]
 	adds	r4, r3, #1
-	beq	.L3601
+	beq	.L3604
 	cmp	r0, #16
-	bne	.L3579
+	bne	.L3582
 	add	r0, r1, #256
 	mov	r1, r2
 	mov	r2, r8
 	bl	FtlVendorPartRead
-	b	.L3578
-.L3579:
+	b	.L3581
+.L3582:
 	ldr	r3, [sp, #44]
 	adds	r3, r1, r3
 	str	r3, [sp, #36]
-	ldr	r3, .L3621+8
+	ldr	r3, .L3624+8
 	ldr	r1, [sp, #36]
 	ldr	r2, [r3, #1912]
 	cmp	r1, r2
-	bhi	.L3602
+	bhi	.L3605
 	ldrh	r4, [r3, #1878]
 	mov	r0, r7
 	mov	r1, r4
@@ -21911,7 +21941,7 @@ ftl_read:
 	str	r0, [sp, #32]
 	add	r3, r3, r0
 	str	r3, [sp, #24]
-	ldr	r3, .L3621+12
+	ldr	r3, .L3624+12
 	ldr	r0, [sp, #28]
 	ldr	r2, [r3, #-12]
 	add	r2, r2, r1
@@ -21922,54 +21952,54 @@ ftl_read:
 	ldr	r1, [sp, #32]
 	str	r2, [r3, #-40]
 	bl	FtlCacheMetchLpa
-	cbz	r0, .L3580
+	cbz	r0, .L3583
 	bl	FtlCacheWriteBack
-.L3580:
+.L3583:
 	mov	r10, #0
 	ldr	r5, [sp, #28]
-	ldr	r4, .L3621+12
-	ldr	r9, .L3621+8
+	ldr	r4, .L3624+12
+	ldr	r9, .L3624+8
 	mov	r6, r10
 	str	r10, [sp, #48]
 	str	r10, [sp, #52]
-.L3581:
+.L3584:
 	ldr	r3, [sp, #24]
 	cmp	r3, #0
-	beq	.L3620
+	beq	.L3623
 	add	r1, sp, #72
 	mov	r0, r5
 	movs	r2, #0
 	bl	log2phys
 	ldr	r3, [sp, #72]
 	adds	r1, r3, #1
-	bne	.L3617
+	bne	.L3620
 	mov	fp, #0
-.L3582:
+.L3585:
 	ldrh	r0, [r9, #1878]
 	cmp	fp, r0
-	bcs	.L3586
+	bcs	.L3589
 	mla	r0, r0, r5, fp
 	cmp	r0, r7
-	bcc	.L3584
+	bcc	.L3587
 	ldr	r3, [sp, #36]
 	cmp	r0, r3
-	bcs	.L3584
+	bcs	.L3587
 	subs	r0, r0, r7
 	movs	r1, #0
 	mov	r2, #512
 	add	r0, r8, r0, lsl #9
 	bl	ftl_memset
-.L3584:
+.L3587:
 	add	fp, fp, #1
-	b	.L3582
-.L3617:
+	b	.L3585
+.L3620:
 	ldr	r2, [r4, #1764]
 	mov	fp, #36
 	mla	fp, fp, r6, r2
 	str	r3, [fp, #4]
 	ldr	r3, [sp, #28]
 	cmp	r5, r3
-	bne	.L3587
+	bne	.L3590
 	ldrh	ip, [r9, #1878]
 	mov	r0, r7
 	ldr	r3, [r4, #1792]
@@ -21986,13 +22016,13 @@ ftl_read:
 	movcs	r3, r2
 	cmp	r3, ip
 	str	r3, [sp, #48]
-	bne	.L3588
+	bne	.L3591
 	str	r8, [fp, #8]
-	b	.L3588
-.L3587:
+	b	.L3591
+.L3590:
 	ldr	r3, [sp, #32]
 	cmp	r5, r3
-	bne	.L3589
+	bne	.L3592
 	ldr	r3, [r4, #1796]
 	ldrh	r2, [r9, #1878]
 	ldr	r1, [sp, #36]
@@ -22000,16 +22030,16 @@ ftl_read:
 	mul	r3, r2, r5
 	rsb	r10, r3, r1
 	cmp	r10, r2
-	bne	.L3588
-	b	.L3618
-.L3589:
+	bne	.L3591
+	b	.L3621
+.L3592:
 	ldrh	r3, [r9, #1878]
 	muls	r3, r5, r3
-.L3618:
+.L3621:
 	subs	r3, r3, r7
 	add	r3, r8, r3, lsl #9
 	str	r3, [fp, #8]
-.L3588:
+.L3591:
 	ldrh	r3, [r9, #1884]
 	ldr	r2, [r4, #1804]
 	str	r5, [fp, #16]
@@ -22018,18 +22048,18 @@ ftl_read:
 	bic	r3, r3, #3
 	add	r3, r3, r2
 	str	r3, [fp, #12]
-.L3586:
+.L3589:
 	ldr	r3, [sp, #24]
 	adds	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #24]
-	beq	.L3590
+	beq	.L3593
 	ldrh	r3, [r9, #1804]
 	cmp	r6, r3, lsl #3
-	bne	.L3581
-.L3590:
+	bne	.L3584
+.L3593:
 	cmp	r6, #0
-	beq	.L3581
+	beq	.L3584
 	ldr	r0, [r4, #1764]
 	mov	r1, r6
 	movs	r2, #0
@@ -22044,7 +22074,7 @@ ftl_read:
 	str	r3, [sp, #68]
 	movs	r3, #0
 	str	r3, [sp, #40]
-.L3597:
+.L3600:
 	ldr	r3, [sp, #40]
 	mov	ip, #36
 	ldr	r1, [sp, #28]
@@ -22053,33 +22083,33 @@ ftl_read:
 	add	r3, r3, fp
 	ldr	r2, [r3, #16]
 	cmp	r2, r1
-	bne	.L3592
+	bne	.L3595
 	ldr	r1, [r3, #8]
 	ldr	r3, [r4, #1792]
 	cmp	r1, r3
-	bne	.L3593
+	bne	.L3596
 	ldr	r3, [sp, #60]
 	mov	r0, r8
 	ldr	r2, [sp, #64]
 	add	r1, r1, r3
-	b	.L3619
-.L3592:
+	b	.L3622
+.L3595:
 	ldr	r1, [sp, #32]
 	cmp	r2, r1
-	bne	.L3593
+	bne	.L3596
 	ldr	r1, [r3, #8]
 	ldr	r3, [r4, #1796]
 	cmp	r1, r3
-	bne	.L3593
+	bne	.L3596
 	ldrh	r0, [r9, #1878]
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #68]
 	muls	r0, r3, r0
 	subs	r0, r0, r7
 	add	r0, r8, r0, lsl #9
-.L3619:
+.L3622:
 	bl	ftl_memcpy
-.L3593:
+.L3596:
 	ldr	r2, [r4, #1764]
 	add	r3, r2, fp
 	ldr	r1, [r2, fp]
@@ -22093,9 +22123,9 @@ ftl_read:
 	ldr	r1, [r3, #16]
 	ldr	r2, [r2, #8]
 	cmp	r1, r2
-	beq	.L3595
+	beq	.L3598
 	ldr	r2, [r4, #164]
-	ldr	r0, .L3621+16
+	ldr	r0, .L3624+16
 	adds	r2, r2, #1
 	str	r2, [r4, #164]
 	ldr	lr, [r3, #12]
@@ -22114,58 +22144,58 @@ ftl_read:
 	ldr	r2, [r3, #4]
 	ldr	r3, [lr]
 	bl	printk
-.L3595:
+.L3598:
 	ldr	r3, [r4, #1764]
 	add	r2, r3, fp
 	ldr	r3, [r3, fp]
 	cmp	r3, #256
-	bne	.L3596
+	bne	.L3599
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3596:
+.L3599:
 	ldr	r3, [sp, #40]
 	adds	r3, r3, #1
 	str	r3, [sp, #40]
 	cmp	r3, r6
-	bne	.L3597
+	bne	.L3600
 	movs	r6, #0
-	b	.L3581
-.L3620:
-	ldr	r3, .L3621+12
+	b	.L3584
+.L3623:
+	ldr	r3, .L3624+12
 	ldrh	r3, [r3, #666]
-	cbz	r3, .L3599
+	cbz	r3, .L3602
 	ldr	r0, [sp, #24]
 	movs	r1, #1
 	bl	ftl_do_gc
-.L3599:
+.L3602:
 	ldr	r0, [sp, #52]
-	b	.L3578
-.L3601:
+	b	.L3581
+.L3604:
 	mov	r0, r3
-	b	.L3578
-.L3602:
+	b	.L3581
+.L3605:
 	mov	r0, #-1
-.L3578:
-	ldr	r3, .L3621
+.L3581:
+	ldr	r3, .L3624
 	ldr	r2, [sp, #76]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3600
+	beq	.L3603
 	bl	__stack_chk_fail
-.L3600:
+.L3603:
 	add	sp, sp, #84
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3622:
+.L3625:
 	.align	2
-.L3621:
+.L3624:
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC143
+	.word	.LC144
 	.fnend
 	.size	ftl_read, .-ftl_read
 	.align	1
@@ -22204,25 +22234,25 @@ FlashBootVendorRead:
 	mov	r5, r1
 	mov	r4, r2
 	bl	rknand_device_lock
-	ldr	r3, .L3627
+	ldr	r3, .L3630
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
-	bne	.L3626
+	bne	.L3629
 	mov	r2, r4
 	mov	r0, r6
 	mov	r1, r5
 	bl	ftl_vendor_read
 	mov	r4, r0
-	b	.L3625
-.L3626:
+	b	.L3628
+.L3629:
 	mov	r4, #-1
-.L3625:
+.L3628:
 	bl	rknand_device_unlock
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L3628:
+.L3631:
 	.align	2
-.L3627:
+.L3630:
 	.word	.LANCHOR1
 	.fnend
 	.size	FlashBootVendorRead, .-FlashBootVendorRead
@@ -22299,11 +22329,11 @@ FtlInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r3, #-1
-	ldr	r2, .L3648
-	ldr	r6, .L3648+4
-	ldr	r5, .L3648+8
-	ldr	r1, .L3648+12
-	ldr	r0, .L3648+16
+	ldr	r2, .L3651
+	ldr	r6, .L3651+4
+	ldr	r5, .L3651+8
+	ldr	r1, .L3651+12
+	ldr	r0, .L3651+16
 	str	r3, [r5, #504]
 	movs	r3, #0
 	str	r3, [r2, #3796]
@@ -22316,40 +22346,40 @@ FtlInit:
 	ldrh	r0, [r6, #1808]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L3633
-	ldr	r0, .L3648+20
-	b	.L3647
-.L3633:
+	cbz	r0, .L3636
+	ldr	r0, .L3651+20
+	b	.L3650
+.L3636:
 	bl	FtlSysBlkInit
 	mov	r4, r0
-	cbz	r0, .L3635
-	ldr	r0, .L3648+24
-.L3647:
-	ldr	r1, .L3648+28
+	cbz	r0, .L3638
+	ldr	r0, .L3651+24
+.L3650:
+	ldr	r1, .L3651+28
 	bl	printk
-	b	.L3634
-.L3635:
+	b	.L3637
+.L3638:
 	movs	r1, #1
 	str	r1, [r5, #504]
-	ldr	r5, .L3648+32
+	ldr	r5, .L3651+32
 	bl	ftl_do_gc
 	ldrh	r7, [r5, #-204]
 	cmp	r7, #15
-	bhi	.L3636
+	bhi	.L3639
 	mov	r8, r5
 	movw	r6, #65535
-.L3639:
+.L3642:
 	ldrh	r3, [r5, #40]
 	cmp	r3, r6
-	bne	.L3637
+	bne	.L3640
 	ldrh	r3, [r8, #658]
 	cmp	r3, r6
-	bne	.L3637
+	bne	.L3640
 	and	r0, r4, #7
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L3637:
+.L3640:
 	movs	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
@@ -22359,34 +22389,34 @@ FtlInit:
 	ldrh	r2, [r5, #-204]
 	adds	r3, r7, #2
 	cmp	r2, r3
-	bhi	.L3634
+	bhi	.L3637
 	adds	r4, r4, #1
 	cmp	r4, #1024
-	bne	.L3639
-	b	.L3634
-.L3636:
+	bne	.L3642
+	b	.L3637
+.L3639:
 	ldrb	r3, [r6, #140]	@ zero_extendqisi2
-	cbz	r3, .L3634
+	cbz	r3, .L3637
 	movs	r4, #128
-.L3641:
+.L3644:
 	movs	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	subs	r4, r4, #1
-	bne	.L3641
-.L3634:
+	bne	.L3644
+.L3637:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3649:
+.L3652:
 	.align	2
-.L3648:
+.L3651:
 	.word	.LANCHOR5
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC77
 	.word	.LC76
-	.word	.LC155
 	.word	.LC156
+	.word	.LC157
 	.word	.LANCHOR3+108
 	.word	.LANCHOR2
 	.fnend
@@ -22404,8 +22434,8 @@ rk_ftl_init:
 	.save {r4, r5, r6, lr}
 	mov	r0, #2048
 	bl	ftl_malloc
-	ldr	r5, .L3654
-	ldr	r4, .L3654+4
+	ldr	r5, .L3657
+	ldr	r4, .L3657+4
 	movs	r6, #0
 	addw	r1, r5, #3804
 	str	r6, [r5, #3804]
@@ -22414,7 +22444,7 @@ rk_ftl_init:
 	add	r0, r4, #3984
 	bl	rknand_get_reg_addr
 	ldr	r3, [r4, #3984]
-	cbz	r3, .L3653
+	cbz	r3, .L3656
 	bl	rk_nandc_irq_init
 	mov	r1, r6
 	mov	r2, r6
@@ -22425,23 +22455,23 @@ rk_ftl_init:
 	ldr	r0, [r4, #3984]
 	bl	FlashInit
 	mov	r4, r0
-	cbnz	r0, .L3652
+	cbnz	r0, .L3655
 	bl	FtlInit
-.L3652:
+.L3655:
 	mov	r1, r4
-	ldr	r0, .L3654+8
+	ldr	r0, .L3657+8
 	bl	printk
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L3653:
+.L3656:
 	mov	r0, #-1
 	pop	{r4, r5, r6, pc}
-.L3655:
+.L3658:
 	.align	2
-.L3654:
+.L3657:
 	.word	.LANCHOR5
 	.word	.LANCHOR2
-	.word	.LC157
+	.word	.LC158
 	.fnend
 	.size	rk_ftl_init, .-rk_ftl_init
 	.align	1
@@ -22453,7 +22483,7 @@ ftl_fix_nand_power_lost_error:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3672
+	ldr	r3, .L3675
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #68
@@ -22461,15 +22491,15 @@ ftl_fix_nand_power_lost_error:
 	ldr	r2, [r3]
 	str	r3, [sp, #4]
 	str	r2, [sp, #60]
-	ldr	r2, .L3672+4
+	ldr	r2, .L3675+4
 	ldrb	r1, [r2, #140]	@ zero_extendqisi2
 	mov	r7, r2
 	cmp	r1, #0
-	beq	.L3656
-	ldr	r4, .L3672+8
+	beq	.L3659
+	ldr	r4, .L3675+8
 	movw	r6, #4097
-	ldr	r8, .L3672+20
-	ldr	r0, .L3672+12
+	ldr	r8, .L3675+20
+	ldr	r0, .L3675+12
 	ldr	r3, [r4, #-220]
 	ldrh	r5, [r8, #3644]
 	mov	r1, r5
@@ -22484,25 +22514,25 @@ ftl_fix_nand_power_lost_error:
 	sub	r0, r4, #152
 	bl	allocate_new_data_superblock
 	lsl	r9, r5, #1
-.L3658:
+.L3661:
 	subs	r6, r6, #1
-	beq	.L3662
+	beq	.L3665
 	movs	r0, #1
 	mov	r1, r0
 	bl	ftl_do_gc
 	ldr	r3, [r4, #-220]
 	ldrh	r3, [r3, r9]
 	cmp	r3, #0
-	bne	.L3658
-.L3662:
+	bne	.L3661
+.L3665:
 	ldr	r3, [r4, #-220]
 	mov	r1, r5
-	ldr	r0, .L3672+12
+	ldr	r0, .L3675+12
 	ldrh	r2, [r3, r5, lsl #1]
 	bl	printk
 	ldr	r3, [r4, #-220]
 	ldrh	r6, [r3, r5, lsl #1]
-	cbnz	r6, .L3660
+	cbnz	r6, .L3663
 	add	r0, sp, #64
 	mov	fp, #36
 	movw	r10, #65535
@@ -22513,13 +22543,13 @@ ftl_fix_nand_power_lost_error:
 	mov	r3, r6
 	mov	lr, r3
 	add	r0, sp, #26
-.L3663:
+.L3666:
 	uxth	r2, r3
 	cmp	r2, ip
-	bcs	.L3671
+	bcs	.L3674
 	ldrh	r2, [r0, #2]!
 	cmp	r2, r10
-	beq	.L3664
+	beq	.L3667
 	mla	r1, fp, r6, r9
 	adds	r6, r6, #1
 	lsls	r2, r2, #10
@@ -22527,13 +22557,13 @@ ftl_fix_nand_power_lost_error:
 	str	r2, [r1, #4]
 	str	lr, [r1, #8]
 	str	lr, [r1, #12]
-.L3664:
+.L3667:
 	adds	r3, r3, #1
-	b	.L3663
-.L3671:
+	b	.L3666
+.L3674:
 	ldr	r3, [r4, #-220]
 	mov	r1, r5
-	ldr	r0, .L3672+16
+	ldr	r0, .L3675+16
 	ldrh	r2, [r3, r5, lsl #1]
 	bl	printk
 	movs	r1, #0
@@ -22544,28 +22574,28 @@ ftl_fix_nand_power_lost_error:
 	movs	r1, #1
 	mov	r2, r6
 	bl	FlashEraseBlocks
-.L3660:
+.L3663:
 	movw	r3, #65535
 	strh	r3, [r8, #3644]	@ movhi
-.L3656:
+.L3659:
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #60]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3666
+	beq	.L3669
 	bl	__stack_chk_fail
-.L3666:
+.L3669:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3673:
+.L3676:
 	.align	2
-.L3672:
+.L3675:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC158
 	.word	.LC159
+	.word	.LC160
 	.word	.LANCHOR5
 	.fnend
 	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
@@ -22595,36 +22625,36 @@ ftl_write:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #100
 	sub	sp, sp, #100
-	ldr	r7, .L3749
+	ldr	r7, .L3752
 	mov	r8, r1
 	str	r3, [sp, #12]
-	ldr	r3, .L3749+4
+	ldr	r3, .L3752+4
 	str	r2, [sp, #8]
 	ldr	r3, [r3]
 	str	r3, [sp, #92]
 	ldr	r3, [r7, #4052]
 	cmp	r3, #0
-	bne	.L3718
-	ldr	r2, .L3749+8
+	bne	.L3721
+	ldr	r2, .L3752+8
 	ldr	r2, [r2, #504]
 	adds	r2, r2, #1
-	beq	.L3719
+	beq	.L3722
 	cmp	r0, #16
-	bne	.L3677
+	bne	.L3680
 	add	r0, r1, #256
 	ldr	r2, [sp, #12]
 	ldr	r1, [sp, #8]
 	bl	FtlVendorPartWrite
-	b	.L3676
-.L3677:
+	b	.L3679
+.L3680:
 	ldr	r3, [sp, #8]
 	adds	r6, r1, r3
 	ldr	r3, [r7, #1912]
 	cmp	r6, r3
-	bhi	.L3720
+	bhi	.L3723
 	ldrh	r4, [r7, #1878]
 	mov	r3, #2048
-	ldr	r5, .L3749+12
+	ldr	r5, .L3752+12
 	mov	r0, r1
 	mov	r1, r4
 	str	r3, [r5, #3808]
@@ -22637,7 +22667,7 @@ ftl_write:
 	str	r0, [sp, #20]
 	adds	r3, r6, #1
 	str	r3, [sp, #4]
-	ldr	r3, .L3749+16
+	ldr	r3, .L3752+16
 	ldr	r1, [sp, #4]
 	ldr	r2, [r3, #-32]
 	add	r2, r2, r1
@@ -22654,7 +22684,7 @@ ftl_write:
 	movcc	r2, #0
 	str	r2, [sp, #28]
 	cmp	r1, #0
-	beq	.L3679
+	beq	.L3682
 	movs	r2, #36
 	muls	r2, r1, r2
 	ldr	r1, [r7, #1928]
@@ -22662,7 +22692,7 @@ ftl_write:
 	add	r9, r1, r2
 	ldr	r2, [r9, #16]
 	cmp	fp, r2
-	bne	.L3680
+	bne	.L3683
 	ldr	r2, [r3, #-28]
 	mov	r1, r4
 	mov	r0, r8
@@ -22683,11 +22713,11 @@ ftl_write:
 	lsls	r7, r4, #9
 	mov	r2, r7
 	bl	ftl_memcpy
-	cbnz	r6, .L3681
+	cbnz	r6, .L3684
 	ldr	r3, [r5, #3812]
 	cmp	r3, #2
-	ble	.L3718
-.L3681:
+	ble	.L3721
+.L3684:
 	ldr	r3, [sp, #8]
 	add	r8, r8, r4
 	add	fp, fp, #1
@@ -22697,71 +22727,71 @@ ftl_write:
 	ldr	r3, [sp, #12]
 	add	r3, r3, r7
 	str	r3, [sp, #12]
-.L3680:
+.L3683:
 	movs	r3, #0
 	str	r3, [r5, #3812]
-.L3679:
+.L3682:
 	mov	r0, fp
 	ldr	r1, [sp, #20]
 	bl	FtlCacheMetchLpa
-	cbz	r0, .L3682
+	cbz	r0, .L3685
 	bl	FtlCacheWriteBack
-.L3682:
-	ldr	r4, .L3749
+.L3685:
+	ldr	r4, .L3752
 	mov	r6, fp
-	ldr	r7, .L3749+20
+	ldr	r7, .L3752+20
 	mov	r10, r4
 	str	r7, [r5, #3788]
-.L3683:
+.L3686:
 	ldr	r3, [sp, #4]
-	ldr	r5, .L3749+16
+	ldr	r5, .L3752+16
 	cmp	r3, #0
-	beq	.L3748
+	beq	.L3751
 	ldrh	r3, [r7, #4]
-	cbnz	r3, .L3684
+	cbnz	r3, .L3687
 	sub	r2, r5, #200
-	ldr	r9, .L3749+8
+	ldr	r9, .L3752+8
 	cmp	r7, r2
-	bne	.L3685
+	bne	.L3688
 	ldrh	r7, [r5, #-148]
-	cbnz	r7, .L3686
+	cbnz	r7, .L3689
 	sub	r0, r5, #152
 	bl	allocate_new_data_superblock
 	str	r7, [r9, #3292]
-.L3686:
-	ldr	r0, .L3749+20
+.L3689:
+	ldr	r0, .L3752+20
 	bl	allocate_new_data_superblock
 	ldr	r3, [r9, #3292]
-	cbnz	r3, .L3721
+	cbnz	r3, .L3724
+.L3691:
+	ldr	r7, .L3752+20
+	b	.L3690
 .L3688:
-	ldr	r7, .L3749+20
-	b	.L3687
-.L3685:
 	str	r3, [r9, #3292]
 	ldrh	r3, [r5, #-196]
 	cmp	r3, #0
-	bne	.L3688
+	bne	.L3691
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-	b	.L3687
-.L3721:
-	ldr	r7, .L3749+24
-.L3687:
+	b	.L3690
+.L3724:
+	ldr	r7, .L3752+24
+.L3690:
 	ldrh	r3, [r7, #4]
-	cbnz	r3, .L3689
+	cbnz	r3, .L3692
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-.L3689:
-	ldr	r3, .L3749+12
+.L3692:
+	ldr	r3, .L3752+12
 	str	r7, [r3, #3788]
-.L3684:
+.L3687:
 	ldr	r2, [r5, #1760]
 	ldr	r3, [r4, #1924]
 	ldrh	ip, [r7, #4]
 	subs	r3, r2, r3
 	ldr	r2, [sp, #4]
 	cmp	ip, r3
-	ldr	r9, .L3749+16
+	ldr	r9, .L3752+16
 	it	cs
 	movcs	ip, r3
 	cmp	ip, r2
@@ -22771,28 +22801,28 @@ ftl_write:
 	str	r3, [sp, #44]
 	movs	r3, #0
 	str	r3, [sp, #24]
-.L3690:
+.L3693:
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #44]
 	cmp	r3, r2
-	beq	.L3691
+	beq	.L3694
 	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	beq	.L3691
+	beq	.L3694
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3692
+	cbz	r3, .L3695
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L3692
+	bne	.L3695
 	ldr	r3, [sp, #24]
-	cbz	r3, .L3692
+	cbz	r3, .L3695
 	ldr	r3, [sp, #8]
 	ldrh	r2, [r4, #1878]
 	add	r3, r8, r3
 	mls	r3, r2, r6, r3
 	cmp	r3, r2
-	bne	.L3691
-.L3692:
+	bne	.L3694
+.L3695:
 	add	r1, sp, #52
 	movs	r2, #0
 	mov	r0, r6
@@ -22826,10 +22856,10 @@ ftl_write:
 	movs	r1, #0
 	bl	ftl_memset
 	cmp	r6, fp
-	beq	.L3693
+	beq	.L3696
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L3745
+	bne	.L3748
 	ldr	r3, [sp, #8]
 	add	r5, r8, r3
 	ldrh	r3, [r4, #1878]
@@ -22838,8 +22868,8 @@ ftl_write:
 	movs	r3, #0
 	str	r3, [sp, #32]
 	uxth	r5, r5
-	b	.L3696
-.L3693:
+	b	.L3699
+.L3696:
 	ldrh	r5, [r4, #1878]
 	mov	r0, r8
 	mov	r1, r5
@@ -22850,10 +22880,10 @@ ftl_write:
 	cmp	r5, r3
 	it	cs
 	movcs	r5, r3
-.L3696:
+.L3699:
 	ldrh	r3, [r4, #1878]
 	cmp	r5, r3
-	bne	.L3697
+	bne	.L3700
 	cmp	r6, fp
 	mov	lr, #36
 	ittet	ne
@@ -22864,22 +22894,22 @@ ftl_write:
 	it	ne
 	addne	r1, r3, r1, lsl #9
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3699
+	cbz	r3, .L3702
 	ldr	r2, [r10, #1924]
 	ldr	r5, [r10, #1928]
 	mla	r2, lr, r2, r5
 	str	r1, [r2, #8]
-	b	.L3700
-.L3699:
+	b	.L3703
+.L3702:
 	ldr	r0, [r10, #1928]
 	ldr	r3, [r10, #1924]
 	ldrh	r2, [r10, #1882]
 	mla	r3, lr, r3, r0
 	ldr	r0, [r3, #8]
-	b	.L3746
-.L3750:
+	b	.L3749
+.L3753:
 	.align	2
-.L3749:
+.L3752:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1
@@ -22887,11 +22917,11 @@ ftl_write:
 	.word	.LANCHOR2
 	.word	.LANCHOR2-200
 	.word	.LANCHOR2-152
-.L3697:
+.L3700:
 	ldr	r2, [sp, #52]
 	movs	r3, #36
 	adds	r1, r2, #1
-	beq	.L3701
+	beq	.L3704
 	ldr	r1, [r4, #1928]
 	add	r0, sp, #56
 	str	r2, [sp, #60]
@@ -22907,26 +22937,26 @@ ftl_write:
 	bl	FlashReadPages
 	ldr	r3, [sp, #56]
 	adds	r3, r3, #1
-	bne	.L3702
+	bne	.L3705
 	ldr	r3, [r9, #164]
 	adds	r3, r3, #1
 	str	r3, [r9, #164]
-	b	.L3704
-.L3702:
+	b	.L3707
+.L3705:
 	ldr	r3, [sp, #16]
 	ldr	r3, [r3, #8]
 	cmp	r3, r6
-	beq	.L3704
+	beq	.L3707
 	ldr	r3, [r9, #164]
 	mov	r2, r6
-	ldr	r0, .L3751
+	ldr	r0, .L3754
 	adds	r3, r3, #1
 	str	r3, [r9, #164]
 	ldr	r3, [sp, #16]
 	ldr	r1, [r3, #8]
 	bl	printk
-	b	.L3704
-.L3701:
+	b	.L3707
+.L3704:
 	ldr	r1, [r4, #1928]
 	ldr	r2, [r4, #1924]
 	mla	r2, r3, r2, r1
@@ -22934,11 +22964,11 @@ ftl_write:
 	ldr	r0, [r2, #8]
 	ldrh	r2, [r4, #1882]
 	bl	ftl_memset
-.L3704:
+.L3707:
 	cmp	r6, fp
 	mov	lr, #36
 	lsl	r2, r5, #9
-	bne	.L3705
+	bne	.L3708
 	ldr	r1, [r4, #1924]
 	ldr	r5, [r4, #1928]
 	ldr	r3, [sp, #32]
@@ -22946,8 +22976,8 @@ ftl_write:
 	ldr	r0, [r1, #8]
 	ldr	r1, [sp, #12]
 	add	r0, r0, r3, lsl #9
-	b	.L3746
-.L3705:
+	b	.L3749
+.L3708:
 	ldr	r0, [r4, #1928]
 	ldr	r3, [r4, #1924]
 	ldrh	r1, [r4, #1878]
@@ -22957,10 +22987,10 @@ ftl_write:
 	rsb	r1, r8, r1
 	ldr	r3, [sp, #12]
 	add	r1, r3, r1, lsl #9
-	b	.L3746
-.L3745:
+	b	.L3749
+.L3748:
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3706
+	cbz	r3, .L3709
 	ldr	r3, [r4, #1924]
 	ldr	r2, [r4, #1928]
 	mla	r5, r5, r3, r2
@@ -22970,8 +23000,8 @@ ftl_write:
 	rsb	r3, r8, r3
 	add	r3, r2, r3, lsl #9
 	str	r3, [r5, #8]
-	b	.L3700
-.L3706:
+	b	.L3703
+.L3709:
 	ldr	r2, [r4, #1928]
 	ldr	r3, [r4, #1924]
 	ldrh	r1, [r4, #1878]
@@ -22982,9 +23012,9 @@ ftl_write:
 	rsb	r1, r8, r1
 	ldr	r3, [sp, #12]
 	add	r1, r3, r1, lsl #9
-.L3746:
+.L3749:
 	bl	ftl_memcpy
-.L3700:
+.L3703:
 	ldr	r2, [sp, #40]
 	movw	r3, #61589
 	ldr	r1, [sp, #36]
@@ -23011,66 +23041,66 @@ ftl_write:
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
 	str	r3, [sp, #24]
-	b	.L3690
-.L3691:
+	b	.L3693
+.L3694:
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #24]
 	subs	r3, r3, r2
 	str	r3, [sp, #4]
-	ldr	r3, .L3751+4
+	ldr	r3, .L3754+4
 	ldr	r2, [r10, #1924]
 	ldr	r3, [r3, #1760]
 	cmp	r2, r3
-	bcs	.L3710
+	bcs	.L3713
 	ldr	r3, [sp, #28]
-	cbnz	r3, .L3710
+	cbnz	r3, .L3713
 	ldrh	r3, [r7, #4]
-	cbz	r3, .L3710
-.L3712:
+	cbz	r3, .L3713
+.L3715:
 	movs	r3, #0
 	str	r3, [sp, #28]
-	b	.L3683
-.L3710:
+	b	.L3686
+.L3713:
 	bl	FtlCacheWriteBack
 	movs	r3, #0
 	str	r3, [r10, #1924]
 	ldr	r3, [sp, #4]
 	cmp	r3, #1
-	bhi	.L3683
-	b	.L3712
-.L3748:
+	bhi	.L3686
+	b	.L3715
+.L3751:
 	mov	r0, r3
 	ldr	r3, [sp, #20]
 	rsb	r1, fp, r3
 	bl	ftl_do_gc
 	ldrh	r3, [r5, #-204]
 	cmp	r3, #5
-	bls	.L3724
+	bls	.L3727
 	cmp	r3, #31
-	bhi	.L3718
-	ldr	r3, .L3751+8
+	bhi	.L3721
+	ldr	r3, .L3754+8
 	ldrb	r3, [r3]	@ zero_extendqisi2
-	cbnz	r3, .L3718
-.L3724:
+	cbnz	r3, .L3721
+.L3727:
 	ldr	r4, [sp, #4]
 	movw	r7, #65535
-	ldr	r6, .L3751+4
-	ldr	r8, .L3751+8
-.L3737:
+	ldr	r6, .L3754+4
+	ldr	r8, .L3754+8
+.L3740:
 	ldrh	r3, [r5, #40]
 	cmp	r3, r7
-	bne	.L3716
+	bne	.L3719
 	ldrh	r3, [r6, #658]
 	cmp	r3, r7
-	bne	.L3716
+	bne	.L3719
 	ldrh	r3, [r6, #660]
 	cmp	r3, r7
-	bne	.L3716
+	bne	.L3719
 	and	r0, r4, #7
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L3716:
+.L3719:
 	movs	r0, #1
 	movs	r3, #128
 	strh	r3, [r5, #606]	@ movhi
@@ -23081,37 +23111,37 @@ ftl_write:
 	movs	r1, #1
 	bl	ftl_do_gc
 	ldr	r3, [r8, #4052]
-	cbnz	r3, .L3718
+	cbnz	r3, .L3721
 	ldrh	r3, [r6, #-204]
 	cmp	r3, #2
-	bhi	.L3718
+	bhi	.L3721
 	adds	r4, r4, #1
 	cmp	r4, #256
-	bne	.L3737
-	b	.L3718
-.L3720:
+	bne	.L3740
+	b	.L3721
+.L3723:
 	mov	r0, #-1
-	b	.L3676
-.L3718:
+	b	.L3679
+.L3721:
 	movs	r0, #0
-	b	.L3676
-.L3719:
+	b	.L3679
+.L3722:
 	mov	r0, r3
-.L3676:
-	ldr	r3, .L3751+12
+.L3679:
+	ldr	r3, .L3754+12
 	ldr	r2, [sp, #92]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3717
+	beq	.L3720
 	bl	__stack_chk_fail
-.L3717:
+.L3720:
 	add	sp, sp, #100
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3752:
+.L3755:
 	.align	2
-.L3751:
-	.word	.LC160
+.L3754:
+	.word	.LC161
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
@@ -23153,25 +23183,25 @@ FlashBootVendorWrite:
 	mov	r5, r1
 	mov	r4, r2
 	bl	rknand_device_lock
-	ldr	r3, .L3757
+	ldr	r3, .L3760
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
-	bne	.L3756
+	bne	.L3759
 	mov	r2, r4
 	mov	r0, r6
 	mov	r1, r5
 	bl	ftl_vendor_write
 	mov	r4, r0
-	b	.L3755
-.L3756:
+	b	.L3758
+.L3759:
 	mov	r4, #-1
-.L3755:
+.L3758:
 	bl	rknand_device_unlock
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L3758:
+.L3761:
 	.align	2
-.L3757:
+.L3760:
 	.word	.LANCHOR1
 	.fnend
 	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
@@ -23231,10 +23261,10 @@ FtlDumpSysBlock:
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	lsl	r8, r0, #10
-	ldr	r4, .L3769
+	ldr	r4, .L3772
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L3769+4
+	ldr	r7, .L3772+4
 	movs	r5, #0
 	mov	r6, r0
 	ldr	r3, [r4, #1776]
@@ -23242,19 +23272,19 @@ FtlDumpSysBlock:
 	str	r3, [r4, #4060]
 	ldr	r3, [r4, #1800]
 	str	r3, [r4, #4064]
-.L3762:
+.L3765:
 	ldrh	r2, [r7, #1874]
 	sxth	r3, r5
 	cmp	r3, r2
-	bge	.L3768
+	bge	.L3771
 	movs	r1, #1
-	ldr	r0, .L3769+8
+	ldr	r0, .L3772+8
 	orr	r3, r3, r8
 	str	r3, [r4, #4056]
 	mov	r2, r1
 	bl	FlashReadPages
 	ldr	r3, [r4, #4064]
-	ldr	r0, .L3769+12
+	ldr	r0, .L3772+12
 	mov	r1, r6
 	ldr	r2, [r3]
 	str	r2, [sp]
@@ -23273,27 +23303,27 @@ FtlDumpSysBlock:
 	ldr	r3, [r4, #4064]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L3763
-	ldr	r0, .L3769+16
+	beq	.L3766
+	ldr	r0, .L3772+16
 	movs	r2, #4
 	ldr	r1, [r9, #1776]
 	mov	r3, #768
 	bl	rknand_print_hex
-.L3763:
+.L3766:
 	adds	r5, r5, #1
-	b	.L3762
-.L3768:
+	b	.L3765
+.L3771:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L3770:
+.L3773:
 	.align	2
-.L3769:
+.L3772:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR2+4052
-	.word	.LC161
 	.word	.LC162
+	.word	.LC163
 	.fnend
 	.size	FtlDumpSysBlock, .-FtlDumpSysBlock
 	.align	1
@@ -23309,15 +23339,15 @@ dump_map_info:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r5, .L3789
+	ldr	r5, .L3792
 	add	fp, r5, #1832
 	ldrh	r7, [r5, #1812]
 	mov	r9, r5
-.L3772:
+.L3775:
 	ldrh	r3, [r5, #1814]
-	ldr	r4, .L3789+4
+	ldr	r4, .L3792+4
 	cmp	r3, r7
-	bls	.L3786
+	bls	.L3789
 	ldr	r1, [r4, #632]
 	mov	r8, #0
 	ldrh	ip, [r9, #1804]
@@ -23328,10 +23358,10 @@ dump_map_info:
 	ldr	r3, [r4, #628]
 	ldrh	r1, [r9, #1884]
 	str	r1, [sp, #28]
-.L3782:
+.L3785:
 	uxth	r1, r8
 	cmp	r1, ip
-	bcs	.L3787
+	bcs	.L3790
 	mov	r1, r7
 	ldrb	r0, [fp, r8]	@ zero_extendqisi2
 	str	r3, [sp, #44]
@@ -23344,7 +23374,7 @@ dump_map_info:
 	ldr	ip, [sp, #36]
 	ldr	r2, [sp, #40]
 	ldr	r3, [sp, #44]
-	cbnz	r0, .L3773
+	cbnz	r0, .L3776
 	mla	r0, r10, r6, r2
 	lsls	r1, r1, #10
 	str	r1, [r0, #4]
@@ -23359,23 +23389,23 @@ dump_map_info:
 	str	r3, [r0, #8]
 	add	r1, r1, lr
 	str	r1, [r0, #12]
-.L3773:
+.L3776:
 	add	r8, r8, #1
-	b	.L3782
-.L3787:
-	cbz	r6, .L3777
+	b	.L3785
+.L3790:
+	cbz	r6, .L3780
 	ldr	r0, [r4, #1764]
 	mov	r1, r6
 	movs	r2, #1
 	mov	r8, #0
 	bl	FlashReadPages
 	mov	r10, #36
-.L3778:
+.L3781:
 	uxth	r3, r8
 	cmp	r3, r6
-	bcs	.L3777
+	bcs	.L3780
 	ldr	r3, [r4, #1764]
-	ldr	r0, .L3789+8
+	ldr	r0, .L3792+8
 	mla	r3, r10, r8, r3
 	add	r8, r8, #1
 	adds	r2, r3, #4
@@ -23393,30 +23423,30 @@ dump_map_info:
 	str	r3, [sp, #16]
 	ldr	r3, [lr]
 	bl	printk
-	b	.L3778
-.L3777:
+	b	.L3781
+.L3780:
 	adds	r7, r7, #1
 	uxth	r7, r7
-	b	.L3772
-.L3786:
+	b	.L3775
+.L3789:
 	mov	r8, #0
-.L3781:
+.L3784:
 	ldrh	r3, [r4, #1912]
 	sxth	r6, r8
-	ldr	r7, .L3789+4
+	ldr	r7, .L3792+4
 	cmp	r6, r3
-	bge	.L3784
+	bge	.L3787
 	lsls	r6, r6, #1
 	movs	r7, #0
-.L3785:
+.L3788:
 	ldrh	r2, [r5, #1874]
 	sxth	r3, r7
 	adds	r7, r7, #1
 	cmp	r3, r2
-	bge	.L3788
+	bge	.L3791
 	ldr	r2, [r4, #1828]
 	movs	r1, #1
-	ldr	r0, .L3789+12
+	ldr	r0, .L3792+12
 	ldrh	r2, [r2, r6]
 	orr	r3, r3, r2, lsl #10
 	mov	r2, r1
@@ -23433,7 +23463,7 @@ dump_map_info:
 	ldr	r0, [r3, #8]
 	str	r0, [sp, #8]
 	ldr	r3, [r3, #12]
-	ldr	r0, .L3789+16
+	ldr	r0, .L3792+16
 	str	r3, [sp, #12]
 	ldr	r3, [r2]
 	str	r3, [sp, #16]
@@ -23442,22 +23472,22 @@ dump_map_info:
 	str	r3, [sp, #20]
 	ldr	r3, [r4, #4056]
 	bl	printk
-	b	.L3785
-.L3788:
+	b	.L3788
+.L3791:
 	add	r8, r8, #1
-	b	.L3781
-.L3784:
+	b	.L3784
+.L3787:
 	ldr	r1, [r7, #1828]
 	movs	r2, #2
 	ldr	r3, [r5, #1900]
-	ldr	r0, .L3789+20
+	ldr	r0, .L3792+20
 	bl	rknand_print_hex
 	ldr	r1, [r7, #1848]
 	ldrh	r3, [r5, #1908]
 	movs	r2, #4
-	ldr	r0, .L3789+24
+	ldr	r0, .L3792+24
 	bl	rknand_print_hex
-	ldr	r0, .L3789+28
+	ldr	r0, .L3792+28
 	ldr	r1, [r7, #1852]
 	movs	r2, #4
 	ldrh	r3, [r5, #1908]
@@ -23465,17 +23495,17 @@ dump_map_info:
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	rknand_print_hex
-.L3790:
+.L3793:
 	.align	2
-.L3789:
+.L3792:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC163
-	.word	.LANCHOR2+4052
-	.word	.LC110
 	.word	.LC164
+	.word	.LANCHOR2+4052
+	.word	.LC111
 	.word	.LC165
 	.word	.LC166
+	.word	.LC167
 	.fnend
 	.size	dump_map_info, .-dump_map_info
 	.align	1
@@ -23488,17 +23518,17 @@ flash_boot_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3793
+	ldr	r3, .L3796
 	ldr	r2, [r3, #1744]
-	ldr	r3, .L3793+4
+	ldr	r3, .L3796+4
 	cmp	r2, r3
-	bne	.L3791
+	bne	.L3794
 	b	flash_enter_slc_mode
-.L3791:
-	bx	lr
 .L3794:
+	bx	lr
+.L3797:
 	.align	2
-.L3793:
+.L3796:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -23513,17 +23543,17 @@ flash_boot_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3797
+	ldr	r3, .L3800
 	ldr	r2, [r3, #1744]
-	ldr	r3, .L3797+4
+	ldr	r3, .L3800+4
 	cmp	r2, r3
-	bne	.L3795
+	bne	.L3798
 	b	flash_exit_slc_mode
-.L3795:
-	bx	lr
 .L3798:
+	bx	lr
+.L3801:
 	.align	2
-.L3797:
+.L3800:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -23539,13 +23569,13 @@ IdBlockReadData:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r4, .L3807
+	ldr	r4, .L3810
 	mov	r8, r1
 	.pad #20
 	sub	sp, sp, #20
 	mov	r1, r6
 	mov	fp, r2
-	ldr	r0, .L3807+4
+	ldr	r0, .L3810+4
 	ldr	r3, [r4, #692]
 	mov	r2, r8
 	movs	r7, #0
@@ -23562,9 +23592,9 @@ IdBlockReadData:
 	subs	r3, r6, r1
 	str	r3, [sp]
 	ubfx	ip, ip, #2, #2
-.L3800:
+.L3803:
 	cmp	r7, r8
-	bcs	.L3806
+	bcs	.L3809
 	add	r2, r7, r10
 	ldrb	r1, [r4, #140]	@ zero_extendqisi2
 	ubfx	r2, r2, #2, #16
@@ -23572,14 +23602,14 @@ IdBlockReadData:
 	add	r3, r4, r2, lsl #1
 	uxth	r5, r5
 	ldrh	r3, [r3, #144]
-	cbz	r1, .L3801
-	ldr	r1, .L3807
-	ldr	r0, .L3807+8
+	cbz	r1, .L3804
+	ldr	r1, .L3810
+	ldr	r0, .L3810+8
 	ldr	r1, [r1, #1744]
 	cmp	r1, r0
 	it	eq
 	moveq	r3, r2
-.L3801:
+.L3804:
 	ldr	r2, [sp]
 	add	r7, r7, r5
 	add	r2, ip, r2
@@ -23590,7 +23620,7 @@ IdBlockReadData:
 	str	ip, [sp, #4]
 	ldrb	r1, [r2, #9]	@ zero_extendqisi2
 	str	r3, [sp, #12]
-	ldr	r3, .L3807+12
+	ldr	r3, .L3810+12
 	str	r1, [sp, #8]
 	ldrb	r0, [r3, #4014]	@ zero_extendqisi2
 	bl	FlashBchSel
@@ -23612,25 +23642,25 @@ IdBlockReadData:
 	mov	r0, ip
 	bl	FlashBchSel
 	mov	ip, #0
-	b	.L3800
-.L3806:
+	b	.L3803
+.L3809:
 	mov	r1, r6
 	mov	r2, r8
 	movs	r3, #0
-	ldr	r0, .L3807+16
+	ldr	r0, .L3810+16
 	bl	printk
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3808:
+.L3811:
 	.align	2
-.L3807:
+.L3810:
 	.word	.LANCHOR0
-	.word	.LC167
+	.word	.LC168
 	.word	1446522928
 	.word	.LANCHOR2
-	.word	.LC168
+	.word	.LC169
 	.fnend
 	.size	IdBlockReadData, .-IdBlockReadData
 	.align	1
@@ -23642,14 +23672,14 @@ write_idblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 120
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3852
+	ldr	r3, .L3855
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #132
 	sub	sp, sp, #132
 	ldr	r3, [r3]
 	mov	r4, r0
-	ldr	r7, .L3852+4
+	ldr	r7, .L3855+4
 	mov	r0, #256000
 	mov	r6, r1
 	mov	r5, r2
@@ -23660,21 +23690,21 @@ write_idblock:
 	bl	ftl_malloc
 	str	r0, [sp, #8]
 	cmp	r0, #0
-	beq	.L3834
+	beq	.L3837
 	addw	r4, r4, #511
 	lsrs	r4, r4, #9
 	cmp	r4, #8
-	bls	.L3832
+	bls	.L3835
 	cmp	r4, #500
-	bhi	.L3834
-	b	.L3811
-.L3832:
+	bhi	.L3837
+	b	.L3814
+.L3835:
 	movs	r4, #8
-.L3811:
+.L3814:
 	ldr	r2, [r6]
-	ldr	r3, .L3852+8
+	ldr	r3, .L3855+8
 	cmp	r2, r3
-	bne	.L3834
+	bne	.L3837
 	smulbb	r3, r10, r8
 	uxth	r9, r3
 	add	r0, r9, #-1
@@ -23686,9 +23716,9 @@ write_idblock:
 	str	r0, [sp, #28]
 	add	r0, r6, #254976
 	add	r0, r0, #512
-.L3815:
+.L3818:
 	ldr	r1, [r0, #-4]!
-	cbnz	r1, .L3812
+	cbnz	r1, .L3815
 	ldr	r1, [r6, r3, lsl #2]
 	adds	r3, r3, #1
 	cmp	r3, #4096
@@ -23697,32 +23727,32 @@ write_idblock:
 	movhi	r3, #0
 	cmp	r2, #4096
 	str	r1, [r0, #512]
-	bne	.L3815
-	b	.L3814
-.L3812:
-	ldr	r0, .L3852+12
+	bne	.L3818
+	b	.L3817
+.L3815:
+	ldr	r0, .L3855+12
 	bl	printk
-.L3814:
+.L3817:
 	mov	r1, r5
 	movs	r3, #5
-	ldr	r0, .L3852+16
+	ldr	r0, .L3855+16
 	movs	r2, #4
 	bl	rknand_print_hex
 	ldrb	r2, [r7, #1]	@ zero_extendqisi2
 	ldr	r1, [r6, #512]
 	subs	r5, r5, #4
-	ldr	r0, .L3852+20
+	ldr	r0, .L3855+20
 	bl	printk
-	ldr	r2, .L3852+24
+	ldr	r2, .L3855+24
 	ldrh	r3, [r7, #138]
 	mov	r1, r4
-	ldr	r0, .L3852+28
+	ldr	r0, .L3855+28
 	ldr	r2, [r2, #4008]
 	str	r2, [sp]
 	mov	r2, r4
 	bl	printk
 	ldrb	r3, [r7, #1]	@ zero_extendqisi2
-	ldr	r7, .L3852+4
+	ldr	r7, .L3855+4
 	ldr	r2, [r6, #512]
 	cmp	r2, r3
 	it	hi
@@ -23732,32 +23762,32 @@ write_idblock:
 	movs	r3, #0
 	str	r3, [sp, #16]
 	str	r3, [sp, #12]
-.L3829:
+.L3832:
 	ldr	r2, [r5, #4]
 	ldrb	r3, [r7, #1]	@ zero_extendqisi2
-	ldr	r10, .L3852+4
+	ldr	r10, .L3855+4
 	cmp	r2, r3
-	bcs	.L3817
-	ldr	r3, .L3852+24
+	bcs	.L3820
+	ldr	r3, .L3855+24
 	ldr	r3, [r3, #4008]
 	cmp	r2, r3
-	bcc	.L3817
+	bcc	.L3820
 	ldr	r3, [sp, #28]
 	cmp	r3, #1
-	bls	.L3818
+	bls	.L3821
 	ldr	r3, [sp, #12]
-	cbz	r3, .L3818
+	cbz	r3, .L3821
 	ldr	r3, [r5]
 	adds	r3, r3, #1
 	cmp	r2, r3
-	beq	.L3817
-.L3818:
+	beq	.L3820
+.L3821:
 	movs	r1, #0
 	mov	r2, #512
 	ldr	r0, [sp, #8]
 	bl	memset
 	ldr	r3, [r5, #4]
-	ldr	r0, .L3852+32
+	ldr	r0, .L3855+32
 	mul	r8, r3, r9
 	ldr	r3, [r10, #692]
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
@@ -23779,16 +23809,16 @@ write_idblock:
 	mov	r2, r0
 	bl	FlashEraseBlock
 	cmp	r4, r10
-	bls	.L3835
+	bls	.L3838
 	movs	r0, #0
 	add	r1, r8, r10
 	mov	fp, #2
 	mov	r2, r0
 	bl	FlashEraseBlock
-	b	.L3819
-.L3835:
+	b	.L3822
+.L3838:
 	mov	fp, #1
-.L3819:
+.L3822:
 	movs	r0, #0
 	bl	flash_boot_exit_slc_mode
 	ldr	r3, [r7, #692]
@@ -23806,57 +23836,57 @@ write_idblock:
 	rsb	r3, r1, r8
 	str	r6, [sp, #24]
 	str	r3, [sp, #36]
-.L3820:
+.L3823:
 	ldr	r3, [sp, #44]
 	cmp	r10, r3
-	bcs	.L3851
+	bcs	.L3854
 	add	r2, r10, ip
 	ubfx	r2, r2, #2, #16
-	cbz	r2, .L3821
+	cbz	r2, .L3824
 	adds	r3, r2, #1
 	add	r1, r7, r3, lsl #1
 	ldrh	fp, [r1, #144]
 	ldrb	r1, [r7, #140]	@ zero_extendqisi2
-	cbz	r1, .L3822
+	cbz	r1, .L3825
 	ldr	r1, [r7, #1744]
-	ldr	r0, .L3852+36
+	ldr	r0, .L3855+36
 	cmp	r1, r0
 	it	eq
 	moveq	fp, r3
-.L3822:
+.L3825:
 	add	fp, fp, #1073741824
 	add	fp, fp, #-1
 	lsl	r3, fp, #2
 	str	r3, [sp, #60]
-.L3821:
+.L3824:
 	movw	r3, #61424
 	str	r3, [sp, #64]
 	add	r3, r7, r2, lsl #1
 	ldrh	fp, [r3, #144]
 	ldrb	r3, [r7, #140]	@ zero_extendqisi2
-	cbz	r3, .L3823
+	cbz	r3, .L3826
 	ldr	r3, [r7, #1744]
-	ldr	r1, .L3852+36
+	ldr	r1, .L3855+36
 	cmp	r3, r1
 	it	eq
 	moveq	fp, r2
-.L3823:
+.L3826:
 	ldr	r3, [sp, #20]
 	add	r10, r10, #4
 	ldr	r2, [sp, #36]
 	str	ip, [sp, #52]
 	uxth	r10, r10
 	mla	r2, r3, fp, r2
-	ldr	r3, .L3852+4
+	ldr	r3, .L3855+4
 	ldrb	r3, [r3, #1792]	@ zero_extendqisi2
 	str	r2, [sp, #48]
 	str	r3, [sp, #40]
-	ldr	r3, .L3852+24
+	ldr	r3, .L3855+24
 	ldrb	r0, [r3, #4014]	@ zero_extendqisi2
 	bl	FlashBchSel
 	movs	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r3, .L3852+4
+	ldr	r3, .L3855+4
 	ldr	r3, [r3, #692]
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
 	ldr	r2, [sp, #48]
@@ -23883,25 +23913,25 @@ write_idblock:
 	ldr	ip, [sp, #52]
 	add	r3, r3, #2048
 	str	r3, [sp, #24]
-	b	.L3820
-.L3853:
+	b	.L3823
+.L3856:
 	.align	2
-.L3852:
+.L3855:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	-52655045
-	.word	.LC169
 	.word	.LC170
 	.word	.LC171
-	.word	.LANCHOR2
 	.word	.LC172
+	.word	.LANCHOR2
 	.word	.LC173
+	.word	.LC174
 	.word	1446522928
-.L3851:
+.L3854:
 	mov	r1, r8
 	movs	r3, #0
 	mov	r2, r4
-	ldr	r0, .L3854
+	ldr	r0, .L3857
 	bl	printk
 	ldr	r0, [r5, #4]
 	mov	r1, r4
@@ -23911,7 +23941,7 @@ write_idblock:
 	bl	IdBlockReadData
 	mov	r3, r6
 	ldr	r0, [sp, #8]
-.L3828:
+.L3831:
 	mov	fp, r0
 	mov	r10, r3
 	ldr	r1, [fp]
@@ -23919,13 +23949,13 @@ write_idblock:
 	ldr	r2, [r10]
 	adds	r3, r3, #4
 	cmp	r1, r2
-	beq	.L3825
+	beq	.L3828
 	movs	r1, #0
 	mov	r2, #512
 	ldr	r0, [sp, #8]
 	bl	memset
 	ldr	r3, [fp]
-	ldr	r0, .L3854+4
+	ldr	r0, .L3857+4
 	str	r3, [sp]
 	ldr	r3, [r10]
 	bic	r10, r8, #255
@@ -23935,13 +23965,13 @@ write_idblock:
 	mov	r3, r8
 	ldr	r2, [r5, #4]
 	bl	printk
-	ldr	r0, .L3854+8
+	ldr	r0, .L3857+8
 	add	r1, r6, r10
 	movs	r2, #4
 	mov	r3, #256
 	bl	rknand_print_hex
 	movs	r2, #4
-	ldr	r0, .L3854+12
+	ldr	r0, .L3857+12
 	ldr	r3, [sp, #8]
 	add	r1, r3, r10
 	mov	r3, #256
@@ -23955,66 +23985,66 @@ write_idblock:
 	bl	FlashEraseBlock
 	ldr	r3, [sp, #28]
 	cmp	r3, #1
-	bls	.L3826
+	bls	.L3829
 	ldr	r1, [r5, #4]
 	movs	r0, #0
 	mov	r2, r0
 	mla	r1, r1, r9, r9
 	bl	FlashEraseBlock
-.L3826:
+.L3829:
 	movs	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	r0, .L3854+16
+	ldr	r0, .L3857+16
 	ldr	r1, [r5, #4]
 	bl	printk
 	ldr	r3, [sp, #32]
 	cmp	r8, r3
-	bcc	.L3817
-	b	.L3827
-.L3825:
+	bcc	.L3820
+	b	.L3830
+.L3828:
 	ldr	r2, [sp, #32]
 	add	r8, r8, #1
 	cmp	r8, r2
-	bne	.L3828
-.L3827:
+	bne	.L3831
+.L3830:
 	ldr	r3, [sp, #16]
 	adds	r3, r3, #1
 	str	r3, [sp, #16]
-.L3817:
+.L3820:
 	ldr	r3, [sp, #12]
 	adds	r5, r5, #4
 	adds	r3, r3, #1
 	str	r3, [sp, #12]
 	cmp	r3, #5
-	bne	.L3829
+	bne	.L3832
 	ldr	r0, [sp, #8]
 	bl	ftl_free
 	ldr	r3, [sp, #16]
 	clz	r0, r3
 	lsrs	r0, r0, #5
 	negs	r0, r0
-	b	.L3810
-.L3834:
+	b	.L3813
+.L3837:
 	mov	r0, #-1
-.L3810:
-	ldr	r3, .L3854+20
+.L3813:
+	ldr	r3, .L3857+20
 	ldr	r2, [sp, #124]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L3830
+	beq	.L3833
 	bl	__stack_chk_fail
-.L3830:
+.L3833:
 	add	sp, sp, #132
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3855:
+.L3858:
 	.align	2
-.L3854:
-	.word	.LC174
+.L3857:
 	.word	.LC175
 	.word	.LC176
 	.word	.LC177
 	.word	.LC178
+	.word	.LC179
 	.word	__stack_chk_guard
 	.fnend
 	.size	write_idblock, .-write_idblock
@@ -24030,23 +24060,23 @@ CRC_32:
 	push	{r4, lr}
 	.save {r4, lr}
 	add	r1, r1, r0
-	ldr	r4, .L3860
+	ldr	r4, .L3863
 	movs	r2, #0
-.L3857:
+.L3860:
 	cmp	r0, r1
-	beq	.L3859
+	beq	.L3862
 	ldrb	r3, [r0], #1	@ zero_extendqisi2
 	eor	r3, r3, r2, lsr #24
 	add	r3, r4, r3, lsl #2
 	ldr	r3, [r3, #3296]
 	eor	r2, r3, r2, lsl #8
-	b	.L3857
-.L3859:
+	b	.L3860
+.L3862:
 	mov	r0, r2
 	pop	{r4, pc}
-.L3861:
+.L3864:
 	.align	2
-.L3860:
+.L3863:
 	.word	.LANCHOR1
 	.fnend
 	.size	CRC_32, .-CRC_32
@@ -24062,20 +24092,20 @@ write_loader_lba:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	cmp	r0, #64
-	ldr	r6, .L3885
+	ldr	r6, .L3888
 	.pad #56
 	sub	sp, sp, #56
 	mov	r5, r0
 	mov	r7, r1
 	mov	r9, r2
-	ldr	r4, .L3885+4
+	ldr	r4, .L3888+4
 	ldr	r3, [r6]
 	str	r3, [sp, #52]
-	bne	.L3863
+	bne	.L3866
 	ldr	r2, [r2]
-	ldr	r3, .L3885+8
+	ldr	r3, .L3888+8
 	cmp	r2, r3
-	bne	.L3863
+	bne	.L3866
 	mov	r0, #256000
 	movs	r3, #1
 	strb	r3, [r4, #3816]
@@ -24085,21 +24115,21 @@ write_loader_lba:
 	str	r0, [r4, #3820]
 	bl	ftl_memset
 	str	r5, [r4, #3824]
-.L3863:
+.L3866:
 	str	r7, [sp]
 	mov	r3, r5
-	ldr	r0, .L3885+12
+	ldr	r0, .L3888+12
 	ldr	r1, [r4, #3820]
 	ldr	r2, [r9]
 	bl	printk
 	ldrb	r3, [r4, #3816]	@ zero_extendqisi2
-	ldr	r10, .L3885+4
+	ldr	r10, .L3888+4
 	cmp	r3, #0
-	beq	.L3862
+	beq	.L3865
 	sub	r0, r5, #64
 	ldr	r8, [r10, #3820]
 	cmp	r0, #500
-	bcs	.L3865
+	bcs	.L3868
 	rsb	r2, r5, #564
 	add	r0, r8, r0, lsl #9
 	cmp	r2, r7
@@ -24108,30 +24138,30 @@ write_loader_lba:
 	movcs	r2, r7
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-	b	.L3866
-.L3865:
+	b	.L3869
+.L3868:
 	cmp	r5, #564
-	bcs	.L3874
-.L3866:
+	bcs	.L3877
+.L3869:
 	ldr	r3, [r4, #3824]
 	cmp	r3, r5
-	beq	.L3872
-	ldr	r2, .L3885+4
+	beq	.L3875
+	ldr	r2, .L3888+4
 	movs	r3, #0
 	mov	r9, r3
 	strb	r3, [r2, #3816]
 	cmp	r8, #0
-	beq	.L3873
+	beq	.L3876
 	mov	r0, r8
 	bl	ftl_free
-.L3873:
+.L3876:
 	str	r9, [r4, #3820]
-.L3872:
+.L3875:
 	add	r5, r5, r7
 	str	r5, [r4, #3824]
-	b	.L3862
-.L3874:
-	ldr	r3, .L3885+16
+	b	.L3865
+.L3877:
+	ldr	r3, .L3888+16
 	ldr	r0, [r10, #3824]
 	ldr	r3, [r3, #692]
 	subs	r0, r0, #64
@@ -24140,7 +24170,7 @@ write_loader_lba:
 	movcs	r0, #500
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	cmp	r3, #4
-	beq	.L3876
+	beq	.L3879
 	movs	r3, #2
 	str	r3, [sp, #12]
 	movs	r3, #3
@@ -24151,10 +24181,10 @@ write_loader_lba:
 	str	r3, [sp, #24]
 	movs	r3, #6
 	str	r3, [sp, #28]
-	b	.L3868
-.L3876:
+	b	.L3871
+.L3879:
 	movs	r3, #0
-.L3867:
+.L3870:
 	add	r1, sp, #12
 	lsls	r2, r3, #1
 	cmp	r0, #256
@@ -24163,21 +24193,21 @@ write_loader_lba:
 	str	r2, [r1, r3, lsl #2]
 	adds	r3, r3, #1
 	cmp	r3, #5
-	bne	.L3867
-.L3868:
-	movw	r3, #63872
+	bne	.L3870
 .L3871:
+	movw	r3, #63872
+.L3874:
 	ldr	r2, [r8, r3, lsl #2]
-	cbz	r2, .L3869
+	cbz	r2, .L3872
 	adds	r3, r3, #128
 	lsls	r0, r3, #2
-	b	.L3870
-.L3869:
+	b	.L3873
+.L3872:
 	subs	r3, r3, #1
 	cmp	r3, #4096
-	bne	.L3871
+	bne	.L3874
 	lsls	r0, r0, #9
-.L3870:
+.L3873:
 	mov	r1, r8
 	add	r2, sp, #12
 	bl	write_idblock
@@ -24186,24 +24216,24 @@ write_loader_lba:
 	strb	r8, [r4, #3816]
 	bl	ftl_free
 	str	r8, [r4, #3820]
-	b	.L3872
-.L3862:
+	b	.L3875
+.L3865:
 	ldr	r2, [sp, #52]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L3875
+	beq	.L3878
 	bl	__stack_chk_fail
-.L3875:
+.L3878:
 	add	sp, sp, #56
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3886:
+.L3889:
 	.align	2
-.L3885:
+.L3888:
 	.word	__stack_chk_guard
 	.word	.LANCHOR5
 	.word	-52655045
-	.word	.LC179
+	.word	.LC180
 	.word	.LANCHOR0
 	.fnend
 	.size	write_loader_lba, .-write_loader_lba
@@ -24224,13 +24254,13 @@ FtlWrite:
 	cmp	r3, #1984
 	mov	r4, r1
 	mov	r6, r2
-	bcs	.L3888
-	cbnz	r0, .L3888
+	bcs	.L3891
+	cbnz	r0, .L3891
 	mov	r0, r1
 	mov	r1, r2
 	mov	r2, r5
 	bl	write_loader_lba
-.L3888:
+.L3891:
 	mov	r0, r7
 	mov	r1, r4
 	mov	r2, r6
@@ -24252,114 +24282,114 @@ rknand_sys_storage_ioctl:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #528
 	sub	sp, sp, #528
-	ldr	r5, .L3998
+	ldr	r5, .L4001
 	mov	r4, r1
 	mov	r6, r2
 	ldr	r3, [r5]
 	str	r3, [sp, #524]
-	ldr	r3, .L3998+4
+	ldr	r3, .L4001+4
 	cmp	r1, r3
-	beq	.L3891
-	bhi	.L3892
+	beq	.L3894
+	bhi	.L3895
 	subw	r3, r3, #3461
 	cmp	r1, r3
-	beq	.L3893
-	bhi	.L3894
+	beq	.L3896
+	bhi	.L3897
 	subs	r3, r3, #125
 	cmp	r1, r3
-	beq	.L3895
-	bhi	.L3896
+	beq	.L3898
+	bhi	.L3899
 	subs	r3, r3, #237
 	cmp	r1, r3
-	bne	.L3953
+	bne	.L3956
 	bl	rknand_dev_flush
-	b	.L3986
-.L3896:
-	ldr	r3, .L3998+8
+	b	.L3989
+.L3899:
+	ldr	r3, .L4001+8
 	cmp	r1, r3
-	beq	.L3898
+	beq	.L3901
 	adds	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3899
-	b	.L3953
-.L3894:
-	ldr	r3, .L3998+12
+	beq	.L3902
+	b	.L3956
+.L3897:
+	ldr	r3, .L4001+12
 	cmp	r1, r3
-	beq	.L3900
-	bhi	.L3901
+	beq	.L3903
+	bhi	.L3904
 	mvn	r1, #1960
 	add	r3, r3, r1
 	cmp	r4, r3
-	beq	.L3902
-	b	.L3953
-.L3901:
-	ldr	r3, .L3998+16
+	beq	.L3905
+	b	.L3956
+.L3904:
+	ldr	r3, .L4001+16
 	cmp	r1, r3
-	beq	.L3900
+	beq	.L3903
 	adds	r3, r3, #10
 	cmp	r1, r3
-	beq	.L3900
-	b	.L3953
-.L3892:
-	ldr	r3, .L3998+20
-	cmp	r1, r3
 	beq	.L3903
-	bhi	.L3904
+	b	.L3956
+.L3895:
+	ldr	r3, .L4001+20
+	cmp	r1, r3
+	beq	.L3906
+	bhi	.L3907
 	subs	r3, r3, #78
 	cmp	r1, r3
-	beq	.L3905
-	bcc	.L3906
+	beq	.L3908
+	bcc	.L3909
 	adds	r3, r3, #21
 	cmp	r1, r3
-	beq	.L3907
+	beq	.L3910
 	adds	r3, r3, #56
 	cmp	r1, r3
-	beq	.L3908
-	b	.L3953
-.L3904:
-	ldr	r3, .L3998+24
+	beq	.L3911
+	b	.L3956
+.L3907:
+	ldr	r3, .L4001+24
 	cmp	r1, r3
 	mov	r7, r3
-	beq	.L3909
-	bhi	.L3910
+	beq	.L3912
+	bhi	.L3913
 	mvn	r2, #956
 	add	r3, r3, r2
 	cmp	r1, r3
-	beq	.L3911
+	beq	.L3914
 	add	r3, r3, #956
 	cmp	r1, r3
-	beq	.L3912
-	b	.L3953
-.L3910:
-	ldr	r3, .L3998+28
+	beq	.L3915
+	b	.L3956
+.L3913:
+	ldr	r3, .L4001+28
 	cmp	r1, r3
-	beq	.L3912
+	beq	.L3915
 	adds	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3909
-	b	.L3953
-.L3906:
-	ldr	r0, .L3998+32
+	beq	.L3912
+	b	.L3956
+.L3909:
+	ldr	r0, .L4001+32
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r4, r0
-	cbnz	r0, .L3913
-.L3918:
+	cbnz	r0, .L3916
+.L3921:
 	mvn	r0, #11
-	b	.L3890
-.L3913:
+	b	.L3893
+.L3916:
 	mov	r1, r6
 	mov	r2, #512
 	bl	rk_copy_from_user
-	cbnz	r0, .L3992
-	ldr	r0, .L3998+36
+	cbnz	r0, .L3995
+	ldr	r0, .L4001+36
 	ldmia	r4, {r1, r2}
 	bl	printk
 	ldr	r3, [r4, #4]
 	cmp	r3, #8
 	str	r3, [sp]
-	bhi	.L3990
+	bhi	.L3993
 	bl	rknand_device_lock
 	mov	r2, r4
 	ldr	r0, [r4]
@@ -24372,99 +24402,99 @@ rknand_sys_storage_ioctl:
 	lsls	r2, r2, #9
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L3985
-	ldr	r0, .L3998+40
-.L3988:
+	beq	.L3988
+	ldr	r0, .L4001+40
+.L3991:
 	bl	printk
-.L3990:
+.L3993:
 	mov	r0, r4
-.L3991:
+.L3994:
 	bl	ftl_free
-.L3989:
+.L3992:
 	mvn	r0, #13
-	b	.L3890
-.L3905:
-	ldr	r0, .L3998+44
+	b	.L3893
+.L3908:
+	ldr	r0, .L4001+44
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L3918
+	beq	.L3921
 	mov	r1, r6
 	mov	r2, #4096
 	bl	rk_copy_from_user
-	cbz	r0, .L3919
-.L3992:
-	ldr	r0, .L3998+48
-	b	.L3988
-.L3919:
-	ldr	r6, .L3998+52
-	ldr	r0, .L3998+56
+	cbz	r0, .L3922
+.L3995:
+	ldr	r0, .L4001+48
+	b	.L3991
+.L3922:
+	ldr	r6, .L4001+52
+	ldr	r0, .L4001+56
 	ldmia	r4, {r1, r2}
 	bl	printk
 	ldr	r7, [r6, #3828]
 	mov	r8, r6
-	cbnz	r7, .L3920
+	cbnz	r7, .L3923
 	mov	r0, #260096
 	bl	ftl_malloc
 	str	r0, [r6, #3828]
 	cmp	r0, #0
-	beq	.L3990
+	beq	.L3993
 	mov	r1, r7
 	mov	r2, #260096
 	bl	memset
-.L3920:
+.L3923:
 	ldr	r2, [r4, #4]
 	movw	r3, #4088
 	cmp	r2, r3
-	bhi	.L3990
+	bhi	.L3993
 	ldr	r3, [r4]
 	cmp	r3, #251904
-	bhi	.L3990
+	bhi	.L3993
 	ldr	r0, [r8, #3828]
 	add	r1, r4, #8
 	add	r0, r0, r3
 	bl	memcpy
-.L3985:
+.L3988:
 	mov	r0, r4
 	bl	ftl_free
-.L3986:
+.L3989:
 	movs	r4, #0
-	b	.L3917
-.L3908:
-	ldr	r0, .L3998+60
+	b	.L3920
+.L3911:
+	ldr	r0, .L4001+60
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r7, r0
 	cmp	r0, #0
-	beq	.L3918
+	beq	.L3921
 	mov	r1, r6
 	movs	r2, #28
 	bl	rk_copy_from_user
-	cbz	r0, .L3923
-	ldr	r0, .L3998+48
+	cbz	r0, .L3926
+	ldr	r0, .L4001+48
 	bl	printk
-	b	.L3924
-.L3923:
+	b	.L3927
+.L3926:
 	ldmia	r7, {r1, r2}
-	ldr	r0, .L3998+64
+	ldr	r0, .L4001+64
 	bl	printk
 	ldr	r1, [r7]
 	cmp	r1, #256000
-	bhi	.L3924
-	ldr	r6, .L3998+52
+	bhi	.L3927
+	ldr	r6, .L4001+52
 	ldr	r0, [r6, #3828]
-	cbz	r0, .L3924
+	cbz	r0, .L3927
 	bl	CRC_32
 	ldr	r3, [r7, #4]
 	cmp	r3, r0
-	beq	.L3926
+	beq	.L3929
 	mov	r0, r7
 	bl	ftl_free
-	b	.L3954
-.L3926:
+	b	.L3957
+.L3929:
 	bl	rknand_device_lock
 	ldr	r1, [r6, #3828]
 	add	r2, r7, #8
@@ -24476,62 +24506,62 @@ rknand_sys_storage_ioctl:
 	bl	ftl_free
 	str	r4, [r6, #3828]
 	mov	r0, r7
-	b	.L3930
-.L3924:
+	b	.L3933
+.L3927:
 	mov	r0, r7
-	b	.L3991
-.L3907:
-	ldr	r0, .L3998+68
+	b	.L3994
+.L3910:
+	ldr	r0, .L4001+68
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r7, r0
 	cmp	r0, #0
-	beq	.L3918
+	beq	.L3921
 	bl	ftl_read_flash_info
 	mov	r0, r6
 	mov	r1, r7
 	movs	r2, #11
-	b	.L3996
-.L3891:
-	ldr	r0, .L3998+72
+	b	.L3999
+.L3894:
+	ldr	r0, .L4001+72
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r7, r0
 	cmp	r0, #0
-	beq	.L3918
+	beq	.L3921
 	movs	r1, #0
 	movs	r2, #64
 	bl	ftl_memset
 	mov	r0, r6
 	mov	r1, r7
 	movs	r2, #64
-	b	.L3996
-.L3903:
-	ldr	r0, .L3998+76
+	b	.L3999
+.L3906:
+	ldr	r0, .L4001+76
 	bl	printk
-	ldr	r3, .L3998+52
+	ldr	r3, .L4001+52
 	movs	r2, #4
 	mov	r0, r6
 	ldr	r3, [r3, #3832]
 	ldr	r3, [r3, #20]
 	mov	r1, sp
 	str	r3, [sp]
-.L3980:
+.L3983:
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	bne	.L3989
-	b	.L3986
-.L3911:
-	ldr	r0, .L3998+80
+	bne	.L3992
+	b	.L3989
+.L3914:
+	ldr	r0, .L4001+80
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r7, r0
 	cmp	r0, #0
-	beq	.L3918
+	beq	.L3921
 	bl	rknand_device_lock
 	mov	r1, #264
 	movs	r2, #2
@@ -24542,39 +24572,39 @@ rknand_sys_storage_ioctl:
 	mov	r2, #1024
 	mov	r0, r6
 	mov	r1, r7
-.L3996:
+.L3999:
 	bl	rk_copy_to_user
 	mov	r4, r0
 	mov	r0, r7
 	cmp	r4, #0
-	bne	.L3991
-.L3930:
+	bne	.L3994
+.L3933:
 	bl	ftl_free
-	b	.L3917
-.L3895:
-	ldr	r0, .L3998+84
+	b	.L3920
+.L3898:
+	ldr	r0, .L4001+84
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	mov	r4, r0
-	cbz	r0, .L3931
-.L3936:
-	ldr	r0, .L3998+48
+	cbz	r0, .L3934
+.L3939:
+	ldr	r0, .L4001+48
 	bl	printk
-	b	.L3989
-.L3931:
+	b	.L3992
+.L3934:
 	ldr	r2, [sp, #4]
-	ldr	r3, .L3998+88
+	ldr	r3, .L4001+88
 	cmp	r2, r3
-	beq	.L3932
-.L3933:
+	beq	.L3935
+.L3936:
 	mov	r4, #-1
-	b	.L3917
-.L3999:
+	b	.L3920
+.L4002:
 	.align	2
-.L3998:
+.L4001:
 	.word	__stack_chk_guard
 	.word	1074033155
 	.word	1074029570
@@ -24583,13 +24613,12 @@ rknand_sys_storage_ioctl:
 	.word	1074033235
 	.word	1074034193
 	.word	1074034194
-	.word	.LC180
-	.word	.LC182
+	.word	.LC181
 	.word	.LC183
 	.word	.LC184
-	.word	.LC181
-	.word	.LANCHOR5
 	.word	.LC185
+	.word	.LC182
+	.word	.LANCHOR5
 	.word	.LC186
 	.word	.LC187
 	.word	.LC188
@@ -24597,58 +24626,59 @@ rknand_sys_storage_ioctl:
 	.word	.LC190
 	.word	.LC191
 	.word	.LC192
+	.word	.LC193
 	.word	1263358532
-.L3932:
+.L3935:
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3933
-	ldr	r7, .L4000
+	bhi	.L3936
+	ldr	r7, .L4003
 	mov	r2, #512
 	add	r0, sp, #4
 	ldr	r1, [r7, #3832]
 	bl	memcpy
 	ldr	r2, [r7, #3836]
-	ldr	r3, .L4000+4
+	ldr	r3, .L4003+4
 	cmp	r2, r3
-	beq	.L3934
+	beq	.L3937
 	add	r0, sp, #68
 	mov	r1, r4
 	movs	r2, #128
 	str	r4, [sp, #12]
 	str	r4, [sp, #16]
 	bl	memset
-.L3934:
+.L3937:
 	movs	r1, #0
 	mov	r2, #256
 	add	r0, sp, #260
 	str	r1, [sp, #20]
 	bl	memset
-	b	.L3994
-.L3898:
-	ldr	r0, .L4000+8
+	b	.L3997
+.L3901:
+	ldr	r0, .L4003+8
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4000+12
+	ldr	r3, .L4003+12
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3933
-	ldr	r2, .L4000
-	ldr	r3, .L4000+4
+	bhi	.L3936
+	ldr	r2, .L4003
+	ldr	r3, .L4003+4
 	ldr	r1, [r2, #3836]
 	cmp	r1, r3
-	bne	.L3954
+	bne	.L3957
 	ldr	r3, [sp, #16]
 	subs	r1, r3, #1
 	cmp	r1, #127
-	bhi	.L3955
+	bhi	.L3958
 	ldr	r4, [r2, #3832]
 	add	r1, sp, #68
 	add	r0, r4, #64
@@ -24657,35 +24687,35 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	movs	r0, #1
 	mov	r1, r4
-	b	.L3987
-.L3902:
-	ldr	r0, .L4000+16
+	b	.L3990
+.L3905:
+	ldr	r0, .L4003+16
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4000+20
+	ldr	r3, .L4003+20
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3933
-	ldr	r6, .L4000
+	bhi	.L3936
+	ldr	r6, .L4003
 	ldr	r3, [r6, #3840]
-	cbnz	r3, .L3937
-.L3940:
+	cbnz	r3, .L3940
+.L3943:
 	movs	r0, #0
-	b	.L3890
-.L3937:
+	b	.L3893
+.L3940:
 	ldr	r3, [r6, #3844]
-	ldr	r2, .L4000+24
+	ldr	r2, .L4003+24
 	ldr	r1, [r3]
 	cmp	r1, r2
-	beq	.L3938
+	beq	.L3941
 	str	r2, [r3]
 	mov	r2, #504
 	ldr	r3, [r6, #3844]
@@ -24693,14 +24723,14 @@ rknand_sys_storage_ioctl:
 	movs	r2, #0
 	str	r2, [r3, #8]
 	str	r2, [r3, #12]
-.L3938:
+.L3941:
 	ldr	r1, [r6, #3844]
 	movs	r4, #0
 	mov	r0, r4
 	str	r4, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r6, #3832]
-	ldr	r2, .L4000+12
+	ldr	r2, .L4003+12
 	ldr	r1, [r3]
 	cmp	r1, r2
 	it	ne
@@ -24708,7 +24738,7 @@ rknand_sys_storage_ioctl:
 	ldr	r7, [r6, #3832]
 	itt	ne
 	movne	r2, #504
-	ldrne	r3, .L4000
+	ldrne	r3, .L4003
 	add	r0, r7, #64
 	itt	ne
 	ldrne	r3, [r3, #3832]
@@ -24725,29 +24755,29 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	str	r4, [r6, #3840]
 	str	r4, [r6, #3836]
-	b	.L3917
-.L3893:
-	ldr	r0, .L4000+28
+	b	.L3920
+.L3896:
+	ldr	r0, .L4003+28
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4000+32
+	ldr	r3, .L4003+32
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r3, [sp, #8]
 	cmp	r3, #512
-	bhi	.L3933
-	ldr	r6, .L4000
+	bhi	.L3936
+	ldr	r6, .L4003
 	ldr	r3, [r6, #3840]
 	cmp	r3, #1
-	beq	.L3940
+	beq	.L3943
 	ldr	r3, [r6, #3844]
-	ldr	r2, .L4000+24
+	ldr	r2, .L4003+24
 	ldr	r1, [r3]
 	cmp	r1, r2
 	it	ne
@@ -24765,18 +24795,18 @@ rknand_sys_storage_ioctl:
 	str	r3, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r6, #3832]
-	ldr	r2, .L4000+12
+	ldr	r2, .L4003+12
 	ldr	r1, [r3]
 	cmp	r1, r2
-	beq	.L3942
+	beq	.L3945
 	str	r2, [r3]
 	mov	r2, #504
-	ldr	r3, .L4000
+	ldr	r3, .L4003
 	ldr	r3, [r3, #3832]
 	str	r2, [r3, #4]
 	movs	r2, #0
 	str	r2, [r3, #8]
-.L3942:
+.L3945:
 	ldr	r7, [r6, #3832]
 	movs	r4, #0
 	movs	r2, #128
@@ -24789,54 +24819,54 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	movs	r3, #1
 	str	r3, [r6, #3840]
-	b	.L3917
-.L3899:
-	ldr	r0, .L4000+36
+	b	.L3920
+.L3902:
+	ldr	r0, .L4003+36
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4000+40
+	ldr	r3, .L4003+40
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r2, [sp, #8]
 	cmp	r2, #512
-	bhi	.L3933
+	bhi	.L3936
 	add	r0, sp, #12
-	ldr	r1, .L4000+44
-	b	.L3993
-.L3900:
-	ldr	r7, .L4000+48
+	ldr	r1, .L4003+44
+	b	.L3996
+.L3903:
+	ldr	r7, .L4003+48
 	cmp	r4, r7
-	bne	.L3943
-	ldr	r0, .L4000+52
-	b	.L3983
-.L3943:
-	ldr	r3, .L4000+56
+	bne	.L3946
+	ldr	r0, .L4003+52
+	b	.L3986
+.L3946:
+	ldr	r3, .L4003+56
 	cmp	r4, r3
 	ite	eq
-	ldreq	r0, .L4000+60
-	ldrne	r0, .L4000+64
-.L3983:
+	ldreq	r0, .L4003+60
+	ldrne	r0, .L4003+64
+.L3986:
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4000+68
+	ldr	r3, .L4003+68
 	cmp	r2, r3
-	bne	.L3989
-	ldr	r3, .L4000+56
+	bne	.L3992
+	ldr	r3, .L4003+56
 	cmp	r4, r3
-	bne	.L3946
-	ldr	r3, .L4000
+	bne	.L3949
+	ldr	r3, .L4003
 	mov	r0, r6
 	add	r1, sp, #4
 	movs	r2, #16
@@ -24846,29 +24876,29 @@ rknand_sys_storage_ioctl:
 	strb	r3, [sp, #12]
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L3890
-	b	.L3989
-.L3946:
-	ldr	r6, .L4000+72
+	beq	.L3893
+	b	.L3992
+.L3949:
+	ldr	r6, .L4003+72
 	ldr	r3, [r6, #16]
 	mov	r0, r6
 	cmp	r3, #10
-	bhi	.L3989
-	ldr	r3, .L4000
+	bhi	.L3992
+	ldr	r3, .L4003
 	ldr	r1, [r3, #3832]
 	ldr	r3, [sp, #8]
 	ldr	r2, [r1, #24]
 	cmp	r2, r3
-	beq	.L3947
-	cbz	r2, .L3947
+	beq	.L3950
+	cbz	r2, .L3950
 	mov	r1, r3
-	ldr	r0, .L4000+76
+	ldr	r0, .L4003+76
 	bl	printk
 	ldr	r3, [r6, #16]
 	adds	r3, r3, #1
 	str	r3, [r6, #16]
-	b	.L3989
-.L3947:
+	b	.L3992
+.L3950:
 	movs	r2, #0
 	cmp	r4, r7
 	str	r2, [r0, #16]
@@ -24882,131 +24912,131 @@ rknand_sys_storage_ioctl:
 	str	r2, [r1, #20]
 	bl	StorageSysDataStore
 	adds	r0, r0, #1
-	bne	.L3986
+	bne	.L3989
 	mvn	r4, #1
-	b	.L3917
-.L4001:
+	b	.L3920
+.L4004:
 	.align	2
-.L4000:
+.L4003:
 	.word	.LANCHOR5
 	.word	-1067903959
-	.word	.LC193
-	.word	1263358532
 	.word	.LC194
+	.word	1263358532
+	.word	.LC195
 	.word	1112753220
 	.word	1146313043
-	.word	.LC195
-	.word	1112755781
 	.word	.LC196
+	.word	1112755781
+	.word	.LC197
 	.word	1094995539
 	.word	.LANCHOR5+3848
 	.word	1074031666
-	.word	.LC197
-	.word	1074031676
 	.word	.LC198
+	.word	1074031676
 	.word	.LC199
+	.word	.LC200
 	.word	1280262987
 	.word	.LANCHOR6
-	.word	.LC200
-.L3912:
-	ldr	r0, .L4002
+	.word	.LC201
+.L3915:
+	ldr	r0, .L4005
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4002+4
+	ldr	r3, .L4005+4
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r2, [sp, #8]
 	cmp	r2, #504
-	bhi	.L3933
-	ldr	r3, .L4002+8
+	bhi	.L3936
+	ldr	r3, .L4005+8
 	add	r0, sp, #12
 	cmp	r4, r3
-	ldr	r3, .L4002+12
+	ldr	r3, .L4005+12
 	ite	eq
 	ldreq	r1, [r3, #20]
 	ldrne	r1, [r3, #24]
 	adds	r1, r1, #8
-.L3993:
+.L3996:
 	bl	memcpy
-.L3994:
+.L3997:
 	mov	r0, r6
 	add	r1, sp, #4
 	mov	r2, #520
-	b	.L3980
-.L3909:
-	ldr	r0, .L4002+16
+	b	.L3983
+.L3912:
+	ldr	r0, .L4005+16
 	bl	printk
 	mov	r1, r6
 	mov	r2, #520
 	add	r0, sp, #4
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3936
+	bne	.L3939
 	ldr	r2, [sp, #4]
-	ldr	r3, .L4002+4
+	ldr	r3, .L4005+4
 	cmp	r2, r3
-	bne	.L3933
+	bne	.L3936
 	ldr	r2, [sp, #8]
 	cmp	r2, #504
-	bhi	.L3933
+	bhi	.L3936
 	cmp	r4, r7
 	add	r2, r2, #8
-	ldr	r4, .L4002+12
-	bne	.L3951
+	ldr	r4, .L4005+12
+	bne	.L3954
 	add	r1, sp, #4
 	ldr	r0, [r4, #20]
 	bl	memcpy
 	movs	r0, #2
 	ldr	r1, [r4, #20]
-	b	.L3987
-.L3951:
+	b	.L3990
+.L3954:
 	add	r1, sp, #4
 	ldr	r0, [r4, #24]
 	bl	memcpy
 	ldr	r1, [r4, #24]
 	movs	r0, #3
-.L3987:
+.L3990:
 	bl	StorageSysDataStore
 	mov	r4, r0
-.L3917:
-	ldr	r0, .L4002+20
+.L3920:
+	ldr	r0, .L4005+20
 	mov	r1, r4
 	bl	printk
 	mov	r0, r4
-	b	.L3890
-.L3953:
+	b	.L3893
+.L3956:
 	mvn	r0, #21
-	b	.L3890
-.L3954:
+	b	.L3893
+.L3957:
 	mvn	r0, #1
-	b	.L3890
-.L3955:
+	b	.L3893
+.L3958:
 	mvn	r0, #2
-.L3890:
+.L3893:
 	ldr	r2, [sp, #524]
 	ldr	r3, [r5]
 	cmp	r2, r3
-	beq	.L3952
+	beq	.L3955
 	bl	__stack_chk_fail
-.L3952:
+.L3955:
 	add	sp, sp, #528
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L4003:
+.L4006:
 	.align	2
-.L4002:
-	.word	.LC201
+.L4005:
+	.word	.LC202
 	.word	1145980246
 	.word	1074034192
 	.word	.LANCHOR6
-	.word	.LC202
 	.word	.LC203
+	.word	.LC204
 	.fnend
 	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
 	.align	1
@@ -25021,9 +25051,9 @@ rk_ftl_storage_sys_init:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r3, #-1
-	ldr	r4, .L4013
+	ldr	r4, .L4016
 	mov	r2, #512
-	ldr	r5, .L4013+4
+	ldr	r5, .L4016+4
 	movs	r6, #0
 	addw	r0, r4, #3848
 	ldr	r1, [r4, #3800]
@@ -25046,23 +25076,23 @@ rk_ftl_storage_sys_init:
 	ldr	r8, [r7, #508]
 	str	r3, [r4, #3840]
 	cmp	r8, #0
-	beq	.L4005
+	beq	.L4008
 	mov	r0, r7
 	mov	r1, #508
 	bl	js_hash
 	cmp	r8, r0
-	beq	.L4005
+	beq	.L4008
 	str	r6, [r7, #16]
-	ldr	r0, .L4013+8
+	ldr	r0, .L4016+8
 	str	r6, [r4, #3840]
 	bl	printk
-.L4005:
+.L4008:
 	ldr	r3, [r4, #3840]
-	cbz	r3, .L4006
-	ldr	r2, .L4013+12
-	ldr	r3, .L4013
+	cbz	r3, .L4009
+	ldr	r2, .L4016+12
+	ldr	r3, .L4016
 	str	r2, [r3, #3836]
-.L4006:
+.L4009:
 	ldr	r1, [r5, #20]
 	movs	r0, #2
 	bl	StorageSysDataLoad
@@ -25071,12 +25101,12 @@ rk_ftl_storage_sys_init:
 	bl	StorageSysDataLoad
 	pop	{r4, r5, r6, r7, r8, lr}
 	b	rknand_sys_storage_init
-.L4014:
+.L4017:
 	.align	2
-.L4013:
+.L4016:
 	.word	.LANCHOR5
 	.word	.LANCHOR6
-	.word	.LC204
+	.word	.LC205
 	.word	-1067903959
 	.fnend
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
@@ -25107,24 +25137,24 @@ rk_ftl_vendor_storage_init:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
 	bl	ftl_malloc
-	ldr	r6, .L4025
+	ldr	r6, .L4028
 	str	r0, [r6, #28]
 	cmp	r0, #0
-	beq	.L4022
+	beq	.L4025
 	mov	r8, #0
-	ldr	r9, .L4025+8
+	ldr	r9, .L4028+8
 	mov	r10, r6
 	mov	r4, r8
 	mov	r7, r8
-.L4020:
+.L4023:
 	lsls	r0, r7, #7
 	movs	r1, #128
 	ldr	r2, [r6, #28]
 	bl	FlashBootVendorRead
 	cmp	r0, #0
-	bne	.L4018
+	bne	.L4021
 	ldr	r3, [r10, #28]
-	ldr	r0, .L4025+4
+	ldr	r0, .L4028+4
 	add	r2, r3, #65280
 	adds	r2, r2, #252
 	ldr	r1, [r3]
@@ -25134,35 +25164,35 @@ rk_ftl_vendor_storage_init:
 	ldr	r5, [r10, #28]
 	ldr	r3, [r5]
 	cmp	r3, r9
-	bne	.L4019
+	bne	.L4022
 	add	r3, r5, #65280
 	ldr	r2, [r5, #4]
 	adds	r3, r3, #252
 	ldr	r3, [r3]
 	cmp	r3, r2
-	bne	.L4019
+	bne	.L4022
 	cmp	r4, r3
 	itt	cc
 	movcc	r8, r7
 	movcc	r4, r3
-.L4019:
-	cbnz	r7, .L4024
+.L4022:
+	cbnz	r7, .L4027
 	movs	r7, #1
-	b	.L4020
-.L4024:
-	cbz	r4, .L4021
+	b	.L4023
+.L4027:
+	cbz	r4, .L4024
 	lsl	r0, r8, #7
 	movs	r1, #128
 	mov	r2, r5
 	bl	FlashBootVendorRead
-	cbnz	r0, .L4018
+	cbnz	r0, .L4021
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L4021:
+.L4024:
 	mov	r0, r5
 	mov	r1, r4
 	mov	r2, #65536
 	bl	memset
-	ldr	r3, .L4025+8
+	ldr	r3, .L4028+8
 	str	r7, [r5, #4]
 	mov	r0, r4
 	str	r3, [r5]
@@ -25172,21 +25202,21 @@ rk_ftl_vendor_storage_init:
 	strh	r4, [r5, #12]	@ movhi
 	strh	r3, [r5, #14]	@ movhi
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L4018:
+.L4021:
 	ldr	r0, [r6, #28]
 	bl	kfree
 	movs	r3, #0
 	mov	r0, #-1
 	str	r3, [r6, #28]
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L4022:
+.L4025:
 	mvn	r0, #11
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L4026:
+.L4029:
 	.align	2
-.L4025:
+.L4028:
 	.word	.LANCHOR6
-	.word	.LC205
+	.word	.LC206
 	.word	1380668996
 	.fnend
 	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
@@ -25201,18 +25231,18 @@ rk_ftl_vendor_read:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r3, .L4033
+	ldr	r3, .L4036
 	ldr	r5, [r3, #28]
-	cbz	r5, .L4032
+	cbz	r5, .L4035
 	ldrh	r7, [r5, #10]
 	movs	r3, #0
-.L4029:
+.L4032:
 	cmp	r3, r7
-	bcs	.L4032
+	bcs	.L4035
 	add	r6, r5, r3, lsl #3
 	ldrh	r4, [r6, #16]
 	cmp	r4, r0
-	bne	.L4030
+	bne	.L4033
 	ldrh	r3, [r6, #20]
 	mov	r0, r1
 	cmp	r2, r3
@@ -25225,15 +25255,15 @@ rk_ftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L4030:
+.L4033:
 	adds	r3, r3, #1
-	b	.L4029
-.L4032:
+	b	.L4032
+.L4035:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L4034:
+.L4037:
 	.align	2
-.L4033:
+.L4036:
 	.word	.LANCHOR6
 	.fnend
 	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
@@ -25249,45 +25279,45 @@ rk_ftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r2
-	ldr	r2, .L4057
+	ldr	r2, .L4060
 	.pad #28
 	sub	sp, sp, #28
 	mov	ip, r0
 	mov	r3, r1
 	ldr	r4, [r2, #28]
 	cmp	r4, #0
-	beq	.L4050
+	beq	.L4053
 	add	r7, r9, #63
 	ldrh	r1, [r4, #8]
 	ldrh	r2, [r4, #10]
 	bic	r7, r7, #63
 	movs	r6, #0
 	str	r1, [sp, #4]
-.L4037:
+.L4040:
 	cmp	r6, r2
-	bcs	.L4055
+	bcs	.L4058
 	add	r5, r4, r6, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, ip
-	bne	.L4038
+	bne	.L4041
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	str	r1, [sp, #8]
 	cmp	r9, r1
-	bls	.L4039
+	bls	.L4042
 	ldrh	r1, [r4, #14]
 	cmp	r1, r7
-	bcc	.L4050
+	bcc	.L4053
 	ldrh	r8, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #12]
-.L4040:
+.L4043:
 	ldr	r2, [sp, #12]
 	adds	r5, r5, #8
 	cmp	r6, r2
-	bcs	.L4056
+	bcs	.L4059
 	ldrh	r2, [r5, #16]
 	add	r0, fp, r8
 	ldrh	r1, [r5, #18]
@@ -25306,8 +25336,8 @@ rk_ftl_vendor_write:
 	bl	memcpy
 	ldr	r3, [sp, #20]
 	ldr	ip, [sp, #16]
-	b	.L4040
-.L4056:
+	b	.L4043
+.L4059:
 	add	r6, r4, r6, lsl #3
 	uxth	r8, r8
 	add	r0, fp, r8
@@ -25325,22 +25355,22 @@ rk_ftl_vendor_write:
 	add	r3, r3, r5
 	subs	r7, r3, r7
 	strh	r7, [r4, #14]	@ movhi
-	b	.L4054
-.L4039:
+	b	.L4057
+.L4042:
 	ldrh	r0, [r5, #18]
 	mov	r1, r3
 	mov	r2, r9
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r9, [r5, #20]	@ movhi
-	b	.L4054
-.L4038:
+	b	.L4057
+.L4041:
 	adds	r6, r6, #1
-	b	.L4037
-.L4055:
+	b	.L4040
+.L4058:
 	ldrh	r1, [r4, #14]
 	cmp	r1, r7
-	bcc	.L4050
+	bcc	.L4053
 	add	r2, r4, r2, lsl #3
 	uxth	r7, r7
 	subs	r1, r1, r7
@@ -25360,7 +25390,7 @@ rk_ftl_vendor_write:
 	ldrh	r3, [r4, #10]
 	adds	r3, r3, #1
 	strh	r3, [r4, #10]	@ movhi
-.L4054:
+.L4057:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	movs	r1, #128
@@ -25379,16 +25409,16 @@ rk_ftl_vendor_write:
 	lsls	r0, r3, #7
 	bl	FlashBootVendorWrite
 	movs	r0, #0
-	b	.L4036
-.L4050:
+	b	.L4039
+.L4053:
 	mov	r0, #-1
-.L4036:
+.L4039:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L4058:
+.L4061:
 	.align	2
-.L4057:
+.L4060:
 	.word	.LANCHOR6
 	.fnend
 	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
@@ -25409,34 +25439,34 @@ rk_ftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L4068
-	ldr	r3, .L4075
+	beq	.L4071
+	ldr	r3, .L4078
 	cmp	r6, r3
-	beq	.L4062
+	beq	.L4065
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L4063
-	b	.L4074
-.L4062:
+	beq	.L4066
+	b	.L4077
+.L4065:
 	mov	r1, r5
 	movs	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L4074
+	bne	.L4077
 	ldr	r2, [r4]
-	ldr	r3, .L4075+4
+	ldr	r3, .L4078+4
 	cmp	r2, r3
-	beq	.L4065
-.L4066:
+	beq	.L4068
+.L4069:
 	mov	r5, #-1
-	b	.L4061
-.L4065:
+	b	.L4064
+.L4068:
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L4066
+	beq	.L4069
 	uxth	r2, r0
 	strh	r0, [r4, #6]	@ movhi
 	mov	r1, r4
@@ -25447,45 +25477,45 @@ rk_ftl_vendor_storage_ioctl:
 	ite	eq
 	moveq	r5, #0
 	mvnne	r5, #13
-	b	.L4061
-.L4063:
+	b	.L4064
+.L4066:
 	mov	r1, r5
 	movs	r2, #8
 	bl	rk_copy_from_user
-	cbnz	r0, .L4074
+	cbnz	r0, .L4077
 	ldr	r2, [r4]
-	ldr	r3, .L4075+4
+	ldr	r3, .L4078+4
 	cmp	r2, r3
-	bne	.L4066
+	bne	.L4069
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L4066
+	bhi	.L4069
 	mov	r0, r4
 	mov	r1, r5
 	adds	r2, r2, #8
 	bl	rk_copy_from_user
-	cbnz	r0, .L4074
+	cbnz	r0, .L4077
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_write
 	mov	r5, r0
-	b	.L4061
-.L4074:
+	b	.L4064
+.L4077:
 	mvn	r5, #13
-.L4061:
+.L4064:
 	mov	r0, r4
 	bl	kfree
-	b	.L4060
-.L4068:
+	b	.L4063
+.L4071:
 	mov	r5, #-1
-.L4060:
+.L4063:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L4076:
+.L4079:
 	.align	2
-.L4075:
+.L4078:
 	.word	1074034177
 	.word	1448232273
 	.fnend
@@ -25736,9 +25766,9 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	2
 .LANCHOR3 = . + 0
-	.type	__func__.20216, %object
-	.size	__func__.20216, 11
-__func__.20216:
+	.type	__func__.20217, %object
+	.size	__func__.20217, 11
+__func__.20217:
 	.ascii	"FtlMemInit\000"
 .LC0:
 	.byte	60
@@ -25746,32 +25776,32 @@ __func__.20216:
 	.byte	24
 	.byte	16
 	.space	1
-	.type	__func__.20991, %object
-	.size	__func__.20991, 17
-__func__.20991:
+	.type	__func__.20992, %object
+	.size	__func__.20992, 17
+__func__.20992:
 	.ascii	"FtlDumpBlockInfo\000"
 	.space	3
-	.type	__func__.21010, %object
-	.size	__func__.21010, 16
-__func__.21010:
+	.type	__func__.21011, %object
+	.size	__func__.21011, 16
+__func__.21011:
 	.ascii	"FtlScanAllBlock\000"
-	.type	__func__.21276, %object
-	.size	__func__.21276, 17
-__func__.21276:
+	.type	__func__.21277, %object
+	.size	__func__.21277, 17
+__func__.21277:
 	.ascii	"ftl_scan_all_ppa\000"
 	.space	3
-	.type	__func__.20959, %object
-	.size	__func__.20959, 12
-__func__.20959:
+	.type	__func__.20960, %object
+	.size	__func__.20960, 12
+__func__.20960:
 	.ascii	"FtlCheckVpc\000"
-	.type	__func__.21258, %object
-	.size	__func__.21258, 21
-__func__.21258:
+	.type	__func__.21259, %object
+	.size	__func__.21259, 21
+__func__.21259:
 	.ascii	"FtlVpcCheckAndModify\000"
 	.space	3
-	.type	__func__.20289, %object
-	.size	__func__.20289, 8
-__func__.20289:
+	.type	__func__.20290, %object
+	.size	__func__.20290, 8
+__func__.20290:
 	.ascii	"FtlInit\000"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC1:
@@ -25929,7 +25959,7 @@ __func__.20289:
 .LC76:
 	.ascii	"%s\012\000"
 .LC77:
-	.ascii	"FTL version: 5.0.56 20190508\000"
+	.ascii	"FTL version: 5.0.57 20190927\000"
 .LC78:
 	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
 	.ascii	"\012\000"
@@ -25991,211 +26021,214 @@ __func__.20289:
 .LC106:
 	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC107:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data= %x\012"
+	.ascii	"\000"
 .LC108:
-	.ascii	"superBlkID = %x vpc=%x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC109:
-	.ascii	"flashmode = %x pagenum = %x %x\012\000"
+	.ascii	"superBlkID = %x vpc=%x\012\000"
 .LC110:
+	.ascii	"flashmode = %x pagenum = %x %x\012\000"
+.LC111:
 	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC111:
-	.ascii	"blk = %x vpc=%x mode = %x\012\000"
 .LC112:
+	.ascii	"blk = %x vpc=%x mode = %x\012\000"
+.LC113:
 	.ascii	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
 	.ascii	"%x\012\000"
-.LC113:
+.LC114:
 	.ascii	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
 	.ascii	"%x\012\000"
-.LC114:
-	.ascii	"ftl_scan_all_ppa blk %x page %x\012\000"
 .LC115:
+	.ascii	"ftl_scan_all_ppa blk %x page %x\012\000"
+.LC116:
 	.ascii	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC116:
-	.ascii	"%s finished\012\000"
 .LC117:
-	.ascii	"FlashMakeFactorBbt %d\012\000"
+	.ascii	"%s finished\012\000"
 .LC118:
-	.ascii	"bad block:%d %d\012\000"
+	.ascii	"FlashMakeFactorBbt %d\012\000"
 .LC119:
-	.ascii	"FMFB:%d %d\012\000"
+	.ascii	"bad block:%d %d\012\000"
 .LC120:
-	.ascii	"E:bad block:%d\012\000"
+	.ascii	"FMFB:%d %d\012\000"
 .LC121:
-	.ascii	"FMFB:Save %d %d\012\000"
+	.ascii	"E:bad block:%d\012\000"
 .LC122:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FMFB:Save %d %d\012\000"
 .LC123:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC124:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC125:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC126:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC127:
-	.ascii	"decrement_vpc_count %x = %d in free list\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC128:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"decrement_vpc_count %x = %d in free list\012\000"
 .LC129:
-	.ascii	"page map lost: %x %x\012\000"
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC130:
-	.ascii	"FtlMapWritePage error = %x\012\000"
+	.ascii	"page map lost: %x %x\012\000"
 .LC131:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"FtlMapWritePage error = %x\012\000"
 .LC132:
-	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC133:
-	.ascii	"no ect\000"
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC134:
-	.ascii	"slc mode\000"
+	.ascii	"no ect\000"
 .LC135:
-	.ascii	"BBT:\000"
+	.ascii	"slc mode\000"
 .LC136:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"BBT:\000"
 .LC137:
-	.ascii	"map_ppn:\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC138:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC139:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC140:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC141:
-	.ascii	"Ftlscanalldata = %x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC142:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"Ftlscanalldata = %x\012\000"
 .LC143:
+	.ascii	"scan lpa = %x ppa= %x\012\000"
+.LC144:
 	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC144:
-	.ascii	"RSB refresh addr %x\012\000"
 .LC145:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"RSB refresh addr %x\012\000"
 .LC146:
-	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC147:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
 .LC148:
-	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC149:
-	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC150:
-	.ascii	"GC des block %x done\012\000"
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
 .LC151:
-	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+	.ascii	"GC des block %x done\012\000"
 .LC152:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
 .LC153:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC154:
-	.ascii	"rk_ftl_de_init %x\012\000"
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC155:
+	.ascii	"rk_ftl_de_init %x\012\000"
+.LC156:
 	.ascii	"...%s: no bad block mapping table, format device\012"
 	.ascii	"\000"
-.LC156:
-	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC157:
-	.ascii	"FtlInit %x\012\000"
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC158:
-	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+	.ascii	"FtlInit %x\012\000"
 .LC159:
-	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
 .LC160:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
 .LC161:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC162:
 	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\012"
 	.ascii	"\000"
-.LC162:
-	.ascii	":\000"
 .LC163:
+	.ascii	":\000"
+.LC164:
 	.ascii	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC164:
-	.ascii	"Mblk:\000"
 .LC165:
-	.ascii	"L2P:\000"
+	.ascii	"Mblk:\000"
 .LC166:
-	.ascii	"L2PC:\000"
+	.ascii	"L2P:\000"
 .LC167:
-	.ascii	"IdBlockReadData %x %x\012\000"
+	.ascii	"L2PC:\000"
 .LC168:
-	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+	.ascii	"IdBlockReadData %x %x\012\000"
 .LC169:
-	.ascii	"write_idblock fix data %x %x\012\000"
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
 .LC170:
-	.ascii	"idblk:\000"
+	.ascii	"write_idblock fix data %x %x\012\000"
 .LC171:
-	.ascii	"idb reverse %x %x\012\000"
+	.ascii	"idblk:\000"
 .LC172:
-	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
+	.ascii	"idb reverse %x %x\012\000"
 .LC173:
-	.ascii	"IDBlockWriteData %x %x\012\000"
+	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
 .LC174:
-	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+	.ascii	"IDBlockWriteData %x %x\012\000"
 .LC175:
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+.LC176:
 	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
 	.ascii	"\012\000"
-.LC176:
-	.ascii	"write\000"
 .LC177:
-	.ascii	"read\000"
+	.ascii	"write\000"
 .LC178:
-	.ascii	"write_idblock error %d\012\000"
+	.ascii	"read\000"
 .LC179:
-	.ascii	"wl_lba %p %x %x %x\012\000"
+	.ascii	"write_idblock error %d\012\000"
 .LC180:
-	.ascii	"READ_SECTOR_IO\012\000"
+	.ascii	"wl_lba %p %x %x %x\012\000"
 .LC181:
-	.ascii	"rk_copy_from_user error\012\000"
+	.ascii	"READ_SECTOR_IO\012\000"
 .LC182:
-	.ascii	"READ_SECTOR_IO %x %x\012\000"
+	.ascii	"rk_copy_from_user error\012\000"
 .LC183:
-	.ascii	"rk_copy_to_user error\012\000"
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
 .LC184:
-	.ascii	"WRITE_SECTOR_IO\012\000"
+	.ascii	"rk_copy_to_user error\012\000"
 .LC185:
-	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"WRITE_SECTOR_IO\012\000"
 .LC186:
-	.ascii	"END_WRITE_SECTOR_IO\012\000"
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
 .LC187:
-	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
 .LC188:
-	.ascii	"GET_FLASH_INFO_IO\012\000"
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
 .LC189:
-	.ascii	"GET_BAD_BLOCK_IO\012\000"
+	.ascii	"GET_FLASH_INFO_IO\012\000"
 .LC190:
-	.ascii	"GET_LOCK_FLAG_IO\012\000"
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
 .LC191:
-	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
 .LC192:
-	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
 .LC193:
-	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
 .LC194:
-	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
 .LC195:
-	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
 .LC196:
-	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
 .LC197:
-	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
 .LC198:
-	.ascii	"RKNAND_LOADER_STATUS\012\000"
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
 .LC199:
-	.ascii	"RKNAND_LOADER_LOCK\012\000"
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
 .LC200:
-	.ascii	"LockKey not match %d\012\000"
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
 .LC201:
-	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+	.ascii	"LockKey not match %d\012\000"
 .LC202:
-	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
 .LC203:
-	.ascii	"return ret = %lx\012\000"
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
 .LC204:
-	.ascii	"secureBootEn check error\012\000"
+	.ascii	"return ret = %lx\012\000"
 .LC205:
+	.ascii	"secureBootEn check error\012\000"
+.LC206:
 	.ascii	"\0013vendor storage %x,%x,%x\012\000"
 	.data
 	.align	2
diff --git a/drivers/rk_nand/rk_ftl_arm_v8.S b/drivers/rk_nand/rk_ftl_arm_v8.S
index d25a6530a2d0..0fe69bcd8442 100644
--- a/drivers/rk_nand/rk_ftl_arm_v8.S
+++ b/drivers/rk_nand/rk_ftl_arm_v8.S
@@ -5991,21 +5991,26 @@ FtlBbt2Bitmap:
 	mov	w1, 0
 	lsl	w2, w2, 2
 	bl	ftl_memset
+	adrp	x5, .LANCHOR0
 	mov	x3, 0
 	mov	w0, 65535
-	mov	w5, 1
+	mov	w6, 1
+	add	x5, x5, :lo12:.LANCHOR0
 .L836:
 	ldrh	w2, [x20,x3]
 	cmp	w2, w0
 	beq	.L834
 	ubfx	x4, x2, 5, 11
-	add	x3, x3, 2
+	lsl	w2, w6, w2
 	lsl	x4, x4, 2
-	lsl	w2, w5, w2
+	add	x3, x3, 2
 	cmp	x3, 1024
 	ldr	w1, [x19,x4]
 	orr	w2, w1, w2
 	str	w2, [x19,x4]
+	ldrh	w2, [x5,2110]
+	add	w2, w2, 1
+	strh	w2, [x5,2110]
 	bne	.L836
 .L834:
 	ldp	x19, x20, [sp,16]
@@ -11573,31 +11578,33 @@ FtlScanSysBlk:
 	.global	FtlLoadSysInfo
 	.type	FtlLoadSysInfo, %function
 FtlLoadSysInfo:
-	stp	x29, x30, [sp, -96]!
+	sub	sp, sp, #128
 	mov	w1, 0
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	adrp	x20, .LANCHOR2
-	adrp	x24, .LANCHOR4
-	stp	x21, x22, [sp,32]
-	add	x23, x20, :lo12:.LANCHOR2
-	add	x21, x24, :lo12:.LANCHOR4
-	add	x21, x21, 160
-	adrp	x19, .LANCHOR0
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	ldr	x0, [x23,2072]
-	add	x25, x23, 264
-	str	x0, [x21,8]
-	ldr	x0, [x23,2120]
-	str	x0, [x21,16]
-	add	x0, x19, :lo12:.LANCHOR0
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x23, x24, [sp,64]
+	stp	x21, x22, [sp,48]
+	adrp	x23, .LANCHOR4
+	adrp	x21, .LANCHOR2
+	stp	x19, x20, [sp,32]
+	add	x24, x21, :lo12:.LANCHOR2
+	add	x19, x23, :lo12:.LANCHOR4
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	add	x19, x19, 160
+	adrp	x20, .LANCHOR0
+	ldr	x0, [x24,2072]
+	add	x25, x24, 264
+	str	x0, [x19,8]
+	ldr	x0, [x24,2120]
+	str	x0, [x19,16]
+	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w2, [x0,1964]
-	ldr	x0, [x20,#:lo12:.LANCHOR2]
+	ldr	x0, [x21,#:lo12:.LANCHOR2]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w0, [x23,264]
+	str	x23, [x29,104]
+	ldrh	w0, [x24,264]
 	mov	w1, 65535
 	cmp	w0, w1
 	bne	.L1816
@@ -11606,75 +11613,95 @@ FtlLoadSysInfo:
 	b	.L1817
 .L1816:
 	mov	w1, 1
-	mov	w26, -1
+	adrp	x26, .LC106
+	mov	x28, x24
+	add	x26, x26, :lo12:.LC106
 	bl	FtlGetLastWrittenPage
+	ldrsh	w23, [x24,264]
 	sxth	w22, w0
 	add	w0, w0, 1
 	strh	w0, [x25,2]
-	ldrsh	w25, [x23,264]
 .L1818:
 	tbnz	w22, #31, .L1826
-	orr	w0, w22, w25, lsl 10
+	orr	w0, w22, w23, lsl 10
 	mov	w1, 1
-	str	w0, [x21,4]
+	str	w0, [x19,4]
 	mov	w2, w1
-	ldr	x0, [x23,2072]
-	add	x27, x19, :lo12:.LANCHOR0
-	str	x0, [x21,8]
-	mov	x0, x21
+	ldr	x0, [x28,2072]
+	add	x27, x20, :lo12:.LANCHOR0
+	str	x0, [x19,8]
+	mov	x0, x19
 	bl	FlashReadPages
 	ldrb	w0, [x27,72]
 	cbz	w0, .L1819
-	ldr	x0, [x21,16]
-	ldr	w28, [x0,12]
-	cbz	w28, .L1819
-	ldr	x0, [x21,8]
+	ldr	x25, [x19,16]
+	ldr	w7, [x25,12]
+	cbz	w7, .L1819
+	ldr	x24, [x19,8]
 	ldrh	w1, [x27,2034]
+	mov	x0, x24
+	str	x7, [x29,96]
 	bl	js_hash
-	cmp	w28, w0
+	ldr	x7, [x29,96]
+	cmp	w7, w0
 	beq	.L1819
 	cbnz	w22, .L1820
-	ldrh	w0, [x23,268]
-	cmp	w25, w0
+	ldrh	w0, [x28,268]
+	add	x8, x28, 264
+	cmp	w23, w0
 	beq	.L1820
-	sxth	w25, w0
+	ldr	w0, [x24]
+	ldrh	w1, [x28,264]
+	str	w0, [sp]
+	mov	x0, x26
+	str	x8, [x29,96]
+	ldr	w2, [x19]
+	ldr	w3, [x19,4]
+	ldr	w4, [x25]
+	ldr	w5, [x25,4]
+	ldr	w6, [x25,8]
+	bl	printk
 	ldrh	w22, [x27,2026]
+	ldr	x8, [x29,96]
+	ldrsh	w23, [x8,4]
 	b	.L1822
 .L1820:
-	str	w26, [x21]
+	mov	w0, -1
+	str	w0, [x19]
 .L1819:
-	ldr	w0, [x21]
+	ldr	w0, [x19]
 	cmn	w0, #1
 	beq	.L1822
-	ldr	x0, [x23,2072]
+	ldr	x0, [x28,2072]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
 	bne	.L1822
-	ldr	x0, [x23,2120]
-	mov	w1, 61604
-	ldrh	w0, [x0]
-	cmp	w0, w1
+	ldr	x0, [x28,2120]
+	ldrh	w1, [x0]
+	mov	w0, 61604
+	cmp	w1, w0
 	bne	.L1822
 .L1826:
-	add	x21, x24, :lo12:.LANCHOR4
-	add	x23, x20, :lo12:.LANCHOR2
-	add	x21, x21, 160
-	add	x22, x19, :lo12:.LANCHOR0
+	ldr	x0, [x29,104]
+	add	x24, x21, :lo12:.LANCHOR2
+	add	x22, x20, :lo12:.LANCHOR0
 	mov	w2, 48
-	sub	x0, x23, #64
-	ldr	x1, [x21,8]
+	add	x19, x0, :lo12:.LANCHOR4
+	sub	x0, x24, #64
+	add	x19, x19, 160
+	ldr	x1, [x19,8]
 	bl	ftl_memcpy
-	ldr	x1, [x21,8]
+	ldr	x1, [x19,8]
 	ldrh	w2, [x22,1964]
-	ldr	x0, [x20,#:lo12:.LANCHOR2]
+	ldr	x0, [x21,#:lo12:.LANCHOR2]
 	add	x1, x1, 48
 	lsl	w2, w2, 1
 	bl	ftl_memcpy
 	ldrh	w2, [x22,1964]
-	ldr	x3, [x21,8]
-	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	ldr	x3, [x19,8]
+	ldr	x0, [x20,#:lo12:.LANCHOR0]
 	uxth	x1, w2
 	lsr	w2, w2, 3
 	add	x1, x1, 24
@@ -11685,11 +11712,11 @@ FtlLoadSysInfo:
 	ldrh	w0, [x22,2068]
 	cbz	w0, .L1824
 	ldrh	w0, [x22,1964]
-	ldr	x3, [x21,8]
+	ldr	x3, [x19,8]
 	lsr	w1, w0, 3
 	ldrh	w2, [x22,2060]
 	add	w1, w1, w0, lsl 1
-	ldr	x0, [x23,2224]
+	ldr	x0, [x24,2224]
 	add	w1, w1, 52
 	lsl	w2, w2, 2
 	and	x1, x1, 65532
@@ -11701,13 +11728,13 @@ FtlLoadSysInfo:
 	sxth	w22, w22
 	b	.L1818
 .L1824:
-	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR2
 	mov	w1, 19539
 	movk	w1, 0x4654, lsl 16
 	ldr	w2, [x0,-64]
 	cmp	w2, w1
 	bne	.L1827
-	add	x1, x19, :lo12:.LANCHOR0
+	add	x1, x20, :lo12:.LANCHOR0
 	ldrb	w3, [x0,-54]
 	ldrh	w4, [x0,-56]
 	strh	w4, [x0,270]
@@ -11715,22 +11742,23 @@ FtlLoadSysInfo:
 	cmp	w3, w2
 	bne	.L1827
 	ldrh	w3, [x1,2024]
-	add	x24, x24, :lo12:.LANCHOR4
-	ldrh	w2, [x1,2030]
+	ldr	x2, [x29,104]
 	strh	wzr, [x0,282]
 	mul	w3, w3, w4
+	add	x23, x2, :lo12:.LANCHOR4
+	ldrh	w2, [x1,2030]
 	str	w3, [x1,2096]
-	str	w4, [x24,216]
+	strb	wzr, [x0,286]
 	mul	w3, w3, w2
 	str	w3, [x1,2064]
 	ldrh	w2, [x1,2110]
 	ldr	w3, [x1,1968]
 	ldrh	w1, [x1,1956]
 	sub	w2, w3, w2
-	ldrh	w3, [x0,-50]
+	str	w4, [x23,216]
 	sub	w2, w2, w4
+	ldrh	w3, [x0,-50]
 	strh	w3, [x0,40]
-	strb	wzr, [x0,286]
 	udiv	w1, w2, w1
 	ldrh	w2, [x0,-48]
 	strh	w1, [x0,260]
@@ -11757,11 +11785,11 @@ FtlLoadSysInfo:
 	lsr	w4, w2, 6
 	and	w2, w2, 63
 	strb	wzr, [x0,288]
-	strb	w2, [x0,142]
 	strh	w4, [x0,138]
+	strb	w2, [x0,142]
 	ldrb	w2, [x0,-51]
-	strb	w2, [x0,144]
 	ldr	w1, [x0,-32]
+	strb	w2, [x0,144]
 	str	w1, [x0,240]
 	ldr	w2, [x0,232]
 	ldr	w1, [x0,-24]
@@ -11776,7 +11804,7 @@ FtlLoadSysInfo:
 	bls	.L1828
 	str	w1, [x0,232]
 .L1828:
-	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR2
 	ldr	w1, [x0,-28]
 	ldr	w2, [x0,236]
 	cmp	w1, w2
@@ -11786,11 +11814,11 @@ FtlLoadSysInfo:
 	mov	w0, 65535
 	cmp	w3, w0
 	beq	.L1830
-	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR2
 	add	x0, x0, 40
 	bl	make_superblock
 .L1830:
-	add	x1, x20, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR2
 	add	x0, x1, 88
 	ldrh	w2, [x1,88]
 	mov	w1, 65535
@@ -11798,7 +11826,7 @@ FtlLoadSysInfo:
 	beq	.L1831
 	bl	make_superblock
 .L1831:
-	add	x1, x20, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR2
 	add	x0, x1, 136
 	ldrh	w2, [x1,136]
 	mov	w1, 65535
@@ -11806,22 +11834,24 @@ FtlLoadSysInfo:
 	beq	.L1832
 	bl	make_superblock
 .L1832:
-	add	x20, x20, :lo12:.LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR2
 	mov	w1, 65535
-	add	x0, x20, 280
+	add	x0, x21, 280
 	mov	w19, 0
-	ldrh	w2, [x20,280]
+	ldrh	w2, [x21,280]
 	cmp	w2, w1
 	beq	.L1817
 	bl	make_superblock
 .L1817:
+	sub	sp, x29, #16
 	mov	w0, w19
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 128
 	ret
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
@@ -11844,16 +11874,16 @@ FtlDumpBlockInfo:
 	uxth	w23, w0
 	add	x1, x2, :lo12:.LANCHOR3
 	add	x19, x22, :lo12:.LANCHOR0
-	adrp	x0, .LC106
+	adrp	x0, .LC107
 	add	x1, x1, 16
-	add	x0, x0, :lo12:.LC106
+	add	x0, x0, :lo12:.LC107
 	adrp	x21, .LANCHOR2
 	ldrh	w24, [x19,2024]
 	bl	printk
 	ubfiz	x2, x23, 1, 16
-	adrp	x0, .LC107
+	adrp	x0, .LC108
 	ldr	x3, [x21,#:lo12:.LANCHOR2]
-	add	x0, x0, :lo12:.LC107
+	add	x0, x0, :lo12:.LC108
 	mov	w1, w23
 	ldrh	w2, [x3,x2]
 	bl	printk
@@ -11874,9 +11904,9 @@ FtlDumpBlockInfo:
 	mov	w23, 0
 .L1844:
 	add	x3, x22, :lo12:.LANCHOR0
-	adrp	x0, .LC108
-	adrp	x25, .LC109
-	add	x0, x0, :lo12:.LC108
+	adrp	x0, .LC109
+	adrp	x25, .LC110
+	add	x0, x0, :lo12:.LC109
 	mov	w1, w23
 	mov	w2, w24
 	ldrh	w3, [x3,2024]
@@ -11884,7 +11914,7 @@ FtlDumpBlockInfo:
 	mov	w27, 65535
 	mov	w28, 56
 	mov	w26, 4
-	add	x25, x25, :lo12:.LC109
+	add	x25, x25, :lo12:.LC110
 	bl	printk
 .L1845:
 	add	x0, x22, :lo12:.LANCHOR0
@@ -11983,22 +12013,22 @@ FtlDumpBlockInfo:
 FtlScanAllBlock:
 	sub	sp, sp, #144
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC106
+	adrp	x0, .LC107
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC106
+	add	x0, x0, :lo12:.LC107
 	add	x1, x1, 40
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
 	stp	x23, x24, [sp,64]
 	stp	x21, x22, [sp,48]
-	adrp	x23, .LC111
-	adrp	x22, .LC110
-	adrp	x24, .LC112
-	add	x22, x22, :lo12:.LC110
+	adrp	x23, .LC112
+	adrp	x22, .LC111
+	adrp	x24, .LC113
+	add	x22, x22, :lo12:.LC111
 	stp	x19, x20, [sp,32]
-	add	x23, x23, :lo12:.LC111
+	add	x23, x23, :lo12:.LC112
 	mov	w20, 0
-	add	x24, x24, :lo12:.LC112
+	add	x24, x24, :lo12:.LC113
 	stp	x25, x26, [sp,80]
 	bl	printk
 .L1863:
@@ -12142,8 +12172,8 @@ FtlScanAllBlock:
 	.type	ftl_scan_all_ppa, %function
 ftl_scan_all_ppa:
 	sub	sp, sp, #96
-	adrp	x0, .LC113
-	add	x0, x0, :lo12:.LC113
+	adrp	x0, .LC114
+	add	x0, x0, :lo12:.LC114
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
 	stp	x19, x20, [sp,32]
@@ -12154,12 +12184,12 @@ ftl_scan_all_ppa:
 	stp	x21, x22, [sp,48]
 	stp	x23, x24, [sp,64]
 	add	x19, x19, :lo12:.LANCHOR4
-	adrp	x23, .LC114
+	adrp	x23, .LC115
 	ldrh	w1, [x2,2022]
 	mov	w22, 0
 	ldrh	w2, [x2,2024]
 	add	x19, x19, 160
-	add	x23, x23, :lo12:.LC114
+	add	x23, x23, :lo12:.LC115
 	bl	printk
 .L1877:
 	add	x0, x20, :lo12:.LANCHOR0
@@ -12206,9 +12236,9 @@ ftl_scan_all_ppa:
 	b	.L1877
 .L1879:
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC115
+	adrp	x0, .LC116
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
+	add	x0, x0, :lo12:.LC116
 	add	x1, x1, 56
 	bl	printk
 	sub	sp, x29, #16
@@ -12613,9 +12643,9 @@ FlashMakeFactorBbt:
 	ldrb	w1, [x1,24]
 	cmp	w0, 1
 	str	w1, [x29,132]
-	adrp	x0, .LC116
+	adrp	x0, .LC117
 	ubfiz	w1, w26, 1, 15
-	add	x0, x0, :lo12:.LC116
+	add	x0, x0, :lo12:.LC117
 	csel	w26, w1, w26, eq
 	mov	w1, 1
 	bl	printk
@@ -12741,10 +12771,10 @@ FlashMakeFactorBbt:
 	bl	SandiskProgTestBadBlock
 .L1954:
 	cbz	w0, .L1955
-	adrp	x0, .LC117
+	adrp	x0, .LC118
 	mov	w1, w20
 	mov	w2, w27
-	add	x0, x0, :lo12:.LC117
+	add	x0, x0, :lo12:.LC118
 	add	w24, w24, 1
 	bl	printk
 	add	x0, x19, :lo12:.LANCHOR4
@@ -12770,10 +12800,10 @@ FlashMakeFactorBbt:
 	add	w22, w22, w26
 	b	.L1946
 .L1956:
-	adrp	x0, .LC118
+	adrp	x0, .LC119
 	mov	w1, w20
 	mov	w2, w24
-	add	x0, x0, :lo12:.LC118
+	add	x0, x0, :lo12:.LC119
 	bl	printk
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,128]
@@ -12790,9 +12820,9 @@ FlashMakeFactorBbt:
 .L1958:
 	cbnz	w20, .L1960
 	add	x0, x19, :lo12:.LANCHOR4
-	adrp	x27, .LC119
+	adrp	x27, .LC120
 	mov	w22, w20
-	add	x27, x27, :lo12:.LC119
+	add	x27, x27, :lo12:.LC120
 	mov	w24, 1
 	ldrh	w28, [x0,92]
 .L1961:
@@ -12821,10 +12851,10 @@ FlashMakeFactorBbt:
 	uxth	w28, w28
 	b	.L1961
 .L1996:
-	adrp	x27, .LC119
+	adrp	x27, .LC120
 	ldr	w24, [x29,124]
 	sub	w28, w23, #50
-	add	x27, x27, :lo12:.LC119
+	add	x27, x27, :lo12:.LC120
 .L1964:
 	cmp	w24, w28
 	ble	.L1997
@@ -12861,10 +12891,10 @@ FlashMakeFactorBbt:
 	lsl	w2, w2, 9
 	bl	ftl_memset
 .L1960:
-	adrp	x24, .LC120
+	adrp	x24, .LC121
 	ldr	w28, [x29,124]
 	mul	w27, w20, w23
-	add	x24, x24, :lo12:.LC120
+	add	x24, x24, :lo12:.LC121
 	lsl	x25, x25, 1
 	mov	w22, -3872
 .L1968:
@@ -13239,13 +13269,13 @@ FtlBbmTblFlush:
 	add	x19, x19, 160
 	mov	w2, 16
 	mov	w24, 0
-	adrp	x26, .LC121
+	adrp	x26, .LC122
 	ldr	x21, [x19,16]
-	adrp	x27, .LC122
+	adrp	x27, .LC123
 	mov	w25, w24
-	add	x26, x26, :lo12:.LC121
+	add	x26, x26, :lo12:.LC122
 	mov	x0, x21
-	add	x27, x27, :lo12:.LC122
+	add	x27, x27, :lo12:.LC123
 	bl	ftl_memset
 	mov	w0, -3887
 	strh	w0, [x21]
@@ -13316,9 +13346,9 @@ FtlBbmTblFlush:
 	uxth	w24, w24
 	cmp	w24, 3
 	bls	.L2055
-	adrp	x0, .LC123
+	adrp	x0, .LC124
 	ldr	w1, [x19,4]
-	add	x0, x0, :lo12:.LC123
+	add	x0, x0, :lo12:.LC124
 	mov	w2, w24
 	add	x22, x22, :lo12:.LANCHOR2
 	bl	printk
@@ -13639,9 +13669,9 @@ FtlGcFreeBadSuperBlk:
 	mov	w21, 0
 	cbz	w0, .L2132
 	adrp	x22, .LANCHOR0
-	adrp	x24, .LC124
+	adrp	x24, .LC125
 	add	x22, x22, :lo12:.LANCHOR0
-	add	x24, x24, :lo12:.LC124
+	add	x24, x24, :lo12:.LC125
 .L2140:
 	ldrh	w0, [x22,1956]
 	cmp	w0, w21
@@ -13772,9 +13802,9 @@ decrement_vpc_count:
 	add	x22, x20, :lo12:.LANCHOR2
 	ldrh	w2, [x0,x21]
 	cbnz	w2, .L2154
-	adrp	x0, .LC125
+	adrp	x0, .LC126
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC125
+	add	x0, x0, :lo12:.LC126
 	add	x23, x22, 24
 	bl	printk
 	ldr	x0, [x20,#:lo12:.LANCHOR2]
@@ -13793,8 +13823,8 @@ decrement_vpc_count:
 	mov	w0, w19
 	bl	INSERT_DATA_LIST
 	ldr	x2, [x20,#:lo12:.LANCHOR2]
-	adrp	x0, .LC126
-	add	x0, x0, :lo12:.LC126
+	adrp	x0, .LC127
+	add	x0, x0, :lo12:.LC127
 	mov	w1, w19
 	ldrh	w2, [x2,x21]
 	bl	printk
@@ -14099,7 +14129,7 @@ FtlVpcTblFlush:
 	ldrh	w1, [x19,42]
 	ldrb	w2, [x19,46]
 	str	w0, [x19,-64]
-	mov	w0, 86
+	mov	w0, 87
 	orr	w1, w2, w1, lsl 6
 	strh	w1, [x19,-48]
 	ldrh	w1, [x19,88]
@@ -14240,8 +14270,8 @@ FtlVpcTblFlush:
 	cmp	w21, 3
 	bls	.L2196
 	add	x23, x23, :lo12:.LANCHOR4
-	adrp	x0, .LC127
-	add	x0, x0, :lo12:.LC127
+	adrp	x0, .LC128
+	add	x0, x0, :lo12:.LC128
 	mov	w2, w21
 	add	x22, x22, :lo12:.LANCHOR2
 	ldr	w1, [x23,164]
@@ -14439,9 +14469,9 @@ ftl_map_blk_gc:
 	adrp	x1, .LANCHOR4
 	str	wzr, [x27]
 	add	x1, x1, :lo12:.LANCHOR4
-	adrp	x0, .LC128
+	adrp	x0, .LC129
 	ldrh	w2, [x23,8]
-	add	x0, x0, :lo12:.LC128
+	add	x0, x0, :lo12:.LC129
 	ldr	w1, [x1,164]
 	bl	printk
 	adrp	x0, .LANCHOR2
@@ -14610,7 +14640,7 @@ FtlMapWritePage:
 	mov	x28, x0
 	stp	x23, x24, [sp,48]
 	add	x23, x27, :lo12:.LANCHOR4
-	adrp	x24, .LC129
+	adrp	x24, .LC130
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
@@ -14618,7 +14648,7 @@ FtlMapWritePage:
 	str	x2, [x29,104]
 	mov	w22, 0
 	add	x23, x23, 160
-	add	x24, x24, :lo12:.LC129
+	add	x24, x24, :lo12:.LC130
 .L2250:
 	adrp	x19, .LANCHOR2
 	adrp	x20, .LANCHOR0
@@ -14705,8 +14735,8 @@ FtlMapWritePage:
 	cmp	w22, 3
 	bls	.L2250
 	add	x21, x21, :lo12:.LANCHOR4
-	adrp	x0, .LC130
-	add	x0, x0, :lo12:.LC130
+	adrp	x0, .LC131
+	add	x0, x0, :lo12:.LC131
 	mov	w2, w22
 	add	x19, x19, :lo12:.LANCHOR2
 	ldr	w1, [x21,164]
@@ -15171,7 +15201,7 @@ Ftl_save_ext_data:
 	ldr	w3, [x0,336]
 	cmp	w3, w1
 	bne	.L2327
-	mov	w1, 86
+	mov	w1, 87
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2,4]
 	ldr	w1, [x0,224]
@@ -15292,8 +15322,8 @@ FtlVendorPartRead:
 	mov	w0, -1
 	bhi	.L2338
 	adrp	x27, .LANCHOR4
-	adrp	x0, .LC131
-	add	x0, x0, :lo12:.LC131
+	adrp	x0, .LC132
+	add	x0, x0, :lo12:.LC132
 	add	x27, x27, :lo12:.LANCHOR4
 	str	x0, [x29,128]
 	lsr	w20, w23, w20
@@ -15395,8 +15425,8 @@ FtlLoadEctTbl:
 	cmp	w1, w0
 	beq	.L2349
 	adrp	x0, .LC75
-	adrp	x1, .LC132
-	add	x1, x1, :lo12:.LC132
+	adrp	x1, .LC133
+	add	x1, x1, :lo12:.LC133
 	add	x0, x0, :lo12:.LC75
 	bl	printk
 	ldrh	w2, [x19,2144]
@@ -15483,9 +15513,9 @@ Ftl_load_ext_data:
 	mov	w1, 1
 	str	w1, [x0,1948]
 	adrp	x0, .LC75
-	adrp	x1, .LC133
+	adrp	x1, .LC134
 	add	x0, x0, :lo12:.LC75
-	add	x1, x1, :lo12:.LC133
+	add	x1, x1, :lo12:.LC134
 	bl	printk
 .L2353:
 	add	x19, x19, :lo12:.LANCHOR2
@@ -15588,9 +15618,9 @@ FlashReadFacBbtData.part.16:
 	ldr	x1, [x4,56]
 	bl	ftl_memcpy
 	mov	w2, 4
-	adrp	x0, .LC134
+	adrp	x0, .LC135
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC134
+	add	x0, x0, :lo12:.LC135
 	mov	w3, w2
 	bl	rknand_print_hex
 	ldr	x19, [sp,16]
@@ -16071,10 +16101,10 @@ log2phys:
 	ldrh	w0, [x0,8]
 	cmp	w0, w23
 	beq	.L2419
-	adrp	x0, .LC135
+	adrp	x0, .LC136
 	uxth	w1, w24
 	mov	w2, w25
-	add	x0, x0, :lo12:.LC135
+	add	x0, x0, :lo12:.LC136
 	bl	printk
 	ldr	x1, [x22,16]
 	mov	w2, 4
@@ -16086,8 +16116,8 @@ log2phys:
 	mov	w2, 4
 	ldr	x1, [x28,2216]
 	add	x22, x0, :lo12:.LANCHOR0
-	adrp	x0, .LC136
-	add	x0, x0, :lo12:.LC136
+	adrp	x0, .LC137
+	add	x0, x0, :lo12:.LC137
 	ldrh	w3, [x22,2060]
 	bl	rknand_print_hex
 	mov	w0, 1
@@ -16098,10 +16128,10 @@ log2phys:
 	cmp	w0, 256
 	bne	.L2420
 	and	w24, w24, 65535
-	adrp	x0, .LC137
+	adrp	x0, .LC138
 	mov	w1, w24
 	mov	w2, w25
-	add	x0, x0, :lo12:.LC137
+	add	x0, x0, :lo12:.LC138
 	bl	printk
 	ldr	x2, [x28,184]
 	add	x0, x28, 2256
@@ -16374,11 +16404,11 @@ allocate_new_data_superblock:
 FtlCheckVpc:
 	stp	x29, x30, [sp, -96]!
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC106
+	adrp	x0, .LC107
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x29, sp, 0
 	add	x1, x1, 80
-	add	x0, x0, :lo12:.LC106
+	add	x0, x0, :lo12:.LC107
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR4
 	mov	w19, 0
@@ -16416,11 +16446,11 @@ FtlCheckVpc:
 	add	w19, w19, 1
 	b	.L2474
 .L2491:
-	adrp	x21, .LC138
+	adrp	x21, .LC139
 	mov	w19, 0
 	adrp	x22, .LANCHOR2
 	add	x25, x20, :lo12:.LANCHOR4
-	add	x21, x21, :lo12:.LC138
+	add	x21, x21, :lo12:.LC139
 .L2477:
 	add	x0, x24, :lo12:.LANCHOR0
 	adrp	x23, .LANCHOR2
@@ -16446,13 +16476,13 @@ FtlCheckVpc:
 	ldr	x0, [x1,24]
 	cbz	x0, .L2473
 	ldr	x19, [x1,-16]
-	adrp	x22, .LC139
+	adrp	x22, .LC140
 	ldrh	w24, [x1,32]
 	mov	w21, 0
 	sub	x19, x0, x19
 	mov	x0, -6148914691236517206
 	asr	x19, x19, 1
-	add	x22, x22, :lo12:.LC139
+	add	x22, x22, :lo12:.LC140
 	add	x20, x20, :lo12:.LANCHOR4
 	mov	w25, 6
 	madd	x19, x0, x19, x19
@@ -16493,8 +16523,8 @@ FtlCheckVpc:
 	.type	Ftlscanalldata, %function
 Ftlscanalldata:
 	sub	sp, sp, #80
-	adrp	x0, .LC140
-	add	x0, x0, :lo12:.LC140
+	adrp	x0, .LC141
+	add	x0, x0, :lo12:.LC141
 	mov	w1, 0
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
@@ -16503,8 +16533,8 @@ Ftlscanalldata:
 	mov	w20, 0
 	stp	x21, x22, [sp,48]
 	add	x19, x19, :lo12:.LANCHOR4
-	adrp	x21, .LC141
-	add	x21, x21, :lo12:.LC141
+	adrp	x21, .LC142
+	add	x21, x21, :lo12:.LC142
 	add	x19, x19, 160
 	bl	printk
 .L2494:
@@ -16556,8 +16586,8 @@ Ftlscanalldata:
 	ldr	x6, [x2,16]
 	ldr	w0, [x7,4]
 	str	w0, [sp]
-	adrp	x0, .LC142
-	add	x0, x0, :lo12:.LC142
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
 	ldr	w3, [x6]
 	ldr	w4, [x6,4]
 	ldr	w5, [x6,8]
@@ -16664,7 +16694,7 @@ FtlRecoverySuperblock:
 	mov	x19, x0
 	ldrh	w0, [x0]
 	cmp	w0, w2
-	beq	.L2673
+	beq	.L2672
 	ldrh	w0, [x19,2]
 	adrp	x23, .LANCHOR0
 	str	w0, [x29,188]
@@ -16676,19 +16706,19 @@ FtlRecoverySuperblock:
 	cmp	w0, w1
 	bne	.L2514
 	strh	wzr, [x19,4]
-	b	.L2679
+	b	.L2678
 .L2514:
 	ldrh	w0, [x19,16]
 	mov	w1, 0
 .L2515:
 	cmp	w0, w2
-	bne	.L2682
+	bne	.L2681
 	add	w1, w1, 1
 	uxth	w1, w1
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
 	b	.L2515
-.L2682:
+.L2681:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
 	bne	.L2517
@@ -16724,9 +16754,9 @@ FtlRecoverySuperblock:
 	b	.L2520
 .L2518:
 	strh	wzr, [x19,2]
-.L2679:
+.L2678:
 	strb	wzr, [x19,6]
-	b	.L2673
+	b	.L2672
 .L2522:
 	ldrh	w1, [x2,16]
 	cmp	w1, w8
@@ -16772,9 +16802,9 @@ FtlRecoverySuperblock:
 	ldr	x0, [x22,2048]
 	bl	FlashReadPages
 	ldr	w0, [x22,236]
-	adrp	x22, .LC143
+	adrp	x22, .LC144
 	str	w0, [x29,168]
-	add	x22, x22, :lo12:.LC143
+	add	x22, x22, :lo12:.LC144
 	uxth	w0, w24
 	str	w0, [x29,160]
 .L2524:
@@ -16811,13 +16841,13 @@ FtlRecoverySuperblock:
 	bne	.L2527
 .L2531:
 	cmp	w2, w26
-	bne	.L2674
+	bne	.L2673
 	add	x0, x21, :lo12:.LANCHOR2
 	add	w20, w20, 1
 	uxth	w20, w20
 	ldr	x0, [x0,2048]
 	ldr	w0, [x0,4]
-	b	.L2675
+	b	.L2674
 .L2525:
 	ldr	w1, [x1,4]
 	mov	x0, x22
@@ -16830,7 +16860,7 @@ FtlRecoverySuperblock:
 .L2527:
 	add	x27, x27, 1
 	b	.L2524
-.L2674:
+.L2673:
 	add	x0, x21, :lo12:.LANCHOR2
 	mov	w1, 56
 	uxth	w20, w20
@@ -16838,7 +16868,7 @@ FtlRecoverySuperblock:
 	ldr	x0, [x0,2048]
 	add	x2, x0, x2
 	ldr	w0, [x2,4]
-.L2675:
+.L2674:
 	lsr	x0, x0, 10
 	bl	P2V_plane
 	uxth	w26, w0
@@ -16866,7 +16896,7 @@ FtlRecoverySuperblock:
 	bne	.L2535
 	ldr	w0, [x29,152]
 	cmp	w26, w0
-	beq	.L2680
+	beq	.L2679
 .L2535:
 	ldr	w0, [x29,168]
 	sub	w22, w0, #1
@@ -16908,7 +16938,7 @@ FtlRecoverySuperblock:
 	add	x2, x19, x2, lsl 1
 .L2554:
 	cmp	x0, x2
-	beq	.L2683
+	beq	.L2682
 	ldrh	w1, [x0,16]
 	cmp	w1, w4
 	beq	.L2541
@@ -16922,7 +16952,7 @@ FtlRecoverySuperblock:
 .L2541:
 	add	x0, x0, 2
 	b	.L2554
-.L2683:
+.L2682:
 	ldr	x0, [x28,2048]
 	mov	w1, w24
 	ldr	w2, [x29,184]
@@ -16947,7 +16977,7 @@ FtlRecoverySuperblock:
 	ldr	x8, [x29,128]
 .L2543:
 	cmp	w1, w24
-	beq	.L2684
+	beq	.L2683
 	ldr	w2, [x0,-16]
 	cbnz	w2, .L2544
 	ldr	x2, [x0]
@@ -16992,7 +17022,7 @@ FtlRecoverySuperblock:
 	b	.L2537
 .L2550:
 	ldr	w1, [x0,2348]
-	b	.L2681
+	b	.L2680
 .L2548:
 	cmp	w27, w22
 	beq	.L2551
@@ -17004,34 +17034,34 @@ FtlRecoverySuperblock:
 	ldr	w1, [x0,2348]
 	cmp	w1, w22
 	beq	.L2537
-.L2681:
+.L2680:
 	sub	w1, w1, #1
-	b	.L2676
+	b	.L2675
 .L2545:
 	add	w1, w1, 1
 	add	x0, x0, 56
 	uxth	w1, w1
 	b	.L2543
-.L2684:
+.L2683:
 	add	w25, w25, 1
 	uxth	w25, w25
 	b	.L2540
 .L2553:
 	add	x0, x21, :lo12:.LANCHOR2
 	mov	w1, -1
-.L2676:
+.L2675:
 	str	w1, [x0,2348]
 .L2537:
 	adrp	x0, .LANCHOR5
 	str	x0, [x29,136]
 	add	x1, x0, :lo12:.LANCHOR5
-	adrp	x0, .LC145
-	add	x0, x0, :lo12:.LC145
+	adrp	x0, .LC146
+	add	x0, x0, :lo12:.LC146
 	ldr	w24, [x29,188]
 	str	x0, [x29,128]
-	adrp	x0, .LC144
+	adrp	x0, .LC145
 	mov	w2, 1
-	add	x0, x0, :lo12:.LC144
+	add	x0, x0, :lo12:.LC145
 	strh	w2, [x1,-214]
 	str	x0, [x29,120]
 .L2555:
@@ -17045,7 +17075,7 @@ FtlRecoverySuperblock:
 	add	x3, x19, x3, lsl 1
 .L2556:
 	cmp	x1, x3
-	beq	.L2685
+	beq	.L2684
 	ldrh	w2, [x1,16]
 	cmp	w2, w7
 	beq	.L2557
@@ -17073,7 +17103,7 @@ FtlRecoverySuperblock:
 .L2557:
 	add	x1, x1, 2
 	b	.L2556
-.L2685:
+.L2684:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldr	w1, [x29,176]
 	ldr	w2, [x29,184]
@@ -17084,7 +17114,7 @@ FtlRecoverySuperblock:
 	ldrh	w0, [x29,160]
 	ldr	w1, [x29,176]
 	cmp	w1, w0, uxth
-	bls	.L2686
+	bls	.L2685
 	ldr	x0, [x29,160]
 	mov	x25, 56
 	mul	x25, x0, x25
@@ -17122,7 +17152,7 @@ FtlRecoverySuperblock:
 	cmp	w1, w0
 	beq	.L2566
 	ldrh	w0, [x19]
-	b	.L2677
+	b	.L2676
 .L2566:
 	ldr	w22, [x28,4]
 	cmn	w22, #1
@@ -17249,13 +17279,14 @@ FtlRecoverySuperblock:
 	ldr	w1, [x29,200]
 	cmp	w1, w0
 	beq	.L2578
+	cmn	w28, #1
+	beq	.L2580
 	add	x0, x23, :lo12:.LANCHOR0
+	ubfx	x28, x28, 10, 21
 	ldr	w0, [x0,1972]
-	cmp	w0, w28, lsr 10
-	bhi	.L2598
-	cmn	w28, #1
-	bne	.L2561
-.L2598:
+	cmp	w28, w0
+	bcs	.L2561
+.L2580:
 	mov	w0, w27
 	add	x1, x29, 204
 	mov	w2, 1
@@ -17313,7 +17344,7 @@ FtlRecoverySuperblock:
 	ldr	x3, [x21,#:lo12:.LANCHOR2]
 	ldrh	w2, [x3,x2]
 	cbz	w2, .L2583
-.L2677:
+.L2676:
 	bl	decrement_vpc_count
 	b	.L2561
 .L2583:
@@ -17342,17 +17373,17 @@ FtlRecoverySuperblock:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldr	w1, [x0,2348]
 	cmn	w1, #1
-	beq	.L2678
+	beq	.L2677
 	cmp	w1, w22
 	bls	.L2561
-.L2678:
+.L2677:
 	str	w22, [x0,2348]
 .L2561:
 	ldr	x0, [x29,160]
 	add	x0, x0, 1
 	str	x0, [x29,160]
 	b	.L2560
-.L2686:
+.L2685:
 	ldrb	w0, [x19,8]
 	add	w24, w24, 1
 	cmp	w0, 1
@@ -17379,23 +17410,23 @@ FtlRecoverySuperblock:
 .L2589:
 	uxth	w1, w0
 	cmp	w1, w2
-	bcs	.L2673
+	bcs	.L2672
 	add	x0, x0, 1
 	add	x4, x19, x0, lsl 1
 	ldrh	w4, [x4,14]
 	cmp	w4, w3
 	beq	.L2589
 	strb	w1, [x19,6]
-	b	.L2673
+	b	.L2672
 .L2563:
 	strb	w26, [x19,6]
 	strh	w20, [x19,2]
-.L2680:
+.L2679:
 	mov	x0, x19
 	mov	w1, w20
 	mov	w2, w26
 	bl	ftl_sb_update_avl_pages
-.L2673:
+.L2672:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -17411,11 +17442,11 @@ FtlRecoverySuperblock:
 FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC106
+	adrp	x0, .LC107
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x29, sp, 0
 	add	x1, x1, 96
-	add	x0, x0, :lo12:.LC106
+	add	x0, x0, :lo12:.LC107
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
@@ -17430,18 +17461,18 @@ FtlVpcCheckAndModify:
 	ldr	x0, [x0,2168]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L2688:
+.L2687:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w0, [x0,2096]
 	cmp	w19, w0
-	bcs	.L2704
+	bcs	.L2703
 	mov	w0, w19
 	add	x1, x29, 76
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2689
+	beq	.L2688
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ubfiz	x0, x0, 1, 16
@@ -17450,59 +17481,59 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2,x0]
 	add	w1, w1, 1
 	strh	w1, [x2,x0]
-.L2689:
+.L2688:
 	add	w19, w19, 1
-	b	.L2688
-.L2704:
-	adrp	x23, .LC146
+	b	.L2687
+.L2703:
+	adrp	x23, .LC147
 	mov	w19, 0
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w24, 65535
-	add	x23, x23, :lo12:.LC146
-.L2691:
+	add	x23, x23, :lo12:.LC147
+.L2690:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0,1964]
 	cmp	w0, w19
-	bls	.L2705
+	bls	.L2704
 	ubfiz	x21, x19, 1, 16
 	ldr	x0, [x20]
 	ldrh	w2, [x0,x21]
 	ldr	x0, [x20,2168]
 	ldrh	w3, [x0,x21]
 	cmp	w2, w3
-	beq	.L2694
+	beq	.L2693
 	cmp	w2, w24
-	beq	.L2694
+	beq	.L2693
 	mov	x0, x23
 	mov	w1, w19
 	bl	printk
 	ldrh	w0, [x20,40]
 	cmp	w0, w19
-	beq	.L2694
+	beq	.L2693
 	ldrh	w0, [x20,136]
 	cmp	w0, w19
-	beq	.L2694
+	beq	.L2693
 	ldrh	w0, [x20,88]
 	cmp	w0, w19
-	beq	.L2694
+	beq	.L2693
 	ldr	x0, [x20]
 	ldrh	w1, [x0,x21]
-	cbnz	w1, .L2696
+	cbnz	w1, .L2695
 	ldr	x1, [x20,2168]
 	ldrh	w1, [x1,x21]
 	strh	w1, [x0,x21]
-	b	.L2694
-.L2696:
+	b	.L2693
+.L2695:
 	ldr	x1, [x20,2168]
 	ldrh	w1, [x1,x21]
 	strh	w1, [x0,x21]
 	mov	w0, w19
 	bl	update_vpc_list
-.L2694:
+.L2693:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2691
-.L2705:
+	b	.L2690
+.L2704:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldp	x19, x20, [sp,16]
@@ -17530,36 +17561,36 @@ FtlGcScanTempBlk:
 	ldrh	w26, [x0,3296]
 	mov	w0, 65535
 	cmp	w26, w0
-	beq	.L2736
-	cbnz	w26, .L2707
-	b	.L2708
-.L2736:
+	beq	.L2735
+	cbnz	w26, .L2706
+	b	.L2707
+.L2735:
 	mov	w26, 0
-.L2707:
+.L2706:
 	adrp	x0, .LANCHOR0+2024
 	ldr	w1, [x29,164]
 	ldrh	w0, [x0,#:lo12:.LANCHOR0+2024]
 	cmp	w1, w0
-	bne	.L2709
-.L2708:
+	bne	.L2708
+.L2707:
 	bl	FtlGcPageVarInit
-.L2709:
+.L2708:
 	mov	w0, -1
 	adrp	x25, .LANCHOR0
 	str	w0, [x29,168]
-	adrp	x0, .LC148
-	add	x0, x0, :lo12:.LC148
+	adrp	x0, .LC149
+	add	x0, x0, :lo12:.LC149
 	mov	w22, 0
 	mov	x24, x25
 	str	x0, [x29,144]
-.L2710:
+.L2709:
 	ldrh	w0, [x19]
 	mov	w21, 65535
 	strb	wzr, [x19,8]
 	cmp	w0, w21
-	beq	.L2711
-.L2712:
-.L2733:
+	beq	.L2710
+.L2711:
+.L2732:
 	add	x0, x25, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w20, 0
@@ -17570,12 +17601,12 @@ FtlGcScanTempBlk:
 	ldrh	w8, [x0,2034]
 	ldrh	w9, [x0,2036]
 	add	x6, x19, x6, lsl 1
-.L2713:
+.L2712:
 	cmp	x2, x6
-	beq	.L2753
+	beq	.L2752
 	ldrh	w1, [x2,16]
 	cmp	w1, w21
-	beq	.L2714
+	beq	.L2713
 	add	x4, x11, :lo12:.LANCHOR2
 	orr	w1, w26, w1, lsl 10
 	umull	x0, w20, w10
@@ -17596,10 +17627,10 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w7
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x0,16]
-.L2714:
+.L2713:
 	add	x2, x2, 2
-	b	.L2713
-.L2753:
+	b	.L2712
+.L2752:
 	adrp	x28, .LANCHOR2
 	mov	w1, w20
 	add	x0, x28, :lo12:.LANCHOR2
@@ -17608,9 +17639,9 @@ FtlGcScanTempBlk:
 	mov	x27, x28
 	ldr	x0, [x0,2048]
 	bl	FlashReadPages
-.L2716:
+.L2715:
 	cmp	w20, w23, uxth
-	bls	.L2754
+	bls	.L2753
 	add	x8, x27, :lo12:.LANCHOR2
 	mov	x0, 56
 	mul	x28, x23, x0
@@ -17620,17 +17651,17 @@ FtlGcScanTempBlk:
 	ldr	w2, [x1,4]
 	str	w2, [x29,172]
 	ldr	x7, [x1,16]
-	cbnz	w10, .L2717
+	cbnz	w10, .L2716
 	ldrh	w0, [x7]
 	cmp	w0, w21
-	beq	.L2752
+	beq	.L2751
 	add	x9, x24, :lo12:.LANCHOR0
 	ldr	w0, [x7,8]
 	ldr	w1, [x9,2096]
 	cmp	w0, w1
-	bhi	.L2752
+	bhi	.L2751
 	ldrb	w1, [x9,72]
-	cbz	w1, .L2722
+	cbz	w1, .L2721
 	add	x1, x29, 180
 	mov	w2, w10
 	str	x7, [x29,136]
@@ -17642,9 +17673,9 @@ FtlGcScanTempBlk:
 	ldr	w1, [x29,180]
 	ldr	w0, [x7,12]
 	cmp	w1, w0
-	bne	.L2722
+	bne	.L2721
 	cmn	w1, #1
-	beq	.L2722
+	beq	.L2721
 	ldr	x8, [x29,112]
 	mov	w1, 1
 	str	w0, [x29,188]
@@ -17667,22 +17698,22 @@ FtlGcScanTempBlk:
 	add	x6, x0, x28
 	lsl	w2, w2, 7
 	mov	x0, 0
-.L2724:
+.L2723:
 	cmp	w2, w0
-	bls	.L2722
+	bls	.L2721
 	lsl	x1, x0, 2
 	ldr	x9, [x6,8]
 	add	x0, x0, 1
 	ldr	w9, [x9,x1]
 	ldr	w1, [x8,x1]
 	cmp	w9, w1
-	beq	.L2724
-	adrp	x0, .LC147
+	beq	.L2723
+	adrp	x0, .LC148
 	ldrh	w1, [x19]
 	ldr	w2, [x29,188]
-	add	x0, x0, :lo12:.LC147
+	add	x0, x0, :lo12:.LC148
 	bl	printk
-.L2752:
+.L2751:
 	ldr	x0, [x27,#:lo12:.LANCHOR2]
 	add	x21, x27, :lo12:.LANCHOR2
 	ldrh	w1, [x19]
@@ -17692,15 +17723,15 @@ FtlGcScanTempBlk:
 	mov	w0, -1
 	strh	w0, [x19]
 	strh	w0, [x21,280]
-	b	.L2751
-.L2722:
+	b	.L2750
+.L2721:
 	ldr	w0, [x7,12]
 	add	x23, x23, 1
 	ldr	w1, [x29,172]
 	ldr	w2, [x7,8]
 	bl	FtlGcUpdatePage
-	b	.L2716
-.L2717:
+	b	.L2715
+.L2716:
 	ldrh	w1, [x19]
 	ldr	x0, [x29,144]
 	ldr	w2, [x29,172]
@@ -17708,29 +17739,29 @@ FtlGcScanTempBlk:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	w1, [x0,1948]
-	cbnz	w1, .L2727
+	cbnz	w1, .L2726
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2728
-.L2727:
+	cbz	w0, .L2727
+.L2726:
 	add	x0, x27, :lo12:.LANCHOR2
 	ldrh	w1, [x19]
 	ldr	x0, [x0,-80]
 	ldrh	w0, [x0,x1,lsl 1]
 	cmp	w0, 159
-	bls	.L2729
-.L2728:
+	bls	.L2728
+.L2727:
 	add	x0, x27, :lo12:.LANCHOR2
 	ldr	x0, [x0,2048]
 	ldr	w0, [x0,x28]
 	cmn	w0, #1
-	bne	.L2730
-.L2729:
+	bne	.L2729
+.L2728:
 	add	x0, x27, :lo12:.LANCHOR2
 	ldr	x0, [x0,2048]
 	add	x6, x0, x28
 	ldr	w0, [x6,4]
 	str	w0, [x29,168]
-.L2730:
+.L2729:
 	ldr	x0, [x27,#:lo12:.LANCHOR2]
 	ldrh	w1, [x19]
 	strh	wzr, [x0,x1,lsl 1]
@@ -17738,37 +17769,37 @@ FtlGcScanTempBlk:
 	bl	INSERT_FREE_LIST
 	mov	w0, -1
 	strh	w0, [x19]
-.L2751:
+.L2750:
 	bl	FtlGcPageVarInit
 	mov	w26, 0
-	b	.L2710
-.L2754:
+	b	.L2709
+.L2753:
 	ldr	w0, [x29,164]
 	add	w22, w22, 1
 	add	w3, w26, 1
 	cmp	w22, w0
 	uxth	w26, w3
-	bcs	.L2732
-.L2734:
+	bcs	.L2731
+.L2733:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2024]
 	cmp	w0, w26
-	bhi	.L2733
-	b	.L2711
-.L2732:
+	bhi	.L2732
+	b	.L2710
+.L2731:
 	ldr	x0, [x29,152]
 	add	x1, x0, :lo12:.LANCHOR1
 	ldrh	w0, [x1,3296]
 	cmp	w0, w21
-	beq	.L2734
+	beq	.L2733
 	add	w0, w0, w22
 	strh	w0, [x1,3296]
 	add	x0, x24, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2024]
 	cmp	w0, w26
-	bls	.L2734
-	b	.L2735
-.L2711:
+	bls	.L2733
+	b	.L2734
+.L2710:
 	ldr	x0, [x29,152]
 	mov	w1, w26
 	strh	w26, [x19,2]
@@ -17779,7 +17810,7 @@ FtlGcScanTempBlk:
 	strh	w0, [x20,3296]
 	mov	x0, x19
 	bl	ftl_sb_update_avl_pages
-.L2735:
+.L2734:
 	ldr	w0, [x29,168]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -17802,21 +17833,21 @@ FtlReadRefresh:
 	stp	x21, x22, [sp,32]
 	adrp	x20, .LANCHOR0
 	ldr	w0, [x3,80]
-	cbz	w0, .L2756
+	cbz	w0, .L2755
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w2, [x3,84]
 	ldr	w0, [x0,2096]
 	cmp	w2, w0
-	bcs	.L2757
+	bcs	.L2756
 	mov	w21, 2048
 	mov	x19, x1
-.L2762:
+.L2761:
 	add	x22, x19, 336
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	w0, [x22,84]
 	ldr	w1, [x1,2096]
 	cmp	w0, w1
-	bcs	.L2761
+	bcs	.L2760
 	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
@@ -17825,7 +17856,7 @@ FtlReadRefresh:
 	add	w0, w0, 1
 	str	w0, [x22,84]
 	cmn	w1, #1
-	beq	.L2760
+	beq	.L2759
 	str	w1, [x29,60]
 	mov	w2, 0
 	str	w0, [x29,80]
@@ -17837,25 +17868,25 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29,56]
 	cmp	w0, 256
-	bne	.L2761
+	bne	.L2760
 	ldr	w0, [x29,52]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L2761:
-	mov	w0, -1
-	b	.L2764
 .L2760:
+	mov	w0, -1
+	b	.L2763
+.L2759:
 	subs	w21, w21, #1
-	bne	.L2762
-	b	.L2761
-.L2757:
+	bne	.L2761
+	b	.L2760
+.L2756:
 	ldr	w0, [x1,200]
 	str	wzr, [x3,80]
 	str	wzr, [x3,84]
 	str	w0, [x3,76]
-	b	.L2771
-.L2756:
+	b	.L2770
+.L2755:
 	ldr	w4, [x1,252]
 	mov	w6, 10000
 	mov	w8, 63
@@ -17868,7 +17899,7 @@ FtlReadRefresh:
 	add	w9, w7, 1048576
 	cmp	w6, w9
 	ldr	w5, [x20,2096]
-	bhi	.L2766
+	bhi	.L2765
 	mov	w9, 1000
 	lsr	w4, w4, 10
 	add	w4, w4, 1
@@ -17876,14 +17907,14 @@ FtlReadRefresh:
 	udiv	w4, w5, w4
 	add	w4, w4, w6
 	cmp	w4, w7
-	bcc	.L2766
+	bcc	.L2765
 	ldrh	w1, [x1,-36]
 	tst	w8, w1
-	bne	.L2764
+	bne	.L2763
 	ldr	w3, [x3,100]
 	cmp	w3, w1
-	beq	.L2764
-.L2766:
+	beq	.L2763
+.L2765:
 	add	x0, x2, :lo12:.LANCHOR2
 	add	x1, x0, 336
 	ldrh	w0, [x0,-36]
@@ -17892,9 +17923,9 @@ FtlReadRefresh:
 	str	wzr, [x1,84]
 	str	w0, [x1,80]
 	str	w7, [x1,76]
-.L2771:
+.L2770:
 	mov	w0, 0
-.L2764:
+.L2763:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
@@ -17916,19 +17947,19 @@ FtlGcFreeTempBlock:
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	w3, [x2,-96]
 	ldrh	w1, [x1,2024]
-	cbnz	w3, .L2808
+	cbnz	w3, .L2807
 	ldrh	w20, [x2,136]
 	mov	w4, 65535
 	cmp	w20, w4
-	bne	.L2775
-.L2784:
+	bne	.L2774
+.L2783:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
 	add	x22, x20, 136
 	ldrh	w1, [x20,136]
 	str	wzr, [x20,2344]
 	cmp	w1, w0
-	beq	.L2808
+	beq	.L2807
 	bl	FtlCacheWriteBack
 	mov	w26, 12
 	adrp	x0, .LANCHOR2
@@ -17944,42 +17975,42 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x20,920]
 	add	w0, w1, w0
 	str	w0, [x20,220]
-	b	.L2785
-.L2775:
-	cbz	w0, .L2778
+	b	.L2784
+.L2774:
+	cbz	w0, .L2777
 	adrp	x0, .LANCHOR1
 	add	x0, x0, :lo12:.LANCHOR1
 	ldrh	w5, [x0,3296]
 	cmp	w5, w4
-	beq	.L2779
-.L2780:
-	mov	w1, 2
-	b	.L2778
+	beq	.L2778
 .L2779:
+	mov	w1, 2
+	b	.L2777
+.L2778:
 	strh	w3, [x0,3296]
 	ldrh	w0, [x2,32]
 	cmp	w0, 17
-	bhi	.L2780
-.L2778:
+	bhi	.L2779
+.L2777:
 	add	x22, x19, :lo12:.LANCHOR2
 	add	x0, x22, 136
 	bl	FtlGcScanTempBlk
 	str	w0, [x29,92]
 	cmn	w0, #1
-	beq	.L2781
+	beq	.L2780
 	ubfiz	x20, x20, 1, 16
 	ldr	x1, [x22,-80]
 	ldrh	w0, [x1,x20]
 	cmp	w0, 4
-	bls	.L2782
+	bls	.L2781
 	sub	w0, w0, #5
 	strh	w0, [x1,x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L2782:
+.L2781:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,2344]
-	cbnz	w1, .L2783
+	cbnz	w1, .L2782
 	ldr	w1, [x0,432]
 	add	w1, w1, 1
 	str	w1, [x0,432]
@@ -17987,30 +18018,30 @@ FtlGcFreeTempBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L2783:
+.L2782:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
 	str	wzr, [x19,2344]
-	b	.L2774
-.L2781:
+	b	.L2773
+.L2780:
 	adrp	x0, .LANCHOR1+3296
 	mov	w1, 65535
 	ldrh	w2, [x0,#:lo12:.LANCHOR1+3296]
 	mov	w0, 1
 	cmp	w2, w1
-	bne	.L2774
-	b	.L2784
-.L2788:
+	bne	.L2773
+	b	.L2783
+.L2787:
 	ldr	w1, [x23,4]
 	cmp	w0, w1
-	bne	.L2806
-.L2787:
+	bne	.L2805
+.L2786:
 	add	w22, w22, 1
 	uxth	w22, w22
-.L2785:
+.L2784:
 	ldrh	w0, [x20,920]
 	cmp	w0, w22
-	bls	.L2809
+	bls	.L2808
 	umull	x24, w22, w26
 	ldr	x25, [x20,928]
 	add	x1, x21, :lo12:.LANCHOR0
@@ -18018,14 +18049,14 @@ FtlGcFreeTempBlock:
 	ldr	w1, [x1,2096]
 	ldr	w0, [x23,8]
 	cmp	w0, w1
-	bcs	.L2806
+	bcs	.L2805
 	add	x1, x29, 92
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,92]
 	ldr	w1, [x25,x24]
 	cmp	w0, w1
-	bne	.L2788
+	bne	.L2787
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	mov	w24, w0
@@ -18034,34 +18065,34 @@ FtlGcFreeTempBlock:
 	mov	w2, 1
 	bl	log2phys
 	mov	w0, w24
-	b	.L2807
-.L2806:
+	b	.L2806
+.L2805:
 	ldrh	w0, [x20,136]
-.L2807:
+.L2806:
 	bl	decrement_vpc_count
-	b	.L2787
-.L2809:
+	b	.L2786
+.L2808:
 	mov	w0, -1
 	bl	decrement_vpc_count
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2790
-	adrp	x0, .LC149
+	cbz	w0, .L2789
+	adrp	x0, .LC150
 	ldrh	w1, [x20,136]
-	add	x0, x0, :lo12:.LC149
+	add	x0, x0, :lo12:.LC150
 	bl	printk
-.L2790:
+.L2789:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x2, [x19,#:lo12:.LANCHOR2]
 	ldrh	w0, [x0,136]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2,x1]
-	cbz	w1, .L2791
+	cbz	w1, .L2790
 	bl	INSERT_DATA_LIST
-	b	.L2792
-.L2791:
+	b	.L2791
+.L2790:
 	bl	INSERT_FREE_LIST
-.L2792:
+.L2791:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w22, -1
 	strh	wzr, [x20,920]
@@ -18072,36 +18103,36 @@ FtlGcFreeTempBlock:
 	strh	w22, [x20,280]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w0, [x0,1948]
-	cbz	w0, .L2793
+	cbz	w0, .L2792
 	ldr	w0, [x20,256]
 	cmp	w0, 39
-	bhi	.L2793
+	bhi	.L2792
 	ldrh	w0, [x20,260]
 	ldrh	w1, [x20,32]
 	cmp	w1, w0
-	bcs	.L2808
+	bcs	.L2807
 	lsl	w0, w0, 1
 	strh	w0, [x20,848]
-.L2808:
+.L2807:
 	mov	w0, 0
-	b	.L2774
-.L2793:
+	b	.L2773
+.L2792:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x19,260]
 	ldrh	w0, [x19,32]
 	add	w2, w1, w1, lsl 1
 	cmp	w0, w2, lsr 2
-	ble	.L2808
+	ble	.L2807
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x21,196]
-	cbz	w0, .L2794
+	cbz	w0, .L2793
 	sub	w1, w1, #2
 	strh	w1, [x19,848]
-	b	.L2808
-.L2794:
+	b	.L2807
+.L2793:
 	mov	w1, 20
 	strh	w1, [x19,848]
-.L2774:
+.L2773:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -18128,13 +18159,13 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19,138]
 	ldrh	w0, [x20,2024]
 	cmp	w1, w0
-	bcc	.L2810
+	bcc	.L2809
 	add	x0, x19, 2256
 	bl	FtlMapBlkWriteDumpData
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19,2344]
-.L2810:
+.L2809:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -18193,14 +18224,14 @@ FtlSysBlkInit:
 	ldrh	w1, [x23,264]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2814
-.L2816:
+	bne	.L2813
+.L2815:
 	mov	w22, -1
-	b	.L2815
-.L2814:
+	b	.L2814
+.L2813:
 	bl	FtlLoadSysInfo
 	mov	w22, w0
-	cbnz	w0, .L2816
+	cbnz	w0, .L2815
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -18213,25 +18244,25 @@ FtlSysBlkInit:
 	ldrh	w2, [x24,2062]
 	mov	x1, 0
 	ldr	x0, [x23,184]
-.L2817:
+.L2816:
 	cmp	w1, w2
 	mov	w3, w1
-	bge	.L2821
+	bge	.L2820
 	add	x4, x0, x1, lsl 4
 	add	x1, x1, 1
 	ldr	w4, [x4,4]
-	tbz	w4, #31, .L2817
-.L2821:
+	tbz	w4, #31, .L2816
+.L2820:
 	add	x1, x19, :lo12:.LANCHOR2
 	cmp	w3, w2
 	ldrh	w0, [x1,-36]
 	add	w0, w0, 1
 	strh	w0, [x1,-36]
-	blt	.L2818
+	blt	.L2817
 	add	x21, x21, :lo12:.LANCHOR5
 	ldrh	w0, [x21,-214]
-	cbz	w0, .L2822
-.L2818:
+	cbz	w0, .L2821
+.L2817:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	x4, [x19,#:lo12:.LANCHOR2]
 	ldrh	w2, [x1,40]
@@ -18262,18 +18293,18 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L2822:
+.L2821:
 	add	x21, x19, :lo12:.LANCHOR2
 	mov	w1, 65535
 	add	x24, x21, 40
 	ldrh	w0, [x21,40]
 	cmp	w0, w1
-	beq	.L2823
+	beq	.L2822
 	ldrh	w1, [x21,44]
-	cbnz	w1, .L2823
+	cbnz	w1, .L2822
 	ldrh	w1, [x21,92]
 	add	x23, x21, 88
-	cbnz	w1, .L2823
+	cbnz	w1, .L2822
 	bl	FtlGcRefreshOpenBlock
 	ldrh	w0, [x21,88]
 	bl	FtlGcRefreshOpenBlock
@@ -18282,17 +18313,17 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	x0, x23
 	bl	allocate_new_data_superblock
-.L2823:
+.L2822:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x20,72]
-	cbnz	w0, .L2824
+	cbnz	w0, .L2823
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x19,-36]
 	and	w0, w0, 31
-	cbnz	w0, .L2815
-.L2824:
+	cbnz	w0, .L2814
+.L2823:
 	bl	FtlVpcCheckAndModify
-.L2815:
+.L2814:
 	mov	w0, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -18312,7 +18343,7 @@ FtlLowFormat:
 	add	x19, x21, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,48]
 	ldr	w22, [x19,-96]
-	cbnz	w22, .L2832
+	cbnz	w22, .L2831
 	adrp	x20, .LANCHOR0
 	ldr	x0, [x19,2224]
 	add	x23, x20, :lo12:.LANCHOR0
@@ -18330,15 +18361,15 @@ FtlLowFormat:
 	str	w22, [x19,236]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L2833
+	cbz	w0, .L2832
 	bl	FtlMakeBbt
-.L2833:
+.L2832:
 	mov	w0, 0
-.L2834:
+.L2833:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldrh	w2, [x1,2030]
 	cmp	w0, w2, lsl 7
-	bge	.L2861
+	bge	.L2860
 	add	x3, x21, :lo12:.LANCHOR2
 	ubfiz	x2, x0, 2, 16
 	mvn	w1, w0
@@ -18351,15 +18382,15 @@ FtlLowFormat:
 	uxth	w0, w0
 	ldr	x3, [x3,2112]
 	str	w1, [x3,x2]
-	b	.L2834
-.L2861:
+	b	.L2833
+.L2860:
 	ldrh	w22, [x1,1964]
 	mov	w19, 0
-.L2836:
+.L2835:
 	add	x23, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x23,1966]
 	cmp	w0, w22
-	bls	.L2862
+	bls	.L2861
 	mov	w0, w22
 	mov	w1, 1
 	add	w22, w22, 1
@@ -18367,17 +18398,17 @@ FtlLowFormat:
 	add	w0, w19, w0
 	uxth	w22, w22
 	uxth	w19, w0
-	b	.L2836
-.L2862:
+	b	.L2835
+.L2861:
 	ldrh	w0, [x23,1956]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L2838
-.L2842:
+	bge	.L2837
+.L2841:
 	mov	w19, 0
 	mov	w22, w19
-	b	.L2839
-.L2838:
+	b	.L2838
+.L2837:
 	udiv	w19, w19, w0
 	ldr	w0, [x23,2056]
 	add	w0, w19, w0
@@ -18385,22 +18416,22 @@ FtlLowFormat:
 	ldrh	w0, [x23,1960]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x23,1964]
-.L2840:
+.L2839:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x0,1966]
 	cmp	w0, w19
-	bls	.L2842
+	bls	.L2841
 	mov	w0, w19
 	mov	w1, 1
 	add	w19, w19, 1
 	bl	FtlLowFormatEraseBlock
 	uxth	w19, w19
-	b	.L2840
-.L2839:
+	b	.L2839
+.L2838:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0,1964]
 	cmp	w1, w22
-	bls	.L2863
+	bls	.L2862
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -18408,8 +18439,8 @@ FtlLowFormat:
 	add	w0, w19, w0
 	uxth	w22, w22
 	uxth	w19, w0
-	b	.L2839
-.L2863:
+	b	.L2838
+.L2862:
 	add	x4, x21, :lo12:.LANCHOR2
 	ldrh	w1, [x0,1966]
 	ldrh	w2, [x0,1956]
@@ -18423,50 +18454,50 @@ FtlLowFormat:
 	mov	w5, 24
 	mul	w5, w2, w5
 	cmp	w19, w5
-	ble	.L2844
+	ble	.L2843
 	sub	w1, w1, w19
 	udiv	w1, w1, w2
 	str	w1, [x0,2096]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x4,260]
-.L2844:
+.L2843:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w0, [x0,1948]
 	cmp	w0, 1
-	bne	.L2845
+	bne	.L2844
 	add	x1, x21, :lo12:.LANCHOR2
 	udiv	w0, w19, w2
 	ldrh	w4, [x1,260]
 	add	w0, w4, w0
 	add	w0, w4, w0, asr 2
 	strh	w0, [x1,260]
-.L2845:
+.L2844:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2846
+	cbz	w0, .L2845
 	add	x1, x21, :lo12:.LANCHOR2
 	udiv	w0, w19, w2
 	ldrh	w4, [x1,260]
 	add	w0, w4, w0
 	add	w0, w4, w0, asr 2
 	strh	w0, [x1,260]
-.L2846:
+.L2845:
 	add	x5, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x5,2018]
-	cbz	w1, .L2848
+	cbz	w1, .L2847
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrh	w4, [x0,260]
 	add	w4, w4, w1, lsr 1
 	strh	w4, [x0,260]
 	mul	w4, w1, w2
 	cmp	w4, w19
-	ble	.L2848
+	ble	.L2847
 	add	w1, w1, 32
 	str	w3, [x5,2096]
 	add	w1, w6, w1
 	strh	w1, [x0,260]
-.L2848:
+.L2847:
 	add	x19, x21, :lo12:.LANCHOR2
 	add	x22, x20, :lo12:.LANCHOR0
 	adrp	x24, .LANCHOR4
@@ -18506,19 +18537,19 @@ FtlLowFormat:
 	strb	wzr, [x21,6]
 	strh	wzr, [x19,40]
 	bl	ftl_memset
-.L2850:
+.L2849:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w0, [x21,7]
-	cbnz	w0, .L2851
+	cbnz	w0, .L2850
 	ldrh	w1, [x21]
 	ldr	x0, [x19]
 	strh	w23, [x0,x1,lsl 1]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L2850
-.L2851:
+	b	.L2849
+.L2850:
 	ldr	w0, [x19,232]
 	mov	x20, x19
 	str	w0, [x21,12]
@@ -18536,19 +18567,19 @@ FtlLowFormat:
 	strh	w0, [x19,88]
 	mov	w0, 1
 	strb	w0, [x20,8]
-.L2852:
+.L2851:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L2853
+	cbnz	w0, .L2852
 	ldrh	w1, [x20]
 	ldr	x0, [x19]
 	strh	w21, [x0,x1,lsl 1]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L2852
-.L2853:
+	b	.L2851
+.L2852:
 	ldr	w0, [x19,232]
 	add	x22, x22, :lo12:.LANCHOR4
 	str	w0, [x20,12]
@@ -18572,11 +18603,11 @@ FtlLowFormat:
 	str	w0, [x19,232]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L2832
+	cbnz	w0, .L2831
 	adrp	x0, .LANCHOR1+504
 	mov	w1, 1
 	str	w1, [x0,#:lo12:.LANCHOR1+504]
-.L2832:
+.L2831:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -18594,24 +18625,24 @@ FtlReInitForSDUpdata:
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2865
-.L2867:
+	cbz	w0, .L2864
+.L2866:
 	mov	w0, 0
-	b	.L2866
-.L2865:
+	b	.L2865
+.L2864:
 	adrp	x20, .LANCHOR4
 	add	x0, x20, :lo12:.LANCHOR4
 	ldr	x0, [x0,48]
 	bl	FlashInit
-	cbnz	w0, .L2867
+	cbnz	w0, .L2866
 	bl	FlashLoadFactorBbt
-	cbz	w0, .L2868
+	cbz	w0, .L2867
 	bl	FlashMakeFactorBbt
-.L2868:
+.L2867:
 	add	x20, x20, :lo12:.LANCHOR4
 	ldr	x0, [x20,104]
 	bl	FlashReadIdbDataRaw
-	cbz	w0, .L2869
+	cbz	w0, .L2868
 	mov	w1, 0
 	mov	w2, 16
 	add	x0, x29, 32
@@ -18620,39 +18651,39 @@ FtlReInitForSDUpdata:
 	ldr	w2, [x29,32]
 	mov	w1, w0
 	mov	w4, 1
-.L2871:
+.L2870:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 16
 	add	w0, w0, w3
-	bne	.L2871
+	bne	.L2870
 	cmp	w0, 6
-	bhi	.L2872
+	bhi	.L2871
 	add	x0, x19, :lo12:.LANCHOR0
-	b	.L2894
-.L2872:
+	b	.L2893
+.L2871:
 	mov	w1, 0
 	mov	w4, 1
-.L2875:
+.L2874:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 24
 	add	w0, w0, w3
-	bne	.L2875
+	bne	.L2874
 	cmp	w0, 17
 	add	x0, x19, :lo12:.LANCHOR0
-	bls	.L2894
+	bls	.L2893
 	mov	w1, 36
-.L2894:
+.L2893:
 	strb	w1, [x0,73]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,73]
 	strh	w1, [x0,194]
-.L2869:
+.L2868:
 	adrp	x0, .LC75
 	adrp	x1, .LC76
 	add	x1, x1, :lo12:.LC76
@@ -18665,25 +18696,25 @@ FtlReInitForSDUpdata:
 	ldrh	w0, [x19,1960]
 	mov	w19, 1
 	bl	FtlFreeSysBlkQueueInit
-.L2877:
+.L2876:
 	bl	FtlLoadBbt
-	cbz	w0, .L2878
-.L2896:
+	cbz	w0, .L2877
+.L2895:
 	bl	FtlLowFormat
 	cmp	w19, 3
-	bhi	.L2897
+	bhi	.L2896
 	add	w19, w19, 1
-	b	.L2877
-.L2897:
+	b	.L2876
+.L2896:
 	mov	w0, -1
-	b	.L2866
-.L2878:
+	b	.L2865
+.L2877:
 	bl	FtlSysBlkInit
-	cbnz	w0, .L2896
+	cbnz	w0, .L2895
 	adrp	x1, .LANCHOR1+504
 	mov	w2, 1
 	str	w2, [x1,#:lo12:.LANCHOR1+504]
-.L2866:
+.L2865:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -18699,19 +18730,19 @@ Ftl_gc_temp_data_write_back:
 	add	x0, x21, :lo12:.LANCHOR2
 	stp	x19, x20, [sp,16]
 	ldr	w1, [x0,-96]
-	cbz	w1, .L2899
-.L2902:
+	cbz	w1, .L2898
+.L2901:
 	mov	w0, 0
-	b	.L2900
-.L2899:
+	b	.L2899
+.L2898:
 	adrp	x1, .LANCHOR0+196
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+196]
-	cbz	w1, .L2901
+	cbz	w1, .L2900
 	ldr	w1, [x0,864]
-	tbz	x1, 0, .L2901
+	tbz	x1, 0, .L2900
 	ldrh	w0, [x0,140]
-	cbnz	w0, .L2902
-.L2901:
+	cbnz	w0, .L2901
+.L2900:
 	add	x1, x21, :lo12:.LANCHOR2
 	mov	w2, 0
 	mov	w3, w2
@@ -18720,18 +18751,18 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x1,2056]
 	ldr	w1, [x1,864]
 	bl	FlashProgPages
-.L2903:
+.L2902:
 	add	x19, x21, :lo12:.LANCHOR2
 	ldr	w1, [x19,864]
 	cmp	w20, w1
-	bcs	.L2913
+	bcs	.L2912
 	umull	x0, w20, w22
 	ldr	x3, [x19,2056]
 	add	x1, x3, x0
 	ldr	w3, [x3,x0]
 	cmn	w3, #1
 	ldr	x2, [x1,16]
-	bne	.L2904
+	bne	.L2903
 	ldrh	w2, [x19,136]
 	ldr	x1, [x19]
 	strh	wzr, [x1,x2,lsl 1]
@@ -18746,26 +18777,26 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L2912
-.L2904:
+	b	.L2911
+.L2903:
 	ldr	w0, [x2,12]
 	add	w20, w20, 1
 	ldr	w1, [x1,4]
 	ldr	w2, [x2,8]
 	uxth	w20, w20
 	bl	FtlGcUpdatePage
-	b	.L2903
-.L2913:
+	b	.L2902
+.L2912:
 	ldr	x0, [x19,2056]
 	bl	FtlGcBufFree
 	str	wzr, [x19,864]
 	ldrh	w0, [x19,140]
-	cbnz	w0, .L2902
+	cbnz	w0, .L2901
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-.L2912:
+.L2911:
 	mov	w0, 1
-.L2900:
+.L2899:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -18784,10 +18815,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0,136]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L2915
+	beq	.L2914
 	ldrh	w0, [x1,4]
-	cbnz	w0, .L2916
-.L2915:
+	cbnz	w0, .L2915
+.L2914:
 	bl	FtlCacheWriteBack
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w0, 0
@@ -18801,7 +18832,7 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2916:
+.L2915:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x0, x0, 136
 	bl	get_new_active_ppa
@@ -18824,55 +18855,55 @@ ftl_do_gc:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldr	w4, [x3,-96]
-	cbnz	w4, .L3070
+	cbnz	w4, .L3069
 	adrp	x4, .LANCHOR1
 	add	x4, x4, :lo12:.LANCHOR1
 	ldr	w5, [x4,504]
 	cmn	w5, #1
-	beq	.L3070
+	beq	.L3069
 	ldr	w5, [x3,2024]
-	cbnz	w5, .L3070
+	cbnz	w5, .L3069
 	ldrh	w5, [x3,16]
 	cmp	w5, 47
-	bls	.L3070
+	bls	.L3069
 	mov	w22, w1
 	ldrh	w1, [x4,3296]
 	str	w0, [x29,124]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2919
-.L2922:
+	bne	.L2918
+.L2921:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w4, [x0,938]
 	cmp	w4, w2
-	bne	.L2920
-	b	.L2921
-.L2919:
+	bne	.L2919
+	b	.L2920
+.L2918:
 	ldrh	w1, [x3,136]
 	cmp	w1, w0
-	beq	.L2922
+	beq	.L2921
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w2, 1
-	cbz	w0, .L2922
-	b	.L3070
-.L2920:
+	cbz	w0, .L2921
+	b	.L3069
+.L2919:
 	ldrh	w1, [x0,936]
 	cmp	w1, w2
-	bne	.L2921
+	bne	.L2920
 	ldrh	w3, [x0,940]
 	cmp	w3, w1
-	beq	.L2921
+	beq	.L2920
 	ldrh	w2, [x0,942]
 	cmp	w2, w1
-	beq	.L2921
+	beq	.L2920
 	mov	w1, -1
 	strh	w4, [x0,936]
 	strh	w3, [x0,938]
 	strh	w2, [x0,940]
 	strh	w1, [x0,942]
-.L2921:
+.L2920:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w2, [x29,124]
 	cmp	w2, 1
@@ -18880,18 +18911,18 @@ ftl_do_gc:
 	add	w0, w0, 1
 	add	w0, w0, w2, lsl 7
 	str	w0, [x1,852]
-	bne	.L2933
+	bne	.L2932
 	adrp	x25, .LANCHOR0
 	add	x1, x25, :lo12:.LANCHOR0
 	ldr	w2, [x1,1948]
-	cbnz	w2, .L2924
+	cbnz	w2, .L2923
 	ldrb	w1, [x1,196]
-	cbz	w1, .L2933
-.L2924:
+	cbz	w1, .L2932
+.L2923:
 	add	x20, x19, :lo12:.LANCHOR2
 	ldr	w1, [x20,256]
 	cmp	w1, 39
-	bhi	.L2933
+	bhi	.L2932
 	adrp	x21, .LANCHOR5
 	add	x1, x21, :lo12:.LANCHOR5
 	ldrh	w1, [x1,-80]
@@ -18901,17 +18932,17 @@ ftl_do_gc:
 	ldrh	w0, [x20,280]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L2933
+	bne	.L2932
 	ldrh	w1, [x20,936]
 	cmp	w1, w0
-	bne	.L2933
+	bne	.L2932
 	ldr	w0, [x20,852]
 	cmp	w0, 1024
-	bhi	.L2925
+	bhi	.L2924
 	ldrh	w0, [x20,32]
 	cmp	w0, 63
-	bhi	.L2933
-.L2925:
+	bhi	.L2932
+.L2924:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x21, :lo12:.LANCHOR5
 	ldrh	w2, [x0,850]
@@ -18919,29 +18950,29 @@ ftl_do_gc:
 	add	w2, w2, 64
 	strh	wzr, [x1,-80]
 	cmp	w3, w2
-	bgt	.L2933
+	bgt	.L2932
 	str	wzr, [x0,852]
 	ldr	w0, [x0,256]
-	cbnz	w0, .L2926
+	cbnz	w0, .L2925
 	mov	w0, 6
-	b	.L3092
-.L2926:
+	b	.L3091
+.L2925:
 	cmp	w0, 5
-	bhi	.L2927
+	bhi	.L2926
 	mov	w0, 18
-.L3092:
+.L3091:
 	strh	w0, [x1,-80]
-.L2927:
+.L2926:
 	mov	w0, 32
 	mov	w24, 65535
 	bl	List_get_gc_head_node
 	uxth	w26, w0
 	cmp	w26, w24
-	beq	.L2932
+	beq	.L2931
 	add	x23, x19, :lo12:.LANCHOR2
 	adrp	x27, .LANCHOR2
 	ldrh	w0, [x23,856]
-	cbz	w0, .L2929
+	cbz	w0, .L2928
 	add	x25, x25, :lo12:.LANCHOR0
 	ldr	x28, [x27,#:lo12:.LANCHOR2]
 	ubfiz	x26, x26, 1, 16
@@ -18951,7 +18982,7 @@ ftl_do_gc:
 	mul	w1, w1, w4
 	add	w1, w1, 1
 	cmp	w2, w1
-	bgt	.L2932
+	bgt	.L2931
 	add	w1, w0, 1
 	str	wzr, [x23,860]
 	uxth	w1, w1
@@ -18961,168 +18992,168 @@ ftl_do_gc:
 	uxth	w20, w0
 	cmp	w20, w24
 	ldr	x1, [x29,112]
-	beq	.L2932
+	beq	.L2931
 	ubfiz	x25, x20, 1, 16
-	adrp	x0, .LC150
+	adrp	x0, .LC151
 	ldrh	w4, [x28,x26]
-	add	x0, x0, :lo12:.LC150
+	add	x0, x0, :lo12:.LC151
 	mov	w2, w20
 	ldrh	w3, [x28,x25]
 	bl	printk
 	ldrh	w0, [x23,856]
 	cmp	w0, 40
-	bls	.L2930
+	bls	.L2929
 	ldr	x0, [x27,#:lo12:.LANCHOR2]
 	ldrh	w0, [x0,x25]
 	cmp	w0, 32
-	bls	.L2930
+	bls	.L2929
 	strh	wzr, [x23,856]
-.L2930:
+.L2929:
 	add	x21, x21, :lo12:.LANCHOR5
 	mov	w0, 6
 	strh	w0, [x21,-80]
-	b	.L2934
-.L2929:
+	b	.L2933
+.L2928:
 	mov	w0, 1
 	strh	w0, [x23,856]
-.L2932:
+.L2931:
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L2934
+	bne	.L2933
 	add	x21, x21, :lo12:.LANCHOR5
 	strh	wzr, [x21,-80]
-.L2933:
+.L2932:
 	add	x21, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
 	ldrh	w20, [x21,280]
 	cmp	w20, w0
-	bne	.L3096
+	bne	.L3095
 	ldrh	w0, [x21,136]
 	cmp	w0, w20
-	beq	.L3097
-.L2934:
+	beq	.L3096
+.L2933:
 	mov	w0, 65535
 	cmp	w20, w0
 	cset	w2, eq
-	cbz	w2, .L2947
+	cbz	w2, .L2946
 	ldr	w0, [x29,124]
-	cbnz	w0, .L2947
+	cbnz	w0, .L2946
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w21, 1
 	ldrh	w1, [x0,32]
 	cmp	w1, 24
-	bhi	.L2948
+	bhi	.L2947
 	adrp	x0, .LANCHOR0
 	cmp	w1, 16
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w21, [x0,2024]
-	bls	.L2949
+	bls	.L2948
 	lsr	w21, w21, 5
-	b	.L2948
-.L2949:
+	b	.L2947
+.L2948:
 	cmp	w1, 12
-	bls	.L2950
+	bls	.L2949
 	lsr	w21, w21, 4
-	b	.L2948
-.L2950:
+	b	.L2947
+.L2949:
 	cmp	w1, 8
-	bls	.L2948
+	bls	.L2947
 	lsr	w21, w21, 2
-.L2948:
+.L2947:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x0,848]
 	cmp	w2, w1
-	bcs	.L2952
+	bcs	.L2951
 	ldrh	w1, [x0,136]
 	mov	w2, 65535
 	cmp	w1, w2
-	bne	.L2953
+	bne	.L2952
 	ldrh	w2, [x0,936]
 	cmp	w2, w1
-	bne	.L2953
+	bne	.L2952
 	adrp	x1, .LANCHOR5-80
 	ldrh	w2, [x1,#:lo12:.LANCHOR5-80]
-	cbnz	w2, .L2954
+	cbnz	w2, .L2953
 	adrp	x1, .LANCHOR0+2096
 	ldr	w3, [x0,196]
 	ldr	w1, [x1,#:lo12:.LANCHOR0+2096]
 	add	w1, w1, w1, lsl 1
 	cmp	w3, w1, lsr 2
-	bcs	.L2955
-.L2954:
+	bcs	.L2954
+.L2953:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,260]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,848]
-	b	.L2956
-.L2955:
+	b	.L2955
+.L2954:
 	mov	w1, 18
 	strh	w1, [x0,848]
-.L2956:
+.L2955:
 	add	x19, x19, :lo12:.LANCHOR2
 	str	wzr, [x19,860]
-	b	.L3070
-.L2953:
+	b	.L3069
+.L2952:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,260]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,848]
-.L2952:
+.L2951:
 	cmp	w22, 2
-	bhi	.L3024
+	bhi	.L3023
 	adrp	x0, .LANCHOR0+1948
 	ldr	w0, [x0,#:lo12:.LANCHOR0+1948]
-	cbz	w0, .L3024
+	cbz	w0, .L3023
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L3024
-.L2947:
+	b	.L3023
+.L2946:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w3, 65535
 	ldrh	w1, [x0,136]
 	cmp	w1, w3
-	bne	.L2959
-	cbz	w2, .L2959
+	bne	.L2958
+	cbz	w2, .L2958
 	ldrh	w2, [x0,936]
 	cmp	w2, w1
-	bne	.L2959
+	bne	.L2958
 	ldrh	w2, [x0,280]
 	cmp	w2, w1
-	beq	.L2960
-.L2965:
+	beq	.L2959
+.L2964:
 	mov	w20, 65535
-	b	.L2959
-.L2960:
+	b	.L2958
+.L2959:
 	ldrh	w2, [x0,32]
 	adrp	x20, .LANCHOR5
 	ldrh	w1, [x0,848]
 	str	wzr, [x0,860]
 	cmp	w2, w1
-	bls	.L2961
+	bls	.L2960
 	add	x1, x20, :lo12:.LANCHOR5
 	ldrh	w1, [x1,-80]
-	cbnz	w1, .L2962
+	cbnz	w1, .L2961
 	adrp	x1, .LANCHOR0+2096
 	ldr	w2, [x0,196]
 	ldr	w1, [x1,#:lo12:.LANCHOR0+2096]
 	add	w1, w1, w1, lsl 1
 	cmp	w2, w1, lsr 2
-	bcs	.L2963
-.L2962:
+	bcs	.L2962
+.L2961:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,260]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,848]
-	b	.L2964
-.L2963:
+	b	.L2963
+.L2962:
 	mov	w1, 18
 	strh	w1, [x0,848]
-.L2964:
+.L2963:
 	bl	FtlReadRefresh
 	mov	w0, 0
 	bl	List_get_gc_head_node
@@ -19130,14 +19161,14 @@ ftl_do_gc:
 	ldr	x1, [x19,#:lo12:.LANCHOR2]
 	ldrh	w0, [x1,x0]
 	cmp	w0, 4
-	bls	.L2961
+	bls	.L2960
 	add	x20, x20, :lo12:.LANCHOR5
 	ldrh	w2, [x20,-80]
-	b	.L3070
-.L2961:
+	b	.L3069
+.L2960:
 	add	x21, x20, :lo12:.LANCHOR5
 	ldrh	w0, [x21,-80]
-	cbnz	w0, .L2965
+	cbnz	w0, .L2964
 	add	x22, x19, :lo12:.LANCHOR2
 	ldrh	w20, [x22,260]
 	add	w1, w20, w20, lsl 1
@@ -19155,84 +19186,84 @@ ftl_do_gc:
 	mov	w1, 2
 	sdiv	w0, w0, w1
 	cmp	w2, w0
-	ble	.L2966
+	ble	.L2965
 	ldrh	w0, [x22,32]
 	sub	w20, w20, #1
 	cmp	w0, w20
-	blt	.L2966
+	blt	.L2965
 	bl	FtlReadRefresh
-	b	.L3095
-.L2966:
-	cbnz	w2, .L2965
+	b	.L3094
+.L2965:
+	cbnz	w2, .L2964
 	mov	w0, -1
 	add	x19, x19, :lo12:.LANCHOR2
 	bl	decrement_vpc_count
 	ldrh	w2, [x19,32]
 	add	w2, w2, 1
-	b	.L3070
-.L2959:
+	b	.L3069
+.L2958:
 	adrp	x0, .LANCHOR0+1948
 	mov	w21, 2
 	ldr	w0, [x0,#:lo12:.LANCHOR0+1948]
 	cmp	w0, wzr
 	csinc	w21, w21, wzr, ne
-	b	.L2958
-.L3024:
+	b	.L2957
+.L3023:
 	mov	w20, 65535
-.L2958:
+.L2957:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w1, [x0,280]
 	cmp	w1, w2
-	bne	.L2968
+	bne	.L2967
 	cmp	w20, w1
-	beq	.L2969
+	beq	.L2968
 	strh	w20, [x0,280]
-	b	.L2970
-.L2969:
+	b	.L2969
+.L2968:
 	ldrh	w1, [x0,936]
 	cmp	w1, w20
-	beq	.L2970
+	beq	.L2969
 	adrp	x2, .LANCHOR2
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x2,#:lo12:.LANCHOR2]
 	ldrh	w1, [x2,x1]
-	cbnz	w1, .L2971
+	cbnz	w1, .L2970
 	mov	w1, -1
 	strh	w1, [x0,936]
-.L2971:
+.L2970:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x0,936]
 	strh	w1, [x0,280]
 	mov	w1, -1
 	strh	w1, [x0,936]
-.L2970:
+.L2969:
 	add	x22, x19, :lo12:.LANCHOR2
 	mov	w1, 65535
 	ldrh	w0, [x22,280]
 	strb	wzr, [x22,288]
 	cmp	w0, w1
-	beq	.L2968
+	beq	.L2967
 	bl	IsBlkInGcList
-	cbz	w0, .L2973
+	cbz	w0, .L2972
 	mov	w0, -1
 	strh	w0, [x22,280]
-.L2973:
+.L2972:
 	adrp	x0, .LANCHOR0+196
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+196]
-	cbz	w0, .L2974
+	cbz	w0, .L2973
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x22, x0, 280
 	ldrh	w0, [x0,280]
 	bl	ftl_get_blk_mode
 	strb	w0, [x22,8]
-.L2974:
+.L2973:
 	add	x22, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
 	add	x23, x22, 280
 	ldrh	w1, [x22,280]
 	cmp	w1, w0
-	beq	.L2968
+	beq	.L2967
 	mov	x0, x23
 	bl	make_superblock
 	strh	wzr, [x22,282]
@@ -19245,49 +19276,49 @@ ftl_do_gc:
 	strh	wzr, [x0,-78]
 	ldrh	w1, [x1,x2,lsl 1]
 	strh	w1, [x0,-76]
-.L2968:
+.L2967:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x0,280]
 	ldrh	w2, [x0,40]
 	cmp	w2, w1
-	beq	.L2975
+	beq	.L2974
 	ldrh	w2, [x0,88]
 	cmp	w2, w1
-	beq	.L2975
+	beq	.L2974
 	ldrh	w0, [x0,136]
 	cmp	w0, w1
-	bne	.L2976
-.L2975:
+	bne	.L2975
+.L2974:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, -1
 	strh	w1, [x0,280]
-.L2976:
+.L2975:
 	add	x24, x19, :lo12:.LANCHOR2
 	mov	w25, 65535
-.L3009:
+.L3008:
 	ldrh	w0, [x24,280]
 	cmp	w0, w25
-	bne	.L2977
+	bne	.L2976
 	str	wzr, [x24,860]
-.L2978:
+.L2977:
 	ldrh	w22, [x24,856]
 	mov	w0, w22
 	bl	List_get_gc_head_node
 	uxth	w23, w0
 	cmp	w23, w25
 	strh	w23, [x24,280]
-	bne	.L2979
+	bne	.L2978
 	strh	wzr, [x24,856]
 	mov	w2, 8
-	b	.L3070
-.L2979:
+	b	.L3069
+.L2978:
 	mov	w0, w23
 	add	w22, w22, 1
 	bl	IsBlkInGcList
-	cbz	w0, .L2980
+	cbz	w0, .L2979
 	strh	w22, [x24,856]
-	b	.L2978
-.L2980:
+	b	.L2977
+.L2979:
 	adrp	x0, .LANCHOR0
 	ubfiz	x1, x23, 1, 16
 	add	x5, x0, :lo12:.LANCHOR0
@@ -19301,49 +19332,49 @@ ftl_do_gc:
 	mul	w0, w0, w5
 	sdiv	w5, w0, w3
 	cmp	w4, w5
-	bgt	.L2982
+	bgt	.L2981
 	cmp	w4, 8
-	bls	.L2983
+	bls	.L2982
 	cmp	w22, 48
-	bls	.L2983
+	bls	.L2982
 	ldrh	w4, [x24,908]
 	cmp	w4, 35
-	bhi	.L2983
-.L2982:
+	bhi	.L2982
+.L2981:
 	strh	wzr, [x24,856]
-.L2983:
+.L2982:
 	cmp	w20, w25
 	ldrh	w1, [x2,x1]
-	bne	.L2984
+	bne	.L2983
 	cmp	w1, w0
-	blt	.L2984
+	blt	.L2983
 	ldrh	w0, [x24,856]
 	cmp	w0, 3
-	bhi	.L2984
+	bhi	.L2983
 	mov	w0, -1
 	strh	w0, [x24,280]
 	adrp	x0, .LANCHOR5-80
 	strh	wzr, [x24,856]
 	ldrh	w2, [x0,#:lo12:.LANCHOR5-80]
-	b	.L3070
-.L2984:
-	cbnz	w1, .L2985
+	b	.L3069
+.L2983:
+	cbnz	w1, .L2984
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x24,856]
 	add	w0, w0, 1
 	strh	w0, [x24,856]
-	b	.L2978
-.L2985:
+	b	.L2977
+.L2984:
 	adrp	x0, .LANCHOR0
 	strb	wzr, [x24,288]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2986
+	cbz	w0, .L2985
 	mov	w0, w23
 	bl	ftl_get_blk_mode
 	strb	w0, [x24,288]
-.L2986:
+.L2985:
 	add	x22, x24, 280
 	mov	x0, x22
 	bl	make_superblock
@@ -19356,12 +19387,12 @@ ftl_do_gc:
 	strh	w0, [x1,-76]
 	strh	wzr, [x24,282]
 	strb	wzr, [x24,286]
-.L2977:
+.L2976:
 	ldr	w0, [x29,124]
 	cmp	w0, 1
-	bne	.L2987
+	bne	.L2986
 	bl	FtlReadRefresh
-.L2987:
+.L2986:
 	mov	w0, 1
 	str	w0, [x24,2024]
 	adrp	x0, .LANCHOR0
@@ -19369,23 +19400,23 @@ ftl_do_gc:
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x0,196]
 	ldrh	w26, [x0,2024]
-	cbz	w1, .L2988
+	cbz	w1, .L2987
 	ldrb	w1, [x24,288]
 	cmp	w1, 1
-	bne	.L2988
+	bne	.L2987
 	ldrh	w26, [x0,2026]
-.L2988:
+.L2987:
 	ldrh	w0, [x24,282]
 	add	w1, w0, w21
 	cmp	w1, w26
-	ble	.L2989
+	ble	.L2988
 	sub	w21, w26, w0
 	uxth	w21, w21
-.L2989:
+.L2988:
 	mov	w27, 0
-.L2990:
+.L2989:
 	cmp	w21, w27, uxth
-	bls	.L2997
+	bls	.L2996
 	add	x1, x24, 280
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w4, [x1,2]
@@ -19393,13 +19424,13 @@ ftl_do_gc:
 	mov	x0, 0
 	add	w4, w4, w27
 	mov	w23, w0
-.L2998:
+.L2997:
 	cmp	w6, w0, uxth
-	bls	.L3098
+	bls	.L3097
 	add	x2, x1, x0, lsl 1
 	ldrh	w2, [x2,16]
 	cmp	w2, w25
-	beq	.L2991
+	beq	.L2990
 	mov	w3, 56
 	ldr	x7, [x24,896]
 	orr	w2, w4, w2, lsl 10
@@ -19408,18 +19439,18 @@ ftl_do_gc:
 	add	x5, x7, x5
 	uxth	w23, w23
 	str	w2, [x5,4]
-.L2991:
+.L2990:
 	add	x0, x0, 1
-	b	.L2998
-.L3098:
+	b	.L2997
+.L3097:
 	ldr	x0, [x24,896]
 	mov	w1, w23
 	ldrb	w2, [x24,288]
 	mov	x28, 0
 	bl	FlashReadPages
-.L2993:
+.L2992:
 	cmp	w23, w28, uxth
-	bls	.L3099
+	bls	.L3098
 	mov	x0, 56
 	mul	x5, x28, x0
 	ldr	x0, [x24,896]
@@ -19427,11 +19458,11 @@ ftl_do_gc:
 	ldr	w0, [x0,x5]
 	cmn	w0, #1
 	ldr	x4, [x1,16]
-	beq	.L3027
+	beq	.L3026
 	ldrh	w0, [x4]
 	mov	w1, 61589
 	cmp	w0, w1
-	bne	.L3027
+	bne	.L3026
 	ldr	w0, [x4,8]
 	add	x1, x29, 136
 	mov	w2, 0
@@ -19446,7 +19477,7 @@ ftl_do_gc:
 	and	w0, w0, 2147483647
 	ldr	w1, [x2,4]
 	cmp	w0, w1
-	bne	.L3027
+	bne	.L3026
 	adrp	x0, .LANCHOR5
 	mov	x3, 56
 	add	x1, x0, :lo12:.LANCHOR5
@@ -19493,17 +19524,17 @@ ftl_do_gc:
 	bl	FtlGcBufAlloc
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,196]
-	cbnz	w0, .L2995
+	cbnz	w0, .L2994
 	ldr	x2, [x29,112]
 	ldr	w1, [x24,864]
 	ldrb	w0, [x2,7]
 	cmp	w1, w0
-	beq	.L2995
+	beq	.L2994
 	ldrh	w0, [x2,4]
-	cbnz	w0, .L3027
-.L2995:
+	cbnz	w0, .L3026
+.L2994:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L3027
+	cbz	w0, .L3026
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
 	strh	w0, [x19,280]
@@ -19512,60 +19543,60 @@ ftl_do_gc:
 	str	wzr, [x19,2024]
 	strh	wzr, [x19,282]
 	ldrh	w2, [x0,-80]
-	b	.L3070
-.L3027:
+	b	.L3069
+.L3026:
 	add	x28, x28, 1
-	b	.L2993
-.L3099:
+	b	.L2992
+.L3098:
 	add	w27, w27, 1
-	b	.L2990
-.L2997:
+	b	.L2989
+.L2996:
 	ldrh	w0, [x24,282]
 	add	w21, w21, w0
 	uxth	w21, w21
 	strh	w21, [x24,282]
 	cmp	w21, w26
-	bcc	.L2999
+	bcc	.L2998
 	ldr	w0, [x24,864]
 	adrp	x21, .LANCHOR5
-	cbz	w0, .L3000
+	cbz	w0, .L2999
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L3000
+	cbz	w0, .L2999
 	str	wzr, [x24,2024]
 	add	x21, x21, :lo12:.LANCHOR5
-.L3095:
+.L3094:
 	ldrh	w2, [x21,-80]
-	b	.L3070
-.L3000:
+	b	.L3069
+.L2999:
 	add	x21, x21, :lo12:.LANCHOR5
 	ldrh	w21, [x21,-78]
-	cbnz	w21, .L3001
+	cbnz	w21, .L3000
 	ldrh	w1, [x24,280]
 	ldr	x0, [x24]
 	ldrh	w0, [x0,x1,lsl 1]
-	cbz	w0, .L3001
-.L3002:
+	cbz	w0, .L3000
+.L3001:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w0, [x0,2096]
 	cmp	w21, w0
-	bcs	.L3007
+	bcs	.L3006
 	mov	w0, w21
 	add	x1, x29, 140
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,140]
 	cmn	w0, #1
-	beq	.L3003
+	beq	.L3002
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x24,280]
 	cmp	w1, w0, uxth
-	bne	.L3003
-.L3007:
+	bne	.L3002
+.L3006:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w0, [x0,2096]
 	cmp	w21, w0
-	bcc	.L3001
+	bcc	.L3000
 	ldrh	w1, [x24,280]
 	ldr	x0, [x24]
 	strh	wzr, [x0,x1,lsl 1]
@@ -19574,31 +19605,31 @@ ftl_do_gc:
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L3001
-.L3003:
+	b	.L3000
+.L3002:
 	add	w21, w21, 1
-	b	.L3002
-.L3001:
+	b	.L3001
+.L3000:
 	mov	w0, -1
 	strh	w0, [x24,280]
-.L2999:
+.L2998:
 	ldrh	w0, [x24,32]
 	cmp	w0, 2
-	bhi	.L3008
+	bhi	.L3007
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w21, [x22,2024]
-	b	.L3009
-.L3008:
+	b	.L3008
+.L3007:
 	adrp	x1, .LANCHOR5-80
 	str	wzr, [x24,2024]
 	ldrh	w2, [x1,#:lo12:.LANCHOR5-80]
 	cmp	w2, wzr
 	csinc	w2, w2, w0, ne
-	b	.L3070
-.L3097:
+	b	.L3069
+.L3096:
 	ldrh	w23, [x21,936]
 	cmp	w23, w20
-	bne	.L2934
+	bne	.L2933
 	ldrh	w0, [x21,32]
 	mov	w2, 1024
 	ldr	w1, [x21,852]
@@ -19606,38 +19637,38 @@ ftl_do_gc:
 	mov	w0, 5120
 	csel	w0, w0, w2, cc
 	cmp	w1, w0
-	bls	.L2934
+	bls	.L2933
 	adrp	x0, .LANCHOR5-80
 	str	wzr, [x21,852]
 	strh	wzr, [x0,#:lo12:.LANCHOR5-80]
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	cmp	w20, w23
-	bne	.L2936
+	bne	.L2935
 	ldrh	w1, [x21,32]
 	ldrh	w0, [x21,850]
 	cmp	w1, w0
-	bcs	.L2937
+	bcs	.L2936
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	uxth	w0, w0
 	cmp	w0, w20
-	beq	.L2946
+	beq	.L2945
 	ldr	w2, [x21,2020]
 	adrp	x23, .LANCHOR0
 	uxtw	x1, w0
-	cbnz	w2, .L2939
+	cbnz	w2, .L2938
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrh	w2, [x0,1976]
 	cmp	w2, 3
-	beq	.L2939
+	beq	.L2938
 	ldr	w2, [x21,328]
-	cbnz	w2, .L2939
+	cbnz	w2, .L2938
 	ldr	w2, [x0,1948]
-	cbnz	w2, .L2939
+	cbnz	w2, .L2938
 	ldrb	w0, [x0,196]
-	cbz	w0, .L2940
-.L2939:
+	cbz	w0, .L2939
+.L2938:
 	add	x3, x23, :lo12:.LANCHOR0
 	ldr	x0, [x19,#:lo12:.LANCHOR2]
 	ldrh	w4, [x0,x1,lsl 1]
@@ -19651,7 +19682,7 @@ ftl_do_gc:
 	csel	w0, w1, w0, eq
 	add	w0, w2, w0
 	cmp	w4, w0
-	bgt	.L2942
+	bgt	.L2941
 	mov	w0, 0
 	add	x23, x23, :lo12:.LANCHOR0
 	bl	List_get_gc_head_node
@@ -19661,50 +19692,50 @@ ftl_do_gc:
 	ldr	w2, [x1,196]
 	add	w0, w0, w0, lsl 1
 	cmp	w2, w0, lsr 2
-	bls	.L2943
+	bls	.L2942
 	mov	w0, 128
-	b	.L3093
-.L2943:
+	b	.L3092
+.L2942:
 	mov	w0, 160
-.L3093:
+.L3092:
 	strh	w0, [x1,850]
-	b	.L2944
-.L2942:
+	b	.L2943
+.L2941:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 128
-	b	.L3094
-.L2940:
+	b	.L3093
+.L2939:
 	adrp	x2, .LANCHOR2
 	ldr	x2, [x2,#:lo12:.LANCHOR2]
 	ldrh	w1, [x2,x1,lsl 1]
 	cmp	w1, 7
-	bhi	.L2945
+	bhi	.L2944
 	bl	List_get_gc_head_node
 	uxth	w20, w0
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 128
 	strh	w1, [x0,850]
-	b	.L2944
-.L2945:
+	b	.L2943
+.L2944:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 64
-.L3094:
+.L3093:
 	strh	w1, [x0,850]
-	b	.L2946
-.L2937:
+	b	.L2945
+.L2936:
 	mov	w0, 80
 	strh	w0, [x21,850]
-	b	.L2946
-.L2944:
+	b	.L2945
+.L2943:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L2946
-.L2936:
+	beq	.L2945
+.L2935:
 	add	x5, x19, :lo12:.LANCHOR2
 	ubfiz	x4, x20, 1, 32
 	ldr	x3, [x19,#:lo12:.LANCHOR2]
-	adrp	x0, .LC151
-	add	x0, x0, :lo12:.LC151
+	adrp	x0, .LC152
+	add	x0, x0, :lo12:.LC152
 	mov	w1, w20
 	ldr	x6, [x5,-80]
 	ldrh	w2, [x5,32]
@@ -19712,13 +19743,13 @@ ftl_do_gc:
 	ldrh	w5, [x5,848]
 	ldrh	w4, [x6,x4]
 	bl	printk
-.L2946:
+.L2945:
 	bl	FtlGcReFreshBadBlk
-	b	.L2934
-.L3096:
+	b	.L2933
+.L3095:
 	mov	w20, w0
-	b	.L2934
-.L3070:
+	b	.L2933
+.L3069:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -19744,41 +19775,41 @@ FtlCacheWriteBack:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldr	w23, [x0,-96]
-	cbnz	w23, .L3102
+	cbnz	w23, .L3101
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0,2080]
-	cbz	w1, .L3102
+	cbz	w1, .L3101
 	ldrb	w0, [x0,196]
-	cbz	w0, .L3104
+	cbz	w0, .L3103
 	ldrb	w0, [x20,8]
 	cmp	w0, 1
 	cset	w23, eq
-.L3104:
+.L3103:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w3, [x20,9]
-	adrp	x26, .LC152
+	adrp	x26, .LC153
 	mov	w2, w23
 	mov	w24, 0
 	mov	w27, 56
 	ldr	x0, [x0,2088]
-	add	x26, x26, :lo12:.LC152
+	add	x26, x26, :lo12:.LC153
 	bl	FlashProgPages
-.L3105:
+.L3104:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0,2080]
 	cmp	w24, w1
-	bcs	.L3123
+	bcs	.L3122
 	umull	x21, w24, w27
 	ldr	x1, [x0,2088]
 	add	x0, x1, x21
 	ldr	w25, [x1,x21]
 	cmn	w25, #1
-	beq	.L3126
+	beq	.L3125
 	ldr	w1, [x0,4]
-	cbz	w23, .L3140
+	cbz	w23, .L3139
 	orr	w1, w1, -2147483648
-.L3140:
+.L3139:
 	ldr	w0, [x0,24]
 	mov	w2, 1
 	str	w1, [x29,124]
@@ -19790,7 +19821,7 @@ FtlCacheWriteBack:
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L3109
+	beq	.L3108
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -19798,53 +19829,53 @@ FtlCacheWriteBack:
 	ldr	x2, [x22,#:lo12:.LANCHOR2]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L3110
+	cbnz	w2, .L3109
 	mov	x0, x26
 	bl	printk
-.L3110:
+.L3109:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L3109:
+.L3108:
 	add	w24, w24, 1
-	b	.L3105
-.L3142:
+	b	.L3104
+.L3141:
 	mov	w20, 16386
-.L3122:
+.L3121:
 	add	x0, x22, :lo12:.LANCHOR2
 	ldrh	w0, [x0,944]
-	cbz	w0, .L3123
+	cbz	w0, .L3122
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w20, w20, #1
-	bne	.L3122
-.L3123:
+	bne	.L3121
+.L3122:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19,2080]
-	b	.L3102
-.L3126:
-	adrp	x26, .LC152
+	b	.L3101
+.L3125:
+	adrp	x26, .LC153
 	mov	w24, 0
 	mov	w27, 56
 	str	w25, [x29,108]
 	mov	w28, 1
-	add	x26, x26, :lo12:.LC152
-.L3106:
+	add	x26, x26, :lo12:.LC153
+.L3105:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0,2080]
 	cmp	w24, w1
-	bcs	.L3142
+	bcs	.L3141
 	umull	x21, w24, w27
 	ldr	x0, [x0,2088]
 	ldr	w1, [x29,108]
 	str	w1, [x0,x21]
-.L3112:
+.L3111:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldr	x0, [x2,2088]
 	add	x1, x0, x21
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
-	bne	.L3143
+	bne	.L3142
 	ldr	w0, [x1,4]
 	str	x2, [x29,96]
 	lsr	x0, x0, 10
@@ -19852,7 +19883,7 @@ FtlCacheWriteBack:
 	ldrh	w1, [x20]
 	cmp	w1, w0, uxth
 	ldr	x2, [x29,96]
-	bne	.L3113
+	bne	.L3112
 	ldr	x3, [x22,#:lo12:.LANCHOR2]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w4, [x20,4]
@@ -19863,12 +19894,12 @@ FtlCacheWriteBack:
 	ldrh	w0, [x2,2024]
 	strh	w0, [x20,2]
 	strh	wzr, [x20,4]
-.L3113:
+.L3112:
 	ldrh	w0, [x20,4]
-	cbnz	w0, .L3114
+	cbnz	w0, .L3113
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L3114:
+.L3113:
 	add	x5, x22, :lo12:.LANCHOR2
 	add	x25, x19, :lo12:.LANCHOR0
 	str	x5, [x29,96]
@@ -19896,18 +19927,18 @@ FtlCacheWriteBack:
 	ldr	x5, [x29,96]
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
-	bne	.L3115
+	bne	.L3114
 	str	w28, [x5,-96]
-.L3115:
+.L3114:
 	add	x0, x22, :lo12:.LANCHOR2
 	ldr	w0, [x0,-96]
-	cbz	w0, .L3112
-	b	.L3102
-.L3143:
+	cbz	w0, .L3111
+	b	.L3101
+.L3142:
 	ldr	w0, [x1,4]
-	cbz	w23, .L3141
+	cbz	w23, .L3140
 	orr	w0, w0, -2147483648
-.L3141:
+.L3140:
 	str	w0, [x29,124]
 	mov	w2, 1
 	ldr	w0, [x1,24]
@@ -19919,7 +19950,7 @@ FtlCacheWriteBack:
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L3119
+	beq	.L3118
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -19927,16 +19958,16 @@ FtlCacheWriteBack:
 	ldr	x2, [x22,#:lo12:.LANCHOR2]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L3120
+	cbnz	w2, .L3119
 	mov	x0, x26
 	bl	printk
-.L3120:
+.L3119:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L3119:
+.L3118:
 	add	w24, w24, 1
-	b	.L3106
-.L3102:
+	b	.L3105
+.L3101:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -19954,17 +19985,17 @@ FtlSysFlush:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR2-96]
-	cbnz	w0, .L3145
+	cbnz	w0, .L3144
 	adrp	x0, .LANCHOR1+504
 	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
 	cmn	w0, #1
-	beq	.L3145
+	beq	.L3144
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	mov	w0, 1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3145:
+.L3144:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -19978,9 +20009,9 @@ FtlDeInit:
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
 	cmp	w0, 1
-	bne	.L3150
+	bne	.L3149
 	bl	FtlSysFlush
-.L3150:
+.L3149:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -20002,10 +20033,10 @@ ftl_deinit:
 	.type	rk_ftl_de_init, %function
 rk_ftl_de_init:
 	stp	x29, x30, [sp, -16]!
-	adrp	x0, .LC153
+	adrp	x0, .LC154
 	mov	w1, 0
 	add	x29, sp, 0
-	add	x0, x0, :lo12:.LC153
+	add	x0, x0, :lo12:.LC154
 	bl	printk
 	bl	ftl_deinit
 	ldp	x29, x30, [sp], 16
@@ -20048,46 +20079,46 @@ ftl_discard:
 	ldr	w1, [x21,2064]
 	mov	w0, -1
 	cmp	w2, w1
-	bhi	.L3156
+	bhi	.L3155
 	adrp	x0, .LANCHOR1+504
 	ldr	w1, [x0,#:lo12:.LANCHOR1+504]
 	cmn	w1, #1
 	mov	w0, w1
-	beq	.L3156
+	beq	.L3155
 	cmp	w19, 31
 	mov	w0, 0
-	bls	.L3156
+	bls	.L3155
 	adrp	x23, .LANCHOR2
 	add	x1, x23, :lo12:.LANCHOR2
 	ldr	w1, [x1,-96]
-	cbnz	w1, .L3156
+	cbnz	w1, .L3155
 	bl	FtlCacheWriteBack
 	ldrh	w1, [x21,2030]
 	udiv	w21, w20, w1
 	msub	w20, w1, w21, w20
 	uxth	w20, w20
-	cbz	w20, .L3157
+	cbz	w20, .L3156
 	sub	w1, w1, w20
 	add	w21, w21, 1
 	cmp	w1, w19
 	csel	w1, w1, w19, ls
 	sub	w19, w19, w1, uxth
-.L3157:
+.L3156:
 	mov	w0, -1
 	adrp	x20, .LANCHOR5
 	str	w0, [x29,76]
-.L3158:
+.L3157:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2030]
 	cmp	w19, w0
-	bcc	.L3172
+	bcc	.L3171
 	mov	w0, w21
 	add	x1, x29, 72
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,72]
 	cmn	w0, #1
-	beq	.L3159
+	beq	.L3158
 	add	x1, x20, :lo12:.LANCHOR5
 	mov	w2, 1
 	ldr	w0, [x1,-64]
@@ -20104,24 +20135,24 @@ ftl_discard:
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L3159:
+.L3158:
 	add	x0, x22, :lo12:.LANCHOR0
 	add	w21, w21, 1
 	ldrh	w0, [x0,2030]
 	sub	w19, w19, w0
-	b	.L3158
-.L3172:
+	b	.L3157
+.L3171:
 	adrp	x0, .LANCHOR5
 	add	x0, x0, :lo12:.LANCHOR5
 	ldr	w1, [x0,-64]
 	cmp	w1, 32
-	bls	.L3161
+	bls	.L3160
 	str	wzr, [x0,-64]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L3161:
+.L3160:
 	mov	w0, 0
-.L3156:
+.L3155:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -20155,18 +20186,18 @@ ftl_read:
 	stp	x27, x28, [sp,96]
 	cmn	w5, #1
 	mov	w0, w5
-	beq	.L3175
+	beq	.L3174
 	cmp	w4, 16
 	mov	x24, x3
 	mov	w27, w2
 	mov	w20, w1
-	bne	.L3176
+	bne	.L3175
 	add	w0, w1, 256
 	mov	w1, w2
 	mov	x2, x3
 	bl	FtlVendorPartRead
-	b	.L3175
-.L3176:
+	b	.L3174
+.L3175:
 	adrp	x21, .LANCHOR0
 	add	w0, w1, w2
 	add	x1, x21, :lo12:.LANCHOR0
@@ -20175,7 +20206,7 @@ ftl_read:
 	ldr	w3, [x29,168]
 	ldr	w2, [x1,2064]
 	cmp	w3, w2
-	bhi	.L3175
+	bhi	.L3174
 	ldrh	w0, [x1,2030]
 	sub	w26, w3, #1
 	adrp	x19, .LANCHOR2
@@ -20195,38 +20226,38 @@ ftl_read:
 	ldr	w0, [x29,172]
 	mov	w1, w26
 	bl	FtlCacheMetchLpa
-	cbz	w0, .L3177
+	cbz	w0, .L3176
 	bl	FtlCacheWriteBack
-.L3177:
+.L3176:
 	mov	w28, 0
-	adrp	x0, .LC142
+	adrp	x0, .LC143
 	ldr	w22, [x29,172]
-	add	x0, x0, :lo12:.LC142
+	add	x0, x0, :lo12:.LC143
 	str	w28, [x29,156]
 	mov	w23, w28
 	str	w28, [x29,152]
 	str	x0, [x29,112]
-.L3178:
-	cbz	w25, .L3222
+.L3177:
+	cbz	w25, .L3221
 	mov	w0, w22
 	add	x1, x29, 188
 	mov	w2, 0
 	bl	log2phys
 	ldr	w3, [x29,188]
 	cmn	w3, #1
-	bne	.L3219
+	bne	.L3218
 	mov	w3, 0
-.L3179:
+.L3178:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2030]
 	cmp	w3, w0
-	bcs	.L3183
+	bcs	.L3182
 	madd	w0, w22, w0, w3
 	cmp	w0, w20
-	bcc	.L3181
+	bcc	.L3180
 	ldr	w1, [x29,168]
 	cmp	w0, w1
-	bcs	.L3181
+	bcs	.L3180
 	sub	w0, w0, w20
 	mov	w1, 0
 	ubfiz	x0, x0, 9, 23
@@ -20235,10 +20266,10 @@ ftl_read:
 	str	x3, [x29,160]
 	bl	ftl_memset
 	ldr	x3, [x29,160]
-.L3181:
+.L3180:
 	add	w3, w3, 1
-	b	.L3179
-.L3219:
+	b	.L3178
+.L3218:
 	mov	w0, 56
 	umull	x1, w23, w0
 	add	x0, x19, :lo12:.LANCHOR2
@@ -20249,7 +20280,7 @@ ftl_read:
 	cmp	w22, w2
 	ldr	x2, [x0,2048]
 	add	x2, x2, x1
-	bne	.L3184
+	bne	.L3183
 	ldr	x0, [x0,2104]
 	str	x0, [x2,8]
 	add	x0, x21, :lo12:.LANCHOR0
@@ -20262,12 +20293,12 @@ ftl_read:
 	csel	w3, w3, w27, ls
 	str	w3, [x29,156]
 	cmp	w3, w0
-	bne	.L3185
+	bne	.L3184
 	str	x24, [x2,8]
-	b	.L3185
-.L3184:
+	b	.L3184
+.L3183:
 	cmp	w22, w26
-	bne	.L3186
+	bne	.L3185
 	ldr	x0, [x0,2112]
 	str	x0, [x2,8]
 	add	x0, x21, :lo12:.LANCHOR0
@@ -20276,18 +20307,18 @@ ftl_read:
 	mul	w0, w22, w3
 	sub	w28, w4, w0
 	cmp	w28, w3
-	bne	.L3185
-	b	.L3220
-.L3186:
+	bne	.L3184
+	b	.L3219
+.L3185:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2030]
 	mul	w0, w22, w0
-.L3220:
+.L3219:
 	sub	w0, w0, w20
 	ubfiz	x0, x0, 9, 23
 	add	x0, x24, x0
 	str	x0, [x2,8]
-.L3185:
+.L3184:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldr	x0, [x2,2048]
 	ldr	x2, [x2,2128]
@@ -20300,16 +20331,16 @@ ftl_read:
 	and	x0, x0, 4294967292
 	add	x0, x2, x0
 	str	x0, [x1,16]
-.L3183:
+.L3182:
 	subs	w25, w25, #1
 	add	w22, w22, 1
-	beq	.L3187
+	beq	.L3186
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x0,1956]
 	cmp	w23, w0, lsl 3
-	bne	.L3178
-.L3187:
-	cbz	w23, .L3178
+	bne	.L3177
+.L3186:
+	cbz	w23, .L3177
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, w23
 	mov	w2, 0
@@ -20324,10 +20355,10 @@ ftl_read:
 	str	w0, [x29,124]
 	lsl	w0, w28, 9
 	str	w0, [x29,120]
-.L3189:
+.L3188:
 	ldr	w0, [x29,160]
 	cmp	w23, w0
-	bls	.L3223
+	bls	.L3222
 	ldr	x0, [x29,160]
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	x1, 56
@@ -20337,24 +20368,24 @@ ftl_read:
 	add	x0, x0, x8
 	ldr	w1, [x0,24]
 	cmp	w1, w3
-	bne	.L3190
+	bne	.L3189
 	ldr	x1, [x0,8]
 	ldr	x0, [x2,2104]
 	cmp	x1, x0
-	bne	.L3191
+	bne	.L3190
 	ldr	x2, [x29,144]
 	mov	x0, x24
 	str	x8, [x29,104]
 	add	x1, x1, x2
 	ldr	w2, [x29,124]
-	b	.L3221
-.L3190:
+	b	.L3220
+.L3189:
 	cmp	w1, w26
-	bne	.L3191
+	bne	.L3190
 	ldr	x1, [x0,8]
 	ldr	x0, [x2,2112]
 	cmp	x1, x0
-	bne	.L3191
+	bne	.L3190
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,120]
 	str	x8, [x29,104]
@@ -20363,26 +20394,26 @@ ftl_read:
 	sub	w0, w0, w20
 	ubfiz	x0, x0, 9, 23
 	add	x0, x24, x0
-.L3221:
+.L3220:
 	bl	ftl_memcpy
 	ldr	x8, [x29,104]
-.L3191:
+.L3190:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x1, [x0,2048]
 	add	x2, x1, x8
 	ldr	w3, [x1,x8]
 	cmn	w3, #1
-	bne	.L3192
+	bne	.L3191
 	ldr	w1, [x0,408]
 	str	w3, [x29,152]
 	add	w1, w1, 1
 	str	w1, [x0,408]
-.L3192:
+.L3191:
 	ldr	x0, [x2,16]
 	ldr	w1, [x2,24]
 	ldr	w0, [x0,8]
 	cmp	w1, w0
-	beq	.L3193
+	beq	.L3192
 	add	x0, x19, :lo12:.LANCHOR2
 	str	x8, [x29,104]
 	ldr	w1, [x0,408]
@@ -20402,35 +20433,35 @@ ftl_read:
 	ldr	w7, [x7]
 	bl	printk
 	ldr	x8, [x29,104]
-.L3193:
+.L3192:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x0, [x0,2048]
 	add	x1, x0, x8
 	ldr	w0, [x0,x8]
 	cmp	w0, 256
-	bne	.L3194
+	bne	.L3193
 	ldr	w0, [x1,4]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3194:
+.L3193:
 	ldr	x0, [x29,160]
 	add	x0, x0, 1
 	str	x0, [x29,160]
-	b	.L3189
-.L3223:
-	mov	w23, 0
-	b	.L3178
+	b	.L3188
 .L3222:
+	mov	w23, 0
+	b	.L3177
+.L3221:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x19,944]
-	cbz	w0, .L3197
+	cbz	w0, .L3196
 	mov	w0, w25
 	mov	w1, 1
 	bl	ftl_do_gc
-.L3197:
+.L3196:
 	ldr	w0, [x29,152]
-.L3175:
+.L3174:
 	sub	sp, x29, #16
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
@@ -20475,10 +20506,10 @@ FlashBootVendorRead:
 	ldr	x0, [x29,40]
 	ldr	w3, [x3,#:lo12:.LANCHOR1+504]
 	cmp	w3, 1
-	bne	.L3226
+	bne	.L3225
 	bl	ftl_vendor_read
 	mov	w19, w0
-.L3226:
+.L3225:
 	bl	rknand_device_unlock
 	mov	w0, w19
 	ldr	x19, [sp,16]
@@ -20567,42 +20598,42 @@ FtlInit:
 	ldrh	w0, [x21,1960]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L3232
-	adrp	x0, .LC154
-	add	x0, x0, :lo12:.LC154
-	b	.L3246
-.L3232:
-	bl	FtlSysBlkInit
-	mov	w20, w0
-	cbz	w0, .L3234
+	cbz	w0, .L3231
 	adrp	x0, .LC155
 	add	x0, x0, :lo12:.LC155
-.L3246:
+	b	.L3245
+.L3231:
+	bl	FtlSysBlkInit
+	mov	w20, w0
+	cbz	w0, .L3233
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
+.L3245:
 	adrp	x1, .LANCHOR3
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x1, x1, 120
 	bl	printk
-	b	.L3233
-.L3234:
+	b	.L3232
+.L3233:
 	mov	w1, 1
 	str	w1, [x22,504]
 	bl	ftl_do_gc
 	ldrh	w0, [x19,32]
 	cmp	w0, 15
-	bhi	.L3235
+	bhi	.L3234
 	mov	w22, 65535
 	add	w21, w0, 2
-.L3238:
+.L3237:
 	ldrh	w0, [x19,280]
 	cmp	w0, w22
-	bne	.L3236
+	bne	.L3235
 	ldrh	w0, [x19,936]
 	cmp	w0, w22
-	bne	.L3236
+	bne	.L3235
 	and	w0, w20, 7
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L3236:
+.L3235:
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
@@ -20611,22 +20642,22 @@ FtlInit:
 	bl	ftl_do_gc
 	ldrh	w0, [x19,32]
 	cmp	w0, w21
-	bhi	.L3233
+	bhi	.L3232
 	add	w20, w20, 1
 	cmp	w20, 1024
-	bne	.L3238
-	b	.L3233
-.L3235:
+	bne	.L3237
+	b	.L3232
+.L3234:
 	ldrb	w0, [x21,196]
-	cbz	w0, .L3233
+	cbz	w0, .L3232
 	mov	w19, 128
-.L3240:
+.L3239:
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w19, w19, #1
-	bne	.L3240
-.L3233:
+	bne	.L3239
+.L3232:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -20654,7 +20685,7 @@ rk_ftl_init:
 	bl	rknand_get_reg_addr
 	ldr	x1, [x19,48]
 	mov	w0, -1
-	cbz	x1, .L3248
+	cbz	x1, .L3247
 	bl	rk_nandc_irq_init
 	mov	w1, 0
 	ldr	x0, [x20,-56]
@@ -20665,15 +20696,15 @@ rk_ftl_init:
 	ldr	x0, [x19,48]
 	bl	FlashInit
 	mov	w19, w0
-	cbnz	w0, .L3249
+	cbnz	w0, .L3248
 	bl	FtlInit
-.L3249:
-	adrp	x0, .LC156
+.L3248:
+	adrp	x0, .LC157
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC156
+	add	x0, x0, :lo12:.LC157
 	bl	printk
 	mov	w0, w19
-.L3248:
+.L3247:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -20693,16 +20724,16 @@ ftl_fix_nand_power_lost_error:
 	str	x27, [sp,80]
 	mov	x25, x0
 	ldrb	w1, [x1,196]
-	cbz	w1, .L3252
+	cbz	w1, .L3251
 	adrp	x21, .LANCHOR5
 	adrp	x19, .LANCHOR2
 	add	x0, x21, :lo12:.LANCHOR5
-	adrp	x20, .LC157
+	adrp	x20, .LC158
 	add	x24, x19, :lo12:.LANCHOR2
 	ldr	x2, [x19,#:lo12:.LANCHOR2]
 	add	x27, x24, 40
 	ldrh	w23, [x0,-216]
-	add	x0, x20, :lo12:.LC157
+	add	x0, x20, :lo12:.LC158
 	add	x26, x24, 88
 	ubfiz	x22, x23, 1, 16
 	mov	w1, w23
@@ -20717,24 +20748,24 @@ ftl_fix_nand_power_lost_error:
 	bl	allocate_new_data_superblock
 	mov	x0, x26
 	bl	allocate_new_data_superblock
-.L3254:
+.L3253:
 	subs	w24, w24, #1
-	beq	.L3258
+	beq	.L3257
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	ldr	x0, [x19,#:lo12:.LANCHOR2]
 	ldrh	w0, [x0,x22]
-	cbnz	w0, .L3254
-.L3258:
+	cbnz	w0, .L3253
+.L3257:
 	ldr	x2, [x19,#:lo12:.LANCHOR2]
-	add	x0, x20, :lo12:.LC157
+	add	x0, x20, :lo12:.LC158
 	mov	w1, w23
 	ldrh	w2, [x2,x22]
 	bl	printk
 	ldr	x0, [x19,#:lo12:.LANCHOR2]
 	ldrh	w0, [x0,x22]
-	cbnz	w0, .L3256
+	cbnz	w0, .L3255
 	add	x0, x29, 96
 	strh	w23, [x29,96]
 	bl	make_superblock
@@ -20744,14 +20775,14 @@ ftl_fix_nand_power_lost_error:
 	ldrh	w5, [x0,1956]
 	mov	x0, 0
 	mov	w20, w0
-.L3259:
+.L3258:
 	cmp	w5, w0, uxth
-	bls	.L3266
+	bls	.L3265
 	add	x1, x29, 96
 	add	x1, x1, x0, lsl 1
 	ldrh	w2, [x1,16]
 	cmp	w2, w6
-	beq	.L3260
+	beq	.L3259
 	add	x4, x19, :lo12:.LANCHOR2
 	lsl	w2, w2, 10
 	umull	x1, w20, w7
@@ -20764,15 +20795,15 @@ ftl_fix_nand_power_lost_error:
 	add	x1, x2, x1
 	str	xzr, [x1,8]
 	str	xzr, [x1,16]
-.L3260:
+.L3259:
 	add	x0, x0, 1
-	b	.L3259
-.L3266:
+	b	.L3258
+.L3265:
 	ldr	x2, [x19,#:lo12:.LANCHOR2]
-	adrp	x0, .LC158
+	adrp	x0, .LC159
 	add	x24, x19, :lo12:.LANCHOR2
 	mov	w1, w23
-	add	x0, x0, :lo12:.LC158
+	add	x0, x0, :lo12:.LC159
 	ldrh	w2, [x2,x22]
 	bl	printk
 	ldr	x0, [x24,-88]
@@ -20783,11 +20814,11 @@ ftl_fix_nand_power_lost_error:
 	mov	w1, 1
 	mov	w2, w20
 	bl	FlashEraseBlocks
-.L3256:
+.L3255:
 	add	x21, x21, :lo12:.LANCHOR5
 	mov	w0, -1
 	strh	w0, [x21,-216]
-.L3252:
+.L3251:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -20826,28 +20857,28 @@ ftl_write:
 	mov	x26, x3
 	str	x1, [x29,176]
 	ldr	w3, [x2,-96]
-	cbnz	w3, .L3269
+	cbnz	w3, .L3268
 	adrp	x1, .LANCHOR1
 	str	x1, [x29,152]
 	add	x3, x1, :lo12:.LANCHOR1
 	ldr	w3, [x3,504]
 	cmn	w3, #1
-	beq	.L3269
+	beq	.L3268
 	cmp	w4, 16
-	bne	.L3270
+	bne	.L3269
 	add	w0, w23, 256
 	mov	w1, w25
 	mov	x2, x26
 	bl	FtlVendorPartWrite
-	b	.L3269
-.L3270:
+	b	.L3268
+.L3269:
 	adrp	x21, .LANCHOR0
 	add	w3, w23, w25
 	add	x4, x21, :lo12:.LANCHOR0
 	mov	w0, -1
 	ldr	w1, [x4,2064]
 	cmp	w3, w1
-	bhi	.L3269
+	bhi	.L3268
 	adrp	x5, .LANCHOR5
 	ldrh	w1, [x4,2030]
 	add	x22, x5, :lo12:.LANCHOR5
@@ -20870,7 +20901,7 @@ ftl_write:
 	str	w0, [x2,224]
 	cset	w0, cs
 	str	w0, [x29,212]
-	cbz	w3, .L3272
+	cbz	w3, .L3271
 	mov	w0, 56
 	sub	w3, w3, #1
 	umull	x3, w3, w0
@@ -20878,7 +20909,7 @@ ftl_write:
 	add	x3, x0, x3
 	ldr	w0, [x3,24]
 	cmp	w27, w0
-	bne	.L3273
+	bne	.L3272
 	ldr	w0, [x2,212]
 	add	w0, w0, 1
 	str	w0, [x2,212]
@@ -20896,30 +20927,30 @@ ftl_write:
 	mov	w2, w20
 	mov	x1, x26
 	bl	ftl_memcpy
-	cbnz	w24, .L3274
+	cbnz	w24, .L3273
 	ldr	w0, [x22,-36]
 	cmp	w0, 2
-	bgt	.L3274
-.L3308:
+	bgt	.L3273
+.L3307:
 	mov	w0, 0
-	b	.L3269
-.L3274:
+	b	.L3268
+.L3273:
 	add	x26, x26, x20
 	sub	w25, w25, w19
 	add	w23, w23, w19
 	add	w27, w27, 1
 	mov	w20, w24
-.L3273:
+.L3272:
 	ldr	x0, [x29,144]
 	add	x0, x0, :lo12:.LANCHOR5
 	str	wzr, [x0,-36]
-.L3272:
+.L3271:
 	ldr	w1, [x29,208]
 	mov	w0, w27
 	bl	FtlCacheMetchLpa
-	cbz	w0, .L3275
+	cbz	w0, .L3274
 	bl	FtlCacheWriteBack
-.L3275:
+.L3274:
 	ldr	x0, [x29,144]
 	ldr	x1, [x29,176]
 	add	x0, x0, :lo12:.LANCHOR5
@@ -20928,53 +20959,53 @@ ftl_write:
 	add	x22, x24, 40
 	str	x22, [x29,184]
 	str	x22, [x0,-72]
-	adrp	x0, .LC159
-	add	x0, x0, :lo12:.LC159
+	adrp	x0, .LC160
+	add	x0, x0, :lo12:.LC160
 	str	x0, [x29,104]
-.L3276:
-	cbz	w20, .L3339
+.L3275:
+	cbz	w20, .L3338
 	ldrh	w0, [x22,4]
-	cbnz	w0, .L3277
+	cbnz	w0, .L3276
 	ldr	x1, [x29,184]
 	cmp	x22, x1
-	bne	.L3278
+	bne	.L3277
 	add	x0, x24, 88
 	ldrh	w19, [x0,4]
-	cbnz	w19, .L3279
+	cbnz	w19, .L3278
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29,152]
 	add	x0, x0, :lo12:.LANCHOR1
 	str	w19, [x0,3300]
-.L3279:
+.L3278:
 	ldr	x0, [x29,184]
 	add	x22, x24, 88
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29,152]
 	add	x0, x0, :lo12:.LANCHOR1
 	ldr	w0, [x0,3300]
-	cbnz	w0, .L3280
-.L3281:
+	cbnz	w0, .L3279
+.L3280:
 	ldr	x22, [x29,184]
-	b	.L3280
-.L3278:
+	b	.L3279
+.L3277:
 	ldr	x1, [x29,152]
 	add	x1, x1, :lo12:.LANCHOR1
 	str	w0, [x1,3300]
 	ldr	x0, [x29,184]
 	ldrh	w0, [x0,4]
-	cbnz	w0, .L3281
+	cbnz	w0, .L3280
 	mov	x0, x22
 	bl	allocate_new_data_superblock
-.L3280:
+.L3279:
 	ldrh	w0, [x22,4]
-	cbnz	w0, .L3282
+	cbnz	w0, .L3281
 	mov	x0, x22
 	bl	allocate_new_data_superblock
-.L3282:
+.L3281:
 	ldr	x0, [x29,144]
 	add	x0, x0, :lo12:.LANCHOR5
 	str	x22, [x0,-72]
-.L3277:
+.L3276:
 	add	x2, x21, :lo12:.LANCHOR0
 	ldr	w0, [x24,2044]
 	ldrh	w1, [x22,4]
@@ -20991,29 +21022,29 @@ ftl_write:
 	str	w0, [x29,116]
 	add	w0, w25, w23
 	str	w0, [x29,136]
-.L3283:
+.L3282:
 	ldr	w0, [x29,200]
 	ldr	w2, [x29,140]
 	ldr	w1, [x29,192]
 	cmp	w0, w2
 	add	w28, w1, w0
-	bcs	.L3340
+	bcs	.L3339
 	ldrh	w1, [x22,4]
-	cbz	w1, .L3315
+	cbz	w1, .L3314
 	ldr	w1, [x29,208]
 	cmp	w28, w1
 	cset	w6, eq
-	cbz	w0, .L3285
+	cbz	w0, .L3284
 	ldr	w1, [x29,116]
 	tst	w6, w1
-	beq	.L3285
+	beq	.L3284
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,136]
 	ldrh	w1, [x1,2030]
 	msub	w2, w28, w1, w2
 	cmp	w2, w1
-	bne	.L3315
-.L3285:
+	bne	.L3314
+.L3284:
 	add	x1, x29, 228
 	mov	w2, 0
 	mov	w0, w28
@@ -21054,18 +21085,18 @@ ftl_write:
 	cmp	w28, w27
 	cset	w0, eq
 	str	w0, [x29,196]
-	cbnz	w0, .L3319
+	cbnz	w0, .L3318
 	ldr	x6, [x29,96]
 	ldr	x4, [x29,160]
-	cbz	w6, .L3286
+	cbz	w6, .L3285
 	ldr	w0, [x29,136]
 	ldrh	w19, [x19,2030]
 	msub	w19, w28, w19, w0
 	ldr	w0, [x29,196]
 	str	w0, [x29,160]
 	uxth	w19, w19
-	b	.L3289
-.L3319:
+	b	.L3288
+.L3318:
 	ldrh	w19, [x19,2030]
 	udiv	w0, w23, w19
 	msub	w0, w0, w19, w23
@@ -21073,40 +21104,40 @@ ftl_write:
 	sub	w19, w19, w0
 	cmp	w19, w25
 	csel	w19, w19, w25, ls
-.L3289:
+.L3288:
 	add	x2, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x2,2030]
 	cmp	w19, w0
-	bne	.L3290
+	bne	.L3289
 	ldr	w0, [x29,196]
 	mov	x1, x26
-	cbnz	w0, .L3291
+	cbnz	w0, .L3290
 	mul	w1, w19, w28
 	sub	w1, w1, w23
 	ubfiz	x1, x1, 9, 23
 	add	x1, x26, x1
-.L3291:
+.L3290:
 	ldr	w2, [x29,212]
 	mov	w0, 56
 	add	x4, x21, :lo12:.LANCHOR0
-	cbz	w2, .L3292
+	cbz	w2, .L3291
 	ldr	w2, [x4,2080]
 	umull	x0, w2, w0
 	ldr	x2, [x4,2088]
 	add	x0, x2, x0
-	b	.L3337
-.L3292:
+	b	.L3336
+.L3291:
 	ldr	w2, [x4,2080]
 	umull	x0, w2, w0
 	ldr	x2, [x4,2088]
 	add	x0, x2, x0
 	ldrh	w2, [x4,2034]
 	ldr	x0, [x0,8]
-	b	.L3338
-.L3290:
+	b	.L3337
+.L3289:
 	ldr	w0, [x29,228]
 	cmn	w0, #1
-	beq	.L3294
+	beq	.L3293
 	str	w0, [x29,236]
 	mov	w1, 56
 	ldr	w0, [x2,2080]
@@ -21124,16 +21155,16 @@ ftl_write:
 	bl	FlashReadPages
 	ldr	w0, [x29,232]
 	cmn	w0, #1
-	bne	.L3295
+	bne	.L3294
 	ldr	w0, [x24,408]
 	add	w0, w0, 1
 	str	w0, [x24,408]
-	b	.L3297
-.L3295:
+	b	.L3296
+.L3294:
 	ldr	x0, [x29,216]
 	ldr	w0, [x0,8]
 	cmp	w0, w28
-	beq	.L3297
+	beq	.L3296
 	ldr	w0, [x24,408]
 	mov	w2, w28
 	ldr	x1, [x29,216]
@@ -21142,8 +21173,8 @@ ftl_write:
 	ldr	x0, [x29,104]
 	ldr	w1, [x1,8]
 	bl	printk
-	b	.L3297
-.L3294:
+	b	.L3296
+.L3293:
 	ldr	w0, [x2,2080]
 	mov	w1, 56
 	umull	x0, w0, w1
@@ -21153,11 +21184,11 @@ ftl_write:
 	mov	w1, 0
 	ldr	x0, [x0,8]
 	bl	ftl_memset
-.L3297:
+.L3296:
 	ldr	w1, [x29,196]
 	mov	w0, 56
 	lsl	w2, w19, 9
-	cbz	w1, .L3298
+	cbz	w1, .L3297
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	w4, [x1,2080]
 	umull	x0, w4, w0
@@ -21168,8 +21199,8 @@ ftl_write:
 	ldr	x1, [x4,8]
 	add	x0, x1, x0
 	mov	x1, x26
-	b	.L3338
-.L3298:
+	b	.L3337
+.L3297:
 	add	x5, x21, :lo12:.LANCHOR0
 	ldr	w4, [x5,2080]
 	ldr	x1, [x5,2088]
@@ -21181,12 +21212,12 @@ ftl_write:
 	sub	w1, w1, w23
 	ubfiz	x1, x1, 9, 23
 	add	x1, x26, x1
-	b	.L3338
-.L3286:
+	b	.L3337
+.L3285:
 	ldr	w0, [x29,212]
 	ldrh	w1, [x19,2030]
 	ldr	w2, [x19,2080]
-	cbz	w0, .L3299
+	cbz	w0, .L3298
 	mul	w1, w28, w1
 	umull	x0, w2, w4
 	sub	w1, w1, w23
@@ -21194,10 +21225,10 @@ ftl_write:
 	ubfiz	x1, x1, 9, 23
 	add	x0, x2, x0
 	add	x1, x26, x1
-.L3337:
+.L3336:
 	str	x1, [x0,8]
-	b	.L3293
-.L3299:
+	b	.L3292
+.L3298:
 	umull	x0, w2, w4
 	ldr	x2, [x19,2088]
 	mul	w1, w28, w1
@@ -21207,9 +21238,9 @@ ftl_write:
 	ubfiz	x1, x1, 9, 23
 	ldr	x0, [x0,8]
 	add	x1, x26, x1
-.L3338:
+.L3337:
 	bl	ftl_memcpy
-.L3293:
+.L3292:
 	ldr	x1, [x29,120]
 	mov	w0, -3947
 	ldr	x2, [x29,128]
@@ -21233,35 +21264,35 @@ ftl_write:
 	ldr	x0, [x29,200]
 	add	x0, x0, 1
 	str	x0, [x29,200]
-	b	.L3283
-.L3340:
+	b	.L3282
+.L3339:
 	str	w28, [x29,192]
 	mov	x0, x2
-	b	.L3284
-.L3315:
+	b	.L3283
+.L3314:
 	str	w28, [x29,192]
-.L3284:
+.L3283:
 	sub	w20, w20, w0
 	ldr	w0, [x29,212]
-	cbnz	w0, .L3303
+	cbnz	w0, .L3302
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w1, [x0,2080]
 	ldr	w0, [x24,2044]
 	cmp	w1, w0
-	bcs	.L3303
+	bcs	.L3302
 	ldrh	w0, [x22,4]
-	cbz	w0, .L3303
-.L3305:
+	cbz	w0, .L3302
+.L3304:
 	str	wzr, [x29,212]
-	b	.L3276
-.L3303:
+	b	.L3275
+.L3302:
 	bl	FtlCacheWriteBack
 	add	x0, x21, :lo12:.LANCHOR0
 	cmp	w20, 1
 	str	wzr, [x0,2080]
-	bhi	.L3276
-	b	.L3305
-.L3339:
+	bhi	.L3275
+	b	.L3304
+.L3338:
 	ldr	w1, [x29,208]
 	mov	w0, w20
 	sub	w1, w1, w27
@@ -21270,31 +21301,31 @@ ftl_write:
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w0, [x0,32]
 	cmp	w0, 5
-	bls	.L3307
+	bls	.L3306
 	cmp	w0, 31
-	bhi	.L3308
+	bhi	.L3307
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x21,72]
-	cbnz	w0, .L3308
-.L3307:
+	cbnz	w0, .L3307
+.L3306:
 	ldr	x0, [x29,176]
 	mov	w21, 65535
 	mov	w22, 128
 	add	x19, x0, :lo12:.LANCHOR2
-.L3330:
+.L3329:
 	ldrh	w0, [x19,280]
 	cmp	w0, w21
-	bne	.L3309
+	bne	.L3308
 	ldrh	w0, [x19,936]
 	cmp	w0, w21
-	bne	.L3309
+	bne	.L3308
 	ldrh	w0, [x19,938]
 	cmp	w0, w21
-	bne	.L3309
+	bne	.L3308
 	and	w0, w20, 7
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L3309:
+.L3308:
 	mov	w0, 1
 	strh	w22, [x19,850]
 	mov	w1, w0
@@ -21304,15 +21335,15 @@ ftl_write:
 	mov	w1, 1
 	bl	ftl_do_gc
 	ldr	w0, [x19,-96]
-	cbnz	w0, .L3308
+	cbnz	w0, .L3307
 	ldrh	w0, [x19,32]
 	cmp	w0, 2
-	bhi	.L3308
+	bhi	.L3307
 	add	w20, w20, 1
 	cmp	w20, 256
-	bne	.L3330
-	b	.L3308
-.L3269:
+	bne	.L3329
+	b	.L3307
+.L3268:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -21355,10 +21386,10 @@ FlashBootVendorWrite:
 	ldr	x0, [x29,40]
 	ldr	w3, [x3,#:lo12:.LANCHOR1+504]
 	cmp	w3, 1
-	bne	.L3343
+	bne	.L3342
 	bl	ftl_vendor_write
 	mov	w19, w0
-.L3343:
+.L3342:
 	bl	rknand_device_unlock
 	mov	w0, w19
 	ldr	x19, [sp,16]
@@ -21416,21 +21447,21 @@ FtlDumpSysBlock:
 	add	x0, x21, :lo12:.LANCHOR2
 	str	x25, [sp,80]
 	add	x19, x19, 160
-	adrp	x22, .LC160
-	adrp	x24, .LC161
+	adrp	x22, .LC161
+	adrp	x24, .LC162
 	lsl	w25, w23, 10
 	ldr	x1, [x0,2072]
 	mov	w20, 0
 	ldr	x0, [x0,2120]
-	add	x22, x22, :lo12:.LC160
+	add	x22, x22, :lo12:.LC161
 	str	x1, [x19,8]
-	add	x24, x24, :lo12:.LC161
+	add	x24, x24, :lo12:.LC162
 	str	x0, [x19,16]
-.L3348:
+.L3347:
 	adrp	x0, .LANCHOR0+2026
 	ldrh	w0, [x0,#:lo12:.LANCHOR0+2026]
 	cmp	w20, w0
-	bge	.L3354
+	bge	.L3353
 	mov	w1, 1
 	orr	w0, w20, w25
 	mov	w2, w1
@@ -21453,18 +21484,18 @@ FtlDumpSysBlock:
 	ldr	x0, [x19,16]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L3349
+	beq	.L3348
 	add	x1, x21, :lo12:.LANCHOR2
 	mov	x0, x24
 	mov	w2, 4
 	mov	w3, 768
 	ldr	x1, [x1,2072]
 	bl	rknand_print_hex
-.L3349:
+.L3348:
 	add	w20, w20, 1
 	sxth	w20, w20
-	b	.L3348
-.L3354:
+	b	.L3347
+.L3353:
 	sub	sp, x29, #16
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
@@ -21488,25 +21519,25 @@ dump_map_info:
 	stp	x25, x26, [sp,80]
 	stp	x21, x22, [sp,48]
 	stp	x27, x28, [sp,96]
-	adrp	x23, .LC162
+	adrp	x23, .LC163
 	mov	w25, 56
 	ldrh	w21, [x0,1964]
 	adrp	x24, .LANCHOR2
 	mov	w26, 4
-	add	x23, x23, :lo12:.LC162
-.L3356:
+	add	x23, x23, :lo12:.LC163
+.L3355:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x2,1966]
 	cmp	w0, w21
-	bls	.L3369
+	bls	.L3368
 	mov	x22, 0
 	ldrh	w5, [x2,1956]
 	ldrh	w4, [x2,2036]
 	mov	w27, w22
 	mov	x20, x2
-.L3365:
+.L3364:
 	cmp	w5, w22, uxth
-	bls	.L3370
+	bls	.L3369
 	add	x0, x20, 1984
 	mov	w1, w21
 	str	x4, [x29,96]
@@ -21517,7 +21548,7 @@ dump_map_info:
 	bl	FtlBbmIsBadBlock
 	ldr	x5, [x29,104]
 	ldr	x4, [x29,96]
-	cbnz	w0, .L3357
+	cbnz	w0, .L3356
 	add	x3, x24, :lo12:.LANCHOR2
 	lsl	w28, w28, 10
 	umull	x0, w27, w25
@@ -21535,11 +21566,11 @@ dump_map_info:
 	ldr	x1, [x3,888]
 	add	x2, x1, x2, sxtw 2
 	str	x2, [x0,16]
-.L3357:
+.L3356:
 	add	x22, x22, 1
-	b	.L3365
-.L3370:
-	cbz	w27, .L3360
+	b	.L3364
+.L3369:
+	cbz	w27, .L3359
 	add	x0, x24, :lo12:.LANCHOR2
 	mov	w1, w27
 	mov	w2, 1
@@ -21548,9 +21579,9 @@ dump_map_info:
 	mov	x28, 56
 	ldr	x0, [x0,2048]
 	bl	FlashReadPages
-.L3361:
+.L3360:
 	cmp	w27, w20, uxth
-	bls	.L3360
+	bls	.L3359
 	add	x0, x22, :lo12:.LANCHOR2
 	ldr	x3, [x0,2048]
 	madd	x3, x20, x28, x3
@@ -21568,32 +21599,32 @@ dump_map_info:
 	ldr	w7, [x7]
 	ldr	w6, [x6,12]
 	bl	printk
-	b	.L3361
-.L3360:
+	b	.L3360
+.L3359:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L3356
-.L3369:
+	b	.L3355
+.L3368:
 	adrp	x20, .LANCHOR4
-	adrp	x23, .LC109
+	adrp	x23, .LC110
 	add	x20, x20, :lo12:.LANCHOR4
 	mov	w22, 0
 	adrp	x27, .LANCHOR2
 	add	x20, x20, 160
-	add	x23, x23, :lo12:.LC109
-.L3364:
+	add	x23, x23, :lo12:.LC110
+.L3363:
 	add	x21, x27, :lo12:.LANCHOR2
 	adrp	x26, .LANCHOR2
 	ldrh	w0, [x21,2320]
 	cmp	w22, w0
-	bge	.L3367
+	bge	.L3366
 	sbfiz	x24, x22, 1, 32
 	mov	w21, 0
-.L3368:
+.L3367:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0,2026]
 	cmp	w21, w0
-	bge	.L3371
+	bge	.L3370
 	add	x25, x26, :lo12:.LANCHOR2
 	mov	w1, 1
 	mov	w2, w1
@@ -21621,29 +21652,29 @@ dump_map_info:
 	ldr	w3, [x20,4]
 	ldr	w7, [x7,12]
 	bl	printk
-	b	.L3368
-.L3371:
+	b	.L3367
+.L3370:
 	add	w22, w22, 1
 	sxth	w22, w22
-	b	.L3364
-.L3367:
+	b	.L3363
+.L3366:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldr	x1, [x21,2176]
-	adrp	x0, .LC163
+	adrp	x0, .LC164
 	mov	w2, 2
-	add	x0, x0, :lo12:.LC163
+	add	x0, x0, :lo12:.LC164
 	ldr	w3, [x19,2052]
 	bl	rknand_print_hex
 	ldr	x1, [x21,2216]
-	adrp	x0, .LC164
+	adrp	x0, .LC165
 	ldrh	w3, [x19,2060]
-	add	x0, x0, :lo12:.LC164
+	add	x0, x0, :lo12:.LC165
 	mov	w2, 4
 	bl	rknand_print_hex
 	ldr	x1, [x21,2224]
-	adrp	x0, .LC165
+	adrp	x0, .LC166
 	ldrh	w3, [x19,2060]
-	add	x0, x0, :lo12:.LC165
+	add	x0, x0, :lo12:.LC166
 	mov	w2, 4
 	bl	rknand_print_hex
 	sub	sp, x29, #16
@@ -21668,9 +21699,9 @@ flash_boot_enter_slc_mode:
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L3372
+	bne	.L3371
 	bl	flash_enter_slc_mode
-.L3372:
+.L3371:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_boot_enter_slc_mode, .-flash_boot_enter_slc_mode
@@ -21686,9 +21717,9 @@ flash_boot_exit_slc_mode:
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L3374
+	bne	.L3373
 	bl	flash_exit_slc_mode
-.L3374:
+.L3373:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
@@ -21709,9 +21740,9 @@ IdBlockReadData:
 	ldr	w20, [x19,76]
 	mov	w26, w1
 	ldrb	w27, [x0,9]
-	adrp	x0, .LC166
+	adrp	x0, .LC167
 	mov	x21, x2
-	add	x0, x0, :lo12:.LC166
+	add	x0, x0, :lo12:.LC167
 	mov	w1, w23
 	mov	w2, w26
 	mul	w20, w20, w27
@@ -21725,9 +21756,9 @@ IdBlockReadData:
 	sub	w28, w23, w24
 	mul	w3, w24, w27
 	ubfx	x3, x3, 2, 2
-.L3377:
+.L3376:
 	cmp	w25, w26
-	bcs	.L3383
+	bcs	.L3382
 	add	w0, w25, w24
 	add	x1, x19, 200
 	ubfx	x0, x0, 2, 16
@@ -21735,13 +21766,13 @@ IdBlockReadData:
 	uxth	w20, w20
 	ldrh	w4, [x1,w0,sxtw 1]
 	ldrb	w1, [x19,196]
-	cbz	w1, .L3378
+	cbz	w1, .L3377
 	ldr	w2, [x19,1872]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
 	csel	w4, w4, w0, ne
-.L3378:
+.L3377:
 	ldr	x0, [x19,744]
 	add	w3, w3, w28
 	str	x5, [x29,96]
@@ -21774,13 +21805,13 @@ IdBlockReadData:
 	uxth	w25, w20
 	ldr	x5, [x29,96]
 	ldr	x6, [x29,120]
-	b	.L3377
-.L3383:
-	adrp	x0, .LC167
+	b	.L3376
+.L3382:
+	adrp	x0, .LC168
 	mov	w1, w23
 	mov	w2, w26
 	mov	w3, 0
-	add	x0, x0, :lo12:.LC167
+	add	x0, x0, :lo12:.LC168
 	bl	printk
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -21816,23 +21847,23 @@ write_idblock:
 	bl	ftl_malloc
 	mov	x26, x0
 	mov	w0, -1
-	cbz	x26, .L3422
+	cbz	x26, .L3421
 	add	w19, w19, 511
 	lsr	w19, w19, 9
 	cmp	w19, 8
-	bls	.L3406
+	bls	.L3405
 	cmp	w19, 500
-	bhi	.L3422
-	b	.L3386
-.L3406:
+	bhi	.L3421
+	b	.L3385
+.L3405:
 	mov	w19, 8
-.L3386:
+.L3385:
 	ldr	w2, [x22]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
 	mov	w0, -1
 	cmp	w2, w1
-	bne	.L3422
+	bne	.L3421
 	mul	w21, w20, w21
 	mov	w3, 0
 	mov	w2, 63871
@@ -21844,9 +21875,9 @@ write_idblock:
 	str	w0, [x29,224]
 	add	x0, x22, 253952
 	add	x0, x0, 1532
-.L3390:
+.L3389:
 	ldr	w1, [x0]
-	cbnz	w1, .L3387
+	cbnz	w1, .L3386
 	ldr	w1, [x22,w3,uxtw 2]
 	add	w3, w3, 1
 	cmp	w3, w4
@@ -21855,31 +21886,31 @@ write_idblock:
 	csel	w3, w3, wzr, cc
 	cmp	w2, 4096
 	sub	x0, x0, #4
-	bne	.L3390
-	b	.L3389
-.L3387:
-	adrp	x0, .LC168
-	add	x0, x0, :lo12:.LC168
-	bl	printk
-.L3389:
+	bne	.L3389
+	b	.L3388
+.L3386:
 	adrp	x0, .LC169
+	add	x0, x0, :lo12:.LC169
+	bl	printk
+.L3388:
+	adrp	x0, .LC170
 	mov	w3, 5
 	add	x20, x28, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC169
+	add	x0, x0, :lo12:.LC170
 	mov	x1, x23
 	mov	w2, 4
 	adrp	x24, .LANCHOR4
 	bl	rknand_print_hex
 	ldr	w1, [x22,512]
-	adrp	x0, .LC170
+	adrp	x0, .LC171
 	ldrb	w2, [x20,73]
-	add	x0, x0, :lo12:.LC170
+	add	x0, x0, :lo12:.LC171
 	bl	printk
 	add	x4, x24, :lo12:.LANCHOR4
-	adrp	x0, .LC171
+	adrp	x0, .LC172
 	ldrh	w3, [x20,194]
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC171
+	add	x0, x0, :lo12:.LC172
 	mov	w2, w19
 	ldr	w4, [x4,92]
 	bl	printk
@@ -21887,49 +21918,49 @@ write_idblock:
 	ldrb	w0, [x20,73]
 	ldr	w1, [x22,512]
 	cmp	w1, w0
-	bls	.L3391
+	bls	.L3390
 	str	w0, [x22,512]
-.L3391:
+.L3390:
 	lsl	w0, w19, 7
 	str	w0, [x29,204]
-	adrp	x0, .LC172
-	mov	x20, 0
-	add	x0, x0, :lo12:.LC172
-	str	x0, [x29,192]
 	adrp	x0, .LC173
-	str	w20, [x29,236]
+	mov	x20, 0
 	add	x0, x0, :lo12:.LC173
-	str	x0, [x29,184]
+	str	x0, [x29,192]
 	adrp	x0, .LC174
+	str	w20, [x29,236]
 	add	x0, x0, :lo12:.LC174
+	str	x0, [x29,184]
+	adrp	x0, .LC175
+	add	x0, x0, :lo12:.LC175
 	str	x0, [x29,176]
-.L3404:
+.L3403:
 	add	x0, x28, :lo12:.LANCHOR0
 	ldr	w1, [x23,x20,lsl 2]
 	str	w20, [x29,232]
 	ldrb	w0, [x0,73]
 	cmp	w1, w0
-	bcs	.L3392
+	bcs	.L3391
 	ldr	x0, [x29,208]
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	w0, [x0,92]
 	cmp	w1, w0
-	bcc	.L3392
+	bcc	.L3391
 	ldr	w0, [x29,224]
 	cmp	w0, 1
 	cset	w0, hi
 	str	w0, [x29,228]
 	uxtw	x0, w20
-	cbz	w0, .L3393
+	cbz	w0, .L3392
 	ldr	w0, [x29,228]
-	cbz	w0, .L3393
+	cbz	w0, .L3392
 	uxtw	x0, w20
 	sub	w0, w0, #1
 	ldr	w0, [x23,x0,lsl 2]
 	add	w0, w0, 1
 	cmp	w1, w0
-	beq	.L3392
-.L3393:
+	beq	.L3391
+.L3392:
 	mov	w1, 0
 	mov	x2, 512
 	mov	x0, x26
@@ -21954,13 +21985,13 @@ write_idblock:
 	bl	FlashEraseBlock
 	cmp	w19, w25
 	mov	w2, 1
-	bls	.L3394
+	bls	.L3393
 	mov	w2, 0
 	mov	w0, 0
 	add	w1, w24, w25
 	bl	FlashEraseBlock
 	mov	w2, 2
-.L3394:
+.L3393:
 	mov	w0, 0
 	str	x2, [x29,216]
 	bl	flash_boot_exit_slc_mode
@@ -21980,40 +22011,40 @@ write_idblock:
 	sdiv	w5, w0, w5
 	sub	w0, w24, w8
 	str	w0, [x29,216]
-.L3395:
+.L3394:
 	cmp	w6, w5
-	bcs	.L3433
+	bcs	.L3432
 	add	w0, w6, w8
 	lsr	w0, w0, 2
 	uxth	w1, w0
 	and	w0, w0, 65535
-	cbz	w1, .L3396
+	cbz	w1, .L3395
 	add	w2, w0, 1
 	add	x1, x4, 200
 	ldrb	w3, [x4,196]
 	ldrh	w1, [x1,w2,sxtw 1]
-	cbz	w3, .L3397
+	cbz	w3, .L3396
 	ldr	w7, [x4,1872]
 	mov	w3, 12336
 	movk	w3, 0x5638, lsl 16
 	cmp	w7, w3
 	csel	w1, w1, w2, ne
-.L3397:
+.L3396:
 	add	w1, w1, w10
 	lsl	w1, w1, 2
 	str	w1, [x29,240]
-.L3396:
+.L3395:
 	add	x1, x4, 200
 	str	w11, [x29,244]
 	ldrh	w7, [x1,w0,sxtw 1]
 	ldrb	w1, [x4,196]
-	cbz	w1, .L3398
+	cbz	w1, .L3397
 	ldr	w2, [x4,1872]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
 	csel	w7, w7, w0, ne
-.L3398:
+.L3397:
 	ldr	w0, [x29,216]
 	ldrb	w12, [x4,1944]
 	str	x11, [x29,104]
@@ -22061,8 +22092,8 @@ write_idblock:
 	uxth	w6, w6
 	ldr	x5, [x29,136]
 	ldr	x4, [x29,168]
-	b	.L3395
-.L3433:
+	b	.L3394
+.L3432:
 	ldr	x0, [x29,184]
 	mov	w1, w24
 	mov	w2, w19
@@ -22076,11 +22107,11 @@ write_idblock:
 	mov	x2, x26
 	mov	x1, x22
 	mov	x0, 0
-.L3400:
+.L3399:
 	ldr	w4, [x29,204]
 	mov	w3, w0
 	cmp	w0, w4
-	bcs	.L3434
+	bcs	.L3433
 	mov	x27, x2
 	mov	x25, x1
 	mov	x24, x0
@@ -22090,7 +22121,7 @@ write_idblock:
 	ldr	w5, [x27]
 	ldr	w4, [x25]
 	cmp	w5, w4
-	beq	.L3400
+	beq	.L3399
 	mov	w1, 0
 	mov	x2, 512
 	mov	x0, x26
@@ -22105,17 +22136,17 @@ write_idblock:
 	ldr	x3, [x29,216]
 	ldr	x0, [x29,176]
 	bl	printk
-	adrp	x0, .LC175
+	adrp	x0, .LC176
 	add	x1, x22, x24
-	add	x0, x0, :lo12:.LC175
+	add	x0, x0, :lo12:.LC176
 	mov	w2, 4
 	mov	w3, 256
 	bl	rknand_print_hex
-	adrp	x0, .LC176
+	adrp	x0, .LC177
 	add	x1, x26, x24
 	mov	w2, 4
 	mov	w3, 256
-	add	x0, x0, :lo12:.LC176
+	add	x0, x0, :lo12:.LC177
 	bl	rknand_print_hex
 	mov	w0, 0
 	bl	flash_boot_enter_slc_mode
@@ -22125,34 +22156,34 @@ write_idblock:
 	mul	w1, w21, w1
 	bl	FlashEraseBlock
 	ldr	w0, [x29,228]
-	cbz	w0, .L3401
+	cbz	w0, .L3400
 	ldr	w1, [x23,x20,lsl 2]
 	mov	w0, 0
 	mov	w2, 0
 	madd	w1, w1, w21, w21
 	bl	FlashEraseBlock
-.L3401:
+.L3400:
 	mov	w0, 0
 	bl	flash_boot_exit_slc_mode
-	adrp	x0, .LC177
+	adrp	x0, .LC178
 	ldr	w1, [x23,x20,lsl 2]
-	add	x0, x0, :lo12:.LC177
+	add	x0, x0, :lo12:.LC178
 	bl	printk
-	b	.L3392
-.L3434:
+	b	.L3391
+.L3433:
 	ldr	w0, [x29,236]
 	add	w0, w0, 1
 	str	w0, [x29,236]
-.L3392:
+.L3391:
 	add	x20, x20, 1
 	cmp	x20, 5
-	bne	.L3404
+	bne	.L3403
 	mov	x0, x26
 	bl	ftl_free
 	ldr	w0, [x29,236]
 	cmp	w0, wzr
 	csetm	w0, eq
-.L3422:
+.L3421:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -22170,17 +22201,17 @@ CRC_32:
 	mov	x5, x0
 	add	x3, x3, :lo12:.LANCHOR1
 	mov	w0, w2
-.L3436:
+.L3435:
 	cmp	w1, w2
-	bls	.L3438
+	bls	.L3437
 	ldrb	w4, [x5,x2]
 	add	x6, x3, 3304
 	add	x2, x2, 1
 	eor	w4, w4, w0, lsr 24
 	ldr	w4, [x6,w4,uxtw 2]
 	eor	w0, w4, w0, lsl 8
-	b	.L3436
-.L3438:
+	b	.L3435
+.L3437:
 	ret
 	.size	CRC_32, .-CRC_32
 	.align	2
@@ -22197,12 +22228,12 @@ write_loader_lba:
 	mov	w21, w1
 	mov	x24, x2
 	adrp	x20, .LANCHOR5
-	bne	.L3440
+	bne	.L3439
 	ldr	w1, [x2]
 	mov	w0, 35899
 	movk	w0, 0xfcdc, lsl 16
 	cmp	w1, w0
-	bne	.L3440
+	bne	.L3439
 	add	x22, x20, :lo12:.LANCHOR5
 	mov	w0, 1
 	strb	w0, [x22,-32]
@@ -22215,21 +22246,21 @@ write_loader_lba:
 	movk	w2, 0x3, lsl 16
 	bl	ftl_memset
 	str	w19, [x22,-16]
-.L3440:
+.L3439:
 	add	x23, x20, :lo12:.LANCHOR5
-	adrp	x0, .LC178
+	adrp	x0, .LC179
 	ldr	w2, [x24]
-	add	x0, x0, :lo12:.LC178
+	add	x0, x0, :lo12:.LC179
 	mov	w3, w19
 	mov	w4, w21
 	ldr	x1, [x23,-24]
 	bl	printk
 	ldrb	w0, [x23,-32]
-	cbz	w0, .L3439
+	cbz	w0, .L3438
 	sub	w0, w19, #64
 	ldr	x22, [x23,-24]
 	cmp	w0, 499
-	bhi	.L3442
+	bhi	.L3441
 	mov	w3, 564
 	ubfiz	x0, x0, 9, 25
 	sub	w3, w3, w19
@@ -22239,28 +22270,28 @@ write_loader_lba:
 	csel	w2, w3, w21, ls
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-	b	.L3443
-.L3442:
+	b	.L3442
+.L3441:
 	cmp	w19, 563
-	bhi	.L3453
-.L3443:
+	bhi	.L3452
+.L3442:
 	add	x0, x20, :lo12:.LANCHOR5
 	ldr	w1, [x0,-16]
 	cmp	w1, w19
-	beq	.L3451
+	beq	.L3450
 	strb	wzr, [x0,-32]
-	cbz	x22, .L3452
+	cbz	x22, .L3451
 	mov	x0, x22
 	bl	ftl_free
-.L3452:
+.L3451:
 	add	x0, x20, :lo12:.LANCHOR5
 	str	xzr, [x0,-24]
-.L3451:
+.L3450:
 	add	x20, x20, :lo12:.LANCHOR5
 	add	w19, w19, w21
 	str	w19, [x20,-16]
-	b	.L3439
-.L3453:
+	b	.L3438
+.L3452:
 	ldr	w2, [x23,-16]
 	mov	w0, 500
 	sub	w2, w2, #64
@@ -22270,7 +22301,7 @@ write_loader_lba:
 	ldr	x0, [x0,#:lo12:.LANCHOR0+744]
 	ldrb	w0, [x0,9]
 	cmp	w0, 4
-	beq	.L3454
+	beq	.L3453
 	mov	w0, 2
 	str	w0, [x29,72]
 	mov	w0, 3
@@ -22281,39 +22312,39 @@ write_loader_lba:
 	str	w0, [x29,84]
 	mov	w0, 6
 	str	w0, [x29,88]
-	b	.L3445
-.L3454:
+	b	.L3444
+.L3453:
 	mov	x3, 0
-.L3444:
+.L3443:
 	cmp	w2, 256
 	add	x0, x29, 72
-	bls	.L3446
+	bls	.L3445
 	lsl	w1, w3, 1
 	str	w1, [x0,x3,lsl 2]
-	b	.L3447
-.L3446:
+	b	.L3446
+.L3445:
 	str	w3, [x0,x3,lsl 2]
-.L3447:
+.L3446:
 	add	x3, x3, 1
 	cmp	x3, 5
-	bne	.L3444
-.L3445:
+	bne	.L3443
+.L3444:
 	add	x0, x22, 253952
 	mov	w3, 63872
 	add	x0, x0, 1536
-.L3450:
+.L3449:
 	ldr	w1, [x0]
-	cbz	w1, .L3448
+	cbz	w1, .L3447
 	add	w3, w3, 128
 	lsl	w0, w3, 2
-	b	.L3449
-.L3448:
+	b	.L3448
+.L3447:
 	sub	w3, w3, #1
 	sub	x0, x0, #4
 	cmp	w3, 4096
-	bne	.L3450
+	bne	.L3449
 	lsl	w0, w2, 9
-.L3449:
+.L3448:
 	mov	x1, x22
 	add	x2, x29, 72
 	add	x22, x20, :lo12:.LANCHOR5
@@ -22322,8 +22353,8 @@ write_loader_lba:
 	strb	wzr, [x22,-32]
 	bl	ftl_free
 	str	xzr, [x22,-24]
-	b	.L3451
-.L3439:
+	b	.L3450
+.L3438:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -22343,15 +22374,15 @@ FtlWrite:
 	cmp	w0, 1983
 	mov	w19, w1
 	mov	w20, w2
-	bhi	.L3464
-	cbnz	w21, .L3464
+	bhi	.L3463
+	cbnz	w21, .L3463
 	mov	w0, w1
 	mov	w1, w2
 	mov	x2, x3
 	str	x3, [x29,56]
 	bl	write_loader_lba
 	ldr	x3, [x29,56]
-.L3464:
+.L3463:
 	mov	w1, w19
 	mov	w2, w20
 	mov	w0, w21
@@ -22375,146 +22406,146 @@ rknand_sys_storage_ioctl:
 	stp	x21, x22, [sp,32]
 	mov	w19, w1
 	mov	x20, x2
-	beq	.L3473
+	beq	.L3472
 	mov	w0, 29187
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3474
+	bhi	.L3473
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3475
+	beq	.L3474
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3476
+	bhi	.L3475
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3477
+	beq	.L3476
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3478
+	bhi	.L3477
 	mov	w0, 25364
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bne	.L3535
+	bne	.L3534
 	bl	rknand_dev_flush
-	b	.L3569
-.L3478:
+	b	.L3568
+.L3477:
 	mov	w0, 25602
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3480
+	beq	.L3479
 	mov	w0, 25603
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3481
-	b	.L3535
-.L3476:
+	beq	.L3480
+	b	.L3534
+.L3475:
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3482
+	beq	.L3481
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3483
+	bhi	.L3482
 	mov	w0, 25727
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3484
-	b	.L3535
-.L3483:
+	beq	.L3483
+	b	.L3534
+.L3482:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3482
+	beq	.L3481
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3482
-	b	.L3535
-.L3474:
+	beq	.L3481
+	b	.L3534
+.L3473:
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3485
+	beq	.L3484
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3486
+	bhi	.L3485
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3487
+	beq	.L3486
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bcc	.L3488
+	bcc	.L3487
 	mov	w0, 29210
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3489
+	beq	.L3488
 	mov	w0, 29266
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3490
-	b	.L3535
-.L3486:
+	beq	.L3489
+	b	.L3534
+.L3485:
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3491
+	beq	.L3490
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3492
+	bhi	.L3491
 	mov	w0, 29268
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3493
+	beq	.L3492
 	mov	w0, 30224
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3494
-	b	.L3535
-.L3492:
+	beq	.L3493
+	b	.L3534
+.L3491:
 	mov	w0, 30226
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3494
+	beq	.L3493
 	mov	w0, 30227
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3491
-	b	.L3535
-.L3488:
-	adrp	x0, .LC179
-	add	x0, x0, :lo12:.LC179
+	beq	.L3490
+	b	.L3534
+.L3487:
+	adrp	x0, .LC180
+	add	x0, x0, :lo12:.LC180
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbnz	x0, .L3495
-.L3500:
+	cbnz	x0, .L3494
+.L3499:
 	mov	x0, -12
-	b	.L3472
-.L3495:
+	b	.L3471
+.L3494:
 	mov	x1, x20
 	mov	x2, 512
 	bl	rk_copy_from_user
-	cbnz	x0, .L3576
-	adrp	x0, .LC181
+	cbnz	x0, .L3575
+	adrp	x0, .LC182
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC181
+	add	x0, x0, :lo12:.LC182
 	bl	printk
 	ldr	w0, [x19,4]
 	str	w0, [x29,52]
 	cmp	w0, 8
-	bhi	.L3573
+	bhi	.L3572
 	bl	rknand_device_lock
 	ldr	w1, [x29,52]
 	mov	x2, x19
@@ -22526,106 +22557,106 @@ rknand_sys_storage_ioctl:
 	mov	x1, x19
 	ubfiz	x2, x2, 9, 23
 	bl	rk_copy_to_user
-	cbz	x0, .L3579
-	adrp	x0, .LC182
-	add	x0, x0, :lo12:.LC182
-.L3571:
+	cbz	x0, .L3578
+	adrp	x0, .LC183
+	add	x0, x0, :lo12:.LC183
+.L3570:
 	bl	printk
-.L3573:
+.L3572:
 	mov	x0, x19
-.L3574:
+.L3573:
 	bl	ftl_free
-.L3572:
+.L3571:
 	mov	x0, -14
-	b	.L3472
-.L3487:
-	adrp	x0, .LC183
-	add	x0, x0, :lo12:.LC183
+	b	.L3471
+.L3486:
+	adrp	x0, .LC184
+	add	x0, x0, :lo12:.LC184
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3500
+	cbz	x0, .L3499
 	mov	x1, x20
 	mov	x2, 4096
 	bl	rk_copy_from_user
-	cbnz	x0, .L3576
-	adrp	x0, .LC184
+	cbnz	x0, .L3575
+	adrp	x0, .LC185
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC184
+	add	x0, x0, :lo12:.LC185
 	bl	printk
 	adrp	x0, .LANCHOR5
 	add	x22, x0, :lo12:.LANCHOR5
 	mov	x20, x0
 	ldr	x21, [x22,-8]
-	cbnz	x21, .L3502
+	cbnz	x21, .L3501
 	mov	w0, 260096
 	bl	ftl_malloc
 	str	x0, [x22,-8]
-	cbz	x0, .L3573
+	cbz	x0, .L3572
 	mov	w1, w21
 	mov	x2, 260096
 	bl	memset
-.L3502:
+.L3501:
 	ldr	w2, [x19,4]
 	cmp	w2, 4088
-	bhi	.L3573
+	bhi	.L3572
 	ldr	w0, [x19]
 	mov	w1, 55296
 	movk	w1, 0x3, lsl 16
 	cmp	w0, w1
-	bhi	.L3573
+	bhi	.L3572
 	add	x20, x20, :lo12:.LANCHOR5
 	uxtw	x2, w2
 	ldr	x1, [x20,-8]
 	add	x0, x1, x0, uxtw
 	add	x1, x19, 8
 	bl	memcpy
-.L3579:
+.L3578:
 	mov	x0, x19
 	bl	ftl_free
-	b	.L3569
-.L3490:
-	adrp	x0, .LC185
-	add	x0, x0, :lo12:.LC185
+	b	.L3568
+.L3489:
+	adrp	x0, .LC186
+	add	x0, x0, :lo12:.LC186
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3500
+	cbz	x0, .L3499
 	mov	x1, x20
 	mov	x2, 28
 	bl	rk_copy_from_user
-	cbz	x0, .L3505
-.L3576:
-	adrp	x0, .LC180
-	add	x0, x0, :lo12:.LC180
-	b	.L3571
-.L3505:
+	cbz	x0, .L3504
+.L3575:
+	adrp	x0, .LC181
+	add	x0, x0, :lo12:.LC181
+	b	.L3570
+.L3504:
 	ldr	w1, [x19]
-	adrp	x0, .LC186
+	adrp	x0, .LC187
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC186
+	add	x0, x0, :lo12:.LC187
 	bl	printk
 	ldr	w1, [x19]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	cmp	w1, w0
-	bhi	.L3573
+	bhi	.L3572
 	adrp	x20, .LANCHOR5
 	add	x20, x20, :lo12:.LANCHOR5
 	ldr	x0, [x20,-8]
-	cbz	x0, .L3573
+	cbz	x0, .L3572
 	bl	CRC_32
 	ldr	w1, [x19,4]
 	cmp	w1, w0
-	beq	.L3508
+	beq	.L3507
 	mov	x0, x19
 	bl	ftl_free
 	mov	x0, -2
-	b	.L3472
-.L3508:
+	b	.L3471
+.L3507:
 	bl	rknand_device_lock
 	ldr	x1, [x20,-8]
 	add	x2, x19, 8
@@ -22635,39 +22666,39 @@ rknand_sys_storage_ioctl:
 	ldr	x0, [x20,-8]
 	bl	ftl_free
 	str	xzr, [x20,-8]
-	b	.L3579
-.L3489:
-	adrp	x0, .LC187
-	add	x0, x0, :lo12:.LC187
+	b	.L3578
+.L3488:
+	adrp	x0, .LC188
+	add	x0, x0, :lo12:.LC188
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3500
+	cbz	x0, .L3499
 	bl	ftl_read_flash_info
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 11
-	b	.L3581
-.L3473:
-	adrp	x0, .LC188
-	add	x0, x0, :lo12:.LC188
+	b	.L3580
+.L3472:
+	adrp	x0, .LC189
+	add	x0, x0, :lo12:.LC189
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3500
+	cbz	x0, .L3499
 	mov	w1, 0
 	mov	w2, 64
 	bl	ftl_memset
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 64
-	b	.L3581
-.L3485:
-	adrp	x0, .LC189
-	add	x0, x0, :lo12:.LC189
+	b	.L3580
+.L3484:
+	adrp	x0, .LC190
+	add	x0, x0, :lo12:.LC190
 	bl	printk
 	adrp	x0, .LANCHOR5
 	add	x1, x29, 52
@@ -22676,18 +22707,18 @@ rknand_sys_storage_ioctl:
 	ldr	w0, [x0,20]
 	str	w0, [x29,52]
 	mov	x0, x20
-.L3564:
+.L3563:
 	bl	rk_copy_to_user
-	cbnz	x0, .L3572
-	b	.L3569
-.L3493:
-	adrp	x0, .LC190
-	add	x0, x0, :lo12:.LC190
+	cbnz	x0, .L3571
+	b	.L3568
+.L3492:
+	adrp	x0, .LC191
+	add	x0, x0, :lo12:.LC191
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3500
+	cbz	x0, .L3499
 	bl	rknand_device_lock
 	mov	w1, 264
 	mov	w2, 2
@@ -22698,41 +22729,41 @@ rknand_sys_storage_ioctl:
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 1024
-.L3581:
+.L3580:
 	bl	rk_copy_to_user
 	mov	x19, x0
 	mov	x0, x21
-	cbnz	x19, .L3574
+	cbnz	x19, .L3573
 	bl	ftl_free
-	b	.L3499
-.L3477:
-	adrp	x0, .LC191
-	add	x0, x0, :lo12:.LC191
+	b	.L3498
+.L3476:
+	adrp	x0, .LC192
+	add	x0, x0, :lo12:.LC192
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
 	mov	x19, x0
-	cbz	x0, .L3513
-.L3518:
-	adrp	x0, .LC180
-	add	x0, x0, :lo12:.LC180
+	cbz	x0, .L3512
+.L3517:
+	adrp	x0, .LC181
+	add	x0, x0, :lo12:.LC181
 	bl	printk
-	b	.L3572
-.L3513:
+	b	.L3571
+.L3512:
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	beq	.L3514
-.L3515:
-	mov	x19, -1
-	b	.L3499
+	beq	.L3513
 .L3514:
+	mov	x19, -1
+	b	.L3498
+.L3513:
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3515
+	bhi	.L3514
 	adrp	x1, .LANCHOR5
 	add	x0, x29, 56
 	add	x21, x1, :lo12:.LANCHOR5
@@ -22743,37 +22774,37 @@ rknand_sys_storage_ioctl:
 	mov	w0, 5161
 	movk	w0, 0xc059, lsl 16
 	cmp	w1, w0
-	beq	.L3516
+	beq	.L3515
 	add	x0, x29, 120
 	mov	w1, w19
 	mov	x2, 128
 	str	w19, [x29,64]
 	str	w19, [x29,68]
 	bl	memset
-.L3516:
+.L3515:
 	add	x0, x29, 312
 	mov	w1, 0
 	mov	x2, 256
 	str	wzr, [x29,72]
 	bl	memset
-	b	.L3578
-.L3480:
-	adrp	x0, .LC192
-	add	x0, x0, :lo12:.LC192
+	b	.L3577
+.L3479:
+	adrp	x0, .LC193
+	add	x0, x0, :lo12:.LC193
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	bne	.L3515
+	bne	.L3514
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3515
+	bhi	.L3514
 	adrp	x2, .LANCHOR5
 	mov	w1, 5161
 	add	x0, x2, :lo12:.LANCHOR5
@@ -22781,12 +22812,12 @@ rknand_sys_storage_ioctl:
 	ldr	w3, [x0,8]
 	mov	x0, -2
 	cmp	w3, w1
-	bne	.L3472
+	bne	.L3471
 	ldr	w1, [x29,68]
 	mov	x0, -3
 	sub	w3, w1, #1
 	cmp	w3, 127
-	bhi	.L3472
+	bhi	.L3471
 	ldr	x19, [x2,#:lo12:.LANCHOR5]
 	add	x0, x19, 64
 	str	w1, [x19,12]
@@ -22795,38 +22826,38 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	w0, 1
 	mov	x1, x19
-	b	.L3570
-.L3484:
-	adrp	x0, .LC193
-	add	x0, x0, :lo12:.LC193
+	b	.L3569
+.L3483:
+	adrp	x0, .LC194
+	add	x0, x0, :lo12:.LC194
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 17476
 	movk	w0, 0x4253, lsl 16
 	cmp	w1, w0
-	bne	.L3515
+	bne	.L3514
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3515
+	bhi	.L3514
 	adrp	x19, .LANCHOR5
 	add	x0, x19, :lo12:.LANCHOR5
 	ldr	w1, [x0,12]
-	cbnz	w1, .L3519
-.L3522:
+	cbnz	w1, .L3518
+.L3521:
 	mov	x0, 0
-	b	.L3472
-.L3519:
+	b	.L3471
+.L3518:
 	ldr	x1, [x0,16]
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	ldr	w3, [x1]
 	cmp	w3, w2
-	beq	.L3520
+	beq	.L3519
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	str	w2, [x1]
@@ -22836,7 +22867,7 @@ rknand_sys_storage_ioctl:
 	ldr	x0, [x0,16]
 	str	wzr, [x0,8]
 	str	wzr, [x0,12]
-.L3520:
+.L3519:
 	add	x0, x19, :lo12:.LANCHOR5
 	adrp	x20, .LANCHOR5
 	ldr	x1, [x0,16]
@@ -22848,7 +22879,7 @@ rknand_sys_storage_ioctl:
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3521
+	beq	.L3520
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
@@ -22857,7 +22888,7 @@ rknand_sys_storage_ioctl:
 	str	w1, [x0,4]
 	ldr	x0, [x20,#:lo12:.LANCHOR5]
 	str	wzr, [x0,8]
-.L3521:
+.L3520:
 	add	x20, x19, :lo12:.LANCHOR5
 	ldr	x19, [x19,#:lo12:.LANCHOR5]
 	mov	w1, 0
@@ -22870,35 +22901,35 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	str	wzr, [x20,12]
 	str	wzr, [x20,8]
-	b	.L3569
-.L3475:
-	adrp	x0, .LC194
-	add	x0, x0, :lo12:.LC194
+	b	.L3568
+.L3474:
+	adrp	x0, .LC195
+	add	x0, x0, :lo12:.LC195
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w2, [x29,56]
 	mov	w1, 20037
 	movk	w1, 0x4253, lsl 16
 	cmp	w2, w1
-	bne	.L3515
+	bne	.L3514
 	ldr	w1, [x29,60]
 	cmp	w1, 512
-	bhi	.L3515
+	bhi	.L3514
 	adrp	x19, .LANCHOR5
 	add	x1, x19, :lo12:.LANCHOR5
 	ldr	w2, [x1,12]
 	cmp	w2, 1
-	beq	.L3522
+	beq	.L3521
 	ldr	x2, [x1,16]
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	ldr	w4, [x2]
 	cmp	w4, w3
-	beq	.L3523
+	beq	.L3522
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	str	w3, [x2]
@@ -22908,7 +22939,7 @@ rknand_sys_storage_ioctl:
 	ldr	x1, [x1,16]
 	str	w0, [x1,8]
 	str	w0, [x1,12]
-.L3523:
+.L3522:
 	add	x0, x19, :lo12:.LANCHOR5
 	adrp	x20, .LANCHOR5
 	ldr	x1, [x0,16]
@@ -22921,7 +22952,7 @@ rknand_sys_storage_ioctl:
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3524
+	beq	.L3523
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
@@ -22930,7 +22961,7 @@ rknand_sys_storage_ioctl:
 	str	w1, [x0,4]
 	ldr	x0, [x20,#:lo12:.LANCHOR5]
 	str	wzr, [x0,8]
-.L3524:
+.L3523:
 	add	x20, x19, :lo12:.LANCHOR5
 	ldr	x19, [x19,#:lo12:.LANCHOR5]
 	mov	w1, 0
@@ -22943,66 +22974,66 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	mov	w0, 1
 	str	w0, [x20,12]
-	b	.L3569
-.L3481:
-	adrp	x0, .LC195
-	add	x0, x0, :lo12:.LC195
+	b	.L3568
+.L3480:
+	adrp	x0, .LC196
+	add	x0, x0, :lo12:.LC196
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 20051
 	movk	w0, 0x4144, lsl 16
 	cmp	w1, w0
-	bne	.L3515
+	bne	.L3514
 	ldr	w2, [x29,60]
 	cmp	w2, 512
-	bhi	.L3515
+	bhi	.L3514
 	adrp	x1, .LANCHOR5
 	add	x0, x29, 64
 	add	x1, x1, :lo12:.LANCHOR5
 	uxtw	x2, w2
 	add	x1, x1, 24
-	b	.L3577
-.L3482:
+	b	.L3576
+.L3481:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3525
-	adrp	x0, .LC196
-	add	x0, x0, :lo12:.LC196
-	b	.L3567
-.L3525:
+	bne	.L3524
+	adrp	x0, .LC197
+	add	x0, x0, :lo12:.LC197
+	b	.L3566
+.L3524:
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3527
-	adrp	x0, .LC197
-	add	x0, x0, :lo12:.LC197
-	b	.L3567
-.L3527:
+	bne	.L3526
 	adrp	x0, .LC198
 	add	x0, x0, :lo12:.LC198
-.L3567:
+	b	.L3566
+.L3526:
+	adrp	x0, .LC199
+	add	x0, x0, :lo12:.LC199
+.L3566:
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 17227
 	movk	w0, 0x4c4f, lsl 16
 	cmp	w1, w0
-	bne	.L3572
+	bne	.L3571
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
 	adrp	x0, .LANCHOR5
-	bne	.L3528
+	bne	.L3527
 	ldr	x0, [x0,#:lo12:.LANCHOR5]
 	add	x1, x29, 56
 	mov	x2, 16
@@ -23011,65 +23042,65 @@ rknand_sys_storage_ioctl:
 	strb	w0, [x29,64]
 	mov	x0, x20
 	bl	rk_copy_to_user
-	cbz	x0, .L3472
-	b	.L3572
-.L3528:
+	cbz	x0, .L3471
+	b	.L3571
+.L3527:
 	add	x20, x0, :lo12:.LANCHOR5
 	ldr	w1, [x20,536]
 	cmp	w1, 10
-	bhi	.L3572
+	bhi	.L3571
 	ldr	x1, [x0,#:lo12:.LANCHOR5]
 	ldr	w2, [x29,60]
 	ldr	w3, [x1,24]
 	cmp	w3, w2
-	beq	.L3529
-	cbz	w3, .L3529
-	adrp	x0, .LC199
+	beq	.L3528
+	cbz	w3, .L3528
+	adrp	x0, .LC200
 	mov	w1, w2
-	add	x0, x0, :lo12:.LC199
+	add	x0, x0, :lo12:.LC200
 	bl	printk
 	ldr	w0, [x20,536]
 	add	w0, w0, 1
 	str	w0, [x20,536]
-	b	.L3572
-.L3529:
+	b	.L3571
+.L3528:
 	add	x0, x0, :lo12:.LANCHOR5
 	str	wzr, [x0,536]
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3530
+	bne	.L3529
 	str	wzr, [x1,20]
 	str	wzr, [x1,24]
-	b	.L3531
-.L3530:
+	b	.L3530
+.L3529:
 	mov	w0, 1
 	str	w2, [x1,24]
 	str	w0, [x1,20]
-.L3531:
+.L3530:
 	mov	w0, 1
 	mov	x19, -2
 	bl	StorageSysDataStore
 	cmn	w0, #1
-	bne	.L3569
-	b	.L3499
-.L3494:
-	adrp	x0, .LC200
-	add	x0, x0, :lo12:.LC200
+	bne	.L3568
+	b	.L3498
+.L3493:
+	adrp	x0, .LC201
+	add	x0, x0, :lo12:.LC201
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3515
+	bne	.L3514
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3515
+	bhi	.L3514
 	mov	w0, 30224
 	adrp	x1, .LANCHOR5
 	movk	w0, 0x4004, lsl 16
@@ -23077,72 +23108,72 @@ rknand_sys_storage_ioctl:
 	cmp	w19, w0
 	add	x1, x1, :lo12:.LANCHOR5
 	add	x0, x29, 64
-	bne	.L3532
+	bne	.L3531
 	ldr	x1, [x1,544]
-	b	.L3568
-.L3532:
+	b	.L3567
+.L3531:
 	ldr	x1, [x1,552]
-.L3568:
+.L3567:
 	add	x1, x1, 8
-.L3577:
+.L3576:
 	bl	memcpy
-.L3578:
+.L3577:
 	mov	x0, x20
 	add	x1, x29, 56
 	mov	x2, 520
-	b	.L3564
-.L3491:
-	adrp	x0, .LC201
-	add	x0, x0, :lo12:.LC201
+	b	.L3563
+.L3490:
+	adrp	x0, .LC202
+	add	x0, x0, :lo12:.LC202
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3518
+	cbnz	x0, .L3517
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3515
+	bne	.L3514
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3515
+	bhi	.L3514
 	mov	w0, 30225
 	add	w2, w2, 8
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
 	adrp	x19, .LANCHOR5
 	add	x19, x19, :lo12:.LANCHOR5
-	bne	.L3534
+	bne	.L3533
 	ldr	x0, [x19,544]
 	add	x1, x29, 56
 	bl	memcpy
 	mov	w0, 2
 	ldr	x1, [x19,544]
-	b	.L3570
-.L3534:
+	b	.L3569
+.L3533:
 	ldr	x0, [x19,552]
 	add	x1, x29, 56
 	bl	memcpy
 	ldr	x1, [x19,552]
 	mov	w0, 3
-.L3570:
+.L3569:
 	bl	StorageSysDataStore
 	uxtw	x19, w0
-	b	.L3499
-.L3569:
+	b	.L3498
+.L3568:
 	mov	x19, 0
-.L3499:
-	adrp	x0, .LC202
+.L3498:
+	adrp	x0, .LC203
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC202
+	add	x0, x0, :lo12:.LC203
 	bl	printk
 	mov	x0, x19
-	b	.L3472
-.L3535:
+	b	.L3471
+.L3534:
 	mov	x0, -22
-.L3472:
+.L3471:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -23181,25 +23212,25 @@ rk_ftl_storage_sys_init:
 	ldr	w0, [x21,16]
 	ldr	w22, [x21,508]
 	str	w0, [x19,12]
-	cbz	w22, .L3584
+	cbz	w22, .L3583
 	mov	x0, x21
 	mov	w1, 508
 	bl	js_hash
 	cmp	w22, w0
-	beq	.L3584
-	adrp	x0, .LC203
+	beq	.L3583
+	adrp	x0, .LC204
 	str	wzr, [x21,16]
-	add	x0, x0, :lo12:.LC203
+	add	x0, x0, :lo12:.LC204
 	str	wzr, [x19,12]
 	bl	printk
-.L3584:
+.L3583:
 	add	x0, x20, :lo12:.LANCHOR5
 	ldr	w1, [x0,12]
-	cbz	w1, .L3585
+	cbz	w1, .L3584
 	mov	w1, 5161
 	movk	w1, 0xc059, lsl 16
 	str	w1, [x0,8]
-.L3585:
+.L3584:
 	add	x20, x20, :lo12:.LANCHOR5
 	mov	w0, 2
 	ldr	x1, [x20,544]
@@ -23235,19 +23266,19 @@ rk_ftl_vendor_storage_init:
 	add	x1, x21, :lo12:.LANCHOR5
 	mov	w19, -12
 	str	x0, [x1,560]
-	cbz	x0, .L3594
+	cbz	x0, .L3593
 	mov	w23, 0
-	adrp	x24, .LC204
+	adrp	x24, .LC205
 	mov	w19, w23
 	mov	w22, w23
-	add	x24, x24, :lo12:.LC204
-.L3598:
+	add	x24, x24, :lo12:.LC205
+.L3597:
 	add	x20, x21, :lo12:.LANCHOR5
 	lsl	w0, w22, 7
 	mov	w1, 128
 	ldr	x2, [x20,560]
 	bl	FlashBootVendorRead
-	cbnz	w0, .L3595
+	cbnz	w0, .L3594
 	ldr	x3, [x20,560]
 	mov	x0, x24
 	add	x2, x3, 61440
@@ -23260,29 +23291,29 @@ rk_ftl_vendor_storage_init:
 	movk	w0, 0x524b, lsl 16
 	ldr	w1, [x20]
 	cmp	w1, w0
-	bne	.L3596
+	bne	.L3595
 	ldr	w0, [x20,4]
 	cmp	w19, w0
-	bcs	.L3596
+	bcs	.L3595
 	add	x1, x20, 61440
 	ldr	w1, [x1,4092]
 	cmp	w1, w0
 	csel	w23, w23, w22, ne
 	csel	w19, w19, w0, ne
-.L3596:
-	cbnz	w22, .L3606
+.L3595:
+	cbnz	w22, .L3605
 	mov	w22, 1
-	b	.L3598
-.L3606:
-	cbz	w19, .L3599
+	b	.L3597
+.L3605:
+	cbz	w19, .L3598
 	lsl	w0, w23, 7
 	mov	w1, 128
 	mov	x2, x20
 	bl	FlashBootVendorRead
 	mov	w19, w0
-	cbz	w0, .L3594
-	b	.L3595
-.L3599:
+	cbz	w0, .L3593
+	b	.L3594
+.L3598:
 	mov	x0, x20
 	mov	w1, w19
 	mov	x2, 65536
@@ -23296,14 +23327,14 @@ rk_ftl_vendor_storage_init:
 	mov	w0, -1032
 	strh	w19, [x20,12]
 	strh	w0, [x20,14]
-	b	.L3594
-.L3595:
+	b	.L3593
+.L3594:
 	add	x21, x21, :lo12:.LANCHOR5
 	mov	w19, -1
 	ldr	x0, [x21,560]
 	bl	kfree
 	str	xzr, [x21,560]
-.L3594:
+.L3593:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -23321,18 +23352,18 @@ rk_ftl_vendor_read:
 	ldr	x5, [x3,#:lo12:.LANCHOR5+560]
 	mov	w3, -1
 	str	x19, [sp,16]
-	cbz	x5, .L3608
+	cbz	x5, .L3607
 	ldrh	w3, [x5,10]
 	mov	x4, 0
-.L3609:
+.L3608:
 	cmp	w4, w3
 	mov	w6, w4
-	bcs	.L3613
+	bcs	.L3612
 	add	x7, x5, x4, lsl 3
 	add	x4, x4, 1
 	ldrh	w7, [x7,16]
 	cmp	w7, w0
-	bne	.L3609
+	bne	.L3608
 	add	x6, x5, x6, uxtw 3
 	ldrh	w4, [x6,20]
 	mov	x0, x1
@@ -23344,10 +23375,10 @@ rk_ftl_vendor_read:
 	uxtw	x2, w19
 	bl	memcpy
 	mov	w3, w19
-	b	.L3608
-.L3613:
+	b	.L3607
+.L3612:
 	mov	w3, -1
-.L3608:
+.L3607:
 	mov	w0, w3
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -23370,38 +23401,38 @@ rk_ftl_vendor_write:
 	mov	w26, w2
 	mov	x28, x1
 	mov	w2, -1
-	cbz	x19, .L3615
+	cbz	x19, .L3614
 	add	w20, w26, 63
 	ldrh	w3, [x19,10]
 	ldrh	w23, [x19,8]
 	and	w20, w20, -64
 	mov	x2, 0
-.L3616:
+.L3615:
 	cmp	w2, w3
 	mov	w4, w2
-	bcs	.L3631
+	bcs	.L3630
 	add	x0, x19, x2, lsl 3
 	add	x2, x2, 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w6
-	bne	.L3616
+	bne	.L3615
 	add	x21, x19, x4, uxtw 3
 	ldrh	w24, [x21,20]
 	add	x5, x19, 1024
 	add	w24, w24, 63
 	and	w24, w24, -64
 	cmp	w26, w24
-	bls	.L3617
+	bls	.L3616
 	ldrh	w0, [x19,14]
 	mov	w2, -1
 	cmp	w0, w20
-	bcc	.L3615
+	bcc	.L3614
 	ldrh	w21, [x21,18]
 	add	w22, w3, w2
-.L3618:
+.L3617:
 	cmp	w4, w22
 	uxtw	x3, w4
-	bcs	.L3632
+	bcs	.L3631
 	add	x3, x19, x3, lsl 3
 	add	w25, w4, 1
 	add	x1, x19, x25, uxtw 3
@@ -23424,8 +23455,8 @@ rk_ftl_vendor_write:
 	mov	w4, w25
 	ldr	x6, [x29,96]
 	ldr	x5, [x29,104]
-	b	.L3618
-.L3632:
+	b	.L3617
+.L3631:
 	add	x3, x19, x3, lsl 3
 	uxth	w21, w21
 	mov	x1, x28
@@ -23442,20 +23473,20 @@ rk_ftl_vendor_write:
 	add	w24, w24, w0
 	sub	w24, w24, w20
 	strh	w24, [x19,14]
-	b	.L3630
-.L3617:
+	b	.L3629
+.L3616:
 	ldrh	w0, [x21,18]
 	mov	x1, x28
 	uxtw	x2, w26
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w26, [x21,20]
-	b	.L3630
-.L3631:
+	b	.L3629
+.L3630:
 	ldrh	w4, [x19,14]
 	mov	w2, -1
 	cmp	w4, w20
-	bcc	.L3615
+	bcc	.L3614
 	add	x3, x19, x3, uxth 3
 	strh	w6, [x3,16]
 	uxth	w20, w20
@@ -23475,7 +23506,7 @@ rk_ftl_vendor_write:
 	ldrh	w0, [x19,10]
 	add	w0, w0, 1
 	strh	w0, [x19,10]
-.L3630:
+.L3629:
 	ldr	w0, [x19,4]
 	add	x1, x19, 61440
 	mov	x2, x19
@@ -23492,7 +23523,7 @@ rk_ftl_vendor_write:
 	lsl	w0, w23, 7
 	bl	FlashBootVendorWrite
 	mov	w2, 0
-.L3615:
+.L3614:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -23516,37 +23547,37 @@ rk_ftl_vendor_storage_ioctl:
 	mov	x21, x2
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3634
+	cbz	x0, .L3633
 	mov	w2, 30209
 	ldr	x1, [x29,56]
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L3636
+	beq	.L3635
 	mov	w2, 30210
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L3637
-	b	.L3648
-.L3636:
+	beq	.L3636
+	b	.L3647
+.L3635:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L3648
+	cbnz	x0, .L3647
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L3639
-.L3640:
-	mov	x20, -1
-	b	.L3635
+	beq	.L3638
 .L3639:
+	mov	x20, -1
+	b	.L3634
+.L3638:
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_read
 	cmn	w0, #1
-	beq	.L3640
+	beq	.L3639
 	uxth	x2, w0
 	strh	w0, [x19,6]
 	mov	x1, x19
@@ -23556,38 +23587,38 @@ rk_ftl_vendor_storage_ioctl:
 	bl	rk_copy_to_user
 	cmp	x0, xzr
 	csel	x20, xzr, x20, eq
-	b	.L3635
-.L3637:
+	b	.L3634
+.L3636:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L3648
+	cbnz	x0, .L3647
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L3640
+	bne	.L3639
 	ldrh	w3, [x19,6]
 	cmp	w3, 4087
-	bhi	.L3640
+	bhi	.L3639
 	add	w2, w3, 8
 	mov	x0, x19
 	mov	x1, x21
 	sxtw	x2, w2
 	bl	rk_copy_from_user
-	cbnz	x0, .L3648
+	cbnz	x0, .L3647
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_write
 	sxtw	x20, w0
-	b	.L3635
-.L3648:
+	b	.L3634
+.L3647:
 	mov	x20, -14
-.L3635:
+.L3634:
 	mov	x0, x19
 	bl	kfree
-.L3634:
+.L3633:
 	mov	x0, x20
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -23840,38 +23871,38 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	3
 .LANCHOR3 = . + 0
-	.type	__func__.19599, %object
-	.size	__func__.19599, 11
-__func__.19599:
+	.type	__func__.19648, %object
+	.size	__func__.19648, 11
+__func__.19648:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.20374, %object
-	.size	__func__.20374, 17
-__func__.20374:
+	.type	__func__.20423, %object
+	.size	__func__.20423, 17
+__func__.20423:
 	.string	"FtlDumpBlockInfo"
 	.zero	7
-	.type	__func__.20393, %object
-	.size	__func__.20393, 16
-__func__.20393:
+	.type	__func__.20442, %object
+	.size	__func__.20442, 16
+__func__.20442:
 	.string	"FtlScanAllBlock"
-	.type	__func__.20659, %object
-	.size	__func__.20659, 17
-__func__.20659:
+	.type	__func__.20708, %object
+	.size	__func__.20708, 17
+__func__.20708:
 	.string	"ftl_scan_all_ppa"
 	.zero	7
-	.type	__func__.20342, %object
-	.size	__func__.20342, 12
-__func__.20342:
+	.type	__func__.20391, %object
+	.size	__func__.20391, 12
+__func__.20391:
 	.string	"FtlCheckVpc"
 	.zero	4
-	.type	__func__.20641, %object
-	.size	__func__.20641, 21
-__func__.20641:
+	.type	__func__.20690, %object
+	.size	__func__.20690, 21
+__func__.20690:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.19672, %object
-	.size	__func__.19672, 8
-__func__.19672:
+	.type	__func__.19721, %object
+	.size	__func__.19721, 8
+__func__.19721:
 	.string	"FtlInit"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
@@ -24027,7 +24058,7 @@ __func__.19672:
 .LC75:
 	.string	"%s\n"
 .LC76:
-	.string	"FTL version: 5.0.56 20190508"
+	.string	"FTL version: 5.0.57 20190828"
 .LC77:
 	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
 .LC78:
@@ -24087,202 +24118,204 @@ __func__.19672:
 .LC105:
 	.string	"prog read d error: = %x %x %x\n"
 .LC106:
-	.string	"...%s enter...\n"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data= %x\n"
 .LC107:
-	.string	"superBlkID = %x vpc=%x\n"
+	.string	"...%s enter...\n"
 .LC108:
-	.string	"flashmode = %x pagenum = %x %x\n"
+	.string	"superBlkID = %x vpc=%x\n"
 .LC109:
-	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"flashmode = %x pagenum = %x %x\n"
 .LC110:
-	.string	"blk = %x vpc=%x mode = %x\n"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC111:
-	.string	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"blk = %x vpc=%x mode = %x\n"
 .LC112:
-	.string	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC113:
-	.string	"ftl_scan_all_ppa blk %x page %x\n"
+	.string	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC114:
-	.string	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\n"
+	.string	"ftl_scan_all_ppa blk %x page %x\n"
 .LC115:
-	.string	"%s finished\n"
+	.string	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\n"
 .LC116:
-	.string	"FlashMakeFactorBbt %d\n"
+	.string	"%s finished\n"
 .LC117:
-	.string	"bad block:%d %d\n"
+	.string	"FlashMakeFactorBbt %d\n"
 .LC118:
-	.string	"FMFB:%d %d\n"
+	.string	"bad block:%d %d\n"
 .LC119:
-	.string	"E:bad block:%d\n"
+	.string	"FMFB:%d %d\n"
 .LC120:
-	.string	"FMFB:Save %d %d\n"
+	.string	"E:bad block:%d\n"
 .LC121:
-	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+	.string	"FMFB:Save %d %d\n"
 .LC122:
-	.string	"FtlBbmTblFlush error:%x\n"
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
 .LC123:
-	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+	.string	"FtlBbmTblFlush error:%x\n"
 .LC124:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
 .LC125:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC126:
-	.string	"decrement_vpc_count %x = %d in free list\n"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC127:
-	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+	.string	"decrement_vpc_count %x = %d in free list\n"
 .LC128:
-	.string	"page map lost: %x %x\n"
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
 .LC129:
-	.string	"FtlMapWritePage error = %x\n"
+	.string	"page map lost: %x %x\n"
 .LC130:
-	.string	"FtlMapWritePage error = %x error count = %d\n"
+	.string	"FtlMapWritePage error = %x\n"
 .LC131:
-	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
+	.string	"FtlMapWritePage error = %x error count = %d\n"
 .LC132:
-	.string	"no ect"
+	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
 .LC133:
-	.string	"slc mode"
+	.string	"no ect"
 .LC134:
-	.string	"BBT:"
+	.string	"slc mode"
 .LC135:
-	.string	"region_id = %x phyAddr = %x\n"
+	.string	"BBT:"
 .LC136:
-	.string	"map_ppn:"
+	.string	"region_id = %x phyAddr = %x\n"
 .LC137:
-	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
+	.string	"map_ppn:"
 .LC138:
-	.string	"FtlCheckVpc2 %x = %x  %x\n"
+	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
 .LC139:
-	.string	"free blk vpc error %x = %x  %x\n"
+	.string	"FtlCheckVpc2 %x = %x  %x\n"
 .LC140:
-	.string	"Ftlscanalldata = %x\n"
+	.string	"free blk vpc error %x = %x  %x\n"
 .LC141:
-	.string	"scan lpa = %x ppa= %x\n"
+	.string	"Ftlscanalldata = %x\n"
 .LC142:
-	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"scan lpa = %x ppa= %x\n"
 .LC143:
-	.string	"RSB refresh addr %x\n"
+	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC144:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"RSB refresh addr %x\n"
 .LC145:
-	.string	"g_recovery_ppa %x ver %x\n "
+	.string	"spuer block %x vpn is 0\n "
 .LC146:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"g_recovery_ppa %x ver %x\n "
 .LC147:
-	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
+	.string	"FtlCheckVpc %x = %x  %x\n"
 .LC148:
-	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
 .LC149:
-	.string	"GC des block %x done\n"
+	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
 .LC150:
-	.string	"%d GC datablk  = %x vpc %x %x\n"
+	.string	"GC des block %x done\n"
 .LC151:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"%d GC datablk  = %x vpc %x %x\n"
 .LC152:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
 .LC153:
-	.string	"rk_ftl_de_init %x\n"
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
 .LC154:
-	.string	"...%s: no bad block mapping table, format device\n"
+	.string	"rk_ftl_de_init %x\n"
 .LC155:
-	.string	"...%s FtlSysBlkInit error ,format device!\n"
+	.string	"...%s: no bad block mapping table, format device\n"
 .LC156:
-	.string	"FtlInit %x\n"
+	.string	"...%s FtlSysBlkInit error ,format device!\n"
 .LC157:
-	.string	"fix power lost blk = %x vpc=%x\n"
+	.string	"FtlInit %x\n"
 .LC158:
-	.string	"erase power lost blk = %x vpc=%x\n"
+	.string	"fix power lost blk = %x vpc=%x\n"
 .LC159:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"erase power lost blk = %x vpc=%x\n"
 .LC160:
-	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\n"
+	.string	"FtlWrite: lpa error:%x %x\n"
 .LC161:
-	.string	":"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\n"
 .LC162:
-	.string	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	":"
 .LC163:
-	.string	"Mblk:"
+	.string	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC164:
-	.string	"L2P:"
+	.string	"Mblk:"
 .LC165:
-	.string	"L2PC:"
+	.string	"L2P:"
 .LC166:
-	.string	"IdBlockReadData %x %x\n"
+	.string	"L2PC:"
 .LC167:
-	.string	"IdBlockReadData %x %x ret= %x\n"
+	.string	"IdBlockReadData %x %x\n"
 .LC168:
-	.string	"write_idblock fix data %x %x\n"
+	.string	"IdBlockReadData %x %x ret= %x\n"
 .LC169:
-	.string	"idblk:"
+	.string	"write_idblock fix data %x %x\n"
 .LC170:
-	.string	"idb reverse %x %x\n"
+	.string	"idblk:"
 .LC171:
-	.string	"write_idblock totle_sec %x %x %x %x\n"
+	.string	"idb reverse %x %x\n"
 .LC172:
-	.string	"IDBlockWriteData %x %x\n"
+	.string	"write_idblock totle_sec %x %x %x %x\n"
 .LC173:
-	.string	"IDBlockWriteData %x %x ret= %x\n"
+	.string	"IDBlockWriteData %x %x\n"
 .LC174:
-	.string	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x\n"
+	.string	"IDBlockWriteData %x %x ret= %x\n"
 .LC175:
-	.string	"write"
+	.string	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x\n"
 .LC176:
-	.string	"read"
+	.string	"write"
 .LC177:
-	.string	"write_idblock error %d\n"
+	.string	"read"
 .LC178:
-	.string	"wl_lba %p %x %x %x\n"
+	.string	"write_idblock error %d\n"
 .LC179:
-	.string	"READ_SECTOR_IO\n"
+	.string	"wl_lba %p %x %x %x\n"
 .LC180:
-	.string	"rk_copy_from_user error\n"
+	.string	"READ_SECTOR_IO\n"
 .LC181:
-	.string	"READ_SECTOR_IO %x %x\n"
+	.string	"rk_copy_from_user error\n"
 .LC182:
-	.string	"rk_copy_to_user error\n"
+	.string	"READ_SECTOR_IO %x %x\n"
 .LC183:
-	.string	"WRITE_SECTOR_IO\n"
+	.string	"rk_copy_to_user error\n"
 .LC184:
-	.string	"WRITE_SECTOR_IO %x %x\n"
+	.string	"WRITE_SECTOR_IO\n"
 .LC185:
-	.string	"END_WRITE_SECTOR_IO\n"
+	.string	"WRITE_SECTOR_IO %x %x\n"
 .LC186:
-	.string	"END_WRITE_SECTOR_IO %x %x\n"
+	.string	"END_WRITE_SECTOR_IO\n"
 .LC187:
-	.string	"GET_FLASH_INFO_IO\n"
+	.string	"END_WRITE_SECTOR_IO %x %x\n"
 .LC188:
-	.string	"GET_BAD_BLOCK_IO\n"
+	.string	"GET_FLASH_INFO_IO\n"
 .LC189:
-	.string	"GET_LOCK_FLAG_IO\n"
+	.string	"GET_BAD_BLOCK_IO\n"
 .LC190:
-	.string	"GET_PUBLIC_KEY_IO\n"
+	.string	"GET_LOCK_FLAG_IO\n"
 .LC191:
-	.string	"RKNAND_GET_DRM_KEY\n"
+	.string	"GET_PUBLIC_KEY_IO\n"
 .LC192:
-	.string	"RKNAND_STORE_DRM_KEY\n"
+	.string	"RKNAND_GET_DRM_KEY\n"
 .LC193:
-	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
+	.string	"RKNAND_STORE_DRM_KEY\n"
 .LC194:
-	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
+	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
 .LC195:
-	.string	"RKNAND_GET_SN_SECTOR\n"
+	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
 .LC196:
-	.string	"RKNAND_LOADER_UNLOCK\n"
+	.string	"RKNAND_GET_SN_SECTOR\n"
 .LC197:
-	.string	"RKNAND_LOADER_STATUS\n"
+	.string	"RKNAND_LOADER_UNLOCK\n"
 .LC198:
-	.string	"RKNAND_LOADER_LOCK\n"
+	.string	"RKNAND_LOADER_STATUS\n"
 .LC199:
-	.string	"LockKey not match %d\n"
+	.string	"RKNAND_LOADER_LOCK\n"
 .LC200:
-	.string	"RKNAND_GET_VENDOR_SECTOR\n"
+	.string	"LockKey not match %d\n"
 .LC201:
-	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
+	.string	"RKNAND_GET_VENDOR_SECTOR\n"
 .LC202:
-	.string	"return ret = %lx\n"
+	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
 .LC203:
-	.string	"secureBootEn check error\n"
+	.string	"return ret = %lx\n"
 .LC204:
+	.string	"secureBootEn check error\n"
+.LC205:
 	.string	"\0013vendor storage %x,%x,%x\n"
 	.data
 	.align	3
diff --git a/drivers/rk_nand/rk_ftlv5_arm32.S b/drivers/rk_nand/rk_ftlv5_arm32.S
new file mode 100644
index 000000000000..9300957eefee
--- /dev/null
+++ b/drivers/rk_nand/rk_ftlv5_arm32.S
@@ -0,0 +1,26943 @@
+/*
+ * Copyright (c) 2016-2018, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2019-09-29
+ * function: rk ftl v5 for rockchip soc base on arm v7 to support MLC NAND.
+ */
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 34, 1
+	.eabi_attribute 18, 2
+	.file	"rk_ftlv5_arm_v7.S"
+#APP
+	.text
+	.align	2
+	.global	FlashMemCmp8
+	.type	FlashMemCmp8, %function
+FlashMemCmp8:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L11
+	str	lr, [sp, #-4]!
+	.save {lr}
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L4
+	ldrb	r3, [r1, #1]	@ zero_extendqisi2
+	ldrb	ip, [r0, #1]	@ zero_extendqisi2
+	cmp	ip, r3
+	movne	r3, #0
+	beq	.L8
+.L4:
+	cmp	r3, r2
+	beq	.L8
+	ldrb	lr, [r0, r3]	@ zero_extendqisi2
+	ldrb	ip, [r1, r3]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	lr, ip
+	beq	.L4
+	mov	r0, r3
+	ldr	pc, [sp], #4
+.L8:
+	mov	r0, #0
+	ldr	pc, [sp], #4
+.L12:
+	.align	2
+.L11:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashMemCmp8, .-FlashMemCmp8
+	.align	2
+	.global	FlashRsvdBlkChk
+	.type	FlashRsvdBlkChk, %function
+FlashRsvdBlkChk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L14
+	ldrb	r2, [r3, #1]	@ zero_extendqisi2
+	ldr	r3, [r3, #4]
+	mul	r3, r3, r2
+	cmp	r1, r3
+	movcs	r2, #0
+	movcc	r2, #1
+	cmp	r0, #0
+	movne	r2, #0
+	eor	r0, r2, #1
+	bx	lr
+.L15:
+	.align	2
+.L14:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
+	.align	2
+	.global	FlashGetRandomizer
+	.type	FlashGetRandomizer, %function
+FlashGetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	and	r3, r1, #127
+	ldr	r2, .L25
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r3, r3, asl #1
+	ldrh	r4, [r2, r3]
+	ldr	r3, .L25+4
+	ldrb	r3, [r3, #8]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L17
+	bl	FlashRsvdBlkChk
+	cmp	r0, #0
+	orrne	r4, r4, #-1073741824
+.L17:
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L26:
+	.align	2
+.L25:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetRandomizer, .-FlashGetRandomizer
+	.align	2
+	.global	FlashSetRandomizer
+	.type	FlashSetRandomizer, %function
+FlashSetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	and	r3, r1, #127
+	ldr	r2, .L36
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r3, r3, asl #1
+	mov	r6, r0
+	ldrh	r5, [r2, r3]
+	ldr	r3, .L36+4
+	ldrb	r2, [r3, #8]	@ zero_extendqisi2
+	mov	r4, r3
+	cmp	r2, #0
+	beq	.L28
+	bl	FlashRsvdBlkChk
+	cmp	r0, #0
+	orrne	r5, r5, #-1073741824
+.L28:
+	add	r4, r4, r6, asl #3
+	ldr	r3, [r4, #12]
+	str	r5, [r3, #336]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L37:
+	.align	2
+.L36:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashSetRandomizer, .-FlashSetRandomizer
+	.align	2
+	.global	FlashBlockAlignInit
+	.type	FlashBlockAlignInit, %function
+FlashBlockAlignInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, #256
+	ldr	r3, .L43
+	movhi	r2, #512
+	bhi	.L42
+	cmp	r0, #128
+	strls	r0, [r3, #4]
+	bxls	lr
+	mov	r2, #256
+.L42:
+	str	r2, [r3, #4]
+	bx	lr
+.L44:
+	.align	2
+.L43:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashBlockAlignInit, .-FlashBlockAlignInit
+	.align	2
+	.global	FlashReadCmd
+	.type	FlashReadCmd, %function
+FlashReadCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	ip, .L46
+	mov	r2, r1, lsr #16
+	add	ip, ip, r0, asl #3
+	ldr	r3, [ip, #12]
+	ldrb	ip, [ip, #16]	@ zero_extendqisi2
+	add	r3, r3, ip, asl #8
+	mov	ip, #0
+	str	ip, [r3, #2056]
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+	uxtb	ip, r1
+	str	ip, [r3, #2052]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #2052]
+	str	r2, [r3, #2052]
+	mov	r2, #48
+	str	r2, [r3, #2056]
+	b	FlashSetRandomizer
+.L47:
+	.align	2
+.L46:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadCmd, .-FlashReadCmd
+	.align	2
+	.global	FlashReadDpDataOutCmd
+	.type	FlashReadDpDataOutCmd, %function
+FlashReadDpDataOutCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L53
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	r3, ip, r0, asl #3
+	ldrb	ip, [ip, #60]	@ zero_extendqisi2
+	uxtb	r4, r1
+	ldr	r2, [r3, #12]
+	mov	lr, r1, lsr #8
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	cmp	ip, #1
+	mov	ip, r1, lsr #16
+	mov	r3, r3, asl #8
+	add	r3, r2, r3
+	bne	.L49
+	mov	r2, #6
+	str	r2, [r3, #2056]
+	mov	r2, #0
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	str	r4, [r3, #2052]
+	str	lr, [r3, #2052]
+	str	ip, [r3, #2052]
+	b	.L52
+.L49:
+	mov	r2, #0
+	str	r2, [r3, #2056]
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	str	r4, [r3, #2052]
+	str	lr, [r3, #2052]
+	str	ip, [r3, #2052]
+	mov	ip, #5
+	str	ip, [r3, #2056]
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+.L52:
+	mov	r2, #224
+	str	r2, [r3, #2056]
+	ldmfd	sp!, {r4, lr}
+	b	FlashSetRandomizer
+.L54:
+	.align	2
+.L53:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
+	.align	2
+	.global	FlashProgFirstCmd
+	.type	FlashProgFirstCmd, %function
+FlashProgFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	ip, .L56
+	mov	r2, r1, lsr #16
+	add	ip, ip, r0, asl #3
+	ldr	r3, [ip, #12]
+	ldrb	ip, [ip, #16]	@ zero_extendqisi2
+	add	r3, r3, ip, asl #8
+	mov	ip, #128
+	str	ip, [r3, #2056]
+	mov	ip, #0
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+	uxtb	ip, r1
+	str	ip, [r3, #2052]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #2052]
+	str	r2, [r3, #2052]
+	b	FlashSetRandomizer
+.L57:
+	.align	2
+.L56:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
+	.align	2
+	.global	FlashEraseCmd
+	.type	FlashEraseCmd, %function
+FlashEraseCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	cmp	r2, #0
+	ldr	lr, .L64
+	add	r0, lr, r0, asl #3
+	ldrb	r3, [r0, #16]	@ zero_extendqisi2
+	ldr	ip, [r0, #12]
+	mov	r3, r3, asl #8
+	beq	.L59
+	add	r2, ip, r3
+	mov	r0, #96
+	str	r0, [r2, #2056]
+	uxtb	r0, r1
+	str	r0, [r2, #2052]
+	mov	r0, r1, lsr #8
+	str	r0, [r2, #2052]
+	mov	r0, r1, lsr #16
+	str	r0, [r2, #2052]
+	ldr	r2, [lr, #4]
+	add	r1, r1, r2
+.L59:
+	add	r3, ip, r3
+	mov	r2, #96
+	str	r2, [r3, #2056]
+	uxtb	r2, r1
+	str	r2, [r3, #2052]
+	mov	r2, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r2, [r3, #2052]
+	str	r1, [r3, #2052]
+	mov	r2, #208
+	str	r2, [r3, #2056]
+	ldr	pc, [sp], #4
+.L65:
+	.align	2
+.L64:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashEraseCmd, .-FlashEraseCmd
+	.align	2
+	.global	FlashProgDpSecondCmd
+	.type	FlashProgDpSecondCmd, %function
+FlashProgDpSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L68
+	mov	r2, r1, lsr #16
+	str	lr, [sp, #-4]!
+	.save {lr}
+	add	lr, ip, r0, asl #3
+	ldrb	ip, [ip, #55]	@ zero_extendqisi2
+	ldr	r3, [lr, #12]
+	ldrb	lr, [lr, #16]	@ zero_extendqisi2
+	add	r3, r3, lr, asl #8
+	str	ip, [r3, #2056]
+	mov	ip, #0
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+	uxtb	ip, r1
+	str	ip, [r3, #2052]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #2052]
+	str	r2, [r3, #2052]
+	ldr	lr, [sp], #4
+	b	FlashSetRandomizer
+.L69:
+	.align	2
+.L68:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
+	.align	2
+	.global	FlashProgSecondCmd
+	.type	FlashProgSecondCmd, %function
+FlashProgSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L72
+	add	r0, r3, r0, asl #3
+	ldr	r3, .L72+4
+	ldrb	r5, [r0, #16]	@ zero_extendqisi2
+	ldr	r4, [r0, #12]
+	ldr	r3, [r3, #4]
+	add	r4, r4, r5, asl #8
+	ldr	r0, .L72+8
+	blx	r3
+	mov	r3, #16
+	str	r3, [r4, #2056]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L73:
+	.align	2
+.L72:
+	.word	.LANCHOR0
+	.word	arm_delay_ops
+	.word	64424500
+	.fnend
+	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
+	.align	2
+	.global	FlashProgDpFirstCmd
+	.type	FlashProgDpFirstCmd, %function
+FlashProgDpFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L75
+	add	r0, r2, r0, asl #3
+	ldrb	r2, [r2, #54]	@ zero_extendqisi2
+	ldrb	r1, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	add	r3, r3, r1, asl #8
+	str	r2, [r3, #2056]
+	bx	lr
+.L76:
+	.align	2
+.L75:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
+	.align	2
+	.global	js_hash
+	.type	js_hash, %function
+js_hash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L81
+	add	r1, r0, r1
+.L78:
+	cmp	r0, r1
+	beq	.L80
+	mov	r2, r3, asl #5
+	ldrb	ip, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsr #2
+	add	r2, r2, ip
+	eor	r3, r3, r2
+	b	.L78
+.L80:
+	mov	r0, r3
+	bx	lr
+.L82:
+	.align	2
+.L81:
+	.word	1204201446
+	.fnend
+	.size	js_hash, .-js_hash
+	.align	2
+	.global	FlashLoadIdbInfo
+	.type	FlashLoadIdbInfo, %function
+FlashLoadIdbInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r0, #0
+	bx	lr
+	.fnend
+	.size	FlashLoadIdbInfo, .-FlashLoadIdbInfo
+	.align	2
+	.global	BuildFlashLsbPageTable
+	.type	BuildFlashLsbPageTable, %function
+BuildFlashLsbPageTable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r1
+	bne	.L85
+	ldr	r3, .L115
+.L86:
+	mov	r2, r0, asl #1
+	strh	r0, [r2, r3]	@ movhi
+	add	r0, r0, #1
+	cmp	r0, #256
+	bne	.L86
+.L90:
+	mov	r2, #1024
+	ldr	r0, .L115+4
+	mov	r1, #255
+	uxth	r4, r4
+	bl	ftl_memset
+	ldr	r2, .L115
+	mov	r3, #0
+	add	r0, r2, #512
+	b	.L87
+.L85:
+	cmp	r0, #1
+	bne	.L88
+	ldr	ip, .L115
+	mov	r3, #0
+.L89:
+	uxth	r2, r3
+	mov	lr, r3, asl #1
+	cmp	r2, #3
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	add	r3, r3, #1
+	movne	r1, #2
+	moveq	r1, #3
+	cmp	r0, #0
+	rsb	r1, r1, r2, asl #1
+	movne	r2, r1
+	cmp	r3, #256
+	strh	r2, [lr, ip]	@ movhi
+	bne	.L89
+	b	.L90
+.L88:
+	cmp	r0, #2
+	bne	.L91
+	ldr	r1, .L115
+	mov	r3, #0
+.L92:
+	uxth	r2, r3
+	mov	r0, r3, asl #1
+	cmp	r2, #1
+	add	r3, r3, #1
+	mov	ip, r2, asl #1
+	subhi	r2, ip, #1
+	cmp	r3, #256
+	strh	r2, [r0, r1]	@ movhi
+	bne	.L92
+	b	.L90
+.L91:
+	cmp	r0, #3
+	bne	.L93
+	ldr	ip, .L115
+	mov	r3, #0
+.L94:
+	uxth	r2, r3
+	mov	lr, r3, asl #1
+	cmp	r2, #5
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	add	r3, r3, #1
+	movne	r1, #4
+	moveq	r1, #5
+	cmp	r0, #0
+	rsb	r1, r1, r2, asl #1
+	movne	r2, r1
+	cmp	r3, #256
+	strh	r2, [lr, ip]	@ movhi
+	bne	.L94
+	b	.L90
+.L93:
+	cmp	r0, #4
+	mov	r3, #0
+	bne	.L95
+	ldr	r2, .L115+8
+	strh	r3, [r2, #76]	@ movhi
+	mov	r3, #1
+	strh	r0, [r2, #84]	@ movhi
+	strh	r3, [r2, #78]	@ movhi
+	mov	r3, #2
+	strh	r3, [r2, #80]	@ movhi
+	mov	r3, #3
+	strh	r3, [r2, #82]	@ movhi
+	mov	r3, #5
+	strh	r3, [r2, #86]	@ movhi
+	mov	r3, #7
+	strh	r3, [r2, #88]	@ movhi
+	mov	r3, #8
+	strh	r3, [r2, #90]!	@ movhi
+.L96:
+	tst	r3, #1
+	movne	r1, #7
+	moveq	r1, #6
+	rsb	r1, r1, r3, asl #1
+	add	r3, r3, #1
+	strh	r1, [r2, #2]!	@ movhi
+	uxth	r3, r3
+	cmp	r3, #256
+	bne	.L96
+	b	.L90
+.L95:
+	cmp	r0, #5
+	bne	.L97
+	ldr	r2, .L115
+.L98:
+	mov	r1, r3, asl #1
+	strh	r3, [r1, r2]	@ movhi
+	add	r3, r3, #1
+	cmp	r3, #16
+	bne	.L98
+	ldr	r2, .L115+12
+.L99:
+	strh	r3, [r2, #2]!	@ movhi
+	add	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, #496
+	bne	.L99
+	b	.L90
+.L97:
+	cmp	r0, #6
+	bne	.L100
+	ldr	r1, .L115+16
+.L101:
+	cmp	r3, #5
+	add	r2, r3, r3, asl #1
+	movls	r0, #0
+	movhi	r0, #1
+	bics	ip, r0, r3
+	movne	ip, #10
+	moveq	ip, #12
+	cmp	r0, #0
+	subne	r2, r2, ip
+	moveq	r2, r3
+	add	r3, r3, #1
+	strh	r2, [r1, #2]!	@ movhi
+	uxth	r3, r3
+	cmp	r3, #256
+	bne	.L101
+	b	.L90
+.L100:
+	cmp	r0, #9
+	bne	.L90
+	ldr	r2, .L115+8
+	movw	r1, #509
+	strh	r3, [r2, #76]	@ movhi
+	mov	r3, #1
+	strh	r3, [r2, #78]	@ movhi
+	mov	r3, #2
+	strh	r3, [r2, #80]!	@ movhi
+	mov	r3, #3
+.L102:
+	strh	r3, [r2, #2]!	@ movhi
+	add	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, r1
+	bne	.L102
+	b	.L90
+.L87:
+	uxth	r1, r3
+	cmp	r1, r4
+	bcs	.L114
+	mov	r1, r3, asl #1
+	add	r3, r3, #1
+	ldrh	r1, [r1, r2]
+	mov	ip, r1, asl #1
+	strh	r1, [r0, ip]	@ movhi
+	b	.L87
+.L114:
+	ldmfd	sp!, {r4, pc}
+.L116:
+	.align	2
+.L115:
+	.word	.LANCHOR0+76
+	.word	.LANCHOR0+588
+	.word	.LANCHOR0
+	.word	.LANCHOR0+106
+	.word	.LANCHOR0+74
+	.fnend
+	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
+	.align	2
+	.global	FlashPrintInfo
+	.type	FlashPrintInfo, %function
+FlashPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashPrintInfo, .-FlashPrintInfo
+	.align	2
+	.global	FlashDieInfoInit
+	.type	FlashDieInfoInit, %function
+FlashDieInfoInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #0
+	ldr	r3, .L133
+	ldr	r4, .L133+4
+	ldr	r9, .L133+8
+	ldrh	r0, [r3, #10]
+	strb	r5, [r4, #1612]
+	strb	r5, [r4, #1613]
+	bl	FlashBlockAlignInit
+	mov	r1, r5
+	mov	r2, #8
+	add	r0, r4, #1616
+	bl	ftl_memset
+	mov	r1, r5
+	mov	r2, #32
+	ldr	r0, .L133+12
+	bl	ftl_memset
+	ldr	r0, .L133+16
+	mov	r1, r5
+	mov	r2, #128
+	bl	ftl_memset
+	ldr	r7, [r4, #1784]
+	add	r6, r7, #1
+.L120:
+	mov	r0, r6
+	add	r1, r9, r5, asl #3
+	ldrb	r2, [r7]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	ldr	r8, .L133+8
+	cmp	r0, #0
+	bne	.L119
+	ldrb	r3, [r4, #1612]	@ zero_extendqisi2
+	add	r2, r4, r3, asl #2
+	str	r0, [r2, #1624]
+	add	r2, r3, #1
+	add	r3, r4, r3
+	strb	r2, [r4, #1612]
+	strb	r5, [r3, #1616]
+.L119:
+	add	r5, r5, #1
+	cmp	r5, #4
+	bne	.L120
+	ldrb	r3, [r4, #1612]	@ zero_extendqisi2
+	strb	r3, [r4, #1613]
+	ldrb	r3, [r7, #8]	@ zero_extendqisi2
+	cmp	r3, #2
+	beq	.L121
+.L125:
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	ldrb	r2, [r4, #1612]	@ zero_extendqisi2
+	smulbb	r2, r2, r3
+	ldrh	r3, [r7, #14]
+	smulbb	r3, r2, r3
+	movw	r2, #1788
+	strh	r3, [r4, r2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L121:
+	ldr	r3, .L133+4
+	mov	r5, #0
+	ldr	r9, [r3, #4]
+.L124:
+	mov	r0, r6
+	add	r1, r8, r5, asl #3
+	ldrb	r2, [r7]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	cmp	r0, #0
+	bne	.L122
+	ldrb	r1, [r7, #13]	@ zero_extendqisi2
+	ldrh	r3, [r7, #14]
+	ldrb	r2, [r4, #1612]	@ zero_extendqisi2
+	mul	r1, r9, r1
+	and	r3, r3, #65280
+	add	r0, r4, r2, asl #2
+	mul	r3, r3, r1
+	str	r3, [r0, #1624]
+	ldrb	r1, [r7, #23]	@ zero_extendqisi2
+	cmp	r1, #0
+	movne	r3, r3, asl #1
+	strne	r3, [r0, #1624]
+	add	r3, r2, #1
+	add	r2, r4, r2
+	strb	r3, [r4, #1612]
+	strb	r5, [r2, #1616]
+.L122:
+	add	r5, r5, #1
+	cmp	r5, #4
+	bne	.L124
+	b	.L125
+.L134:
+	.align	2
+.L133:
+	.word	.LANCHOR1+256
+	.word	.LANCHOR0
+	.word	IDByte
+	.word	.LANCHOR0+1624
+	.word	.LANCHOR0+1656
+	.fnend
+	.size	FlashDieInfoInit, .-FlashDieInfoInit
+	.align	2
+	.global	FlashReadIdbData
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	mov	r2, #2048
+	ldr	r1, .L137
+	bl	ftl_memcpy
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L138:
+	.align	2
+.L137:
+	.word	.LANCHOR0+1792
+	.fnend
+	.size	FlashReadIdbData, .-FlashReadIdbData
+	.align	2
+	.global	FlashLoadPhyInfoInRam
+	.type	FlashLoadPhyInfoInRam, %function
+FlashLoadPhyInfoInRam:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r6, #0
+	ldr	r8, .L152
+.L143:
+	mov	r4, r6, asl #5
+	ldr	r1, .L152+4
+	add	r0, r4, #1
+	ldrb	r2, [r8, r6, asl #5]	@ zero_extendqisi2
+	add	r0, r8, r0
+	ldr	r5, .L152+8
+	bl	FlashMemCmp8
+	add	r9, r5, #288
+	subs	r7, r0, #0
+	bne	.L140
+	adds	r9, r9, r4
+	beq	.L146
+	add	r4, r5, r4
+	add	r5, r5, #2880
+	ldrb	r3, [r4, #310]	@ zero_extendqisi2
+	mov	r4, r7
+	b	.L145
+.L140:
+	add	r6, r6, #1
+	cmp	r6, #81
+	bne	.L143
+	b	.L146
+.L151:
+	add	r4, r4, #1
+	cmp	r4, #4
+	beq	.L144
+.L145:
+	ldrb	r2, [r5, r4, asl #5]	@ zero_extendqisi2
+	cmp	r2, r3
+	bne	.L151
+.L144:
+	ldr	r6, .L152+12
+	mov	r2, #32
+	ldr	r1, .L152+16
+	ldr	r0, .L152+20
+	add	r1, r1, r4, asl #5
+	bl	ftl_memcpy
+	mov	r0, r6
+	mov	r1, r9
+	mov	r2, #32
+	bl	ftl_memcpy
+	ldrh	r0, [r6, #10]
+	bl	FlashBlockAlignInit
+	b	.L141
+.L146:
+	mvn	r7, #0
+.L141:
+	mov	r0, r7
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L153:
+	.align	2
+.L152:
+	.word	.LANCHOR1+288
+	.word	IDByte
+	.word	.LANCHOR1
+	.word	.LANCHOR1+256
+	.word	.LANCHOR1+2880
+	.word	.LANCHOR0+44
+	.fnend
+	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
+	.align	2
+	.global	ftl_flash_suspend
+	.type	ftl_flash_suspend, %function
+ftl_flash_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L155
+	ldr	r2, [r3, #3840]
+	ldr	r1, [r2]
+	str	r1, [r3, #3844]
+	ldr	r1, [r2, #4]
+	str	r1, [r3, #3848]
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #3852]
+	ldr	r1, [r2, #12]
+	str	r1, [r3, #3856]
+	ldr	r1, [r2, #304]
+	str	r1, [r3, #3860]
+	ldr	r1, [r2, #308]
+	str	r1, [r3, #3864]
+	ldr	r1, [r2, #336]
+	ldr	r2, [r2, #344]
+	str	r1, [r3, #3868]
+	str	r2, [r3, #3872]
+	bx	lr
+.L156:
+	.align	2
+.L155:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_flash_suspend, .-ftl_flash_suspend
+	.global	__aeabi_uidiv
+	.align	2
+	.global	LogAddr2PhyAddr
+	.type	LogAddr2PhyAddr, %function
+LogAddr2PhyAddr:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r9, r3
+	ldr	r3, .L163
+	mov	r10, r1
+	ldr	r7, .L163+4
+	mov	r6, r0
+	ldr	ip, [r0, #4]
+	mov	r8, r2
+	ldrh	r4, [r3, #12]
+	ldrh	r3, [r3, #14]
+	bic	ip, ip, #-2147483648
+	ldrh	fp, [r7, #4]
+	ubfx	r5, ip, #10, #16
+	str	ip, [sp, #4]
+	smulbb	r4, r4, r3
+	ldrb	r3, [r7]	@ zero_extendqisi2
+	mov	r0, r5
+	cmp	r3, #1
+	moveq	fp, fp, asl #1
+	uxth	r4, r4
+	uxtheq	fp, fp
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	cmp	r10, #1
+	uxth	r0, r0
+	ldr	ip, [sp, #4]
+	smulbb	r4, r0, r4
+	rsb	r5, r4, r5
+	ubfx	r4, ip, #0, #10
+	uxth	r5, r5
+	bne	.L159
+	ldrb	r3, [r7, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L163+4
+	addeq	r4, r3, r4, asl #1
+	ldreqh	r4, [r4, #76]
+.L159:
+	add	ip, r7, r0, asl #2
+	ldrb	r3, [sp, #48]	@ zero_extendqisi2
+	ldr	r1, [ip, #1624]
+	cmp	r3, #1
+	mla	r1, fp, r5, r1
+	add	r4, r1, r4
+	str	r4, [r8]
+	str	r0, [r9]
+	movls	r0, #0
+	ldrhi	r0, [r6, #4]
+	ldrhi	r3, [r6, #40]
+	addhi	r0, r0, #1024
+	rsbhi	r0, r3, r0
+	clzhi	r0, r0
+	movhi	r0, r0, lsr #5
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L164:
+	.align	2
+.L163:
+	.word	.LANCHOR0+3876
+	.word	.LANCHOR0
+	.fnend
+	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
+	.align	2
+	.global	ftl_read_flash_info
+	.type	ftl_read_flash_info, %function
+ftl_read_flash_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r1, #0
+	mov	r2, #11
+	mov	r4, r0
+	bl	ftl_memset
+	ldr	r3, .L170
+	mov	ip, #1
+	add	r3, r3, #1616
+	ldr	r2, [r3, #168]
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
+	ldr	r2, [r3, #-1612]
+	smulbb	r2, r1, r2
+	strh	r2, [r4, #4]	@ unaligned
+	ldrb	r2, [r3, #2289]	@ zero_extendqisi2
+	strb	r2, [r4, #7]
+	ldr	r2, [r3, #2292]
+	str	r2, [r4]	@ unaligned
+	ldr	r2, [r3, #168]
+	ldrb	r0, [r3, #-4]	@ zero_extendqisi2
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
+	strb	r1, [r4, #6]
+	mov	r1, #32
+	strb	r1, [r4, #8]
+	ldrb	r2, [r2, #7]	@ zero_extendqisi2
+	strb	r2, [r4, #9]
+	mov	r2, #0
+	strb	r2, [r4, #10]
+.L166:
+	uxtb	r1, r2
+	cmp	r1, r0
+	bcs	.L169
+	ldrb	lr, [r2, r3]	@ zero_extendqisi2
+	add	r2, r2, #1
+	ldrb	r1, [r4, #10]	@ zero_extendqisi2
+	orr	r1, r1, ip, asl lr
+	strb	r1, [r4, #10]
+	b	.L166
+.L169:
+	ldmfd	sp!, {r4, pc}
+.L171:
+	.align	2
+.L170:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_read_flash_info, .-ftl_read_flash_info
+	.align	2
+	.global	FlashScheduleEnSet
+	.type	FlashScheduleEnSet, %function
+FlashScheduleEnSet:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L173
+	ldr	r2, [r3, #3912]
+	str	r0, [r3, #3912]
+	mov	r0, r2
+	bx	lr
+.L174:
+	.align	2
+.L173:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
+	.align	2
+	.global	FlashGetPageSize
+	.type	FlashGetPageSize, %function
+FlashGetPageSize:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L176
+	ldr	r3, [r3, #1784]
+	ldrb	r0, [r3, #9]	@ zero_extendqisi2
+	bx	lr
+.L177:
+	.align	2
+.L176:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetPageSize, .-FlashGetPageSize
+	.align	2
+	.global	NandcReadDontCaseBusyEn
+	.type	NandcReadDontCaseBusyEn, %function
+NandcReadDontCaseBusyEn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	NandcReadDontCaseBusyEn, .-NandcReadDontCaseBusyEn
+	.align	2
+	.global	NandcGetChipIf
+	.type	NandcGetChipIf, %function
+NandcGetChipIf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L180
+	add	r0, r3, r0, asl #3
+	ldrb	r2, [r0, #16]	@ zero_extendqisi2
+	ldr	r0, [r0, #12]
+	add	r2, r2, #8
+	add	r0, r0, r2, asl #8
+	bx	lr
+.L181:
+	.align	2
+.L180:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetChipIf, .-NandcGetChipIf
+	.align	2
+	.global	NandcSetDdrPara
+	.type	NandcSetDdrPara, %function
+NandcSetDdrPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L183
+	ldr	r2, [r3, #3840]
+	mov	r3, r0, asl #8
+	orr	r0, r3, r0, asl #16
+	orr	r3, r0, #1
+	str	r3, [r2, #304]
+	bx	lr
+.L184:
+	.align	2
+.L183:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrPara, .-NandcSetDdrPara
+	.align	2
+	.global	NandcSetDdrDiv
+	.type	NandcSetDdrDiv, %function
+NandcSetDdrDiv:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L186
+	orr	r0, r0, #16640
+	ldr	r3, [r3, #3840]
+	str	r0, [r3, #344]
+	bx	lr
+.L187:
+	.align	2
+.L186:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
+	.align	2
+	.global	NandcSetDdrMode
+	.type	NandcSetDdrMode, %function
+NandcSetDdrMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L191
+	cmp	r0, #0
+	ldr	r2, [r3, #3840]
+	ldr	r3, [r2]
+	bfieq	r3, r0, #13, #1
+	orrne	r3, r3, #253952
+	str	r3, [r2]
+	bx	lr
+.L192:
+	.align	2
+.L191:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrMode, .-NandcSetDdrMode
+	.align	2
+	.global	NandcSetMode
+	.type	NandcSetMode, %function
+NandcSetMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L200
+	ands	r1, r0, #6
+	ldr	r2, [r3, #3840]
+	ldr	r3, [r2]
+	bfieq	r3, r1, #13, #1
+	beq	.L196
+	orr	r3, r3, #24576
+	movw	r1, #8322
+	bfc	r3, #15, #1
+	str	r1, [r2, #344]
+	orr	r3, r3, #196608
+	ldr	r1, .L200+4
+	tst	r0, #4
+	orrne	r3, r3, #32768
+	str	r1, [r2, #304]
+	mov	r1, #38
+	str	r1, [r2, #308]
+	mov	r1, #39
+	str	r1, [r2, #308]
+.L196:
+	str	r3, [r2]
+	mov	r0, #0
+	bx	lr
+.L201:
+	.align	2
+.L200:
+	.word	.LANCHOR0
+	.word	1052675
+	.fnend
+	.size	NandcSetMode, .-NandcSetMode
+	.align	2
+	.global	NandcFlashCs
+	.type	NandcFlashCs, %function
+NandcFlashCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L203
+	add	r0, r2, r0, asl #3
+	mov	r2, #1
+	ldr	r1, [r0, #12]
+	ldrb	r0, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r1]
+	mov	r2, r2, asl r0
+	bfi	r3, r2, #0, #8
+	str	r3, [r1]
+	bx	lr
+.L204:
+	.align	2
+.L203:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashCs, .-NandcFlashCs
+	.align	2
+	.global	NandcFlashDeCs
+	.type	NandcFlashDeCs, %function
+NandcFlashDeCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L206
+	add	r0, r3, r0, asl #3
+	ldr	r2, [r0, #12]
+	ldr	r3, [r2]
+	bfc	r3, #0, #8
+	bfc	r3, #17, #1
+	str	r3, [r2]
+	bx	lr
+.L207:
+	.align	2
+.L206:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashDeCs, .-NandcFlashDeCs
+	.align	2
+	.global	NandcDelayns
+	.type	NandcDelayns, %function
+NandcDelayns:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	add	r0, r0, #996
+	ldr	r3, .L210
+	add	r0, r0, #3
+	umull	r0, r1, r0, r3
+	ldr	r3, .L210+4
+	ldr	r3, [r3, #8]
+	mov	r0, r1, lsr #6
+	blx	r3
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L211:
+	.align	2
+.L210:
+	.word	274877907
+	.word	arm_delay_ops
+	.fnend
+	.size	NandcDelayns, .-NandcDelayns
+	.align	2
+	.global	FlashReadStatus
+	.type	FlashReadStatus, %function
+FlashReadStatus:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #112
+	ldr	r3, .L214
+	add	r0, r3, r0, asl #3
+	ldrb	r4, [r0, #16]	@ zero_extendqisi2
+	ldr	r5, [r0, #12]
+	mov	r0, #80
+	add	r3, r5, r4, asl #8
+	add	r4, r4, #8
+	str	r2, [r3, #2056]
+	bl	NandcDelayns
+	ldr	r0, [r5, r4, asl #8]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L215:
+	.align	2
+.L214:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatus, .-FlashReadStatus
+	.align	2
+	.global	ToshibaSetRRPara
+	.type	ToshibaSetRRPara, %function
+ToshibaSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r7, r1, r1, asl #2
+	ldr	r8, .L226
+	mov	r5, r0
+	ldr	r10, .L226+4
+	mov	r6, r1
+	add	r9, r8, #3008
+	mov	r4, #0
+.L217:
+	ldrb	r3, [r10]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L225
+	mov	r3, #85
+	str	r3, [r5, #8]
+	ldrsb	r3, [r4, r9]
+	mov	r0, #200
+	str	r3, [r5, #4]
+	bl	NandcDelayns
+	ldr	r3, .L226+8
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #34
+	addeq	r3, r4, r7
+	addeq	r3, r9, r3
+	beq	.L224
+	cmp	r3, #35
+	addne	r3, r8, r6
+	addne	r3, r3, #3152
+	ldrnesb	r3, [r3]
+	bne	.L223
+	ldr	r3, .L226+12
+	add	r2, r4, r7
+	add	r3, r3, r2
+.L224:
+	ldrsb	r3, [r3, #5]
+.L223:
+	str	r3, [r5]
+	add	r4, r4, #1
+	b	.L217
+.L225:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L227:
+	.align	2
+.L226:
+	.word	.LANCHOR1
+	.word	g_maxRegNum
+	.word	g_retryMode
+	.word	.LANCHOR1+3056
+	.fnend
+	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
+	.align	2
+	.global	SamsungSetRRPara
+	.type	SamsungSetRRPara, %function
+SamsungSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L233
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r1, r3, r1, asl #2
+	ldr	r8, .L233+4
+	mov	r4, #0
+	add	r5, r1, #3
+	mov	r6, r0
+	mov	r7, r3
+	mov	r9, #161
+	mov	r10, r4
+.L229:
+	ldrb	r3, [r8]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L232
+	str	r9, [r6, #8]
+	mov	r0, #300
+	str	r10, [r6]
+	ldrsb	r3, [r4, r7]
+	add	r4, r4, #1
+	str	r3, [r6]
+	ldrsb	r3, [r5, #1]!
+	str	r3, [r6]
+	bl	NandcDelayns
+	b	.L229
+.L232:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L234:
+	.align	2
+.L233:
+	.word	.LANCHOR1+3160
+	.word	g_maxRegNum
+	.fnend
+	.size	SamsungSetRRPara, .-SamsungSetRRPara
+	.align	2
+	.global	HynixSetRRPara
+	.type	HynixSetRRPara, %function
+HynixSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r5, r3
+	ldr	r3, .L244
+	mov	r10, r2
+	ldr	r4, .L244+4
+	mov	r6, r0
+	mov	r9, r1
+	ldr	r2, [r3, #1784]
+	ldrb	r8, [r2, #19]	@ zero_extendqisi2
+	mov	r2, r0, asl #3
+	cmp	r8, #6
+	addeq	r4, r4, r0, asl #6
+	addeq	r4, r4, #20
+	addeq	r4, r4, r5, asl #2
+	beq	.L237
+	cmp	r8, #7
+	bne	.L238
+	mov	r8, #160
+	add	r1, r5, r5, asl #2
+	mla	r4, r8, r0, r4
+	add	r4, r4, #28
+	add	r4, r4, r1, asl #1
+	b	.L237
+.L238:
+	cmp	r8, #8
+	addne	r1, r5, r2
+	addeq	r1, r5, r5, asl #2
+	ldreq	r4, .L244+8
+	addne	r4, r4, r1, asl #3
+	addeq	r4, r4, r1
+	addne	r4, r4, #20
+.L237:
+	add	r3, r3, r2
+	mov	r0, r6
+	sub	r9, r9, #1
+	sub	r4, r4, #1
+	ldrb	fp, [r3, #16]	@ zero_extendqisi2
+	ldr	r8, [r3, #12]
+	bl	NandcFlashCs
+	sub	r2, r10, #1
+	add	r10, r10, r9
+	mov	fp, fp, asl #8
+	mov	r3, #54
+	add	r7, r8, fp
+	str	r3, [r7, #2056]
+.L240:
+	cmp	r2, r10
+	beq	.L243
+	ldrb	r3, [r2, #1]!	@ zero_extendqisi2
+	mov	r0, #200
+	str	r3, [r7, #2052]
+	str	r2, [sp, #4]
+	bl	NandcDelayns
+	ldrsb	r3, [r4, #1]!
+	str	r3, [r7, #2048]
+	ldr	r2, [sp, #4]
+	b	.L240
+.L243:
+	add	r8, r8, fp
+	mov	r3, #22
+	mov	r0, r6
+	str	r3, [r8, #2056]
+	bl	NandcFlashDeCs
+	ldr	r3, .L244+12
+	add	r6, r3, r6
+	strb	r5, [r6, #-3416]
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L245:
+	.align	2
+.L244:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3916
+	.word	.LANCHOR0+3944
+	.word	.LANCHOR2
+	.fnend
+	.size	HynixSetRRPara, .-HynixSetRRPara
+	.align	2
+	.global	FlashSetReadRetryDefault
+	.type	FlashSetReadRetryDefault, %function
+FlashSetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L254
+	ldr	r2, [r3, #1784]
+	ldrb	r2, [r2, #19]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	cmp	r2, #7
+	bxhi	lr
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r3
+	ldr	r6, .L254+4
+	mov	r4, #0
+.L247:
+	ldrb	r3, [r6, r4, asl #3]	@ zero_extendqisi2
+	uxtb	r0, r4
+	cmp	r3, #173
+	bne	.L248
+	ldrb	r1, [r5, #3917]	@ zero_extendqisi2
+	mov	r3, #0
+	ldr	r2, .L254+8
+	bl	HynixSetRRPara
+.L248:
+	add	r4, r4, #1
+	cmp	r4, #4
+	bne	.L247
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L255:
+	.align	2
+.L254:
+	.word	.LANCHOR0
+	.word	IDByte
+	.word	.LANCHOR0+3920
+	.fnend
+	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
+	.align	2
+	.global	FlashReadStatusEN
+	.type	FlashReadStatusEN, %function
+FlashReadStatusEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L267
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	add	r0, ip, r0, asl #3
+	ldr	r3, [ip, #1784]
+	ldrb	r5, [r0, #16]	@ zero_extendqisi2
+	ldr	r4, [r0, #12]
+	ldrb	r3, [r3, #8]	@ zero_extendqisi2
+	cmp	r3, #2
+	mov	r3, r5, asl #8
+	addne	r3, r4, r3
+	add	r5, r5, #8
+	movne	r2, #112
+	strne	r2, [r3, #2056]
+	bne	.L261
+	cmp	r2, #0
+	add	r3, r4, r3
+	ldrneb	r2, [ip, #58]	@ zero_extendqisi2
+	ldreqb	r2, [ip, #57]	@ zero_extendqisi2
+	str	r2, [r3, #2056]
+	ldrb	r0, [ip, #59]	@ zero_extendqisi2
+	cmp	r0, #0
+	addne	ip, r4, r5, asl #8
+	movne	r2, #0
+	beq	.L261
+.L260:
+	cmp	r2, r0
+	bcs	.L261
+	mov	r3, r2, asl #3
+	add	r2, r2, #1
+	mov	r3, r1, lsr r3
+	uxtb	r3, r3
+	str	r3, [ip, #4]
+	b	.L260
+.L261:
+	mov	r0, #80
+	bl	NandcDelayns
+	ldr	r0, [r4, r5, asl #8]
+	uxtb	r0, r0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L268:
+	.align	2
+.L267:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatusEN, .-FlashReadStatusEN
+	.align	2
+	.global	FlashWaitReadyEN
+	.type	FlashWaitReadyEN, %function
+FlashWaitReadyEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+.L273:
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, r6
+	bl	FlashReadStatusEN
+	cmp	r0, #255
+	beq	.L273
+	tst	r0, #64
+	beq	.L273
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
+	.align	2
+	.global	FlashWaitCmdDone
+	.type	FlashWaitCmdDone, %function
+FlashWaitCmdDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	ldr	r5, .L285
+	add	r4, r5, r0, asl #4
+	ldr	r3, [r4, #1664]
+	ldrb	r7, [r4, #1656]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L279
+	mov	r6, r0
+	mov	r0, r7
+	add	r5, r5, r6, asl #2
+	bl	NandcFlashCs
+	ldr	r1, [r4, #1660]
+	mov	r0, r7
+	ldr	r2, [r5, #1624]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r5, r0
+	mov	r0, r7
+	bl	NandcFlashDeCs
+	ldr	r2, [r4, #1664]
+	sbfx	r3, r5, #0, #1
+	str	r3, [r2]
+	mov	r2, #0
+	ldr	r1, [r4, #1668]
+	str	r2, [r4, #1664]
+	cmp	r1, r2
+	strne	r3, [r1]
+	strne	r2, [r4, #1668]
+.L279:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L286:
+	.align	2
+.L285:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
+	.align	2
+	.type	flash_read_ecc, %function
+flash_read_ecc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L289
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	r0, r2, r0, asl #3
+	ldrb	r4, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	mov	r0, #80
+	add	r4, r3, r4, asl #8
+	mov	r3, #122
+	str	r3, [r4, #2056]
+	bl	NandcDelayns
+	ldr	r3, [r4, #2048]
+	ldr	r0, [r4, #2048]
+	and	r3, r3, #15
+	and	r0, r0, #15
+	cmp	r0, r3
+	movcc	r0, r3
+	ldr	r3, [r4, #2048]
+	and	r3, r3, #15
+	cmp	r0, r3
+	movcc	r0, r3
+	ldr	r3, [r4, #2048]
+	and	r3, r3, #15
+	cmp	r0, r3
+	movcc	r0, r3
+	ldmfd	sp!, {r4, pc}
+.L290:
+	.align	2
+.L289:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_read_ecc, .-flash_read_ecc
+	.align	2
+	.global	NandcWaitFlashReadyNoDelay
+	.type	NandcWaitFlashReadyNoDelay, %function
+NandcWaitFlashReadyNoDelay:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L297
+	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #12
+	add	r0, r3, r0, asl #3
+	ldr	r4, .L297+4
+	ldr	r5, [r0, #12]
+.L293:
+	ldr	r3, [r5]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #512
+	bne	.L294
+	mov	r0, #10
+	bl	NandcDelayns
+	subs	r4, r4, #1
+	bne	.L293
+	mvn	r0, #0
+	b	.L292
+.L294:
+	mov	r0, #0
+.L292:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, pc}
+.L298:
+	.align	2
+.L297:
+	.word	.LANCHOR0
+	.word	100000
+	.fnend
+	.size	NandcWaitFlashReadyNoDelay, .-NandcWaitFlashReadyNoDelay
+	.align	2
+	.global	NandcWaitFlashReady
+	.type	NandcWaitFlashReady, %function
+NandcWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L305
+	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #12
+	add	r0, r3, r0, asl #3
+	ldr	r4, .L305+4
+	ldr	r5, [r0, #12]
+	mov	r0, #150
+	bl	NandcDelayns
+.L301:
+	ldr	r3, [r5]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #512
+	bne	.L302
+	mov	r0, #10
+	bl	NandcDelayns
+	subs	r4, r4, #1
+	bne	.L301
+	mvn	r0, #0
+	b	.L300
+.L302:
+	mov	r0, #0
+.L300:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, pc}
+.L306:
+	.align	2
+.L305:
+	.word	.LANCHOR0
+	.word	100000
+	.fnend
+	.size	NandcWaitFlashReady, .-NandcWaitFlashReady
+	.align	2
+	.global	FlashReset
+	.type	FlashReset, %function
+FlashReset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L309
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r3, r3, r0, asl #3
+	mov	r4, r0
+	ldrb	r6, [r3, #16]	@ zero_extendqisi2
+	ldr	r5, [r3, #12]
+	bl	NandcFlashCs
+	mov	r3, #255
+	mov	r0, r4
+	add	r5, r5, r6, asl #8
+	str	r3, [r5, #2056]
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	NandcFlashDeCs
+.L310:
+	.align	2
+.L309:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReset, .-FlashReset
+	.align	2
+	.global	flash_enter_slc_mode
+	.type	flash_enter_slc_mode, %function
+flash_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r4, .L314
+	ldrb	r3, [r4, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	mov	r5, r0
+	bl	NandcFlashCs
+	add	r3, r4, r5, asl #3
+	mov	r0, #100
+	ldr	r4, [r3, #12]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	add	r4, r4, r3, asl #8
+	mov	r3, #239
+	str	r3, [r4, #2056]
+	mov	r3, #145
+	str	r3, [r4, #2052]
+	bl	NandcDelayns
+	mov	r3, #0
+	mov	r2, #1
+	str	r3, [r4, #2048]
+	mov	r0, #100
+	str	r2, [r4, #2048]
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	bl	NandcDelayns
+	mov	r0, r5
+	bl	NandcWaitFlashReadyNoDelay
+	mov	r3, #218
+	mov	r0, r5
+	str	r3, [r4, #2056]
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	NandcWaitFlashReady
+.L315:
+	.align	2
+.L314:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
+	.align	2
+	.global	flash_exit_slc_mode
+	.type	flash_exit_slc_mode, %function
+flash_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r4, .L319
+	ldrb	r3, [r4, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	mov	r5, r0
+	bl	NandcFlashCs
+	add	r3, r4, r5, asl #3
+	mov	r0, #100
+	ldr	r4, [r3, #12]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	add	r4, r4, r3, asl #8
+	mov	r3, #239
+	str	r3, [r4, #2056]
+	mov	r3, #145
+	str	r3, [r4, #2052]
+	bl	NandcDelayns
+	mov	r3, #2
+	mov	r0, #100
+	str	r3, [r4, #2048]
+	mov	r3, #1
+	str	r3, [r4, #2048]
+	mov	r3, #0
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	bl	NandcDelayns
+	mov	r0, r5
+	bl	NandcWaitFlashReadyNoDelay
+	mov	r3, #223
+	mov	r0, r5
+	str	r3, [r4, #2056]
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	NandcWaitFlashReady
+.L320:
+	.align	2
+.L319:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
+	.align	2
+	.global	FlashEraseBlock
+	.type	FlashEraseBlock, %function
+FlashEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r2, r6
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashEraseBlock, .-FlashEraseBlock
+	.align	2
+	.global	FlashSetInterfaceMode
+	.type	FlashSetInterfaceMode, %function
+FlashSetInterfaceMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L346
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	lr, #0
+	ldrb	r2, [r3, #-3412]	@ zero_extendqisi2
+	mov	r4, #239
+	ldr	r7, .L346+4
+	mov	r5, #128
+	and	r3, r2, #1
+	and	r2, r2, #4
+	str	r3, [sp, #4]
+	mov	r6, #1
+	uxtb	r3, r2
+	mov	r8, #35
+	mov	r2, lr
+	mov	r9, #32
+	mov	r10, #5
+	str	r3, [sp]
+.L333:
+	ldr	r3, .L346+8
+	ldrb	ip, [lr, r7]	@ zero_extendqisi2
+	ldr	r1, [r3, lr]!
+	cmp	ip, #69
+	cmpne	ip, #152
+	ldrb	r3, [r3, #4]	@ zero_extendqisi2
+	beq	.L324
+	cmp	ip, #44
+	cmpne	ip, #173
+	bne	.L325
+.L324:
+	cmp	r0, #1
+	bne	.L326
+	ldr	fp, [sp, #4]
+	cmp	fp, #0
+	beq	.L325
+	mov	r3, r3, asl #8
+	cmp	ip, #173
+	add	fp, r1, r3
+	str	r4, [fp, #2056]
+	streq	r0, [fp, #2052]
+	beq	.L345
+	cmp	ip, #44
+	streq	r0, [fp, #2052]
+	strne	r5, [fp, #2052]
+	streq	r10, [fp, #2048]
+	strne	r0, [fp, #2048]
+	b	.L331
+.L326:
+	ldr	fp, [sp]
+	cmp	fp, #0
+	beq	.L325
+	mov	r3, r3, asl #8
+	cmp	ip, #173
+	add	fp, r1, r3
+	str	r4, [fp, #2056]
+	streq	r6, [fp, #2052]
+	streq	r9, [fp, #2048]
+	beq	.L331
+	cmp	ip, #44
+	streq	r6, [fp, #2052]
+	streq	r8, [fp, #2048]
+	beq	.L331
+	str	r5, [fp, #2052]
+.L345:
+	str	r2, [fp, #2048]
+.L331:
+	add	r3, r1, r3
+	str	r2, [r3, #2048]
+	str	r2, [r3, #2048]
+	str	r2, [r3, #2048]
+.L325:
+	add	lr, lr, #8
+	cmp	lr, #32
+	bne	.L333
+	mov	r0, #0
+	bl	NandcWaitFlashReady
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L347:
+	.align	2
+.L346:
+	.word	.LANCHOR2
+	.word	IDByte
+	.word	.LANCHOR0+12
+	.fnend
+	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
+	.align	2
+	.global	FlashReadSpare
+	.type	FlashReadSpare, %function
+FlashReadSpare:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L350
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	add	ip, ip, r0, asl #3
+	ldr	r3, .L350+4
+	mov	r5, r2
+	ldrb	r2, [ip, #16]	@ zero_extendqisi2
+	ldr	r4, [ip, #12]
+	ldrb	r3, [r3, #265]	@ zero_extendqisi2
+	add	r4, r4, r2, asl #8
+	mov	r2, #0
+	mov	r3, r3, asl #9
+	str	r2, [r4, #2056]
+	str	r3, [r4, #2052]
+	mov	r3, r3, lsr #8
+	str	r3, [r4, #2052]
+	uxtb	r3, r1
+	str	r3, [r4, #2052]
+	mov	r3, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r3, [r4, #2052]
+	mov	r3, #48
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, #2048]
+	strb	r3, [r5]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L351:
+	.align	2
+.L350:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.fnend
+	.size	FlashReadSpare, .-FlashReadSpare
+	.align	2
+	.global	SandiskProgTestBadBlock
+	.type	SandiskProgTestBadBlock, %function
+SandiskProgTestBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L354
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	r2, r2, r0, asl #3
+	ldrb	r4, [r2, #16]	@ zero_extendqisi2
+	ldr	r3, [r2, #12]
+	add	r4, r3, r4, asl #8
+	mov	r3, #162
+	str	r3, [r4, #2056]
+	mov	r3, #128
+	str	r3, [r4, #2056]
+	mov	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r1
+	str	r3, [r4, #2052]
+	mov	r3, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r3, [r4, #2052]
+	str	r1, [r4, #2052]
+	mov	r3, #16
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	mov	r3, #112
+	mov	r0, #80
+	str	r3, [r4, #2056]
+	bl	NandcDelayns
+	ldr	r0, [r4, #2048]
+	and	r0, r0, #1
+	ldmfd	sp!, {r4, pc}
+.L355:
+	.align	2
+.L354:
+	.word	.LANCHOR0
+	.fnend
+	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
+	.align	2
+	.global	SandiskSetRRPara
+	.type	SandiskSetRRPara, %function
+SandiskSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r3, #239
+	mov	r5, r0
+	str	r3, [r0, #8]
+	mov	r3, #17
+	str	r3, [r0, #4]
+	mov	r0, #200
+	mov	r4, r1
+	bl	NandcDelayns
+	ldr	r1, .L364
+	ldr	r0, .L364+4
+	add	r4, r4, r4, asl #2
+	ldr	ip, .L364+8
+	sub	lr, r1, #48
+	mov	r2, #0
+.L357:
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	cmp	r2, r3
+	bcs	.L363
+	ldrb	r3, [ip]	@ zero_extendqisi2
+	cmp	r3, #67
+	add	r3, r2, r4
+	addeq	r3, lr, r3
+	addne	r3, r1, r3
+	add	r2, r2, #1
+	ldrsb	r3, [r3, #5]
+	str	r3, [r5]
+	b	.L357
+.L363:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	NandcWaitFlashReady
+.L365:
+	.align	2
+.L364:
+	.word	.LANCHOR1+3056
+	.word	g_maxRegNum
+	.word	g_retryMode
+	.fnend
+	.size	SandiskSetRRPara, .-SandiskSetRRPara
+	.align	2
+	.global	micron_auto_read_calibration_config
+	.type	micron_auto_read_calibration_config, %function
+micron_auto_read_calibration_config:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	mov	r5, r1
+	bl	NandcWaitFlashReady
+	ldr	r3, .L368
+	mov	r0, #200
+	add	r2, r3, r4, asl #3
+	ldrb	r4, [r2, #16]	@ zero_extendqisi2
+	ldr	r3, [r2, #12]
+	add	r4, r3, r4, asl #8
+	mov	r3, #239
+	str	r3, [r4, #2056]
+	mov	r3, #150
+	str	r3, [r4, #2052]
+	bl	NandcDelayns
+	str	r5, [r4, #2048]
+	mov	r3, #0
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L369:
+	.align	2
+.L368:
+	.word	.LANCHOR0
+	.fnend
+	.size	micron_auto_read_calibration_config, .-micron_auto_read_calibration_config
+	.align	2
+	.global	FlashEraseSLc2KBlocks
+	.type	FlashEraseSLc2KBlocks, %function
+FlashEraseSLc2KBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r5, #0
+	ldr	r7, .L383
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r9, .L383+4
+	mov	r6, r0
+	mov	r10, r1
+	mov	r8, r5
+	ldr	r3, [r7]
+	str	r3, [sp, #20]
+.L371:
+	cmp	r8, r10
+	beq	.L382
+	rsb	r3, r8, r10
+	add	r2, sp, #12
+	add	r0, r6, r5
+	mov	r1, #0
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #16
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r9, #1612]	@ zero_extendqisi2
+	ldr	r3, [sp, #16]
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r6, r5]
+	bcs	.L373
+	add	r2, r9, r3
+	add	r3, r9, r3, asl #4
+	ldrb	r4, [r2, #1616]	@ zero_extendqisi2
+	strb	r4, [r3, #1656]
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r2, #0
+	mov	r0, r4
+	ldr	r1, [sp, #12]
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldr	r1, [sp, #12]
+	bl	FlashReadStatus
+	mov	r2, #0
+	ldr	r3, [sp, #12]
+	sbfx	r0, r0, #0, #1
+	str	r0, [r6, r5]
+	mov	r0, r4
+	ldr	r1, [r9, #4]
+	add	r1, r1, r3
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldr	r1, [sp, #12]
+	bl	FlashReadStatus
+	tst	r0, #1
+	mvnne	r3, #0
+	strne	r3, [r6, r5]
+	ldr	r3, [r6, r5]
+	cmn	r3, #1
+	bne	.L375
+	ldr	r0, .L383+8
+	ldr	r1, [sp, #12]
+	bl	printk
+.L375:
+	mov	r0, r4
+	bl	NandcFlashDeCs
+.L373:
+	add	r8, r8, #1
+	add	r5, r5, #36
+	b	.L371
+.L382:
+	ldr	r2, [sp, #20]
+	mov	r0, #0
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L377
+	bl	__stack_chk_fail
+.L377:
+	add	sp, sp, #24
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L384:
+	.align	2
+.L383:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC1
+	.fnend
+	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
+	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r0, #2
+	ldr	r7, .L494
+	mvn	r3, #83
+	mvn	r1, #82
+	mvn	r2, #81
+	.pad #44
+	sub	sp, sp, #44
+	mov	r4, r0
+	strb	r3, [r7, #3920]
+	mvn	r3, #80
+	strb	r0, [r7, #3916]
+	strb	r1, [r7, #3921]
+	strb	r2, [r7, #3922]
+	strb	r3, [r7, #3923]
+	bne	.L386
+	mvn	r3, #88
+	strb	r3, [r7, #3920]
+	ldr	r3, .L494+4
+	mvn	r2, #8
+	mov	r5, #7
+	strb	r2, [r3, #3241]
+	b	.L447
+.L386:
+	cmp	r0, #3
+	bne	.L388
+	mvn	r3, #79
+	strb	r3, [r7, #3920]
+	mvn	r3, #78
+	strb	r3, [r7, #3921]
+	mvn	r3, #77
+	strb	r3, [r7, #3922]
+	mvn	r3, #76
+	strb	r3, [r7, #3923]
+	mvn	r3, #75
+	strb	r3, [r7, #3924]
+	mvn	r3, #74
+	strb	r3, [r7, #3925]
+	mvn	r3, #73
+	strb	r3, [r7, #3926]
+	mvn	r3, #72
+	b	.L488
+.L388:
+	cmp	r0, #4
+	bne	.L389
+	mvn	r0, #51
+	strb	r1, [r7, #3925]
+	strb	r0, [r7, #3920]
+	mvn	r0, #64
+	strb	r2, [r7, #3926]
+	strb	r0, [r7, #3921]
+	mvn	r0, #85
+	strb	r0, [r7, #3922]
+	mvn	r0, #84
+	strb	r0, [r7, #3923]
+	mvn	r0, #50
+	strb	r0, [r7, #3924]
+.L488:
+	mov	r5, #8
+	strb	r3, [r7, #3927]
+	mov	r6, r5
+	b	.L387
+.L389:
+	cmp	r0, #5
+	bne	.L390
+	mov	r3, #56
+	mov	r5, #8
+	strb	r3, [r7, #3920]
+	mov	r3, #57
+	strb	r3, [r7, #3921]
+	mov	r3, #58
+	strb	r3, [r7, #3922]
+	mov	r3, #59
+	strb	r3, [r7, #3923]
+	b	.L447
+.L390:
+	cmp	r0, #6
+	bne	.L391
+	mov	r3, #14
+	mov	r5, #12
+	strb	r3, [r7, #3920]
+	mov	r3, #15
+	strb	r3, [r7, #3921]
+	mov	r3, #16
+	strb	r3, [r7, #3922]
+	mov	r3, #17
+	strb	r3, [r7, #3923]
+	b	.L447
+.L391:
+	cmp	r0, #7
+	bne	.L392
+	mvn	r3, #79
+	mov	r5, #12
+	strb	r3, [r7, #3920]
+	mov	r6, #10
+	mvn	r3, #78
+	strb	r3, [r7, #3921]
+	mvn	r3, #77
+	strb	r3, [r7, #3922]
+	mvn	r3, #76
+	strb	r3, [r7, #3923]
+	mvn	r3, #75
+	strb	r3, [r7, #3924]
+	mvn	r3, #74
+	strb	r3, [r7, #3925]
+	mvn	r3, #73
+	strb	r3, [r7, #3926]
+	mvn	r3, #72
+	strb	r3, [r7, #3927]
+	mvn	r3, #43
+	strb	r3, [r7, #3928]
+	mvn	r3, #42
+	strb	r3, [r7, #3929]
+	b	.L387
+.L392:
+	cmp	r0, #8
+	mov	r5, #7
+	bne	.L447
+	mov	r3, #6
+	strb	r5, [r7, #3921]
+	strb	r3, [r7, #3920]
+	mov	r5, #50
+	mov	r3, #9
+	strb	r0, [r7, #3922]
+	strb	r3, [r7, #3923]
+	mov	r6, #5
+	mov	r3, #10
+	strb	r3, [r7, #3924]
+	b	.L387
+.L447:
+	mov	r6, #4
+.L387:
+	sub	r3, r4, #1
+	cmp	r3, #1
+	bhi	.L484
+	ldr	r10, .L494+8
+	mov	r9, #0
+.L393:
+	ldrb	r1, [r7, #1612]	@ zero_extendqisi2
+	uxtb	r2, r9
+	ldr	r3, .L494
+	cmp	r1, r2
+	bls	.L400
+	add	r2, r3, r2
+	ldr	r4, .L494+12
+	ldr	r1, .L494+16
+	mov	ip, #55
+	ldrb	r2, [r2, #1616]	@ zero_extendqisi2
+	add	r3, r3, r2, asl #3
+	add	r4, r4, r2, asl #6
+	add	r4, r4, #20
+	ldrb	r8, [r3, #16]	@ zero_extendqisi2
+	ldr	r0, [r3, #12]
+	mov	fp, r4
+	mov	r2, r4
+	add	r8, r0, r8, asl #8
+.L395:
+	str	ip, [r8, #2056]
+	mov	r0, #80
+	ldrb	r3, [r1, #1]!	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	str	ip, [sp, #8]
+	str	r3, [r8, #2052]
+	str	r1, [sp, #4]
+	str	r1, [sp, #16]
+	bl	NandcDelayns
+	ldr	r3, [r8, #2048]
+	ldr	r2, [sp, #12]
+	ldmib	sp, {r1, ip}
+	strb	r3, [r2], #1
+	rsb	r3, r4, r2
+	uxtb	r3, r3
+	cmp	r3, r6
+	bcc	.L395
+	mov	r2, #0
+.L396:
+	add	r0, r10, r2
+	mov	r3, #1
+.L397:
+	ldrb	r1, [r0, r3, asl #2]	@ zero_extendqisi2
+	ldrb	ip, [fp]	@ zero_extendqisi2
+	add	r1, r1, ip
+	strb	r1, [fp, r3, asl #3]
+	add	r3, r3, #1
+	cmp	r3, #7
+	bne	.L397
+	add	r2, r2, #1
+	add	fp, fp, #1
+	cmp	r2, #4
+	bne	.L396
+	mov	r3, #0
+	add	r9, r9, #1
+	strb	r3, [r4, #16]
+	strb	r3, [r4, #24]
+	strb	r3, [r4, #32]
+	strb	r3, [r4, #40]
+	strb	r3, [r4, #48]
+	strb	r3, [r4, #41]
+	strb	r3, [r4, #49]
+	b	.L393
+.L484:
+	sub	r3, r4, #3
+	cmp	r3, #5
+	bhi	.L400
+	smulbb	r2, r6, r5
+	mov	r3, r2, asl #4
+	mov	r2, r2, asr #1
+	str	r3, [sp, #36]
+	mov	r3, r2, asl #1
+	str	r3, [sp, #8]
+	mov	r3, #0
+.L492:
+	str	r3, [sp, #16]
+	ldrb	r3, [sp, #16]	@ zero_extendqisi2
+	str	r3, [sp, #12]
+	ldr	r3, .L494
+	ldr	r2, [sp, #12]
+	ldrb	r3, [r3, #1612]	@ zero_extendqisi2
+	cmp	r3, r2
+	bhi	.L445
+.L400:
+	ldr	r3, .L494
+	strb	r6, [r3, #3917]
+	strb	r5, [r3, #3918]
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L445:
+	ldr	r2, [sp, #12]
+	ldr	r3, .L494
+	add	r3, r3, r2
+	ldrb	r10, [r3, #1616]	@ zero_extendqisi2
+	ldr	r3, .L494
+	add	r3, r3, r10, asl #3
+	mov	r0, r10
+	ldrb	fp, [r3, #16]	@ zero_extendqisi2
+	ldr	r8, [r3, #12]
+	mov	r3, #255
+	mov	r9, fp, asl #8
+	add	r7, r8, r9
+	str	r3, [r7, #2056]
+	bl	NandcWaitFlashReady
+	cmp	r4, #7
+	ldreq	r3, .L494+12
+	moveq	r7, #160
+	mlaeq	r7, r7, r10, r3
+	addeq	r3, r7, #28
+	beq	.L489
+.L402:
+	cmp	r4, #8
+	beq	.L404
+	ldr	r3, .L494+12
+	add	r7, r3, r10, asl #6
+	add	r3, r7, #20
+.L489:
+	str	r3, [sp, #20]
+	cmp	r4, #4
+	add	r3, r8, fp, asl #8
+	mov	r2, #54
+	str	r2, [r3, #2056]
+	bne	.L405
+	add	r9, r8, r9
+	mov	r3, #255
+	str	r3, [r9, #2052]
+	mov	r3, #64
+	str	r3, [r9, #2048]
+	mov	r3, #204
+	b	.L490
+.L405:
+	sub	r2, r4, #5
+	cmp	r2, #1
+	bhi	.L407
+	ldr	r2, .L494
+	ldrb	r2, [r2, #3920]	@ zero_extendqisi2
+	str	r2, [r3, #2052]
+	mov	r2, #82
+	str	r2, [r3, #2048]
+	b	.L406
+.L407:
+	cmp	r4, #7
+	bne	.L406
+	add	r9, r8, r9
+	mov	r3, #174
+	str	r3, [r9, #2052]
+	mov	r3, #0
+	str	r3, [r9, #2048]
+	mov	r3, #176
+.L490:
+	str	r3, [r9, #2052]
+	mov	r3, #77
+	str	r3, [r9, #2048]
+.L406:
+	add	r3, r8, fp, asl #8
+	cmp	r4, #6
+	mov	r2, #22
+	str	r2, [r3, #2056]
+	mov	r2, #23
+	str	r2, [r3, #2056]
+	mov	r2, #4
+	str	r2, [r3, #2056]
+	mov	r2, #25
+	str	r2, [r3, #2056]
+	mov	r2, #0
+	str	r2, [r3, #2056]
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	moveq	r2, #31
+	str	r2, [r3, #2052]
+	mov	r2, #2
+	str	r2, [r3, #2052]
+	mov	r2, #0
+	str	r2, [r3, #2052]
+.L446:
+	add	r3, r8, fp, asl #8
+	mov	r2, #48
+	mov	r0, r10
+	str	r2, [r3, #2056]
+	bl	NandcWaitFlashReady
+	sub	r3, r4, #5
+	cmp	r3, #1
+	movhi	r3, #0
+	movls	r3, #1
+	str	r3, [sp, #24]
+	sub	r3, r4, #8
+	clz	r3, r3
+	mov	r3, r3, lsr #5
+	str	r3, [sp, #4]
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #24]
+	orrs	r3, r3, r2
+	movne	ip, #16
+	bne	.L410
+	cmp	r4, #7
+	movne	ip, #2
+	moveq	ip, #32
+.L410:
+	ldr	r3, .L494+20
+	add	r0, r8, fp, asl #8
+	ldr	r3, [r3, #-3408]
+	mov	r1, r3
+.L411:
+	ldr	r2, [r0, #2048]
+	strb	r2, [r1], #1
+	rsb	r2, r3, r1
+	uxtb	r2, r2
+	cmp	r2, ip
+	bcc	.L411
+	ldr	r2, [sp, #4]
+	cmp	r2, #0
+	beq	.L412
+	mov	r2, #0
+.L414:
+	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
+	uxtb	r1, r2
+	cmp	ip, #50
+	beq	.L413
+	add	ip, r3, r2, asl #2
+	ldrb	ip, [ip, #1]	@ zero_extendqisi2
+	cmp	ip, #5
+	beq	.L413
+	add	r2, r2, #1
+	cmp	r2, #8
+	bne	.L414
+	b	.L415
+.L413:
+	cmp	r1, #6
+	bls	.L416
+.L415:
+	ldr	r0, .L494+24
+	mov	r1, #0
+	bl	printk
+.L417:
+	b	.L417
+.L412:
+	cmp	r4, #7
+	bne	.L418
+	ldr	r2, [sp, #4]
+.L420:
+	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
+	uxtb	r1, r2
+	cmp	ip, #12
+	beq	.L419
+	add	ip, r3, r2, asl #2
+	ldrb	ip, [ip, #1]	@ zero_extendqisi2
+	cmp	ip, #10
+	beq	.L419
+	add	r2, r2, #1
+	cmp	r2, #8
+	bne	.L420
+	b	.L421
+.L419:
+	cmp	r1, #7
+	bne	.L416
+.L421:
+	ldr	r0, .L494+24
+	mov	r1, #0
+	bl	printk
+.L422:
+	b	.L422
+.L418:
+	cmp	r4, #6
+	bne	.L416
+	sub	r2, r3, #1
+	add	r3, r3, #7
+.L423:
+	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
+	cmp	r1, #12
+	beq	.L416
+	ldrb	r1, [r2, #8]	@ zero_extendqisi2
+	cmp	r1, #4
+	beq	.L416
+	cmp	r2, r3
+	bne	.L423
+	ldr	r0, .L494+24
+	mov	r1, #0
+	bl	printk
+.L425:
+	b	.L425
+.L416:
+	ldr	r1, .L494+20
+	ldr	ip, [sp, #36]
+	ldr	r2, [r1, #-3408]
+	add	ip, r2, ip
+	mov	r3, r2
+.L426:
+	cmp	r3, ip
+	ldrne	lr, [r0, #2048]
+	strneb	lr, [r3], #1
+	bne	.L426
+.L493:
+	ldr	r3, [r1, #-3408]
+	mov	r0, #8
+	ldr	r1, [sp, #8]
+	add	r1, r3, r1
+	str	r1, [sp, #28]
+.L429:
+	ldr	ip, [sp, #8]
+	add	lr, r1, ip
+.L428:
+	ldrh	ip, [r1]
+	mvn	ip, ip
+	strh	ip, [r1], #2	@ movhi
+	cmp	r1, lr
+	bne	.L428
+	ldr	ip, [sp, #8]
+	subs	r0, r0, #1
+	add	r1, r1, ip
+	bne	.L429
+.L430:
+	mov	ip, #0
+	mov	r0, ip
+.L433:
+	mov	r1, #1
+	mov	lr, #0
+	mov	r1, r1, asl r0
+	mov	r7, #16
+	str	r7, [sp, #32]
+	mov	r7, lr
+.L431:
+	ldrh	r9, [r3, lr]
+	and	r9, r9, r1
+	cmp	r9, r1
+	addeq	r7, r7, #1
+	ldr	r9, [sp, #8]
+	add	lr, lr, r9
+	ldr	r9, [sp, #32]
+	subs	r9, r9, #1
+	str	r9, [sp, #32]
+	bne	.L431
+	cmp	r7, #8
+	add	r0, r0, #1
+	orrhi	ip, ip, r1
+	uxthhi	ip, ip
+	cmp	r0, #16
+	bne	.L433
+	ldr	r1, [sp, #28]
+	strh	ip, [r3], #2	@ movhi
+	cmp	r3, r1
+	bne	.L430
+	ldr	r3, .L494+20
+	ldr	r1, [r3, #-3408]
+	mov	r3, #0
+	sub	r0, r1, #4
+	add	ip, r1, #28
+.L435:
+	ldr	lr, [r0, #4]!
+	cmp	lr, #0
+	addeq	r3, r3, #1
+	cmp	r0, ip
+	bne	.L435
+	cmp	r3, #7
+	ble	.L436
+	ldr	r0, .L494+28
+	mov	r2, #1
+	mov	r3, #1024
+	bl	rknand_print_hex
+	ldr	r0, .L494+24
+	mov	r1, #0
+	bl	printk
+.L437:
+	b	.L437
+.L436:
+	cmp	r4, #6
+	moveq	r0, #4
+	beq	.L438
+	cmp	r4, #7
+	moveq	r0, #10
+	beq	.L438
+	ldr	r3, [sp, #4]
+	cmp	r3, #0
+	moveq	r0, #8
+	movne	r0, #5
+.L438:
+	sub	r9, r6, #1
+	ldr	r1, [sp, #20]
+	mov	ip, #0
+	uxtb	r9, r9
+	add	r9, r9, #1
+.L439:
+	mov	r7, r1
+	mov	r3, r2
+.L440:
+	ldrb	lr, [r3], #1	@ zero_extendqisi2
+	strb	lr, [r7], #1
+	rsb	lr, r2, r3
+	uxtb	lr, lr
+	cmp	lr, r6
+	bcc	.L440
+	add	ip, ip, #1
+	add	r2, r2, r9
+	cmp	ip, r5
+	add	r1, r1, r0
+	blt	.L439
+	add	r7, r8, fp, asl #8
+	mov	r3, #255
+	mov	r0, r10
+	str	r3, [r7, #2056]
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp, #24]
+	cmp	r3, #0
+	beq	.L442
+	mov	r3, #54
+	str	r3, [r7, #2056]
+	ldr	r3, .L494
+	mvn	r1, #0
+	ldr	r0, [sp, #12]
+	ldrb	r3, [r3, #3920]	@ zero_extendqisi2
+	str	r3, [r7, #2052]
+	mov	r3, #0
+	str	r3, [r7, #2048]
+	mov	r3, #22
+	str	r3, [r7, #2056]
+	bl	FlashReadCmd
+	b	.L443
+.L442:
+	ldr	r3, [sp, #4]
+	cmp	r3, #0
+	movne	r3, #190
+	moveq	r3, #56
+	str	r3, [r7, #2056]
+.L443:
+	mov	r0, r10
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp, #16]
+	add	r3, r3, #1
+	b	.L492
+.L404:
+	mov	r3, #120
+	mov	r2, #23
+	str	r3, [r7, #2056]
+	mov	r1, #25
+	mov	r3, #0
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r2, [r7, #2056]
+	mov	r2, #4
+	str	r2, [r7, #2056]
+	str	r1, [r7, #2056]
+	mov	r1, #218
+	str	r1, [r7, #2056]
+	mov	r1, #21
+	str	r3, [r7, #2056]
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r1, [r7, #2052]
+	str	r2, [r7, #2052]
+	str	r3, [r7, #2052]
+	ldr	r3, .L494+32
+	str	r3, [sp, #20]
+	b	.L446
+.L495:
+	.align	2
+.L494:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+3224
+	.word	.LANCHOR0+3916
+	.word	.LANCHOR0+3919
+	.word	.LANCHOR2
+	.word	.LC2
+	.word	.LC3
+	.word	.LANCHOR0+3944
+	.fnend
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	2
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	subs	r3, r0, #0
+	bxeq	lr
+	sub	r2, r3, #1
+	cmp	r2, #7
+	bhi	.L498
+	b	HynixGetReadRetryDefault
+.L498:
+	cmp	r3, #49
+	bne	.L499
+	ldr	r0, .L510
+	mov	r2, #64
+	ldr	r1, .L510+4
+	add	r0, r0, #3920
+	strb	r3, [r0, #-4]
+	mov	r3, #4
+	strb	r3, [r0, #-3]
+	mov	r3, #15
+	strb	r3, [r0, #-2]
+	b	.L508
+.L499:
+	sub	r2, r3, #65
+	cmp	r3, #33
+	cmpne	r2, #1
+	ldrls	r0, .L510
+	strlsb	r3, [r0, #3916]
+	movls	r3, #4
+	bls	.L509
+.L500:
+	cmp	r3, #34
+	cmpne	r3, #67
+	bne	.L501
+	ldr	r0, .L510
+	strb	r3, [r0, #3916]
+	mov	r3, #5
+.L509:
+	strb	r3, [r0, #3917]
+	mov	r2, #45
+	mov	r3, #7
+	add	r0, r0, #3920
+	strb	r3, [r0, #-2]
+	ldr	r1, .L510+8
+	b	.L508
+.L501:
+	cmp	r3, #35
+	cmpne	r3, #68
+	bxne	lr
+	ldr	r0, .L510
+	mov	r2, #95
+	ldr	r1, .L510+12
+	add	r0, r0, #3920
+	strb	r3, [r0, #-4]
+	mov	r3, #5
+	strb	r3, [r0, #-3]
+	mov	r3, #17
+	strb	r3, [r0, #-2]
+.L508:
+	b	ftl_memcpy
+.L511:
+	.align	2
+.L510:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+3160
+	.word	.LANCHOR1+3008
+	.word	.LANCHOR1+3056
+	.fnend
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
+	.global	FlashReadDpCmd
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, r1
+	ldr	r3, .L517
+	mov	r7, r0
+	uxtb	lr, r6
+	mov	ip, r6, lsr #8
+	add	r1, r3, r0, asl #3
+	uxtb	r9, r2
+	ldrb	r10, [r3, #52]	@ zero_extendqisi2
+	mov	r8, r2, lsr #8
+	ldrb	r4, [r1, #16]	@ zero_extendqisi2
+	mov	r5, r2, lsr #16
+	ldr	fp, [r1, #12]
+	ldrb	r1, [r3, #60]	@ zero_extendqisi2
+	mov	r4, r4, asl #8
+	ldrb	r3, [r3, #53]	@ zero_extendqisi2
+	cmp	r1, #1
+	add	r4, fp, r4
+	mov	r1, r6, lsr #16
+	str	r10, [r4, #2056]
+	bne	.L513
+	mov	r10, #0
+	str	r10, [r4, #2052]
+	str	r10, [r4, #2052]
+	str	lr, [r4, #2052]
+	str	ip, [r4, #2052]
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	str	r10, [r4, #2056]
+	str	r10, [r4, #2052]
+	str	r10, [r4, #2052]
+	b	.L516
+.L513:
+	str	lr, [r4, #2052]
+	str	ip, [r4, #2052]
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+.L516:
+	str	r9, [r4, #2052]
+	mov	r3, #48
+	str	r8, [r4, #2052]
+	mov	r0, r7
+	str	r5, [r4, #2052]
+	mov	r1, r6
+	str	r3, [r4, #2056]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	FlashSetRandomizer
+.L518:
+	.align	2
+.L517:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpCmd, .-FlashReadDpCmd
+	.align	2
+	.global	ftl_flash_de_init
+	.type	ftl_flash_de_init, %function
+ftl_flash_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #0
+	bl	NandcWaitFlashReady
+	bl	FlashSetReadRetryDefault
+	ldr	r3, .L530
+	ldr	r0, [r3, #-3404]
+	mov	r4, r3
+	cmp	r0, #0
+	beq	.L520
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	b	.L521
+.L520:
+	bl	flash_exit_slc_mode
+.L521:
+	ldrb	r3, [r4, #-3400]	@ zero_extendqisi2
+	ldr	r5, .L530
+	cmp	r3, #0
+	beq	.L522
+	ldrb	r3, [r5, #-3412]	@ zero_extendqisi2
+	tst	r3, #1
+	beq	.L522
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	mov	r3, #0
+	strb	r3, [r5, #-3400]
+.L522:
+	ldr	r3, .L530+4
+	mov	r0, #0
+	ldr	r3, [r3, #12]
+	str	r0, [r3, #336]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L531:
+	.align	2
+.L530:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_flash_de_init, .-ftl_flash_de_init
+	.align	2
+	.global	NandcRandmzSel
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L533
+	add	r0, r3, r0, asl #3
+	ldr	r3, [r0, #12]
+	str	r1, [r3, #336]
+	bx	lr
+.L534:
+	.align	2
+.L533:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.global	__aeabi_idiv
+	.align	2
+	.global	NandcTimeCfg
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r0, #0
+	bl	rknand_get_clk_rate
+	ldr	r1, .L546
+	bl	__aeabi_idiv
+	ldr	r3, .L546+4
+	ldr	r3, [r3, #3840]
+	cmp	r0, #250
+	movwgt	r2, #8354
+	bgt	.L544
+	cmp	r0, #220
+	bgt	.L545
+	cmp	r0, #185
+	movwgt	r2, #4226
+	bgt	.L544
+	cmp	r0, #160
+	movwgt	r2, #4194
+	bgt	.L544
+	cmp	r4, #35
+	movwls	r2, #4193
+	bls	.L544
+	cmp	r4, #99
+	movwls	r2, #4225
+	bls	.L544
+.L545:
+	movw	r2, #8322
+.L544:
+	str	r2, [r3, #4]
+	ldmfd	sp!, {r4, pc}
+.L547:
+	.align	2
+.L546:
+	.word	1000000
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcTimeCfg, .-NandcTimeCfg
+	.align	2
+	.global	FlashTimingCfg
+	.type	FlashTimingCfg, %function
+FlashTimingCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	sub	r3, r0, #4160
+	sub	r3, r3, #33
+	bic	r3, r3, #32
+	cmp	r3, #1
+	bls	.L549
+	movw	r3, #8322
+	cmp	r0, r3
+	bne	.L550
+.L549:
+	ldr	r3, .L551
+	ldr	r3, [r3, #3840]
+	str	r0, [r3, #4]
+.L550:
+	ldr	r3, .L551+4
+	ldrb	r0, [r3, #277]	@ zero_extendqisi2
+	b	NandcTimeCfg
+.L552:
+	.align	2
+.L551:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.fnend
+	.size	FlashTimingCfg, .-FlashTimingCfg
+	.align	2
+	.global	NandcInit
+	.type	NandcInit, %function
+NandcInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L556
+	mov	r1, #0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r2, #1
+	str	r1, [r3, #16]
+	mov	r4, r3
+	str	r0, [r3, #12]
+	mov	r6, #0
+	str	r2, [r3, #24]
+	mov	r2, #2
+	str	r0, [r3, #20]
+	str	r2, [r3, #32]
+	mov	r2, #3
+	str	r0, [r3, #28]
+	str	r0, [r3, #36]
+	str	r0, [r3, #3840]
+	str	r2, [r3, #40]
+	ldr	r2, [r0]
+	ldr	r5, .L556+4
+	and	r2, r2, #253952
+	ubfx	ip, r2, #13, #1
+	bfi	r2, r1, #13, #1
+	ldr	r1, [r0, #352]
+	orr	r2, r2, #256
+	str	ip, [r5, #-3396]
+	movw	ip, #2049
+	ubfx	r1, r1, #16, #4
+	str	r1, [r5, #-3392]
+	ldr	r1, [r0, #352]
+	cmp	r1, ip
+	str	r1, [r5, #-3388]
+	moveq	r3, #8
+	streq	r3, [r5, #-3392]
+	str	r2, [r0]
+	mov	r0, #40
+	ldr	r3, [r4, #3840]
+	str	r6, [r3, #336]
+	bl	NandcTimeCfg
+	ldr	r3, [r4, #3840]
+	movw	r2, #8322
+	mov	r0, #36864
+	str	r2, [r3, #344]
+	ldr	r2, .L556+8
+	str	r2, [r3, #304]
+	bl	ftl_malloc
+	str	r6, [r5, #-3356]
+	str	r6, [r5, #-3348]
+	str	r0, [r5, #-3384]
+	str	r0, [r5, #-3380]
+	add	r0, r0, #32768
+	str	r0, [r5, #-3376]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L557:
+	.align	2
+.L556:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	1579009
+	.fnend
+	.size	NandcInit, .-NandcInit
+	.align	2
+	.global	NandcGetTimeCfg
+	.type	NandcGetTimeCfg, %function
+NandcGetTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L560
+	str	lr, [sp, #-4]!
+	.save {lr}
+	ldr	lr, [ip, #3840]
+	ldr	lr, [lr, #4]
+	str	lr, [r0]
+	ldr	r0, [ip, #3840]
+	ldr	r0, [r0]
+	str	r0, [r1]
+	ldr	r1, [ip, #3840]
+	ldr	r1, [r1, #304]
+	str	r1, [r2]
+	ldr	r1, [ip, #3840]
+	ldr	r2, [r1, #308]
+	ldr	r1, [r1, #344]
+	uxtb	r2, r2
+	orr	r2, r2, r1, asl #16
+	str	r2, [r3]
+	ldr	pc, [sp], #4
+.L561:
+	.align	2
+.L560:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
+	.align	2
+	.global	NandcBchSel
+	.type	NandcBchSel, %function
+NandcBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L570
+	mov	r1, #16
+	cmp	r0, r1
+	ldr	r2, [r3, #3840]
+	mov	r3, #1
+	str	r3, [r2, #8]
+	ldr	r3, .L570+4
+	str	r0, [r3, #-3344]
+	mov	r3, #0
+	bfi	r3, r1, #8, #8
+	bfc	r3, #18, #1
+	bne	.L563
+.L566:
+	bfc	r3, #4, #1
+	b	.L564
+.L563:
+	cmp	r0, #24
+	orreq	r3, r3, #16
+	beq	.L564
+	cmp	r0, #40
+	orr	r3, r3, #262144
+	orr	r3, r3, #16
+	beq	.L566
+.L564:
+	orr	r3, r3, #1
+	str	r3, [r2, #12]
+	bx	lr
+.L571:
+	.align	2
+.L570:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	NandcBchSel, .-NandcBchSel
+	.align	2
+	.global	FlashBchSel
+	.type	FlashBchSel, %function
+FlashBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L573
+	strb	r0, [r3, #3905]
+	b	NandcBchSel
+.L574:
+	.align	2
+.L573:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashBchSel, .-FlashBchSel
+	.align	2
+	.global	ftl_flash_resume
+	.type	ftl_flash_resume, %function
+ftl_flash_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L584
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r2, [r3, #3840]
+	mov	r4, r3
+	ldr	r1, [r3, #3844]
+	ldr	r6, .L584+4
+	str	r1, [r2]
+	ldr	r1, [r3, #3848]
+	ldr	r2, [r3, #3840]
+	str	r1, [r2, #4]
+	ldr	r1, [r3, #3852]
+	str	r1, [r2, #8]
+	ldr	r1, [r3, #3856]
+	str	r1, [r2, #12]
+	ldr	r1, [r3, #3860]
+	str	r1, [r2, #304]
+	ldr	r1, [r3, #3864]
+	str	r1, [r2, #308]
+	ldr	r1, [r3, #3868]
+	str	r1, [r2, #336]
+	ldr	r1, [r3, #3872]
+	str	r1, [r2, #344]
+.L577:
+	ldrb	r3, [r6, r5, asl #3]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L576
+	uxtb	r0, r5
+	bl	FlashReset
+.L576:
+	add	r5, r5, #1
+	cmp	r5, #4
+	bne	.L577
+	ldr	r5, .L584+8
+	ldrb	r3, [r5, #-3400]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L578
+	mov	r0, #1
+	bl	NandcSetMode
+	ldrb	r0, [r5, #-3412]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r5, #-3412]	@ zero_extendqisi2
+	bl	NandcSetMode
+	ldrb	r0, [r4, #3861]	@ zero_extendqisi2
+	bl	NandcSetDdrPara
+.L578:
+	ldr	r3, [r4, #1784]
+	ldmfd	sp!, {r4, r5, r6, lr}
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	b	FlashBchSel
+.L585:
+	.align	2
+.L584:
+	.word	.LANCHOR0
+	.word	IDByte
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_flash_resume, .-ftl_flash_resume
+	.align	2
+	.global	ftl_nandc_get_irq_status
+	.type	ftl_nandc_get_irq_status, %function
+ftl_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0, #372]
+	bx	lr
+	.fnend
+	.size	ftl_nandc_get_irq_status, .-ftl_nandc_get_irq_status
+	.align	2
+	.global	NandcIqrWaitFlashReady
+	.type	NandcIqrWaitFlashReady, %function
+NandcIqrWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	bl	rk_nandc_rb_irq_flag_init
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	orr	r3, r3, #2
+	str	r3, [r4, #364]
+	ldr	r3, [r4]
+	tst	r3, #512
+	bne	.L588
+	mov	r0, r4
+	ldmfd	sp!, {r4, lr}
+	b	wait_for_nand_flash_ready
+.L588:
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	bic	r3, r3, #2
+	str	r3, [r4, #364]
+	ldmfd	sp!, {r4, pc}
+	.fnend
+	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
+	.align	2
+	.global	FlashEraseBlocks
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r2
+	ldr	r4, .L627
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r3, .L627+4
+	mov	r9, r0
+	mov	r10, r1
+	ldrb	r5, [r4]	@ zero_extendqisi2
+	ldr	r2, [r3]
+	cmp	r5, #0
+	str	r3, [sp, #12]
+	str	r2, [sp, #28]
+	beq	.L591
+	mov	r1, r8
+	bl	FlashEraseSLc2KBlocks
+	b	.L592
+.L600:
+	mov	r3, #36
+	mov	r1, #0
+	mul	fp, r3, r5
+	rsb	r3, r5, r8
+	add	r2, sp, #20
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r6, r9, fp
+	add	r3, sp, #24
+	mov	r0, r6
+	bl	LogAddr2PhyAddr
+	ldrb	r3, [r4, #1612]	@ zero_extendqisi2
+	mov	r7, r0
+	ldr	r0, [sp, #24]
+	cmp	r0, r3
+	mvncs	r3, #0
+	strcs	r3, [r9, fp]
+	bcc	.L624
+.L594:
+	add	r5, r5, #1
+.L591:
+	cmp	r5, r8
+	bcc	.L600
+	b	.L625
+.L624:
+	ldr	r3, .L627+8
+	ldrb	r3, [r3, #-3340]	@ zero_extendqisi2
+	cmp	r3, #0
+	add	r3, r4, r0, asl #4
+	ldr	r3, [r3, #1664]
+	moveq	r7, #0
+	cmp	r3, #0
+	beq	.L596
+	uxtb	r0, r0
+	bl	FlashWaitCmdDone
+.L596:
+	ldr	r2, [sp, #24]
+	mov	r0, #0
+	cmp	r7, #0
+	addne	ip, fp, #36
+	mov	r3, r2, asl #4
+	add	r2, r4, r2
+	add	r1, r4, r3
+	add	r3, r4, r3
+	addne	ip, r9, ip
+	str	r0, [r1, #1668]
+	str	r6, [r1, #1664]
+	ldr	r0, [sp, #20]
+	ldrb	r6, [r2, #1616]	@ zero_extendqisi2
+	strne	ip, [r1, #1668]
+	str	r0, [r1, #1660]
+	strb	r6, [r3, #1656]
+	mov	r0, r6
+	bl	NandcFlashCs
+	cmp	r10, #1
+	mov	r0, r6
+	bne	.L598
+	ldr	r3, .L627
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L598
+	bl	flash_enter_slc_mode
+	b	.L599
+.L598:
+	bl	flash_exit_slc_mode
+.L599:
+	ldr	r3, [sp, #24]
+	mov	r0, r6
+	ldr	r1, [sp, #20]
+	add	r5, r5, r7
+	add	r3, r4, r3, asl #2
+	ldr	r2, [r3, #1624]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r6
+	mov	r2, r7
+	ldr	r1, [sp, #20]
+	bl	FlashEraseCmd
+	mov	r0, r6
+	bl	NandcFlashDeCs
+	b	.L594
+.L625:
+	ldr	r0, [r4, #3840]
+	mov	r5, #0
+	bl	NandcIqrWaitFlashReady
+	ldr	r6, .L627
+	ldr	r7, .L627+12
+.L601:
+	ldrb	r3, [r4, #1612]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcs	.L626
+	uxtb	r0, r5
+	bl	FlashWaitCmdDone
+	cmp	r10, #1
+	bne	.L602
+	ldrb	r3, [r6, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L602
+	ldrb	r0, [r7, r5, asl #4]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L602:
+	add	r5, r5, #1
+	b	.L601
+.L626:
+	ldr	r3, .L627+8
+	ldr	r3, [r3, #-3336]
+	cmp	r3, #0
+	bne	.L604
+.L606:
+	mov	r0, #0
+	b	.L592
+.L604:
+	ldr	r3, .L627+16
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #69
+	bne	.L606
+	mov	r3, #0
+	mov	r2, #36
+	mov	r1, r3
+.L605:
+	cmp	r3, r8
+	beq	.L606
+	mul	r0, r2, r3
+	add	r3, r3, #1
+	str	r1, [r9, r0]
+	b	.L605
+.L592:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #28]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L608
+	bl	__stack_chk_fail
+.L608:
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L628:
+	.align	2
+.L627:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR0+1656
+	.word	IDByte
+	.fnend
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.align	2
+	.global	NandcSendDumpDataStart
+	.type	NandcSendDumpDataStart, %function
+NandcSendDumpDataStart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, [r0, #16]
+	.pad #8
+	sub	sp, sp, #8
+	ldr	r3, .L631
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #4
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	str	r2, [r0, #16]
+	str	r3, [r0, #8]
+	orr	r3, r3, #4
+	str	r3, [r0, #8]
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+.L632:
+	.align	2
+.L631:
+	.word	538969130
+	.fnend
+	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
+	.align	2
+	.global	NandcSendDumpDataDone
+	.type	NandcSendDumpDataDone, %function
+NandcSendDumpDataDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+.L634:
+	ldr	r3, [r0, #8]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #1048576
+	beq	.L634
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+	.fnend
+	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
+	.align	2
+	.global	NandcXferStart
+	.type	NandcXferStart, %function
+NandcXferStart:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, #0
+	ldr	lr, .L656
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L656+4
+	add	r0, lr, r0, asl #3
+	mov	lr, #16
+	ldr	r8, [sp, #64]
+	ldr	r6, [r0, #12]
+	ldrb	r0, [r0, #16]	@ zero_extendqisi2
+	ldr	ip, [sp, #68]
+	ldr	r7, [r6, #12]
+	bfi	r7, lr, #8, #8
+	bfi	r7, r4, #3, #1
+	bfi	r4, r1, #1, #1
+	orr	r4, r4, #8
+	bfi	r7, r0, #5, #3
+	mov	r0, #1
+	bfi	r4, r0, #5, #2
+	orr	r4, r4, #536870912
+	mov	r3, r3, lsr r0
+	orr	r4, r4, #1024
+	bfi	r4, r3, #4, #1
+	ldr	r3, [r5, #-3392]
+	cmp	r3, #3
+	bls	.L639
+	ldr	r3, [r6, #16]
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	bic	r3, r3, #4
+	str	r3, [sp, #20]
+	adds	r3, ip, #0
+	movne	r3, #1
+	cmp	ip, #0
+	cmpeq	r8, #0
+	str	r3, [sp, #8]
+	beq	.L640
+	cmp	r1, #0
+	bne	.L641
+.L649:
+	mov	r0, r6
+	mov	r10, r2
+	mov	r9, r1
+	bl	rk_nandc_xfer_irq_flag_init
+	ldr	r3, [r6, #368]
+	add	r10, r10, #1
+	cmp	r8, #0
+	orr	r3, r3, #1
+	str	r3, [r6, #368]
+	ldr	r3, [r6, #364]
+	mov	r10, r10, asr #1
+	bfi	r4, r10, #22, #6
+	movne	r0, r8
+	orr	r3, r3, #1
+	str	r3, [r6, #364]
+	ldreq	r0, [r5, #-3380]
+	b	.L643
+.L641:
+	ldr	r3, [r5, #-3344]
+	mov	r9, r5
+	cmp	r3, #25
+	movcc	r3, #64
+	movcs	r3, #128
+	str	r3, [sp, #4]
+	mov	r3, r2, lsr #1
+	str	r3, [sp, #12]
+	mov	r3, #0
+	mov	r0, r3
+.L645:
+	ldr	lr, [sp, #12]
+	cmp	r0, lr
+	bcs	.L649
+	ldr	lr, [sp, #8]
+	mov	r10, r3, lsr #2
+	add	r0, r0, #1
+	cmp	lr, #0
+	ldrneh	fp, [ip, #2]
+	mvneq	fp, #0
+	ldrneh	lr, [ip], #4
+	ldreq	lr, [r9, #-3376]
+	orrne	lr, lr, fp, asl #16
+	ldrne	fp, [r9, #-3376]
+	streq	fp, [lr, r10, asl #2]
+	strne	lr, [fp, r10, asl #2]
+	ldr	lr, [sp, #4]
+	add	r3, r3, lr
+	b	.L645
+.L643:
+	ldr	r3, [r5, #-3376]
+	ubfx	r10, r4, #22, #5
+	mov	r2, r9
+	str	r0, [r5, #-3372]
+	mov	r1, r10, asl #10
+	str	r3, [r5, #-3368]
+	bl	rknand_dma_map_single
+	mov	r2, r9
+	mov	r1, r10, asl #7
+	clz	r9, r9
+	mov	r9, r9, lsr #5
+	str	r0, [r5, #-3364]
+	ldr	r0, [r5, #-3368]
+	bl	rknand_dma_map_single
+	mov	r3, #1
+	str	r3, [r5, #-3356]
+	tst	r8, #3
+	ldr	r3, [r5, #-3364]
+	str	r0, [r5, #-3360]
+	str	r3, [r6, #20]
+	ldr	r3, [r5, #-3360]
+	str	r3, [r6, #24]
+	mov	r3, #0
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	bic	r3, r3, #15872
+	orr	r3, r3, #8192
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	orr	r3, r3, #448
+	str	r3, [sp, #20]
+	ldreq	r3, [sp, #20]
+	biceq	r3, r3, #56
+	orreq	r3, r3, #16
+	streq	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	orr	r3, r3, #4
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	bic	r3, r3, #2
+	orr	r9, r3, r9, asl #1
+	str	r9, [sp, #20]
+	ldr	r3, [sp, #20]
+	orr	r3, r3, #1
+	str	r3, [sp, #20]
+.L640:
+	ldr	r3, [sp, #20]
+	str	r3, [r6, #16]
+.L639:
+	str	r7, [r6, #12]
+	str	r4, [r6, #8]
+	orr	r4, r4, #4
+	str	r4, [r6, #8]
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L657:
+	.align	2
+.L656:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	NandcXferStart, .-NandcXferStart
+	.align	2
+	.global	NandcXferComp
+	.type	NandcXferComp, %function
+NandcXferComp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #8
+	ldr	r5, .L698
+	ldr	r3, .L698+4
+	add	r0, r3, r0, asl #3
+	ldr	r3, [r5, #-3392]
+	cmp	r3, #3
+	ldr	r4, [r0, #12]
+	bls	.L689
+	ldr	r3, [r4, #16]
+	tst	r3, #4
+	beq	.L689
+	mov	r0, r4
+	bl	wait_for_nandc_xfer_completed
+	ldr	r6, [r4, #16]
+	ldr	r3, [r4, #8]
+	ubfx	r6, r6, #1, #1
+	cmp	r6, #0
+	movne	r6, #0
+	str	r3, [sp]
+	beq	.L671
+.L661:
+	ldr	r2, [r4, #28]
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ubfx	r3, r3, #22, #6
+	cmp	r2, r3
+	bge	.L669
+	ldr	r3, [r5, #-3392]
+	cmp	r3, #5
+	bhi	.L662
+.L665:
+	add	r6, r6, #1
+	bic	r3, r6, #-16777216
+	cmp	r3, #0
+	bne	.L661
+	ldr	r2, [r4, #28]
+	mov	r1, r6
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ldr	r0, .L698+8
+	ubfx	r3, r3, #22, #6
+	bl	printk
+	ldr	r0, .L698+12
+	mov	r1, r4
+	mov	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+	b	.L661
+.L662:
+	ldr	r3, [r4]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #8192
+	beq	.L665
+	ldr	r3, [sp, #4]
+	tst	r3, #131072
+	beq	.L665
+.L669:
+	ldr	r3, [r5, #-3356]
+	ldr	r4, .L698
+	cmp	r3, #0
+	beq	.L670
+	ldr	r1, [sp]
+	mov	r2, #0
+	ldr	r0, [r4, #-3364]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r4, #-3360]
+	mov	r2, #0
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #7
+	bl	rknand_dma_unmap_single
+	b	.L670
+.L673:
+	ldr	r3, [r4, #8]
+	add	r6, r6, #1
+	str	r3, [sp]
+	bic	r3, r6, #-16777216
+	cmp	r3, #0
+	bne	.L671
+	ldr	r2, [sp]
+	mov	r1, r6
+	ldr	r3, [r4, #28]
+	ldr	r0, .L698+16
+	ubfx	r3, r3, #16, #5
+	bl	printk
+	ldr	r0, .L698+12
+	mov	r1, r4
+	mov	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+.L671:
+	ldr	r3, [sp]
+	tst	r3, #1048576
+	beq	.L673
+	ldr	r3, [r5, #-3348]
+	cmp	r3, #0
+	beq	.L674
+	mov	r0, r4
+	bl	NandcSendDumpDataStart
+.L674:
+	ldr	r3, [r5, #-3356]
+	ldr	r6, .L698
+	cmp	r3, #0
+	beq	.L675
+	ldr	r1, [sp]
+	mov	r2, #1
+	ldr	r0, [r6, #-3364]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r6, #-3360]
+	mov	r2, #1
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #7
+	bl	rknand_dma_unmap_single
+.L675:
+	ldr	r3, [r5, #-3348]
+	cmp	r3, #0
+	beq	.L670
+	mov	r0, r4
+	bl	NandcSendDumpDataDone
+.L670:
+	mov	r3, #0
+	str	r3, [r5, #-3356]
+	b	.L658
+.L689:
+	ldr	r3, [r4, #8]
+	str	r3, [sp]
+	ldr	r3, [sp]
+	tst	r3, #1048576
+	beq	.L689
+.L658:
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L699:
+	.align	2
+.L698:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC4
+	.word	.LC5
+	.word	.LC6
+	.fnend
+	.size	NandcXferComp, .-NandcXferComp
+	.align	2
+	.global	NandcCopy1KB
+	.type	NandcCopy1KB, %function
+NandcCopy1KB:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #1
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r2
+	add	r2, r0, #4096
+	ldr	r5, [sp, #16]
+	add	r6, r0, #512
+	add	r2, r2, r4, asl #9
+	bne	.L701
+	cmp	r3, #0
+	beq	.L702
+	mov	r0, r2
+	mov	r1, r3
+	mov	r2, #1024
+	bl	ftl_memcpy
+.L702:
+	cmp	r5, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	ldrb	r3, [r5, #2]	@ zero_extendqisi2
+	mov	r4, r4, lsr #1
+	ldrb	r2, [r5, #1]	@ zero_extendqisi2
+	add	r4, r4, r4, asl #1
+	mov	r3, r3, asl #16
+	orr	r2, r3, r2, asl #8
+	ldrb	r3, [r5]	@ zero_extendqisi2
+	orr	r3, r2, r3
+	ldrb	r2, [r5, #3]	@ zero_extendqisi2
+	orr	r3, r3, r2, asl #24
+	str	r3, [r6, r4, asl #4]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L701:
+	cmp	r3, #0
+	beq	.L705
+	mov	r1, r2
+	mov	r0, r3
+	mov	r2, #1024
+	bl	ftl_memcpy
+.L705:
+	cmp	r5, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mov	r4, r4, lsr #1
+	add	r4, r4, r4, asl #1
+	ldr	r3, [r6, r4, asl #4]
+	mov	r2, r3, lsr #8
+	strb	r3, [r5]
+	strb	r2, [r5, #1]
+	mov	r2, r3, lsr #16
+	mov	r3, r3, lsr #24
+	strb	r2, [r5, #2]
+	strb	r3, [r5, #3]
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	NandcCopy1KB, .-NandcCopy1KB
+	.align	2
+	.global	NandcXferData
+	.type	NandcXferData, %function
+NandcXferData:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r3
+	ldr	r3, .L766
+	mov	r8, r2
+	ldr	r4, .L766+4
+	.pad #100
+	sub	sp, sp, #100
+	tst	fp, #63
+	mov	r10, r0
+	ldr	r2, [r3]
+	add	ip, r4, r0, asl #3
+	mov	r7, r1
+	ldr	r5, [sp, #136]
+	ldr	r9, [ip, #12]
+	str	r2, [sp, #92]
+	str	r3, [sp, #16]
+	bne	.L718
+	cmp	r5, #0
+	bne	.L719
+	add	r0, sp, #28
+	mov	r1, #255
+	mov	r2, #64
+	bl	ftl_memset
+	add	r5, sp, #28
+.L719:
+	mov	r0, r10
+	mov	r1, r7
+	mov	r2, r8
+	mov	r3, #0
+	str	fp, [sp]
+	str	r5, [sp, #4]
+	bl	NandcXferStart
+	mov	r0, r10
+	bl	NandcXferComp
+	cmp	r7, #0
+	movne	r6, #0
+	bne	.L720
+	ldr	r4, .L766+8
+	mov	r1, r8, lsr #1
+	mov	r2, r7
+	ldr	r3, [r4, #-3344]
+	cmp	r3, #25
+	mov	r3, r7
+	movcc	r0, #64
+	movcs	r0, #128
+.L722:
+	cmp	r2, r1
+	add	r5, r5, #4
+	add	ip, r3, r0
+	bcs	.L764
+	ldr	lr, [r4, #-3376]
+	mov	r3, r3, lsr #2
+	add	r2, r2, #1
+	ldr	r3, [lr, r3, asl #2]
+	mov	lr, r3, lsr #8
+	strb	r3, [r5, #-4]
+	strb	lr, [r5, #-3]
+	mov	lr, r3, lsr #16
+	mov	r3, r3, lsr #24
+	strb	lr, [r5, #-2]
+	strb	r3, [r5, #-1]
+	mov	r3, ip
+	b	.L722
+.L764:
+	ldr	r0, [r4, #-3344]
+	mov	r2, #0
+	ldr	r1, [r4, #-3392]
+	mov	r8, r8, lsr #2
+	mov	r6, r2
+.L724:
+	cmp	r2, r8
+	bcs	.L720
+	cmp	r0, #0
+	beq	.L720
+	add	r3, r2, #8
+	ldr	r3, [r9, r3, asl #2]
+	str	r3, [sp, #24]
+	ldr	r3, [sp, #24]
+	tst	r3, #4
+	bne	.L749
+	ldr	r4, [sp, #24]
+	ubfx	r4, r4, #15, #1
+	cmp	r4, #0
+	bne	.L749
+	cmp	r1, #5
+	bls	.L726
+	ldr	ip, [sp, #24]
+	ldr	r4, [sp, #24]
+	ldr	r3, [sp, #24]
+	ubfx	ip, ip, #3, #5
+	ldr	lr, [sp, #24]
+	ubfx	r4, r4, #27, #1
+	ubfx	r3, r3, #16, #5
+	ubfx	lr, lr, #29, #1
+	orr	ip, ip, r4, asl #5
+	orr	r3, r3, lr, asl #5
+	cmp	ip, r3
+	ldr	r3, [sp, #24]
+	ldrhi	r4, [sp, #24]
+	ubfxhi	r3, r3, #3, #5
+	ldrls	r4, [sp, #24]
+	ubfxls	r3, r3, #16, #5
+	ubfxhi	r4, r4, #27, #1
+	ubfxls	r4, r4, #29, #1
+	b	.L763
+.L726:
+	cmp	r1, #3
+	bls	.L728
+	ldr	ip, [sp, #24]
+	ldr	r4, [sp, #24]
+	ldr	r3, [sp, #24]
+	ubfx	ip, ip, #3, #5
+	ldr	lr, [sp, #24]
+	ubfx	r4, r4, #28, #1
+	ubfx	r3, r3, #16, #5
+	ubfx	lr, lr, #30, #1
+	orr	ip, ip, r4, asl #5
+	orr	r3, r3, lr, asl #5
+	cmp	ip, r3
+	bls	.L729
+	ldr	r3, [sp, #24]
+	ldr	r4, [sp, #24]
+	ubfx	r3, r3, #3, #5
+	ubfx	r4, r4, #28, #1
+.L763:
+	orr	r4, r3, r4, asl #5
+	b	.L728
+.L729:
+	ldr	r5, [sp, #24]
+	ldr	r4, [sp, #24]
+	ubfx	r5, r5, #16, #5
+	ubfx	r4, r4, #30, #1
+	orr	r4, r5, r4, asl #5
+.L728:
+	cmp	r6, r4
+	movcc	r6, r4
+	b	.L725
+.L749:
+	mvn	r6, #0
+.L725:
+	add	r2, r2, #1
+	b	.L724
+.L720:
+	mov	r3, #0
+	str	r3, [r9, #16]
+	b	.L731
+.L718:
+	cmp	r1, #1
+	mov	r4, #0
+	bne	.L761
+	mov	r6, r4
+.L732:
+	cmp	r4, r8
+	bcs	.L765
+	cmp	fp, #0
+	and	ip, r4, #3
+	addne	r3, fp, r4, asl #9
+	mov	r0, r9
+	moveq	r3, fp
+	cmp	r5, #0
+	mov	r1, #1
+	str	ip, [sp, #12]
+	movne	r2, #2
+	moveq	r2, #0
+	mla	r2, r4, r2, r5
+	add	r4, r4, #2
+	str	r2, [sp]
+	mov	r2, ip
+	bl	NandcCopy1KB
+	mov	r0, r10
+	mov	r1, #1
+	mov	r2, #2
+	ldr	ip, [sp, #12]
+	str	r6, [sp]
+	str	r6, [sp, #4]
+	mov	r3, ip
+	bl	NandcXferStart
+	mov	r0, r10
+	bl	NandcXferComp
+	b	.L732
+.L765:
+	mov	r6, #0
+	b	.L731
+.L761:
+	str	r4, [sp]
+	mov	r1, r4
+	str	r4, [sp, #4]
+	mov	r2, #2
+	mov	r3, r4
+	mov	r6, r4
+	bl	NandcXferStart
+	str	fp, [sp, #12]
+.L737:
+	cmp	r4, r8
+	bcs	.L731
+	mov	r0, r10
+	bl	NandcXferComp
+	ldr	r3, [r9, #32]
+	add	ip, r4, #2
+	cmp	ip, r8
+	str	r3, [sp, #24]
+	bcs	.L738
+	mov	r3, #0
+	mov	r0, r10
+	str	r3, [sp]
+	mov	r1, r3
+	str	r3, [sp, #4]
+	mov	r2, #2
+	and	r3, ip, #3
+	str	ip, [sp, #20]
+	bl	NandcXferStart
+	ldr	ip, [sp, #20]
+.L738:
+	ldr	r3, [sp, #24]
+	tst	r3, #4
+	mvnne	r6, #0
+	bne	.L739
+	ldr	r2, [sp, #24]
+	ldr	r3, [sp, #24]
+	ubfx	r2, r2, #3, #5
+	ubfx	r3, r3, #27, #1
+	orr	r3, r2, r3, asl #5
+	cmp	r6, r3
+	movcc	r6, r3
+.L739:
+	cmp	fp, #0
+	ldr	r3, [sp, #12]
+	sub	r2, ip, #2
+	mov	r0, r9
+	moveq	r3, #0
+	cmp	r5, #0
+	and	r2, r2, #3
+	str	ip, [sp, #20]
+	movne	r1, #2
+	moveq	r1, #0
+	mla	r4, r4, r1, r5
+	mov	r1, #0
+	str	r4, [sp]
+	bl	NandcCopy1KB
+	ldr	ip, [sp, #20]
+	ldr	r3, [sp, #12]
+	mov	r4, ip
+	add	r3, r3, #1024
+	str	r3, [sp, #12]
+	b	.L737
+.L731:
+	ldr	r3, .L766+8
+	clz	r7, r7
+	mov	r7, r7, lsr #5
+	ldr	r3, [r3, #-3392]
+	cmp	r3, #5
+	movls	r7, #0
+	cmp	r7, #0
+	beq	.L743
+	ldr	r3, [r9]
+	and	r2, r3, #139264
+	cmp	r2, #139264
+	orreq	r3, r3, #131072
+	streq	r3, [r9]
+	mvneq	r6, #0
+.L743:
+	ldr	r3, [sp, #16]
+	mov	r0, r6
+	ldr	r2, [sp, #92]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L745
+	bl	__stack_chk_fail
+.L745:
+	add	sp, sp, #100
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L767:
+	.align	2
+.L766:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	NandcXferData, .-NandcXferData
+	.align	2
+	.global	FlashReadRawPage
+	.type	FlashReadRawPage, %function
+FlashReadRawPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r8, r3
+	ldr	r3, .L771
+	subs	r4, r0, #0
+	mov	r6, r1
+	mov	r7, r2
+	ldrb	r5, [r3, #265]	@ zero_extendqisi2
+	bne	.L769
+	ldr	r2, .L771+4
+	ldrb	r3, [r2, #1]	@ zero_extendqisi2
+	ldr	r2, [r2, #4]
+	mul	r2, r2, r3
+	cmp	r1, r2
+	movcc	r5, #4
+.L769:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r1, r6
+	mov	r0, r4
+	bl	FlashReadCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r2, r5
+	mov	r1, #0
+	mov	r3, r7
+	mov	r0, r4
+	str	r8, [sp]
+	bl	NandcXferData
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	mov	r0, r5
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L772:
+	.align	2
+.L771:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadRawPage, .-FlashReadRawPage
+	.align	2
+	.global	FlashDdrTunningRead
+	.type	FlashDdrTunningRead, %function
+FlashDdrTunningRead:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r7, r3
+	ldr	r5, .L800
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L800+4
+	mov	r10, r0
+	str	r1, [sp]
+	mov	fp, r2
+	ldr	r3, [r5, #3840]
+	ldr	r3, [r3, #304]
+	str	r3, [sp, #8]
+	ldr	r3, [r4, #-3392]
+	cmp	r3, #8
+	ldr	r3, [sp, #56]
+	movcc	r9, #6
+	movcs	r9, #12
+	cmp	r3, #0
+	moveq	r6, #1024
+	beq	.L775
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	mov	r0, r10
+	bl	FlashReset
+	mov	r2, fp
+	mov	r3, r7
+	mov	r0, r10
+	ldr	r1, [sp]
+	bl	FlashReadRawPage
+	mov	r6, r0
+	ldrb	r0, [r4, #-3412]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #-3412]	@ zero_extendqisi2
+	bl	NandcSetMode
+	cmn	r6, #1
+	bne	.L776
+.L785:
+	mvn	r6, #0
+	b	.L777
+.L776:
+	mov	r2, r6
+	ldr	r0, .L800+8
+	ldr	r1, [sp]
+	bl	printk
+	cmp	r6, #9
+	addls	r5, r5, r10, asl #3
+	ldrls	r3, [r5, #12]
+	ldrls	r2, [r3, #3840]
+	ldrls	r2, [r3]
+	orrls	r2, r2, #131072
+	strls	r2, [r3]
+	ldr	r3, [r4, #-3332]
+	add	r3, r3, #1
+	str	r3, [r4, #-3332]
+	cmp	r3, #2048
+	bcc	.L777
+	ldr	r3, .L800+4
+	mov	r7, #0
+	mov	fp, r7
+	str	r7, [r3, #-3332]
+.L775:
+	mov	r4, #0
+	mvn	r8, #0
+	mov	ip, r4
+	mov	r5, r4
+	str	r4, [sp, #4]
+.L783:
+	uxtb	r0, r9
+	str	ip, [sp, #12]
+	bl	NandcSetDdrPara
+	mov	r3, r7
+	mov	r0, r10
+	mov	r2, fp
+	ldr	r1, [sp]
+	bl	FlashReadRawPage
+	add	r3, r6, #1
+	cmp	r0, r3
+	ldr	ip, [sp, #12]
+	bhi	.L779
+	cmp	r0, #2
+	bhi	.L789
+	add	r5, r5, #1
+	cmp	r5, #9
+	bls	.L789
+	rsb	r4, r5, r9
+	mov	r6, r0
+	mov	r8, #0
+	b	.L781
+.L779:
+	ldr	r3, [sp, #4]
+	cmp	r3, r5
+	bcs	.L790
+	cmp	r5, #7
+	rsb	ip, r5, r4
+	bhi	.L791
+	str	r5, [sp, #4]
+	b	.L790
+.L789:
+	mov	r8, #0
+	mov	r4, r9
+	mov	r6, r0
+	mov	r7, r8
+	mov	fp, r8
+	b	.L780
+.L790:
+	mov	r5, #0
+.L780:
+	add	r9, r9, #2
+	cmp	r9, #69
+	bls	.L783
+.L781:
+	ldr	r3, [sp, #4]
+	cmp	r3, r5
+	movcs	r4, ip
+	b	.L782
+.L791:
+	mov	r4, ip
+.L782:
+	cmp	r4, #0
+	beq	.L784
+	ldr	r0, .L800+12
+	mov	r1, r4
+	bl	printk
+	uxtb	r0, r4
+	bl	NandcSetDdrPara
+.L784:
+	cmn	r8, #1
+	bne	.L777
+	ldr	r0, .L800+16
+	mov	r1, r10
+	ldr	r2, [sp]
+	bl	printk
+	ldr	r3, [sp, #56]
+	cmp	r3, #0
+	beq	.L785
+	ldr	r3, [sp, #8]
+	ubfx	r0, r3, #8, #8
+	bl	NandcSetDdrPara
+.L777:
+	mov	r0, r6
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L801:
+	.align	2
+.L800:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC7
+	.word	.LC8
+	.word	.LC9
+	.fnend
+	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
+	.align	2
+	.global	FlashReadPage
+	.type	FlashReadPage, %function
+FlashReadPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	mov	r5, r0
+	mov	r6, r1
+	mov	r8, r2
+	mov	r7, r3
+	bl	FlashReadRawPage
+	ldr	r10, .L823
+	cmn	r0, #1
+	mov	r4, r0
+	bne	.L803
+	ldr	r9, .L823+4
+	ldrb	fp, [r9, #8]	@ zero_extendqisi2
+	mov	ip, r9
+	cmp	fp, #0
+	bne	.L804
+.L806:
+	ldrb	r3, [r10, #-3400]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L803
+	b	.L822
+.L804:
+	mov	r3, #0
+	mov	r0, r5
+	strb	r3, [r9, #8]
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, r7
+	str	r9, [sp, #12]
+	bl	FlashReadRawPage
+	strb	fp, [r9, #8]
+	cmn	r0, #1
+	ldr	ip, [sp, #12]
+	movne	r4, r0
+	beq	.L806
+	b	.L803
+.L822:
+	ldr	r3, [ip, #3840]
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r9, [r3, #304]
+	mov	r3, #1
+	str	r3, [sp]
+	mov	r3, r7
+	bl	FlashDdrTunningRead
+	cmn	r0, #1
+	mov	r4, r0
+	beq	.L807
+	ldr	r3, .L823+4
+	ldrb	r3, [r3, #3905]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L803
+.L807:
+	ubfx	r0, r9, #8, #8
+	bl	NandcSetDdrPara
+.L803:
+	ldr	ip, [r10, #-3328]
+	adds	r3, ip, #0
+	movne	r3, #1
+	cmn	r4, #1
+	movne	r3, #0
+	cmp	r3, #0
+	beq	.L808
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, r7
+	mov	r0, r5
+	blx	ip
+	mov	r2, r5
+	mov	r3, r6
+	mov	r4, r0
+	ldr	r0, .L823+8
+	mov	r1, r4
+	bl	printk
+	cmn	r4, #1
+	bne	.L808
+	ldr	r3, .L823+4
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L808
+	mov	r0, r5
+	bl	flash_enter_slc_mode
+	ldr	r3, .L823
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	ldr	ip, [r3, #-3328]
+	mov	r3, r7
+	blx	ip
+	mov	r4, r0
+	mov	r0, r5
+	bl	flash_exit_slc_mode
+.L808:
+	mov	r0, r4
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L824:
+	.align	2
+.L823:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC10
+	.fnend
+	.size	FlashReadPage, .-FlashReadPage
+	.align	2
+	.global	FlashDdrParaScan
+	.type	FlashDdrParaScan, %function
+FlashDdrParaScan:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r7, r0
+	ldr	r5, .L835
+	mov	r6, r1
+	mov	r4, #0
+	ldrb	r0, [r5, #-3412]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r5, #-3412]	@ zero_extendqisi2
+	bl	NandcSetMode
+	mov	r1, r6
+	mov	r2, r4
+	mov	r3, r4
+	mov	r0, r7
+	str	r4, [sp]
+	bl	FlashDdrTunningRead
+	mov	r3, r4
+	mov	r1, r6
+	mov	r2, r4
+	mov	r8, r0
+	mov	r0, r7
+	bl	FlashReadRawPage
+	mov	r3, r5
+	cmn	r0, #1
+	cmnne	r8, #1
+	bne	.L826
+	ldrb	r2, [r5, #-3412]	@ zero_extendqisi2
+	tst	r2, #1
+	beq	.L826
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	strb	r4, [r5, #-3400]
+	b	.L827
+.L826:
+	mov	r2, #1
+	strb	r2, [r3, #-3400]
+.L827:
+	mov	r0, #0
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L836:
+	.align	2
+.L835:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashDdrParaScan, .-FlashDdrParaScan
+	.align	2
+	.global	FlashLoadPhyInfo
+	.type	FlashLoadPhyInfo, %function
+FlashLoadPhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r10, .L854
+	mov	r6, #0
+	ldr	r8, .L854+4
+	mov	r4, r6
+	ldr	r5, .L854+8
+	mov	r9, #4
+	ldr	r3, [r10]
+	mvn	r7, #0
+	str	r6, [r5, #-3320]
+	str	r3, [sp, #12]
+	ldr	r3, .L854+12
+	ldr	r0, [r3]	@ unaligned
+	ldr	r3, [r8, #4]
+	str	r0, [sp, #8]	@ unaligned
+	mov	r0, r6
+	str	r3, [sp]
+	mov	r6, r5
+	ldr	r3, [r5, #-3408]
+	str	r3, [r5, #-3324]
+	bl	flash_enter_slc_mode
+	str	r10, [sp, #4]
+.L838:
+	add	fp, r4, #1
+	mov	r10, #0
+.L840:
+	add	r3, sp, #8
+	ldrb	r0, [r3, r10]	@ zero_extendqisi2
+	bl	FlashBchSel
+	mov	r0, #0
+	mov	r1, r4
+	ldr	r2, [r5, #-3408]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	bne	.L839
+	mov	r0, #0
+	mov	r1, fp
+	ldr	r2, [r6, #-3408]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	bne	.L839
+	add	r10, r10, #1
+	cmp	r10, #4
+	beq	.L841
+	b	.L840
+.L842:
+	add	r0, fp, #12
+	movw	r1, #2036
+	bl	js_hash
+	ldr	r3, [fp, #8]
+	cmp	r3, r0
+	mvnne	r7, #0
+	bne	.L841
+	ldr	r7, .L854+16
+	add	r1, fp, #160
+	mov	r2, #32
+	mov	r0, r7
+	bl	ftl_memcpy
+	ldr	r1, [r6, #-3324]
+	mov	r2, #32
+	ldr	r0, .L854+20
+	add	r1, r1, #192
+	bl	ftl_memcpy
+	ldr	r1, [r6, #-3324]
+	mov	r2, #852
+	ldr	r0, .L854+24
+	add	r1, r1, #224
+	bl	ftl_memcpy
+	ldrh	r0, [r7, #10]
+	bl	FlashBlockAlignInit
+	ldr	r7, [r6, #-3324]
+	str	r4, [r6, #-3320]
+	mov	r0, r4
+	ldr	r1, [r8, #4]
+	ldr	r3, [r7, #1076]
+	strb	r3, [r6, #-3400]
+	bl	__aeabi_uidiv
+	add	r0, r0, #1
+	cmp	r0, #1
+	strhi	r0, [r6, #-3316]
+	movls	r3, #2
+	strls	r3, [r6, #-3316]
+	ldrh	r3, [r7, #14]
+	mov	r7, #0
+	strb	r3, [r5, #-3312]
+.L841:
+	ldr	r3, [sp]
+	subs	r9, r9, #1
+	add	r4, r4, r3
+	bne	.L838
+	mov	r0, r9
+.L853:
+	bl	flash_exit_slc_mode
+	mov	r0, r7
+	ldr	r3, [sp, #4]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L848
+	bl	__stack_chk_fail
+.L839:
+	ldr	fp, [r5, #-3324]
+	ldr	r2, .L854+28
+	ldr	r3, [fp]
+	cmp	r3, r2
+	bne	.L841
+	cmp	r7, #0
+	bne	.L842
+	mov	r0, r4
+	ldr	r1, [r8, #4]
+	bl	__aeabi_uidiv
+	ldr	r3, .L854+8
+	add	r0, r0, #1
+	str	r0, [r3, #-3316]
+	mov	r0, r7
+	b	.L853
+.L848:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L855:
+	.align	2
+.L854:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR3
+	.word	.LANCHOR1+256
+	.word	.LANCHOR0+44
+	.word	.LANCHOR0+3916
+	.word	1312902724
+	.fnend
+	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
+	.align	2
+	.global	ToshibaReadRetrial
+	.type	ToshibaReadRetrial, %function
+ToshibaReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	mov	r8, r0
+	mov	fp, r3
+	str	r2, [sp, #4]
+	str	r1, [sp, #12]
+	bl	NandcWaitFlashReady
+	ldr	r2, .L885
+	add	r3, r2, r8, asl #3
+	ldr	r5, [r3, #12]
+	ldrb	r9, [r3, #16]	@ zero_extendqisi2
+	ldr	r3, .L885+4
+	add	r6, r9, #8
+	ldrb	r7, [r3]	@ zero_extendqisi2
+	add	r6, r5, r6, asl #8
+	sub	r4, r7, #67
+	cmp	r4, #1
+	str	r3, [sp, #8]
+	movls	r3, #0
+	str	r2, [sp, #16]
+	strls	r3, [sp]
+	bls	.L857
+	ldr	r3, .L885+8
+	ldrb	r4, [r3, #-3400]	@ zero_extendqisi2
+	cmp	r4, #0
+	streq	r4, [sp]
+	beq	.L858
+	mov	r0, #0
+	bl	NandcSetDdrMode
+	mov	r3, #1
+	str	r3, [sp]
+.L858:
+	add	r3, r5, r9, asl #8
+	mov	r2, #92
+	str	r2, [r3, #2056]
+	mov	r2, #197
+	str	r2, [r3, #2056]
+.L857:
+	mov	r7, #1
+	mvn	r10, #0
+	mov	r3, r9, asl #8
+	str	r3, [sp, #20]
+.L859:
+	ldr	r3, .L885+12
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r7, r3
+	bcs	.L884
+	ldr	r3, [sp, #8]
+	mov	r0, r6
+	uxtb	r1, r7
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	sub	r3, r3, #67
+	cmp	r3, #1
+	bhi	.L860
+	bl	SandiskSetRRPara
+	b	.L861
+.L860:
+	bl	ToshibaSetRRPara
+.L861:
+	ldr	r3, [sp, #8]
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #34
+	bne	.L862
+	ldr	r3, .L885+12
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	sub	r3, r3, #3
+	cmp	r7, r3
+	ldreq	r3, [sp, #20]
+	moveq	r2, #179
+	addeq	r3, r5, r3
+	streq	r2, [r3, #2056]
+.L862:
+	ldr	r3, [sp, #20]
+	mov	r2, #38
+	add	r3, r5, r3
+	str	r2, [r3, #2056]
+	mov	r2, #93
+	str	r2, [r3, #2056]
+	ldr	r3, [sp]
+	cmp	r3, #0
+	beq	.L863
+	mov	r0, #4
+	bl	NandcSetDdrMode
+	mov	r0, r8
+	mov	r3, fp
+	ldr	r1, [sp, #12]
+	ldr	r2, [sp, #4]
+	bl	FlashReadRawPage
+	mov	r4, r0
+	mov	r0, #0
+	bl	NandcSetDdrMode
+	b	.L864
+.L863:
+	mov	r0, r8
+	ldr	r1, [sp, #12]
+	ldr	r2, [sp, #4]
+	mov	r3, fp
+	bl	FlashReadRawPage
+	mov	r4, r0
+.L864:
+	cmn	r4, #1
+	beq	.L865
+	ldr	r3, [sp, #16]
+	cmn	r10, #1
+	moveq	r10, r4
+	ldrb	r2, [r3, #3905]	@ zero_extendqisi2
+	add	r2, r2, r2, asl #1
+	cmp	r4, r2, asr #2
+	bcc	.L867
+	mov	fp, #0
+	str	fp, [sp, #4]
+.L865:
+	add	r7, r7, #1
+	b	.L859
+.L884:
+	mov	r4, r10
+.L867:
+	ldr	r3, [sp, #8]
+	mov	r0, r6
+	mov	r1, #0
+	ldrb	r2, [r3]	@ zero_extendqisi2
+	sub	r2, r2, #67
+	cmp	r2, #1
+	bhi	.L869
+	bl	SandiskSetRRPara
+	b	.L870
+.L869:
+	bl	ToshibaSetRRPara
+.L870:
+	ldr	r3, [sp, #16]
+	add	r5, r5, r9, asl #8
+	mov	r2, #255
+	str	r2, [r5, #2056]
+	ldrb	r2, [r3, #3905]	@ zero_extendqisi2
+	add	r2, r2, r2, asl #1
+	cmp	r4, r2, asr #2
+	bcc	.L871
+	cmn	r4, #1
+	movne	r4, #256
+.L871:
+	mov	r0, r8
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp]
+	cmp	r3, #0
+	beq	.L872
+	mov	r0, #4
+	bl	NandcSetDdrMode
+.L872:
+	mov	r0, r4
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L886:
+	.align	2
+.L885:
+	.word	.LANCHOR0
+	.word	g_retryMode
+	.word	.LANCHOR2
+	.word	g_maxRetryCount
+	.fnend
+	.size	ToshibaReadRetrial, .-ToshibaReadRetrial
+	.align	2
+	.global	SamsungReadRetrial
+	.type	SamsungReadRetrial, %function
+SamsungReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r9, r0
+	ldr	r5, .L901
+	mov	r10, r2
+	mov	r8, r3
+	mov	fp, r1
+	bl	NandcWaitFlashReady
+	add	r2, r5, r9, asl #3
+	ldr	ip, .L901+4
+	mov	r7, #1
+	ldrb	r3, [r2, #16]	@ zero_extendqisi2
+	mvn	r4, #0
+	ldr	r6, [r2, #12]
+	add	r3, r3, #8
+	add	r6, r6, r3, asl #8
+.L888:
+	ldrb	r3, [ip]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r7, r3
+	bcs	.L891
+	mov	r0, r6
+	uxtb	r1, r7
+	str	ip, [sp, #4]
+	bl	SamsungSetRRPara
+	mov	r0, r9
+	mov	r1, fp
+	mov	r2, r10
+	mov	r3, r8
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	ldr	ip, [sp, #4]
+	beq	.L889
+	ldrb	r3, [r5, #3905]	@ zero_extendqisi2
+	cmn	r4, #1
+	moveq	r4, r0
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, asr #2
+	bcc	.L894
+	mov	r8, #0
+	mov	r10, r8
+.L889:
+	add	r7, r7, #1
+	b	.L888
+.L894:
+	mov	r4, r0
+.L891:
+	mov	r0, r6
+	mov	r1, #0
+	bl	SamsungSetRRPara
+	ldrb	r3, [r5, #3905]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r4, r3, asr #2
+	bcc	.L893
+	cmn	r4, #1
+	movne	r4, #256
+.L893:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L902:
+	.align	2
+.L901:
+	.word	.LANCHOR0
+	.word	g_maxRetryCount
+	.fnend
+	.size	SamsungReadRetrial, .-SamsungReadRetrial
+	.align	2
+	.global	MicronReadRetrial
+	.type	MicronReadRetrial, %function
+MicronReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+.L905:
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r3
+	ldr	r3, .L929
+	mov	fp, r2
+	.pad #36
+	sub	sp, sp, #36
+	mov	r6, r0
+	mov	r10, #0
+	ldrb	r5, [r3, #3905]	@ zero_extendqisi2
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	str	r1, [sp, #20]
+	cmp	r3, #0
+	addeq	r5, r5, r5, asl #1
+	ldrne	r2, .L929+4
+	ubfxeq	r5, r5, #2, #8
+	smullne	r2, r3, r5, r2
+	uxtbne	r5, r3
+	ldr	r3, .L929
+	add	r3, r3, r0, asl #3
+	str	r3, [sp, #24]
+.L915:
+	mov	r0, r6
+	mov	r9, #0
+	bl	NandcWaitFlashReady
+	mvn	r4, #0
+	ldr	r3, [sp, #24]
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #24]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	str	r3, [sp, #16]
+	ldr	r2, [sp, #16]
+	ldr	r3, [sp, #12]
+	add	r7, r3, r2, asl #8
+.L906:
+	ldr	r3, .L929+8
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r9, r3
+	bcs	.L909
+	mov	r3, #239
+	mov	r0, #200
+	str	r3, [r7, #2056]
+	mov	r3, #137
+	str	r3, [r7, #2052]
+	bl	NandcDelayns
+	mov	ip, #0
+	add	r3, r9, #1
+	mov	r0, r6
+	str	r3, [r7, #2048]
+	mov	r2, fp
+	str	ip, [r7, #2048]
+	str	ip, [r7, #2048]
+	str	ip, [r7, #2048]
+	str	r3, [sp, #8]
+	mov	r3, r8
+	ldr	r1, [sp, #20]
+	str	ip, [sp, #28]
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	beq	.L907
+	cmn	r4, #1
+	ldr	ip, [sp, #28]
+	moveq	r4, r0
+	cmp	r0, r5
+	bcc	.L917
+	mov	r8, ip
+	mov	fp, ip
+.L907:
+	ldr	r9, [sp, #8]
+	b	.L906
+.L917:
+	mov	r4, r0
+	mov	r8, ip
+	mov	fp, ip
+.L909:
+	ldr	r2, [sp, #16]
+	mov	r0, #200
+	ldr	r3, [sp, #12]
+	add	r7, r3, r2, asl #8
+	mov	r3, #239
+	str	r3, [r7, #2056]
+	mov	r3, #137
+	str	r3, [r7, #2052]
+	bl	NandcDelayns
+	cmp	r4, r5
+	mov	r3, #0
+	str	r3, [r7, #2048]
+	str	r3, [r7, #2048]
+	str	r3, [r7, #2048]
+	str	r3, [r7, #2048]
+	bcc	.L911
+	cmn	r4, #1
+	movne	r4, #256
+.L911:
+	cmn	r4, #1
+	movne	r7, #0
+	moveq	r7, #1
+	cmp	r4, #256
+	movne	r1, r7
+	orreq	r1, r7, #1
+	cmp	r1, #0
+	beq	.L912
+	str	r4, [sp]
+	mov	r1, r9
+	ldr	r0, .L929+12
+	mov	r3, r9
+	ldr	r2, [sp, #20]
+	bl	printk
+	cmp	r10, #0
+	bne	.L913
+	ldr	r3, .L929
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r7, #0
+	andne	r7, r7, #1
+	cmp	r7, #0
+	beq	.L922
+	mov	r0, r6
+	mov	r1, #3
+	bl	micron_auto_read_calibration_config
+	mov	r10, #1
+	b	.L915
+.L913:
+	mov	r0, r6
+	mov	r1, #0
+	bl	micron_auto_read_calibration_config
+	cmn	r4, #1
+	movne	r4, #256
+	b	.L922
+.L912:
+	cmp	r10, #0
+	beq	.L922
+	mov	r0, r6
+	mov	r4, #256
+	bl	micron_auto_read_calibration_config
+.L922:
+	mov	r0, r4
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L930:
+	.align	2
+.L929:
+	.word	.LANCHOR0
+	.word	1431655766
+	.word	g_maxRetryCount
+	.word	.LC11
+	.fnend
+	.size	MicronReadRetrial, .-MicronReadRetrial
+	.align	2
+	.global	HynixReadRetrial
+	.type	HynixReadRetrial, %function
+HynixReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r8, r3
+	ldr	r5, .L949
+	mov	r10, r2
+	mov	r7, r0
+	mov	fp, r1
+	add	r2, r5, r0
+	mvn	r6, #0
+	ldr	r3, [r5, #1784]
+	ldrb	r4, [r2, #3928]	@ zero_extendqisi2
+	ldrb	r9, [r5, #3918]	@ zero_extendqisi2
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r3, #7
+	cmp	r3, #1
+	ldrlsb	r4, [r2, #3936]	@ zero_extendqisi2
+	bl	NandcWaitFlashReady
+	mov	ip, #0
+.L933:
+	cmp	ip, r9
+	bcs	.L937
+	add	r4, r4, #1
+	mov	r0, r7
+	ldrb	r1, [r5, #3917]	@ zero_extendqisi2
+	uxtb	r4, r4
+	ldr	r2, .L949+4
+	cmp	r4, r9
+	str	ip, [sp, #4]
+	movcs	r4, #0
+	mov	r3, r4
+	bl	HynixSetRRPara
+	mov	r0, r7
+	mov	r1, fp
+	mov	r2, r10
+	mov	r3, r8
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	ldr	ip, [sp, #4]
+	beq	.L935
+	ldrb	r3, [r5, #3905]	@ zero_extendqisi2
+	cmn	r6, #1
+	moveq	r6, r0
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, asr #2
+	bcc	.L942
+	mov	r8, #0
+	mov	r10, r8
+.L935:
+	add	ip, ip, #1
+	b	.L933
+.L942:
+	mov	r6, r0
+.L937:
+	ldr	r3, [r5, #1784]
+	add	r7, r5, r7
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r3, #7
+	cmp	r3, #1
+	ldrb	r3, [r5, #3905]	@ zero_extendqisi2
+	strlsb	r4, [r7, #3936]
+	strhib	r4, [r7, #3928]
+	add	r3, r3, r3, asl #1
+	cmp	r6, r3, asr #2
+	bcc	.L941
+	cmn	r6, #1
+	movne	r6, #256
+.L941:
+	mov	r0, r6
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L950:
+	.align	2
+.L949:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3920
+	.fnend
+	.size	HynixReadRetrial, .-HynixReadRetrial
+	.align	2
+	.global	FlashProgPage
+	.type	FlashProgPage, %function
+FlashProgPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r8, r3
+	ldr	r3, .L955
+	subs	r4, r0, #0
+	mov	r5, r1
+	mov	r7, r2
+	ldrb	r6, [r3, #265]	@ zero_extendqisi2
+	bne	.L952
+	ldr	r2, .L955+4
+	ldrb	r3, [r2, #1]	@ zero_extendqisi2
+	ldr	r1, [r2, #4]
+	mul	r1, r1, r3
+	cmp	r5, r1
+	bcs	.L952
+	ldrb	r3, [r2]	@ zero_extendqisi2
+	cmp	r3, #0
+	subeq	r6, r6, #2
+	movne	r6, #4
+.L952:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r0, r4
+	mov	r1, r5
+	bl	FlashProgFirstCmd
+	uxtb	r2, r6
+	mov	r3, r7
+	mov	r0, r4
+	mov	r1, #1
+	str	r8, [sp]
+	bl	NandcXferData
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashProgSecondCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L956:
+	.align	2
+.L955:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgPage, .-FlashProgPage
+	.align	2
+	.global	FlashSavePhyInfo
+	.type	FlashSavePhyInfo, %function
+FlashSavePhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L967
+	ldr	r5, .L967+4
+	ldr	r8, .L967+8
+	ldr	r3, [r4, #-3408]
+	mov	r9, r4
+	ldrb	r0, [r4, #-3311]	@ zero_extendqisi2
+	mov	r10, r5
+	str	r3, [r4, #-3324]
+	bl	FlashBchSel
+	mov	r1, #0
+	mov	r2, #2048
+	ldr	r0, [r4, #-3408]
+	bl	ftl_memset
+	ldr	r3, [r4, #-3324]
+	ldr	r1, .L967+12
+	mov	r2, #32
+	str	r8, [r3]
+	ldr	r0, [r4, #-3324]
+	ldrb	r3, [r5, #1612]	@ zero_extendqisi2
+	add	r0, r0, #16
+	strh	r3, [r0, #-4]	@ movhi
+	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	strh	r3, [r0, #-2]	@ movhi
+	ldrb	r3, [r4, #-3400]	@ zero_extendqisi2
+	str	r3, [r0, #1060]
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-3324]
+	add	r1, r5, #1616
+	mov	r2, #8
+	add	r0, r0, #80
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-3324]
+	ldr	r1, .L967+16
+	mov	r2, #32
+	add	r0, r0, #96
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-3324]
+	ldr	r1, .L967+20
+	mov	r2, #32
+	add	r0, r0, #160
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-3324]
+	add	r1, r5, #44
+	mov	r2, #32
+	add	r0, r0, #192
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-3324]
+	mov	r2, #852
+	ldr	r1, .L967+24
+	add	r0, r0, #224
+	bl	ftl_memcpy
+	ldr	r6, [r4, #-3324]
+	movw	r1, #2036
+	add	r0, r6, #12
+	bl	js_hash
+	movw	r3, #1592
+	str	r3, [r6, #4]
+	ldr	r3, [r4, #-3308]
+	str	r3, [r4, #-3324]
+	str	r0, [r6, #8]
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	mov	r6, #0
+	mov	r7, r6
+.L960:
+	ldr	r1, [r5, #4]
+	mov	r0, #0
+	mov	r2, r0
+	mul	r1, r1, r7
+	bl	FlashEraseBlock
+	ldr	r1, [r5, #4]
+	mov	r0, #0
+	ldr	r2, [r4, #-3408]
+	mov	r3, r0
+	mul	r1, r1, r7
+	bl	FlashProgPage
+	ldr	r1, [r5, #4]
+	mov	r0, #0
+	ldr	r2, [r4, #-3408]
+	mov	r3, r0
+	mul	r1, r1, r7
+	add	r1, r1, #1
+	bl	FlashProgPage
+	ldr	r1, [r5, #4]
+	mov	r0, #0
+	ldr	r2, [r4, #-3308]
+	mov	r3, r0
+	mul	r1, r1, r7
+	bl	FlashReadRawPage
+	add	r2, r7, #1
+	cmn	r0, #1
+	beq	.L958
+	ldr	fp, [r9, #-3324]
+	ldr	r3, [fp]
+	cmp	r3, r8
+	bne	.L958
+	add	r0, fp, #12
+	movw	r1, #2036
+	str	r2, [sp, #4]
+	bl	js_hash
+	ldr	r3, [fp, #8]
+	cmp	r3, r0
+	ldr	r2, [sp, #4]
+	bne	.L958
+	ldr	r3, [r10, #4]
+	cmp	r6, #1
+	str	r2, [r9, #-3316]
+	mul	r7, r3, r7
+	str	r7, [r9, #-3320]
+	beq	.L961
+	mov	r6, #1
+.L958:
+	cmp	r2, #4
+	mov	r7, r2
+	bne	.L960
+	b	.L959
+.L961:
+	mov	r6, #2
+.L959:
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+	clz	r0, r6
+	mov	r0, r0, lsr #5
+	rsb	r0, r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L968:
+	.align	2
+.L967:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	1312902724
+	.word	IDByte
+	.word	.LANCHOR0+1624
+	.word	.LANCHOR1+256
+	.word	.LANCHOR0+3916
+	.fnend
+	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
+	.align	2
+	.global	FlashReadIdbDataRaw
+	.type	FlashReadIdbDataRaw, %function
+FlashReadIdbDataRaw:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L990
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r2, [r3]
+	mov	r9, r0
+	ldr	r6, .L990+4
+	str	r3, [sp]
+	str	r2, [sp, #12]
+	ldr	r2, .L990+8
+	ldrb	r10, [r6, #3905]	@ zero_extendqisi2
+	ldr	r0, [r2]	@ unaligned
+	ldr	r2, .L990+12
+	str	r0, [sp, #8]	@ unaligned
+	ldr	r2, [r2, #-3404]
+	cmp	r2, #0
+	beq	.L970
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+.L970:
+	mov	r0, r9
+	mov	r1, #0
+	mov	r2, #2048
+	mvn	r8, #0
+	bl	ftl_memset
+	mov	r4, #2
+.L971:
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L975
+	ldr	fp, .L990+12
+	mov	r7, #0
+.L973:
+	add	r3, sp, #8
+	ldr	r5, .L990+12
+	ldrb	ip, [r3, r7]	@ zero_extendqisi2
+	mov	r0, ip
+	str	ip, [sp, #4]
+	bl	FlashBchSel
+	ldr	r1, [r6, #4]
+	mov	r0, #0
+	ldr	r2, [fp, #-3408]
+	mov	r3, r0
+	mul	r1, r1, r4
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	ldr	ip, [sp, #4]
+	bne	.L972
+	add	r7, r7, #1
+	cmp	r7, #4
+	bne	.L973
+	b	.L974
+.L972:
+	ldr	r3, [r5, #-3408]
+	ldr	r2, .L990+16
+	ldr	r3, [r3]
+	cmp	r3, r2
+	bne	.L974
+	mov	r1, ip
+	ldr	r0, .L990+20
+	bl	printk
+	mov	r2, #2048
+	mov	r0, r9
+	ldr	r1, [r5, #-3408]
+	bl	ftl_memcpy
+	ldr	r3, [r5, #-3408]
+	ldr	r2, .L990+4
+	ldr	r3, [r3, #512]
+	strb	r3, [r2, #1]
+	ldr	r3, [r5, #-3316]
+	cmp	r3, r4
+	bls	.L979
+	str	r4, [r5, #-3316]
+	bl	FlashSavePhyInfo
+	mov	r8, #0
+.L974:
+	add	r4, r4, #1
+	b	.L971
+.L979:
+	mov	r8, #0
+.L975:
+	mov	r0, r10
+	bl	FlashBchSel
+	ldr	r3, .L990+12
+	ldr	r3, [r3, #-3404]
+	cmp	r3, #0
+	beq	.L976
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+.L976:
+	ldr	r3, [sp]
+	mov	r0, r8
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L978
+	bl	__stack_chk_fail
+.L978:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L991:
+	.align	2
+.L990:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LANCHOR2
+	.word	-52655045
+	.word	.LC12
+	.fnend
+	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
+	.align	2
+	.global	FlashInit
+	.type	FlashInit, %function
+FlashInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, r0
+	.pad #20
+	sub	sp, sp, #20
+	mov	r0, #32768
+	bl	ftl_malloc
+	ldr	r4, .L1087
+	ldr	r5, .L1087+4
+	mov	r7, #0
+	str	r0, [r4, #-3408]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r4, #-3308]
+	mov	r0, #4096
+	bl	ftl_malloc
+	str	r0, [r4, #-3304]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r4, #-3300]
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r3, #50
+	str	r7, [r4, #-3316]
+	strb	r3, [r5, #1]
+	strb	r3, [r4, #-3312]
+	mov	r3, #128
+	strb	r7, [r4, #-3400]
+	str	r3, [r5, #4]
+	mov	r3, #60
+	str	r7, [r4, #-3332]
+	strb	r7, [r5]
+	strb	r7, [r4, #-3292]
+	strb	r3, [r4, #-3311]
+	str	r0, [r4, #-3296]
+	mov	r0, r6
+	bl	NandcInit
+	ldr	r6, .L1087+8
+	mov	r8, r6
+.L998:
+	ldr	r3, .L1087+12
+	uxtb	r9, r7
+	add	r2, r3, r7, asl #3
+	mov	r0, r9
+	ldr	r10, [r3, r7, asl #3]
+	ldrb	fp, [r2, #4]	@ zero_extendqisi2
+	bl	FlashReset
+	mov	r0, r9
+	bl	NandcFlashCs
+	mov	r2, #144
+	add	fp, r10, fp, asl #8
+	mov	r0, #200
+	mov	r10, #0
+	str	r2, [fp, #2056]
+	str	r10, [fp, #2052]
+	bl	NandcDelayns
+	ldr	r1, [fp, #2048]
+	uxtb	r1, r1
+	strb	r1, [r6]
+	ldr	r0, [fp, #2048]
+	cmp	r1, #44
+	strb	r0, [r6, #1]
+	ldr	r0, [fp, #2048]
+	strb	r0, [r6, #2]
+	ldr	r0, [fp, #2048]
+	strb	r0, [r6, #3]
+	ldr	r0, [fp, #2048]
+	strb	r0, [r6, #4]
+	ldr	r0, [fp, #2048]
+	strb	r0, [r6, #5]
+	bne	.L993
+	mov	r1, #239
+	mov	r0, #200
+	str	r1, [fp, #2056]
+	mov	r1, #1
+	str	r1, [fp, #2052]
+	bl	NandcDelayns
+	mov	r1, #4
+	str	r1, [fp, #2048]
+	str	r10, [fp, #2048]
+	str	r10, [fp, #2048]
+	str	r10, [fp, #2048]
+.L993:
+	mov	r0, r9
+	bl	NandcFlashDeCs
+	ldrb	r2, [r6]	@ zero_extendqisi2
+	sub	r3, r2, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L994
+	ldrb	r1, [r6, #2]	@ zero_extendqisi2
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	ldr	r0, .L1087+16
+	str	r1, [sp]
+	ldrb	r1, [r6, #3]	@ zero_extendqisi2
+	str	r1, [sp, #4]
+	ldrb	r1, [r6, #4]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	ldrb	r1, [r6, #5]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	add	r1, r7, #1
+	bl	printk
+.L994:
+	cmp	r7, #0
+	bne	.L995
+	ldrb	r3, [r8]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L1044
+	ldr	r3, .L1087+8
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L1044
+	bl	FlashCs123Init
+.L995:
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	add	r7, r7, #1
+	add	r6, r6, #8
+	cmp	r3, #181
+	moveq	r3, #44
+	streqb	r3, [r6, #-8]
+	cmp	r7, #4
+	bne	.L998
+	ldrb	r3, [r8]	@ zero_extendqisi2
+	cmp	r3, #173
+	beq	.L999
+	ldr	r0, [r4, #-3396]
+	bl	NandcSetDdrMode
+.L999:
+	mov	r1, #0
+	mov	r2, #852
+	ldr	r0, .L1087+20
+	bl	ftl_memset
+	ldr	r6, .L1087+24
+	ldr	r2, [r4, #-3388]
+	ldr	r3, .L1087+28
+	cmp	r2, r6
+	ldrb	r0, [r8, #1]	@ zero_extendqisi2
+	str	r3, [r5, #1784]
+	mov	r3, #0
+	strb	r3, [r5, #8]
+	sub	lr, r0, #218
+	ldreq	r3, .L1087
+	clz	lr, lr
+	moveq	r1, #1
+	mov	lr, lr, lsr #5
+	streq	r1, [r3, #-3404]
+	cmp	r0, #161
+	cmpne	r0, #241
+	and	r1, r0, #253
+	moveq	r3, #1
+	movne	r3, #0
+	orr	r3, lr, r3
+	cmp	r1, #209
+	orreq	r3, r3, #1
+	cmp	r3, #0
+	bne	.L1001
+	cmp	r0, #220
+	bne	.L1002
+	ldr	r3, .L1087+8
+	ldrb	r3, [r3, #3]	@ zero_extendqisi2
+	cmp	r3, #149
+	bne	.L1002
+.L1001:
+	ldrb	r7, [r8]	@ zero_extendqisi2
+	mov	r3, #16
+	strb	r3, [r5, #1]
+	mov	ip, #1
+	strb	r3, [r4, #-3311]
+	cmp	r7, #152
+	ldr	r3, .L1087+32
+	strb	ip, [r5]
+	ldr	r1, .L1087
+	strb	r7, [r3, #3253]
+	strb	r0, [r3, #3254]
+	bne	.L1004
+	ldr	r7, .L1087+8
+	ldrsb	r7, [r7, #4]
+	cmp	r7, #0
+	strltb	ip, [r1, #-3292]
+	movge	ip, #24
+	strgeb	ip, [r1, #-3311]
+.L1004:
+	movw	r1, #2049
+	cmp	r2, r6
+	cmpne	r2, r1
+	moveq	r2, #16
+	streqb	r2, [r4, #-3311]
+	cmp	lr, #0
+	ldrne	r2, .L1087+36
+	movne	r1, #2048
+	strneh	r1, [r2, #14]	@ movhi
+	mvnne	r2, #37
+	bne	.L1081
+.L1008:
+	cmp	r0, #220
+	bne	.L1010
+	ldr	r2, .L1087+36
+	mov	r1, #4096
+	strh	r1, [r2, #14]	@ movhi
+	mvn	r2, #35
+.L1081:
+	strb	r2, [r3, #3254]
+	b	.L1009
+.L1010:
+	cmp	r0, #211
+	ldreq	r2, .L1087+36
+	moveq	r1, #4096
+	streqh	r1, [r2, #14]	@ movhi
+	moveq	r2, #2
+	streqb	r2, [r3, #3265]
+.L1009:
+	ldr	r1, .L1087+40
+	mov	r2, #32
+	ldr	r0, .L1087+44
+	bl	ftl_memcpy
+	ldr	r0, .L1087+28
+	ldr	r1, .L1087+36
+	mov	r2, #32
+	bl	ftl_memcpy
+.L1002:
+	ldrb	r3, [r5]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1011
+	bl	FlashLoadPhyInfoInRam
+	cmp	r0, #0
+	bne	.L1013
+	ldr	r3, .L1087+4
+	ldr	r7, .L1087
+	ldr	r3, [r3, #1784]
+	ldrh	r3, [r3, #16]
+	mov	r3, r3, lsr #8
+	tst	r3, #1
+	and	r0, r3, #7
+	strb	r0, [r4, #-3412]
+	bne	.L1013
+	mov	r3, #1
+	strb	r3, [r7, #-3400]
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r7, #-3412]	@ zero_extendqisi2
+	bl	NandcSetMode
+.L1013:
+	ldr	r3, [r5, #1784]
+	ldrb	r3, [r3, #26]	@ zero_extendqisi2
+	strb	r3, [r5, #3904]
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L1011
+	ldr	r3, [r4, #-3396]
+	ldr	r7, .L1087
+	cmp	r3, #0
+	beq	.L1016
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	b	.L1082
+.L1016:
+	ldrb	r0, [r7, #-3412]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r7, #-3412]	@ zero_extendqisi2
+.L1082:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L1011
+	mov	r0, #1
+	ldr	r7, .L1087+4
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	ldr	r3, [r5, #1784]
+	ldr	r0, .L1087+48
+	ldrh	r1, [r3, #14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	cmn	r0, #1
+	beq	.L1057
+	bl	FlashDieInfoInit
+	ldr	r3, [r7, #1784]
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	bl	FlashGetReadRetryDefault
+	movw	r3, #1788
+	ldr	r2, [r7, #1784]
+	ldrh	r3, [r7, r3]
+	add	r3, r3, #4080
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
+	add	r3, r3, #15
+	cmp	r1, r3, asr #12
+	ldrh	r3, [r2, #14]
+	blt	.L1018
+	add	r0, r3, #255
+	cmp	r1, r0, asr #8
+	bge	.L1019
+.L1018:
+	bic	r3, r3, #255
+	strh	r3, [r2, #14]	@ movhi
+.L1019:
+	ldrb	r3, [r4, #-3412]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L1020
+	bl	FlashSavePhyInfo
+	ldr	r3, .L1087
+	mov	r0, #0
+	ldr	r1, [r3, #-3320]
+	bl	FlashDdrParaScan
+.L1020:
+	bl	FlashSavePhyInfo
+.L1011:
+	ldr	r2, [r5, #1784]
+	ldr	r9, .L1087+4
+	ldr	r7, .L1087
+	ldrb	r3, [r2, #26]	@ zero_extendqisi2
+	ldrh	r0, [r2, #10]
+	ldrb	r10, [r2, #18]	@ zero_extendqisi2
+	strb	r3, [r5, #3904]
+	ldrh	r3, [r2, #16]
+	ubfx	r1, r3, #7, #1
+	strb	r1, [r5, #8]
+	ubfx	r1, r3, #3, #1
+	strb	r1, [r4, #-3291]
+	ubfx	r1, r3, #4, #1
+	ubfx	r3, r3, #8, #3
+	strb	r1, [r4, #-3340]
+	strb	r3, [r4, #-3412]
+	mov	r3, #0
+	ldrb	r1, [r2, #12]	@ zero_extendqisi2
+	str	r3, [r4, #-3328]
+	bl	__aeabi_idiv
+	mov	r1, r0
+	mov	r0, r10
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	r3, [r5, #1784]
+	ldrh	r2, [r3, #16]
+	tst	r2, #64
+	beq	.L1022
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	ldr	r3, .L1087+52
+	ldrb	r2, [r9, #3917]	@ zero_extendqisi2
+	ldr	r1, .L1087+56
+	strb	r0, [r3]
+	ldr	r3, .L1087+60
+	strb	r2, [r3]
+	mov	ip, r3
+	ldrb	r2, [r9, #3918]	@ zero_extendqisi2
+	strb	r2, [r1]
+	sub	r2, r0, #1
+	cmp	r2, #7
+	bhi	.L1023
+	ldr	r3, .L1087+64
+	sub	r2, r0, #5
+	cmp	r0, #8
+	cmpne	r2, #1
+	sub	r1, r0, #8
+	clz	r1, r1
+	str	r3, [r7, #-3328]
+	movls	r3, #1
+	strls	r3, [r7, #-3348]
+	cmp	r0, #7
+	mov	r1, r1, lsr #5
+	ldreq	r3, .L1087+68
+	beq	.L1026
+	ldr	r2, .L1087+68
+	cmp	r1, #0
+	sub	r3, r2, #8
+	movne	r3, r2
+.L1026:
+	sub	r1, r3, #1
+	add	r3, r3, #31
+	mov	r2, #0
+.L1027:
+	ldrsb	ip, [r1, #1]!
+	cmp	ip, #0
+	addeq	r2, r2, #1
+	cmp	r1, r3
+	bne	.L1027
+	cmp	r2, #27
+	bls	.L1022
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L1022
+.L1023:
+	sub	r2, r0, #17
+	cmp	r2, #2
+	bhi	.L1029
+	ldr	r3, .L1087+72
+	cmp	r0, #19
+	str	r3, [r7, #-3328]
+	moveq	r3, #15
+	bne	.L1086
+	b	.L1084
+.L1029:
+	sub	r2, r0, #65
+	cmp	r0, #33
+	cmpne	r2, #1
+	bhi	.L1031
+	ldr	r2, .L1087+76
+	str	r2, [r7, #-3328]
+	mov	r2, #4
+	strb	r2, [r3]
+.L1086:
+	mov	r3, #7
+.L1084:
+	strb	r3, [r1]
+	b	.L1022
+.L1031:
+	sub	r3, r0, #67
+	sub	r2, r0, #34
+	cmp	r3, #1
+	movhi	lr, #0
+	movls	lr, #1
+	cmp	r3, #1
+	cmphi	r2, #1
+	bhi	.L1032
+	ldr	r3, .L1087+76
+	cmp	r0, #68
+	cmpne	r0, #35
+	str	r3, [r7, #-3328]
+	movne	r3, #7
+	moveq	r3, #17
+	cmp	lr, #0
+	strb	r3, [r1]
+	movne	r3, #4
+	moveq	r3, #5
+	strb	r3, [ip]
+	b	.L1022
+.L1032:
+	cmp	r0, #49
+	ldreq	r3, .L1087+80
+	streq	r3, [r7, #-3328]
+.L1022:
+	ldr	r3, [r4, #-3388]
+	cmp	r3, r6
+	bne	.L1036
+	ldrb	r2, [r5, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldrne	r2, .L1087+4
+	movne	r1, #0
+	ldrne	r2, [r2, #1784]
+	strneb	r1, [r2, #18]
+.L1036:
+	ldrb	r2, [r8]	@ zero_extendqisi2
+	cmp	r2, #44
+	bne	.L1037
+	ldrb	r2, [r4, #-3400]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1037
+	cmp	r3, r6
+	bne	.L1038
+	ldrb	r3, [r5, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1037
+.L1038:
+	mov	r0, #1
+	mov	r3, #0
+	strb	r3, [r4, #-3400]
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+.L1037:
+	ldrb	r3, [r4, #-3412]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L1039
+	ldr	r2, .L1087
+	ldrb	r2, [r2, #-3400]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1040
+	tst	r3, #1
+	bne	.L1039
+.L1040:
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	mov	r0, #0
+	ldr	r1, [r4, #-3320]
+	bl	FlashDdrParaScan
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+.L1039:
+	ldr	r3, [r5, #1784]
+	mov	r9, #16
+	ldr	r7, .L1087+4
+	ldr	r4, .L1087+84
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	add	r0, r7, #1792
+	bl	FlashReadIdbDataRaw
+	ldr	r0, .L1087+88
+	strb	r9, [r5, #1]
+	bl	FlashTimingCfg
+	ldr	r6, [r5, #1784]
+	ldrb	r3, [r6, #12]	@ zero_extendqisi2
+	strh	r3, [r4, #8]	@ movhi
+	ldrb	r3, [r6, #7]	@ zero_extendqisi2
+	str	r3, [r5, #3880]
+	ldr	r3, [r8]	@ unaligned
+	ldrh	r8, [r6, #14]
+	str	r3, [r5, #3876]
+	ldrb	r3, [r5, #1612]	@ zero_extendqisi2
+	strh	r3, [r4, #10]	@ movhi
+	ldrb	r3, [r6, #13]	@ zero_extendqisi2
+	strh	r8, [r4, #14]	@ movhi
+	strh	r3, [r4, #12]	@ movhi
+	ldrh	r3, [r6, #10]
+	strh	r3, [r4, #16]	@ movhi
+	ldrb	r1, [r6, #12]	@ zero_extendqisi2
+	ldrh	r0, [r6, #10]
+	bl	__aeabi_idiv
+	strh	r0, [r4, #18]	@ movhi
+	ldrb	r2, [r6, #9]	@ zero_extendqisi2
+	strh	r2, [r4, #20]	@ movhi
+	ldrb	r1, [r6, #9]	@ zero_extendqisi2
+	ldrh	r3, [r6, #10]
+	smulbb	r3, r1, r3
+	mov	r1, #512
+	strh	r1, [r4, #24]	@ movhi
+	ldrb	r1, [r5, #1]	@ zero_extendqisi2
+	strh	r1, [r4, #26]	@ movhi
+	uxth	r3, r3
+	ldrb	r1, [r5]	@ zero_extendqisi2
+	strh	r3, [r4, #22]	@ movhi
+	cmp	r1, #1
+	bne	.L1042
+	mov	r3, r3, asl #1
+	mov	r1, r8, lsr #1
+	mov	r2, r2, asl #1
+	strh	r3, [r4, #22]	@ movhi
+	strb	r9, [r7, #1]
+	mov	r3, #8
+	strh	r1, [r4, #14]	@ movhi
+	strh	r2, [r4, #20]	@ movhi
+	strh	r3, [r4, #26]	@ movhi
+.L1042:
+	ldrb	r0, [r6, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	bl	ftl_flash_suspend
+	mov	r0, #0
+	b	.L1057
+.L1044:
+	mvn	r0, #1
+.L1057:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1088:
+	.align	2
+.L1087:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	IDByte
+	.word	.LANCHOR0+12
+	.word	.LC13
+	.word	.LANCHOR0+3916
+	.word	1446522928
+	.word	.LANCHOR1+256
+	.word	.LANCHOR1
+	.word	.LANCHOR1+3252
+	.word	.LANCHOR1+2912
+	.word	.LANCHOR0+44
+	.word	.LC14
+	.word	g_retryMode
+	.word	g_maxRetryCount
+	.word	g_maxRegNum
+	.word	HynixReadRetrial
+	.word	.LANCHOR0+3944
+	.word	MicronReadRetrial
+	.word	ToshibaReadRetrial
+	.word	SamsungReadRetrial
+	.word	.LANCHOR0+3876
+	.word	150000
+	.fnend
+	.size	FlashInit, .-FlashInit
+	.align	2
+	.global	FlashPageProgMsbFFData
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r2
+	ldr	r3, .L1106
+	mov	r8, r0
+	mov	r9, r1
+	ldr	r2, [r3, #1784]
+	mov	r6, r3
+	ldrb	r7, [r2, #19]	@ zero_extendqisi2
+	ldrb	r2, [r3, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1090
+	ldr	r3, .L1106+4
+	ldr	r3, [r3, #-3404]
+	cmp	r3, #0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1090:
+	sub	r3, r7, #5
+	cmp	r7, #68
+	cmpne	r3, #3
+	bls	.L1091
+	sub	r3, r7, #19
+	tst	r3, #239
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1091:
+	ldr	r10, .L1106+8
+	movw	fp, #65535
+	ldr	r5, .L1106+4
+.L1093:
+	ldr	r3, [r6, #1784]
+	ldrh	r3, [r3, #10]
+	cmp	r3, r4
+	bls	.L1105
+	mov	r3, r4, asl #1
+	ldrh	r3, [r10, r3]
+	cmp	r3, fp
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	cmp	r7, #8
+	mov	r2, #32768
+	ldr	r0, [r5, #-3308]
+	moveq	r1, #0
+	movne	r1, #255
+	bl	ftl_memset
+	ldr	r2, [r5, #-3308]
+	add	r1, r4, r9
+	add	r4, r4, #1
+	mov	r0, r8
+	mov	r3, r2
+	uxth	r4, r4
+	bl	FlashProgPage
+	b	.L1093
+.L1105:
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1107:
+	.align	2
+.L1106:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+588
+	.fnend
+	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
+	.align	2
+	.global	FlashReadSlc2KPages
+	.type	FlashReadSlc2KPages, %function
+FlashReadSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1160
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r9, .L1160+4
+	mov	r4, r0
+	str	r2, [sp, #16]
+	mov	r8, #0
+	ldr	r2, [r3]
+	mov	r10, r9
+	str	r1, [sp, #12]
+	str	r3, [sp, #20]
+	str	r2, [sp, #36]
+	ldr	r2, .L1160+8
+	ldrb	r2, [r2, #265]	@ zero_extendqisi2
+	str	r2, [sp, #8]
+.L1109:
+	ldr	r3, [sp, #12]
+	cmp	r8, r3
+	beq	.L1159
+	ldr	r3, [sp, #12]
+	add	r2, sp, #32
+	mov	r0, r4
+	ldr	r1, [sp, #16]
+	rsb	r3, r8, r3
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #28
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r9, #1612]	@ zero_extendqisi2
+	ldr	r3, [sp, #28]
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r4]
+	bcs	.L1111
+	add	r3, r9, r3
+	mov	r7, #0
+	ldrb	r5, [r3, #1616]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	bl	NandcFlashCs
+.L1112:
+	ldr	r1, [sp, #32]
+	mov	r0, r5
+	bl	FlashReadCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, #12]
+	mov	r0, r5
+	mov	r1, #0
+	str	r3, [sp]
+	ldr	r2, [sp, #8]
+	ldr	r3, [r4, #8]
+	bl	NandcXferData
+	ldr	r3, .L1160+12
+	ldrb	r3, [r3, #-3292]	@ zero_extendqisi2
+	cmp	r3, #0
+	mov	r6, r0
+	beq	.L1113
+	mov	r0, r5
+	bl	flash_read_ecc
+	cmp	r0, #5
+	movhi	r6, #256
+.L1113:
+	cmp	r7, #9
+	cmnls	r6, #1
+	moveq	r3, #1
+	movne	r3, #0
+	addeq	r7, r7, #1
+	beq	.L1112
+.L1114:
+	cmp	r7, #0
+	mov	r7, r3
+	movne	r6, #256
+.L1116:
+	ldr	r3, [sp, #32]
+	mov	r0, r5
+	ldr	r1, [r10, #4]
+	add	r1, r1, r3
+	bl	FlashReadCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, #8]
+	ldr	r2, [r4, #12]
+	mov	r0, r5
+	cmp	r3, #0
+	mov	r1, #0
+	addne	r3, r3, #2048
+	cmp	r2, #0
+	addne	r2, r2, #8
+	str	r2, [sp]
+	ldr	r2, [sp, #8]
+	bl	NandcXferData
+	ldr	r3, .L1160+12
+	ldrb	r2, [r3, #-3292]	@ zero_extendqisi2
+	cmp	r2, #0
+	mov	fp, r0
+	beq	.L1119
+	mov	r0, r5
+	bl	flash_read_ecc
+	cmp	r0, #5
+	movhi	fp, #256
+.L1119:
+	cmp	r7, #9
+	cmnls	fp, #1
+	addeq	r7, r7, #1
+	beq	.L1116
+.L1120:
+	cmp	r7, #0
+	mov	r0, r5
+	movne	fp, #256
+	bl	NandcFlashDeCs
+	ldrb	r2, [r10, #3905]	@ zero_extendqisi2
+	cmp	fp, r6
+	movcs	r3, fp
+	movcc	r3, r6
+	add	r2, r2, r2, asl #1
+	cmp	r3, r2, asr #2
+	bls	.L1122
+	cmn	r3, #1
+	movne	r3, #256
+.L1122:
+	cmp	r3, #256
+	cmnne	r3, #1
+	movne	r3, #0
+	str	r3, [r4]
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L1125
+	ldr	r2, [r3, #12]
+	cmn	r2, #1
+	bne	.L1125
+	ldr	r2, [r3, #8]
+	cmn	r2, #1
+	bne	.L1125
+	ldr	r3, [r3]
+	cmn	r3, #1
+	strne	r2, [r4]
+.L1125:
+	ldr	r3, [r4]
+	cmn	r3, #1
+	bne	.L1111
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1160+16
+	ldrb	r2, [r10, #3905]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [r4, #8]
+	cmp	r1, #0
+	beq	.L1127
+	ldr	r0, .L1160+20
+	mov	r2, #4
+	mov	r3, #8
+	bl	rknand_print_hex
+.L1127:
+	ldr	r1, [r4, #12]
+	cmp	r1, #0
+	beq	.L1111
+	mov	r2, #4
+	ldr	r0, .L1160+24
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1111:
+	add	r8, r8, #1
+	add	r4, r4, #36
+	b	.L1109
+.L1159:
+	ldr	r3, [sp, #20]
+	mov	r0, #0
+	ldr	r2, [sp, #36]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1130
+	bl	__stack_chk_fail
+.L1130:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1161:
+	.align	2
+.L1160:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LC15
+	.word	.LC16
+	.word	.LC17
+	.fnend
+	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
+	.align	2
+	.global	FlashReadPages
+	.type	FlashReadPages, %function
+FlashReadPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1238
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #60
+	sub	sp, sp, #60
+	ldr	r3, [r3]
+	ldr	r6, .L1238+4
+	str	r1, [sp, #20]
+	str	r3, [sp, #52]
+	ldr	r3, .L1238+8
+	ldrb	r8, [r6]	@ zero_extendqisi2
+	str	r2, [sp, #24]
+	ldrb	r3, [r3, #265]	@ zero_extendqisi2
+	cmp	r8, #0
+	str	r3, [sp, #16]
+	ldrb	r3, [r6, #8]	@ zero_extendqisi2
+	str	r3, [sp, #28]
+	beq	.L1200
+	bl	FlashReadSlc2KPages
+	b	.L1164
+.L1200:
+	ldr	r10, .L1238+12
+	mov	r9, r0
+	mov	fp, r8
+.L1163:
+	ldr	r3, [sp, #20]
+	cmp	fp, r3
+	bcs	.L1236
+	mov	r3, #36
+	add	r2, sp, #48
+	mul	r3, r3, fp
+	ldr	r1, [sp, #24]
+	add	r7, r9, r3
+	str	r3, [sp, #8]
+	mov	r0, r7
+	ldr	r3, [r7, #4]
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #20]
+	rsb	r3, fp, r3
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #44
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r6, #1612]	@ zero_extendqisi2
+	ldr	r3, [sp, #44]
+	mov	r5, r0
+	cmp	r3, r2
+	ldrcs	r2, [sp, #8]
+	mvncs	r3, #0
+	strcs	r3, [r9, r2]
+	bcs	.L1166
+	add	r3, r6, r3
+	ldrb	r4, [r3, #1616]	@ zero_extendqisi2
+	ldrb	r3, [r10, #-3291]	@ zero_extendqisi2
+	cmp	r3, #0
+	mov	r0, r4
+	moveq	r5, #0
+	bl	NandcWaitFlashReady
+	ldr	r3, .L1238+4
+	ldr	r3, [r3, #1784]
+	ldrb	r2, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r2, #1
+	cmp	r3, #7
+	bhi	.L1168
+	sub	r2, r2, #7
+	add	r1, r6, r4
+	cmp	r2, #1
+	add	r2, r10, r4
+	ldrb	r3, [r1, #3928]	@ zero_extendqisi2
+	ldrb	r2, [r2, #-3416]	@ zero_extendqisi2
+	ldrlsb	r3, [r1, #3936]	@ zero_extendqisi2
+	cmp	r2, r3
+	beq	.L1168
+	mov	r0, r4
+	ldrb	r1, [r6, #3917]	@ zero_extendqisi2
+	ldr	r2, .L1238+16
+	bl	HynixSetRRPara
+.L1168:
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r0, r4
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #24]
+	mov	r3, r3, lsr #31
+	cmp	r2, #1
+	orreq	r3, r3, #1
+	str	r3, [sp, #12]
+	cmp	r3, #0
+	beq	.L1170
+	ldrb	r3, [r6, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1170
+	bl	flash_enter_slc_mode
+	b	.L1171
+.L1170:
+	bl	flash_exit_slc_mode
+.L1171:
+	ldr	r1, [sp, #48]
+	cmn	r1, #1
+	cmpeq	r4, #255
+	moveq	r3, #0
+	movne	r3, #1
+	moveq	r5, r3
+	beq	.L1173
+	cmp	r5, #0
+	beq	.L1174
+	ldr	r2, [r6, #4]
+	mov	r0, r4
+	add	r2, r1, r2
+	bl	FlashReadDpCmd
+	b	.L1175
+.L1174:
+	mov	r0, r4
+	bl	FlashReadCmd
+.L1175:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	cmp	r5, #0
+	beq	.L1173
+	mov	r0, r4
+	ldr	r1, [sp, #48]
+	bl	FlashReadDpDataOutCmd
+.L1173:
+	ldr	r3, [r7, #12]
+	mov	r0, r4
+	ldr	r2, [sp, #16]
+	mov	r1, #0
+	str	r3, [sp]
+	ldr	r3, [r7, #8]
+	bl	NandcXferData
+	ldrb	r2, [r6, #8]	@ zero_extendqisi2
+	adds	r2, r2, #0
+	movne	r2, #1
+	cmn	r0, #1
+	mov	ip, r0
+	movne	r2, #0
+	cmp	r2, #0
+	movne	r3, #0
+	strneb	r3, [r6, #8]
+	movne	r5, r3
+	bne	.L1171
+.L1176:
+	cmp	r5, #0
+	beq	.L1177
+	ldr	r3, .L1238+4
+	str	r0, [sp, #32]
+	mov	r0, r4
+	str	r2, [sp, #36]
+	ldr	r1, [r3, #4]
+	ldr	r3, [sp, #48]
+	add	r1, r1, r3
+	bl	FlashReadDpDataOutCmd
+	mov	r0, r4
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #36]
+	add	r3, r3, #36
+	add	r3, r9, r3
+	ldr	r1, [r3, #12]
+	str	r1, [sp]
+	mov	r1, r2
+	ldr	r3, [r3, #8]
+	ldr	r2, [sp, #16]
+	bl	NandcXferData
+	cmn	r0, #1
+	ldr	ip, [sp, #32]
+	mov	r8, r0
+	moveq	r5, #0
+.L1177:
+	mov	r0, r4
+	str	ip, [sp, #32]
+	bl	NandcFlashDeCs
+	ldr	ip, [sp, #32]
+	ldrb	r3, [sp, #28]	@ zero_extendqisi2
+	cmn	ip, #1
+	strb	r3, [r6, #8]
+	bne	.L1184
+	ldrb	r3, [r10, #-3400]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1179
+.L1183:
+	ldr	r5, [r10, #-3328]
+	cmp	r5, #0
+	bne	.L1180
+	b	.L1237
+.L1179:
+	ldr	r3, [r6, #3840]
+	mov	r0, r4
+	ldr	r1, [sp, #48]
+	ldr	r5, [r3, #304]
+	mov	r3, #1
+	str	r3, [sp]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashDdrTunningRead
+	cmn	r0, #1
+	mov	ip, r0
+	beq	.L1182
+	ldrb	r3, [r6, #3905]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1203
+.L1182:
+	ubfx	r0, r5, #8, #8
+	str	ip, [sp, #32]
+	bl	NandcSetDdrPara
+	ldr	ip, [sp, #32]
+	cmn	ip, #1
+	beq	.L1183
+	b	.L1203
+.L1180:
+	mov	r0, r4
+	ldr	r1, [sp, #48]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	blx	r5
+	cmn	r0, #1
+	mov	ip, r0
+	bne	.L1205
+	ldr	r3, [r6, #1784]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	cmp	r3, #7
+	bhi	.L1186
+	mov	r0, r4
+	ldrb	r1, [r6, #3917]	@ zero_extendqisi2
+	ldr	r2, .L1238+16
+	mov	r3, #0
+	bl	HynixSetRRPara
+.L1186:
+	ldr	r1, [sp, #48]
+	mov	r0, r4
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashReadRawPage
+	ldr	r1, [r7, #4]
+	ldrb	r2, [r6, #3905]	@ zero_extendqisi2
+	mov	ip, r0
+	ldr	r0, .L1238+20
+	mov	r3, ip
+	str	ip, [sp, #32]
+	bl	printk
+	ldr	ip, [sp, #32]
+	cmn	ip, #1
+	bne	.L1205
+	ldrb	r5, [r6, #3904]	@ zero_extendqisi2
+	cmp	r5, #0
+	beq	.L1185
+	ldr	r3, [sp, #12]
+	mov	r0, r4
+	cmp	r3, #0
+	beq	.L1187
+	bl	flash_enter_slc_mode
+	b	.L1188
+.L1187:
+	bl	flash_exit_slc_mode
+.L1188:
+	ldr	ip, [r10, #-3328]
+	mov	r0, r4
+	ldr	r1, [sp, #48]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	blx	ip
+	mov	ip, r0
+	b	.L1205
+.L1237:
+	mov	r0, r4
+	ldr	r1, [sp, #48]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashReadRawPage
+	mov	ip, r0
+	b	.L1185
+.L1203:
+	mov	r5, #0
+.L1184:
+	ldrb	r3, [r6, #3905]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	ip, r3, asr #2
+	bls	.L1185
+	ldr	r3, [r10, #-3328]
+	cmp	r3, #0
+	moveq	ip, #256
+	b	.L1185
+.L1205:
+	mov	r5, #0
+.L1185:
+	cmp	ip, #256
+	cmnne	ip, #1
+	ldreq	r3, [sp, #8]
+	movne	r3, #0
+	ldrne	r2, [sp, #8]
+	streq	ip, [r9, r3]
+	strne	r3, [r9, r2]
+	ldr	r3, [sp, #8]
+	ldr	r3, [r9, r3]
+	cmn	r3, #1
+	bne	.L1192
+	ldr	r1, [r7, #4]
+	ldr	r0, .L1238+24
+	ldrb	r2, [r6, #3905]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [r7, #12]
+	cmp	r1, #0
+	beq	.L1192
+	mov	r2, #4
+	ldr	r0, .L1238+28
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1192:
+	cmp	r5, #0
+	beq	.L1194
+	ldrb	r3, [r6, #3905]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r8, r3, asr #2
+	bls	.L1195
+	ldr	r3, [r10, #-3328]
+	cmp	r3, #0
+	moveq	r8, #256
+.L1195:
+	ldr	r3, [sp, #8]
+	cmp	r8, #256
+	cmnne	r8, #1
+	add	r3, r3, #36
+	movne	r2, #0
+	streq	r8, [r9, r3]
+	strne	r2, [r9, r3]
+.L1194:
+	ldr	r3, [sp, #12]
+	add	fp, fp, r5
+	cmp	r3, #0
+	beq	.L1166
+	ldrb	r3, [r6, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1166
+	mov	r0, r4
+	bl	flash_exit_slc_mode
+.L1166:
+	add	fp, fp, #1
+	b	.L1163
+.L1236:
+	mov	r0, #0
+.L1164:
+	ldr	r3, .L1238
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1199
+	bl	__stack_chk_fail
+.L1199:
+	add	sp, sp, #60
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1239:
+	.align	2
+.L1238:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3920
+	.word	.LC18
+	.word	.LC15
+	.word	.LC17
+	.fnend
+	.size	FlashReadPages, .-FlashReadPages
+	.align	2
+	.global	FlashLoadFactorBbt
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #60
+	sub	sp, sp, #60
+	ldr	r4, .L1254
+	mov	r1, #0
+	ldr	r5, .L1254+4
+	mov	r2, #16
+	ldr	r0, .L1254+8
+	mvn	r10, #0
+	ldr	r3, [r4]
+	ldrh	ip, [r5, #14]
+	ldr	r9, .L1254+12
+	str	r3, [sp, #52]
+	ldrh	r3, [r5, #12]
+	mov	r5, #0
+	ldr	fp, .L1254+16
+	mov	r8, r5
+	smulbb	r3, r3, ip
+	uxth	r6, r3
+	bl	ftl_memset
+	ldr	r3, [r9, #-3304]
+	str	r5, [sp, #24]
+	str	r3, [sp, #28]
+	str	r4, [sp, #4]
+.L1241:
+	ldrb	r3, [fp, #1612]	@ zero_extendqisi2
+	uxtb	r7, r5
+	cmp	r3, r7
+	bls	.L1253
+	mul	ip, r6, r7
+	sub	r4, r6, #1
+	sub	r3, r6, #12
+	uxth	r4, r4
+.L1242:
+	cmp	r4, r3
+	ble	.L1244
+	add	r2, ip, r4
+	mov	r1, #1
+	add	r0, sp, #16
+	str	r3, [sp, #12]
+	mov	r2, r2, asl #10
+	str	r2, [sp, #20]
+	mov	r2, r1
+	str	ip, [sp, #8]
+	bl	FlashReadPages
+	ldr	r2, [sp, #16]
+	ldr	ip, [sp, #8]
+	cmn	r2, #1
+	ldr	r3, [sp, #12]
+	beq	.L1243
+	ldr	r2, [r9, #-3304]
+	ldrh	r1, [r2]
+	movw	r2, #61664
+	cmp	r1, r2
+	bne	.L1243
+	mov	r1, r7
+	ldr	r0, .L1254+20
+	mov	r2, r4
+	mov	r7, r7, asl #1
+	bl	printk
+	ldr	r3, .L1254+8
+	add	r8, r8, #1
+	strh	r4, [r3, r7]	@ movhi
+	uxth	r8, r8
+	b	.L1244
+.L1243:
+	sub	r4, r4, #1
+	uxth	r4, r4
+	b	.L1242
+.L1244:
+	ldr	r3, .L1254+16
+	add	r5, r5, #1
+	ldrb	r3, [r3, #1612]	@ zero_extendqisi2
+	cmp	r3, r8
+	moveq	r10, #0
+	b	.L1241
+.L1253:
+	ldr	r3, [sp, #4]
+	mov	r0, r10
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1248
+	bl	__stack_chk_fail
+.L1248:
+	add	sp, sp, #60
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1255:
+	.align	2
+.L1254:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0+3876
+	.word	.LANCHOR2-3288
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC19
+	.fnend
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.align	2
+	.global	FlashReadFacBbtData
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r9, .L1272
+	mov	r10, r2
+	ldr	r8, .L1272+4
+	mov	r5, r0
+	mov	r7, r1
+	ldr	r3, [r9]
+	str	r3, [sp, #36]
+	ldr	r3, .L1272+8
+	ldrh	r2, [r3, #12]
+	ldrh	r4, [r3, #14]
+	ldr	r3, [r8, #-3408]
+	smulbb	r4, r2, r4
+	str	r3, [sp, #8]
+	ldr	r3, [r8, #-3304]
+	str	r3, [sp, #12]
+	uxth	r0, r4
+	sub	r6, r0, #1
+	sub	r4, r0, #16
+	mul	fp, r0, r1
+	uxth	r6, r6
+.L1257:
+	cmp	r6, r4
+	ble	.L1271
+	mov	r1, #1
+	add	r3, r6, fp
+	mov	r0, sp
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [sp]
+	cmn	r3, #1
+	beq	.L1258
+	ldr	r3, [r8, #-3304]
+	ldrh	r2, [r3]
+	movw	r3, #61664
+	cmp	r2, r3
+	bne	.L1258
+	cmp	r5, #0
+	moveq	r0, r5
+	beq	.L1259
+	cmp	r7, #0
+	ldreq	ip, .L1272+4
+	moveq	lr, #1
+	beq	.L1260
+.L1262:
+	ldr	r1, [r8, #-3408]
+	mov	r2, r10
+	mov	r0, r5
+	bl	ftl_memcpy
+	mov	r2, #4
+	ldr	r0, .L1272+12
+	mov	r1, r5
+	mov	r3, r2
+	bl	rknand_print_hex
+	mov	r0, #0
+	b	.L1259
+.L1260:
+	ldr	r3, [r8, #-3316]
+	uxth	r4, r7
+	add	r7, r7, #1
+	cmp	r4, r3
+	bcs	.L1262
+	ldr	r2, [ip, #-3408]
+	mov	r1, r4, lsr #5
+	and	r0, r4, #31
+	ldr	r3, [r2, r1, asl #2]
+	orr	r0, r3, lr, asl r0
+	str	r0, [r2, r1, asl #2]
+	b	.L1260
+.L1258:
+	sub	r6, r6, #1
+	uxth	r6, r6
+	b	.L1257
+.L1271:
+	mvn	r0, #0
+.L1259:
+	ldr	r2, [sp, #36]
+	ldr	r3, [r9]
+	cmp	r2, r3
+	beq	.L1264
+	bl	__stack_chk_fail
+.L1264:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1273:
+	.align	2
+.L1272:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3876
+	.word	.LC20
+	.fnend
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1285
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	ldr	r3, [r3, #1784]
+	ldr	r6, .L1285+4
+	ldrb	r4, [r3, #13]	@ zero_extendqisi2
+	ldrh	r3, [r3, #14]
+	ldr	r0, [r6, #-3308]
+	smulbb	r4, r4, r3
+	uxth	r4, r4
+	add	r2, r4, #7
+	mov	r2, r2, asr #3
+	bl	FlashReadFacBbtData
+	cmn	r0, #1
+	bne	.L1275
+.L1279:
+	mov	r3, #0
+	b	.L1276
+.L1275:
+	mov	lr, r4, lsr #4
+	mov	ip, #0
+	sub	r4, r4, #1
+	mov	r3, ip
+	mov	r7, #1
+.L1277:
+	uxth	r0, ip
+	cmp	r0, r4
+	bge	.L1276
+	ldr	r8, [r6, #-3308]
+	mov	r1, r0, lsr #5
+	and	r2, r0, #31
+	add	ip, ip, #1
+	ldr	r1, [r8, r1, asl #2]
+	ands	r2, r1, r7, asl r2
+	addne	r2, r3, #1
+	movne	r3, r3, asl #1
+	strneh	r0, [r5, r3]	@ movhi
+	uxthne	r3, r2
+	cmp	r3, lr
+	bcc	.L1277
+	b	.L1279
+.L1276:
+	mov	r3, r3, asl #1
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r5, r3]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1286:
+	.align	2
+.L1285:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	FlashProgSlc2KPages
+	.type	FlashProgSlc2KPages, %function
+FlashProgSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #68
+	sub	sp, sp, #68
+	mov	r9, r2
+	ldr	r8, .L1319
+	str	r3, [sp, #8]
+	mov	r6, r1
+	ldr	r3, .L1319+4
+	mov	r4, r0
+	mov	fp, r0
+	mov	r7, #0
+	ldr	r2, [r3]
+	str	r3, [sp, #12]
+	str	r2, [sp, #60]
+	ldr	r2, .L1319+8
+	ldrb	r10, [r2, #265]	@ zero_extendqisi2
+.L1288:
+	cmp	r7, r6
+	beq	.L1318
+	rsb	r3, r7, r6
+	add	r2, sp, #16
+	mov	r0, fp
+	mov	r1, r9
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #20
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r8, #1612]	@ zero_extendqisi2
+	ldr	r3, [sp, #20]
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [fp]
+	bcs	.L1290
+	add	r3, r8, r3
+	ldrb	r5, [r3, #1616]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	bl	NandcFlashCs
+	mov	r0, r5
+	ldr	r1, [sp, #16]
+	bl	FlashProgFirstCmd
+	ldr	r3, [fp, #12]
+	mov	r2, r10
+	mov	r1, #1
+	mov	r0, r5
+	str	r3, [sp]
+	ldr	r3, [fp, #8]
+	bl	NandcXferData
+	mov	r0, r5
+	ldr	r1, [sp, #16]
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	ldr	r1, [sp, #16]
+	bl	FlashReadStatus
+	ldr	r3, [sp, #16]
+	sbfx	r0, r0, #0, #1
+	str	r0, [fp]
+	mov	r0, r5
+	ldr	r1, [r8, #4]
+	add	r1, r1, r3
+	bl	FlashProgFirstCmd
+	ldr	r3, [fp, #8]
+	ldr	r2, [fp, #12]
+	mov	r1, #1
+	cmp	r3, #0
+	mov	r0, r5
+	addne	r3, r3, #2048
+	cmp	r2, #0
+	addne	r2, r2, #8
+	str	r2, [sp]
+	mov	r2, r10
+	bl	NandcXferData
+	ldr	r1, [r8, #4]
+	mov	r0, r5
+	ldr	r3, [sp, #16]
+	add	r1, r1, r3
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	ldr	r1, [sp, #16]
+	bl	FlashReadStatus
+	tst	r0, #1
+	mov	r0, r5
+	mvnne	r3, #0
+	strne	r3, [fp]
+	bl	NandcFlashDeCs
+.L1290:
+	add	r7, r7, #1
+	add	fp, fp, #36
+	b	.L1288
+.L1318:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	bne	.L1306
+.L1302:
+	ldr	r3, [sp, #12]
+	mov	r0, #0
+	ldr	r2, [sp, #60]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1303
+	bl	__stack_chk_fail
+.L1306:
+	ldr	r5, .L1319+12
+	mov	r7, #0
+	mov	r8, r5
+.L1295:
+	cmp	r7, r6
+	beq	.L1302
+	ldr	r3, [r4]
+	cmn	r3, #1
+	bne	.L1296
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1319+16
+	bl	printk
+	b	.L1297
+.L1296:
+	rsb	r3, r7, r6
+	mov	r1, r9
+	add	r2, sp, #16
+	mov	r0, r4
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #20
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r5, #-3300]
+	mov	r3, #0
+	mov	lr, r4
+	str	r3, [r2]
+	ldr	r2, [r5, #-3296]
+	str	r3, [r2]
+	ldmia	lr!, {r0, r1, r2, r3}
+	add	ip, sp, #24
+	stmia	ip!, {r0, r1, r2, r3}
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	add	r0, sp, #24
+	ldr	r3, [lr]
+	mov	r1, #1
+	mov	r2, r9
+	str	r3, [ip]
+	ldr	r3, [r5, #-3300]
+	str	r3, [sp, #32]
+	ldr	r3, [r5, #-3296]
+	str	r3, [sp, #36]
+	bl	FlashReadPages
+	ldr	r10, [sp, #24]
+	cmn	r10, #1
+	bne	.L1298
+	ldr	r0, .L1319+20
+	ldr	r1, [r4, #4]
+	bl	printk
+	str	r10, [r4]
+.L1298:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L1299
+	ldr	r2, [r3]
+	ldr	r3, [r8, #-3296]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1299
+	ldr	r0, .L1319+24
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L1299:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L1297
+	ldr	r2, [r3]
+	ldr	r3, [r8, #-3300]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1297
+	ldr	r0, .L1319+28
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L1297:
+	add	r7, r7, #1
+	add	r4, r4, #36
+	b	.L1295
+.L1303:
+	add	sp, sp, #68
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1320:
+	.align	2
+.L1319:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.fnend
+	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
+	.align	2
+	.global	FlashProgPages
+	.type	FlashProgPages, %function
+FlashProgPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L1379
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #76
+	sub	sp, sp, #76
+	ldr	ip, [ip]
+	mov	r4, r0
+	ldr	r6, .L1379+4
+	mov	r9, r2
+	str	r1, [sp, #8]
+	str	ip, [sp, #68]
+	ldr	ip, [r6, #1784]
+	ldrb	r8, [r6]	@ zero_extendqisi2
+	str	r3, [sp, #20]
+	ldrb	ip, [ip, #19]	@ zero_extendqisi2
+	cmp	r8, #0
+	str	ip, [sp, #16]
+	ldr	ip, .L1379+8
+	ldrb	ip, [ip, #265]	@ zero_extendqisi2
+	str	ip, [sp, #12]
+	beq	.L1322
+	bl	FlashProgSlc2KPages
+	b	.L1323
+.L1336:
+	mov	r7, #36
+	ldr	r3, [sp, #8]
+	mul	r7, r7, r8
+	rsb	r3, r8, r3
+	add	r2, sp, #24
+	mov	r1, r9
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	fp, r4, r7
+	add	r3, sp, #28
+	mov	r0, fp
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r6, #1612]	@ zero_extendqisi2
+	ldr	r3, [sp, #28]
+	mov	r10, r0
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r4, r7]
+	bcc	.L1376
+.L1325:
+	add	r8, r8, #1
+.L1322:
+	ldr	r3, [sp, #8]
+	ldr	r5, .L1379+4
+	cmp	r8, r3
+	bcc	.L1336
+	b	.L1377
+.L1376:
+	ldr	r1, .L1379+12
+	add	r3, r6, r3, asl #4
+	ldr	r3, [r3, #1664]
+	ldrb	r1, [r1, #-3340]	@ zero_extendqisi2
+	cmp	r1, #0
+	moveq	r10, #0
+	cmp	r3, #0
+	beq	.L1327
+	cmp	r2, #1
+	bne	.L1328
+	ldr	r0, [r6, #3840]
+	bl	NandcIqrWaitFlashReady
+.L1328:
+	ldrb	r0, [sp, #28]	@ zero_extendqisi2
+	bl	FlashWaitCmdDone
+.L1327:
+	ldr	r3, [sp, #28]
+	mov	r1, #0
+	cmp	r10, #0
+	add	r2, r6, r3, asl #4
+	str	r1, [r2, #1668]
+	ldr	r1, [sp, #24]
+	str	fp, [r2, #1664]
+	str	r1, [r2, #1660]
+	addne	r1, r7, #36
+	addne	r1, r4, r1
+	strne	r1, [r2, #1668]
+	add	r2, r6, r3
+	add	r3, r6, r3, asl #4
+	ldrb	r5, [r2, #1616]	@ zero_extendqisi2
+	strb	r5, [r3, #1656]
+	mov	r0, r5
+	ldrb	r3, [r6, #1612]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L1330
+	bl	NandcWaitFlashReady
+	b	.L1331
+.L1330:
+	bl	NandcFlashCs
+	mov	r0, r5
+	ldr	r3, [sp, #28]
+	ldr	r1, [sp, #24]
+	add	r3, r6, r3, asl #2
+	ldr	r2, [r3, #1624]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r5
+	bl	NandcFlashDeCs
+.L1331:
+	ldr	r3, [sp, #16]
+	sub	r3, r3, #1
+	cmp	r3, #7
+	bhi	.L1332
+	ldr	r3, .L1379+12
+	add	r3, r3, r5
+	ldrb	r3, [r3, #-3416]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1332
+	mov	r0, r5
+	ldrb	r1, [r6, #3917]	@ zero_extendqisi2
+	ldr	r2, .L1379+16
+	mov	r3, #0
+	bl	HynixSetRRPara
+.L1332:
+	mov	r0, r5
+	bl	NandcFlashCs
+	cmp	r9, #1
+	mov	r0, r5
+	bne	.L1333
+	ldrb	r3, [r6, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1333
+	bl	flash_enter_slc_mode
+	b	.L1334
+.L1333:
+	bl	flash_exit_slc_mode
+.L1334:
+	mov	r0, r5
+	ldr	r1, [sp, #24]
+	bl	FlashProgFirstCmd
+	ldr	r3, [fp, #12]
+	mov	r0, r5
+	mov	r1, #1
+	str	r3, [sp]
+	ldr	r2, [sp, #12]
+	ldr	r3, [fp, #8]
+	bl	NandcXferData
+	cmp	r10, #0
+	beq	.L1335
+	mov	r0, r5
+	ldr	r1, [sp, #24]
+	bl	FlashProgDpFirstCmd
+	mov	r0, r5
+	add	r7, r7, #36
+	add	r7, r4, r7
+	ldr	r3, [sp, #28]
+	ldr	r1, [sp, #24]
+	add	r3, r6, r3, asl #2
+	ldr	r2, [r3, #1624]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	ldr	r1, [r6, #4]
+	mov	r0, r5
+	ldr	r3, [sp, #24]
+	add	r1, r1, r3
+	bl	FlashProgDpSecondCmd
+	ldr	r3, [r7, #12]
+	mov	r0, r5
+	mov	r1, #1
+	str	r3, [sp]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r7, #8]
+	bl	NandcXferData
+.L1335:
+	mov	r0, r5
+	ldr	r1, [sp, #24]
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcFlashDeCs
+	add	r8, r8, r10
+	b	.L1325
+.L1377:
+	ldr	r0, [r5, #3840]
+	mov	r6, #0
+	bl	NandcIqrWaitFlashReady
+	ldr	r8, .L1379+20
+	mov	r7, r5
+.L1337:
+	ldrb	r3, [r5, #1612]	@ zero_extendqisi2
+	cmp	r6, r3
+	bcs	.L1378
+	uxtb	r0, r6
+	bl	FlashWaitCmdDone
+	cmp	r9, #1
+	bne	.L1338
+	ldrb	r3, [r7, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1338
+	ldrb	r0, [r8, r6, asl #4]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L1338:
+	add	r6, r6, #1
+	b	.L1337
+.L1378:
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	bne	.L1340
+.L1348:
+	mov	r0, #0
+	b	.L1323
+.L1340:
+	ldr	r5, .L1379+12
+	mov	r6, #0
+	mov	r7, r5
+.L1341:
+	ldr	r3, [sp, #8]
+	cmp	r6, r3
+	beq	.L1348
+	ldr	r3, [r4]
+	cmn	r3, #1
+	bne	.L1342
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1379+24
+	bl	printk
+	b	.L1343
+.L1342:
+	ldr	r3, [sp, #8]
+	mov	r1, r9
+	add	r2, sp, #24
+	mov	r0, r4
+	rsb	r3, r6, r3
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #28
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r5, #-3300]
+	mov	r3, #0
+	mov	lr, r4
+	str	r3, [r2]
+	ldr	r2, [r5, #-3296]
+	str	r3, [r2]
+	ldmia	lr!, {r0, r1, r2, r3}
+	add	ip, sp, #32
+	stmia	ip!, {r0, r1, r2, r3}
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	add	r0, sp, #32
+	ldr	r3, [lr]
+	mov	r1, #1
+	mov	r2, r9
+	str	r3, [ip]
+	ldr	r3, [r5, #-3300]
+	str	r3, [sp, #40]
+	ldr	r3, [r5, #-3296]
+	str	r3, [sp, #44]
+	bl	FlashReadPages
+	ldr	r8, [sp, #32]
+	cmn	r8, #1
+	bne	.L1344
+	ldr	r0, .L1379+28
+	ldr	r1, [r4, #4]
+	bl	printk
+	str	r8, [r4]
+.L1344:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L1345
+	ldr	r2, [r3]
+	ldr	r3, [r7, #-3296]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1345
+	ldr	r0, .L1379+32
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L1345:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L1343
+	ldr	r2, [r3]
+	ldr	r3, [r7, #-3300]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1343
+	ldr	r0, .L1379+36
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L1343:
+	add	r6, r6, #1
+	add	r4, r4, #36
+	b	.L1341
+.L1323:
+	ldr	r3, .L1379
+	ldr	r2, [sp, #68]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1349
+	bl	__stack_chk_fail
+.L1349:
+	add	sp, sp, #76
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1380:
+	.align	2
+.L1379:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3920
+	.word	.LANCHOR0+1656
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.fnend
+	.size	FlashProgPages, .-FlashProgPages
+	.align	2
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1386
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #104
+	sub	sp, sp, #104
+	ldr	r2, [r3]
+	mov	r4, r0
+	ldr	r5, .L1386+4
+	mov	r6, r3
+	str	r2, [sp, #100]
+	ldr	r2, [r5, #-3316]
+	cmp	r0, r2
+	movcc	r4, #0
+	bcc	.L1382
+	ldr	r3, [r5, #-3308]
+	add	r0, sp, #36
+	mov	r1, #165
+	mov	r2, #32
+	str	r0, [sp, #12]
+	mov	r4, r4, asl #10
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	mov	r1, #90
+	mov	r2, #8
+	ldr	r0, [r5, #-3308]
+	bl	ftl_memset
+	mov	r1, #1
+	mov	r2, r1
+	mov	r0, sp
+	str	r4, [sp, #4]
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r2, r1
+	mov	r3, r1
+	mov	r0, sp
+	bl	FlashProgPages
+	mov	r1, #0
+	mov	r2, #1
+	ldr	r4, [sp]
+	mov	r0, sp
+	adds	r4, r4, #0
+	movne	r4, #1
+	rsb	r4, r4, #0
+	bl	FlashEraseBlocks
+.L1382:
+	ldr	r2, [sp, #100]
+	mov	r0, r4
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1383
+	bl	__stack_chk_fail
+.L1383:
+	add	sp, sp, #104
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1387:
+	.align	2
+.L1386:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	2
+	.global	FlashMakeFactorBbt
+	.type	FlashMakeFactorBbt, %function
+FlashMakeFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1444
+	mov	r1, #1
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r3, [r3]
+	ldr	r4, .L1444+4
+	ldr	r6, .L1444+8
+	str	r3, [sp, #84]
+	ldr	r3, [r4, #-3304]
+	ldr	r5, .L1444+12
+	ldrh	r8, [r6, #12]
+	str	r3, [sp, #20]
+	ldrh	r3, [r6, #14]
+	ldr	r0, .L1444+16
+	ldr	r7, .L1444+12
+	smulbb	r8, r8, r3
+	ldr	r3, [r5, #1784]
+	ldrb	r3, [r3, #24]	@ zero_extendqisi2
+	uxth	r8, r8
+	str	r3, [sp, #24]
+	ldrh	r3, [r5, #4]
+	str	r3, [sp, #16]
+	ldrb	r3, [r5]	@ zero_extendqisi2
+	cmp	r3, #1
+	ldreq	r3, [sp, #16]
+	moveq	r3, r3, asl #1
+	uxtheq	r3, r3
+	streq	r3, [sp, #16]
+	bl	printk
+	ldr	r0, [r4, #-3304]
+	mov	r1, #0
+	mov	r2, #4096
+	bl	ftl_memset
+	ldr	r4, .L1444+4
+	mov	r3, r8, lsr #4
+	str	r3, [sp, #28]
+	mov	r3, #0
+	str	r3, [sp, #8]
+.L1390:
+	ldrb	r6, [sp, #8]	@ zero_extendqisi2
+	ldrb	r3, [r7, #1612]	@ zero_extendqisi2
+	cmp	r3, r6
+	bls	.L1440
+	ldr	r2, .L1444+20
+	mov	r3, r6, asl #1
+	ldrh	r5, [r2, r3]
+	cmp	r5, #0
+	bne	.L1420
+	ldr	r3, .L1444+8
+	mov	r1, r5
+	ldr	r0, [r4, #-3408]
+	mov	r9, r5
+	ldrh	r2, [r3, #20]
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+	add	r3, r7, r6
+	ldrb	r10, [r3, #1616]	@ zero_extendqisi2
+	mov	r3, r6, asl #2
+	add	fp, r7, r3
+	str	r5, [sp, #4]
+	str	r3, [sp, #32]
+.L1392:
+	ldrh	r3, [sp, #4]
+	cmp	r3, r8
+	str	r3, [sp, #12]
+	bcs	.L1401
+	mvn	r3, #0
+	strb	r3, [sp, #46]
+	strb	r3, [sp, #47]
+	ldr	r3, [sp, #24]
+	tst	r3, #1
+	beq	.L1394
+	ldr	r3, [fp, #1624]
+	add	r2, sp, #46
+	mov	r0, r10
+	add	r3, r5, r3
+	str	r3, [sp, #36]
+	mov	r1, r3
+	bl	FlashReadSpare
+	ldrb	r2, [r7]	@ zero_extendqisi2
+	cmp	r2, #1
+	ldr	r3, [sp, #36]
+	bne	.L1394
+	ldr	r1, [r7, #4]
+	add	r2, sp, #47
+	mov	r0, r10
+	add	r1, r3, r1
+	bl	FlashReadSpare
+	ldrb	r3, [sp, #46]	@ zero_extendqisi2
+	ldrb	r2, [sp, #47]	@ zero_extendqisi2
+	and	r3, r3, r2
+	strb	r3, [sp, #46]
+.L1394:
+	ldr	r3, [sp, #24]
+	tst	r3, #2
+	beq	.L1396
+	ldr	r3, [r7, #1784]
+	mov	r0, r10
+	add	r2, sp, #47
+	ldrh	r1, [r3, #10]
+	ldr	r3, [fp, #1624]
+	sub	r1, r1, #1
+	add	r1, r1, r3
+	add	r1, r1, r5
+	bl	FlashReadSpare
+.L1396:
+	ldr	r3, [r7, #1784]
+	ldrb	r3, [r3, #7]	@ zero_extendqisi2
+	cmp	r3, #1
+	cmpne	r3, #8
+	ldrb	r3, [sp, #46]	@ zero_extendqisi2
+	bne	.L1397
+	cmp	r3, #0
+	ldrneb	r0, [sp, #47]	@ zero_extendqisi2
+	clzne	r0, r0
+	movne	r0, r0, lsr #5
+	bne	.L1398
+	b	.L1419
+.L1397:
+	cmp	r3, #255
+	bne	.L1419
+	ldrb	r0, [sp, #47]	@ zero_extendqisi2
+	subs	r0, r0, #255
+	movne	r0, #1
+	b	.L1398
+.L1419:
+	mov	r0, #1
+.L1398:
+	ldr	r3, [sp, #24]
+	tst	r3, #4
+	beq	.L1399
+	ldr	r3, .L1444+12
+	mov	r0, r10
+	ldr	r2, [sp, #32]
+	add	r3, r3, r2
+	ldr	r1, [r3, #1624]
+	add	r1, r5, r1
+	bl	SandiskProgTestBadBlock
+.L1399:
+	cmp	r0, #0
+	beq	.L1400
+	mov	r1, r6
+	ldr	r2, [sp, #4]
+	ldr	r0, .L1444+24
+	add	r9, r9, #1
+	bl	printk
+	ldr	r1, [r4, #-3408]
+	mov	ip, #1
+	uxth	r9, r9
+	ldr	r3, [sp, #12]
+	mov	r0, r3, lsr #5
+	and	r3, r3, #31
+	ldr	r2, [r1, r0, asl #2]
+	orr	r3, r2, ip, asl r3
+	ldr	r2, [sp, #28]
+	str	r3, [r1, r0, asl #2]
+	ldrb	r3, [r7, #1612]	@ zero_extendqisi2
+	mul	r3, r3, r2
+	cmp	r9, r3
+	bgt	.L1401
+.L1400:
+	ldr	r3, [sp, #4]
+	add	r3, r3, #1
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #16]
+	add	r5, r5, r3
+	b	.L1392
+.L1401:
+	mov	r2, r9
+	ldr	r0, .L1444+28
+	mov	r1, r6
+	bl	printk
+	ldrb	r3, [r7, #1612]	@ zero_extendqisi2
+	ldr	r2, [sp, #28]
+	mul	r3, r3, r2
+	cmp	r9, r3
+	blt	.L1403
+	ldr	r3, .L1444+8
+	mov	r1, #0
+	ldr	r0, [r4, #-3408]
+	ldrh	r2, [r3, #20]
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L1403:
+	cmp	r6, #0
+	bne	.L1405
+	ldr	r3, [r4, #-3316]
+	mov	r5, r6
+	mov	r9, #1
+	uxth	r10, r3
+.L1406:
+	ldr	r3, .L1444+12
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	cmp	r3, r10
+	bls	.L1441
+	mov	r0, r10
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1407
+	mov	r1, r10
+	ldr	r0, .L1444+32
+	bl	printk
+	ldr	r1, [r4, #-3408]
+	mov	r0, r10, lsr #5
+	add	r5, r5, #1
+	and	r3, r10, #31
+	ldr	r2, [r1, r0, asl #2]
+	uxth	r5, r5
+	orr	r3, r2, r9, asl r3
+	str	r3, [r1, r0, asl #2]
+.L1407:
+	add	r10, r10, #1
+	uxth	r10, r10
+	b	.L1406
+.L1441:
+	sub	fp, r8, #1
+	sub	r9, r8, #50
+	mov	r10, #1
+	uxth	fp, fp
+.L1409:
+	cmp	fp, r9
+	ble	.L1442
+	mov	r0, fp
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1410
+	mov	r1, fp
+	ldr	r0, .L1444+32
+	bl	printk
+	ldr	r1, [r4, #-3408]
+	mov	r0, fp, lsr #5
+	and	r3, fp, #31
+	ldr	r2, [r1, r0, asl #2]
+	orr	r3, r2, r10, asl r3
+	str	r3, [r1, r0, asl #2]
+.L1410:
+	sub	fp, fp, #1
+	uxth	fp, fp
+	b	.L1409
+.L1442:
+	ldr	r3, .L1444+12
+	ldr	r2, [r4, #-3316]
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	rsb	r3, r2, r3
+	cmp	r5, r3
+	bcc	.L1405
+	ldr	r3, .L1444+8
+	mov	r1, #0
+	ldr	r0, [r4, #-3408]
+	ldrh	r2, [r3, #20]
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L1405:
+	ldrb	r5, [sp, #8]	@ zero_extendqisi2
+	sub	r10, r8, #1
+	ldr	r9, .L1444+20
+	uxth	r10, r10
+	mul	r5, r8, r5
+	add	r9, r9, r6, asl #1
+.L1413:
+	mov	r1, r6
+	ldr	r0, .L1444+36
+	mov	r2, r10
+	bl	printk
+	ldr	r1, [r4, #-3408]
+.L1414:
+	mov	r2, r10, lsr #5
+	and	r3, r10, #31
+	ldr	r2, [r1, r2, asl #2]
+	mov	r3, r2, lsr r3
+	ands	r3, r3, #1
+	subne	r10, r10, #1
+	uxthne	r10, r10
+	bne	.L1414
+.L1443:
+	ldr	r1, [sp, #20]
+	add	r0, sp, #48
+	ldr	r2, .L1444+40
+	strh	r10, [r9]	@ movhi
+	strh	r10, [r1, #2]	@ movhi
+	strh	r2, [r1]	@ movhi
+	strh	r3, [r1, #8]	@ movhi
+	mov	r1, #1
+	ldr	r3, [r4, #-3408]
+	mov	r2, r1
+	str	r3, [sp, #56]
+	ldr	r3, [r4, #-3304]
+	str	r3, [sp, #60]
+	add	r3, r10, r5
+	mov	r3, r3, asl #10
+	str	r3, [sp, #52]
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r3, r1
+	mov	r2, r1
+	add	r0, sp, #48
+	bl	FlashProgPages
+	ldr	r3, [sp, #48]
+	cmp	r3, #0
+	subne	r10, r10, #1
+	uxthne	r10, r10
+	bne	.L1413
+.L1420:
+	ldr	r3, [sp, #8]
+	add	r3, r3, #1
+	str	r3, [sp, #8]
+	b	.L1390
+.L1440:
+	ldr	r3, .L1444
+	ldr	r2, [sp, #84]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1417
+	bl	__stack_chk_fail
+.L1417:
+	add	sp, sp, #92
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1445:
+	.align	2
+.L1444:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3876
+	.word	.LANCHOR0
+	.word	.LC25
+	.word	.LANCHOR2-3288
+	.word	.LC26
+	.word	.LC27
+	.word	.LC28
+	.word	.LC29
+	.word	-3872
+	.fnend
+	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
+	.align	2
+	.global	Ftl_log2
+	.type	Ftl_log2, %function
+Ftl_log2:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r1, #0
+	mov	r2, #1
+.L1447:
+	cmp	r2, r0
+	uxth	r3, r1
+	add	r1, r1, #1
+	movls	r2, r2, asl #1
+	bls	.L1447
+.L1449:
+	sub	r0, r3, #1
+	uxth	r0, r0
+	bx	lr
+	.fnend
+	.size	Ftl_log2, .-Ftl_log2
+	.align	2
+	.global	FtlPrintInfo
+	.type	FtlPrintInfo, %function
+FtlPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlPrintInfo, .-FtlPrintInfo
+	.align	2
+	.global	FtlSysBlkNumInit
+	.type	FtlSysBlkNumInit, %function
+FtlSysBlkNumInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1453
+	cmp	r0, #23
+	sub	r2, r3, #3264
+	movls	r0, #24
+	sub	ip, r3, #3248
+	str	r0, [r3, #-3272]
+	ldrh	r2, [r2, #-4]
+	ldrh	r1, [ip, #-10]
+	mul	r2, r2, r0
+	rsb	r0, r0, r1
+	ldr	r1, [r3, #-3252]
+	strh	r0, [ip, #-12]	@ movhi
+	mov	r0, #0
+	str	r2, [r3, #-3264]
+	rsb	r2, r2, r1
+	str	r2, [r3, #-3256]
+	bx	lr
+.L1454:
+	.align	2
+.L1453:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
+	.align	2
+	.global	FtlConstantsInit
+	.type	FtlConstantsInit, %function
+FtlConstantsInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	ldrh	r7, [r0, #8]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r0, .L1483
+	mov	r9, #0
+	ldrh	ip, [r5, #10]
+	ldrh	r6, [r5, #12]
+	add	r3, r0, #8
+	ldrh	r8, [r5, #14]
+	mov	r4, r0
+	strh	r7, [r4], #16	@ movhi
+	str	r0, [sp]
+	strh	ip, [r4, #-14]	@ movhi
+	strh	r6, [r4, #-12]	@ movhi
+	strh	r8, [r0, #-10]	@ movhi
+.L1456:
+	strb	r9, [r9, r3]
+	add	r9, r9, #1
+	cmp	r9, #32
+	bne	.L1456
+	ldrh	r2, [r5, #14]
+	ldrh	r3, [r5, #20]
+	cmp	r3, r2, lsr #8
+	bcs	.L1457
+	uxtb	r9, r6
+	mov	r3, r9, asl #1
+	uxtb	r3, r3
+	str	r3, [sp, #8]
+	sub	r3, ip, #1
+	mul	r3, r6, r3
+	str	r3, [sp, #4]
+	mov	r3, #0
+.L1458:
+	cmp	r3, r6
+	bcs	.L1460
+	ldr	r1, [sp, #4]
+	rsb	fp, r6, r3
+	ldr	r0, .L1483+4
+	uxtb	r2, r3
+	ldr	lr, .L1483+4
+	add	r1, r3, r1
+	add	r1, r0, r1
+	str	r1, [sp, #12]
+	add	fp, lr, fp
+	mov	r1, #0
+	mov	r0, r1
+.L1461:
+	cmp	r0, ip
+	add	r1, r1, r6
+	bcs	.L1482
+	ldr	lr, [sp, #12]
+	add	r10, r2, r9
+	strb	r2, [fp, r1]
+	add	r0, r0, #1
+	strb	r10, [lr, r1]
+	ldr	lr, [sp, #8]
+	add	r2, r2, lr
+	uxtb	r2, r2
+	b	.L1461
+.L1482:
+	add	r3, r3, #1
+	b	.L1458
+.L1460:
+	ldr	r3, [sp]
+	mov	ip, ip, asl #1
+	mov	r8, r8, lsr #1
+	strh	ip, [r4, #-14]	@ movhi
+	strh	r8, [r3, #-10]	@ movhi
+.L1457:
+	ldr	r9, .L1483+8
+	mov	r3, #5
+	cmp	r7, #1
+	ldr	ip, .L1483+12
+	ldrh	fp, [r5, #16]
+	strh	r3, [r9, #-8]	@ movhi
+	mov	r3, #0
+	strh	r3, [r9, #-6]	@ movhi
+	mov	r3, #4352
+	strh	r3, [r9, #-4]	@ movhi
+	sub	r8, ip, #3200
+	ldr	r3, .L1483+16
+	streqh	r7, [r9, #-8]	@ movhi
+	ldrh	r7, [r4, #-14]
+	ldrb	r10, [r3]	@ zero_extendqisi2
+	ldrh	r1, [r5, #18]
+	cmp	r10, #0
+	strh	fp, [r8]	@ movhi
+	smulbb	r7, r7, r6
+	ldrne	r3, .L1483+8
+	movne	r2, #384
+	str	ip, [sp, #12]
+	str	r1, [sp, #8]
+	strneh	r2, [r3, #-4]	@ movhi
+	sub	r3, ip, #3264
+	ldrh	r2, [r5, #20]
+	uxth	r7, r7
+	strh	r7, [r3, #-4]	@ movhi
+	ldr	r3, [sp]
+	mov	r0, r2
+	str	r2, [sp, #4]
+	ldrh	r4, [r3, #-10]
+	smulbb	r3, r7, fp
+	smulbb	r6, r4, r6
+	strh	r6, [r8, #-2]	@ movhi
+	sub	r6, ip, #3184
+	strh	r1, [r6, #-14]	@ movhi
+	strh	r3, [r6, #-12]	@ movhi
+	strh	r2, [r6, #-10]	@ movhi
+	bl	Ftl_log2
+	cmp	r4, #1024
+	ldr	r2, [sp, #4]
+	mov	r3, r0
+	strh	r0, [r6, #-8]	@ movhi
+	ldr	ip, [sp, #12]
+	mov	r0, r2, asl #9
+	ldr	r1, [sp, #8]
+	str	r3, [sp, #4]
+	uxth	r0, r0
+	strh	r0, [r6, #-6]	@ movhi
+	mul	r1, r1, r2
+	mov	r0, r0, lsr #8
+	strh	r0, [r6, #-4]	@ movhi
+	ldrh	r0, [r5, #26]
+	mov	r5, ip
+	strh	r0, [r6, #-2]	@ movhi
+	mul	r0, r4, r7
+	str	r0, [ip, #-3252]
+	uxtbhi	r0, r4
+	strhih	r0, [r8, #-6]	@ movhi
+	ldrh	r0, [r8, #-6]
+	rsb	r0, r0, r4
+	mov	r4, r4, asl #6
+	mul	r0, r0, r7
+	mul	r0, r2, r0
+	mul	fp, fp, r0
+	ldrh	r0, [r8, #-4]
+	mov	r0, r0, asl #3
+	mov	fp, fp, asr #11
+	str	fp, [ip, #-3184]
+	bl	__aeabi_idiv
+	ldr	fp, .L1483+20
+	mov	r1, r7
+	uxth	r0, r0
+	ldr	r3, [sp, #4]
+	cmp	r0, #4
+	strhih	r0, [fp, #-12]	@ movhi
+	add	r0, r3, #9
+	movls	r2, #4
+	strlsh	r2, [fp, #-12]	@ movhi
+	cmp	r10, #0
+	mov	r0, r4, asr r0
+	strh	r0, [fp, #-8]	@ movhi
+	movne	r2, #640
+	strneh	r2, [r8, #-4]	@ movhi
+	ldrh	r2, [r8, #-4]
+	uxth	r0, r0
+	add	r4, r0, #8
+	ldr	r10, .L1483+12
+	mov	r2, r2, asr r3
+	mul	r3, r7, r0
+	add	r2, r2, #2
+	ldrh	r0, [fp, #-12]
+	strh	r2, [fp, #-10]	@ movhi
+	str	r3, [r5, #-3172]
+	bl	__aeabi_uidiv
+	cmp	r7, #1
+	ldr	r7, .L1483+12
+	sub	r8, r7, #3152
+	uxtah	r0, r4, r0
+	addeq	r0, r0, #4
+	str	r0, [r10, #-3272]
+	ldr	r3, [r5, #-3272]
+	uxth	r0, r3
+	bl	FtlSysBlkNumInit
+	ldr	r3, [r5, #-3272]
+	ldr	r2, [r5, #-3256]
+	mov	r0, #2048
+	ldrh	r4, [r6, #-8]
+	str	r3, [r5, #-3168]
+	ldrh	r3, [r9]
+	mov	r2, r2, asl #2
+	add	r4, r4, #9
+	ldrh	r6, [r6, #-10]
+	mul	r3, r3, r2
+	mov	r1, r6
+	mov	r4, r3, lsr r4
+	add	r4, r4, #2
+	uxth	r4, r4
+	strh	r4, [r8, #-12]	@ movhi
+	bl	__aeabi_idiv
+	ldr	r1, .L1483+16
+	mov	r3, #0
+	str	r3, [r1, #3908]
+	ldrh	r3, [fp, #-12]
+	ldrb	r1, [r1, #3904]	@ zero_extendqisi2
+	add	r2, r3, #3
+	strh	r2, [fp, #-12]	@ movhi
+	cmp	r1, #0
+	ldr	fp, [r5, #-3172]
+	add	r2, fp, #3
+	str	r2, [r5, #-3172]
+	strh	r0, [r8, #-10]	@ movhi
+	sub	r0, r7, #3168
+	addne	r3, r3, #4
+	addne	fp, fp, #5
+	strneh	r3, [r0, #-12]	@ movhi
+	strne	fp, [r7, #-3172]
+	bne	.L1471
+.L1470:
+	cmp	r2, #7
+	movls	r3, #8
+	strls	r3, [r7, #-3172]
+.L1471:
+	mov	r3, #0
+	strh	r3, [r8, #-8]	@ movhi
+	ldr	r3, [sp]
+	mov	r0, #0
+	ldrh	r2, [r3, #-12]
+	mov	r3, r2, lsr #3
+	add	r3, r3, r2, asl #1
+	add	r3, r3, #52
+	add	r4, r3, r4, asl #2
+	cmp	r4, r6, asl #9
+	ldrcc	r3, .L1483+24
+	movcc	r2, #1
+	strcch	r2, [r3, #-8]	@ movhi
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1484:
+	.align	2
+.L1483:
+	.word	.LANCHOR2-3248
+	.word	.LANCHOR2-3240
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3168
+	.word	.LANCHOR2-3152
+	.fnend
+	.size	FtlConstantsInit, .-FtlConstantsInit
+	.align	2
+	.global	FtlMemInit
+	.type	FtlMemInit, %function
+FtlMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, #0
+	ldr	r4, .L1590
+	movw	r3, #65535
+	mov	r0, #1024
+	mov	r10, #36
+	sub	r2, r4, #3072
+	sub	r6, r4, #3056
+	sub	r7, r4, #3152
+	str	r3, [r4, #-3088]
+	strh	r5, [r6, #-4]	@ movhi
+	mvn	r3, #0
+	strh	r5, [r6, #-2]	@ movhi
+	sub	r9, r4, #3264
+	strh	r3, [r2]	@ movhi
+	strh	r3, [r6, #-14]	@ movhi
+	strh	r3, [r6, #-12]	@ movhi
+	strh	r3, [r6, #-10]	@ movhi
+	mov	r3, #32
+	strh	r5, [r6]	@ movhi
+	strh	r3, [r6, #-8]	@ movhi
+	mov	r3, #128
+	strh	r3, [r6, #-6]	@ movhi
+	sub	r3, r4, #3040
+	sub	r6, r4, #3184
+	strh	r5, [r7, #-6]	@ movhi
+	strh	r5, [r3, #-14]	@ movhi
+	str	r5, [r4, #-3156]
+	str	r5, [r4, #-3152]
+	str	r5, [r4, #-3148]
+	str	r5, [r4, #-3144]
+	str	r5, [r4, #-3140]
+	str	r5, [r4, #-3136]
+	str	r5, [r4, #-3132]
+	str	r5, [r4, #-3128]
+	str	r5, [r4, #-3124]
+	str	r5, [r4, #-3120]
+	str	r5, [r4, #-3116]
+	str	r5, [r4, #-3112]
+	str	r5, [r4, #-3108]
+	str	r5, [r4, #-3104]
+	str	r5, [r4, #-3100]
+	str	r5, [r4, #-3096]
+	str	r5, [r4, #-3092]
+	str	r5, [r4, #-3084]
+	str	r5, [r4, #-3080]
+	str	r5, [r4, #-3076]
+	ldrh	r1, [r6, #-10]
+	bl	__aeabi_idiv
+	ldrh	r8, [r9, #-4]
+	str	r5, [r4, #-3048]
+	mov	r8, r8, asl #2
+	cmp	r0, r8
+	str	r0, [r4, #-3052]
+	ldrh	r0, [r6, #-12]
+	strhi	r8, [r4, #-3052]
+	mov	r8, #12
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r4, #-3044]
+	ldrh	r0, [r6, #-12]
+	mul	r0, r8, r0
+	bl	ftl_malloc
+	ldrh	r5, [r9, #-4]
+	mul	r5, r10, r5
+	mov	fp, r5, asl #3
+	str	r0, [r4, #-3040]
+	mov	r0, fp
+	bl	ftl_malloc
+	str	r0, [r4, #-3036]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3032]
+	mov	r0, fp
+	bl	ftl_malloc
+	str	r0, [r4, #-3028]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3024]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3020]
+	ldr	r0, [r4, #-3052]
+	mul	r0, r10, r0
+	bl	ftl_malloc
+	ldrh	r5, [r6, #-6]
+	ldrh	r3, [r9, #-4]
+	mov	r3, r3, asl #1
+	add	r3, r3, #1
+	str	r3, [r4, #-3012]
+	str	r0, [r4, #-3016]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3008]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3004]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-3000]
+	ldr	r0, [r4, #-3012]
+	mul	r0, r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-2996]
+	ldr	r0, [r4, #-3052]
+	mul	r0, r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-2992]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-2988]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-2984]
+	ldr	r0, [r4, #-3012]
+	mul	r0, r8, r0
+	bl	ftl_malloc
+	ldrh	r3, [r9, #-4]
+	ldrh	r5, [r6, #-4]
+	mul	r5, r3, r5
+	str	r0, [r4, #-2980]
+	mov	r0, r5
+	bl	ftl_malloc
+	str	r0, [r4, #-2976]
+	mov	r0, r5, asl #3
+	bl	ftl_malloc
+	ldrh	r3, [r6, #-4]
+	ldr	r5, .L1590+4
+	add	r9, r5, #288
+	str	r0, [r4, #-2972]
+	ldr	r0, [r4, #-3012]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r6, #-4]
+	str	r0, [r4, #-2968]
+	ldr	r0, [r4, #-3052]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	str	r0, [r4, #-2964]
+	ldrh	r0, [r5, #-10]
+	mov	r0, r0, asl #1
+	uxth	r0, r0
+	strh	r0, [r9]	@ movhi
+	bl	ftl_malloc
+	str	r0, [r4, #-2956]
+	ldrh	r0, [r9]
+	add	r0, r0, #544
+	add	r0, r0, #3
+	mov	r0, r0, lsr #9
+	strh	r0, [r9]	@ movhi
+	mov	r0, r0, asl #9
+	bl	ftl_malloc
+	ldrh	r9, [r5, #-10]
+	mov	r9, r9, asl #1
+	str	r0, [r4, #-2952]
+	add	r0, r0, #32
+	str	r0, [r4, #-2948]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-2944]
+	mov	r0, r9
+	bl	ftl_malloc
+	ldr	r9, [r4, #-3172]
+	mov	r9, r9, asl #1
+	str	r0, [r4, #-2940]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-2936]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-2932]
+	ldrh	r0, [r5, #-10]
+	mov	r0, r0, lsr #3
+	add	r0, r0, #4
+	bl	ftl_malloc
+	str	r0, [r4, #-2928]
+	ldrh	r0, [r5, #68]
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r4, #-2924]
+	ldrh	r0, [r5, #68]
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r4, #-2920]
+	ldrh	r0, [r5, #68]
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	str	r0, [r4, #-2916]
+	ldrh	r0, [r5, #70]
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrh	r2, [r5, #70]
+	mov	r1, #0
+	mov	r2, r2, asl #2
+	str	r0, [r4, #-2912]
+	bl	ftl_memset
+	ldrh	r9, [r7, #-12]
+	mov	r9, r9, asl #2
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-2908]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-2904]
+	ldr	r0, [r4, #-3172]
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	str	r0, [r4, #-2900]
+	ldrh	r0, [r7, #-10]
+	mul	r0, r8, r0
+	bl	ftl_malloc
+	ldrh	r3, [r7, #-10]
+	add	r7, r5, #16
+	str	r0, [r4, #-2896]
+	ldrh	r0, [r6, #-6]
+	add	r6, r5, #368
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r5, #-10]
+	str	r0, [r4, #-2892]
+	mov	r0, #6
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r5, #46]
+	add	r3, r3, #31
+	mov	r3, r3, asr #5
+	strh	r3, [r6, #-4]	@ movhi
+	str	r0, [r4, #-2888]
+	ldrh	r0, [r5, #2]
+	mul	r0, r0, r3
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrh	r2, [r6, #-4]
+	ldrh	ip, [r5, #2]
+	add	r5, r5, #396
+	mov	r3, #1
+	mov	r2, r2, asl #2
+	mov	r1, r2
+	str	r0, [r4, #-2852]
+.L1487:
+	cmp	r3, ip
+	bcs	.L1588
+	ldr	r0, [r4, #-2852]
+	add	r3, r3, #1
+	add	r0, r0, r1
+	add	r1, r1, r2
+	str	r0, [r5, #4]!
+	b	.L1487
+.L1588:
+	mov	r2, #0
+.L1489:
+	cmp	r3, #8
+	addne	r1, r6, r3, asl #2
+	addne	r3, r3, #1
+	strne	r2, [r1, #28]
+	bne	.L1489
+.L1589:
+	ldr	r2, [r4, #-2936]
+	ldr	r3, .L1590
+	cmp	r2, #0
+	bne	.L1491
+.L1493:
+	ldr	r1, .L1590+8
+	ldr	r0, .L1590+12
+	bl	printk
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1491:
+	ldr	r2, [r3, #-2932]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2908]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2900]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2896]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2892]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2888]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2852]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r3, [r3, #-2940]
+	cmp	r3, #0
+	beq	.L1493
+	ldr	r2, [r4, #-3044]
+	ldr	r3, .L1590
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3040]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3036]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3028]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3024]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3020]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3032]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3008]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-3004]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r3, [r3, #-3000]
+	cmp	r3, #0
+	beq	.L1493
+	ldr	r2, [r4, #-2996]
+	ldr	r3, .L1590
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2988]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2984]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2980]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2976]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2972]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2968]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2948]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2956]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r3, [r3, #-2924]
+	cmp	r3, #0
+	beq	.L1493
+	ldr	r3, .L1590
+	ldr	r2, [r3, #-2920]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r2, [r3, #-2916]
+	cmp	r2, #0
+	beq	.L1493
+	ldr	r3, [r3, #-2912]
+	cmp	r3, #0
+	beq	.L1493
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1591:
+	.align	2
+.L1590:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3248
+	.word	.LANCHOR3+4
+	.word	.LC30
+	.fnend
+	.size	FtlMemInit, .-FtlMemInit
+	.align	2
+	.global	IsBlkInVendorPart
+	.type	IsBlkInVendorPart, %function
+IsBlkInVendorPart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1599
+	sub	r3, r2, #2816
+	ldrh	r3, [r3, #-4]
+	cmp	r3, #0
+	beq	.L1598
+	ldr	r3, [r2, #-2924]
+	sub	r2, r2, #3168
+	ldrh	r2, [r2, #-12]
+	add	r2, r3, r2, asl #1
+.L1594:
+	cmp	r3, r2
+	beq	.L1598
+	ldrh	r1, [r3], #2
+	cmp	r1, r0
+	bne	.L1594
+	mov	r0, #1
+	bx	lr
+.L1598:
+	mov	r0, #0
+	bx	lr
+.L1600:
+	.align	2
+.L1599:
+	.word	.LANCHOR2
+	.fnend
+	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
+	.align	2
+	.global	FtlCacheMetchLpa
+	.type	FtlCacheMetchLpa, %function
+FtlCacheMetchLpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1608
+	ldr	r3, [r2, #-3048]
+	cmp	r3, #0
+	beq	.L1604
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r5, #36
+	ldr	r4, [r2, #-3016]
+	mov	r2, #0
+.L1603:
+	mla	ip, r5, r2, r4
+	ldr	lr, [ip, #16]
+	cmp	lr, r0
+	movcc	ip, #0
+	movcs	ip, #1
+	cmp	lr, r1
+	movhi	ip, #0
+	cmp	ip, #0
+	bne	.L1605
+	add	r2, r2, #1
+	cmp	r2, r3
+	bne	.L1603
+	mov	r0, ip
+	ldmfd	sp!, {r4, r5, pc}
+.L1604:
+	mov	r0, r3
+	bx	lr
+.L1605:
+	mov	r0, #1
+	ldmfd	sp!, {r4, r5, pc}
+.L1609:
+	.align	2
+.L1608:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
+	.align	2
+	.global	FtlGetCap
+	.type	FtlGetCap, %function
+FtlGetCap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1611
+	ldr	r0, [r3, #3908]
+	bx	lr
+.L1612:
+	.align	2
+.L1611:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetCap, .-FtlGetCap
+	.align	2
+	.global	ftl_get_density
+	.type	ftl_get_density, %function
+ftl_get_density:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1614
+	ldr	r0, [r3, #3908]
+	bx	lr
+.L1615:
+	.align	2
+.L1614:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_get_density, .-ftl_get_density
+	.align	2
+	.global	FtlGetLpn
+	.type	FtlGetLpn, %function
+FtlGetLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1617
+	ldr	r0, [r3, #-2816]
+	bx	lr
+.L1618:
+	.align	2
+.L1617:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGetLpn, .-FtlGetLpn
+	.align	2
+	.global	FtlBbmMapBadBlock
+	.type	FtlBbmMapBadBlock, %function
+FtlBbmMapBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #8
+	mov	r6, r0
+	ldr	r5, .L1621
+	sub	r3, r5, #3200
+	ldrh	r4, [r3, #-2]
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	uxth	r2, r0
+	smulbb	r3, r2, r4
+	add	r1, r5, r2, asl #2
+	mov	r4, #1
+	sub	r5, r5, #2880
+	ldr	ip, [r1, #-2852]
+	rsb	r3, r3, r6
+	uxth	r3, r3
+	and	r1, r3, #31
+	mov	lr, r3, lsr #5
+	ldr	r0, [ip, lr, asl #2]
+	orr	r1, r0, r4, asl r1
+	ldr	r0, .L1621+4
+	str	r1, [ip, lr, asl #2]
+	str	r1, [sp]
+	mov	r1, r6
+	bl	printk
+	ldrh	r3, [r5, #6]
+	mov	r0, #0
+	add	r3, r3, r4
+	strh	r3, [r5, #6]	@ movhi
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1622:
+	.align	2
+.L1621:
+	.word	.LANCHOR2
+	.word	.LC31
+	.fnend
+	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
+	.global	__aeabi_uidivmod
+	.align	2
+	.global	FtlBbmIsBadBlock
+	.type	FtlBbmIsBadBlock, %function
+FtlBbmIsBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r7, r0
+	ldr	r5, .L1625
+	sub	r3, r5, #3200
+	ldrh	r6, [r3, #-2]
+	mov	r1, r6
+	bl	__aeabi_uidivmod
+	mov	r0, r7
+	uxth	r4, r1
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	mov	r2, r4, lsr #5
+	and	r4, r4, #31
+	uxth	r0, r0
+	add	r5, r5, r0, asl #2
+	ldr	r3, [r5, #-2852]
+	ldr	r0, [r3, r2, asl #2]
+	mov	r0, r0, lsr r4
+	and	r0, r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1626:
+	.align	2
+.L1625:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
+	.align	2
+	.global	FtlBbtInfoPrint
+	.type	FtlBbtInfoPrint, %function
+FtlBbtInfoPrint:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
+	.align	2
+	.global	FtlBbt2Bitmap
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r5, .L1634
+	mov	r0, r1
+	mov	r6, r1
+	mov	r1, #0
+	ldrh	r2, [r5, #-4]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	add	r3, r4, #1020
+	add	r3, r3, #2
+	sub	r1, r4, #2
+	mov	lr, #1
+	movw	r4, #65535
+.L1630:
+	ldrh	r2, [r1, #2]!
+	cmp	r2, r4
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mov	ip, r2, lsr #5
+	and	r2, r2, #31
+	cmp	r1, r3
+	ldr	r0, [r6, ip, asl #2]
+	orr	r2, r0, lr, asl r2
+	str	r2, [r6, ip, asl #2]
+	ldrh	r2, [r5, #6]
+	add	r2, r2, #1
+	strh	r2, [r5, #6]	@ movhi
+	bne	.L1630
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1635:
+	.align	2
+.L1634:
+	.word	.LANCHOR2-2880
+	.fnend
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
+	.align	2
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L1654
+	ldr	r5, [r4, #-2812]
+	cmp	r5, #0
+	bne	.L1638
+	ldr	r3, [r4, #-2976]
+	mov	r1, r5
+	ldr	r0, [r4, #-3008]
+	sub	r7, r4, #2880
+	ldr	r8, .L1654+4
+	sub	fp, r7, #4
+	str	r3, [r4, #-2796]
+	sub	r3, r4, #3184
+	str	r0, [r4, #-2800]
+	mov	r10, r4
+	ldrh	r2, [r3, #-6]
+	bl	ftl_memset
+	ldr	r9, .L1654+8
+.L1639:
+	ldrh	r3, [r9]
+	ldr	r6, .L1654
+	cmp	r5, r3
+	bge	.L1653
+	ldrh	r2, [fp]
+	ldr	r3, [r10, #-2800]
+	ldr	r1, [r8, #4]!
+	mul	r0, r2, r5
+	mov	r2, r2, asl #2
+	add	r5, r5, #1
+	add	r0, r3, r0, asl #2
+	bl	ftl_memcpy
+	b	.L1639
+.L1653:
+	ldr	r5, [r6, #-2796]
+	mov	r1, #255
+	mov	r2, #16
+	ldr	r10, .L1654+12
+	mov	r8, #0
+	mov	r0, r5
+	mov	r9, r8
+	bl	ftl_memset
+	ldr	r3, .L1654+16
+	strh	r3, [r5]	@ movhi
+	ldr	r3, [r6, #-2872]
+	str	r3, [r5, #4]
+	ldrh	r3, [r7]
+	strh	r3, [r5, #2]	@ movhi
+	ldrh	r3, [r7, #4]
+	strh	r3, [r5, #8]	@ movhi
+	ldrh	r3, [r7, #6]
+	strh	r3, [r5, #10]	@ movhi
+	ldr	r3, [r6, #-3272]
+	strh	r3, [r5, #12]	@ movhi
+.L1641:
+	ldr	r3, [r4, #-3008]
+	mov	ip, #0
+	ldrh	r1, [r7]
+	ldrh	r2, [r7, #2]
+	str	r3, [r4, #-2800]
+	ldr	r3, [r4, #-2976]
+	str	ip, [r4, #-2808]
+	str	ip, [sp, #12]
+	str	r3, [r4, #-2796]
+	orr	r3, r2, r1, asl #10
+	ldrh	r0, [r5, #10]
+	str	r3, [r4, #-2804]
+	ldrh	r3, [r7, #4]
+	str	r0, [sp]
+	ldr	r0, .L1654+20
+	bl	printk
+	ldrh	r3, [r10]
+	ldrh	r2, [r7, #2]
+	sub	r3, r3, #1
+	ldr	fp, .L1654+24
+	cmp	r2, r3
+	ldr	ip, [sp, #12]
+	blt	.L1642
+	ldr	r3, [r6, #-2872]
+	mov	r1, #1
+	ldrh	r2, [fp]
+	add	r3, r3, #1
+	ldr	r0, [r6, #-3024]
+	str	r3, [r6, #-2872]
+	str	r3, [r5, #4]
+	ldrh	r3, [fp, #4]
+	strh	r2, [r5, #8]	@ movhi
+	strh	r2, [fp, #4]	@ movhi
+	mov	r2, r1
+	strh	r3, [fp]	@ movhi
+	mov	r3, r3, asl #10
+	str	r3, [r6, #-2804]
+	str	r3, [r0, #4]
+	strh	ip, [fp, #2]	@ movhi
+	bl	FlashEraseBlocks
+.L1642:
+	mov	r1, #1
+	ldr	r0, .L1654+28
+	mov	r3, r1
+	mov	r2, r1
+	bl	FlashProgPages
+	ldrh	r3, [r7, #2]
+	ldr	fp, .L1654
+	add	r3, r3, #1
+	strh	r3, [r7, #2]	@ movhi
+	ldr	r3, [r4, #-2808]
+	cmn	r3, #1
+	bne	.L1643
+	add	r8, r8, #1
+	ldr	r0, .L1654+32
+	ldr	r1, [r6, #-2804]
+	uxth	r8, r8
+	bl	printk
+	cmp	r8, #3
+	bls	.L1641
+	ldr	r0, .L1654+36
+	mov	r2, r8
+	ldr	r1, [fp, #-2804]
+	bl	printk
+	mov	r3, #1
+	str	r3, [fp, #-2812]
+	b	.L1638
+.L1643:
+	add	r9, r9, #1
+	cmp	r9, #1
+	beq	.L1641
+	cmp	r3, #256
+	beq	.L1641
+.L1638:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1655:
+	.align	2
+.L1654:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2856
+	.word	.LANCHOR2-3246
+	.word	.LANCHOR2-3198
+	.word	-3887
+	.word	.LC32
+	.word	.LANCHOR2-2880
+	.word	.LANCHOR2-2808
+	.word	.LC33
+	.word	.LC34
+	.fnend
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.align	2
+	.global	FtlLoadFactoryBbt
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1668
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r5, #0
+	ldr	r6, .L1668+4
+	mov	r9, r2
+	ldr	r3, [r2, #-3008]
+	ldr	r7, [r2, #-2976]
+	sub	r8, r6, #376
+	str	r3, [r2, #-2800]
+	str	r7, [r2, #-2796]
+.L1657:
+	ldrh	r3, [r8]
+	cmp	r5, r3
+	bcs	.L1667
+	ldr	r2, .L1668+8
+	mvn	r3, #0
+	strh	r3, [r6, #2]!	@ movhi
+	ldrh	r3, [r2]
+	mov	r10, r2
+	sub	r3, r3, #1
+	uxth	r4, r3
+.L1658:
+	ldrh	r3, [r10]
+	sub	r2, r3, #16
+	cmp	r4, r2
+	ble	.L1660
+	mla	r3, r3, r5, r4
+	mov	r1, #1
+	ldr	r0, .L1668+12
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [r9, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r9, #-2808]
+	cmn	r3, #1
+	beq	.L1659
+	ldrh	r2, [r7]
+	movw	r3, #61664
+	cmp	r2, r3
+	streqh	r4, [r6]	@ movhi
+	beq	.L1660
+.L1659:
+	sub	r4, r4, #1
+	uxth	r4, r4
+	b	.L1658
+.L1660:
+	add	r5, r5, #1
+	b	.L1657
+.L1667:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L1669:
+	.align	2
+.L1668:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2870
+	.word	.LANCHOR2-3202
+	.word	.LANCHOR2-2808
+	.fnend
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.align	2
+	.global	FtlBbtMemInit
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, .L1671
+	mvn	r3, #0
+	mov	r1, #255
+	mov	r2, #16
+	add	r0, r0, #12
+	strh	r3, [r0, #-12]	@ movhi
+	mov	r3, #0
+	strh	r3, [r0, #-6]	@ movhi
+	b	ftl_memset
+.L1672:
+	.align	2
+.L1671:
+	.word	.LANCHOR2-2880
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
+	.global	FtlBbtCalcTotleCnt
+	.type	FtlBbtCalcTotleCnt, %function
+FtlBbtCalcTotleCnt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r4, .L1682
+	ldrh	r6, [r4, #-2]
+	ldrh	r3, [r4, #-46]
+	mov	r4, r5
+	mul	r6, r3, r6
+.L1674:
+	uxth	r0, r5
+	cmp	r0, r6
+	bge	.L1681
+	bl	FtlBbmIsBadBlock
+	add	r5, r5, #1
+	cmp	r0, #0
+	addne	r4, r4, #1
+	uxthne	r4, r4
+	b	.L1674
+.L1681:
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1683:
+	.align	2
+.L1682:
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
+	.align	2
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r7, .L1709
+	ldr	r6, [r7, #-2812]
+	cmp	r6, #0
+	bne	.L1685
+	bl	FtlBbtMemInit
+	ldr	r8, .L1709+4
+	bl	FtlLoadFactoryBbt
+	sub	r4, r7, #2880
+	sub	r9, r8, #18
+	mov	r5, r7
+.L1686:
+	ldr	r3, .L1709+8
+	ldrh	r2, [r3]
+	cmp	r6, r2
+	bcs	.L1706
+	ldrh	r2, [r9, #2]!
+	movw	r1, #65535
+	ldr	r0, [r5, #-3008]
+	ldr	r10, [r5, #-2976]
+	cmp	r2, r1
+	str	r0, [r5, #-2800]
+	str	r10, [r5, #-2796]
+	beq	.L1687
+	ldrh	fp, [r3, #44]
+	mov	r1, #1
+	ldr	r0, .L1709+12
+	str	r3, [sp, #4]
+	mla	fp, fp, r6, r2
+	mov	r2, fp, asl #10
+	str	r2, [r5, #-2804]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r0, [r8]
+	ldr	r1, [r5, #-2800]
+	ldr	r3, [sp, #4]
+	ldrh	r2, [r3, #44]
+	add	r2, r2, #7
+	mov	r2, r2, asr #3
+	bl	ftl_memcpy
+	b	.L1688
+.L1687:
+	mov	r1, r6
+	str	r3, [sp, #4]
+	bl	FlashGetBadBlockList
+	ldr	r0, [r5, #-2800]
+	ldr	r1, [r8]
+	bl	FtlBbt2Bitmap
+	ldr	r3, [sp, #4]
+	ldrh	r3, [r3, #44]
+.L1705:
+	sub	r3, r3, #1
+	uxth	r3, r3
+	str	r3, [sp, #4]
+.L1689:
+	ldr	fp, .L1709+16
+	ldr	r3, [sp, #4]
+	ldrh	r0, [fp]
+	smlabb	r0, r0, r6, r3
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	ldreq	r3, [sp, #4]
+	beq	.L1705
+.L1707:
+	ldrh	r3, [sp, #4]
+	mov	r1, #0
+	mov	r2, #16
+	ldr	r0, [r5, #-2976]
+	strh	r3, [r9]	@ movhi
+	bl	ftl_memset
+	ldr	r3, .L1709+20
+	strh	r3, [r10]	@ movhi
+	mov	r3, #0
+	str	r3, [r10, #4]
+	ldrh	r3, [r9]
+	ldrh	fp, [fp]
+	strh	r3, [r10, #2]	@ movhi
+	ldrh	r3, [r9]
+	ldr	r1, [r8]
+	ldr	r0, [r5, #-2800]
+	mla	fp, fp, r6, r3
+	mov	r3, fp, asl #10
+	str	r3, [r5, #-2804]
+	ldr	r3, .L1709+24
+	ldrh	r2, [r3]
+	mov	r2, r2, asl #2
+	bl	ftl_memcpy
+	mov	r1, #1
+	mov	r2, r1
+	ldr	r0, .L1709+12
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r3, r1
+	ldr	r0, .L1709+12
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r3, [r5, #-2808]
+	cmn	r3, #1
+	bne	.L1688
+	uxth	r0, fp
+	bl	FtlBbmMapBadBlock
+	b	.L1689
+.L1688:
+	uxth	r0, fp
+	add	r6, r6, #1
+	bl	FtlBbmMapBadBlock
+	add	r8, r8, #4
+	b	.L1686
+.L1706:
+	add	r5, r3, #60
+	mov	r6, #0
+.L1693:
+	ldrh	r3, [r5]
+	uxth	r0, r6
+	add	r6, r6, #1
+	cmp	r3, r0
+	bls	.L1708
+	bl	FtlBbmMapBadBlock
+	b	.L1693
+.L1708:
+	ldrh	r5, [r4, #12]
+	movw	r8, #65535
+	ldr	r6, .L1709+28
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1695:
+	ldrh	r3, [r4, #12]
+	sub	r3, r3, #48
+	cmp	r5, r3
+	ble	.L1699
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1696
+	mov	r0, r5
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1697
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+	b	.L1696
+.L1697:
+	ldrh	r3, [r6]
+	cmp	r3, r8
+	streqh	r5, [r6]	@ movhi
+.L1698:
+	ldrne	r3, .L1709+28
+	strneh	r5, [r3, #4]	@ movhi
+	bne	.L1699
+.L1696:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L1695
+.L1699:
+	ldr	r0, [r7, #-3024]
+	mov	r5, #0
+	ldrh	r3, [r4]
+	mov	r2, #2
+	str	r5, [r7, #-2872]
+	mov	r1, #1
+	strh	r5, [r4, #2]	@ movhi
+	mov	r3, r3, asl #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #4]
+	mov	r3, r3, asl #10
+	str	r3, [r0, #40]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #4]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r7, #-2872]
+	ldrh	r2, [r4, #4]
+	add	r3, r3, #1
+	str	r3, [r7, #-2872]
+	ldrh	r3, [r4]
+	strh	r5, [r4, #2]	@ movhi
+	strh	r2, [r4]	@ movhi
+	strh	r3, [r4, #4]	@ movhi
+	bl	FtlBbmTblFlush
+.L1685:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1710:
+	.align	2
+.L1709:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2852
+	.word	.LANCHOR2-3246
+	.word	.LANCHOR2-2808
+	.word	.LANCHOR2-3202
+	.word	-3872
+	.word	.LANCHOR2-2884
+	.word	.LANCHOR2-2880
+	.fnend
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.global	V2P_block
+	.type	V2P_block, %function
+V2P_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, r1
+	ldr	r4, .L1713
+	mov	r7, r0
+	sub	r3, r4, #3232
+	sub	r4, r4, #3200
+	ldrh	r6, [r3, #-12]
+	mov	r1, r6
+	bl	__aeabi_uidivmod
+	mov	r0, r7
+	smlabb	r5, r5, r6, r1
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldrh	r3, [r4, #-2]
+	smlabb	r0, r3, r0, r5
+	uxth	r0, r0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1714:
+	.align	2
+.L1713:
+	.word	.LANCHOR2
+	.fnend
+	.size	V2P_block, .-V2P_block
+	.align	2
+	.global	P2V_plane
+	.type	P2V_plane, %function
+P2V_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1717
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	sub	r2, r3, #3232
+	sub	r3, r3, #3200
+	mov	r6, r0
+	ldrh	r5, [r2, #-12]
+	ldrh	r1, [r3, #-2]
+	bl	__aeabi_uidiv
+	mov	r1, r5
+	smulbb	r4, r0, r5
+	mov	r0, r6
+	bl	__aeabi_uidivmod
+	add	r1, r4, r1
+	uxth	r0, r1
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1718:
+	.align	2
+.L1717:
+	.word	.LANCHOR2
+	.fnend
+	.size	P2V_plane, .-P2V_plane
+	.align	2
+	.global	P2V_block_in_plane
+	.type	P2V_block_in_plane, %function
+P2V_block_in_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L1721
+	sub	r3, r4, #3200
+	sub	r4, r4, #3232
+	ldrh	r1, [r3, #-2]
+	bl	__aeabi_uidivmod
+	uxth	r0, r1
+	ldrh	r1, [r4, #-12]
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	ldmfd	sp!, {r4, pc}
+.L1722:
+	.align	2
+.L1721:
+	.word	.LANCHOR2
+	.fnend
+	.size	P2V_block_in_plane, .-P2V_block_in_plane
+	.align	2
+	.global	ftl_cmp_data_ver
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, r1
+	bls	.L1724
+	rsb	r0, r1, r0
+	cmp	r0, #-2147483648
+	movhi	r0, #0
+	movls	r0, #1
+	bx	lr
+.L1724:
+	rsb	r0, r0, r1
+	cmp	r0, #-2147483648
+	movls	r0, #0
+	movhi	r0, #1
+	bx	lr
+	.fnend
+	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
+	.align	2
+	.global	FtlGetLastWrittenPage
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	cmp	r1, #1
+	ldr	r6, .L1739
+	.pad #108
+	sub	sp, sp, #108
+	mov	r9, r1
+	mov	r7, r0, asl #10
+	mov	r1, #1
+	mov	r0, sp
+	ldr	r3, [r6]
+	mov	r2, r9
+	mov	r8, #0
+	str	r8, [sp, #8]
+	str	r3, [sp, #100]
+	ldreq	r3, .L1739+4
+	ldrne	r3, .L1739+8
+	ldreqh	r4, [r3, #-14]
+	ldrneh	r4, [r3]
+	add	r3, sp, #36
+	str	r3, [sp, #12]
+	sub	r5, r4, #1
+	uxth	r5, r5
+	sxth	r3, r5
+	orr	r3, r3, r7
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [sp, #36]
+	cmn	r3, #1
+	bne	.L1729
+.L1730:
+	sxth	r4, r8
+	sxth	r3, r5
+	cmp	r4, r3
+	bgt	.L1729
+	add	r4, r4, r3
+	mov	r0, sp
+	mov	r1, #1
+	mov	r2, r9
+	add	r4, r4, r4, lsr #31
+	mov	r4, r4, asr #1
+	sxth	r3, r4
+	orr	r3, r3, r7
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [sp, #36]
+	cmn	r3, #1
+	bne	.L1731
+	ldr	r3, [sp, #40]
+	cmn	r3, #1
+	bne	.L1731
+	ldr	r3, [sp]
+	cmn	r3, #1
+	subne	r5, r4, #1
+	uxthne	r5, r5
+	bne	.L1730
+.L1731:
+	add	r3, r4, #1
+	uxth	r8, r3
+	b	.L1730
+.L1729:
+	ldr	r2, [sp, #100]
+	sxth	r0, r5
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1734
+	bl	__stack_chk_fail
+.L1734:
+	add	sp, sp, #108
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L1740:
+	.align	2
+.L1739:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.align	2
+	.global	FtlLoadBbt
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r4, .L1774
+	ldr	r3, [r4, #-3008]
+	mov	r7, r4
+	ldr	r6, [r4, #-2976]
+	str	r3, [r4, #-2800]
+	str	r6, [r4, #-2796]
+	bl	FtlBbtMemInit
+	sub	r3, r4, #3200
+	sub	r8, r3, #2
+	ldrh	r5, [r3, #-2]
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1742:
+	ldrh	r3, [r8]
+	sub	r3, r3, #48
+	cmp	r5, r3
+	ble	.L1745
+	mov	r1, #1
+	ldr	r0, .L1774+4
+	mov	r2, r1
+	mov	r3, r5, asl #10
+	str	r3, [r7, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r7, #-2808]
+	cmn	r3, #1
+	bne	.L1743
+	ldr	r3, [r7, #-2804]
+	mov	r1, #1
+	ldr	r0, .L1774+4
+	mov	r2, r1
+	add	r3, r3, #1
+	str	r3, [r7, #-2804]
+	bl	FlashReadPages
+.L1743:
+	ldr	r3, [r4, #-2808]
+	ldr	r2, .L1774
+	cmn	r3, #1
+	beq	.L1744
+	ldrh	r1, [r6]
+	movw	r3, #61649
+	cmp	r1, r3
+	bne	.L1744
+	ldr	r1, [r6, #4]
+	sub	r3, r2, #2880
+	strh	r5, [r3]	@ movhi
+	str	r1, [r2, #-2872]
+	ldrh	r2, [r6, #8]
+	strh	r2, [r3, #4]	@ movhi
+	b	.L1745
+.L1744:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L1742
+.L1745:
+	ldr	r7, .L1774
+	movw	r2, #65535
+	sub	r5, r7, #2880
+	ldrh	r3, [r5]
+	cmp	r3, r2
+	beq	.L1759
+	ldrh	r3, [r5, #4]
+	cmp	r3, r2
+	beq	.L1749
+	mov	r1, #1
+	add	r0, r5, #72
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [r7, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r7, #-2808]
+	cmn	r3, #1
+	beq	.L1749
+	ldrh	r2, [r6]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L1749
+	ldr	r3, [r6, #4]
+	ldr	r2, [r7, #-2872]
+	cmp	r3, r2
+	strhi	r3, [r7, #-2872]
+	ldrhih	r2, [r5, #4]
+	ldrhih	r3, [r6, #8]
+	strhih	r2, [r5]	@ movhi
+	strhih	r3, [r5, #4]	@ movhi
+.L1749:
+	ldrh	r0, [r5]
+	mov	r1, #1
+	bl	FtlGetLastWrittenPage
+	movw	r8, #61649
+	uxth	r7, r0
+	add	r0, r0, #1
+	strh	r0, [r5, #2]	@ movhi
+.L1751:
+	sxth	r3, r7
+	cmp	r3, #0
+	blt	.L1756
+	ldrh	r2, [r5]
+	mov	r1, #1
+	ldr	r0, .L1774+4
+	orr	r3, r3, r2, asl #10
+	str	r3, [r4, #-2804]
+	ldr	r3, [r4, #-3008]
+	mov	r2, r1
+	str	r3, [r4, #-2800]
+	bl	FlashReadPages
+	ldr	r3, [r4, #-2808]
+	cmn	r3, #1
+	beq	.L1752
+	ldrh	r3, [r6]
+	cmp	r3, r8
+	bne	.L1752
+.L1756:
+	ldrh	r2, [r6, #10]
+	ldrh	r0, [r6, #12]
+	ldr	r3, .L1774
+	strh	r2, [r5, #6]	@ movhi
+	movw	r2, #65535
+	cmp	r0, r2
+	bne	.L1753
+	b	.L1754
+.L1752:
+	sub	r7, r7, #1
+	uxth	r7, r7
+	b	.L1751
+.L1753:
+	ldr	r2, [r3, #-3272]
+	cmp	r0, r2
+	beq	.L1754
+	sub	r3, r3, #3248
+	ldrh	r3, [r3, #-10]
+	mov	r3, r3, lsr #2
+	cmp	r0, r3
+	cmpcc	r2, r3
+	bcs	.L1754
+	bl	FtlSysBlkNumInit
+.L1754:
+	ldr	r5, .L1774+8
+	mov	r4, #0
+	ldr	r7, .L1774
+	ldr	r6, .L1774+12
+	sub	r8, r5, #28
+.L1757:
+	ldrh	r3, [r6]
+	cmp	r4, r3
+	bcs	.L1773
+	ldrh	r2, [r8]
+	ldr	r1, [r7, #-2800]
+	ldr	r0, [r5, #4]!
+	mov	r2, r2, asl #2
+	mla	r1, r4, r2, r1
+	bl	ftl_memcpy
+	add	r4, r4, #1
+	b	.L1757
+.L1773:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1759:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1775:
+	.align	2
+.L1774:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2808
+	.word	.LANCHOR2-2856
+	.word	.LANCHOR2-3246
+	.fnend
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1778
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	sub	r2, r3, #4
+	mov	r4, #0
+	strh	r0, [r3, #-4]	@ movhi
+	strh	r4, [r2, #4]	@ movhi
+	add	r0, r3, #4
+	mov	r1, r4
+	mov	r2, #2048
+	strh	r4, [r3, #-2]	@ movhi
+	strh	r4, [r3, #2]	@ movhi
+	bl	ftl_memset
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L1779:
+	.align	2
+.L1778:
+	.word	.LANCHOR2-2768
+	.fnend
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	2
+	.global	FtlFreeSysBlkQueueEmpty
+	.type	FtlFreeSysBlkQueueEmpty, %function
+FtlFreeSysBlkQueueEmpty:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1781
+	ldrh	r0, [r3, #6]
+	clz	r0, r0
+	mov	r0, r0, lsr #5
+	bx	lr
+.L1782:
+	.align	2
+.L1781:
+	.word	.LANCHOR2-2772
+	.fnend
+	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
+	.align	2
+	.global	FtlFreeSysBlkQueueFull
+	.type	FtlFreeSysBlkQueueFull, %function
+FtlFreeSysBlkQueueFull:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1784
+	ldrh	r0, [r3, #6]
+	sub	r0, r0, #1024
+	clz	r0, r0
+	mov	r0, r0, lsr #5
+	bx	lr
+.L1785:
+	.align	2
+.L1784:
+	.word	.LANCHOR2-2772
+	.fnend
+	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
+	.align	2
+	.global	FtlFreeSysBlkQueueIn
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	sub	r3, r0, #1
+	movw	r2, #65533
+	mov	r7, r0
+	uxth	r3, r3
+	cmp	r3, r2
+	ldmhifd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldr	r4, .L1796
+	ldr	r5, .L1796+4
+	ldrh	r3, [r4, #6]
+	cmp	r3, #1024
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	cmp	r1, #0
+	beq	.L1788
+	ldr	r3, [r5, #-2812]
+	cmp	r3, #0
+	bne	.L1788
+	bl	P2V_block_in_plane
+	mov	r1, #1
+	mov	r3, r7, asl #10
+	mov	r2, r1
+	mov	r6, r0
+	ldr	r0, [r5, #-3024]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r1, [r5, #-2948]
+	mov	r3, r6, asl #1
+	ldrh	r2, [r1, r3]
+	add	r2, r2, #1
+	strh	r2, [r1, r3]	@ movhi
+	ldr	r3, [r5, #-3108]
+	add	r3, r3, #1
+	str	r3, [r5, #-3108]
+.L1788:
+	ldrh	r3, [r4, #6]
+	add	r3, r3, #1
+	strh	r3, [r4, #6]	@ movhi
+	ldrh	r3, [r4, #4]
+	add	r2, r4, r3, asl #1
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	strh	r3, [r4, #4]	@ movhi
+	strh	r7, [r2, #8]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1797:
+	.align	2
+.L1796:
+	.word	.LANCHOR2-2772
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.align	2
+	.global	FtlLowFormatEraseBlock
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r6, .L1848
+	ldr	r5, [r6, #-2812]
+	ldrb	r3, [r6, #-3340]	@ zero_extendqisi2
+	cmp	r5, #0
+	str	r3, [sp, #16]
+	movne	r0, #0
+	bne	.L1799
+	ldr	r2, .L1848+4
+	mov	r9, r6
+	mov	fp, r1
+	mov	r10, r5
+	mov	r4, r5
+	mov	r7, r6
+	ldrb	r3, [r2, #3904]	@ zero_extendqisi2
+	mov	r8, #36
+	str	r0, [sp, #4]
+	str	r0, [r9, #-3076]
+	str	r3, [sp, #8]
+	str	r2, [sp, #12]
+.L1800:
+	ldr	r3, .L1848+8
+	uxth	r2, r10
+	ldr	ip, .L1848
+	ldrh	r1, [r3]
+	cmp	r1, r2
+	bls	.L1843
+	mul	r1, r8, r2
+	ldr	r0, [r7, #-3024]
+	add	r2, r7, r2
+	mov	r3, #0
+	str	r3, [r0, r1]
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r2, #-3240]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	fp, #0
+	mov	r6, r0
+	beq	.L1801
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L1802
+.L1801:
+	mov	r0, r6
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	addne	r4, r4, #1
+	uxthne	r4, r4
+	bne	.L1802
+	ldr	r3, .L1848+12
+	mov	r6, r6, asl #10
+	ldr	r1, [r9, #-3024]
+	ldrh	r2, [r3]
+	mla	r1, r8, r5, r1
+	mul	r2, r2, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	cmp	r2, #0
+	str	r0, [r1, #8]
+	add	r0, r2, #3
+	str	r6, [r1, #4]
+	movlt	r2, r0
+	ldr	r0, [r9, #-2972]
+	bic	r2, r2, #3
+	add	r2, r0, r2
+	str	r2, [r1, #12]
+.L1802:
+	add	r10, r10, #1
+	b	.L1800
+.L1843:
+	cmp	r5, #0
+	beq	.L1823
+	ldr	r3, [sp, #8]
+	mov	r2, r5
+	ldr	r0, [ip, #-3024]
+	mov	r7, #0
+	adds	r6, r3, #0
+	strb	r7, [ip, #-3340]
+	str	ip, [sp, #8]
+	mov	r8, #36
+	movne	r6, #1
+	mov	r1, r6
+	bl	FlashEraseBlocks
+	ldrb	r3, [sp, #16]	@ zero_extendqisi2
+	ldr	ip, [sp, #8]
+	strb	r3, [ip, #-3340]
+.L1806:
+	uxth	r3, r7
+	cmp	r3, r5
+	bcs	.L1844
+	mul	r3, r8, r7
+	ldr	r2, [r9, #-3024]
+	add	r0, r2, r3
+	ldr	r3, [r2, r3]
+	cmn	r3, #1
+	bne	.L1807
+	ldr	r0, [r0, #4]
+	add	r4, r4, #1
+	ubfx	r0, r0, #10, #16
+	uxth	r4, r4
+	bl	FtlBbmMapBadBlock
+.L1807:
+	add	r7, r7, #1
+	b	.L1806
+.L1844:
+	cmp	fp, #0
+	bne	.L1809
+	mov	r3, #6
+	uxth	r6, r6
+	str	r3, [sp, #12]
+	mov	r3, #1
+	str	r3, [sp, #8]
+	b	.L1810
+.L1809:
+	ldr	r3, .L1848+16
+	ldrh	r3, [r3, #-14]
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #12]
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, [sp, #8]
+	moveq	r6, #1
+	movne	r6, #1
+	strne	r6, [sp, #12]
+	moveq	r3, r3, lsr #2
+	streq	r3, [sp, #12]
+.L1810:
+	ldr	r10, .L1848
+	mov	r7, #0
+.L1819:
+	mov	r8, #0
+	mov	r5, r8
+.L1811:
+	ldr	r3, .L1848+8
+	ldr	r9, .L1848
+	ldrh	r2, [r3]
+	uxth	r3, r8
+	cmp	r2, r3
+	bls	.L1845
+	mov	r2, #36
+	ldr	r1, [r10, #-3024]
+	mul	r2, r2, r3
+	add	r3, r10, r3
+	mov	r0, #0
+	str	r0, [r1, r2]
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r3, #-3240]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	fp, #0
+	mov	r9, r0
+	beq	.L1812
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L1813
+.L1812:
+	mov	r0, r9
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	bne	.L1813
+	ldr	r2, [r10, #-3024]
+	mov	r3, #36
+	add	r9, r7, r9, asl #10
+	mla	r2, r3, r5, r2
+	ldr	r3, [r10, #-2988]
+	str	r3, [r2, #8]
+	ldr	r3, .L1848+12
+	str	r9, [r2, #4]
+	ldrh	r3, [r3]
+	mul	r3, r3, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r1, r3, #3
+	cmp	r3, #0
+	movlt	r3, r1
+	ldr	r1, [r10, #-2984]
+	bic	r3, r3, #3
+	add	r3, r1, r3
+	str	r3, [r2, #12]
+.L1813:
+	add	r8, r8, #1
+	b	.L1811
+.L1845:
+	cmp	r5, #0
+	beq	.L1823
+	ldr	r2, .L1848
+	mov	r3, #0
+	mov	r1, r5
+	mov	r8, #0
+	strb	r3, [r2, #-3340]
+	mov	r3, #1
+	ldr	r0, [r2, #-3024]
+	mov	r2, r6
+	bl	FlashProgPages
+	ldr	r3, .L1848
+	mov	r1, #36
+	ldrb	r2, [sp, #16]	@ zero_extendqisi2
+	strb	r2, [r3, #-3340]
+.L1816:
+	uxth	r3, r8
+	cmp	r3, r5
+	bcs	.L1846
+	mul	r3, r1, r8
+	ldr	r2, .L1848
+	ldr	r2, [r2, #-3024]
+	add	r0, r2, r3
+	ldr	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1817
+	ldr	r0, [r0, #4]
+	add	r4, r4, #1
+	str	r1, [sp, #20]
+	ubfx	r0, r0, #10, #16
+	uxth	r4, r4
+	bl	FtlBbmMapBadBlock
+	ldr	r1, [sp, #20]
+.L1817:
+	add	r8, r8, #1
+	b	.L1816
+.L1846:
+	ldr	r3, [sp, #12]
+	add	r7, r7, r3
+	ldr	r3, [sp, #8]
+	uxth	r7, r7
+	cmp	r7, r3
+	bcc	.L1819
+	mov	r7, #0
+	mov	r8, #36
+.L1820:
+	uxth	r3, r7
+	cmp	r3, r5
+	bcs	.L1847
+	cmp	fp, #0
+	beq	.L1821
+	mul	r3, r8, r7
+	ldr	r2, [r9, #-3024]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L1821
+	ldr	r0, [r1, #4]
+	mov	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L1821:
+	add	r7, r7, #1
+	b	.L1820
+.L1847:
+	adds	r3, fp, #0
+	ldr	r2, [sp, #4]
+	movne	r3, #1
+	cmp	r2, #63
+	orrls	r3, r3, #1
+	cmp	r3, #0
+	beq	.L1823
+	ldr	r0, [r9, #-3024]
+	mov	r1, r6
+	mov	r2, r5
+	bl	FlashEraseBlocks
+.L1823:
+	mov	r0, r4
+.L1799:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1849:
+	.align	2
+.L1848:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2-3188
+	.word	.LANCHOR2-3184
+	.fnend
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	2
+	.global	FtlFreeSysBLkSort
+	.type	FtlFreeSysBLkSort, %function
+FtlFreeSysBLkSort:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1863
+	ldrh	ip, [r3, #28]
+	ldr	r3, .L1863+4
+	ldrh	r2, [r3, #6]
+	cmp	r2, #0
+	bxeq	lr
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r0, #0
+	ldrh	r1, [r3, #2]
+	and	ip, ip, #31
+	ldrh	r2, [r3, #4]
+	mov	r4, r0
+.L1852:
+	uxth	lr, r0
+	add	r0, r0, #1
+	cmp	lr, ip
+	bge	.L1862
+	add	lr, r3, r1, asl #1
+	add	r1, r1, #1
+	ubfx	r1, r1, #0, #10
+	ldrh	r4, [lr, #8]
+	add	lr, r3, r2, asl #1
+	strh	r4, [lr, #8]	@ movhi
+	mov	r4, #1
+	add	r2, r2, r4
+	ubfx	r2, r2, #0, #10
+	b	.L1852
+.L1862:
+	cmp	r4, #0
+	strneh	r1, [r3, #2]	@ movhi
+	strneh	r2, [r3, #4]	@ movhi
+	ldmfd	sp!, {r4, pc}
+.L1864:
+	.align	2
+.L1863:
+	.word	.LANCHOR2-716
+	.word	.LANCHOR2-2772
+	.fnend
+	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
+	.align	2
+	.global	FtlFreeSysBlkQueueOut
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	ldr	r7, .L1876
+	ldr	r5, .L1876+4
+	mov	r6, r7
+.L1866:
+	ldrh	r1, [r5, #6]
+	cmp	r1, #0
+	beq	.L1867
+	ldrh	r3, [r5, #2]
+	sub	r1, r1, #1
+	ldr	r9, [r7, #-2812]
+	strh	r1, [r5, #6]	@ movhi
+	add	r2, r5, r3, asl #1
+	cmp	r9, #0
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	ldrh	r4, [r2, #8]
+	strh	r3, [r5, #2]	@ movhi
+	bne	.L1868
+	mov	r0, r4
+	bl	P2V_block_in_plane
+	mov	r3, r4, asl #10
+	mov	r8, r0
+	ldr	r0, [r7, #-3024]
+	str	r3, [r0, #4]
+	ldr	r3, .L1876+8
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1869
+	mov	r1, r9
+	mov	r2, #1
+	bl	FlashEraseBlocks
+.L1869:
+	mov	r1, #1
+	ldr	r0, [r6, #-3024]
+	mov	r2, r1
+	bl	FlashEraseBlocks
+	ldr	r1, [r6, #-2948]
+	mov	r3, r8, asl #1
+	ldrh	r2, [r1, r3]
+	add	r2, r2, #1
+	strh	r2, [r1, r3]	@ movhi
+	ldr	r3, [r6, #-3108]
+	add	r3, r3, #1
+	str	r3, [r6, #-3108]
+	b	.L1868
+.L1867:
+	ldr	r0, .L1876+12
+	bl	printk
+.L1870:
+	b	.L1870
+.L1868:
+	sub	r3, r4, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L1871
+	ldr	r3, .L1876+4
+	mov	r1, r4
+	ldr	r0, .L1876+16
+	ldrh	r2, [r3, #6]
+	bl	printk
+	b	.L1866
+.L1871:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L1877:
+	.align	2
+.L1876:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2772
+	.word	.LANCHOR0
+	.word	.LC35
+	.word	.LC36
+	.fnend
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.align	2
+	.global	test_node_in_list
+	.type	test_node_in_list, %function
+test_node_in_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1884
+	str	lr, [sp, #-4]!
+	.save {lr}
+	movw	lr, #65535
+	ldr	ip, [r3, #-2888]
+	ldr	r2, [r0]
+	ldr	r3, .L1884+4
+	rsb	r0, ip, r2
+	mov	r0, r0, asr #1
+	mul	r3, r3, r0
+	mov	r0, #6
+	uxth	r3, r3
+.L1880:
+	cmp	r1, r3
+	beq	.L1881
+	ldrh	r3, [r2]
+	cmp	r3, lr
+	beq	.L1882
+	mla	r2, r0, r3, ip
+	b	.L1880
+.L1881:
+	mov	r0, #1
+	ldr	pc, [sp], #4
+.L1882:
+	mov	r0, #0
+	ldr	pc, [sp], #4
+.L1885:
+	.align	2
+.L1884:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	test_node_in_list, .-test_node_in_list
+	.align	2
+	.global	insert_data_list
+	.type	insert_data_list, %function
+insert_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r2, .L1903
+	sub	r5, r2, #3248
+	ldrh	r3, [r5, #-12]
+	cmp	r3, r0
+	bls	.L1888
+	mov	lr, #6
+	ldr	r6, [r2, #-2888]
+	mul	lr, lr, r0
+	mvn	ip, #0
+	add	r1, r6, lr
+	strh	ip, [r1, #2]	@ movhi
+	strh	ip, [r6, lr]	@ movhi
+	ldr	r3, [r2, #-668]
+	cmp	r3, #0
+	beq	.L1902
+	ldr	r8, [r2, #-2940]
+	mov	r4, r0, asl #1
+	mov	r10, r2
+	ldrh	r2, [r1, #4]
+	ldrh	r5, [r5, #-12]
+	ldrh	r7, [r8, r4]
+	cmp	r2, #0
+	str	r5, [sp]
+	mulne	ip, r2, r7
+	ldr	r7, [r10, #-2888]
+	ldr	r2, .L1903+4
+	rsb	r9, r7, r3
+	mov	r9, r9, asr #1
+	mul	r2, r2, r9
+	ldr	r9, [r10, #-2948]
+	add	r4, r9, r4
+	str	r4, [sp, #4]
+	mov	r4, #0
+	uxth	r2, r2
+.L1897:
+	add	r4, r4, #1
+	ldr	r5, [sp]
+	uxth	r4, r4
+	cmp	r4, r5
+	movls	r5, #0
+	movhi	r5, #1
+	cmp	r0, r2
+	orreq	r5, r5, #1
+	cmp	r5, #0
+	bne	.L1888
+	mov	r10, r2, asl #1
+	ldrh	r5, [r3, #4]
+	ldrh	fp, [r8, r10]
+	cmp	r5, #0
+	mvneq	r5, #0
+	mulne	r5, r5, fp
+	cmp	r5, ip
+	bne	.L1893
+	ldr	r5, [sp, #4]
+	ldrh	r10, [r9, r10]
+	ldrh	r5, [r5]
+	cmp	r10, r5
+	bcc	.L1895
+	b	.L1894
+.L1893:
+	bhi	.L1894
+.L1895:
+	ldrh	r5, [r3]
+	movw	r10, #65535
+	cmp	r5, r10
+	streqh	r2, [r1, #2]	@ movhi
+	streqh	r0, [r3]	@ movhi
+	ldreq	r3, .L1903
+	streq	r1, [r3, #-664]
+	beq	.L1888
+.L1896:
+	mov	r3, #6
+	mov	r2, r5
+	mla	r3, r3, r5, r7
+	b	.L1897
+.L1894:
+	strh	r2, [r6, lr]	@ movhi
+	ldrh	r2, [r3, #2]
+	strh	r2, [r1, #2]	@ movhi
+	ldr	r2, .L1903
+	ldr	ip, [r2, #-668]
+	cmp	r3, ip
+	bne	.L1898
+	strh	r0, [r3, #2]	@ movhi
+.L1902:
+	str	r1, [r2, #-668]
+	b	.L1888
+.L1898:
+	ldrh	ip, [r3, #2]
+	ldr	r1, [r2, #-2888]
+	mov	r2, #6
+	mul	r2, r2, ip
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L1888:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1904:
+	.align	2
+.L1903:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_data_list, .-insert_data_list
+	.align	2
+	.global	INSERT_DATA_LIST
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	insert_data_list
+	ldr	r2, .L1907
+	ldrh	r3, [r2]
+	add	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	ldmfd	sp!, {r3, pc}
+.L1908:
+	.align	2
+.L1907:
+	.word	.LANCHOR2-660
+	.fnend
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.align	2
+	.global	insert_free_list
+	.type	insert_free_list, %function
+insert_free_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movw	r4, #65535
+	cmp	r0, r4
+	beq	.L1910
+	ldr	r2, .L1918
+	mov	lr, #6
+	mul	r6, lr, r0
+	mvn	r3, #0
+	ldr	r7, [r2, #-2888]
+	mov	r5, r2
+	add	ip, r7, r6
+	strh	r3, [ip, #2]	@ movhi
+	strh	r3, [r7, r6]	@ movhi
+	ldr	r3, [r2, #-656]
+	cmp	r3, #0
+	beq	.L1917
+	ldr	r9, [r2, #-2948]
+	mov	r2, r0, asl #1
+	ldr	r8, [r5, #-2888]
+	rsb	r1, r8, r3
+	ldrh	r10, [r9, r2]
+	ldr	r2, .L1918+4
+	mov	r1, r1, asr #1
+	mul	r1, r2, r1
+	uxth	r2, r1
+.L1914:
+	mov	r1, r2, asl #1
+	ldrh	r1, [r9, r1]
+	cmp	r1, r10
+	bcs	.L1912
+	ldrh	r1, [r3]
+	cmp	r1, r4
+	streqh	r2, [ip, #2]	@ movhi
+	streqh	r0, [r3]	@ movhi
+	beq	.L1910
+.L1913:
+	mla	r3, lr, r1, r8
+	mov	r2, r1
+	b	.L1914
+.L1912:
+	ldrh	r1, [r3, #2]
+	strh	r1, [ip, #2]	@ movhi
+	strh	r2, [r7, r6]	@ movhi
+	ldr	r1, [r5, #-656]
+	ldr	r2, .L1918
+	cmp	r3, r1
+	bne	.L1915
+	strh	r0, [r3, #2]	@ movhi
+.L1917:
+	str	ip, [r2, #-656]
+	b	.L1910
+.L1915:
+	ldrh	ip, [r3, #2]
+	ldr	r1, [r2, #-2888]
+	mov	r2, #6
+	mul	r2, r2, ip
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L1910:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L1919:
+	.align	2
+.L1918:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_free_list, .-insert_free_list
+	.align	2
+	.global	INSERT_FREE_LIST
+	.type	INSERT_FREE_LIST, %function
+INSERT_FREE_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	insert_free_list
+	ldr	r2, .L1922
+	ldrh	r3, [r2]
+	add	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	ldmfd	sp!, {r3, pc}
+.L1923:
+	.align	2
+.L1922:
+	.word	.LANCHOR2-652
+	.fnend
+	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
+	.align	2
+	.global	List_remove_node
+	.type	List_remove_node, %function
+List_remove_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	ip, #6
+	ldr	r4, .L1930
+	movw	r5, #65535
+	mul	r1, ip, r1
+	ldr	r3, [r0]
+	ldr	r2, [r4, #-2888]
+	add	lr, r2, r1
+	cmp	lr, r3
+	ldrh	r3, [r2, r1]
+	bne	.L1925
+	cmp	r3, r5
+	mlane	r3, ip, r3, r2
+	moveq	r3, #0
+	streq	r3, [r0]
+	strne	r3, [r0]
+	mvnne	r0, #0
+	strneh	r0, [r3, #2]	@ movhi
+	b	.L1927
+.L1925:
+	cmp	r3, r5
+	ldrh	r0, [lr, #2]
+	bne	.L1928
+	cmp	r0, r3
+	mulne	r0, ip, r0
+	mvnne	r3, #0
+	strneh	r3, [r2, r0]	@ movhi
+	b	.L1927
+.L1928:
+	mla	r3, ip, r3, r2
+	strh	r0, [r3, #2]	@ movhi
+	ldrh	r5, [lr, #2]
+	ldrh	r0, [r2, r1]
+	ldr	r3, [r4, #-2888]
+	mul	ip, ip, r5
+	strh	r0, [r3, ip]	@ movhi
+.L1927:
+	mvn	r3, #0
+	mov	r0, #0
+	strh	r3, [r2, r1]	@ movhi
+	strh	r3, [lr, #2]	@ movhi
+	ldmfd	sp!, {r4, r5, pc}
+.L1931:
+	.align	2
+.L1930:
+	.word	.LANCHOR2
+	.fnend
+	.size	List_remove_node, .-List_remove_node
+	.align	2
+	.global	List_pop_index_node
+	.type	List_pop_index_node, %function
+List_pop_index_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, [r0]
+	cmp	r3, #0
+	beq	.L1938
+	ldr	r2, .L1941
+	movw	ip, #65535
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	lr, #6
+	ldr	r4, [r2, #-2888]
+.L1934:
+	cmp	r1, #0
+	bne	.L1935
+.L1937:
+	rsb	r4, r4, r3
+	ldr	r3, .L1941+4
+	mov	r4, r4, asr #1
+	mul	r4, r3, r4
+	uxth	r4, r4
+	mov	r1, r4
+	bl	List_remove_node
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L1935:
+	ldrh	r2, [r3]
+	cmp	r2, ip
+	beq	.L1937
+	sub	r1, r1, #1
+	mla	r3, lr, r2, r4
+	uxth	r1, r1
+	b	.L1934
+.L1938:
+	movw	r0, #65535
+	bx	lr
+.L1942:
+	.align	2
+.L1941:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_pop_index_node, .-List_pop_index_node
+	.align	2
+	.global	List_get_gc_head_node
+	.type	List_get_gc_head_node, %function
+List_get_gc_head_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1950
+	ldr	r3, [r2, #-668]
+	cmp	r3, #0
+	ldrne	r1, [r2, #-2888]
+	movne	ip, #6
+	movwne	r2, #65535
+	beq	.L1948
+.L1945:
+	cmp	r0, #0
+	beq	.L1946
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	subne	r0, r0, #1
+	mlane	r3, ip, r3, r1
+	uxthne	r0, r0
+	bne	.L1945
+.L1948:
+	movw	r0, #65535
+	bx	lr
+.L1946:
+	rsb	r3, r1, r3
+	ldr	r0, .L1950+4
+	mov	r3, r3, asr #1
+	mul	r0, r0, r3
+	uxth	r0, r0
+	bx	lr
+.L1951:
+	.align	2
+.L1950:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_get_gc_head_node, .-List_get_gc_head_node
+	.align	2
+	.global	List_update_data_list
+	.type	List_update_data_list, %function
+List_update_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1961
+	sub	r2, r3, #648
+	ldrh	r2, [r2]
+	cmp	r2, r0
+	beq	.L1960
+	sub	r2, r3, #600
+	ldrh	r2, [r2]
+	cmp	r2, r0
+	beq	.L1960
+	sub	r2, r3, #552
+	ldrh	r2, [r2]
+	cmp	r2, r0
+	beq	.L1960
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	lr, #6
+	mul	lr, lr, r0
+	ldr	r1, [r3, #-2888]
+	ldr	r2, [r3, #-668]
+	add	ip, r1, lr
+	cmp	ip, r2
+	beq	.L1953
+	ldr	r4, [r3, #-2940]
+	mov	r3, r0, asl #1
+	ldrh	r2, [r4, r3]
+	ldrh	r3, [ip, #4]
+	ldrh	ip, [ip, #2]
+	cmp	r3, #0
+	mulne	r2, r3, r2
+	mvneq	r2, #0
+	movw	r3, #65535
+	cmp	ip, r3
+	bne	.L1955
+	ldrh	r3, [r1, lr]
+	cmp	r3, ip
+	beq	.L1953
+.L1955:
+	mov	r3, #6
+	mul	ip, r3, ip
+	ldr	r3, .L1961+4
+	add	r1, r1, ip
+	mov	lr, ip, asr #1
+	mul	r3, r3, lr
+	mov	r3, r3, asl #1
+	ldrh	lr, [r4, r3]
+	ldrh	r3, [r1, #4]
+	cmp	r3, #0
+	mulne	r3, r3, lr
+	mvneq	r3, #0
+	cmp	r2, r3
+	bcs	.L1953
+	mov	r4, r0
+	ldr	r0, .L1961+8
+	mov	r1, r4
+	bl	List_remove_node
+	ldr	r2, .L1961+12
+	mov	r0, r4
+	ldrh	r3, [r2]
+	sub	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	bl	INSERT_DATA_LIST
+.L1953:
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L1960:
+	mov	r0, #0
+	bx	lr
+.L1962:
+	.align	2
+.L1961:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LANCHOR2-668
+	.word	.LANCHOR2-660
+	.fnend
+	.size	List_update_data_list, .-List_update_data_list
+	.align	2
+	.global	ftl_free_no_use_map_blk
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r1, #0
+	ldrh	r2, [r0, #10]
+	mov	r4, r0
+	ldr	r5, [r0, #20]
+	ldr	r7, [r0, #12]
+	ldr	r6, [r0, #24]
+	mov	r2, r2, asl #1
+	mov	r0, r5
+	bl	ftl_memset
+	mov	r2, #0
+.L1964:
+	ldrh	r1, [r4, #6]
+	uxth	r3, r2
+	cmp	r1, r3
+	bls	.L1984
+	ldr	r0, [r6, r3, asl #2]
+	mov	r1, #0
+	ubfx	r0, r0, #10, #16
+.L1965:
+	ldrh	ip, [r4, #10]
+	uxth	r3, r1
+	cmp	ip, r3
+	bls	.L1985
+	mov	r3, r3, asl #1
+	add	r1, r1, #1
+	ldrh	ip, [r7, r3]
+	rsb	lr, ip, r0
+	cmp	ip, #0
+	clz	lr, lr
+	mov	lr, lr, lsr #5
+	moveq	lr, #0
+	cmp	lr, #0
+	ldrneh	ip, [r5, r3]
+	addne	ip, ip, #1
+	strneh	ip, [r5, r3]	@ movhi
+	b	.L1965
+.L1985:
+	add	r2, r2, #1
+	b	.L1964
+.L1984:
+	ldr	r3, .L1987
+	mov	r8, #0
+	mov	r1, r8
+	mov	fp, r8
+	ldrh	r2, [r3, #-14]
+	ldrh	r3, [r4]
+	mov	r3, r3, asl #1
+	strh	r2, [r5, r3]	@ movhi
+	ldrh	r9, [r5]
+.L1969:
+	ldrh	r3, [r4, #10]
+	uxth	r6, r8
+	cmp	r3, r6
+	bls	.L1986
+	mov	r2, r6, asl #1
+	ldrh	r3, [r5, r2]
+	cmp	r9, r3
+	bls	.L1970
+	ldrh	r0, [r7, r2]
+	add	r10, r7, r2
+	cmp	r0, #0
+	bne	.L1971
+	b	.L1972
+.L1970:
+	cmp	r3, #0
+	bne	.L1972
+	ldrh	r0, [r7, r2]
+	add	r10, r7, r2
+	cmp	r0, #0
+	movne	r6, r1
+	beq	.L1972
+	b	.L1974
+.L1971:
+	cmp	r3, #0
+	movne	r1, r6
+	movne	r9, r3
+	bne	.L1972
+	mov	r9, r3
+.L1974:
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	strh	fp, [r10]	@ movhi
+	ldrh	r3, [r4, #8]
+	mov	r1, r6
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+.L1972:
+	add	r8, r8, #1
+	b	.L1969
+.L1986:
+	mov	r0, r1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1988:
+	.align	2
+.L1987:
+	.word	.LANCHOR2-3184
+	.fnend
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.align	2
+	.global	ftl_map_blk_alloc_new_blk
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r3, #0
+	ldrh	r1, [r0, #10]
+	ldr	r2, [r0, #12]
+.L1990:
+	uxth	r5, r3
+	cmp	r5, r1
+	bcs	.L1993
+	mov	r7, r2
+	add	r3, r3, #1
+	ldrh	r6, [r7]
+	add	r2, r2, #2
+	cmp	r6, #0
+	bne	.L1990
+	mov	r4, r0
+	bl	FtlFreeSysBlkQueueOut
+	movw	r2, #65533
+	sub	r3, r0, #1
+	mov	r1, r0
+	strh	r0, [r7]	@ movhi
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L1991
+	ldr	r3, .L1997
+	ldr	r0, .L1997+4
+	ldrh	r2, [r3, #6]
+	bl	printk
+.L1992:
+	b	.L1992
+.L1991:
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r4, #28]
+	ldrh	r3, [r4, #8]
+	strh	r5, [r4]	@ movhi
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+.L1993:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1998:
+	.align	2
+.L1997:
+	.word	.LANCHOR2-2772
+	.word	.LC37
+	.fnend
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	fp, .L2018
+	mov	r8, r1
+	ldr	r9, .L2018+4
+	mov	r5, #0
+	str	r2, [sp]
+	mov	r10, fp
+.L2000:
+	ldr	r3, [fp, #-3124]
+	ldr	r6, .L2018
+	add	r3, r3, #1
+	str	r3, [fp, #-3124]
+	ldrh	r3, [r9]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	bge	.L2001
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2002
+.L2001:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L2002:
+	ldr	r1, [r10, #-2812]
+	cmp	r1, #0
+	bne	.L2003
+	ldrh	r3, [r4]
+	ldr	r2, [r4, #12]
+	ldr	r0, [fp, #-2976]
+	mov	r3, r3, asl #1
+	ldrh	r7, [r2, r3]
+	mov	r2, #16
+	ldrh	r3, [r4, #2]
+	str	r0, [fp, #-2796]
+	orr	r3, r3, r7, asl #10
+	str	r3, [fp, #-2804]
+	ldr	r3, [sp]
+	str	r3, [fp, #-2800]
+	bl	ftl_memset
+	ldr	r2, [r4, #28]
+	ldr	r3, [fp, #-2796]
+	str	r2, [r3, #4]
+	strh	r8, [r3, #8]	@ movhi
+	ldrh	r2, [r4, #4]
+	strh	r7, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	ldr	r2, .L2018+8
+	ldrb	r2, [r2]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2004
+	ldr	r2, .L2018+12
+	ldr	r0, [fp, #-2800]
+	str	r3, [sp, #4]
+	ldrh	r1, [r2]
+	bl	js_hash
+	ldr	r3, [sp, #4]
+	str	r0, [r3, #12]
+.L2004:
+	mov	r1, #1
+	ldr	r0, .L2018+16
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r10, #-2808]
+	cmn	r2, #1
+	bne	.L2005
+	ldr	r0, .L2018+20
+	add	r5, r5, #1
+	ldr	r1, [fp, #-2804]
+	bl	printk
+	ldrh	r3, [r4, #2]
+	uxth	r5, r5
+	cmp	r3, #2
+	ldrlsh	r3, [r9]
+	subls	r3, r3, #1
+	strlsh	r3, [r4, #2]	@ movhi
+	cmp	r5, #3
+	bls	.L2000
+	ldr	r0, .L2018+24
+	mov	r2, r5
+	ldr	r1, [r6, #-2804]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r6, #-2812]
+	b	.L2003
+.L2005:
+	cmp	r2, #0
+	strneh	r7, [r4, #40]	@ movhi
+	cmp	r2, #256
+	cmpne	r3, #1
+	beq	.L2009
+	ldr	r3, [r4, #36]
+	cmp	r3, #0
+	beq	.L2010
+.L2009:
+	mov	r3, #0
+	str	r3, [r4, #36]
+	b	.L2000
+.L2010:
+	ldr	r2, [r6, #-2804]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r8, asl #2]
+.L2003:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2019:
+	.align	2
+.L2018:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3198
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-2808
+	.word	.LC38
+	.word	.LC39
+	.fnend
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	r5, [r0, #12]
+	ldr	r7, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	sub	r3, r3, #4
+	ldr	r8, .L2034
+	cmp	r2, r3
+	blt	.L2021
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r10, [r5, r0]
+	cmp	r10, #0
+	beq	.L2021
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L2021
+	mov	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r5, r0]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r8, #-14]
+	cmp	r2, r3
+	bcc	.L2022
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L2022:
+	ldr	r5, .L2034+4
+	mov	fp, #0
+.L2023:
+	ldrh	r3, [r4, #6]
+	uxth	r6, fp
+	cmp	r3, r6
+	bls	.L2033
+	ldr	r3, [r7, r6, asl #2]
+	add	ip, r7, r6, asl #2
+	cmp	r10, r3, lsr #10
+	bne	.L2024
+	ldr	r3, [r5, #-3004]
+	mov	r1, #1
+	ldr	r9, [r5, #-2976]
+	mov	r2, r1
+	ldr	r0, .L2034+8
+	str	r3, [r5, #-2800]
+	str	r9, [r5, #-2796]
+	ldr	r3, [r7, r6, asl #2]
+	str	ip, [sp, #4]
+	str	r3, [r5, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r5, #-2808]
+	cmn	r3, #1
+	ldr	r3, .L2034+4
+	ldr	ip, [sp, #4]
+	bne	.L2025
+.L2027:
+	mov	r2, #0
+	ldr	r0, .L2034+12
+	str	r2, [ip]
+	ldr	r1, [r3, #-2804]
+	ldrh	r2, [r9, #8]
+	str	r3, [sp, #4]
+	bl	printk
+	mov	r2, #1
+	ldr	r3, [sp, #4]
+	str	r2, [r3, #-2812]
+	b	.L2026
+.L2025:
+	ldrh	r1, [r9, #8]
+	cmp	r1, r6
+	bne	.L2027
+	ldrh	r0, [r9]
+	ldrh	r2, [r4, #4]
+	cmp	r0, r2
+	bne	.L2027
+	mov	r0, r4
+	ldr	r2, [r5, #-2800]
+	bl	FtlMapWritePage
+.L2024:
+	add	fp, fp, #1
+	b	.L2023
+.L2033:
+	mov	r0, r10
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	mov	r3, #0
+	str	r3, [r4, #32]
+.L2021:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r8, #-14]
+	cmp	r2, r3
+	bcc	.L2026
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L2026:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2035:
+	.align	2
+.L2034:
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2808
+	.word	.LC40
+	.fnend
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	2
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	ldr	r5, .L2048
+	ldr	r7, [r0, #12]
+	ldr	r8, [r0, #24]
+	ldr	r6, [r5, #-2812]
+	cmp	r6, #0
+	bne	.L2037
+	ldrh	r3, [r0]
+	movw	r2, #65535
+	mov	r4, r0
+	cmp	r3, r2
+	bne	.L2038
+	ldrh	r3, [r0, #8]
+	add	r3, r3, #1
+	strh	r3, [r0, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	strh	r0, [r7]	@ movhi
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	add	r3, r3, #1
+	strh	r6, [r4]	@ movhi
+	str	r3, [r4, #28]
+	b	.L2037
+.L2038:
+	mov	r3, r3, asl #1
+	sub	r10, r5, #3184
+	mov	r1, #255
+	ldrh	r9, [r7, r3]
+	ldrh	r3, [r0, #2]
+	ldr	r7, [r5, #-2976]
+	orr	r3, r3, r9, asl #10
+	str	r3, [r5, #-2804]
+	ldr	r3, [r5, #-3008]
+	str	r7, [r5, #-2796]
+	str	r3, [r5, #-2800]
+	ldr	r3, [r0, #28]
+	str	r3, [r7, #4]
+	ldr	r3, .L2048+4
+	strh	r3, [r7, #8]	@ movhi
+	ldrh	r3, [r0, #4]
+	strh	r9, [r7, #2]	@ movhi
+	strh	r3, [r7]	@ movhi
+	ldrh	r2, [r10, #-14]
+	ldr	r0, [r5, #-3008]
+	mov	r2, r2, asl #3
+	bl	ftl_memset
+	mov	r2, r6
+.L2039:
+	ldrh	r1, [r4, #6]
+	uxth	r3, r2
+	cmp	r1, r3
+	bls	.L2047
+	ldr	r1, [r8, r3, asl #2]
+	cmp	r9, r1, lsr #10
+	bne	.L2040
+	add	r6, r6, #1
+	ldr	r1, [r5, #-3008]
+	uxth	r6, r6
+	str	r3, [r1, r6, asl #3]
+	ldr	r1, [r8, r3, asl #2]
+	ldr	r3, [r5, #-3008]
+	add	r3, r3, r6, asl #3
+	str	r1, [r3, #4]
+.L2040:
+	add	r2, r2, #1
+	b	.L2039
+.L2047:
+	ldr	r3, .L2048+8
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2042
+	ldr	r0, [r5, #-2800]
+	ldrh	r1, [r10, #-6]
+	bl	js_hash
+	str	r0, [r7, #12]
+.L2042:
+	mov	r1, #1
+	mov	r3, #0
+	ldr	r0, .L2048+12
+	mov	r2, r1
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	add	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+.L2037:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2049:
+	.align	2
+.L2048:
+	.word	.LANCHOR2
+	.word	-1291
+	.word	.LANCHOR0
+	.word	.LANCHOR2-2808
+	.fnend
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, #12
+	ldr	r5, .L2052
+	mul	r4, r4, r0
+	sub	r0, r5, #504
+	ldr	r3, [r5, #-2896]
+	add	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #-2896]
+	mov	r0, #0
+	add	r4, r3, r4
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2053:
+	.align	2
+.L2052:
+	.word	.LANCHOR2
+	.fnend
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	select_l2p_ram_region
+	.type	select_l2p_ram_region, %function
+select_l2p_ram_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2070
+	mov	r1, #0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	sub	r2, r3, #3152
+	ldr	r3, [r3, #-2896]
+	mov	ip, #12
+	ldrh	r2, [r2, #-10]
+	movw	lr, #65535
+.L2055:
+	uxth	r0, r1
+	cmp	r0, r2
+	bcs	.L2067
+	add	r1, r1, #1
+	mla	r4, ip, r1, r3
+	ldrh	r4, [r4, #-12]
+	cmp	r4, lr
+	bne	.L2055
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2067:
+	mov	r0, r2
+	mov	r1, #0
+	mov	ip, #-2147483648
+	mov	r5, #12
+.L2058:
+	uxth	r4, r1
+	cmp	r4, r2
+	bcs	.L2068
+	mla	lr, r5, r1, r3
+	add	r1, r1, #1
+	ldr	lr, [lr, #4]
+	cmp	lr, ip
+	mvn	r6, lr
+	mov	r6, r6, lsr #31
+	movcs	r6, #0
+	cmp	r6, #0
+	movne	ip, lr
+	movne	r0, r4
+	b	.L2058
+.L2068:
+	cmp	r0, r2
+	ldmccfd	sp!, {r4, r5, r6, pc}
+	ldr	r1, .L2070+4
+	mov	r0, r2
+	mvn	ip, #0
+	ldrh	r5, [r1]
+	mov	r1, #0
+.L2061:
+	uxth	lr, r1
+	cmp	lr, r2
+	bcs	.L2069
+	ldr	r4, [r3, #4]
+	cmp	r4, ip
+	bcs	.L2062
+	ldrh	r6, [r3]
+	cmp	r6, r5
+	movne	ip, r4
+	movne	r0, lr
+.L2062:
+	add	r1, r1, #1
+	add	r3, r3, #12
+	b	.L2061
+.L2069:
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2071:
+	.align	2
+.L2070:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-460
+	.fnend
+	.size	select_l2p_ram_region, .-select_l2p_ram_region
+	.align	2
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, .L2089
+	sub	r3, r6, #3184
+	str	r3, [sp, #8]
+	ldr	ip, [r6, #-2816]
+	ldrh	r10, [r3, #-8]
+	cmp	r0, ip
+	bcs	.L2073
+	add	r10, r10, #7
+	mov	fp, r6
+	mov	r6, r0, lsr r10
+	sub	r3, fp, #3152
+	str	r2, [sp, #12]
+	mov	r9, r1
+	ldrh	r2, [r3, #-10]
+	uxth	r6, r6
+	str	r0, [sp, #4]
+	mov	r3, #0
+	ldr	r4, [fp, #-2896]
+	mov	r1, #12
+	b	.L2074
+.L2073:
+	cmp	r2, #0
+	mvn	r0, #0
+	streq	r0, [r1]
+	b	.L2075
+.L2079:
+	add	r3, r3, #1
+	mla	r0, r1, r3, r4
+	ldrh	r0, [r0, #-12]
+	cmp	r0, r6
+	beq	.L2076
+.L2074:
+	uxth	r7, r3
+	cmp	r7, r2
+	bcc	.L2079
+	bl	select_l2p_ram_region
+	mov	r5, #12
+	movw	r2, #65535
+	mul	r5, r5, r0
+	mov	r7, r0
+	add	r3, r4, r5
+	ldrh	r1, [r4, r5]
+	cmp	r1, r2
+	bne	.L2088
+.L2080:
+	ldr	r3, [fp, #-2908]
+	ldr	r4, .L2089
+	ldr	r8, [r3, r6, asl #2]
+	cmp	r8, #0
+	bne	.L2081
+	ldr	r2, [r4, #-2896]
+	mov	r1, #255
+	ldr	r3, [sp, #8]
+	add	r2, r2, r5
+	ldr	r0, [r2, #8]
+	ldrh	r2, [r3, #-6]
+	bl	ftl_memset
+	ldr	r2, [r4, #-2896]
+	strh	r6, [r2, r5]	@ movhi
+	ldr	r2, [r4, #-2896]
+	add	r5, r2, r5
+	str	r8, [r5, #4]
+.L2076:
+	ldr	r3, [sp, #4]
+	mvn	r2, #0
+	bic	r10, r3, r2, asl r10
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	uxth	r10, r10
+	mov	r3, #12
+	bne	.L2077
+	ldr	r2, [fp, #-2896]
+	mla	r3, r3, r7, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r10, asl #2]
+	str	r3, [r9]
+	b	.L2078
+.L2077:
+	mul	r3, r3, r7
+	ldr	r2, [fp, #-2896]
+	ldr	r1, [r9]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r10, asl #2]
+	ldr	r2, [fp, #-2896]
+	add	r3, r2, r3
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+	ldr	r3, .L2089+4
+	strh	r6, [r3]	@ movhi
+.L2078:
+	ldr	r2, [fp, #-2896]
+	mov	r3, #12
+	mov	r0, #0
+	mla	r7, r3, r7, r2
+	ldr	r3, [r7, #4]
+	cmn	r3, #1
+	addne	r3, r3, #1
+	strne	r3, [r7, #4]
+	b	.L2075
+.L2088:
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L2080
+	bl	flush_l2p_region
+	b	.L2080
+.L2081:
+	ldr	r2, [r4, #-2896]
+	mov	r1, #1
+	ldr	r0, .L2089+8
+	add	r2, r2, r5
+	str	r8, [r4, #-2804]
+	ldr	r2, [r2, #8]
+	str	r2, [r4, #-2800]
+	ldr	r2, [r4, #-2976]
+	str	r2, [r4, #-2796]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [r4, #-2796]
+	ldrh	r2, [r2, #8]
+	cmp	r2, r6
+	beq	.L2082
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r0, .L2089+12
+	bl	printk
+	mov	r2, #4
+	mov	r3, r2
+	ldr	r0, .L2089+16
+	ldr	r1, [r4, #-2796]
+	bl	rknand_print_hex
+	sub	r3, r4, #3152
+	ldr	r0, .L2089+20
+	mov	r2, #4
+	ldrh	r3, [r3, #-12]
+	ldr	r1, [r4, #-2908]
+	bl	rknand_print_hex
+	mov	r3, #1
+	str	r3, [r4, #-2812]
+	b	.L2083
+.L2082:
+	ldr	r2, [r4, #-2808]
+	cmp	r2, #256
+	bne	.L2083
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r0, .L2089+24
+	bl	printk
+	ldr	r3, [r4, #-2896]
+	sub	r0, r4, #504
+	mov	r1, r6
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+.L2083:
+	ldr	r3, [fp, #-2896]
+	mov	r1, #0
+	add	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L2076
+.L2075:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2090:
+	.align	2
+.L2089:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-460
+	.word	.LANCHOR2-2808
+	.word	.LC41
+	.word	.LC17
+	.word	.LC42
+	.word	.LC43
+	.fnend
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlVendorPartWrite
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2103
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r2
+	ldr	r6, .L2103+4
+	.pad #68
+	sub	sp, sp, #68
+	ldr	r2, [r3]
+	mov	r4, r1
+	add	r1, r0, r1
+	mov	r7, r0
+	ldrh	r5, [r6, #-8]
+	str	r2, [sp, #60]
+	ldrh	r2, [r6, #-20]
+	str	r3, [sp, #12]
+	cmp	r1, r2
+	mvnhi	r0, #0
+	bhi	.L2092
+	mov	r5, r7, lsr r5
+	mov	r3, #0
+	str	r3, [sp, #4]
+	add	r3, r6, #3184
+	mov	r10, r5, asl #2
+	str	r3, [sp, #8]
+	mov	r8, r3
+.L2093:
+	cmp	r4, #0
+	beq	.L2102
+	ldr	r3, [sp, #8]
+	mov	r0, r7
+	ldr	r3, [r3, #-2912]
+	ldr	ip, [r3, r10]
+	ldr	r3, .L2103+8
+	str	ip, [sp, #20]
+	ldrh	r2, [r3]
+	mov	r1, r2
+	str	r2, [sp, #16]
+	bl	__aeabi_uidivmod
+	ldr	r2, [sp, #16]
+	mov	r9, r1
+	ldr	ip, [sp, #20]
+	rsb	r3, r1, r2
+	uxth	r6, r3
+	cmp	r6, r4
+	uxthhi	r6, r4
+	cmp	r6, r2
+	cmpne	ip, #0
+	movne	r1, #1
+	moveq	r1, #0
+	beq	.L2095
+	ldr	r2, [r8, #-3000]
+	mov	r1, #1
+	add	r0, sp, #24
+	str	ip, [sp, #28]
+	str	r2, [sp, #32]
+	mov	r2, #0
+	str	r2, [sp, #36]
+	mov	r2, r1
+	bl	FlashReadPages
+	b	.L2096
+.L2095:
+	ldr	r2, .L2103+12
+	ldr	r0, [r8, #-3000]
+	ldrh	r2, [r2]
+	bl	ftl_memset
+.L2096:
+	mov	ip, r6, asl #9
+	ldr	r0, [r8, #-3000]
+	uxth	r9, r9
+	mov	r1, fp
+	mov	r2, ip
+	str	ip, [sp, #16]
+	add	r0, r0, r9, asl #9
+	rsb	r4, r6, r4
+	bl	ftl_memcpy
+	mov	r1, r5
+	ldr	r0, .L2103+16
+	add	r5, r5, #1
+	ldr	r2, [r8, #-3000]
+	add	r7, r7, r6
+	bl	FtlMapWritePage
+	add	r10, r10, #4
+	ldr	r3, [sp, #4]
+	cmn	r0, #1
+	ldr	ip, [sp, #16]
+	mvneq	r3, #0
+	add	fp, fp, ip
+	str	r3, [sp, #4]
+	b	.L2093
+.L2102:
+	ldr	r0, [sp, #4]
+.L2092:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #60]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2099
+	bl	__stack_chk_fail
+.L2099:
+	add	sp, sp, #68
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2104:
+	.align	2
+.L2103:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2-3194
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-456
+	.fnend
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	2
+	.global	FtlVendorPartRead
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2118
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r2
+	ldr	r5, .L2118+4
+	.pad #60
+	sub	sp, sp, #60
+	ldr	r2, [r3]
+	mov	r6, r1
+	add	r1, r0, r1
+	mov	r7, r0
+	ldrh	r4, [r5, #-8]
+	str	r2, [sp, #52]
+	ldrh	r2, [r5, #-20]
+	str	r3, [sp, #12]
+	cmp	r1, r2
+	mvnhi	r0, #0
+	bhi	.L2106
+	add	r5, r5, #3184
+	mov	r4, r7, lsr r4
+	mov	fp, r5
+	mov	r3, r4, asl #2
+	str	r3, [sp, #4]
+	mov	r3, #0
+	str	r3, [sp]
+.L2107:
+	cmp	r6, #0
+	beq	.L2117
+	ldr	r3, [r5, #-2912]
+	mov	r0, r7
+	ldr	r2, [sp, #4]
+	ldr	r9, [r3, r2]
+	ldr	r3, .L2118+8
+	ldrh	r10, [r3]
+	mov	r1, r10
+	bl	__aeabi_uidivmod
+	rsb	r3, r1, r10
+	str	r1, [sp, #8]
+	uxth	r10, r3
+	cmp	r10, r6
+	uxthhi	r10, r6
+	cmp	r9, #0
+	beq	.L2109
+	ldr	r2, [fp, #-3000]
+	mov	r1, #1
+	add	r0, sp, #16
+	str	r9, [sp, #20]
+	str	r2, [sp, #24]
+	mov	r2, #0
+	str	r2, [sp, #28]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [sp, #16]
+	ldr	r3, [sp]
+	cmn	r2, #1
+	ldr	r2, [fp, #-2808]
+	mvneq	r3, #0
+	cmp	r2, #256
+	str	r3, [sp]
+	bne	.L2111
+	mov	r1, r4
+	mov	r2, r9
+	ldr	r0, .L2118+12
+	bl	printk
+	ldr	r0, .L2118+16
+	mov	r1, r4
+	ldr	r2, [r5, #-3000]
+	bl	FtlMapWritePage
+.L2111:
+	ldrh	r9, [sp, #8]
+	mov	r0, r8
+	ldr	r1, [fp, #-3000]
+	mov	r2, r10, asl #9
+	add	r1, r1, r9, asl #9
+	bl	ftl_memcpy
+	b	.L2112
+.L2109:
+	mov	r0, r8
+	mov	r1, r9
+	mov	r2, r10, asl #9
+	bl	ftl_memset
+.L2112:
+	ldr	r3, [sp, #4]
+	add	r4, r4, #1
+	rsb	r6, r10, r6
+	add	r7, r7, r10
+	add	r3, r3, #4
+	add	r8, r8, r10, asl #9
+	str	r3, [sp, #4]
+	b	.L2107
+.L2117:
+	ldr	r0, [sp]
+.L2106:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2114
+	bl	__stack_chk_fail
+.L2114:
+	add	sp, sp, #60
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2119:
+	.align	2
+.L2118:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2-3194
+	.word	.LC44
+	.word	.LANCHOR2-456
+	.fnend
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
+	.align	2
+	.global	FtlUpdateVaildLpn
+	.type	FtlUpdateVaildLpn, %function
+FtlUpdateVaildLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2128
+	sub	r1, r3, #412
+	ldrh	r2, [r1]
+	cmp	r2, #4
+	cmpls	r0, #0
+	addeq	r2, r2, #1
+	streqh	r2, [r1]	@ movhi
+	bxeq	lr
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	r2, #0
+	strh	r2, [r1]	@ movhi
+	sub	r1, r3, #3248
+	str	r2, [r3, #-408]
+	movw	ip, #65535
+	ldrh	r0, [r1, #-12]
+	ldr	r2, [r3, #-2940]
+	add	r0, r2, r0, asl #1
+.L2122:
+	cmp	r2, r0
+	beq	.L2127
+	ldrh	r1, [r2], #2
+	cmp	r1, ip
+	ldrne	lr, [r3, #-408]
+	addne	r1, r1, lr
+	strne	r1, [r3, #-408]
+	b	.L2122
+.L2127:
+	ldr	pc, [sp], #4
+.L2129:
+	.align	2
+.L2128:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
+	.align	2
+	.global	FtlMapBlkWriteDumpData
+	.type	FtlMapBlkWriteDumpData, %function
+FtlMapBlkWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r2, [r0, #36]
+	ldrh	r5, [r0, #6]
+	cmp	r2, #0
+	ldr	r3, [r0, #24]
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	ldr	r4, .L2137
+	mov	r2, #0
+	str	r2, [r0, #36]
+	ldr	r2, [r4, #-2812]
+	cmp	r2, #0
+	ldmnefd	sp!, {r4, r5, r6, pc}
+	sub	r5, r5, #1
+	mov	r6, r0
+	ldr	r2, [r4, #-2976]
+	ldr	r0, [r4, #-3004]
+	uxth	r5, r5
+	str	r2, [r4, #-2796]
+	str	r0, [r4, #-2800]
+	ldr	r3, [r3, r5, asl #2]
+	cmp	r3, #0
+	str	r3, [r4, #-2804]
+	beq	.L2134
+	mov	r1, #1
+	ldr	r0, .L2137+4
+	mov	r2, r1
+	bl	FlashReadPages
+	b	.L2135
+.L2134:
+	sub	r3, r4, #3184
+	mov	r1, #255
+	ldrh	r2, [r3, #-6]
+	bl	ftl_memset
+.L2135:
+	mov	r0, r6
+	mov	r1, r5
+	ldr	r2, [r4, #-2800]
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	FtlMapWritePage
+.L2138:
+	.align	2
+.L2137:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2808
+	.fnend
+	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
+	.align	2
+	.global	FtlVpcTblFlush
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L2157
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	bne	.L2141
+	ldr	r2, [r4, #-3008]
+	sub	r7, r4, #404
+	ldr	r6, [r4, #-2976]
+	sub	r5, r4, #716
+	mov	r1, #255
+	str	r2, [r4, #-2800]
+	ldrh	r2, [r7]
+	str	r6, [r4, #-2796]
+	str	r3, [r6, #12]
+	strh	r2, [r6, #2]	@ movhi
+	ldr	r2, .L2157+4
+	strh	r2, [r6]	@ movhi
+	ldr	r2, [r4, #-396]
+	stmib	r6, {r2, r3}
+	ldr	r3, .L2157+8
+	str	r3, [r4, #-716]
+	ldr	r3, .L2157+12
+	str	r3, [r4, #-712]
+	ldrh	r3, [r7, #6]
+	strh	r3, [r5, #8]	@ movhi
+	sub	r3, r4, #3232
+	ldrh	r3, [r3, #-14]
+	strb	r3, [r4, #-706]
+	sub	r3, r4, #648
+	ldrh	r2, [r3]
+	strh	r2, [r5, #14]	@ movhi
+	ldrh	r2, [r3, #2]
+	ldrb	r3, [r4, #-642]	@ zero_extendqisi2
+	orr	r3, r3, r2, asl #6
+	strh	r3, [r5, #16]	@ movhi
+	ldrb	r3, [r4, #-640]	@ zero_extendqisi2
+	strb	r3, [r4, #-705]
+	sub	r3, r4, #600
+	ldrh	r2, [r3]
+	strh	r2, [r5, #18]	@ movhi
+	ldrh	r2, [r3, #2]
+	ldrb	r3, [r4, #-594]	@ zero_extendqisi2
+	orr	r3, r3, r2, asl #6
+	strh	r3, [r5, #20]	@ movhi
+	ldrb	r3, [r4, #-592]	@ zero_extendqisi2
+	strb	r3, [r4, #-704]
+	sub	r3, r4, #552
+	ldrh	r2, [r3]
+	strh	r2, [r5, #22]	@ movhi
+	ldrh	r2, [r3, #2]
+	ldrb	r3, [r4, #-546]	@ zero_extendqisi2
+	ldr	r0, [r4, #-2800]
+	orr	r3, r3, r2, asl #6
+	strh	r3, [r5, #24]	@ movhi
+	ldrb	r3, [r4, #-544]	@ zero_extendqisi2
+	strb	r3, [r4, #-703]
+	ldr	r3, [r4, #-3116]
+	str	r3, [r4, #-684]
+	ldr	r3, [r4, #-3148]
+	str	r3, [r4, #-676]
+	ldr	r3, [r4, #-3144]
+	str	r3, [r4, #-680]
+	sub	r3, r4, #3072
+	ldrh	r3, [r3]
+	strh	r3, [r5, #44]	@ movhi
+	sub	r3, r4, #3056
+	ldrh	r3, [r3, #-14]
+	strh	r3, [r5, #46]	@ movhi
+	sub	r3, r4, #3184
+	ldrh	r2, [r3, #-6]
+	bl	ftl_memset
+	mov	r1, r5
+	sub	r5, r4, #3248
+	mov	r2, #48
+	ldr	r0, [r4, #-2800]
+	bl	ftl_memcpy
+	ldrh	r2, [r5, #-12]
+	ldr	r0, [r4, #-2800]
+	ldr	r1, [r4, #-2940]
+	mov	r2, r2, asl #1
+	add	r0, r0, #48
+	bl	ftl_memcpy
+	ldrh	r2, [r5, #-12]
+	ldr	r0, [r4, #-2800]
+	add	r3, r2, #24
+	ldr	r1, [r4, #-2928]
+	ubfx	r3, r3, #1, #30
+	mov	r2, r2, lsr #3
+	add	r2, r2, #4
+	add	r0, r0, r3, asl #2
+	bl	ftl_memcpy
+	sub	r2, r4, #3152
+	ldrh	r3, [r2, #-8]
+	cmp	r3, #0
+	beq	.L2142
+	ldrh	r1, [r5, #-12]
+	ldrh	r2, [r2, #-12]
+	ldr	r0, [r4, #-2800]
+	mov	r3, r1, lsr #3
+	add	r3, r3, r1, asl #1
+	mov	r2, r2, asl #2
+	add	r3, r3, #52
+	ldr	r1, [r4, #-2908]
+	ubfx	r3, r3, #2, #14
+	add	r0, r0, r3, asl #2
+	bl	ftl_memcpy
+.L2142:
+	mov	r0, #0
+	ldr	r8, .L2157
+	bl	FtlUpdateVaildLpn
+	ldr	r10, .L2157+16
+	ldr	fp, .L2157+20
+	mov	r5, #0
+	movw	r9, #65535
+.L2143:
+	ldrh	r1, [r7]
+	ldrh	r0, [r7, #2]
+	ldr	r3, [r4, #-3008]
+	orr	r2, r0, r1, asl #10
+	str	r2, [r4, #-2804]
+	ldrh	r2, [r10]
+	str	r3, [r4, #-2800]
+	sub	r2, r2, #1
+	ldr	r3, [r4, #-2976]
+	cmp	r0, r2
+	str	r3, [r4, #-2796]
+	ldr	r3, .L2157+24
+	blt	.L2144
+	ldrh	r9, [r3, #4]
+	mov	r2, #0
+	strh	r1, [r3, #4]	@ movhi
+	strh	r2, [r3, #2]	@ movhi
+	str	r3, [sp, #4]
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, [sp, #4]
+	strh	r0, [r3]	@ movhi
+	ldr	r3, [r8, #-3148]
+	add	r2, r3, #1
+	str	r2, [r8, #-3148]
+	str	r3, [r8, #-396]
+	mov	r2, r0, asl #10
+	str	r2, [r8, #-2804]
+	str	r3, [r6, #4]
+	strh	r0, [r6, #2]	@ movhi
+.L2144:
+	ldrb	r3, [fp]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2145
+	ldr	r3, .L2157+28
+	ldr	r0, [r4, #-3008]
+	ldrh	r1, [r3]
+	bl	js_hash
+	str	r0, [r6, #12]
+.L2145:
+	mov	r1, #1
+	ldr	r0, .L2157+32
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r3, [r7, #2]
+	ldr	r2, [r4, #-2808]
+	add	r3, r3, #1
+	cmn	r2, #1
+	uxth	r3, r3
+	strh	r3, [r7, #2]	@ movhi
+	bne	.L2146
+	cmp	r3, #1
+	add	r5, r5, #1
+	ldreqh	r3, [r10]
+	uxth	r5, r5
+	ldreq	r2, .L2157+24
+	subeq	r3, r3, #1
+	streqh	r3, [r2, #2]	@ movhi
+	cmp	r5, #3
+	bls	.L2143
+	ldr	r0, .L2157+36
+	mov	r2, r5
+	ldr	r1, [r4, #-2804]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r4, #-2812]
+	b	.L2141
+.L2146:
+	cmp	r2, #256
+	cmpne	r3, #1
+	beq	.L2143
+	movw	r3, #65535
+	cmp	r9, r3
+	beq	.L2141
+	mov	r0, r9
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L2141:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2158:
+	.align	2
+.L2157:
+	.word	.LANCHOR2
+	.word	-3932
+	.word	1179929683
+	.word	1342177367
+	.word	.LANCHOR2-3198
+	.word	.LANCHOR0
+	.word	.LANCHOR2-404
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-2808
+	.word	.LC45
+	.fnend
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.align	2
+	.global	FtlScanSysBlk
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, #0
+	ldr	r10, .L2245
+	mov	r1, fp
+	.pad #28
+	sub	sp, sp, #28
+	sub	r3, r10, #2816
+	sub	r5, r10, #388
+	ldr	r2, [r10, #-3172]
+	sub	r4, r10, #3168
+	ldr	r0, [r10, #-2900]
+	strh	fp, [r3, #-4]	@ movhi
+	mov	r2, r2, asl #2
+	strh	fp, [r5]	@ movhi
+	bl	ftl_memset
+	ldr	r2, [r10, #-3172]
+	mov	r1, fp
+	ldr	r0, [r10, #-2936]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r4, #-12]
+	mov	r1, fp
+	ldr	r0, [r10, #-2916]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r4, #-12]
+	mov	r1, fp
+	ldr	r0, [r10, #-2924]
+	mov	r4, r10
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	sub	r0, r10, #404
+	mov	r1, #255
+	mov	r2, #16
+	bl	ftl_memset
+	sub	r3, r10, #3248
+	ldrh	fp, [r3, #-12]
+	str	r5, [sp, #12]
+	mov	r5, r10
+.L2160:
+	ldr	r3, .L2245+4
+	ldr	r1, .L2245
+	ldrh	r3, [r3]
+	cmp	r3, fp
+	bls	.L2201
+	ldr	r1, [r5, #-2968]
+	mov	r6, #0
+	ldr	r3, .L2245+8
+	mov	r8, r6
+	ldr	r2, [r5, #-3036]
+	mov	r7, #36
+	str	r1, [sp]
+	ldr	r1, .L2245+12
+	ldrh	ip, [r3]
+	ldr	r3, [r5, #-2996]
+	sub	r9, r1, #52
+	ldrh	r10, [r1]
+.L2202:
+	uxth	r1, r6
+	cmp	r1, ip
+	bcs	.L2240
+	mov	r1, fp
+	ldrb	r0, [r9, r6]	@ zero_extendqisi2
+	str	r3, [sp, #20]
+	str	r2, [sp, #16]
+	str	ip, [sp, #8]
+	bl	V2P_block
+	str	r0, [sp, #4]
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldmib	sp, {r1, ip}
+	ldr	r2, [sp, #16]
+	ldr	r3, [sp, #20]
+	bne	.L2161
+	mla	r0, r7, r8, r2
+	mov	r1, r1, asl #10
+	stmib	r0, {r1, r3}
+	mul	r1, r10, r8
+	add	r8, r8, #1
+	uxth	r8, r8
+	add	lr, r1, #3
+	cmp	r1, #0
+	movlt	r1, lr
+	ldr	lr, [sp]
+	bic	r1, r1, #3
+	add	r1, lr, r1
+	str	r1, [r0, #12]
+.L2161:
+	add	r6, r6, #1
+	b	.L2202
+.L2240:
+	cmp	r8, #0
+	beq	.L2164
+	ldr	r0, [r4, #-3036]
+	mov	r1, r8
+	mov	r2, #1
+	bl	FlashReadPages
+	mov	r3, #0
+.L2238:
+	str	r3, [sp]
+	ldrh	r3, [sp]
+	cmp	r3, r8
+	bcs	.L2164
+	ldr	r3, [sp]
+	mov	r9, #36
+	mul	r9, r9, r3
+	ldr	r3, [r4, #-3036]
+	add	r2, r3, r9
+	ldr	r3, [r3, r9]
+	ldr	r6, [r2, #4]
+	cmn	r3, #1
+	ldr	r7, [r2, #12]
+	ubfx	r6, r6, #10, #16
+	bne	.L2167
+	mov	r10, #16
+	movw	ip, #65535
+.L2166:
+	ldr	r0, [r4, #-3036]
+	mov	r1, #1
+	mov	r2, r1
+	str	ip, [sp, #4]
+	add	r0, r0, r9
+	ldr	r3, [r0, #4]
+	add	r3, r3, #1
+	str	r3, [r0, #4]
+	bl	FlashReadPages
+	ldrh	r3, [r7]
+	ldr	ip, [sp, #4]
+	cmp	r3, ip
+	ldreq	r3, .L2245
+	mvneq	r2, #0
+	ldreq	r3, [r3, #-3036]
+	streq	r2, [r3, r9]
+	beq	.L2167
+.L2168:
+	ldr	r3, [r5, #-3036]
+	ldr	r3, [r3, r9]
+	cmn	r3, #1
+	bne	.L2167
+	sub	r10, r10, #1
+	uxth	r10, r10
+	cmp	r10, #0
+	bne	.L2166
+.L2167:
+	ldr	r3, [r5, #-3036]
+	ldr	r3, [r3, r9]
+	ldr	r9, .L2245
+	cmn	r3, #1
+	beq	.L2170
+	ldr	r2, [r5, #-3148]
+	ldr	r3, [r7, #4]
+	cmn	r2, #1
+	beq	.L2171
+	cmp	r2, r3
+	bhi	.L2172
+.L2171:
+	cmn	r3, #1
+	addne	r2, r3, #1
+	strne	r2, [r9, #-3148]
+.L2172:
+	ldrh	r2, [r7]
+	movw	r1, #61604
+	cmp	r2, r1
+	beq	.L2174
+	bhi	.L2175
+	movw	r3, #61574
+	cmp	r2, r3
+	bne	.L2173
+	ldr	r2, .L2245+16
+	ldr	lr, [r4, #-2916]
+	ldrh	ip, [r2]
+	add	r2, r2, #360
+	sub	r0, ip, #1
+	ldrh	r1, [r2]
+	uxth	r3, r0
+	rsb	r2, r1, r0
+	str	r2, [sp, #4]
+	b	.L2188
+.L2175:
+	movw	r3, #61634
+	cmp	r2, r3
+	beq	.L2177
+	movw	r3, #65535
+	cmp	r2, r3
+	moveq	r0, r6
+	beq	.L2239
+	b	.L2173
+.L2177:
+	ldr	ip, [r4, #-3172]
+	ldr	r2, [sp, #12]
+	ldr	lr, [r4, #-2900]
+	uxth	r1, ip
+	ldrh	r2, [r2]
+	sub	r3, r1, #1
+	rsb	r1, r2, r1
+	uxth	r3, r3
+	sub	r1, r1, #1
+	sxth	r1, r1
+	str	r1, [sp, #8]
+.L2179:
+	ldr	r1, [sp, #8]
+	sxth	r0, r3
+	cmp	r0, r1
+	ble	.L2241
+	mov	r10, r0, asl #2
+	ldr	r1, [r7, #4]
+	str	r10, [sp, #4]
+	ldr	r10, [lr, r0, asl #2]
+	cmp	r1, r10
+	bls	.L2180
+	ldr	r1, [lr]
+	cmp	r1, #0
+	bne	.L2181
+	cmp	r2, ip
+	addne	r2, r2, #1
+	ldrne	r1, .L2245+20
+	strneh	r2, [r1]	@ movhi
+.L2181:
+	uxth	lr, r3
+	mov	r1, #0
+.L2182:
+	uxth	r2, r1
+	cmp	r2, lr
+	bcs	.L2242
+	ldr	ip, [r5, #-2900]
+	sxth	r2, r2
+	add	r1, r1, #1
+	add	r10, ip, r2, asl #2
+	ldr	r10, [r10, #4]
+	str	r10, [ip, r2, asl #2]
+	mov	r2, r2, asl #1
+	ldr	ip, [r5, #-2936]
+	add	r10, ip, r2
+	ldrh	r10, [r10, #2]
+	strh	r10, [ip, r2]	@ movhi
+	b	.L2182
+.L2242:
+	ldr	r2, [r9, #-2900]
+	mov	r0, r0, asl #1
+	ldr	r1, [r7, #4]
+	ldr	ip, [sp, #4]
+	str	r1, [r2, ip]
+	ldr	r2, [r9, #-2936]
+	strh	r6, [r2, r0]	@ movhi
+	sxth	r0, r3
+	cmp	r0, #0
+	bge	.L2184
+	b	.L2173
+.L2180:
+	sub	r3, r3, #1
+	uxth	r3, r3
+	b	.L2179
+.L2241:
+	cmp	r0, #0
+	bge	.L2215
+	b	.L2173
+.L2184:
+	ldr	r2, .L2245+20
+	ldr	r1, [r5, #-3172]
+	ldrh	r2, [r2]
+	rsb	r1, r2, r1
+	sub	r1, r1, #1
+	sxth	r1, r1
+	cmp	r0, r1
+	bgt	.L2173
+.L2215:
+	ldr	r1, .L2245+20
+	add	r2, r2, #1
+	sxth	r3, r3
+	strh	r2, [r1]	@ movhi
+	ldr	r2, [r4, #-2900]
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r4, #-2936]
+	b	.L2236
+.L2194:
+	mov	r10, r2, asl #2
+	ldr	r0, [r7, #4]
+	str	r10, [sp, #8]
+	ldr	r10, [lr, r2, asl #2]
+	cmp	r0, r10
+	bhi	.L2243
+	sub	r3, r3, #1
+	uxth	r3, r3
+.L2188:
+	ldr	r0, [sp, #4]
+	sxth	r2, r3
+	cmp	r2, r0
+	bgt	.L2194
+	b	.L2193
+.L2243:
+	ldr	r0, [lr]
+	cmp	r0, #0
+	bne	.L2190
+	cmp	r1, ip
+	addne	r1, r1, #1
+	ldrne	r0, .L2245+24
+	strneh	r1, [r0]	@ movhi
+.L2190:
+	uxth	lr, r3
+	mov	r0, #0
+.L2191:
+	uxth	r1, r0
+	cmp	r1, lr
+	bcs	.L2244
+	ldr	ip, [r5, #-2916]
+	sxth	r1, r1
+	add	r0, r0, #1
+	add	r10, ip, r1, asl #2
+	ldr	r10, [r10, #4]
+	str	r10, [ip, r1, asl #2]
+	mov	r1, r1, asl #1
+	ldr	ip, [r5, #-2924]
+	add	r10, ip, r1
+	ldrh	r10, [r10, #2]
+	strh	r10, [ip, r1]	@ movhi
+	b	.L2191
+.L2244:
+	ldr	r1, [r9, #-2916]
+	mov	r2, r2, asl #1
+	ldr	r0, [r7, #4]
+	ldr	ip, [sp, #8]
+	str	r0, [r1, ip]
+	ldr	r1, [r9, #-2924]
+	strh	r6, [r1, r2]	@ movhi
+.L2193:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L2173
+	ldr	r1, .L2245+24
+	sub	r0, r1, #360
+	ldrh	r2, [r1]
+	ldrh	r9, [r0]
+	sub	r9, r9, #1
+	rsb	r9, r2, r9
+	sxth	r9, r9
+	cmp	r3, r9
+	bgt	.L2173
+	add	r2, r2, #1
+	strh	r2, [r1]	@ movhi
+	ldr	r2, [r5, #-2916]
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r5, #-2924]
+.L2236:
+	strh	r6, [r2, r3]	@ movhi
+	b	.L2173
+.L2174:
+	ldr	r2, .L2245+28
+	ldrh	r1, [r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	ldreq	r2, .L2245+28
+	streqh	r6, [r2]	@ movhi
+	beq	.L2237
+	ldr	r3, .L2245+28
+	ldrh	r0, [r3, #4]
+	cmp	r0, r2
+	beq	.L2196
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L2196:
+	ldr	r3, [r7, #4]
+	ldr	r2, [r9, #-396]
+	cmp	r2, r3
+	ldr	r3, .L2245+28
+	strcsh	r6, [r3, #4]	@ movhi
+	bcs	.L2173
+	ldrh	r3, [r3]
+	ldr	r2, .L2245+28
+	strh	r3, [r2, #4]	@ movhi
+	ldr	r3, [r7, #4]
+	strh	r6, [r2]	@ movhi
+.L2237:
+	str	r3, [r5, #-396]
+	b	.L2173
+.L2170:
+	ldr	r3, .L2245+32
+	mov	r0, r6
+	ldrb	r1, [r3, #3904]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L2198
+.L2239:
+	mov	r1, #0
+.L2198:
+	bl	FtlFreeSysBlkQueueIn
+.L2173:
+	ldr	r3, [sp]
+	add	r3, r3, #1
+	b	.L2238
+.L2164:
+	add	r8, fp, #1
+	uxth	fp, r8
+	b	.L2160
+.L2201:
+	ldr	ip, [r1, #-2936]
+	ldrh	r2, [ip]
+	cmp	r2, #0
+	beq	.L2203
+.L2206:
+	ldr	r0, [r1, #-2924]
+	ldrh	r2, [r0]
+	cmp	r2, #0
+	beq	.L2204
+	b	.L2227
+.L2203:
+	sub	r3, r1, #388
+	ldrh	r3, [r3]
+	cmp	r3, #0
+	ldrne	lr, [r1, #-3172]
+	beq	.L2206
+.L2207:
+	uxth	r3, r2
+	sxth	r0, r3
+	cmp	r0, lr
+	bcs	.L2206
+	mov	r4, r0, asl #1
+	add	r2, r2, #1
+	ldrh	r4, [ip, r4]
+	cmp	r4, #0
+	beq	.L2207
+	ldr	ip, .L2245
+	mov	r6, #0
+.L2208:
+	ldr	lr, [r1, #-3172]
+	sxth	r2, r3
+	cmp	r2, lr
+	bcs	.L2206
+	ldr	r4, [ip, #-2936]
+	mov	lr, r2, asl #1
+	rsb	r5, r0, r2
+	add	r3, r3, #1
+	ldrh	r8, [r4, lr]
+	mov	r7, r5, asl #1
+	uxth	r3, r3
+	strh	r8, [r4, r7]	@ movhi
+	ldr	r4, [ip, #-2900]
+	ldr	r2, [r4, r2, asl #2]
+	str	r2, [r4, r5, asl #2]
+	ldr	r2, [ip, #-2936]
+	strh	r6, [r2, lr]	@ movhi
+	b	.L2208
+.L2204:
+	ldr	r3, .L2245+36
+	ldrh	r1, [r3, #-4]
+	cmp	r1, #0
+	subne	r3, r3, #352
+	ldrneh	ip, [r3, #-12]
+	beq	.L2227
+.L2211:
+	uxth	r3, r2
+	sxth	r1, r3
+	cmp	r1, ip
+	bge	.L2227
+	mov	lr, r1, asl #1
+	add	r2, r2, #1
+	ldrh	lr, [r0, lr]
+	cmp	lr, #0
+	beq	.L2211
+	ldr	r0, .L2245
+	mov	r6, #0
+	ldr	r5, .L2245+16
+.L2212:
+	ldrh	ip, [r5]
+	sxth	r2, r3
+	cmp	r2, ip
+	bge	.L2227
+	ldr	lr, [r0, #-2924]
+	mov	ip, r2, asl #1
+	rsb	r4, r1, r2
+	add	r3, r3, #1
+	ldrh	r8, [lr, ip]
+	mov	r7, r4, asl #1
+	uxth	r3, r3
+	strh	r8, [lr, r7]	@ movhi
+	ldr	lr, [r0, #-2916]
+	ldr	r2, [lr, r2, asl #2]
+	str	r2, [lr, r4, asl #2]
+	ldr	r2, [r0, #-2924]
+	strh	r6, [r2, ip]	@ movhi
+	b	.L2212
+.L2227:
+	mov	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2246:
+	.align	2
+.L2245:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3258
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2-3188
+	.word	.LANCHOR2-3180
+	.word	.LANCHOR2-388
+	.word	.LANCHOR2-2820
+	.word	.LANCHOR2-404
+	.word	.LANCHOR0
+	.word	.LANCHOR2-2816
+	.fnend
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.align	2
+	.global	FtlLoadEctTbl
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #64
+	ldr	r4, .L2250
+	sub	r5, r4, #2960
+	ldr	r2, [r4, #-2952]
+	ldrh	r1, [r5]
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #-2952]
+	ldr	r2, [r3]
+	ldr	r3, .L2250+4
+	cmp	r2, r3
+	beq	.L2248
+	ldr	r1, .L2250+8
+	ldr	r0, .L2250+12
+	bl	printk
+	ldrh	r2, [r5]
+	ldr	r0, [r4, #-2952]
+	mov	r1, #0
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L2248:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2251:
+	.align	2
+.L2250:
+	.word	.LANCHOR2
+	.word	1112818501
+	.word	.LC47
+	.word	.LC46
+	.fnend
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
+	.align	2
+	.global	ftl_set_blk_mode
+	.type	ftl_set_blk_mode, %function
+ftl_set_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L2256
+	mov	r3, r0, lsr #5
+	cmp	r1, #0
+	and	r0, r0, #31
+	uxth	r3, r3
+	mov	ip, #1
+	ldr	r1, [r2, #-2928]
+	ldr	r2, [r1, r3, asl #2]
+	orrne	r0, r2, ip, asl r0
+	biceq	r0, r2, ip, asl r0
+	str	r0, [r1, r3, asl #2]
+	bx	lr
+.L2257:
+	.align	2
+.L2256:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
+	.align	2
+	.global	ftl_get_blk_mode
+	.type	ftl_get_blk_mode, %function
+ftl_get_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L2259
+	mov	r2, r0, lsr #5
+	and	r0, r0, #31
+	ldr	r3, [r3, #-2928]
+	ldr	r3, [r3, r2, asl #2]
+	mov	r0, r3, lsr r0
+	and	r0, r0, #1
+	bx	lr
+.L2260:
+	.align	2
+.L2259:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
+	.align	2
+	.global	FtlCheckVpc
+	.type	FtlCheckVpc, %function
+FtlCheckVpc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	mov	r4, #0
+	ldr	r6, .L2283
+	ldr	r1, .L2283+4
+	ldr	r0, .L2283+8
+	ldr	r3, [r6]
+	ldr	r5, .L2283+12
+	str	r3, [sp, #4]
+	bl	printk
+	ldr	r0, .L2283+16
+	mov	r1, #0
+	mov	r2, #8192
+	sub	r8, r5, #384
+	bl	memset
+.L2262:
+	ldr	r3, [r5, #-2816]
+	ldr	r7, .L2283+12
+	cmp	r4, r3
+	bcs	.L2281
+	mov	r0, r4
+	mov	r1, sp
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp]
+	cmn	r0, #1
+	beq	.L2263
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	mov	r0, r0, asl #1
+	ldrh	r3, [r8, r0]
+	add	r3, r3, #1
+	strh	r3, [r8, r0]	@ movhi
+.L2263:
+	add	r4, r4, #1
+	b	.L2262
+.L2281:
+	ldr	r5, .L2283+20
+	sub	r9, r7, #384
+	mov	r4, #0
+	mov	r8, r7
+.L2265:
+	ldrh	r3, [r5]
+	uxth	r1, r4
+	ldr	r2, .L2283+12
+	cmp	r3, r1
+	bls	.L2282
+	ldr	r2, [r8, #-2940]
+	mov	r3, r1, asl #1
+	ldrh	r2, [r2, r3]
+	ldrh	r3, [r9, r3]
+	cmp	r2, r3
+	beq	.L2266
+	ldr	r0, .L2283+24
+	bl	printk
+.L2266:
+	add	r4, r4, #1
+	b	.L2265
+.L2282:
+	ldr	r4, [r2, #-656]
+	cmp	r4, #0
+	beq	.L2261
+	sub	r3, r2, #652
+	sub	r9, r2, #384
+	mov	r5, #0
+	mov	r10, #6
+	ldrh	r8, [r3]
+	ldr	r3, [r2, #-2888]
+	rsb	r4, r3, r4
+	ldr	r3, .L2283+28
+	mov	r4, r4, asr #1
+	mul	r4, r3, r4
+	uxth	r4, r4
+.L2269:
+	uxth	r3, r5
+	cmp	r3, r8
+	bcs	.L2261
+	ldr	r2, [r7, #-2940]
+	mov	r3, r4, asl #1
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	beq	.L2270
+	ldr	r0, .L2283+32
+	mov	r1, r4
+	ldrh	r3, [r9, r3]
+	bl	printk
+.L2270:
+	mul	r4, r10, r4
+	ldr	r3, [r7, #-2888]
+	add	r5, r5, #1
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L2269
+.L2261:
+	ldr	r2, [sp, #4]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L2273
+	bl	__stack_chk_fail
+.L2273:
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2284:
+	.align	2
+.L2283:
+	.word	__stack_chk_guard
+	.word	.LANCHOR3+16
+	.word	.LC48
+	.word	.LANCHOR2
+	.word	.LANCHOR2-384
+	.word	.LANCHOR2-3260
+	.word	.LC49
+	.word	-1431655765
+	.word	.LC50
+	.fnend
+	.size	FtlCheckVpc, .-FtlCheckVpc
+	.align	2
+	.global	FtlDumpSysBlock
+	.type	FtlDumpSysBlock, %function
+FtlDumpSysBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r7, r0, asl #10
+	ldr	r4, .L2294
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r8, .L2294+4
+	mov	r6, r0
+	mov	r5, #0
+	ldr	r3, [r4, #-3008]
+	str	r3, [r4, #-2800]
+	ldr	r3, [r4, #-2976]
+	str	r3, [r4, #-2796]
+.L2286:
+	ldrh	r2, [r8]
+	sxth	r3, r5
+	cmp	r3, r2
+	bge	.L2293
+	mov	r1, #1
+	ldr	r0, .L2294+8
+	mov	r2, r1
+	orr	r3, r3, r7
+	str	r3, [r4, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r4, #-2796]
+	mov	r1, r6
+	ldr	r0, .L2294+12
+	ldr	r2, [r3]
+	str	r2, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #8]
+	ldr	r3, [r3, #12]
+	ldr	r2, [r4, #-2808]
+	str	r3, [sp, #12]
+	ldr	r3, [r4, #-2800]
+	ldr	r3, [r3]
+	str	r3, [sp, #16]
+	ldr	r3, [r4, #-2804]
+	bl	printk
+	ldr	r3, [r4, #-2796]
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L2287
+	ldr	r0, .L2294+16
+	mov	r2, #4
+	ldr	r1, [r4, #-3008]
+	mov	r3, #768
+	bl	rknand_print_hex
+.L2287:
+	add	r5, r5, #1
+	b	.L2286
+.L2293:
+	add	sp, sp, #24
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2295:
+	.align	2
+.L2294:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3198
+	.word	.LANCHOR2-2808
+	.word	.LC51
+	.word	.LC52
+	.fnend
+	.size	FtlDumpSysBlock, .-FtlDumpSysBlock
+	.align	2
+	.global	Ftlscanalldata
+	.type	Ftlscanalldata, %function
+Ftlscanalldata:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #32
+	sub	sp, sp, #32
+	ldr	r6, .L2307
+	mov	r1, #0
+	ldr	r0, .L2307+4
+	mov	r5, #0
+	ldr	r7, .L2307+8
+	ldr	r3, [r6]
+	mov	r4, r7
+	str	r3, [sp, #28]
+	bl	printk
+.L2297:
+	ldr	r3, [r7, #-2816]
+	cmp	r5, r3
+	bcs	.L2306
+	mov	r0, r5
+	add	r1, sp, #24
+	mov	r2, #0
+	bl	log2phys
+	ubfx	r3, r5, #0, #11
+	cmp	r3, #0
+	bne	.L2298
+	ldr	r0, .L2307+12
+	mov	r1, r5
+	ldr	r2, [sp, #24]
+	bl	printk
+.L2298:
+	ldr	r3, [sp, #24]
+	cmn	r3, #1
+	beq	.L2300
+	str	r3, [r4, #-2804]
+	mov	r2, #0
+	ldr	r3, [r4, #-3008]
+	mov	r1, #1
+	ldr	r8, [r4, #-2976]
+	ldr	r0, .L2307+16
+	str	r3, [r4, #-2800]
+	str	r5, [r4, #-2792]
+	str	r8, [r4, #-2796]
+	str	r2, [r4, #-2808]
+	bl	FlashReadPages
+	ldr	r3, [r4, #-2808]
+	cmn	r3, #1
+	cmpne	r3, #256
+	beq	.L2301
+	ldr	r3, [r8, #8]
+	cmp	r3, r5
+	beq	.L2300
+.L2301:
+	ldr	r3, [r4, #-2796]
+	ldr	r2, [r4, #-2800]
+	ldr	r0, .L2307+20
+	ldr	r1, [r3, #4]
+	str	r1, [sp]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	mov	r1, r5
+	ldr	r2, [r2, #4]
+	str	r2, [sp, #16]
+	ldr	r2, [r4, #-2804]
+	ldr	r3, [r3]
+	bl	printk
+.L2300:
+	add	r5, r5, #1
+	b	.L2297
+.L2306:
+	ldr	r2, [sp, #28]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L2304
+	bl	__stack_chk_fail
+.L2304:
+	add	sp, sp, #32
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2308:
+	.align	2
+.L2307:
+	.word	__stack_chk_guard
+	.word	.LC53
+	.word	.LANCHOR2
+	.word	.LC54
+	.word	.LANCHOR2-2808
+	.word	.LC55
+	.fnend
+	.size	Ftlscanalldata, .-Ftlscanalldata
+	.align	2
+	.global	dump_map_info
+	.type	dump_map_info, %function
+dump_map_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r5, .L2327
+	ldr	fp, .L2327+4
+	ldrh	r6, [r5, #-12]
+	add	r5, r5, #3248
+	mov	r8, r5
+.L2310:
+	ldrh	r3, [fp]
+	cmp	r3, r6
+	bls	.L2323
+	ldr	r1, .L2327+8
+	mov	r7, #0
+	ldr	r2, [r5, #-3036]
+	mov	r4, r7
+	ldr	r3, [r5, #-2996]
+	add	r1, r1, #28
+	ldr	r10, [r5, #-2968]
+	ldrh	ip, [r1, #-28]
+	ldrh	r9, [r1, #52]
+	str	r1, [sp, #28]
+.L2319:
+	uxth	r1, r7
+	cmp	r1, ip
+	bcs	.L2325
+	str	r3, [sp, #44]
+	mov	r1, r6
+	ldr	r3, [sp, #28]
+	str	r2, [sp, #40]
+	str	ip, [sp, #36]
+	ldrb	r0, [r3, r7]	@ zero_extendqisi2
+	bl	V2P_block
+	str	r0, [sp, #32]
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldr	r1, [sp, #32]
+	ldr	ip, [sp, #36]
+	ldr	r2, [sp, #40]
+	ldr	r3, [sp, #44]
+	bne	.L2311
+	mov	r0, #36
+	mov	r1, r1, asl #10
+	mla	r0, r0, r4, r2
+	stmib	r0, {r1, r3}
+	mul	r1, r9, r4
+	add	r4, r4, #1
+	uxth	r4, r4
+	add	lr, r1, #3
+	cmp	r1, #0
+	movlt	r1, lr
+	bic	r1, r1, #3
+	add	r1, r10, r1
+	str	r1, [r0, #12]
+.L2311:
+	add	r7, r7, #1
+	b	.L2319
+.L2325:
+	cmp	r4, #0
+	beq	.L2314
+	ldr	r0, [r8, #-3036]
+	mov	r1, r4
+	mov	r2, #1
+	mov	r7, #0
+	bl	FlashReadPages
+	mov	r9, #36
+.L2315:
+	uxth	r3, r7
+	cmp	r3, r4
+	bcs	.L2314
+	ldr	r3, [r8, #-3036]
+	ldr	r0, .L2327+12
+	mla	r3, r9, r7, r3
+	add	r7, r7, #1
+	ldmib	r3, {r2, r3, ip}
+	ldr	r1, [ip, #4]
+	str	r1, [sp]
+	ldr	r1, [ip, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [ip, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r3]
+	str	r1, [sp, #12]
+	ubfx	r1, r2, #10, #16
+	ldr	r3, [r3, #4]
+	str	r3, [sp, #16]
+	ldr	r3, [ip]
+	bl	printk
+	b	.L2315
+.L2314:
+	add	r6, r6, #1
+	uxth	r6, r6
+	b	.L2310
+.L2323:
+	ldr	r4, .L2327+16
+	mov	r7, #0
+	ldr	r8, .L2327+20
+.L2318:
+	ldr	r5, .L2327+16
+	sxth	r6, r7
+	sub	r3, r5, #388
+	ldrh	r3, [r3]
+	cmp	r6, r3
+	bge	.L2321
+	mov	r6, r6, asl #1
+	mov	r5, #0
+.L2322:
+	ldrh	r2, [r8]
+	sxth	r3, r5
+	add	r5, r5, #1
+	cmp	r3, r2
+	bge	.L2326
+	ldr	r2, [r4, #-2936]
+	mov	r1, #1
+	ldr	r0, .L2327+24
+	ldrh	r2, [r2, r6]
+	orr	r3, r3, r2, asl #10
+	mov	r2, r1
+	str	r3, [r4, #-2804]
+	bl	FlashReadPages
+	ldr	r3, [r4, #-2796]
+	ldr	r1, [r4, #-2936]
+	ldr	r2, [r4, #-2800]
+	ldr	r0, [r3]
+	ldrh	r1, [r1, r6]
+	str	r0, [sp]
+	ldr	r0, [r3, #4]
+	str	r0, [sp, #4]
+	ldr	r0, [r3, #8]
+	str	r0, [sp, #8]
+	ldr	r3, [r3, #12]
+	ldr	r0, .L2327+28
+	str	r3, [sp, #12]
+	ldr	r3, [r2]
+	str	r3, [sp, #16]
+	ldr	r3, [r2, #4]
+	str	r3, [sp, #20]
+	ldr	r2, [r4, #-2808]
+	ldr	r3, [r4, #-2804]
+	bl	printk
+	b	.L2322
+.L2326:
+	add	r7, r7, #1
+	b	.L2318
+.L2321:
+	sub	r4, r5, #3152
+	ldr	r1, [r5, #-2936]
+	ldr	r3, [r5, #-3172]
+	mov	r2, #2
+	ldr	r0, .L2327+32
+	bl	rknand_print_hex
+	ldr	r1, [r5, #-2908]
+	ldrh	r3, [r4, #-12]
+	mov	r2, #4
+	ldr	r0, .L2327+36
+	bl	rknand_print_hex
+	ldr	r0, .L2327+40
+	ldr	r1, [r5, #-2904]
+	mov	r2, #4
+	ldrh	r3, [r4, #-12]
+	add	sp, sp, #52
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	rknand_print_hex
+.L2328:
+	.align	2
+.L2327:
+	.word	.LANCHOR2-3248
+	.word	.LANCHOR2-3258
+	.word	.LANCHOR2-3268
+	.word	.LC56
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3198
+	.word	.LANCHOR2-2808
+	.word	.LC57
+	.word	.LC58
+	.word	.LC59
+	.word	.LC60
+	.fnend
+	.size	dump_map_info, .-dump_map_info
+	.align	2
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r3, [r0, #16]
+	mov	r4, r0
+	ldrh	r9, [r0, #6]
+	mov	r1, #0
+	ldr	r7, [r0, #24]
+	str	r3, [sp, #12]
+	ldrh	r3, [r0, #8]
+	mov	r2, r9, asl #2
+	ldr	r8, [r0, #12]
+	mov	r0, r7
+	ldr	r5, .L2372
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	mov	r1, #0
+	str	r1, [r4, #32]
+	ldr	r3, [r5, #-3008]
+	mov	r10, r5
+	ldr	r6, [r5, #-2976]
+	str	r1, [r4, #28]
+	str	r3, [r5, #-2800]
+	mvn	r3, #0
+	str	r6, [r5, #-2796]
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #1
+	str	r3, [r4, #36]
+	str	r1, [sp, #4]
+.L2330:
+	ldrh	r2, [sp, #4]
+	ldr	r3, [sp, #8]
+	sxth	fp, r2
+	cmp	fp, r3
+	bge	.L2348
+	ldr	r3, [sp, #8]
+	sub	r1, r3, #1
+	cmp	fp, r1
+	mov	r1, fp, asl #1
+	bne	.L2331
+	ldrh	r0, [r8, r1]
+	add	r10, r8, r1
+	mov	r1, #1
+	str	r2, [sp, #4]
+	bl	FtlGetLastWrittenPage
+	mov	r8, #0
+	ldr	r2, [sp, #4]
+	add	r3, r0, #1
+	strh	r3, [r4, #2]	@ movhi
+	sxth	r0, r0
+	ldr	r3, [sp, #12]
+	strh	r2, [r4]	@ movhi
+	ldr	r3, [r3, fp, asl #2]
+	ldr	fp, .L2372
+	str	r3, [r4, #28]
+	add	r3, r0, #1
+	str	r3, [sp, #4]
+.L2332:
+	ldr	r2, [sp, #4]
+	sxth	r3, r8
+	cmp	r3, r2
+	bge	.L2348
+	ldrh	r2, [r10]
+	mov	r1, #1
+	ldr	r0, .L2372+4
+	orr	r3, r3, r2, asl #10
+	mov	r2, r1
+	str	r3, [r5, #-2804]
+	bl	FlashReadPages
+	ldr	r3, .L2372+8
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2333
+	ldr	r3, [fp, #-2796]
+	ldr	r3, [r3, #12]
+	cmp	r3, #0
+	beq	.L2333
+	ldr	r2, .L2372+12
+	ldr	r0, [fp, #-2800]
+	str	r3, [sp, #8]
+	ldrh	r1, [r2]
+	bl	js_hash
+	ldr	r3, [sp, #8]
+	cmp	r3, r0
+	mvnne	r3, #0
+	strne	r3, [fp, #-2808]
+.L2333:
+	ldr	r3, [fp, #-2808]
+	cmn	r3, #1
+	beq	.L2334
+	ldrh	r3, [r6, #8]
+	cmp	r3, r9
+	bcs	.L2334
+	ldrh	r2, [r4, #4]
+	ldrh	r1, [r6]
+	cmp	r1, r2
+	ldreq	r2, [fp, #-2804]
+	streq	r2, [r7, r3, asl #2]
+.L2334:
+	add	r8, r8, #1
+	b	.L2332
+.L2348:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldr	r3, .L2372+16
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r3, #-14]
+	cmp	r2, r3
+	bne	.L2337
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+	b	.L2337
+.L2331:
+	ldr	r2, [r5, #-3008]
+	add	r3, r8, r1
+	str	r3, [sp, #16]
+	ldr	r3, .L2372+20
+	str	r2, [r5, #-2800]
+	ldrh	r1, [r8, r1]
+	ldrh	r2, [r3]
+	ldr	r0, .L2372+4
+	sub	r2, r2, #1
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r5, #-2804]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [r5, #-2808]
+	cmn	r2, #1
+	beq	.L2350
+	ldrh	r1, [r6]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	bne	.L2350
+	ldrh	r1, [r6, #8]
+	movw	r2, #64245
+	cmp	r1, r2
+	bne	.L2350
+	mov	r0, #0
+	mov	fp, #8
+	mov	lr, #4
+.L2339:
+	ldr	r3, .L2372+20
+	uxth	r2, r0
+	sxth	r1, r2
+	ldrh	ip, [r3]
+	sub	ip, ip, #1
+	cmp	r1, ip
+	bge	.L2342
+	ldr	ip, [r10, #-3008]
+	add	r0, r0, #1
+	ldr	r1, [ip, r1, asl #3]
+	uxth	r1, r1
+	cmp	r1, r9
+	smlabbcc	r2, r2, fp, lr
+	ldrcc	r2, [ip, r2]
+	strcc	r2, [r7, r1, asl #2]
+	b	.L2339
+.L2350:
+	mov	fp, #0
+.L2370:
+	ldr	r3, .L2372+20
+	sxth	r2, fp
+	ldrh	r1, [r3]
+	cmp	r2, r1
+	bge	.L2342
+	ldr	r3, [sp, #16]
+	ldr	r0, .L2372+4
+	ldrh	r1, [r3]
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r10, #-2804]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, .L2372+8
+	ldrb	r2, [r2]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2343
+	ldr	r2, [r10, #-2796]
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	beq	.L2343
+	ldr	r1, .L2372+12
+	ldr	r0, [r10, #-2800]
+	str	r2, [sp, #20]
+	ldrh	r1, [r1]
+	bl	js_hash
+	ldr	r2, [sp, #20]
+	cmp	r2, r0
+	mvnne	r2, #0
+	strne	r2, [r10, #-2808]
+.L2343:
+	ldr	r2, [r10, #-2808]
+	cmn	r2, #1
+	beq	.L2344
+	ldrh	r2, [r6, #8]
+	cmp	r2, r9
+	bcs	.L2344
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r6]
+	cmp	r0, r1
+	ldreq	r1, [r10, #-2804]
+	streq	r1, [r7, r2, asl #2]
+.L2344:
+	add	fp, fp, #1
+	b	.L2370
+.L2342:
+	ldr	r3, [sp, #4]
+	add	r3, r3, #1
+	str	r3, [sp, #4]
+	b	.L2330
+.L2337:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2373:
+	.align	2
+.L2372:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2808
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2-3198
+	.fnend
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2376
+	sub	r2, r3, #3168
+	sub	r0, r3, #456
+	ldrh	r1, [r2, #-12]
+	ldrh	r2, [r2, #-10]
+	strh	r1, [r0, #10]	@ movhi
+	strh	r2, [r0, #6]	@ movhi
+	ldr	r2, [r3, #-2924]
+	ldr	r1, .L2376+4
+	str	r2, [r3, #-444]
+	ldr	r2, [r3, #-2916]
+	strh	r1, [r0, #4]	@ movhi
+	sub	r1, r3, #2816
+	str	r2, [r3, #-440]
+	ldr	r2, [r3, #-2920]
+	ldrh	r1, [r1, #-4]
+	str	r2, [r3, #-436]
+	ldr	r2, [r3, #-2912]
+	strh	r1, [r0, #8]	@ movhi
+	str	r2, [r3, #-432]
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2377:
+	.align	2
+.L2376:
+	.word	.LANCHOR2
+	.word	-3962
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlL2PDataInit
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r1, #0
+	ldr	r4, .L2383
+	mvn	r6, #0
+	ldr	r2, [r4, #-3172]
+	ldr	r0, [r4, #-2932]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	sub	r3, r4, #3184
+	sub	r2, r4, #3152
+	mov	r1, #255
+	ldrh	r3, [r3, #-6]
+	ldrh	r2, [r2, #-10]
+	ldr	r0, [r4, #-2892]
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldr	r0, .L2383+4
+	mov	r1, #0
+	mov	lr, #12
+	sub	r7, r0, #28
+	mov	r5, r1
+.L2379:
+	ldrh	r2, [r0]
+	add	ip, r1, #1
+	uxth	r1, r1
+	ldr	r3, .L2383
+	cmp	r2, r1
+	sub	r8, r3, #3152
+	bls	.L2382
+	mul	r8, lr, r1
+	ldr	r3, [r4, #-2896]
+	add	r2, r3, r8
+	str	r5, [r2, #4]
+	strh	r6, [r3, r8]	@ movhi
+	ldrh	r2, [r7]
+	ldr	r3, [r4, #-2896]
+	mul	r2, r1, r2
+	add	r3, r3, r8
+	ldr	r1, [r4, #-2892]
+	bic	r2, r2, #3
+	add	r2, r1, r2
+	mov	r1, ip
+	str	r2, [r3, #8]
+	b	.L2379
+.L2382:
+	sub	r2, r3, #504
+	mvn	r1, #0
+	strh	r1, [r2, #2]	@ movhi
+	strh	r1, [r2]	@ movhi
+	ldr	r1, [r3, #-3172]
+	strh	r1, [r2, #10]	@ movhi
+	ldr	r1, .L2383+8
+	strh	r1, [r2, #4]	@ movhi
+	sub	r1, r3, #388
+	ldrh	r1, [r1]
+	strh	r1, [r2, #8]	@ movhi
+	ldrh	r1, [r8, #-12]
+	strh	r1, [r2, #6]	@ movhi
+	ldr	r2, [r3, #-2936]
+	str	r2, [r3, #-492]
+	ldr	r2, [r3, #-2900]
+	str	r2, [r3, #-488]
+	ldr	r2, [r3, #-2932]
+	str	r2, [r3, #-484]
+	ldr	r2, [r3, #-2908]
+	str	r2, [r3, #-480]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2384:
+	.align	2
+.L2383:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3162
+	.word	-3902
+	.fnend
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L2387
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2388:
+	.align	2
+.L2387:
+	.word	.LANCHOR2-504
+	.fnend
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	ftl_sb_update_avl_pages
+	.type	ftl_sb_update_avl_pages, %function
+ftl_sb_update_avl_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, #0
+	strh	r3, [r0, #4]	@ movhi
+	ldr	r3, .L2399
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	movw	r4, #65535
+	ldrh	lr, [r3, #-4]
+	add	r3, r2, #7
+	add	r3, r0, r3, asl #1
+.L2390:
+	cmp	r2, lr
+	bcs	.L2397
+	ldrh	ip, [r3, #2]!
+	add	r2, r2, #1
+	cmp	ip, r4
+	uxth	r2, r2
+	ldrneh	ip, [r0, #4]
+	addne	ip, ip, #1
+	strneh	ip, [r0, #4]	@ movhi
+	b	.L2390
+.L2397:
+	ldr	r3, .L2399+4
+	add	ip, r0, #14
+	mov	r2, #0
+	movw	r5, #65535
+	ldrh	r4, [r3]
+.L2393:
+	uxth	r3, r2
+	cmp	r3, lr
+	bcs	.L2398
+	ldrh	r3, [ip, #2]!
+	add	r2, r2, #1
+	cmp	r3, r5
+	ldrneh	r3, [r0, #4]
+	addne	r3, r4, r3
+	subne	r3, r3, #1
+	rsbne	r3, r1, r3
+	strneh	r3, [r0, #4]	@ movhi
+	b	.L2393
+.L2398:
+	ldmfd	sp!, {r4, r5, pc}
+.L2400:
+	.align	2
+.L2399:
+	.word	.LANCHOR2-3264
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	mov	r5, r0
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r6, .L2411
+	ldr	r4, [r6, #-2940]
+	mov	r7, r0, asl #1
+	ldrh	r3, [r4, r7]
+	cmp	r3, #0
+	addne	r3, r3, #1
+	strneh	r3, [r4, r7]	@ movhi
+	bne	.L2403
+	ldr	r4, [r6, #-656]
+	cmp	r4, #0
+	beq	.L2403
+	ldr	r1, [r6, #-2888]
+	sub	r2, r6, #652
+	ldr	lr, .L2411+4
+	movw	r9, #65535
+	rsb	r4, r1, r4
+	ldrh	ip, [r2]
+	mov	r8, r2
+	mov	r4, r4, asr #1
+	mul	r4, lr, r4
+	mov	lr, #6
+	uxth	r4, r4
+.L2404:
+	uxth	r2, r3
+	cmp	r2, ip
+	bcs	.L2403
+	cmp	r4, r0
+	bne	.L2405
+	mov	r1, r4
+	ldr	r0, .L2411+8
+	bl	List_remove_node
+	ldrh	r3, [r8]
+	mov	r0, r4
+	sub	r3, r3, #1
+	strh	r3, [r8]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r6, #-2940]
+	ldrh	r3, [r2, r7]
+	add	r3, r3, #1
+	strh	r3, [r2, r7]	@ movhi
+	b	.L2403
+.L2405:
+	mul	r4, lr, r4
+	add	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, r9
+	bne	.L2404
+.L2403:
+	mov	r0, r5
+	add	r1, sp, #4
+	mov	r2, #1
+	bl	log2phys
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L2412:
+	.align	2
+.L2411:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LANCHOR2-656
+	.fnend
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.global	make_superblock
+	.type	make_superblock, %function
+make_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2427
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r6, r0, #16
+	ldrh	r8, [r3, #-4]
+	add	r7, r3, #24
+	mov	r4, r0
+	mvn	r9, #0
+	mov	r5, #0
+	strh	r5, [r0, #4]	@ movhi
+	strb	r5, [r0, #7]
+.L2414:
+	uxth	r3, r5
+	cmp	r3, r8
+	bcs	.L2426
+	ldrb	r0, [r7, r5]	@ zero_extendqisi2
+	add	r6, r6, #2
+	ldrh	r1, [r4]
+	add	r5, r5, #1
+	bl	V2P_block
+	strh	r9, [r6, #-2]	@ movhi
+	mov	r10, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	streqh	r10, [r6, #-2]	@ movhi
+	ldreqb	r3, [r4, #7]	@ zero_extendqisi2
+	addeq	r3, r3, #1
+	streqb	r3, [r4, #7]
+	b	.L2414
+.L2426:
+	ldr	r2, .L2427+4
+	ldrb	r1, [r4, #7]	@ zero_extendqisi2
+	sub	r3, r2, #3200
+	ldrh	r3, [r3]
+	smulbb	r3, r1, r3
+	strh	r3, [r4, #4]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #9]
+	ldr	r3, [r2, #-3336]
+	cmp	r3, #0
+	beq	.L2417
+	ldrh	r3, [r4]
+	ldr	r2, [r2, #-2948]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #79
+	movls	r3, #1
+	strlsb	r3, [r4, #9]
+.L2417:
+	ldr	r3, .L2427+8
+	mov	r0, #0
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	movne	r3, #1
+	strneb	r3, [r4, #9]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2428:
+	.align	2
+.L2427:
+	.word	.LANCHOR2-3264
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	make_superblock, .-make_superblock
+	.align	2
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r1, #0
+	ldr	r5, .L2458
+	.pad #44
+	sub	sp, sp, #44
+	sub	r7, r5, #3248
+	sub	r6, r5, #404
+	ldr	r3, [r5, #-3008]
+	ldrh	r2, [r7, #-12]
+	ldr	r0, [r5, #-2940]
+	str	r3, [r5, #-2800]
+	ldr	r3, [r5, #-2976]
+	mov	r2, r2, asl #1
+	str	r3, [r5, #-2796]
+	bl	ftl_memset
+	ldrh	r0, [r6]
+	movw	r3, #65535
+	cmp	r0, r3
+	str	r7, [sp, #28]
+	bne	.L2430
+.L2441:
+	mvn	r0, #0
+	b	.L2431
+.L2430:
+	mov	r1, #1
+	mov	r4, r5
+	bl	FtlGetLastWrittenPage
+	ldrh	r9, [r6]
+	mov	r7, r4
+	uxth	r5, r0
+	add	r0, r0, #1
+	strh	r0, [r6, #2]	@ movhi
+.L2432:
+	sxth	r3, r5
+	cmp	r3, #0
+	blt	.L2440
+	sxth	fp, r9
+	mov	r1, #1
+	ldr	r0, .L2458+4
+	mov	r2, r1
+	orr	r3, r3, fp, asl #10
+	str	r3, [r4, #-2804]
+	ldr	r3, [r4, #-3008]
+	str	r3, [r4, #-2800]
+	bl	FlashReadPages
+	ldr	r3, .L2458+8
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2433
+	ldr	r8, [r7, #-2796]
+	ldr	r3, [r8, #12]
+	cmp	r3, #0
+	beq	.L2433
+	ldr	r2, [r7, #-2800]
+	ldr	r10, .L2458+12
+	str	r3, [sp, #36]
+	mov	r0, r2
+	str	r2, [sp, #32]
+	ldrh	r1, [r10]
+	bl	js_hash
+	ldr	r3, [sp, #36]
+	cmp	r3, r0
+	beq	.L2433
+	cmp	r5, #0
+	ldr	r2, [sp, #32]
+	bne	.L2434
+	ldrh	r1, [r6, #4]
+	ldr	ip, .L2458+16
+	cmp	fp, r1
+	beq	.L2434
+	ldr	r0, [r8]
+	ldrh	r1, [ip]
+	str	ip, [sp, #32]
+	str	r0, [sp]
+	ldr	r0, [r8, #4]
+	str	r0, [sp, #4]
+	ldr	r0, [r8, #8]
+	str	r3, [sp, #12]
+	str	r0, [sp, #8]
+	ldr	r3, [r2]
+	ldr	r0, .L2458+20
+	str	r3, [sp, #16]
+	ldr	r2, [r7, #-2808]
+	ldr	r3, [r7, #-2804]
+	bl	printk
+	ldrh	r5, [r10, #-8]
+	ldr	ip, [sp, #32]
+	ldrh	r9, [ip, #4]
+	b	.L2436
+.L2434:
+	mvn	r3, #0
+	str	r3, [r4, #-2808]
+.L2433:
+	ldr	r3, [r4, #-2808]
+	cmn	r3, #1
+	beq	.L2436
+	ldr	r3, [r7, #-3008]
+	ldr	r2, .L2458+24
+	ldr	r3, [r3]
+	cmp	r3, r2
+	bne	.L2436
+	ldr	r3, [r7, #-2976]
+	ldrh	r2, [r3]
+	movw	r3, #61604
+	cmp	r2, r3
+	bne	.L2436
+.L2440:
+	ldr	r5, .L2458
+	mov	r2, #48
+	ldr	r1, [r4, #-2800]
+	sub	r0, r5, #716
+	sub	r7, r5, #3248
+	bl	ftl_memcpy
+	ldr	r1, [r4, #-2800]
+	ldr	r0, [r4, #-2940]
+	add	r1, r1, #48
+	ldr	r3, [sp, #28]
+	ldrh	r2, [r3, #-12]
+	mov	r2, r2, asl #1
+	bl	ftl_memcpy
+	ldr	r1, [r4, #-2800]
+	ldr	r0, [r4, #-2928]
+	ldr	r3, [sp, #28]
+	ldrh	r2, [r3, #-12]
+	add	r3, r2, #24
+	ubfx	r3, r3, #1, #30
+	mov	r2, r2, lsr #3
+	add	r2, r2, #4
+	add	r1, r1, r3, asl #2
+	bl	ftl_memcpy
+	sub	r2, r5, #3152
+	ldrh	r3, [r2, #-8]
+	cmp	r3, #0
+	beq	.L2438
+	ldrh	r1, [r7, #-12]
+	ldrh	r2, [r2, #-12]
+	ldr	r0, [r5, #-2904]
+	mov	r3, r1, lsr #3
+	add	r3, r3, r1, asl #1
+	ldr	r1, [r5, #-2800]
+	add	r3, r3, #52
+	mov	r2, r2, asl #2
+	ubfx	r3, r3, #2, #14
+	add	r1, r1, r3, asl #2
+	bl	ftl_memcpy
+	b	.L2438
+.L2436:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L2432
+.L2438:
+	ldr	r2, [r4, #-716]
+	ldr	r3, .L2458+24
+	ldr	r5, .L2458
+	cmp	r2, r3
+	bne	.L2441
+	sub	r2, r5, #3232
+	sub	r7, r5, #716
+	ldrb	r1, [r5, #-706]	@ zero_extendqisi2
+	ldrh	r2, [r2, #-14]
+	ldrh	r3, [r7, #8]
+	cmp	r1, r2
+	strh	r3, [r6, #6]	@ movhi
+	bne	.L2441
+	sub	r2, r5, #3200
+	sub	r1, r5, #3184
+	ldr	r6, .L2458+28
+	ldrh	r2, [r2]
+	ldrh	r1, [r1, #-10]
+	sub	r8, r6, #372
+	str	r3, [r6, #-376]
+	mul	r2, r3, r2
+	str	r2, [r5, #-2816]
+	mul	r2, r1, r2
+	ldr	r1, .L2458+8
+	str	r2, [r1, #3908]
+	sub	r2, r5, #2880
+	ldrh	r0, [r2, #6]
+	ldr	r2, [r5, #-3256]
+	rsb	r0, r0, r2
+	sub	r2, r5, #3264
+	rsb	r0, r3, r0
+	ldrh	r1, [r2, #-4]
+	bl	__aeabi_uidiv
+	ldrh	r3, [r7, #16]
+	ldrh	ip, [r7, #14]
+	sub	r2, r5, #648
+	sub	lr, r6, #368
+	mov	r1, r3, lsr #6
+	strh	r1, [r2, #2]	@ movhi
+	ldrh	r1, [r7, #18]
+	and	r3, r3, #63
+	strh	ip, [r2]	@ movhi
+	sub	r2, r5, #600
+	strb	r3, [r5, #-642]
+	strh	r1, [r2]	@ movhi
+	ldrh	r1, [r7, #20]
+	ldrb	r3, [r5, #-705]	@ zero_extendqisi2
+	strb	r3, [r5, #-640]
+	mvn	r3, #0
+	strh	r3, [lr]	@ movhi
+	mov	r3, #0
+	strb	r3, [r6, #-362]
+	strb	r3, [r6, #-360]
+	strh	r3, [lr, #2]	@ movhi
+	str	r3, [r5, #-3140]
+	strh	r0, [r8]	@ movhi
+	mov	r0, r1, lsr #6
+	and	r1, r1, #63
+	strb	r1, [r5, #-594]
+	ldrb	r1, [r5, #-704]	@ zero_extendqisi2
+	mov	r8, lr
+	strh	r0, [r2, #2]	@ movhi
+	sub	r0, r5, #552
+	strb	r1, [r5, #-592]
+	ldrh	r1, [r7, #22]
+	strh	r1, [r0]	@ movhi
+	ldrh	r1, [r7, #24]
+	mov	r7, r2
+	mov	r6, r1, lsr #6
+	and	r1, r1, #63
+	strb	r1, [r5, #-546]
+	ldrb	r1, [r5, #-703]	@ zero_extendqisi2
+	strh	r6, [r0, #2]	@ movhi
+	mov	r6, r0
+	strb	r1, [r5, #-544]
+	str	r3, [r5, #-3136]
+	ldr	r1, [r5, #-684]
+	str	r3, [r5, #-3120]
+	str	r3, [r5, #-3124]
+	str	r3, [r5, #-3112]
+	str	r3, [r5, #-3104]
+	str	r3, [r5, #-3128]
+	ldr	r3, [r5, #-676]
+	str	r1, [r5, #-3116]
+	ldr	r1, [r5, #-3148]
+	ldr	r2, [r4, #-3144]
+	cmp	r3, r1
+	strhi	r3, [r5, #-3148]
+	ldr	r3, [r4, #-680]
+	cmp	r3, r2
+	ldrhi	r2, .L2458
+	strhi	r3, [r2, #-3144]
+	movw	r3, #65535
+	cmp	ip, r3
+	beq	.L2444
+	ldr	r0, .L2458+32
+	bl	make_superblock
+.L2444:
+	ldrh	r2, [r7]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2445
+	ldr	r0, .L2458+36
+	bl	make_superblock
+.L2445:
+	ldrh	r2, [r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2446
+	ldr	r0, .L2458+40
+	bl	make_superblock
+.L2446:
+	ldrh	r2, [r8]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2447
+	ldr	r0, .L2458+44
+	bl	make_superblock
+.L2447:
+	mov	r0, #0
+.L2431:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2459:
+	.align	2
+.L2458:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-2808
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-404
+	.word	.LC61
+	.word	1179929683
+	.word	.LANCHOR4
+	.word	.LANCHOR2-648
+	.word	.LANCHOR2-600
+	.word	.LANCHOR2-552
+	.word	.LANCHOR4-368
+	.fnend
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	2
+	.global	FtlDumpBlockInfo
+	.type	FtlDumpBlockInfo, %function
+FtlDumpBlockInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 80
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2475
+	ubfx	r0, r0, #10, #16
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #108
+	sub	sp, sp, #108
+	ldr	r3, [r3]
+	mov	r4, r1
+	ldr	r7, .L2475+4
+	str	r3, [sp, #100]
+	bl	P2V_block_in_plane
+	sub	r5, r7, #3200
+	ldr	r1, .L2475+8
+	ldrh	r9, [r5]
+	mov	r6, r0
+	ldr	r0, .L2475+12
+	bl	printk
+	ldr	r2, [r7, #-2940]
+	mov	r3, r6, asl #1
+	mov	r1, r6
+	ldr	r0, .L2475+16
+	ldrh	r2, [r2, r3]
+	bl	printk
+	add	r0, sp, #104
+	strh	r6, [r0, #-52]!	@ movhi
+	bl	make_superblock
+	ldr	r3, .L2475+20
+	ldrb	r2, [r3, #3904]	@ zero_extendqisi2
+	clz	r3, r4
+	cmp	r2, #0
+	mov	r3, r3, lsr #5
+	moveq	r3, #0
+	cmp	r3, #0
+	moveq	r4, r3
+	beq	.L2461
+	mov	r0, r6
+	bl	ftl_get_blk_mode
+	cmp	r0, #1
+	mov	r4, r0
+	subeq	r3, r7, #3184
+	ldreqh	r9, [r3, #-14]
+.L2461:
+	ldr	r0, .L2475+24
+	mov	r1, r4
+	mov	r2, r9
+	ldrh	r3, [r5]
+	bl	printk
+	ldr	r8, .L2475+4
+	mov	r6, #0
+.L2462:
+	ldr	r3, .L2475+28
+	mov	r2, #0
+	add	r0, sp, #66
+	mov	r5, r2
+	movw	lr, #65535
+	mov	r10, #36
+	ldrh	r3, [r3]
+	str	r3, [sp, #28]
+	ldr	r3, [r8, #-3036]
+	str	r3, [sp, #32]
+	ldr	r3, [r8, #-2996]
+	str	r3, [sp, #36]
+	ldr	r3, .L2475+32
+	ldrh	r3, [r3]
+	str	r3, [sp, #40]
+	ldr	r3, [r8, #-2968]
+	str	r3, [sp, #44]
+	ldr	r3, .L2475+36
+	ldrh	ip, [r3]
+.L2463:
+	ldr	r1, [sp, #28]
+	uxth	r3, r2
+	cmp	r3, r1
+	bcs	.L2473
+	ldrh	r3, [r0, #2]!
+	cmp	r3, lr
+	beq	.L2464
+	ldr	r1, [sp, #32]
+	orr	r3, r6, r3, asl #10
+	mla	r1, r10, r5, r1
+	str	r3, [r1, #4]
+	ldr	r3, [sp, #40]
+	mul	r3, r3, r5
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	ldr	fp, [sp, #36]
+	bic	r3, r3, #3
+	add	r3, fp, r3
+	str	r3, [r1, #8]
+	mul	r3, ip, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	ldr	fp, [sp, #44]
+	bic	r3, r3, #3
+	add	r3, fp, r3
+	str	r3, [r1, #12]
+.L2464:
+	add	r2, r2, #1
+	b	.L2463
+.L2473:
+	ldr	r0, [r8, #-3036]
+	mov	r1, r5
+	mov	r2, r4
+	mov	r10, #0
+	bl	FlashReadPages
+.L2466:
+	uxth	r3, r10
+	cmp	r3, r5
+	bcs	.L2474
+	mov	r3, #36
+	ldr	lr, [r7, #-3036]
+	mul	r2, r3, r10
+	ldrh	r1, [sp, #52]
+	add	r10, r10, #1
+	add	ip, lr, r2
+	ldr	r3, [ip, #12]
+	ldr	r0, [ip, #8]
+	ldr	fp, [r3]
+	str	fp, [sp]
+	ldr	fp, [r3, #4]
+	str	fp, [sp, #4]
+	ldr	fp, [r3, #8]
+	str	fp, [sp, #8]
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #12]
+	ldr	r3, [r0]
+	str	r3, [sp, #16]
+	ldr	r3, [r0, #4]
+	ldr	r0, .L2475+40
+	str	r3, [sp, #20]
+	ldr	r2, [lr, r2]
+	ldr	r3, [ip, #4]
+	bl	printk
+	b	.L2466
+.L2474:
+	add	r6, r6, #1
+	uxth	r6, r6
+	cmp	r6, r9
+	bne	.L2462
+.L2468:
+	ldr	r3, .L2475
+	mov	r0, #0
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2469
+	bl	__stack_chk_fail
+.L2469:
+	add	sp, sp, #108
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2476:
+	.align	2
+.L2475:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR3+28
+	.word	.LC48
+	.word	.LC62
+	.word	.LANCHOR0
+	.word	.LC63
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR2-3188
+	.word	.LC57
+	.fnend
+	.size	FtlDumpBlockInfo, .-FtlDumpBlockInfo
+	.align	2
+	.global	FtlScanAllBlock
+	.type	FtlScanAllBlock, %function
+FtlScanAllBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 72
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #100
+	sub	sp, sp, #100
+	ldr	r5, .L2493
+	mov	r6, #0
+	ldr	r0, .L2493+4
+	ldr	r1, .L2493+8
+	ldr	r3, [r5]
+	str	r3, [sp, #92]
+	bl	printk
+	str	r5, [sp, #36]
+	ldr	r5, .L2493+12
+	mov	r7, r5
+.L2478:
+	ldr	r3, .L2493+16
+	uxth	r4, r6
+	ldrh	r3, [r3]
+	cmp	r3, r4
+	bls	.L2489
+	add	r8, sp, #96
+	mov	r0, r4
+	movw	r9, #65535
+	mov	r10, #36
+	strh	r4, [r8, #-52]!	@ movhi
+	bl	ftl_get_blk_mode
+	ldr	ip, [r5, #-2940]
+	mov	r2, r4, asl #1
+	mov	r1, r4
+	ldrh	r2, [ip, r2]
+	mov	r3, r0
+	ldr	r0, .L2493+20
+	bl	printk
+	mov	r0, r8
+	bl	make_superblock
+	ldr	r3, .L2493+24
+	ldr	lr, [r5, #-2968]
+	ldrh	r2, [r3]
+	ldrh	ip, [r3, #78]
+	ldrh	r8, [r3, #80]
+	str	r2, [sp, #24]
+	add	r0, sp, #58
+	ldr	r2, [r5, #-3036]
+	str	r2, [sp, #28]
+	ldr	r2, [r5, #-2996]
+	str	r2, [sp, #32]
+	mov	r2, #0
+	mov	r4, r2
+.L2479:
+	ldr	r1, [sp, #24]
+	uxth	r3, r2
+	cmp	r3, r1
+	bcs	.L2490
+	ldrh	r3, [r0, #2]!
+	cmp	r3, r9
+	beq	.L2480
+	ldr	r1, [sp, #28]
+	mov	r3, r3, asl #10
+	mla	r1, r10, r4, r1
+	str	r3, [r1, #4]
+	mul	r3, ip, r4
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	ldr	fp, [sp, #32]
+	bic	r3, r3, #3
+	add	r3, fp, r3
+	str	r3, [r1, #8]
+	mul	r3, r8, r4
+	add	r4, r4, #1
+	uxth	r4, r4
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	bic	r3, r3, #3
+	add	r3, lr, r3
+	str	r3, [r1, #12]
+.L2480:
+	add	r2, r2, #1
+	b	.L2479
+.L2490:
+	ldr	r0, [r5, #-3036]
+	mov	r1, r4
+	mov	r2, #0
+	mov	r8, #0
+	bl	FlashReadPages
+	mov	r9, #36
+.L2482:
+	uxth	r3, r8
+	cmp	r3, r4
+	bcs	.L2491
+	mul	r2, r9, r8
+	ldr	lr, [r7, #-3036]
+	ldrh	r1, [sp, #44]
+	add	r8, r8, #1
+	add	ip, lr, r2
+	ldr	r3, [ip, #12]
+	ldr	r0, [ip, #8]
+	ldr	r10, [r3]
+	str	r10, [sp]
+	ldr	r10, [r3, #4]
+	str	r10, [sp, #4]
+	ldr	r10, [r3, #8]
+	str	r10, [sp, #8]
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #12]
+	ldr	r3, [r0]
+	str	r3, [sp, #16]
+	ldr	r3, [r0, #4]
+	ldr	r0, .L2493+28
+	str	r3, [sp, #20]
+	ldr	r2, [lr, r2]
+	ldr	r3, [ip, #4]
+	bl	printk
+	b	.L2482
+.L2491:
+	ldr	r0, [r7, #-3036]
+	mov	r1, r4
+	mov	r2, #1
+	mov	r8, #0
+	bl	FlashReadPages
+	mov	r9, #36
+.L2484:
+	uxth	r3, r8
+	cmp	r3, r4
+	bcs	.L2492
+	mul	r2, r9, r8
+	ldr	lr, [r7, #-3036]
+	ldrh	r1, [sp, #44]
+	add	r8, r8, #1
+	add	ip, lr, r2
+	ldr	r3, [ip, #12]
+	ldr	r0, [ip, #8]
+	ldr	r10, [r3]
+	str	r10, [sp]
+	ldr	r10, [r3, #4]
+	str	r10, [sp, #4]
+	ldr	r10, [r3, #8]
+	str	r10, [sp, #8]
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #12]
+	ldr	r3, [r0]
+	str	r3, [sp, #16]
+	ldr	r3, [r0, #4]
+	ldr	r0, .L2493+32
+	str	r3, [sp, #20]
+	ldr	r2, [lr, r2]
+	ldr	r3, [ip, #4]
+	bl	printk
+	b	.L2484
+.L2492:
+	add	r6, r6, #1
+	b	.L2478
+.L2489:
+	ldr	r3, [sp, #36]
+	mov	r0, #0
+	ldr	r2, [sp, #92]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2487
+	bl	__stack_chk_fail
+.L2487:
+	add	sp, sp, #100
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2494:
+	.align	2
+.L2493:
+	.word	__stack_chk_guard
+	.word	.LC48
+	.word	.LANCHOR3+48
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3258
+	.word	.LC64
+	.word	.LANCHOR2-3268
+	.word	.LC65
+	.word	.LC66
+	.fnend
+	.size	FtlScanAllBlock, .-FtlScanAllBlock
+	.align	2
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r2, #6
+	ldr	r6, .L2507
+	mov	r1, #0
+	.pad #28
+	sub	sp, sp, #28
+	sub	r3, r6, #3248
+	ldr	r0, [r6, #-2888]
+	mov	r5, r6
+	ldrh	r3, [r3, #-10]
+	mov	fp, r6
+	mul	r2, r2, r3
+	bl	ftl_memset
+	mov	r3, #0
+	sub	r1, r6, #660
+	sub	r2, r6, #652
+	sub	r0, r6, #3152
+	mov	r4, r3
+	mov	r8, r3
+	mov	r9, r3
+	str	r3, [r6, #-656]
+	str	r3, [r6, #-668]
+	str	r3, [r6, #-664]
+	strh	r3, [r1]	@ movhi
+	strh	r3, [r2]	@ movhi
+	strh	r3, [r0, #-6]	@ movhi
+	str	r1, [sp, #8]
+	str	r2, [sp, #12]
+.L2496:
+	ldr	r3, .L2507+4
+	uxth	r7, r4
+	sxth	r10, r7
+	ldrh	r2, [r3]
+	cmp	r10, r2
+	bge	.L2503
+	sub	r3, r3, #8
+	ldr	r2, .L2507+8
+	mov	ip, r7
+	ldrh	r3, [r3]
+	str	r3, [sp]
+	ldrh	r3, [r2]
+	mov	r2, #0
+	mov	r6, r2
+	str	r3, [sp, #4]
+.L2504:
+	ldr	r3, [sp]
+	sxth	r1, r2
+	cmp	r1, r3
+	bge	.L2506
+	add	r1, r5, r1
+	str	r2, [sp, #20]
+	str	ip, [sp, #16]
+	ldrb	r0, [r1, #-3240]	@ zero_extendqisi2
+	mov	r1, ip
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldr	r2, [sp, #20]
+	ldr	ip, [sp, #16]
+	ldreq	r3, [sp, #4]
+	add	r2, r2, #1
+	addeq	r6, r3, r6
+	uxtheq	r6, r6
+	b	.L2504
+.L2506:
+	cmp	r6, #0
+	beq	.L2499
+	sxth	r1, r6
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r6, r0
+	b	.L2500
+.L2499:
+	sxth	r7, r7
+	ldr	r2, [r5, #-2940]
+	mvn	r1, #0
+	mov	r7, r7, asl #1
+	strh	r1, [r2, r7]	@ movhi
+.L2500:
+	mov	r1, r10, asl #1
+	ldr	r2, [r5, #-2888]
+	add	r0, r1, r10
+	add	r2, r2, r0, asl #1
+	strh	r6, [r2, #4]	@ movhi
+	ldr	r2, .L2507+12
+	ldrh	r0, [r2]
+	cmp	r10, r0
+	beq	.L2501
+	ldrh	r0, [r2, #48]
+	cmp	r10, r0
+	beq	.L2501
+	ldrh	r2, [r2, #96]
+	cmp	r10, r2
+	beq	.L2501
+	ldr	r3, [fp, #-2940]
+	uxth	r0, r4
+	ldrh	r3, [r3, r1]
+	cmp	r3, #0
+	bne	.L2502
+	add	r8, r8, #1
+	uxth	r8, r8
+	bl	INSERT_FREE_LIST
+	b	.L2501
+.L2502:
+	add	r9, r9, #1
+	uxth	r9, r9
+	bl	INSERT_DATA_LIST
+.L2501:
+	add	r4, r4, #1
+	b	.L2496
+.L2503:
+	ldr	r3, [sp, #8]
+	mov	r0, #0
+	strh	r9, [r3]	@ movhi
+	ldr	r3, [sp, #12]
+	strh	r8, [r3]	@ movhi
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2508:
+	.align	2
+.L2507:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3260
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR2-648
+	.fnend
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	2
+	.global	Ftl_save_ext_data
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L2511
+	ldr	r3, .L2511+4
+	ldr	r1, [r2, #-320]
+	cmp	r1, r3
+	bxne	lr
+	ldr	r3, .L2511+8
+	mov	r0, #0
+	sub	r2, r2, #320
+	str	r3, [r2, #4]
+	ldr	r3, [r2, #512]
+	str	r3, [r2, #88]
+	ldr	r3, [r2, #516]
+	str	r3, [r2, #92]
+	ldr	r3, .L2511+12
+	ldr	r1, [r3, #-3140]
+	str	r1, [r2, #8]
+	ldr	r1, [r3, #-3136]
+	str	r1, [r2, #12]
+	ldr	r1, [r3, #-3120]
+	str	r1, [r2, #16]
+	ldr	r1, [r3, #-3124]
+	str	r1, [r2, #20]
+	ldr	r1, [r3, #-3112]
+	str	r1, [r2, #28]
+	ldr	r1, [r3, #-3108]
+	str	r1, [r2, #32]
+	ldr	r1, [r3, #-3132]
+	str	r1, [r2, #36]
+	ldr	r1, [r3, #-3128]
+	str	r1, [r2, #40]
+	ldr	r1, [r3, #-3104]
+	str	r1, [r2, #44]
+	ldr	r1, [r3, #-3100]
+	str	r1, [r2, #48]
+	ldr	r1, [r3, #-3152]
+	ldr	r3, [r3, #-3156]
+	str	r1, [r2, #60]
+	mov	r1, #1
+	str	r3, [r2, #64]
+	b	FtlVendorPartWrite
+.L2512:
+	.align	2
+.L2511:
+	.word	.LANCHOR4
+	.word	1179929683
+	.word	1342177367
+	.word	.LANCHOR2
+	.fnend
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	2
+	.global	FtlEctTblFlush
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2521
+	ldr	r2, [r3, #-3336]
+	cmp	r2, #0
+	moveq	r2, #32
+	beq	.L2514
+	ldr	r2, [r3, #-3100]
+	cmp	r2, #39
+	movhi	r2, #32
+	movls	r2, #4
+.L2514:
+	ldr	ip, .L2521+4
+	ldrh	r1, [ip, #200]
+	cmp	r1, #31
+	addls	r1, r1, #1
+	strlsh	r1, [ip, #200]	@ movhi
+	movls	r2, #1
+	cmp	r0, #0
+	bne	.L2516
+	ldr	r1, [r3, #-2952]
+	ldr	r0, [r1, #20]
+	ldr	r1, [r1, #16]
+	add	r2, r2, r0
+	cmp	r1, r2
+	bcc	.L2517
+.L2516:
+	ldr	r2, [r3, #-2952]
+	mov	r0, #64
+	ldr	r1, [r2, #16]
+	str	r1, [r2, #20]
+	ldr	r1, .L2521+8
+	str	r1, [r2]
+	ldr	r2, [r3, #-2952]
+	ldr	r3, .L2521+12
+	ldrh	r1, [r3]
+	mov	r3, r1, asl #9
+	str	r3, [r2, #12]
+	ldr	r3, [r2, #8]
+	add	r3, r3, #1
+	str	r3, [r2, #8]
+	mov	r3, #0
+	str	r3, [r2, #4]
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
+.L2517:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2522:
+	.align	2
+.L2521:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	1112818501
+	.word	.LANCHOR2-2960
+	.fnend
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.align	2
+	.global	Ftl_load_ext_data
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #0
+	ldr	r5, .L2528
+	mov	r1, #1
+	ldr	r4, .L2528+4
+	sub	r2, r5, #320
+	bl	FtlVendorPartRead
+	ldr	r3, [r5, #-320]
+	cmp	r3, r4
+	beq	.L2524
+	sub	r0, r5, #320
+	mov	r1, #0
+	mov	r2, #512
+	bl	ftl_memset
+	str	r4, [r5, #-320]
+.L2524:
+	ldr	r2, [r5, #-320]
+	ldr	r3, .L2528
+	cmp	r2, r4
+	ldr	r4, .L2528+8
+	bne	.L2525
+	ldr	r2, [r3, #-232]
+	str	r2, [r3, #192]
+	ldr	r2, [r3, #-228]
+	str	r2, [r3, #196]
+	ldr	r2, [r3, #-312]
+	str	r2, [r4, #-3140]
+	ldr	r2, [r3, #-308]
+	str	r2, [r4, #-3136]
+	ldr	r2, [r3, #-304]
+	str	r2, [r4, #-3120]
+	ldr	r2, [r3, #-300]
+	str	r2, [r4, #-3124]
+	ldr	r2, [r3, #-292]
+	str	r2, [r4, #-3112]
+	ldr	r2, [r3, #-288]
+	str	r2, [r4, #-3108]
+	ldr	r2, [r3, #-284]
+	str	r2, [r4, #-3132]
+	ldr	r2, [r3, #-280]
+	str	r2, [r4, #-3128]
+	ldr	r2, [r3, #-276]
+	str	r2, [r4, #-3104]
+	ldr	r2, [r3, #-272]
+	ldr	r3, [r3, #-260]
+	str	r2, [r4, #-3100]
+	str	r3, [r4, #-3152]
+.L2525:
+	mov	r3, #0
+	ldr	r2, [r5, #-252]
+	str	r3, [r4, #-3156]
+	ldr	r3, .L2528+12
+	cmp	r2, r3
+	bne	.L2526
+	ldr	r3, .L2528+8
+	mov	r2, #1
+	ldr	r0, .L2528+16
+	ldr	r1, .L2528+20
+	str	r2, [r3, #-3336]
+	bl	printk
+.L2526:
+	ldr	r3, .L2528+24
+	ldr	r2, [r4, #-3112]
+	ldr	r0, [r4, #-3116]
+	ldrh	r1, [r3, #-8]
+	mla	r0, r0, r1, r2
+	ldrh	r1, [r3, #-60]
+	bl	__aeabi_uidiv
+	str	r0, [r5, #204]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2529:
+	.align	2
+.L2528:
+	.word	.LANCHOR4
+	.word	1179929683
+	.word	.LANCHOR2
+	.word	305432421
+	.word	.LC46
+	.word	.LC67
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	ftl_scan_all_ppa
+	.type	ftl_scan_all_ppa, %function
+ftl_scan_all_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L2537
+	mov	r7, #0
+	ldr	r0, .L2537+4
+	sub	r9, r5, #2
+	add	r4, r5, #3200
+	ldrh	r1, [r5, #-2]
+	ldrh	r2, [r5]
+	bl	printk
+.L2531:
+	ldrh	r3, [r9]
+	cmp	r7, r3
+	bcs	.L2533
+	mov	r8, r7, asl #10
+	mov	r6, #0
+.L2534:
+	ldrh	r3, [r5]
+	cmp	r6, r3
+	bcs	.L2536
+	add	r3, r6, r8
+	str	r3, [r4, #-2804]
+	ldr	r3, [r4, #-3008]
+	mov	r2, #0
+	mov	r1, #1
+	ldr	r0, .L2537+8
+	str	r2, [r4, #-2808]
+	add	r6, r6, #1
+	str	r3, [r4, #-2800]
+	ldr	r3, [r4, #-2976]
+	str	r3, [r4, #-2796]
+	bl	FlashReadPages
+	ldr	r3, [r4, #-2796]
+	ldr	r2, [r4, #-2800]
+	ldr	r0, .L2537+12
+	ldr	r1, [r3, #4]
+	str	r1, [sp]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	ldr	r2, [r2, #4]
+	str	r2, [sp, #16]
+	ldr	r1, [r4, #-2804]
+	ldr	r2, [r4, #-2808]
+	ldr	r3, [r3]
+	bl	printk
+	b	.L2534
+.L2536:
+	add	r7, r7, #1
+	b	.L2531
+.L2533:
+	ldr	r0, .L2537+16
+	ldr	r1, .L2537+20
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	b	printk
+.L2538:
+	.align	2
+.L2537:
+	.word	.LANCHOR2-3200
+	.word	.LC68
+	.word	.LANCHOR2-2808
+	.word	.LC69
+	.word	.LC70
+	.word	.LANCHOR3+64
+	.fnend
+	.size	ftl_scan_all_ppa, .-ftl_scan_all_ppa
+	.align	2
+	.global	update_multiplier_value
+	.type	update_multiplier_value, %function
+update_multiplier_value:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #0
+	ldr	r3, .L2549
+	mov	r7, r0
+	mov	r4, r5
+	add	r6, r3, #24
+	ldrh	r8, [r3, #-4]
+	ldrh	r9, [r3, #64]
+.L2540:
+	uxth	r3, r5
+	cmp	r3, r8
+	bcs	.L2548
+	ldrb	r0, [r6, r5]	@ zero_extendqisi2
+	mov	r1, r7
+	bl	V2P_block
+	add	r5, r5, #1
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	addeq	r4, r4, r9
+	uxtheq	r4, r4
+	b	.L2540
+.L2548:
+	cmp	r4, #0
+	beq	.L2543
+	mov	r1, r4
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r4, r0
+.L2543:
+	ldr	r3, .L2549+4
+	mov	r2, #6
+	mov	r0, #0
+	ldr	r3, [r3, #-2888]
+	mla	r7, r2, r7, r3
+	strh	r4, [r7, #4]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L2550:
+	.align	2
+.L2549:
+	.word	.LANCHOR2-3264
+	.word	.LANCHOR2
+	.fnend
+	.size	update_multiplier_value, .-update_multiplier_value
+	.align	2
+	.global	GetFreeBlockMinEraseCount
+	.type	GetFreeBlockMinEraseCount, %function
+GetFreeBlockMinEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L2554
+	ldr	r0, [r2, #-656]
+	cmp	r0, #0
+	bxeq	lr
+	ldr	r3, [r2, #-2888]
+	rsb	r0, r3, r0
+	ldr	r3, .L2554+4
+	mov	r0, r0, asr #1
+	mul	r0, r3, r0
+	ldr	r3, [r2, #-2948]
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r0, [r3, r0]
+	bx	lr
+.L2555:
+	.align	2
+.L2554:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
+	.align	2
+	.global	GetFreeBlockMaxEraseCount
+	.type	GetFreeBlockMaxEraseCount, %function
+GetFreeBlockMaxEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r1, .L2566
+	ldr	r3, [r1, #-656]
+	cmp	r3, #0
+	beq	.L2562
+	sub	r2, r1, #652
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r4, #6
+	ldrh	r2, [r2]
+	movw	r5, #65535
+	ldr	ip, [r1, #-2888]
+	rsb	r2, r2, r2, asl #3
+	rsb	r3, ip, r3
+	mov	r2, r2, asr #3
+	mov	r3, r3, asr #1
+	cmp	r0, r2
+	uxthgt	r0, r2
+	ldr	r2, .L2566+4
+	mul	r3, r2, r3
+	mov	r2, #0
+	uxth	r3, r3
+.L2559:
+	uxth	lr, r2
+	cmp	lr, r0
+	bcs	.L2561
+	mul	lr, r4, r3
+	add	r2, r2, #1
+	ldrh	lr, [ip, lr]
+	cmp	lr, r5
+	bne	.L2563
+.L2561:
+	ldr	r2, [r1, #-2948]
+	mov	r3, r3, asl #1
+	ldrh	r0, [r2, r3]
+	ldmfd	sp!, {r4, r5, pc}
+.L2563:
+	mov	r3, lr
+	b	.L2559
+.L2562:
+	mov	r0, r3
+	bx	lr
+.L2567:
+	.align	2
+.L2566:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
+	.align	2
+	.global	FtlPrintInfo2buf
+	.type	FtlPrintInfo2buf, %function
+FtlPrintInfo2buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r0
+	ldr	r7, .L2580
+	add	r6, r8, #12
+	ldr	r9, .L2580+4
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r1, .L2580+8
+	ldr	r3, [r7]
+	str	r3, [sp, #44]
+	bl	strcpy
+	mov	r0, r6
+	ldr	r1, .L2580+12
+	ldr	r2, [r9, #3876]
+	bl	sprintf
+	ldr	r1, .L2580+16
+	add	r5, r6, r0
+	ldr	r6, .L2580+20
+	mov	r0, r5
+	ldr	r2, [r6, #-3184]
+	bl	sprintf
+	ldr	r3, .L2580+24
+	ldr	r3, [r3, #3284]
+	cmp	r3, #1
+	add	r4, r5, r0
+	bne	.L2574
+	add	r0, sp, #28
+	add	r1, sp, #32
+	add	r2, sp, #36
+	add	r3, sp, #40
+	bl	NandcGetTimeCfg
+	mov	r0, r4
+	ldr	r1, .L2580+28
+	sub	fp, r6, #2880
+	sub	r10, r6, #652
+	ldr	r3, [sp, #36]
+	ldr	r2, [sp, #28]
+	str	r3, [sp]
+	ldr	r3, [sp, #40]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #32]
+	bl	sprintf
+	ldr	r1, .L2580+32
+	add	r4, r4, r0
+	add	r5, r4, #10
+	mov	r0, r4
+	ldr	r4, .L2580+36
+	bl	strcpy
+	mov	r0, r5
+	ldr	r1, .L2580+40
+	ldr	r2, [r6, #-2816]
+	bl	sprintf
+	ldr	r1, .L2580+44
+	ldr	r2, [r6, #-408]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+48
+	ldr	r2, [r6, #-3120]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+52
+	ldr	r2, [r6, #-3132]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+56
+	ldr	r2, [r6, #-3136]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+60
+	ldr	r2, [r6, #-3128]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+64
+	ldr	r2, [r6, #-3124]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+68
+	ldr	r2, [r6, #-3140]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r4, #192]
+	ldr	r1, .L2580+72
+	mov	r2, r2, lsr #11
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r4, #196]
+	ldr	r1, .L2580+76
+	mov	r2, r2, lsr #11
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+80
+	ldr	r2, [r6, #-3148]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+84
+	ldr	r2, [r6, #-3144]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	add	r5, r5, r0
+	bl	FtlBbtCalcTotleCnt
+	ldrh	r2, [fp, #6]
+	ldr	r1, .L2580+88
+	mov	r3, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+92
+	ldrh	r2, [r10]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+96
+	ldr	r2, [r6, #-3116]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+100
+	ldr	r2, [r6, #-3112]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r4, #204]
+	ldr	r1, .L2580+104
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+108
+	ldr	r2, [r6, #-3108]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+112
+	ldr	r2, [r6, #-3104]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+116
+	ldr	r2, [r6, #-3100]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	sub	r3, r6, #716
+	ldr	r1, .L2580+120
+	ldrh	r2, [r3, #30]
+	add	r5, r5, r0
+	str	r3, [sp, #20]
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+124
+	ldr	r3, [sp, #20]
+	add	r5, r5, r0
+	mov	r0, r5
+	ldrh	r2, [r3, #28]
+	bl	sprintf
+	ldr	r2, [r9, #3908]
+	ldr	r1, .L2580+128
+	sub	r9, r6, #648
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+132
+	ldr	r2, [r6, #-3168]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+136
+	ldr	r2, [r6, #-3272]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [fp, #114]
+	ldr	r1, .L2580+140
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	sub	r3, r6, #3248
+	ldr	r1, .L2580+144
+	ldrh	r2, [r3, #-12]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	sub	r3, r4, #372
+	ldr	r1, .L2580+148
+	ldrh	r2, [r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+152
+	ldr	r2, [r6, #-3256]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	sub	r3, r6, #404
+	ldr	r1, .L2580+156
+	ldrh	r2, [r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [fp]
+	ldr	r1, .L2580+160
+	sub	fp, r6, #3056
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #2]
+	ldr	r1, .L2580+164
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+168
+	ldrb	r2, [r6, #-642]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9]
+	ldr	r1, .L2580+172
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+176
+	ldrb	r2, [r6, #-640]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #4]
+	ldr	r1, .L2580+180
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r3, [r9]
+	ldr	r2, [r6, #-2940]
+	sub	r9, r6, #600
+	ldr	r1, .L2580+184
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #2]
+	ldr	r1, .L2580+188
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+192
+	ldrb	r2, [r6, #-594]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9]
+	ldr	r1, .L2580+196
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+200
+	ldrb	r2, [r6, #-592]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #4]
+	ldr	r1, .L2580+204
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r3, [r9]
+	ldr	r2, [r6, #-2940]
+	sub	r9, r6, #552
+	ldr	r1, .L2580+208
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #2]
+	ldr	r1, .L2580+212
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+216
+	ldrb	r2, [r6, #-546]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9]
+	ldr	r1, .L2580+220
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+224
+	ldrb	r2, [r6, #-544]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r2, [r9, #4]
+	ldr	r1, .L2580+228
+	sub	r9, r4, #368
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+232
+	ldrh	r2, [r9, #2]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrb	r2, [r4, #-362]	@ zero_extendqisi2
+	ldr	r1, .L2580+236
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+240
+	ldrh	r2, [r9]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrb	r2, [r4, #-360]	@ zero_extendqisi2
+	ldr	r1, .L2580+244
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+248
+	ldrh	r2, [r9, #4]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, [r4, #-236]
+	ldr	r3, [r6, #-3336]
+	ldr	r2, [r6, #-3152]
+	orr	r2, r3, r2, asl #8
+	str	r1, [sp]
+	add	r5, r5, r0
+	ldr	r1, [r4, #-244]
+	mov	r0, r5
+	str	r1, [sp, #4]
+	ldr	r1, .L2580+252
+	ldr	r3, [r4, #-240]
+	bl	sprintf
+	ldr	r2, [r4, #-248]
+	ldr	r1, .L2580+256
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r4, #-224]
+	ldr	r1, .L2580+260
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+264
+	ldrh	r2, [fp, #-8]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L2580+268
+	ldrh	r2, [fp, #-6]
+	add	r4, r5, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L2580+272
+	ldr	r2, [r6, #-3080]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L2580+276
+	ldrh	r2, [fp, #-4]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	add	r4, r4, r0
+	bl	GetFreeBlockMinEraseCount
+	ldr	r1, .L2580+280
+	mov	r2, r0
+	mov	r0, r4
+	bl	sprintf
+	add	r4, r4, r0
+	ldrh	r0, [r10]
+	bl	GetFreeBlockMaxEraseCount
+	ldr	r1, .L2580+284
+	mov	r2, r0
+	mov	r0, r4
+	bl	sprintf
+	ldrh	r3, [r9]
+	movw	r2, #65535
+	cmp	r3, r2
+	add	r4, r4, r0
+	beq	.L2571
+	ldr	r2, [r6, #-2940]
+	mov	r3, r3, asl #1
+	mov	r0, r4
+	ldr	r1, .L2580+288
+	ldrh	r2, [r2, r3]
+	bl	sprintf
+	add	r4, r4, r0
+.L2571:
+	mov	r0, #0
+	mov	r5, #0
+	bl	List_get_gc_head_node
+	movw	fp, #65535
+	mov	r10, #6
+	uxth	r3, r0
+.L2573:
+	cmp	r3, fp
+	beq	.L2572
+	ldr	r2, [r6, #-2940]
+	mov	r1, r3, asl #1
+	mul	r9, r10, r3
+	mov	r0, r4
+	ldrh	r2, [r2, r1]
+	str	r2, [sp]
+	ldr	r2, [r6, #-2888]
+	add	r2, r2, r9
+	ldrh	r2, [r2, #4]
+	str	r2, [sp, #4]
+	ldr	r2, [r6, #-2948]
+	ldrh	r2, [r2, r1]
+	ldr	r1, .L2580+292
+	str	r2, [sp, #8]
+	mov	r2, r5
+	bl	sprintf
+	add	r5, r5, #1
+	ldr	r3, [r6, #-2888]
+	cmp	r5, #16
+	ldrh	r3, [r3, r9]
+	add	r4, r4, r0
+	bne	.L2573
+.L2572:
+	ldr	r2, [r6, #-2888]
+	mov	r5, #0
+	ldr	r3, [r6, #-656]
+	movw	fp, #65535
+	mov	r10, #6
+	rsb	r3, r2, r3
+	ldr	r2, .L2580+296
+	mov	r3, r3, asr #1
+	mul	r3, r2, r3
+	uxth	r3, r3
+.L2575:
+	cmp	r3, fp
+	beq	.L2574
+	mul	r9, r10, r3
+	ldr	r2, [r6, #-2888]
+	mov	r0, r4
+	add	r2, r2, r9
+	ldrh	r2, [r2, #4]
+	str	r2, [sp]
+	mov	r2, r3, asl #1
+	ldr	r1, [r6, #-2948]
+	ldrh	r2, [r1, r2]
+	ldr	r1, .L2580+300
+	str	r2, [sp, #4]
+	mov	r2, r5
+	bl	sprintf
+	add	r5, r5, #1
+	ldr	r3, [r6, #-2888]
+	cmp	r5, #4
+	ldrh	r3, [r3, r9]
+	add	r4, r4, r0
+	bne	.L2575
+.L2574:
+	ldr	r2, [sp, #44]
+	rsb	r0, r8, r4
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L2576
+	bl	__stack_chk_fail
+.L2576:
+	add	sp, sp, #52
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2581:
+	.align	2
+.L2580:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC71
+	.word	.LC72
+	.word	.LC73
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.word	.LC74
+	.word	.LC75
+	.word	.LANCHOR4
+	.word	.LC76
+	.word	.LC77
+	.word	.LC78
+	.word	.LC79
+	.word	.LC80
+	.word	.LC81
+	.word	.LC82
+	.word	.LC83
+	.word	.LC84
+	.word	.LC85
+	.word	.LC86
+	.word	.LC87
+	.word	.LC88
+	.word	.LC89
+	.word	.LC90
+	.word	.LC91
+	.word	.LC92
+	.word	.LC93
+	.word	.LC94
+	.word	.LC95
+	.word	.LC96
+	.word	.LC97
+	.word	.LC98
+	.word	.LC99
+	.word	.LC100
+	.word	.LC101
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.word	.LC105
+	.word	.LC106
+	.word	.LC107
+	.word	.LC108
+	.word	.LC109
+	.word	.LC110
+	.word	.LC111
+	.word	.LC112
+	.word	.LC113
+	.word	.LC114
+	.word	.LC115
+	.word	.LC116
+	.word	.LC117
+	.word	.LC118
+	.word	.LC119
+	.word	.LC120
+	.word	.LC121
+	.word	.LC122
+	.word	.LC123
+	.word	.LC124
+	.word	.LC125
+	.word	.LC126
+	.word	.LC127
+	.word	.LC128
+	.word	.LC129
+	.word	.LC130
+	.word	.LC131
+	.word	.LC132
+	.word	.LC133
+	.word	.LC134
+	.word	.LC135
+	.word	.LC136
+	.word	.LC137
+	.word	.LC138
+	.word	.LC139
+	.word	-1431655765
+	.word	.LC140
+	.fnend
+	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
+	.align	2
+	.global	ftl_proc_ftl_read
+	.type	ftl_proc_ftl_read, %function
+ftl_proc_ftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	ldr	r1, .L2584
+	ldr	r2, .L2584+4
+	bl	sprintf
+	add	r4, r5, r0
+	mov	r0, r4
+	bl	FtlPrintInfo2buf
+	add	r0, r4, r0
+	rsb	r0, r5, r0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2585:
+	.align	2
+.L2584:
+	.word	.LC46
+	.word	.LC141
+	.fnend
+	.size	ftl_proc_ftl_read, .-ftl_proc_ftl_read
+	.align	2
+	.global	GetSwlReplaceBlock
+	.type	GetSwlReplaceBlock, %function
+GetSwlReplaceBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L2616
+	ldr	r4, .L2616+4
+	ldr	r6, [r5, #204]
+	ldr	r3, [r4, #-3100]
+	cmp	r6, r3
+	bcs	.L2587
+	sub	r3, r4, #3248
+	mov	r6, #0
+	str	r6, [r4, #-3116]
+	ldrh	r1, [r3, #-12]
+	ldr	r3, [r4, #-2948]
+	sub	r3, r3, #2
+.L2588:
+	cmp	r6, r1
+	bcs	.L2615
+	ldrh	r2, [r3, #2]!
+	add	r6, r6, #1
+	ldr	r0, [r4, #-3116]
+	add	r2, r2, r0
+	str	r2, [r4, #-3116]
+	b	.L2588
+.L2615:
+	ldr	r6, [r4, #-3116]
+	mov	r0, r6
+	bl	__aeabi_uidiv
+	ldr	r3, .L2616+8
+	ldrh	r1, [r3, #-8]
+	str	r0, [r5, #204]
+	ldr	r0, [r4, #-3112]
+	rsb	r0, r0, r6
+	bl	__aeabi_uidiv
+	str	r0, [r4, #-3116]
+	b	.L2590
+.L2587:
+	ldr	r3, [r4, #-3104]
+	cmp	r6, r3
+	bls	.L2590
+	ldr	ip, .L2616+12
+	add	r3, r3, #1
+	mov	lr, r4
+	str	r3, [r4, #-3104]
+	mov	r3, #0
+.L2592:
+	ldrh	r2, [ip]
+	cmp	r3, r2
+	bcs	.L2590
+	ldr	r0, [lr, #-2948]
+	mov	r1, r3, asl #1
+	add	r3, r3, #1
+	ldrh	r2, [r0, r1]
+	add	r2, r2, #1
+	strh	r2, [r0, r1]	@ movhi
+	b	.L2592
+.L2590:
+	ldr	r6, [r4, #-3100]
+	ldr	r8, [r5, #204]
+	add	r3, r6, #256
+	ldr	r2, .L2616+4
+	cmp	r3, r8
+	bls	.L2595
+	ldr	r1, [r2, #-3104]
+	add	r3, r6, #768
+	cmp	r3, r1
+	bls	.L2595
+	cmp	r6, #40
+	ldr	r2, [r2, #-3336]
+	movls	r3, #0
+	movhi	r3, #1
+	cmp	r2, #0
+	orreq	r3, r3, #1
+	cmp	r3, #0
+	beq	.L2595
+.L2597:
+	movw	r0, #65535
+	b	.L2596
+.L2595:
+	ldr	r10, .L2616+4
+	sub	r3, r10, #652
+	ldrh	r0, [r3]
+	add	r0, r0, r0, asl #1
+	ubfx	r0, r0, #2, #16
+	bl	GetFreeBlockMaxEraseCount
+	add	r1, r6, #64
+	cmp	r0, r1
+	mov	r9, r0
+	movcs	r1, #0
+	movcc	r1, #1
+	cmp	r6, #40
+	movls	r1, #0
+	cmp	r1, #0
+	bne	.L2597
+	ldr	r3, [r10, #-668]
+	cmp	r3, #0
+	beq	.L2597
+	sub	r2, r10, #3248
+	ldr	r0, [r10, #-2888]
+	ldr	ip, .L2616+16
+	movw	r7, #65535
+	ldrh	r2, [r2, #-12]
+	mov	r5, r7
+	ldr	r10, [r10, #-2948]
+	mov	lr, #6
+	str	r2, [sp, #20]
+.L2598:
+	ldrh	r2, [r3]
+	movw	fp, #65535
+	cmp	r2, fp
+	beq	.L2600
+	add	r1, r1, #1
+	ldr	fp, [sp, #20]
+	uxth	r1, r1
+	cmp	r1, fp
+	bhi	.L2597
+	ldrh	fp, [r3, #4]
+	cmp	fp, #0
+	beq	.L2599
+	rsb	r3, r0, r3
+	mov	r3, r3, asr #1
+	mul	r3, ip, r3
+	uxth	r3, r3
+	mov	fp, r3, asl #1
+	ldrh	fp, [r10, fp]
+	cmp	fp, r6
+	bls	.L2604
+	cmp	fp, r7
+	movcc	r7, fp
+	movcc	r5, r3
+.L2599:
+	mla	r3, lr, r2, r0
+	b	.L2598
+.L2604:
+	mov	r5, r3
+.L2600:
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L2597
+	mov	r3, r5, asl #1
+	ldrh	fp, [r10, r3]
+	cmp	fp, r6
+	bls	.L2602
+	str	r3, [sp, #20]
+	bl	GetFreeBlockMinEraseCount
+	ldr	r3, [sp, #20]
+	cmp	r0, r6
+	strhi	r7, [r4, #-3100]
+.L2602:
+	cmp	fp, r8
+	bcs	.L2597
+	add	r2, fp, #128
+	cmp	r9, r2
+	ble	.L2597
+	add	r2, fp, #256
+	cmp	r2, r8
+	bcc	.L2603
+	ldr	r2, [r4, #-3104]
+	add	fp, fp, #768
+	cmp	fp, r2
+	bcs	.L2597
+.L2603:
+	ldr	r2, [r4, #-2940]
+	mov	r1, r5
+	ldr	r0, .L2616+20
+	ldrh	r2, [r2, r3]
+	str	r2, [sp]
+	mov	r2, r8
+	ldrh	r3, [r10, r3]
+	stmib	sp, {r3, r9}
+	ldr	r3, [r4, #-3104]
+	bl	printk
+	mov	r0, r5
+	mov	r3, #1
+	str	r3, [r4, #-3092]
+.L2596:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2617:
+	.align	2
+.L2616:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR2-3260
+	.word	-1431655765
+	.word	.LC142
+	.fnend
+	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
+	.align	2
+	.global	free_data_superblock
+	.type	free_data_superblock, %function
+free_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r2, #65535
+	cmp	r0, r2
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	beq	.L2619
+	ldr	r2, .L2621
+	mov	r3, r0, asl #1
+	mov	r1, #0
+	ldr	r2, [r2, #-2940]
+	strh	r1, [r2, r3]	@ movhi
+	bl	INSERT_FREE_LIST
+.L2619:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2622:
+	.align	2
+.L2621:
+	.word	.LANCHOR2
+	.fnend
+	.size	free_data_superblock, .-free_data_superblock
+	.align	2
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L2678
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	bne	.L2624
+	mov	r5, r0
+	mov	r7, r4
+.L2625:
+	ldr	r3, .L2678+4
+	ldrb	r2, [r5, #8]	@ zero_extendqisi2
+	cmp	r5, r3
+	sub	r6, r3, #100
+	bne	.L2626
+	ldrh	r3, [r6]
+	ldr	ip, [r7, #-3092]
+	mov	r0, r3, lsr #1
+	mul	lr, ip, r3
+	add	r1, r0, #1
+	add	r1, r1, lr, lsr #2
+	ldr	lr, [r7, #-3336]
+	cmp	lr, #0
+	uxth	r1, r1
+	beq	.L2627
+	ldr	lr, [r7, #-3100]
+	cmp	lr, #39
+	bhi	.L2627
+	cmp	lr, #2
+	bls	.L2652
+	cmp	ip, #0
+	movne	r3, #0
+	andeq	r3, r3, #1
+	cmp	r3, #0
+	moveq	r1, r0
+	beq	.L2627
+	b	.L2652
+.L2626:
+	cmp	r2, #1
+	bne	.L2652
+	ldr	r3, .L2678+8
+	ldrh	r3, [r3]
+	cmp	r3, #1
+	beq	.L2652
+	ldr	r3, .L2678+12
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2652
+	ldr	r0, [r7, #-3336]
+	ldrh	r3, [r6]
+	cmp	r0, #0
+	mov	r1, r3, lsr #3
+	beq	.L2627
+	ldr	r0, [r7, #-3100]
+	cmp	r0, #1
+	rsbls	r3, r3, r3, asl #3
+	ubfxls	r1, r3, #3, #16
+.L2627:
+	cmp	r1, #0
+	subne	r1, r1, #1
+	uxthne	r1, r1
+	b	.L2628
+.L2652:
+	mov	r1, #0
+.L2628:
+	ldr	r0, .L2678+16
+	bl	List_pop_index_node
+	ldr	r10, .L2678+20
+	ldrh	r3, [r6]
+	sub	r3, r3, #1
+	strh	r3, [r6]	@ movhi
+	ldrh	r3, [r10]
+	uxth	r9, r0
+	cmp	r3, r9
+	bls	.L2625
+	ldr	r3, [r7, #-2940]
+	mov	r8, r9, asl #1
+	ldrh	r6, [r3, r8]
+	cmp	r6, #0
+	bne	.L2625
+	strh	r9, [r5]	@ movhi
+	mov	r0, r5
+	bl	make_superblock
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2630
+	ldr	r0, [r7, #-3024]
+	mov	r2, #36
+	ldrh	lr, [r10, #-8]
+	add	ip, r5, #14
+	mov	r3, r0
+	mla	r1, r2, lr, r0
+	mov	lr, r6
+	str	r1, [sp, #4]
+	b	.L2631
+.L2630:
+	ldr	r3, [r7, #-2940]
+	b	.L2673
+.L2631:
+	ldr	r1, [sp, #4]
+	cmp	r3, r1
+	beq	.L2675
+	str	lr, [r3, #8]
+	movw	fp, #65535
+	str	lr, [r3, #12]
+	add	r3, r3, #36
+	ldrh	r1, [ip, #2]!
+	cmp	r1, fp
+	movne	r1, r1, asl #10
+	mlane	fp, r2, r6, r0
+	addne	r6, r6, #1
+	uxthne	r6, r6
+	strne	r1, [fp, #4]
+	b	.L2631
+.L2675:
+	ldr	r3, .L2678+24
+	ldr	r2, [r4, #-3336]
+	rsb	r3, r3, r5
+	clz	r3, r3
+	cmp	r2, #0
+	mov	r3, r3, lsr #5
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L2634
+	ldr	r3, [r7, #-2948]
+	ldrh	r3, [r3, r8]
+	cmp	r3, #40
+	movhi	r3, #0
+	strhib	r3, [r7, #-640]
+.L2634:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	ldr	r2, [r4, #-2948]
+	cmp	r3, #0
+	ldrh	r3, [r2, r8]
+	bne	.L2635
+	cmp	r3, #0
+	mov	r0, r9
+	ldrne	r1, .L2678+28
+	moveq	r3, #2
+	ldrneh	r1, [r1]
+	addne	r3, r3, r1
+	mov	r1, #0
+	uxthne	r3, r3
+	strh	r3, [r2, r8]	@ movhi
+	ldr	r3, [r4, #-3116]
+	add	r3, r3, #1
+	str	r3, [r4, #-3116]
+	bl	ftl_set_blk_mode
+	b	.L2637
+.L2635:
+	add	r3, r3, #1
+	strh	r3, [r2, r8]	@ movhi
+	ldr	r1, [r4, #-2928]
+	mov	r0, r9, lsr #5
+	ldr	r3, [r4, #-3112]
+	mov	ip, #1
+	add	r3, r3, #1
+	str	r3, [r4, #-3112]
+	ldr	r2, [r1, r0, asl #2]
+	and	r3, r9, #31
+	orr	r3, r2, ip, asl r3
+	str	r3, [r1, r0, asl #2]
+.L2637:
+	ldr	r3, [r4, #-2948]
+	ldr	r2, [r4, #-3104]
+	ldr	r0, [r4, #-3116]
+	ldrh	r3, [r3, r8]
+	ldrh	r1, [r10]
+	cmp	r3, r2
+	strhi	r3, [r7, #-3104]
+	ldr	r3, .L2678+28
+	ldrh	r2, [r3]
+	ldr	r3, [r4, #-3112]
+	mla	r0, r0, r2, r3
+	bl	__aeabi_uidiv
+	ldr	r2, [r4, #-2952]
+	ldr	r3, .L2678+32
+	str	r0, [r3, #204]
+	ldr	r3, [r2, #16]
+	add	r3, r3, #1
+	str	r3, [r2, #16]
+	ldr	r2, [r4, #-3024]
+	mov	r3, #36
+	add	r1, r2, #4
+	mla	r3, r3, r6, r2
+	add	r3, r3, #40
+.L2639:
+	add	r1, r1, #36
+	cmp	r1, r3
+	ldrne	r2, [r1, #-36]
+	bicne	r2, r2, #1020
+	bicne	r2, r2, #3
+	strne	r2, [r1, #-36]
+	bne	.L2639
+.L2676:
+	ldr	r3, .L2678+12
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2641
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r6
+	ldr	r0, [r4, #-3024]
+	cmp	r3, #1
+	moveq	r1, #0
+	movne	r1, #1
+	bl	FlashEraseBlocks
+.L2641:
+	ldrb	r1, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r6
+	ldr	r0, [r4, #-3024]
+	mov	r10, #0
+	bl	FlashEraseBlocks
+	add	r2, r5, #16
+	mov	fp, r10
+	mov	r1, #36
+.L2643:
+	uxth	r3, r10
+	cmp	r3, r6
+	bcs	.L2677
+	mul	r3, r1, r10
+	ldr	ip, [r4, #-3024]
+	add	r0, ip, r3
+	ldr	r3, [ip, r3]
+	cmn	r3, #1
+	bne	.L2644
+	ldr	r0, [r0, #4]
+	add	fp, fp, #1
+	str	r1, [sp, #12]
+	ubfx	r0, r0, #10, #16
+	stmib	sp, {r2, r3}
+	bl	FtlBbmMapBadBlock
+	ldmib	sp, {r2, r3}
+	ldr	r1, [sp, #12]
+	strh	r3, [r2]	@ movhi
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	strb	r3, [r5, #7]
+.L2644:
+	add	r10, r10, #1
+	add	r2, r2, #2
+	b	.L2643
+.L2677:
+	cmp	fp, #0
+	beq	.L2646
+	mov	r0, r9
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L2646:
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2647
+	ldr	r3, [r4, #-2940]
+.L2673:
+	mvn	r2, #0
+	strh	r2, [r3, r8]	@ movhi
+	b	.L2625
+.L2647:
+	ldr	r2, .L2678+36
+	ldrh	r2, [r2]
+	strh	r9, [r5]	@ movhi
+	smulbb	r3, r2, r3
+	mov	r2, #0
+	strh	r2, [r5, #2]	@ movhi
+	strb	r2, [r5, #6]
+	ldr	r2, [r4, #-3148]
+	ldr	r1, [r4, #-2940]
+	uxth	r3, r3
+	strh	r3, [r5, #4]	@ movhi
+	str	r2, [r5, #12]
+	add	r2, r2, #1
+	str	r2, [r4, #-3148]
+	ldrh	r2, [r5]
+	mov	r2, r2, asl #1
+	strh	r3, [r1, r2]	@ movhi
+.L2624:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2679:
+	.align	2
+.L2678:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-552
+	.word	.LANCHOR2-3248
+	.word	.LANCHOR0
+	.word	.LANCHOR2-656
+	.word	.LANCHOR2-3260
+	.word	.LANCHOR2-648
+	.word	.LANCHOR2-3208
+	.word	.LANCHOR4
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlGcBufInit
+	.type	FtlGcBufInit, %function
+FtlGcBufInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r4, #12
+	ldr	lr, .L2688
+	mov	r5, #1
+	ldr	r2, .L2688+4
+	mov	r7, #36
+	ldr	r1, .L2688+8
+	add	r6, lr, #78
+	mov	r3, #0
+	str	r3, [r2, #208]
+.L2681:
+	ldrh	r2, [lr]
+	add	ip, r3, #1
+	uxth	r3, r3
+	ldr	r0, .L2688+8
+	cmp	r3, r2
+	bcs	.L2686
+	mul	r0, r4, r3
+	ldr	r8, [r1, #-2980]
+	add	r2, r8, r0
+	str	r5, [r2, #8]
+	ldrh	r2, [r6]
+	mul	r2, r2, r3
+	add	r9, r2, #3
+	cmp	r2, #0
+	movlt	r2, r9
+	ldr	r9, [r1, #-2996]
+	bic	r2, r2, #3
+	add	r2, r9, r2
+	str	r2, [r8, r0]
+	ldr	r2, .L2688+12
+	ldr	r9, [r1, #-2980]
+	ldrh	r2, [r2]
+	add	r8, r9, r0
+	mul	r2, r2, r3
+	add	r10, r2, #3
+	cmp	r2, #0
+	movlt	r2, r10
+	ldr	r10, [r1, #-2968]
+	bic	r2, r2, #3
+	add	r2, r10, r2
+	str	r2, [r8, #4]
+	ldr	r2, [r1, #-3020]
+	mla	r3, r7, r3, r2
+	ldr	r2, [r9, r0]
+	str	r2, [r3, #8]
+	ldr	r2, [r8, #4]
+	str	r2, [r3, #12]
+	mov	r3, ip
+	b	.L2681
+.L2686:
+	ldr	r4, .L2688+16
+	mov	r1, r0
+	mov	ip, #12
+	mov	lr, #0
+.L2683:
+	ldr	r3, [r0, #-3012]
+	cmp	r2, r3
+	bcs	.L2687
+	mul	r5, ip, r2
+	ldr	r7, [r1, #-2980]
+	add	r3, r7, r5
+	str	lr, [r3, #8]
+	ldrh	r3, [r4]
+	mul	r3, r3, r2
+	add	r6, r3, #3
+	cmp	r3, #0
+	movlt	r3, r6
+	ldr	r6, [r1, #-2996]
+	bic	r3, r3, #3
+	add	r3, r6, r3
+	str	r3, [r7, r5]
+	ldr	r3, .L2688+12
+	ldr	r6, [r1, #-2980]
+	ldrh	r3, [r3]
+	add	r5, r6, r5
+	mul	r3, r3, r2
+	add	r2, r2, #1
+	uxth	r2, r2
+	add	r6, r3, #3
+	cmp	r3, #0
+	movlt	r3, r6
+	ldr	r6, [r1, #-2968]
+	bic	r3, r3, #3
+	add	r3, r6, r3
+	str	r3, [r5, #4]
+	b	.L2683
+.L2687:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2689:
+	.align	2
+.L2688:
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3188
+	.word	.LANCHOR2-3190
+	.fnend
+	.size	FtlGcBufInit, .-FtlGcBufInit
+	.align	2
+	.global	FtlVariablesInit
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mvn	r3, #0
+	ldr	r6, .L2692
+	mov	r4, #0
+	ldr	r5, .L2692+4
+	mov	r1, r4
+	strh	r3, [r6, #216]	@ movhi
+	sub	r7, r5, #3248
+	str	r3, [r6, #228]
+	sub	r3, r5, #2816
+	ldr	r0, [r5, #-2924]
+	strh	r4, [r3, #-4]	@ movhi
+	sub	r3, r5, #3168
+	str	r4, [r6, #212]
+	ldrh	r2, [r3, #-12]
+	str	r4, [r6, #220]
+	str	r4, [r6, #224]
+	mov	r2, r2, asl #1
+	str	r4, [r5, #-3336]
+	bl	ftl_memset
+	ldrh	r2, [r7, #-10]
+	mov	r1, r4
+	ldr	r0, [r5, #-2948]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r7, #-10]
+	mov	r1, r4
+	ldr	r0, [r5, #-2956]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	mov	r1, r4
+	sub	r0, r5, #716
+	mov	r2, #48
+	bl	ftl_memset
+	mov	r1, r4
+	mov	r2, #512
+	sub	r0, r6, #320
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2693:
+	.align	2
+.L2692:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	2
+	.global	FtlGcBufFree
+	.type	FtlGcBufFree, %function
+FtlGcBufFree:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2702
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	lr, #0
+	ldr	r6, [r3, #-3012]
+	mov	r5, #36
+	ldr	r4, [r3, #-2980]
+	mov	r7, lr
+	mov	r8, #12
+.L2695:
+	uxth	ip, lr
+	cmp	ip, r1
+	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	mla	ip, r5, ip, r0
+	mov	r2, #0
+.L2696:
+	uxth	r3, r2
+	cmp	r3, r6
+	bcs	.L2697
+	mul	r3, r8, r3
+	add	r2, r2, #1
+	add	r9, r4, r3
+	ldr	r10, [r4, r3]
+	ldr	r3, [ip, #8]
+	cmp	r10, r3
+	bne	.L2696
+	str	r7, [r9, #8]
+.L2697:
+	add	lr, lr, #1
+	b	.L2695
+.L2703:
+	.align	2
+.L2702:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufFree, .-FtlGcBufFree
+	.align	2
+	.global	FtlGcBufAlloc
+	.type	FtlGcBufAlloc, %function
+FtlGcBufAlloc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2713
+	mov	ip, #0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	mov	r6, #12
+	ldr	r4, [r3, #-3012]
+	mov	r7, #1
+	ldr	r5, [r3, #-2980]
+	mov	r8, #36
+.L2705:
+	uxth	r2, ip
+	cmp	r2, r1
+	bcs	.L2712
+	mov	lr, #0
+.L2706:
+	uxth	r3, lr
+	cmp	r3, r4
+	bcs	.L2707
+	mla	r3, r6, r3, r5
+	add	lr, lr, #1
+	ldr	r9, [r3, #8]
+	cmp	r9, #0
+	bne	.L2706
+	mla	r2, r8, r2, r0
+	ldr	lr, [r3]
+	str	r7, [r3, #8]
+	str	lr, [r2, #8]
+	ldr	r3, [r3, #4]
+	str	r3, [r2, #12]
+.L2707:
+	add	ip, ip, #1
+	b	.L2705
+.L2712:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L2714:
+	.align	2
+.L2713:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
+	.align	2
+	.global	IsBlkInGcList
+	.type	IsBlkInGcList, %function
+IsBlkInGcList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L2721
+	ldr	r3, .L2721+4
+	ldrh	r2, [r2, #232]
+	ldr	r3, [r3, #-3044]
+	add	r2, r3, r2, asl #1
+.L2716:
+	cmp	r3, r2
+	beq	.L2720
+	ldrh	r1, [r3], #2
+	cmp	r1, r0
+	bne	.L2716
+	mov	r0, #1
+	bx	lr
+.L2720:
+	mov	r0, #0
+	bx	lr
+.L2722:
+	.align	2
+.L2721:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.fnend
+	.size	IsBlkInGcList, .-IsBlkInGcList
+	.align	2
+	.global	FtlGcUpdatePage
+	.type	FtlGcUpdatePage, %function
+FtlGcUpdatePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, r0
+	ubfx	r0, r0, #10, #16
+	mov	r6, r1
+	mov	r7, r2
+	bl	P2V_block_in_plane
+	ldr	lr, .L2731
+	mov	r4, #0
+	ldr	r3, .L2731+4
+	ldr	r2, [lr, #-3044]
+	ldrh	r1, [r3, #232]
+	sub	r8, r2, #2
+.L2724:
+	uxth	ip, r4
+	cmp	ip, r1
+	bcs	.L2728
+	ldrh	r9, [r8, #2]!
+	add	r4, r4, #1
+	cmp	r9, r0
+	bne	.L2724
+.L2728:
+	cmp	ip, r1
+	moveq	ip, ip, asl #1
+	streqh	r0, [r2, ip]	@ movhi
+	ldreqh	r0, [r3, #232]
+	addeq	r0, r0, #1
+	streqh	r0, [r3, #232]	@ movhi
+.L2726:
+	ldrh	r2, [r3, #234]
+	mov	ip, #12
+	mul	ip, ip, r2
+	ldr	r2, [lr, #-3040]
+	add	r1, r2, ip
+	stmib	r1, {r6, r7}
+	str	r5, [r2, ip]
+	ldrh	r2, [r3, #234]
+	add	r2, r2, #1
+	strh	r2, [r3, #234]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L2732:
+	.align	2
+.L2731:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
+	.align	2
+	.global	FtlGcPageVarInit
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #0
+	ldr	r4, .L2735
+	mov	r1, #255
+	ldr	r3, .L2735+4
+	sub	r5, r4, #3184
+	ldr	r0, [r4, #-3044]
+	strh	r2, [r3, #232]	@ movhi
+	strh	r2, [r3, #234]	@ movhi
+	ldrh	r2, [r5, #-12]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r3, [r5, #-12]
+	mov	r2, #12
+	ldr	r0, [r4, #-3040]
+	mov	r1, #255
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	FtlGcBufInit
+.L2736:
+	.align	2
+.L2735:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 80
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2785
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #84
+	sub	sp, sp, #84
+	ldr	r3, [r3]
+	mov	r4, r0
+	ldr	r2, .L2785+4
+	str	r1, [sp, #16]
+	str	r3, [sp, #76]
+	movw	r3, #3288
+	ldrh	r5, [r2, r3]
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L2769
+	cmp	r5, #0
+	bne	.L2738
+	b	.L2739
+.L2769:
+	mov	r5, #0
+.L2738:
+	ldr	r3, .L2785+8
+	ldr	r2, [sp, #16]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bne	.L2740
+.L2739:
+	bl	FtlGcPageVarInit
+.L2740:
+	ldr	r6, .L2785+12
+	mvn	r3, #0
+	str	r3, [sp, #12]
+	mov	r3, #0
+	str	r3, [sp, #4]
+	mov	r8, r6
+.L2741:
+	ldrh	r2, [r4]
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2742
+.L2743:
+.L2765:
+	ldr	r3, .L2785+16
+	add	r0, r4, #14
+	ldr	ip, [r6, #-2968]
+	movw	r9, #65535
+	mov	r10, #36
+	ldrh	r3, [r3]
+	str	r3, [sp, #8]
+	ldr	r3, [r6, #-3036]
+	str	r3, [sp, #20]
+	ldr	r3, [r6, #-2996]
+	str	r3, [sp, #24]
+	ldr	r3, .L2785+20
+	ldrh	r2, [r3]
+	ldrh	lr, [r3, #2]
+	str	r2, [sp, #28]
+	mov	r2, #0
+	mov	r7, r2
+.L2744:
+	ldr	r1, [sp, #8]
+	uxth	r3, r2
+	cmp	r3, r1
+	bcs	.L2783
+	ldrh	r3, [r0, #2]!
+	cmp	r3, r9
+	beq	.L2745
+	ldr	r1, [sp, #20]
+	orr	r3, r5, r3, asl #10
+	mla	r1, r10, r7, r1
+	str	r3, [r1, #4]
+	ldr	r3, [sp, #28]
+	mul	r3, r3, r7
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	ldr	fp, [sp, #24]
+	bic	r3, r3, #3
+	add	r3, fp, r3
+	str	r3, [r1, #8]
+	mul	r3, lr, r7
+	add	r7, r7, #1
+	uxth	r7, r7
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	bic	r3, r3, #3
+	add	r3, ip, r3
+	str	r3, [r1, #12]
+.L2745:
+	add	r2, r2, #1
+	b	.L2744
+.L2783:
+	ldr	r0, [r6, #-3036]
+	mov	r1, r7
+	mov	r2, #0
+	mov	fp, #0
+	bl	FlashReadPages
+.L2747:
+	uxth	r3, fp
+	cmp	r3, r7
+	bcs	.L2784
+	mov	r10, #36
+	ldr	r2, [r6, #-3036]
+	mul	r10, r10, fp
+	ldr	ip, .L2785+12
+	add	r3, r2, r10
+	ldr	r9, [r2, r10]
+	ldr	r1, [r3, #4]
+	cmp	r9, #0
+	ldr	r3, [r3, #12]
+	str	r1, [sp, #8]
+	bne	.L2748
+	ldrh	r1, [r3]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L2749
+.L2751:
+	ldrh	r3, [r4]
+	ldr	r2, [r8, #-2940]
+	b	.L2782
+.L2749:
+	ldr	r0, [r3, #8]
+	ldr	r2, [r6, #-2816]
+	cmp	r0, r2
+	bhi	.L2751
+	ldr	r2, .L2785+24
+	ldrb	r2, [r2]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2753
+	add	r1, sp, #36
+	mov	r2, r9
+	str	r3, [sp, #20]
+	bl	log2phys
+	ldr	r3, [sp, #20]
+	ldr	r1, [sp, #36]
+	ldr	r2, [r3, #12]
+	cmn	r1, #1
+	rsb	r0, r2, r1
+	clz	r0, r0
+	mov	r0, r0, lsr #5
+	moveq	r0, #0
+	cmp	r0, #0
+	beq	.L2753
+	str	r2, [sp, #44]
+	mov	r1, #1
+	ldr	r2, [r6, #-2984]
+	add	r0, sp, #40
+	str	r2, [sp, #48]
+	ldr	r2, [r6, #-2972]
+	str	r2, [sp, #52]
+	mov	r2, r9
+	bl	FlashReadPages
+	ldr	r2, .L2785+28
+	ldr	r1, [r6, #-3036]
+	ldrh	r2, [r2]
+	add	r10, r1, r10
+	mov	r2, r2, asl #7
+	ldr	r1, [sp, #48]
+	ldr	r3, [sp, #20]
+	b	.L2755
+.L2756:
+	add	r9, r9, #1
+.L2755:
+	cmp	r9, r2
+	beq	.L2753
+	ldr	r0, [r10, #8]
+	ldr	ip, [r0, r9, asl #2]
+	ldr	r0, [r1, r9, asl #2]
+	cmp	ip, r0
+	beq	.L2756
+	ldr	r2, [sp, #44]
+	ldr	r0, .L2785+32
+	ldrh	r1, [r4]
+	bl	printk
+	ldrh	r3, [r4]
+	ldr	r2, [r6, #-2940]
+.L2782:
+	mov	r3, r3, asl #1
+	mov	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r4]
+	bl	INSERT_FREE_LIST
+	ldr	r2, .L2785+36
+	mvn	r3, #0
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r2]	@ movhi
+	b	.L2781
+.L2753:
+	ldr	r0, [r3, #12]
+	add	fp, fp, #1
+	ldr	r1, [sp, #8]
+	ldr	r2, [r3, #8]
+	bl	FtlGcUpdatePage
+	b	.L2747
+.L2748:
+	ldr	r0, .L2785+40
+	ldrh	r1, [r4]
+	ldr	r2, [sp, #8]
+	str	ip, [sp, #20]
+	bl	printk
+	ldr	r3, [r8, #-3336]
+	ldrh	r5, [r4]
+	cmp	r3, #0
+	ldr	ip, [sp, #20]
+	bne	.L2759
+	ldr	r3, .L2785+24
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2760
+.L2759:
+	ldr	r2, [ip, #-2948]
+	mov	r3, r5, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #159
+	bls	.L2761
+.L2760:
+	ldr	r3, [ip, #-3036]
+	ldr	r3, [r3, r10]
+	cmn	r3, #1
+	bne	.L2762
+.L2761:
+	ldr	r3, [ip, #-3036]
+	add	r10, r3, r10
+	ldr	r3, [r10, #4]
+	str	r3, [sp, #12]
+.L2762:
+	ldr	r3, [r8, #-2940]
+	mov	r5, r5, asl #1
+	mov	r2, #0
+	strh	r2, [r3, r5]	@ movhi
+	ldrh	r0, [r4]
+	bl	INSERT_FREE_LIST
+	mvn	r3, #0
+	strh	r3, [r4]	@ movhi
+.L2781:
+	bl	FtlGcPageVarInit
+	mov	r5, #0
+	b	.L2741
+.L2784:
+	ldr	r3, [sp, #4]
+	add	r5, r5, #1
+	ldr	r2, [sp, #16]
+	add	r3, r3, #1
+	uxth	r5, r5
+	cmp	r3, r2
+	str	r3, [sp, #4]
+	ldr	r2, .L2785+8
+	bcs	.L2764
+.L2766:
+	ldrh	r3, [r2]
+	cmp	r3, r5
+	bhi	.L2765
+	b	.L2742
+.L2764:
+	ldr	r1, .L2785+44
+	movw	r0, #65535
+	ldrh	r3, [r1]
+	cmp	r3, r0
+	beq	.L2766
+	ldr	r0, [sp, #4]
+	add	r3, r3, r0
+	strh	r3, [r1]	@ movhi
+	ldrh	r3, [r2]
+	cmp	r3, r5
+	bls	.L2766
+	b	.L2767
+.L2742:
+	ldr	r2, .L2785+4
+	movw	r3, #3288
+	mvn	r1, #0
+	strh	r5, [r4, #2]	@ movhi
+	mov	r0, r4
+	strh	r1, [r2, r3]	@ movhi
+	mov	r2, #0
+	mov	r1, r5
+	strb	r2, [r4, #6]
+	bl	ftl_sb_update_avl_pages
+.L2767:
+	ldr	r3, .L2785
+	ldr	r2, [sp, #76]
+	ldr	r0, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2768
+	bl	__stack_chk_fail
+.L2768:
+	add	sp, sp, #84
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2786:
+	.align	2
+.L2785:
+	.word	__stack_chk_guard
+	.word	.LANCHOR1
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2-3190
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3194
+	.word	.LC143
+	.word	.LANCHOR4-368
+	.word	.LC144
+	.word	.LANCHOR1+3288
+	.fnend
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlGcRefreshOpenBlock
+	.type	FtlGcRefreshOpenBlock, %function
+FtlGcRefreshOpenBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldr	r6, .L2795
+	ldrh	r3, [r6]
+	cmp	r3, r0
+	beq	.L2789
+	add	r4, r6, #16
+	ldrh	r3, [r4, #-14]
+	cmp	r3, r0
+	beq	.L2789
+	ldrh	r3, [r4, #-12]
+	cmp	r3, r0
+	beq	.L2789
+	ldrh	r3, [r4, #-10]
+	cmp	r3, r0
+	beq	.L2789
+	ldr	r0, .L2795+4
+	mov	r1, r5
+	bl	printk
+	ldrh	r2, [r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	streqh	r5, [r6]	@ movhi
+	beq	.L2789
+	ldrh	r2, [r4, #-14]
+	cmp	r2, r3
+	streqh	r5, [r4, #-14]	@ movhi
+	beq	.L2789
+	ldrh	r2, [r4, #-12]
+	cmp	r2, r3
+	streqh	r5, [r4, #-12]	@ movhi
+	beq	.L2789
+	ldrh	r2, [r4, #-10]
+	cmp	r2, r3
+	streqh	r5, [r4, #-10]	@ movhi
+.L2789:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2796:
+	.align	2
+.L2795:
+	.word	.LANCHOR2-3072
+	.word	.LC145
+	.fnend
+	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
+	.align	2
+	.global	FtlGcRefreshBlock
+	.type	FtlGcRefreshBlock, %function
+FtlGcRefreshBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldr	r6, .L2808
+	ldrh	r3, [r6]
+	cmp	r3, r0
+	beq	.L2805
+	add	r4, r6, #16
+	ldrh	r3, [r4, #-14]
+	cmp	r3, r0
+	beq	.L2805
+	ldrh	r3, [r4, #-12]
+	cmp	r3, r0
+	beq	.L2805
+	ldrh	r3, [r4, #-10]
+	cmp	r3, r0
+	beq	.L2805
+	ldr	r0, .L2808+4
+	mov	r1, r5
+	bl	printk
+	ldrh	r2, [r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	streqh	r5, [r6]	@ movhi
+	beq	.L2805
+	ldrh	r2, [r4, #-14]
+	cmp	r2, r3
+	streqh	r5, [r4, #-14]	@ movhi
+	beq	.L2805
+	ldrh	r2, [r4, #-12]
+	cmp	r2, r3
+	streqh	r5, [r4, #-12]	@ movhi
+	beq	.L2805
+	ldrh	r2, [r4, #-10]
+	cmp	r2, r3
+	bne	.L2806
+	strh	r5, [r4, #-10]	@ movhi
+.L2805:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2806:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2809:
+	.align	2
+.L2808:
+	.word	.LANCHOR2-3072
+	.word	.LC145
+	.fnend
+	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
+	.align	2
+	.global	FtlGcMarkBadPhyBlk
+	.type	FtlGcMarkBadPhyBlk, %function
+FtlGcMarkBadPhyBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, r0
+	bl	P2V_block_in_plane
+	ldr	r6, .L2820
+	mov	r2, r5
+	sub	r7, r6, #3056
+	ldrh	r1, [r7, #-2]
+	mov	r4, r0
+	ldr	r0, .L2820+4
+	bl	printk
+	mov	r0, r4
+	bl	FtlGcRefreshBlock
+	ldr	r3, [r6, #-3336]
+	cmp	r3, #0
+	beq	.L2811
+	ldr	r2, [r6, #-2948]
+	mov	r4, r4, asl #1
+	ldrh	r3, [r2, r4]
+	cmp	r3, #39
+	subhi	r3, r3, #40
+	strhih	r3, [r2, r4]	@ movhi
+.L2811:
+	ldrh	r3, [r7, #-2]
+	mov	r2, #0
+	ldr	r0, .L2820+8
+.L2812:
+	uxth	r1, r2
+	cmp	r1, r3
+	bcs	.L2819
+	add	r2, r2, #1
+	add	r1, r0, r2, asl #1
+	ldrh	r1, [r1, #-2]
+	cmp	r1, r5
+	bne	.L2812
+	b	.L2813
+.L2819:
+	cmp	r3, #15
+	addls	r2, r3, #1
+	strlsh	r2, [r7, #-2]	@ movhi
+	ldrls	r2, .L2820+12
+	addls	r3, r2, r3, asl #1
+	strlsh	r5, [r3, #236]	@ movhi
+.L2813:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2821:
+	.align	2
+.L2820:
+	.word	.LANCHOR2
+	.word	.LC146
+	.word	.LANCHOR4+236
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
+	.align	2
+	.global	FtlGcReFreshBadBlk
+	.type	FtlGcReFreshBadBlk, %function
+FtlGcReFreshBadBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L2829
+	ldrh	r3, [r4, #-2]
+	cmp	r3, #0
+	beq	.L2823
+	ldrh	r1, [r4, #-16]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L2823
+	add	r4, r4, #16
+	ldrh	r2, [r4, #-14]
+	cmp	r2, r3
+	movcs	r3, #0
+	strcsh	r3, [r4, #-14]	@ movhi
+	ldrh	r2, [r4, #-14]
+	ldr	r3, .L2829+4
+	add	r3, r3, r2, asl #1
+	ldrh	r0, [r3, #236]
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	ldrh	r3, [r4, #-14]
+	add	r3, r3, #1
+	strh	r3, [r4, #-14]	@ movhi
+.L2823:
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L2830:
+	.align	2
+.L2829:
+	.word	.LANCHOR2-3056
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2845
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldrh	r2, [r3, #-2]
+	cmp	r2, #0
+	beq	.L2833
+	sub	r5, r3, #2
+	mov	r7, r0
+	mov	r6, #0
+	mov	r8, r5
+.L2832:
+	ldr	r3, .L2845+4
+	uxth	r2, r6
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	bls	.L2842
+	ldr	r3, .L2845+8
+	mov	r1, r7
+	ldr	fp, .L2845+12
+	mov	r9, #0
+	add	r3, r3, r2
+	ldrb	r0, [r3, #-3240]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r10, r0
+.L2834:
+	ldrh	r3, [r5]
+	uxth	r4, r9
+	cmp	r3, r4
+	bls	.L2843
+	mov	ip, r4, asl #1
+	add	r3, fp, ip
+	ldrh	r3, [r3, #236]
+	cmp	r3, r10
+	bne	.L2835
+	mov	r1, r10
+	ldr	r0, .L2845+16
+	str	ip, [sp, #4]
+	bl	printk
+	mov	r0, r10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, .L2845+20
+	ldrh	r2, [r5]
+	ldr	ip, [sp, #4]
+	add	r3, r3, ip
+.L2836:
+	cmp	r4, r2
+	ldrcch	r1, [r3, #2]
+	addcc	r4, r4, #1
+	uxthcc	r4, r4
+	strcch	r1, [r3], #2	@ movhi
+	bcc	.L2836
+.L2844:
+	sub	r2, r2, #1
+	strh	r2, [r8]	@ movhi
+.L2835:
+	add	r9, r9, #1
+	b	.L2834
+.L2843:
+	add	r6, r6, #1
+	b	.L2832
+.L2842:
+	bl	FtlGcReFreshBadBlk
+.L2833:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2846:
+	.align	2
+.L2845:
+	.word	.LANCHOR2-3056
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LC147
+	.word	.LANCHOR4+236
+	.fnend
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L2857
+	mov	r3, r0, asl #1
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	ldr	r1, [r2, #-2940]
+	ldrh	r3, [r1, r3]
+	cmp	r3, #0
+	bne	.L2848
+	ldr	r1, .L2857+4
+	ldrh	r0, [r1]
+	cmp	r0, r4
+	mvneq	r3, #0
+	streqh	r3, [r1]	@ movhi
+	beq	.L2850
+	sub	r1, r2, #648
+	ldrh	r1, [r1]
+	cmp	r1, r4
+	beq	.L2856
+	sub	r1, r2, #600
+	ldrh	r1, [r1]
+	cmp	r1, r4
+	beq	.L2856
+	sub	r2, r2, #552
+	ldrh	r2, [r2]
+	cmp	r2, r4
+	beq	.L2856
+.L2850:
+	mov	r1, r4
+	ldr	r0, .L2857+8
+	bl	List_remove_node
+	ldr	r2, .L2857+12
+	mov	r0, r4
+	ldrh	r3, [r2]
+	sub	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r4
+	bl	FtlGcFreeBadSuperBlk
+	mov	r0, #1
+	ldmfd	sp!, {r4, pc}
+.L2848:
+	bl	List_update_data_list
+.L2856:
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L2858:
+	.align	2
+.L2857:
+	.word	.LANCHOR2
+	.word	.LANCHOR4-368
+	.word	.LANCHOR2-668
+	.word	.LANCHOR2-660
+	.fnend
+	.size	update_vpc_list, .-update_vpc_list
+	.align	2
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r3, #65535
+	cmp	r0, r3
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	beq	.L2860
+	ldr	r5, .L2870
+	mov	r6, r0, asl #1
+	ldr	r3, [r5, #-2940]
+	ldrh	r2, [r3, r6]
+	cmp	r2, #0
+	subne	r2, r2, #1
+	strneh	r2, [r3, r6]	@ movhi
+	bne	.L2860
+	mov	r1, r4
+	ldr	r0, .L2870+4
+	bl	printk
+	ldr	r3, [r5, #-2940]
+	mov	r2, #32
+	sub	r0, r5, #656
+	mov	r1, r4
+	strh	r2, [r3, r6]	@ movhi
+	bl	test_node_in_list
+	cmp	r0, #0
+	beq	.L2862
+	mov	r1, r4
+	sub	r0, r5, #656
+	bl	List_remove_node
+	sub	r2, r5, #652
+	mov	r0, r4
+	ldrh	r3, [r2]
+	sub	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r3, [r5, #-2940]
+	ldr	r0, .L2870+8
+	mov	r1, r4
+	ldrh	r2, [r3, r6]
+	bl	printk
+.L2862:
+	mov	r0, r4
+	bl	FtlGcRefreshBlock
+	b	.L2865
+.L2860:
+	ldr	r5, .L2870+12
+	movw	r3, #65535
+	ldrh	r0, [r5, #216]
+	cmp	r0, r3
+	streqh	r4, [r5, #216]	@ movhi
+	beq	.L2865
+	cmp	r0, r4
+	beq	.L2865
+	bl	update_vpc_list
+	strh	r4, [r5, #216]	@ movhi
+	adds	r0, r0, #0
+	movne	r0, #1
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2865:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2871:
+	.align	2
+.L2870:
+	.word	.LANCHOR2
+	.word	.LC148
+	.word	.LC149
+	.word	.LANCHOR4
+	.fnend
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3032
+	movw	r2, #65535
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #68
+	sub	sp, sp, #68
+	ldr	r3, [r3]
+	mov	r9, r0
+	str	r3, [sp, #60]
+	ldrh	r3, [r0]
+	cmp	r3, r2
+	beq	.L2874
+	ldrh	r3, [r0, #2]
+	str	r3, [sp, #8]
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	ldr	r1, [sp, #8]
+	str	r3, [sp, #16]
+	ldr	r3, .L3032+4
+	ldrh	r3, [r3]
+	cmp	r3, r1
+	mov	r3, #0
+	streqh	r3, [r0, #4]	@ movhi
+	ldrneh	r0, [r0, #16]
+	beq	.L3024
+.L2876:
+	cmp	r0, r2
+	add	r3, r3, #1
+	uxtheq	r1, r3
+	addeq	r1, r9, r1, asl #1
+	ldreqh	r0, [r1, #16]
+	beq	.L2876
+.L3027:
+	ldrb	r1, [r9, #8]	@ zero_extendqisi2
+	cmp	r1, #1
+	bne	.L2878
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r4, r0
+	beq	.L2879
+	ldr	r3, .L3032+8
+	ldrb	r2, [r3, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	addeq	r3, r3, r0, asl #1
+	ldreqh	r5, [r3, #76]
+	beq	.L2950
+	b	.L3017
+.L2878:
+	mov	r1, #0
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r4, r0
+	beq	.L2879
+.L3017:
+	mov	r5, r4
+.L2950:
+	ldr	r3, .L3032+12
+	movw	r8, #65535
+	sub	r2, r3, #3264
+	sub	r3, r3, #3184
+	ldr	ip, [r3, #148]
+	ldr	lr, [r3, #216]
+	ldrh	r2, [r2, #-4]
+	ldrh	r7, [r3, #-4]
+	add	r3, r9, #14
+	str	r3, [sp, #20]
+	str	r2, [sp]
+	mov	r2, #0
+	mov	r0, r3
+	mov	r6, r2
+	mov	r10, r2
+	b	.L2881
+.L2879:
+	mov	r3, #0
+	strh	r3, [r9, #2]	@ movhi
+.L3024:
+	strb	r3, [r9, #6]
+	b	.L2874
+.L2883:
+	ldrh	r3, [r0, #2]!
+	cmp	r3, r8
+	beq	.L2882
+	mov	r1, #36
+	orr	r3, r5, r3, asl #10
+	mla	r1, r1, r6, ip
+	stmib	r1, {r3, r10}
+	mul	r3, r7, r6
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	fp, r3, #3
+	cmp	r3, #0
+	movlt	r3, fp
+	bic	r3, r3, #3
+	add	r3, lr, r3
+	str	r3, [r1, #12]
+.L2882:
+	add	r2, r2, #1
+.L2881:
+	ldr	r1, [sp]
+	uxth	r3, r2
+	cmp	r3, r1
+	bcc	.L2883
+	ldrb	r3, [r9, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	movne	r3, #0
+	bne	.L3018
+	ldr	r3, .L3032+8
+	ldrb	lr, [r3, #3904]	@ zero_extendqisi2
+	adds	r3, lr, #0
+	movne	r3, #1
+.L3018:
+	ldr	r7, .L3032+12
+	mov	r1, r6
+	str	r3, [sp, #24]
+	mov	fp, #0
+	ldr	r2, [sp, #24]
+	movw	r10, #65535
+	ldr	r0, [r7, #-3036]
+	bl	FlashReadPages
+	ldr	r3, [r7, #-3144]
+	str	r7, [sp]
+	str	r3, [sp, #28]
+.L2885:
+	uxth	r8, fp
+	cmp	r8, r6
+	bcs	.L2892
+	mov	r2, #36
+	ldr	r0, [r7, #-3036]
+	mul	r2, r2, fp
+	add	r1, r0, r2
+	ldr	r2, [r0, r2]
+	cmp	r2, #0
+	bne	.L2886
+	ldr	r2, [r1, #12]
+	ldr	r3, [r2, #4]
+	cmn	r3, #1
+	beq	.L2887
+	mov	r0, r3
+	ldr	r1, [r7, #-3144]
+	str	r2, [sp, #12]
+	str	r3, [sp, #4]
+	bl	ftl_cmp_data_ver
+	ldr	r3, [sp, #4]
+	cmp	r0, #0
+	ldr	r2, [sp, #12]
+	addne	r3, r3, #1
+	strne	r3, [r7, #-3144]
+.L2887:
+	ldr	r2, [r2]
+	cmn	r2, #1
+	bne	.L2888
+.L2892:
+	cmp	r8, r6
+	bne	.L3014
+	add	fp, r4, #1
+	uxth	r3, fp
+	str	r3, [sp, #4]
+	ldr	r3, .L3032+12
+	ldr	r3, [r3, #-3036]
+	ldr	r0, [r3, #4]
+	b	.L3019
+.L2886:
+	ldr	r0, .L3032+16
+	uxth	r10, r5
+	ldr	r1, [r1, #4]
+	bl	printk
+	ldrh	r2, [r9]
+	ldr	r3, .L3032+20
+	strh	r2, [r3]	@ movhi
+.L2888:
+	add	fp, fp, #1
+	b	.L2885
+.L3014:
+	uxth	r3, r4
+	str	r3, [sp, #4]
+	ldr	r3, [sp]
+	mov	r2, #36
+	ldr	r3, [r3, #-3036]
+	mla	r8, r2, r8, r3
+	ldr	r0, [r8, #4]
+.L3019:
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	ldrb	r3, [r9, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	str	r0, [sp, #12]
+	bne	.L2894
+	ldr	r2, .L3032+8
+	ldrb	r1, [r2, #3904]	@ zero_extendqisi2
+	cmp	r1, #0
+	ldreq	r1, [sp, #4]
+	addeq	r2, r2, r1, asl #1
+	ldreqh	r2, [r2, #76]
+	streq	r2, [sp, #4]
+.L2894:
+	ldr	r2, .L3032+4
+	ldr	r1, [sp, #4]
+	ldr	r0, [sp, #12]
+	ldrh	r2, [r2]
+	cmp	r2, r1
+	ldr	r1, [sp, #8]
+	ldreqh	r2, [sp, #4]
+	streqh	r2, [r9, #2]	@ movhi
+	moveq	r2, #0
+	streqb	r2, [r9, #6]
+	streqh	r2, [r9, #4]	@ movhi
+	ldrh	r2, [sp, #16]
+	str	r2, [sp, #32]
+	ldr	ip, [sp, #32]
+	ldr	r2, [sp, #4]
+	cmp	r2, r1
+	cmpeq	r0, ip
+	moveq	r0, r9
+	moveq	r1, r2
+	beq	.L3025
+	clz	r3, r3
+	ldr	r2, [sp, #28]
+	mov	r3, r3, lsr #5
+	sub	r2, r2, #1
+	str	r2, [sp]
+	movw	r2, #65535
+	cmp	r10, r2
+	orrne	r3, r3, #1
+	cmp	r3, #0
+	beq	.L2898
+	ldr	r3, .L3032+24
+	uxth	r5, r5
+	ldr	fp, .L3032+12
+	mvn	r8, #0
+	mov	r7, r8
+	ldr	r2, [r3, #228]
+	cmn	r2, #1
+	ldreq	r2, [sp]
+	streq	r2, [r3, #228]
+	ldr	r10, [r3, #228]
+	ldr	r3, [sp, #8]
+	add	r3, r3, #7
+	cmp	r5, r3
+	subgt	r4, r5, #7
+	ldrle	r4, [sp, #8]
+	uxthgt	r4, r4
+.L2901:
+	cmp	r4, r5
+	bhi	.L2914
+	ldr	r3, .L3032+28
+	mov	r0, #36
+	ldr	lr, [fp, #-3036]
+	ldr	r1, [sp, #20]
+	ldrh	r3, [r3]
+	str	r3, [sp, #16]
+	mov	r3, #0
+	mov	r6, r3
+.L2915:
+	ldr	ip, [sp, #16]
+	uxth	r2, r3
+	cmp	r2, ip
+	bcs	.L3028
+	ldrh	r2, [r1, #2]!
+	movw	ip, #65535
+	add	r3, r3, #1
+	cmp	r2, ip
+	orrne	r2, r4, r2, asl #10
+	mlane	ip, r0, r6, lr
+	addne	r6, r6, #1
+	uxthne	r6, r6
+	strne	r2, [ip, #4]
+	b	.L2915
+.L3028:
+	mov	r1, r6
+	ldr	r2, [sp, #24]
+	ldr	r0, [fp, #-3036]
+	bl	FlashReadPages
+	ldr	r2, .L3032+8
+	ldr	r3, [fp, #-3036]
+	mov	r1, #36
+	add	r2, r2, #588
+	ldrb	ip, [r2, #3316]	@ zero_extendqisi2
+	add	r2, r2, r4, asl #1
+	mla	r6, r1, r6, r3
+	movw	r1, #65535
+.L2904:
+	cmp	r3, r6
+	beq	.L3029
+	ldr	r0, [r3]
+	cmp	r0, #0
+	bne	.L2905
+	ldr	r0, [r3, #12]
+	ldrh	lr, [r0]
+	cmp	lr, r1
+	beq	.L2906
+	ldr	r0, [r0, #4]
+	cmn	r0, #1
+	beq	.L2906
+	ldr	lr, .L3032+24
+	cmn	r8, #1
+	ldr	r7, [lr, #228]
+	str	r0, [lr, #228]
+	bne	.L2906
+	ldrh	r0, [r2]
+	cmp	r0, r1
+	bne	.L2907
+	cmp	ip, #0
+	beq	.L2906
+.L2907:
+	ldr	r0, [sp]
+	cmp	r7, r0
+	mvneq	r8, #0
+	movne	r8, r7
+	b	.L2906
+.L2905:
+	ldrh	r1, [r9]
+	movw	r2, #270
+	ldr	r3, .L3032+24
+	strh	r1, [r3, r2]	@ movhi
+	ldrb	r2, [r9, #8]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L2898
+	ldr	r2, .L3032+32
+	mov	r4, r4, asl #1
+	ldrh	r1, [r2, r4]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L2909
+	cmn	r8, #1
+	strne	r8, [r3, #228]
+	bne	.L2898
+	ldr	r2, [sp]
+	cmp	r10, r2
+	strne	r10, [r3, #228]
+	ldreq	r2, [r3, #228]
+	bne	.L2898
+	b	.L3026
+.L2909:
+	ldr	r2, [sp]
+	cmp	r7, r2
+	beq	.L2912
+	cmn	r7, #1
+	strne	r7, [r3, #228]
+	b	.L2898
+.L2912:
+	ldr	r2, [r3, #228]
+	ldr	r1, [sp]
+	cmp	r2, r1
+	beq	.L2898
+.L3026:
+	sub	r2, r2, #1
+	b	.L3020
+.L2906:
+	add	r3, r3, #36
+	b	.L2904
+.L3029:
+	add	r4, r4, #1
+	uxth	r4, r4
+	b	.L2901
+.L2914:
+	ldr	r3, .L3032+24
+	mvn	r2, #0
+.L3020:
+	str	r2, [r3, #228]
+.L2898:
+	ldr	fp, .L3032+36
+	mov	r3, #1
+	ldr	r10, [sp, #8]
+	strh	r3, [fp]	@ movhi
+	sub	fp, fp, #272
+.L2916:
+	ldr	r3, .L3032+28
+	movw	lr, #65535
+	ldr	r5, [sp, #20]
+	mov	r1, #36
+	mov	r4, #0
+	str	r4, [sp, #16]
+	ldrh	r6, [r3]
+	ldr	r3, .L3032+12
+	ldr	r7, [r3, #-3036]
+	ldr	r3, .L3032+8
+	ldrb	r8, [r3, #3904]	@ zero_extendqisi2
+.L2917:
+	uxth	r3, r4
+	cmp	r3, r6
+	bcs	.L3030
+	ldrh	r3, [r5, #2]!
+	cmp	r3, lr
+	beq	.L2918
+	ldr	r2, [sp, #16]
+	orr	r3, r10, r3, asl #10
+	mla	r2, r1, r2, r7
+	str	r3, [r2, #4]
+	ldrb	r0, [r9, #8]	@ zero_extendqisi2
+	cmp	r0, #1
+	bne	.L2919
+	cmp	r8, #0
+	orrne	r3, r3, #-2147483648
+	strne	r3, [r2, #4]
+.L2919:
+	ldr	r3, [sp, #16]
+	add	ip, r3, #1
+	uxth	r3, ip
+	str	r3, [sp, #16]
+.L2918:
+	add	r4, r4, #1
+	b	.L2917
+.L3030:
+	ldr	r4, .L3032+12
+	ldr	r1, [sp, #16]
+	ldr	r2, [sp, #24]
+	ldr	r0, [r4, #-3036]
+	bl	FlashReadPages
+	mov	r3, #0
+.L3023:
+	str	r3, [sp, #28]
+	ldr	r2, [sp, #16]
+	ldrh	r3, [sp, #28]
+	cmp	r3, r2
+	bcs	.L3031
+	ldr	r3, [sp, #28]
+	mov	r5, #36
+	ldr	r8, [r4, #-3036]
+	mul	r5, r5, r3
+	add	r7, r8, r5
+	ldr	r6, [r7, #4]
+	ubfx	r0, r6, #10, #16
+	str	r6, [sp, #56]
+	bl	P2V_plane
+	ldr	r3, [sp, #8]
+	cmp	r10, r3
+	bcc	.L2922
+	ldr	r3, [sp, #32]
+	ldr	r2, [sp, #8]
+	cmp	r0, r3
+	movcs	r3, #0
+	movcc	r3, #1
+	cmp	r10, r2
+	movne	r3, #0
+	cmp	r3, #0
+	bne	.L2922
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #4]
+	cmp	r0, r3
+	cmpeq	r10, r2
+	beq	.L2923
+	ldr	r3, [r8, r5]
+	cmn	r3, #1
+	beq	.L2924
+	ldr	r7, [r7, #12]
+	movw	r3, #61589
+	ldrh	r2, [r7]
+	cmp	r2, r3
+	ldrneh	r0, [r9]
+	bne	.L3021
+	ldr	r3, [r7, #4]
+	cmn	r3, #1
+	str	r3, [sp]
+	beq	.L2926
+	mov	r0, r3
+	ldr	r1, [r4, #-3144]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	ldrne	r3, [sp]
+	addne	r3, r3, #1
+	strne	r3, [r4, #-3144]
+.L2926:
+	ldr	r6, [r7, #8]
+	add	r1, sp, #52
+	ldr	r3, [r7, #12]
+	mov	r2, #0
+	mov	r0, r6
+	str	r3, [sp, #48]
+	bl	log2phys
+	ldr	r1, [fp, #228]
+	cmn	r1, #1
+	beq	.L2927
+	ldr	r0, [sp]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L2927
+	ldr	r3, [sp, #48]
+	cmn	r3, #1
+	beq	.L2928
+	ldr	r0, [r4, #-3036]
+	mov	r2, #0
+	mov	r1, #1
+	add	r0, r0, r5
+	str	r3, [r0, #4]
+	ldr	r8, [r0, #12]
+	bl	FlashReadPages
+	ldr	r2, [r4, #-3036]
+	ldr	r3, [r8, #4]
+	add	ip, r2, r5
+	str	r3, [sp, #36]
+	ldr	r3, [r2, r5]
+	cmn	r3, #1
+	bne	.L2929
+	b	.L2930
+.L2928:
+	ldr	r3, [sp, #56]
+	ldr	r2, [sp, #52]
+	cmp	r2, r3
+	bne	.L2922
+	mov	r0, r6
+	add	r1, sp, #48
+	mov	r2, #1
+	bl	log2phys
+	b	.L2922
+.L2929:
+	ldr	r7, [r8, #8]
+	cmp	r7, r6
+	bne	.L2930
+	ldr	r0, [fp, #228]
+	ldr	r1, [sp, #36]
+	str	r2, [sp, #44]
+	str	ip, [sp, #40]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	ldr	ip, [sp, #40]
+	ldr	r2, [sp, #44]
+	beq	.L2930
+	ldr	r3, [sp, #52]
+	ldr	r1, [sp, #56]
+	cmp	r3, r1
+	beq	.L2935
+	ldr	r1, [sp, #48]
+	cmp	r3, r1
+	beq	.L2930
+	cmn	r3, #1
+	streq	r3, [r2, r5]
+	beq	.L2934
+	str	r3, [ip, #4]
+	mov	r0, ip
+	mov	r1, #1
+	mov	r2, #0
+	ldr	r8, [ip, #12]
+	bl	FlashReadPages
+.L2934:
+	ldr	r3, [r4, #-3036]
+	ldr	r3, [r3, r5]
+	cmn	r3, #1
+	beq	.L2935
+	ldr	r5, [r8, #4]
+	ldr	r0, [fp, #228]
+	mov	r1, r5
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L2935
+	ldr	r0, [sp, #36]
+	mov	r1, r5
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L2930
+.L2935:
+	mov	r0, r7
+	ldr	r1, [sp, #48]
+	bl	FtlReUsePrevPpa
+.L2930:
+	mvn	r3, #0
+	str	r3, [sp, #48]
+	b	.L2937
+.L2927:
+	ldr	r3, [sp, #56]
+	ldr	r2, [sp, #52]
+	cmp	r2, r3
+	beq	.L2937
+	ldr	r3, [sp, #48]
+	cmn	r3, #1
+	beq	.L2939
+	ldr	r2, [r4, #-3252]
+	ubfx	r3, r3, #10, #21
+	cmp	r3, r2
+	bcs	.L2922
+.L2939:
+	mov	r0, r6
+	add	r1, sp, #56
+	mov	r2, #1
+	bl	log2phys
+	ldr	r8, [sp, #52]
+	cmn	r8, #1
+	beq	.L2937
+	ldr	r3, [sp, #48]
+	cmp	r8, r3
+	beq	.L2937
+	ubfx	r0, r8, #10, #16
+	ldr	r5, .L3032+40
+	bl	P2V_block_in_plane
+	ldrh	r3, [r5]
+	add	r5, r5, #648
+	cmp	r3, r0
+	beq	.L2941
+	sub	r3, r5, #600
+	ldrh	r3, [r3]
+	cmp	r3, r0
+	beq	.L2941
+	sub	r3, r5, #552
+	ldrh	r3, [r3]
+	cmp	r3, r0
+	bne	.L2937
+.L2941:
+	ldr	r0, [r5, #-3036]
+	mov	r1, #1
+	mov	r2, #0
+	str	r8, [r0, #4]
+	ldr	r7, [r0, #12]
+	bl	FlashReadPages
+	ldr	r3, [r5, #-3036]
+	ldr	r1, [r7, #4]
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L2937
+	ldr	r0, [sp]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	bne	.L2937
+	mov	r0, r6
+	add	r1, sp, #52
+	mov	r2, #1
+	bl	log2phys
+.L2937:
+	ldr	r0, [sp, #48]
+	cmn	r0, #1
+	beq	.L2922
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r4, #-2940]
+	mov	r3, r0, asl #1
+	mov	r1, r0
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L2942
+.L3021:
+	bl	decrement_vpc_count
+	b	.L2922
+.L2942:
+	ldr	r0, .L3032+44
+	bl	printk
+	b	.L2922
+.L2924:
+	ldrh	r2, [r9]
+	mov	r1, r6
+	ldr	r3, .L3032+20
+	ldr	r0, .L3032+48
+	strh	r2, [r3]	@ movhi
+	ldr	r2, [sp]
+	bl	printk
+	ldr	r3, [fp, #276]
+	cmp	r3, #31
+	addls	r2, fp, r3, asl #2
+	addls	r3, r3, #1
+	strls	r3, [fp, #276]
+	ldrls	r1, [sp, #56]
+	strls	r1, [r2, #280]
+	ldrh	r0, [r9]
+	bl	decrement_vpc_count
+	ldr	r3, .L3032+24
+	ldr	r3, [r3, #228]
+	cmn	r3, #1
+	ldreq	r3, [sp]
+	beq	.L3022
+	ldr	r2, [sp]
+	cmp	r3, r2
+	bls	.L2922
+	mov	r3, r2
+.L3022:
+	str	r3, [fp, #228]
+.L2922:
+	ldr	r3, [sp, #28]
+	add	r3, r3, #1
+	b	.L3023
+.L3031:
+	ldrb	r3, [r9, #8]	@ zero_extendqisi2
+	add	r10, r10, #1
+	cmp	r3, #1
+	uxth	r10, r10
+	bne	.L2946
+	ldr	r3, .L3032+8
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2946
+	ldr	r3, .L3032+52
+	ldr	r2, [sp, #4]
+	ldrh	r3, [r3]
+	cmp	r2, r10
+	cmpeq	r3, r10
+	beq	.L2923
+.L2946:
+	ldr	r2, .L3032+4
+	ldrh	r3, [r2]
+	cmp	r10, r3
+	bne	.L2916
+	ldrh	r1, [r2, #-68]
+	movw	r0, #65535
+	mov	r3, #0
+	strh	r10, [r9, #2]	@ movhi
+	strh	r3, [r9, #4]	@ movhi
+.L2947:
+	uxth	r2, r3
+	cmp	r2, r1
+	bcs	.L2874
+	ldr	lr, [sp, #20]
+	add	r3, r3, #1
+	ldrh	ip, [lr, #2]!
+	cmp	ip, r0
+	str	lr, [sp, #20]
+	beq	.L2947
+	strb	r2, [r9, #6]
+	b	.L2874
+.L2923:
+	ldrb	r3, [sp, #12]	@ zero_extendqisi2
+	mov	r0, r9
+	ldr	r1, [sp, #4]
+	strb	r3, [r9, #6]
+	ldrh	r3, [sp, #4]
+	strh	r3, [r9, #2]	@ movhi
+.L3025:
+	ldr	r2, [sp, #12]
+	bl	ftl_sb_update_avl_pages
+.L2874:
+	ldr	r3, .L3032
+	mov	r0, #0
+	ldr	r2, [sp, #60]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2951
+	bl	__stack_chk_fail
+.L2951:
+	add	sp, sp, #68
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3033:
+	.align	2
+.L3032:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC150
+	.word	.LANCHOR4+270
+	.word	.LANCHOR4
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR0+588
+	.word	.LANCHOR4+272
+	.word	.LANCHOR2-648
+	.word	.LC151
+	.word	.LC152
+	.word	.LANCHOR2-3198
+	.fnend
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	FtlSlcSuperblockCheck
+	.type	FtlSlcSuperblockCheck, %function
+FtlSlcSuperblockCheck:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	ldrh	r3, [r0, #4]
+	cmp	r3, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldrh	r2, [r0]
+	movw	r3, #65535
+	cmp	r2, r3
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	mov	r4, r0
+	ldr	r5, .L3048
+	ldr	r7, .L3048+4
+	add	r3, r0, r3, asl #1
+	add	r6, r5, #588
+	ldrh	r3, [r3, #16]
+.L3038:
+	movw	r1, #65535
+	cmp	r3, r1
+	bne	.L3047
+.L3040:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	ldrh	r2, [r7]
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r4, r3, asl #1
+	ldrh	r3, [r3, #16]
+	b	.L3038
+.L3047:
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	cmp	r2, #1
+	bne	.L3041
+	ldrb	r3, [r5, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3041
+	ldrh	r3, [r4, #2]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r6, r3]
+	cmp	r3, r1
+	bne	.L3041
+	ldrh	r3, [r4, #4]
+	ldrh	r0, [r4]
+	sub	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	ldrh	r2, [r4, #4]
+	cmp	r2, #0
+	bne	.L3040
+	ldrh	r3, [r4, #2]
+	add	r3, r3, #1
+	b	.L3046
+.L3041:
+	ldr	r3, .L3048
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	cmp	r2, #1
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldr	r3, .L3048+8
+	ldrh	r1, [r4, #2]
+	sub	r2, r3, #3184
+	ldrh	r2, [r2, #-14]
+	cmp	r1, r2
+	ldmccfd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldrh	r2, [r4]
+	sub	r3, r3, #3200
+	ldr	r0, [r3, #260]
+	ldrh	ip, [r4, #4]
+	mov	r2, r2, asl #1
+	ldrh	r1, [r0, r2]
+	rsb	r1, ip, r1
+	strh	r1, [r0, r2]	@ movhi
+	ldrh	r3, [r3]
+	mov	r2, #0
+	strh	r2, [r4, #4]	@ movhi
+.L3046:
+	strh	r3, [r4, #2]	@ movhi
+	strb	r2, [r4, #6]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3049:
+	.align	2
+.L3048:
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
+	.align	2
+	.global	get_new_active_ppa
+	.type	get_new_active_ppa, %function
+get_new_active_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r3, #0
+	strb	r3, [r0, #10]
+	mov	r4, r0
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	ldr	r7, .L3068
+	ldr	r8, .L3068+4
+	add	r3, r0, r3, asl #1
+	add	r9, r7, #588
+	ldrh	r2, [r3, #16]
+.L3051:
+	movw	r1, #65535
+	cmp	r2, r1
+	ldr	r6, .L3068+4
+	bne	.L3067
+.L3052:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	ldrh	r2, [r8]
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r4, r3, asl #1
+	ldrh	r2, [r3, #16]
+	b	.L3051
+.L3067:
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	ldrh	r5, [r4, #2]
+	cmp	r3, #1
+	ldrh	r3, [r4, #4]
+	bne	.L3054
+	ldrb	r0, [r7, #3904]	@ zero_extendqisi2
+	cmp	r0, #0
+	bne	.L3054
+	mov	r0, r5, asl #1
+	ldrh	r0, [r9, r0]
+	cmp	r0, r1
+	bne	.L3054
+	sub	r3, r3, #1
+	ldrh	r0, [r4]
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L3052
+.L3054:
+	ldr	r7, .L3068
+	orr	r5, r5, r2, asl #10
+	sub	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+.L3055:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	movw	r2, #65535
+	ldrh	r0, [r6]
+.L3057:
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, r0
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	add	r1, r4, r3, asl #1
+	ldrh	r1, [r1, #16]
+	cmp	r1, r2
+	beq	.L3057
+	strb	r3, [r4, #6]
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L3062
+	ldrb	r3, [r7, #3904]	@ zero_extendqisi2
+	ldr	r2, .L3068
+	cmp	r3, #0
+	bne	.L3059
+	ldrh	r3, [r4, #2]
+	add	r1, r2, #588
+	mov	r3, r3, asl #1
+	ldrh	r1, [r1, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	bne	.L3059
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	beq	.L3059
+	sub	r3, r3, #1
+	ldrh	r0, [r4]
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L3055
+.L3059:
+	ldrb	r3, [r2, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3062
+	ldr	r3, .L3068+8
+	ldrh	r1, [r4, #2]
+	sub	r2, r3, #3184
+	ldrh	r2, [r2, #-14]
+	cmp	r1, r2
+	bcc	.L3062
+	ldrh	r2, [r4]
+	sub	r3, r3, #3200
+	ldr	r0, [r3, #260]
+	ldrh	ip, [r4, #4]
+	mov	r2, r2, asl #1
+	ldrh	r1, [r0, r2]
+	rsb	r1, ip, r1
+	strh	r1, [r0, r2]	@ movhi
+	ldrh	r3, [r3]
+	mov	r2, #0
+	strh	r2, [r4, #4]	@ movhi
+	strb	r2, [r4, #6]
+	strh	r3, [r4, #2]	@ movhi
+.L3062:
+	mov	r0, r5
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L3069:
+	.align	2
+.L3068:
+	.word	.LANCHOR0
+	.word	.LANCHOR2-3268
+	.word	.LANCHOR2
+	.fnend
+	.size	get_new_active_ppa, .-get_new_active_ppa
+	.align	2
+	.global	FtlWriteDumpData
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #60
+	sub	sp, sp, #60
+	ldr	r8, .L3090
+	ldr	r4, .L3090+4
+	ldr	r3, [r8]
+	str	r8, [sp, #4]
+	str	r3, [sp, #52]
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	bne	.L3070
+	sub	r7, r4, #648
+	ldrh	r5, [r7, #4]
+	cmp	r5, #0
+	beq	.L3072
+	ldrb	r3, [r4, #-640]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3072
+	sub	r3, r4, #3200
+	ldrb	r2, [r4, #-641]	@ zero_extendqisi2
+	ldrh	r3, [r3]
+	mul	r3, r3, r2
+	cmp	r5, r3
+	beq	.L3072
+	ldrb	r9, [r4, #-638]	@ zero_extendqisi2
+	sub	r3, r4, #3264
+	ldr	r6, [r4, #-2816]
+	cmp	r9, #0
+	ldrh	r10, [r3, #-4]
+	bne	.L3070
+	sub	r6, r6, #1
+	add	r1, sp, #12
+	mov	r2, r9
+	mov	r0, r6
+	bl	log2phys
+	ldr	r5, [r4, #-2976]
+	ldr	r0, [r4, #-3008]
+	ldr	r3, [sp, #12]
+	str	r6, [sp, #32]
+	cmn	r3, #1
+	str	r0, [sp, #24]
+	str	r3, [sp, #20]
+	str	r5, [sp, #28]
+	str	r9, [r5, #4]
+	beq	.L3074
+	mov	r1, #1
+	mov	r2, r9
+	add	r0, sp, #16
+	bl	FlashReadPages
+	b	.L3075
+.L3074:
+	sub	r3, r4, #3184
+	mov	r1, #255
+	ldrh	r2, [r3, #-6]
+	bl	ftl_memset
+.L3075:
+	ldr	r3, .L3090+8
+	mov	r9, #0
+	ldr	r8, .L3090+4
+	mov	r10, r10, asl #2
+	mov	fp, r9
+	strh	r3, [r5]	@ movhi
+.L3076:
+	cmp	r9, r10
+	beq	.L3077
+	ldrh	r3, [r7, #4]
+	ldr	r0, .L3090+12
+	cmp	r3, #0
+	beq	.L3077
+	ldr	r3, [sp, #20]
+	add	r9, r9, #1
+	str	r6, [r5, #8]
+	str	r3, [r5, #12]
+	ldrh	r3, [r0]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r8, #-3144]
+	mov	r2, #0
+	mov	r1, #1
+	str	r0, [sp, #20]
+	add	r0, sp, #16
+	str	r3, [r5, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, fp
+	str	r3, [r8, #-3144]
+	mov	r3, r2
+	bl	FlashProgPages
+	ldrh	r0, [r7]
+	bl	decrement_vpc_count
+	b	.L3076
+.L3077:
+	mov	r3, #1
+	b	.L3089
+.L3072:
+	mov	r3, #0
+.L3089:
+	strb	r3, [r4, #-638]
+.L3070:
+	ldr	r3, [sp, #4]
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3081
+	bl	__stack_chk_fail
+.L3081:
+	add	sp, sp, #60
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3091:
+	.align	2
+.L3090:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	-3947
+	.word	.LANCHOR2-648
+	.fnend
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.align	2
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	bl	FtlWriteDumpData
+	mov	r4, #0
+	ldr	r6, .L3098
+	mov	r7, #12
+	ldr	r5, .L3098+4
+.L3093:
+	ldrh	r3, [r5]
+	uxth	r0, r4
+	cmp	r3, r0
+	bls	.L3097
+	ldr	r3, [r6, #-2896]
+	mla	r3, r7, r0, r3
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L3094
+	bl	flush_l2p_region
+.L3094:
+	add	r4, r4, #1
+	b	.L3093
+.L3097:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3099:
+	.align	2
+.L3098:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3162
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r8, .L3118
+	ldr	r5, .L3118+4
+	ldr	r3, [r8]
+	str	r3, [sp, #36]
+	ldr	r3, [r5, #-2812]
+	cmp	r3, #0
+	bne	.L3100
+	ldr	r2, .L3118+8
+	mov	r4, r0
+	ldrb	r6, [r2, #3904]	@ zero_extendqisi2
+	cmp	r6, #0
+	beq	.L3117
+	ldrb	r6, [r0, #8]	@ zero_extendqisi2
+	cmp	r6, #1
+	ldreqh	fp, [r0, #4]
+	beq	.L3102
+	mov	r6, r3
+.L3117:
+	mov	fp, #12
+.L3102:
+	ldr	r7, [r5, #-2976]
+	mvn	r3, #0
+	str	r3, [sp, #16]
+	mov	r9, #0
+	ldr	r3, [r5, #-3008]
+	movw	r2, #61589
+	str	r7, [sp, #12]
+	ldr	r10, .L3118+4
+	str	r3, [sp, #8]
+	mvn	r3, #2
+	str	r3, [r7, #8]
+	mvn	r3, #1
+	str	r3, [r7, #12]
+	ldrh	r3, [r4]
+	strh	r9, [r7]	@ movhi
+	strh	r3, [r7, #2]	@ movhi
+	ldr	r3, [r5, #-3008]
+	str	r2, [r3]
+	ldr	r2, .L3118+12
+	ldr	r3, [r5, #-3008]
+	str	r2, [r3, #4]
+.L3103:
+	subs	fp, fp, #1
+	bcc	.L3106
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L3104
+.L3106:
+	ldrh	r3, [r4]
+	ldr	r1, [r5, #-2940]
+	ldrh	r0, [r4, #4]
+	mov	r3, r3, asl #1
+	ldrh	r2, [r1, r3]
+	rsb	r2, r0, r2
+	strh	r2, [r1, r3]	@ movhi
+	ldr	r3, .L3118+16
+	ldrh	r3, [r3]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	b	.L3100
+.L3104:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	cmn	r0, #1
+	str	r0, [sp, #4]
+	beq	.L3106
+	ldr	r3, [r5, #-3144]
+	mov	r1, #1
+	mov	r2, r6
+	mov	r0, sp
+	str	r3, [r7, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, r9
+	str	r3, [r10, #-3144]
+	mov	r3, #0
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	b	.L3103
+.L3100:
+	ldr	r2, [sp, #36]
+	ldr	r3, [r8]
+	cmp	r2, r3
+	beq	.L3110
+	bl	__stack_chk_fail
+.L3110:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3119:
+	.align	2
+.L3118:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	305419896
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	mov	r5, #0
+	ldr	r7, .L3137
+	ldr	r4, .L3137+4
+	ldr	r1, .L3137+8
+	ldr	r3, [r7]
+	ldr	r0, .L3137+12
+	mov	r6, r4
+	str	r3, [sp, #4]
+	bl	printk
+	sub	r3, r4, #3248
+	ldr	r0, [r4, #-2944]
+	mov	r1, #0
+	ldrh	r2, [r3, #-10]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+.L3121:
+	ldr	r3, [r4, #-2816]
+	cmp	r5, r3
+	bcs	.L3135
+	mov	r0, r5
+	mov	r1, sp
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp]
+	cmn	r0, #1
+	beq	.L3122
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r6, #-2944]
+	mov	r0, r0, asl #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+.L3122:
+	add	r5, r5, #1
+	b	.L3121
+.L3135:
+	ldr	r6, .L3137+4
+	mov	r8, #0
+	ldr	r9, .L3137+16
+.L3124:
+	ldrh	r3, [r9]
+	uxth	r4, r8
+	cmp	r3, r4
+	bls	.L3136
+	ldr	r3, [r6, #-2940]
+	mov	r5, r4, asl #1
+	movw	r1, #65535
+	ldrh	r2, [r3, r5]
+	ldr	r3, [r6, #-2944]
+	ldrh	r3, [r3, r5]
+	cmp	r2, r3
+	cmpne	r2, r1
+	beq	.L3126
+	ldr	r0, .L3137+20
+	mov	r1, r4
+	bl	printk
+	ldr	r3, .L3137+24
+	ldrh	r2, [r3]
+	cmp	r2, r4
+	beq	.L3126
+	ldrh	r2, [r3, #96]
+	cmp	r2, r4
+	beq	.L3126
+	ldrh	r3, [r3, #48]
+	cmp	r3, r4
+	beq	.L3126
+	ldr	r3, [r6, #-2940]
+	ldrh	r2, [r3, r5]
+	cmp	r2, #0
+	ldr	r2, [r6, #-2944]
+	ldrh	r2, [r2, r5]
+	strh	r2, [r3, r5]	@ movhi
+	beq	.L3126
+	mov	r0, r4
+	bl	update_vpc_list
+.L3126:
+	add	r8, r8, #1
+	b	.L3124
+.L3136:
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	r2, [sp, #4]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L3130
+	bl	__stack_chk_fail
+.L3130:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L3138:
+	.align	2
+.L3137:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR3+84
+	.word	.LC48
+	.word	.LANCHOR2-3260
+	.word	.LC153
+	.word	.LANCHOR2-648
+	.fnend
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	2
+	.global	allocate_new_data_superblock
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	ldr	r5, .L3166
+	ldrh	r7, [r0]
+	ldr	r3, [r5, #-2812]
+	cmp	r3, #0
+	bne	.L3140
+	movw	r3, #65535
+	cmp	r7, r3
+	mov	r4, r0
+	beq	.L3141
+	ldr	r2, [r5, #-2940]
+	mov	r3, r7, asl #1
+	mov	r0, r7
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L3142
+	bl	INSERT_DATA_LIST
+	b	.L3141
+.L3142:
+	bl	INSERT_FREE_LIST
+.L3141:
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	ldr	r3, .L3166
+	sub	r2, r3, #600
+	cmp	r4, r2
+	beq	.L3143
+	sub	r2, r3, #3248
+	ldrh	r2, [r2]
+	cmp	r2, #1
+	beq	.L3143
+	ldr	r1, .L3166+4
+	ldrb	r1, [r1, #3904]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L3144
+.L3143:
+	mov	r3, #1
+	strb	r3, [r4, #8]
+	b	.L3145
+.L3144:
+	sub	r1, r3, #648
+	cmp	r4, r1
+	bne	.L3145
+	cmp	r2, #3
+	beq	.L3147
+	ldr	r3, [r3, #-3152]
+	cmp	r3, #1
+	bne	.L3148
+.L3147:
+	mov	r3, #1
+	strb	r3, [r5, #-640]
+.L3148:
+	ldr	r2, [r5, #-3336]
+	ldr	r3, .L3166
+	cmp	r2, #0
+	beq	.L3145
+	ldr	r2, [r3, #-3100]
+	cmp	r2, #39
+	movls	r2, #1
+	strlsb	r2, [r3, #-640]
+.L3145:
+	ldr	r3, .L3166+8
+	movw	r2, #65535
+	ldrh	r0, [r3, #216]
+	mov	r6, r3
+	cmp	r0, r2
+	beq	.L3150
+	cmp	r7, r0
+	bne	.L3151
+	ldr	r2, [r5, #-2940]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L3152
+.L3151:
+	bl	update_vpc_list
+.L3152:
+	mvn	r3, #0
+	strh	r3, [r6, #216]	@ movhi
+.L3150:
+	mov	r0, r4
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	mov	r0, #0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3140:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3167:
+	.align	2
+.L3166:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.fnend
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r8, .L3186
+	ldr	r6, .L3186+4
+	ldr	r5, .L3186+8
+	ldr	fp, [r8, #-240]
+	mov	r7, r8
+	ldr	r3, [r6]
+	cmp	fp, #0
+	str	r3, [sp, #44]
+	beq	.L3169
+	ldr	r2, [r8, #-236]
+	ldr	r3, [r5, #-2816]
+	cmp	r2, r3
+	bcs	.L3170
+	mov	r4, #2048
+.L3175:
+	ldr	r0, [r7, #-236]
+	ldr	r3, [r5, #-2816]
+	cmp	r0, r3
+	bcs	.L3174
+	mov	r2, #0
+	add	r1, sp, #4
+	bl	log2phys
+	ldr	r3, [r8, #-236]
+	add	r3, r3, #1
+	str	r3, [r8, #-236]
+	ldr	r2, [sp, #4]
+	cmn	r2, #1
+	beq	.L3173
+	add	r0, sp, #48
+	str	r2, [sp, #12]
+	mov	r1, #1
+	mov	r2, #0
+	str	r2, [r0, #-40]!
+	str	r3, [sp, #24]
+	str	r2, [sp, #16]
+	str	r2, [sp, #20]
+	bl	FlashReadPages
+	ldr	r3, [sp, #8]
+	cmp	r3, #256
+	bne	.L3174
+	ldr	r0, [sp, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L3174:
+	mvn	r0, #0
+	b	.L3177
+.L3173:
+	subs	r4, r4, #1
+	bne	.L3175
+	b	.L3174
+.L3170:
+	ldr	r3, [r5, #-3120]
+	mov	r0, #0
+	str	r0, [r8, #-240]
+	str	r0, [r8, #-236]
+	str	r3, [r8, #-244]
+	b	.L3177
+.L3169:
+	ldr	r1, [r5, #-3104]
+	movw	r4, #10000
+	ldr	r10, [r5, #-3120]
+	sub	r5, r5, #716
+	cmp	r1, r4
+	ldr	r9, [r8, #-244]
+	add	r2, r10, #1048576
+	ldr	r3, [r5, #-2100]
+	movhi	r4, #31
+	movls	r4, #63
+	cmp	r9, r2
+	bhi	.L3179
+	mov	r1, r1, lsr #10
+	mov	r0, #1000
+	mul	r0, r0, r3
+	add	r1, r1, #1
+	bl	__aeabi_uidiv
+	add	r0, r0, r9
+	cmp	r0, r10
+	bcc	.L3179
+	ldrh	r3, [r5, #28]
+	ands	r0, r4, r3
+	movne	r0, fp
+	bne	.L3177
+	ldr	r2, [r8, #-220]
+	cmp	r2, r3
+	beq	.L3177
+.L3179:
+	ldrh	r3, [r5, #28]
+	mov	r0, #0
+	str	r10, [r7, #-244]
+	str	r0, [r7, #-236]
+	str	r3, [r7, #-220]
+	mov	r3, #1
+	str	r3, [r7, #-240]
+.L3177:
+	ldr	r2, [sp, #44]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L3180
+	bl	__stack_chk_fail
+.L3180:
+	add	sp, sp, #52
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3187:
+	.align	2
+.L3186:
+	.word	.LANCHOR4
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	2
+	.global	ftl_do_gc
+	.type	ftl_do_gc, %function
+ftl_do_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r4, .L3353
+	ldr	r3, .L3353+4
+	str	r0, [sp, #20]
+	ldr	r0, [r4, #-2812]
+	ldr	r3, [r3]
+	cmp	r0, #0
+	str	r3, [sp, #44]
+	movne	r0, #0
+	bne	.L3189
+	ldr	r3, .L3353+8
+	ldr	r2, [r3, #3284]
+	cmn	r2, #1
+	beq	.L3189
+	ldr	r5, [r4, #-3096]
+	cmp	r5, #0
+	bne	.L3189
+	sub	r2, r4, #660
+	ldrh	r2, [r2]
+	cmp	r2, #47
+	movls	r0, r5
+	bls	.L3189
+	movw	r2, #3288
+	mov	r10, r1
+	ldrh	r2, [r3, r2]
+	movw	r3, #65535
+	mov	r7, r4
+	cmp	r2, r3
+	bne	.L3190
+.L3193:
+	ldr	r5, .L3353+12
+	movw	r1, #65535
+	ldrh	r4, [r5, #-14]
+	cmp	r4, r1
+	bne	.L3191
+	b	.L3192
+.L3190:
+	sub	r4, r4, #552
+	ldrh	r2, [r4]
+	cmp	r2, r3
+	beq	.L3193
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L3193
+	mov	r0, #1
+	b	.L3189
+.L3191:
+	mov	r3, r5
+	ldrh	r2, [r3, #-16]!
+	cmp	r2, r1
+	bne	.L3192
+	ldrh	r0, [r5, #-12]
+	cmp	r0, r2
+	beq	.L3192
+	ldrh	r1, [r5, #-10]
+	cmp	r1, r2
+	strneh	r4, [r3]	@ movhi
+	strneh	r0, [r5, #-14]	@ movhi
+	mvnne	r3, #0
+	strneh	r1, [r5, #-12]	@ movhi
+	strneh	r3, [r5, #-10]	@ movhi
+.L3192:
+	ldr	r2, [sp, #20]
+	ldr	r3, [r7, #-3080]
+	cmp	r2, #1
+	ldr	r6, .L3353+16
+	add	r3, r3, #1
+	add	r3, r3, r2, asl #7
+	str	r3, [r7, #-3080]
+	bne	.L3204
+	ldr	r2, .L3353
+	ldr	r2, [r2, #-3336]
+	cmp	r2, #0
+	bne	.L3195
+	ldr	r2, .L3353+20
+	ldrb	r2, [r2, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3204
+.L3195:
+	ldr	r2, [r7, #-3100]
+	ldr	r4, .L3353
+	cmp	r2, #39
+	bhi	.L3204
+	ldr	r8, .L3353+24
+	ldrh	r2, [r8]
+	add	r3, r3, r2
+	str	r3, [r4, #-3080]
+	bl	FtlGcReFreshBadBlk
+	ldrh	r1, [r6]
+	movw	r3, #65535
+	cmp	r1, r3
+	bne	.L3204
+	sub	r3, r4, #3072
+	ldrh	r3, [r3]
+	cmp	r3, r1
+	bne	.L3204
+	ldr	r3, [r4, #-3080]
+	cmp	r3, #1024
+	sub	r3, r4, #652
+	bhi	.L3196
+	ldrh	r2, [r3]
+	cmp	r2, #63
+	bhi	.L3204
+.L3196:
+	ldrh	ip, [r3]
+	mov	r1, #0
+	ldrh	r3, [r5, #-6]
+	ldr	r0, .L3353+24
+	add	r3, r3, #64
+	strh	r1, [r8]	@ movhi
+	cmp	ip, r3
+	ldr	r2, .L3353
+	bgt	.L3204
+	ldr	r3, [r2, #-3100]
+	str	r1, [r2, #-3080]
+	cmp	r3, r1
+	moveq	r3, #6
+	beq	.L3344
+	cmp	r3, #5
+	bhi	.L3198
+	mov	r3, #18
+.L3344:
+	strh	r3, [r0]	@ movhi
+.L3198:
+	mov	r0, #32
+	bl	List_get_gc_head_node
+	movw	ip, #65535
+	uxth	r2, r0
+	cmp	r2, ip
+	beq	.L3203
+	ldrh	r0, [r5, #-4]
+	ldr	r8, .L3353
+	cmp	r0, #0
+	sub	r9, r8, #3056
+	beq	.L3200
+	sub	r1, r8, #3184
+	ldr	r3, [r8, #-2940]
+	mov	r2, r2, asl #1
+	ldrh	r4, [r1, #-14]
+	sub	r1, r8, #3264
+	ldrh	lr, [r3, r2]
+	ldrh	r1, [r1, #-4]
+	mul	r1, r1, r4
+	add	r1, r1, #1
+	cmp	lr, r1
+	bgt	.L3203
+	add	r1, r0, #1
+	str	r2, [sp, #28]
+	str	ip, [sp, #24]
+	mov	fp, #0
+	uxth	r1, r1
+	str	r3, [sp, #16]
+	strh	r1, [r9, #-4]	@ movhi
+	str	r1, [sp, #12]
+	str	fp, [r8, #-3092]
+	bl	List_get_gc_head_node
+	ldr	ip, [sp, #24]
+	uxth	r4, r0
+	ldr	r1, [sp, #12]
+	cmp	r4, ip
+	ldr	r3, [sp, #16]
+	ldr	r2, [sp, #28]
+	beq	.L3203
+	mov	ip, r4, asl #1
+	ldr	r0, .L3353+28
+	str	ip, [sp, #12]
+	ldrh	lr, [r3, ip]
+	ldrh	r3, [r3, r2]
+	mov	r2, r4
+	str	r3, [sp]
+	mov	r3, lr
+	bl	printk
+	ldrh	r3, [r9, #-4]
+	cmp	r3, #40
+	ldr	ip, [sp, #12]
+	bls	.L3201
+	ldr	r3, [r8, #-2940]
+	ldrh	r3, [r3, ip]
+	cmp	r3, #32
+	strhih	fp, [r9, #-4]	@ movhi
+.L3201:
+	ldr	r3, .L3353+24
+	mov	r2, #6
+	strh	r2, [r3]	@ movhi
+	b	.L3205
+.L3200:
+	mov	r3, #1
+	strh	r3, [r9, #-4]	@ movhi
+.L3203:
+	bl	GetSwlReplaceBlock
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r4, r0
+	bne	.L3205
+	ldr	r3, .L3353+24
+	mov	r2, #0
+	strh	r2, [r3]	@ movhi
+.L3204:
+	ldrh	r3, [r6]
+	movw	r4, #65535
+	cmp	r3, r4
+	bne	.L3205
+	ldr	r8, .L3353
+	sub	r2, r8, #552
+	ldrh	r4, [r2]
+	cmp	r4, r3
+	movne	r4, r3
+	beq	.L3349
+.L3205:
+	movw	r0, #65535
+	rsb	r3, r0, r4
+	clz	r3, r3
+	ldr	r2, [sp, #20]
+	mov	r3, r3, lsr #5
+	cmp	r2, #0
+	movne	ip, #0
+	andeq	ip, r3, #1
+	cmp	ip, #0
+	beq	.L3218
+	ldr	r3, .L3353+32
+	ldrh	r2, [r3]
+	cmp	r2, #24
+	movhi	fp, #1
+	bhi	.L3219
+	ldr	r3, .L3353+36
+	cmp	r2, #16
+	ldrhih	r3, [r3]
+	movhi	fp, r3, lsr #5
+	bhi	.L3219
+	cmp	r2, #12
+	ldrhih	r3, [r3]
+	movhi	fp, r3, lsr #4
+	bhi	.L3219
+	cmp	r2, #8
+	ldrhih	r3, [r3]
+	ldrlsh	fp, [r3]
+	movhi	fp, r3, lsr #2
+.L3219:
+	ldrh	r3, [r5, #-8]
+	ldr	r1, .L3353
+	cmp	r3, r2
+	bcs	.L3223
+	sub	r3, r1, #552
+	movw	r2, #65535
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	bne	.L3224
+	sub	r2, r1, #3072
+	ldrh	r2, [r2]
+	cmp	r2, r3
+	bne	.L3224
+	ldr	r3, .L3353+24
+	ldrh	r0, [r3]
+	cmp	r0, #0
+	bne	.L3225
+	ldr	r3, [r1, #-2816]
+	ldr	r2, [r1, #-408]
+	add	r3, r3, r3, asl #1
+	cmp	r2, r3, lsr #2
+	movcs	r3, #18
+	bcs	.L3226
+.L3225:
+	ldr	r3, .L3353+40
+	ldrh	r3, [r3]
+	add	r3, r3, r3, asl #1
+	ubfx	r3, r3, #2, #16
+.L3226:
+	strh	r3, [r5, #-8]	@ movhi
+	mov	r3, #0
+	str	r3, [r7, #-3092]
+	b	.L3189
+.L3224:
+	ldr	r3, .L3353+40
+	ldrh	r3, [r3]
+	add	r3, r3, r3, asl #1
+	mov	r3, r3, asr #2
+	strh	r3, [r5, #-8]	@ movhi
+.L3223:
+	cmp	r10, #2
+	ldr	r3, [r7, #-3336]
+	movw	r4, #65535
+	movhi	r10, #0
+	movls	r10, #1
+	cmp	r3, #0
+	moveq	r10, #0
+	cmp	r10, #0
+	addne	r3, fp, #1
+	uxthne	fp, r3
+	b	.L3228
+.L3218:
+	ldr	r1, .L3353
+	sub	r2, r1, #552
+	ldrh	r2, [r2]
+	cmp	r2, r0
+	bne	.L3229
+	sub	r0, r1, #3072
+	ldrh	r0, [r0]
+	cmp	r0, r2
+	movne	r3, #0
+	andeq	r3, r3, #1
+	cmp	r3, #0
+	beq	.L3229
+	ldrh	r3, [r6]
+	cmp	r3, r2
+	beq	.L3230
+.L3234:
+	movw	r4, #65535
+	b	.L3229
+.L3230:
+	sub	r4, r1, #652
+	ldrh	r3, [r5, #-8]
+	str	ip, [r1, #-3092]
+	ldrh	r2, [r4]
+	ldr	r9, .L3353+24
+	cmp	r2, r3
+	bls	.L3231
+	ldrh	r3, [r9]
+	cmp	r3, #0
+	bne	.L3232
+	ldr	r3, [r1, #-2816]
+	ldr	r2, [r1, #-408]
+	add	r3, r3, r3, asl #1
+	cmp	r2, r3, lsr #2
+	movcs	r3, #18
+	bcs	.L3233
+.L3232:
+	ldr	r3, .L3353+40
+	ldrh	r3, [r3]
+	add	r3, r3, r3, asl #1
+	ubfx	r3, r3, #2, #16
+.L3233:
+	strh	r3, [r5, #-8]	@ movhi
+	bl	FtlReadRefresh
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r3, [r7, #-2940]
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r3, [r3, r0]
+	cmp	r3, #4
+	ldrhih	r0, [r9]
+	bhi	.L3189
+.L3231:
+	ldrh	r0, [r9]
+	ldr	r8, .L3353+24
+	cmp	r0, #0
+	bne	.L3234
+	sub	r3, r8, #780
+	ldrh	r9, [r3]
+	add	r3, r9, r9, asl #1
+	mov	r3, r3, asr #2
+	strh	r3, [r5, #-8]	@ movhi
+	bl	List_get_gc_head_node
+	ldr	r3, [r7, #-2940]
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r2, [r3, r0]
+	ldr	r3, .L3353+44
+	ldrh	r1, [r3, #-14]
+	ldrh	r5, [r3, #-84]
+	mul	r5, r5, r1
+	add	r5, r5, r5, lsr #31
+	cmp	r2, r5, asr #1
+	ble	.L3235
+	ldrh	r1, [r4]
+	sub	r3, r9, #1
+	cmp	r1, r3
+	blt	.L3235
+	bl	FtlReadRefresh
+	ldrh	r0, [r8]
+	b	.L3189
+.L3235:
+	cmp	r2, #0
+	bne	.L3234
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r0, [r4]
+	add	r0, r0, #1
+	b	.L3189
+.L3229:
+	ldr	r3, [r7, #-3336]
+	cmp	r3, #0
+	moveq	fp, #1
+	movne	fp, #2
+.L3228:
+	ldrh	r3, [r6]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L3237
+	cmp	r4, r3
+	ldrne	r3, .L3353+16
+	strneh	r4, [r3]	@ movhi
+	bne	.L3239
+	ldr	r1, .L3353
+	sub	r3, r1, #3072
+	ldrh	r2, [r3]
+	cmp	r2, r4
+	beq	.L3239
+	ldr	r1, [r1, #-2940]
+	mov	r2, r2, asl #1
+	ldrh	r2, [r1, r2]
+	cmp	r2, #0
+	mvneq	r2, #0
+	streqh	r2, [r3]	@ movhi
+	ldrh	r2, [r3]
+	strh	r2, [r6]	@ movhi
+	mvn	r2, #0
+	strh	r2, [r3]	@ movhi
+.L3239:
+	ldr	r3, .L3353+48
+	mov	r2, #0
+	ldrh	r0, [r6]
+	sub	r8, r3, #368
+	strb	r2, [r3, #-360]
+	movw	r2, #65535
+	cmp	r0, r2
+	mov	r5, r3
+	beq	.L3237
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	mvnne	r3, #0
+	strneh	r3, [r8]	@ movhi
+	ldr	r3, .L3353+20
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3243
+	ldrh	r0, [r6]
+	bl	ftl_get_blk_mode
+	strb	r0, [r5, #-360]
+.L3243:
+	ldrh	r2, [r6]
+	movw	r3, #65535
+	ldr	r5, .L3353+48
+	cmp	r2, r3
+	sub	r8, r5, #368
+	beq	.L3237
+	mov	r0, r8
+	bl	make_superblock
+	movw	r2, #410
+	mov	r3, #0
+	strh	r3, [r5, r2]	@ movhi
+	strh	r3, [r8, #2]	@ movhi
+	strb	r3, [r5, #-362]
+	ldrh	r3, [r8]
+	ldr	r2, [r7, #-2940]
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	add	r3, r5, #412
+	strh	r2, [r3]	@ movhi
+.L3237:
+	ldr	r2, .L3353+52
+	ldrh	r3, [r6]
+	ldrh	r1, [r2]
+	cmp	r1, r3
+	beq	.L3244
+	ldrh	r1, [r2, #48]
+	cmp	r1, r3
+	beq	.L3244
+	ldrh	r2, [r2, #96]
+	cmp	r2, r3
+	bne	.L3245
+.L3244:
+	mvn	r3, #0
+	strh	r3, [r6]	@ movhi
+.L3245:
+	ldr	r5, .L3353+48
+.L3278:
+	ldr	r8, .L3353+16
+	movw	r3, #65535
+	ldr	r9, .L3353
+	ldrh	r2, [r8]
+	mov	r10, r8
+	cmp	r2, r3
+	bne	.L3246
+	mov	r3, #0
+	str	r3, [r9, #-3092]
+.L3247:
+	ldr	r6, .L3353+56
+	ldrh	r7, [r6]
+	mov	r0, r7
+	bl	List_get_gc_head_node
+	movw	r2, #65535
+	uxth	r3, r0
+	strh	r3, [r10]	@ movhi
+	cmp	r3, r2
+	moveq	r3, #0
+	moveq	r0, #8
+	streqh	r3, [r6]	@ movhi
+	beq	.L3189
+.L3248:
+	mov	r0, r3
+	str	r3, [sp, #12]
+	bl	IsBlkInGcList
+	add	r7, r7, #1
+	cmp	r0, #0
+	ldr	r3, [sp, #12]
+	strneh	r7, [r6]	@ movhi
+	bne	.L3247
+	ldr	r2, .L3353
+	mov	r1, r3, asl #1
+	ldrh	lr, [r6, #-208]
+	uxth	r7, r7
+	strh	r7, [r6]	@ movhi
+	ldr	r0, [r2, #-2940]
+	ldrh	r2, [r6, #-140]
+	ldrh	ip, [r0, r1]
+	mul	r2, lr, r2
+	add	lr, r2, r2, lsr #31
+	cmp	ip, lr, asr #1
+	bgt	.L3251
+	cmp	ip, #8
+	cmphi	r7, #48
+	bls	.L3252
+	ldrh	ip, [r5, #232]
+	cmp	ip, #35
+	bhi	.L3252
+.L3251:
+	mov	ip, #0
+	strh	ip, [r6]	@ movhi
+.L3252:
+	ldrh	r1, [r0, r1]
+	movw	r0, #65535
+	cmp	r1, r2
+	cmpge	r4, r0
+	bne	.L3253
+	ldrh	r2, [r6]
+	cmp	r2, #3
+	bhi	.L3253
+	mvn	r3, #0
+	strh	r3, [r10]	@ movhi
+	ldr	r3, .L3353+56
+	mov	r2, #0
+	strh	r2, [r3]	@ movhi
+	ldr	r3, .L3353+24
+	b	.L3347
+.L3253:
+	cmp	r1, #0
+	bne	.L3254
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r3, [r6]
+	add	r3, r3, #1
+	strh	r3, [r6]	@ movhi
+	b	.L3247
+.L3254:
+	ldr	r1, .L3353+48
+	mov	r2, #0
+	strb	r2, [r1, #-360]
+	ldr	r2, .L3353+20
+	ldrb	r2, [r2, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3255
+	mov	r0, r3
+	bl	ftl_get_blk_mode
+	strb	r0, [r5, #-360]
+.L3255:
+	ldr	r0, .L3353+16
+	bl	make_superblock
+	ldrh	r2, [r8]
+	ldr	r1, .L3353+60
+	mov	r3, #0
+	ldr	r0, [r9, #-2940]
+	mov	r2, r2, asl #1
+	strh	r3, [r1]	@ movhi
+	ldrh	r2, [r0, r2]
+	strh	r3, [r8, #2]	@ movhi
+	strh	r2, [r1, #2]	@ movhi
+	ldr	r2, .L3353+48
+	strb	r3, [r2, #-362]
+.L3246:
+	ldr	r3, [sp, #20]
+	cmp	r3, #1
+	bne	.L3256
+	bl	FtlReadRefresh
+.L3256:
+	mov	r3, #1
+	str	r3, [r9, #-3096]
+	ldr	r3, .L3353+36
+	ldrh	r2, [r3]
+	str	r2, [sp, #12]
+	ldr	r2, .L3353+20
+	ldrb	r2, [r2, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3257
+	ldrb	r2, [r5, #-360]	@ zero_extendqisi2
+	cmp	r2, #1
+	ldreqh	r3, [r3, #2]
+	streq	r3, [sp, #12]
+.L3257:
+	ldrh	r3, [r8, #2]
+	ldr	r1, [sp, #12]
+	add	r2, r3, fp
+	ldr	r6, .L3353
+	cmp	r2, r1
+	movgt	r2, r1
+	rsbgt	r3, r3, r2
+	uxthgt	fp, r3
+	mov	r3, #0
+	str	r3, [sp, #16]
+	b	.L3259
+.L3352:
+	ldr	r0, [r6, #-3020]
+	mov	r1, r7
+	ldrb	r2, [r5, #-360]	@ zero_extendqisi2
+	mov	r9, #0
+	bl	FlashReadPages
+.L3262:
+	uxth	r3, r9
+	cmp	r3, r7
+	bcs	.L3350
+	mov	r3, #36
+	ldr	r2, [r6, #-3020]
+	mul	r8, r3, r9
+	add	r1, r2, r8
+	ldr	r2, [r2, r8]
+	ldr	r10, [r1, #12]
+	cmn	r2, #1
+	beq	.L3299
+	ldrh	r1, [r10]
+	movw	r2, #61589
+	cmp	r1, r2
+	bne	.L3299
+	add	r1, sp, r3
+	mov	r2, #0
+	ldr	r0, [r10, #8]
+	str	r3, [sp, #24]
+	bl	log2phys
+	ldr	r2, [r6, #-3020]
+	add	r2, r2, r8
+	ldr	r0, [r2, #4]
+	ldr	r1, [sp, #36]
+	ldr	r3, [sp, #24]
+	bic	r1, r1, #-2147483648
+	cmp	r1, r0
+	bne	.L3299
+	ldr	r1, .L3353+60
+	ldr	r0, .L3353+60
+	ldr	r2, [r2, #16]
+	ldrh	r1, [r1]
+	str	r3, [sp, #28]
+	add	r1, r1, #1
+	strh	r1, [r0]	@ movhi
+	ldr	r0, [r5, #208]
+	ldr	r1, [r6, #-3032]
+	mla	r1, r3, r0, r1
+	str	r2, [r1, #16]
+	str	r1, [sp, #24]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r2, [r6, #-3032]
+	ldr	r1, [sp, #24]
+	ldr	r3, [sp, #28]
+	str	r0, [r1, #4]
+	ldr	r1, [r5, #208]
+	mla	r3, r3, r1, r2
+	ldr	r2, [r6, #-3020]
+	add	r2, r2, r8
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #8]
+	mov	r1, #1
+	ldr	r2, [r2, #12]
+	str	r2, [r3, #12]
+	ldr	r3, [sp, #36]
+	str	r3, [r10, #12]
+	ldr	r3, .L3353+64
+	ldrh	r2, [r3]
+	str	r3, [sp, #24]
+	strh	r2, [r10, #2]	@ movhi
+	ldr	r2, [r6, #-3144]
+	ldr	r0, [r6, #-3020]
+	str	r2, [r10, #4]
+	add	r0, r0, r8
+	ldr	r2, [r5, #208]
+	add	r2, r2, #1
+	str	r2, [r5, #208]
+	bl	FtlGcBufAlloc
+	ldr	r2, .L3353+20
+	ldrb	r2, [r2, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3351
+.L3264:
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	beq	.L3299
+	ldr	r3, .L3353
+	mov	r2, #0
+	mvn	r1, #0
+	str	r2, [r3, #-3096]
+	ldr	r3, .L3353+16
+	strh	r1, [r3]	@ movhi
+	strh	r2, [r3, #2]	@ movhi
+	add	r3, r3, #776
+.L3347:
+	ldrh	r0, [r3]
+	b	.L3189
+.L3350:
+	ldr	r3, [sp, #16]
+	add	r3, r3, #1
+	str	r3, [sp, #16]
+.L3259:
+	ldrh	r3, [sp, #16]
+	ldr	r8, .L3353
+	cmp	r3, fp
+	ldr	r7, .L3353+16
+	bcs	.L3266
+	ldr	r3, .L3353+68
+	mov	r2, #0
+	ldrh	r0, [r7, #2]
+	movw	lr, #65535
+	ldr	r8, [r6, #-3020]
+	mov	ip, #36
+	ldrh	r9, [r3]
+	ldr	r3, [sp, #16]
+	add	r0, r0, r3
+	add	r3, r7, #14
+	mov	r7, r2
+.L3267:
+	uxth	r1, r2
+	cmp	r1, r9
+	bcs	.L3352
+	ldrh	r1, [r3, #2]!
+	add	r2, r2, #1
+	cmp	r1, lr
+	orrne	r1, r0, r1, asl #10
+	mlane	r10, ip, r7, r8
+	addne	r7, r7, #1
+	uxthne	r7, r7
+	strne	r1, [r10, #4]
+	b	.L3267
+.L3351:
+	ldrb	r2, [r6, #-545]	@ zero_extendqisi2
+	ldr	r1, [r5, #208]
+	cmp	r1, r2
+	beq	.L3264
+	ldr	r3, [sp, #24]
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	beq	.L3264
+.L3299:
+	add	r9, r9, #1
+	b	.L3262
+.L3266:
+	ldrh	r3, [r7, #2]
+	ldr	r2, [sp, #12]
+	add	r3, fp, r3
+	uxth	r3, r3
+	strh	r3, [r7, #2]	@ movhi
+	cmp	r3, r2
+	bcc	.L3268
+	ldr	r3, [r5, #208]
+	cmp	r3, #0
+	beq	.L3269
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	addne	r7, r7, #776
+	movne	r3, #0
+	strne	r3, [r8, #-3096]
+	ldrneh	r0, [r7]
+	bne	.L3189
+.L3269:
+	ldr	r3, .L3353+60
+	ldrh	r6, [r3]
+	cmp	r6, #0
+	bne	.L3270
+	ldrh	r3, [r7]
+	ldr	r2, [r8, #-2940]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L3270
+.L3271:
+	ldr	r3, [r8, #-2816]
+	cmp	r6, r3
+	bcs	.L3276
+	mov	r0, r6
+	add	r1, sp, #40
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp, #40]
+	cmn	r0, #1
+	beq	.L3272
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r7]
+	cmp	r3, r0
+	bne	.L3272
+.L3276:
+	ldr	r3, [r8, #-2816]
+	cmp	r6, r3
+	bcc	.L3270
+	ldr	r2, .L3353
+	mov	r1, #0
+	ldrh	r3, [r7]
+	ldr	r2, [r2, #-2940]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r7]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L3270
+.L3272:
+	add	r6, r6, #1
+	b	.L3271
+.L3270:
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+.L3268:
+	ldr	r7, .L3353
+	sub	r3, r7, #652
+	ldrh	r3, [r3]
+	cmp	r3, #2
+	subls	r7, r7, #3200
+	ldrlsh	fp, [r7]
+	bls	.L3278
+.L3277:
+	mov	r2, #0
+	str	r2, [r7, #-3096]
+	ldr	r2, .L3353+24
+	ldrh	r0, [r2]
+	cmp	r0, #0
+	addeq	r0, r3, #1
+.L3189:
+	ldr	r3, .L3353+4
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3282
+	bl	__stack_chk_fail
+.L3349:
+	sub	r3, r8, #3072
+	ldrh	fp, [r3]
+	cmp	fp, r4
+	bne	.L3205
+	sub	r9, r8, #652
+	ldr	r2, [r8, #-3080]
+	ldrh	r3, [r9]
+	cmp	r3, #24
+	movcc	r3, #5120
+	movcs	r3, #1024
+	cmp	r2, r3
+	movls	r4, fp
+	bls	.L3205
+	ldr	r2, .L3353+24
+	mov	r3, #0
+	str	r3, [r7, #-3080]
+	strh	r3, [r2]	@ movhi
+	bl	GetSwlReplaceBlock
+	cmp	r0, fp
+	mov	r4, r0
+	bne	.L3207
+	ldrh	r2, [r5, #-6]
+	sub	r3, r8, #3056
+	ldrh	r1, [r9]
+	cmp	r1, r2
+	movcs	r2, #80
+	strcsh	r2, [r3, #-6]	@ movhi
+	bcs	.L3217
+	mov	r0, #64
+	bl	List_get_gc_head_node
+	uxth	r3, r0
+	cmp	r3, r4
+	beq	.L3217
+	ldr	r2, [r8, #-3156]
+	sub	r1, r8, #3248
+	cmp	r2, #0
+	bne	.L3210
+	ldrh	r2, [r1]
+	cmp	r2, #3
+	beq	.L3210
+	ldr	r2, [r8, #-3152]
+	cmp	r2, #0
+	bne	.L3210
+	ldr	r2, [r8, #-3336]
+	cmp	r2, #0
+	bne	.L3210
+	ldr	r2, .L3353+20
+	ldrb	r0, [r2, #3904]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L3211
+.L3210:
+	ldr	r2, [r7, #-2940]
+	mov	r3, r3, asl #1
+	ldrh	r1, [r1]
+	ldrh	r0, [r2, r3]
+	cmp	r1, #3
+	ldr	r2, .L3353+44
+	ldrh	r3, [r2, #-14]
+	ldrh	r2, [r2, #-84]
+	mul	r2, r2, r3
+	moveq	r3, r3, lsr #1
+	movne	r3, #0
+	add	r3, r2, r3
+	cmp	r0, r3
+	bgt	.L3213
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r3, [r7, #-2816]
+	ldr	r2, [r7, #-408]
+	add	r3, r3, r3, asl #1
+	cmp	r2, r3, lsr #2
+	movls	r3, #160
+	uxth	r4, r0
+	bls	.L3345
+	b	.L3348
+.L3211:
+	ldr	r2, [r8, #-2940]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #7
+	bhi	.L3216
+	bl	List_get_gc_head_node
+	uxth	r4, r0
+.L3348:
+	mov	r3, #128
+.L3345:
+	strh	r3, [r5, #-6]	@ movhi
+	movw	r3, #65535
+	cmp	r4, r3
+	beq	.L3217
+	b	.L3207
+.L3213:
+	mov	r3, #128
+	b	.L3346
+.L3216:
+	mov	r3, #64
+.L3346:
+	strh	r3, [r5, #-6]	@ movhi
+	b	.L3217
+.L3207:
+	ldr	r0, [r7, #-2948]
+	mov	r1, r4, asl #1
+	ldr	r3, [r7, #-2940]
+	ldrh	r2, [r9]
+	ldrh	r3, [r3, r1]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L3353+72
+	str	r1, [sp]
+	ldrh	r1, [r5, #-8]
+	str	r1, [sp, #4]
+	mov	r1, r4
+	bl	printk
+.L3217:
+	bl	FtlGcReFreshBadBlk
+	b	.L3205
+.L3282:
+	add	sp, sp, #52
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3354:
+	.align	2
+.L3353:
+	.word	.LANCHOR2
+	.word	__stack_chk_guard
+	.word	.LANCHOR1
+	.word	.LANCHOR2-3056
+	.word	.LANCHOR4-368
+	.word	.LANCHOR0
+	.word	.LANCHOR4+408
+	.word	.LC154
+	.word	.LANCHOR2-652
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR4-372
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR4
+	.word	.LANCHOR2-648
+	.word	.LANCHOR2-3060
+	.word	.LANCHOR4+410
+	.word	.LANCHOR2-552
+	.word	.LANCHOR2-3268
+	.word	.LC155
+	.fnend
+	.size	ftl_do_gc, .-ftl_do_gc
+	.align	2
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3400
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r2, [r3]
+	ldr	r4, .L3400+4
+	ldr	r8, .L3400+8
+	str	r2, [sp, #12]
+	ldr	r2, [r4, #-2812]
+	ldr	r5, [r8, #416]
+	cmp	r2, #0
+	str	r3, [sp, #4]
+	bne	.L3357
+	ldr	r1, [r4, #-3048]
+	cmp	r1, #0
+	beq	.L3357
+	ldr	r3, .L3400+12
+	mov	r7, #0
+	ldr	r0, [r4, #-3016]
+	mov	r10, #36
+	ldr	r9, .L3400+4
+	ldrb	r6, [r3, #3904]	@ zero_extendqisi2
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	cmp	r6, #0
+	ldrneb	r6, [r5, #8]	@ zero_extendqisi2
+	subne	r6, r6, #1
+	clzne	r6, r6
+	movne	r6, r6, lsr #5
+	mov	r2, r6
+	bl	FlashProgPages
+.L3360:
+	ldr	r3, [r4, #-3048]
+	cmp	r7, r3
+	bcs	.L3378
+	mul	fp, r10, r7
+	ldr	r3, [r9, #-3016]
+	add	r2, r3, fp
+	ldr	r3, [r3, fp]
+	cmn	r3, #1
+	beq	.L3382
+	ldr	r3, [r2, #4]
+	cmp	r6, #0
+	ldr	r0, [r2, #16]
+	add	r1, sp, #8
+	mov	r2, #1
+	orrne	r3, r3, #-2147483648
+	str	r3, [sp, #8]
+	bl	log2phys
+	ldr	r3, [r4, #-3016]
+	add	fp, r3, fp
+	ldr	r3, [fp, #12]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L3364
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r9, #-2940]
+	mov	r3, r0, asl #1
+	mov	fp, r0
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L3365
+	ldr	r0, .L3400+16
+	mov	r1, fp
+	bl	printk
+.L3365:
+	mov	r0, fp
+	bl	decrement_vpc_count
+.L3364:
+	add	r7, r7, #1
+	b	.L3360
+.L3398:
+	ldr	r6, .L3400+20
+	movw	r5, #16386
+.L3377:
+	ldrh	r3, [r6]
+	cmp	r3, #0
+	beq	.L3378
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r5, r5, #1
+	bne	.L3377
+.L3378:
+	mov	r3, #0
+	str	r3, [r4, #-3048]
+	b	.L3357
+.L3382:
+	ldr	r9, .L3400+4
+	mov	r10, #0
+.L3361:
+	ldr	r3, [r4, #-3048]
+	cmp	r10, r3
+	bcs	.L3398
+	mov	r7, #36
+	ldr	r3, [r9, #-3016]
+	mul	r7, r7, r10
+	mov	fp, #0
+	mvn	r2, #0
+	str	r2, [r3, r7]
+.L3367:
+	ldr	r3, [r4, #-3016]
+	add	r2, r3, r7
+	ldr	r3, [r3, r7]
+	cmn	r3, #1
+	bne	.L3399
+	ldr	r0, [r2, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r5]
+	cmp	r3, r0
+	bne	.L3368
+	ldr	r1, [r9, #-2940]
+	mov	r3, r3, asl #1
+	ldrh	r0, [r5, #4]
+	ldrh	r2, [r1, r3]
+	rsb	r2, r0, r2
+	strh	r2, [r1, r3]	@ movhi
+	ldr	r3, .L3400+24
+	strb	fp, [r5, #6]
+	strh	fp, [r5, #4]	@ movhi
+	ldrh	r3, [r3]
+	strh	r3, [r5, #2]	@ movhi
+.L3368:
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	bne	.L3369
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+.L3369:
+	ldr	r3, [r8, #-224]
+	add	r3, r3, #1
+	str	r3, [r8, #-224]
+	ldr	r3, [r4, #-3016]
+	add	r3, r3, r7
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlGcMarkBadPhyBlk
+	mov	r0, r5
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #-3016]
+	mov	r1, #1
+	mov	r2, r6
+	add	r3, r3, r7
+	str	r0, [sp, #8]
+	str	r0, [r3, #4]
+	mov	r0, r3
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	bl	FlashProgPages
+	ldr	r3, [r4, #-3016]
+	ldr	r3, [r3, r7]
+	cmn	r3, #1
+	moveq	r3, #1
+	streq	r3, [r9, #-2812]
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	beq	.L3367
+	b	.L3357
+.L3399:
+	ldr	r3, [r2, #4]
+	cmp	r6, #0
+	ldr	r0, [r2, #16]
+	add	r1, sp, #8
+	mov	r2, #1
+	orrne	r3, r3, #-2147483648
+	str	r3, [sp, #8]
+	bl	log2phys
+	ldr	r3, [r4, #-3016]
+	add	r7, r3, r7
+	ldr	r3, [r7, #12]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L3374
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r9, #-2940]
+	mov	r3, r0, asl #1
+	mov	r7, r0
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L3375
+	ldr	r0, .L3400+16
+	mov	r1, r7
+	bl	printk
+.L3375:
+	mov	r0, r7
+	bl	decrement_vpc_count
+.L3374:
+	add	r10, r10, #1
+	b	.L3361
+.L3357:
+	ldr	r3, [sp, #4]
+	mov	r0, #0
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3380
+	bl	__stack_chk_fail
+.L3380:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3401:
+	.align	2
+.L3400:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LANCHOR0
+	.word	.LC156
+	.word	.LANCHOR2-3058
+	.word	.LANCHOR2-3200
+	.fnend
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L3408
+	ldr	r3, [r3, #-2812]
+	cmp	r3, #0
+	bne	.L3403
+	ldr	r3, .L3408+4
+	ldr	r3, [r3, #3284]
+	cmn	r3, #1
+	beq	.L3403
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	mov	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3403:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L3409:
+	.align	2
+.L3408:
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	FtlDeInit
+	.type	FtlDeInit, %function
+FtlDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L3413
+	ldr	r3, [r3, #3284]
+	cmp	r3, #1
+	bne	.L3411
+	bl	FtlSysFlush
+.L3411:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L3414:
+	.align	2
+.L3413:
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlDeInit, .-FtlDeInit
+	.align	2
+	.global	ftl_deinit
+	.type	ftl_deinit, %function
+ftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	ftl_flash_de_init
+	bl	FtlDeInit
+	ldmfd	sp!, {r3, lr}
+	b	ftl_flash_de_init
+	.fnend
+	.size	ftl_deinit, .-ftl_deinit
+	.align	2
+	.global	ftl_cache_flush
+	.type	ftl_cache_flush, %function
+ftl_cache_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	ftl_cache_flush, .-ftl_cache_flush
+	.align	2
+	.global	ftl_discard
+	.type	ftl_discard, %function
+ftl_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r5, .L3437
+	add	r2, r0, r1
+	mov	r7, r0
+	mov	r6, r1
+	ldr	r3, [r5]
+	str	r3, [sp, #12]
+	ldr	r3, .L3437+4
+	ldr	r3, [r3, #3908]
+	cmp	r2, r3
+	mvnhi	r0, #0
+	bhi	.L3419
+	ldr	r3, .L3437+8
+	ldr	r0, [r3, #3284]
+	cmn	r0, #1
+	beq	.L3419
+	cmp	r1, #31
+	bhi	.L3420
+.L3421:
+	mov	r0, #0
+	b	.L3419
+.L3420:
+	ldr	r4, .L3437+12
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	bne	.L3421
+	sub	r4, r4, #3184
+	bl	FtlCacheWriteBack
+	mov	r0, r7
+	ldrh	r4, [r4, #-10]
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	smulbb	r3, r0, r4
+	mov	r8, r0
+	rsb	r7, r3, r7
+	uxth	r7, r7
+	cmp	r7, #0
+	beq	.L3422
+	rsb	r4, r7, r4
+	add	r8, r0, #1
+	cmp	r4, r6
+	movcs	r4, r6
+	uxth	r4, r4
+	rsb	r6, r4, r6
+.L3422:
+	ldr	r4, .L3437+16
+	mvn	r3, #0
+	ldr	r9, .L3437+12
+	str	r3, [sp, #8]
+	mov	r7, r4
+.L3423:
+	ldrh	r3, [r4]
+	cmp	r6, r3
+	bcc	.L3436
+	mov	r0, r8
+	add	r1, sp, #4
+	mov	r2, #0
+	bl	log2phys
+	ldr	r3, [sp, #4]
+	cmn	r3, #1
+	beq	.L3424
+	ldr	r2, .L3437+20
+	add	r1, sp, #8
+	mov	r0, r8
+	ldr	r3, [r2, #420]
+	add	r3, r3, #1
+	str	r3, [r2, #420]
+	ldr	r3, [r9, #-3132]
+	mov	r2, #1
+	add	r3, r3, #1
+	str	r3, [r9, #-3132]
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L3424:
+	ldrh	r3, [r7]
+	add	r8, r8, #1
+	rsb	r6, r3, r6
+	b	.L3423
+.L3436:
+	ldr	r3, .L3437+20
+	ldr	r2, [r3, #420]
+	cmp	r2, #32
+	bls	.L3421
+	mov	r4, #0
+	str	r4, [r3, #420]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L3421
+.L3419:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r5]
+	cmp	r2, r3
+	beq	.L3426
+	bl	__stack_chk_fail
+.L3426:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L3438:
+	.align	2
+.L3437:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3194
+	.word	.LANCHOR4
+	.fnend
+	.size	ftl_discard, .-ftl_discard
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, .L3479
+	ldr	r8, .L3479+4
+	sub	r4, r6, #3200
+	ldr	r7, [r6, #-2812]
+	ldr	r3, [r8]
+	cmp	r7, #0
+	ldrh	r1, [r4]
+	str	r3, [sp, #12]
+	bne	.L3477
+	mov	r10, r4
+	sub	r4, r6, #552
+	mov	r5, r6
+	movw	ip, #65535
+	ldrh	r6, [r4]
+	cmp	r6, ip
+	bne	.L3442
+.L3451:
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	ldr	r6, .L3479+8
+	mov	r7, #0
+	ldr	r9, .L3479
+	cmp	r2, r3
+	str	r7, [r6, #224]
+	sub	fp, r9, #552
+	beq	.L3477
+	bl	FtlCacheWriteBack
+	ldrh	r2, [r10]
+	ldrb	r0, [r9, #-545]	@ zero_extendqisi2
+	mov	r10, #12
+	ldrh	r3, [fp]
+	ldr	r1, [r9, #-2940]
+	smulbb	r2, r0, r2
+	mov	r3, r3, asl #1
+	strh	r2, [r1, r3]	@ movhi
+	ldr	r2, [r9, #-3140]
+	ldrh	r3, [r6, #234]
+	add	r3, r3, r2
+	str	r3, [r9, #-3140]
+	b	.L3452
+.L3442:
+	cmp	r0, #0
+	beq	.L3445
+	ldr	r2, .L3479+12
+	movw	r3, #3288
+	ldrh	r0, [r2, r3]
+	cmp	r0, ip
+	beq	.L3446
+.L3447:
+	mov	r1, #2
+	b	.L3445
+.L3446:
+	strh	r7, [r2, r3]	@ movhi
+	sub	r3, r5, #652
+	ldrh	r3, [r3]
+	cmp	r3, #17
+	bhi	.L3447
+.L3445:
+	ldr	r7, .L3479
+	sub	r0, r7, #552
+	bl	FtlGcScanTempBlk
+	cmn	r0, #1
+	str	r0, [sp, #8]
+	beq	.L3448
+	ldr	r2, [r7, #-2948]
+	mov	r6, r6, asl #1
+	ldrh	r3, [r2, r6]
+	cmp	r3, #4
+	bls	.L3449
+	sub	r3, r3, #5
+	mov	r0, #1
+	strh	r3, [r2, r6]	@ movhi
+	bl	FtlEctTblFlush
+.L3449:
+	ldr	r4, .L3479+8
+	ldr	r3, [r4, #224]
+	cmp	r3, #0
+	bne	.L3450
+	ldr	r0, [sp, #8]
+	ldr	r3, [r4, #-224]
+	ubfx	r0, r0, #10, #16
+	add	r3, r3, #1
+	str	r3, [r4, #-224]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+.L3450:
+	mov	r3, #0
+	str	r3, [r4, #224]
+	b	.L3463
+.L3448:
+	ldr	r2, .L3479+12
+	movw	r3, #3288
+	ldrh	r2, [r2, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3463
+	b	.L3451
+.L3455:
+	ldr	r3, [fp, #4]
+	cmp	r0, r3
+	bne	.L3475
+.L3454:
+	add	r7, r7, #1
+.L3452:
+	ldrh	r3, [r6, #234]
+	uxth	r9, r7
+	cmp	r3, r9
+	bls	.L3478
+	mul	r9, r10, r9
+	ldr	r3, [r5, #-3040]
+	ldr	r2, [r5, #-2816]
+	add	fp, r3, r9
+	ldr	r0, [fp, #8]
+	cmp	r0, r2
+	bcs	.L3475
+	add	r1, sp, #8
+	mov	r2, #0
+	str	r3, [sp, #4]
+	bl	log2phys
+	ldr	r3, [sp, #4]
+	ldr	r0, [sp, #8]
+	ldr	r3, [r3, r9]
+	cmp	r0, r3
+	bne	.L3455
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	add	r1, fp, #4
+	mov	r2, #1
+	mov	r9, r0
+	ldr	r0, [fp, #8]
+	bl	log2phys
+	mov	r0, r9
+	b	.L3476
+.L3475:
+	ldrh	r0, [r4]
+.L3476:
+	bl	decrement_vpc_count
+	b	.L3454
+.L3478:
+	ldr	r9, .L3479+16
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrb	r3, [r9, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3457
+	ldr	r0, .L3479+20
+	ldrh	r1, [r4]
+	bl	printk
+.L3457:
+	ldrh	r0, [r4]
+	ldr	r2, [r5, #-2940]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L3458
+	bl	INSERT_DATA_LIST
+	b	.L3459
+.L3458:
+	bl	INSERT_FREE_LIST
+.L3459:
+	mvn	r10, #0
+	strh	r10, [r4]	@ movhi
+	mov	r4, #0
+	strh	r4, [r6, #234]	@ movhi
+	strh	r4, [r6, #232]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	r7, .L3479
+	ldr	r2, [r5, #-3336]
+	ldr	r3, .L3479+24
+	cmp	r2, r4
+	sub	r2, r7, #652
+	strh	r10, [r3], #-4	@ movhi
+	ldrh	r2, [r2]
+	ldrh	r3, [r3]
+	beq	.L3460
+	ldr	r1, [r7, #-3100]
+	cmp	r1, #39
+	bhi	.L3460
+	cmp	r2, r3
+	subcc	r7, r7, #3056
+	movcc	r3, r3, asl #1
+	strcch	r3, [r7, #-8]	@ movhi
+	b	.L3477
+.L3460:
+	add	r1, r3, r3, asl #1
+	cmp	r2, r1, asr #2
+	ble	.L3477
+	ldrb	r0, [r9, #3904]	@ zero_extendqisi2
+	ldr	r2, .L3479+28
+	cmp	r0, #0
+	moveq	r3, #20
+	streqh	r3, [r2, #-8]	@ movhi
+	beq	.L3441
+	sub	r3, r3, #2
+	strh	r3, [r2, #-8]	@ movhi
+.L3477:
+	mov	r0, #0
+	b	.L3441
+.L3463:
+	mov	r0, #1
+.L3441:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r8]
+	cmp	r2, r3
+	beq	.L3462
+	bl	__stack_chk_fail
+.L3462:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3480:
+	.align	2
+.L3479:
+	.word	.LANCHOR2
+	.word	__stack_chk_guard
+	.word	.LANCHOR4
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LC157
+	.word	.LANCHOR4-368
+	.word	.LANCHOR2-3056
+	.fnend
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	2
+	.global	FtlGcPageRecovery
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r4, .L3484
+	ldr	r5, .L3484+4
+	mov	r0, r4
+	ldrh	r1, [r5]
+	bl	FtlGcScanTempBlk
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5]
+	cmp	r2, r3
+	ldmccfd	sp!, {r3, r4, r5, pc}
+	add	r0, r4, #48
+	bl	FtlMapBlkWriteDumpData
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r3, .L3484+8
+	mov	r2, #0
+	str	r2, [r3, #224]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L3485:
+	.align	2
+.L3484:
+	.word	.LANCHOR2-552
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	2
+	.global	FtlPowerLostRecovery
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r4, .L3488
+	ldr	r3, .L3488+4
+	sub	r6, r4, #648
+	sub	r4, r4, #600
+	mov	r0, r6
+	str	r5, [r3, #276]
+	bl	FtlRecoverySuperblock
+	mov	r0, r6
+	bl	FtlSlcSuperblockCheck
+	mov	r0, r4
+	bl	FtlRecoverySuperblock
+	mov	r0, r4
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L3489:
+	.align	2
+.L3488:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3508
+	mov	r2, #0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	add	r8, r3, #272
+	ldr	r4, .L3508+4
+	mvn	r1, #0
+	strh	r2, [r8]	@ movhi
+	movw	r2, #270
+	strh	r1, [r3, r2]	@ movhi
+	ldr	r3, [r4, #-3264]
+	uxth	r0, r3
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	sub	r3, r4, #404
+	ldrh	r2, [r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3491
+.L3493:
+	mvn	r7, #0
+	b	.L3492
+.L3491:
+	bl	FtlLoadSysInfo
+	subs	r7, r0, #0
+	bne	.L3493
+	bl	FtlLoadMapInfo
+	mov	r6, r7
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	sub	r3, r4, #3152
+	mov	r1, #12
+	ldrh	r2, [r3, #-10]
+	ldr	r3, [r4, #-2896]
+.L3494:
+	cmp	r6, r2
+	bge	.L3499
+	mla	r0, r1, r6, r3
+	ldr	r0, [r0, #4]
+	cmp	r0, #0
+	bge	.L3495
+.L3499:
+	ldr	r5, .L3508+8
+	cmp	r6, r2
+	add	r6, r5, #68
+	ldrh	r3, [r5, #28]
+	add	r3, r3, #1
+	strh	r3, [r5, #28]	@ movhi
+	bge	.L3506
+	b	.L3496
+.L3495:
+	add	r6, r6, #1
+	b	.L3494
+.L3506:
+	ldrh	r3, [r8]
+	cmp	r3, #0
+	beq	.L3500
+.L3496:
+	ldrh	r3, [r6]
+	ldr	r1, [r4, #-2940]
+	ldr	ip, .L3508+12
+	mov	r3, r3, asl #1
+	ldrh	r0, [r6, #4]
+	ldrh	r2, [r1, r3]
+	rsb	r2, r0, r2
+	strh	r2, [r1, r3]	@ movhi
+	ldrh	r3, [ip]
+	mov	r2, #0
+	ldr	lr, [r4, #-2940]
+	strb	r2, [r4, #-642]
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, .L3508+16
+	strh	r2, [r6, #4]	@ movhi
+	ldrh	r1, [r3]
+	ldrh	r8, [r3, #4]
+	mov	r1, r1, asl #1
+	ldrh	r0, [lr, r1]
+	rsb	r0, r8, r0
+	strh	r0, [lr, r1]	@ movhi
+	ldrh	r1, [ip]
+	strh	r2, [r3, #4]	@ movhi
+	strb	r2, [r4, #-594]
+	strh	r1, [r3, #2]	@ movhi
+	ldrh	r3, [r5, #30]
+	add	r3, r3, #1
+	strh	r3, [r5, #30]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+.L3500:
+	ldrh	r0, [r6]
+	movw	r3, #65535
+	ldr	r8, .L3508+20
+	cmp	r0, r3
+	beq	.L3501
+	ldrh	r3, [r8, #4]
+	cmp	r3, #0
+	bne	.L3501
+	ldrh	r3, [r8, #52]
+	add	r4, r8, #48
+	cmp	r3, #0
+	bne	.L3501
+	bl	FtlGcRefreshOpenBlock
+	ldrh	r0, [r8, #48]
+	bl	FtlGcRefreshOpenBlock
+	bl	FtlVpcTblFlush
+	mov	r0, r8
+	bl	allocate_new_data_superblock
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L3501:
+	ldr	r3, .L3508+24
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3502
+	ldrh	r3, [r5, #28]
+	tst	r3, #31
+	bne	.L3492
+.L3502:
+	bl	FtlVpcCheckAndModify
+.L3492:
+	mov	r0, r7
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L3509:
+	.align	2
+.L3508:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR2-716
+	.word	.LANCHOR2-3200
+	.word	.LANCHOR2-600
+	.word	.LANCHOR2-648
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.align	2
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L3545
+	ldr	r5, [r4, #-2812]
+	cmp	r5, #0
+	bne	.L3512
+	sub	r6, r4, #3152
+	mov	r1, r5
+	ldr	r0, [r4, #-2904]
+	ldrh	r2, [r6, #-12]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r6, #-12]
+	mov	r1, r5
+	ldr	r0, [r4, #-2908]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r3, [r4, #-3264]
+	str	r5, [r4, #-3148]
+	str	r5, [r4, #-3144]
+	uxth	r0, r3
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	beq	.L3513
+	bl	FtlMakeBbt
+.L3513:
+	ldr	r0, .L3545
+	mov	r2, #0
+	ldr	ip, .L3545+4
+	ldr	lr, .L3545+8
+.L3514:
+	ldrh	r1, [ip]
+	uxth	r3, r2
+	add	r2, r2, #1
+	cmp	r3, r1, asl #7
+	bge	.L3542
+	ldr	r5, [r0, #-2988]
+	mvn	r1, r3
+	orr	r1, r3, r1, asl #16
+	str	r1, [r5, r3, asl #2]
+	ldr	r1, [r0, #-2984]
+	str	lr, [r1, r3, asl #2]
+	b	.L3514
+.L3542:
+	ldr	r8, .L3545+12
+	mov	r7, #0
+	sub	r6, r8, #10
+	ldrh	r5, [r8, #-12]
+.L3516:
+	ldrh	r3, [r6]
+	ldr	r10, .L3545
+	cmp	r3, r5
+	sub	fp, r10, #3248
+	sub	r9, fp, #10
+	bls	.L3543
+	mov	r0, r5
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r0, r7, r0
+	uxth	r7, r0
+	b	.L3516
+.L3543:
+	sub	r6, r10, #3264
+	sub	r3, r7, #3
+	ldrh	r1, [r6, #-4]
+	cmp	r3, r1, asl #1
+	bge	.L3518
+.L3522:
+	mov	r5, #0
+	ldr	r9, .L3545+16
+	mov	r7, r5
+	b	.L3519
+.L3518:
+	mov	r0, r7
+	bl	__aeabi_uidiv
+	ldr	r3, [r10, #-3168]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldr	r0, [r10, #-3264]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	r7, [fp, #-12]
+.L3520:
+	ldrh	r3, [r9]
+	cmp	r3, r7
+	bls	.L3522
+	mov	r0, r7
+	add	r7, r7, #1
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	uxth	r7, r7
+	b	.L3520
+.L3519:
+	ldrh	r2, [r9]
+	uxth	r0, r5
+	ldr	fp, .L3545
+	add	r5, r5, #1
+	cmp	r2, r0
+	sub	r3, fp, #3248
+	bls	.L3544
+	mov	r1, #0
+	bl	FtlLowFormatEraseBlock
+	add	r0, r7, r0
+	uxth	r7, r0
+	b	.L3519
+.L3544:
+	ldr	r2, [fp, #-3256]
+	ldrh	r3, [r3, #-10]
+	ldrh	r6, [r6, #-4]
+	mov	r0, r2
+	str	r2, [sp, #4]
+	str	r3, [fp, #-3076]
+	mov	r1, r6
+	ldr	r5, .L3545+20
+	bl	__aeabi_uidiv
+	ubfx	r9, r0, #5, #16
+	mov	r10, r0
+	add	r3, r9, #36
+	strh	r3, [r5]	@ movhi
+	mov	r3, #24
+	str	r0, [fp, #-2816]
+	mul	r3, r3, r6
+	ldr	r2, [sp, #4]
+	cmp	r7, r3
+	ble	.L3524
+	rsb	r0, r7, r2
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	str	r0, [fp, #-2816]
+	mov	r0, r0, lsr #5
+	add	r0, r0, #24
+	strh	r0, [r5]	@ movhi
+.L3524:
+	ldr	r3, [r4, #-3336]
+	cmp	r3, #1
+	bne	.L3525
+	mov	r0, r7
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldrh	fp, [r5]
+	uxtah	r0, fp, r0
+	add	fp, fp, r0, asr #2
+	strh	fp, [r5]	@ movhi
+.L3525:
+	ldr	fp, .L3545+24
+	ldrb	r3, [fp, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3526
+	ldrh	r3, [r5]
+	mov	r0, r7
+	mov	r1, r6
+	str	r3, [sp, #4]
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #4]
+	uxtah	r0, r3, r0
+	add	r3, r3, r0, asr #2
+	strh	r3, [r5]	@ movhi
+.L3526:
+	ldr	r0, .L3545
+	sub	r2, r0, #3200
+	ldrh	r3, [r2, #-6]
+	cmp	r3, #0
+	beq	.L3528
+	ldrh	r1, [r5]
+	add	r1, r1, r3, lsr #1
+	strh	r1, [r5]	@ movhi
+	mul	r1, r6, r3
+	cmp	r1, r7
+	strgt	r10, [r0, #-2816]
+	addgt	r3, r3, #32
+	ldrgt	r1, .L3545+20
+	addgt	r3, r9, r3
+	strgth	r3, [r1]	@ movhi
+.L3528:
+	ldrh	r1, [r5]
+	mvn	r9, #0
+	ldr	r3, [r4, #-2816]
+	mov	r5, #0
+	ldr	r7, .L3545+28
+	rsb	r3, r1, r3
+	mul	r6, r6, r3
+	ldrh	r3, [r2]
+	str	r6, [r7, #-376]
+	mul	r3, r3, r6
+	ldr	r6, .L3545+32
+	ldrh	r2, [r6, #-10]
+	str	r3, [r4, #-2816]
+	mul	r3, r2, r3
+	str	r3, [fp, #3908]
+	bl	FtlBbmTblFlush
+	ldrh	r2, [r8, #-10]
+	mov	r1, #0
+	ldr	r0, [r4, #-2940]
+	ldr	fp, .L3545+36
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r8, #-12]
+	sub	r3, r7, #368
+	ldr	r0, [r4, #-2928]
+	mov	r1, #255
+	str	r5, [r4, #-408]
+	mov	r2, r2, lsr #3
+	strh	r9, [r3]	@ movhi
+	strh	r5, [r3, #2]	@ movhi
+	mov	r3, #1
+	strb	r5, [r7, #-362]
+	mov	r10, fp
+	strb	r5, [r7, #-360]
+	strh	r5, [fp, #2]	@ movhi
+	strb	r5, [r4, #-642]
+	strh	r5, [fp]	@ movhi
+	strb	r3, [r4, #-640]
+	bl	ftl_memset
+	add	r2, r6, #3184
+.L3530:
+	ldr	r5, .L3545
+	str	r2, [sp, #4]
+	sub	r6, r5, #648
+	mov	r0, r6
+	bl	make_superblock
+	ldrb	r3, [r4, #-641]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrh	r3, [fp]
+	bne	.L3531
+	ldr	r2, [sp, #4]
+	mov	r3, r3, asl #1
+	ldr	r1, [r2, #-2940]
+	strh	r9, [r1, r3]	@ movhi
+	ldrh	r3, [r10]
+	add	r8, r3, #1
+	strh	r8, [r10]	@ movhi
+	b	.L3530
+.L3531:
+	ldr	r2, [r5, #-3148]
+	mov	r3, r3, asl #1
+	ldrh	r1, [r6, #4]
+	mvn	fp, #0
+	str	r2, [r5, #-636]
+	add	r2, r2, #1
+	str	r2, [r5, #-3148]
+	ldr	r2, [r5, #-2940]
+	strh	r1, [r2, r3]	@ movhi
+	sub	r2, r5, #600
+	mov	r3, #0
+	strb	r3, [r5, #-594]
+	strh	r3, [r2, #2]	@ movhi
+	mov	r8, r2
+	ldrh	r3, [r6]
+	mov	r10, r2
+	add	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	mov	r3, #1
+	strb	r3, [r5, #-592]
+.L3532:
+	ldr	r6, .L3545
+	sub	r9, r6, #600
+	mov	r0, r9
+	bl	make_superblock
+	ldrb	r3, [r4, #-593]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrh	r3, [r8]
+	bne	.L3533
+	ldr	r2, [r5, #-2940]
+	mov	r3, r3, asl #1
+	strh	fp, [r2, r3]	@ movhi
+	ldrh	r3, [r10]
+	add	r3, r3, #1
+	strh	r3, [r10]	@ movhi
+	b	.L3532
+.L3533:
+	ldr	r2, [r6, #-3148]
+	mov	r3, r3, asl #1
+	ldrh	r1, [r9, #4]
+	mvn	r4, #0
+	str	r2, [r6, #-588]
+	add	r2, r2, #1
+	str	r2, [r6, #-3148]
+	ldr	r2, [r6, #-2940]
+	strh	r1, [r2, r3]	@ movhi
+	sub	r3, r6, #552
+	strh	r4, [r3]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	sub	r3, r6, #404
+	mov	r2, #0
+	strh	r2, [r3, #2]	@ movhi
+	ldr	r2, [r7, #-376]
+	strh	r4, [r3, #4]	@ movhi
+	strh	r2, [r3, #6]	@ movhi
+	strh	r0, [r3]	@ movhi
+	ldr	r3, [r6, #-3148]
+	str	r3, [r6, #-396]
+	add	r3, r3, #1
+	str	r3, [r6, #-3148]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	ldreq	r3, .L3545+40
+	moveq	r2, #1
+	streq	r2, [r3, #3284]
+.L3512:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3546:
+	.align	2
+.L3545:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-3194
+	.word	168778952
+	.word	.LANCHOR2-3248
+	.word	.LANCHOR2-3260
+	.word	.LANCHOR4-372
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2-3184
+	.word	.LANCHOR2-648
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	FtlReInitForSDUpdata
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r5, .L3577
+	ldr	r0, .L3577+4
+	ldr	r3, [r5]
+	str	r3, [sp, #20]
+	ldrb	r3, [r0, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3548
+.L3550:
+	mov	r0, #0
+	b	.L3549
+.L3548:
+	ldr	r3, .L3577+8
+	mov	r4, r0
+	ldr	r0, [r3]
+	bl	FlashInit
+	cmp	r0, #0
+	bne	.L3550
+	bl	FlashLoadFactorBbt
+	cmp	r0, #0
+	beq	.L3551
+	bl	FlashMakeFactorBbt
+.L3551:
+	ldr	r6, .L3577+12
+	ldr	r0, [r6, #-3308]
+	bl	FlashReadIdbDataRaw
+	cmp	r0, #0
+	beq	.L3552
+	mov	r2, #16
+	add	r0, sp, #4
+	mov	r1, #0
+	bl	FlashReadFacBbtData
+	mov	r3, #0
+	mov	r0, r3
+	mov	ip, #1
+	ldr	r2, [sp, #4]
+.L3553:
+	ands	lr, r2, ip, asl r0
+	add	r1, r3, #1
+	add	r0, r0, #1
+	movne	r3, r1
+	cmp	r0, #16
+	bne	.L3553
+	cmp	r3, #6
+	bls	.L3573
+	mov	r0, #0
+	mov	ip, #1
+.L3556:
+	ands	lr, r2, ip, asl r0
+	add	r1, r3, #1
+	add	r0, r0, #1
+	movne	r3, r1
+	cmp	r0, #24
+	bne	.L3556
+	cmp	r3, #17
+	movhi	r3, #36
+	strhib	r3, [r4, #1]
+	bhi	.L3555
+.L3573:
+	strb	r0, [r4, #1]
+.L3555:
+	ldrb	r2, [r4, #1]	@ zero_extendqisi2
+	ldr	r3, .L3577+16
+	strh	r2, [r3, #26]	@ movhi
+.L3552:
+	ldr	r1, .L3577+20
+	mov	r4, #1
+	ldr	r0, .L3577+24
+	bl	printk
+	ldr	r0, .L3577+16
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldr	r0, [r6, #-3264]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+.L3558:
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	beq	.L3559
+.L3575:
+	bl	FtlLowFormat
+	cmp	r4, #3
+	addls	r4, r4, #1
+	bls	.L3558
+.L3576:
+	mvn	r0, #0
+	b	.L3549
+.L3559:
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L3575
+	ldr	r3, .L3577+28
+	mov	r2, #1
+	str	r2, [r3, #3284]
+.L3549:
+	ldr	r2, [sp, #20]
+	ldr	r3, [r5]
+	cmp	r2, r3
+	beq	.L3563
+	bl	__stack_chk_fail
+.L3563:
+	add	sp, sp, #24
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L3578:
+	.align	2
+.L3577:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	RK29_NANDC_REG_BASE
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3876
+	.word	.LC141
+	.word	.LC46
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r4, .L3596
+	ldr	r3, [r4, #-2812]
+	cmp	r3, #0
+	beq	.L3580
+.L3583:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L3580:
+	ldr	r3, .L3596+4
+	ldr	r6, .L3596+8
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3582
+	ldr	r3, [r6, #208]
+	tst	r3, #1
+	beq	.L3582
+	sub	r3, r4, #552
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L3583
+.L3582:
+	mov	r2, #0
+	ldr	r0, [r4, #-3032]
+	ldr	r1, [r6, #208]
+	mov	r3, r2
+	bl	FlashProgPages
+	mov	r7, #0
+	mov	r8, #36
+.L3584:
+	ldr	r1, [r6, #208]
+	uxth	r3, r7
+	ldr	r5, .L3596+8
+	cmp	r3, r1
+	bcs	.L3595
+	mul	r3, r8, r3
+	ldr	r0, [r4, #-3032]
+	ldr	r2, .L3596
+	add	r7, r7, #1
+	add	r1, r0, r3
+	ldr	lr, [r0, r3]
+	ldr	ip, [r1, #12]
+	cmn	lr, #1
+	bne	.L3585
+	sub	r0, r2, #552
+	ldr	ip, [r2, #-2940]
+	mov	r4, #0
+	ldrh	r1, [r0]
+	mov	r1, r1, asl #1
+	strh	r4, [ip, r1]	@ movhi
+	ldr	r2, [r2, #-3032]
+	ldr	r1, [r5, #-224]
+	add	r3, r2, r3
+	strh	lr, [r0]	@ movhi
+	add	r1, r1, #1
+	str	r1, [r5, #-224]
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L3594
+.L3585:
+	ldr	r0, [ip, #12]
+	ldr	r1, [r1, #4]
+	ldr	r2, [ip, #8]
+	bl	FtlGcUpdatePage
+	b	.L3584
+.L3595:
+	ldr	r0, [r4, #-3032]
+	bl	FtlGcBufFree
+	mov	r3, #0
+	str	r3, [r5, #208]
+	ldr	r3, .L3596+12
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L3583
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+.L3594:
+	mov	r0, #1
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L3597:
+	.align	2
+.L3596:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2-552
+	.fnend
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.align	2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3602
+	movw	r2, #65535
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldrh	r1, [r3]
+	cmp	r1, r2
+	beq	.L3599
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L3600
+.L3599:
+	bl	FtlCacheWriteBack
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L3602+4
+	mov	r4, #0
+	sub	r0, r0, #552
+	strb	r4, [r0, #8]
+	bl	allocate_data_superblock
+	ldr	r3, .L3602+8
+	strh	r4, [r3, #232]	@ movhi
+	strh	r4, [r3, #234]	@ movhi
+	bl	l2p_flush
+	mov	r0, r4
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3600:
+	ldr	r0, .L3602
+	ldmfd	sp!, {r4, lr}
+	b	get_new_active_ppa
+.L3603:
+	.align	2
+.L3602:
+	.word	.LANCHOR2-552
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	ftl_read
+	.type	ftl_read, %function
+ftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r3
+	ldr	r3, .L3652
+	.pad #84
+	sub	sp, sp, #84
+	str	r2, [sp, #36]
+	ldr	r3, [r3]
+	str	r3, [sp, #76]
+	ldr	r3, .L3652+4
+	ldr	r3, [r3, #3284]
+	cmn	r3, #1
+	moveq	r0, r3
+	beq	.L3605
+	cmp	r0, #16
+	mov	r7, r1
+	bne	.L3606
+	add	r0, r1, #256
+	mov	r1, r2
+	mov	r2, r8
+	bl	FtlVendorPartRead
+	b	.L3605
+.L3606:
+	ldr	r3, [sp, #36]
+	add	r3, r1, r3
+	str	r3, [sp, #40]
+	ldr	r3, .L3652+8
+	ldr	r2, [sp, #40]
+	ldr	r3, [r3, #3908]
+	cmp	r2, r3
+	mvnhi	r0, #0
+	bhi	.L3605
+	ldr	r4, .L3652+12
+	mov	r0, r1
+	sub	r3, r4, #3184
+	ldrh	r5, [r3, #-10]
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	mov	r1, r5
+	ldr	r3, [sp, #40]
+	str	r0, [sp, #28]
+	sub	r0, r3, #1
+	bl	__aeabi_uidiv
+	ldr	r2, .L3652+16
+	ldr	r3, [sp, #28]
+	ldr	r1, [sp, #36]
+	rsb	r3, r3, #1
+	str	r0, [sp, #32]
+	add	r3, r3, r0
+	str	r3, [sp, #24]
+	ldr	r3, [r2, #196]
+	ldr	r0, [sp, #28]
+	add	r3, r1, r3
+	str	r3, [r2, #196]
+	ldr	r3, [r4, #-3120]
+	ldr	r2, [sp, #24]
+	ldr	r1, [sp, #32]
+	add	r3, r2, r3
+	str	r3, [r4, #-3120]
+	bl	FtlCacheMetchLpa
+	cmp	r0, #0
+	beq	.L3607
+	bl	FtlCacheWriteBack
+.L3607:
+	ldr	r5, [sp, #28]
+	mov	r9, #0
+	ldr	r4, .L3652+12
+	mov	r6, r9
+	str	r9, [sp, #48]
+	str	r9, [sp, #52]
+.L3608:
+	ldr	r3, [sp, #24]
+	cmp	r3, #0
+	beq	.L3651
+	mov	r0, r5
+	add	r1, sp, #72
+	mov	r2, #0
+	bl	log2phys
+	ldr	r3, [sp, #72]
+	cmn	r3, #1
+	bne	.L3647
+	mov	r10, #0
+.L3609:
+	ldr	r3, .L3652+20
+	ldrh	r0, [r3]
+	cmp	r10, r0
+	bcs	.L3613
+	mla	r0, r0, r5, r10
+	ldr	r2, [sp, #40]
+	cmp	r0, r7
+	movcs	r3, #1
+	movcc	r3, #0
+	cmp	r0, r2
+	movcs	r3, #0
+	cmp	r3, #0
+	beq	.L3611
+	rsb	r0, r7, r0
+	mov	r1, #0
+	mov	r2, #512
+	add	r0, r8, r0, asl #9
+	bl	ftl_memset
+.L3611:
+	add	r10, r10, #1
+	b	.L3609
+.L3647:
+	ldr	r2, [r4, #-3036]
+	mov	r10, #36
+	mla	r10, r10, r6, r2
+	str	r3, [r10, #4]
+	ldr	r3, [sp, #28]
+	cmp	r5, r3
+	bne	.L3614
+	ldr	r3, [r4, #-2988]
+	mov	r0, r7
+	str	r3, [r10, #8]
+	ldr	r3, .L3652+20
+	ldrh	fp, [r3]
+	mov	r1, fp
+	bl	__aeabi_uidivmod
+	ldr	r2, [sp, #36]
+	rsb	r3, r1, fp
+	str	r1, [sp, #56]
+	cmp	r3, r2
+	movcs	r3, r2
+	cmp	r3, fp
+	str	r3, [sp, #48]
+	streq	r8, [r10, #8]
+	b	.L3615
+.L3614:
+	ldr	r3, [sp, #32]
+	cmp	r5, r3
+	bne	.L3616
+	ldr	r3, [r4, #-2984]
+	ldr	r1, [sp, #40]
+	str	r3, [r10, #8]
+	ldr	r3, .L3652+20
+	ldrh	r2, [r3]
+	mul	r3, r2, r5
+	rsb	r9, r3, r1
+	cmp	r9, r2
+	bne	.L3615
+	b	.L3649
+.L3616:
+	ldr	r3, .L3652+20
+	ldrh	r3, [r3]
+	mul	r3, r3, r5
+.L3649:
+	rsb	r3, r7, r3
+	add	r3, r8, r3, asl #9
+	str	r3, [r10, #8]
+.L3615:
+	ldr	r3, .L3652+24
+	ldr	r2, [r4, #-2972]
+	str	r5, [r10, #16]
+	ldrh	r3, [r3]
+	mul	r3, r3, r6
+	add	r6, r6, #1
+	bic	r3, r3, #3
+	add	r3, r2, r3
+	str	r3, [r10, #12]
+.L3613:
+	ldr	r3, [sp, #24]
+	add	r5, r5, #1
+	subs	r3, r3, #1
+	str	r3, [sp, #24]
+	beq	.L3617
+	ldr	r3, .L3652+28
+	ldrh	r3, [r3]
+	cmp	r6, r3, asl #3
+	bne	.L3608
+.L3617:
+	cmp	r6, #0
+	beq	.L3608
+	ldr	r0, [r4, #-3036]
+	mov	r1, r6
+	mov	r2, #0
+	ldr	fp, .L3652+16
+	bl	FlashReadPages
+	ldr	r3, [sp, #56]
+	mov	r3, r3, asl #9
+	str	r3, [sp, #60]
+	ldr	r3, [sp, #48]
+	mov	r3, r3, asl #9
+	str	r3, [sp, #64]
+	mov	r3, r9, asl #9
+	str	r3, [sp, #68]
+	mov	r3, #0
+	str	r3, [sp, #44]
+.L3624:
+	ldr	r3, [sp, #44]
+	mov	ip, #36
+	ldr	r1, [sp, #28]
+	mul	r10, ip, r3
+	ldr	r3, [r4, #-3036]
+	add	r3, r3, r10
+	ldr	r2, [r3, #16]
+	cmp	r2, r1
+	bne	.L3619
+	ldr	r1, [r3, #8]
+	ldr	r3, [r4, #-2988]
+	cmp	r1, r3
+	bne	.L3620
+	ldr	r3, [sp, #60]
+	mov	r0, r8
+	ldr	r2, [sp, #64]
+	add	r1, r1, r3
+	b	.L3650
+.L3619:
+	ldr	r1, [sp, #32]
+	cmp	r2, r1
+	bne	.L3620
+	ldr	r1, [r3, #8]
+	ldr	r3, [r4, #-2984]
+	cmp	r1, r3
+	bne	.L3620
+	ldr	r3, .L3652+20
+	ldr	r2, [sp, #68]
+	ldrh	r0, [r3]
+	ldr	r3, [sp, #32]
+	mul	r0, r0, r3
+	rsb	r0, r7, r0
+	add	r0, r8, r0, asl #9
+.L3650:
+	bl	ftl_memcpy
+.L3620:
+	ldr	r2, [r4, #-3036]
+	add	r3, r2, r10
+	ldr	r1, [r2, r10]
+	cmn	r1, #1
+	streq	r1, [sp, #52]
+	ldreq	r2, [fp, #-248]
+	addeq	r2, r2, #1
+	streq	r2, [fp, #-248]
+	ldr	r2, [r3, #12]
+	ldr	r1, [r3, #16]
+	ldr	r2, [r2, #8]
+	cmp	r1, r2
+	beq	.L3622
+	ldr	r2, [fp, #-248]
+	ldr	r0, .L3652+32
+	add	r2, r2, #1
+	str	r2, [fp, #-248]
+	ldr	lr, [r3, #12]
+	ldr	r2, [r3, #8]
+	ldr	r1, [lr, #4]
+	str	r1, [sp]
+	ldr	r1, [lr, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [lr, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	ldr	r2, [r2, #4]
+	str	r2, [sp, #16]
+	ldr	r1, [r3, #16]
+	ldr	r2, [r3, #4]
+	ldr	r3, [lr]
+	bl	printk
+.L3622:
+	ldr	r3, [r4, #-3036]
+	add	r2, r3, r10
+	ldr	r3, [r3, r10]
+	cmp	r3, #256
+	bne	.L3623
+	ldr	r0, [r2, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L3623:
+	ldr	r3, [sp, #44]
+	add	r3, r3, #1
+	str	r3, [sp, #44]
+	cmp	r3, r6
+	bne	.L3624
+	mov	r6, #0
+	b	.L3608
+.L3651:
+	ldr	r3, .L3652+36
+	ldrh	r3, [r3, #-2]
+	cmp	r3, #0
+	beq	.L3626
+	ldr	r0, [sp, #24]
+	mov	r1, #1
+	bl	ftl_do_gc
+.L3626:
+	ldr	r0, [sp, #52]
+.L3605:
+	ldr	r3, .L3652
+	ldr	r2, [sp, #76]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3627
+	bl	__stack_chk_fail
+.L3627:
+	add	sp, sp, #84
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3653:
+	.align	2
+.L3652:
+	.word	__stack_chk_guard
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LANCHOR2-3194
+	.word	.LANCHOR2-3188
+	.word	.LANCHOR2-3268
+	.word	.LC55
+	.word	.LANCHOR2-3056
+	.fnend
+	.size	ftl_read, .-ftl_read
+	.align	2
+	.global	ftl_vendor_read
+	.type	ftl_vendor_read, %function
+ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	ip, r1
+	mov	lr, r0
+	mov	r3, r2
+	mov	r1, lr
+	mov	r0, #16
+	mov	r2, ip
+	ldr	lr, [sp], #4
+	b	ftl_read
+	.fnend
+	.size	ftl_vendor_read, .-ftl_vendor_read
+	.align	2
+	.global	ftl_sys_read
+	.type	ftl_sys_read, %function
+ftl_sys_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, ip
+	mov	r0, #16
+	b	ftl_read
+	.fnend
+	.size	ftl_sys_read, .-ftl_sys_read
+	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mvn	r3, #0
+	ldr	r5, .L3674
+	ldr	r6, .L3674+4
+	ldr	r8, .L3674+8
+	ldr	r1, .L3674+12
+	ldr	r0, .L3674+16
+	str	r3, [r6, #3284]
+	mov	r3, #0
+	str	r3, [r8, #424]
+	str	r3, [r5, #-2812]
+	bl	printk
+	ldr	r0, .L3674+20
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldr	r3, [r5, #-3264]
+	uxth	r0, r3
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	ldrne	r0, .L3674+24
+	bne	.L3673
+	bl	FtlSysBlkInit
+	subs	r4, r0, #0
+	beq	.L3660
+	ldr	r0, .L3674+28
+.L3673:
+	ldr	r1, .L3674+32
+	bl	printk
+	b	.L3659
+.L3660:
+	mov	r1, #1
+	str	r1, [r6, #3284]
+	bl	ftl_do_gc
+	sub	r3, r5, #652
+	ldrh	r9, [r3]
+	mov	r7, r3
+	cmp	r9, #15
+	bhi	.L3661
+	sub	r8, r8, #368
+	sub	r5, r5, #3072
+	movw	r6, #65535
+.L3664:
+	ldrh	r3, [r8]
+	cmp	r3, r6
+	bne	.L3662
+	ldrh	r3, [r5]
+	cmp	r3, r6
+	bne	.L3662
+	and	r0, r4, #7
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L3662:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	mov	r0, #0
+	mov	r1, #1
+	bl	ftl_do_gc
+	ldrh	r2, [r7]
+	add	r3, r9, #2
+	cmp	r2, r3
+	bhi	.L3659
+	add	r4, r4, #1
+	cmp	r4, #1024
+	bne	.L3664
+	b	.L3659
+.L3661:
+	ldr	r3, .L3674+36
+	ldrb	r3, [r3, #3904]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3659
+	mov	r4, #128
+.L3666:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	bne	.L3666
+.L3659:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L3675:
+	.align	2
+.L3674:
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.word	.LANCHOR4
+	.word	.LC141
+	.word	.LC46
+	.word	.LANCHOR0+3876
+	.word	.LC158
+	.word	.LC159
+	.word	.LANCHOR3+108
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlInit, .-FtlInit
+	.align	2
+	.global	ftl_write
+	.type	ftl_write, %function
+ftl_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #108
+	sub	sp, sp, #108
+	ldr	r10, .L3750
+	str	r3, [sp, #8]
+	ldr	r3, .L3750+4
+	ldr	r3, [r3]
+	str	r3, [sp, #100]
+	ldr	r3, [r10, #-2812]
+	cmp	r3, #0
+	bne	.L3718
+	mov	r8, r2
+	ldr	r2, .L3750+8
+	ldr	r2, [r2, #3284]
+	cmn	r2, #1
+	moveq	r0, r3
+	beq	.L3677
+	cmp	r0, #16
+	mov	r7, r1
+	bne	.L3678
+	add	r0, r1, #256
+	ldr	r2, [sp, #8]
+	mov	r1, r8
+	bl	FtlVendorPartWrite
+	b	.L3677
+.L3678:
+	ldr	r3, .L3750+12
+	add	r5, r1, r8
+	ldr	r3, [r3, #3908]
+	cmp	r5, r3
+	mvnhi	r0, #0
+	bhi	.L3677
+	ldr	r6, .L3750+16
+	mov	r3, #2048
+	mov	r0, r1
+	str	r3, [r6, #428]
+	sub	r3, r10, #3184
+	ldrh	r4, [r3, #-10]
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	mov	r1, r4
+	str	r0, [sp, #12]
+	sub	r0, r5, #1
+	bl	__aeabi_uidiv
+	cmp	r8, r4, asl #1
+	ldr	r2, [sp, #12]
+	str	r0, [sp, #28]
+	rsb	r5, r2, r0
+	add	r3, r5, #1
+	str	r3, [sp, #4]
+	ldr	r2, [sp, #4]
+	ldr	r3, [r10, #-3136]
+	add	r3, r2, r3
+	ldr	r2, [r10, #-3048]
+	str	r3, [r10, #-3136]
+	ldr	r3, [r6, #192]
+	add	r3, r8, r3
+	str	r3, [r6, #192]
+	movcs	r3, #1
+	movcc	r3, #0
+	cmp	r2, #0
+	str	r3, [sp, #24]
+	beq	.L3680
+	mov	r3, #36
+	ldr	r9, [r10, #-3016]
+	mul	r3, r3, r2
+	ldr	r2, [sp, #12]
+	sub	r3, r3, #36
+	add	r9, r9, r3
+	ldr	r3, [r9, #16]
+	cmp	r2, r3
+	bne	.L3681
+	ldr	r3, [r10, #-3128]
+	mov	r1, r4
+	mov	r0, r7
+	add	r3, r3, #1
+	str	r3, [r10, #-3128]
+	ldr	r3, [r6, #432]
+	add	r3, r3, #1
+	str	r3, [r6, #432]
+	bl	__aeabi_uidivmod
+	ldr	r0, [r9, #8]
+	rsb	r4, r1, r4
+	add	r0, r0, r1, asl #9
+	cmp	r4, r8
+	ldr	r1, [sp, #8]
+	movcs	r4, r8
+	mov	r10, r4, asl #9
+	mov	r2, r10
+	bl	ftl_memcpy
+	cmp	r5, #0
+	bne	.L3682
+	ldr	r3, [r6, #432]
+	cmp	r3, #2
+	ble	.L3718
+.L3682:
+	ldr	r3, [sp, #8]
+	rsb	r8, r4, r8
+	add	r7, r7, r4
+	str	r5, [sp, #4]
+	add	r3, r3, r10
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #12]
+	add	r3, r3, #1
+	str	r3, [sp, #12]
+.L3681:
+	mov	r3, #0
+	str	r3, [r6, #432]
+.L3680:
+	ldr	r0, [sp, #12]
+	ldr	r1, [sp, #28]
+	bl	FtlCacheMetchLpa
+	cmp	r0, #0
+	beq	.L3683
+	bl	FtlCacheWriteBack
+.L3683:
+	ldr	r5, .L3750+20
+	mov	r3, #0
+	str	r3, [sp, #16]
+	add	r4, r5, #648
+	str	r3, [sp, #32]
+	str	r5, [r6, #416]
+	ldr	r6, [sp, #12]
+.L3684:
+	ldr	r3, [sp, #4]
+	cmp	r3, #0
+	beq	.L3749
+	ldrh	r2, [r5, #4]
+	cmp	r2, #0
+	bne	.L3685
+	ldr	r3, .L3750+20
+	ldr	r9, .L3750+8
+	cmp	r5, r3
+	bne	.L3686
+	add	r0, r5, #48
+	ldrh	r10, [r0, #4]
+	cmp	r10, #0
+	bne	.L3687
+	bl	allocate_new_data_superblock
+	str	r10, [r9, #3292]
+.L3687:
+	ldr	r0, .L3750+20
+	bl	allocate_new_data_superblock
+	ldr	r3, [r9, #3292]
+	cmp	r3, #0
+	ldrne	r5, .L3750+24
+	bne	.L3688
+.L3689:
+	ldr	r5, .L3750+20
+	b	.L3688
+.L3686:
+	ldrh	r3, [r3, #4]
+	str	r2, [r9, #3292]
+	cmp	r3, #0
+	bne	.L3689
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+.L3688:
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	bne	.L3690
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+.L3690:
+	ldr	r3, .L3750+16
+	str	r5, [r3, #416]
+.L3685:
+	ldr	r3, [r4, #-3052]
+	ldr	r1, [r4, #-3048]
+	ldrh	r2, [r5, #4]
+	rsb	r3, r1, r3
+	cmp	r2, r3
+	movcs	r2, r3
+	ldr	r3, [sp, #4]
+	cmp	r2, r3
+	movcc	r3, r2
+	str	r3, [sp, #44]
+	mov	r3, #0
+.L3747:
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	ldr	r2, [sp, #44]
+	cmp	r3, r2
+	beq	.L3692
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	beq	.L3692
+	ldr	r3, [sp, #28]
+	ldr	r2, [sp, #20]
+	rsb	ip, r3, r6
+	ldr	r3, [sp, #24]
+	clz	ip, ip
+	mov	ip, ip, lsr #5
+	and	r3, ip, r3
+	cmp	r2, #0
+	moveq	r3, #0
+	andne	r3, r3, #1
+	cmp	r3, #0
+	beq	.L3693
+	ldr	r3, .L3750+28
+	ldrh	r2, [r3]
+	add	r3, r8, r7
+	mls	r3, r2, r6, r3
+	cmp	r3, r2
+	bne	.L3692
+.L3693:
+	add	r1, sp, #60
+	mov	r2, #0
+	mov	r0, r6
+	str	ip, [sp, #52]
+	bl	log2phys
+	mov	r0, r5
+	bl	get_new_active_ppa
+	ldr	r10, [r4, #-3048]
+	ldr	r1, [r4, #-3016]
+	mov	r3, #36
+	ldr	fp, .L3750+32
+	mla	r1, r3, r10, r1
+	ldrh	r2, [fp]
+	str	r6, [r1, #16]
+	str	r0, [r1, #4]
+	mul	r0, r10, r2
+	str	r3, [sp, #48]
+	bic	r3, r0, #3
+	str	r3, [sp, #36]
+	ldr	r0, [sp, #36]
+	ldr	r3, [r4, #-2964]
+	add	r9, r3, r0
+	ldrh	r0, [fp, #-2]
+	str	r9, [r1, #12]
+	str	r3, [sp, #40]
+	mul	r10, r10, r0
+	ldr	r0, [r4, #-2992]
+	bic	r10, r10, #3
+	add	r10, r0, r10
+	mov	r0, r9
+	str	r10, [r1, #8]
+	mov	r1, #0
+	bl	ftl_memset
+	ldr	r3, [sp, #12]
+	ldr	ip, [sp, #52]
+	rsb	r10, r3, r6
+	clz	r10, r10
+	mov	r10, r10, lsr #5
+	orrs	r3, r10, ip
+	ldr	r3, [sp, #48]
+	beq	.L3694
+	cmp	r10, #0
+	beq	.L3695
+	ldrh	fp, [fp, #-6]
+	mov	r0, r7
+	mov	r1, fp
+	bl	__aeabi_uidivmod
+	rsb	r2, r1, fp
+	mov	r3, r1
+	cmp	r2, r8
+	str	r1, [sp, #32]
+	movcc	r3, r2
+	movcs	r3, r8
+	str	r3, [sp, #16]
+	b	.L3696
+.L3695:
+	cmp	ip, #0
+	beq	.L3696
+	ldr	r3, .L3750+28
+	add	r2, r8, r7
+	str	r10, [sp, #32]
+	ldrh	r1, [r3]
+	smulbb	r1, r1, r6
+	rsb	r2, r1, r2
+	uxth	r3, r2
+	str	r3, [sp, #16]
+.L3696:
+	ldr	r3, .L3750+28
+	ldr	r2, [sp, #16]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bne	.L3697
+	cmp	r10, #0
+	ldr	r0, .L3750
+	moveq	r3, r2
+	ldr	r2, .L3750
+	muleq	r1, r6, r3
+	ldreq	r3, [sp, #8]
+	ldr	r2, [r2, #-3048]
+	ldr	r0, [r0, #-3016]
+	rsbeq	r1, r7, r1
+	ldrne	r1, [sp, #8]
+	addeq	r1, r3, r1, asl #9
+	ldr	r3, [sp, #24]
+	cmp	r3, #0
+	mov	r3, #36
+	mla	r3, r3, r2, r0
+	strne	r1, [r3, #8]
+	bne	.L3700
+	ldr	r0, [r3, #8]
+	ldr	r3, .L3750+36
+	ldrh	r2, [r3]
+	b	.L3745
+.L3697:
+	ldr	r2, [sp, #60]
+	mov	r3, #36
+	cmn	r2, #1
+	beq	.L3701
+	ldr	r1, [r4, #-3016]
+	add	r0, sp, #64
+	str	r2, [sp, #68]
+	ldr	r2, [r4, #-3048]
+	str	r6, [sp, #80]
+	mla	r3, r3, r2, r1
+	mov	r1, #1
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #12]
+	str	r2, [sp, #72]
+	mov	r2, #0
+	str	r3, [sp, #76]
+	bl	FlashReadPages
+	ldr	r3, [sp, #64]
+	cmn	r3, #1
+	ldreq	r2, .L3750+16
+	ldreq	r3, [r2, #-248]
+	addeq	r3, r3, #1
+	streq	r3, [r2, #-248]
+	beq	.L3704
+.L3702:
+	ldr	r3, [r9, #8]
+	cmp	r3, r6
+	beq	.L3704
+	ldr	r2, .L3750+16
+	ldr	r0, .L3750+40
+	ldr	r3, [r2, #-248]
+	add	r3, r3, #1
+	str	r3, [r2, #-248]
+	mov	r2, r6
+	ldr	r1, [r9, #8]
+	bl	printk
+	b	.L3704
+.L3701:
+	ldr	r2, [r4, #-3048]
+	ldr	r1, [r4, #-3016]
+	mla	r3, r3, r2, r1
+	mov	r1, #0
+	ldr	r0, [r3, #8]
+	ldr	r3, .L3750+36
+	ldrh	r2, [r3]
+	bl	ftl_memset
+.L3704:
+	cmp	r10, #0
+	mov	r3, #36
+	beq	.L3705
+	ldr	r1, [r4, #-3016]
+	ldr	r2, [r4, #-3048]
+	mla	r3, r3, r2, r1
+	ldr	r1, [sp, #8]
+	ldr	r0, [r3, #8]
+	ldr	r3, [sp, #32]
+	add	r0, r0, r3, asl #9
+	b	.L3748
+.L3705:
+	ldr	r1, [r4, #-3048]
+	ldr	r2, [r4, #-3016]
+	mla	r3, r3, r1, r2
+	ldr	r2, .L3750+28
+	ldrh	r1, [r2]
+	ldr	r0, [r3, #8]
+	mul	r1, r1, r6
+	ldr	r3, [sp, #8]
+	rsb	r1, r7, r1
+	add	r1, r3, r1, asl #9
+.L3748:
+	ldr	r3, [sp, #16]
+	mov	r2, r3, asl #9
+	b	.L3745
+.L3694:
+	ldr	r2, [sp, #24]
+	cmp	r2, #0
+	ldr	r2, [r4, #-3048]
+	beq	.L3706
+	ldr	r1, [r4, #-3016]
+	mla	r3, r3, r2, r1
+	ldr	r2, .L3750+28
+	ldrh	fp, [r2]
+	ldr	r2, [sp, #8]
+	mul	fp, fp, r6
+	rsb	fp, r7, fp
+	add	fp, r2, fp, asl #9
+	str	fp, [r3, #8]
+	b	.L3700
+.L3706:
+	ldr	r0, [r4, #-3016]
+	mla	r3, r3, r2, r0
+	ldr	r2, .L3750+28
+	ldrh	r1, [r2]
+	ldrh	r2, [fp, #-2]
+	ldr	r0, [r3, #8]
+	mul	r1, r1, r6
+	ldr	r3, [sp, #8]
+	rsb	r1, r7, r1
+	add	r1, r3, r1, asl #9
+.L3745:
+	bl	ftl_memcpy
+.L3700:
+	ldr	r3, .L3750+44
+	ldr	r2, [sp, #40]
+	ldr	r1, [sp, #36]
+	strh	r3, [r2, r1]	@ movhi
+	ldr	r3, [r4, #-3144]
+	str	r6, [r9, #8]
+	add	r6, r6, #1
+	str	r3, [r9, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, #0
+	str	r3, [r4, #-3144]
+	ldr	r3, [sp, #60]
+	str	r3, [r9, #12]
+	ldrh	r3, [r5]
+	strh	r3, [r9, #2]	@ movhi
+	ldr	r3, [r4, #-3048]
+	add	r3, r3, #1
+	str	r3, [r4, #-3048]
+	ldr	r3, [sp, #20]
+	add	r3, r3, #1
+	b	.L3747
+.L3692:
+	ldr	r3, [sp, #4]
+	ldr	r2, [sp, #20]
+	ldr	r1, [sp, #24]
+	rsb	r3, r2, r3
+	ldr	r2, [r4, #-3052]
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #-3048]
+	cmp	r3, r2
+	orrcs	r1, r1, #1
+	cmp	r1, #0
+	bne	.L3710
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	beq	.L3710
+.L3712:
+	mov	r3, #0
+	str	r3, [sp, #24]
+	b	.L3684
+.L3710:
+	bl	FtlCacheWriteBack
+	ldr	r2, .L3750
+	mov	r3, #0
+	str	r3, [r2, #-3048]
+	ldr	r3, [sp, #4]
+	cmp	r3, #1
+	bhi	.L3684
+	b	.L3712
+.L3749:
+	mov	r0, r3
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #28]
+	ldr	r5, .L3750+48
+	rsb	r1, r2, r3
+	bl	ftl_do_gc
+	ldrh	r4, [r5]
+	cmp	r4, #5
+	bls	.L3723
+	cmp	r4, #31
+	bhi	.L3718
+	ldr	r3, .L3750+12
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3718
+.L3723:
+	ldr	r6, .L3750
+	ldr	r4, [sp, #4]
+	ldr	r7, .L3750+52
+	sub	r8, r6, #3072
+.L3736:
+	ldrh	r2, [r7]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3716
+	ldrh	r3, [r8]
+	cmp	r3, r2
+	bne	.L3716
+	ldr	r2, .L3750+56
+	ldrh	r2, [r2]
+	cmp	r2, r3
+	bne	.L3716
+	and	r0, r4, #7
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L3716:
+	ldr	r3, .L3750+60
+	mov	r0, #1
+	mov	r1, r0
+	mov	r2, #128
+	strh	r2, [r3]	@ movhi
+	strh	r2, [r3, #-2]	@ movhi
+	bl	ftl_do_gc
+	mov	r0, #0
+	mov	r1, #1
+	bl	ftl_do_gc
+	ldr	r3, [r6, #-2812]
+	cmp	r3, #0
+	bne	.L3718
+	ldrh	r3, [r5]
+	cmp	r3, #2
+	bhi	.L3718
+	add	r4, r4, #1
+	cmp	r4, #256
+	bne	.L3736
+.L3718:
+	mov	r0, #0
+.L3677:
+	ldr	r3, .L3750+4
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3717
+	bl	__stack_chk_fail
+.L3717:
+	add	sp, sp, #108
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3751:
+	.align	2
+.L3750:
+	.word	.LANCHOR2
+	.word	__stack_chk_guard
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2-648
+	.word	.LANCHOR2-600
+	.word	.LANCHOR2-3194
+	.word	.LANCHOR2-3188
+	.word	.LANCHOR2-3190
+	.word	.LC160
+	.word	-3947
+	.word	.LANCHOR2-652
+	.word	.LANCHOR4-368
+	.word	.LANCHOR2-3070
+	.word	.LANCHOR2-3062
+	.fnend
+	.size	ftl_write, .-ftl_write
+	.align	2
+	.global	ftl_vendor_write
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	ip, r1
+	mov	lr, r0
+	mov	r3, r2
+	mov	r1, lr
+	mov	r0, #16
+	mov	r2, ip
+	ldr	lr, [sp], #4
+	b	ftl_write
+	.fnend
+	.size	ftl_vendor_write, .-ftl_vendor_write
+	.align	2
+	.global	ftl_sys_write
+	.type	ftl_sys_write, %function
+ftl_sys_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, ip
+	mov	r0, #16
+	b	ftl_write
+	.fnend
+	.size	ftl_sys_write, .-ftl_sys_write
+	.align	2
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3772
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #68
+	sub	sp, sp, #68
+	ldr	r2, [r3]
+	str	r3, [sp, #4]
+	str	r2, [sp, #60]
+	ldr	r2, .L3772+4
+	ldrb	r2, [r2, #3904]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3755
+	ldr	r8, .L3772+8
+	movw	r3, #270
+	ldr	r4, .L3772+12
+	ldr	r0, .L3772+16
+	ldrh	r7, [r8, r3]
+	sub	r9, r4, #648
+	ldr	r3, [r4, #-2940]
+	sub	r5, r4, #600
+	mov	r6, r7, asl #1
+	mov	r1, r7
+	ldrh	r2, [r3, r6]
+	bl	printk
+	ldrh	r0, [r9]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	r0, [r5]
+	bl	FtlGcRefreshOpenBlock
+	mov	r0, r9
+	bl	allocate_new_data_superblock
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+	movw	r5, #4097
+.L3757:
+	subs	r5, r5, #1
+	beq	.L3761
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	ldr	r3, [r4, #-2940]
+	ldrh	r3, [r3, r6]
+	cmp	r3, #0
+	bne	.L3757
+.L3761:
+	ldr	r3, [r4, #-2940]
+	mov	r1, r7
+	ldr	r0, .L3772+16
+	ldr	r5, .L3772+12
+	ldrh	r2, [r3, r6]
+	bl	printk
+	ldr	r3, [r4, #-2940]
+	ldrh	r10, [r3, r6]
+	cmp	r10, #0
+	bne	.L3759
+	add	r0, sp, #64
+	mov	fp, #36
+	strh	r7, [r0, #-52]!	@ movhi
+	bl	make_superblock
+	sub	r3, r5, #3264
+	ldr	r9, [r5, #-3024]
+	mov	r5, r10
+	ldrh	lr, [r3, #-4]
+	mov	r3, r10
+	mov	ip, r3
+	movw	r10, #65535
+	add	r0, sp, #26
+.L3762:
+	uxth	r2, r3
+	cmp	r2, lr
+	bcs	.L3771
+	ldrh	r2, [r0, #2]!
+	add	r3, r3, #1
+	cmp	r2, r10
+	movne	r2, r2, asl #10
+	mlane	r1, fp, r5, r9
+	addne	r5, r5, #1
+	uxthne	r5, r5
+	stmneib	r1, {r2, ip}
+	strne	ip, [r1, #12]
+	b	.L3762
+.L3771:
+	ldr	r3, [r4, #-2940]
+	mov	r1, r7
+	ldr	r0, .L3772+20
+	ldrh	r2, [r3, r6]
+	bl	printk
+	mov	r1, #0
+	mov	r2, r5
+	ldr	r0, [r4, #-3024]
+	bl	FlashEraseBlocks
+	ldr	r0, [r4, #-3024]
+	mov	r1, #1
+	mov	r2, r5
+	bl	FlashEraseBlocks
+.L3759:
+	movw	r3, #270
+	mvn	r2, #0
+	strh	r2, [r8, r3]	@ movhi
+.L3755:
+	ldr	r3, [sp, #4]
+	ldr	r2, [sp, #60]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3765
+	bl	__stack_chk_fail
+.L3765:
+	add	sp, sp, #68
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3773:
+	.align	2
+.L3772:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LC161
+	.word	.LC162
+	.fnend
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.global	gc_ink_free_return_value
+	.global	check_valid_page_count_table
+	.global	FtlUpdateVaildLpnCount
+	.global	g_ect_tbl_power_up_flush
+	.global	last_cache_match_count
+	.global	power_up_flag
+	.global	g_LowFormat
+	.global	gFtlInitStatus
+	.global	DeviceCapacity
+	.global	ToshibaRefValue
+	.global	Toshiba15RefValue
+	.global	ToshibaA19RefValue
+	.global	SamsungRefValue
+	.global	refValueDefault
+	.global	FbbtBlk
+	.global	random_seed
+	.global	gSlcNandParaInfo
+	.global	gNandParaInfo
+	.global	g_page_map_check_enable
+	.global	g_power_lost_ecc_error_blk
+	.global	g_power_lost_recovery_flag
+	.global	c_mlc_erase_count_value
+	.global	g_recovery_ppa_tbl
+	.global	g_recovery_page_min_ver
+	.global	g_recovery_page_num
+	.global	g_cur_erase_blk
+	.global	g_gc_skip_write_count
+	.global	g_gc_head_data_block_count
+	.global	g_gc_head_data_block
+	.global	g_ftl_nand_free_count
+	.global	g_in_swl_replace
+	.global	g_in_gc_progress
+	.global	g_all_blk_used_slc_mode
+	.global	g_max_erase_count
+	.global	g_totle_sys_slc_erase_count
+	.global	g_totle_slc_erase_count
+	.global	g_min_erase_count
+	.global	g_totle_avg_erase_count
+	.global	g_totle_mlc_erase_count
+	.global	g_totle_l2p_write_count
+	.global	g_totle_cache_write_count
+	.global	g_tmp_data_superblock_id
+	.global	g_totle_read_page_count
+	.global	g_totle_discard_page_count
+	.global	g_totle_read_sector
+	.global	g_totle_write_sector
+	.global	g_totle_write_page_count
+	.global	g_totle_gc_page_count
+	.global	g_gc_blk_index
+	.global	g_gc_merge_free_blk_threshold
+	.global	g_gc_free_blk_threshold
+	.global	g_gc_refresh_block_temp_tbl
+	.global	g_free_slc_blk_num
+	.global	g_gc_refresh_block_temp_num
+	.global	g_gc_bad_block_temp_tbl
+	.global	g_gc_bad_block_gc_index
+	.global	g_gc_bad_block_temp_num
+	.global	g_gc_next_blk_3
+	.global	g_gc_next_blk_2
+	.global	g_gc_next_blk_1
+	.global	g_gc_next_blk
+	.global	g_gc_cur_blk_max_valid_pages
+	.global	g_gc_cur_blk_valid_pages
+	.global	g_gc_page_offset
+	.global	g_gc_blk_num
+	.global	p_gc_blk_tbl
+	.global	p_gc_page_info
+	.global	g_sys_ext_data
+	.global	g_sys_save_data
+	.global	gp_last_act_superblock
+	.global	g_gc_superblock
+	.global	g_gc_temp_superblock
+	.global	g_buffer_superblock
+	.global	g_active_superblock
+	.global	g_num_data_superblocks
+	.global	g_num_free_superblocks
+	.global	p_data_block_list_tail
+	.global	p_data_block_list_head
+	.global	p_free_data_block_list_head
+	.global	p_data_block_list_table
+	.global	g_l2p_last_update_region_id
+	.global	p_l2p_map_buf
+	.global	p_l2p_ram_map
+	.global	g_totle_vendor_block
+	.global	p_vendor_region_ppn_table
+	.global	p_vendor_block_ver_table
+	.global	p_vendor_block_valid_page_count
+	.global	p_vendor_block_table
+	.global	g_totle_map_block
+	.global	p_map_region_ppn_check_table
+	.global	p_map_region_ppn_table
+	.global	p_map_block_ver_table
+	.global	p_map_block_valid_page_count
+	.global	p_map_block_table
+	.global	p_blk_mode_table
+	.global	p_valid_page_count_check_table
+	.global	p_valid_page_count_table
+	.global	g_totle_swl_count
+	.global	p_swl_mul_table
+	.global	p_erase_count_table
+	.global	g_ect_tbl_info_size
+	.global	gp_ect_tbl_info
+	.global	g_gc_num_req
+	.global	c_gc_page_buf_num
+	.global	gp_gc_page_buf_info
+	.global	p_gc_data_buf
+	.global	p_gc_spare_buf
+	.global	p_io_spare_buf
+	.global	p_io_data_buf_1
+	.global	p_io_data_buf_0
+	.global	p_sys_spare_buf
+	.global	p_vendor_data_buf
+	.global	p_sys_data_buf_1
+	.global	p_sys_data_buf
+	.global	g_wr_page_num
+	.global	req_wr_io
+	.global	c_wr_page_buf_num
+	.global	p_wr_io_data_buf
+	.global	p_wr_io_spare_buf
+	.global	p_plane_order_table
+	.global	g_req_cache
+	.global	req_gc_dst
+	.global	req_gc
+	.global	req_erase
+	.global	req_prgm
+	.global	req_read
+	.global	req_sys
+	.global	gVendorBlkInfo
+	.global	gL2pMapInfo
+	.global	gSysFreeQueue
+	.global	gSysInfo
+	.global	gBbtInfo
+	.global	g_flash_read_only_en
+	.global	g_inkDie_check_enable
+	.global	g_SlcPartLbaEndSector
+	.global	g_MaxLbn
+	.global	g_VaildLpn
+	.global	g_MaxLpn
+	.global	g_MaxLbaSector
+	.global	g_GlobalDataVersion
+	.global	g_GlobalSysVersion
+	.global	ftl_gc_temp_power_lost_recovery_flag
+	.global	c_ftl_nand_max_data_blks
+	.global	c_ftl_nand_data_op_blks_per_plane
+	.global	c_ftl_nand_data_blks_per_plane
+	.global	c_ftl_nand_max_sys_blks
+	.global	c_ftl_nand_init_sys_blks_per_plane
+	.global	c_ftl_nand_sys_blks_per_plane
+	.global	c_ftl_vendor_part_size
+	.global	c_ftl_nand_max_vendor_blks
+	.global	c_ftl_nand_max_map_blks
+	.global	c_ftl_nand_map_blks_per_plane
+	.global	c_ftl_nand_vendor_region_num
+	.global	c_ftl_nand_l2pmap_ram_region_num
+	.global	c_ftl_nand_map_region_num
+	.global	c_ftl_nand_totle_phy_blks
+	.global	c_ftl_nand_reserved_blks
+	.global	c_ftl_nand_byte_pre_oob
+	.global	c_ftl_nand_byte_pre_page
+	.global	c_ftl_nand_sec_pre_page_shift
+	.global	c_ftl_nand_sec_pre_page
+	.global	c_ftl_nand_page_pre_super_blk
+	.global	c_ftl_nand_page_pre_slc_blk
+	.global	c_ftl_nand_page_pre_blk
+	.global	c_ftl_nand_bbm_buf_size
+	.global	c_ftl_nand_ext_blk_pre_plane
+	.global	c_ftl_nand_blk_pre_plane
+	.global	c_ftl_nand_planes_num
+	.global	c_ftl_nand_blks_per_die
+	.global	c_ftl_nand_planes_per_die
+	.global	c_ftl_nand_die_num
+	.global	c_ftl_nand_type
+	.global	gMasterTempBuf
+	.global	gMasterInfo
+	.global	gNandcDumpWriteEn
+	.global	gToggleModeClkDiv
+	.global	gBootDdrMode
+	.global	gNandcEccBits
+	.global	gpNandc1
+	.global	gpNandc
+	.global	g_nandc_version_data
+	.global	gNandcVer
+	.global	gNandChipMap
+	.global	gNandIDataBuf
+	.global	idb_flash_slc_mode
+	.global	FlashDdrTunningReadCount
+	.global	FlashWaitBusyScheduleEn
+	.global	gNandPhyInfo
+	.global	gFlashProgCheckSpareBuffer
+	.global	gFlashProgCheckBuffer
+	.global	gFlashSpareBuffer
+	.global	gFlashPageBuffer1
+	.global	gFlashPageBuffer0
+	.global	gpFlashSaveInfo
+	.global	gReadRetryInfo
+	.global	gpNandParaInfo
+	.global	gNandOptPara
+	.global	g_nand_ecc_en
+	.global	g_slc2KBNand
+	.global	gNandIDBResBlkNumSaveInFlash
+	.global	gNandIDBResBlkNum
+	.global	gNandFlashResEndPageAddr
+	.global	gNandFlashInfoBlockAddr
+	.global	gNandFlashIdbBlockAddr
+	.global	gNandFlashInfoBlockEcc
+	.global	gNandFlashIDBEccBits
+	.global	gNandFlashEccBits
+	.global	gNandRandomizer
+	.global	gBlockPageAlignSize
+	.global	gTotleBlock
+	.global	gNandMaxChip
+	.global	gNandMaxDie
+	.global	gFlashInterfaceMode
+	.global	gFlashSlcMode
+	.global	gFlashOnfiModeEn
+	.global	gFlashToggleModeEn
+	.global	gFlashSdrModeEn
+	.global	gMultiPageProgEn
+	.global	gMultiPageReadEn
+	.global	gpReadRetrial
+	.global	mlcPageToSlcPageTbl
+	.global	slcPageToMlcPageTbl
+	.global	DieAddrs
+	.global	gDieOp
+	.global	DieCsIndex
+	.global	read_retry_cur_offset
+	.section	.rodata
+	.align	2
+.LANCHOR3 = . + 0
+.LC0:
+	.byte	60
+	.byte	40
+	.byte	24
+	.byte	16
+	.type	__func__.20209, %object
+	.size	__func__.20209, 11
+__func__.20209:
+	.ascii	"FtlMemInit\000"
+	.space	1
+	.type	__func__.20952, %object
+	.size	__func__.20952, 12
+__func__.20952:
+	.ascii	"FtlCheckVpc\000"
+	.type	__func__.20984, %object
+	.size	__func__.20984, 17
+__func__.20984:
+	.ascii	"FtlDumpBlockInfo\000"
+	.space	3
+	.type	__func__.21003, %object
+	.size	__func__.21003, 16
+__func__.21003:
+	.ascii	"FtlScanAllBlock\000"
+	.type	__func__.21269, %object
+	.size	__func__.21269, 17
+__func__.21269:
+	.ascii	"ftl_scan_all_ppa\000"
+	.space	3
+	.type	__func__.21251, %object
+	.size	__func__.21251, 21
+__func__.21251:
+	.ascii	"FtlVpcCheckAndModify\000"
+	.space	3
+	.type	__func__.20282, %object
+	.size	__func__.20282, 8
+__func__.20282:
+	.ascii	"FtlInit\000"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC1:
+	.ascii	"FlashEraseBlocks pageAddr error %x\012\000"
+.LC2:
+	.ascii	"otp error! %d\000"
+.LC3:
+	.ascii	"rr\000"
+.LC4:
+	.ascii	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\012"
+	.ascii	"\000"
+.LC5:
+	.ascii	"nandc:\000"
+.LC6:
+	.ascii	"%d flReg.d32=%x %x\012\000"
+.LC7:
+	.ascii	"sdr read ok %x ecc=%d\012\000"
+.LC8:
+	.ascii	"sync para %d\012\000"
+.LC9:
+	.ascii	"TOG mode Read error %x %x\012\000"
+.LC10:
+	.ascii	"read retry status %x %x %x\012\000"
+.LC11:
+	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
+.LC12:
+	.ascii	"ECC:%d\012\000"
+.LC13:
+	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
+.LC14:
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+.LC15:
+	.ascii	"Read pageadd=%x  ecc=%x err=%x\012\000"
+.LC16:
+	.ascii	"data:\000"
+.LC17:
+	.ascii	"spare:\000"
+.LC18:
+	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
+.LC19:
+	.ascii	"FLFB:%d %d\012\000"
+.LC20:
+	.ascii	"BBT:\000"
+.LC21:
+	.ascii	"prog error: = %x\012\000"
+.LC22:
+	.ascii	"prog read error: = %x\012\000"
+.LC23:
+	.ascii	"prog read s error: = %x %x %x\012\000"
+.LC24:
+	.ascii	"prog read d error: = %x %x %x\012\000"
+.LC25:
+	.ascii	"FlashMakeFactorBbt %d\012\000"
+.LC26:
+	.ascii	"bad block:%d %d\012\000"
+.LC27:
+	.ascii	"FMFB:%d %d\012\000"
+.LC28:
+	.ascii	"E:bad block:%d\012\000"
+.LC29:
+	.ascii	"FMFB:Save %d %d\012\000"
+.LC30:
+	.ascii	"%s error allocating memory. return -1\012\000"
+.LC31:
+	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
+	.ascii	"\000"
+.LC32:
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+.LC33:
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
+.LC34:
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+.LC35:
+	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+.LC36:
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
+.LC37:
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
+.LC38:
+	.ascii	"FtlMapWritePage error = %x\012\000"
+.LC39:
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+.LC40:
+	.ascii	"page map lost: %x %x\012\000"
+.LC41:
+	.ascii	"region_id = %x phyAddr = %x\012\000"
+.LC42:
+	.ascii	"map_ppn:\000"
+.LC43:
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+.LC44:
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+.LC45:
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+.LC46:
+	.ascii	"%s\012\000"
+.LC47:
+	.ascii	"no ect\000"
+.LC48:
+	.ascii	"...%s enter...\012\000"
+.LC49:
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+.LC50:
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
+.LC51:
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\012"
+	.ascii	"\000"
+.LC52:
+	.ascii	":\000"
+.LC53:
+	.ascii	"Ftlscanalldata = %x\012\000"
+.LC54:
+	.ascii	"scan lpa = %x ppa= %x\012\000"
+.LC55:
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
+.LC56:
+	.ascii	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
+.LC57:
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
+.LC58:
+	.ascii	"Mblk:\000"
+.LC59:
+	.ascii	"L2P:\000"
+.LC60:
+	.ascii	"L2PC:\000"
+.LC61:
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data= %x\012"
+	.ascii	"\000"
+.LC62:
+	.ascii	"superBlkID = %x vpc=%x\012\000"
+.LC63:
+	.ascii	"flashmode = %x pagenum = %x %x\012\000"
+.LC64:
+	.ascii	"blk = %x vpc=%x mode = %x\012\000"
+.LC65:
+	.ascii	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
+	.ascii	"%x\012\000"
+.LC66:
+	.ascii	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
+	.ascii	"%x\012\000"
+.LC67:
+	.ascii	"slc mode\000"
+.LC68:
+	.ascii	"ftl_scan_all_ppa blk %x page %x\012\000"
+.LC69:
+	.ascii	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
+.LC70:
+	.ascii	"%s finished\012\000"
+.LC71:
+	.ascii	"FLASH INFO:\012\000"
+.LC72:
+	.ascii	"FLASH ID: %x\012\000"
+.LC73:
+	.ascii	"Device Capacity: %d MB\012\000"
+.LC74:
+	.ascii	"FMWAIT: %x %x %x %x\012\000"
+.LC75:
+	.ascii	"FTL INFO:\012\000"
+.LC76:
+	.ascii	"g_MaxLpn = 0x%x\012\000"
+.LC77:
+	.ascii	"g_VaildLpn = 0x%x\012\000"
+.LC78:
+	.ascii	"read_page_count = 0x%x\012\000"
+.LC79:
+	.ascii	"discard_page_count = 0x%x\012\000"
+.LC80:
+	.ascii	"write_page_count = 0x%x\012\000"
+.LC81:
+	.ascii	"cache_write_count = 0x%x\012\000"
+.LC82:
+	.ascii	"l2p_write_count = 0x%x\012\000"
+.LC83:
+	.ascii	"gc_page_count = 0x%x\012\000"
+.LC84:
+	.ascii	"totle_write = %d MB\012\000"
+.LC85:
+	.ascii	"totle_read = %d MB\012\000"
+.LC86:
+	.ascii	"GSV = 0x%x\012\000"
+.LC87:
+	.ascii	"GDV = 0x%x\012\000"
+.LC88:
+	.ascii	"bad blk num = %d %d\012\000"
+.LC89:
+	.ascii	"free_superblocks = 0x%x\012\000"
+.LC90:
+	.ascii	"mlc_EC = 0x%x\012\000"
+.LC91:
+	.ascii	"slc_EC = 0x%x\012\000"
+.LC92:
+	.ascii	"avg_EC = 0x%x\012\000"
+.LC93:
+	.ascii	"sys_EC = 0x%x\012\000"
+.LC94:
+	.ascii	"max_EC = 0x%x\012\000"
+.LC95:
+	.ascii	"min_EC = 0x%x\012\000"
+.LC96:
+	.ascii	"PLT = 0x%x\012\000"
+.LC97:
+	.ascii	"POT = 0x%x\012\000"
+.LC98:
+	.ascii	"MaxSector = 0x%x\012\000"
+.LC99:
+	.ascii	"init_sys_blks_pp = 0x%x\012\000"
+.LC100:
+	.ascii	"sys_blks_pp = 0x%x\012\000"
+.LC101:
+	.ascii	"free sysblock = 0x%x\012\000"
+.LC102:
+	.ascii	"data_blks_pp = 0x%x\012\000"
+.LC103:
+	.ascii	"data_op_blks_pp = 0x%x\012\000"
+.LC104:
+	.ascii	"max_data_blks = 0x%x\012\000"
+.LC105:
+	.ascii	"Sys.id = 0x%x\012\000"
+.LC106:
+	.ascii	"Bbt.id = 0x%x\012\000"
+.LC107:
+	.ascii	"ACT.page = 0x%x\012\000"
+.LC108:
+	.ascii	"ACT.plane = 0x%x\012\000"
+.LC109:
+	.ascii	"ACT.id = 0x%x\012\000"
+.LC110:
+	.ascii	"ACT.mode = 0x%x\012\000"
+.LC111:
+	.ascii	"ACT.a_pages = 0x%x\012\000"
+.LC112:
+	.ascii	"ACT VPC = 0x%x\012\000"
+.LC113:
+	.ascii	"BUF.page = 0x%x\012\000"
+.LC114:
+	.ascii	"BUF.plane = 0x%x\012\000"
+.LC115:
+	.ascii	"BUF.id = 0x%x\012\000"
+.LC116:
+	.ascii	"BUF.mode = 0x%x\012\000"
+.LC117:
+	.ascii	"BUF.a_pages = 0x%x\012\000"
+.LC118:
+	.ascii	"BUF VPC = 0x%x\012\000"
+.LC119:
+	.ascii	"TMP.page = 0x%x\012\000"
+.LC120:
+	.ascii	"TMP.plane = 0x%x\012\000"
+.LC121:
+	.ascii	"TMP.id = 0x%x\012\000"
+.LC122:
+	.ascii	"TMP.mode = 0x%x\012\000"
+.LC123:
+	.ascii	"TMP.a_pages = 0x%x\012\000"
+.LC124:
+	.ascii	"GC.page = 0x%x\012\000"
+.LC125:
+	.ascii	"GC.plane = 0x%x\012\000"
+.LC126:
+	.ascii	"GC.id = 0x%x\012\000"
+.LC127:
+	.ascii	"GC.mode = 0x%x\012\000"
+.LC128:
+	.ascii	"GC.a_pages = 0x%x\012\000"
+.LC129:
+	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
+.LC130:
+	.ascii	"Read Err = 0x%x\012\000"
+.LC131:
+	.ascii	"Prog Err = 0x%x\012\000"
+.LC132:
+	.ascii	"gc_free_blk_th= 0x%x\012\000"
+.LC133:
+	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
+.LC134:
+	.ascii	"gc_skip_write_count= 0x%x\012\000"
+.LC135:
+	.ascii	"gc_blk_index= 0x%x\012\000"
+.LC136:
+	.ascii	"free min EC= 0x%x\012\000"
+.LC137:
+	.ascii	"free max EC= 0x%x\012\000"
+.LC138:
+	.ascii	"GC__SB VPC = 0x%x\012\000"
+.LC139:
+	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
+.LC140:
+	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
+.LC141:
+	.ascii	"FTL version: 5.0.57 20190927\000"
+.LC142:
+	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
+	.ascii	"\012\000"
+.LC143:
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
+.LC144:
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+.LC145:
+	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
+.LC146:
+	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
+.LC147:
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+.LC148:
+	.ascii	"decrement_vpc_count %x = %d\012\000"
+.LC149:
+	.ascii	"decrement_vpc_count %x = %d in free list\012\000"
+.LC150:
+	.ascii	"RSB refresh addr %x\012\000"
+.LC151:
+	.ascii	"spuer block %x vpn is 0\012 \000"
+.LC152:
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+.LC153:
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+.LC154:
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+.LC155:
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+.LC156:
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+.LC157:
+	.ascii	"GC des block %x done\012\000"
+.LC158:
+	.ascii	"...%s: no bad block mapping table, format device\012"
+	.ascii	"\000"
+.LC159:
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
+.LC160:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC161:
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+.LC162:
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+	.data
+	.align	2
+.LANCHOR1 = . + 0
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.short	22378
+	.short	1512
+	.short	25245
+	.short	17827
+	.short	25756
+	.short	19440
+	.short	9026
+	.short	10030
+	.short	29528
+	.short	20467
+	.short	29676
+	.short	24432
+	.short	31328
+	.short	6872
+	.short	13426
+	.short	13842
+	.short	8783
+	.short	1108
+	.short	782
+	.short	28837
+	.short	30729
+	.short	9505
+	.short	18676
+	.short	23085
+	.short	18730
+	.short	1085
+	.short	32609
+	.short	14697
+	.short	20858
+	.short	15170
+	.short	30365
+	.short	1607
+	.short	32298
+	.short	4995
+	.short	18905
+	.short	1976
+	.short	9592
+	.short	20204
+	.short	17443
+	.short	13615
+	.short	23330
+	.short	29369
+	.short	13947
+	.short	9398
+	.short	32398
+	.short	8984
+	.short	27600
+	.short	21785
+	.short	6019
+	.short	6311
+	.short	31598
+	.short	30210
+	.short	19327
+	.short	13896
+	.short	11347
+	.short	27545
+	.short	3107
+	.short	26575
+	.short	32270
+	.short	19852
+	.short	20601
+	.short	8349
+	.short	9290
+	.short	29819
+	.short	13579
+	.short	3661
+	.short	28676
+	.short	27331
+	.short	32574
+	.short	8693
+	.short	31253
+	.short	9081
+	.short	5399
+	.short	6842
+	.short	20087
+	.short	5537
+	.short	1274
+	.short	11617
+	.short	9530
+	.short	4866
+	.short	8035
+	.short	23219
+	.short	1178
+	.short	23272
+	.short	7383
+	.short	18944
+	.short	12488
+	.short	12871
+	.short	29340
+	.short	20532
+	.short	11022
+	.short	22514
+	.short	228
+	.short	22363
+	.short	24978
+	.short	14584
+	.short	12138
+	.short	3092
+	.short	17916
+	.short	16863
+	.short	14554
+	.short	31457
+	.short	29474
+	.short	25311
+	.short	24121
+	.short	3684
+	.short	28037
+	.short	22865
+	.short	22839
+	.short	25217
+	.short	13217
+	.short	27186
+	.short	14938
+	.short	11180
+	.short	29754
+	.short	24180
+	.short	15150
+	.short	32455
+	.short	20434
+	.short	23848
+	.short	29983
+	.short	16120
+	.short	14769
+	.short	20041
+	.short	29803
+	.short	28406
+	.short	17598
+	.short	28087
+	.type	gNandParaInfo, %object
+	.size	gNandParaInfo, 32
+gNandParaInfo:
+	.byte	0
+	.byte	0
+	.space	5
+	.byte	0
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2048
+	.short	0
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	NandFlashParaTbl, %object
+	.size	NandFlashParaTbl, 2592
+NandFlashParaTbl:
+	.byte	6
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1064
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	4
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-88
+	.byte	5
+	.byte	-53
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	74
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	2
+	.short	4096
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	70
+	.byte	-123
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-120
+	.byte	5
+	.byte	-58
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	0
+	.byte	39
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.short	512
+	.byte	2
+	.byte	2
+	.short	700
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	-59
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-43
+	.byte	-47
+	.byte	-90
+	.byte	104
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-36
+	.byte	-112
+	.byte	-90
+	.byte	84
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	1024
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1048
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1044
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	52
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	-60
+	.byte	52
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	52
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-46
+	.byte	4
+	.byte	67
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	1
+	.byte	1
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-61
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	473
+	.byte	1
+	.byte	2
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1046
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	473
+	.byte	1
+	.byte	4
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	530
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	281
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-89
+	.byte	66
+	.byte	72
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2092
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	273
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	3
+	.byte	8
+	.byte	80
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	388
+	.byte	2
+	.byte	2
+	.short	1362
+	.short	473
+	.byte	9
+	.byte	8
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	36
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	-119
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-95
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	455
+	.byte	4
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-123
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1505
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-43
+	.byte	-124
+	.byte	50
+	.byte	114
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2056
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2058
+	.short	1489
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	1489
+	.byte	1
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-107
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	85
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2050
+	.short	401
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1056
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2082
+	.short	473
+	.byte	1
+	.byte	65
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	1241
+	.byte	1
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-92
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2138
+	.short	1497
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	473
+	.byte	1
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	126
+	.byte	100
+	.byte	68
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	126
+	.byte	104
+	.byte	68
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	505
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	122
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	409
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	122
+	.byte	88
+	.byte	67
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	441
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-43
+	.byte	-108
+	.byte	118
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	1038
+	.short	281
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	20
+	.byte	118
+	.byte	84
+	.byte	-62
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	1169
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	40
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	NandOptPara, %object
+	.size	NandOptPara, 128
+NandOptPara:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.space	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.space	3
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.space	1
+	.type	ToshibaRefValue, %object
+	.size	ToshibaRefValue, 8
+ToshibaRefValue:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	SamsungRefValue, %object
+	.size	SamsungRefValue, 64
+SamsungRefValue:
+	.byte	-89
+	.byte	-92
+	.byte	-91
+	.byte	-90
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	10
+	.byte	0
+	.byte	0
+	.byte	40
+	.byte	0
+	.byte	-20
+	.byte	-40
+	.byte	-19
+	.byte	-11
+	.byte	-19
+	.byte	-26
+	.byte	10
+	.byte	15
+	.byte	5
+	.byte	0
+	.byte	15
+	.byte	10
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-17
+	.byte	-24
+	.byte	-36
+	.byte	-15
+	.byte	-5
+	.byte	-2
+	.byte	-16
+	.byte	10
+	.byte	0
+	.byte	-5
+	.byte	-20
+	.byte	-48
+	.byte	-30
+	.byte	-48
+	.byte	-62
+	.byte	20
+	.byte	15
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-5
+	.byte	-24
+	.byte	-36
+	.byte	30
+	.byte	20
+	.byte	-5
+	.byte	-20
+	.byte	-5
+	.byte	-1
+	.byte	-5
+	.byte	-8
+	.byte	7
+	.byte	12
+	.byte	2
+	.byte	0
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.type	gSlcNandParaInfo, %object
+	.size	gSlcNandParaInfo, 32
+gSlcNandParaInfo:
+	.byte	2
+	.byte	-104
+	.byte	-15
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	1
+	.byte	4
+	.short	64
+	.byte	1
+	.byte	1
+	.short	1024
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	16
+	.byte	40
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.short	-1
+	.space	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
+	.bss
+	.align	2
+.LANCHOR0 = . + 0
+.LANCHOR2 = . + 8184
+.LANCHOR4 = . + 16368
+	.type	g_slc2KBNand, %object
+	.size	g_slc2KBNand, 1
+g_slc2KBNand:
+	.space	1
+	.type	gNandIDBResBlkNum, %object
+	.size	gNandIDBResBlkNum, 1
+gNandIDBResBlkNum:
+	.space	1
+	.space	2
+	.type	gBlockPageAlignSize, %object
+	.size	gBlockPageAlignSize, 4
+gBlockPageAlignSize:
+	.space	4
+	.type	gNandRandomizer, %object
+	.size	gNandRandomizer, 1
+gNandRandomizer:
+	.space	1
+	.space	3
+	.type	gNandChipMap, %object
+	.size	gNandChipMap, 32
+gNandChipMap:
+	.space	32
+	.type	gNandOptPara, %object
+	.size	gNandOptPara, 32
+gNandOptPara:
+	.space	32
+	.type	slcPageToMlcPageTbl, %object
+	.size	slcPageToMlcPageTbl, 512
+slcPageToMlcPageTbl:
+	.space	512
+	.type	mlcPageToSlcPageTbl, %object
+	.size	mlcPageToSlcPageTbl, 1024
+mlcPageToSlcPageTbl:
+	.space	1024
+	.type	gNandMaxDie, %object
+	.size	gNandMaxDie, 1
+gNandMaxDie:
+	.space	1
+	.type	gNandMaxChip, %object
+	.size	gNandMaxChip, 1
+gNandMaxChip:
+	.space	1
+	.space	2
+	.type	DieCsIndex, %object
+	.size	DieCsIndex, 8
+DieCsIndex:
+	.space	8
+	.type	DieAddrs, %object
+	.size	DieAddrs, 32
+DieAddrs:
+	.space	32
+	.type	gDieOp, %object
+	.size	gDieOp, 128
+gDieOp:
+	.space	128
+	.type	gpNandParaInfo, %object
+	.size	gpNandParaInfo, 4
+gpNandParaInfo:
+	.space	4
+	.type	gTotleBlock, %object
+	.size	gTotleBlock, 2
+gTotleBlock:
+	.space	2
+	.space	2
+	.type	gNandIDataBuf, %object
+	.size	gNandIDataBuf, 2048
+gNandIDataBuf:
+	.space	2048
+	.type	gpNandc, %object
+	.size	gpNandc, 4
+gpNandc:
+	.space	4
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.space	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.space	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.space	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.space	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.space	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.space	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.space	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.space	4
+	.type	gNandPhyInfo, %object
+	.size	gNandPhyInfo, 28
+gNandPhyInfo:
+	.space	28
+	.type	gFlashSlcMode, %object
+	.size	gFlashSlcMode, 1
+gFlashSlcMode:
+	.space	1
+	.type	gNandFlashEccBits, %object
+	.size	gNandFlashEccBits, 1
+gNandFlashEccBits:
+	.space	1
+	.space	2
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.space	4
+	.type	FlashWaitBusyScheduleEn, %object
+	.size	FlashWaitBusyScheduleEn, 4
+FlashWaitBusyScheduleEn:
+	.space	4
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.space	852
+	.type	read_retry_cur_offset, %object
+	.size	read_retry_cur_offset, 4
+read_retry_cur_offset:
+	.space	4
+	.type	gFlashInterfaceMode, %object
+	.size	gFlashInterfaceMode, 1
+gFlashInterfaceMode:
+	.space	1
+	.space	3
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 4
+gFlashPageBuffer0:
+	.space	4
+	.type	idb_flash_slc_mode, %object
+	.size	idb_flash_slc_mode, 4
+idb_flash_slc_mode:
+	.space	4
+	.type	gFlashToggleModeEn, %object
+	.size	gFlashToggleModeEn, 1
+gFlashToggleModeEn:
+	.space	1
+	.space	3
+	.type	gBootDdrMode, %object
+	.size	gBootDdrMode, 4
+gBootDdrMode:
+	.space	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
+	.space	4
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.space	4
+	.type	gMasterTempBuf, %object
+	.size	gMasterTempBuf, 4
+gMasterTempBuf:
+	.space	4
+	.type	gMasterInfo, %object
+	.size	gMasterInfo, 32
+gMasterInfo:
+	.space	32
+	.type	gNandcDumpWriteEn, %object
+	.size	gNandcDumpWriteEn, 4
+gNandcDumpWriteEn:
+	.space	4
+	.type	gNandcEccBits, %object
+	.size	gNandcEccBits, 4
+gNandcEccBits:
+	.space	4
+	.type	gMultiPageProgEn, %object
+	.size	gMultiPageProgEn, 1
+gMultiPageProgEn:
+	.space	1
+	.space	3
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.space	4
+	.type	FlashDdrTunningReadCount, %object
+	.size	FlashDdrTunningReadCount, 4
+FlashDdrTunningReadCount:
+	.space	4
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 4
+gpReadRetrial:
+	.space	4
+	.type	gpFlashSaveInfo, %object
+	.size	gpFlashSaveInfo, 4
+gpFlashSaveInfo:
+	.space	4
+	.type	gNandFlashInfoBlockAddr, %object
+	.size	gNandFlashInfoBlockAddr, 4
+gNandFlashInfoBlockAddr:
+	.space	4
+	.type	gNandFlashIdbBlockAddr, %object
+	.size	gNandFlashIdbBlockAddr, 4
+gNandFlashIdbBlockAddr:
+	.space	4
+	.type	gNandIDBResBlkNumSaveInFlash, %object
+	.size	gNandIDBResBlkNumSaveInFlash, 1
+gNandIDBResBlkNumSaveInFlash:
+	.space	1
+	.type	gNandFlashIDBEccBits, %object
+	.size	gNandFlashIDBEccBits, 1
+gNandFlashIDBEccBits:
+	.space	1
+	.space	2
+	.type	gFlashPageBuffer1, %object
+	.size	gFlashPageBuffer1, 4
+gFlashPageBuffer1:
+	.space	4
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 4
+gFlashSpareBuffer:
+	.space	4
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 4
+gFlashProgCheckBuffer:
+	.space	4
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 4
+gFlashProgCheckSpareBuffer:
+	.space	4
+	.type	g_nand_ecc_en, %object
+	.size	g_nand_ecc_en, 1
+g_nand_ecc_en:
+	.space	1
+	.type	gMultiPageReadEn, %object
+	.size	gMultiPageReadEn, 1
+gMultiPageReadEn:
+	.space	1
+	.space	2
+	.type	FbbtBlk, %object
+	.size	FbbtBlk, 16
+FbbtBlk:
+	.space	16
+	.type	c_ftl_nand_sys_blks_per_plane, %object
+	.size	c_ftl_nand_sys_blks_per_plane, 4
+c_ftl_nand_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_sys_blks, %object
+	.size	c_ftl_nand_max_sys_blks, 4
+c_ftl_nand_max_sys_blks:
+	.space	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.space	2
+	.type	c_ftl_nand_blk_pre_plane, %object
+	.size	c_ftl_nand_blk_pre_plane, 2
+c_ftl_nand_blk_pre_plane:
+	.space	2
+	.type	c_ftl_nand_max_data_blks, %object
+	.size	c_ftl_nand_max_data_blks, 4
+c_ftl_nand_max_data_blks:
+	.space	4
+	.type	c_ftl_nand_totle_phy_blks, %object
+	.size	c_ftl_nand_totle_phy_blks, 4
+c_ftl_nand_totle_phy_blks:
+	.space	4
+	.type	c_ftl_nand_type, %object
+	.size	c_ftl_nand_type, 2
+c_ftl_nand_type:
+	.space	2
+	.type	c_ftl_nand_die_num, %object
+	.size	c_ftl_nand_die_num, 2
+c_ftl_nand_die_num:
+	.space	2
+	.type	c_ftl_nand_planes_per_die, %object
+	.size	c_ftl_nand_planes_per_die, 2
+c_ftl_nand_planes_per_die:
+	.space	2
+	.space	2
+	.type	p_plane_order_table, %object
+	.size	p_plane_order_table, 32
+p_plane_order_table:
+	.space	32
+	.type	c_mlc_erase_count_value, %object
+	.size	c_mlc_erase_count_value, 2
+c_mlc_erase_count_value:
+	.space	2
+	.type	c_ftl_nand_ext_blk_pre_plane, %object
+	.size	c_ftl_nand_ext_blk_pre_plane, 2
+c_ftl_nand_ext_blk_pre_plane:
+	.space	2
+	.type	c_ftl_vendor_part_size, %object
+	.size	c_ftl_vendor_part_size, 2
+c_ftl_vendor_part_size:
+	.space	2
+	.type	c_ftl_nand_blks_per_die, %object
+	.size	c_ftl_nand_blks_per_die, 2
+c_ftl_nand_blks_per_die:
+	.space	2
+	.type	c_ftl_nand_page_pre_blk, %object
+	.size	c_ftl_nand_page_pre_blk, 2
+c_ftl_nand_page_pre_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_slc_blk, %object
+	.size	c_ftl_nand_page_pre_slc_blk, 2
+c_ftl_nand_page_pre_slc_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_super_blk, %object
+	.size	c_ftl_nand_page_pre_super_blk, 2
+c_ftl_nand_page_pre_super_blk:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page, %object
+	.size	c_ftl_nand_sec_pre_page, 2
+c_ftl_nand_sec_pre_page:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page_shift, %object
+	.size	c_ftl_nand_sec_pre_page_shift, 2
+c_ftl_nand_sec_pre_page_shift:
+	.space	2
+	.type	c_ftl_nand_byte_pre_page, %object
+	.size	c_ftl_nand_byte_pre_page, 2
+c_ftl_nand_byte_pre_page:
+	.space	2
+	.type	c_ftl_nand_byte_pre_oob, %object
+	.size	c_ftl_nand_byte_pre_oob, 2
+c_ftl_nand_byte_pre_oob:
+	.space	2
+	.type	c_ftl_nand_reserved_blks, %object
+	.size	c_ftl_nand_reserved_blks, 2
+c_ftl_nand_reserved_blks:
+	.space	2
+	.type	DeviceCapacity, %object
+	.size	DeviceCapacity, 4
+DeviceCapacity:
+	.space	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.space	2
+	.type	c_ftl_nand_vendor_region_num, %object
+	.size	c_ftl_nand_vendor_region_num, 2
+c_ftl_nand_vendor_region_num:
+	.space	2
+	.type	c_ftl_nand_map_blks_per_plane, %object
+	.size	c_ftl_nand_map_blks_per_plane, 2
+c_ftl_nand_map_blks_per_plane:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_map_blks, %object
+	.size	c_ftl_nand_max_map_blks, 4
+c_ftl_nand_max_map_blks:
+	.space	4
+	.type	c_ftl_nand_init_sys_blks_per_plane, %object
+	.size	c_ftl_nand_init_sys_blks_per_plane, 4
+c_ftl_nand_init_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_map_region_num, %object
+	.size	c_ftl_nand_map_region_num, 2
+c_ftl_nand_map_region_num:
+	.space	2
+	.type	c_ftl_nand_l2pmap_ram_region_num, %object
+	.size	c_ftl_nand_l2pmap_ram_region_num, 2
+c_ftl_nand_l2pmap_ram_region_num:
+	.space	2
+	.type	g_page_map_check_enable, %object
+	.size	g_page_map_check_enable, 2
+g_page_map_check_enable:
+	.space	2
+	.type	g_free_slc_blk_num, %object
+	.size	g_free_slc_blk_num, 2
+g_free_slc_blk_num:
+	.space	2
+	.type	g_SlcPartLbaEndSector, %object
+	.size	g_SlcPartLbaEndSector, 4
+g_SlcPartLbaEndSector:
+	.space	4
+	.type	g_all_blk_used_slc_mode, %object
+	.size	g_all_blk_used_slc_mode, 4
+g_all_blk_used_slc_mode:
+	.space	4
+	.type	g_GlobalSysVersion, %object
+	.size	g_GlobalSysVersion, 4
+g_GlobalSysVersion:
+	.space	4
+	.type	g_GlobalDataVersion, %object
+	.size	g_GlobalDataVersion, 4
+g_GlobalDataVersion:
+	.space	4
+	.type	g_totle_gc_page_count, %object
+	.size	g_totle_gc_page_count, 4
+g_totle_gc_page_count:
+	.space	4
+	.type	g_totle_write_page_count, %object
+	.size	g_totle_write_page_count, 4
+g_totle_write_page_count:
+	.space	4
+	.type	g_totle_discard_page_count, %object
+	.size	g_totle_discard_page_count, 4
+g_totle_discard_page_count:
+	.space	4
+	.type	g_totle_cache_write_count, %object
+	.size	g_totle_cache_write_count, 4
+g_totle_cache_write_count:
+	.space	4
+	.type	g_totle_l2p_write_count, %object
+	.size	g_totle_l2p_write_count, 4
+g_totle_l2p_write_count:
+	.space	4
+	.type	g_totle_read_page_count, %object
+	.size	g_totle_read_page_count, 4
+g_totle_read_page_count:
+	.space	4
+	.type	g_totle_mlc_erase_count, %object
+	.size	g_totle_mlc_erase_count, 4
+g_totle_mlc_erase_count:
+	.space	4
+	.type	g_totle_slc_erase_count, %object
+	.size	g_totle_slc_erase_count, 4
+g_totle_slc_erase_count:
+	.space	4
+	.type	g_totle_sys_slc_erase_count, %object
+	.size	g_totle_sys_slc_erase_count, 4
+g_totle_sys_slc_erase_count:
+	.space	4
+	.type	g_max_erase_count, %object
+	.size	g_max_erase_count, 4
+g_max_erase_count:
+	.space	4
+	.type	g_min_erase_count, %object
+	.size	g_min_erase_count, 4
+g_min_erase_count:
+	.space	4
+	.type	g_in_gc_progress, %object
+	.size	g_in_gc_progress, 4
+g_in_gc_progress:
+	.space	4
+	.type	g_in_swl_replace, %object
+	.size	g_in_swl_replace, 4
+g_in_swl_replace:
+	.space	4
+	.type	g_gc_head_data_block, %object
+	.size	g_gc_head_data_block, 4
+g_gc_head_data_block:
+	.space	4
+	.type	g_gc_head_data_block_count, %object
+	.size	g_gc_head_data_block_count, 4
+g_gc_head_data_block_count:
+	.space	4
+	.type	g_gc_skip_write_count, %object
+	.size	g_gc_skip_write_count, 4
+g_gc_skip_write_count:
+	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
+	.type	g_gc_next_blk, %object
+	.size	g_gc_next_blk, 2
+g_gc_next_blk:
+	.space	2
+	.type	g_gc_next_blk_1, %object
+	.size	g_gc_next_blk_1, 2
+g_gc_next_blk_1:
+	.space	2
+	.type	g_gc_next_blk_2, %object
+	.size	g_gc_next_blk_2, 2
+g_gc_next_blk_2:
+	.space	2
+	.type	g_gc_next_blk_3, %object
+	.size	g_gc_next_blk_3, 2
+g_gc_next_blk_3:
+	.space	2
+	.type	g_gc_free_blk_threshold, %object
+	.size	g_gc_free_blk_threshold, 2
+g_gc_free_blk_threshold:
+	.space	2
+	.type	g_gc_merge_free_blk_threshold, %object
+	.size	g_gc_merge_free_blk_threshold, 2
+g_gc_merge_free_blk_threshold:
+	.space	2
+	.type	g_gc_blk_index, %object
+	.size	g_gc_blk_index, 2
+g_gc_blk_index:
+	.space	2
+	.type	g_gc_bad_block_temp_num, %object
+	.size	g_gc_bad_block_temp_num, 2
+g_gc_bad_block_temp_num:
+	.space	2
+	.type	g_gc_refresh_block_temp_num, %object
+	.size	g_gc_refresh_block_temp_num, 2
+g_gc_refresh_block_temp_num:
+	.space	2
+	.type	g_gc_bad_block_gc_index, %object
+	.size	g_gc_bad_block_gc_index, 2
+g_gc_bad_block_gc_index:
+	.space	2
+	.type	c_wr_page_buf_num, %object
+	.size	c_wr_page_buf_num, 4
+c_wr_page_buf_num:
+	.space	4
+	.type	g_wr_page_num, %object
+	.size	g_wr_page_num, 4
+g_wr_page_num:
+	.space	4
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 4
+p_gc_blk_tbl:
+	.space	4
+	.type	p_gc_page_info, %object
+	.size	p_gc_page_info, 4
+p_gc_page_info:
+	.space	4
+	.type	req_read, %object
+	.size	req_read, 4
+req_read:
+	.space	4
+	.type	req_gc_dst, %object
+	.size	req_gc_dst, 4
+req_gc_dst:
+	.space	4
+	.type	req_prgm, %object
+	.size	req_prgm, 4
+req_prgm:
+	.space	4
+	.type	req_erase, %object
+	.size	req_erase, 4
+req_erase:
+	.space	4
+	.type	req_gc, %object
+	.size	req_gc, 4
+req_gc:
+	.space	4
+	.type	req_wr_io, %object
+	.size	req_wr_io, 4
+req_wr_io:
+	.space	4
+	.type	c_gc_page_buf_num, %object
+	.size	c_gc_page_buf_num, 4
+c_gc_page_buf_num:
+	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
+	.type	p_sys_data_buf_1, %object
+	.size	p_sys_data_buf_1, 4
+p_sys_data_buf_1:
+	.space	4
+	.type	p_vendor_data_buf, %object
+	.size	p_vendor_data_buf, 4
+p_vendor_data_buf:
+	.space	4
+	.type	p_gc_data_buf, %object
+	.size	p_gc_data_buf, 4
+p_gc_data_buf:
+	.space	4
+	.type	p_wr_io_data_buf, %object
+	.size	p_wr_io_data_buf, 4
+p_wr_io_data_buf:
+	.space	4
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 4
+p_io_data_buf_0:
+	.space	4
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 4
+p_io_data_buf_1:
+	.space	4
+	.type	gp_gc_page_buf_info, %object
+	.size	gp_gc_page_buf_info, 4
+gp_gc_page_buf_info:
+	.space	4
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 4
+p_sys_spare_buf:
+	.space	4
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 4
+p_io_spare_buf:
+	.space	4
+	.type	p_gc_spare_buf, %object
+	.size	p_gc_spare_buf, 4
+p_gc_spare_buf:
+	.space	4
+	.type	p_wr_io_spare_buf, %object
+	.size	p_wr_io_spare_buf, 4
+p_wr_io_spare_buf:
+	.space	4
+	.type	g_ect_tbl_info_size, %object
+	.size	g_ect_tbl_info_size, 2
+g_ect_tbl_info_size:
+	.space	2
+	.space	2
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 4
+p_swl_mul_table:
+	.space	4
+	.type	gp_ect_tbl_info, %object
+	.size	gp_ect_tbl_info, 4
+gp_ect_tbl_info:
+	.space	4
+	.type	p_erase_count_table, %object
+	.size	p_erase_count_table, 4
+p_erase_count_table:
+	.space	4
+	.type	p_valid_page_count_check_table, %object
+	.size	p_valid_page_count_check_table, 4
+p_valid_page_count_check_table:
+	.space	4
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 4
+p_valid_page_count_table:
+	.space	4
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 4
+p_map_block_table:
+	.space	4
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 4
+p_map_block_valid_page_count:
+	.space	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 4
+p_blk_mode_table:
+	.space	4
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 4
+p_vendor_block_table:
+	.space	4
+	.type	p_vendor_block_valid_page_count, %object
+	.size	p_vendor_block_valid_page_count, 4
+p_vendor_block_valid_page_count:
+	.space	4
+	.type	p_vendor_block_ver_table, %object
+	.size	p_vendor_block_ver_table, 4
+p_vendor_block_ver_table:
+	.space	4
+	.type	p_vendor_region_ppn_table, %object
+	.size	p_vendor_region_ppn_table, 4
+p_vendor_region_ppn_table:
+	.space	4
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 4
+p_map_region_ppn_table:
+	.space	4
+	.type	p_map_region_ppn_check_table, %object
+	.size	p_map_region_ppn_check_table, 4
+p_map_region_ppn_check_table:
+	.space	4
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 4
+p_map_block_ver_table:
+	.space	4
+	.type	p_l2p_ram_map, %object
+	.size	p_l2p_ram_map, 4
+p_l2p_ram_map:
+	.space	4
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 4
+p_l2p_map_buf:
+	.space	4
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 4
+p_data_block_list_table:
+	.space	4
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.space	2
+	.space	2
+	.type	gBbtInfo, %object
+	.size	gBbtInfo, 60
+gBbtInfo:
+	.space	60
+	.type	g_totle_vendor_block, %object
+	.size	g_totle_vendor_block, 2
+g_totle_vendor_block:
+	.space	2
+	.space	2
+	.type	g_MaxLpn, %object
+	.size	g_MaxLpn, 4
+g_MaxLpn:
+	.space	4
+	.type	g_flash_read_only_en, %object
+	.size	g_flash_read_only_en, 4
+g_flash_read_only_en:
+	.space	4
+	.type	req_sys, %object
+	.size	req_sys, 36
+req_sys:
+	.space	36
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.space	2056
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.space	48
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 4
+p_data_block_list_head:
+	.space	4
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 4
+p_data_block_list_tail:
+	.space	4
+	.type	g_num_data_superblocks, %object
+	.size	g_num_data_superblocks, 2
+g_num_data_superblocks:
+	.space	2
+	.space	2
+	.type	p_free_data_block_list_head, %object
+	.size	p_free_data_block_list_head, 4
+p_free_data_block_list_head:
+	.space	4
+	.type	g_num_free_superblocks, %object
+	.size	g_num_free_superblocks, 2
+g_num_free_superblocks:
+	.space	2
+	.space	2
+	.type	g_active_superblock, %object
+	.size	g_active_superblock, 48
+g_active_superblock:
+	.space	48
+	.type	g_buffer_superblock, %object
+	.size	g_buffer_superblock, 48
+g_buffer_superblock:
+	.space	48
+	.type	g_gc_temp_superblock, %object
+	.size	g_gc_temp_superblock, 48
+g_gc_temp_superblock:
+	.space	48
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 44
+gL2pMapInfo:
+	.space	44
+	.type	g_l2p_last_update_region_id, %object
+	.size	g_l2p_last_update_region_id, 2
+g_l2p_last_update_region_id:
+	.space	2
+	.space	2
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
+	.type	FtlUpdateVaildLpnCount, %object
+	.size	FtlUpdateVaildLpnCount, 2
+FtlUpdateVaildLpnCount:
+	.space	2
+	.space	2
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
+	.space	4
+	.type	gSysInfo, %object
+	.size	gSysInfo, 16
+gSysInfo:
+	.space	16
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.space	2
+	.space	2
+	.type	check_valid_page_count_table, %object
+	.size	check_valid_page_count_table, 8192
+check_valid_page_count_table:
+	.space	8192
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.space	4
+	.type	c_ftl_nand_data_op_blks_per_plane, %object
+	.size	c_ftl_nand_data_op_blks_per_plane, 2
+c_ftl_nand_data_op_blks_per_plane:
+	.space	2
+	.space	2
+	.type	g_gc_superblock, %object
+	.size	g_gc_superblock, 48
+g_gc_superblock:
+	.space	48
+	.type	g_sys_ext_data, %object
+	.size	g_sys_ext_data, 512
+g_sys_ext_data:
+	.space	512
+	.type	g_totle_write_sector, %object
+	.size	g_totle_write_sector, 4
+g_totle_write_sector:
+	.space	4
+	.type	g_totle_read_sector, %object
+	.size	g_totle_read_sector, 4
+g_totle_read_sector:
+	.space	4
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.space	2
+	.space	2
+	.type	g_totle_avg_erase_count, %object
+	.size	g_totle_avg_erase_count, 4
+g_totle_avg_erase_count:
+	.space	4
+	.type	g_gc_num_req, %object
+	.size	g_gc_num_req, 4
+g_gc_num_req:
+	.space	4
+	.type	g_req_cache, %object
+	.size	g_req_cache, 4
+g_req_cache:
+	.space	4
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.space	2
+	.space	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.space	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.space	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.space	4
+	.type	g_gc_blk_num, %object
+	.size	g_gc_blk_num, 2
+g_gc_blk_num:
+	.space	2
+	.type	g_gc_page_offset, %object
+	.size	g_gc_page_offset, 2
+g_gc_page_offset:
+	.space	2
+	.type	g_gc_bad_block_temp_tbl, %object
+	.size	g_gc_bad_block_temp_tbl, 34
+g_gc_bad_block_temp_tbl:
+	.space	34
+	.type	g_power_lost_ecc_error_blk, %object
+	.size	g_power_lost_ecc_error_blk, 2
+g_power_lost_ecc_error_blk:
+	.space	2
+	.type	g_power_lost_recovery_flag, %object
+	.size	g_power_lost_recovery_flag, 2
+g_power_lost_recovery_flag:
+	.space	2
+	.space	2
+	.type	g_recovery_page_num, %object
+	.size	g_recovery_page_num, 4
+g_recovery_page_num:
+	.space	4
+	.type	g_recovery_ppa_tbl, %object
+	.size	g_recovery_ppa_tbl, 128
+g_recovery_ppa_tbl:
+	.space	128
+	.type	gc_ink_free_return_value, %object
+	.size	gc_ink_free_return_value, 2
+gc_ink_free_return_value:
+	.space	2
+	.type	g_gc_cur_blk_valid_pages, %object
+	.size	g_gc_cur_blk_valid_pages, 2
+g_gc_cur_blk_valid_pages:
+	.space	2
+	.type	g_gc_cur_blk_max_valid_pages, %object
+	.size	g_gc_cur_blk_max_valid_pages, 2
+g_gc_cur_blk_max_valid_pages:
+	.space	2
+	.space	2
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 4
+gp_last_act_superblock:
+	.space	4
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.space	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.space	4
+	.type	g_ftl_nand_free_count, %object
+	.size	g_ftl_nand_free_count, 4
+g_ftl_nand_free_count:
+	.space	4
+	.type	last_cache_match_count, %object
+	.size	last_cache_match_count, 4
+last_cache_match_count:
+	.space	4
+	.type	g_gc_refresh_block_temp_tbl, %object
+	.size	g_gc_refresh_block_temp_tbl, 34
+g_gc_refresh_block_temp_tbl:
+	.space	34
+	.space	2
+	.type	gToggleModeClkDiv, %object
+	.size	gToggleModeClkDiv, 4
+gToggleModeClkDiv:
+	.space	4
+	.type	gpNandc1, %object
+	.size	gpNandc1, 4
+gpNandc1:
+	.space	4
+	.type	gNandFlashResEndPageAddr, %object
+	.size	gNandFlashResEndPageAddr, 4
+gNandFlashResEndPageAddr:
+	.space	4
+	.type	gNandFlashInfoBlockEcc, %object
+	.size	gNandFlashInfoBlockEcc, 1
+gNandFlashInfoBlockEcc:
+	.space	1
+	.type	gFlashOnfiModeEn, %object
+	.size	gFlashOnfiModeEn, 1
+gFlashOnfiModeEn:
+	.space	1
+	.type	gFlashSdrModeEn, %object
+	.size	gFlashSdrModeEn, 1
+gFlashSdrModeEn:
+	.space	1
diff --git a/drivers/rk_nand/rk_ftlv5_arm64.S b/drivers/rk_nand/rk_ftlv5_arm64.S
index ca9329b72fa8..945b5dc95749 100644
--- a/drivers/rk_nand/rk_ftlv5_arm64.S
+++ b/drivers/rk_nand/rk_ftlv5_arm64.S
@@ -9,7 +9,7 @@
  * function: rk ftl v5 for rockchip soc base on arm v8 to support MLC NAND.
  */
 	.cpu generic+fp+simd
-	.file	"rk_ftlv5_arm_v8.S"
+	.file	"rk_ftlv5_arm64.S"
 #APP
 	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
 	.equ	.L__reg_num_x\num, \num
@@ -8561,36 +8561,42 @@ FtlBbtInfoPrint:
 	.global	FtlBbt2Bitmap
 	.type	FtlBbt2Bitmap, %function
 FtlBbt2Bitmap:
-	stp	x29, x30, [sp, -32]!
+	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	mov	x20, x0
-	adrp	x0, .LANCHOR2+1296
-	mov	x19, x1
-	ldrh	w2, [x0,#:lo12:.LANCHOR2+1296]
+	adrp	x19, .LANCHOR2
+	str	x21, [sp,32]
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	x21, x0
+	mov	x20, x1
 	mov	x0, x1
 	mov	w1, 0
+	ldrh	w2, [x19,1296]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	mov	x3, 0
 	mov	w0, 65535
 	mov	w5, 1
 .L1449:
-	ldrh	w2, [x20,x3]
+	ldrh	w2, [x21,x3]
 	cmp	w2, w0
 	beq	.L1447
 	ubfx	x4, x2, 5, 11
-	add	x3, x3, 2
-	lsl	x4, x4, 2
 	lsl	w2, w5, w2
+	lsl	x4, x4, 2
+	add	x3, x3, 2
 	cmp	x3, 1024
-	ldr	w1, [x19,x4]
+	ldr	w1, [x20,x4]
 	orr	w2, w1, w2
-	str	w2, [x19,x4]
+	str	w2, [x20,x4]
+	ldrh	w2, [x19,1310]
+	add	w2, w2, 1
+	strh	w2, [x19,1310]
 	bne	.L1449
 .L1447:
 	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 32
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
 	ret
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	2
@@ -11347,7 +11353,7 @@ FtlVpcTblFlush:
 	ldrh	w1, [x19,3618]
 	ldrb	w2, [x19,3622]
 	str	w0, [x19,3528]
-	mov	w0, 86
+	mov	w0, 87
 	orr	w1, w2, w1, lsl 6
 	strh	w1, [x20,16]
 	ldrh	w1, [x19,3664]
@@ -13035,27 +13041,28 @@ make_superblock:
 	.global	FtlLoadSysInfo
 	.type	FtlLoadSysInfo, %function
 FtlLoadSysInfo:
-	stp	x29, x30, [sp, -96]!
+	sub	sp, sp, #128
 	mov	w1, 0
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR2
-	add	x19, x20, :lo12:.LANCHOR2
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	add	x22, x19, 1416
-	add	x23, x19, 3904
-	ldr	x0, [x19,1056]
-	ldrh	w2, [x19,764]
-	str	x0, [x22,8]
-	ldr	x0, [x19,1120]
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x21, x22, [sp,48]
+	adrp	x22, .LANCHOR2
+	add	x21, x22, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,32]
+	add	x19, x21, 1416
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	ldr	x0, [x21,1056]
+	add	x23, x21, 3904
+	str	x0, [x19,8]
+	ldrh	w2, [x21,764]
+	ldr	x0, [x21,1120]
+	str	x0, [x19,16]
 	lsl	w2, w2, 1
-	str	x0, [x22,16]
-	ldr	x0, [x19,1192]
+	ldr	x0, [x21,1192]
 	bl	ftl_memset
-	ldrh	w0, [x19,3904]
+	ldrh	w0, [x21,3904]
 	mov	w1, 65535
 	cmp	w0, w1
 	bne	.L2089
@@ -13064,67 +13071,82 @@ FtlLoadSysInfo:
 	b	.L2090
 .L2089:
 	mov	w1, 1
-	adrp	x24, .LANCHOR0
-	mov	w25, 61604
-	mov	w26, -1
+	adrp	x26, .LC60
+	add	x26, x26, :lo12:.LC60
 	bl	FtlGetLastWrittenPage
-	ldrsh	w28, [x19,3904]
-	sxth	w21, w0
+	ldrsh	w25, [x21,3904]
+	sxth	w20, w0
 	add	w0, w0, 1
 	strh	w0, [x23,2]
 .L2091:
 	adrp	x23, .LANCHOR0
-	tbnz	w21, #31, .L2099
-	orr	w0, w21, w28, lsl 10
+	tbnz	w20, #31, .L2099
+	orr	w0, w20, w25, lsl 10
 	mov	w1, 1
-	str	w0, [x22,4]
+	str	w0, [x19,4]
 	mov	w2, w1
-	ldr	x0, [x19,1056]
-	str	x0, [x22,8]
-	mov	x0, x22
+	ldr	x0, [x21,1056]
+	str	x0, [x19,8]
+	mov	x0, x19
 	bl	FlashReadPages
-	add	x0, x24, :lo12:.LANCHOR0
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,88]
 	cbz	w0, .L2092
-	ldr	x0, [x22,16]
-	ldr	w27, [x0,12]
-	cbz	w27, .L2092
-	ldr	x0, [x22,8]
-	ldrh	w1, [x19,834]
+	ldr	x24, [x19,16]
+	ldr	w7, [x24,12]
+	cbz	w7, .L2092
+	ldr	x28, [x19,8]
+	ldrh	w1, [x21,834]
+	mov	x0, x28
+	str	x7, [x29,104]
 	bl	js_hash
-	cmp	w27, w0
+	ldr	x7, [x29,104]
+	cmp	w7, w0
 	beq	.L2092
-	cbnz	w21, .L2093
-	ldrh	w0, [x19,3908]
-	cmp	w28, w0
+	cbnz	w20, .L2093
+	ldrh	w0, [x21,3908]
+	cmp	w25, w0
 	beq	.L2093
-	sxth	w28, w0
-	ldrh	w21, [x19,826]
+	ldr	w0, [x28]
+	str	w0, [sp]
+	mov	x0, x26
+	ldrh	w1, [x21,3904]
+	ldr	w2, [x19]
+	ldr	w3, [x19,4]
+	ldr	w4, [x24]
+	ldr	w5, [x24,4]
+	ldr	w6, [x24,8]
+	bl	printk
+	ldrsh	w25, [x21,3908]
+	ldrh	w20, [x21,826]
 	b	.L2095
 .L2093:
-	str	w26, [x22]
+	mov	w0, -1
+	str	w0, [x19]
 .L2092:
-	ldr	w0, [x22]
+	ldr	w0, [x19]
 	cmn	w0, #1
 	beq	.L2095
-	ldr	x0, [x19,1056]
+	ldr	x0, [x21,1056]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
 	bne	.L2095
-	ldr	x0, [x19,1120]
-	ldrh	w0, [x0]
-	cmp	w0, w25
+	ldr	x0, [x21,1120]
+	ldrh	w1, [x0]
+	mov	w0, 61604
+	cmp	w1, w0
 	bne	.L2095
 .L2099:
-	add	x19, x20, :lo12:.LANCHOR2
+	add	x19, x22, :lo12:.LANCHOR2
 	mov	w2, 48
-	add	x21, x19, 1416
+	add	x20, x19, 1416
 	add	x0, x19, 3528
-	ldr	x1, [x21,8]
+	ldr	x1, [x20,8]
 	bl	ftl_memcpy
-	ldr	x1, [x21,8]
+	ldr	x1, [x20,8]
 	ldrh	w2, [x19,764]
 	ldr	x0, [x19,1192]
 	add	x1, x1, 48
@@ -13132,7 +13154,7 @@ FtlLoadSysInfo:
 	bl	ftl_memcpy
 	ldrh	w2, [x19,764]
 	add	x0, x23, :lo12:.LANCHOR0
-	ldr	x3, [x21,8]
+	ldr	x3, [x20,8]
 	uxth	x1, w2
 	ldr	x0, [x0,16]
 	add	x1, x1, 24
@@ -13144,7 +13166,7 @@ FtlLoadSysInfo:
 	ldrh	w0, [x19,864]
 	cbz	w0, .L2097
 	ldrh	w0, [x19,764]
-	ldr	x3, [x21,8]
+	ldr	x3, [x20,8]
 	lsr	w1, w0, 3
 	ldrh	w2, [x19,860]
 	add	w1, w1, w0, lsl 1
@@ -13156,55 +13178,54 @@ FtlLoadSysInfo:
 	bl	ftl_memcpy
 	b	.L2097
 .L2095:
-	sub	w21, w21, #1
-	sxth	w21, w21
+	sub	w20, w20, #1
+	sxth	w20, w20
 	b	.L2091
 .L2097:
-	add	x0, x20, :lo12:.LANCHOR2
-	mov	w2, 19539
-	movk	w2, 0x4654, lsl 16
+	add	x0, x22, :lo12:.LANCHOR2
+	mov	w1, 19539
+	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0,3528]
-	cmp	w3, w2
+	cmp	w3, w1
 	bne	.L2100
 	ldrb	w3, [x0,3538]
-	ldrh	w2, [x0,778]
+	ldrh	w1, [x0,778]
 	ldrh	w5, [x0,3536]
 	strh	w5, [x0,3910]
-	cmp	w3, w2
+	cmp	w3, w1
 	bne	.L2100
 	ldrh	w3, [x0,824]
 	add	x23, x23, :lo12:.LANCHOR0
-	ldrh	w2, [x0,830]
+	ldrh	w1, [x0,830]
 	adrp	x6, .LANCHOR4
 	add	x4, x6, :lo12:.LANCHOR4
 	mov	x19, x6
 	mul	w3, w3, w5
 	str	w3, [x0,1404]
 	str	w5, [x4,3416]
-	mul	w3, w3, w2
+	mul	w3, w3, w1
 	str	w3, [x23,4048]
-	ldrh	w2, [x0,1310]
+	ldrh	w1, [x0,1310]
 	ldr	w3, [x0,768]
 	strh	wzr, [x4,3426]
-	sub	w2, w3, w2
+	sub	w1, w3, w1
 	ldrh	w3, [x0,756]
-	sub	w2, w2, w5
+	sub	w1, w1, w5
 	strb	wzr, [x4,3430]
 	strb	wzr, [x4,3432]
-	udiv	w2, w2, w3
+	udiv	w1, w1, w3
 	ldrh	w3, [x0,3544]
-	strh	w2, [x4,3420]
+	strh	w1, [x4,3420]
 	lsr	w7, w3, 6
 	and	w3, w3, 63
 	strb	w3, [x0,3622]
 	ldrb	w3, [x0,3539]
 	strb	w3, [x0,3624]
-	mov	w3, -1
-	strh	w3, [x4,3424]
 	ldrh	w3, [x0,3546]
+	mov	w1, -1
 	strh	w3, [x0,3664]
 	ldrh	w3, [x0,3548]
-	ldrh	w5, [x0,3542]
+	strh	w1, [x4,3424]
 	lsr	w4, w3, 6
 	and	w3, w3, 63
 	strb	w3, [x0,3670]
@@ -13213,6 +13234,7 @@ FtlLoadSysInfo:
 	ldrh	w3, [x0,3550]
 	strh	w3, [x0,3712]
 	ldrh	w3, [x0,3552]
+	ldrh	w5, [x0,3542]
 	strh	w4, [x0,3666]
 	lsr	w4, w3, 6
 	and	w3, w3, 63
@@ -13222,10 +13244,10 @@ FtlLoadSysInfo:
 	strh	w4, [x0,3714]
 	ldrb	w3, [x0,3541]
 	strb	w3, [x0,3720]
-	ldr	w2, [x0,3560]
-	str	w2, [x0,908]
-	ldr	w1, [x0,3568]
+	ldr	w1, [x0,3560]
+	str	w1, [x0,908]
 	ldr	w2, [x0,876]
+	ldr	w1, [x0,3568]
 	str	wzr, [x0,884]
 	str	wzr, [x0,888]
 	cmp	w1, w2
@@ -13237,7 +13259,7 @@ FtlLoadSysInfo:
 	bls	.L2101
 	str	w1, [x0,876]
 .L2101:
-	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x22, :lo12:.LANCHOR2
 	ldr	w1, [x0,3564]
 	ldr	w2, [x0,880]
 	cmp	w1, w2
@@ -13247,11 +13269,11 @@ FtlLoadSysInfo:
 	mov	w0, 65535
 	cmp	w5, w0
 	beq	.L2103
-	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x22, :lo12:.LANCHOR2
 	add	x0, x0, 3616
 	bl	make_superblock
 .L2103:
-	add	x1, x20, :lo12:.LANCHOR2
+	add	x1, x22, :lo12:.LANCHOR2
 	add	x0, x1, 3664
 	ldrh	w2, [x1,3664]
 	mov	w1, 65535
@@ -13259,10 +13281,10 @@ FtlLoadSysInfo:
 	beq	.L2104
 	bl	make_superblock
 .L2104:
-	add	x20, x20, :lo12:.LANCHOR2
+	add	x1, x22, :lo12:.LANCHOR2
+	add	x0, x1, 3712
+	ldrh	w2, [x1,3712]
 	mov	w1, 65535
-	add	x0, x20, 3712
-	ldrh	w2, [x20,3712]
 	cmp	w2, w1
 	beq	.L2105
 	bl	make_superblock
@@ -13276,13 +13298,15 @@ FtlLoadSysInfo:
 	beq	.L2090
 	bl	make_superblock
 .L2090:
+	sub	sp, x29, #16
 	mov	w0, w19
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 128
 	ret
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
@@ -13312,9 +13336,9 @@ FtlDumpBlockInfo:
 	bl	printk
 	ldr	x3, [x19,1192]
 	ubfiz	x2, x22, 1, 16
-	adrp	x0, .LC60
+	adrp	x0, .LC61
 	mov	w1, w22
-	add	x0, x0, :lo12:.LC60
+	add	x0, x0, :lo12:.LC61
 	ldrh	w2, [x3,x2]
 	bl	printk
 	strh	w22, [x29,112]
@@ -13335,9 +13359,9 @@ FtlDumpBlockInfo:
 	mov	w22, 0
 .L2117:
 	add	x3, x20, :lo12:.LANCHOR2
-	adrp	x0, .LC61
+	adrp	x0, .LC62
 	adrp	x24, .LC56
-	add	x0, x0, :lo12:.LC61
+	add	x0, x0, :lo12:.LC62
 	mov	w1, w22
 	mov	w2, w23
 	ldrh	w3, [x3,824]
@@ -13450,14 +13474,14 @@ FtlScanAllBlock:
 	add	x29, sp, 16
 	stp	x23, x24, [sp,64]
 	stp	x21, x22, [sp,48]
-	adrp	x23, .LC63
-	adrp	x22, .LC62
-	adrp	x24, .LC64
-	add	x22, x22, :lo12:.LC62
+	adrp	x23, .LC64
+	adrp	x22, .LC63
+	adrp	x24, .LC65
+	add	x22, x22, :lo12:.LC63
 	stp	x19, x20, [sp,32]
-	add	x23, x23, :lo12:.LC63
+	add	x23, x23, :lo12:.LC64
 	mov	w20, 0
-	add	x24, x24, :lo12:.LC64
+	add	x24, x24, :lo12:.LC65
 	stp	x25, x26, [sp,80]
 	bl	printk
 .L2136:
@@ -13720,7 +13744,7 @@ Ftl_save_ext_data:
 	ldr	w3, [x0,3472]
 	cmp	w3, w1
 	bne	.L2160
-	mov	w1, 86
+	mov	w1, 87
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2,4]
 	ldr	w1, [x0,3984]
@@ -13893,9 +13917,9 @@ Ftl_load_ext_data:
 	mov	w1, 1
 	str	w1, [x0,660]
 	adrp	x0, .LC45
-	adrp	x1, .LC65
+	adrp	x1, .LC66
 	add	x0, x0, :lo12:.LC45
-	add	x1, x1, :lo12:.LC65
+	add	x1, x1, :lo12:.LC66
 	bl	printk
 .L2173:
 	add	x0, x20, :lo12:.LANCHOR2
@@ -13917,18 +13941,18 @@ Ftl_load_ext_data:
 	.type	ftl_scan_all_ppa, %function
 ftl_scan_all_ppa:
 	sub	sp, sp, #80
-	adrp	x0, .LC66
-	add	x0, x0, :lo12:.LC66
+	adrp	x0, .LC67
+	add	x0, x0, :lo12:.LC67
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
 	stp	x19, x20, [sp,32]
 	adrp	x19, .LANCHOR2
 	add	x19, x19, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,64]
-	adrp	x23, .LC67
+	adrp	x23, .LC68
 	add	x20, x19, 1416
 	ldrh	w1, [x19,822]
-	add	x23, x23, :lo12:.LC67
+	add	x23, x23, :lo12:.LC68
 	ldrh	w2, [x19,824]
 	stp	x21, x22, [sp,48]
 	mov	w22, 0
@@ -13974,9 +13998,9 @@ ftl_scan_all_ppa:
 	b	.L2175
 .L2177:
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC68
+	adrp	x0, .LC69
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC68
+	add	x0, x0, :lo12:.LC69
 	add	x1, x1, 72
 	bl	printk
 	sub	sp, x29, #16
@@ -14110,11 +14134,11 @@ GetFreeBlockMaxEraseCount:
 	.type	FtlPrintInfo2buf, %function
 FtlPrintInfo2buf:
 	stp	x29, x30, [sp, -112]!
-	adrp	x1, .LC69
+	adrp	x1, .LC70
 	add	x29, sp, 0
 	stp	x25, x26, [sp,64]
 	adrp	x25, .LANCHOR0
-	add	x1, x1, :lo12:.LC69
+	add	x1, x1, :lo12:.LC70
 	add	x25, x25, :lo12:.LANCHOR0
 	str	x27, [sp,80]
 	stp	x23, x24, [sp,48]
@@ -14124,17 +14148,17 @@ FtlPrintInfo2buf:
 	bl	strcpy
 	add	x20, x23, 12
 	ldr	w2, [x25,4016]
-	adrp	x1, .LC70
+	adrp	x1, .LC71
 	adrp	x24, .LANCHOR2
 	mov	x0, x20
-	add	x1, x1, :lo12:.LC70
+	add	x1, x1, :lo12:.LC71
 	add	x22, x24, :lo12:.LANCHOR2
 	bl	sprintf
 	add	x20, x20, x0, sxtw
-	adrp	x1, .LC71
+	adrp	x1, .LC72
 	mov	x0, x20
 	ldr	w2, [x22,840]
-	add	x1, x1, :lo12:.LC71
+	add	x1, x1, :lo12:.LC72
 	bl	sprintf
 	add	x20, x20, x0, sxtw
 	adrp	x0, .LANCHOR1+3288
@@ -14150,351 +14174,351 @@ FtlPrintInfo2buf:
 	add	x3, x29, 108
 	bl	NandcGetTimeCfg
 	ldr	w4, [x29,104]
-	adrp	x1, .LC72
+	adrp	x1, .LC73
 	ldr	w5, [x29,108]
 	mov	x0, x20
 	ldr	w3, [x29,100]
-	add	x1, x1, :lo12:.LC72
+	add	x1, x1, :lo12:.LC73
 	ldr	w2, [x29,96]
 	bl	sprintf
 	add	x21, x20, x0, sxtw
-	adrp	x1, .LC73
+	adrp	x1, .LC74
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC73
+	add	x1, x1, :lo12:.LC74
 	add	x21, x21, 10
 	adrp	x20, .LANCHOR4
 	bl	strcpy
 	add	x20, x20, :lo12:.LANCHOR4
 	ldr	w2, [x22,1404]
-	adrp	x1, .LC74
-	mov	x0, x21
-	add	x1, x1, :lo12:.LC74
-	bl	sprintf
-	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,3900]
 	adrp	x1, .LC75
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC75
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,904]
+	ldr	w2, [x22,3900]
 	adrp	x1, .LC76
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC76
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,892]
+	ldr	w2, [x22,904]
 	adrp	x1, .LC77
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC77
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,888]
+	ldr	w2, [x22,892]
 	adrp	x1, .LC78
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC78
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,896]
+	ldr	w2, [x22,888]
 	adrp	x1, .LC79
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC79
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,900]
+	ldr	w2, [x22,896]
 	adrp	x1, .LC80
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC80
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,884]
+	ldr	w2, [x22,900]
 	adrp	x1, .LC81
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC81
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x20,3984]
+	ldr	w2, [x22,884]
 	adrp	x1, .LC82
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC82
-	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x20,3988]
+	ldr	w2, [x20,3984]
 	adrp	x1, .LC83
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC83
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,876]
+	ldr	w2, [x20,3988]
 	adrp	x1, .LC84
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC84
+	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,880]
+	ldr	w2, [x22,876]
 	adrp	x1, .LC85
-	add	x1, x1, :lo12:.LC85
 	mov	x0, x21
+	add	x1, x1, :lo12:.LC85
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	bl	FtlBbtCalcTotleCnt
-	uxth	w3, w0
-	ldrh	w2, [x22,1310]
+	ldr	w2, [x22,880]
 	adrp	x1, .LC86
-	mov	x0, x21
 	add	x1, x1, :lo12:.LC86
+	mov	x0, x21
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3608]
+	bl	FtlBbtCalcTotleCnt
+	uxth	w3, w0
+	ldrh	w2, [x22,1310]
 	adrp	x1, .LC87
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC87
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,908]
+	ldrh	w2, [x22,3608]
 	adrp	x1, .LC88
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC88
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,912]
+	ldr	w2, [x22,908]
 	adrp	x1, .LC89
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC89
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x20,3996]
+	ldr	w2, [x22,912]
 	adrp	x1, .LC90
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC90
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,916]
+	ldr	w2, [x20,3996]
 	adrp	x1, .LC91
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC91
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,920]
+	ldr	w2, [x22,916]
 	adrp	x1, .LC92
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC92
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,924]
+	ldr	w2, [x22,920]
 	adrp	x1, .LC93
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC93
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3558]
+	ldr	w2, [x22,924]
 	adrp	x1, .LC94
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC94
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3556]
+	ldrh	w2, [x22,3558]
 	adrp	x1, .LC95
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC95
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x25,4048]
+	ldrh	w2, [x22,3556]
 	adrp	x1, .LC96
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC96
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,856]
+	ldr	w2, [x25,4048]
 	adrp	x1, .LC97
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC97
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,752]
+	ldr	w2, [x22,856]
 	adrp	x1, .LC98
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC98
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,1478]
+	ldr	w2, [x22,752]
 	adrp	x1, .LC99
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC99
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,764]
+	ldrh	w2, [x22,1478]
 	adrp	x1, .LC100
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC100
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x20,3420]
+	ldrh	w2, [x22,764]
 	adrp	x1, .LC101
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC101
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,768]
+	ldrh	w2, [x20,3420]
 	adrp	x1, .LC102
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC102
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3904]
+	ldr	w2, [x22,768]
 	adrp	x1, .LC103
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC103
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,1304]
+	ldrh	w2, [x22,3904]
 	adrp	x1, .LC104
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC104
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3618]
+	ldrh	w2, [x22,1304]
 	adrp	x1, .LC105
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC105
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3622]
+	ldrh	w2, [x22,3618]
 	adrp	x1, .LC106
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC106
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3616]
+	ldrb	w2, [x22,3622]
 	adrp	x1, .LC107
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC107
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3624]
+	ldrh	w2, [x22,3616]
 	adrp	x1, .LC108
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC108
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3620]
+	ldrb	w2, [x22,3624]
 	adrp	x1, .LC109
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC109
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w3, [x22,3616]
+	ldrh	w2, [x22,3620]
 	adrp	x1, .LC110
-	ldr	x2, [x22,1192]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC110
-	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3666]
+	ldrh	w3, [x22,3616]
 	adrp	x1, .LC111
+	ldr	x2, [x22,1192]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC111
+	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3670]
+	ldrh	w2, [x22,3666]
 	adrp	x1, .LC112
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC112
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3664]
+	ldrb	w2, [x22,3670]
 	adrp	x1, .LC113
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC113
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3672]
+	ldrh	w2, [x22,3664]
 	adrp	x1, .LC114
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC114
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3668]
+	ldrb	w2, [x22,3672]
 	adrp	x1, .LC115
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC115
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w3, [x22,3664]
+	ldrh	w2, [x22,3668]
 	adrp	x1, .LC116
-	ldr	x2, [x22,1192]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC116
-	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3714]
+	ldrh	w3, [x22,3664]
 	adrp	x1, .LC117
+	ldr	x2, [x22,1192]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC117
+	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3718]
+	ldrh	w2, [x22,3714]
 	adrp	x1, .LC118
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC118
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3712]
+	ldrb	w2, [x22,3718]
 	adrp	x1, .LC119
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC119
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3720]
+	ldrh	w2, [x22,3712]
 	adrp	x1, .LC120
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC120
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3716]
+	ldrb	w2, [x22,3720]
 	adrp	x1, .LC121
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC121
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x20,3426]
+	ldrh	w2, [x22,3716]
 	adrp	x1, .LC122
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC122
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x20,3430]
+	ldrh	w2, [x20,3426]
 	adrp	x1, .LC123
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC123
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x20,3424]
+	ldrb	w2, [x20,3430]
 	adrp	x1, .LC124
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC124
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x20,3432]
+	ldrh	w2, [x20,3424]
 	adrp	x1, .LC125
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC125
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x20,3428]
+	ldrb	w2, [x20,3432]
 	adrp	x1, .LC126
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC126
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w3, [x22,872]
+	ldrh	w2, [x20,3428]
 	adrp	x1, .LC127
-	ldr	w2, [x22,660]
+	mov	x0, x21
 	add	x1, x1, :lo12:.LC127
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w3, [x22,872]
+	adrp	x1, .LC128
+	ldr	w2, [x22,660]
+	add	x1, x1, :lo12:.LC128
 	ldr	w4, [x20,3556]
 	mov	x0, x21
 	ldr	w5, [x20,3548]
@@ -14503,54 +14527,54 @@ FtlPrintInfo2buf:
 	bl	sprintf
 	add	x19, x21, x0, sxtw
 	ldr	w2, [x20,3544]
-	adrp	x1, .LC128
-	mov	x0, x19
-	add	x1, x1, :lo12:.LC128
-	bl	sprintf
-	add	x19, x19, x0, sxtw
-	ldr	w2, [x20,3568]
 	adrp	x1, .LC129
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC129
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,960]
+	ldr	w2, [x20,3568]
 	adrp	x1, .LC130
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC130
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,962]
+	ldrh	w2, [x22,960]
 	adrp	x1, .LC131
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC131
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x22,944]
+	ldrh	w2, [x22,962]
 	adrp	x1, .LC132
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC132
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,964]
+	ldr	w2, [x22,944]
 	adrp	x1, .LC133
+	mov	x0, x19
 	add	x1, x1, :lo12:.LC133
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,964]
+	adrp	x1, .LC134
+	add	x1, x1, :lo12:.LC134
 	mov	x0, x19
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	bl	GetFreeBlockMinEraseCount
 	uxth	w2, w0
-	adrp	x1, .LC134
+	adrp	x1, .LC135
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC134
+	add	x1, x1, :lo12:.LC135
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w0, [x22,3608]
 	bl	GetFreeBlockMaxEraseCount
 	uxth	w2, w0
-	adrp	x1, .LC135
+	adrp	x1, .LC136
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC135
+	add	x1, x1, :lo12:.LC136
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w0, [x20,3424]
@@ -14559,21 +14583,21 @@ FtlPrintInfo2buf:
 	beq	.L2203
 	ubfiz	x2, x0, 1, 16
 	ldr	x3, [x22,1192]
-	adrp	x1, .LC136
+	adrp	x1, .LC137
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC136
+	add	x1, x1, :lo12:.LC137
 	ldrh	w2, [x3,x2]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 .L2203:
 	mov	w0, 0
-	adrp	x22, .LC137
+	adrp	x22, .LC138
 	mov	w20, 0
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	mov	w26, 6
 	uxth	w3, w0
-	add	x22, x22, :lo12:.LC137
+	add	x22, x22, :lo12:.LC138
 .L2205:
 	cmp	w3, w27
 	beq	.L2204
@@ -14599,11 +14623,11 @@ FtlPrintInfo2buf:
 	bne	.L2205
 .L2204:
 	add	x1, x24, :lo12:.LANCHOR2
-	adrp	x22, .LC138
+	adrp	x22, .LC139
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-	add	x22, x22, :lo12:.LC138
+	add	x22, x22, :lo12:.LC139
 	ldr	x0, [x1,3600]
 	ldr	x3, [x1,1288]
 	sub	x3, x0, x3
@@ -14649,10 +14673,10 @@ FtlPrintInfo2buf:
 ftl_proc_ftl_read:
 	stp	x29, x30, [sp, -32]!
 	adrp	x1, .LC45
-	adrp	x2, .LC139
+	adrp	x2, .LC140
 	add	x29, sp, 0
 	add	x1, x1, :lo12:.LC45
-	add	x2, x2, :lo12:.LC139
+	add	x2, x2, :lo12:.LC140
 	stp	x19, x20, [sp,16]
 	mov	x20, x0
 	bl	sprintf
@@ -14832,9 +14856,9 @@ GetSwlReplaceBlock:
 	bcs	.L2223
 .L2230:
 	add	x19, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC140
+	adrp	x0, .LC141
 	ldrh	w5, [x25,x24]
-	add	x0, x0, :lo12:.LC140
+	add	x0, x0, :lo12:.LC141
 	mov	w1, w20
 	mov	w2, w23
 	ldr	x4, [x19,1192]
@@ -15506,8 +15530,8 @@ FtlGcScanTempBlk:
 	mov	w0, -1
 	adrp	x25, .LANCHOR2
 	str	w0, [x29,132]
-	adrp	x0, .LC142
-	add	x0, x0, :lo12:.LC142
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
 	mov	w23, 0
 	mov	x22, x25
 	mov	x21, x25
@@ -15631,10 +15655,10 @@ FtlGcScanTempBlk:
 	ldr	w1, [x6,x1]
 	cmp	w8, w1
 	beq	.L2366
-	adrp	x0, .LC141
+	adrp	x0, .LC142
 	ldrh	w1, [x19]
 	ldr	w2, [x29,156]
-	add	x0, x0, :lo12:.LC141
+	add	x0, x0, :lo12:.LC142
 	bl	printk
 .L2394:
 	add	x0, x21, :lo12:.LANCHOR2
@@ -15767,9 +15791,9 @@ FtlGcRefreshOpenBlock:
 	ldrh	w0, [x19,958]
 	cmp	w0, w20
 	beq	.L2399
-	adrp	x0, .LC143
+	adrp	x0, .LC144
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC143
+	add	x0, x0, :lo12:.LC144
 	bl	printk
 	ldrh	w1, [x19,952]
 	mov	w0, 65535
@@ -15824,9 +15848,9 @@ FtlGcRefreshBlock:
 	ldrh	w0, [x19,958]
 	cmp	w0, w20
 	beq	.L2405
-	adrp	x0, .LC143
+	adrp	x0, .LC144
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC143
+	add	x0, x0, :lo12:.LC144
 	bl	printk
 	ldrh	w1, [x19,952]
 	mov	w0, 65535
@@ -15877,9 +15901,9 @@ FtlGcMarkBadPhyBlk:
 	bl	P2V_block_in_plane
 	uxth	w21, w0
 	ldrh	w1, [x22,966]
-	adrp	x0, .LC144
+	adrp	x0, .LC145
 	mov	w2, w20
-	add	x0, x0, :lo12:.LC144
+	add	x0, x0, :lo12:.LC145
 	bl	printk
 	mov	w0, w21
 	bl	FtlGcRefreshBlock
@@ -15981,8 +16005,8 @@ FtlGcFreeBadSuperBlk:
 	mov	w21, 0
 	cbz	w0, .L2431
 	adrp	x24, .LANCHOR4
-	adrp	x22, .LC145
-	add	x22, x22, :lo12:.LC145
+	adrp	x22, .LC146
+	add	x22, x22, :lo12:.LC146
 	add	x25, x24, :lo12:.LANCHOR4
 .L2439:
 	ldrh	w0, [x19,756]
@@ -16117,9 +16141,9 @@ decrement_vpc_count:
 	ldr	x0, [x20,1192]
 	ldrh	w2, [x0,x21]
 	cbnz	w2, .L2453
-	adrp	x0, .LC146
+	adrp	x0, .LC147
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC146
+	add	x0, x0, :lo12:.LC147
 	add	x22, x20, 3600
 	bl	printk
 	ldr	x0, [x20,1192]
@@ -16138,8 +16162,8 @@ decrement_vpc_count:
 	mov	w0, w19
 	bl	INSERT_DATA_LIST
 	ldr	x2, [x20,1192]
-	adrp	x0, .LC147
-	add	x0, x0, :lo12:.LC147
+	adrp	x0, .LC148
+	add	x0, x0, :lo12:.LC148
 	mov	w1, w19
 	ldrh	w2, [x2,x21]
 	bl	printk
@@ -16191,7 +16215,7 @@ FtlRecoverySuperblock:
 	mov	x19, x0
 	ldrh	w0, [x0]
 	cmp	w0, w2
-	beq	.L2624
+	beq	.L2623
 	ldrh	w0, [x19,2]
 	adrp	x20, .LANCHOR2
 	str	w0, [x29,188]
@@ -16202,19 +16226,19 @@ FtlRecoverySuperblock:
 	cmp	w0, w1
 	bne	.L2465
 	strh	wzr, [x19,4]
-	b	.L2630
+	b	.L2629
 .L2465:
 	ldrh	w0, [x19,16]
 	mov	w1, 0
 .L2466:
 	cmp	w0, w2
-	bne	.L2633
+	bne	.L2632
 	add	w1, w1, 1
 	uxth	w1, w1
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
 	b	.L2466
-.L2633:
+.L2632:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
 	bne	.L2468
@@ -16250,9 +16274,9 @@ FtlRecoverySuperblock:
 	b	.L2471
 .L2469:
 	strh	wzr, [x19,2]
-.L2630:
+.L2629:
 	strb	wzr, [x19,6]
-	b	.L2624
+	b	.L2623
 .L2473:
 	ldrh	w1, [x2,16]
 	cmp	w1, w8
@@ -16297,9 +16321,9 @@ FtlRecoverySuperblock:
 	ldr	x0, [x22,1000]
 	bl	FlashReadPages
 	ldr	w0, [x22,880]
-	adrp	x22, .LC148
+	adrp	x22, .LC149
 	str	w0, [x29,176]
-	add	x22, x22, :lo12:.LC148
+	add	x22, x22, :lo12:.LC149
 	uxth	w0, w23
 	str	w0, [x29,168]
 .L2475:
@@ -16337,13 +16361,13 @@ FtlRecoverySuperblock:
 	bne	.L2478
 .L2482:
 	cmp	w2, w25
-	bne	.L2625
+	bne	.L2624
 	add	x0, x20, :lo12:.LANCHOR2
 	add	w21, w21, 1
 	uxth	w21, w21
 	ldr	x0, [x0,1000]
 	ldr	w0, [x0,4]
-	b	.L2626
+	b	.L2625
 .L2476:
 	ldr	w1, [x1,4]
 	mov	x0, x22
@@ -16355,7 +16379,7 @@ FtlRecoverySuperblock:
 .L2478:
 	add	x26, x26, 1
 	b	.L2475
-.L2625:
+.L2624:
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w1, 56
 	uxth	w21, w21
@@ -16363,7 +16387,7 @@ FtlRecoverySuperblock:
 	ldr	x0, [x0,1000]
 	add	x2, x0, x2
 	ldr	w0, [x2,4]
-.L2626:
+.L2625:
 	lsr	x0, x0, 10
 	bl	P2V_plane
 	uxth	w26, w0
@@ -16392,7 +16416,7 @@ FtlRecoverySuperblock:
 	bne	.L2486
 	ldr	w0, [x29,152]
 	cmp	w26, w0
-	beq	.L2631
+	beq	.L2630
 .L2486:
 	ldr	w0, [x29,176]
 	adrp	x25, .LANCHOR4
@@ -16435,7 +16459,7 @@ FtlRecoverySuperblock:
 	add	x2, x19, x2, lsl 1
 .L2505:
 	cmp	x0, x2
-	beq	.L2634
+	beq	.L2633
 	ldrh	w1, [x0,16]
 	cmp	w1, w4
 	beq	.L2492
@@ -16450,7 +16474,7 @@ FtlRecoverySuperblock:
 .L2492:
 	add	x0, x0, 2
 	b	.L2505
-.L2634:
+.L2633:
 	add	x9, x20, :lo12:.LANCHOR2
 	ldr	w2, [x29,184]
 	mov	w1, w23
@@ -16478,7 +16502,7 @@ FtlRecoverySuperblock:
 	add	x0, x0, 16
 .L2494:
 	cmp	w1, w23
-	beq	.L2635
+	beq	.L2634
 	ldr	w2, [x0,-16]
 	cbnz	w2, .L2495
 	ldr	x2, [x0]
@@ -16526,7 +16550,7 @@ FtlRecoverySuperblock:
 	b	.L2488
 .L2501:
 	ldr	w1, [x0,4028]
-	b	.L2632
+	b	.L2631
 .L2499:
 	cmp	w27, w22
 	beq	.L2502
@@ -16538,33 +16562,33 @@ FtlRecoverySuperblock:
 	ldr	w1, [x0,4028]
 	cmp	w1, w22
 	beq	.L2488
-.L2632:
+.L2631:
 	sub	w1, w1, #1
-	b	.L2627
+	b	.L2626
 .L2496:
 	add	w1, w1, 1
 	add	x0, x0, 56
 	uxth	w1, w1
 	b	.L2494
-.L2635:
+.L2634:
 	add	w24, w24, 1
 	uxth	w24, w24
 	b	.L2491
 .L2504:
 	add	x0, x25, :lo12:.LANCHOR4
 	mov	w1, -1
-.L2627:
+.L2626:
 	str	w1, [x0,4028]
 .L2488:
 	add	x0, x25, :lo12:.LANCHOR4
 	mov	w1, 1
 	ldr	w23, [x29,188]
 	strh	w1, [x0,4076]
+	adrp	x0, .LC151
+	add	x0, x0, :lo12:.LC151
+	str	x0, [x29,128]
 	adrp	x0, .LC150
 	add	x0, x0, :lo12:.LC150
-	str	x0, [x29,128]
-	adrp	x0, .LC149
-	add	x0, x0, :lo12:.LC149
 	str	x0, [x29,120]
 .L2506:
 	add	x0, x20, :lo12:.LANCHOR2
@@ -16579,7 +16603,7 @@ FtlRecoverySuperblock:
 	add	x3, x19, x3, lsl 1
 .L2507:
 	cmp	x1, x3
-	beq	.L2636
+	beq	.L2635
 	ldrh	w2, [x1,16]
 	cmp	w2, w7
 	beq	.L2508
@@ -16607,7 +16631,7 @@ FtlRecoverySuperblock:
 .L2508:
 	add	x1, x1, 2
 	b	.L2507
-.L2636:
+.L2635:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w1, [x29,176]
 	ldr	w2, [x29,184]
@@ -16618,7 +16642,7 @@ FtlRecoverySuperblock:
 	ldrh	w0, [x29,160]
 	ldr	w1, [x29,176]
 	cmp	w1, w0, uxth
-	bls	.L2637
+	bls	.L2636
 	ldr	x0, [x29,160]
 	mov	x24, 56
 	mul	x24, x0, x24
@@ -16656,7 +16680,7 @@ FtlRecoverySuperblock:
 	cmp	w1, w0
 	beq	.L2517
 	ldrh	w0, [x19]
-	b	.L2628
+	b	.L2627
 .L2517:
 	ldr	w22, [x28,4]
 	cmn	w22, #1
@@ -16786,13 +16810,14 @@ FtlRecoverySuperblock:
 	ldr	w1, [x29,200]
 	cmp	w1, w0
 	beq	.L2529
+	cmn	w28, #1
+	beq	.L2531
 	add	x0, x20, :lo12:.LANCHOR2
+	ubfx	x28, x28, 10, 21
 	ldr	w0, [x0,772]
-	cmp	w0, w28, lsr 10
-	bhi	.L2549
-	cmn	w28, #1
-	bne	.L2512
-.L2549:
+	cmp	w28, w0
+	bcs	.L2512
+.L2531:
 	mov	w0, w27
 	add	x1, x29, 204
 	mov	w2, 1
@@ -16852,7 +16877,7 @@ FtlRecoverySuperblock:
 	ldr	x2, [x2,1192]
 	ldrh	w2, [x2,x3]
 	cbz	w2, .L2534
-.L2628:
+.L2627:
 	bl	decrement_vpc_count
 	b	.L2512
 .L2534:
@@ -16880,17 +16905,17 @@ FtlRecoverySuperblock:
 	add	x0, x25, :lo12:.LANCHOR4
 	ldr	w1, [x0,4028]
 	cmn	w1, #1
-	beq	.L2629
+	beq	.L2628
 	cmp	w1, w22
 	bls	.L2512
-.L2629:
+.L2628:
 	str	w22, [x0,4028]
 .L2512:
 	ldr	x0, [x29,160]
 	add	x0, x0, 1
 	str	x0, [x29,160]
 	b	.L2511
-.L2637:
+.L2636:
 	ldrb	w0, [x19,8]
 	add	w23, w23, 1
 	cmp	w0, 1
@@ -16919,23 +16944,23 @@ FtlRecoverySuperblock:
 .L2540:
 	uxth	w1, w0
 	cmp	w1, w2
-	bcs	.L2624
+	bcs	.L2623
 	add	x0, x0, 1
 	add	x4, x19, x0, lsl 1
 	ldrh	w4, [x4,14]
 	cmp	w4, w3
 	beq	.L2540
 	strb	w1, [x19,6]
-	b	.L2624
+	b	.L2623
 .L2514:
 	strb	w26, [x19,6]
 	strh	w21, [x19,2]
-.L2631:
+.L2630:
 	mov	x0, x19
 	mov	w1, w21
 	mov	w2, w26
 	bl	ftl_sb_update_avl_pages
-.L2624:
+.L2623:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -16954,11 +16979,11 @@ FtlSlcSuperblockCheck:
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	ldrh	w1, [x0,4]
-	cbz	w1, .L2638
+	cbz	w1, .L2637
 	ldrh	w1, [x0]
 	mov	w20, 65535
 	cmp	w1, w20
-	beq	.L2638
+	beq	.L2637
 	mov	x19, x0
 	ldrb	w0, [x0,6]
 	adrp	x21, .LANCHOR0
@@ -16966,10 +16991,10 @@ FtlSlcSuperblockCheck:
 	add	x0, x0, 8
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x19,x0,lsl 1]
-.L2642:
+.L2641:
 	cmp	w0, w20
-	bne	.L2649
-.L2644:
+	bne	.L2648
+.L2643:
 	ldrb	w0, [x19,6]
 	add	x1, x22, :lo12:.LANCHOR2
 	add	w0, w0, 1
@@ -16977,52 +17002,52 @@ FtlSlcSuperblockCheck:
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L2643
+	bne	.L2642
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L2643:
+.L2642:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L2642
-.L2649:
+	b	.L2641
+.L2648:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2645
+	bne	.L2644
 	ldrb	w0, [x21,4044]
-	cbnz	w0, .L2645
+	cbnz	w0, .L2644
 	add	x0, x21, 648
 	ldrh	w2, [x19,2]
 	ldrh	w0, [x0,w2,sxtw 1]
 	cmp	w0, w20
-	bne	.L2645
+	bne	.L2644
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	ldrh	w1, [x19,4]
-	cbnz	w1, .L2644
+	cbnz	w1, .L2643
 	ldrh	w0, [x19,2]
 	strb	w1, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-	b	.L2638
-.L2645:
+	b	.L2637
+.L2644:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbz	w0, .L2638
+	cbz	w0, .L2637
 	cmp	w1, 1
-	bne	.L2638
+	bne	.L2637
 	adrp	x0, .LANCHOR2
 	ldrh	w2, [x19,2]
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w1, [x0,826]
 	cmp	w2, w1
-	bcc	.L2638
+	bcc	.L2637
 	ldrh	w1, [x19]
 	ldr	x3, [x0,1192]
 	lsl	x1, x1, 1
@@ -17034,7 +17059,7 @@ FtlSlcSuperblockCheck:
 	ldrh	w0, [x0,824]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L2638:
+.L2637:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -17058,11 +17083,11 @@ get_new_active_ppa:
 	add	x0, x0, 8
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x19,x0,lsl 1]
-.L2651:
+.L2650:
 	cmp	w0, w22
 	adrp	x21, .LANCHOR2
-	bne	.L2666
-.L2652:
+	bne	.L2665
+.L2651:
 	ldrb	w0, [x19,6]
 	add	x1, x23, :lo12:.LANCHOR2
 	add	w0, w0, 1
@@ -17070,34 +17095,34 @@ get_new_active_ppa:
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L2653
+	bne	.L2652
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L2653:
+.L2652:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L2651
-.L2666:
+	b	.L2650
+.L2665:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2654
+	bne	.L2653
 	ldrb	w1, [x20,4044]
-	cbnz	w1, .L2654
+	cbnz	w1, .L2653
 	add	x1, x20, 648
 	ldrh	w2, [x19,2]
 	ldrh	w1, [x1,w2,sxtw 1]
 	cmp	w1, w22
-	bne	.L2654
+	bne	.L2653
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2652
-.L2654:
+	b	.L2651
+.L2653:
 	ldrh	w1, [x19,4]
 	mov	w23, 65535
 	ldrh	w22, [x19,2]
@@ -17107,52 +17132,52 @@ get_new_active_ppa:
 	orr	w22, w22, w0, lsl 10
 	strh	w1, [x19,4]
 	add	x20, x20, :lo12:.LANCHOR0
-.L2655:
+.L2654:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrb	w1, [x19,6]
 	ldrh	w2, [x0,756]
-.L2657:
+.L2656:
 	add	w1, w1, 1
 	uxtb	w1, w1
 	cmp	w1, w2
-	bne	.L2656
+	bne	.L2655
 	ldrh	w1, [x19,2]
 	add	w1, w1, 1
 	strh	w1, [x19,2]
 	mov	w1, 0
-.L2656:
+.L2655:
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w23
-	beq	.L2657
+	beq	.L2656
 	ldrb	w0, [x19,8]
 	strb	w1, [x19,6]
 	cmp	w0, 1
-	bne	.L2662
+	bne	.L2661
 	ldrb	w0, [x20,4044]
-	cbnz	w0, .L2659
+	cbnz	w0, .L2658
 	add	x1, x20, 648
 	ldrh	w0, [x19,2]
 	ldrh	w0, [x1,w0,sxtw 1]
 	cmp	w0, w24
-	bne	.L2659
+	bne	.L2658
 	ldrh	w1, [x19,4]
-	cbz	w1, .L2659
+	cbz	w1, .L2658
 	ldrh	w0, [x19]
 	sub	w1, w1, #1
 	strh	w1, [x19,4]
 	bl	decrement_vpc_count
-	b	.L2655
-.L2659:
+	b	.L2654
+.L2658:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrb	w0, [x1,4044]
-	cbz	w0, .L2662
+	cbz	w0, .L2661
 	add	x2, x21, :lo12:.LANCHOR2
 	ldrh	w1, [x19,2]
 	ldrh	w0, [x2,826]
 	cmp	w1, w0
-	bcc	.L2662
+	bcc	.L2661
 	ldrh	w1, [x19]
 	ldr	x0, [x2,1192]
 	lsl	x1, x1, 1
@@ -17164,7 +17189,7 @@ get_new_active_ppa:
 	ldrh	w0, [x2,824]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L2662:
+.L2661:
 	mov	w0, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -17185,20 +17210,20 @@ FtlWriteDumpData:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	ldr	w0, [x20,1408]
-	cbnz	w0, .L2667
+	cbnz	w0, .L2666
 	ldrh	w2, [x20,3620]
-	cbz	w2, .L2669
+	cbz	w2, .L2668
 	ldrb	w1, [x20,3624]
-	cbnz	w1, .L2669
+	cbnz	w1, .L2668
 	ldrb	w1, [x20,3623]
 	ldrh	w3, [x20,824]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L2669
+	beq	.L2668
 	ldrb	w23, [x20,3626]
 	ldr	w22, [x20,1404]
 	ldrh	w24, [x20,756]
-	cbnz	w23, .L2667
+	cbnz	w23, .L2666
 	sub	w22, w22, #1
 	add	x1, x29, 84
 	mov	w0, w22
@@ -17213,29 +17238,29 @@ FtlWriteDumpData:
 	str	x1, [x29,96]
 	str	x21, [x29,104]
 	str	w23, [x21,4]
-	beq	.L2671
+	beq	.L2670
 	add	x0, x29, 88
 	mov	w1, 1
 	mov	w2, w23
 	bl	FlashReadPages
-	b	.L2672
-.L2671:
+	b	.L2671
+.L2670:
 	ldr	x0, [x20,1056]
 	mov	w1, 255
 	ldrh	w2, [x20,834]
 	bl	ftl_memset
-.L2672:
+.L2671:
 	add	x25, x19, :lo12:.LANCHOR2
 	mov	w0, -3947
 	lsl	w24, w24, 2
 	strh	w0, [x21]
 	mov	w23, 0
 	add	x20, x25, 3616
-.L2673:
+.L2672:
 	cmp	w23, w24
-	beq	.L2674
+	beq	.L2673
 	ldrh	w0, [x20,4]
-	cbz	w0, .L2674
+	cbz	w0, .L2673
 	ldr	w0, [x29,92]
 	add	w23, w23, 1
 	str	w0, [x21,12]
@@ -17258,16 +17283,16 @@ FtlWriteDumpData:
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L2673
-.L2674:
+	b	.L2672
+.L2673:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
 	strb	w0, [x19,3626]
-	b	.L2667
-.L2669:
+	b	.L2666
+.L2668:
 	add	x19, x19, :lo12:.LANCHOR2
 	strb	wzr, [x19,3626]
-.L2667:
+.L2666:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -17285,23 +17310,23 @@ l2p_flush:
 	mov	w19, 0
 	adrp	x20, .LANCHOR2
 	bl	FtlWriteDumpData
-.L2685:
+.L2684:
 	add	x1, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x1,862]
 	cmp	w0, w19
-	bls	.L2688
+	bls	.L2687
 	ldr	x1, [x1,1272]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0,4]
-	tbz	w0, #31, .L2686
+	tbz	w0, #31, .L2685
 	mov	w0, w19
 	bl	flush_l2p_region
-.L2686:
+.L2685:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2685
-.L2688:
+	b	.L2684
+.L2687:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -17319,20 +17344,20 @@ FtlSuperblockPowerLostFix:
 	add	x1, x20, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	ldr	w1, [x1,1408]
-	cbnz	w1, .L2689
+	cbnz	w1, .L2688
 	adrp	x2, .LANCHOR0+4044
 	ldrb	w21, [x2,#:lo12:.LANCHOR0+4044]
-	cbz	w21, .L2704
+	cbz	w21, .L2703
 	ldrb	w21, [x0,8]
 	cmp	w21, 1
-	bne	.L2700
+	bne	.L2699
 	ldrh	w23, [x0,4]
-	b	.L2691
-.L2700:
+	b	.L2690
+.L2699:
 	mov	w21, w1
-.L2704:
+.L2703:
 	mov	w23, 12
-.L2691:
+.L2690:
 	mov	x19, x0
 	mov	w0, -1
 	str	w0, [x29,96]
@@ -17355,13 +17380,13 @@ FtlSuperblockPowerLostFix:
 	mov	w0, 22136
 	movk	w0, 0x1234, lsl 16
 	str	w0, [x1,4]
-.L2692:
+.L2691:
 	sub	w23, w23, #1
 	cmn	w23, #1
-	beq	.L2695
+	beq	.L2694
 	ldrh	w0, [x19,4]
-	cbnz	w0, .L2693
-.L2695:
+	cbnz	w0, .L2692
+.L2694:
 	add	x20, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x19]
 	ldrh	w3, [x19,4]
@@ -17374,13 +17399,13 @@ FtlSuperblockPowerLostFix:
 	ldrh	w0, [x20,824]
 	strh	w0, [x19,2]
 	strh	wzr, [x19,4]
-	b	.L2689
-.L2693:
+	b	.L2688
+.L2692:
 	mov	x0, x19
 	bl	get_new_active_ppa
 	str	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2695
+	beq	.L2694
 	add	x1, x20, :lo12:.LANCHOR2
 	mov	w2, w21
 	mov	w3, 0
@@ -17395,8 +17420,8 @@ FtlSuperblockPowerLostFix:
 	bl	FlashProgPages
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2692
-.L2689:
+	b	.L2691
+.L2688:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -17427,18 +17452,18 @@ FtlVpcCheckAndModify:
 	ldr	x0, [x0,1184]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L2706:
+.L2705:
 	add	x19, x21, :lo12:.LANCHOR2
 	ldr	w0, [x19,1404]
 	cmp	w20, w0
-	bcs	.L2722
+	bcs	.L2721
 	mov	w0, w20
 	add	x1, x29, 76
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2707
+	beq	.L2706
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ubfiz	x0, x0, 1, 16
@@ -17446,57 +17471,57 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2,x0]
 	add	w1, w1, 1
 	strh	w1, [x2,x0]
-.L2707:
+.L2706:
 	add	w20, w20, 1
-	b	.L2706
-.L2722:
-	adrp	x22, .LC151
+	b	.L2705
+.L2721:
+	adrp	x22, .LC152
 	mov	w20, 0
 	mov	w23, 65535
-	add	x22, x22, :lo12:.LC151
-.L2709:
+	add	x22, x22, :lo12:.LC152
+.L2708:
 	ldrh	w0, [x19,764]
 	cmp	w0, w20
-	bls	.L2723
+	bls	.L2722
 	ubfiz	x21, x20, 1, 16
 	ldr	x0, [x19,1192]
 	ldrh	w2, [x0,x21]
 	ldr	x0, [x19,1184]
 	ldrh	w3, [x0,x21]
 	cmp	w2, w3
-	beq	.L2712
+	beq	.L2711
 	cmp	w2, w23
-	beq	.L2712
+	beq	.L2711
 	mov	x0, x22
 	mov	w1, w20
 	bl	printk
 	ldrh	w0, [x19,3616]
 	cmp	w0, w20
-	beq	.L2712
+	beq	.L2711
 	ldrh	w0, [x19,3712]
 	cmp	w0, w20
-	beq	.L2712
+	beq	.L2711
 	ldrh	w0, [x19,3664]
 	cmp	w0, w20
-	beq	.L2712
+	beq	.L2711
 	ldr	x0, [x19,1192]
 	ldrh	w1, [x0,x21]
-	cbnz	w1, .L2714
+	cbnz	w1, .L2713
 	ldr	x1, [x19,1184]
 	ldrh	w1, [x1,x21]
 	strh	w1, [x0,x21]
-	b	.L2712
-.L2714:
+	b	.L2711
+.L2713:
 	ldr	x1, [x19,1184]
 	ldrh	w1, [x1,x21]
 	strh	w1, [x0,x21]
 	mov	w0, w20
 	bl	update_vpc_list
-.L2712:
+.L2711:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L2709
-.L2723:
+	b	.L2708
+.L2722:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	x23, [sp,48]
@@ -17517,89 +17542,89 @@ allocate_new_data_superblock:
 	stp	x21, x22, [sp,32]
 	ldr	w1, [x2,1408]
 	ldrh	w22, [x0]
-	cbnz	w1, .L2725
+	cbnz	w1, .L2724
 	mov	x21, x0
 	mov	w0, 65535
 	cmp	w22, w0
-	beq	.L2726
+	beq	.L2725
 	ubfiz	x1, x22, 1, 16
 	ldr	x0, [x2,1192]
 	ldrh	w0, [x0,x1]
-	cbz	w0, .L2727
+	cbz	w0, .L2726
 	mov	w0, w22
 	bl	INSERT_DATA_LIST
-	b	.L2726
-.L2727:
+	b	.L2725
+.L2726:
 	mov	w0, w22
 	bl	INSERT_FREE_LIST
-.L2726:
+.L2725:
 	add	x1, x19, :lo12:.LANCHOR2
 	strb	wzr, [x21,8]
 	add	x0, x1, 3664
 	cmp	x21, x0
-	beq	.L2728
+	beq	.L2727
 	ldrh	w2, [x1,776]
 	cmp	w2, 1
-	beq	.L2728
+	beq	.L2727
 	adrp	x0, .LANCHOR0+4044
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+4044]
-	cbz	w0, .L2729
-.L2728:
+	cbz	w0, .L2728
+.L2727:
 	mov	w0, 1
 	strb	w0, [x21,8]
-	b	.L2730
-.L2729:
+	b	.L2729
+.L2728:
 	add	x0, x1, 3616
 	cmp	x21, x0
-	bne	.L2730
+	bne	.L2729
 	cmp	w2, 3
-	beq	.L2732
+	beq	.L2731
 	ldr	w0, [x1,872]
 	cmp	w0, 1
-	bne	.L2733
-.L2732:
+	bne	.L2732
+.L2731:
 	add	x1, x19, :lo12:.LANCHOR2
 	mov	w0, 1
 	strb	w0, [x1,3624]
-.L2733:
+.L2732:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w0, [x1,660]
-	cbz	w0, .L2730
+	cbz	w0, .L2729
 	ldr	w0, [x1,924]
 	cmp	w0, 39
-	bhi	.L2730
+	bhi	.L2729
 	mov	w0, 1
 	strb	w0, [x1,3624]
-.L2730:
+.L2729:
 	adrp	x1, .LANCHOR4
 	add	x0, x1, :lo12:.LANCHOR4
 	mov	x20, x1
 	ldrh	w2, [x0,4016]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L2735
+	beq	.L2734
 	cmp	w22, w2
-	bne	.L2736
+	bne	.L2735
 	add	x19, x19, :lo12:.LANCHOR2
 	ubfiz	x1, x2, 1, 16
 	ldr	x0, [x19,1192]
 	ldrh	w0, [x0,x1]
-	cbz	w0, .L2737
-.L2736:
+	cbz	w0, .L2736
+.L2735:
 	mov	w0, w2
 	bl	update_vpc_list
-.L2737:
+.L2736:
 	add	x1, x20, :lo12:.LANCHOR4
 	mov	w0, -1
 	strh	w0, [x1,4016]
-.L2735:
+.L2734:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2725:
+.L2724:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -17619,21 +17644,21 @@ FtlReadRefresh:
 	stp	x21, x22, [sp,32]
 	adrp	x19, .LANCHOR2
 	ldr	w0, [x2,80]
-	cbz	w0, .L2751
+	cbz	w0, .L2750
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w4, [x2,84]
 	ldr	w1, [x0,1404]
 	cmp	w4, w1
-	bcs	.L2752
+	bcs	.L2751
 	mov	w21, 2048
 	mov	x20, x3
-.L2757:
+.L2756:
 	add	x22, x20, 3472
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w0, [x22,84]
 	ldr	w1, [x1,1404]
 	cmp	w0, w1
-	bcs	.L2756
+	bcs	.L2755
 	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
@@ -17642,7 +17667,7 @@ FtlReadRefresh:
 	add	w0, w0, 1
 	str	w0, [x22,84]
 	cmn	w1, #1
-	beq	.L2755
+	beq	.L2754
 	str	w1, [x29,60]
 	mov	w2, 0
 	str	w0, [x29,80]
@@ -17654,25 +17679,25 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29,56]
 	cmp	w0, 256
-	bne	.L2756
+	bne	.L2755
 	ldr	w0, [x29,52]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L2756:
-	mov	w0, -1
-	b	.L2759
 .L2755:
+	mov	w0, -1
+	b	.L2758
+.L2754:
 	subs	w21, w21, #1
-	bne	.L2757
-	b	.L2756
-.L2752:
+	bne	.L2756
+	b	.L2755
+.L2751:
 	ldr	w0, [x0,904]
 	str	wzr, [x2,80]
 	str	wzr, [x2,84]
 	str	w0, [x2,76]
-	b	.L2766
-.L2751:
+	b	.L2765
+.L2750:
 	add	x5, x19, :lo12:.LANCHOR2
 	mov	w6, 10000
 	mov	w8, 63
@@ -17685,7 +17710,7 @@ FtlReadRefresh:
 	add	w9, w7, 1048576
 	ldr	w4, [x5,1404]
 	cmp	w6, w9
-	bhi	.L2761
+	bhi	.L2760
 	mov	w9, 1000
 	lsr	w3, w3, 10
 	add	w3, w3, 1
@@ -17693,14 +17718,14 @@ FtlReadRefresh:
 	udiv	w3, w4, w3
 	add	w3, w3, w6
 	cmp	w3, w7
-	bcc	.L2761
+	bcc	.L2760
 	ldrh	w3, [x5,3556]
 	tst	w8, w3
-	bne	.L2759
+	bne	.L2758
 	ldr	w2, [x2,100]
 	cmp	w2, w3
-	beq	.L2759
-.L2761:
+	beq	.L2758
+.L2760:
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x0, x1, :lo12:.LANCHOR4
 	ldrh	w1, [x19,3556]
@@ -17709,9 +17734,9 @@ FtlReadRefresh:
 	str	wzr, [x0,3556]
 	str	w1, [x0,3552]
 	str	w7, [x0,3548]
-.L2766:
+.L2765:
 	mov	w0, 0
-.L2759:
+.L2758:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
@@ -17732,55 +17757,55 @@ ftl_do_gc:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldr	w4, [x3,1408]
-	cbnz	w4, .L2920
+	cbnz	w4, .L2919
 	adrp	x4, .LANCHOR1
 	add	x4, x4, :lo12:.LANCHOR1
 	ldr	w5, [x4,3288]
 	cmn	w5, #1
-	beq	.L2920
+	beq	.L2919
 	ldr	w5, [x3,928]
-	cbnz	w5, .L2920
+	cbnz	w5, .L2919
 	ldrh	w5, [x3,3592]
 	cmp	w5, 47
-	bls	.L2920
+	bls	.L2919
 	mov	w24, w1
 	ldrh	w1, [x4,3292]
 	str	w0, [x29,124]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2769
-.L2772:
+	bne	.L2768
+.L2771:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w4, [x0,954]
 	cmp	w4, w2
-	bne	.L2770
-	b	.L2771
-.L2769:
+	bne	.L2769
+	b	.L2770
+.L2768:
 	ldrh	w1, [x3,3712]
 	cmp	w1, w0
-	beq	.L2772
+	beq	.L2771
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w2, 1
-	cbz	w0, .L2772
-	b	.L2920
-.L2770:
+	cbz	w0, .L2771
+	b	.L2919
+.L2769:
 	ldrh	w1, [x0,952]
 	cmp	w1, w2
-	bne	.L2771
+	bne	.L2770
 	ldrh	w3, [x0,956]
 	cmp	w3, w1
-	beq	.L2771
+	beq	.L2770
 	ldrh	w2, [x0,958]
 	cmp	w2, w1
-	beq	.L2771
+	beq	.L2770
 	mov	w1, -1
 	strh	w4, [x0,952]
 	strh	w3, [x0,954]
 	strh	w2, [x0,956]
 	strh	w1, [x0,958]
-.L2771:
+.L2770:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w2, [x29,124]
 	adrp	x21, .LANCHOR4
@@ -17789,17 +17814,17 @@ ftl_do_gc:
 	add	w0, w0, 1
 	add	w0, w0, w2, lsl 7
 	str	w0, [x1,944]
-	bne	.L2783
+	bne	.L2782
 	ldr	w1, [x1,660]
-	cbnz	w1, .L2774
+	cbnz	w1, .L2773
 	adrp	x1, .LANCHOR0+4044
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+4044]
-	cbz	w1, .L2783
-.L2774:
+	cbz	w1, .L2782
+.L2773:
 	add	x20, x19, :lo12:.LANCHOR2
 	ldr	w1, [x20,924]
 	cmp	w1, 39
-	bhi	.L2783
+	bhi	.L2782
 	adrp	x22, .LANCHOR5
 	add	x1, x22, :lo12:.LANCHOR5
 	ldrh	w1, [x1,-136]
@@ -17810,17 +17835,17 @@ ftl_do_gc:
 	mov	w1, 65535
 	ldrh	w0, [x0,3424]
 	cmp	w0, w1
-	bne	.L2783
+	bne	.L2782
 	ldrh	w1, [x20,952]
 	cmp	w1, w0
-	bne	.L2783
+	bne	.L2782
 	ldr	w0, [x20,944]
 	cmp	w0, 1024
-	bhi	.L2775
+	bhi	.L2774
 	ldrh	w0, [x20,3608]
 	cmp	w0, 63
-	bhi	.L2783
-.L2775:
+	bhi	.L2782
+.L2774:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x22, :lo12:.LANCHOR5
 	ldrh	w2, [x0,962]
@@ -17828,28 +17853,28 @@ ftl_do_gc:
 	add	w2, w2, 64
 	strh	wzr, [x1,-136]
 	cmp	w3, w2
-	bgt	.L2783
+	bgt	.L2782
 	str	wzr, [x0,944]
 	ldr	w0, [x0,924]
-	cbnz	w0, .L2776
+	cbnz	w0, .L2775
 	mov	w0, 6
-	b	.L2942
-.L2776:
+	b	.L2941
+.L2775:
 	cmp	w0, 5
-	bhi	.L2777
+	bhi	.L2776
 	mov	w0, 18
-.L2942:
+.L2941:
 	strh	w0, [x1,-136]
-.L2777:
+.L2776:
 	mov	w0, 32
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	uxth	w25, w0
 	cmp	w25, w27
-	beq	.L2782
+	beq	.L2781
 	add	x23, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x23,964]
-	cbz	w0, .L2779
+	cbz	w0, .L2778
 	ldrh	w1, [x23,826]
 	ubfiz	x25, x25, 1, 16
 	ldrh	w3, [x23,756]
@@ -17858,7 +17883,7 @@ ftl_do_gc:
 	ldrh	w2, [x26,x25]
 	add	w1, w1, 1
 	cmp	w2, w1
-	bgt	.L2782
+	bgt	.L2781
 	add	w1, w0, 1
 	str	wzr, [x23,932]
 	uxth	w1, w1
@@ -17868,169 +17893,169 @@ ftl_do_gc:
 	uxth	w20, w0
 	cmp	w20, w27
 	ldr	x1, [x29,112]
-	beq	.L2782
+	beq	.L2781
 	ubfiz	x27, x20, 1, 16
-	adrp	x0, .LC152
+	adrp	x0, .LC153
 	ldrh	w4, [x26,x25]
-	add	x0, x0, :lo12:.LC152
+	add	x0, x0, :lo12:.LC153
 	mov	w2, w20
 	ldrh	w3, [x26,x27]
 	bl	printk
 	ldrh	w0, [x23,964]
 	cmp	w0, 40
-	bls	.L2780
+	bls	.L2779
 	ldr	x0, [x23,1192]
 	ldrh	w0, [x0,x27]
 	cmp	w0, 32
-	bls	.L2780
+	bls	.L2779
 	strh	wzr, [x23,964]
-.L2780:
+.L2779:
 	add	x22, x22, :lo12:.LANCHOR5
 	mov	w0, 6
 	strh	w0, [x22,-136]
-	b	.L2784
-.L2779:
+	b	.L2783
+.L2778:
 	mov	w0, 1
 	strh	w0, [x23,964]
-.L2782:
+.L2781:
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L2784
+	bne	.L2783
 	add	x22, x22, :lo12:.LANCHOR5
 	strh	wzr, [x22,-136]
-.L2783:
+.L2782:
 	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w20, [x0,3424]
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L2946
+	bne	.L2945
 	add	x23, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x23,3712]
 	cmp	w0, w20
-	beq	.L2947
-.L2784:
+	beq	.L2946
+.L2783:
 	mov	w0, 65535
 	cmp	w20, w0
 	cset	w2, eq
-	cbz	w2, .L2797
+	cbz	w2, .L2796
 	ldr	w0, [x29,124]
-	cbnz	w0, .L2797
+	cbnz	w0, .L2796
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w22, 1
 	ldrh	w1, [x0,3608]
 	cmp	w1, 24
-	bhi	.L2798
+	bhi	.L2797
 	cmp	w1, 16
 	ldrh	w22, [x0,824]
-	bls	.L2799
+	bls	.L2798
 	lsr	w22, w22, 5
-	b	.L2798
-.L2799:
+	b	.L2797
+.L2798:
 	cmp	w1, 12
-	bls	.L2800
+	bls	.L2799
 	lsr	w22, w22, 4
-	b	.L2798
-.L2800:
+	b	.L2797
+.L2799:
 	lsr	w0, w22, 2
 	cmp	w1, 9
 	csel	w22, w0, w22, cs
-.L2798:
+.L2797:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x0,960]
 	cmp	w2, w1
-	bcs	.L2802
+	bcs	.L2801
 	ldrh	w1, [x0,3712]
 	mov	w2, 65535
 	cmp	w1, w2
-	bne	.L2803
+	bne	.L2802
 	ldrh	w2, [x0,952]
 	cmp	w2, w1
-	bne	.L2803
+	bne	.L2802
 	adrp	x1, .LANCHOR5-136
 	ldrh	w2, [x1,#:lo12:.LANCHOR5-136]
-	cbnz	w2, .L2804
+	cbnz	w2, .L2803
 	ldr	w1, [x0,1404]
 	ldr	w3, [x0,3900]
 	add	w1, w1, w1, lsl 1
 	cmp	w3, w1, lsr 2
-	bcs	.L2805
-.L2804:
+	bcs	.L2804
+.L2803:
 	add	x21, x21, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x21,3420]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,960]
-	b	.L2806
-.L2805:
+	b	.L2805
+.L2804:
 	mov	w1, 18
 	strh	w1, [x0,960]
-.L2806:
+.L2805:
 	add	x19, x19, :lo12:.LANCHOR2
 	str	wzr, [x19,932]
-	b	.L2920
-.L2803:
+	b	.L2919
+.L2802:
 	add	x0, x21, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3420]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,960]
-.L2802:
+.L2801:
 	cmp	w24, 2
-	bhi	.L2874
+	bhi	.L2873
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w0, [x0,660]
-	cbz	w0, .L2874
+	cbz	w0, .L2873
 	add	w22, w22, 1
 	uxth	w22, w22
-	b	.L2874
-.L2797:
+	b	.L2873
+.L2796:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w3, 65535
 	ldrh	w1, [x0,3712]
 	cmp	w1, w3
-	bne	.L2809
-	cbz	w2, .L2809
+	bne	.L2808
+	cbz	w2, .L2808
 	ldrh	w2, [x0,952]
 	cmp	w2, w1
-	bne	.L2809
+	bne	.L2808
 	add	x2, x21, :lo12:.LANCHOR4
 	ldrh	w2, [x2,3424]
 	cmp	w2, w1
-	beq	.L2810
-.L2815:
+	beq	.L2809
+.L2814:
 	mov	w20, 65535
-	b	.L2809
-.L2810:
+	b	.L2808
+.L2809:
 	ldrh	w2, [x0,3608]
 	adrp	x20, .LANCHOR5
 	ldrh	w1, [x0,960]
 	str	wzr, [x0,932]
 	cmp	w2, w1
-	bls	.L2811
+	bls	.L2810
 	add	x1, x20, :lo12:.LANCHOR5
 	ldrh	w1, [x1,-136]
-	cbnz	w1, .L2812
+	cbnz	w1, .L2811
 	ldr	w1, [x0,1404]
 	ldr	w2, [x0,3900]
 	add	w1, w1, w1, lsl 1
 	cmp	w2, w1, lsr 2
-	bcs	.L2813
-.L2812:
+	bcs	.L2812
+.L2811:
 	add	x0, x21, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3420]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,960]
-	b	.L2814
-.L2813:
+	b	.L2813
+.L2812:
 	mov	w1, 18
 	strh	w1, [x0,960]
-.L2814:
+.L2813:
 	bl	FtlReadRefresh
 	mov	w0, 0
 	bl	List_get_gc_head_node
@@ -18039,14 +18064,14 @@ ftl_do_gc:
 	ldr	x1, [x1,1192]
 	ldrh	w0, [x1,x0]
 	cmp	w0, 4
-	bls	.L2811
+	bls	.L2810
 	add	x20, x20, :lo12:.LANCHOR5
 	ldrh	w2, [x20,-136]
-	b	.L2920
-.L2811:
+	b	.L2919
+.L2810:
 	add	x23, x20, :lo12:.LANCHOR5
 	ldrh	w0, [x23,-136]
-	cbnz	w0, .L2815
+	cbnz	w0, .L2814
 	add	x1, x21, :lo12:.LANCHOR4
 	add	x22, x19, :lo12:.LANCHOR2
 	ldrh	w20, [x1,3420]
@@ -18063,86 +18088,86 @@ ftl_do_gc:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L2816
+	ble	.L2815
 	ldrh	w0, [x22,3608]
 	sub	w20, w20, #1
 	cmp	w0, w20
-	blt	.L2816
+	blt	.L2815
 	bl	FtlReadRefresh
 	ldrh	w2, [x23,-136]
-	b	.L2920
-.L2816:
-	cbnz	w1, .L2815
+	b	.L2919
+.L2815:
+	cbnz	w1, .L2814
 	mov	w0, -1
 	add	x19, x19, :lo12:.LANCHOR2
 	bl	decrement_vpc_count
 	ldrh	w2, [x19,3608]
 	add	w2, w2, 1
-	b	.L2920
-.L2809:
+	b	.L2919
+.L2808:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w22, 2
 	ldr	w0, [x0,660]
 	cmp	w0, wzr
 	csinc	w22, w22, wzr, ne
-	b	.L2808
-.L2874:
+	b	.L2807
+.L2873:
 	mov	w20, 65535
-.L2808:
+.L2807:
 	add	x0, x21, :lo12:.LANCHOR4
 	mov	w2, 65535
 	ldrh	w1, [x0,3424]
 	cmp	w1, w2
-	bne	.L2818
+	bne	.L2817
 	cmp	w20, w1
-	beq	.L2819
+	beq	.L2818
 	strh	w20, [x0,3424]
-	b	.L2820
-.L2819:
+	b	.L2819
+.L2818:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,952]
 	cmp	w0, w20
-	beq	.L2820
+	beq	.L2819
 	ubfiz	x0, x0, 1, 16
 	ldr	x2, [x1,1192]
 	ldrh	w0, [x2,x0]
-	cbnz	w0, .L2821
+	cbnz	w0, .L2820
 	mov	w0, -1
 	strh	w0, [x1,952]
-.L2821:
+.L2820:
 	add	x1, x19, :lo12:.LANCHOR2
 	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w2, [x1,952]
 	strh	w2, [x0,3424]
 	mov	w0, -1
 	strh	w0, [x1,952]
-.L2820:
+.L2819:
 	add	x23, x21, :lo12:.LANCHOR4
 	mov	w1, 65535
 	ldrh	w0, [x23,3424]
 	strb	wzr, [x23,3432]
 	cmp	w0, w1
-	beq	.L2818
+	beq	.L2817
 	bl	IsBlkInGcList
-	cbz	w0, .L2823
+	cbz	w0, .L2822
 	mov	w0, -1
 	strh	w0, [x23,3424]
-.L2823:
+.L2822:
 	adrp	x0, .LANCHOR0+4044
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+4044]
-	cbz	w0, .L2824
+	cbz	w0, .L2823
 	add	x0, x21, :lo12:.LANCHOR4
 	add	x23, x0, 3424
 	ldrh	w0, [x0,3424]
 	bl	ftl_get_blk_mode
 	strb	w0, [x23,8]
-.L2824:
+.L2823:
 	add	x23, x21, :lo12:.LANCHOR4
 	mov	w0, 65535
 	add	x24, x23, 3424
 	ldrh	w1, [x23,3424]
 	cmp	w1, w0
-	beq	.L2818
+	beq	.L2817
 	mov	x0, x24
 	bl	make_superblock
 	strh	wzr, [x23,3426]
@@ -18155,34 +18180,34 @@ ftl_do_gc:
 	strh	wzr, [x0,-134]
 	ldrh	w1, [x1,x2,lsl 1]
 	strh	w1, [x0,-132]
-.L2818:
+.L2817:
 	add	x0, x21, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3424]
 	ldrh	w2, [x1,3616]
 	cmp	w2, w0
-	beq	.L2825
+	beq	.L2824
 	ldrh	w2, [x1,3664]
 	cmp	w2, w0
-	beq	.L2825
+	beq	.L2824
 	ldrh	w1, [x1,3712]
 	cmp	w1, w0
-	bne	.L2826
-.L2825:
+	bne	.L2825
+.L2824:
 	add	x0, x21, :lo12:.LANCHOR4
 	mov	w1, -1
 	strh	w1, [x0,3424]
-.L2826:
+.L2825:
 	add	x23, x21, :lo12:.LANCHOR4
-.L2859:
+.L2858:
 	ldrh	w0, [x23,3424]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L2827
+	bne	.L2826
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w26, 2
 	str	wzr, [x0,932]
-.L2828:
+.L2827:
 	add	x27, x19, :lo12:.LANCHOR2
 	ldrh	w24, [x27,964]
 	mov	w0, w24
@@ -18191,18 +18216,18 @@ ftl_do_gc:
 	mov	w0, 65535
 	strh	w28, [x23,3424]
 	cmp	w28, w0
-	bne	.L2829
+	bne	.L2828
 	strh	wzr, [x27,964]
 	mov	w2, 8
-	b	.L2920
-.L2829:
+	b	.L2919
+.L2828:
 	mov	w0, w28
 	add	w24, w24, 1
 	bl	IsBlkInGcList
-	cbz	w0, .L2830
+	cbz	w0, .L2829
 	strh	w24, [x27,964]
-	b	.L2828
-.L2830:
+	b	.L2827
+.L2829:
 	ldrh	w4, [x27,756]
 	ubfiz	x1, x28, 1, 16
 	ldrh	w0, [x27,824]
@@ -18213,54 +18238,54 @@ ftl_do_gc:
 	ldrh	w3, [x2,x1]
 	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L2832
+	bgt	.L2831
 	cmp	w3, 8
-	bls	.L2833
+	bls	.L2832
 	cmp	w24, 48
-	bls	.L2833
+	bls	.L2832
 	ldrh	w3, [x23,4032]
 	cmp	w3, 35
-	bhi	.L2833
-.L2832:
+	bhi	.L2832
+.L2831:
 	add	x3, x19, :lo12:.LANCHOR2
 	strh	wzr, [x3,964]
-.L2833:
+.L2832:
 	ldrh	w1, [x2,x1]
 	mov	w2, 65535
 	cmp	w20, w2
-	bne	.L2834
+	bne	.L2833
 	cmp	w1, w0
-	blt	.L2834
+	blt	.L2833
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x0,964]
 	cmp	w2, 3
-	bhi	.L2834
+	bhi	.L2833
 	add	x21, x21, :lo12:.LANCHOR4
 	strh	wzr, [x0,964]
 	adrp	x0, .LANCHOR5-136
 	mov	w1, -1
 	strh	w1, [x21,3424]
 	ldrh	w2, [x0,#:lo12:.LANCHOR5-136]
-	b	.L2920
-.L2834:
-	cbnz	w1, .L2835
+	b	.L2919
+.L2833:
+	cbnz	w1, .L2834
 	mov	w0, -1
 	bl	decrement_vpc_count
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,964]
 	add	w0, w0, 1
 	strh	w0, [x1,964]
-	b	.L2828
-.L2835:
+	b	.L2827
+.L2834:
 	adrp	x0, .LANCHOR0
 	strb	wzr, [x23,3432]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbz	w0, .L2836
+	cbz	w0, .L2835
 	mov	w0, w28
 	bl	ftl_get_blk_mode
 	strb	w0, [x23,3432]
-.L2836:
+.L2835:
 	add	x24, x23, 3424
 	mov	x0, x24
 	bl	make_superblock
@@ -18274,12 +18299,12 @@ ftl_do_gc:
 	strh	w0, [x1,-132]
 	strh	wzr, [x23,3426]
 	strb	wzr, [x23,3430]
-.L2827:
+.L2826:
 	ldr	w0, [x29,124]
 	cmp	w0, 1
-	bne	.L2837
+	bne	.L2836
 	bl	FtlReadRefresh
-.L2837:
+.L2836:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 1
 	str	w1, [x0,928]
@@ -18287,23 +18312,23 @@ ftl_do_gc:
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrh	w26, [x0,824]
 	ldrb	w1, [x1,4044]
-	cbz	w1, .L2838
+	cbz	w1, .L2837
 	ldrb	w1, [x23,3432]
 	cmp	w1, 1
-	bne	.L2838
+	bne	.L2837
 	ldrh	w26, [x0,826]
-.L2838:
+.L2837:
 	ldrh	w0, [x23,3426]
 	add	w1, w0, w22
 	cmp	w1, w26
-	ble	.L2839
+	ble	.L2838
 	sub	w22, w26, w0
 	uxth	w22, w22
-.L2839:
+.L2838:
 	mov	w27, 0
-.L2840:
+.L2839:
 	cmp	w22, w27, uxth
-	bls	.L2847
+	bls	.L2846
 	add	x1, x23, 3424
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w3, [x1,2]
@@ -18311,14 +18336,14 @@ ftl_do_gc:
 	mov	x0, 0
 	add	w3, w3, w27
 	mov	w24, w0
-.L2848:
+.L2847:
 	cmp	w6, w0, uxth
-	bls	.L2948
+	bls	.L2947
 	add	x2, x1, x0, lsl 1
 	mov	w4, 65535
 	ldrh	w2, [x2,16]
 	cmp	w2, w4
-	beq	.L2841
+	beq	.L2840
 	add	x5, x19, :lo12:.LANCHOR2
 	mov	w4, 56
 	orr	w2, w3, w2, lsl 10
@@ -18328,19 +18353,19 @@ ftl_do_gc:
 	add	x4, x5, x4
 	uxth	w24, w24
 	str	w2, [x4,4]
-.L2841:
+.L2840:
 	add	x0, x0, 1
-	b	.L2848
-.L2948:
+	b	.L2847
+.L2947:
 	add	x25, x19, :lo12:.LANCHOR2
 	ldrb	w2, [x23,3432]
 	mov	w1, w24
 	mov	x28, 0
 	ldr	x0, [x25,1032]
 	bl	FlashReadPages
-.L2843:
+.L2842:
 	cmp	w24, w28, uxth
-	bls	.L2949
+	bls	.L2948
 	mov	x0, 56
 	mul	x5, x28, x0
 	ldr	x0, [x25,1032]
@@ -18348,11 +18373,11 @@ ftl_do_gc:
 	ldr	w0, [x0,x5]
 	cmn	w0, #1
 	ldr	x4, [x1,16]
-	beq	.L2877
+	beq	.L2876
 	ldrh	w0, [x4]
 	mov	w1, 61589
 	cmp	w0, w1
-	bne	.L2877
+	bne	.L2876
 	ldr	w0, [x4,8]
 	add	x1, x29, 136
 	mov	w2, 0
@@ -18367,7 +18392,7 @@ ftl_do_gc:
 	and	w0, w0, 2147483647
 	ldr	w1, [x2,4]
 	cmp	w0, w1
-	bne	.L2877
+	bne	.L2876
 	adrp	x0, .LANCHOR5
 	mov	x3, 56
 	add	x1, x0, :lo12:.LANCHOR5
@@ -18415,17 +18440,17 @@ ftl_do_gc:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbnz	w0, .L2845
+	cbnz	w0, .L2844
 	ldr	x2, [x29,112]
 	ldr	w1, [x23,4000]
 	ldrb	w0, [x2,7]
 	cmp	w1, w0
-	beq	.L2845
+	beq	.L2844
 	ldrh	w0, [x2,4]
-	cbnz	w0, .L2877
-.L2845:
+	cbnz	w0, .L2876
+.L2844:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2877
+	cbz	w0, .L2876
 	add	x21, x21, :lo12:.LANCHOR4
 	mov	w0, -1
 	add	x19, x19, :lo12:.LANCHOR2
@@ -18435,61 +18460,61 @@ ftl_do_gc:
 	str	wzr, [x19,928]
 	strh	wzr, [x21,3426]
 	ldrh	w2, [x0,-136]
-	b	.L2920
-.L2877:
+	b	.L2919
+.L2876:
 	add	x28, x28, 1
-	b	.L2843
-.L2949:
+	b	.L2842
+.L2948:
 	add	w27, w27, 1
-	b	.L2840
-.L2847:
+	b	.L2839
+.L2846:
 	ldrh	w0, [x23,3426]
 	add	w22, w22, w0
 	uxth	w22, w22
 	strh	w22, [x23,3426]
 	cmp	w22, w26
-	bcc	.L2849
+	bcc	.L2848
 	ldr	w0, [x23,4000]
 	adrp	x22, .LANCHOR5
-	cbz	w0, .L2850
+	cbz	w0, .L2849
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2850
+	cbz	w0, .L2849
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x22, x22, :lo12:.LANCHOR5
 	str	wzr, [x19,928]
 	ldrh	w2, [x22,-136]
-	b	.L2920
-.L2850:
+	b	.L2919
+.L2849:
 	add	x22, x22, :lo12:.LANCHOR5
 	ldrh	w22, [x22,-134]
-	cbnz	w22, .L2851
+	cbnz	w22, .L2850
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x23,3424]
 	ldr	x0, [x0,1192]
 	ldrh	w0, [x0,x1,lsl 1]
-	cbz	w0, .L2851
-.L2852:
+	cbz	w0, .L2850
+.L2851:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w0, [x0,1404]
 	cmp	w22, w0
-	bcs	.L2857
+	bcs	.L2856
 	mov	w0, w22
 	add	x1, x29, 140
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,140]
 	cmn	w0, #1
-	beq	.L2853
+	beq	.L2852
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x23,3424]
 	cmp	w1, w0, uxth
-	bne	.L2853
-.L2857:
+	bne	.L2852
+.L2856:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,1404]
 	cmp	w22, w1
-	bcc	.L2851
+	bcc	.L2850
 	ldrh	w1, [x23,3424]
 	ldr	x0, [x0,1192]
 	strh	wzr, [x0,x1,lsl 1]
@@ -18498,31 +18523,31 @@ ftl_do_gc:
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L2851
-.L2853:
+	b	.L2850
+.L2852:
 	add	w22, w22, 1
-	b	.L2852
-.L2851:
+	b	.L2851
+.L2850:
 	mov	w0, -1
 	strh	w0, [x23,3424]
-.L2849:
+.L2848:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,3608]
 	cmp	w0, 2
-	bhi	.L2858
+	bhi	.L2857
 	ldrh	w22, [x1,824]
-	b	.L2859
-.L2858:
+	b	.L2858
+.L2857:
 	str	wzr, [x1,928]
 	adrp	x1, .LANCHOR5-136
 	ldrh	w2, [x1,#:lo12:.LANCHOR5-136]
 	cmp	w2, wzr
 	csinc	w2, w2, w0, ne
-	b	.L2920
-.L2947:
+	b	.L2919
+.L2946:
 	ldrh	w25, [x23,952]
 	cmp	w25, w20
-	bne	.L2784
+	bne	.L2783
 	ldrh	w0, [x23,3608]
 	mov	w2, 1024
 	ldr	w1, [x23,944]
@@ -18530,37 +18555,37 @@ ftl_do_gc:
 	mov	w0, 5120
 	csel	w0, w0, w2, cc
 	cmp	w1, w0
-	bls	.L2784
+	bls	.L2783
 	adrp	x0, .LANCHOR5-136
 	str	wzr, [x23,944]
 	strh	wzr, [x0,#:lo12:.LANCHOR5-136]
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	cmp	w20, w25
-	bne	.L2786
+	bne	.L2785
 	ldrh	w1, [x23,3608]
 	ldrh	w0, [x23,962]
 	cmp	w1, w0
-	bcs	.L2787
+	bcs	.L2786
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	uxth	w0, w0
 	cmp	w0, w20
-	beq	.L2796
+	beq	.L2795
 	ldr	w2, [x23,868]
 	uxtw	x1, w0
-	cbnz	w2, .L2789
+	cbnz	w2, .L2788
 	ldrh	w0, [x23,776]
 	cmp	w0, 3
-	beq	.L2789
+	beq	.L2788
 	ldr	w0, [x23,872]
-	cbnz	w0, .L2789
+	cbnz	w0, .L2788
 	ldr	w0, [x23,660]
-	cbnz	w0, .L2789
+	cbnz	w0, .L2788
 	adrp	x0, .LANCHOR0+4044
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+4044]
-	cbz	w0, .L2790
-.L2789:
+	cbz	w0, .L2789
+.L2788:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldr	x0, [x2,1192]
 	ldrh	w4, [x0,x1,lsl 1]
@@ -18574,7 +18599,7 @@ ftl_do_gc:
 	csel	w0, w1, w0, eq
 	add	w0, w3, w0
 	cmp	w4, w0
-	bgt	.L2792
+	bgt	.L2791
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	uxth	w20, w0
@@ -18583,45 +18608,45 @@ ftl_do_gc:
 	ldr	w2, [x0,3900]
 	add	w1, w1, w1, lsl 1
 	cmp	w2, w1, lsr 2
-	bhi	.L2945
+	bhi	.L2944
 	mov	w1, 160
-.L2943:
+.L2942:
 	strh	w1, [x0,962]
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L2796
-	b	.L2786
-.L2792:
+	beq	.L2795
+	b	.L2785
+.L2791:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 128
-	b	.L2944
-.L2790:
+	b	.L2943
+.L2789:
 	ldr	x2, [x23,1192]
 	ldrh	w1, [x2,x1,lsl 1]
 	cmp	w1, 7
-	bhi	.L2795
+	bhi	.L2794
 	bl	List_get_gc_head_node
 	uxth	w20, w0
 	add	x0, x19, :lo12:.LANCHOR2
-.L2945:
+.L2944:
 	mov	w1, 128
-	b	.L2943
-.L2795:
+	b	.L2942
+.L2794:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 64
-.L2944:
+.L2943:
 	strh	w1, [x0,962]
-	b	.L2796
-.L2787:
+	b	.L2795
+.L2786:
 	mov	w0, 80
 	strh	w0, [x23,962]
-	b	.L2796
-.L2786:
+	b	.L2795
+.L2785:
 	add	x5, x19, :lo12:.LANCHOR2
 	ubfiz	x4, x20, 1, 32
-	adrp	x0, .LC153
+	adrp	x0, .LC154
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC153
+	add	x0, x0, :lo12:.LC154
 	ldr	x3, [x5,1192]
 	ldr	x6, [x5,1176]
 	ldrh	w2, [x5,3608]
@@ -18629,13 +18654,13 @@ ftl_do_gc:
 	ldrh	w5, [x5,960]
 	ldrh	w4, [x6,x4]
 	bl	printk
-.L2796:
+.L2795:
 	bl	FtlGcReFreshBadBlk
-	b	.L2784
-.L2946:
+	b	.L2783
+.L2945:
 	mov	w20, w0
-	b	.L2784
-.L2920:
+	b	.L2783
+.L2919:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -18661,40 +18686,40 @@ FtlCacheWriteBack:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldr	w22, [x0,1408]
-	cbnz	w22, .L2952
+	cbnz	w22, .L2951
 	ldr	w1, [x0,976]
-	cbz	w1, .L2952
+	cbz	w1, .L2951
 	adrp	x0, .LANCHOR0+4044
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+4044]
-	cbz	w0, .L2954
+	cbz	w0, .L2953
 	ldrb	w0, [x20,8]
 	cmp	w0, 1
 	cset	w22, eq
-.L2954:
+.L2953:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrb	w3, [x20,9]
-	adrp	x24, .LC154
+	adrp	x24, .LC155
 	mov	w2, w22
 	mov	w23, 0
 	mov	w25, 56
 	ldr	x0, [x0,1040]
-	add	x24, x24, :lo12:.LC154
+	add	x24, x24, :lo12:.LC155
 	bl	FlashProgPages
-.L2955:
+.L2954:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,976]
 	cmp	w23, w1
-	bcs	.L2973
+	bcs	.L2972
 	umull	x21, w23, w25
 	ldr	x1, [x0,1040]
 	add	x0, x1, x21
 	ldr	w1, [x1,x21]
 	cmn	w1, #1
-	beq	.L2976
+	beq	.L2975
 	ldr	w1, [x0,4]
-	cbz	w22, .L2990
+	cbz	w22, .L2989
 	orr	w1, w1, -2147483648
-.L2990:
+.L2989:
 	ldr	w0, [x0,24]
 	mov	w2, 1
 	str	w1, [x29,108]
@@ -18706,7 +18731,7 @@ FtlCacheWriteBack:
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2959
+	beq	.L2958
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -18714,60 +18739,60 @@ FtlCacheWriteBack:
 	ldr	x2, [x26,1192]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2960
+	cbnz	w2, .L2959
 	mov	x0, x24
 	bl	printk
-.L2960:
+.L2959:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2959:
+.L2958:
 	add	w23, w23, 1
-	b	.L2955
-.L2992:
+	b	.L2954
+.L2991:
 	mov	w20, 16386
-.L2972:
+.L2971:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,966]
-	cbz	w0, .L2973
+	cbz	w0, .L2972
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w20, w20, #1
-	bne	.L2972
-.L2973:
+	bne	.L2971
+.L2972:
 	add	x19, x19, :lo12:.LANCHOR2
 	str	wzr, [x19,976]
-	b	.L2952
-.L2976:
+	b	.L2951
+.L2975:
 	adrp	x25, .LANCHOR4
-	adrp	x26, .LC154
+	adrp	x26, .LC155
 	mov	w24, 0
 	mov	w27, 56
 	add	x25, x25, :lo12:.LANCHOR4
-	add	x26, x26, :lo12:.LC154
-.L2956:
+	add	x26, x26, :lo12:.LC155
+.L2955:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,976]
 	cmp	w24, w1
-	bcs	.L2992
+	bcs	.L2991
 	umull	x21, w24, w27
 	ldr	x0, [x0,1040]
 	mov	w1, -1
 	mov	w28, 1
 	str	w1, [x0,x21]
-.L2962:
+.L2961:
 	add	x23, x19, :lo12:.LANCHOR2
 	ldr	x0, [x23,1040]
 	add	x1, x0, x21
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
 	ldr	w0, [x1,4]
-	bne	.L2993
+	bne	.L2992
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20]
 	cmp	w1, w0, uxth
-	bne	.L2963
+	bne	.L2962
 	ldr	x2, [x23,1192]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w3, [x20,4]
@@ -18778,12 +18803,12 @@ FtlCacheWriteBack:
 	ldrh	w0, [x23,824]
 	strh	w0, [x20,2]
 	strh	wzr, [x20,4]
-.L2963:
+.L2962:
 	ldrh	w0, [x20,4]
-	cbnz	w0, .L2964
+	cbnz	w0, .L2963
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L2964:
+.L2963:
 	add	x23, x19, :lo12:.LANCHOR2
 	ldr	w0, [x25,3568]
 	add	w0, w0, 1
@@ -18808,17 +18833,17 @@ FtlCacheWriteBack:
 	ldr	x0, [x23,1040]
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
-	bne	.L2965
+	bne	.L2964
 	str	w28, [x23,1408]
-.L2965:
+.L2964:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w0, [x0,1408]
-	cbz	w0, .L2962
-	b	.L2952
-.L2993:
-	cbz	w22, .L2991
+	cbz	w0, .L2961
+	b	.L2951
+.L2992:
+	cbz	w22, .L2990
 	orr	w0, w0, -2147483648
-.L2991:
+.L2990:
 	str	w0, [x29,108]
 	mov	w2, 1
 	ldr	w0, [x1,24]
@@ -18830,7 +18855,7 @@ FtlCacheWriteBack:
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2969
+	beq	.L2968
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -18838,16 +18863,16 @@ FtlCacheWriteBack:
 	ldr	x2, [x23,1192]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2970
+	cbnz	w2, .L2969
 	mov	x0, x26
 	bl	printk
-.L2970:
+.L2969:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2969:
+.L2968:
 	add	w24, w24, 1
-	b	.L2956
-.L2952:
+	b	.L2955
+.L2951:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -18865,17 +18890,17 @@ FtlSysFlush:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR2+1408]
-	cbnz	w0, .L2995
+	cbnz	w0, .L2994
 	adrp	x0, .LANCHOR1+3288
 	ldr	w0, [x0,#:lo12:.LANCHOR1+3288]
 	cmn	w0, #1
-	beq	.L2995
+	beq	.L2994
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	mov	w0, 1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2995:
+.L2994:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -18889,9 +18914,9 @@ FtlDeInit:
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR1+3288]
 	cmp	w0, 1
-	bne	.L3000
+	bne	.L2999
 	bl	FtlSysFlush
-.L3000:
+.L2999:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -18934,45 +18959,45 @@ ftl_discard:
 	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
 	mov	w0, -1
 	cmp	w2, w1
-	bhi	.L3004
+	bhi	.L3003
 	adrp	x0, .LANCHOR1+3288
 	ldr	w1, [x0,#:lo12:.LANCHOR1+3288]
 	cmn	w1, #1
 	mov	w0, w1
-	beq	.L3004
+	beq	.L3003
 	cmp	w19, 31
-	bls	.L3019
+	bls	.L3018
 	adrp	x22, .LANCHOR2
 	add	x21, x22, :lo12:.LANCHOR2
 	ldr	w0, [x21,1408]
-	cbnz	w0, .L3019
+	cbnz	w0, .L3018
 	bl	FtlCacheWriteBack
 	ldrh	w1, [x21,830]
 	udiv	w21, w20, w1
 	msub	w20, w1, w21, w20
 	uxth	w20, w20
-	cbz	w20, .L3007
+	cbz	w20, .L3006
 	sub	w1, w1, w20
 	add	w21, w21, 1
 	cmp	w1, w19
 	csel	w1, w1, w19, ls
 	sub	w19, w19, w1, uxth
-.L3007:
+.L3006:
 	mov	w0, -1
 	adrp	x23, .LANCHOR5
 	str	w0, [x29,76]
-.L3008:
+.L3007:
 	add	x20, x22, :lo12:.LANCHOR2
 	ldrh	w0, [x20,830]
 	cmp	w19, w0
-	bcc	.L3020
+	bcc	.L3019
 	mov	w0, w21
 	add	x1, x29, 72
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,72]
 	cmn	w0, #1
-	beq	.L3009
+	beq	.L3008
 	add	x1, x23, :lo12:.LANCHOR5
 	mov	w2, 1
 	ldr	w0, [x1,-120]
@@ -18988,24 +19013,24 @@ ftl_discard:
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L3009:
+.L3008:
 	add	x0, x22, :lo12:.LANCHOR2
 	add	w21, w21, 1
 	ldrh	w0, [x0,830]
 	sub	w19, w19, w0
-	b	.L3008
-.L3020:
+	b	.L3007
+.L3019:
 	adrp	x0, .LANCHOR5
 	add	x0, x0, :lo12:.LANCHOR5
 	ldr	w1, [x0,-120]
 	cmp	w1, 32
-	bls	.L3019
+	bls	.L3018
 	str	wzr, [x0,-120]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L3019:
+.L3018:
 	mov	w0, 0
-.L3004:
+.L3003:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -19026,12 +19051,12 @@ FtlGcFreeTempBlock:
 	stp	x25, x26, [sp,64]
 	ldr	w3, [x2,1408]
 	ldrh	w1, [x2,824]
-	cbnz	w3, .L3057
+	cbnz	w3, .L3056
 	ldrh	w20, [x2,3712]
 	mov	w4, 65535
 	cmp	w20, w4
-	bne	.L3024
-.L3033:
+	bne	.L3023
+.L3032:
 	add	x20, x19, :lo12:.LANCHOR2
 	adrp	x21, .LANCHOR4
 	add	x22, x21, :lo12:.LANCHOR4
@@ -19040,7 +19065,7 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x20,3712]
 	str	wzr, [x22,4024]
 	cmp	w1, w0
-	beq	.L3057
+	beq	.L3056
 	bl	FtlCacheWriteBack
 	mov	w26, 12
 	ldrb	w0, [x23,7]
@@ -19054,44 +19079,44 @@ FtlGcFreeTempBlock:
 	ldr	w0, [x20,884]
 	add	w0, w1, w0
 	str	w0, [x20,884]
-	b	.L3034
-.L3024:
-	cbz	w0, .L3027
+	b	.L3033
+.L3023:
+	cbz	w0, .L3026
 	adrp	x0, .LANCHOR1
 	add	x0, x0, :lo12:.LANCHOR1
 	ldrh	w5, [x0,3292]
 	cmp	w5, w4
-	beq	.L3028
-.L3029:
-	mov	w1, 2
-	b	.L3027
+	beq	.L3027
 .L3028:
+	mov	w1, 2
+	b	.L3026
+.L3027:
 	strh	w3, [x0,3292]
 	ldrh	w0, [x2,3608]
 	cmp	w0, 17
-	bhi	.L3029
-.L3027:
+	bhi	.L3028
+.L3026:
 	add	x21, x19, :lo12:.LANCHOR2
 	add	x0, x21, 3712
 	bl	FtlGcScanTempBlk
 	str	w0, [x29,92]
 	cmn	w0, #1
-	beq	.L3030
+	beq	.L3029
 	ubfiz	x20, x20, 1, 16
 	ldr	x1, [x21,1176]
 	ldrh	w0, [x1,x20]
 	cmp	w0, 4
-	bls	.L3031
+	bls	.L3030
 	sub	w0, w0, #5
 	strh	w0, [x1,x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L3031:
+.L3030:
 	adrp	x0, .LANCHOR4
 	add	x1, x0, :lo12:.LANCHOR4
 	mov	x19, x0
 	ldr	w2, [x1,4024]
-	cbnz	w2, .L3032
+	cbnz	w2, .L3031
 	ldr	w0, [x1,3568]
 	add	w0, w0, 1
 	str	w0, [x1,3568]
@@ -19099,45 +19124,45 @@ FtlGcFreeTempBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L3032:
+.L3031:
 	add	x0, x19, :lo12:.LANCHOR4
 	str	wzr, [x0,4024]
 	mov	w0, 1
-	b	.L3023
-.L3030:
+	b	.L3022
+.L3029:
 	adrp	x0, .LANCHOR1+3292
 	mov	w1, 65535
 	ldrh	w2, [x0,#:lo12:.LANCHOR1+3292]
 	mov	w0, 1
 	cmp	w2, w1
-	bne	.L3023
-	b	.L3033
-.L3037:
+	bne	.L3022
+	b	.L3032
+.L3036:
 	ldr	w1, [x23,4]
 	cmp	w0, w1
-	bne	.L3055
-.L3036:
+	bne	.L3054
+.L3035:
 	add	w22, w22, 1
 	uxth	w22, w22
-.L3034:
+.L3033:
 	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w0, [x0,4034]
 	cmp	w0, w22
-	bls	.L3058
+	bls	.L3057
 	umull	x24, w22, w26
 	ldr	x25, [x20,992]
 	ldr	w1, [x20,1404]
 	add	x23, x25, x24
 	ldr	w0, [x23,8]
 	cmp	w0, w1
-	bcs	.L3055
+	bcs	.L3054
 	add	x1, x29, 92
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,92]
 	ldr	w1, [x25,x24]
 	cmp	w0, w1
-	bne	.L3037
+	bne	.L3036
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	mov	w24, w0
@@ -19146,36 +19171,36 @@ FtlGcFreeTempBlock:
 	mov	w2, 1
 	bl	log2phys
 	mov	w0, w24
-	b	.L3056
-.L3055:
+	b	.L3055
+.L3054:
 	ldrh	w0, [x20,3712]
-.L3056:
+.L3055:
 	bl	decrement_vpc_count
-	b	.L3036
-.L3058:
+	b	.L3035
+.L3057:
 	mov	w0, -1
 	adrp	x20, .LANCHOR0
 	bl	decrement_vpc_count
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbz	w0, .L3039
+	cbz	w0, .L3038
 	add	x1, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC155
-	add	x0, x0, :lo12:.LC155
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
 	ldrh	w1, [x1,3712]
 	bl	printk
-.L3039:
+.L3038:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,3712]
 	ldr	x1, [x1,1192]
 	ubfiz	x2, x0, 1, 16
 	ldrh	w1, [x1,x2]
-	cbz	w1, .L3040
+	cbz	w1, .L3039
 	bl	INSERT_DATA_LIST
-	b	.L3041
-.L3040:
+	b	.L3040
+.L3039:
 	bl	INSERT_FREE_LIST
-.L3041:
+.L3040:
 	add	x23, x21, :lo12:.LANCHOR4
 	add	x22, x19, :lo12:.LANCHOR2
 	mov	w24, -1
@@ -19186,37 +19211,37 @@ FtlGcFreeTempBlock:
 	bl	FtlVpcTblFlush
 	strh	w24, [x23,3424]
 	ldr	w0, [x22,660]
-	cbz	w0, .L3042
+	cbz	w0, .L3041
 	ldr	w0, [x22,924]
 	cmp	w0, 39
-	bhi	.L3042
+	bhi	.L3041
 	ldrh	w0, [x23,3420]
 	ldrh	w1, [x22,3608]
 	cmp	w1, w0
-	bcs	.L3057
+	bcs	.L3056
 	lsl	w0, w0, 1
 	strh	w0, [x22,960]
-.L3057:
+.L3056:
 	mov	w0, 0
-	b	.L3023
-.L3042:
+	b	.L3022
+.L3041:
 	add	x21, x21, :lo12:.LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x21,3420]
 	ldrh	w0, [x19,3608]
 	add	w2, w1, w1, lsl 1
 	cmp	w0, w2, lsr 2
-	ble	.L3057
+	ble	.L3056
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x20,4044]
-	cbz	w0, .L3043
+	cbz	w0, .L3042
 	sub	w1, w1, #2
 	strh	w1, [x19,960]
-	b	.L3057
-.L3043:
+	b	.L3056
+.L3042:
 	mov	w1, 20
 	strh	w1, [x19,960]
-.L3023:
+.L3022:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -19240,14 +19265,14 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19,3714]
 	ldrh	w0, [x19,824]
 	cmp	w1, w0
-	bcc	.L3059
+	bcc	.L3058
 	add	x0, x19, 3760
 	bl	FtlMapBlkWriteDumpData
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	adrp	x0, .LANCHOR4+4024
 	str	wzr, [x0,#:lo12:.LANCHOR4+4024]
-.L3059:
+.L3058:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -19303,14 +19328,14 @@ FtlSysBlkInit:
 	ldrh	w1, [x22,3904]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L3063
-.L3065:
+	bne	.L3062
+.L3064:
 	mov	w21, -1
-	b	.L3064
-.L3063:
+	b	.L3063
+.L3062:
 	bl	FtlLoadSysInfo
 	mov	w21, w0
-	cbnz	w0, .L3065
+	cbnz	w0, .L3064
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -19323,25 +19348,25 @@ FtlSysBlkInit:
 	ldrh	w2, [x22,862]
 	mov	x1, 0
 	ldr	x0, [x22,1272]
-.L3066:
+.L3065:
 	cmp	w1, w2
 	mov	w3, w1
-	bge	.L3070
+	bge	.L3069
 	add	x4, x0, x1, lsl 4
 	add	x1, x1, 1
 	ldr	w4, [x4,4]
-	tbz	w4, #31, .L3066
-.L3070:
+	tbz	w4, #31, .L3065
+.L3069:
 	add	x0, x19, :lo12:.LANCHOR2
 	cmp	w3, w2
 	ldrh	w1, [x0,3556]
 	add	w1, w1, 1
 	strh	w1, [x0,3556]
-	blt	.L3067
+	blt	.L3066
 	add	x20, x20, :lo12:.LANCHOR4
 	ldrh	w0, [x20,4076]
-	cbz	w0, .L3071
-.L3067:
+	cbz	w0, .L3070
+.L3066:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x1,3616]
 	ldr	x4, [x1,1192]
@@ -19371,18 +19396,18 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L3071:
+.L3070:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w1, 65535
 	add	x23, x20, 3616
 	ldrh	w0, [x20,3616]
 	cmp	w0, w1
-	beq	.L3072
+	beq	.L3071
 	ldrh	w1, [x20,3620]
-	cbnz	w1, .L3072
+	cbnz	w1, .L3071
 	ldrh	w1, [x20,3668]
 	add	x22, x20, 3664
-	cbnz	w1, .L3072
+	cbnz	w1, .L3071
 	bl	FtlGcRefreshOpenBlock
 	ldrh	w0, [x20,3664]
 	bl	FtlGcRefreshOpenBlock
@@ -19391,17 +19416,17 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	x0, x22
 	bl	allocate_new_data_superblock
-.L3072:
+.L3071:
 	adrp	x0, .LANCHOR0+88
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+88]
-	cbnz	w0, .L3073
+	cbnz	w0, .L3072
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x19,3556]
 	and	w0, w0, 31
-	cbnz	w0, .L3064
-.L3073:
+	cbnz	w0, .L3063
+.L3072:
 	bl	FtlVpcCheckAndModify
-.L3064:
+.L3063:
 	mov	w0, w21
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -19421,7 +19446,7 @@ FtlLowFormat:
 	add	x20, x19, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	ldr	w21, [x20,1408]
-	cbnz	w21, .L3081
+	cbnz	w21, .L3080
 	ldrh	w2, [x20,860]
 	mov	w1, w21
 	ldr	x0, [x20,1256]
@@ -19437,15 +19462,15 @@ FtlLowFormat:
 	str	w21, [x20,880]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L3082
+	cbz	w0, .L3081
 	bl	FtlMakeBbt
-.L3082:
+.L3081:
 	mov	w0, 0
-.L3083:
+.L3082:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x1,830]
 	cmp	w0, w2, lsl 7
-	bge	.L3110
+	bge	.L3109
 	ubfiz	x3, x0, 2, 16
 	ldr	x4, [x1,1096]
 	mvn	w2, w0
@@ -19457,15 +19482,15 @@ FtlLowFormat:
 	movk	w1, 0xa0f, lsl 16
 	uxth	w0, w0
 	str	w1, [x2,x3]
-	b	.L3083
-.L3110:
+	b	.L3082
+.L3109:
 	ldrh	w21, [x1,764]
 	mov	w20, 0
-.L3085:
+.L3084:
 	add	x22, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x22,766]
 	cmp	w0, w21
-	bls	.L3111
+	bls	.L3110
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -19473,17 +19498,17 @@ FtlLowFormat:
 	add	w0, w20, w0
 	uxth	w21, w21
 	uxth	w20, w0
-	b	.L3085
-.L3111:
+	b	.L3084
+.L3110:
 	ldrh	w0, [x22,756]
 	sub	w1, w20, #3
 	cmp	w1, w0, lsl 1
-	bge	.L3087
-.L3091:
+	bge	.L3086
+.L3090:
 	mov	w20, 0
 	mov	w21, w20
-	b	.L3088
-.L3087:
+	b	.L3087
+.L3086:
 	udiv	w20, w20, w0
 	ldr	w0, [x22,856]
 	add	w0, w20, w0
@@ -19491,22 +19516,22 @@ FtlLowFormat:
 	ldrh	w0, [x22,760]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w20, [x22,764]
-.L3089:
+.L3088:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,766]
 	cmp	w0, w20
-	bls	.L3091
+	bls	.L3090
 	mov	w0, w20
 	mov	w1, 1
 	add	w20, w20, 1
 	bl	FtlLowFormatEraseBlock
 	uxth	w20, w20
-	b	.L3089
-.L3088:
+	b	.L3088
+.L3087:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x0,764]
 	cmp	w1, w21
-	bls	.L3112
+	bls	.L3111
 	mov	w0, w21
 	mov	w1, 0
 	add	w21, w21, 1
@@ -19514,8 +19539,8 @@ FtlLowFormat:
 	add	w0, w20, w0
 	uxth	w21, w21
 	uxth	w20, w0
-	b	.L3088
-.L3112:
+	b	.L3087
+.L3111:
 	ldrh	w1, [x0,766]
 	adrp	x21, .LANCHOR4
 	ldrh	w2, [x0,756]
@@ -19530,51 +19555,51 @@ FtlLowFormat:
 	mov	w4, 24
 	mul	w4, w2, w4
 	cmp	w20, w4
-	ble	.L3093
+	ble	.L3092
 	sub	w1, w1, w20
 	udiv	w1, w1, w2
 	str	w1, [x0,1404]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x6,3420]
-.L3093:
+.L3092:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w0, [x0,660]
 	cmp	w0, 1
-	bne	.L3094
+	bne	.L3093
 	add	x1, x21, :lo12:.LANCHOR4
 	udiv	w0, w20, w2
 	ldrh	w4, [x1,3420]
 	add	w0, w4, w0
 	add	w0, w4, w0, asr 2
 	strh	w0, [x1,3420]
-.L3094:
+.L3093:
 	adrp	x22, .LANCHOR0
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbz	w0, .L3095
+	cbz	w0, .L3094
 	add	x1, x21, :lo12:.LANCHOR4
 	udiv	w0, w20, w2
 	ldrh	w4, [x1,3420]
 	add	w0, w4, w0
 	add	w0, w4, w0, asr 2
 	strh	w0, [x1,3420]
-.L3095:
+.L3094:
 	add	x6, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x6,818]
-	cbz	w1, .L3097
+	cbz	w1, .L3096
 	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w4, [x0,3420]
 	add	w4, w4, w1, lsr 1
 	strh	w4, [x0,3420]
 	mul	w4, w1, w2
 	cmp	w4, w20
-	ble	.L3097
+	ble	.L3096
 	add	w1, w1, 32
 	str	w3, [x6,1404]
 	add	w1, w5, w1
 	strh	w1, [x0,3420]
-.L3097:
+.L3096:
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x20, x21, :lo12:.LANCHOR4
 	add	x22, x22, :lo12:.LANCHOR0
@@ -19612,19 +19637,19 @@ FtlLowFormat:
 	strb	wzr, [x20,6]
 	strh	wzr, [x19,3616]
 	bl	ftl_memset
-.L3099:
+.L3098:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L3100
+	cbnz	w0, .L3099
 	ldrh	w1, [x20]
 	ldr	x0, [x19,1192]
 	strh	w23, [x0,x1,lsl 1]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L3099
-.L3100:
+	b	.L3098
+.L3099:
 	ldr	w0, [x19,876]
 	mov	w22, -1
 	str	w0, [x20,12]
@@ -19643,19 +19668,19 @@ FtlLowFormat:
 	strh	w1, [x19,3664]
 	mov	w1, 1
 	strb	w1, [x19,3672]
-.L3101:
+.L3100:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L3102
+	cbnz	w0, .L3101
 	ldrh	w1, [x20]
 	ldr	x0, [x19,1192]
 	strh	w22, [x0,x1,lsl 1]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L3101
-.L3102:
+	b	.L3100
+.L3101:
 	ldr	w0, [x19,876]
 	add	x21, x21, :lo12:.LANCHOR4
 	str	w0, [x20,12]
@@ -19679,11 +19704,11 @@ FtlLowFormat:
 	str	w0, [x19,876]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L3081
+	cbnz	w0, .L3080
 	adrp	x0, .LANCHOR1+3288
 	mov	w1, 1
 	str	w1, [x0,#:lo12:.LANCHOR1+3288]
-.L3081:
+.L3080:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -19701,24 +19726,24 @@ FtlReInitForSDUpdata:
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
-	cbz	w0, .L3114
-.L3116:
+	cbz	w0, .L3113
+.L3115:
 	mov	w0, 0
-	b	.L3115
-.L3114:
+	b	.L3114
+.L3113:
 	adrp	x0, RK29_NANDC_REG_BASE
 	ldr	x0, [x0,#:lo12:RK29_NANDC_REG_BASE]
 	bl	FlashInit
-	cbnz	w0, .L3116
+	cbnz	w0, .L3115
 	bl	FlashLoadFactorBbt
-	cbz	w0, .L3117
+	cbz	w0, .L3116
 	bl	FlashMakeFactorBbt
-.L3117:
+.L3116:
 	adrp	x20, .LANCHOR2
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x0, [x0,696]
 	bl	FlashReadIdbDataRaw
-	cbz	w0, .L3118
+	cbz	w0, .L3117
 	mov	w1, 0
 	mov	w2, 16
 	add	x0, x29, 32
@@ -19727,42 +19752,42 @@ FtlReInitForSDUpdata:
 	ldr	w2, [x29,32]
 	mov	w1, w0
 	mov	w4, 1
-.L3120:
+.L3119:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 16
 	add	w0, w0, w3
-	bne	.L3120
+	bne	.L3119
 	cmp	w0, 6
-	bhi	.L3121
+	bhi	.L3120
 	add	x0, x19, :lo12:.LANCHOR0
-	b	.L3143
-.L3121:
+	b	.L3142
+.L3120:
 	mov	w1, 0
 	mov	w4, 1
-.L3124:
+.L3123:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 24
 	add	w0, w0, w3
-	bne	.L3124
+	bne	.L3123
 	cmp	w0, 17
 	add	x0, x19, :lo12:.LANCHOR0
-	bls	.L3143
+	bls	.L3142
 	mov	w1, 36
-.L3143:
+.L3142:
 	strb	w1, [x0,89]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,89]
 	strh	w1, [x0,4042]
-.L3118:
+.L3117:
 	adrp	x0, .LC45
-	adrp	x1, .LC139
-	add	x1, x1, :lo12:.LC139
+	adrp	x1, .LC140
+	add	x1, x1, :lo12:.LC140
 	add	x0, x0, :lo12:.LC45
 	add	x20, x20, :lo12:.LANCHOR2
 	bl	printk
@@ -19773,25 +19798,25 @@ FtlReInitForSDUpdata:
 	bl	FtlVariablesInit
 	ldrh	w0, [x20,760]
 	bl	FtlFreeSysBlkQueueInit
-.L3126:
+.L3125:
 	bl	FtlLoadBbt
-	cbz	w0, .L3127
-.L3145:
+	cbz	w0, .L3126
+.L3144:
 	bl	FtlLowFormat
 	cmp	w19, 3
-	bhi	.L3146
+	bhi	.L3145
 	add	w19, w19, 1
-	b	.L3126
-.L3146:
+	b	.L3125
+.L3145:
 	mov	w0, -1
-	b	.L3115
-.L3127:
+	b	.L3114
+.L3126:
 	bl	FtlSysBlkInit
-	cbnz	w0, .L3145
+	cbnz	w0, .L3144
 	adrp	x1, .LANCHOR1+3288
 	mov	w2, 1
 	str	w2, [x1,#:lo12:.LANCHOR1+3288]
-.L3115:
+.L3114:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -19808,21 +19833,21 @@ Ftl_gc_temp_data_write_back:
 	add	x0, x19, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	ldr	w1, [x0,1408]
-	cbz	w1, .L3148
-.L3151:
+	cbz	w1, .L3147
+.L3150:
 	mov	w0, 0
-	b	.L3149
-.L3148:
+	b	.L3148
+.L3147:
 	adrp	x1, .LANCHOR0+4044
 	adrp	x22, .LANCHOR4
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+4044]
-	cbz	w1, .L3150
+	cbz	w1, .L3149
 	add	x1, x22, :lo12:.LANCHOR4
 	ldr	w1, [x1,4000]
-	tbz	x1, 0, .L3150
+	tbz	x1, 0, .L3149
 	ldrh	w0, [x0,3716]
-	cbnz	w0, .L3151
-.L3150:
+	cbnz	w0, .L3150
+.L3149:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x22, :lo12:.LANCHOR4
 	mov	w2, 0
@@ -19832,11 +19857,11 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x0,1008]
 	ldr	w1, [x1,4000]
 	bl	FlashProgPages
-.L3152:
+.L3151:
 	add	x20, x22, :lo12:.LANCHOR4
 	ldr	w1, [x20,4000]
 	cmp	w21, w1
-	bcs	.L3162
+	bcs	.L3161
 	add	x1, x19, :lo12:.LANCHOR2
 	umull	x0, w21, w23
 	ldr	x4, [x1,1008]
@@ -19844,7 +19869,7 @@ Ftl_gc_temp_data_write_back:
 	ldr	w4, [x4,x0]
 	cmn	w4, #1
 	ldr	x2, [x3,16]
-	bne	.L3153
+	bne	.L3152
 	ldrh	w3, [x1,3712]
 	ldr	x2, [x1,1192]
 	strh	wzr, [x2,x3,lsl 1]
@@ -19859,27 +19884,27 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L3161
-.L3153:
+	b	.L3160
+.L3152:
 	ldr	w0, [x2,12]
 	add	w21, w21, 1
 	ldr	w1, [x3,4]
 	ldr	w2, [x2,8]
 	uxth	w21, w21
 	bl	FtlGcUpdatePage
-	b	.L3152
-.L3162:
+	b	.L3151
+.L3161:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldr	x0, [x19,1008]
 	bl	FtlGcBufFree
 	str	wzr, [x20,4000]
 	ldrh	w0, [x19,3716]
-	cbnz	w0, .L3151
+	cbnz	w0, .L3150
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-.L3161:
+.L3160:
 	mov	w0, 1
-.L3149:
+.L3148:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -19899,10 +19924,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0,3712]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L3164
+	beq	.L3163
 	ldrh	w0, [x1,4]
-	cbnz	w0, .L3165
-.L3164:
+	cbnz	w0, .L3164
+.L3163:
 	bl	FtlCacheWriteBack
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
@@ -19918,7 +19943,7 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3165:
+.L3164:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x0, x0, 3712
 	bl	get_new_active_ppa
@@ -19943,18 +19968,18 @@ ftl_read:
 	stp	x27, x28, [sp,96]
 	cmn	w5, #1
 	mov	w0, w5
-	beq	.L3167
+	beq	.L3166
 	cmp	w4, 16
 	mov	x23, x3
 	mov	w26, w2
 	mov	w20, w1
-	bne	.L3168
+	bne	.L3167
 	add	w0, w1, 256
 	mov	w1, w2
 	mov	x2, x3
 	bl	FtlVendorPartRead
-	b	.L3167
-.L3168:
+	b	.L3166
+.L3167:
 	add	w0, w1, w2
 	str	w0, [x29,188]
 	adrp	x0, .LANCHOR0+4048
@@ -19962,7 +19987,7 @@ ftl_read:
 	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
 	mov	w0, -1
 	cmp	w2, w1
-	bhi	.L3167
+	bhi	.L3166
 	adrp	x19, .LANCHOR2
 	adrp	x21, .LANCHOR4
 	add	x0, x19, :lo12:.LANCHOR2
@@ -19983,9 +20008,9 @@ ftl_read:
 	mov	w1, w25
 	bl	FtlCacheMetchLpa
 	str	x21, [x29,120]
-	cbz	w0, .L3169
+	cbz	w0, .L3168
 	bl	FtlCacheWriteBack
-.L3169:
+.L3168:
 	mov	w27, 0
 	adrp	x0, .LC54
 	add	x0, x0, :lo12:.LC54
@@ -19994,27 +20019,27 @@ ftl_read:
 	mov	w22, w27
 	str	w27, [x29,172]
 	str	x0, [x29,112]
-.L3170:
-	cbz	w24, .L3213
+.L3169:
+	cbz	w24, .L3212
 	mov	w0, w21
 	add	x1, x29, 204
 	mov	w2, 0
 	bl	log2phys
 	ldr	w3, [x29,204]
 	cmn	w3, #1
-	bne	.L3211
+	bne	.L3210
 	mov	w3, 0
-.L3171:
+.L3170:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,830]
 	cmp	w3, w0
-	bcs	.L3175
+	bcs	.L3174
 	madd	w0, w21, w0, w3
 	cmp	w0, w20
-	bcc	.L3173
+	bcc	.L3172
 	ldr	w1, [x29,188]
 	cmp	w0, w1
-	bcs	.L3173
+	bcs	.L3172
 	sub	w0, w0, w20
 	mov	w1, 0
 	ubfiz	x0, x0, 9, 23
@@ -20023,10 +20048,10 @@ ftl_read:
 	str	x3, [x29,176]
 	bl	ftl_memset
 	ldr	x3, [x29,176]
-.L3173:
+.L3172:
 	add	w3, w3, 1
-	b	.L3171
-.L3211:
+	b	.L3170
+.L3210:
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	w0, 56
 	cmp	w21, w28
@@ -20035,7 +20060,7 @@ ftl_read:
 	add	x0, x0, x1
 	str	w3, [x0,4]
 	ldrh	w0, [x2,830]
-	bne	.L3176
+	bne	.L3175
 	ldr	x3, [x2,1000]
 	ldr	x2, [x2,1096]
 	add	x3, x3, x1
@@ -20048,12 +20073,12 @@ ftl_read:
 	csel	w2, w2, w26, ls
 	str	w2, [x29,184]
 	cmp	w2, w0
-	bne	.L3177
+	bne	.L3176
 	str	x23, [x3,8]
-	b	.L3177
-.L3176:
+	b	.L3176
+.L3175:
 	cmp	w21, w25
-	bne	.L3178
+	bne	.L3177
 	ldr	x3, [x2,1000]
 	ldr	x2, [x2,1104]
 	add	x3, x3, x1
@@ -20062,13 +20087,13 @@ ftl_read:
 	mul	w2, w21, w0
 	sub	w27, w4, w2
 	cmp	w27, w0
-	bne	.L3177
+	bne	.L3176
 	sub	w2, w2, w20
 	ubfiz	x2, x2, 9, 23
 	add	x2, x23, x2
 	str	x2, [x3,8]
-	b	.L3177
-.L3178:
+	b	.L3176
+.L3177:
 	ldr	x2, [x2,1000]
 	mul	w0, w21, w0
 	add	x2, x2, x1
@@ -20076,7 +20101,7 @@ ftl_read:
 	ubfiz	x0, x0, 9, 23
 	add	x0, x23, x0
 	str	x0, [x2,8]
-.L3177:
+.L3176:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldr	x0, [x2,1000]
 	add	x1, x0, x1
@@ -20088,16 +20113,16 @@ ftl_read:
 	and	x0, x0, 4294967292
 	add	x0, x2, x0
 	str	x0, [x1,16]
-.L3175:
+.L3174:
 	subs	w24, w24, #1
 	add	w21, w21, 1
-	beq	.L3179
+	beq	.L3178
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,756]
 	cmp	w22, w0, lsl 3
-	bne	.L3170
-.L3179:
-	cbz	w22, .L3170
+	bne	.L3169
+.L3178:
+	cbz	w22, .L3169
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, w22
 	mov	w2, 0
@@ -20115,10 +20140,10 @@ ftl_read:
 	ldr	x0, [x29,120]
 	add	x0, x0, :lo12:.LANCHOR4
 	str	x0, [x29,160]
-.L3181:
+.L3180:
 	ldr	w0, [x29,176]
 	cmp	w22, w0
-	bls	.L3214
+	bls	.L3213
 	ldr	x0, [x29,176]
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	x1, 56
@@ -20127,24 +20152,24 @@ ftl_read:
 	add	x0, x0, x8
 	ldr	w1, [x0,24]
 	cmp	w1, w28
-	bne	.L3182
+	bne	.L3181
 	ldr	x1, [x0,8]
 	ldr	x0, [x2,1096]
 	cmp	x1, x0
-	bne	.L3183
+	bne	.L3182
 	ldr	x2, [x29,136]
 	mov	x0, x23
 	str	x8, [x29,104]
 	add	x1, x1, x2
 	ldr	w2, [x29,168]
-	b	.L3212
-.L3182:
+	b	.L3211
+.L3181:
 	cmp	w1, w25
-	bne	.L3183
+	bne	.L3182
 	ldr	x1, [x0,8]
 	ldr	x0, [x2,1104]
 	cmp	x1, x0
-	bne	.L3183
+	bne	.L3182
 	ldrh	w0, [x2,830]
 	ldr	w2, [x29,132]
 	str	x8, [x29,104]
@@ -20152,28 +20177,28 @@ ftl_read:
 	sub	w0, w0, w20
 	ubfiz	x0, x0, 9, 23
 	add	x0, x23, x0
-.L3212:
+.L3211:
 	bl	ftl_memcpy
 	ldr	x8, [x29,104]
-.L3183:
+.L3182:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x0, [x0,1000]
 	add	x2, x0, x8
 	ldr	w1, [x0,x8]
 	cmn	w1, #1
-	bne	.L3184
+	bne	.L3183
 	ldr	x0, [x29,160]
 	str	w1, [x29,172]
 	add	x3, x0, 3472
 	ldr	w0, [x0,3544]
 	add	w0, w0, 1
 	str	w0, [x3,72]
-.L3184:
+.L3183:
 	ldr	x0, [x2,16]
 	ldr	w1, [x2,24]
 	ldr	w0, [x0,8]
 	cmp	w1, w0
-	beq	.L3185
+	beq	.L3184
 	ldr	x0, [x29,160]
 	str	x8, [x29,104]
 	add	x1, x0, 3472
@@ -20194,35 +20219,35 @@ ftl_read:
 	ldr	w7, [x7]
 	bl	printk
 	ldr	x8, [x29,104]
-.L3185:
+.L3184:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x0, [x0,1000]
 	add	x1, x0, x8
 	ldr	w0, [x0,x8]
 	cmp	w0, 256
-	bne	.L3186
+	bne	.L3185
 	ldr	w0, [x1,4]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3186:
+.L3185:
 	ldr	x0, [x29,176]
 	add	x0, x0, 1
 	str	x0, [x29,176]
-	b	.L3181
-.L3214:
-	mov	w22, 0
-	b	.L3170
+	b	.L3180
 .L3213:
+	mov	w22, 0
+	b	.L3169
+.L3212:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x19,966]
-	cbz	w0, .L3189
+	cbz	w0, .L3188
 	mov	w0, w24
 	mov	w1, 1
 	bl	ftl_do_gc
-.L3189:
+.L3188:
 	ldr	w0, [x29,172]
-.L3167:
+.L3166:
 	sub	sp, x29, #16
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
@@ -20270,13 +20295,13 @@ ftl_sys_read:
 FtlInit:
 	stp	x29, x30, [sp, -64]!
 	mov	w0, -1
-	adrp	x1, .LC139
+	adrp	x1, .LC140
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
 	adrp	x22, .LANCHOR1
 	str	x23, [sp,48]
 	add	x22, x22, :lo12:.LANCHOR1
-	add	x1, x1, :lo12:.LC139
+	add	x1, x1, :lo12:.LC140
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
 	adrp	x21, .LANCHOR0
@@ -20296,45 +20321,45 @@ FtlInit:
 	ldrh	w0, [x23,760]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L3218
-	adrp	x0, .LC156
-	add	x0, x0, :lo12:.LC156
-	b	.L3232
-.L3218:
-	bl	FtlSysBlkInit
-	mov	w19, w0
-	cbz	w0, .L3220
+	cbz	w0, .L3217
 	adrp	x0, .LC157
 	add	x0, x0, :lo12:.LC157
-.L3232:
+	b	.L3231
+.L3217:
+	bl	FtlSysBlkInit
+	mov	w19, w0
+	cbz	w0, .L3219
+	adrp	x0, .LC158
+	add	x0, x0, :lo12:.LC158
+.L3231:
 	adrp	x1, .LANCHOR3
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x1, x1, 120
 	bl	printk
-	b	.L3219
-.L3220:
+	b	.L3218
+.L3219:
 	mov	w1, 1
 	str	w1, [x22,3288]
 	bl	ftl_do_gc
 	ldrh	w0, [x23,3608]
 	cmp	w0, 15
-	bhi	.L3221
+	bhi	.L3220
 	adrp	x22, .LANCHOR4
 	mov	w23, 65535
 	add	x22, x22, :lo12:.LANCHOR4
 	add	w21, w0, 2
-.L3224:
+.L3223:
 	ldrh	w0, [x22,3424]
 	cmp	w0, w23
-	bne	.L3222
+	bne	.L3221
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x0,952]
 	cmp	w0, w23
-	bne	.L3222
+	bne	.L3221
 	and	w0, w19, 7
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L3222:
+.L3221:
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
@@ -20344,22 +20369,22 @@ FtlInit:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3608]
 	cmp	w0, w21
-	bhi	.L3219
+	bhi	.L3218
 	add	w19, w19, 1
 	cmp	w19, 1024
-	bne	.L3224
-	b	.L3219
-.L3221:
+	bne	.L3223
+	b	.L3218
+.L3220:
 	ldrb	w0, [x21,4044]
-	cbz	w0, .L3219
+	cbz	w0, .L3218
 	mov	w19, 128
-.L3226:
+.L3225:
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w19, w19, #1
-	bne	.L3226
-.L3219:
+	bne	.L3225
+.L3218:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -20387,21 +20412,21 @@ ftl_write:
 	mov	x24, x3
 	str	x1, [x29,168]
 	ldr	w3, [x2,1408]
-	cbnz	w3, .L3234
+	cbnz	w3, .L3233
 	adrp	x1, .LANCHOR1
 	str	x1, [x29,152]
 	add	x3, x1, :lo12:.LANCHOR1
 	ldr	w3, [x3,3288]
 	cmn	w3, #1
-	beq	.L3234
+	beq	.L3233
 	cmp	w4, 16
-	bne	.L3235
+	bne	.L3234
 	add	w0, w22, 256
 	mov	w1, w23
 	mov	x2, x24
 	bl	FtlVendorPartWrite
-	b	.L3234
-.L3235:
+	b	.L3233
+.L3234:
 	adrp	x1, .LANCHOR0
 	add	w3, w22, w23
 	add	x0, x1, :lo12:.LANCHOR0
@@ -20409,7 +20434,7 @@ ftl_write:
 	ldr	w4, [x0,4048]
 	mov	w0, -1
 	cmp	w3, w4
-	bhi	.L3234
+	bhi	.L3233
 	adrp	x5, .LANCHOR5
 	ldrh	w1, [x2,830]
 	add	x21, x5, :lo12:.LANCHOR5
@@ -20437,7 +20462,7 @@ ftl_write:
 	ldr	w3, [x2,976]
 	cset	w0, cs
 	str	w0, [x29,200]
-	cbz	w3, .L3237
+	cbz	w3, .L3236
 	mov	w0, 56
 	sub	w3, w3, #1
 	ldr	w4, [x29,204]
@@ -20446,7 +20471,7 @@ ftl_write:
 	add	x3, x0, x3
 	ldr	w0, [x3,24]
 	cmp	w4, w0
-	bne	.L3238
+	bne	.L3237
 	ldr	w0, [x2,896]
 	add	w0, w0, 1
 	str	w0, [x2,896]
@@ -20464,14 +20489,14 @@ ftl_write:
 	mov	w2, w20
 	mov	x1, x24
 	bl	ftl_memcpy
-	cbnz	w26, .L3239
+	cbnz	w26, .L3238
 	ldr	w0, [x21,-108]
 	cmp	w0, 2
-	bgt	.L3239
-.L3273:
+	bgt	.L3238
+.L3272:
 	mov	w0, 0
-	b	.L3234
-.L3239:
+	b	.L3233
+.L3238:
 	ldr	w0, [x29,204]
 	add	x24, x24, x20
 	sub	w23, w23, w19
@@ -20479,17 +20504,17 @@ ftl_write:
 	add	w0, w0, 1
 	mov	w20, w26
 	str	w0, [x29,204]
-.L3238:
+.L3237:
 	ldr	x0, [x29,144]
 	add	x0, x0, :lo12:.LANCHOR5
 	str	wzr, [x0,-108]
-.L3237:
+.L3236:
 	ldr	w0, [x29,204]
 	ldr	w1, [x29,188]
 	bl	FtlCacheMetchLpa
-	cbz	w0, .L3240
+	cbz	w0, .L3239
 	bl	FtlCacheWriteBack
-.L3240:
+.L3239:
 	ldr	x0, [x29,144]
 	ldr	x1, [x29,168]
 	add	x0, x0, :lo12:.LANCHOR5
@@ -20499,54 +20524,54 @@ ftl_write:
 	str	x21, [x0,-128]
 	ldr	w0, [x29,204]
 	str	w0, [x29,180]
-	adrp	x0, .LC158
-	add	x0, x0, :lo12:.LC158
+	adrp	x0, .LC159
+	add	x0, x0, :lo12:.LC159
 	str	x21, [x29,160]
 	str	x0, [x29,96]
-.L3241:
-	cbz	w20, .L3305
+.L3240:
+	cbz	w20, .L3304
 	ldrh	w0, [x21,4]
-	cbnz	w0, .L3242
+	cbnz	w0, .L3241
 	ldr	x1, [x29,160]
 	cmp	x21, x1
-	bne	.L3243
+	bne	.L3242
 	add	x0, x28, 3664
 	ldrh	w19, [x0,4]
-	cbnz	w19, .L3244
+	cbnz	w19, .L3243
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29,152]
 	add	x0, x0, :lo12:.LANCHOR1
 	str	w19, [x0,3296]
-.L3244:
+.L3243:
 	ldr	x0, [x29,160]
 	add	x21, x28, 3664
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29,152]
 	add	x0, x0, :lo12:.LANCHOR1
 	ldr	w0, [x0,3296]
-	cbnz	w0, .L3245
-.L3246:
+	cbnz	w0, .L3244
+.L3245:
 	ldr	x21, [x29,160]
-	b	.L3245
-.L3243:
+	b	.L3244
+.L3242:
 	ldr	x1, [x29,152]
 	add	x1, x1, :lo12:.LANCHOR1
 	str	w0, [x1,3296]
 	ldr	x0, [x29,160]
 	ldrh	w0, [x0,4]
-	cbnz	w0, .L3246
+	cbnz	w0, .L3245
 	mov	x0, x21
 	bl	allocate_new_data_superblock
-.L3245:
+.L3244:
 	ldrh	w0, [x21,4]
-	cbnz	w0, .L3247
+	cbnz	w0, .L3246
 	mov	x0, x21
 	bl	allocate_new_data_superblock
-.L3247:
+.L3246:
 	ldr	x0, [x29,144]
 	add	x0, x0, :lo12:.LANCHOR5
 	str	x21, [x0,-128]
-.L3242:
+.L3241:
 	ldr	w0, [x28,972]
 	ldr	w2, [x28,976]
 	ldrh	w1, [x21,4]
@@ -20562,28 +20587,28 @@ ftl_write:
 	str	w0, [x29,112]
 	add	w0, w23, w22
 	str	w0, [x29,116]
-.L3248:
+.L3247:
 	ldr	w0, [x29,192]
 	ldr	w2, [x29,176]
 	ldr	w1, [x29,180]
 	cmp	w0, w2
 	add	w25, w1, w0
-	bcs	.L3306
+	bcs	.L3305
 	ldrh	w1, [x21,4]
-	cbz	w1, .L3280
+	cbz	w1, .L3279
 	ldr	w1, [x29,188]
 	cmp	w25, w1
 	cset	w27, eq
-	cbz	w0, .L3250
+	cbz	w0, .L3249
 	ldr	w1, [x29,112]
 	tst	w27, w1
-	beq	.L3250
+	beq	.L3249
 	ldrh	w1, [x28,830]
 	ldr	w2, [x29,116]
 	msub	w2, w25, w1, w2
 	cmp	w2, w1
-	bne	.L3280
-.L3250:
+	bne	.L3279
+.L3249:
 	add	x1, x29, 212
 	mov	w2, 0
 	mov	w0, w25
@@ -20621,52 +20646,52 @@ ftl_write:
 	cmp	w25, w0
 	cset	w0, eq
 	str	w0, [x29,184]
-	cbnz	w0, .L3284
-	cbz	w27, .L3251
+	cbnz	w0, .L3283
+	cbz	w27, .L3250
 	ldrh	w19, [x28,830]
 	ldr	w0, [x29,116]
 	ldr	w27, [x29,184]
 	msub	w19, w25, w19, w0
 	uxth	w19, w19
-	b	.L3254
-.L3284:
+	b	.L3253
+.L3283:
 	ldrh	w19, [x28,830]
 	udiv	w27, w22, w19
 	msub	w27, w27, w19, w22
 	sub	w19, w19, w27
 	cmp	w19, w23
 	csel	w19, w19, w23, ls
-.L3254:
+.L3253:
 	ldrh	w0, [x28,830]
 	cmp	w19, w0
-	bne	.L3255
+	bne	.L3254
 	ldr	w0, [x29,184]
 	mov	x1, x24
-	cbnz	w0, .L3256
+	cbnz	w0, .L3255
 	mul	w1, w19, w25
 	sub	w1, w1, w22
 	ubfiz	x1, x1, 9, 23
 	add	x1, x24, x1
-.L3256:
+.L3255:
 	ldr	w2, [x29,200]
 	mov	w0, 56
-	cbz	w2, .L3257
+	cbz	w2, .L3256
 	ldr	w2, [x28,976]
 	umull	x0, w2, w0
 	ldr	x2, [x28,1040]
 	add	x0, x2, x0
-	b	.L3302
-.L3257:
+	b	.L3301
+.L3256:
 	ldr	w2, [x28,976]
 	umull	x0, w2, w0
 	ldr	x2, [x28,1040]
 	add	x0, x2, x0
 	ldr	x0, [x0,8]
-	b	.L3303
-.L3255:
+	b	.L3302
+.L3254:
 	ldr	w0, [x29,212]
 	cmn	w0, #1
-	beq	.L3259
+	beq	.L3258
 	str	w0, [x29,220]
 	mov	w1, 56
 	ldr	w0, [x28,976]
@@ -20684,17 +20709,17 @@ ftl_write:
 	bl	FlashReadPages
 	ldr	w0, [x29,216]
 	cmn	w0, #1
-	bne	.L3260
+	bne	.L3259
 	ldr	x0, [x29,136]
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	w1, [x0,3544]
 	add	w1, w1, 1
 	str	w1, [x0,3544]
-	b	.L3262
-.L3260:
+	b	.L3261
+.L3259:
 	ldr	w0, [x26,8]
 	cmp	w0, w25
-	beq	.L3262
+	beq	.L3261
 	ldr	x0, [x29,136]
 	mov	w2, w25
 	add	x0, x0, :lo12:.LANCHOR4
@@ -20704,8 +20729,8 @@ ftl_write:
 	ldr	x0, [x29,96]
 	ldr	w1, [x26,8]
 	bl	printk
-	b	.L3262
-.L3259:
+	b	.L3261
+.L3258:
 	ldr	w0, [x28,976]
 	mov	w1, 56
 	ldrh	w2, [x28,834]
@@ -20715,11 +20740,11 @@ ftl_write:
 	mov	w1, 0
 	ldr	x0, [x0,8]
 	bl	ftl_memset
-.L3262:
+.L3261:
 	ldr	w1, [x29,184]
 	mov	w0, 56
 	lsl	w2, w19, 9
-	cbz	w1, .L3263
+	cbz	w1, .L3262
 	ldr	w1, [x28,976]
 	ubfiz	x27, x27, 9, 23
 	umull	x0, w1, w0
@@ -20728,8 +20753,8 @@ ftl_write:
 	mov	x1, x24
 	ldr	x0, [x0,8]
 	add	x0, x0, x27
-	b	.L3304
-.L3263:
+	b	.L3303
+.L3262:
 	ldr	w1, [x28,976]
 	umull	x0, w1, w0
 	ldr	x1, [x28,1040]
@@ -20740,12 +20765,12 @@ ftl_write:
 	sub	w1, w1, w22
 	ubfiz	x1, x1, 9, 23
 	add	x1, x24, x1
-	b	.L3304
-.L3251:
+	b	.L3303
+.L3250:
 	ldr	w0, [x29,200]
 	ldrh	w1, [x28,830]
 	ldr	w2, [x28,976]
-	cbz	w0, .L3264
+	cbz	w0, .L3263
 	mul	w1, w25, w1
 	umull	x0, w2, w19
 	sub	w1, w1, w22
@@ -20753,10 +20778,10 @@ ftl_write:
 	ubfiz	x1, x1, 9, 23
 	add	x0, x2, x0
 	add	x1, x24, x1
-.L3302:
+.L3301:
 	str	x1, [x0,8]
-	b	.L3258
-.L3264:
+	b	.L3257
+.L3263:
 	umull	x0, w2, w19
 	ldr	x2, [x28,1040]
 	mul	w1, w25, w1
@@ -20765,11 +20790,11 @@ ftl_write:
 	ubfiz	x1, x1, 9, 23
 	ldr	x0, [x0,8]
 	add	x1, x24, x1
-.L3303:
+.L3302:
 	ldrh	w2, [x28,834]
-.L3304:
+.L3303:
 	bl	ftl_memcpy
-.L3258:
+.L3257:
 	ldr	x1, [x29,120]
 	mov	w0, -3947
 	ldr	x2, [x29,128]
@@ -20791,33 +20816,33 @@ ftl_write:
 	ldr	x0, [x29,192]
 	add	x0, x0, 1
 	str	x0, [x29,192]
-	b	.L3248
-.L3306:
+	b	.L3247
+.L3305:
 	str	w25, [x29,180]
 	mov	x0, x2
-	b	.L3249
-.L3280:
+	b	.L3248
+.L3279:
 	str	w25, [x29,180]
-.L3249:
+.L3248:
 	sub	w20, w20, w0
 	ldr	w0, [x29,200]
-	cbnz	w0, .L3268
+	cbnz	w0, .L3267
 	ldr	w1, [x28,976]
 	ldr	w0, [x28,972]
 	cmp	w1, w0
-	bcs	.L3268
+	bcs	.L3267
 	ldrh	w0, [x21,4]
-	cbz	w0, .L3268
-.L3270:
+	cbz	w0, .L3267
+.L3269:
 	str	wzr, [x29,200]
-	b	.L3241
-.L3268:
+	b	.L3240
+.L3267:
 	bl	FtlCacheWriteBack
 	str	wzr, [x28,976]
 	cmp	w20, 1
-	bhi	.L3241
-	b	.L3270
-.L3305:
+	bhi	.L3240
+	b	.L3269
+.L3304:
 	ldr	w1, [x29,188]
 	mov	w0, w20
 	ldr	w2, [x29,204]
@@ -20827,34 +20852,34 @@ ftl_write:
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3608]
 	cmp	w0, 5
-	bls	.L3272
+	bls	.L3271
 	cmp	w0, 31
-	bhi	.L3273
+	bhi	.L3272
 	ldr	x0, [x29,104]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,88]
-	cbnz	w0, .L3273
-.L3272:
+	cbnz	w0, .L3272
+.L3271:
 	ldr	x0, [x29,136]
 	mov	w21, 65535
 	mov	w22, 128
 	add	x23, x0, :lo12:.LANCHOR4
-.L3295:
+.L3294:
 	ldrh	w0, [x23,3424]
 	cmp	w0, w21
-	bne	.L3274
+	bne	.L3273
 	ldr	x0, [x29,168]
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w1, [x0,952]
 	cmp	w1, w21
-	bne	.L3274
+	bne	.L3273
 	ldrh	w0, [x0,954]
 	cmp	w0, w21
-	bne	.L3274
+	bne	.L3273
 	and	w0, w20, 7
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L3274:
+.L3273:
 	ldr	x0, [x29,168]
 	add	x19, x0, :lo12:.LANCHOR2
 	mov	w0, 1
@@ -20866,15 +20891,15 @@ ftl_write:
 	mov	w1, 1
 	bl	ftl_do_gc
 	ldr	w0, [x19,1408]
-	cbnz	w0, .L3273
+	cbnz	w0, .L3272
 	ldrh	w0, [x19,3608]
 	cmp	w0, 2
-	bhi	.L3273
+	bhi	.L3272
 	add	w20, w20, 1
 	cmp	w20, 256
-	bne	.L3295
-	b	.L3273
-.L3234:
+	bne	.L3294
+	b	.L3272
+.L3233:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -20926,16 +20951,16 @@ ftl_fix_nand_power_lost_error:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	cbz	w0, .L3309
+	cbz	w0, .L3308
 	adrp	x21, .LANCHOR4
 	adrp	x19, .LANCHOR2
 	add	x0, x21, :lo12:.LANCHOR4
 	add	x20, x19, :lo12:.LANCHOR2
-	adrp	x24, .LC159
+	adrp	x24, .LC160
 	add	x26, x20, 3616
 	add	x25, x20, 3664
 	ldrh	w23, [x0,4074]
-	add	x0, x24, :lo12:.LC159
+	add	x0, x24, :lo12:.LC160
 	ldr	x2, [x20,1192]
 	ubfiz	x22, x23, 1, 16
 	mov	w1, w23
@@ -20950,26 +20975,26 @@ ftl_fix_nand_power_lost_error:
 	bl	allocate_new_data_superblock
 	mov	x0, x25
 	bl	allocate_new_data_superblock
-.L3311:
+.L3310:
 	subs	w20, w20, #1
-	beq	.L3315
+	beq	.L3314
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x0, [x0,1192]
 	ldrh	w0, [x0,x22]
-	cbnz	w0, .L3311
-.L3315:
+	cbnz	w0, .L3310
+.L3314:
 	add	x20, x19, :lo12:.LANCHOR2
-	add	x0, x24, :lo12:.LC159
+	add	x0, x24, :lo12:.LC160
 	mov	w1, w23
 	ldr	x2, [x20,1192]
 	ldrh	w2, [x2,x22]
 	bl	printk
 	ldr	x0, [x20,1192]
 	ldrh	w0, [x0,x22]
-	cbnz	w0, .L3313
+	cbnz	w0, .L3312
 	add	x0, x29, 80
 	strh	w23, [x29,80]
 	bl	make_superblock
@@ -20978,14 +21003,14 @@ ftl_fix_nand_power_lost_error:
 	mov	w6, 65535
 	mov	w20, w0
 	mov	w7, 56
-.L3316:
+.L3315:
 	cmp	w5, w0, uxth
-	bls	.L3323
+	bls	.L3322
 	add	x1, x29, 80
 	add	x1, x1, x0, lsl 1
 	ldrh	w2, [x1,16]
 	cmp	w2, w6
-	beq	.L3317
+	beq	.L3316
 	add	x4, x19, :lo12:.LANCHOR2
 	lsl	w2, w2, 10
 	umull	x1, w20, w7
@@ -20998,14 +21023,14 @@ ftl_fix_nand_power_lost_error:
 	add	x1, x2, x1
 	str	xzr, [x1,8]
 	str	xzr, [x1,16]
-.L3317:
+.L3316:
 	add	x0, x0, 1
-	b	.L3316
-.L3323:
+	b	.L3315
+.L3322:
 	add	x19, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC160
+	adrp	x0, .LC161
 	mov	w1, w23
-	add	x0, x0, :lo12:.LC160
+	add	x0, x0, :lo12:.LC161
 	ldr	x2, [x19,1192]
 	ldrh	w2, [x2,x22]
 	bl	printk
@@ -21017,11 +21042,11 @@ ftl_fix_nand_power_lost_error:
 	mov	w1, 1
 	mov	w2, w20
 	bl	FlashEraseBlocks
-.L3313:
+.L3312:
 	add	x21, x21, :lo12:.LANCHOR4
 	mov	w0, -1
 	strh	w0, [x21,4074]
-.L3309:
+.L3308:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -21258,38 +21283,38 @@ ftl_fix_nand_power_lost_error:
 	.section	.rodata
 	.align	3
 .LANCHOR3 = . + 0
-	.type	__func__.19591, %object
-	.size	__func__.19591, 11
-__func__.19591:
+	.type	__func__.19640, %object
+	.size	__func__.19640, 11
+__func__.19640:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.20334, %object
-	.size	__func__.20334, 12
-__func__.20334:
+	.type	__func__.20383, %object
+	.size	__func__.20383, 12
+__func__.20383:
 	.string	"FtlCheckVpc"
 	.zero	4
-	.type	__func__.20366, %object
-	.size	__func__.20366, 17
-__func__.20366:
+	.type	__func__.20415, %object
+	.size	__func__.20415, 17
+__func__.20415:
 	.string	"FtlDumpBlockInfo"
 	.zero	7
-	.type	__func__.20385, %object
-	.size	__func__.20385, 16
-__func__.20385:
+	.type	__func__.20434, %object
+	.size	__func__.20434, 16
+__func__.20434:
 	.string	"FtlScanAllBlock"
-	.type	__func__.20651, %object
-	.size	__func__.20651, 17
-__func__.20651:
+	.type	__func__.20700, %object
+	.size	__func__.20700, 17
+__func__.20700:
 	.string	"ftl_scan_all_ppa"
 	.zero	7
-	.type	__func__.20633, %object
-	.size	__func__.20633, 21
-__func__.20633:
+	.type	__func__.20682, %object
+	.size	__func__.20682, 21
+__func__.20682:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.19664, %object
-	.size	__func__.19664, 8
-__func__.19664:
+	.type	__func__.19713, %object
+	.size	__func__.19713, 8
+__func__.19713:
 	.string	"FtlInit"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
@@ -21413,206 +21438,208 @@ __func__.19664:
 .LC59:
 	.string	"L2PC:"
 .LC60:
-	.string	"superBlkID = %x vpc=%x\n"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data= %x\n"
 .LC61:
-	.string	"flashmode = %x pagenum = %x %x\n"
+	.string	"superBlkID = %x vpc=%x\n"
 .LC62:
-	.string	"blk = %x vpc=%x mode = %x\n"
+	.string	"flashmode = %x pagenum = %x %x\n"
 .LC63:
-	.string	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"blk = %x vpc=%x mode = %x\n"
 .LC64:
-	.string	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC65:
-	.string	"slc mode"
+	.string	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC66:
-	.string	"ftl_scan_all_ppa blk %x page %x\n"
+	.string	"slc mode"
 .LC67:
-	.string	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\n"
+	.string	"ftl_scan_all_ppa blk %x page %x\n"
 .LC68:
-	.string	"%s finished\n"
+	.string	"addr= %x, status= %d,spare= %x %x %x %x data=%x %x\n"
 .LC69:
-	.string	"FLASH INFO:\n"
+	.string	"%s finished\n"
 .LC70:
-	.string	"FLASH ID: %x\n"
+	.string	"FLASH INFO:\n"
 .LC71:
-	.string	"Device Capacity: %d MB\n"
+	.string	"FLASH ID: %x\n"
 .LC72:
-	.string	"FMWAIT: %x %x %x %x\n"
+	.string	"Device Capacity: %d MB\n"
 .LC73:
-	.string	"FTL INFO:\n"
+	.string	"FMWAIT: %x %x %x %x\n"
 .LC74:
-	.string	"g_MaxLpn = 0x%x\n"
+	.string	"FTL INFO:\n"
 .LC75:
-	.string	"g_VaildLpn = 0x%x\n"
+	.string	"g_MaxLpn = 0x%x\n"
 .LC76:
-	.string	"read_page_count = 0x%x\n"
+	.string	"g_VaildLpn = 0x%x\n"
 .LC77:
-	.string	"discard_page_count = 0x%x\n"
+	.string	"read_page_count = 0x%x\n"
 .LC78:
-	.string	"write_page_count = 0x%x\n"
+	.string	"discard_page_count = 0x%x\n"
 .LC79:
-	.string	"cache_write_count = 0x%x\n"
+	.string	"write_page_count = 0x%x\n"
 .LC80:
-	.string	"l2p_write_count = 0x%x\n"
+	.string	"cache_write_count = 0x%x\n"
 .LC81:
-	.string	"gc_page_count = 0x%x\n"
+	.string	"l2p_write_count = 0x%x\n"
 .LC82:
-	.string	"totle_write = %d MB\n"
+	.string	"gc_page_count = 0x%x\n"
 .LC83:
-	.string	"totle_read = %d MB\n"
+	.string	"totle_write = %d MB\n"
 .LC84:
-	.string	"GSV = 0x%x\n"
+	.string	"totle_read = %d MB\n"
 .LC85:
-	.string	"GDV = 0x%x\n"
+	.string	"GSV = 0x%x\n"
 .LC86:
-	.string	"bad blk num = %d %d\n"
+	.string	"GDV = 0x%x\n"
 .LC87:
-	.string	"free_superblocks = 0x%x\n"
+	.string	"bad blk num = %d %d\n"
 .LC88:
-	.string	"mlc_EC = 0x%x\n"
+	.string	"free_superblocks = 0x%x\n"
 .LC89:
-	.string	"slc_EC = 0x%x\n"
+	.string	"mlc_EC = 0x%x\n"
 .LC90:
-	.string	"avg_EC = 0x%x\n"
+	.string	"slc_EC = 0x%x\n"
 .LC91:
-	.string	"sys_EC = 0x%x\n"
+	.string	"avg_EC = 0x%x\n"
 .LC92:
-	.string	"max_EC = 0x%x\n"
+	.string	"sys_EC = 0x%x\n"
 .LC93:
-	.string	"min_EC = 0x%x\n"
+	.string	"max_EC = 0x%x\n"
 .LC94:
-	.string	"PLT = 0x%x\n"
+	.string	"min_EC = 0x%x\n"
 .LC95:
-	.string	"POT = 0x%x\n"
+	.string	"PLT = 0x%x\n"
 .LC96:
-	.string	"MaxSector = 0x%x\n"
+	.string	"POT = 0x%x\n"
 .LC97:
-	.string	"init_sys_blks_pp = 0x%x\n"
+	.string	"MaxSector = 0x%x\n"
 .LC98:
-	.string	"sys_blks_pp = 0x%x\n"
+	.string	"init_sys_blks_pp = 0x%x\n"
 .LC99:
-	.string	"free sysblock = 0x%x\n"
+	.string	"sys_blks_pp = 0x%x\n"
 .LC100:
-	.string	"data_blks_pp = 0x%x\n"
+	.string	"free sysblock = 0x%x\n"
 .LC101:
-	.string	"data_op_blks_pp = 0x%x\n"
+	.string	"data_blks_pp = 0x%x\n"
 .LC102:
-	.string	"max_data_blks = 0x%x\n"
+	.string	"data_op_blks_pp = 0x%x\n"
 .LC103:
-	.string	"Sys.id = 0x%x\n"
+	.string	"max_data_blks = 0x%x\n"
 .LC104:
-	.string	"Bbt.id = 0x%x\n"
+	.string	"Sys.id = 0x%x\n"
 .LC105:
-	.string	"ACT.page = 0x%x\n"
+	.string	"Bbt.id = 0x%x\n"
 .LC106:
-	.string	"ACT.plane = 0x%x\n"
+	.string	"ACT.page = 0x%x\n"
 .LC107:
-	.string	"ACT.id = 0x%x\n"
+	.string	"ACT.plane = 0x%x\n"
 .LC108:
-	.string	"ACT.mode = 0x%x\n"
+	.string	"ACT.id = 0x%x\n"
 .LC109:
-	.string	"ACT.a_pages = 0x%x\n"
+	.string	"ACT.mode = 0x%x\n"
 .LC110:
-	.string	"ACT VPC = 0x%x\n"
+	.string	"ACT.a_pages = 0x%x\n"
 .LC111:
-	.string	"BUF.page = 0x%x\n"
+	.string	"ACT VPC = 0x%x\n"
 .LC112:
-	.string	"BUF.plane = 0x%x\n"
+	.string	"BUF.page = 0x%x\n"
 .LC113:
-	.string	"BUF.id = 0x%x\n"
+	.string	"BUF.plane = 0x%x\n"
 .LC114:
-	.string	"BUF.mode = 0x%x\n"
+	.string	"BUF.id = 0x%x\n"
 .LC115:
-	.string	"BUF.a_pages = 0x%x\n"
+	.string	"BUF.mode = 0x%x\n"
 .LC116:
-	.string	"BUF VPC = 0x%x\n"
+	.string	"BUF.a_pages = 0x%x\n"
 .LC117:
-	.string	"TMP.page = 0x%x\n"
+	.string	"BUF VPC = 0x%x\n"
 .LC118:
-	.string	"TMP.plane = 0x%x\n"
+	.string	"TMP.page = 0x%x\n"
 .LC119:
-	.string	"TMP.id = 0x%x\n"
+	.string	"TMP.plane = 0x%x\n"
 .LC120:
-	.string	"TMP.mode = 0x%x\n"
+	.string	"TMP.id = 0x%x\n"
 .LC121:
-	.string	"TMP.a_pages = 0x%x\n"
+	.string	"TMP.mode = 0x%x\n"
 .LC122:
-	.string	"GC.page = 0x%x\n"
+	.string	"TMP.a_pages = 0x%x\n"
 .LC123:
-	.string	"GC.plane = 0x%x\n"
+	.string	"GC.page = 0x%x\n"
 .LC124:
-	.string	"GC.id = 0x%x\n"
+	.string	"GC.plane = 0x%x\n"
 .LC125:
-	.string	"GC.mode = 0x%x\n"
+	.string	"GC.id = 0x%x\n"
 .LC126:
-	.string	"GC.a_pages = 0x%x\n"
+	.string	"GC.mode = 0x%x\n"
 .LC127:
-	.string	"WR_CHK = 0x%x %x %x %x\n"
+	.string	"GC.a_pages = 0x%x\n"
 .LC128:
-	.string	"Read Err = 0x%x\n"
+	.string	"WR_CHK = 0x%x %x %x %x\n"
 .LC129:
-	.string	"Prog Err = 0x%x\n"
+	.string	"Read Err = 0x%x\n"
 .LC130:
-	.string	"gc_free_blk_th= 0x%x\n"
+	.string	"Prog Err = 0x%x\n"
 .LC131:
-	.string	"gc_merge_free_blk_th= 0x%x\n"
+	.string	"gc_free_blk_th= 0x%x\n"
 .LC132:
-	.string	"gc_skip_write_count= 0x%x\n"
+	.string	"gc_merge_free_blk_th= 0x%x\n"
 .LC133:
-	.string	"gc_blk_index= 0x%x\n"
+	.string	"gc_skip_write_count= 0x%x\n"
 .LC134:
-	.string	"free min EC= 0x%x\n"
+	.string	"gc_blk_index= 0x%x\n"
 .LC135:
-	.string	"free max EC= 0x%x\n"
+	.string	"free min EC= 0x%x\n"
 .LC136:
-	.string	"GC__SB VPC = 0x%x\n"
+	.string	"free max EC= 0x%x\n"
 .LC137:
-	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
+	.string	"GC__SB VPC = 0x%x\n"
 .LC138:
-	.string	"free %d. [0x%x] 0x%x  0x%x\n"
+	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
 .LC139:
-	.string	"FTL version: 5.0.56 20190508"
+	.string	"free %d. [0x%x] 0x%x  0x%x\n"
 .LC140:
-	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
+	.string	"FTL version: 5.0.57 20190828"
 .LC141:
-	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
+	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
 .LC142:
-	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
 .LC143:
-	.string	"FtlGcRefreshBlock  0x%x\n"
+	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
 .LC144:
-	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
+	.string	"FtlGcRefreshBlock  0x%x\n"
 .LC145:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
 .LC146:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC147:
-	.string	"decrement_vpc_count %x = %d in free list\n"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC148:
-	.string	"RSB refresh addr %x\n"
+	.string	"decrement_vpc_count %x = %d in free list\n"
 .LC149:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"RSB refresh addr %x\n"
 .LC150:
-	.string	"g_recovery_ppa %x ver %x\n "
+	.string	"spuer block %x vpn is 0\n "
 .LC151:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"g_recovery_ppa %x ver %x\n "
 .LC152:
-	.string	"%d GC datablk  = %x vpc %x %x\n"
+	.string	"FtlCheckVpc %x = %x  %x\n"
 .LC153:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"%d GC datablk  = %x vpc %x %x\n"
 .LC154:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
 .LC155:
-	.string	"GC des block %x done\n"
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
 .LC156:
-	.string	"...%s: no bad block mapping table, format device\n"
+	.string	"GC des block %x done\n"
 .LC157:
-	.string	"...%s FtlSysBlkInit error ,format device!\n"
+	.string	"...%s: no bad block mapping table, format device\n"
 .LC158:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"...%s FtlSysBlkInit error ,format device!\n"
 .LC159:
-	.string	"fix power lost blk = %x vpc=%x\n"
+	.string	"FtlWrite: lpa error:%x %x\n"
 .LC160:
+	.string	"fix power lost blk = %x vpc=%x\n"
+.LC161:
 	.string	"erase power lost blk = %x vpc=%x\n"
 	.data
 	.align	3
diff --git a/drivers/rk_nand/rk_zftl_arm32.S b/drivers/rk_nand/rk_zftl_arm32.S
new file mode 100644
index 000000000000..96bfd7f97e40
--- /dev/null
+++ b/drivers/rk_nand/rk_zftl_arm32.S
@@ -0,0 +1,34797 @@
+/*
+ * Copyright (c) 2016-2017, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2019-09-29
+ * function: rk ftl v6 for rockchip soc base on arm v7 to support 3D/2D
+ *	     TLC and MLC.
+ */
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 34, 1
+	.eabi_attribute 18, 2
+	.file	"rk_zftl_arm_v7.S"
+#APP
+	.syntax unified
+	.global	__aeabi_uidiv
+	.text
+	.align	2
+	.type	slc_phy_page_address_calc, %function
+slc_phy_page_address_calc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r6, .L14
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3
+.L2:
+	ldrh	r5, [r6, #2]
+	mov	r0, r4
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L14
+	mul	r0, r5, r0
+	rsb	r4, r0, r4
+	mov	r4, r4, asl #1
+	addeq	r4, r3, r4
+	ldreqh	r4, [r4, #4]
+	add	r4, r4, r0
+.L3:
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L15:
+	.align	2
+.L14:
+	.word	.LANCHOR0
+	.fnend
+	.size	slc_phy_page_address_calc, .-slc_phy_page_address_calc
+	.align	2
+	.global	zftl_nandc_get_irq_status
+	.type	zftl_nandc_get_irq_status, %function
+zftl_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L19
+	ldrb	r3, [r3, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	ldreq	r0, [r0, #296]
+	ldrne	r0, [r0, #372]
+	bx	lr
+.L20:
+	.align	2
+.L19:
+	.word	.LANCHOR0
+	.fnend
+	.size	zftl_nandc_get_irq_status, .-zftl_nandc_get_irq_status
+	.align	2
+	.global	zftl_get_density
+	.type	zftl_get_density, %function
+zftl_get_density:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, #0
+	bne	.L22
+	ldr	r3, .L25
+	ldr	r0, [r3, #520]
+	bx	lr
+.L22:
+	cmp	r0, #4
+	movcc	r0, #8192
+	movcs	r0, #0
+	bx	lr
+.L26:
+	.align	2
+.L25:
+	.word	.LANCHOR0
+	.fnend
+	.size	zftl_get_density, .-zftl_get_density
+	.align	2
+	.type	_list_get_gc_head_node, %function
+_list_get_gc_head_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0]
+	cmp	r0, #0
+	beq	.L32
+	ldr	r3, .L35
+	mov	ip, #6
+	ldr	r2, [r3, #524]
+	movw	r3, #65535
+.L29:
+	cmp	r1, #0
+	beq	.L30
+	ldrh	r0, [r0]
+	cmp	r0, r3
+	subne	r1, r1, #1
+	mlane	r0, ip, r0, r2
+	uxthne	r1, r1
+	bne	.L29
+.L34:
+	bx	lr
+.L32:
+	movw	r0, #65535
+	bx	lr
+.L30:
+	rsb	r0, r2, r0
+	ldr	r3, .L35+4
+	mov	r0, r0, asr #1
+	mul	r0, r3, r0
+	uxth	r0, r0
+	bx	lr
+.L36:
+	.align	2
+.L35:
+	.word	.LANCHOR0
+	.word	-1431655765
+	.fnend
+	.size	_list_get_gc_head_node, .-_list_get_gc_head_node
+	.align	2
+	.type	_list_remove_node, %function
+_list_remove_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #6
+	mul	r5, r5, r1
+	ldr	r6, .L46
+	mov	r7, r0
+	movw	r3, #65535
+	ldr	r8, [r6, #524]
+	add	r4, r8, r5
+	ldrh	r0, [r8, r5]
+	ldrh	r1, [r4, #2]
+	cmp	r0, r3
+	ldr	r3, [r7]
+	bne	.L38
+	cmp	r1, r0
+	bne	.L38
+	cmp	r4, r3
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L38:
+	mov	r9, r2
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L40
+	cmp	r4, r3
+	beq	.L40
+	ldr	r1, .L46+4
+	mov	r2, #188
+	ldr	r0, .L46+8
+	bl	printk
+	bl	dump_stack
+.L40:
+	ldr	r3, [r7]
+	movw	r2, #65535
+	cmp	r4, r3
+	ldrh	r3, [r8, r5]
+	bne	.L41
+	cmp	r3, r2
+	ldrne	r2, [r6, #524]
+	movne	r1, #6
+	moveq	r3, #0
+	streq	r3, [r7]
+	mlane	r3, r1, r3, r2
+	mvnne	r2, #0
+	strne	r3, [r7]
+	strneh	r2, [r3, #2]	@ movhi
+	b	.L43
+.L41:
+	cmp	r3, r2
+	ldrh	r1, [r4, #2]
+	bne	.L44
+	cmp	r1, r3
+	movne	r3, #6
+	ldrne	r2, [r6, #524]
+	mulne	r1, r3, r1
+	mvnne	r3, #0
+	strneh	r3, [r2, r1]	@ movhi
+	b	.L43
+.L44:
+	ldr	r0, [r6, #524]
+	mov	r2, #6
+	mla	r3, r2, r3, r0
+	strh	r1, [r3, #2]	@ movhi
+	ldrh	r0, [r4, #2]
+	ldrh	r1, [r8, r5]
+	ldr	r3, [r6, #524]
+	mul	r2, r2, r0
+	strh	r1, [r3, r2]	@ movhi
+.L43:
+	mvn	r3, #0
+	strh	r3, [r8, r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	ldrh	r3, [r9]
+	sub	r3, r3, #1
+	strh	r3, [r9]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L47:
+	.align	2
+.L46:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LC0
+	.fnend
+	.size	_list_remove_node, .-_list_remove_node
+	.align	2
+	.type	_list_pop_index_node, %function
+_list_pop_index_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r5, [r0]
+	cmp	r5, #0
+	beq	.L54
+	ldr	r3, .L56
+	movw	ip, #65535
+	mov	lr, #6
+	ldr	r4, [r3, #524]
+.L50:
+	cmp	r1, #0
+	bne	.L51
+.L53:
+	rsb	r4, r4, r5
+	ldr	r3, .L56+4
+	mov	r4, r4, asr #1
+	mul	r4, r3, r4
+	uxth	r4, r4
+	mov	r1, r4
+	bl	_list_remove_node
+	mvn	r3, #0
+	mov	r0, r4
+	strh	r3, [r5]	@ movhi
+	strh	r3, [r5, #2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L51:
+	ldrh	r3, [r5]
+	cmp	r3, ip
+	beq	.L53
+	sub	r1, r1, #1
+	mla	r5, lr, r3, r4
+	uxth	r1, r1
+	b	.L50
+.L54:
+	movw	r0, #65535
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L57:
+	.align	2
+.L56:
+	.word	.LANCHOR0
+	.word	-1431655765
+	.fnend
+	.size	_list_pop_index_node, .-_list_pop_index_node
+	.align	2
+	.type	zftl_debug_proc_open, %function
+zftl_debug_proc_open:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r1
+	bl	PDE_DATA
+	ldr	r1, .L60
+	mov	r2, r0
+	mov	r0, r4
+	ldmfd	sp!, {r4, lr}
+	b	single_open
+.L61:
+	.align	2
+.L60:
+	.word	zftl_debug_proc_show
+	.fnend
+	.size	zftl_debug_proc_open, .-zftl_debug_proc_open
+	.align	2
+	.type	zftl_debug_proc_show, %function
+zftl_debug_proc_show:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	ldr	r1, .L64
+	ldr	r2, .L64+4
+	bl	seq_printf
+	ldr	r3, .L64+8
+	mov	r0, r4
+	ldr	r1, .L64+12
+	ldr	r2, [r3]
+	bl	seq_printf
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L65:
+	.align	2
+.L64:
+	.word	.LC1
+	.word	.LC2
+	.word	.LANCHOR2
+	.word	.LC3
+	.fnend
+	.size	zftl_debug_proc_show, .-zftl_debug_proc_show
+	.align	2
+	.global	zftl_flash_suspend
+	.type	zftl_flash_suspend, %function
+zftl_flash_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L70
+	ldrb	r2, [r3, #516]	@ zero_extendqisi2
+	cmp	r2, #9
+	ldr	r2, [r3, #528]
+	ldr	r1, [r2]
+	str	r1, [r3, #532]
+	ldr	r1, [r2, #4]
+	str	r1, [r3, #536]
+	bne	.L67
+	ldr	r1, [r2, #16]
+	str	r1, [r3, #540]
+	ldr	r1, [r2, #32]
+	str	r1, [r3, #544]
+	ldr	r1, [r2, #80]
+	str	r1, [r3, #548]
+	ldr	r1, [r2, #84]
+	str	r1, [r3, #552]
+	ldr	r1, [r2, #520]
+	ldr	r2, [r2, #8]
+	str	r1, [r3, #556]
+	b	.L69
+.L67:
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #540]
+	ldr	r1, [r2, #12]
+	str	r1, [r3, #544]
+	ldr	r1, [r2, #304]
+	str	r1, [r3, #548]
+	ldr	r1, [r2, #308]
+	str	r1, [r3, #552]
+	ldr	r1, [r2, #336]
+	ldr	r2, [r2, #344]
+	str	r1, [r3, #556]
+.L69:
+	str	r2, [r3, #560]
+	bx	lr
+.L71:
+	.align	2
+.L70:
+	.word	.LANCHOR0
+	.fnend
+	.size	zftl_flash_suspend, .-zftl_flash_suspend
+	.align	2
+	.type	_insert_free_list, %function
+_insert_free_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L82
+	add	ip, r3, #564
+	ldrh	ip, [ip]
+	cmp	ip, r1
+	bxls	lr
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r3
+	ldrh	ip, [r2]
+	add	ip, ip, #1
+	strh	ip, [r2]	@ movhi
+	mov	ip, #6
+	ldr	r7, [r3, #524]
+	mul	r6, ip, r1
+	mvn	r3, #0
+	add	lr, r7, r6
+	strh	r3, [lr, #2]	@ movhi
+	strh	r3, [r7, r6]	@ movhi
+	ldr	r3, [r0]
+	cmp	r3, #0
+	beq	.L81
+	ldr	r5, [r4, #568]
+	add	r8, r4, #572
+	mov	r2, r1, asl #2
+	ldr	r9, [r4, #524]
+	ldrh	r10, [r8]
+	movw	fp, #65535
+	ldr	r8, [r5, r1, asl #2]
+	ldrh	r2, [r5, r2]
+	ubfx	r8, r8, #11, #8
+	str	ip, [sp, #4]
+	ubfx	r2, r2, #0, #11
+	smulbb	r8, r8, r10
+	add	r2, r8, r2
+	rsb	r8, r9, r3
+	uxth	r2, r2
+	str	r2, [sp]
+	ldr	r2, .L82+4
+	mov	r8, r8, asr #1
+	mul	r2, r2, r8
+	uxth	r2, r2
+.L77:
+	ldr	ip, [r5, r2, asl #2]
+	mov	r8, r2, asl #2
+	ubfx	ip, ip, #11, #8
+	ldrh	r8, [r5, r8]
+	smulbb	ip, ip, r10
+	ubfx	r8, r8, #0, #11
+	add	r8, ip, r8
+	ldr	ip, [sp]
+	uxth	r8, r8
+	cmp	r8, ip
+	bcs	.L75
+	ldrh	ip, [r3]
+	cmp	ip, fp
+	streqh	r2, [lr, #2]	@ movhi
+	streqh	r1, [r3]	@ movhi
+	beq	.L72
+.L76:
+	ldr	r3, [sp, #4]
+	mov	r2, ip
+	mla	r3, r3, ip, r9
+	b	.L77
+.L75:
+	ldrh	ip, [r3, #2]
+	strh	ip, [lr, #2]	@ movhi
+	strh	r2, [r7, r6]	@ movhi
+	ldr	r2, [r0]
+	cmp	r3, r2
+	bne	.L78
+	strh	r1, [r3, #2]	@ movhi
+.L81:
+	str	lr, [r0]
+	b	.L72
+.L78:
+	ldrh	ip, [r3, #2]
+	mov	r2, #6
+	ldr	r0, [r4, #524]
+	mul	r2, r2, ip
+	strh	r1, [r0, r2]	@ movhi
+	strh	r1, [r3, #2]	@ movhi
+.L72:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L83:
+	.align	2
+.L82:
+	.word	.LANCHOR0
+	.word	-1431655765
+	.fnend
+	.size	_insert_free_list, .-_insert_free_list
+	.align	2
+	.type	_insert_data_list, %function
+_insert_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L105
+	add	ip, r3, #564
+	ldrh	ip, [ip]
+	cmp	ip, r1
+	bxls	lr
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, #6
+	ldrh	ip, [r2]
+	mov	r4, r3
+	mul	r5, r5, r1
+	add	ip, ip, #1
+	strh	ip, [r2]	@ movhi
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r10, [r3, #524]
+	mvn	r3, #0
+	add	lr, r10, r5
+	strh	r3, [lr, #2]	@ movhi
+	strh	r3, [r10, r5]	@ movhi
+	ldr	r3, [r0]
+	cmp	r3, #0
+	beq	.L104
+	ldr	r2, [r4, #576]
+	add	r8, r4, #572
+	ldr	r9, [r4, #568]
+	ldrh	r8, [r8]
+	str	r2, [sp, #4]
+	mov	r2, r1, asl #1
+	ldr	ip, [sp, #4]
+	ldr	r7, [r9, r1, asl #2]
+	ldrh	r6, [lr, #4]
+	ldrh	ip, [ip, r2]
+	muls	ip, r6, ip
+	str	r8, [sp, #8]
+	ubfx	r7, r7, #11, #8
+	ldrneh	r8, [sp, #8]
+	mov	r2, r1, asl #2
+	ldrh	r2, [r9, r2]
+	smulbbne	r7, r7, r8
+	ubfx	r2, r2, #0, #11
+	addne	r2, r2, r7
+	uxtahne	ip, ip, r2
+	ldr	r2, [r4, #524]
+	cmp	r6, #0
+	mov	r6, #0
+	rsb	r4, r2, r3
+	str	r2, [sp, #12]
+	mvneq	ip, #0
+	ldr	r2, .L105+4
+	mov	r4, r4, asr #1
+	mul	r2, r2, r4
+	ldr	r4, .L105+8
+	ldrh	r4, [r4]
+	uxth	r2, r2
+	str	r4, [sp, #16]
+.L94:
+	add	r6, r6, #1
+	ldr	r4, [sp, #16]
+	uxth	r6, r6
+	cmp	r6, r4
+	movls	r4, #0
+	movhi	r4, #1
+	cmp	r1, r2
+	orreq	r4, r4, #1
+	cmp	r4, #0
+	bne	.L84
+	ldr	r7, [sp, #4]
+	mov	r4, r2, asl #1
+	ldr	r8, [r9, r2, asl #2]
+	ldrh	fp, [r3, #4]
+	ldrh	r4, [r7, r4]
+	mov	r7, r2, asl #2
+	muls	r4, fp, r4
+	ubfx	r8, r8, #11, #8
+	ldrh	r7, [r9, r7]
+	ubfx	r7, r7, #0, #11
+	str	r7, [sp, #20]
+	ldrneh	r7, [sp, #8]
+	smulbbne	r8, r8, r7
+	ldrne	r7, [sp, #20]
+	addne	r8, r7, r8
+	uxtahne	r4, r4, r8
+	cmp	fp, #0
+	cmpne	r4, ip
+	bcs	.L92
+	ldrh	r4, [r3]
+	movw	r7, #65535
+	cmp	r4, r7
+	streqh	r2, [lr, #2]	@ movhi
+	streqh	r1, [r3]	@ movhi
+	beq	.L84
+.L93:
+	ldr	r2, [sp, #12]
+	mov	r3, #6
+	mla	r3, r3, r4, r2
+	mov	r2, r4
+	b	.L94
+.L92:
+	ldrh	ip, [r3, #2]
+	strh	ip, [lr, #2]	@ movhi
+	strh	r2, [r10, r5]	@ movhi
+	ldr	r2, [r0]
+	cmp	r3, r2
+	bne	.L95
+	strh	r1, [r3, #2]	@ movhi
+.L104:
+	str	lr, [r0]
+	b	.L84
+.L95:
+	ldr	r2, .L105
+	ldrh	ip, [r3, #2]
+	ldr	r0, [r2, #524]
+	mov	r2, #6
+	mul	r2, r2, ip
+	strh	r1, [r0, r2]	@ movhi
+	strh	r1, [r3, #2]	@ movhi
+.L84:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L106:
+	.align	2
+.L105:
+	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LANCHOR0+564
+	.fnend
+	.size	_insert_data_list, .-_insert_data_list
+	.align	2
+	.type	_list_update_data_list, %function
+_list_update_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r4, r1
+	ldr	r1, .L118
+	mov	r6, r0
+	ldr	r3, [r1, #580]
+	ldrh	r0, [r3, #16]
+	cmp	r0, r4
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	mov	r5, r1
+	ldrh	r1, [r3, #48]
+	cmp	r1, r4
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	ldrh	r3, [r3, #80]
+	cmp	r3, r4
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	mov	r8, #6
+	ldr	r10, [r5, #524]
+	mul	r8, r8, r4
+	ldr	r3, [r6]
+	add	r9, r10, r8
+	cmp	r9, r3
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	ldrh	r3, [r9, #2]
+	mov	r7, r2
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L111
+	ldrh	r2, [r10, r8]
+	cmp	r2, r3
+	bne	.L111
+	ldr	r1, .L118+4
+	mov	r2, #255
+	ldr	r0, .L118+8
+	bl	printk
+	bl	dump_stack
+.L111:
+	ldrh	r2, [r9, #2]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L112
+	ldrh	r3, [r10, r8]
+	cmp	r3, r2
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L112:
+	ldr	r0, [r5, #576]
+	mov	r3, r4, asl #1
+	ldrh	r1, [r0, r3]
+	ldrh	r3, [r9, #4]
+	cmp	r3, #0
+	mulne	r1, r3, r1
+	mov	r3, #6
+	mul	r2, r3, r2
+	ldr	r3, .L118+12
+	mvneq	r1, #0
+	mov	ip, r2, asr #1
+	mul	r3, r3, ip
+	mov	r3, r3, asl #1
+	ldrh	r0, [r0, r3]
+	ldr	r3, [r5, #524]
+	add	r2, r3, r2
+	ldrh	r3, [r2, #4]
+	cmp	r3, #0
+	mulne	r3, r3, r0
+	mvneq	r3, #0
+	cmp	r1, r3
+	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	mov	r0, r6
+	mov	r1, r4
+	mov	r2, r7
+	bl	_list_remove_node
+	mov	r0, r6
+	mov	r1, r4
+	mov	r2, r7
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	b	_insert_data_list
+.L119:
+	.align	2
+.L118:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+20
+	.word	.LC0
+	.word	-1431655765
+	.fnend
+	.size	_list_update_data_list, .-_list_update_data_list
+	.section	.text.unlikely,"ax",%progbits
+	.align	2
+	.type	rk_simple_strtoull.constprop.33, %function
+rk_simple_strtoull.constprop.33:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	cmp	r3, #48
+	movne	r2, r0
+	movne	lr, #10
+	bne	.L121
+	ldrb	r3, [r0, #1]	@ zero_extendqisi2
+	add	r2, r0, #1
+	orr	r3, r3, #32
+	cmp	r3, #120
+	bne	.L132
+	ldrb	r3, [r0, #2]	@ zero_extendqisi2
+	bic	ip, r3, #32
+	sub	ip, ip, #65
+	cmp	ip, #25
+	bls	.L122
+	sub	r3, r3, #48
+	cmp	r3, #9
+	bls	.L122
+.L132:
+	mov	lr, #8
+.L121:
+	mov	r0, #0
+.L123:
+	mov	r4, r2
+	ldrb	ip, [r2], #1	@ zero_extendqisi2
+	bic	r3, ip, #32
+	sub	r3, r3, #65
+	cmp	r3, #25
+	sub	r3, ip, #48
+	bls	.L124
+	cmp	r3, #9
+	bls	.L124
+.L128:
+	cmp	r1, #0
+	bne	.L125
+	ldmfd	sp!, {r4, pc}
+.L125:
+	str	r4, [r1]
+	ldmfd	sp!, {r4, pc}
+.L122:
+	add	r2, r0, #2
+	mov	lr, #16
+	b	.L121
+.L124:
+	cmp	r3, #9
+	orrhi	ip, ip, #32
+	subhi	r3, ip, #87
+	cmp	r3, lr
+	bcs	.L128
+	mla	r0, lr, r0, r3
+	b	.L123
+	.fnend
+	.size	rk_simple_strtoull.constprop.33, .-rk_simple_strtoull.constprop.33
+	.text
+	.align	2
+	.global	nand_flash_print_info
+	.type	nand_flash_print_info, %function
+nand_flash_print_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, lr}
+	.save {r4, lr}
+	.pad #16
+	ldr	r4, .L258
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L136
+	ldr	r0, .L258+4
+	ldr	r1, .L258+8
+	bl	printk
+.L136:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L137
+	ldr	r3, .L258+12
+	ldr	r0, [r3, #584]
+	ldrb	ip, [r0, #4]	@ zero_extendqisi2
+	ldrb	r1, [r0, #1]	@ zero_extendqisi2
+	ldrb	r2, [r0, #2]	@ zero_extendqisi2
+	ldrb	r3, [r0, #3]	@ zero_extendqisi2
+	str	ip, [sp]
+	ldrb	ip, [r0, #5]	@ zero_extendqisi2
+	str	ip, [sp, #4]
+	ldrb	r0, [r0, #6]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	ldr	r0, .L258+16
+	bl	printk
+.L137:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L138
+	ldr	r3, .L258+12
+	ldr	r0, .L258+20
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #8]	@ zero_extendqisi2
+	bl	printk
+.L138:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L139
+	ldr	r3, .L258+12
+	ldr	r0, .L258+24
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	bl	printk
+.L139:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L140
+	ldr	r3, .L258+12
+	ldr	r0, .L258+28
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #10]
+	bl	printk
+.L140:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L141
+	ldr	r3, .L258+12
+	ldr	r0, .L258+32
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	bl	printk
+.L141:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L142
+	ldr	r3, .L258+12
+	ldr	r0, .L258+36
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	bl	printk
+.L142:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L143
+	ldr	r3, .L258+12
+	ldr	r0, .L258+40
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #14]
+	bl	printk
+.L143:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L144
+	ldr	r3, .L258+12
+	ldr	r0, .L258+44
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #23]	@ zero_extendqisi2
+	bl	printk
+.L144:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L145
+	ldr	r3, .L258+12
+	ldr	r0, .L258+48
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #18]	@ zero_extendqisi2
+	bl	printk
+.L145:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L146
+	ldr	r3, .L258+12
+	ldr	r0, .L258+52
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #19]	@ zero_extendqisi2
+	bl	printk
+.L146:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L147
+	ldr	r3, .L258+12
+	ldr	r0, .L258+56
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #20]	@ zero_extendqisi2
+	bl	printk
+.L147:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L148
+	ldr	r3, .L258+12
+	ldr	r0, .L258+60
+	ldrb	r1, [r3, #588]	@ zero_extendqisi2
+	bl	printk
+.L148:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L149
+	ldr	r3, .L258+12
+	ldr	r0, .L258+64
+	ldrb	r1, [r3]	@ zero_extendqisi2
+	bl	printk
+.L149:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L150
+	ldr	r3, .L258+12
+	ldr	r0, .L258+68
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #22]	@ zero_extendqisi2
+	bl	printk
+.L150:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L151
+	ldr	r3, .L258+12
+	ldr	r0, .L258+72
+	ldrb	r1, [r3, #589]	@ zero_extendqisi2
+	bl	printk
+.L151:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L152
+	ldr	r3, .L258+12
+	ldr	r0, .L258+76
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	and	r1, r1, #1
+	bl	printk
+.L152:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L153
+	ldr	r3, .L258+12
+	ldr	r0, .L258+80
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #1, #1
+	bl	printk
+.L153:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L154
+	ldr	r3, .L258+12
+	ldr	r0, .L258+84
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #2, #1
+	bl	printk
+.L154:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L155
+	ldr	r3, .L258+12
+	ldr	r0, .L258+88
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #3, #1
+	bl	printk
+.L155:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L156
+	ldr	r3, .L258+12
+	ldr	r0, .L258+92
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #4, #1
+	bl	printk
+.L156:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L157
+	ldr	r3, .L258+12
+	ldr	r0, .L258+96
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #5, #1
+	bl	printk
+.L157:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L158
+	ldr	r3, .L258+12
+	ldr	r0, .L258+100
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #6, #1
+	bl	printk
+.L158:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L159
+	ldr	r3, .L258+12
+	ldr	r0, .L258+104
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #7, #1
+	bl	printk
+.L159:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L160
+	ldr	r3, .L258+12
+	ldr	r0, .L258+108
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #8, #1
+	bl	printk
+.L160:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L161
+	ldr	r3, .L258+12
+	ldr	r0, .L258+112
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #9, #1
+	bl	printk
+.L161:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L162
+	ldr	r3, .L258+12
+	ldr	r0, .L258+116
+	ldr	r3, [r3, #584]
+	ldrh	r1, [r3, #16]
+	ubfx	r1, r1, #10, #1
+	bl	printk
+.L162:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L163
+	ldr	r3, .L258+12
+	ldr	r0, .L258+120
+	ldrb	r1, [r3]	@ zero_extendqisi2
+	ldrb	r2, [r3, #590]	@ zero_extendqisi2
+	bl	printk
+.L163:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L164
+	ldr	r3, .L258+12
+	ldr	r0, .L258+124
+	ldrb	r1, [r3, #601]	@ zero_extendqisi2
+	ldrb	r2, [r3, #602]	@ zero_extendqisi2
+	bl	printk
+.L164:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L165
+	ldr	r3, .L258+12
+	ldr	r0, .L258+128
+	ldrb	r1, [r3, #599]	@ zero_extendqisi2
+	ldrb	r2, [r3, #600]	@ zero_extendqisi2
+	bl	printk
+.L165:
+	ldr	r3, [r4]
+	tst	r3, #4096
+	beq	.L135
+	ldr	r3, .L258+12
+	ldr	r0, .L258+132
+	ldrb	r1, [r3, #623]	@ zero_extendqisi2
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, lr}
+	b	printk
+.L135:
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, pc}
+.L259:
+	.align	2
+.L258:
+	.word	.LANCHOR2
+	.word	.LC4
+	.word	.LANCHOR1+44
+	.word	.LANCHOR0
+	.word	.LC5
+	.word	.LC6
+	.word	.LC7
+	.word	.LC8
+	.word	.LC9
+	.word	.LC10
+	.word	.LC11
+	.word	.LC12
+	.word	.LC13
+	.word	.LC14
+	.word	.LC15
+	.word	.LC16
+	.word	.LC17
+	.word	.LC18
+	.word	.LC19
+	.word	.LC20
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.word	.LC25
+	.word	.LC26
+	.word	.LC27
+	.word	.LC28
+	.word	.LC29
+	.word	.LC30
+	.word	.LC31
+	.word	.LC32
+	.word	.LC33
+	.word	.LC34
+	.fnend
+	.size	nand_flash_print_info, .-nand_flash_print_info
+	.align	2
+	.global	nandc_init
+	.type	nandc_init, %function
+nandc_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r5, .L280
+	mov	r3, #0
+	str	r3, [sp, #12]
+	mov	r7, r0
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L261
+	ldr	r0, .L280+4
+	mov	r2, r7
+	ldr	r1, .L280+8
+	bl	printk
+.L261:
+	ldr	r4, .L280+12
+	mov	r3, #6
+	ldr	r2, [r7, #352]
+	ldr	r6, .L280+12
+	strb	r3, [r4, #516]
+	ldr	r3, .L280+16
+	str	r7, [r4, #528]
+	cmp	r2, r3
+	ldr	r2, [r7, #128]
+	moveq	r3, #8
+	streqb	r3, [r4, #516]
+	ldr	r3, .L280+20
+	cmp	r2, r3
+	ldr	r2, .L280+24
+	moveq	r3, #9
+	streqb	r3, [r4, #516]
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	bne	.L264
+	mov	r3, #1
+	strb	r3, [r6, #624]
+	ldr	r3, [sp, #12]
+	orr	r3, r3, #256
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bic	r3, r3, #1835008
+	orr	r3, r3, #524288
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	str	r3, [r7]
+	mov	r3, #0
+	ldr	r0, [r6, #528]
+	str	r3, [r0, #520]
+	movw	r3, #4161
+	str	r3, [r0, #4]
+	movw	r3, #8321
+	str	r3, [r0, #8]
+	mov	r3, #38
+	str	r2, [r0, #80]
+	str	r3, [r0, #84]
+	mov	r3, #39
+	str	r3, [r0, #84]
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L266
+	ldr	r1, [r0]
+	ldr	r2, [r0, #8]
+	ldr	r3, [r0, #80]
+	ldr	ip, [r0, #84]
+	ldr	r0, [r0, #88]
+	b	.L279
+.L264:
+	ldr	r3, [sp, #12]
+	mov	r1, #0
+	strb	r1, [r6, #624]
+	mov	r0, #2048
+	orr	r3, r3, #256
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bic	r3, r3, #117440512
+	orr	r3, r3, #16777216
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	str	r3, [r7]
+	ldr	r3, [r6, #528]
+	str	r1, [r3, #336]
+	movw	r1, #4193
+	str	r1, [r3, #4]
+	movw	r1, #8321
+	str	r1, [r3, #344]
+	str	r2, [r3, #304]
+	mov	r2, #38
+	str	r2, [r3, #308]
+	mov	r2, #39
+	str	r2, [r3, #308]
+	bl	ftl_malloc
+	ldr	r3, [r5]
+	tst	r3, #4096
+	str	r0, [r6, #628]
+	beq	.L266
+	ldr	r0, [r6, #528]
+	ldr	r1, [r0]
+	ldr	r2, [r0, #344]
+	ldr	r3, [r0, #304]
+	ldr	ip, [r0, #308]
+	ldr	r0, [r0, #312]
+.L279:
+	str	r0, [sp, #4]
+	str	ip, [sp]
+	ldr	r0, .L280+28
+	bl	printk
+.L266:
+	movw	r2, #658
+	mov	r3, #1
+	strb	r3, [r4, #656]
+	mov	r3, #0
+	strh	r3, [r4, r2]	@ movhi
+	strb	r3, [r4, #660]
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L260
+	ldr	r3, .L280+12
+	ldr	r0, .L280+32
+	ldrb	r1, [r3, #516]	@ zero_extendqisi2
+	bl	printk
+.L260:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L281:
+	.align	2
+.L280:
+	.word	.LANCHOR2
+	.word	.LC35
+	.word	.LANCHOR1+68
+	.word	.LANCHOR0
+	.word	1446522928
+	.word	1446588464
+	.word	1052675
+	.word	.LC36
+	.word	.LC37
+	.fnend
+	.size	nandc_init, .-nandc_init
+	.align	2
+	.global	timer_delay_ns
+	.type	timer_delay_ns, %function
+timer_delay_ns:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+	mov	r0, r0, lsr #4
+	str	r0, [sp, #4]
+.L283:
+	ldr	r3, [sp, #4]
+	cmp	r3, #0
+	sub	r2, r3, #1
+	str	r2, [sp, #4]
+	bne	.L283
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+	.fnend
+	.size	timer_delay_ns, .-timer_delay_ns
+	.align	2
+	.global	flash_read_status
+	.type	flash_read_status, %function
+flash_read_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r3, #112
+	mov	r4, r0
+	str	r3, [r0, #8]
+	mov	r0, #120
+	bl	timer_delay_ns
+	ldr	r0, [r4]
+	uxtb	r0, r0
+	ldmfd	sp!, {r4, pc}
+	.fnend
+	.size	flash_read_status, .-flash_read_status
+	.align	2
+	.global	toshiba_set_rr_para
+	.type	toshiba_set_rr_para, %function
+toshiba_set_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r8, r1, r1, asl #2
+	ldr	r9, .L298
+	mov	r5, r0
+	ldr	r7, .L298+4
+	mov	r6, r1
+	add	r10, r9, #80
+	mov	r4, #0
+.L289:
+	ldrb	r3, [r7, #662]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L297
+	mov	r3, #85
+	str	r3, [r5, #8]
+	ldrsb	r3, [r4, r10]
+	mov	r0, #200
+	str	r3, [r5, #4]
+	bl	timer_delay_ns
+	ldrb	r3, [r7, #661]	@ zero_extendqisi2
+	cmp	r3, #34
+	addeq	r3, r4, r8
+	addeq	r3, r10, r3
+	beq	.L296
+	cmp	r3, #35
+	addne	r3, r9, r6
+	ldrnesb	r3, [r3, #224]
+	bne	.L295
+	ldr	r3, .L298+8
+	add	r2, r4, r8
+	add	r3, r3, r2
+.L296:
+	ldrsb	r3, [r3, #5]
+.L295:
+	str	r3, [r5]
+	add	r4, r4, #1
+	b	.L289
+.L297:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L299:
+	.align	2
+.L298:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR1+128
+	.fnend
+	.size	toshiba_set_rr_para, .-toshiba_set_rr_para
+	.align	2
+	.type	hynix_set_rr_para, %function
+hynix_set_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, r0, asl #8
+	ldr	r3, .L307
+	ldr	r4, [r3, #664]
+	ldr	r7, [r3, #528]
+	add	lr, r4, #128
+	add	r9, r4, #127
+	mov	r3, r4
+	ldrb	ip, [r4, #113]	@ zero_extendqisi2
+	ldrb	r2, [r3, #112]!	@ zero_extendqisi2
+	add	r6, r7, r5
+	cmp	r2, #8
+	mul	r1, r1, ip
+	movne	r2, #160
+	mlane	r1, r2, r0, r1
+	sub	ip, ip, #1
+	add	r8, lr, ip
+	mov	r2, #54
+	str	r2, [r6, #2056]
+	add	r1, r1, #32
+	add	r3, r3, r1
+	sub	r4, r3, #1
+.L303:
+	cmp	r9, r8
+	beq	.L306
+	ldrb	r3, [r9, #1]!	@ zero_extendqisi2
+	mov	r0, #120
+	str	r3, [r6, #2052]
+	bl	timer_delay_ns
+	ldrsb	r3, [r4, #1]!
+	str	r3, [r6, #2048]
+	b	.L303
+.L306:
+	add	r5, r7, r5
+	mov	r3, #22
+	str	r3, [r5, #2056]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L308:
+	.align	2
+.L307:
+	.word	.LANCHOR0
+	.fnend
+	.size	hynix_set_rr_para, .-hynix_set_rr_para
+	.align	2
+	.global	hynix_reconfig_rr_para
+	.type	hynix_reconfig_rr_para, %function
+hynix_reconfig_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r5, .L315
+	ldrb	r2, [r5, #661]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	cmp	r2, #7
+	ldmhifd	sp!, {r3, r4, r5, pc}
+	ldr	r2, [r5, #664]
+	add	r2, r2, r0
+	ldrb	r2, [r2, #120]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	mov	r1, #0
+	mov	r4, r0
+	bl	hynix_set_rr_para
+	ldr	r2, [r5, #664]
+	mov	r3, #0
+	add	r4, r2, r4
+	strb	r3, [r4, #120]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L316:
+	.align	2
+.L315:
+	.word	.LANCHOR0
+	.fnend
+	.size	hynix_reconfig_rr_para, .-hynix_reconfig_rr_para
+	.align	2
+	.global	nandc_set_ddr_para
+	.type	nandc_set_ddr_para, %function
+nandc_set_ddr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L320
+	ldrb	r2, [r3, #516]	@ zero_extendqisi2
+	ldr	r3, [r3, #528]
+	cmp	r2, #9
+	mov	r2, r0, asl #16
+	mov	r0, r0, asl #8
+	orr	r0, r2, r0
+	orr	r0, r0, #3
+	streq	r0, [r3, #80]
+	strne	r0, [r3, #304]
+	bx	lr
+.L321:
+	.align	2
+.L320:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_set_ddr_para, .-nandc_set_ddr_para
+	.align	2
+	.global	nandc_get_ddr_para
+	.type	nandc_get_ddr_para, %function
+nandc_get_ddr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L326
+	ldrb	r2, [r3, #516]	@ zero_extendqisi2
+	ldr	r3, [r3, #528]
+	cmp	r2, #9
+	ldreq	r0, [r3, #80]
+	ldrne	r0, [r3, #304]
+	ubfx	r0, r0, #8, #8
+	bx	lr
+.L327:
+	.align	2
+.L326:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_get_ddr_para, .-nandc_get_ddr_para
+	.align	2
+	.global	nandc_set_if_mode
+	.type	nandc_set_if_mode, %function
+nandc_set_if_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r1, .L336
+	ands	ip, r0, #6
+	ldr	r3, [r1, #528]
+	ldr	r2, [r3]
+	bfieq	r2, ip, #13, #1
+	beq	.L332
+	orr	r2, r2, #24576
+	ldrb	r1, [r1, #516]	@ zero_extendqisi2
+	bfc	r2, #15, #1
+	tst	r0, #4
+	orr	r2, r2, #196608
+	movw	r0, #8321
+	orrne	r2, r2, #32768
+	cmp	r1, #9
+	ldr	r1, .L336+4
+	streq	r0, [r3, #8]
+	strne	r0, [r3, #344]
+	streq	r1, [r3, #80]
+	moveq	r1, #38
+	strne	r1, [r3, #304]
+	movne	r1, #38
+	streq	r1, [r3, #84]
+	moveq	r1, #39
+	strne	r1, [r3, #308]
+	movne	r1, #39
+	streq	r1, [r3, #84]
+	strne	r1, [r3, #308]
+.L332:
+	str	r2, [r3]
+	bx	lr
+.L337:
+	.align	2
+.L336:
+	.word	.LANCHOR0
+	.word	1052675
+	.fnend
+	.size	nandc_set_if_mode, .-nandc_set_if_mode
+	.align	2
+	.global	nandc_cs
+	.type	nandc_cs, %function
+nandc_cs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L339
+	mov	r2, #1
+	mov	r0, r2, asl r0
+	ldr	r1, [r3, #528]
+	ldr	r3, [r1]
+	bfi	r3, r0, #0, #8
+	str	r3, [r1]
+	bx	lr
+.L340:
+	.align	2
+.L339:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_cs, .-nandc_cs
+	.align	2
+	.global	nandc_de_cs
+	.type	nandc_de_cs, %function
+nandc_de_cs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L342
+	ldr	r2, [r3, #528]
+	ldr	r3, [r2]
+	bfc	r3, #0, #8
+	bfc	r3, #17, #1
+	str	r3, [r2]
+	bx	lr
+.L343:
+	.align	2
+.L342:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_de_cs, .-nandc_de_cs
+	.align	2
+	.global	flash_wait_device_ready_raw
+	.type	flash_wait_device_ready_raw, %function
+flash_wait_device_ready_raw:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	ldr	r4, .L349
+	mov	r6, r1
+	mov	r7, r2
+	ldrb	r3, [r4, #589]	@ zero_extendqisi2
+	cmp	r3, r0
+	bhi	.L345
+	ldr	r1, .L349+4
+	movw	r2, #691
+	ldr	r0, .L349+8
+	bl	printk
+	bl	dump_stack
+.L345:
+	add	r5, r4, r5
+	ldr	r4, [r4, #528]
+	mov	r10, r6, lsr #8
+	mov	r9, r6, lsr #16
+	ldrb	r8, [r5, #668]	@ zero_extendqisi2
+	mov	fp, #120
+	mov	r0, r8
+	add	r4, r4, r8, asl #8
+	bl	nandc_cs
+.L346:
+	str	fp, [r4, #2056]
+	uxtb	r3, r6
+	mov	r0, #120
+	str	r3, [r4, #2052]
+	str	r10, [r4, #2052]
+	str	r9, [r4, #2052]
+	bl	timer_delay_ns
+	ldr	r5, [r4, #2048]
+	uxtb	r5, r5
+	sub	r3, r5, #255
+	and	r2, r7, r5
+	clz	r3, r3
+	mov	r3, r3, lsr #5
+	cmp	r2, r7
+	orrne	r3, r3, #1
+	cmp	r3, #0
+	bne	.L346
+	mov	r0, r8
+	bl	nandc_de_cs
+	mov	r0, r5
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L350:
+	.align	2
+.L349:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+232
+	.word	.LC0
+	.fnend
+	.size	flash_wait_device_ready_raw, .-flash_wait_device_ready_raw
+	.align	2
+	.global	flash_wait_device_ready
+	.type	flash_wait_device_ready, %function
+flash_wait_device_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r3, #1
+	ldr	r6, .L363
+	tst	r0, #50331648
+	mov	r8, r1
+	ldrb	r2, [r6, #676]	@ zero_extendqisi2
+	rsb	r5, r2, #24
+	mov	r4, r3, asl r5
+	mov	r3, r3, asl r2
+	sub	r3, r3, #1
+	sub	r4, r4, #1
+	and	r5, r3, r0, asr r5
+	and	r4, r4, r0
+	uxtb	r5, r5
+	bne	.L352
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L353
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L352
+.L353:
+	ldrh	r7, [r6, #2]
+	mov	r0, r4
+	mov	r1, r7
+	bl	__aeabi_uidiv
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L363
+	mul	r0, r7, r0
+	rsb	r4, r0, r4
+	mov	r4, r4, asl #1
+	addeq	r4, r3, r4
+	ldreqh	r4, [r4, #4]
+	add	r4, r4, r0
+.L352:
+	mov	r0, r5
+	mov	r1, r4
+	mov	r2, r8
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	b	flash_wait_device_ready_raw
+.L364:
+	.align	2
+.L363:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_wait_device_ready, .-flash_wait_device_ready
+	.align	2
+	.global	nandc_wait_flash_ready_no_delay
+	.type	nandc_wait_flash_ready_no_delay, %function
+nandc_wait_flash_ready_no_delay:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #12
+	ldr	r4, .L371
+	ldr	r5, .L371+4
+.L367:
+	ldr	r3, [r5, #528]
+	ldr	r3, [r3]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #512
+	bne	.L368
+	mov	r0, #10
+	bl	timer_delay_ns
+	subs	r4, r4, #1
+	bne	.L367
+	mvn	r0, #0
+	b	.L366
+.L368:
+	mov	r0, #0
+.L366:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, pc}
+.L372:
+	.align	2
+.L371:
+	.word	100000
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_wait_flash_ready_no_delay, .-nandc_wait_flash_ready_no_delay
+	.align	2
+	.global	zftl_flash_enter_slc_mode
+	.type	zftl_flash_enter_slc_mode, %function
+zftl_flash_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L394
+	ldrb	r1, [r2]	@ zero_extendqisi2
+	cmp	r1, #0
+	bxeq	lr
+	cmp	r1, #1
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, [r2, #528]
+	bne	.L376
+	ldr	r2, .L394+4
+	ldrb	r2, [r2, #33]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	b	.L393
+.L376:
+	cmp	r1, #2
+	bne	.L378
+	add	r2, r2, r0
+	ldrb	r1, [r2, #680]	@ zero_extendqisi2
+	cmp	r1, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	mov	r1, #0
+	strb	r1, [r2, #680]
+	ldr	r2, .L394+4
+	ldrb	r2, [r2, #33]	@ zero_extendqisi2
+	cmp	r2, r1
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+.L393:
+	add	r0, r3, r0, asl #8
+	str	r2, [r0, #2056]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L378:
+	cmp	r1, #3
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	add	r2, r2, r0
+	ldrb	r1, [r2, #680]	@ zero_extendqisi2
+	cmp	r1, #0
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	add	r4, r3, r0, asl #8
+	mov	r3, #239
+	mov	r0, #50
+	mov	r5, #0
+	str	r3, [r4, #2056]
+	mov	r3, #145
+	str	r3, [r4, #2052]
+	strb	r5, [r2, #680]
+	bl	timer_delay_ns
+	str	r5, [r4, #2048]
+	mov	r3, #1
+	mov	r0, #150
+	str	r3, [r4, #2048]
+	str	r5, [r4, #2048]
+	str	r5, [r4, #2048]
+	bl	timer_delay_ns
+	bl	nandc_wait_flash_ready_no_delay
+	mov	r3, #218
+	mov	r0, #150
+	str	r3, [r4, #2056]
+	bl	timer_delay_ns
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	nandc_wait_flash_ready_no_delay
+.L395:
+	.align	2
+.L394:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	zftl_flash_enter_slc_mode, .-zftl_flash_enter_slc_mode
+	.align	2
+	.global	zftl_flash_exit_slc_mode
+	.type	zftl_flash_exit_slc_mode, %function
+zftl_flash_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L421
+	ldrb	r2, [r3]	@ zero_extendqisi2
+	cmp	r2, #0
+	bxeq	lr
+	cmp	r2, #1
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r7, [r3, #528]
+	ldreq	r3, .L421+4
+	ldreqb	r3, [r3, #34]	@ zero_extendqisi2
+	beq	.L420
+	cmp	r2, #2
+	bne	.L401
+	add	r3, r3, r0
+	ldrb	r2, [r3, #680]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, pc}
+	ldr	r1, .L421+4
+	ldrb	r2, [r1, #16]	@ zero_extendqisi2
+	cmp	r2, #2
+	movne	r2, #4
+	strb	r2, [r3, #680]
+	ldrb	r3, [r1, #34]	@ zero_extendqisi2
+.L420:
+	cmp	r3, #0
+	addne	r0, r7, r0, asl #8
+	strne	r3, [r0, #2056]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L401:
+	cmp	r2, #3
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, pc}
+	add	r6, r3, r0
+	ldrb	r3, [r6, #680]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, pc}
+	ldr	r8, .L421+4
+	mov	r4, r0, asl #8
+	add	r5, r7, r4
+	mov	r0, #50
+	add	r4, r7, r4
+	ldrb	r3, [r8, #16]	@ zero_extendqisi2
+	cmp	r3, #2
+	movne	r3, #4
+	strb	r3, [r6, #680]
+	mov	r3, #239
+	str	r3, [r5, #2056]
+	mov	r3, #145
+	str	r3, [r5, #2052]
+	bl	timer_delay_ns
+	ldrb	r3, [r8, #11]	@ zero_extendqisi2
+	mov	r0, #150
+	cmp	r3, #9
+	mov	r3, #1
+	streq	r3, [r5, #2048]
+	ldrneb	r2, [r6, #680]	@ zero_extendqisi2
+	strne	r2, [r5, #2048]
+	str	r3, [r5, #2048]
+	mov	r3, #0
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+	bl	timer_delay_ns
+	bl	nandc_wait_flash_ready_no_delay
+	mov	r3, #223
+	mov	r0, #150
+	str	r3, [r4, #2056]
+	bl	timer_delay_ns
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	b	nandc_wait_flash_ready_no_delay
+.L422:
+	.align	2
+.L421:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	zftl_flash_exit_slc_mode, .-zftl_flash_exit_slc_mode
+	.align	2
+	.global	flash_start_page_read
+	.type	flash_start_page_read, %function
+flash_start_page_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L433
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mvn	r5, #0
+	ldrb	r4, [r2, #676]	@ zero_extendqisi2
+	mov	r6, r0
+	ldrb	r3, [r2, #589]	@ zero_extendqisi2
+	mov	r8, r1
+	rsb	r7, r4, #24
+	mvn	r4, r5, asl r4
+	and	r4, r4, r1, lsr r7
+	mov	r5, r2
+	uxtb	r4, r4
+	cmp	r3, r4
+	bhi	.L424
+	ldr	r1, .L433+4
+	movw	r2, #866
+	ldr	r0, .L433+8
+	bl	printk
+	bl	dump_stack
+.L424:
+	ldrb	r3, [r5, #589]	@ zero_extendqisi2
+	ldr	r9, .L433
+	cmp	r3, r4
+	ldmlsfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+	add	r4, r9, r4
+	mvn	r3, #0
+	bic	r7, r8, r3, asl r7
+	ubfx	r8, r8, #24, #2
+	ldrb	r10, [r4, #668]	@ zero_extendqisi2
+	ldr	r5, [r9, #528]
+	mov	r0, r10
+	mov	r4, r10, asl #8
+	bl	nandc_cs
+	cmp	r8, #0
+	bne	.L426
+	mov	r0, r7
+	bl	slc_phy_page_address_calc
+	ldrb	r3, [r9]	@ zero_extendqisi2
+	cmp	r3, #0
+	mov	r7, r0
+	beq	.L427
+	mov	r0, r10
+	bl	zftl_flash_enter_slc_mode
+	b	.L427
+.L426:
+	ldr	r3, [r9, #584]
+	ldrb	r3, [r3, #12]	@ zero_extendqisi2
+	cmp	r3, #3
+	bne	.L428
+	ldrb	r3, [r9, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	addeq	r3, r5, r4
+	streq	r8, [r3, #2056]
+	beq	.L427
+.L428:
+	mov	r0, r10
+	bl	zftl_flash_exit_slc_mode
+.L427:
+	add	r4, r5, r4
+	mov	r0, #0
+	uxtb	r3, r7
+	str	r0, [r4, #2056]
+	str	r0, [r4, #2052]
+	str	r0, [r4, #2052]
+	str	r3, [r4, #2052]
+	mov	r3, r7, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r7, lsr #16
+	str	r3, [r4, #2052]
+	str	r6, [r4, #2056]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	b	nandc_de_cs
+.L434:
+	.align	2
+.L433:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+260
+	.word	.LC0
+	.fnend
+	.size	flash_start_page_read, .-flash_start_page_read
+	.align	2
+	.global	nandc_wait_flash_ready
+	.type	nandc_wait_flash_ready, %function
+nandc_wait_flash_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #12
+	mov	r0, #150
+	bl	timer_delay_ns
+	ldr	r4, .L441
+	ldr	r5, .L441+4
+.L437:
+	ldr	r3, [r5, #528]
+	ldr	r3, [r3]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #512
+	bne	.L438
+	mov	r0, #10
+	bl	timer_delay_ns
+	subs	r4, r4, #1
+	bne	.L437
+	mvn	r0, #0
+	b	.L436
+.L438:
+	mov	r0, #0
+.L436:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, pc}
+.L442:
+	.align	2
+.L441:
+	.word	100000
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_wait_flash_ready, .-nandc_wait_flash_ready
+	.align	2
+	.global	sandisk_set_rr_para
+	.type	sandisk_set_rr_para, %function
+sandisk_set_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r3, #239
+	mov	r5, r0
+	str	r3, [r0, #8]
+	mov	r3, #17
+	str	r3, [r0, #4]
+	mov	r0, #200
+	mov	r4, r1
+	bl	timer_delay_ns
+	ldr	r0, .L451
+	ldr	r1, .L451+4
+	add	r4, r4, r4, asl #2
+	sub	ip, r0, #48
+	mov	r2, #0
+.L444:
+	ldrb	r3, [r1, #662]	@ zero_extendqisi2
+	cmp	r2, r3
+	bcs	.L450
+	ldrb	r3, [r1, #661]	@ zero_extendqisi2
+	cmp	r3, #67
+	add	r3, r2, r4
+	addeq	r3, ip, r3
+	addne	r3, r0, r3
+	add	r2, r2, #1
+	ldrsb	r3, [r3, #5]
+	str	r3, [r5]
+	b	.L444
+.L450:
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	nandc_wait_flash_ready
+.L452:
+	.align	2
+.L451:
+	.word	.LANCHOR1+128
+	.word	.LANCHOR0
+	.fnend
+	.size	sandisk_set_rr_para, .-sandisk_set_rr_para
+	.align	2
+	.global	toshiba_3d_set_tlc_rr_para
+	.type	toshiba_3d_set_tlc_rr_para, %function
+toshiba_3d_set_tlc_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	add	r1, r1, #1
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	rsb	r1, r1, r1, asl #3
+	ldr	r5, .L455
+	mov	r6, #0
+	mov	r7, #213
+	mvn	r3, #118
+	add	r5, r5, r1
+	str	r7, [r0, #8]
+	str	r6, [r0, #4]
+	mov	r4, r0
+	str	r3, [r0, #4]
+	add	r3, r5, #284
+	ldrsb	r3, [r3]
+	str	r3, [r0]
+	movw	r3, #285
+	ldrsb	r3, [r5, r3]
+	str	r3, [r0]
+	movw	r3, #286
+	ldrsb	r3, [r5, r3]
+	str	r3, [r0]
+	movw	r3, #287
+	ldrsb	r3, [r5, r3]
+	str	r3, [r0]
+	bl	nandc_wait_flash_ready
+	str	r7, [r4, #8]
+	mvn	r3, #117
+	str	r6, [r4, #4]
+	str	r3, [r4, #4]
+	add	r3, r5, #288
+	ldrsb	r3, [r3]
+	str	r3, [r4]
+	movw	r3, #289
+	ldrsb	r3, [r5, r3]
+	str	r3, [r4]
+	movw	r3, #290
+	ldrsb	r3, [r5, r3]
+	str	r3, [r4]
+	str	r6, [r4]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	b	nandc_wait_flash_ready
+.L456:
+	.align	2
+.L455:
+	.word	.LANCHOR1
+	.fnend
+	.size	toshiba_3d_set_tlc_rr_para, .-toshiba_3d_set_tlc_rr_para
+	.align	2
+	.global	toshiba_3d_set_slc_rr_para
+	.type	toshiba_3d_set_slc_rr_para, %function
+toshiba_3d_set_slc_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r3, #213
+	mvn	r2, #116
+	str	r3, [r0, #8]
+	mov	r3, #0
+	str	r3, [r0, #4]
+	str	r2, [r0, #4]
+	ldr	r2, .L458
+	add	r2, r2, r1
+	movw	r1, #685
+	ldrsb	r2, [r2, r1]
+	str	r2, [r0]
+	str	r3, [r0]
+	str	r3, [r0]
+	str	r3, [r0]
+	b	nandc_wait_flash_ready
+.L459:
+	.align	2
+.L458:
+	.word	.LANCHOR1
+	.fnend
+	.size	toshiba_3d_set_slc_rr_para, .-toshiba_3d_set_slc_rr_para
+	.align	2
+	.global	toshiba_tlc_set_rr_para
+	.type	toshiba_tlc_set_rr_para, %function
+toshiba_tlc_set_rr_para:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r2, #0
+	ldr	r3, .L464
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, #239
+	mov	r4, r0
+	str	r6, [r0, #8]
+	beq	.L461
+	rsb	r1, r1, r1, asl #3
+	mov	r2, #18
+	add	r5, r3, r1
+	str	r2, [r0, #4]
+	ldrb	r3, [r5, #36]	@ zero_extendqisi2
+	str	r3, [r0]
+	ldrb	r3, [r5, #37]	@ zero_extendqisi2
+	str	r3, [r0]
+	ldrb	r3, [r5, #38]	@ zero_extendqisi2
+	str	r3, [r0]
+	ldrb	r3, [r5, #39]	@ zero_extendqisi2
+	str	r3, [r0]
+	bl	nandc_wait_flash_ready
+	str	r6, [r4, #8]
+	mov	r3, #19
+	str	r3, [r4, #4]
+	ldrb	r3, [r5, #40]	@ zero_extendqisi2
+	str	r3, [r4]
+	ldrb	r3, [r5, #41]	@ zero_extendqisi2
+	str	r3, [r4]
+	ldrb	r3, [r5, #42]	@ zero_extendqisi2
+	str	r3, [r4]
+	mov	r3, #0
+	str	r3, [r4]
+	b	.L462
+.L461:
+	add	r3, r3, r1
+	mov	r0, #20
+	str	r0, [r4, #4]
+	ldrb	r3, [r3, #368]	@ zero_extendqisi2
+	str	r3, [r4]
+	str	r2, [r4]
+	str	r2, [r4]
+	str	r2, [r4]
+.L462:
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	nandc_wait_flash_ready
+.L465:
+	.align	2
+.L464:
+	.word	.LANCHOR2
+	.fnend
+	.size	toshiba_tlc_set_rr_para, .-toshiba_tlc_set_rr_para
+	.align	2
+	.global	flash_start_plane_read
+	.type	flash_start_plane_read, %function
+flash_start_plane_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r3, #1
+	ldr	r8, .L485
+	ubfx	r7, r0, #24, #2
+	ldrb	r2, [r8, #676]	@ zero_extendqisi2
+	rsb	r5, r2, #24
+	mov	r4, r3, asl r5
+	mov	r3, r3, asl r2
+	sub	r3, r3, #1
+	sub	r4, r4, #1
+	and	r5, r3, r0, lsr r5
+	ldrb	r3, [r8, #589]	@ zero_extendqisi2
+	and	r6, r4, r0
+	and	r4, r4, r1
+	uxtb	r5, r5
+	cmp	r3, r5
+	bhi	.L467
+	ldr	r1, .L485+4
+	movw	r2, #965
+	ldr	r0, .L485+8
+	bl	printk
+	bl	dump_stack
+.L467:
+	add	r5, r8, r5
+	ldr	r3, .L485
+	ldr	r9, [r8, #528]
+	ldrb	r10, [r5, #668]	@ zero_extendqisi2
+	str	r3, [sp, #4]
+	mov	r0, r10
+	mov	fp, r10, asl #8
+	bl	nandc_cs
+	cmp	r7, #0
+	ldr	r3, [sp, #4]
+	bne	.L468
+	mov	r0, r6
+	bl	slc_phy_page_address_calc
+	mov	r6, r0
+	mov	r0, r4
+	bl	slc_phy_page_address_calc
+	ldr	r3, [sp, #4]
+	mov	r4, r0
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L469
+	mov	r0, r10
+	bl	zftl_flash_enter_slc_mode
+	b	.L469
+.L468:
+	ldr	r2, [r3, #584]
+	ldrb	r2, [r2, #12]	@ zero_extendqisi2
+	cmp	r2, #3
+	bne	.L470
+	ldrb	r3, [r3, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	addeq	r3, r9, fp
+	streq	r7, [r3, #2056]
+	beq	.L469
+.L470:
+	mov	r0, r10
+	bl	zftl_flash_exit_slc_mode
+.L469:
+	ldrb	r3, [r8, #607]	@ zero_extendqisi2
+	uxtb	r0, r6
+	mov	r1, r6, lsr #8
+	ldr	r2, .L485
+	cmp	r3, #1
+	ldrb	ip, [r8, #599]	@ zero_extendqisi2
+	mov	r6, r6, lsr #16
+	bne	.L471
+	ldrb	r3, [r2, #600]	@ zero_extendqisi2
+	add	r5, r9, fp
+	mov	r8, #0
+	str	r2, [sp, #4]
+	str	ip, [r5, #2056]
+	add	fp, r9, fp
+	str	r8, [r5, #2052]
+	str	r8, [r5, #2052]
+	str	r0, [r5, #2052]
+	str	r1, [r5, #2052]
+	str	r6, [r5, #2052]
+	str	r3, [r5, #2056]
+	bl	nandc_wait_flash_ready
+	ldr	r2, [sp, #4]
+	ldr	r3, [r2, #584]
+	ldrb	r2, [r3, #12]	@ zero_extendqisi2
+	subs	r3, r7, r8
+	movne	r3, #1
+	cmp	r2, #3
+	movne	r3, #0
+	cmp	r3, r8
+	uxtb	r3, r4
+	strne	r7, [r5, #2056]
+	str	r8, [fp, #2056]
+	str	r8, [r5, #2052]
+	str	r8, [r5, #2052]
+	str	r3, [r5, #2052]
+	mov	r3, r4, lsr #8
+	mov	r4, r4, lsr #16
+	str	r3, [r5, #2052]
+	str	r4, [r5, #2052]
+	mov	r3, #48
+	str	r3, [fp, #2056]
+	b	.L473
+.L471:
+	ldr	r2, [r2, #584]
+	add	r3, r9, fp
+	add	r9, r9, fp
+	str	ip, [r3, #2056]
+	str	r0, [r3, #2052]
+	str	r1, [r3, #2052]
+	str	r6, [r3, #2052]
+	ldrb	r1, [r2, #12]	@ zero_extendqisi2
+	adds	r2, r7, #0
+	movne	r2, #1
+	cmp	r1, #3
+	movne	r2, #0
+	cmp	r2, #0
+	ldrb	r2, [r8, #600]	@ zero_extendqisi2
+	strne	r7, [r3, #2056]
+	str	r2, [r9, #2056]
+	uxtb	r2, r4
+	str	r2, [r3, #2052]
+	mov	r2, r4, lsr #8
+	mov	r4, r4, lsr #16
+	str	r2, [r3, #2052]
+	str	r4, [r3, #2052]
+	mov	r3, #48
+	str	r3, [r9, #2056]
+.L473:
+	mov	r0, r10
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	nandc_de_cs
+.L486:
+	.align	2
+.L485:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+696
+	.word	.LC0
+	.fnend
+	.size	flash_start_plane_read, .-flash_start_plane_read
+	.align	2
+	.global	flash_set_interface_mode
+	.type	flash_set_interface_mode, %function
+flash_set_interface_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r8, r0
+	ldr	r6, .L520
+	mov	r9, #0
+	ldr	r10, .L520+4
+	mov	r7, r6
+.L499:
+	ldr	r3, .L520+8
+	ldr	r5, [r6, #528]
+	ldrb	r4, [r3, r9, asl #3]	@ zero_extendqisi2
+	cmp	r4, #69
+	cmpne	r4, #152
+	beq	.L488
+	cmp	r4, #137
+	cmpne	r4, #44
+	moveq	r3, #1
+	movne	r3, #0
+	cmp	r4, #155
+	orreq	r3, r3, #1
+	cmp	r3, #0
+	beq	.L489
+.L488:
+	cmp	r8, #1
+	ldrb	r1, [r7, #720]	@ zero_extendqisi2
+	bne	.L490
+	tst	r1, #1
+	beq	.L489
+	ldr	r3, [r10]
+	tst	r3, #4096
+	beq	.L491
+	ldr	r0, .L520+12
+	bl	printk
+.L491:
+	mov	r2, r9, asl #8
+	cmp	r4, #44
+	cmpne	r4, #137
+	add	r3, r5, r2
+	mov	r1, #239
+	str	r1, [r3, #2056]
+	moveq	r1, #1
+	streq	r1, [r3, #2052]
+	moveq	r1, #5
+	beq	.L518
+	cmp	r4, #155
+	moveq	r1, #1
+	movne	r1, #128
+	streq	r1, [r3, #2052]
+	moveq	r1, #3
+	strne	r1, [r3, #2052]
+	movne	r1, #1
+	b	.L518
+.L490:
+	tst	r1, #4
+	beq	.L489
+	ldr	r3, [r10]
+	tst	r3, #4096
+	beq	.L495
+	ldr	r0, .L520+16
+	bl	printk
+.L495:
+	mov	r2, r9, asl #8
+	cmp	r4, #44
+	cmpne	r4, #137
+	add	r3, r5, r2
+	mov	r1, #239
+	str	r1, [r3, #2056]
+	moveq	r1, #1
+	movne	r1, #0
+	moveq	r1, #1
+	streq	r1, [r3, #2052]
+	moveq	r1, #35
+	beq	.L518
+	cmp	r4, #155
+	moveq	r1, #1
+	streq	r1, [r3, #2052]
+	moveq	r1, #37
+	movne	r0, #128
+	strne	r0, [r3, #2052]
+.L518:
+	add	r5, r5, r2
+	str	r1, [r3, #2048]
+	mov	r3, #0
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+.L489:
+	add	r9, r9, #1
+	cmp	r9, #4
+	bne	.L499
+	bl	nandc_wait_flash_ready
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L521:
+	.align	2
+.L520:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+688
+	.word	.LC38
+	.word	.LC39
+	.fnend
+	.size	flash_set_interface_mode, .-flash_set_interface_mode
+	.align	2
+	.global	flash_reset
+	.type	flash_reset, %function
+flash_reset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L523
+	mov	r2, #255
+	ldr	r3, [r3, #528]
+	add	r0, r3, r0, asl #8
+	str	r2, [r0, #2056]
+	b	nandc_wait_flash_ready
+.L524:
+	.align	2
+.L523:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_reset, .-flash_reset
+	.align	2
+	.global	flash_read_id
+	.type	flash_read_id, %function
+flash_read_id:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #16
+	mov	r6, r0
+	ldr	r3, .L528
+	mov	r4, r1
+	ldr	r5, [r3, #528]
+	bl	flash_reset
+	mov	r0, r6
+	add	r5, r5, r6, asl #8
+	bl	nandc_cs
+	mov	r3, #144
+	mov	r0, #200
+	str	r3, [r5, #2056]
+	mov	r3, #0
+	str	r3, [r5, #2052]
+	bl	timer_delay_ns
+	ldr	r3, [r5, #2048]
+	mov	r0, r6
+	strb	r3, [r4]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #1]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #2]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #3]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #4]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #5]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #6]
+	ldr	r3, [r5, #2048]
+	strb	r3, [r4, #7]
+	bl	nandc_de_cs
+	ldrb	r2, [r4]	@ zero_extendqisi2
+	sub	r3, r2, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L525
+	ldrb	r1, [r4, #2]	@ zero_extendqisi2
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	ldr	r0, .L528+4
+	str	r1, [sp]
+	ldrb	r1, [r4, #3]	@ zero_extendqisi2
+	str	r1, [sp, #4]
+	ldrb	r1, [r4, #4]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	ldrb	r1, [r4, #5]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	add	r1, r6, #1
+	bl	printk
+.L525:
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L529:
+	.align	2
+.L528:
+	.word	.LANCHOR0
+	.word	.LC40
+	.fnend
+	.size	flash_read_id, .-flash_read_id
+	.align	2
+	.global	flash_read_spare
+	.type	flash_read_spare, %function
+flash_read_spare:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r2
+	ldr	r3, .L532
+	ldr	r2, .L532+4
+	ldrb	r3, [r3, #13]	@ zero_extendqisi2
+	ldr	r4, [r2, #528]
+	mov	r2, #0
+	add	r4, r4, r0, asl #8
+	mov	r3, r3, asl #9
+	str	r2, [r4, #2056]
+	str	r3, [r4, #2052]
+	mov	r3, r3, lsr #8
+	str	r3, [r4, #2052]
+	uxtb	r3, r1
+	str	r3, [r4, #2052]
+	mov	r3, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r3, [r4, #2052]
+	mov	r3, #48
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r4, #2048]
+	strb	r3, [r5]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L533:
+	.align	2
+.L532:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_read_spare, .-flash_read_spare
+	.align	2
+	.global	flash_read_otp_data
+	.type	flash_read_otp_data, %function
+flash_read_otp_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L538
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r8, r0
+	ldr	r7, [r3, #528]
+	mov	r10, r8, asl #8
+	mov	r5, r1
+	mov	r9, r2
+	add	r4, r7, r10
+	bl	nandc_cs
+	mov	fp, #144
+	mov	r3, #239
+	mov	r0, #50
+	str	r3, [r4, #2056]
+	str	fp, [r4, #2052]
+	mov	r6, #0
+	bl	timer_delay_ns
+	mov	r3, #1
+	str	r3, [r4, #2048]
+	str	r6, [r4, #2048]
+	str	r6, [r4, #2048]
+	str	r6, [r4, #2048]
+	bl	nandc_wait_flash_ready
+	mov	r3, #238
+	str	r3, [r4, #2056]
+	str	fp, [r4, #2052]
+	ldr	r2, [r4, #2048]
+	ldr	r3, [r4, #2048]
+	ldr	r1, [r4, #2048]
+	ldr	r0, .L538+4
+	str	r1, [sp]
+	mov	r1, r5
+	bl	printk
+	bl	nandc_wait_flash_ready
+	str	r6, [r4, #2056]
+	uxtb	r3, r5
+	str	r6, [r4, #2052]
+	str	r6, [r4, #2052]
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #8
+	mov	r5, r5, lsr #16
+	str	r3, [r4, #2052]
+	mov	r3, #48
+	str	r5, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	nandc_wait_flash_ready
+	add	r3, r9, #16384
+.L535:
+	ldr	r2, [r4, #2048]
+	strb	r2, [r9], #1
+	cmp	r9, r3
+	bne	.L535
+	add	r7, r7, r10
+	mov	r3, #239
+	mov	r0, #50
+	str	r3, [r7, #2056]
+	mov	r3, #144
+	str	r3, [r4, #2052]
+	bl	timer_delay_ns
+	mov	r3, #0
+	mov	r0, r8
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	str	r3, [r4, #2048]
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	nandc_de_cs
+.L539:
+	.align	2
+.L538:
+	.word	.LANCHOR0
+	.word	.LC41
+	.fnend
+	.size	flash_read_otp_data, .-flash_read_otp_data
+	.align	2
+	.global	sandisk_prog_test_bad_block
+	.type	sandisk_prog_test_bad_block, %function
+sandisk_prog_test_bad_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L551
+	mov	r0, r0, asl #8
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r1
+	ldr	r4, [r3, #528]
+	ldr	r3, .L551+4
+	ldrb	r2, [r3, #33]	@ zero_extendqisi2
+	mov	r6, r3
+	cmp	r2, #0
+	addne	r3, r4, r0
+	addeq	r2, r4, r0
+	add	r4, r4, r0
+	moveq	r3, #162
+	strne	r2, [r3, #2056]
+	streq	r3, [r2, #2056]
+	mov	r2, #0
+	mov	r3, #128
+	str	r3, [r4, #2056]
+	str	r2, [r4, #2052]
+	uxtb	r3, r1
+	str	r2, [r4, #2052]
+	str	r3, [r4, #2052]
+	mov	r3, r1, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r1, lsr #16
+	str	r3, [r4, #2052]
+	mov	r3, #16
+	str	r3, [r4, #2056]
+	bl	nandc_wait_flash_ready
+	mov	r3, #112
+	mov	r0, #80
+	str	r3, [r4, #2056]
+	bl	timer_delay_ns
+	ldr	r2, [r4, #2048]
+	ands	r4, r2, #5
+	beq	.L543
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L543
+	ldr	r0, .L551+8
+	mov	r1, r5
+	bl	printk
+.L543:
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L552:
+	.align	2
+.L551:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC42
+	.fnend
+	.size	sandisk_prog_test_bad_block, .-sandisk_prog_test_bad_block
+	.align	2
+	.global	nandc_rdy_status
+	.type	nandc_rdy_status, %function
+nandc_rdy_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L555
+	.pad #8
+	sub	sp, sp, #8
+	ldr	r3, [r3, #528]
+	ldr	r3, [r3]
+	str	r3, [sp, #4]
+	ldr	r0, [sp, #4]
+	ubfx	r0, r0, #9, #1
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+.L556:
+	.align	2
+.L555:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_rdy_status, .-nandc_rdy_status
+	.align	2
+	.global	nandc_bch_sel
+	.type	nandc_bch_sel, %function
+nandc_bch_sel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+	mov	r3, #0
+	str	r3, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #1
+	str	r2, [sp, #4]
+	ldr	r2, .L570
+	ldrb	r1, [r2, #516]	@ zero_extendqisi2
+	strb	r0, [r2, #660]
+	cmp	r1, #9
+	bne	.L558
+	ldr	r1, [r2, #528]
+	cmp	r0, #70
+	ldr	r2, [sp, #4]
+	str	r2, [r1, #16]
+	beq	.L559
+	cmp	r0, #60
+	moveq	r3, #3
+	beq	.L559
+	cmp	r0, #40
+	moveq	r3, #2
+	movne	r3, #1
+.L559:
+	mov	r2, #0
+	str	r2, [sp]
+	ldr	r2, [sp]
+	bic	r2, r2, #234881024
+	orr	r3, r2, r3, asl #25
+	str	r3, [sp]
+	ldr	r3, [sp]
+	orr	r3, r3, #1
+	str	r3, [sp]
+	ldr	r3, [sp]
+	str	r3, [r1, #32]
+	b	.L557
+.L558:
+	ldr	r1, [sp, #4]
+	cmp	r0, #16
+	ldr	r2, [r2, #528]
+	str	r1, [r2, #8]
+	str	r3, [sp]
+	ldr	r3, [sp]
+	bic	r3, r3, #65280
+	orr	r3, r3, #4096
+	str	r3, [sp]
+	ldr	r3, [sp]
+	bic	r3, r3, #262144
+	str	r3, [sp]
+	beq	.L568
+	ldr	r3, [sp]
+	cmp	r0, #24
+	orreq	r3, r3, #16
+	beq	.L569
+	orr	r3, r3, #262144
+	str	r3, [sp]
+	ldr	r3, [sp]
+	cmp	r0, #40
+	orr	r3, r3, #16
+	str	r3, [sp]
+	bne	.L562
+.L568:
+	ldr	r3, [sp]
+	bic	r3, r3, #16
+.L569:
+	str	r3, [sp]
+.L562:
+	ldr	r3, [sp]
+	orr	r3, r3, #1
+	str	r3, [sp]
+	ldr	r3, [sp]
+	str	r3, [r2, #12]
+.L557:
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+.L571:
+	.align	2
+.L570:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_bch_sel, .-nandc_bch_sel
+	.align	2
+	.global	zftl_flash_resume
+	.type	zftl_flash_resume, %function
+zftl_flash_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	ldr	r4, .L583
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	ldr	r2, [r4, #532]
+	cmp	r3, #9
+	ldr	r3, [r4, #528]
+	str	r2, [r3]
+	ldr	r2, [r4, #536]
+	ldr	r3, [r4, #528]
+	str	r2, [r3, #4]
+	ldr	r2, [r4, #540]
+	bne	.L573
+	str	r2, [r3, #16]
+	ldr	r2, [r4, #544]
+	str	r2, [r3, #32]
+	ldr	r2, [r4, #548]
+	str	r2, [r3, #80]
+	ldr	r2, [r4, #552]
+	str	r2, [r3, #84]
+	ldr	r2, [r4, #556]
+	str	r2, [r3, #520]
+	ldr	r2, [r4, #560]
+	str	r2, [r3, #8]
+	b	.L574
+.L573:
+	str	r2, [r3, #8]
+	ldr	r2, [r4, #544]
+	str	r2, [r3, #12]
+	ldr	r2, [r4, #548]
+	str	r2, [r3, #304]
+	ldr	r2, [r4, #552]
+	str	r2, [r3, #308]
+	ldr	r2, [r4, #556]
+	str	r2, [r3, #336]
+	ldr	r2, [r4, #560]
+	str	r2, [r3, #344]
+.L574:
+	ldr	r6, .L583+4
+	mov	r5, #0
+	mov	r8, #2
+	sub	r7, r6, #8
+.L576:
+	ldrb	r3, [r6, r5, asl #3]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L575
+	uxtb	r9, r5
+	mov	r0, r9
+	bl	flash_reset
+	strb	r8, [r5, r7]
+	mov	r0, r9
+	bl	zftl_flash_enter_slc_mode
+.L575:
+	add	r5, r5, #1
+	cmp	r5, #4
+	bne	.L576
+	ldrb	r3, [r4, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L577
+	mov	r0, #1
+	bl	nandc_set_if_mode
+	mov	r0, r5
+	bl	flash_set_interface_mode
+	mov	r0, r5
+	bl	nandc_set_if_mode
+	ldr	r3, .L583
+	ldrb	r0, [r3, #549]	@ zero_extendqisi2
+	bl	nandc_set_ddr_para
+.L577:
+	ldr	r3, .L583+8
+	ldrb	r0, [r3, #24]	@ zero_extendqisi2
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	b	nandc_bch_sel
+.L584:
+	.align	2
+.L583:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+688
+	.word	.LANCHOR2
+	.fnend
+	.size	zftl_flash_resume, .-zftl_flash_resume
+	.align	2
+	.global	rk_nandc_flash_ready
+	.type	rk_nandc_flash_ready, %function
+rk_nandc_flash_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L588
+	ldrb	r3, [r3, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	ldreq	r3, [r0, #292]
+	ldrne	r3, [r0, #368]
+	orreq	r3, r3, #2
+	orrne	r3, r3, #2
+	streq	r3, [r0, #292]
+	strne	r3, [r0, #368]
+	ldreq	r3, [r0, #288]
+	ldrne	r3, [r0, #364]
+	biceq	r3, r3, #2
+	bicne	r3, r3, #2
+	streq	r3, [r0, #288]
+	strne	r3, [r0, #364]
+	bx	lr
+.L589:
+	.align	2
+.L588:
+	.word	.LANCHOR0
+	.fnend
+	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
+	.align	2
+	.global	nandc_iqr_wait_flash_ready
+	.type	nandc_iqr_wait_flash_ready, %function
+nandc_iqr_wait_flash_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L597
+	ldr	r0, [r4, #528]
+	bl	rk_nandc_rb_irq_flag_init
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	ldr	r0, [r4, #528]
+	cmp	r3, #9
+	ldreq	r3, [r0, #292]
+	ldrne	r3, [r0, #368]
+	orreq	r3, r3, #2
+	orrne	r3, r3, #2
+	streq	r3, [r0, #292]
+	strne	r3, [r0, #368]
+	ldreq	r3, [r0, #288]
+	ldrne	r3, [r0, #364]
+	orreq	r3, r3, #2
+	orrne	r3, r3, #2
+	streq	r3, [r0, #288]
+	strne	r3, [r0, #364]
+	ldr	r3, [r0]
+	tst	r3, #512
+	bne	.L593
+	ldmfd	sp!, {r4, lr}
+	b	wait_for_nand_flash_ready
+.L593:
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	ldreq	r3, [r0, #292]
+	ldrne	r3, [r0, #368]
+	orreq	r3, r3, #2
+	orrne	r3, r3, #2
+	streq	r3, [r0, #292]
+	strne	r3, [r0, #368]
+	ldreq	r3, [r0, #288]
+	ldrne	r3, [r0, #364]
+	biceq	r3, r3, #2
+	bicne	r3, r3, #2
+	streq	r3, [r0, #288]
+	strne	r3, [r0, #364]
+	ldmfd	sp!, {r4, pc}
+.L598:
+	.align	2
+.L597:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_iqr_wait_flash_ready, .-nandc_iqr_wait_flash_ready
+	.align	2
+	.global	flash_erase_duplane_block
+	.type	flash_erase_duplane_block, %function
+flash_erase_duplane_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r3
+	ldr	r4, .L616
+	mov	r5, r0
+	mov	fp, r1
+	mov	r9, r2
+	ldrb	r3, [r4, #589]	@ zero_extendqisi2
+	cmp	r3, r0
+	bhi	.L600
+	ldr	r1, .L616+4
+	movw	r2, #598
+	ldr	r0, .L616+8
+	bl	printk
+	bl	dump_stack
+.L600:
+	ldrb	r2, [r4, #589]	@ zero_extendqisi2
+	ldr	r3, .L616
+	cmp	r2, r5
+	bls	.L607
+	add	r5, r3, r5
+	ldr	r7, [r3, #528]
+	ldr	r3, .L616+12
+	ldrb	r6, [r5, #668]	@ zero_extendqisi2
+	ldr	r3, [r3]
+	add	r10, r6, #8
+	tst	r3, #16
+	add	r10, r7, r10, asl #8
+	beq	.L602
+	ldr	r0, .L616+16
+	mov	r1, r6
+	mov	r2, r9
+	mov	r3, r8
+	bl	printk
+.L602:
+	bl	nandc_wait_flash_ready
+	mov	r0, r6
+	bl	nandc_cs
+	cmp	fp, #0
+	mov	r0, r6
+	bne	.L603
+	bl	zftl_flash_enter_slc_mode
+	b	.L604
+.L603:
+	bl	zftl_flash_exit_slc_mode
+.L604:
+	mov	fp, r6, asl #8
+	mov	r3, #96
+	add	r5, r7, fp
+	str	r3, [r5, #2056]
+	uxtb	r3, r9
+	str	r3, [r5, #2052]
+	mov	r3, r9, lsr #8
+	str	r3, [r5, #2052]
+	mov	r3, r9, lsr #16
+	str	r3, [r5, #2052]
+	ldrb	r3, [r4, #721]	@ zero_extendqisi2
+	cmp	r3, #0
+	movne	r4, #0
+	bne	.L605
+	mov	r3, #208
+	str	r3, [r5, #2056]
+	bl	nandc_wait_flash_ready
+	mov	r0, r10
+	bl	flash_read_status
+	and	r4, r0, #5
+.L605:
+	add	r7, r7, fp
+	mov	r3, #96
+	str	r3, [r7, #2056]
+	uxtb	r3, r8
+	str	r3, [r5, #2052]
+	mov	r3, r8, lsr #8
+	mov	r8, r8, lsr #16
+	str	r3, [r5, #2052]
+	mov	r3, #208
+	str	r8, [r5, #2052]
+	str	r3, [r7, #2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	r0, r10
+	bl	flash_read_status
+	mov	r5, r0
+	mov	r0, r6
+	bl	nandc_de_cs
+	and	r3, r5, #5
+	orrs	r4, r3, r4
+	beq	.L606
+	ldr	r0, .L616+20
+	mov	r1, r9
+	mov	r2, r5
+	bl	printk
+.L606:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L607:
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L617:
+	.align	2
+.L616:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+720
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC43
+	.word	.LC44
+	.fnend
+	.size	flash_erase_duplane_block, .-flash_erase_duplane_block
+	.align	2
+	.global	flash_erase_block_en
+	.type	flash_erase_block_en, %function
+flash_erase_block_en:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mvn	r9, #0
+	ldr	r6, .L633
+	mov	r7, r0
+	mov	fp, r1
+	mov	r8, r2
+	ldrb	r3, [r6, #676]	@ zero_extendqisi2
+	rsb	r3, r3, #24
+	bic	r9, r2, r9, asl r3
+	ldrb	r3, [r6, #589]	@ zero_extendqisi2
+	cmp	r3, r0
+	bhi	.L619
+	ldr	r1, .L633+4
+	movw	r2, #645
+	ldr	r0, .L633+8
+	bl	printk
+	bl	dump_stack
+.L619:
+	ldrb	r2, [r6, #589]	@ zero_extendqisi2
+	ldr	r3, .L633
+	cmp	r2, r7
+	bls	.L625
+	add	r2, r3, r7
+	ldr	r4, [r3, #528]
+	ldr	r3, .L633+12
+	ldrb	r5, [r2, #668]	@ zero_extendqisi2
+	ldr	r3, [r3]
+	add	r10, r5, #8
+	tst	r3, #16
+	add	r10, r4, r10, asl #8
+	beq	.L621
+	ldr	r0, .L633+16
+	mov	r1, r5
+	mov	r2, r8
+	mov	r3, fp
+	bl	printk
+.L621:
+	bl	nandc_wait_flash_ready
+	mov	r0, r5
+	bl	nandc_cs
+	cmp	fp, #0
+	mov	r0, r5
+	bne	.L622
+	bl	zftl_flash_enter_slc_mode
+	b	.L623
+.L622:
+	bl	zftl_flash_exit_slc_mode
+.L623:
+	add	r4, r4, r5, asl #8
+	mov	r3, #96
+	str	r3, [r4, #2056]
+	uxtb	r3, r9
+	str	r3, [r4, #2052]
+	mov	r3, r9, lsr #8
+	mov	r9, r9, lsr #16
+	str	r3, [r4, #2052]
+	mov	r3, #208
+	str	r9, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	r0, r10
+	bl	flash_read_status
+	mov	r4, r0
+	mov	r0, r5
+	bl	nandc_de_cs
+	ands	r4, r4, #5
+	beq	.L624
+	ldrh	r1, [r6, #2]
+	mov	r0, r8
+	bl	__aeabi_uidiv
+	mov	r1, r7
+	mov	r3, r4
+	mov	r2, r0
+	ldr	r0, .L633+20
+	bl	printk
+.L624:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L625:
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L634:
+	.align	2
+.L633:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+748
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC45
+	.word	.LC46
+	.fnend
+	.size	flash_erase_block_en, .-flash_erase_block_en
+	.align	2
+	.global	flash_erase_block
+	.type	flash_erase_block, %function
+flash_erase_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r2, r1
+	mov	r1, #0
+	b	flash_erase_block_en
+	.fnend
+	.size	flash_erase_block, .-flash_erase_block
+	.align	2
+	.global	flash_erase_all
+	.type	flash_erase_all, %function
+flash_erase_all:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r6, #0
+	ldr	r3, .L644
+	ldr	r7, .L644+4
+	ldrb	r4, [r3, #17]	@ zero_extendqisi2
+	ldrh	r3, [r3, #18]
+	mov	r8, r7
+	smulbb	r4, r4, r3
+	uxth	r4, r4
+.L637:
+	ldrb	r2, [r7, #589]	@ zero_extendqisi2
+	uxth	r3, r6
+	cmp	r2, r3
+	bls	.L642
+	add	r3, r7, r3
+	mov	r5, #0
+	ldrb	r9, [r3, #668]	@ zero_extendqisi2
+.L638:
+	uxth	r3, r5
+	cmp	r3, r4
+	bcs	.L643
+	ldrh	r1, [r8, #2]
+	mov	r0, r9
+	mul	r1, r1, r5
+	bl	flash_erase_block
+	add	r5, r5, #1
+	b	.L638
+.L643:
+	add	r6, r6, #1
+	b	.L637
+.L642:
+	ldr	r0, .L644+8
+	mov	r1, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	b	printk
+.L645:
+	.align	2
+.L644:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC47
+	.fnend
+	.size	flash_erase_all, .-flash_erase_all
+	.align	2
+	.global	rk_nandc_flash_xfer_completed
+	.type	rk_nandc_flash_xfer_completed, %function
+rk_nandc_flash_xfer_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L649
+	ldrb	r3, [r3, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	ldreq	r3, [r0, #292]
+	ldrne	r3, [r0, #368]
+	orreq	r3, r3, #1
+	orrne	r3, r3, #1
+	streq	r3, [r0, #292]
+	strne	r3, [r0, #368]
+	ldreq	r3, [r0, #288]
+	ldrne	r3, [r0, #364]
+	biceq	r3, r3, #1
+	bicne	r3, r3, #1
+	streq	r3, [r0, #288]
+	strne	r3, [r0, #364]
+	bx	lr
+.L650:
+	.align	2
+.L649:
+	.word	.LANCHOR0
+	.fnend
+	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
+	.align	2
+	.global	nandc_xfer_start
+	.type	nandc_xfer_start, %function
+nandc_xfer_start:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, r0
+	ldr	r4, .L669
+	.pad #20
+	sub	sp, sp, #20
+	mov	r8, r1
+	mov	r6, r3
+	mov	r7, r2
+	ldr	r0, [r4, #528]
+	bl	rk_nandc_xfer_irq_flag_init
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	ldr	r0, [r4, #528]
+	and	r1, r5, #1
+	cmp	r3, #9
+	add	r3, r8, #1
+	bne	.L652
+	ldr	r2, [r0, #292]
+	ubfx	r3, r3, #1, #6
+	orr	r2, r2, #1
+	str	r2, [r0, #292]
+	ldr	r2, [r0, #288]
+	orr	r2, r2, #1
+	str	r2, [r0, #288]
+	mov	r2, #0
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #2
+	orr	r2, r2, r1, asl #1
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #8
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #96
+	orr	r2, r2, #32
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #536870912
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #1024
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #16
+	str	r2, [sp, #4]
+	ldr	r0, [sp, #4]
+	bic	r0, r0, #264241152
+	orr	r3, r0, r3, asl #22
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	orr	r3, r3, #128
+	str	r3, [sp, #4]
+	ldrb	r3, [r4, #624]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L654
+	ldrb	r3, [r4, #656]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrne	r3, [sp, #4]
+	orrne	r3, r3, #512
+	strne	r3, [sp, #4]
+	b	.L654
+.L652:
+	ldr	r2, [r0, #368]
+	ubfx	r3, r3, #1, #6
+	orr	r2, r2, #1
+	str	r2, [r0, #368]
+	ldr	r2, [r0, #364]
+	orr	r2, r2, #1
+	str	r2, [r0, #364]
+	ldr	r2, [r0, #12]
+	mov	r0, #0
+	cmp	r5, r0
+	str	r2, [sp, #12]
+	ldr	r2, [sp, #12]
+	bic	r2, r2, #65280
+	orr	r2, r2, #4096
+	str	r2, [sp, #12]
+	ldr	r2, [sp, #12]
+	bic	r2, r2, #8
+	str	r2, [sp, #12]
+	ldr	r2, [sp, #12]
+	bic	r2, r2, #224
+	str	r2, [sp, #12]
+	str	r0, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #2
+	orr	r2, r2, r1, asl #1
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #8
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #96
+	orr	r2, r2, #32
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #536870912
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #1024
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #16
+	str	r2, [sp, #4]
+	ldr	ip, [sp, #4]
+	bic	ip, ip, #264241152
+	orr	r3, ip, r3, asl #22
+	str	r3, [sp, #4]
+	beq	.L668
+	ldrb	r3, [r4, #660]	@ zero_extendqisi2
+	mov	r8, r8, lsr #1
+	cmp	r3, #25
+	mov	r3, r0
+	movcc	r1, #64
+	movcs	r1, #128
+	b	.L659
+.L654:
+	ldr	r1, [sp, #4]
+	mov	r2, r5
+	mov	r0, r7
+	str	r7, [r4, #632]
+	ubfx	r1, r1, #22, #6
+	str	r6, [r4, #636]
+	mov	r1, r1, asl #10
+	bl	rknand_dma_map_single
+	mov	r2, r5
+	clz	r5, r5
+	mov	r5, r5, lsr #5
+	ldr	r1, [sp, #4]
+	str	r0, [r4, #640]
+	ubfx	r1, r1, #22, #6
+	ldr	r0, [r4, #636]
+	mov	r1, r1, asl #2
+	bl	rknand_dma_map_single
+	ldr	r2, [r4, #528]
+	mov	r3, #1
+	str	r3, [r4, #648]
+	ldr	r3, [r4, #640]
+	str	r3, [r2, #52]
+	str	r0, [r2, #56]
+	ldr	r3, [r2, #48]
+	str	r0, [r4, #644]
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	bic	r3, r3, #15872
+	orr	r3, r3, #8192
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	orr	r3, r3, #448
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	bic	r3, r3, #56
+	orr	r3, r3, #16
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	orr	r3, r3, #4
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	bic	r3, r3, #2
+	orr	r5, r3, r5, asl #1
+	str	r5, [sp, #8]
+	ldr	r3, [sp, #8]
+	orr	r3, r3, #1
+	str	r3, [sp, #8]
+	movw	r3, #658
+	ldrh	r1, [r4, r3]
+	ldr	r3, [sp, #8]
+	ubfx	r1, r1, #0, #11
+	bic	r3, r3, #133169152
+	bic	r3, r3, #983040
+	orr	r3, r3, r1, asl #16
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #8]
+	str	r3, [r2, #48]
+	ldr	r3, [sp, #4]
+	str	r3, [r2, #16]
+	ldr	r3, [sp, #4]
+	orr	r3, r3, #4
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	str	r3, [r2, #16]
+	b	.L651
+.L659:
+	cmp	r3, r8
+	add	r6, r6, #4
+	add	lr, r0, r1
+	bge	.L661
+	ldrh	ip, [r6, #-2]
+	mov	r0, r0, lsr #2
+	ldr	r9, [r4, #628]
+	add	r3, r3, #1
+	ldrh	r2, [r6, #-4]
+	orr	ip, r2, ip, asl #16
+	str	ip, [r9, r0, asl #2]
+	mov	r0, lr
+	b	.L659
+.L668:
+	ldr	r3, [r4, #628]
+	mov	r2, #1
+	str	r2, [r3]
+.L661:
+	ldr	r1, [sp, #4]
+	mov	r2, r5
+	ldr	r3, [r4, #628]
+	mov	r0, r7
+	ubfx	r1, r1, #22, #6
+	str	r7, [r4, #632]
+	mov	r1, r1, asl #10
+	str	r3, [r4, #636]
+	bl	rknand_dma_map_single
+	mov	r2, r5
+	clz	r5, r5
+	mov	r5, r5, lsr #5
+	ldr	r1, [sp, #4]
+	str	r0, [r4, #640]
+	ubfx	r1, r1, #22, #6
+	ldr	r0, [r4, #636]
+	mov	r1, r1, asl #7
+	bl	rknand_dma_map_single
+	ldr	r2, [r4, #640]
+	mov	r3, #1
+	str	r3, [r4, #648]
+	ldr	r3, [r4, #528]
+	str	r2, [r3, #20]
+	mov	r2, #0
+	str	r0, [r3, #24]
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	str	r0, [r4, #644]
+	bic	r2, r2, #15872
+	orr	r2, r2, #8192
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	orr	r2, r2, #448
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	bic	r2, r2, #56
+	orr	r2, r2, #16
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	orr	r2, r2, #4
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	bic	r2, r2, #2
+	orr	r5, r2, r5, asl #1
+	str	r5, [sp, #8]
+	ldr	r2, [sp, #8]
+	orr	r2, r2, #1
+	str	r2, [sp, #8]
+	ldr	r2, [sp, #8]
+	str	r2, [r3, #16]
+	ldr	r2, [sp, #12]
+	str	r2, [r3, #12]
+	ldr	r2, [sp, #4]
+	str	r2, [r3, #8]
+	ldr	r2, [sp, #4]
+	orr	r2, r2, #4
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	str	r2, [r3, #8]
+.L651:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L670:
+	.align	2
+.L669:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_xfer_start, .-nandc_xfer_start
+	.align	2
+	.global	nandc_set_seed
+	.type	nandc_set_seed, %function
+nandc_set_seed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L678
+	and	r0, r0, #127
+	ldr	r3, .L678+4
+	mov	r0, r0, asl #1
+	ldrb	r1, [r2, #656]	@ zero_extendqisi2
+	ldrh	r3, [r3, r0]
+	cmp	r1, #0
+	ldr	r1, .L678
+	ldrb	r2, [r2, #516]	@ zero_extendqisi2
+	orrne	r3, r3, #-1073741824
+	cmp	r2, #9
+	ldr	r2, [r1, #528]
+	streq	r3, [r2, #520]
+	strne	r3, [r2, #336]
+	bx	lr
+.L679:
+	.align	2
+.L678:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+772
+	.fnend
+	.size	nandc_set_seed, .-nandc_set_seed
+	.align	2
+	.global	zftl_flash_de_init
+	.type	zftl_flash_de_init, %function
+zftl_flash_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	bl	nandc_wait_flash_ready
+	ldr	r4, .L700
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L681
+	ldrb	r0, [r4, #590]	@ zero_extendqisi2
+	cmp	r0, #0
+	bne	.L681
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	beq	.L681
+	bl	zftl_flash_exit_slc_mode
+.L681:
+	mov	r0, #0
+	ldr	r5, .L700
+	bl	hynix_reconfig_rr_para
+	ldrb	r3, [r4, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L682
+	ldrb	r3, [r5, #720]	@ zero_extendqisi2
+	tst	r3, #1
+	beq	.L682
+	mov	r0, #1
+	bl	flash_set_interface_mode
+	mov	r0, #1
+	bl	nandc_set_if_mode
+	mov	r3, #0
+	strb	r3, [r5, #623]
+.L682:
+	ldrb	r3, [r4, #656]	@ zero_extendqisi2
+	ldr	r5, .L700
+	cmp	r3, #0
+	beq	.L683
+	mov	r0, #0
+	strb	r0, [r5, #656]
+	bl	nandc_set_seed
+	mov	r3, #1
+	strb	r3, [r5, #656]
+.L683:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L701:
+	.align	2
+.L700:
+	.word	.LANCHOR0
+	.fnend
+	.size	zftl_flash_de_init, .-zftl_flash_de_init
+	.align	2
+	.global	nandc_randomizer_enable
+	.type	nandc_randomizer_enable, %function
+nandc_randomizer_enable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L703
+	strb	r0, [r3, #656]
+	bx	lr
+.L704:
+	.align	2
+.L703:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_randomizer_enable, .-nandc_randomizer_enable
+	.align	2
+	.global	nandc_get_chip_if
+	.type	nandc_get_chip_if, %function
+nandc_get_chip_if:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L706
+	add	r0, r0, #8
+	ldr	r3, [r3, #528]
+	add	r0, r3, r0, asl #8
+	bx	lr
+.L707:
+	.align	2
+.L706:
+	.word	.LANCHOR0
+	.fnend
+	.size	nandc_get_chip_if, .-nandc_get_chip_if
+	.align	2
+	.global	zbuf_init
+	.type	zbuf_init, %function
+zbuf_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, #0
+	ldr	r4, .L712
+	mov	r7, r5
+	sub	r8, r4, #724
+.L709:
+	ldrb	r0, [r8, #2260]	@ zero_extendqisi2
+	uxtb	r3, r5
+	add	r2, r3, #1
+	strb	r3, [r4, #1]
+	strb	r2, [r4]
+	add	r5, r5, #1
+	mov	r0, r0, asl #9
+	strb	r7, [r4, #2]
+	str	r7, [r4, #8]
+	bl	ftl_malloc
+	ldr	r6, .L712+4
+	add	r4, r4, #48
+	str	r0, [r4, #-44]
+	mov	r0, #64
+	bl	ftl_malloc
+	cmp	r5, #32
+	str	r0, [r4, #-36]
+	bne	.L709
+	mvn	r3, #0
+	strb	r5, [r6, #2262]
+	strb	r3, [r6, #2212]
+	mov	r3, #0
+	strb	r3, [r6, #2261]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L713:
+	.align	2
+.L712:
+	.word	.LANCHOR0+724
+	.word	.LANCHOR0
+	.fnend
+	.size	zbuf_init, .-zbuf_init
+	.align	2
+	.global	buf_reinit
+	.type	buf_reinit, %function
+buf_reinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L717
+	mov	r3, #0
+	mov	r1, r3
+.L715:
+	uxtb	r0, r3
+	add	r3, r3, #1
+	cmp	r3, #32
+	add	ip, r0, #1
+	strb	r0, [r2, #1]
+	add	r2, r2, #48
+	strb	ip, [r2, #-48]
+	strb	r1, [r2, #-46]
+	str	r1, [r2, #-40]
+	bne	.L715
+	ldr	r2, .L717+4
+	mvn	r1, #0
+	strb	r3, [r2, #2262]
+	strb	r1, [r2, #2212]
+	mov	r1, #0
+	strb	r1, [r2, #2261]
+	bx	lr
+.L718:
+	.align	2
+.L717:
+	.word	.LANCHOR0+724
+	.word	.LANCHOR0
+	.fnend
+	.size	buf_reinit, .-buf_reinit
+	.align	2
+	.global	buf_add_tail
+	.type	buf_add_tail, %function
+buf_add_tail:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mvn	r3, #0
+	strb	r3, [r1]
+	mov	r4, r1
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	mov	r5, r0
+	cmp	r3, #255
+	ldrne	r2, .L727
+	movne	r1, #48
+	bne	.L725
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L721
+	ldr	r1, .L727+4
+	mov	r2, #74
+	ldr	r0, .L727+8
+	bl	printk
+	bl	dump_stack
+.L721:
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	strb	r3, [r5]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L725:
+	mov	r5, r3
+	mla	r3, r1, r3, r2
+	ldrb	r3, [r3, #724]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L725
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L723
+	ldr	r1, .L727+4
+	mov	r2, #81
+	ldr	r0, .L727+8
+	bl	printk
+	bl	dump_stack
+.L723:
+	ldr	r2, .L727
+	mov	r1, #48
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	mla	r5, r1, r5, r2
+	strb	r3, [r5, #724]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L728:
+	.align	2
+.L727:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1028
+	.word	.LC0
+	.fnend
+	.size	buf_add_tail, .-buf_add_tail
+	.align	2
+	.type	queue_read_cmd, %function
+queue_read_cmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	ldr	r1, [r4, #24]
+	mov	r0, #48
+	bl	flash_start_page_read
+	mov	r3, #1
+	mov	r1, r4
+	strb	r3, [r4, #42]
+	ldr	r0, .L731
+	mov	r3, #0
+	strb	r3, [r4, #43]
+	mvn	r3, #0
+	strb	r3, [r4]
+	ldmfd	sp!, {r4, lr}
+	b	buf_add_tail
+.L732:
+	.align	2
+.L731:
+	.word	.LANCHOR0+2263
+	.fnend
+	.size	queue_read_cmd, .-queue_read_cmd
+	.align	2
+	.global	zbuf_free
+	.type	zbuf_free, %function
+zbuf_free:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldrb	r3, [r0, #2]	@ zero_extendqisi2
+	ldr	r4, .L743
+	and	r3, r3, #8
+	uxtb	r3, r3
+	strb	r3, [r0, #2]
+	cmp	r3, #0
+	beq	.L734
+	ldr	r3, [r0, #20]
+	cmn	r3, #1
+	beq	.L734
+	mov	r1, r0
+	ldr	r0, .L743+4
+	bl	buf_add_tail
+	b	.L735
+.L734:
+	ldrb	r3, [r4, #2261]	@ zero_extendqisi2
+	strb	r3, [r0]
+	ldrb	r3, [r0, #1]	@ zero_extendqisi2
+	strb	r3, [r4, #2261]
+.L735:
+	ldrb	r3, [r4, #2262]	@ zero_extendqisi2
+	add	r3, r3, #1
+	strb	r3, [r4, #2262]
+	ldmfd	sp!, {r4, pc}
+.L744:
+	.align	2
+.L743:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2261
+	.fnend
+	.size	zbuf_free, .-zbuf_free
+	.align	2
+	.global	buf_alloc
+	.type	buf_alloc, %function
+buf_alloc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	ldr	r4, .L756
+	ldrb	r3, [r4, #2262]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L746
+.L749:
+	ldr	r2, .L756
+	cmp	r5, #0
+	ldrb	r1, [r4, #2261]	@ zero_extendqisi2
+	mov	r0, #48
+	add	r3, r2, #724
+	mla	r0, r0, r1, r3
+	beq	.L747
+	b	.L748
+.L746:
+	ldr	r1, .L756+4
+	mov	r2, #121
+	ldr	r0, .L756+8
+	bl	printk
+	bl	dump_stack
+	ldrb	r3, [r4, #2262]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L749
+.L751:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L747:
+	ldrb	r2, [r2, #2262]	@ zero_extendqisi2
+	cmp	r2, #1
+	beq	.L751
+.L748:
+	mov	r2, #48
+	mul	r1, r2, r1
+	add	r2, r4, r1
+	add	r3, r3, r1
+	mov	r1, #0
+	ldrb	ip, [r2, #724]	@ zero_extendqisi2
+	strh	r1, [r3, #34]	@ movhi
+	str	r1, [r2, #732]
+	strb	ip, [r4, #2261]
+	ldrb	ip, [r4, #2262]	@ zero_extendqisi2
+	strb	r1, [r2, #764]
+	sub	ip, ip, #1
+	strb	r1, [r2, #765]
+	strb	ip, [r4, #2262]
+	mov	ip, #1
+	strb	ip, [r2, #726]
+	mvn	ip, #0
+	strb	ip, [r2, #724]
+	str	ip, [r2, #744]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L757:
+	.align	2
+.L756:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1044
+	.word	.LC0
+	.fnend
+	.size	buf_alloc, .-buf_alloc
+	.align	2
+	.global	buf_remove_buf
+	.type	buf_remove_buf, %function
+buf_remove_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldrb	ip, [r1, #1]	@ zero_extendqisi2
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	cmp	ip, r3
+	bne	.L759
+	ldrb	r3, [r1]	@ zero_extendqisi2
+	strb	r3, [r0]
+	mov	r0, #1
+	bx	lr
+.L759:
+	ldr	r0, .L766
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	lr, #48
+.L761:
+	cmp	r3, #255
+	beq	.L765
+	mov	r2, r3
+	mla	r3, lr, r3, r0
+	ldrb	r3, [r3, #724]	@ zero_extendqisi2
+	cmp	r3, ip
+	bne	.L761
+	ldr	r0, .L766
+	mov	ip, #48
+	ldrb	r3, [r1]	@ zero_extendqisi2
+	mla	r2, ip, r2, r0
+	mov	r0, #1
+	strb	r3, [r2, #724]
+	mvn	r3, #0
+	strb	r3, [r1]
+	ldr	pc, [sp], #4
+.L765:
+	mov	r0, #0
+	ldr	pc, [sp], #4
+.L767:
+	.align	2
+.L766:
+	.word	.LANCHOR0
+	.fnend
+	.size	buf_remove_buf, .-buf_remove_buf
+	.align	2
+	.global	buf_remove_free
+	.type	buf_remove_free, %function
+buf_remove_free:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L774
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldrb	r2, [r3, #2262]	@ zero_extendqisi2
+	mov	r4, r3
+	cmp	r2, #0
+	bne	.L769
+	ldr	r1, .L774+4
+	mov	r2, #172
+	ldr	r0, .L774+8
+	bl	printk
+	bl	dump_stack
+.L769:
+	ldrb	r3, [r4, #2262]	@ zero_extendqisi2
+	ldr	r6, .L774
+	cmp	r3, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	ldr	r0, .L774+12
+	mov	r1, r5
+	bl	buf_remove_buf
+	cmp	r0, #1
+	ldreqb	r3, [r6, #2262]	@ zero_extendqisi2
+	subeq	r3, r3, #1
+	streqb	r3, [r6, #2262]
+	ldreqb	r3, [r5, #2]	@ zero_extendqisi2
+	orreq	r3, r3, #1
+	streqb	r3, [r5, #2]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L775:
+	.align	2
+.L774:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1056
+	.word	.LC0
+	.word	.LANCHOR0+2261
+	.fnend
+	.size	buf_remove_free, .-buf_remove_free
+	.align	2
+	.global	flash_check_bad_block
+	.type	flash_check_bad_block, %function
+flash_check_bad_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L777
+	ldrb	r2, [r3, #17]	@ zero_extendqisi2
+	ldrh	r3, [r3, #18]
+	smulbb	r3, r2, r3
+	ldr	r2, .L777+4
+	ldr	r2, [r2, #664]
+	uxth	r3, r3
+	add	r3, r3, #31
+	mov	r3, r3, asr #5
+	mov	r3, r3, asl #2
+	uxth	r3, r3
+	mul	r0, r3, r0
+	add	r3, r0, #912
+	mov	r0, r1, lsr #5
+	and	r1, r1, #31
+	add	r2, r2, r0, asl #2
+	ldr	r0, [r2, r3]
+	mov	r0, r0, lsr r1
+	and	r0, r0, #1
+	bx	lr
+.L778:
+	.align	2
+.L777:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_check_bad_block, .-flash_check_bad_block
+	.align	2
+	.global	flash_mask_bad_block
+	.type	flash_mask_bad_block, %function
+flash_mask_bad_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L781
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r1
+	ldrb	r2, [r3, #17]	@ zero_extendqisi2
+	mov	r6, r0
+	ldrh	r4, [r3, #18]
+	mov	r1, r6
+	ldr	r0, .L781+4
+	smulbb	r4, r2, r4
+	mov	r2, r5
+	bl	printk
+	ldr	r3, .L781+8
+	mov	r2, r5, lsr #5
+	mov	r1, #1
+	and	r5, r5, #31
+	ldr	r3, [r3, #664]
+	uxth	r4, r4
+	add	r4, r4, #31
+	mov	r4, r4, asr #5
+	mov	r4, r4, asl #2
+	uxth	r4, r4
+	mul	r4, r4, r6
+	add	r4, r4, #912
+	add	r4, r3, r4
+	ldr	r3, [r4, r2, asl #2]
+	orr	r5, r3, r1, asl r5
+	str	r5, [r4, r2, asl #2]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L782:
+	.align	2
+.L781:
+	.word	.LANCHOR2
+	.word	.LC48
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_mask_bad_block, .-flash_mask_bad_block
+	.align	2
+	.global	str2hex
+	.type	str2hex, %function
+str2hex:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	cmp	r3, #48
+	bne	.L784
+	ldrb	r3, [r0, #1]	@ zero_extendqisi2
+	and	r3, r3, #223
+	cmp	r3, #88
+	addeq	r0, r0, #2
+.L784:
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	and	r3, r3, #223
+	cmp	r3, #88
+	addeq	r0, r0, #1
+	sub	r3, r0, #1
+	mov	r0, #0
+.L786:
+	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L795
+	sub	r1, r2, #48
+	uxtb	ip, r1
+	cmp	ip, #9
+	addls	r0, r1, r0, asl #4
+	bls	.L786
+	sub	r1, r2, #97
+	cmp	r1, #5
+	subls	r2, r2, #87
+	bls	.L794
+	sub	r1, r2, #65
+	cmp	r1, #5
+	bxhi	lr
+	sub	r2, r2, #55
+.L794:
+	add	r0, r2, r0, asl #4
+	b	.L786
+.L795:
+	bx	lr
+	.fnend
+	.size	str2hex, .-str2hex
+	.align	2
+	.global	zftl_proc_debug_init
+	.type	zftl_proc_debug_init, %function
+zftl_proc_debug_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, lr}
+	.save {lr}
+	.pad #12
+	mov	r2, #0
+	mov	r1, #292
+	str	r2, [sp]
+	ldr	r3, .L798
+	ldr	r0, .L798+4
+	bl	proc_create_data
+	add	sp, sp, #12
+	@ sp needed
+	ldr	pc, [sp], #4
+.L799:
+	.align	2
+.L798:
+	.word	.LANCHOR1+1072
+	.word	.LC49
+	.fnend
+	.size	zftl_proc_debug_init, .-zftl_proc_debug_init
+	.align	2
+	.global	ftl_print_info_to_buf
+	.type	ftl_print_info_to_buf, %function
+ftl_print_info_to_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #16
+	mov	r6, r0
+	ldr	r1, .L802
+	ldr	r2, .L802+4
+	bl	sprintf
+	ldr	r1, .L802+8
+	ldr	r5, .L802+12
+	ldrb	r3, [r1, #6]	@ zero_extendqisi2
+	ldrb	r2, [r1, #5]	@ zero_extendqisi2
+	add	r4, r6, r0
+	ldrb	r0, [r1, #7]	@ zero_extendqisi2
+	str	r0, [sp]
+	ldrb	r0, [r1, #8]	@ zero_extendqisi2
+	str	r0, [sp, #4]
+	ldrb	r0, [r1, #9]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	mov	r0, r4
+	ldrb	r1, [r1, #10]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	ldr	r1, .L802+16
+	bl	sprintf
+	ldr	r2, [r5, #520]
+	ldr	r1, .L802+20
+	mov	r2, r2, lsr #11
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r2, [r5, #2264]
+	ldr	r1, .L802+24
+	mov	r2, r2, lsr #11
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L802+28
+	add	r4, r4, r0
+	mov	r0, r4
+	add	r4, r4, #10
+	bl	strcpy
+	ldr	r2, [r5, #2268]
+	mov	r0, r4
+	ldr	r1, .L802+32
+	bl	sprintf
+	ldr	r2, [r5, #520]
+	ldr	r1, .L802+36
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r1, .L802+40
+	ldr	r2, [r3, #524]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r1, .L802+44
+	ldr	r2, [r3, #528]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	add	r3, r5, #2272
+	ldr	r1, .L802+48
+	ldrh	r2, [r3]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r3, #2274
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+52
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r3, #2276
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+56
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r3, #2278
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+60
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r3, #2280
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+64
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r3, #2282
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+68
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldrb	r1, [r5, #2285]	@ zero_extendqisi2
+	ldrb	r2, [r5, #2262]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2284]	@ zero_extendqisi2
+	add	r4, r4, r0
+	str	r1, [sp]
+	ldr	r1, .L802+72
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+76
+	ldrh	r2, [r3, #148]
+	ldrh	r3, [r3, #146]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+80
+	ldr	r2, [r3, #16]
+	ldr	r3, [r3, #20]
+	add	r2, r3, r2, lsr #11
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+84
+	ldr	r2, [r3, #24]
+	ldr	r3, [r3, #28]
+	add	r2, r3, r2, lsr #11
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+88
+	ldr	r2, [r3, #64]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+92
+	ldr	r2, [r3, #68]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r2, .L802+96
+	ldr	r1, .L802+100
+	ldr	r3, [r3, #12]
+	umull	r2, r3, r3, r2
+	mov	r2, r3, lsr #3
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldrb	r2, [r5]	@ zero_extendqisi2
+	ldr	r1, .L802+104
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r1, .L802+108
+	ldr	r2, [r3, #556]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r1, .L802+112
+	ldr	r2, [r3, #552]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+116
+	ldr	r2, [r3, #52]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+120
+	ldr	r2, [r3, #60]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+124
+	ldr	r2, [r3, #76]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldr	r1, .L802+128
+	ldr	r2, [r3, #8]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, [r5, #580]
+	ldrh	r2, [r1, #16]
+	ldrh	r3, [r1, #22]
+	ldrb	r1, [r1, #25]	@ zero_extendqisi2
+	add	r4, r4, r0
+	str	r1, [sp]
+	ldr	r1, .L802+132
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, [r5, #580]
+	ldrh	r2, [r1, #48]
+	ldrh	r3, [r1, #54]
+	ldrb	r1, [r1, #57]	@ zero_extendqisi2
+	add	r4, r4, r0
+	str	r1, [sp]
+	ldr	r1, .L802+136
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, [r5, #580]
+	ldrh	r2, [r1, #80]
+	ldrh	r3, [r1, #86]
+	ldrb	r1, [r1, #89]	@ zero_extendqisi2
+	add	r4, r4, r0
+	str	r1, [sp]
+	ldr	r1, .L802+140
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldrh	r1, [r3, #88]
+	ldrh	r2, [r3, #74]
+	str	r1, [sp]
+	add	r4, r4, r0
+	ldrh	r1, [r3, #92]
+	mov	r0, r4
+	str	r1, [sp, #4]
+	ldrh	r1, [r3, #96]
+	str	r1, [sp, #8]
+	ldr	r1, .L802+144
+	ldr	r3, [r3, #84]
+	bl	sprintf
+	ldr	r3, [r5, #2288]
+	ldrh	r1, [r3, #90]
+	ldrh	r2, [r3, #72]
+	str	r1, [sp]
+	add	r4, r4, r0
+	ldrh	r1, [r3, #94]
+	mov	r0, r4
+	str	r1, [sp, #4]
+	ldrh	r1, [r3, #98]
+	str	r1, [sp, #8]
+	ldr	r1, .L802+148
+	ldr	r3, [r3, #80]
+	bl	sprintf
+	movw	r3, #2292
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L802+152
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	movw	r1, #2298
+	ldrh	r1, [r5, r1]
+	movw	r3, #2294
+	ldrh	r2, [r5, r3]
+	movw	r3, #2296
+	ldrh	r3, [r5, r3]
+	str	r1, [sp]
+	movw	r1, #2300
+	ldrh	r1, [r5, r1]
+	add	r4, r4, r0
+	mov	r0, r4
+	str	r1, [sp, #4]
+	ldr	r1, [r5, #2304]
+	str	r1, [sp, #8]
+	ldr	r1, .L802+156
+	bl	sprintf
+	ldr	r1, [r5, #580]
+	add	r3, r1, #584
+	ldrh	r2, [r3]
+	movw	r3, #586
+	ldrh	r3, [r1, r3]
+	add	r4, r4, r0
+	add	r0, r1, #588
+	ldrh	r0, [r0]
+	str	r0, [sp]
+	movw	r0, #590
+	ldrh	r1, [r1, r0]
+	mov	r0, r4
+	str	r1, [sp, #4]
+	ldr	r1, .L802+160
+	bl	sprintf
+	ldr	r3, [r5, #580]
+	ldr	r1, .L802+164
+	ldr	r2, [r3, #544]
+	str	r2, [sp]
+	add	r4, r4, r0
+	ldr	r2, [r5, #2288]
+	mov	r0, r4
+	ldr	r2, [r2, #44]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #548]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #536]
+	ldr	r3, [r3, #540]
+	bl	sprintf
+	add	r0, r4, r0
+	rsb	r0, r6, r0
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L803:
+	.align	2
+.L802:
+	.word	.LC1
+	.word	.LC2
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC50
+	.word	.LC51
+	.word	.LC52
+	.word	.LC53
+	.word	.LC54
+	.word	.LC55
+	.word	.LC56
+	.word	.LC57
+	.word	.LC58
+	.word	.LC59
+	.word	.LC60
+	.word	.LC61
+	.word	.LC62
+	.word	.LC63
+	.word	.LC64
+	.word	.LC65
+	.word	.LC66
+	.word	.LC67
+	.word	.LC68
+	.word	.LC69
+	.word	-858993459
+	.word	.LC70
+	.word	.LC71
+	.word	.LC72
+	.word	.LC73
+	.word	.LC74
+	.word	.LC75
+	.word	.LC76
+	.word	.LC77
+	.word	.LC78
+	.word	.LC79
+	.word	.LC80
+	.word	.LC81
+	.word	.LC82
+	.word	.LC83
+	.word	.LC84
+	.word	.LC85
+	.word	.LC86
+	.fnend
+	.size	ftl_print_info_to_buf, .-ftl_print_info_to_buf
+	.align	2
+	.global	zftl_proc_ftl_read
+	.type	zftl_proc_ftl_read, %function
+zftl_proc_ftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_print_info_to_buf
+	.fnend
+	.size	zftl_proc_ftl_read, .-zftl_proc_ftl_read
+	.align	2
+	.global	ftl_gc_write_buf
+	.type	ftl_gc_write_buf, %function
+ftl_gc_write_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r1, r0
+	ldrb	r3, [r0, #2]	@ zero_extendqisi2
+	ldr	r4, .L807
+	orr	r3, r3, #2
+	strb	r3, [r0, #2]
+	add	r0, r4, #2304
+	add	r0, r0, #4
+	bl	buf_add_tail
+	ldrb	r0, [r4, #2284]	@ zero_extendqisi2
+	add	r0, r0, #1
+	uxtb	r0, r0
+	strb	r0, [r4, #2284]
+	ldmfd	sp!, {r4, pc}
+.L808:
+	.align	2
+.L807:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_gc_write_buf, .-ftl_gc_write_buf
+	.align	2
+	.global	gc_hook
+	.type	gc_hook, %function
+gc_hook:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	gc_hook, .-gc_hook
+	.align	2
+	.global	vpn_check
+	.type	vpn_check, %function
+vpn_check:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	vpn_check, .-vpn_check
+	.align	2
+	.global	gc_add_sblk
+	.type	gc_add_sblk, %function
+gc_add_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #16
+	mov	r5, r0
+	ldr	r8, .L852
+	mov	r4, r1
+	mov	r9, r2
+	ldr	r7, .L852+4
+	ldr	r3, [r8]
+	tst	r3, #256
+	beq	.L812
+	ldr	r3, [r7, #568]
+	mov	r1, r5
+	ldr	r2, [r7, #576]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	mov	r3, r3, lsr #5
+	str	r3, [sp]
+	mov	r3, r0, asl #1
+	ldr	r0, .L852+8
+	ldrh	r3, [r2, r3]
+	mov	r2, r4
+	str	r3, [sp, #4]
+	ldr	r3, .L852+12
+	ldrh	r3, [r3, #52]
+	str	r3, [sp, #8]
+	movw	r3, #2298
+	ldrh	r3, [r7, r3]
+	str	r3, [sp, #12]
+	mov	r3, r9
+	bl	printk
+.L812:
+	ldr	r3, .L852+16
+	ldrh	r2, [r3]
+	mov	r6, r3
+	cmp	r2, r5
+	bhi	.L813
+	ldr	r1, .L852+20
+	movw	r2, #454
+	ldr	r0, .L852+24
+	bl	printk
+	bl	dump_stack
+.L813:
+	ldrh	r3, [r6]
+	ldr	r2, .L852+4
+	cmp	r3, r5
+	bhi	.L814
+	ldr	r3, [r8]
+	tst	r3, #1024
+	beq	.L850
+	mov	r1, r5
+	mov	r2, r4
+	mov	r3, r9
+	ldr	r0, .L852+28
+	bl	printk
+	b	.L850
+.L814:
+	ldr	r1, [r2, #576]
+	mov	r3, r5, asl #1
+	ldrh	r3, [r1, r3]
+	ldr	r1, [r2, #568]
+	add	r1, r1, r5, asl #2
+	ldrb	ip, [r1, #2]	@ zero_extendqisi2
+	ands	r6, ip, #224
+	bne	.L817
+	cmp	r3, #0
+	beq	.L834
+	ldr	r0, .L852+24
+	movw	r2, #462
+	ldr	r1, .L852+20
+	bl	printk
+.L850:
+	bl	dump_stack
+	b	.L834
+.L817:
+	movw	r1, #2312
+	ldrh	r1, [r2, r1]
+	cmp	r1, r5
+	beq	.L834
+	ldr	r2, [r2, #580]
+	ldrh	r1, [r2, #48]
+	cmp	r1, r5
+	beq	.L834
+	ldrh	r1, [r2, #16]
+	cmp	r1, r5
+	beq	.L834
+	ldrh	r1, [r2, #80]
+	cmp	r1, r5
+	beq	.L834
+	ldr	r1, .L852+12
+	add	lr, r1, #52
+	ldrh	r0, [r1, #52]
+	mov	r1, #0
+.L818:
+	cmp	r1, r0
+	bcs	.L851
+	ldrh	r6, [lr, #2]!
+	cmp	r6, r5
+	beq	.L834
+	add	r1, r1, #1
+	b	.L818
+.L851:
+	cmp	r4, #0
+	bne	.L823
+	movw	r1, #2908
+	ldrh	lr, [r7, r1]
+	cmp	lr, r5
+	moveq	r0, r4
+	beq	.L816
+	ldr	r6, .L852+32
+	mov	r1, r4
+.L822:
+	ldrh	r10, [r1, r6]
+	cmp	r5, r10
+	bne	.L821
+	ldr	r0, [r8]
+	ands	r0, r0, #256
+	beq	.L816
+	stmia	sp, {r5, lr}
+	mov	r1, r5
+	mov	r2, ip, lsr #5
+	ldr	r0, .L852+36
+	bl	printk
+	b	.L834
+.L821:
+	add	r1, r1, #2
+	cmp	r1, #16
+	bne	.L822
+	add	r6, r2, r9, asl #7
+	add	r6, r6, #136
+	b	.L824
+.L823:
+	add	r6, r2, #392
+.L824:
+	ldr	r2, [r8]
+	tst	r2, #256
+	beq	.L825
+	str	r3, [sp]
+	movw	r3, #2298
+	ldrh	r3, [r7, r3]
+	mov	r1, r5
+	str	r0, [sp, #4]
+	mov	r2, r4
+	ldr	r0, .L852+40
+	str	r3, [sp, #8]
+	mov	r3, ip, lsr #5
+	bl	printk
+.L825:
+	add	r1, r6, #128
+	mov	r3, r6
+	movw	r0, #65535
+.L828:
+	mov	r2, r3
+	add	r3, r3, #2
+	ldrh	ip, [r2]
+	cmp	ip, r0
+	bne	.L826
+	cmp	r4, #0
+	strh	r5, [r2]	@ movhi
+	ldreq	r3, [r7, #580]
+	ldrne	r2, [r7, #580]
+	addeq	r9, r3, r9, asl #1
+	ldrneh	r3, [r2, #124]
+	ldreqh	r3, [r9, #120]
+	addne	r3, r3, #1
+	addeq	r3, r3, #1
+	strneh	r3, [r2, #124]	@ movhi
+	streqh	r3, [r9, #120]	@ movhi
+	b	.L849
+.L826:
+	cmp	r3, r1
+	bne	.L828
+.L849:
+	mov	r0, #1
+	b	.L816
+.L834:
+	mov	r0, #0
+.L816:
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L853:
+	.align	2
+.L852:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC87
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR0+564
+	.word	.LANCHOR1+1200
+	.word	.LC0
+	.word	.LC88
+	.word	.LANCHOR0+2912
+	.word	.LC89
+	.word	.LC90
+	.fnend
+	.size	gc_add_sblk, .-gc_add_sblk
+	.align	2
+	.global	gc_mark_bad_ppa
+	.type	gc_mark_bad_ppa, %function
+gc_mark_bad_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r6, #1
+	ldr	r5, .L860
+	mov	r7, r0
+	add	r3, r5, #2928
+	ldrb	r2, [r5, #676]	@ zero_extendqisi2
+	ldrh	r3, [r3]
+	rsb	r2, r2, #24
+	ldrb	r1, [r5, #2930]	@ zero_extendqisi2
+	rsb	r2, r3, r2
+	mov	r0, r0, lsr r3
+	mov	r2, r6, asl r2
+	sub	r2, r2, #1
+	uxth	r4, r0
+	and	r0, r0, r2
+	bl	__aeabi_uidiv
+	ldr	r1, [r5, #2892]
+	mov	r2, r4
+	mov	r3, r7
+	uxth	r8, r0
+	ldr	r0, .L860+4
+	bl	printk
+	mov	r1, r6
+	mov	r2, #0
+	mov	r0, r8
+	bl	gc_add_sblk
+	ldr	r2, [r5, #2892]
+	ldr	r0, .L860+8
+	mov	r1, #0
+.L855:
+	uxth	r3, r1
+	cmp	r3, r2
+	bcs	.L859
+	add	r3, r3, #292
+	add	r1, r1, #1
+	mov	r3, r3, asl #1
+	ldrh	r3, [r0, r3]
+	cmp	r3, r4
+	bne	.L855
+	b	.L856
+.L859:
+	cmp	r2, #5
+	addls	r3, r2, #1
+	addls	r2, r2, #292
+	strls	r3, [r5, #2892]
+	ldrls	r3, .L860+8
+	movls	r2, r2, asl #1
+	strlsh	r4, [r3, r2]	@ movhi
+.L856:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L861:
+	.align	2
+.L860:
+	.word	.LANCHOR0
+	.word	.LC91
+	.word	.LANCHOR0+2312
+	.fnend
+	.size	gc_mark_bad_ppa, .-gc_mark_bad_ppa
+	.align	2
+	.global	gc_get_src_ppa_from_index
+	.type	gc_get_src_ppa_from_index, %function
+gc_get_src_ppa_from_index:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L863
+	ldr	r3, [r3, #2932]
+	ldr	r0, [r3, r0, asl #2]
+	bx	lr
+.L864:
+	.align	2
+.L863:
+	.word	.LANCHOR0
+	.fnend
+	.size	gc_get_src_ppa_from_index, .-gc_get_src_ppa_from_index
+	.align	2
+	.global	gc_write_completed
+	.type	gc_write_completed, %function
+gc_write_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L896
+	add	r9, r4, #724
+	mov	r5, r4
+.L866:
+	ldrb	r10, [r4, #2936]	@ zero_extendqisi2
+	cmp	r10, #255
+	beq	.L895
+	mov	r3, #48
+	ldr	r8, .L896+4
+	mul	r3, r3, r10
+	add	r2, r4, r3
+	add	r3, r9, r3
+	ldrb	r1, [r2, #724]	@ zero_extendqisi2
+	ldrh	r7, [r3, #32]
+	strb	r1, [r4, #2936]
+	ldr	r1, [r2, #760]
+	cmp	r1, #0
+	beq	.L867
+	add	r3, r8, #2160
+	ldr	r2, [r2, #748]
+	mov	r0, #1
+	strh	r0, [r3]	@ movhi
+	ldr	r0, .L896+8
+	str	r2, [r4, #2888]
+	bl	printk
+	ldr	r1, .L896+12
+	movw	r2, #805
+	ldr	r0, .L896+16
+	bl	printk
+	bl	dump_stack
+.L867:
+	ldrb	r3, [r5, #2937]	@ zero_extendqisi2
+	cmp	r3, #3
+	bne	.L868
+	ldrb	r3, [r4, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, [r4, #580]
+	ldreqb	r6, [r3, #89]	@ zero_extendqisi2
+	addeq	r6, r6, r6, asl #1
+	beq	.L869
+.L868:
+	ldrb	r3, [r5, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r6, #1
+	beq	.L869
+	ldrb	r3, [r4, #2939]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r6, #1
+	movne	r6, #2
+.L869:
+	ldr	r3, .L896+20
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L870
+	mov	r3, #48
+	ldr	r1, [r5, #2940]
+	mul	r3, r3, r10
+	ldr	r0, .L896+24
+	ldrb	r1, [r1, r7]	@ zero_extendqisi2
+	add	r2, r5, r3
+	add	r3, r8, r3
+	ldrb	r2, [r2, #725]	@ zero_extendqisi2
+	ldrh	r3, [r3, #32]
+	str	r1, [sp]
+	mov	r1, r7
+	bl	printk
+.L870:
+	mov	r3, #48
+	ldr	r2, [r5, #2940]
+	mla	r3, r3, r10, r5
+	mov	fp, r7
+	ldrb	r2, [r2, r7]	@ zero_extendqisi2
+	ldrb	r3, [r3, #725]	@ zero_extendqisi2
+	cmp	r2, r3
+	beq	.L871
+	ldr	r1, .L896+12
+	movw	r2, #814
+	ldr	r0, .L896+16
+	bl	printk
+	bl	dump_stack
+.L871:
+	mov	r3, #48
+	mla	r10, r3, r10, r5
+	ldrb	r3, [r10, #769]	@ zero_extendqisi2
+	cmp	r3, #3
+	beq	.L872
+	ldrb	r3, [r4, #2937]	@ zero_extendqisi2
+	cmp	r3, #3
+	bne	.L872
+	ldrb	r3, [r4, #2944]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L872
+	ldrb	r3, [r4, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L872
+	ldrb	r3, [r4, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L873
+	ldrb	r3, [r4, #2939]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L872
+.L873:
+	ldr	r2, [r5, #2940]
+	mov	r3, #0
+	mov	r1, #48
+	mov	r0, r3
+	add	r7, r2, r7
+	b	.L874
+.L872:
+	ldr	r3, .L896+28
+	mvn	r10, #0
+	mov	r2, #0
+	strh	r7, [r3]	@ movhi
+	mov	r3, #48
+.L875:
+	rsb	r1, r7, fp
+	uxth	r1, r1
+	cmp	r1, r6
+	bcs	.L866
+	ldr	r1, [r5, #2940]
+	str	r3, [sp, #12]
+	str	r2, [sp, #8]
+	ldrb	r0, [r1, fp]	@ zero_extendqisi2
+	strb	r10, [r1, fp]
+	add	fp, fp, #1
+	mul	r0, r3, r0
+	add	r1, r5, r0
+	add	r0, r8, r0
+	strb	r2, [r1, #769]
+	bl	zbuf_free
+	ldrb	r1, [r5, #2319]	@ zero_extendqisi2
+	sub	r1, r1, #1
+	strb	r1, [r5, #2319]
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #8]
+	b	.L875
+.L874:
+	uxth	r2, r3
+	cmp	r2, r6
+	bcs	.L866
+	ldrb	r2, [r7, r3]	@ zero_extendqisi2
+	add	r3, r3, #1
+	mla	r2, r1, r2, r5
+	strb	r0, [r2, #769]
+	b	.L874
+.L895:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L897:
+	.align	2
+.L896:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+724
+	.word	.LC92
+	.word	.LANCHOR1+1212
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC93
+	.word	.LANCHOR0+2880
+	.fnend
+	.size	gc_write_completed, .-gc_write_completed
+	.align	2
+	.global	gc_get_src_blk
+	.type	gc_get_src_blk, %function
+gc_get_src_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L908
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r3, [r2, #580]
+	ldrb	r0, [r2, #2945]	@ zero_extendqisi2
+	ldrh	r1, [r3, #124]
+	cmp	r1, #0
+	addne	r3, r3, #392
+	movne	r1, #1
+	bne	.L900
+	add	ip, r3, r0, asl #1
+	ldrh	ip, [ip, #120]
+	cmp	ip, #0
+	beq	.L905
+	add	r3, r3, r0, asl #7
+	add	r3, r3, #136
+.L900:
+	add	ip, r3, #128
+	movw	lr, #65535
+.L904:
+	mov	r4, r3
+	ldrh	r0, [r3], #2
+	cmp	r0, lr
+	beq	.L902
+	cmp	r1, #0
+	mvn	r3, #0
+	strh	r3, [r4]	@ movhi
+	ldreqb	r1, [r2, #2945]	@ zero_extendqisi2
+	ldreq	r3, [r2, #580]
+	ldrne	r2, [r2, #580]
+	addeq	r3, r3, r1, asl #1
+	ldrneh	r3, [r2, #124]
+	ldreqh	r2, [r3, #120]
+	subne	r3, r3, #1
+	subeq	r2, r2, #1
+	strneh	r3, [r2, #124]	@ movhi
+	streqh	r2, [r3, #120]	@ movhi
+	ldmfd	sp!, {r4, pc}
+.L902:
+	cmp	r3, ip
+	bne	.L904
+	ldmfd	sp!, {r4, pc}
+.L905:
+	movw	r0, #65535
+	ldmfd	sp!, {r4, pc}
+.L909:
+	.align	2
+.L908:
+	.word	.LANCHOR0
+	.fnend
+	.size	gc_get_src_blk, .-gc_get_src_blk
+	.align	2
+	.global	gc_search_src_blk
+	.type	gc_search_src_blk, %function
+gc_search_src_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, r0
+	ldr	r5, .L1012
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r3, [r5, #580]
+	add	r3, r3, r0, asl #1
+	ldrh	r4, [r3, #120]
+	cmp	r4, #0
+	bne	.L957
+	cmp	r0, #0
+	mov	r9, r1
+	mov	r7, r2
+	bne	.L913
+	movw	r3, #2946
+	mov	fp, r0
+	mov	r4, r0
+	strh	r0, [r5, r3]	@ movhi
+.L914:
+	uxth	r8, r7
+	uxth	r3, fp
+	cmp	r3, r8
+	bcs	.L919
+	ldr	ip, .L1012+4
+	add	r0, ip, #2
+	ldrh	r2, [ip]
+	str	ip, [sp, #12]
+	mov	r1, r2
+	str	r2, [sp, #8]
+	bl	_list_get_gc_head_node
+	ldr	r3, .L1012+4
+	ldr	r2, [sp, #8]
+	mov	r10, r0
+	ldr	ip, [sp, #12]
+	add	r2, r2, #1
+	uxth	r2, r2
+	strh	r2, [r3]	@ movhi
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L915
+	ldr	r3, .L1012+8
+	mov	ip, r0, asl #1
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L916
+	ldr	r3, .L1012
+	mov	r1, r10
+	ldr	r0, .L1012+12
+	str	ip, [sp, #8]
+	ldr	r3, [r3, #576]
+	ldrh	r3, [r3, ip]
+	bl	printk
+	ldr	ip, [sp, #8]
+.L916:
+	ldr	r3, [r5, #576]
+	ldrh	r2, [r3, ip]
+	ldr	r3, .L1012+16
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bcs	.L917
+	mov	r1, #0
+	mov	r0, r10
+	mov	r2, r1
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L918
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r8
+	bls	.L918
+	b	.L919
+.L917:
+	ldr	r2, .L1012
+	movw	r3, #2946
+	mov	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+	b	.L919
+.L915:
+	mov	r3, #0
+	strh	r3, [ip]	@ movhi
+	b	.L919
+.L918:
+	add	fp, fp, #1
+	b	.L914
+.L919:
+	tst	r9, #2
+	movne	r10, #0
+	ldrne	fp, .L1012
+	beq	.L921
+.L922:
+	uxth	r3, r10
+	cmp	r3, r8
+	bcs	.L926
+	ldr	r3, .L1012+20
+	add	r0, r3, #4
+	ldrh	r2, [r3]
+	str	r3, [sp, #12]
+	mov	r1, r2
+	str	r2, [sp, #8]
+	bl	_list_get_gc_head_node
+	ldr	r3, .L1012+20
+	ldr	r2, [sp, #8]
+	mov	lr, r0
+	add	r1, r2, #1
+	movw	r2, #65535
+	cmp	r0, r2
+	strh	r1, [r3]	@ movhi
+	ldr	r3, [sp, #12]
+	beq	.L923
+	ldr	r1, [fp, #576]
+	mov	r2, r0, asl #1
+	sub	lr, r3, #652
+	ldrh	r1, [r1, r2]
+	ldrh	r2, [lr]
+	cmp	r1, r2
+	bcs	.L923
+	mov	r1, #0
+	mov	r2, r1
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L925
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r8
+	bls	.L925
+	b	.L928
+.L923:
+	mov	r2, #0
+	strh	r2, [r3]	@ movhi
+	b	.L926
+.L925:
+	add	r10, r10, #1
+	b	.L922
+.L926:
+	cmp	r4, r8
+	bcs	.L928
+	ldr	r0, .L1012
+	movw	r1, #2300
+	ldrh	r2, [r5, r1]
+	add	r3, r0, #2960
+	ldrh	ip, [r3]
+	movw	r3, #2962
+	ldrh	lr, [r5, r3]
+	ldrb	r3, [r5, #2964]	@ zero_extendqisi2
+	mul	r3, r3, lr
+	sub	r3, r3, ip, lsr #2
+	cmp	r2, r3
+	addlt	r3, r2, ip, lsr #3
+	strlth	r3, [r0, r1]	@ movhi
+	b	.L921
+.L928:
+	ldr	r1, .L1012
+	movw	r2, #2300
+	ldrh	r3, [r5, r2]
+	add	r0, r1, #2960
+	ldrh	r0, [r0]
+	cmp	r3, r0
+	subhi	r3, r3, r0, lsr #3
+	strhih	r3, [r1, r2]	@ movhi
+.L921:
+	tst	r9, #1
+	beq	.L929
+	cmp	r4, r8
+	movcc	fp, #0
+	ldrcc	r10, .L1012+24
+	bcs	.L929
+.L930:
+	uxth	r3, fp
+	cmp	r3, r8
+	bcs	.L933
+	ldrh	r3, [r10]
+	ldr	r2, .L1012+24
+	mov	r1, r3
+	add	r0, r2, #2
+	str	r2, [sp, #12]
+	str	r3, [sp, #8]
+	bl	_list_get_gc_head_node
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #12]
+	add	r3, r3, #1
+	strh	r3, [r10]	@ movhi
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L931
+	mov	r1, #0
+	mov	r2, r1
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L932
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r8
+	bcc	.L932
+	b	.L935
+.L931:
+	mov	r3, #0
+	strh	r3, [r2]	@ movhi
+	b	.L933
+.L932:
+	add	fp, fp, #1
+	b	.L930
+.L933:
+	cmp	r4, r8
+	bcs	.L935
+	ldr	r1, .L1012
+	movw	r2, #2298
+	ldrh	r3, [r5, r2]
+	add	r0, r1, #2960
+	ldrh	r0, [r0]
+	cmp	r3, r0
+	addcc	r3, r3, r0, lsr #3
+	bcc	.L1011
+	b	.L929
+.L935:
+	ldr	r1, .L1012
+	movw	r2, #2298
+	ldrh	r3, [r5, r2]
+	add	r0, r1, #2960
+	ldrh	r0, [r0]
+	cmp	r3, r0, lsr #1
+	bls	.L929
+	sub	r3, r3, r0, lsr #3
+.L1011:
+	strh	r3, [r1, r2]	@ movhi
+	b	.L929
+.L913:
+	ldr	r2, .L1012+28
+	movw	r3, #570
+	strh	r4, [r2, r3]	@ movhi
+	movw	r3, #2972
+	strh	r4, [r5, r3]	@ movhi
+	ands	r3, r1, #1
+	str	r3, [sp, #8]
+	ldreq	r4, [sp, #8]
+	beq	.L936
+	movw	r2, #2974
+	movw	r3, #2280
+	ldrh	r2, [r5, r2]
+	ldrh	r3, [r5, r3]
+	cmp	r3, r2, lsr #2
+	bcc	.L937
+	movw	r2, #2278
+	ldrh	r2, [r5, r2]
+	cmp	r2, r3
+	bls	.L938
+.L937:
+	movw	r3, #2278
+	movw	r10, #2966
+	ldrh	r3, [r5, r3]
+	mov	r1, #0
+	ldr	r0, .L1012+32
+	ldr	r4, .L1012
+	mov	r3, r3, lsr #2
+	strh	r3, [r5, r10]	@ movhi
+	bl	_list_get_gc_head_node
+	movw	r2, #65535
+	cmp	r0, r2
+	moveq	r4, #0
+	beq	.L939
+	ldr	r1, [r4, #576]
+	add	r2, r4, #2960
+	mov	r3, r0, asl #1
+	ldrh	r2, [r2]
+	ldrh	r3, [r1, r3]
+	mov	r1, #0
+	cmp	r3, r2, lsr #2
+	movcs	r4, r1
+	bcs	.L939
+	mov	r2, r6
+	strh	r1, [r4, r10]	@ movhi
+	bl	gc_add_sblk
+	adds	r4, r0, #0
+	movne	r4, #1
+.L939:
+	ldr	r10, .L1012+24
+	mov	r8, #64
+	movw	fp, #65535
+.L941:
+	ldrh	r2, [r10]
+	ldr	r0, .L1012+32
+	mov	r1, r2
+	str	r2, [sp, #12]
+	bl	_list_get_gc_head_node
+	ldr	r2, [sp, #12]
+	cmp	r0, fp
+	add	r2, r2, #1
+	strh	r2, [r10]	@ movhi
+	beq	.L938
+	mov	r1, #0
+	mov	r2, r6
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L940
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r7
+	bcs	.L938
+.L940:
+	sub	r3, r8, #1
+	uxth	r8, r3
+	cmp	r8, #0
+	bne	.L941
+.L938:
+	movw	r3, #2280
+	ldrh	r2, [r5, r3]
+	movw	r3, #2974
+	ldrh	r3, [r5, r3]
+	cmp	r2, r3, lsr #3
+	bhi	.L958
+	ldr	r1, .L1012
+	movw	r3, #2278
+	ldrh	r3, [r1, r3]
+	add	r3, r3, #8
+	cmp	r2, r3
+	bgt	.L958
+.L936:
+	tst	r9, #2
+	beq	.L944
+	ldr	r10, .L1012+20
+	mov	r3, #0
+	movw	r2, #2952
+	mov	r8, #64
+	mov	fp, r3
+	strh	r3, [r5, r2]	@ movhi
+.L949:
+	ldrh	r2, [r10]
+	ldr	r0, .L1012+36
+	mov	r1, r2
+	str	r2, [sp, #12]
+	bl	_list_get_gc_head_node
+	ldr	r2, [sp, #12]
+	add	r2, r2, #1
+	strh	r2, [r10]	@ movhi
+	movw	r2, #65535
+	cmp	r0, r2
+	beq	.L945
+	cmp	r7, #1
+	ldr	r1, .L1012+40
+	bne	.L946
+	ldr	r3, .L1012
+	add	r2, r1, #668
+	ldrh	r2, [r2]
+	ldrb	lr, [r3, #2964]	@ zero_extendqisi2
+	smulbb	r2, lr, r2
+	add	lr, r3, #2960
+	ldrh	lr, [lr]
+	sub	r2, r2, lr, lsr #3
+	strh	r2, [r1]	@ movhi
+.L946:
+	ldr	lr, [r5, #576]
+	mov	r2, r0, asl #1
+	ldrh	lr, [lr, r2]
+	ldrh	r2, [r1]
+	cmp	lr, r2
+	bcs	.L947
+	mov	r1, #0
+	mov	r2, r6
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L948
+	add	r4, r4, #1
+	add	r3, fp, #1
+	uxth	r4, r4
+	uxth	fp, r3
+	cmp	r4, r7
+	bcc	.L948
+	b	.L945
+.L947:
+	ldr	r1, .L1012
+	movw	r2, #2952
+	mov	r0, #0
+	strh	r0, [r1, r2]	@ movhi
+	b	.L945
+.L948:
+	sub	ip, r8, #1
+	uxth	r8, ip
+	cmp	r8, #0
+	bne	.L949
+.L945:
+	cmp	r4, r7
+	ldr	r2, .L1012+44
+	bcc	.L950
+	cmp	fp, #0
+	bne	.L951
+	movw	r3, #2282
+	ldrh	r1, [r5, r3]
+	ldrh	r3, [r2, #16]
+	cmp	r1, r3
+	bls	.L951
+.L950:
+	ldrh	r3, [r2]
+	movw	r2, #2962
+	ldrh	ip, [r5, r2]
+	movw	r1, #2294
+	ldrb	r2, [r5, #2964]	@ zero_extendqisi2
+	ldrh	r0, [r5, r1]
+	mov	r3, r3, lsr #3
+	mul	r2, r2, ip
+	rsb	r2, r3, r2
+	cmp	r0, r2
+	addlt	r3, r3, r0
+	blt	.L1010
+	b	.L944
+.L951:
+	ldrh	r0, [r2]
+	movw	r1, #2294
+	ldrb	r2, [r5, #2964]	@ zero_extendqisi2
+	ldrh	r3, [r5, r1]
+	mul	r2, r2, r0
+	cmp	r3, r2
+	ble	.L944
+	sub	r3, r3, r0, lsr #3
+.L1010:
+	ldr	r2, .L1012
+	strh	r3, [r2, r1]	@ movhi
+.L944:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	beq	.L929
+	ldr	fp, .L1012
+	movw	r3, #2946
+	mov	r10, #64
+	mov	r2, #0
+	strh	r2, [r5, r3]	@ movhi
+.L955:
+	ldr	r3, .L1012+4
+	add	r0, r3, #2
+	ldrh	r8, [r3]
+	mov	r1, r8
+	add	r8, r8, #1
+	bl	_list_get_gc_head_node
+	ldr	r3, .L1012+4
+	movw	r2, #65535
+	strh	r8, [r3]	@ movhi
+	cmp	r0, r2
+	beq	.L952
+	ldr	r1, [fp, #576]
+	mov	r2, r0, asl #1
+	ldrh	r1, [r1, r2]
+	ldr	r2, .L1012+48
+	ldrh	ip, [r2]
+	cmp	ip, r1
+	cmphi	r1, #2
+	bls	.L953
+	ldrh	r1, [r3, #28]
+	ldrh	r2, [r2, #-16]
+	cmp	r2, r1, lsr #1
+	bls	.L952
+.L953:
+	mov	r1, #0
+	mov	r2, r6
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L954
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r7
+	bcs	.L952
+.L954:
+	sub	r3, r10, #1
+	uxth	r10, r3
+	cmp	r10, #0
+	bne	.L955
+.L952:
+	cmp	r4, r7
+	ldr	r3, .L1012+44
+	movw	r1, #2296
+	bcs	.L956
+	sub	r0, r3, #2960
+	ldrh	r3, [r3]
+	ldrh	r2, [r5, r1]
+	cmp	r2, r3, lsr #1
+	subhi	r2, r2, r3, lsr #3
+	strhih	r2, [r0, r1]	@ movhi
+	b	.L929
+.L956:
+	ldrh	r0, [r3]
+	sub	ip, r3, #2960
+	ldrb	r3, [r5, #2964]	@ zero_extendqisi2
+	ldrh	r2, [r5, r1]
+	mul	r3, r3, r0
+	sub	r3, r3, #32
+	cmp	r2, r3
+	addlt	r2, r2, r0, lsr #3
+	strlth	r2, [ip, r1]	@ movhi
+.L929:
+	ldr	r3, .L1012+8
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L957
+	str	r7, [sp]
+	mov	r1, r6
+	ldr	r0, .L1012+52
+	mov	r2, r9
+	mov	r3, r4
+	bl	printk
+.L957:
+	mov	r0, r4
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L958:
+	ldr	r10, .L1012+4
+	movw	r3, #2946
+	mov	r8, #64
+	movw	fp, #65535
+	mov	r2, #0
+	strh	r2, [r5, r3]	@ movhi
+.L943:
+	ldrh	r2, [r10]
+	ldr	r0, .L1012+56
+	mov	r1, r2
+	str	r2, [sp, #12]
+	bl	_list_get_gc_head_node
+	ldr	r2, [sp, #12]
+	cmp	r0, fp
+	add	r2, r2, #1
+	strh	r2, [r10]	@ movhi
+	beq	.L936
+	mov	r1, #0
+	mov	r2, r6
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L942
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r7
+	bcs	.L936
+.L942:
+	sub	r3, r8, #1
+	uxth	r8, r3
+	cmp	r8, #0
+	bne	.L943
+	b	.L936
+.L1013:
+	.align	2
+.L1012:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2946
+	.word	.LANCHOR2
+	.word	.LC94
+	.word	.LANCHOR0+2298
+	.word	.LANCHOR0+2952
+	.word	.LANCHOR0+2966
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2294
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR0+2296
+	.word	.LC95
+	.word	.LANCHOR0+2948
+	.fnend
+	.size	gc_search_src_blk, .-gc_search_src_blk
+	.align	2
+	.global	gc_free_temp_buf
+	.type	gc_free_temp_buf, %function
+gc_free_temp_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r4, .L1029
+	ldrb	r0, [r4, #2319]	@ zero_extendqisi2
+	cmp	r0, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	ldrb	r3, [r4, #2262]	@ zero_extendqisi2
+	cmp	r3, #1
+	bhi	.L1021
+	add	r3, r4, #2880
+	mov	r0, #48
+	ldrh	r5, [r3]
+	movw	r3, #2962
+	ldrh	r1, [r4, r3]
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	add	r2, r5, #24
+	mul	r3, r3, r1
+	ldr	r1, [r4, #2940]
+	cmp	r3, r2
+	movcs	r3, r2
+.L1016:
+	cmp	r5, r3
+	bcs	.L1021
+	ldrb	r2, [r1, r5]	@ zero_extendqisi2
+	cmp	r2, #255
+	beq	.L1017
+	mul	r2, r0, r2
+	ldr	r6, .L1029
+	add	ip, r4, r2
+	ldrb	ip, [ip, #769]	@ zero_extendqisi2
+	cmp	ip, #0
+	bne	.L1017
+	add	r0, r6, #724
+	add	r0, r0, r2
+	bl	zbuf_free
+	ldr	r3, .L1029+4
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L1018
+	ldr	r3, [r6, #2940]
+	mov	r1, r5
+	ldr	r0, .L1029+8
+	ldrb	r2, [r3, r5]	@ zero_extendqisi2
+	bl	printk
+.L1018:
+	ldr	r3, [r4, #2940]
+	mvn	r2, #0
+	mov	r0, #1
+	strb	r2, [r3, r5]
+	ldrb	r3, [r4, #2319]	@ zero_extendqisi2
+	add	r3, r3, r2
+	strb	r3, [r4, #2319]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1017:
+	add	r5, r5, #1
+	b	.L1016
+.L1021:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1030:
+	.align	2
+.L1029:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC96
+	.fnend
+	.size	gc_free_temp_buf, .-gc_free_temp_buf
+	.align	2
+	.global	print_gc_debug_info
+	.type	print_gc_debug_info, %function
+print_gc_debug_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, lr}
+	.save {lr}
+	.pad #20
+	movw	r2, #2312
+	ldr	r0, .L1033
+	movw	ip, #566
+	add	r3, r0, r2
+	ldrh	r1, [r0, r2]
+	ldrh	r2, [r3, #2]
+	ldrh	r3, [r3, ip]
+	ldrb	ip, [r0, #2262]	@ zero_extendqisi2
+	str	ip, [sp]
+	ldrb	ip, [r0, #2319]	@ zero_extendqisi2
+	str	ip, [sp, #4]
+	movw	ip, #2292
+	ldrh	r0, [r0, ip]
+	str	r0, [sp, #8]
+	ldr	r0, .L1033+4
+	bl	printk
+	add	sp, sp, #20
+	@ sp needed
+	ldr	pc, [sp], #4
+.L1034:
+	.align	2
+.L1033:
+	.word	.LANCHOR0
+	.word	.LC97
+	.fnend
+	.size	print_gc_debug_info, .-print_gc_debug_info
+	.align	2
+	.global	zftl_get_gc_node
+	.type	zftl_get_gc_node, %function
+zftl_get_gc_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r1, #5
+	mov	r3, r0
+	ldreq	r0, .L1039
+	beq	.L1038
+	cmp	r1, #2
+	ldreq	r0, .L1039+4
+	ldrne	r0, .L1039+8
+.L1038:
+	mov	r1, r3
+	b	_list_get_gc_head_node
+.L1040:
+	.align	2
+.L1039:
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2948
+	.fnend
+	.size	zftl_get_gc_node, .-zftl_get_gc_node
+	.align	2
+	.global	zftl_insert_free_list
+	.type	zftl_insert_free_list, %function
+zftl_insert_free_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1045
+	mov	r1, r0
+	ldr	r3, [r2, #568]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	ands	r3, r3, #24
+	addeq	r2, r2, #2272
+	ldreq	r0, .L1045+4
+	beq	.L1044
+	cmp	r3, #16
+	ldrne	r0, .L1045+8
+	ldreq	r0, .L1045+12
+	ldreq	r2, .L1045+16
+	subne	r2, r0, #712
+.L1044:
+	b	_insert_free_list
+.L1046:
+	.align	2
+.L1045:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+2988
+	.word	.LANCHOR0+2984
+	.word	.LANCHOR0+2274
+	.fnend
+	.size	zftl_insert_free_list, .-zftl_insert_free_list
+	.align	2
+	.global	zftl_insert_data_list
+	.type	zftl_insert_data_list, %function
+zftl_insert_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1052
+	mov	r1, r0
+	ldr	r3, [r3, #568]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	and	r3, r3, #224
+	cmp	r3, #64
+	ldreq	r0, .L1052+4
+	ldreq	r2, .L1052+8
+	beq	.L1051
+.L1048:
+	cmp	r3, #96
+	ldreq	r0, .L1052+12
+	subeq	r2, r0, #668
+	beq	.L1051
+	cmp	r3, #160
+	bxne	lr
+	ldr	r0, .L1052+16
+	ldr	r2, .L1052+20
+.L1051:
+	b	_insert_data_list
+.L1053:
+	.align	2
+.L1052:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2278
+	.word	.LANCHOR0+2948
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2282
+	.fnend
+	.size	zftl_insert_data_list, .-zftl_insert_data_list
+	.align	2
+	.global	zftl_gc_get_free_sblk
+	.type	zftl_gc_get_free_sblk, %function
+zftl_gc_get_free_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #16
+	movw	r2, #65535
+	ldr	r8, .L1068
+	mov	r7, r0
+	ldr	r3, [r8, #580]
+	add	r3, r3, #588
+	ldrh	r4, [r3]
+	clz	r3, r0
+	cmp	r4, r2
+	mov	r3, r3, lsr #5
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L1055
+	ldr	r0, .L1068+4
+	mov	r1, r4
+	bl	printk
+	ldr	r3, [r8, #580]
+	mvn	r2, #0
+	add	r3, r3, #588
+	strh	r2, [r3]	@ movhi
+	b	.L1056
+.L1055:
+	movw	r3, #2274
+	mov	r6, r1
+	ldrh	r1, [r8, r3]
+	movw	r3, #2276
+	ldrh	r3, [r8, r3]
+	mov	r5, r8
+	cmp	r1, r3
+	bls	.L1057
+	cmp	r0, #0
+	ldr	r2, .L1068+8
+	movne	r1, r1, lsr #3
+	moveq	r1, r0
+	ldr	r0, .L1068+12
+	b	.L1067
+.L1057:
+	cmp	r0, #0
+	moveq	r1, r3, lsr #2
+	beq	.L1061
+	rsb	r1, r1, r1, asl #3
+	add	r3, r1, #7
+	cmp	r1, #0
+	movlt	r1, r3
+	ubfx	r1, r1, #3, #16
+.L1061:
+	ldr	r0, .L1068+16
+	sub	r2, r0, #712
+.L1067:
+	bl	_list_pop_index_node
+	movw	r3, #65535
+	uxth	r4, r0
+	cmp	r4, r3
+	bne	.L1062
+	ldr	r3, .L1068+20
+	mov	r1, r4
+	ldr	r0, .L1068+24
+	mov	r2, r6
+	ldrh	r3, [r3]
+	str	r3, [sp]
+	movw	r3, #2276
+	ldrh	r3, [r5, r3]
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #2980]
+	bl	printk
+.L1062:
+	cmp	r7, #0
+	beq	.L1056
+	ldr	r3, .L1068+28
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L1056
+	ldr	r2, [r5, #568]
+	mov	r0, r4, asl #2
+	add	r3, r2, r0
+	ldr	r1, [r2, r4, asl #2]
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	ubfx	r1, r1, #11, #8
+	str	r1, [sp]
+	ldrh	r2, [r2, r0]
+	ldr	r0, .L1068+32
+	ubfx	r2, r2, #0, #11
+	str	r2, [sp, #4]
+	ldr	r1, [r5, #576]
+	mov	r2, r4, asl #1
+	ldrh	r2, [r1, r2]
+	mov	r1, r4
+	str	r2, [sp, #8]
+	mov	r2, r3, lsr #5
+	ubfx	r3, r3, #3, #2
+	bl	printk
+.L1056:
+	mov	r0, r4
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1069:
+	.align	2
+.L1068:
+	.word	.LANCHOR0
+	.word	.LC98
+	.word	.LANCHOR0+2274
+	.word	.LANCHOR0+2984
+	.word	.LANCHOR0+2988
+	.word	.LANCHOR0+2272
+	.word	.LC99
+	.word	.LANCHOR2
+	.word	.LC100
+	.fnend
+	.size	zftl_gc_get_free_sblk, .-zftl_gc_get_free_sblk
+	.align	2
+	.global	zftl_get_free_sblk
+	.type	zftl_get_free_sblk, %function
+zftl_get_free_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #5
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r1
+	ldr	r5, .L1085
+	bne	.L1071
+	movw	r3, #2274
+	ldrh	r1, [r5, r3]
+	movw	r3, #2276
+	ldrh	r2, [r5, r3]
+	cmp	r1, r2
+	bcc	.L1072
+	add	r3, r5, #2272
+	ldrh	r3, [r3]
+	cmp	r2, #0
+	cmpne	r3, r1
+	movhi	r1, #1
+	movls	r1, #0
+	bls	.L1073
+.L1072:
+	ldr	r0, .L1085+4
+	mov	r1, r2, lsr #1
+	b	.L1084
+.L1073:
+	ldr	r0, .L1085+8
+	ldr	r2, .L1085+12
+	b	.L1083
+.L1071:
+	ldr	r2, [r5, #580]
+	movw	r7, #590
+	ldrh	r4, [r2, r7]
+	movw	r2, #65535
+	cmp	r1, #1
+	cmpne	r4, r2
+	beq	.L1075
+	ldr	r0, .L1085+16
+	mov	r1, r4
+	bl	printk
+	ldr	r3, [r5, #580]
+	mvn	r2, #0
+	strh	r2, [r3, r7]	@ movhi
+	b	.L1076
+.L1075:
+	add	r2, r5, #2272
+	movw	r1, #2276
+	ldrh	r1, [r5, r1]
+	mov	r3, r0
+	ldrh	r2, [r2]
+	cmp	r2, r1
+	bcc	.L1077
+	movw	r0, #2274
+	ldrh	r0, [r5, r0]
+	cmp	r1, #0
+	cmpne	r0, r2
+	bls	.L1078
+.L1077:
+	cmp	r6, #1
+	ldr	r0, .L1085+4
+	moveq	r3, r1, lsr #1
+	mov	r1, r3
+.L1084:
+	sub	r2, r0, #712
+	b	.L1083
+.L1078:
+	cmp	r6, #1
+	ldr	r0, .L1085+20
+	moveq	r3, r2, lsr #1
+	sub	r2, r0, #708
+	mov	r1, r3
+.L1083:
+	bl	_list_pop_index_node
+	movw	r3, #65535
+	uxth	r4, r0
+	cmp	r4, r3
+	bne	.L1076
+	ldr	r3, .L1085+24
+	mov	r1, r4
+	ldr	r0, .L1085+28
+	mov	r2, r6
+	ldrh	r3, [r3]
+	str	r3, [sp]
+	movw	r3, #2276
+	ldrh	r3, [r5, r3]
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #2980]
+	bl	printk
+.L1076:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L1086:
+	.align	2
+.L1085:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2988
+	.word	.LANCHOR0+2984
+	.word	.LANCHOR0+2274
+	.word	.LC101
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+2272
+	.word	.LC99
+	.fnend
+	.size	zftl_get_free_sblk, .-zftl_get_free_sblk
+	.align	2
+	.global	zftl_remove_data_node
+	.type	zftl_remove_data_node, %function
+zftl_remove_data_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1092
+	mov	r1, r0
+	ldr	r3, [r3, #568]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	and	r3, r3, #224
+	cmp	r3, #64
+	ldreq	r0, .L1092+4
+	ldreq	r2, .L1092+8
+	beq	.L1091
+.L1088:
+	cmp	r3, #96
+	ldreq	r0, .L1092+12
+	subeq	r2, r0, #668
+	beq	.L1091
+	cmp	r3, #160
+	bxne	lr
+	ldr	r0, .L1092+16
+	ldr	r2, .L1092+20
+.L1091:
+	b	_list_remove_node
+.L1093:
+	.align	2
+.L1092:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2278
+	.word	.LANCHOR0+2948
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2282
+	.fnend
+	.size	zftl_remove_data_node, .-zftl_remove_data_node
+	.align	2
+	.global	zftl_remove_free_node
+	.type	zftl_remove_free_node, %function
+zftl_remove_free_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1098
+	mov	r1, r0
+	ldr	r3, [r2, #568]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	ands	r3, r3, #24
+	addeq	r2, r2, #2272
+	ldreq	r0, .L1098+4
+	beq	.L1097
+	cmp	r3, #16
+	ldrne	r0, .L1098+8
+	ldreq	r0, .L1098+12
+	ldreq	r2, .L1098+16
+	subne	r2, r0, #712
+.L1097:
+	b	_list_remove_node
+.L1099:
+	.align	2
+.L1098:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+2988
+	.word	.LANCHOR0+2984
+	.word	.LANCHOR0+2274
+	.fnend
+	.size	zftl_remove_free_node, .-zftl_remove_free_node
+	.align	2
+	.global	zftl_list_update_data_list
+	.type	zftl_list_update_data_list, %function
+zftl_list_update_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1105
+	mov	r1, r0
+	ldr	r3, [r3, #568]
+	add	r3, r3, r0, asl #2
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	and	r3, r3, #224
+	cmp	r3, #64
+	ldreq	r0, .L1105+4
+	ldreq	r2, .L1105+8
+	beq	.L1104
+.L1101:
+	cmp	r3, #96
+	ldreq	r0, .L1105+12
+	subeq	r2, r0, #668
+	beq	.L1104
+	cmp	r3, #160
+	bxne	lr
+	ldr	r0, .L1105+16
+	ldr	r2, .L1105+20
+.L1104:
+	b	_list_update_data_list
+.L1106:
+	.align	2
+.L1105:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2278
+	.word	.LANCHOR0+2948
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2282
+	.fnend
+	.size	zftl_list_update_data_list, .-zftl_list_update_data_list
+	.align	2
+	.global	print_list_info
+	.type	print_list_info, %function
+print_list_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ldrh	r2, [r1]
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r1, [r4]
+	ldr	r0, .L1112
+	bl	printk
+	ldr	r4, [r4]
+	cmp	r4, #0
+	beq	.L1107
+	ldr	r6, .L1112+4
+	mov	r5, #0
+	ldr	r7, .L1112+8
+.L1110:
+	ldr	r2, [r6, #524]
+	ldrh	r0, [r4, #2]
+	rsb	r2, r2, r4
+	ldr	r1, [r6, #568]
+	ldrh	r3, [r4]
+	mov	r2, r2, asr #1
+	str	r0, [sp]
+	ldrh	r0, [r4, #4]
+	mul	r2, r7, r2
+	str	r0, [sp, #4]
+	uxth	r2, r2
+	mov	ip, r2, asl #2
+	add	lr, r1, ip
+	ldrb	r0, [lr, #2]	@ zero_extendqisi2
+	mov	r0, r0, lsr #5
+	str	r0, [sp, #8]
+	ldrb	r0, [lr, #2]	@ zero_extendqisi2
+	ubfx	r0, r0, #3, #2
+	str	r0, [sp, #12]
+	ldr	r0, [r1, r2, asl #2]
+	ubfx	r0, r0, #11, #8
+	str	r0, [sp, #16]
+	ldrh	r1, [r1, ip]
+	ldr	r0, [r6, #576]
+	ubfx	r1, r1, #0, #11
+	str	r1, [sp, #20]
+	mov	r1, r2, asl #1
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1112+12
+	str	r1, [sp, #24]
+	mov	r1, r5
+	bl	printk
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1107
+	ldr	r3, [r6, #524]
+	mov	r4, #6
+	add	r5, r5, #1
+	mla	r4, r4, r2, r3
+	ldr	r3, .L1112+16
+	uxth	r5, r5
+	ldrh	r3, [r3]
+	cmp	r3, r5
+	bcs	.L1110
+.L1107:
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L1113:
+	.align	2
+.L1112:
+	.word	.LC102
+	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LC103
+	.word	.LANCHOR0+2992
+	.fnend
+	.size	print_list_info, .-print_list_info
+	.align	2
+	.global	dump_all_list_info
+	.type	dump_all_list_info, %function
+dump_all_list_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L1116
+	add	r0, r4, #2976
+	add	r1, r4, #2272
+	add	r0, r0, #4
+	bl	print_list_info
+	add	r0, r4, #2976
+	add	r1, r4, #2272
+	add	r0, r0, #8
+	add	r1, r1, #2
+	bl	print_list_info
+	add	r0, r4, #2976
+	add	r1, r4, #2272
+	add	r0, r0, #12
+	add	r1, r1, #4
+	bl	print_list_info
+	add	r0, r4, #2960
+	add	r1, r4, #2272
+	add	r0, r0, #8
+	add	r1, r1, #6
+	bl	print_list_info
+	add	r0, r4, #2944
+	add	r1, r4, #2272
+	add	r0, r0, #4
+	add	r1, r1, #8
+	bl	print_list_info
+	add	r0, r4, #2944
+	add	r1, r4, #2272
+	add	r0, r0, #12
+	add	r1, r1, #10
+	ldmfd	sp!, {r4, lr}
+	b	print_list_info
+.L1117:
+	.align	2
+.L1116:
+	.word	.LANCHOR0
+	.fnend
+	.size	dump_all_list_info, .-dump_all_list_info
+	.align	2
+	.global	ftl_tmp_into_update
+	.type	ftl_tmp_into_update, %function
+ftl_tmp_into_update:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1123
+	ldr	r3, [r3, #2288]
+	ldr	r2, [r3, #16]
+	cmp	r2, #2048
+	movhi	r0, r2, lsr #11
+	ldrhi	r1, [r3, #20]
+	subhi	r2, r2, r0, asl #11
+	strhi	r2, [r3, #16]
+	ldr	r2, [r3, #24]
+	addhi	r1, r1, r0
+	strhi	r1, [r3, #20]
+	cmp	r2, #2048
+	movhi	r0, r2, lsr #11
+	ldrhi	r1, [r3, #28]
+	subhi	r2, r2, r0, asl #11
+	strhi	r2, [r3, #24]
+	ldr	r2, [r3, #32]
+	addhi	r1, r1, r0
+	strhi	r1, [r3, #28]
+	cmp	r2, #1024
+	movhi	r0, r2, lsr #10
+	ldrhi	r1, [r3, #36]
+	subhi	r2, r2, r0, asl #10
+	strhi	r2, [r3, #32]
+	ldr	r2, [r3, #40]
+	addhi	r1, r1, r0
+	strhi	r1, [r3, #36]
+	cmp	r2, #1024
+	movhi	r0, r2, lsr #10
+	ldrhi	r1, [r3, #44]
+	subhi	r2, r2, r0, asl #10
+	strhi	r2, [r3, #40]
+	addhi	r1, r1, r0
+	strhi	r1, [r3, #44]
+	bx	lr
+.L1124:
+	.align	2
+.L1123:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_tmp_into_update, .-ftl_tmp_into_update
+	.global	__aeabi_idiv
+	.align	2
+	.global	ftl_get_blk_list_in_sblk
+	.type	ftl_get_blk_list_in_sblk, %function
+ftl_get_blk_list_in_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r5, #0
+	ldr	r6, .L1135
+	mov	r10, r0
+	mov	r7, r1
+	mov	r8, r5
+	add	r2, r6, #2928
+	ldr	r4, [r6, #568]
+	mov	r9, r6
+	add	r4, r4, r0, asl #2
+	ldrb	r3, [r4, #3]	@ zero_extendqisi2
+.L1126:
+	ldrb	r1, [r6, #2964]	@ zero_extendqisi2
+	cmp	r8, r1
+	bge	.L1133
+	mov	r1, r3, asr r8
+	tst	r1, #1
+	bne	.L1127
+	ldrb	r4, [r9, #2930]	@ zero_extendqisi2
+	mov	r0, r8
+	str	r2, [sp, #4]
+	mov	fp, r5, asl #1
+	str	r3, [sp]
+	add	r5, r5, #1
+	mov	r1, r4
+	bl	__aeabi_idiv
+	smulbb	r4, r10, r4
+	ldrb	r1, [r9, #676]	@ zero_extendqisi2
+	rsb	r1, r1, #24
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp]
+	ldrh	ip, [r2]
+	rsb	r1, ip, r1
+	add	r0, r4, r0, asl r1
+	uxth	r4, r0
+	strh	r4, [r7, fp]	@ movhi
+	ldrb	r1, [r9, #2930]	@ zero_extendqisi2
+	cmp	r1, #1
+	subhi	r1, r1, #1
+	andhi	r1, r1, r8
+	addhi	r4, r4, r1
+	strhih	r4, [r7, fp]	@ movhi
+.L1127:
+	add	r8, r8, #1
+	b	.L1126
+.L1133:
+	add	r7, r7, r5, asl #1
+	mov	r0, r5
+	mvn	r2, #0
+.L1130:
+	ldrb	r3, [r6, #2964]	@ zero_extendqisi2
+	cmp	r5, r3
+	strlth	r2, [r7], #2	@ movhi
+	addlt	r5, r5, #1
+	blt	.L1130
+.L1134:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1136:
+	.align	2
+.L1135:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_get_blk_list_in_sblk, .-ftl_get_blk_list_in_sblk
+	.align	2
+	.global	ftl_erase_phy_blk
+	.type	ftl_erase_phy_blk, %function
+ftl_erase_phy_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r7, r1
+	ldr	r3, .L1143
+	add	r2, r3, #2928
+	ldrb	r5, [r3, #676]	@ zero_extendqisi2
+	mov	r4, r3
+	ldrh	r2, [r2]
+	rsb	r5, r5, #24
+	rsb	r5, r2, r5
+	mvn	r2, #0
+	mov	r6, r0, asr r5
+	bic	r5, r0, r2, asl r5
+	ldrb	r2, [r3, #2938]	@ zero_extendqisi2
+	uxtb	r6, r6
+	sxth	r5, r5
+	cmp	r2, #0
+	beq	.L1138
+	ldrb	r3, [r3, #2939]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1138
+	movw	r3, #2994
+	clz	r1, r1
+	ldrh	r2, [r4, r3]
+	mov	r0, r6
+	mov	r1, r1, lsr #5
+	mul	r2, r2, r5
+	bl	flash_erase_block_en
+.L1138:
+	movw	r3, #2994
+	mov	r0, r6
+	ldrh	r2, [r4, r3]
+	uxtb	r1, r7
+	mul	r2, r2, r5
+	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	b	flash_erase_block_en
+.L1144:
+	.align	2
+.L1143:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_erase_phy_blk, .-ftl_erase_phy_blk
+	.align	2
+	.global	ftl_erase_sblk
+	.type	ftl_erase_sblk, %function
+ftl_erase_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1174
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	ip, .L1174+4
+	mov	r9, r0, asl #2
+	ldr	r3, [r2]
+	mov	r7, r1
+	mov	r8, r0
+	mov	r5, #0
+	mov	r6, ip
+	mov	r10, ip
+	str	r3, [sp, #84]
+	ldr	r3, [ip, #568]
+	str	r2, [sp, #8]
+	add	r1, r3, r9
+	ldrb	r3, [r1, #3]	@ zero_extendqisi2
+	str	r3, [sp, #4]
+.L1146:
+	ldrb	r2, [r6, #2996]	@ zero_extendqisi2
+	ldr	r3, .L1174+4
+	cmp	r5, r2
+	bge	.L1157
+	ldrb	r2, [r10, #2930]	@ zero_extendqisi2
+	mov	r4, #0
+	sub	r3, r2, #1
+	str	r3, [sp]
+	ldr	r3, .L1174+8
+	mul	lr, r2, r5
+	mul	ip, r2, r8
+	ldrh	r3, [r3]
+	mov	r0, r3
+	mov	r3, r4
+.L1158:
+	cmp	r3, r2
+	bge	.L1173
+	ldr	fp, [sp, #4]
+	add	r1, r3, lr
+	mov	r1, fp, asr r1
+	tst	r1, #1
+	bne	.L1147
+	add	r1, sp, #88
+	add	fp, r1, r4, asl #2
+	ldr	r1, [sp]
+	add	r4, r4, #1
+	and	r1, r3, r1
+	add	r1, ip, r1
+	mul	r1, r0, r1
+	str	r1, [fp, #-68]
+.L1147:
+	add	r3, r3, #1
+	b	.L1158
+.L1173:
+	cmp	r2, #4
+	bne	.L1171
+	uxtb	r3, r5
+	uxtb	ip, r7
+	mov	fp, #0
+.L1149:
+	cmp	fp, r4
+	beq	.L1152
+	add	r2, sp, #20
+	mov	r0, r3
+	mov	r1, ip
+	str	r3, [sp, #12]
+	ldr	r2, [r2, fp, asl #2]
+	add	fp, fp, #1
+	str	ip, [sp]
+	bl	flash_erase_block_en
+	ldr	ip, [sp]
+	ldr	r3, [sp, #12]
+	b	.L1149
+.L1171:
+	cmp	r4, #2
+	bne	.L1153
+	ldrb	r3, [r6, #2938]	@ zero_extendqisi2
+	uxtb	r4, r5
+	cmp	r3, #0
+	beq	.L1154
+	ldrb	r3, [r10, #2939]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1154
+	clz	r1, r7
+	mov	r0, r4
+	ldr	r2, [sp, #20]
+	mov	r1, r1, lsr #5
+	ldr	r3, [sp, #24]
+	bl	flash_erase_duplane_block
+.L1154:
+	mov	r0, r4
+	uxtb	r1, r7
+	ldr	r2, [sp, #20]
+	ldr	r3, [sp, #24]
+	bl	flash_erase_duplane_block
+	b	.L1152
+.L1153:
+	cmp	r4, #1
+	bne	.L1152
+	ldrb	r3, [r6, #2938]	@ zero_extendqisi2
+	uxtb	r4, r5
+	cmp	r3, #0
+	beq	.L1156
+	ldrb	r3, [r10, #2939]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1156
+	clz	r1, r7
+	mov	r0, r4
+	ldr	r2, [sp, #20]
+	mov	r1, r1, lsr #5
+	bl	flash_erase_block_en
+.L1156:
+	mov	r0, r4
+	uxtb	r1, r7
+	ldr	r2, [sp, #20]
+	bl	flash_erase_block_en
+.L1152:
+	add	r5, r5, #1
+	b	.L1146
+.L1157:
+	cmp	r7, #0
+	ldr	r0, [r3, #568]
+	bne	.L1159
+	ldrh	r2, [r0, r9]
+	ubfx	r1, r2, #0, #11
+	add	r1, r1, #1
+	bfi	r2, r1, #0, #11
+	strh	r2, [r0, r9]	@ movhi
+	ldr	r2, [r3, #2288]
+	ldr	r3, [r3, #568]
+	ldr	r1, [r2, #84]
+	ldrh	r0, [r2, #96]
+	add	r1, r1, #1
+	str	r1, [r2, #84]
+	ldrh	r3, [r3, r9]
+	ubfx	r3, r3, #0, #11
+	uxth	r1, r3
+	cmp	r0, r1
+	strlth	r3, [r2, #96]	@ movhi
+	b	.L1161
+.L1159:
+	ldr	r2, [r0, r8, asl #2]
+	ubfx	r1, r2, #11, #8
+	add	r1, r1, #1
+	bfi	r2, r1, #11, #8
+	str	r2, [r0, r8, asl #2]
+	ldr	r2, [r3, #2288]
+	ldr	r3, [r3, #568]
+	ldr	r1, [r2, #80]
+	add	r1, r1, #1
+	str	r1, [r2, #80]
+	ldr	r3, [r3, r8, asl #2]
+	ldrh	r1, [r2, #98]
+	ubfx	r3, r3, #11, #8
+	cmp	r1, r3
+	strcch	r3, [r2, #98]	@ movhi
+.L1161:
+	ldr	r3, [sp, #8]
+	mov	r0, #0
+	ldr	r2, [sp, #84]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1163
+	bl	__stack_chk_fail
+.L1163:
+	add	sp, sp, #92
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1175:
+	.align	2
+.L1174:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2994
+	.fnend
+	.size	ftl_erase_sblk, .-ftl_erase_sblk
+	.align	2
+	.global	ftl_alloc_sys_blk
+	.type	ftl_alloc_sys_blk, %function
+ftl_alloc_sys_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1187
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r2, [r3, #2288]
+	mov	r4, r3
+	ldrh	r1, [r2, #136]
+	cmp	r1, #63
+	movhi	r3, #0
+	strhih	r3, [r2, #136]	@ movhi
+	ldrh	r3, [r2, #112]
+	cmp	r3, #0
+	bne	.L1178
+	ldr	r1, .L1187+4
+	movw	r2, #1140
+	ldr	r0, .L1187+8
+	bl	printk
+	bl	dump_stack
+.L1178:
+	ldr	r3, [r4, #2288]
+	movw	lr, #65535
+	mov	ip, #0
+.L1182:
+	ldrh	r2, [r3, #136]
+	add	r1, r2, #79
+	add	r1, r3, r1, asl #1
+.L1179:
+	cmp	r2, #63
+	bgt	.L1186
+	ldrh	r0, [r1, #2]!
+	cmp	r0, lr
+	bne	.L1184
+	add	r2, r2, #1
+	b	.L1179
+.L1186:
+	strh	ip, [r3, #136]	@ movhi
+	b	.L1182
+.L1184:
+	add	r1, r3, r2, asl #1
+	mvn	ip, #0
+	strh	ip, [r1, #160]	@ movhi
+	strh	r2, [r3, #136]	@ movhi
+	ldrh	r2, [r3, #112]
+	add	r2, r2, ip
+	strh	r2, [r3, #112]	@ movhi
+	ldmfd	sp!, {r4, pc}
+.L1188:
+	.align	2
+.L1187:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1232
+	.word	.LC0
+	.fnend
+	.size	ftl_alloc_sys_blk, .-ftl_alloc_sys_blk
+	.align	2
+	.global	ftl_free_sys_blk
+	.type	ftl_free_sys_blk, %function
+ftl_free_sys_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	ldr	r3, .L1199
+	ldr	r2, [r3, #2288]
+	mov	r4, r3
+	ldrh	r1, [r2, #138]
+	cmp	r1, #63
+	movhi	r3, #0
+	strhih	r3, [r2, #138]	@ movhi
+	ldrh	r3, [r2, #112]
+	cmp	r3, #63
+	bls	.L1191
+	ldr	r1, .L1199+4
+	movw	r2, #1164
+	ldr	r0, .L1199+8
+	bl	printk
+	bl	dump_stack
+.L1191:
+	ldr	r3, [r4, #2288]
+	movw	ip, #65535
+	mov	r0, #0
+.L1195:
+	ldrh	r2, [r3, #138]
+	add	r1, r2, #79
+	add	r1, r3, r1, asl #1
+.L1192:
+	cmp	r2, #63
+	bgt	.L1198
+	ldrh	lr, [r1, #2]!
+	cmp	lr, ip
+	bne	.L1193
+	add	r1, r3, r2, asl #1
+	strh	r5, [r1, #160]	@ movhi
+	strh	r2, [r3, #138]	@ movhi
+	ldrh	r2, [r3, #112]
+	add	r2, r2, #1
+	strh	r2, [r3, #112]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1193:
+	add	r2, r2, #1
+	b	.L1192
+.L1198:
+	strh	r0, [r3, #138]	@ movhi
+	b	.L1195
+.L1200:
+	.align	2
+.L1199:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1252
+	.word	.LC0
+	.fnend
+	.size	ftl_free_sys_blk, .-ftl_free_sys_blk
+	.align	2
+	.global	ftl_info_data_recovery
+	.type	ftl_info_data_recovery, %function
+ftl_info_data_recovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r3, #65535
+	ldrh	r6, [r0]
+	cmp	r6, r3
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, pc}
+	ldr	r4, .L1211
+	mov	r8, r6, asl #2
+	ldr	r5, [r4, #568]
+	add	r7, r5, r8
+	ldrb	r3, [r7, #2]	@ zero_extendqisi2
+	tst	r3, #224
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, pc}
+	ldrb	r2, [r0, #4]	@ zero_extendqisi2
+	mov	r0, r6
+	bfi	r3, r2, #5, #3
+	strb	r3, [r7, #2]
+	bl	zftl_remove_free_node
+	ldrb	r3, [r7, #2]	@ zero_extendqisi2
+	ldr	r2, [r4, #2288]
+	tst	r3, #8
+	ldrneh	r3, [r2, #116]
+	subne	r3, r3, #1
+	strneh	r3, [r2, #116]	@ movhi
+	bne	.L1206
+	tst	r3, #24
+	ldreqh	r3, [r2, #114]
+	ldrneh	r3, [r2, #118]
+	subeq	r3, r3, #1
+	subne	r3, r3, #1
+	streqh	r3, [r2, #114]	@ movhi
+	strneh	r3, [r2, #118]	@ movhi
+.L1206:
+	ldrb	r3, [r7, #2]	@ zero_extendqisi2
+	and	r3, r3, #224
+	cmp	r3, #160
+	bne	.L1208
+	ldr	r3, [r5, r6, asl #2]
+	ubfx	r2, r3, #11, #8
+	add	r2, r2, #1
+	bfi	r3, r2, #11, #8
+	str	r3, [r5, r6, asl #2]
+	ldr	r2, [r4, #2288]
+	ldrh	r3, [r2, #120]
+	sub	r3, r3, #1
+	strh	r3, [r2, #120]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1208:
+	ldrh	r2, [r5, r8]
+	cmp	r3, #64
+	ubfx	r1, r2, #0, #11
+	add	r1, r1, #1
+	bfi	r2, r1, #0, #11
+	strh	r2, [r5, r8]	@ movhi
+	bne	.L1209
+	ldr	r2, [r4, #2288]
+	ldrh	r3, [r2, #122]
+	sub	r3, r3, #1
+	strh	r3, [r2, #122]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1209:
+	cmp	r3, #96
+	ldreq	r2, [r4, #2288]
+	ldreqh	r3, [r2, #124]
+	subeq	r3, r3, #1
+	streqh	r3, [r2, #124]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1212:
+	.align	2
+.L1211:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_info_data_recovery, .-ftl_info_data_recovery
+	.align	2
+	.global	ftl_get_ppa_from_index
+	.type	ftl_get_ppa_from_index, %function
+ftl_get_ppa_from_index:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldr	r6, .L1218
+	add	r3, r6, #2960
+	ldrb	r2, [r6, #2964]	@ zero_extendqisi2
+	ldrh	r3, [r3]
+	ldr	r5, [r6, #580]
+	mul	r1, r2, r3
+	cmp	r0, r1
+	addlt	r5, r5, #16
+	addge	r5, r5, #48
+	smulbbge	r3, r2, r3
+	ldrb	r7, [r5, #9]	@ zero_extendqisi2
+	rsbge	r4, r3, r0
+	mov	r1, r7
+	uxthge	r4, r4
+	mov	r0, r4
+	bl	__aeabi_idiv
+	movw	r3, #65535
+	smulbb	r7, r0, r7
+	mov	r8, r0
+	rsb	r4, r7, r4
+	uxth	r4, r4
+	add	r5, r5, r4, asl #1
+	ldrh	r4, [r5, #16]
+	cmp	r4, r3
+	bne	.L1216
+	ldr	r1, .L1218+4
+	movw	r2, #1686
+	ldr	r0, .L1218+8
+	bl	printk
+	bl	dump_stack
+.L1216:
+	movw	r3, #2994
+	ldrh	r0, [r6, r3]
+	mla	r0, r0, r4, r8
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1219:
+	.align	2
+.L1218:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1272
+	.word	.LC0
+	.fnend
+	.size	ftl_get_ppa_from_index, .-ftl_get_ppa_from_index
+	.align	2
+	.global	lpa_hash_get_ppa
+	.type	lpa_hash_get_ppa, %function
+lpa_hash_get_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	uxtb	r3, r0
+	ldr	r2, .L1226
+	ldr	r1, .L1226+4
+	mov	r3, r3, asl #1
+	str	lr, [sp, #-4]!
+	.save {lr}
+	ldrh	r3, [r1, r3]
+	ldr	ip, [r2, #3516]
+	ldr	r1, [r2, #3512]
+	movw	r2, #65535
+.L1221:
+	cmp	r3, r2
+	beq	.L1225
+	ldr	lr, [r1, r3, asl #2]
+	cmp	lr, r0
+	bne	.L1222
+	mov	r0, r3
+	ldr	lr, [sp], #4
+	b	ftl_get_ppa_from_index
+.L1222:
+	mov	r3, r3, asl #1
+	ldrh	r3, [ip, r3]
+	b	.L1221
+.L1225:
+	mvn	r0, #0
+	ldr	pc, [sp], #4
+.L1227:
+	.align	2
+.L1226:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3000
+	.fnend
+	.size	lpa_hash_get_ppa, .-lpa_hash_get_ppa
+	.align	2
+	.global	ftl_get_new_free_page
+	.type	ftl_get_new_free_page, %function
+ftl_get_new_free_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	movw	r3, #65535
+	ldrh	r2, [r0]
+	mov	r4, r0
+	cmp	r2, r3
+	bne	.L1229
+	ldr	r1, .L1238
+	movw	r2, #1809
+	ldr	r0, .L1238+4
+	bl	printk
+	bl	dump_stack
+.L1229:
+	ldr	r3, .L1238+8
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bne	.L1230
+	ldr	r1, .L1238
+	movw	r2, #1810
+	ldr	r0, .L1238+4
+	bl	printk
+	bl	dump_stack
+.L1230:
+	ldrh	r3, [r4, #6]
+	cmp	r3, #0
+	bne	.L1231
+	ldr	r1, .L1238
+	movw	r2, #1811
+	ldr	r0, .L1238+4
+	bl	printk
+	bl	dump_stack
+.L1231:
+	ldrb	r3, [r4, #5]	@ zero_extendqisi2
+	movw	r2, #65535
+	ldr	r1, .L1238+12
+	mov	lr, #0
+	add	r3, r4, r3, asl #1
+	ldrb	r0, [r1, #2964]	@ zero_extendqisi2
+	ldrh	ip, [r3, #16]
+.L1232:
+	cmp	ip, r2
+	ldrb	r3, [r4, #5]	@ zero_extendqisi2
+	bne	.L1237
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #5]
+	cmp	r3, r0
+	streqb	lr, [r4, #5]
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	ldrb	r3, [r4, #5]	@ zero_extendqisi2
+	add	r3, r4, r3, asl #1
+	ldrh	ip, [r3, #16]
+	b	.L1232
+.L1237:
+	movw	r0, #2994
+	add	r3, r3, #1
+	ldrh	r0, [r1, r0]
+	ldrb	r1, [r1, #2964]	@ zero_extendqisi2
+	uxtb	r3, r3
+	ldrh	r2, [r4, #2]
+	mul	r0, r0, ip
+	ldrh	ip, [r4, #6]
+	cmp	r1, r3
+	strb	r3, [r4, #5]
+	sub	ip, ip, #1
+	strh	ip, [r4, #6]	@ movhi
+	ldrh	ip, [r4, #10]
+	orr	r0, r0, r2
+	moveq	r3, #0
+	addeq	r2, r2, #1
+	add	ip, ip, #1
+	strh	ip, [r4, #10]	@ movhi
+	streqh	r2, [r4, #2]	@ movhi
+	streqb	r3, [r4, #5]
+	ldmfd	sp!, {r4, pc}
+.L1239:
+	.align	2
+.L1238:
+	.word	.LANCHOR1+1296
+	.word	.LC0
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_get_new_free_page, .-ftl_get_new_free_page
+	.align	2
+	.global	ftl_ext_alloc_new_blk
+	.type	ftl_ext_alloc_new_blk, %function
+ftl_ext_alloc_new_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	bl	ftl_alloc_sys_blk
+	movw	r2, #65533
+	sub	r3, r0, #1
+	mov	r4, r0
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L1241
+	ldr	r1, .L1243
+	movw	r2, #1842
+	ldr	r0, .L1243+4
+	bl	printk
+	bl	dump_stack
+.L1241:
+	ldr	r5, .L1243+8
+	mov	r1, #0
+	mov	r0, r4
+	bl	ftl_erase_phy_blk
+	ldr	r3, [r5, #2288]
+	ldrh	r0, [r3, #130]
+	bl	ftl_free_sys_blk
+	ldr	r3, [r5, #2288]
+	mov	r0, #0
+	strh	r4, [r3, #130]	@ movhi
+	strh	r0, [r3, #140]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1244:
+	.align	2
+.L1243:
+	.word	.LANCHOR1+1320
+	.word	.LC0
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_ext_alloc_new_blk, .-ftl_ext_alloc_new_blk
+	.align	2
+	.global	ftl_total_vpn_update
+	.type	ftl_total_vpn_update, %function
+ftl_total_vpn_update:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1258
+	add	r1, r3, #3520
+	ldrh	r2, [r1]
+	cmp	r2, #4
+	cmpls	r0, #0
+	addeq	r2, r2, #1
+	streqh	r2, [r1]	@ movhi
+	bxeq	lr
+	add	ip, r3, #564
+	mov	r0, #0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movw	r6, #65535
+	ldrh	lr, [ip]
+	mov	ip, r0
+	strh	r0, [r1]	@ movhi
+	ldr	r2, [r3, #568]
+	ldr	r1, [r3, #576]
+	add	lr, r2, lr, asl #2
+	sub	r1, r1, #2
+.L1248:
+	cmp	r2, lr
+	beq	.L1257
+	ldrh	r4, [r1, #2]!
+	cmp	r4, r6
+	beq	.L1249
+	ldrb	r5, [r2, #2]	@ zero_extendqisi2
+	and	r5, r5, #224
+	cmp	r5, #160
+	addeq	r0, r0, r4
+	addne	ip, ip, r4
+.L1249:
+	add	r2, r2, #4
+	b	.L1248
+.L1257:
+	ldr	r4, [r3, #580]
+	ldr	r3, [r3, #2288]
+	str	ip, [r4, #524]
+	str	r0, [r4, #528]
+	ldrh	r1, [r3, #120]
+	cmp	r1, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	bl	__aeabi_uidiv
+	str	r0, [r4, #532]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1259:
+	.align	2
+.L1258:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_total_vpn_update, .-ftl_total_vpn_update
+	.align	2
+	.global	ftl_debug_info_fill
+	.type	ftl_debug_info_fill, %function
+ftl_debug_info_fill:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r0, #0
+	bx	lr
+	.fnend
+	.size	ftl_debug_info_fill, .-ftl_debug_info_fill
+	.align	2
+	.global	ftl_vpn_update
+	.type	ftl_vpn_update, %function
+ftl_vpn_update:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	bl	zftl_list_update_data_list
+	ldr	r3, .L1265
+	mov	r4, r4, asl #1
+	ldr	r2, [r3, #576]
+	ldrh	r2, [r2, r4]
+	cmp	r2, #0
+	moveq	r0, #1
+	movne	r0, #0
+	streq	r0, [r3, #2304]
+	ldmfd	sp!, {r4, pc}
+.L1266:
+	.align	2
+.L1265:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_vpn_update, .-ftl_vpn_update
+	.align	2
+	.global	ftl_vpn_decrement
+	.type	ftl_vpn_decrement, %function
+ftl_vpn_decrement:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r3, #65535
+	cmp	r0, r3
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldr	r6, .L1277
+	beq	.L1268
+	ldr	r2, [r6, #576]
+	mov	r3, r0, asl #1
+	ldrh	r4, [r2, r3]
+	cmp	r4, #0
+	subne	r4, r4, #1
+	strneh	r4, [r2, r3]	@ movhi
+	bne	.L1268
+	ldr	r3, [r6, #568]
+	mov	r1, r5
+	mov	r2, r4
+	add	r3, r3, r0, asl #2
+	ldr	r0, .L1277+4
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	mov	r3, r3, lsr #5
+	bl	printk
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1268:
+	movw	r3, #2908
+	ldr	r4, .L1277
+	ldrh	r0, [r6, r3]
+	cmp	r0, r5
+	beq	.L1274
+	movw	r2, #65535
+	cmp	r0, r2
+	streqh	r5, [r4, r3]	@ movhi
+	beq	.L1274
+	bl	ftl_vpn_update
+	movw	r2, #3522
+	ldrh	r3, [r4, r2]
+	ldr	r1, .L1277+8
+	add	r3, r3, #1
+	uxth	r3, r3
+	adds	r0, r0, #0
+	movne	r0, #1
+	cmp	r3, #7
+	movhi	r3, #0
+	strh	r3, [r4, r2]	@ movhi
+	movw	r3, #3522
+	movw	r2, #2908
+	ldrh	r3, [r6, r3]
+	ldrh	ip, [r6, r2]
+	strh	r5, [r6, r2]	@ movhi
+	mov	r3, r3, asl #1
+	strh	ip, [r1, r3]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1274:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1278:
+	.align	2
+.L1277:
+	.word	.LANCHOR0
+	.word	.LC104
+	.word	.LANCHOR0+2912
+	.fnend
+	.size	ftl_vpn_decrement, .-ftl_vpn_decrement
+	.align	2
+	.global	lpa_hash_update_ppa
+	.type	lpa_hash_update_ppa, %function
+lpa_hash_update_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	uxtb	r6, r0
+	ldr	r3, .L1291
+	movw	r4, #65535
+	ldr	ip, .L1291+4
+	mov	r6, r6, asl #1
+	mov	r8, r4
+	ldr	r7, [r3, #3512]
+	ldrh	lr, [ip, r6]
+	ldr	r9, [r3, #3516]
+.L1280:
+	cmp	lr, r8
+	beq	.L1284
+	ldr	r5, [r7, lr, asl #2]
+	add	r10, r7, lr, asl #2
+	cmp	r5, r0
+	mov	r5, lr, asl #1
+	bne	.L1281
+	mvn	lr, #0
+	str	lr, [r10]
+	movw	lr, #65535
+	cmp	r4, lr
+	ldr	lr, [r3, #3516]
+	movne	r4, r4, asl #1
+	ldreqh	lr, [lr, r5]
+	ldrneh	r7, [lr, r5]
+	streqh	lr, [ip, r6]	@ movhi
+	strneh	r7, [lr, r4]	@ movhi
+	mvn	r4, #0
+	ldr	lr, [r3, #3516]
+	strh	r4, [lr, r5]	@ movhi
+	b	.L1284
+.L1281:
+	mov	r4, lr
+	ldrh	lr, [r9, r5]
+	b	.L1280
+.L1284:
+	ldr	r4, [r3, #3512]
+	cmn	r1, #1
+	ldr	lr, .L1291
+	str	r0, [r4, r2, asl #2]
+	ldrh	r0, [ip, r6]
+	ldr	r3, [r3, #3516]
+	strh	r2, [ip, r6]	@ movhi
+	mov	r2, r2, asl #1
+	strh	r0, [r3, r2]	@ movhi
+	beq	.L1286
+	add	r3, lr, #2928
+	ldrh	r0, [r3]
+	ldrb	r3, [lr, #676]	@ zero_extendqisi2
+	mov	r1, r1, lsr r0
+	rsb	r3, r3, #24
+	rsb	r3, r0, r3
+	mvn	r0, #0
+	bic	r0, r1, r0, asl r3
+	ldrb	r1, [lr, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	bl	ftl_vpn_decrement
+.L1286:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L1292:
+	.align	2
+.L1291:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3000
+	.fnend
+	.size	lpa_hash_update_ppa, .-lpa_hash_update_ppa
+	.align	2
+	.global	ftl_mask_bad_block
+	.type	ftl_mask_bad_block, %function
+ftl_mask_bad_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1301
+	mov	r3, #1
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	add	r2, r2, #2928
+	ldrb	r5, [r2, #2]	@ zero_extendqisi2
+	ldrb	r4, [r2, #-2252]	@ zero_extendqisi2
+	ldrh	r2, [r2]
+	rsb	r1, r4, #24
+	mov	r4, r3, asl r4
+	sub	r4, r4, #1
+	and	r4, r4, r0, lsr r1
+	rsb	r1, r2, r1
+	mov	r3, r3, asl r1
+	mov	r1, r5
+	sub	r3, r3, #1
+	uxtb	r4, r4
+	and	r0, r3, r0, lsr r2
+	smulbb	r6, r4, r5
+	uxth	r8, r0
+	bl	__aeabi_uidiv
+	cmp	r5, #1
+	subhi	r3, r5, #1
+	uxtb	r6, r6
+	andhi	r3, r3, r8
+	uxth	r7, r0
+	addhi	r3, r6, r3
+	uxtbhi	r6, r3
+	ldr	r3, .L1301+4
+	ldr	r3, [r3]
+	tst	r3, #16384
+	beq	.L1295
+	str	r8, [sp]
+	mov	r1, r4
+	ldr	r0, .L1301+8
+	mov	r2, r6
+	mov	r3, r7
+	bl	printk
+.L1295:
+	ldr	r3, .L1301
+	add	r2, r3, #564
+	ldrh	r2, [r2]
+	cmp	r2, r7
+	ldrhi	r4, [r3, #568]
+	movhi	r2, #1
+	addhi	r4, r4, r7, asl #2
+	ldrhib	r3, [r4, #3]	@ zero_extendqisi2
+	orrhi	r6, r3, r2, asl r6
+	strhib	r6, [r4, #3]
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1302:
+	.align	2
+.L1301:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC105
+	.fnend
+	.size	ftl_mask_bad_block, .-ftl_mask_bad_block
+	.align	2
+	.global	gc_free_bad_sblk
+	.type	gc_free_bad_sblk, %function
+gc_free_bad_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r10, .L1318
+	ldr	r3, [r10, #2892]
+	cmp	r3, #0
+	beq	.L1314
+	ldr	r7, .L1318+4
+	mov	r9, r0
+	mov	fp, #0
+	mov	r8, r7
+.L1304:
+	ldrb	r3, [r10, #2964]	@ zero_extendqisi2
+	uxth	r0, fp
+	ldr	r6, .L1318
+	cmp	r3, r0
+	bls	.L1314
+	ldrb	r2, [r6, #2930]	@ zero_extendqisi2
+	add	r6, r6, #2928
+	mov	r1, r2
+	uxth	r4, r2
+	str	r2, [sp]
+	bl	__aeabi_idiv
+	ldrb	r3, [r6, #-2252]	@ zero_extendqisi2
+	smulbb	r5, r9, r4
+	ldrh	r1, [r6]
+	rsb	r3, r3, #24
+	ldr	ip, .L1318
+	rsb	r3, r1, r3
+	ldr	r2, [sp]
+	add	r0, r5, r0, asl r3
+	cmp	r2, #1
+	uxth	r5, r0
+	subhi	r4, r4, #1
+	mov	r2, #0
+	andhi	r4, r4, fp
+	addhi	r5, r5, r4
+	uxthhi	r5, r5
+.L1306:
+	ldr	r3, [r10, #2892]
+	uxth	r4, r2
+	cmp	r4, r3
+	bcs	.L1316
+	add	r3, r4, #292
+	mov	r3, r3, asl #1
+	ldrh	r3, [r7, r3]
+	cmp	r3, r5
+	bne	.L1307
+	mov	r1, r5
+	ldr	r0, .L1318+8
+	stmia	sp, {r2, ip}
+	bl	printk
+	ldrh	r0, [r6]
+	mov	r0, r5, asl r0
+	bl	ftl_mask_bad_block
+	ldr	ip, [sp, #4]
+	ldr	r2, [sp]
+	ldr	r1, [ip, #2892]
+.L1308:
+	cmp	r4, r1
+	bcs	.L1317
+	add	r3, r4, #292
+	add	r3, r3, #1
+	mov	r3, r3, asl #1
+	ldrh	r0, [r8, r3]
+	add	r3, r4, #292
+	add	r4, r4, #1
+	mov	r3, r3, asl #1
+	uxth	r4, r4
+	strh	r0, [r8, r3]	@ movhi
+	b	.L1308
+.L1317:
+	sub	r1, r1, #1
+	str	r1, [r10, #2892]
+.L1307:
+	add	r2, r2, #1
+	b	.L1306
+.L1316:
+	add	fp, fp, #1
+	b	.L1304
+.L1314:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1319:
+	.align	2
+.L1318:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2312
+	.word	.LC106
+	.fnend
+	.size	gc_free_bad_sblk, .-gc_free_bad_sblk
+	.align	2
+	.global	ftl_free_sblk
+	.type	ftl_free_sblk, %function
+ftl_free_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r2, r0, asl #2
+	ldr	r5, .L1342
+	.pad #20
+	sub	sp, sp, #20
+	mov	r6, r0
+	ldr	r7, [r5, #568]
+	add	r9, r7, r2
+	ldrb	r4, [r9, #2]	@ zero_extendqisi2
+	tst	r4, #8
+	mov	r3, r4, lsr #5
+	str	r3, [sp]
+	beq	.L1322
+	ldr	r8, [r5, #2288]
+	add	r1, r5, #572
+	ldrh	fp, [r7, r2]
+	ldr	r10, [r7, r0, asl #2]
+	ldrh	ip, [r8, #74]
+	ubfx	fp, fp, #0, #11
+	ldrh	r3, [r8, #72]
+	ubfx	r10, r10, #11, #8
+	add	ip, fp, ip
+	ldrh	r8, [r1]
+	add	r3, r10, r3
+	str	r2, [sp, #12]
+	uxth	ip, ip
+	str	ip, [sp, #4]
+	mov	r1, r8
+	uxth	r3, r3
+	mov	r0, ip
+	str	r3, [sp, #8]
+	bl	__aeabi_uidiv
+	movw	r1, #3524
+	ldrh	r1, [r5, r1]
+	ldr	r3, [sp, #8]
+	ldr	ip, [sp, #4]
+	uxtah	r0, r3, r0
+	ldr	r2, [sp, #12]
+	cmp	r0, r1
+	ble	.L1323
+	movw	r3, #2282
+	movw	r1, #2274
+	ldrh	r3, [r5, r3]
+	ldrh	r1, [r5, r1]
+	add	r1, r3, r1
+	add	r3, r5, #2976
+	ldrh	r3, [r3]
+	add	r3, r3, #8
+	cmp	r1, r3
+	blt	.L1329
+	add	r1, r5, #2272
+	movw	r3, #2278
+	ldrh	r3, [r5, r3]
+	ldrh	r1, [r1]
+	add	r3, r3, r1
+	movw	r1, #2280
+	ldrh	r1, [r5, r1]
+	add	r3, r3, r1
+	movw	r1, #3526
+	ldrh	r1, [r5, r1]
+	add	r1, r1, #8
+	b	.L1341
+.L1323:
+	mla	r3, r8, r3, ip
+	movw	r1, #3528
+	ldrh	r1, [r5, r1]
+	cmp	r3, r1
+	ble	.L1325
+	add	r1, r5, #2272
+	movw	r3, #2278
+	ldrh	r3, [r5, r3]
+	ldrh	r1, [r1]
+	add	r3, r3, r1
+	movw	r1, #2280
+	ldrh	r1, [r5, r1]
+	add	r3, r3, r1
+	movw	r1, #3526
+	ldrh	r1, [r5, r1]
+	add	r0, r1, #8
+	cmp	r3, r0
+	blt	.L1339
+	movw	r0, #2282
+	ldrh	ip, [r5, r0]
+	movw	r0, #2274
+	ldrh	r0, [r5, r0]
+	add	r5, r5, #2976
+	add	r0, ip, r0
+	ldrh	ip, [r5]
+	add	ip, ip, #8
+	cmp	r0, ip
+	blt	.L1329
+	add	r1, r1, #24
+.L1341:
+	cmp	r3, r1
+	bge	.L1329
+.L1339:
+	bfc	r4, #3, #2
+	b	.L1338
+.L1329:
+	mov	r3, #2
+	bfi	r4, r3, #3, #2
+.L1338:
+	strb	r4, [r9, #2]
+.L1325:
+	ldrb	r3, [r9, #2]	@ zero_extendqisi2
+	ands	r3, r3, #24
+	bne	.L1330
+	mul	r8, r8, r10
+	ldrh	r3, [r7, r2]
+	mov	r10, r10, lsr #3
+	add	r8, r8, r8, asl #1
+	add	fp, fp, r8, asr #2
+	bfi	r3, fp, #0, #11
+	strh	r3, [r7, r2]	@ movhi
+	ldr	r4, [r7, r6, asl #2]
+	bfi	r4, r10, #11, #8
+	str	r4, [r7, r6, asl #2]
+	b	.L1322
+.L1330:
+	cmp	r3, #16
+	bne	.L1322
+	mov	r0, fp
+	mov	r1, r8
+	str	r2, [sp, #4]
+	bl	__aeabi_idiv
+	ldr	r3, [r7, r6, asl #2]
+	mov	fp, fp, asr #5
+	add	r0, r0, r0, asl #1
+	add	r10, r10, r0, asr #2
+	bfi	r3, r10, #11, #8
+	str	r3, [r7, r6, asl #2]
+	ldr	r2, [sp, #4]
+	ldrh	r3, [r7, r2]
+	bfi	r3, fp, #0, #11
+	strh	r3, [r7, r2]	@ movhi
+.L1322:
+	mov	r0, r6
+	str	r2, [sp, #4]
+	bl	zftl_remove_data_node
+	ldr	r3, .L1342
+	mov	r0, #0
+	ldr	r1, [r3, #568]
+	mov	r4, r3
+	ldr	r2, [sp, #4]
+	add	r2, r1, r2
+	ldrb	r1, [r2, #2]	@ zero_extendqisi2
+	bfc	r1, #5, #3
+	strb	r1, [r2, #2]
+	ldr	r1, [r3, #576]
+	mov	r2, r6, asl #1
+	strh	r0, [r1, r2]	@ movhi
+	ldr	r2, [sp]
+	add	r1, r2, #6
+	and	r1, r1, #7
+	cmp	r1, #4
+	bhi	.L1332
+	mov	r0, r6
+	bl	gc_free_bad_sblk
+.L1332:
+	ldrb	r3, [r9, #2]	@ zero_extendqisi2
+	tst	r3, #8
+	beq	.L1333
+	ldr	r3, [r4, #580]
+	movw	r2, #586
+	ldrh	r1, [r3, r2]
+	cmp	r1, r6
+	bne	.L1333
+	mvn	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+	movw	r2, #590
+	movw	r1, #65535
+	ldrh	r0, [r3, r2]
+	cmp	r0, r1
+	bne	.L1333
+	strh	r6, [r3, r2]	@ movhi
+	mov	r1, r6
+	ldr	r0, .L1342+4
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	printk
+.L1333:
+	mov	r0, r6
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	zftl_insert_free_list
+.L1343:
+	.align	2
+.L1342:
+	.word	.LANCHOR0
+	.word	.LC107
+	.fnend
+	.size	ftl_free_sblk, .-ftl_free_sblk
+	.align	2
+	.global	gc_free_src_blk
+	.type	gc_free_src_blk, %function
+gc_free_src_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #0
+	ldr	r6, .L1383
+	ldr	r8, .L1383+4
+	mov	r7, r6
+.L1345:
+	ldrh	r2, [r8, #52]
+	uxth	r3, r5
+	cmp	r2, r3
+	bls	.L1382
+	add	r3, r8, r3, asl #1
+	ldrh	r4, [r3, #54]
+	ldr	r3, [r6, #576]
+	mov	r9, r4, asl #1
+	ldrh	r2, [r3, r9]
+	cmp	r2, #0
+	beq	.L1346
+	ldr	r0, .L1383+8
+	mov	r1, r4
+	bl	printk
+.L1346:
+	ldr	r3, [r7, #576]
+	mov	r2, #0
+	strh	r2, [r3, r9]	@ movhi
+	ldr	r3, [r7, #576]
+	ldrh	r3, [r3, r9]
+	cmp	r3, r2
+	bne	.L1347
+	ldr	r3, .L1383+12
+	ldr	r9, [r6, #568]
+	ldr	r3, [r3]
+	add	r9, r9, r4, asl #2
+	tst	r3, #256
+	beq	.L1348
+	ldrb	r2, [r9, #2]	@ zero_extendqisi2
+	mov	r1, r4
+	ldr	r0, .L1383+16
+	mov	r2, r2, lsr #5
+	bl	printk
+.L1348:
+	ldrb	r3, [r9, #2]	@ zero_extendqisi2
+	tst	r3, #192
+	and	r3, r3, #224
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, #224
+	movne	r3, r2
+	orreq	r3, r2, #1
+	cmp	r3, #0
+	beq	.L1349
+	ldr	r1, .L1383+20
+	movw	r2, #1115
+	ldr	r0, .L1383+24
+	bl	printk
+	bl	dump_stack
+.L1349:
+	mov	r0, r4
+	bl	ftl_free_sblk
+	ldr	r3, [r7, #580]
+	ldrh	r1, [r3, #124]
+	cmp	r1, #0
+	beq	.L1350
+	add	r0, r3, #388
+	mov	r2, #0
+	add	r0, r0, #2
+.L1352:
+	ldrh	ip, [r0, #2]!
+	cmp	ip, r4
+	bne	.L1351
+	add	r2, r2, #196
+	mvn	r0, #0
+	add	r1, r1, r0
+	mov	r2, r2, asl #1
+	strh	r0, [r3, r2]	@ movhi
+	strh	r1, [r3, #124]	@ movhi
+	b	.L1350
+.L1351:
+	add	r2, r2, #1
+	cmp	r2, #64
+	bne	.L1352
+.L1350:
+	ldrh	r1, [r3, #120]
+	cmp	r1, #0
+	beq	.L1353
+	add	r0, r3, #134
+	mov	r2, #0
+.L1355:
+	ldrh	ip, [r0, #2]!
+	cmp	ip, r4
+	bne	.L1354
+	add	r2, r3, r2, asl #1
+	mvn	r0, #0
+	add	r1, r1, r0
+	strh	r0, [r2, #136]	@ movhi
+	strh	r1, [r3, #120]	@ movhi
+	b	.L1353
+.L1354:
+	add	r2, r2, #1
+	cmp	r2, #64
+	bne	.L1355
+.L1353:
+	ldrh	r0, [r3, #122]
+	cmp	r0, #0
+	beq	.L1356
+	add	r1, r3, #260
+	mov	r2, #0
+	add	r1, r1, #2
+.L1358:
+	ldrh	ip, [r1, #2]!
+	cmp	ip, r4
+	bne	.L1357
+	add	r2, r2, #132
+	mvn	r1, #0
+	add	r0, r0, r1
+	mov	r2, r2, asl #1
+	strh	r1, [r3, r2]	@ movhi
+	strh	r0, [r3, #122]	@ movhi
+	b	.L1356
+.L1357:
+	add	r2, r2, #1
+	cmp	r2, #64
+	bne	.L1358
+	b	.L1356
+.L1347:
+	mov	r0, r4
+	mov	r1, #1
+	bl	gc_add_sblk
+.L1356:
+	add	r5, r5, #1
+	b	.L1345
+.L1382:
+	ldr	r3, .L1383+4
+	mov	r2, #0
+	strh	r2, [r3, #52]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+.L1384:
+	.align	2
+.L1383:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2312
+	.word	.LC108
+	.word	.LANCHOR2
+	.word	.LC109
+	.word	.LANCHOR1+1344
+	.word	.LC0
+	.fnend
+	.size	gc_free_src_blk, .-gc_free_src_blk
+	.align	2
+	.global	print_ftl_debug_info
+	.type	print_ftl_debug_info, %function
+print_ftl_debug_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	movw	ip, #2274
+	ldr	r4, .L1387
+	.pad #32
+	sub	sp, sp, #32
+	ldr	r3, [r4, #2288]
+	ldrh	ip, [r4, ip]
+	ldr	r0, [r4, #580]
+	ldrh	r1, [r3, #148]
+	ldrh	r2, [r3, #146]
+	add	r3, r4, #2272
+	ldrh	r3, [r3]
+	str	ip, [sp]
+	movw	ip, #2276
+	ldrh	ip, [r4, ip]
+	str	ip, [sp, #4]
+	movw	ip, #2278
+	ldrh	ip, [r4, ip]
+	str	ip, [sp, #8]
+	movw	ip, #2280
+	ldrh	ip, [r4, ip]
+	str	ip, [sp, #12]
+	movw	ip, #2282
+	ldrh	ip, [r4, ip]
+	str	ip, [sp, #16]
+	ldr	ip, [r0, #524]
+	str	ip, [sp, #20]
+	ldr	r0, [r0, #528]
+	str	r0, [sp, #24]
+	ldr	r0, [r4, #2268]
+	str	r0, [sp, #28]
+	ldr	r0, .L1387+4
+	bl	printk
+	ldr	r2, [r4, #2288]
+	ldrb	r3, [r4, #2285]	@ zero_extendqisi2
+	ldr	r0, .L1387+8
+	ldr	r1, [r2, #8]
+	str	r1, [sp]
+	ldr	r1, [r2, #64]
+	str	r1, [sp, #4]
+	ldr	r1, [r2, #20]
+	ldr	r2, [r2, #28]
+	bl	printk
+	ldr	r2, [r4, #2288]
+	ldr	r0, .L1387+12
+	ldr	r3, [r2, #16]
+	ldr	r1, [r2, #52]
+	ldr	r2, [r2, #60]
+	mov	r3, r3, lsr #11
+	bl	printk
+	ldr	r2, [r4, #2288]
+	ldrh	r0, [r2, #92]
+	ldrh	r1, [r2, #74]
+	ldrh	r3, [r2, #88]
+	str	r0, [sp]
+	ldrh	r0, [r2, #96]
+	str	r0, [sp, #4]
+	ldrh	r0, [r2, #72]
+	str	r0, [sp, #8]
+	ldr	r0, [r2, #80]
+	str	r0, [sp, #12]
+	ldrh	r0, [r2, #90]
+	str	r0, [sp, #16]
+	ldrh	r0, [r2, #94]
+	str	r0, [sp, #20]
+	ldrh	r0, [r2, #98]
+	str	r0, [sp, #24]
+	ldr	r0, .L1387+16
+	ldr	r2, [r2, #84]
+	bl	printk
+	movw	r0, #2300
+	ldrh	r0, [r4, r0]
+	movw	r3, #2294
+	ldrh	r1, [r4, r3]
+	movw	r3, #2296
+	ldrh	r2, [r4, r3]
+	movw	r3, #2298
+	ldrh	r3, [r4, r3]
+	str	r0, [sp]
+	movw	r0, #2292
+	ldrh	r0, [r4, r0]
+	str	r0, [sp, #4]
+	ldr	r0, .L1387+20
+	bl	printk
+	ldr	r0, [r4, #580]
+	movw	lr, #590
+	ldr	ip, [r4, #2288]
+	add	r3, r0, #584
+	ldrh	r1, [r3]
+	movw	r3, #586
+	ldrh	r2, [r0, r3]
+	add	r3, r0, #588
+	ldrh	r0, [r0, lr]
+	ldrh	r3, [r3]
+	str	r0, [sp]
+	ldr	r0, [ip, #156]
+	str	r0, [sp, #4]
+	ldrh	r0, [ip, #150]
+	str	r0, [sp, #8]
+	ldr	r0, .L1387+24
+	bl	printk
+	add	sp, sp, #32
+	@ sp needed
+	ldmfd	sp!, {r4, pc}
+.L1388:
+	.align	2
+.L1387:
+	.word	.LANCHOR0
+	.word	.LC110
+	.word	.LC111
+	.word	.LC112
+	.word	.LC113
+	.word	.LC114
+	.word	.LC115
+	.fnend
+	.size	print_ftl_debug_info, .-print_ftl_debug_info
+	.align	2
+	.global	ftl_write_buf
+	.type	ftl_write_buf, %function
+ftl_write_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	subs	r4, r0, #0
+	bne	.L1390
+	ldr	r1, .L1401
+	mov	r2, #676
+	ldr	r0, .L1401+4
+	bl	printk
+	bl	dump_stack
+	bl	print_ftl_debug_info
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1390:
+	ldr	r5, .L1401+8
+	ldrb	r2, [r4, #40]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2260]	@ zero_extendqisi2
+	cmp	r2, r3
+	bls	.L1395
+	ldr	r1, .L1401
+	movw	r2, #681
+	ldr	r0, .L1401+4
+	bl	printk
+	bl	dump_stack
+.L1395:
+	ldrb	r3, [r4, #40]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1392
+	ldrb	r2, [r5, #2260]	@ zero_extendqisi2
+	ldr	r6, .L1401+8
+	cmp	r2, r3
+	bcs	.L1393
+.L1392:
+	mov	r0, r4
+	bl	zbuf_free
+	ldrb	r0, [r5, #2284]	@ zero_extendqisi2
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1393:
+	mov	r1, r4
+	ldr	r0, .L1401+12
+	bl	buf_add_tail
+	ldr	r3, [r6, #2288]
+	ldrb	r1, [r4, #40]	@ zero_extendqisi2
+	ldrb	r0, [r6, #2284]	@ zero_extendqisi2
+	ldr	r2, [r3, #16]
+	add	r0, r0, #1
+	add	r2, r2, r1
+	str	r2, [r3, #16]
+	ldr	r2, [r3, #32]
+	uxtb	r0, r0
+	strb	r0, [r6, #2284]
+	add	r2, r2, #1
+	str	r2, [r3, #32]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1402:
+	.align	2
+.L1401:
+	.word	.LANCHOR1+1360
+	.word	.LC0
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2308
+	.fnend
+	.size	ftl_write_buf, .-ftl_write_buf
+	.align	2
+	.global	ftl_write_completed
+	.type	ftl_write_completed, %function
+ftl_write_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r5, #0
+	ldr	r6, .L1415
+	add	r9, r6, #724
+	mov	r8, r6
+.L1404:
+	ldrb	r10, [r6, #3530]	@ zero_extendqisi2
+	cmp	r10, #255
+	beq	.L1414
+	mov	r4, #48
+	mul	r4, r4, r10
+	add	r7, r9, r4
+	add	r4, r6, r4
+	add	r2, r4, #748
+	ldrb	r3, [r4, #724]	@ zero_extendqisi2
+	strb	r3, [r6, #3530]
+	ldr	r3, [r4, #760]
+	cmn	r3, #1
+	bne	.L1405
+	ldr	r3, .L1415+4
+	ldr	r2, [r4, #748]
+	ldrb	r1, [r6, #2930]	@ zero_extendqisi2
+	ldrh	r0, [r3]
+	ldrb	r3, [r6, #676]	@ zero_extendqisi2
+	mov	r2, r2, lsr r0
+	rsb	r3, r3, #24
+	rsb	r3, r0, r3
+	mvn	r0, #0
+	bic	r0, r2, r0, asl r3
+	bl	__aeabi_uidiv
+	ldr	r3, [r6, #580]
+	movw	r2, #65535
+	ldr	r1, [r3, #560]
+	cmp	r1, r2
+	uxth	r5, r0
+	streq	r5, [r3, #560]
+	ldreq	r2, [r4, #748]
+	ldr	r0, .L1415+8
+	mov	r1, r5
+	streq	r2, [r3, #564]
+	mov	r3, #48
+	mla	r3, r3, r10, r8
+	ldr	r2, [r3, #744]
+	ldr	r3, [r3, #748]
+	bl	printk
+	ldr	r3, [r8, #580]
+	ldr	r2, [r3, #556]
+	add	r2, r2, #1
+	str	r2, [r3, #556]
+	ldrh	r2, [r3, #16]
+	cmp	r2, r5
+	moveq	r2, #0
+	streqh	r2, [r3, #22]	@ movhi
+	beq	.L1408
+	ldrh	r2, [r3, #48]
+	cmp	r2, r5
+	moveq	r2, #0
+	streqh	r2, [r3, #54]	@ movhi
+.L1408:
+	mov	r0, r7
+	mov	r5, #1
+	bl	ftl_write_buf
+	b	.L1404
+.L1405:
+	cmp	r5, #1
+	add	r3, r4, #740
+	bne	.L1410
+	ldr	r1, [r3, #4]
+	ldr	r2, [r4, #748]
+	ldr	r0, .L1415+12
+	bl	printk
+	mov	r0, r7
+	bl	ftl_write_buf
+	b	.L1404
+.L1410:
+	ldr	r0, [r3, #4]
+	ldr	r1, [r2, #4]
+	ldrh	r2, [r7, #32]
+	bl	lpa_hash_update_ppa
+	ldrb	r3, [r4, #726]	@ zero_extendqisi2
+	and	r5, r3, #4
+	ands	r5, r5, #255
+	bicne	r3, r3, #2
+	strneb	r3, [r4, #726]
+	movne	r5, #0
+	bne	.L1404
+	mov	r0, r7
+	bl	zbuf_free
+	b	.L1404
+.L1414:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L1416:
+	.align	2
+.L1415:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2928
+	.word	.LC116
+	.word	.LC117
+	.fnend
+	.size	ftl_write_completed, .-ftl_write_completed
+	.align	2
+	.global	zftl_add_read_buf
+	.type	zftl_add_read_buf, %function
+zftl_add_read_buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	subs	r5, r0, #0
+	bne	.L1418
+	ldr	r1, .L1423
+	mov	r2, #972
+	ldr	r0, .L1423+4
+	bl	printk
+	bl	dump_stack
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	print_ftl_debug_info
+.L1418:
+	ldr	r4, .L1423+8
+	ldrb	r2, [r5, #40]	@ zero_extendqisi2
+	ldrb	r3, [r4, #2260]	@ zero_extendqisi2
+	cmp	r2, r3
+	bls	.L1420
+	ldr	r1, .L1423
+	movw	r2, #977
+	ldr	r0, .L1423+4
+	bl	printk
+	bl	dump_stack
+.L1420:
+	ldr	r0, .L1423+12
+	mov	r1, r5
+	bl	buf_add_tail
+	ldrb	r3, [r4, #3532]	@ zero_extendqisi2
+	add	r3, r3, #1
+	strb	r3, [r4, #3532]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1424:
+	.align	2
+.L1423:
+	.word	.LANCHOR1+1376
+	.word	.LC0
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3531
+	.fnend
+	.size	zftl_add_read_buf, .-zftl_add_read_buf
+	.align	2
+	.global	ftl_alloc_sblk
+	.type	ftl_alloc_sblk, %function
+ftl_alloc_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	uxth	r6, r0
+	cmp	r0, #5
+	mov	r5, r0
+	mov	r1, r6
+	mov	r0, #0
+	movne	r7, #0
+	moveq	r7, #2
+	bl	zftl_get_free_sblk
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r4, r0
+	beq	.L1427
+	ldr	r3, .L1436
+	ldr	r6, [r3, #568]
+	add	r6, r6, r0, asl #2
+	ldrb	r3, [r6, #2]	@ zero_extendqisi2
+	tst	r3, #224
+	beq	.L1428
+	ldr	r1, .L1436+4
+	mov	r2, #836
+	ldr	r0, .L1436+8
+	bl	printk
+	bl	dump_stack
+.L1428:
+	ldrb	r3, [r6, #2]	@ zero_extendqisi2
+	bfi	r3, r5, #5, #3
+	uxtb	r3, r3
+	ubfx	r2, r3, #3, #2
+	orr	r2, r7, r2
+	bfi	r3, r2, #3, #2
+	strb	r3, [r6, #2]
+	b	.L1435
+.L1427:
+	bl	print_ftl_debug_info
+	mov	r1, r4
+	mov	r2, r5
+	ldr	r0, .L1436+12
+	bl	printk
+	mov	r1, r6
+	mov	r0, #0
+	bl	zftl_get_free_sblk
+	mov	r2, r5
+	mov	r4, r0
+	ldr	r0, .L1436+12
+	mov	r1, r4
+	bl	printk
+	bl	dump_all_list_info
+	ldr	r1, .L1436+4
+	movw	r2, #846
+	ldr	r0, .L1436+8
+	bl	printk
+	bl	dump_stack
+.L1435:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1437:
+	.align	2
+.L1436:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1396
+	.word	.LC0
+	.word	.LC118
+	.fnend
+	.size	ftl_alloc_sblk, .-ftl_alloc_sblk
+	.align	2
+	.global	sblk_init
+	.type	sblk_init, %function
+sblk_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1439
+	mvn	r2, #0
+	mov	r0, #0
+	strb	r2, [r3, #2263]
+	strb	r2, [r3, #3530]
+	strb	r2, [r3, #3533]
+	strb	r2, [r3, #2936]
+	bx	lr
+.L1440:
+	.align	2
+.L1439:
+	.word	.LANCHOR0
+	.fnend
+	.size	sblk_init, .-sblk_init
+	.align	2
+	.global	dump_sblk_queue
+	.type	dump_sblk_queue, %function
+dump_sblk_queue:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r5, .L1451
+	ldr	r0, .L1451+4
+	ldrb	r1, [r5, #2263]	@ zero_extendqisi2
+	bl	printk
+	ldrb	r4, [r5, #2263]	@ zero_extendqisi2
+	cmp	r4, #255
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	add	r5, r5, #724
+	mov	r3, #48
+	mov	r6, r3
+	mla	r4, r3, r4, r5
+.L1443:
+	ldrb	r1, [r4, #1]	@ zero_extendqisi2
+	ldrb	r2, [r4, #42]	@ zero_extendqisi2
+	ldr	r3, [r4, #24]
+	ldr	r0, .L1451+8
+	bl	printk
+	ldrb	r4, [r4]	@ zero_extendqisi2
+	cmp	r4, #255
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mla	r4, r6, r4, r5
+	b	.L1443
+.L1452:
+	.align	2
+.L1451:
+	.word	.LANCHOR0
+	.word	.LC119
+	.word	.LC120
+	.fnend
+	.size	dump_sblk_queue, .-dump_sblk_queue
+	.align	2
+	.global	queue_lun_state
+	.type	queue_lun_state, %function
+queue_lun_state:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L1469
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	ldrb	lr, [ip, #2263]	@ zero_extendqisi2
+	cmp	lr, #255
+	beq	.L1461
+	add	r4, ip, #2928
+	ldrb	r3, [ip, #676]	@ zero_extendqisi2
+	mov	r2, #1
+	mov	r9, #48
+	ldrh	r8, [r4]
+	rsb	r7, r3, #24
+	mov	r3, r2, asl r3
+	rsb	r4, r8, r7
+	sub	r3, r3, #1
+	mov	r2, r2, asl r4
+	ldrb	r4, [ip, #2930]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	uxth	r3, r3
+	sub	r4, r4, #1
+	and	r10, r3, r0, asr r7
+	uxth	r2, r2
+	uxth	r4, r4
+	and	r5, r4, r0, asr r8
+	and	r5, r5, r2
+.L1460:
+	mla	r0, r9, lr, ip
+	ldr	r6, [r0, #748]
+	and	fp, r3, r6, lsr r7
+	cmp	fp, r10
+	bne	.L1455
+	and	r6, r4, r6, lsr r8
+	ldrb	r0, [r0, #766]	@ zero_extendqisi2
+	and	r6, r6, r2
+	cmp	r6, r5
+	bne	.L1456
+	cmp	r1, #1
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	sub	r6, r0, #7
+	tst	r6, #253
+	beq	.L1455
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1456:
+	cmp	r1, #3
+	ldrls	pc, [pc, r1, asl #2]
+	b	.L1455
+.L1457:
+	.word	.L1454
+	.word	.L1458
+	.word	.L1459
+	.word	.L1454
+.L1458:
+	sub	r6, r0, #7
+	tst	r6, #253
+	beq	.L1455
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1459:
+	cmp	r0, #11
+	ldmnefd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1455:
+	mla	lr, r9, lr, ip
+	ldrb	lr, [lr, #724]	@ zero_extendqisi2
+	cmp	lr, #255
+	bne	.L1460
+.L1461:
+	mov	r0, #0
+.L1454:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1470:
+	.align	2
+.L1469:
+	.word	.LANCHOR0
+	.fnend
+	.size	queue_lun_state, .-queue_lun_state
+	.align	2
+	.global	queue_remove_completed_req
+	.type	queue_remove_completed_req, %function
+queue_remove_completed_req:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1498
+	mov	ip, #0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r0, #48
+	ldrb	r1, [r3, #2936]	@ zero_extendqisi2
+	add	r10, r3, #724
+	ldrb	r2, [r3, #2263]	@ zero_extendqisi2
+	mov	r8, r3
+	ldrb	r6, [r3, #3533]	@ zero_extendqisi2
+	mvn	r9, #0
+	ldrb	r7, [r3, #3530]	@ zero_extendqisi2
+	mov	r4, r3
+	mov	r5, r0
+	str	r1, [sp, #4]
+.L1472:
+	cmp	r2, #255
+	beq	.L1473
+	mla	fp, r0, r2, r3
+	mov	r1, r2
+	ldrb	lr, [fp, #766]	@ zero_extendqisi2
+	sub	lr, lr, #12
+	cmp	lr, #1
+	bls	.L1474
+	cmp	ip, #0
+	ldrne	r3, .L1498
+	beq	.L1471
+	b	.L1496
+.L1474:
+	mul	ip, r0, r1
+	ldrb	r2, [fp, #724]	@ zero_extendqisi2
+	add	lr, r8, ip
+	ldrb	fp, [lr, #767]	@ zero_extendqisi2
+	strb	r9, [lr, #724]
+	cmp	fp, #1
+	bne	.L1477
+	add	ip, r10, ip
+	ldrh	ip, [ip, #34]
+	cmp	ip, #0
+	moveq	ip, r7
+	ldreq	lr, .L1498+4
+	ldrne	ip, [sp, #4]
+	ldrne	lr, .L1498+8
+	b	.L1478
+.L1477:
+	cmp	fp, #0
+	beq	.L1497
+.L1479:
+	mov	ip, #1
+	b	.L1472
+.L1497:
+	ldr	ip, [lr, #744]
+	cmn	ip, #1
+	movne	ip, r6
+	ldrne	lr, .L1498+12
+	beq	.L1479
+.L1478:
+	cmp	ip, #255
+	bne	.L1483
+	strb	r2, [r3, #2263]
+	mov	r2, #48
+	mla	r1, r2, r1, r3
+	ldrb	r3, [r1, #725]	@ zero_extendqisi2
+	strb	r3, [lr]
+	b	.L1471
+.L1483:
+	mov	lr, ip
+	mla	ip, r0, ip, r3
+	ldrb	ip, [ip, #724]	@ zero_extendqisi2
+	cmp	ip, #255
+	bne	.L1483
+	mla	r1, r5, r1, r4
+	mla	lr, r5, lr, r4
+	ldrb	r1, [r1, #725]	@ zero_extendqisi2
+	strb	r1, [lr, #724]
+	b	.L1479
+.L1473:
+	cmp	ip, #0
+	beq	.L1471
+	mvn	r2, #0
+.L1496:
+	strb	r2, [r3, #2263]
+.L1471:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1499:
+	.align	2
+.L1498:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3530
+	.word	.LANCHOR0+2936
+	.word	.LANCHOR0+3533
+	.fnend
+	.size	queue_remove_completed_req, .-queue_remove_completed_req
+	.align	2
+	.global	pm_alloc_new_blk
+	.type	pm_alloc_new_blk, %function
+pm_alloc_new_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	movw	r1, #690
+	ldr	r4, .L1517
+	ldr	r2, [r4, #2288]
+	ldrh	r3, [r2, r1]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r2, r1]	@ movhi
+	ldrb	r1, [r4, #2964]	@ zero_extendqisi2
+	cmp	r1, r3
+	bls	.L1501
+	add	r3, r3, #336
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1502
+.L1501:
+	ldr	r5, .L1517
+.L1514:
+	mov	r0, #1
+	ldr	r7, .L1517
+	bl	ftl_alloc_sblk
+	mov	r1, #0
+	mov	r6, r0
+	bl	ftl_erase_sblk
+	ldr	r1, [r4, #2288]
+	mov	r0, r6
+	add	r1, r1, #672
+	bl	ftl_get_blk_list_in_sblk
+	uxth	r0, r0
+	cmp	r0, #0
+	bne	.L1503
+	mov	r1, r6
+	ldr	r0, .L1517+4
+	bl	printk
+	ldr	r3, [r5, #568]
+	add	r6, r3, r6, asl #2
+	ldrb	r3, [r6, #2]	@ zero_extendqisi2
+	orr	r3, r3, #224
+	strb	r3, [r6, #2]
+	b	.L1514
+.L1503:
+	ldr	r3, [r7, #2288]
+	movw	r2, #690
+	mov	r5, #0
+	movw	r1, #65535
+	strh	r5, [r3, r2]	@ movhi
+	add	r3, r3, #412
+	add	r3, r3, #2
+	mov	r2, #1
+	str	r2, [r7, #3536]
+.L1505:
+	ldrh	r0, [r3, #2]!
+	uxth	r2, r5
+	cmp	r0, r1
+	beq	.L1504
+	add	r5, r5, #1
+	cmp	r5, #128
+	bne	.L1505
+	mov	r2, #227
+	ldr	r1, .L1517+8
+	ldr	r0, .L1517+12
+	bl	printk
+	bl	dump_stack
+	mov	r2, r5
+.L1504:
+	add	r2, r2, #208
+	ldr	r3, [r4, #2288]
+	mov	r2, r2, asl #1
+	strh	r6, [r3, r2]	@ movhi
+	add	r3, r3, #688
+	ldrh	r2, [r3]
+	add	r2, r2, #1
+	strh	r2, [r3]	@ movhi
+.L1502:
+	ldr	r2, [r4, #2288]
+	movw	r3, #690
+	ldrh	r3, [r2, r3]
+	add	r3, r3, #336
+	mov	r3, r3, asl #1
+	ldrh	r5, [r2, r3]
+	movw	r2, #65533
+	sub	r3, r5, #1
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L1507
+	ldr	r1, .L1517+8
+	mov	r2, #232
+	ldr	r0, .L1517+12
+	bl	printk
+	bl	dump_stack
+.L1507:
+	ldr	r1, [r4, #2288]
+	mov	r2, #0
+	add	r3, r1, #696
+	strh	r2, [r3]	@ movhi
+	ldr	r2, .L1517+16
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	ldrh	r4, [r2]
+	rsb	r3, r3, #24
+	movw	r2, #694
+	rsb	r4, r4, r3
+	mov	r3, r5, asr r4
+	strh	r3, [r1, r2]	@ movhi
+	ldr	r2, .L1517+20
+	add	r1, r1, #692
+	strh	r5, [r1]	@ movhi
+	ldr	r2, [r2]
+	tst	r2, #4096
+	beq	.L1511
+	mvn	r2, #0
+	uxth	r3, r3
+	ldr	r0, .L1517+24
+	mov	r1, r5
+	str	r3, [sp]
+	mvn	r2, r2, asl r4
+	mov	r3, r5
+	bl	printk
+.L1511:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L1518:
+	.align	2
+.L1517:
+	.word	.LANCHOR0
+	.word	.LC121
+	.word	.LANCHOR1+1412
+	.word	.LC0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR2
+	.word	.LC122
+	.fnend
+	.size	pm_alloc_new_blk, .-pm_alloc_new_blk
+	.align	2
+	.global	pm_select_ram_region
+	.type	pm_select_ram_region, %function
+pm_select_ram_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1534
+	mov	r3, #0
+	movw	ip, #65535
+.L1521:
+	mov	r1, r3, asl #3
+	uxth	r0, r3
+	ldrh	r1, [r1, r2]
+	cmp	r1, ip
+	ldr	r1, .L1534
+	bxeq	lr
+	add	r3, r3, #1
+	cmp	r3, #32
+	bne	.L1521
+	mov	r2, #0
+	mov	r0, r3
+	mov	ip, #32768
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+.L1523:
+	add	r3, r1, r2, asl #3
+	uxth	lr, r2
+	ldrh	r3, [r3, #2]
+	tst	r3, #32768
+	bne	.L1522
+	cmp	r3, ip
+	movcc	ip, r3
+	movcc	r0, lr
+.L1522:
+	add	r2, r2, #1
+	cmp	r2, #32
+	bne	.L1523
+	cmp	r0, #32
+	mov	r4, r0
+	ldmnefd	sp!, {r4, r5, r6, pc}
+	ldr	r3, .L1534+4
+	mvn	r2, #0
+	ldr	r5, .L1534
+	ldrb	lr, [r3, #3796]	@ zero_extendqisi2
+	mov	r3, #0
+.L1525:
+	mov	ip, r3, asl #3
+	uxth	r6, r3
+	add	r0, r1, ip
+	ldrh	r0, [r0, #2]
+	cmp	r0, r2
+	bcs	.L1524
+	ldrh	ip, [ip, r5]
+	cmp	ip, lr
+	movne	r2, r0
+	movne	r4, r6
+.L1524:
+	add	r3, r3, #1
+	cmp	r3, #32
+	bne	.L1525
+	cmp	r4, #32
+	bne	.L1526
+	ldr	r1, .L1534+8
+	movw	r2, #331
+	ldr	r0, .L1534+12
+	bl	printk
+	bl	dump_stack
+.L1526:
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1535:
+	.align	2
+.L1534:
+	.word	.LANCHOR0+3540
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1432
+	.word	.LC0
+	.fnend
+	.size	pm_select_ram_region, .-pm_select_ram_region
+	.align	2
+	.global	ftl_memset
+	.type	ftl_memset, %function
+ftl_memset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memset
+	.fnend
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	flash_lsb_page_tbl_build
+	.type	flash_lsb_page_tbl_build, %function
+flash_lsb_page_tbl_build:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bne	.L1538
+	ldr	r3, .L1567
+.L1539:
+	mov	r2, r0, asl #1
+	strh	r0, [r2, r3]	@ movhi
+	add	r0, r0, #1
+	cmp	r0, #256
+	bne	.L1539
+.L1543:
+	ldr	r0, .L1567+4
+	mov	r1, #255
+	mov	r2, #1024
+	bl	ftl_memset
+	mov	r3, #0
+	ldr	ip, .L1567
+	ldr	r0, .L1567+4
+	b	.L1540
+.L1538:
+	cmp	r0, #1
+	bne	.L1541
+	ldr	ip, .L1567
+	mov	r3, #0
+.L1542:
+	uxth	r2, r3
+	mov	lr, r3, asl #1
+	cmp	r2, #3
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	add	r3, r3, #1
+	movne	r1, #2
+	moveq	r1, #3
+	cmp	r0, #0
+	rsb	r1, r1, r2, asl #1
+	movne	r2, r1
+	cmp	r3, #256
+	strh	r2, [lr, ip]	@ movhi
+	bne	.L1542
+	b	.L1543
+.L1541:
+	cmp	r0, #2
+	bne	.L1544
+	ldr	r1, .L1567
+	mov	r3, #0
+.L1545:
+	uxth	r2, r3
+	mov	r0, r3, asl #1
+	cmp	r2, #1
+	add	r3, r3, #1
+	mov	ip, r2, asl #1
+	subhi	r2, ip, #1
+	cmp	r3, #256
+	strh	r2, [r0, r1]	@ movhi
+	bne	.L1545
+	b	.L1543
+.L1544:
+	cmp	r0, #3
+	bne	.L1546
+	ldr	ip, .L1567
+	mov	r3, #0
+.L1547:
+	uxth	r2, r3
+	mov	lr, r3, asl #1
+	cmp	r2, #5
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	add	r3, r3, #1
+	movne	r1, #4
+	moveq	r1, #5
+	cmp	r0, #0
+	rsb	r1, r1, r2, asl #1
+	movne	r2, r1
+	cmp	r3, #256
+	strh	r2, [lr, ip]	@ movhi
+	bne	.L1547
+	b	.L1543
+.L1546:
+	cmp	r0, #4
+	mov	r3, #0
+	bne	.L1548
+	ldr	r2, .L1567+8
+	strh	r3, [r2, #4]	@ movhi
+	mov	r3, #1
+	strh	r0, [r2, #12]	@ movhi
+	strh	r3, [r2, #6]	@ movhi
+	mov	r3, #2
+	strh	r3, [r2, #8]	@ movhi
+	mov	r3, #3
+	strh	r3, [r2, #10]	@ movhi
+	mov	r3, #5
+	strh	r3, [r2, #14]	@ movhi
+	mov	r3, #7
+	strh	r3, [r2, #16]	@ movhi
+	mov	r3, #8
+	strh	r3, [r2, #18]!	@ movhi
+.L1549:
+	tst	r3, #1
+	movne	r1, #7
+	moveq	r1, #6
+	rsb	r1, r1, r3, asl #1
+	add	r3, r3, #1
+	strh	r1, [r2, #2]!	@ movhi
+	uxth	r3, r3
+	cmp	r3, #256
+	bne	.L1549
+	b	.L1543
+.L1548:
+	cmp	r0, #5
+	bne	.L1550
+	ldr	r2, .L1567
+.L1551:
+	mov	r1, r3, asl #1
+	strh	r3, [r1, r2]	@ movhi
+	add	r3, r3, #1
+	cmp	r3, #16
+	bne	.L1551
+	ldr	r2, .L1567+12
+.L1552:
+	strh	r3, [r2, #2]!	@ movhi
+	add	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, #496
+	bne	.L1552
+	b	.L1543
+.L1550:
+	cmp	r0, #8
+	bne	.L1553
+	ldr	r2, .L1567
+.L1554:
+	strh	r3, [r3, r2]	@ movhi
+	add	r3, r3, #2
+	cmp	r3, #512
+	bne	.L1554
+	b	.L1543
+.L1553:
+	cmp	r0, #9
+	bne	.L1543
+	ldr	r2, .L1567+8
+	movw	r1, #509
+	strh	r3, [r2, #4]	@ movhi
+	mov	r3, #1
+	strh	r3, [r2, #6]	@ movhi
+	mov	r3, #2
+	strh	r3, [r2, #8]!	@ movhi
+	mov	r3, #3
+.L1555:
+	strh	r3, [r2, #2]!	@ movhi
+	add	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, r1
+	bne	.L1555
+	b	.L1543
+.L1540:
+	ldrh	r2, [r3, ip]
+	add	r3, r3, #2
+	cmp	r3, #512
+	mov	r1, r2, asl #1
+	strh	r2, [r0, r1]	@ movhi
+	bne	.L1540
+	ldmfd	sp!, {r3, pc}
+.L1568:
+	.align	2
+.L1567:
+	.word	.LANCHOR0+4
+	.word	.LANCHOR0+3800
+	.word	.LANCHOR0
+	.word	.LANCHOR0+34
+	.fnend
+	.size	flash_lsb_page_tbl_build, .-flash_lsb_page_tbl_build
+	.align	2
+	.global	flash_die_info_init
+	.type	flash_die_info_init, %function
+flash_die_info_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r5, .L1600
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L1570
+	ldr	r0, .L1600+4
+	ldr	r1, .L1600+8
+	bl	printk
+.L1570:
+	ldr	r4, .L1600+12
+	mov	r6, #0
+	ldrh	r3, [r5, #30]
+	ldrb	r1, [r5, #16]	@ zero_extendqisi2
+	add	r9, r4, #688
+	ldrh	r0, [r5, #14]
+	strh	r3, [r4, #2]	@ movhi
+	strb	r6, [r4, #589]
+	bl	__aeabi_idiv
+	ldr	r7, .L1600+16
+	mov	r1, r6
+	mov	r2, #8
+	strh	r0, [r7]	@ movhi
+	add	r0, r4, #668
+	bl	ftl_memset
+	add	r0, r7, #4
+	mov	r1, r6
+	mov	r2, #32
+	bl	ftl_memset
+	add	r7, r4, #680
+.L1575:
+	ldrb	r2, [r5, #4]	@ zero_extendqisi2
+	add	r1, r9, r6, asl #3
+	ldr	r8, .L1600+20
+	mov	r3, #2
+	ldr	r0, .L1600+24
+	strb	r3, [r6, r7]
+	mov	r3, #0
+.L1571:
+	cmp	r3, r2
+	bcs	.L1598
+	add	ip, r0, r3
+	ldrb	lr, [ip, #1]	@ zero_extendqisi2
+	ldrb	ip, [r1, r3]	@ zero_extendqisi2
+	cmp	lr, ip
+	bne	.L1572
+	add	r3, r3, #1
+	b	.L1571
+.L1598:
+	ldrb	r3, [r4, #589]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r2, .L1600+28
+	uxtb	r0, r6
+	add	r2, r2, r3, asl #2
+	str	r1, [r2, #-3356]
+	add	r2, r3, #1
+	add	r3, r4, r3
+	strb	r2, [r4, #589]
+	strb	r0, [r3, #668]
+	bl	zftl_flash_enter_slc_mode
+.L1572:
+	add	r6, r6, #1
+	cmp	r6, #4
+	bne	.L1575
+	ldrb	r2, [r5, #12]	@ zero_extendqisi2
+	ldr	r3, .L1600
+	cmp	r2, #2
+	beq	.L1576
+.L1583:
+	ldrb	r3, [r5, #17]	@ zero_extendqisi2
+	ldrb	r2, [r4, #589]	@ zero_extendqisi2
+	smulbb	r2, r2, r3
+	ldrh	r3, [r5, #18]
+	smulbb	r3, r2, r3
+	ldr	r2, .L1600+32
+	strh	r3, [r2, #-12]	@ movhi
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1576:
+	ldrh	ip, [r3, #18]
+	mov	lr, #0
+	ldrh	r2, [r4, #2]
+	add	r3, r3, #4
+	and	ip, ip, #65280
+	ldrb	r1, [r4, #589]	@ zero_extendqisi2
+	ldr	r6, .L1600+28
+	mul	r2, r2, ip
+	ldrb	ip, [r3, #13]	@ zero_extendqisi2
+	ldrb	r7, [r3]	@ zero_extendqisi2
+	mul	ip, ip, r2
+	ldrb	r2, [r3, #23]	@ zero_extendqisi2
+	str	r2, [sp]
+	mov	r2, ip, asl #1
+	str	r2, [sp, #4]
+	mov	r2, lr
+.L1581:
+	add	r9, r8, r2, asl #3
+	mov	r0, #0
+.L1577:
+	cmp	r0, r7
+	bcs	.L1599
+	add	r10, r3, r0
+	ldrb	fp, [r10, #1]	@ zero_extendqisi2
+	ldrb	r10, [r9, r0]	@ zero_extendqisi2
+	cmp	fp, r10
+	bne	.L1578
+	add	r0, r0, #1
+	b	.L1577
+.L1599:
+	ldmia	sp, {r9, lr}
+	mov	r0, r1
+	add	r1, r6, r1, asl #2
+	cmp	r9, #0
+	moveq	lr, ip
+	str	lr, [r1, #-3356]
+	add	r1, r0, #1
+	add	r0, r4, r0
+	mov	lr, #1
+	uxtb	r1, r1
+	strb	r2, [r0, #668]
+.L1578:
+	add	r2, r2, #1
+	cmp	r2, #4
+	bne	.L1581
+	cmp	lr, #0
+	strneb	r1, [r4, #589]
+	b	.L1583
+.L1601:
+	.align	2
+.L1600:
+	.word	.LANCHOR2
+	.word	.LC4
+	.word	.LANCHOR1+1456
+	.word	.LANCHOR0
+	.word	.LANCHOR3-3360
+	.word	.LANCHOR0+688
+	.word	.LANCHOR2+4
+	.word	.LANCHOR3
+	.word	.LANCHOR3-3312
+	.fnend
+	.size	flash_die_info_init, .-flash_die_info_init
+	.align	2
+	.global	lpa_hash_init
+	.type	lpa_hash_init, %function
+lpa_hash_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r1, #255
+	ldr	r4, .L1604
+	mov	r2, #512
+	add	r0, r4, #2992
+	add	r0, r0, #8
+	bl	ftl_memset
+	add	r3, r4, #2960
+	ldr	r0, [r4, #3516]
+	mov	r1, #255
+	ldrh	r2, [r3]
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	ldmfd	sp!, {r4, lr}
+	b	ftl_memset
+.L1605:
+	.align	2
+.L1604:
+	.word	.LANCHOR0
+	.fnend
+	.size	lpa_hash_init, .-lpa_hash_init
+	.align	2
+	.global	lpa_rebuild_hash
+	.type	lpa_rebuild_hash, %function
+lpa_rebuild_hash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L1619
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L1607
+	ldr	r0, .L1619+4
+	mov	r2, #225
+	ldr	r1, .L1619+8
+	mov	r3, #0
+	bl	printk
+.L1607:
+	ldr	r4, .L1619+12
+	mov	r1, #255
+	mov	r2, #512
+	ldr	r0, .L1619+16
+	add	r5, r4, #2960
+	bl	ftl_memset
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	mov	r1, #255
+	ldrh	r2, [r5]
+	ldr	r0, [r4, #3516]
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	add	lr, r5, #40
+	mov	r0, #0
+	mov	ip, r4
+.L1608:
+	ldrh	r1, [r5]
+	uxth	r2, r0
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	mul	r3, r3, r1
+	cmp	r2, r3, asl #1
+	bge	.L1618
+	ldr	r3, [ip, #3512]
+	ldr	r3, [r3, r2, asl #2]
+	cmn	r3, #1
+	beq	.L1609
+	uxtb	r3, r3
+	mov	r3, r3, asl #1
+	ldrh	r1, [lr, r3]
+	strh	r2, [lr, r3]	@ movhi
+	mov	r2, r2, asl #1
+	ldr	r3, [ip, #3516]
+	strh	r1, [r3, r2]	@ movhi
+.L1609:
+	add	r0, r0, #1
+	b	.L1608
+.L1618:
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1620:
+	.align	2
+.L1619:
+	.word	.LANCHOR2
+	.word	.LC123
+	.word	.LANCHOR1+1476
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3000
+	.fnend
+	.size	lpa_rebuild_hash, .-lpa_rebuild_hash
+	.align	2
+	.global	zftl_read_flash_info
+	.type	zftl_read_flash_info, %function
+zftl_read_flash_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r1, #0
+	mov	r2, #11
+	mov	r4, r0
+	bl	ftl_memset
+	ldr	r2, .L1626
+	ldr	r3, .L1626+4
+	mov	ip, #1
+	ldrh	r1, [r2, #2]
+	add	r2, r2, #668
+	ldrb	r0, [r3, #13]	@ zero_extendqisi2
+	smulbb	r1, r0, r1
+	strh	r1, [r4, #4]	@ unaligned
+	ldrb	r1, [r2, #-8]	@ zero_extendqisi2
+	strb	r1, [r4, #7]
+	ldr	r1, [r2, #-148]
+	str	r1, [r4]	@ unaligned
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	ldrb	r0, [r2, #-79]	@ zero_extendqisi2
+	strb	r1, [r4, #6]
+	mov	r1, #32
+	ldrb	r3, [r3, #11]	@ zero_extendqisi2
+	strb	r1, [r4, #8]
+	strb	r3, [r4, #9]
+	mov	r3, #0
+	strb	r3, [r4, #10]
+.L1622:
+	uxtb	r1, r3
+	cmp	r1, r0
+	bcs	.L1625
+	ldrb	lr, [r3, r2]	@ zero_extendqisi2
+	add	r3, r3, #1
+	ldrb	r1, [r4, #10]	@ zero_extendqisi2
+	orr	r1, r1, ip, asl lr
+	strb	r1, [r4, #10]
+	b	.L1622
+.L1625:
+	ldmfd	sp!, {r4, pc}
+.L1627:
+	.align	2
+.L1626:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	zftl_read_flash_info, .-zftl_read_flash_info
+	.align	2
+	.global	gc_init
+	.type	gc_init, %function
+gc_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r8, #2312
+	ldr	r4, .L1630
+	mov	r5, #0
+	ldr	r6, .L1630+4
+	movw	r3, #2972
+	add	r7, r4, r8
+	mov	r1, r5
+	mov	r2, #596
+	strh	r5, [r4, r3]	@ movhi
+	mov	r0, r7
+	strb	r5, [r4, #2945]
+	strb	r5, [r6, #-3322]
+	str	r5, [r6, #-3320]
+	bl	ftl_memset
+	mvn	r3, #0
+	strh	r3, [r4, r8]	@ movhi
+	add	r3, r4, #2960
+	movw	ip, #2296
+	str	r5, [r4, #2320]
+	ldrh	r2, [r3]
+	mov	r3, r2, lsr #1
+	strh	r3, [r7, #34]	@ movhi
+	movw	r3, #2966
+	mov	r0, r2, lsr #2
+	strh	r5, [r4, r3]	@ movhi
+	movw	r3, #2946
+	strh	r5, [r4, r3]	@ movhi
+	movw	r3, #2952
+	strh	r5, [r4, r3]	@ movhi
+	movw	r5, #2962
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	strh	r0, [r7, #32]	@ movhi
+	smulbb	r1, r3, r2
+	uxth	r1, r1
+	sub	lr, r1, #32
+	strh	lr, [r4, ip]	@ movhi
+	movw	ip, #2294
+	strh	r1, [r4, ip]	@ movhi
+	movw	r1, #2300
+	strh	r2, [r4, r1]	@ movhi
+	movw	r2, #2298
+	strh	r0, [r4, r2]	@ movhi
+	ldrh	r0, [r4, r5]
+	mul	r0, r3, r0
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	str	r0, [r6, #-3316]
+	ldrh	r0, [r4, r5]
+	mul	r0, r3, r0
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrh	r3, [r4, r5]
+	str	r0, [r6, #-3312]
+	ldrb	r0, [r4, #2964]	@ zero_extendqisi2
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	str	r0, [r4, #2940]
+	ldrh	r0, [r4, r5]
+	mul	r0, r3, r0
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	str	r0, [r4, #2932]
+	ldrh	r0, [r4, r5]
+	mul	r0, r3, r0
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	movw	r3, #2974
+	ldrh	r3, [r4, r3]
+	movw	r2, #2292
+	mov	r3, r3, lsr #2
+	strh	r3, [r4, r2]	@ movhi
+	str	r0, [r6, #-3308]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1631:
+	.align	2
+.L1630:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.fnend
+	.size	gc_init, .-gc_init
+	.align	2
+	.global	gc_static_wearleveling
+	.type	gc_static_wearleveling, %function
+gc_static_wearleveling:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r4, .L1748
+	ldr	r3, [r4, #2288]
+	ldr	r3, [r3, #32]
+	cmp	r3, #10240
+	bls	.L1633
+	bl	ftl_tmp_into_update
+.L1633:
+	ldr	r3, [r4, #580]
+	ldr	r2, [r3, #568]
+	ldr	r1, [r3, #12]
+	add	r2, r2, #860160
+	add	r2, r2, #3840
+	cmp	r1, r2
+	bhi	.L1634
+	ldr	r2, .L1748
+	ldr	r0, [r2, #2288]
+	ldr	r2, [r3, #572]
+	ldr	r0, [r0, #36]
+	add	r2, r2, #32
+	cmp	r0, r2
+	movls	r7, #0
+	movls	r10, r7
+	bls	.L1635
+.L1634:
+	ldr	r2, [r4, #2288]
+	mov	r8, #0
+	ldr	ip, .L1748
+	movw	r5, #65535
+	mov	fp, r8
+	mov	r10, r8
+	ldr	r0, [r2, #36]
+	mov	r9, r8
+	str	r1, [r3, #568]
+	mov	r6, r5
+	str	r8, [sp, #32]
+	str	r0, [r3, #572]
+	ldrh	r7, [r2, #134]
+	str	r8, [sp, #28]
+	str	r8, [sp, #24]
+	str	r8, [sp, #20]
+.L1636:
+	ldr	r3, .L1748
+	add	r2, r3, #564
+	ldrh	r2, [r2]
+	cmp	r2, r7
+	bls	.L1745
+	ldr	r0, [ip, #568]
+	mov	r1, r7, asl #2
+	add	lr, r0, r1
+	ldrb	r3, [lr, #2]	@ zero_extendqisi2
+	and	r2, r3, #224
+	cmp	r2, #224
+	beq	.L1637
+	tst	r3, #8
+	ldrneh	r3, [r0, r1]
+	ldrne	r4, [r0, r1]
+	ubfxne	r3, r3, #0, #11
+	ubfxne	r4, r4, #11, #8
+	bne	.L1639
+.L1638:
+	tst	r3, #24
+	ldreqh	r3, [r0, r1]
+	movweq	r4, #65535
+	ldrne	r4, [r0, r1]
+	movwne	r3, #65535
+	ubfxeq	r3, r3, #0, #11
+	ubfxne	r4, r4, #11, #8
+	bne	.L1641
+.L1639:
+	ldr	r2, [sp, #32]
+	add	r10, r10, #1
+	cmp	r5, r3
+	add	r2, r2, r3
+	uxth	r10, r10
+	str	r2, [sp, #32]
+	ldrhi	r2, [ip, #580]
+	movhi	r5, r3
+	addhi	r2, r2, #584
+	strhih	r7, [r2, #2]	@ movhi
+.L1683:
+	ldr	r2, [sp, #20]
+	cmp	r2, r3
+	movw	r2, #65535
+	strcc	r3, [sp, #20]
+	movcc	r8, r7
+	cmp	r4, r2
+	beq	.L1643
+.L1641:
+	ldr	r2, [sp, #24]
+	cmp	r6, r4
+	add	r2, r2, #1
+	movhi	r6, r4
+	uxth	r2, r2
+	str	r2, [sp, #24]
+	ldr	r2, [sp, #28]
+	add	r2, r2, r4
+	str	r2, [sp, #28]
+	ldrhi	r2, [ip, #580]
+	addhi	r2, r2, #584
+	strhih	r7, [r2]	@ movhi
+	cmp	r9, r4
+	movcc	fp, r7
+	movcc	r9, r4
+.L1643:
+	cmp	r4, #9
+	cmphi	r3, #9
+	bhi	.L1637
+	ldr	r3, .L1748+4
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L1637
+	ldrh	r2, [r0, r1]
+	ldr	r3, [r0, r1]
+	ldrb	r1, [lr, #2]	@ zero_extendqisi2
+	ubfx	r2, r2, #0, #11
+	ubfx	r3, r3, #11, #8
+	str	ip, [sp, #36]
+	ubfx	r1, r1, #3, #2
+	str	r1, [sp]
+	ldrb	r1, [lr, #2]	@ zero_extendqisi2
+	mov	r1, r1, lsr #5
+	str	r1, [sp, #4]
+	ldrb	r1, [lr, #3]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	mov	r1, r7, asl #1
+	ldr	r0, [ip, #576]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1748+8
+	str	r1, [sp, #12]
+	mov	r1, r7
+	bl	printk
+	ldr	ip, [sp, #36]
+.L1637:
+	add	r7, r7, #1
+	uxth	r7, r7
+	b	.L1636
+.L1745:
+	ldr	r0, [r3, #580]
+	mov	r2, #0
+	mov	r1, #255
+	str	r3, [sp, #36]
+	add	r0, r0, #264
+	strh	r2, [r0, #-142]	@ movhi
+	mov	r2, #128
+	bl	ftl_memset
+	ldr	ip, .L1748+4
+	movw	r2, #586
+	ldr	ip, [ip]
+	tst	ip, #1024
+	ldr	r3, [sp, #36]
+	ldr	r1, [r3, #580]
+	ldr	r0, [r3, #568]
+	ldrh	r1, [r1, r2]
+	mov	r2, r1, asl #2
+	add	r4, r0, r2
+	beq	.L1646
+	ldrh	r2, [r0, r2]
+	ldr	ip, [r0, r1, asl #2]
+	ldrb	r0, [r4, #2]	@ zero_extendqisi2
+	ubfx	r2, r2, #0, #11
+	ubfx	r0, r0, #3, #2
+	str	r0, [sp]
+	ldrb	r0, [r4, #2]	@ zero_extendqisi2
+	mov	r0, r0, lsr #5
+	str	r0, [sp, #4]
+	ldrb	r0, [r4, #3]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	ldr	r0, [r3, #576]
+	mov	r3, r1, asl #1
+	ldrh	r3, [r0, r3]
+	ldr	r0, .L1748+12
+	str	r3, [sp, #12]
+	ubfx	r3, ip, #11, #8
+	bl	printk
+.L1646:
+	ldrb	r3, [r4, #2]	@ zero_extendqisi2
+	and	r3, r3, #224
+	cmp	r3, #32
+	ldr	r3, .L1748
+	bne	.L1647
+	ldr	r2, [r3, #2288]
+	add	r2, r2, #688
+	ldrh	r2, [r2]
+	cmp	r2, #2
+	ldrhi	r2, .L1748+16
+	movhi	r1, #1
+	strhi	r1, [r2, #-3304]
+.L1647:
+	ldrb	r2, [r4, #2]	@ zero_extendqisi2
+	tst	r2, #8
+	beq	.L1648
+	and	r1, r2, #192
+	cmp	r1, #64
+	bne	.L1649
+	ldr	r2, [r3, #580]
+	movw	r3, #586
+	mov	r1, #0
+	ldrh	r0, [r2, r3]
+	mov	r2, #1
+	bl	gc_add_sblk
+	ldr	r2, .L1748+20
+	movw	r3, #570
+	mov	r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1648
+.L1649:
+	tst	r2, #224
+	bne	.L1648
+	ldr	r3, [r3, #580]
+	movw	r7, #590
+	movw	r2, #65535
+	ldrh	r1, [r3, r7]
+	cmp	r1, r2
+	bne	.L1648
+	movw	r4, #586
+	ldrh	r0, [r3, r4]
+	add	r3, r3, #588
+	ldrh	r3, [r3]
+	cmp	r3, r0
+	beq	.L1648
+	bl	zftl_remove_free_node
+	ldr	r3, .L1748
+	ldr	r3, [r3, #580]
+	ldrh	r2, [r3, r4]
+	strh	r2, [r3, r7]	@ movhi
+	mvn	r2, #0
+	strh	r2, [r3, r4]	@ movhi
+.L1648:
+	ldr	r4, .L1748
+	ldr	r0, .L1748+4
+	ldr	r3, [r4, #580]
+	ldr	r0, [r0]
+	add	r3, r3, #584
+	tst	r0, #1024
+	ldrh	r1, [r3]
+	ldr	r3, [r4, #568]
+	mov	r2, r1, asl #2
+	add	r7, r3, r2
+	beq	.L1650
+	ldrb	r0, [r7, #2]	@ zero_extendqisi2
+	ldrh	r2, [r3, r2]
+	ubfx	r0, r0, #3, #2
+	ldr	r3, [r3, r1, asl #2]
+	str	r0, [sp]
+	ubfx	r2, r2, #0, #11
+	ldrb	r0, [r7, #2]	@ zero_extendqisi2
+	ubfx	r3, r3, #11, #8
+	mov	r0, r0, lsr #5
+	str	r0, [sp, #4]
+	ldrb	r0, [r7, #3]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	mov	r0, r1, asl #1
+	ldr	ip, [r4, #576]
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #12]
+	ldr	r0, .L1748+24
+	bl	printk
+.L1650:
+	ldrb	r3, [r7, #2]	@ zero_extendqisi2
+	tst	r3, #8
+	beq	.L1651
+	and	r2, r3, #192
+	ldr	r7, .L1748
+	cmp	r2, #64
+	bne	.L1652
+	ldr	r3, [r7, #580]
+	mov	r1, #0
+	mov	r2, #1
+	add	r3, r3, #584
+	ldrh	r0, [r3]
+	bl	gc_add_sblk
+	ldr	r2, .L1748+20
+	movw	r3, #570
+	mov	r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1651
+.L1652:
+	and	r3, r3, #248
+	cmp	r3, #16
+	bne	.L1651
+	ldr	r3, [r7, #580]
+	add	r2, r3, #588
+	ldrh	r1, [r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L1651
+	add	r2, r3, #584
+	ldrh	r0, [r2]
+	movw	r2, #590
+	ldrh	r3, [r3, r2]
+	cmp	r3, r0
+	beq	.L1651
+	bl	zftl_remove_free_node
+	ldr	r3, [r7, #580]
+	add	r2, r3, #588
+	add	r3, r3, #584
+	ldrh	r1, [r3]
+	strh	r1, [r2]	@ movhi
+	mvn	r2, #0
+	strh	r2, [r3]	@ movhi
+.L1651:
+	ldr	r2, .L1748+4
+	ldr	ip, .L1748
+	ldr	r2, [r2]
+	ldr	r3, [ip, #568]
+	tst	r2, #1024
+	beq	.L1653
+	mov	r2, r8, asl #2
+	add	r1, r3, r2
+	ldrh	r2, [r3, r2]
+	ldrb	r0, [r1, #2]	@ zero_extendqisi2
+	ldr	r3, [r3, r8, asl #2]
+	ubfx	r2, r2, #0, #11
+	ubfx	r0, r0, #3, #2
+	str	r0, [sp]
+	ldrb	r0, [r1, #2]	@ zero_extendqisi2
+	ubfx	r3, r3, #11, #8
+	mov	r0, r0, lsr #5
+	str	r0, [sp, #4]
+	ldrb	r1, [r1, #3]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	mov	r1, r8, asl #1
+	ldr	r0, [ip, #576]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1748+28
+	str	r1, [sp, #12]
+	mov	r1, r8
+	bl	printk
+.L1653:
+	ldr	r2, .L1748+4
+	ldr	ip, .L1748
+	ldr	r2, [r2]
+	ldr	r3, [ip, #568]
+	tst	r2, #1024
+	beq	.L1654
+	mov	r2, fp, asl #2
+	add	r1, r3, r2
+	ldrh	r2, [r3, r2]
+	ldrb	r0, [r1, #2]	@ zero_extendqisi2
+	ldr	r3, [r3, fp, asl #2]
+	ubfx	r2, r2, #0, #11
+	ubfx	r0, r0, #3, #2
+	str	r0, [sp]
+	ldrb	r0, [r1, #2]	@ zero_extendqisi2
+	ubfx	r3, r3, #11, #8
+	mov	r0, r0, lsr #5
+	str	r0, [sp, #4]
+	ldrb	r1, [r1, #3]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	mov	r1, fp, asl #1
+	ldr	r0, [ip, #576]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1748+32
+	str	r1, [sp, #12]
+	mov	r1, fp
+	bl	printk
+.L1654:
+	ldr	r4, [r4, #2288]
+	mov	r1, r10
+	ldrh	r3, [sp, #20]
+	ldr	r0, [sp, #32]
+	strh	r9, [r4, #98]	@ movhi
+	strh	r3, [r4, #96]	@ movhi
+	strh	r5, [r4, #92]	@ movhi
+	strh	r6, [r4, #94]	@ movhi
+	bl	__aeabi_uidiv
+	strh	r0, [r4, #88]	@ movhi
+	mov	r7, r0
+	ldr	r1, [sp, #24]
+	ldr	r0, [sp, #28]
+	bl	__aeabi_uidiv
+	strh	r0, [r4, #90]	@ movhi
+	ldr	r4, .L1748+4
+	ldr	r3, [r4]
+	tst	r3, #1024
+	beq	.L1655
+	uxth	r0, r0
+	mov	r1, r10
+	str	r0, [sp]
+	uxth	r3, r7
+	ldr	r0, .L1748+36
+	ldr	r2, [sp, #24]
+	bl	printk
+.L1655:
+	ldr	r3, [r4]
+	ldr	r4, .L1748+40
+	tst	r3, #1024
+	beq	.L1656
+	str	r9, [sp]
+	mov	r1, r5
+	ldrh	r3, [r4, #-4]
+	mov	r2, r6
+	ldr	r0, .L1748+44
+	str	r3, [sp, #4]
+	ldrh	r3, [r4, #-2]
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #20]
+	bl	printk
+.L1656:
+	rsb	r3, r6, r9
+	str	r3, [sp, #24]
+	ldr	r2, [sp, #24]
+	ldrh	r3, [r4, #-2]
+	cmp	r2, r3
+	bgt	.L1657
+	ldr	r2, .L1748+40
+	ldr	r3, [sp, #20]
+	ldrh	r2, [r2, #-4]
+	rsb	r3, r5, r3
+	cmp	r3, r2
+	movle	r7, #0
+	movle	r10, r7
+	ble	.L1658
+.L1657:
+	ldr	ip, .L1748
+	mov	r7, #0
+	mov	r10, r7
+	ldr	r3, [ip, #580]
+	mov	r9, ip
+	ldr	r4, [r3, #580]
+	ldr	r3, [ip, #2288]
+	uxth	r4, r4
+	ldrh	fp, [r3, #134]
+.L1659:
+	ldr	r3, .L1748+48
+	ldrh	r3, [r3]
+	cmp	fp, r3
+	bcs	.L1668
+	add	r4, r4, #1
+	uxth	r4, r4
+	cmp	r4, r3
+	ldr	r3, [r9, #568]
+	movcs	r4, #0
+	mov	r8, r4, asl #2
+	add	r2, r3, r8
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	tst	r2, #192
+	and	r0, r2, #224
+	moveq	r1, #1
+	movne	r1, #0
+	cmp	r0, #224
+	orreq	r1, r1, #1
+	cmp	r1, #0
+	bne	.L1661
+	ubfx	r2, r2, #3, #2
+	ands	r1, r2, #1
+	beq	.L1662
+	cmp	r0, #160
+	b	.L1743
+.L1662:
+	cmp	r2, #2
+.L1743:
+	bne	.L1664
+	ldr	r2, .L1748+52
+	ldr	r0, [sp, #24]
+	ldrh	r2, [r2]
+	cmp	r0, r2
+	ble	.L1665
+	ldr	r2, [r3, r8]
+	ubfx	r2, r2, #11, #8
+	cmp	r2, r6
+	bls	.L1666
+	cmp	r1, #0
+	beq	.L1665
+	ldrh	r2, [r3, r8]
+	ubfx	r2, r2, #0, #11
+	cmp	r2, r5
+	bgt	.L1665
+.L1666:
+	mov	r1, #0
+	mov	r2, #1
+	mov	r0, r4
+	str	r3, [sp, #28]
+	bl	gc_add_sblk
+	ldr	r2, .L1748+56
+	mov	r1, #1
+	add	r10, r10, r1
+	strh	r1, [r2]	@ movhi
+	ldr	r2, .L1748+4
+	ldr	r2, [r2]
+	tst	r2, #1024
+	ldr	r3, [sp, #28]
+	beq	.L1665
+	ldr	r0, [r9, #576]
+	mov	r1, r4, asl r1
+	ldr	r2, [r9, #568]
+	ldrh	lr, [r0, r1]
+	add	r2, r2, r8
+	ldr	r1, .L1748+20
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	ldr	r0, .L1748+60
+	ldrh	r1, [r1, #52]
+	str	r1, [sp]
+	ldrh	r1, [r3, r8]
+	ubfx	r1, r1, #0, #11
+	str	r1, [sp, #4]
+	ldr	r3, [r3, r8]
+	ubfx	r3, r3, #11, #8
+	str	r3, [sp, #8]
+	b	.L1744
+.L1664:
+	ldr	r0, .L1748+64
+	ldr	r2, [sp, #20]
+	ldrh	r0, [r0]
+	rsb	r2, r5, r2
+	cmp	r2, r0
+	ble	.L1665
+	ldrh	r2, [r3, r8]
+	add	r0, r5, #8
+	ubfx	r2, r2, #0, #11
+	cmp	r2, r0
+	ble	.L1667
+	cmp	r1, #0
+	beq	.L1665
+	ldr	r2, [r3, r8]
+	add	r1, r6, #4
+	ubfx	r2, r2, #11, #8
+	cmp	r2, r1
+	bgt	.L1665
+.L1667:
+	mov	r1, #0
+	mov	r2, #1
+	mov	r0, r4
+	str	r3, [sp, #28]
+	bl	gc_add_sblk
+	ldr	r2, .L1748+56
+	mov	r1, #1
+	add	r7, r7, r1
+	strh	r1, [r2]	@ movhi
+	ldr	r2, .L1748+4
+	ldr	r2, [r2]
+	tst	r2, #1024
+	ldr	r3, [sp, #28]
+	beq	.L1665
+	ldr	r0, [r9, #576]
+	mov	r1, r4, asl r1
+	ldr	r2, [r9, #568]
+	ldrh	lr, [r0, r1]
+	add	r2, r2, r8
+	ldr	r1, .L1748+20
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	ldr	r0, .L1748+68
+	ldrh	r1, [r1, #52]
+	str	r1, [sp]
+	ldrh	r1, [r3, r8]
+	ubfx	r1, r1, #0, #11
+	str	r1, [sp, #4]
+	ldr	r3, [r3, r8]
+	ubfx	r3, r3, #11, #8
+	str	r3, [sp, #8]
+.L1744:
+	mov	r1, r4
+	mov	r2, r2, lsr #5
+	mov	r3, lr
+	bl	printk
+.L1665:
+	cmp	r10, #4
+	cmpls	r7, #4
+	bhi	.L1668
+.L1661:
+	add	fp, fp, #1
+	uxth	fp, fp
+	b	.L1659
+.L1668:
+	ldr	r3, .L1748
+	ldr	r3, [r3, #580]
+	str	r4, [r3, #580]
+.L1658:
+	ldr	r0, .L1748
+	cmp	r6, #0
+	ldrne	r3, [r0, #2288]
+	movne	r4, r0
+	ldrneh	r3, [r3, #134]
+	beq	.L1671
+.L1672:
+	ldr	r2, .L1748
+	add	r1, r2, #564
+	ldrh	r1, [r1]
+	cmp	r1, r3
+	bls	.L1746
+	ldr	ip, [r4, #568]
+	mov	lr, r3, asl #2
+	add	r8, ip, lr
+	ldr	r2, [ip, r3, asl #2]
+	ubfx	r1, r2, #11, #8
+	cmp	r1, r6
+	bcc	.L1673
+	ldrb	r8, [r8, #2]	@ zero_extendqisi2
+	tst	r8, #24
+	rsbne	r1, r6, r1
+	bfine	r2, r1, #11, #8
+	strne	r2, [ip, lr]
+.L1673:
+	add	r3, r3, #1
+	uxth	r3, r3
+	b	.L1672
+.L1746:
+	ldr	r3, [r2, #2288]
+	ldrh	r2, [r3, #72]
+	add	r2, r6, r2
+	strh	r2, [r3, #72]	@ movhi
+	ldrh	r2, [r3, #98]
+	cmp	r2, r6
+	rsbhi	r2, r6, r2
+	strhih	r2, [r3, #98]	@ movhi
+.L1671:
+	cmp	r5, #0
+	beq	.L1677
+	ldr	r3, [r0, #2288]
+	ldr	r4, .L1748
+	ldrh	r3, [r3, #134]
+.L1678:
+	ldr	r2, .L1748
+	add	r1, r2, #564
+	ldrh	r1, [r1]
+	cmp	r1, r3
+	bls	.L1747
+	ldr	ip, [r4, #568]
+	mov	r0, r3, asl #2
+	add	lr, ip, r0
+	ldrh	r2, [ip, r0]
+	ubfx	r1, r2, #0, #11
+	cmp	r1, r5
+	blt	.L1679
+	ldrb	lr, [lr, #2]	@ zero_extendqisi2
+	and	lr, lr, #24
+	cmp	lr, #16
+	rsbne	r1, r5, r1
+	bfine	r2, r1, #0, #11
+	strneh	r2, [ip, r0]	@ movhi
+.L1679:
+	add	r3, r3, #1
+	uxth	r3, r3
+	b	.L1678
+.L1747:
+	ldr	r3, [r2, #2288]
+	ldrh	r2, [r3, #74]
+	add	r2, r5, r2
+	strh	r2, [r3, #74]	@ movhi
+	ldrh	r2, [r3, #96]
+	cmp	r2, r5
+	rsbhi	r2, r5, r2
+	strhih	r2, [r3, #96]	@ movhi
+.L1677:
+	ldr	r0, .L1748+72
+	mov	r1, #0
+	bl	_list_get_gc_head_node
+	movw	r2, #65535
+	ldr	r4, .L1748
+	cmp	r0, r2
+	beq	.L1635
+	ldr	r2, [r4, #576]
+	mov	r3, r0, asl #1
+	add	r4, r4, #2960
+	ldrh	r2, [r2, r3]
+	ldrh	r3, [r4]
+	cmp	r2, r3
+	bhi	.L1635
+	mov	r1, #0
+	mov	r2, #1
+	bl	gc_add_sblk
+	add	r10, r10, #1
+.L1635:
+	add	r0, r7, r10
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1749:
+	.align	2
+.L1748:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC124
+	.word	.LC125
+	.word	.LANCHOR3
+	.word	.LANCHOR0+2312
+	.word	.LC126
+	.word	.LC127
+	.word	.LC128
+	.word	.LC129
+	.word	.LANCHOR3-3296
+	.word	.LC130
+	.word	.LANCHOR0+564
+	.word	.LANCHOR3-3298
+	.word	.LANCHOR0+2882
+	.word	.LC131
+	.word	.LANCHOR3-3300
+	.word	.LC132
+	.word	.LANCHOR0+2956
+	.fnend
+	.size	gc_static_wearleveling, .-gc_static_wearleveling
+	.align	2
+	.global	zftl_sblk_list_init
+	.type	zftl_sblk_list_init, %function
+zftl_sblk_list_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r2, #6
+	ldr	r6, .L1781
+	mov	r1, #0
+	.pad #20
+	sub	sp, sp, #20
+	mov	r9, #0
+	add	r8, r6, #564
+	add	r7, r6, #2272
+	ldr	r0, [r6, #524]
+	mov	r4, r6
+	ldrh	r3, [r8]
+	ldr	fp, .L1781+4
+	mul	r2, r2, r3
+	bl	ftl_memset
+	add	r3, r6, #2992
+	mov	r2, #16
+	strh	r9, [r7]	@ movhi
+	strh	r2, [r3]	@ movhi
+	movw	r3, #2274
+	strh	r9, [r6, r3]	@ movhi
+	movw	r3, #2276
+	strh	r9, [r6, r3]	@ movhi
+	movw	r3, #2278
+	strh	r9, [r6, r3]	@ movhi
+	movw	r3, #2282
+	strh	r9, [r6, r3]	@ movhi
+	movw	r2, #2962
+	movw	r3, #2280
+	ldrh	r1, [r6, r2]
+	strh	r9, [r6, r3]	@ movhi
+	mov	r0, #32768
+	ldrb	r3, [r6, #2964]	@ zero_extendqisi2
+	str	r9, [r6, #2980]
+	str	r9, [r6, #2984]
+	mul	r1, r1, r3
+	str	r9, [r6, #2988]
+	str	r9, [r6, #2948]
+	str	r9, [r6, #2968]
+	str	r9, [r6, #2956]
+	bl	__aeabi_idiv
+	uxth	r3, r0
+	str	r3, [sp]
+	ldr	r3, [r6, #2288]
+	str	r7, [sp, #8]
+	mov	r7, r6
+	str	r8, [sp, #4]
+	ldrh	r5, [r3, #134]
+	strh	r9, [r3, #146]	@ movhi
+.L1751:
+	ldr	r3, [sp, #4]
+	sxth	r2, r5
+	ldr	r1, .L1781
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bge	.L1779
+	ldr	r3, [r7, #568]
+	add	r8, r3, r2, asl #2
+	ldrb	r1, [r8, #3]	@ zero_extendqisi2
+	cmp	r1, #0
+	ldreq	r1, [sp]
+	beq	.L1752
+	ldrb	r6, [r7, #2964]	@ zero_extendqisi2
+	mov	ip, #0
+	ldrh	r9, [fp]
+	mov	r1, ip
+	ldr	lr, [r7, #2288]
+.L1753:
+	cmp	ip, r6
+	bge	.L1780
+	ldrb	r0, [r8, #3]	@ zero_extendqisi2
+	mov	r0, r0, asr ip
+	add	ip, ip, #1
+	tst	r0, #1
+	addeq	r1, r9, r1
+	ldrneh	r0, [lr, #146]
+	uxtheq	r1, r1
+	addne	r0, r0, #1
+	strneh	r0, [lr, #146]	@ movhi
+	b	.L1753
+.L1780:
+	cmp	r1, #0
+	beq	.L1757
+	sxth	r1, r1
+	mov	r0, #32768
+	str	r2, [sp, #12]
+	bl	__aeabi_idiv
+	add	r0, r0, #1
+	ldr	r2, [sp, #12]
+	uxth	r1, r0
+	b	.L1752
+.L1757:
+	ldrb	r0, [r8, #2]	@ zero_extendqisi2
+	mvn	lr, #0
+	orr	r0, r0, #224
+	strb	r0, [r8, #2]
+	ldr	ip, [r4, #576]
+	mov	r0, r2, asl #1
+	strh	lr, [ip, r0]	@ movhi
+.L1752:
+	mov	r10, r2, asl #1
+	ldr	lr, [r4, #524]
+	add	r0, r10, r2
+	mov	r0, r0, asl #1
+	add	r6, lr, r0
+	strh	r1, [r6, #4]	@ movhi
+	mvn	r1, #0
+	strh	r1, [r6, #2]	@ movhi
+	strh	r1, [lr, r0]	@ movhi
+	ldrb	r1, [r8, #2]	@ zero_extendqisi2
+	and	r6, r1, #224
+	cmp	r6, #32
+	cmpne	r6, #224
+	moveq	r9, #1
+	movne	r9, #0
+	beq	.L1759
+	ldr	r0, [r7, #580]
+	ldrh	lr, [r0, #16]
+	cmp	r2, lr
+	beq	.L1759
+	ldrh	lr, [r0, #48]
+	cmp	r2, lr
+	beq	.L1759
+	ldrh	r0, [r0, #80]
+	cmp	r2, r0
+	beq	.L1759
+	cmp	r6, #64
+	uxtheq	r6, r5
+	ldreq	r0, .L1781+8
+	ldreq	r2, .L1781+12
+	moveq	r1, r6
+	beq	.L1777
+.L1761:
+	cmp	r6, #96
+	uxtheq	r6, r5
+	ldreq	r0, .L1781+16
+	moveq	r1, r6
+	subeq	r2, r0, #668
+	beq	.L1777
+.L1762:
+	cmp	r6, #160
+	bne	.L1763
+	uxth	r6, r5
+	ldr	r0, .L1781+20
+	ldr	r2, .L1781+24
+	mov	r1, r6
+.L1777:
+	bl	_insert_data_list
+	ldr	r3, [r7, #576]
+	ldrh	r3, [r3, r10]
+	cmp	r3, #7
+	movls	r0, r6
+	movls	r1, #1
+	movls	r2, r9
+	bhi	.L1759
+	b	.L1775
+.L1763:
+	cmp	r6, #0
+	bne	.L1759
+	ldr	r0, [r7, #576]
+	uxth	r9, r5
+	ldrh	ip, [r0, r10]
+	cmp	ip, #0
+	beq	.L1764
+	mov	r1, r2
+	ldr	r0, .L1781+28
+	mov	r2, ip
+	bl	printk
+	ldrb	r2, [r8, #2]	@ zero_extendqisi2
+	mov	r0, r9
+	tst	r2, #16
+	movne	r1, #5
+	moveq	r1, #2
+	bfi	r2, r1, #5, #3
+	mov	r1, #1
+	strb	r2, [r8, #2]
+	mov	r2, r6
+.L1775:
+	bl	gc_add_sblk
+	b	.L1759
+.L1764:
+	ands	r1, r1, #24
+	ldreq	r0, .L1781+32
+	moveq	r1, r9
+	subeq	r2, r0, #708
+	beq	.L1773
+.L1766:
+	cmp	r1, #16
+	ldrne	r0, .L1781+36
+	moveq	r1, r9
+	ldreq	r0, .L1781+40
+	movne	r1, r9
+	ldreq	r2, .L1781+44
+	subne	r2, r0, #712
+.L1773:
+	bl	_insert_free_list
+.L1759:
+	add	r5, r5, #1
+	uxth	r5, r5
+	b	.L1751
+.L1779:
+	ldr	r2, [sp, #8]
+	ldr	r3, [r1, #2288]
+	ldrh	r2, [r2]
+	strh	r2, [r3, #114]	@ movhi
+	movw	r2, #2274
+	ldrh	r2, [r1, r2]
+	strh	r2, [r3, #118]	@ movhi
+	movw	r2, #2276
+	ldrh	r2, [r1, r2]
+	strh	r2, [r3, #116]	@ movhi
+	movw	r2, #2278
+	ldrh	r2, [r1, r2]
+	strh	r2, [r3, #122]	@ movhi
+	movw	r2, #2282
+	ldrh	r2, [r1, r2]
+	strh	r2, [r3, #120]	@ movhi
+	movw	r2, #2280
+	ldrh	r2, [r1, r2]
+	strh	r2, [r3, #124]	@ movhi
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1782:
+	.align	2
+.L1781:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2962
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+2278
+	.word	.LANCHOR0+2948
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2282
+	.word	.LC133
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+2988
+	.word	.LANCHOR0+2984
+	.word	.LANCHOR0+2274
+	.fnend
+	.size	zftl_sblk_list_init, .-zftl_sblk_list_init
+	.align	2
+	.global	pm_free_sblk
+	.type	pm_free_sblk, %function
+pm_free_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 280
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1814
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #292
+	sub	sp, sp, #292
+	ldr	r2, [r3]
+	ldr	lr, .L1814+4
+	str	r3, [sp, #8]
+	str	r2, [sp, #284]
+	ldrh	r2, [lr]
+	mov	r5, lr
+	cmp	r2, #128
+	bls	.L1784
+	ldr	r1, .L1814+8
+	mov	r2, #84
+	ldr	r0, .L1814+12
+	bl	printk
+	bl	dump_stack
+.L1784:
+	ldr	r4, .L1814+16
+	movw	lr, #65535
+	ldrh	ip, [r5]
+	ldr	r3, [r4, #2288]
+	add	r2, r3, #688
+	add	r3, r3, #412
+	add	r3, r3, #2
+	ldrh	r0, [r2]
+	mov	r2, #0
+	mov	r1, r2
+.L1787:
+	ldrh	r6, [r3, #2]!
+	uxth	r5, r2
+	cmp	r6, lr
+	addne	r1, r1, #1
+	uxthne	r1, r1
+	cmp	r1, r0
+	bcs	.L1786
+	cmp	r1, ip
+	bcs	.L1786
+	add	r2, r2, #1
+	cmp	r2, #128
+	bne	.L1787
+	mov	r5, r2
+.L1786:
+	add	r5, r5, #1
+	add	r0, sp, #28
+	mov	r1, #0
+	mov	r2, #256
+	uxth	r5, r5
+	mvn	r8, #0
+	cmp	r5, #128
+	mov	r6, #0
+	movcs	r5, #128
+	bl	ftl_memset
+	ldr	r7, [r4, #2288]
+	movw	r3, #698
+	ldrb	ip, [r4, #2930]	@ zero_extendqisi2
+	add	r10, r7, #700
+	ldrh	fp, [r7, r3]
+	ldr	r3, .L1814+20
+	ldrh	r9, [r3]
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	rsb	r3, r3, #24
+	rsb	r3, r9, r3
+	mvn	r8, r8, asl r3
+.L1788:
+	uxth	r3, r6
+	cmp	r3, fp
+	bcs	.L1811
+	ldr	r0, [r10, #4]!
+	mov	r1, ip
+	str	ip, [sp, #12]
+	and	r0, r8, r0, lsr r9
+	bl	__aeabi_uidiv
+	add	r3, r7, #412
+	add	r3, r3, #2
+	mov	r1, #0
+	ldr	ip, [sp, #12]
+	uxth	r0, r0
+	add	r2, sp, #28
+.L1789:
+	uxth	lr, r1
+	cmp	lr, r5
+	bcs	.L1812
+	ldrh	lr, [r3, #2]!
+	add	r1, r1, #1
+	add	r2, r2, #2
+	cmp	lr, r0
+	ldreqh	lr, [r2, #-2]
+	addeq	lr, lr, #1
+	streqh	lr, [r2, #-2]	@ movhi
+	b	.L1789
+.L1812:
+	add	r6, r6, #1
+	b	.L1788
+.L1811:
+	ldr	r9, .L1814+24
+	mov	r6, #0
+	ldrb	r7, [r4, #2964]	@ zero_extendqisi2
+	add	r8, sp, #28
+	movw	fp, #65535
+	mov	r10, r6
+	ldrh	r3, [r9]
+	str	r9, [sp, #12]
+	smulbb	r7, r7, r3
+	uxth	r7, r7
+.L1793:
+	uxth	r9, r6
+	cmp	r9, r5
+	bcs	.L1813
+	add	r3, r6, #208
+	ldr	r2, [r4, #2288]
+	mov	r3, r3, asl #1
+	add	r1, r2, #692
+	str	r2, [sp, #16]
+	ldrh	r3, [r2, r3]
+	ldrh	r0, [r1]
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	str	r3, [sp, #20]
+	bl	__aeabi_idiv
+	ldr	r3, [sp, #20]
+	ldr	r2, [sp, #16]
+	cmp	r0, r3
+	ldreq	r1, .L1814+16
+	ldreqb	r0, [r1, #2964]	@ zero_extendqisi2
+	ldreq	r1, [sp, #12]
+	ldreqh	r1, [r1]
+	smulbbeq	r1, r0, r1
+	movw	r0, #65535
+	streqh	r1, [r8]	@ movhi
+	ldrh	lr, [r8]
+	cmp	lr, #0
+	cmpne	r7, lr
+	movhi	r1, #1
+	movls	r1, #0
+	cmp	r1, #0
+	ldrh	r1, [r2, #74]
+	movne	r10, r9
+	movne	r7, lr
+	cmp	r3, r0
+	cmpne	r1, #2
+	bls	.L1796
+	ldr	r0, [r4, #568]
+	mov	r1, r3, asl #2
+	ldrh	r2, [r2, #92]
+	ldrh	r1, [r0, r1]
+	add	r2, r2, #4
+	ubfx	r1, r1, #0, #11
+	cmp	r1, r2
+	bgt	.L1796
+	str	r1, [sp]
+	mov	r2, lr
+	ldr	r0, .L1814+28
+	mov	r1, r6
+	bl	printk
+	mov	fp, r9
+.L1796:
+	ldrh	r2, [r8]
+	cmp	r2, #0
+	bne	.L1797
+	add	r9, r6, #208
+	ldr	r1, [r4, #2288]
+	movw	r0, #65535
+	mov	r3, r9, asl #1
+	ldrh	r3, [r1, r3]
+	cmp	r3, r0
+	beq	.L1797
+	ldr	r0, .L1814+32
+	ldr	r0, [r0]
+	tst	r0, #4096
+	beq	.L1798
+	add	r1, r1, #688
+	ldr	r0, .L1814+36
+	ldrh	r1, [r1]
+	str	r1, [sp]
+	mov	r1, r6
+	bl	printk
+.L1798:
+	ldr	r3, [r4, #2288]
+	mov	r9, r9, asl #1
+	ldrh	r0, [r3, r9]
+	bl	ftl_free_sblk
+	ldr	r3, [r4, #2288]
+	mvn	r2, #0
+	strh	r2, [r3, r9]	@ movhi
+	add	r3, r3, #688
+	ldrh	r2, [r3]
+	sub	r2, r2, #1
+	strh	r2, [r3]	@ movhi
+.L1797:
+	add	r6, r6, #1
+	add	r8, r8, #2
+	b	.L1793
+.L1813:
+	ldr	r3, [sp, #8]
+	movw	r0, #65535
+	ldr	r2, [sp, #284]
+	cmp	fp, r0
+	ldr	r3, [r3]
+	movne	r0, fp
+	moveq	r0, r10
+	cmp	r2, r3
+	beq	.L1801
+	bl	__stack_chk_fail
+.L1801:
+	add	sp, sp, #292
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1815:
+	.align	2
+.L1814:
+	.word	__stack_chk_guard
+	.word	.LANCHOR3-3296
+	.word	.LANCHOR1+1496
+	.word	.LC0
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR0+2960
+	.word	.LC134
+	.word	.LANCHOR2
+	.word	.LC135
+	.fnend
+	.size	pm_free_sblk, .-pm_free_sblk
+	.align	2
+	.global	ftl_memcpy
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcpy
+	.fnend
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	flash_info_data_init
+	.type	flash_info_data_init, %function
+flash_info_data_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1823
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L1818
+	ldr	r0, .L1823+4
+	mov	r1, #105
+	ldr	r2, .L1823+8
+	bl	printk
+.L1818:
+	ldr	r4, .L1823+12
+	mov	r1, #0
+	mov	r2, #2048
+	ldr	r0, [r4, #664]
+	bl	ftl_memset
+	ldr	r3, [r4, #664]
+	ldr	r2, .L1823+16
+	ldr	r1, .L1823+20
+	str	r2, [r3]
+	mov	r3, #2032
+	ldr	r0, [r4, #664]
+	mov	r2, #32
+	add	r0, r0, #80
+	str	r3, [r0, #-72]
+	mov	r3, #1
+	strh	r3, [r0, #-64]	@ movhi
+	bl	ftl_memcpy
+	ldr	r0, [r4, #664]
+	ldr	r1, .L1823+24
+	mov	r2, #32
+	add	r0, r0, #48
+	ldmfd	sp!, {r4, lr}
+	b	ftl_memcpy
+.L1824:
+	.align	2
+.L1823:
+	.word	.LANCHOR2
+	.word	.LC136
+	.word	.LANCHOR1+1512
+	.word	.LANCHOR0
+	.word	1398362953
+	.word	.LANCHOR0+591
+	.word	.LANCHOR2+4
+	.fnend
+	.size	flash_info_data_init, .-flash_info_data_init
+	.align	2
+	.global	ftl_memcpy32
+	.type	ftl_memcpy32, %function
+ftl_memcpy32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r3, #0
+.L1826:
+	cmp	r3, r2
+	ldrne	ip, [r1, r3, asl #2]
+	strne	ip, [r0, r3, asl #2]
+	addne	r3, r3, #1
+	bne	.L1826
+.L1828:
+	bx	lr
+	.fnend
+	.size	ftl_memcpy32, .-ftl_memcpy32
+	.align	2
+	.global	ftl_memcmp
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcmp
+	.fnend
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	2
+	.global	timer_get_time
+	.type	timer_get_time, %function
+timer_get_time:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1831
+	ldr	r0, [r3]
+	ldr	r3, .L1831+4
+	ldr	r3, [r3, #-3288]
+	rsb	r0, r3, r0
+	b	jiffies_to_msecs
+.L1832:
+	.align	2
+.L1831:
+	.word	jiffies
+	.word	.LANCHOR3
+	.fnend
+	.size	timer_get_time, .-timer_get_time
+	.align	2
+	.global	StorageSysDataLoad
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #512
+	mov	r5, r0
+	mov	r4, r1
+	mov	r0, r1
+	mov	r1, #0
+	bl	ftl_memset
+	bl	rknand_device_lock
+	ldr	r3, .L1835
+	mov	r2, r4
+	mov	r1, #1
+	mov	r0, r5
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #12]
+	blx	r3
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1836:
+	.align	2
+.L1835:
+	.word	.LANCHOR3
+	.fnend
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.align	2
+	.global	StorageSysDataStore
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r1
+	mov	r5, r0
+	bl	rknand_device_lock
+	ldr	r3, .L1839
+	mov	r2, r4
+	mov	r1, #1
+	mov	r0, r5
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #16]
+	blx	r3
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1840:
+	.align	2
+.L1839:
+	.word	.LANCHOR3
+	.fnend
+	.size	StorageSysDataStore, .-StorageSysDataStore
+	.align	2
+	.global	FlashBootVendorRead
+	.type	FlashBootVendorRead, %function
+FlashBootVendorRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	ldr	r3, .L1843
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #4]
+	blx	r3
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1844:
+	.align	2
+.L1843:
+	.word	.LANCHOR3
+	.fnend
+	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.align	2
+	.global	FlashBootVendorWrite
+	.type	FlashBootVendorWrite, %function
+FlashBootVendorWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	ldr	r3, .L1847
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #8]
+	blx	r3
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1848:
+	.align	2
+.L1847:
+	.word	.LANCHOR3
+	.fnend
+	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
+	.align	2
+	.global	flash_sram_load_store
+	.type	flash_sram_load_store, %function
+flash_sram_load_store:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L1853
+	cmp	r2, #0
+	moveq	r2, r3
+	ldr	ip, [ip, #-3276]
+	add	ip, ip, #4096
+	add	r1, ip, r1
+	beq	.L1852
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	lr, r0
+	mov	r0, r1
+	mov	r1, lr
+	ldr	lr, [sp], #4
+	mov	r2, r3
+.L1852:
+	b	ftl_memcpy
+.L1854:
+	.align	2
+.L1853:
+	.word	.LANCHOR3
+	.fnend
+	.size	flash_sram_load_store, .-flash_sram_load_store
+	.align	2
+	.global	FlashCs123Init
+	.type	FlashCs123Init, %function
+FlashCs123Init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashCs123Init, .-FlashCs123Init
+	.align	2
+	.global	rk_ftl_de_init
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r1, #0
+	ldr	r0, .L1858
+	bl	printk
+	ldr	r3, .L1858+4
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #40]
+	ldmfd	sp!, {r4, lr}
+	bx	r3	@ indirect register sibling call
+.L1859:
+	.align	2
+.L1858:
+	.word	.LC137
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1861
+	mov	r0, #0
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #32]
+	bx	r3	@ indirect register sibling call
+.L1862:
+	.align	2
+.L1861:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
+	.global	rk_nand_suspend
+	.type	rk_nand_suspend, %function
+rk_nand_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1864
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #44]
+	bx	r3	@ indirect register sibling call
+.L1865:
+	.align	2
+.L1864:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_nand_suspend, .-rk_nand_suspend
+	.align	2
+	.global	rk_nand_resume
+	.type	rk_nand_resume, %function
+rk_nand_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1867
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #48]
+	bx	r3	@ indirect register sibling call
+.L1868:
+	.align	2
+.L1867:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_nand_resume, .-rk_nand_resume
+	.align	2
+	.global	rk_ftl_get_capacity
+	.type	rk_ftl_get_capacity, %function
+rk_ftl_get_capacity:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1870
+	mov	r0, #0
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #36]
+	bx	r3
+.L1871:
+	.align	2
+.L1870:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
+	.align	2
+	.global	rk_nandc_get_irq_status
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1873
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #60]
+	bx	r3
+.L1874:
+	.align	2
+.L1873:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	2
+	.global	rknand_proc_ftlread
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1876
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #64]
+	bx	r3
+.L1877:
+	.align	2
+.L1876:
+	.word	.LANCHOR3
+	.fnend
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	2
+	.global	FtlRead
+	.type	FtlRead, %function
+FtlRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	ip, .L1879
+	ldr	ip, [ip, #-3280]
+	ldr	ip, [ip, #20]
+	bx	ip
+.L1880:
+	.align	2
+.L1879:
+	.word	.LANCHOR3
+	.fnend
+	.size	FtlRead, .-FtlRead
+	.align	2
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1882
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #28]
+	bx	r3
+.L1883:
+	.align	2
+.L1882:
+	.word	.LANCHOR3
+	.fnend
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
+	.global	rk_ftl_garbage_collect
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1885
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #52]
+	bx	r3
+.L1886:
+	.align	2
+.L1885:
+	.word	.LANCHOR3
+	.fnend
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	2
+	.global	ReadFlashInfo
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1888
+	ldr	r3, [r3, #-3280]
+	ldr	r3, [r3, #56]
+	bx	r3	@ indirect register sibling call
+.L1889:
+	.align	2
+.L1888:
+	.word	.LANCHOR3
+	.fnend
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	2
+	.global	rknand_print_hex
+	.type	rknand_print_hex, %function
+rknand_print_hex:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #0
+	mov	r9, r0
+	mov	r6, r1
+	mov	r7, r2
+	mov	r8, r3
+	mov	r4, r5
+.L1891:
+	cmp	r4, r8
+	beq	.L1900
+	cmp	r5, #0
+	bne	.L1892
+	ldr	r0, .L1901
+	mov	r1, r9
+	mov	r2, r6
+	mov	r3, r4
+	bl	printk
+.L1892:
+	cmp	r7, #4
+	ldreq	r0, .L1901+4
+	ldreq	r1, [r6, r4, asl #2]
+	beq	.L1899
+	cmp	r7, #2
+	moveq	r3, r4, asl #1
+	ldreq	r0, .L1901+4
+	ldreqsh	r1, [r6, r3]
+	ldrne	r0, .L1901+4
+	ldrneb	r1, [r6, r4]	@ zero_extendqisi2
+.L1899:
+	add	r5, r5, #1
+	bl	printk
+	cmp	r5, #15
+	bls	.L1896
+	ldr	r0, .L1901+8
+	mov	r5, #0
+	ldr	r1, .L1901+12
+	bl	printk
+.L1896:
+	add	r4, r4, #1
+	b	.L1891
+.L1900:
+	ldr	r0, .L1901+8
+	ldr	r1, .L1901+12
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	b	printk
+.L1902:
+	.align	2
+.L1901:
+	.word	.LC138
+	.word	.LC139
+	.word	.LC1
+	.word	.LC140
+	.fnend
+	.size	rknand_print_hex, .-rknand_print_hex
+	.align	2
+	.global	hynix_get_read_retry_default
+	.type	hynix_get_read_retry_default, %function
+hynix_get_read_retry_default:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r0, #2
+	ldr	r8, .L2014
+	.pad #36
+	sub	sp, sp, #36
+	mvn	r7, #81
+	mvn	r6, #80
+	mov	r5, r0
+	ldr	r4, [r8, #664]
+	add	r3, r4, #128
+	str	r3, [sp]
+	strb	r0, [r4, #112]
+	mvn	r3, #83
+	strb	r7, [r4, #130]
+	strb	r3, [r4, #128]
+	mvn	r3, #82
+	strb	r6, [r4, #131]
+	strb	r3, [r4, #129]
+	bne	.L1904
+	mvn	r3, #88
+	strb	r3, [r4, #128]
+	ldr	r3, .L2014+4
+	mvn	r1, #8
+	mov	r6, #7
+	strb	r1, [r3, #413]
+	b	.L1965
+.L1904:
+	cmp	r0, #3
+	bne	.L1906
+	add	r1, r4, #127
+	mov	r3, #176
+.L1907:
+	strb	r3, [r1, #1]!
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #184
+	bne	.L1907
+	b	.L2008
+.L1906:
+	cmp	r0, #4
+	bne	.L1908
+	mvn	r1, #51
+	strb	r3, [r4, #133]
+	strb	r1, [r4, #128]
+	mvn	r1, #64
+	strb	r7, [r4, #134]
+	strb	r1, [r4, #129]
+	mvn	r1, #85
+	strb	r6, [r4, #135]
+	strb	r1, [r4, #130]
+	mvn	r1, #84
+	strb	r1, [r4, #131]
+	mvn	r1, #50
+	strb	r1, [r4, #132]
+.L2008:
+	mov	r6, #8
+	mov	fp, r6
+	b	.L1905
+.L1908:
+	cmp	r0, #5
+	bne	.L1909
+	mov	r3, #56
+	mov	r6, #8
+	strb	r3, [r4, #128]
+	mov	r3, #57
+	strb	r3, [r4, #129]
+	mov	r3, #58
+	strb	r3, [r4, #130]
+	mov	r3, #59
+	strb	r3, [r4, #131]
+	b	.L1965
+.L1909:
+	cmp	r0, #6
+	bne	.L1910
+	mov	r3, #14
+	mov	r6, #12
+	strb	r3, [r4, #128]
+	mov	r3, #15
+	strb	r3, [r4, #129]
+	mov	r3, #16
+	strb	r3, [r4, #130]
+	mov	r3, #17
+	strb	r3, [r4, #131]
+	b	.L1965
+.L1910:
+	cmp	r0, #7
+	bne	.L1911
+	add	r1, r4, #127
+	mov	r3, #176
+.L1912:
+	strb	r3, [r1, #1]!
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #184
+	bne	.L1912
+	mvn	r3, #43
+	mov	r6, #12
+	strb	r3, [r4, #136]
+	mov	fp, #10
+	mvn	r3, #42
+	strb	r3, [r4, #137]
+	b	.L1905
+.L1911:
+	cmp	r0, #8
+	mov	r6, #7
+	bne	.L1965
+	mov	r3, #6
+	strb	r6, [r4, #129]
+	strb	r3, [r4, #128]
+	mov	r6, #50
+	mov	r3, #9
+	strb	r0, [r4, #130]
+	strb	r3, [r4, #131]
+	mov	fp, #5
+	mov	r3, #10
+	strb	r3, [r4, #132]
+	b	.L1905
+.L1965:
+	mov	fp, #4
+.L1905:
+	sub	r3, r5, #1
+	cmp	r3, #1
+	bhi	.L2004
+	ldr	r1, .L2014+8
+	mov	r9, #0
+.L1913:
+	ldrb	ip, [r8, #589]	@ zero_extendqisi2
+	uxtb	r3, r9
+	ldr	r0, .L2014
+	cmp	ip, r3
+	bls	.L1920
+	add	r3, r0, r3
+	mov	r5, #160
+	ldr	r0, [r0, #528]
+	sub	r10, fp, #1
+	ldrb	r7, [r3, #668]	@ zero_extendqisi2
+	add	r2, r4, #127
+	ldr	ip, [sp]
+	mla	r5, r5, r7, r4
+	add	r7, r0, r7, asl #8
+	uxtab	r10, ip, r10
+	mov	ip, #55
+	add	r5, r5, #144
+	sub	r3, r5, #1
+.L1915:
+	str	ip, [r7, #2056]
+	ldrb	r0, [r2, #1]!	@ zero_extendqisi2
+	str	r1, [sp, #16]
+	str	r3, [sp, #12]
+	str	r0, [r7, #2052]
+	mov	r0, #80
+	str	ip, [sp, #8]
+	str	r2, [sp, #4]
+	str	r2, [sp, #20]
+	bl	timer_delay_ns
+	ldr	r0, [r7, #2048]
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #12]
+	cmp	r2, r10
+	ldr	ip, [sp, #8]
+	ldr	r1, [sp, #16]
+	strb	r0, [r3, #1]!
+	bne	.L1915
+	mov	ip, r5
+	mov	r0, #0
+.L1916:
+	add	r7, r1, r0
+	mov	r3, #1
+.L1917:
+	ldrb	lr, [r7, r3, asl #2]	@ zero_extendqisi2
+	ldrb	r10, [ip]	@ zero_extendqisi2
+	add	lr, lr, r10
+	strb	lr, [ip, r3, asl #3]
+	add	r3, r3, #1
+	cmp	r3, #7
+	bne	.L1917
+	add	r0, r0, #1
+	add	ip, ip, #1
+	cmp	r0, #4
+	bne	.L1916
+	mov	r3, #0
+	add	r9, r9, #1
+	strb	r3, [r5, #16]
+	strb	r3, [r5, #24]
+	strb	r3, [r5, #32]
+	strb	r3, [r5, #40]
+	strb	r3, [r5, #48]
+	strb	r3, [r5, #41]
+	strb	r3, [r5, #49]
+	b	.L1913
+.L2004:
+	sub	r3, r5, #3
+	cmp	r3, #5
+	bhi	.L1920
+	smulbb	r2, fp, r6
+	mov	r3, r2, asl #4
+	mov	r2, r2, asr #1
+	str	r3, [sp, #28]
+	mov	r3, r2, asl #1
+	str	r3, [sp, #8]
+	mov	r3, #0
+.L2012:
+	str	r3, [sp, #12]
+	ldr	r3, .L2014
+	ldrb	r2, [r3, #589]	@ zero_extendqisi2
+	ldrb	r3, [sp, #12]	@ zero_extendqisi2
+	cmp	r2, r3
+	bhi	.L1964
+.L1920:
+	strb	fp, [r4, #113]
+	strb	r6, [r4, #114]
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1964:
+	ldr	r2, .L2014
+	mov	r10, #160
+	mov	r9, #255
+	add	r3, r2, r3
+	ldrb	r3, [r3, #668]	@ zero_extendqisi2
+	mov	r0, r3
+	str	r3, [sp]
+	bl	zftl_flash_exit_slc_mode
+	ldr	r3, [sp]
+	mla	r10, r10, r3, r4
+	add	r3, r10, #144
+	str	r3, [sp, #24]
+	ldr	r3, .L2014
+	ldr	r3, [r3, #528]
+	str	r3, [sp, #4]
+	ldr	r3, [sp]
+	mov	r8, r3, asl #8
+	ldr	r3, [sp, #4]
+	add	r7, r3, r8
+	str	r9, [r7, #2056]
+	bl	nandc_wait_flash_ready
+	cmp	r5, #8
+	bne	.L1922
+	add	r3, r4, #144
+	mov	r2, #23
+	mov	r1, #25
+	str	r3, [sp, #24]
+	mov	r3, #120
+	str	r3, [r7, #2056]
+	mov	r3, #0
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r2, [r7, #2056]
+	mov	r2, #4
+	str	r2, [r7, #2056]
+	str	r1, [r7, #2056]
+	mov	r1, #218
+	str	r1, [r7, #2056]
+	mov	r1, #21
+	str	r3, [r7, #2056]
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	str	r1, [r7, #2052]
+	str	r2, [r7, #2052]
+	str	r3, [r7, #2052]
+	b	.L1923
+.L1922:
+	cmp	r5, #4
+	mov	r3, #54
+	str	r3, [r7, #2056]
+	moveq	r3, #64
+	streq	r9, [r7, #2052]
+	streq	r3, [r7, #2048]
+	moveq	r3, #204
+	beq	.L2009
+.L1924:
+	sub	r3, r5, #5
+	cmp	r3, #1
+	ldrlsb	r3, [r4, #128]	@ zero_extendqisi2
+	strls	r3, [r7, #2052]
+	movls	r3, #82
+	bls	.L2010
+	cmp	r5, #7
+	bne	.L1925
+	mov	r3, #174
+	str	r3, [r7, #2052]
+	mov	r3, #0
+	str	r3, [r7, #2048]
+	mov	r3, #176
+.L2009:
+	str	r3, [r7, #2052]
+	mov	r3, #77
+.L2010:
+	str	r3, [r7, #2048]
+.L1925:
+	ldr	r3, [sp, #4]
+	cmp	r5, #6
+	add	r8, r3, r8
+	mov	r3, #22
+	str	r3, [r8, #2056]
+	mov	r3, #23
+	str	r3, [r8, #2056]
+	mov	r3, #4
+	str	r3, [r8, #2056]
+	mov	r3, #25
+	str	r3, [r8, #2056]
+	mov	r3, #0
+	str	r3, [r8, #2056]
+	str	r3, [r8, #2052]
+	str	r3, [r8, #2052]
+	moveq	r3, #31
+	str	r3, [r8, #2052]
+	mov	r3, #2
+	str	r3, [r8, #2052]
+	mov	r3, #0
+	str	r3, [r8, #2052]
+.L1923:
+	ldmia	sp, {r2, r3}
+	sub	r10, r5, #8
+	sub	r8, r5, #5
+	clz	r10, r10
+	add	r3, r3, r2, asl #8
+	mov	r2, #48
+	mov	r10, r10, lsr #5
+	str	r2, [r3, #2056]
+	bl	nandc_wait_flash_ready
+	cmp	r8, #1
+	movhi	r3, #0
+	movls	r3, #1
+	str	r3, [sp, #16]
+	orrs	r3, r3, r10
+	movne	ip, #16
+	bne	.L1929
+	cmp	r5, #7
+	movne	ip, #2
+	moveq	ip, #32
+.L1929:
+	ldr	r3, .L2014+12
+	ldmia	sp, {r1, r2}
+	ldr	r3, [r3, #-3272]
+	add	r1, r2, r1, asl #8
+	mov	r0, r3
+.L1930:
+	ldr	r2, [r1, #2048]
+	strb	r2, [r0], #1
+	rsb	r2, r3, r0
+	uxtb	r2, r2
+	cmp	r2, ip
+	bcc	.L1930
+	cmp	r10, #0
+	beq	.L1931
+	mov	r2, #0
+.L1933:
+	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
+	uxtb	r0, r2
+	cmp	ip, #50
+	beq	.L1932
+	add	ip, r3, r2, asl #2
+	ldrb	ip, [ip, #1]	@ zero_extendqisi2
+	cmp	ip, #5
+	beq	.L1932
+	add	r2, r2, #1
+	cmp	r2, #8
+	bne	.L1933
+	b	.L1934
+.L1932:
+	cmp	r0, #7
+	bne	.L1935
+.L1934:
+	ldr	r0, .L2014+16
+	mov	r1, #0
+	bl	printk
+.L1936:
+	b	.L1936
+.L1931:
+	cmp	r5, #7
+	bne	.L1937
+	mov	r2, r10
+.L1939:
+	ldrb	ip, [r3, r2, asl #2]	@ zero_extendqisi2
+	uxtb	r0, r2
+	cmp	ip, #12
+	beq	.L1938
+	add	ip, r3, r2, asl #2
+	ldrb	ip, [ip, #1]	@ zero_extendqisi2
+	cmp	ip, #10
+	beq	.L1938
+	add	r2, r2, #1
+	cmp	r2, #8
+	bne	.L1939
+	b	.L1940
+.L1938:
+	cmp	r0, #7
+	bne	.L1935
+.L1940:
+	ldr	r0, .L2014+16
+	mov	r1, #0
+	bl	printk
+.L1941:
+	b	.L1941
+.L1937:
+	cmp	r5, #6
+	bne	.L1935
+	sub	r2, r3, #1
+	add	r3, r3, #7
+.L1942:
+	ldrb	r0, [r2, #1]!	@ zero_extendqisi2
+	cmp	r0, #12
+	beq	.L1935
+	ldrb	r0, [r2, #8]	@ zero_extendqisi2
+	cmp	r0, #4
+	beq	.L1935
+	cmp	r2, r3
+	bne	.L1942
+	ldr	r0, .L2014+16
+	mov	r1, #0
+	bl	printk
+.L1944:
+	b	.L1944
+.L1935:
+	ldr	r3, .L2014+12
+	ldr	r0, [sp, #28]
+	ldr	r2, [r3, #-3272]
+	add	r0, r2, r0
+	mov	r3, r2
+.L1945:
+	cmp	r3, r0
+	ldrne	ip, [r1, #2048]
+	strneb	ip, [r3], #1
+	bne	.L1945
+.L2013:
+	ldr	r3, .L2014+12
+	mov	r0, #8
+	ldr	r1, [sp, #8]
+	ldr	r3, [r3, #-3272]
+	add	r1, r3, r1
+	str	r1, [sp, #20]
+.L1948:
+	ldr	ip, [sp, #8]
+	add	lr, r1, ip
+.L1947:
+	ldrh	ip, [r1]
+	mvn	ip, ip
+	strh	ip, [r1], #2	@ movhi
+	cmp	r1, lr
+	bne	.L1947
+	ldr	ip, [sp, #8]
+	subs	r0, r0, #1
+	add	r1, r1, ip
+	bne	.L1948
+.L1949:
+	mov	ip, #0
+	mov	r0, ip
+.L1952:
+	mov	r1, #1
+	mov	lr, #0
+	mov	r1, r1, asl r0
+	mov	r8, #16
+	mov	r7, lr
+.L1950:
+	ldrh	r9, [r3, lr]
+	and	r9, r9, r1
+	cmp	r9, r1
+	addeq	r7, r7, #1
+	ldr	r9, [sp, #8]
+	subs	r8, r8, #1
+	add	lr, lr, r9
+	bne	.L1950
+	cmp	r7, #8
+	add	r0, r0, #1
+	orrhi	ip, ip, r1
+	uxthhi	ip, ip
+	cmp	r0, #16
+	bne	.L1952
+	ldr	r1, [sp, #20]
+	strh	ip, [r3], #2	@ movhi
+	cmp	r3, r1
+	bne	.L1949
+	ldr	r3, .L2014+12
+	ldr	r1, [r3, #-3272]
+	mov	r3, #0
+	sub	r0, r1, #4
+	add	ip, r1, #28
+.L1954:
+	ldr	lr, [r0, #4]!
+	cmp	lr, #0
+	addeq	r3, r3, #1
+	cmp	r0, ip
+	bne	.L1954
+	cmp	r3, #7
+	ble	.L1955
+	ldr	r0, .L2014+20
+	mov	r2, #1
+	mov	r3, #1024
+	bl	rknand_print_hex
+	ldr	r0, .L2014+16
+	mov	r1, #0
+	bl	printk
+.L1956:
+	b	.L1956
+.L1955:
+	cmp	r5, #6
+	moveq	r0, #4
+	beq	.L1957
+	cmp	r5, #7
+	moveq	r0, #10
+	beq	.L1957
+	cmp	r10, #0
+	moveq	r0, #8
+	movne	r0, #5
+.L1957:
+	sub	r9, fp, #1
+	ldr	r1, [sp, #24]
+	mov	ip, #0
+	uxtb	r9, r9
+	add	r9, r9, #1
+.L1958:
+	mov	r7, r1
+	mov	r3, r2
+.L1959:
+	ldrb	lr, [r3], #1	@ zero_extendqisi2
+	strb	lr, [r7], #1
+	rsb	lr, r2, r3
+	uxtb	lr, lr
+	cmp	lr, fp
+	bcc	.L1959
+	add	ip, ip, #1
+	add	r2, r2, r9
+	cmp	ip, r6
+	add	r1, r1, r0
+	blt	.L1958
+	ldmia	sp, {r2, r3}
+	mov	r8, #255
+	add	r7, r3, r2, asl #8
+	str	r8, [r7, #2056]
+	bl	nandc_wait_flash_ready
+	ldr	r3, [sp, #16]
+	cmp	r3, #0
+	beq	.L1961
+	mov	r3, #54
+	str	r3, [r7, #2056]
+	ldrb	r3, [r4, #128]	@ zero_extendqisi2
+	mov	r2, #22
+	str	r3, [r7, #2052]
+	mov	r3, #0
+	str	r3, [r7, #2048]
+	str	r2, [r7, #2056]
+	str	r3, [r7, #2056]
+	str	r3, [r7, #2052]
+	str	r3, [r7, #2052]
+	mov	r3, #48
+	str	r8, [r7, #2052]
+	str	r8, [r7, #2052]
+	str	r8, [r7, #2052]
+	b	.L2011
+.L1961:
+	cmp	r10, #0
+	movne	r3, #190
+	moveq	r3, #56
+.L2011:
+	str	r3, [r7, #2056]
+	bl	nandc_wait_flash_ready
+	ldr	r3, [sp, #12]
+	add	r3, r3, #1
+	b	.L2012
+.L2015:
+	.align	2
+.L2014:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+396
+	.word	.LANCHOR3
+	.word	.LC141
+	.word	.LC142
+	.fnend
+	.size	hynix_get_read_retry_default, .-hynix_get_read_retry_default
+	.align	2
+	.global	flash_get_read_retry_tbl
+	.type	flash_get_read_retry_tbl, %function
+flash_get_read_retry_tbl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L2018
+	ldrb	r0, [r3, #23]	@ zero_extendqisi2
+	sub	r3, r0, #1
+	cmp	r3, #7
+	bxhi	lr
+	b	hynix_get_read_retry_default
+.L2019:
+	.align	2
+.L2018:
+	.word	.LANCHOR2
+	.fnend
+	.size	flash_get_read_retry_tbl, .-flash_get_read_retry_tbl
+	.align	2
+	.global	nandc_xfer_done
+	.type	nandc_xfer_done, %function
+nandc_xfer_done:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	ldr	r5, .L2069
+	ldr	r7, .L2069+4
+	ldr	r0, [r5, #528]
+	mov	r4, r5
+	bl	wait_for_nandc_xfer_completed
+	ldrb	r3, [r5, #516]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r6, [r5, #528]
+	cmp	r3, #9
+	strb	r1, [r7, #-3268]
+	bne	.L2021
+	ldr	r3, [r6, #16]
+	str	r3, [sp]
+	ldr	r5, [r6, #48]
+	ubfx	r5, r5, #1, #1
+	cmp	r5, r1
+	moveq	r7, r4
+	beq	.L2023
+.L2022:
+	ldr	r2, [r6, #64]
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #6
+	ubfx	r3, r3, #22, #6
+	cmp	r2, r3
+	bge	.L2025
+	ldr	r3, [r6]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #8192
+	beq	.L2024
+	ldr	r3, [sp, #4]
+	tst	r3, #131072
+	beq	.L2024
+	ldr	r1, [sp, #4]
+	ldr	r0, .L2069+8
+	ubfx	r1, r1, #17, #1
+	bl	printk
+	b	.L2025
+.L2024:
+	ldr	r3, [sp]
+	add	r1, r1, #1
+	ubfx	r3, r3, #22, #6
+	cmp	r1, r3, asl #12
+	bne	.L2022
+	ldr	r2, [r6, #64]
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ldr	r0, .L2069+12
+	ubfx	r3, r3, #22, #6
+	bl	printk
+	mov	r3, #64
+	ldr	r0, .L2069+16
+	mov	r2, #4
+	ldr	r1, [r4, #528]
+	bl	rknand_print_hex
+	ldr	r3, [sp, #4]
+	tst	r3, #8192
+	mov	r3, #1
+	strb	r3, [r7, #-3268]
+	bne	.L2025
+	ldr	r3, .L2069+20
+	ldr	r0, .L2069+24
+	ldr	r3, [r3, #4]
+	blx	r3
+.L2025:
+	ldr	r3, [r4, #648]
+	ldr	r5, .L2069
+	cmp	r3, #0
+	beq	.L2029
+	ldr	r1, [sp]
+	mov	r2, #0
+	ldr	r0, [r5, #640]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r5, #644]
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #2
+	b	.L2068
+.L2031:
+	ldr	r3, [r4, #528]
+	add	r5, r5, #1
+	ldr	r3, [r3, #16]
+	str	r3, [sp]
+	bic	r3, r5, #-16777216
+	cmp	r3, #0
+	bne	.L2023
+	ldr	r2, [sp]
+	mov	r1, r5
+	ldr	r3, [r6, #64]
+	ldr	r0, .L2069+28
+	ubfx	r3, r3, #16, #6
+	bl	printk
+	ldr	r0, .L2069+16
+	ldr	r1, [r7, #528]
+	mov	r2, #4
+	mov	r3, #64
+	bl	rknand_print_hex
+.L2023:
+	ldr	r3, [sp]
+	tst	r3, #1048576
+	beq	.L2031
+	ldr	r3, [r4, #648]
+	ldr	r5, .L2069
+	cmp	r3, #0
+	beq	.L2029
+	ldr	r1, [sp]
+	mov	r2, #1
+	ldr	r0, [r5, #640]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r5, #644]
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #2
+	b	.L2067
+.L2021:
+	ldr	r3, [r6, #8]
+	str	r3, [sp]
+	ldr	r5, [r6, #16]
+	ubfx	r5, r5, #1, #1
+	cmp	r5, #0
+	moveq	r7, r4
+	beq	.L2034
+	mov	r5, r1
+.L2033:
+	ldr	r2, [r6, #28]
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ubfx	r3, r3, #22, #6
+	cmp	r2, r3
+	bge	.L2036
+	ldr	r3, [r4, #528]
+	ldr	r3, [r3]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #8192
+	beq	.L2035
+	ldr	r3, [sp, #4]
+	tst	r3, #131072
+	beq	.L2035
+	ldr	r1, [sp, #4]
+	ldr	r0, .L2069+32
+	bl	printk
+	b	.L2036
+.L2035:
+	add	r5, r5, #1
+	bic	r3, r5, #-16777216
+	cmp	r3, #0
+	bne	.L2033
+	ldr	r2, [r6, #28]
+	mov	r1, r5
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ldr	r0, .L2069+12
+	ubfx	r3, r3, #22, #6
+	bl	printk
+	ldr	r0, .L2069+16
+	ldr	r1, [r4, #528]
+	mov	r2, #4
+	mov	r3, #64
+	bl	rknand_print_hex
+	b	.L2033
+.L2036:
+	ldr	r3, [r4, #648]
+	ldr	r5, .L2069
+	cmp	r3, #0
+	beq	.L2029
+	ldr	r1, [sp]
+	mov	r2, #0
+	ldr	r0, [r5, #640]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r5, #644]
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #7
+.L2068:
+	mov	r2, #0
+	b	.L2066
+.L2040:
+	ldr	r3, [r4, #528]
+	add	r5, r5, #1
+	ldr	r3, [r3, #8]
+	str	r3, [sp]
+	bic	r3, r5, #-16777216
+	cmp	r3, #0
+	bne	.L2034
+	ldr	r2, [sp]
+	mov	r1, r5
+	ldr	r3, [r6, #28]
+	ldr	r0, .L2069+28
+	ubfx	r3, r3, #16, #5
+	bl	printk
+	ldr	r0, .L2069+16
+	ldr	r1, [r7, #528]
+	mov	r2, #4
+	mov	r3, #64
+	bl	rknand_print_hex
+.L2034:
+	ldr	r3, [sp]
+	tst	r3, #1048576
+	beq	.L2040
+	ldr	r3, [r4, #648]
+	ldr	r5, .L2069
+	cmp	r3, #0
+	beq	.L2029
+	ldr	r1, [sp]
+	mov	r2, #1
+	ldr	r0, [r5, #640]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r5, #644]
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #6
+	mov	r1, r1, asl #7
+.L2067:
+	mov	r2, #1
+.L2066:
+	bl	rknand_dma_unmap_single
+.L2029:
+	mov	r3, #0
+	str	r3, [r4, #648]
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L2070:
+	.align	2
+.L2069:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LC143
+	.word	.LC144
+	.word	.LC145
+	.word	arm_delay_ops
+	.word	644245000
+	.word	.LC146
+	.word	.LC147
+	.fnend
+	.size	nandc_xfer_done, .-nandc_xfer_done
+	.align	2
+	.global	nandc_xfer
+	.type	nandc_xfer, %function
+nandc_xfer:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r0, r1
+	ldr	r7, [sp, #32]
+	mov	r4, r1
+	mov	r8, r2
+	mov	r1, r2
+	mov	r6, r3
+	mov	r2, r3
+	mov	r3, r7
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	cmp	r4, #0
+	movne	r0, #0
+	bne	.L2101
+	ldr	r5, .L2114
+	ldrb	r3, [r5, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	bne	.L2073
+	ldr	lr, [r5, #528]
+	mov	r1, r8, lsr #2
+	mov	ip, #1
+	mov	r3, r4
+	mov	r0, r4
+.L2074:
+	cmp	r3, r1
+	bcs	.L2111
+	add	r2, r3, #84
+	ldr	r2, [lr, r2, asl #2]
+	str	r2, [sp, #4]
+	ldr	r4, [sp, #4]
+	ldr	r2, [sp, #4]
+	ubfx	r2, r2, #26, #1
+	and	r2, r2, r4, lsr #10
+	and	ip, ip, r2
+	ldr	r2, [sp, #4]
+	tst	r2, #4
+	bne	.L2093
+	ldr	r2, [sp, #4]
+	tst	r2, #262144
+	bne	.L2093
+	ldr	r4, [sp, #4]
+	ldr	r2, [sp, #4]
+	ubfx	r4, r4, #3, #7
+	ubfx	r2, r2, #19, #7
+	cmp	r4, r2
+	ldr	r2, [sp, #4]
+	ubfxgt	r2, r2, #3, #7
+	ubfxle	r2, r2, #19, #7
+	cmp	r0, r2
+	movcc	r0, r2
+	b	.L2075
+.L2093:
+	mvn	r0, #0
+.L2075:
+	add	r3, r3, #1
+	b	.L2074
+.L2111:
+	ldr	r3, [r5, #528]
+	cmp	ip, #0
+	movne	r0, #512
+	ldr	r4, [r3]
+	and	r3, r4, #139264
+	cmp	r3, #139264
+	bne	.L2080
+	mov	r1, r4
+	ldr	r0, .L2114+4
+	bl	printk
+	ldr	r3, [r5, #528]
+	mvn	r0, #0
+	orr	r4, r4, #131072
+	str	r4, [r3]
+.L2080:
+	tst	r4, #8192
+	beq	.L2081
+	ldr	r3, .L2114+8
+	ldrb	r3, [r3, #-3268]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2081
+	ldr	r0, .L2114+12
+	mov	r1, r4
+	bl	printk
+	ldr	r3, [r5, #528]
+	mov	r2, #1
+	str	r2, [r3, #16]
+	b	.L2082
+.L2073:
+	ldrb	r3, [r5, #660]	@ zero_extendqisi2
+	mov	r0, r8, lsr #1
+	mov	r2, r7
+	mov	r1, r4
+	cmp	r3, #25
+	mov	r3, r4
+	movcc	lr, #64
+	movcs	lr, #128
+.L2084:
+	cmp	r1, r0
+	add	ip, r3, lr
+	add	r2, r2, #4
+	bcs	.L2112
+	ldr	r4, [r5, #628]
+	mov	r3, r3, lsr #2
+	add	r1, r1, #1
+	ldr	r3, [r4, r3, asl #2]
+	mov	r4, r3, lsr #8
+	strb	r3, [r2, #-4]
+	strb	r4, [r2, #-3]
+	mov	r4, r3, lsr #16
+	mov	r3, r3, lsr #24
+	strb	r4, [r2, #-2]
+	strb	r3, [r2, #-1]
+	mov	r3, ip
+	b	.L2084
+.L2112:
+	ldr	lr, [r5, #528]
+	mov	ip, #0
+	mov	r1, r8, lsr #2
+	mov	r0, ip
+.L2086:
+	cmp	ip, r1
+	bcs	.L2113
+	add	r3, ip, #8
+	ldr	r3, [lr, r3, asl #2]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #4
+	bne	.L2096
+	ldr	r3, [sp, #4]
+	tst	r3, #32768
+	bne	.L2096
+	ldr	r2, [sp, #4]
+	ldr	r8, [sp, #4]
+	ldr	r3, [sp, #4]
+	ubfx	r2, r2, #3, #5
+	ldr	r4, [sp, #4]
+	ubfx	r8, r8, #27, #1
+	ubfx	r3, r3, #16, #5
+	ubfx	r4, r4, #29, #1
+	orr	r2, r2, r8, asl #5
+	orr	r3, r3, r4, asl #5
+	cmp	r2, r3
+	ldr	r2, [sp, #4]
+	ldrhi	r3, [sp, #4]
+	ubfxhi	r2, r2, #3, #5
+	ldrls	r3, [sp, #4]
+	ubfxls	r2, r2, #16, #5
+	ubfxhi	r3, r3, #27, #1
+	ubfxls	r3, r3, #29, #1
+	orr	r3, r2, r3, asl #5
+	cmp	r0, r3
+	movcc	r0, r3
+	b	.L2087
+.L2096:
+	mvn	r0, #0
+.L2087:
+	add	ip, ip, #1
+	b	.L2086
+.L2113:
+	ldr	r3, [r5, #528]
+	mov	r2, #0
+	str	r2, [r3, #16]
+	ldr	r4, [r3]
+	and	r3, r4, #139264
+	cmp	r3, #139264
+	bne	.L2081
+	mov	r1, r4
+	ldr	r0, .L2114+16
+	bl	printk
+	ldr	r3, .L2114
+	orr	r4, r4, #131072
+	ldr	r3, [r3, #528]
+	str	r4, [r3]
+	b	.L2082
+.L2081:
+	cmn	r0, #1
+	beq	.L2101
+	ldr	r3, [r7]
+	cmn	r3, #1
+	bne	.L2101
+	ldr	r3, [r7, #4]
+	cmn	r3, #1
+	bne	.L2101
+	ldr	r3, [r6]
+	cmn	r3, #1
+	moveq	r0, #512
+	b	.L2101
+.L2082:
+	mvn	r0, #0
+.L2101:
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2115:
+	.align	2
+.L2114:
+	.word	.LANCHOR0
+	.word	.LC148
+	.word	.LANCHOR3
+	.word	.LC149
+	.word	.LC150
+	.fnend
+	.size	nandc_xfer, .-nandc_xfer
+	.align	2
+	.global	flash_read_page
+	.type	flash_read_page, %function
+flash_read_page:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r3
+	ldr	r7, .L2131
+	mvn	r4, #0
+	.pad #20
+	sub	sp, sp, #20
+	mov	r5, r0
+	mov	ip, r1
+	ubfx	r8, r1, #24, #2
+	ldrb	r3, [r7, #676]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	rsb	r3, r3, #24
+	ldr	r6, [r7, #528]
+	bic	r4, r1, r4, asl r3
+	ldr	r3, .L2131+4
+	ldr	r3, [r3]
+	tst	r3, #16
+	beq	.L2117
+	ldr	r0, .L2131+8
+	mov	r1, r5
+	mov	r2, r8
+	mov	r3, ip
+	bl	printk
+.L2117:
+	bl	nandc_wait_flash_ready
+	mov	r0, r5
+	bl	nandc_cs
+	cmp	r8, #0
+	mov	r9, r5, asl #8
+	bne	.L2118
+	mov	r0, r5
+	bl	zftl_flash_enter_slc_mode
+	b	.L2119
+.L2118:
+	ldr	r3, [r7, #584]
+	ldrb	r3, [r3, #12]	@ zero_extendqisi2
+	cmp	r3, #3
+	bne	.L2120
+	ldr	r3, .L2131
+	ldrb	r3, [r3, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	addeq	r3, r6, r9
+	streq	r8, [r3, #2056]
+	beq	.L2119
+.L2120:
+	mov	r0, r5
+	bl	zftl_flash_exit_slc_mode
+.L2119:
+	add	r10, r6, r9
+	mov	r2, #0
+	str	r2, [r10, #2056]
+	str	r2, [r10, #2052]
+	str	r2, [r10, #2052]
+	uxtb	r2, r4
+	str	r2, [r10, #2052]
+	mov	r2, r4, lsr #8
+	str	r2, [r10, #2052]
+	mov	r2, r4, lsr #16
+	str	r2, [r10, #2052]
+	mov	r2, #48
+	str	r2, [r10, #2056]
+	ldr	r2, [r7, #584]
+	ldrb	r1, [r2, #12]	@ zero_extendqisi2
+	adds	r2, r8, #0
+	movne	r2, #1
+	cmp	r1, #3
+	movne	r2, #0
+	cmp	r2, #0
+	beq	.L2121
+	ldr	r2, .L2131
+	ldrb	r2, [r2, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	addeq	r4, r4, r4, asl #1
+	subeq	r0, r4, #1
+	addeq	r0, r0, r8
+	beq	.L2130
+.L2121:
+	mov	r0, r4
+.L2130:
+	bl	nandc_set_seed
+	add	r6, r6, r9
+	bl	nandc_wait_flash_ready
+	mov	r4, #0
+	mov	r1, r4
+	mov	r2, #5
+	mov	r3, #224
+	str	r2, [r6, #2056]
+	mov	r0, r5
+	str	r4, [r10, #2052]
+	str	r4, [r10, #2052]
+	str	r3, [r6, #2056]
+	ldrb	r2, [sp, #56]	@ zero_extendqisi2
+	ldr	r3, [sp, #12]
+	str	fp, [sp]
+	bl	nandc_xfer
+	mov	r5, r0
+	mov	r0, r4
+	bl	nandc_de_cs
+	mov	r0, r5
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2132:
+	.align	2
+.L2131:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC151
+	.fnend
+	.size	flash_read_page, .-flash_read_page
+	.align	2
+	.global	micron_read_retrial
+	.type	micron_read_retrial, %function
+micron_read_retrial:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L2161
+	mov	r6, r0
+	str	r3, [sp, #24]
+	mov	r9, r1
+	str	r2, [sp, #20]
+	mov	r8, #0
+	ldrb	r3, [r4, #660]	@ zero_extendqisi2
+	ldr	r10, .L2161+4
+	add	r3, r3, r3, asl #1
+	mov	r3, r3, asr #2
+	str	r3, [sp, #12]
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r4, #528]
+	str	r3, [sp, #16]
+.L2134:
+	ldr	r3, [sp, #16]
+	mov	r7, #0
+	mvn	r4, #0
+	add	r5, r3, r6, asl #8
+.L2135:
+	ldrb	r3, [r10, #-3260]	@ zero_extendqisi2
+	cmp	r7, r3
+	bcs	.L2139
+	mov	r3, #239
+	mov	r0, #200
+	str	r3, [r5, #2056]
+	mov	r3, #137
+	str	r3, [r5, #2052]
+	add	fp, r7, #1
+	bl	timer_delay_ns
+	str	fp, [r5, #2048]
+	mov	r3, #0
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+	mov	r0, r6
+	str	r3, [r5, #2048]
+	mov	r1, r9
+	ldr	r3, [sp, #72]
+	ldr	r2, [sp, #20]
+	str	r3, [sp]
+	ldr	r3, [sp, #24]
+	bl	flash_read_page
+	ldr	r3, .L2161+8
+	ldr	r3, [r3]
+	tst	r3, #4096
+	mov	ip, r0
+	beq	.L2136
+	str	r0, [sp]
+	mov	r1, r7
+	str	r0, [sp, #28]
+	mov	r2, r9
+	ldr	r0, .L2161+12
+	mov	r3, r4
+	bl	printk
+	ldr	ip, [sp, #28]
+.L2136:
+	cmn	ip, #1
+	beq	.L2137
+	ldr	r3, [r10, #-3272]
+	cmn	r4, #1
+	moveq	r4, ip
+	str	r3, [sp, #20]
+	ldr	r3, [r10, #-3264]
+	str	r3, [sp, #24]
+	ldr	r3, [sp, #12]
+	cmp	ip, r3
+	bcc	.L2146
+.L2137:
+	mov	r7, fp
+	b	.L2135
+.L2146:
+	mov	r4, ip
+.L2139:
+	ldr	r3, [sp, #16]
+	mov	r5, r6, asl #8
+	mov	r0, #200
+	add	fp, r3, r5
+	mov	r3, #239
+	str	r3, [fp, #2056]
+	mov	r3, #137
+	str	r3, [fp, #2052]
+	bl	timer_delay_ns
+	mov	r3, #0
+	str	r3, [fp, #2048]
+	str	r3, [fp, #2048]
+	str	r3, [fp, #2048]
+	str	r3, [fp, #2048]
+	ldr	r3, [sp, #12]
+	cmp	r4, r3
+	bcc	.L2141
+	cmn	r4, #1
+	movne	r4, #256
+.L2141:
+	cmn	r4, #1
+	movne	fp, #0
+	moveq	fp, #1
+	cmp	r4, #256
+	movne	r3, fp
+	orreq	r3, fp, #1
+	cmp	r3, #0
+	beq	.L2142
+	mov	r1, r7
+	mov	r3, r7
+	str	r4, [sp]
+	mov	r2, r9
+	ldr	r0, .L2161+16
+	eor	r7, r8, #1
+	bl	printk
+	ands	r7, fp, r7
+	beq	.L2143
+	bl	nandc_wait_flash_ready
+	ldr	r3, .L2161
+	mov	r0, #200
+	mov	r8, #1
+	ldr	r3, [r3, #528]
+	add	r5, r3, r5
+	mov	r3, #239
+	str	r3, [r5, #2056]
+	mov	r3, #150
+	str	r3, [r5, #2052]
+	bl	timer_delay_ns
+	mov	r3, #3
+	str	r3, [r5, #2048]
+	mov	r3, #0
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+	str	r3, [r5, #2048]
+	b	.L2134
+.L2143:
+	cmp	r8, #0
+	beq	.L2144
+	bl	nandc_wait_flash_ready
+	ldr	r3, .L2161
+	mov	r0, #200
+	ldr	r9, [r3, #528]
+	mov	r3, #239
+	add	r6, r9, r6, asl #8
+	add	r5, r9, r5
+	str	r3, [r5, #2056]
+	mov	r3, #150
+	str	r3, [r6, #2052]
+	bl	timer_delay_ns
+	cmn	r4, #1
+	str	r7, [r6, #2048]
+	movne	r4, #256
+	str	r7, [r6, #2048]
+	str	r7, [r6, #2048]
+	str	r7, [r6, #2048]
+	b	.L2144
+.L2142:
+	cmp	r8, #0
+	beq	.L2144
+	str	r3, [sp, #12]
+	bl	nandc_wait_flash_ready
+	ldr	r2, .L2161
+	mov	r0, #200
+	mov	r4, #256
+	ldr	r9, [r2, #528]
+	mov	r2, #239
+	add	r6, r9, r6, asl #8
+	add	r5, r9, r5
+	str	r2, [r5, #2056]
+	mov	r2, #150
+	str	r2, [r6, #2052]
+	bl	timer_delay_ns
+	ldr	r3, [sp, #12]
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+.L2144:
+	bl	nandc_wait_flash_ready
+	mov	r0, r4
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2162:
+	.align	2
+.L2161:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LANCHOR2
+	.word	.LC152
+	.word	.LC153
+	.fnend
+	.size	micron_read_retrial, .-micron_read_retrial
+	.align	2
+	.global	toshiba_3d_read_retrial
+	.type	toshiba_3d_read_retrial, %function
+toshiba_3d_read_retrial:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ubfx	r4, r1, #24, #2
+	mov	r10, r0
+	mov	fp, r3
+	mov	r9, r1
+	str	r2, [sp, #12]
+	bl	nandc_wait_flash_ready
+	ldr	r7, .L2211
+	add	r6, r10, #8
+	ldr	r3, [r7, #528]
+	add	r6, r3, r6, asl #8
+	str	r3, [sp, #8]
+	ldrb	r3, [r7, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	movne	r3, #56
+	moveq	r3, #46
+	movne	r5, #10
+	moveq	r5, #26
+	cmp	r4, #0
+	str	r3, [sp, #16]
+	mvn	r4, #0
+	bne	.L2165
+	ldr	r3, [sp, #8]
+	mov	r8, #1
+	add	r3, r3, r10, asl #8
+	str	r3, [sp, #16]
+.L2172:
+	ldr	r3, .L2211
+	mov	r0, r6
+	ldrb	r3, [r3, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	bne	.L2166
+	mov	r2, #0
+	mov	r1, r8
+	bl	toshiba_tlc_set_rr_para
+	mov	r3, #93
+	ldr	r2, [sp, #16]
+	str	r3, [r2, #2056]
+	b	.L2167
+.L2166:
+	uxtb	r1, r8
+	bl	toshiba_3d_set_slc_rr_para
+.L2167:
+	ldr	r3, [sp, #64]
+	mov	r0, r10
+	mov	r1, r9
+	ldr	r2, [sp, #12]
+	str	r3, [sp]
+	mov	r3, fp
+	bl	flash_read_page
+	ldr	r3, .L2211+4
+	ldr	r3, [r3]
+	tst	r3, #16
+	mov	ip, r0
+	beq	.L2168
+	mov	r3, ip
+	ldr	r0, .L2211+8
+	mov	r1, r8
+	mov	r2, r9
+	str	ip, [sp, #20]
+	bl	printk
+	ldr	ip, [sp, #20]
+.L2168:
+	cmn	ip, #1
+	beq	.L2169
+	ldr	r3, .L2211+12
+	cmn	r4, #1
+	moveq	r4, ip
+	ldr	r2, [r3, #-3272]
+	ldr	fp, [r3, #-3264]
+	ldrb	r3, [r7, #660]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	add	r3, r3, r3, asl #1
+	cmp	ip, r3, asr #2
+	bcc	.L2187
+.L2169:
+	add	r8, r8, #1
+	cmp	r8, r5
+	bne	.L2172
+	b	.L2171
+.L2187:
+	mov	r5, r8
+	mov	r4, ip
+.L2171:
+	ldr	r3, .L2211
+	mov	r1, #0
+	mov	r0, r6
+	ldrb	r3, [r3, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	moveq	r2, r1
+	beq	.L2210
+	bl	toshiba_3d_set_slc_rr_para
+	b	.L2174
+.L2165:
+	ldr	r3, [sp, #8]
+	mov	r5, #1
+	add	r8, r3, r10, asl #8
+.L2181:
+	ldr	r3, .L2211
+	mov	r0, r6
+	ldrb	r3, [r3, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	bne	.L2175
+	mov	r1, r5
+	mov	r2, #1
+	bl	toshiba_tlc_set_rr_para
+	mov	r3, #93
+	b	.L2209
+.L2175:
+	uxtb	r1, r5
+	bl	toshiba_3d_set_tlc_rr_para
+	mov	r3, #38
+.L2209:
+	str	r3, [r8, #2056]
+	mov	r0, r10
+	ldr	r3, [sp, #64]
+	mov	r1, r9
+	ldr	r2, [sp, #12]
+	str	r3, [sp]
+	mov	r3, fp
+	bl	flash_read_page
+	ldr	r3, .L2211+4
+	ldr	r3, [r3]
+	tst	r3, #16
+	mov	ip, r0
+	beq	.L2177
+	mov	r3, ip
+	ldr	r0, .L2211+16
+	mov	r1, r5
+	mov	r2, r9
+	str	ip, [sp, #20]
+	bl	printk
+	ldr	ip, [sp, #20]
+.L2177:
+	cmn	ip, #1
+	beq	.L2178
+	ldr	r3, .L2211+12
+	cmn	r4, #1
+	moveq	r4, ip
+	ldr	r2, [r3, #-3272]
+	ldr	fp, [r3, #-3264]
+	ldrb	r3, [r7, #660]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	add	r3, r3, r3, asl #1
+	cmp	ip, r3, asr #2
+	bcc	.L2188
+.L2178:
+	ldr	r3, [sp, #16]
+	add	r5, r5, #1
+	cmp	r5, r3
+	bne	.L2181
+	b	.L2180
+.L2188:
+	mov	r4, ip
+.L2180:
+	ldr	r3, .L2211
+	mov	r0, r6
+	mov	r1, #0
+	ldrb	r3, [r3, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	bne	.L2182
+	mov	r2, #1
+.L2210:
+	bl	toshiba_tlc_set_rr_para
+	b	.L2174
+.L2182:
+	bl	toshiba_3d_set_tlc_rr_para
+.L2174:
+	ldr	r3, .L2211
+	ldrb	r3, [r3, #661]	@ zero_extendqisi2
+	cmp	r3, #36
+	bne	.L2183
+	ldr	r3, [sp, #8]
+	add	r10, r3, r10, asl #8
+	mov	r3, #85
+	str	r3, [r10, #2056]
+	mov	r3, #0
+	str	r3, [r10, #2052]
+	str	r3, [r10, #2048]
+	mov	r3, #255
+	str	r3, [r10, #2056]
+.L2183:
+	ldrb	r3, [r7, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r4, r3, asr #2
+	bcc	.L2184
+	cmn	r4, #1
+	movne	r4, #256
+.L2184:
+	cmn	r4, #1
+	cmpne	r4, #256
+	bne	.L2185
+	str	r4, [sp]
+	mov	r1, r5
+	ldr	r0, .L2211+20
+	mov	r2, r9
+	mov	r3, r5
+	bl	printk
+.L2185:
+	bl	nandc_wait_flash_ready
+	mov	r0, r4
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2212:
+	.align	2
+.L2211:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC154
+	.word	.LANCHOR3
+	.word	.LC155
+	.word	.LC156
+	.fnend
+	.size	toshiba_3d_read_retrial, .-toshiba_3d_read_retrial
+	.align	2
+	.global	toshiba_read_retrial
+	.type	toshiba_read_retrial, %function
+toshiba_read_retrial:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	mov	r8, r0
+	ldr	r4, .L2246
+	str	r3, [sp, #20]
+	add	r9, r8, #8
+	str	r1, [sp, #12]
+	str	r2, [sp, #16]
+	bl	nandc_wait_flash_ready
+	ldrb	r3, [r4, #661]	@ zero_extendqisi2
+	ldr	r6, [r4, #528]
+	sub	r3, r3, #67
+	cmp	r3, #1
+	add	r9, r6, r9, asl #8
+	mov	r3, r8, asl #8
+	str	r3, [sp, #24]
+	movls	r3, #0
+	strls	r3, [sp, #8]
+	bls	.L2214
+	ldrb	r5, [r4, #623]	@ zero_extendqisi2
+	cmp	r5, #0
+	streq	r5, [sp, #8]
+	beq	.L2215
+	mov	r0, #1
+	bl	nandc_set_if_mode
+	mov	r3, #1
+	str	r3, [sp, #8]
+.L2215:
+	ldr	r3, [sp, #24]
+	mov	r2, #92
+	add	r3, r6, r3
+	str	r2, [r3, #2056]
+	mov	r2, #197
+	str	r2, [r3, #2056]
+.L2214:
+	ldr	fp, .L2246+4
+	mov	r7, #1
+	mvn	r10, #0
+	mov	r3, r8, asl #8
+	str	r3, [sp, #28]
+.L2216:
+	ldrb	r3, [fp, #-3260]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r7, r3
+	bcs	.L2245
+	ldrb	r3, [r4, #661]	@ zero_extendqisi2
+	mov	r0, r9
+	uxtb	r1, r7
+	sub	r3, r3, #67
+	cmp	r3, #1
+	bhi	.L2217
+	bl	sandisk_set_rr_para
+	b	.L2218
+.L2217:
+	bl	toshiba_set_rr_para
+.L2218:
+	ldrb	r3, [r4, #661]	@ zero_extendqisi2
+	cmp	r3, #34
+	bne	.L2219
+	ldr	r3, .L2246+4
+	ldrb	r3, [r3, #-3260]	@ zero_extendqisi2
+	sub	r3, r3, #3
+	cmp	r7, r3
+	ldreq	r3, [sp, #28]
+	moveq	r2, #179
+	addeq	r3, r6, r3
+	streq	r2, [r3, #2056]
+.L2219:
+	ldr	r3, [sp, #24]
+	mov	r2, #38
+	add	r1, sp, #12
+	mov	r0, r8
+	add	r3, r6, r3
+	str	r2, [r3, #2056]
+	mov	r2, #93
+	str	r2, [r3, #2056]
+	ldr	r3, [sp, #72]
+	str	r3, [sp]
+	ldmia	r1, {r1, r2, r3}
+	bl	flash_read_page
+	cmn	r0, #1
+	mov	r5, r0
+	beq	.L2222
+	ldr	r3, [fp, #-3272]
+	cmn	r10, #1
+	moveq	r10, r0
+	str	r3, [sp, #16]
+	ldr	r3, [fp, #-3264]
+	str	r3, [sp, #20]
+	ldrb	r3, [r4, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, asr #2
+	bcc	.L2224
+.L2222:
+	add	r7, r7, #1
+	b	.L2216
+.L2245:
+	mov	r5, r10
+.L2224:
+	ldrb	r3, [r4, #661]	@ zero_extendqisi2
+	mov	r0, r9
+	mov	r1, #0
+	sub	r3, r3, #67
+	cmp	r3, #1
+	bhi	.L2226
+	bl	sandisk_set_rr_para
+	b	.L2227
+.L2226:
+	bl	toshiba_set_rr_para
+.L2227:
+	add	r6, r6, r8, asl #8
+	mov	r3, #255
+	str	r3, [r6, #2056]
+	ldrb	r3, [r4, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r5, r3, asr #2
+	bcc	.L2228
+	cmn	r5, #1
+	movne	r5, #256
+.L2228:
+	cmn	r5, #1
+	cmpne	r5, #256
+	bne	.L2229
+	str	r5, [sp]
+	mov	r1, r7
+	ldr	r0, .L2246+8
+	mov	r3, r7
+	ldr	r2, [sp, #12]
+	bl	printk
+.L2229:
+	bl	nandc_wait_flash_ready
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	beq	.L2230
+	mov	r0, #4
+	bl	nandc_set_if_mode
+.L2230:
+	mov	r0, r5
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2247:
+	.align	2
+.L2246:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LC156
+	.fnend
+	.size	toshiba_read_retrial, .-toshiba_read_retrial
+	.align	2
+	.global	hynix_read_retrial
+	.type	hynix_read_retrial, %function
+hynix_read_retrial:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r3
+	ldr	r3, .L2267
+	.pad #28
+	sub	sp, sp, #28
+	mov	r10, r2
+	mov	r7, r0
+	mov	r8, r1
+	mov	r6, #0
+	ldr	r2, [r3, #664]
+	mvn	r4, #0
+	str	r3, [sp, #16]
+	add	r3, r2, r0
+	str	r3, [sp, #12]
+	ldrb	r9, [r2, #114]	@ zero_extendqisi2
+	ldrb	r5, [r3, #120]	@ zero_extendqisi2
+	bl	nandc_wait_flash_ready
+	ldr	ip, .L2267+4
+.L2249:
+	cmp	r6, r9
+	bcs	.L2253
+	add	r5, r5, #1
+	mov	r0, r7
+	str	ip, [sp, #20]
+	uxtb	r5, r5
+	cmp	r5, r9
+	movcs	r5, #0
+	mov	r1, r5
+	bl	hynix_set_rr_para
+	mov	r0, r7
+	mov	r1, r8
+	mov	r2, r10
+	ldr	r3, [sp, #64]
+	str	r3, [sp]
+	mov	r3, fp
+	bl	flash_read_page
+	cmn	r0, #1
+	ldr	ip, [sp, #20]
+	beq	.L2251
+	ldr	r3, [sp, #16]
+	cmn	r4, #1
+	ldr	r10, [ip, #-3272]
+	moveq	r4, r0
+	ldr	fp, [ip, #-3264]
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, asr #2
+	bcc	.L2257
+.L2251:
+	add	r6, r6, #1
+	b	.L2249
+.L2257:
+	mov	r4, r0
+.L2253:
+	ldr	r3, [sp, #12]
+	strb	r5, [r3, #120]
+	ldr	r3, [sp, #16]
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r4, r3, asr #2
+	bcc	.L2255
+	cmn	r4, #1
+	movne	r4, #256
+.L2255:
+	cmn	r4, #1
+	cmpne	r4, #256
+	bne	.L2256
+	str	r4, [sp]
+	mov	r1, r6
+	ldr	r0, .L2267+8
+	mov	r2, r8
+	mov	r3, r6
+	bl	printk
+.L2256:
+	bl	nandc_wait_flash_ready
+	mov	r0, r4
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2268:
+	.align	2
+.L2267:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LC157
+	.fnend
+	.size	hynix_read_retrial, .-hynix_read_retrial
+	.align	2
+	.global	flash_ddr_tuning_read
+	.type	flash_ddr_tuning_read, %function
+flash_ddr_tuning_read:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	mov	r8, r0
+	mov	r10, r1
+	mov	fp, r2
+	str	r3, [sp, #16]
+	bl	nandc_get_ddr_para
+	mov	r4, #0
+	mov	r5, r4
+	mov	r6, #1024
+	mov	r7, #6
+	mvn	r9, #0
+	str	r0, [sp, #24]
+	str	r4, [sp, #20]
+	str	r4, [sp, #12]
+.L2275:
+	uxtb	r0, r7
+	bl	nandc_set_ddr_para
+	mov	r0, r8
+	mov	r1, r10
+	mov	r2, fp
+	ldr	r3, [sp, #72]
+	str	r3, [sp]
+	ldr	r3, [sp, #16]
+	bl	flash_read_page
+	ldr	r3, .L2293
+	ldr	r3, [r3]
+	tst	r3, #16
+	mov	ip, r0
+	beq	.L2270
+	mov	r3, ip
+	ldr	r0, .L2293+4
+	mov	r1, r7
+	mov	r2, r10
+	str	ip, [sp, #28]
+	bl	printk
+	ldr	ip, [sp, #28]
+.L2270:
+	add	r3, r6, #1
+	cmp	ip, r3
+	bhi	.L2271
+	ldr	r3, .L2293+8
+	ldr	fp, [r3, #-3272]
+	ldr	r3, [r3, #-3264]
+	str	r3, [sp, #16]
+	ldr	r3, .L2293+12
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	cmp	ip, r3, lsr #2
+	bcs	.L2281
+	add	r5, r5, #1
+	cmp	r5, #7
+	bls	.L2281
+	rsb	r4, r5, r7
+	mov	r6, ip
+	mov	r9, #0
+	b	.L2273
+.L2271:
+	ldr	r3, [sp, #12]
+	cmp	r3, r5
+	bcs	.L2282
+	cmp	r5, #7
+	rsb	r3, r5, r4
+	str	r3, [sp, #20]
+	bhi	.L2274
+	str	r5, [sp, #12]
+	b	.L2282
+.L2281:
+	mov	r4, r7
+	mov	r6, ip
+	mov	r9, #0
+	b	.L2272
+.L2282:
+	mov	r5, #0
+.L2272:
+	add	r7, r7, #2
+	cmp	r7, #50
+	bne	.L2275
+.L2273:
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #20]
+	cmp	r2, r5
+	movhi	r4, r3
+.L2274:
+	cmp	r4, #0
+	beq	.L2276
+	ldr	r3, .L2293+12
+	ldr	r2, .L2293+16
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	umull	r2, r3, r3, r2
+	ubfx	r3, r3, #1, #8
+	cmp	r6, r3
+	bcs	.L2276
+	ldr	r0, .L2293+20
+	mov	r1, r4
+	bl	printk
+	uxtb	r0, r4
+	b	.L2292
+.L2276:
+	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+.L2292:
+	bl	nandc_set_ddr_para
+	cmn	r9, #1
+	bne	.L2278
+	mov	r1, r8
+	mov	r2, r10
+	ldr	r0, .L2293+24
+	bl	printk
+	mov	r0, r8
+	bl	flash_reset
+	ldr	r4, .L2293+12
+	mov	r0, #1
+	bl	flash_set_interface_mode
+	mov	r0, #1
+	bl	nandc_set_if_mode
+	add	r3, r4, r8
+	mov	r0, r8
+	mov	r2, #2
+	strb	r2, [r3, #680]
+	bl	zftl_flash_enter_slc_mode
+	mov	r1, r10
+	mov	r2, fp
+	mov	r0, r8
+	mov	r5, r4
+	ldr	r3, [sp, #72]
+	str	r3, [sp]
+	ldr	r3, [sp, #16]
+	bl	flash_read_page
+	mov	r1, r8
+	mov	r2, r10
+	mov	r6, r0
+	ldr	r0, .L2293+28
+	mov	r3, r6
+	bl	printk
+	ldrb	r3, [r4, #660]	@ zero_extendqisi2
+	cmp	r6, r3
+	bhi	.L2283
+	ldr	r2, .L2293+8
+	ldr	r3, [r2, #-3256]
+	add	r3, r3, #1
+	str	r3, [r2, #-3256]
+	cmp	r3, #100
+	movhi	r3, #0
+	strhib	r3, [r4, #623]
+	bls	.L2279
+	b	.L2278
+.L2283:
+	mov	r6, r9
+.L2279:
+	ldrb	r0, [r5, #720]	@ zero_extendqisi2
+	bl	flash_set_interface_mode
+	ldrb	r0, [r5, #720]	@ zero_extendqisi2
+	bl	nandc_set_if_mode
+.L2278:
+	mov	r0, r6
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2294:
+	.align	2
+.L2293:
+	.word	.LANCHOR2
+	.word	.LC158
+	.word	.LANCHOR3
+	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LC159
+	.word	.LC160
+	.word	.LC161
+	.fnend
+	.size	flash_ddr_tuning_read, .-flash_ddr_tuning_read
+	.align	2
+	.global	flash_read_page_en
+	.type	flash_read_page_en, %function
+flash_read_page_en:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r7, r3
+	ldr	r5, .L2326
+	mov	r10, r0
+	mov	r4, r1
+	mov	r8, r2
+	ldr	r9, [sp, #48]
+	ldrb	r3, [r5, #589]	@ zero_extendqisi2
+	cmp	r3, r0
+	bhi	.L2296
+	ldr	r1, .L2326+4
+	mov	r2, #404
+	ldr	r0, .L2326+8
+	bl	printk
+	bl	dump_stack
+.L2296:
+	add	r2, r5, r10
+	ldr	r3, .L2326
+	ldrb	r6, [r2, #668]	@ zero_extendqisi2
+	ldrb	r2, [r5, #589]	@ zero_extendqisi2
+	cmp	r2, r10
+	bcs	.L2297
+	ldr	r3, .L2326+12
+	ldr	r3, [r3]
+	tst	r3, #64
+	beq	.L2325
+	ldr	r0, .L2326+16
+	mov	r1, r6
+	mov	r2, r10
+	mov	r3, r4
+	bl	printk
+.L2325:
+	mvn	r0, #0
+	b	.L2322
+.L2297:
+	tst	r4, #50331648
+	bne	.L2300
+	ldrb	r2, [r3]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2301
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2300
+.L2301:
+	ldrh	r10, [r5, #2]
+	mov	r0, r4
+	mov	r1, r10
+	bl	__aeabi_uidiv
+	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L2326
+	mul	r0, r10, r0
+	rsb	r4, r0, r4
+	mov	r4, r4, asl #1
+	addeq	r4, r3, r4
+	ldreqh	r4, [r4, #4]
+	add	r4, r4, r0
+.L2300:
+	str	r9, [sp]
+	mov	r0, r6
+	mov	r1, r4
+	mov	r2, r8
+	mov	r3, r7
+	bl	flash_read_page
+	cmn	r0, #1
+	bne	.L2322
+	ldrb	fp, [r5, #656]	@ zero_extendqisi2
+	ldr	r10, .L2326
+	cmp	fp, #0
+	bne	.L2304
+.L2307:
+	ldr	r3, .L2326+20
+	ldr	ip, [r3, #-3252]
+	cmp	ip, #0
+	bne	.L2305
+	b	.L2306
+.L2304:
+	mov	r3, #0
+	mov	r0, r6
+	strb	r3, [r10, #656]
+	mov	r1, r4
+	str	r9, [sp]
+	mov	r2, r8
+	mov	r3, r7
+	bl	flash_read_page
+	strb	fp, [r10, #656]
+	cmn	r0, #1
+	beq	.L2307
+	b	.L2322
+.L2305:
+	str	r9, [sp]
+	mov	r0, r6
+	mov	r1, r4
+	mov	r2, r8
+	mov	r3, r7
+	blx	ip
+	cmn	r0, #1
+	bne	.L2322
+.L2306:
+	ldrb	r3, [r5, #656]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r0, .L2326+24
+	mov	r2, r4
+	str	r3, [sp]
+	mvn	r3, #0
+	bl	printk
+	ldrb	r3, [r5, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2325
+	str	r9, [sp, #48]
+	mov	r0, r6
+	mov	r1, r4
+	mov	r2, r8
+	mov	r3, r7
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	flash_ddr_tuning_read
+.L2322:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2327:
+	.align	2
+.L2326:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1536
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC162
+	.word	.LANCHOR3
+	.word	.LC163
+	.fnend
+	.size	flash_read_page_en, .-flash_read_page_en
+	.align	2
+	.global	flash_get_last_written_page
+	.type	flash_get_last_written_page, %function
+flash_get_last_written_page:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r1
+	ldr	r6, .L2339
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r1, .L2339+4
+	mov	r10, r0
+	mov	fp, r2
+	mov	r8, r3
+	ldrh	r7, [r6, #30]
+	ldrh	r4, [r1]
+	ldr	r1, [sp, #56]
+	sub	r4, r4, #1
+	mul	r7, r7, r9
+	uxth	r4, r4
+	str	r1, [sp]
+	sxtah	r1, r7, r4
+	bl	flash_read_page_en
+	cmp	r0, #512
+	moveq	ip, #0
+	bne	.L2329
+.L2330:
+	sxth	r3, ip
+	sxth	r2, r4
+	cmp	r3, r2
+	bgt	.L2329
+	add	r3, r3, r2
+	mov	r0, r10
+	mov	r2, fp
+	str	ip, [sp, #12]
+	add	r3, r3, r3, lsr #31
+	mov	r5, r3, asr #1
+	ldr	r3, [sp, #56]
+	sxtah	r1, r7, r5
+	str	r3, [sp]
+	mov	r3, r8
+	bl	flash_read_page_en
+	cmp	r0, #512
+	ldr	ip, [sp, #12]
+	subeq	r5, r5, #1
+	addne	ip, r5, #1
+	uxtheq	r4, r5
+	uxthne	ip, ip
+	b	.L2330
+.L2329:
+	ldr	r3, [r6]
+	sxth	r4, r4
+	tst	r3, #4096
+	beq	.L2334
+	ldr	r0, .L2339+8
+	mov	r1, r9
+	mov	r2, r4
+	ldr	r3, [r8]
+	bl	printk
+.L2334:
+	mov	r0, r4
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2340:
+	.align	2
+.L2339:
+	.word	.LANCHOR2
+	.word	.LANCHOR3-3360
+	.word	.LC164
+	.fnend
+	.size	flash_get_last_written_page, .-flash_get_last_written_page
+	.align	2
+	.global	flash_get_last_written_page_ext
+	.type	flash_get_last_written_page_ext, %function
+flash_get_last_written_page_ext:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, lr}
+	.save {r4, lr}
+	.pad #8
+	mov	r4, r1
+	ldr	r1, .L2343
+	mov	lr, r2
+	mov	ip, r0
+	add	r1, r1, #2928
+	ldrb	r2, [r1, #-2252]	@ zero_extendqisi2
+	ldrh	r1, [r1]
+	rsb	r2, r2, #24
+	str	r3, [sp]
+	rsb	r2, r1, r2
+	mvn	r1, #0
+	mov	r0, r0, asr r2
+	bic	r1, ip, r1, asl r2
+	mov	r3, lr
+	mov	r2, r4
+	uxtb	r0, r0
+	bl	flash_get_last_written_page
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, pc}
+.L2344:
+	.align	2
+.L2343:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_get_last_written_page_ext, .-flash_get_last_written_page_ext
+	.align	2
+	.global	flash_ddr_para_scan
+	.type	flash_ddr_para_scan, %function
+flash_ddr_para_scan:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	mov	r8, r0
+	ldr	r4, .L2352
+	mov	r7, r1
+	mov	r6, #1
+	ldr	r5, .L2352+4
+	mov	r9, #4
+	ldrb	r0, [r4, #720]	@ zero_extendqisi2
+	strb	r6, [r4, #623]
+	bl	flash_set_interface_mode
+	ldrb	r0, [r4, #720]	@ zero_extendqisi2
+	bl	nandc_set_if_mode
+	mov	r1, r7
+	ldr	r2, [r5, #-3248]
+	mov	r0, r8
+	ldr	r3, [r5, #-3244]
+	str	r9, [sp]
+	bl	flash_ddr_tuning_read
+	ldr	r3, [r5, #-3244]
+	mov	r0, r8
+	mov	r1, r7
+	ldr	r2, [r5, #-3248]
+	str	r9, [sp]
+	bl	flash_read_page
+	mov	r3, r4
+	cmn	r0, #1
+	bne	.L2346
+	ldrb	r2, [r4, #720]	@ zero_extendqisi2
+	tst	r2, #1
+	beq	.L2346
+	mov	r0, r6
+	bl	flash_set_interface_mode
+	mov	r0, r6
+	bl	nandc_set_if_mode
+	mov	r3, #0
+	strb	r3, [r4, #623]
+	b	.L2347
+.L2346:
+	mov	r2, #1
+	strb	r2, [r3, #623]
+.L2347:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L2353:
+	.align	2
+.L2352:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.fnend
+	.size	flash_ddr_para_scan, .-flash_ddr_para_scan
+	.global	__aeabi_uidivmod
+	.align	2
+	.type	id_block_read_data.constprop.30, %function
+id_block_read_data.constprop.30:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 120
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2386
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #132
+	sub	sp, sp, #132
+	ldr	r3, [r3]
+	mov	r6, r2
+	str	r1, [sp, #24]
+	mov	r5, #0
+	ldr	r4, .L2386+4
+	mov	r7, #4
+	str	r3, [sp, #124]
+	mov	r10, r5
+	ldr	r3, .L2386+8
+	str	r0, [sp, #40]
+	ldrb	r2, [r3, #13]	@ zero_extendqisi2
+	ldrh	r1, [r3, #30]
+	str	r2, [sp, #28]
+	ldrh	r3, [sp, #28]
+	smulbb	r1, r1, r3
+	ldrb	r3, [r4, #656]	@ zero_extendqisi2
+	strb	r5, [r4, #656]
+	str	r3, [sp, #44]
+	uxth	r1, r1
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #40]
+	str	r1, [sp, #12]
+	rsb	r3, r1, r3
+	str	r3, [sp, #32]
+	and	r3, r1, #3
+	str	r3, [sp, #16]
+.L2355:
+	ldr	r3, [sp, #24]
+	cmp	r5, r3
+	bcs	.L2385
+	ldr	r3, [sp, #16]
+	mov	r1, r7
+	rsb	r3, r3, r7
+	uxth	r3, r3
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #12]
+	add	r0, r5, r3
+	bl	__aeabi_uidiv
+	ldrb	r1, [r4, #590]	@ zero_extendqisi2
+	cmp	r1, #0
+	uxth	r0, r0
+	mov	r3, r0, asl #1
+	add	r2, r4, r3
+	ldrh	r2, [r2, #4]
+	moveq	r0, r2
+	beq	.L2357
+	ldrb	r2, [r4, #1]	@ zero_extendqisi2
+	cmp	r2, #0
+	movne	r0, r3
+.L2357:
+	ldr	r2, [sp, #32]
+	ldr	r3, [sp, #28]
+	ldr	r1, [sp, #16]
+	mla	r3, r3, r0, r2
+	str	r3, [sp, #36]
+	ldr	r3, .L2386+4
+	ldr	r2, [sp, #36]
+	ldrb	r9, [r3, #588]	@ zero_extendqisi2
+	add	r0, r2, r1
+	ldr	r3, [r3, #584]
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldr	r3, .L2386+4
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	mov	fp, r0
+	mov	r0, r9
+	str	r3, [sp, #48]
+	bl	nandc_bch_sel
+.L2358:
+	str	r7, [sp]
+	mov	r0, #0
+	mov	r1, fp
+	mov	r2, r6
+	add	r3, sp, #60
+	bl	flash_read_page
+	cmn	r0, #1
+	mov	r8, r0
+	bne	.L2365
+	ldrb	ip, [r4, #656]	@ zero_extendqisi2
+	cmp	ip, #0
+	bne	.L2360
+.L2363:
+	ldr	r3, .L2386+12
+	ldr	ip, [r3, #-3252]
+	cmp	ip, #0
+	bne	.L2361
+	b	.L2362
+.L2360:
+	mov	r0, #0
+	str	r7, [sp]
+	mov	r1, fp
+	mov	r2, r6
+	add	r3, sp, #60
+	str	ip, [sp, #52]
+	strb	r0, [r4, #656]
+	bl	flash_read_page
+	ldr	ip, [sp, #52]
+	cmn	r0, #1
+	strb	ip, [r4, #656]
+	beq	.L2363
+	b	.L2384
+.L2361:
+	str	r7, [sp]
+	mov	r0, #0
+	mov	r1, fp
+	mov	r2, r6
+	add	r3, sp, #60
+	blx	ip
+	cmn	r0, #1
+	bne	.L2384
+.L2362:
+	ldrb	r3, [r4, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2365
+	str	r7, [sp]
+	mov	r0, #0
+	mov	r1, fp
+	mov	r2, r6
+	add	r3, sp, #60
+	bl	flash_ddr_tuning_read
+.L2384:
+	mov	r8, r0
+.L2365:
+	subs	r9, r9, #16
+	movne	r9, #1
+	cmn	r8, #1
+	movne	r9, #0
+	cmp	r9, #0
+	beq	.L2366
+	mov	r0, #16
+	mov	r9, #16
+	bl	nandc_bch_sel
+	b	.L2358
+.L2366:
+	ldr	r0, [sp, #48]
+	bl	nandc_bch_sel
+	cmn	r8, #1
+	mvneq	r10, #0
+	ldr	r3, [sp, #32]
+	ldr	r2, [sp, #40]
+	cmp	r5, #0
+	cmpeq	r3, r2
+	moveq	r3, #1
+	movne	r3, #0
+	cmp	r10, #0
+	movne	r3, #0
+	andeq	r3, r3, #1
+	cmp	r3, #0
+	beq	.L2368
+	ldr	r3, [r6]
+	ldr	r2, .L2386+16
+	cmp	r3, r2
+	bne	.L2368
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #20]
+	ldrb	r7, [r6, #17]	@ zero_extendqisi2
+	add	r3, r3, r2
+	str	r3, [sp, #24]
+	b	.L2369
+.L2368:
+	ldr	r3, [sp, #20]
+	mov	r2, r5
+	ldr	r0, .L2386+20
+	ldr	r1, [sp, #36]
+	add	r6, r6, r3, asl #9
+	ldr	r3, [sp, #64]
+	str	r3, [sp]
+	ldr	r3, [sp, #60]
+	bl	printk
+	mov	r3, #0
+	str	r3, [sp, #16]
+.L2369:
+	ldr	r3, [sp, #20]
+	add	r5, r3, r5
+	uxth	r5, r5
+	b	.L2355
+.L2385:
+	ldr	r3, .L2386+4
+	mov	r0, r10
+	ldrb	r2, [sp, #44]	@ zero_extendqisi2
+	strb	r2, [r3, #656]
+	ldr	r3, .L2386
+	ldr	r2, [sp, #124]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2371
+	bl	__stack_chk_fail
+.L2371:
+	add	sp, sp, #132
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2387:
+	.align	2
+.L2386:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR3
+	.word	1179535694
+	.word	.LC165
+	.fnend
+	.size	id_block_read_data.constprop.30, .-id_block_read_data.constprop.30
+	.align	2
+	.global	flash_complete_plane_page_read
+	.type	flash_complete_plane_page_read, %function
+flash_complete_plane_page_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	mvn	r3, #0
+	ldr	r4, .L2405
+	mov	r10, r0
+	mov	r6, r1
+	mov	r7, r2
+	ldrb	r8, [r4, #676]	@ zero_extendqisi2
+	rsb	r9, r8, #24
+	mvn	r8, r3, asl r8
+	and	r3, r8, r0, lsr r9
+	uxtb	r5, r3
+	ldrb	r3, [r4, #589]	@ zero_extendqisi2
+	cmp	r3, r5
+	bhi	.L2389
+	ldr	r1, .L2405+4
+	movw	r2, #909
+	ldr	r0, .L2405+8
+	bl	printk
+	bl	dump_stack
+.L2389:
+	ldrb	r2, [r4, #589]	@ zero_extendqisi2
+	ldr	r3, .L2405
+	cmp	r2, r5
+	mvnls	r0, #0
+	bls	.L2390
+	add	r5, r3, r5
+	mvn	r2, #0
+	bic	r9, r10, r2, asl r9
+	ubfx	r10, r10, #24, #2
+	ldrb	r5, [r5, #668]	@ zero_extendqisi2
+	ldr	r8, [r3, #528]
+	mov	r0, r5
+	bl	nandc_cs
+	cmp	r10, #0
+	bne	.L2391
+	mov	r0, r9
+	bl	slc_phy_page_address_calc
+	mov	r9, r0
+.L2391:
+	ldrb	r3, [r4, #607]	@ zero_extendqisi2
+	uxtb	r0, r9
+	mov	r1, r9, lsr #8
+	mov	r2, r9, lsr #16
+	cmp	r3, #1
+	mov	r3, r5, asl #8
+	addeq	r3, r8, r3
+	moveq	ip, #6
+	beq	.L2404
+	ldr	ip, .L2405
+	add	r3, r8, r3
+	ldr	ip, [ip, #584]
+	ldrb	ip, [ip, #12]	@ zero_extendqisi2
+	cmp	ip, #3
+	bne	.L2394
+	mov	ip, #5
+.L2404:
+	str	ip, [r3, #2056]
+	mov	ip, #0
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+	str	r0, [r3, #2052]
+	str	r1, [r3, #2052]
+	str	r2, [r3, #2052]
+	b	.L2402
+.L2394:
+	mov	ip, #0
+	str	ip, [r3, #2056]
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+	str	r0, [r3, #2052]
+	str	r1, [r3, #2052]
+	str	r2, [r3, #2052]
+	mov	r2, #5
+	str	r2, [r3, #2056]
+	str	ip, [r3, #2052]
+	str	ip, [r3, #2052]
+.L2402:
+	mov	r2, #224
+	str	r2, [r3, #2056]
+	ldr	r3, [r4, #584]
+	ldrb	r2, [r3, #12]	@ zero_extendqisi2
+	adds	r3, r10, #0
+	movne	r3, #1
+	cmp	r2, #3
+	movne	r3, #0
+	cmp	r3, #0
+	beq	.L2395
+	ldr	r3, .L2405
+	ldrb	r3, [r3, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	subeq	r3, r10, #1
+	addeq	r0, r9, r9, asl #1
+	addeq	r0, r3, r0
+	beq	.L2403
+.L2395:
+	mov	r0, r9
+.L2403:
+	bl	nandc_set_seed
+	ldr	r3, .L2405+12
+	mov	r1, #0
+	mov	r0, r5
+	ldrb	r2, [r3, #13]	@ zero_extendqisi2
+	mov	r3, r6
+	str	r7, [sp]
+	bl	nandc_xfer
+	mov	r4, r0
+	mov	r0, r5
+	bl	nandc_de_cs
+	mov	r0, r4
+.L2390:
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2406:
+	.align	2
+.L2405:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1556
+	.word	.LC0
+	.word	.LANCHOR2
+	.fnend
+	.size	flash_complete_plane_page_read, .-flash_complete_plane_page_read
+	.align	2
+	.global	flash_complete_page_read
+	.type	flash_complete_page_read, %function
+flash_complete_page_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, #1
+	ldr	r5, .L2441
+	.pad #20
+	sub	sp, sp, #20
+	mov	r9, r0
+	mov	r10, r1
+	mov	fp, r2
+	ldrb	r7, [r5, #676]	@ zero_extendqisi2
+	rsb	r3, r7, #24
+	mov	r7, r6, asl r7
+	sub	r7, r7, #1
+	mov	r4, r6, asl r3
+	and	r7, r7, r0, lsr r3
+	ldrb	r3, [r5, #589]	@ zero_extendqisi2
+	sub	r4, r4, #1
+	ubfx	r6, r0, #24, #2
+	uxtb	r7, r7
+	and	r4, r4, r0
+	cmp	r3, r7
+	bhi	.L2408
+	ldr	r1, .L2441+4
+	movw	r2, #1033
+	ldr	r0, .L2441+8
+	bl	printk
+	bl	dump_stack
+.L2408:
+	add	r7, r5, r7
+	ldrb	r8, [r7, #668]	@ zero_extendqisi2
+	ldr	r7, [r5, #528]
+	mov	r0, r8
+	bl	nandc_cs
+	cmp	r6, #0
+	bne	.L2409
+	mov	r0, r4
+	bl	slc_phy_page_address_calc
+	mov	r4, r0
+.L2409:
+	add	r3, r7, r8, asl #8
+	mov	r2, #5
+	str	r2, [r3, #2056]
+	mov	r2, #0
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	uxtb	r2, r4
+	str	r2, [r3, #2052]
+	mov	r2, r4, lsr #8
+	str	r2, [r3, #2052]
+	mov	r2, r4, lsr #16
+	str	r2, [r3, #2052]
+	mov	r2, #224
+	str	r2, [r3, #2056]
+	ldr	r3, [r5, #584]
+	ldrb	r2, [r3, #12]	@ zero_extendqisi2
+	adds	r3, r6, #0
+	movne	r3, #1
+	cmp	r2, #3
+	movne	r3, #0
+	cmp	r3, #0
+	beq	.L2410
+	ldr	r3, .L2441
+	ldrb	r3, [r3, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	subeq	r0, r6, #1
+	addeq	r3, r4, r4, asl #1
+	addeq	r0, r0, r3
+	beq	.L2440
+.L2410:
+	mov	r0, r4
+.L2440:
+	bl	nandc_set_seed
+	ldr	r7, .L2441+12
+	mov	r0, r8
+	mov	r1, #0
+	mov	r3, r10
+	ldrb	r2, [r7, #13]	@ zero_extendqisi2
+	str	fp, [sp]
+	bl	nandc_xfer
+	cmn	r0, #1
+	bne	.L2412
+	ldrb	ip, [r5, #656]	@ zero_extendqisi2
+	cmp	ip, #0
+	beq	.L2413
+	ldr	r2, .L2441
+	mov	r3, #0
+	mov	r0, r8
+	orr	r1, r4, r6, asl #24
+	str	ip, [sp, #12]
+	strb	r3, [r2, #656]
+	mov	r2, r10
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	str	r3, [sp]
+	mov	r3, fp
+	bl	flash_read_page
+	ldr	r3, .L2441
+	cmp	r6, #0
+	ldr	ip, [sp, #12]
+	strb	ip, [r3, #656]
+	bne	.L2414
+.L2421:
+	ldrb	r3, [r5]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2414
+	ldr	r3, .L2441
+	ldrb	r3, [r3, #660]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, asr #2
+	blt	.L2414
+	ldrb	r3, [r7, #23]	@ zero_extendqisi2
+	sub	r3, r3, #4
+	cmp	r3, #4
+	movls	r0, #256
+	b	.L2428
+.L2414:
+	cmn	r0, #1
+	bne	.L2428
+.L2422:
+	ldr	r3, .L2441+16
+	ldr	ip, [r3, #-3252]
+	cmp	ip, #0
+	bne	.L2417
+.L2420:
+	ldrb	r3, [r5, #656]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r0, .L2441+20
+	mov	r2, r9
+	str	r3, [sp]
+	mvn	r3, #0
+	bl	printk
+	ldrb	r3, [r5, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	mvneq	r0, #0
+	beq	.L2428
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	mov	r0, r8
+	orr	r1, r4, r6, asl #24
+	mov	r2, r10
+	str	r3, [sp]
+	mov	r3, fp
+	bl	flash_ddr_tuning_read
+	b	.L2428
+.L2417:
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	mov	r0, r8
+	orr	r1, r4, r6, asl #24
+	mov	r2, r10
+	str	r3, [sp]
+	mov	r3, fp
+	blx	ip
+	cmn	r0, #1
+	bne	.L2428
+	b	.L2420
+.L2412:
+	cmp	r6, #0
+	beq	.L2421
+	b	.L2428
+.L2413:
+	cmp	r6, #0
+	beq	.L2421
+	b	.L2422
+.L2428:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2442:
+	.align	2
+.L2441:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1588
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LANCHOR3
+	.word	.LC166
+	.fnend
+	.size	flash_complete_page_read, .-flash_complete_page_read
+	.align	2
+	.type	queue_wait_first_req_completed, %function
+queue_wait_first_req_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L2539
+	ldrb	r5, [r4, #2263]	@ zero_extendqisi2
+	cmp	r5, #255
+	beq	.L2477
+	mov	r3, #48
+	mla	r3, r3, r5, r4
+	ldrb	r2, [r3, #766]	@ zero_extendqisi2
+	ldr	r6, [r3, #748]
+	sub	r3, r2, #1
+	cmp	r3, #10
+	ldrls	pc, [pc, r3, asl #2]
+	b	.L2477
+.L2447:
+	.word	.L2446
+	.word	.L2448
+	.word	.L2449
+	.word	.L2449
+	.word	.L2449
+	.word	.L2449
+	.word	.L2450
+	.word	.L2451
+	.word	.L2452
+	.word	.L2449
+	.word	.L2452
+.L2446:
+	mov	r0, r6
+	mov	r1, #64
+	bl	flash_wait_device_ready
+	tst	r0, #64
+	beq	.L2477
+	mov	r3, #48
+	mla	r3, r3, r5, r4
+	ldr	r2, [r3, #732]
+	ldr	r1, [r3, #728]
+	cmp	r2, #0
+	beq	.L2454
+	ldrb	r0, [r3, #764]	@ zero_extendqisi2
+	ldr	r3, .L2539
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	cmp	r0, r3
+	moveq	r1, r2
+.L2454:
+	mov	r3, #48
+	mov	r0, r6
+	mla	r5, r3, r5, r4
+	ldr	r2, [r5, #736]
+	bl	flash_complete_page_read
+	mov	r3, #13
+	strb	r3, [r5, #766]
+	ldrb	r3, [r5, #726]	@ zero_extendqisi2
+	orr	r3, r3, #8
+	strb	r3, [r5, #726]
+	str	r0, [r5, #760]
+	b	.L2477
+.L2448:
+	mov	r0, r6
+	mov	r1, #64
+	bl	flash_wait_device_ready
+	mov	r2, #48
+	mla	r3, r2, r5, r4
+	ldr	r1, .L2539
+	ldrb	r6, [r3, #724]	@ zero_extendqisi2
+	tst	r0, #64
+	beq	.L2477
+	mla	r2, r2, r6, r1
+	ldr	fp, [r3, #728]
+	ldr	r9, [r2, #728]
+	ldr	r2, [r3, #732]
+	cmp	r2, #0
+	beq	.L2455
+	ldrb	r0, [r3, #764]	@ zero_extendqisi2
+	ldrb	r3, [r1, #2260]	@ zero_extendqisi2
+	cmp	r0, r3
+	moveq	fp, r2
+.L2455:
+	mov	r3, #48
+	mla	r3, r3, r6, r4
+	ldr	r2, [r3, #732]
+	cmp	r2, #0
+	beq	.L2456
+	ldrb	r1, [r3, #764]	@ zero_extendqisi2
+	ldr	r3, .L2539
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	cmp	r1, r3
+	moveq	r9, r2
+.L2456:
+	mov	r7, #48
+	mov	r1, fp
+	mla	r3, r7, r5, r4
+	mla	r7, r7, r6, r4
+	add	ip, r3, #732
+	str	ip, [sp, #8]
+	ldr	r2, [r3, #736]
+	ldr	r0, [r3, #748]
+	str	r3, [sp, #12]
+	bl	flash_complete_plane_page_read
+	mov	r1, r9
+	ldr	r2, [r7, #736]
+	mov	r8, r0
+	ldr	r0, [r7, #748]
+	bl	flash_complete_plane_page_read
+	cmn	r8, #1
+	mov	r10, r0
+	beq	.L2457
+	ldr	r3, [sp, #12]
+	ldr	r3, [r3, #744]
+	cmn	r3, #1
+	beq	.L2458
+	ldr	ip, [sp, #8]
+	ldr	r2, [ip, #4]
+	ldr	r2, [r2, #4]
+	cmp	r3, r2
+	beq	.L2458
+.L2457:
+	mov	r7, #48
+	ldrb	r0, [r4, #676]	@ zero_extendqisi2
+	mla	r7, r7, r5, r4
+	rsb	r1, r0, #24
+	ldrb	lr, [r4, #2260]	@ zero_extendqisi2
+	mvn	r3, #0
+	mvn	r3, r3, asl r0
+	add	ip, r7, #732
+	str	ip, [sp, #8]
+	ldr	r2, [r7, #748]
+	str	lr, [sp]
+	and	r0, r3, r2, lsr r1
+	bic	r1, r2, r3, asl r1
+	mov	r2, fp
+	ldr	r3, [r7, #736]
+	uxtb	r0, r0
+	bl	flash_read_page_en
+	ldr	r2, [r7, #744]
+	cmn	r2, #1
+	mov	r8, r0
+	beq	.L2459
+	ldr	ip, [sp, #8]
+	ldr	r3, [ip, #4]
+	ldr	r1, [r3, #4]
+	cmp	r2, r1
+	beq	.L2459
+	ldr	r0, .L2539+4
+	ldr	r0, [r0]
+	tst	r0, #64
+	beq	.L2459
+	str	r1, [sp]
+	ldr	r0, .L2539+8
+	ldr	r1, [r7, #748]
+	ldr	r3, [r3]
+	bl	printk
+.L2459:
+	mov	r3, #48
+	mla	r3, r3, r5, r4
+	ldr	r2, [r3, #744]
+	cmn	r2, #1
+	beq	.L2458
+	ldr	r3, [r3, #736]
+	ldr	r3, [r3, #4]
+	cmp	r2, r3
+	beq	.L2458
+	ldr	r1, .L2539+12
+	mov	r2, #360
+	ldr	r0, .L2539+16
+	bl	printk
+	bl	dump_stack
+.L2458:
+	mov	r3, #48
+	mov	r2, #13
+	mla	r5, r3, r5, r4
+	cmn	r10, #1
+	strb	r2, [r5, #766]
+	ldrb	r2, [r5, #726]	@ zero_extendqisi2
+	str	r8, [r5, #760]
+	orr	r2, r2, #8
+	strb	r2, [r5, #726]
+	beq	.L2460
+	ldr	r2, .L2539
+	mla	r3, r3, r6, r2
+	ldr	r2, [r3, #744]
+	cmn	r2, #1
+	beq	.L2462
+	ldr	r3, [r3, #736]
+	ldr	r3, [r3, #4]
+	cmp	r2, r3
+	beq	.L2462
+.L2460:
+	mov	r5, #48
+	ldrb	r0, [r4, #676]	@ zero_extendqisi2
+	mla	r5, r5, r6, r4
+	rsb	r1, r0, #24
+	ldrb	ip, [r4, #2260]	@ zero_extendqisi2
+	mvn	r3, #0
+	mvn	r3, r3, asl r0
+	ldr	r2, [r5, #748]
+	str	ip, [sp]
+	and	r0, r3, r2, lsr r1
+	bic	r1, r2, r3, asl r1
+	mov	r2, r9
+	ldr	r3, [r5, #736]
+	uxtb	r0, r0
+	bl	flash_read_page_en
+	ldr	r2, [r5, #744]
+	cmn	r2, #1
+	beq	.L2464
+	ldr	r3, [r5, #736]
+	ldr	r1, [r3, #4]
+	cmp	r2, r1
+	beq	.L2464
+	ldr	r0, .L2539+4
+	ldr	r0, [r0]
+	tst	r0, #64
+	beq	.L2464
+	str	r1, [sp]
+	ldr	r0, .L2539+8
+	ldr	r1, [r5, #748]
+	ldr	r3, [r3]
+	bl	printk
+.L2464:
+	mov	r3, #48
+	mla	r3, r3, r6, r4
+	ldr	r2, [r3, #744]
+	cmn	r2, #1
+	beq	.L2462
+	ldr	r3, [r3, #736]
+	ldr	r3, [r3, #4]
+	cmp	r2, r3
+	beq	.L2462
+	ldr	r1, .L2539+12
+	movw	r2, #375
+	ldr	r0, .L2539+16
+	bl	printk
+	bl	dump_stack
+.L2462:
+	mov	r3, #48
+	mla	r4, r3, r6, r4
+	mov	r3, #13
+	strb	r3, [r4, #766]
+	ldrb	r3, [r4, #726]	@ zero_extendqisi2
+	str	r8, [r4, #760]
+	orr	r3, r3, #8
+	strb	r3, [r4, #726]
+	b	.L2477
+.L2449:
+	bl	nandc_iqr_wait_flash_ready
+	mov	r0, r6
+	mov	r1, #64
+	bl	flash_wait_device_ready
+	tst	r0, #64
+	mov	r7, r0
+	beq	.L2477
+	ands	r6, r0, #5
+	mov	r8, #48
+	beq	.L2465
+	mla	r5, r8, r5, r4
+	mov	r3, #12
+	ldr	r0, .L2539+20
+	mov	r2, r7
+	mov	r6, r7
+	strb	r3, [r5, #766]
+	ldrb	r1, [r5, #725]	@ zero_extendqisi2
+	str	r3, [sp]
+	ldr	r3, [r5, #748]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r5, #760]
+	b	.L2445
+.L2465:
+	mul	r7, r8, r5
+	mov	r3, #13
+	ldr	r2, .L2539
+	add	r8, r4, r7
+	strb	r3, [r8, #766]
+	ldr	r3, [r4, #2288]
+	str	r6, [r8, #760]
+	ldr	r1, [r3, #156]
+	ldr	r3, .L2539+24
+	cmp	r1, r3
+	bne	.L2477
+	add	r9, r2, r7
+	add	r9, r9, #756
+	ldrh	r3, [r9, #2]
+	cmp	r3, #0
+	bne	.L2477
+	ldrb	r0, [r2, #676]	@ zero_extendqisi2
+	mvn	r3, #0
+	ldr	ip, [r8, #748]
+	ldrb	r2, [r2, #2260]	@ zero_extendqisi2
+	rsb	r1, r0, #24
+	ldr	r7, .L2539+28
+	mvn	r3, r3, asl r0
+	and	r0, r3, ip, lsr r1
+	bic	r1, ip, r3, asl r1
+	str	r2, [sp]
+	uxtb	r0, r0
+	ldr	r3, [r7, #-3244]
+	ldr	r2, [r7, #-3248]
+	bl	flash_read_page_en
+	cmn	r0, #1
+	mov	r3, r0
+	beq	.L2466
+	ldr	r1, [r8, #736]
+	ldr	r2, [r7, #-3244]
+	ldr	r1, [r1]
+	ldr	r2, [r2]
+	cmp	r1, r2
+	beq	.L2477
+.L2466:
+	mov	r2, #48
+	ldr	r0, .L2539+32
+	mla	r5, r2, r5, r4
+	ldrb	r2, [r4, #656]	@ zero_extendqisi2
+	ldrb	r1, [r5, #725]	@ zero_extendqisi2
+	str	r2, [sp]
+	ldr	r2, [r5, #748]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r5, #760]
+	b	.L2445
+.L2452:
+	cmp	r2, #11
+	ldr	r1, .L2539+36
+	mov	r0, #48
+	mvn	r2, #0
+	movne	r3, #3
+	moveq	r3, #10
+	str	r3, [sp, #8]
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	mla	lr, r0, r5, r1
+	rsb	r10, r3, #24
+	mvn	r3, r2, asl r3
+	and	ip, r3, r6, lsr r10
+	str	r1, [sp, #12]
+	uxth	ip, ip
+.L2468:
+	ldrb	r8, [lr]	@ zero_extendqisi2
+	cmp	r8, #255
+	beq	.L2538
+	mul	r2, r0, r8
+	ldr	r1, [sp, #12]
+	ldr	r7, .L2539
+	add	lr, r1, r2
+	add	r2, r4, r2
+	ldr	r1, [sp, #8]
+	add	r9, r7, #724
+	ldrb	fp, [r2, #766]	@ zero_extendqisi2
+	cmp	fp, r1
+	bne	.L2468
+	ldr	r2, [r2, #748]
+	and	r2, r3, r2, lsr r10
+	cmp	ip, r2
+	bne	.L2468
+	bl	nandc_iqr_wait_flash_ready
+	mov	r0, r6
+	mov	r1, #64
+	bl	flash_wait_device_ready
+	tst	r0, #64
+	mov	r6, r0
+	beq	.L2537
+	ands	r2, r0, #15
+	mov	r3, #48
+	mul	r3, r3, r5
+	beq	.L2472
+	add	r7, r7, r3
+	mov	r9, #12
+	ldr	r0, .L2539+40
+	mov	r2, r6
+	ldrb	r1, [r7, #725]	@ zero_extendqisi2
+	str	r9, [sp]
+	ldr	r3, [r7, #748]
+	bl	printk
+	mvn	r3, #0
+	strb	r9, [r7, #766]
+	str	r3, [r7, #760]
+	b	.L2471
+.L2472:
+	add	r6, r7, r3
+	mov	r1, #13
+	str	r2, [r6, #760]
+	ldr	r2, [r7, #2288]
+	strb	r1, [r6, #766]
+	ldr	r1, [r2, #156]
+	ldr	r2, .L2539+24
+	cmp	r1, r2
+	bne	.L2537
+	add	r3, r9, r3
+	ldrh	r3, [r3, #34]
+	cmp	r3, #0
+	bne	.L2537
+	ldr	r2, [r6, #748]
+	mvn	r3, #0
+	ldrb	r0, [r7, #676]	@ zero_extendqisi2
+	ldr	r9, .L2539+28
+	rsb	r1, r0, #24
+	ldrb	ip, [r7, #2260]	@ zero_extendqisi2
+	mvn	r3, r3, asl r0
+	and	r0, r3, r2, lsr r1
+	bic	r1, r2, r3, asl r1
+	str	ip, [sp]
+	uxtb	r0, r0
+	ldr	r3, [r9, #-3244]
+	ldr	r2, [r9, #-3248]
+	bl	flash_read_page_en
+	cmn	r0, #1
+	mov	r3, r0
+	beq	.L2474
+	ldr	r1, [r6, #736]
+	ldr	r2, [r9, #-3244]
+	ldr	r1, [r1]
+	ldr	r2, [r2]
+	cmp	r1, r2
+	beq	.L2537
+.L2474:
+	mov	r6, #48
+	ldrb	r2, [r4, #656]	@ zero_extendqisi2
+	mla	r6, r6, r5, r4
+	ldr	r0, .L2539+44
+	ldrb	r1, [r6, #725]	@ zero_extendqisi2
+	str	r2, [sp]
+	ldr	r2, [r6, #748]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r6, #760]
+.L2537:
+	mov	r6, #0
+.L2471:
+	mov	r3, #48
+	mla	r5, r3, r5, r4
+	mla	r4, r3, r8, r4
+	ldrb	r2, [r5, #766]	@ zero_extendqisi2
+	ldr	r3, [r5, #760]
+	strb	r2, [r4, #766]
+	str	r3, [r4, #760]
+	b	.L2445
+.L2538:
+	mvn	r6, #0
+	b	.L2445
+.L2450:
+	mov	r0, r6
+	mov	r1, #32
+	bl	flash_wait_device_ready
+	tst	r0, #32
+	beq	.L2477
+	ands	r6, r0, #15
+	mov	r3, #48
+	mlaeq	r5, r3, r5, r4
+	movne	r2, #12
+	mlane	r3, r3, r5, r4
+	moveq	r3, #13
+	movne	r6, r0
+	streqb	r3, [r5, #766]
+	streq	r6, [r5, #760]
+	strneb	r2, [r3, #766]
+	mvnne	r2, #0
+	strne	r2, [r3, #760]
+	b	.L2445
+.L2451:
+	mov	r0, r6
+	mov	r1, #64
+	bl	flash_wait_device_ready
+	tst	r0, #64
+	movne	r3, #48
+	mlane	r5, r3, r5, r4
+	movne	r3, #7
+	strne	r0, [r5, #760]
+	strneb	r3, [r5, #766]
+.L2477:
+	mov	r6, #0
+.L2445:
+	mov	r0, r6
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2540:
+	.align	2
+.L2539:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC167
+	.word	.LANCHOR1+1616
+	.word	.LC0
+	.word	.LC168
+	.word	1145785929
+	.word	.LANCHOR3
+	.word	.LC169
+	.word	.LANCHOR0+724
+	.word	.LC170
+	.word	.LC171
+	.fnend
+	.size	queue_wait_first_req_completed, .-queue_wait_first_req_completed
+	.align	2
+	.global	sblk_wait_write_queue_completed
+	.type	sblk_wait_write_queue_completed, %function
+sblk_wait_write_queue_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L2546
+.L2542:
+	ldrb	r3, [r4, #2263]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L2545
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2542
+.L2545:
+	ldmfd	sp!, {r4, pc}
+.L2547:
+	.align	2
+.L2546:
+	.word	.LANCHOR0
+	.fnend
+	.size	sblk_wait_write_queue_completed, .-sblk_wait_write_queue_completed
+	.align	2
+	.global	ftl_read_page
+	.type	ftl_read_page, %function
+ftl_read_page:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r7, r0
+	mov	r6, r1
+	mov	r5, r2
+	mov	r4, r3
+	ldr	r8, [sp, #24]
+	bl	sblk_wait_write_queue_completed
+	mov	r0, r7
+	mov	r1, r6
+	mov	r2, r5
+	mov	r3, r4
+	str	r8, [sp, #24]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	b	flash_read_page_en
+	.fnend
+	.size	ftl_read_page, .-ftl_read_page
+	.align	2
+	.global	ftl_read_ppa_page
+	.type	ftl_read_ppa_page, %function
+ftl_read_ppa_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r8, r3
+	ldr	r3, .L2552
+	mov	r7, r1
+	mov	r6, r2
+	mvn	r2, #0
+	mov	r5, r0
+	ldrb	r1, [r3, #676]	@ zero_extendqisi2
+	rsb	r4, r1, #24
+	mvn	r2, r2, asl r1
+	and	r4, r2, r0, lsr r4
+	bl	sblk_wait_write_queue_completed
+	mov	r1, r5
+	uxtb	r4, r4
+	mov	r2, r7
+	mov	r3, r6
+	mov	r0, r4
+	str	r8, [sp]
+	bl	flash_read_page_en
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2553:
+	.align	2
+.L2552:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_read_ppa_page, .-ftl_read_ppa_page
+	.align	2
+	.global	sblk_read_page
+	.type	sblk_read_page, %function
+sblk_read_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r10, .L2582
+	mov	r8, r0
+	mov	r6, r1
+	mov	r4, r0
+	mov	r5, r1
+.L2555:
+	cmp	r5, #0
+	beq	.L2578
+	ldrb	fp, [r4]	@ zero_extendqisi2
+	ldr	r9, [r4, #24]
+.L2556:
+	mov	r0, r9
+	mov	r1, #0
+	bl	queue_lun_state
+	cmp	r0, #0
+	beq	.L2580
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2556
+.L2580:
+	cmp	r5, #1
+	beq	.L2562
+	ldr	r3, .L2582+4
+	ldrb	r3, [r3, #-3240]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2562
+	ldr	r3, .L2582
+	mvn	lr, #0
+	ldrb	r2, [r3, #676]	@ zero_extendqisi2
+	rsb	r3, r2, #24
+	mov	r3, r9, lsr r3
+	bic	lr, r3, lr, asl r2
+	uxth	r3, lr
+	str	r3, [sp, #4]
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L2561
+	ldr	r1, .L2582+8
+	movw	r2, #661
+	ldr	r0, .L2582+12
+	bl	printk
+	bl	dump_stack
+.L2561:
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	mov	r2, #48
+	ldrb	r0, [r10, #676]	@ zero_extendqisi2
+	mvn	ip, #0
+	mul	r3, r2, r3
+	rsb	r2, r0, #24
+	add	r7, r10, r3
+	ldr	r1, [r7, #748]
+	mov	r2, r1, lsr r2
+	bic	r2, r2, ip, asl r0
+	ldr	r0, [sp, #4]
+	uxth	r2, r2
+	cmp	r0, r2
+	bne	.L2562
+	ldr	r2, .L2582+16
+	ldrh	r2, [r2]
+	add	r9, r2, r9
+	cmp	r1, r9
+	bne	.L2562
+	ldr	r0, [r4, #24]
+	mvn	r9, #0
+	str	r3, [sp, #12]
+	add	r5, r5, r9
+	ldrb	fp, [r7, #724]	@ zero_extendqisi2
+	bl	flash_start_plane_read
+	mov	ip, #2
+	mov	r2, #0
+	strb	ip, [r4, #42]
+	mov	r1, r4
+	strb	r2, [r4, #43]
+	ldr	r0, .L2582+20
+	strb	r9, [r4]
+	str	ip, [sp, #8]
+	str	r2, [sp, #4]
+	bl	buf_add_tail
+	ldr	r1, .L2582+24
+	strb	r9, [r7, #724]
+	ldr	r0, .L2582+20
+	ldr	ip, [sp, #8]
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #12]
+	strb	ip, [r7, #766]
+	strb	r2, [r7, #767]
+	add	r1, r1, r3
+	bl	buf_add_tail
+	b	.L2560
+.L2562:
+	mov	r0, r4
+	bl	queue_read_cmd
+.L2560:
+	subs	r5, r5, #1
+	ldrne	r3, .L2582+24
+	movne	r4, #48
+	mlane	r4, r4, fp, r3
+	bne	.L2555
+.L2578:
+	ldr	r4, .L2582+24
+	mov	r5, #48
+.L2566:
+	cmp	r6, #0
+	beq	.L2581
+	ldrb	r3, [r8, #42]	@ zero_extendqisi2
+	cmp	r3, #13
+	bne	.L2567
+	ldrb	r3, [r8]	@ zero_extendqisi2
+	sub	r6, r6, #1
+	cmp	r3, #255
+	mlane	r8, r5, r3, r4
+.L2567:
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2566
+.L2581:
+	mov	r0, r6
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2583:
+	.align	2
+.L2582:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LANCHOR1+1648
+	.word	.LC0
+	.word	.LANCHOR0+2994
+	.word	.LANCHOR0+2263
+	.word	.LANCHOR0+724
+	.fnend
+	.size	sblk_read_page, .-sblk_read_page
+	.align	2
+	.global	flash_prog_page
+	.type	flash_prog_page, %function
+flash_prog_page:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r10, r3
+	ldr	r6, .L2596
+	mov	fp, r2
+	add	r8, r0, #8
+	mov	r5, r0
+	mov	r7, r1
+	ubfx	r9, r1, #24, #2
+	ldrb	r3, [r6, #676]	@ zero_extendqisi2
+	ldr	r4, [r6, #528]
+	mvn	r6, #0
+	rsb	r3, r3, #24
+	bic	r6, r1, r6, asl r3
+	ldr	r3, .L2596+4
+	add	r8, r4, r8, asl #8
+	ldr	r2, [r3]
+	str	r3, [sp, #4]
+	tst	r2, #16
+	beq	.L2585
+	ldr	r0, .L2596+8
+	mov	r2, r9
+	ldr	r3, [sp, #48]
+	bl	printk
+.L2585:
+	bl	nandc_wait_flash_ready
+	mov	r0, r5
+	bl	hynix_reconfig_rr_para
+	mov	r0, r5
+	bl	nandc_cs
+	cmp	r9, #0
+	mov	r0, r5
+	bne	.L2586
+	bl	zftl_flash_enter_slc_mode
+	b	.L2587
+.L2586:
+	bl	zftl_flash_exit_slc_mode
+.L2587:
+	add	r4, r4, r5, asl #8
+	mov	r3, #128
+	mov	r0, r6
+	str	r3, [r4, #2056]
+	mov	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r6
+	str	r3, [r4, #2052]
+	mov	r3, r6, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r6, lsr #16
+	str	r3, [r4, #2052]
+	bl	nandc_set_seed
+	mov	r2, fp
+	mov	r0, #1
+	ldr	r3, [sp, #4]
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	mov	r3, r10
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	ldr	r3, .L2596+12
+	ldr	r0, .L2596+16
+	ldr	r3, [r3, #4]
+	blx	r3
+	mov	r3, #16
+	str	r3, [r4, #2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	r0, r8
+	bl	flash_read_status
+	mov	r4, r0
+	mov	r0, r5
+	bl	nandc_de_cs
+	ands	r4, r4, #4
+	beq	.L2588
+	ldr	r0, .L2596+20
+	mov	r1, r7
+	mov	r2, r4
+	bl	printk
+.L2588:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2597:
+	.align	2
+.L2596:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC172
+	.word	arm_delay_ops
+	.word	128849000
+	.word	.LC173
+	.fnend
+	.size	flash_prog_page, .-flash_prog_page
+	.align	2
+	.global	flash_test_blk
+	.type	flash_test_blk, %function
+flash_test_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ldr	r4, .L2609
+	mov	r5, r1
+	mov	r2, #32
+	mov	r1, #165
+	ldr	r0, [r4, #-3272]
+	bl	ftl_memset
+	mov	r1, #90
+	mov	r2, #8
+	ldr	r0, [r4, #-3264]
+	bl	ftl_memset
+	ldr	r3, .L2609+4
+	mov	r0, r6
+	ldrh	r3, [r3, #2]
+	mul	r5, r3, r5
+	mov	r1, r5
+	bl	flash_erase_block
+	cmn	r0, #1
+	bne	.L2599
+.L2601:
+	mvn	r4, #0
+	b	.L2600
+.L2599:
+	ldr	r7, .L2609+8
+	mov	r0, r6
+	mov	r1, r5
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	str	r3, [sp]
+	ldr	r2, [r4, #-3272]
+	ldr	r3, [r4, #-3264]
+	bl	flash_prog_page
+	cmn	r0, #1
+	beq	.L2601
+	ldrb	r3, [r7, #13]	@ zero_extendqisi2
+	mov	r0, r6
+	mov	r1, r5
+	str	r3, [sp]
+	ldr	r2, [r4, #-3272]
+	ldr	r3, [r4, #-3264]
+	bl	flash_read_page
+	cmn	r0, #1
+	beq	.L2601
+	ldr	r3, [r4, #-3272]
+	ldr	r2, [r3]
+	ldr	r3, .L2609+12
+	cmp	r2, r3
+	bne	.L2601
+	ldr	r3, [r4, #-3264]
+	ldr	r4, .L2609+16
+	ldr	r3, [r3]
+	subs	r4, r3, r4
+	mvnne	r4, #0
+.L2600:
+	mov	r0, r6
+	mov	r1, r5
+	bl	flash_erase_block
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L2610:
+	.align	2
+.L2609:
+	.word	.LANCHOR3
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1515870811
+	.word	1515870810
+	.fnend
+	.size	flash_test_blk, .-flash_test_blk
+	.align	2
+	.global	flash_dual_page_prog
+	.type	flash_dual_page_prog, %function
+flash_dual_page_prog:
+	.fnstart
+	@ args = 12, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r9, r3
+	ldr	fp, .L2626
+	add	r3, r0, #8
+	ldr	r7, .L2626+4
+	mvn	r5, #0
+	mov	r6, r0
+	mov	r8, r1
+	ldr	r4, [fp, #528]
+	mov	r10, r2
+	add	r3, r4, r3, asl #8
+	str	r3, [sp]
+	ldrb	r3, [fp, #676]	@ zero_extendqisi2
+	ubfx	fp, r1, #24, #2
+	rsb	r3, r3, #24
+	bic	r5, r1, r5, asl r3
+	ldr	r3, [r7]
+	tst	r3, #16
+	beq	.L2612
+	ldr	r0, .L2626+8
+	mov	r2, fp
+	ldr	r3, [sp, #56]
+	bl	printk
+.L2612:
+	bl	nandc_wait_flash_ready
+	mov	r0, r6
+	bl	nandc_cs
+	cmp	fp, #0
+	mov	r0, r6
+	bne	.L2613
+	bl	zftl_flash_enter_slc_mode
+	b	.L2614
+.L2613:
+	bl	zftl_flash_exit_slc_mode
+.L2614:
+	add	r4, r4, r6, asl #8
+	mov	ip, #128
+	mov	fp, #0
+	uxtb	r3, r5
+	str	ip, [r4, #2056]
+	mov	r0, r5
+	str	fp, [r4, #2052]
+	str	fp, [r4, #2052]
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #16
+	str	r3, [r4, #2052]
+	str	ip, [sp, #4]
+	bl	nandc_set_seed
+	ldrb	r1, [r7, #13]	@ zero_extendqisi2
+	mov	r2, r10
+	mov	r3, r9
+	mov	r0, #1
+	bl	nandc_xfer_start
+	mov	r9, #16
+	bl	nandc_xfer_done
+	str	r9, [r4, #2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	add	r0, r5, #1
+	uxtb	r3, r0
+	ldr	ip, [sp, #4]
+	str	ip, [r4, #2056]
+	str	fp, [r4, #2052]
+	str	fp, [r4, #2052]
+	str	r3, [r4, #2052]
+	mov	r3, r0, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r0, lsr r9
+	str	r3, [r4, #2052]
+	bl	nandc_set_seed
+	ldrb	r1, [r7, #13]	@ zero_extendqisi2
+	mov	r0, #1
+	ldr	r2, [sp, #48]
+	ldr	r3, [sp, #52]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	r9, [r4, #2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r0, [sp]
+	bl	flash_read_status
+	mov	r4, r0
+	mov	r0, r6
+	bl	nandc_de_cs
+	ands	r4, r4, #4
+	beq	.L2615
+	ldr	r3, .L2626+4
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L2615
+	ldr	r0, .L2626+12
+	mov	r1, r8
+	mov	r2, r4
+	bl	printk
+.L2615:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2627:
+	.align	2
+.L2626:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC172
+	.word	.LC173
+	.fnend
+	.size	flash_dual_page_prog, .-flash_dual_page_prog
+	.section	.text.unlikely
+	.align	2
+	.type	fw_flash_page_prog.constprop.29, %function
+fw_flash_page_prog.constprop.29:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #16
+	mov	r6, r1
+	ldr	r4, .L2633
+	mov	r5, r2
+	ldr	r3, [r4, #584]
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldrb	r8, [r4, #660]	@ zero_extendqisi2
+	mov	r7, r0
+	ldrb	r0, [r4, #588]	@ zero_extendqisi2
+	bl	nandc_bch_sel
+	ldr	r3, .L2633+4
+	ldrb	r3, [r3, #11]	@ zero_extendqisi2
+	cmp	r3, #9
+	bne	.L2629
+	ldr	r4, .L2633+8
+	mov	r1, #255
+	mov	r2, #16384
+	ldr	r0, [r4, #-3272]
+	bl	ftl_memset
+	ldr	r3, [r4, #-3272]
+	mov	r1, r7
+	mov	r2, r6
+	mov	r0, #0
+	str	r3, [sp]
+	str	r3, [sp, #4]
+	mov	r3, #4
+	str	r3, [sp, #8]
+	mov	r3, r5
+	bl	flash_dual_page_prog
+	b	.L2632
+.L2629:
+	mov	r3, #4
+	mov	r0, #0
+	str	r3, [sp]
+	mov	r1, r7
+	mov	r2, r6
+	mov	r3, r5
+	bl	flash_prog_page
+.L2632:
+	mov	r4, r0
+	mov	r0, r8
+	bl	nandc_bch_sel
+	mov	r0, r4
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2634:
+	.align	2
+.L2633:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR3
+	.fnend
+	.size	fw_flash_page_prog.constprop.29, .-fw_flash_page_prog.constprop.29
+	.text
+	.align	2
+	.global	flash_start_page_prog
+	.type	flash_start_page_prog, %function
+flash_start_page_prog:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mvn	r5, #0
+	ldr	r7, .L2646
+	mov	fp, r2
+	mov	r9, r0
+	mov	r8, r1
+	mov	r10, r3
+	ldrb	r6, [r7, #676]	@ zero_extendqisi2
+	ldrb	r2, [r7, #589]	@ zero_extendqisi2
+	rsb	ip, r6, #24
+	mvn	r6, r5, asl r6
+	and	r4, r6, r1, lsr ip
+	uxtb	r4, r4
+	cmp	r2, r4
+	bhi	.L2636
+	ldr	r1, .L2646+4
+	movw	r2, #821
+	ldr	r0, .L2646+8
+	str	ip, [sp]
+	bl	printk
+	bl	dump_stack
+	ldr	ip, [sp]
+.L2636:
+	ldrb	r1, [r7, #589]	@ zero_extendqisi2
+	ldr	r2, .L2646
+	cmp	r1, r4
+	bls	.L2635
+	ldr	r3, [r2, #528]
+	add	r1, r2, r4
+	mvn	r5, #0
+	str	r2, [sp, #4]
+	bic	r5, r8, r5, asl ip
+	ldrb	r6, [r1, #668]	@ zero_extendqisi2
+	str	r3, [sp]
+	bl	nandc_rdy_status
+	cmp	r0, #0
+	ldr	r2, [sp, #4]
+	bne	.L2638
+	ldrb	r2, [r2, #589]	@ zero_extendqisi2
+	cmp	r2, #1
+	bne	.L2639
+	bl	nandc_wait_flash_ready
+	b	.L2638
+.L2639:
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, #64
+	bl	flash_wait_device_ready_raw
+.L2638:
+	mov	r0, r6
+	bl	hynix_reconfig_rr_para
+	mov	r0, r6
+	bl	nandc_cs
+	tst	r8, #50331648
+	bne	.L2640
+	mov	r0, r5
+	bl	slc_phy_page_address_calc
+	ldrb	r3, [r7]	@ zero_extendqisi2
+	cmp	r3, #0
+	mov	r5, r0
+	beq	.L2641
+	mov	r0, r6
+	bl	zftl_flash_enter_slc_mode
+	b	.L2641
+.L2640:
+	mov	r0, r6
+	bl	zftl_flash_exit_slc_mode
+.L2641:
+	ldr	r3, [sp]
+	mov	r0, r5
+	add	r4, r3, r6, asl #8
+	mov	r3, #128
+	str	r3, [r4, #2056]
+	mov	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r5
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #16
+	str	r3, [r4, #2052]
+	bl	nandc_set_seed
+	ldr	r3, .L2646+12
+	mov	r2, fp
+	mov	r0, #1
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	mov	r3, r10
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	ldr	r3, .L2646+16
+	ldr	r0, .L2646+20
+	ldr	r3, [r3, #4]
+	blx	r3
+	str	r9, [r4, #2056]
+	mov	r0, r6
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	nandc_de_cs
+.L2635:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2647:
+	.align	2
+.L2646:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1664
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	arm_delay_ops
+	.word	128849000
+	.fnend
+	.size	flash_start_page_prog, .-flash_start_page_prog
+	.align	2
+	.type	queue_prog_cmd, %function
+queue_prog_cmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r2, [r4, #4]
+	mov	r0, #16
+	ldr	r3, [r4, #12]
+	ldr	r1, [r4, #24]
+	bl	flash_start_page_prog
+	ldr	r2, .L2657
+	ldr	r0, [r4, #24]
+	ldrb	r3, [r2, #2263]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L2649
+	ldrb	ip, [r2, #676]	@ zero_extendqisi2
+	mvn	r1, #0
+	mov	r5, #48
+	rsb	r6, ip, #24
+	mvn	r1, r1, asl ip
+	uxth	r1, r1
+	and	r0, r1, r0, asr r6
+.L2651:
+	mla	ip, r5, r3, r2
+	ldr	lr, [ip, #748]
+	and	lr, r1, lr, lsr r6
+	cmp	r0, lr
+	bne	.L2650
+	add	lr, ip, #764
+	ldrb	ip, [ip, #766]	@ zero_extendqisi2
+	cmp	ip, #7
+	moveq	r3, #3
+	streqb	r3, [lr, #2]
+	beq	.L2649
+.L2650:
+	mla	r3, r5, r3, r2
+	ldrb	r3, [r3, #724]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L2651
+.L2649:
+	mov	r3, #3
+	mov	r1, r4
+	strb	r3, [r4, #42]
+	mov	r3, #1
+	ldr	r0, .L2657+4
+	strb	r3, [r4, #43]
+	mvn	r3, #0
+	strb	r3, [r4]
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	buf_add_tail
+.L2658:
+	.align	2
+.L2657:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2263
+	.fnend
+	.size	queue_prog_cmd, .-queue_prog_cmd
+	.align	2
+	.global	sblk_prog_page
+	.type	sblk_prog_page, %function
+sblk_prog_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldrh	r3, [r0, #34]
+	mov	r5, r1
+	cmp	r3, #0
+	beq	.L2660
+	ldr	r3, .L2688
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L2660
+	ldr	r0, .L2688+4
+	mov	r2, r5
+	ldr	r1, [r4, #24]
+	bl	printk
+.L2660:
+	ldr	r8, .L2688+8
+	mov	r6, #0
+	mov	r9, r8
+.L2661:
+	cmp	r5, #0
+	beq	.L2685
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	ldr	r7, [r4, #24]
+	str	r3, [sp, #4]
+.L2662:
+	mov	r0, r7
+	mov	r1, #1
+	bl	queue_lun_state
+	cmp	r0, #0
+	beq	.L2687
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2662
+.L2687:
+	cmp	r5, #1
+	beq	.L2664
+	ldrb	r3, [r8, #721]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2665
+.L2664:
+	mov	r0, r4
+	bl	queue_prog_cmd
+	b	.L2666
+.L2665:
+	ldrb	r3, [r8, #676]	@ zero_extendqisi2
+	mvn	fp, #0
+	rsb	ip, r3, #24
+	mov	ip, r7, lsr ip
+	bic	fp, ip, fp, asl r3
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	cmp	r3, #255
+	uxth	fp, fp
+	bne	.L2667
+	ldr	r1, .L2688+12
+	movw	r2, #583
+	ldr	r0, .L2688+16
+	bl	printk
+	bl	dump_stack
+.L2667:
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	mov	r2, #48
+	mov	r10, #1
+	mla	r3, r2, r3, r9
+	ldrb	r2, [r9, #676]	@ zero_extendqisi2
+	ldr	ip, [r3, #748]
+	rsb	r3, r2, #24
+	mov	r2, r10, asl r2
+	sub	r2, r2, #1
+	and	r2, r2, ip, lsr r3
+	uxth	r2, r2
+	cmp	fp, r2
+	bne	.L2668
+	ldr	r2, .L2688+20
+	ldrb	lr, [r8, #2930]	@ zero_extendqisi2
+	ldrh	fp, [r2]
+	sub	lr, lr, #1
+	rsb	r3, fp, r3
+	uxth	r1, lr
+	mov	r3, r10, asl r3
+	mov	r0, r10, asl fp
+	sub	r3, r3, #1
+	and	r2, r1, r7, lsr fp
+	sub	r0, r0, #1
+	and	r1, r1, ip, lsr fp
+	uxth	r3, r3
+	and	r2, r2, r3
+	and	r3, r3, r1
+	subs	fp, r2, r3
+	uxth	r0, r0
+	and	r7, r7, r0
+	and	ip, ip, r0
+	movne	fp, #1
+	cmp	r7, ip
+	movne	fp, #0
+	cmp	fp, #0
+	beq	.L2669
+	cmp	r6, lr
+	beq	.L2668
+	mov	r0, #17
+	ldr	r1, [r4, #24]
+	ldr	r2, [r4, #4]
+	add	r6, r6, r10
+	ldr	r3, [r4, #12]
+	bl	flash_start_page_prog
+	mov	r3, #9
+	strb	r10, [r4, #43]
+	mov	r1, r4
+	strb	r3, [r4, #42]
+	mvn	r3, #0
+	ldr	r0, .L2688+24
+	strb	r3, [r4]
+	bl	buf_add_tail
+	b	.L2666
+.L2669:
+	mov	r0, r4
+	mov	r6, fp
+	bl	queue_prog_cmd
+	b	.L2666
+.L2668:
+	mov	r0, r4
+	mov	r6, #0
+	bl	queue_prog_cmd
+.L2666:
+	subs	r5, r5, #1
+	ldrne	r3, .L2688+28
+	movne	r4, #48
+	ldrne	r2, [sp, #4]
+	mlane	r4, r4, r2, r3
+	bne	.L2661
+.L2685:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2689:
+	.align	2
+.L2688:
+	.word	.LANCHOR2
+	.word	.LC174
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1688
+	.word	.LC0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR0+2263
+	.word	.LANCHOR0+724
+	.fnend
+	.size	sblk_prog_page, .-sblk_prog_page
+	.align	2
+	.global	ftl_flush
+	.type	ftl_flush, %function
+ftl_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r4, .L2696
+	ldr	r5, .L2696+4
+	ldrb	r1, [r4, #2285]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L2691
+	ldrb	r2, [r5, #-3239]	@ zero_extendqisi2
+	add	r3, r4, #724
+	mov	r0, #48
+	mla	r0, r0, r2, r3
+	bl	sblk_prog_page
+.L2691:
+	mvn	r3, #0
+	strb	r3, [r5, #-3239]
+	mov	r3, #0
+	strb	r3, [r4, #2285]
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	movw	r0, #65535
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	ftl_vpn_decrement
+.L2697:
+	.align	2
+.L2696:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.fnend
+	.size	ftl_flush, .-ftl_flush
+	.align	2
+	.global	zftl_cache_flush
+	.type	zftl_cache_flush, %function
+zftl_cache_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2703
+	ldrb	r3, [r3, #2285]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmeqfd	sp!, {r3, pc}
+	bl	timer_get_time
+	ldr	r3, .L2703+4
+	ldr	r3, [r3, #-3236]
+	add	r3, r3, #100
+	cmp	r0, r3
+	ldmlsfd	sp!, {r3, pc}
+	ldmfd	sp!, {r3, lr}
+	b	ftl_flush
+.L2704:
+	.align	2
+.L2703:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.fnend
+	.size	zftl_cache_flush, .-zftl_cache_flush
+	.align	2
+	.global	flash_start_tlc_page_prog
+	.type	flash_start_tlc_page_prog, %function
+flash_start_tlc_page_prog:
+	.fnstart
+	@ args = 12, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r3
+	ldr	r3, .L2713
+	mov	r7, r2
+	mov	fp, r0
+	mov	r6, r1
+	ldr	r5, [sp, #40]
+	ldrb	r2, [r3, #589]	@ zero_extendqisi2
+	mov	r10, r3
+	ldr	r9, [sp, #44]
+	cmp	r2, r4
+	ldr	r8, [sp, #48]
+	bhi	.L2706
+	ldr	r1, .L2713+4
+	mov	r2, #740
+	ldr	r0, .L2713+8
+	bl	printk
+	bl	dump_stack
+.L2706:
+	ldrb	r2, [r10, #589]	@ zero_extendqisi2
+	ldr	r3, .L2713
+	cmp	r2, r4
+	ldmlsfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	add	r4, r3, r4
+	ldrb	r10, [r4, #668]	@ zero_extendqisi2
+	ldr	r4, [r3, #528]
+	mov	r0, r10
+	bl	nandc_cs
+	cmp	fp, #0
+	mov	r3, r10, asl #8
+	addne	r2, r4, r3
+	add	r4, r4, r3
+	mov	r3, #128
+	strne	fp, [r2, #2056]
+	str	r6, [r4, #2056]
+	str	r3, [r4, #2056]
+	mov	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r5
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #16
+	add	r5, r5, r5, asl #1
+	str	r3, [r4, #2052]
+	sub	r0, r5, #1
+	add	r0, r0, r6
+	bl	nandc_set_seed
+	ldr	r3, .L2713+12
+	mov	r0, #1
+	mov	r2, r9
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	mov	r3, r8
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	r7, [r4, #2056]
+	mov	r0, r10
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	nandc_de_cs
+.L2714:
+	.align	2
+.L2713:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1704
+	.word	.LC0
+	.word	.LANCHOR2
+	.fnend
+	.size	flash_start_tlc_page_prog, .-flash_start_tlc_page_prog
+	.align	2
+	.type	queue_tlc_prog_cmd, %function
+queue_tlc_prog_cmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #16
+	mov	r7, #1
+	ldr	r8, .L2717
+	mov	r6, r0
+	ldr	r3, [r0]
+	ldrb	r4, [r8, #676]	@ zero_extendqisi2
+	ldr	r1, [r3, #24]
+	rsb	r2, r4, #24
+	mov	r4, r7, asl r4
+	mov	r5, r7, asl r2
+	sub	r4, r4, #1
+	sub	r5, r5, #1
+	ldrb	r0, [r3, #44]	@ zero_extendqisi2
+	and	r5, r5, r1
+	and	r4, r4, r1, lsr r2
+	str	r5, [sp]
+	mov	r1, r7
+	ldr	r2, [r3, #4]
+	uxtb	r4, r4
+	str	r2, [sp, #4]
+	mov	r2, #26
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldmia	r6, {r2, r3}
+	mov	r1, #2
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r5, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #26
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r6, #8]
+	ldr	r2, [r6]
+	mov	r1, #3
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r5, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #16
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	ldr	r1, [r6]
+	add	r0, r8, #2256
+	mov	r3, #4
+	add	r0, r0, #7
+	strb	r3, [r1, #42]
+	mvn	r3, #0
+	strb	r7, [r1, #43]
+	strb	r3, [r1]
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	b	buf_add_tail
+.L2718:
+	.align	2
+.L2717:
+	.word	.LANCHOR0
+	.fnend
+	.size	queue_tlc_prog_cmd, .-queue_tlc_prog_cmd
+	.align	2
+	.global	sblk_tlc_prog_one_page
+	.type	sblk_tlc_prog_one_page, %function
+sblk_tlc_prog_one_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r3, [r0]
+	ldr	r6, [r3, #24]
+.L2720:
+	mov	r0, r6
+	mov	r1, #1
+	bl	queue_lun_state
+	subs	r5, r0, #0
+	beq	.L2723
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2720
+.L2723:
+	mov	r0, r4
+	bl	queue_tlc_prog_cmd
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	sblk_tlc_prog_one_page, .-sblk_tlc_prog_one_page
+	.align	2
+	.global	sblk_xlc_prog_pages
+	.type	sblk_xlc_prog_pages, %function
+sblk_xlc_prog_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #16
+	mov	r5, r0
+	ldr	r3, [r0]
+	mov	r8, r1
+	mov	r9, r2
+	ldr	r4, [r3, #24]
+.L2725:
+	mov	r0, r4
+	mov	r1, #1
+	bl	queue_lun_state
+	cmp	r0, #0
+	beq	.L2730
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2725
+.L2730:
+	cmp	r9, #2
+	bne	.L2727
+	ldr	r2, .L2731
+	mov	r6, #1
+	ldr	r3, [r5]
+	ldr	ip, [r8]
+	ldrb	r4, [r2, #676]	@ zero_extendqisi2
+	ldr	r0, [r3, #24]
+	rsb	r1, r4, #24
+	ldr	r7, [ip, #24]
+	mov	r2, r6, asl r1
+	mov	r4, r6, asl r4
+	sub	r2, r2, #1
+	sub	r4, r4, #1
+	and	r10, r2, r0
+	and	r7, r7, r2
+	and	r4, r4, r0, lsr r1
+	ldrb	r0, [r3, #44]	@ zero_extendqisi2
+	str	r10, [sp]
+	mov	r1, r6
+	ldr	r2, [r3, #4]
+	uxtb	r4, r4
+	str	r2, [sp, #4]
+	mov	r2, #17
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r8]
+	ldr	r2, [r5]
+	mov	r1, r6
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r7, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #26
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldmia	r5, {r2, r3}
+	mov	r1, r9
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r10, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #17
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r8, #4]
+	ldr	r2, [r5]
+	mov	r1, r9
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r7, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #26
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r5, #8]
+	ldr	r2, [r5]
+	mov	r1, #3
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r10, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #17
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r8, #8]
+	ldr	r2, [r5]
+	mov	r1, #3
+	ldrb	r0, [r2, #44]	@ zero_extendqisi2
+	str	r7, [sp]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	mov	r2, #16
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	ldr	r1, [r5]
+	mov	r3, #5
+	ldr	r0, .L2731+4
+	strb	r3, [r1, #42]
+	mvn	r3, #0
+	strb	r6, [r1, #43]
+	strb	r3, [r1]
+	bl	buf_add_tail
+	b	.L2728
+.L2727:
+	mov	r0, r5
+	bl	queue_tlc_prog_cmd
+.L2728:
+	mov	r0, #0
+	add	sp, sp, #16
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2732:
+	.align	2
+.L2731:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2263
+	.fnend
+	.size	sblk_xlc_prog_pages, .-sblk_xlc_prog_pages
+	.align	2
+	.global	sblk_3d_tlc_dump_prog
+	.type	sblk_3d_tlc_dump_prog, %function
+sblk_3d_tlc_dump_prog:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2735
+	stmfd	sp!, {r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	mov	r7, #1
+	ldrb	r4, [r3, #676]	@ zero_extendqisi2
+	mov	r5, r0
+	ldr	r2, [r0, #24]
+	.pad #20
+	sub	sp, sp, #20
+	rsb	r3, r4, #24
+	mov	r4, r7, asl r4
+	mov	r6, r7, asl r3
+	sub	r4, r4, #1
+	sub	r6, r6, #1
+	and	r4, r4, r2, lsr r3
+	and	r6, r6, r2
+	mov	r3, r2
+	ldr	r0, .L2735+4
+	uxtb	r4, r4
+	mov	r1, r6
+	bl	printk
+	ldr	r3, [r5, #4]
+	mov	r1, r7
+	mov	r2, #26
+	mov	r0, #0
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #12]
+	str	r6, [sp]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r5, #4]
+	mov	r1, #2
+	mov	r2, #26
+	mov	r0, #0
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #12]
+	str	r6, [sp]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r5, #4]
+	mov	r1, #3
+	mov	r2, #16
+	mov	r0, #0
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #12]
+	str	r6, [sp]
+	str	r3, [sp, #8]
+	mov	r3, r4
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r0, [r5, #24]
+	mov	r1, #64
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, lr}
+	b	flash_wait_device_ready
+.L2736:
+	.align	2
+.L2735:
+	.word	.LANCHOR0
+	.word	.LC175
+	.fnend
+	.size	sblk_3d_tlc_dump_prog, .-sblk_3d_tlc_dump_prog
+	.align	2
+	.global	flash_start_3d_mlc_page_prog
+	.type	flash_start_3d_mlc_page_prog, %function
+flash_start_3d_mlc_page_prog:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r8, r3
+	ldr	r3, .L2741
+	mov	r5, r2
+	mov	r7, r0
+	mov	r4, r1
+	ldrb	r2, [r3, #589]	@ zero_extendqisi2
+	mov	r6, r3
+	cmp	r2, r1
+	bhi	.L2738
+	ldr	r1, .L2741+4
+	mov	r2, #772
+	ldr	r0, .L2741+8
+	bl	printk
+	bl	dump_stack
+.L2738:
+	ldrb	r2, [r6, #589]	@ zero_extendqisi2
+	ldr	r3, .L2741
+	cmp	r2, r4
+	ldmlsfd	sp!, {r4, r5, r6, r7, r8, pc}
+	add	r4, r3, r4
+	ldr	r6, [r3, #528]
+	ldrb	r4, [r4, #668]	@ zero_extendqisi2
+	mov	r0, r4
+	add	r4, r6, r4, asl #8
+	bl	nandc_cs
+	mov	r3, #128
+	mov	r0, r5
+	str	r3, [r4, #2056]
+	mov	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r5
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #8
+	str	r3, [r4, #2052]
+	mov	r3, r5, lsr #16
+	str	r3, [r4, #2052]
+	bl	nandc_set_seed
+	ldr	r3, .L2741+12
+	mov	r0, #1
+	mov	r2, r8
+	ldrb	r1, [r3, #13]	@ zero_extendqisi2
+	ldr	r3, [sp, #24]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	r7, [r4, #2056]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2742:
+	.align	2
+.L2741:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1732
+	.word	.LC0
+	.word	.LANCHOR2
+	.fnend
+	.size	flash_start_3d_mlc_page_prog, .-flash_start_3d_mlc_page_prog
+	.align	2
+	.global	sblk_3d_mlc_prog_pages
+	.type	sblk_3d_mlc_prog_pages, %function
+sblk_3d_mlc_prog_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	add	r5, r0, #8
+	ldr	r9, .L2751
+	mov	r7, r1
+	mov	r8, #1
+.L2744:
+	cmp	r7, #0
+	beq	.L2749
+	ldr	r3, [r5, #-8]
+	ldr	r4, [r3, #24]
+.L2745:
+	mov	r0, r4
+	mov	r1, #1
+	bl	queue_lun_state
+	cmp	r0, #0
+	beq	.L2750
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2745
+.L2750:
+	ldr	r3, [r5, #-8]
+	sub	r7, r7, #1
+	ldrb	r4, [r9, #676]	@ zero_extendqisi2
+	add	r5, r5, #8
+	ldr	r2, [r3, #24]
+	rsb	r3, r4, #24
+	mov	r4, r8, asl r4
+	mov	r6, r8, asl r3
+	sub	r4, r4, #1
+	sub	r6, r6, #1
+	and	r4, r4, r2, lsr r3
+	and	r6, r6, r2
+	uxtb	r4, r4
+	mov	r0, r4
+	bl	zftl_flash_exit_slc_mode
+	ldr	r3, [r5, #-16]
+	mov	r1, r4
+	mov	r0, #16
+	ldr	r2, [r3, #12]
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r3, [r3, #4]
+	bl	flash_start_3d_mlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r5, #-12]
+	mov	r1, r4
+	mov	r0, #16
+	ldr	r2, [r3, #12]
+	str	r2, [sp]
+	add	r2, r6, #1
+	ldr	r3, [r3, #4]
+	bl	flash_start_3d_mlc_page_prog
+	mov	r0, r4
+	bl	nandc_de_cs
+	ldr	r1, [r5, #-16]
+	mov	r3, #4
+	ldr	r0, .L2751+4
+	strb	r3, [r1, #42]
+	mvn	r3, #0
+	strb	r8, [r1, #43]
+	strb	r3, [r1]
+	bl	buf_add_tail
+	b	.L2744
+.L2749:
+	mov	r0, r7
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L2752:
+	.align	2
+.L2751:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2263
+	.fnend
+	.size	sblk_3d_mlc_prog_pages, .-sblk_3d_mlc_prog_pages
+	.align	2
+	.global	sblk_mlc_dump_prog
+	.type	sblk_mlc_dump_prog, %function
+sblk_mlc_dump_prog:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2755
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #8
+	mov	r4, #1
+	ldrb	r1, [r3, #676]	@ zero_extendqisi2
+	mov	r5, r0
+	ldr	r2, [r0, #24]
+	rsb	r3, r1, #24
+	mov	r6, r4, asl r3
+	mov	r4, r4, asl r1
+	sub	r4, r4, #1
+	sub	r6, r6, #1
+	and	r4, r4, r2, lsr r3
+	and	r6, r6, r2
+	uxtb	r4, r4
+	mov	r0, r4
+	bl	zftl_flash_exit_slc_mode
+	ldr	r2, [r5, #24]
+	mov	r1, r6
+	ldr	r0, .L2755+4
+	add	r3, r2, #1
+	bl	printk
+	ldr	r3, [r5, #12]
+	mov	r1, r4
+	mov	r2, r6
+	mov	r0, #16
+	str	r3, [sp]
+	ldr	r3, [r5, #4]
+	bl	flash_start_3d_mlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	r3, [r5, #12]
+	add	r2, r6, #1
+	mov	r1, r4
+	mov	r0, #16
+	str	r3, [sp]
+	ldr	r3, [r5, #4]
+	bl	flash_start_3d_mlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	r1, #64
+	ldr	r0, [r5, #24]
+	bl	flash_wait_device_ready
+	mov	r5, r0
+	mov	r0, r4
+	bl	nandc_de_cs
+	mov	r0, r5
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2756:
+	.align	2
+.L2755:
+	.word	.LANCHOR0
+	.word	.LC176
+	.fnend
+	.size	sblk_mlc_dump_prog, .-sblk_mlc_dump_prog
+	.align	2
+	.global	flash_prog_page_en
+	.type	flash_prog_page_en, %function
+flash_prog_page_en:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	mov	r8, r3
+	ldr	r6, .L2787
+	ldrb	r3, [sp, #68]	@ zero_extendqisi2
+	mov	r7, r0
+	mov	r5, r1
+	mov	r9, r2
+	ubfx	r4, r1, #24, #2
+	str	r3, [sp, #16]
+	ldrb	r3, [r6, #589]	@ zero_extendqisi2
+	cmp	r3, r0
+	bhi	.L2758
+	ldr	r1, .L2787+4
+	movw	r2, #554
+	ldr	r0, .L2787+8
+	bl	printk
+	bl	dump_stack
+.L2758:
+	ldrb	r2, [r6, #589]	@ zero_extendqisi2
+	ldr	r3, .L2787
+	cmp	r2, r7
+	mvnls	r0, #0
+	bls	.L2759
+	add	r2, r3, r7
+	cmp	r4, #0
+	ldrb	r10, [r2, #668]	@ zero_extendqisi2
+	bne	.L2771
+	ldrb	r2, [r3]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2761
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2771
+.L2761:
+	ldrh	fp, [r6, #2]
+	mov	r0, r5
+	mov	r1, fp
+	bl	__aeabi_uidiv
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L2787
+	mul	r0, fp, r0
+	rsb	r4, r0, r5
+	mov	r4, r4, asl #1
+	addeq	r4, r3, r4
+	ldreqh	r4, [r4, #4]
+	add	r4, r4, r0
+	b	.L2760
+.L2771:
+	mov	r4, r5
+.L2760:
+	ldr	fp, .L2787+12
+	ldr	r6, .L2787+16
+.L2766:
+	ldr	r3, [fp]
+	tst	r3, #16
+	beq	.L2763
+	ldr	r0, .L2787+20
+	mov	r1, r10
+	mov	r2, r5
+	mov	r3, r4
+	bl	printk
+.L2763:
+	ldr	r3, [sp, #64]
+	mov	r0, r10
+	mov	r1, r4
+	mov	r2, r9
+	str	r3, [sp]
+	mov	r3, r8
+	bl	flash_prog_page
+	ldr	r3, [sp, #16]
+	mov	ip, r0
+	cmp	r3, #0
+	beq	.L2764
+	ldr	r3, [sp, #64]
+	mov	r1, r5
+	str	r0, [sp, #20]
+	mov	r0, r7
+	str	r3, [sp]
+	ldr	r3, [r6, #-3244]
+	ldr	r2, [r6, #-3248]
+	bl	flash_read_page_en
+	sub	r3, r0, #512
+	cmp	r0, #512
+	cmnne	r0, #1
+	clz	r3, r3
+	mov	r3, r3, lsr #5
+	str	r3, [sp, #12]
+	beq	.L2765
+	ldr	r3, [r6, #-3248]
+	ldr	r2, [r9]
+	ldr	ip, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	bne	.L2765
+	ldr	r3, [r6, #-3244]
+	ldr	r2, [r8]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2764
+.L2765:
+	mov	r2, #4
+	ldr	r0, .L2787+24
+	mov	r3, r2
+	mov	r1, r9
+	bl	rknand_print_hex
+	mov	r2, #4
+	mov	r3, r2
+	ldr	r0, .L2787+28
+	mov	r1, r8
+	bl	rknand_print_hex
+	mov	r2, #4
+	mov	r3, r2
+	ldr	r0, .L2787+32
+	ldr	r1, [r6, #-3244]
+	bl	rknand_print_hex
+	mov	r2, #4
+	mov	r3, r2
+	ldr	r0, .L2787+36
+	ldr	r1, [r6, #-3248]
+	bl	rknand_print_hex
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	bne	.L2766
+.L2768:
+	mov	r1, r5
+	ldr	r0, .L2787+40
+	bl	printk
+	ldr	r1, .L2787+4
+	movw	r2, #587
+	ldr	r0, .L2787+8
+	bl	printk
+	bl	dump_stack
+	mvn	ip, #0
+	b	.L2767
+.L2764:
+	cmn	ip, #1
+	beq	.L2768
+.L2767:
+	mov	r0, ip
+.L2759:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2788:
+	.align	2
+.L2787:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+1764
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LANCHOR3
+	.word	.LC177
+	.word	.LC178
+	.word	.LC179
+	.word	.LC180
+	.word	.LC181
+	.word	.LC182
+	.fnend
+	.size	flash_prog_page_en, .-flash_prog_page_en
+	.align	2
+	.global	ftl_prog_page
+	.type	ftl_prog_page, %function
+ftl_prog_page:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r4, r3
+	mov	r7, r0
+	mov	r5, r1
+	mov	r6, r2
+	bl	sblk_wait_write_queue_completed
+	mov	r0, r7
+	mov	r1, r5
+	mov	r2, r6
+	ldr	r3, [sp, #32]
+	str	r3, [sp]
+	mov	r3, #1
+	str	r3, [sp, #4]
+	mov	r3, r4
+	bl	flash_prog_page_en
+	cmn	r0, #1
+	mov	r4, r0
+	bne	.L2790
+	ldr	r1, .L2792
+	movw	r2, #2324
+	ldr	r0, .L2792+4
+	bl	printk
+	bl	dump_stack
+	ldr	r0, .L2792+8
+	mov	r1, r5
+	bl	printk
+.L2790:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L2793:
+	.align	2
+.L2792:
+	.word	.LANCHOR1+1784
+	.word	.LC0
+	.word	.LC182
+	.fnend
+	.size	ftl_prog_page, .-ftl_prog_page
+	.align	2
+	.global	ftl_info_flush
+	.type	ftl_info_flush, %function
+ftl_info_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r1, #0
+	ldr	r5, .L2832
+	.pad #20
+	sub	sp, sp, #20
+	mov	fp, r0
+	ldr	r0, .L2832+4
+	ldr	r7, .L2832+8
+	mov	r10, #0
+	ldrb	r2, [r5, #2260]	@ zero_extendqisi2
+	mov	r6, r7
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r3, [r5, #2288]
+	ldrh	r2, [r3, #74]
+	cmp	r2, #0
+	movne	r2, #0
+	strneh	r2, [r3, #150]	@ movhi
+.L2806:
+	ldr	r3, .L2832+12
+	ldr	lr, [r5, #2288]
+	ldr	r8, .L2832+16
+	ldrh	r3, [r3]
+	ldrb	r4, [r7, #-2936]	@ zero_extendqisi2
+	ldrh	ip, [r8, #2]
+	str	r3, [sp, #8]
+	ldr	r3, [lr, #4]
+	ldr	r9, .L2832+12
+	add	r3, r3, #1
+	str	r3, [lr, #4]
+	str	r3, [r7, #-3188]
+	ldr	r3, .L2832+20
+	str	fp, [r7, #-3192]
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L2796
+	mov	r2, ip
+	ldr	r0, .L2832+24
+	mov	r1, r4
+	ldr	r3, [lr, #4]
+	str	ip, [sp, #12]
+	bl	printk
+	ldr	ip, [sp, #12]
+.L2796:
+	ldr	r3, .L2832+28
+	ldrh	r0, [r8, #2]
+	ldrh	r3, [r3]
+	cmp	r3, r0
+	bhi	.L2797
+.L2802:
+	ldrb	r3, [r6, #-2935]	@ zero_extendqisi2
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r6, #-2935]
+	cmp	r3, #7
+	bls	.L2798
+	mov	r3, #8
+.L2801:
+	ldr	r2, [r5, #664]
+	sub	r4, r3, #8
+	add	r2, r2, r3
+	uxth	r4, r4
+	ldrb	r1, [r2, #32]	@ zero_extendqisi2
+	add	r2, r1, #127
+	uxtb	r2, r2
+	cmp	r2, #125
+	bhi	.L2799
+	ldr	r1, .L2832+32
+	movw	r2, #751
+	ldr	r0, .L2832+36
+	bl	printk
+	bl	dump_stack
+	b	.L2800
+.L2799:
+	cmp	r1, #255
+	bne	.L2800
+	add	r3, r3, #1
+	cmp	r3, #16
+	bne	.L2801
+	mov	r4, #8
+.L2800:
+	mov	r10, #1
+	strb	r4, [r6, #-2935]
+.L2798:
+	ldr	r3, [r5, #664]
+	ldrb	r2, [r6, #-2935]	@ zero_extendqisi2
+	add	r3, r3, r2
+	ldrb	r3, [r3, #40]	@ zero_extendqisi2
+	cmp	r3, #255
+	strb	r3, [r6, #-2936]
+	beq	.L2802
+	ldrh	r4, [r9]
+	mov	r0, #0
+	mul	r4, r4, r3
+	mov	r1, r4
+	bl	flash_erase_block
+	ldr	r3, .L2832
+	ldr	r2, .L2832+40
+	mov	r1, r4
+	mov	r0, #0
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	str	r3, [sp]
+	sub	r3, r2, #320
+	bl	ftl_prog_page
+	ldr	r3, .L2832+16
+	mov	r2, #1
+	add	r4, r4, r2
+	strh	r2, [r3, #2]	@ movhi
+	b	.L2803
+.L2797:
+	ldr	r3, [sp, #8]
+	cmp	r0, #0
+	mla	r4, r3, r4, ip
+	bne	.L2803
+	mov	r1, r4
+	bl	flash_erase_block
+.L2803:
+	ldrb	r3, [r5, #2260]	@ zero_extendqisi2
+	mov	r0, #0
+	ldr	r2, .L2832+40
+	mov	r1, r4
+	str	r3, [sp]
+	sub	r3, r2, #320
+	bl	ftl_prog_page
+	ldrh	r3, [r8, #2]
+	add	r3, r3, #1
+	strh	r3, [r8, #2]	@ movhi
+	ldr	r3, .L2832+44
+	cmn	r0, #1
+	beq	.L2804
+	ldrb	r2, [r3, #-2856]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2805
+.L2804:
+	mov	r2, #0
+	strb	r2, [r3, #-2856]
+	b	.L2806
+.L2805:
+	cmp	r10, #1
+	beq	.L2807
+.L2815:
+	ldr	r3, .L2832+8
+	ldrb	r3, [r3, #-2936]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L2809
+	ldr	r1, .L2832+32
+	movw	r2, #787
+	ldr	r0, .L2832+36
+	bl	printk
+	bl	dump_stack
+	b	.L2809
+.L2807:
+	ldr	r3, .L2832+8
+	ldrb	r4, [r3, #-2935]	@ zero_extendqisi2
+	add	r4, r4, #1
+.L2810:
+	cmp	r4, #7
+	bhi	.L2815
+	ldr	r3, [r5, #664]
+	add	r3, r3, r4
+	ldrb	r6, [r3, #40]	@ zero_extendqisi2
+	add	r3, r6, #127
+	uxtb	r3, r3
+	cmp	r3, #125
+	bhi	.L2811
+	ldr	r1, .L2832+32
+	mov	r2, #780
+	ldr	r0, .L2832+36
+	bl	printk
+	bl	dump_stack
+	b	.L2812
+.L2811:
+	cmp	r6, #255
+	beq	.L2813
+.L2812:
+	ldrh	r1, [r9]
+	mov	r0, #0
+	mul	r1, r1, r6
+	bl	flash_erase_block
+.L2813:
+	add	r4, r4, #1
+	uxth	r4, r4
+	b	.L2810
+.L2809:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2833:
+	.align	2
+.L2832:
+	.word	.LANCHOR0
+	.word	.LANCHOR3-3192
+	.word	.LANCHOR3
+	.word	.LANCHOR0+2994
+	.word	.LANCHOR3-2936
+	.word	.LANCHOR2
+	.word	.LC183
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR1+1800
+	.word	.LC0
+	.word	.LANCHOR3-2872
+	.word	.LANCHOR4
+	.fnend
+	.size	ftl_info_flush, .-ftl_info_flush
+	.align	2
+	.global	ftl_info_blk_init
+	.type	ftl_info_blk_init, %function
+ftl_info_blk_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2866
+	mov	r2, #1
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r7, #0
+	ldr	r4, .L2866+4
+	mov	r1, r7
+	strb	r2, [r3, #-2856]
+	.pad #20
+	sub	sp, sp, #20
+	strb	r2, [r3, #-2854]
+	mov	r2, #16384
+	strb	r7, [r3, #-2855]
+	add	r3, r4, #564
+	ldr	r0, .L2866+8
+	mov	r6, #7
+	ldrh	r3, [r3]
+	mov	r9, r4
+	ldr	r5, .L2866+12
+	str	r0, [r4, #568]
+	add	r3, r0, r3, asl #2
+	str	r3, [r4, #2288]
+	bl	ftl_memset
+	ldr	r0, .L2866+16
+	mov	r1, r7
+	mov	r2, #16384
+	bl	ftl_memset
+	ldr	r3, [r4, #664]
+	ldr	r10, .L2866+20
+	ldr	fp, .L2866+24
+	ldrb	r3, [r3, #40]	@ zero_extendqisi2
+	strb	r7, [r5, #-2935]
+	strb	r3, [r5, #-2936]
+	ldr	r3, .L2866+28
+	strh	r7, [r3, #2]	@ movhi
+	str	r3, [sp, #8]
+.L2839:
+	ldr	r3, [r4, #664]
+	uxth	r7, r6
+	add	r3, r3, r6
+	ldrb	r3, [r3, #40]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L2835
+	ldrh	ip, [r10]
+	mov	r0, #0
+	ldr	r2, .L2866+8
+	mul	ip, ip, r3
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	str	r3, [sp]
+	sub	r3, r2, #320
+	mov	r1, ip
+	str	ip, [sp, #12]
+	bl	ftl_read_page
+	cmn	r0, #1
+	mov	r8, r0
+	ldr	ip, [sp, #12]
+	bne	.L2836
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	mov	r0, #0
+	ldr	r2, .L2866+8
+	add	r1, ip, #1
+	str	r3, [sp]
+	sub	r3, r2, #320
+	bl	ftl_read_page
+	mov	r8, r0
+.L2836:
+	ldr	r3, .L2866+32
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L2837
+	ldr	r3, [r4, #2288]
+	mov	r1, r6
+	ldr	r0, .L2866+36
+	mov	r2, r8
+	ldr	r3, [r3]
+	str	r3, [sp]
+	mov	r3, #672
+	bl	printk
+.L2837:
+	cmn	r8, #1
+	beq	.L2835
+	ldr	r3, [r4, #2288]
+	ldr	r3, [r3]
+	cmp	r3, fp
+	beq	.L2848
+.L2835:
+	subs	r6, r6, #1
+	bcs	.L2839
+	movw	r8, #65535
+	mov	r7, #0
+	b	.L2838
+.L2848:
+	mov	r8, r7
+.L2838:
+	ldr	r6, .L2866+32
+	sxth	r8, r8
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L2840
+	ldr	r3, [r4, #2288]
+	mov	r1, r8
+	ldr	r0, .L2866+40
+	mov	r2, #4800
+	ldr	r3, [r3]
+	bl	printk
+.L2840:
+	cmn	r8, #1
+	bne	.L2841
+	mov	r2, #16384
+	ldr	r0, .L2866+8
+	mov	r1, #0
+	bl	ftl_memset
+	ldr	r3, [r4, #2288]
+	ldr	r2, .L2866+24
+	mov	r0, r8
+	str	r2, [r3]
+	ldr	r2, .L2866+44
+	ldr	r3, [r4, #2288]
+	str	r2, [r3, #12]
+	b	.L2842
+.L2841:
+	ldr	r3, [r4, #664]
+	mov	r0, #0
+	ldr	r2, .L2866+8
+	sxtah	r3, r3, r7
+	strb	r7, [r5, #-2935]
+	ldr	r10, .L2866+4
+	ldrb	r1, [r3, #40]	@ zero_extendqisi2
+	mov	r3, #4
+	ldr	fp, .L2866+24
+	strb	r1, [r5, #-2936]
+	str	r3, [sp]
+	sub	r3, r2, #320
+	bl	flash_get_last_written_page
+	movw	r2, #2994
+	ldrb	r3, [r5, #-2936]	@ zero_extendqisi2
+	mov	r5, #0
+	ldrh	r7, [r4, r2]
+	mul	r7, r7, r3
+	uxth	r8, r0
+	mov	r9, r0
+	add	ip, r8, #1
+	uxth	ip, ip
+.L2843:
+	rsb	r3, r5, r8
+	tst	r3, #32768
+	bne	.L2847
+	ldrb	r3, [r4, #2260]	@ zero_extendqisi2
+	add	r1, r9, r7
+	ldr	r2, .L2866+8
+	mov	r0, #0
+	rsb	r1, r5, r1
+	str	ip, [sp, #12]
+	str	r3, [sp]
+	sub	r3, r2, #320
+	bl	ftl_read_page
+	cmn	r0, #1
+	ldr	ip, [sp, #12]
+	beq	.L2844
+	ldr	r3, [r10, #2288]
+	ldr	r3, [r3]
+	cmp	r3, fp
+	bne	.L2844
+.L2847:
+	ldr	r3, [sp, #8]
+	strh	ip, [r3, #2]	@ movhi
+	bl	ftl_tmp_into_update
+	ldr	r2, [r4, #2288]
+	mov	r0, #0
+	ldr	r3, [r2, #64]
+	add	r3, r3, #1
+	str	r3, [r2, #64]
+	bl	ftl_info_flush
+	mov	r0, #0
+	bl	ftl_info_flush
+	ldr	r0, [r6]
+	ands	r0, r0, #16384
+	beq	.L2842
+	ldr	r3, .L2866+4
+	ldr	r0, .L2866+48
+	ldr	r3, [r3, #2288]
+	ldr	r1, [r3, #156]
+	bl	printk
+	mov	r0, #0
+	b	.L2842
+.L2844:
+	add	r5, r5, #1
+	b	.L2843
+.L2842:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2867:
+	.align	2
+.L2866:
+	.word	.LANCHOR4
+	.word	.LANCHOR0
+	.word	.LANCHOR3-2872
+	.word	.LANCHOR3
+	.word	.LANCHOR4-2792
+	.word	.LANCHOR0+2994
+	.word	1229739078
+	.word	.LANCHOR3-2936
+	.word	.LANCHOR2
+	.word	.LC184
+	.word	.LC185
+	.word	393240
+	.word	.LC186
+	.fnend
+	.size	ftl_info_blk_init, .-ftl_info_blk_init
+	.align	2
+	.global	ftl_ext_info_flush
+	.type	ftl_ext_info_flush, %function
+ftl_ext_info_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	bl	timer_get_time
+	ldr	r3, .L2884
+	ldr	r4, .L2884+4
+	umull	r0, r1, r0, r3
+	ldr	r3, [r4, #580]
+	ldr	r0, [r3, #520]
+	mov	r1, r1, lsr #5
+	cmp	r1, r0
+	ldrhi	r2, [r3, #12]
+	rsbhi	r2, r0, r2
+	addhi	r2, r2, r1
+	strhi	r2, [r3, #12]
+	bhi	.L2883
+.L2869:
+	bcs	.L2870
+.L2883:
+	str	r1, [r3, #520]
+.L2870:
+	mov	r0, #0
+	ldr	r5, .L2884+8
+	bl	ftl_total_vpn_update
+	ldr	r7, .L2884+12
+	mov	r6, r5
+.L2874:
+	ldr	r3, [r4, #2288]
+	ldr	r2, [r3, #56]
+	add	r2, r2, #1
+	str	r2, [r3, #56]
+	ldrh	r2, [r3, #140]
+	ldrh	r3, [r7]
+	cmp	r2, r3
+	bcc	.L2872
+	bl	ftl_ext_alloc_new_blk
+.L2872:
+	ldr	r3, [r4, #2288]
+	ldrh	r2, [r3, #130]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2873
+	ldr	r1, .L2884+16
+	movw	r2, #1912
+	ldr	r0, .L2884+20
+	bl	printk
+	bl	dump_stack
+.L2873:
+	ldr	r1, [r4, #2288]
+	ldr	r8, .L2884+24
+	ldrb	r2, [r4, #676]	@ zero_extendqisi2
+	ldrh	r3, [r1, #130]
+	ldrh	r0, [r8]
+	rsb	r2, r2, #24
+	ldrh	r8, [r8, #66]
+	rsb	r2, r0, r2
+	mvn	r0, #0
+	mov	r9, r3, asr r2
+	bic	r3, r3, r0, asl r2
+	ldrh	r2, [r1, #140]
+	mov	r1, #0
+	sxth	r3, r3
+	ldr	r0, .L2884+28
+	ldr	r10, .L2884+32
+	mla	r8, r8, r3, r2
+	ldrb	r2, [r4, #2260]	@ zero_extendqisi2
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	mov	r3, #0
+	str	r3, [r10, #-3192]
+	uxtb	r0, r9
+	ldr	r3, [r4, #2288]
+	mov	r1, r8
+	ldr	r2, .L2884+36
+	ldr	r3, [r3, #56]
+	str	r3, [r10, #-3188]
+	ldrb	r3, [r4, #2260]	@ zero_extendqisi2
+	str	r3, [sp]
+	ldr	r3, .L2884+28
+	bl	ftl_prog_page
+	ldr	r2, [r4, #2288]
+	ldrh	r3, [r2, #140]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r2, #140]	@ movhi
+	cmp	r3, #1
+	beq	.L2874
+	cmn	r0, #1
+	beq	.L2875
+	ldrb	r0, [r5, #-2854]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L2876
+.L2875:
+.L2871:
+	mov	r3, #0
+	strb	r3, [r6, #-2854]
+	b	.L2874
+.L2876:
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L2885:
+	.align	2
+.L2884:
+	.word	1374389535
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR1+1816
+	.word	.LC0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR3-3192
+	.word	.LANCHOR3
+	.word	.LANCHOR4-2792
+	.fnend
+	.size	ftl_ext_info_flush, .-ftl_ext_info_flush
+	.align	2
+	.global	ftl_ext_info_init
+	.type	ftl_ext_info_init, %function
+ftl_ext_info_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r2, #0
+	ldr	r4, .L2905
+	mvn	r5, #0
+	.pad #20
+	sub	sp, sp, #20
+	add	r3, r4, #3520
+	add	r1, r4, #2928
+	strh	r2, [r3]	@ movhi
+	ldr	r3, [r4, #2288]
+	ldrh	r1, [r1]
+	ldrh	r2, [r3, #130]
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	rsb	r3, r3, #24
+	rsb	r3, r1, r3
+	mov	r6, r2, asr r3
+	bic	r5, r2, r5, asl r3
+	mov	r3, #4
+	ldr	r2, .L2905+4
+	uxtb	r9, r6
+	str	r3, [sp]
+	mov	r1, r5
+	ldr	r3, .L2905+8
+	mov	r0, r9
+	bl	flash_get_last_written_page
+	ldr	r3, .L2905+12
+	ldr	r2, [r3]
+	tst	r2, #4096
+	mov	r7, r0
+	str	r3, [sp, #8]
+	beq	.L2887
+	ldr	r3, [r4, #2288]
+	uxth	r6, r6
+	str	r6, [sp]
+	movw	r2, #1956
+	ldr	r0, .L2905+16
+	ldrh	r3, [r3, #130]
+	ldr	r1, .L2905+20
+	str	r3, [sp, #4]
+	mov	r3, r7
+	bl	printk
+.L2887:
+	ldr	r10, .L2905
+	mov	r8, #0
+	ldr	fp, .L2905+24
+	ldr	ip, .L2905+28
+.L2888:
+	uxth	r6, r7
+	rsb	r3, r8, r6
+	tst	r3, #32768
+	bne	.L2893
+	ldrh	r3, [fp]
+	rsb	r1, r8, r7
+	ldrb	r2, [r4, #2260]	@ zero_extendqisi2
+	mov	r0, r9
+	str	ip, [sp, #12]
+	mla	r1, r3, r5, r1
+	str	r2, [sp]
+	ldr	r3, .L2905+8
+	ldr	r2, .L2905+4
+	bl	flash_read_page_en
+	cmp	r0, #512
+	cmnne	r0, #1
+	ldr	ip, [sp, #12]
+	beq	.L2889
+	ldr	r3, [r10, #580]
+	ldr	r3, [r3]
+	cmp	r3, ip
+	bne	.L2889
+.L2893:
+	bl	zftl_sblk_list_init
+	ldr	r3, [r4, #2288]
+	ldrh	r2, [r3, #140]
+	cmp	r2, r7
+	bgt	.L2891
+	add	r6, r6, #1
+	strh	r6, [r3, #140]	@ movhi
+	bl	ftl_ext_info_flush
+	b	.L2891
+.L2889:
+	add	r8, r8, #1
+	b	.L2888
+.L2891:
+	ldr	r5, [r4, #580]
+	bl	timer_get_time
+	ldr	r3, .L2905+32
+	umull	r0, r1, r0, r3
+	mov	r3, r1, lsr #5
+	str	r3, [r5, #520]
+	ldr	r5, [r4, #580]
+	bl	timer_get_time
+	ldr	r3, [r4, #580]
+	mov	r2, #0
+	add	r1, r3, #584
+	str	r0, [r5, #604]
+	str	r2, [r3, #608]
+	mvn	r2, #0
+	strh	r2, [r1]	@ movhi
+	movw	r1, #586
+	strh	r2, [r3, r1]	@ movhi
+	add	r1, r3, #588
+	strh	r2, [r1]	@ movhi
+	movw	r1, #590
+	strh	r2, [r3, r1]	@ movhi
+	movw	r1, #65535
+	str	r2, [r3, #564]
+	ldr	r2, [sp, #8]
+	str	r1, [r3, #560]
+	ldr	r2, [r2]
+	tst	r2, #4096
+	beq	.L2894
+	ldr	r6, [r3, #520]
+	ldr	r5, [r3, #12]
+	bl	timer_get_time
+	ldr	r1, .L2905+20
+	mov	r2, r6
+	mov	r3, r5
+	str	r0, [sp]
+	ldr	r0, .L2905+36
+	bl	printk
+.L2894:
+	movw	r3, #2908
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r4, r3]	@ movhi
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2906:
+	.align	2
+.L2905:
+	.word	.LANCHOR0
+	.word	.LANCHOR4-2792
+	.word	.LANCHOR3-3192
+	.word	.LANCHOR2
+	.word	.LC187
+	.word	.LANCHOR1+1836
+	.word	.LANCHOR0+2994
+	.word	1162432070
+	.word	1374389535
+	.word	.LC188
+	.fnend
+	.size	ftl_ext_info_init, .-ftl_ext_info_init
+	.align	2
+	.global	ftl_prog_ppa_page
+	.type	ftl_prog_ppa_page, %function
+ftl_prog_ppa_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, lr}
+	.save {r4, lr}
+	.pad #8
+	mov	lr, r2
+	ldr	r2, .L2909
+	mov	ip, r0
+	mov	r4, r1
+	ldrb	r0, [r2, #676]	@ zero_extendqisi2
+	mov	r2, #1
+	str	r3, [sp]
+	mov	r3, lr
+	rsb	r1, r0, #24
+	mov	r0, r2, asl r0
+	sub	r0, r0, #1
+	and	r0, r0, ip, lsr r1
+	mov	r1, r2, asl r1
+	sub	r1, r1, #1
+	mov	r2, r4
+	and	r1, r1, ip
+	uxtb	r0, r0
+	bl	ftl_prog_page
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, pc}
+.L2910:
+	.align	2
+.L2909:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_prog_ppa_page, .-ftl_prog_ppa_page
+	.align	2
+	.global	ftl_write_last_log_page
+	.type	ftl_write_last_log_page, %function
+ftl_write_last_log_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldrh	r3, [r0, #6]
+	ldr	r5, .L2916
+	cmp	r3, #1
+	ldrh	r7, [r0, #12]
+	ldr	r6, [r5, #3512]
+	bne	.L2913
+	bl	ftl_get_new_free_page
+	cmn	r0, #1
+	mov	r8, r0
+	beq	.L2914
+	ldrh	r0, [r4]
+	add	r6, r6, r7, asl #2
+	bl	ftl_vpn_decrement
+	ldr	r7, .L2916+4
+	ldr	r3, .L2916+8
+	mov	r0, r6
+	mov	r4, #0
+	str	r3, [r7, #-2776]
+	add	r3, r5, #2960
+	ldrh	r1, [r3]
+	ldrb	r3, [r5, #2964]	@ zero_extendqisi2
+	mul	r1, r3, r1
+	mov	r1, r1, asl #2
+	bl	js_hash
+	mov	r1, r6
+	ldr	r2, .L2916+12
+	ldrb	r3, [r5, #2260]	@ zero_extendqisi2
+	str	r4, [r7, #-2768]
+	str	r4, [r7, #-2764]
+	str	r0, [r7, #-2772]
+	mov	r0, r8
+	bl	ftl_prog_ppa_page
+	b	.L2914
+.L2913:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2914:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2917:
+	.align	2
+.L2916:
+	.word	.LANCHOR0
+	.word	.LANCHOR5
+	.word	-178307901
+	.word	.LANCHOR5-2776
+	.fnend
+	.size	ftl_write_last_log_page, .-ftl_write_last_log_page
+	.align	2
+	.global	ftl_open_sblk_recovery
+	.type	ftl_open_sblk_recovery, %function
+ftl_open_sblk_recovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 224
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3049
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #236
+	sub	sp, sp, #236
+	ldr	r2, [r3]
+	mov	r4, r0
+	ldr	ip, .L3049+4
+	mov	r9, r1
+	str	r3, [sp, #24]
+	str	r2, [sp, #228]
+	ldr	r2, [ip]
+	mov	r5, ip
+	tst	r2, #4096
+	beq	.L2919
+	ldr	r0, .L3049+8
+	ldrh	r1, [r4, #2]
+	bl	printk
+.L2919:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L2920
+	ldr	r0, .L3049+12
+	ldrb	r1, [r4, #5]	@ zero_extendqisi2
+	bl	printk
+.L2920:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L2921
+	ldr	r0, .L3049+16
+	ldrh	r1, [r4]
+	bl	printk
+.L2921:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L2922
+	ldr	r0, .L3049+20
+	ldrh	r1, [r4, #16]
+	ldrh	r2, [r4, #18]
+	bl	printk
+.L2922:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L2923
+	ldr	r0, .L3049+24
+	ldrb	r1, [r4, #9]	@ zero_extendqisi2
+	bl	printk
+.L2923:
+	ldrh	r3, [r4, #10]
+	ldr	r6, .L3049+28
+	ldrh	r2, [r4]
+	strh	r3, [r4, #14]	@ movhi
+	ldrh	r3, [r6]
+	cmp	r2, r3
+	bcs	.L2918
+	mov	r0, #1
+	sub	r6, r6, #564
+	bl	buf_alloc
+	mov	r1, #255
+	mov	r2, #64
+	mov	r5, r0
+	add	r0, sp, #36
+	bl	ftl_memset
+	mov	r1, #255
+	mov	r2, #64
+	add	r0, sp, #100
+	bl	ftl_memset
+	mov	r1, #255
+	mov	r2, #64
+	add	r0, sp, #164
+	bl	ftl_memset
+	ldrb	r7, [r4, #5]	@ zero_extendqisi2
+	ldrh	r8, [r4, #2]
+	mov	r3, #2
+	str	r3, [sp, #12]
+	mov	r3, #0
+	str	r3, [sp, #16]
+.L2925:
+	ldr	r3, .L3049+32
+	ldrh	r2, [r3]
+	cmp	r2, r8
+	bls	.L2928
+	ldrb	r7, [r4, #5]	@ zero_extendqisi2
+	add	r3, r3, #34
+	str	r3, [sp, #28]
+.L2926:
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	cmp	r3, r7
+	bls	.L3045
+	add	r3, r4, r7, asl #1
+	movw	r2, #65535
+	ldrh	r3, [r3, #16]
+	cmp	r3, r2
+	beq	.L2927
+	ldr	r2, [sp, #28]
+	ldr	r1, [r5, #4]
+	ldrh	r2, [r2]
+	mla	r3, r2, r3, r8
+	ldr	r2, [r5, #12]
+	str	r3, [sp, #20]
+	mov	r0, r3
+	ldrb	r3, [r6, #2260]	@ zero_extendqisi2
+	bl	ftl_read_ppa_page
+	cmp	r0, #512
+	mov	r10, r0
+	beq	.L2928
+	cmn	r0, #1
+	beq	.L2929
+	ldr	r3, [r5, #12]
+	ldr	r2, [r3]
+	cmn	r2, #1
+	bne	.L2929
+	ldr	r3, [r3, #4]
+	cmn	r3, #1
+	bne	.L2929
+	ldr	r3, [r5, #4]
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L2928
+.L2929:
+	ldr	r3, .L3049+36
+	mov	r2, #1
+	strb	r2, [r3, #-2855]
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	ldrh	r2, [r4, #10]
+	mla	r3, r3, r8, r7
+	cmp	r2, r3
+	beq	.L2930
+	ldr	r1, .L3049+40
+	mov	r2, #1488
+	ldr	r0, .L3049+44
+	bl	printk
+	bl	dump_stack
+.L2930:
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #6]
+	add	r2, r2, r3
+	ldr	r3, .L3049+32
+	ldrh	r1, [r3]
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	mul	r3, r3, r1
+	cmp	r2, r3
+	beq	.L2931
+	ldr	r1, .L3049+40
+	movw	r2, #1489
+	ldr	r0, .L3049+44
+	bl	printk
+	bl	dump_stack
+.L2931:
+	cmn	r10, #1
+	beq	.L2935
+	ldr	r3, [r5, #12]
+	ldr	r0, [r3, #4]
+	cmn	r0, #1
+	beq	.L2935
+	bl	lpa_hash_get_ppa
+	cmp	r9, #0
+	mov	r3, r0
+	beq	.L2933
+	ldr	r2, [r5, #12]
+	ldr	r1, [r2, #8]
+	str	r2, [sp, #16]
+	cmp	r0, r1
+	cmnne	r0, #1
+	beq	.L2933
+	ldr	fp, .L3049+48
+	mov	r10, #1
+	str	r3, [sp, #12]
+	sub	r2, fp, #2928
+	ldrb	r1, [fp, #-2252]	@ zero_extendqisi2
+	ldrh	r0, [fp]
+	rsb	r1, r1, #24
+	rsb	r1, r0, r1
+	mov	r1, r10, asl r1
+	sub	r1, r1, #1
+	and	r0, r1, r3, lsr r0
+	ldrb	r1, [r2, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldrh	r1, [r9]
+	uxth	r0, r0
+	ldr	r3, [sp, #12]
+	cmp	r1, r0
+	ldr	r2, [sp, #16]
+	bne	.L2933
+	ldr	ip, [r2]
+	mov	r0, r3
+	ldr	r1, [r5, #4]
+	ldrb	r3, [r6, #2260]	@ zero_extendqisi2
+	ldr	r2, .L3049+52
+	str	ip, [sp, #12]
+	bl	ftl_read_ppa_page
+	ldr	r3, .L3049+56
+	ldr	r3, [r3, #-3192]
+	ldr	ip, [sp, #12]
+	cmp	r3, ip
+	bcc	.L2933
+	ldr	r3, [r5, #12]
+	ldr	r0, [r3, #8]
+	cmn	r0, #1
+	beq	.L2935
+	ldrb	r3, [r6, #676]	@ zero_extendqisi2
+	ldrh	r2, [fp]
+	rsb	r3, r3, #24
+	ldrb	r1, [r6, #2930]	@ zero_extendqisi2
+	rsb	r3, r2, r3
+	mov	r10, r10, asl r3
+	sub	r10, r10, #1
+	and	r0, r10, r0, lsr r2
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	bl	ftl_vpn_decrement
+	b	.L2935
+.L2933:
+	ldr	r2, [r5, #12]
+	ldr	r3, [r6, #2268]
+	ldr	r1, [r2, #4]
+	cmp	r1, r3
+	bcs	.L2935
+	ldr	r3, .L3049+32
+	ldrb	r0, [r4, #9]	@ zero_extendqisi2
+	ldrh	r1, [r4, #10]
+	ldrh	r3, [r3]
+	mul	r3, r3, r0
+	sub	r3, r3, #1
+	cmp	r1, r3
+	bge	.L2935
+	ldr	r3, [r6, #2288]
+	ldr	r2, [r2]
+	ldr	r1, [r3, #8]
+	cmp	r2, r1
+	strhi	r2, [r3, #8]
+	ldrh	r3, [r4, #12]
+	ldrh	r2, [r4, #10]
+	ldr	r1, [r5, #12]
+	add	r2, r3, r2
+	ldmib	r1, {r0, r1}
+	uxth	r2, r2
+	bl	lpa_hash_update_ppa
+	ldr	r3, [sp, #40]
+	str	r3, [sp, #36]
+	ldr	r3, [sp, #44]
+	str	r3, [sp, #40]
+	ldr	r3, [sp, #48]
+	str	r3, [sp, #44]
+	ldr	r3, [sp, #20]
+	str	r3, [sp, #48]
+.L2935:
+	ldrh	r3, [r4, #6]
+	sub	r3, r3, #1
+	strh	r3, [r4, #6]	@ movhi
+	ldrh	r3, [r4, #10]
+	add	r3, r3, #1
+	strh	r3, [r4, #10]	@ movhi
+	mov	r3, #4
+	str	r3, [sp, #12]
+	mov	r3, #1
+	str	r3, [sp, #16]
+.L2927:
+	add	r7, r7, #1
+	uxth	r7, r7
+	b	.L2926
+.L3045:
+	add	r8, r8, #1
+	mov	r3, #0
+	strb	r3, [r4, #5]
+	uxth	r8, r8
+	b	.L2925
+.L2928:
+	ldrh	r3, [r4, #6]
+	ldrh	r9, [r4, #10]
+	strh	r8, [r4, #2]	@ movhi
+	add	r9, r3, r9
+	ldr	r3, .L3049+32
+	ldrb	ip, [r4, #9]	@ zero_extendqisi2
+	strb	r7, [r4, #5]
+	ldrh	r8, [r3]
+	str	r3, [sp, #20]
+	mul	ip, r8, ip
+	cmp	r9, ip
+	beq	.L2939
+	ldr	r1, .L3049+40
+	movw	r2, #1569
+	ldr	r0, .L3049+44
+	bl	printk
+	bl	dump_stack
+.L2939:
+	ldr	r7, .L3049+60
+	mov	r6, #0
+	ldrh	r1, [r4, #10]
+	mov	r3, r6
+	ldr	r0, [r7, #3512]
+.L2940:
+	cmp	r3, r1
+	bcs	.L3046
+	ldrh	r2, [r4, #12]
+	add	r2, r3, r2
+	add	r3, r3, #1
+	ldr	r2, [r0, r2, asl #2]
+	cmn	r2, #1
+	addne	r6, r6, #1
+	uxthne	r6, r6
+	b	.L2940
+.L3046:
+	ldr	r3, [sp, #20]
+	ldrb	r2, [r4, #9]	@ zero_extendqisi2
+	ldr	r8, .L3049+4
+	ldrh	r3, [r3]
+	smulbb	r3, r2, r3
+	rsb	r3, r1, r3
+	add	r6, r6, r3
+	ldr	r3, [r8]
+	tst	r3, #4096
+	uxth	r6, r6
+	beq	.L2943
+	ldr	r3, .L3049+60
+	mov	r2, r6
+	ldrh	r1, [r4]
+	ldr	r0, .L3049+64
+	ldr	ip, [r3, #576]
+	mov	r3, r1, asl #1
+	ldrh	r3, [ip, r3]
+	bl	printk
+.L2943:
+	ldrh	r3, [r4]
+	ldr	r2, [r7, #576]
+	mov	r3, r3, asl #1
+	strh	r6, [r2, r3]	@ movhi
+	ldr	r3, [r8]
+	tst	r3, #16384
+	beq	.L2944
+	ldr	r3, [sp, #48]
+	add	r1, sp, #36
+	ldr	r0, .L3049+68
+	str	r3, [sp]
+	ldmia	r1, {r1, r2, r3}
+	bl	printk
+.L2944:
+	ldrb	r2, [r7, #2260]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r0, [r5, #4]
+	mov	r8, #0
+	ldr	fp, .L3049+4
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L2945:
+	ldrb	r3, [r7, #2964]	@ zero_extendqisi2
+	ldr	r2, [sp, #12]
+	mul	r3, r3, r2
+	cmp	r8, r3
+	bcs	.L3047
+	add	r10, sp, #36
+	ldr	r0, [r10, r8, asl #2]
+	cmn	r0, #1
+	bne	.L2946
+.L2950:
+	ldr	r2, [r7, #2288]
+	mvn	r6, #0
+	ldr	r3, [r5, #12]
+	ldr	r2, [r2, #8]
+	str	r2, [r3]
+	ldr	r3, [r5, #12]
+	str	r6, [r3, #4]
+	ldr	r3, [r5, #12]
+	str	r6, [r3, #8]
+	mov	r3, #0
+	ldr	r2, [r5, #12]
+	str	r3, [r2, #12]
+	ldr	r2, [r5, #4]
+	str	r3, [r2]
+	b	.L2947
+.L2946:
+	ldr	r3, .L3049+60
+	ldr	r1, [r5, #4]
+	ldr	r2, [r5, #12]
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	bl	ftl_read_ppa_page
+	ldr	r3, [r5, #12]
+	mov	r6, r0
+	ldr	r0, [r3, #4]
+	bl	lpa_hash_get_ppa
+	ldr	r3, [fp]
+	tst	r3, #16384
+	mov	r9, r0
+	beq	.L2948
+	ldr	r3, [r5, #12]
+	mov	r1, r9
+	ldr	r0, .L3049+72
+	ldr	r2, [r10, r8, asl #2]
+	ldr	r3, [r3, #4]
+	bl	printk
+.L2948:
+	ldr	r3, [r10, r8, asl #2]
+	mov	r2, #1
+	cmp	r9, r3
+	ldr	r3, [r5, #12]
+	mvnne	r6, #0
+	cmn	r6, #1
+	str	r9, [r3, #8]
+	ldr	r3, [r5, #12]
+	str	r2, [r3, #12]
+	beq	.L2950
+.L2947:
+	ldr	r3, [sp, #16]
+	cmp	r3, #1
+	bne	.L2952
+	ldrh	r3, [r4, #6]
+	cmp	r3, #1
+	bls	.L2952
+.L3018:
+	mov	r0, r4
+	bl	ftl_get_new_free_page
+	ldr	r3, [fp]
+	tst	r3, #16384
+	mov	r9, r0
+	beq	.L2954
+	ldrh	r1, [r4, #12]
+	ldr	r2, [r5, #12]
+	ldrh	r3, [r4, #10]
+	ldr	r0, .L3049+76
+	add	r3, r3, r1
+	ldr	r2, [r2, #4]
+	mov	r1, r9
+	sub	r3, r3, #1
+	bl	printk
+.L2954:
+	ldrb	r3, [r7, #2964]	@ zero_extendqisi2
+	ldr	r1, [sp, #12]
+	ldrh	r2, [r4, #6]
+	mul	r3, r3, r1
+	add	r3, r3, #1
+	rsb	r3, r8, r3
+	cmp	r2, r3
+	bls	.L2952
+	ldr	r3, .L3049+60
+	mov	r0, r9
+	ldr	r2, [r5, #12]
+	ldr	r1, [r5, #4]
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	bl	ftl_prog_ppa_page
+	str	r0, [sp, #28]
+	ldrh	r0, [r4]
+	bl	ftl_vpn_decrement
+	adds	r3, r6, #1
+	movne	r3, #1
+	ldr	r2, [sp, #28]
+	cmn	r2, #1
+	cmnne	r6, #1
+	beq	.L2955
+	add	r3, sp, #100
+	ldrh	r2, [r4, #12]
+	str	r9, [r3, r8, asl #2]
+	ldrh	r3, [r4, #10]
+	add	r3, r3, r2
+	add	r2, sp, #164
+	sub	r3, r3, #1
+	str	r3, [r2, r8, asl #2]
+	b	.L2952
+.L2955:
+	ldrh	r2, [r4, #6]
+	cmp	r2, #1
+	movls	r3, #0
+	andhi	r3, r3, #1
+	cmp	r3, #0
+	bne	.L3018
+.L2952:
+	add	r8, r8, #1
+	b	.L2945
+.L3047:
+	ldr	r10, .L3049+4
+	mov	r6, #0
+	ldr	r9, .L3049+60
+	mov	fp, r10
+.L2958:
+	ldrb	r3, [r7, #2964]	@ zero_extendqisi2
+	ldr	r2, [sp, #12]
+	mul	r3, r3, r2
+	cmp	r6, r3
+	bcs	.L3048
+	add	ip, sp, #100
+	str	ip, [sp, #16]
+	ldr	r3, [ip, r6, asl #2]
+	cmn	r3, #1
+	beq	.L2960
+	add	r8, sp, #36
+	ldr	r1, [r5, #4]
+	ldr	r2, [r5, #12]
+	ldr	r0, [r8, r6, asl #2]
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	bl	ftl_read_ppa_page
+	cmn	r0, #1
+	cmpne	r0, #256
+	ldr	ip, [sp, #16]
+	bne	.L2960
+	ldr	r0, [ip, r6, asl #2]
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	ldr	r1, [r5, #4]
+	ldr	r2, [r5, #12]
+	bl	ftl_read_ppa_page
+	ldr	r3, [r10]
+	tst	r3, #16384
+	mov	ip, r0
+	beq	.L2962
+	ldr	r3, [r5, #12]
+	mov	r1, ip
+	ldr	r0, .L3049+76
+	str	ip, [sp, #16]
+	ldr	r2, [r3, #8]
+	ldr	r3, [r8, r6, asl #2]
+	bl	printk
+	ldr	ip, [sp, #16]
+.L2962:
+	cmn	ip, #1
+	beq	.L2960
+	ldr	r3, [r5, #12]
+	ldr	r2, [r8, r6, asl #2]
+	ldr	r1, [r3, #8]
+	cmp	r2, r1
+	bne	.L2960
+	ldr	r1, [fp]
+	add	r8, sp, #164
+	tst	r1, #16384
+	beq	.L2963
+	ldr	r1, [r3, #4]
+	ldr	r0, .L3049+80
+	ldr	r3, [r8, r6, asl #2]
+	bl	printk
+.L2963:
+	ldr	r3, [r5, #12]
+	ldr	r2, [r8, r6, asl #2]
+	ldmib	r3, {r0, r1}
+	uxth	r2, r2
+	bl	lpa_hash_update_ppa
+.L2960:
+	add	r6, r6, #1
+	b	.L2958
+.L3048:
+	mov	r0, r5
+	bl	zbuf_free
+	ldrh	r3, [r4, #12]
+	ldrb	r1, [r4, #9]	@ zero_extendqisi2
+	ldr	r2, [sp, #20]
+	ldrh	r2, [r2]
+	mla	r3, r1, r2, r3
+	ldr	r2, .L3049+60
+	ldr	r2, [r2, #3512]
+	sub	r3, r3, #-1073741823
+	ldr	r3, [r2, r3, asl #2]
+	cmn	r3, #1
+	beq	.L2965
+	ldr	r1, .L3049+40
+	movw	r2, #1660
+	ldr	r0, .L3049+44
+	bl	printk
+	bl	dump_stack
+.L2965:
+	ldrh	r3, [r4, #6]
+	cmp	r3, #1
+	bne	.L2918
+	mov	r0, r4
+	bl	ftl_write_last_log_page
+.L2918:
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #228]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2969
+	bl	__stack_chk_fail
+.L2969:
+	add	sp, sp, #236
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3050:
+	.align	2
+.L3049:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LC189
+	.word	.LC190
+	.word	.LC191
+	.word	.LC192
+	.word	.LC193
+	.word	.LANCHOR0+564
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR4
+	.word	.LANCHOR1+1856
+	.word	.LC0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR3-3192
+	.word	.LANCHOR3
+	.word	.LANCHOR0
+	.word	.LC194
+	.word	.LC195
+	.word	.LC196
+	.word	.LC197
+	.word	.LC198
+	.fnend
+	.size	ftl_open_sblk_recovery, .-ftl_open_sblk_recovery
+	.align	2
+	.global	pm_write_page
+	.type	pm_write_page, %function
+pm_write_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	r6, .L3065
+	mov	r7, r1
+	mov	r5, r6
+.L3052:
+	ldr	r3, [r6, #2288]
+	ldr	r2, [r3, #48]
+	add	r2, r2, #1
+	str	r2, [r3, #48]
+	add	r2, r3, #696
+	ldrh	r1, [r2]
+	ldr	r2, .L3065+4
+	ldrh	r2, [r2]
+	cmp	r1, r2
+	bcs	.L3053
+	add	r3, r3, #692
+	ldrh	r2, [r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3054
+.L3053:
+	bl	pm_alloc_new_blk
+	mov	r0, #0
+	bl	ftl_info_flush
+.L3054:
+	ldr	r3, [r5, #2288]
+	add	r3, r3, #692
+	ldrh	r2, [r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3055
+	ldr	r1, .L3065+8
+	movw	r2, #263
+	ldr	r0, .L3065+12
+	bl	printk
+	bl	dump_stack
+.L3055:
+	ldr	r3, [r5, #2288]
+	ldr	r9, .L3065+16
+	add	r2, r3, #692
+	add	r3, r3, #696
+	ldrh	r1, [r2]
+	ldr	r2, .L3065+20
+	ldr	r0, [r9, #-2520]
+	ldrh	r8, [r2]
+	ldrh	r2, [r3]
+	mla	r8, r8, r1, r2
+	mov	r1, #0
+	mov	r2, #64
+	bl	ftl_memset
+	ldr	r3, [r9, #-2520]
+	str	r4, [r3]
+	ldr	r2, [r5, #2288]
+	ldr	r3, [r9, #-2520]
+	ldr	r1, [r2, #48]
+	str	r1, [r3, #4]
+	mov	r1, r8
+	ldrb	r0, [r2, #694]	@ zero_extendqisi2
+	ldrb	r2, [r5, #2260]	@ zero_extendqisi2
+	str	r2, [sp]
+	mov	r2, r7
+	bl	ftl_prog_page
+	ldr	r2, [r5, #2288]
+	add	r1, r2, #696
+	ldrh	r3, [r1]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r1]	@ movhi
+	cmp	r3, #1
+	beq	.L3056
+	ldrb	r3, [r9, #-2516]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3057
+.L3056:
+	mov	r3, #0
+	strb	r3, [r9, #-2516]
+	b	.L3052
+.L3057:
+	cmn	r0, #1
+	bne	.L3059
+	mov	r1, r8
+	ldr	r0, .L3065+24
+	bl	printk
+	b	.L3052
+.L3059:
+	movw	r3, #698
+	mov	r0, #0
+	ldrh	r3, [r2, r3]
+	cmp	r4, r3
+	addcc	r4, r4, #176
+	strcc	r8, [r2, r4, asl #2]
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L3066:
+	.align	2
+.L3065:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR1+1880
+	.word	.LC0
+	.word	.LANCHOR5
+	.word	.LANCHOR0+2994
+	.word	.LC199
+	.fnend
+	.size	pm_write_page, .-pm_write_page
+	.align	2
+	.global	ftl_dump_write_open_sblk
+	.type	ftl_dump_write_open_sblk, %function
+ftl_dump_write_open_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3101
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #108
+	sub	sp, sp, #108
+	ldr	r3, [r3]
+	mov	fp, r0
+	ldr	r4, .L3101+4
+	str	r3, [sp, #100]
+	add	r3, r4, #564
+	ldrh	r3, [r3]
+	cmp	r3, r0
+	bls	.L3067
+	ldrb	r3, [r4, #2944]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3069
+	ldrb	r3, [r4, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3067
+.L3069:
+	ldr	r3, [r4, #568]
+	mov	r6, fp, asl #2
+	add	r1, sp, #84
+	mov	r0, fp
+	add	r3, r3, r6
+	strh	fp, [sp, #68]	@ movhi
+	ldr	r7, .L3101+8
+	mov	r5, #0
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	mov	r8, r5
+	and	r3, r3, #224
+	cmp	r3, #160
+	ldreq	r3, .L3101+4
+	movne	r9, #1
+	ldreqb	r9, [r3, #2937]	@ zero_extendqisi2
+	bl	ftl_get_blk_list_in_sblk
+	ldrh	r10, [r7]
+	ldr	r2, [r4, #568]
+	add	r3, r2, r6
+	uxtb	r0, r0
+	strh	r5, [sp, #70]	@ movhi
+	strb	r0, [sp, #77]
+	smulbb	r10, r10, r0
+	strb	r5, [sp, #73]
+	strh	r5, [sp, #78]	@ movhi
+	ldr	r0, .L3101+12
+	strh	r10, [sp, #74]	@ movhi
+	ldrh	r1, [r2, r6]
+	mov	r6, r5
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	ubfx	r1, r1, #0, #11
+	str	r1, [sp]
+	ldr	r2, [r2, fp, asl #2]
+	mov	r1, fp
+	ubfx	r2, r2, #11, #8
+	str	r2, [sp, #4]
+	mov	r2, r3, lsr #5
+	ubfx	r3, r3, #3, #2
+	bl	printk
+	mov	r0, #1
+	bl	buf_alloc
+	mov	ip, r7
+	mov	r4, r0
+.L3071:
+	ldrh	r3, [ip]
+	uxth	r7, r5
+	cmp	r3, r7
+	bls	.L3093
+	mov	r3, r7, asl #1
+	mov	r10, #0
+	sub	r3, r3, #1
+	str	r3, [sp, #44]
+.L3081:
+	ldrb	r3, [sp, #77]	@ zero_extendqisi2
+	uxth	r8, r10
+	cmp	r3, r8
+	bls	.L3098
+	add	r3, r8, #8
+	mov	r6, #1
+	mov	r3, r3, asl r6
+	str	r3, [sp, #48]
+.L3080:
+	cmp	r6, r9
+	bhi	.L3099
+	ldr	r2, [sp, #48]
+	add	r3, sp, #104
+	add	r3, r3, r2
+	ldrh	r2, [r3, #-36]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L3073
+	ldr	r3, .L3101+16
+	cmp	r9, #3
+	ldrh	r3, [r3]
+	mul	r3, r3, r2
+	uxtaheq	r3, r3, r5
+	orreq	r3, r3, r6, asl #24
+	beq	.L3075
+	cmp	r9, #2
+	uxtahne	r3, r3, r5
+	ldreq	r1, [sp, #44]
+	addeq	r3, r3, r1
+	ldreq	r1, .L3101+4
+	addeq	r3, r3, r6
+	ldreqb	r1, [r1, #2937]	@ zero_extendqisi2
+	orreq	r3, r3, r1, asl #24
+.L3075:
+	str	r3, [r4, #24]
+	mov	r1, #1
+	mov	r0, r4
+	str	ip, [sp, #60]
+	str	r2, [sp, #56]
+	str	r3, [sp, #52]
+	bl	sblk_read_page
+	ldr	r0, [r4, #4]
+	ldr	r3, [r4, #36]
+	ldr	r1, [r4, #12]
+	str	r3, [sp]
+	ldr	lr, [r0]
+	ldr	r2, [sp, #56]
+	str	r3, [sp, #40]
+	str	lr, [sp, #4]
+	ldr	lr, [r0, #4]
+	ldr	r3, [sp, #52]
+	str	lr, [sp, #8]
+	ldr	lr, [r0, #8]
+	str	lr, [sp, #12]
+	ldr	r0, [r0, #12]
+	str	r0, [sp, #16]
+	ldr	r0, [r1]
+	str	r0, [sp, #20]
+	ldr	r0, [r1, #4]
+	str	r0, [sp, #24]
+	ldr	r0, [r1, #8]
+	str	r0, [sp, #28]
+	ldr	r1, [r1, #12]
+	ldr	r0, .L3101+20
+	str	r1, [sp, #32]
+	mov	r1, r2
+	mov	r2, r7
+	bl	printk
+	ldr	r3, [sp, #40]
+	ldr	ip, [sp, #60]
+	cmp	r3, #512
+	beq	.L3093
+.L3073:
+	add	r6, r6, #1
+	uxth	r6, r6
+	b	.L3080
+.L3099:
+	add	r10, r10, #1
+	b	.L3081
+.L3098:
+	add	r5, r5, #1
+	b	.L3071
+.L3093:
+.L3077:
+	str	r6, [sp]
+	mov	r3, r8
+	ldr	r6, .L3101+4
+	mov	r1, fp
+	mov	r2, r7
+	ldr	r0, .L3101+24
+	bl	printk
+	mov	r1, #0
+	ldrb	r2, [r6, #2260]	@ zero_extendqisi2
+	mov	r5, r7
+	ldr	r0, [r4, #4]
+	mov	r9, r6
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+	ldrb	r2, [r6, #2260]	@ zero_extendqisi2
+	ldr	r0, [r4, #12]
+	mov	r1, #0
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+.L3082:
+	ldr	r3, .L3101+8
+	ldrh	r3, [r3]
+	cmp	r3, r5
+	bls	.L3087
+	ldr	r7, .L3101+16
+	mov	r10, r5, asl #1
+	mov	r8, #0
+.L3088:
+	ldrb	r2, [sp, #77]	@ zero_extendqisi2
+	uxth	r3, r8
+	cmp	r2, r3
+	bls	.L3100
+	mov	r2, r3
+	ldr	r0, .L3101+28
+	mov	r1, r5
+	str	r3, [sp, #40]
+	bl	printk
+	ldrb	ip, [r6, #2944]	@ zero_extendqisi2
+	cmp	ip, #0
+	ldr	r3, [sp, #40]
+	add	r3, r3, #8
+	beq	.L3083
+	add	r2, sp, #104
+	mov	r0, r4
+	add	r3, r2, r3, asl #1
+	ldrh	r2, [r3, #-36]
+	ldrh	r3, [r7]
+	mul	r3, r3, r2
+	orr	r3, r3, r5
+	str	r3, [r4, #24]
+	bl	sblk_3d_tlc_dump_prog
+	b	.L3084
+.L3083:
+	ldrb	r2, [r9, #2937]	@ zero_extendqisi2
+	cmp	r2, #2
+	add	r2, sp, #104
+	add	r3, r2, r3, asl #1
+	ldrh	r2, [r3, #-36]
+	ldrh	r3, [r7]
+	mul	r3, r3, r2
+	bne	.L3085
+	orr	r3, r3, r10
+	mov	r0, r4
+	orr	r3, r3, #33554432
+	str	r3, [r4, #24]
+	bl	sblk_mlc_dump_prog
+	b	.L3084
+.L3085:
+	ldrb	r2, [r9, #676]	@ zero_extendqisi2
+	orr	r3, r3, r5
+	mvn	r0, #0
+	ldrb	lr, [r9, #2260]	@ zero_extendqisi2
+	rsb	r1, r2, #24
+	str	r3, [r4, #24]
+	mvn	r2, r0, asl r2
+	and	r0, r2, r3, lsr r1
+	str	lr, [sp]
+	bic	r1, r3, r2, asl r1
+	str	ip, [sp, #4]
+	uxtb	r0, r0
+	ldr	r2, [r4, #4]
+	ldr	r3, [r4, #12]
+	bl	flash_prog_page_en
+.L3084:
+	add	r8, r8, #1
+	b	.L3088
+.L3100:
+	add	r5, r5, #1
+	uxth	r5, r5
+	b	.L3082
+.L3087:
+	mov	r0, r4
+	bl	zbuf_free
+	ldr	r0, .L3101+32
+	mov	r1, fp
+	bl	printk
+.L3067:
+	ldr	r3, .L3101
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3089
+	bl	__stack_chk_fail
+.L3089:
+	add	sp, sp, #108
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3102:
+	.align	2
+.L3101:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2960
+	.word	.LC200
+	.word	.LANCHOR0+2994
+	.word	.LC201
+	.word	.LC202
+	.word	.LC203
+	.word	.LC204
+	.fnend
+	.size	ftl_dump_write_open_sblk, .-ftl_dump_write_open_sblk
+	.align	2
+	.global	ftl_ink_check_sblk
+	.type	ftl_ink_check_sblk, %function
+ftl_ink_check_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #60
+	sub	sp, sp, #60
+	ldr	r4, .L3127
+	mov	r8, r0, asl #2
+	ldr	r6, .L3127+4
+	mov	r5, r0
+	mov	r1, r5
+	ldr	r3, [r4]
+	str	r3, [sp, #52]
+	ldr	r3, [r6, #568]
+	ldrh	r2, [r3, r8]
+	ldr	r3, [r3, r0, asl #2]
+	ubfx	r2, r2, #0, #11
+	ldr	r0, .L3127+8
+	ubfx	r3, r3, #11, #8
+	bl	printk
+	movw	r3, #65535
+	cmp	r5, r3
+	str	r4, [sp, #8]
+	beq	.L3103
+	add	r3, r6, #564
+	ldrh	r3, [r3]
+	cmp	r3, r5
+	bls	.L3103
+	mov	r1, #0
+	mov	r0, r5
+	bl	ftl_erase_sblk
+	mov	r0, r5
+	mov	r9, #0
+	add	r1, sp, #36
+	strh	r5, [sp, #20]	@ movhi
+	bl	ftl_get_blk_list_in_sblk
+	strb	r0, [sp, #29]
+	mov	r0, #1
+	bl	buf_alloc
+	ldr	r3, [r6, #568]
+	ldrb	r2, [r6, #2260]	@ zero_extendqisi2
+	ldrh	r3, [r3, r8]
+	mov	r2, r2, asl #9
+	ubfx	r3, r3, #0, #11
+	cmp	r3, #1
+	movle	r1, #85
+	movgt	r1, #170
+	mov	r4, r0
+	ldr	r0, [r0, #4]
+	bl	ftl_memset
+	bl	sblk_wait_write_queue_completed
+.L3107:
+	ldr	r3, .L3127+12
+	uxth	fp, r9
+	ldr	r2, .L3127+12
+	ldrh	r3, [r3]
+	cmp	r3, fp
+	bls	.L3123
+	add	r7, r2, #34
+	mov	r10, #0
+.L3110:
+	ldrb	r2, [sp, #29]	@ zero_extendqisi2
+	uxth	r3, r10
+	cmp	r2, r3
+	bls	.L3124
+	add	r2, sp, #56
+	add	r3, r2, r3, asl #1
+	movw	r2, #65535
+	ldrh	r3, [r3, #-20]
+	cmp	r3, r2
+	beq	.L3108
+	ldrh	r1, [r7]
+	mov	ip, #0
+	ldr	r2, [r4, #4]
+	mvn	r0, #0
+	mla	r3, r1, r3, fp
+	ldr	r1, .L3127+16
+	str	r3, [r2]
+	ldr	r2, [r4, #4]
+	str	r1, [r2, #4]
+	ldr	r2, [r4, #12]
+	str	ip, [r2]
+	ldrb	r2, [r6, #676]	@ zero_extendqisi2
+	ldrb	lr, [r6, #2260]	@ zero_extendqisi2
+	rsb	r1, r2, #24
+	str	ip, [sp, #4]
+	mvn	r2, r0, asl r2
+	and	r0, r2, r3, lsr r1
+	str	lr, [sp]
+	bic	r1, r3, r2, asl r1
+	uxtb	r0, r0
+	ldr	r2, [r4, #4]
+	ldr	r3, [r4, #12]
+	bl	flash_prog_page_en
+.L3108:
+	add	r10, r10, #1
+	b	.L3110
+.L3124:
+	add	r9, r9, #1
+	b	.L3107
+.L3123:
+	mov	r7, #0
+.L3111:
+	ldrh	r1, [r2]
+	uxth	r10, r7
+	cmp	r1, r10
+	bls	.L3125
+	mov	fp, #0
+.L3116:
+	ldrb	r1, [sp, #29]	@ zero_extendqisi2
+	uxth	r6, fp
+	cmp	r1, r6
+	bls	.L3126
+	add	r6, r6, #8
+	add	r3, sp, #56
+	add	r6, r3, r6, asl #1
+	movw	r3, #65535
+	ldrh	r1, [r6, #-36]
+	cmp	r1, r3
+	beq	.L3113
+	ldr	r3, .L3127+20
+	mov	r0, r4
+	str	r2, [sp, #12]
+	ldrh	r9, [r3]
+	mla	r9, r9, r1, r10
+	mov	r1, #1
+	str	r9, [r4, #24]
+	bl	sblk_read_page
+	ldr	r1, [r4, #4]
+	ldr	r1, [r1]
+	cmp	r1, r9
+	ldr	r2, [sp, #12]
+	beq	.L3113
+	mov	r0, r9
+	bl	ftl_mask_bad_block
+	mvn	r1, #0
+	strh	r1, [r6, #-36]	@ movhi
+	ldr	r2, [sp, #12]
+.L3113:
+	add	fp, fp, #1
+	b	.L3116
+.L3126:
+	add	r7, r7, #1
+	b	.L3111
+.L3125:
+	mov	r0, r4
+	bl	zbuf_free
+	ldr	r3, .L3127+4
+	ldr	r0, .L3127+24
+	mov	r1, r5
+	ldr	r3, [r3, #568]
+	ldrh	r2, [r3, r8]
+	ldr	r3, [r3, r5, asl #2]
+	ubfx	r2, r2, #0, #11
+	ubfx	r3, r3, #11, #8
+	bl	printk
+.L3103:
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3118
+	bl	__stack_chk_fail
+.L3118:
+	add	sp, sp, #60
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3128:
+	.align	2
+.L3127:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC205
+	.word	.LANCHOR0+2960
+	.word	1437269760
+	.word	.LANCHOR0+2994
+	.word	.LC206
+	.fnend
+	.size	ftl_ink_check_sblk, .-ftl_ink_check_sblk
+	.align	2
+	.global	ftl_open_sblk_init
+	.type	ftl_open_sblk_init, %function
+ftl_open_sblk_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r4, r0
+	ldr	r6, .L3140
+	mov	r7, r1
+	mov	r8, r6
+.L3130:
+.L3134:
+	mov	r0, r7
+	bl	ftl_alloc_sblk
+	ldr	r3, [r6, #2288]
+	ldrh	r3, [r3, #150]
+	cmp	r3, #0
+	mov	r5, r0
+	beq	.L3131
+	ldr	r2, [r6, #568]
+	mov	r3, r0, asl #2
+	ldrh	r3, [r2, r3]
+	ubfx	r3, r3, #0, #11
+	cmp	r3, #2
+	bgt	.L3131
+	bl	ftl_ink_check_sblk
+.L3131:
+	mov	r1, #0
+	mov	r0, r5
+	bl	ftl_erase_sblk
+	add	r1, r4, #16
+	mov	r0, r5
+	mov	r9, r5, asl #1
+	bl	ftl_get_blk_list_in_sblk
+	ldr	r2, .L3140+4
+	strh	r5, [r4]	@ movhi
+	cmp	r7, #2
+	strb	r7, [r4, #4]
+	ldrh	r2, [r2]
+	uxtb	r3, r0
+	strb	r3, [r4, #9]
+	mov	r0, #0
+	strh	r0, [r4, #2]	@ movhi
+	smulbb	r3, r3, r2
+	strb	r0, [r4, #5]
+	strh	r0, [r4, #10]	@ movhi
+	ldrneb	r0, [r6, #2964]	@ zero_extendqisi2
+	ldr	r1, [r8, #3512]
+	strh	r3, [r4, #6]	@ movhi
+	ldrb	r3, [r8, #2964]	@ zero_extendqisi2
+	smulbbne	r0, r0, r2
+	mul	r2, r3, r2
+	uxthne	r0, r0
+	strh	r0, [r4, #12]	@ movhi
+	mov	r2, r2, asl #2
+	add	r0, r1, r0, asl #2
+	mov	r1, #255
+	bl	ftl_memset
+	ldr	r3, [r8, #576]
+	ldrh	r2, [r4, #6]
+	strh	r2, [r3, r9]	@ movhi
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
+	ldr	r0, .L3140+8
+	mov	r1, r5
+	bl	printk
+	ldr	r3, [r6, #576]
+	mvn	r2, #0
+	strh	r2, [r3, r9]	@ movhi
+	mov	r3, #7
+	strb	r3, [r4, #4]
+	b	.L3134
+.L3141:
+	.align	2
+.L3140:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2960
+	.word	.LC121
+	.fnend
+	.size	ftl_open_sblk_init, .-ftl_open_sblk_init
+	.align	2
+	.global	flash_info_flush
+	.type	flash_info_flush, %function
+flash_info_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3156
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L3143
+	ldr	r0, .L3156+4
+	mov	r1, #324
+	ldr	r2, .L3156+8
+	bl	printk
+.L3143:
+	ldr	r6, .L3156+12
+	mov	r1, #0
+	ldr	r5, .L3156+16
+	mov	r2, #64
+	ldr	r8, .L3156+20
+	mov	r9, #0
+	ldr	r0, [r6, #-2512]
+	bl	ftl_memset
+	ldr	r0, .L3156+24
+	ldr	r1, [r5, #664]
+	mov	r2, #4
+	mov	r3, #16
+	mov	r10, r8
+	bl	rknand_print_hex
+	ldr	r4, [r5, #664]
+	add	r0, r4, #16
+	ldr	r1, [r4, #8]
+	bl	js_hash
+	str	r0, [r4, #12]
+.L3144:
+	ldrb	r3, [r6, #-2508]	@ zero_extendqisi2
+	ldrh	r4, [r8, #2]
+	ldrh	ip, [r5, #2]
+	mov	r1, r3
+	ldr	r0, .L3156+28
+	mov	r2, r4
+	str	r3, [sp, #8]
+	str	ip, [sp, #12]
+	bl	printk
+	ldr	r2, .L3156+32
+	ldrh	r0, [r8, #2]
+	ldr	r7, .L3156+12
+	ldrh	r2, [r2]
+	ldr	fp, .L3156+16
+	sub	r2, r2, #1
+	cmp	r0, r2
+	ldr	r3, [sp, #8]
+	ldr	ip, [sp, #12]
+	blt	.L3145
+	ldr	r4, [fp, #664]
+	ldrb	r2, [r7, #-2507]	@ zero_extendqisi2
+	ldr	r3, [r4, #4]
+	mov	r0, r4
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	ldrb	r3, [r7, #-2508]	@ zero_extendqisi2
+	strb	r2, [r7, #-2508]
+	ldrh	r2, [r4, #16]
+	strb	r3, [r7, #-2507]
+	mov	r3, #0
+	add	r2, r2, #1
+	strh	r2, [r0, #16]!	@ movhi
+	ldr	r1, [r4, #8]
+	strh	r3, [r8, #2]	@ movhi
+	str	r3, [sp, #8]
+	bl	js_hash
+	ldrb	r2, [r7, #-2508]	@ zero_extendqisi2
+	str	r0, [r4, #12]
+	ldr	r3, [sp, #8]
+	ldrh	r4, [fp, #2]
+	mov	r0, r3
+	mul	r4, r4, r2
+	b	.L3154
+.L3145:
+	cmp	r0, #0
+	mla	r4, ip, r3, r4
+	bne	.L3146
+.L3154:
+	mov	r1, r4
+	bl	flash_erase_block
+.L3146:
+	ldr	r2, [r5, #664]
+	mov	r7, #1
+	ldr	r3, [r6, #-2512]
+	mov	r0, #0
+	mov	r1, r4
+	ldr	r2, [r2, #4]
+	str	r2, [r3]
+	ldr	r2, .L3156+36
+	ldr	r3, [r6, #-2512]
+	str	r2, [r3, #4]
+	mov	r2, #4
+	stmia	sp, {r2, r7}
+	ldr	r2, [r5, #664]
+	bl	flash_prog_page_en
+	ldrh	r3, [r10, #2]
+	add	r3, r3, r7
+	strh	r3, [r10, #2]	@ movhi
+	cmn	r0, #1
+	bne	.L3147
+	mov	r1, r4
+	ldr	r0, .L3156+40
+	bl	printk
+	b	.L3144
+.L3147:
+	cmp	r9, #0
+	moveq	r9, r7
+	beq	.L3144
+.L3155:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3157:
+	.align	2
+.L3156:
+	.word	.LANCHOR2
+	.word	.LC136
+	.word	.LANCHOR1+1896
+	.word	.LANCHOR5
+	.word	.LANCHOR0
+	.word	.LANCHOR5-2508
+	.word	.LC207
+	.word	.LC208
+	.word	.LANCHOR3-3360
+	.word	1398362953
+	.word	.LC209
+	.fnend
+	.size	flash_info_flush, .-flash_info_flush
+	.align	2
+	.global	flash_info_blk_init
+	.type	flash_info_blk_init, %function
+flash_info_blk_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3190
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r3, [r3]
+	ldr	r6, .L3190+4
+	tst	r3, #4096
+	beq	.L3159
+	ldr	r3, [r6, #664]
+	mov	r1, #50
+	ldr	r0, .L3190+8
+	ldr	r2, .L3190+12
+	str	r3, [sp]
+	mov	r3, #2048
+	bl	printk
+.L3159:
+	ldr	fp, .L3190+4
+	mov	r5, #4
+	ldr	r8, .L3190+16
+.L3162:
+	ldrh	r1, [r6, #2]
+	mov	r9, #4
+	ldr	r4, .L3190+20
+	mov	r0, #0
+	str	r9, [sp]
+	mul	r1, r1, r5
+	ldr	r2, [r6, #664]
+	ldr	r3, [r4, #-2512]
+	bl	flash_read_page_en
+	ldr	r7, .L3190+4
+	cmn	r0, #1
+	beq	.L3160
+	ldr	r2, [fp, #664]
+	ldr	r10, .L3190+16
+	ldr	r3, [r2]
+	cmp	r3, r8
+	beq	.L3161
+.L3160:
+	add	r5, r5, #1
+	cmp	r5, #16
+	bne	.L3162
+.L3188:
+	mvn	r0, #0
+	b	.L3186
+.L3161:
+	ldrb	r1, [r2, #37]	@ zero_extendqisi2
+	mov	r0, #0
+	ldrb	r3, [r2, #36]	@ zero_extendqisi2
+	strb	r1, [r4, #-2507]
+	ldrh	r1, [r7, #2]
+	strb	r3, [r4, #-2508]
+	str	r9, [sp]
+	mul	r1, r1, r3
+	ldr	r3, [r4, #-2512]
+	bl	flash_read_page_en
+	cmn	r0, #1
+	beq	.L3171
+	ldr	r3, [r7, #664]
+	ldr	r2, [r3]
+	cmp	r2, r8
+	ldreq	r5, [r3, #4]
+	beq	.L3164
+.L3171:
+	mov	r5, #0
+.L3164:
+	ldrb	r3, [r4, #-2507]	@ zero_extendqisi2
+	mov	r2, #4
+	ldrh	r1, [r6, #2]
+	mov	r0, #0
+	str	r2, [sp]
+	ldr	r2, [r6, #664]
+	mul	r1, r1, r3
+	ldr	r3, [r4, #-2512]
+	bl	flash_read_page_en
+	ldr	r7, .L3190+20
+	cmn	r0, #1
+	beq	.L3165
+	ldr	r3, .L3190+4
+	ldr	r3, [r3, #664]
+	ldr	r2, [r3]
+	cmp	r2, r10
+	bne	.L3165
+	ldr	r2, [r3, #4]
+	cmp	r5, r2
+	ldrccb	r2, [r3, #37]	@ zero_extendqisi2
+	ldrccb	r3, [r3, #36]	@ zero_extendqisi2
+	strccb	r2, [r7, #-2508]
+	strccb	r3, [r7, #-2507]
+.L3165:
+	ldr	r2, [r6, #664]
+	mov	r8, #4
+	ldr	r3, [r4, #-2512]
+	mov	r0, #0
+	ldrb	r1, [r4, #-2508]	@ zero_extendqisi2
+	mov	r7, #0
+	str	r8, [sp]
+	bl	flash_get_last_written_page
+	ldr	r3, .L3190+24
+	ldrh	r9, [r6, #2]
+	ldr	ip, .L3190+4
+	uxth	fp, r0
+	add	r2, fp, #1
+	strh	r2, [r3, #2]	@ movhi
+	ldrb	r3, [r4, #-2508]	@ zero_extendqisi2
+	mla	r9, r9, r3, r0
+.L3166:
+	rsb	r5, r7, fp
+	sxth	r5, r5
+	cmp	r5, #0
+	blt	.L3189
+	str	r8, [sp]
+	mov	r0, #0
+	rsb	r1, r7, r9
+	ldr	r2, [r6, #664]
+	ldr	r3, [r4, #-2512]
+	str	ip, [sp, #12]
+	bl	flash_read_page_en
+	cmn	r0, #1
+	ldr	ip, [sp, #12]
+	beq	.L3167
+	ldr	r3, [ip, #664]
+	ldr	r3, [r3]
+	cmp	r3, r10
+	beq	.L3168
+.L3167:
+	add	r7, r7, #1
+	b	.L3166
+.L3189:
+	cmn	r5, #1
+	bne	.L3168
+	ldr	r3, [r6, #664]
+	ldr	r0, .L3190+28
+	ldr	r1, [r3]
+	bl	printk
+	b	.L3188
+.L3168:
+	cmp	r7, #1
+	bls	.L3172
+	bl	flash_info_flush
+.L3172:
+	mov	r0, #0
+.L3186:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3191:
+	.align	2
+.L3190:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC210
+	.word	.LANCHOR1+1916
+	.word	1398362953
+	.word	.LANCHOR5
+	.word	.LANCHOR5-2508
+	.word	.LC211
+	.fnend
+	.size	flash_info_blk_init, .-flash_info_blk_init
+	.align	2
+	.global	nand_flash_init
+	.type	nand_flash_init, %function
+nand_flash_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	ldr	r6, .L3273
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L3193
+	ldr	r0, .L3273+4
+	movw	r1, #2578
+	ldr	r2, .L3273+8
+	bl	printk
+.L3193:
+	ldr	r5, .L3273+12
+	mov	r0, r4
+	mov	r7, #0
+	ldr	r4, .L3273+16
+	str	r7, [r5, #-3256]
+	bl	nandc_init
+	ldr	r3, .L3273+20
+	mov	r1, r7
+	mov	r2, #8
+	add	r0, r4, #668
+	add	r10, r4, #688
+	mov	r9, r4
+	str	r3, [r4, #584]
+	mov	r3, #1
+	strb	r3, [r4, #589]
+	mov	r3, #3
+	strb	r3, [r4, #676]
+	bl	ftl_memset
+	ldr	r0, .L3273+24
+	mov	r1, r7
+	mov	r2, #32
+	mov	fp, r10
+	bl	ftl_memset
+.L3199:
+	mov	r8, r7, asl #3
+	uxtb	r0, r7
+	add	r1, r10, r8
+	bl	flash_read_id
+	cmp	r7, #0
+	ldr	r1, .L3273+28
+	bne	.L3194
+	ldrb	r3, [r9, #688]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bls	.L3195
+.L3197:
+	mvn	r8, #1
+	b	.L3265
+.L3195:
+	ldrb	r3, [r9, #689]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L3197
+.L3194:
+	ldrb	r3, [fp, r8]	@ zero_extendqisi2
+	add	r7, r7, #1
+	cmp	r3, #181
+	ldreq	r3, .L3273+28
+	moveq	r2, #44
+	streqb	r2, [r8, r3]
+	cmp	r7, #4
+	bne	.L3199
+	ldr	ip, .L3273+32
+	mov	r3, #0
+.L3232:
+	mov	r0, r3, asl #5
+	ldrb	r8, [ip, r3, asl #5]	@ zero_extendqisi2
+	add	r7, r0, #1
+	ldr	lr, .L3273+32
+	add	r7, ip, r7
+	mov	r2, #0
+.L3200:
+	cmp	r2, r8
+	bcs	.L3272
+	ldrb	r10, [r7, r2]	@ zero_extendqisi2
+	ldrb	r9, [r1, r2]	@ zero_extendqisi2
+	cmp	r10, r9
+	bne	.L3201
+	add	r2, r2, #1
+	b	.L3200
+.L3272:
+	adds	r8, lr, r0
+	beq	.L3197
+	ldr	r3, .L3273
+	ldr	r2, .L3273+36
+	add	r0, r3, r0
+	mov	r3, #0
+	ldrb	r1, [r0, #446]	@ zero_extendqisi2
+.L3205:
+	ldrb	r0, [r2, r3, asl #5]	@ zero_extendqisi2
+	cmp	r0, r1
+	beq	.L3204
+	add	r3, r3, #1
+	cmp	r3, #4
+	bne	.L3205
+.L3204:
+	ldr	r1, .L3273+36
+	mov	r2, #32
+	ldr	r7, .L3273
+	add	r1, r1, r3, asl #5
+	ldr	r0, .L3273+40
+	bl	ftl_memcpy
+	add	r0, r7, #4
+	mov	r1, r8
+	mov	r2, #32
+	bl	ftl_memcpy
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	cmp	r3, #8
+	bhi	.L3206
+	ldrb	r3, [r7, #24]	@ zero_extendqisi2
+	cmp	r3, #60
+	movhi	r3, #60
+	strhib	r3, [r7, #24]
+	b	.L3206
+.L3201:
+	add	r3, r3, #1
+	cmp	r3, #44
+	bne	.L3232
+	b	.L3197
+.L3206:
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L3234
+	ldr	r0, .L3273+4
+	movw	r1, #2600
+	ldr	r2, .L3273+8
+	bl	printk
+.L3234:
+	ldr	r3, [r4, #584]
+	mov	r0, #16384
+	ldr	r7, .L3273+44
+	mov	r8, #0
+	ldrh	r3, [r3, #10]
+	cmp	r3, #2304
+	ldreq	r3, .L3273+16
+	moveq	r2, #2
+	streqb	r2, [r3, #676]
+	bl	ftl_malloc
+	str	r0, [r5, #-3248]
+	mov	r0, #16384
+	bl	ftl_malloc
+	str	r0, [r5, #-3272]
+	mov	r0, #2048
+	bl	ftl_malloc
+	str	r0, [r4, #664]
+	mov	r0, #64
+	bl	ftl_malloc
+	str	r0, [r5, #-3244]
+	mov	r0, #64
+	bl	ftl_malloc
+	str	r0, [r5, #-3264]
+	mov	r0, #64
+	bl	ftl_malloc
+	strb	r8, [r7, #-2504]
+	str	r0, [r7, #-2512]
+	bl	flash_die_info_init
+	ldrb	r0, [r6, #22]	@ zero_extendqisi2
+	bl	flash_lsb_page_tbl_build
+	ldrb	r0, [r6, #24]	@ zero_extendqisi2
+	bl	nandc_bch_sel
+	ldr	r1, [r4, #584]
+	str	r8, [r5, #-3252]
+	ldrh	r3, [r1, #16]
+	ubfx	r2, r3, #8, #3
+	strb	r2, [r4, #720]
+	ubfx	r2, r3, #3, #1
+	strb	r2, [r5, #-3240]
+	ubfx	r2, r3, #4, #1
+	strb	r2, [r4, #721]
+	ubfx	r2, r3, #12, #1
+	strb	r2, [r4, #2944]
+	ubfx	r2, r3, #13, #1
+	strb	r2, [r4, #2938]
+	ubfx	r2, r3, #11, #1
+	strb	r2, [r4, #684]
+	ldrb	r2, [r1, #31]	@ zero_extendqisi2
+	ubfx	r0, r2, #1, #1
+	ubfx	r2, r2, #2, #1
+	strb	r2, [r7, #-2502]
+	ubfx	r2, r3, #14, #1
+	mov	r3, r3, lsr #15
+	strb	r3, [r4, #2939]
+	mov	r3, #60
+	strb	r3, [r4, #588]
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	strb	r2, [r4, #1]
+	cmp	r3, #9
+	ldrb	r2, [r1, #28]	@ zero_extendqisi2
+	strb	r0, [r7, #-2503]
+	ldreq	r1, .L3273+16
+	moveq	r0, #70
+	strb	r2, [r4, #590]
+	strb	r2, [r4]
+	ldrb	r2, [r6, #11]	@ zero_extendqisi2
+	streqb	r0, [r1, #588]
+	cmp	r2, #9
+	ldreq	r2, .L3273+16
+	moveq	r1, #0
+	streqb	r1, [r2, #590]
+	ldrb	r2, [r6, #35]	@ zero_extendqisi2
+	tst	r2, #1
+	movne	r2, #3
+	strneb	r2, [r4, #590]
+	cmp	r3, #8
+	bne	.L3211
+	ldrb	r3, [r4, #688]	@ zero_extendqisi2
+	cmp	r3, #44
+	cmpne	r3, #137
+	bne	.L3211
+	ldrb	r3, [r6, #32]	@ zero_extendqisi2
+	cmp	r3, #3
+	ldreq	r3, .L3273+16
+	moveq	r2, #0
+	streqb	r2, [r3, #590]
+.L3211:
+	ldrh	r2, [r6, #20]
+	ldrb	r3, [r6, #23]	@ zero_extendqisi2
+	tst	r2, #64
+	strb	r3, [r4, #661]
+	beq	.L3213
+	sub	r2, r3, #17
+	sub	r1, r3, #21
+	clz	r1, r1
+	cmp	r3, #21
+	cmpne	r2, #2
+	mov	r1, r1, lsr #5
+	bhi	.L3214
+	ldr	r2, .L3273+48
+	cmp	r1, #0
+	ldr	r3, .L3273+12
+	str	r2, [r5, #-3252]
+	moveq	r2, #15
+	movne	r2, #4
+	strb	r2, [r3, #-3260]
+	b	.L3213
+.L3214:
+	sub	r2, r3, #65
+	cmp	r3, #33
+	cmpne	r2, #1
+	bhi	.L3217
+	ldr	r3, .L3273+52
+	mov	r2, #4
+	str	r3, [r5, #-3252]
+	ldr	r3, .L3273+16
+	strb	r2, [r3, #662]
+	b	.L3271
+.L3217:
+	sub	r2, r3, #67
+	sub	ip, r3, #35
+	cmp	r2, #1
+	sub	lr, r3, #68
+	sub	r1, r3, #34
+	clz	ip, ip
+	clz	lr, lr
+	movhi	r0, #0
+	movls	r0, #1
+	cmp	r2, #1
+	cmphi	r1, #1
+	mov	ip, ip, lsr #5
+	mov	lr, lr, lsr #5
+	bhi	.L3218
+	ldr	r2, .L3273+52
+	ldr	r3, .L3273+12
+	str	r2, [r5, #-3252]
+	orrs	r2, lr, ip
+	moveq	r2, #7
+	movne	r2, #17
+	cmp	r0, #0
+	strb	r2, [r3, #-3260]
+	movne	r3, #4
+	moveq	r3, #5
+	strb	r3, [r4, #662]
+	b	.L3213
+.L3218:
+	sub	r3, r3, #36
+	cmp	r3, #1
+	bhi	.L3213
+	ldr	r3, .L3273+56
+	str	r3, [r5, #-3252]
+.L3271:
+	mov	r3, #7
+	strb	r3, [r5, #-3260]
+.L3213:
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L3222
+	ldr	r0, .L3273+4
+	movw	r1, #2671
+	ldr	r2, .L3273+8
+	bl	printk
+.L3222:
+	mov	r3, #0
+	strb	r3, [r4, #623]
+	ldrb	r3, [r4, #720]	@ zero_extendqisi2
+	mov	r0, #4
+	tst	r3, #1
+	beq	.L3223
+	bl	nandc_set_if_mode
+	mov	r0, #1
+	bl	flash_set_interface_mode
+	mov	r0, #1
+.L3223:
+	bl	nandc_set_if_mode
+	bl	flash_info_blk_init
+	cmn	r0, #1
+	mov	r8, r0
+	bne	.L3225
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L3226
+	ldr	r0, .L3273+4
+	mov	r1, #2688
+	ldr	r2, .L3273+8
+	bl	printk
+.L3226:
+	ldr	r3, [r4, #664]
+	mov	r2, #17
+	mov	r0, #0
+	strb	r0, [r4, #680]
+	strb	r2, [r3, #32]
+	bl	zftl_flash_exit_slc_mode
+	b	.L3265
+.L3225:
+	ldrb	r3, [r4, #661]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	cmp	r3, #7
+	ldrls	r3, .L3273+60
+	strls	r3, [r5, #-3252]
+	ldrb	r3, [r4, #720]	@ zero_extendqisi2
+	ldr	r5, .L3273+16
+	tst	r3, #4
+	beq	.L3229
+	ldr	r3, [r5, #664]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3229
+	ldrb	r3, [r7, #-2508]	@ zero_extendqisi2
+	mov	r0, #0
+	ldrh	r1, [r5, #2]
+	mul	r1, r1, r3
+	bl	flash_ddr_para_scan
+	ldrb	r3, [r5, #623]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3229
+	ldr	r2, [r5, #664]
+	strb	r3, [r2, #19]
+	bl	flash_info_flush
+.L3229:
+	ldr	r3, [r6]
+	tst	r3, #4096
+	beq	.L3231
+	ldr	r0, .L3273+4
+	movw	r1, #2740
+	ldr	r2, .L3273+8
+	bl	printk
+.L3231:
+	bl	nand_flash_print_info
+	mov	r8, #0
+.L3265:
+	mov	r0, r8
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3274:
+	.align	2
+.L3273:
+	.word	.LANCHOR2
+	.word	.LC136
+	.word	.LANCHOR1+1936
+	.word	.LANCHOR3
+	.word	.LANCHOR0
+	.word	.LANCHOR2+4
+	.word	.LANCHOR3-3356
+	.word	.LANCHOR0+688
+	.word	.LANCHOR2+424
+	.word	.LANCHOR2+1832
+	.word	.LANCHOR0+591
+	.word	.LANCHOR5
+	.word	micron_read_retrial
+	.word	toshiba_read_retrial
+	.word	toshiba_3d_read_retrial
+	.word	hynix_read_retrial
+	.fnend
+	.size	nand_flash_init, .-nand_flash_init
+	.align	2
+	.global	ftl_sysblk_dump
+	.type	ftl_sysblk_dump, %function
+ftl_sysblk_dump:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r10, r0
+	.pad #52
+	sub	sp, sp, #52
+	mov	r0, #1
+	bl	buf_alloc
+	ldr	ip, .L3287
+	mov	r6, #0
+	mov	r5, r6
+	ldr	fp, [r0, #4]
+	mov	r4, r0
+.L3276:
+	ldr	r3, .L3287+4
+	uxth	r8, r6
+	ldrh	r3, [r3]
+	cmp	r3, r8
+	bls	.L3286
+	ldrh	r7, [ip]
+	add	r6, r6, #1
+	ldr	r3, .L3287+8
+	ldr	r1, [r4, #4]
+	mla	r7, r7, r10, r8
+	ldr	r2, [r4, #12]
+	ldrb	r3, [r3, #2260]	@ zero_extendqisi2
+	str	ip, [sp, #44]
+	mov	r0, r7
+	bl	ftl_read_ppa_page
+	ldr	r2, [r4, #4]
+	ldr	r3, [r4, #12]
+	str	r0, [sp]
+	mov	r9, r0
+	ldr	r1, [r2]
+	ldr	r0, .L3287+12
+	str	r1, [sp, #4]
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #8]
+	ldr	r1, [r2, #8]
+	str	r1, [sp, #12]
+	mov	r1, r10
+	ldr	r2, [r2, #12]
+	str	r2, [sp, #16]
+	ldr	r2, [r3]
+	str	r2, [sp, #20]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #24]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #28]
+	mov	r2, r8
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #32]
+	mov	r3, r7
+	bl	printk
+	cmn	r9, #1
+	cmpne	r9, #512
+	moveq	r5, #1
+	ldr	ip, [sp, #44]
+	b	.L3276
+.L3286:
+	ldr	r0, .L3287+16
+	add	r1, fp, #704
+	mov	r2, #4
+	mov	r3, #32
+	bl	rknand_print_hex
+	mov	r0, r4
+	bl	zbuf_free
+	cmp	r5, #0
+	beq	.L3279
+	ldr	r1, .L3287+20
+	movw	r2, #1422
+	ldr	r0, .L3287+24
+	bl	printk
+	bl	dump_stack
+.L3279:
+	mov	r0, r5
+	add	sp, sp, #52
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3288:
+	.align	2
+.L3287:
+	.word	.LANCHOR0+2994
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR0
+	.word	.LC201
+	.word	.LC212
+	.word	.LANCHOR1+1952
+	.word	.LC0
+	.fnend
+	.size	ftl_sysblk_dump, .-ftl_sysblk_dump
+	.align	2
+	.global	dump_ftl_info
+	.type	dump_ftl_info, %function
+dump_ftl_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #8
+	ldr	r4, .L3291
+	ldr	r0, .L3291+4
+	add	r5, r4, #2960
+	add	r6, r4, #564
+	ldrb	r1, [r4, #2262]	@ zero_extendqisi2
+	bl	printk
+	ldr	r2, .L3291+8
+	ldr	r0, .L3291+12
+	sub	r3, r2, #2928
+	sub	r3, r3, #8
+	ldrb	r1, [r2, #-2936]	@ zero_extendqisi2
+	ldrb	r2, [r2, #-2935]	@ zero_extendqisi2
+	ldrh	r3, [r3, #2]
+	bl	printk
+	ldr	r3, [r4, #2288]
+	ldr	r0, .L3291+16
+	ldrh	r1, [r3, #130]
+	ldrh	r2, [r3, #140]
+	bl	printk
+	ldr	r0, [r4, #580]
+	ldrh	ip, [r0, #22]
+	ldrh	r1, [r0, #16]
+	ldrh	r2, [r0, #18]
+	ldrb	r3, [r0, #21]	@ zero_extendqisi2
+	str	ip, [sp]
+	ldrh	r0, [r0, #26]
+	str	r0, [sp, #4]
+	ldr	r0, .L3291+20
+	bl	printk
+	ldr	r0, [r4, #580]
+	ldrh	ip, [r0, #54]
+	ldrh	r1, [r0, #48]
+	ldrh	r2, [r0, #50]
+	ldrb	r3, [r0, #53]	@ zero_extendqisi2
+	str	ip, [sp]
+	ldrh	r0, [r0, #58]
+	str	r0, [sp, #4]
+	ldr	r0, .L3291+24
+	bl	printk
+	ldr	r0, [r4, #580]
+	ldrh	ip, [r0, #86]
+	ldrh	r1, [r0, #80]
+	ldrh	r2, [r0, #82]
+	ldrb	r3, [r0, #85]	@ zero_extendqisi2
+	str	ip, [sp]
+	ldrh	r0, [r0, #90]
+	str	r0, [sp, #4]
+	ldr	r0, .L3291+28
+	bl	printk
+	ldrh	r2, [r5]
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldr	r1, [r4, #3512]
+	ldr	r0, .L3291+32
+	mul	r3, r3, r2
+	mov	r2, #4
+	mov	r3, r3, asl #1
+	bl	rknand_print_hex
+	ldr	r1, [r4, #576]
+	ldrh	r3, [r6]
+	mov	r2, #2
+	ldr	r0, .L3291+36
+	bl	rknand_print_hex
+	ldr	r3, [r4, #2288]
+	movw	ip, #698
+	ldr	r0, .L3291+40
+	add	r1, r3, #704
+	mov	r2, #4
+	ldrh	r3, [r3, ip]
+	bl	rknand_print_hex
+	ldr	r1, [r4, #568]
+	ldrh	r3, [r6]
+	mov	r2, #4
+	ldr	r0, .L3291+44
+	bl	rknand_print_hex
+	add	r1, r4, #2992
+	ldr	r0, .L3291+48
+	add	r1, r1, #8
+	mov	r2, #2
+	mov	r3, #256
+	bl	rknand_print_hex
+	ldrh	r2, [r5]
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldr	r0, .L3291+52
+	ldr	r1, [r4, #3516]
+	mul	r3, r3, r2
+	mov	r2, #2
+	mov	r3, r3, asl #1
+	add	sp, sp, #8
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	rknand_print_hex
+.L3292:
+	.align	2
+.L3291:
+	.word	.LANCHOR0
+	.word	.LC213
+	.word	.LANCHOR3
+	.word	.LC214
+	.word	.LC215
+	.word	.LC216
+	.word	.LC217
+	.word	.LC218
+	.word	.LC219
+	.word	.LC220
+	.word	.LC212
+	.word	.LC221
+	.word	.LC222
+	.word	.LC223
+	.fnend
+	.size	dump_ftl_info, .-dump_ftl_info
+	.align	2
+	.global	pm_ppa_update_check
+	.type	pm_ppa_update_check, %function
+pm_ppa_update_check:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, r2
+	ldr	r4, .L3297
+	mov	r7, r0
+	mov	r6, r1
+	add	r3, r4, #2928
+	ldrb	r2, [r4, #676]	@ zero_extendqisi2
+	ldrh	r0, [r3]
+	mvn	r3, #0
+	rsb	r2, r2, #24
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	rsb	r2, r0, r2
+	mov	r0, r5, lsr r0
+	bic	r0, r0, r3, asl r2
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #568]
+	uxth	r0, r0
+	add	r0, r3, r0, asl #2
+	ldrb	r0, [r0, #2]	@ zero_extendqisi2
+	mov	r0, r0, lsr #5
+	cmp	r0, #1
+	cmpne	r0, #7
+	moveq	r0, #1
+	movne	r0, #0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
+	mov	r1, r7
+	mov	r2, r6
+	mov	r3, r5
+	ldr	r0, .L3297+4
+	bl	printk
+	bl	dump_ftl_info
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3298:
+	.align	2
+.L3297:
+	.word	.LANCHOR0
+	.word	.LC224
+	.fnend
+	.size	pm_ppa_update_check, .-pm_ppa_update_check
+	.align	2
+	.type	load_l2p_region, %function
+load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #31
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	mov	r5, r0
+	mov	r6, r1
+	bls	.L3300
+	ldr	r1, .L3314
+	mov	r2, #32
+	ldr	r0, .L3314+4
+	bl	printk
+	bl	dump_stack
+.L3300:
+	ldr	r7, .L3314+8
+	movw	r8, #698
+	ldr	r3, [r7, #2288]
+	mov	r9, r7
+	ldrh	r2, [r3, r8]
+	cmp	r5, r2
+	bls	.L3301
+	mov	r1, r5
+	ldr	r0, .L3314+12
+	bl	printk
+	ldr	r3, .L3314+16
+	mov	r4, #0
+	mov	r1, #255
+	ldr	r0, [r4, #4]
+	ldrh	r2, [r3, #-4]
+	bl	ftl_memset
+	ldr	r3, [r7, #2288]
+	ldrh	r3, [r3, r8]
+	cmp	r3, r5
+	bcs	.L3312
+	ldr	r0, .L3314+4
+	mov	r2, #36
+	ldr	r1, .L3314
+	b	.L3313
+.L3301:
+	add	r2, r5, #176
+	mov	r6, r6, asl #3
+	add	r8, r7, r6
+	ldr	r4, [r3, r2, asl #2]
+	ldr	r3, .L3314+20
+	add	r2, r3, r6
+	strh	r5, [r3, r6]	@ movhi
+	mov	r3, #0
+	cmp	r4, r3
+	strh	r3, [r2, #2]	@ movhi
+	bne	.L3304
+	mov	r1, r5
+	mov	r2, r4
+	ldr	r0, .L3314+24
+	bl	printk
+	ldr	r3, .L3314+16
+	ldr	r0, [r8, #3544]
+	mov	r1, #255
+	ldrh	r2, [r3, #-4]
+	bl	ftl_memset
+	b	.L3312
+.L3304:
+	ldr	r7, .L3314+28
+	mov	r0, r4
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	ldr	r1, [r8, #3544]
+	ldr	r2, [r7, #-2520]
+	bl	ftl_read_ppa_page
+	ldr	r2, [r7, #-2520]
+	ldr	r2, [r2]
+	cmp	r2, r5
+	mov	r3, r0
+	bne	.L3305
+	cmn	r0, #1
+	cmpne	r0, #512
+	beq	.L3305
+.L3308:
+	ldr	r3, [r7, #-2520]
+	ldr	r3, [r3]
+	cmp	r3, r5
+	beq	.L3312
+	ldr	r0, .L3314+4
+	mov	r2, #63
+	ldr	r1, .L3314
+	b	.L3313
+.L3305:
+	mov	r1, r5
+	str	r4, [sp]
+	ldr	r0, .L3314+32
+	add	r6, r9, r6
+	bl	printk
+	ldr	r3, [r9, #2288]
+	movw	ip, #698
+	ldr	r0, .L3314+36
+	add	r1, r3, #704
+	mov	r2, #4
+	ldrh	r3, [r3, ip]
+	bl	rknand_print_hex
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	ldr	r0, .L3314+40
+	mov	r2, #4
+	ldr	r1, [r6, #3544]
+	mov	r3, r3, asl #7
+	bl	rknand_print_hex
+	ldr	r0, .L3314+44
+	ldr	r1, [r7, #-2520]
+	mov	r2, #4
+	mov	r3, #16
+	bl	rknand_print_hex
+	ldrb	r3, [r9, #2260]	@ zero_extendqisi2
+	mov	r0, r4
+	ldr	r1, [r6, #3544]
+	ldr	r2, [r7, #-2520]
+	bl	ftl_read_ppa_page
+	ldr	r3, [r7, #-2520]
+	ldr	r3, [r3]
+	cmp	r3, r5
+	bne	.L3310
+	cmn	r0, #1
+	cmpne	r0, #512
+	bne	.L3308
+	b	.L3310
+.L3313:
+	bl	printk
+	bl	dump_stack
+.L3312:
+	mov	r0, #0
+	b	.L3303
+.L3310:
+	mvn	r0, #0
+.L3303:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L3315:
+	.align	2
+.L3314:
+	.word	.LANCHOR1+1968
+	.word	.LC0
+	.word	.LANCHOR0
+	.word	.LC225
+	.word	.LANCHOR5-2496
+	.word	.LANCHOR0+3540
+	.word	.LC226
+	.word	.LANCHOR5
+	.word	.LC227
+	.word	.LC228
+	.word	.LC229
+	.word	.LC230
+	.fnend
+	.size	load_l2p_region, .-load_l2p_region
+	.align	2
+	.global	pm_gc
+	.type	pm_gc, %function
+pm_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L3335
+	ldr	r5, .L3335+4
+	ldr	r3, [r4, #2288]
+	add	r3, r3, #688
+	ldrh	r2, [r3]
+	sub	r3, r5, #3296
+	ldrh	r0, [r3]
+	mov	r6, r3
+	sub	r0, r0, #1
+	cmp	r2, r0
+	bge	.L3317
+	ldr	r3, [r5, #-3304]
+	cmp	r3, #0
+	beq	.L3318
+.L3317:
+	bl	pm_free_sblk
+	ldr	r2, [r4, #2288]
+	add	r3, r2, #688
+	ldrh	r1, [r3]
+	ldrh	r3, [r6]
+	sub	r3, r3, #1
+	cmp	r1, r3
+	bge	.L3319
+	ldr	r3, .L3335+4
+	ldr	r3, [r3, #-3304]
+	cmp	r3, #0
+	beq	.L3318
+.L3319:
+	uxth	r0, r0
+	mov	r3, #0
+	add	r0, r0, #208
+	str	r3, [r5, #-3304]
+	movw	r5, #65535
+	mov	r0, r0, asl #1
+	ldrh	r6, [r2, r0]
+	cmp	r6, r5
+	bne	.L3321
+	ldr	r1, .L3335+8
+	mov	r2, #162
+	ldr	r0, .L3335+12
+	bl	printk
+	bl	dump_stack
+	bl	pm_free_sblk
+	ldr	r3, [r4, #2288]
+	uxth	r0, r0
+	add	r0, r0, #208
+	mov	r0, r0, asl #1
+	ldrh	r6, [r3, r0]
+	cmp	r6, r5
+	beq	.L3318
+.L3321:
+	bl	pm_select_ram_region
+	ldr	r3, .L3335+16
+	movw	r2, #65535
+	mov	r5, r0, asl #3
+	mov	r9, r0
+	add	r7, r3, r5
+	str	r3, [sp, #4]
+	ldrh	r0, [r3, r5]
+	cmp	r0, r2
+	beq	.L3322
+	ldr	r3, .L3335
+	add	r3, r3, r5
+	ldr	r1, [r3, #3544]
+	cmp	r1, #0
+	beq	.L3322
+	ldrsh	r3, [r7, #2]
+	cmp	r3, #0
+	bge	.L3322
+	bl	pm_write_page
+	ldrh	r3, [r7, #2]
+	ubfx	r3, r3, #0, #15
+	strh	r3, [r7, #2]	@ movhi
+.L3322:
+	ldr	r7, .L3335
+	mov	r8, #0
+	add	fp, r7, r5
+.L3323:
+	ldr	r0, [r4, #2288]
+	uxth	r10, r8
+	add	r3, r0, #696
+	add	r3, r3, #2
+	ldrh	r3, [r3]
+	cmp	r3, r10
+	bls	.L3334
+	ldr	r3, .L3335+20
+	ldrh	r1, [r3]
+	add	r3, r10, #176
+	ldr	ip, [r0, r3, asl #2]
+	mvn	r0, #0
+	ldrb	r3, [r7, #676]	@ zero_extendqisi2
+	rsb	r3, r3, #24
+	rsb	r3, r1, r3
+	mvn	r0, r0, asl r3
+	and	r0, r0, ip, lsr r1
+	ldrb	r1, [r7, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	cmp	r0, r6
+	bne	.L3324
+	mov	r0, r10
+	mov	r1, r9
+	bl	load_l2p_region
+	cmp	r0, #0
+	bne	.L3325
+	mov	r0, r10
+	ldr	r1, [fp, #3544]
+	bl	pm_write_page
+.L3325:
+	ldr	r2, [sp, #4]
+	mvn	r3, #0
+	strh	r3, [r2, r5]	@ movhi
+.L3324:
+	add	r8, r8, #1
+	b	.L3323
+.L3334:
+	bl	pm_free_sblk
+.L3318:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3336:
+	.align	2
+.L3335:
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LANCHOR1+1984
+	.word	.LC0
+	.word	.LANCHOR0+3540
+	.word	.LANCHOR0+2928
+	.fnend
+	.size	pm_gc, .-pm_gc
+	.align	2
+	.global	pm_flush_id
+	.type	pm_flush_id, %function
+pm_flush_id:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, r0, asl #3
+	ldr	r4, .L3343
+	ldr	r3, .L3343+4
+	add	r2, r4, r0
+	add	r5, r3, r0
+	ldr	r1, [r2, #3544]
+	ldrh	r0, [r3, r0]
+	bl	pm_write_page
+	ldrh	r3, [r5, #2]
+	ubfx	r3, r3, #0, #15
+	strh	r3, [r5, #2]	@ movhi
+	ldr	r3, [r4, #3536]
+	cmp	r3, #0
+	beq	.L3338
+	bl	pm_gc
+	mov	r3, #0
+	str	r3, [r4, #3536]
+.L3338:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L3344:
+	.align	2
+.L3343:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3540
+	.fnend
+	.size	pm_flush_id, .-pm_flush_id
+	.align	2
+	.global	pm_flush
+	.type	pm_flush, %function
+pm_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, #0
+	ldr	r5, .L3350
+.L3347:
+	add	r3, r5, r4, asl #3
+	uxth	r0, r4
+	ldrsh	r3, [r3, #2]
+	cmp	r3, #0
+	bge	.L3346
+	bl	pm_flush_id
+.L3346:
+	add	r4, r4, #1
+	cmp	r4, #32
+	bne	.L3347
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L3351:
+	.align	2
+.L3350:
+	.word	.LANCHOR0+3540
+	.fnend
+	.size	pm_flush, .-pm_flush
+	.align	2
+	.global	flt_sys_flush
+	.type	flt_sys_flush, %function
+flt_sys_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	r0, #0
+	ldmfd	sp!, {r3, lr}
+	b	ftl_info_flush
+	.fnend
+	.size	flt_sys_flush, .-flt_sys_flush
+	.align	2
+	.global	zftl_deinit
+	.type	zftl_deinit, %function
+zftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	zftl_flash_de_init
+	bl	flt_sys_flush
+	ldmfd	sp!, {r3, lr}
+	b	zftl_flash_de_init
+	.fnend
+	.size	zftl_deinit, .-zftl_deinit
+	.align	2
+	.global	pm_init
+	.type	pm_init, %function
+pm_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r7, r0
+	ldr	r3, .L3376
+	mov	r0, #64
+	ldr	r4, .L3376+4
+	mov	r10, #0
+	ldr	r5, .L3376+8
+	mvn	fp, #0
+	str	r10, [r3, #-3304]
+	mov	r3, #1
+	str	r10, [r4, #3536]
+	mov	r8, r4
+	strb	r3, [r5, #-2516]
+	bl	ftl_malloc
+	ldr	r9, .L3376+12
+	str	r0, [r5, #-2520]
+.L3358:
+	mov	r3, #0
+	cmp	r7, r3
+	mov	r6, r9
+	strh	fp, [r6, r10]!	@ movhi
+	strh	r3, [r6, #2]	@ movhi
+	beq	.L3357
+	ldrb	r0, [r8, #2260]	@ zero_extendqisi2
+	mov	r0, r0, asl #9
+	bl	ftl_malloc
+	str	r0, [r6, #4]
+.L3357:
+	add	r10, r10, #8
+	cmp	r10, #256
+	bne	.L3358
+	ldr	r3, [r4, #2288]
+	ldr	r8, [r5, #-2520]
+	ldr	r10, [r4, #3544]
+	add	r3, r3, #692
+	ldrb	r0, [r3, #2]	@ zero_extendqisi2
+	ldrh	r1, [r3]
+	mov	r3, #4
+	mov	r2, r10
+	str	r3, [sp]
+	mov	r3, r8
+	ldr	r9, .L3376+4
+	bl	flash_get_last_written_page
+	ldr	r6, [r4, #2288]
+	add	r3, r6, #696
+	ldrh	r2, [r3]
+	cmp	r2, r0
+	mov	r5, r0
+	bgt	.L3359
+	add	r6, r6, #692
+	mov	r3, r5
+	ldr	r0, .L3376+16
+	add	r5, r5, #1
+	ldrh	r1, [r6]
+	bl	printk
+	ldr	r3, [r9, #2288]
+	add	r3, r3, #696
+	ldrh	r7, [r3]
+.L3360:
+	sxth	r3, r7
+	cmp	r3, r5
+	bge	.L3375
+	ldr	r2, [r4, #2288]
+	ldr	r0, .L3376+20
+	add	r1, r2, #692
+	ldrh	r6, [r0]
+	ldrh	r1, [r1]
+	ldrb	r0, [r2, #694]	@ zero_extendqisi2
+	mov	r2, r10
+	mla	r6, r6, r1, r3
+	ldrb	r3, [r4, #2260]	@ zero_extendqisi2
+	str	r3, [sp]
+	mov	r3, r8
+	mov	r1, r6
+	bl	flash_read_page_en
+	ldr	r3, [r4, #2288]
+	add	r3, r3, #692
+	ldr	r2, [r3, #-644]
+	add	r2, r2, #1
+	str	r2, [r3, #-644]
+	add	r3, r3, #2
+	ldr	r1, [r8]
+	mov	r2, r6
+	ldrh	r3, [r3]
+	mov	fp, r0
+	ldr	r0, .L3376+24
+	bl	printk
+	cmp	fp, #512
+	cmnne	fp, #1
+	beq	.L3361
+	ldr	r1, [r9, #2288]
+	ldr	r3, [r8]
+	add	r2, r1, #696
+	add	r2, r2, #2
+	ldrh	r2, [r2]
+	cmp	r3, r2
+	addcc	r3, r3, #176
+	strcc	r6, [r1, r3, asl #2]
+.L3361:
+	add	r7, r7, #1
+	uxth	r7, r7
+	b	.L3360
+.L3375:
+	ldr	r3, .L3376+28
+	mov	r2, #1
+	strb	r2, [r3, #-2855]
+	ldr	r3, [r4, #2288]
+	add	r3, r3, #696
+	strh	r5, [r3]	@ movhi
+	bl	pm_free_sblk
+.L3359:
+	ldr	r3, .L3376+32
+	mov	r1, #255
+	ldr	r0, [r4, #3544]
+	ldr	r5, .L3376+4
+	ldrh	r2, [r3, #-4]
+	bl	ftl_memset
+	mvn	r0, #0
+	ldr	r1, [r4, #3544]
+	bl	pm_write_page
+	ldr	r3, .L3376+28
+	ldrb	r3, [r3, #-2855]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3363
+	ldr	r1, [r5, #3544]
+	mvn	r0, #0
+	bl	pm_write_page
+	ldr	r1, [r5, #3544]
+	mvn	r0, #0
+	bl	pm_write_page
+	mvn	r0, #0
+	ldr	r1, [r5, #3544]
+	bl	pm_write_page
+.L3363:
+	bl	pm_free_sblk
+	bl	pm_gc
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3377:
+	.align	2
+.L3376:
+	.word	.LANCHOR3
+	.word	.LANCHOR0
+	.word	.LANCHOR5
+	.word	.LANCHOR0+3540
+	.word	.LC231
+	.word	.LANCHOR0+2994
+	.word	.LC232
+	.word	.LANCHOR4
+	.word	.LANCHOR5-2496
+	.fnend
+	.size	pm_init, .-pm_init
+	.align	2
+	.global	pm_log2phys
+	.type	pm_log2phys, %function
+pm_log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r1
+	ldr	fp, .L3397
+	mov	r9, r0
+	mov	r7, r2
+	ldrb	r4, [fp, #2260]	@ zero_extendqisi2
+	mov	r1, r4, asl #7
+	bl	__aeabi_uidiv
+	mov	r3, r4, asl #7
+	ldr	r2, [fp, #2268]
+	cmp	r9, r2
+	ldrcc	r2, .L3397+4
+	uxth	r10, r0
+	mov	r6, r0
+	smulbb	r3, r3, r10
+	rsb	r3, r3, r9
+	uxth	r8, r3
+	movcc	r3, #0
+	bcc	.L3379
+	mov	r1, r9
+	ldr	r0, .L3397+8
+	bl	printk
+	mvn	r0, #0
+	cmp	r7, #0
+	streq	r0, [r5]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3395:
+	ldrh	r1, [r1, r2]
+	cmp	r1, r10
+	beq	.L3382
+.L3381:
+	add	r3, r3, #1
+	cmp	r3, #32
+	beq	.L3394
+.L3379:
+	mov	r1, r3, asl #3
+	uxth	r4, r3
+	add	r0, r2, r1
+	ldr	r9, .L3397+4
+	ldr	r0, [r0, #4]
+	cmp	r0, #0
+	bne	.L3395
+	b	.L3381
+.L3394:
+	bl	pm_select_ram_region
+	mov	r3, r0, asl #3
+	mov	r4, r0
+	add	r2, r9, r3
+	ldrh	r1, [r9, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	bne	.L3396
+.L3385:
+	ldr	r3, .L3397+12
+	mov	r0, r10
+	mov	r1, r4
+	strb	r4, [r3, #-2498]
+	bl	load_l2p_region
+.L3382:
+	cmp	r7, #0
+	mov	r3, r4, asl #3
+	bne	.L3383
+	add	r2, fp, r3
+	mvn	r1, #0
+	ldr	r2, [r2, #3544]
+	ldr	r2, [r2, r8, asl #2]
+	str	r2, [r5]
+	ldrb	r0, [fp, #676]	@ zero_extendqisi2
+	rsb	ip, r0, #24
+	mvn	r1, r1, asl r0
+	and	r2, r1, r2, lsr ip
+	ldrb	r1, [fp, #2996]	@ zero_extendqisi2
+	cmp	r2, r1
+	mvncs	r2, #0
+	strcs	r2, [r5]
+	b	.L3384
+.L3383:
+	add	r2, fp, r3
+	ldr	r1, [r5]
+	ldr	r2, [r2, #3544]
+	str	r1, [r2, r8, asl #2]
+	add	r1, r9, r3
+	strb	r6, [fp, #3796]
+	ldrh	r2, [r1, #2]
+	mvn	r2, r2, asl #17
+	mvn	r2, r2, lsr #17
+	strh	r2, [r1, #2]	@ movhi
+.L3384:
+	add	r3, r9, r3
+	movw	r1, #32767
+	ldrh	r2, [r3, #2]
+	ubfx	r0, r2, #0, #15
+	cmp	r0, r1
+	mov	r0, #0
+	addne	r2, r2, #1
+	strneh	r2, [r3, #2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3396:
+	ldrsh	r3, [r2, #2]
+	cmp	r3, #0
+	bge	.L3385
+	bl	pm_flush_id
+	b	.L3385
+.L3398:
+	.align	2
+.L3397:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3540
+	.word	.LC233
+	.word	.LANCHOR5
+	.fnend
+	.size	pm_log2phys, .-pm_log2phys
+	.align	2
+	.global	gc_recovery
+	.type	gc_recovery, %function
+gc_recovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #76
+	sub	sp, sp, #76
+	ldr	r8, .L3484
+	mov	r6, #0
+	ldr	r3, .L3484+4
+	ldr	r4, .L3484+8
+	ldr	r5, [r8, #580]
+	ldr	r3, [r3]
+	strb	r6, [r8, #2945]
+	ldrh	r7, [r5, #80]
+	str	r3, [sp, #68]
+	movw	r3, #65535
+	cmp	r7, r3
+	strb	r6, [r4, #-3322]
+	beq	.L3400
+	mvn	r3, #0
+	mov	r0, #1
+	strh	r3, [r5, #130]	@ movhi
+	bl	buf_alloc
+	ldrb	r3, [r5, #89]	@ zero_extendqisi2
+	add	r3, r5, r3, asl #1
+	ldrh	r1, [r3, #94]
+	movw	r3, #2994
+	ldrh	r3, [r8, r3]
+	mul	r1, r3, r1
+	ldrb	r3, [r8, #2937]	@ zero_extendqisi2
+	cmp	r3, #2
+	mov	r6, r0
+	str	r1, [sp, #60]
+	beq	.L3401
+	ldrb	r2, [r8, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3402
+.L3401:
+	movw	r2, #2962
+	ldrh	r2, [r8, r2]
+	sub	r2, r2, #1
+	add	r2, r2, r1
+	orr	r3, r2, r3, asl #24
+	b	.L3481
+.L3402:
+	cmp	r3, #3
+	bne	.L3403
+	add	r3, r8, #2960
+	ldrh	r3, [r3]
+	sub	r3, r3, #1
+	add	r3, r3, r1
+	orr	r3, r3, #50331648
+.L3481:
+	str	r3, [r6, #24]
+.L3403:
+	mov	r0, r6
+	mov	r1, #1
+	bl	sblk_read_page
+	ldr	r7, [r6, #36]
+	cmn	r7, #1
+	cmpne	r7, #512
+	moveq	r7, #1
+	movne	r7, #0
+	beq	.L3404
+	ldr	r3, [r6, #12]
+	ldr	r2, [r3]
+	ldr	r3, .L3484+12
+	cmp	r2, r3
+	beq	.L3405
+.L3404:
+	mov	r0, r6
+	mov	r4, #0
+	bl	zbuf_free
+	ldr	r3, [r6, #4]
+	ldr	r2, [r6, #12]
+	ldr	r0, .L3484+16
+	ldr	r1, [r3, #4]
+	str	r1, [sp]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	ldr	r1, [r2, #8]
+	str	r1, [sp, #20]
+	ldr	r2, [r2, #12]
+	str	r2, [sp, #24]
+	ldr	r2, [r6, #36]
+	ldr	r3, [r3]
+	ldr	r1, [r6, #24]
+	bl	printk
+	ldrh	r3, [r5, #80]
+	ldr	r2, [r8, #576]
+	mov	r3, r3, asl #1
+	strh	r4, [r2, r3]	@ movhi
+	ldrh	r2, [r5, #80]
+	ldr	r3, [r8, #580]
+	strh	r2, [r3, #130]	@ movhi
+	b	.L3406
+.L3405:
+	movw	fp, #2962
+	ldrb	r3, [r8, #2964]	@ zero_extendqisi2
+	ldrh	r2, [r8, fp]
+	ldr	r1, [r6, #4]
+	ldr	r0, [r4, #-3316]
+	mul	r2, r3, r2
+	ldr	r10, .L3484+8
+	ldr	r9, .L3484
+	mov	r2, r2, asl #2
+	bl	ftl_memcpy
+	ldrh	r2, [r8, fp]
+	ldrb	r3, [r8, #2964]	@ zero_extendqisi2
+	ldrb	r1, [r8, #2260]	@ zero_extendqisi2
+	mul	r3, r3, r2
+	cmp	r1, r3, asr #6
+	mov	r2, r3, asl #2
+	bge	.L3407
+	rsb	r3, r3, r1, asl #7
+	ldr	r0, [r10, #-3312]
+	mov	r1, r7
+	mov	r7, #1
+	mov	r4, r3, asl #2
+	bl	ftl_memset
+	ldrh	r1, [r9, fp]
+	ldrb	r3, [r9, #2964]	@ zero_extendqisi2
+	mov	r2, r4
+	ldr	r0, [r10, #-3312]
+	mul	r3, r3, r1
+	ldr	r1, [r6, #4]
+	add	r1, r1, r3, asl #2
+	bl	ftl_memcpy
+	b	.L3408
+.L3407:
+	ldr	r1, [r6, #4]
+	mov	r4, r7
+	ldr	r0, [r10, #-3312]
+	add	r1, r1, r2
+	bl	ftl_memcpy
+.L3408:
+	ldr	r3, .L3484
+	add	r2, r3, #2960
+	ldrh	r2, [r2]
+	str	r2, [sp, #36]
+	ldrb	r2, [r8, #2937]	@ zero_extendqisi2
+	cmp	r2, #2
+	str	r2, [sp, #32]
+	bne	.L3409
+	ldrb	r3, [r3, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3410
+.L3409:
+	ldrb	r3, [r8, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3411
+.L3410:
+	ldr	r3, [sp, #32]
+	ldr	r2, [sp, #36]
+	mul	r3, r3, r2
+	str	r3, [sp, #36]
+	mov	r3, #1
+	str	r3, [sp, #32]
+.L3411:
+	ldr	ip, .L3484
+	mov	r8, #0
+	str	r8, [sp, #40]
+.L3412:
+	ldr	r3, [sp, #36]
+	cmp	r8, r3
+	bcs	.L3424
+	add	r3, r5, #96
+	str	r3, [sp, #48]
+	mov	r3, #0
+	str	r3, [sp, #44]
+.L3425:
+	ldrb	r3, [r5, #89]	@ zero_extendqisi2
+	ldr	r2, [sp, #44]
+	cmp	r2, r3
+	bge	.L3421
+	ldr	r3, [sp, #40]
+	mov	fp, #1
+	ldr	r10, .L3484+8
+	mov	r9, r3, asl #2
+.L3422:
+	ldr	r3, [sp, #32]
+	cmp	fp, r3
+	bhi	.L3482
+	ldr	r3, [sp, #48]
+	ldrb	r1, [ip, #2937]	@ zero_extendqisi2
+	ldrh	r2, [r3]
+	cmp	r1, #2
+	ldr	r3, .L3484+20
+	ldrh	r3, [r3]
+	mul	r3, r3, r2
+	str	r3, [sp, #60]
+	beq	.L3413
+	ldrb	r2, [ip, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3414
+.L3413:
+	sub	r2, r8, #1
+	add	r3, r2, r3
+	add	r3, r3, fp
+	orr	r3, r3, r1, asl #24
+	b	.L3416
+.L3414:
+	cmp	r1, #3
+	add	r3, r3, r8
+	orreq	r3, r3, fp, asl #24
+.L3416:
+	str	r3, [r6, #24]
+	mov	r0, r6
+	mov	r1, #1
+	str	ip, [sp, #52]
+	bl	sblk_read_page
+	cmp	r7, #0
+	ldr	ip, [sp, #52]
+	beq	.L3417
+	ldr	r3, [r10, #-3312]
+	ldr	r2, [r3, r9]
+	cmp	r2, #0
+	ldreq	r2, [r6, #12]
+	ldreq	r2, [r2, #8]
+	streq	r2, [r3, r9]
+.L3417:
+	ldr	r3, [r10, #-3316]
+	ldr	r2, [r6, #12]
+	ldr	r3, [r3, r9]
+	ldr	r1, [r2, #4]
+	cmp	r3, r1
+	bne	.L3418
+	ldr	r0, [r10, #-3312]
+	ldr	lr, [r0, r9]
+	ldr	r0, [r2, #8]
+	cmp	lr, r0
+	beq	.L3446
+.L3418:
+	ldr	r0, [r10, #-3312]
+	str	ip, [sp, #52]
+	ldr	r0, [r0, r9]
+	str	r0, [sp]
+	ldr	r0, [r2]
+	stmib	sp, {r0, r1}
+	ldr	r1, [r2, #8]
+	ldr	r0, .L3484+24
+	str	r1, [sp, #12]
+	ldr	r2, [r2, #12]
+	str	r2, [sp, #16]
+	ldr	r1, [r6, #24]
+	ldr	r2, [r6, #36]
+	bl	printk
+	ldr	r3, [r10, #-3316]
+	ldr	r3, [r3, r9]
+	cmn	r3, #1
+	ldr	ip, [sp, #52]
+	beq	.L3446
+	mov	r0, r6
+	bl	zbuf_free
+	ldr	r2, .L3484
+	ldrh	r3, [r5, #80]
+	mov	r0, #0
+	ldr	r1, [r2, #576]
+	mov	r3, r3, asl #1
+	strh	r0, [r1, r3]	@ movhi
+	ldrh	r1, [r5, #80]
+	ldr	r3, [r2, #580]
+	strh	r1, [r3, #130]	@ movhi
+	b	.L3406
+.L3446:
+	ldr	r3, [sp, #40]
+	add	fp, fp, #1
+	add	r9, r9, #4
+	add	r3, r3, #1
+	str	r3, [sp, #40]
+	b	.L3422
+.L3482:
+	ldr	r3, [sp, #44]
+	add	r3, r3, #1
+	str	r3, [sp, #44]
+	ldr	r3, [sp, #48]
+	add	r3, r3, #2
+	str	r3, [sp, #48]
+	b	.L3425
+.L3421:
+	ldrb	r3, [ip, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	addne	r8, r8, #1
+	add	r8, r8, #1
+	b	.L3412
+.L3424:
+	mov	r0, r6
+	ldr	r6, .L3484
+	bl	zbuf_free
+	movw	r2, #2962
+	ldrb	r0, [r5, #89]	@ zero_extendqisi2
+	mov	r4, #0
+	ldrh	r2, [r6, r2]
+	mov	r10, r4
+	ldrh	r3, [r5, #80]
+	mov	r8, r4
+	ldr	r1, [r6, #576]
+	smulbb	r2, r0, r2
+	mov	r3, r3, asl #1
+	strh	r2, [r1, r3]	@ movhi
+.L3426:
+	ldr	r3, [sp, #36]
+	cmp	r10, r3
+	bcs	.L3439
+	add	r3, r5, #96
+	str	r3, [sp, #44]
+	mov	r3, #0
+	str	r3, [sp, #40]
+.L3440:
+	ldrb	r2, [r5, #89]	@ zero_extendqisi2
+	ldr	r3, [sp, #40]
+	cmp	r3, r2
+	bge	.L3436
+	ldr	fp, .L3484+8
+	mov	r7, #1
+.L3437:
+	ldr	r3, [sp, #32]
+	cmp	r7, r3
+	bhi	.L3483
+	ldr	r2, [fp, #-3316]
+	ldr	r9, [r2, r8, asl #2]
+	cmn	r9, #1
+	beq	.L3427
+	ldr	r2, [fp, #-3312]
+	mov	r0, r9
+	ldr	r3, [r2, r8, asl #2]
+	str	r3, [sp, #48]
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #64]
+	bne	.L3428
+	mov	r0, r9
+	add	r1, sp, #64
+	mov	r2, #0
+	bl	pm_log2phys
+.L3428:
+	ldr	r3, [sp, #44]
+	ldr	r2, .L3484+20
+	ldrh	r1, [r3]
+	ldrh	r2, [r2]
+	mul	r2, r2, r1
+	ldrb	r1, [r6, #2937]	@ zero_extendqisi2
+	cmp	r1, #2
+	beq	.L3429
+	ldrb	r0, [r6, #684]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L3430
+.L3429:
+	sub	r0, r10, #1
+	add	r2, r0, r2
+	add	r2, r2, r7
+	orr	r2, r2, r1, asl #24
+	b	.L3432
+.L3430:
+	cmp	r1, #3
+	add	r2, r2, r10
+	orreq	r2, r2, r7, asl #24
+.L3432:
+	str	r2, [sp, #60]
+	ldr	r2, .L3484+28
+	ldrb	r1, [r6, #676]	@ zero_extendqisi2
+	ldr	r3, [sp, #48]
+	ldrh	r0, [r2]
+	rsb	r1, r1, #24
+	mov	r2, #1
+	str	r2, [sp, #52]
+	rsb	r1, r0, r1
+	mov	r1, r2, asl r1
+	sub	r1, r1, #1
+	and	r0, r1, r3, lsr r0
+	ldrb	r1, [r6, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldr	r1, [sp, #64]
+	uxth	ip, r0
+	ldr	r3, [sp, #48]
+	ldr	r2, [sp, #52]
+	cmp	r1, r3
+	bne	.L3433
+	add	r1, sp, #60
+	mov	r0, r9
+	str	ip, [sp, #48]
+	bl	pm_log2phys
+	add	r4, r4, #1
+	ldr	ip, [sp, #48]
+	mov	r0, ip
+	bl	ftl_vpn_decrement
+	ldr	ip, [sp, #48]
+	b	.L3434
+.L3433:
+	ldr	r2, [sp, #60]
+	cmp	r1, r2
+	addeq	r4, r4, #1
+.L3434:
+	ldr	r3, .L3484
+	add	r8, r8, #1
+	ldr	r2, [r3, #568]
+	add	r2, r2, ip, asl #2
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	ands	r2, r2, #224
+	bne	.L3427
+	ldr	r1, [r6, #576]
+	mov	ip, ip, asl #1
+	ldrh	r0, [r1, ip]
+	cmp	r0, #0
+	strneh	r2, [r1, ip]	@ movhi
+.L3427:
+	add	r7, r7, #1
+	b	.L3437
+.L3483:
+	ldr	r3, [sp, #40]
+	add	r3, r3, #1
+	str	r3, [sp, #40]
+	ldr	r3, [sp, #44]
+	add	r3, r3, #2
+	str	r3, [sp, #44]
+	b	.L3440
+.L3436:
+	ldrb	r2, [r6, #2938]	@ zero_extendqisi2
+	cmp	r2, #0
+	addne	r10, r10, #1
+	add	r10, r10, #1
+	b	.L3426
+.L3439:
+	ldr	r2, .L3484
+	ldrh	r3, [r5, #80]
+	ldr	r2, [r2, #576]
+	mov	r3, r3, asl #1
+	strh	r4, [r2, r3]	@ movhi
+	ldrh	r0, [r5, #80]
+	bl	zftl_insert_data_list
+.L3406:
+	ldr	r6, .L3484
+	ldrh	r0, [r5, #80]
+	ldr	r2, [r6, #576]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L3441
+	bl	ftl_dump_write_open_sblk
+.L3441:
+	ldrh	r1, [r5, #80]
+	mov	r2, r4
+	ldr	r0, .L3484+32
+	bl	printk
+	mvn	r3, #0
+	strh	r3, [r5, #80]	@ movhi
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	ldr	r3, [r6, #580]
+	ldrh	r0, [r3, #130]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L3442
+	bl	ftl_free_sblk
+.L3442:
+	ldr	r2, [r6, #2288]
+	mvn	r3, #0
+	mov	r0, #0
+	strh	r3, [r2, #126]	@ movhi
+	ldr	r2, [r6, #580]
+	strh	r3, [r2, #130]	@ movhi
+	bl	ftl_info_flush
+	b	.L3399
+.L3400:
+	ldrh	r3, [r5, #130]
+	cmp	r3, r7
+	beq	.L3399
+	ldr	r2, [r8, #2288]
+	ldrh	r2, [r2, #126]
+	cmp	r2, r3
+	bne	.L3444
+	bl	pm_flush
+	ldr	r3, [r8, #580]
+	ldrh	r0, [r3, #130]
+	bl	ftl_free_sblk
+	ldr	r3, [r8, #2288]
+	mvn	r2, #0
+	mov	r0, r6
+	strh	r2, [r3, #126]	@ movhi
+	bl	ftl_info_flush
+.L3444:
+	ldr	r3, [r8, #580]
+	mvn	r2, #0
+	strh	r2, [r3, #130]	@ movhi
+.L3399:
+	ldr	r3, .L3484+4
+	ldr	r2, [sp, #68]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3445
+	bl	__stack_chk_fail
+.L3445:
+	add	sp, sp, #76
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3485:
+	.align	2
+.L3484:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR3
+	.word	-178307901
+	.word	.LC234
+	.word	.LANCHOR0+2994
+	.word	.LC235
+	.word	.LANCHOR0+2928
+	.word	.LC236
+	.fnend
+	.size	gc_recovery, .-gc_recovery
+	.align	2
+	.global	zftl_init
+	.type	zftl_init, %function
+zftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	fp, .L3561
+	mvn	r3, #0
+	ldr	r4, .L3561+4
+	mov	r8, #0
+	ldr	r2, .L3561+8
+	mov	ip, fp
+	ldr	r1, .L3561+12
+	ldr	r0, .L3561+16
+	str	r3, [ip, #-2496]!
+	strb	r3, [r2, #-3239]
+	str	ip, [sp, #16]
+	str	ip, [sp, #4]
+	strb	r3, [r4, #2308]
+	strb	r3, [r4, #3531]
+	strb	r8, [r4, #2284]
+	strb	r8, [r4, #3532]
+	strb	r8, [r4, #2285]
+	bl	printk
+	ldr	r5, .L3561+20
+	movw	r1, #2962
+	ldrb	r3, [r5, #16]	@ zero_extendqisi2
+	ldrh	r9, [r5, #14]
+	ldrb	r2, [r5, #13]	@ zero_extendqisi2
+	strh	r9, [r4, r1]	@ movhi
+	mov	r0, r9
+	strb	r2, [r4, #2260]
+	str	r3, [sp, #4]
+	ldrb	r3, [sp, #4]	@ zero_extendqisi2
+	ldr	r1, [sp, #4]
+	str	r2, [sp, #12]
+	strb	r3, [r4, #2937]
+	bl	__aeabi_idiv
+	add	r1, r4, #2960
+	ldrh	r7, [r5, #18]
+	str	r0, [sp, #8]
+	ldrh	r3, [sp, #8]
+	ldrb	r0, [r5, #17]	@ zero_extendqisi2
+	ldr	r2, [sp, #12]
+	strh	r3, [r1]	@ movhi
+	ldrb	r1, [r4, #589]	@ zero_extendqisi2
+	ldr	ip, [sp, #16]
+	mov	r10, r2, asl #9
+	strb	r0, [r4, #2930]
+	strb	r1, [r4, #2996]
+	uxth	r10, r10
+	smulbb	r1, r0, r1
+	strh	r10, [ip, #-4]	@ movhi
+	ldrh	ip, [r4, #2]
+	mov	r0, #1
+	str	fp, [sp, #12]
+	uxtb	r6, r1
+	add	r1, r4, #564
+	strb	r6, [r4, #2964]
+	strh	r7, [r1]	@ movhi
+	movw	r1, #2994
+	strh	ip, [r4, r1]	@ movhi
+.L3487:
+	cmp	r0, ip
+	uxth	r1, r8
+	add	r8, r8, #1
+	movls	r0, r0, asl #1
+	bls	.L3487
+.L3559:
+	mul	r3, r9, r2
+	ldr	r0, .L3561+24
+	sub	r1, r1, #1
+	strh	r1, [r0]	@ movhi
+	mov	r0, #0
+	mov	r1, #1
+	mul	r8, r7, r3
+	mov	ip, r8, lsr #21
+.L3489:
+	cmp	r1, ip
+	uxth	lr, r0
+	add	r0, r0, #1
+	movls	r1, r1, asl #1
+	bls	.L3489
+.L3560:
+	ldr	r1, .L3561+28
+	sub	lr, lr, #1
+	mov	r0, #1
+	str	r3, [sp, #20]
+	uxth	lr, lr
+	ldr	r3, [sp, #12]
+	mul	r1, r1, r6
+	mov	lr, r0, asl lr
+	mul	r8, r6, r8
+	ldr	fp, .L3561+4
+	mul	r9, lr, r1
+	mov	r1, r2
+	str	r8, [r4, #2264]
+	ldr	r8, .L3561+32
+	add	ip, r9, #24576
+	str	ip, [r3, #-2492]
+	str	ip, [sp, #16]
+	mov	r0, ip
+	str	r9, [r4, #520]
+	bl	__aeabi_uidiv
+	sub	r2, r10, #1
+	mov	r1, r10
+	ldr	r10, .L3561+36
+	str	r0, [r4, #2268]
+	add	r0, r2, r0, asl #2
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #8]
+	strh	r0, [r10, #-8]	@ movhi
+	uxth	r0, r0
+	mul	r1, r6, r3
+	mov	r0, r0, asl #4
+	bl	__aeabi_idiv
+	add	r2, fp, #2976
+	ldr	r3, [sp, #20]
+	ldr	ip, [sp, #16]
+	strh	r0, [r8]	@ movhi
+	mul	r1, r6, r3
+	mov	r0, ip
+	str	r2, [sp, #8]
+	sub	r1, r1, #1
+	bl	__aeabi_uidiv
+	add	r1, r7, r7, asl #1
+	mov	r7, r7, lsr #4
+	movw	lr, #3528
+	cmp	r7, #79
+	mov	r1, r1, asr #2
+	movw	ip, #3524
+	ldr	r2, [sp, #8]
+	add	r0, r0, #8
+	ldr	r3, [sp, #4]
+	strh	r0, [r2]	@ movhi
+	movw	r0, #3526
+	strh	r1, [r4, r0]	@ movhi
+	movw	r1, #2974
+	strh	r7, [r4, r1]	@ movhi
+	mov	r6, r2
+	movls	r2, #80
+	strlsh	r2, [fp, r1]	@ movhi
+	ldr	r2, .L3561+4
+	mov	r1, #2000
+	cmp	r3, #2
+	strh	r1, [r4, lr]	@ movhi
+	mov	r1, #50
+	strh	r1, [r4, ip]	@ movhi
+	mov	r1, #256
+	strh	r1, [r8, #-4]	@ movhi
+	mov	r1, #48
+	strh	r1, [r8, #-2]	@ movhi
+	add	r1, r2, #572
+	mov	r0, #32
+	strh	r0, [r1]	@ movhi
+	beq	.L3492
+	ldrb	r3, [r2, #2944]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3493
+.L3492:
+	movw	r2, #3524
+	mov	r0, #150
+	strh	r0, [r4, r2]	@ movhi
+	mov	r0, #12
+	strh	r0, [r1]	@ movhi
+	mov	r2, #64
+	ldrb	r1, [r4]	@ zero_extendqisi2
+	ldr	r3, .L3561+4
+	cmp	r1, #0
+	strh	r2, [r8, #-2]	@ movhi
+	add	r2, r3, #572
+	bne	.L3495
+	mov	r1, #4
+	strh	r1, [r2]	@ movhi
+	movw	r2, #3528
+	mov	r1, #600
+	strh	r1, [r3, r2]	@ movhi
+	mov	r2, #128
+	ldr	r3, .L3561+32
+	strh	r2, [r3, #-4]	@ movhi
+	b	.L3495
+.L3493:
+	ldrb	r3, [r2, #684]	@ zero_extendqisi2
+	cmp	r3, #0
+	strneh	r0, [r2, ip]	@ movhi
+	movne	r3, #1200
+	strneh	r3, [r2, lr]	@ movhi
+	ldrne	r3, .L3561+32
+	strneh	r0, [r3, #-2]	@ movhi
+.L3495:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3497
+	ldr	r0, .L3561+40
+	mov	r1, r9
+	bl	printk
+.L3497:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3498
+	ldr	r0, .L3561+44
+	ldr	r1, [r4, #2264]
+	bl	printk
+.L3498:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3499
+	ldr	r0, .L3561+48
+	ldr	r1, [r4, #2268]
+	bl	printk
+.L3499:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3500
+	ldr	r3, [sp, #12]
+	ldr	r0, .L3561+52
+	ldr	r1, [r3, #-2492]
+	bl	printk
+.L3500:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3501
+	ldr	r0, .L3561+56
+	ldrh	r1, [r10, #-8]
+	bl	printk
+.L3501:
+	ldr	r3, [r5]
+	ldr	r7, .L3561+60
+	tst	r3, #4096
+	beq	.L3502
+	ldr	r0, .L3561+64
+	ldrh	r1, [r7, #-4]
+	bl	printk
+.L3502:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3503
+	ldr	r0, .L3561+68
+	ldrh	r1, [r8]
+	bl	printk
+.L3503:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3504
+	movw	r3, #2974
+	ldr	r0, .L3561+72
+	ldrh	r1, [r4, r3]
+	bl	printk
+.L3504:
+	ldr	r3, [r5]
+	tst	r3, #4096
+	beq	.L3505
+	ldr	r0, .L3561+76
+	ldrh	r1, [r6]
+	bl	printk
+.L3505:
+	ldr	r8, .L3561+80
+	bl	zbuf_init
+	mov	r0, #6
+	ldr	r6, .L3561+84
+	ldrh	r3, [r8]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	str	r0, [r4, #524]
+	ldrh	r0, [r6]
+	mul	r0, r3, r0
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldrh	r1, [r6]
+	ldr	r2, .L3561+88
+	mul	r1, r3, r1
+	str	r2, [r4, #3512]
+	add	r3, r2, r1, asl #3
+	str	r3, [r4, #576]
+	str	r0, [r4, #3516]
+	ldrh	r0, [r8]
+	mov	r0, r0, lsr #1
+	add	r1, r0, r1, asl #1
+	ldr	r0, [r5]
+	tst	r0, #4096
+	add	r1, r2, r1, asl #2
+	str	r1, [r4, #580]
+	beq	.L3506
+	ldr	r0, .L3561+92
+	bl	printk
+.L3506:
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldrh	r6, [r6]
+	ldrh	r2, [r8]
+	ldrh	r10, [r10, #-8]
+	mul	r6, r3, r6
+	ldr	r3, [r5]
+	mov	r10, r10, asl #2
+	tst	r3, #4096
+	add	r10, r10, r2, asl #2
+	add	r10, r10, #704
+	add	r6, r2, r6, asl #2
+	mov	r6, r6, asl #1
+	add	r6, r6, #632
+	beq	.L3507
+	ldr	r0, .L3561+96
+	mov	r1, r6
+	mov	r2, r10
+	ldrh	r3, [r7, #-4]
+	bl	printk
+.L3507:
+	ldrh	r3, [r7, #-4]
+	cmp	r10, r3
+	cmpls	r6, r3
+	movhi	r10, #1
+	movls	r10, #0
+	bls	.L3508
+.L3557:
+	b	.L3557
+.L3508:
+	bl	sblk_init
+	bl	ftl_info_blk_init
+	cmn	r0, #1
+	beq	.L3510
+	bl	ftl_ext_info_init
+	bl	gc_init
+	mov	r0, #1
+	bl	pm_init
+	bl	lpa_rebuild_hash
+	ldr	r0, [r4, #580]
+	mov	r1, r10
+	add	r0, r0, #16
+	bl	ftl_open_sblk_recovery
+	ldr	r1, [r4, #580]
+	add	r0, r1, #48
+	add	r1, r1, #16
+	bl	ftl_open_sblk_recovery
+	ldr	r2, [r4, #2288]
+	ldr	r0, [r4, #580]
+	ldr	r3, [r2, #8]
+	add	r0, r0, #16
+	add	r3, r3, #16
+	str	r3, [r2, #8]
+	bl	ftl_info_data_recovery
+	ldr	r0, [r4, #580]
+	add	r0, r0, #48
+	bl	ftl_info_data_recovery
+	ldr	r0, [r4, #580]
+	add	r0, r0, #80
+	bl	ftl_info_data_recovery
+	bl	gc_recovery
+	bl	pm_flush
+	mov	r0, #1
+	bl	ftl_total_vpn_update
+	ldr	r3, .L3561+100
+	ldrb	r3, [r3, #-2855]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrne	r3, .L3561+4
+	ldrne	r2, [r3, #2288]
+	ldrne	r3, [r2, #68]
+	addne	r3, r3, #1
+	strne	r3, [r2, #68]
+	bl	ftl_ext_info_flush
+	mov	r0, #0
+	bl	ftl_info_flush
+	bl	print_ftl_debug_info
+	mov	r0, #0
+.L3510:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3562:
+	.align	2
+.L3561:
+	.word	.LANCHOR5
+	.word	.LANCHOR0
+	.word	.LANCHOR3
+	.word	.LC2
+	.word	.LC1
+	.word	.LANCHOR2
+	.word	.LANCHOR0+2928
+	.word	1892352
+	.word	.LANCHOR3-3296
+	.word	.LANCHOR5-2480
+	.word	.LC237
+	.word	.LC238
+	.word	.LC239
+	.word	.LC240
+	.word	.LC241
+	.word	.LANCHOR5-2496
+	.word	.LC242
+	.word	.LC243
+	.word	.LC244
+	.word	.LC245
+	.word	.LANCHOR0+564
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR4-2792
+	.word	.LC246
+	.word	.LC247
+	.word	.LANCHOR4
+	.fnend
+	.size	zftl_init, .-zftl_init
+	.align	2
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r0, #68
+	ldr	r3, .L3579
+	mov	r7, #0
+	ldr	r4, .L3579+4
+	ldr	r5, .L3579+8
+	ldr	r3, [r3]
+	str	r7, [r4, #-3284]
+	strb	r7, [r5, #-2486]
+	str	r3, [r4, #-3288]
+	bl	ftl_malloc
+	cmp	r0, r7
+	str	r0, [r4, #-3280]
+	bne	.L3564
+.L3566:
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3564:
+	mov	r0, #2048
+	bl	ftl_malloc
+	mov	r1, r5
+	str	r7, [r1, #-2480]!
+	str	r7, [r4, #-3276]
+	str	r0, [r5, #-2484]
+	ldr	r0, .L3579+12
+	bl	rknand_get_reg_addr
+	ldr	r3, [r4, #-3276]
+	cmp	r3, #0
+	beq	.L3566
+	bl	rk_nandc_irq_init
+	mov	r1, r7
+	mov	r2, r7
+	mov	r3, #2048
+	ldr	r0, [r5, #-2484]
+	bl	flash_sram_load_store
+	bl	rknand_flash_cs_init
+	ldr	r3, [r4, #-3280]
+	ldr	r2, .L3579+16
+	ldr	r0, [r4, #-3276]
+	str	r2, [r3, #40]
+	ldr	r2, .L3579+20
+	str	r2, [r3, #32]
+	ldr	r2, .L3579+24
+	str	r2, [r3, #44]
+	ldr	r2, .L3579+28
+	str	r2, [r3, #48]
+	ldr	r2, .L3579+32
+	str	r2, [r3, #36]
+	ldr	r2, .L3579+36
+	str	r2, [r3, #56]
+	ldr	r2, .L3579+40
+	str	r2, [r3, #20]
+	ldr	r2, .L3579+44
+	str	r2, [r3, #24]
+	ldr	r2, .L3579+48
+	str	r2, [r3, #12]
+	ldr	r2, .L3579+52
+	str	r2, [r3, #16]
+	ldr	r2, .L3579+56
+	str	r2, [r3, #4]
+	ldr	r2, .L3579+60
+	str	r2, [r3, #8]
+	ldr	r2, .L3579+64
+	str	r2, [r3, #60]
+	ldr	r2, .L3579+68
+	str	r2, [r3, #64]
+	ldr	r2, .L3579+72
+	str	r2, [r3, #52]
+	ldr	r2, .L3579+76
+	str	r2, [r3, #28]
+	bl	nand_flash_init
+	subs	r7, r0, #0
+	bne	.L3567
+	bl	zftl_init
+	mov	r4, r0
+	bl	zftl_proc_debug_init
+	mov	r3, #1
+	strb	r3, [r5, #-2486]
+	b	.L3568
+.L3567:
+	ldr	r3, [r4, #-3280]
+	mov	r6, r4
+	ldr	r2, .L3579+80
+	ldr	r0, [r4, #-3276]
+	ldr	r5, .L3579+84
+	str	r2, [r3, #40]
+	ldr	r2, .L3579+88
+	str	r2, [r3, #32]
+	ldr	r2, .L3579+92
+	str	r2, [r3, #44]
+	ldr	r2, .L3579+96
+	str	r2, [r3, #48]
+	ldr	r2, .L3579+100
+	str	r2, [r3, #36]
+	ldr	r2, .L3579+104
+	str	r2, [r3, #56]
+	ldr	r2, .L3579+108
+	str	r2, [r3, #20]
+	ldr	r2, .L3579+112
+	str	r2, [r3, #24]
+	ldr	r2, .L3579+116
+	str	r2, [r3, #12]
+	ldr	r2, .L3579+120
+	str	r2, [r3, #16]
+	ldr	r2, .L3579+124
+	str	r2, [r3, #4]
+	ldr	r2, .L3579+128
+	str	r2, [r3, #8]
+	ldr	r2, .L3579+132
+	str	r2, [r3, #60]
+	ldr	r2, .L3579+136
+	str	r2, [r3, #64]
+	ldr	r2, .L3579+140
+	str	r2, [r3, #52]
+	ldr	r2, .L3579+144
+	str	r2, [r3, #28]
+	bl	FlashInit
+	cmn	r7, #2
+	mov	r4, r0
+	bne	.L3569
+	ldr	r1, .L3579+148
+	mov	r2, #32
+	add	r0, r5, #4
+	bl	ftl_memcpy
+	ldrb	r0, [r5, #22]	@ zero_extendqisi2
+	bl	flash_lsb_page_tbl_build
+	ldrh	r3, [r5, #14]
+	strh	r3, [r5, #30]	@ movhi
+.L3569:
+	ldr	r3, .L3579+152
+	ldr	r2, [r3]
+	ldr	r3, .L3579+156
+	cmp	r2, r3
+	ldr	r2, .L3579+160
+	bne	.L3570
+	ldr	r3, .L3579+164
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L3571
+.L3570:
+	mov	r3, #0
+	strb	r3, [r2, #590]
+	strb	r3, [r2]
+.L3571:
+	ldr	r1, .L3579+168
+	mov	r0, #1
+	ldrh	ip, [r5, #14]
+	mov	r3, #0
+	str	r3, [r6, #-3252]
+	ldrb	r1, [r1]	@ zero_extendqisi2
+	strb	r1, [r2, #588]
+	ldr	r1, .L3579+172
+	ldrb	r1, [r1]	@ zero_extendqisi2
+	strb	r1, [r2, #660]
+.L3572:
+	cmp	r0, ip
+	uxth	r1, r3
+	add	r3, r3, #1
+	movls	r0, r0, asl #1
+	bls	.L3572
+.L3578:
+	ldr	r3, .L3579+176
+	sub	r1, r1, #1
+	strh	r1, [r3]	@ movhi
+	mov	r3, #0
+	cmp	r4, r3
+	strb	r3, [r2, #623]
+	bne	.L3568
+	bl	FtlInit
+	mov	r4, r0
+.L3568:
+	mov	r1, r4
+	ldr	r0, .L3579+180
+	bl	printk
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L3580:
+	.align	2
+.L3579:
+	.word	jiffies
+	.word	.LANCHOR3
+	.word	.LANCHOR5
+	.word	.LANCHOR3-3276
+	.word	zftl_deinit
+	.word	zftl_cache_flush
+	.word	zftl_flash_suspend
+	.word	zftl_flash_resume
+	.word	zftl_get_density
+	.word	zftl_read_flash_info
+	.word	zftl_read
+	.word	zftl_write
+	.word	zftl_sys_read
+	.word	zftl_sys_write
+	.word	zftl_vendor_read
+	.word	zftl_vendor_write
+	.word	zftl_nandc_get_irq_status
+	.word	zftl_proc_ftl_read
+	.word	zftl_do_gc
+	.word	zftl_discard
+	.word	ftl_deinit
+	.word	.LANCHOR2
+	.word	ftl_cache_flush
+	.word	ftl_flash_suspend
+	.word	ftl_flash_resume
+	.word	ftl_get_density
+	.word	ftl_read_flash_info
+	.word	ftl_read
+	.word	ftl_write
+	.word	ftl_sys_read
+	.word	ftl_sys_write
+	.word	ftl_vendor_read
+	.word	ftl_vendor_write
+	.word	ftl_nandc_get_irq_status
+	.word	ftl_proc_ftl_read
+	.word	ftl_do_gc
+	.word	ftl_discard
+	.word	gNandParaInfo
+	.word	g_nandc_version_data
+	.word	1446522928
+	.word	.LANCHOR0
+	.word	gFlashSlcMode
+	.word	gNandFlashIDBEccBits
+	.word	gNandFlashEccBits
+	.word	.LANCHOR0+2928
+	.word	.LC248
+	.fnend
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	2
+	.global	gc_update_l2p_map_new
+	.type	gc_update_l2p_map_new, %function
+gc_update_l2p_map_new:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r6, .L3618
+	ldr	r5, .L3618+4
+	ldr	r3, [r6]
+	ldr	r4, [r5, #580]
+	str	r3, [sp, #28]
+	movw	r3, #2962
+	ldrh	r3, [r5, r3]
+	ldrb	r2, [r4, #89]	@ zero_extendqisi2
+	mul	r3, r2, r3
+	str	r3, [sp]
+	bl	timer_get_time
+	ldr	r3, .L3618+8
+	ldr	r3, [r3]
+	tst	r3, #256
+	str	r6, [sp, #12]
+	beq	.L3582
+	ldr	r0, .L3618+12
+	ldrh	r1, [r4, #80]
+	bl	printk
+.L3582:
+	ldrh	r3, [r4, #80]
+	mov	r6, #0
+	ldr	r2, [r5, #576]
+	mov	r5, r6
+	ldr	r8, .L3618+16
+	mov	r3, r3, asl #1
+	ldr	r1, [sp]
+	sub	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+.L3583:
+	ldr	r3, [sp]
+	cmp	r5, r3
+	beq	.L3617
+	ldr	r3, [r8, #-3316]
+	mov	r7, r5, asl #2
+	ldr	r9, [r3, r5, asl #2]
+	cmn	r9, #1
+	beq	.L3584
+	ldr	r3, .L3618+4
+	mov	r0, r9
+	ldrb	r1, [r3, #2260]	@ zero_extendqisi2
+	mov	r1, r1, asl #7
+	bl	__aeabi_uidiv
+	uxth	r3, r0
+	str	r3, [sp, #8]
+	ldr	r3, .L3618+8
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L3585
+	ldr	r0, .L3618+20
+	mov	r2, r9
+	ldr	r1, [sp, #8]
+	mov	r3, r5
+	bl	printk
+.L3585:
+	ldr	r10, .L3618+4
+	str	r5, [sp, #4]
+.L3591:
+	ldr	r3, [r8, #-3316]
+	ldr	r9, [r3, r7]
+	cmn	r9, #1
+	beq	.L3586
+	ldrb	r1, [r10, #2260]	@ zero_extendqisi2
+	mov	r0, r9
+	mov	r1, r1, asl #7
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #8]
+	uxth	r0, r0
+	cmp	r0, r3
+	bne	.L3586
+	ldr	r3, [r8, #-3312]
+	mov	r0, r9
+	ldr	fp, [r3, r7]
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #24]
+	bne	.L3587
+	mov	r0, r9
+	add	r1, sp, #24
+	mov	r2, #0
+	bl	pm_log2phys
+.L3587:
+	ldr	r3, [sp, #24]
+	cmp	r3, fp
+	bne	.L3588
+	ldr	r3, .L3618+16
+	add	r1, sp, #32
+	mov	r2, #1
+	mov	r0, r9
+	add	r6, r6, #1
+	ldr	r3, [r3, #-3308]
+	ldr	r3, [r3, r7]
+	str	r3, [r1, #-12]!
+	bl	pm_log2phys
+	ldr	r3, .L3618+24
+	ldrb	r1, [r10, #2930]	@ zero_extendqisi2
+	ldrh	r0, [r3]
+	ldrb	r3, [r10, #676]	@ zero_extendqisi2
+	mov	fp, fp, lsr r0
+	rsb	r3, r3, #24
+	rsb	r3, r0, r3
+	mvn	r0, #0
+	bic	r0, fp, r0, asl r3
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	b	.L3616
+.L3588:
+	ldr	r2, .L3618+8
+	ldr	r2, [r2]
+	tst	r2, #256
+	beq	.L3590
+	ldr	r0, .L3618+28
+	mov	r1, r9
+	mov	r2, fp
+	bl	printk
+.L3590:
+	ldrh	r0, [r4, #80]
+.L3616:
+	bl	ftl_vpn_decrement
+	ldr	r3, [r8, #-3316]
+	mvn	r2, #0
+	str	r2, [r3, r7]
+	bl	timer_get_time
+.L3586:
+	ldr	r3, [sp, #4]
+	add	r7, r7, #4
+	ldr	r2, [sp]
+	add	r3, r3, #1
+	str	r3, [sp, #4]
+	cmp	r3, r2
+	bne	.L3591
+.L3584:
+	add	r5, r5, #1
+	b	.L3583
+.L3617:
+	ldr	r3, .L3618+8
+	ldr	r5, .L3618+4
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L3593
+	ldrh	r3, [r4, #80]
+	ldr	r1, [r5, #580]
+	ldr	r2, [r5, #576]
+	mov	r3, r3, asl #1
+	ldr	r0, .L3618+32
+	ldrh	r1, [r1, #80]
+	ldrh	r2, [r2, r3]
+	mov	r3, r6
+	bl	printk
+.L3593:
+	ldrh	r3, [r4, #80]
+	ldr	r2, [r5, #576]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, r6
+	beq	.L3594
+	ldr	r1, .L3618+36
+	movw	r2, #749
+	ldr	r0, .L3618+40
+	bl	printk
+	bl	dump_stack
+.L3594:
+	ldrh	r3, [r4, #80]
+	ldr	r2, [r5, #576]
+	mov	r3, r3, asl #1
+	strh	r6, [r2, r3]	@ movhi
+	ldrh	r0, [r4, #80]
+	bl	zftl_insert_data_list
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #28]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3595
+	bl	__stack_chk_fail
+.L3595:
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3619:
+	.align	2
+.L3618:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC249
+	.word	.LANCHOR3
+	.word	.LC250
+	.word	.LANCHOR0+2928
+	.word	.LC251
+	.word	.LC252
+	.word	.LANCHOR1+1992
+	.word	.LC0
+	.fnend
+	.size	gc_update_l2p_map_new, .-gc_update_l2p_map_new
+	.align	2
+	.global	gc_scan_src_blk_one_page
+	.type	gc_scan_src_blk_one_page, %function
+gc_scan_src_blk_one_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, .L3651
+	mov	r1, #0
+	ldr	r5, .L3651+4
+	mov	lr, r1
+	ldr	r4, .L3651+8
+	movw	r0, #65535
+	ldr	r3, [r6]
+	ldrb	ip, [r5, #2964]	@ zero_extendqisi2
+	str	r3, [sp, #12]
+	ldrb	r3, [r5, #2316]	@ zero_extendqisi2
+	add	r2, r4, r3, asl #1
+	ldrh	r7, [r2, #36]
+	ldrh	r2, [r4, #2]
+.L3621:
+	cmp	r7, r0
+	bne	.L3649
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, ip
+	addeq	r2, r2, #1
+	moveq	r3, #0
+	moveq	lr, #1
+	add	r1, r4, r3, asl #1
+	uxtheq	r2, r2
+	ldrh	r7, [r1, #36]
+	mov	r1, #1
+	b	.L3621
+.L3649:
+	mov	r0, #1
+	cmp	lr, #0
+	strneh	r2, [r4, #2]	@ movhi
+	cmp	r1, #0
+	strneb	r3, [r5, #2316]
+	bl	buf_alloc
+	ldr	r8, .L3651+4
+	mov	fp, #1
+	ldr	r9, .L3651+12
+	mov	r10, r0
+.L3626:
+	ldrb	r1, [r5, #2318]	@ zero_extendqisi2
+	ldr	r2, .L3651+4
+	cmp	fp, r1
+	bgt	.L3650
+	ldrh	r3, [r9]
+	cmp	r1, #2
+	mul	r3, r3, r7
+	beq	.L3627
+	cmp	r1, #3
+	ldrneh	r2, [r4, #2]
+	addne	r3, r3, r2
+	bne	.L3648
+	ldrb	r2, [r8, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldreqh	r2, [r4, #2]
+	addeq	r3, r3, r2
+	orreq	r3, r3, fp, asl #24
+	beq	.L3648
+.L3627:
+	ldrh	r2, [r4, #2]
+	add	r3, r3, r2, asl #1
+	ldrb	r2, [r5, #2937]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	add	r3, r3, fp
+	orr	r3, r3, r2, asl #24
+.L3648:
+	str	r3, [r10, #24]
+	mov	r0, r10
+	mov	r1, #1
+	bl	sblk_read_page
+	ldr	r3, [r10, #36]
+	cmp	r3, #512
+	cmnne	r3, #1
+	beq	.L3632
+	ldr	r3, [r10, #12]
+	ldr	r3, [r3, #4]
+	mov	r0, r3
+	str	r3, [sp, #4]
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #8]
+	ldr	r3, [sp, #4]
+	bne	.L3633
+	ldr	r2, [r5, #2268]
+	cmp	r3, r2
+	bcs	.L3633
+	mov	r0, r3
+	add	r1, sp, #8
+	mov	r2, #0
+	bl	pm_log2phys
+.L3633:
+	ldr	r3, [r10, #24]
+	ldr	r2, [sp, #8]
+	cmp	r3, r2
+	ldreqh	r1, [r4, #20]
+	ldreq	r2, [r5, #2932]
+	streq	r3, [r2, r1, asl #2]
+	ldreqh	r3, [r4, #20]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #20]	@ movhi
+.L3632:
+	ldrh	r3, [r4, #22]
+	add	fp, fp, #1
+	add	r3, r3, #1
+	strh	r3, [r4, #22]	@ movhi
+	b	.L3626
+.L3650:
+	mov	r0, r10
+	str	r2, [sp, #4]
+	bl	zbuf_free
+	ldr	r2, [sp, #4]
+	ldrb	r3, [r2, #2316]	@ zero_extendqisi2
+	ldrb	r1, [r2, #2964]	@ zero_extendqisi2
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r2, #2316]
+	cmp	r1, r3
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r2, #2316]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L3637
+	bl	__stack_chk_fail
+.L3637:
+	add	sp, sp, #20
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3652:
+	.align	2
+.L3651:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR0+2994
+	.fnend
+	.size	gc_scan_src_blk_one_page, .-gc_scan_src_blk_one_page
+	.align	2
+	.global	gc_scan_src_blk
+	.type	gc_scan_src_blk, %function
+gc_scan_src_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3689
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r2, [r3]
+	ldr	r4, .L3689+4
+	str	r3, [sp, #8]
+	str	r2, [sp, #20]
+	movw	r2, #2312
+	ldrh	r1, [r4, r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L3654
+	ldr	r1, .L3689+8
+	movw	r2, #1236
+	ldr	r0, .L3689+12
+	bl	printk
+	bl	dump_stack
+.L3654:
+	movw	r3, #2312
+	ldrh	r1, [r4, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	moveq	r0, #0
+	beq	.L3655
+	ldr	r3, .L3689+16
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L3656
+	ldr	r3, .L3689+4
+	ldr	r0, .L3689+20
+	ldr	r2, [r3, #576]
+	mov	r3, r1, asl #1
+	ldrh	r2, [r2, r3]
+	bl	printk
+.L3656:
+	movw	r7, #2312
+	bl	timer_get_time
+	ldrh	r0, [r4, r7]
+	ldr	r1, .L3689+24
+	bl	ftl_get_blk_list_in_sblk
+	ldr	r6, .L3689+4
+	ldr	r5, .L3689+28
+	uxtb	r0, r0
+	strb	r0, [r4, #2317]
+	cmp	r0, #0
+	mvneq	r3, #0
+	streqh	r3, [r6, r7]	@ movhi
+	beq	.L3655
+	ldrh	r3, [r6, r7]
+	ldr	r2, [r6, #568]
+	add	r2, r2, r3, asl #2
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	tst	r2, #192
+	and	r1, r2, #224
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r1, #224
+	orreq	r2, r2, #1
+	cmp	r2, #0
+	bne	.L3658
+	ldr	r2, [r6, #580]
+	ldrh	ip, [r2, #16]
+	cmp	ip, r3
+	beq	.L3658
+	ldrh	ip, [r2, #48]
+	cmp	ip, r3
+	beq	.L3658
+	ldrh	r2, [r2, #80]
+	cmp	r2, r3
+	bne	.L3659
+.L3658:
+	cmp	r1, #0
+	bne	.L3660
+	ldr	r2, [r4, #576]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L3661
+	ldr	r1, .L3689+8
+	movw	r2, #1256
+	ldr	r0, .L3689+12
+	bl	printk
+	bl	dump_stack
+.L3661:
+	movw	r3, #2312
+	ldr	r2, [r4, #576]
+	ldrh	r3, [r4, r3]
+	mov	r1, #0
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+.L3660:
+	movw	r3, #2312
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r4, r3]	@ movhi
+	strh	r0, [r5, #20]	@ movhi
+	b	.L3655
+.L3659:
+	add	r0, r5, r0, asl #1
+	movw	r3, #65535
+	ldrh	r6, [r0, #34]
+	cmp	r6, r3
+	bne	.L3662
+	ldr	r1, .L3689+8
+	mov	r2, #1264
+	ldr	r0, .L3689+12
+	bl	printk
+	bl	dump_stack
+.L3662:
+	movw	r3, #2994
+	ldr	r2, .L3689+4
+	ldrh	r3, [r4, r3]
+	add	r8, r2, #2960
+	mul	r6, r3, r6
+	movw	r3, #2312
+	ldrh	r1, [r4, r3]
+	ldrh	fp, [r8]
+	ldr	r3, [r4, #568]
+	sub	fp, fp, #1
+	add	r3, r3, r1, asl #2
+	uxth	r7, fp
+	ldrb	fp, [r3, #2]	@ zero_extendqisi2
+	and	r9, fp, #224
+	cmp	r9, #160
+	movne	fp, #1
+	bne	.L3663
+	ldrb	r3, [r2, #2937]	@ zero_extendqisi2
+	cmp	r3, #2
+	uxth	fp, r3
+	orr	r6, r6, r3, asl #24
+	movweq	r3, #2962
+	ldreqh	r7, [r2, r3]
+	ldrb	r3, [r4, #684]	@ zero_extendqisi2
+	subeq	r7, r7, #1
+	uxtheq	r7, r7
+	cmp	r3, #0
+	ldrne	r2, .L3689+4
+	movwne	r3, #2962
+	ldrneh	r7, [r2, r3]
+	subne	r7, r7, #1
+	uxthne	r7, r7
+.L3663:
+	mov	r0, #1
+	mov	r10, #0
+	strb	fp, [r4, #2318]
+	orr	r6, r7, r6
+	strh	r10, [r5, #2]	@ movhi
+	strb	r10, [r4, #2316]
+	strh	r10, [r5, #22]	@ movhi
+	strh	r10, [r5, #24]	@ movhi
+	bl	buf_alloc
+	mov	r1, #1
+	ldr	r9, .L3689+4
+	str	r6, [r0, #24]
+	mov	r7, r0
+	bl	sblk_read_page
+	movw	r3, #2962
+	ldrh	r2, [r4, r3]
+	mov	r1, #255
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldr	r0, [r4, #2932]
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r6, [r7, #36]
+	strh	r10, [r5, #20]	@ movhi
+	cmn	r6, #1
+	cmpne	r6, #512
+	moveq	r6, #1
+	movne	r6, #0
+	beq	.L3687
+	ldr	r3, [r7, #12]
+	ldr	r2, [r3]
+	ldr	r3, .L3689+32
+	cmp	r2, r3
+	beq	.L3666
+	ldr	r1, .L3689+8
+	movw	r2, #1299
+	ldr	r0, .L3689+12
+	bl	printk
+	bl	dump_stack
+.L3687:
+	mov	r0, r7
+	bl	zbuf_free
+	mvn	r0, #0
+	b	.L3655
+.L3666:
+	ldrh	r3, [r8]
+	ldrb	r2, [r9, #2964]	@ zero_extendqisi2
+	ldr	r8, [r7, #4]
+	ldr	r10, .L3689+28
+	smulbb	r3, r2, r3
+	sub	r8, r8, #4
+	smulbb	r3, r3, fp
+	mov	fp, #1
+	uxth	r3, r3
+	str	r3, [sp, #4]
+.L3667:
+	ldr	r3, [sp, #4]
+	cmp	r6, r3
+	bge	.L3688
+	ldr	r0, [r8, #4]!
+	cmn	r0, #1
+	beq	.L3669
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #16]
+	bne	.L3670
+	ldr	r0, [r8]
+	add	r1, sp, #16
+	mov	r2, #0
+	bl	pm_log2phys
+.L3670:
+	ldr	r3, .L3689+36
+	ldr	r2, [sp, #16]
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	ldrh	r0, [r3]
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	rsb	r3, r3, #24
+	rsb	r3, r0, r3
+	mov	r3, fp, asl r3
+	sub	r3, r3, #1
+	and	r0, r3, r2, lsr r0
+	bl	__aeabi_uidiv
+	ldrh	r3, [r5]
+	cmp	r0, r3
+	ldr	r2, [sp, #12]
+	ldreq	r3, [r9, #2932]
+	ldreqh	r1, [r10, #20]
+	streq	r2, [r3, r1, asl #2]
+	ldreqh	r3, [r10, #20]
+	addeq	r3, r3, #1
+	streqh	r3, [r10, #20]	@ movhi
+.L3669:
+	bl	timer_get_time
+	add	r6, r6, #1
+	b	.L3667
+.L3688:
+	mov	r0, r7
+	bl	zbuf_free
+	movw	r3, #2312
+	ldrh	r1, [r4, r3]
+	ldr	r2, [r4, #576]
+	mov	r3, r1, asl #1
+	ldrh	r2, [r2, r3]
+	ldrh	r3, [r5, #20]
+	cmp	r2, r3
+	beq	.L3673
+	ldr	r0, .L3689+40
+	bl	printk
+.L3673:
+	movw	r3, #2312
+	ldrh	r1, [r5, #20]
+	ldrh	r3, [r4, r3]
+	ldr	r2, [r4, #576]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	mov	r3, #0
+	ldrh	r0, [r5, #20]
+	strh	r3, [r5, #24]	@ movhi
+.L3655:
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3674
+	bl	__stack_chk_fail
+.L3674:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3690:
+	.align	2
+.L3689:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2016
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC253
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2312
+	.word	-178307901
+	.word	.LANCHOR0+2928
+	.word	.LC254
+	.fnend
+	.size	gc_scan_src_blk, .-gc_scan_src_blk
+	.align	2
+	.global	gc_scan_static_data
+	.type	gc_scan_static_data, %function
+gc_scan_static_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	ldr	r6, .L3709
+	ldr	r4, .L3709+4
+	ldr	r3, [r6]
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #580]
+	ldr	r2, [r3, #544]
+	cmn	r2, #1
+	beq	.L3692
+	mov	r5, #11
+	mov	r7, r4
+.L3693:
+	ldr	r3, [r4, #580]
+	mov	r1, sp
+	mov	r2, #0
+	ldr	r0, [r3, #544]
+	bl	pm_log2phys
+	ldr	r3, [sp]
+	cmn	r3, #1
+	beq	.L3694
+	mov	r0, #1
+	bl	buf_alloc
+	mov	r1, #1
+	ldr	r3, [sp]
+	mov	r8, r0
+	str	r3, [r0, #24]
+	bl	sblk_read_page
+	ldr	r3, [r8, #36]
+	cmp	r3, #256
+	bne	.L3695
+	ldr	r3, .L3709+8
+	mov	r9, #1
+	ldr	r0, [sp]
+	ldrb	r1, [r7, #2930]	@ zero_extendqisi2
+	ldrh	r2, [r3]
+	ldrb	r3, [r7, #676]	@ zero_extendqisi2
+	rsb	r3, r3, #24
+	rsb	r3, r2, r3
+	mov	r3, r9, asl r3
+	sub	r3, r3, #1
+	and	r0, r3, r0, lsr r2
+	bl	__aeabi_uidiv
+	mov	r1, r9
+	mov	r2, #0
+	uxth	r0, r0
+	bl	gc_add_sblk
+.L3695:
+	ldr	r2, [r8, #12]
+	ldr	r3, [r4, #580]
+	ldr	r2, [r2, #4]
+	ldr	r3, [r3, #544]
+	cmp	r2, r3
+	beq	.L3696
+	ldr	r1, .L3709+12
+	movw	r2, #1738
+	ldr	r0, .L3709+16
+	bl	printk
+	bl	dump_stack
+.L3696:
+	mov	r0, r8
+	bl	zbuf_free
+.L3694:
+	ldr	r3, [r4, #580]
+	ldr	r1, [r4, #2268]
+	ldr	r2, [r3, #544]
+	add	r2, r2, #1
+	str	r2, [r3, #544]
+	cmp	r2, r1
+	bcc	.L3697
+	mvn	r2, #0
+	str	r2, [r3, #544]
+	ldr	r2, [r3, #548]
+	add	r2, r2, #1
+	str	r2, [r3, #548]
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	r0, #0
+	bl	ftl_info_flush
+	b	.L3691
+.L3697:
+	ldr	r3, [sp]
+	cmn	r3, #1
+	bne	.L3691
+	sub	r5, r5, #1
+	uxth	r5, r5
+	cmp	r5, #0
+	bne	.L3693
+	b	.L3691
+.L3692:
+	ldr	r2, [r3, #536]
+	ldr	r1, [r3, #12]
+	add	r2, r2, #12910592
+	add	r2, r2, #49408
+	cmp	r1, r2
+	bhi	.L3702
+	ldr	r0, [r4, #2288]
+	ldr	r2, [r3, #540]
+	ldr	r0, [r0, #44]
+	add	r2, r2, #4992
+	add	r2, r2, #8
+	cmp	r0, r2
+	bls	.L3691
+.L3702:
+	ldr	r2, [r4, #2288]
+	ldr	r2, [r2, #44]
+	str	r1, [r3, #536]
+	str	r2, [r3, #540]
+	mov	r2, #0
+	str	r2, [r3, #544]
+.L3691:
+	ldr	r2, [sp, #4]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L3703
+	bl	__stack_chk_fail
+.L3703:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L3710:
+	.align	2
+.L3709:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR1+2032
+	.word	.LC0
+	.fnend
+	.size	gc_scan_static_data, .-gc_scan_static_data
+	.align	2
+	.global	gc_block_vpn_scan
+	.type	gc_block_vpn_scan, %function
+gc_block_vpn_scan:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r3, .L3750
+	ldr	r4, .L3750+4
+	ldr	r2, [r3]
+	add	r5, r4, #564
+	ldr	r1, [r4, #580]
+	str	r3, [sp, #12]
+	str	r2, [sp, #36]
+	ldr	r1, [r1, #608]
+	ldrh	r2, [r5]
+	cmp	r1, r2
+	bcs	.L3711
+	bl	timer_get_time
+	ldr	r6, [r4, #580]
+	ldr	r3, [r6, #604]
+	add	r3, r3, #29952
+	add	r3, r3, #48
+	cmp	r0, r3
+	bls	.L3711
+	bl	timer_get_time
+	ldr	r3, [r4, #580]
+	ldrh	r1, [r5]
+	str	r0, [r6, #604]
+	ldr	r2, [r3, #600]
+	cmp	r2, r1
+	bcs	.L3715
+	ldr	r1, [r4, #2288]
+	ldrh	r1, [r1, #134]
+	cmp	r2, r1
+	bcs	.L3716
+.L3715:
+	ldr	r2, [r4, #2288]
+	ldrh	r2, [r2, #134]
+	str	r2, [r3, #600]
+.L3716:
+	ldr	r5, [r3, #600]
+	movw	r3, #65535
+	uxth	r5, r5
+	cmp	r5, r3
+	bne	.L3717
+	ldr	r1, .L3750+8
+	movw	r2, #2035
+	ldr	r0, .L3750+12
+	bl	printk
+	bl	dump_stack
+.L3717:
+	ldr	r3, [r4, #580]
+	mov	r0, r5
+	add	r1, sp, #20
+	ldr	r6, .L3750+4
+	ldr	r2, [r3, #600]
+	add	r2, r2, #1
+	str	r2, [r3, #600]
+	ldr	r2, [r3, #608]
+	add	r2, r2, #1
+	str	r2, [r3, #608]
+	bl	ftl_get_blk_list_in_sblk
+	uxth	r0, r0
+	cmp	r0, #0
+	beq	.L3711
+	ldr	r8, [r6, #568]
+	add	r8, r8, r5, asl #2
+	ldrb	r3, [r8, #2]	@ zero_extendqisi2
+	tst	r3, #192
+	and	r2, r3, #224
+	moveq	r3, #1
+	movne	r3, #0
+	cmp	r2, #224
+	orreq	r3, r3, #1
+	cmp	r3, #0
+	bne	.L3718
+	ldr	r3, [r6, #580]
+	ldrh	r1, [r3, #16]
+	cmp	r1, r5
+	beq	.L3718
+	ldrh	r1, [r3, #48]
+	cmp	r1, r5
+	beq	.L3718
+	ldrh	r3, [r3, #80]
+	cmp	r3, r5
+	bne	.L3719
+.L3718:
+	cmp	r2, #0
+	bne	.L3711
+	ldr	r3, [r4, #576]
+	mov	r5, r5, asl #1
+	ldrh	r3, [r3, r5]
+	cmp	r3, #0
+	beq	.L3720
+	ldr	r1, .L3750+8
+	movw	r2, #2051
+	ldr	r0, .L3750+12
+	bl	printk
+	bl	dump_stack
+.L3720:
+	ldr	r3, [r4, #576]
+	mov	r2, #0
+	strh	r2, [r3, r5]	@ movhi
+	b	.L3711
+.L3719:
+	add	r3, sp, #40
+	add	r0, r3, r0, asl #1
+	movw	r3, #65535
+	ldrh	r9, [r0, #-22]
+	cmp	r9, r3
+	bne	.L3722
+	ldr	r1, .L3750+8
+	movw	r2, #2057
+	ldr	r0, .L3750+12
+	bl	printk
+	bl	dump_stack
+.L3722:
+	ldr	r2, .L3750+4
+	movw	r3, #2994
+	add	r10, r2, #2960
+	ldrh	fp, [r10]
+	sub	r6, fp, #1
+	uxth	r7, r6
+	ldrh	r6, [r4, r3]
+	mul	r6, r6, r9
+	ldrb	r9, [r8, #2]	@ zero_extendqisi2
+	and	fp, r9, #224
+	cmp	fp, #160
+	movne	fp, #1
+	bne	.L3723
+	ldrb	r3, [r2, #2937]	@ zero_extendqisi2
+	cmp	r3, #2
+	uxth	fp, r3
+	orr	r6, r6, r3, asl #24
+	movweq	r3, #2962
+	ldreqh	r7, [r2, r3]
+	subeq	r7, r7, #1
+	uxtheq	r7, r7
+.L3723:
+	mov	r0, #1
+	orr	r6, r7, r6
+	bl	buf_alloc
+	mov	r1, #1
+	ldr	r9, .L3750+4
+	str	r6, [r0, #24]
+	mov	r7, r0
+	bl	sblk_read_page
+	movw	r3, #2962
+	ldrh	r2, [r4, r3]
+	mov	r1, #255
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	ldr	r0, [r4, #2932]
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r2, [r7, #36]
+	cmn	r2, #1
+	cmpne	r2, #512
+	moveq	r2, #1
+	movne	r2, #0
+	moveq	r0, r5
+	moveq	r1, #1
+	moveq	r2, #0
+	beq	.L3748
+	ldr	r3, [r7, #12]
+	ldr	r1, [r3]
+	ldr	r3, .L3750+16
+	cmp	r1, r3
+	beq	.L3725
+	mov	r0, r5
+	mov	r1, #1
+.L3748:
+	bl	gc_add_sblk
+	mov	r0, r7
+	bl	zbuf_free
+	b	.L3711
+.L3725:
+	ldrh	r3, [r10]
+	add	r9, r9, #2928
+	ldrb	r6, [r9, #36]	@ zero_extendqisi2
+	ldr	r10, [r7, #4]
+	smulbb	r6, r6, r3
+	smulbb	r6, r6, fp
+	mov	fp, r2
+	uxth	r3, r6
+	mov	r6, r2
+	str	r3, [sp, #8]
+.L3726:
+	ldr	r3, [sp, #8]
+	cmp	fp, r3
+	bge	.L3749
+	ldr	r0, [r10, fp, asl #2]
+	cmn	r0, #1
+	beq	.L3727
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #16]
+	bne	.L3728
+	ldr	r0, [r10, fp, asl #2]
+	add	r1, sp, #16
+	mov	r2, #0
+	bl	pm_log2phys
+.L3728:
+	ldrb	r2, [r4, #676]	@ zero_extendqisi2
+	mov	r3, #1
+	ldrh	r1, [r9]
+	rsb	r2, r2, #24
+	ldr	r0, [sp, #16]
+	rsb	r2, r1, r2
+	mov	r2, r3, asl r2
+	sub	r2, r2, #1
+	and	r0, r2, r0, lsr r1
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	cmp	r0, r5
+	addeq	r6, r6, #1
+	uxtheq	r6, r6
+.L3727:
+	add	fp, fp, #1
+	b	.L3726
+.L3749:
+	mov	r0, r7
+	mov	r7, r5, asl #1
+	bl	zbuf_free
+	ldr	r3, .L3750+20
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L3730
+	ldr	r3, [r4, #576]
+	mov	r1, r5
+	ldr	r0, .L3750+24
+	ldrh	r2, [r3, r7]
+	ldrb	r3, [r8, #2]	@ zero_extendqisi2
+	mov	r3, r3, lsr #5
+	str	r3, [sp]
+	mov	r3, r6
+	bl	printk
+.L3730:
+	ldr	r3, [r4, #576]
+	cmp	r6, #31
+	strh	r6, [r3, r7]	@ movhi
+	bhi	.L3711
+	mov	r0, r5
+	mov	r1, #1
+	mov	r2, #0
+	bl	gc_add_sblk
+.L3711:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #36]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3733
+	bl	__stack_chk_fail
+.L3733:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3751:
+	.align	2
+.L3750:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2052
+	.word	.LC0
+	.word	-178307901
+	.word	.LANCHOR2
+	.word	.LC255
+	.fnend
+	.size	gc_block_vpn_scan, .-gc_block_vpn_scan
+	.align	2
+	.global	ftl_sblk_dump
+	.type	ftl_sblk_dump, %function
+ftl_sblk_dump:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3789
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #132
+	sub	sp, sp, #132
+	ldr	r6, .L3789+4
+	mov	fp, r0, asl #2
+	ldr	r3, [r3]
+	mov	r7, r0
+	str	r1, [sp, #64]
+	ldr	r2, [r6, #568]
+	str	r3, [sp, #124]
+	add	r3, r2, fp
+	ldrh	r1, [r2, fp]
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	ubfx	r1, r1, #0, #11
+	str	r1, [sp]
+	ldr	r10, [r2, r0, asl #2]
+	mov	r1, r7
+	mov	r2, r3, lsr #5
+	ldr	r0, .L3789+8
+	ubfx	r3, r3, #3, #2
+	ubfx	r4, r10, #11, #8
+	str	r4, [sp, #4]
+	bl	printk
+	movw	r3, #65535
+	cmp	r7, r3
+	beq	.L3775
+	add	r3, r6, #564
+	ldrh	r3, [r3]
+	cmp	r3, r7
+	bls	.L3775
+	ldr	r3, [r6, #568]
+	add	r1, sp, #108
+	mov	r0, r7
+	strh	r7, [sp, #92]	@ movhi
+	add	r3, r3, fp
+	ldr	r4, .L3789+12
+	mov	r5, #0
+	ldrb	r3, [r3, #2]	@ zero_extendqisi2
+	sub	r9, r4, #2960
+	and	r3, r3, #224
+	cmp	r3, #160
+	ldreqb	r10, [r6, #2937]	@ zero_extendqisi2
+	movne	r10, #1
+	bl	ftl_get_blk_list_in_sblk
+	ldrh	r3, [r4]
+	mov	r1, r7
+	uxtb	r0, r0
+	strh	r5, [sp, #94]	@ movhi
+	strb	r0, [sp, #101]
+	smulbb	r3, r3, r0
+	strb	r5, [sp, #97]
+	strh	r5, [sp, #102]	@ movhi
+	strh	r3, [sp, #98]	@ movhi
+	ldr	r3, [r6, #568]
+	add	r3, r3, fp
+	ldrb	r2, [r3, #2]	@ zero_extendqisi2
+	mov	r3, r10
+	str	r0, [sp]
+	ldr	r0, .L3789+16
+	mov	r2, r2, lsr #5
+	bl	printk
+	mov	r0, #1
+	bl	buf_alloc
+	mov	r6, r0
+	str	r5, [sp, #48]
+	str	r5, [sp, #56]
+	str	r5, [sp, #44]
+.L3755:
+	ldr	r4, .L3789+4
+	uxth	r2, r5
+	str	r2, [sp, #52]
+	add	r3, r4, #2960
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	bls	.L3771
+	mov	r3, r2, asl #1
+	add	r2, r3, r2
+	sub	r3, r3, #1
+	str	r3, [sp, #72]
+	mov	r3, #0
+	sub	r2, r2, #1
+	str	r2, [sp, #68]
+.L3787:
+	str	r3, [sp, #60]
+	ldrb	r2, [sp, #101]	@ zero_extendqisi2
+	ldrh	r3, [sp, #60]
+	cmp	r2, r3
+	bls	.L3769
+	add	r3, r3, #8
+	mov	r8, #1
+	mov	r3, r3, asl r8
+	str	r3, [sp, #76]
+.L3770:
+	cmp	r8, r10
+	bhi	.L3788
+	ldr	r2, [sp, #76]
+	add	r3, sp, #128
+	add	r3, r3, r2
+	movw	r2, #65535
+	ldrh	r3, [r3, #-36]
+	cmp	r3, r2
+	beq	.L3756
+	ldr	r2, .L3789+20
+	cmp	r10, #3
+	ldrh	r4, [r2]
+	mul	r4, r4, r3
+	bne	.L3757
+	ldrb	r2, [r9, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	uxtaheq	r4, r4, r5
+	ldrne	r2, [sp, #68]
+	orreq	r4, r4, r8, asl #24
+	beq	.L3759
+	b	.L3786
+.L3757:
+	cmp	r10, #2
+	uxtahne	r4, r4, r5
+	bne	.L3759
+	ldr	r2, [sp, #72]
+.L3786:
+	add	r4, r4, r2
+	ldrb	r2, [r9, #2937]	@ zero_extendqisi2
+	add	r4, r4, r8
+	orr	r4, r4, r2, asl #24
+.L3759:
+	mov	r1, #1
+	str	r4, [r6, #24]
+	mov	r0, r6
+	str	r3, [sp, #84]
+	bl	sblk_read_page
+	ldr	r1, [r6, #4]
+	ldr	ip, [r6, #36]
+	ldr	r2, [r6, #12]
+	str	ip, [sp]
+	ldr	r0, [r1]
+	ldr	r3, [sp, #84]
+	str	ip, [sp, #80]
+	str	r0, [sp, #4]
+	ldr	r0, [r1, #4]
+	str	r0, [sp, #8]
+	ldr	r0, [r1, #8]
+	str	r0, [sp, #12]
+	ldr	r1, [r1, #12]
+	ldr	r0, .L3789+24
+	str	r1, [sp, #16]
+	ldr	r1, [r2]
+	str	r1, [sp, #20]
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #24]
+	ldr	r1, [r2, #8]
+	str	r1, [sp, #28]
+	mov	r1, r3
+	ldr	r2, [r2, #12]
+	mov	r3, r4
+	str	r2, [sp, #32]
+	ldr	r2, [sp, #52]
+	bl	printk
+	ldr	ip, [sp, #80]
+	ldr	r3, [sp, #56]
+	cmn	ip, #1
+	cmpne	ip, #512
+	moveq	r3, #1
+	str	r3, [sp, #56]
+	ldr	r3, [r9, #568]
+	add	r3, r3, fp
+	ldrb	r2, [r3, #2]	@ zero_extendqisi2
+	and	r2, r2, #224
+	cmp	r2, #224
+	cmpne	r2, #32
+	moveq	r2, #1
+	movne	r2, #0
+	beq	.L3756
+	ldr	r3, [r6, #12]
+	str	r2, [sp, #80]
+	ldr	r0, [r3, #4]
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #88]
+	ldr	r2, [sp, #80]
+	bne	.L3762
+	ldr	r3, [r6, #12]
+	add	r1, sp, #88
+	ldr	r0, [r3, #4]
+	bl	pm_log2phys
+.L3762:
+	ldr	r3, [sp, #88]
+	cmp	r3, r4
+	bne	.L3763
+	ldr	r3, [sp, #48]
+	mov	r1, r4
+	ldr	r0, .L3789+28
+	add	r3, r3, #1
+	str	r3, [sp, #48]
+	ldr	r3, [r6, #12]
+	ldr	r2, [r3, #4]
+	ldr	r3, [sp, #48]
+	bl	printk
+.L3763:
+	ldr	r3, [sp, #64]
+	cmp	r3, #0
+	beq	.L3765
+	ldr	r3, [sp, #44]
+	ldr	r2, [sp, #44]
+	mov	r4, r3, asl #2
+	ldr	r3, [sp, #64]
+	ldr	r2, [r3, r2, asl #2]
+	ldr	r3, [r6, #12]
+	ldr	r3, [r3, #4]
+	cmp	r3, r2
+	beq	.L3766
+	ldr	r3, .L3789+32
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L3766
+	ldr	r0, .L3789+36
+	ldr	r1, [sp, #44]
+	bl	printk
+.L3766:
+	ldr	r3, [sp, #64]
+	ldr	r2, [r6, #12]
+	ldr	r3, [r3, r4]
+	ldr	r2, [r2, #4]
+	cmp	r2, r3
+	cmnne	r3, #1
+	beq	.L3765
+	ldr	r1, .L3789+40
+	movw	r2, #1383
+	ldr	r0, .L3789+44
+	bl	printk
+	bl	dump_stack
+.L3765:
+	ldr	r3, [sp, #44]
+	add	r3, r3, #1
+	str	r3, [sp, #44]
+.L3756:
+	add	r8, r8, #1
+	uxth	r8, r8
+	b	.L3770
+.L3788:
+	ldr	r3, [sp, #60]
+	add	r3, r3, #1
+	b	.L3787
+.L3769:
+	add	r5, r5, #1
+	b	.L3755
+.L3771:
+	mov	r0, r6
+	bl	zbuf_free
+	ldr	r2, [r4, #576]
+	mov	r3, r7, asl #1
+	ldr	r0, .L3789+48
+	mov	r1, r7
+	ldrh	r2, [r2, r3]
+	ldr	r3, [sp, #48]
+	bl	printk
+	ldr	r0, [sp, #56]
+	b	.L3753
+.L3775:
+	mov	r0, #0
+.L3753:
+	ldr	r3, .L3789
+	ldr	r2, [sp, #124]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3773
+	bl	__stack_chk_fail
+.L3773:
+	add	sp, sp, #132
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3790:
+	.align	2
+.L3789:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC256
+	.word	.LANCHOR0+2960
+	.word	.LC257
+	.word	.LANCHOR0+2994
+	.word	.LC201
+	.word	.LC258
+	.word	.LANCHOR2
+	.word	.LC259
+	.word	.LANCHOR1+2072
+	.word	.LC0
+	.word	.LC260
+	.fnend
+	.size	ftl_sblk_dump, .-ftl_sblk_dump
+	.align	2
+	.global	zftl_read
+	.type	zftl_read, %function
+zftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, r3
+	ldr	r3, .L3853
+	.pad #76
+	sub	sp, sp, #76
+	mov	r9, r0
+	mov	r4, r1
+	mov	r8, r2
+	ldr	r3, [r3]
+	str	r3, [sp, #68]
+	ldr	r3, .L3853+4
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L3792
+	ldr	r0, .L3853+8
+	mov	r1, r9
+	mov	r2, r4
+	mov	r3, r8
+	bl	printk
+.L3792:
+	cmp	r9, #0
+	ldreq	r3, .L3853+12
+	ldreq	r2, [r3, #520]
+	moveq	r3, #24576
+	beq	.L3794
+.L3793:
+	cmp	r9, #3
+	bhi	.L3821
+	mov	r3, r9, asl #13
+	mov	r2, #8192
+.L3794:
+	add	r1, r4, r8
+	cmp	r1, r2
+	bhi	.L3821
+	add	r3, r3, r4
+	ldr	r4, .L3853+12
+	str	r3, [sp, #24]
+	ldr	r0, [sp, #24]
+	ldr	r2, [r4, #2288]
+	mov	r7, r4
+	ldrb	r5, [r4, #2260]	@ zero_extendqisi2
+	ldr	r3, [r2, #24]
+	mov	r1, r5
+	add	r3, r3, r8
+	str	r3, [r2, #24]
+	bl	__aeabi_uidiv
+	mov	r1, r5
+	ldr	r3, [sp, #24]
+	str	r0, [sp, #32]
+	add	r3, r3, r8
+	str	r3, [sp, #40]
+	sub	r0, r3, #1
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #32]
+	ldr	r5, [sp, #32]
+	rsb	r3, r3, #1
+	str	r0, [sp, #44]
+	add	r3, r3, r0
+	str	r3, [sp, #28]
+	mov	r3, #0
+	str	r3, [sp, #36]
+.L3796:
+	ldr	r3, [sp, #28]
+	cmp	r3, #0
+	beq	.L3850
+	ldr	r3, [sp, #32]
+	ldrb	r1, [r4, #2260]	@ zero_extendqisi2
+	rsb	r2, r3, r5
+	ldr	r3, [sp, #44]
+	clz	r2, r2
+	rsb	r3, r3, r5
+	uxth	r9, r1
+	clz	r3, r3
+	mov	r2, r2, lsr #5
+	mov	r3, r3, lsr #5
+	orrs	r10, r3, r2
+	beq	.L3797
+	cmp	r2, #0
+	beq	.L3798
+	ldr	r0, [sp, #24]
+	bl	__aeabi_uidivmod
+	uxth	r10, r1
+	rsb	r9, r10, r9
+	uxth	r9, r9
+	cmp	r9, r8
+	uxthhi	r9, r8
+	b	.L3797
+.L3798:
+	cmp	r3, #0
+	ldrne	r3, [sp, #24]
+	movne	r10, r2
+	moveq	r10, r3
+	addne	r3, r3, r8
+	mlsne	r1, r5, r1, r3
+	uxtbne	r9, r1
+.L3797:
+	ldr	r2, .L3853+16
+	mov	r3, #0
+.L3801:
+	ldr	r1, [r2, #20]
+	cmp	r1, r5
+	bne	.L3799
+	ldrb	r1, [r2, #2]	@ zero_extendqisi2
+	tst	r1, #8
+	beq	.L3799
+	mov	r2, #48
+	mov	r9, r9, asl #9
+	mla	r3, r2, r3, r4
+	mov	r0, r6
+	mov	r2, r9
+	add	r6, r6, r9
+	ldr	r1, [r3, #728]
+	add	r1, r1, r10, asl #9
+	bl	ftl_memcpy
+	b	.L3800
+.L3799:
+	add	r3, r3, #1
+	add	r2, r2, #48
+	cmp	r3, #32
+	bne	.L3801
+	mov	r0, r5
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #64]
+	bne	.L3802
+	mov	r0, r5
+	add	r1, sp, #64
+	mov	r2, #0
+	bl	pm_log2phys
+.L3802:
+	ldr	r3, [sp, #64]
+	cmn	r3, #1
+	moveq	r9, #0
+	bne	.L3851
+.L3804:
+	ldrb	r3, [r7, #2260]	@ zero_extendqisi2
+	cmp	r9, r3
+	bcs	.L3800
+	mla	r3, r3, r5, r9
+	ldr	r2, [sp, #24]
+	ldr	r1, [sp, #40]
+	cmp	r3, r2
+	movcs	r2, #1
+	movcc	r2, #0
+	cmp	r3, r1
+	movcs	r2, #0
+	cmp	r2, #0
+	beq	.L3805
+	mov	r0, r6
+	mov	r1, #0
+	mov	r2, #512
+	add	r6, r6, #512
+	bl	ftl_memset
+.L3805:
+	add	r9, r9, #1
+	b	.L3804
+.L3851:
+	mov	r0, #0
+	bl	buf_alloc
+	subs	r3, r0, #0
+	beq	.L3807
+	ldr	r1, [r4, #2288]
+	ldr	r2, [r1, #40]
+	add	r2, r2, #1
+	str	r2, [r1, #40]
+	ldr	r2, [sp, #64]
+	str	r6, [r3, #8]
+	add	r6, r6, r9, asl #9
+	str	r5, [r3, #20]
+	str	r2, [r3, #24]
+	str	r2, [r3, #28]
+	strb	r9, [r3, #40]
+	strb	r10, [r3, #41]
+	bl	zftl_add_read_buf
+.L3800:
+	ldr	r3, [sp, #28]
+	add	r5, r5, #1
+	sub	r3, r3, #1
+	str	r3, [sp, #28]
+.L3807:
+	ldrb	r3, [r7, #2262]	@ zero_extendqisi2
+	ldr	r2, [sp, #28]
+	cmp	r2, #0
+	cmpne	r3, #2
+	bhi	.L3796
+	ldrb	r1, [r4, #3532]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L3796
+	ldrb	r2, [r4, #3531]	@ zero_extendqisi2
+	mov	r0, #48
+	ldr	r3, .L3853+16
+	mla	r0, r0, r2, r3
+	bl	sblk_read_page
+.L3809:
+	ldrb	r3, [r4, #3532]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L3852
+	ldrb	r3, [r4, #3531]	@ zero_extendqisi2
+	cmp	r3, #255
+	bne	.L3810
+	ldr	r1, .L3853+20
+	mov	r2, #1088
+	ldr	r0, .L3853+24
+	bl	printk
+	bl	dump_stack
+.L3810:
+	ldrb	fp, [r7, #3531]	@ zero_extendqisi2
+	mov	r2, #48
+	ldr	r3, .L3853+16
+	mul	r2, r2, fp
+	add	r3, r3, r2
+	add	r2, r7, r2
+	str	r3, [sp, #48]
+	ldr	r10, [r2, #760]
+	ldrb	r3, [r2, #724]	@ zero_extendqisi2
+	cmn	r10, #1
+	strb	r3, [r7, #3531]
+	bne	.L3811
+	ldr	r2, [r4, #580]
+	str	r10, [sp, #36]
+	ldr	r3, [r2, #552]
+	add	r3, r3, #1
+	str	r3, [r2, #552]
+	b	.L3812
+.L3811:
+	cmp	r10, #256
+	bne	.L3812
+	ldr	r1, .L3853+28
+	mov	r9, #1
+	ldr	r3, [r2, #748]
+	str	r2, [sp, #60]
+	ldrh	r0, [r1]
+	ldrb	r1, [r4, #676]	@ zero_extendqisi2
+	str	r3, [sp, #56]
+	rsb	r1, r1, #24
+	rsb	r1, r0, r1
+	mov	r1, r9, asl r1
+	sub	r1, r1, #1
+	and	r0, r1, r3, lsr r0
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldr	r2, [sp, #60]
+	uxth	ip, r0
+	ldr	r3, [sp, #56]
+	mov	r1, ip
+	ldr	r0, .L3853+32
+	ldr	r2, [r2, #744]
+	str	ip, [sp, #52]
+	bl	printk
+	mov	r1, r9
+	mov	r2, #0
+	ldr	ip, [sp, #52]
+	mov	r0, ip
+	bl	gc_add_sblk
+.L3812:
+	mov	r9, #48
+	cmn	r10, #1
+	mla	r9, r9, fp, r4
+	movne	ip, #0
+	moveq	ip, #1
+	ldr	r3, [r9, #736]
+	ldr	r1, [r9, #744]
+	ldr	r3, [r3, #4]
+	cmp	r3, r1
+	moveq	r3, ip
+	orrne	r3, ip, #1
+	cmp	r3, #0
+	beq	.L3813
+	ldr	r1, [r4, #580]
+	ldr	r0, .L3853+36
+	str	ip, [sp, #52]
+	ldr	r3, [r1, #552]
+	add	r3, r3, #1
+	str	r3, [r1, #552]
+	ldr	r3, [r9, #736]
+	ldr	r2, [r9, #748]
+	ldrb	r1, [r9, #725]	@ zero_extendqisi2
+	str	r2, [sp]
+	ldr	r2, [r3]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #12]
+	mov	r2, r10
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #16]
+	ldr	r3, [r9, #744]
+	bl	printk
+	ldr	r3, .L3853+28
+	ldr	r2, [r9, #748]
+	ldrb	r1, [r4, #2930]	@ zero_extendqisi2
+	ldrh	r0, [r3]
+	ldrb	r3, [r4, #676]	@ zero_extendqisi2
+	mov	r2, r2, lsr r0
+	rsb	r3, r3, #24
+	rsb	r3, r0, r3
+	mvn	r0, #0
+	bic	r0, r2, r0, asl r3
+	bl	__aeabi_uidiv
+	mov	r1, #0
+	uxth	r0, r0
+	bl	ftl_sblk_dump
+	ldr	ip, [sp, #52]
+.L3813:
+	mov	r3, #48
+	mla	r3, r3, fp, r4
+	ldr	r2, [r3, #736]
+	ldr	r3, [r3, #744]
+	ldr	r2, [r2, #4]
+	cmp	r2, r3
+	orrne	ip, ip, #1
+	cmp	ip, #0
+	beq	.L3814
+	ldr	r1, .L3853+20
+	movw	r2, #1109
+	ldr	r0, .L3853+24
+	bl	printk
+	bl	dump_stack
+.L3814:
+	mov	r3, #48
+	mla	fp, r3, fp, r7
+	ldrb	r3, [r7, #2260]	@ zero_extendqisi2
+	ldrb	r2, [fp, #764]	@ zero_extendqisi2
+	cmp	r3, r2
+	ldrlsb	r3, [fp, #726]	@ zero_extendqisi2
+	bicls	r3, r3, #8
+	strlsb	r3, [fp, #726]
+	bls	.L3816
+	ldrb	r1, [fp, #765]	@ zero_extendqisi2
+	mov	r2, r2, asl #9
+	ldr	r3, [fp, #728]
+	ldr	r0, [fp, #732]
+	add	r1, r3, r1, asl #9
+	bl	ftl_memcpy
+.L3816:
+	ldr	r1, [sp, #48]
+	ldr	r0, .L3853+40
+	bl	buf_remove_buf
+	ldr	r0, [sp, #48]
+	bl	zbuf_free
+	ldrb	r3, [r4, #3532]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	strb	r3, [r4, #3532]
+	b	.L3809
+.L3852:
+	mvn	r2, #0
+	strb	r3, [r7, #3532]
+	strb	r2, [r7, #3531]
+	b	.L3796
+.L3850:
+	bl	timer_get_time
+	ldr	r3, .L3853+44
+	str	r0, [r3, #-2476]
+	ldr	r0, [sp, #36]
+	b	.L3795
+.L3821:
+	mvn	r0, #0
+.L3795:
+	ldr	r3, .L3853
+	ldr	r2, [sp, #68]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3819
+	bl	__stack_chk_fail
+.L3819:
+	add	sp, sp, #76
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3854:
+	.align	2
+.L3853:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LC261
+	.word	.LANCHOR0
+	.word	.LANCHOR0+724
+	.word	.LANCHOR1+2088
+	.word	.LC0
+	.word	.LANCHOR0+2928
+	.word	.LC262
+	.word	.LC263
+	.word	.LANCHOR0+3533
+	.word	.LANCHOR5
+	.fnend
+	.size	zftl_read, .-zftl_read
+	.align	2
+	.global	zftl_vendor_read
+	.type	zftl_vendor_read, %function
+zftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #512
+	mov	r2, ip
+	mov	r0, #2
+	b	zftl_read
+	.fnend
+	.size	zftl_vendor_read, .-zftl_vendor_read
+	.align	2
+	.global	zftl_sys_read
+	.type	zftl_sys_read, %function
+zftl_sys_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	ip, r1
+	mov	lr, r0
+	mov	r3, r2
+	mov	r1, lr
+	mov	r0, #2
+	mov	r2, ip
+	ldr	lr, [sp], #4
+	b	zftl_read
+	.fnend
+	.size	zftl_sys_read, .-zftl_sys_read
+	.align	2
+	.type	zftl_debug_proc_write, %function
+zftl_debug_proc_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 96
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r2, #79
+	ldr	r7, .L3885
+	.pad #132
+	sub	sp, sp, #132
+	add	r4, sp, #44
+	mov	r6, r2
+	str	r4, [sp, #40]
+	mvnhi	r0, #21
+	ldr	r3, [r7]
+	str	r3, [sp, #124]
+	bhi	.L3859
+	mov	r0, r4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	mvnne	r0, #13
+	bne	.L3859
+	add	r3, sp, #128
+	mov	r1, r4
+	add	r3, r3, r6
+	strb	r0, [r3, #-84]
+	ldr	r0, .L3885+4
+	bl	printk
+	ldr	r0, .L3885+8
+	mov	r1, r4
+	mov	r2, #1
+	mov	r3, #16
+	bl	rknand_print_hex
+	bl	rknand_device_lock
+	mov	r0, r4
+	ldr	r1, .L3885+12
+	mov	r2, #7
+	bl	memcmp
+	subs	r5, r0, #0
+	bne	.L3860
+	ldr	r8, .L3885+16
+	movw	ip, #698
+	ldr	r0, .L3885+20
+	mov	r2, #4
+	ldr	r4, .L3885+24
+	movw	r9, #65535
+	ldr	r3, [r8, #2288]
+	add	r1, r3, #704
+	ldrh	r3, [r3, ip]
+	bl	rknand_print_hex
+	ldr	r1, [r8, #2288]
+	ldr	r0, .L3885+28
+	mov	r2, #2
+	add	r1, r1, #416
+	ldrh	r3, [r4]
+	bl	rknand_print_hex
+.L3861:
+	ldrh	r3, [r4]
+	cmp	r5, r3
+	bge	.L3864
+	mov	r0, #300
+	bl	msleep
+	add	r3, r5, #208
+	ldr	r2, [r8, #2288]
+	mov	r3, r3, asl #1
+	ldrh	r0, [r2, r3]
+	cmp	r0, r9
+	beq	.L3862
+	mov	r1, #0
+	bl	ftl_sblk_dump
+.L3862:
+	add	r5, r5, #1
+	b	.L3861
+.L3860:
+	mov	r0, r4
+	ldr	r1, .L3885+32
+	mov	r2, #7
+	bl	memcmp
+	subs	r5, r0, #0
+	bne	.L3865
+	ldr	r8, .L3885+16
+	movw	ip, #698
+	ldr	r0, .L3885+20
+	mov	r2, #4
+	ldr	r3, [r8, #2288]
+	mov	fp, r8
+	add	r1, r3, #704
+	ldrh	r3, [r3, ip]
+	bl	rknand_print_hex
+	ldr	r3, .L3885+24
+	ldr	r1, [r8, #2288]
+	mov	r2, #2
+	ldr	r0, .L3885+28
+	ldrh	r3, [r3]
+	add	r1, r1, #416
+	bl	rknand_print_hex
+	ldr	r0, .L3885+36
+	add	r4, sp, #128
+	add	r1, sp, #51
+	str	r1, [r4, #-88]!
+	bl	printk
+	mov	r1, r4
+	mov	r4, r5
+	ldr	r5, .L3885+40
+	ldr	r0, [sp, #40]
+	bl	rk_simple_strtoull.constprop.33
+	uxth	r9, r0
+	str	r0, [sp, #36]
+.L3867:
+	add	r10, r5, r4
+	ldr	r0, .L3885+44
+	ldrh	r1, [r5, r4]
+	ldrh	r2, [r10, #2]
+	bl	printk
+	ldrh	r3, [r4, r5]
+	cmp	r3, r9
+	bne	.L3866
+	ldrb	r3, [fp, #2260]	@ zero_extendqisi2
+	mov	r2, #4
+	ldr	r0, .L3885+48
+	ldr	r1, [r10, #4]
+	mov	r3, r3, asl #7
+	bl	rknand_print_hex
+.L3866:
+	add	r4, r4, #8
+	cmp	r4, #256
+	bne	.L3867
+	mov	r0, #300
+	add	r9, r9, #176
+	bl	msleep
+	mov	r0, #1
+	bl	buf_alloc
+	ldr	r3, [r8, #2288]
+	mov	r1, #1
+	ldr	r3, [r3, r9, asl #2]
+	str	r3, [r0, #24]
+	mov	r4, r0
+	str	r3, [sp, #36]
+	bl	sblk_read_page
+	ldr	r3, [r4, #4]
+	ldr	r2, [r4, #12]
+	ldr	r0, .L3885+52
+	ldr	r1, [r3, #4]
+	str	r1, [sp]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	ldr	r1, [r2, #8]
+	str	r1, [sp, #20]
+	ldr	r2, [r2, #12]
+	ldr	r1, [sp, #36]
+	str	r2, [sp, #24]
+	ldr	r2, [r4, #36]
+	ldr	r3, [r3]
+	bl	printk
+	ldrb	r3, [r8, #2260]	@ zero_extendqisi2
+	ldr	r0, .L3885+56
+	mov	r2, #4
+	ldr	r1, [r4, #4]
+	mov	r3, r3, asl #7
+	b	.L3884
+.L3865:
+	mov	r0, r4
+	ldr	r1, .L3885+60
+	mov	r2, #7
+	bl	memcmp
+	cmp	r0, #0
+	bne	.L3868
+	bl	dump_ftl_info
+	b	.L3864
+.L3868:
+	mov	r0, r4
+	ldr	r1, .L3885+64
+	mov	r2, #9
+	bl	memcmp
+	cmp	r0, #0
+	bne	.L3869
+	add	r1, sp, #128
+	add	r0, sp, #53
+	str	r0, [r1, #-88]!
+	bl	rk_simple_strtoull.constprop.33
+	ldr	r3, .L3885+68
+	str	r0, [sp, #36]
+	strh	r0, [r3]	@ movhi
+	bl	dump_all_list_info
+	b	.L3864
+.L3869:
+	mov	r0, r4
+	ldr	r1, .L3885+72
+	mov	r2, #8
+	bl	memcmp
+	cmp	r0, #0
+	beq	.L3864
+	mov	r0, r4
+	ldr	r1, .L3885+76
+	mov	r2, #8
+	bl	memcmp
+	cmp	r0, #0
+	bne	.L3871
+	add	r4, sp, #128
+	add	r1, sp, #52
+	ldr	r0, .L3885+36
+	str	r1, [r4, #-88]!
+	bl	printk
+	mov	r1, r4
+	ldr	r5, .L3885+16
+	ldr	r0, [sp, #40]
+	bl	rk_simple_strtoull.constprop.33
+	str	r0, [sp, #36]
+	mov	r0, #1
+	bl	buf_alloc
+	mov	r1, #1
+	ldr	r3, [sp, #36]
+	mov	r4, r0
+	str	r3, [r0, #24]
+	bl	sblk_read_page
+	ldr	r3, [r4, #4]
+	ldr	r2, [r4, #12]
+	ldr	r0, .L3885+52
+	ldr	r1, [r3, #4]
+	str	r1, [sp]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2]
+	str	r1, [sp, #12]
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	ldr	r1, [r2, #8]
+	str	r1, [sp, #20]
+	ldr	r2, [r2, #12]
+	ldr	r1, [sp, #36]
+	str	r2, [sp, #24]
+	ldr	r2, [r4, #36]
+	ldr	r3, [r3]
+	bl	printk
+	ldrb	r3, [r5, #2260]	@ zero_extendqisi2
+	ldr	r0, .L3885+80
+	mov	r2, #4
+	ldr	r1, [r4, #4]
+	mov	r3, r3, asl #7
+	bl	rknand_print_hex
+	ldrb	r3, [r5, #2260]	@ zero_extendqisi2
+	ldr	r0, .L3885+84
+	mov	r2, #4
+	ldr	r1, [r4, #12]
+	mov	r3, r3, asl #1
+.L3884:
+	bl	rknand_print_hex
+	mov	r0, r4
+	bl	zbuf_free
+	b	.L3864
+.L3871:
+	mov	r0, r4
+	ldr	r1, .L3885+88
+	mov	r2, #8
+	bl	memcmp
+	subs	r5, r0, #0
+	bne	.L3872
+	add	r4, sp, #128
+	add	r1, sp, #52
+	ldr	r0, .L3885+36
+	str	r1, [r4, #-88]!
+	bl	printk
+	mov	r1, r4
+	ldr	r0, [sp, #40]
+	bl	rk_simple_strtoull.constprop.33
+	mov	r1, r5
+	str	r0, [sp, #36]
+	uxth	r0, r0
+	bl	ftl_sblk_dump
+	b	.L3864
+.L3872:
+	mov	r0, r4
+	ldr	r1, .L3885+92
+	mov	r2, #10
+	bl	memcmp
+	cmp	r0, #0
+	bne	.L3873
+	add	r4, sp, #128
+	add	r1, sp, #54
+	ldr	r0, .L3885+36
+	str	r1, [r4, #-88]!
+	bl	printk
+	mov	r1, r4
+	ldr	r0, [sp, #40]
+	bl	rk_simple_strtoull.constprop.33
+	ldr	r3, .L3885+96
+	str	r0, [sp, #36]
+	str	r0, [r3]
+	b	.L3864
+.L3873:
+	mov	r0, r4
+	ldr	r1, .L3885+100
+	mov	r2, #8
+	bl	memcmp
+	subs	r5, r0, #0
+	bne	.L3874
+	add	r4, sp, #128
+	add	r1, sp, #52
+	ldr	r0, .L3885+36
+	str	r1, [r4, #-88]!
+	bl	printk
+	mov	r1, r4
+	ldr	r0, [sp, #40]
+	bl	rk_simple_strtoull.constprop.33
+	mov	r4, r0
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #36]
+	bne	.L3875
+	mov	r0, r4
+	add	r1, sp, #36
+	mov	r2, r5
+	bl	pm_log2phys
+.L3875:
+	mov	r1, r4
+	ldr	r2, [sp, #36]
+	ldr	r0, .L3885+104
+	bl	printk
+	b	.L3864
+.L3874:
+	ldr	r0, .L3885+108
+	bl	printk
+	ldr	r0, .L3885+112
+	bl	printk
+	ldr	r0, .L3885+116
+	bl	printk
+	ldr	r0, .L3885+120
+	bl	printk
+	ldr	r0, .L3885+124
+	bl	printk
+	ldr	r0, .L3885+128
+	bl	printk
+	ldr	r0, .L3885+132
+	bl	printk
+	ldr	r0, .L3885+136
+	bl	printk
+	ldr	r0, .L3885+140
+	bl	printk
+.L3864:
+	bl	rknand_device_unlock
+	mov	r0, r6
+.L3859:
+	ldr	r2, [sp, #124]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L3876
+	bl	__stack_chk_fail
+.L3876:
+	add	sp, sp, #132
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3886:
+	.align	2
+.L3885:
+	.word	__stack_chk_guard
+	.word	.LC264
+	.word	.LC265
+	.word	.LC266
+	.word	.LANCHOR0
+	.word	.LC267
+	.word	.LANCHOR3-3296
+	.word	.LC268
+	.word	.LC269
+	.word	.LC270
+	.word	.LANCHOR0+3540
+	.word	.LC271
+	.word	.LC272
+	.word	.LC234
+	.word	.LC273
+	.word	.LC274
+	.word	.LC275
+	.word	.LANCHOR0+2992
+	.word	.LC276
+	.word	.LC277
+	.word	.LC229
+	.word	.LC230
+	.word	.LC278
+	.word	.LC279
+	.word	.LANCHOR2
+	.word	.LC280
+	.word	.LC281
+	.word	.LC282
+	.word	.LC283
+	.word	.LC284
+	.word	.LC285
+	.word	.LC286
+	.word	.LC287
+	.word	.LC288
+	.word	.LC289
+	.word	.LC290
+	.fnend
+	.size	zftl_debug_proc_write, .-zftl_debug_proc_write
+	.align	2
+	.global	gc_check_data_one_wl
+	.type	gc_check_data_one_wl, %function
+gc_check_data_one_wl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L3920
+	ldr	r3, [r4, #2320]
+	ldr	r7, [r4, #580]
+	cmp	r3, #0
+	bne	.L3888
+	mov	r0, #1
+	bl	buf_alloc
+	str	r0, [r4, #2320]
+.L3888:
+	ldr	r5, [r4, #2320]
+	cmp	r5, #0
+	bne	.L3889
+	ldr	r1, .L3920+4
+	movw	r2, #613
+	ldr	r0, .L3920+8
+	bl	printk
+	bl	dump_stack
+.L3889:
+	ldr	r6, .L3920+12
+	add	r10, r7, #96
+	ldr	r3, .L3920
+	mov	r9, #0
+.L3890:
+	ldrb	r2, [r7, #89]	@ zero_extendqisi2
+	cmp	r9, r2
+	ldr	r2, .L3920+12
+	bge	.L3918
+	ldr	r2, .L3920+16
+	mov	r8, #1
+.L3900:
+	ldrh	r1, [r6, #16]
+	cmp	r8, r1
+	bgt	.L3919
+	ldrb	r0, [r3, #2937]	@ zero_extendqisi2
+	ldrh	r1, [r10]
+	ldrh	ip, [r2]
+	cmp	r0, #2
+	mul	ip, ip, r1
+	beq	.L3891
+	ldrb	r1, [r3, #684]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L3892
+.L3891:
+	ldrh	r1, [r6, #12]
+	sub	r1, r1, #1
+	add	r1, r1, ip
+	add	r1, r1, r8
+	orr	r1, r1, r0, asl #24
+	b	.L3917
+.L3892:
+	cmp	r0, #3
+	ldrh	r1, [r6, #12]
+	addne	ip, ip, r1
+	strne	ip, [r5, #24]
+	bne	.L3893
+	add	r1, ip, r1
+	orr	r1, r1, r8, asl #24
+.L3917:
+	str	r1, [r5, #24]
+.L3893:
+	mov	r1, #1
+	mov	r0, r5
+	str	r3, [sp, #28]
+	str	r2, [sp, #24]
+	bl	sblk_read_page
+	ldr	r1, [r5, #36]
+	cmn	r1, #1
+	ldr	r1, .L3920+20
+	ldr	r2, [sp, #24]
+	ldr	r3, [sp, #28]
+	beq	.L3895
+	ldr	lr, [r1, #-3316]
+	ldrh	ip, [r6, #18]
+	ldr	r0, [r5, #12]
+	ldr	fp, [lr, ip, asl #2]
+	ldr	lr, [r0, #4]
+	cmp	fp, lr
+	bne	.L3895
+	ldr	lr, [r1, #-3312]
+	ldr	r0, [r0, #8]
+	ldr	ip, [lr, ip, asl #2]
+	cmp	ip, r0
+	beq	.L3896
+.L3895:
+	ldr	r1, [r1, #-3316]
+	ldrh	r0, [r6, #18]
+	ldr	fp, .L3920+20
+	ldr	ip, .L3920
+	ldr	r0, [r1, r0, asl #2]
+	cmn	r0, #1
+	beq	.L3896
+	movw	r6, #2962
+	ldrb	r3, [r7, #89]	@ zero_extendqisi2
+	ldrh	lr, [ip, r6]
+	mov	r2, #4
+	ldr	r0, .L3920+24
+	str	ip, [sp, #24]
+	mul	r3, lr, r3
+	bl	rknand_print_hex
+	ldrb	r3, [r7, #89]	@ zero_extendqisi2
+	ldr	r0, .L3920+28
+	mov	r2, #4
+	ldr	r1, [fp, #-3312]
+	ldr	ip, [sp, #24]
+	ldrh	ip, [ip, r6]
+	mul	r3, ip, r3
+	bl	rknand_print_hex
+	ldr	r3, .L3920+32
+	ldr	r3, [r3]
+	tst	r3, #1024
+	beq	.L3897
+	ldr	r3, .L3920+12
+	ldr	r2, [fp, #-3312]
+	ldr	lr, [fp, #-3316]
+	ldrh	ip, [r3, #18]
+	ldr	r3, [r5, #12]
+	ldr	r0, .L3920+36
+	ldr	r2, [r2, ip, asl #2]
+	str	r2, [sp]
+	ldr	r2, [r3]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #12]
+	ldr	r3, [r3, #12]
+	str	r3, [sp, #16]
+	ldr	r1, [r5, #24]
+	ldr	r2, [r5, #36]
+	ldr	r3, [lr, ip, asl #2]
+	bl	printk
+.L3897:
+	ldr	r3, [r4, #580]
+	mov	r1, #0
+	ldrh	r0, [r3, #80]
+	bl	ftl_sblk_dump
+	ldrh	r3, [r7, #80]
+	ldr	r2, [r4, #576]
+	mov	r1, #0
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r2, [r4, #580]
+	ldr	r3, [r2, #556]
+	add	r3, r3, #1
+	str	r3, [r2, #556]
+	ldr	r3, [r4, #2288]
+	ldr	r2, [r3, #156]
+	ldr	r3, .L3920+40
+	cmp	r2, r3
+	bne	.L3901
+	ldr	r0, [r5, #24]
+	bl	ftl_mask_bad_block
+	b	.L3901
+.L3896:
+	ldrh	r1, [r6, #18]
+	add	r8, r8, #1
+	add	r1, r1, #1
+	strh	r1, [r6, #18]	@ movhi
+	b	.L3900
+.L3919:
+	add	r9, r9, #1
+	add	r10, r10, #2
+	b	.L3890
+.L3918:
+	ldrb	r0, [r4, #2938]	@ zero_extendqisi2
+	ldrh	r3, [r2, #12]
+	cmp	r0, #0
+	add	r1, r3, #1
+	addne	r3, r3, #2
+	strh	r1, [r2, #12]	@ movhi
+	movne	r0, #0
+	strneh	r3, [r2, #12]	@ movhi
+	b	.L3898
+.L3901:
+	mvn	r0, #0
+.L3898:
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3921:
+	.align	2
+.L3920:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2100
+	.word	.LC0
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR0+2994
+	.word	.LANCHOR3
+	.word	.LC291
+	.word	.LC292
+	.word	.LANCHOR2
+	.word	.LC293
+	.word	1145785929
+	.fnend
+	.size	gc_check_data_one_wl, .-gc_check_data_one_wl
+	.align	2
+	.global	ftl_update_l2p_map
+	.type	ftl_update_l2p_map, %function
+ftl_update_l2p_map:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3954
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r2, [r3]
+	mov	r7, r0
+	ldr	r4, .L3954+4
+	ldrb	r8, [r0, #9]	@ zero_extendqisi2
+	str	r2, [sp, #20]
+	add	r2, r4, #2960
+	ldrh	r5, [r0, #12]
+	ldrh	r2, [r2]
+	ldr	r6, [r4, #3512]
+	str	r3, [sp, #8]
+	mul	r8, r8, r2
+	add	r5, r6, r5, asl #2
+	sub	r2, r8, #-1073741823
+	ldr	r2, [r5, r2, asl #2]
+	cmn	r2, #1
+	beq	.L3923
+	ldr	r1, .L3954+8
+	movw	r2, #1733
+	ldr	r0, .L3954+12
+	bl	printk
+	bl	dump_stack
+.L3923:
+	mov	r6, #0
+	sub	r5, r5, #4
+	mov	r10, r6
+.L3924:
+	cmp	r10, r8
+	beq	.L3953
+	ldr	r9, [r5, #4]!
+	cmn	r9, #1
+	beq	.L3925
+	ldrb	r1, [r4, #2260]	@ zero_extendqisi2
+	mov	r0, r9
+	mov	r1, r1, asl #7
+	bl	__aeabi_uidiv
+	uxth	r3, r0
+	str	r3, [sp, #4]
+	ldr	r3, .L3954+16
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L3926
+	ldr	r0, .L3954+20
+	mov	r2, r9
+	ldr	r1, [sp, #4]
+	mov	r3, r10
+	bl	printk
+.L3926:
+	mov	r9, r5
+	mov	fp, r10
+.L3929:
+	ldr	r0, [r9]
+	cmn	r0, #1
+	beq	.L3927
+	ldrb	r1, [r4, #2260]	@ zero_extendqisi2
+	mov	r1, r1, asl #7
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #4]
+	uxth	r0, r0
+	cmp	r0, r3
+	bne	.L3927
+	ldrb	r3, [r7, #9]	@ zero_extendqisi2
+	mov	r0, fp
+	mov	r1, r3
+	str	r3, [sp, #12]
+	bl	__aeabi_idiv
+	ldr	r2, .L3954+24
+	ldrh	r2, [r2]
+	ldr	r3, [sp, #12]
+	mls	r3, r3, r0, fp
+	add	r3, r7, r3, asl #1
+	ldrh	r3, [r3, #16]
+	mla	r2, r2, r3, r0
+	ldr	r0, .L3954+28
+	str	r2, [sp, #16]
+	ldr	r1, [r9]
+	bl	pm_ppa_update_check
+	cmp	r0, #0
+	beq	.L3928
+	ldr	r3, .L3954+4
+	mov	r2, #4
+	ldr	r0, .L3954+32
+	ldr	r1, [r3, #3512]
+	mov	r3, r8
+	bl	rknand_print_hex
+.L3928:
+	add	r6, r6, #1
+	ldr	r0, [r9]
+	add	r1, sp, #16
+	mov	r2, #1
+	uxth	r6, r6
+	bl	pm_log2phys
+	mvn	r3, #0
+	str	r3, [r9]
+.L3927:
+	add	fp, fp, #1
+	add	r9, r9, #4
+	cmp	fp, r8
+	bne	.L3929
+.L3925:
+	add	r10, r10, #1
+	b	.L3924
+.L3953:
+	ldr	r3, .L3954+16
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L3931
+	ldrh	r1, [r7]
+	mov	r2, r6
+	ldr	ip, [r4, #576]
+	ldr	r0, .L3954+36
+	mov	r3, r1, asl #1
+	ldrh	r3, [ip, r3]
+	bl	printk
+.L3931:
+	ldrh	r3, [r7]
+	ldr	r2, [r4, #576]
+	mov	r3, r3, asl #1
+	strh	r6, [r2, r3]	@ movhi
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L3932
+	bl	__stack_chk_fail
+.L3932:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3955:
+	.align	2
+.L3954:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2124
+	.word	.LC0
+	.word	.LANCHOR2
+	.word	.LC294
+	.word	.LANCHOR0+2994
+	.word	.LC295
+	.word	.LC296
+	.word	.LC297
+	.fnend
+	.size	ftl_update_l2p_map, .-ftl_update_l2p_map
+	.align	2
+	.global	ftl_alloc_new_data_sblk
+	.type	ftl_alloc_new_data_sblk, %function
+ftl_alloc_new_data_sblk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldrh	r5, [r0]
+	bl	ftl_update_l2p_map
+	bl	pm_flush
+	ldrh	r0, [r6]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L3957
+	bl	zftl_insert_data_list
+.L3957:
+	ldr	r4, .L3965
+	mov	r0, r6
+	ldr	r1, [r4, #580]
+	add	r1, r1, #16
+	cmp	r1, r6
+	movw	r6, #65535
+	moveq	r1, #2
+	movne	r1, #3
+	bl	ftl_open_sblk_init
+	ldr	r3, [r4, #580]
+	cmp	r5, r6
+	ldr	r3, [r3, #560]
+	rsb	r3, r5, r3
+	clz	r3, r3
+	mov	r3, r3, lsr #5
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L3959
+	mov	r1, r5
+	ldr	r0, .L3965+4
+	bl	printk
+	ldr	r3, [r4, #580]
+	ldr	r0, [r3, #564]
+	bl	gc_mark_bad_ppa
+	ldr	r3, [r4, #580]
+	mvn	r2, #0
+	str	r6, [r3, #560]
+	str	r2, [r3, #564]
+.L3959:
+	bl	ftl_ext_info_flush
+	mov	r0, #0
+	bl	ftl_info_flush
+	bl	lpa_rebuild_hash
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L3966:
+	.align	2
+.L3965:
+	.word	.LANCHOR0
+	.word	.LC298
+	.fnend
+	.size	ftl_alloc_new_data_sblk, .-ftl_alloc_new_data_sblk
+	.align	2
+	.global	ftl_write_commit
+	.type	ftl_write_commit, %function
+ftl_write_commit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L4031
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r6, .L4031+4
+	ldr	r3, [r3]
+	mov	r8, r6
+	str	r3, [sp, #28]
+.L3968:
+	ldrb	r2, [r6, #2284]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3970
+	ldrb	r3, [r6, #2308]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	strb	r2, [r6, #2284]
+	str	r3, [sp, #16]
+	mov	r3, #48
+	ldr	r1, [sp, #16]
+	mul	r3, r3, r1
+	ldr	r1, .L4031+8
+	add	r1, r1, r3
+	add	r3, r6, r3
+	str	r1, [sp, #20]
+	ldr	r2, [r3, #744]
+	ldrb	r1, [r3, #724]	@ zero_extendqisi2
+	ldr	r3, [r6, #2268]
+	cmp	r2, r3
+	strb	r1, [r6, #2308]
+	bcc	.L3971
+	ldr	r1, .L4031+12
+	movw	r2, #510
+	ldr	r0, .L4031+16
+	bl	printk
+	bl	dump_stack
+.L3971:
+	ldr	r2, [sp, #16]
+	mov	r3, #48
+	ldr	r1, [r8, #2268]
+	mla	r2, r3, r2, r8
+	ldr	r9, [r2, #744]
+	cmp	r9, r1
+	bcc	.L3972
+	ldr	r0, [sp, #20]
+	bl	zbuf_free
+	mvn	r0, #0
+	b	.L3973
+.L3972:
+	ldr	r1, [r2, #736]
+	ldr	fp, [r2, #728]
+	ldrb	r7, [r2, #765]	@ zero_extendqisi2
+	ldrb	r2, [r2, #764]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	str	r2, [sp, #12]
+	ldrb	r2, [r6, #2285]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L3974
+	ldr	r2, .L4031+20
+	ldrb	r4, [r2, #-3239]	@ zero_extendqisi2
+	ldr	r2, .L4031+8
+	mla	r4, r3, r4, r2
+.L3975:
+	ldrb	r2, [r4]	@ zero_extendqisi2
+	cmp	r2, #255
+	ldrne	r1, .L4031+8
+	mlane	r4, r3, r2, r1
+	bne	.L3975
+.L4029:
+	ldr	r3, [r4, #20]
+	cmp	r3, r9
+	bne	.L3974
+	ldr	r3, [sp, #12]
+	mov	r1, r7, asl #9
+	ldr	r0, [r4, #4]
+	mov	r2, r3, asl #9
+	add	r0, r0, r1
+	add	r1, fp, r1
+	bl	ftl_memcpy
+	ldr	r0, [sp, #20]
+	bl	zbuf_free
+	b	.L3968
+.L3974:
+	mov	r0, r9
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #24]
+	bne	.L3978
+	mov	r0, r9
+	add	r1, sp, #24
+	mov	r2, #0
+	bl	pm_log2phys
+.L3978:
+	ldr	r4, [r8, #580]
+	mov	r3, #0
+	ldr	r2, .L4031+8
+	add	r4, r4, #16
+.L3981:
+	ldr	r1, [r2, #20]
+	cmp	r1, r9
+	bne	.L3979
+	ldrb	r1, [r2, #2]	@ zero_extendqisi2
+	tst	r1, #8
+	beq	.L3979
+	mov	r10, #48
+	bic	r1, r1, #8
+	mla	r10, r10, r3, r8
+	ldr	r3, [r10, #748]
+	strb	r1, [r10, #726]
+	ldr	r5, [r10, #728]
+	str	r3, [sp, #24]
+	b	.L3980
+.L3979:
+	add	r3, r3, #1
+	add	r2, r2, #48
+	cmp	r3, #32
+	bne	.L3981
+	mov	r5, #0
+.L3980:
+	ldrb	r3, [r8, #2260]	@ zero_extendqisi2
+	ldr	r2, [sp, #12]
+	cmp	r2, r3
+	bcs	.L4006
+	cmp	r5, #0
+	beq	.L3983
+	cmp	r7, #0
+	beq	.L3984
+	mov	r0, fp
+	mov	r1, r5
+	mov	r2, r7, asl #9
+	bl	ftl_memcpy
+	ldr	r4, [r6, #580]
+	add	r4, r4, #48
+.L3984:
+	ldr	r3, [sp, #12]
+	ldrb	r2, [r8, #2260]	@ zero_extendqisi2
+	add	r7, r7, r3
+	cmp	r7, r2
+	ldrcs	r4, [r6, #580]
+	addcs	r4, r4, #16
+	bcs	.L4006
+	rsb	r2, r7, r2
+	mov	r1, r7, asl #9
+	add	r0, fp, r1
+	add	r1, r5, r1
+	mov	r2, r2, asl #9
+	bl	ftl_memcpy
+	b	.L4006
+.L3983:
+	ldr	r3, [sp, #24]
+	cmn	r3, #1
+	beq	.L3986
+	mov	r0, #1
+	bl	buf_alloc
+	mov	r1, #1
+	ldr	r3, [sp, #24]
+	mov	r5, r0
+	str	r9, [r0, #20]
+	str	r3, [r0, #24]
+	bl	sblk_read_page
+	ldr	r3, [r5, #12]
+	ldr	r10, [r3, #12]
+	ldr	r3, [r3, #4]
+	add	r10, r10, #1
+	cmp	r3, r9
+	bne	.L3987
+	ldr	r3, [r5, #36]
+	cmn	r3, #1
+	bne	.L3988
+.L3987:
+	ldr	r2, [r8, #580]
+	ldr	r0, .L4031+24
+	ldr	r3, [r2, #552]
+	add	r3, r3, #1
+	str	r3, [r2, #552]
+	ldr	r3, [r5, #36]
+	ldrb	r1, [r5, #1]	@ zero_extendqisi2
+	ldr	r2, [sp, #24]
+	str	r3, [sp]
+	mov	r3, r9
+	bl	printk
+	mov	r2, #4
+	ldr	r0, .L4031+28
+	mov	r3, r2
+	ldr	r1, [r5, #12]
+	bl	rknand_print_hex
+.L3988:
+	ldr	r3, [r5, #12]
+	ldr	r3, [r3, #4]
+	cmp	r3, r9
+	bne	.L3989
+	ldr	r3, [r5, #36]
+	cmn	r3, #1
+	bne	.L3990
+.L3989:
+	ldr	r1, .L4031+12
+	movw	r2, #581
+	ldr	r0, .L4031+16
+	bl	printk
+	bl	dump_stack
+.L3990:
+	cmp	r7, #0
+	beq	.L3991
+	ldr	r3, [sp, #24]
+	mov	r2, r7, asl #9
+	cmn	r3, #1
+	beq	.L3992
+	mov	r0, fp
+	ldr	r1, [r5, #4]
+	bl	ftl_memcpy
+	b	.L3993
+.L3986:
+	cmp	r7, #0
+	moveq	r5, r7
+	moveq	r10, r7
+	beq	.L3991
+	mov	r2, r7, asl #9
+	mov	r10, r5
+.L3992:
+	mov	r0, fp
+	mov	r1, #0
+	bl	ftl_memset
+.L3993:
+	ldr	r4, [r6, #580]
+	add	r4, r4, #48
+.L3991:
+	ldr	r3, [sp, #12]
+	ldrb	r2, [r6, #2260]	@ zero_extendqisi2
+	add	r7, r7, r3
+	cmp	r7, r2
+	bcc	.L3994
+	ldrhi	r4, [r6, #580]
+	addhi	r4, r4, #16
+	b	.L3995
+.L3994:
+	ldr	r3, [sp, #24]
+	rsb	r2, r7, r2
+	mov	r7, r7, asl #9
+	cmn	r3, #1
+	mov	r2, r2, asl #9
+	beq	.L3996
+	ldr	r1, [r5, #4]
+	add	r0, fp, r7
+	add	r1, r1, r7
+	bl	ftl_memcpy
+	b	.L3995
+.L3996:
+	add	r0, fp, r7
+	mov	r1, #0
+	bl	ftl_memset
+.L3995:
+	cmp	r5, #0
+	beq	.L3982
+	ldrb	r3, [r5, #2]	@ zero_extendqisi2
+	mov	r1, r5
+	ldr	r0, .L4031+32
+	bic	r3, r3, #8
+	strb	r3, [r5, #2]
+	bl	buf_remove_buf
+	mov	r0, r5
+	bl	zbuf_free
+	b	.L3982
+.L4006:
+	mov	r10, #0
+.L3982:
+	ldrh	r3, [r4, #6]
+	cmp	r3, #0
+	bne	.L3997
+	bl	ftl_flush
+	mov	r0, r4
+	bl	ftl_alloc_new_data_sblk
+.L3997:
+	mov	r0, r4
+	ldr	r5, .L4031+20
+	bl	ftl_get_new_free_page
+	mov	r3, #48
+	ldr	r2, [sp, #16]
+	ldr	ip, [sp, #8]
+	mul	r3, r3, r2
+	add	r2, r8, r3
+	ldr	r1, [r2, #740]
+	str	r9, [ip, #4]
+	str	r10, [ip, #12]
+	str	r1, [ip]
+	ldr	r1, [sp, #24]
+	str	r1, [ip, #8]
+	str	r1, [r2, #752]
+	mvn	r1, #0
+	strb	r1, [r2, #724]
+	ldrb	r1, [r2, #726]	@ zero_extendqisi2
+	str	r0, [r2, #748]
+	orr	r1, r1, #10
+	strb	r1, [r2, #726]
+	ldr	r2, .L4031+8
+	ldrh	r10, [r4, #10]
+	ldrh	r9, [r4, #12]
+	add	r3, r2, r3
+	ldr	r0, .L4031+36
+	add	r9, r10, r9
+	ldr	r1, [sp, #20]
+	sub	r9, r9, #1
+	strh	r9, [r3, #32]	@ movhi
+	bl	buf_add_tail
+	ldrb	r3, [r8, #2285]	@ zero_extendqisi2
+	add	r3, r3, #1
+	strb	r3, [r8, #2285]
+	bl	timer_get_time
+	ldrb	r3, [r8, #2285]	@ zero_extendqisi2
+	ldrh	r2, [r4, #6]
+	cmp	r3, #2
+	str	r0, [r5, #-3236]
+	bhi	.L3998
+	cmp	r2, #1
+	bne	.L3970
+.L3998:
+	ldrb	r1, [r4, #5]	@ zero_extendqisi2
+	mov	lr, #48
+	ldrb	r0, [r5, #-3239]	@ zero_extendqisi2
+	cmp	r1, #0
+	mov	r1, #0
+	moveq	ip, #1
+	movne	ip, #2
+	cmp	r2, #1
+	mov	r2, r0
+	moveq	ip, r3
+.L4002:
+	cmp	r1, ip
+	mlane	r2, lr, r2, r6
+	addne	r1, r1, #1
+	ldrneb	r2, [r2, #724]	@ zero_extendqisi2
+	bne	.L4002
+.L4030:
+	strb	r2, [r5, #-3239]
+	uxtb	r1, r1
+	ldr	r2, .L4031+8
+	rsb	r3, r1, r3
+	strb	r3, [r8, #2285]
+	mov	r3, #48
+	mla	r0, r3, r0, r2
+	bl	sblk_prog_page
+	ldrh	r3, [r4, #6]
+	cmp	r3, #1
+	bne	.L3970
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	mov	r0, r4
+	bl	ftl_write_last_log_page
+	mov	r0, r4
+	bl	ftl_alloc_new_data_sblk
+.L3970:
+	ldrb	r4, [r6, #2284]	@ zero_extendqisi2
+	cmp	r4, #0
+	bne	.L3968
+	bl	ftl_write_completed
+	mov	r0, r4
+.L3973:
+	ldr	r3, .L4031
+	ldr	r2, [sp, #28]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L4005
+	bl	__stack_chk_fail
+.L4005:
+	add	sp, sp, #36
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4032:
+	.align	2
+.L4031:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+724
+	.word	.LANCHOR1+2144
+	.word	.LC0
+	.word	.LANCHOR3
+	.word	.LC299
+	.word	.LC230
+	.word	.LANCHOR0+3533
+	.word	.LANCHOR3-3239
+	.fnend
+	.size	ftl_write_commit, .-ftl_write_commit
+	.align	2
+	.global	gc_do_copy_back
+	.type	gc_do_copy_back, %function
+gc_do_copy_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L4181
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r3, [r3]
+	str	r3, [sp, #84]
+	ldr	r3, .L4181+4
+	ldrb	r0, [r3, #2945]	@ zero_extendqisi2
+	ldr	r9, [r3, #580]
+	cmp	r0, #0
+	bne	.L4034
+	mov	r7, r3
+	bl	buf_alloc
+	subs	r4, r0, #0
+	beq	.L4033
+	ldr	r6, .L4181+8
+	ldrh	r5, [r6, #22]
+	mov	r0, r5
+	add	r5, r5, #1
+	bl	gc_get_src_ppa_from_index
+	mov	r1, #1
+	strh	r5, [r6, #22]	@ movhi
+	str	r0, [r4, #24]
+	mov	r9, r0
+	mov	r0, r4
+	bl	sblk_read_page
+	ldr	r3, [r4, #36]
+	cmn	r3, #1
+	cmpne	r3, #512
+	bne	.L4036
+	ldr	r1, .L4181+12
+	mov	r2, #864
+	ldr	r0, .L4181+16
+	bl	printk
+	bl	dump_stack
+.L4036:
+	ldr	r3, [r4, #12]
+	ldr	r5, [r3, #4]
+	mov	r0, r5
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #56]
+	bne	.L4037
+	mov	r0, r5
+	add	r1, sp, #56
+	mov	r2, #0
+	bl	pm_log2phys
+.L4037:
+	ldr	r8, [sp, #56]
+	cmp	r8, r9
+	bne	.L4038
+	ldr	r1, .L4181+20
+	mov	r3, #0
+.L4041:
+	add	r2, r1, r3
+	ldr	r0, [r2, #20]
+	cmp	r0, r5
+	bne	.L4039
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	tst	r2, #2
+	beq	.L4039
+	mov	r0, r4
+	bl	zbuf_free
+	ldr	r3, .L4181+24
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4033
+	mov	r1, r5
+	mov	r2, r8
+	ldrh	r3, [r6, #22]
+	ldr	r0, .L4181+28
+	bl	printk
+	b	.L4033
+.L4039:
+	add	r3, r3, #48
+	cmp	r3, #1536
+	bne	.L4041
+	mov	r3, #0
+	strb	r3, [r4, #41]
+	ldrb	r3, [r7, #2260]	@ zero_extendqisi2
+	str	r5, [r4, #20]
+	strb	r3, [r4, #40]
+	ldrb	r3, [r4, #2]	@ zero_extendqisi2
+	orr	r3, r3, #10
+	strb	r3, [r4, #2]
+	ldr	r3, [r4, #12]
+	ldr	r3, [r3]
+	str	r3, [r4, #16]
+	ldr	r3, .L4181+24
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4042
+	mov	r0, r5
+	ldr	r9, [sp, #56]
+	bl	lpa_hash_get_ppa
+	mov	r1, r5
+	str	r8, [sp]
+	mov	r3, r0
+	ldrh	r2, [r6, #22]
+	ldr	r0, .L4181+32
+	str	r2, [sp, #4]
+	mov	r2, r9
+	bl	printk
+.L4042:
+	mov	r0, r4
+	bl	ftl_gc_write_buf
+	bl	ftl_write_commit
+	ldr	r2, [r7, #2288]
+	ldr	r3, [r2, #60]
+	add	r3, r3, #1
+	str	r3, [r2, #60]
+	ldrh	r3, [r6, #24]
+	add	r3, r3, #1
+	strh	r3, [r6, #24]	@ movhi
+	b	.L4033
+.L4038:
+	ldr	r3, .L4181+24
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4044
+	mov	r0, r5
+	bl	lpa_hash_get_ppa
+	mov	r1, r5
+	str	r9, [sp]
+	mov	r3, r0
+	ldrh	r2, [r6, #22]
+	ldr	r0, .L4181+32
+	str	r2, [sp, #4]
+	mov	r2, r8
+	bl	printk
+.L4044:
+	mov	r0, r4
+	bl	zbuf_free
+	b	.L4033
+.L4034:
+	ldrb	r4, [r3, #2937]	@ zero_extendqisi2
+	ldr	r7, .L4181+8
+	cmp	r4, #3
+	ldrb	fp, [r9, #89]	@ zero_extendqisi2
+	bne	.L4045
+	ldrb	r2, [r3, #684]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L4046
+	movw	r3, #566
+	mov	r1, fp
+	ldrh	r8, [r7, r3]
+	mov	r0, r8
+	bl	__aeabi_idiv
+	ldr	r3, .L4181+36
+	ldrb	r2, [r3, #-2503]	@ zero_extendqisi2
+	cmp	r2, #0
+	uxth	r5, r0
+	beq	.L4047
+	ldr	r3, .L4181+40
+	mov	r0, r0, asl #1
+	ldrh	r3, [r3, r0]
+	cmp	r3, #0
+	moveq	r4, #1
+	movne	r4, #2
+	b	.L4048
+.L4047:
+	ldrb	r3, [r3, #-2502]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r4, #1
+	beq	.L4048
+	sub	r3, r5, #62
+	cmp	r3, #2160
+	movcs	r4, #2
+	bcs	.L4048
+	mov	r1, r4
+	mov	r0, r5
+	bl	__aeabi_uidivmod
+	uxth	r1, r1
+	cmp	r1, #0
+	movne	r4, #1
+	moveq	r4, #2
+.L4048:
+	smulbb	r1, r5, fp
+	rsb	r1, r1, r8
+	b	.L4173
+.L4046:
+	ldrb	r3, [r3, #2944]	@ zero_extendqisi2
+	cmp	r3, #0
+	movw	r3, #566
+	ldrh	r8, [r7, r3]
+	mov	r0, r8
+	beq	.L4050
+	add	r1, fp, fp, asl #1
+	sub	fp, fp, fp, asl #2
+	bl	__aeabi_idiv
+	uxth	r5, r0
+	smulbb	r1, fp, r5
+	add	r1, r8, r1
+.L4173:
+	uxth	r3, r1
+	str	r3, [sp, #36]
+	b	.L4051
+.L4050:
+	mov	r1, fp
+	bl	__aeabi_idiv
+	ldr	r2, .L4181+44
+	mov	r3, r0, asl #1
+	smulbb	r0, r0, fp
+	ldrh	r10, [r2, r3]
+	and	r3, r10, #7
+	str	r3, [sp, #32]
+	rsb	r0, r0, r8
+	mov	r5, r10, lsr #3
+	uxth	r3, r0
+	str	r3, [sp, #36]
+	mla	fp, fp, r5, r3
+	ldr	r3, [sp, #32]
+	cmp	r3, #1
+	add	fp, fp, fp, asl #1
+	uxth	r8, fp
+	bne	.L4052
+	b	.L4051
+.L4045:
+	ldrb	r3, [r3, #2938]	@ zero_extendqisi2
+	mov	r1, fp
+	cmp	r3, #0
+	movw	r3, #566
+	ldrh	r8, [r7, r3]
+	mov	r0, r8
+	bne	.L4053
+	bl	__aeabi_idiv
+	mov	r4, #1
+	uxth	r5, r0
+	smulbb	r1, r5, fp
+	rsb	r1, r1, r8
+	uxth	r3, r1
+	str	r3, [sp, #36]
+	b	.L4051
+.L4053:
+	bl	__aeabi_idiv
+	mov	r4, #2
+	uxth	r5, r0
+	smulbb	r1, r5, fp
+	rsb	r1, r1, r8
+	uxth	r3, r1
+	str	r3, [sp, #36]
+.L4051:
+	ldr	fp, .L4181+40
+	mov	r1, #0
+	ldr	ip, .L4181+36
+	add	fp, fp, r5, asl #1
+.L4054:
+	ldrb	lr, [r9, #89]	@ zero_extendqisi2
+	uxth	r0, r1
+	mul	r3, lr, r4
+	cmp	r0, r3
+	bge	.L4106
+	ldr	r3, .L4181+48
+	add	r2, r8, r0
+	ldrh	r3, [r3]
+	mul	r3, lr, r3
+	sub	r3, r3, #1
+	cmp	r2, r3
+	bne	.L4055
+	ldrb	r3, [ip, #-2503]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L4106
+	ldrh	r3, [fp]
+	cmp	r3, r5
+	bcs	.L4106
+	tst	r0, #1
+	beq	.L4106
+.L4055:
+	ldr	r3, .L4181+52
+	ldr	r3, [r3, #-3312]
+	ldr	lr, [r3, r2, asl #2]
+	cmn	lr, #1
+	bne	.L4056
+	ldrh	r10, [r7, #22]
+	ldrh	lr, [r7, #20]
+	cmp	lr, r10
+	bls	.L4033
+	ldrb	lr, [ip, #-2503]	@ zero_extendqisi2
+	cmp	lr, #0
+	beq	.L4057
+	ldrh	lr, [fp]
+	cmp	lr, r5
+	bcs	.L4057
+	tst	r0, #1
+	ldrne	r0, [r3, lr, asl #2]
+	strne	r0, [r3, r2, asl #2]
+	bne	.L4056
+.L4057:
+	mov	r0, r10
+	str	ip, [sp, #48]
+	str	r1, [sp, #44]
+	add	r10, r10, #1
+	str	r3, [sp, #40]
+	str	r2, [sp, #32]
+	bl	gc_get_src_ppa_from_index
+	strh	r10, [r7, #22]	@ movhi
+	ldr	r2, [sp, #32]
+	ldr	r3, [sp, #40]
+	ldr	ip, [sp, #48]
+	ldr	r1, [sp, #44]
+	str	r0, [r3, r2, asl #2]
+.L4056:
+	add	r1, r1, #1
+	b	.L4054
+.L4106:
+	mov	r3, #1
+	str	r3, [sp, #32]
+.L4052:
+	ldr	r3, .L4181+24
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4059
+	ldr	r3, .L4181+52
+	movw	r2, #566
+	ldrh	r2, [r7, r2]
+	mov	r1, r5
+	ldr	r0, .L4181+56
+	ldr	r3, [r3, #-3312]
+	str	r2, [sp]
+	ldr	r2, [r3, r8, asl #2]
+	add	r3, r3, r8, asl #2
+	str	r2, [sp, #4]
+	ldr	r3, [r3, #4]
+	ldr	r2, .L4181+40
+	str	r8, [sp, #12]
+	str	r3, [sp, #8]
+	mov	r3, r5, asl #1
+	ldrh	r3, [r2, r3]
+	ldr	r2, [sp, #32]
+	str	r3, [sp, #16]
+	ldr	r3, [sp, #36]
+	bl	printk
+.L4059:
+	ldr	r1, .L4181+40
+	mov	r3, #0
+	str	r3, [sp, #40]
+	add	r3, r1, r5, asl #1
+	str	r3, [sp, #44]
+.L4060:
+	ldrb	r1, [r9, #89]	@ zero_extendqisi2
+	ldrh	r7, [sp, #40]
+	ldr	r10, .L4181+4
+	mul	r3, r1, r4
+	cmp	r7, r3
+	bge	.L4177
+	ldr	r2, [r10, #2940]
+	add	fp, r8, r7
+	ldrb	r2, [r2, fp]	@ zero_extendqisi2
+	cmp	r2, #255
+	bne	.L4061
+	mov	r0, #0
+	bl	buf_alloc
+	subs	r6, r0, #0
+	bne	.L4062
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	bl	gc_write_completed
+	bl	gc_free_temp_buf
+	mov	r0, r6
+	bl	buf_alloc
+	subs	r6, r0, #0
+	beq	.L4033
+.L4062:
+	ldrb	r1, [r6, #1]	@ zero_extendqisi2
+	ldr	r2, [r10, #2940]
+	ldrb	r3, [sp, #32]	@ zero_extendqisi2
+	ldr	ip, .L4181+48
+	strb	r1, [r2, fp]
+	ldrb	r2, [r10, #2319]	@ zero_extendqisi2
+	ldrh	r1, [ip]
+	add	r2, r2, #1
+	strb	r3, [r6, #45]
+	strb	r2, [r10, #2319]
+	add	r2, r7, r8
+	strh	r2, [r6, #32]	@ movhi
+	ldrb	r2, [r9, #89]	@ zero_extendqisi2
+	mul	r2, r2, r1
+	ldr	r1, .L4181+52
+	sub	r2, r2, #1
+	cmp	fp, r2
+	bne	.L4063
+	ldr	r2, .L4181+36
+	ldrb	r2, [r2, #-2503]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L4064
+	ldr	r3, [sp, #44]
+	ldrh	r2, [r3]
+	cmp	r2, r5
+	bcs	.L4064
+	tst	r7, #1
+	bne	.L4063
+.L4064:
+	ldr	r2, [r1, #-3316]
+	mvn	r0, #0
+	str	ip, [sp, #48]
+	str	r0, [r2, fp, asl #2]
+	ldrh	r0, [ip]
+	ldrb	r2, [r10, #2964]	@ zero_extendqisi2
+	ldr	r1, [r1, #-3316]
+	mul	r2, r2, r0
+	ldr	r0, [r6, #4]
+	mov	r2, r2, asl #2
+	bl	ftl_memcpy
+	ldrb	r3, [r10, #2964]	@ zero_extendqisi2
+	ldr	r0, [r6, #4]
+	ldr	r10, .L4181+4
+	ldr	ip, [sp, #48]
+	ldrh	r2, [ip]
+	mul	r2, r3, r2
+	ldr	r3, .L4181+36
+	ldrb	r3, [r3, #-2502]	@ zero_extendqisi2
+	cmp	r3, #0
+	mov	r2, r2, asl #2
+	ldrne	r1, .L4181+4
+	mov	r3, r2
+	add	r0, r0, r3
+	ldr	r3, .L4181+52
+	ldrneb	r1, [r1, #2260]	@ zero_extendqisi2
+	rsbne	r2, r2, r1, asl #9
+	ldr	r1, [r3, #-3312]
+	bl	ftl_memcpy
+	ldrb	r2, [r10, #2260]	@ zero_extendqisi2
+	mov	r1, #0
+	ldr	r0, [r6, #12]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r2, [r6, #12]
+	ldr	r1, .L4181+60
+	str	r1, [r2]
+	ldr	r1, .L4181+48
+	ldr	r2, [r6, #12]
+	ldrh	r0, [r1]
+	ldrb	r1, [r10, #2964]	@ zero_extendqisi2
+	mul	r1, r1, r0
+	ldr	r0, [r6, #4]
+	mov	r1, r1, asl #2
+	str	r2, [sp, #48]
+	bl	js_hash
+	ldr	r3, [r10, #580]
+	ldr	r2, [sp, #48]
+	str	r0, [r2, #4]
+	ldr	r2, [r6, #12]
+	ldr	r3, [r3, #132]
+	str	r3, [r2, #8]
+	b	.L4061
+.L4063:
+	ldr	r2, [r1, #-3312]
+	mov	r0, r6
+	mov	r1, #1
+	ldr	r2, [r2, fp, asl #2]
+	str	r2, [r6, #24]
+	bl	sblk_read_page
+	ldr	r2, [r6, #36]
+	cmn	r2, #1
+	cmpne	r2, #512
+	bne	.L4067
+	ldr	r2, .L4181+64
+	ldrb	r0, [r10, #676]	@ zero_extendqisi2
+	ldrh	r1, [r2]
+	rsb	r0, r0, #24
+	ldr	r2, [r6, #24]
+	rsb	r0, r1, r0
+	mov	r2, r2, lsr r1
+	mvn	r1, #0
+	bic	r0, r2, r1, asl r0
+	ldrb	r1, [r10, #2930]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	mov	r1, #0
+	uxth	r0, r0
+	bl	ftl_sblk_dump
+	ldr	r3, [r6, #36]
+	cmn	r3, #1
+	cmpne	r3, #512
+	ldreq	r3, [r6, #12]
+	mvneq	r2, #0
+	streq	r2, [r3, #4]
+.L4067:
+	ldr	r3, [r6, #36]
+	cmn	r3, #1
+	cmpne	r3, #512
+	bne	.L4069
+	ldr	r1, .L4181+12
+	movw	r2, #1003
+	ldr	r0, .L4181+16
+	bl	printk
+	bl	dump_stack
+.L4069:
+	ldr	r3, [r6, #12]
+	ldr	r2, .L4181+4
+	ldr	r1, [r3, #4]
+	ldr	r2, [r2, #2268]
+	cmp	r1, r2
+	mvncs	r2, #0
+	strcs	r2, [r3, #4]
+	ldr	r3, [r6, #12]
+	ldr	r2, [r3, #4]
+	ldr	r3, .L4181+52
+	ldr	r3, [r3, #-3316]
+	str	r2, [r3, fp, asl #2]
+	ldr	r3, [r6, #12]
+	ldr	r2, [r6, #24]
+	str	r2, [r3, #8]
+.L4061:
+	ldr	r0, .L4181+4
+	mov	r2, #48
+	add	ip, r0, #724
+	ldr	r3, [r0, #2940]
+	ldrb	r10, [r3, fp]	@ zero_extendqisi2
+	add	r3, sp, #88
+	add	r1, r3, r7, asl #2
+	ldrb	r3, [sp, #32]	@ zero_extendqisi2
+	mul	r2, r2, r10
+	add	ip, ip, r2
+	str	ip, [r1, #-28]
+	mov	r1, #2
+	add	r2, r0, r2
+	strh	r1, [ip, #34]	@ movhi
+	ldrb	r1, [r0, #2937]	@ zero_extendqisi2
+	strb	r3, [r2, #769]
+	cmp	r1, #3
+	bne	.L4071
+	ldrb	r1, [r0, #684]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L4072
+	ldr	r1, .L4181+36
+	and	r2, r7, #1
+	add	ip, r5, r2
+	ldrb	r1, [r1, #-2503]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L4073
+	ldr	r3, [sp, #44]
+	ldrh	r1, [r3]
+	cmp	r1, r5
+	movcs	r2, #0
+	andcc	r2, r2, #1
+	cmp	r2, #0
+	movne	ip, r1
+.L4073:
+	ldr	r2, .L4181+4
+	mov	r1, #48
+	mov	r0, r7
+	str	ip, [sp, #52]
+	mla	r2, r1, r10, r2
+	mov	r1, r4
+	str	r2, [sp, #48]
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #36]
+	ldr	ip, [sp, #52]
+	uxtah	r0, r3, r0
+	ldr	r2, [sp, #48]
+	add	r0, r9, r0, asl #1
+	ldrh	r1, [r0, #96]
+	ldr	r0, .L4181+68
+	ldrh	r0, [r0]
+	mla	ip, r0, r1, ip
+	orr	ip, ip, #50331648
+	str	ip, [r2, #748]
+	b	.L4074
+.L4072:
+	ldr	r0, .L4181+72
+	ldrh	ip, [ip, #32]
+	umull	r0, r1, r7, r0
+	mov	r3, r1, lsr #1
+	ldr	r1, [sp, #36]
+	uxtah	r1, r1, r3
+	add	r3, r3, r3, asl #1
+	rsb	r3, r3, r7
+	add	r1, r9, r1, asl #1
+	mov	r3, r3, asl #24
+	ldrh	r0, [r1, #96]
+	add	r3, r3, #16777216
+	ldr	r1, .L4181+68
+	ldrh	r1, [r1]
+	mul	r1, r1, r0
+	orr	r1, r1, r5
+	str	r1, [r2, #748]
+	ldr	r2, .L4181+52
+	orr	r1, r3, r1
+	ldr	r2, [r2, #-3308]
+	str	r1, [r2, ip, asl #2]
+	b	.L4075
+.L4071:
+	cmp	r1, #2
+	bne	.L4074
+	ldrb	r1, [r0, #2938]	@ zero_extendqisi2
+	ldr	r3, [sp, #36]
+	cmp	r1, #0
+	bne	.L4077
+	add	r1, r7, r3
+	ldr	r0, .L4181+68
+	add	r1, r9, r1, asl #1
+	ldrh	r0, [r0]
+	ldrh	r1, [r1, #96]
+	mla	r1, r0, r1, r5
+	b	.L4174
+.L4077:
+	add	r1, r3, r7, lsr #1
+	ldr	r0, .L4181+68
+	add	r1, r9, r1, asl #1
+	ldrh	r0, [r0]
+	ldrh	r1, [r1, #96]
+	mla	r1, r0, r1, r5
+	and	r0, r7, #1
+	add	r1, r1, r0
+.L4174:
+	orr	r1, r1, #33554432
+	str	r1, [r2, #748]
+.L4074:
+	mov	r1, #48
+	ldr	r2, .L4181+4
+	mul	r3, r1, r10
+	add	r1, r2, r3
+	add	r2, r2, #724
+	add	r3, r2, r3
+	ldr	r1, [r1, #748]
+	ldrh	r2, [r3, #32]
+	ldr	r3, .L4181+52
+	ldr	r3, [r3, #-3308]
+	str	r1, [r3, r2, asl #2]
+.L4075:
+	ldr	r3, .L4181+24
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4078
+	ldr	r1, .L4181+4
+	add	r3, sp, #88
+	add	r3, r3, r7, asl #2
+	ldr	r0, .L4181+72
+	ldr	r2, [r3, #-28]
+	ldrb	r3, [r1, #2318]	@ zero_extendqisi2
+	ldr	r1, [r1, #2940]
+	ldrb	r1, [r1, fp]	@ zero_extendqisi2
+	str	r1, [sp]
+	ldr	r1, [r2, #24]
+	str	r1, [sp, #4]
+	ldrh	r1, [r2, #32]
+	str	r1, [sp, #8]
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	umull	r0, r1, r7, r0
+	ldr	r0, [sp, #36]
+	ubfx	r1, r1, #1, #16
+	add	r1, r0, r1
+	str	r1, [sp, #16]
+	ldr	r2, [r2, #12]
+	mov	r1, r7
+	ldr	r0, .L4181+76
+	ldr	r2, [r2, #4]
+	str	r2, [sp, #20]
+	ldr	r2, [r6, #12]
+	ldr	r2, [r2]
+	str	r2, [sp, #24]
+	ldr	r2, [sp, #32]
+	bl	printk
+.L4078:
+	ldr	r3, .L4181+36
+	ldrb	r3, [r3, #-2503]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L4079
+	ldr	r3, [sp, #44]
+	ldrh	r3, [r3]
+	cmp	r3, r5
+	bcs	.L4079
+	tst	r7, #1
+	beq	.L4079
+	ldr	r1, .L4181+4
+	mvn	r2, #0
+	ldr	r3, [r1, #2940]
+	strb	r2, [r3, fp]
+	add	r3, sp, #88
+	add	r7, r3, r7, asl #2
+	ldrb	r3, [r9, #89]	@ zero_extendqisi2
+	ldr	r1, [r1, #2940]
+	ldr	r0, [r7, #-28]
+	rsb	r3, r3, r3, asl #15
+	mov	r3, r3, asl #1
+	smulbb	r3, r3, r4
+	add	r3, r8, r3
+	uxth	r3, r3
+	strh	r3, [r0, #32]	@ movhi
+	ldrb	r0, [r0, #1]	@ zero_extendqisi2
+	strb	r0, [r1, r3]
+	ldr	r3, .L4181+52
+	ldr	r3, [r3, #-3312]
+	str	r2, [r3, fp, asl #2]
+.L4079:
+	ldr	r3, [sp, #40]
+	add	r3, r3, #1
+	str	r3, [sp, #40]
+	b	.L4060
+.L4177:
+	ldrb	r2, [r10, #2937]	@ zero_extendqisi2
+	cmp	r2, #3
+	bne	.L4081
+	ldrb	ip, [r10, #684]	@ zero_extendqisi2
+	cmp	ip, #0
+	beq	.L4178
+	mov	r0, #0
+.L4082:
+	ldrb	r2, [r9, #89]	@ zero_extendqisi2
+	uxth	r1, r0
+	add	r3, sp, #88
+	add	r0, r0, #1
+	mul	r2, r4, r2
+	sub	r2, r2, #1
+	cmp	r1, r2
+	bge	.L4179
+	add	r2, r3, r1, asl #2
+	add	r1, r3, r1, asl #2
+	ldr	r1, [r1, #-24]
+	ldr	r2, [r2, #-28]
+	ldrb	r1, [r1, #1]	@ zero_extendqisi2
+	strb	r1, [r2]
+	b	.L4082
+.L4179:
+	add	r2, r3, r2, asl #2
+	ldr	r2, [r2, #-28]
+	b	.L4175
+.L4178:
+	add	r0, sp, #88
+	ldrb	r1, [r10, #2944]	@ zero_extendqisi2
+	ldr	r2, [r0, #-28]!
+	cmp	r1, #0
+	strneb	ip, [r2, #44]
+	bne	.L4176
+	ldr	r3, [sp, #32]
+	cmp	r3, #1
+	moveq	r1, #9
+	beq	.L4089
+	ldr	r3, [sp, #32]
+	cmp	r3, #2
+	moveq	r1, #13
+.L4089:
+	strb	r1, [r2, #44]
+.L4176:
+	add	r1, sp, #72
+	ldrb	r2, [r9, #89]	@ zero_extendqisi2
+	bl	sblk_xlc_prog_pages
+	b	.L4085
+.L4081:
+	ldrb	r2, [r10, #2938]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L4171
+	ldrb	r2, [r10, #2939]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L4171
+	add	r0, sp, #60
+	bl	sblk_3d_mlc_prog_pages
+	b	.L4085
+.L4171:
+	ldrb	r1, [r9, #89]	@ zero_extendqisi2
+	uxth	r0, r2
+	add	r3, sp, #88
+	add	r2, r2, #1
+	mul	r1, r4, r1
+	sub	r1, r1, #1
+	cmp	r0, r1
+	bge	.L4180
+	add	r1, r3, r0, asl #2
+	add	r0, r3, r0, asl #2
+	ldr	r0, [r0, #-24]
+	ldr	r1, [r1, #-28]
+	ldrb	r0, [r0, #1]	@ zero_extendqisi2
+	strb	r0, [r1]
+	b	.L4171
+.L4180:
+	add	r1, r3, r1, asl #2
+	ldr	r2, [r1, #-28]
+.L4175:
+	mvn	r1, #0
+	strb	r1, [r2]
+	ldrb	r1, [r9, #89]	@ zero_extendqisi2
+	ldr	r0, [sp, #60]
+	smulbb	r1, r4, r1
+	uxtb	r1, r1
+	bl	sblk_prog_page
+.L4085:
+	ldrb	r2, [r10, #2944]	@ zero_extendqisi2
+	ldr	r1, .L4181+4
+	cmp	r2, #0
+	ldrb	r2, [r9, #89]	@ zero_extendqisi2
+	addne	r2, r2, r2, asl #1
+	bne	.L4093
+	ldrb	r0, [r1, #2938]	@ zero_extendqisi2
+	cmp	r0, #0
+	movne	r2, r2, asl #1
+	bne	.L4093
+	ldrb	r1, [r1, #684]	@ zero_extendqisi2
+	cmp	r1, #0
+	uxtheq	r2, r2
+	beq	.L4093
+	ldr	r0, .L4181+36
+	uxth	r1, r2
+	mul	r2, r4, r1
+	ldrb	r0, [r0, #-2503]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L4093
+	ldr	ip, .L4181+40
+	mov	r0, r5, asl #1
+	ldrh	r0, [ip, r0]
+	cmp	r0, r5
+	movcc	r2, r1
+.L4093:
+	ldr	r0, [r10, #2288]
+	ldr	r1, [r0, #52]
+	add	r1, r1, r2
+	str	r1, [r0, #52]
+	ldr	r0, .L4181+8
+	movw	r1, #566
+	ldrh	r4, [r0, r1]
+	add	r4, r2, r4
+	movw	r2, #2962
+	ldrh	r2, [r10, r2]
+	uxth	r4, r4
+	strh	r4, [r0, r1]	@ movhi
+	ldrb	r3, [r9, #89]	@ zero_extendqisi2
+	mul	r3, r3, r2
+	cmp	r4, r3
+	ldrge	r3, .L4181+4
+	movge	r2, #0
+	ldrge	r3, [r3, #580]
+	strgeh	r2, [r3, #86]	@ movhi
+	bl	gc_write_completed
+.L4033:
+	ldr	r3, .L4181
+	ldr	r2, [sp, #84]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L4098
+	bl	__stack_chk_fail
+.L4098:
+	add	sp, sp, #92
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4182:
+	.align	2
+.L4181:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR1+2164
+	.word	.LC0
+	.word	.LANCHOR0+724
+	.word	.LANCHOR2
+	.word	.LC300
+	.word	.LC301
+	.word	.LANCHOR5
+	.word	.LANCHOR2+1960
+	.word	.LANCHOR2+3496
+	.word	.LANCHOR0+2962
+	.word	.LANCHOR3
+	.word	.LC302
+	.word	-178307901
+	.word	.LANCHOR0+2928
+	.word	.LANCHOR0+2994
+	.word	-1431655765
+	.word	.LC303
+	.fnend
+	.size	gc_do_copy_back, .-gc_do_copy_back
+	.align	2
+	.global	zftl_do_gc
+	.type	zftl_do_gc, %function
+zftl_do_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movw	r3, #2276
+	ldr	r4, .L4379
+	cmp	r0, #1
+	.pad #44
+	sub	sp, sp, #44
+	mov	r10, r0
+	ldrh	r2, [r4, r3]
+	add	r3, r4, #2272
+	ldr	r5, [r4, #580]
+	ldrh	r7, [r3]
+	movw	r3, #2274
+	ldrh	r8, [r4, r3]
+	add	r7, r2, r7
+	uxth	r7, r7
+	bne	.L4184
+	ldr	r6, .L4379+4
+	ldr	r9, [r6, #-2476]
+	cmp	r9, #0
+	bne	.L4185
+	ldr	r3, [r6, #-2472]
+	cmp	r3, #0
+	beq	.L4184
+.L4185:
+	movw	r3, #2974
+	ldrh	r3, [r4, r3]
+	cmp	r7, r3, lsr #2
+	bls	.L4184
+	ldr	r1, .L4379
+	movw	r3, #2292
+	ldrh	r3, [r1, r3]
+	cmp	r3, r7
+	bcs	.L4184
+	bl	timer_get_time
+	add	r9, r9, #20
+	ldr	r4, [r6, #-2472]
+	add	r4, r4, #20
+	cmp	r9, r0
+	movcc	r3, #0
+	strcc	r3, [r6, #-2476]
+	bl	timer_get_time
+	cmp	r4, r0
+	ldrcc	r3, .L4379+4
+	movcc	r2, #0
+	strcc	r2, [r3, #-2472]
+	b	.L4300
+.L4184:
+	ldr	r6, .L4379+8
+	ldrb	r3, [r6, #-3322]	@ zero_extendqisi2
+	cmp	r3, #6
+	ldrls	pc, [pc, r3, asl #2]
+	b	.L4300
+.L4190:
+	.word	.L4189
+	.word	.L4191
+	.word	.L4192
+	.word	.L4193
+	.word	.L4194
+	.word	.L4301
+	.word	.L4196
+.L4189:
+	movw	r1, #2278
+	movw	r3, #2280
+	ldrh	r3, [r4, r3]
+	add	r8, r8, r2
+	ldrh	r9, [r4, r1]
+	ldrh	r1, [r5, #80]
+	uxth	r8, r8
+	add	r9, r3, r9
+	movw	r3, #65535
+	cmp	r1, r3
+	ldr	r2, .L4379
+	uxth	r9, r9
+	beq	.L4197
+	cmp	r10, #0
+	bne	.L4198
+	movw	r3, #2292
+	ldrh	r3, [r2, r3]
+	cmp	r7, r3, asl #1
+	bge	.L4300
+.L4198:
+	movw	r3, #2972
+	ldr	r0, .L4379+12
+	ldrh	r1, [r4, r3]
+	ldr	r10, .L4379
+	add	r1, r1, #1
+	uxth	r1, r1
+	strh	r1, [r4, r3]	@ movhi
+	bl	_list_get_gc_head_node
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L4200
+	ldr	r1, [r10, #576]
+	mov	r2, r0, asl #1
+	ldr	r3, [r6, #-3320]
+	ldrh	r2, [r1, r2]
+	add	r1, r10, #2960
+	add	r3, r3, #1
+	str	r3, [r6, #-3320]
+	ldrh	r1, [r1]
+	cmp	r1, r2
+	bcs	.L4201
+	add	r1, r10, #564
+	ldrh	r1, [r1]
+	cmp	r3, r1, lsr #4
+	bls	.L4200
+	movw	r3, #2294
+	ldrh	r3, [r10, r3]
+	cmp	r3, r2
+	bls	.L4200
+.L4201:
+	mov	r1, #0
+	ldrb	r2, [r4, #2945]	@ zero_extendqisi2
+	bl	gc_add_sblk
+	cmp	r0, #0
+	beq	.L4202
+	mov	r3, #1
+	strb	r3, [r6, #-3322]
+	mov	r3, #0
+	str	r3, [r6, #-3320]
+	b	.L4300
+.L4200:
+	movw	r3, #2972
+	mov	r2, #0
+	strh	r2, [r4, r3]	@ movhi
+.L4202:
+	cmp	r8, #15
+	movls	r9, #2
+	bls	.L4203
+	ldr	r2, .L4379+16
+	movw	r3, #2282
+	ldrh	r3, [r4, r3]
+	ldrh	r2, [r2]
+	cmp	r3, r2
+	movls	r3, #0
+	movhi	r3, #1
+	cmp	r9, #0
+	movne	r9, r3
+	orreq	r9, r3, #1
+	cmp	r9, #0
+	movne	r9, #2
+	moveq	r9, #1
+.L4203:
+	ldr	r3, .L4379+20
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4204
+	ldr	r3, [r4, #580]
+	ldrb	r2, [r4, #2945]	@ zero_extendqisi2
+	str	r8, [sp]
+	ldrh	r1, [r3, #124]
+	ldr	r0, .L4379+24
+	str	r1, [sp, #4]
+	ldrh	r1, [r3, #120]
+	str	r1, [sp, #8]
+	movw	r1, #2171
+	ldrh	r3, [r3, #122]
+	str	r3, [sp, #12]
+	ldrh	r3, [r5, #80]
+	str	r3, [sp, #16]
+	mov	r3, r7
+	bl	printk
+.L4204:
+	ldrb	r0, [r4, #2945]	@ zero_extendqisi2
+	mov	r1, r9
+	mov	r2, #1
+	bl	gc_search_src_blk
+	cmp	r0, #0
+	ble	.L4205
+.L4206:
+	mov	r3, #1
+	b	.L4377
+.L4205:
+	ldr	r3, .L4379
+	mov	r1, #3
+	mov	r2, #1
+	ldrb	r0, [r3, #2945]	@ zero_extendqisi2
+	bl	gc_search_src_blk
+	cmp	r0, #0
+	bgt	.L4206
+	b	.L4300
+.L4197:
+	ldr	fp, .L4379+20
+	ldr	r3, [fp]
+	str	fp, [sp, #28]
+	tst	r3, #256
+	beq	.L4207
+	ldrb	r2, [r2, #2945]	@ zero_extendqisi2
+	movw	r1, #2183
+	str	r8, [sp]
+	ldrh	r3, [r5, #124]
+	ldr	r0, .L4379+24
+	str	r3, [sp, #4]
+	ldrh	r3, [r5, #120]
+	str	r3, [sp, #8]
+	ldrh	r3, [r5, #122]
+	str	r10, [sp, #16]
+	str	r3, [sp, #12]
+	mov	r3, r7
+	bl	printk
+.L4207:
+	cmp	r10, #1
+	bne	.L4208
+	bl	gc_scan_static_data
+	ldr	r3, [r4, #580]
+	ldrh	r3, [r3, #122]
+	cmp	r3, #0
+	beq	.L4209
+.L4210:
+	mov	r3, #1
+	strb	r3, [r4, #2945]
+	b	.L4377
+.L4209:
+	bl	gc_static_wearleveling
+	cmp	r0, #0
+	bne	.L4210
+	bl	gc_block_vpn_scan
+	cmp	r8, #0
+	beq	.L4305
+	cmp	r7, r9
+	bcs	.L4213
+	ldr	r2, .L4379
+	movw	r3, #2974
+	ldrh	r3, [r2, r3]
+	cmp	r3, r7
+	bhi	.L4214
+.L4213:
+	movw	r1, #2974
+	add	r3, r7, r9
+	ldrh	r1, [r4, r1]
+	ldr	r2, .L4379
+	cmp	r3, r1
+	blt	.L4214
+	add	r3, r2, #2976
+	movw	r1, #2282
+	ldrh	r2, [r2, r1]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bcc	.L4305
+.L4214:
+	ldr	r5, .L4379
+	mov	fp, #1
+	ldr	r2, [r6, #-3320]
+	add	r1, r5, #564
+	strb	fp, [r4, #2945]
+	add	r2, r2, fp
+	str	r2, [r6, #-3320]
+	ldrh	r1, [r1]
+	cmp	r2, r1, lsr #5
+	bls	.L4216
+	movw	r2, #2282
+	ldrh	r2, [r5, r2]
+	cmp	r2, r8
+	bls	.L4216
+	ldr	r0, .L4379+12
+	mov	r1, #0
+	bl	_list_get_gc_head_node
+	movw	r2, #65535
+	cmp	r0, r2
+	beq	.L4305
+	ldr	r2, [r5, #576]
+	mov	r0, r0, asl fp
+	ldrh	r1, [r2, r0]
+	add	r2, r5, #2960
+	ldrh	r0, [r2]
+	ldrb	r2, [r5, #2964]	@ zero_extendqisi2
+	mul	r2, r2, r0
+	cmp	r1, r2
+	bgt	.L4305
+	ldr	r2, .L4379+8
+	mov	r1, #0
+	mov	r0, fp
+	str	r1, [r2, #-3320]
+	mov	r1, #2
+	b	.L4369
+.L4216:
+	ldr	r3, .L4379
+	movw	r1, #2282
+	ldrh	r1, [r4, r1]
+	add	r2, r3, #2976
+	ldrh	r2, [r2]
+	cmp	r1, r2
+	movcs	r0, #1
+	movcs	r1, #2
+	movcs	r2, r0
+	bcs	.L4370
+	movw	r2, #2278
+	ldrh	r5, [r3, r2]
+	cmp	r5, #0
+	bne	.L4220
+	movw	r2, #2280
+	ldrh	r3, [r3, r2]
+	cmp	r3, #8
+	bls	.L4212
+.L4220:
+	mov	r0, #1
+	mov	r1, r0
+.L4369:
+	mov	r2, #4
+.L4370:
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	cmp	r0, #0
+	bne	.L4206
+	b	.L4305
+.L4208:
+	movw	r3, #2292
+	ldrh	r3, [r4, r3]
+	cmp	r3, r7
+	bcc	.L4300
+.L4305:
+	mov	r5, #16
+.L4212:
+	ldr	r2, [r4, #2304]
+	ldr	r3, .L4379
+	cmp	r2, #0
+	beq	.L4221
+	mov	ip, #0
+	ldr	r0, .L4379+12
+	mov	r1, ip
+	str	ip, [r3, #2304]
+	mov	fp, #1
+	str	r3, [sp, #36]
+	strb	fp, [r3, #2945]
+	str	ip, [sp, #32]
+	bl	_list_get_gc_head_node
+	movw	lr, #65535
+	cmp	r0, lr
+	beq	.L4222
+	ldr	r3, [sp, #36]
+	mov	r1, r0, asl fp
+	ldr	ip, [sp, #32]
+	ldr	lr, [r3, #576]
+	ldrh	r1, [lr, r1]
+	cmp	r1, #8
+	bhi	.L4222
+	mov	r1, ip
+	mov	r2, fp
+	str	fp, [r3, #2304]
+	bl	gc_add_sblk
+	cmp	r0, #0
+	bne	.L4206
+.L4222:
+	ldr	r0, .L4379+28
+	mov	r1, #0
+	bl	_list_get_gc_head_node
+	movw	r2, #65535
+	ldr	fp, .L4379
+	cmp	r0, r2
+	beq	.L4223
+	ldr	r2, [fp, #576]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #4
+	bhi	.L4223
+	mov	r2, #1
+	mov	r1, #0
+	str	r2, [fp, #2304]
+	bl	gc_add_sblk
+	cmp	r0, #0
+	bne	.L4206
+.L4223:
+	mov	r1, #0
+	ldr	r0, .L4379+32
+	bl	_list_get_gc_head_node
+	movw	r1, #65535
+	ldr	fp, .L4379
+	cmp	r0, r1
+	beq	.L4221
+	ldr	r1, [fp, #576]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r1, r3]
+	cmp	r3, #4
+	bhi	.L4221
+	mov	r1, #1
+	mov	r2, #0
+	str	r1, [fp, #2304]
+	bl	gc_add_sblk
+	cmp	r0, #0
+	bne	.L4206
+.L4221:
+	ldr	lr, [r4, #580]
+	mov	r0, #1
+	ldr	fp, .L4379
+	strb	r0, [r4, #2945]
+	ldrh	ip, [lr, #124]
+	cmp	ip, #0
+	beq	.L4224
+	ldr	r3, [sp, #28]
+	mov	r2, #0
+	strb	r0, [r6, #-3322]
+	strb	r2, [fp, #2945]
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4225
+	stmia	sp, {r8, ip}
+	movw	r1, #2273
+	ldrh	r3, [lr, #120]
+	ldr	r0, .L4379+36
+	str	r3, [sp, #8]
+	ldrh	r3, [lr, #122]
+	str	r3, [sp, #12]
+	mov	r3, r7
+	bl	printk
+	b	.L4225
+.L4224:
+	movw	r2, #2292
+	ldrh	r1, [fp, r2]
+	cmp	r7, r1
+	bcs	.L4226
+	cmp	r8, #0
+	beq	.L4227
+	cmp	r8, #16
+	bls	.L4228
+	add	r2, fp, #2976
+	movw	r1, #2282
+	ldrh	r1, [fp, r1]
+	ldrh	r2, [r2]
+	cmp	r1, r2
+	bhi	.L4228
+	mov	r1, r0
+	mov	r2, #4
+	str	ip, [sp, #28]
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	ldr	ip, [sp, #28]
+	cmp	r0, #0
+	ldreqb	r0, [fp, #2945]	@ zero_extendqisi2
+	beq	.L4375
+	ldr	r0, .L4379+12
+	mov	r1, ip
+	bl	_list_get_gc_head_node
+	movw	r2, #65535
+	cmp	r0, r2
+	beq	.L4298
+	ldr	ip, [fp, #576]
+	mov	r1, r0, asl #1
+	ldr	r2, [r6, #-3320]
+	ldrh	r1, [ip, r1]
+	add	ip, fp, #2960
+	add	r2, r2, #1
+	str	r2, [r6, #-3320]
+	ldrh	ip, [ip]
+	cmp	ip, r1
+	bcs	.L4232
+	add	ip, fp, #564
+	ldrh	ip, [ip]
+	cmp	r2, ip, lsr #4
+	bls	.L4298
+	movw	r2, #2294
+	ldrh	r3, [fp, r2]
+	cmp	r3, r1
+	bls	.L4298
+.L4232:
+	mov	r1, #0
+	ldrb	r2, [r4, #2945]	@ zero_extendqisi2
+	bl	gc_add_sblk
+	mov	r3, #1
+	str	r3, [r4, #2304]
+	mov	r3, #0
+	str	r3, [r6, #-3320]
+	b	.L4298
+.L4228:
+	mov	r0, #1
+	mov	r1, #2
+	mov	r2, r0
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	cmp	r0, #0
+	ldreqb	r0, [r4, #2945]	@ zero_extendqisi2
+	bne	.L4298
+	b	.L4373
+.L4227:
+	ldr	r3, [sp, #28]
+	strb	r8, [fp, #2945]
+	ldr	r3, [r3]
+	tst	r3, #256
+	beq	.L4234
+	str	r8, [sp]
+	movw	r1, #2303
+	str	r8, [sp, #4]
+	mov	r2, r8
+	ldrh	r3, [lr, #120]
+	ldr	r0, .L4379+36
+	str	r3, [sp, #8]
+	ldrh	r3, [lr, #122]
+	str	r3, [sp, #12]
+	mov	r3, r7
+	bl	printk
+.L4234:
+	cmp	r7, #16
+	ldrb	r0, [r4, #2945]	@ zero_extendqisi2
+	bls	.L4235
+.L4375:
+	mov	r1, #3
+	mov	r2, #4
+	b	.L4372
+.L4235:
+	mov	r1, #1
+	mov	r2, r1
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	cmp	r0, #0
+	bne	.L4298
+	ldr	r3, .L4379
+	ldrb	r0, [r3, #2945]	@ zero_extendqisi2
+.L4373:
+	mov	r1, #3
+	mov	r2, #2
+.L4372:
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	b	.L4230
+.L4226:
+	cmp	r10, #1
+	bne	.L4225
+	cmp	r7, r1, asl #1
+	bge	.L4236
+	cmp	r9, r8, lsr #1
+	bcs	.L4237
+	add	r1, fp, #2976
+	movw	r0, #2282
+	ldrh	r0, [fp, r0]
+	ldrh	r1, [r1]
+	cmp	r0, r1
+	movwcc	r1, #2974
+	ldrcch	r1, [fp, r1]
+	movcc	r1, r1, lsr #2
+	strcch	r1, [fp, r2]	@ movhi
+	bcc	.L4225
+.L4237:
+	ldr	r2, .L4379
+	mov	r1, #0
+	ldr	r0, .L4379+12
+	str	r2, [sp, #28]
+	bl	_list_get_gc_head_node
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r10, r0
+	ldr	r2, [sp, #28]
+	bne	.L4238
+.L4243:
+	cmp	r8, #1
+	bhi	.L4239
+	b	.L4240
+.L4238:
+	add	r1, r2, #564
+	ldr	r3, [r6, #-3320]
+	ldr	fp, .L4379+8
+	ldrh	r1, [r1]
+	add	r3, r3, #1
+	str	r3, [r6, #-3320]
+	cmp	r3, r1, lsr #4
+	mov	r3, r0, asl #1
+	bls	.L4241
+	ldr	ip, [r2, #576]
+	movw	lr, #2294
+	ldrh	r2, [r2, lr]
+	mov	r1, #0
+	str	r1, [fp, #-3320]
+	ldrh	ip, [ip, r3]
+	cmp	ip, r2
+	bcs	.L4241
+	mov	r2, #1
+	str	r3, [sp, #28]
+	bl	gc_add_sblk
+	ldr	r3, [sp, #28]
+	cmp	r0, #0
+	movne	r3, #1
+	strneb	r3, [fp, #-3322]
+	bne	.L4225
+.L4241:
+	ldr	r1, [r4, #576]
+	ldr	r2, .L4379
+	ldrh	r1, [r1, r3]
+	add	r3, r2, #2960
+	ldrh	r3, [r3]
+	cmp	r1, r3, lsr #1
+	bhi	.L4242
+	mov	r0, r10
+	mov	r1, #1
+	mov	r2, #0
+	bl	gc_add_sblk
+	b	.L4298
+.L4242:
+	movw	r3, #2278
+	movw	r0, #2280
+	ldrh	r0, [r2, r0]
+	ldrh	r3, [r2, r3]
+	add	r3, r3, r0
+	movw	r0, #2974
+	ldrh	r0, [r2, r0]
+	cmp	r3, r0, asl #1
+	ble	.L4243
+	movw	r3, #2294
+	ldrh	r3, [r2, r3]
+	cmp	r3, r1
+	bcc	.L4240
+	b	.L4243
+.L4239:
+	cmp	r8, #16
+	mov	r0, #1
+	ldr	r10, .L4379
+	strb	r0, [r4, #2945]
+	bls	.L4244
+	add	r3, r10, #2976
+	movw	r2, #2282
+	ldrh	r2, [r10, r2]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bhi	.L4244
+	mov	r1, r0
+	mov	r2, #4
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	cmp	r0, #0
+	ldreqb	r0, [r10, #2945]	@ zero_extendqisi2
+	moveq	r1, #3
+	moveq	r2, #4
+	bne	.L4245
+	b	.L4371
+.L4244:
+	mov	r0, #1
+	mov	r1, #2
+	mov	r2, r0
+	bl	gc_search_src_blk
+	uxth	r0, r0
+	cmp	r0, #0
+	bne	.L4245
+	ldrb	r0, [r4, #2945]	@ zero_extendqisi2
+	mov	r1, #3
+	mov	r2, #2
+.L4371:
+	bl	gc_search_src_blk
+	uxth	r0, r0
+.L4245:
+	movw	r3, #2974
+	cmp	r7, r9, lsr #1
+	ldrh	r3, [r4, r3]
+	movw	r2, #2292
+	movhi	r3, r3, lsr #2
+	movls	r3, r3, lsr #1
+	strh	r3, [r4, r2]	@ movhi
+	b	.L4230
+.L4240:
+	cmp	r7, r9
+	bcs	.L4247
+	ldr	r0, .L4379+32
+	mov	r1, #4
+	mov	r8, #0
+	strb	r8, [r4, #2945]
+	bl	_list_get_gc_head_node
+	movw	r3, #65535
+	ldr	r7, .L4379
+	cmp	r0, r3
+	beq	.L4248
+	ldr	r3, [r7, #576]
+	mov	r0, r0, asl #1
+	ldrh	r2, [r3, r0]
+	add	r3, r7, #2960
+	ldrh	r1, [r3]
+	ldrb	r3, [r7, #2964]	@ zero_extendqisi2
+	mul	r3, r3, r1
+	cmp	r2, r3, asr #1
+	ble	.L4249
+.L4248:
+	movw	r3, #2974
+	movw	r2, #2292
+	ldrh	r3, [r7, r3]
+	mov	r3, r3, lsr #2
+	strh	r3, [r7, r2]	@ movhi
+	b	.L4225
+.L4249:
+	mov	r2, #4
+	mov	r0, r8
+	mov	r1, #3
+	bl	gc_search_src_blk
+	movw	r3, #2974
+	ldrh	r3, [r7, r3]
+	movw	r2, #2292
+	mov	r3, r3, lsr #1
+	strh	r3, [r7, r2]	@ movhi
+	uxth	r0, r0
+	b	.L4230
+.L4247:
+	movw	r3, #2974
+	movw	r2, #2292
+	ldrh	r3, [r4, r3]
+	mov	r3, r3, lsr #2
+	strh	r3, [r4, r2]	@ movhi
+	b	.L4225
+.L4236:
+	movw	r1, #2974
+	mov	r5, ip
+	ldrh	r1, [fp, r1]
+	mov	r1, r1, lsr #2
+	strh	r1, [fp, r2]	@ movhi
+	b	.L4225
+.L4230:
+	cmp	r0, #0
+	beq	.L4225
+.L4298:
+	mov	r3, #1
+	strb	r3, [r6, #-3322]
+	b	.L4225
+.L4191:
+	movw	r5, #2312
+	movw	r3, #65535
+	ldrh	r2, [r4, r5]
+	cmp	r2, r3
+	bne	.L4250
+	bl	gc_get_src_blk
+	ldr	r3, .L4379
+	strh	r0, [r3, r5]	@ movhi
+.L4250:
+	movw	r3, #2312
+	movw	r0, #65535
+	ldrh	r1, [r4, r3]
+	ldr	r2, .L4379
+	cmp	r1, r0
+	beq	.L4251
+	add	r0, r2, #564
+	ldrh	r0, [r0]
+	cmp	r0, r1
+	mvnls	r1, #0
+	strlsh	r1, [r2, r3]	@ movhi
+.L4251:
+	movw	r3, #2312
+	movw	r2, #65535
+	ldrh	r3, [r4, r3]
+	cmp	r3, r2
+	beq	.L4378
+	ldr	r1, .L4379+56
+	ldr	r2, .L4379
+	ldrh	r0, [r1, #52]
+	ldr	r2, [r2, #568]
+	cmp	r0, #0
+	addne	ip, r1, #52
+	add	r2, r2, r3, asl #2
+	movne	r1, #0
+	beq	.L4253
+.L4254:
+	uxth	lr, r1
+	cmp	lr, r0
+	bcs	.L4253
+	ldrh	lr, [ip, #2]!
+	add	r1, r1, #1
+	cmp	lr, r3
+	bne	.L4254
+.L4258:
+	movw	r3, #2312
+	mvn	r2, #0
+	strh	r2, [r4, r3]	@ movhi
+	b	.L4300
+.L4253:
+	ldrb	r2, [r2, #2]	@ zero_extendqisi2
+	tst	r2, #192
+	and	r2, r2, #224
+	moveq	r1, #1
+	movne	r1, #0
+	cmp	r2, #224
+	movne	r2, r1
+	orreq	r2, r1, #1
+	cmp	r2, #0
+	beq	.L4256
+	ldr	r2, [r4, #576]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L4258
+	ldr	r1, .L4379+64
+	movw	r2, #2538
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+	b	.L4258
+.L4256:
+	mov	r3, #2
+	b	.L4377
+.L4192:
+	bl	gc_scan_src_blk
+	cmn	r0, #1
+	moveq	r3, #3
+	beq	.L4377
+	movw	r3, #2312
+	ldr	r2, .L4379+56
+	ldrh	r3, [r4, r3]
+	movw	r1, #65535
+	cmp	r3, r1
+	mov	r7, r2
+	beq	.L4206
+	ldrh	r1, [r2, #20]
+	cmp	r1, #0
+	movne	r3, #4
+	strneb	r3, [r6, #-3322]
+	movne	r3, #0
+	strneh	r3, [r2, #22]	@ movhi
+	bne	.L4300
+.L4260:
+	mov	r2, #1
+	strb	r2, [r6, #-3322]
+	ldr	r2, .L4379
+	mov	r3, r3, asl #1
+	ldr	r2, [r2, #576]
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L4261
+	ldr	r1, .L4379+64
+	movw	r2, #2566
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+.L4261:
+	movw	r5, #2312
+	ldr	r6, .L4379+56
+	ldrh	r0, [r4, r5]
+	bl	ftl_free_sblk
+	ldrh	r3, [r4, r5]
+	ldr	r2, [r4, #576]
+	mov	r5, #0
+	mov	r3, r3, asl #1
+	strh	r5, [r2, r3]	@ movhi
+	ldrh	r3, [r7, #26]
+	add	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #8
+	strlsh	r3, [r6, #26]	@ movhi
+	bls	.L4258
+	strh	r5, [r6, #26]	@ movhi
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	r0, r5
+	bl	ftl_info_flush
+	b	.L4258
+.L4193:
+	ldr	r8, .L4379+56
+.L4346:
+	bl	gc_scan_src_blk_one_page
+	ldr	r0, .L4379
+	ldrh	r2, [r8, #2]
+	add	r3, r0, #2960
+	ldr	r5, .L4379+56
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bcs	.L4264
+	cmp	r7, #7
+	bls	.L4346
+	b	.L4300
+.L4264:
+	ldrh	r3, [r5, #20]
+	ldr	r2, .L4379+20
+	cmp	r3, #0
+	beq	.L4265
+	ldr	r2, [r2]
+	mov	r1, #4
+	strb	r1, [r6, #-3322]
+	mov	r1, #0
+	tst	r2, #256
+	strh	r1, [r5, #22]	@ movhi
+	beq	.L4266
+	ldrh	r1, [r5]
+	ldr	ip, [r0, #576]
+	ldr	r0, .L4379+40
+	mov	r2, r1, asl #1
+	ldrh	r2, [ip, r2]
+	bl	printk
+.L4266:
+	movw	r3, #2312
+	ldr	r2, [r4, #576]
+	ldrh	r3, [r4, r3]
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	ldrh	r3, [r5, #20]
+	cmp	r2, r3
+	beq	.L4267
+	ldr	r1, .L4379+64
+	movw	r2, #2600
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+.L4267:
+	movw	r3, #2312
+	ldrh	r1, [r5, #20]
+	ldrh	r3, [r4, r3]
+	ldr	r2, [r4, #576]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	b	.L4300
+.L4265:
+	mov	r3, #1
+	strb	r3, [r6, #-3322]
+	ldr	r3, [r2]
+	ldrh	r1, [r5]
+	ldr	r7, [r0, #568]
+	tst	r3, #256
+	add	r7, r7, r1, asl #2
+	beq	.L4268
+	ldrb	r2, [r7, #2]	@ zero_extendqisi2
+	ldr	r0, .L4379+44
+	mov	r2, r2, lsr #5
+	bl	printk
+.L4268:
+	ldrb	r3, [r7, #2]	@ zero_extendqisi2
+	tst	r3, #192
+	and	r3, r3, #224
+	moveq	r2, #1
+	movne	r2, #0
+	cmp	r3, #224
+	movne	r3, r2
+	orreq	r3, r2, #1
+	cmp	r3, #0
+	beq	.L4269
+	ldr	r1, .L4379+64
+	movw	r2, #2610
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+.L4269:
+	movw	r7, #2312
+	ldr	r6, .L4379+56
+	ldrh	r0, [r4, r7]
+	bl	ftl_free_sblk
+	mvn	r3, #0
+	strh	r3, [r4, r7]	@ movhi
+	ldrh	r3, [r5, #26]
+	add	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #8
+	strlsh	r3, [r6, #26]	@ movhi
+	movhi	r3, #0
+	strhih	r3, [r6, #26]	@ movhi
+	bls	.L4300
+	b	.L4376
+.L4194:
+	cmp	r10, #0
+	bne	.L4271
+	movw	r3, #2292
+	ldrh	r3, [r4, r3]
+	cmp	r3, r7
+	bcc	.L4300
+.L4271:
+	ldrh	r2, [r5, #80]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L4272
+	ldrb	r8, [r4, #2945]	@ zero_extendqisi2
+	cmp	r8, #1
+	bne	.L4272
+	ldr	r9, .L4379+56
+	bl	ftl_flush
+	movw	r3, #570
+	mov	r1, #5
+	ldrh	r0, [r9, r3]
+	cmp	r0, #0
+	movne	r0, r8
+	bl	zftl_gc_get_free_sblk
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r7, r0
+	beq	.L4275
+	ldr	r8, [r4, #568]
+	add	r8, r8, r0, asl #2
+	ldrb	r3, [r8, #2]	@ zero_extendqisi2
+	tst	r3, #224
+	beq	.L4276
+	ldr	r1, .L4379+64
+	movw	r2, #2639
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+.L4276:
+	ldrb	r3, [r8, #2]	@ zero_extendqisi2
+	and	r3, r3, #15
+	orr	r3, r3, #176
+	strb	r3, [r8, #2]
+.L4299:
+	mov	r0, r7
+	mov	r1, #1
+	bl	ftl_erase_sblk
+	mov	r3, #5
+	add	r1, r5, #96
+	strb	r3, [r5, #84]
+	mov	r0, r7
+	ldr	r10, .L4379+48
+	bl	ftl_get_blk_list_in_sblk
+	mov	r8, #0
+	strh	r7, [r5, #80]	@ movhi
+	mov	r1, #255
+	mov	fp, r10
+	strh	r8, [r5, #82]	@ movhi
+	ldrh	r3, [fp], #-80
+	strb	r8, [r5, #85]
+	strh	r8, [r5, #90]	@ movhi
+	uxtb	r0, r0
+	strb	r0, [r5, #89]
+	smulbb	r0, r3, r0
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	strh	r0, [r5, #86]	@ movhi
+	movw	r5, #2962
+	ldrh	r2, [r4, r5]
+	ldr	r0, [r6, #-3316]
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r4, r5]
+	ldrb	r3, [r4, #2964]	@ zero_extendqisi2
+	mov	r1, #255
+	ldr	r0, [r6, #-3312]
+	mul	r2, r3, r2
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r3, [r4, r5]
+	ldrb	r2, [r4, #2964]	@ zero_extendqisi2
+	mov	r1, #255
+	ldr	r0, [r4, #2940]
+	mvn	r5, #0
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldr	r3, [r4, #580]
+	strh	r5, [r3, #128]	@ movhi
+	strh	r5, [r3, #130]	@ movhi
+	str	r7, [r3, #132]
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	ldr	r3, [r4, #2288]
+	mov	r0, r8
+	strh	r8, [r9, #52]	@ movhi
+	strh	r7, [r3, #126]	@ movhi
+	movw	r3, #566
+	strh	r8, [r9, r3]	@ movhi
+	strh	r8, [fp]	@ movhi
+	strh	r8, [r10, #-76]	@ movhi
+	str	r5, [r4, #2888]
+	bl	ftl_info_flush
+	b	.L4300
+.L4272:
+	cmp	r10, #1
+	ldr	r9, .L4379
+	ldr	r10, .L4379+56
+	movne	r8, #1
+	moveq	r8, #4
+	cmp	r7, #15
+	addls	r8, r8, #4
+.L4279:
+	sub	r8, r8, #1
+	uxtb	r8, r8
+	cmp	r8, #255
+	beq	.L4300
+	bl	gc_do_copy_back
+	ldrb	r3, [r4, #2945]	@ zero_extendqisi2
+	ldr	r7, .L4379+56
+	cmp	r3, #0
+	bne	.L4280
+	ldrb	r3, [r9, #2262]	@ zero_extendqisi2
+	cmp	r3, #3
+	bhi	.L4281
+	bl	ftl_write_commit
+.L4281:
+	ldrh	r2, [r10, #22]
+	ldrh	r3, [r10, #20]
+	cmp	r2, r3
+	bcc	.L4279
+	mov	r3, #1
+	strb	r3, [r6, #-3322]
+	bl	ftl_write_commit
+	bl	ftl_flush
+	ldr	r3, .L4379+56
+	ldr	r2, .L4379
+	ldrh	r3, [r3]
+	ldr	r2, [r2, #576]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L4283
+	ldr	r1, .L4379+64
+	movw	r2, #2714
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+.L4283:
+	movw	r3, #2312
+	ldr	r1, [r4, #576]
+	ldrh	r0, [r4, r3]
+	mov	r2, r0, asl #1
+	ldrh	ip, [r1, r2]
+	cmp	ip, #0
+	bne	.L4284
+	strh	ip, [r1, r2]	@ movhi
+	ldr	r2, .L4379
+	ldrh	r0, [r2, r3]
+	bl	ftl_free_sblk
+	b	.L4258
+.L4284:
+	mov	r1, #0
+	mov	r2, #1
+	bl	gc_add_sblk
+	b	.L4258
+.L4380:
+	.align	2
+.L4379:
+	.word	.LANCHOR0
+	.word	.LANCHOR5
+	.word	.LANCHOR3
+	.word	.LANCHOR0+2956
+	.word	.LANCHOR0+2976
+	.word	.LANCHOR2
+	.word	.LC304
+	.word	.LANCHOR0+2948
+	.word	.LANCHOR0+2968
+	.word	.LC305
+	.word	.LC306
+	.word	.LC307
+	.word	.LANCHOR0+2960
+	.word	.LANCHOR0+2884
+	.word	.LANCHOR0+2312
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2180
+	.word	.LC0
+.L4280:
+	ldr	r3, .L4379+52
+	ldrh	r2, [r3]
+	cmp	r2, #0
+	beq	.L4285
+	mov	r5, #0
+	strh	r5, [r3]	@ movhi
+	bl	sblk_wait_write_queue_completed
+	bl	gc_write_completed
+	ldr	r3, .L4379+60
+	ldr	r0, [r3, #2888]
+	cmn	r0, #1
+	beq	.L4286
+	bl	ftl_mask_bad_block
+.L4286:
+	ldr	r3, [r4, #580]
+	str	r5, [r4, #2888]
+	strh	r5, [r7, #52]	@ movhi
+	ldrh	r0, [r3, #80]
+	bl	ftl_free_sblk
+	ldr	r0, [r4, #2320]
+	ldr	r2, [r4, #580]
+	mvn	r3, #0
+	ldr	r1, [r4, #2288]
+	cmp	r0, #0
+	strh	r3, [r2, #80]	@ movhi
+	strh	r3, [r1, #126]	@ movhi
+	strh	r3, [r2, #130]	@ movhi
+	beq	.L4287
+	bl	zbuf_free
+.L4287:
+	mov	r5, #0
+	str	r5, [r4, #2320]
+	bl	flt_sys_flush
+	ldr	r1, .L4379+64
+	mov	r2, #2752
+	ldr	r0, .L4379+68
+	strb	r5, [r6, #-3322]
+	bl	printk
+	bl	dump_stack
+	b	.L4300
+.L4285:
+	ldrh	r3, [r5, #86]
+	ldrh	r2, [r10, #22]
+	cmp	r3, #1
+	ldrh	r3, [r10, #20]
+	bls	.L4288
+	cmp	r2, r3
+	bcc	.L4279
+	mov	r3, #1
+	strb	r3, [r6, #-3322]
+	ldrh	r3, [r7, #52]
+	add	r2, r3, #1
+	strh	r2, [r7, #52]	@ movhi
+	ldrh	r2, [r7]
+	add	r3, r7, r3, asl #1
+	strh	r2, [r3, #54]	@ movhi
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+	b	.L4300
+.L4288:
+	cmp	r2, r3
+	mov	r1, #5
+	strb	r1, [r6, #-3322]
+	bcc	.L4289
+	ldrh	r3, [r7, #52]
+	add	r2, r3, #1
+	strh	r2, [r7, #52]	@ movhi
+	ldrh	r2, [r7]
+	add	r3, r7, r3, asl #1
+	strh	r2, [r3, #54]	@ movhi
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+.L4289:
+	bl	ftl_flush
+	bl	sblk_wait_write_queue_completed
+	bl	gc_write_completed
+	ldrh	r2, [r5, #80]
+	ldr	r3, [r4, #580]
+	ldr	r5, .L4379+60
+	strh	r2, [r3, #128]	@ movhi
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	ldrb	r1, [r4, #684]	@ zero_extendqisi2
+	mov	r3, #0
+	strh	r3, [r7, #12]	@ movhi
+	add	r3, r5, #2960
+	cmp	r1, #0
+	ldr	r2, .L4379+56
+	ldrh	r3, [r3]
+	movwne	r1, #2962
+	ldrneh	r1, [r5, r1]
+	strh	r3, [r7, #14]	@ movhi
+	ldrb	r3, [r4, #2937]	@ zero_extendqisi2
+	strneh	r1, [r2, #14]	@ movhi
+	movne	r1, #1
+	strh	r3, [r7, #16]	@ movhi
+	strneh	r1, [r2, #16]	@ movhi
+	cmp	r3, #2
+	bne	.L4292
+	ldrh	r3, [r7, #14]
+	mov	r3, r3, asl #1
+	strh	r3, [r7, #14]	@ movhi
+	ldrb	r3, [r4, #2938]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L4379+56
+	moveq	r2, #1
+	streqh	r2, [r3, #16]	@ movhi
+.L4292:
+	mov	r3, #0
+	strh	r3, [r7, #18]	@ movhi
+	b	.L4300
+.L4301:
+	ldr	r8, .L4379+56
+	mov	r5, #0
+.L4195:
+	bl	gc_check_data_one_wl
+	subs	fp, r0, #0
+	beq	.L4295
+	ldr	r3, .L4379+56
+	mov	r5, #0
+	strh	r5, [r3, #52]	@ movhi
+	ldr	r3, [r4, #580]
+	ldrh	r0, [r3, #80]
+	bl	ftl_free_sblk
+	ldr	r2, [r4, #580]
+	ldr	r1, [r4, #2288]
+	mvn	r3, #0
+	ldr	r0, [r4, #2320]
+	strh	r3, [r2, #80]	@ movhi
+	strh	r3, [r1, #126]	@ movhi
+	strh	r3, [r2, #130]	@ movhi
+	bl	zbuf_free
+	str	r5, [r4, #2320]
+	strb	r5, [r6, #-3322]
+.L4376:
+	bl	flt_sys_flush
+	b	.L4300
+.L4295:
+	ldrh	r2, [r8, #12]
+	ldrh	r3, [r8, #14]
+	ldr	r9, .L4379+60
+	cmp	r2, r3
+	bcc	.L4296
+	ldr	r0, [r9, #2320]
+	mov	r3, #6
+	strb	r3, [r6, #-3322]
+	bl	zbuf_free
+	str	fp, [r9, #2320]
+	b	.L4300
+.L4296:
+	cmp	r7, #15
+	bls	.L4195
+	cmp	r10, #1
+	bne	.L4300
+	add	r5, r5, #1
+	uxtb	r5, r5
+	cmp	r5, #4
+	bls	.L4195
+	b	.L4300
+.L4196:
+	bl	gc_update_l2p_map_new
+	mvn	r7, #0
+	bl	gc_free_src_blk
+	bl	ftl_flush
+	bl	pm_flush
+	strh	r7, [r5, #80]	@ movhi
+	bl	ftl_ext_info_flush
+	ldr	r3, [r4, #2288]
+	mov	r0, #0
+	strh	r7, [r3, #126]	@ movhi
+	bl	ftl_info_flush
+.L4378:
+	mov	r3, #0
+.L4377:
+	strb	r3, [r6, #-3322]
+.L4300:
+	mov	r0, #16
+	b	.L4367
+.L4225:
+	mov	r0, r5
+	b	.L4367
+.L4275:
+	ldr	r1, .L4379+64
+	movw	r2, #2645
+	ldr	r0, .L4379+68
+	bl	printk
+	bl	dump_stack
+	b	.L4299
+.L4367:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	.fnend
+	.size	zftl_do_gc, .-zftl_do_gc
+	.align	2
+	.global	zftl_write
+	.type	zftl_write, %function
+zftl_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r3
+	ldr	r3, .L4409
+	.pad #28
+	sub	sp, sp, #28
+	mov	r5, r0
+	mov	r4, r1
+	mov	r7, r2
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L4382
+	ldr	r3, [r9]
+	mov	r1, r5
+	ldr	r0, .L4409+4
+	mov	r2, r4
+	str	r3, [sp]
+	mov	r3, r7
+	bl	printk
+.L4382:
+	cmp	r5, #0
+	ldreq	r3, .L4409+8
+	moveq	r5, #24576
+	ldreq	r3, [r3, #520]
+	beq	.L4384
+.L4383:
+	cmp	r5, #3
+	bhi	.L4398
+	mov	r5, r5, asl #13
+	mov	r3, #8192
+.L4384:
+	add	r2, r4, r7
+	cmp	r2, r3
+	bhi	.L4398
+	ldr	r8, .L4409+8
+	add	r4, r5, r4
+	mov	r0, r4
+	ldrb	r5, [r8, #2260]	@ zero_extendqisi2
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	mov	r1, r5
+	mov	r10, r0
+	sub	r0, r7, #1
+	add	r0, r0, r4
+	mov	r6, r10
+	bl	__aeabi_uidiv
+	add	r3, r4, r7
+	rsb	r5, r10, r0
+	str	r0, [sp, #12]
+	add	r5, r5, #1
+	str	r3, [sp, #16]
+.L4386:
+	cmp	r5, #0
+	beq	.L4407
+	mov	r0, #0
+	bl	buf_alloc
+	subs	fp, r0, #0
+	bne	.L4387
+	bl	ftl_write_commit
+	b	.L4386
+.L4387:
+	mov	r3, #0
+	strb	r3, [fp, #41]
+	ldr	r3, [sp, #12]
+	rsb	r0, r10, r6
+	clz	r0, r0
+	ldrb	r2, [r8, #2260]	@ zero_extendqisi2
+	rsb	r1, r3, r6
+	clz	r1, r1
+	mov	r0, r0, lsr #5
+	strb	r2, [fp, #40]
+	mov	r1, r1, lsr #5
+	orrs	r3, r1, r0
+	beq	.L4390
+	cmp	r0, #0
+	beq	.L4391
+	mov	r1, r2
+	mov	r0, r4
+	str	r2, [sp, #20]
+	bl	__aeabi_uidivmod
+	ldr	r2, [sp, #20]
+	uxtb	r1, r1
+	strb	r1, [fp, #41]
+	rsb	r2, r1, r2
+	uxtb	r2, r2
+	cmp	r2, r7
+	strhib	r7, [fp, #40]
+	bhi	.L4390
+	b	.L4406
+.L4391:
+	cmp	r1, #0
+	beq	.L4390
+	smulbb	r2, r6, r2
+	ldr	r3, [sp, #16]
+	rsb	r2, r2, r3
+.L4406:
+	strb	r2, [fp, #40]
+.L4390:
+	ldrb	r0, [fp, #41]	@ zero_extendqisi2
+	sub	r5, r5, #1
+	ldrb	r2, [fp, #40]	@ zero_extendqisi2
+	ldr	r1, [fp, #4]
+	mov	r2, r2, asl #9
+	add	r0, r1, r0, asl #9
+	mov	r1, r9
+	bl	ftl_memcpy
+	ldr	r1, [r8, #2288]
+	str	r6, [fp, #20]
+	add	r6, r6, #1
+	ldr	r2, [r1, #8]
+	add	r0, r2, #1
+	str	r0, [r1, #8]
+	str	r2, [fp, #16]
+	mov	r0, fp
+	bl	ftl_write_buf
+	ldrb	r3, [fp, #40]	@ zero_extendqisi2
+	add	r9, r9, r3, asl #9
+	b	.L4386
+.L4407:
+	bl	ftl_write_commit
+	mov	r0, r5
+	mov	r1, #1
+	ldr	r4, .L4409+12
+	bl	zftl_do_gc
+.L4395:
+	ldr	r2, .L4409+16
+	ldrh	r3, [r4]
+	ldrh	r2, [r2]
+	add	r3, r3, r2
+	cmp	r3, #7
+	bgt	.L4408
+	mov	r1, #1
+	mov	r0, #0
+	bl	zftl_do_gc
+	b	.L4395
+.L4408:
+	bl	timer_get_time
+	ldr	r3, .L4409+20
+	str	r0, [r3, #-2472]
+	mov	r0, #0
+	b	.L4385
+.L4398:
+	mvn	r0, #0
+.L4385:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4410:
+	.align	2
+.L4409:
+	.word	.LANCHOR2
+	.word	.LC308
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2272
+	.word	.LANCHOR0+2276
+	.word	.LANCHOR5
+	.fnend
+	.size	zftl_write, .-zftl_write
+	.align	2
+	.global	zftl_vendor_write
+	.type	zftl_vendor_write, %function
+zftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #512
+	mov	r2, ip
+	mov	r0, #2
+	b	zftl_write
+	.fnend
+	.size	zftl_vendor_write, .-zftl_vendor_write
+	.align	2
+	.global	zftl_sys_write
+	.type	zftl_sys_write, %function
+zftl_sys_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	ip, r1
+	mov	lr, r0
+	mov	r3, r2
+	mov	r1, lr
+	mov	r0, #2
+	mov	r2, ip
+	ldr	lr, [sp], #4
+	b	zftl_write
+	.fnend
+	.size	zftl_sys_write, .-zftl_sys_write
+	.align	2
+	.global	zftl_discard
+	.type	zftl_discard, %function
+zftl_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L4465
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r2, [r3]
+	mov	r4, r1
+	ldr	r6, .L4465+4
+	add	r1, r0, r1
+	str	r3, [sp, #12]
+	str	r2, [sp, #36]
+	ldr	r2, [r6, #520]
+	cmp	r1, r2
+	mvnhi	r0, #0
+	bhi	.L4415
+	ldr	r3, .L4465+8
+	add	r8, r0, #24576
+	ldr	r10, .L4465+12
+	ldr	r2, [r3]
+	ldr	r5, [r10, #-2468]
+	tst	r2, #4096
+	str	r10, [sp, #8]
+	add	r1, r4, r5
+	str	r3, [sp, #16]
+	str	r1, [r10, #-2468]
+	beq	.L4416
+	mov	r3, #0
+	ldr	r0, .L4465+16
+	str	r3, [sp]
+	mov	r2, r8
+	mov	r3, r4
+	bl	printk
+.L4416:
+	ldr	r3, [r6, #2288]
+	ldr	r9, [r3, #8]
+	add	r2, r9, #1
+	str	r2, [r3, #8]
+	bl	ftl_write_commit
+	bl	ftl_flush
+	ldrb	r7, [r6, #2260]	@ zero_extendqisi2
+	mov	r0, r8
+	mov	r1, r7
+	bl	__aeabi_uidiv
+	mls	r10, r7, r0, r8
+	mov	r5, r0
+	cmp	r10, #0
+	beq	.L4417
+	rsb	r7, r10, r7
+	cmp	r7, r4
+	movcs	r7, r4
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #28]
+	bne	.L4418
+	mov	r0, r5
+	add	r1, sp, #28
+	mov	r2, #0
+	bl	pm_log2phys
+.L4418:
+	ldr	r3, [sp, #28]
+	uxth	fp, r7
+	cmn	r3, #1
+	beq	.L4420
+	mov	r0, #0
+	bl	buf_alloc
+	subs	r3, r0, #0
+	beq	.L4420
+	ldr	r0, [r3, #4]
+	mov	r2, fp, asl #9
+	mov	r1, #0
+	str	r5, [r3, #20]
+	strb	r10, [r3, #41]
+	add	r0, r0, r10, asl #9
+	strb	r7, [r3, #40]
+	str	r9, [r3, #16]
+	str	r3, [sp, #20]
+	bl	ftl_memset
+	ldr	r3, [sp, #20]
+	mov	r0, r3
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	ldr	r2, [r6, #2288]
+	ldr	r3, [r2, #76]
+	add	r3, r3, #1
+	str	r3, [r2, #76]
+.L4420:
+	add	r5, r5, #1
+	rsb	r4, fp, r4
+.L4417:
+	cmp	r4, #0
+	beq	.L4422
+	bl	ftl_flush
+.L4422:
+	ldr	r7, .L4465+4
+	mvn	r3, #0
+	str	r3, [sp, #32]
+	add	r10, r7, #2928
+.L4423:
+	ldrb	r3, [r6, #2260]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcc	.L4464
+	mov	r0, r5
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #28]
+	beq	.L4424
+	mov	r0, #0
+	bl	buf_alloc
+	subs	fp, r0, #0
+	beq	.L4426
+	ldrb	r2, [r7, #2260]	@ zero_extendqisi2
+	mov	r1, #0
+	str	r5, [fp, #20]
+	strb	r1, [fp, #41]
+	strb	r2, [fp, #40]
+	mov	r2, r2, asl #9
+	str	r9, [fp, #16]
+	ldr	r0, [fp, #4]
+	bl	ftl_memset
+	mov	r0, fp
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	b	.L4463
+.L4424:
+	mov	r0, r5
+	add	r1, sp, #28
+	mov	r2, #0
+	bl	pm_log2phys
+	ldr	r3, [sp, #28]
+	cmn	r3, #1
+	beq	.L4426
+	add	r1, sp, #32
+	mov	r2, #1
+	mov	r0, r5
+	bl	pm_log2phys
+	ldrb	r3, [r7, #676]	@ zero_extendqisi2
+	ldrh	r0, [r10]
+	rsb	r3, r3, #24
+	ldrb	r1, [r7, #2930]	@ zero_extendqisi2
+	rsb	r3, r0, r3
+	ldr	r2, [sp, #28]
+	mov	r2, r2, lsr r0
+	mvn	r0, #0
+	bic	r0, r2, r0, asl r3
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	bl	ftl_vpn_decrement
+.L4463:
+	ldr	r2, [r7, #2288]
+	ldr	r3, [r2, #76]
+	add	r3, r3, #1
+	str	r3, [r2, #76]
+.L4426:
+	ldrb	r3, [r6, #2260]	@ zero_extendqisi2
+	add	r5, r5, #1
+	rsb	r4, r3, r4
+	b	.L4423
+.L4464:
+	cmp	r4, #0
+	beq	.L4430
+	mov	r0, r5
+	bl	lpa_hash_get_ppa
+	cmn	r0, #1
+	str	r0, [sp, #28]
+	bne	.L4431
+	mov	r0, r5
+	add	r1, sp, #28
+	mov	r2, #0
+	bl	pm_log2phys
+.L4431:
+	ldr	r3, [sp, #28]
+	cmn	r3, #1
+	beq	.L4430
+	mov	r0, #0
+	bl	buf_alloc
+	subs	r7, r0, #0
+	beq	.L4430
+	mov	r3, #0
+	strb	r3, [r7, #41]
+	ldrb	r3, [r6, #2260]	@ zero_extendqisi2
+	str	r5, [r7, #20]
+	cmp	r4, r3
+	strb	r4, [r7, #40]
+	str	r9, [r7, #16]
+	bcc	.L4433
+	ldr	r1, .L4465+20
+	movw	r2, #1259
+	ldr	r0, .L4465+24
+	bl	printk
+	bl	dump_stack
+.L4433:
+	mov	r2, r4, asl #9
+	mov	r1, #0
+	ldr	r0, [r7, #4]
+	bl	ftl_memset
+	mov	r0, r7
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	ldr	r2, [r6, #2288]
+	ldr	r3, [r2, #76]
+	add	r3, r3, #1
+	str	r3, [r2, #76]
+.L4430:
+	ldr	r3, [sp, #8]
+	ldr	r1, [r3, #-2468]
+	cmp	r1, #8192
+	bls	.L4437
+	ldr	r3, [sp, #16]
+	ldr	r3, [r3]
+	tst	r3, #4096
+	beq	.L4434
+	mov	r3, #0
+	ldr	r0, .L4465+16
+	str	r3, [sp]
+	mov	r2, r8
+	mov	r3, r4
+	bl	printk
+.L4434:
+	ldr	r3, [sp, #8]
+	mov	r4, #0
+	str	r4, [r3, #-2468]
+	bl	flt_sys_flush
+	mov	r3, #1
+	str	r3, [r6, #2304]
+.L4437:
+	mov	r0, #0
+.L4415:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #36]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L4435
+	bl	__stack_chk_fail
+.L4435:
+	add	sp, sp, #44
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4466:
+	.align	2
+.L4465:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR5
+	.word	.LC309
+	.word	.LANCHOR1+2192
+	.word	.LC0
+	.fnend
+	.size	zftl_discard, .-zftl_discard
+	.align	2
+	.global	dump_pm_blk
+	.type	dump_pm_blk, %function
+dump_pm_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movw	ip, #698
+	ldr	r4, .L4473
+	mov	r2, #4
+	ldr	r0, .L4473+4
+	mov	r6, #0
+	ldr	r5, .L4473+8
+	movw	r7, #65535
+	ldr	r3, [r4, #2288]
+	add	r1, r3, #704
+	ldrh	r3, [r3, ip]
+	bl	rknand_print_hex
+	ldr	r1, [r4, #2288]
+	ldr	r0, .L4473+12
+	mov	r2, #2
+	add	r1, r1, #416
+	ldrh	r3, [r5]
+	bl	rknand_print_hex
+.L4468:
+	ldrh	r2, [r5]
+	uxth	r3, r6
+	cmp	r2, r3
+	bls	.L4472
+	add	r3, r3, #208
+	ldr	r2, [r4, #2288]
+	mov	r3, r3, asl #1
+	ldrh	r0, [r2, r3]
+	cmp	r0, r7
+	beq	.L4469
+	mov	r1, #0
+	bl	ftl_sblk_dump
+.L4469:
+	add	r6, r6, #1
+	b	.L4468
+.L4472:
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L4474:
+	.align	2
+.L4473:
+	.word	.LANCHOR0
+	.word	.LC267
+	.word	.LANCHOR3-3296
+	.word	.LC268
+	.fnend
+	.size	dump_pm_blk, .-dump_pm_blk
+	.align	2
+	.global	id_block_prog_msb_ff_data
+	.type	id_block_prog_msb_ff_data, %function
+id_block_prog_msb_ff_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r2
+	ldr	r5, .L4482
+	ldrb	r2, [r5, #590]	@ zero_extendqisi2
+	ldr	r3, [r5, #584]
+	cmp	r2, #0
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	bne	.L4475
+	sub	r2, r3, #5
+	mov	r8, r0
+	cmp	r3, #68
+	cmpne	r2, #2
+	mov	r9, r1
+	bls	.L4477
+	sub	r3, r3, #19
+	tst	r3, #239
+	bne	.L4475
+.L4477:
+	ldr	fp, .L4482
+	ldr	r7, .L4482+4
+.L4479:
+	ldr	r3, [r5, #584]
+	ldrh	r3, [r3, #10]
+	cmp	r3, r4
+	bls	.L4475
+	mov	r6, r4, asl #1
+	add	r10, r4, r9
+	ldr	r0, .L4482+8
+	mov	r1, r4
+	mov	r2, r10
+	ldrh	r3, [r7, r6]
+	bl	printk
+	ldrh	r2, [r7, r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L4475
+	ldr	r6, .L4482+12
+	mov	r1, #255
+	mov	r2, #16384
+	add	r4, r4, #1
+	ldr	r0, [r6, #-3272]
+	uxth	r4, r4
+	bl	ftl_memset
+	ldr	r3, [fp, #584]
+	ldr	r2, [r6, #-3272]
+	mov	r0, r8
+	mov	r1, r10
+	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	str	r3, [sp]
+	mov	r3, r2
+	bl	flash_prog_page
+	b	.L4479
+.L4475:
+	add	sp, sp, #12
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4483:
+	.align	2
+.L4482:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3800
+	.word	.LC310
+	.word	.LANCHOR3
+	.fnend
+	.size	id_block_prog_msb_ff_data, .-id_block_prog_msb_ff_data
+	.align	2
+	.global	write_idblock
+	.type	write_idblock, %function
+write_idblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 144
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L4557
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #164
+	sub	sp, sp, #164
+	ldr	r3, [r3]
+	mov	r6, r0
+	ldr	r9, .L4557+4
+	mov	r0, #256000
+	mov	r10, r1
+	mov	r7, r2
+	str	r3, [sp, #156]
+	ldr	r3, [r9, #584]
+	ldrb	r4, [r3, #9]	@ zero_extendqisi2
+	ldrh	r5, [r3, #10]
+	ldr	r3, .L4557+8
+	ldrh	r8, [r3, #30]
+	ldrb	r3, [r9]	@ zero_extendqisi2
+	str	r3, [sp, #60]
+	ldrh	r3, [sp, #60]
+	str	r3, [sp, #52]
+	ldrb	r3, [r9, #590]	@ zero_extendqisi2
+	str	r3, [sp, #68]
+	bl	ftl_malloc
+	subs	r3, r0, #0
+	str	r3, [sp, #24]
+	beq	.L4522
+	ldr	r3, .L4557+12
+	ldrb	r3, [r3, #-2486]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L4523
+	ldrb	r3, [r9]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrb	r3, [r9, #590]	@ zero_extendqisi2
+	clzne	r3, r3
+	movne	r3, r3, lsr #5
+	bne	.L4523
+	cmp	r3, #3
+	ldr	r3, [sp, #52]
+	moveq	r3, #3
+	str	r3, [sp, #52]
+	movne	r3, #0
+	moveq	r3, #2
+.L4523:
+	add	r6, r6, #508
+	mov	r0, #0
+	add	r6, r6, #3
+	str	r3, [sp, #20]
+	bl	zftl_flash_exit_slc_mode
+	ldrb	r3, [r9, #590]	@ zero_extendqisi2
+	mov	r6, r6, lsr #9
+	cmp	r6, #8
+	strb	r3, [r9]
+	bls	.L4525
+	cmp	r6, #500
+	bhi	.L4489
+	b	.L4488
+.L4525:
+	mov	r6, #8
+.L4488:
+	ldr	r2, [r10]
+	ldr	r3, .L4557+16
+	cmp	r2, r3
+	beq	.L4490
+.L4489:
+	ldr	r0, [sp, #24]
+	bl	ftl_free
+	b	.L4522
+.L4490:
+	uxth	r4, r4
+	smulbb	r1, r4, r5
+	uxth	r1, r1
+	sub	r0, r1, #1
+	add	r0, r0, r6
+	bl	__aeabi_uidiv
+	mov	r3, #0
+	movw	r2, #63871
+	str	r0, [sp, #72]
+	add	r0, r10, #254976
+	add	r0, r0, #512
+.L4494:
+	ldr	r1, [r0, #-4]!
+	cmp	r1, #0
+	bne	.L4491
+	ldr	r1, [r10, r3, asl #2]
+	add	r3, r3, #1
+	cmp	r3, #4096
+	sub	r2, r2, #1
+	movhi	r3, #0
+	cmp	r2, #4096
+	str	r1, [r0, #512]
+	bne	.L4494
+	b	.L4493
+.L4491:
+	ldr	r0, .L4557+20
+	bl	printk
+.L4493:
+	smulbb	r3, r4, r8
+	ldr	r0, .L4557+24
+	mov	r1, r7
+	mov	r2, #4
+	ldr	r4, .L4557+4
+	uxth	r3, r3
+	str	r3, [sp, #56]
+	mov	r3, #5
+	bl	rknand_print_hex
+	ldr	r0, .L4557+28
+	mov	r1, r6
+	mov	r2, r6
+	bl	printk
+	sub	r3, r7, #4
+	str	r3, [sp, #44]
+	mov	r3, #0
+	str	r3, [sp, #36]
+	str	r3, [sp, #28]
+.L4519:
+	ldr	r3, .L4557+12
+	ldrb	r3, [r3, #-2486]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L4495
+	ldr	r3, [sp, #44]
+	ldr	r1, [sp, #72]
+	ldr	r2, [r3, #4]
+	ldr	r3, [sp, #56]
+	mul	fp, r3, r2
+	ldr	r3, [sp, #28]
+	cmp	r3, #0
+	cmpne	r1, #1
+	bls	.L4496
+	ldr	r3, [sp, #44]
+	ldr	r3, [r3]
+	add	r3, r3, #1
+	cmp	r2, r3
+	bne	.L4496
+	b	.L4497
+.L4495:
+	ldr	r3, [r4, #664]
+	ldr	r2, [sp, #28]
+	add	r3, r3, r2
+	ldrb	r3, [r3, #32]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L4497
+	ldr	r2, [sp, #56]
+	mul	fp, r2, r3
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	beq	.L4496
+	ldr	r3, [sp, #28]
+	bic	r3, r3, #2
+	cmp	r3, #1
+	ldreqb	r3, [sp, #52]	@ zero_extendqisi2
+	beq	.L4555
+	mov	r0, #0
+	bl	zftl_flash_exit_slc_mode
+	mov	r3, #0
+.L4555:
+	strb	r3, [r4]
+	strb	r3, [r4, #590]
+.L4496:
+	mov	r1, #0
+	mov	r2, #512
+	ldr	r0, [sp, #24]
+	mov	r8, #0
+	bl	ftl_memset
+	ldr	r3, [r4, #584]
+	mov	r0, fp
+	ldrb	r2, [r3, #9]	@ zero_extendqisi2
+	ldrh	r7, [r3, #10]
+	ldr	r3, .L4557+8
+	mov	r1, r2
+	ldrh	r3, [r3, #30]
+	str	r2, [sp, #40]
+	ldrh	r5, [sp, #40]
+	smulbb	r7, r7, r5
+	smulbb	r5, r3, r5
+	ldrb	r3, [r4, #656]	@ zero_extendqisi2
+	strb	r8, [r4, #656]
+	str	r3, [sp, #76]
+	bl	__aeabi_uidiv
+	uxth	r7, r7
+	uxth	r5, r5
+	mov	r1, r0
+	mov	r0, r8
+	bl	flash_erase_block
+	cmp	r6, r7
+	movls	r0, #1
+	bls	.L4499
+	mov	r0, r8
+	add	r1, fp, r5
+	bl	flash_erase_block
+	mov	r0, #2
+.L4499:
+	ldr	r3, .L4557+4
+	ldr	r2, [r3, #584]
+	ldrh	r3, [r2, #10]
+	ldrb	r1, [r2, #12]	@ zero_extendqisi2
+	mov	r3, r3, asl #2
+	mul	r0, r0, r3
+	bl	__aeabi_idiv
+	mov	r1, r5
+	str	r0, [sp, #80]
+	mov	r0, fp
+	bl	__aeabi_uidivmod
+	rsb	r3, r1, fp
+	str	r1, [sp, #64]
+	cmp	fp, r3
+	str	r3, [sp, #48]
+	bne	.L4528
+	ldrb	r3, [r4, #516]	@ zero_extendqisi2
+	cmp	r3, #9
+	bne	.L4528
+	ldr	r3, .L4557+32
+	mov	r1, #0
+	mov	r2, #1024
+	ldr	r5, [r3, #-3248]
+	mov	r0, r5
+	bl	ftl_memset
+	ldr	r2, .L4557+36
+	mov	r3, #12
+	stmia	r5, {r2, r3}
+	mov	r3, #0
+	strb	r3, [r5, #16]
+	str	r3, [r5, #12]
+	ldrb	r3, [r4, #590]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrne	r3, [r4, #584]
+	ldrneb	r3, [r3, #29]	@ zero_extendqisi2
+	strneb	r3, [r5, #16]
+	mov	r3, #4
+	strb	r3, [r5, #17]
+	ldr	r3, [r4, #584]
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	ldrh	r0, [r3, #10]
+	bl	__aeabi_idiv
+	mov	r3, #0
+	mov	r1, #12
+	strb	r3, [r5, #20]
+	strh	r3, [r5, #22]	@ movhi
+	ldr	r2, [sp, #40]
+	strh	r0, [r5, #18]	@ movhi
+	add	r0, r5, #12
+	cmp	r2, #8
+	movhi	r2, #70
+	movls	r2, #16
+	strb	r2, [r5, #21]
+	bl	js_hash
+	sub	r3, r6, #4
+	str	r0, [r5, #8]
+	str	r3, [sp, #32]
+	b	.L4500
+.L4528:
+	mov	r5, #0
+	str	r6, [sp, #32]
+.L4500:
+	mov	r8, r10
+	mov	r9, #0
+.L4503:
+	ldr	r3, [sp, #80]
+	cmp	r9, r3
+	bcs	.L4556
+	ldr	r3, [sp, #64]
+	ldrb	r2, [r4, #590]	@ zero_extendqisi2
+	add	r7, r9, r3
+	ubfx	r7, r7, #2, #16
+	cmp	r2, #0
+	add	r0, r7, #1
+	mov	r1, r0, asl #1
+	add	r3, r4, r1
+	ldrh	r3, [r3, #4]
+	beq	.L4505
+	ldrb	ip, [r4, #1]	@ zero_extendqisi2
+	cmp	ip, #0
+	moveq	r3, r0
+	movne	r3, r1
+.L4505:
+	ldrb	r1, [r4, #516]	@ zero_extendqisi2
+	ldr	r0, .L4557+4
+	cmp	r1, #9
+	movw	r1, #61424
+	str	r1, [sp, #96]
+	mov	r1, r7, asl #1
+	add	r0, r0, r1
+	subne	r3, r3, #1
+	ldrh	r0, [r0, #4]
+	movne	r3, r3, asl #2
+	cmp	r2, #0
+	str	r3, [sp, #92]
+	moveq	r7, r0
+	beq	.L4509
+	ldrb	r2, [r4, #1]	@ zero_extendqisi2
+	cmp	r2, #0
+	movne	r7, r1
+.L4509:
+	ldr	r2, [sp, #40]
+	cmp	r5, #0
+	mul	r0, r2, r7
+	bne	.L4510
+	ldr	r2, [sp, #48]
+	str	r8, [sp]
+	add	ip, r0, r2
+	ldr	r2, [r8]
+	ldr	r0, .L4557+40
+	mov	r1, ip
+	str	ip, [sp, #84]
+	stmib	sp, {r2, r3}
+	movw	r3, #61424
+	mov	r2, r9
+	str	r3, [sp, #12]
+	mov	r3, r6
+	bl	printk
+	mov	r1, r8
+	ldr	ip, [sp, #84]
+	add	r2, sp, #92
+	mov	r0, ip
+	bl	fw_flash_page_prog.constprop.29
+	ldrb	r3, [r4, #590]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L4511
+	ldr	r1, [sp, #40]
+	ldr	r0, [sp, #48]
+	bl	__aeabi_uidiv
+	add	r2, r7, #1
+	uxth	r2, r2
+	mov	r1, r0
+	mov	r0, r5
+	bl	id_block_prog_msb_ff_data
+.L4511:
+	ldr	r3, [sp, #32]
+	add	r8, r8, #2048
+	add	r3, r3, #16
+	cmp	r9, r3
+	bcc	.L4512
+	ldr	r3, [sp, #32]
+	add	r3, r3, #20
+	cmp	r9, r3
+	addcc	r8, r10, #2048
+	b	.L4512
+.L4510:
+	ldr	r3, [sp, #48]
+	mov	r1, r5
+	add	r2, sp, #92
+	add	r0, r0, r3
+	bl	fw_flash_page_prog.constprop.29
+.L4512:
+	add	r9, r9, #4
+	mov	r5, #0
+	uxth	r9, r9
+	b	.L4503
+.L4556:
+	ldr	r3, .L4557+4
+	mov	r0, fp
+	ldrb	r2, [sp, #76]	@ zero_extendqisi2
+	ldr	r1, [sp, #32]
+	strb	r2, [r3, #656]
+	ldr	r2, [sp, #24]
+	bl	id_block_read_data.constprop.30
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	beq	.L4514
+	mov	r0, #0
+	bl	zftl_flash_exit_slc_mode
+	mov	r3, #0
+	strb	r3, [r4]
+	strb	r3, [r4, #590]
+.L4514:
+	ldr	r3, [sp, #32]
+	mov	r5, #0
+	mov	r8, r3, asl #7
+.L4517:
+	ldr	r3, [sp, #24]
+	ldr	r2, [r3, r5, asl #2]
+	ldr	r3, [r10, r5, asl #2]
+	cmp	r2, r3
+	beq	.L4515
+	mov	r1, #0
+	mov	r2, #512
+	ldr	r0, [sp, #24]
+	bl	ftl_memset
+	mov	r0, #0
+	mov	r1, fp
+	bl	flash_erase_block
+	cmp	r5, r8
+	bcc	.L4497
+	b	.L4516
+.L4515:
+	add	r5, r5, #1
+	cmp	r5, r8
+	bne	.L4517
+.L4516:
+	ldr	r3, [sp, #36]
+	add	r3, r3, #1
+	str	r3, [sp, #36]
+	cmp	r3, #5
+	bhi	.L4518
+.L4497:
+	ldr	r3, [sp, #28]
+	add	r3, r3, #1
+	str	r3, [sp, #28]
+	ldr	r3, [sp, #44]
+	add	r3, r3, #4
+	str	r3, [sp, #44]
+	ldr	r3, [sp, #28]
+	cmp	r3, #4
+	bne	.L4519
+.L4518:
+	mov	r0, #0
+	bl	zftl_flash_exit_slc_mode
+	ldr	r3, .L4557+4
+	mov	r0, #0
+	ldrb	r2, [sp, #60]	@ zero_extendqisi2
+	strb	r2, [r3]
+	ldr	r2, [sp, #20]
+	cmp	r2, #0
+	ldrneb	r2, [sp, #68]	@ zero_extendqisi2
+	strneb	r2, [r3, #590]
+	mov	r2, #2
+	strb	r2, [r3, #680]
+	bl	zftl_flash_enter_slc_mode
+	ldr	r0, [sp, #24]
+	bl	ftl_free
+	ldr	r3, [sp, #36]
+	clz	r0, r3
+	mov	r0, r0, lsr #5
+	rsb	r0, r0, #0
+	b	.L4485
+.L4522:
+	mvn	r0, #0
+.L4485:
+	ldr	r3, .L4557
+	ldr	r2, [sp, #156]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L4521
+	bl	__stack_chk_fail
+.L4521:
+	add	sp, sp, #164
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4558:
+	.align	2
+.L4557:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR5
+	.word	-52655045
+	.word	.LC311
+	.word	.LC312
+	.word	.LC313
+	.word	.LANCHOR3
+	.word	1179535694
+	.word	.LC314
+	.fnend
+	.size	write_idblock, .-write_idblock
+	.align	2
+	.global	CRC_32
+	.type	CRC_32, %function
+CRC_32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	ip, .L4563
+	add	r1, r0, r1
+	mov	r2, #0
+.L4560:
+	cmp	r0, r1
+	beq	.L4562
+	ldrb	r3, [r0], #1	@ zero_extendqisi2
+	eor	r3, r3, r2, lsr #24
+	add	r3, ip, r3, asl #2
+	ldr	r3, [r3, #-3920]
+	eor	r2, r3, r2, asl #8
+	b	.L4560
+.L4562:
+	mov	r0, r2
+	bx	lr
+.L4564:
+	.align	2
+.L4563:
+	.word	.LANCHOR6
+	.fnend
+	.size	CRC_32, .-CRC_32
+	.align	2
+	.global	write_loader_lba
+	.type	write_loader_lba, %function
+write_loader_lba:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	cmp	r0, #64
+	ldr	r6, .L4589
+	.pad #56
+	sub	sp, sp, #56
+	mov	r4, r0
+	mov	r7, r1
+	mov	r9, r2
+	ldr	r5, .L4589+4
+	ldr	r3, [r6]
+	str	r3, [sp, #52]
+	bne	.L4566
+	ldr	r2, [r2]
+	ldr	r3, .L4589+8
+	cmp	r2, r3
+	bne	.L4566
+	mov	r0, #256000
+	mov	r3, #1
+	strb	r3, [r5, #-2464]
+	bl	ftl_malloc
+	mov	r1, #0
+	mov	r2, #256000
+	str	r0, [r5, #-2460]
+	bl	ftl_memset
+	str	r4, [r5, #-2456]
+.L4566:
+	str	r7, [sp]
+	mov	r3, r4
+	ldr	r0, .L4589+12
+	ldr	r1, [r5, #-2460]
+	ldr	r2, [r9]
+	bl	printk
+	ldrb	r3, [r5, #-2464]	@ zero_extendqisi2
+	ldr	r10, .L4589+4
+	cmp	r3, #0
+	beq	.L4565
+	ldr	r8, [r10, #-2460]
+	cmp	r8, #0
+	beq	.L4565
+	sub	r0, r4, #64
+	cmp	r0, #500
+	bcs	.L4568
+	rsb	r2, r4, #564
+	add	r0, r8, r0, asl #9
+	cmp	r2, r7
+	mov	r1, r9
+	movcs	r2, r7
+	mov	r2, r2, asl #9
+	bl	ftl_memcpy
+	b	.L4569
+.L4568:
+	cmp	r4, #564
+	bcs	.L4577
+.L4569:
+	ldr	r3, [r5, #-2456]
+	ldr	r9, .L4589+4
+	cmp	r3, r4
+	beq	.L4575
+	mov	r0, r8
+	mov	r10, #0
+	strb	r10, [r9, #-2464]
+	bl	ftl_free
+	str	r10, [r9, #-2460]
+.L4575:
+	add	r4, r4, r7
+	str	r4, [r5, #-2456]
+	b	.L4565
+.L4577:
+	ldr	r3, .L4589+16
+	ldr	r0, [r10, #-2456]
+	ldr	r3, [r3, #584]
+	sub	r0, r0, #64
+	cmp	r0, #500
+	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	movcs	r0, #500
+	cmp	r3, #4
+	beq	.L4579
+	mov	r3, #2
+	str	r3, [sp, #12]
+	mov	r3, #3
+	str	r3, [sp, #16]
+	mov	r3, #4
+	str	r3, [sp, #20]
+	mov	r3, #5
+	str	r3, [sp, #24]
+	mov	r3, #6
+	str	r3, [sp, #28]
+	b	.L4571
+.L4579:
+	mov	r3, #0
+.L4570:
+	cmp	r0, #256
+	add	r1, sp, #12
+	mov	r2, r3, asl #1
+	movls	r2, r3
+	str	r2, [r1, r3, asl #2]
+	add	r3, r3, #1
+	cmp	r3, #5
+	bne	.L4570
+.L4571:
+	mov	r3, #61952
+.L4574:
+	ldr	r2, [r8, r3, asl #2]
+	cmp	r2, #0
+	addne	r3, r3, #2048
+	movne	r0, r3, asl #2
+	bne	.L4573
+.L4572:
+	sub	r3, r3, #1
+	cmp	r3, #4096
+	bne	.L4574
+	mov	r0, r0, asl #9
+.L4573:
+	mov	r1, r8
+	add	r2, sp, #12
+	bl	write_idblock
+	ldr	r0, [r5, #-2460]
+	mov	r8, #0
+	strb	r8, [r5, #-2464]
+	bl	ftl_free
+	str	r8, [r5, #-2460]
+	b	.L4575
+.L4565:
+	ldr	r2, [sp, #52]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L4578
+	bl	__stack_chk_fail
+.L4578:
+	add	sp, sp, #56
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L4590:
+	.align	2
+.L4589:
+	.word	__stack_chk_guard
+	.word	.LANCHOR5
+	.word	-52655045
+	.word	.LC315
+	.word	.LANCHOR0
+	.fnend
+	.size	write_loader_lba, .-write_loader_lba
+	.align	2
+	.global	FtlWrite
+	.type	FtlWrite, %function
+FtlWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r6, r2
+	sub	r2, r1, #64
+	mov	r4, r1
+	cmp	r2, #1984
+	mov	r5, r3
+	mov	r7, r0
+	movcs	r2, #0
+	movcc	r2, #1
+	cmp	r0, #0
+	movne	r2, #0
+	cmp	r2, #0
+	beq	.L4592
+	mov	r0, r1
+	mov	r2, r3
+	mov	r1, r6
+	bl	write_loader_lba
+.L4592:
+	ldr	r3, .L4597
+	mov	r0, r7
+	mov	r1, r4
+	mov	r2, r6
+	ldr	r3, [r3, #-3280]
+	ldr	ip, [r3, #24]
+	mov	r3, r5
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	bx	ip
+.L4598:
+	.align	2
+.L4597:
+	.word	.LANCHOR3
+	.fnend
+	.size	FtlWrite, .-FtlWrite
+	.align	2
+	.global	rknand_sys_storage_ioctl
+	.type	rknand_sys_storage_ioctl, %function
+rknand_sys_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 528
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #528
+	sub	sp, sp, #528
+	ldr	r5, .L4706
+	mov	r4, r1
+	mov	r6, r2
+	ldr	r3, [r5]
+	str	r3, [sp, #524]
+	ldr	r3, .L4706+4
+	cmp	r1, r3
+	beq	.L4601
+	bhi	.L4602
+	sub	r3, r3, #3456
+	sub	r3, r3, #5
+	cmp	r1, r3
+	beq	.L4603
+	bhi	.L4604
+	sub	r3, r3, #125
+	cmp	r1, r3
+	beq	.L4605
+	bhi	.L4606
+	sub	r3, r3, #237
+	cmp	r1, r3
+	bne	.L4663
+	bl	rknand_dev_flush
+	b	.L4694
+.L4606:
+	ldr	r3, .L4706+8
+	cmp	r1, r3
+	beq	.L4608
+	add	r3, r3, #1
+	cmp	r1, r3
+	beq	.L4609
+	b	.L4663
+.L4604:
+	ldr	r3, .L4706+12
+	cmp	r1, r3
+	beq	.L4610
+	bhi	.L4611
+	sub	r3, r3, #1952
+	sub	r3, r3, #9
+	cmp	r1, r3
+	beq	.L4612
+	b	.L4663
+.L4611:
+	ldr	r3, .L4706+16
+	cmp	r1, r3
+	beq	.L4610
+	add	r3, r3, #10
+	cmp	r1, r3
+	beq	.L4610
+	b	.L4663
+.L4602:
+	ldr	r3, .L4706+20
+	cmp	r1, r3
+	beq	.L4613
+	bhi	.L4614
+	sub	r3, r3, #78
+	cmp	r1, r3
+	beq	.L4615
+	bcc	.L4616
+	add	r3, r3, #21
+	cmp	r1, r3
+	beq	.L4617
+	add	r3, r3, #56
+	cmp	r1, r3
+	beq	.L4618
+	b	.L4663
+.L4614:
+	ldr	r3, .L4706+24
+	cmp	r1, r3
+	mov	r7, r3
+	beq	.L4619
+	bhi	.L4620
+	sub	r3, r3, #956
+	sub	r3, r3, #1
+	cmp	r1, r3
+	beq	.L4621
+	add	r3, r3, #956
+	cmp	r1, r3
+	beq	.L4622
+	b	.L4663
+.L4620:
+	ldr	r3, .L4706+28
+	cmp	r1, r3
+	beq	.L4622
+	add	r3, r3, #1
+	cmp	r1, r3
+	beq	.L4619
+	b	.L4663
+.L4616:
+	ldr	r0, .L4706+32
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r4, r0, #0
+	bne	.L4623
+.L4628:
+	mvn	r0, #11
+	b	.L4600
+.L4623:
+	mov	r1, r6
+	mov	r2, #512
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4700
+	ldr	r0, .L4706+36
+	ldmia	r4, {r1, r2}
+	bl	printk
+	ldr	r3, [r4, #4]
+	cmp	r3, #8
+	str	r3, [sp]
+	bhi	.L4698
+	bl	rknand_device_lock
+	mov	r2, r4
+	ldr	r0, [r4]
+	ldr	r1, [sp]
+	bl	id_block_read_data.constprop.30
+	bl	rknand_device_unlock
+	mov	r0, r6
+	mov	r1, r4
+	ldr	r2, [sp]
+	mov	r2, r2, asl #9
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	beq	.L4693
+	ldr	r0, .L4706+40
+.L4696:
+	bl	printk
+.L4698:
+	mov	r0, r4
+.L4699:
+	bl	ftl_free
+.L4697:
+	mvn	r0, #13
+	b	.L4600
+.L4615:
+	ldr	r0, .L4706+44
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r4, r0, #0
+	beq	.L4628
+	mov	r1, r6
+	mov	r2, #4096
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	beq	.L4629
+.L4700:
+	ldr	r0, .L4706+48
+	b	.L4696
+.L4629:
+	ldr	r6, .L4706+52
+	ldr	r0, .L4706+56
+	ldmia	r4, {r1, r2}
+	bl	printk
+	ldr	r7, [r6, #-2452]
+	mov	r8, r6
+	cmp	r7, #0
+	bne	.L4630
+	mov	r0, #260096
+	bl	ftl_malloc
+	cmp	r0, #0
+	str	r0, [r6, #-2452]
+	beq	.L4698
+	mov	r1, r7
+	mov	r2, #260096
+	bl	memset
+.L4630:
+	ldr	r2, [r4, #4]
+	movw	r3, #4088
+	cmp	r2, r3
+	bhi	.L4698
+	ldr	r3, [r4]
+	cmp	r3, #251904
+	bhi	.L4698
+	ldr	r0, [r8, #-2452]
+	add	r1, r4, #8
+	add	r0, r0, r3
+	bl	memcpy
+.L4693:
+	mov	r0, r4
+	bl	ftl_free
+.L4694:
+	mov	r4, #0
+	b	.L4627
+.L4618:
+	ldr	r0, .L4706+60
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r7, r0, #0
+	beq	.L4628
+	mov	r1, r6
+	mov	r2, #28
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	beq	.L4633
+	ldr	r0, .L4706+48
+	bl	printk
+	b	.L4634
+.L4633:
+	ldmia	r7, {r1, r2}
+	ldr	r0, .L4706+64
+	bl	printk
+	ldr	r1, [r7]
+	cmp	r1, #256000
+	bhi	.L4634
+	ldr	r6, .L4706+52
+	ldr	r0, [r6, #-2452]
+	cmp	r0, #0
+	beq	.L4634
+	bl	CRC_32
+	ldr	r3, [r7, #4]
+	cmp	r3, r0
+	beq	.L4636
+	mov	r0, r7
+	bl	ftl_free
+	b	.L4664
+.L4636:
+	bl	rknand_device_lock
+	ldr	r1, [r6, #-2452]
+	add	r2, r7, #8
+	ldr	r0, [r7]
+	bl	write_idblock
+	mov	r4, #0
+	bl	rknand_device_unlock
+	ldr	r0, [r6, #-2452]
+	bl	ftl_free
+	str	r4, [r6, #-2452]
+	mov	r0, r7
+	b	.L4640
+.L4634:
+	mov	r0, r7
+	b	.L4699
+.L4617:
+	ldr	r0, .L4706+68
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r7, r0, #0
+	beq	.L4628
+	bl	ReadFlashInfo
+	mov	r0, r6
+	mov	r1, r7
+	mov	r2, #11
+	b	.L4704
+.L4601:
+	ldr	r0, .L4706+72
+	bl	printk
+	bl	nand_blk_add_whole_disk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r7, r0, #0
+	beq	.L4628
+	mov	r1, #0
+	mov	r2, #64
+	bl	ftl_memset
+	mov	r0, r6
+	mov	r1, r7
+	mov	r2, #64
+	b	.L4704
+.L4613:
+	ldr	r0, .L4706+76
+	bl	printk
+	ldr	r3, .L4706+52
+	mov	r0, r6
+	mov	r2, #4
+	ldr	r3, [r3, #-2448]
+	ldr	r3, [r3, #20]
+	add	r1, sp, #528
+	str	r3, [r1, #-528]!
+.L4688:
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	bne	.L4697
+	b	.L4694
+.L4621:
+	ldr	r0, .L4706+80
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r7, r0, #0
+	beq	.L4628
+	bl	rknand_device_lock
+	mov	r1, #264
+	mov	r2, #2
+	mov	r3, r7
+	mov	r0, #16
+	bl	FtlRead
+	bl	rknand_device_unlock
+	mov	r0, r6
+	mov	r1, r7
+	mov	r2, #1024
+.L4704:
+	bl	rk_copy_to_user
+	subs	r4, r0, #0
+	mov	r0, r7
+	bne	.L4699
+.L4640:
+	bl	ftl_free
+	b	.L4627
+.L4605:
+	ldr	r0, .L4706+84
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	subs	r4, r0, #0
+	beq	.L4641
+.L4646:
+	ldr	r0, .L4706+48
+	bl	printk
+	b	.L4697
+.L4641:
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+88
+	cmp	r2, r3
+	beq	.L4642
+.L4643:
+	mvn	r4, #0
+	b	.L4627
+.L4642:
+	ldr	r3, [sp, #8]
+	cmp	r3, #512
+	bhi	.L4643
+	ldr	r7, .L4706+52
+	mov	r2, #512
+	add	r0, sp, #4
+	ldr	r1, [r7, #-2448]
+	bl	memcpy
+	ldr	r2, [r7, #-2444]
+	ldr	r3, .L4706+92
+	cmp	r2, r3
+	beq	.L4644
+	add	r0, sp, #68
+	mov	r1, r4
+	mov	r2, #128
+	str	r4, [sp, #12]
+	str	r4, [sp, #16]
+	bl	memset
+.L4644:
+	mov	r1, #0
+	mov	r2, #256
+	add	r0, sp, #260
+	str	r1, [sp, #20]
+	bl	memset
+	b	.L4702
+.L4608:
+	ldr	r0, .L4706+96
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+88
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r3, [sp, #8]
+	cmp	r3, #512
+	bhi	.L4643
+	ldr	r2, .L4706+52
+	ldr	r3, .L4706+92
+	ldr	r1, [r2, #-2444]
+	cmp	r1, r3
+	bne	.L4664
+	ldr	r3, [sp, #16]
+	sub	r1, r3, #1
+	cmp	r1, #127
+	mvnhi	r0, #2
+	bhi	.L4600
+	ldr	r4, [r2, #-2448]
+	add	r1, sp, #68
+	add	r0, r4, #64
+	str	r3, [r4, #12]
+	ldr	r2, [sp, #16]
+	bl	memcpy
+	mov	r0, #1
+	mov	r1, r4
+	b	.L4695
+.L4612:
+	ldr	r0, .L4706+100
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+104
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r3, [sp, #8]
+	cmp	r3, #512
+	bhi	.L4643
+	ldr	r6, .L4706+52
+	ldr	r3, [r6, #-2440]
+	cmp	r3, #0
+	bne	.L4647
+.L4650:
+	mov	r0, #0
+	b	.L4600
+.L4647:
+	ldr	r3, [r6, #-2436]
+	ldr	r2, .L4706+108
+	ldr	r1, [r3]
+	cmp	r1, r2
+	beq	.L4648
+	str	r2, [r3]
+	mov	r2, #504
+	ldr	r3, [r6, #-2436]
+	str	r2, [r3, #4]
+	mov	r2, #0
+	str	r2, [r3, #8]
+	str	r2, [r3, #12]
+.L4648:
+	ldr	r1, [r6, #-2436]
+	mov	r4, #0
+	mov	r0, r4
+	str	r4, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r6, #-2448]
+	ldr	r2, .L4706+88
+	ldr	r1, [r3]
+	cmp	r1, r2
+	strne	r2, [r3]
+	ldr	r7, [r6, #-2448]
+	ldrne	r3, .L4706+52
+	movne	r2, #504
+	add	r0, r7, #64
+	ldrne	r3, [r3, #-2448]
+	stmneib	r3, {r2, r4}
+	mov	r4, #0
+	mov	r1, r4
+	mov	r2, #128
+	str	r4, [r7, #12]
+	bl	memset
+	mov	r0, #1
+	mov	r1, r7
+	bl	StorageSysDataStore
+	str	r4, [r6, #-2440]
+	str	r4, [r6, #-2444]
+	b	.L4627
+.L4603:
+	ldr	r0, .L4706+112
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+116
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r3, [sp, #8]
+	cmp	r3, #512
+	bhi	.L4643
+	ldr	r6, .L4706+52
+	ldr	r3, [r6, #-2440]
+	cmp	r3, #1
+	beq	.L4650
+	ldr	r3, [r6, #-2436]
+	mov	r4, #0
+	ldr	r2, .L4706+108
+	ldr	r1, [r3]
+	cmp	r1, r2
+	strne	r2, [r3]
+	ldr	r1, [r6, #-2436]
+	ldrne	r3, [r6, #-2436]
+	movne	r2, #504
+	strne	r0, [r3, #8]
+	strne	r2, [r3, #4]
+	strne	r0, [r3, #12]
+	mov	r3, #1
+	mov	r0, #0
+	str	r3, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r6, #-2448]
+	ldr	r2, .L4706+88
+	ldr	r1, [r3]
+	cmp	r1, r2
+	strne	r2, [r3]
+	ldr	r7, [r6, #-2448]
+	ldrne	r3, .L4706+52
+	movne	r1, #504
+	movne	r2, #0
+	add	r0, r7, #64
+	ldrne	r3, [r3, #-2448]
+	stmneib	r3, {r1, r2}
+	mov	r1, r4
+	mov	r2, #128
+	str	r4, [r7, #12]
+	bl	memset
+	mov	r0, #1
+	mov	r1, r7
+	bl	StorageSysDataStore
+	mov	r3, #1
+	str	r3, [r6, #-2440]
+	b	.L4627
+.L4609:
+	ldr	r0, .L4706+120
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+124
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r2, [sp, #8]
+	cmp	r2, #512
+	addls	r0, sp, #12
+	ldrls	r1, .L4706+128
+	bls	.L4701
+	b	.L4643
+.L4610:
+	ldr	r8, .L4706+16
+	cmp	r4, r8
+	ldreq	r0, .L4706+132
+	beq	.L4691
+	ldr	r3, .L4706+136
+	cmp	r4, r3
+	ldreq	r0, .L4706+140
+	ldrne	r0, .L4706+144
+.L4691:
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+148
+	cmp	r2, r3
+	bne	.L4697
+	ldr	r3, .L4706+136
+	ldr	r7, .L4706+52
+	cmp	r4, r3
+	bne	.L4656
+	ldr	r3, [r7, #-2448]
+	mov	r0, r6
+	add	r1, sp, #4
+	mov	r2, #16
+	ldr	r3, [r3, #20]
+	str	r3, [sp, #8]
+	strb	r3, [sp, #12]
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	beq	.L4600
+	b	.L4697
+.L4656:
+	ldr	r3, [r7, #-1920]
+	cmp	r3, #10
+	bhi	.L4697
+	ldr	r1, [r7, #-2448]
+	ldr	r2, [sp, #8]
+	ldr	r3, [r1, #24]
+	cmp	r3, r2
+	cmpne	r3, #0
+	movne	r3, #1
+	moveq	r3, #0
+	beq	.L4657
+	ldr	r0, .L4706+152
+	mov	r1, r2
+	bl	printk
+	ldr	r3, [r7, #-1920]
+	add	r3, r3, #1
+	str	r3, [r7, #-1920]
+	b	.L4697
+.L4657:
+	cmp	r4, r8
+	str	r3, [r7, #-1920]
+	mov	r0, #1
+	moveq	r2, r3
+	movne	r3, #1
+	moveq	r3, r2
+	str	r2, [r1, #24]
+	str	r3, [r1, #20]
+	bl	StorageSysDataStore
+	cmn	r0, #1
+	bne	.L4694
+	mvn	r4, #1
+	b	.L4627
+.L4622:
+	ldr	r0, .L4706+156
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+160
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r2, [sp, #8]
+	cmp	r2, #504
+	bhi	.L4643
+	ldr	r3, .L4706+164
+	add	r0, sp, #12
+	cmp	r4, r3
+	ldr	r3, .L4706+52
+	ldreq	r1, [r3, #-1916]
+	ldrne	r1, [r3, #-1912]
+	add	r1, r1, #8
+.L4701:
+	bl	memcpy
+.L4702:
+	mov	r0, r6
+	add	r1, sp, #4
+	mov	r2, #520
+	b	.L4688
+.L4619:
+	ldr	r0, .L4706+168
+	bl	printk
+	mov	r1, r6
+	mov	r2, #520
+	add	r0, sp, #4
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4646
+	ldr	r2, [sp, #4]
+	ldr	r3, .L4706+160
+	cmp	r2, r3
+	bne	.L4643
+	ldr	r2, [sp, #8]
+	cmp	r2, #504
+	bhi	.L4643
+	cmp	r4, r7
+	add	r2, r2, #8
+	ldr	r4, .L4706+52
+	bne	.L4661
+	add	r1, sp, #4
+	ldr	r0, [r4, #-1916]
+	bl	memcpy
+	mov	r0, #2
+	ldr	r1, [r4, #-1916]
+	b	.L4695
+.L4661:
+	add	r1, sp, #4
+	ldr	r0, [r4, #-1912]
+	bl	memcpy
+	ldr	r1, [r4, #-1912]
+	mov	r0, #3
+.L4695:
+	bl	StorageSysDataStore
+	mov	r4, r0
+.L4627:
+	ldr	r0, .L4706+172
+	mov	r1, r4
+	bl	printk
+	mov	r0, r4
+	b	.L4600
+.L4663:
+	mvn	r0, #21
+	b	.L4600
+.L4664:
+	mvn	r0, #1
+.L4600:
+	ldr	r2, [sp, #524]
+	ldr	r3, [r5]
+	cmp	r2, r3
+	beq	.L4662
+	bl	__stack_chk_fail
+.L4662:
+	add	sp, sp, #528
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L4707:
+	.align	2
+.L4706:
+	.word	__stack_chk_guard
+	.word	1074033155
+	.word	1074029570
+	.word	1074031656
+	.word	1074031666
+	.word	1074033235
+	.word	1074034193
+	.word	1074034194
+	.word	.LC316
+	.word	.LC318
+	.word	.LC319
+	.word	.LC320
+	.word	.LC317
+	.word	.LANCHOR5
+	.word	.LC321
+	.word	.LC322
+	.word	.LC323
+	.word	.LC324
+	.word	.LC325
+	.word	.LC326
+	.word	.LC327
+	.word	.LC328
+	.word	1263358532
+	.word	-1067903959
+	.word	.LC329
+	.word	.LC330
+	.word	1112753220
+	.word	1146313043
+	.word	.LC331
+	.word	1112755781
+	.word	.LC332
+	.word	1094995539
+	.word	.LANCHOR5-2432
+	.word	.LC333
+	.word	1074031676
+	.word	.LC334
+	.word	.LC335
+	.word	1280262987
+	.word	.LC336
+	.word	.LC337
+	.word	1145980246
+	.word	1074034192
+	.word	.LC338
+	.word	.LC339
+	.fnend
+	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
+	.align	2
+	.global	rk_ftl_storage_sys_init
+	.type	rk_ftl_storage_sys_init, %function
+rk_ftl_storage_sys_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r4, .L4717
+	mov	r2, #512
+	mov	r5, #0
+	sub	r0, r4, #2432
+	ldr	r1, [r4, #-2484]
+	str	r3, [r4, #-2456]
+	add	r3, r1, #512
+	str	r3, [r4, #-2448]
+	str	r1, [r4, #-2436]
+	add	r3, r1, #1024
+	add	r1, r1, #1536
+	str	r3, [r4, #-1916]
+	strb	r5, [r4, #-2464]
+	str	r5, [r4, #-2460]
+	str	r5, [r4, #-2452]
+	str	r1, [r4, #-1912]
+	bl	ftl_memcpy
+	ldr	r0, [r4, #-2436]
+	str	r5, [r4, #-2444]
+	str	r5, [r4, #-1920]
+	ldr	r6, [r0, #508]
+	ldr	r3, [r0, #16]
+	cmp	r6, r5
+	str	r3, [r4, #-2440]
+	beq	.L4710
+	mov	r1, #508
+	bl	js_hash
+	cmp	r6, r0
+	beq	.L4710
+	ldr	r3, [r4, #-2436]
+	ldr	r0, .L4717+4
+	str	r5, [r4, #-2440]
+	str	r5, [r3, #16]
+	bl	printk
+.L4710:
+	ldr	r3, [r4, #-2440]
+	mov	r0, #2
+	ldr	r1, [r4, #-1916]
+	cmp	r3, #0
+	ldrne	r2, .L4717+8
+	ldrne	r3, .L4717
+	strne	r2, [r3, #-2444]
+	bl	StorageSysDataLoad
+	ldr	r1, [r4, #-1912]
+	mov	r0, #3
+	bl	StorageSysDataLoad
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	rknand_sys_storage_init
+.L4718:
+	.align	2
+.L4717:
+	.word	.LANCHOR5
+	.word	.LC340
+	.word	-1067903959
+	.fnend
+	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
+	.align	2
+	.global	StorageSysDataDeInit
+	.type	StorageSysDataDeInit, %function
+StorageSysDataDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r0, #0
+	bx	lr
+	.fnend
+	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r0, #65536
+	bl	ftl_malloc
+	ldr	r6, .L4731
+	cmp	r0, #0
+	str	r0, [r6, #-1908]
+	beq	.L4726
+	ldr	r9, .L4731+4
+	mov	r8, #0
+	mov	r4, r8
+	mov	r7, r8
+	mov	r10, r6
+.L4724:
+	mov	r0, r7, asl #7
+	mov	r1, #128
+	ldr	r2, [r6, #-1908]
+	bl	FlashBootVendorRead
+	cmp	r0, #0
+	bne	.L4722
+	ldr	r3, [r10, #-1908]
+	ldr	r0, .L4731+8
+	add	r2, r3, #61440
+	ldr	r1, [r3]
+	ldr	r2, [r2, #4092]
+	ldr	r3, [r3, #4]
+	bl	printk
+	ldr	r5, [r10, #-1908]
+	ldr	r3, [r5]
+	cmp	r3, r9
+	bne	.L4723
+	add	r2, r5, #61440
+	ldr	r3, [r5, #4]
+	ldr	r1, [r2, #4092]
+	cmp	r4, r3
+	movcs	r2, #0
+	movcc	r2, #1
+	cmp	r1, r3
+	movne	r2, #0
+	cmp	r2, #0
+	movne	r8, r7
+	movne	r4, r3
+.L4723:
+	cmp	r7, #1
+	movne	r7, #1
+	bne	.L4724
+.L4730:
+	cmp	r4, #0
+	beq	.L4725
+	mov	r0, r8, asl #7
+	mov	r1, #128
+	mov	r2, r5
+	bl	FlashBootVendorRead
+	cmp	r0, #0
+	bne	.L4722
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L4725:
+	mov	r0, r5
+	mov	r1, r4
+	mov	r2, #65536
+	bl	memset
+	ldr	r3, .L4731+4
+	str	r7, [r5, #4]
+	mov	r0, r4
+	str	r3, [r5]
+	add	r3, r5, #61440
+	str	r7, [r3, #4092]
+	ldr	r3, .L4731+12
+	strh	r4, [r5, #12]	@ movhi
+	strh	r3, [r5, #14]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L4722:
+	ldr	r0, [r6, #-1908]
+	bl	kfree
+	mov	r3, #0
+	mvn	r0, #0
+	str	r3, [r6, #-1908]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L4726:
+	mvn	r0, #11
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
+.L4732:
+	.align	2
+.L4731:
+	.word	.LANCHOR5
+	.word	1380668996
+	.word	.LC341
+	.word	-1032
+	.fnend
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L4740
+	ldr	ip, [r3, #-1908]
+	cmp	ip, #0
+	ldrneh	r4, [ip, #10]
+	movne	r3, #0
+	beq	.L4738
+.L4735:
+	cmp	r3, r4
+	bcs	.L4738
+	add	lr, ip, r3, asl #3
+	ldrh	r5, [lr, #16]
+	cmp	r5, r0
+	bne	.L4736
+	ldrh	r3, [lr, #20]
+	mov	r0, r1
+	ldrh	r1, [lr, #18]
+	mov	r4, r2
+	cmp	r2, r3
+	add	r1, r1, #1024
+	movcs	r4, r3
+	add	r1, ip, r1
+	mov	r2, r4
+	bl	memcpy
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L4736:
+	add	r3, r3, #1
+	b	.L4735
+.L4738:
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L4741:
+	.align	2
+.L4740:
+	.word	.LANCHOR5
+	.fnend
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r2
+	ldr	r2, .L4765
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, [r2, #-1908]
+	cmp	r4, #0
+	beq	.L4757
+	mov	r3, r1
+	add	r7, r9, #63
+	ldrh	r1, [r4, #8]
+	bic	r7, r7, #63
+	ldrh	r2, [r4, #10]
+	mov	ip, r0
+	mov	r6, #0
+	str	r1, [sp, #4]
+.L4744:
+	cmp	r6, r2
+	bcs	.L4763
+	add	r5, r4, r6, asl #3
+	ldrh	r1, [r5, #16]
+	cmp	r1, ip
+	bne	.L4745
+	ldrh	r1, [r5, #20]
+	add	fp, r4, #1024
+	add	r1, r1, #63
+	bic	r1, r1, #63
+	str	r1, [sp, #8]
+	cmp	r9, r1
+	bls	.L4746
+	ldrh	r1, [r4, #14]
+	cmp	r1, r7
+	subcs	r2, r2, #1
+	strcs	r2, [sp, #12]
+	ldrcsh	r8, [r5, #18]
+	bcc	.L4757
+.L4747:
+	ldr	r2, [sp, #12]
+	add	r5, r5, #8
+	cmp	r6, r2
+	bcs	.L4764
+	ldrh	r10, [r5, #20]
+	add	r0, fp, r8
+	ldrh	r2, [r5, #16]
+	add	r6, r6, #1
+	ldrh	r1, [r5, #18]
+	strh	r10, [r5, #12]	@ movhi
+	add	r10, r10, #63
+	bic	r10, r10, #63
+	strh	r2, [r5, #8]	@ movhi
+	strh	r8, [r5, #10]	@ movhi
+	add	r1, fp, r1
+	mov	r2, r10
+	str	r3, [sp, #20]
+	str	ip, [sp, #16]
+	bl	memcpy
+	add	r8, r8, r10
+	ldr	r3, [sp, #20]
+	ldr	ip, [sp, #16]
+	b	.L4747
+.L4764:
+	add	r6, r4, r6, asl #3
+	uxth	r8, r8
+	add	r0, fp, r8
+	mov	r1, r3
+	strh	r8, [r6, #18]	@ movhi
+	mov	r2, r9
+	strh	ip, [r6, #16]	@ movhi
+	uxth	r7, r7
+	strh	r9, [r6, #20]	@ movhi
+	add	r8, r8, r7
+	bl	memcpy
+	ldrh	r5, [r4, #14]
+	strh	r8, [r4, #12]	@ movhi
+	ldr	r3, [sp, #8]
+	add	r5, r3, r5
+	rsb	r7, r7, r5
+	strh	r7, [r4, #14]	@ movhi
+	b	.L4762
+.L4746:
+	ldrh	r0, [r5, #18]
+	mov	r1, r3
+	mov	r2, r9
+	add	r0, fp, r0
+	bl	memcpy
+	strh	r9, [r5, #20]	@ movhi
+	b	.L4762
+.L4745:
+	add	r6, r6, #1
+	b	.L4744
+.L4763:
+	ldrh	r1, [r4, #14]
+	cmp	r1, r7
+	bcc	.L4757
+	add	r2, r4, r2, asl #3
+	uxth	r7, r7
+	rsb	r1, r7, r1
+	strh	ip, [r2, #16]	@ movhi
+	ldrh	r0, [r4, #12]
+	strh	r9, [r2, #20]	@ movhi
+	strh	r0, [r2, #18]	@ movhi
+	add	r0, r7, r0
+	strh	r1, [r4, #14]	@ movhi
+	mov	r1, r3
+	strh	r0, [r4, #12]	@ movhi
+	ldrh	r0, [r2, #18]
+	mov	r2, r9
+	add	r0, r0, #1024
+	add	r0, r4, r0
+	bl	memcpy
+	ldrh	r3, [r4, #10]
+	add	r3, r3, #1
+	strh	r3, [r4, #10]	@ movhi
+.L4762:
+	ldr	r3, [r4, #4]
+	add	r2, r4, #61440
+	mov	r1, #128
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	str	r3, [r2, #4092]
+	mov	r2, r4
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #1
+	movhi	r3, #0
+	strh	r3, [r4, #8]	@ movhi
+	ldr	r3, [sp, #4]
+	mov	r0, r3, asl #7
+	bl	FlashBootVendorWrite
+	mov	r0, #0
+	b	.L4743
+.L4757:
+	mvn	r0, #0
+.L4743:
+	add	sp, sp, #28
+	@ sp needed
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L4766:
+	.align	2
+.L4765:
+	.word	.LANCHOR5
+	.fnend
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r0, #4096
+	mov	r5, r2
+	mov	r6, r1
+	bl	ftl_malloc
+	subs	r4, r0, #0
+	mvneq	r5, #0
+	beq	.L4768
+	ldr	r3, .L4784
+	cmp	r6, r3
+	beq	.L4770
+	add	r3, r3, #1
+	cmp	r6, r3
+	beq	.L4771
+	b	.L4782
+.L4770:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4782
+	ldr	r2, [r4]
+	ldr	r3, .L4784+4
+	cmp	r2, r3
+	beq	.L4773
+.L4774:
+	mvn	r5, #0
+	b	.L4769
+.L4773:
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_read
+	cmn	r0, #1
+	beq	.L4774
+	uxth	r2, r0
+	strh	r0, [r4, #6]	@ movhi
+	mov	r1, r4
+	mov	r0, r5
+	add	r2, r2, #8
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	moveq	r5, #0
+	mvnne	r5, #13
+	b	.L4769
+.L4771:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4782
+	ldr	r2, [r4]
+	ldr	r3, .L4784+4
+	cmp	r2, r3
+	bne	.L4774
+	ldrh	r2, [r4, #6]
+	movw	r3, #4087
+	cmp	r2, r3
+	bhi	.L4774
+	mov	r0, r4
+	mov	r1, r5
+	add	r2, r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L4782
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_write
+	mov	r5, r0
+	b	.L4769
+.L4782:
+	mvn	r5, #13
+.L4769:
+	mov	r0, r4
+	bl	kfree
+.L4768:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L4785:
+	.align	2
+.L4784:
+	.word	1074034177
+	.word	1448232273
+	.fnend
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
+	.global	gTable_Crc32
+	.global	SecureBootUnlockTryCount
+	.global	SecureBootCheckOK
+	.global	SecureBootEn
+	.global	gpVendor1Info
+	.global	gpVendor0Info
+	.global	g_idb_buffer
+	.global	gSnSectorData
+	.global	gpDrmKeyInfo
+	.global	gpBootConfig
+	.global	gLoaderBootInfo
+	.global	RK29_NANDC1_REG_BASE
+	.global	RK29_NANDC_REG_BASE
+	.global	gp_ftl_api
+	.global	rk_zftl_enable
+	.global	g_pm_spare
+	.global	pm_first_write
+	.global	pm_force_gc
+	.global	pm_gc_enable
+	.global	pm_last_load_ram_id
+	.global	pm_last_update_ram_id
+	.global	pm_ram_info
+	.global	sblk_gc_write_completed_queue_head
+	.global	sblk_read_completed_queue_head
+	.global	sblk_write_completed_queue_head
+	.global	sblk_queue_head
+	.global	slc_cache_sblk
+	.global	xlc_data_sblk
+	.global	slc_data_sblk
+	.global	free_mix_sblk
+	.global	free_xlc_sblk
+	.global	free_slc_sblk
+	.global	gp_data_xlc_data_head
+	.global	gp_data_slc_data_head
+	.global	gp_data_slc_cache_head
+	.global	gp_free_mix_head
+	.global	gp_free_xlc_head
+	.global	gp_free_slc_head
+	.global	gp_sblk_list_tbl
+	.global	zftl_print_list_count
+	.global	ftl_ext_info_first_write
+	.global	ftl_sys_info_first_write
+	.global	ftl_low_format_cur_blk
+	.global	ftl_power_lost_flag
+	.global	ftl_vpn_update_count
+	.global	ftl_sblk_update_list_offset
+	.global	ftl_sblk_update_list
+	.global	ftl_sblk_vpn_update_id
+	.global	ftl_sblk_lpa_tbl
+	.global	ftl_sblk_vpn
+	.global	gp_ftl_ext_info
+	.global	gp_ftl_info
+	.global	gp_blk_info
+	.global	ftl_tmp_spare
+	.global	ftl_info_spare
+	.global	ftl_ext_info_data_buffer
+	.global	ftl_info_data_buffer
+	.global	ftl_tmp_buffer
+	.global	g_ftl_info_blk
+	.global	tlc_b05a_prog_tbl
+	.global	tlc_prog_order
+	.global	gc_des_ppa_tbl
+	.global	gc_valid_page_ppa
+	.global	gc_page_buf_id
+	.global	gc_pre_ppa_tbl
+	.global	gc_lpa_tbl
+	.global	g_gc_info
+	.global	gc_xlc_search_index
+	.global	gc_xlc_data_index
+	.global	gc_slc_cache_index
+	.global	gc_slc_data_index
+	.global	gc_free_slc_sblk_th
+	.global	gc_slc_mode_vpn_th
+	.global	gc_slc_mode_tlc_vpn_th
+	.global	gc_tlc_mode_tlc_vpn_th
+	.global	gc_tlc_mode_slc_vpn_th
+	.global	gc_state
+	.global	gc_mode
+	.global	p_read_ahead_ext_buf
+	.global	discard_sector_count
+	.global	read_ahead_lpa
+	.global	read_buf_count
+	.global	read_buf_head
+	.global	write_commit_count
+	.global	write_commit_head
+	.global	write_buf_count
+	.global	write_buf_head
+	.global	ftl_flush_jiffies
+	.global	lpa_hash
+	.global	lpa_hash_index
+	.global	_c_slc_to_xlc_ec_ratio
+	.global	_c_mix_max_xlc_ec_count
+	.global	_c_mix_max_slc_ec_count
+	.global	_c_swl_xlc_gc_th
+	.global	_c_swl_slc_gc_th
+	.global	_gc_after_discard_en
+	.global	_last_write_time
+	.global	_last_read_time
+	.global	_min_slc_super_block
+	.global	_max_slc_super_block
+	.global	_max_xlc_super_block
+	.global	_c_max_pm_sblk
+	.global	_c_ftl_pm_page_num
+	.global	_c_totle_log_page
+	.global	_c_totle_data_density
+	.global	_c_user_data_density
+	.global	_c_totle_phy_density
+	.global	_c_ftl_block_addr_log2
+	.global	_c_ftl_block_align_addr
+	.global	_c_ftl_byte_pre_page
+	.global	_c_ftl_nand_blks_per_die
+	.global	_c_ftl_page_pre_slc_blk
+	.global	_c_ftl_page_pre_blk
+	.global	_c_ftl_blk_pre_plane
+	.global	_c_ftl_nand_planes_num
+	.global	_c_ftl_planes_per_die
+	.global	_c_ftl_sec_per_page
+	.global	_c_ftl_nand_die_num
+	.global	_c_ftl_nand_type
+	.global	zftl_debug
+	.global	g_flash_blk_info
+	.global	gp_flash_info
+	.global	p_free_buf_head
+	.global	free_buf_count
+	.global	g_buf
+	.global	nandc_ecc_sts
+	.global	g_nandc_v6_master_info
+	.global	nandc_randomizer_en
+	.global	nandc_hw_seed
+	.global	fill_spare_size
+	.global	g_nandc_ecc_bits
+	.global	g_nandc_tran_timeout
+	.global	g_nandc_ver
+	.global	gp_nandc
+	.global	hy_f26_ref_value
+	.global	sd15_tlc_rr
+	.global	sd15_slc_rr
+	.global	g_nand_para_info
+	.global	gp_nand_para_info
+	.global	g_nand_opt_para
+	.global	g_msb_page_tbl
+	.global	g_lsb_page_tbl
+	.global	g_die_addr
+	.global	g_die_cs_idx
+	.global	IDByte
+	.global	flash_read_retry
+	.global	_c_ftl_cs_bits
+	.global	g_maxRetryCount
+	.global	g_maxRegNum
+	.global	g_retryMode
+	.global	g_flash_toggle_mode_en
+	.global	g_flash_micron_3d_tlc_b16a
+	.global	g_flash_micron_3d_tlc_b05a
+	.global	g_flash_micron_3d_tlc_flag
+	.global	g_flash_3d_mlc_flag
+	.global	g_flash_3d_tlc_flag
+	.global	g_flash_multi_page_prog_en
+	.global	g_flash_multi_page_read_en
+	.global	g_flash_interface_mode
+	.global	g_idb_ecc_bits
+	.global	g_idb_slc_mode_enable
+	.global	g_one_pass_program
+	.global	g_slc_mode_addr2
+	.global	g_slc_mode_enable
+	.global	g_flash_cur_mode
+	.global	g_flash_slc_mode
+	.global	g_slc_page_num
+	.global	g_totle_phy_block
+	.global	g_block_align_addr
+	.global	g_flash_reversd_blks
+	.global	g_nand_max_die
+	.global	g_flash_tmp_spare_buffer
+	.global	g_flash_tmp_page_buffer
+	.global	g_flash_sys_spare_buffer
+	.global	g_flash_spare_buffer
+	.global	g_flash_page_buffer
+	.section	.rodata
+	.align	2
+.LANCHOR1 = . + 0
+	.type	__func__.38616, %object
+	.size	__func__.38616, 18
+__func__.38616:
+	.ascii	"_list_remove_node\000"
+	.space	2
+	.type	__func__.38641, %object
+	.size	__func__.38641, 23
+__func__.38641:
+	.ascii	"_list_update_data_list\000"
+	.space	1
+	.type	__func__.19719, %object
+	.size	__func__.19719, 22
+__func__.19719:
+	.ascii	"nand_flash_print_info\000"
+	.space	2
+	.type	__func__.19805, %object
+	.size	__func__.19805, 11
+__func__.19805:
+	.ascii	"nandc_init\000"
+	.space	1
+	.type	toshiba_A19ref_value, %object
+	.size	toshiba_A19ref_value, 45
+toshiba_A19ref_value:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.space	3
+	.type	toshiba_15ref_value, %object
+	.size	toshiba_15ref_value, 95
+toshiba_15ref_value:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.space	1
+	.type	toshiba_ref_value, %object
+	.size	toshiba_ref_value, 8
+toshiba_ref_value:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	__func__.19268, %object
+	.size	__func__.19268, 28
+__func__.19268:
+	.ascii	"flash_wait_device_ready_raw\000"
+	.type	__func__.19332, %object
+	.size	__func__.19332, 22
+__func__.19332:
+	.ascii	"flash_start_page_read\000"
+	.space	2
+	.type	toshiba_3D_tlc_value, %object
+	.size	toshiba_3D_tlc_value, 399
+toshiba_3D_tlc_value:
+	.byte	-119
+	.byte	-119
+	.byte	-119
+	.byte	-119
+	.byte	-118
+	.byte	-118
+	.byte	-118
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	-2
+	.byte	-1
+	.byte	0
+	.byte	-3
+	.byte	-2
+	.byte	6
+	.byte	-9
+	.byte	-12
+	.byte	-9
+	.byte	-7
+	.byte	-13
+	.byte	-12
+	.byte	-7
+	.byte	-6
+	.byte	-15
+	.byte	-15
+	.byte	-2
+	.byte	-12
+	.byte	-16
+	.byte	-6
+	.byte	-2
+	.byte	-19
+	.byte	-19
+	.byte	-6
+	.byte	-4
+	.byte	-12
+	.byte	-14
+	.byte	-2
+	.byte	-11
+	.byte	-23
+	.byte	-34
+	.byte	-4
+	.byte	-20
+	.byte	-22
+	.byte	-2
+	.byte	-7
+	.byte	-31
+	.byte	-30
+	.byte	-12
+	.byte	-20
+	.byte	-18
+	.byte	2
+	.byte	-15
+	.byte	-19
+	.byte	-36
+	.byte	-12
+	.byte	-28
+	.byte	-34
+	.byte	-6
+	.byte	-15
+	.byte	-11
+	.byte	2
+	.byte	-12
+	.byte	-8
+	.byte	-2
+	.byte	2
+	.byte	-3
+	.byte	-7
+	.byte	-10
+	.byte	-4
+	.byte	-8
+	.byte	-6
+	.byte	-6
+	.byte	-11
+	.byte	-27
+	.byte	-38
+	.byte	-16
+	.byte	-12
+	.byte	-2
+	.byte	2
+	.byte	-7
+	.byte	-31
+	.byte	-22
+	.byte	-4
+	.byte	-16
+	.byte	-22
+	.byte	-7
+	.byte	-31
+	.byte	-23
+	.byte	-22
+	.byte	-28
+	.byte	-28
+	.byte	-26
+	.byte	2
+	.byte	-7
+	.byte	-11
+	.byte	-14
+	.byte	-8
+	.byte	-12
+	.byte	-10
+	.byte	-10
+	.byte	-27
+	.byte	-25
+	.byte	-22
+	.byte	-20
+	.byte	-28
+	.byte	-22
+	.byte	-7
+	.byte	-23
+	.byte	-29
+	.byte	-34
+	.byte	-24
+	.byte	-32
+	.byte	-22
+	.byte	-10
+	.byte	-11
+	.byte	-29
+	.byte	-18
+	.byte	-12
+	.byte	-24
+	.byte	-22
+	.byte	6
+	.byte	1
+	.byte	-3
+	.byte	-6
+	.byte	0
+	.byte	-4
+	.byte	-2
+	.byte	10
+	.byte	-3
+	.byte	-7
+	.byte	-6
+	.byte	4
+	.byte	-4
+	.byte	-2
+	.byte	-10
+	.byte	-23
+	.byte	-39
+	.byte	-22
+	.byte	-19
+	.byte	-24
+	.byte	-18
+	.byte	-14
+	.byte	-23
+	.byte	-29
+	.byte	-30
+	.byte	-15
+	.byte	-30
+	.byte	-30
+	.byte	-7
+	.byte	-27
+	.byte	-35
+	.byte	-26
+	.byte	-15
+	.byte	-24
+	.byte	-26
+	.byte	6
+	.byte	-11
+	.byte	5
+	.byte	-2
+	.byte	-16
+	.byte	-16
+	.byte	-2
+	.byte	-2
+	.byte	-15
+	.byte	-15
+	.byte	-20
+	.byte	-8
+	.byte	-16
+	.byte	-18
+	.byte	6
+	.byte	5
+	.byte	-15
+	.byte	-2
+	.byte	-24
+	.byte	-28
+	.byte	-22
+	.byte	10
+	.byte	-15
+	.byte	-3
+	.byte	-30
+	.byte	-8
+	.byte	-24
+	.byte	-30
+	.byte	-10
+	.byte	-27
+	.byte	-19
+	.byte	-30
+	.byte	-12
+	.byte	-16
+	.byte	-10
+	.byte	14
+	.byte	-19
+	.byte	-3
+	.byte	-30
+	.byte	4
+	.byte	4
+	.byte	6
+	.byte	2
+	.byte	1
+	.byte	-3
+	.byte	-10
+	.byte	-8
+	.byte	-4
+	.byte	-6
+	.byte	-2
+	.byte	-15
+	.byte	-11
+	.byte	-26
+	.byte	-8
+	.byte	-20
+	.byte	-30
+	.byte	6
+	.byte	-19
+	.byte	-3
+	.byte	-46
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	6
+	.byte	9
+	.byte	5
+	.byte	2
+	.byte	4
+	.byte	8
+	.byte	6
+	.byte	8
+	.byte	9
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	8
+	.byte	6
+	.byte	10
+	.byte	13
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	12
+	.byte	10
+	.byte	2
+	.byte	5
+	.byte	1
+	.byte	-2
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	12
+	.byte	1
+	.byte	13
+	.byte	2
+	.byte	12
+	.byte	12
+	.byte	14
+	.byte	-12
+	.byte	-14
+	.byte	-20
+	.byte	-18
+	.byte	-16
+	.byte	-16
+	.byte	-14
+	.byte	-12
+	.byte	-10
+	.byte	-21
+	.byte	-14
+	.byte	-12
+	.byte	-12
+	.byte	-10
+	.byte	-12
+	.byte	-18
+	.byte	-22
+	.byte	-24
+	.byte	-18
+	.byte	-18
+	.byte	-18
+	.byte	-12
+	.byte	-14
+	.byte	-23
+	.byte	-20
+	.byte	-20
+	.byte	-20
+	.byte	-20
+	.byte	-12
+	.byte	-24
+	.byte	-24
+	.byte	-30
+	.byte	-24
+	.byte	-28
+	.byte	-28
+	.byte	-12
+	.byte	-26
+	.byte	-25
+	.byte	-34
+	.byte	-24
+	.byte	-24
+	.byte	-24
+	.byte	-12
+	.byte	-13
+	.byte	-26
+	.byte	-20
+	.byte	-14
+	.byte	-18
+	.byte	-18
+	.byte	-12
+	.byte	-15
+	.byte	-27
+	.byte	-22
+	.byte	-20
+	.byte	-24
+	.byte	-22
+	.byte	-12
+	.byte	-21
+	.byte	-28
+	.byte	-28
+	.byte	-24
+	.byte	-26
+	.byte	-24
+	.byte	20
+	.byte	16
+	.byte	6
+	.byte	10
+	.byte	16
+	.byte	12
+	.byte	12
+	.byte	16
+	.byte	16
+	.byte	8
+	.byte	8
+	.byte	12
+	.byte	12
+	.byte	12
+	.byte	18
+	.byte	18
+	.byte	10
+	.byte	8
+	.byte	14
+	.byte	14
+	.byte	14
+	.byte	16
+	.byte	14
+	.byte	6
+	.byte	6
+	.byte	12
+	.byte	14
+	.byte	8
+	.byte	20
+	.byte	18
+	.byte	8
+	.byte	6
+	.byte	14
+	.byte	14
+	.byte	10
+	.byte	20
+	.byte	20
+	.byte	6
+	.byte	10
+	.byte	10
+	.byte	12
+	.byte	12
+	.byte	10
+	.byte	13
+	.byte	5
+	.byte	2
+	.byte	14
+	.byte	8
+	.byte	6
+	.byte	6
+	.byte	13
+	.byte	9
+	.byte	4
+	.byte	14
+	.byte	10
+	.byte	10
+	.byte	10
+	.byte	13
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	12
+	.byte	10
+	.byte	2
+	.byte	5
+	.byte	1
+	.byte	-2
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	12
+	.byte	1
+	.byte	13
+	.byte	2
+	.byte	12
+	.byte	12
+	.byte	14
+	.space	1
+	.type	toshiba_3D_slc_value, %object
+	.size	toshiba_3D_slc_value, 11
+toshiba_3D_slc_value:
+	.byte	-117
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	-16
+	.byte	-24
+	.byte	24
+	.byte	-40
+	.byte	40
+	.byte	-56
+	.byte	56
+	.space	1
+	.type	__func__.19357, %object
+	.size	__func__.19357, 23
+__func__.19357:
+	.ascii	"flash_start_plane_read\000"
+	.space	1
+	.type	__func__.19243, %object
+	.size	__func__.19243, 26
+__func__.19243:
+	.ascii	"flash_erase_duplane_block\000"
+	.space	2
+	.type	__func__.19254, %object
+	.size	__func__.19254, 21
+__func__.19254:
+	.ascii	"flash_erase_block_en\000"
+	.space	3
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.short	22378
+	.short	1512
+	.short	25245
+	.short	17827
+	.short	25756
+	.short	19440
+	.short	9026
+	.short	10030
+	.short	29528
+	.short	20467
+	.short	29676
+	.short	24432
+	.short	31328
+	.short	6872
+	.short	13426
+	.short	13842
+	.short	8783
+	.short	1108
+	.short	782
+	.short	28837
+	.short	30729
+	.short	9505
+	.short	18676
+	.short	23085
+	.short	18730
+	.short	1085
+	.short	32609
+	.short	14697
+	.short	20858
+	.short	15170
+	.short	30365
+	.short	1607
+	.short	32298
+	.short	4995
+	.short	18905
+	.short	1976
+	.short	9592
+	.short	20204
+	.short	17443
+	.short	13615
+	.short	23330
+	.short	29369
+	.short	13947
+	.short	9398
+	.short	32398
+	.short	8984
+	.short	27600
+	.short	21785
+	.short	6019
+	.short	6311
+	.short	31598
+	.short	30210
+	.short	19327
+	.short	13896
+	.short	11347
+	.short	27545
+	.short	3107
+	.short	26575
+	.short	32270
+	.short	19852
+	.short	20601
+	.short	8349
+	.short	9290
+	.short	29819
+	.short	13579
+	.short	3661
+	.short	28676
+	.short	27331
+	.short	32574
+	.short	8693
+	.short	31253
+	.short	9081
+	.short	5399
+	.short	6842
+	.short	20087
+	.short	5537
+	.short	1274
+	.short	11617
+	.short	9530
+	.short	4866
+	.short	8035
+	.short	23219
+	.short	1178
+	.short	23272
+	.short	7383
+	.short	18944
+	.short	12488
+	.short	12871
+	.short	29340
+	.short	20532
+	.short	11022
+	.short	22514
+	.short	228
+	.short	22363
+	.short	24978
+	.short	14584
+	.short	12138
+	.short	3092
+	.short	17916
+	.short	16863
+	.short	14554
+	.short	31457
+	.short	29474
+	.short	25311
+	.short	24121
+	.short	3684
+	.short	28037
+	.short	22865
+	.short	22839
+	.short	25217
+	.short	13217
+	.short	27186
+	.short	14938
+	.short	11180
+	.short	29754
+	.short	24180
+	.short	15150
+	.short	32455
+	.short	20434
+	.short	23848
+	.short	29983
+	.short	16120
+	.short	14769
+	.short	20041
+	.short	29803
+	.short	28406
+	.short	17598
+	.short	28087
+	.type	__func__.19988, %object
+	.size	__func__.19988, 13
+__func__.19988:
+	.ascii	"buf_add_tail\000"
+	.space	3
+	.type	__func__.20001, %object
+	.size	__func__.20001, 10
+__func__.20001:
+	.ascii	"buf_alloc\000"
+	.space	2
+	.type	__func__.20015, %object
+	.size	__func__.20015, 16
+__func__.20015:
+	.ascii	"buf_remove_free\000"
+	.type	zftl_debug_proc_fops, %object
+	.size	zftl_debug_proc_fops, 128
+zftl_debug_proc_fops:
+	.word	0
+	.word	seq_lseek
+	.word	seq_read
+	.word	zftl_debug_proc_write
+	.space	36
+	.word	zftl_debug_proc_open
+	.space	4
+	.word	single_release
+	.space	64
+	.type	__func__.38180, %object
+	.size	__func__.38180, 12
+__func__.38180:
+	.ascii	"gc_add_sblk\000"
+	.type	__func__.38274, %object
+	.size	__func__.38274, 19
+__func__.38274:
+	.ascii	"gc_write_completed\000"
+	.space	1
+	.type	__func__.38823, %object
+	.size	__func__.38823, 18
+__func__.38823:
+	.ascii	"ftl_alloc_sys_blk\000"
+	.space	2
+	.type	__func__.38833, %object
+	.size	__func__.38833, 17
+__func__.38833:
+	.ascii	"ftl_free_sys_blk\000"
+	.space	3
+	.type	__func__.38972, %object
+	.size	__func__.38972, 23
+__func__.38972:
+	.ascii	"ftl_get_ppa_from_index\000"
+	.space	1
+	.type	__func__.39012, %object
+	.size	__func__.39012, 22
+__func__.39012:
+	.ascii	"ftl_get_new_free_page\000"
+	.space	2
+	.type	__func__.39023, %object
+	.size	__func__.39023, 22
+__func__.39023:
+	.ascii	"ftl_ext_alloc_new_blk\000"
+	.space	2
+	.type	__func__.38330, %object
+	.size	__func__.38330, 16
+__func__.38330:
+	.ascii	"gc_free_src_blk\000"
+	.type	__func__.37931, %object
+	.size	__func__.37931, 14
+__func__.37931:
+	.ascii	"ftl_write_buf\000"
+	.space	2
+	.type	__func__.37976, %object
+	.size	__func__.37976, 18
+__func__.37976:
+	.ascii	"zftl_add_read_buf\000"
+	.space	2
+	.type	__func__.38781, %object
+	.size	__func__.38781, 15
+__func__.38781:
+	.ascii	"ftl_alloc_sblk\000"
+	.space	1
+	.type	__func__.39409, %object
+	.size	__func__.39409, 17
+__func__.39409:
+	.ascii	"pm_alloc_new_blk\000"
+	.space	3
+	.type	__func__.39437, %object
+	.size	__func__.39437, 21
+__func__.39437:
+	.ascii	"pm_select_ram_region\000"
+	.space	3
+	.type	__func__.19709, %object
+	.size	__func__.19709, 20
+__func__.19709:
+	.ascii	"flash_die_info_init\000"
+	.type	__func__.37866, %object
+	.size	__func__.37866, 17
+__func__.37866:
+	.ascii	"lpa_rebuild_hash\000"
+	.space	3
+	.type	__func__.39369, %object
+	.size	__func__.39369, 13
+__func__.39369:
+	.ascii	"pm_free_sblk\000"
+	.space	3
+	.type	__func__.20039, %object
+	.size	__func__.20039, 21
+__func__.20039:
+	.ascii	"flash_info_data_init\000"
+	.space	3
+	.type	__func__.19185, %object
+	.size	__func__.19185, 19
+__func__.19185:
+	.ascii	"flash_read_page_en\000"
+	.space	1
+	.type	__func__.19345, %object
+	.size	__func__.19345, 31
+__func__.19345:
+	.ascii	"flash_complete_plane_page_read\000"
+	.space	1
+	.type	__func__.19370, %object
+	.size	__func__.19370, 25
+__func__.19370:
+	.ascii	"flash_complete_page_read\000"
+	.space	3
+	.type	__func__.39208, %object
+	.size	__func__.39208, 31
+__func__.39208:
+	.ascii	"queue_wait_first_req_completed\000"
+	.space	1
+	.type	__func__.39289, %object
+	.size	__func__.39289, 15
+__func__.39289:
+	.ascii	"sblk_read_page\000"
+	.space	1
+	.type	__func__.19321, %object
+	.size	__func__.19321, 22
+__func__.19321:
+	.ascii	"flash_start_page_prog\000"
+	.space	2
+	.type	__func__.39262, %object
+	.size	__func__.39262, 15
+__func__.39262:
+	.ascii	"sblk_prog_page\000"
+	.space	1
+	.type	__func__.19292, %object
+	.size	__func__.19292, 26
+__func__.19292:
+	.ascii	"flash_start_tlc_page_prog\000"
+	.space	2
+	.type	__func__.19303, %object
+	.size	__func__.19303, 29
+__func__.19303:
+	.ascii	"flash_start_3d_mlc_page_prog\000"
+	.space	3
+	.type	__func__.19227, %object
+	.size	__func__.19227, 19
+__func__.19227:
+	.ascii	"flash_prog_page_en\000"
+	.space	1
+	.type	__func__.39086, %object
+	.size	__func__.39086, 14
+__func__.39086:
+	.ascii	"ftl_prog_page\000"
+	.space	2
+	.type	__func__.38749, %object
+	.size	__func__.38749, 15
+__func__.38749:
+	.ascii	"ftl_info_flush\000"
+	.space	1
+	.type	__func__.39048, %object
+	.size	__func__.39048, 19
+__func__.39048:
+	.ascii	"ftl_ext_info_flush\000"
+	.space	1
+	.type	__func__.39060, %object
+	.size	__func__.39060, 18
+__func__.39060:
+	.ascii	"ftl_ext_info_init\000"
+	.space	2
+	.type	__func__.38939, %object
+	.size	__func__.38939, 23
+__func__.38939:
+	.ascii	"ftl_open_sblk_recovery\000"
+	.space	1
+	.type	__func__.39419, %object
+	.size	__func__.39419, 14
+__func__.39419:
+	.ascii	"pm_write_page\000"
+	.space	2
+	.type	__func__.20061, %object
+	.size	__func__.20061, 17
+__func__.20061:
+	.ascii	"flash_info_flush\000"
+	.space	3
+	.type	__func__.20028, %object
+	.size	__func__.20028, 20
+__func__.20028:
+	.ascii	"flash_info_blk_init\000"
+	.type	__func__.19764, %object
+	.size	__func__.19764, 16
+__func__.19764:
+	.ascii	"nand_flash_init\000"
+	.type	__func__.38915, %object
+	.size	__func__.38915, 16
+__func__.38915:
+	.ascii	"ftl_sysblk_dump\000"
+	.type	__func__.39353, %object
+	.size	__func__.39353, 16
+__func__.39353:
+	.ascii	"load_l2p_region\000"
+	.type	__func__.39393, %object
+	.size	__func__.39393, 6
+__func__.39393:
+	.ascii	"pm_gc\000"
+	.space	2
+	.type	__func__.38261, %object
+	.size	__func__.38261, 22
+__func__.38261:
+	.ascii	"gc_update_l2p_map_new\000"
+	.space	2
+	.type	__func__.38374, %object
+	.size	__func__.38374, 16
+__func__.38374:
+	.ascii	"gc_scan_src_blk\000"
+	.type	__func__.38432, %object
+	.size	__func__.38432, 20
+__func__.38432:
+	.ascii	"gc_scan_static_data\000"
+	.type	__func__.38495, %object
+	.size	__func__.38495, 18
+__func__.38495:
+	.ascii	"gc_block_vpn_scan\000"
+	.space	2
+	.type	__func__.38891, %object
+	.size	__func__.38891, 14
+__func__.38891:
+	.ascii	"ftl_sblk_dump\000"
+	.space	2
+	.type	__func__.38009, %object
+	.size	__func__.38009, 10
+__func__.38009:
+	.ascii	"zftl_read\000"
+	.space	2
+	.type	__func__.38227, %object
+	.size	__func__.38227, 21
+__func__.38227:
+	.ascii	"gc_check_data_one_wl\000"
+	.space	3
+	.type	__func__.38993, %object
+	.size	__func__.38993, 19
+__func__.38993:
+	.ascii	"ftl_update_l2p_map\000"
+	.space	1
+	.type	__func__.37913, %object
+	.size	__func__.37913, 17
+__func__.37913:
+	.ascii	"ftl_write_commit\000"
+	.space	3
+	.type	__func__.38303, %object
+	.size	__func__.38303, 16
+__func__.38303:
+	.ascii	"gc_do_copy_back\000"
+	.type	__func__.38523, %object
+	.size	__func__.38523, 11
+__func__.38523:
+	.ascii	"zftl_do_gc\000"
+	.space	1
+	.type	__func__.38040, %object
+	.size	__func__.38040, 13
+__func__.38040:
+	.ascii	"_ftl_discard\000"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC0:
+	.ascii	"\012!!!!! error @ func:%s - line:%d\012\000"
+.LC1:
+	.ascii	"%s\012\000"
+.LC2:
+	.ascii	"FTL version: 6.0.18 20190918\000"
+.LC3:
+	.ascii	"zftl_debug:0x%x\012\000"
+.LC4:
+	.ascii	"...%s enter...\012\000"
+.LC5:
+	.ascii	"No.0 FLASH ID: %x %x %x %x %x %x\012\000"
+.LC6:
+	.ascii	"DiePerChip: %x\012\000"
+.LC7:
+	.ascii	"SectPerPage: %x\012\000"
+.LC8:
+	.ascii	"PagePerBlk: %x\012\000"
+.LC9:
+	.ascii	"Cell: %x\012\000"
+.LC10:
+	.ascii	"PlanePerDie: %x\012\000"
+.LC11:
+	.ascii	"BlkPerPlane: %x\012\000"
+.LC12:
+	.ascii	"die gap: %x\012\000"
+.LC13:
+	.ascii	"lsbMode: %x\012\000"
+.LC14:
+	.ascii	"ReadRetryMode: %x\012\000"
+.LC15:
+	.ascii	"ecc: %x\012\000"
+.LC16:
+	.ascii	"idb ecc: %x\012\000"
+.LC17:
+	.ascii	"g_flash_slc_mode: %x\012\000"
+.LC18:
+	.ascii	"OptMode: %x\012\000"
+.LC19:
+	.ascii	"g_nand_max_die: %x\012\000"
+.LC20:
+	.ascii	"Cache read enable: %x\012\000"
+.LC21:
+	.ascii	"Cache random read enable: %x\012\000"
+.LC22:
+	.ascii	"Cache prog enable: %x\012\000"
+.LC23:
+	.ascii	"multi read enable: %x\012\000"
+.LC24:
+	.ascii	"multi prog enable: %x\012\000"
+.LC25:
+	.ascii	"interleave enable: %x\012\000"
+.LC26:
+	.ascii	"read retry enable: %x\012\000"
+.LC27:
+	.ascii	"randomizer enable: %x\012\000"
+.LC28:
+	.ascii	"SDR enable: %x\012\000"
+.LC29:
+	.ascii	"ONFI enable: %x\012\000"
+.LC30:
+	.ascii	"TOGGLE enable: %x\012\000"
+.LC31:
+	.ascii	"g_flash_slc_mode: %x %x\012\000"
+.LC32:
+	.ascii	"MultiPlaneProgCmd: %x %x\012\000"
+.LC33:
+	.ascii	"MultiPlaneReadCmd: %x %x\012\000"
+.LC34:
+	.ascii	"g_flash_toggle_mode_en: %x\012\000"
+.LC35:
+	.ascii	"...%s enter... %p\012\000"
+.LC36:
+	.ascii	"0:%x %x %x %x %x\012\000"
+.LC37:
+	.ascii	"g_nandc_ver...%d\012\000"
+.LC38:
+	.ascii	"nand sdr mode %x\012\000"
+.LC39:
+	.ascii	"nand ddr mode %x\012\000"
+.LC40:
+	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
+.LC41:
+	.ascii	"otp:%x %x %x %x\012\000"
+.LC42:
+	.ascii	"bad block test:%x %x\012\000"
+.LC43:
+	.ascii	"flash_erase_duplane_block %x %x %x\012\000"
+.LC44:
+	.ascii	"flash_erase_duplane_block pageadd = %x status = %x\012"
+	.ascii	"\000"
+.LC45:
+	.ascii	"flash_erase_block %x %x %x\012\000"
+.LC46:
+	.ascii	"flash_erase_block %d block = %x status = %x\012\000"
+.LC47:
+	.ascii	"erase done: %x\012\000"
+.LC48:
+	.ascii	"flash_mask_bad_block %d %d\012\000"
+.LC49:
+	.ascii	"zftl_debug\000"
+.LC50:
+	.ascii	"FLASH ID: %x %x %x %x %x %x\012\000"
+.LC51:
+	.ascii	"density: %d MB\012\000"
+.LC52:
+	.ascii	"device density: %d MB\012\000"
+.LC53:
+	.ascii	"FTL INFO:\012\000"
+.LC54:
+	.ascii	"max_lpn = 0x%x\012\000"
+.LC55:
+	.ascii	"density = 0x%x\012\000"
+.LC56:
+	.ascii	"slc vpn = 0x%x\012\000"
+.LC57:
+	.ascii	"xlc vpn = 0x%x\012\000"
+.LC58:
+	.ascii	"free slc blk = 0x%x\012\000"
+.LC59:
+	.ascii	"free xlc blk = 0x%x\012\000"
+.LC60:
+	.ascii	"free mix blk = 0x%x\012\000"
+.LC61:
+	.ascii	"slc data blk = 0x%x\012\000"
+.LC62:
+	.ascii	"slc cache blk = 0x%x\012\000"
+.LC63:
+	.ascii	"xlc data blk = 0x%x\012\000"
+.LC64:
+	.ascii	"free buf = %d, %d, %d\012\000"
+.LC65:
+	.ascii	"bad blk = %d %d\012\000"
+.LC66:
+	.ascii	"TBW = %d MB\012\000"
+.LC67:
+	.ascii	"TBR = %d MB\012\000"
+.LC68:
+	.ascii	"POC = %d\012\000"
+.LC69:
+	.ascii	"PLC = %d\012\000"
+.LC70:
+	.ascii	"sys run time = %d S\012\000"
+.LC71:
+	.ascii	"slc mode = %d\012\000"
+.LC72:
+	.ascii	"prog err = %d\012\000"
+.LC73:
+	.ascii	"read err = %d\012\000"
+.LC74:
+	.ascii	"GC XLC page = %d\012\000"
+.LC75:
+	.ascii	"GC SLC page = %d\012\000"
+.LC76:
+	.ascii	"discard page = 0x%x\012\000"
+.LC77:
+	.ascii	"version = %d\012\000"
+.LC78:
+	.ascii	"acblk = 0x%x %d %d\012\000"
+.LC79:
+	.ascii	"tmblk = 0x%x %d %d\012\000"
+.LC80:
+	.ascii	"gcblk = 0x%x %d %d\012\000"
+.LC81:
+	.ascii	"slc ec = %d, %d, %d, %d, %d\012\000"
+.LC82:
+	.ascii	"xlc ec = %d, %d, %d, %d, %d\012\000"
+.LC83:
+	.ascii	"gc free blk th = %d\012\000"
+.LC84:
+	.ascii	"gc vpn th = %d %d %d %d %d\012\000"
+.LC85:
+	.ascii	"swl blk = %x %x %x %x\012\000"
+.LC86:
+	.ascii	"rf info = %x %x %x %x %x\012\000"
+.LC87:
+	.ascii	"gc_add_sblk = %d, %d, %d, %d, %d, %d, %d\012\000"
+.LC88:
+	.ascii	"gc_add_sblk = %d, %d, %d\012\000"
+.LC89:
+	.ascii	"gc_add_sblk = %d, %d, %d,last update:%d, %d\012\000"
+.LC90:
+	.ascii	"gc_add_sblk = %d, %d, %d, %d, %d, %d\012\000"
+.LC91:
+	.ascii	"gc_mark_bad_ppa %d %x %x\012\000"
+.LC92:
+	.ascii	"status: %x, ppa: %x\012\000"
+.LC93:
+	.ascii	"gc_write_completed: %x  %x  %d %x\012\000"
+.LC94:
+	.ascii	"zftl_get_gc_node cache = %x index = %d vpn = %x\012"
+	.ascii	"\000"
+.LC95:
+	.ascii	"gc_search_src_blk mode = %x, src mode = %x, count= "
+	.ascii	"%d %d\012\000"
+.LC96:
+	.ascii	"%d gc_free_temp_buf buf id= %x\012\000"
+.LC97:
+	.ascii	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\012"
+	.ascii	"\000"
+.LC98:
+	.ascii	"swl_tlc_free_mini_ec_blk alloc sblk %x\012\000"
+.LC99:
+	.ascii	"zftl_get_free_sblk %x %d, %p %d %d\012\000"
+.LC100:
+	.ascii	"zftl_gc_get_free_sblk %x %x %x, %d %d %d\012\000"
+.LC101:
+	.ascii	"swl_slc_free_mini_ec_blk alloc sblk %x\012\000"
+.LC102:
+	.ascii	"list count:%p %d\012\000"
+.LC103:
+	.ascii	"%d: node:%x %x %x %x, %d %d %d %d %d\012\000"
+.LC104:
+	.ascii	"ftl_vpn_decrement %x = %d, %d\012\000"
+.LC105:
+	.ascii	"mask bad block:cs %x %x block: %x %x\012\000"
+.LC106:
+	.ascii	"gc_free_bad_sblk 0x%x\012\000"
+.LC107:
+	.ascii	"swl_slc_free_mini_ec_blk sblk %x\012\000"
+.LC108:
+	.ascii	"gc_free_src_blk = %x, vpn = %d\012\000"
+.LC109:
+	.ascii	"gc_free_src_blk %x, %d\012\000"
+.LC110:
+	.ascii	"bad blk = %x, %x free blk: s:%x,t:%x,m:%x, data blk"
+	.ascii	":s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\012\000"
+.LC111:
+	.ascii	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\012\000"
+.LC112:
+	.ascii	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\012\000"
+.LC113:
+	.ascii	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\012\000"
+.LC114:
+	.ascii	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:"
+	.ascii	"%d free_th: %d\012\000"
+.LC115:
+	.ascii	"swl : %x %x %x %x %x %x\012\000"
+.LC116:
+	.ascii	"ftl prog error =%x, lpa = %x, ppa= %x\012\000"
+.LC117:
+	.ascii	"ftl re prog: lpa = %x, ppa= %x\012\000"
+.LC118:
+	.ascii	"alloc sblk %x %d\012\000"
+.LC119:
+	.ascii	"dump_sblk_queue: %d\012\000"
+.LC120:
+	.ascii	"buf id= %d state = %d ppa = %x\012\000"
+.LC121:
+	.ascii	"blk %x is bad block\012\000"
+.LC122:
+	.ascii	"pm_alloc_new_blk: %x %x %x %x\012\000"
+.LC123:
+	.ascii	"%s %d %d\012\000"
+.LC124:
+	.ascii	"gc_static_wearleveling: min blk: %x,sec=%d,xec = %d"
+	.ascii	" ,mode=%d, func=%x, bbt=%x vpn = %d\012\000"
+.LC125:
+	.ascii	"gc_static_wearleveling: min slc blk: %x,sec=%d,xec "
+	.ascii	"= %d ,mode=%d, func=%x, bbt=%x vpn = %d\012\000"
+.LC126:
+	.ascii	"gc_static_wearleveling: min tlc blk: %x,sec=%d,xec "
+	.ascii	"= %d ,mode=%d, func=%x, bbt=%x vpn = %d\012\000"
+.LC127:
+	.ascii	"gc_static_wearleveling: max slc blk: %x,sec=%d,xec "
+	.ascii	"= %d ,mode=%d, func=%x, bbt=%x vpn = %d\012\000"
+.LC128:
+	.ascii	"gc_static_wearleveling: max xlc blk: %x,sec=%d,xec "
+	.ascii	"= %d ,mode=%d, func=%x, bbt=%x vpn = %d\012\000"
+.LC129:
+	.ascii	"gc_static_wearleveling: slc blk: %x, tlc blk: %d av"
+	.ascii	"g slc ec: %d, avg tlc ec: %d \012\000"
+.LC130:
+	.ascii	"gc_static_wearleveling: min slc ec: %x, min tlc ec:"
+	.ascii	" %d max slc ec: %d, max tlc ec: %d; %d %d\012\000"
+.LC131:
+	.ascii	"swl add tlc gc = %x, %d, %d, %d, %d, %d\012\000"
+.LC132:
+	.ascii	"swl add slc gc  = %x, %d, %d, %d, %d, %d\012\000"
+.LC133:
+	.ascii	"free blk vpn error: %x %x\012\000"
+.LC134:
+	.ascii	"GC PM block %x %x %x %d\012\000"
+.LC135:
+	.ascii	"ftl_free_no_use_map_blk %x %x %x %d\012\000"
+.LC136:
+	.ascii	"...%d @ %s\012\000"
+.LC137:
+	.ascii	"rk_ftl_de_init %x\012\000"
+.LC138:
+	.ascii	"%s %p:0x%x:\000"
+.LC139:
+	.ascii	"%x \000"
+.LC140:
+	.ascii	"\000"
+.LC141:
+	.ascii	"otp error! %d\000"
+.LC142:
+	.ascii	"rr\000"
+.LC143:
+	.ascii	"flash_abort_clear = %d\012\000"
+.LC144:
+	.ascii	"%d mtrans_cnt = %d page_num = %d\012\000"
+.LC145:
+	.ascii	"nandc:\000"
+.LC146:
+	.ascii	"%d flReg.d32=%x %x\012\000"
+.LC147:
+	.ascii	"nandc_xfer_done read error %x\012\000"
+.LC148:
+	.ascii	"dqs data abort %x\012\000"
+.LC149:
+	.ascii	"dqs data timeout %x\012\000"
+.LC150:
+	.ascii	"xfer error %x\012\000"
+.LC151:
+	.ascii	"flash_read_page %x %x %x\012\000"
+.LC152:
+	.ascii	"MT %d row=%x,last status %d,status = %d\012\000"
+.LC153:
+	.ascii	"MT RR %d row=%x,count %d,status=%d\012\000"
+.LC154:
+	.ascii	"toshiba SRR %d row=%x, status=%d\012\000"
+.LC155:
+	.ascii	"toshiba TRR %d row=%x, status=%d\012\000"
+.LC156:
+	.ascii	"toshiba RR %d row=%x,count %d,status=%d\012\000"
+.LC157:
+	.ascii	"hynix RR %d row=%x, count %d, status=%d\012\000"
+.LC158:
+	.ascii	"%d flash_ddr_tuning_read %x ecc=%d\012\000"
+.LC159:
+	.ascii	"sync para %d\012\000"
+.LC160:
+	.ascii	"DDR mode Read error %x %x\012\000"
+.LC161:
+	.ascii	"SDR mode Read %x %x ecc:%x\012\000"
+.LC162:
+	.ascii	"flash_read_page_en %x %x %x\012\000"
+.LC163:
+	.ascii	"flash_read_page_en %x %x error_ecc %d %d\012\000"
+.LC164:
+	.ascii	"flash_get_last_written_page: %x %x %x\012\000"
+.LC165:
+	.ascii	"read page: %x %x %x %x\012\000"
+.LC166:
+	.ascii	"flash_complete_page_read %x %x error_ecc %d %d\012\000"
+.LC167:
+	.ascii	"read: %x %x %x %x\012\000"
+.LC168:
+	.ascii	"0set buf %d,status = %x, ppa = %x lun state = %d\012"
+	.ascii	"\000"
+.LC169:
+	.ascii	"prog end %x %x error_ecc %d %d\012\000"
+.LC170:
+	.ascii	"1set buf %d,status = %x, ppa = %x lun state = %d\012"
+	.ascii	"\000"
+.LC171:
+	.ascii	"dp prog end %x %x error_ecc %d %d\012\000"
+.LC172:
+	.ascii	"flash_prog_page %x %x %x\012\000"
+.LC173:
+	.ascii	"flash_prog_page page_addr = %x status = %x\012\000"
+.LC174:
+	.ascii	"sblk_prog_page ppa = %x, count = %d\012\000"
+.LC175:
+	.ascii	"sblk_3d_tlc_dump_prog wl_addr= %x ppa = %x ppa = %x"
+	.ascii	"\012\000"
+.LC176:
+	.ascii	"sblk_mlc_dump_prog wl_addr= %x ppa = %x ppa = %x\012"
+	.ascii	"\000"
+.LC177:
+	.ascii	"flash_prog_page_en:%x %x %x\012\000"
+.LC178:
+	.ascii	"w d:\000"
+.LC179:
+	.ascii	"w s:\000"
+.LC180:
+	.ascii	"spare\000"
+.LC181:
+	.ascii	"data\000"
+.LC182:
+	.ascii	"write error: %x\012\000"
+.LC183:
+	.ascii	"g_ftl_info_blk blk = %x, page = %x version = %d\012"
+	.ascii	"\000"
+.LC184:
+	.ascii	"%d %x @%d %x\012\000"
+.LC185:
+	.ascii	"ftl_info_blk_init %d %d %x\012\000"
+.LC186:
+	.ascii	"ink flag: %x\012\000"
+.LC187:
+	.ascii	"%s %d %d %x %x\012\000"
+.LC188:
+	.ascii	"%s %x %x %x\012\000"
+.LC189:
+	.ascii	"saved_active_page  = %x\012\000"
+.LC190:
+	.ascii	"saved_active_plane = %x\012\000"
+.LC191:
+	.ascii	"sblk = %x\012\000"
+.LC192:
+	.ascii	"phy_blk = %x %x\012\000"
+.LC193:
+	.ascii	"num_planes = %x\012\000"
+.LC194:
+	.ascii	"sblk = %x, vpn0 = %d, vpn1 = %d\012\000"
+.LC195:
+	.ascii	"dump_write_lpa = %x %x %x %x\012\000"
+.LC196:
+	.ascii	"dump write new ppa = %x, last ppa = %x lpa = %x\012"
+	.ascii	"\000"
+.LC197:
+	.ascii	"dump write = %x %x %x\012\000"
+.LC198:
+	.ascii	"dump write hash update = %x %x %x\012\000"
+.LC199:
+	.ascii	"pm_write_page write error: %x\012\000"
+.LC200:
+	.ascii	"ftl_sblk_dump_write = %x %d %d %d %d\012\000"
+.LC201:
+	.ascii	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x"
+	.ascii	" %x %x, spare: %x %x %x %x\012\000"
+.LC202:
+	.ascii	"ftl_sblk_dump_write2 = %x %d %d %d\012\000"
+.LC203:
+	.ascii	"ftl_sblk_dump_write = %x %x\012\000"
+.LC204:
+	.ascii	"ftl_sblk_dump_write done = %x\012\000"
+.LC205:
+	.ascii	"ftl_ink_check_sblk = %x %d %d\012\000"
+.LC206:
+	.ascii	"ftl_ink_check_sblk = %x %d %d end\012\000"
+.LC207:
+	.ascii	"finfo:\000"
+.LC208:
+	.ascii	"flash_info_flush id = %x, page = %x\012\000"
+.LC209:
+	.ascii	"sys_info_flush error:%x\012\000"
+.LC210:
+	.ascii	"...%d @ %s %d %p\012\000"
+.LC211:
+	.ascii	"no sys info %x\012\000"
+.LC212:
+	.ascii	"l2p:\000"
+.LC213:
+	.ascii	"free_buf_count: %d\012\000"
+.LC214:
+	.ascii	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\012\000"
+.LC215:
+	.ascii	"ftl_ext_info_blk blk:0x%x, page:0x%x\012\000"
+.LC216:
+	.ascii	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page"
+	.ascii	"_index:0x%x\012\000"
+.LC217:
+	.ascii	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, pag"
+	.ascii	"e_index:0x%x\012\000"
+.LC218:
+	.ascii	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page"
+	.ascii	"_index:0x%x\012\000"
+.LC219:
+	.ascii	"lpa:\000"
+.LC220:
+	.ascii	"vpn:\000"
+.LC221:
+	.ascii	"sblk:\000"
+.LC222:
+	.ascii	"lpa_hash:\000"
+.LC223:
+	.ascii	"lpa_hash_index:\000"
+.LC224:
+	.ascii	"%s w error lpn = %x, max ppa = %d\012\000"
+.LC225:
+	.ascii	"region_id = %d, pm_max_region = %d\012\000"
+.LC226:
+	.ascii	"load_l2p_region no ppa = %x , %x, all setting 0xff."
+	.ascii	"...\012\000"
+.LC227:
+	.ascii	"load_l2p_region = %x,%x,%x, %x\012\000"
+.LC228:
+	.ascii	"pm_ppa:\000"
+.LC229:
+	.ascii	"data:\000"
+.LC230:
+	.ascii	"spare:\000"
+.LC231:
+	.ascii	"pm_init posr %x %x %x\012\000"
+.LC232:
+	.ascii	"pm_init recovery %x %x %x\012\000"
+.LC233:
+	.ascii	"pm_log2phys  lpn = %d, max lpn = %d\012\000"
+.LC234:
+	.ascii	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x "
+	.ascii	"%x %x %x\012\000"
+.LC235:
+	.ascii	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\012"
+	.ascii	"\000"
+.LC236:
+	.ascii	"gc_recovery: %x vpn = %x\012\000"
+.LC237:
+	.ascii	"_c_user_data_density := %d\012\000"
+.LC238:
+	.ascii	"_c_totle_phy_density := %d\012\000"
+.LC239:
+	.ascii	"_c_totle_log_page := %d\012\000"
+.LC240:
+	.ascii	"_c_totle_data_density := %d\012\000"
+.LC241:
+	.ascii	"_c_ftl_pm_page_num := %d\012\000"
+.LC242:
+	.ascii	"_c_ftl_byte_pre_page := %d\012\000"
+.LC243:
+	.ascii	"_c_max_pm_sblk := %d\012\000"
+.LC244:
+	.ascii	"_min_slc_super_block := %d\012\000"
+.LC245:
+	.ascii	"_max_xlc_super_block := %d\012\000"
+.LC246:
+	.ascii	"gp_ftl_ext_info %p %p %p\012\000"
+.LC247:
+	.ascii	"flash info size: %d %d %d\012\000"
+.LC248:
+	.ascii	"ftl_init %x\012\000"
+.LC249:
+	.ascii	"gc_update_l2p_map_new sblk %x\012\000"
+.LC250:
+	.ascii	"gc_update_l2p_map_new: %x %x %x\012\000"
+.LC251:
+	.ascii	"lpa: %x %x %x\012\000"
+.LC252:
+	.ascii	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\012"
+	.ascii	"\000"
+.LC253:
+	.ascii	"gc_scan_src_blk = %x, vpn = %d\012\000"
+.LC254:
+	.ascii	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\012\000"
+.LC255:
+	.ascii	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:"
+	.ascii	"%d\012\000"
+.LC256:
+	.ascii	"ftl_sblk_dump = %x %d %d %d %d\012\000"
+.LC257:
+	.ascii	"ftl_sblk_dump = %x %x %x %x\012\000"
+.LC258:
+	.ascii	"page_addr = %x, lpa=%x vpn = %d\012\000"
+.LC259:
+	.ascii	"index= %x, lpa=%x\012\000"
+.LC260:
+	.ascii	"block = %x, vpn=%x check vpn = %d\012\000"
+.LC261:
+	.ascii	"ftl_read %x %x %x\012\000"
+.LC262:
+	.ascii	"ftl_read refresh =%x, lpa = %x, ppa= %x\012\000"
+.LC263:
+	.ascii	"id=%d, status = %x, lpa = %x, ppa = %x spare = %x %"
+	.ascii	"x %x %x\012\000"
+.LC264:
+	.ascii	"zftl debug cmd: %s\012\000"
+.LC265:
+	.ascii	"cmd:\000"
+.LC266:
+	.ascii	"dumpl2p\000"
+.LC267:
+	.ascii	"pm l2p:\000"
+.LC268:
+	.ascii	"pm blk:\000"
+.LC269:
+	.ascii	"dumppm:\000"
+.LC270:
+	.ascii	"p_cmd: %s\012\000"
+.LC271:
+	.ascii	"pm ram = %x, %x\012\000"
+.LC272:
+	.ascii	"ram:\000"
+.LC273:
+	.ascii	"pm:\000"
+.LC274:
+	.ascii	"dumpsys\000"
+.LC275:
+	.ascii	"dumplist:\000"
+.LC276:
+	.ascii	"vpncheck\000"
+.LC277:
+	.ascii	"dumpppa:\000"
+.LC278:
+	.ascii	"dumpblk:\000"
+.LC279:
+	.ascii	"setzdebug:\000"
+.LC280:
+	.ascii	"lpa2ppa:\000"
+.LC281:
+	.ascii	"lpa: %x--> ppa: %x\012\000"
+.LC282:
+	.ascii	"help:\012\000"
+.LC283:
+	.ascii	"1. echo dumpl2p > /proc/zftl_debug\012\000"
+.LC284:
+	.ascii	"2. echo dumppm:x > /proc/zftl_debug\012\000"
+.LC285:
+	.ascii	"3. echo dumpsys > /proc/zftl_debug\012\000"
+.LC286:
+	.ascii	"4. echo dumpppa:x > /proc/zftl_debug\012\000"
+.LC287:
+	.ascii	"5. echo vpncheck > /proc/zftl_debug\012\000"
+.LC288:
+	.ascii	"6. echo setzdebug:x > /proc/zftl_debug\012\000"
+.LC289:
+	.ascii	"7. echo dumplist > /proc/zftl_debug\012\000"
+.LC290:
+	.ascii	"8. echo lpa2ppa:x> /proc/zftl_debug\012\000"
+.LC291:
+	.ascii	"gc_lpa:\000"
+.LC292:
+	.ascii	"gc_ppa:\000"
+.LC293:
+	.ascii	"err: ppa = %x, status = %x, %x %x spare: %x %x %x %"
+	.ascii	"x\012\000"
+.LC294:
+	.ascii	"ftl_update_l2p_map: %x %x %x\012\000"
+.LC295:
+	.ascii	"ftl_update_l2p_map\000"
+.LC296:
+	.ascii	"lpa_tbl:\000"
+.LC297:
+	.ascii	"sblk %x vpn: %d %d\012\000"
+.LC298:
+	.ascii	"error gc_add_sblk: %x\012\000"
+.LC299:
+	.ascii	"%d read error: ppa:%x, lpa:%x, status:%x\012\000"
+.LC300:
+	.ascii	"gc page in buf: lpa %x ppa = %x pageindex= %x\012\000"
+.LC301:
+	.ascii	"gc_do_copy_back: lpa %x des_ppa = %x %x gc_ppa= %x "
+	.ascii	"page_index= %d\012\000"
+.LC302:
+	.ascii	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x %x %d\012"
+	.ascii	"\000"
+.LC303:
+	.ascii	"%d prog_step: %x %x buf id= %x ppa = %x hash=%d id "
+	.ascii	"= %x plane = %x lpa=%x %x\012\000"
+.LC304:
+	.ascii	"gc %d: %d %d %d %d %d %d %d\012\000"
+.LC305:
+	.ascii	"gc %d: %d %d %d %d %d %d\012\000"
+.LC306:
+	.ascii	"GC_STATE_SCAN_ALL_PAGE = %x, vpn0 = %d, vpn1 = %d\012"
+	.ascii	"\000"
+.LC307:
+	.ascii	"gc free %x, %d\012\000"
+.LC308:
+	.ascii	"ftlwrite %x %x %x %x\012\000"
+.LC309:
+	.ascii	"ftl_discard:(%x, %x, %x, %x)\012\000"
+.LC310:
+	.ascii	"id_block_prog_msb_ff_data slc page = %d pageadd=%x "
+	.ascii	"%x\012\000"
+.LC311:
+	.ascii	"write_idblock fix data %x %x\012\000"
+.LC312:
+	.ascii	"idblk:\000"
+.LC313:
+	.ascii	"write_idblock totle_sec %x %x\012\000"
+.LC314:
+	.ascii	"prog page: %x %x %x, %p %x %x %x\012\000"
+.LC315:
+	.ascii	"wl_lba %p %x %x %x\012\000"
+.LC316:
+	.ascii	"READ_SECTOR_IO\012\000"
+.LC317:
+	.ascii	"rk_copy_from_user error\012\000"
+.LC318:
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
+.LC319:
+	.ascii	"rk_copy_to_user error\012\000"
+.LC320:
+	.ascii	"WRITE_SECTOR_IO\012\000"
+.LC321:
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+.LC322:
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
+.LC323:
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+.LC324:
+	.ascii	"GET_FLASH_INFO_IO\012\000"
+.LC325:
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
+.LC326:
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
+.LC327:
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+.LC328:
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+.LC329:
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+.LC330:
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+.LC331:
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+.LC332:
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+.LC333:
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+.LC334:
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
+.LC335:
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
+.LC336:
+	.ascii	"LockKey not match %d\012\000"
+.LC337:
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+.LC338:
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+.LC339:
+	.ascii	"return ret = %lx\012\000"
+.LC340:
+	.ascii	"secureBootEn check error\012\000"
+.LC341:
+	.ascii	"\0013vendor storage %x,%x,%x\012\000"
+	.data
+	.align	2
+.LANCHOR2 = . + 0
+.LANCHOR6 = . + 8184
+	.type	zftl_debug, %object
+	.size	zftl_debug, 4
+zftl_debug:
+	.word	17476
+	.type	g_nand_para_info, %object
+	.size	g_nand_para_info, 32
+g_nand_para_info:
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	768
+	.byte	3
+	.byte	2
+	.short	758
+	.short	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.type	sd15_tlc_rr, %object
+	.size	sd15_tlc_rr, 329
+sd15_tlc_rr:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-32
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	-24
+	.byte	-16
+	.byte	8
+	.byte	8
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	8
+	.byte	8
+	.byte	-8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-24
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-24
+	.byte	-8
+	.byte	8
+	.byte	-8
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	8
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-16
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	-16
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	16
+	.byte	16
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	16
+	.byte	-8
+	.byte	24
+	.byte	0
+	.byte	8
+	.byte	-4
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	24
+	.byte	8
+	.byte	0
+	.byte	-4
+	.byte	-8
+	.byte	24
+	.byte	16
+	.byte	16
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	0
+	.byte	-4
+	.byte	-4
+	.byte	-4
+	.byte	8
+	.byte	8
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	0
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	-4
+	.byte	8
+	.byte	-24
+	.byte	4
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	8
+	.byte	-16
+	.byte	8
+	.byte	0
+	.byte	8
+	.byte	-24
+	.byte	-32
+	.byte	16
+	.byte	-24
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	-24
+	.byte	-32
+	.byte	8
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	8
+	.byte	-24
+	.byte	8
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-4
+	.byte	0
+	.byte	-24
+	.byte	4
+	.byte	0
+	.byte	16
+	.byte	-24
+	.byte	16
+	.byte	0
+	.byte	-24
+	.byte	-4
+	.byte	0
+	.byte	8
+	.byte	-32
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-32
+	.byte	0
+	.byte	-32
+	.byte	0
+	.space	3
+	.type	sd15_slc_rr, %object
+	.size	sd15_slc_rr, 25
+sd15_slc_rr:
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	16
+	.byte	-16
+	.byte	24
+	.byte	-24
+	.byte	32
+	.byte	-32
+	.byte	32
+	.byte	-40
+	.byte	48
+	.byte	-48
+	.byte	56
+	.byte	-56
+	.byte	64
+	.byte	-64
+	.byte	72
+	.byte	-72
+	.byte	80
+	.byte	-80
+	.byte	88
+	.byte	96
+	.byte	104
+	.byte	112
+	.space	3
+	.type	hy_f26_ref_value, %object
+	.size	hy_f26_ref_value, 28
+hy_f26_ref_value:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.type	zftl_nand_flash_para_tbl, %object
+	.size	zftl_nand_flash_para_tbl, 1408
+zftl_nand_flash_para_tbl:
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	768
+	.byte	3
+	.byte	2
+	.short	758
+	.short	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	60
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	768
+	.byte	3
+	.byte	2
+	.short	1478
+	.short	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-93
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	384
+	.byte	3
+	.byte	2
+	.short	1446
+	.short	1497
+	.byte	0
+	.byte	36
+	.byte	60
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	17881
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	17857
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	17881
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1056
+	.short	17857
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	17857
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	17881
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	17857
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	17881
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	17881
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	17881
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	17881
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	17881
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	17857
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1048
+	.short	9671
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	1
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.short	512
+	.byte	2
+	.byte	2
+	.short	700
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1064
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	455
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	4
+	.short	1024
+	.short	449
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	52
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	9671
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1044
+	.short	471
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	9671
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	-60
+	.byte	52
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	9671
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	52
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	9671
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	6
+	.byte	-101
+	.byte	73
+	.byte	1
+	.byte	0
+	.byte	-101
+	.byte	73
+	.byte	9
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2144
+	.short	-23097
+	.byte	8
+	.byte	21
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	8
+	.byte	0
+	.short	256
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-87
+	.byte	4
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	88
+	.byte	50
+	.byte	-95
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	768
+	.byte	3
+	.byte	1
+	.short	1440
+	.short	3527
+	.byte	0
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	1024
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	6
+	.byte	44
+	.byte	-92
+	.byte	8
+	.byte	50
+	.byte	-95
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	2304
+	.byte	3
+	.byte	1
+	.short	1008
+	.short	3521
+	.byte	0
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	4096
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	455
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	256
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.short	256
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1046
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2092
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	3
+	.byte	8
+	.byte	80
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	388
+	.byte	2
+	.byte	2
+	.short	1362
+	.short	473
+	.byte	9
+	.byte	8
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.short	512
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.byte	5
+	.byte	-119
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-95
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	455
+	.byte	4
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	-119
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	455
+	.byte	4
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	4
+	.short	1024
+	.short	449
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	4
+	.short	1024
+	.short	449
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-119
+	.byte	-92
+	.byte	8
+	.byte	50
+	.byte	-95
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.short	2304
+	.byte	3
+	.byte	1
+	.short	1008
+	.short	3521
+	.byte	0
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.short	4096
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	4
+	.type	nand_opt_para, %object
+	.size	nand_opt_para, 128
+nand_opt_para:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.space	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.type	tlc_b05a_prog_tbl, %object
+	.size	tlc_b05a_prog_tbl, 1536
+tlc_b05a_prog_tbl:
+	.short	0
+	.short	0
+	.short	0
+	.short	0
+	.short	0
+	.short	0
+	.short	0
+	.short	0
+	.short	9
+	.short	0
+	.short	11
+	.short	0
+	.short	13
+	.short	0
+	.short	15
+	.short	0
+	.short	17
+	.short	0
+	.short	19
+	.short	0
+	.short	21
+	.short	0
+	.short	23
+	.short	0
+	.short	25
+	.short	0
+	.short	27
+	.short	0
+	.short	29
+	.short	0
+	.short	31
+	.short	0
+	.short	33
+	.short	0
+	.short	35
+	.short	0
+	.short	37
+	.short	0
+	.short	39
+	.short	0
+	.short	41
+	.short	0
+	.short	43
+	.short	0
+	.short	45
+	.short	0
+	.short	47
+	.short	0
+	.short	49
+	.short	0
+	.short	51
+	.short	0
+	.short	53
+	.short	0
+	.short	55
+	.short	0
+	.short	25
+	.short	58
+	.short	0
+	.short	27
+	.short	61
+	.short	0
+	.short	29
+	.short	64
+	.short	0
+	.short	31
+	.short	67
+	.short	0
+	.short	33
+	.short	70
+	.short	0
+	.short	35
+	.short	73
+	.short	0
+	.short	37
+	.short	76
+	.short	0
+	.short	39
+	.short	79
+	.short	0
+	.short	41
+	.short	82
+	.short	0
+	.short	43
+	.short	85
+	.short	0
+	.short	45
+	.short	88
+	.short	0
+	.short	47
+	.short	91
+	.short	0
+	.short	49
+	.short	94
+	.short	0
+	.short	51
+	.short	97
+	.short	0
+	.short	53
+	.short	100
+	.short	0
+	.short	55
+	.short	103
+	.short	0
+	.short	58
+	.short	106
+	.short	0
+	.short	61
+	.short	109
+	.short	0
+	.short	64
+	.short	112
+	.short	0
+	.short	67
+	.short	115
+	.short	0
+	.short	70
+	.short	118
+	.short	0
+	.short	73
+	.short	121
+	.short	0
+	.short	76
+	.short	124
+	.short	0
+	.short	79
+	.short	127
+	.short	0
+	.short	82
+	.short	130
+	.short	0
+	.short	85
+	.short	133
+	.short	0
+	.short	88
+	.short	136
+	.short	0
+	.short	91
+	.short	139
+	.short	0
+	.short	94
+	.short	142
+	.short	0
+	.short	97
+	.short	145
+	.short	0
+	.short	100
+	.short	148
+	.short	0
+	.short	103
+	.short	151
+	.short	0
+	.short	106
+	.short	154
+	.short	0
+	.short	109
+	.short	157
+	.short	0
+	.short	112
+	.short	160
+	.short	0
+	.short	115
+	.short	163
+	.short	0
+	.short	118
+	.short	166
+	.short	0
+	.short	121
+	.short	169
+	.short	0
+	.short	124
+	.short	172
+	.short	0
+	.short	127
+	.short	175
+	.short	0
+	.short	130
+	.short	178
+	.short	0
+	.short	133
+	.short	181
+	.short	0
+	.short	136
+	.short	184
+	.short	0
+	.short	139
+	.short	187
+	.short	0
+	.short	142
+	.short	190
+	.short	0
+	.short	145
+	.short	193
+	.short	0
+	.short	148
+	.short	196
+	.short	0
+	.short	151
+	.short	199
+	.short	0
+	.short	154
+	.short	202
+	.short	0
+	.short	157
+	.short	205
+	.short	0
+	.short	160
+	.short	208
+	.short	0
+	.short	163
+	.short	211
+	.short	0
+	.short	166
+	.short	214
+	.short	0
+	.short	169
+	.short	217
+	.short	0
+	.short	172
+	.short	220
+	.short	0
+	.short	175
+	.short	223
+	.short	0
+	.short	178
+	.short	226
+	.short	0
+	.short	181
+	.short	229
+	.short	0
+	.short	184
+	.short	232
+	.short	0
+	.short	187
+	.short	235
+	.short	0
+	.short	190
+	.short	238
+	.short	0
+	.short	193
+	.short	241
+	.short	0
+	.short	196
+	.short	244
+	.short	0
+	.short	199
+	.short	247
+	.short	0
+	.short	202
+	.short	250
+	.short	0
+	.short	205
+	.short	253
+	.short	0
+	.short	208
+	.short	256
+	.short	0
+	.short	211
+	.short	259
+	.short	0
+	.short	214
+	.short	262
+	.short	0
+	.short	217
+	.short	265
+	.short	0
+	.short	220
+	.short	268
+	.short	0
+	.short	223
+	.short	271
+	.short	0
+	.short	226
+	.short	274
+	.short	0
+	.short	229
+	.short	277
+	.short	0
+	.short	232
+	.short	280
+	.short	0
+	.short	235
+	.short	283
+	.short	0
+	.short	238
+	.short	286
+	.short	0
+	.short	241
+	.short	289
+	.short	0
+	.short	244
+	.short	292
+	.short	0
+	.short	247
+	.short	295
+	.short	0
+	.short	250
+	.short	298
+	.short	0
+	.short	253
+	.short	301
+	.short	0
+	.short	256
+	.short	304
+	.short	0
+	.short	259
+	.short	307
+	.short	0
+	.short	262
+	.short	310
+	.short	0
+	.short	265
+	.short	313
+	.short	0
+	.short	268
+	.short	316
+	.short	0
+	.short	271
+	.short	319
+	.short	0
+	.short	274
+	.short	322
+	.short	0
+	.short	277
+	.short	325
+	.short	0
+	.short	280
+	.short	328
+	.short	0
+	.short	283
+	.short	331
+	.short	0
+	.short	286
+	.short	334
+	.short	0
+	.short	289
+	.short	337
+	.short	0
+	.short	292
+	.short	340
+	.short	0
+	.short	295
+	.short	343
+	.short	0
+	.short	298
+	.short	346
+	.short	0
+	.short	301
+	.short	349
+	.short	0
+	.short	304
+	.short	352
+	.short	0
+	.short	307
+	.short	355
+	.short	0
+	.short	310
+	.short	358
+	.short	0
+	.short	313
+	.short	361
+	.short	0
+	.short	316
+	.short	364
+	.short	0
+	.short	319
+	.short	367
+	.short	0
+	.short	322
+	.short	370
+	.short	0
+	.short	325
+	.short	373
+	.short	0
+	.short	328
+	.short	376
+	.short	0
+	.short	331
+	.short	379
+	.short	0
+	.short	334
+	.short	382
+	.short	0
+	.short	337
+	.short	385
+	.short	0
+	.short	340
+	.short	388
+	.short	0
+	.short	343
+	.short	391
+	.short	0
+	.short	346
+	.short	394
+	.short	0
+	.short	349
+	.short	397
+	.short	0
+	.short	352
+	.short	400
+	.short	0
+	.short	355
+	.short	403
+	.short	0
+	.short	358
+	.short	406
+	.short	0
+	.short	361
+	.short	409
+	.short	0
+	.short	364
+	.short	412
+	.short	0
+	.short	367
+	.short	415
+	.short	0
+	.short	370
+	.short	418
+	.short	0
+	.short	373
+	.short	421
+	.short	0
+	.short	376
+	.short	424
+	.short	0
+	.short	379
+	.short	427
+	.short	0
+	.short	382
+	.short	430
+	.short	0
+	.short	385
+	.short	433
+	.short	0
+	.short	388
+	.short	436
+	.short	0
+	.short	391
+	.short	439
+	.short	0
+	.short	394
+	.short	442
+	.short	0
+	.short	397
+	.short	445
+	.short	0
+	.short	400
+	.short	448
+	.short	0
+	.short	403
+	.short	451
+	.short	0
+	.short	406
+	.short	454
+	.short	0
+	.short	409
+	.short	457
+	.short	0
+	.short	412
+	.short	460
+	.short	0
+	.short	415
+	.short	463
+	.short	0
+	.short	418
+	.short	466
+	.short	0
+	.short	421
+	.short	469
+	.short	0
+	.short	424
+	.short	472
+	.short	0
+	.short	427
+	.short	475
+	.short	0
+	.short	430
+	.short	478
+	.short	0
+	.short	433
+	.short	481
+	.short	0
+	.short	436
+	.short	484
+	.short	0
+	.short	439
+	.short	487
+	.short	0
+	.short	442
+	.short	490
+	.short	0
+	.short	445
+	.short	493
+	.short	0
+	.short	448
+	.short	496
+	.short	0
+	.short	451
+	.short	499
+	.short	0
+	.short	454
+	.short	502
+	.short	0
+	.short	457
+	.short	505
+	.short	0
+	.short	460
+	.short	508
+	.short	0
+	.short	463
+	.short	511
+	.short	0
+	.short	466
+	.short	514
+	.short	0
+	.short	469
+	.short	517
+	.short	0
+	.short	472
+	.short	520
+	.short	0
+	.short	475
+	.short	523
+	.short	0
+	.short	478
+	.short	526
+	.short	0
+	.short	481
+	.short	529
+	.short	0
+	.short	484
+	.short	532
+	.short	0
+	.short	487
+	.short	535
+	.short	0
+	.short	490
+	.short	538
+	.short	0
+	.short	493
+	.short	541
+	.short	0
+	.short	496
+	.short	544
+	.short	0
+	.short	499
+	.short	547
+	.short	0
+	.short	502
+	.short	550
+	.short	0
+	.short	505
+	.short	553
+	.short	0
+	.short	508
+	.short	556
+	.short	0
+	.short	511
+	.short	559
+	.short	0
+	.short	514
+	.short	562
+	.short	0
+	.short	517
+	.short	565
+	.short	0
+	.short	520
+	.short	568
+	.short	0
+	.short	523
+	.short	571
+	.short	0
+	.short	526
+	.short	574
+	.short	0
+	.short	529
+	.short	577
+	.short	0
+	.short	532
+	.short	580
+	.short	0
+	.short	535
+	.short	583
+	.short	0
+	.short	538
+	.short	586
+	.short	0
+	.short	541
+	.short	589
+	.short	0
+	.short	544
+	.short	592
+	.short	0
+	.short	547
+	.short	595
+	.short	0
+	.short	550
+	.short	598
+	.short	0
+	.short	553
+	.short	601
+	.short	0
+	.short	556
+	.short	604
+	.short	0
+	.short	559
+	.short	607
+	.short	0
+	.short	562
+	.short	610
+	.short	0
+	.short	565
+	.short	613
+	.short	0
+	.short	568
+	.short	616
+	.short	0
+	.short	571
+	.short	619
+	.short	0
+	.short	574
+	.short	622
+	.short	0
+	.short	577
+	.short	625
+	.short	0
+	.short	580
+	.short	628
+	.short	0
+	.short	583
+	.short	631
+	.short	0
+	.short	586
+	.short	634
+	.short	0
+	.short	589
+	.short	637
+	.short	0
+	.short	592
+	.short	640
+	.short	0
+	.short	595
+	.short	643
+	.short	0
+	.short	598
+	.short	646
+	.short	0
+	.short	601
+	.short	649
+	.short	0
+	.short	604
+	.short	652
+	.short	0
+	.short	607
+	.short	655
+	.short	0
+	.short	610
+	.short	658
+	.short	0
+	.short	613
+	.short	661
+	.short	0
+	.short	616
+	.short	664
+	.short	0
+	.short	619
+	.short	667
+	.short	0
+	.short	622
+	.short	670
+	.short	0
+	.short	625
+	.short	673
+	.short	0
+	.short	628
+	.short	676
+	.short	0
+	.short	631
+	.short	679
+	.short	0
+	.short	634
+	.short	682
+	.short	0
+	.short	637
+	.short	685
+	.short	0
+	.short	640
+	.short	688
+	.short	0
+	.short	643
+	.short	691
+	.short	0
+	.short	646
+	.short	694
+	.short	0
+	.short	649
+	.short	697
+	.short	0
+	.short	652
+	.short	700
+	.short	0
+	.short	655
+	.short	703
+	.short	0
+	.short	658
+	.short	706
+	.short	0
+	.short	661
+	.short	709
+	.short	0
+	.short	664
+	.short	712
+	.short	0
+	.short	667
+	.short	715
+	.short	0
+	.short	670
+	.short	718
+	.short	0
+	.short	673
+	.short	721
+	.short	0
+	.short	676
+	.short	724
+	.short	0
+	.short	679
+	.short	727
+	.short	0
+	.short	682
+	.short	730
+	.short	0
+	.short	685
+	.short	733
+	.short	0
+	.short	688
+	.short	736
+	.short	0
+	.short	691
+	.short	739
+	.short	0
+	.short	694
+	.short	742
+	.short	0
+	.short	697
+	.short	745
+	.short	0
+	.short	700
+	.short	748
+	.short	0
+	.short	703
+	.short	751
+	.short	0
+	.short	706
+	.short	0
+	.short	709
+	.short	0
+	.short	712
+	.short	0
+	.short	715
+	.short	0
+	.short	718
+	.short	0
+	.short	721
+	.short	0
+	.short	724
+	.short	0
+	.short	727
+	.short	0
+	.type	tlc_prog_order, %object
+	.size	tlc_prog_order, 768
+tlc_prog_order:
+	.short	1
+	.short	9
+	.short	2
+	.short	17
+	.short	10
+	.short	3
+	.short	25
+	.short	18
+	.short	11
+	.short	33
+	.short	26
+	.short	19
+	.short	41
+	.short	34
+	.short	27
+	.short	49
+	.short	42
+	.short	35
+	.short	57
+	.short	50
+	.short	43
+	.short	65
+	.short	58
+	.short	51
+	.short	73
+	.short	66
+	.short	59
+	.short	81
+	.short	74
+	.short	67
+	.short	89
+	.short	82
+	.short	75
+	.short	97
+	.short	90
+	.short	83
+	.short	105
+	.short	98
+	.short	91
+	.short	113
+	.short	106
+	.short	99
+	.short	121
+	.short	114
+	.short	107
+	.short	129
+	.short	122
+	.short	115
+	.short	137
+	.short	130
+	.short	123
+	.short	145
+	.short	138
+	.short	131
+	.short	153
+	.short	146
+	.short	139
+	.short	161
+	.short	154
+	.short	147
+	.short	169
+	.short	162
+	.short	155
+	.short	177
+	.short	170
+	.short	163
+	.short	185
+	.short	178
+	.short	171
+	.short	193
+	.short	186
+	.short	179
+	.short	201
+	.short	194
+	.short	187
+	.short	209
+	.short	202
+	.short	195
+	.short	217
+	.short	210
+	.short	203
+	.short	225
+	.short	218
+	.short	211
+	.short	233
+	.short	226
+	.short	219
+	.short	241
+	.short	234
+	.short	227
+	.short	249
+	.short	242
+	.short	235
+	.short	257
+	.short	250
+	.short	243
+	.short	265
+	.short	258
+	.short	251
+	.short	273
+	.short	266
+	.short	259
+	.short	281
+	.short	274
+	.short	267
+	.short	289
+	.short	282
+	.short	275
+	.short	297
+	.short	290
+	.short	283
+	.short	305
+	.short	298
+	.short	291
+	.short	313
+	.short	306
+	.short	299
+	.short	321
+	.short	314
+	.short	307
+	.short	329
+	.short	322
+	.short	315
+	.short	337
+	.short	330
+	.short	323
+	.short	345
+	.short	338
+	.short	331
+	.short	353
+	.short	346
+	.short	339
+	.short	361
+	.short	354
+	.short	347
+	.short	369
+	.short	362
+	.short	355
+	.short	377
+	.short	370
+	.short	363
+	.short	385
+	.short	378
+	.short	371
+	.short	393
+	.short	386
+	.short	379
+	.short	401
+	.short	394
+	.short	387
+	.short	409
+	.short	402
+	.short	395
+	.short	417
+	.short	410
+	.short	403
+	.short	425
+	.short	418
+	.short	411
+	.short	433
+	.short	426
+	.short	419
+	.short	441
+	.short	434
+	.short	427
+	.short	449
+	.short	442
+	.short	435
+	.short	457
+	.short	450
+	.short	443
+	.short	465
+	.short	458
+	.short	451
+	.short	473
+	.short	466
+	.short	459
+	.short	481
+	.short	474
+	.short	467
+	.short	489
+	.short	482
+	.short	475
+	.short	497
+	.short	490
+	.short	483
+	.short	505
+	.short	498
+	.short	491
+	.short	513
+	.short	506
+	.short	499
+	.short	521
+	.short	514
+	.short	507
+	.short	529
+	.short	522
+	.short	515
+	.short	537
+	.short	530
+	.short	523
+	.short	545
+	.short	538
+	.short	531
+	.short	553
+	.short	546
+	.short	539
+	.short	561
+	.short	554
+	.short	547
+	.short	569
+	.short	562
+	.short	555
+	.short	577
+	.short	570
+	.short	563
+	.short	585
+	.short	578
+	.short	571
+	.short	593
+	.short	586
+	.short	579
+	.short	601
+	.short	594
+	.short	587
+	.short	609
+	.short	602
+	.short	595
+	.short	617
+	.short	610
+	.short	603
+	.short	625
+	.short	618
+	.short	611
+	.short	633
+	.short	626
+	.short	619
+	.short	641
+	.short	634
+	.short	627
+	.short	649
+	.short	642
+	.short	635
+	.short	657
+	.short	650
+	.short	643
+	.short	665
+	.short	658
+	.short	651
+	.short	673
+	.short	666
+	.short	659
+	.short	681
+	.short	674
+	.short	667
+	.short	689
+	.short	682
+	.short	675
+	.short	697
+	.short	690
+	.short	683
+	.short	705
+	.short	698
+	.short	691
+	.short	713
+	.short	706
+	.short	699
+	.short	721
+	.short	714
+	.short	707
+	.short	729
+	.short	722
+	.short	715
+	.short	737
+	.short	730
+	.short	723
+	.short	745
+	.short	738
+	.short	731
+	.short	753
+	.short	746
+	.short	739
+	.short	761
+	.short	754
+	.short	747
+	.short	769
+	.short	762
+	.short	755
+	.short	777
+	.short	770
+	.short	763
+	.short	785
+	.short	778
+	.short	771
+	.short	793
+	.short	786
+	.short	779
+	.short	801
+	.short	794
+	.short	787
+	.short	809
+	.short	802
+	.short	795
+	.short	817
+	.short	810
+	.short	803
+	.short	825
+	.short	818
+	.short	811
+	.short	833
+	.short	826
+	.short	819
+	.short	841
+	.short	834
+	.short	827
+	.short	849
+	.short	842
+	.short	835
+	.short	857
+	.short	850
+	.short	843
+	.short	865
+	.short	858
+	.short	851
+	.short	873
+	.short	866
+	.short	859
+	.short	881
+	.short	874
+	.short	867
+	.short	889
+	.short	882
+	.short	875
+	.short	897
+	.short	890
+	.short	883
+	.short	905
+	.short	898
+	.short	891
+	.short	913
+	.short	906
+	.short	899
+	.short	921
+	.short	914
+	.short	907
+	.short	929
+	.short	922
+	.short	915
+	.short	937
+	.short	930
+	.short	923
+	.short	945
+	.short	938
+	.short	931
+	.short	953
+	.short	946
+	.short	939
+	.short	961
+	.short	954
+	.short	947
+	.short	969
+	.short	962
+	.short	955
+	.short	977
+	.short	970
+	.short	963
+	.short	985
+	.short	978
+	.short	971
+	.short	993
+	.short	986
+	.short	979
+	.short	1001
+	.short	994
+	.short	987
+	.short	1009
+	.short	1002
+	.short	995
+	.short	1017
+	.short	1010
+	.short	1003
+	.short	1018
+	.short	1011
+	.short	1019
+	.type	gTable_Crc32, %object
+	.size	gTable_Crc32, 1024
+gTable_Crc32:
+	.word	0
+	.word	79760823
+	.word	159521646
+	.word	222500569
+	.word	319043292
+	.word	398801771
+	.word	445001138
+	.word	507977733
+	.word	638086584
+	.word	583622671
+	.word	797603542
+	.word	726367073
+	.word	890002276
+	.word	835540691
+	.word	1015955466
+	.word	944721341
+	.word	1276173168
+	.word	1221711559
+	.word	1167245342
+	.word	1096011177
+	.word	1595207084
+	.word	1540743195
+	.word	1452734146
+	.word	1381497717
+	.word	1780004552
+	.word	1859763071
+	.word	1671081382
+	.word	1734058001
+	.word	2031910932
+	.word	2111671715
+	.word	1889442682
+	.word	1952421581
+	.word	-1742620960
+	.word	-1662993577
+	.word	-1851544178
+	.word	-1788698567
+	.word	-1960476612
+	.word	-1880846965
+	.word	-2102944942
+	.word	-2040097051
+	.word	-1104553128
+	.word	-1159145745
+	.word	-1213480906
+	.word	-1284846207
+	.word	-1389499004
+	.word	-1444093901
+	.word	-1531971862
+	.word	-1603339427
+	.word	-734958192
+	.word	-789553113
+	.word	-575441154
+	.word	-646808759
+	.word	-952804532
+	.word	-1007397125
+	.word	-826851294
+	.word	-898216555
+	.word	-231145432
+	.word	-151515745
+	.word	-71623866
+	.word	-8775951
+	.word	-516081932
+	.word	-436454589
+	.word	-390124134
+	.word	-327278547
+	.word	880959607
+	.word	809725376
+	.word	1023441689
+	.word	968980142
+	.word	663115435
+	.word	591878940
+	.word	772033989
+	.word	717570162
+	.word	311037391
+	.word	374014072
+	.word	453514913
+	.word	533273366
+	.word	26098451
+	.word	89077412
+	.word	135012477
+	.word	214773194
+	.word	2022882055
+	.word	2085861040
+	.word	1896915049
+	.word	1976675806
+	.word	1805028827
+	.word	1868005484
+	.word	1645516469
+	.word	1725274882
+	.word	1587205823
+	.word	1515969288
+	.word	1461243345
+	.word	1406779494
+	.word	1302257763
+	.word	1231023572
+	.word	1142749965
+	.word	1088288442
+	.word	-1398548841
+	.word	-1469916384
+	.word	-1524511239
+	.word	-1579106226
+	.word	-1079517109
+	.word	-1150882308
+	.word	-1239024859
+	.word	-1293617518
+	.word	-1968456913
+	.word	-1905609064
+	.word	-2094423999
+	.word	-2014794250
+	.word	-1716548109
+	.word	-1653702588
+	.word	-1876060515
+	.word	-1796433110
+	.word	-525136409
+	.word	-462290864
+	.word	-382658935
+	.word	-303031490
+	.word	-206095557
+	.word	-143247732
+	.word	-97181611
+	.word	-17551902
+	.word	-960798625
+	.word	-1032163864
+	.word	-818316495
+	.word	-872909178
+	.word	-708880765
+	.word	-780248268
+	.word	-599962131
+	.word	-654557094
+	.word	1761919214
+	.word	1841679705
+	.word	1619450752
+	.word	1682429495
+	.word	2046883378
+	.word	2126642053
+	.word	1937960284
+	.word	2000937195
+	.word	1326230870
+	.word	1271767265
+	.word	1183757880
+	.word	1112521615
+	.word	1544067978
+	.word	1489606205
+	.word	1435140324
+	.word	1363905875
+	.word	622074782
+	.word	567612969
+	.word	748028144
+	.word	676793671
+	.word	907029826
+	.word	852566261
+	.word	1066546732
+	.word	995310491
+	.word	52196902
+	.word	131955601
+	.word	178154824
+	.word	241131775
+	.word	270024954
+	.word	349785421
+	.word	429546388
+	.word	492525091
+	.word	-249203186
+	.word	-169575495
+	.word	-123245216
+	.word	-60399401
+	.word	-501137198
+	.word	-421507739
+	.word	-341615684
+	.word	-278768117
+	.word	-684909642
+	.word	-739502591
+	.word	-558956328
+	.word	-630321809
+	.word	-1003934358
+	.word	-1058529059
+	.word	-844417532
+	.word	-915784781
+	.word	-1120555650
+	.word	-1175150391
+	.word	-1263028720
+	.word	-1334395993
+	.word	-1372480606
+	.word	-1427073515
+	.word	-1481408308
+	.word	-1552773765
+	.word	-1690451770
+	.word	-1610822287
+	.word	-1832920152
+	.word	-1770072545
+	.word	-2009467366
+	.word	-1929839699
+	.word	-2118390412
+	.word	-2055544637
+	.word	1569104025
+	.word	1497869614
+	.word	1409596407
+	.word	1355134528
+	.word	1317180997
+	.word	1245944818
+	.word	1191218475
+	.word	1136754844
+	.word	2072956193
+	.word	2135933078
+	.word	1913443919
+	.word	1993202680
+	.word	1753938941
+	.word	1816917578
+	.word	1627971731
+	.word	1707732260
+	.word	295074793
+	.word	358053470
+	.word	403988615
+	.word	483749168
+	.word	43142453
+	.word	106119298
+	.word	185620059
+	.word	265378796
+	.word	933107281
+	.word	861871078
+	.word	1042025791
+	.word	987562120
+	.word	614080653
+	.word	542846266
+	.word	756562915
+	.word	702101076
+	.word	-978905479
+	.word	-1050272818
+	.word	-869987049
+	.word	-924581728
+	.word	-693952347
+	.word	-765317870
+	.word	-551470133
+	.word	-606062980
+	.word	-475038783
+	.word	-412191114
+	.word	-366124881
+	.word	-286495464
+	.word	-257209059
+	.word	-194363222
+	.word	-114731405
+	.word	-35103804
+	.word	-1984443127
+	.word	-1921597250
+	.word	-2143955353
+	.word	-2064327728
+	.word	-1699480619
+	.word	-1636632990
+	.word	-1825447749
+	.word	-1745818356
+	.word	-1346395983
+	.word	-1417761530
+	.word	-1505903649
+	.word	-1560496536
+	.word	-1128556947
+	.word	-1199924262
+	.word	-1254519549
+	.word	-1309114188
+	.bss
+	.align	6
+.LANCHOR0 = . + 0
+.LANCHOR3 = . + 8184
+.LANCHOR4 = . + 24552
+.LANCHOR5 = . + 40920
+	.type	g_flash_slc_mode, %object
+	.size	g_flash_slc_mode, 1
+g_flash_slc_mode:
+	.space	1
+	.type	g_slc_mode_addr2, %object
+	.size	g_slc_mode_addr2, 1
+g_slc_mode_addr2:
+	.space	1
+	.type	g_block_align_addr, %object
+	.size	g_block_align_addr, 2
+g_block_align_addr:
+	.space	2
+	.type	g_lsb_page_tbl, %object
+	.size	g_lsb_page_tbl, 512
+g_lsb_page_tbl:
+	.space	512
+	.type	g_nandc_ver, %object
+	.size	g_nandc_ver, 1
+g_nandc_ver:
+	.space	1
+	.space	3
+	.type	_c_user_data_density, %object
+	.size	_c_user_data_density, 4
+_c_user_data_density:
+	.space	4
+	.type	gp_sblk_list_tbl, %object
+	.size	gp_sblk_list_tbl, 4
+gp_sblk_list_tbl:
+	.space	4
+	.type	gp_nandc, %object
+	.size	gp_nandc, 4
+gp_nandc:
+	.space	4
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.space	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.space	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.space	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.space	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.space	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.space	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.space	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.space	4
+	.type	_c_ftl_blk_pre_plane, %object
+	.size	_c_ftl_blk_pre_plane, 2
+_c_ftl_blk_pre_plane:
+	.space	2
+	.space	2
+	.type	gp_blk_info, %object
+	.size	gp_blk_info, 4
+gp_blk_info:
+	.space	4
+	.type	_c_slc_to_xlc_ec_ratio, %object
+	.size	_c_slc_to_xlc_ec_ratio, 2
+_c_slc_to_xlc_ec_ratio:
+	.space	2
+	.space	2
+	.type	ftl_sblk_vpn, %object
+	.size	ftl_sblk_vpn, 4
+ftl_sblk_vpn:
+	.space	4
+	.type	gp_ftl_ext_info, %object
+	.size	gp_ftl_ext_info, 4
+gp_ftl_ext_info:
+	.space	4
+	.type	gp_nand_para_info, %object
+	.size	gp_nand_para_info, 4
+gp_nand_para_info:
+	.space	4
+	.type	g_idb_ecc_bits, %object
+	.size	g_idb_ecc_bits, 1
+g_idb_ecc_bits:
+	.space	1
+	.type	g_nand_max_die, %object
+	.size	g_nand_max_die, 1
+g_nand_max_die:
+	.space	1
+	.type	g_idb_slc_mode_enable, %object
+	.size	g_idb_slc_mode_enable, 1
+g_idb_slc_mode_enable:
+	.space	1
+	.type	g_nand_opt_para, %object
+	.size	g_nand_opt_para, 32
+g_nand_opt_para:
+	.space	32
+	.type	g_flash_toggle_mode_en, %object
+	.size	g_flash_toggle_mode_en, 1
+g_flash_toggle_mode_en:
+	.space	1
+	.type	nandc_hw_seed, %object
+	.size	nandc_hw_seed, 1
+nandc_hw_seed:
+	.space	1
+	.space	3
+	.type	g_nandc_v6_master_info, %object
+	.size	g_nandc_v6_master_info, 28
+g_nandc_v6_master_info:
+	.space	28
+	.type	nandc_randomizer_en, %object
+	.size	nandc_randomizer_en, 1
+nandc_randomizer_en:
+	.space	1
+	.space	1
+	.type	fill_spare_size, %object
+	.size	fill_spare_size, 2
+fill_spare_size:
+	.space	2
+	.type	g_nandc_ecc_bits, %object
+	.size	g_nandc_ecc_bits, 1
+g_nandc_ecc_bits:
+	.space	1
+	.type	g_retryMode, %object
+	.size	g_retryMode, 1
+g_retryMode:
+	.space	1
+	.type	g_maxRegNum, %object
+	.size	g_maxRegNum, 1
+g_maxRegNum:
+	.space	1
+	.space	1
+	.type	gp_flash_info, %object
+	.size	gp_flash_info, 4
+gp_flash_info:
+	.space	4
+	.type	g_die_cs_idx, %object
+	.size	g_die_cs_idx, 8
+g_die_cs_idx:
+	.space	8
+	.type	_c_ftl_cs_bits, %object
+	.size	_c_ftl_cs_bits, 1
+_c_ftl_cs_bits:
+	.space	1
+	.space	3
+	.type	g_flash_cur_mode, %object
+	.size	g_flash_cur_mode, 4
+g_flash_cur_mode:
+	.space	4
+	.type	g_flash_micron_3d_tlc_flag, %object
+	.size	g_flash_micron_3d_tlc_flag, 1
+g_flash_micron_3d_tlc_flag:
+	.space	1
+	.space	3
+	.type	IDByte, %object
+	.size	IDByte, 32
+IDByte:
+	.space	32
+	.type	g_flash_interface_mode, %object
+	.size	g_flash_interface_mode, 1
+g_flash_interface_mode:
+	.space	1
+	.type	g_flash_multi_page_prog_en, %object
+	.size	g_flash_multi_page_prog_en, 1
+g_flash_multi_page_prog_en:
+	.space	1
+	.space	2
+	.type	g_buf, %object
+	.size	g_buf, 1536
+g_buf:
+	.space	1536
+	.type	_c_ftl_sec_per_page, %object
+	.size	_c_ftl_sec_per_page, 1
+_c_ftl_sec_per_page:
+	.space	1
+	.type	p_free_buf_head, %object
+	.size	p_free_buf_head, 1
+p_free_buf_head:
+	.space	1
+	.type	free_buf_count, %object
+	.size	free_buf_count, 1
+free_buf_count:
+	.space	1
+	.type	sblk_queue_head, %object
+	.size	sblk_queue_head, 1
+sblk_queue_head:
+	.space	1
+	.type	_c_totle_phy_density, %object
+	.size	_c_totle_phy_density, 4
+_c_totle_phy_density:
+	.space	4
+	.type	_c_totle_log_page, %object
+	.size	_c_totle_log_page, 4
+_c_totle_log_page:
+	.space	4
+	.type	free_slc_sblk, %object
+	.size	free_slc_sblk, 2
+free_slc_sblk:
+	.space	2
+	.type	free_xlc_sblk, %object
+	.size	free_xlc_sblk, 2
+free_xlc_sblk:
+	.space	2
+	.type	free_mix_sblk, %object
+	.size	free_mix_sblk, 2
+free_mix_sblk:
+	.space	2
+	.type	slc_data_sblk, %object
+	.size	slc_data_sblk, 2
+slc_data_sblk:
+	.space	2
+	.type	slc_cache_sblk, %object
+	.size	slc_cache_sblk, 2
+slc_cache_sblk:
+	.space	2
+	.type	xlc_data_sblk, %object
+	.size	xlc_data_sblk, 2
+xlc_data_sblk:
+	.space	2
+	.type	write_buf_count, %object
+	.size	write_buf_count, 1
+write_buf_count:
+	.space	1
+	.type	write_commit_count, %object
+	.size	write_commit_count, 1
+write_commit_count:
+	.space	1
+	.space	2
+	.type	gp_ftl_info, %object
+	.size	gp_ftl_info, 4
+gp_ftl_info:
+	.space	4
+	.type	gc_free_slc_sblk_th, %object
+	.size	gc_free_slc_sblk_th, 2
+gc_free_slc_sblk_th:
+	.space	2
+	.type	gc_tlc_mode_tlc_vpn_th, %object
+	.size	gc_tlc_mode_tlc_vpn_th, 2
+gc_tlc_mode_tlc_vpn_th:
+	.space	2
+	.type	gc_tlc_mode_slc_vpn_th, %object
+	.size	gc_tlc_mode_slc_vpn_th, 2
+gc_tlc_mode_slc_vpn_th:
+	.space	2
+	.type	gc_slc_mode_vpn_th, %object
+	.size	gc_slc_mode_vpn_th, 2
+gc_slc_mode_vpn_th:
+	.space	2
+	.type	gc_slc_mode_tlc_vpn_th, %object
+	.size	gc_slc_mode_tlc_vpn_th, 2
+gc_slc_mode_tlc_vpn_th:
+	.space	2
+	.space	2
+	.type	_gc_after_discard_en, %object
+	.size	_gc_after_discard_en, 4
+_gc_after_discard_en:
+	.space	4
+	.type	write_buf_head, %object
+	.size	write_buf_head, 1
+write_buf_head:
+	.space	1
+	.space	3
+	.type	g_gc_info, %object
+	.size	g_gc_info, 596
+g_gc_info:
+	.space	596
+	.type	ftl_sblk_vpn_update_id, %object
+	.size	ftl_sblk_vpn_update_id, 2
+ftl_sblk_vpn_update_id:
+	.space	2
+	.space	2
+	.type	ftl_sblk_update_list, %object
+	.size	ftl_sblk_update_list, 16
+ftl_sblk_update_list:
+	.space	16
+	.type	_c_ftl_block_addr_log2, %object
+	.size	_c_ftl_block_addr_log2, 2
+_c_ftl_block_addr_log2:
+	.space	2
+	.type	_c_ftl_planes_per_die, %object
+	.size	_c_ftl_planes_per_die, 1
+_c_ftl_planes_per_die:
+	.space	1
+	.space	1
+	.type	gc_valid_page_ppa, %object
+	.size	gc_valid_page_ppa, 4
+gc_valid_page_ppa:
+	.space	4
+	.type	sblk_gc_write_completed_queue_head, %object
+	.size	sblk_gc_write_completed_queue_head, 1
+sblk_gc_write_completed_queue_head:
+	.space	1
+	.type	_c_ftl_nand_type, %object
+	.size	_c_ftl_nand_type, 1
+_c_ftl_nand_type:
+	.space	1
+	.type	g_flash_3d_mlc_flag, %object
+	.size	g_flash_3d_mlc_flag, 1
+g_flash_3d_mlc_flag:
+	.space	1
+	.type	g_one_pass_program, %object
+	.size	g_one_pass_program, 1
+g_one_pass_program:
+	.space	1
+	.type	gc_page_buf_id, %object
+	.size	gc_page_buf_id, 4
+gc_page_buf_id:
+	.space	4
+	.type	g_flash_3d_tlc_flag, %object
+	.size	g_flash_3d_tlc_flag, 1
+g_flash_3d_tlc_flag:
+	.space	1
+	.type	gc_mode, %object
+	.size	gc_mode, 1
+gc_mode:
+	.space	1
+	.type	gc_slc_cache_index, %object
+	.size	gc_slc_cache_index, 2
+gc_slc_cache_index:
+	.space	2
+	.type	gp_data_slc_cache_head, %object
+	.size	gp_data_slc_cache_head, 4
+gp_data_slc_cache_head:
+	.space	4
+	.type	gc_xlc_data_index, %object
+	.size	gc_xlc_data_index, 2
+gc_xlc_data_index:
+	.space	2
+	.space	2
+	.type	gp_data_xlc_data_head, %object
+	.size	gp_data_xlc_data_head, 4
+gp_data_xlc_data_head:
+	.space	4
+	.type	_c_ftl_page_pre_slc_blk, %object
+	.size	_c_ftl_page_pre_slc_blk, 2
+_c_ftl_page_pre_slc_blk:
+	.space	2
+	.type	_c_ftl_page_pre_blk, %object
+	.size	_c_ftl_page_pre_blk, 2
+_c_ftl_page_pre_blk:
+	.space	2
+	.type	_c_ftl_nand_planes_num, %object
+	.size	_c_ftl_nand_planes_num, 1
+_c_ftl_nand_planes_num:
+	.space	1
+	.space	1
+	.type	gc_slc_data_index, %object
+	.size	gc_slc_data_index, 2
+gc_slc_data_index:
+	.space	2
+	.type	gp_data_slc_data_head, %object
+	.size	gp_data_slc_data_head, 4
+gp_data_slc_data_head:
+	.space	4
+	.type	gc_xlc_search_index, %object
+	.size	gc_xlc_search_index, 2
+gc_xlc_search_index:
+	.space	2
+	.type	_min_slc_super_block, %object
+	.size	_min_slc_super_block, 2
+_min_slc_super_block:
+	.space	2
+	.type	_max_xlc_super_block, %object
+	.size	_max_xlc_super_block, 2
+_max_xlc_super_block:
+	.space	2
+	.space	2
+	.type	gp_free_slc_head, %object
+	.size	gp_free_slc_head, 4
+gp_free_slc_head:
+	.space	4
+	.type	gp_free_xlc_head, %object
+	.size	gp_free_xlc_head, 4
+gp_free_xlc_head:
+	.space	4
+	.type	gp_free_mix_head, %object
+	.size	gp_free_mix_head, 4
+gp_free_mix_head:
+	.space	4
+	.type	zftl_print_list_count, %object
+	.size	zftl_print_list_count, 2
+zftl_print_list_count:
+	.space	2
+	.type	_c_ftl_block_align_addr, %object
+	.size	_c_ftl_block_align_addr, 2
+_c_ftl_block_align_addr:
+	.space	2
+	.type	_c_ftl_nand_die_num, %object
+	.size	_c_ftl_nand_die_num, 1
+_c_ftl_nand_die_num:
+	.space	1
+	.space	3
+	.type	lpa_hash, %object
+	.size	lpa_hash, 512
+lpa_hash:
+	.space	512
+	.type	ftl_sblk_lpa_tbl, %object
+	.size	ftl_sblk_lpa_tbl, 4
+ftl_sblk_lpa_tbl:
+	.space	4
+	.type	lpa_hash_index, %object
+	.size	lpa_hash_index, 4
+lpa_hash_index:
+	.space	4
+	.type	ftl_vpn_update_count, %object
+	.size	ftl_vpn_update_count, 2
+ftl_vpn_update_count:
+	.space	2
+	.type	ftl_sblk_update_list_offset, %object
+	.size	ftl_sblk_update_list_offset, 2
+ftl_sblk_update_list_offset:
+	.space	2
+	.type	_c_mix_max_xlc_ec_count, %object
+	.size	_c_mix_max_xlc_ec_count, 2
+_c_mix_max_xlc_ec_count:
+	.space	2
+	.type	_max_slc_super_block, %object
+	.size	_max_slc_super_block, 2
+_max_slc_super_block:
+	.space	2
+	.type	_c_mix_max_slc_ec_count, %object
+	.size	_c_mix_max_slc_ec_count, 2
+_c_mix_max_slc_ec_count:
+	.space	2
+	.type	sblk_write_completed_queue_head, %object
+	.size	sblk_write_completed_queue_head, 1
+sblk_write_completed_queue_head:
+	.space	1
+	.type	read_buf_head, %object
+	.size	read_buf_head, 1
+read_buf_head:
+	.space	1
+	.type	read_buf_count, %object
+	.size	read_buf_count, 1
+read_buf_count:
+	.space	1
+	.type	sblk_read_completed_queue_head, %object
+	.size	sblk_read_completed_queue_head, 1
+sblk_read_completed_queue_head:
+	.space	1
+	.space	2
+	.type	pm_gc_enable, %object
+	.size	pm_gc_enable, 4
+pm_gc_enable:
+	.space	4
+	.type	pm_ram_info, %object
+	.size	pm_ram_info, 256
+pm_ram_info:
+	.space	256
+	.type	pm_last_update_ram_id, %object
+	.size	pm_last_update_ram_id, 1
+pm_last_update_ram_id:
+	.space	1
+	.space	3
+	.type	g_msb_page_tbl, %object
+	.size	g_msb_page_tbl, 1024
+g_msb_page_tbl:
+	.space	1024
+	.type	g_slc_page_num, %object
+	.size	g_slc_page_num, 2
+g_slc_page_num:
+	.space	2
+	.space	2
+	.type	g_die_addr, %object
+	.size	g_die_addr, 32
+g_die_addr:
+	.space	32
+	.type	g_totle_phy_block, %object
+	.size	g_totle_phy_block, 2
+g_totle_phy_block:
+	.space	2
+	.type	gc_state, %object
+	.size	gc_state, 1
+gc_state:
+	.space	1
+	.space	1
+	.type	gc_search_count, %object
+	.size	gc_search_count, 4
+gc_search_count:
+	.space	4
+	.type	gc_lpa_tbl, %object
+	.size	gc_lpa_tbl, 4
+gc_lpa_tbl:
+	.space	4
+	.type	gc_pre_ppa_tbl, %object
+	.size	gc_pre_ppa_tbl, 4
+gc_pre_ppa_tbl:
+	.space	4
+	.type	gc_des_ppa_tbl, %object
+	.size	gc_des_ppa_tbl, 4
+gc_des_ppa_tbl:
+	.space	4
+	.type	pm_force_gc, %object
+	.size	pm_force_gc, 4
+pm_force_gc:
+	.space	4
+	.type	_c_swl_slc_gc_th, %object
+	.size	_c_swl_slc_gc_th, 2
+_c_swl_slc_gc_th:
+	.space	2
+	.type	_c_swl_xlc_gc_th, %object
+	.size	_c_swl_xlc_gc_th, 2
+_c_swl_xlc_gc_th:
+	.space	2
+	.type	_c_max_pm_sblk, %object
+	.size	_c_max_pm_sblk, 2
+_c_max_pm_sblk:
+	.space	2
+	.space	6
+	.type	power_on_init_jiffies, %object
+	.size	power_on_init_jiffies, 8
+power_on_init_jiffies:
+	.space	8
+	.type	gp_ftl_api, %object
+	.size	gp_ftl_api, 4
+gp_ftl_api:
+	.space	4
+	.type	RK29_NANDC_REG_BASE, %object
+	.size	RK29_NANDC_REG_BASE, 4
+RK29_NANDC_REG_BASE:
+	.space	4
+	.type	g_flash_tmp_page_buffer, %object
+	.size	g_flash_tmp_page_buffer, 4
+g_flash_tmp_page_buffer:
+	.space	4
+	.type	g_nandc_tran_timeout, %object
+	.size	g_nandc_tran_timeout, 1
+g_nandc_tran_timeout:
+	.space	1
+	.space	3
+	.type	g_flash_tmp_spare_buffer, %object
+	.size	g_flash_tmp_spare_buffer, 4
+g_flash_tmp_spare_buffer:
+	.space	4
+	.type	g_maxRetryCount, %object
+	.size	g_maxRetryCount, 1
+g_maxRetryCount:
+	.space	1
+	.space	3
+	.type	flash_ddr_tuning_sdr_read_count, %object
+	.size	flash_ddr_tuning_sdr_read_count, 4
+flash_ddr_tuning_sdr_read_count:
+	.space	4
+	.type	flash_read_retry, %object
+	.size	flash_read_retry, 4
+flash_read_retry:
+	.space	4
+	.type	g_flash_page_buffer, %object
+	.size	g_flash_page_buffer, 4
+g_flash_page_buffer:
+	.space	4
+	.type	g_flash_spare_buffer, %object
+	.size	g_flash_spare_buffer, 4
+g_flash_spare_buffer:
+	.space	4
+	.type	g_flash_multi_page_read_en, %object
+	.size	g_flash_multi_page_read_en, 1
+g_flash_multi_page_read_en:
+	.space	1
+	.type	write_commit_head, %object
+	.size	write_commit_head, 1
+write_commit_head:
+	.space	1
+	.space	2
+	.type	ftl_flush_jiffies, %object
+	.size	ftl_flush_jiffies, 4
+ftl_flush_jiffies:
+	.space	4
+	.space	40
+	.type	ftl_info_spare, %object
+	.size	ftl_info_spare, 256
+ftl_info_spare:
+	.space	256
+	.type	g_ftl_info_blk, %object
+	.size	g_ftl_info_blk, 4
+g_ftl_info_blk:
+	.space	4
+	.space	60
+	.type	ftl_info_data_buffer, %object
+	.size	ftl_info_data_buffer, 16384
+ftl_info_data_buffer:
+	.space	16384
+	.type	ftl_sys_info_first_write, %object
+	.size	ftl_sys_info_first_write, 1
+ftl_sys_info_first_write:
+	.space	1
+	.type	ftl_power_lost_flag, %object
+	.size	ftl_power_lost_flag, 1
+ftl_power_lost_flag:
+	.space	1
+	.type	ftl_ext_info_first_write, %object
+	.size	ftl_ext_info_first_write, 1
+ftl_ext_info_first_write:
+	.space	1
+	.space	61
+	.type	ftl_ext_info_data_buffer, %object
+	.size	ftl_ext_info_data_buffer, 16384
+ftl_ext_info_data_buffer:
+	.space	16384
+	.type	ftl_tmp_spare, %object
+	.size	ftl_tmp_spare, 256
+ftl_tmp_spare:
+	.space	256
+	.type	g_pm_spare, %object
+	.size	g_pm_spare, 4
+g_pm_spare:
+	.space	4
+	.type	pm_first_write, %object
+	.size	pm_first_write, 1
+pm_first_write:
+	.space	1
+	.space	3
+	.type	g_flash_sys_spare_buffer, %object
+	.size	g_flash_sys_spare_buffer, 4
+g_flash_sys_spare_buffer:
+	.space	4
+	.type	g_flash_blk_info, %object
+	.size	g_flash_blk_info, 4
+g_flash_blk_info:
+	.space	4
+	.type	g_flash_reversd_blks, %object
+	.size	g_flash_reversd_blks, 1
+g_flash_reversd_blks:
+	.space	1
+	.type	g_flash_micron_3d_tlc_b05a, %object
+	.size	g_flash_micron_3d_tlc_b05a, 1
+g_flash_micron_3d_tlc_b05a:
+	.space	1
+	.type	g_flash_micron_3d_tlc_b16a, %object
+	.size	g_flash_micron_3d_tlc_b16a, 1
+g_flash_micron_3d_tlc_b16a:
+	.space	1
+	.space	1
+	.type	_c_ftl_byte_pre_page, %object
+	.size	_c_ftl_byte_pre_page, 2
+_c_ftl_byte_pre_page:
+	.space	2
+	.type	pm_last_load_ram_id, %object
+	.size	pm_last_load_ram_id, 1
+pm_last_load_ram_id:
+	.space	1
+	.space	1
+	.type	read_ahead_lpa, %object
+	.size	read_ahead_lpa, 4
+read_ahead_lpa:
+	.space	4
+	.type	_c_totle_data_density, %object
+	.size	_c_totle_data_density, 4
+_c_totle_data_density:
+	.space	4
+	.type	_c_ftl_pm_page_num, %object
+	.size	_c_ftl_pm_page_num, 2
+_c_ftl_pm_page_num:
+	.space	2
+	.type	rk_zftl_enable, %object
+	.size	rk_zftl_enable, 1
+rk_zftl_enable:
+	.space	1
+	.space	1
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 4
+gLoaderBootInfo:
+	.space	4
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 4
+RK29_NANDC1_REG_BASE:
+	.space	4
+	.type	_last_read_time, %object
+	.size	_last_read_time, 4
+_last_read_time:
+	.space	4
+	.type	_last_write_time, %object
+	.size	_last_write_time, 4
+_last_write_time:
+	.space	4
+	.type	discard_sector_count, %object
+	.size	discard_sector_count, 4
+discard_sector_count:
+	.space	4
+	.type	idb_write_enable, %object
+	.size	idb_write_enable, 1
+idb_write_enable:
+	.space	1
+	.space	3
+	.type	idb_buf, %object
+	.size	idb_buf, 4
+idb_buf:
+	.space	4
+	.type	idb_last_lba, %object
+	.size	idb_last_lba, 4
+idb_last_lba:
+	.space	4
+	.type	g_idb_buffer, %object
+	.size	g_idb_buffer, 4
+g_idb_buffer:
+	.space	4
+	.type	gpDrmKeyInfo, %object
+	.size	gpDrmKeyInfo, 4
+gpDrmKeyInfo:
+	.space	4
+	.type	SecureBootCheckOK, %object
+	.size	SecureBootCheckOK, 4
+SecureBootCheckOK:
+	.space	4
+	.type	SecureBootEn, %object
+	.size	SecureBootEn, 4
+SecureBootEn:
+	.space	4
+	.type	gpBootConfig, %object
+	.size	gpBootConfig, 4
+gpBootConfig:
+	.space	4
+	.type	gSnSectorData, %object
+	.size	gSnSectorData, 512
+gSnSectorData:
+	.space	512
+	.type	SecureBootUnlockTryCount, %object
+	.size	SecureBootUnlockTryCount, 4
+SecureBootUnlockTryCount:
+	.space	4
+	.type	gpVendor0Info, %object
+	.size	gpVendor0Info, 4
+gpVendor0Info:
+	.space	4
+	.type	gpVendor1Info, %object
+	.size	gpVendor1Info, 4
+gpVendor1Info:
+	.space	4
+	.type	g_vendor, %object
+	.size	g_vendor, 4
+g_vendor:
+	.space	4
+	.type	ftl_low_format_cur_blk, %object
+	.size	ftl_low_format_cur_blk, 2
+ftl_low_format_cur_blk:
+	.space	2
+	.space	22
+	.type	ftl_tmp_buffer, %object
+	.size	ftl_tmp_buffer, 16384
+ftl_tmp_buffer:
+	.space	16384
+	.type	p_read_ahead_ext_buf, %object
+	.size	p_read_ahead_ext_buf, 4
+p_read_ahead_ext_buf:
+	.space	4
+	.type	_c_ftl_nand_blks_per_die, %object
+	.size	_c_ftl_nand_blks_per_die, 2
+_c_ftl_nand_blks_per_die:
+	.space	2
+	.space	2
+	.type	nandc_ecc_sts, %object
+	.size	nandc_ecc_sts, 16
+nandc_ecc_sts:
+	.space	16
+	.type	g_slc_mode_enable, %object
+	.size	g_slc_mode_enable, 1
+g_slc_mode_enable:
+	.space	1
diff --git a/drivers/rk_nand/rk_zftl_arm64.S b/drivers/rk_nand/rk_zftl_arm64.S
index 65c22ad657ac..50be9f205eb4 100644
--- a/drivers/rk_nand/rk_zftl_arm64.S
+++ b/drivers/rk_nand/rk_zftl_arm64.S
@@ -5,8 +5,8 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2019-04-27
- * function: rk ftl v5 for rockchip soc base on arm v8 to support 3D/2D
+ * date: 2019-09-18
+ * function: rk ftl v6 for rockchip soc base on arm v8 to support 3D/2D
  *	     TLC and MLC.
  */
 	.cpu generic+fp+simd
@@ -461,8 +461,8 @@ _insert_free_list:
 	.type	_insert_data_list, %function
 _insert_data_list:
 	sub	sp, sp, #32
-	adrp	x5, .LANCHOR0
-	add	x10, x5, :lo12:.LANCHOR0
+	adrp	x6, .LANCHOR0
+	add	x10, x6, :lo12:.LANCHOR0
 	uxth	w1, w1
 	stp	x19, x20, [sp]
 	str	x21, [sp,16]
@@ -476,97 +476,91 @@ _insert_data_list:
 	umull	x8, w1, w8
 	ldr	x14, [x10,528]
 	mov	w2, -1
-	add	x6, x14, x8
-	strh	w2, [x6,2]
+	add	x7, x14, x8
+	strh	w2, [x7,2]
 	strh	w2, [x14,x8]
 	ldr	x2, [x0]
-	cbz	x2, .L81
+	cbz	x2, .L79
 	uxtw	x9, w1
-	ldr	x16, [x10,600]
-	ldr	x12, [x10,584]
-	ldrh	w11, [x6,4]
-	ldrh	w4, [x16,x9,lsl 1]
+	ldr	x15, [x10,600]
+	ldr	x13, [x10,584]
+	ldrh	w11, [x7,4]
+	ldrh	w5, [x15,x9,lsl 1]
 	lsl	x9, x9, 2
-	ldrh	w17, [x10,592]
-	ldr	w3, [x12,x9]
-	mul	w4, w4, w11
-	ubfx	x7, x3, 11, 8
-	ldrh	w3, [x12,x9]
+	ldrh	w16, [x10,592]
+	ldr	w3, [x13,x9]
+	mul	w5, w5, w11
+	ubfx	x4, x3, 11, 8
+	ldrh	w3, [x13,x9]
 	and	w3, w3, 2047
-	cbz	w4, .L65
-	madd	w3, w17, w7, w3
-	add	w4, w4, w3, uxth
+	cbz	w5, .L65
+	madd	w3, w16, w4, w3
+	add	w5, w5, w3, uxth
 .L65:
-	add	x7, x5, :lo12:.LANCHOR0
+	add	x4, x6, :lo12:.LANCHOR0
 	mov	x9, -6148914691236517206
 	cmp	w11, wzr
-	mov	w20, 65535
-	csinv	w4, w4, wzr, ne
-	mov	w21, 6
-	ldr	x18, [x7,528]
-	ldrh	w19, [x7,576]
-	mov	w7, 0
-	sub	x3, x2, x18
+	mov	w21, 65535
+	csinv	w5, w5, wzr, ne
+	mov	w19, 6
+	ldr	x17, [x4,528]
+	ldrh	w20, [x4,576]
+	sub	x3, x2, x17
 	asr	x3, x3, 1
 	madd	x3, x9, x3, x3
+	mov	w9, 0
 	uxth	w3, w3
-.L72:
-	add	w7, w7, 1
+.L71:
+	add	w9, w9, 1
 	cmp	w1, w3
-	uxth	w7, w7
+	uxth	w9, w9
 	beq	.L61
-	cmp	w7, w19
+	cmp	w9, w20
 	bhi	.L61
-	uxtw	x11, w3
-	ldrh	w15, [x2,4]
-	ldrh	w13, [x16,x11,lsl 1]
-	lsl	x11, x11, 2
-	ldr	w9, [x12,x11]
-	mul	w13, w13, w15
-	ubfx	x10, x9, 11, 8
-	ldrh	w9, [x12,x11]
-	and	w9, w9, 2047
-	cbz	w13, .L68
-	mov	w11, -1
-	cbz	w15, .L69
-	madd	w9, w17, w10, w9
-	add	w11, w13, w9, uxth
-	b	.L69
+	uxtw	x12, w3
+	ldrh	w18, [x2,4]
+	ldrh	w4, [x15,x12,lsl 1]
+	lsl	x12, x12, 2
+	ldr	w10, [x13,x12]
+	mul	w4, w4, w18
+	ubfx	x11, x10, 11, 8
+	ldrh	w10, [x13,x12]
+	and	w10, w10, 2047
+	cbz	w4, .L68
+	madd	w10, w16, w11, w10
+	add	w4, w4, w10, uxth
 .L68:
-	cbnz	w15, .L74
-	mov	w11, -1
-.L69:
-	cmp	w11, w4
-	bhi	.L70
-.L74:
-	ldrh	w9, [x2]
-	cmp	w9, w20
-	bne	.L71
-	strh	w3, [x6,2]
+	cmp	w4, w5
+	bcs	.L69
+	cbz	w18, .L69
+	ldrh	w4, [x2]
+	cmp	w4, w21
+	bne	.L70
+	strh	w3, [x7,2]
 	strh	w1, [x2]
 	b	.L61
-.L71:
-	umull	x2, w9, w21
-	mov	w3, w9
-	add	x2, x18, x2
-	b	.L72
 .L70:
+	umull	x2, w4, w19
+	mov	w3, w4
+	add	x2, x17, x2
+	b	.L71
+.L69:
 	ldrh	w4, [x2,2]
-	strh	w4, [x6,2]
+	strh	w4, [x7,2]
 	strh	w3, [x14,x8]
 	ldr	x3, [x0]
 	cmp	x2, x3
-	bne	.L73
+	bne	.L72
 	strh	w1, [x2,2]
-.L81:
-	str	x6, [x0]
+.L79:
+	str	x7, [x0]
 	b	.L61
-.L73:
+.L72:
 	ldrh	w0, [x2,2]
-	add	x5, x5, :lo12:.LANCHOR0
+	add	x6, x6, :lo12:.LANCHOR0
 	mov	w3, 6
 	umull	x0, w0, w3
-	ldr	x3, [x5,528]
+	ldr	x3, [x6,528]
 	strh	w1, [x3,x0]
 	strh	w1, [x2,2]
 .L61:
@@ -580,28 +574,28 @@ _insert_data_list:
 _list_get_gc_head_node.isra.5:
 	uxth	w1, w1
 	mov	w2, 65535
-	cbz	x0, .L88
+	cbz	x0, .L86
 	adrp	x2, .LANCHOR0+528
 	mov	w4, 65535
 	mov	w5, 6
 	ldr	x3, [x2,#:lo12:.LANCHOR0+528]
-.L84:
-	cbz	w1, .L85
+.L82:
+	cbz	w1, .L83
 	ldrh	w2, [x0]
 	cmp	w2, w4
-	beq	.L88
+	beq	.L86
 	umull	x2, w2, w5
 	sub	w1, w1, #1
 	add	x0, x3, x2
 	uxth	w1, w1
-	b	.L84
-.L85:
+	b	.L82
+.L83:
 	sub	x0, x0, x3
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
 	madd	x0, x1, x0, x0
 	uxth	w2, w0
-.L88:
+.L86:
 	mov	w0, w2
 	ret
 	.size	_list_get_gc_head_node.isra.5, .-_list_get_gc_head_node.isra.5
@@ -621,29 +615,29 @@ _list_update_data_list:
 	ldr	x3, [x4,608]
 	ldrh	w5, [x3,16]
 	cmp	w5, w19
-	beq	.L89
+	beq	.L87
 	ldrh	w1, [x3,48]
 	cmp	w1, w19
-	beq	.L89
+	beq	.L87
 	ldrh	w1, [x3,80]
 	cmp	w1, w19
-	beq	.L89
+	beq	.L87
 	mov	w23, 6
 	ldr	x25, [x4,528]
 	ldr	x1, [x0]
 	umull	x23, w19, w23
 	add	x24, x25, x23
 	cmp	x24, x1
-	beq	.L89
+	beq	.L87
 	mov	x21, x0
 	ldrh	w0, [x24,2]
 	mov	w1, 65535
 	mov	x22, x2
 	cmp	w0, w1
-	bne	.L93
+	bne	.L91
 	ldrh	w1, [x25,x23]
 	cmp	w1, w0
-	bne	.L93
+	bne	.L91
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
@@ -652,15 +646,15 @@ _list_update_data_list:
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L93:
+.L91:
 	ldrh	w3, [x24,2]
 	mov	w0, 65535
 	cmp	w3, w0
-	bne	.L94
+	bne	.L92
 	ldrh	w0, [x25,x23]
 	cmp	w0, w3
-	beq	.L89
-.L94:
+	beq	.L87
+.L92:
 	add	x1, x20, :lo12:.LANCHOR0
 	ubfiz	x0, x19, 1, 16
 	mov	x5, -6148914691236517206
@@ -682,7 +676,7 @@ _list_update_data_list:
 	mul	w0, w0, w1
 	csinv	w0, w0, wzr, ne
 	cmp	w2, w0
-	bcs	.L89
+	bcs	.L87
 	mov	x0, x21
 	mov	w1, w19
 	mov	x2, x22
@@ -691,7 +685,7 @@ _list_update_data_list:
 	mov	w1, w19
 	mov	x2, x22
 	bl	_insert_data_list
-.L89:
+.L87:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -713,8 +707,8 @@ zftl_get_gc_node.part.12:
 	.size	zftl_get_gc_node.part.12, .-zftl_get_gc_node.part.12
 	.section	.text.unlikely
 	.align	2
-	.type	rk_simple_strtoull.constprop.33, %function
-rk_simple_strtoull.constprop.33:
+	.type	rk_simple_strtoull.constprop.34, %function
+rk_simple_strtoull.constprop.34:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
@@ -724,56 +718,56 @@ rk_simple_strtoull.constprop.33:
 	mov	x23, x1
 	ldrb	w0, [x0]
 	cmp	w0, 48
-	bne	.L111
+	bne	.L109
 	ldrb	w0, [x20,1]
 	add	x19, x20, 1
 	mov	w21, 8
 	orr	w0, w0, 32
 	uxtb	w0, w0
 	cmp	w0, 120
-	bne	.L101
+	bne	.L99
 	ldrb	w0, [x20,2]
 	bl	isxdigit
-	cbz	w0, .L101
+	cbz	w0, .L99
 	add	x19, x20, 2
 	mov	w21, 16
-	b	.L101
-.L111:
+	b	.L99
+.L109:
 	mov	x19, x20
 	mov	w21, 10
-.L101:
+.L99:
 	mov	w22, 0
-.L102:
+.L100:
 	ldrb	w20, [x19]
 	mov	w0, w20
 	bl	isxdigit
-	cbnz	w0, .L103
-.L109:
-	cbz	x23, .L115
+	cbnz	w0, .L101
+.L107:
+	cbz	x23, .L113
 	str	x19, [x23]
-	b	.L115
-.L103:
+	b	.L113
+.L101:
 	sub	w2, w20, #48
 	cmp	w2, 9
-	bhi	.L116
-.L110:
+	bhi	.L114
+.L108:
 	cmp	w2, w21
-	bcs	.L109
+	bcs	.L107
 	madd	w22, w22, w21, w2
 	add	x19, x19, 1
-	b	.L102
-.L116:
+	b	.L100
+.L114:
 	orr	w20, w20, 32
 	sub	w2, w20, #87
-	b	.L110
-.L115:
+	b	.L108
+.L113:
 	mov	w0, w22
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 64
 	ret
-	.size	rk_simple_strtoull.constprop.33, .-rk_simple_strtoull.constprop.33
+	.size	rk_simple_strtoull.constprop.34, .-rk_simple_strtoull.constprop.34
 	.text
 	.align	2
 	.global	nand_flash_print_info
@@ -784,16 +778,16 @@ nand_flash_print_info:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR2
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L118
+	tbz	x0, 12, .L116
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC4
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC4
 	add	x1, x1, 48
 	bl	printk
-.L118:
+.L116:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L119
+	tbz	x0, 12, .L117
 	adrp	x0, .LANCHOR0+624
 	ldr	x6, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC5
@@ -805,132 +799,132 @@ nand_flash_print_info:
 	ldrb	w5, [x6,5]
 	ldrb	w6, [x6,6]
 	bl	printk
-.L119:
+.L117:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L120
+	tbz	x0, 12, .L118
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC6
 	add	x0, x0, :lo12:.LC6
 	ldrb	w1, [x1,8]
 	bl	printk
-.L120:
+.L118:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L121
+	tbz	x0, 12, .L119
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC7
 	add	x0, x0, :lo12:.LC7
 	ldrb	w1, [x1,9]
 	bl	printk
-.L121:
+.L119:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L122
+	tbz	x0, 12, .L120
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	ldrh	w1, [x1,10]
 	bl	printk
-.L122:
+.L120:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L123
+	tbz	x0, 12, .L121
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC9
 	add	x0, x0, :lo12:.LC9
 	ldrb	w1, [x1,12]
 	bl	printk
-.L123:
+.L121:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L124
+	tbz	x0, 12, .L122
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC10
 	add	x0, x0, :lo12:.LC10
 	ldrb	w1, [x1,13]
 	bl	printk
-.L124:
+.L122:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L125
+	tbz	x0, 12, .L123
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC11
 	add	x0, x0, :lo12:.LC11
 	ldrh	w1, [x1,14]
 	bl	printk
-.L125:
+.L123:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L126
+	tbz	x0, 12, .L124
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC12
 	add	x0, x0, :lo12:.LC12
 	ldrb	w1, [x1,23]
 	bl	printk
-.L126:
+.L124:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L127
+	tbz	x0, 12, .L125
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC13
 	add	x0, x0, :lo12:.LC13
 	ldrb	w1, [x1,18]
 	bl	printk
-.L127:
+.L125:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L128
+	tbz	x0, 12, .L126
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC14
 	add	x0, x0, :lo12:.LC14
 	ldrb	w1, [x1,19]
 	bl	printk
-.L128:
+.L126:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L129
+	tbz	x0, 12, .L127
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC15
 	add	x0, x0, :lo12:.LC15
 	ldrb	w1, [x1,20]
 	bl	printk
-.L129:
+.L127:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L130
+	tbz	x0, 12, .L128
 	adrp	x1, .LANCHOR0+632
 	adrp	x0, .LC16
 	add	x0, x0, :lo12:.LC16
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+632]
 	bl	printk
-.L130:
+.L128:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L131
+	tbz	x0, 12, .L129
 	adrp	x1, .LANCHOR0
 	adrp	x0, .LC17
 	add	x0, x0, :lo12:.LC17
 	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	bl	printk
-.L131:
+.L129:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L132
+	tbz	x0, 12, .L130
 	adrp	x0, .LANCHOR0+624
 	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC18
 	add	x0, x0, :lo12:.LC18
 	ldrb	w1, [x1,22]
 	bl	printk
-.L132:
+.L130:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L133
+	tbz	x0, 12, .L131
 	adrp	x1, .LANCHOR0+633
 	adrp	x0, .LC19
 	add	x0, x0, :lo12:.LC19
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+633]
 	bl	printk
-.L133:
+.L131:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L134
+	tbz	x0, 12, .L132
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -938,9 +932,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC20
 	and	w1, w1, 1
 	bl	printk
-.L134:
+.L132:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L135
+	tbz	x0, 12, .L133
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -948,9 +942,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC21
 	ubfx	x1, x1, 1, 1
 	bl	printk
-.L135:
+.L133:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L136
+	tbz	x0, 12, .L134
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -958,9 +952,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC22
 	ubfx	x1, x1, 2, 1
 	bl	printk
-.L136:
+.L134:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L137
+	tbz	x0, 12, .L135
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -968,9 +962,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC23
 	ubfx	x1, x1, 3, 1
 	bl	printk
-.L137:
+.L135:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L138
+	tbz	x0, 12, .L136
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -978,9 +972,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC24
 	ubfx	x1, x1, 4, 1
 	bl	printk
-.L138:
+.L136:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L139
+	tbz	x0, 12, .L137
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -988,9 +982,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC25
 	ubfx	x1, x1, 5, 1
 	bl	printk
-.L139:
+.L137:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L140
+	tbz	x0, 12, .L138
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -998,9 +992,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC26
 	ubfx	x1, x1, 6, 1
 	bl	printk
-.L140:
+.L138:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L141
+	tbz	x0, 12, .L139
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -1008,9 +1002,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC27
 	ubfx	x1, x1, 7, 1
 	bl	printk
-.L141:
+.L139:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L142
+	tbz	x0, 12, .L140
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrb	w1, [x0,17]
@@ -1018,9 +1012,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC28
 	and	w1, w1, 1
 	bl	printk
-.L142:
+.L140:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L143
+	tbz	x0, 12, .L141
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -1028,9 +1022,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC29
 	ubfx	x1, x1, 9, 1
 	bl	printk
-.L143:
+.L141:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L144
+	tbz	x0, 12, .L142
 	adrp	x0, .LANCHOR0+624
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
@@ -1038,9 +1032,9 @@ nand_flash_print_info:
 	add	x0, x0, :lo12:.LC30
 	ubfx	x1, x1, 10, 1
 	bl	printk
-.L144:
+.L142:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L145
+	tbz	x0, 12, .L143
 	adrp	x1, .LANCHOR0
 	adrp	x0, .LC31
 	add	x2, x1, :lo12:.LANCHOR0
@@ -1048,9 +1042,9 @@ nand_flash_print_info:
 	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	ldrb	w2, [x2,634]
 	bl	printk
-.L145:
+.L143:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L146
+	tbz	x0, 12, .L144
 	adrp	x2, .LANCHOR0
 	adrp	x0, .LC32
 	add	x2, x2, :lo12:.LANCHOR0
@@ -1059,9 +1053,9 @@ nand_flash_print_info:
 	ldrb	w1, [x2,10]
 	ldrb	w2, [x2,11]
 	bl	printk
-.L146:
+.L144:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L147
+	tbz	x0, 12, .L145
 	adrp	x2, .LANCHOR0
 	adrp	x0, .LC33
 	add	x2, x2, :lo12:.LANCHOR0
@@ -1070,15 +1064,15 @@ nand_flash_print_info:
 	ldrb	w1, [x2,8]
 	ldrb	w2, [x2,9]
 	bl	printk
-.L147:
+.L145:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L117
+	tbz	x0, 12, .L115
 	adrp	x1, .LANCHOR0+672
 	adrp	x0, .LC34
 	add	x0, x0, :lo12:.LC34
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+672]
 	bl	printk
-.L117:
+.L115:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -1095,7 +1089,7 @@ nandc_init:
 	stp	x19, x20, [sp,16]
 	str	wzr, [x29,56]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L243
+	tbz	x0, 12, .L241
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC35
 	add	x1, x1, :lo12:.LANCHOR1
@@ -1103,7 +1097,7 @@ nandc_init:
 	add	x1, x1, 72
 	mov	x2, x22
 	bl	printk
-.L243:
+.L241:
 	adrp	x1, .LANCHOR0
 	mov	w2, 6
 	add	x0, x1, :lo12:.LANCHOR0
@@ -1114,23 +1108,23 @@ nandc_init:
 	movk	w2, 0x5638, lsl 16
 	str	x22, [x0,536]
 	cmp	w3, w2
-	bne	.L244
+	bne	.L242
 	mov	w1, 8
 	strb	w1, [x0,516]
-.L244:
+.L242:
 	ldr	w1, [x22,128]
 	mov	w0, 12336
 	movk	w0, 0x5639, lsl 16
 	cmp	w1, w0
-	bne	.L245
+	bne	.L243
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w1, 9
 	strb	w1, [x0,516]
-.L245:
+.L243:
 	add	x19, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x19,516]
 	cmp	w0, 9
-	bne	.L246
+	bne	.L244
 	mov	w0, 1
 	strb	w0, [x19,673]
 	ldr	w0, [x29,56]
@@ -1157,14 +1151,14 @@ nandc_init:
 	mov	w1, 39
 	str	w1, [x0,84]
 	ldr	w1, [x21,#:lo12:.LANCHOR2]
-	tbz	x1, 12, .L248
+	tbz	x1, 12, .L246
 	ldr	w1, [x0]
 	ldr	w2, [x0,8]
 	ldr	w3, [x0,80]
 	ldr	w4, [x0,84]
 	ldr	w5, [x0,88]
-	b	.L260
-.L246:
+	b	.L258
+.L244:
 	ldr	w0, [x29,56]
 	mov	w1, 1
 	strb	wzr, [x19,673]
@@ -1193,30 +1187,30 @@ nandc_init:
 	bl	ftl_malloc
 	str	x0, [x19,680]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L248
+	tbz	x0, 12, .L246
 	ldr	x0, [x19,536]
 	ldr	w1, [x0]
 	ldr	w2, [x0,344]
 	ldr	w3, [x0,304]
 	ldr	w4, [x0,308]
 	ldr	w5, [x0,312]
-.L260:
+.L258:
 	adrp	x0, .LC36
 	add	x0, x0, :lo12:.LC36
 	bl	printk
-.L248:
+.L246:
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x1,720]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
 	strh	wzr, [x1,722]
 	strb	wzr, [x1,724]
-	tbz	x0, 12, .L242
+	tbz	x0, 12, .L240
 	adrp	x0, .LC37
 	ldrb	w1, [x1,516]
 	add	x0, x0, :lo12:.LC37
 	bl	printk
-.L242:
+.L240:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 64
@@ -1229,11 +1223,11 @@ timer_delay_ns:
 	sub	sp, sp, #16
 	lsr	w0, w0, 4
 	str	w0, [sp,12]
-.L262:
+.L260:
 	ldr	w0, [sp,12]
 	sub	w1, w0, #1
 	str	w1, [sp,12]
-	cbnz	w0, .L262
+	cbnz	w0, .L260
 	add	sp, sp, 16
 	ret
 	.size	timer_delay_ns, .-timer_delay_ns
@@ -1282,11 +1276,11 @@ toshiba_set_rr_para:
 	adrp	x26, .LANCHOR0
 	mov	w27, 85
 	mov	x19, x2
-.L266:
+.L264:
 	add	x25, x26, :lo12:.LANCHOR0
 	ldrb	w0, [x25,726]
 	cmp	w0, w20
-	bls	.L272
+	bls	.L270
 	add	x0, x19, 88
 	str	w27, [x22,8]
 	ldrsb	w0, [x20,x0]
@@ -1295,21 +1289,21 @@ toshiba_set_rr_para:
 	bl	timer_delay_ns
 	ldrb	w0, [x25,725]
 	cmp	w0, 34
-	bne	.L267
+	bne	.L265
 	ldrsb	w0, [x24,x20]
-	b	.L271
-.L267:
+	b	.L269
+.L265:
 	cmp	w0, 35
-	bne	.L269
+	bne	.L267
 	ldrsb	w0, [x21,x20]
-	b	.L271
-.L269:
+	b	.L269
+.L267:
 	ldrsb	w0, [x23,232]
-.L271:
+.L269:
 	str	w0, [x22]
 	add	x20, x20, 1
-	b	.L266
-.L272:
+	b	.L264
+.L270:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -1339,25 +1333,25 @@ hynix_set_rr_para:
 	mul	w1, w1, w22
 	cmp	w2, 8
 	sxtw	x1, w1
-	beq	.L274
+	beq	.L272
 	sxtw	x2, w0
 	mov	x3, 160
 	madd	x2, x2, x3, x1
 	add	x2, x2, 32
 	add	x21, x21, x2
-	b	.L275
-.L274:
+	b	.L273
+.L272:
 	add	x1, x1, 32
 	add	x21, x21, x1
-.L275:
+.L273:
 	ubfiz	x0, x0, 8, 8
 	mov	x20, 0
 	add	x19, x19, x0
 	mov	w0, 54
 	str	w0, [x19,2056]
-.L276:
+.L274:
 	cmp	w22, w20, uxtb
-	bls	.L278
+	bls	.L276
 	ldrb	w0, [x23,x20]
 	str	w0, [x19,2052]
 	mov	w0, 120
@@ -1365,8 +1359,8 @@ hynix_set_rr_para:
 	ldrsb	w0, [x21,x20]
 	add	x20, x20, 1
 	str	w0, [x19,2048]
-	b	.L276
-.L278:
+	b	.L274
+.L276:
 	mov	w0, 22
 	str	w0, [x19,2056]
 	ldp	x19, x20, [sp,16]
@@ -1389,18 +1383,18 @@ hynix_reconfig_rr_para:
 	sub	w1, w1, #1
 	uxtb	w1, w1
 	cmp	w1, 7
-	bhi	.L279
+	bhi	.L277
 	ldr	x1, [x19,728]
 	sxtw	x20, w0
 	add	x1, x1, x20
 	ldrb	w1, [x1,120]
-	cbz	w1, .L279
+	cbz	w1, .L277
 	mov	w1, 0
 	bl	hynix_set_rr_para
 	ldr	x0, [x19,728]
 	add	x20, x0, x20
 	strb	wzr, [x20,120]
-.L279:
+.L277:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -1419,12 +1413,12 @@ nandc_set_ddr_para:
 	lsl	w0, w0, 8
 	orr	w0, w2, w0
 	orr	w0, w0, 3
-	bne	.L285
+	bne	.L283
 	str	w0, [x1,80]
-	b	.L284
-.L285:
+	b	.L282
+.L283:
 	str	w0, [x1,304]
-.L284:
+.L282:
 	ret
 	.size	nandc_set_ddr_para, .-nandc_set_ddr_para
 	.align	2
@@ -1436,12 +1430,12 @@ nandc_get_ddr_para:
 	ldrb	w1, [x0,516]
 	ldr	x0, [x0,536]
 	cmp	w1, 9
-	bne	.L288
+	bne	.L286
 	ldr	w0, [x0,80]
-	b	.L290
-.L288:
+	b	.L288
+.L286:
 	ldr	w0, [x0,304]
-.L290:
+.L288:
 	ubfx	x0, x0, 8, 8
 	ret
 	.size	nandc_get_ddr_para, .-nandc_get_ddr_para
@@ -1455,7 +1449,7 @@ nandc_set_if_mode:
 	tst	w0, 6
 	ldr	x2, [x3,536]
 	ldr	w1, [x2]
-	beq	.L292
+	beq	.L290
 	orr	w1, w1, 24576
 	and	w0, w0, 4
 	and	w1, w1, -32769
@@ -1466,7 +1460,7 @@ nandc_set_if_mode:
 	csel	w1, w4, w1, ne
 	cmp	w0, 9
 	mov	w0, 8321
-	bne	.L294
+	bne	.L292
 	str	w0, [x2,8]
 	mov	w0, 4099
 	movk	w0, 0x10, lsl 16
@@ -1475,8 +1469,8 @@ nandc_set_if_mode:
 	str	w0, [x2,84]
 	mov	w0, 39
 	str	w0, [x2,84]
-	b	.L295
-.L294:
+	b	.L293
+.L292:
 	str	w0, [x2,344]
 	mov	w0, 4099
 	movk	w0, 0x10, lsl 16
@@ -1485,10 +1479,10 @@ nandc_set_if_mode:
 	str	w0, [x2,308]
 	mov	w0, 39
 	str	w0, [x2,308]
-	b	.L295
-.L292:
+	b	.L293
+.L290:
 	and	w1, w1, -8193
-.L295:
+.L293:
 	str	w1, [x2]
 	ret
 	.size	nandc_set_if_mode, .-nandc_set_if_mode
@@ -1535,16 +1529,16 @@ flash_wait_device_ready_raw:
 	ldrb	w0, [x0,633]
 	mov	x19, x3
 	cmp	w0, w21
-	bhi	.L301
+	bhi	.L299
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 677
+	mov	w2, 691
 	add	x1, x1, 240
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L301:
+.L299:
 	add	x3, x19, :lo12:.LANCHOR0
 	add	x21, x3, x21, sxtw
 	ldrb	w23, [x21,736]
@@ -1557,7 +1551,7 @@ flash_wait_device_ready_raw:
 	bl	nandc_cs
 	ubfiz	x3, x23, 8, 8
 	add	x19, x19, x3
-.L303:
+.L301:
 	str	w26, [x19,2056]
 	mov	w0, 120
 	str	w21, [x19,2052]
@@ -1568,9 +1562,9 @@ flash_wait_device_ready_raw:
 	and	w20, w20, 255
 	and	w0, w22, w20
 	cmp	w0, w22
-	bne	.L303
+	bne	.L301
 	cmp	w20, 255
-	beq	.L303
+	beq	.L301
 	mov	w0, w23
 	bl	nandc_de_cs
 	mov	w0, w20
@@ -1585,33 +1579,45 @@ flash_wait_device_ready_raw:
 	.global	flash_wait_device_ready
 	.type	flash_wait_device_ready, %function
 flash_wait_device_ready:
+	adrp	x4, .LANCHOR0
+	mov	w5, 24
+	add	x7, x4, :lo12:.LANCHOR0
+	mov	w6, 1
 	stp	x29, x30, [sp, -16]!
-	ubfx	x3, x0, 24, 2
 	mov	w2, w1
 	add	x29, sp, 0
-	and	w1, w0, 2097151
-	ubfx	x6, x0, 21, 3
-	cbnz	w3, .L305
-	adrp	x3, .LANCHOR0
-	add	x0, x3, :lo12:.LANCHOR0
-	ldrb	w4, [x3,#:lo12:.LANCHOR0]
-	cbz	w4, .L306
-	ldrb	w0, [x0,1]
-	cbz	w0, .L305
-.L306:
-	add	x3, x3, :lo12:.LANCHOR0
-	ldrh	w5, [x3,2]
-	ldrb	w0, [x3,1]
-	udiv	w4, w1, w5
-	mul	w5, w4, w5
-	sub	w4, w1, w5
-	add	w1, w5, w4, lsl 1
-	cbnz	w0, .L305
-	add	x3, x3, 4
-	ldrh	w3, [x3,w4,uxtw 1]
-	add	w1, w3, w5
+	ldrb	w8, [x7,744]
+	sub	w5, w5, w8
+	lsl	w3, w6, w5
+	lsl	w6, w6, w8
+	asr	w5, w0, w5
+	sub	w3, w3, #1
+	sub	w6, w6, #1
+	and	w1, w3, w0
+	and	w5, w6, w5
+	ubfx	x0, x0, 24, 2
+	uxtb	w5, w5
+	cbnz	w0, .L303
+	ldrb	w0, [x4,#:lo12:.LANCHOR0]
+	cbz	w0, .L304
+	ldrb	w0, [x7,1]
+	cbz	w0, .L303
+.L304:
+	add	x4, x4, :lo12:.LANCHOR0
+	ldrh	w3, [x4,2]
+	udiv	w0, w1, w3
+	mul	w0, w0, w3
+	sub	w3, w1, w0
+	ldrb	w1, [x4,1]
+	cbz	w1, .L305
+	add	w1, w0, w3, lsl 1
+	b	.L303
 .L305:
-	mov	w0, w6
+	add	x4, x4, 4
+	ldrh	w3, [x4,w3,uxtw 1]
+	add	w1, w3, w0
+.L303:
+	mov	w0, w5
 	bl	flash_wait_device_ready_raw
 	ldp	x29, x30, [sp], 16
 	ret
@@ -1626,22 +1632,22 @@ nandc_wait_flash_ready_no_delay:
 	mov	w19, 34464
 	adrp	x20, .LANCHOR0
 	movk	w19, 0x1, lsl 16
-.L316:
+.L314:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,40]
 	ldr	w0, [x29,40]
-	tbnz	x0, 9, .L317
+	tbnz	x0, 9, .L315
 	mov	w0, 10
 	bl	timer_delay_ns
 	subs	w19, w19, #1
-	bne	.L316
+	bne	.L314
 	mov	w0, -1
-	b	.L315
-.L317:
-	mov	w0, 0
+	b	.L313
 .L315:
+	mov	w0, 0
+.L313:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -1657,39 +1663,39 @@ zftl_flash_enter_slc_mode:
 	add	x29, sp, 0
 	ldrb	w2, [x2,#:lo12:.LANCHOR0]
 	str	x19, [sp,16]
-	cbz	w2, .L319
+	cbz	w2, .L317
 	cmp	w2, 1
 	ldr	x19, [x1,536]
-	bne	.L322
+	bne	.L320
 	adrp	x1, .LANCHOR2+37
 	ldrb	w2, [x1,#:lo12:.LANCHOR2+37]
-	cbz	w2, .L319
+	cbz	w2, .L317
 	sxtw	x1, w0
 	add	x1, x1, 8
 	add	x0, x19, x1, lsl 8
 	str	w2, [x0,8]
-	b	.L319
-.L322:
+	b	.L317
+.L320:
 	cmp	w2, 2
-	bne	.L324
+	bne	.L322
 	add	x1, x1, x0
-	ldrb	w2, [x1,744]
-	cbz	w2, .L319
-	strb	wzr, [x1,744]
+	ldrb	w2, [x1,752]
+	cbz	w2, .L317
+	strb	wzr, [x1,752]
 	adrp	x1, .LANCHOR2+37
 	ldrb	w1, [x1,#:lo12:.LANCHOR2+37]
-	cbz	w1, .L319
+	cbz	w1, .L317
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 8
 	str	w1, [x0,8]
-	b	.L319
-.L324:
+	b	.L317
+.L322:
 	cmp	w2, 3
-	bne	.L319
+	bne	.L317
 	add	x1, x1, x0, sxtw
-	ldrb	w2, [x1,744]
-	cbz	w2, .L319
-	strb	wzr, [x1,744]
+	ldrb	w2, [x1,752]
+	cbz	w2, .L317
+	strb	wzr, [x1,752]
 	ubfiz	x1, x0, 8, 8
 	add	x19, x19, x1
 	mov	w0, 239
@@ -1711,7 +1717,7 @@ zftl_flash_enter_slc_mode:
 	mov	w0, 150
 	bl	timer_delay_ns
 	bl	nandc_wait_flash_ready_no_delay
-.L319:
+.L317:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -1728,24 +1734,24 @@ zftl_flash_exit_slc_mode:
 	add	x20, x1, :lo12:.LANCHOR0
 	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	str	x21, [sp,32]
-	cbz	w1, .L337
+	cbz	w1, .L335
 	cmp	w1, 1
 	ldr	x19, [x20,536]
-	bne	.L340
+	bne	.L338
 	adrp	x1, .LANCHOR2+38
 	ldrb	w2, [x1,#:lo12:.LANCHOR2+38]
-	cbz	w2, .L337
+	cbz	w2, .L335
 	sxtw	x1, w0
 	add	x1, x1, 8
 	add	x0, x19, x1, lsl 8
 	str	w2, [x0,8]
-	b	.L337
-.L340:
+	b	.L335
+.L338:
 	cmp	w1, 2
-	bne	.L342
+	bne	.L340
 	add	x20, x20, x0
-	ldrb	w1, [x20,744]
-	cbnz	w1, .L337
+	ldrb	w1, [x20,752]
+	cbnz	w1, .L335
 	adrp	x1, .LANCHOR2
 	mov	w3, 4
 	add	x1, x1, :lo12:.LANCHOR2
@@ -1754,25 +1760,25 @@ zftl_flash_exit_slc_mode:
 	ldrb	w1, [x1,30]
 	cmp	w2, 2
 	csel	w2, w2, w3, eq
-	strb	w2, [x20,744]
-	cbz	w1, .L337
+	strb	w2, [x20,752]
+	cbz	w1, .L335
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 8
 	str	w1, [x0,8]
-	b	.L337
-.L342:
+	b	.L335
+.L340:
 	cmp	w1, 3
-	bne	.L337
+	bne	.L335
 	add	x20, x20, x0, sxtw
-	ldrb	w1, [x20,744]
-	cbnz	w1, .L337
+	ldrb	w1, [x20,752]
+	cbnz	w1, .L335
 	adrp	x21, .LANCHOR2
 	mov	w2, 4
 	add	x21, x21, :lo12:.LANCHOR2
 	ldrb	w1, [x21,20]
 	cmp	w1, 2
 	csel	w1, w1, w2, eq
-	strb	w1, [x20,744]
+	strb	w1, [x20,752]
 	ubfiz	x1, x0, 8, 8
 	mov	w0, 239
 	add	x19, x19, x1
@@ -1784,13 +1790,13 @@ zftl_flash_exit_slc_mode:
 	ldrb	w0, [x21,15]
 	cmp	w0, 9
 	mov	w0, 1
-	bne	.L345
+	bne	.L343
 	str	w0, [x19,2048]
-	b	.L346
-.L345:
-	ldrb	w1, [x20,744]
+	b	.L344
+.L343:
+	ldrb	w1, [x20,752]
 	str	w1, [x19,2048]
-.L346:
+.L344:
 	str	w0, [x19,2048]
 	mov	w0, 150
 	str	wzr, [x19,2048]
@@ -1802,7 +1808,7 @@ zftl_flash_exit_slc_mode:
 	mov	w0, 150
 	bl	timer_delay_ns
 	bl	nandc_wait_flash_ready_no_delay
-.L337:
+.L335:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -1814,71 +1820,89 @@ zftl_flash_exit_slc_mode:
 flash_start_page_read:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	ubfx	x19, x1, 21, 3
-	stp	x23, x24, [sp,48]
-	uxtb	w23, w0
-	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	and	w21, w1, 2097151
-	ubfx	x22, x1, 24, 2
-	ldrb	w0, [x0,633]
+	adrp	x22, .LANCHOR0
+	uxtb	w21, w0
+	stp	x23, x24, [sp,48]
+	mov	w23, w1
+	add	x1, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	w0, 1
+	mov	w20, 24
+	ldrb	w19, [x1,744]
+	sub	w20, w20, w19
+	lsl	w19, w0, w19
+	lsr	w2, w23, w20
+	sub	w19, w19, #1
+	and	w19, w2, w19
+	ldrb	w0, [x1,633]
+	uxtb	w19, w19
 	cmp	w0, w19
-	bhi	.L358
+	bhi	.L356
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 845
+	mov	w2, 866
 	add	x1, x1, 272
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L358:
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x19, x20, x19, sxtw
+.L356:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x22,633]
+	cmp	w0, w19
+	bls	.L355
+	mov	w2, 1
+	add	x19, x22, x19, sxtw
+	lsl	w20, w2, w20
 	ldrb	w19, [x19,736]
+	sub	w20, w20, #1
+	ldr	x24, [x22,536]
+	and	w20, w20, w23
 	mov	w0, w19
-	ldr	x24, [x20,536]
+	ubfx	x23, x23, 24, 2
 	bl	nandc_cs
-	cbnz	w22, .L359
-	mov	w0, w21
+	cbnz	w23, .L358
+	mov	w0, w20
 	bl	slc_phy_page_address_calc
-	mov	w21, w0
+	mov	w20, w0
 	adrp	x0, .LANCHOR0
 	ldrb	w0, [x0,#:lo12:.LANCHOR0]
-	cbz	w0, .L360
+	cbz	w0, .L359
 	mov	w0, w19
 	bl	zftl_flash_enter_slc_mode
-	b	.L360
-.L359:
-	ldr	x0, [x20,624]
+	b	.L359
+.L358:
+	ldr	x0, [x22,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L361
+	bne	.L360
+	ldrb	w0, [x22,756]
+	cbnz	w0, .L360
 	sxtw	x0, w19
 	add	x0, x0, 8
 	add	x0, x24, x0, lsl 8
-	str	w22, [x0,8]
-	b	.L360
-.L361:
+	str	w23, [x0,8]
+	b	.L359
+.L360:
 	mov	w0, w19
 	bl	zftl_flash_exit_slc_mode
-.L360:
+.L359:
 	ubfiz	x19, x19, 8, 8
-	and	w0, w21, 255
+	and	w0, w20, 255
 	add	x1, x24, x19
 	str	wzr, [x1,2056]
 	str	wzr, [x1,2052]
 	str	wzr, [x1,2052]
 	str	w0, [x1,2052]
-	lsr	w0, w21, 8
+	lsr	w0, w20, 8
 	str	w0, [x1,2052]
-	lsr	w21, w21, 16
-	str	w21, [x1,2052]
+	lsr	w20, w20, 16
+	str	w20, [x1,2052]
 	mov	w0, 0
-	str	w23, [x1,2056]
+	str	w21, [x1,2056]
 	bl	nandc_de_cs
+.L355:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -1897,22 +1921,22 @@ nandc_wait_flash_ready:
 	adrp	x20, .LANCHOR0
 	movk	w19, 0x1, lsl 16
 	bl	timer_delay_ns
-.L367:
+.L366:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,40]
 	ldr	w0, [x29,40]
-	tbnz	x0, 9, .L368
+	tbnz	x0, 9, .L367
 	mov	w0, 10
 	bl	timer_delay_ns
 	subs	w19, w19, #1
-	bne	.L367
+	bne	.L366
 	mov	w0, -1
-	b	.L366
-.L368:
+	b	.L365
+.L367:
 	mov	w0, 0
-.L366:
+.L365:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -1943,23 +1967,23 @@ sandisk_set_rr_para:
 	add	x0, x0, x1
 	add	x1, x2, x1
 	mov	x2, 0
-.L371:
+.L370:
 	add	x3, x5, :lo12:.LANCHOR0
 	ldrb	w4, [x3,726]
 	cmp	w4, w2
-	bls	.L376
+	bls	.L375
 	ldrb	w3, [x3,725]
 	cmp	w3, 67
-	bne	.L372
+	bne	.L371
 	ldrsb	w3, [x0,x2]
-	b	.L375
-.L372:
+	b	.L374
+.L371:
 	ldrsb	w3, [x1,x2]
-.L375:
+.L374:
 	str	w3, [x20]
 	add	x2, x2, 1
-	b	.L371
-.L376:
+	b	.L370
+.L375:
 	bl	nandc_wait_flash_ready
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -2048,7 +2072,7 @@ toshiba_tlc_set_rr_para:
 	mov	w21, 239
 	adrp	x0, .LANCHOR2
 	str	w21, [x19,8]
-	cbz	w2, .L380
+	cbz	w2, .L379
 	mov	w2, 18
 	str	w2, [x19,4]
 	mov	x2, 7
@@ -2075,8 +2099,8 @@ toshiba_tlc_set_rr_para:
 	ldrb	w0, [x20,6]
 	str	w0, [x19]
 	str	wzr, [x19]
-	b	.L381
-.L380:
+	b	.L380
+.L379:
 	add	x0, x0, :lo12:.LANCHOR2
 	mov	w3, 20
 	add	x0, x0, 376
@@ -2086,7 +2110,7 @@ toshiba_tlc_set_rr_para:
 	str	w2, [x19]
 	str	w2, [x19]
 	str	w2, [x19]
-.L381:
+.L380:
 	bl	nandc_wait_flash_ready
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -2098,75 +2122,87 @@ toshiba_tlc_set_rr_para:
 	.type	flash_start_plane_read, %function
 flash_start_plane_read:
 	stp	x29, x30, [sp, -96]!
+	mov	w3, 24
+	mov	w2, 1
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	and	w21, w1, 2097151
-	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
-	ubfx	x19, x0, 21, 3
-	and	w23, w0, 2097151
-	ubfx	x20, x0, 24, 2
-	add	x0, x22, :lo12:.LANCHOR0
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	ldrb	w0, [x0,633]
+	adrp	x23, .LANCHOR0
+	add	x4, x23, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ubfx	x21, x0, 24, 2
+	ldrb	w5, [x4,744]
+	sub	w3, w3, w5
+	lsl	w20, w2, w3
+	lsl	w2, w2, w5
+	lsr	w19, w0, w3
+	sub	w2, w2, #1
+	sub	w20, w20, #1
+	and	w19, w19, w2
+	and	w22, w20, w0
+	ldrb	w0, [x4,633]
+	uxtb	w19, w19
+	and	w20, w20, w1
 	cmp	w0, w19
-	bhi	.L383
+	bhi	.L382
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 940
+	mov	w2, 965
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L383:
-	add	x26, x22, :lo12:.LANCHOR0
+.L382:
+	add	x26, x23, :lo12:.LANCHOR0
 	add	x19, x26, x19, sxtw
 	ldrb	w24, [x19,736]
 	mov	w0, w24
 	ldr	x25, [x26,536]
 	bl	nandc_cs
-	cbnz	w20, .L384
-	mov	w0, w23
+	cbnz	w21, .L383
+	mov	w0, w22
 	bl	slc_phy_page_address_calc
-	mov	w23, w0
-	mov	w0, w21
+	mov	w22, w0
+	mov	w0, w20
 	bl	slc_phy_page_address_calc
-	mov	w21, w0
+	mov	w20, w0
 	adrp	x0, .LANCHOR0
 	ldrb	w0, [x0,#:lo12:.LANCHOR0]
-	cbz	w0, .L385
+	cbz	w0, .L384
 	mov	w0, w24
 	bl	zftl_flash_enter_slc_mode
-	b	.L385
-.L384:
+	b	.L384
+.L383:
 	ldr	x0, [x26,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L386
+	bne	.L385
+	ldrb	w0, [x26,756]
+	cbnz	w0, .L385
 	sxtw	x0, w24
 	add	x0, x0, 8
 	add	x0, x25, x0, lsl 8
-	str	w20, [x0,8]
-	b	.L385
-.L386:
+	str	w21, [x0,8]
+	b	.L384
+.L385:
 	mov	w0, w24
 	bl	zftl_flash_exit_slc_mode
-.L385:
-	add	x26, x22, :lo12:.LANCHOR0
-	and	w2, w23, 255
+.L384:
+	add	x26, x23, :lo12:.LANCHOR0
+	and	w2, w22, 255
 	add	x0, x26, 640
-	and	w28, w21, 255
-	lsr	w27, w21, 8
+	and	w28, w20, 255
+	lsr	w27, w20, 8
 	uxtb	x19, w24
 	ldrb	w1, [x0,16]
-	lsr	w21, w21, 16
+	lsr	w20, w20, 16
 	cmp	w1, 1
-	lsr	w1, w23, 8
-	lsr	w23, w23, 16
-	bne	.L387
+	lsr	w1, w22, 8
+	lsr	w22, w22, 16
+	bne	.L386
 	add	x19, x25, x19, lsl 8
 	ldrb	w3, [x0,8]
 	ldrb	w0, [x0,9]
@@ -2175,42 +2211,42 @@ flash_start_plane_read:
 	str	wzr, [x19,2052]
 	str	w2, [x19,2052]
 	str	w1, [x19,2052]
-	str	w23, [x19,2052]
+	str	w22, [x19,2052]
 	str	w0, [x19,2056]
 	bl	nandc_wait_flash_ready
-	cbz	w20, .L388
+	cbz	w21, .L387
 	ldr	x0, [x26,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L388
-	str	w20, [x19,2056]
-.L388:
+	bne	.L387
+	str	w21, [x19,2056]
+.L387:
 	str	wzr, [x19,2056]
 	str	wzr, [x19,2052]
 	str	wzr, [x19,2052]
-	b	.L406
-.L387:
+	b	.L405
+.L386:
 	add	x19, x25, x19, lsl 8
 	ldrb	w0, [x0,8]
 	str	w0, [x19,2056]
 	str	w2, [x19,2052]
 	str	w1, [x19,2052]
-	str	w23, [x19,2052]
-	cbz	w20, .L390
+	str	w22, [x19,2052]
+	cbz	w21, .L389
 	ldr	x0, [x26,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L390
-	str	w20, [x19,2056]
-.L390:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrb	w0, [x22,649]
+	bne	.L389
+	str	w21, [x19,2056]
+.L389:
+	add	x23, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x23,649]
 	str	w0, [x19,2056]
-.L406:
+.L405:
 	str	w28, [x19,2052]
 	mov	w0, 48
 	str	w27, [x19,2052]
-	str	w21, [x19,2052]
+	str	w20, [x19,2052]
 	str	w0, [x19,2056]
 	mov	w0, w24
 	bl	nandc_de_cs
@@ -2229,114 +2265,143 @@ flash_set_interface_mode:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	mov	x21, 0
 	stp	x23, x24, [sp,48]
-	add	x22, x22, :lo12:.LANCHOR0
+	adrp	x22, .LANCHOR0
 	adrp	x23, .LC39
-	stp	x25, x26, [sp,64]
+	adrp	x24, .LC38
+	str	x25, [sp,64]
 	stp	x19, x20, [sp,16]
 	mov	w25, w0
-	add	x26, x22, 748
-	adrp	x24, .LANCHOR2
+	mov	x21, 0
+	add	x22, x22, :lo12:.LANCHOR0
 	add	x23, x23, :lo12:.LC39
-.L422:
-	lsl	x0, x21, 3
+	add	x24, x24, :lo12:.LC38
+.L421:
+	add	x0, x22, x21, lsl 3
 	ldr	x20, [x22,536]
-	ldrb	w19, [x0,x26]
-	adrp	x0, .LANCHOR0
+	adrp	x1, .LANCHOR0
+	ldrb	w19, [x0,760]
 	cmp	w19, 152
-	beq	.L408
+	beq	.L407
 	cmp	w19, 69
-	beq	.L408
+	beq	.L407
 	cmp	w19, 155
-	beq	.L408
+	beq	.L407
 	cmp	w19, 44
 	cset	w2, eq
 	cmp	w19, 137
-	cset	w1, eq
-	orr	w1, w2, w1
-	cbz	w1, .L409
-.L408:
-	add	x0, x0, :lo12:.LANCHOR0
+	cset	w0, eq
+	orr	w0, w2, w0
+	cbz	w0, .L408
+.L407:
+	add	x1, x1, :lo12:.LANCHOR0
 	cmp	w25, 1
-	ldrb	w1, [x0,780]
-	bne	.L411
-	tbz	x1, 0, .L409
-	ldr	w0, [x24,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L412
-	adrp	x0, .LC38
-	add	x0, x0, :lo12:.LC38
+	ldrb	w1, [x1,792]
+	bne	.L410
+	tbz	x1, 0, .L408
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L411
+	mov	x0, x24
 	bl	printk
-.L412:
+.L411:
 	add	x1, x20, x21, lsl 8
 	mov	w0, 239
 	cmp	w19, 137
 	str	w0, [x1,2056]
-	beq	.L423
+	beq	.L422
 	cmp	w19, 44
-	bne	.L413
-.L423:
+	bne	.L412
+.L422:
 	mov	w0, 1
 	str	w0, [x1,2052]
 	mov	w0, 5
-	b	.L442
-.L413:
+	b	.L441
+.L412:
 	cmp	w19, 155
 	mov	w0, 1
-	bne	.L421
+	bne	.L420
 	str	w0, [x1,2052]
 	mov	w0, 3
-	b	.L442
-.L411:
-	tbz	x1, 2, .L409
-	ldr	w0, [x24,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L417
+	b	.L441
+.L410:
+	tbz	x1, 2, .L408
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L416
 	mov	x0, x23
 	bl	printk
-.L417:
+.L416:
 	add	x1, x20, x21, lsl 8
 	mov	w0, 239
 	cmp	w19, 137
 	str	w0, [x1,2056]
-	beq	.L424
+	beq	.L423
 	cmp	w19, 44
 	cset	w0, eq
-	cbz	w0, .L418
-.L424:
+	cbz	w0, .L417
+.L423:
 	mov	w0, 1
 	str	w0, [x1,2052]
 	mov	w0, 35
-	b	.L442
-.L418:
+	b	.L441
+.L417:
 	cmp	w19, 155
-	bne	.L421
+	bne	.L420
 	mov	w0, 1
 	str	w0, [x1,2052]
 	mov	w0, 37
-	b	.L442
-.L421:
+	b	.L441
+.L420:
 	mov	w2, 128
 	str	w2, [x1,2052]
-.L442:
+.L441:
 	str	w0, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
-.L409:
+.L408:
 	add	x21, x21, 1
 	cmp	x21, 4
-	bne	.L422
+	bne	.L421
 	bl	nandc_wait_flash_ready
+	ldr	x25, [sp,64]
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	flash_set_interface_mode, .-flash_set_interface_mode
 	.align	2
+	.type	mt_auto_read_calibration_config, %function
+mt_auto_read_calibration_config:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxtb	w19, w0
+	ubfiz	x19, x19, 8, 8
+	str	x1, [x29,40]
+	bl	nandc_wait_flash_ready
+	adrp	x0, .LANCHOR0+536
+	ldr	x0, [x0,#:lo12:.LANCHOR0+536]
+	add	x19, x0, x19
+	mov	w0, 239
+	str	w0, [x19,2056]
+	mov	w0, 150
+	str	w0, [x19,2052]
+	mov	w0, 200
+	bl	timer_delay_ns
+	ldr	x1, [x29,40]
+	str	w1, [x19,2048]
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	mt_auto_read_calibration_config, .-mt_auto_read_calibration_config
+	.align	2
 	.global	flash_reset
 	.type	flash_reset, %function
 flash_reset:
@@ -2602,15 +2667,20 @@ nandc_rdy_status:
 	.global	nandc_bch_sel
 	.type	nandc_bch_sel, %function
 nandc_bch_sel:
+	sub	sp, sp, #16
+	str	wzr, [sp,8]
+	ldr	w1, [sp,8]
+	orr	w1, w1, 1
+	str	w1, [sp,8]
 	adrp	x1, .LANCHOR0
-	mov	w3, 1
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrb	w2, [x1,516]
 	strb	w0, [x1,724]
 	cmp	w2, 9
 	ldr	x2, [x1,536]
+	ldr	w1, [sp,8]
 	bne	.L464
-	str	w3, [x2,16]
+	str	w1, [x2,16]
 	cmp	w0, 70
 	mov	w1, 0
 	beq	.L465
@@ -2619,34 +2689,57 @@ nandc_bch_sel:
 	beq	.L465
 	cmp	w0, 40
 	mov	w1, 2
-	csel	w1, w1, w3, eq
+	csinc	w1, w1, wzr, eq
 .L465:
-	lsl	w1, w1, 25
-	orr	w1, w1, 1
-	str	w1, [x2,32]
+	str	wzr, [sp]
+	ldr	w0, [sp]
+	bfi	w0, w1, 25, 3
+	str	w0, [sp]
+	ldr	w0, [sp]
+	orr	w0, w0, 1
+	str	w0, [sp]
+	ldr	w0, [sp]
+	str	w0, [x2,32]
 	b	.L463
 .L464:
-	str	w3, [x2,8]
-	cmp	w0, 16
-	mov	w1, 4096
-	bne	.L467
-.L470:
-	and	w1, w1, -17
-	b	.L468
-.L467:
+	str	w1, [x2,8]
+	mov	w3, 16
+	str	wzr, [sp]
+	cmp	w0, w3
+	ldr	w1, [sp]
+	bfi	w1, w3, 8, 8
+	str	w1, [sp]
+	ldr	w1, [sp]
+	and	w1, w1, -262145
+	str	w1, [sp]
+	beq	.L473
 	cmp	w0, 24
 	bne	.L469
-	orr	w1, w1, 16
-	b	.L468
+	ldr	w0, [sp]
+	orr	w0, w0, 16
+	b	.L474
 .L469:
+	ldr	w1, [sp]
 	cmp	w0, 40
 	orr	w1, w1, 262144
+	str	w1, [sp]
+	ldr	w1, [sp]
 	orr	w1, w1, 16
-	beq	.L470
+	str	w1, [sp]
+	bne	.L468
+.L473:
+	ldr	w0, [sp]
+	and	w0, w0, -17
+.L474:
+	str	w0, [sp]
 .L468:
-	orr	w1, w1, 1
-	str	w1, [x2,12]
+	ldr	w0, [sp]
+	orr	w0, w0, 1
+	str	w0, [sp]
+	ldr	w0, [sp]
+	str	w0, [x2,12]
 .L463:
+	add	sp, sp, 16
 	ret
 	.size	nandc_bch_sel, .-nandc_bch_sel
 	.align	2
@@ -2657,9 +2750,9 @@ zftl_flash_resume:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR0
+	str	x23, [sp,48]
 	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
 	ldrb	w1, [x0,516]
 	ldr	w2, [x0,544]
 	cmp	w1, 9
@@ -2670,7 +2763,7 @@ zftl_flash_resume:
 	str	w2, [x1,4]
 	ldr	x1, [x0,536]
 	ldr	w2, [x0,552]
-	bne	.L478
+	bne	.L476
 	str	w2, [x1,16]
 	ldr	w2, [x0,556]
 	str	w2, [x1,32]
@@ -2682,8 +2775,8 @@ zftl_flash_resume:
 	str	w2, [x1,520]
 	ldr	w0, [x0,572]
 	str	w0, [x1,8]
-	b	.L479
-.L478:
+	b	.L477
+.L476:
 	str	w2, [x1,8]
 	ldr	w2, [x0,556]
 	str	w2, [x1,12]
@@ -2695,32 +2788,31 @@ zftl_flash_resume:
 	str	w2, [x1,336]
 	ldr	w0, [x0,572]
 	str	w0, [x1,344]
-.L479:
-	add	x22, x20, :lo12:.LANCHOR0
+.L477:
 	mov	x19, 0
-	add	x23, x22, 748
-	mov	w24, 2
-.L481:
-	lsl	x0, x19, 3
-	ldrb	w0, [x0,x23]
+	add	x21, x20, :lo12:.LANCHOR0
+	mov	w23, 2
+.L479:
+	add	x0, x21, x19, lsl 3
+	ldrb	w0, [x0,760]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L480
-	uxtb	w21, w19
-	mov	w0, w21
+	bhi	.L478
+	uxtb	w22, w19
+	mov	w0, w22
 	bl	flash_reset
-	add	x0, x22, 744
-	strb	w24, [x19,x0]
-	mov	w0, w21
+	add	x0, x21, 752
+	strb	w23, [x19,x0]
+	mov	w0, w22
 	bl	zftl_flash_enter_slc_mode
-.L480:
+.L478:
 	add	x19, x19, 1
 	cmp	x19, 4
-	bne	.L481
+	bne	.L479
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x20,672]
-	cbz	w0, .L482
+	cbz	w0, .L480
 	mov	w0, 1
 	bl	nandc_set_if_mode
 	mov	w0, w19
@@ -2730,13 +2822,13 @@ zftl_flash_resume:
 	ldr	w0, [x20,560]
 	lsr	w0, w0, 8
 	bl	nandc_set_ddr_para
-.L482:
+.L480:
 	adrp	x0, .LANCHOR2+28
 	ldrb	w0, [x0,#:lo12:.LANCHOR2+28]
 	bl	nandc_bch_sel
+	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
 	ldp	x29, x30, [sp], 64
 	ret
 	.size	zftl_flash_resume, .-zftl_flash_resume
@@ -2765,30 +2857,30 @@ nandc_iqr_wait_flash_ready:
 	ldrb	w1, [x19,516]
 	ldr	x0, [x19,536]
 	cmp	w1, 9
-	bne	.L489
+	bne	.L487
 	ldr	w1, [x0,292]
 	orr	w1, w1, 2
 	str	w1, [x0,292]
 	ldr	w1, [x0,288]
 	orr	w1, w1, 2
 	str	w1, [x0,288]
-	b	.L490
-.L489:
+	b	.L488
+.L487:
 	ldr	w1, [x0,368]
 	orr	w1, w1, 2
 	str	w1, [x0,368]
 	ldr	w1, [x0,364]
 	orr	w1, w1, 2
 	str	w1, [x0,364]
-.L490:
+.L488:
 	ldr	w1, [x0]
-	tbnz	x1, 9, .L491
+	tbnz	x1, 9, .L489
 	bl	wait_for_nand_flash_ready
-	b	.L488
-.L491:
+	b	.L486
+.L489:
 	mov	w1, 1
 	bl	nandc_irq_disable
-.L488:
+.L486:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -2804,86 +2896,90 @@ flash_erase_duplane_block:
 	uxtb	w19, w0
 	add	x0, x20, :lo12:.LANCHOR0
 	str	x25, [sp,64]
-	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
 	uxtb	w25, w1
-	mov	w22, w2
+	mov	w23, w2
 	ldrb	w0, [x0,633]
 	mov	w24, w3
 	cmp	w0, w19
-	bhi	.L494
+	bhi	.L492
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 588
+	mov	w2, 598
 	add	x1, x1, 736
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L494:
-	add	x0, x20, :lo12:.LANCHOR0
-	add	x19, x0, x19, sxtw
-	ldrb	w23, [x19,736]
-	ldr	x19, [x0,536]
+.L492:
+	add	x1, x20, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldrb	w2, [x1,633]
+	cmp	w2, w19
+	bls	.L493
 	adrp	x0, .LANCHOR2
-	mov	x21, x23
-	add	x23, x23, 8
+	add	x19, x1, x19, sxtw
+	ldrb	w22, [x19,736]
+	ldr	x19, [x1,536]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	add	x23, x19, x23, lsl 8
-	tbz	x0, 4, .L495
+	mov	x21, x22
+	add	x22, x22, 8
+	add	x22, x19, x22, lsl 8
+	tbz	x0, 4, .L494
 	adrp	x0, .LC43
 	mov	w1, w21
 	add	x0, x0, :lo12:.LC43
-	mov	w2, w22
+	mov	w2, w23
 	mov	w3, w24
 	bl	printk
-.L495:
+.L494:
 	bl	nandc_wait_flash_ready
 	mov	w0, w21
 	bl	nandc_cs
 	mov	w0, w21
-	cbnz	w25, .L496
+	cbnz	w25, .L495
 	bl	zftl_flash_enter_slc_mode
-	b	.L497
-.L496:
+	b	.L496
+.L495:
 	bl	zftl_flash_exit_slc_mode
-.L497:
+.L496:
 	ubfiz	x4, x21, 8, 8
 	mov	w0, 96
 	add	x19, x19, x4
 	add	x20, x20, :lo12:.LANCHOR0
 	str	w0, [x19,2056]
-	and	w0, w22, 255
+	and	w0, w23, 255
 	str	w0, [x19,2052]
-	lsr	w0, w22, 8
+	lsr	w0, w23, 8
 	str	w0, [x19,2052]
-	lsr	w0, w22, 16
+	lsr	w0, w23, 16
 	str	w0, [x19,2052]
-	ldrb	w0, [x20,781]
+	ldrb	w0, [x20,793]
 	mov	w20, 0
-	cbnz	w0, .L498
+	cbnz	w0, .L497
 	mov	w0, 208
 	str	w0, [x19,2056]
 	mov	w20, 5
 	bl	nandc_wait_flash_ready
-	mov	x0, x23
+	mov	x0, x22
 	bl	flash_read_status
 	and	w20, w0, w20
-.L498:
+.L497:
 	mov	w0, 96
 	str	w0, [x19,2056]
 	and	w0, w24, 255
 	str	w0, [x19,2052]
 	lsr	w0, w24, 8
 	str	w0, [x19,2052]
-	lsr	w3, w24, 16
-	str	w3, [x19,2052]
+	lsr	w24, w24, 16
+	str	w24, [x19,2052]
 	mov	w0, 208
 	str	w0, [x19,2056]
 	mov	w19, 5
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	mov	x0, x23
+	mov	x0, x22
 	bl	flash_read_status
 	mov	w2, w0
 	mov	w0, w21
@@ -2892,17 +2988,18 @@ flash_erase_duplane_block:
 	ldr	x2, [x29,88]
 	and	w19, w2, w19
 	orr	w19, w19, w20
-	cbz	w19, .L499
+	cbz	w19, .L498
 	adrp	x0, .LC44
-	mov	w1, w22
+	mov	w1, w23
 	add	x0, x0, :lo12:.LC44
 	bl	printk
-.L499:
+.L498:
 	mov	w0, w19
-	ldr	x25, [sp,64]
+.L493:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	flash_erase_duplane_block, .-flash_erase_duplane_block
@@ -2913,87 +3010,98 @@ flash_erase_block_en:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	stp	x23, x24, [sp,48]
-	uxtb	w23, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
+	adrp	x20, .LANCHOR0
 	stp	x25, x26, [sp,64]
-	mov	w22, w2
-	uxtb	w26, w1
-	ldrb	w0, [x0,633]
-	and	w24, w2, 2097151
-	cmp	w0, w23
+	uxtb	w25, w1
+	add	x1, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	uxtb	w22, w0
+	mov	w0, 24
+	ldrb	w19, [x1,744]
+	mov	w23, w2
+	sub	w19, w0, w19
+	mov	w0, 1
+	lsl	w19, w0, w19
+	ldrb	w0, [x1,633]
+	sub	w19, w19, #1
+	cmp	w0, w22
+	and	w19, w19, w2
 	bhi	.L508
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 633
+	mov	w2, 645
 	add	x1, x1, 768
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 .L508:
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x0, x23, sxtw
-	ldrb	w21, [x1,736]
-	ldr	x25, [x0,536]
+	add	x1, x20, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldrb	w2, [x1,633]
+	cmp	w2, w22
+	bls	.L509
+	add	x0, x1, x22, sxtw
+	ldrb	w24, [x0,736]
 	adrp	x0, .LANCHOR2
-	mov	x20, x21
-	add	x21, x21, 8
+	ldr	x26, [x1,536]
+	mov	x21, x24
+	add	x24, x24, 8
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	add	x21, x25, x21, lsl 8
-	tbz	x0, 4, .L509
+	add	x24, x26, x24, lsl 8
+	tbz	x0, 4, .L510
 	adrp	x0, .LC45
-	mov	w1, w20
+	mov	w1, w21
 	add	x0, x0, :lo12:.LC45
-	mov	w2, w22
-	mov	w3, w26
+	mov	w2, w23
+	mov	w3, w25
 	bl	printk
-.L509:
+.L510:
 	bl	nandc_wait_flash_ready
-	mov	w0, w20
+	mov	w0, w21
 	bl	nandc_cs
-	mov	w0, w20
-	cbnz	w26, .L510
+	mov	w0, w21
+	cbnz	w25, .L511
 	bl	zftl_flash_enter_slc_mode
-	b	.L511
-.L510:
-	bl	zftl_flash_exit_slc_mode
+	b	.L512
 .L511:
-	ubfiz	x3, x20, 8, 8
+	bl	zftl_flash_exit_slc_mode
+.L512:
+	ubfiz	x3, x21, 8, 8
 	mov	w0, 96
-	add	x3, x25, x3
+	add	x3, x26, x3
 	str	w0, [x3,2056]
-	and	w0, w22, 255
+	and	w0, w19, 255
 	str	w0, [x3,2052]
-	lsr	w0, w24, 8
-	str	w0, [x3,2052]
-	lsr	w0, w24, 16
+	lsr	w0, w19, 8
 	str	w0, [x3,2052]
+	lsr	w19, w19, 16
+	str	w19, [x3,2052]
 	mov	w0, 208
 	str	w0, [x3,2056]
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	mov	x0, x21
+	mov	x0, x24
 	bl	flash_read_status
-	mov	w21, w0
-	mov	w0, w20
+	mov	w19, w0
+	mov	w0, w21
 	bl	nandc_de_cs
 	mov	w3, 5
-	ands	w20, w21, w3
-	beq	.L512
-	add	x19, x19, :lo12:.LANCHOR0
+	ands	w19, w19, w3
+	beq	.L513
+	add	x20, x20, :lo12:.LANCHOR0
 	adrp	x0, .LC46
 	add	x0, x0, :lo12:.LC46
-	mov	w1, w23
-	mov	w3, w20
-	ldrh	w2, [x19,2]
-	udiv	w2, w22, w2
+	mov	w1, w22
+	mov	w3, w19
+	ldrh	w2, [x20,2]
+	udiv	w2, w23, w2
 	bl	printk
-.L512:
-	mov	w0, w20
-	ldp	x19, x20, [sp,16]
+.L513:
+	mov	w0, w19
+.L509:
+	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
@@ -3031,28 +3139,28 @@ flash_erase_all:
 	mov	x21, x0
 	mul	w20, w1, w20
 	uxth	w20, w20
-.L521:
+.L523:
 	ldrb	w0, [x23,633]
 	cmp	w0, w19
-	bls	.L525
+	bls	.L527
 	add	x0, x23, x19, sxtw
 	ldrb	w24, [x0,736]
 	mov	w22, 0
-.L522:
+.L524:
 	cmp	w20, w22, uxth
-	bls	.L526
+	bls	.L528
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x0,2]
 	mov	w0, w24
 	mul	w1, w22, w1
 	add	w22, w22, 1
 	bl	flash_erase_block
-	b	.L522
-.L526:
+	b	.L524
+.L528:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L521
-.L525:
+	b	.L523
+.L527:
 	adrp	x0, .LC47
 	mov	w1, 0
 	add	x0, x0, :lo12:.LC47
@@ -3080,171 +3188,259 @@ rk_nandc_flash_xfer_completed:
 nandc_xfer_start:
 	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	str	x25, [sp,64]
-	add	x21, x22, :lo12:.LANCHOR0
-	str	x2, [x29,80]
-	stp	x23, x24, [sp,48]
-	uxtb	w23, w0
-	uxtb	w24, w1
-	ldr	x0, [x21,536]
 	stp	x19, x20, [sp,16]
-	str	x3, [x29,88]
-	add	w20, w24, 1
+	adrp	x20, .LANCHOR0
+	add	x19, x20, :lo12:.LANCHOR0
+	str	x2, [x29,48]
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	uxtb	w22, w1
+	ldr	x0, [x19,536]
+	str	x3, [x29,56]
 	bl	rk_nandc_xfer_irq_flag_init
-	ldrb	w0, [x21,516]
-	ldr	x4, [x21,536]
+	ldrb	w0, [x19,516]
+	and	w5, w21, 1
+	ldr	x4, [x19,536]
+	add	w1, w22, 1
 	cmp	w0, 9
-	ldr	x3, [x29,88]
-	ldr	x2, [x29,80]
-	bne	.L529
+	ldr	x3, [x29,56]
+	ldr	x2, [x29,48]
+	bne	.L531
 	ldr	w0, [x4,292]
-	ubfiz	w19, w23, 1, 1
-	orr	w19, w19, 8
-	asr	w20, w20, 1
+	ubfx	x1, x1, 1, 6
 	orr	w0, w0, 1
 	str	w0, [x4,292]
 	ldr	w0, [x4,288]
 	orr	w0, w0, 1
 	str	w0, [x4,288]
-	mov	w0, 1
-	bfi	w19, w0, 5, 2
-	ldrb	w0, [x21,673]
-	orr	w19, w19, 536870912
-	orr	w19, w19, 1024
-	and	w19, w19, -17
-	bfi	w19, w20, 22, 6
-	orr	w19, w19, 128
-	cbz	w0, .L531
-	ldrb	w1, [x21,720]
-	orr	w0, w19, 512
-	cmp	w1, wzr
-	csel	w19, w0, w19, ne
-	b	.L531
-.L529:
+	str	wzr, [x29,72]
+	mov	w4, 1
+	ldr	w0, [x29,72]
+	bfi	w0, w5, 1, 1
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 8
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	bfi	w0, w4, 5, 2
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 536870912
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 1024
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	and	w0, w0, -17
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	bfi	w0, w1, 22, 6
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 128
+	str	w0, [x29,72]
+	ldrb	w0, [x19,673]
+	cbnz	w0, .L532
+	b	.L533
+.L531:
 	ldr	w0, [x4,368]
-	ubfiz	w19, w23, 1, 1
-	orr	w19, w19, 8
-	asr	w20, w20, 1
+	ubfx	x1, x1, 1, 6
 	orr	w0, w0, 1
 	str	w0, [x4,368]
 	ldr	w0, [x4,364]
 	orr	w0, w0, 1
 	str	w0, [x4,364]
-	mov	w0, 16
-	ldr	w25, [x4,12]
-	bfi	w25, w0, 8, 8
-	mov	w0, 1
-	bfi	w19, w0, 5, 2
-	and	w25, w25, -9
-	orr	w19, w19, 536870912
-	and	w25, w25, -225
-	orr	w19, w19, 1024
-	and	w19, w19, -17
-	bfi	w19, w20, 22, 6
-	cbz	w23, .L543
-	ldrb	w0, [x21,724]
-	ubfx	x24, x24, 1, 7
+	ldr	w0, [x4,12]
+	mov	w4, 16
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	bfi	w0, w4, 8, 8
+	str	w0, [x29,88]
+	mov	w4, 1
+	ldr	w0, [x29,88]
+	and	w0, w0, -9
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	and	w0, w0, -225
+	str	w0, [x29,88]
+	str	wzr, [x29,72]
+	ldr	w0, [x29,72]
+	bfi	w0, w5, 1, 1
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 8
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	bfi	w0, w4, 5, 2
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 536870912
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 1024
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	and	w0, w0, -17
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	bfi	w0, w1, 22, 6
+	str	w0, [x29,72]
+	cbz	w21, .L546
+	ldrb	w0, [x19,724]
+	ubfx	x22, x22, 1, 7
 	mov	w1, 64
 	mov	w4, 128
 	cmp	w0, 25
-	add	x24, x3, x24, lsl 2
+	add	x22, x3, x22, lsl 2
 	csel	w4, w1, w4, cc
 	mov	w1, 0
-	b	.L536
-.L531:
-	add	x22, x22, :lo12:.LANCHOR0
-	and	w20, w20, 63
+	b	.L538
+.L532:
+	ldrb	w0, [x19,720]
+	cbz	w0, .L533
+	ldr	w0, [x29,72]
+	orr	w0, w0, 512
+	str	w0, [x29,72]
+.L533:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	w1, [x29,72]
 	mov	x0, x2
-	lsl	w1, w20, 10
-	str	x2, [x22,688]
-	mov	w2, w23
-	str	x3, [x22,696]
+	ubfx	x1, x1, 22, 6
+	str	x2, [x20,688]
+	lsl	w1, w1, 10
+	mov	w2, w21
+	str	x3, [x20,696]
 	bl	rknand_dma_map_single
-	str	w0, [x22,704]
-	ldr	x0, [x22,696]
-	lsl	w1, w20, 2
-	mov	w2, w23
+	str	w0, [x20,704]
+	ldr	w1, [x29,72]
+	mov	w2, w21
+	ldr	x0, [x20,696]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 2
 	bl	rknand_dma_map_single
-	str	w0, [x22,708]
-	ldr	x2, [x22,536]
+	str	w0, [x20,708]
 	mov	w1, 1
-	str	w1, [x22,712]
-	cmp	w23, wzr
-	ldr	w1, [x22,704]
-	str	w1, [x2,52]
-	str	w0, [x2,56]
-	mov	w0, 16
-	ldr	w1, [x2,48]
-	bfi	w1, w0, 9, 5
-	mov	w0, 2
-	orr	w1, w1, 448
-	bfi	w1, w0, 3, 3
-	cset	w0, eq
-	orr	w1, w1, 4
-	bfi	w1, w0, 1, 1
-	ldrh	w0, [x22,722]
-	orr	w1, w1, 1
-	bfi	w1, w0, 16, 11
-	str	w1, [x2,48]
-	str	w19, [x2,16]
-	orr	w19, w19, 4
-	str	w19, [x2,16]
-	b	.L528
-.L536:
-	cmp	x3, x24
+	str	w1, [x20,712]
+	ldr	x1, [x20,536]
+	cmp	w21, wzr
+	ldr	w2, [x20,704]
+	str	w2, [x1,52]
+	mov	w2, 16
+	str	w0, [x1,56]
+	ldr	w0, [x1,48]
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 9, 5
+	str	w0, [x29,80]
+	mov	w2, 2
+	ldr	w0, [x29,80]
+	orr	w0, w0, 448
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 3, 3
+	str	w0, [x29,80]
+	cset	w2, eq
+	ldr	w0, [x29,80]
+	orr	w0, w0, 4
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 1, 1
+	str	w0, [x29,80]
+	ldrh	w2, [x20,722]
+	ldr	w0, [x29,80]
+	orr	w0, w0, 1
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 16, 11
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	str	w0, [x1,48]
+	ldr	w0, [x29,72]
+	str	w0, [x1,16]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 4
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	str	w0, [x1,16]
+	b	.L530
+.L538:
+	cmp	x3, x22
 	add	w0, w1, w4
-	beq	.L538
+	beq	.L540
 	ldrh	w5, [x3,2]
 	and	x1, x1, 4294967292
-	ldr	x6, [x21,680]
+	ldr	x6, [x19,680]
 	ldrh	w7, [x3],4
 	orr	w5, w7, w5, lsl 16
 	str	w5, [x6,x1]
 	mov	w1, w0
-	b	.L536
-.L543:
-	ldr	x1, [x21,680]
-	str	w0, [x1]
-.L538:
-	add	x22, x22, :lo12:.LANCHOR0
-	and	w20, w20, 63
-	lsl	w1, w20, 10
-	ldr	x0, [x22,680]
-	str	x2, [x22,688]
-	str	x0, [x22,696]
+	b	.L538
+.L546:
+	ldr	x0, [x19,680]
+	str	w4, [x0]
+.L540:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	w1, [x29,72]
+	ubfx	x1, x1, 22, 6
+	ldr	x0, [x20,680]
+	lsl	w1, w1, 10
+	str	x2, [x20,688]
+	str	x0, [x20,696]
 	mov	x0, x2
-	mov	w2, w23
+	mov	w2, w21
 	bl	rknand_dma_map_single
-	str	w0, [x22,704]
-	ldr	x0, [x22,696]
-	lsl	w1, w20, 7
-	mov	w2, w23
+	str	w0, [x20,704]
+	ldr	w1, [x29,72]
+	mov	w2, w21
+	ldr	x0, [x20,696]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 7
 	bl	rknand_dma_map_single
-	str	w0, [x22,708]
-	ldr	x3, [x22,536]
+	str	w0, [x20,708]
+	ldr	x1, [x20,536]
 	mov	w0, 1
-	str	w0, [x22,712]
-	cmp	w23, wzr
-	ldr	w0, [x22,704]
-	mov	w1, 8660
-	str	w0, [x3,20]
-	ldr	w0, [x22,708]
-	str	w0, [x3,24]
-	cset	w0, eq
-	bfi	w1, w0, 1, 1
-	orr	w1, w1, 1
-	str	w1, [x3,16]
-	str	w25, [x3,12]
-	str	w19, [x3,8]
-	orr	w19, w19, 4
-	str	w19, [x3,8]
-.L528:
+	str	w0, [x20,712]
+	mov	w2, 16
+	ldr	w0, [x20,704]
+	cmp	w21, wzr
+	str	w0, [x1,20]
+	ldr	w0, [x20,708]
+	str	w0, [x1,24]
+	str	wzr, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 9, 5
+	str	w0, [x29,80]
+	mov	w2, 2
+	ldr	w0, [x29,80]
+	orr	w0, w0, 448
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 3, 3
+	str	w0, [x29,80]
+	cset	w2, eq
+	ldr	w0, [x29,80]
+	orr	w0, w0, 4
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	bfi	w0, w2, 1, 1
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	orr	w0, w0, 1
+	str	w0, [x29,80]
+	ldr	w0, [x29,80]
+	str	w0, [x1,16]
+	ldr	w0, [x29,88]
+	str	w0, [x1,12]
+	ldr	w0, [x29,72]
+	str	w0, [x1,8]
+	ldr	w0, [x29,72]
+	orr	w0, w0, 4
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	str	w0, [x1,8]
+.L530:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldr	x25, [sp,64]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	nandc_xfer_start, .-nandc_xfer_start
@@ -3266,12 +3462,12 @@ nandc_set_seed:
 	ldrb	w2, [x0,516]
 	ldr	x0, [x0,536]
 	cmp	w2, 9
-	bne	.L546
+	bne	.L549
 	str	w1, [x0,520]
-	b	.L544
-.L546:
+	b	.L547
+.L549:
 	str	w1, [x0,336]
-.L544:
+.L547:
 	ret
 	.size	nandc_set_seed, .-nandc_set_seed
 	.align	2
@@ -3283,35 +3479,38 @@ zftl_flash_de_init:
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	bl	nandc_wait_flash_ready
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x19,#:lo12:.LANCHOR0]
-	cbz	w1, .L551
-	ldrb	w0, [x0,634]
-	cbnz	w0, .L551
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,#:lo12:.LANCHOR0]
+	cbz	w0, .L554
+	ldrb	w0, [x1,634]
+	cbnz	w0, .L554
+	ldrb	w1, [x1,516]
+	cmp	w1, 9
+	beq	.L554
 	bl	zftl_flash_exit_slc_mode
-.L551:
+.L554:
 	mov	w0, 0
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	hynix_reconfig_rr_para
 	ldrb	w0, [x20,672]
-	cbz	w0, .L552
-	ldrb	w0, [x20,780]
-	tbz	x0, 0, .L552
+	cbz	w0, .L555
+	ldrb	w0, [x20,792]
+	tbz	x0, 0, .L555
 	mov	w0, 1
 	bl	flash_set_interface_mode
 	mov	w0, 1
 	bl	nandc_set_if_mode
 	strb	wzr, [x20,672]
-.L552:
+.L555:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x19,720]
-	cbz	w0, .L553
+	cbz	w0, .L556
 	mov	w0, 0
 	strb	wzr, [x19,720]
 	bl	nandc_set_seed
 	mov	w0, 1
 	strb	w0, [x19,720]
-.L553:
+.L556:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -3337,47 +3536,46 @@ nandc_get_chip_if:
 	ret
 	.size	nandc_get_chip_if, .-nandc_get_chip_if
 	.align	2
-	.global	buf_init
-	.type	buf_init, %function
-buf_init:
+	.global	zbuf_init
+	.type	zbuf_init, %function
+zbuf_init:
 	stp	x29, x30, [sp, -48]!
 	adrp	x0, .LANCHOR0
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	add	x19, x0, :lo12:.LANCHOR0
+	mov	w20, 0
 	stp	x21, x22, [sp,32]
-	add	x19, x19, 784
-	mov	w21, 0
+	add	x19, x19, 800
 	mov	x22, x0
-.L569:
-	add	x20, x22, :lo12:.LANCHOR0
-	uxtb	w0, w21
+.L575:
+	add	x21, x22, :lo12:.LANCHOR0
+	uxtb	w0, w20
 	add	w1, w0, 1
 	strb	w0, [x19,1]
 	strb	w1, [x19]
-	add	w21, w21, 1
-	ldrb	w0, [x20,2832]
+	add	w20, w20, 1
+	ldrb	w0, [x21,2848]
 	add	x19, x19, 64
 	strb	wzr, [x19,-62]
 	str	xzr, [x19,-48]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
 	str	x0, [x19,-56]
-	ldrb	w0, [x20,2832]
-	lsl	w0, w0, 1
+	mov	w0, 64
 	bl	ftl_malloc
 	str	x0, [x19,-40]
-	cmp	w21, 32
-	bne	.L569
-	strb	w21, [x20,2834]
+	cmp	w20, 32
+	bne	.L575
+	strb	w20, [x21,2850]
 	mov	w0, -1
-	strb	wzr, [x20,2833]
-	strb	w0, [x20,2768]
-	ldp	x21, x22, [sp,32]
+	strb	wzr, [x21,2849]
+	strb	w0, [x21,2784]
 	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
 	ret
-	.size	buf_init, .-buf_init
+	.size	zbuf_init, .-zbuf_init
 	.align	2
 	.global	buf_reinit
 	.type	buf_reinit, %function
@@ -3385,8 +3583,8 @@ buf_reinit:
 	adrp	x0, .LANCHOR0
 	mov	w2, 0
 	add	x1, x0, :lo12:.LANCHOR0
-	add	x1, x1, 784
-.L572:
+	add	x1, x1, 800
+.L578:
 	uxtb	w3, w2
 	add	w2, w2, 1
 	add	w4, w3, 1
@@ -3396,12 +3594,12 @@ buf_reinit:
 	strb	wzr, [x1,2]
 	add	x1, x1, 64
 	str	xzr, [x1,-48]
-	bne	.L572
+	bne	.L578
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w1, -1
-	strb	wzr, [x0,2833]
-	strb	w1, [x0,2768]
-	strb	w2, [x0,2834]
+	strb	wzr, [x0,2849]
+	strb	w1, [x0,2784]
+	strb	w2, [x0,2850]
 	ret
 	.size	buf_reinit, .-buf_reinit
 	.align	2
@@ -3417,10 +3615,10 @@ buf_add_tail:
 	mov	x19, x1
 	ldrb	w1, [x20]
 	cmp	w1, 255
-	bne	.L580
+	bne	.L586
 	ldrb	w0, [x19,1]
 	cmp	w0, 255
-	bne	.L576
+	bne	.L582
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
@@ -3429,23 +3627,23 @@ buf_add_tail:
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L576:
+.L582:
 	ldrb	w0, [x19,1]
 	strb	w0, [x20]
-	b	.L574
-.L580:
+	b	.L580
+.L586:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 784
-.L581:
+	add	x0, x0, 800
+.L587:
 	mov	w20, w1
 	sbfiz	x1, x1, 6, 32
 	ldrb	w1, [x0,x1]
 	cmp	w1, 255
-	bne	.L581
+	bne	.L587
 	ldrb	w0, [x19,1]
 	cmp	w0, 255
-	bne	.L578
+	bne	.L584
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
@@ -3454,14 +3652,14 @@ buf_add_tail:
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L578:
+.L584:
 	adrp	x0, .LANCHOR0
 	sbfiz	x20, x20, 6, 32
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x19,1]
-	add	x0, x0, 784
+	add	x0, x0, 800
 	strb	w1, [x0,x20]
-.L574:
+.L580:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -3484,16 +3682,16 @@ queue_read_cmd:
 	adrp	x0, .LANCHOR0
 	mov	x1, x19
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 2835
+	add	x0, x0, 2851
 	bl	buf_add_tail
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	queue_read_cmd, .-queue_read_cmd
 	.align	2
-	.global	buf_free
-	.type	buf_free, %function
-buf_free:
+	.global	zbuf_free
+	.type	zbuf_free, %function
+zbuf_free:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	str	x19, [sp,16]
@@ -3502,30 +3700,30 @@ buf_free:
 	and	w1, w1, 8
 	uxtb	w1, w1
 	strb	w1, [x0,2]
-	cbz	w1, .L584
+	cbz	w1, .L590
 	ldr	w1, [x0,36]
 	cmn	w1, #1
-	beq	.L584
+	beq	.L590
 	mov	x1, x0
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 2833
+	add	x0, x0, 2849
 	bl	buf_add_tail
-	b	.L585
-.L584:
+	b	.L591
+.L590:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrb	w2, [x1,2833]
+	ldrb	w2, [x1,2849]
 	strb	w2, [x0]
 	ldrb	w0, [x0,1]
-	strb	w0, [x1,2833]
-.L585:
+	strb	w0, [x1,2849]
+.L591:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,2834]
+	ldrb	w0, [x19,2850]
 	add	w0, w0, 1
-	strb	w0, [x19,2834]
+	strb	w0, [x19,2850]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
-	.size	buf_free, .-buf_free
+	.size	zbuf_free, .-zbuf_free
 	.align	2
 	.global	buf_alloc
 	.type	buf_alloc, %function
@@ -3538,16 +3736,16 @@ buf_alloc:
 	str	x21, [sp,32]
 	uxtb	w21, w0
 	mov	x19, x1
-	ldrb	w0, [x20,2834]
-	cbz	w0, .L593
-.L596:
+	ldrb	w0, [x20,2850]
+	cbz	w0, .L599
+.L602:
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x1, 784
-	ldrb	w2, [x1,2833]
+	add	x0, x1, 800
+	ldrb	w2, [x1,2849]
 	add	x0, x0, x2, lsl 6
-	cbz	w21, .L594
-	b	.L595
-.L593:
+	cbz	w21, .L600
+	b	.L601
+.L599:
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
@@ -3556,26 +3754,26 @@ buf_alloc:
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-	ldrb	w1, [x20,2834]
-	cbnz	w1, .L596
-.L598:
+	ldrb	w1, [x20,2850]
+	cbnz	w1, .L602
+.L604:
 	mov	x0, 0
-	b	.L597
-.L594:
-	ldrb	w1, [x1,2834]
+	b	.L603
+.L600:
+	ldrb	w1, [x1,2850]
 	cmp	w1, 1
-	beq	.L598
-.L595:
+	beq	.L604
+.L601:
 	add	x1, x19, :lo12:.LANCHOR0
 	lsl	x2, x2, 6
-	add	x4, x1, 784
+	add	x4, x1, 800
 	add	x3, x4, x2
 	ldrb	w5, [x4,x2]
-	strb	w5, [x1,2833]
-	ldrb	w5, [x1,2834]
+	strb	w5, [x1,2849]
+	ldrb	w5, [x1,2850]
 	strh	wzr, [x3,50]
 	sub	w5, w5, #1
-	strb	w5, [x1,2834]
+	strb	w5, [x1,2850]
 	mov	w1, 1
 	strb	w1, [x3,2]
 	mov	w1, -1
@@ -3585,7 +3783,7 @@ buf_alloc:
 	strb	wzr, [x3,56]
 	str	w1, [x3,36]
 	strb	wzr, [x3,57]
-.L597:
+.L603:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -3598,33 +3796,33 @@ buf_remove_buf:
 	ldrb	w4, [x1,1]
 	ldrb	w2, [x0]
 	cmp	w4, w2
-	bne	.L605
+	bne	.L611
 	ldrb	w1, [x1]
 	strb	w1, [x0]
-	b	.L609
-.L605:
+	b	.L615
+.L611:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 784
-.L607:
+	add	x0, x0, 800
+.L613:
 	cmp	w2, 255
-	beq	.L610
+	beq	.L616
 	mov	w3, w2
 	sbfiz	x2, x2, 6, 32
 	ldrb	w2, [x0,x2]
 	cmp	w2, w4
-	bne	.L607
+	bne	.L613
 	sbfiz	x3, x3, 6, 32
 	ldrb	w2, [x1]
 	strb	w2, [x0,x3]
 	mov	w0, -1
 	strb	w0, [x1]
-.L609:
+.L615:
 	mov	w0, 1
-	b	.L604
-.L610:
+	b	.L610
+.L616:
 	mov	w0, 0
-.L604:
+.L610:
 	ret
 	.size	buf_remove_buf, .-buf_remove_buf
 	.align	2
@@ -3637,8 +3835,8 @@ buf_remove_free:
 	adrp	x19, .LANCHOR0
 	mov	x20, x0
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2834]
-	cbnz	w0, .L612
+	ldrb	w0, [x0,2850]
+	cbnz	w0, .L618
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
@@ -3647,22 +3845,22 @@ buf_remove_free:
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L612:
+.L618:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,2834]
-	cbz	w0, .L611
-	add	x0, x19, 2833
+	ldrb	w0, [x19,2850]
+	cbz	w0, .L617
+	add	x0, x19, 2849
 	mov	x1, x20
 	bl	buf_remove_buf
 	cmp	w0, 1
-	bne	.L611
-	ldrb	w0, [x19,2834]
+	bne	.L617
+	ldrb	w0, [x19,2850]
 	sub	w0, w0, #1
-	strb	w0, [x19,2834]
+	strb	w0, [x19,2850]
 	ldrb	w0, [x20,2]
 	orr	w0, w0, 1
 	strb	w0, [x20,2]
-.L611:
+.L617:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -3742,49 +3940,49 @@ flash_mask_bad_block:
 str2hex:
 	ldrb	w1, [x0]
 	cmp	w1, 48
-	bne	.L619
+	bne	.L625
 	ldrb	w1, [x0,1]
 	add	x2, x0, 2
 	and	w1, w1, -33
 	uxtb	w1, w1
 	cmp	w1, 88
 	csel	x0, x0, x2, ne
-.L619:
+.L625:
 	ldrb	w1, [x0]
 	and	w1, w1, -33
 	uxtb	w1, w1
 	cmp	w1, 88
 	mov	w1, 0
 	csinc	x0, x0, x0, ne
-.L621:
+.L627:
 	ldrb	w2, [x0]
-	cbz	w2, .L628
+	cbz	w2, .L634
 	sub	w3, w2, #48
 	uxtb	w3, w3
 	cmp	w3, 9
-	bhi	.L622
+	bhi	.L628
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #48
-	b	.L623
-.L622:
+	b	.L629
+.L628:
 	sub	w3, w2, #97
 	uxtb	w3, w3
 	cmp	w3, 5
-	bhi	.L624
+	bhi	.L630
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #87
-	b	.L623
-.L624:
+	b	.L629
+.L630:
 	sub	w3, w2, #65
 	uxtb	w3, w3
 	cmp	w3, 5
-	bhi	.L628
+	bhi	.L634
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #55
-.L623:
+.L629:
 	add	x0, x0, 1
-	b	.L621
-.L628:
+	b	.L627
+.L634:
 	mov	w0, w1
 	ret
 	.size	str2hex, .-str2hex
@@ -3844,7 +4042,7 @@ ftl_print_info_to_buf:
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21,2836]
+	ldr	w2, [x21,2852]
 	adrp	x1, .LC52
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC52
@@ -3856,7 +4054,7 @@ ftl_print_info_to_buf:
 	add	x1, x1, :lo12:.LC53
 	add	x19, x19, 10
 	bl	strcpy
-	ldr	w2, [x21,2840]
+	ldr	w2, [x21,2856]
 	adrp	x1, .LC54
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC54
@@ -3882,51 +4080,51 @@ ftl_print_info_to_buf:
 	ldr	w2, [x2,528]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2844]
+	ldrh	w2, [x21,2860]
 	adrp	x1, .LC58
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC58
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2846]
+	ldrh	w2, [x21,2862]
 	adrp	x1, .LC59
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC59
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2848]
+	ldrh	w2, [x21,2864]
 	adrp	x1, .LC60
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC60
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2850]
+	ldrh	w2, [x21,2866]
 	adrp	x1, .LC61
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC61
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2852]
+	ldrh	w2, [x21,2868]
 	adrp	x1, .LC62
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC62
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2854]
+	ldrh	w2, [x21,2870]
 	adrp	x1, .LC63
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC63
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrb	w4, [x21,2857]
+	ldrb	w4, [x21,2873]
 	adrp	x1, .LC64
-	ldrb	w2, [x21,2834]
+	ldrb	w2, [x21,2850]
 	mov	x0, x19
-	ldrb	w3, [x21,2856]
+	ldrb	w3, [x21,2872]
 	add	x1, x1, :lo12:.LC64
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x3, [x21,2864]
+	ldr	x3, [x21,2880]
 	adrp	x1, .LC65
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC65
@@ -3934,7 +4132,7 @@ ftl_print_info_to_buf:
 	ldrh	w3, [x3,146]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,2864]
+	ldr	x0, [x21,2880]
 	adrp	x1, .LC66
 	add	x1, x1, :lo12:.LC66
 	ldr	w3, [x0,16]
@@ -3943,7 +4141,7 @@ ftl_print_info_to_buf:
 	add	w2, w2, w3, lsr 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,2864]
+	ldr	x0, [x21,2880]
 	adrp	x1, .LC67
 	add	x1, x1, :lo12:.LC67
 	ldr	w3, [x0,24]
@@ -3952,14 +4150,14 @@ ftl_print_info_to_buf:
 	add	w2, w2, w3, lsr 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC68
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC68
 	ldr	w2, [x2,64]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC69
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC69
@@ -3995,28 +4193,28 @@ ftl_print_info_to_buf:
 	ldr	w2, [x2,552]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC74
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC74
 	ldr	w2, [x2,52]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC75
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC75
 	ldr	w2, [x2,60]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC76
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC76
 	ldr	w2, [x2,76]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2864]
+	ldr	x2, [x21,2880]
 	adrp	x1, .LC77
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC77
@@ -4050,7 +4248,7 @@ ftl_print_info_to_buf:
 	ldrb	w4, [x4,89]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x6, [x21,2864]
+	ldr	x6, [x21,2880]
 	adrp	x1, .LC81
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC81
@@ -4061,7 +4259,7 @@ ftl_print_info_to_buf:
 	ldrh	w6, [x6,96]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x6, [x21,2864]
+	ldr	x6, [x21,2880]
 	adrp	x1, .LC82
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC82
@@ -4072,20 +4270,20 @@ ftl_print_info_to_buf:
 	ldrh	w6, [x6,98]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2872]
+	ldrh	w2, [x21,2888]
 	adrp	x1, .LC83
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC83
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w6, [x21,2884]
+	ldr	w6, [x21,2900]
 	adrp	x1, .LC84
-	ldrh	w2, [x21,2874]
+	ldrh	w2, [x21,2890]
 	mov	x0, x19
-	ldrh	w3, [x21,2876]
+	ldrh	w3, [x21,2892]
 	add	x1, x1, :lo12:.LC84
-	ldrh	w4, [x21,2878]
-	ldrh	w5, [x21,2880]
+	ldrh	w4, [x21,2894]
+	ldrh	w5, [x21,2896]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldr	x5, [x21,608]
@@ -4100,7 +4298,7 @@ ftl_print_info_to_buf:
 	add	x19, x19, x0, sxtw
 	ldr	x6, [x21,608]
 	adrp	x1, .LC86
-	ldr	x5, [x21,2864]
+	ldr	x5, [x21,2880]
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC86
 	ldr	w2, [x6,536]
@@ -4139,12 +4337,12 @@ ftl_gc_write_buf:
 	ldrb	w0, [x0,2]
 	orr	w0, w0, 2
 	strb	w0, [x1,2]
-	add	x0, x19, 2888
+	add	x0, x19, 2904
 	bl	buf_add_tail
-	ldrb	w0, [x19,2856]
+	ldrb	w0, [x19,2872]
 	add	w0, w0, 1
 	uxtb	w0, w0
-	strb	w0, [x19,2856]
+	strb	w0, [x19,2872]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -4165,182 +4363,195 @@ vpn_check:
 	.global	gc_add_sblk
 	.type	gc_add_sblk, %function
 gc_add_sblk:
-	stp	x29, x30, [sp, -80]!
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x24, .LANCHOR2
+	uxth	w23, w1
 	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
 	uxth	w21, w0
-	add	x0, x22, :lo12:.LANCHOR0
+	adrp	x22, .LANCHOR0
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	uxth	w23, w1
 	uxth	w20, w2
+	tbz	x0, 8, .L642
+	add	x7, x22, :lo12:.LANCHOR0
+	uxtw	x5, w21
+	mov	w1, w21
+	mov	w2, w23
+	mov	w3, w20
+	ldr	x0, [x7,584]
+	ldr	x6, [x7,600]
+	add	x0, x0, x5, lsl 2
+	ldrh	w5, [x6,x5,lsl 1]
+	ldrb	w4, [x0,2]
+	adrp	x0, .LC87
+	ldrh	w6, [x7,2968]
+	add	x0, x0, :lo12:.LC87
+	ldrh	w7, [x7,2894]
+	ubfx	x4, x4, 5, 3
+	bl	printk
+.L642:
+	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0,576]
 	cmp	w0, w21
-	bhi	.L636
+	bhi	.L643
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 338
+	mov	w2, 454
 	add	x1, x1, 1312
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L636:
-	add	x6, x22, :lo12:.LANCHOR0
-	uxtw	x19, w21
-	lsl	x25, x19, 1
-	adrp	x24, .LANCHOR2
-	ldr	x0, [x6,600]
-	ldrh	w26, [x0,x25]
+.L643:
+	add	x5, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x5,576]
+	cmp	w0, w21
+	bhi	.L644
 	ldr	w0, [x24,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L637
-	ldr	x0, [x6,584]
+	tbz	x0, 10, .L645
+	adrp	x0, .LC88
 	mov	w1, w21
-	ldrh	w5, [x6,2952]
+	add	x0, x0, :lo12:.LC88
 	mov	w2, w23
-	add	x0, x0, x19, lsl 2
-	ldrh	w6, [x6,2878]
-	mov	w4, w26
-	ldrb	w3, [x0,2]
-	adrp	x0, .LC87
-	add	x0, x0, :lo12:.LC87
-	ubfx	x3, x3, 5, 3
+	mov	w3, w20
 	bl	printk
-.L637:
-	add	x3, x22, :lo12:.LANCHOR0
-	ldr	x0, [x3,584]
-	add	x0, x0, x19, lsl 2
+.L645:
+	bl	dump_stack
+	b	.L664
+.L644:
+	uxtw	x0, w21
+	ldr	x1, [x5,600]
+	ldrh	w4, [x1,x0,lsl 1]
+	ldr	x1, [x5,584]
+	add	x0, x1, x0, lsl 2
 	ldrb	w19, [x0,2]
 	ands	w19, w19, 224
-	bne	.L638
-	cbz	w26, .L639
+	bne	.L647
+	cbz	w4, .L646
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 343
+	mov	w2, 462
 	add	x1, x1, 1312
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-	b	.L639
-.L638:
-	ldrh	w1, [x3,2896]
-	add	x6, x3, 2896
+	b	.L646
+.L647:
+	ldrh	w1, [x5,2912]
+	add	x8, x5, 2912
 	mov	w19, 0
 	cmp	w1, w21
-	beq	.L639
-	ldr	x3, [x3,608]
-	ldrh	w1, [x3,48]
+	beq	.L646
+	ldr	x7, [x5,608]
+	ldrh	w1, [x7,48]
 	cmp	w1, w21
-	beq	.L639
-	ldrh	w1, [x3,16]
+	beq	.L646
+	ldrh	w1, [x7,16]
 	cmp	w1, w21
-	beq	.L639
-	ldrh	w1, [x3,80]
+	beq	.L646
+	ldrh	w1, [x7,80]
 	cmp	w1, w21
-	beq	.L639
-	ldrh	w5, [x6,56]
-	mov	x4, 0
-.L640:
-	cmp	w5, w4
-	bls	.L671
-	add	x4, x4, 1
-	add	x1, x6, x4, lsl 1
+	beq	.L646
+	ldrh	w5, [x8,56]
+	mov	x6, 0
+.L648:
+	cmp	w5, w6
+	bls	.L682
+	add	x6, x6, 1
+	add	x1, x8, x6, lsl 1
 	ldrh	w1, [x1,56]
 	cmp	w1, w21
-	bne	.L640
-	mov	w19, 0
-	b	.L639
-.L671:
-	cbnz	w23, .L642
-	add	x4, x22, :lo12:.LANCHOR0
+	bne	.L648
+	b	.L664
+.L682:
+	cbnz	w23, .L650
+	add	x8, x22, :lo12:.LANCHOR0
 	mov	w19, w23
-	ldrh	w7, [x4,3240]
-	cmp	w7, w21
-	beq	.L639
+	ldrh	w9, [x8,3512]
+	cmp	w9, w21
+	beq	.L646
 	mov	x6, 0
-.L644:
-	add	x1, x4, 3248
+.L652:
+	add	x1, x8, 3520
 	ldrh	w1, [x6,x1]
 	cmp	w21, w1
-	bne	.L643
+	bne	.L651
 	ldr	w1, [x24,#:lo12:.LANCHOR2]
 	mov	w19, 0
-	tbz	x1, 8, .L639
-	ldr	x3, [x4,600]
-	mov	w1, w21
+	tbz	x1, 8, .L646
 	ldrb	w2, [x0,2]
-	adrp	x0, .LC88
-	mov	w4, w21
-	mov	w5, w7
-	ldrh	w3, [x3,x25]
+	adrp	x0, .LC89
+	mov	w3, w4
+	mov	w1, w21
 	ubfx	x2, x2, 5, 3
-	add	x0, x0, :lo12:.LC88
+	mov	w4, w21
+	mov	w5, w9
+	add	x0, x0, :lo12:.LC89
 	bl	printk
-	b	.L639
-.L643:
+	b	.L646
+.L651:
 	add	x6, x6, 2
 	cmp	x6, 16
-	bne	.L644
-	sxtw	x4, w20
-	add	x3, x3, x4, lsl 7
-	add	x19, x3, 136
-	b	.L646
-.L642:
-	add	x19, x3, 392
-.L646:
+	bne	.L652
+	sxtw	x6, w20
+	add	x19, x7, x6, lsl 7
+	add	x19, x19, 136
+	b	.L654
+.L650:
+	add	x19, x7, 392
+.L654:
 	ldr	w1, [x24,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L647
+	tbz	x1, 8, .L655
 	add	x6, x22, :lo12:.LANCHOR0
 	ldrb	w3, [x0,2]
-	adrp	x0, .LC87
+	adrp	x0, .LC90
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC87
+	add	x0, x0, :lo12:.LC90
 	mov	w2, w23
-	ldr	x4, [x6,600]
+	ldrh	w6, [x6,2894]
 	ubfx	x3, x3, 5, 3
-	ldrh	w6, [x6,2878]
-	ldrh	w4, [x4,x25]
 	bl	printk
-.L647:
-	mov	x3, x19
+.L655:
+	mov	x4, x19
 	add	x0, x19, 128
 	mov	w1, 65535
-.L650:
-	ldrh	w2, [x3]
+.L658:
+	ldrh	w2, [x4]
 	cmp	w2, w1
-	bne	.L648
-	strh	w21, [x3]
+	bne	.L656
+	strh	w21, [x4]
 	add	x22, x22, :lo12:.LANCHOR0
-	cbz	w23, .L649
+	cbz	w23, .L657
 	ldr	x1, [x22,608]
 	ldrh	w0, [x1,124]
 	add	w0, w0, 1
 	strh	w0, [x1,124]
-	b	.L670
-.L649:
+	b	.L681
+.L657:
 	ldr	x0, [x22,608]
-	add	x2, x0, x20, uxth 1
-	ldrh	w0, [x2,120]
+	add	x20, x0, x20, uxth 1
+	ldrh	w0, [x20,120]
 	add	w0, w0, 1
-	strh	w0, [x2,120]
-.L670:
+	strh	w0, [x20,120]
+	b	.L681
+.L656:
+	add	x4, x4, 2
+	cmp	x4, x0
+	bne	.L658
+.L681:
 	mov	w19, 1
-	b	.L639
-.L648:
-	add	x3, x3, 2
-	cmp	x3, x0
-	bne	.L650
-	b	.L670
-.L639:
-	mov	w0, w19
+	b	.L646
+.L664:
+	mov	w19, 0
+.L646:
+	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 64
 	ret
 	.size	gc_add_sblk, .-gc_add_sblk
 	.align	2
@@ -4348,57 +4559,60 @@ gc_add_sblk:
 	.type	gc_mark_bad_ppa, %function
 gc_mark_bad_ppa:
 	stp	x29, x30, [sp, -64]!
-	mov	w1, 21
 	mov	w3, w0
+	mov	w1, 24
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	str	x23, [sp,48]
 	stp	x21, x22, [sp,32]
-	add	x21, x20, :lo12:.LANCHOR0
+	adrp	x21, .LANCHOR0
+	str	x23, [sp,48]
+	add	x4, x21, :lo12:.LANCHOR0
 	mov	w23, 1
-	add	x21, x21, 2896
-	ldrh	w19, [x21,368]
-	lsr	w2, w0, w19
+	stp	x19, x20, [sp,16]
+	add	x20, x4, 2912
+	ldrb	w19, [x4,744]
+	ldrh	w0, [x4,3536]
 	sub	w19, w1, w19
+	ldr	w1, [x4,3496]
+	sub	w19, w19, w0
+	lsr	w2, w3, w0
 	lsl	w19, w23, w19
-	ldrb	w0, [x21,370]
+	ldrb	w0, [x4,3538]
 	sub	w19, w19, #1
 	uxth	w22, w2
 	and	w19, w19, w2
 	mov	w2, w22
-	ldr	w1, [x21,328]
 	udiv	w19, w19, w0
-	adrp	x0, .LC89
-	add	x0, x0, :lo12:.LC89
+	adrp	x0, .LC91
+	add	x0, x0, :lo12:.LC91
 	bl	printk
 	mov	w1, w23
 	mov	w2, 0
 	uxth	w19, w19
 	mov	w0, w19
 	bl	gc_add_sblk
-	ldr	w0, [x21,328]
+	ldr	w0, [x20,584]
 	mov	w1, 0
-.L673:
+	mov	x4, x20
+.L684:
 	cmp	w1, w0
-	bcs	.L676
-	add	x2, x21, x1, sxtw 1
-	ldrh	w2, [x2,332]
+	bcs	.L687
+	add	x2, x4, x1, sxtw 1
+	ldrh	w2, [x2,588]
 	cmp	w2, w22
-	beq	.L674
+	beq	.L685
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L673
-.L676:
+	b	.L684
+.L687:
 	cmp	w0, 5
-	bhi	.L674
-	add	x20, x20, :lo12:.LANCHOR0
+	bhi	.L685
+	add	x21, x21, :lo12:.LANCHOR0
 	add	w1, w0, 1
-	add	x20, x20, 2896
-	str	w1, [x20,328]
-	add	x20, x20, x0, uxtw 1
-	strh	w22, [x20,332]
-.L674:
+	add	x21, x21, 2912
+	str	w1, [x21,584]
+	add	x21, x21, x0, uxtw 1
+	strh	w22, [x21,588]
+.L685:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -4410,9 +4624,9 @@ gc_mark_bad_ppa:
 	.global	gc_get_src_ppa_from_index
 	.type	gc_get_src_ppa_from_index, %function
 gc_get_src_ppa_from_index:
-	adrp	x1, .LANCHOR0+3272
+	adrp	x1, .LANCHOR0+3544
 	ubfiz	x0, x0, 2, 16
-	ldr	x1, [x1,#:lo12:.LANCHOR0+3272]
+	ldr	x1, [x1,#:lo12:.LANCHOR0+3544]
 	ldr	w0, [x1,x0]
 	ret
 	.size	gc_get_src_ppa_from_index, .-gc_get_src_ppa_from_index
@@ -4431,135 +4645,140 @@ gc_write_completed:
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	str	x27, [sp,80]
-	add	x24, x21, 784
+	add	x23, x21, 800
 	add	x22, x22, 1328
-.L679:
-	ldrb	w0, [x21,3280]
+.L690:
+	ldrb	w0, [x21,3552]
 	adrp	x19, .LANCHOR0
 	cmp	w0, 255
-	beq	.L709
+	beq	.L719
 	sxtw	x25, w0
 	lsl	x0, x25, 6
-	add	x2, x24, x0
-	ldrb	w0, [x24,x0]
+	add	x2, x23, x0
+	ldrb	w0, [x23,x0]
 	ldr	w1, [x2,52]
-	strb	w0, [x21,3280]
-	ldrh	w23, [x2,48]
-	cbz	w1, .L680
+	strb	w0, [x21,3552]
+	ldrh	w24, [x2,48]
+	cbz	w1, .L691
 	ldr	w2, [x2,40]
-	adrp	x0, .LC90
+	adrp	x0, .LC92
 	mov	w3, 1
-	add	x0, x0, :lo12:.LC90
-	strh	w3, [x21,3216]
-	str	w2, [x21,3220]
+	add	x0, x0, :lo12:.LC92
+	strh	w3, [x21,3488]
+	str	w2, [x21,3492]
 	bl	printk
 	adrp	x0, .LC0
 	mov	x1, x22
-	mov	w2, 672
+	mov	w2, 805
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L680:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x1,3281]
-	cmp	w0, 3
-	bne	.L681
-	ldr	x0, [x1,608]
+.L691:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,3553]
+	cmp	w1, 3
+	bne	.L692
+	ldrb	w1, [x0,756]
+	cbnz	w1, .L692
+	ldr	x0, [x0,608]
 	ldrb	w20, [x0,89]
 	add	w20, w20, w20, lsl 1
 	and	w20, w20, 1023
-	b	.L682
-.L681:
-	ldrb	w0, [x1,3282]
+	b	.L693
+.L692:
+	add	x0, x19, :lo12:.LANCHOR0
 	mov	w20, 1
-	cbz	w0, .L682
-	ldrb	w0, [x1,3283]
-	cbz	w0, .L682
-	ldr	x0, [x1,608]
-	ldrb	w20, [x0,89]
-	ubfiz	w20, w20, 1, 8
-.L682:
+	ldrb	w1, [x0,3554]
+	cbz	w1, .L693
+	ldrb	w0, [x0,3555]
+	mov	w20, 2
+	cmp	w0, wzr
+	csinc	w20, w20, wzr, ne
+.L693:
 	adrp	x0, .LANCHOR2
-	uxth	x26, w23
+	uxth	x26, w24
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L683
+	tbz	x0, 8, .L694
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, w23
-	add	x2, x0, x25, lsl 6
-	mov	w3, w23
-	ldr	x4, [x0,3288]
-	adrp	x0, .LC91
-	ldrb	w2, [x2,785]
-	add	x0, x0, :lo12:.LC91
+	mov	w1, w24
+	add	x3, x0, 800
+	add	x3, x3, x25, lsl 6
+	ldr	x4, [x0,3560]
+	adrp	x0, .LC93
+	add	x0, x0, :lo12:.LC93
+	ldrb	w2, [x3,1]
 	ldrb	w4, [x4,x26]
+	ldrh	w3, [x3,48]
 	bl	printk
-.L683:
+.L694:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x0,3288]
+	ldr	x1, [x0,3560]
 	add	x0, x0, x25, lsl 6
 	ldrb	w1, [x1,x26]
-	ldrb	w0, [x0,785]
+	ldrb	w0, [x0,801]
 	cmp	w1, w0
-	beq	.L684
+	beq	.L695
 	adrp	x0, .LC0
 	mov	x1, x22
-	mov	w2, 681
+	mov	w2, 814
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L684:
+.L695:
 	add	x1, x19, :lo12:.LANCHOR0
 	add	x0, x1, x25, lsl 6
-	ldrb	w0, [x0,845]
+	ldrb	w0, [x0,861]
 	cmp	w0, 3
-	beq	.L685
-	ldrb	w0, [x1,3281]
+	beq	.L696
+	ldrb	w0, [x1,3553]
 	cmp	w0, 3
-	bne	.L685
-	ldrb	w0, [x1,3296]
-	cbnz	w0, .L685
-	ldrb	w0, [x1,3282]
-	cbz	w0, .L686
-	ldrb	w0, [x1,3283]
-	cbnz	w0, .L685
-.L686:
+	bne	.L696
+	ldrb	w0, [x1,3568]
+	cbnz	w0, .L696
+	ldrb	w0, [x1,756]
+	cbnz	w0, .L696
+	ldrb	w0, [x1,3554]
+	cbz	w0, .L697
+	ldrb	w0, [x1,3555]
+	cbnz	w0, .L696
+.L697:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
-	add	x19, x19, 784
-	ldr	x2, [x19,2504]
-	b	.L687
-.L685:
+	add	x19, x19, 800
+	ldr	x2, [x19,2760]
+	b	.L698
+.L696:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w25, 0
 	mov	w26, -1
-	add	x27, x19, 784
-	strh	w23, [x19,3212]
-.L688:
+	add	x27, x19, 800
+	strh	w24, [x19,3484]
+.L699:
 	cmp	w20, w25, uxth
-	bls	.L679
-	add	w1, w25, w23
-	ldr	x2, [x19,3288]
+	bls	.L690
+	add	w1, w25, w24
+	ldr	x2, [x19,3560]
 	add	w25, w25, 1
 	ldrb	w0, [x2,x1]
 	strb	w26, [x2,x1]
 	sbfiz	x0, x0, 6, 32
 	add	x0, x27, x0
 	strb	wzr, [x0,61]
-	bl	buf_free
-	ldrb	w0, [x19,2903]
+	bl	zbuf_free
+	ldrb	w0, [x19,2919]
 	sub	w0, w0, #1
-	strb	w0, [x19,2903]
-	b	.L688
-.L687:
+	strb	w0, [x19,2919]
+	b	.L699
+.L698:
 	cmp	w20, w0, uxth
-	bls	.L679
-	add	w1, w0, w23
+	bls	.L690
+	add	w1, w0, w24
 	add	w0, w0, 1
 	ldrb	w1, [x2,x1]
 	add	x1, x19, x1, lsl 6
 	strb	wzr, [x1,61]
-	b	.L687
-.L709:
+	b	.L698
+.L719:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -4575,50 +4794,50 @@ gc_get_src_blk:
 	adrp	x3, .LANCHOR0
 	add	x0, x3, :lo12:.LANCHOR0
 	ldr	x1, [x0,608]
-	ldrb	w0, [x0,3297]
+	ldrb	w0, [x0,3569]
 	ldrh	w4, [x1,124]
-	cbz	w4, .L711
+	cbz	w4, .L721
 	add	x1, x1, 392
 	mov	w2, 1
-	b	.L712
-.L711:
+	b	.L722
+.L721:
 	sxtw	x2, w0
 	add	x0, x1, x2, lsl 1
 	ldrh	w5, [x0,120]
 	mov	w0, 65535
-	cbz	w5, .L713
+	cbz	w5, .L723
 	add	x1, x1, x2, lsl 7
 	mov	w2, w4
 	add	x1, x1, 136
-.L712:
+.L722:
 	add	x4, x1, 128
 	mov	w5, 65535
-.L716:
+.L726:
 	ldrh	w0, [x1]
 	cmp	w0, w5
-	beq	.L714
+	beq	.L724
 	mov	w4, -1
 	strh	w4, [x1]
 	add	x3, x3, :lo12:.LANCHOR0
-	cbz	w2, .L715
+	cbz	w2, .L725
 	ldr	x2, [x3,608]
 	ldrh	w1, [x2,124]
 	sub	w1, w1, #1
 	strh	w1, [x2,124]
-	b	.L713
-.L715:
-	ldrb	w1, [x3,3297]
+	b	.L723
+.L725:
+	ldrb	w1, [x3,3569]
 	ldr	x2, [x3,608]
 	add	x1, x2, x1, lsl 1
 	ldrh	w2, [x1,120]
 	sub	w2, w2, #1
 	strh	w2, [x1,120]
-	b	.L713
-.L714:
+	b	.L723
+.L724:
 	add	x1, x1, 2
 	cmp	x1, x4
-	bne	.L716
-.L713:
+	bne	.L726
+.L723:
 	ret
 	.size	gc_get_src_blk, .-gc_get_src_blk
 	.align	2
@@ -4632,59 +4851,59 @@ gc_free_temp_buf:
 	adrp	x19, .LANCHOR0
 	str	x21, [sp,32]
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrb	w3, [x2,2903]
-	cbz	w3, .L721
-	ldrb	w3, [x2,2834]
+	ldrb	w3, [x2,2919]
+	cbz	w3, .L731
+	ldrb	w3, [x2,2850]
 	cmp	w3, 1
-	bhi	.L721
-	ldrh	w4, [x2,3298]
+	bhi	.L731
+	ldrh	w4, [x2,3570]
 	mov	x20, x2
-	ldrb	w0, [x2,3300]
-	add	x2, x2, 784
-	ldrh	w1, [x2,2428]
+	ldrb	w0, [x2,3572]
+	add	x2, x2, 800
+	ldrh	w1, [x2,2684]
 	mul	w0, w4, w0
 	add	w3, w1, 24
-	ldr	x4, [x2,2504]
+	ldr	x4, [x2,2760]
 	cmp	w0, w3
 	csel	w3, w0, w3, ls
-.L722:
+.L732:
 	cmp	w1, w3
-	bcs	.L735
+	bcs	.L745
 	uxtw	x21, w1
 	ldrb	w0, [x4,x21]
 	cmp	w0, 255
-	beq	.L723
+	beq	.L733
 	sbfiz	x0, x0, 6, 32
 	add	x0, x2, x0
 	ldrb	w5, [x0,61]
-	cbnz	w5, .L723
+	cbnz	w5, .L733
 	str	x1, [x29,56]
-	bl	buf_free
+	bl	zbuf_free
 	adrp	x0, .LANCHOR2
 	ldr	x1, [x29,56]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L724
-	ldr	x2, [x20,3288]
-	adrp	x0, .LC92
-	add	x0, x0, :lo12:.LC92
+	tbz	x0, 8, .L734
+	ldr	x2, [x20,3560]
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
 	ldrb	w2, [x2,x21]
 	bl	printk
-.L724:
+.L734:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, -1
-	ldr	x0, [x19,3288]
+	ldr	x0, [x19,3560]
 	strb	w1, [x0,x21]
-	ldrb	w0, [x19,2903]
+	ldrb	w0, [x19,2919]
 	sub	w0, w0, #1
-	strb	w0, [x19,2903]
+	strb	w0, [x19,2919]
 	mov	w0, 1
-	b	.L721
-.L723:
+	b	.L731
+.L733:
 	add	w1, w1, 1
-	b	.L722
-.L735:
+	b	.L732
+.L745:
 	mov	w0, 0
-.L721:
+.L731:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 64
@@ -4695,17 +4914,17 @@ gc_free_temp_buf:
 	.type	print_gc_debug_info, %function
 print_gc_debug_info:
 	adrp	x6, .LANCHOR0
-	adrp	x0, .LC93
+	adrp	x0, .LC95
 	add	x6, x6, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC93
+	add	x0, x0, :lo12:.LC95
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldrh	w1, [x6,2896]
-	ldrh	w2, [x6,2898]
-	ldrh	w3, [x6,3210]
-	ldrb	w4, [x6,2834]
-	ldrb	w5, [x6,2903]
-	ldrh	w6, [x6,2872]
+	ldrh	w1, [x6,2912]
+	ldrh	w2, [x6,2914]
+	ldrh	w3, [x6,3482]
+	ldrb	w4, [x6,2850]
+	ldrb	w5, [x6,2919]
+	ldrh	w6, [x6,2888]
 	bl	printk
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4719,23 +4938,23 @@ zftl_get_gc_node:
 	uxth	w2, w0
 	cmp	w1, 5
 	add	x29, sp, 0
-	bne	.L738
-	adrp	x0, .LANCHOR0+3304
-	ldr	x0, [x0,#:lo12:.LANCHOR0+3304]
-	b	.L741
-.L738:
+	bne	.L748
+	adrp	x0, .LANCHOR0+3576
+	ldr	x0, [x0,#:lo12:.LANCHOR0+3576]
+	b	.L751
+.L748:
 	cmp	w1, 2
-	bne	.L740
+	bne	.L750
 	mov	w0, w2
 	bl	zftl_get_gc_node.part.12
-	b	.L742
-.L740:
-	adrp	x0, .LANCHOR0+3312
-	ldr	x0, [x0,#:lo12:.LANCHOR0+3312]
-.L741:
+	b	.L752
+.L750:
+	adrp	x0, .LANCHOR0+3584
+	ldr	x0, [x0,#:lo12:.LANCHOR0+3584]
+.L751:
 	mov	w1, w2
 	bl	_list_get_gc_head_node.isra.5
-.L742:
+.L752:
 	uxth	w0, w0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4759,23 +4978,23 @@ gc_search_src_blk:
 	ldr	x1, [x0,608]
 	add	x1, x1, x21, sxtw 1
 	ldrh	w19, [x1,120]
-	cbnz	w19, .L790
-	cbnz	w21, .L746
-	adrp	x26, .LC94
-	strh	w21, [x0,3320]
+	cbnz	w19, .L800
+	cbnz	w21, .L756
+	adrp	x26, .LC96
+	strh	w21, [x0,3592]
 	mov	w19, w21
 	mov	w25, w21
 	uxth	w23, w22
 	mov	w27, 65535
 	adrp	x28, .LANCHOR2
-	add	x26, x26, :lo12:.LC94
-.L747:
+	add	x26, x26, :lo12:.LC96
+.L757:
 	cmp	w25, w23
-	bcs	.L752
+	bcs	.L762
 	add	x3, x20, :lo12:.LANCHOR0
 	mov	w1, 3
 	str	x3, [x29,96]
-	ldrh	w2, [x3,3320]
+	ldrh	w2, [x3,3592]
 	str	x2, [x29,104]
 	mov	w0, w2
 	bl	zftl_get_gc_node
@@ -4786,11 +5005,11 @@ gc_search_src_blk:
 	mov	w4, w1
 	add	w2, w2, 1
 	uxth	w2, w2
-	strh	w2, [x3,3320]
-	beq	.L748
+	strh	w2, [x3,3592]
+	beq	.L758
 	ldr	w0, [x28,#:lo12:.LANCHOR2]
 	uxtw	x5, w1
-	tbz	x0, 8, .L749
+	tbz	x0, 8, .L759
 	ldr	x3, [x3,600]
 	mov	x0, x26
 	str	x4, [x29,96]
@@ -4799,232 +5018,232 @@ gc_search_src_blk:
 	bl	printk
 	ldr	x4, [x29,96]
 	ldr	x5, [x29,104]
-.L749:
+.L759:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	x0, [x1,600]
 	ldrh	w2, [x0,x5,lsl 1]
-	ldrh	w0, [x1,2878]
+	ldrh	w0, [x1,2894]
 	cmp	w2, w0
-	bcs	.L750
+	bcs	.L760
 	mov	w1, 0
 	mov	w0, w4
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L751
+	cbz	w0, .L761
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bls	.L751
-	b	.L752
-.L750:
-	strh	wzr, [x1,3320]
-	b	.L752
-.L748:
-	strh	wzr, [x3,3320]
-	b	.L752
-.L751:
+	bls	.L761
+	b	.L762
+.L760:
+	strh	wzr, [x1,3592]
+	b	.L762
+.L758:
+	strh	wzr, [x3,3592]
+	b	.L762
+.L761:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L747
-.L752:
-	tbz	x24, 1, .L754
+	b	.L757
+.L762:
+	tbz	x24, 1, .L764
 	mov	w26, 0
 	mov	w27, 65535
-.L755:
+.L765:
 	cmp	w26, w23
-	beq	.L759
+	beq	.L769
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w1, 5
-	ldrh	w28, [x25,3322]
+	ldrh	w28, [x25,3594]
 	mov	w0, w28
 	add	w28, w28, 1
 	bl	zftl_get_gc_node
 	uxth	w1, w0
-	strh	w28, [x25,3322]
+	strh	w28, [x25,3594]
 	cmp	w1, w27
-	beq	.L756
+	beq	.L766
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x25,600]
 	ldrh	w2, [x2,x1]
-	ldrh	w1, [x25,2880]
+	ldrh	w1, [x25,2896]
 	cmp	w2, w1
-	bcs	.L756
+	bcs	.L766
 	mov	w1, 0
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L758
+	cbz	w0, .L768
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bls	.L758
-	b	.L761
-.L756:
-	strh	wzr, [x25,3322]
-	b	.L759
-.L758:
+	bls	.L768
+	b	.L771
+.L766:
+	strh	wzr, [x25,3594]
+	b	.L769
+.L768:
 	add	w26, w26, 1
 	uxth	w26, w26
-	b	.L755
-.L759:
+	b	.L765
+.L769:
 	cmp	w19, w23
-	bcs	.L761
+	bcs	.L771
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3298]
-	ldrb	w4, [x0,3300]
-	ldrh	w2, [x0,3324]
-	ldrh	w3, [x0,2880]
+	ldrh	w1, [x0,3570]
+	ldrb	w4, [x0,3572]
+	ldrh	w2, [x0,3596]
+	ldrh	w3, [x0,2896]
 	mul	w1, w1, w4
 	sub	w1, w1, w2, lsr 2
 	cmp	w3, w1
-	bge	.L754
+	bge	.L764
 	add	w2, w3, w2, lsr 3
-	strh	w2, [x0,2880]
-	b	.L754
-.L761:
+	strh	w2, [x0,2896]
+	b	.L764
+.L771:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,2880]
-	ldrh	w0, [x1,3324]
+	ldrh	w2, [x1,2896]
+	ldrh	w0, [x1,3596]
 	cmp	w2, w0
-	bls	.L754
+	bls	.L764
 	sub	w0, w2, w0, lsr 3
-	strh	w0, [x1,2880]
-.L754:
-	tbz	x24, 0, .L762
+	strh	w0, [x1,2896]
+.L764:
+	tbz	x24, 0, .L772
 	cmp	w19, w23
-	bcs	.L762
+	bcs	.L772
 	mov	w25, 0
 	mov	w27, 65535
-.L763:
+.L773:
 	cmp	w25, w23
-	beq	.L766
+	beq	.L776
 	add	x28, x20, :lo12:.LANCHOR0
-	ldrh	w26, [x28,3326]
+	ldrh	w26, [x28,3598]
 	mov	w0, w26
 	add	w26, w26, 1
 	bl	zftl_get_gc_node.part.12
-	strh	w26, [x28,3326]
+	strh	w26, [x28,3598]
 	cmp	w27, w0, uxth
-	beq	.L764
+	beq	.L774
 	mov	w1, 0
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L765
+	cbz	w0, .L775
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bcc	.L765
-	b	.L768
-.L764:
-	strh	wzr, [x28,3326]
-	b	.L766
-.L765:
+	bcc	.L775
+	b	.L778
+.L774:
+	strh	wzr, [x28,3598]
+	b	.L776
+.L775:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L763
-.L766:
+	b	.L773
+.L776:
 	cmp	w19, w23
-	bcs	.L768
+	bcs	.L778
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x20,2878]
-	ldrh	w0, [x20,3324]
+	ldrh	w1, [x20,2894]
+	ldrh	w0, [x20,3596]
 	cmp	w1, w0
-	bcs	.L762
+	bcs	.L772
 	add	w0, w1, w0, lsr 3
-	b	.L843
-.L768:
+	b	.L853
+.L778:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x20,3324]
-	ldrh	w1, [x20,2878]
+	ldrh	w0, [x20,3596]
+	ldrh	w1, [x20,2894]
 	cmp	w1, w0, lsr 1
-	bls	.L762
+	bls	.L772
 	sub	w0, w1, w0, lsr 3
-.L843:
-	strh	w0, [x20,2878]
-	b	.L762
-.L746:
+.L853:
+	strh	w0, [x20,2894]
+	b	.L772
+.L756:
 	and	w1, w24, 1
-	strh	w19, [x0,3214]
-	strh	w19, [x0,3328]
+	strh	w19, [x0,3486]
+	strh	w19, [x0,3600]
 	str	w1, [x29,104]
-	tbz	x24, 0, .L769
-	ldrh	w2, [x0,3330]
-	ldrh	w1, [x0,2852]
+	tbz	x24, 0, .L779
+	ldrh	w2, [x0,3602]
+	ldrh	w1, [x0,2868]
 	cmp	w1, w2, lsr 2
-	bcc	.L770
-	ldrh	w0, [x0,2850]
+	bcc	.L780
+	ldrh	w0, [x0,2866]
 	cmp	w0, w1
-	bls	.L771
-.L770:
+	bls	.L781
+.L780:
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-	ldrh	w0, [x23,2850]
+	ldrh	w0, [x23,2866]
 	lsr	w0, w0, 2
-	strh	w0, [x23,3326]
+	strh	w0, [x23,3598]
 	mov	w0, 0
 	bl	zftl_get_gc_node.part.12
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L772
+	beq	.L782
 	ubfiz	x1, x1, 1, 16
 	ldr	x3, [x23,600]
-	ldrh	w2, [x23,3324]
+	ldrh	w2, [x23,3596]
 	ldrh	w1, [x3,x1]
 	cmp	w1, w2, lsr 2
-	bcs	.L772
+	bcs	.L782
 	mov	w1, w19
 	mov	w2, w21
-	strh	w19, [x23,3326]
+	strh	w19, [x23,3598]
 	bl	gc_add_sblk
 	cmp	w0, w19
 	cset	w19, ne
-.L772:
+.L782:
 	mov	w23, 64
 	mov	w26, 65535
 	uxth	w27, w22
-.L774:
+.L784:
 	add	x25, x20, :lo12:.LANCHOR0
-	ldrh	w28, [x25,3326]
+	ldrh	w28, [x25,3598]
 	mov	w0, w28
 	add	w28, w28, 1
 	bl	zftl_get_gc_node.part.12
-	strh	w28, [x25,3326]
+	strh	w28, [x25,3598]
 	cmp	w26, w0, uxth
-	beq	.L771
+	beq	.L781
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L773
+	cbz	w0, .L783
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w27
-	bcs	.L771
-.L773:
+	bcs	.L781
+.L783:
 	sub	w23, w23, #1
 	uxth	w23, w23
-	cbnz	w23, .L774
-.L771:
+	cbnz	w23, .L784
+.L781:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x0,3330]
-	ldrh	w1, [x0,2852]
+	ldrh	w2, [x0,3602]
+	ldrh	w1, [x0,2868]
 	cmp	w1, w2, lsr 3
-	bhi	.L791
-	ldrh	w0, [x0,2850]
+	bhi	.L801
+	ldrh	w0, [x0,2866]
 	add	w0, w0, 8
 	cmp	w1, w0
-	bgt	.L791
-.L769:
-	tbz	x24, 1, .L777
+	bgt	.L801
+.L779:
+	tbz	x24, 1, .L787
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w25, 64
 	mov	w26, 0
 	mov	w27, 65535
 	uxth	w28, w22
-	strh	wzr, [x0,3322]
-.L782:
+	strh	wzr, [x0,3594]
+.L792:
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w1, 5
-	ldrh	w2, [x23,3322]
+	ldrh	w2, [x23,3594]
 	str	x2, [x29,96]
 	mov	w0, w2
 	bl	zftl_get_gc_node
@@ -5032,152 +5251,152 @@ gc_search_src_blk:
 	ldr	x2, [x29,96]
 	cmp	w1, w27
 	add	w2, w2, 1
-	strh	w2, [x23,3322]
-	beq	.L778
+	strh	w2, [x23,3594]
+	beq	.L788
 	cmp	w22, 1
-	bne	.L779
-	ldrh	w3, [x23,3298]
-	ldrb	w2, [x23,3300]
+	bne	.L789
+	ldrh	w3, [x23,3570]
+	ldrb	w2, [x23,3572]
 	mul	w2, w2, w3
-	ldrh	w3, [x23,3324]
+	ldrh	w3, [x23,3596]
 	sub	w2, w2, w3, lsr 3
-	strh	w2, [x23,2874]
-.L779:
+	strh	w2, [x23,2890]
+.L789:
 	add	x2, x20, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x3, [x2,600]
 	ldrh	w3, [x3,x1]
-	ldrh	w1, [x2,2874]
+	ldrh	w1, [x2,2890]
 	cmp	w3, w1
-	bcs	.L780
+	bcs	.L790
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L781
+	cbz	w0, .L791
 	add	w19, w19, 1
 	add	w26, w26, 1
 	uxth	w19, w19
 	uxth	w26, w26
 	cmp	w19, w28
-	bcc	.L781
-	b	.L778
-.L780:
-	strh	wzr, [x2,3322]
-	b	.L778
-.L781:
+	bcc	.L791
+	b	.L788
+.L790:
+	strh	wzr, [x2,3594]
+	b	.L788
+.L791:
 	sub	w0, w25, #1
 	uxth	w25, w0
-	cbnz	w25, .L782
-.L778:
+	cbnz	w25, .L792
+.L788:
 	cmp	w19, w22
-	bcc	.L783
-	cbnz	w26, .L784
+	bcc	.L793
+	cbnz	w26, .L794
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2854]
-	ldrh	w0, [x0,3332]
+	ldrh	w1, [x0,2870]
+	ldrh	w0, [x0,3604]
 	cmp	w1, w0
-	bls	.L784
-.L783:
+	bls	.L794
+.L793:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3298]
-	ldrb	w4, [x0,3300]
-	ldrh	w3, [x0,3324]
-	ldrh	w2, [x0,2874]
+	ldrh	w1, [x0,3570]
+	ldrb	w4, [x0,3572]
+	ldrh	w3, [x0,3596]
+	ldrh	w2, [x0,2890]
 	mul	w1, w1, w4
 	lsr	w3, w3, 3
 	sub	w1, w1, w3
 	cmp	w2, w1
-	bge	.L777
+	bge	.L787
 	add	w2, w3, w2
-	strh	w2, [x0,2874]
-	b	.L777
-.L784:
+	strh	w2, [x0,2890]
+	b	.L787
+.L794:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3324]
-	ldrb	w2, [x0,3300]
-	ldrh	w3, [x0,2874]
+	ldrh	w1, [x0,3596]
+	ldrb	w2, [x0,3572]
+	ldrh	w3, [x0,2890]
 	mul	w2, w1, w2
 	cmp	w3, w2
-	ble	.L777
+	ble	.L787
 	sub	w1, w3, w1, lsr 3
-	strh	w1, [x0,2874]
-.L777:
+	strh	w1, [x0,2890]
+.L787:
 	ldr	w0, [x29,104]
-	cbz	w0, .L762
+	cbz	w0, .L772
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w25, 64
 	mov	w26, 65535
 	uxth	w27, w22
-	strh	wzr, [x0,3320]
-.L788:
+	strh	wzr, [x0,3592]
+.L798:
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w1, 3
-	ldrh	w28, [x23,3320]
+	ldrh	w28, [x23,3592]
 	mov	w0, w28
 	add	w28, w28, 1
 	bl	zftl_get_gc_node
 	uxth	w1, w0
-	strh	w28, [x23,3320]
+	strh	w28, [x23,3592]
 	cmp	w1, w26
-	beq	.L785
+	beq	.L795
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x23,600]
 	ldrh	w1, [x2,x1]
 	cmp	w1, 2
-	bls	.L786
-	ldrh	w2, [x23,2876]
+	bls	.L796
+	ldrh	w2, [x23,2892]
 	cmp	w2, w1
-	bls	.L786
-	ldrh	w2, [x23,3330]
-	ldrh	w1, [x23,2852]
+	bls	.L796
+	ldrh	w2, [x23,3602]
+	ldrh	w1, [x23,2868]
 	cmp	w1, w2, lsr 1
-	bls	.L785
-.L786:
+	bls	.L795
+.L796:
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L787
+	cbz	w0, .L797
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w27
-	bcs	.L785
-.L787:
+	bcs	.L795
+.L797:
 	sub	w25, w25, #1
 	uxth	w25, w25
-	cbnz	w25, .L788
-.L785:
+	cbnz	w25, .L798
+.L795:
 	cmp	w19, w22
 	add	x20, x20, :lo12:.LANCHOR0
-	bcs	.L789
-	ldrh	w0, [x20,3324]
-	ldrh	w1, [x20,2876]
+	bcs	.L799
+	ldrh	w0, [x20,3596]
+	ldrh	w1, [x20,2892]
 	cmp	w1, w0, lsr 1
-	bls	.L762
+	bls	.L772
 	sub	w0, w1, w0, lsr 3
-	strh	w0, [x20,2876]
-	b	.L762
-.L789:
-	ldrh	w1, [x20,3324]
-	ldrb	w0, [x20,3300]
-	ldrh	w2, [x20,2876]
+	strh	w0, [x20,2892]
+	b	.L772
+.L799:
+	ldrh	w1, [x20,3596]
+	ldrb	w0, [x20,3572]
+	ldrh	w2, [x20,2892]
 	mul	w0, w1, w0
 	sub	w0, w0, #32
 	cmp	w2, w0
-	bge	.L762
+	bge	.L772
 	add	w1, w2, w1, lsr 3
-	strh	w1, [x20,2876]
-.L762:
+	strh	w1, [x20,2892]
+.L772:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L790
-	adrp	x0, .LC95
+	tbz	x0, 8, .L800
+	adrp	x0, .LC97
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC95
+	add	x0, x0, :lo12:.LC97
 	mov	w2, w24
 	mov	w3, w19
 	mov	w4, w22
 	bl	printk
-.L790:
+.L800:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5186,35 +5405,35 @@ gc_search_src_blk:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L791:
+.L801:
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w23, 64
 	mov	w26, 65535
 	uxth	w27, w22
-	strh	wzr, [x0,3320]
-.L776:
+	strh	wzr, [x0,3592]
+.L786:
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w1, 3
-	ldrh	w28, [x25,3320]
+	ldrh	w28, [x25,3592]
 	mov	w0, w28
 	add	w28, w28, 1
 	bl	zftl_get_gc_node
-	strh	w28, [x25,3320]
+	strh	w28, [x25,3592]
 	cmp	w26, w0, uxth
-	beq	.L769
+	beq	.L779
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L775
+	cbz	w0, .L785
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w27
-	bcs	.L769
-.L775:
+	bcs	.L779
+.L785:
 	sub	w23, w23, #1
 	uxth	w23, w23
-	cbnz	w23, .L776
-	b	.L769
+	cbnz	w23, .L786
+	b	.L779
 	.size	gc_search_src_blk, .-gc_search_src_blk
 	.align	2
 	.global	zftl_insert_free_list
@@ -5229,20 +5448,20 @@ zftl_insert_free_list:
 	add	x0, x0, x1, uxth 2
 	ldrb	w0, [x0,2]
 	ands	w0, w0, 24
-	bne	.L845
-	add	x0, x2, 3336
-	add	x2, x2, 2844
-	b	.L848
-.L845:
+	bne	.L855
+	add	x0, x2, 3608
+	add	x2, x2, 2860
+	b	.L858
+.L855:
 	cmp	w0, 16
-	bne	.L847
-	add	x0, x2, 3344
-	add	x2, x2, 2846
-	b	.L848
-.L847:
-	add	x0, x2, 3352
-	add	x2, x2, 2848
-.L848:
+	bne	.L857
+	add	x0, x2, 3616
+	add	x2, x2, 2862
+	b	.L858
+.L857:
+	add	x0, x2, 3624
+	add	x2, x2, 2864
+.L858:
 	bl	_insert_free_list
 	ldp	x29, x30, [sp], 16
 	ret
@@ -5261,24 +5480,24 @@ zftl_insert_data_list:
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L850
+	bne	.L860
 	add	x0, x2, 616
-	add	x2, x2, 2850
-	b	.L853
-.L850:
+	add	x2, x2, 2866
+	b	.L863
+.L860:
 	cmp	w3, 96
-	bne	.L852
-	add	x0, x2, 3312
-	add	x2, x2, 2852
-	b	.L853
-.L852:
+	bne	.L862
+	add	x0, x2, 3584
+	add	x2, x2, 2868
+	b	.L863
+.L862:
 	cmp	w3, 160
-	bne	.L849
-	add	x0, x2, 3304
-	add	x2, x2, 2854
-.L853:
+	bne	.L859
+	add	x0, x2, 3576
+	add	x2, x2, 2870
+.L863:
 	bl	_insert_data_list
-.L849:
+.L859:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_insert_data_list, .-zftl_insert_data_list
@@ -5297,64 +5516,64 @@ zftl_gc_get_free_sblk:
 	uxth	w22, w1
 	ldr	x0, [x23,608]
 	ldrh	w19, [x0,588]
-	cbnz	w21, .L855
+	cbnz	w21, .L865
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L855
-	adrp	x0, .LC96
+	beq	.L865
+	adrp	x0, .LC98
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC96
+	add	x0, x0, :lo12:.LC98
 	bl	printk
 	ldr	x0, [x23,608]
 	mov	w1, -1
 	strh	w1, [x0,588]
-	b	.L856
-.L855:
+	b	.L866
+.L865:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w3, [x0,2846]
-	ldrh	w1, [x0,2848]
+	ldrh	w3, [x0,2862]
+	ldrh	w1, [x0,2864]
 	cmp	w3, w1
-	bls	.L857
+	bls	.L867
 	mov	w1, 0
 	mov	x2, x0
 	lsr	w3, w3, 3
 	cmp	w21, w1
 	csel	w1, w3, w1, ne
-	add	x0, x0, 3344
-	add	x2, x2, 2846
-	b	.L875
-.L857:
+	add	x0, x0, 3616
+	add	x2, x2, 2862
+	b	.L885
+.L867:
 	lsr	w1, w1, 2
-	cbz	w21, .L861
+	cbz	w21, .L871
 	mov	w1, 7
 	mul	w3, w3, w1
 	mov	w1, 8
 	sdiv	w3, w3, w1
 	uxth	w1, w3
-.L861:
+.L871:
 	add	x2, x20, :lo12:.LANCHOR0
-	add	x0, x2, 3352
-	add	x2, x2, 2848
-.L875:
+	add	x0, x2, 3624
+	add	x2, x2, 2864
+.L885:
 	bl	_list_pop_index_node
 	uxth	w19, w0
 	mov	w0, 65535
 	cmp	w19, w0
-	bne	.L862
+	bne	.L872
 	add	x5, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC97
-	add	x0, x0, :lo12:.LC97
+	adrp	x0, .LC99
+	add	x0, x0, :lo12:.LC99
 	mov	w1, w19
 	mov	w2, w22
-	ldr	x3, [x5,3336]
-	ldrh	w4, [x5,2844]
-	ldrh	w5, [x5,2848]
+	ldr	x3, [x5,3608]
+	ldrh	w4, [x5,2860]
+	ldrh	w5, [x5,2864]
 	bl	printk
-.L862:
-	cbz	w21, .L856
+.L872:
+	cbz	w21, .L866
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L856
+	tbz	x0, 8, .L866
 	add	x20, x20, :lo12:.LANCHOR0
 	uxtw	x6, w19
 	lsl	x0, x6, 2
@@ -5363,9 +5582,9 @@ zftl_gc_get_free_sblk:
 	add	x2, x1, x0
 	ldr	w4, [x1,x0]
 	ldrh	w5, [x1,x0]
-	adrp	x0, .LC98
+	adrp	x0, .LC100
 	ldrb	w3, [x2,2]
-	add	x0, x0, :lo12:.LC98
+	add	x0, x0, :lo12:.LC100
 	ldrh	w6, [x7,x6,lsl 1]
 	mov	w1, w19
 	ubfx	x2, x3, 5, 3
@@ -5373,7 +5592,7 @@ zftl_gc_get_free_sblk:
 	ubfx	x3, x3, 3, 2
 	and	w5, w5, 2047
 	bl	printk
-.L856:
+.L866:
 	mov	w0, w19
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -5393,89 +5612,89 @@ zftl_get_free_sblk:
 	stp	x19, x20, [sp,16]
 	cmp	w21, 5
 	adrp	x19, .LANCHOR0
-	bne	.L877
+	bne	.L887
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,2846]
-	ldrh	w1, [x0,2848]
+	ldrh	w2, [x0,2862]
+	ldrh	w1, [x0,2864]
 	cmp	w2, w1
-	bcc	.L878
-	ldrh	w0, [x0,2844]
+	bcc	.L888
+	ldrh	w0, [x0,2860]
 	cmp	w0, w2
-	bls	.L879
-	cbz	w1, .L879
-.L878:
+	bls	.L889
+	cbz	w1, .L889
+.L888:
 	add	x2, x19, :lo12:.LANCHOR0
 	lsr	w1, w1, 1
-	add	x0, x2, 3352
-	b	.L907
-.L879:
+	add	x0, x2, 3624
+	b	.L917
+.L889:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	add	x0, x2, 3344
-	add	x2, x2, 2846
-	b	.L906
-.L877:
+	add	x0, x2, 3616
+	add	x2, x2, 2862
+	b	.L916
+.L887:
 	add	x22, x19, :lo12:.LANCHOR0
 	cmp	w21, 1
 	ldr	x0, [x22,608]
 	ldrh	w20, [x0,590]
-	beq	.L881
+	beq	.L891
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L881
-	adrp	x0, .LC99
+	beq	.L891
+	adrp	x0, .LC101
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC99
+	add	x0, x0, :lo12:.LC101
 	bl	printk
 	ldr	x0, [x22,608]
 	mov	w1, -1
 	strh	w1, [x0,590]
-	b	.L882
-.L881:
+	b	.L892
+.L891:
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x2,2844]
-	ldrh	w1, [x2,2848]
+	ldrh	w0, [x2,2860]
+	ldrh	w1, [x2,2864]
 	cmp	w0, w1
-	bcc	.L883
-	ldrh	w2, [x2,2846]
+	bcc	.L893
+	ldrh	w2, [x2,2862]
 	cmp	w2, w0
-	bls	.L884
-	cbz	w1, .L884
-.L883:
+	bls	.L894
+	cbz	w1, .L894
+.L893:
 	lsr	w1, w1, 1
 	cmp	w21, 1
 	csel	w3, w1, w3, eq
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x0, x2, 3352
+	add	x0, x2, 3624
 	mov	w1, w3
-.L907:
-	add	x2, x2, 2848
-	b	.L906
-.L884:
+.L917:
+	add	x2, x2, 2864
+	b	.L916
+.L894:
 	lsr	w0, w0, 1
 	cmp	w21, 1
 	csel	w3, w0, w3, eq
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x0, x2, 3336
+	add	x0, x2, 3608
 	mov	w1, w3
-	add	x2, x2, 2844
-.L906:
+	add	x2, x2, 2860
+.L916:
 	bl	_list_pop_index_node
 	uxth	w0, w0
 	mov	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L882
+	bne	.L892
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC97
-	add	x0, x0, :lo12:.LC97
+	adrp	x0, .LC99
+	add	x0, x0, :lo12:.LC99
 	mov	w1, w20
 	mov	w2, w21
-	ldr	x3, [x19,3336]
-	ldrh	w4, [x19,2844]
-	ldrh	w5, [x19,2848]
+	ldr	x3, [x19,3608]
+	ldrh	w4, [x19,2860]
+	ldrh	w5, [x19,2864]
 	bl	printk
-.L882:
+.L892:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5496,24 +5715,24 @@ zftl_remove_data_node:
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L909
+	bne	.L919
 	add	x0, x2, 616
-	add	x2, x2, 2850
-	b	.L912
-.L909:
+	add	x2, x2, 2866
+	b	.L922
+.L919:
 	cmp	w3, 96
-	bne	.L911
-	add	x0, x2, 3312
-	add	x2, x2, 2852
-	b	.L912
-.L911:
+	bne	.L921
+	add	x0, x2, 3584
+	add	x2, x2, 2868
+	b	.L922
+.L921:
 	cmp	w3, 160
-	bne	.L908
-	add	x0, x2, 3304
-	add	x2, x2, 2854
-.L912:
+	bne	.L918
+	add	x0, x2, 3576
+	add	x2, x2, 2870
+.L922:
 	bl	_list_remove_node
-.L908:
+.L918:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_remove_data_node, .-zftl_remove_data_node
@@ -5530,20 +5749,20 @@ zftl_remove_free_node:
 	add	x0, x0, x1, uxth 2
 	ldrb	w0, [x0,2]
 	ands	w0, w0, 24
-	bne	.L914
-	add	x0, x2, 3336
-	add	x2, x2, 2844
-	b	.L917
-.L914:
+	bne	.L924
+	add	x0, x2, 3608
+	add	x2, x2, 2860
+	b	.L927
+.L924:
 	cmp	w0, 16
-	bne	.L916
-	add	x0, x2, 3344
-	add	x2, x2, 2846
-	b	.L917
-.L916:
-	add	x0, x2, 3352
-	add	x2, x2, 2848
-.L917:
+	bne	.L926
+	add	x0, x2, 3616
+	add	x2, x2, 2862
+	b	.L927
+.L926:
+	add	x0, x2, 3624
+	add	x2, x2, 2864
+.L927:
 	bl	_list_remove_node
 	ldp	x29, x30, [sp], 16
 	ret
@@ -5562,24 +5781,24 @@ zftl_list_update_data_list:
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L919
+	bne	.L929
 	add	x0, x2, 616
-	add	x2, x2, 2850
-	b	.L922
-.L919:
+	add	x2, x2, 2866
+	b	.L932
+.L929:
 	cmp	w3, 96
-	bne	.L921
-	add	x0, x2, 3312
-	add	x2, x2, 2852
-	b	.L922
-.L921:
+	bne	.L931
+	add	x0, x2, 3584
+	add	x2, x2, 2868
+	b	.L932
+.L931:
 	cmp	w3, 160
-	bne	.L918
-	add	x0, x2, 3304
-	add	x2, x2, 2854
-.L922:
+	bne	.L928
+	add	x0, x2, 3576
+	add	x2, x2, 2870
+.L932:
 	bl	_list_update_data_list
-.L918:
+.L928:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_list_update_data_list, .-zftl_list_update_data_list
@@ -5592,25 +5811,25 @@ print_list_info:
 	add	x29, sp, 32
 	stp	x19, x20, [sp,48]
 	mov	x19, x0
-	adrp	x0, .LC100
+	adrp	x0, .LC102
 	stp	x21, x22, [sp,64]
 	stp	x23, x24, [sp,80]
 	stp	x25, x26, [sp,96]
-	add	x0, x0, :lo12:.LC100
+	add	x0, x0, :lo12:.LC102
 	ldrh	w2, [x1]
 	ldr	x1, [x19]
 	bl	printk
 	ldr	x19, [x19]
-	cbz	x19, .L923
+	cbz	x19, .L933
 	mov	x22, -6148914691236517206
-	adrp	x23, .LC101
+	adrp	x23, .LC103
 	mov	w20, 0
 	adrp	x25, .LANCHOR0
 	add	x22, x22, 1
-	add	x23, x23, :lo12:.LC101
+	add	x23, x23, :lo12:.LC103
 	mov	w26, 65535
 	mov	w24, 6
-.L926:
+.L936:
 	add	x21, x25, :lo12:.LANCHOR0
 	ldrh	w3, [x19]
 	ldrh	w4, [x19,2]
@@ -5641,16 +5860,16 @@ print_list_info:
 	bl	printk
 	ldrh	w19, [x19]
 	cmp	w19, w26
-	beq	.L923
+	beq	.L933
 	ldr	x0, [x21,528]
 	add	w20, w20, 1
 	umull	x19, w19, w24
 	uxth	w20, w20
 	add	x19, x0, x19
-	ldrh	w0, [x21,3360]
+	ldrh	w0, [x21,3632]
 	cmp	w0, w20
-	bcs	.L926
-.L923:
+	bcs	.L936
+.L933:
 	sub	sp, x29, #32
 	ldp	x19, x20, [sp,48]
 	ldp	x21, x22, [sp,64]
@@ -5669,23 +5888,23 @@ dump_all_list_info:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x19, 3336
-	add	x1, x19, 2844
+	add	x0, x19, 3608
+	add	x1, x19, 2860
 	bl	print_list_info
-	add	x0, x19, 3344
-	add	x1, x19, 2846
+	add	x0, x19, 3616
+	add	x1, x19, 2862
 	bl	print_list_info
-	add	x0, x19, 3352
-	add	x1, x19, 2848
+	add	x0, x19, 3624
+	add	x1, x19, 2864
 	bl	print_list_info
 	add	x0, x19, 616
-	add	x1, x19, 2850
+	add	x1, x19, 2866
 	bl	print_list_info
-	add	x0, x19, 3312
-	add	x1, x19, 2852
+	add	x0, x19, 3584
+	add	x1, x19, 2868
 	bl	print_list_info
-	add	x0, x19, 3304
-	add	x1, x19, 2854
+	add	x0, x19, 3576
+	add	x1, x19, 2870
 	bl	print_list_info
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -5695,48 +5914,48 @@ dump_all_list_info:
 	.global	ftl_tmp_into_update
 	.type	ftl_tmp_into_update, %function
 ftl_tmp_into_update:
-	adrp	x0, .LANCHOR0+2864
-	ldr	x0, [x0,#:lo12:.LANCHOR0+2864]
+	adrp	x0, .LANCHOR0+2880
+	ldr	x0, [x0,#:lo12:.LANCHOR0+2880]
 	ldr	w2, [x0,16]
 	cmp	w2, 2048
-	bls	.L929
+	bls	.L939
 	lsr	w1, w2, 11
 	ldr	w3, [x0,20]
 	add	w3, w3, w1
 	sub	w1, w2, w1, lsl 11
 	str	w3, [x0,20]
 	str	w1, [x0,16]
-.L929:
+.L939:
 	ldr	w2, [x0,24]
 	cmp	w2, 2048
-	bls	.L930
+	bls	.L940
 	lsr	w1, w2, 11
 	ldr	w3, [x0,28]
 	add	w3, w3, w1
 	sub	w1, w2, w1, lsl 11
 	str	w3, [x0,28]
 	str	w1, [x0,24]
-.L930:
+.L940:
 	ldr	w2, [x0,32]
 	cmp	w2, 1024
-	bls	.L931
+	bls	.L941
 	lsr	w1, w2, 10
 	ldr	w3, [x0,36]
 	add	w3, w3, w1
 	sub	w1, w2, w1, lsl 10
 	str	w3, [x0,36]
 	str	w1, [x0,32]
-.L931:
+.L941:
 	ldr	w2, [x0,40]
 	cmp	w2, 1024
-	bls	.L928
+	bls	.L938
 	lsr	w1, w2, 10
 	ldr	w3, [x0,44]
 	add	w3, w3, w1
 	sub	w1, w2, w1, lsl 10
 	str	w3, [x0,44]
 	str	w1, [x0,40]
-.L928:
+.L938:
 	ret
 	.size	ftl_tmp_into_update, .-ftl_tmp_into_update
 	.align	2
@@ -5746,52 +5965,54 @@ ftl_get_blk_list_in_sblk:
 	adrp	x7, .LANCHOR0
 	uxth	w0, w0
 	add	x2, x7, :lo12:.LANCHOR0
-	mov	w12, 21
+	mov	w12, 24
 	ldr	x2, [x2,584]
 	add	x2, x2, x0, uxth 2
 	ldrb	w11, [x2,3]
 	mov	w2, 0
 	mov	w6, w2
-.L934:
+.L944:
 	add	x8, x7, :lo12:.LANCHOR0
-	ldrb	w3, [x8,3300]
+	ldrb	w3, [x8,3572]
 	cmp	w6, w3
-	bge	.L940
+	bge	.L950
 	asr	w3, w11, w6
-	tbnz	x3, 0, .L935
-	ldrb	w5, [x8,3266]
+	tbnz	x3, 0, .L945
+	ldrb	w5, [x8,3538]
 	sbfiz	x10, x2, 1, 32
-	ldrh	w3, [x8,3264]
-	sdiv	w9, w6, w5
-	sub	w3, w12, w3
-	lsl	w3, w9, w3
+	ldrb	w9, [x8,744]
+	ldrh	w3, [x8,3536]
+	sdiv	w4, w6, w5
+	sub	w9, w12, w9
+	sub	w3, w9, w3
+	lsl	w3, w4, w3
 	madd	w3, w0, w5, w3
 	uxth	w4, w3
 	strh	w4, [x1,x10]
-	ldrb	w3, [x8,3266]
+	ldrb	w3, [x8,3538]
 	cmp	w3, 1
-	bls	.L936
+	bls	.L946
 	sub	w3, w3, #1
 	and	w3, w6, w3
 	add	w3, w4, w3
 	strh	w3, [x1,x10]
-.L936:
+.L946:
 	add	w2, w2, 1
-.L935:
+.L945:
 	add	w6, w6, 1
-	b	.L934
-.L940:
+	b	.L944
+.L950:
 	mov	w0, w2
 	mov	w4, -1
-.L938:
+.L948:
 	add	x3, x7, :lo12:.LANCHOR0
-	ldrb	w3, [x3,3300]
+	ldrb	w3, [x3,3572]
 	cmp	w2, w3
-	bge	.L941
+	bge	.L951
 	strh	w4, [x1,w2,sxtw 1]
 	add	w2, w2, 1
-	b	.L938
-.L941:
+	b	.L948
+.L951:
 	ret
 	.size	ftl_get_blk_list_in_sblk, .-ftl_get_blk_list_in_sblk
 	.align	2
@@ -5803,34 +6024,36 @@ ftl_erase_phy_blk:
 	uxth	w2, w0
 	add	x5, x3, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	mov	w0, 21
+	mov	w0, 24
 	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
-	mov	w4, 1
 	mov	w21, w1
-	ldrh	w19, [x5,3264]
 	mov	x20, x3
-	sub	w19, w0, w19
-	ldrb	w0, [x5,3282]
-	asr	w22, w2, w19
-	lsl	w19, w4, w19
+	ldrb	w4, [x5,744]
+	ldrh	w19, [x5,3536]
+	sub	w4, w0, w4
+	ldrb	w0, [x5,3554]
+	sub	w4, w4, w19
+	mov	w19, 1
+	lsl	w19, w19, w4
+	asr	w22, w2, w4
 	sub	w19, w19, #1
 	and	w19, w19, w2
 	sxth	w19, w19
-	cbz	w0, .L943
-	ldrb	w0, [x5,3283]
-	cbnz	w0, .L943
-	ldrh	w2, [x5,3362]
+	cbz	w0, .L953
+	ldrb	w0, [x5,3555]
+	cbnz	w0, .L953
+	ldrh	w2, [x5,3634]
 	cmp	w1, wzr
 	mov	w0, w22
 	cset	w1, eq
 	mul	w2, w19, w2
 	bl	flash_erase_block_en
-.L943:
+.L953:
 	add	x3, x20, :lo12:.LANCHOR0
 	mov	w1, w21
 	mov	w0, w22
-	ldrh	w2, [x3,3362]
+	ldrh	w2, [x3,3634]
 	mul	w2, w19, w2
 	bl	flash_erase_block_en
 	ldp	x19, x20, [sp,16]
@@ -5857,97 +6080,97 @@ ftl_erase_sblk:
 	mov	w19, 0
 	add	x0, x0, x20
 	ldrb	w25, [x0,3]
-.L948:
+.L958:
 	add	x2, x23, :lo12:.LANCHOR0
-	ldrb	w0, [x2,3364]
+	ldrb	w0, [x2,3636]
 	cmp	w19, w0
-	bge	.L959
-	ldrb	w3, [x2,3266]
+	bge	.L969
+	ldrb	w3, [x2,3538]
 	mov	w21, 0
-	ldrh	w2, [x2,3362]
+	ldrh	w2, [x2,3634]
 	mov	w1, w21
 	sub	w4, w3, #1
 	mul	w6, w19, w3
 	mul	w5, w24, w3
-.L960:
+.L970:
 	cmp	w1, w3
-	bge	.L973
+	bge	.L983
 	add	w0, w1, w6
 	asr	w0, w25, w0
-	tbnz	x0, 0, .L949
+	tbnz	x0, 0, .L959
 	and	w0, w1, w4
 	add	x7, x29, 80
 	add	w0, w5, w0
 	mul	w0, w0, w2
 	str	w0, [x7,w21,sxtw 2]
 	add	w21, w21, 1
-.L949:
+.L959:
 	add	w1, w1, 1
-	b	.L960
-.L973:
+	b	.L970
+.L983:
 	cmp	w3, 4
-	bne	.L972
+	bne	.L982
 	mov	x26, 0
-.L951:
+.L961:
 	cmp	w21, w26
-	ble	.L954
+	ble	.L964
 	add	x2, x29, 80
 	mov	w0, w19
 	mov	w1, w22
 	ldr	w2, [x2,x26,lsl 2]
 	add	x26, x26, 1
 	bl	flash_erase_block_en
-	b	.L951
-.L972:
+	b	.L961
+.L982:
 	cmp	w21, 2
-	bne	.L955
+	bne	.L965
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrb	w1, [x0,3282]
-	cbz	w1, .L956
-	ldrb	w0, [x0,3283]
-	cbnz	w0, .L956
+	ldrb	w1, [x0,3554]
+	cbz	w1, .L966
+	ldrb	w0, [x0,3555]
+	cbnz	w0, .L966
 	cmp	w22, wzr
 	ldr	w2, [x29,80]
 	ldr	w3, [x29,84]
 	mov	w0, w19
 	cset	w1, eq
 	bl	flash_erase_duplane_block
-.L956:
+.L966:
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	ldr	w3, [x29,84]
 	mov	w1, w22
 	bl	flash_erase_duplane_block
-	b	.L954
-.L955:
+	b	.L964
+.L965:
 	cmp	w21, 1
-	bne	.L954
+	bne	.L964
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrb	w1, [x0,3282]
-	cbz	w1, .L958
-	ldrb	w0, [x0,3283]
-	cbnz	w0, .L958
+	ldrb	w1, [x0,3554]
+	cbz	w1, .L968
+	ldrb	w0, [x0,3555]
+	cbnz	w0, .L968
 	cmp	w22, wzr
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	cset	w1, eq
 	bl	flash_erase_block_en
-.L958:
+.L968:
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	mov	w1, w22
 	bl	flash_erase_block_en
-.L954:
+.L964:
 	add	w19, w19, 1
-	b	.L948
-.L959:
-	cbnz	w22, .L961
+	b	.L958
+.L969:
+	cbnz	w22, .L971
 	ldr	x1, [x2,584]
 	ldrh	w0, [x1,x20]
 	add	w3, w0, 1
 	bfi	w0, w3, 0, 11
 	strh	w0, [x1,x20]
-	ldr	x0, [x2,2864]
+	ldr	x0, [x2,2880]
 	ldr	w1, [x0,84]
 	ldrh	w3, [x0,96]
 	add	w1, w1, 1
@@ -5957,17 +6180,17 @@ ftl_erase_sblk:
 	ubfx	x1, x1, 0, 11
 	uxth	w2, w1
 	cmp	w3, w2
-	bge	.L963
+	bge	.L973
 	strh	w1, [x0,96]
-	b	.L963
-.L961:
+	b	.L973
+.L971:
 	ldr	x3, [x2,584]
 	ldr	w0, [x3,x20]
 	ubfx	x1, x0, 11, 8
 	add	w1, w1, 1
 	bfi	w0, w1, 11, 8
 	str	w0, [x3,x20]
-	ldr	x0, [x2,2864]
+	ldr	x0, [x2,2880]
 	ldr	w1, [x0,80]
 	add	w1, w1, 1
 	str	w1, [x0,80]
@@ -5976,9 +6199,9 @@ ftl_erase_sblk:
 	ldr	w1, [x1,x20]
 	ubfx	x1, x1, 11, 8
 	cmp	w2, w1, uxtb
-	bcs	.L963
+	bcs	.L973
 	strh	w1, [x0,98]
-.L963:
+.L973:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5997,42 +6220,42 @@ ftl_alloc_sys_blk:
 	add	x1, x0, :lo12:.LANCHOR0
 	str	x19, [sp,16]
 	mov	x19, x0
-	ldr	x1, [x1,2864]
+	ldr	x1, [x1,2880]
 	ldrh	w2, [x1,136]
 	cmp	w2, 63
-	bls	.L975
+	bls	.L985
 	strh	wzr, [x1,136]
-.L975:
+.L985:
 	ldrh	w0, [x1,112]
-	cbnz	w0, .L976
+	cbnz	w0, .L986
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1130
+	mov	w2, 1140
 	add	x1, x1, 1352
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L976:
+.L986:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w4, 65535
-	ldr	x1, [x0,2864]
-.L980:
+	ldr	x1, [x0,2880]
+.L990:
 	ldrh	w2, [x1,136]
-.L977:
+.L987:
 	cmp	w2, 63
-	bgt	.L983
+	bgt	.L993
 	sxtw	x3, w2
 	add	x3, x3, 80
 	ldrh	w0, [x1,x3,lsl 1]
 	cmp	w0, w4
-	bne	.L982
+	bne	.L992
 	add	w2, w2, 1
-	b	.L977
-.L983:
+	b	.L987
+.L993:
 	strh	wzr, [x1,136]
-	b	.L980
-.L982:
+	b	.L990
+.L992:
 	mov	w4, -1
 	strh	w4, [x1,x3,lsl 1]
 	strh	w2, [x1,136]
@@ -6054,37 +6277,37 @@ ftl_free_sys_blk:
 	uxth	w20, w0
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	x19, x1
-	ldr	x2, [x0,2864]
+	ldr	x2, [x0,2880]
 	ldrh	w0, [x2,138]
 	cmp	w0, 63
-	bls	.L985
+	bls	.L995
 	strh	wzr, [x2,138]
-.L985:
+.L995:
 	ldrh	w0, [x2,112]
 	cmp	w0, 63
-	bls	.L986
+	bls	.L996
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1154
+	mov	w2, 1164
 	add	x1, x1, 1376
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L986:
+.L996:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldr	x1, [x1,2864]
-.L990:
+	ldr	x1, [x1,2880]
+.L1000:
 	ldrh	w2, [x1,138]
-.L987:
+.L997:
 	cmp	w2, 63
-	bgt	.L992
+	bgt	.L1002
 	sxtw	x3, w2
 	add	x3, x3, 80
 	ldrh	w4, [x1,x3,lsl 1]
 	cmp	w4, w0
-	bne	.L988
+	bne	.L998
 	strh	w20, [x1,x3,lsl 1]
 	strh	w2, [x1,138]
 	ldrh	w0, [x1,112]
@@ -6093,12 +6316,12 @@ ftl_free_sys_blk:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L988:
+.L998:
 	add	w2, w2, 1
-	b	.L987
-.L992:
+	b	.L997
+.L1002:
 	strh	wzr, [x1,138]
-	b	.L990
+	b	.L1000
 	.size	ftl_free_sys_blk, .-ftl_free_sys_blk
 	.align	2
 	.global	ftl_info_data_recovery
@@ -6112,7 +6335,7 @@ ftl_info_data_recovery:
 	str	x23, [sp,48]
 	ldrh	w2, [x0]
 	cmp	w2, w1
-	beq	.L993
+	beq	.L1003
 	adrp	x19, .LANCHOR0
 	ubfiz	x20, x2, 2, 16
 	add	x23, x19, :lo12:.LANCHOR0
@@ -6120,69 +6343,69 @@ ftl_info_data_recovery:
 	add	x22, x21, x20
 	ldrb	w1, [x22,2]
 	tst	w1, 224
-	bne	.L993
+	bne	.L1003
 	ldrb	w0, [x0,4]
 	bfi	w1, w0, 5, 3
 	mov	w0, w2
 	strb	w1, [x22,2]
 	bl	zftl_remove_free_node
 	ldrb	w0, [x22,2]
-	tbz	x0, 3, .L997
-	ldr	x1, [x23,2864]
+	tbz	x0, 3, .L1007
+	ldr	x1, [x23,2880]
 	ldrh	w0, [x1,116]
 	sub	w0, w0, #1
 	strh	w0, [x1,116]
-	b	.L998
-.L997:
+	b	.L1008
+.L1007:
 	tst	w0, 24
-	ldr	x1, [x23,2864]
-	bne	.L999
+	ldr	x1, [x23,2880]
+	bne	.L1009
 	ldrh	w0, [x1,114]
 	sub	w0, w0, #1
 	strh	w0, [x1,114]
-	b	.L998
-.L999:
+	b	.L1008
+.L1009:
 	ldrh	w0, [x1,118]
 	sub	w0, w0, #1
 	strh	w0, [x1,118]
-.L998:
+.L1008:
 	ldrb	w0, [x22,2]
 	and	w0, w0, 224
 	cmp	w0, 160
-	bne	.L1000
+	bne	.L1010
 	ldr	w0, [x21,x20]
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfx	x1, x0, 11, 8
 	add	w1, w1, 1
 	bfi	w0, w1, 11, 8
 	str	w0, [x21,x20]
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldrh	w0, [x1,120]
 	sub	w0, w0, #1
 	strh	w0, [x1,120]
-	b	.L993
-.L1000:
+	b	.L1003
+.L1010:
 	ldrh	w1, [x21,x20]
 	cmp	w0, 64
 	add	w2, w1, 1
 	bfi	w1, w2, 0, 11
 	strh	w1, [x21,x20]
-	bne	.L1001
+	bne	.L1011
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldrh	w0, [x1,122]
 	sub	w0, w0, #1
 	strh	w0, [x1,122]
-	b	.L993
-.L1001:
+	b	.L1003
+.L1011:
 	cmp	w0, 96
-	bne	.L993
+	bne	.L1003
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldrh	w0, [x1,124]
 	sub	w0, w0, #1
 	strh	w0, [x1,124]
-.L993:
+.L1003:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -6201,19 +6424,19 @@ ftl_get_ppa_from_index:
 	stp	x19, x20, [sp,16]
 	str	x21, [sp,32]
 	mov	x19, x2
-	ldrh	w0, [x4,3324]
+	ldrh	w0, [x4,3596]
 	ldr	x3, [x4,608]
-	ldrb	w4, [x4,3300]
+	ldrb	w4, [x4,3572]
 	mul	w0, w0, w4
 	cmp	w1, w0
-	bge	.L1003
+	bge	.L1013
 	add	x3, x3, 16
-	b	.L1004
-.L1003:
+	b	.L1014
+.L1013:
 	sub	w1, w1, w0
 	add	x3, x3, 48
 	uxth	w1, w1
-.L1004:
+.L1014:
 	ldrb	w2, [x3,9]
 	mov	w0, 65535
 	sdiv	w20, w1, w2
@@ -6221,18 +6444,18 @@ ftl_get_ppa_from_index:
 	add	x1, x3, x1, uxth 1
 	ldrh	w21, [x1,16]
 	cmp	w21, w0
-	bne	.L1005
+	bne	.L1015
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1593
+	mov	w2, 1686
 	add	x1, x1, 1400
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1005:
+.L1015:
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x2,3362]
+	ldrh	w0, [x2,3634]
 	madd	w0, w21, w0, w20
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
@@ -6243,31 +6466,33 @@ ftl_get_ppa_from_index:
 	.global	lpa_hash_get_ppa
 	.type	lpa_hash_get_ppa, %function
 lpa_hash_get_ppa:
+	adrp	x2, .LANCHOR3
 	adrp	x1, .LANCHOR0
-	mov	w3, 65535
+	add	x2, x2, :lo12:.LANCHOR3
 	add	x1, x1, :lo12:.LANCHOR0
-	add	x2, x1, x0, uxtb 1
 	stp	x29, x30, [sp, -16]!
+	add	x1, x1, x0, uxtb 1
+	mov	w3, 65535
 	add	x29, sp, 0
-	ldrh	w2, [x2,3368]
-	ldr	x4, [x1,3880]
-	ldr	x5, [x1,3888]
-.L1007:
-	cmp	w2, w3
-	beq	.L1011
-	uxtw	x1, w2
-	ldr	w6, [x4,x1,lsl 2]
+	ldrh	w1, [x1,3640]
+	ldr	x4, [x2,-200]
+	ldr	x5, [x2,-192]
+.L1017:
+	cmp	w1, w3
+	beq	.L1021
+	uxtw	x2, w1
+	ldr	w6, [x4,x2,lsl 2]
 	cmp	w6, w0
-	bne	.L1008
-	mov	w0, w2
+	bne	.L1018
+	mov	w0, w1
 	bl	ftl_get_ppa_from_index
-	b	.L1009
-.L1008:
-	ldrh	w2, [x5,x1,lsl 1]
-	b	.L1007
-.L1011:
+	b	.L1019
+.L1018:
+	ldrh	w1, [x5,x2,lsl 1]
+	b	.L1017
+.L1021:
 	mov	w0, -1
-.L1009:
+.L1019:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	lpa_hash_get_ppa, .-lpa_hash_get_ppa
@@ -6282,71 +6507,71 @@ ftl_get_new_free_page:
 	ldrh	w1, [x0]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1013
+	bne	.L1023
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1716
+	mov	w2, 1809
 	add	x1, x1, 1424
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1013:
+.L1023:
 	adrp	x20, .LANCHOR0
 	ldrh	w1, [x19,2]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3324]
+	ldrh	w0, [x0,3596]
 	cmp	w1, w0
-	bne	.L1014
+	bne	.L1024
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1717
+	mov	w2, 1810
 	add	x1, x1, 1424
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1014:
+.L1024:
 	ldrh	w0, [x19,6]
-	cbnz	w0, .L1015
+	cbnz	w0, .L1025
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1718
+	mov	w2, 1811
 	add	x1, x1, 1424
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1015:
+.L1025:
 	ldrb	w0, [x19,5]
 	add	x1, x20, :lo12:.LANCHOR0
 	add	x0, x0, 8
-	ldrb	w2, [x1,3300]
+	ldrb	w2, [x1,3572]
 	mov	w1, 65535
 	ldrh	w0, [x19,x0,lsl 1]
-.L1016:
+.L1026:
 	cmp	w0, w1
-	bne	.L1020
+	bne	.L1030
 	ldrb	w0, [x19,5]
 	add	w0, w0, 1
 	uxtb	w0, w0
 	strb	w0, [x19,5]
 	cmp	w0, w2
-	bne	.L1017
+	bne	.L1027
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,5]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L1017:
+.L1027:
 	ldrb	w0, [x19,5]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L1016
-.L1020:
+	b	.L1026
+.L1030:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w2, [x19,2]
-	ldrh	w1, [x20,3362]
-	ldrb	w3, [x20,3300]
+	ldrh	w1, [x20,3634]
+	ldrb	w3, [x20,3572]
 	mul	w0, w0, w1
 	ldrh	w1, [x19,6]
 	orr	w0, w0, w2
@@ -6360,11 +6585,11 @@ ftl_get_new_free_page:
 	uxtb	w1, w1
 	strb	w1, [x19,5]
 	cmp	w3, w1
-	bne	.L1019
+	bne	.L1029
 	add	w2, w2, 1
 	strb	wzr, [x19,5]
 	strh	w2, [x19,2]
-.L1019:
+.L1029:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -6382,25 +6607,25 @@ ftl_ext_alloc_new_blk:
 	mov	w1, 65533
 	sub	w0, w0, #1
 	cmp	w1, w0, uxth
-	bcs	.L1022
+	bcs	.L1032
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1749
+	mov	w2, 1842
 	add	x1, x1, 1448
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1022:
+.L1032:
 	adrp	x19, .LANCHOR0
 	mov	w1, 0
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, w20
 	bl	ftl_erase_phy_blk
-	ldr	x0, [x19,2864]
+	ldr	x0, [x19,2880]
 	ldrh	w0, [x0,130]
 	bl	ftl_free_sys_blk
-	ldr	x0, [x19,2864]
+	ldr	x0, [x19,2880]
 	strh	w20, [x0,130]
 	strh	wzr, [x0,140]
 	mov	w0, 0
@@ -6412,54 +6637,56 @@ ftl_ext_alloc_new_blk:
 	.global	ftl_total_vpn_update
 	.type	ftl_total_vpn_update, %function
 ftl_total_vpn_update:
-	adrp	x1, .LANCHOR0
-	add	x3, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x3,3896]
-	cbnz	w0, .L1024
+	adrp	x1, .LANCHOR3
+	add	x3, x1, :lo12:.LANCHOR3
+	ldrh	w2, [x3,-184]
+	cbnz	w0, .L1034
 	cmp	w2, 4
-	bhi	.L1024
+	bhi	.L1034
 	add	w2, w2, 1
-	strh	w2, [x3,3896]
-	b	.L1023
-.L1024:
-	add	x0, x1, :lo12:.LANCHOR0
+	strh	w2, [x3,-184]
+	b	.L1033
+.L1034:
+	add	x1, x1, :lo12:.LANCHOR3
+	adrp	x0, .LANCHOR0
 	mov	w9, 65535
-	strh	wzr, [x0,3896]
-	ldrh	w6, [x0,576]
-	ldr	x7, [x0,600]
-	ldr	x8, [x0,584]
-	mov	x0, 0
-	mov	w2, w0
-	mov	w3, w0
-.L1026:
-	cmp	w6, w0, uxth
-	bls	.L1034
-	ldrh	w4, [x7,x0,lsl 1]
+	strh	wzr, [x1,-184]
+	add	x1, x0, :lo12:.LANCHOR0
+	ldrh	w6, [x1,576]
+	ldr	x7, [x1,600]
+	ldr	x8, [x1,584]
+	mov	x1, 0
+	mov	w2, w1
+	mov	w3, w1
+.L1036:
+	cmp	w6, w1, uxth
+	bls	.L1044
+	ldrh	w4, [x7,x1,lsl 1]
 	cmp	w4, w9
-	beq	.L1027
-	add	x5, x8, x0, lsl 2
+	beq	.L1037
+	add	x5, x8, x1, lsl 2
 	ldrb	w5, [x5,2]
 	and	w5, w5, 224
 	cmp	w5, 160
-	bne	.L1028
+	bne	.L1038
 	add	w2, w2, w4
-	b	.L1027
-.L1028:
+	b	.L1037
+.L1038:
 	add	w3, w3, w4
-.L1027:
-	add	x0, x0, 1
-	b	.L1026
-.L1034:
-	add	x1, x1, :lo12:.LANCHOR0
-	ldr	x0, [x1,608]
-	ldr	x1, [x1,2864]
-	str	w3, [x0,524]
-	str	w2, [x0,528]
-	ldrh	w1, [x1,120]
-	cbz	w1, .L1023
-	udiv	w2, w2, w1
-	str	w2, [x0,532]
-.L1023:
+.L1037:
+	add	x1, x1, 1
+	b	.L1036
+.L1044:
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0,608]
+	ldr	x0, [x0,2880]
+	str	w3, [x1,524]
+	str	w2, [x1,528]
+	ldrh	w0, [x0,120]
+	cbz	w0, .L1033
+	udiv	w2, w2, w0
+	str	w2, [x1,532]
+.L1033:
 	ret
 	.size	ftl_total_vpn_update, .-ftl_total_vpn_update
 	.align	2
@@ -6485,10 +6712,10 @@ ftl_vpn_update:
 	ldr	x0, [x1,600]
 	ldrh	w2, [x0,x19]
 	mov	w0, 0
-	cbnz	w2, .L1037
+	cbnz	w2, .L1047
 	mov	w0, 1
-	str	w0, [x1,2884]
-.L1037:
+	str	w0, [x1,2900]
+.L1047:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -6504,56 +6731,58 @@ ftl_vpn_decrement:
 	str	x19, [sp,16]
 	cmp	w1, w0
 	adrp	x2, .LANCHOR0
-	beq	.L1040
+	beq	.L1050
 	add	x5, x2, :lo12:.LANCHOR0
 	uxtw	x0, w1
 	lsl	x3, x0, 1
 	ldr	x4, [x5,600]
 	ldrh	w19, [x4,x3]
-	cbnz	w19, .L1041
+	cbnz	w19, .L1051
 	ldr	x2, [x5,584]
 	add	x0, x2, x0, lsl 2
 	mov	w2, w19
 	ldrb	w3, [x0,2]
-	adrp	x0, .LC102
-	add	x0, x0, :lo12:.LC102
+	adrp	x0, .LC104
+	add	x0, x0, :lo12:.LC104
 	ubfx	x3, x3, 5, 3
 	bl	printk
-	b	.L1047
-.L1041:
+	b	.L1057
+.L1051:
 	sub	w19, w19, #1
 	strh	w19, [x4,x3]
-.L1040:
+.L1050:
 	add	x19, x2, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldrh	w2, [x19,3240]
+	ldrh	w2, [x19,3512]
 	cmp	w2, w1
-	beq	.L1042
+	beq	.L1052
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L1043
-	strh	w1, [x19,3240]
-.L1047:
+	bne	.L1053
+	strh	w1, [x19,3512]
+.L1057:
 	mov	w0, 0
-	b	.L1042
-.L1043:
+	b	.L1052
+.L1053:
 	mov	w0, w2
 	str	x1, [x29,40]
 	bl	ftl_vpn_update
 	cmp	w0, wzr
-	ldrh	w3, [x19,3898]
+	adrp	x2, .LANCHOR3
 	cset	w0, ne
-	ldrh	w2, [x19,3240]
-	add	w3, w3, 1
+	add	x2, x2, :lo12:.LANCHOR3
 	ldr	x1, [x29,40]
-	strh	w1, [x19,3240]
+	ldrh	w3, [x2,-182]
+	add	w3, w3, 1
 	uxth	w3, w3
 	cmp	w3, 7
 	csel	w3, w3, wzr, ls
-	strh	w3, [x19,3898]
+	strh	w3, [x2,-182]
+	ldrh	w2, [x19,3512]
 	add	x3, x19, x3, uxth 1
-	strh	w2, [x3,3248]
-.L1042:
+	strh	w1, [x19,3512]
+	strh	w2, [x3,3520]
+.L1052:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -6562,77 +6791,82 @@ ftl_vpn_decrement:
 	.global	lpa_hash_update_ppa
 	.type	lpa_hash_update_ppa, %function
 lpa_hash_update_ppa:
-	adrp	x3, .LANCHOR0
-	uxtb	w5, w0
-	add	x6, x3, :lo12:.LANCHOR0
+	adrp	x4, .LANCHOR0
+	uxtb	w11, w0
+	add	x3, x4, :lo12:.LANCHOR0
 	uxth	w2, w2
-	add	x4, x6, 3368
+	add	x3, x3, 3640
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x8, [x6,3880]
-	ldr	x12, [x6,3888]
+	ldrh	w5, [x3,w11,sxtw 1]
+	adrp	x3, .LANCHOR3
+	add	x6, x3, :lo12:.LANCHOR3
+	ldr	x8, [x6,-200]
+	ldr	x13, [x6,-192]
 	mov	w6, 65535
-	ldrh	w4, [x4,w5,sxtw 1]
-	mov	w11, w6
-.L1049:
-	cmp	w4, w11
-	beq	.L1053
-	uxtw	x9, w4
-	uxth	x7, w4
+	mov	w12, w6
+.L1059:
+	cmp	w5, w12
+	beq	.L1063
+	uxtw	x9, w5
+	uxth	x7, w5
 	lsl	x10, x9, 2
-	add	x13, x8, x10
+	add	x14, x8, x10
 	ldr	w10, [x8,x10]
 	cmp	w10, w0
-	bne	.L1050
-	mov	w4, -1
-	str	w4, [x13]
-	mov	w4, 65535
-	cmp	w6, w4
-	add	x4, x3, :lo12:.LANCHOR0
-	bne	.L1051
-	ldr	x6, [x4,3888]
-	add	x4, x4, 3368
-	ldrh	w6, [x6,x7,lsl 1]
-	strh	w6, [x4,w5,sxtw 1]
-	b	.L1052
-.L1051:
-	ldr	x4, [x4,3888]
-	ldrh	w8, [x4,x7,lsl 1]
-	strh	w8, [x4,w6,uxtw 1]
-.L1052:
-	add	x4, x3, :lo12:.LANCHOR0
+	bne	.L1060
+	mov	w5, -1
+	str	w5, [x14]
+	mov	w5, 65535
+	cmp	w6, w5
+	add	x5, x3, :lo12:.LANCHOR3
+	ldr	x5, [x5,-192]
+	bne	.L1061
+	ldrh	w6, [x5,x7,lsl 1]
+	add	x5, x4, :lo12:.LANCHOR0
+	add	x5, x5, 3640
+	strh	w6, [x5,w11,sxtw 1]
+	b	.L1062
+.L1061:
+	ldrh	w8, [x5,x7,lsl 1]
+	strh	w8, [x5,w6,uxtw 1]
+.L1062:
+	add	x5, x3, :lo12:.LANCHOR3
 	mov	w6, -1
-	ldr	x4, [x4,3888]
-	strh	w6, [x4,x7,lsl 1]
-	b	.L1053
-.L1050:
-	mov	w6, w4
-	ldrh	w4, [x12,x9,lsl 1]
-	b	.L1049
-.L1053:
-	add	x3, x3, :lo12:.LANCHOR0
-	uxtw	x4, w2
+	ldr	x5, [x5,-192]
+	strh	w6, [x5,x7,lsl 1]
+	b	.L1063
+.L1060:
+	mov	w6, w5
+	ldrh	w5, [x13,x9,lsl 1]
+	b	.L1059
+.L1063:
+	add	x3, x3, :lo12:.LANCHOR3
+	uxtw	x5, w2
+	add	x4, x4, :lo12:.LANCHOR0
 	cmn	w1, #1
-	ldr	x6, [x3,3880]
-	str	w0, [x6,x4,lsl 2]
-	add	x0, x3, 3368
-	ldrh	w6, [x0,w5,sxtw 1]
-	strh	w2, [x0,w5,sxtw 1]
-	ldr	x0, [x3,3888]
-	strh	w6, [x0,x4,lsl 1]
-	beq	.L1055
-	ldrh	w0, [x3,3264]
-	mov	w2, 21
-	mov	w4, 1
+	ldr	x6, [x3,-200]
+	str	w0, [x6,x5,lsl 2]
+	add	x6, x4, 3640
+	ldr	x0, [x3,-192]
+	ldrh	w7, [x6,w11,sxtw 1]
+	strh	w2, [x6,w11,sxtw 1]
+	strh	w7, [x0,x5,lsl 1]
+	beq	.L1065
+	ldrb	w0, [x4,744]
+	mov	w2, 24
+	ldrh	w5, [x4,3536]
+	mov	w3, 1
 	sub	w2, w2, w0
-	lsr	w1, w1, w0
-	lsl	w2, w4, w2
-	ldrb	w0, [x3,3266]
+	ldrb	w0, [x4,3538]
+	sub	w2, w2, w5
+	lsr	w1, w1, w5
+	lsl	w2, w3, w2
 	sub	w2, w2, #1
 	and	w1, w2, w1
 	udiv	w0, w1, w0
 	bl	ftl_vpn_decrement
-.L1055:
+.L1065:
 	mov	w0, -1
 	ldp	x29, x30, [sp], 16
 	ret
@@ -6643,46 +6877,52 @@ lpa_hash_update_ppa:
 ftl_mask_bad_block:
 	stp	x29, x30, [sp, -48]!
 	adrp	x6, .LANCHOR0
-	ubfx	x1, x0, 21, 3
-	add	x3, x6, :lo12:.LANCHOR0
+	mov	w4, 1
+	add	x7, x6, :lo12:.LANCHOR0
 	add	x29, sp, 0
+	mov	w3, 24
 	stp	x19, x20, [sp,16]
 	str	x21, [sp,32]
 	mov	x19, x6
-	ldrb	w5, [x3,3266]
-	ldrh	w3, [x3,3264]
+	ldrb	w1, [x7,744]
+	ldrb	w5, [x7,3538]
+	sub	w3, w3, w1
+	lsl	w1, w4, w1
+	lsr	w2, w0, w3
+	sub	w1, w1, #1
+	and	w1, w1, w2
+	cmp	w5, 1
+	uxtb	w1, w1
 	mul	w2, w1, w5
-	lsr	w0, w0, w3
 	uxtb	w20, w2
-	mov	w2, 21
-	sub	w3, w2, w3
-	mov	w2, 1
-	lsl	w3, w2, w3
-	cmp	w5, w2
+	ldrh	w2, [x7,3536]
+	sub	w3, w3, w2
+	lsr	w0, w0, w2
+	lsl	w3, w4, w3
 	sub	w3, w3, #1
 	and	w3, w3, w0
 	uxth	w4, w3
 	udiv	w3, w3, w5
 	uxth	w21, w3
-	bls	.L1060
+	bls	.L1070
 	sub	w5, w5, #1
 	and	w5, w4, w5
 	add	w2, w20, w5
 	uxtb	w20, w2
-.L1060:
+.L1070:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 14, .L1061
-	adrp	x0, .LC103
+	tbz	x0, 14, .L1071
+	adrp	x0, .LC105
 	mov	w2, w20
-	add	x0, x0, :lo12:.LC103
+	add	x0, x0, :lo12:.LC105
 	uxth	w3, w3
 	bl	printk
-.L1061:
+.L1071:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0,576]
 	cmp	w1, w21
-	bls	.L1059
+	bls	.L1069
 	ldr	x0, [x0,584]
 	mov	w2, 1
 	add	x21, x0, x21, uxth 2
@@ -6690,7 +6930,7 @@ ftl_mask_bad_block:
 	lsl	w2, w2, w20
 	orr	w2, w2, w0
 	strb	w2, [x21,3]
-.L1059:
+.L1069:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -6706,74 +6946,76 @@ gc_free_bad_sblk:
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	add	x21, x20, 2896
+	add	x21, x20, 2912
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	uxth	w25, w0
 	mov	w24, 0
-	ldr	w0, [x21,328]
-	cbz	w0, .L1077
-	adrp	x23, .LC104
-	mov	w26, 21
-	add	x23, x23, :lo12:.LC104
-.L1078:
-	ldrb	w1, [x20,3300]
-	cmp	w1, w24
-	bls	.L1077
-	ldrb	w3, [x20,3266]
-	ldrh	w19, [x20,3264]
+	ldr	w0, [x21,584]
+	cbz	w0, .L1087
+	adrp	x23, .LC106
+	mov	w26, 24
+	add	x23, x23, :lo12:.LC106
+.L1088:
+	ldrb	w0, [x20,3572]
+	cmp	w0, w24
+	bls	.L1087
+	ldrb	w3, [x20,3538]
+	ldrb	w19, [x20,744]
+	ldrh	w0, [x20,3536]
 	cmp	w3, 1
 	sdiv	w1, w24, w3
 	sub	w19, w26, w19
+	sub	w19, w19, w0
 	uxth	w2, w3
 	lsl	w19, w1, w19
 	madd	w19, w25, w2, w19
 	uxth	w19, w19
-	bls	.L1068
+	bls	.L1078
 	sub	w2, w2, #1
 	and	w2, w24, w2
 	add	w19, w19, w2
 	uxth	w19, w19
-.L1068:
+.L1078:
 	mov	w22, 0
-.L1069:
-	ldr	w0, [x21,328]
+.L1079:
+	ldr	w0, [x21,584]
 	cmp	w22, w0
-	bcs	.L1079
+	bcs	.L1089
 	add	x0, x21, x22, sxtw 1
-	ldrh	w0, [x0,332]
+	ldrh	w0, [x0,588]
 	cmp	w0, w19
-	bne	.L1070
+	bne	.L1080
 	mov	w1, w19
 	mov	x0, x23
 	bl	printk
-	ldrh	w0, [x20,3264]
+	ldrh	w0, [x20,3536]
 	lsl	w0, w19, w0
 	bl	ftl_mask_bad_block
-	ldr	w2, [x21,328]
+	ldr	w2, [x21,584]
 	mov	w1, w22
-.L1071:
+.L1081:
 	cmp	w1, w2
-	bcs	.L1080
+	bcs	.L1090
 	add	w3, w1, 1
 	add	x1, x21, x1, sxtw 1
 	add	x0, x21, x3, sxtw 1
-	ldrh	w0, [x0,332]
-	strh	w0, [x1,332]
+	ldrh	w0, [x0,588]
+	strh	w0, [x1,588]
 	uxth	w1, w3
-	b	.L1071
-.L1080:
+	b	.L1081
+.L1090:
 	sub	w2, w2, #1
-	str	w2, [x21,328]
-.L1070:
+	str	w2, [x21,584]
+.L1080:
 	add	w22, w22, 1
 	uxth	w22, w22
-	b	.L1069
-.L1079:
+	b	.L1079
+.L1089:
 	add	w24, w24, 1
 	uxth	w24, w24
-	b	.L1078
-.L1077:
+	b	.L1088
+.L1087:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -6786,168 +7028,160 @@ gc_free_bad_sblk:
 	.global	ftl_free_sblk
 	.type	ftl_free_sblk, %function
 ftl_free_sblk:
-	stp	x29, x30, [sp, -80]!
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	str	x23, [sp,48]
-	add	x3, x19, :lo12:.LANCHOR0
-	uxth	x23, w0
+	add	x4, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	lsl	x20, x23, 2
-	mov	x1, x23
-	ldr	x7, [x3,584]
+	stp	x23, x24, [sp,48]
+	uxth	x24, w0
+	ldr	x7, [x4,584]
+	lsl	x20, x24, 2
+	mov	x22, x24
 	add	x21, x7, x20
 	ldrb	w2, [x21,2]
-	ubfx	x22, x2, 5, 3
-	tbz	x2, 3, .L1083
-	ldr	x6, [x3,2864]
-	ldrh	w4, [x7,x20]
-	ldrh	w10, [x3,3900]
-	ldrh	w0, [x6,74]
-	and	w5, w4, 2047
-	ldr	w4, [x7,x20]
-	add	w0, w5, w0
-	ldrh	w6, [x6,72]
-	ubfx	x9, x4, 11, 8
-	ldrh	w4, [x3,592]
-	uxth	w8, w0
+	ubfx	x23, x2, 5, 3
+	tbz	x2, 3, .L1093
+	ldr	x0, [x4,2880]
+	ldrh	w3, [x7,x20]
+	ldrh	w5, [x0,74]
+	and	w8, w3, 2047
+	ldr	w3, [x7,x20]
+	add	w5, w8, w5
+	ldrh	w6, [x0,72]
+	ubfx	x9, x3, 11, 8
+	adrp	x0, .LANCHOR3
+	ldrh	w3, [x4,592]
+	uxth	w1, w5
 	add	w6, w9, w6
-	uxth	w0, w6
-	udiv	w6, w8, w4
-	add	w6, w0, w6
+	add	x0, x0, :lo12:.LANCHOR3
+	uxth	w5, w6
+	udiv	w6, w1, w3
+	ldrh	w10, [x0,-180]
+	add	w6, w5, w6
 	cmp	w6, w10
-	ble	.L1084
-	ldrh	w0, [x3,2846]
-	ldrh	w6, [x3,2854]
-	add	w6, w6, w0
-	ldrh	w0, [x3,3332]
-	add	w0, w0, 8
-	cmp	w6, w0
-	blt	.L1101
-	ldrh	w0, [x3,2844]
-	ldrh	w6, [x3,2850]
-	add	w6, w6, w0
-	ldrh	w0, [x3,2852]
-	add	w6, w6, w0
-	ldrh	w0, [x3,3902]
-	add	w0, w0, 8
-	cmp	w6, w0
-	bge	.L1101
-	b	.L1089
-.L1084:
-	madd	w0, w0, w4, w8
-	ldrh	w6, [x3,3904]
-	cmp	w0, w6
-	ble	.L1086
-	ldrh	w0, [x3,2844]
-	ldrh	w6, [x3,2850]
-	add	w6, w6, w0
-	ldrh	w0, [x3,2852]
-	add	w6, w6, w0
-	ldrh	w0, [x3,3902]
-	add	w0, w0, 8
-	cmp	w6, w0
-	blt	.L1089
-	ldrh	w0, [x3,2846]
-	ldrh	w6, [x3,2854]
-	add	w6, w6, w0
-	ldrh	w0, [x3,3332]
+	ble	.L1094
+	ldrh	w1, [x4,2862]
+	ldrh	w5, [x4,2870]
+	add	w5, w5, w1
+	ldrh	w1, [x4,3604]
+	add	w1, w1, 8
+	cmp	w5, w1
+	blt	.L1100
+	ldrh	w5, [x4,2866]
+	ldrh	w1, [x4,2860]
+	ldrh	w0, [x0,-178]
+	ldrh	w4, [x4,2868]
+	add	w1, w5, w1
 	add	w0, w0, 8
-	cmp	w6, w0
-	bge	.L1089
-.L1101:
+	add	w1, w1, w4
+	b	.L1112
+.L1094:
+	madd	w5, w5, w3, w1
+	ldrh	w1, [x0,-176]
+	cmp	w5, w1
+	ble	.L1096
+	ldrh	w5, [x4,2866]
+	ldrh	w1, [x4,2860]
+	ldrh	w0, [x0,-178]
+	add	w1, w5, w1
+	ldrh	w5, [x4,2868]
+	add	w1, w1, w5
+	add	w5, w0, 8
+	cmp	w1, w5
+	blt	.L1110
+	ldrh	w6, [x4,2870]
+	ldrh	w5, [x4,2862]
+	ldrh	w4, [x4,3604]
+	add	w5, w6, w5
+	add	w4, w4, 8
+	cmp	w5, w4
+	blt	.L1100
+	add	w0, w0, 24
+.L1112:
+	cmp	w1, w0
+	bge	.L1100
+.L1110:
+	and	w2, w2, -25
+	b	.L1109
+.L1100:
 	mov	w0, 2
 	bfi	w2, w0, 3, 2
-	b	.L1099
-.L1089:
-	and	w2, w2, -25
-.L1099:
+.L1109:
 	strb	w2, [x21,2]
-.L1086:
+.L1096:
 	ldrb	w0, [x21,2]
 	ands	w0, w0, 24
-	bne	.L1090
-	mul	w4, w9, w4
+	bne	.L1101
+	mul	w4, w9, w3
 	ldrh	w0, [x7,x20]
+	lsr	w3, w9, 3
 	add	w4, w4, w4, lsl 1
-	add	w4, w5, w4, lsr 2
-	ubfx	x5, x4, 2, 9
-	bfi	w0, w5, 0, 11
+	add	w4, w8, w4, lsr 2
+	bfi	w0, w4, 0, 11
 	strh	w0, [x7,x20]
-	b	.L1083
-.L1090:
-	cmp	w0, 16
-	bne	.L1083
-	sdiv	w4, w5, w4
 	ldr	w0, [x7,x20]
-	add	w4, w4, w4, lsl 1
-	add	w4, w9, w4, lsr 2
-	ubfx	x4, x4, 2, 6
-	bfi	w0, w4, 11, 8
+	bfi	w0, w3, 11, 8
 	str	w0, [x7,x20]
-.L1083:
-	mov	w0, w1
-	str	x1, [x29,72]
-	add	w22, w22, 6
+	b	.L1093
+.L1101:
+	cmp	w0, 16
+	bne	.L1093
+	sdiv	w3, w8, w3
+	ldr	w4, [x7,x20]
+	add	w3, w3, w3, lsl 1
+	add	w3, w9, w3, lsr 2
+	bfi	w4, w3, 11, 8
+	asr	w3, w8, 5
+	str	w4, [x7,x20]
+	bfi	w4, w3, 0, 11
+	strh	w4, [x7,x20]
+.L1093:
+	mov	w0, w22
+	add	w23, w23, 6
+	and	w23, w23, 7
 	bl	zftl_remove_data_node
-	and	w22, w22, 7
-	add	x3, x19, :lo12:.LANCHOR0
-	cmp	w22, 4
-	ldr	x1, [x29,72]
-	ldr	x2, [x3,584]
+	add	x1, x19, :lo12:.LANCHOR0
+	cmp	w23, 4
+	ldr	x2, [x1,584]
 	add	x2, x2, x20
 	ldrb	w0, [x2,2]
 	and	w0, w0, 31
 	strb	w0, [x2,2]
-	ldr	x0, [x3,600]
-	strh	wzr, [x0,x23,lsl 1]
-	bhi	.L1092
-	mov	w0, w1
+	ldr	x0, [x1,600]
+	strh	wzr, [x0,x24,lsl 1]
+	bhi	.L1103
+	mov	w0, w22
 	bl	gc_free_bad_sblk
-	ldr	x1, [x29,72]
-.L1092:
+.L1103:
 	ldrb	w0, [x21,2]
-	tbz	x0, 3, .L1093
+	tbz	x0, 3, .L1104
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x2, [x19,608]
-	ldrh	w0, [x2,584]
-	cmp	w0, w1
-	bne	.L1094
-	mov	w0, -1
-	ldrh	w3, [x2,588]
-	strh	w0, [x2,584]
-	mov	w0, 65535
-	cmp	w3, w0
-	bne	.L1093
-	adrp	x0, .LC105
-	strh	w1, [x2,588]
-	add	x0, x0, :lo12:.LC105
-	b	.L1100
-.L1094:
-	ldrh	w0, [x2,586]
-	cmp	w0, w1
-	bne	.L1093
-	mov	w0, -1
-	ldrh	w3, [x2,590]
-	strh	w0, [x2,586]
-	mov	w0, 65535
-	cmp	w3, w0
-	bne	.L1093
-	adrp	x0, .LC106
-	strh	w1, [x2,590]
-	add	x0, x0, :lo12:.LC106
-.L1100:
+	ldr	x0, [x19,608]
+	ldrh	w1, [x0,586]
+	cmp	w1, w22
+	bne	.L1104
+	mov	w1, -1
+	ldrh	w2, [x0,590]
+	strh	w1, [x0,586]
+	mov	w1, 65535
+	cmp	w2, w1
+	bne	.L1104
+	strh	w22, [x0,590]
+	adrp	x0, .LC107
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC107
 	bl	printk
-	b	.L1081
-.L1093:
-	mov	w0, w1
+	b	.L1091
+.L1104:
+	mov	w0, w22
 	bl	zftl_insert_free_list
-.L1081:
+.L1091:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldr	x23, [sp,48]
-	ldp	x29, x30, [sp], 80
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
 	ret
 	.size	ftl_free_sblk, .-ftl_free_sblk
 	.align	2
@@ -6965,131 +7199,131 @@ gc_free_src_blk:
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	mov	w20, 0
-	add	x24, x23, 2896
+	add	x24, x23, 2912
 	add	x21, x21, 1472
-.L1103:
+.L1114:
 	ldrh	w0, [x24,56]
 	adrp	x25, .LANCHOR0
 	cmp	w0, w20
-	bls	.L1141
+	bls	.L1152
 	add	x0, x24, x20, sxtw 1
 	ldrh	w22, [x0,58]
 	ldr	x0, [x23,600]
 	lsl	x26, x22, 1
 	mov	x19, x22
 	ldrh	w2, [x0,x26]
-	cbz	w2, .L1104
-	adrp	x0, .LC107
+	cbz	w2, .L1115
+	adrp	x0, .LC108
 	mov	w1, w22
-	add	x0, x0, :lo12:.LC107
+	add	x0, x0, :lo12:.LC108
 	bl	printk
-.L1104:
+.L1115:
 	add	x0, x25, :lo12:.LANCHOR0
 	ldr	x1, [x0,600]
 	strh	wzr, [x1,x26]
 	ldr	x1, [x0,600]
 	ldrh	w1, [x1,x26]
-	cbnz	w1, .L1105
+	cbnz	w1, .L1116
 	ldr	x0, [x0,584]
 	add	x22, x0, x22, lsl 2
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L1106
+	tbz	x0, 8, .L1117
 	ldrb	w2, [x22,2]
-	adrp	x0, .LC108
-	add	x0, x0, :lo12:.LC108
+	adrp	x0, .LC109
+	add	x0, x0, :lo12:.LC109
 	mov	w1, w19
 	ubfx	x2, x2, 5, 3
 	bl	printk
-.L1106:
+.L1117:
 	ldrb	w0, [x22,2]
 	tst	w0, 192
-	beq	.L1119
+	beq	.L1130
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L1107
-.L1119:
+	bne	.L1118
+.L1130:
 	adrp	x0, .LC0
 	mov	x1, x21
-	mov	w2, 931
+	mov	w2, 1115
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1107:
+.L1118:
 	mov	w0, w19
 	add	x25, x25, :lo12:.LANCHOR0
 	bl	ftl_free_sblk
 	ldr	x2, [x25,608]
 	ldrh	w1, [x2,124]
-	cbz	w1, .L1109
+	cbz	w1, .L1120
 	mov	x0, 0
-.L1111:
+.L1122:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,392]
 	cmp	w4, w19
-	bne	.L1110
+	bne	.L1121
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,392]
 	sub	w1, w1, #1
 	strh	w1, [x2,124]
-	b	.L1109
-.L1110:
+	b	.L1120
+.L1121:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L1111
-.L1109:
+	bne	.L1122
+.L1120:
 	ldrh	w1, [x2,120]
-	cbz	w1, .L1112
+	cbz	w1, .L1123
 	mov	x0, 0
-.L1114:
+.L1125:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,136]
 	cmp	w4, w19
-	bne	.L1113
+	bne	.L1124
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,136]
 	sub	w1, w1, #1
 	strh	w1, [x2,120]
-	b	.L1112
-.L1113:
+	b	.L1123
+.L1124:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L1114
-.L1112:
+	bne	.L1125
+.L1123:
 	ldrh	w1, [x2,122]
-	cbz	w1, .L1115
+	cbz	w1, .L1126
 	mov	x0, 0
-.L1117:
+.L1128:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,264]
 	cmp	w4, w19
-	bne	.L1116
+	bne	.L1127
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,264]
 	sub	w1, w1, #1
 	strh	w1, [x2,122]
-	b	.L1115
-.L1116:
+	b	.L1126
+.L1127:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L1117
-	b	.L1115
-.L1105:
+	bne	.L1128
+	b	.L1126
+.L1116:
 	mov	w0, w19
 	mov	w1, 1
 	mov	w2, 0
 	bl	gc_add_sblk
-.L1115:
+.L1126:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L1103
-.L1141:
+	b	.L1114
+.L1152:
 	strh	wzr, [x24,56]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7108,44 +7342,44 @@ print_ftl_debug_info:
 	str	x19, [sp,48]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x2, [x19,2864]
+	ldr	x2, [x19,2880]
 	ldr	x0, [x19,608]
-	ldrh	w8, [x19,2854]
+	ldrh	w8, [x19,2870]
 	ldrh	w1, [x2,148]
 	ldrh	w2, [x2,146]
 	str	w8, [sp]
-	ldrh	w6, [x19,2850]
+	ldrh	w6, [x19,2866]
 	ldr	w8, [x0,524]
 	str	w8, [sp,8]
-	ldrh	w7, [x19,2852]
+	ldrh	w7, [x19,2868]
 	ldr	w0, [x0,528]
 	str	w0, [sp,16]
-	ldr	w0, [x19,2840]
-	ldrh	w3, [x19,2844]
-	ldrh	w4, [x19,2846]
-	ldrh	w5, [x19,2848]
+	ldr	w0, [x19,2856]
+	ldrh	w3, [x19,2860]
+	ldrh	w4, [x19,2862]
+	ldrh	w5, [x19,2864]
 	str	w0, [sp,24]
-	adrp	x0, .LC109
-	add	x0, x0, :lo12:.LC109
-	bl	printk
-	ldr	x5, [x19,2864]
 	adrp	x0, .LC110
-	ldrb	w3, [x19,2857]
 	add	x0, x0, :lo12:.LC110
+	bl	printk
+	ldr	x5, [x19,2880]
+	adrp	x0, .LC111
+	ldrb	w3, [x19,2873]
+	add	x0, x0, :lo12:.LC111
 	ldr	w4, [x5,8]
 	ldr	w1, [x5,20]
 	ldr	w2, [x5,28]
 	ldr	w5, [x5,64]
 	bl	printk
-	ldr	x2, [x19,2864]
-	adrp	x0, .LC111
-	add	x0, x0, :lo12:.LC111
+	ldr	x2, [x19,2880]
+	adrp	x0, .LC112
+	add	x0, x0, :lo12:.LC112
 	ldr	w3, [x2,16]
 	ldr	w1, [x2,52]
 	ldr	w2, [x2,60]
 	lsr	w3, w3, 11
 	bl	printk
-	ldr	x7, [x19,2864]
+	ldr	x7, [x19,2880]
 	ldrh	w0, [x7,90]
 	ldrh	w6, [x7,72]
 	ldrh	w1, [x7,74]
@@ -7157,26 +7391,29 @@ print_ftl_debug_info:
 	str	w0, [sp,8]
 	ldrh	w0, [x7,98]
 	str	w0, [sp,16]
-	adrp	x0, .LC112
-	add	x0, x0, :lo12:.LC112
-	ldr	w2, [x7,84]
-	ldr	w7, [x7,80]
-	bl	printk
-	ldrh	w5, [x19,2872]
 	adrp	x0, .LC113
-	ldrh	w1, [x19,2874]
 	add	x0, x0, :lo12:.LC113
-	ldrh	w2, [x19,2876]
-	ldrh	w3, [x19,2878]
-	ldrh	w4, [x19,2880]
+	ldr	w2, [x7,84]
+	ldr	w7, [x7,80]
 	bl	printk
-	ldr	x4, [x19,608]
+	ldrh	w1, [x19,2890]
 	adrp	x0, .LC114
+	ldrh	w2, [x19,2892]
 	add	x0, x0, :lo12:.LC114
+	ldrh	w3, [x19,2894]
+	ldrh	w4, [x19,2896]
+	ldrh	w5, [x19,2888]
+	bl	printk
+	ldr	x4, [x19,608]
+	adrp	x0, .LC115
+	ldr	x6, [x19,2880]
+	add	x0, x0, :lo12:.LC115
 	ldrh	w1, [x4,584]
 	ldrh	w2, [x4,586]
 	ldrh	w3, [x4,588]
+	ldr	w5, [x6,156]
 	ldrh	w4, [x4,590]
+	ldrh	w6, [x6,150]
 	bl	printk
 	sub	sp, x29, #32
 	ldr	x19, [sp,48]
@@ -7193,64 +7430,64 @@ ftl_write_buf:
 	stp	x19, x20, [sp,16]
 	str	x21, [sp,32]
 	mov	x20, x0
-	cbnz	x0, .L1144
+	cbnz	x0, .L1155
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 668
+	mov	w2, 676
 	add	x1, x1, 1488
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 	bl	print_ftl_debug_info
 	mov	w0, -1
-	b	.L1153
-.L1144:
+	b	.L1164
+.L1155:
 	adrp	x19, .LANCHOR0
 	ldrb	w1, [x20,56]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	cmp	w1, w0
-	bls	.L1149
+	bls	.L1160
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 673
+	mov	w2, 681
 	add	x1, x1, 1488
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1149:
+.L1160:
 	ldrb	w0, [x20,56]
-	cbz	w0, .L1146
+	cbz	w0, .L1157
 	add	x21, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x21,2832]
+	ldrb	w1, [x21,2848]
 	cmp	w1, w0
-	bcs	.L1147
-.L1146:
+	bcs	.L1158
+.L1157:
 	mov	x0, x20
 	add	x19, x19, :lo12:.LANCHOR0
-	bl	buf_free
-	ldrb	w0, [x19,2856]
-	b	.L1153
-.L1147:
-	add	x0, x21, 2888
+	bl	zbuf_free
+	ldrb	w0, [x19,2872]
+	b	.L1164
+.L1158:
+	add	x0, x21, 2904
 	mov	x1, x20
 	bl	buf_add_tail
-	ldr	x0, [x21,2864]
+	ldr	x0, [x21,2880]
 	ldrb	w1, [x20,56]
-	ldrb	w2, [x21,2856]
+	ldrb	w2, [x21,2872]
 	ldr	w3, [x0,16]
 	add	w2, w2, 1
 	add	w1, w3, w1
 	str	w1, [x0,16]
 	ldr	w1, [x0,32]
 	uxtb	w2, w2
-	strb	w2, [x21,2856]
+	strb	w2, [x21,2872]
 	add	w1, w1, 1
 	str	w1, [x0,32]
 	mov	w0, w2
-.L1153:
+.L1164:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -7265,26 +7502,30 @@ ftl_write_completed:
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, 784
+	add	x20, x19, 800
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	mov	x21, x19
 	mov	w23, 0
 	mov	x22, x20
-.L1155:
-	ldrb	w3, [x19,3906]
+.L1166:
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldrb	w3, [x0,-174]
 	cmp	w3, 255
-	beq	.L1164
-	lsl	x0, x3, 6
-	add	x24, x20, x0
+	beq	.L1175
+	lsl	x1, x3, 6
+	add	x24, x20, x1
 	add	x4, x24, 32
-	ldrb	w0, [x20,x0]
-	strb	w0, [x19,3906]
+	ldrb	w1, [x20,x1]
+	strb	w1, [x0,-174]
 	ldr	w0, [x24,52]
 	cmn	w0, #1
-	bne	.L1156
-	ldrh	w1, [x19,3264]
-	mov	w0, 21
+	bne	.L1167
+	ldrb	w2, [x19,744]
+	mov	w0, 24
+	ldrh	w1, [x19,3536]
+	sub	w0, w0, w2
 	mov	w2, 1
 	sub	w0, w0, w1
 	lsl	w0, w2, w0
@@ -7293,22 +7534,22 @@ ftl_write_completed:
 	lsr	w1, w2, w1
 	mov	w2, 65535
 	and	w1, w0, w1
-	ldrb	w0, [x19,3266]
+	ldrb	w0, [x19,3538]
 	udiv	w1, w1, w0
 	ldr	x0, [x19,608]
 	ldr	w5, [x0,560]
 	cmp	w5, w2
 	uxth	w23, w1
 	and	w1, w1, w2
-	bne	.L1157
+	bne	.L1168
 	str	w1, [x0,560]
 	ldr	w2, [x4,8]
 	str	w2, [x0,564]
-.L1157:
+.L1168:
 	add	x3, x22, x3, lsl 6
-	adrp	x0, .LC115
+	adrp	x0, .LC116
 	add	x3, x3, 32
-	add	x0, x0, :lo12:.LC115
+	add	x0, x0, :lo12:.LC116
 	ldr	w2, [x3,4]
 	ldr	w3, [x3,8]
 	bl	printk
@@ -7318,31 +7559,31 @@ ftl_write_completed:
 	str	w1, [x0,556]
 	ldrh	w1, [x0,16]
 	cmp	w1, w23
-	bne	.L1158
+	bne	.L1169
 	strh	wzr, [x0,22]
-	b	.L1159
-.L1158:
+	b	.L1170
+.L1169:
 	ldrh	w1, [x0,48]
 	cmp	w1, w23
-	bne	.L1159
+	bne	.L1170
 	strh	wzr, [x0,54]
-.L1159:
+.L1170:
 	mov	x0, x24
 	mov	w23, 1
 	bl	ftl_write_buf
-	b	.L1155
-.L1156:
+	b	.L1166
+.L1167:
 	cmp	w23, 1
-	bne	.L1161
+	bne	.L1172
 	ldr	w1, [x4,4]
-	adrp	x0, .LC116
+	adrp	x0, .LC117
 	ldr	w2, [x4,8]
-	add	x0, x0, :lo12:.LC116
+	add	x0, x0, :lo12:.LC117
 	bl	printk
 	mov	x0, x24
 	bl	ftl_write_buf
-	b	.L1155
-.L1161:
+	b	.L1166
+.L1172:
 	ldr	w0, [x4,4]
 	ldr	w1, [x4,12]
 	ldrh	w2, [x24,48]
@@ -7350,16 +7591,16 @@ ftl_write_completed:
 	ldrb	w0, [x24,2]
 	and	w23, w0, 4
 	uxtb	w23, w23
-	cbz	w23, .L1162
+	cbz	w23, .L1173
 	and	w0, w0, -3
 	mov	w23, 0
 	strb	w0, [x24,2]
-	b	.L1155
-.L1162:
+	b	.L1166
+.L1173:
 	mov	x0, x24
-	bl	buf_free
-	b	.L1155
-.L1164:
+	bl	zbuf_free
+	b	.L1166
+.L1175:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -7374,41 +7615,41 @@ zftl_add_read_buf:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	mov	x20, x0
-	cbnz	x0, .L1166
+	cbnz	x0, .L1177
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 964
+	mov	w2, 972
 	add	x1, x1, 1504
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 	bl	print_ftl_debug_info
-	b	.L1165
-.L1166:
-	adrp	x19, .LANCHOR0
-	ldrb	w1, [x20,56]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+	b	.L1176
+.L1177:
+	ldrb	w1, [x0,56]
+	adrp	x0, .LANCHOR0+2848
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+2848]
 	cmp	w1, w0
-	bls	.L1169
+	bls	.L1180
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 969
+	mov	w2, 977
 	add	x1, x1, 1504
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1169:
-	add	x19, x19, :lo12:.LANCHOR0
+.L1180:
+	adrp	x19, .LANCHOR3
 	mov	x1, x20
-	add	x0, x19, 3907
+	add	x19, x19, :lo12:.LANCHOR3
+	sub	x0, x19, #173
 	bl	buf_add_tail
-	ldrb	w0, [x19,3908]
+	ldrb	w0, [x19,-172]
 	add	w0, w0, 1
-	strb	w0, [x19,3908]
-.L1165:
+	strb	w0, [x19,-172]
+.L1176:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -7433,33 +7674,33 @@ ftl_alloc_sblk:
 	uxth	w19, w0
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L1172
+	beq	.L1183
 	adrp	x0, .LANCHOR0+584
 	ldr	x21, [x0,#:lo12:.LANCHOR0+584]
 	add	x21, x21, x19, uxth 2
 	ldrb	w0, [x21,2]
 	tst	w0, 224
-	beq	.L1173
+	beq	.L1184
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 833
+	mov	w2, 836
 	add	x1, x1, 1528
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1173:
+.L1184:
 	ldrb	w1, [x21,2]
 	bfi	w1, w20, 5, 3
 	ubfx	x2, x1, 3, 2
 	orr	w0, w22, w2
 	bfi	w1, w0, 3, 2
 	strb	w1, [x21,2]
-	b	.L1179
-.L1172:
-	adrp	x21, .LC117
+	b	.L1190
+.L1183:
+	adrp	x21, .LC118
 	bl	print_ftl_debug_info
-	add	x21, x21, :lo12:.LC117
+	add	x21, x21, :lo12:.LC118
 	mov	w1, w19
 	mov	w2, w20
 	mov	x0, x21
@@ -7476,12 +7717,12 @@ ftl_alloc_sblk:
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 843
+	mov	w2, 846
 	add	x1, x1, 1528
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1179:
+.L1190:
 	mov	w0, w19
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -7494,13 +7735,15 @@ ftl_alloc_sblk:
 	.type	sblk_init, %function
 sblk_init:
 	adrp	x0, .LANCHOR0
-	mov	w1, -1
+	adrp	x2, .LANCHOR3
 	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x0,2835]
-	strb	w1, [x0,3906]
-	strb	w1, [x0,3909]
-	strb	w1, [x0,3280]
+	add	x2, x2, :lo12:.LANCHOR3
+	mov	w1, -1
+	strb	w1, [x0,2851]
+	strb	w1, [x0,3552]
 	mov	w0, 0
+	strb	w1, [x2,-174]
+	strb	w1, [x2,-171]
 	ret
 	.size	sblk_init, .-sblk_init
 	.align	2
@@ -7508,24 +7751,24 @@ sblk_init:
 	.type	dump_sblk_queue, %function
 dump_sblk_queue:
 	stp	x29, x30, [sp, -48]!
-	adrp	x0, .LC118
+	adrp	x0, .LC119
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR0
 	str	x21, [sp,32]
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC118
-	ldrb	w1, [x20,2835]
+	add	x0, x0, :lo12:.LC119
+	ldrb	w1, [x20,2851]
 	bl	printk
-	ldrb	w19, [x20,2835]
+	ldrb	w19, [x20,2851]
 	cmp	w19, 255
-	beq	.L1181
-	add	x20, x20, 784
+	beq	.L1192
+	add	x20, x20, 800
 	sbfiz	x19, x19, 6, 32
-	adrp	x21, .LC119
+	adrp	x21, .LC120
 	add	x19, x20, x19
-	add	x21, x21, :lo12:.LC119
-.L1183:
+	add	x21, x21, :lo12:.LC120
+.L1194:
 	ldrb	w1, [x19,1]
 	mov	x0, x21
 	ldrb	w2, [x19,58]
@@ -7533,11 +7776,11 @@ dump_sblk_queue:
 	bl	printk
 	ldrb	w19, [x19]
 	cmp	w19, 255
-	beq	.L1181
+	beq	.L1192
 	sbfiz	x19, x19, 6, 32
 	add	x19, x20, x19
-	b	.L1183
-.L1181:
+	b	.L1194
+.L1192:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -7547,163 +7790,171 @@ dump_sblk_queue:
 	.global	queue_lun_state
 	.type	queue_lun_state, %function
 queue_lun_state:
-	adrp	x3, .LANCHOR0
-	mov	w5, w0
-	add	x3, x3, :lo12:.LANCHOR0
+	adrp	x2, .LANCHOR0
+	mov	w6, w0
+	add	x2, x2, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldrb	w2, [x3,2835]
-	cmp	w2, 255
-	beq	.L1191
-	ldrh	w8, [x3,3264]
-	mov	w4, 21
-	ldrb	w7, [x3,3266]
+	ldrb	w3, [x2,2851]
+	cmp	w3, 255
+	beq	.L1202
+	ldrb	w4, [x2,744]
+	mov	w9, 24
+	ldrh	w11, [x2,3536]
 	mov	w0, 1
-	sub	w4, w4, w8
-	ubfx	x9, x5, 21, 3
+	sub	w9, w9, w4
+	ldrb	w8, [x2,3538]
+	sub	w5, w9, w11
 	lsl	w4, w0, w4
-	sub	w7, w7, #1
+	lsl	w5, w0, w5
+	sub	w8, w8, #1
 	sub	w4, w4, #1
-	asr	w5, w5, w8
-	uxth	w7, w7
-	adrp	x10, .L1194
+	sub	w5, w5, #1
+	asr	w10, w6, w9
+	uxth	w8, w8
+	asr	w6, w6, w11
 	uxth	w4, w4
-	and	w5, w5, w7
-	and	w5, w5, w4
-	add	x3, x3, 784
-	add	x10, x10, :lo12:.L1194
-.L1197:
-	add	x0, x3, x2, lsl 6
-	ldr	w6, [x0,40]
-	ubfx	x11, x6, 21, 3
-	cmp	w11, w9
-	bne	.L1192
-	lsr	w6, w6, w8
-	ldrb	w0, [x0,58]
-	and	w6, w7, w6
-	and	w6, w4, w6
-	cmp	w6, w5
-	bne	.L1193
+	uxth	w5, w5
+	and	w6, w6, w8
+	adrp	x12, .L1205
+	and	w10, w4, w10
+	and	w6, w6, w5
+	add	x2, x2, 800
+	add	x12, x12, :lo12:.L1205
+.L1208:
+	add	x13, x2, x3, lsl 6
+	ldr	w7, [x13,40]
+	lsr	w0, w7, w9
+	and	w0, w4, w0
+	cmp	w0, w10
+	bne	.L1203
+	lsr	w7, w7, w11
+	ldrb	w0, [x13,58]
+	and	w7, w8, w7
+	and	w7, w5, w7
+	cmp	w7, w6
+	bne	.L1204
 	cmp	w1, 1
-	beq	.L1195
-	b	.L1191
-.L1193:
+	beq	.L1206
+	b	.L1202
+.L1204:
 	cmp	w1, 3
-	bhi	.L1192
-	ldrb	w6, [x10,w1,uxtw]
-	adr	x11, .Lrtx1194
-	add	x6, x11, w6, sxtb #2
-	br	x6
-.Lrtx1194:
+	bhi	.L1203
+	ldrb	w7, [x12,w1,uxtw]
+	adr	x13, .Lrtx1205
+	add	x7, x13, w7, sxtb #2
+	br	x7
+.Lrtx1205:
 	.section	.rodata
 	.align	0
 	.align	2
-.L1194:
-	.byte	(.L1191 - .Lrtx1194) / 4
-	.byte	(.L1195 - .Lrtx1194) / 4
-	.byte	(.L1196 - .Lrtx1194) / 4
-	.byte	(.L1191 - .Lrtx1194) / 4
+.L1205:
+	.byte	(.L1202 - .Lrtx1205) / 4
+	.byte	(.L1206 - .Lrtx1205) / 4
+	.byte	(.L1207 - .Lrtx1205) / 4
+	.byte	(.L1202 - .Lrtx1205) / 4
 	.text
-.L1195:
-	sub	w6, w0, #7
-	and	w6, w6, -3
-	uxtb	w6, w6
-	cbz	w6, .L1192
-	b	.L1191
-.L1196:
+.L1206:
+	sub	w7, w0, #7
+	and	w7, w7, -3
+	uxtb	w7, w7
+	cbz	w7, .L1203
+	b	.L1202
+.L1207:
 	cmp	w0, 11
-	bne	.L1191
-.L1192:
-	lsl	x2, x2, 6
-	ldrb	w2, [x3,x2]
-	cmp	w2, 255
-	bne	.L1197
+	bne	.L1202
+.L1203:
+	lsl	x3, x3, 6
+	ldrb	w3, [x2,x3]
+	cmp	w3, 255
+	bne	.L1208
 	mov	w0, 0
-.L1191:
+.L1202:
 	ret
 	.size	queue_lun_state, .-queue_lun_state
 	.align	2
 	.global	queue_remove_completed_req
 	.type	queue_remove_completed_req, %function
 queue_remove_completed_req:
-	adrp	x3, .LANCHOR0
+	adrp	x0, .LANCHOR0
+	adrp	x1, .LANCHOR3
+	add	x4, x0, :lo12:.LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR3
 	mov	w5, 0
-	add	x0, x3, :lo12:.LANCHOR0
-	mov	w11, -1
-	add	x4, x0, 784
-	add	x12, x0, 3909
-	add	x13, x0, 3906
-	ldrb	w7, [x0,2835]
-	ldrb	w9, [x0,3909]
-	ldrb	w8, [x0,3280]
-	ldrb	w10, [x0,3906]
-.L1207:
-	cmp	w7, 255
-	beq	.L1208
-	sbfiz	x6, x7, 6, 32
-	sxtw	x1, w7
-	add	x2, x4, x6
+	add	x6, x4, 800
+	mov	w12, -1
+	mov	x3, x1
+	ldrb	w8, [x4,2851]
+	ldrb	w10, [x1,-171]
+	ldrb	w9, [x4,3552]
+	ldrb	w11, [x1,-174]
+.L1218:
+	cmp	w8, 255
+	beq	.L1219
+	sbfiz	x7, x8, 6, 32
+	sxtw	x1, w8
+	add	x2, x6, x7
 	ldrb	w2, [x2,58]
 	sub	w2, w2, #12
 	uxtb	w2, w2
 	cmp	w2, 1
-	bls	.L1209
-	cbz	w5, .L1206
-	strb	w7, [x0,2835]
-	b	.L1206
-.L1209:
+	bls	.L1220
+	cbz	w5, .L1217
+	strb	w8, [x4,2851]
+	b	.L1217
+.L1220:
 	lsl	x5, x1, 6
-	ldrb	w7, [x4,x6]
-	add	x2, x4, x5
-	strb	w11, [x4,x5]
+	ldrb	w8, [x6,x7]
+	add	x2, x6, x5
+	strb	w12, [x6,x5]
 	ldrb	w5, [x2,59]
 	cmp	w5, 1
-	bne	.L1212
+	bne	.L1223
 	ldrh	w2, [x2,50]
-	cbnz	w2, .L1220
-	mov	w2, w10
-	mov	x5, x13
-	b	.L1213
-.L1212:
-	cbz	w5, .L1230
-.L1214:
+	cbnz	w2, .L1231
+	mov	w2, w11
+	sub	x5, x3, #174
+	b	.L1224
+.L1223:
+	cbz	w5, .L1241
+.L1225:
 	mov	w5, 1
-	b	.L1207
-.L1230:
+	b	.L1218
+.L1241:
 	ldr	w2, [x2,36]
 	cmn	w2, #1
-	beq	.L1214
+	beq	.L1225
+	mov	w2, w10
+	sub	x5, x3, #171
+	b	.L1224
+.L1231:
 	mov	w2, w9
-	mov	x5, x12
-	b	.L1213
-.L1220:
-	mov	w2, w8
-	add	x5, x0, 3280
-.L1213:
+	add	x5, x4, 3552
+.L1224:
 	cmp	w2, 255
-	bne	.L1218
-	add	x3, x3, :lo12:.LANCHOR0
-	add	x1, x3, x1, lsl 6
-	strb	w7, [x3,2835]
-	ldrb	w0, [x1,785]
+	bne	.L1229
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x1, x0, x1, lsl 6
+	strb	w8, [x0,2851]
+	ldrb	w0, [x1,801]
 	strb	w0, [x5]
-	b	.L1206
-.L1218:
+	b	.L1217
+.L1229:
 	mov	w5, w2
 	sbfiz	x2, x2, 6, 32
-	ldrb	w2, [x4,x2]
+	ldrb	w2, [x6,x2]
 	cmp	w2, 255
-	bne	.L1218
-	add	x1, x4, x1, lsl 6
+	bne	.L1229
+	add	x1, x6, x1, lsl 6
 	sbfiz	x5, x5, 6, 32
 	ldrb	w1, [x1,1]
-	strb	w1, [x4,x5]
-	b	.L1214
-.L1208:
-	cbz	w5, .L1206
-	add	x3, x3, :lo12:.LANCHOR0
-	mov	w0, -1
-	strb	w0, [x3,2835]
-.L1206:
+	strb	w1, [x6,x5]
+	b	.L1225
+.L1219:
+	cbz	w5, .L1217
+	add	x0, x0, :lo12:.LANCHOR0
+	mov	w1, -1
+	strb	w1, [x0,2851]
+.L1217:
 	ret
 	.size	queue_remove_completed_req, .-queue_remove_completed_req
 	.align	2
@@ -7717,35 +7968,35 @@ pm_alloc_new_blk:
 	str	x23, [sp,48]
 	add	x3, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	ldr	x2, [x3,2864]
+	ldr	x2, [x3,2880]
 	ldrh	w1, [x2,690]
 	add	w1, w1, 1
 	uxth	w0, w1
-	ldrb	w1, [x3,3300]
+	ldrb	w1, [x3,3572]
 	strh	w0, [x2,690]
 	cmp	w1, w0
-	bls	.L1232
+	bls	.L1243
 	add	x0, x2, x0, sxtw 1
 	ldrh	w1, [x0,672]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1233
-.L1232:
-	adrp	x22, .LC120
-	add	x22, x22, :lo12:.LC120
-.L1245:
+	bne	.L1244
+.L1243:
+	adrp	x22, .LC121
+	add	x22, x22, :lo12:.LC121
+.L1256:
 	mov	w0, 1
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	ftl_alloc_sblk
 	uxth	w21, w0
 	mov	w1, 0
 	bl	ftl_erase_sblk
-	ldr	x1, [x20,2864]
+	ldr	x1, [x20,2880]
 	mov	w0, w21
 	add	x1, x1, 672
 	bl	ftl_get_blk_list_in_sblk
 	uxth	w0, w0
-	cbnz	w0, .L1234
+	cbnz	w0, .L1245
 	mov	w1, w21
 	mov	x0, x22
 	bl	printk
@@ -7754,61 +8005,64 @@ pm_alloc_new_blk:
 	ldrb	w2, [x1,2]
 	orr	w2, w2, -32
 	strb	w2, [x1,2]
-	b	.L1245
-.L1234:
-	ldr	x1, [x20,2864]
-	mov	w0, 1
-	mov	w2, 65535
-	str	w0, [x20,3912]
+	b	.L1256
+.L1245:
+	ldr	x1, [x20,2880]
+	adrp	x0, .LANCHOR3-168
+	mov	w2, 1
 	mov	x20, 0
+	str	w2, [x0,#:lo12:.LANCHOR3-168]
+	mov	w2, 65535
 	strh	wzr, [x1,690]
-.L1236:
+.L1247:
 	add	x3, x1, x20, lsl 1
 	uxth	w0, w20
 	ldrh	w3, [x3,416]
 	cmp	w3, w2
-	beq	.L1235
+	beq	.L1246
 	add	x20, x20, 1
 	cmp	x20, 128
-	bne	.L1236
+	bne	.L1247
 	adrp	x0, .LC0
-	adrp	x1, .LANCHOR3
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 194
+	adrp	x1, .LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 227
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 	mov	w0, w20
-.L1235:
+.L1246:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x1, [x1,2864]
+	ldr	x1, [x1,2880]
 	add	x0, x1, x0, sxtw 1
 	strh	w21, [x0,416]
 	ldrh	w0, [x1,688]
 	add	w0, w0, 1
 	strh	w0, [x1,688]
-.L1233:
+.L1244:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x0,2864]
+	ldr	x1, [x0,2880]
 	ldrh	w0, [x1,690]
 	add	x0, x0, 336
 	ldrh	w20, [x1,x0,lsl 1]
 	mov	w0, 65533
 	sub	w1, w20, #1
 	cmp	w0, w1, uxth
-	bcs	.L1238
+	bcs	.L1249
 	adrp	x0, .LC0
-	adrp	x1, .LANCHOR3
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 199
+	adrp	x1, .LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 232
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1238:
+.L1249:
 	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 21
-	ldr	x1, [x19,2864]
-	ldrh	w2, [x19,3264]
+	mov	w0, 24
+	ldrb	w2, [x19,744]
+	ldr	x1, [x19,2880]
+	sub	w0, w0, w2
+	ldrh	w2, [x19,3536]
 	sub	w0, w0, w2
 	strh	wzr, [x1,696]
 	asr	w4, w20, w0
@@ -7816,17 +8070,17 @@ pm_alloc_new_blk:
 	strh	w4, [x1,694]
 	adrp	x1, .LANCHOR2
 	ldr	w1, [x1,#:lo12:.LANCHOR2]
-	tbz	x1, 12, .L1242
+	tbz	x1, 12, .L1253
 	mov	w2, 1
 	mov	w1, w20
 	lsl	w2, w2, w0
-	adrp	x0, .LC121
-	add	x0, x0, :lo12:.LC121
+	adrp	x0, .LC122
+	add	x0, x0, :lo12:.LC122
 	sub	w2, w2, #1
 	mov	w3, w20
 	uxth	w4, w4
 	bl	printk
-.L1242:
+.L1253:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -7839,75 +8093,74 @@ pm_alloc_new_blk:
 	.type	pm_select_ram_region, %function
 pm_select_ram_region:
 	stp	x29, x30, [sp, -32]!
-	adrp	x2, .LANCHOR0
+	adrp	x2, .LANCHOR3
 	mov	w3, 65535
 	add	x29, sp, 0
 	str	x19, [sp,16]
-	add	x2, x2, :lo12:.LANCHOR0
+	add	x2, x2, :lo12:.LANCHOR3
 	mov	x19, 0
-.L1249:
-	add	x1, x2, 3920
+.L1260:
+	sub	x1, x2, #160
 	lsl	x4, x19, 4
 	uxth	w0, w19
 	ldrh	w4, [x4,x1]
 	cmp	w4, w3
-	beq	.L1248
+	beq	.L1259
 	add	x19, x19, 1
 	cmp	x19, 32
-	bne	.L1249
+	bne	.L1260
 	mov	x0, 0
 	mov	w3, 32768
-.L1251:
+.L1262:
 	add	x2, x1, x0, lsl 4
 	uxth	w4, w0
 	ldrh	w2, [x2,2]
-	tbnz	x2, 15, .L1250
+	tbnz	x2, 15, .L1261
 	cmp	w2, w3
-	bcs	.L1250
+	bcs	.L1261
 	mov	w3, w2
 	mov	w19, w4
-.L1250:
+.L1261:
 	add	x0, x0, 1
 	cmp	x0, 32
-	bne	.L1251
+	bne	.L1262
 	cmp	w19, 32
 	mov	w0, w19
-	bne	.L1248
-	adrp	x0, .LANCHOR4+80
+	bne	.L1259
+	adrp	x0, .LANCHOR3
 	mov	w2, -1
+	add	x0, x0, :lo12:.LANCHOR3
 	mov	w1, 0
-	ldrb	w3, [x0,#:lo12:.LANCHOR4+80]
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 3920
-.L1253:
+	sub	x0, x0, #160
+	ldrb	w3, [x0,512]
+.L1264:
 	ldrh	w5, [x0,2]
 	cmp	w5, w2
-	bcs	.L1252
+	bcs	.L1263
 	ldrh	w4, [x0]
 	cmp	w4, w3
 	csel	w2, w2, w5, eq
 	cmp	w4, w3
 	csel	w19, w19, w1, eq
-.L1252:
+.L1263:
 	add	w1, w1, 1
 	add	x0, x0, 16
 	uxth	w1, w1
 	cmp	w1, 32
-	bne	.L1253
+	bne	.L1264
 	cmp	w19, 32
-	bne	.L1254
-	adrp	x1, .LANCHOR3
+	bne	.L1265
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 297
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 331
 	add	x1, x1, 24
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1254:
+.L1265:
 	mov	w0, w19
-.L1248:
+.L1259:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -7931,57 +8184,58 @@ flash_lsb_page_tbl_build:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	cbnz	w0, .L1262
+	cbnz	w0, .L1273
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1263:
+.L1274:
 	add	x1, x2, 4
 	strh	w0, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1263
-.L1269:
-	adrp	x20, .LANCHOR4
+	bne	.L1274
+.L1280:
+	adrp	x20, .LANCHOR3
 	mov	w1, 255
-	add	x20, x20, :lo12:.LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR3
 	mov	w2, 1024
-	add	x0, x20, 84
+	add	x20, x20, 356
 	add	x19, x19, :lo12:.LANCHOR0
+	mov	x0, x20
 	bl	ftl_memset
 	mov	x0, 0
-	b	.L1264
-.L1262:
+	b	.L1275
+.L1273:
 	cmp	w0, 1
-	bne	.L1265
+	bne	.L1276
 	mov	x0, 0
 	mov	w4, 3
 	mov	w5, 2
 	add	x3, x19, :lo12:.LANCHOR0
-.L1268:
+.L1279:
 	cmp	x0, 3
 	uxth	w2, w0
 	mov	w1, w2
-	bls	.L1266
+	bls	.L1277
 	ubfiz	w1, w2, 1, 15
 	and	w2, w2, 1
 	cmp	w2, wzr
 	csel	w2, w4, w5, ne
 	sub	w1, w1, w2
 	uxth	w1, w1
-.L1266:
+.L1277:
 	add	x2, x3, 4
 	strh	w1, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1268
-	b	.L1269
-.L1265:
+	bne	.L1279
+	b	.L1280
+.L1276:
 	cmp	w0, 2
-	bne	.L1270
+	bne	.L1281
 	mov	w1, 65535
 	mov	x0, 0
 	add	x4, x19, :lo12:.LANCHOR0
-.L1272:
+.L1283:
 	add	x3, x4, 4
 	cmp	x0, 1
 	uxth	w2, w0
@@ -7991,36 +8245,36 @@ flash_lsb_page_tbl_build:
 	add	x0, x0, 1
 	cmp	x0, 256
 	uxth	w1, w1
-	bne	.L1272
-	b	.L1269
-.L1270:
+	bne	.L1283
+	b	.L1280
+.L1281:
 	cmp	w0, 3
-	bne	.L1273
+	bne	.L1284
 	mov	x0, 0
 	mov	w4, 5
 	mov	w5, 4
 	add	x3, x19, :lo12:.LANCHOR0
-.L1276:
+.L1287:
 	cmp	x0, 5
 	uxth	w2, w0
 	mov	w1, w2
-	bls	.L1274
+	bls	.L1285
 	ubfiz	w1, w2, 1, 15
 	and	w2, w2, 1
 	cmp	w2, wzr
 	csel	w2, w4, w5, ne
 	sub	w1, w1, w2
 	uxth	w1, w1
-.L1274:
+.L1285:
 	add	x2, x3, 4
 	strh	w1, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1276
-	b	.L1269
-.L1273:
+	bne	.L1287
+	b	.L1280
+.L1284:
 	cmp	w0, 4
-	bne	.L1277
+	bne	.L1288
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w5, 7
 	add	x1, x2, 4
@@ -8040,7 +8294,7 @@ flash_lsb_page_tbl_build:
 	strh	w0, [x1,14]
 	mov	w0, 8
 	strh	w2, [x1,6]
-.L1279:
+.L1290:
 	and	w3, w0, 1
 	ubfiz	w2, w0, 1, 15
 	add	w0, w0, 1
@@ -8051,43 +8305,43 @@ flash_lsb_page_tbl_build:
 	sub	w2, w2, w3
 	cmp	w0, 256
 	strh	w2, [x1,14]
-	bne	.L1279
-	b	.L1269
-.L1277:
+	bne	.L1290
+	b	.L1280
+.L1288:
 	cmp	w0, 5
-	bne	.L1280
+	bne	.L1291
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1281:
+.L1292:
 	add	x1, x2, 4
 	strh	w0, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 16
-	bne	.L1281
+	bne	.L1292
 	mov	x0, 0
-.L1282:
+.L1293:
 	add	x2, x1, x0
 	add	w3, w0, 16
 	add	x0, x0, 2
 	cmp	x0, 480
 	strh	w3, [x2,32]
-	bne	.L1282
-	b	.L1269
-.L1280:
+	bne	.L1293
+	b	.L1280
+.L1291:
 	cmp	w0, 8
-	bne	.L1283
+	bne	.L1294
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1284:
+.L1295:
 	add	x1, x2, 4
 	strh	w0, [x0,x1]
 	add	x0, x0, 2
 	cmp	x0, 512
-	bne	.L1284
-	b	.L1269
-.L1283:
+	bne	.L1295
+	b	.L1280
+.L1294:
 	cmp	w0, 9
-	bne	.L1269
+	bne	.L1280
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x0, 4
 	strh	wzr, [x0,4]
@@ -8096,22 +8350,21 @@ flash_lsb_page_tbl_build:
 	mov	w0, 2
 	strh	w0, [x1,4]
 	mov	x0, 0
-.L1285:
+.L1296:
 	add	x2, x1, x0
 	add	w3, w0, 3
 	add	x0, x0, 2
 	cmp	x0, 506
 	strh	w3, [x2,6]
-	bne	.L1285
-	b	.L1269
-.L1264:
+	bne	.L1296
+	b	.L1280
+.L1275:
 	add	x1, x19, 4
-	add	x2, x20, 84
 	ldrh	w1, [x0,x1]
 	add	x0, x0, 2
 	cmp	x0, 512
-	strh	w1, [x2,w1,sxtw 1]
-	bne	.L1264
+	strh	w1, [x20,w1,sxtw 1]
+	bne	.L1275
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -8129,19 +8382,19 @@ flash_die_info_init:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	tbz	x0, 12, .L1303
-	adrp	x1, .LANCHOR3
+	tbz	x0, 12, .L1314
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC4
-	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR4
 	add	x0, x0, :lo12:.LC4
 	add	x1, x1, 48
 	bl	printk
-.L1303:
+.L1314:
 	add	x24, x19, :lo12:.LANCHOR2
 	adrp	x21, .LANCHOR0
 	add	x20, x21, :lo12:.LANCHOR0
-	adrp	x22, .LANCHOR4
-	add	x25, x22, :lo12:.LANCHOR4
+	adrp	x22, .LANCHOR3
+	add	x25, x22, :lo12:.LANCHOR3
 	mov	w2, 8
 	ldrh	w0, [x24,34]
 	mov	x23, 0
@@ -8150,27 +8403,27 @@ flash_die_info_init:
 	strh	w0, [x20,2]
 	add	x27, x24, 9
 	ldrh	w0, [x24,18]
-	add	x28, x20, 748
+	add	x28, x20, 760
 	strb	wzr, [x20,633]
 	sdiv	w0, w0, w1
 	mov	w1, 0
-	strh	w0, [x25,1108]
+	strh	w0, [x25,1380]
 	add	x0, x20, 736
 	bl	ftl_memset
-	add	x0, x25, 1112
+	add	x0, x25, 1384
 	mov	w1, 0
 	mov	w2, 32
 	bl	ftl_memset
-.L1305:
-	add	x0, x20, 744
+.L1316:
+	add	x0, x20, 752
 	ldrb	w2, [x24,8]
 	add	x1, x28, x23, lsl 3
 	strb	w26, [x23,x0]
 	mov	x0, x27
 	bl	flash_mem_cmp8
-	cbnz	w0, .L1304
+	cbnz	w0, .L1315
 	ldrb	w1, [x20,633]
-	add	x2, x25, 1112
+	add	x2, x25, 1384
 	str	w0, [x2,w1,sxtw 2]
 	add	w0, w1, 1
 	strb	w0, [x20,633]
@@ -8178,19 +8431,19 @@ flash_die_info_init:
 	add	x1, x20, x1, sxtw
 	strb	w0, [x1,736]
 	bl	zftl_flash_enter_slc_mode
-.L1304:
+.L1315:
 	add	x23, x23, 1
 	cmp	x23, 4
-	bne	.L1305
+	bne	.L1316
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x0, 8
 	ldrb	w2, [x1,8]
 	cmp	w2, 2
-	beq	.L1306
-.L1310:
+	beq	.L1317
+.L1321:
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x21, x21, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LANCHOR4
+	add	x22, x22, :lo12:.LANCHOR3
 	ldp	x23, x24, [sp,48]
 	ldrb	w1, [x19,21]
 	ldrb	w0, [x21,633]
@@ -8200,11 +8453,11 @@ flash_die_info_init:
 	ldrh	w1, [x19,22]
 	ldp	x19, x20, [sp,16]
 	mul	w0, w0, w1
-	strh	w0, [x22,1144]
+	strh	w0, [x22,1416]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
 	ret
-.L1306:
+.L1317:
 	add	x23, x21, :lo12:.LANCHOR0
 	ldrh	w20, [x1,14]
 	ldrb	w26, [x0,8]
@@ -8213,13 +8466,13 @@ flash_die_info_init:
 	ldrb	w27, [x1,23]
 	ldrh	w2, [x23,2]
 	add	x25, x0, 9
-	add	x3, x23, 748
-	add	x4, x22, :lo12:.LANCHOR4
+	add	x3, x23, 760
+	add	x4, x22, :lo12:.LANCHOR3
 	mul	w20, w20, w2
 	ldrb	w2, [x1,13]
 	mul	w20, w20, w2
 	lsl	w28, w20, 1
-.L1309:
+.L1320:
 	add	x1, x3, x24, lsl 3
 	mov	x0, x25
 	mov	w2, w26
@@ -8228,9 +8481,9 @@ flash_die_info_init:
 	bl	flash_mem_cmp8
 	ldr	x3, [x29,104]
 	ldr	x4, [x29,96]
-	cbnz	w0, .L1307
+	cbnz	w0, .L1318
 	ldrb	w0, [x23,633]
-	add	x1, x4, 1112
+	add	x1, x4, 1384
 	cmp	w27, wzr
 	csel	w2, w20, w28, eq
 	str	w2, [x1,w0,sxtw 2]
@@ -8238,11 +8491,11 @@ flash_die_info_init:
 	add	x0, x23, x0, sxtw
 	strb	w1, [x23,633]
 	strb	w24, [x0,736]
-.L1307:
+.L1318:
 	add	x24, x24, 1
 	cmp	x24, 4
-	bne	.L1309
-	b	.L1310
+	bne	.L1320
+	b	.L1321
 	.size	flash_die_info_init, .-flash_die_info_init
 	.align	2
 	.global	lpa_hash_init
@@ -8255,14 +8508,15 @@ lpa_hash_init:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x19, 3368
+	add	x0, x19, 3640
 	bl	ftl_memset
-	ldrh	w0, [x19,3324]
+	ldrh	w0, [x19,3596]
 	mov	w1, 255
-	ldrb	w2, [x19,3300]
+	ldrb	w2, [x19,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x19,3888]
+	adrp	x0, .LANCHOR3-192
 	lsl	w2, w2, 2
+	ldr	x0, [x0,#:lo12:.LANCHOR3-192]
 	bl	ftl_memset
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -8276,54 +8530,57 @@ lpa_rebuild_hash:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	str	x19, [sp,16]
-	tbz	x0, 12, .L1321
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC122
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC122
+	stp	x19, x20, [sp,16]
+	tbz	x0, 12, .L1332
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC123
+	add	x1, x1, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC123
 	add	x1, x1, 72
-	mov	w2, 224
+	mov	w2, 225
 	mov	w3, 0
 	bl	printk
-.L1321:
+.L1332:
 	adrp	x19, .LANCHOR0
 	mov	w1, 255
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 512
-	add	x0, x19, 3368
+	add	x0, x19, 3640
+	adrp	x20, .LANCHOR3
 	bl	ftl_memset
-	ldrh	w0, [x19,3324]
-	mov	w1, 255
-	ldrb	w2, [x19,3300]
+	ldrh	w0, [x19,3596]
+	add	x1, x20, :lo12:.LANCHOR3
+	ldrb	w2, [x19,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x19,3888]
+	ldr	x0, [x1,-192]
+	mov	w1, 255
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	mov	w0, 0
-.L1322:
-	ldrh	w1, [x19,3324]
-	ldrb	w2, [x19,3300]
+.L1333:
+	ldrh	w1, [x19,3596]
+	ldrb	w2, [x19,3572]
 	mul	w1, w1, w2
 	cmp	w0, w1, lsl 1
-	bge	.L1331
+	bge	.L1342
+	add	x3, x20, :lo12:.LANCHOR3
 	uxtw	x2, w0
-	ldr	x1, [x19,3880]
+	ldr	x1, [x3,-200]
 	ldr	w1, [x1,x2,lsl 2]
 	cmn	w1, #1
-	beq	.L1323
+	beq	.L1334
 	uxtb	w1, w1
-	add	x3, x19, 3368
-	ldrh	w4, [x3,w1,sxtw 1]
-	strh	w0, [x3,w1,sxtw 1]
-	ldr	x1, [x19,3888]
-	strh	w4, [x1,x2,lsl 1]
-.L1323:
+	add	x4, x19, 3640
+	ldrh	w5, [x4,w1,sxtw 1]
+	strh	w0, [x4,w1,sxtw 1]
+	ldr	x1, [x3,-192]
+	strh	w5, [x1,x2,lsl 1]
+.L1334:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1322
-.L1331:
-	ldr	x19, [sp,16]
+	b	.L1333
+.L1342:
+	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	lpa_rebuild_hash, .-lpa_rebuild_hash
@@ -8361,9 +8618,9 @@ zftl_read_flash_info:
 	strb	w1, [x19,9]
 	mov	x1, 0
 	strb	w2, [x19,8]
-.L1333:
+.L1344:
 	cmp	w4, w1, uxtb
-	bls	.L1335
+	bls	.L1346
 	add	x2, x0, 736
 	ldrb	w3, [x19,10]
 	ldrb	w2, [x1,x2]
@@ -8371,8 +8628,8 @@ zftl_read_flash_info:
 	lsl	w2, w5, w2
 	orr	w2, w2, w3
 	strb	w2, [x19,10]
-	b	.L1333
-.L1335:
+	b	.L1344
+.L1346:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -8383,72 +8640,72 @@ zftl_read_flash_info:
 gc_init:
 	stp	x29, x30, [sp, -48]!
 	mov	w1, 0
-	mov	w2, 344
+	mov	w2, 600
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	adrp	x20, .LANCHOR4
+	adrp	x20, .LANCHOR3
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR3
 	str	x21, [sp,32]
-	add	x21, x19, 2896
+	add	x21, x19, 2912
 	mov	x0, x21
-	strb	wzr, [x19,3297]
-	strb	wzr, [x20,1146]
-	str	wzr, [x20,1148]
-	strh	wzr, [x19,3328]
+	strb	wzr, [x19,3569]
+	strb	wzr, [x20,1418]
+	str	wzr, [x20,1420]
+	strh	wzr, [x19,3600]
 	bl	ftl_memset
-	ldrh	w1, [x19,3324]
+	ldrh	w1, [x19,3596]
 	mov	w0, -1
-	ldrb	w3, [x19,3300]
-	strh	w0, [x19,2896]
+	ldrb	w3, [x19,3572]
+	strh	w0, [x19,2912]
 	lsr	w0, w1, 2
 	lsr	w2, w1, 1
-	strh	w0, [x19,2932]
-	strh	w0, [x19,2878]
-	ldrh	w0, [x19,3298]
-	strh	w2, [x19,2934]
+	strh	w0, [x19,2948]
+	strh	w0, [x19,2894]
+	ldrh	w0, [x19,3570]
+	strh	w2, [x19,2950]
 	mul	w2, w1, w3
 	mul	w0, w0, w3
-	strh	w1, [x19,2880]
+	strh	w1, [x19,2896]
 	uxth	w2, w2
 	lsl	w0, w0, 2
 	sub	w4, w2, #32
-	strh	w2, [x19,2874]
-	strh	w4, [x19,2876]
-	strh	wzr, [x19,3326]
-	strh	wzr, [x19,3320]
-	strh	wzr, [x19,3322]
-	str	xzr, [x19,2904]
+	strh	w2, [x19,2890]
+	strh	w4, [x19,2892]
+	strh	wzr, [x19,3598]
+	strh	wzr, [x19,3592]
+	strh	wzr, [x19,3594]
+	str	xzr, [x19,2920]
 	bl	ftl_malloc
-	ldrb	w1, [x19,3300]
-	str	x0, [x20,1152]
-	ldrh	w0, [x19,3298]
+	ldrb	w1, [x19,3572]
+	str	x0, [x20,1424]
+	ldrh	w0, [x19,3570]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x20,1160]
-	ldrh	w1, [x19,3298]
-	ldrb	w0, [x19,3300]
+	str	x0, [x20,1432]
+	ldrh	w1, [x19,3570]
+	ldrb	w0, [x19,3572]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,3288]
-	ldrb	w1, [x19,3300]
-	ldrh	w0, [x19,3298]
+	str	x0, [x19,3560]
+	ldrb	w1, [x19,3572]
+	ldrh	w0, [x19,3570]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,3272]
-	ldrb	w1, [x19,3300]
-	ldrh	w0, [x19,3298]
+	str	x0, [x19,3544]
+	ldrb	w1, [x19,3572]
+	ldrh	w0, [x19,3570]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x20,1168]
-	ldrh	w0, [x19,3330]
+	str	x0, [x20,1440]
+	ldrh	w0, [x19,3602]
 	ldr	x21, [sp,32]
 	lsr	w0, w0, 2
-	strh	w0, [x19,2872]
+	strh	w0, [x19,2888]
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -8466,13 +8723,13 @@ gc_static_wearleveling:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldr	w1, [x0,32]
 	mov	w0, 10240
 	cmp	w1, w0
-	bls	.L1338
+	bls	.L1349
 	bl	ftl_tmp_into_update
-.L1338:
+.L1349:
 	add	x3, x19, :lo12:.LANCHOR0
 	ldr	x0, [x3,608]
 	ldr	w1, [x0,568]
@@ -8480,39 +8737,39 @@ gc_static_wearleveling:
 	add	w1, w1, 860160
 	add	w1, w1, 3840
 	cmp	w2, w1
-	bhi	.L1339
-	ldr	x3, [x3,2864]
+	bhi	.L1350
+	ldr	x3, [x3,2880]
 	ldr	w1, [x0,572]
 	ldr	w3, [x3,36]
 	add	w1, w1, 32
 	cmp	w3, w1
-	bls	.L1389
-.L1339:
+	bls	.L1401
+.L1350:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w22, 0
 	mov	w20, 65535
-	adrp	x8, .LC123
-	mov	w28, w22
-	str	w22, [x29,136]
-	ldr	x1, [x1,2864]
-	mov	w27, w22
-	str	w22, [x29,140]
+	adrp	x27, .LC124
+	str	w22, [x29,128]
 	mov	w26, w22
+	ldr	x1, [x1,2880]
 	mov	w25, w22
+	str	w22, [x29,136]
 	mov	w24, w22
+	str	w22, [x29,140]
+	mov	w28, w22
 	ldr	w3, [x1,36]
 	mov	w21, w20
 	str	w3, [x0,572]
-	mov	w9, w20
+	mov	w8, w20
 	str	w2, [x0,568]
-	adrp	x10, .LANCHOR2
-	add	x8, x8, :lo12:.LC123
+	adrp	x9, .LANCHOR2
+	add	x27, x27, :lo12:.LC124
 	ldrh	w23, [x1,134]
-.L1341:
+.L1352:
 	add	x4, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x4,576]
 	cmp	w0, w23
-	bls	.L1450
+	bls	.L1462
 	uxtw	x7, w23
 	ldr	x0, [x4,584]
 	lsl	x1, x7, 2
@@ -8520,70 +8777,70 @@ gc_static_wearleveling:
 	ldrb	w2, [x6,2]
 	and	w3, w2, 224
 	cmp	w3, 224
-	beq	.L1342
-	tbz	x2, 3, .L1343
+	beq	.L1353
+	tbz	x2, 3, .L1354
 	ldrh	w3, [x0,x1]
 	ldr	w2, [x0,x1]
 	and	w3, w3, 2047
 	ubfx	x2, x2, 11, 8
-	b	.L1344
-.L1343:
+	b	.L1355
+.L1354:
 	tst	w2, 24
-	bne	.L1345
+	bne	.L1356
 	ldrh	w3, [x0,x1]
 	mov	w2, 65535
 	and	w3, w3, 2047
-	b	.L1344
-.L1345:
+	b	.L1355
+.L1356:
 	ldr	w2, [x0,x1]
 	mov	w3, 65535
 	ubfx	x2, x2, 11, 8
-	b	.L1346
-.L1344:
+	b	.L1357
+.L1355:
 	ldr	w4, [x29,136]
-	add	w26, w26, 1
+	add	w25, w25, 1
 	cmp	w20, w3
 	add	w4, w4, w3
 	str	w4, [x29,136]
-	uxth	w26, w26
-	bls	.L1388
+	uxth	w25, w25
+	bls	.L1400
 	add	x4, x19, :lo12:.LANCHOR0
 	mov	w20, w3
 	ldr	x4, [x4,608]
 	strh	w23, [x4,586]
-.L1388:
-	cmp	w25, w3
-	bcs	.L1347
+.L1400:
+	cmp	w24, w3
+	bcs	.L1358
 	mov	w22, w23
-	mov	w25, w3
-.L1347:
-	cmp	w2, w9
-	beq	.L1348
-.L1346:
+	mov	w24, w3
+.L1358:
+	cmp	w2, w8
+	beq	.L1359
+.L1357:
 	ldr	w4, [x29,140]
-	add	w27, w27, 1
+	add	w26, w26, 1
 	cmp	w21, w2
 	add	w4, w4, w2
 	str	w4, [x29,140]
-	uxth	w27, w27
-	bls	.L1349
+	uxth	w26, w26
+	bls	.L1360
 	add	x4, x19, :lo12:.LANCHOR0
 	mov	w21, w2
 	ldr	x4, [x4,608]
 	strh	w23, [x4,584]
-.L1349:
-	cmp	w24, w2
-	bcs	.L1348
-	mov	w28, w23
-	mov	w24, w2
-.L1348:
+.L1360:
+	cmp	w28, w2
+	bcs	.L1359
+	str	w23, [x29,128]
+	mov	w28, w2
+.L1359:
 	cmp	w3, 9
-	bls	.L1391
+	bls	.L1403
 	cmp	w2, 9
-	bhi	.L1342
-.L1391:
-	ldr	w2, [x10,#:lo12:.LANCHOR2]
-	tbz	x2, 8, .L1342
+	bhi	.L1353
+.L1403:
+	ldr	w2, [x9,#:lo12:.LANCHOR2]
+	tbz	x2, 8, .L1353
 	ldrh	w2, [x0,x1]
 	ldr	w3, [x0,x1]
 	add	x0, x19, :lo12:.LANCHOR0
@@ -8591,33 +8848,31 @@ gc_static_wearleveling:
 	mov	w1, w23
 	ldrb	w6, [x6,3]
 	and	w2, w2, 2047
-	ldr	x11, [x0,600]
+	ldr	x10, [x0,600]
 	ubfx	x4, x5, 3, 2
-	mov	x0, x8
+	mov	x0, x27
 	ubfx	x3, x3, 11, 8
 	ubfx	x5, x5, 5, 3
-	str	x10, [x29,112]
-	ldrh	w7, [x11,x7,lsl 1]
-	str	x9, [x29,120]
-	str	x8, [x29,128]
+	str	x9, [x29,112]
+	ldrh	w7, [x10,x7,lsl 1]
+	str	x8, [x29,120]
 	bl	printk
-	ldr	x10, [x29,112]
-	ldr	x9, [x29,120]
-	ldr	x8, [x29,128]
-.L1342:
+	ldr	x9, [x29,112]
+	ldr	x8, [x29,120]
+.L1353:
 	add	w23, w23, 1
 	uxth	w23, w23
-	b	.L1341
-.L1450:
+	b	.L1352
+.L1462:
 	ldr	x0, [x4,608]
 	mov	w1, 255
 	mov	w2, 128
-	str	x4, [x29,128]
+	str	x4, [x29,120]
 	add	x0, x0, 264
 	adrp	x23, .LANCHOR2
 	strh	wzr, [x0,-142]
 	bl	ftl_memset
-	ldr	x4, [x29,128]
+	ldr	x4, [x29,120]
 	ldr	w2, [x23,#:lo12:.LANCHOR2]
 	ldr	x0, [x4,608]
 	ldr	x3, [x4,584]
@@ -8625,62 +8880,76 @@ gc_static_wearleveling:
 	lsl	x0, x7, 2
 	mov	x1, x7
 	add	x8, x3, x0
-	tbz	x2, 10, .L1352
+	tbz	x2, 10, .L1363
 	ldr	x9, [x4,600]
 	ldrh	w2, [x3,x0]
 	ldrb	w5, [x8,2]
 	ldr	w3, [x3,x0]
-	adrp	x0, .LC124
+	adrp	x0, .LC125
 	ldrb	w6, [x8,3]
 	ubfx	x4, x5, 3, 2
 	ldrh	w7, [x9,x7,lsl 1]
-	add	x0, x0, :lo12:.LC124
+	add	x0, x0, :lo12:.LC125
 	and	w2, w2, 2047
 	ubfx	x3, x3, 11, 8
 	ubfx	x5, x5, 5, 3
-	str	x8, [x29,128]
+	str	x8, [x29,120]
 	bl	printk
-	ldr	x8, [x29,128]
-.L1352:
+	ldr	x8, [x29,120]
+.L1363:
+	ldrb	w0, [x8,2]
+	adrp	x27, .LANCHOR3
+	and	w0, w0, 224
+	cmp	w0, 32
+	bne	.L1364
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2880]
+	ldrh	w0, [x0,688]
+	cmp	w0, 2
+	bls	.L1364
+	add	x0, x27, :lo12:.LANCHOR3
+	mov	w1, 1
+	str	w1, [x0,1448]
+.L1364:
 	ldrb	w0, [x8,2]
-	tbz	x0, 3, .L1353
+	tbz	x0, 3, .L1365
 	ldrb	w0, [x8,2]
 	and	w1, w0, 192
 	cmp	w1, 64
-	bne	.L1354
+	bne	.L1366
 	add	x3, x19, :lo12:.LANCHOR0
 	mov	w1, 0
 	mov	w2, 1
-	str	x3, [x29,128]
+	str	x3, [x29,120]
 	ldr	x0, [x3,608]
 	ldrh	w0, [x0,586]
 	bl	gc_add_sblk
-	ldr	x3, [x29,128]
+	ldr	x3, [x29,120]
 	mov	w0, 1
-	strh	w0, [x3,3214]
-	b	.L1353
-.L1354:
+	strh	w0, [x3,3486]
+	b	.L1365
+.L1366:
 	tst	w0, 224
-	bne	.L1353
+	bne	.L1365
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldr	x1, [x2,608]
 	ldrh	w3, [x1,590]
 	cmp	w3, w0
-	bne	.L1353
+	bne	.L1365
 	ldrh	w0, [x1,586]
 	ldrh	w1, [x1,588]
-	str	x2, [x29,128]
+	str	x2, [x29,120]
 	cmp	w1, w0
-	beq	.L1353
+	beq	.L1365
 	bl	zftl_remove_free_node
-	ldr	x2, [x29,128]
+	ldr	x2, [x29,120]
 	ldr	x0, [x2,608]
 	ldrh	w1, [x0,586]
 	strh	w1, [x0,590]
 	mov	w1, -1
 	strh	w1, [x0,586]
-.L1353:
+.L1365:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x23,#:lo12:.LANCHOR2]
 	ldr	x1, [x0,608]
@@ -8689,11 +8958,11 @@ gc_static_wearleveling:
 	lsl	x3, x7, 2
 	mov	x1, x7
 	add	x8, x4, x3
-	tbz	x2, 10, .L1355
+	tbz	x2, 10, .L1367
 	ldr	x9, [x0,600]
-	adrp	x0, .LC125
+	adrp	x0, .LC126
 	ldrh	w2, [x4,x3]
-	add	x0, x0, :lo12:.LC125
+	add	x0, x0, :lo12:.LC126
 	ldrb	w5, [x8,2]
 	ldr	w3, [x4,x3]
 	and	w2, w2, 2047
@@ -8702,53 +8971,54 @@ gc_static_wearleveling:
 	ldrh	w7, [x9,x7,lsl 1]
 	ubfx	x3, x3, 11, 8
 	ubfx	x5, x5, 5, 3
-	str	x8, [x29,128]
+	str	x8, [x29,120]
 	bl	printk
-	ldr	x8, [x29,128]
-.L1355:
+	ldr	x8, [x29,120]
+.L1367:
 	ldrb	w0, [x8,2]
-	tbz	x0, 3, .L1356
+	tbz	x0, 3, .L1368
 	ldrb	w0, [x8,2]
 	and	w1, w0, 192
 	cmp	w1, 64
-	bne	.L1357
+	bne	.L1369
 	add	x3, x19, :lo12:.LANCHOR0
 	mov	w1, 0
 	mov	w2, 1
-	str	x3, [x29,128]
+	str	x3, [x29,120]
 	ldr	x0, [x3,608]
 	ldrh	w0, [x0,584]
 	bl	gc_add_sblk
-	ldr	x3, [x29,128]
+	ldr	x3, [x29,120]
 	mov	w0, 1
-	strh	w0, [x3,3214]
-	b	.L1356
-.L1357:
-	tst	w0, 224
-	bne	.L1356
+	strh	w0, [x3,3486]
+	b	.L1368
+.L1369:
+	and	w0, w0, 248
+	cmp	w0, 16
+	bne	.L1368
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldr	x1, [x2,608]
 	ldrh	w3, [x1,588]
 	cmp	w3, w0
-	bne	.L1356
+	bne	.L1368
 	ldrh	w0, [x1,584]
 	ldrh	w1, [x1,590]
-	str	x2, [x29,128]
+	str	x2, [x29,120]
 	cmp	w1, w0
-	beq	.L1356
+	beq	.L1368
 	bl	zftl_remove_free_node
-	ldr	x2, [x29,128]
+	ldr	x2, [x29,120]
 	ldr	x0, [x2,608]
 	ldrh	w1, [x0,584]
 	strh	w1, [x0,588]
 	mov	w1, -1
 	strh	w1, [x0,584]
-.L1356:
+.L1368:
 	add	x4, x19, :lo12:.LANCHOR0
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
 	ldr	x1, [x4,584]
-	tbz	x0, 10, .L1358
+	tbz	x0, 10, .L1370
 	uxtw	x7, w22
 	ldr	x8, [x4,600]
 	lsl	x0, x7, 2
@@ -8756,9 +9026,9 @@ gc_static_wearleveling:
 	ldrh	w7, [x8,x7,lsl 1]
 	ldrh	w2, [x1,x0]
 	ldr	w3, [x1,x0]
-	adrp	x0, .LC126
+	adrp	x0, .LC127
 	ldrb	w5, [x6,2]
-	add	x0, x0, :lo12:.LC126
+	add	x0, x0, :lo12:.LC127
 	ldrb	w6, [x6,3]
 	mov	w1, w22
 	ubfx	x4, x5, 3, 2
@@ -8766,135 +9036,134 @@ gc_static_wearleveling:
 	ubfx	x3, x3, 11, 8
 	ubfx	x5, x5, 5, 3
 	bl	printk
-.L1358:
+.L1370:
 	add	x4, x19, :lo12:.LANCHOR0
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
 	ldr	x1, [x4,584]
-	tbz	x0, 10, .L1359
-	uxtw	x7, w28
+	tbz	x0, 10, .L1371
+	ldr	w7, [x29,128]
 	ldr	x8, [x4,600]
 	lsl	x0, x7, 2
 	add	x6, x1, x0
-	ldrh	w7, [x8,x7,lsl 1]
 	ldrh	w2, [x1,x0]
 	ldr	w3, [x1,x0]
-	adrp	x0, .LC127
+	adrp	x0, .LC128
 	ldrb	w5, [x6,2]
-	add	x0, x0, :lo12:.LC127
+	mov	x1, x7
 	ldrb	w6, [x6,3]
-	mov	w1, w28
+	add	x0, x0, :lo12:.LC128
+	ldrh	w7, [x8,x7,lsl 1]
 	ubfx	x4, x5, 3, 2
 	and	w2, w2, 2047
 	ubfx	x3, x3, 11, 8
 	ubfx	x5, x5, 5, 3
 	bl	printk
-.L1359:
+.L1371:
 	ldr	w1, [x29,136]
 	add	x0, x19, :lo12:.LANCHOR0
-	udiv	w3, w1, w26
+	udiv	w3, w1, w25
 	ldr	w1, [x29,140]
-	ldr	x0, [x0,2864]
-	strh	w25, [x0,96]
-	strh	w24, [x0,98]
+	ldr	x0, [x0,2880]
+	strh	w24, [x0,96]
+	strh	w28, [x0,98]
 	strh	w20, [x0,92]
 	strh	w21, [x0,94]
-	udiv	w4, w1, w27
+	udiv	w4, w1, w26
 	strh	w3, [x0,88]
 	strh	w4, [x0,90]
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 10, .L1360
-	adrp	x0, .LC128
-	mov	w1, w26
-	add	x0, x0, :lo12:.LC128
-	mov	w2, w27
+	tbz	x0, 10, .L1372
+	adrp	x0, .LC129
+	mov	w1, w25
+	add	x0, x0, :lo12:.LC129
+	mov	w2, w26
 	uxth	w3, w3
 	uxth	w4, w4
 	bl	printk
-.L1360:
+.L1372:
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	adrp	x28, .LANCHOR4
-	tbz	x0, 10, .L1361
-	add	x6, x28, :lo12:.LANCHOR4
-	adrp	x0, .LC129
-	add	x0, x0, :lo12:.LC129
+	tbz	x0, 10, .L1373
+	add	x6, x27, :lo12:.LANCHOR3
+	adrp	x0, .LC130
+	add	x0, x0, :lo12:.LC130
 	mov	w1, w20
 	mov	w2, w21
-	mov	w3, w25
-	ldrh	w5, [x6,1176]
-	mov	w4, w24
-	ldrh	w6, [x6,1178]
+	mov	w3, w24
+	ldrh	w5, [x6,1452]
+	mov	w4, w28
+	ldrh	w6, [x6,1454]
 	bl	printk
-.L1361:
-	add	x1, x28, :lo12:.LANCHOR4
-	sub	w0, w24, w21
+.L1373:
+	add	x1, x27, :lo12:.LANCHOR3
+	sub	w0, w28, w21
 	str	w0, [x29,140]
-	ldrh	w0, [x1,1178]
+	ldrh	w0, [x1,1454]
 	ldr	w2, [x29,140]
 	cmp	w2, w0
-	bgt	.L1362
-	ldrh	w1, [x1,1176]
-	sub	w0, w25, w20
+	bgt	.L1374
+	ldrh	w1, [x1,1452]
+	sub	w0, w24, w20
 	cmp	w0, w1
-	ble	.L1390
-.L1362:
+	ble	.L1402
+.L1374:
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w26, 0
-	mov	w22, w26
+	mov	w25, 0
+	mov	w22, w25
 	ldr	x1, [x0,608]
-	ldr	x0, [x0,2864]
-	ldrh	w24, [x1,580]
-	ldrh	w27, [x0,134]
-	sub	w0, w25, w20
+	ldr	x0, [x0,2880]
+	ldrh	w28, [x1,580]
+	ldrh	w26, [x0,134]
+	sub	w0, w24, w20
 	str	w0, [x29,136]
-	adrp	x0, .LC131
-	add	x0, x0, :lo12:.LC131
-	adrp	x25, .LC130
+	adrp	x0, .LC132
+	add	x0, x0, :lo12:.LC132
+	adrp	x24, .LC131
 	str	x0, [x29,128]
-	add	x0, x25, :lo12:.LC130
+	add	x0, x24, :lo12:.LC131
 	str	x0, [x29,120]
-.L1364:
+.L1376:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1,576]
-	cmp	w27, w0
-	bcs	.L1373
-	add	w7, w24, 1
+	cmp	w26, w0
+	bcs	.L1385
+	add	w7, w28, 1
 	ldr	x4, [x1,584]
-	uxth	w24, w7
-	cmp	w24, w0
-	csel	w24, w24, wzr, cc
-	uxtw	x25, w24
-	lsl	x3, x25, 2
+	uxth	w28, w7
+	cmp	w28, w0
+	csel	w28, w28, wzr, cc
+	uxtw	x24, w28
+	lsl	x3, x24, 2
 	add	x0, x4, x3
 	ldrb	w0, [x0,2]
 	and	w2, w0, 224
 	cmp	w2, 224
-	beq	.L1366
+	beq	.L1378
 	tst	w0, 192
-	beq	.L1366
+	beq	.L1378
 	ubfx	x0, x0, 3, 2
 	cmp	w2, 160
 	and	w1, w0, 1
-	tbnz	x0, 0, .L1448
+	tbnz	x0, 0, .L1460
 	cmp	w0, 2
-.L1448:
-	add	x0, x28, :lo12:.LANCHOR4
-	bne	.L1369
-	ldrh	w0, [x0,1178]
+.L1460:
+	add	x0, x27, :lo12:.LANCHOR3
+	bne	.L1381
+	ldrh	w0, [x0,1454]
 	ldr	w2, [x29,140]
 	cmp	w2, w0
-	ble	.L1370
+	ble	.L1382
 	ldr	w0, [x4,x3]
 	ubfx	x0, x0, 11, 8
 	cmp	w0, w21
-	bls	.L1371
-	cbz	w1, .L1370
+	bls	.L1383
+	cbz	w1, .L1382
 	ldrh	w0, [x4,x3]
 	and	w0, w0, 2047
 	cmp	w0, w20
-	bgt	.L1370
-.L1371:
+	bgt	.L1382
+.L1383:
 	mov	w1, 0
-	mov	w0, w24
+	mov	w0, w28
 	mov	w2, 1
 	str	x4, [x29,104]
 	str	x3, [x29,112]
@@ -8902,12 +9171,12 @@ gc_static_wearleveling:
 	bl	gc_add_sblk
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 1
-	add	x9, x0, 2896
+	add	x9, x0, 2912
 	ldr	x3, [x29,112]
 	ldr	x4, [x29,104]
-	strh	w1, [x0,3214]
+	strh	w1, [x0,3486]
 	ldr	w1, [x23,#:lo12:.LANCHOR2]
-	tbz	x1, 10, .L1370
+	tbz	x1, 10, .L1382
 	ldr	x1, [x0,584]
 	ldr	x10, [x0,600]
 	add	x1, x1, x3
@@ -8915,39 +9184,39 @@ gc_static_wearleveling:
 	ldr	w6, [x4,x3]
 	ldr	x0, [x29,120]
 	ldrb	w2, [x1,2]
-	b	.L1449
-.L1369:
-	ldrh	w0, [x0,1176]
+	b	.L1461
+.L1381:
+	ldrh	w0, [x0,1452]
 	ldr	w2, [x29,136]
 	cmp	w2, w0
-	ble	.L1370
+	ble	.L1382
 	ldrh	w0, [x4,x3]
 	add	w2, w20, 8
 	and	w0, w0, 2047
 	cmp	w0, w2
-	ble	.L1372
-	cbz	w1, .L1370
+	ble	.L1384
+	cbz	w1, .L1382
 	ldr	w0, [x4,x3]
 	add	w1, w21, 4
 	ubfx	x0, x0, 11, 8
 	cmp	w0, w1
-	bgt	.L1370
-.L1372:
+	bgt	.L1382
+.L1384:
 	mov	w1, 0
-	mov	w0, w24
+	mov	w0, w28
 	mov	w2, 1
 	str	x4, [x29,104]
 	str	x3, [x29,112]
-	add	w26, w26, 1
+	add	w25, w25, 1
 	bl	gc_add_sblk
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 1
-	add	x9, x0, 2896
+	add	x9, x0, 2912
 	ldr	x3, [x29,112]
 	ldr	x4, [x29,104]
-	strh	w1, [x0,3214]
+	strh	w1, [x0,3486]
 	ldr	w1, [x23,#:lo12:.LANCHOR2]
-	tbz	x1, 10, .L1370
+	tbz	x1, 10, .L1382
 	ldr	x1, [x0,584]
 	ldr	x10, [x0,600]
 	add	x1, x1, x3
@@ -8955,131 +9224,131 @@ gc_static_wearleveling:
 	ldr	w6, [x4,x3]
 	ldr	x0, [x29,128]
 	ldrb	w2, [x1,2]
-.L1449:
-	ldrh	w3, [x10,x25,lsl 1]
-	mov	w1, w24
+.L1461:
+	ldrh	w3, [x10,x24,lsl 1]
+	mov	w1, w28
 	ldrh	w4, [x9,56]
 	ubfx	x2, x2, 5, 3
 	and	w5, w5, 2047
 	ubfx	x6, x6, 11, 8
 	bl	printk
-.L1370:
-	cmp	w26, 4
-	bhi	.L1373
+.L1382:
+	cmp	w25, 4
+	bhi	.L1385
 	cmp	w22, 4
-	bhi	.L1373
-.L1366:
-	add	w27, w27, 1
-	uxth	w27, w27
-	b	.L1364
-.L1373:
+	bhi	.L1385
+.L1378:
+	add	w26, w26, 1
+	uxth	w26, w26
+	b	.L1376
+.L1385:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x0, [x0,608]
-	str	w24, [x0,580]
-	b	.L1363
-.L1390:
-	mov	w26, 0
-	mov	w22, w26
-.L1363:
-	cbz	w21, .L1376
+	str	w28, [x0,580]
+	b	.L1375
+.L1402:
+	mov	w25, 0
+	mov	w22, w25
+.L1375:
+	cbz	w21, .L1388
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldrh	w0, [x0,134]
-.L1377:
+.L1389:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1,576]
 	cmp	w2, w0
-	bls	.L1451
+	bls	.L1463
 	ubfiz	x3, x0, 2, 16
 	ldr	x4, [x1,584]
 	add	x5, x4, x3
 	ldr	w1, [x4,x3]
 	ubfx	x2, x1, 11, 8
 	cmp	w2, w21
-	bcc	.L1378
+	bcc	.L1390
 	ldrb	w5, [x5,2]
 	tst	w5, 24
-	beq	.L1378
+	beq	.L1390
 	sub	w2, w2, w21
 	bfi	w1, w2, 11, 8
 	str	w1, [x4,x3]
-.L1378:
+.L1390:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1377
-.L1451:
-	ldr	x0, [x1,2864]
+	b	.L1389
+.L1463:
+	ldr	x0, [x1,2880]
 	ldrh	w1, [x0,72]
 	add	w1, w21, w1
 	strh	w1, [x0,72]
 	ldrh	w1, [x0,98]
 	cmp	w1, w21
-	bls	.L1376
+	bls	.L1388
 	sub	w21, w1, w21
 	strh	w21, [x0,98]
-.L1376:
-	cbz	w20, .L1382
+.L1388:
+	cbz	w20, .L1394
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldrh	w0, [x0,134]
-.L1383:
+.L1395:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1,576]
 	cmp	w2, w0
-	bls	.L1452
+	bls	.L1464
 	ubfiz	x3, x0, 2, 16
 	ldr	x4, [x1,584]
 	add	x5, x4, x3
 	ldrh	w1, [x4,x3]
 	and	w2, w1, 2047
 	cmp	w2, w20
-	blt	.L1384
+	blt	.L1396
 	ldrb	w5, [x5,2]
 	and	w5, w5, 24
 	cmp	w5, 16
-	beq	.L1384
+	beq	.L1396
 	sub	w2, w2, w20
 	bfi	w1, w2, 0, 11
 	strh	w1, [x4,x3]
-.L1384:
+.L1396:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1383
-.L1452:
-	ldr	x0, [x1,2864]
+	b	.L1395
+.L1464:
+	ldr	x0, [x1,2880]
 	ldrh	w1, [x0,74]
 	add	w1, w20, w1
 	strh	w1, [x0,74]
 	ldrh	w1, [x0,96]
 	cmp	w1, w20
-	bls	.L1382
+	bls	.L1394
 	sub	w20, w1, w20
 	strh	w20, [x0,96]
-.L1382:
+.L1394:
 	mov	w1, 5
 	mov	w0, 0
 	bl	zftl_get_gc_node
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L1340
+	beq	.L1351
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x19,600]
 	ldrh	w2, [x2,x1]
-	ldrh	w1, [x19,3324]
+	ldrh	w1, [x19,3596]
 	cmp	w2, w1
-	bhi	.L1340
+	bhi	.L1351
 	mov	w1, 0
 	mov	w2, 1
 	add	w22, w22, 1
 	bl	gc_add_sblk
-	b	.L1340
-.L1389:
-	mov	w26, 0
-	mov	w22, w26
-.L1340:
-	add	w0, w26, w22
+	b	.L1351
+.L1401:
+	mov	w25, 0
+	mov	w22, w25
+.L1351:
+	add	w0, w25, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9105,81 +9374,81 @@ zftl_sblk_list_init:
 	mov	w24, 6
 	mov	w23, 32768
 	ldrh	w2, [x19,576]
-	adrp	x26, .LC132
+	adrp	x26, .LC133
 	ldr	x0, [x19,528]
 	mov	w25, -1
-	add	x26, x26, :lo12:.LC132
+	add	x26, x26, :lo12:.LC133
 	mul	w2, w2, w24
 	bl	ftl_memset
-	ldrh	w22, [x19,3298]
+	ldrh	w22, [x19,3570]
 	mov	w0, 16
-	strh	w0, [x19,3360]
-	ldrb	w0, [x19,3300]
-	str	xzr, [x19,3336]
-	str	xzr, [x19,3344]
+	strh	w0, [x19,3632]
+	ldrb	w0, [x19,3572]
+	str	xzr, [x19,3608]
+	str	xzr, [x19,3616]
 	mul	w22, w0, w22
-	str	xzr, [x19,3352]
-	str	xzr, [x19,3312]
+	str	xzr, [x19,3624]
+	str	xzr, [x19,3584]
 	sdiv	w22, w23, w22
 	str	xzr, [x19,616]
-	str	xzr, [x19,3304]
-	strh	wzr, [x19,2844]
-	strh	wzr, [x19,2846]
-	strh	wzr, [x19,2848]
-	strh	wzr, [x19,2850]
-	strh	wzr, [x19,2854]
-	strh	wzr, [x19,2852]
+	str	xzr, [x19,3576]
+	strh	wzr, [x19,2860]
+	strh	wzr, [x19,2862]
+	strh	wzr, [x19,2864]
+	strh	wzr, [x19,2866]
+	strh	wzr, [x19,2870]
+	strh	wzr, [x19,2868]
 	sxth	w0, w22
 	str	w0, [x29,108]
-	ldr	x0, [x19,2864]
+	ldr	x0, [x19,2880]
 	ldrsh	w19, [x0,134]
 	strh	wzr, [x0,146]
-.L1454:
+.L1466:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x0,576]
 	cmp	w19, w1
-	bge	.L1484
+	bge	.L1496
 	sxtw	x22, w19
 	ldr	x27, [x0,584]
 	ldr	w1, [x29,108]
 	add	x27, x27, x22, lsl 2
 	ldrb	w2, [x27,3]
-	cbz	w2, .L1455
-	ldrb	w5, [x0,3300]
-	ldrh	w6, [x0,3298]
-	ldr	x4, [x0,2864]
+	cbz	w2, .L1467
+	ldrb	w5, [x0,3572]
+	ldrh	w6, [x0,3570]
+	ldr	x4, [x0,2880]
 	mov	w0, 0
 	mov	w1, w0
-.L1456:
+.L1468:
 	cmp	w0, w5
-	bge	.L1485
+	bge	.L1497
 	ldrb	w2, [x27,3]
 	asr	w2, w2, w0
-	tbnz	x2, 0, .L1457
+	tbnz	x2, 0, .L1469
 	add	w1, w6, w1
 	sxth	w1, w1
-	b	.L1458
-.L1457:
+	b	.L1470
+.L1469:
 	ldrh	w2, [x4,146]
 	add	w2, w2, 1
 	strh	w2, [x4,146]
-.L1458:
+.L1470:
 	add	w0, w0, 1
-	b	.L1456
-.L1485:
-	cbz	w1, .L1460
+	b	.L1468
+.L1497:
+	cbz	w1, .L1472
 	sdiv	w1, w23, w1
 	add	w1, w1, 1
 	sxth	w1, w1
-	b	.L1455
-.L1460:
+	b	.L1467
+.L1472:
 	ldrb	w0, [x27,2]
 	orr	w0, w0, -32
 	strb	w0, [x27,2]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0,600]
 	strh	w25, [x0,x22,lsl 1]
-.L1455:
+.L1467:
 	add	x20, x21, :lo12:.LANCHOR0
 	smull	x0, w19, w24
 	ldr	x2, [x20,528]
@@ -9192,112 +9461,112 @@ zftl_sblk_list_init:
 	ldrb	w1, [x27,2]
 	and	w0, w1, 224
 	cmp	w0, 224
-	beq	.L1463
+	beq	.L1475
 	cmp	w0, 32
 	cset	w28, eq
-	cbnz	w28, .L1463
+	cbnz	w28, .L1475
 	ldr	x2, [x20,608]
 	ldrh	w4, [x2,16]
 	cmp	w19, w4
-	beq	.L1463
+	beq	.L1475
 	ldrh	w4, [x2,48]
 	cmp	w19, w4
-	beq	.L1463
+	beq	.L1475
 	ldrh	w2, [x2,80]
 	cmp	w19, w2
-	beq	.L1463
+	beq	.L1475
 	cmp	w0, 64
-	bne	.L1465
+	bne	.L1477
 	uxth	w27, w19
 	add	x0, x20, 616
 	mov	w1, w27
-	add	x2, x20, 2850
-	b	.L1482
-.L1465:
+	add	x2, x20, 2866
+	b	.L1494
+.L1477:
 	cmp	w0, 96
-	bne	.L1466
+	bne	.L1478
 	uxth	w27, w19
-	add	x0, x20, 3312
+	add	x0, x20, 3584
 	mov	w1, w27
-	add	x2, x20, 2852
-	b	.L1482
-.L1466:
+	add	x2, x20, 2868
+	b	.L1494
+.L1478:
 	cmp	w0, 160
-	bne	.L1467
+	bne	.L1479
 	uxth	w27, w19
-	add	x0, x20, 3304
+	add	x0, x20, 3576
 	mov	w1, w27
-	add	x2, x20, 2854
-.L1482:
+	add	x2, x20, 2870
+.L1494:
 	bl	_insert_data_list
 	ldr	x0, [x20,600]
 	ldrh	w0, [x0,x22,lsl 1]
 	cmp	w0, 7
-	bhi	.L1463
+	bhi	.L1475
 	mov	w0, w27
 	mov	w1, 1
 	mov	w2, w28
-	b	.L1480
-.L1467:
-	cbnz	w0, .L1463
+	b	.L1492
+.L1479:
+	cbnz	w0, .L1475
 	ldr	x0, [x20,600]
 	ldrh	w2, [x0,x22,lsl 1]
-	cbz	w2, .L1468
+	cbz	w2, .L1480
 	mov	x0, x26
 	mov	w1, w19
 	bl	printk
 	ldrb	w0, [x27,2]
-	tbz	x0, 4, .L1469
+	tbz	x0, 4, .L1481
 	mov	w1, 5
-	b	.L1476
-.L1469:
+	b	.L1488
+.L1481:
 	mov	w1, 2
-.L1476:
+.L1488:
 	bfi	w0, w1, 5, 3
 	mov	w2, 0
 	strb	w0, [x27,2]
 	mov	w1, 1
 	mov	w0, w19
-.L1480:
+.L1492:
 	bl	gc_add_sblk
-	b	.L1463
-.L1468:
+	b	.L1475
+.L1480:
 	ands	w1, w1, 24
 	add	x2, x21, :lo12:.LANCHOR0
-	bne	.L1471
-	add	x0, x2, 3336
+	bne	.L1483
+	add	x0, x2, 3608
 	mov	w1, w19
-	add	x2, x2, 2844
-	b	.L1478
-.L1471:
+	add	x2, x2, 2860
+	b	.L1490
+.L1483:
 	cmp	w1, 16
-	bne	.L1472
-	add	x0, x2, 3344
+	bne	.L1484
+	add	x0, x2, 3616
 	mov	w1, w19
-	add	x2, x2, 2846
-	b	.L1478
-.L1472:
-	add	x0, x2, 3352
+	add	x2, x2, 2862
+	b	.L1490
+.L1484:
+	add	x0, x2, 3624
 	mov	w1, w19
-	add	x2, x2, 2848
-.L1478:
+	add	x2, x2, 2864
+.L1490:
 	bl	_insert_free_list
-.L1463:
+.L1475:
 	add	w19, w19, 1
 	sxth	w19, w19
-	b	.L1454
-.L1484:
-	ldr	x1, [x0,2864]
-	ldrh	w2, [x0,2844]
+	b	.L1466
+.L1496:
+	ldr	x1, [x0,2880]
+	ldrh	w2, [x0,2860]
 	strh	w2, [x1,114]
-	ldrh	w2, [x0,2846]
+	ldrh	w2, [x0,2862]
 	strh	w2, [x1,118]
-	ldrh	w2, [x0,2848]
+	ldrh	w2, [x0,2864]
 	strh	w2, [x1,116]
-	ldrh	w2, [x0,2850]
+	ldrh	w2, [x0,2866]
 	strh	w2, [x1,122]
-	ldrh	w2, [x0,2854]
-	ldrh	w0, [x0,2852]
+	ldrh	w2, [x0,2870]
+	ldrh	w0, [x0,2868]
 	strh	w2, [x1,120]
 	strh	w0, [x1,124]
 	ldp	x19, x20, [sp,16]
@@ -9309,223 +9578,212 @@ zftl_sblk_list_init:
 	ret
 	.size	zftl_sblk_list_init, .-zftl_sblk_list_init
 	.align	2
-	.global	ftl_open_sblk_init
-	.type	ftl_open_sblk_init, %function
-ftl_open_sblk_init:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	adrp	x20, .LC120
-	adrp	x23, .LANCHOR0
-	stp	x25, x26, [sp,64]
-	stp	x21, x22, [sp,32]
-	stp	x27, x28, [sp,80]
-	mov	x19, x0
-	mov	w21, w1
-	add	x25, x0, 16
-	mov	x26, x23
-	add	x20, x20, :lo12:.LC120
-	mov	w24, -1
-.L1487:
-.L1490:
-	mov	w0, w21
-	bl	ftl_alloc_sblk
-	uxth	w22, w0
-	mov	w1, 0
-	bl	ftl_erase_sblk
-	mov	x1, x25
-	mov	w0, w22
-	bl	ftl_get_blk_list_in_sblk
-	uxtb	w2, w0
-	add	x0, x23, :lo12:.LANCHOR0
-	strh	w22, [x19]
-	strb	w2, [x19,9]
-	cmp	w21, 2
-	strh	wzr, [x19,2]
-	mov	w3, 0
-	ldrh	w1, [x0,3324]
-	strb	wzr, [x19,5]
-	strh	wzr, [x19,10]
-	mul	w2, w1, w2
-	strh	w2, [x19,6]
-	strb	w21, [x19,4]
-	beq	.L1488
-	ldrb	w3, [x0,3300]
-	mul	w3, w1, w3
-	uxth	w3, w3
-.L1488:
-	add	x27, x26, :lo12:.LANCHOR0
-	strh	w3, [x19,12]
-	ubfiz	x28, x22, 1, 16
-	ldrb	w2, [x27,3300]
-	ldr	x0, [x27,3880]
-	add	x0, x0, x3, uxth 2
-	mul	w2, w1, w2
-	mov	w1, 255
-	lsl	w2, w2, 2
-	bl	ftl_memset
-	ldr	x0, [x27,600]
-	ldrh	w1, [x19,6]
-	strh	w1, [x0,x28]
-	ldrb	w0, [x19,9]
-	cbnz	w0, .L1486
-	mov	x0, x20
-	mov	w1, w22
-	bl	printk
-	ldr	x0, [x27,600]
-	strh	w24, [x0,x28]
-	mov	w0, 7
-	strb	w0, [x19,4]
-	b	.L1490
-.L1486:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	ftl_open_sblk_init, .-ftl_open_sblk_init
-	.align	2
 	.global	pm_free_sblk
 	.type	pm_free_sblk, %function
 pm_free_sblk:
 	stp	x29, x30, [sp, -368]!
+	adrp	x0, .LANCHOR3
 	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR4
-	add	x0, x23, :lo12:.LANCHOR4
+	add	x1, x0, :lo12:.LANCHOR3
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldrh	w0, [x0,1180]
-	cmp	w0, 128
-	bls	.L1493
-	adrp	x1, .LANCHOR3
+	mov	x19, x0
+	ldrh	w1, [x1,1456]
+	cmp	w1, 128
+	bls	.L1499
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 78
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 84
 	add	x1, x1, 96
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1493:
-	add	x28, x29, 112
-	mov	w1, 0
-	mov	w2, 256
-	mov	x0, x28
+.L1499:
 	adrp	x21, .LANCHOR0
-	bl	ftl_memset
-	add	x2, x21, :lo12:.LANCHOR0
-	mov	w0, 21
-	mov	w1, 1
-	mov	x3, 0
-	ldrh	w6, [x2,3264]
-	ldr	x4, [x2,2864]
-	sub	w0, w0, w6
-	ldrb	w8, [x2,3266]
-	lsl	w0, w1, w0
-	add	x1, x23, :lo12:.LANCHOR4
-	ldrh	w7, [x4,698]
-	sub	w0, w0, #1
-	ldrh	w9, [x1,1180]
-.L1494:
+	mov	x1, 0
+	add	x0, x21, :lo12:.LANCHOR0
+	mov	w2, w1
+	mov	w6, 65535
+	ldr	x3, [x0,2880]
+	add	x0, x19, :lo12:.LANCHOR3
+	ldrh	w4, [x3,688]
+	ldrh	w5, [x0,1456]
+.L1502:
+	add	x7, x3, x1, lsl 1
+	uxth	w0, w1
+	ldrh	w7, [x7,416]
+	cmp	w7, w6
+	beq	.L1500
+	add	w2, w2, 1
+	uxth	w2, w2
+.L1500:
+	cmp	w2, w4
+	bcs	.L1501
+	cmp	w2, w5
+	bcs	.L1501
+	add	x1, x1, 1
+	cmp	x1, 128
+	bne	.L1502
+	mov	w0, w1
+.L1501:
+	add	w0, w0, 1
+	mov	w19, 128
+	add	x23, x29, 112
+	mov	w1, 0
+	uxth	w0, w0
+	mov	w2, 256
+	cmp	w0, 128
+	csel	w19, w0, w19, ls
+	mov	x0, x23
+	bl	ftl_memset
+	uxth	w19, w19
+	add	x1, x21, :lo12:.LANCHOR0
+	mov	w0, 24
+	mov	x3, 0
+	ldrb	w2, [x1,744]
+	ldr	x4, [x1,2880]
+	ldrh	w6, [x1,3536]
+	sub	w2, w0, w2
+	mov	w0, 1
+	ldrb	w8, [x1,3538]
+	sub	w2, w2, w6
+	ldrh	w7, [x4,698]
+	lsl	w2, w0, w2
+	sub	w2, w2, #1
+.L1503:
 	cmp	w7, w3, uxth
-	bls	.L1519
-	add	x1, x4, x3, lsl 2
-	mov	x2, 0
-	ldr	w1, [x1,704]
+	bls	.L1531
+	add	x0, x4, x3, lsl 2
+	ldr	w1, [x0,704]
+	mov	x0, 0
 	lsr	w1, w1, w6
-	and	w1, w1, w0
+	and	w1, w1, w2
 	udiv	w1, w1, w8
 	uxth	w1, w1
-.L1495:
-	cmp	w9, w2, uxth
-	bls	.L1520
-	add	x5, x4, x2, lsl 1
+.L1504:
+	cmp	w19, w0, uxth
+	bls	.L1532
+	add	x5, x4, x0, lsl 1
 	ldrh	w5, [x5,416]
 	cmp	w5, w1
-	bne	.L1496
-	ldrh	w5, [x28,x2,lsl 1]
+	bne	.L1505
+	ldrh	w5, [x23,x0,lsl 1]
 	add	w5, w5, 1
-	strh	w5, [x28,x2,lsl 1]
-.L1496:
-	add	x2, x2, 1
-	b	.L1495
-.L1520:
+	strh	w5, [x23,x0,lsl 1]
+.L1505:
+	add	x0, x0, 1
+	b	.L1504
+.L1532:
 	add	x3, x3, 1
-	b	.L1494
-.L1519:
+	b	.L1503
+.L1531:
 	add	x1, x21, :lo12:.LANCHOR0
-	mov	w25, 0
-	adrp	x24, .LC133
-	mov	w19, w25
-	adrp	x26, .LANCHOR2
-	mov	w27, -1
-	ldrb	w0, [x1,3300]
-	add	x24, x24, :lo12:.LC133
-	ldrh	w20, [x1,3324]
-	mul	w20, w0, w20
-	uxth	w20, w20
-.L1499:
-	add	x0, x23, :lo12:.LANCHOR4
-	ldrh	w0, [x0,1180]
-	cmp	w0, w19
-	bls	.L1521
-	add	x0, x21, :lo12:.LANCHOR0
-	sxtw	x22, w19
-	add	x1, x22, 208
-	ldr	x4, [x0,2864]
-	ldrb	w2, [x0,3266]
-	ldrh	w3, [x4,x1,lsl 1]
-	ldrh	w1, [x4,692]
-	sdiv	w1, w1, w2
+	mov	x20, 0
+	mov	w28, 65535
+	adrp	x25, .LC134
+	adrp	x26, .LC135
+	mov	w24, w20
+	ldrb	w0, [x1,3572]
+	mov	w27, w28
+	ldrh	w22, [x1,3596]
+	add	x25, x25, :lo12:.LC134
+	add	x26, x26, :lo12:.LC135
+	mul	w22, w0, w22
+	uxth	w22, w22
+.L1508:
+	uxth	w5, w20
+	cmp	w5, w19
+	bcs	.L1533
+	add	x2, x21, :lo12:.LANCHOR0
+	mov	w7, w20
+	ldr	x0, [x2,2880]
+	add	x1, x0, x20, sxtw 1
+	ldrb	w4, [x2,3538]
+	ldrh	w3, [x1,416]
+	ldrh	w1, [x0,692]
+	sdiv	w1, w1, w4
 	cmp	w1, w3
-	bne	.L1500
-	ldrb	w1, [x0,3300]
-	ldrh	w0, [x0,3324]
-	mul	w0, w1, w0
-	strh	w0, [x28,w19,sxtw 1]
-.L1500:
-	ldrh	w0, [x28,x22,lsl 1]
-	cmp	w20, w0
-	bls	.L1501
-	cmp	w0, wzr
-	csel	w25, w25, w19, eq
-	csel	w20, w20, w0, eq
-.L1501:
-	cbnz	w0, .L1503
-	mov	w0, 65535
-	cmp	w3, w0
-	beq	.L1503
-	ldr	w0, [x26,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1504
+	bne	.L1509
+	ldrb	w1, [x2,3572]
+	ldrh	w2, [x2,3596]
+	mul	w1, w1, w2
+	strh	w1, [x23,x20,lsl 1]
+.L1509:
+	ldrh	w2, [x23,x20,lsl 1]
+	cmp	w22, w2
+	bls	.L1510
+	cmp	w2, wzr
+	csel	w24, w24, w5, eq
+	csel	w22, w22, w2, eq
+.L1510:
+	cmp	w3, w27
+	beq	.L1512
+	ldrh	w1, [x0,74]
+	cmp	w1, 2
+	bls	.L1512
+	add	x4, x21, :lo12:.LANCHOR0
+	ubfiz	x1, x3, 2, 16
+	ldrh	w0, [x0,92]
+	ldr	x4, [x4,584]
+	add	w0, w0, 4
+	ldrh	w4, [x4,x1]
+	and	w4, w4, 2047
+	cmp	w4, w0
+	bgt	.L1512
+	mov	w1, w7
+	mov	x0, x25
+	str	x5, [x29,96]
+	str	x7, [x29,104]
+	bl	printk
+	ldr	x5, [x29,96]
+	ldr	x7, [x29,104]
+	mov	w28, w5
+.L1512:
+	ldrh	w2, [x23,x20,lsl 1]
+	cbnz	w2, .L1513
+	add	x0, x21, :lo12:.LANCHOR0
+	sxtw	x5, w7
+	ldr	x4, [x0,2880]
+	add	x0, x5, 208
+	ldrh	w3, [x4,x0,lsl 1]
+	cmp	w3, w27
+	beq	.L1513
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L1514
 	ldrh	w4, [x4,688]
-	mov	x0, x24
-	mov	w1, w19
-	mov	w2, 0
+	mov	x0, x26
+	mov	w1, w7
+	str	x5, [x29,104]
 	bl	printk
-.L1504:
+	ldr	x5, [x29,104]
+.L1514:
 	add	x1, x21, :lo12:.LANCHOR0
-	add	x22, x22, 208
-	str	x1, [x29,104]
-	ldr	x0, [x1,2864]
-	ldrh	w0, [x0,x22,lsl 1]
+	add	x5, x5, 208
+	str	x1, [x29,96]
+	str	x5, [x29,104]
+	ldr	x0, [x1,2880]
+	ldrh	w0, [x0,x5,lsl 1]
 	bl	ftl_free_sblk
-	ldr	x1, [x29,104]
-	ldr	x0, [x1,2864]
-	strh	w27, [x0,x22,lsl 1]
+	ldr	x1, [x29,96]
+	ldr	x5, [x29,104]
+	ldr	x0, [x1,2880]
+	mov	w1, -1
+	strh	w1, [x0,x5,lsl 1]
 	ldrh	w1, [x0,688]
 	sub	w1, w1, #1
 	strh	w1, [x0,688]
-.L1503:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L1499
-.L1521:
-	mov	w0, w25
+.L1513:
+	add	x20, x20, 1
+	b	.L1508
+.L1533:
+	mov	w0, 65535
+	cmp	w28, w0
+	csel	w0, w24, w28, eq
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9555,15 +9813,15 @@ flash_info_data_init:
 	ldr	w0, [x1,#:lo12:.LANCHOR2]
 	stp	x19, x20, [sp,16]
 	mov	x20, x1
-	tbz	x0, 12, .L1524
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
+	tbz	x0, 12, .L1536
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
 	mov	w1, 105
 	add	x2, x2, 112
 	bl	printk
-.L1524:
+.L1536:
 	adrp	x19, .LANCHOR0
 	mov	w1, 0
 	add	x19, x19, :lo12:.LANCHOR0
@@ -9598,14 +9856,14 @@ flash_info_data_init:
 	.type	ftl_memcpy32, %function
 ftl_memcpy32:
 	mov	x3, 0
-.L1529:
+.L1541:
 	cmp	w2, w3
-	bls	.L1531
+	bls	.L1543
 	ldr	w4, [x1,x3,lsl 2]
 	str	w4, [x0,x3,lsl 2]
 	add	x3, x3, 1
-	b	.L1529
-.L1531:
+	b	.L1541
+.L1543:
 	ret
 	.size	ftl_memcpy32, .-ftl_memcpy32
 	.align	2
@@ -9627,8 +9885,8 @@ timer_get_time:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	x1, [x0,#:lo12:jiffies]
-	adrp	x0, .LANCHOR4+1184
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1184]
+	adrp	x0, .LANCHOR3+1464
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1464]
 	sub	x0, x1, x0
 	bl	jiffies_to_msecs
 	ldp	x29, x30, [sp], 16
@@ -9648,10 +9906,10 @@ StorageSysDataLoad:
 	mov	w1, 0
 	bl	ftl_memset
 	bl	rknand_device_lock
-	adrp	x0, .LANCHOR4+1192
+	adrp	x0, .LANCHOR3+1472
 	mov	x2, x19
 	mov	w1, 1
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x3, [x0,24]
 	mov	w0, w20
 	blr	x3
@@ -9671,10 +9929,10 @@ StorageSysDataStore:
 	str	x0, [x29,16]
 	str	x1, [x29,24]
 	bl	rknand_device_lock
-	adrp	x1, .LANCHOR4+1192
+	adrp	x1, .LANCHOR3+1472
 	ldr	x2, [x29,24]
 	ldr	x0, [x29,16]
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1192]
+	ldr	x1, [x1,#:lo12:.LANCHOR3+1472]
 	ldr	x3, [x1,32]
 	mov	w1, 1
 	blr	x3
@@ -9694,11 +9952,11 @@ FlashBootVendorRead:
 	str	x1, [x29,32]
 	str	x2, [x29,40]
 	bl	rknand_device_lock
-	adrp	x3, .LANCHOR4+1192
+	adrp	x3, .LANCHOR3+1472
 	ldr	x1, [x29,32]
 	ldr	x2, [x29,40]
 	ldr	x0, [x29,24]
-	ldr	x3, [x3,#:lo12:.LANCHOR4+1192]
+	ldr	x3, [x3,#:lo12:.LANCHOR3+1472]
 	ldr	x3, [x3,8]
 	blr	x3
 	str	x0, [x29,40]
@@ -9717,11 +9975,11 @@ FlashBootVendorWrite:
 	str	x1, [x29,32]
 	str	x2, [x29,40]
 	bl	rknand_device_lock
-	adrp	x3, .LANCHOR4+1192
+	adrp	x3, .LANCHOR3+1472
 	ldr	x1, [x29,32]
 	ldr	x2, [x29,40]
 	ldr	x0, [x29,24]
-	ldr	x3, [x3,#:lo12:.LANCHOR4+1192]
+	ldr	x3, [x3,#:lo12:.LANCHOR3+1472]
 	ldr	x3, [x3,16]
 	blr	x3
 	str	x0, [x29,40]
@@ -9734,20 +9992,20 @@ FlashBootVendorWrite:
 	.global	flash_sram_load_store
 	.type	flash_sram_load_store, %function
 flash_sram_load_store:
-	adrp	x4, .LANCHOR4+1200
+	adrp	x4, .LANCHOR3+1480
 	mov	x6, x0
 	stp	x29, x30, [sp, -16]!
 	uxtw	x1, w1
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+1200]
+	ldr	x4, [x4,#:lo12:.LANCHOR3+1480]
 	add	x4, x4, 4096
-	cbnz	w2, .L1539
+	cbnz	w2, .L1551
 	add	x1, x4, x1
-	b	.L1541
-.L1539:
+	b	.L1553
+.L1551:
 	add	x0, x4, x1
 	mov	x1, x6
-.L1541:
+.L1553:
 	mov	w2, w3
 	bl	ftl_memcpy
 	ldp	x29, x30, [sp], 16
@@ -9764,13 +10022,13 @@ FlashCs123Init:
 	.type	rk_ftl_de_init, %function
 rk_ftl_de_init:
 	stp	x29, x30, [sp, -16]!
-	adrp	x0, .LC135
+	adrp	x0, .LC137
 	mov	w1, 0
 	add	x29, sp, 0
-	add	x0, x0, :lo12:.LC135
+	add	x0, x0, :lo12:.LC137
 	bl	printk
-	adrp	x0, .LANCHOR4+1192
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	adrp	x0, .LANCHOR3+1472
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x0, [x0,80]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -9780,10 +10038,10 @@ rk_ftl_de_init:
 	.global	rk_ftl_cache_write_back
 	.type	rk_ftl_cache_write_back, %function
 rk_ftl_cache_write_back:
-	adrp	x0, .LANCHOR4+1192
+	adrp	x0, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x1, [x0,64]
 	mov	w0, 0
 	blr	x1
@@ -9794,10 +10052,10 @@ rk_ftl_cache_write_back:
 	.global	rk_nand_suspend
 	.type	rk_nand_suspend, %function
 rk_nand_suspend:
-	adrp	x0, .LANCHOR4+1192
+	adrp	x0, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x0, [x0,88]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -9807,10 +10065,10 @@ rk_nand_suspend:
 	.global	rk_nand_resume
 	.type	rk_nand_resume, %function
 rk_nand_resume:
-	adrp	x0, .LANCHOR4+1192
+	adrp	x0, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x0, [x0,96]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -9820,10 +10078,10 @@ rk_nand_resume:
 	.global	rk_ftl_get_capacity
 	.type	rk_ftl_get_capacity, %function
 rk_ftl_get_capacity:
-	adrp	x0, .LANCHOR4+1192
+	adrp	x0, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x1, [x0,72]
 	mov	w0, 0
 	blr	x1
@@ -9834,10 +10092,10 @@ rk_ftl_get_capacity:
 	.global	rk_nandc_get_irq_status
 	.type	rk_nandc_get_irq_status, %function
 rk_nandc_get_irq_status:
-	adrp	x1, .LANCHOR4+1192
+	adrp	x1, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1192]
+	ldr	x1, [x1,#:lo12:.LANCHOR3+1472]
 	ldr	x1, [x1,120]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -9847,10 +10105,10 @@ rk_nandc_get_irq_status:
 	.global	rknand_proc_ftlread
 	.type	rknand_proc_ftlread, %function
 rknand_proc_ftlread:
-	adrp	x1, .LANCHOR4+1192
+	adrp	x1, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1192]
+	ldr	x1, [x1,#:lo12:.LANCHOR3+1472]
 	ldr	x1, [x1,128]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -9860,11 +10118,11 @@ rknand_proc_ftlread:
 	.global	FtlRead
 	.type	FtlRead, %function
 FtlRead:
-	adrp	x4, .LANCHOR4+1192
+	adrp	x4, .LANCHOR3+1472
 	uxtb	w0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+1192]
+	ldr	x4, [x4,#:lo12:.LANCHOR3+1472]
 	ldr	x4, [x4,40]
 	blr	x4
 	ldp	x29, x30, [sp], 16
@@ -9874,10 +10132,10 @@ FtlRead:
 	.global	FtlDiscard
 	.type	FtlDiscard, %function
 FtlDiscard:
-	adrp	x2, .LANCHOR4+1192
+	adrp	x2, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x2, [x2,#:lo12:.LANCHOR4+1192]
+	ldr	x2, [x2,#:lo12:.LANCHOR3+1472]
 	ldr	x2, [x2,56]
 	blr	x2
 	ldp	x29, x30, [sp], 16
@@ -9887,10 +10145,10 @@ FtlDiscard:
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
 rk_ftl_garbage_collect:
-	adrp	x2, .LANCHOR4+1192
+	adrp	x2, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x2, [x2,#:lo12:.LANCHOR4+1192]
+	ldr	x2, [x2,#:lo12:.LANCHOR3+1472]
 	ldr	x2, [x2,104]
 	blr	x2
 	ldp	x29, x30, [sp], 16
@@ -9900,10 +10158,10 @@ rk_ftl_garbage_collect:
 	.global	ReadFlashInfo
 	.type	ReadFlashInfo, %function
 ReadFlashInfo:
-	adrp	x1, .LANCHOR4+1192
+	adrp	x1, .LANCHOR3+1472
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1192]
+	ldr	x1, [x1,#:lo12:.LANCHOR3+1472]
 	ldr	x1, [x1,112]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -9919,8 +10177,8 @@ rknand_print_hex:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	mov	x19, 0
-	adrp	x23, .LC136
-	adrp	x21, .LC137
+	adrp	x23, .LC138
+	adrp	x21, .LC139
 	adrp	x24, .LC1
 	stp	x25, x26, [sp,64]
 	str	x27, [sp,80]
@@ -9929,48 +10187,48 @@ rknand_print_hex:
 	mov	w25, w2
 	uxtw	x26, w3
 	mov	w20, w19
-	add	x23, x23, :lo12:.LC136
-	add	x21, x21, :lo12:.LC137
+	add	x23, x23, :lo12:.LC138
+	add	x21, x21, :lo12:.LC139
 	add	x24, x24, :lo12:.LC1
-.L1555:
+.L1567:
 	cmp	x19, x26
-	beq	.L1563
-	cbnz	w20, .L1556
+	beq	.L1575
+	cbnz	w20, .L1568
 	mov	x0, x23
 	mov	x1, x27
 	mov	x2, x22
 	mov	w3, w19
 	bl	printk
-.L1556:
+.L1568:
 	cmp	w25, 4
 	mov	x0, x21
-	bne	.L1557
+	bne	.L1569
 	ldr	w1, [x22,x19,lsl 2]
-	b	.L1562
-.L1557:
+	b	.L1574
+.L1569:
 	cmp	w25, 2
-	bne	.L1559
+	bne	.L1571
 	ldrsh	w1, [x22,x19,lsl 1]
-	b	.L1562
-.L1559:
+	b	.L1574
+.L1571:
 	ldrb	w1, [x22,x19]
-.L1562:
+.L1574:
 	bl	printk
 	add	w20, w20, 1
 	cmp	w20, 15
-	bls	.L1560
-	adrp	x1, .LC138
+	bls	.L1572
+	adrp	x1, .LC140
 	mov	x0, x24
-	add	x1, x1, :lo12:.LC138
+	add	x1, x1, :lo12:.LC140
 	mov	w20, 0
 	bl	printk
-.L1560:
+.L1572:
 	add	x19, x19, 1
-	b	.L1555
-.L1563:
+	b	.L1567
+.L1575:
 	adrp	x0, .LC1
-	adrp	x1, .LC138
-	add	x1, x1, :lo12:.LC138
+	adrp	x1, .LC140
+	add	x1, x1, :lo12:.LC140
 	add	x0, x0, :lo12:.LC1
 	bl	printk
 	ldr	x27, [sp,80]
@@ -10009,29 +10267,29 @@ hynix_get_read_retry_default:
 	strb	w2, [x25,129]
 	strb	w1, [x25,130]
 	strb	w0, [x25,131]
-	bne	.L1565
+	bne	.L1577
 	mov	w0, -89
 	strb	w0, [x22,16]
 	adrp	x0, .LANCHOR2+425
 	mov	w1, -9
 	strb	w1, [x0,#:lo12:.LANCHOR2+425]
-	b	.L1628
-.L1565:
+	b	.L1640
+.L1577:
 	cmp	w19, 3
-	bne	.L1567
+	bne	.L1579
 	mov	x5, 0
-.L1568:
+.L1580:
 	sub	w0, w5, #80
 	strb	w0, [x26,x5]
 	add	x5, x5, 1
 	cmp	x5, 8
-	bne	.L1568
+	bne	.L1580
 	mov	w27, w5
 	mov	w28, w5
-	b	.L1566
-.L1567:
+	b	.L1578
+.L1579:
 	cmp	w19, 4
-	bne	.L1569
+	bne	.L1581
 	mov	w5, -52
 	strb	w5, [x25,128]
 	mov	w5, -65
@@ -10047,10 +10305,10 @@ hynix_get_read_retry_default:
 	strb	w1, [x25,134]
 	strb	w5, [x25,132]
 	strb	w0, [x25,135]
-	b	.L1566
-.L1569:
+	b	.L1578
+.L1581:
 	cmp	w19, 5
-	bne	.L1570
+	bne	.L1582
 	mov	w0, 56
 	strb	w0, [x25,128]
 	mov	w0, 57
@@ -10060,10 +10318,10 @@ hynix_get_read_retry_default:
 	strb	w0, [x25,130]
 	mov	w0, 59
 	strb	w0, [x25,131]
-	b	.L1670
-.L1570:
+	b	.L1682
+.L1582:
 	cmp	w19, 6
-	bne	.L1571
+	bne	.L1583
 	mov	w0, 14
 	strb	w0, [x25,128]
 	mov	w0, 15
@@ -10073,27 +10331,27 @@ hynix_get_read_retry_default:
 	strb	w0, [x25,130]
 	mov	w0, 17
 	strb	w0, [x25,131]
-	b	.L1670
-.L1571:
+	b	.L1682
+.L1583:
 	cmp	w19, 7
-	bne	.L1572
+	bne	.L1584
 	mov	x0, 0
-.L1573:
+.L1585:
 	sub	w1, w0, #80
 	strb	w1, [x26,x0]
 	add	x0, x0, 1
 	cmp	x0, 8
-	bne	.L1573
+	bne	.L1585
 	mov	w0, -44
 	mov	w27, 12
 	strb	w0, [x25,136]
 	mov	w28, 10
 	mov	w0, -43
 	strb	w0, [x25,137]
-	b	.L1566
-.L1572:
+	b	.L1578
+.L1584:
 	cmp	w19, 8
-	bne	.L1628
+	bne	.L1640
 	mov	w0, 6
 	strb	w0, [x25,128]
 	mov	w0, 7
@@ -10105,15 +10363,15 @@ hynix_get_read_retry_default:
 	mov	w0, 10
 	mov	w28, 5
 	strb	w0, [x25,132]
-	b	.L1566
-.L1628:
+	b	.L1578
+.L1640:
 	mov	w27, 7
-.L1670:
+.L1682:
 	mov	w28, 4
-.L1566:
+.L1578:
 	sub	w0, w19, #1
 	cmp	w0, 1
-	bhi	.L1667
+	bhi	.L1679
 	ldr	x0, [x29,136]
 	adrp	x24, .LANCHOR2
 	add	x24, x24, :lo12:.LANCHOR2
@@ -10121,10 +10379,10 @@ hynix_get_read_retry_default:
 	add	x19, x0, :lo12:.LANCHOR0
 	mov	w5, 55
 	add	x24, x24, 408
-.L1574:
+.L1586:
 	ldrb	w0, [x19,633]
 	cmp	w0, w23
-	bls	.L1581
+	bls	.L1593
 	add	x0, x19, x23, sxtw
 	ldrb	w0, [x0,736]
 	mov	x20, 160
@@ -10134,7 +10392,7 @@ hynix_get_read_retry_default:
 	madd	x20, x0, x20, x22
 	add	x21, x21, x1
 	add	x20, x20, 32
-.L1576:
+.L1588:
 	str	w5, [x21,2056]
 	str	x5, [x29,136]
 	ldrb	w0, [x26,x25]
@@ -10146,12 +10404,12 @@ hynix_get_read_retry_default:
 	add	x25, x25, 1
 	ldr	x5, [x29,136]
 	cmp	w28, w25, uxtb
-	bhi	.L1576
+	bhi	.L1588
 	mov	x0, 0
-.L1577:
+.L1589:
 	add	w2, w0, 8
 	mov	x1, 0
-.L1578:
+.L1590:
 	add	x3, x1, x0
 	add	x1, x1, 4
 	add	x3, x24, x3
@@ -10161,10 +10419,10 @@ hynix_get_read_retry_default:
 	add	w3, w4, w3
 	strb	w3, [x20,w2,sxtw]
 	add	w2, w2, 8
-	bne	.L1578
+	bne	.L1590
 	add	x0, x0, 1
 	cmp	x0, 4
-	bne	.L1577
+	bne	.L1589
 	add	w23, w23, 1
 	strb	wzr, [x20,16]
 	strb	wzr, [x20,24]
@@ -10174,11 +10432,11 @@ hynix_get_read_retry_default:
 	strb	wzr, [x20,48]
 	strb	wzr, [x20,41]
 	strb	wzr, [x20,49]
-	b	.L1574
-.L1667:
+	b	.L1586
+.L1679:
 	sub	w0, w19, #3
 	cmp	w0, 5
-	bhi	.L1581
+	bhi	.L1593
 	mul	w0, w28, w27
 	sub	w24, w28, #1
 	mov	w20, 0
@@ -10189,17 +10447,17 @@ hynix_get_read_retry_default:
 	uxtb	x24, w24
 	str	w0, [x29,124]
 	sub	w0, w19, #5
-	adrp	x26, .LANCHOR4
+	adrp	x26, .LANCHOR3
 	str	w0, [x29,132]
 	add	x0, x24, 1
 	str	x0, [x29,112]
-.L1582:
+.L1594:
 	ldr	x0, [x29,136]
 	add	x1, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x1,633]
 	cmp	w0, w20
-	bhi	.L1627
-.L1581:
+	bhi	.L1639
+.L1593:
 	strb	w28, [x22,1]
 	strb	w27, [x22,2]
 	ldp	x19, x20, [sp,16]
@@ -10209,7 +10467,7 @@ hynix_get_read_retry_default:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L1627:
+.L1639:
 	add	x0, x1, x20, sxtw
 	ldrb	w24, [x0,736]
 	str	x1, [x29,104]
@@ -10229,7 +10487,7 @@ hynix_get_read_retry_default:
 	bl	nandc_wait_flash_ready
 	cmp	w19, 8
 	ldr	x1, [x29,104]
-	bne	.L1583
+	bne	.L1595
 	mov	w0, 120
 	str	w0, [x24,2056]
 	str	wzr, [x24,2052]
@@ -10249,38 +10507,38 @@ hynix_get_read_retry_default:
 	str	wzr, [x24,2052]
 	str	wzr, [x24,2052]
 	str	w1, [x24,2052]
-	b	.L1673
-.L1583:
+	b	.L1685
+.L1595:
 	mov	w0, 54
 	cmp	w19, 4
 	str	w0, [x24,2056]
-	bne	.L1585
+	bne	.L1597
 	mov	w0, 64
 	str	w1, [x24,2052]
 	str	w0, [x24,2048]
 	mov	w0, 204
-	b	.L1671
-.L1585:
+	b	.L1683
+.L1597:
 	ldr	w0, [x29,132]
 	cmp	w0, 1
-	bhi	.L1587
+	bhi	.L1599
 	ldrb	w0, [x25,128]
 	str	w0, [x24,2052]
 	mov	w0, 82
-	b	.L1672
-.L1587:
+	b	.L1684
+.L1599:
 	cmp	w19, 7
-	bne	.L1586
+	bne	.L1598
 	mov	w0, 174
 	str	w0, [x24,2052]
 	str	wzr, [x24,2048]
 	mov	w0, 176
-.L1671:
+.L1683:
 	str	w0, [x24,2052]
 	mov	w0, 77
-.L1672:
+.L1684:
 	str	w0, [x24,2048]
-.L1586:
+.L1598:
 	mov	w0, 22
 	str	w0, [x24,2056]
 	mov	w0, 23
@@ -10293,15 +10551,15 @@ hynix_get_read_retry_default:
 	cmp	w19, 6
 	str	wzr, [x24,2052]
 	str	wzr, [x24,2052]
-	bne	.L1588
+	bne	.L1600
 	mov	w0, 31
 	str	w0, [x24,2052]
-	b	.L1589
-.L1588:
+	b	.L1601
+.L1600:
 	str	wzr, [x24,2052]
-.L1589:
+.L1601:
 	mov	w0, 2
-.L1673:
+.L1685:
 	str	w0, [x24,2052]
 	mov	w0, 48
 	str	wzr, [x24,2052]
@@ -10312,119 +10570,119 @@ hynix_get_read_retry_default:
 	cset	w8, ls
 	cmp	w19, 8
 	cset	w7, eq
-	cbnz	w8, .L1630
-	cbnz	w7, .L1630
+	cbnz	w8, .L1642
+	cbnz	w7, .L1642
 	cmp	w19, 7
 	mov	w1, 32
 	mov	w0, 2
 	csel	w1, w0, w1, ne
-	b	.L1590
-.L1630:
+	b	.L1602
+.L1642:
 	mov	w1, 16
-.L1590:
-	adrp	x0, .LANCHOR4
+.L1602:
+	adrp	x0, .LANCHOR3
 	mov	x9, 0
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x0, [x0,1208]
-.L1591:
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x0, [x0,1488]
+.L1603:
 	ldr	w10, [x24,2048]
 	strb	w10, [x0,x9]
 	add	x9, x9, 1
 	cmp	w1, w9, uxtb
-	bhi	.L1591
-	cbz	w7, .L1592
+	bhi	.L1603
+	cbz	w7, .L1604
 	mov	w1, 0
-.L1594:
+.L1606:
 	ldrb	w9, [x0]
 	cmp	w9, 50
-	beq	.L1593
+	beq	.L1605
 	ldrb	w9, [x0,1]
 	cmp	w9, 5
-	beq	.L1593
+	beq	.L1605
 	add	w1, w1, 1
 	add	x0, x0, 4
 	uxtb	w1, w1
 	cmp	w1, 8
-	bne	.L1594
-	b	.L1595
-.L1593:
+	bne	.L1606
+	b	.L1607
+.L1605:
 	cmp	w1, 7
-	bne	.L1596
-.L1595:
-	adrp	x0, .LC139
+	bne	.L1608
+.L1607:
+	adrp	x0, .LC141
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC141
 	bl	printk
-.L1597:
-	b	.L1597
-.L1592:
+.L1609:
+	b	.L1609
+.L1604:
 	cmp	w19, 7
-	bne	.L1598
+	bne	.L1610
 	mov	w1, w7
-.L1600:
+.L1612:
 	ldrb	w9, [x0]
 	cmp	w9, 12
-	beq	.L1599
+	beq	.L1611
 	ldrb	w9, [x0,1]
 	cmp	w9, 10
-	beq	.L1599
+	beq	.L1611
 	add	w1, w1, 1
 	add	x0, x0, 4
 	uxtb	w1, w1
 	cmp	w1, 8
-	bne	.L1600
-	b	.L1601
-.L1599:
+	bne	.L1612
+	b	.L1613
+.L1611:
 	cmp	w1, 7
-	bne	.L1596
-.L1601:
-	adrp	x0, .LC139
+	bne	.L1608
+.L1613:
+	adrp	x0, .LC141
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC141
 	bl	printk
-.L1602:
-	b	.L1602
-.L1598:
+.L1614:
+	b	.L1614
+.L1610:
 	cmp	w19, 6
-	bne	.L1596
+	bne	.L1608
 	mov	x1, 0
-.L1603:
+.L1615:
 	ldrb	w9, [x0,x1]
 	cmp	w9, 12
-	beq	.L1596
+	beq	.L1608
 	add	x9, x0, x1
 	ldrb	w9, [x9,8]
 	cmp	w9, 4
-	beq	.L1596
+	beq	.L1608
 	add	x1, x1, 1
 	cmp	x1, 8
-	bne	.L1603
-	adrp	x0, .LC139
+	bne	.L1615
+	adrp	x0, .LC141
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC141
 	bl	printk
-.L1605:
-	b	.L1605
-.L1596:
-	add	x0, x26, :lo12:.LANCHOR4
-	ldr	x10, [x0,1208]
+.L1617:
+	b	.L1617
+.L1608:
+	add	x0, x26, :lo12:.LANCHOR3
+	ldr	x10, [x0,1488]
 	mov	x0, 0
-.L1606:
+.L1618:
 	ldr	w1, [x29,128]
 	cmp	w1, w0
-	ble	.L1675
+	ble	.L1687
 	ldr	w1, [x24,2048]
 	strb	w1, [x10,x0]
 	add	x0, x0, 1
-	b	.L1606
-.L1675:
-	add	x0, x26, :lo12:.LANCHOR4
+	b	.L1618
+.L1687:
+	add	x0, x26, :lo12:.LANCHOR3
 	mov	w11, w23
 	mov	w9, 8
-	ldr	x12, [x0,1208]
-.L1609:
+	ldr	x12, [x0,1488]
+.L1621:
 	mov	w0, 0
-.L1608:
+.L1620:
 	add	w1, w0, w11
 	add	w0, w0, 1
 	sbfiz	x1, x1, 1, 32
@@ -10432,93 +10690,93 @@ hynix_get_read_retry_default:
 	ldrh	w13, [x12,x1]
 	mvn	w13, w13
 	strh	w13, [x12,x1]
-	bne	.L1608
+	bne	.L1620
 	ldr	w0, [x29,124]
 	subs	w9, w9, #1
 	add	w11, w11, w0
-	bne	.L1609
+	bne	.L1621
 	mov	x9, 0
 	mov	w17, 1
-.L1610:
+.L1622:
 	mov	w1, 0
 	mov	w11, w1
-.L1614:
+.L1626:
 	lsl	w13, w17, w11
 	mov	w15, w9
 	mov	w0, 16
 	mov	w14, 0
-.L1612:
+.L1624:
 	ldrh	w16, [x12,w15,sxtw 1]
 	add	w15, w15, w23
 	and	w16, w16, w13
 	cmp	w16, w13
 	csinc	w14, w14, w14, ne
 	subs	w0, w0, #1
-	bne	.L1612
+	bne	.L1624
 	cmp	w14, 8
-	bls	.L1613
+	bls	.L1625
 	orr	w1, w1, w13
 	uxth	w1, w1
-.L1613:
+.L1625:
 	add	w11, w11, 1
 	cmp	w11, 16
-	bne	.L1614
+	bne	.L1626
 	strh	w1, [x12,x9,lsl 1]
 	add	x9, x9, 1
 	cmp	w23, w9
-	bgt	.L1610
-	add	x1, x26, :lo12:.LANCHOR4
+	bgt	.L1622
+	add	x1, x26, :lo12:.LANCHOR3
 	mov	x9, 0
 	mov	w11, w9
-	ldr	x1, [x1,1208]
-.L1617:
+	ldr	x1, [x1,1488]
+.L1629:
 	ldr	w12, [x1,x9]
 	add	x9, x9, 4
 	cmp	w12, wzr
 	csinc	w11, w11, w11, ne
 	cmp	x9, 32
-	bne	.L1617
+	bne	.L1629
 	cmp	w11, 7
-	ble	.L1618
-	adrp	x0, .LC140
+	ble	.L1630
+	adrp	x0, .LC142
 	mov	w2, 1
-	add	x0, x0, :lo12:.LC140
+	add	x0, x0, :lo12:.LC142
 	mov	w3, 1024
 	bl	rknand_print_hex
-	adrp	x0, .LC139
+	adrp	x0, .LC141
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC141
 	bl	printk
-.L1619:
-	b	.L1619
-.L1618:
+.L1631:
+	b	.L1631
+.L1630:
 	cmp	w19, 6
 	mov	w9, 4
-	beq	.L1620
+	beq	.L1632
 	cmp	w19, 7
 	mov	w9, 10
-	beq	.L1620
+	beq	.L1632
 	cmp	w7, wzr
 	mov	w9, 5
 	mov	w1, 8
 	csel	w9, w1, w9, eq
-.L1620:
+.L1632:
 	mov	w11, 0
-.L1621:
+.L1633:
 	mov	x1, 0
-.L1622:
+.L1634:
 	add	w12, w0, w1
 	ldrb	w13, [x10,x1]
 	add	x1, x1, 1
 	cmp	w28, w1, uxtb
 	strb	w13, [x21,w12,sxtw]
-	bhi	.L1622
+	bhi	.L1634
 	add	w11, w11, 1
 	ldr	x1, [x29,112]
 	cmp	w11, w27
 	add	w0, w0, w9
 	add	x10, x10, x1
-	blt	.L1621
+	blt	.L1633
 	mov	w21, 255
 	str	w21, [x24,2056]
 	str	x7, [x29,96]
@@ -10526,7 +10784,7 @@ hynix_get_read_retry_default:
 	bl	nandc_wait_flash_ready
 	ldr	x8, [x29,104]
 	ldr	x7, [x29,96]
-	cbz	w8, .L1624
+	cbz	w8, .L1636
 	mov	w0, 54
 	str	w0, [x24,2056]
 	ldrb	w0, [x25,128]
@@ -10541,17 +10799,17 @@ hynix_get_read_retry_default:
 	str	w21, [x24,2052]
 	str	w21, [x24,2052]
 	str	w21, [x24,2052]
-	b	.L1674
-.L1624:
+	b	.L1686
+.L1636:
 	mov	w0, 190
-	cbnz	w7, .L1674
+	cbnz	w7, .L1686
 	mov	w0, 56
-.L1674:
+.L1686:
 	str	w0, [x24,2056]
 	add	w20, w20, 1
 	bl	nandc_wait_flash_ready
 	uxtb	w20, w20
-	b	.L1582
+	b	.L1594
 	.size	hynix_get_read_retry_default, .-hynix_get_read_retry_default
 	.align	2
 	.global	flash_get_read_retry_tbl
@@ -10564,9 +10822,9 @@ flash_get_read_retry_tbl:
 	sub	w1, w0, #1
 	uxtb	w1, w1
 	cmp	w1, 7
-	bhi	.L1676
+	bhi	.L1688
 	bl	hynix_get_read_retry_default
-.L1676:
+.L1688:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_get_read_retry_tbl, .-flash_get_read_retry_tbl
@@ -10579,84 +10837,81 @@ nandc_xfer_done:
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x20, x19, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,48]
 	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR3
 	ldr	x0, [x20,536]
 	bl	wait_for_nandc_xfer_completed
-	adrp	x0, .LANCHOR4
-	add	x1, x0, :lo12:.LANCHOR4
-	mov	x23, x0
-	strb	wzr, [x1,1216]
-	ldrb	w1, [x20,516]
-	cmp	w1, 9
-	bne	.L1679
-	ldr	x24, [x20,536]
-	ldr	w0, [x24,16]
+	add	x0, x21, :lo12:.LANCHOR3
+	strb	wzr, [x0,1496]
+	ldrb	w0, [x20,516]
+	cmp	w0, 9
+	bne	.L1691
+	ldr	x22, [x20,536]
+	ldr	w0, [x22,16]
 	str	w0, [x29,64]
-	ldr	w20, [x24,48]
+	ldr	w20, [x22,48]
 	ubfx	x20, x20, 1, 1
-	cbnz	w20, .L1699
-	adrp	x21, .LC144
-	adrp	x23, .LC143
-	add	x21, x21, :lo12:.LC144
-	add	x23, x23, :lo12:.LC143
-	b	.L1681
-.L1699:
-	adrp	x21, .LC142
-	adrp	x22, .LC143
-	mov	w20, 0
-	add	x21, x21, :lo12:.LC142
-	add	x22, x22, :lo12:.LC143
-.L1680:
-	ldr	w2, [x24,64]
-	ldr	w1, [x29,64]
+	cbnz	w20, .L1711
+	adrp	x21, .LC146
+	adrp	x23, .LC145
+	add	x21, x21, :lo12:.LC146
+	add	x23, x23, :lo12:.LC145
+	b	.L1693
+.L1711:
+	mov	w1, 0
+.L1692:
+	ldr	w2, [x22,64]
+	ldr	w0, [x29,64]
 	ubfx	x2, x2, 16, 6
-	ubfx	x1, x1, 22, 6
-	cmp	w2, w1
-	bge	.L1683
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,536]
-	ldr	w0, [x0]
+	ubfx	x0, x0, 22, 6
+	cmp	w2, w0
+	bge	.L1695
+	ldr	w0, [x22]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1682
+	tbz	x0, 13, .L1694
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L1682
+	tbz	x0, 17, .L1694
 	ldr	w1, [x29,72]
-	adrp	x0, .LC141
-	add	x0, x0, :lo12:.LC141
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
 	ubfx	x1, x1, 17, 1
 	bl	printk
-	b	.L1683
-.L1682:
+	b	.L1695
+.L1694:
 	ldr	w0, [x29,64]
-	add	w20, w20, 1
+	add	w1, w1, 1
 	ubfx	x0, x0, 22, 6
-	cmp	w20, w0, lsl 12
-	bne	.L1680
-	ldr	w2, [x24,64]
-	mov	w1, w20
+	cmp	w1, w0, lsl 12
+	bne	.L1692
+	ldr	w2, [x22,64]
+	adrp	x0, .LC144
 	ldr	w3, [x29,64]
-	mov	x0, x21
+	add	x0, x0, :lo12:.LC144
 	ubfx	x2, x2, 16, 5
+	add	x21, x21, :lo12:.LANCHOR3
 	ubfx	x3, x3, 22, 6
 	bl	printk
 	add	x1, x19, :lo12:.LANCHOR0
-	mov	x0, x22
+	adrp	x0, .LC145
+	add	x0, x0, :lo12:.LC145
 	mov	w2, 4
 	mov	w3, 64
 	ldr	x1, [x1,536]
 	bl	rknand_print_hex
-	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1680
-	add	x0, x23, :lo12:.LANCHOR4
-	mov	w1, 1
-	strb	w1, [x0,1216]
-.L1683:
+	ldr	w1, [x29,72]
+	mov	w0, 1
+	strb	w0, [x21,1496]
+	tbnz	x1, 13, .L1695
+	mov	x0, 35160
+	movk	x0, 0x41, lsl 16
+	bl	__const_udelay
+.L1695:
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1687
+	cbz	w0, .L1699
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x20,24]
@@ -10667,33 +10922,33 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 2
-	b	.L1727
-.L1689:
-	add	x22, x19, :lo12:.LANCHOR0
+	b	.L1737
+.L1701:
+	add	x24, x19, :lo12:.LANCHOR0
 	add	w20, w20, 1
-	ldr	x0, [x22,536]
+	ldr	x0, [x24,536]
 	ldr	w0, [x0,16]
 	str	w0, [x29,64]
 	and	w0, w20, 16777215
-	cbnz	w0, .L1681
+	cbnz	w0, .L1693
 	ldr	w2, [x29,64]
 	mov	w1, w20
-	ldr	w3, [x24,64]
+	ldr	w3, [x22,64]
 	mov	x0, x21
 	ubfx	x3, x3, 16, 6
 	bl	printk
-	ldr	x1, [x22,536]
+	ldr	x1, [x24,536]
 	mov	x0, x23
 	mov	w2, 4
 	mov	w3, 64
 	bl	rknand_print_hex
-.L1681:
+.L1693:
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L1689
+	tbz	x0, 20, .L1701
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1687
+	cbz	w0, .L1699
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x20,24]
@@ -10704,68 +10959,68 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 2
-	b	.L1726
-.L1679:
-	ldr	x23, [x20,536]
-	ldr	w0, [x23,8]
+	b	.L1736
+.L1691:
+	ldr	x21, [x20,536]
+	ldr	w0, [x21,8]
 	str	w0, [x29,64]
-	ldr	w20, [x23,16]
+	ldr	w20, [x21,16]
 	ubfx	x20, x20, 1, 1
-	cbnz	w20, .L1700
-	adrp	x21, .LC144
-	adrp	x24, .LC143
-	add	x21, x21, :lo12:.LC144
-	add	x24, x24, :lo12:.LC143
-	b	.L1692
-.L1700:
-	adrp	x21, .LC142
-	adrp	x22, .LC143
+	cbnz	w20, .L1712
+	adrp	x22, .LC146
+	adrp	x23, .LC145
+	add	x22, x22, :lo12:.LC146
+	add	x23, x23, :lo12:.LC145
+	b	.L1704
+.L1712:
+	adrp	x22, .LC144
+	adrp	x23, .LC145
 	mov	w20, 0
-	add	x21, x21, :lo12:.LC142
-	add	x22, x22, :lo12:.LC143
-.L1691:
-	ldr	w2, [x23,28]
+	add	x22, x22, :lo12:.LC144
+	add	x23, x23, :lo12:.LC145
+.L1703:
+	ldr	w2, [x21,28]
 	ldr	w1, [x29,64]
 	ubfx	x2, x2, 16, 5
 	ubfx	x1, x1, 22, 6
 	cmp	w2, w1
-	bge	.L1694
+	bge	.L1706
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1693
+	tbz	x0, 13, .L1705
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L1693
+	tbz	x0, 17, .L1705
 	ldr	w1, [x29,72]
-	adrp	x0, .LC145
-	add	x0, x0, :lo12:.LC145
+	adrp	x0, .LC147
+	add	x0, x0, :lo12:.LC147
 	bl	printk
-	b	.L1694
-.L1693:
+	b	.L1706
+.L1705:
 	add	w20, w20, 1
 	and	w0, w20, 16777215
-	cbnz	w0, .L1691
-	ldr	w2, [x23,28]
+	cbnz	w0, .L1703
+	ldr	w2, [x21,28]
 	mov	w1, w20
 	ldr	w3, [x29,64]
-	mov	x0, x21
+	mov	x0, x22
 	ubfx	x2, x2, 16, 5
 	ubfx	x3, x3, 22, 6
 	bl	printk
 	add	x1, x19, :lo12:.LANCHOR0
-	mov	x0, x22
+	mov	x0, x23
 	mov	w2, 4
 	mov	w3, 64
 	ldr	x1, [x1,536]
 	bl	rknand_print_hex
-	b	.L1691
-.L1694:
+	b	.L1703
+.L1706:
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1687
+	cbz	w0, .L1699
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x20,24]
@@ -10776,35 +11031,35 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 7
-.L1727:
+.L1737:
 	mov	w2, 0
-	b	.L1725
-.L1698:
-	add	x22, x19, :lo12:.LANCHOR0
+	b	.L1735
+.L1710:
+	add	x24, x19, :lo12:.LANCHOR0
 	add	w20, w20, 1
-	ldr	x0, [x22,536]
+	ldr	x0, [x24,536]
 	ldr	w0, [x0,8]
 	str	w0, [x29,64]
 	and	w0, w20, 16777215
-	cbnz	w0, .L1692
+	cbnz	w0, .L1704
 	ldr	w2, [x29,64]
 	mov	w1, w20
-	ldr	w3, [x23,28]
-	mov	x0, x21
+	ldr	w3, [x21,28]
+	mov	x0, x22
 	ubfx	x3, x3, 16, 5
 	bl	printk
-	ldr	x1, [x22,536]
-	mov	x0, x24
+	ldr	x1, [x24,536]
+	mov	x0, x23
 	mov	w2, 4
 	mov	w3, 64
 	bl	rknand_print_hex
-.L1692:
+.L1704:
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L1698
+	tbz	x0, 20, .L1710
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1687
+	cbz	w0, .L1699
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x20,24]
@@ -10815,11 +11070,11 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 7
-.L1726:
+.L1736:
 	mov	w2, 1
-.L1725:
+.L1735:
 	bl	rknand_dma_unmap_single
-.L1687:
+.L1699:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -10848,19 +11103,19 @@ nandc_xfer:
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
 	mov	w0, 0
-	cbnz	w20, .L1758
+	cbnz	w20, .L1768
 	adrp	x19, .LANCHOR0
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x2,516]
 	cmp	w1, 9
-	bne	.L1730
+	bne	.L1740
 	ldr	x5, [x2,536]
 	lsr	w22, w22, 2
 	mov	w4, 1
 	mov	w3, w0
-.L1731:
+.L1741:
 	cmp	w3, w22
-	bcs	.L1767
+	bcs	.L1777
 	uxtw	x1, w3
 	add	x1, x1, 84
 	ldr	w1, [x5,x1,lsl 2]
@@ -10872,30 +11127,30 @@ nandc_xfer:
 	and	w1, w1, w2
 	and	w4, w4, w1
 	ldr	w1, [x29,72]
-	tbnz	x1, 2, .L1750
+	tbnz	x1, 2, .L1760
 	ldr	w1, [x29,72]
-	tbnz	x1, 18, .L1750
+	tbnz	x1, 18, .L1760
 	ldr	w2, [x29,72]
 	ldr	w1, [x29,72]
 	ubfx	x2, x2, 3, 7
 	ubfx	x1, x1, 19, 7
 	cmp	w2, w1
 	ldr	w1, [x29,72]
-	ble	.L1733
+	ble	.L1743
 	ubfx	x1, x1, 3, 7
-	b	.L1734
-.L1733:
+	b	.L1744
+.L1743:
 	ubfx	x1, x1, 19, 7
-.L1734:
+.L1744:
 	cmp	w0, w1
 	csel	w0, w0, w1, cs
-	b	.L1732
-.L1750:
+	b	.L1742
+.L1760:
 	mov	w0, -1
-.L1732:
+.L1742:
 	add	w3, w3, 1
-	b	.L1731
-.L1767:
+	b	.L1741
+.L1777:
 	add	x22, x19, :lo12:.LANCHOR0
 	cmp	w4, wzr
 	ldr	x1, [x22,536]
@@ -10906,30 +11161,30 @@ nandc_xfer:
 	movk	w1, 0x2, lsl 16
 	and	w1, w20, w1
 	cmp	w1, 139264
-	bne	.L1737
-	adrp	x0, .LC146
+	bne	.L1747
+	adrp	x0, .LC148
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC146
+	add	x0, x0, :lo12:.LC148
 	orr	w20, w20, 131072
 	bl	printk
 	ldr	x0, [x22,536]
 	str	w20, [x0]
 	mov	w0, -1
-.L1737:
-	tbz	x20, 13, .L1738
-	adrp	x1, .LANCHOR4+1216
-	ldrb	w1, [x1,#:lo12:.LANCHOR4+1216]
-	cbz	w1, .L1738
-	adrp	x0, .LC147
+.L1747:
+	tbz	x20, 13, .L1748
+	adrp	x1, .LANCHOR3+1496
+	ldrb	w1, [x1,#:lo12:.LANCHOR3+1496]
+	cbz	w1, .L1748
+	adrp	x0, .LC149
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC147
+	add	x0, x0, :lo12:.LC149
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	printk
 	ldr	x0, [x19,536]
 	mov	w1, 1
 	str	w1, [x0,16]
-	b	.L1739
-.L1730:
+	b	.L1749
+.L1740:
 	ldrb	w0, [x2,724]
 	mov	w5, 128
 	lsr	w6, w22, 1
@@ -10939,10 +11194,10 @@ nandc_xfer:
 	csel	w5, w0, w5, cc
 	mov	w1, w20
 	mov	w4, w20
-.L1741:
+.L1751:
 	cmp	w4, w6
 	add	w7, w1, w5
-	bcs	.L1768
+	bcs	.L1778
 	ldr	x0, [x2,680]
 	and	x1, x1, 4294967292
 	ldr	w0, [x0,x1]
@@ -10959,24 +11214,24 @@ nandc_xfer:
 	add	w3, w3, 4
 	strb	w0, [x23,x1]
 	mov	w1, w7
-	b	.L1741
-.L1768:
+	b	.L1751
+.L1778:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 0
 	lsr	w22, w22, 2
 	ldr	x6, [x0,536]
 	mov	w0, w2
-.L1743:
+.L1753:
 	cmp	w2, w22
-	bcs	.L1769
+	bcs	.L1779
 	uxtw	x1, w2
 	add	x1, x1, 8
 	ldr	w1, [x6,x1,lsl 2]
 	str	w1, [x29,72]
 	ldr	w1, [x29,72]
-	tbnz	x1, 2, .L1753
+	tbnz	x1, 2, .L1763
 	ldr	w1, [x29,72]
-	tbnz	x1, 15, .L1753
+	tbnz	x1, 15, .L1763
 	ldr	w3, [x29,72]
 	ubfx	x5, x3, 3, 5
 	ldr	w3, [x29,72]
@@ -10989,26 +11244,26 @@ nandc_xfer:
 	orr	w1, w4, w1, lsl 5
 	cmp	w3, w1
 	ldr	w1, [x29,72]
-	bls	.L1745
+	bls	.L1755
 	ubfx	x3, x1, 3, 5
 	ldr	w1, [x29,72]
 	ubfx	x1, x1, 27, 1
-	b	.L1766
-.L1745:
+	b	.L1776
+.L1755:
 	ubfx	x3, x1, 16, 5
 	ldr	w1, [x29,72]
 	ubfx	x1, x1, 29, 1
-.L1766:
+.L1776:
 	orr	w1, w3, w1, lsl 5
 	cmp	w0, w1
 	csel	w0, w0, w1, cs
-	b	.L1744
-.L1753:
+	b	.L1754
+.L1763:
 	mov	w0, -1
-.L1744:
+.L1754:
 	add	w2, w2, 1
-	b	.L1743
-.L1769:
+	b	.L1753
+.L1779:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldr	x1, [x19,536]
 	str	wzr, [x1,16]
@@ -11017,32 +11272,32 @@ nandc_xfer:
 	movk	w1, 0x2, lsl 16
 	and	w1, w20, w1
 	cmp	w1, 139264
-	bne	.L1738
-	adrp	x0, .LC148
+	bne	.L1748
+	adrp	x0, .LC150
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC148
+	add	x0, x0, :lo12:.LC150
 	orr	w20, w20, 131072
 	bl	printk
 	ldr	x0, [x19,536]
 	str	w20, [x0]
-	b	.L1739
-.L1738:
+	b	.L1749
+.L1748:
 	cmn	w0, #1
-	beq	.L1758
+	beq	.L1768
 	ldr	w1, [x23]
 	cmn	w1, #1
-	bne	.L1758
+	bne	.L1768
 	ldr	w1, [x23,4]
 	cmn	w1, #1
-	bne	.L1758
+	bne	.L1768
 	ldr	w1, [x21]
 	cmn	w1, #1
 	mov	w1, 512
 	csel	w0, w0, w1, ne
-	b	.L1758
-.L1739:
+	b	.L1768
+.L1749:
 	mov	w0, -1
-.L1758:
+.L1768:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -11053,235 +11308,276 @@ nandc_xfer:
 	.global	flash_read_page
 	.type	flash_read_page, %function
 flash_read_page:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -80]!
+	mov	w5, w1
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	uxtb	w21, w0
-	add	x0, x22, :lo12:.LANCHOR0
-	str	x27, [sp,80]
+	adrp	x21, .LANCHOR0
+	uxtb	w22, w0
+	add	x0, x21, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
-	mov	w23, w1
-	mov	x26, x2
-	ldr	x19, [x0,536]
+	mov	x25, x2
+	mov	x24, x3
+	ldrb	w19, [x0,744]
+	mov	w26, w4
+	ldr	x20, [x0,536]
+	mov	w0, 24
+	sub	w19, w0, w19
+	mov	w0, 1
+	lsl	w19, w0, w19
 	adrp	x0, .LANCHOR2
-	mov	x25, x3
-	mov	w27, w4
-	and	w20, w1, 2097151
-	ubfx	x24, x23, 24, 2
+	sub	w19, w19, #1
+	ubfx	x23, x5, 24, 2
+	and	w19, w1, w19
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1771
-	adrp	x0, .LC149
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC149
-	mov	w2, w24
-	mov	w3, w23
+	tbz	x0, 4, .L1781
+	adrp	x0, .LC151
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC151
+	mov	w2, w23
+	mov	w3, w5
 	bl	printk
-.L1771:
+.L1781:
 	bl	nandc_wait_flash_ready
-	mov	w0, w21
+	mov	w0, w22
 	bl	nandc_cs
-	cbnz	w24, .L1772
-	mov	w0, w21
+	cbnz	w23, .L1782
+	mov	w0, w22
 	bl	zftl_flash_enter_slc_mode
-	b	.L1773
-.L1772:
-	add	x0, x22, :lo12:.LANCHOR0
-	ldr	x0, [x0,624]
-	ldrb	w0, [x0,12]
-	cmp	w0, 3
-	bne	.L1774
-	sxtw	x0, w21
+	b	.L1783
+.L1782:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,624]
+	ldrb	w1, [x1,12]
+	cmp	w1, 3
+	bne	.L1784
+	ldrb	w0, [x0,756]
+	cbnz	w0, .L1784
+	sxtw	x0, w22
 	add	x0, x0, 8
-	add	x0, x19, x0, lsl 8
-	str	w24, [x0,8]
-	b	.L1773
-.L1774:
-	mov	w0, w21
+	add	x0, x20, x0, lsl 8
+	str	w23, [x0,8]
+	b	.L1783
+.L1784:
+	mov	w0, w22
 	bl	zftl_flash_exit_slc_mode
-.L1773:
-	ubfiz	x5, x21, 8, 8
-	and	w23, w23, 255
-	add	x19, x19, x5
-	lsr	w0, w20, 8
-	str	wzr, [x19,2056]
-	str	wzr, [x19,2052]
-	str	wzr, [x19,2052]
-	str	w23, [x19,2052]
-	str	w0, [x19,2052]
-	lsr	w0, w20, 16
-	str	w0, [x19,2052]
+.L1783:
+	ubfiz	x5, x22, 8, 8
+	and	w0, w19, 255
+	add	x20, x20, x5
+	str	wzr, [x20,2056]
+	str	wzr, [x20,2052]
+	str	wzr, [x20,2052]
+	str	w0, [x20,2052]
+	lsr	w0, w19, 8
+	str	w0, [x20,2052]
+	lsr	w0, w19, 16
+	str	w0, [x20,2052]
 	mov	w0, 48
-	str	w0, [x19,2056]
-	cbz	w24, .L1775
-	add	x22, x22, :lo12:.LANCHOR0
-	ldr	x0, [x22,624]
+	str	w0, [x20,2056]
+	cbz	w23, .L1785
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x0, [x21,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L1775
-	add	w20, w20, w20, lsl 1
-	sub	w0, w20, #1
-	add	w0, w0, w24
-	b	.L1786
-.L1775:
-	mov	w0, w20
-.L1786:
+	bne	.L1785
+	ldrb	w0, [x21,756]
+	cbnz	w0, .L1785
+	add	w19, w19, w19, lsl 1
+	sub	w0, w19, #1
+	add	w0, w0, w23
+	b	.L1796
+.L1785:
+	mov	w0, w19
+.L1796:
 	bl	nandc_set_seed
 	bl	nandc_wait_flash_ready
 	mov	w0, 5
-	str	w0, [x19,2056]
-	str	wzr, [x19,2052]
+	str	w0, [x20,2056]
+	str	wzr, [x20,2052]
 	mov	w0, 224
-	str	wzr, [x19,2052]
-	mov	w2, w27
-	mov	x3, x26
-	mov	x4, x25
-	str	w0, [x19,2056]
+	str	wzr, [x20,2052]
+	mov	w2, w26
+	mov	x3, x25
+	mov	x4, x24
+	str	w0, [x20,2056]
 	mov	w1, 0
-	mov	w0, w21
+	mov	w0, w22
 	bl	nandc_xfer
 	mov	w19, w0
 	mov	w0, 0
 	bl	nandc_de_cs
-	ldr	x27, [sp,80]
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 80
 	ret
 	.size	flash_read_page, .-flash_read_page
 	.align	2
 	.global	micron_read_retrial
 	.type	micron_read_retrial, %function
 micron_read_retrial:
-	stp	x29, x30, [sp, -128]!
+	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	mov	w20, 0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	w4, [x29,120]
+	adrp	x20, .LANCHOR0
+	uxtb	w19, w0
+	add	x20, x20, :lo12:.LANCHOR0
+	str	w4, [x29,152]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	uxtb	w24, w0
-	mov	w21, w1
-	ldrb	w0, [x19,724]
-	mov	x25, x2
-	mov	x26, x3
-	mov	w28, -1
-	adrp	x23, .LANCHOR4
+	mov	w22, w1
+	mov	x23, x2
+	ldrb	w0, [x20,724]
+	mov	x24, x3
+	uxtb	x25, w19
+	mov	w21, 0
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-	str	w0, [x29,124]
+	str	w0, [x29,156]
 	bl	nandc_wait_flash_ready
-	ldr	x22, [x19,536]
-	uxtb	x19, w24
-	lsl	x0, x19, 8
+	ldr	x0, [x20,536]
+	str	x0, [x29,144]
+	adrp	x0, .LC152
+	add	x0, x0, :lo12:.LC152
+	str	x0, [x29,128]
+	lsl	x0, x25, 8
+	str	x0, [x29,120]
+	adrp	x0, .LC153
+	add	x0, x0, :lo12:.LC153
 	str	x0, [x29,112]
-	adrp	x0, .LC150
-	add	x0, x0, :lo12:.LC150
-	str	x0, [x29,104]
-.L1788:
-	add	x0, x23, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1232]
+.L1798:
+	lsl	x0, x25, 8
+	mov	w20, 0
+	mov	w28, -1
+	adrp	x26, .LANCHOR3
+	str	x0, [x29,136]
+.L1799:
+	add	x0, x26, :lo12:.LANCHOR3
+	ldrb	w0, [x0,1512]
 	cmp	w20, w0
-	bcs	.L1792
-	ldr	x0, [x29,112]
+	bcs	.L1803
+	ldr	x0, [x29,144]
 	add	w27, w20, 1
-	add	x1, x22, x0
+	ldr	x1, [x29,136]
+	add	x1, x0, x1
 	mov	w0, 239
-	str	x1, [x29,96]
+	str	x1, [x29,104]
 	str	w0, [x1,2056]
 	mov	w0, 137
 	str	w0, [x1,2052]
 	mov	w0, 200
 	bl	timer_delay_ns
-	ldr	x1, [x29,96]
-	mov	w0, w24
-	ldr	w4, [x29,120]
-	mov	x2, x25
-	mov	x3, x26
+	ldr	x1, [x29,104]
+	mov	w0, w19
+	ldr	w4, [x29,152]
+	mov	x2, x23
+	mov	x3, x24
 	str	w27, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
-	mov	w1, w21
+	mov	w1, w22
 	bl	flash_read_page
 	mov	w6, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1789
-	ldr	x0, [x29,104]
+	tbz	x0, 12, .L1800
+	ldr	x0, [x29,128]
 	mov	w4, w6
 	mov	w1, w20
-	mov	w2, w21
+	mov	w2, w22
 	mov	w3, w28
-	str	x6, [x29,96]
+	str	x6, [x29,104]
 	bl	printk
-	ldr	x6, [x29,96]
-.L1789:
+	ldr	x6, [x29,104]
+.L1800:
 	cmn	w6, #1
-	beq	.L1790
-	adrp	x0, .LANCHOR4
+	beq	.L1801
+	adrp	x0, .LANCHOR3
 	cmn	w28, #1
-	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR3
 	csel	w28, w28, w6, ne
-	ldr	x25, [x0,1208]
-	ldr	x26, [x0,1224]
-	ldr	w0, [x29,124]
+	ldr	x23, [x0,1488]
+	ldr	x24, [x0,1504]
+	ldr	w0, [x29,156]
 	cmp	w6, w0
-	bcc	.L1797
-.L1790:
+	bcc	.L1811
+.L1801:
 	mov	w20, w27
-	b	.L1788
-.L1797:
+	b	.L1799
+.L1811:
 	mov	w28, w6
-.L1792:
-	add	x19, x22, x19, lsl 8
+.L1803:
+	ldr	x0, [x29,144]
+	ldr	x1, [x29,120]
+	add	x26, x0, x1
 	mov	w0, 239
-	str	w0, [x19,2056]
+	str	w0, [x26,2056]
 	mov	w0, 137
-	str	w0, [x19,2052]
+	str	w0, [x26,2052]
 	mov	w0, 200
 	bl	timer_delay_ns
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
-	ldr	w0, [x29,124]
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
+	str	wzr, [x26,2048]
+	str	wzr, [x26,2048]
+	ldr	w0, [x29,156]
+	str	wzr, [x26,2048]
+	str	wzr, [x26,2048]
 	cmp	w28, w0
-	bcc	.L1794
+	bcc	.L1805
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L1794:
+.L1805:
 	cmn	w28, #1
-	beq	.L1798
+	cset	w26, eq
+	cbnz	w26, .L1813
 	cmp	w28, 256
-	bne	.L1795
-.L1798:
-	adrp	x0, .LC151
+	cset	w1, eq
+	cbz	w1, .L1806
+.L1813:
+	ldr	x0, [x29,112]
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC151
-	mov	w2, w21
+	mov	w2, w22
 	mov	w3, w20
 	mov	w4, w28
 	bl	printk
-.L1795:
-	bl	nandc_wait_flash_ready
-	mov	w0, w28
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
+	cbz	w26, .L1808
+	cbnz	w21, .L1808
+	mov	w0, w19
+	mov	w1, 3
+	mov	w21, 1
+	bl	mt_auto_read_calibration_config
+	b	.L1798
+.L1808:
+	cbz	w21, .L1809
+	mov	w0, w19
+	mov	w1, 0
+	bl	mt_auto_read_calibration_config
+	cmn	w28, #1
+	mov	w0, 256
+	csel	w28, w28, w0, eq
+	b	.L1809
+.L1806:
+	cbz	w21, .L1809
+	mov	w0, w19
+	mov	w28, 256
+	bl	mt_auto_read_calibration_config
+.L1809:
+	bl	nandc_wait_flash_ready
+	mov	w0, w28
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
 	ret
 	.size	micron_read_retrial, .-micron_read_retrial
 	.align	2
@@ -11319,19 +11615,19 @@ toshiba_3d_read_retrial:
 	cmp	w1, 36
 	mov	w1, 26
 	csel	w21, w21, w1, ne
-	cbnz	w19, .L1812
+	cbnz	w19, .L1834
 	str	x0, [x29,112]
-	adrp	x0, .LC152
-	add	x0, x0, :lo12:.LC152
+	adrp	x0, .LC154
+	add	x0, x0, :lo12:.LC154
 	mov	w19, -1
 	mov	w28, 1
 	str	x0, [x29,104]
-.L1819:
+.L1841:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1813
+	bne	.L1835
 	mov	w1, w28
 	mov	w2, 0
 	bl	toshiba_tlc_set_rr_para
@@ -11339,11 +11635,11 @@ toshiba_3d_read_retrial:
 	mov	w1, 93
 	add	x0, x25, x0
 	str	w1, [x0,8]
-	b	.L1814
-.L1813:
+	b	.L1836
+.L1835:
 	mov	w1, w28
 	bl	toshiba_3d_set_slc_rr_para
-.L1814:
+.L1836:
 	ldr	w4, [x29,124]
 	mov	w0, w22
 	mov	w1, w24
@@ -11353,7 +11649,7 @@ toshiba_3d_read_retrial:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1815
+	tbz	x0, 4, .L1837
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w28
@@ -11361,66 +11657,66 @@ toshiba_3d_read_retrial:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1815:
+.L1837:
 	cmn	w4, #1
-	beq	.L1816
-	adrp	x0, .LANCHOR4
+	beq	.L1838
+	adrp	x0, .LANCHOR3
 	cmn	w19, #1
-	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR3
 	csel	w19, w19, w4, ne
-	ldr	x26, [x0,1208]
-	ldr	x27, [x0,1224]
+	ldr	x26, [x0,1488]
+	ldr	x27, [x0,1504]
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w4, w0, lsr 2
-	bcc	.L1835
-.L1816:
+	bcc	.L1857
+.L1838:
 	add	w28, w28, 1
 	cmp	w28, w21
-	bne	.L1819
-	b	.L1818
-.L1835:
+	bne	.L1841
+	b	.L1840
+.L1857:
 	mov	w21, w28
 	mov	w19, w4
-.L1818:
+.L1840:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1820
+	bne	.L1842
 	mov	w1, 0
 	mov	w2, w1
-	b	.L1858
-.L1820:
+	b	.L1880
+.L1842:
 	mov	w1, 0
 	bl	toshiba_3d_set_slc_rr_para
-	b	.L1821
-.L1812:
+	b	.L1843
+.L1834:
 	mov	x28, x0
-	adrp	x0, .LC153
-	add	x0, x0, :lo12:.LC153
+	adrp	x0, .LC155
+	add	x0, x0, :lo12:.LC155
 	mov	w19, -1
 	mov	w21, 1
 	str	x0, [x29,104]
-.L1828:
+.L1850:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1822
+	bne	.L1844
 	mov	w1, w21
 	mov	w2, 1
 	bl	toshiba_tlc_set_rr_para
 	add	x0, x25, x28
 	mov	w1, 93
-	b	.L1857
-.L1822:
+	b	.L1879
+.L1844:
 	mov	w1, w21
 	bl	toshiba_3d_set_tlc_rr_para
 	add	x0, x25, x28
 	mov	w1, 38
-.L1857:
+.L1879:
 	str	w1, [x0,8]
 	mov	x2, x26
 	mov	w0, w22
@@ -11431,7 +11727,7 @@ toshiba_3d_read_retrial:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1824
+	tbz	x0, 4, .L1846
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w21
@@ -11439,47 +11735,47 @@ toshiba_3d_read_retrial:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1824:
+.L1846:
 	cmn	w4, #1
-	beq	.L1825
-	adrp	x0, .LANCHOR4
+	beq	.L1847
+	adrp	x0, .LANCHOR3
 	cmn	w19, #1
-	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR3
 	csel	w19, w19, w4, ne
-	ldr	x26, [x0,1208]
-	ldr	x27, [x0,1224]
+	ldr	x26, [x0,1488]
+	ldr	x27, [x0,1504]
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w4, w0, lsr 2
-	bcc	.L1836
-.L1825:
+	bcc	.L1858
+.L1847:
 	ldr	w0, [x29,112]
 	add	w21, w21, 1
 	cmp	w21, w0
-	bne	.L1828
-	b	.L1827
-.L1836:
+	bne	.L1850
+	b	.L1849
+.L1858:
 	mov	w19, w4
-.L1827:
+.L1849:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1829
+	bne	.L1851
 	mov	w1, 0
 	mov	w2, 1
-.L1858:
+.L1880:
 	bl	toshiba_tlc_set_rr_para
-	b	.L1821
-.L1829:
+	b	.L1843
+.L1851:
 	mov	w1, 0
 	bl	toshiba_3d_set_tlc_rr_para
-.L1821:
+.L1843:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 36
-	bne	.L1830
+	bne	.L1852
 	ubfiz	x22, x22, 8, 8
 	mov	w0, 85
 	add	x25, x25, x22
@@ -11488,29 +11784,29 @@ toshiba_3d_read_retrial:
 	str	wzr, [x25,2052]
 	str	wzr, [x25,2048]
 	str	w0, [x25,2056]
-.L1830:
+.L1852:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x20,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L1831
+	bcc	.L1853
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1831:
+.L1853:
 	cmn	w19, #1
-	beq	.L1837
+	beq	.L1859
 	cmp	w19, 256
-	bne	.L1832
-.L1837:
-	adrp	x0, .LC154
+	bne	.L1854
+.L1859:
+	adrp	x0, .LC156
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC154
+	add	x0, x0, :lo12:.LC156
 	mov	w2, w24
 	mov	w3, w21
 	mov	w4, w19
 	bl	printk
-.L1832:
+.L1854:
 	bl	nandc_wait_flash_ready
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
@@ -11550,20 +11846,20 @@ toshiba_read_retrial:
 	add	x21, x22, x21, lsl 8
 	uxtb	w0, w0
 	cmp	w0, 1
-	bls	.L1860
+	bls	.L1882
 	ldrb	w0, [x1,672]
-	cbz	w0, .L1861
+	cbz	w0, .L1883
 	mov	w0, 1
 	mov	w25, 1
 	bl	nandc_set_if_mode
-.L1861:
+.L1883:
 	ubfiz	x0, x23, 8, 8
 	mov	w1, 92
 	add	x0, x22, x0
 	str	w1, [x0,2056]
 	mov	w1, 197
 	str	w1, [x0,2056]
-.L1860:
+.L1882:
 	ldr	x0, [x29,112]
 	mov	w20, 1
 	mov	w24, -1
@@ -11572,13 +11868,13 @@ toshiba_read_retrial:
 	str	x0, [x29,104]
 	ubfiz	x0, x23, 8, 8
 	str	x0, [x29,96]
-.L1862:
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1232]
+.L1884:
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldrb	w0, [x0,1512]
 	add	w0, w0, 1
 	cmp	w20, w0
-	bcs	.L1893
+	bcs	.L1915
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w20
 	ldrb	w0, [x0,725]
@@ -11586,27 +11882,27 @@ toshiba_read_retrial:
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x21
-	bhi	.L1863
+	bhi	.L1885
 	bl	sandisk_set_rr_para
-	b	.L1864
-.L1863:
+	b	.L1886
+.L1885:
 	bl	toshiba_set_rr_para
-.L1864:
+.L1886:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	cmp	w0, 34
-	bne	.L1865
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1232]
+	bne	.L1887
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldrb	w0, [x0,1512]
 	sub	w0, w0, #3
 	cmp	w20, w0
-	bne	.L1865
+	bne	.L1887
 	ldr	x0, [x29,104]
 	mov	w1, 179
 	add	x0, x22, x0
 	str	w1, [x0,8]
-.L1865:
+.L1887:
 	ldr	x0, [x29,96]
 	mov	w1, 38
 	ldr	w4, [x29,120]
@@ -11621,24 +11917,24 @@ toshiba_read_retrial:
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w28, w0
-	beq	.L1868
+	beq	.L1890
 	cmn	w24, #1
 	csel	w24, w24, w0, ne
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x26, [x0,1208]
-	ldr	x27, [x0,1224]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x26, [x0,1488]
+	ldr	x27, [x0,1504]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1870
-.L1868:
+	bcc	.L1892
+.L1890:
 	add	w20, w20, 1
-	b	.L1862
-.L1893:
+	b	.L1884
+.L1915:
 	mov	w28, w24
-.L1870:
+.L1892:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 0
 	ldrb	w0, [x0,725]
@@ -11646,12 +11942,12 @@ toshiba_read_retrial:
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x21
-	bhi	.L1872
+	bhi	.L1894
 	bl	sandisk_set_rr_para
-	b	.L1873
-.L1872:
+	b	.L1895
+.L1894:
 	bl	toshiba_set_rr_para
-.L1873:
+.L1895:
 	ldr	x0, [x29,112]
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x0, 8
@@ -11661,29 +11957,29 @@ toshiba_read_retrial:
 	ldrb	w0, [x19,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1874
+	bcc	.L1896
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L1874:
+.L1896:
 	cmn	w28, #1
-	beq	.L1880
+	beq	.L1902
 	cmp	w28, 256
-	bne	.L1875
-.L1880:
-	adrp	x0, .LC154
+	bne	.L1897
+.L1902:
+	adrp	x0, .LC156
 	ldr	w2, [x29,124]
-	add	x0, x0, :lo12:.LC154
+	add	x0, x0, :lo12:.LC156
 	mov	w1, w20
 	mov	w3, w20
 	mov	w4, w28
 	bl	printk
-.L1875:
+.L1897:
 	bl	nandc_wait_flash_ready
-	cbz	w25, .L1877
+	cbz	w25, .L1899
 	mov	w0, 4
 	bl	nandc_set_if_mode
-.L1877:
+.L1899:
 	mov	w0, w28
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -11720,10 +12016,10 @@ hynix_read_retrial:
 	ldrb	w20, [x0,8]
 	bl	nandc_wait_flash_ready
 	mov	w6, 0
-	adrp	x7, .LANCHOR4
-.L1895:
+	adrp	x7, .LANCHOR3
+.L1917:
 	cmp	w6, w24
-	bcs	.L1899
+	bcs	.L1921
 	add	w20, w20, 1
 	mov	w0, w22
 	str	x7, [x29,104]
@@ -11742,47 +12038,47 @@ hynix_read_retrial:
 	cmn	w0, #1
 	ldr	x6, [x29,112]
 	ldr	x7, [x29,104]
-	beq	.L1897
-	add	x1, x7, :lo12:.LANCHOR4
+	beq	.L1919
+	add	x1, x7, :lo12:.LANCHOR3
 	cmn	w19, #1
 	csel	w19, w19, w0, ne
-	ldr	x25, [x1,1208]
-	ldr	x26, [x1,1224]
+	ldr	x25, [x1,1488]
+	ldr	x26, [x1,1504]
 	add	x1, x28, :lo12:.LANCHOR0
 	ldrb	w1, [x1,724]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L1904
-.L1897:
+	bcc	.L1926
+.L1919:
 	add	w6, w6, 1
-	b	.L1895
-.L1904:
+	b	.L1917
+.L1926:
 	mov	w19, w0
-.L1899:
+.L1921:
 	add	x28, x28, :lo12:.LANCHOR0
 	add	x21, x27, x21
 	ldrb	w0, [x28,724]
 	strb	w20, [x21,8]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L1901
+	bcc	.L1923
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1901:
+.L1923:
 	cmn	w19, #1
-	beq	.L1905
+	beq	.L1927
 	cmp	w19, 256
-	bne	.L1902
-.L1905:
-	adrp	x0, .LC155
+	bne	.L1924
+.L1927:
+	adrp	x0, .LC157
 	mov	w1, w6
-	add	x0, x0, :lo12:.LC155
+	add	x0, x0, :lo12:.LC157
 	mov	w2, w23
 	mov	w3, w6
 	mov	w4, w19
 	bl	printk
-.L1902:
+.L1924:
 	bl	nandc_wait_flash_ready
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
@@ -11812,16 +12108,16 @@ flash_ddr_tuning_read:
 	bl	nandc_get_ddr_para
 	mov	w27, 0
 	str	w0, [x29,116]
-	adrp	x0, .LC156
+	adrp	x0, .LC158
 	str	w27, [x29,124]
-	add	x0, x0, :lo12:.LC156
+	add	x0, x0, :lo12:.LC158
 	mov	w25, w27
 	mov	w28, w27
 	mov	w19, 1024
 	mov	w26, 6
 	mov	w21, -1
 	str	x0, [x29,104]
-.L1920:
+.L1942:
 	mov	w0, w26
 	bl	nandc_set_ddr_para
 	ldr	w4, [x29,120]
@@ -11833,7 +12129,7 @@ flash_ddr_tuning_read:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1915
+	tbz	x0, 4, .L1937
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w26
@@ -11841,73 +12137,73 @@ flash_ddr_tuning_read:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1915:
+.L1937:
 	add	w0, w19, 1
 	cmp	w4, w0
-	bhi	.L1916
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x24, [x0,1208]
-	ldr	x23, [x0,1224]
+	bhi	.L1938
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x24, [x0,1488]
+	ldr	x23, [x0,1504]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,724]
 	cmp	w4, w0, lsr 2
-	bcs	.L1926
+	bcs	.L1948
 	add	w28, w28, 1
 	cmp	w28, 7
-	bls	.L1926
+	bls	.L1948
 	sub	w27, w26, w28
 	mov	w19, w4
 	mov	w21, 0
-	b	.L1918
-.L1916:
+	b	.L1940
+.L1938:
 	cmp	w25, w28
-	bcs	.L1927
+	bcs	.L1949
 	sub	w0, w27, w28
 	cmp	w28, 7
 	str	w0, [x29,124]
-	bhi	.L1919
+	bhi	.L1941
 	mov	w25, w28
-	b	.L1927
-.L1926:
+	b	.L1949
+.L1948:
 	mov	w27, w26
 	mov	w19, w4
 	mov	w21, 0
-	b	.L1917
-.L1927:
+	b	.L1939
+.L1949:
 	mov	w28, 0
-.L1917:
+.L1939:
 	add	w26, w26, 2
 	cmp	w26, 50
-	bne	.L1920
-.L1918:
+	bne	.L1942
+.L1940:
 	ldr	w0, [x29,124]
 	cmp	w25, w28
 	csel	w27, w27, w0, ls
-.L1919:
-	cbz	w27, .L1921
+.L1941:
+	cbz	w27, .L1943
 	adrp	x0, .LANCHOR0+724
 	mov	w1, 3
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+724]
 	udiv	w0, w0, w1
 	cmp	w19, w0
-	bcs	.L1921
-	adrp	x0, .LC157
+	bcs	.L1943
+	adrp	x0, .LC159
 	mov	w1, w27
-	add	x0, x0, :lo12:.LC157
+	add	x0, x0, :lo12:.LC159
 	bl	printk
 	mov	w0, w27
-	b	.L1936
-.L1921:
+	b	.L1958
+.L1943:
 	ldrb	w0, [x29,116]
-.L1936:
+.L1958:
 	bl	nandc_set_ddr_para
-	cbz	w21, .L1923
-	adrp	x0, .LC158
+	cbz	w21, .L1945
+	adrp	x0, .LC160
 	mov	w2, w22
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC158
+	add	x0, x0, :lo12:.LC160
 	adrp	x26, .LANCHOR0
 	bl	printk
 	add	x27, x26, :lo12:.LANCHOR0
@@ -11919,7 +12215,7 @@ flash_ddr_tuning_read:
 	bl	nandc_set_if_mode
 	add	x0, x27, x20, sxtw
 	mov	w1, 2
-	strb	w1, [x0,744]
+	strb	w1, [x0,752]
 	mov	w0, w20
 	bl	zftl_flash_enter_slc_mode
 	ldr	w4, [x29,120]
@@ -11929,33 +12225,33 @@ flash_ddr_tuning_read:
 	mov	w0, w20
 	bl	flash_read_page
 	mov	w19, w0
-	adrp	x0, .LC159
+	adrp	x0, .LC161
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC159
+	add	x0, x0, :lo12:.LC161
 	mov	w2, w22
 	mov	w3, w19
 	bl	printk
 	ldrb	w0, [x27,724]
 	cmp	w19, w0
-	bhi	.L1928
-	adrp	x1, .LANCHOR4
-	add	x1, x1, :lo12:.LANCHOR4
-	ldr	w0, [x1,1236]
+	bhi	.L1950
+	adrp	x1, .LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR3
+	ldr	w0, [x1,1516]
 	add	w0, w0, 1
-	str	w0, [x1,1236]
+	str	w0, [x1,1516]
 	cmp	w0, 100
-	bls	.L1924
+	bls	.L1946
 	strb	wzr, [x27,672]
-	b	.L1923
-.L1928:
+	b	.L1945
+.L1950:
 	mov	w19, w21
-.L1924:
+.L1946:
 	add	x26, x26, :lo12:.LANCHOR0
-	ldrb	w0, [x26,780]
+	ldrb	w0, [x26,792]
 	bl	flash_set_interface_mode
-	ldrb	w0, [x26,780]
+	ldrb	w0, [x26,792]
 	bl	nandc_set_if_mode
-.L1923:
+.L1945:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -11984,57 +12280,57 @@ flash_read_page_en:
 	ldrb	w0, [x0,633]
 	mov	w22, w4
 	cmp	w0, w25
-	bhi	.L1938
-	adrp	x1, .LANCHOR3
+	bhi	.L1960
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 398
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 404
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L1938:
+.L1960:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x1, x0, x25, sxtw
 	ldrb	w21, [x1,736]
 	ldrb	w1, [x0,633]
 	cmp	w1, w25
-	bcs	.L1939
+	bcs	.L1961
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 6, .L1965
-	adrp	x0, .LC160
+	tbz	x0, 6, .L1987
+	adrp	x0, .LC162
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC160
+	add	x0, x0, :lo12:.LC162
 	mov	w2, w25
 	mov	w3, w19
 	bl	printk
-.L1965:
+.L1987:
 	mov	w0, -1
-	b	.L1964
-.L1939:
+	b	.L1986
+.L1961:
 	ubfx	x1, x19, 24, 2
-	cbnz	w1, .L1942
+	cbnz	w1, .L1964
 	adrp	x1, .LANCHOR0
 	ldrb	w1, [x1,#:lo12:.LANCHOR0]
-	cbz	w1, .L1943
+	cbz	w1, .L1965
 	ldrb	w0, [x0,1]
-	cbz	w0, .L1942
-.L1943:
+	cbz	w0, .L1964
+.L1965:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldrh	w2, [x1,2]
 	udiv	w0, w19, w2
 	mul	w0, w0, w2
 	ldrb	w2, [x1,1]
 	sub	w19, w19, w0
-	cbz	w2, .L1944
+	cbz	w2, .L1966
 	add	w19, w0, w19, lsl 1
-	b	.L1942
-.L1944:
+	b	.L1964
+.L1966:
 	add	x1, x1, 4
 	ldrh	w19, [x1,w19,uxtw 1]
 	add	w19, w19, w0
-.L1942:
+.L1964:
 	mov	w0, w21
 	mov	w1, w19
 	mov	x2, x24
@@ -12042,16 +12338,16 @@ flash_read_page_en:
 	mov	w4, w22
 	bl	flash_read_page
 	cmn	w0, #1
-	bne	.L1964
+	bne	.L1986
 	add	x25, x20, :lo12:.LANCHOR0
 	ldrb	w26, [x25,720]
-	cbnz	w26, .L1946
-.L1949:
-	adrp	x0, .LANCHOR4+1240
-	ldr	x5, [x0,#:lo12:.LANCHOR4+1240]
-	cbnz	x5, .L1947
-	b	.L1948
-.L1946:
+	cbnz	w26, .L1968
+.L1971:
+	adrp	x0, .LANCHOR3+1520
+	ldr	x5, [x0,#:lo12:.LANCHOR3+1520]
+	cbnz	x5, .L1969
+	b	.L1970
+.L1968:
 	mov	w0, w21
 	mov	w1, w19
 	mov	x2, x24
@@ -12061,9 +12357,9 @@ flash_read_page_en:
 	bl	flash_read_page
 	strb	w26, [x25,720]
 	cmn	w0, #1
-	beq	.L1949
-	b	.L1964
-.L1947:
+	beq	.L1971
+	b	.L1986
+.L1969:
 	mov	w0, w21
 	mov	w1, w19
 	mov	x2, x24
@@ -12071,25 +12367,25 @@ flash_read_page_en:
 	mov	w4, w22
 	blr	x5
 	cmn	w0, #1
-	bne	.L1964
-.L1948:
+	bne	.L1986
+.L1970:
 	add	x20, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC161
-	add	x0, x0, :lo12:.LC161
+	adrp	x0, .LC163
+	add	x0, x0, :lo12:.LC163
 	mov	w1, 0
 	mov	w2, w19
 	mov	w3, -1
 	ldrb	w4, [x20,720]
 	bl	printk
 	ldrb	w0, [x20,672]
-	cbz	w0, .L1965
+	cbz	w0, .L1987
 	mov	w0, w21
 	mov	w1, w19
 	mov	x2, x24
 	mov	x3, x23
 	mov	w4, w22
 	bl	flash_ddr_tuning_read
-.L1964:
+.L1986:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -12105,11 +12401,11 @@ flash_get_last_written_page:
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
 	uxtb	w23, w0
-	adrp	x0, .LANCHOR4+1108
+	adrp	x0, .LANCHOR3+1380
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
 	mov	x24, x2
-	ldrh	w19, [x0,#:lo12:.LANCHOR4+1108]
+	ldrh	w19, [x0,#:lo12:.LANCHOR3+1380]
 	add	x0, x20, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
@@ -12126,12 +12422,12 @@ flash_get_last_written_page:
 	add	w1, w26, w19
 	bl	flash_read_page_en
 	cmp	w0, 512
-	bne	.L1967
+	bne	.L1989
 	mov	w28, 0
 	mov	w5, 2
-.L1968:
+.L1990:
 	cmp	w28, w19
-	bgt	.L1967
+	bgt	.L1989
 	add	w0, w28, w19
 	mov	x2, x24
 	mov	x3, x21
@@ -12143,24 +12439,24 @@ flash_get_last_written_page:
 	bl	flash_read_page_en
 	cmp	w0, 512
 	ldr	x5, [x29,104]
-	bne	.L1969
+	bne	.L1991
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L1968
-.L1969:
+	b	.L1990
+.L1991:
 	add	w20, w20, 1
 	sxth	w28, w20
-	b	.L1968
-.L1967:
+	b	.L1990
+.L1989:
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1972
-	adrp	x0, .LC162
+	tbz	x0, 12, .L1994
+	adrp	x0, .LC164
 	ldr	w3, [x21]
-	add	x0, x0, :lo12:.LC162
+	add	x0, x0, :lo12:.LC164
 	mov	w1, w22
 	mov	w2, w19
 	bl	printk
-.L1972:
+.L1994:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -12174,23 +12470,26 @@ flash_get_last_written_page:
 	.global	flash_get_last_written_page_ext
 	.type	flash_get_last_written_page_ext, %function
 flash_get_last_written_page_ext:
-	uxth	w6, w0
-	adrp	x0, .LANCHOR0+3264
+	adrp	x6, .LANCHOR0
+	uxth	w7, w0
+	add	x6, x6, :lo12:.LANCHOR0
+	mov	w5, 24
 	stp	x29, x30, [sp, -16]!
-	mov	w5, 21
-	mov	x8, x1
+	mov	x9, x1
+	mov	x8, x2
 	add	x29, sp, 0
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+3264]
-	mov	x7, x2
+	ldrb	w0, [x6,744]
 	mov	w4, w3
-	mov	x2, x8
+	mov	x2, x9
+	mov	x3, x8
+	sub	w5, w5, w0
+	ldrh	w0, [x6,3536]
 	sub	w0, w5, w0
 	mov	w5, 1
 	lsl	w5, w5, w0
-	mov	x3, x7
+	asr	w0, w7, w0
 	sub	w1, w5, #1
-	asr	w0, w6, w0
-	and	w1, w6, w1
+	and	w1, w7, w1
 	bl	flash_get_last_written_page
 	ldp	x29, x30, [sp], 16
 	ret
@@ -12203,46 +12502,46 @@ flash_ddr_para_scan:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	adrp	x20, .LANCHOR4
+	adrp	x20, .LANCHOR3
 	stp	x21, x22, [sp,32]
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w22, 1
 	stp	x23, x24, [sp,48]
 	uxtb	w24, w0
 	mov	w23, w1
-	ldrb	w0, [x21,780]
-	add	x20, x20, :lo12:.LANCHOR4
+	ldrb	w0, [x21,792]
+	add	x20, x20, :lo12:.LANCHOR3
 	strb	w22, [x21,672]
 	bl	flash_set_interface_mode
-	ldrb	w0, [x21,780]
+	ldrb	w0, [x21,792]
 	bl	nandc_set_if_mode
-	ldr	x2, [x20,1248]
+	ldr	x2, [x20,1528]
 	mov	w1, w23
-	ldr	x3, [x20,1256]
+	ldr	x3, [x20,1536]
 	mov	w4, 4
 	mov	w0, w24
 	bl	flash_ddr_tuning_read
-	ldr	x2, [x20,1248]
+	ldr	x2, [x20,1528]
 	mov	w0, w24
-	ldr	x3, [x20,1256]
+	ldr	x3, [x20,1536]
 	mov	w1, w23
 	mov	w4, 4
 	bl	flash_read_page
 	cmn	w0, #1
-	bne	.L1978
-	ldrb	w0, [x21,780]
-	tbz	x0, 0, .L1978
+	bne	.L2000
+	ldrb	w0, [x21,792]
+	tbz	x0, 0, .L2000
 	mov	w0, 1
 	bl	flash_set_interface_mode
 	mov	w0, w22
 	bl	nandc_set_if_mode
 	strb	wzr, [x21,672]
-	b	.L1979
-.L1978:
+	b	.L2001
+.L2000:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x19,672]
-.L1979:
+.L2001:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -12251,8 +12550,8 @@ flash_ddr_para_scan:
 	ret
 	.size	flash_ddr_para_scan, .-flash_ddr_para_scan
 	.align	2
-	.type	id_block_read_data.constprop.30, %function
-id_block_read_data.constprop.30:
+	.type	id_block_read_data.constprop.31, %function
+id_block_read_data.constprop.31:
 	stp	x29, x30, [sp, -240]!
 	add	x29, sp, 0
 	stp	x25, x26, [sp,64]
@@ -12288,12 +12587,12 @@ id_block_read_data.constprop.30:
 	ldr	w0, [x29,172]
 	and	w0, w0, 3
 	str	w0, [x29,168]
-	adrp	x0, .LC163
-	add	x0, x0, :lo12:.LC163
+	adrp	x0, .LC165
+	add	x0, x0, :lo12:.LC165
 	str	x0, [x29,112]
-.L1984:
+.L2006:
 	cmp	w22, w27
-	bcs	.L2021
+	bcs	.L2043
 	ldr	w0, [x29,168]
 	ldrb	w1, [x19,634]
 	sub	w0, w23, w0
@@ -12305,15 +12604,15 @@ id_block_read_data.constprop.30:
 	udiv	w20, w20, w23
 	and	w20, w20, 65535
 	ldrh	w0, [x0,w20,sxtw 1]
-	cbnz	w1, .L1985
+	cbnz	w1, .L2007
 	mov	w20, w0
-	b	.L1986
-.L1985:
+	b	.L2008
+.L2007:
 	ldrb	w1, [x19,1]
 	lsl	w0, w20, 1
 	cmp	w1, wzr
 	csel	w20, w0, w20, ne
-.L1986:
+.L2008:
 	ldr	w1, [x29,160]
 	ldr	w0, [x29,164]
 	ldrb	w28, [x19,632]
@@ -12328,7 +12627,7 @@ id_block_read_data.constprop.30:
 	str	w0, [x29,132]
 	mov	w0, w28
 	bl	nandc_bch_sel
-.L1987:
+.L2009:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
@@ -12337,16 +12636,16 @@ id_block_read_data.constprop.30:
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w20, w0
-	bne	.L1994
+	bne	.L2016
 	ldrb	w6, [x19,720]
-	cbnz	w6, .L1989
-.L1992:
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x6, [x0,1240]
-	cbnz	x6, .L1990
-	b	.L1991
-.L1989:
+	cbnz	w6, .L2011
+.L2014:
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x6, [x0,1520]
+	cbnz	x6, .L2012
+	b	.L2013
+.L2011:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
@@ -12358,9 +12657,9 @@ id_block_read_data.constprop.30:
 	cmn	w0, #1
 	ldr	x6, [x29,104]
 	strb	w6, [x19,720]
-	beq	.L1992
-	b	.L2020
-.L1990:
+	beq	.L2014
+	b	.L2042
+.L2012:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
@@ -12368,28 +12667,28 @@ id_block_read_data.constprop.30:
 	mov	w4, w23
 	blr	x6
 	cmn	w0, #1
-	bne	.L2020
-.L1991:
+	bne	.L2042
+.L2013:
 	ldrb	w0, [x19,672]
-	cbz	w0, .L1994
+	cbz	w0, .L2016
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
 	add	x3, x29, 176
 	mov	w4, w23
 	bl	flash_ddr_tuning_read
-.L2020:
+.L2042:
 	mov	w20, w0
-.L1994:
+.L2016:
 	cmn	w20, #1
-	bne	.L1995
+	bne	.L2017
 	cmp	w28, 16
-	beq	.L1995
+	beq	.L2017
 	mov	w0, 16
 	mov	w28, 16
 	bl	nandc_bch_sel
-	b	.L1987
-.L1995:
+	b	.L2009
+.L2017:
 	ldr	w0, [x29,132]
 	bl	nandc_bch_sel
 	cmn	w20, #1
@@ -12400,18 +12699,18 @@ id_block_read_data.constprop.30:
 	cmp	w0, w26
 	cset	w0, eq
 	tst	w1, w0
-	beq	.L1997
-	cbnz	w25, .L1997
+	beq	.L2019
+	cbnz	w25, .L2019
 	ldr	w1, [x21]
 	mov	w0, 18766
 	movk	w0, 0x464e, lsl 16
 	cmp	w1, w0
-	bne	.L1997
+	bne	.L2019
 	ldr	w0, [x29,144]
 	ldrb	w23, [x21,17]
 	add	w27, w27, w0
-	b	.L1998
-.L1997:
+	b	.L2020
+.L2019:
 	ldr	x0, [x29,144]
 	mov	w2, w22
 	ldr	w1, [x29,140]
@@ -12422,12 +12721,12 @@ id_block_read_data.constprop.30:
 	ldr	x0, [x29,112]
 	bl	printk
 	str	wzr, [x29,168]
-.L1998:
+.L2020:
 	ldr	w0, [x29,144]
 	add	w22, w0, w22
 	uxth	w22, w22
-	b	.L1984
-.L2021:
+	b	.L2006
+.L2043:
 	ldr	x0, [x29,120]
 	ldrb	w1, [x29,136]
 	add	x0, x0, :lo12:.LANCHOR0
@@ -12440,116 +12739,135 @@ id_block_read_data.constprop.30:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 240
 	ret
-	.size	id_block_read_data.constprop.30, .-id_block_read_data.constprop.30
+	.size	id_block_read_data.constprop.31, .-id_block_read_data.constprop.31
 	.align	2
 	.global	flash_complete_plane_page_read
 	.type	flash_complete_plane_page_read, %function
 flash_complete_plane_page_read:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	mov	w24, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	str	x25, [sp,64]
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR0
-	ubfx	x22, x0, 21, 3
 	stp	x19, x20, [sp,16]
-	and	w19, w0, 2097151
-	ubfx	x20, x0, 24, 2
-	add	x0, x21, :lo12:.LANCHOR0
-	str	x25, [sp,64]
-	stp	x23, x24, [sp,48]
-	mov	x24, x1
-	mov	x23, x2
+	mov	x22, x1
+	mov	w19, 24
+	ldrb	w20, [x0,744]
+	mov	w1, 1
+	mov	x21, x2
 	ldrb	w0, [x0,633]
-	cmp	w0, w22
-	bhi	.L2023
-	adrp	x1, .LANCHOR3
+	sub	w19, w19, w20
+	lsl	w20, w1, w20
+	lsr	w2, w24, w19
+	sub	w20, w20, #1
+	and	w20, w2, w20
+	uxtb	w20, w20
+	cmp	w0, w20
+	bhi	.L2045
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 886
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 909
 	add	x1, x1, 160
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2023:
-	add	x0, x21, :lo12:.LANCHOR0
-	add	x22, x0, x22, sxtw
-	ldrb	w22, [x22,736]
-	ldr	x25, [x0,536]
-	mov	w0, w22
+.L2045:
+	add	x3, x23, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldrb	w1, [x3,633]
+	cmp	w1, w20
+	bls	.L2046
+	mov	w2, 1
+	add	x20, x3, x20, sxtw
+	ldrb	w20, [x20,736]
+	lsl	w19, w2, w19
+	add	w19, w19, w0
+	ubfx	x25, x24, 24, 2
+	mov	w0, w20
+	and	w19, w19, w24
+	ldr	x24, [x3,536]
 	bl	nandc_cs
-	cbnz	w20, .L2024
+	cbnz	w25, .L2047
 	mov	w0, w19
 	bl	slc_phy_page_address_calc
 	mov	w19, w0
-.L2024:
-	add	x3, x21, :lo12:.LANCHOR0
-	uxtb	x5, w22
-	and	w2, w19, 255
-	lsr	w1, w19, 8
-	ldrb	w0, [x3,656]
-	cmp	w0, 1
-	lsr	w0, w19, 16
-	bne	.L2025
-	add	x5, x25, x5, lsl 8
-	mov	w3, 6
-	b	.L2038
-.L2025:
-	ldr	x3, [x3,624]
-	add	x5, x25, x5, lsl 8
-	ldrb	w3, [x3,12]
-	cmp	w3, 3
-	bne	.L2027
-	mov	w3, 5
-.L2038:
-	str	w3, [x5,2056]
+.L2047:
+	add	x0, x23, :lo12:.LANCHOR0
+	uxtb	x5, w20
+	and	w4, w19, 255
+	lsr	w3, w19, 8
+	lsr	w2, w19, 16
+	ldrb	w1, [x0,656]
+	cmp	w1, 1
+	bne	.L2048
+	add	x5, x24, x5, lsl 8
+	mov	w0, 6
+	b	.L2062
+.L2048:
+	ldr	x0, [x0,624]
+	add	x5, x24, x5, lsl 8
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L2050
+	mov	w0, 5
+.L2062:
+	str	w0, [x5,2056]
 	str	wzr, [x5,2052]
 	str	wzr, [x5,2052]
+	str	w4, [x5,2052]
+	str	w3, [x5,2052]
 	str	w2, [x5,2052]
-	str	w1, [x5,2052]
-	str	w0, [x5,2052]
-	b	.L2036
-.L2027:
+	b	.L2060
+.L2050:
 	str	wzr, [x5,2056]
+	mov	w0, 5
 	str	wzr, [x5,2052]
 	str	wzr, [x5,2052]
+	str	w4, [x5,2052]
+	str	w3, [x5,2052]
 	str	w2, [x5,2052]
-	str	w1, [x5,2052]
-	str	w0, [x5,2052]
-	mov	w0, 5
 	str	w0, [x5,2056]
 	str	wzr, [x5,2052]
 	str	wzr, [x5,2052]
-.L2036:
+.L2060:
 	mov	w0, 224
 	str	w0, [x5,2056]
-	cbz	w20, .L2028
-	add	x21, x21, :lo12:.LANCHOR0
-	ldr	x0, [x21,624]
+	cbz	w25, .L2051
+	add	x23, x23, :lo12:.LANCHOR0
+	ldr	x0, [x23,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L2028
-	sub	w20, w20, #1
+	bne	.L2051
+	ldrb	w0, [x23,756]
+	cbnz	w0, .L2051
+	sub	w1, w25, #1
 	add	w0, w19, w19, lsl 1
-	add	w0, w20, w0
-	b	.L2037
-.L2028:
+	add	w0, w1, w0
+	b	.L2061
+.L2051:
 	mov	w0, w19
-.L2037:
+.L2061:
 	bl	nandc_set_seed
 	adrp	x2, .LANCHOR2+17
-	mov	x3, x24
-	mov	x4, x23
 	mov	w1, 0
-	mov	w0, w22
+	mov	x3, x22
+	mov	x4, x21
+	mov	w0, w20
 	ldrb	w2, [x2,#:lo12:.LANCHOR2+17]
 	bl	nandc_xfer
 	mov	w19, w0
-	mov	w0, w22
+	mov	w0, w20
 	bl	nandc_de_cs
-	ldr	x25, [sp,64]
 	mov	w0, w19
+.L2046:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	flash_complete_plane_page_read, .-flash_complete_plane_page_read
@@ -12558,159 +12876,171 @@ flash_complete_plane_page_read:
 	.type	flash_complete_page_read, %function
 flash_complete_page_read:
 	stp	x29, x30, [sp, -112]!
+	mov	w5, 1
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	and	w20, w0, 2097151
 	stp	x23, x24, [sp,48]
-	mov	w24, w0
-	add	x0, x19, :lo12:.LANCHOR0
+	adrp	x24, .LANCHOR0
+	mov	x23, x2
 	stp	x21, x22, [sp,32]
+	mov	x22, x1
+	add	x1, x24, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ubfx	x21, x24, 21, 3
-	mov	x25, x1
-	ldrb	w0, [x0,633]
-	mov	x26, x2
-	ubfx	x22, x24, 24, 2
-	cmp	w0, w21
-	bhi	.L2040
-	adrp	x1, .LANCHOR3
+	mov	w21, w0
+	mov	w0, 24
+	ldrb	w2, [x1,744]
+	ubfx	x25, x21, 24, 2
+	sub	w0, w0, w2
+	lsl	w19, w5, w0
+	lsl	w5, w5, w2
+	lsr	w20, w21, w0
+	sub	w5, w5, #1
+	and	w20, w20, w5
+	ldrb	w0, [x1,633]
+	sub	w19, w19, #1
+	uxtb	w20, w20
+	and	w19, w19, w21
+	cmp	w0, w20
+	bhi	.L2064
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1008
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1033
 	add	x1, x1, 192
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2040:
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x21, x0, x21, sxtw
-	ldrb	w23, [x21,736]
-	ldr	x21, [x0,536]
-	mov	w0, w23
+.L2064:
+	add	x0, x24, :lo12:.LANCHOR0
+	add	x20, x0, x20, sxtw
+	ldrb	w26, [x20,736]
+	ldr	x20, [x0,536]
+	mov	w0, w26
 	bl	nandc_cs
-	cbnz	w22, .L2041
-	mov	w0, w20
+	cbnz	w25, .L2065
+	mov	w0, w19
 	bl	slc_phy_page_address_calc
-	mov	w20, w0
-.L2041:
-	ubfiz	x0, x23, 8, 8
-	add	x5, x21, x0
+	mov	w19, w0
+.L2065:
+	ubfiz	x0, x26, 8, 8
+	add	x1, x20, x0
 	mov	w0, 5
-	str	w0, [x5,2056]
-	and	w0, w20, 255
-	str	wzr, [x5,2052]
-	str	wzr, [x5,2052]
-	str	w0, [x5,2052]
-	lsr	w0, w20, 8
-	str	w0, [x5,2052]
-	lsr	w0, w20, 16
-	str	w0, [x5,2052]
+	str	w0, [x1,2056]
+	and	w0, w19, 255
+	str	wzr, [x1,2052]
+	str	wzr, [x1,2052]
+	str	w0, [x1,2052]
+	lsr	w0, w19, 8
+	str	w0, [x1,2052]
+	lsr	w0, w19, 16
+	str	w0, [x1,2052]
 	mov	w0, 224
-	str	w0, [x5,2056]
-	cbz	w22, .L2042
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,624]
-	ldrb	w0, [x0,12]
-	cmp	w0, 3
-	bne	.L2042
-	sub	w0, w22, #1
-	add	w1, w20, w20, lsl 1
+	str	w0, [x1,2056]
+	cbz	w25, .L2066
+	add	x0, x24, :lo12:.LANCHOR0
+	ldr	x1, [x0,624]
+	ldrb	w1, [x1,12]
+	cmp	w1, 3
+	bne	.L2066
+	ldrb	w0, [x0,756]
+	cbnz	w0, .L2066
+	sub	w0, w25, #1
+	add	w1, w19, w19, lsl 1
 	add	w0, w0, w1
-	b	.L2074
-.L2042:
-	mov	w0, w20
-.L2074:
-	adrp	x21, .LANCHOR2
+	b	.L2098
+.L2066:
+	mov	w0, w19
+.L2098:
+	adrp	x20, .LANCHOR2
 	bl	nandc_set_seed
-	add	x27, x21, :lo12:.LANCHOR2
-	mov	w0, w23
+	add	x27, x20, :lo12:.LANCHOR2
+	mov	w0, w26
 	mov	w1, 0
-	mov	x3, x25
-	mov	x4, x26
+	mov	x3, x22
+	mov	x4, x23
 	add	x27, x27, 8
 	ldrb	w2, [x27,9]
 	bl	nandc_xfer
 	cmn	w0, #1
-	bne	.L2044
-	add	x28, x19, :lo12:.LANCHOR0
+	bne	.L2068
+	add	x28, x24, :lo12:.LANCHOR0
 	ldrb	w5, [x28,720]
-	cbz	w5, .L2045
+	cbz	w5, .L2069
 	ldrb	w4, [x27,9]
-	mov	w0, w23
-	orr	w1, w20, w22, lsl 24
-	mov	x2, x25
-	mov	x3, x26
+	mov	w0, w26
+	orr	w1, w19, w25, lsl 24
+	mov	x2, x22
+	mov	x3, x23
 	str	x5, [x29,104]
 	strb	wzr, [x28,720]
 	bl	flash_read_page
 	ldr	x5, [x29,104]
 	strb	w5, [x28,720]
-	cbnz	w22, .L2046
-.L2053:
-	ldrb	w2, [x19,#:lo12:.LANCHOR0]
-	add	x1, x19, :lo12:.LANCHOR0
-	cbz	w2, .L2046
+	cbnz	w25, .L2070
+.L2077:
+	ldrb	w2, [x24,#:lo12:.LANCHOR0]
+	add	x1, x24, :lo12:.LANCHOR0
+	cbz	w2, .L2070
 	ldrb	w1, [x1,724]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	blt	.L2046
-	add	x21, x21, :lo12:.LANCHOR2
-	ldrb	w1, [x21,27]
+	blt	.L2070
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrb	w1, [x20,27]
 	sub	w1, w1, #4
 	uxtb	w1, w1
 	cmp	w1, 4
 	mov	w1, 256
 	csel	w0, w0, w1, hi
-	b	.L2061
-.L2046:
+	b	.L2085
+.L2070:
 	cmn	w0, #1
-	bne	.L2061
-.L2054:
-	adrp	x0, .LANCHOR4+1240
-	ldr	x5, [x0,#:lo12:.LANCHOR4+1240]
-	cbnz	x5, .L2049
-.L2052:
-	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC164
-	add	x0, x0, :lo12:.LC164
+	bne	.L2085
+.L2078:
+	adrp	x0, .LANCHOR3+1520
+	ldr	x5, [x0,#:lo12:.LANCHOR3+1520]
+	cbnz	x5, .L2073
+.L2076:
+	add	x24, x24, :lo12:.LANCHOR0
+	adrp	x0, .LC166
+	add	x0, x0, :lo12:.LC166
 	mov	w1, 0
-	mov	w2, w24
+	mov	w2, w21
 	mov	w3, -1
-	ldrb	w4, [x19,720]
+	ldrb	w4, [x24,720]
 	bl	printk
-	ldrb	w0, [x19,672]
-	cbnz	w0, .L2050
+	ldrb	w0, [x24,672]
+	cbnz	w0, .L2074
 	mov	w0, -1
-	b	.L2061
-.L2049:
-	add	x4, x21, :lo12:.LANCHOR2
-	mov	w0, w23
-	orr	w1, w20, w22, lsl 24
-	mov	x2, x25
-	mov	x3, x26
+	b	.L2085
+.L2073:
+	add	x4, x20, :lo12:.LANCHOR2
+	mov	w0, w26
+	orr	w1, w19, w25, lsl 24
+	mov	x2, x22
+	mov	x3, x23
 	ldrb	w4, [x4,17]
 	blr	x5
 	cmn	w0, #1
-	bne	.L2061
-	b	.L2052
-.L2050:
-	add	x21, x21, :lo12:.LANCHOR2
-	mov	w0, w23
-	orr	w1, w20, w22, lsl 24
-	mov	x2, x25
-	mov	x3, x26
-	ldrb	w4, [x21,17]
+	bne	.L2085
+	b	.L2076
+.L2074:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w0, w26
+	orr	w1, w19, w25, lsl 24
+	mov	x2, x22
+	mov	x3, x23
+	ldrb	w4, [x20,17]
 	bl	flash_ddr_tuning_read
-	b	.L2061
-.L2044:
-	cbz	w22, .L2053
-	b	.L2061
-.L2045:
-	cbz	w22, .L2053
-	b	.L2054
-.L2061:
+	b	.L2085
+.L2068:
+	cbz	w25, .L2077
+	b	.L2085
+.L2069:
+	cbz	w25, .L2077
+	b	.L2078
+.L2085:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -12731,99 +13061,99 @@ queue_wait_first_req_completed:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldrb	w22, [x0,2835]
+	ldrb	w22, [x0,2851]
 	cmp	w22, 255
-	beq	.L2169
-	add	x0, x0, 784
+	beq	.L2193
+	add	x0, x0, 800
 	mov	w20, 0
 	add	x0, x0, x22, lsl 6
-	ldrb	w2, [x0,58]
+	ldrb	w1, [x0,58]
 	ldr	w24, [x0,40]
-	sub	w0, w2, #1
-	cmp	w0, 10
-	bhi	.L2077
-	adrp	x1, .L2079
-	add	x1, x1, :lo12:.L2079
-	ldrh	w0, [x1,w0,uxtw #1]
-	adr	x1, .Lrtx2079
-	add	x0, x1, w0, sxth #2
+	sub	w2, w1, #1
+	cmp	w2, 10
+	bhi	.L2101
+	adrp	x0, .L2103
+	add	x0, x0, :lo12:.L2103
+	ldrh	w0, [x0,w2,uxtw #1]
+	adr	x2, .Lrtx2103
+	add	x0, x2, w0, sxth #2
 	br	x0
-.Lrtx2079:
+.Lrtx2103:
 	.section	.rodata
 	.align	0
 	.align	2
-.L2079:
-	.2byte	(.L2078 - .Lrtx2079) / 4
-	.2byte	(.L2080 - .Lrtx2079) / 4
-	.2byte	(.L2081 - .Lrtx2079) / 4
-	.2byte	(.L2081 - .Lrtx2079) / 4
-	.2byte	(.L2081 - .Lrtx2079) / 4
-	.2byte	(.L2081 - .Lrtx2079) / 4
-	.2byte	(.L2082 - .Lrtx2079) / 4
-	.2byte	(.L2083 - .Lrtx2079) / 4
-	.2byte	(.L2084 - .Lrtx2079) / 4
-	.2byte	(.L2081 - .Lrtx2079) / 4
-	.2byte	(.L2084 - .Lrtx2079) / 4
+.L2103:
+	.2byte	(.L2102 - .Lrtx2103) / 4
+	.2byte	(.L2104 - .Lrtx2103) / 4
+	.2byte	(.L2105 - .Lrtx2103) / 4
+	.2byte	(.L2105 - .Lrtx2103) / 4
+	.2byte	(.L2105 - .Lrtx2103) / 4
+	.2byte	(.L2105 - .Lrtx2103) / 4
+	.2byte	(.L2106 - .Lrtx2103) / 4
+	.2byte	(.L2107 - .Lrtx2103) / 4
+	.2byte	(.L2108 - .Lrtx2103) / 4
+	.2byte	(.L2105 - .Lrtx2103) / 4
+	.2byte	(.L2108 - .Lrtx2103) / 4
 	.text
-.L2078:
+.L2102:
 	mov	w0, w24
 	mov	w1, 64
 	bl	flash_wait_device_ready
-	tbz	x0, 6, .L2169
+	tbz	x0, 6, .L2193
 	add	x3, x19, :lo12:.LANCHOR0
-	add	x2, x3, 784
-	add	x2, x2, x22, lsl 6
-	ldr	x0, [x2,16]
-	ldr	x1, [x2,8]
-	cbz	x0, .L2086
-	ldrb	w4, [x2,56]
-	ldrb	w2, [x3,2832]
-	cmp	w4, w2
-	csel	x1, x1, x0, ne
-.L2086:
+	add	x0, x3, 800
+	add	x0, x0, x22, lsl 6
+	ldr	x2, [x0,16]
+	ldr	x1, [x0,8]
+	cbz	x2, .L2110
+	ldrb	w4, [x0,56]
+	ldrb	w0, [x3,2848]
+	cmp	w4, w0
+	csel	x1, x1, x2, ne
+.L2110:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, w24
-	add	x19, x19, 784
+	add	x19, x19, 800
 	add	x19, x19, x22, lsl 6
 	ldr	x2, [x19,24]
 	bl	flash_complete_page_read
 	str	w0, [x19,52]
 	mov	w0, 13
 	strb	w0, [x19,58]
-	b	.L2170
-.L2080:
+	b	.L2194
+.L2104:
 	mov	w1, 64
 	mov	w0, w24
 	bl	flash_wait_device_ready
-	add	x1, x19, :lo12:.LANCHOR0
-	lsl	x2, x22, 6
-	add	x3, x1, 784
-	add	x4, x3, x2
-	ldrb	w20, [x3,x2]
-	tbz	x0, 6, .L2169
+	add	x2, x19, :lo12:.LANCHOR0
+	lsl	x4, x22, 6
+	add	x3, x2, 800
+	add	x1, x3, x4
+	ldrb	w20, [x3,x4]
+	tbz	x0, 6, .L2193
 	add	x3, x3, x20, lsl 6
-	ldr	x0, [x4,16]
-	ldr	x27, [x4,8]
+	ldr	x0, [x1,16]
+	ldr	x27, [x1,8]
 	ldr	x24, [x3,8]
-	cbz	x0, .L2087
-	ldrb	w2, [x4,56]
-	ldrb	w1, [x1,2832]
-	cmp	w2, w1
+	cbz	x0, .L2111
+	ldrb	w3, [x1,56]
+	ldrb	w1, [x2,2848]
+	cmp	w3, w1
 	csel	x27, x27, x0, ne
-.L2087:
+.L2111:
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x0, x2, 784
+	add	x0, x2, 800
 	add	x0, x0, x20, lsl 6
 	ldr	x1, [x0,16]
-	cbz	x1, .L2088
+	cbz	x1, .L2112
 	ldrb	w3, [x0,56]
-	ldrb	w0, [x2,2832]
+	ldrb	w0, [x2,2848]
 	cmp	w3, w0
 	csel	x24, x24, x1, ne
-.L2088:
+.L2112:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	x1, x27
-	add	x21, x21, 784
+	add	x21, x21, 800
 	add	x26, x21, x22, lsl 6
 	add	x21, x21, x20, lsl 6
 	add	x28, x26, 32
@@ -12838,66 +13168,74 @@ queue_wait_first_req_completed:
 	bl	flash_complete_plane_page_read
 	mov	w25, w0
 	cmn	w23, #1
-	beq	.L2089
+	beq	.L2113
 	ldr	w0, [x28,4]
 	cmn	w0, #1
-	beq	.L2090
+	beq	.L2114
 	ldr	x1, [x26,8]
 	ldr	w1, [x1,4]
 	cmp	w0, w1
-	beq	.L2090
-.L2089:
+	beq	.L2114
+.L2113:
 	add	x4, x19, :lo12:.LANCHOR0
-	mov	x2, x27
-	add	x21, x4, 784
+	mov	w0, 1
+	add	x21, x4, 800
+	mov	w3, 24
 	add	x21, x21, x22, lsl 6
-	ldrb	w4, [x4,2832]
+	ldrb	w2, [x4,744]
 	add	x26, x21, 32
+	ldrb	w4, [x4,2848]
 	add	x21, x21, 16
 	ldr	w1, [x21,24]
+	lsl	w0, w0, w2
+	sub	w3, w3, w2
+	sub	w0, w0, #1
+	lsr	w2, w1, w3
+	lsl	w3, w0, w3
+	bic	w1, w1, w3
 	ldr	x3, [x21,8]
-	ubfx	x0, x1, 21, 3
-	and	w1, w1, -14680065
+	and	w0, w0, w2
+	mov	x2, x27
 	bl	flash_read_page_en
 	mov	w23, w0
 	ldr	w2, [x26,4]
 	cmn	w2, #1
-	beq	.L2091
+	beq	.L2115
 	ldr	x3, [x21,8]
 	ldr	w4, [x3,4]
 	cmp	w2, w4
-	beq	.L2091
+	beq	.L2115
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 6, .L2091
-	adrp	x0, .LC165
+	tbz	x0, 6, .L2115
+	adrp	x0, .LC167
 	ldr	w1, [x26,8]
 	ldr	w3, [x3]
-	add	x0, x0, :lo12:.LC165
+	add	x0, x0, :lo12:.LC167
 	bl	printk
-.L2091:
+.L2115:
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 784
+	add	x0, x0, 800
 	add	x0, x0, x22, lsl 6
 	ldr	w1, [x0,36]
 	cmn	w1, #1
-	beq	.L2090
+	beq	.L2114
 	ldr	x0, [x0,24]
 	ldr	w0, [x0,4]
 	cmp	w1, w0
-	beq	.L2090
-	adrp	x1, .LANCHOR3
+	beq	.L2114
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR4
 	mov	w2, 360
 	add	x1, x1, 224
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2090:
+.L2114:
 	add	x3, x19, :lo12:.LANCHOR0
 	mov	w1, 13
-	add	x3, x3, 784
+	add	x3, x3, 800
 	cmn	w25, #1
 	add	x22, x3, x22, lsl 6
 	ldrb	w0, [x22,2]
@@ -12905,138 +13243,154 @@ queue_wait_first_req_completed:
 	orr	w0, w0, 8
 	strb	w1, [x22,58]
 	strb	w0, [x22,2]
-	beq	.L2092
+	beq	.L2116
 	add	x3, x3, x20, lsl 6
 	ldr	w0, [x3,36]
 	cmn	w0, #1
-	beq	.L2094
+	beq	.L2118
 	ldr	x1, [x3,24]
 	ldr	w1, [x1,4]
 	cmp	w0, w1
-	beq	.L2094
-.L2092:
+	beq	.L2118
+.L2116:
 	add	x4, x19, :lo12:.LANCHOR0
-	mov	x2, x24
-	add	x21, x4, 784
+	mov	w2, 24
+	add	x21, x4, 800
+	mov	w0, 1
 	add	x21, x21, x20, lsl 6
-	ldrb	w4, [x4,2832]
+	ldrb	w3, [x4,744]
 	add	x22, x21, 32
+	ldrb	w4, [x4,2848]
 	add	x21, x21, 16
 	ldr	w1, [x21,24]
+	sub	w2, w2, w3
+	lsl	w0, w0, w3
+	sub	w0, w0, #1
+	lsr	w3, w1, w2
+	lsl	w2, w0, w2
+	and	w0, w0, w3
 	ldr	x3, [x21,8]
-	ubfx	x0, x1, 21, 3
-	and	w1, w1, -14680065
+	bic	w1, w1, w2
+	mov	x2, x24
 	bl	flash_read_page_en
 	ldr	w2, [x22,4]
 	cmn	w2, #1
-	beq	.L2096
+	beq	.L2120
 	ldr	x3, [x21,8]
 	ldr	w4, [x3,4]
 	cmp	w2, w4
-	beq	.L2096
+	beq	.L2120
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 6, .L2096
-	adrp	x0, .LC165
+	tbz	x0, 6, .L2120
+	adrp	x0, .LC167
 	ldr	w1, [x22,8]
 	ldr	w3, [x3]
-	add	x0, x0, :lo12:.LC165
+	add	x0, x0, :lo12:.LC167
 	bl	printk
-.L2096:
+.L2120:
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 784
+	add	x0, x0, 800
 	add	x0, x0, x20, lsl 6
 	ldr	w1, [x0,36]
 	cmn	w1, #1
-	beq	.L2094
+	beq	.L2118
 	ldr	x0, [x0,24]
 	ldr	w0, [x0,4]
 	cmp	w1, w0
-	beq	.L2094
-	adrp	x1, .LANCHOR3
+	beq	.L2118
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR4
 	mov	w2, 375
 	add	x1, x1, 224
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2094:
+.L2118:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 13
-	add	x19, x19, 784
+	add	x19, x19, 800
 	add	x19, x19, x20, lsl 6
 	str	w23, [x19,52]
 	strb	w1, [x19,58]
-.L2170:
+.L2194:
 	ldrb	w0, [x19,2]
 	orr	w0, w0, 8
 	strb	w0, [x19,2]
-	b	.L2169
-.L2081:
+	b	.L2193
+.L2105:
 	bl	nandc_iqr_wait_flash_ready
 	mov	w0, w24
 	mov	w1, 64
 	bl	flash_wait_device_ready
 	mov	w21, w0
-	tbz	x21, 6, .L2169
+	tbz	x21, 6, .L2193
 	mov	w20, 5
 	ands	w20, w21, w20
-	beq	.L2097
+	beq	.L2121
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 12
-	add	x19, x19, 784
+	add	x19, x19, 800
 	mov	w2, w21
 	add	x19, x19, x22, lsl 6
 	mov	w4, 12
 	mov	w20, w21
 	strb	w0, [x19,58]
-	adrp	x0, .LC166
+	adrp	x0, .LC168
 	ldrb	w1, [x19,1]
-	add	x0, x0, :lo12:.LC166
+	add	x0, x0, :lo12:.LC168
 	ldr	w3, [x19,40]
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19,52]
-	b	.L2077
-.L2097:
+	b	.L2101
+.L2121:
 	add	x4, x19, :lo12:.LANCHOR0
 	mov	w1, 13
-	add	x23, x4, 784
+	add	x23, x4, 800
 	add	x23, x23, x22, lsl 6
 	strb	w1, [x23,58]
-	ldr	x1, [x4,2864]
+	ldr	x1, [x4,2880]
 	str	w20, [x23,52]
 	ldr	w2, [x1,156]
 	mov	w1, 20041
 	movk	w1, 0x444b, lsl 16
 	cmp	w2, w1
-	bne	.L2169
+	bne	.L2193
 	ldrh	w0, [x23,50]
-	cbnz	w0, .L2169
-	adrp	x21, .LANCHOR4
+	cbnz	w0, .L2193
+	ldrb	w3, [x4,744]
+	mov	w0, 1
+	adrp	x21, .LANCHOR3
 	ldr	w1, [x23,40]
-	add	x21, x21, :lo12:.LANCHOR4
-	ldrb	w4, [x4,2832]
-	ubfx	x0, x1, 21, 3
-	and	w1, w1, -14680065
-	ldr	x3, [x21,1256]
-	ldr	x2, [x21,1248]
+	lsl	w0, w0, w3
+	add	x21, x21, :lo12:.LANCHOR3
+	mov	w2, 24
+	sub	w0, w0, #1
+	sub	w2, w2, w3
+	ldrb	w4, [x4,2848]
+	lsr	w3, w1, w2
+	lsl	w2, w0, w2
+	bic	w1, w1, w2
+	and	w0, w0, w3
+	ldr	x2, [x21,1528]
+	ldr	x3, [x21,1536]
 	bl	flash_read_page_en
 	cmn	w0, #1
 	mov	w3, w0
-	beq	.L2098
+	beq	.L2122
 	ldr	x1, [x23,24]
-	ldr	x0, [x21,1256]
+	ldr	x0, [x21,1536]
 	ldr	w1, [x1]
 	ldr	w0, [x0]
 	cmp	w1, w0
-	beq	.L2169
-.L2098:
+	beq	.L2193
+.L2122:
 	add	x4, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC167
-	add	x19, x4, 784
-	add	x0, x0, :lo12:.LC167
+	adrp	x0, .LC169
+	add	x19, x4, 800
+	add	x0, x0, :lo12:.LC169
 	add	x19, x19, x22, lsl 6
 	ldrb	w4, [x4,720]
 	ldrb	w1, [x19,1]
@@ -13044,41 +13398,49 @@ queue_wait_first_req_completed:
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19,52]
-	b	.L2077
-.L2084:
-	add	x3, x19, :lo12:.LANCHOR0
-	cmp	w2, 11
-	mov	w1, 3
-	mov	w2, 10
-	add	x21, x3, 784
-	csel	w2, w1, w2, ne
-	ubfx	x0, x24, 21, 3
-	add	x1, x21, x22, lsl 6
-	mov	x25, x3
-.L2100:
-	ldrb	w1, [x1]
+	b	.L2101
+.L2108:
+	add	x25, x19, :lo12:.LANCHOR0
+	cmp	w1, 11
+	mov	w0, 3
+	mov	w5, 10
+	csel	w5, w0, w5, ne
+	mov	w4, 24
+	ldrb	w1, [x25,744]
+	mov	w0, 1
+	add	x21, x25, 800
+	sub	w4, w4, w1
+	lsl	w0, w0, w1
+	sub	w0, w0, #1
+	lsr	w2, w24, w4
+	and	w2, w0, w2
+	add	x3, x21, x22, lsl 6
+	uxth	w2, w2
+.L2124:
+	ldrb	w1, [x3]
 	cmp	w1, 255
-	beq	.L2171
+	beq	.L2195
 	sxtw	x23, w1
-	add	x1, x21, x23, lsl 6
-	ldrb	w3, [x1,58]
-	cmp	w3, w2
-	bne	.L2100
-	ldr	w3, [x1,40]
-	ubfx	x3, x3, 21, 3
-	cmp	w0, w3
-	bne	.L2100
+	add	x3, x21, x23, lsl 6
+	ldrb	w1, [x3,58]
+	cmp	w1, w5
+	bne	.L2124
+	ldr	w1, [x3,40]
+	lsr	w1, w1, w4
+	and	w1, w0, w1
+	cmp	w2, w1
+	bne	.L2124
 	bl	nandc_iqr_wait_flash_ready
 	mov	w0, w24
 	mov	w1, 64
 	bl	flash_wait_device_ready
 	mov	w20, w0
-	tbz	x20, 6, .L2168
+	tbz	x20, 6, .L2192
 	ands	w1, w20, 15
-	beq	.L2104
+	beq	.L2128
 	add	x21, x21, x22, lsl 6
-	adrp	x0, .LC168
-	add	x0, x0, :lo12:.LC168
+	adrp	x0, .LC170
+	add	x0, x0, :lo12:.LC170
 	mov	w2, w20
 	mov	w4, 12
 	ldrb	w1, [x21,1]
@@ -13088,43 +13450,51 @@ queue_wait_first_req_completed:
 	strb	w0, [x21,58]
 	mov	w0, -1
 	str	w0, [x21,52]
-	b	.L2103
-.L2104:
+	b	.L2127
+.L2128:
 	add	x20, x21, x22, lsl 6
 	mov	w2, 13
 	str	w1, [x20,52]
-	ldr	x1, [x25,2864]
+	ldr	x1, [x25,2880]
 	strb	w2, [x20,58]
 	ldr	w2, [x1,156]
 	mov	w1, 20041
 	movk	w1, 0x444b, lsl 16
 	cmp	w2, w1
-	bne	.L2168
+	bne	.L2192
 	ldrh	w0, [x20,50]
-	cbnz	w0, .L2168
-	adrp	x21, .LANCHOR4
+	cbnz	w0, .L2192
+	ldrb	w3, [x25,744]
+	mov	w0, 1
+	adrp	x21, .LANCHOR3
 	ldr	w1, [x20,40]
-	add	x21, x21, :lo12:.LANCHOR4
-	ldrb	w4, [x25,2832]
-	ubfx	x0, x1, 21, 3
-	and	w1, w1, -14680065
-	ldr	x3, [x21,1256]
-	ldr	x2, [x21,1248]
+	lsl	w0, w0, w3
+	add	x21, x21, :lo12:.LANCHOR3
+	mov	w2, 24
+	sub	w0, w0, #1
+	sub	w2, w2, w3
+	ldrb	w4, [x25,2848]
+	lsr	w3, w1, w2
+	lsl	w2, w0, w2
+	bic	w1, w1, w2
+	and	w0, w0, w3
+	ldr	x2, [x21,1528]
+	ldr	x3, [x21,1536]
 	bl	flash_read_page_en
 	cmn	w0, #1
 	mov	w3, w0
-	beq	.L2106
+	beq	.L2130
 	ldr	x1, [x20,24]
-	ldr	x0, [x21,1256]
+	ldr	x0, [x21,1536]
 	ldr	w1, [x1]
 	ldr	w0, [x0]
 	cmp	w1, w0
-	beq	.L2168
-.L2106:
+	beq	.L2192
+.L2130:
 	add	x4, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC169
-	add	x20, x4, 784
-	add	x0, x0, :lo12:.LC169
+	adrp	x0, .LC171
+	add	x20, x4, 800
+	add	x0, x0, :lo12:.LC171
 	add	x20, x20, x22, lsl 6
 	ldrb	w4, [x4,720]
 	ldrb	w1, [x20,1]
@@ -13132,54 +13502,54 @@ queue_wait_first_req_completed:
 	bl	printk
 	mov	w0, -1
 	str	w0, [x20,52]
-.L2168:
+.L2192:
 	mov	w20, 0
-.L2103:
+.L2127:
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x1, x1, 784
+	add	x1, x1, 800
 	add	x19, x1, x22, lsl 6
 	add	x1, x1, x23, lsl 6
 	ldrb	w0, [x19,58]
 	strb	w0, [x1,58]
 	ldr	w0, [x19,52]
 	str	w0, [x1,52]
-	b	.L2077
-.L2171:
+	b	.L2101
+.L2195:
 	mov	w20, -1
-	b	.L2077
-.L2082:
+	b	.L2101
+.L2106:
 	mov	w1, 32
 	mov	w0, w24
 	bl	flash_wait_device_ready
-	tbz	x0, 5, .L2169
+	tbz	x0, 5, .L2193
 	ands	w20, w0, 15
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x19, x19, x22, lsl 6
-	beq	.L2108
+	beq	.L2132
 	mov	w1, 12
 	mov	w20, w0
-	strb	w1, [x19,842]
+	strb	w1, [x19,858]
 	mov	w1, -1
-	str	w1, [x19,836]
-	b	.L2077
-.L2108:
+	str	w1, [x19,852]
+	b	.L2101
+.L2132:
 	mov	w0, 13
-	str	w20, [x19,836]
-	strb	w0, [x19,842]
-	b	.L2077
-.L2083:
+	str	w20, [x19,852]
+	strb	w0, [x19,858]
+	b	.L2101
+.L2107:
 	mov	w1, 64
 	mov	w0, w24
 	bl	flash_wait_device_ready
-	tbz	x0, 6, .L2169
+	tbz	x0, 6, .L2193
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x19, x19, x22, lsl 6
-	str	w0, [x19,836]
+	str	w0, [x19,852]
 	mov	w0, 7
-	strb	w0, [x19,842]
-.L2169:
+	strb	w0, [x19,858]
+.L2193:
 	mov	w20, 0
-.L2077:
+.L2101:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13197,15 +13567,15 @@ sblk_wait_write_queue_completed:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
-.L2173:
+.L2197:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2835]
+	ldrb	w0, [x0,2851]
 	cmp	w0, 255
-	beq	.L2175
+	beq	.L2199
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2173
-.L2175:
+	b	.L2197
+.L2199:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -13238,23 +13608,33 @@ ftl_read_page:
 	.type	ftl_read_ppa_page, %function
 ftl_read_ppa_page:
 	stp	x29, x30, [sp, -64]!
+	mov	w5, 1
 	mov	w4, w3
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	mov	w19, w0
-	mov	x21, x1
-	mov	x20, x2
+	mov	w20, w0
+	adrp	x0, .LANCHOR0+744
+	mov	w19, 24
 	str	x4, [x29,56]
+	stp	x21, x22, [sp,32]
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+744]
+	mov	x22, x1
+	mov	x21, x2
+	sub	w19, w19, w0
+	lsl	w5, w5, w0
+	sub	w5, w5, #1
+	lsr	w19, w20, w19
+	and	w19, w19, w5
 	bl	sblk_wait_write_queue_completed
 	ldr	x4, [x29,56]
-	mov	w1, w19
-	mov	x2, x21
-	mov	x3, x20
-	ubfx	x0, x19, 21, 3
+	uxtb	w19, w19
+	mov	w1, w20
+	mov	x2, x22
+	mov	x3, x21
+	mov	w0, w19
 	bl	flash_read_page_en
-	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 64
 	ret
 	.size	ftl_read_ppa_page, .-ftl_read_ppa_page
@@ -13264,118 +13644,138 @@ ftl_read_ppa_page:
 sblk_read_page:
 	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	adrp	x26, .LANCHOR0
 	stp	x23, x24, [sp,48]
-	adrp	x22, .LANCHOR0
-	adrp	x23, .LANCHOR3
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	add	x24, x26, :lo12:.LANCHOR0
 	uxtb	w21, w1
-	add	x22, x22, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LANCHOR3
+	adrp	x28, .LC0
+	mov	x23, x0
 	stp	x19, x20, [sp,16]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	x25, x0
+	add	x27, x24, 800
 	mov	x19, x0
 	mov	w20, w21
-	add	x27, x22, 784
-	add	x23, x23, 256
-.L2179:
-	cbz	w20, .L2202
-	ldrb	w28, [x19]
-	ldr	w26, [x19,40]
-.L2180:
-	mov	w0, w26
+	add	x28, x28, :lo12:.LC0
+.L2203:
+	cbz	w20, .L2226
+	ldrb	w25, [x19]
+	ldr	w22, [x19,40]
+.L2204:
+	mov	w0, w22
 	mov	w1, 0
 	bl	queue_lun_state
-	cbz	w0, .L2203
+	cbz	w0, .L2227
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2180
-.L2203:
+	b	.L2204
+.L2227:
 	cmp	w20, 1
-	beq	.L2186
-	adrp	x0, .LANCHOR4+1264
-	ldrb	w0, [x0,#:lo12:.LANCHOR4+1264]
-	cbz	w0, .L2186
+	beq	.L2210
+	adrp	x0, .LANCHOR3+1544
+	ldrb	w0, [x0,#:lo12:.LANCHOR3+1544]
+	cbz	w0, .L2210
+	add	x0, x26, :lo12:.LANCHOR0
+	mov	w3, 1
+	ldrb	w1, [x0,744]
+	mov	w0, 24
+	lsl	w3, w3, w1
+	sub	w0, w0, w1
+	lsr	w0, w22, w0
+	sub	w3, w3, #1
+	and	w3, w3, w0
 	ldrb	w0, [x19]
-	ubfx	x3, x26, 21, 3
 	cmp	w0, 255
-	bne	.L2185
-	adrp	x0, .LC0
-	mov	x1, x23
+	uxth	w3, w3
+	bne	.L2209
+	adrp	x1, .LANCHOR4
 	mov	w2, 661
-	add	x0, x0, :lo12:.LC0
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	x0, x28
+	add	x1, x1, 256
 	str	x3, [x29,120]
 	bl	printk
 	bl	dump_stack
 	ldr	x3, [x29,120]
-.L2185:
-	ldrb	w24, [x19]
-	lsl	x24, x24, 6
-	add	x2, x27, x24
-	ldr	w1, [x2,40]
-	ubfx	x0, x1, 21, 3
-	cmp	w3, w0
-	bne	.L2186
-	ldrh	w0, [x22,3362]
-	add	w26, w0, w26
-	cmp	w1, w26
-	bne	.L2186
+.L2209:
+	ldrb	w4, [x19]
+	mov	w5, 1
+	ldrb	w0, [x24,744]
+	mov	w2, 24
+	lsl	x4, x4, 6
+	add	x6, x27, x4
+	lsl	w5, w5, w0
+	sub	w0, w2, w0
+	sub	w5, w5, #1
+	ldr	w1, [x6,40]
+	lsr	w0, w1, w0
+	and	w0, w5, w0
+	cmp	w3, w0, uxth
+	bne	.L2210
+	ldrh	w0, [x24,3634]
+	add	w22, w0, w22
+	cmp	w1, w22
+	bne	.L2210
 	ldr	w0, [x19,40]
-	add	x26, x22, 2835
-	str	x2, [x29,104]
+	add	x22, x24, 2851
+	str	x6, [x29,96]
 	sub	w20, w20, #1
-	ldrb	w28, [x27,x24]
+	ldrb	w25, [x27,x4]
+	str	x4, [x29,104]
 	bl	flash_start_plane_read
-	strb	wzr, [x19,59]
-	mov	w4, 2
-	mov	w3, -1
-	strb	w4, [x19,58]
-	mov	x0, x26
-	strb	w3, [x19]
+	mov	w3, 2
+	mov	w2, -1
+	strb	w3, [x19,58]
+	mov	x0, x22
+	strb	w2, [x19]
 	mov	x1, x19
-	str	x4, [x29,112]
-	str	x3, [x29,120]
+	strb	wzr, [x19,59]
+	str	x3, [x29,112]
+	str	x2, [x29,120]
 	bl	buf_add_tail
-	ldr	x2, [x29,104]
-	mov	x0, x26
-	ldr	x4, [x29,112]
-	ldr	x3, [x29,120]
-	mov	x1, x2
-	strb	w4, [x2,58]
-	strb	wzr, [x2,59]
-	strb	w3, [x27,x24]
+	ldr	x6, [x29,96]
+	mov	x0, x22
+	ldr	x4, [x29,104]
+	ldr	x3, [x29,112]
+	mov	x1, x6
+	ldr	x2, [x29,120]
+	strb	w3, [x6,58]
+	strb	wzr, [x6,59]
+	strb	w2, [x27,x4]
 	bl	buf_add_tail
-	b	.L2184
-.L2186:
+	b	.L2208
+.L2210:
 	mov	x0, x19
 	bl	queue_read_cmd
-.L2184:
+.L2208:
 	subs	w20, w20, #1
-	beq	.L2202
-	sbfiz	x19, x28, 6, 32
-	add	x19, x27, x19
-	b	.L2179
-.L2202:
+	beq	.L2226
+	add	x19, x26, :lo12:.LANCHOR0
+	sbfiz	x25, x25, 6, 32
+	add	x19, x19, 800
+	add	x19, x19, x25
+	b	.L2203
+.L2226:
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x19, x19, 784
-.L2190:
-	cbz	w21, .L2204
-	ldrb	w0, [x25,58]
+	add	x19, x19, 800
+.L2214:
+	cbz	w21, .L2228
+	ldrb	w0, [x23,58]
 	cmp	w0, 13
-	bne	.L2191
-	ldrb	w0, [x25]
+	bne	.L2215
+	ldrb	w0, [x23]
 	sub	w21, w21, #1
 	cmp	w0, 255
-	beq	.L2191
-	sbfiz	x25, x0, 6, 32
-	add	x25, x19, x25
-.L2191:
+	beq	.L2215
+	sbfiz	x23, x0, 6, 32
+	add	x23, x19, x23
+.L2215:
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2190
-.L2204:
+	b	.L2214
+.L2228:
 	mov	w0, w21
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13407,28 +13807,31 @@ flash_start_tlc_page_prog:
 	mov	x23, x6
 	cmp	w0, w26
 	mov	x19, x4
-	bhi	.L2206
-	adrp	x1, .LANCHOR3
+	bhi	.L2230
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 726
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 740
 	add	x1, x1, 272
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2206:
+.L2230:
 	add	x4, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x4,633]
+	cmp	w0, w26
+	bls	.L2229
 	add	x26, x4, x26, sxtw
 	ldrb	w26, [x26,736]
-	mov	w0, w26
 	ldr	x19, [x4,536]
+	mov	w0, w26
 	bl	nandc_cs
-	cbz	w25, .L2207
+	cbz	w25, .L2232
 	sxtw	x1, w26
 	add	x1, x1, 8
 	add	x1, x19, x1, lsl 8
 	str	w25, [x1,8]
-.L2207:
+.L2232:
 	ubfiz	x7, x26, 8, 8
 	mov	w0, 128
 	add	x19, x19, x7
@@ -13447,15 +13850,16 @@ flash_start_tlc_page_prog:
 	add	w0, w0, w21
 	bl	nandc_set_seed
 	adrp	x1, .LANCHOR2+17
+	mov	w0, 1
 	mov	x2, x24
 	mov	x3, x23
-	mov	w0, 1
 	ldrb	w1, [x1,#:lo12:.LANCHOR2+17]
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
 	str	w22, [x19,2056]
 	mov	w0, w26
 	bl	nandc_de_cs
+.L2229:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13466,29 +13870,42 @@ flash_start_tlc_page_prog:
 	.align	2
 	.type	queue_tlc_prog_cmd, %function
 queue_tlc_prog_cmd:
-	stp	x29, x30, [sp, -48]!
-	mov	w1, 1
-	mov	w2, 26
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	str	x23, [sp,48]
+	add	x22, x22, :lo12:.LANCHOR0
+	mov	x21, x0
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	mov	x19, x0
+	mov	w23, 1
 	ldr	x6, [x0]
-	ldr	w20, [x6,40]
+	mov	w0, 24
+	ldrb	w2, [x22,744]
+	sub	w0, w0, w2
+	ldr	w1, [x6,40]
+	lsl	w20, w23, w0
+	lsl	w2, w23, w2
+	sub	w20, w20, #1
+	sub	w19, w2, #1
+	and	w20, w20, w1
+	lsr	w1, w1, w0
+	and	w19, w19, w1
 	ldr	x5, [x6,8]
-	and	w21, w20, 2097151
 	ldrb	w0, [x6,60]
-	ubfx	x20, x20, 21, 3
+	mov	w1, w23
+	uxtb	w19, w19
 	ldr	x6, [x6,24]
-	mov	w3, w20
-	mov	w4, w21
+	mov	w3, w19
+	mov	w4, w20
+	mov	w2, 26
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x6, [x19,8]
-	mov	w3, w20
-	ldr	x0, [x19]
-	mov	w4, w21
+	ldr	x6, [x21,8]
+	mov	w3, w19
+	ldr	x0, [x21]
+	mov	w4, w20
 	mov	w1, 2
 	mov	w2, 26
 	ldr	x5, [x6,8]
@@ -13497,30 +13914,28 @@ queue_tlc_prog_cmd:
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x6, [x19,16]
-	mov	w3, w20
-	ldr	x0, [x19]
-	mov	w4, w21
+	ldr	x6, [x21,16]
+	mov	w3, w19
+	ldr	x0, [x21]
+	mov	w4, w20
 	mov	w2, 16
 	mov	w1, 3
 	ldr	x5, [x6,8]
 	ldrb	w0, [x0,60]
 	ldr	x6, [x6,24]
 	bl	flash_start_tlc_page_prog
-	ldr	x1, [x19]
+	ldr	x1, [x21]
 	mov	w0, 4
 	strb	w0, [x1,58]
-	mov	w0, 1
-	strb	w0, [x1,59]
 	mov	w0, -1
+	strb	w23, [x1,59]
 	strb	w0, [x1]
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 2835
+	add	x0, x22, 2851
 	bl	buf_add_tail
-	ldr	x21, [sp,32]
+	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 48
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
 	ret
 	.size	queue_tlc_prog_cmd, .-queue_tlc_prog_cmd
 	.align	2
@@ -13534,16 +13949,16 @@ sblk_tlc_prog_one_page:
 	mov	x20, x0
 	ldr	x0, [x0]
 	ldr	w21, [x0,40]
-.L2213:
+.L2238:
 	mov	w0, w21
 	mov	w1, 1
 	bl	queue_lun_state
 	mov	w19, w0
-	cbz	w0, .L2215
+	cbz	w0, .L2240
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2213
-.L2215:
+	b	.L2238
+.L2240:
 	mov	x0, x20
 	bl	queue_tlc_prog_cmd
 	ldr	x21, [sp,32]
@@ -13556,48 +13971,61 @@ sblk_tlc_prog_one_page:
 	.global	sblk_xlc_prog_pages
 	.type	sblk_xlc_prog_pages, %function
 sblk_xlc_prog_pages:
-	stp	x29, x30, [sp, -64]!
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	mov	x19, x0
+	stp	x25, x26, [sp,64]
+	mov	x20, x0
 	mov	x22, x1
 	ldr	x0, [x0]
-	mov	w24, w2
-	ldr	w20, [x0,40]
-.L2217:
-	mov	w0, w20
+	mov	w23, w2
+	ldr	w19, [x0,40]
+.L2242:
+	mov	w0, w19
 	mov	w1, 1
 	bl	queue_lun_state
-	cbz	w0, .L2221
+	cbz	w0, .L2246
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2217
-.L2221:
-	cmp	w24, 2
-	bne	.L2219
-	ldr	x6, [x19]
-	mov	w1, 1
-	ldr	x0, [x22]
+	b	.L2242
+.L2246:
+	cmp	w23, 2
+	bne	.L2244
+	adrp	x25, .LANCHOR0
+	ldr	x6, [x20]
+	add	x25, x25, :lo12:.LANCHOR0
+	mov	w0, 24
+	mov	w24, 1
+	ldr	x1, [x22]
+	ldr	w3, [x6,40]
 	mov	w2, 17
-	ldr	w20, [x6,40]
+	ldrb	w5, [x25,744]
+	ldr	w1, [x1,40]
+	sub	w0, w0, w5
+	lsl	w5, w24, w5
+	lsl	w21, w24, w0
+	sub	w19, w5, #1
+	sub	w21, w21, #1
 	ldr	x5, [x6,8]
-	and	w23, w20, 2097151
-	ldr	w21, [x0,40]
-	ubfx	x20, x20, 21, 3
+	and	w26, w21, w3
+	lsr	w3, w3, w0
+	and	w19, w19, w3
 	ldrb	w0, [x6,60]
 	ldr	x6, [x6,24]
-	mov	w3, w20
-	mov	w4, w23
-	and	w21, w21, 2097151
+	and	w21, w21, w1
+	uxtb	w19, w19
+	mov	w1, w24
+	mov	w3, w19
+	mov	w4, w26
 	bl	flash_start_tlc_page_prog
 	bl	nandc_wait_flash_ready
 	ldr	x6, [x22]
-	mov	w3, w20
-	ldr	x0, [x19]
+	mov	w1, w24
+	ldr	x0, [x20]
+	mov	w3, w19
 	mov	w4, w21
-	mov	w1, 1
 	mov	w2, 26
 	ldr	x5, [x6,8]
 	ldrb	w0, [x0,60]
@@ -13605,11 +14033,11 @@ sblk_xlc_prog_pages:
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x6, [x19,8]
-	mov	w1, w24
-	ldr	x0, [x19]
-	mov	w3, w20
-	mov	w4, w23
+	ldr	x6, [x20,8]
+	mov	w1, w23
+	ldr	x0, [x20]
+	mov	w3, w19
+	mov	w4, w26
 	mov	w2, 17
 	ldr	x5, [x6,8]
 	ldrb	w0, [x0,60]
@@ -13617,9 +14045,9 @@ sblk_xlc_prog_pages:
 	bl	flash_start_tlc_page_prog
 	bl	nandc_wait_flash_ready
 	ldr	x6, [x22,8]
-	mov	w1, w24
-	ldr	x0, [x19]
-	mov	w3, w20
+	mov	w1, w23
+	ldr	x0, [x20]
+	mov	w3, w19
 	mov	w4, w21
 	mov	w2, 26
 	ldr	x5, [x6,8]
@@ -13628,10 +14056,10 @@ sblk_xlc_prog_pages:
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x6, [x19,16]
-	mov	w3, w20
-	ldr	x0, [x19]
-	mov	w4, w23
+	ldr	x6, [x20,16]
+	mov	w3, w19
+	ldr	x0, [x20]
+	mov	w4, w26
 	mov	w1, 3
 	mov	w2, 17
 	ldr	x5, [x6,8]
@@ -13641,35 +14069,33 @@ sblk_xlc_prog_pages:
 	bl	nandc_wait_flash_ready
 	ldr	x6, [x22,16]
 	mov	w1, 3
-	ldr	x0, [x19]
+	ldr	x0, [x20]
 	mov	w2, 16
-	mov	w3, w20
+	mov	w3, w19
 	mov	w4, w21
 	ldr	x5, [x6,8]
 	ldrb	w0, [x0,60]
 	ldr	x6, [x6,24]
 	bl	flash_start_tlc_page_prog
-	ldr	x1, [x19]
+	ldr	x1, [x20]
 	mov	w0, 5
 	strb	w0, [x1,58]
-	mov	w0, 1
-	strb	w0, [x1,59]
 	mov	w0, -1
+	strb	w24, [x1,59]
 	strb	w0, [x1]
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 2835
+	add	x0, x25, 2851
 	bl	buf_add_tail
-	b	.L2220
-.L2219:
-	mov	x0, x19
+	b	.L2245
+.L2244:
+	mov	x0, x20
 	bl	queue_tlc_prog_cmd
-.L2220:
+.L2245:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 64
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
 	ret
 	.size	sblk_xlc_prog_pages, .-sblk_xlc_prog_pages
 	.align	2
@@ -13677,317 +14103,175 @@ sblk_xlc_prog_pages:
 	.type	sblk_3d_tlc_dump_prog, %function
 sblk_3d_tlc_dump_prog:
 	stp	x29, x30, [sp, -48]!
+	mov	w3, 24
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	mov	x19, x0
+	stp	x21, x22, [sp,32]
+	mov	x20, x0
+	mov	w22, 1
 	ldr	w2, [x0,40]
-	adrp	x0, .LC170
-	add	x0, x0, :lo12:.LC170
-	and	w20, w2, 2097151
+	adrp	x0, .LANCHOR0+744
+	ldrb	w19, [x0,#:lo12:.LANCHOR0+744]
+	adrp	x0, .LC172
+	add	x0, x0, :lo12:.LC172
+	sub	w3, w3, w19
+	lsl	w19, w22, w19
+	lsl	w21, w22, w3
+	sub	w19, w19, #1
+	sub	w21, w21, #1
+	lsr	w3, w2, w3
+	and	w21, w21, w2
+	and	w19, w19, w3
+	mov	w1, w21
 	mov	w3, w2
-	mov	w1, w20
-	ubfx	x21, x2, 21, 3
+	uxtb	w19, w19
 	bl	printk
-	ldr	x5, [x19,8]
-	mov	w3, w21
-	ldr	x6, [x19,24]
-	mov	w4, w20
-	mov	w1, 1
+	ldr	x5, [x20,8]
+	mov	w1, w22
+	ldr	x6, [x20,24]
+	mov	w3, w19
+	mov	w4, w21
 	mov	w2, 26
 	mov	w0, 0
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x5, [x19,8]
-	mov	w3, w21
-	ldr	x6, [x19,24]
-	mov	w4, w20
+	ldr	x5, [x20,8]
+	mov	w3, w19
+	ldr	x6, [x20,24]
+	mov	w4, w21
 	mov	w1, 2
 	mov	w2, 26
 	mov	w0, 0
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	x5, [x19,8]
-	mov	w3, w21
-	ldr	x6, [x19,24]
-	mov	w4, w20
+	ldr	x5, [x20,8]
+	mov	w3, w19
+	ldr	x6, [x20,24]
+	mov	w4, w21
 	mov	w2, 16
 	mov	w1, 3
 	mov	w0, 0
 	bl	flash_start_tlc_page_prog
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	ldr	w0, [x19,40]
+	ldr	w0, [x20,40]
 	mov	w1, 64
 	bl	flash_wait_device_ready
-	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	sblk_3d_tlc_dump_prog, .-sblk_3d_tlc_dump_prog
 	.align	2
-	.global	flash_start_3d_mlc_page_prog
-	.type	flash_start_3d_mlc_page_prog, %function
-flash_start_3d_mlc_page_prog:
-	stp	x29, x30, [sp, -64]!
-	adrp	x5, .LANCHOR0
+	.global	flash_start_page_prog
+	.type	flash_start_page_prog, %function
+flash_start_page_prog:
+	stp	x29, x30, [sp, -96]!
+	mov	w4, 1
 	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	adrp	x26, .LANCHOR0
 	stp	x21, x22, [sp,32]
-	uxtb	w22, w0
-	add	x0, x5, :lo12:.LANCHOR0
-	stp	x19, x20, [sp,16]
+	uxtb	w21, w0
+	add	x0, x26, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
-	uxtb	w20, w1
-	mov	w21, w2
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	w19, 24
+	mov	w24, w1
+	ldrb	w20, [x0,744]
+	mov	x23, x2
 	ldrb	w0, [x0,633]
-	mov	x23, x3
-	mov	x24, x4
-	mov	x19, x5
+	mov	x22, x3
+	sub	w19, w19, w20
+	lsl	w20, w4, w20
+	lsr	w1, w1, w19
+	sub	w20, w20, #1
+	and	w20, w1, w20
+	uxtb	w20, w20
 	cmp	w0, w20
-	bhi	.L2224
-	adrp	x1, .LANCHOR3
+	bhi	.L2249
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 756
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 821
 	add	x1, x1, 304
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2224:
-	add	x5, x19, :lo12:.LANCHOR0
-	add	x20, x5, x20, sxtw
-	ldrb	w20, [x20,736]
-	ldr	x19, [x5,536]
+.L2249:
+	add	x28, x26, :lo12:.LANCHOR0
+	ldrb	w0, [x28,633]
+	cmp	w0, w20
+	bls	.L2248
+	mov	w0, 1
+	ldr	x27, [x28,536]
+	lsl	w19, w0, w19
+	sub	w19, w19, #1
+	add	x0, x28, x20, sxtw
+	and	w19, w24, w19
+	ldrb	w25, [x0,736]
+	bl	nandc_rdy_status
+	cbnz	w0, .L2251
+	ldrb	w0, [x28,633]
+	cmp	w0, 1
+	bne	.L2252
+	bl	nandc_wait_flash_ready
+	b	.L2251
+.L2252:
 	mov	w0, w20
-	ubfiz	x20, x20, 8, 8
-	add	x19, x19, x20
+	mov	w1, w19
+	mov	w2, 64
+	bl	flash_wait_device_ready_raw
+.L2251:
+	mov	w0, w25
+	ubfx	x24, x24, 24, 2
+	bl	hynix_reconfig_rr_para
+	mov	w0, w25
 	bl	nandc_cs
+	cbnz	w24, .L2253
+	mov	w0, w19
+	bl	slc_phy_page_address_calc
+	mov	w19, w0
+	ldrb	w0, [x26,#:lo12:.LANCHOR0]
+	cbz	w0, .L2254
+	mov	w0, w25
+	bl	zftl_flash_enter_slc_mode
+	b	.L2254
+.L2253:
+	mov	w0, w25
+	bl	zftl_flash_exit_slc_mode
+.L2254:
+	ubfiz	x1, x25, 8, 8
 	mov	w0, 128
-	str	w0, [x19,2056]
-	and	w0, w21, 255
-	str	wzr, [x19,2052]
-	str	wzr, [x19,2052]
-	str	w0, [x19,2052]
-	lsr	w0, w21, 8
-	str	w0, [x19,2052]
-	lsr	w0, w21, 16
-	str	w0, [x19,2052]
-	mov	w0, w21
-	bl	nandc_set_seed
-	adrp	x1, .LANCHOR2+17
-	mov	x2, x23
-	mov	x3, x24
-	mov	w0, 1
-	ldrb	w1, [x1,#:lo12:.LANCHOR2+17]
-	bl	nandc_xfer_start
-	bl	nandc_xfer_done
-	str	w22, [x19,2056]
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 64
-	ret
-	.size	flash_start_3d_mlc_page_prog, .-flash_start_3d_mlc_page_prog
-	.align	2
-	.global	sblk_3d_mlc_prog_pages
-	.type	sblk_3d_mlc_prog_pages, %function
-sblk_3d_mlc_prog_pages:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
-	mov	x20, x0
-	ldr	x0, [x0]
-	ldr	w19, [x0,40]
-.L2226:
-	mov	w0, w19
-	mov	w1, 1
-	bl	queue_lun_state
-	mov	w21, w0
-	cbz	w0, .L2228
-	bl	queue_wait_first_req_completed
-	bl	queue_remove_completed_req
-	b	.L2226
-.L2228:
-	ldr	x0, [x20]
-	ldr	w19, [x0,40]
-	and	w22, w19, 2097151
-	ubfx	x19, x19, 21, 3
-	mov	w0, w19
-	bl	zftl_flash_exit_slc_mode
-	ldr	x4, [x20]
-	mov	w1, w19
-	mov	w2, w22
-	mov	w0, 16
-	ldr	x3, [x4,8]
-	ldr	x4, [x4,24]
-	bl	flash_start_3d_mlc_page_prog
-	bl	nandc_wait_flash_ready
-	ldr	x4, [x20,8]
-	mov	w1, w19
-	add	w2, w22, 1
-	mov	w0, 16
-	ldr	x3, [x4,8]
-	ldr	x4, [x4,24]
-	bl	flash_start_3d_mlc_page_prog
-	mov	w0, w19
-	bl	nandc_de_cs
-	ldr	x1, [x20]
-	mov	w0, 4
-	adrp	x2, .LANCHOR0
-	strb	w0, [x1,58]
-	mov	w0, 1
-	strb	w0, [x1,59]
-	mov	w0, -1
-	strb	w0, [x1]
-	add	x0, x2, :lo12:.LANCHOR0
-	add	x0, x0, 2835
-	bl	buf_add_tail
-	mov	w0, w21
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 48
-	ret
-	.size	sblk_3d_mlc_prog_pages, .-sblk_3d_mlc_prog_pages
-	.align	2
-	.global	sblk_mlc_dump_prog
-	.type	sblk_mlc_dump_prog, %function
-sblk_mlc_dump_prog:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	mov	x20, x0
-	ldr	w19, [x0,40]
-	and	w21, w19, 2097151
-	ubfx	x19, x19, 21, 3
-	mov	w0, w19
-	bl	zftl_flash_exit_slc_mode
-	ldr	w2, [x20,40]
-	adrp	x0, .LC171
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC171
-	add	w3, w2, 1
-	bl	printk
-	ldr	x3, [x20,8]
-	mov	w1, w19
-	ldr	x4, [x20,24]
-	mov	w2, w21
-	mov	w0, 16
-	bl	flash_start_3d_mlc_page_prog
-	bl	nandc_iqr_wait_flash_ready
-	bl	nandc_wait_flash_ready
-	ldr	x3, [x20,8]
-	add	w2, w21, 1
-	ldr	x4, [x20,24]
-	mov	w1, w19
-	mov	w0, 16
-	bl	flash_start_3d_mlc_page_prog
-	bl	nandc_iqr_wait_flash_ready
-	bl	nandc_wait_flash_ready
-	ldr	w0, [x20,40]
-	mov	w1, 64
-	bl	flash_wait_device_ready
-	mov	w20, w0
+	add	x20, x27, x1
+	str	w0, [x20,2056]
+	and	w0, w19, 255
+	str	wzr, [x20,2052]
+	str	wzr, [x20,2052]
+	str	w0, [x20,2052]
+	lsr	w0, w19, 8
+	str	w0, [x20,2052]
+	lsr	w0, w19, 16
+	str	w0, [x20,2052]
 	mov	w0, w19
-	bl	nandc_de_cs
-	ldr	x21, [sp,32]
-	mov	w0, w20
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 48
-	ret
-	.size	sblk_mlc_dump_prog, .-sblk_mlc_dump_prog
-	.align	2
-	.global	flash_start_page_prog
-	.type	flash_start_page_prog, %function
-flash_start_page_prog:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	stp	x25, x26, [sp,64]
-	uxtb	w25, w0
-	add	x0, x22, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,48]
-	stp	x19, x20, [sp,16]
-	stp	x27, x28, [sp,80]
-	ubfx	x24, x1, 21, 3
-	mov	x27, x2
-	ldrb	w0, [x0,633]
-	mov	x26, x3
-	and	w20, w1, 2097151
-	ubfx	x23, x1, 24, 2
-	cmp	w0, w24
-	bhi	.L2231
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 803
-	add	x1, x1, 336
-	add	x0, x0, :lo12:.LC0
-	bl	printk
-	bl	dump_stack
-.L2231:
-	add	x28, x22, :lo12:.LANCHOR0
-	add	x0, x28, x24, sxtw
-	ldrb	w21, [x0,736]
-	ldr	x19, [x28,536]
-	bl	nandc_rdy_status
-	cbnz	w0, .L2232
-	ldrb	w0, [x28,633]
-	cmp	w0, 1
-	bne	.L2233
-	bl	nandc_wait_flash_ready
-	b	.L2232
-.L2233:
-	mov	w0, w24
-	mov	w1, w20
-	mov	w2, 64
-	bl	flash_wait_device_ready_raw
-.L2232:
-	mov	w0, w21
-	bl	hynix_reconfig_rr_para
-	mov	w0, w21
-	bl	nandc_cs
-	cbnz	w23, .L2234
-	mov	w0, w20
-	bl	slc_phy_page_address_calc
-	mov	w20, w0
-	ldrb	w0, [x22,#:lo12:.LANCHOR0]
-	cbz	w0, .L2235
-	mov	w0, w21
-	bl	zftl_flash_enter_slc_mode
-	b	.L2235
-.L2234:
-	mov	w0, w21
-	bl	zftl_flash_exit_slc_mode
-.L2235:
-	ubfiz	x4, x21, 8, 8
-	mov	w0, 128
-	add	x19, x19, x4
-	str	w0, [x19,2056]
-	and	w0, w20, 255
-	str	wzr, [x19,2052]
-	str	wzr, [x19,2052]
-	str	w0, [x19,2052]
-	lsr	w0, w20, 8
-	str	w0, [x19,2052]
-	lsr	w0, w20, 16
-	str	w0, [x19,2052]
-	mov	w0, w20
 	bl	nandc_set_seed
 	adrp	x1, .LANCHOR2+17
-	mov	x2, x27
-	mov	x3, x26
 	mov	w0, 1
+	mov	x2, x23
+	mov	x3, x22
 	ldrb	w1, [x1,#:lo12:.LANCHOR2+17]
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
-	str	w25, [x19,2056]
-	mov	w0, w21
+	mov	x0, 7032
+	movk	x0, 0xd, lsl 16
+	bl	__const_udelay
+	str	w21, [x20,2056]
+	mov	w0, w25
 	bl	nandc_de_cs
+.L2248:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -14004,44 +14288,53 @@ queue_prog_cmd:
 	str	x19, [sp,16]
 	mov	x19, x0
 	mov	w0, 16
-	ldr	w1, [x19,40]
 	ldr	x2, [x19,8]
 	ldr	x3, [x19,24]
+	ldr	w1, [x19,40]
 	bl	flash_start_page_prog
 	adrp	x0, .LANCHOR0
 	ldr	w4, [x19,40]
-	add	x1, x0, :lo12:.LANCHOR0
-	ldrb	w2, [x1,2835]
+	add	x3, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x3,2851]
 	cmp	w2, 255
-	beq	.L2240
-	ubfx	x4, x4, 21, 3
-	add	x1, x1, 784
-.L2242:
-	add	x3, x1, x2, lsl 6
-	ldr	w5, [x3,40]
-	ubfx	x5, x5, 21, 3
-	cmp	w4, w5
-	bne	.L2241
-	ldrb	w5, [x3,58]
-	add	x3, x3, 48
-	cmp	w5, 7
-	bne	.L2241
+	beq	.L2259
+	ldrb	w5, [x3,744]
+	mov	w1, 1
+	mov	w7, 24
+	add	x3, x3, 800
+	lsl	w1, w1, w5
+	sub	w7, w7, w5
+	sub	w1, w1, #1
+	asr	w4, w4, w7
+	uxth	w1, w1
+	and	w4, w1, w4
+.L2261:
+	add	x5, x3, x2, lsl 6
+	ldr	w6, [x5,40]
+	lsr	w6, w6, w7
+	and	w6, w1, w6
+	cmp	w4, w6
+	bne	.L2260
+	ldrb	w6, [x5,58]
+	add	x5, x5, 48
+	cmp	w6, 7
+	bne	.L2260
 	mov	w1, 3
-	strb	w1, [x3,10]
-	b	.L2240
-.L2241:
+	strb	w1, [x5,10]
+	b	.L2259
+.L2260:
 	lsl	x2, x2, 6
-	ldrb	w2, [x1,x2]
+	ldrb	w2, [x3,x2]
 	cmp	w2, 255
-	bne	.L2242
-.L2240:
+	bne	.L2261
+.L2259:
 	mov	w1, 3
 	strb	w1, [x19,58]
 	mov	w1, 1
 	add	x0, x0, :lo12:.LANCHOR0
 	strb	w1, [x19,59]
 	mov	w1, -1
-	add	x0, x0, 2835
+	add	x0, x0, 2851
 	strb	w1, [x19]
 	mov	x1, x19
 	bl	buf_add_tail
@@ -14053,7 +14346,7 @@ queue_prog_cmd:
 	.global	sblk_prog_page
 	.type	sblk_prog_page, %function
 sblk_prog_page:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
@@ -14063,125 +14356,140 @@ sblk_prog_page:
 	mov	x19, x0
 	uxtb	w20, w1
 	ldrh	w0, [x0,50]
-	cbz	w0, .L2248
+	cbz	w0, .L2267
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2248
-	adrp	x0, .LC172
+	tbz	x0, 8, .L2267
+	adrp	x0, .LC173
 	ldr	w1, [x19,40]
-	add	x0, x0, :lo12:.LC172
+	add	x0, x0, :lo12:.LC173
 	mov	w2, w20
 	bl	printk
-.L2248:
+.L2267:
 	adrp	x24, .LANCHOR0
 	adrp	x25, .LC0
 	add	x23, x24, :lo12:.LANCHOR0
 	mov	w21, 0
-	add	x27, x23, 784
+	add	x27, x23, 800
 	add	x25, x25, :lo12:.LC0
-.L2249:
-	cbz	w20, .L2279
+.L2268:
+	cbz	w20, .L2298
 	ldrb	w26, [x19]
 	ldr	w22, [x19,40]
-.L2250:
+.L2269:
 	mov	w0, w22
 	mov	w1, 1
 	bl	queue_lun_state
-	cbz	w0, .L2280
+	cbz	w0, .L2299
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2250
-.L2280:
+	b	.L2269
+.L2299:
 	cmp	w20, 1
-	beq	.L2252
+	beq	.L2271
 	add	x0, x24, :lo12:.LANCHOR0
-	ldrb	w0, [x0,781]
-	cbnz	w0, .L2253
-.L2252:
+	ldrb	w1, [x0,793]
+	cbnz	w1, .L2272
+.L2271:
 	mov	x0, x19
 	bl	queue_prog_cmd
-	b	.L2254
-.L2253:
+	b	.L2273
+.L2272:
+	ldrb	w1, [x0,744]
+	mov	w28, 1
+	mov	w0, 24
+	lsl	w28, w28, w1
+	sub	w0, w0, w1
+	lsr	w0, w22, w0
+	sub	w28, w28, #1
+	and	w28, w28, w0
 	ldrb	w0, [x19]
-	ubfx	x28, x22, 21, 3
 	cmp	w0, 255
-	bne	.L2255
-	adrp	x1, .LANCHOR3
+	uxth	w28, w28
+	bne	.L2274
+	adrp	x1, .LANCHOR4
 	mov	w2, 583
-	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR4
 	mov	x0, x25
-	add	x1, x1, 360
+	add	x1, x1, 328
 	bl	printk
 	bl	dump_stack
-.L2255:
+.L2274:
 	ldrb	w0, [x19]
+	mov	w4, 1
+	ldrb	w1, [x23,744]
 	add	x0, x27, x0, lsl 6
-	ldr	w4, [x0,40]
-	ubfx	x0, x4, 21, 3
-	cmp	w28, w0
-	bne	.L2256
-	ldrh	w3, [x23,3264]
-	mov	w1, 21
-	ldrb	w6, [x23,3266]
-	mov	w28, 1
-	sub	w1, w1, w3
-	lsr	w0, w22, w3
-	sub	w6, w6, #1
-	lsl	w1, w28, w1
+	ldr	w2, [x0,40]
+	mov	w0, 24
+	sub	w0, w0, w1
+	lsl	w1, w4, w1
 	sub	w1, w1, #1
-	lsl	w2, w28, w3
+	lsr	w3, w2, w0
+	and	w1, w1, w3
+	cmp	w28, w1, uxth
+	bne	.L2275
+	ldrh	w1, [x23,3536]
+	ldrb	w6, [x23,3538]
+	sub	w3, w0, w1
+	lsr	w5, w22, w1
+	lsl	w3, w4, w3
+	sub	w6, w6, #1
+	sub	w3, w3, #1
+	lsl	w0, w4, w1
 	uxth	w7, w6
-	sub	w2, w2, #1
-	and	w5, w7, w0
-	lsr	w0, w4, w3
-	uxth	w1, w1
-	and	w3, w7, w0
-	and	w3, w1, w3
-	and	w0, w1, w5
-	cmp	w0, w3
-	uxth	w2, w2
-	beq	.L2256
-	and	w22, w2, w22
-	and	w2, w2, w4
-	cmp	w22, w2
-	bne	.L2256
+	lsr	w1, w2, w1
+	uxth	w3, w3
+	and	w5, w7, w5
+	and	w1, w7, w1
+	and	w5, w3, w5
+	and	w3, w3, w1
+	sub	w0, w0, #1
+	str	x4, [x29,104]
+	cmp	w5, w3
+	uxth	w0, w0
+	beq	.L2275
+	and	w22, w0, w22
+	and	w0, w0, w2
+	cmp	w22, w0
+	bne	.L2275
 	cmp	w21, w6
-	beq	.L2256
+	beq	.L2275
 	ldr	w1, [x19,40]
 	mov	w0, 17
 	ldr	x2, [x19,8]
-	add	w21, w21, w28
+	add	w21, w21, 1
 	ldr	x3, [x19,24]
 	bl	flash_start_page_prog
-	strb	w28, [x19,59]
 	mov	w0, 9
+	ldr	x4, [x29,104]
 	strb	w0, [x19,58]
 	mov	w0, -1
+	strb	w4, [x19,59]
 	mov	x1, x19
 	strb	w0, [x19]
-	add	x0, x23, 2835
+	add	x0, x23, 2851
 	bl	buf_add_tail
-	b	.L2254
-.L2256:
+	b	.L2273
+.L2275:
 	mov	x0, x19
 	mov	w21, 0
 	bl	queue_prog_cmd
-.L2254:
+.L2273:
 	subs	w20, w20, #1
-	beq	.L2279
+	beq	.L2298
 	add	x19, x24, :lo12:.LANCHOR0
 	sbfiz	x26, x26, 6, 32
-	add	x19, x19, 784
+	add	x19, x19, 800
 	add	x19, x19, x26
-	b	.L2249
-.L2279:
+	b	.L2268
+.L2298:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	sblk_prog_page, .-sblk_prog_page
 	.align	2
@@ -14194,20 +14502,20 @@ ftl_flush:
 	add	x0, x2, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
 	mov	x19, x2
-	adrp	x20, .LANCHOR4
-	ldrb	w1, [x0,2857]
-	cbz	w1, .L2282
-	add	x2, x20, :lo12:.LANCHOR4
-	add	x0, x0, 784
-	ldrb	w2, [x2,1265]
+	adrp	x20, .LANCHOR3
+	ldrb	w1, [x0,2873]
+	cbz	w1, .L2301
+	add	x2, x20, :lo12:.LANCHOR3
+	add	x0, x0, 800
+	ldrb	w2, [x2,1545]
 	add	x0, x0, x2, lsl 6
 	bl	sblk_prog_page
-.L2282:
+.L2301:
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR3
 	mov	w0, -1
-	strb	wzr, [x2,2857]
-	strb	w0, [x20,1265]
+	strb	wzr, [x2,2873]
+	strb	w0, [x20,1545]
 	bl	sblk_wait_write_queue_completed
 	bl	ftl_write_completed
 	mov	w0, -1
@@ -14220,79 +14528,210 @@ ftl_flush:
 	.global	zftl_cache_flush
 	.type	zftl_cache_flush, %function
 zftl_cache_flush:
-	adrp	x0, .LANCHOR0+2857
+	adrp	x0, .LANCHOR0+2873
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldrb	w0, [x0,#:lo12:.LANCHOR0+2857]
-	cbz	w0, .L2286
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+2873]
+	cbz	w0, .L2305
 	bl	timer_get_time
-	adrp	x1, .LANCHOR4+1268
-	ldr	w1, [x1,#:lo12:.LANCHOR4+1268]
+	adrp	x1, .LANCHOR3+1548
+	ldr	w1, [x1,#:lo12:.LANCHOR3+1548]
 	add	w1, w1, 100
 	cmp	w0, w1
-	bls	.L2286
+	bls	.L2305
 	bl	ftl_flush
-.L2286:
+.L2305:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_cache_flush, .-zftl_cache_flush
 	.align	2
-	.global	flash_prog_page
-	.type	flash_prog_page, %function
+	.global	flash_dual_page_prog
+	.type	flash_dual_page_prog, %function
+flash_dual_page_prog:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	x21, w0
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	mov	w22, w1
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	mov	x28, x2
+	mov	x20, x21
+	ldrb	w19, [x0,744]
+	add	x21, x21, 8
+	ldr	x23, [x0,536]
+	mov	w0, 24
+	sub	w19, w0, w19
+	mov	w0, 1
+	lsl	w19, w0, w19
+	adrp	x0, .LANCHOR2
+	str	x0, [x29,104]
+	sub	w19, w19, #1
+	mov	x27, x3
+	mov	x26, x4
+	ldr	w2, [x0,#:lo12:.LANCHOR2]
+	mov	x25, x5
+	mov	w3, w6
+	add	x21, x23, x21, lsl 8
+	and	w19, w1, w19
+	ubfx	x24, x22, 24, 2
+	tbz	x2, 4, .L2310
+	adrp	x0, .LC174
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC174
+	bl	printk
+.L2310:
+	bl	nandc_wait_flash_ready
+	mov	w0, w20
+	bl	nandc_cs
+	mov	w0, w20
+	cbnz	w24, .L2311
+	bl	zftl_flash_enter_slc_mode
+	b	.L2312
+.L2311:
+	bl	zftl_flash_exit_slc_mode
+.L2312:
+	ubfiz	x0, x20, 8, 8
+	mov	w4, 128
+	add	x23, x23, x0
+	and	w0, w19, 255
+	str	x4, [x29,96]
+	str	w4, [x23,2056]
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	str	w0, [x23,2052]
+	lsr	w0, w19, 8
+	str	w0, [x23,2052]
+	lsr	w0, w19, 16
+	str	w0, [x23,2052]
+	mov	w0, w19
+	bl	nandc_set_seed
+	ldr	x0, [x29,104]
+	mov	x3, x27
+	mov	x2, x28
+	mov	w27, 16
+	add	x24, x0, :lo12:.LANCHOR2
+	mov	w0, 1
+	ldrb	w1, [x24,17]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	w27, [x23,2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x4, [x29,96]
+	add	w0, w19, 1
+	str	w4, [x23,2056]
+	and	w1, w0, 255
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	str	w1, [x23,2052]
+	lsr	w1, w0, 8
+	str	w1, [x23,2052]
+	lsr	w1, w0, 16
+	str	w1, [x23,2052]
+	bl	nandc_set_seed
+	ldrb	w1, [x24,17]
+	mov	x2, x26
+	mov	x3, x25
+	mov	w0, 1
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	w27, [x23,2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	x0, x21
+	bl	flash_read_status
+	mov	w21, w0
+	mov	w0, w20
+	and	w19, w21, 4
+	bl	nandc_de_cs
+	tbz	x21, 2, .L2313
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2313
+	adrp	x0, .LC175
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC175
+	mov	w2, w19
+	bl	printk
+.L2313:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	flash_dual_page_prog, .-flash_dual_page_prog
+	.align	2
+	.global	flash_prog_page
+	.type	flash_prog_page, %function
 flash_prog_page:
 	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	uxtb	x22, w0
-	adrp	x21, .LANCHOR2
-	adrp	x0, .LANCHOR0+536
+	stp	x23, x24, [sp,48]
+	uxtb	x23, w0
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
 	str	x27, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	ldr	x19, [x0,#:lo12:.LANCHOR0+536]
-	mov	x20, x22
+	adrp	x21, .LANCHOR2
+	mov	x22, x23
+	ldrb	w19, [x0,744]
+	add	x23, x23, 8
+	ldr	x20, [x0,536]
+	mov	w0, 24
+	sub	w19, w0, w19
+	mov	w0, 1
+	lsl	w19, w0, w19
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	add	x22, x22, 8
-	stp	x25, x26, [sp,64]
-	mov	w23, w1
+	mov	w24, w1
+	sub	w19, w19, #1
 	mov	x25, x3
 	mov	x26, x2
 	mov	w3, w4
-	add	x22, x19, x22, lsl 8
-	and	w24, w1, 2097151
-	ubfx	x27, x23, 24, 2
-	tbz	x0, 4, .L2291
-	adrp	x0, .LC173
+	add	x23, x20, x23, lsl 8
+	and	w19, w1, w19
+	ubfx	x27, x24, 24, 2
+	tbz	x0, 4, .L2324
+	adrp	x0, .LC174
 	mov	w2, w27
-	add	x0, x0, :lo12:.LC173
+	add	x0, x0, :lo12:.LC174
 	bl	printk
-.L2291:
+.L2324:
 	bl	nandc_wait_flash_ready
-	mov	w0, w20
+	mov	w0, w22
 	bl	hynix_reconfig_rr_para
-	mov	w0, w20
+	mov	w0, w22
 	bl	nandc_cs
-	mov	w0, w20
-	cbnz	w27, .L2292
+	mov	w0, w22
+	cbnz	w27, .L2325
 	bl	zftl_flash_enter_slc_mode
-	b	.L2293
-.L2292:
+	b	.L2326
+.L2325:
 	bl	zftl_flash_exit_slc_mode
-.L2293:
-	ubfiz	x4, x20, 8, 8
+.L2326:
+	ubfiz	x4, x22, 8, 8
 	mov	w0, 128
-	add	x19, x19, x4
+	add	x20, x20, x4
 	add	x21, x21, :lo12:.LANCHOR2
-	str	w0, [x19,2056]
-	and	w0, w23, 255
-	str	wzr, [x19,2052]
-	str	wzr, [x19,2052]
-	str	w0, [x19,2052]
-	lsr	w0, w24, 8
-	str	w0, [x19,2052]
-	lsr	w0, w24, 16
-	str	w0, [x19,2052]
-	mov	w0, w24
+	str	w0, [x20,2056]
+	and	w0, w19, 255
+	str	wzr, [x20,2052]
+	str	wzr, [x20,2052]
+	str	w0, [x20,2052]
+	lsr	w0, w19, 8
+	str	w0, [x20,2052]
+	lsr	w0, w19, 16
+	str	w0, [x20,2052]
+	mov	w0, w19
 	bl	nandc_set_seed
 	ldrb	w1, [x21,17]
 	mov	x2, x26
@@ -14300,23 +14739,26 @@ flash_prog_page:
 	mov	w0, 1
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
+	mov	x0, 7032
+	movk	x0, 0xd, lsl 16
+	bl	__const_udelay
 	mov	w0, 16
-	str	w0, [x19,2056]
+	str	w0, [x20,2056]
 	bl	nandc_iqr_wait_flash_ready
 	bl	nandc_wait_flash_ready
-	mov	x0, x22
+	mov	x0, x23
 	bl	flash_read_status
-	mov	w21, w0
-	mov	w0, w20
-	and	w19, w21, 4
+	mov	w20, w0
+	mov	w0, w22
+	and	w19, w20, 4
 	bl	nandc_de_cs
-	tbz	x21, 2, .L2294
-	adrp	x0, .LC174
-	mov	w1, w23
-	add	x0, x0, :lo12:.LC174
+	tbz	x20, 2, .L2327
+	adrp	x0, .LC175
+	mov	w1, w24
+	add	x0, x0, :lo12:.LC175
 	mov	w2, w19
 	bl	printk
-.L2294:
+.L2327:
 	mov	w0, w19
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -14334,15 +14776,15 @@ flash_test_blk:
 	mov	w2, 32
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR4
+	adrp	x19, .LANCHOR3
 	uxth	w20, w1
-	add	x19, x19, :lo12:.LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR3
 	mov	w1, 165
 	stp	x21, x22, [sp,32]
 	uxtb	w22, w0
-	ldr	x0, [x19,1208]
+	ldr	x0, [x19,1488]
 	bl	ftl_memset
-	ldr	x0, [x19,1224]
+	ldr	x0, [x19,1504]
 	mov	w1, 90
 	mov	w2, 8
 	bl	ftl_memset
@@ -14353,43 +14795,43 @@ flash_test_blk:
 	mov	w1, w20
 	bl	flash_erase_block
 	cmn	w0, #1
-	bne	.L2302
-.L2304:
+	bne	.L2335
+.L2337:
 	mov	w19, -1
-	b	.L2303
-.L2302:
+	b	.L2336
+.L2335:
 	adrp	x21, .LANCHOR2
-	ldr	x2, [x19,1208]
+	ldr	x2, [x19,1488]
 	add	x21, x21, :lo12:.LANCHOR2
-	ldr	x3, [x19,1224]
+	ldr	x3, [x19,1504]
 	mov	w0, w22
 	mov	w1, w20
 	add	x21, x21, 8
 	ldrb	w4, [x21,9]
 	bl	flash_prog_page
 	cmn	w0, #1
-	beq	.L2304
-	ldr	x2, [x19,1208]
+	beq	.L2337
+	ldr	x2, [x19,1488]
 	mov	w0, w22
-	ldr	x3, [x19,1224]
+	ldr	x3, [x19,1504]
 	mov	w1, w20
 	ldrb	w4, [x21,9]
 	bl	flash_read_page
 	cmn	w0, #1
-	beq	.L2304
-	ldr	x0, [x19,1208]
+	beq	.L2337
+	ldr	x0, [x19,1488]
 	ldr	w1, [x0]
 	mov	w0, 42405
 	bfi	w0, w0, 16, 16
 	cmp	w1, w0
-	bne	.L2304
-	ldr	x0, [x19,1224]
+	bne	.L2337
+	ldr	x0, [x19,1504]
 	ldr	w1, [x0]
 	mov	w0, 23130
 	bfi	w0, w0, 16, 16
 	cmp	w1, w0
 	csetm	w19, ne
-.L2303:
+.L2336:
 	mov	w1, w20
 	mov	w0, w22
 	bl	flash_erase_block
@@ -14399,341 +14841,436 @@ flash_test_blk:
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	flash_test_blk, .-flash_test_blk
+	.section	.text.unlikely
 	.align	2
-	.global	flash_dual_page_prog
-	.type	flash_dual_page_prog, %function
-flash_dual_page_prog:
-	stp	x29, x30, [sp, -112]!
+	.type	fw_flash_page_prog.constprop.30, %function
+fw_flash_page_prog.constprop.30:
+	stp	x29, x30, [sp, -64]!
+	adrp	x4, .LANCHOR0
 	add	x29, sp, 0
+	add	x4, x4, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	uxtb	x21, w0
-	adrp	x0, .LANCHOR0+536
-	stp	x23, x24, [sp,48]
-	stp	x27, x28, [sp,80]
-	ldr	x23, [x0,#:lo12:.LANCHOR0+536]
-	adrp	x0, .LANCHOR2
-	mov	x28, x2
-	str	x0, [x29,104]
 	stp	x19, x20, [sp,16]
-	ldr	w2, [x0,#:lo12:.LANCHOR2]
-	mov	x20, x21
-	stp	x25, x26, [sp,64]
-	add	x21, x21, 8
-	mov	w22, w1
-	mov	x27, x3
-	mov	x26, x4
-	mov	x25, x5
-	mov	w3, w6
-	add	x21, x23, x21, lsl 8
-	and	w19, w1, 2097151
-	ubfx	x24, x22, 24, 2
-	tbz	x2, 4, .L2312
-	adrp	x0, .LC173
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC173
+	mov	x21, x1
+	str	x2, [x29,56]
+	ldr	x1, [x4,624]
+	ldrb	w22, [x4,724]
+	ldrb	w19, [x1,9]
+	udiv	w19, w0, w19
+	ldrb	w0, [x4,632]
+	bl	nandc_bch_sel
+	adrp	x0, .LANCHOR2+15
+	ldr	x3, [x29,56]
+	ldrb	w0, [x0,#:lo12:.LANCHOR2+15]
+	cmp	w0, 9
+	bne	.L2345
+	adrp	x20, .LANCHOR3
+	mov	w1, 255
+	add	x20, x20, :lo12:.LANCHOR3
+	mov	w2, 16384
+	ldr	x0, [x20,1488]
+	bl	ftl_memset
+	ldr	x4, [x20,1488]
+	mov	w1, w19
+	ldr	x3, [x29,56]
+	mov	x2, x21
+	mov	x5, x4
+	mov	w6, 4
+	mov	w0, 0
+	bl	flash_dual_page_prog
+	b	.L2347
+.L2345:
+	mov	w0, 0
+	mov	w1, w19
+	mov	x2, x21
+	mov	w4, 4
+	bl	flash_prog_page
+.L2347:
+	mov	w19, w0
+	mov	w0, w22
+	bl	nandc_bch_sel
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	fw_flash_page_prog.constprop.30, .-fw_flash_page_prog.constprop.30
+	.text
+	.align	2
+	.global	flash_start_3d_mlc_page_prog
+	.type	flash_start_3d_mlc_page_prog, %function
+flash_start_3d_mlc_page_prog:
+	stp	x29, x30, [sp, -64]!
+	adrp	x5, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	add	x0, x5, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	uxtb	w20, w1
+	mov	w21, w2
+	ldrb	w0, [x0,633]
+	mov	x23, x3
+	mov	x24, x4
+	mov	x19, x5
+	cmp	w0, w20
+	bhi	.L2349
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 772
+	add	x1, x1, 344
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L2312:
-	bl	nandc_wait_flash_ready
+	bl	dump_stack
+.L2349:
+	add	x5, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x5,633]
+	cmp	w0, w20
+	bls	.L2348
+	add	x20, x5, x20, sxtw
+	ldrb	w20, [x20,736]
+	ldr	x19, [x5,536]
 	mov	w0, w20
+	ubfiz	x20, x20, 8, 8
+	add	x19, x19, x20
 	bl	nandc_cs
-	mov	w0, w20
-	cbnz	w24, .L2313
-	bl	zftl_flash_enter_slc_mode
-	b	.L2314
-.L2313:
-	bl	zftl_flash_exit_slc_mode
-.L2314:
-	ubfiz	x0, x20, 8, 8
-	mov	w4, 128
-	add	x23, x23, x0
-	and	w0, w22, 255
-	str	x4, [x29,96]
-	str	w4, [x23,2056]
-	str	wzr, [x23,2052]
-	str	wzr, [x23,2052]
-	str	w0, [x23,2052]
-	lsr	w0, w19, 8
-	str	w0, [x23,2052]
-	lsr	w0, w19, 16
-	str	w0, [x23,2052]
-	mov	w0, w19
-	bl	nandc_set_seed
-	ldr	x0, [x29,104]
-	mov	x3, x27
-	mov	x2, x28
-	mov	w27, 16
-	add	x24, x0, :lo12:.LANCHOR2
-	mov	w0, 1
-	ldrb	w1, [x24,17]
-	bl	nandc_xfer_start
-	bl	nandc_xfer_done
-	str	w27, [x23,2056]
-	bl	nandc_iqr_wait_flash_ready
-	bl	nandc_wait_flash_ready
-	ldr	x4, [x29,96]
-	add	w0, w19, 1
-	str	w4, [x23,2056]
-	and	w1, w0, 255
-	str	wzr, [x23,2052]
-	str	wzr, [x23,2052]
-	str	w1, [x23,2052]
-	lsr	w1, w0, 8
-	str	w1, [x23,2052]
-	lsr	w1, w0, 16
-	str	w1, [x23,2052]
+	mov	w0, 128
+	str	w0, [x19,2056]
+	and	w0, w21, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w21, 8
+	str	w0, [x19,2052]
+	lsr	w0, w21, 16
+	str	w0, [x19,2052]
+	mov	w0, w21
 	bl	nandc_set_seed
-	ldrb	w1, [x24,17]
-	mov	x2, x26
-	mov	x3, x25
+	adrp	x1, .LANCHOR2+17
 	mov	w0, 1
+	mov	x2, x23
+	mov	x3, x24
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+17]
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
-	str	w27, [x23,2056]
-	bl	nandc_iqr_wait_flash_ready
+	str	w22, [x19,2056]
+.L2348:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	flash_start_3d_mlc_page_prog, .-flash_start_3d_mlc_page_prog
+	.align	2
+	.global	sblk_3d_mlc_prog_pages
+	.type	sblk_3d_mlc_prog_pages, %function
+sblk_3d_mlc_prog_pages:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	str	x27, [sp,80]
+	add	x23, x23, :lo12:.LANCHOR0
+	mov	w24, 1
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	mov	x20, x0
+	mov	w22, w1
+	mov	w25, 24
+	mov	w26, 4
+	add	x27, x23, 2851
+.L2352:
+	cbz	w22, .L2356
+	ldr	x0, [x20]
+	ldr	w19, [x0,40]
+.L2353:
+	mov	w0, w19
+	mov	w1, 1
+	bl	queue_lun_state
+	cbz	w0, .L2357
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2353
+.L2357:
+	ldr	x0, [x20]
+	sub	w22, w22, #1
+	ldr	w3, [x0,40]
+	ldrb	w0, [x23,744]
+	sub	w1, w25, w0
+	lsl	w0, w24, w0
+	lsl	w21, w24, w1
+	sub	w19, w0, #1
+	sub	w21, w21, #1
+	and	w21, w21, w3
+	lsr	w3, w3, w1
+	and	w19, w19, w3
+	uxtb	w19, w19
+	mov	w0, w19
+	bl	zftl_flash_exit_slc_mode
+	ldr	x4, [x20]
+	mov	w1, w19
+	mov	w2, w21
+	mov	w0, 16
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,24]
+	bl	flash_start_3d_mlc_page_prog
 	bl	nandc_wait_flash_ready
-	mov	x0, x21
-	bl	flash_read_status
-	mov	w21, w0
-	mov	w0, w20
-	and	w19, w21, 4
-	bl	nandc_de_cs
-	tbz	x21, 2, .L2315
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2315
-	adrp	x0, .LC174
-	mov	w1, w22
-	add	x0, x0, :lo12:.LC174
-	mov	w2, w19
-	bl	printk
-.L2315:
+	ldr	x4, [x20,8]
+	mov	w1, w19
+	add	w2, w21, 1
+	mov	w0, 16
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,24]
+	bl	flash_start_3d_mlc_page_prog
 	mov	w0, w19
+	bl	nandc_de_cs
+	ldr	x1, [x20],16
+	mov	w0, -1
+	strb	w26, [x1,58]
+	strb	w0, [x1]
+	mov	x0, x27
+	strb	w24, [x1,59]
+	bl	buf_add_tail
+	b	.L2352
+.L2356:
+	mov	w0, w22
+	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	flash_dual_page_prog, .-flash_dual_page_prog
-	.section	.text.unlikely
+	.size	sblk_3d_mlc_prog_pages, .-sblk_3d_mlc_prog_pages
 	.align	2
-	.type	fw_flash_page_prog.constprop.29, %function
-fw_flash_page_prog.constprop.29:
-	stp	x29, x30, [sp, -64]!
-	adrp	x4, .LANCHOR0
+	.global	sblk_mlc_dump_prog
+	.type	sblk_mlc_dump_prog, %function
+sblk_mlc_dump_prog:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 24
 	add	x29, sp, 0
-	add	x4, x4, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
-	mov	x21, x1
-	str	x2, [x29,56]
-	ldr	x1, [x4,624]
-	ldrb	w22, [x4,724]
-	ldrb	w19, [x1,9]
-	udiv	w19, w0, w19
-	ldrb	w0, [x4,632]
-	bl	nandc_bch_sel
-	adrp	x0, .LANCHOR2+15
-	ldr	x3, [x29,56]
-	ldrb	w0, [x0,#:lo12:.LANCHOR2+15]
-	cmp	w0, 9
-	bne	.L2326
-	adrp	x20, .LANCHOR4
-	mov	w1, 255
-	add	x20, x20, :lo12:.LANCHOR4
-	mov	w2, 16384
-	ldr	x0, [x20,1208]
-	bl	ftl_memset
-	ldr	x4, [x20,1208]
+	str	x21, [sp,32]
+	mov	x20, x0
+	ldr	w3, [x0,40]
+	adrp	x0, .LANCHOR0+744
+	ldrb	w19, [x0,#:lo12:.LANCHOR0+744]
+	mov	w0, 1
+	sub	w1, w1, w19
+	lsl	w21, w0, w1
+	lsl	w0, w0, w19
+	sub	w21, w21, #1
+	sub	w19, w0, #1
+	and	w21, w21, w3
+	lsr	w3, w3, w1
+	and	w19, w19, w3
+	uxtb	w19, w19
+	mov	w0, w19
+	bl	zftl_flash_exit_slc_mode
+	ldr	w2, [x20,40]
+	adrp	x0, .LC176
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC176
+	add	w3, w2, 1
+	bl	printk
+	ldr	x3, [x20,8]
 	mov	w1, w19
-	ldr	x3, [x29,56]
-	mov	x2, x21
-	mov	x5, x4
-	mov	w6, 4
-	mov	w0, 0
-	bl	flash_dual_page_prog
-	b	.L2328
-.L2326:
-	mov	w0, 0
+	ldr	x4, [x20,24]
+	mov	w2, w21
+	mov	w0, 16
+	bl	flash_start_3d_mlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x3, [x20,8]
+	add	w2, w21, 1
+	ldr	x4, [x20,24]
 	mov	w1, w19
-	mov	x2, x21
-	mov	w4, 4
-	bl	flash_prog_page
-.L2328:
-	mov	w19, w0
-	mov	w0, w22
-	bl	nandc_bch_sel
+	mov	w0, 16
+	bl	flash_start_3d_mlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	w0, [x20,40]
+	mov	w1, 64
+	bl	flash_wait_device_ready
+	mov	w20, w0
 	mov	w0, w19
+	bl	nandc_de_cs
+	ldr	x21, [sp,32]
+	mov	w0, w20
 	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 64
+	ldp	x29, x30, [sp], 48
 	ret
-	.size	fw_flash_page_prog.constprop.29, .-fw_flash_page_prog.constprop.29
-	.text
+	.size	sblk_mlc_dump_prog, .-sblk_mlc_dump_prog
 	.align	2
 	.global	flash_prog_page_en
 	.type	flash_prog_page_en, %function
 flash_prog_page_en:
 	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	uxtb	w24, w0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
 	adrp	x0, .LANCHOR0
 	stp	x19, x20, [sp,16]
 	mov	w20, w1
 	add	x1, x0, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
 	stp	x27, x28, [sp,80]
 	stp	x25, x26, [sp,64]
-	mov	x22, x2
-	mov	x21, x3
+	mov	x23, x2
+	mov	x22, x3
 	ldrb	w1, [x1,633]
 	mov	w27, w4
 	uxtb	w28, w5
 	ubfx	x25, x20, 24, 2
-	cmp	w1, w24
-	mov	x23, x0
-	bhi	.L2330
-	adrp	x1, .LANCHOR3
+	cmp	w1, w21
+	mov	x24, x0
+	bhi	.L2360
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 546
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 554
 	add	x1, x1, 376
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2330:
-	add	x0, x23, :lo12:.LANCHOR0
+.L2360:
+	add	x1, x24, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldrb	w2, [x1,633]
+	cmp	w2, w21
+	bls	.L2361
+	add	x0, x1, x21, sxtw
 	mov	w19, w20
-	add	x1, x0, x24, sxtw
-	ldrb	w26, [x1,736]
-	cbnz	w25, .L2331
-	adrp	x1, .LANCHOR0
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
-	cbz	w1, .L2332
-	ldrb	w0, [x0,1]
-	cbz	w0, .L2331
-.L2332:
-	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w26, [x0,736]
+	cbnz	w25, .L2362
+	adrp	x0, .LANCHOR0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0]
+	cbz	w0, .L2363
+	ldrb	w0, [x1,1]
+	cbz	w0, .L2362
+.L2363:
+	add	x0, x24, :lo12:.LANCHOR0
 	ldrh	w19, [x0,2]
 	ldrb	w2, [x0,1]
 	udiv	w1, w20, w19
 	mul	w19, w1, w19
 	sub	w1, w20, w19
-	cbz	w2, .L2333
+	cbz	w2, .L2364
 	add	w19, w19, w1, lsl 1
-	b	.L2331
-.L2333:
+	b	.L2362
+.L2364:
 	add	x0, x0, 4
 	ldrh	w0, [x0,w1,uxtw 1]
 	add	w19, w0, w19
-.L2331:
-	adrp	x25, .LC175
-	adrp	x23, .LC176
-	adrp	x0, .LC177
-	add	x25, x25, :lo12:.LC175
-	add	x0, x0, :lo12:.LC177
-	add	x23, x23, :lo12:.LC176
+.L2362:
+	adrp	x25, .LC177
+	adrp	x24, .LC178
+	adrp	x0, .LC179
+	add	x25, x25, :lo12:.LC177
+	add	x0, x0, :lo12:.LC179
+	add	x24, x24, :lo12:.LC178
 	str	x0, [x29,120]
-.L2337:
+.L2368:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L2334
+	tbz	x0, 4, .L2365
 	mov	x0, x25
 	mov	w1, w26
 	mov	w2, w20
 	mov	w3, w19
 	bl	printk
-.L2334:
+.L2365:
 	mov	w0, w26
 	mov	w1, w19
-	mov	x2, x22
-	mov	x3, x21
+	mov	x2, x23
+	mov	x3, x22
 	mov	w4, w27
 	bl	flash_prog_page
-	mov	w6, w0
-	cbz	w28, .L2335
-	adrp	x5, .LANCHOR4
+	mov	w5, w0
+	cbz	w28, .L2366
+	adrp	x6, .LANCHOR3
 	mov	w4, w27
-	add	x7, x5, :lo12:.LANCHOR4
-	mov	w0, w24
+	add	x7, x6, :lo12:.LANCHOR3
+	mov	w0, w21
 	mov	w1, w20
-	str	x5, [x29,104]
-	str	x6, [x29,96]
-	ldr	x2, [x7,1248]
-	ldr	x3, [x7,1256]
+	str	x6, [x29,104]
+	str	x5, [x29,96]
+	ldr	x2, [x7,1528]
+	ldr	x3, [x7,1536]
 	str	x7, [x29,112]
 	bl	flash_read_page_en
 	cmp	w0, 512
 	cset	w4, eq
-	ldr	x5, [x29,104]
-	cbnz	w4, .L2336
+	ldr	x6, [x29,104]
+	cbnz	w4, .L2367
 	cmn	w0, #1
-	beq	.L2336
+	beq	.L2367
 	ldr	x7, [x29,112]
-	ldr	w1, [x22]
-	ldr	x6, [x29,96]
-	ldr	x0, [x7,1248]
+	ldr	w1, [x23]
+	ldr	x5, [x29,96]
+	ldr	x0, [x7,1528]
 	ldr	w0, [x0]
 	cmp	w1, w0
-	bne	.L2336
-	ldr	x0, [x7,1256]
-	ldr	w1, [x21]
+	bne	.L2367
+	ldr	x0, [x7,1536]
+	ldr	w1, [x22]
 	ldr	w0, [x0]
 	cmp	w1, w0
-	beq	.L2335
-.L2336:
+	beq	.L2366
+.L2367:
 	mov	w2, 4
-	mov	x0, x23
+	mov	x0, x24
 	mov	w3, w2
-	mov	x1, x22
+	mov	x1, x23
 	str	x4, [x29,104]
-	str	x5, [x29,112]
+	str	x6, [x29,112]
 	bl	rknand_print_hex
 	mov	w2, 4
 	ldr	x0, [x29,120]
 	mov	w3, w2
-	mov	x1, x21
+	mov	x1, x22
 	bl	rknand_print_hex
-	ldr	x5, [x29,112]
+	ldr	x6, [x29,112]
 	mov	w2, 4
-	adrp	x0, .LC178
+	adrp	x0, .LC180
 	mov	w3, w2
-	add	x5, x5, :lo12:.LANCHOR4
-	add	x0, x0, :lo12:.LC178
-	str	x5, [x29,112]
-	ldr	x1, [x5,1256]
+	add	x6, x6, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC180
+	str	x6, [x29,112]
+	ldr	x1, [x6,1536]
 	bl	rknand_print_hex
-	ldr	x5, [x29,112]
+	ldr	x6, [x29,112]
 	mov	w2, 4
-	adrp	x0, .LC179
+	adrp	x0, .LC181
 	mov	w3, w2
-	add	x0, x0, :lo12:.LC179
-	ldr	x1, [x5,1248]
+	add	x0, x0, :lo12:.LC181
+	ldr	x1, [x6,1528]
 	bl	rknand_print_hex
 	ldr	x4, [x29,104]
-	cbnz	w4, .L2337
-.L2339:
-	adrp	x0, .LC180
+	cbnz	w4, .L2368
+.L2370:
+	adrp	x0, .LC182
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC180
+	add	x0, x0, :lo12:.LC182
 	bl	printk
-	adrp	x1, .LANCHOR3
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 577
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 587
 	add	x1, x1, 376
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 	mov	w0, -1
-	b	.L2338
-.L2335:
-	cmn	w6, #1
-	mov	w0, w6
-	beq	.L2339
-.L2338:
+	b	.L2361
+.L2366:
+	cmn	w5, #1
+	mov	w0, w5
+	beq	.L2370
+.L2361:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -14764,20 +15301,20 @@ ftl_prog_page:
 	bl	flash_prog_page_en
 	cmn	w0, #1
 	mov	w19, w0
-	bne	.L2357
-	adrp	x2, .LANCHOR3
+	bne	.L2389
+	adrp	x2, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x2, :lo12:.LANCHOR3
+	add	x1, x2, :lo12:.LANCHOR4
 	add	x0, x0, :lo12:.LC0
 	add	x1, x1, 400
-	mov	w2, 2231
+	mov	w2, 2324
 	bl	printk
 	bl	dump_stack
-	adrp	x0, .LC180
+	adrp	x0, .LC182
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC180
+	add	x0, x0, :lo12:.LC182
 	bl	printk
-.L2357:
+.L2389:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 64
@@ -14792,62 +15329,68 @@ ftl_info_flush:
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
 	adrp	x21, .LANCHOR0
-	adrp	x22, .LANCHOR4
+	adrp	x22, .LANCHOR3
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR0
 	stp	x25, x26, [sp,64]
-	mov	w26, w0
-	add	x0, x21, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
-	stp	x19, x20, [sp,16]
 	stp	x27, x28, [sp,80]
-	adrp	x23, .LANCHOR3
-	add	x19, x22, :lo12:.LANCHOR4
-	ldrb	w2, [x0,2832]
-	adrp	x24, .LC181
-	add	x23, x23, :lo12:.LANCHOR3
-	add	x0, x19, 1280
+	mov	w26, w0
+	add	x0, x22, :lo12:.LANCHOR3
+	ldrb	w2, [x19,2848]
+	add	x0, x0, 1600
 	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldr	x0, [x19,2880]
+	ldrh	w1, [x0,74]
+	cbz	w1, .L2391
+	strh	wzr, [x0,150]
+.L2391:
+	adrp	x23, .LANCHOR4
+	adrp	x24, .LC183
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w25, 0
-	add	x24, x24, :lo12:.LC181
+	add	x19, x22, :lo12:.LANCHOR3
+	add	x24, x24, :lo12:.LC183
 	add	x23, x23, 416
-	bl	ftl_memset
-.L2359:
+.L2402:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w27, [x19,1536]
-	ldrh	w20, [x19,1538]
-	ldr	x2, [x0,2864]
-	ldrh	w28, [x0,3362]
+	ldrb	w27, [x19,1856]
+	ldrh	w20, [x19,1858]
+	ldr	x2, [x0,2880]
+	ldrh	w28, [x0,3634]
 	ldr	w1, [x2,4]
 	add	w1, w1, 1
 	str	w1, [x2,4]
-	str	w26, [x19,1280]
-	ldr	x3, [x0,2864]
+	str	w26, [x19,1600]
+	ldr	x3, [x0,2880]
 	ldr	w0, [x3,4]
-	str	w0, [x19,1284]
+	str	w0, [x19,1604]
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2360
+	tbz	x0, 12, .L2392
 	ldr	w3, [x3,4]
 	mov	x0, x24
 	mov	w1, w27
 	mov	w2, w20
 	bl	printk
-.L2360:
+.L2392:
 	add	x1, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19,1538]
-	ldrh	w1, [x1,3324]
+	ldrh	w0, [x19,1858]
+	ldrh	w1, [x1,3596]
 	cmp	w1, w0
-	bhi	.L2361
+	bhi	.L2393
 	adrp	x20, .LC0
 	add	x20, x20, :lo12:.LC0
-.L2366:
-	ldrb	w1, [x19,1537]
+.L2398:
+	ldrb	w1, [x19,1857]
 	add	w1, w1, 1
 	uxtb	w1, w1
-	strb	w1, [x19,1537]
+	strb	w1, [x19,1857]
 	cmp	w1, 7
-	bls	.L2362
+	bls	.L2394
 	mov	x1, 0
-.L2365:
+.L2397:
 	add	x0, x21, :lo12:.LANCHOR0
 	uxth	w25, w1
 	ldr	x2, [x0,728]
@@ -14857,100 +15400,100 @@ ftl_info_flush:
 	add	w0, w2, 127
 	uxtb	w0, w0
 	cmp	w0, 125
-	bhi	.L2363
+	bhi	.L2395
 	mov	x1, x23
-	mov	w2, 748
+	mov	w2, 751
 	mov	x0, x20
 	bl	printk
 	bl	dump_stack
-	b	.L2364
-.L2363:
+	b	.L2396
+.L2395:
 	cmp	w2, 255
-	bne	.L2364
+	bne	.L2396
 	add	x1, x1, 1
 	cmp	x1, 8
-	bne	.L2365
+	bne	.L2397
 	mov	w25, w1
-.L2364:
-	strb	w25, [x19,1537]
+.L2396:
+	strb	w25, [x19,1857]
 	mov	w25, 1
-.L2362:
+.L2394:
 	add	x27, x21, :lo12:.LANCHOR0
-	ldrb	w1, [x19,1537]
+	ldrb	w1, [x19,1857]
 	ldr	x0, [x27,728]
 	add	x1, x0, x1
 	ldrb	w2, [x1,40]
-	strb	w2, [x19,1536]
+	strb	w2, [x19,1856]
 	cmp	w2, 255
-	beq	.L2366
-	ldrh	w20, [x27,3362]
+	beq	.L2398
+	ldrh	w20, [x27,3634]
 	mov	w0, 0
 	mul	w20, w2, w20
 	mov	w1, w20
 	bl	flash_erase_block
-	ldrb	w4, [x27,2832]
+	ldrb	w4, [x27,2848]
 	mov	w1, w20
 	mov	w0, 0
-	add	x2, x19, 1600
-	add	x3, x19, 1280
+	add	x2, x19, 1920
+	add	x3, x19, 1600
 	add	w20, w20, 1
 	bl	ftl_prog_page
 	mov	w0, 1
-	strh	w0, [x19,1538]
-	b	.L2367
-.L2361:
+	strh	w0, [x19,1858]
+	b	.L2399
+.L2393:
 	madd	w20, w27, w28, w20
-	cbnz	w0, .L2367
+	cbnz	w0, .L2399
 	mov	w1, w20
 	bl	flash_erase_block
-.L2367:
+.L2399:
 	add	x4, x21, :lo12:.LANCHOR0
 	mov	w1, w20
 	mov	w0, 0
-	add	x2, x19, 1600
-	add	x3, x19, 1280
-	ldrb	w4, [x4,2832]
+	add	x2, x19, 1920
+	add	x3, x19, 1600
+	ldrb	w4, [x4,2848]
 	bl	ftl_prog_page
 	cmn	w0, #1
-	ldrh	w1, [x19,1538]
+	ldrh	w1, [x19,1858]
 	adrp	x0, .LANCHOR5
 	add	w1, w1, 1
-	strh	w1, [x19,1538]
-	beq	.L2368
+	strh	w1, [x19,1858]
+	beq	.L2400
 	add	x1, x0, :lo12:.LANCHOR5
-	ldrb	w1, [x1,576]
-	cbz	w1, .L2369
-.L2368:
+	ldrb	w1, [x1,896]
+	cbz	w1, .L2401
+.L2400:
 	add	x0, x0, :lo12:.LANCHOR5
-	strb	wzr, [x0,576]
-	b	.L2359
-.L2369:
-	cbnz	w25, .L2370
-.L2378:
-	add	x22, x22, :lo12:.LANCHOR4
-	ldrb	w0, [x22,1536]
+	strb	wzr, [x0,896]
+	b	.L2402
+.L2401:
+	cbnz	w25, .L2403
+.L2411:
+	add	x22, x22, :lo12:.LANCHOR3
+	ldrb	w0, [x22,1856]
 	cmp	w0, 255
-	bne	.L2372
-	adrp	x1, .LANCHOR3
+	bne	.L2405
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 784
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 787
 	add	x1, x1, 416
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-	b	.L2372
-.L2370:
-	ldrb	w19, [x19,1537]
-	adrp	x20, .LANCHOR3
+	b	.L2405
+.L2403:
+	ldrb	w19, [x19,1857]
+	adrp	x20, .LANCHOR4
 	adrp	x23, .LC0
-	add	x20, x20, :lo12:.LANCHOR3
+	add	x20, x20, :lo12:.LANCHOR4
 	add	w19, w19, 1
 	add	x23, x23, :lo12:.LC0
 	add	x20, x20, 416
-.L2373:
+.L2406:
 	cmp	w19, 7
-	bhi	.L2378
+	bhi	.L2411
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x1, [x0,728]
 	add	w0, w19, 8
@@ -14959,27 +15502,27 @@ ftl_info_flush:
 	add	w0, w24, 127
 	uxtb	w0, w0
 	cmp	w0, 125
-	bhi	.L2374
+	bhi	.L2407
 	mov	x1, x20
-	mov	w2, 777
+	mov	w2, 780
 	mov	x0, x23
 	bl	printk
 	bl	dump_stack
-	b	.L2375
-.L2374:
+	b	.L2408
+.L2407:
 	cmp	w24, 255
-	beq	.L2376
-.L2375:
+	beq	.L2409
+.L2408:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3362]
+	ldrh	w1, [x0,3634]
 	mov	w0, 0
 	mul	w1, w24, w1
 	bl	flash_erase_block
-.L2376:
+.L2409:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2373
-.L2372:
+	b	.L2406
+.L2405:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -15006,34 +15549,34 @@ ftl_info_blk_init:
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	adrp	x21, .LANCHOR4
-	strb	w0, [x19,576]
+	adrp	x21, .LANCHOR3
+	strb	w0, [x19,896]
 	ldrh	w1, [x23,576]
-	add	x22, x21, :lo12:.LANCHOR4
-	add	x24, x22, 1600
-	strb	w0, [x19,578]
+	add	x22, x21, :lo12:.LANCHOR3
+	add	x24, x22, 1920
+	strb	w0, [x19,898]
 	mov	x0, x24
-	strb	wzr, [x19,577]
+	strb	wzr, [x19,897]
 	add	x1, x24, x1, lsl 2
-	str	x1, [x23,2864]
+	str	x1, [x23,2880]
 	mov	w1, 0
 	str	x24, [x23,584]
-	adrp	x26, .LC182
+	adrp	x26, .LC184
 	adrp	x27, .LANCHOR2
 	bl	ftl_memset
-	add	x26, x26, :lo12:.LC182
-	add	x0, x19, 640
+	add	x26, x26, :lo12:.LC184
+	add	x0, x19, 960
 	mov	w1, 0
 	mov	w2, 16384
 	mov	w19, 7
 	bl	ftl_memset
-	strb	wzr, [x22,1537]
+	strb	wzr, [x22,1857]
 	ldr	x0, [x23,728]
-	add	x23, x22, 1280
-	strh	wzr, [x22,1538]
+	add	x23, x22, 1600
+	strh	wzr, [x22,1858]
 	ldrb	w0, [x0,40]
-	strb	w0, [x22,1536]
-.L2396:
+	strb	w0, [x22,1856]
+.L2432:
 	add	x5, x20, :lo12:.LANCHOR0
 	add	w0, w19, 8
 	sxth	w25, w19
@@ -15041,10 +15584,10 @@ ftl_info_blk_init:
 	add	x0, x1, x0, sxtw
 	ldrb	w1, [x0,32]
 	cmp	w1, 255
-	beq	.L2392
-	ldrh	w22, [x5,3362]
+	beq	.L2428
+	ldrh	w22, [x5,3634]
 	mov	w0, 0
-	ldrb	w4, [x5,2832]
+	ldrb	w4, [x5,2848]
 	mov	x2, x24
 	mov	x3, x23
 	str	x5, [x29,104]
@@ -15054,128 +15597,128 @@ ftl_info_blk_init:
 	cmn	w0, #1
 	mov	w28, w0
 	ldr	x5, [x29,104]
-	bne	.L2393
-	ldrb	w4, [x5,2832]
+	bne	.L2429
+	ldrb	w4, [x5,2848]
 	mov	w0, 0
 	add	w1, w22, 1
 	mov	x2, x24
 	mov	x3, x23
 	bl	ftl_read_page
 	mov	w28, w0
-.L2393:
+.L2429:
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2394
+	tbz	x0, 12, .L2430
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w1, w19
 	mov	w2, w28
 	mov	w3, 672
-	ldr	x4, [x0,2864]
+	ldr	x4, [x0,2880]
 	mov	x0, x26
 	ldr	w4, [x4]
 	bl	printk
-.L2394:
+.L2430:
 	cmn	w28, #1
-	beq	.L2392
+	beq	.L2428
 	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldr	w1, [x0]
 	mov	w0, 21574
 	movk	w0, 0x494c, lsl 16
 	cmp	w1, w0
-	beq	.L2405
-.L2392:
+	beq	.L2441
+.L2428:
 	sub	w19, w19, #1
 	cmn	w19, #1
-	bne	.L2396
+	bne	.L2432
 	mov	w25, 0
-	b	.L2395
-.L2405:
+	b	.L2431
+.L2441:
 	mov	w19, w25
-.L2395:
+.L2431:
 	adrp	x23, .LANCHOR2
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2397
+	tbz	x0, 12, .L2433
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w1, w19
 	mov	w2, 4800
-	ldr	x3, [x0,2864]
-	adrp	x0, .LC183
-	add	x0, x0, :lo12:.LC183
+	ldr	x3, [x0,2880]
+	adrp	x0, .LC185
+	add	x0, x0, :lo12:.LC185
 	ldr	w3, [x3]
 	bl	printk
-.L2397:
+.L2433:
 	cmn	w19, #1
-	bne	.L2398
-	add	x0, x21, :lo12:.LANCHOR4
+	bne	.L2434
+	add	x0, x21, :lo12:.LANCHOR3
 	mov	w1, 0
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x0, x0, 1600
+	add	x0, x0, 1920
 	mov	w2, 16384
 	bl	ftl_memset
-	ldr	x1, [x20,2864]
+	ldr	x1, [x20,2880]
 	mov	w0, 21574
 	movk	w0, 0x494c, lsl 16
 	str	w0, [x1]
-	mov	w0, 22
+	mov	w0, 24
 	movk	w0, 0x6, lsl 16
-	ldr	x1, [x20,2864]
+	ldr	x1, [x20,2880]
 	str	w0, [x1,12]
-	b	.L2422
-.L2398:
+	b	.L2458
+.L2434:
 	add	x27, x20, :lo12:.LANCHOR0
-	add	x24, x21, :lo12:.LANCHOR4
+	add	x24, x21, :lo12:.LANCHOR3
 	add	w0, w25, 8
-	add	x26, x24, 1280
+	add	x26, x24, 1600
 	mov	x3, x26
 	mov	w4, 4
 	ldr	x1, [x27,728]
 	add	x0, x1, x0, sxtw
-	strb	w25, [x24,1537]
-	add	x25, x24, 1600
+	strb	w25, [x24,1857]
+	add	x25, x24, 1920
 	ldrb	w1, [x0,32]
 	mov	x2, x25
 	mov	w0, 0
-	strb	w1, [x24,1536]
+	strb	w1, [x24,1856]
 	bl	flash_get_last_written_page
 	sxth	w22, w0
 	add	w0, w0, 1
 	uxth	w19, w0
-	ldrb	w0, [x24,1536]
-	ldrh	w24, [x27,3362]
+	ldrb	w0, [x24,1856]
+	ldrh	w24, [x27,3634]
 	mul	w24, w0, w24
-	b	.L2400
-.L2422:
+	b	.L2436
+.L2458:
 	mov	w0, w19
-	b	.L2399
-.L2403:
+	b	.L2435
+.L2439:
 	add	x27, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	add	w1, w22, w24
 	mov	x2, x25
 	mov	x3, x26
-	ldrb	w4, [x27,2832]
+	ldrb	w4, [x27,2848]
 	bl	ftl_read_page
 	cmn	w0, #1
-	bne	.L2423
-.L2401:
+	bne	.L2459
+.L2437:
 	sub	w22, w22, #1
 	sxth	w22, w22
-.L2400:
-	tbz	w22, #31, .L2403
-	b	.L2404
-.L2423:
-	ldr	x0, [x27,2864]
+.L2436:
+	tbz	w22, #31, .L2439
+	b	.L2440
+.L2459:
+	ldr	x0, [x27,2880]
 	ldr	w1, [x0]
 	mov	w0, 21574
 	movk	w0, 0x494c, lsl 16
 	cmp	w1, w0
-	bne	.L2401
-.L2404:
-	add	x21, x21, :lo12:.LANCHOR4
+	bne	.L2437
+.L2440:
+	add	x21, x21, :lo12:.LANCHOR3
 	add	x20, x20, :lo12:.LANCHOR0
-	strh	w19, [x21,1538]
+	strh	w19, [x21,1858]
 	bl	ftl_tmp_into_update
-	ldr	x1, [x20,2864]
+	ldr	x1, [x20,2880]
 	ldr	w0, [x1,64]
 	add	w0, w0, 1
 	str	w0, [x1,64]
@@ -15185,14 +15728,14 @@ ftl_info_blk_init:
 	bl	ftl_info_flush
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
 	and	w19, w0, 16384
-	tbz	x0, 14, .L2422
-	ldr	x1, [x20,2864]
-	adrp	x0, .LC184
-	add	x0, x0, :lo12:.LC184
+	tbz	x0, 14, .L2458
+	ldr	x1, [x20,2880]
+	adrp	x0, .LC186
+	add	x0, x0, :lo12:.LC186
 	ldr	w1, [x1,156]
 	bl	printk
 	mov	w0, 0
-.L2399:
+.L2435:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -15219,101 +15762,103 @@ ftl_ext_info_flush:
 	ldr	x1, [x1,608]
 	ldr	w3, [x1,520]
 	cmp	w0, w3
-	bls	.L2425
+	bls	.L2461
 	ldr	w2, [x1,12]
 	sub	w2, w2, w3
 	add	w2, w2, w0
 	str	w2, [x1,12]
-	b	.L2438
-.L2425:
-	bcs	.L2426
-.L2438:
+	b	.L2474
+.L2461:
+	bcs	.L2462
+.L2474:
 	str	w0, [x1,520]
-.L2426:
-	adrp	x23, .LANCHOR3
-	adrp	x19, .LANCHOR4
-	add	x23, x23, :lo12:.LANCHOR3
-	add	x19, x19, :lo12:.LANCHOR4
+.L2462:
+	adrp	x23, .LANCHOR4
+	adrp	x19, .LANCHOR3
+	add	x23, x23, :lo12:.LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR3
 	mov	w0, 0
 	add	x23, x23, 432
-	add	x19, x19, 1280
+	add	x19, x19, 1600
 	bl	ftl_total_vpn_update
-.L2427:
+.L2463:
 	adrp	x24, .LANCHOR5
 	add	x24, x24, :lo12:.LANCHOR5
-	add	x25, x24, 640
-.L2430:
+	add	x25, x24, 960
+.L2466:
 	add	x2, x22, :lo12:.LANCHOR0
-	ldr	x0, [x2,2864]
+	ldr	x0, [x2,2880]
 	ldr	w1, [x0,56]
 	add	w1, w1, 1
 	str	w1, [x0,56]
 	ldrh	w1, [x0,140]
-	ldrh	w0, [x2,3324]
+	ldrh	w0, [x2,3596]
 	cmp	w1, w0
-	bcc	.L2428
+	bcc	.L2464
 	bl	ftl_ext_alloc_new_blk
-.L2428:
+.L2464:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldrh	w1, [x0,130]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2429
+	bne	.L2465
 	adrp	x0, .LC0
 	mov	x1, x23
-	mov	w2, 1819
+	mov	w2, 1912
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2429:
-	add	x21, x22, :lo12:.LANCHOR0
-	mov	w0, 21
-	mov	w1, 1
-	ldr	x2, [x21,2864]
-	ldrh	w20, [x21,3264]
+.L2465:
+	add	x20, x22, :lo12:.LANCHOR0
+	mov	w0, 24
+	ldr	x2, [x20,2880]
+	ldrb	w1, [x20,744]
+	ldrh	w21, [x20,3536]
 	ldrh	w3, [x2,130]
-	sub	w20, w0, w20
+	sub	w1, w0, w1
+	sub	w1, w1, w21
+	mov	w21, 1
+	asr	w26, w3, w1
+	lsl	w1, w21, w1
+	sub	w21, w1, #1
 	ldrh	w0, [x2,140]
-	asr	w26, w3, w20
-	lsl	w20, w1, w20
-	sub	w20, w20, #1
-	ldrb	w2, [x21,2832]
-	and	w3, w20, w3
-	ldrh	w20, [x21,3362]
+	and	w3, w21, w3
+	ldrh	w21, [x20,3634]
+	ldrb	w2, [x20,2848]
 	mov	w1, 0
+	sxth	w3, w3
 	lsl	w2, w2, 1
-	madd	w20, w3, w20, w0
+	madd	w21, w3, w21, w0
 	mov	x0, x19
 	bl	ftl_memset
 	str	wzr, [x19]
-	ldr	x0, [x21,2864]
-	uxth	w20, w20
-	ldrb	w4, [x21,2832]
-	mov	w1, w20
+	ldr	x0, [x20,2880]
+	mov	w1, w21
+	ldrb	w4, [x20,2848]
 	mov	x2, x25
 	mov	x3, x19
 	ldr	w0, [x0,56]
 	str	w0, [x19,4]
 	mov	w0, w26
 	bl	ftl_prog_page
-	ldr	x2, [x21,2864]
+	ldr	x2, [x20,2880]
 	ldrh	w1, [x2,140]
 	add	w1, w1, 1
 	uxth	w1, w1
 	strh	w1, [x2,140]
 	cmp	w1, 1
-	beq	.L2430
+	beq	.L2466
 	cmn	w0, #1
-	beq	.L2431
-	ldrb	w0, [x24,578]
-	cbz	w0, .L2432
-.L2431:
+	beq	.L2467
+	ldrb	w0, [x24,898]
+	cbz	w0, .L2468
+.L2467:
 	adrp	x0, .LANCHOR5
 	add	x0, x0, :lo12:.LANCHOR5
-	strb	wzr, [x0,578]
-	b	.L2427
-.L2432:
+	strb	wzr, [x0,898]
+	b	.L2463
+.L2468:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -15325,139 +15870,170 @@ ftl_ext_info_flush:
 	.global	ftl_ext_info_init
 	.type	ftl_ext_info_init, %function
 ftl_ext_info_init:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	mov	w4, 4
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	str	x27, [sp,80]
-	stp	x25, x26, [sp,64]
-	add	x26, x19, :lo12:.LANCHOR0
 	adrp	x20, .LANCHOR5
+	stp	x27, x28, [sp,80]
+	add	x27, x19, :lo12:.LANCHOR0
+	add	x2, x20, :lo12:.LANCHOR5
 	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR4
-	add	x2, x20, :lo12:.LANCHOR5
-	ldr	x0, [x26,2864]
-	add	x3, x21, :lo12:.LANCHOR4
-	ldrh	w22, [x26,3264]
-	add	x2, x2, 640
-	add	x3, x3, 1280
-	strh	wzr, [x26,3896]
-	ldrh	w1, [x0,130]
-	mov	w0, 21
-	sub	w22, w0, w22
-	mov	w0, 1
-	asr	w27, w1, w22
-	lsl	w22, w0, w22
-	sub	w22, w22, #1
-	and	w22, w22, w1
-	uxtb	w25, w27
+	adrp	x21, .LANCHOR3
+	add	x2, x2, 960
+	ldr	x0, [x27,2880]
+	add	x3, x21, :lo12:.LANCHOR3
+	ldrb	w1, [x27,744]
+	adrp	x26, .LANCHOR2
+	ldrh	w22, [x0,130]
+	mov	w0, 24
+	sub	w0, w0, w1
+	ldrh	w1, [x27,3536]
+	strh	wzr, [x3,-184]
+	add	x3, x3, 1600
+	sub	w0, w0, w1
+	mov	w1, 1
+	asr	w28, w22, w0
+	lsl	w0, w1, w0
+	sub	w0, w0, #1
+	and	w22, w0, w22
+	uxtb	w25, w28
 	mov	w0, w25
 	mov	w1, w22
 	bl	flash_get_last_written_page
 	sxth	w24, w0
-	adrp	x0, .LANCHOR2
+	ldr	w0, [x26,#:lo12:.LANCHOR2]
 	mov	w23, w24
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2440
-	ldr	x5, [x26,2864]
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC185
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC185
+	tbz	x0, 12, .L2476
+	ldr	x5, [x27,2880]
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC187
+	add	x1, x1, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC187
 	add	x1, x1, 456
 	ldrh	w5, [x5,130]
-	mov	w2, 1863
+	mov	w2, 1956
 	mov	w3, w24
-	uxth	w4, w27
+	uxth	w4, w28
 	bl	printk
-.L2440:
+.L2476:
 	add	x20, x20, :lo12:.LANCHOR5
-	add	x21, x21, :lo12:.LANCHOR4
-	mov	w26, w24
-	add	x20, x20, 640
-	add	x21, x21, 1280
-.L2441:
-	tbnz	w26, #31, .L2446
-	add	x27, x19, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR3
+	mov	w27, w24
+	add	x20, x20, 960
+	add	x21, x21, 1600
+.L2477:
+	tbnz	w27, #31, .L2482
+	add	x28, x19, :lo12:.LANCHOR0
 	mov	w0, w25
 	mov	x2, x20
 	mov	x3, x21
-	ldrh	w1, [x27,3362]
-	ldrb	w4, [x27,2832]
-	madd	w1, w22, w1, w26
+	ldrh	w1, [x28,3634]
+	ldrb	w4, [x28,2848]
+	madd	w1, w22, w1, w27
 	bl	flash_read_page_en
 	cmp	w0, 512
-	beq	.L2442
+	beq	.L2478
 	cmn	w0, #1
-	beq	.L2442
-	ldr	x0, [x27,608]
+	beq	.L2478
+	ldr	x0, [x28,608]
 	ldr	w1, [x0]
 	mov	w0, 20038
 	movk	w0, 0x4549, lsl 16
 	cmp	w1, w0
-	bne	.L2442
-.L2446:
+	bne	.L2478
+.L2482:
 	bl	zftl_sblk_list_init
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldrh	w1, [x0,140]
 	cmp	w1, w24
-	bgt	.L2444
+	bgt	.L2480
 	add	w23, w23, 1
 	strh	w23, [x0,140]
 	bl	ftl_ext_info_flush
-	b	.L2444
-.L2442:
-	sub	w26, w26, #1
-	sxth	w26, w26
-	b	.L2441
-.L2444:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x20, [x19,608]
+	b	.L2480
+.L2478:
+	sub	w27, w27, #1
+	sxth	w27, w27
+	b	.L2477
+.L2480:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldr	x21, [x20,608]
 	bl	timer_get_time
 	mov	w1, 100
 	udiv	w0, w0, w1
-	str	w0, [x20,520]
-	ldr	x20, [x19,608]
+	str	w0, [x21,520]
+	ldr	x21, [x20,608]
 	bl	timer_get_time
-	str	w0, [x20,604]
-	ldr	x0, [x19,608]
+	str	w0, [x21,604]
+	ldr	x0, [x20,608]
 	mov	w1, -1
 	strh	w1, [x0,584]
 	strh	w1, [x0,586]
 	strh	w1, [x0,588]
 	strh	w1, [x0,590]
 	mov	w1, 65535
-	str	wzr, [x0,608]
 	str	w1, [x0,560]
 	mov	w1, -1
 	str	w1, [x0,564]
-	mov	w0, 0
-	strh	w1, [x19,3240]
-	ldp	x19, x20, [sp,16]
+	ldr	w1, [x26,#:lo12:.LANCHOR2]
+	str	wzr, [x0,608]
+	tbz	x1, 12, .L2483
+	ldr	w2, [x0,520]
+	ldr	w3, [x0,12]
+	str	x2, [x29,96]
+	str	x3, [x29,104]
+	bl	timer_get_time
+	mov	w4, w0
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC188
+	add	x1, x1, :lo12:.LANCHOR4
+	ldr	x2, [x29,96]
+	ldr	x3, [x29,104]
+	add	x0, x0, :lo12:.LC188
+	add	x1, x1, 456
+	bl	printk
+.L2483:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	strh	w0, [x19,3512]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
 	ldp	x25, x26, [sp,64]
-	ldr	x27, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	ftl_ext_info_init, .-ftl_ext_info_init
 	.align	2
 	.global	ftl_prog_ppa_page
 	.type	ftl_prog_ppa_page, %function
 ftl_prog_ppa_page:
+	mov	w8, w0
+	adrp	x0, .LANCHOR0+744
 	stp	x29, x30, [sp, -16]!
-	mov	w5, w0
-	mov	x7, x1
-	mov	x6, x2
+	mov	w5, 24
+	mov	x10, x1
 	add	x29, sp, 0
+	ldrb	w6, [x0,#:lo12:.LANCHOR0+744]
+	mov	x9, x2
 	mov	w4, w3
-	ubfx	x0, x5, 21, 3
-	and	w1, w5, 2097151
-	mov	x2, x7
-	mov	x3, x6
+	mov	x2, x10
+	sub	w7, w5, w6
+	mov	w5, 1
+	lsl	w6, w5, w6
+	lsl	w5, w5, w7
+	lsr	w0, w8, w7
+	sub	w6, w6, #1
+	sub	w1, w5, #1
+	and	w0, w0, w6
+	and	w1, w1, w8
+	mov	x3, x9
 	bl	ftl_prog_page
 	ldp	x29, x30, [sp], 16
 	ret
@@ -15467,53 +16043,54 @@ ftl_prog_ppa_page:
 	.type	ftl_write_last_log_page, %function
 ftl_write_last_log_page:
 	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR3-200
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	adrp	x19, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
 	mov	w21, -1
+	ldr	x20, [x1,#:lo12:.LANCHOR3-200]
 	ldrh	w1, [x0,6]
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w24, [x0,12]
+	ldrh	w22, [x0,12]
 	cmp	w1, 1
-	ldr	x22, [x19,3880]
-	bne	.L2458
-	mov	x20, x0
+	bne	.L2498
+	mov	x19, x0
 	bl	ftl_get_new_free_page
 	cmn	w0, #1
 	mov	w23, w0
 	mov	w21, 0
-	beq	.L2458
-	ldrh	w0, [x20]
-	add	x22, x22, x24, uxth 2
+	beq	.L2498
+	ldrh	w0, [x19]
+	add	x22, x20, x22, uxth 2
+	adrp	x19, .LANCHOR6
+	adrp	x20, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR6
+	add	x20, x20, :lo12:.LANCHOR0
 	bl	ftl_vpn_decrement
-	adrp	x1, .LANCHOR6
 	mov	w0, 15555
-	add	x1, x1, :lo12:.LANCHOR6
+	sub	x2, x19, #64
 	movk	w0, 0xf55f, lsl 16
-	add	x2, x1, 3968
+	ldrh	w1, [x20,3596]
+	str	w0, [x19,-64]
+	ldrb	w0, [x20,3572]
 	str	x2, [x29,72]
-	str	w0, [x1,3968]
-	ldrb	w0, [x19,3300]
-	ldrh	w1, [x19,3324]
 	mul	w1, w1, w0
 	mov	x0, x22
 	lsl	w1, w1, 2
 	bl	js_hash
+	str	w0, [x19,-60]
 	ldr	x2, [x29,72]
-	mov	x1, x22
-	ldrb	w3, [x19,2832]
-	str	w0, [x2,4]
 	mov	w0, w23
-	str	w21, [x2,8]
-	str	w21, [x2,12]
+	ldrb	w3, [x20,2848]
+	mov	x1, x22
+	str	w21, [x19,-56]
+	str	w21, [x19,-52]
 	bl	ftl_prog_ppa_page
-.L2458:
+.L2498:
 	mov	w0, w21
+	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	ftl_write_last_log_page, .-ftl_write_last_log_page
@@ -15521,510 +16098,589 @@ ftl_write_last_log_page:
 	.global	ftl_open_sblk_recovery
 	.type	ftl_open_sblk_recovery, %function
 ftl_open_sblk_recovery:
-	stp	x29, x30, [sp, -208]!
+	stp	x29, x30, [sp, -336]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR2
-	stp	x25, x26, [sp,64]
-	mov	x25, x0
-	str	x1, [x29,120]
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	adrp	x22, .LANCHOR2
 	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	str	x1, [x29,120]
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
 	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	tbz	x0, 12, .L2463
-	adrp	x0, .LC186
-	ldrh	w1, [x25,2]
-	add	x0, x0, :lo12:.LC186
+	tbz	x0, 12, .L2503
+	adrp	x0, .LC189
+	ldrh	w1, [x19,2]
+	add	x0, x0, :lo12:.LC189
 	bl	printk
-.L2463:
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2464
-	adrp	x0, .LC187
-	ldrb	w1, [x25,5]
-	add	x0, x0, :lo12:.LC187
+.L2503:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2504
+	adrp	x0, .LC190
+	ldrb	w1, [x19,5]
+	add	x0, x0, :lo12:.LC190
 	bl	printk
-.L2464:
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2465
-	adrp	x0, .LC188
-	ldrh	w1, [x25]
-	add	x0, x0, :lo12:.LC188
+.L2504:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2505
+	adrp	x0, .LC191
+	ldrh	w1, [x19]
+	add	x0, x0, :lo12:.LC191
 	bl	printk
-.L2465:
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2466
-	adrp	x0, .LC189
-	ldrh	w1, [x25,16]
-	ldrh	w2, [x25,18]
-	add	x0, x0, :lo12:.LC189
+.L2505:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2506
+	adrp	x0, .LC192
+	ldrh	w1, [x19,16]
+	ldrh	w2, [x19,18]
+	add	x0, x0, :lo12:.LC192
 	bl	printk
-.L2466:
-	ldrh	w0, [x25,10]
-	adrp	x19, .LANCHOR0
-	strh	w0, [x25,14]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x25]
+.L2506:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2507
+	adrp	x0, .LC193
+	ldrb	w1, [x19,9]
+	add	x0, x0, :lo12:.LC193
+	bl	printk
+.L2507:
+	ldrh	w0, [x19,10]
+	adrp	x20, .LANCHOR0
+	strh	w0, [x19,14]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x19]
 	ldrh	w0, [x0,576]
 	cmp	w1, w0
-	bcs	.L2462
+	bcs	.L2502
 	mov	w0, 1
-	add	x20, x29, 144
-	adrp	x24, .LANCHOR4
-	mov	w26, 2
+	add	x21, x29, 144
+	add	x26, x29, 272
+	mov	w27, 2
 	bl	buf_alloc
-	mov	x27, x0
+	mov	x25, x0
+	mov	w1, 255
+	mov	w2, 64
+	mov	x0, x21
+	bl	ftl_memset
+	mov	w1, 255
+	mov	w2, 64
+	add	x0, x29, 208
+	bl	ftl_memset
+	mov	x0, x26
 	mov	w1, 255
-	mov	x0, x20
 	mov	w2, 64
-	add	x24, x24, :lo12:.LANCHOR4
-	add	x24, x24, 1280
 	bl	ftl_memset
-	ldrb	w22, [x25,5]
+	ldrb	w23, [x19,5]
 	adrp	x0, .LANCHOR3
-	ldrh	w23, [x25,2]
+	ldrh	w24, [x19,2]
 	add	x0, x0, :lo12:.LANCHOR3
 	str	wzr, [x29,136]
+	add	x28, x0, 1600
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
 	add	x0, x0, 480
 	str	x0, [x29,112]
-.L2468:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3324]
+.L2509:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3596]
+	cmp	w0, w24
+	bls	.L2512
+	ldrb	w23, [x19,5]
+.L2510:
+	ldrb	w0, [x19,9]
 	cmp	w0, w23
-	bls	.L2471
-	ldrb	w22, [x25,5]
-.L2469:
-	ldrb	w0, [x25,9]
-	cmp	w0, w22
-	bls	.L2579
-	add	x0, x25, x22, sxtw 1
+	bls	.L2640
+	add	x0, x19, x23, sxtw 1
 	ldrh	w0, [x0,16]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L2470
-	add	x3, x19, :lo12:.LANCHOR0
-	ldr	x2, [x27,24]
-	ldrh	w1, [x3,3362]
-	ldrb	w3, [x3,2832]
-	madd	w0, w0, w1, w23
-	ldr	x1, [x27,8]
+	beq	.L2511
+	add	x3, x20, :lo12:.LANCHOR0
+	ldr	x2, [x25,24]
+	ldrh	w1, [x3,3634]
+	ldrb	w3, [x3,2848]
+	madd	w0, w0, w1, w24
+	ldr	x1, [x25,8]
 	str	w0, [x29,132]
 	bl	ftl_read_ppa_page
 	cmp	w0, 512
-	mov	w28, w0
-	beq	.L2471
+	mov	w3, w0
+	beq	.L2512
 	cmn	w0, #1
-	beq	.L2472
-	ldr	x0, [x27,24]
+	beq	.L2513
+	ldr	x0, [x25,24]
 	ldr	w1, [x0]
 	cmn	w1, #1
-	bne	.L2472
+	bne	.L2513
 	ldr	w0, [x0,4]
 	cmn	w0, #1
-	bne	.L2472
-	ldr	x0, [x27,8]
+	bne	.L2513
+	ldr	x0, [x25,8]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L2471
-.L2472:
-	adrp	x0, .LANCHOR5+577
+	beq	.L2512
+.L2513:
+	adrp	x0, .LANCHOR5+897
 	mov	w1, 1
-	strb	w1, [x0,#:lo12:.LANCHOR5+577]
-	ldrb	w0, [x25,9]
-	ldrh	w1, [x25,10]
-	madd	w0, w23, w0, w22
+	strb	w1, [x0,#:lo12:.LANCHOR5+897]
+	ldrb	w0, [x19,9]
+	ldrh	w1, [x19,10]
+	madd	w0, w24, w0, w23
 	cmp	w1, w0
-	beq	.L2473
-	adrp	x0, .LC0
+	beq	.L2514
 	ldr	x1, [x29,112]
-	mov	w2, 1412
+	adrp	x0, .LC0
+	mov	w2, 1488
 	add	x0, x0, :lo12:.LC0
+	str	x3, [x29,136]
 	bl	printk
 	bl	dump_stack
-.L2473:
-	ldrh	w0, [x25,10]
-	ldrh	w1, [x25,6]
-	ldrb	w2, [x25,9]
+	ldr	x3, [x29,136]
+.L2514:
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	ldrb	w2, [x19,9]
 	add	w1, w1, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3324]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3596]
 	mul	w0, w0, w2
 	cmp	w1, w0
-	beq	.L2474
-	adrp	x0, .LC0
+	beq	.L2515
 	ldr	x1, [x29,112]
-	mov	w2, 1413
+	adrp	x0, .LC0
+	mov	w2, 1489
 	add	x0, x0, :lo12:.LC0
+	str	x3, [x29,136]
 	bl	printk
 	bl	dump_stack
-.L2474:
-	cmn	w28, #1
-	beq	.L2478
-	ldr	x0, [x27,24]
+	ldr	x3, [x29,136]
+.L2515:
+	cmn	w3, #1
+	beq	.L2519
+	ldr	x0, [x25,24]
 	ldr	w0, [x0,4]
 	cmn	w0, #1
-	beq	.L2478
+	beq	.L2519
 	bl	lpa_hash_get_ppa
 	ldr	x1, [x29,120]
-	cbz	x1, .L2476
-	ldr	x3, [x27,24]
-	ldr	w1, [x3,8]
+	cbz	x1, .L2517
+	ldr	x7, [x25,24]
+	ldr	w1, [x7,8]
 	cmp	w0, w1
-	beq	.L2476
+	beq	.L2517
 	cmn	w0, #1
-	beq	.L2476
-	add	x28, x19, :lo12:.LANCHOR0
-	mov	w4, 21
-	mov	w26, 1
-	ldrh	w1, [x28,3264]
-	lsr	w2, w0, w1
-	sub	w1, w4, w1
-	lsl	w1, w26, w1
+	beq	.L2517
+	add	x27, x20, :lo12:.LANCHOR0
+	mov	w6, 24
+	mov	w4, 1
+	ldrb	w2, [x27,744]
+	ldrh	w1, [x27,3536]
+	sub	w2, w6, w2
+	lsr	w3, w0, w1
+	sub	w1, w2, w1
+	lsl	w1, w4, w1
+	ldrb	w2, [x27,3538]
 	sub	w1, w1, #1
-	and	w1, w2, w1
-	ldrb	w2, [x28,3266]
+	and	w1, w3, w1
 	udiv	w1, w1, w2
 	ldr	x2, [x29,120]
 	ldrh	w2, [x2]
 	cmp	w2, w1, uxth
-	bne	.L2476
-	ldr	w7, [x3]
-	mov	x2, x24
-	ldr	x1, [x27,8]
-	ldrb	w3, [x28,2832]
-	str	x4, [x29,104]
+	bne	.L2517
+	ldr	w7, [x7]
+	mov	x2, x28
+	ldr	x1, [x25,8]
+	ldrb	w3, [x27,2848]
+	str	x4, [x29,96]
+	str	x6, [x29,104]
 	str	x7, [x29,136]
 	bl	ftl_read_ppa_page
-	ldr	w0, [x24]
+	ldr	w0, [x28]
 	ldr	x7, [x29,136]
-	ldr	x4, [x29,104]
+	ldr	x6, [x29,104]
 	cmp	w0, w7
-	bcc	.L2476
-	ldr	x0, [x27,24]
+	ldr	x4, [x29,96]
+	bcc	.L2517
+	ldr	x0, [x25,24]
 	ldr	w1, [x0,8]
 	cmn	w1, #1
-	beq	.L2478
-	ldrh	w0, [x28,3264]
-	sub	w4, w4, w0
+	beq	.L2519
+	ldrb	w2, [x27,744]
+	ldrh	w0, [x27,3536]
+	sub	w6, w6, w2
+	sub	w6, w6, w0
 	lsr	w1, w1, w0
-	lsl	w26, w26, w4
-	ldrb	w0, [x28,3266]
-	sub	w26, w26, #1
-	and	w1, w26, w1
+	lsl	w4, w4, w6
+	ldrb	w0, [x27,3538]
+	sub	w4, w4, #1
+	and	w1, w4, w1
 	udiv	w0, w1, w0
 	bl	ftl_vpn_decrement
-	b	.L2478
-.L2476:
-	ldr	x2, [x27,24]
-	add	x1, x19, :lo12:.LANCHOR0
+	b	.L2519
+.L2517:
+	ldr	x2, [x25,24]
+	add	x1, x20, :lo12:.LANCHOR0
 	ldr	w3, [x2,4]
-	ldr	w0, [x1,2840]
+	ldr	w0, [x1,2856]
 	cmp	w3, w0
-	bcs	.L2478
-	ldrb	w0, [x25,9]
-	ldrh	w4, [x1,3324]
-	ldrh	w3, [x25,10]
+	bcs	.L2519
+	ldrb	w0, [x19,9]
+	ldrh	w4, [x1,3596]
+	ldrh	w3, [x19,10]
 	mul	w0, w0, w4
 	sub	w0, w0, #1
 	cmp	w3, w0
-	blt	.L2580
-.L2478:
-	ldrh	w0, [x25,6]
-	mov	w26, 4
+	blt	.L2641
+.L2519:
+	ldrh	w0, [x19,6]
+	mov	w27, 4
 	sub	w0, w0, #1
-	strh	w0, [x25,6]
-	ldrh	w0, [x25,10]
+	strh	w0, [x19,6]
+	ldrh	w0, [x19,10]
 	add	w0, w0, 1
-	strh	w0, [x25,10]
+	strh	w0, [x19,10]
 	mov	w0, 1
 	str	w0, [x29,136]
-.L2470:
-	add	w22, w22, 1
-	uxth	w22, w22
-	b	.L2469
-.L2579:
+.L2511:
 	add	w23, w23, 1
-	strb	wzr, [x25,5]
 	uxth	w23, w23
-	b	.L2468
-.L2471:
-	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x25,10]
-	ldrh	w1, [x25,6]
-	strh	w23, [x25,2]
+	b	.L2510
+.L2640:
+	add	w24, w24, 1
+	strb	wzr, [x19,5]
+	uxth	w24, w24
+	b	.L2509
+.L2512:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	strh	w24, [x19,2]
 	add	w1, w1, w0
-	ldrh	w2, [x2,3324]
-	ldrb	w0, [x25,9]
-	strb	w22, [x25,5]
+	ldrh	w2, [x2,3596]
+	ldrb	w0, [x19,9]
+	strb	w23, [x19,5]
 	mul	w0, w0, w2
 	cmp	w1, w0
-	beq	.L2482
-	adrp	x1, .LANCHOR3
+	beq	.L2523
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1493
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1569
 	add	x1, x1, 480
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2482:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w3, [x25,10]
-	ldr	x4, [x0,3880]
+.L2523:
+	adrp	x1, .LANCHOR3
+	ldrh	w3, [x19,10]
+	add	x0, x1, :lo12:.LANCHOR3
+	str	x1, [x29,120]
+	ldr	x4, [x0,-200]
 	mov	w0, 0
 	mov	w2, w0
-.L2483:
+.L2524:
 	cmp	w2, w3
-	bcs	.L2581
-	ldrh	w1, [x25,12]
+	bcs	.L2642
+	ldrh	w1, [x19,12]
 	add	w1, w2, w1
 	ldr	w1, [x4,x1,lsl 2]
 	cmn	w1, #1
-	beq	.L2484
+	beq	.L2525
 	add	w1, w0, 1
 	uxth	w0, w1
-.L2484:
+.L2525:
 	add	w2, w2, 1
-	b	.L2483
-.L2581:
-	add	x2, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x25,9]
+	b	.L2524
+.L2642:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x19,9]
 	sub	w0, w0, w3
-	ldrh	w22, [x2,3324]
-	madd	w0, w1, w22, w0
-	uxth	w22, w0
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2486
-	ldrh	w1, [x25]
-	adrp	x0, .LC190
+	ldrh	w23, [x2,3596]
+	madd	w0, w1, w23, w0
+	uxth	w23, w0
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2527
+	ldrh	w1, [x19]
+	adrp	x0, .LC194
 	ldr	x4, [x2,600]
-	add	x0, x0, :lo12:.LC190
+	add	x0, x0, :lo12:.LC194
 	ubfiz	x3, x1, 1, 16
-	mov	w2, w22
+	mov	w2, w23
 	ldrh	w3, [x4,x3]
 	bl	printk
-.L2486:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x25]
+.L2527:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x19]
 	ldr	x0, [x0,600]
-	strh	w22, [x0,x1,lsl 1]
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 14, .L2487
-	adrp	x0, .LC191
+	strh	w23, [x0,x1,lsl 1]
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 14, .L2528
+	adrp	x0, .LC195
 	ldr	w1, [x29,144]
 	ldr	w2, [x29,148]
-	add	x0, x0, :lo12:.LC191
+	add	x0, x0, :lo12:.LC195
 	ldr	w3, [x29,152]
 	ldr	w4, [x29,156]
 	bl	printk
-.L2487:
-	add	x0, x19, :lo12:.LANCHOR0
+.L2528:
+	add	x0, x20, :lo12:.LANCHOR0
 	mov	w1, 0
-	adrp	x24, .LC192
-	mov	x23, 0
-	add	x24, x24, :lo12:.LC192
-	ldrb	w2, [x0,2832]
-	ldr	x0, [x27,8]
+	adrp	x28, .LC197
+	mov	x24, 0
+	ldrb	w2, [x0,2848]
+	ldr	x0, [x25,8]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-	adrp	x0, .LC193
-	add	x28, x0, :lo12:.LC193
-	adrp	x0, .LC194
-	add	x0, x0, :lo12:.LC194
-	str	x0, [x29,120]
-.L2488:
-	add	x22, x19, :lo12:.LANCHOR0
-	str	w23, [x29,132]
-	ldrb	w0, [x22,3300]
-	mul	w0, w26, w0
-	cmp	w23, w0
-	bcs	.L2582
-	ldr	w0, [x20,x23,lsl 2]
+	adrp	x0, .LC196
+	add	x0, x0, :lo12:.LC196
+	str	x0, [x29,112]
+	add	x0, x28, :lo12:.LC197
+	str	x0, [x29,104]
+.L2529:
+	add	x3, x20, :lo12:.LANCHOR0
+	str	w24, [x29,132]
+	ldrb	w0, [x3,3572]
+	mul	w0, w27, w0
+	cmp	w24, w0
+	bcs	.L2643
+	ldr	w0, [x21,x24,lsl 2]
 	cmn	w0, #1
-	bne	.L2489
-.L2493:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x0, [x27,24]
-	mov	w22, -1
-	ldr	x1, [x1,2864]
+	bne	.L2530
+.L2534:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x0, [x25,24]
+	ldr	x1, [x1,2880]
 	ldr	w1, [x1,8]
 	str	w1, [x0]
-	ldr	x0, [x27,24]
-	str	w22, [x0,4]
-	ldr	x0, [x27,24]
-	str	w22, [x0,8]
-	ldr	x0, [x27,24]
+	mov	w1, -1
+	mov	w23, w1
+	ldr	x0, [x25,24]
+	str	w1, [x0,4]
+	ldr	x0, [x25,24]
+	str	w1, [x0,8]
+	ldr	x0, [x25,24]
 	str	wzr, [x0,12]
-	ldr	x0, [x27,8]
+	ldr	x0, [x25,8]
 	str	wzr, [x0]
-	b	.L2490
-.L2489:
-	ldrb	w3, [x22,2832]
-	ldr	x1, [x27,8]
-	ldr	x2, [x27,24]
+	b	.L2531
+.L2530:
+	ldr	x1, [x25,8]
+	ldr	x2, [x25,24]
+	ldrb	w3, [x3,2848]
 	bl	ftl_read_ppa_page
-	mov	w22, w0
-	ldr	x0, [x27,24]
+	mov	w23, w0
+	ldr	x0, [x25,24]
 	ldr	w0, [x0,4]
 	bl	lpa_hash_get_ppa
-	mov	w4, w0
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 14, .L2491
-	ldr	x3, [x27,24]
-	mov	w1, w4
-	ldr	w2, [x20,x23,lsl 2]
-	mov	x0, x24
-	str	x4, [x29,112]
+	mov	w28, w0
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 14, .L2532
+	ldr	x3, [x25,24]
+	mov	w1, w28
+	ldr	x0, [x29,112]
+	ldr	w2, [x21,x24,lsl 2]
 	ldr	w3, [x3,4]
 	bl	printk
-	ldr	x4, [x29,112]
-.L2491:
-	ldr	w0, [x20,x23,lsl 2]
-	ldr	x2, [x27,24]
-	cmp	w4, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	csinv	w22, w22, wzr, eq
-	cmn	w22, #1
-	ldr	x1, [x0,2864]
-	ldr	w0, [x1,8]
-	add	w3, w0, 1
-	str	w3, [x1,8]
-	str	w0, [x2]
+.L2532:
+	ldr	w0, [x21,x24,lsl 2]
 	mov	w1, 1
-	ldr	x0, [x27,24]
-	str	w4, [x0,8]
-	ldr	x0, [x27,24]
+	cmp	w28, w0
+	ldr	x0, [x25,24]
+	csinv	w23, w23, wzr, eq
+	cmn	w23, #1
+	str	w28, [x0,8]
+	ldr	x0, [x25,24]
 	str	w1, [x0,12]
-	beq	.L2493
-.L2490:
+	beq	.L2534
+.L2531:
 	ldr	w0, [x29,136]
-	cbz	w0, .L2495
-.L2578:
-	ldrh	w0, [x25,6]
+	cbz	w0, .L2536
+.L2639:
+	ldrh	w0, [x19,6]
 	cmp	w0, 1
-	bls	.L2495
-	mov	x0, x25
+	bls	.L2536
+	mov	x0, x19
 	bl	ftl_get_new_free_page
-	mov	w4, w0
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 14, .L2497
-	ldr	x2, [x27,24]
-	mov	w1, w4
-	mov	x0, x28
-	str	x4, [x29,112]
+	mov	w28, w0
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 14, .L2538
+	ldr	x2, [x25,24]
+	mov	w1, w28
+	ldrh	w0, [x19,12]
+	ldrh	w3, [x19,10]
 	ldr	w2, [x2,4]
+	add	w3, w3, w0
+	ldr	x0, [x29,104]
+	sub	w3, w3, #1
 	bl	printk
-	ldr	x4, [x29,112]
-.L2497:
-	add	x3, x19, :lo12:.LANCHOR0
+.L2538:
+	add	x3, x20, :lo12:.LANCHOR0
 	ldr	w1, [x29,132]
-	ldrh	w0, [x25,6]
-	ldrb	w2, [x3,3300]
-	mul	w2, w26, w2
+	ldrh	w0, [x19,6]
+	ldrb	w2, [x3,3572]
+	mul	w2, w27, w2
 	add	w2, w2, 1
 	sub	w2, w2, w1
 	cmp	w0, w2
-	bls	.L2495
-	ldr	x1, [x27,8]
-	mov	w0, w4
-	ldr	x2, [x27,24]
-	ldrb	w3, [x3,2832]
+	bls	.L2536
+	ldr	x1, [x25,8]
+	mov	w0, w28
+	ldr	x2, [x25,24]
+	ldrb	w3, [x3,2848]
 	bl	ftl_prog_ppa_page
 	mov	w2, w0
-	ldrh	w0, [x25]
-	str	x2, [x29,112]
+	ldrh	w0, [x19]
+	str	x2, [x29,96]
 	bl	ftl_vpn_decrement
-	ldr	x2, [x29,112]
-	cmn	w22, #1
+	ldr	x2, [x29,96]
+	cmn	w23, #1
 	cset	w1, ne
 	cmn	w2, #1
-	beq	.L2498
-	cbz	w1, .L2495
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 14, .L2499
-	ldr	x2, [x27,24]
-	ldrh	w0, [x25,12]
-	ldrh	w3, [x25,10]
-	ldr	w1, [x2,4]
-	add	w3, w3, w0
+	beq	.L2539
+	cbz	w1, .L2536
+	add	x0, x29, 208
+	ldrh	w1, [x19,10]
+	str	w28, [x0,x24,lsl 2]
+	ldrh	w0, [x19,12]
+	add	w0, w1, w0
+	sub	w0, w0, #1
+	str	w0, [x26,x24,lsl 2]
+	b	.L2536
+.L2539:
+	cbnz	w1, .L2639
+.L2536:
+	add	x24, x24, 1
+	b	.L2529
+.L2643:
+	adrp	x23, .LC198
+	adrp	x24, .LC197
+	mov	x28, 0
+	add	x23, x23, :lo12:.LC198
+	add	x24, x24, :lo12:.LC197
+.L2543:
+	add	x3, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x3,3572]
+	mul	w0, w27, w0
+	cmp	w0, w28
+	bls	.L2644
+	add	x0, x29, 208
+	ldr	w0, [x0,x28,lsl 2]
+	cmn	w0, #1
+	beq	.L2545
+	ldr	w0, [x21,x28,lsl 2]
+	ldr	x1, [x25,8]
+	ldr	x2, [x25,24]
+	ldrb	w3, [x3,2848]
+	bl	ftl_read_ppa_page
+	cmp	w0, 256
+	beq	.L2555
+	cmn	w0, #1
+	bne	.L2545
+.L2555:
+	add	x3, x20, :lo12:.LANCHOR0
+	add	x0, x29, 208
+	ldr	x1, [x25,8]
+	ldr	x2, [x25,24]
+	ldr	w0, [x0,x28,lsl 2]
+	ldrb	w3, [x3,2848]
+	bl	ftl_read_ppa_page
+	mov	w4, w0
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 14, .L2548
+	ldr	x2, [x25,24]
+	mov	w1, w4
+	ldr	w3, [x21,x28,lsl 2]
+	mov	x0, x24
+	str	x4, [x29,136]
 	ldr	w2, [x2,8]
-	ldr	x0, [x29,120]
-	sub	w3, w3, #1
 	bl	printk
-.L2499:
-	ldr	x1, [x27,24]
-	ldrh	w0, [x25,12]
-	ldrh	w2, [x25,10]
-	add	w2, w2, w0
+	ldr	x4, [x29,136]
+.L2548:
+	cmn	w4, #1
+	beq	.L2545
+	ldr	x1, [x25,24]
+	ldr	w2, [x21,x28,lsl 2]
+	ldr	w0, [x1,8]
+	cmp	w2, w0
+	bne	.L2545
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 14, .L2549
+	ldr	w1, [x1,4]
+	mov	x0, x23
+	ldr	w3, [x26,x28,lsl 2]
+	bl	printk
+.L2549:
+	ldr	x1, [x25,24]
+	ldr	w2, [x26,x28,lsl 2]
 	ldr	w0, [x1,4]
-	ldr	w1, [x1,8]
-	sub	w2, w2, #1
-	bl	lpa_hash_update_ppa
-	b	.L2495
-.L2498:
-	cbnz	w1, .L2578
-.L2495:
-	add	x23, x23, 1
-	b	.L2488
-.L2582:
-	mov	x0, x27
-	bl	buf_free
-	ldrh	w1, [x22,3324]
-	ldrh	w0, [x25,12]
-	ldrb	w2, [x25,9]
+	ldr	w1, [x1,8]
+	bl	lpa_hash_update_ppa
+.L2545:
+	add	x28, x28, 1
+	b	.L2543
+.L2644:
+	mov	x0, x25
+	str	x3, [x29,136]
+	bl	zbuf_free
+	ldr	x3, [x29,136]
+	ldrb	w2, [x19,9]
+	ldrh	w0, [x19,12]
+	ldrh	w1, [x3,3596]
 	madd	w0, w1, w2, w0
-	mov	x1, -4
-	add	x0, x1, x0, sxtw 2
-	ldr	x1, [x22,3880]
+	ldr	x1, [x29,120]
+	mov	x2, -4
+	add	x0, x2, x0, sxtw 2
+	add	x1, x1, :lo12:.LANCHOR3
+	ldr	x1, [x1,-200]
 	ldr	w0, [x1,x0]
 	cmn	w0, #1
-	beq	.L2503
-	adrp	x1, .LANCHOR3
+	beq	.L2551
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1567
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1660
 	add	x1, x1, 480
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2503:
-	ldrh	w0, [x25,6]
+.L2551:
+	ldrh	w0, [x19,6]
 	cmp	w0, 1
-	bne	.L2462
-	mov	x0, x25
+	bne	.L2502
+	mov	x0, x19
 	bl	ftl_write_last_log_page
-	b	.L2462
-.L2580:
-	ldr	x0, [x1,2864]
+	b	.L2502
+.L2641:
+	ldr	x0, [x1,2880]
 	ldr	w2, [x2]
 	ldr	w1, [x0,8]
 	cmp	w2, w1
-	bls	.L2479
+	bls	.L2520
 	str	w2, [x0,8]
-.L2479:
-	ldr	x1, [x27,24]
-	ldrh	w0, [x25,10]
-	ldrh	w2, [x25,12]
+.L2520:
+	ldr	x1, [x25,24]
+	ldrh	w0, [x19,10]
+	ldrh	w2, [x19,12]
 	add	w2, w2, w0
 	ldr	w0, [x1,4]
 	ldr	w1, [x1,8]
 	bl	lpa_hash_update_ppa
-	ldr	w0, [x20,4]
-	str	w0, [x20]
-	ldr	w0, [x20,8]
-	str	w0, [x20,4]
-	ldr	w0, [x20,12]
-	str	w0, [x20,8]
+	ldr	w0, [x21,4]
+	str	w0, [x21]
+	ldr	w0, [x21,8]
+	str	w0, [x21,4]
+	ldr	w0, [x21,12]
+	str	w0, [x21,8]
 	ldr	w0, [x29,132]
-	str	w0, [x20,12]
-	b	.L2478
-.L2462:
+	str	w0, [x21,12]
+	b	.L2519
+.L2502:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 208
+	ldp	x29, x30, [sp], 336
 	ret
 	.size	ftl_open_sblk_recovery, .-ftl_open_sblk_recovery
 	.align	2
@@ -16034,10 +16690,10 @@ pm_write_page:
 	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR3
+	adrp	x22, .LANCHOR4
 	str	x27, [sp,80]
 	stp	x23, x24, [sp,48]
-	add	x22, x22, :lo12:.LANCHOR3
+	add	x22, x22, :lo12:.LANCHOR4
 	adrp	x23, .LC0
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
@@ -16046,91 +16702,91 @@ pm_write_page:
 	adrp	x25, .LANCHOR0
 	add	x23, x23, :lo12:.LC0
 	add	x22, x22, 504
-.L2584:
+.L2646:
 	add	x2, x25, :lo12:.LANCHOR0
 	adrp	x19, .LANCHOR0
-	ldr	x0, [x2,2864]
+	ldr	x0, [x2,2880]
 	ldr	w1, [x0,48]
 	ldrh	w3, [x0,696]
 	add	w1, w1, 1
 	str	w1, [x0,48]
-	ldrh	w1, [x2,3324]
+	ldrh	w1, [x2,3596]
 	cmp	w3, w1
-	bcs	.L2585
+	bcs	.L2647
 	ldrh	w1, [x0,692]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2586
-.L2585:
+	bne	.L2648
+.L2647:
 	bl	pm_alloc_new_blk
 	mov	w0, 0
 	bl	ftl_info_flush
-.L2586:
+.L2648:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	ldrh	w1, [x0,692]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2587
+	bne	.L2649
 	mov	x1, x22
-	mov	w2, 230
+	mov	w2, 263
 	mov	x0, x23
 	bl	printk
 	bl	dump_stack
-.L2587:
+.L2649:
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x20, .LANCHOR7
-	add	x27, x20, :lo12:.LANCHOR7
+	adrp	x20, .LANCHOR6
+	add	x27, x20, :lo12:.LANCHOR6
 	mov	w2, 64
-	ldr	x1, [x19,2864]
-	ldrh	w26, [x19,3362]
+	ldr	x1, [x19,2880]
+	ldrh	w26, [x19,3634]
 	ldrh	w0, [x1,692]
 	ldrh	w1, [x1,696]
 	madd	w26, w0, w26, w1
-	ldr	x0, [x27,-128]
+	ldr	x0, [x27,192]
 	mov	w1, 0
 	bl	ftl_memset
-	ldr	x0, [x27,-128]
+	ldr	x0, [x27,192]
 	mov	x2, x24
 	str	w21, [x0]
-	ldr	x1, [x19,2864]
-	ldr	x0, [x27,-128]
-	ldrb	w4, [x19,2832]
+	ldr	x1, [x19,2880]
+	ldr	x0, [x27,192]
+	ldrb	w4, [x19,2848]
 	ldr	w1, [x1,48]
 	str	w1, [x0,4]
 	mov	w1, w26
-	ldr	x0, [x19,2864]
-	ldr	x3, [x27,-128]
+	ldr	x0, [x19,2880]
+	ldr	x3, [x27,192]
 	ldrb	w0, [x0,694]
 	bl	ftl_prog_page
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldrh	w2, [x1,696]
 	add	w2, w2, 1
 	uxth	w2, w2
 	strh	w2, [x1,696]
 	cmp	w2, 1
-	beq	.L2588
-	ldrb	w2, [x27,-120]
-	cbz	w2, .L2589
-.L2588:
-	add	x20, x20, :lo12:.LANCHOR7
-	strb	wzr, [x20,-120]
-	b	.L2584
-.L2589:
+	beq	.L2650
+	ldrb	w2, [x27,200]
+	cbz	w2, .L2651
+.L2650:
+	add	x20, x20, :lo12:.LANCHOR6
+	strb	wzr, [x20,200]
+	b	.L2646
+.L2651:
 	cmn	w0, #1
-	bne	.L2591
-	adrp	x0, .LC195
+	bne	.L2653
+	adrp	x0, .LC199
 	mov	w1, w26
-	add	x0, x0, :lo12:.LC195
+	add	x0, x0, :lo12:.LC199
 	bl	printk
-	b	.L2584
-.L2591:
+	b	.L2646
+.L2653:
 	ldrh	w0, [x1,698]
 	cmp	w21, w0
-	bcs	.L2592
+	bcs	.L2654
 	add	x21, x1, x21, uxtw 2
 	str	w26, [x21,704]
-.L2592:
+.L2654:
 	mov	w0, 0
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -16157,12 +16813,12 @@ ftl_dump_write_open_sblk:
 	stp	x27, x28, [sp,128]
 	ldrh	w1, [x0,576]
 	cmp	w1, w23
-	bls	.L2596
-	ldrb	w1, [x0,3296]
-	cbnz	w1, .L2598
-	ldrb	w0, [x0,3282]
-	cbz	w0, .L2596
-.L2598:
+	bls	.L2658
+	ldrb	w1, [x0,3568]
+	cbnz	w1, .L2660
+	ldrb	w0, [x0,3554]
+	cbz	w0, .L2658
+.L2660:
 	add	x1, x22, :lo12:.LANCHOR0
 	ubfiz	x19, x23, 2, 16
 	mov	w27, 1
@@ -16171,15 +16827,15 @@ ftl_dump_write_open_sblk:
 	ldrb	w0, [x0,2]
 	and	w0, w0, 224
 	cmp	w0, 160
-	bne	.L2599
-	ldrb	w27, [x1,3281]
-.L2599:
+	bne	.L2661
+	ldrb	w27, [x1,3553]
+.L2661:
 	add	x24, x29, 128
 	mov	w0, w23
 	add	x1, x24, 16
 	strh	w23, [x29,128]
 	mov	w21, 0
-	adrp	x25, .LC197
+	adrp	x25, .LC201
 	bl	ftl_get_blk_list_in_sblk
 	uxtb	w0, w0
 	add	x1, x22, :lo12:.LANCHOR0
@@ -16188,8 +16844,8 @@ ftl_dump_write_open_sblk:
 	mov	w20, w21
 	strb	wzr, [x29,133]
 	mov	w26, w21
-	ldrh	w2, [x1,3324]
-	add	x25, x25, :lo12:.LC197
+	ldrh	w2, [x1,3596]
+	add	x25, x25, :lo12:.LC201
 	strh	wzr, [x29,138]
 	mul	w0, w0, w2
 	strh	w0, [x29,134]
@@ -16197,57 +16853,57 @@ ftl_dump_write_open_sblk:
 	add	x1, x0, x19
 	ldrh	w4, [x0,x19]
 	ldr	w5, [x0,x19]
-	adrp	x0, .LC196
+	adrp	x0, .LC200
 	ldrb	w3, [x1,2]
 	and	w4, w4, 2047
 	mov	w1, w23
 	ubfx	x5, x5, 11, 8
 	ubfx	x2, x3, 5, 3
-	add	x0, x0, :lo12:.LC196
+	add	x0, x0, :lo12:.LC200
 	ubfx	x3, x3, 3, 2
 	bl	printk
 	mov	w0, 1
 	bl	buf_alloc
 	mov	x19, x0
 	mov	w8, 65535
-.L2600:
+.L2662:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3324]
+	ldrh	w0, [x0,3596]
 	cmp	w0, w20
-	bls	.L2621
+	bls	.L2683
 	lsl	w28, w20, 1
 	mov	w26, 0
 	sub	w28, w28, #1
-.L2610:
+.L2672:
 	ldrb	w0, [x24,9]
 	cmp	w0, w26
-	bls	.L2625
+	bls	.L2687
 	mov	w21, 1
 	sxtw	x9, w26
-.L2609:
+.L2671:
 	cmp	w21, w27
-	bhi	.L2626
+	bhi	.L2688
 	add	x0, x9, 8
 	ldrh	w5, [x24,x0,lsl 1]
 	cmp	w5, w8
-	beq	.L2602
+	beq	.L2664
 	add	x0, x22, :lo12:.LANCHOR0
 	cmp	w27, 3
-	ldrh	w2, [x0,3362]
+	ldrh	w2, [x0,3634]
 	mul	w2, w5, w2
-	bne	.L2603
+	bne	.L2665
 	add	w2, w2, w20
 	orr	w3, w2, w21, lsl 24
-	b	.L2604
-.L2603:
+	b	.L2666
+.L2665:
 	cmp	w27, 2
 	add	w3, w2, w20
-	bne	.L2604
-	ldrb	w3, [x0,3281]
+	bne	.L2666
+	ldrb	w3, [x0,3553]
 	add	w2, w2, w28
 	add	w2, w2, w21
 	orr	w3, w2, w3, lsl 24
-.L2604:
+.L2666:
 	str	w3, [x19,40]
 	mov	w1, 1
 	mov	x0, x19
@@ -16284,108 +16940,116 @@ ftl_dump_write_open_sblk:
 	ldr	x9, [x29,104]
 	cmp	w10, 512
 	ldr	x8, [x29,96]
-	beq	.L2621
-.L2602:
+	beq	.L2683
+.L2664:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L2609
-.L2626:
+	b	.L2671
+.L2688:
 	add	w26, w26, 1
 	uxth	w26, w26
-	b	.L2610
-.L2625:
+	b	.L2672
+.L2687:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L2600
-.L2621:
-.L2606:
-	adrp	x0, .LC198
+	b	.L2662
+.L2683:
+.L2668:
+	adrp	x0, .LC202
 	mov	w4, w21
 	mov	w2, w20
 	mov	w3, w26
 	mov	w1, w23
 	mov	w25, w20
-	add	x0, x0, :lo12:.LC198
+	add	x0, x0, :lo12:.LC202
 	add	x20, x22, :lo12:.LANCHOR0
-	adrp	x21, .LC199
+	adrp	x21, .LC203
+	mov	w27, 24
 	bl	printk
-	add	x21, x21, :lo12:.LC199
-	ldrb	w2, [x20,2832]
+	add	x21, x21, :lo12:.LC203
+	ldrb	w2, [x20,2848]
 	mov	w1, 0
 	ldr	x0, [x19,8]
+	mov	w28, 1
 	lsl	w2, w2, 9
 	bl	ftl_memset
-	ldrb	w2, [x20,2832]
+	ldrb	w2, [x20,2848]
 	mov	w1, 0
 	ldr	x0, [x19,24]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L2611:
+.L2673:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3324]
+	ldrh	w0, [x0,3596]
 	cmp	w0, w25
-	bls	.L2616
+	bls	.L2678
 	lsl	w26, w25, 1
 	mov	w20, 0
-.L2617:
+.L2679:
 	ldrb	w0, [x24,9]
 	cmp	w0, w20
-	bls	.L2627
-	mov	w1, w25
-	mov	x0, x21
+	bls	.L2689
 	mov	w2, w20
+	mov	x0, x21
+	mov	w1, w25
 	bl	printk
 	add	x4, x22, :lo12:.LANCHOR0
-	sxtw	x3, w20
-	ldrb	w5, [x4,3296]
-	ldrh	w1, [x4,3362]
-	cbz	w5, .L2612
-	add	x3, x3, 8
-	ldrh	w0, [x24,x3,lsl 1]
-	mul	w1, w0, w1
+	sxtw	x0, w20
+	ldrb	w5, [x4,3568]
+	ldrh	w2, [x4,3634]
+	cbz	w5, .L2674
+	add	x0, x0, 8
+	ldrh	w0, [x24,x0,lsl 1]
+	mul	w2, w0, w2
 	mov	x0, x19
-	orr	w1, w1, w25
-	str	w1, [x19,40]
+	orr	w2, w2, w25
+	str	w2, [x19,40]
 	bl	sblk_3d_tlc_dump_prog
-	b	.L2613
-.L2612:
-	add	x3, x3, 8
-	ldrb	w0, [x4,3281]
-	cmp	w0, 2
-	ldrh	w0, [x24,x3,lsl 1]
-	mul	w1, w0, w1
-	bne	.L2614
-	orr	w1, w1, w26
+	b	.L2675
+.L2674:
+	add	x0, x0, 8
+	ldrb	w1, [x4,3553]
+	cmp	w1, 2
+	ldrh	w0, [x24,x0,lsl 1]
+	mul	w2, w0, w2
+	bne	.L2676
+	orr	w2, w2, w26
 	mov	x0, x19
-	orr	w1, w1, 33554432
-	str	w1, [x19,40]
+	orr	w2, w2, 33554432
+	str	w2, [x19,40]
 	bl	sblk_mlc_dump_prog
-	b	.L2613
-.L2614:
-	orr	w1, w1, w25
-	ldr	x2, [x19,8]
+	b	.L2675
+.L2676:
+	ldrb	w0, [x4,744]
+	orr	w2, w2, w25
+	ldrb	w4, [x4,2848]
+	sub	w1, w27, w0
+	lsl	w0, w28, w0
+	sub	w0, w0, #1
+	lsr	w3, w2, w1
+	lsl	w1, w0, w1
+	str	w2, [x19,40]
+	and	w0, w3, w0
+	bic	w1, w2, w1
 	ldr	x3, [x19,24]
-	ubfx	x0, x1, 21, 3
-	ldrb	w4, [x4,2832]
-	str	w1, [x19,40]
-	and	w1, w1, -14680065
+	ldr	x2, [x19,8]
 	bl	flash_prog_page_en
-.L2613:
+.L2675:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L2617
-.L2627:
+	b	.L2679
+.L2689:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L2611
-.L2616:
+	b	.L2673
+.L2678:
 	mov	x0, x19
-	bl	buf_free
-	adrp	x0, .LC200
+	bl	zbuf_free
+	adrp	x0, .LC204
 	mov	w1, w23
-	add	x0, x0, :lo12:.LC200
+	add	x0, x0, :lo12:.LC204
 	bl	printk
-.L2596:
+.L2658:
 	sub	sp, x29, #48
 	ldp	x19, x20, [sp,64]
 	ldp	x21, x22, [sp,80]
@@ -16397,6 +17061,273 @@ ftl_dump_write_open_sblk:
 	ret
 	.size	ftl_dump_write_open_sblk, .-ftl_dump_write_open_sblk
 	.align	2
+	.global	ftl_ink_check_sblk
+	.type	ftl_ink_check_sblk, %function
+ftl_ink_check_sblk:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	uxth	w20, w0
+	ubfiz	x24, x20, 2, 16
+	ldr	x0, [x22,584]
+	mov	w1, w20
+	ldrh	w2, [x0,x24]
+	ldr	w3, [x0,x24]
+	adrp	x0, .LC205
+	add	x0, x0, :lo12:.LC205
+	and	w2, w2, 2047
+	ubfx	x3, x3, 11, 8
+	bl	printk
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2690
+	ldrh	w0, [x22,576]
+	cmp	w0, w20
+	bls	.L2690
+	mov	w1, 0
+	mov	w0, w20
+	add	x23, x29, 112
+	bl	ftl_erase_sblk
+	strh	w20, [x29,112]
+	add	x1, x23, 16
+	mov	w0, w20
+	bl	ftl_get_blk_list_in_sblk
+	strb	w0, [x29,121]
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x19, x0
+	ldr	x0, [x22,584]
+	ldrb	w2, [x22,2848]
+	ldrh	w0, [x0,x24]
+	and	w0, w0, 2047
+	cmp	w0, 1
+	ldr	x0, [x19,8]
+	bgt	.L2692
+	mov	w1, 85
+	b	.L2707
+.L2692:
+	mov	w1, 170
+.L2707:
+	lsl	w2, w2, 9
+	mov	w22, 0
+	mov	w26, 65535
+	mov	w27, 24
+	mov	w28, 1
+	bl	ftl_memset
+	bl	sblk_wait_write_queue_completed
+.L2694:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3596]
+	cmp	w0, w22
+	bls	.L2708
+	mov	w25, 0
+.L2697:
+	ldrb	w0, [x23,9]
+	cmp	w0, w25
+	bls	.L2709
+	add	x0, x23, x25, sxtw 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w26
+	beq	.L2695
+	add	x4, x21, :lo12:.LANCHOR0
+	mov	w5, 0
+	ldrh	w2, [x4,3634]
+	madd	w2, w0, w2, w22
+	ldr	x0, [x19,8]
+	str	w2, [x0]
+	mov	w0, 65280
+	movk	w0, 0x55aa, lsl 16
+	ldr	x1, [x19,8]
+	str	w0, [x1,4]
+	ldr	x0, [x19,24]
+	str	wzr, [x0]
+	ldrb	w0, [x4,744]
+	ldrb	w4, [x4,2848]
+	sub	w1, w27, w0
+	lsl	w0, w28, w0
+	sub	w0, w0, #1
+	lsr	w3, w2, w1
+	lsl	w1, w0, w1
+	and	w0, w3, w0
+	bic	w1, w2, w1
+	ldr	x3, [x19,24]
+	ldr	x2, [x19,8]
+	bl	flash_prog_page_en
+.L2695:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L2697
+.L2709:
+	add	w22, w22, 1
+	uxth	w22, w22
+	b	.L2694
+.L2708:
+	mov	w22, 0
+	mov	w26, 65535
+	mov	w27, -1
+.L2698:
+	add	x25, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x25,3596]
+	cmp	w0, w22
+	bls	.L2710
+	mov	w25, 0
+.L2703:
+	ldrb	w0, [x23,9]
+	cmp	w0, w25
+	bls	.L2711
+	sxtw	x28, w25
+	add	x28, x28, 8
+	ldrh	w0, [x23,x28,lsl 1]
+	cmp	w0, w26
+	beq	.L2700
+	add	x1, x21, :lo12:.LANCHOR0
+	ldrh	w2, [x1,3634]
+	mov	w1, 1
+	madd	w2, w0, w2, w22
+	str	w2, [x19,40]
+	mov	x0, x19
+	str	x2, [x29,104]
+	bl	sblk_read_page
+	ldr	x0, [x19,8]
+	ldr	x2, [x29,104]
+	ldr	w0, [x0]
+	cmp	w0, w2
+	beq	.L2700
+	mov	w0, w2
+	bl	ftl_mask_bad_block
+	strh	w27, [x23,x28,lsl 1]
+.L2700:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L2703
+.L2711:
+	add	w22, w22, 1
+	uxth	w22, w22
+	b	.L2698
+.L2710:
+	mov	x0, x19
+	bl	zbuf_free
+	ldr	x0, [x25,584]
+	mov	w1, w20
+	ldrh	w2, [x0,x24]
+	ldr	w3, [x0,x24]
+	adrp	x0, .LC206
+	add	x0, x0, :lo12:.LC206
+	and	w2, w2, 2047
+	ubfx	x3, x3, 11, 8
+	bl	printk
+.L2690:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	ftl_ink_check_sblk, .-ftl_ink_check_sblk
+	.align	2
+	.global	ftl_open_sblk_init
+	.type	ftl_open_sblk_init, %function
+ftl_open_sblk_init:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LC121
+	adrp	x24, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	mov	w22, w1
+	mov	x25, x24
+	add	x26, x0, 16
+	adrp	x27, .LANCHOR3
+	add	x21, x21, :lo12:.LC121
+.L2713:
+.L2717:
+	mov	w0, w22
+	bl	ftl_alloc_sblk
+	uxth	w23, w0
+	add	x2, x24, :lo12:.LANCHOR0
+	mov	w28, w23
+	uxtw	x20, w23
+	ldr	x1, [x2,2880]
+	ldrh	w1, [x1,150]
+	cbz	w1, .L2714
+	lsl	x1, x20, 2
+	ldr	x2, [x2,584]
+	ldrh	w1, [x2,x1]
+	and	w1, w1, 2047
+	cmp	w1, 2
+	bgt	.L2714
+	bl	ftl_ink_check_sblk
+.L2714:
+	mov	w1, 0
+	mov	w0, w28
+	bl	ftl_erase_sblk
+	mov	x1, x26
+	mov	w0, w28
+	bl	ftl_get_blk_list_in_sblk
+	strh	w28, [x19]
+	add	x2, x25, :lo12:.LANCHOR0
+	uxtb	w0, w0
+	strb	w0, [x19,9]
+	cmp	w22, 2
+	strh	wzr, [x19,2]
+	mov	w3, 0
+	ldrh	w1, [x2,3596]
+	strb	wzr, [x19,5]
+	strh	wzr, [x19,10]
+	mul	w0, w1, w0
+	strh	w0, [x19,6]
+	strb	w22, [x19,4]
+	beq	.L2715
+	ldrb	w3, [x2,3572]
+	mul	w3, w1, w3
+	uxth	w3, w3
+.L2715:
+	add	x28, x25, :lo12:.LANCHOR0
+	add	x0, x27, :lo12:.LANCHOR3
+	strh	w3, [x19,12]
+	lsl	x20, x20, 1
+	ldrb	w2, [x28,3572]
+	ldr	x0, [x0,-200]
+	add	x0, x0, x3, uxth 2
+	mul	w2, w1, w2
+	mov	w1, 255
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldr	x0, [x28,600]
+	ldrh	w1, [x19,6]
+	strh	w1, [x0,x20]
+	ldrb	w0, [x19,9]
+	cbnz	w0, .L2712
+	mov	w1, w23
+	mov	x0, x21
+	bl	printk
+	ldr	x0, [x28,600]
+	mov	w1, -1
+	strh	w1, [x0,x20]
+	mov	w0, 7
+	strb	w0, [x19,4]
+	b	.L2717
+.L2712:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_open_sblk_init, .-ftl_open_sblk_init
+	.align	2
 	.global	flash_info_flush
 	.type	flash_info_flush, %function
 flash_info_flush:
@@ -16409,32 +17340,32 @@ flash_info_flush:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	tbz	x0, 12, .L2629
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
+	tbz	x0, 12, .L2723
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
 	mov	w1, 324
 	add	x2, x2, 520
 	bl	printk
-.L2629:
-	adrp	x22, .LANCHOR7
+.L2723:
+	adrp	x22, .LANCHOR6
 	adrp	x23, .LANCHOR0
-	add	x0, x22, :lo12:.LANCHOR7
+	add	x0, x22, :lo12:.LANCHOR6
 	mov	w1, 0
 	mov	w2, 64
 	add	x19, x23, :lo12:.LANCHOR0
-	adrp	x24, .LC202
-	adrp	x25, .LC203
-	ldr	x0, [x0,-112]
+	adrp	x24, .LC208
+	adrp	x25, .LC209
+	ldr	x0, [x0,208]
 	mov	w26, 0
-	add	x24, x24, :lo12:.LC202
-	adrp	x27, .LANCHOR4
-	add	x25, x25, :lo12:.LC203
+	add	x24, x24, :lo12:.LC208
+	adrp	x27, .LANCHOR3
+	add	x25, x25, :lo12:.LC209
 	bl	ftl_memset
 	ldr	x1, [x19,728]
-	adrp	x0, .LC201
-	add	x0, x0, :lo12:.LC201
+	adrp	x0, .LC207
+	add	x0, x0, :lo12:.LC207
 	mov	w2, 4
 	mov	w3, 16
 	bl	rknand_print_hex
@@ -16443,84 +17374,84 @@ flash_info_flush:
 	ldr	w1, [x19,8]
 	bl	js_hash
 	str	w0, [x19,12]
-.L2630:
-	add	x21, x22, :lo12:.LANCHOR7
+.L2724:
+	add	x21, x22, :lo12:.LANCHOR6
 	add	x28, x23, :lo12:.LANCHOR0
 	mov	x0, x24
-	ldrb	w20, [x21,-104]
-	ldrh	w19, [x21,-102]
+	ldrb	w20, [x21,216]
+	ldrh	w19, [x21,218]
 	ldrh	w3, [x28,2]
 	mov	w1, w20
 	mov	w2, w19
 	str	x3, [x29,104]
 	bl	printk
-	add	x1, x27, :lo12:.LANCHOR4
-	ldrh	w0, [x21,-102]
+	add	x1, x27, :lo12:.LANCHOR3
+	ldrh	w0, [x21,218]
 	ldr	x3, [x29,104]
-	ldrh	w1, [x1,1108]
+	ldrh	w1, [x1,1380]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L2631
+	blt	.L2725
 	ldr	x1, [x28,728]
-	strh	wzr, [x21,-102]
+	strh	wzr, [x21,218]
 	ldr	w0, [x1,4]
 	add	w0, w0, 1
 	str	w0, [x1,4]
-	ldrb	w0, [x21,-104]
+	ldrb	w0, [x21,216]
 	ldr	x19, [x28,728]
-	ldrb	w1, [x21,-103]
-	strb	w0, [x21,-103]
+	ldrb	w1, [x21,217]
+	strb	w0, [x21,217]
 	mov	x0, x19
-	strb	w1, [x21,-104]
+	strb	w1, [x21,216]
 	ldrh	w1, [x19,16]
 	add	w1, w1, 1
 	strh	w1, [x0,16]!
 	ldr	w1, [x19,8]
 	bl	js_hash
 	str	w0, [x19,12]
-	ldrb	w1, [x21,-104]
+	ldrb	w1, [x21,216]
 	mov	w0, 0
 	ldrh	w19, [x28,2]
 	mul	w19, w1, w19
-	b	.L2639
-.L2631:
+	b	.L2733
+.L2725:
 	madd	w19, w20, w3, w19
-	cbnz	w0, .L2632
-.L2639:
+	cbnz	w0, .L2726
+.L2733:
 	mov	w1, w19
 	bl	flash_erase_block
-.L2632:
+.L2726:
 	add	x2, x23, :lo12:.LANCHOR0
-	add	x20, x22, :lo12:.LANCHOR7
+	add	x20, x22, :lo12:.LANCHOR6
 	mov	w4, 4
 	mov	w5, 1
 	ldr	x1, [x2,728]
-	ldr	x0, [x20,-112]
+	ldr	x0, [x20,208]
 	ldr	w1, [x1,4]
 	str	w1, [x0]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
-	ldr	x1, [x20,-112]
+	ldr	x1, [x20,208]
 	str	w0, [x1,4]
 	mov	w1, w19
 	mov	w0, 0
 	ldr	x2, [x2,728]
-	ldr	x3, [x20,-112]
+	ldr	x3, [x20,208]
 	bl	flash_prog_page_en
 	cmn	w0, #1
-	ldrh	w1, [x20,-102]
+	ldrh	w1, [x20,218]
 	add	w1, w1, 1
-	strh	w1, [x20,-102]
-	bne	.L2633
+	strh	w1, [x20,218]
+	bne	.L2727
 	mov	x0, x25
 	mov	w1, w19
 	bl	printk
-	b	.L2630
-.L2633:
-	cbnz	w26, .L2640
+	b	.L2724
+.L2727:
+	cbnz	w26, .L2734
 	mov	w26, 1
-	b	.L2630
-.L2640:
+	b	.L2724
+.L2734:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -16543,150 +17474,150 @@ flash_info_blk_init:
 	stp	x23, x24, [sp,48]
 	str	x25, [sp,64]
 	adrp	x20, .LANCHOR0
-	tbz	x0, 12, .L2642
+	tbz	x0, 12, .L2736
 	add	x4, x20, :lo12:.LANCHOR0
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC204
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC204
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC210
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC210
 	mov	w1, 50
 	ldr	x4, [x4,728]
 	add	x2, x2, 544
 	mov	w3, 2048
 	bl	printk
-.L2642:
+.L2736:
 	mov	w23, 4
-	adrp	x24, .LANCHOR7
-.L2645:
+	adrp	x24, .LANCHOR6
+.L2739:
 	add	x19, x20, :lo12:.LANCHOR0
-	add	x21, x24, :lo12:.LANCHOR7
+	add	x21, x24, :lo12:.LANCHOR6
 	mov	w0, 0
 	mov	w4, 4
-	adrp	x22, .LANCHOR7
+	adrp	x22, .LANCHOR6
 	ldrh	w1, [x19,2]
 	ldr	x2, [x19,728]
-	ldr	x3, [x21,-112]
+	ldr	x3, [x21,208]
 	mul	w1, w23, w1
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L2643
+	beq	.L2737
 	ldr	x2, [x19,728]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
 	ldr	w1, [x2]
 	cmp	w1, w0
-	beq	.L2644
-.L2643:
+	beq	.L2738
+.L2737:
 	add	w23, w23, 1
 	cmp	w23, 16
-	bne	.L2645
-.L2670:
+	bne	.L2739
+.L2764:
 	mov	w0, -1
-	b	.L2669
-.L2644:
+	b	.L2763
+.L2738:
 	ldrb	w1, [x2,36]
 	mov	w4, 4
 	ldrh	w3, [x19,2]
-	strb	w1, [x21,-104]
+	strb	w1, [x21,216]
 	ldrb	w0, [x2,37]
 	mul	w1, w1, w3
-	ldr	x3, [x21,-112]
-	strb	w0, [x21,-103]
+	ldr	x3, [x21,208]
+	strb	w0, [x21,217]
 	mov	w0, 0
 	mov	w21, 0
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L2647
+	beq	.L2741
 	ldr	x0, [x19,728]
 	mov	w1, 21321
 	movk	w1, 0x5359, lsl 16
 	mov	w21, 0
 	ldr	w2, [x0]
 	cmp	w2, w1
-	bne	.L2647
+	bne	.L2741
 	ldr	w21, [x0,4]
-.L2647:
-	add	x19, x22, :lo12:.LANCHOR7
+.L2741:
+	add	x19, x22, :lo12:.LANCHOR6
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	mov	w4, 4
-	ldrb	w2, [x19,-103]
+	ldrb	w2, [x19,217]
 	ldrh	w1, [x23,2]
-	ldr	x3, [x19,-112]
+	ldr	x3, [x19,208]
 	mul	w1, w2, w1
 	ldr	x2, [x23,728]
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L2648
+	beq	.L2742
 	ldr	x0, [x23,728]
 	mov	w1, 21321
 	movk	w1, 0x5359, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	bne	.L2648
+	bne	.L2742
 	ldr	w1, [x0,4]
 	cmp	w21, w1
-	bcs	.L2648
+	bcs	.L2742
 	ldrb	w1, [x0,37]
 	ldrb	w0, [x0,36]
-	strb	w1, [x19,-104]
-	strb	w0, [x19,-103]
-.L2648:
-	add	x19, x22, :lo12:.LANCHOR7
+	strb	w1, [x19,216]
+	strb	w0, [x19,217]
+.L2742:
+	add	x19, x22, :lo12:.LANCHOR6
 	add	x21, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	mov	w4, 4
-	ldrb	w1, [x19,-104]
+	ldrb	w1, [x19,216]
 	ldr	x2, [x21,728]
-	ldr	x3, [x19,-112]
+	ldr	x3, [x19,208]
 	bl	flash_get_last_written_page
 	ldrh	w23, [x21,2]
-	ldrb	w1, [x19,-104]
+	ldrb	w1, [x19,216]
 	uxth	w24, w0
 	add	w0, w24, 1
 	mov	w21, 0
-	strh	w0, [x19,-102]
+	strh	w0, [x19,218]
 	mul	w23, w1, w23
-.L2649:
+.L2743:
 	sub	w19, w24, w21
 	sxth	w19, w19
-	tbnz	w19, #31, .L2671
+	tbnz	w19, #31, .L2765
 	add	x25, x20, :lo12:.LANCHOR0
-	add	x3, x22, :lo12:.LANCHOR7
+	add	x3, x22, :lo12:.LANCHOR6
 	mov	w0, 0
 	add	w1, w19, w23
 	mov	w4, 4
 	ldr	x2, [x25,728]
-	ldr	x3, [x3,-112]
+	ldr	x3, [x3,208]
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L2650
+	beq	.L2744
 	ldr	x0, [x25,728]
 	ldr	w1, [x0]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
 	cmp	w1, w0
-	beq	.L2651
-.L2650:
+	beq	.L2745
+.L2744:
 	add	w21, w21, 1
-	b	.L2649
-.L2671:
+	b	.L2743
+.L2765:
 	cmn	w19, #1
-	bne	.L2651
+	bne	.L2745
 	add	x20, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC205
-	add	x0, x0, :lo12:.LC205
+	adrp	x0, .LC211
+	add	x0, x0, :lo12:.LC211
 	ldr	x1, [x20,728]
 	ldr	w1, [x1]
 	bl	printk
-	b	.L2670
-.L2651:
+	b	.L2764
+.L2745:
 	cmp	w21, 1
 	mov	w0, 0
-	bls	.L2669
+	bls	.L2763
 	bl	flash_info_flush
 	mov	w0, 0
-.L2669:
+.L2763:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -16706,107 +17637,109 @@ nand_flash_init:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	str	x25, [sp,64]
-	tbz	x0, 12, .L2673
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
-	mov	w1, 2490
+	stp	x25, x26, [sp,64]
+	tbz	x0, 12, .L2767
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
+	mov	w1, 2578
 	add	x2, x2, 568
 	bl	printk
-.L2673:
-	adrp	x21, .LANCHOR4
+.L2767:
+	adrp	x21, .LANCHOR3
 	mov	x0, x19
-	add	x23, x21, :lo12:.LANCHOR4
+	add	x23, x21, :lo12:.LANCHOR3
 	adrp	x19, .LANCHOR0
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w25, 44
-	str	wzr, [x23,1236]
+	add	x24, x22, 760
+	str	wzr, [x23,1516]
 	bl	nandc_init
-	add	x1, x20, :lo12:.LANCHOR2
 	mov	w0, 1
+	add	x1, x20, :lo12:.LANCHOR2
 	add	x1, x1, 8
 	strb	w0, [x22,633]
+	mov	w0, 3
 	str	x1, [x22,624]
-	add	x0, x22, 736
+	strb	w0, [x22,744]
 	mov	w1, 0
 	mov	w2, 8
-	add	x22, x22, 748
+	add	x0, x22, 736
 	bl	ftl_memset
-	mov	x24, x22
-	add	x0, x23, 1112
+	add	x0, x23, 1384
 	mov	w1, 0
 	mov	w2, 32
 	mov	w23, 0
 	bl	ftl_memset
-.L2679:
+.L2773:
 	mov	w0, w23
-	mov	x1, x22
+	mov	x1, x24
 	bl	flash_read_id
-	cbnz	w23, .L2674
-	ldrb	w0, [x24]
+	cbnz	w23, .L2768
+	ldrb	w0, [x22,760]
+	add	x1, x22, 760
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bls	.L2675
-.L2677:
+	bls	.L2769
+.L2771:
 	mov	w22, -2
-	b	.L2749
-.L2675:
-	ldrb	w0, [x24,1]
+	b	.L2845
+.L2769:
+	ldrb	w0, [x1,1]
 	cmp	w0, 255
-	beq	.L2677
-.L2674:
-	ldrb	w0, [x22]
+	beq	.L2771
+.L2768:
+	ldrb	w0, [x24]
 	cmp	w0, 181
-	bne	.L2678
-	strb	w25, [x22]
-.L2678:
+	bne	.L2772
+	strb	w25, [x24]
+.L2772:
 	add	w23, w23, 1
-	add	x22, x22, 8
+	add	x24, x24, 8
 	uxtb	w23, w23
 	cmp	w23, 4
-	bne	.L2679
+	bne	.L2773
 	add	x23, x20, :lo12:.LANCHOR2
 	add	x24, x19, :lo12:.LANCHOR0
 	add	x23, x23, 440
 	mov	w22, 0
-	add	x24, x24, 748
-.L2682:
+	add	x24, x24, 760
+.L2776:
 	ldrb	w2, [x23]
 	add	x0, x23, 1
 	mov	x1, x24
 	bl	flash_mem_cmp8
-	cbnz	w0, .L2680
+	cbnz	w0, .L2774
 	add	x1, x20, :lo12:.LANCHOR2
 	ubfiz	x22, x22, 5, 32
 	add	x0, x1, 440
 	adds	x22, x0, x22
-	beq	.L2677
+	beq	.L2771
 	ldrb	w3, [x22,22]
 	mov	x0, 0
-	b	.L2684
-.L2680:
+	b	.L2778
+.L2774:
 	add	w22, w22, 1
 	add	x23, x23, 32
-	cmp	w22, 38
-	bne	.L2682
-	b	.L2677
-.L2684:
+	cmp	w22, 44
+	bne	.L2776
+	b	.L2771
+.L2778:
 	add	x4, x1, x0, lsl 5
 	mov	w2, w0
-	ldrb	w4, [x4,1656]
+	ldrb	w4, [x4,1848]
 	cmp	w4, w3
-	beq	.L2683
+	beq	.L2777
 	add	x0, x0, 1
 	cmp	x0, 4
-	bne	.L2684
+	bne	.L2778
 	mov	w2, w0
-.L2683:
+.L2777:
 	add	x23, x20, :lo12:.LANCHOR2
 	add	x24, x19, :lo12:.LANCHOR0
-	add	x1, x23, 1656
+	add	x1, x23, 1848
 	ubfiz	x2, x2, 5, 32
 	add	x1, x1, x2
 	add	x0, x24, 640
@@ -16819,136 +17752,165 @@ nand_flash_init:
 	bl	ftl_memcpy
 	ldrb	w0, [x24,516]
 	cmp	w0, 8
-	bhi	.L2685
-	ldrb	w1, [x23,20]
-	cmp	w1, 60
-	bls	.L2686
-	mov	w1, 60
-	strb	w1, [x23,20]
-.L2686:
-	cmp	w0, 8
-	bne	.L2685
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,748]
-	cmp	w0, 137
-	beq	.L2715
-	cmp	w0, 44
-	beq	.L2715
-.L2685:
+	bhi	.L2779
+	ldrb	w0, [x23,20]
+	cmp	w0, 60
+	bls	.L2779
+	mov	w0, 60
+	strb	w0, [x23,20]
+.L2779:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2688
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
-	mov	w1, 2515
+	tbz	x0, 12, .L2810
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
+	mov	w1, 2600
 	add	x2, x2, 568
 	bl	printk
-.L2688:
-	add	x24, x21, :lo12:.LANCHOR4
+.L2810:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x0,624]
+	ldrh	w1, [x1,10]
+	cmp	w1, 2304
+	bne	.L2780
+	mov	w1, 2
+	strb	w1, [x0,744]
+.L2780:
+	add	x24, x21, :lo12:.LANCHOR3
 	mov	w0, 16384
 	add	x22, x19, :lo12:.LANCHOR0
-	adrp	x23, .LANCHOR7
+	adrp	x23, .LANCHOR6
 	bl	ftl_malloc
-	add	x25, x20, :lo12:.LANCHOR2
-	str	x0, [x24,1248]
+	add	x25, x23, :lo12:.LANCHOR6
+	str	x0, [x24,1528]
 	mov	w0, 16384
+	add	x26, x20, :lo12:.LANCHOR2
 	bl	ftl_malloc
-	str	x0, [x24,1208]
+	str	x0, [x24,1488]
 	mov	w0, 2048
 	bl	ftl_malloc
 	str	x0, [x22,728]
 	mov	w0, 64
 	bl	ftl_malloc
-	str	x0, [x24,1256]
+	str	x0, [x24,1536]
 	mov	w0, 64
 	bl	ftl_malloc
-	str	x0, [x24,1224]
+	str	x0, [x24,1504]
 	mov	w0, 64
 	bl	ftl_malloc
-	add	x1, x23, :lo12:.LANCHOR7
-	str	x0, [x1,-112]
-	strb	wzr, [x1,-100]
+	strb	wzr, [x25,220]
+	str	x0, [x25,208]
 	bl	flash_die_info_init
-	ldrb	w0, [x25,26]
+	ldrb	w0, [x26,26]
 	bl	flash_lsb_page_tbl_build
-	ldrb	w0, [x25,28]
+	ldrb	w0, [x26,28]
 	bl	nandc_bch_sel
-	str	xzr, [x24,1240]
-	ldr	x1, [x22,624]
-	ldrh	w0, [x1,16]
-	ldrb	w1, [x1,28]
-	ubfx	x2, x0, 8, 3
-	strb	w2, [x22,780]
-	ubfx	x2, x0, 3, 1
-	strb	w2, [x24,1264]
-	ubfx	x2, x0, 4, 1
-	strb	w2, [x22,781]
-	ubfx	x2, x0, 12, 1
-	strb	w2, [x22,3296]
-	ubfx	x2, x0, 13, 1
-	strb	w2, [x22,3282]
-	ubfx	x2, x0, 14, 1
+	str	xzr, [x24,1520]
+	ldr	x2, [x22,624]
+	ldrh	w0, [x2,16]
+	ubfx	x1, x0, 8, 3
+	strb	w1, [x22,792]
+	ubfx	x1, x0, 3, 1
+	strb	w1, [x24,1544]
+	ubfx	x1, x0, 4, 1
+	strb	w1, [x22,793]
+	ubfx	x1, x0, 12, 1
+	strb	w1, [x22,3568]
+	ubfx	x1, x0, 13, 1
+	strb	w1, [x22,3554]
+	ubfx	x1, x0, 11, 1
+	strb	w1, [x22,756]
+	ldrb	w1, [x2,31]
+	ldrb	w2, [x2,28]
+	ubfx	x3, x1, 1, 1
+	ubfx	x1, x1, 2, 1
+	strb	w1, [x25,222]
+	ubfx	x1, x0, 14, 1
+	strb	w1, [x22,1]
 	lsr	w0, w0, 15
-	strb	w0, [x22,3283]
+	ldrb	w1, [x22,516]
+	strb	w0, [x22,3555]
 	mov	w0, 60
+	strb	w3, [x25,221]
+	cmp	w1, 9
+	strb	w2, [x19,#:lo12:.LANCHOR0]
 	strb	w0, [x22,632]
-	ldrb	w0, [x22,516]
-	strb	w2, [x22,1]
-	strb	w1, [x19,#:lo12:.LANCHOR0]
-	cmp	w0, 9
-	bne	.L2689
+	bne	.L2781
 	mov	w0, 70
 	strb	w0, [x22,632]
-.L2689:
+.L2781:
 	add	x0, x19, :lo12:.LANCHOR0
-	strb	w1, [x0,634]
-	add	x1, x20, :lo12:.LANCHOR2
-	ldrb	w1, [x1,15]
-	cmp	w1, 9
-	bne	.L2690
+	strb	w2, [x0,634]
+	add	x2, x20, :lo12:.LANCHOR2
+	ldrb	w2, [x2,15]
+	cmp	w2, 9
+	bne	.L2782
 	strb	wzr, [x0,634]
-.L2690:
+.L2782:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x0,39]
+	tbz	x0, 0, .L2783
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 3
+	strb	w2, [x0,634]
+.L2783:
+	cmp	w1, 8
+	bne	.L2784
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,760]
+	cmp	w0, 137
+	beq	.L2811
+	cmp	w0, 44
+	bne	.L2784
+.L2811:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x0,36]
+	cmp	w0, 3
+	bne	.L2784
+	add	x0, x19, :lo12:.LANCHOR0
+	strb	wzr, [x0,634]
+.L2784:
 	add	x1, x20, :lo12:.LANCHOR2
 	add	x2, x19, :lo12:.LANCHOR0
 	add	x1, x1, 8
 	ldrb	w0, [x1,19]
 	ldrh	w1, [x1,16]
 	strb	w0, [x2,725]
-	tbz	x1, 6, .L2692
+	tbz	x1, 6, .L2787
 	sub	w1, w0, #17
 	cmp	w0, 21
 	cset	w2, eq
 	uxtb	w1, w1
 	cmp	w1, 2
-	bls	.L2716
-	cbz	w2, .L2693
-.L2716:
-	add	x0, x21, :lo12:.LANCHOR4
+	bls	.L2812
+	cbz	w2, .L2788
+.L2812:
+	add	x0, x21, :lo12:.LANCHOR3
 	adrp	x1, micron_read_retrial
 	add	x1, x1, :lo12:micron_read_retrial
-	str	x1, [x0,1240]
+	str	x1, [x0,1520]
 	mov	w1, 15
-	cbz	w2, .L2751
+	cbz	w2, .L2847
 	mov	w1, 4
-	b	.L2751
-.L2693:
+	b	.L2847
+.L2788:
 	sub	w1, w0, #65
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L2717
+	bls	.L2813
 	cmp	w0, 33
-	bne	.L2697
-.L2717:
-	add	x0, x21, :lo12:.LANCHOR4
+	bne	.L2792
+.L2813:
+	add	x0, x21, :lo12:.LANCHOR3
 	adrp	x1, toshiba_read_retrial
 	add	x1, x1, :lo12:toshiba_read_retrial
 	mov	w2, 4
-	str	x1, [x0,1240]
+	str	x1, [x0,1520]
 	add	x1, x19, :lo12:.LANCHOR0
 	strb	w2, [x1,726]
-	b	.L2753
-.L2697:
+	b	.L2849
+.L2792:
 	sub	w1, w0, #67
 	uxtb	w1, w1
 	cmp	w1, 1
@@ -16956,148 +17918,140 @@ nand_flash_init:
 	cset	w2, ls
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L2718
-	cbz	w2, .L2699
-.L2718:
-	add	x3, x21, :lo12:.LANCHOR4
+	bls	.L2814
+	cbz	w2, .L2794
+.L2814:
+	add	x3, x21, :lo12:.LANCHOR3
 	adrp	x1, toshiba_read_retrial
 	add	x1, x1, :lo12:toshiba_read_retrial
 	cmp	w0, 35
-	str	x1, [x3,1240]
-	beq	.L2701
+	str	x1, [x3,1520]
+	beq	.L2796
 	cmp	w0, 68
-	beq	.L2701
+	beq	.L2796
 	mov	w0, 7
-	strb	w0, [x3,1232]
-	b	.L2702
-.L2701:
-	add	x0, x21, :lo12:.LANCHOR4
+	strb	w0, [x3,1512]
+	b	.L2797
+.L2796:
+	add	x0, x21, :lo12:.LANCHOR3
 	mov	w1, 17
-	strb	w1, [x0,1232]
-.L2702:
+	strb	w1, [x0,1512]
+.L2797:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 4
-	cbnz	w2, .L2752
+	cbnz	w2, .L2848
 	mov	w1, 5
-.L2752:
+.L2848:
 	strb	w1, [x0,726]
-	b	.L2692
-.L2699:
+	b	.L2787
+.L2794:
 	sub	w0, w0, #36
 	uxtb	w0, w0
 	cmp	w0, 1
-	bhi	.L2692
-	add	x0, x21, :lo12:.LANCHOR4
+	bhi	.L2787
+	add	x0, x21, :lo12:.LANCHOR3
 	adrp	x1, toshiba_3d_read_retrial
 	add	x1, x1, :lo12:toshiba_3d_read_retrial
-	str	x1, [x0,1240]
-.L2753:
+	str	x1, [x0,1520]
+.L2849:
 	mov	w1, 7
-.L2751:
-	strb	w1, [x0,1232]
-.L2692:
+.L2847:
+	strb	w1, [x0,1512]
+.L2787:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2704
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
-	mov	w1, 2573
+	tbz	x0, 12, .L2799
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
+	mov	w1, 2671
 	add	x2, x2, 568
 	bl	printk
-.L2704:
+.L2799:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0,672]
-	ldrb	w0, [x0,780]
-	tbz	x0, 0, .L2705
+	ldrb	w0, [x0,792]
+	tbz	x0, 0, .L2800
 	mov	w0, 4
 	bl	nandc_set_if_mode
 	mov	w0, 1
 	bl	flash_set_interface_mode
 	mov	w0, 1
-	b	.L2754
-.L2705:
+	b	.L2850
+.L2800:
 	mov	w0, 4
-.L2754:
+.L2850:
 	bl	nandc_set_if_mode
 	bl	flash_info_blk_init
 	cmn	w0, #1
 	mov	w22, w0
-	bne	.L2707
+	bne	.L2802
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2708
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
-	mov	w1, 2605
+	tbz	x0, 12, .L2803
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
+	mov	w1, 2688
 	add	x2, x2, 568
 	bl	printk
-.L2708:
+.L2803:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 17
 	ldr	x0, [x19,728]
+	strb	wzr, [x19,752]
 	strb	w1, [x0,32]
 	mov	w0, 0
 	bl	zftl_flash_exit_slc_mode
-	b	.L2749
-.L2707:
+	b	.L2845
+.L2802:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,725]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 7
-	bhi	.L2709
-	add	x21, x21, :lo12:.LANCHOR4
+	bhi	.L2804
+	add	x21, x21, :lo12:.LANCHOR3
 	adrp	x0, hynix_read_retrial
 	add	x0, x0, :lo12:hynix_read_retrial
-	str	x0, [x21,1240]
-.L2709:
+	str	x0, [x21,1520]
+.L2804:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,780]
-	tbz	x0, 2, .L2711
+	ldrb	w0, [x19,792]
+	tbz	x0, 2, .L2806
 	ldr	x0, [x19,728]
 	ldrb	w0, [x0,19]
-	cbz	w0, .L2711
-	add	x23, x23, :lo12:.LANCHOR7
+	cbz	w0, .L2806
+	add	x23, x23, :lo12:.LANCHOR6
 	ldrh	w1, [x19,2]
 	mov	w0, 0
-	ldrb	w2, [x23,-104]
+	ldrb	w2, [x23,216]
 	mul	w1, w2, w1
 	bl	flash_ddr_para_scan
 	ldrb	w0, [x19,672]
-	cbnz	w0, .L2711
+	cbnz	w0, .L2806
 	ldr	x1, [x19,728]
 	strb	w0, [x1,19]
 	bl	flash_info_flush
-.L2711:
+.L2806:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2713
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC134
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC134
-	mov	w1, 2671
+	tbz	x0, 12, .L2808
+	adrp	x2, .LANCHOR4
+	adrp	x0, .LC136
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC136
+	mov	w1, 2740
 	add	x2, x2, 568
 	bl	printk
-.L2713:
-	bl	nand_flash_print_info
+.L2808:
 	mov	w22, 0
-	b	.L2749
-.L2715:
-	add	x0, x20, :lo12:.LANCHOR2
-	add	x0, x0, 8
-	ldrb	w1, [x0,28]
-	cmp	w1, 3
-	bne	.L2685
-	strb	wzr, [x0,28]
-	b	.L2685
-.L2749:
+	bl	nand_flash_print_info
+.L2845:
 	mov	w0, w22
-	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	nand_flash_init, .-nand_flash_init
@@ -17117,22 +18071,22 @@ ftl_sysblk_dump:
 	str	x27, [sp,128]
 	mov	w21, 0
 	bl	buf_alloc
-	adrp	x23, .LC197
+	adrp	x23, .LC201
 	ldr	x26, [x0,8]
 	mov	x20, x0
 	mov	w19, w21
 	adrp	x27, .LANCHOR0
-	add	x23, x23, :lo12:.LC197
-.L2756:
+	add	x23, x23, :lo12:.LC201
+.L2852:
 	add	x3, x27, :lo12:.LANCHOR0
-	ldrh	w0, [x3,3324]
+	ldrh	w0, [x3,3596]
 	cmp	w0, w19
-	bls	.L2768
-	ldrh	w22, [x3,3362]
+	bls	.L2864
+	ldrh	w22, [x3,3634]
 	ldr	x1, [x20,8]
 	ldr	x2, [x20,24]
 	madd	w22, w24, w22, w19
-	ldrb	w3, [x3,2832]
+	ldrb	w3, [x3,2848]
 	mov	w0, w22
 	bl	ftl_read_ppa_page
 	mov	w25, w0
@@ -17158,34 +18112,34 @@ ftl_sysblk_dump:
 	ldr	w7, [x7,8]
 	bl	printk
 	cmp	w25, 512
-	beq	.L2761
+	beq	.L2857
 	cmn	w25, #1
-	bne	.L2757
-.L2761:
+	bne	.L2853
+.L2857:
 	mov	w21, 1
-.L2757:
+.L2853:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2756
-.L2768:
-	adrp	x0, .LC206
+	b	.L2852
+.L2864:
+	adrp	x0, .LC212
 	add	x1, x26, 704
-	add	x0, x0, :lo12:.LC206
+	add	x0, x0, :lo12:.LC212
 	mov	w2, 4
 	mov	w3, 32
 	bl	rknand_print_hex
 	mov	x0, x20
-	bl	buf_free
-	cbz	w21, .L2760
-	adrp	x1, .LANCHOR3
+	bl	zbuf_free
+	cbz	w21, .L2856
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1351
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1422
 	add	x1, x1, 584
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2760:
+.L2856:
 	sub	sp, x29, #48
 	mov	w0, w21
 	ldp	x19, x20, [sp,64]
@@ -17202,31 +18156,31 @@ ftl_sysblk_dump:
 	.type	dump_ftl_info, %function
 dump_ftl_info:
 	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LC207
+	adrp	x0, .LC213
 	add	x29, sp, 0
-	str	x19, [sp,16]
+	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
+	adrp	x20, .LANCHOR3
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC207
-	ldrb	w1, [x19,2834]
-	bl	printk
-	adrp	x3, .LANCHOR4
-	adrp	x0, .LC208
-	add	x3, x3, :lo12:.LANCHOR4
-	add	x0, x0, :lo12:.LC208
-	ldrb	w1, [x3,1536]
-	ldrb	w2, [x3,1537]
-	ldrh	w3, [x3,1538]
-	bl	printk
-	ldr	x2, [x19,2864]
-	adrp	x0, .LC209
-	add	x0, x0, :lo12:.LC209
+	add	x20, x20, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC213
+	ldrb	w1, [x19,2850]
+	bl	printk
+	ldrh	w3, [x20,1858]
+	adrp	x0, .LC214
+	ldrb	w1, [x20,1856]
+	add	x0, x0, :lo12:.LC214
+	ldrb	w2, [x20,1857]
+	bl	printk
+	ldr	x2, [x19,2880]
+	adrp	x0, .LC215
+	add	x0, x0, :lo12:.LC215
 	ldrh	w1, [x2,130]
 	ldrh	w2, [x2,140]
 	bl	printk
 	ldr	x1, [x19,608]
-	adrp	x0, .LC210
-	add	x0, x0, :lo12:.LC210
+	adrp	x0, .LC216
+	add	x0, x0, :lo12:.LC216
 	add	x5, x1, 16
 	ldrh	w1, [x1,16]
 	ldrh	w2, [x5,2]
@@ -17235,8 +18189,8 @@ dump_ftl_info:
 	ldrh	w5, [x5,10]
 	bl	printk
 	ldr	x1, [x19,608]
-	adrp	x0, .LC211
-	add	x0, x0, :lo12:.LC211
+	adrp	x0, .LC217
+	add	x0, x0, :lo12:.LC217
 	add	x5, x1, 48
 	ldrh	w1, [x1,48]
 	ldrh	w2, [x5,2]
@@ -17245,8 +18199,8 @@ dump_ftl_info:
 	ldrh	w5, [x5,10]
 	bl	printk
 	ldr	x1, [x19,608]
-	adrp	x0, .LC212
-	add	x0, x0, :lo12:.LC212
+	adrp	x0, .LC218
+	add	x0, x0, :lo12:.LC218
 	add	x5, x1, 80
 	ldrh	w1, [x1,80]
 	ldrh	w4, [x5,6]
@@ -17254,50 +18208,50 @@ dump_ftl_info:
 	ldrb	w3, [x5,5]
 	ldrh	w5, [x5,10]
 	bl	printk
-	ldrh	w0, [x19,3324]
+	ldrh	w0, [x19,3596]
 	mov	w2, 4
-	ldrb	w3, [x19,3300]
-	ldr	x1, [x19,3880]
+	ldrb	w3, [x19,3572]
+	ldr	x1, [x20,-200]
 	mul	w3, w0, w3
-	adrp	x0, .LC213
-	add	x0, x0, :lo12:.LC213
+	adrp	x0, .LC219
+	add	x0, x0, :lo12:.LC219
 	lsl	w3, w3, 1
 	bl	rknand_print_hex
 	ldr	x1, [x19,600]
-	adrp	x0, .LC214
+	adrp	x0, .LC220
 	ldrh	w3, [x19,576]
-	add	x0, x0, :lo12:.LC214
+	add	x0, x0, :lo12:.LC220
 	mov	w2, 2
 	bl	rknand_print_hex
-	ldr	x3, [x19,2864]
-	adrp	x0, .LC206
-	add	x0, x0, :lo12:.LC206
+	ldr	x3, [x19,2880]
+	adrp	x0, .LC212
+	add	x0, x0, :lo12:.LC212
 	mov	w2, 4
 	add	x1, x3, 704
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
 	ldr	x1, [x19,584]
-	adrp	x0, .LC215
+	adrp	x0, .LC221
 	ldrh	w3, [x19,576]
-	add	x0, x0, :lo12:.LC215
+	add	x0, x0, :lo12:.LC221
 	mov	w2, 4
 	bl	rknand_print_hex
-	adrp	x0, .LC216
-	add	x1, x19, 3368
-	add	x0, x0, :lo12:.LC216
+	adrp	x0, .LC222
+	add	x1, x19, 3640
+	add	x0, x0, :lo12:.LC222
 	mov	w2, 2
 	mov	w3, 256
 	bl	rknand_print_hex
-	ldrh	w0, [x19,3324]
+	ldrh	w0, [x19,3596]
 	mov	w2, 2
-	ldrb	w3, [x19,3300]
-	ldr	x1, [x19,3888]
+	ldrb	w3, [x19,3572]
+	ldr	x1, [x20,-192]
 	mul	w3, w0, w3
-	adrp	x0, .LC217
-	add	x0, x0, :lo12:.LC217
+	adrp	x0, .LC223
+	add	x0, x0, :lo12:.LC223
 	lsl	w3, w3, 1
 	bl	rknand_print_hex
-	ldr	x19, [sp,16]
+	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	dump_ftl_info, .-dump_ftl_info
@@ -17306,13 +18260,15 @@ dump_ftl_info:
 	.type	pm_ppa_update_check, %function
 pm_ppa_update_check:
 	adrp	x5, .LANCHOR0
-	mov	w6, 21
+	mov	w6, 24
 	add	x5, x5, :lo12:.LANCHOR0
 	mov	w7, 1
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldrh	w4, [x5,3264]
-	ldrb	w3, [x5,3266]
+	ldrb	w3, [x5,744]
+	ldrh	w4, [x5,3536]
+	sub	w6, w6, w3
+	ldrb	w3, [x5,3538]
 	sub	w6, w6, w4
 	lsr	w4, w2, w4
 	lsl	w6, w7, w6
@@ -17325,19 +18281,19 @@ pm_ppa_update_check:
 	ubfx	x3, x3, 5, 3
 	cmp	w3, 7
 	cset	w4, eq
-	cbnz	w4, .L2774
+	cbnz	w4, .L2870
 	cmp	w3, w7
-	bne	.L2771
-.L2774:
+	bne	.L2867
+.L2870:
 	mov	w3, w2
 	mov	w2, w1
 	mov	x1, x0
-	adrp	x0, .LC218
-	add	x0, x0, :lo12:.LC218
+	adrp	x0, .LC224
+	add	x0, x0, :lo12:.LC224
 	bl	printk
 	bl	dump_ftl_info
 	mov	w4, -1
-.L2771:
+.L2867:
 	mov	w0, w4
 	ldp	x29, x30, [sp], 16
 	ret
@@ -17345,131 +18301,168 @@ pm_ppa_update_check:
 	.align	2
 	.type	load_l2p_region, %function
 load_l2p_region:
-	stp	x29, x30, [sp, -80]!
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxth	x23, w1
+	str	x27, [sp,80]
 	stp	x21, x22, [sp,32]
-	uxth	w22, w1
-	str	x23, [sp,48]
 	stp	x19, x20, [sp,16]
-	cmp	w22, 31
-	uxth	w20, w0
-	bls	.L2777
-	adrp	x1, .LANCHOR3
+	stp	x25, x26, [sp,64]
+	cmp	w23, 31
+	uxth	w21, w0
+	bls	.L2873
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 31
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 32
 	add	x1, x1, 600
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2777:
-	adrp	x21, .LANCHOR0
-	adrp	x19, .LANCHOR7
-	add	x21, x21, :lo12:.LANCHOR0
-	ldr	x0, [x21,2864]
+.L2873:
+	adrp	x24, .LANCHOR0
+	adrp	x20, .LANCHOR6
+	add	x26, x24, :lo12:.LANCHOR0
+	ldr	x0, [x26,2880]
 	ldrh	w2, [x0,698]
-	cmp	w20, w2
-	bls	.L2778
-	adrp	x0, .LC219
-	mov	w1, w20
-	add	x0, x0, :lo12:.LC219
-	add	x19, x19, :lo12:.LANCHOR7
+	cmp	w21, w2
+	bls	.L2874
+	adrp	x0, .LC225
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC225
+	mov	x19, 0
+	add	x20, x20, :lo12:.LANCHOR6
 	bl	printk
-	mov	x0, 0
-	ldrh	w2, [x19,-98]
+	ldr	x0, [x19,8]
 	mov	w1, 255
-	ldr	x0, [x0,8]
+	ldrh	w2, [x20,224]
 	bl	ftl_memset
-	ldr	x0, [x21,2864]
+	ldr	x0, [x26,2880]
 	ldrh	w0, [x0,698]
-	cmp	w0, w20
-	bcs	.L2780
-	adrp	x1, .LANCHOR3
+	cmp	w0, w21
+	bcs	.L2884
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 600
-	mov	w2, 35
-	b	.L2784
-.L2778:
-	add	x0, x0, x20, sxtw 2
-	sbfiz	x22, x22, 4, 32
-	ldr	w4, [x0,704]
-	add	x0, x21, 3920
-	add	x23, x0, x22
-	strh	w20, [x0,x22]
-	strh	wzr, [x23,2]
-	cbnz	w4, .L2781
-	adrp	x0, .LC220
-	mov	w1, w20
-	mov	w2, w4
-	add	x19, x19, :lo12:.LANCHOR7
-	add	x0, x0, :lo12:.LC220
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 36
+	add	x1, x1, 600
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+	b	.L2876
+.L2874:
+	add	x0, x0, x21, sxtw 2
+	adrp	x22, .LANCHOR3
+	ldr	w19, [x0,704]
+	add	x0, x22, :lo12:.LANCHOR3
+	sub	x0, x0, #160
+	lsl	x1, x23, 4
+	add	x27, x0, x1
+	strh	w21, [x0,x1]
+	strh	wzr, [x27,2]
+	cbnz	w19, .L2877
+	adrp	x0, .LC226
+	mov	w1, w21
+	mov	w2, w19
+	add	x20, x20, :lo12:.LANCHOR6
+	add	x0, x0, :lo12:.LC226
 	bl	printk
-	ldr	x0, [x23,8]
+	ldr	x0, [x27,8]
 	mov	w1, 255
-	ldrh	w2, [x19,-98]
+	ldrh	w2, [x20,224]
 	bl	ftl_memset
-	b	.L2780
-.L2781:
-	add	x22, x19, :lo12:.LANCHOR7
-	ldrb	w3, [x21,2832]
-	ldr	x1, [x23,8]
-	mov	w0, w4
-	str	x4, [x29,72]
-	ldr	x2, [x22,-128]
+	b	.L2876
+.L2877:
+	add	x25, x20, :lo12:.LANCHOR6
+	ldrb	w3, [x26,2848]
+	ldr	x1, [x27,8]
+	mov	w0, w19
+	ldr	x2, [x25,192]
 	bl	ftl_read_ppa_page
 	mov	w3, w0
-	ldr	x0, [x22,-128]
-	ldr	x4, [x29,72]
+	ldr	x0, [x25,192]
 	ldr	w2, [x0]
-	cmp	w2, w20
-	beq	.L2782
-	adrp	x0, .LC221
-	mov	w1, w20
-	add	x0, x0, :lo12:.LC221
+	cmp	w2, w21
+	bne	.L2878
+	cmn	w3, #1
+	beq	.L2878
+	cmp	w3, 512
+	beq	.L2878
+.L2881:
+	add	x20, x20, :lo12:.LANCHOR6
+	ldr	x0, [x20,192]
+	ldr	w0, [x0]
+	cmp	w0, w21
+	beq	.L2884
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 63
+	add	x1, x1, 600
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-	ldr	x3, [x21,2864]
-	adrp	x0, .LC222
-	add	x0, x0, :lo12:.LC222
+	bl	dump_stack
+	b	.L2884
+.L2878:
+	adrp	x0, .LC227
+	mov	w4, w19
+	add	x24, x24, :lo12:.LANCHOR0
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC227
+	add	x22, x22, :lo12:.LANCHOR3
+	sub	x22, x22, #160
+	bl	printk
+	add	x22, x22, x23, lsl 4
+	ldr	x3, [x24,2880]
+	adrp	x0, .LC228
+	add	x0, x0, :lo12:.LC228
 	mov	w2, 4
 	add	x1, x3, 704
+	add	x23, x20, :lo12:.LANCHOR6
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
-	ldrb	w3, [x21,2832]
-	adrp	x0, .LC223
-	ldr	x1, [x23,8]
-	add	x0, x0, :lo12:.LC223
+	ldrb	w3, [x24,2848]
+	adrp	x0, .LC229
+	ldr	x1, [x22,8]
+	add	x0, x0, :lo12:.LC229
 	mov	w2, 4
 	lsl	w3, w3, 7
 	bl	rknand_print_hex
-	adrp	x0, .LC224
-	ldr	x1, [x22,-128]
-	add	x0, x0, :lo12:.LC224
+	ldr	x1, [x23,192]
+	adrp	x0, .LC230
+	add	x0, x0, :lo12:.LC230
 	mov	w2, 4
 	mov	w3, 16
 	bl	rknand_print_hex
-.L2782:
-	add	x19, x19, :lo12:.LANCHOR7
-	ldr	x0, [x19,-128]
-	ldr	w0, [x0]
-	cmp	w0, w20
-	beq	.L2780
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 600
-	mov	w2, 59
-.L2784:
-	bl	printk
-	bl	dump_stack
-.L2780:
-	mov	w0, 0
-	ldr	x23, [sp,48]
+	ldr	x1, [x22,8]
+	mov	w0, w19
+	ldr	x2, [x23,192]
+	mov	w19, -1
+	ldrb	w3, [x24,2848]
+	bl	ftl_read_ppa_page
+	ldr	x1, [x23,192]
+	ldr	w1, [x1]
+	cmp	w1, w21
+	bne	.L2876
+	cmp	w0, w19
+	beq	.L2883
+	cmp	w0, 512
+	bne	.L2881
+	b	.L2883
+.L2884:
+	mov	w19, 0
+	b	.L2876
+.L2883:
+	mov	w19, -1
+.L2876:
+	mov	w0, w19
+	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 80
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
 	ret
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
@@ -17478,108 +18471,126 @@ load_l2p_region:
 pm_gc:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
-	str	x25, [sp,64]
 	stp	x19, x20, [sp,16]
-	add	x20, x23, :lo12:.LANCHOR0
-	adrp	x19, .LANCHOR4
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
 	stp	x21, x22, [sp,32]
-	add	x19, x19, :lo12:.LANCHOR4
-	ldr	x0, [x20,2864]
-	ldrh	w1, [x0,688]
-	ldrh	w0, [x19,1180]
+	stp	x23, x24, [sp,48]
+	adrp	x25, .LANCHOR3
+	ldr	x0, [x0,2880]
+	add	x1, x25, :lo12:.LANCHOR3
+	ldrh	w2, [x0,688]
+	ldrh	w0, [x1,1456]
 	sub	w0, w0, #1
-	cmp	w1, w0
-	blt	.L2787
+	cmp	w2, w0
+	bge	.L2886
+	ldr	w0, [x1,1448]
+	cbz	w0, .L2887
+.L2886:
 	bl	pm_free_sblk
-	ldr	x2, [x20,2864]
-	ldrh	w1, [x19,1180]
-	ldrh	w3, [x2,688]
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x3, x25, :lo12:.LANCHOR3
+	ldr	x2, [x1,2880]
+	ldrh	w1, [x3,1456]
+	ldrh	w4, [x2,688]
 	sub	w1, w1, #1
-	cmp	w3, w1
-	blt	.L2787
+	cmp	w4, w1
+	bge	.L2888
+	ldr	w1, [x3,1448]
+	cbz	w1, .L2887
+.L2888:
+	add	x1, x25, :lo12:.LANCHOR3
 	add	x0, x2, x0, uxth 1
 	ldrh	w21, [x0,416]
-	mov	w0, 65535
-	cmp	w21, w0
-	bne	.L2789
-	adrp	x1, .LANCHOR3
+	mov	w20, 65535
+	str	wzr, [x1,1448]
+	cmp	w21, w20
+	bne	.L2890
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 131
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 162
 	add	x1, x1, 616
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
 	bl	pm_free_sblk
-	ldr	x1, [x20,2864]
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x1, [x1,2880]
 	add	x0, x1, x0, uxth 1
 	ldrh	w21, [x0,416]
-.L2789:
+	cmp	w21, w20
+	beq	.L2887
+.L2890:
 	bl	pm_select_ram_region
 	uxth	x20, w0
-	add	x0, x23, :lo12:.LANCHOR0
+	add	x0, x25, :lo12:.LANCHOR3
 	lsl	x1, x20, 4
-	add	x0, x0, 3920
+	sub	x0, x0, #160
 	mov	x22, x20
-	add	x19, x0, x1
+	add	x23, x0, x1
 	ldrh	w0, [x0,x1]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L2790
-	ldr	x1, [x19,8]
-	cbz	x1, .L2790
-	ldrsh	w2, [x19,2]
-	tbz	w2, #31, .L2790
+	beq	.L2891
+	ldr	x1, [x23,8]
+	cbz	x1, .L2891
+	ldrsh	w2, [x23,2]
+	tbz	w2, #31, .L2891
 	bl	pm_write_page
-	ldrh	w0, [x19,2]
+	ldrh	w0, [x23,2]
 	and	w0, w0, 32767
-	strh	w0, [x19,2]
-.L2790:
-	add	x23, x23, :lo12:.LANCHOR0
-	mov	w19, 0
-	add	x0, x23, 3920
-	mov	w24, 21
-	mov	w25, 1
-	add	x20, x0, x20, lsl 4
-.L2791:
-	ldr	x0, [x23,2864]
+	strh	w0, [x23,2]
+.L2891:
+	add	x25, x25, :lo12:.LANCHOR3
+	mov	w26, 0
+	sub	x25, x25, #160
+	mov	w23, 24
+	mov	w24, 1
+	add	x20, x25, x20, lsl 4
+.L2892:
+	add	x3, x19, :lo12:.LANCHOR0
+	ldr	x0, [x3,2880]
 	ldrh	w1, [x0,698]
-	cmp	w1, w19
-	bls	.L2797
-	ldrh	w1, [x23,3264]
-	add	x0, x0, x19, sxtw 2
+	cmp	w1, w26
+	bls	.L2902
+	ldrb	w2, [x3,744]
+	add	x0, x0, x26, sxtw 2
+	ldrh	w1, [x3,3536]
 	ldr	w0, [x0,704]
+	sub	w2, w23, w2
 	lsr	w0, w0, w1
-	sub	w1, w24, w1
-	lsl	w1, w25, w1
+	sub	w1, w2, w1
+	lsl	w1, w24, w1
 	sub	w1, w1, #1
 	and	w1, w0, w1
-	ldrb	w0, [x23,3266]
+	ldrb	w0, [x3,3538]
 	udiv	w1, w1, w0
 	cmp	w21, w1, uxth
-	bne	.L2792
+	bne	.L2893
+	mov	w0, w26
 	mov	w1, w22
-	mov	w0, w19
 	bl	load_l2p_region
+	cbnz	w0, .L2894
 	ldr	x1, [x20,8]
-	mov	w0, w19
+	mov	w0, w26
 	bl	pm_write_page
+.L2894:
 	mov	w0, -1
 	strh	w0, [x20]
-.L2792:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2791
-.L2797:
+.L2893:
+	add	w26, w26, 1
+	uxth	w26, w26
+	b	.L2892
+.L2902:
 	bl	pm_free_sblk
-.L2787:
+.L2887:
 	mov	w0, 0
-	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	pm_gc, .-pm_gc
@@ -17591,9 +18602,9 @@ pm_flush_id:
 	ubfiz	x0, x0, 4, 16
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	add	x1, x19, 3920
+	adrp	x19, .LANCHOR3
+	add	x19, x19, :lo12:.LANCHOR3
+	sub	x1, x19, #160
 	add	x20, x1, x0
 	ldrh	w0, [x1,x0]
 	ldr	x1, [x20,8]
@@ -17601,11 +18612,11 @@ pm_flush_id:
 	ldrh	w0, [x20,2]
 	and	w0, w0, 32767
 	strh	w0, [x20,2]
-	ldr	w0, [x19,3912]
-	cbz	w0, .L2799
+	ldr	w0, [x19,-168]
+	cbz	w0, .L2904
 	bl	pm_gc
-	str	wzr, [x19,3912]
-.L2799:
+	str	wzr, [x19,-168]
+.L2904:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -17618,20 +18629,20 @@ pm_flush:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
+	adrp	x20, .LANCHOR3
 	mov	x19, 0
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x20, x20, 3920
-.L2805:
+	add	x20, x20, :lo12:.LANCHOR3
+	sub	x20, x20, #160
+.L2910:
 	add	x1, x20, x19, lsl 4
 	uxth	w0, w19
 	ldrsh	w1, [x1,2]
-	tbz	w1, #31, .L2804
+	tbz	w1, #31, .L2909
 	bl	pm_flush_id
-.L2804:
+.L2909:
 	add	x19, x19, 1
 	cmp	x19, 32
-	bne	.L2805
+	bne	.L2910
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -17667,129 +18678,146 @@ zftl_deinit:
 	.global	pm_init
 	.type	pm_init, %function
 pm_init:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR7
 	stp	x19, x20, [sp,16]
-	add	x22, x21, :lo12:.LANCHOR7
-	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR6
+	adrp	x19, .LANCHOR3
+	stp	x21, x22, [sp,32]
+	add	x22, x20, :lo12:.LANCHOR6
+	add	x21, x19, :lo12:.LANCHOR3
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	mov	w23, w0
 	mov	w0, 1
-	strb	w0, [x22,-120]
+	strb	w0, [x22,200]
 	mov	w0, 64
-	str	wzr, [x20,3912]
-	add	x20, x20, 3920
-	bl	ftl_malloc
+	str	wzr, [x21,1448]
 	mov	w24, -1
-	str	x0, [x22,-128]
-	add	x22, x20, 512
-.L2811:
-	strh	w24, [x20]
-	strh	wzr, [x20,2]
-	cbz	w23, .L2810
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+	str	wzr, [x21,-168]
+	adrp	x25, .LANCHOR0
+	bl	ftl_malloc
+	str	x0, [x22,192]
+	sub	x22, x21, #160
+	add	x21, x21, 352
+.L2916:
+	strh	w24, [x22]
+	strh	wzr, [x22,2]
+	cbz	w23, .L2915
+	add	x0, x25, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2848]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
-	str	x0, [x20,8]
-.L2810:
-	add	x20, x20, 16
-	cmp	x20, x22
-	bne	.L2811
-	add	x20, x19, :lo12:.LANCHOR0
-	add	x21, x21, :lo12:.LANCHOR7
+	str	x0, [x22,8]
+.L2915:
+	add	x22, x22, 16
+	cmp	x22, x21
+	bne	.L2916
+	add	x0, x19, :lo12:.LANCHOR3
+	adrp	x21, .LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR0
 	mov	w4, 4
-	ldr	x1, [x20,2864]
-	ldr	x25, [x21,-128]
-	ldr	x23, [x20,3928]
+	ldr	x26, [x0,-152]
+	add	x0, x20, :lo12:.LANCHOR6
+	ldr	x1, [x22,2880]
+	mov	x2, x26
+	ldr	x25, [x0,192]
 	ldrb	w0, [x1,694]
-	mov	x3, x25
 	ldrh	w1, [x1,692]
-	mov	x2, x23
+	mov	x3, x25
 	bl	flash_get_last_written_page
-	sxth	w21, w0
-	ldr	x1, [x20,2864]
-	mov	w24, w21
+	sxth	w23, w0
+	ldr	x1, [x22,2880]
+	mov	w24, w23
 	ldrh	w2, [x1,696]
-	cmp	w2, w21
-	bgt	.L2812
-	adrp	x0, .LC225
+	cmp	w2, w23
+	bgt	.L2917
+	adrp	x0, .LC231
 	ldrh	w1, [x1,692]
-	mov	w3, w21
-	add	x0, x0, :lo12:.LC225
-	adrp	x26, .LC226
-	add	w21, w21, 1
+	add	x0, x0, :lo12:.LC231
+	mov	w3, w23
+	adrp	x27, .LC232
 	bl	printk
-	add	x26, x26, :lo12:.LC226
-	ldr	x0, [x20,2864]
-	ldrsh	w20, [x0,696]
-.L2813:
-	cmp	w20, w21
-	bge	.L2826
-	add	x27, x19, :lo12:.LANCHOR0
-	mov	x2, x23
+	add	x27, x27, :lo12:.LC232
+	ldr	x0, [x22,2880]
+	add	w5, w23, 1
+	ldrsh	w22, [x0,696]
+.L2918:
+	cmp	w22, w5
+	bge	.L2935
+	add	x23, x21, :lo12:.LANCHOR0
+	mov	x2, x26
 	mov	x3, x25
-	ldr	x0, [x27,2864]
-	ldrh	w22, [x27,3362]
-	ldrb	w4, [x27,2832]
-	ldrh	w1, [x0,692]
-	ldrb	w0, [x0,694]
-	madd	w22, w1, w22, w20
-	mov	w1, w22
+	str	x5, [x29,96]
+	ldr	x1, [x23,2880]
+	ldrh	w28, [x23,3634]
+	ldrb	w4, [x23,2848]
+	ldrh	w0, [x1,692]
+	madd	w28, w0, w28, w22
+	ldrb	w0, [x1,694]
+	mov	w1, w28
 	bl	flash_read_page_en
-	mov	w28, w0
-	ldr	x3, [x27,2864]
-	mov	x0, x26
-	mov	w2, w22
+	mov	w4, w0
+	ldr	x3, [x23,2880]
+	mov	x0, x27
+	mov	w2, w28
+	str	x4, [x29,104]
 	ldr	w1, [x3,48]
 	add	w1, w1, 1
 	str	w1, [x3,48]
 	ldrh	w3, [x3,694]
 	ldr	w1, [x25]
 	bl	printk
-	cmp	w28, 512
-	beq	.L2814
-	cmn	w28, #1
-	beq	.L2814
-	ldr	x1, [x27,2864]
+	ldr	x4, [x29,104]
+	ldr	x5, [x29,96]
+	cmp	w4, 512
+	beq	.L2919
+	cmn	w4, #1
+	beq	.L2919
+	ldr	x1, [x23,2880]
 	ldr	w0, [x25]
 	ldrh	w2, [x1,698]
 	cmp	w0, w2
-	bcs	.L2814
+	bcs	.L2919
 	add	x0, x1, x0, uxtw 2
-	str	w22, [x0,704]
-.L2814:
-	add	w20, w20, 1
-	sxth	w20, w20
-	b	.L2813
-.L2826:
-	adrp	x0, .LANCHOR5+577
+	str	w28, [x0,704]
+.L2919:
+	add	w22, w22, 1
+	sxth	w22, w22
+	b	.L2918
+.L2935:
+	adrp	x0, .LANCHOR5+897
+	add	x21, x21, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	w24, w24, 1
-	strb	w1, [x0,#:lo12:.LANCHOR5+577]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	strb	w1, [x0,#:lo12:.LANCHOR5+897]
+	ldr	x0, [x21,2880]
 	strh	w24, [x0,696]
 	bl	pm_free_sblk
-.L2812:
-	add	x19, x19, :lo12:.LANCHOR0
+.L2917:
+	add	x19, x19, :lo12:.LANCHOR3
+	add	x20, x20, :lo12:.LANCHOR6
+	mov	w1, 255
+	ldrh	w2, [x20,224]
+	ldr	x0, [x19,-152]
+	bl	ftl_memset
+	ldr	x1, [x19,-152]
 	mov	w0, -1
-	ldr	x1, [x19,3928]
 	bl	pm_write_page
-	ldr	x1, [x19,3928]
+	adrp	x0, .LANCHOR5+897
+	ldrb	w0, [x0,#:lo12:.LANCHOR5+897]
+	cbz	w0, .L2921
+	ldr	x1, [x19,-152]
 	mov	w0, -1
 	bl	pm_write_page
-	ldr	x1, [x19,3928]
+	ldr	x1, [x19,-152]
 	mov	w0, -1
 	bl	pm_write_page
-	ldr	x1, [x19,3928]
+	ldr	x1, [x19,-152]
 	mov	w0, -1
 	bl	pm_write_page
+.L2921:
 	bl	pm_free_sblk
 	bl	pm_gc
 	mov	w0, 0
@@ -17798,7 +18826,7 @@ pm_init:
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	pm_init, .-pm_init
 	.align	2
@@ -17806,112 +18834,124 @@ pm_init:
 	.type	pm_log2phys, %function
 pm_log2phys:
 	stp	x29, x30, [sp, -96]!
-	mov	w5, w0
+	mov	w3, w0
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR0
-	str	x25, [sp,64]
-	add	x3, x21, :lo12:.LANCHOR0
-	mov	x22, x1
-	stp	x19, x20, [sp,16]
+	adrp	x22, .LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
-	mov	w23, w2
-	mov	x19, 0
-	ldrb	w4, [x3,2832]
-	ldr	w2, [x3,2840]
-	add	x3, x3, 3920
-	lsl	w20, w4, 7
-	lsl	w24, w4, 7
-	cmp	w0, w2
-	udiv	w20, w0, w20
-	uxth	w25, w20
-	msub	w24, w25, w24, w0
-	uxth	x24, w24
-	bcc	.L2840
-	adrp	x0, .LC227
-	mov	w1, w5
-	add	x0, x0, :lo12:.LC227
-	bl	printk
-	mov	w0, -1
-	cbnz	w23, .L2829
-	str	w0, [x22]
-	b	.L2829
-.L2844:
-	ldrh	w0, [x3]
-	cmp	w0, w25
-	beq	.L2831
-.L2830:
-	add	w19, w19, 1
-	add	x3, x3, 16
-	uxth	x19, w19
-	cmp	w19, 32
-	beq	.L2843
-.L2840:
-	ldr	x0, [x3,8]
-	cbnz	x0, .L2844
-	b	.L2830
-.L2843:
-	bl	pm_select_ram_region
-	uxth	x19, w0
-	add	x2, x21, :lo12:.LANCHOR0
-	sbfiz	x3, x19, 4, 32
-	add	x2, x2, 3920
-	mov	w1, w0
-	add	x4, x2, x3
-	ldrh	w3, [x2,x3]
-	mov	w2, 65535
-	cmp	w3, w2
-	bne	.L2845
-.L2835:
-	adrp	x0, .LANCHOR7-96
-	strb	w19, [x0,#:lo12:.LANCHOR7-96]
-	mov	w0, w25
-	bl	load_l2p_region
-.L2831:
-	cbnz	w23, .L2832
-	add	x0, x21, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	w25, w2
+	mov	x23, x1
+	ldrb	w20, [x0,2848]
+	ldr	w2, [x0,2856]
+	lsl	w24, w20, 7
+	lsl	w20, w20, 7
+	cmp	w3, w2
+	udiv	w24, w3, w24
+	uxth	w26, w24
+	msub	w20, w26, w20, w3
+	uxth	x20, w20
+	bcc	.L2937
+	adrp	x0, .LC233
+	mov	w1, w3
+	add	x0, x0, :lo12:.LC233
+	bl	printk
+	mov	w0, -1
+	cbnz	w25, .L2938
+	str	w0, [x23]
+	b	.L2938
+.L2937:
+	adrp	x21, .LANCHOR3
+	mov	x19, 0
+	add	x1, x21, :lo12:.LANCHOR3
+	sub	x1, x1, #160
+.L2943:
+	ldr	x0, [x1,8]
+	cbz	x0, .L2939
+	ldrh	w0, [x1]
+	cmp	w0, w26
+	bne	.L2939
+.L2940:
+	cbnz	w25, .L2941
+	add	x0, x21, :lo12:.LANCHOR3
+	add	x22, x22, :lo12:.LANCHOR0
 	add	x0, x0, x19, lsl 4
-	ldr	x0, [x0,3928]
-	ldr	w0, [x0,x24,lsl 2]
-	str	w0, [x22]
-	b	.L2833
-.L2832:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w2, [x22]
-	add	x0, x0, 3920
+	ldr	x0, [x0,-152]
+	ldr	w1, [x0,x20,lsl 2]
+	mov	w0, 24
+	str	w1, [x23]
+	ldrb	w2, [x22,744]
+	sub	w0, w0, w2
+	lsr	w0, w1, w0
+	mov	w1, 1
+	lsl	w2, w1, w2
+	ldrb	w1, [x22,3636]
+	sub	w2, w2, #1
+	and	w0, w0, w2
+	cmp	w0, w1
+	bcc	.L2942
+	mov	w0, -1
+	str	w0, [x23]
+	b	.L2942
+.L2941:
+	add	x2, x21, :lo12:.LANCHOR3
+	ldr	w3, [x23]
+	sub	x0, x2, #160
 	add	x0, x0, x19, lsl 4
 	ldr	x1, [x0,8]
-	str	w2, [x1,x24,lsl 2]
+	str	w3, [x1,x20,lsl 2]
+	strb	w24, [x2,352]
 	ldrh	w1, [x0,2]
 	orr	w1, w1, -32768
 	strh	w1, [x0,2]
-	adrp	x0, .LANCHOR4+80
-	strb	w20, [x0,#:lo12:.LANCHOR4+80]
-.L2833:
-	add	x21, x21, :lo12:.LANCHOR0
+.L2942:
+	add	x21, x21, :lo12:.LANCHOR3
 	mov	w2, 32767
-	add	x21, x21, 3920
+	sub	x21, x21, #160
 	mov	w0, 0
 	add	x19, x21, x19, lsl 4
 	ldrh	w1, [x19,2]
 	and	w3, w1, 32767
 	cmp	w3, w2
-	beq	.L2829
+	beq	.L2938
 	add	w1, w1, 1
 	strh	w1, [x19,2]
-	b	.L2829
-.L2845:
+	b	.L2938
+.L2939:
+	add	w19, w19, 1
+	add	x1, x1, 16
+	uxth	x19, w19
+	cmp	w19, 32
+	bne	.L2943
+	bl	pm_select_ram_region
+	uxth	x19, w0
+	add	x2, x21, :lo12:.LANCHOR3
+	sbfiz	x3, x19, 4, 32
+	sub	x2, x2, #160
+	mov	w1, w0
+	add	x4, x2, x3
+	ldrh	w3, [x2,x3]
+	mov	w2, 65535
+	cmp	w3, w2
+	beq	.L2944
 	ldrsh	w2, [x4,2]
-	tbz	w2, #31, .L2835
+	tbz	w2, #31, .L2944
 	str	x1, [x29,88]
 	bl	pm_flush_id
 	ldr	x1, [x29,88]
-	b	.L2835
-.L2829:
+.L2944:
+	adrp	x0, .LANCHOR6+226
+	strb	w19, [x0,#:lo12:.LANCHOR6+226]
+	mov	w0, w26
+	bl	load_l2p_region
+	b	.L2940
+.L2938:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldr	x25, [sp,64]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	pm_log2phys, .-pm_log2phys
@@ -17919,374 +18959,449 @@ pm_log2phys:
 	.global	gc_recovery
 	.type	gc_recovery, %function
 gc_recovery:
-	sub	sp, sp, #192
+	sub	sp, sp, #208
 	stp	x29, x30, [sp,32]
 	add	x29, sp, 32
 	stp	x19, x20, [sp,48]
 	adrp	x19, .LANCHOR0
-	stp	x23, x24, [sp,80]
-	add	x24, x19, :lo12:.LANCHOR0
-	adrp	x23, .LANCHOR4
+	add	x20, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,64]
+	stp	x23, x24, [sp,80]
 	stp	x25, x26, [sp,96]
 	stp	x27, x28, [sp,112]
-	add	x0, x23, :lo12:.LANCHOR4
-	strb	wzr, [x24,3297]
-	ldr	x20, [x24,608]
-	strb	wzr, [x0,1146]
+	adrp	x22, .LANCHOR3
+	strb	wzr, [x20,3569]
+	ldr	x21, [x20,608]
+	add	x0, x22, :lo12:.LANCHOR3
+	add	x23, x21, 80
+	ldrh	w1, [x21,80]
+	strb	wzr, [x0,1418]
 	mov	w0, 65535
-	ldrh	w1, [x20,80]
-	add	x22, x20, 80
 	cmp	w1, w0
-	beq	.L2847
+	beq	.L2952
 	mov	w0, -1
-	strh	w0, [x20,130]
+	strh	w0, [x21,130]
 	mov	w0, 1
 	bl	buf_alloc
-	mov	x21, x0
-	ldrb	w0, [x22,9]
-	ldrh	w1, [x24,3362]
+	mov	x27, x0
+	ldrb	w0, [x23,9]
+	ldrh	w1, [x20,3634]
 	sub	w0, w0, #1
-	add	x0, x22, x0, sxtw 1
+	add	x0, x23, x0, sxtw 1
 	ldrh	w0, [x0,16]
 	mul	w0, w0, w1
-	ldrb	w1, [x24,3281]
-	str	w0, [x29,152]
+	ldrb	w1, [x20,3553]
+	str	w0, [x29,168]
+	cmp	w1, 2
+	beq	.L2953
+	ldrb	w2, [x20,756]
+	cbz	w2, .L2954
+.L2953:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x2,3570]
+	sub	w2, w2, #1
+	add	w0, w2, w0
+	orr	w0, w0, w1, lsl 24
+	b	.L3029
+.L2954:
 	cmp	w1, 3
-	bne	.L2848
-	ldrh	w1, [x24,3324]
+	bne	.L2955
+	ldrh	w1, [x20,3596]
 	sub	w1, w1, #1
 	add	w0, w1, w0
 	orr	w0, w0, 50331648
-	b	.L2891
-.L2848:
-	cmp	w1, 2
-	bne	.L2849
-	ldrh	w1, [x24,3324]
-	add	w0, w0, w1, lsl 1
-	sub	w0, w0, #1
-	orr	w0, w0, 33554432
-.L2891:
-	str	w0, [x21,40]
-.L2849:
-	mov	x0, x21
+.L3029:
+	str	w0, [x27,40]
+.L2955:
+	mov	x0, x27
 	mov	w1, 1
 	bl	sblk_read_page
-	ldr	w0, [x21,52]
+	ldr	w0, [x27,52]
 	cmp	w0, 512
-	beq	.L2850
+	beq	.L2956
 	cmn	w0, #1
-	beq	.L2850
-	ldr	x0, [x21,24]
+	cset	w26, eq
+	cbnz	w26, .L2956
+	ldr	x0, [x27,24]
 	ldr	w1, [x0]
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	cmp	w1, w0
-	beq	.L2851
-.L2850:
-	mov	x0, x21
-	bl	buf_free
-	ldr	x7, [x21,24]
-	ldr	x6, [x21,8]
+	beq	.L2957
+.L2956:
+	mov	x0, x27
+	mov	w20, 0
+	bl	zbuf_free
+	ldr	x7, [x27,24]
+	ldr	x6, [x27,8]
 	ldr	w0, [x7,4]
 	str	w0, [sp]
 	ldr	w0, [x7,8]
 	str	w0, [sp,8]
 	ldr	w0, [x7,12]
 	str	w0, [sp,16]
-	adrp	x0, .LC228
-	add	x0, x0, :lo12:.LC228
+	adrp	x0, .LC234
+	add	x0, x0, :lo12:.LC234
+	ldr	w1, [x27,40]
+	ldr	w2, [x27,52]
 	ldr	w3, [x6]
 	ldr	w4, [x6,4]
 	ldr	w5, [x6,8]
-	ldr	w1, [x21,40]
-	ldr	w2, [x21,52]
-	ldr	w6, [x6,12]
 	ldr	w7, [x7]
+	ldr	w6, [x6,12]
 	bl	printk
-	b	.L2894
-.L2851:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x21,80]
+	ldr	x1, [x0,600]
+	strh	wzr, [x1,x2,lsl 1]
+	ldr	x0, [x0,608]
+	ldrh	w1, [x21,80]
+	strh	w1, [x0,130]
+	b	.L2958
+.L2957:
 	add	x24, x19, :lo12:.LANCHOR0
-	add	x25, x23, :lo12:.LANCHOR4
-	ldr	x1, [x21,8]
-	ldrh	w0, [x24,3298]
-	ldrb	w2, [x24,3300]
+	add	x25, x22, :lo12:.LANCHOR3
+	ldr	x1, [x27,8]
+	ldrh	w0, [x24,3570]
+	ldrb	w2, [x24,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x25,1152]
+	ldr	x0, [x25,1424]
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	ldrh	w0, [x24,3298]
-	ldrb	w2, [x24,3300]
-	ldr	x1, [x21,8]
-	mul	w2, w0, w2
-	add	x1, x1, x2, sxtw 2
-	ldr	x0, [x25,1160]
-	lsl	w2, w2, 2
+	ldrb	w20, [x24,2848]
+	ldrh	w0, [x24,3570]
+	ldrb	w3, [x24,3572]
+	mul	w3, w0, w3
+	lsl	w2, w3, 2
+	cmp	w20, w3, lsr 6
+	bge	.L2959
+	ldr	x0, [x25,1432]
+	mov	w1, w26
+	lsl	w20, w20, 7
+	sub	w20, w20, w3
+	bl	ftl_memset
+	lsl	w20, w20, 2
+	ldrh	w0, [x24,3570]
+	ldrb	w1, [x24,3572]
+	ldr	x2, [x27,8]
+	mul	w1, w0, w1
+	add	x1, x2, x1, sxtw 2
+	ldr	x0, [x25,1432]
+	mov	w2, w20
 	bl	ftl_memcpy
-	ldrb	w26, [x24,3281]
-	ldrh	w25, [x24,3324]
-	cmp	w26, 2
-	bne	.L2853
-	lsl	w25, w25, 1
-	mov	w26, 1
-.L2853:
-	mov	w27, 0
-	adrp	x24, .LC229
-	add	x0, x24, :lo12:.LC229
-	mov	w28, w27
-	str	x0, [x29,120]
-	b	.L2854
-.L2896:
-	ldr	x0, [x0,1160]
-	ldr	w1, [x0,x12]
-	ldr	w0, [x7,8]
-	cmp	w1, w0
-	bne	.L2858
-.L2881:
-	add	w28, w28, 1
-	add	w9, w9, 1
-.L2862:
-	cmp	w9, w26
-	bhi	.L2895
-	ldr	x0, [x29,136]
-	add	x1, x19, :lo12:.LANCHOR0
+	mov	w10, 1
+	b	.L2960
+.L2959:
+	ldr	x0, [x25,1432]
+	mov	w20, w26
+	ldr	x1, [x27,8]
+	add	x1, x1, x3, sxtw 2
+	bl	ftl_memcpy
+	mov	w10, w26
+.L2960:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w24, [x0,3553]
+	ldrh	w26, [x0,3596]
+	cmp	w24, 2
+	bne	.L2961
+	ldrb	w0, [x0,3554]
+	cbz	w0, .L2962
+.L2961:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,756]
+	cbz	w0, .L2963
+.L2962:
+	mul	w26, w26, w24
+	mov	w24, 1
+.L2963:
+	mov	w28, 0
+	adrp	x25, .LC235
+	add	x0, x25, :lo12:.LC235
+	mov	w13, w28
+	str	x0, [x29,136]
+.L2964:
+	cmp	w28, w26
+	bcs	.L2976
+	sub	w0, w28, #1
+	mov	w25, 0
+	str	w0, [x29,148]
+.L2977:
+	ldrb	w0, [x23,9]
+	cmp	w25, w0
+	bge	.L2973
+	sxtw	x0, w25
+	mov	w11, 1
+	str	x0, [x29,152]
+.L2974:
+	cmp	w11, w24
+	bhi	.L3030
+	ldr	x0, [x29,152]
+	add	x2, x19, :lo12:.LANCHOR0
 	add	x0, x0, 8
-	ldrh	w2, [x1,3362]
-	ldrb	w1, [x1,3281]
-	ldrh	w0, [x22,x0,lsl 1]
+	ldrh	w1, [x2,3634]
+	ldrh	w0, [x23,x0,lsl 1]
+	mul	w0, w0, w1
+	ldrb	w1, [x2,3553]
+	str	w0, [x29,168]
+	cmp	w1, 2
+	beq	.L2965
+	ldrb	w2, [x2,756]
+	cbz	w2, .L2966
+.L2965:
+	ldr	w2, [x29,148]
+	add	w0, w2, w0
+	add	w0, w0, w11
+	orr	w0, w0, w1, lsl 24
+	b	.L2968
+.L2966:
 	cmp	w1, 3
-	mul	w0, w0, w2
-	str	w0, [x29,152]
-	bne	.L2855
-	add	w0, w0, w27
-	orr	w0, w0, w9, lsl 24
-.L2892:
-	str	w0, [x21,40]
+	add	w0, w0, w28
+	bne	.L2968
+	orr	w0, w0, w11, lsl 24
+.L2968:
+	str	w0, [x27,40]
 	mov	w1, 1
-	mov	x0, x21
-	str	x9, [x29,112]
+	mov	x0, x27
+	str	x10, [x29,112]
+	str	x11, [x29,120]
+	str	x13, [x29,128]
 	bl	sblk_read_page
-	add	x0, x23, :lo12:.LANCHOR4
-	sbfiz	x12, x28, 2, 32
-	ldr	x7, [x21,24]
-	ldr	x9, [x29,112]
-	ldr	x1, [x0,1152]
+	ldr	x13, [x29,128]
+	ldr	x10, [x29,112]
+	ldr	x11, [x29,120]
+	sxtw	x14, w13
+	cbz	w10, .L2969
+	add	x0, x22, :lo12:.LANCHOR3
+	lsl	x1, x14, 2
+	ldr	x0, [x0,1432]
+	ldr	w2, [x0,x1]
+	cbnz	w2, .L2969
+	ldr	x2, [x27,24]
+	ldr	w2, [x2,8]
+	str	w2, [x0,x1]
+.L2969:
+	add	x0, x22, :lo12:.LANCHOR3
+	lsl	x14, x14, 2
+	ldr	x7, [x27,24]
+	ldr	x1, [x0,1424]
 	ldr	w6, [x7,4]
-	ldr	w3, [x1,x12]
+	ldr	w3, [x1,x14]
 	cmp	w3, w6
-	beq	.L2896
-.L2858:
-	add	x13, x23, :lo12:.LANCHOR4
+	bne	.L2970
+	ldr	x0, [x0,1432]
+	ldr	w1, [x0,x14]
+	ldr	w0, [x7,8]
+	cmp	w1, w0
+	beq	.L2997
+.L2970:
+	add	x15, x22, :lo12:.LANCHOR3
 	ldr	w0, [x7,12]
-	str	x9, [x29,96]
-	str	x13, [x29,104]
-	ldr	x4, [x13,1160]
+	str	x10, [x29,96]
+	str	x11, [x29,104]
+	ldr	x4, [x15,1432]
 	str	w0, [sp]
-	ldr	x0, [x29,120]
-	ldr	w4, [x4,x12]
+	ldr	x0, [x29,136]
+	ldr	w4, [x4,x14]
 	ldr	w5, [x7]
-	ldr	w1, [x21,40]
-	ldr	w2, [x21,52]
+	ldr	w1, [x27,40]
+	ldr	w2, [x27,52]
 	ldr	w7, [x7,8]
-	str	x12, [x29,112]
-	bl	printk
-	ldr	x13, [x29,104]
-	ldr	x12, [x29,112]
-	ldr	x9, [x29,96]
-	ldr	x0, [x13,1152]
-	ldr	w0, [x0,x12]
+	str	x13, [x29,112]
+	str	x15, [x29,120]
+	str	x14, [x29,128]
+	bl	printk
+	ldr	x15, [x29,120]
+	ldr	x14, [x29,128]
+	ldr	x13, [x29,112]
+	ldr	x0, [x15,1424]
+	ldr	x11, [x29,104]
+	ldr	x10, [x29,96]
+	ldr	w0, [x0,x14]
 	cmn	w0, #1
-	beq	.L2881
-	mov	x0, x21
-	bl	buf_free
-.L2894:
+	beq	.L2997
+	mov	x0, x27
+	bl	zbuf_free
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x20,80]
-	mov	w21, 0
+	ldrh	w2, [x21,80]
 	ldr	x1, [x0,600]
 	strh	wzr, [x1,x2,lsl 1]
 	ldr	x0, [x0,608]
-	ldrh	w1, [x20,80]
+	ldrh	w1, [x21,80]
 	strh	w1, [x0,130]
-	b	.L2852
-.L2861:
-	add	w27, w27, 1
-.L2854:
-	cmp	w27, w25
-	beq	.L2863
-	sub	w0, w27, #1
-	mov	w24, 0
-	str	w0, [x29,132]
-.L2864:
-	ldrb	w0, [x22,9]
-	cmp	w24, w0
-	bge	.L2861
-	sxtw	x0, w24
-	mov	w9, 1
-	str	x0, [x29,136]
-	b	.L2862
-.L2855:
-	cmp	w1, 2
-	bne	.L2857
-	ldr	w1, [x29,132]
-	add	w0, w0, w1
-	add	w0, w0, w9
-	orr	w0, w0, 33554432
-	b	.L2892
-.L2857:
-	add	w0, w0, w27
-	b	.L2892
-.L2895:
-	add	w24, w24, 1
-	b	.L2864
-.L2863:
-	mov	x0, x21
-	mov	w21, 0
-	mov	w28, w21
-	bl	buf_free
-	str	w21, [x29,136]
+	b	.L2958
+.L2997:
+	add	w13, w13, 1
+	add	w11, w11, 1
+	b	.L2974
+.L3030:
+	add	w25, w25, 1
+	b	.L2977
+.L2973:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x22,9]
-	ldrh	w3, [x20,80]
+	ldrb	w0, [x0,3554]
+	cmp	w0, wzr
+	csinc	w28, w28, w28, eq
+	add	w28, w28, 1
+	b	.L2964
+.L2976:
+	mov	x0, x27
+	mov	w20, 0
+	mov	w28, w20
+	bl	zbuf_free
+	str	w20, [x29,152]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x23,9]
+	ldrh	w3, [x21,80]
 	ldr	x2, [x0,600]
-	ldrh	w0, [x0,3298]
+	ldrh	w0, [x0,3570]
 	mul	w0, w1, w0
 	strh	w0, [x2,x3,lsl 1]
-.L2865:
-	cmp	w28, w25
-	beq	.L2876
+.L2978:
+	cmp	w28, w26
+	bcs	.L2991
 	sub	w0, w28, #1
-	mov	w24, 0
-	str	w0, [x29,104]
-.L2877:
-	ldrb	w0, [x22,9]
-	cmp	w24, w0
-	bge	.L2874
-	sxtw	x0, w24
+	mov	w25, 0
+	str	w0, [x29,120]
+.L2992:
+	ldrb	w0, [x23,9]
+	cmp	w25, w0
+	bge	.L2988
+	sxtw	x0, w25
 	mov	w27, 1
-	str	x0, [x29,112]
-.L2875:
-	cmp	w27, w26
-	bhi	.L2897
-	add	x1, x23, :lo12:.LANCHOR4
-	ldr	w0, [x29,136]
+	str	x0, [x29,128]
+.L2989:
+	cmp	w27, w24
+	bhi	.L3031
+	add	x1, x22, :lo12:.LANCHOR3
+	ldr	w0, [x29,152]
 	sbfiz	x0, x0, 2, 32
-	ldr	x2, [x1,1152]
+	ldr	x2, [x1,1424]
 	ldr	w5, [x2,x0]
 	cmn	w5, #1
-	beq	.L2866
-	ldr	x1, [x1,1160]
-	str	x5, [x29,120]
+	beq	.L2979
+	ldr	x1, [x1,1432]
+	str	x5, [x29,136]
 	ldr	w0, [x1,x0]
-	str	w0, [x29,132]
+	str	w0, [x29,148]
 	mov	w0, w5
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,156]
+	str	w0, [x29,172]
 	cmn	w0, #1
-	ldr	x5, [x29,120]
-	bne	.L2867
+	ldr	x5, [x29,136]
+	bne	.L2980
 	mov	w0, w5
-	add	x1, x29, 156
+	add	x1, x29, 172
 	mov	w2, 0
 	bl	pm_log2phys
-	ldr	x5, [x29,120]
-.L2867:
-	ldr	x0, [x29,112]
+	ldr	x5, [x29,136]
+.L2980:
+	ldr	x0, [x29,128]
+	add	x2, x19, :lo12:.LANCHOR0
 	add	x0, x0, 8
-	ldrh	w1, [x22,x0,lsl 1]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,3362]
-	ldrb	w0, [x0,3281]
-	cmp	w0, 3
-	mul	w1, w1, w2
-	bne	.L2868
-	add	w1, w1, w28
-	orr	w1, w1, w27, lsl 24
-	b	.L2893
-.L2868:
+	ldrh	w1, [x23,x0,lsl 1]
+	ldrh	w0, [x2,3634]
+	mul	w1, w1, w0
+	ldrb	w0, [x2,3553]
 	cmp	w0, 2
-	bne	.L2870
-	ldr	w0, [x29,104]
-	add	w1, w1, w0
+	beq	.L2981
+	ldrb	w2, [x2,756]
+	cbz	w2, .L2982
+.L2981:
+	ldr	w2, [x29,120]
+	add	w1, w2, w1
 	add	w1, w1, w27
-	orr	w1, w1, 33554432
-	b	.L2893
-.L2870:
+	orr	w1, w1, w0, lsl 24
+	b	.L2984
+.L2982:
+	cmp	w0, 3
 	add	w1, w1, w28
-.L2893:
+	bne	.L2984
+	orr	w1, w1, w27, lsl 24
+.L2984:
 	add	x0, x19, :lo12:.LANCHOR0
-	str	w1, [x29,152]
-	ldr	w2, [x29,132]
-	mov	w3, 21
-	ldrh	w1, [x0,3264]
-	ldrb	w0, [x0,3266]
-	lsr	w2, w2, w1
-	sub	w1, w3, w1
-	mov	w3, 1
-	lsl	w1, w3, w1
+	ldr	w2, [x29,148]
+	str	w1, [x29,168]
+	mov	w3, 24
+	ldrh	w1, [x0,3536]
+	lsr	w6, w2, w1
+	ldrb	w2, [x0,744]
+	ldrb	w0, [x0,3538]
+	sub	w2, w3, w2
+	sub	w1, w2, w1
+	mov	w2, 1
+	lsl	w1, w2, w1
 	sub	w1, w1, #1
-	and	w1, w2, w1
+	and	w1, w6, w1
 	udiv	w1, w1, w0
 	uxth	w0, w1
-	ldr	w1, [x29,132]
-	str	w0, [x29,120]
-	ldr	w0, [x29,156]
+	ldr	w1, [x29,148]
+	str	w0, [x29,136]
+	ldr	w0, [x29,172]
 	cmp	w0, w1
-	bne	.L2871
+	bne	.L2985
 	mov	w0, w5
-	add	x1, x29, 152
-	mov	w2, w3
-	add	w21, w21, 1
+	add	x1, x29, 168
+	add	w20, w20, 1
 	bl	pm_log2phys
-	ldrh	w0, [x29,120]
+	ldrh	w0, [x29,136]
 	bl	ftl_vpn_decrement
-	b	.L2872
-.L2871:
-	ldr	w1, [x29,152]
+	b	.L2986
+.L2985:
+	ldr	w1, [x29,168]
 	cmp	w0, w1
-	csinc	w21, w21, w21, ne
-.L2872:
-	ldr	w0, [x29,136]
+	csinc	w20, w20, w20, ne
+.L2986:
+	ldr	w0, [x29,152]
 	add	x2, x19, :lo12:.LANCHOR0
 	add	w0, w0, 1
-	str	w0, [x29,136]
-	ldr	w0, [x29,120]
+	str	w0, [x29,152]
+	ldr	w0, [x29,136]
 	ldr	x1, [x2,584]
 	add	x1, x1, x0, lsl 2
 	ldrb	w1, [x1,2]
 	ands	w1, w1, 224
-	bne	.L2866
+	bne	.L2979
 	lsl	x0, x0, 1
 	ldr	x2, [x2,600]
 	ldrh	w5, [x2,x0]
-	cbz	w5, .L2866
+	cbz	w5, .L2979
 	strh	w1, [x2,x0]
-.L2866:
+.L2979:
 	add	w27, w27, 1
-	b	.L2875
-.L2897:
-	add	w24, w24, 1
-	b	.L2877
-.L2874:
+	b	.L2989
+.L3031:
+	add	w25, w25, 1
+	b	.L2992
+.L2988:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,3554]
+	cmp	w0, wzr
+	csinc	w28, w28, w28, eq
 	add	w28, w28, 1
-	b	.L2865
-.L2876:
+	b	.L2978
+.L2991:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x20,80]
+	ldrh	w1, [x21,80]
 	ldr	x0, [x0,600]
-	strh	w21, [x0,x1,lsl 1]
-	ldrh	w0, [x20,80]
+	strh	w20, [x0,x1,lsl 1]
+	ldrh	w0, [x21,80]
 	bl	zftl_insert_data_list
-.L2852:
-	ldrh	w0, [x20,80]
+.L2958:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x21,80]
+	ubfiz	x2, x0, 1, 16
+	ldr	x1, [x1,600]
+	ldrh	w1, [x1,x2]
+	cbnz	w1, .L2993
 	bl	ftl_dump_write_open_sblk
-	ldrh	w1, [x20,80]
-	adrp	x0, .LC230
-	mov	w2, w21
-	add	x0, x0, :lo12:.LC230
+.L2993:
+	ldrh	w1, [x21,80]
+	adrp	x0, .LC236
+	mov	w2, w20
+	add	x0, x0, :lo12:.LC236
 	bl	printk
 	mov	w0, -1
-	strh	w0, [x20,80]
+	strh	w0, [x21,80]
 	bl	pm_flush
 	bl	ftl_ext_info_flush
 	add	x0, x19, :lo12:.LANCHOR0
@@ -18294,41 +19409,41 @@ gc_recovery:
 	ldr	x0, [x0,608]
 	ldrh	w0, [x0,130]
 	cmp	w0, w1
-	beq	.L2878
+	beq	.L2994
 	bl	ftl_free_sblk
-.L2878:
+.L2994:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	strh	w0, [x1,126]
 	ldr	x1, [x19,608]
 	strh	w0, [x1,130]
 	mov	w0, 0
 	bl	ftl_info_flush
-	b	.L2846
-.L2847:
-	ldrh	w0, [x20,130]
+	b	.L2951
+.L2952:
+	ldrh	w0, [x21,130]
 	cmp	w0, w1
-	beq	.L2846
-	ldr	x1, [x24,2864]
+	beq	.L2951
+	ldr	x1, [x20,2880]
 	ldrh	w1, [x1,126]
 	cmp	w1, w0
-	bne	.L2880
+	bne	.L2996
 	bl	pm_flush
-	ldr	x0, [x24,608]
+	ldr	x0, [x20,608]
 	ldrh	w0, [x0,130]
 	bl	ftl_free_sblk
-	ldr	x0, [x24,2864]
+	ldr	x0, [x20,2880]
 	mov	w1, -1
 	strh	w1, [x0,126]
 	mov	w0, 0
 	bl	ftl_info_flush
-.L2880:
+.L2996:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	ldr	x0, [x19,608]
 	strh	w1, [x0,130]
-.L2846:
+.L2951:
 	sub	sp, x29, #32
 	ldp	x19, x20, [sp,48]
 	ldp	x21, x22, [sp,64]
@@ -18336,7 +19451,7 @@ gc_recovery:
 	ldp	x25, x26, [sp,96]
 	ldp	x27, x28, [sp,112]
 	ldp	x29, x30, [sp,32]
-	add	sp, sp, 192
+	add	sp, sp, 208
 	ret
 	.size	gc_recovery, .-gc_recovery
 	.align	2
@@ -18344,263 +19459,273 @@ gc_recovery:
 	.type	zftl_init, %function
 zftl_init:
 	stp	x29, x30, [sp, -64]!
-	mov	w0, -1
+	mov	w1, -1
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
-	adrp	x19, .LANCHOR0
-	adrp	x22, .LANCHOR4
-	add	x20, x19, :lo12:.LANCHOR0
-	add	x1, x22, :lo12:.LANCHOR4
-	adrp	x21, .LANCHOR7
+	adrp	x22, .LANCHOR3
+	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
-	add	x23, x21, :lo12:.LANCHOR7
-	strb	w0, [x20,2888]
-	strb	w0, [x20,3907]
-	strb	w0, [x1,1265]
+	add	x0, x22, :lo12:.LANCHOR3
+	adrp	x23, .LANCHOR6
+	adrp	x19, .LANCHOR0
+	add	x24, x23, :lo12:.LANCHOR6
+	add	x21, x19, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR2
+	strb	w1, [x0,-173]
+	strb	w1, [x0,1545]
+	strb	wzr, [x0,-172]
 	mov	w0, -1
+	strb	w1, [x21,2904]
 	adrp	x1, .LC2
-	str	w0, [x23,-92]
+	str	w0, [x24,228]
 	adrp	x0, .LC1
 	add	x1, x1, :lo12:.LC2
 	add	x0, x0, :lo12:.LC1
-	strb	wzr, [x20,2856]
-	strb	wzr, [x20,3908]
-	strb	wzr, [x20,2857]
-	bl	printk
-	adrp	x11, .LANCHOR2
-	ldrb	w6, [x20,633]
-	add	x1, x11, :lo12:.LANCHOR2
-	strb	w6, [x20,3364]
-	ldrh	w4, [x20,2]
-	strh	w4, [x20,3362]
+	strb	wzr, [x21,2872]
+	strb	wzr, [x21,2873]
+	bl	printk
+	add	x1, x20, :lo12:.LANCHOR2
+	ldrb	w6, [x21,633]
+	strb	w6, [x21,3636]
+	ldrh	w4, [x21,2]
 	ldrb	w2, [x1,21]
-	ldrb	w8, [x1,20]
+	ldrb	w7, [x1,20]
 	ldrh	w3, [x1,18]
 	mul	w6, w2, w6
 	ldrb	w0, [x1,17]
-	ldrh	w7, [x1,22]
+	ldrh	w8, [x1,22]
 	mov	w1, 0
-	sdiv	w9, w3, w8
-	strb	w2, [x20,3266]
-	strb	w8, [x20,3281]
+	sdiv	w9, w3, w7
+	strb	w2, [x21,3538]
+	strb	w7, [x21,3553]
 	uxtb	w6, w6
-	strb	w0, [x20,2832]
+	strb	w0, [x21,2848]
 	ubfiz	w10, w0, 9, 7
-	strh	w3, [x20,3298]
+	strh	w3, [x21,3570]
 	mov	w2, 1
-	strh	w9, [x20,3324]
-	strb	w6, [x20,3300]
-	strh	w7, [x20,576]
-	mov	x20, x11
-	strh	w10, [x23,-98]
-.L2899:
+	strh	w9, [x21,3596]
+	strb	w6, [x21,3572]
+	strh	w8, [x21,576]
+	strh	w4, [x21,3634]
+	mov	x21, x23
+	strh	w10, [x24,224]
+.L3033:
 	cmp	w2, w4
-	bhi	.L2965
+	bhi	.L3104
 	add	w1, w1, 1
 	lsl	w2, w2, 1
 	uxth	w1, w1
-	b	.L2899
-.L2965:
+	b	.L3033
+.L3104:
 	mul	w3, w0, w3
 	add	x2, x19, :lo12:.LANCHOR0
 	sub	w1, w1, #1
-	mul	w5, w3, w7
-	strh	w1, [x2,3264]
+	mul	w4, w3, w8
+	strh	w1, [x2,3536]
 	mov	w1, 1
-	lsr	w4, w5, 21
+	lsr	w5, w4, 21
 	mov	w2, 0
-.L2901:
-	cmp	w1, w4
-	bhi	.L2966
+.L3035:
+	cmp	w1, w5
+	bhi	.L3105
 	add	w2, w2, 1
 	lsl	w1, w1, 1
 	uxth	w2, w2
-	b	.L2901
-.L2966:
+	b	.L3035
+.L3105:
 	mov	w1, 57344
-	mov	w4, 1
+	mov	w5, 1
 	movk	w1, 0x1c, lsl 16
 	sub	w2, w2, #1
-	lsl	w2, w4, w2
-	add	x4, x19, :lo12:.LANCHOR0
+	lsl	w2, w5, w2
+	add	x5, x19, :lo12:.LANCHOR0
 	mul	w1, w6, w1
-	mul	w5, w5, w6
-	str	w5, [x4,2836]
-	add	x11, x21, :lo12:.LANCHOR7
+	mul	w4, w4, w6
+	str	w4, [x5,2852]
+	add	x11, x21, :lo12:.LANCHOR6
 	mul	w1, w1, w2
 	mul	w9, w9, w6
-	add	w5, w1, 24576
-	str	w5, [x11,-88]
+	add	w4, w1, 24576
+	str	w4, [x11,232]
 	mul	w3, w3, w6
-	udiv	w2, w5, w0
+	udiv	w2, w4, w0
 	sub	w0, w10, #1
-	str	w2, [x4,2840]
+	str	w2, [x5,2856]
 	sub	w3, w3, #1
-	str	w1, [x4,520]
+	str	w1, [x5,520]
 	add	w0, w0, w2, lsl 2
-	add	x2, x22, :lo12:.LANCHOR4
-	udiv	w5, w5, w3
-	add	w5, w5, 8
-	strh	w5, [x4,3332]
+	add	x2, x22, :lo12:.LANCHOR3
+	udiv	w4, w4, w3
+	add	w4, w4, 8
+	strh	w4, [x5,3604]
 	udiv	w0, w0, w10
-	strh	w0, [x11,-84]
+	strh	w0, [x11,236]
 	ubfiz	w0, w0, 4, 16
 	sdiv	w0, w0, w9
-	strh	w0, [x2,1180]
-	add	w0, w7, w7, lsl 1
+	strh	w0, [x2,1456]
+	add	w0, w8, w8, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x4,3902]
-	lsr	w0, w7, 4
-	strh	w0, [x4,3330]
+	strh	w0, [x2,-178]
+	lsr	w0, w8, 4
+	strh	w0, [x5,3602]
 	cmp	w0, 79
-	bhi	.L2903
+	bhi	.L3037
 	mov	w0, 80
-	strh	w0, [x4,3330]
-.L2903:
-	add	x0, x19, :lo12:.LANCHOR0
+	strh	w0, [x5,3602]
+.L3037:
+	add	x0, x22, :lo12:.LANCHOR3
 	mov	w2, 2000
-	mov	w3, 256
-	cmp	w8, 2
-	strh	w2, [x0,3904]
+	add	x3, x19, :lo12:.LANCHOR0
+	cmp	w7, 2
+	strh	w2, [x0,-176]
 	mov	w2, 50
-	strh	w2, [x0,3900]
-	add	x2, x22, :lo12:.LANCHOR4
-	strh	w3, [x2,1176]
-	mov	w3, 48
-	strh	w3, [x2,1178]
+	strh	w2, [x0,-180]
+	mov	w2, 256
+	strh	w2, [x0,1452]
+	mov	w2, 48
+	strh	w2, [x0,1454]
 	mov	w2, 32
-	strh	w2, [x0,592]
-	beq	.L2904
-	ldrb	w0, [x0,3296]
-	cbz	w0, .L2905
-.L2904:
-	add	x0, x19, :lo12:.LANCHOR0
+	strh	w2, [x3,592]
+	beq	.L3038
+	ldrb	w4, [x3,3568]
+	cbz	w4, .L3039
+.L3038:
+	add	x0, x22, :lo12:.LANCHOR3
 	mov	w2, 150
-	mov	w3, 64
-	strh	w2, [x0,3900]
-	add	x2, x22, :lo12:.LANCHOR4
-	strh	w3, [x2,1178]
 	mov	w3, 12
-	strh	w3, [x0,592]
+	strh	w2, [x0,-180]
+	mov	w2, 64
+	strh	w2, [x0,1454]
+	add	x2, x19, :lo12:.LANCHOR0
+	strh	w3, [x2,592]
 	ldrb	w3, [x19,#:lo12:.LANCHOR0]
-	cbnz	w3, .L2905
+	cbnz	w3, .L3041
 	mov	w3, 4
-	strh	w3, [x0,592]
-	mov	w3, 600
-	strh	w3, [x0,3904]
-	mov	w0, 128
-	strh	w0, [x2,1176]
-.L2905:
+	strh	w3, [x2,592]
+	mov	w2, 600
+	strh	w2, [x0,-176]
+	mov	w2, 128
+	strh	w2, [x0,1452]
+	b	.L3041
+.L3039:
+	ldrb	w3, [x3,756]
+	cbz	w3, .L3041
+	mov	w3, 1200
+	strh	w2, [x0,-180]
+	strh	w3, [x0,-176]
+	strh	w2, [x0,1454]
+.L3041:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2907
-	adrp	x0, .LC231
-	add	x0, x0, :lo12:.LC231
+	tbz	x0, 12, .L3043
+	adrp	x0, .LC237
+	add	x0, x0, :lo12:.LC237
 	bl	printk
-.L2907:
+.L3043:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2908
+	tbz	x0, 12, .L3044
 	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC232
-	add	x0, x0, :lo12:.LC232
-	ldr	w1, [x1,2836]
+	adrp	x0, .LC238
+	add	x0, x0, :lo12:.LC238
+	ldr	w1, [x1,2852]
 	bl	printk
-.L2908:
+.L3044:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2909
+	tbz	x0, 12, .L3045
 	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC233
-	add	x0, x0, :lo12:.LC233
-	ldr	w1, [x1,2840]
+	adrp	x0, .LC239
+	add	x0, x0, :lo12:.LC239
+	ldr	w1, [x1,2856]
 	bl	printk
-.L2909:
+.L3045:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2910
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC234
-	add	x0, x0, :lo12:.LC234
-	ldr	w1, [x1,-88]
+	tbz	x0, 12, .L3046
+	add	x1, x21, :lo12:.LANCHOR6
+	adrp	x0, .LC240
+	add	x0, x0, :lo12:.LC240
+	ldr	w1, [x1,232]
 	bl	printk
-.L2910:
+.L3046:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2911
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC235
-	add	x0, x0, :lo12:.LC235
-	ldrh	w1, [x1,-84]
+	tbz	x0, 12, .L3047
+	add	x1, x21, :lo12:.LANCHOR6
+	adrp	x0, .LC241
+	add	x0, x0, :lo12:.LC241
+	ldrh	w1, [x1,236]
 	bl	printk
-.L2911:
+.L3047:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2912
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC236
-	add	x0, x0, :lo12:.LC236
-	ldrh	w1, [x1,-98]
+	tbz	x0, 12, .L3048
+	add	x1, x21, :lo12:.LANCHOR6
+	adrp	x0, .LC242
+	add	x0, x0, :lo12:.LC242
+	ldrh	w1, [x1,224]
 	bl	printk
-.L2912:
+.L3048:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2913
-	add	x22, x22, :lo12:.LANCHOR4
-	adrp	x0, .LC237
-	add	x0, x0, :lo12:.LC237
-	ldrh	w1, [x22,1180]
+	tbz	x0, 12, .L3049
+	add	x1, x22, :lo12:.LANCHOR3
+	adrp	x0, .LC243
+	add	x0, x0, :lo12:.LC243
+	ldrh	w1, [x1,1456]
 	bl	printk
-.L2913:
+.L3049:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2914
+	tbz	x0, 12, .L3050
 	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC238
-	add	x0, x0, :lo12:.LC238
-	ldrh	w1, [x1,3330]
+	adrp	x0, .LC244
+	add	x0, x0, :lo12:.LC244
+	ldrh	w1, [x1,3602]
 	bl	printk
-.L2914:
+.L3050:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2915
+	tbz	x0, 12, .L3051
 	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC239
-	add	x0, x0, :lo12:.LC239
-	ldrh	w1, [x1,3332]
+	adrp	x0, .LC245
+	add	x0, x0, :lo12:.LC245
+	ldrh	w1, [x1,3604]
 	bl	printk
-.L2915:
-	add	x22, x19, :lo12:.LANCHOR0
-	bl	buf_init
+.L3051:
+	add	x23, x19, :lo12:.LANCHOR0
+	bl	zbuf_init
 	mov	w0, 6
-	adrp	x23, .LANCHOR5
-	ldrh	w1, [x22,576]
+	add	x22, x22, :lo12:.LANCHOR3
+	ldrh	w1, [x23,576]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x22,528]
-	ldrb	w1, [x22,3300]
-	ldrh	w0, [x22,3324]
+	str	x0, [x23,528]
+	ldrb	w1, [x23,3572]
+	ldrh	w0, [x23,3596]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x22,3888]
-	ldrb	w1, [x22,3300]
-	add	x2, x23, :lo12:.LANCHOR5
-	ldrh	w0, [x22,3324]
-	add	x2, x2, 640
-	str	x2, [x22,3880]
+	str	x0, [x22,-192]
+	ldrb	w1, [x23,3572]
+	adrp	x4, .LANCHOR5
+	ldrh	w0, [x23,3596]
+	add	x2, x4, :lo12:.LANCHOR5
+	add	x2, x2, 960
+	str	x2, [x22,-200]
 	mul	w1, w0, w1
-	ldrh	w0, [x22,576]
+	ldrh	w0, [x23,576]
 	lsl	w1, w1, 1
 	add	x3, x2, x1, sxtw 2
-	str	x3, [x22,600]
+	str	x3, [x23,600]
 	add	w1, w1, w0, lsr 1
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
 	add	x1, x2, x1, sxtw 2
-	str	x1, [x22,608]
-	tbz	x0, 12, .L2916
-	adrp	x0, .LC240
-	add	x0, x0, :lo12:.LC240
+	str	x1, [x23,608]
+	mov	x23, x4
+	tbz	x0, 12, .L3052
+	adrp	x0, .LC246
+	add	x0, x0, :lo12:.LC246
 	bl	printk
-.L2916:
+.L3052:
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x3, x21, :lo12:.LANCHOR7
-	ldrh	w0, [x2,3324]
-	ldrb	w22, [x2,3300]
+	add	x3, x21, :lo12:.LANCHOR6
+	ldrh	w0, [x2,3596]
+	ldrb	w22, [x2,3572]
 	ldrh	w1, [x2,576]
-	ldrh	w24, [x3,-84]
+	ldrh	w24, [x3,236]
 	mul	w22, w0, w22
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
 	lsl	w24, w24, 2
@@ -18609,28 +19734,28 @@ zftl_init:
 	add	w24, w24, 704
 	lsl	w22, w22, 1
 	add	w22, w22, 632
-	tbz	x0, 12, .L2917
-	adrp	x0, .LC241
-	ldrh	w3, [x3,-98]
-	add	x0, x0, :lo12:.LC241
+	tbz	x0, 12, .L3053
+	adrp	x0, .LC247
+	ldrh	w3, [x3,224]
+	add	x0, x0, :lo12:.LC247
 	mov	w1, w22
 	mov	w2, w24
 	bl	printk
-.L2917:
-	add	x21, x21, :lo12:.LANCHOR7
-	ldrh	w0, [x21,-98]
+.L3053:
+	add	x21, x21, :lo12:.LANCHOR6
+	ldrh	w0, [x21,224]
 	cmp	w22, w0
-	bhi	.L2919
+	bhi	.L3055
 	cmp	w24, w0
-	bls	.L2918
-.L2919:
-.L2920:
-	b	.L2920
-.L2918:
+	bls	.L3054
+.L3055:
+.L3056:
+	b	.L3056
+.L3054:
 	bl	sblk_init
 	bl	ftl_info_blk_init
 	cmn	w0, #1
-	beq	.L2921
+	beq	.L3057
 	bl	ftl_ext_info_init
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	gc_init
@@ -18646,7 +19771,7 @@ zftl_init:
 	add	x0, x1, 48
 	add	x1, x1, 16
 	bl	ftl_open_sblk_recovery
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldr	w0, [x1,8]
 	add	w0, w0, 16
 	str	w0, [x1,8]
@@ -18663,19 +19788,19 @@ zftl_init:
 	bl	pm_flush
 	mov	w0, 1
 	bl	ftl_total_vpn_update
-	ldrb	w0, [x23,577]
-	cbz	w0, .L2922
-	ldr	x1, [x19,2864]
+	ldrb	w0, [x23,897]
+	cbz	w0, .L3058
+	ldr	x1, [x19,2880]
 	ldr	w0, [x1,68]
 	add	w0, w0, 1
 	str	w0, [x1,68]
-.L2922:
+.L3058:
 	bl	ftl_ext_info_flush
 	mov	w0, 0
 	bl	ftl_info_flush
 	bl	print_ftl_debug_info
 	mov	w0, 0
-.L2921:
+.L3057:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -18690,40 +19815,40 @@ rk_ftl_init:
 	adrp	x0, jiffies
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR4
+	adrp	x21, .LANCHOR3
 	ldr	x0, [x0,#:lo12:jiffies]
 	stp	x19, x20, [sp,16]
-	add	x19, x21, :lo12:.LANCHOR4
-	adrp	x20, .LANCHOR7
-	add	x20, x20, :lo12:.LANCHOR7
-	str	x0, [x19,1184]
+	add	x19, x21, :lo12:.LANCHOR3
+	adrp	x20, .LANCHOR6
+	add	x20, x20, :lo12:.LANCHOR6
+	str	x0, [x19,1464]
 	mov	w0, 136
-	strb	wzr, [x20,-82]
+	strb	wzr, [x20,238]
 	bl	ftl_malloc
-	str	x0, [x19,1192]
-	cbnz	x0, .L2968
-.L2970:
+	str	x0, [x19,1472]
+	cbnz	x0, .L3107
+.L3109:
 	mov	w0, -1
-	b	.L2969
-.L2968:
+	b	.L3108
+.L3107:
 	mov	w0, 2048
 	bl	ftl_malloc
-	str	x0, [x20,-80]
+	str	x0, [x20,240]
 	mov	x1, x20
-	add	x0, x19, 1200
-	str	xzr, [x19,1200]
-	str	xzr, [x1,-72]!
+	add	x0, x19, 1480
+	str	xzr, [x19,1480]
+	str	xzr, [x1,248]!
 	bl	rknand_get_reg_addr
-	ldr	x0, [x19,1200]
-	cbz	x0, .L2970
+	ldr	x0, [x19,1480]
+	cbz	x0, .L3109
 	bl	rk_nandc_irq_init
 	mov	w1, 0
-	ldr	x0, [x20,-80]
+	ldr	x0, [x20,240]
 	mov	w2, w1
 	mov	w3, 2048
 	bl	flash_sram_load_store
 	bl	rknand_flash_cs_init
-	ldr	x0, [x19,1192]
+	ldr	x0, [x19,1472]
 	adrp	x1, zftl_deinit
 	add	x1, x1, :lo12:zftl_deinit
 	str	x1, [x0,80]
@@ -18772,18 +19897,18 @@ rk_ftl_init:
 	adrp	x1, zftl_discard
 	add	x1, x1, :lo12:zftl_discard
 	str	x1, [x0,56]
-	ldr	x0, [x19,1200]
+	ldr	x0, [x19,1480]
 	bl	nand_flash_init
 	mov	w22, w0
-	cbnz	w0, .L2971
+	cbnz	w0, .L3110
 	bl	zftl_init
 	mov	w19, w0
 	bl	zftl_proc_debug_init
 	mov	w0, 1
-	strb	w0, [x20,-82]
-	b	.L2972
-.L2971:
-	ldr	x1, [x19,1192]
+	strb	w0, [x20,238]
+	b	.L3111
+.L3110:
+	ldr	x1, [x19,1472]
 	adrp	x2, ftl_read_flash_info
 	add	x2, x2, :lo12:ftl_read_flash_info
 	adrp	x0, ftl_deinit
@@ -18830,14 +19955,14 @@ rk_ftl_init:
 	str	x0, [x1,72]
 	str	x2, [x1,104]
 	adrp	x2, ftl_discard
-	ldr	x0, [x19,1200]
+	ldr	x0, [x19,1480]
 	add	x2, x2, :lo12:ftl_discard
 	str	x2, [x1,56]
 	bl	FlashInit
 	mov	w19, w0
 	cmn	w22, #2
 	adrp	x22, .LANCHOR2
-	bne	.L2973
+	bne	.L3112
 	add	x20, x22, :lo12:.LANCHOR2
 	adrp	x1, gNandParaInfo
 	add	x20, x20, 8
@@ -18849,57 +19974,57 @@ rk_ftl_init:
 	bl	flash_lsb_page_tbl_build
 	ldrh	w0, [x20,10]
 	strh	w0, [x20,26]
-.L2973:
+.L3112:
 	adrp	x0, g_nandc_version_data
 	ldr	w1, [x0,#:lo12:g_nandc_version_data]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
 	adrp	x0, .LANCHOR0
-	bne	.L2974
+	bne	.L3113
 	adrp	x1, gFlashSlcMode
 	ldrb	w1, [x1,#:lo12:gFlashSlcMode]
-	cbnz	w1, .L2975
-.L2974:
+	cbnz	w1, .L3114
+.L3113:
 	add	x1, x0, :lo12:.LANCHOR0
 	strb	wzr, [x0,#:lo12:.LANCHOR0]
 	strb	wzr, [x1,634]
-.L2975:
+.L3114:
 	adrp	x2, gNandFlashIDBEccBits
 	add	x1, x0, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:.LANCHOR2
-	add	x21, x21, :lo12:.LANCHOR4
+	add	x21, x21, :lo12:.LANCHOR3
 	ldrb	w2, [x2,#:lo12:gNandFlashIDBEccBits]
 	strb	w2, [x1,632]
 	adrp	x2, gNandFlashEccBits
 	ldrh	w3, [x22,18]
-	str	xzr, [x21,1240]
+	str	xzr, [x21,1520]
 	ldrb	w2, [x2,#:lo12:gNandFlashEccBits]
 	strb	w2, [x1,724]
 	mov	w2, 1
 	mov	w1, 0
-.L2976:
+.L3115:
 	cmp	w2, w3
-	bhi	.L2981
+	bhi	.L3120
 	add	w1, w1, 1
 	lsl	w2, w2, 1
 	uxth	w1, w1
-	b	.L2976
-.L2981:
+	b	.L3115
+.L3120:
 	add	x0, x0, :lo12:.LANCHOR0
 	sub	w1, w1, #1
 	strb	wzr, [x0,672]
-	strh	w1, [x0,3264]
-	cbnz	w19, .L2972
+	strh	w1, [x0,3536]
+	cbnz	w19, .L3111
 	bl	FtlInit
 	mov	w19, w0
-.L2972:
-	adrp	x0, .LC242
+.L3111:
+	adrp	x0, .LC248
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC242
+	add	x0, x0, :lo12:.LC248
 	bl	printk
 	mov	w0, w19
-.L2969:
+.L3108:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -18920,71 +20045,71 @@ gc_update_l2p_map_new:
 	stp	x27, x28, [sp,80]
 	adrp	x22, .LANCHOR2
 	ldr	x20, [x0,608]
-	ldrh	w24, [x0,3298]
+	ldrh	w24, [x0,3570]
 	add	x0, x20, 80
 	str	x0, [x29,128]
 	ldrb	w0, [x0,9]
 	mul	w24, w24, w0
 	bl	timer_get_time
 	ldr	w0, [x22,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2983
-	adrp	x0, .LC243
+	tbz	x0, 8, .L3122
+	adrp	x0, .LC249
 	ldrh	w1, [x20,80]
-	add	x0, x0, :lo12:.LC243
+	add	x0, x0, :lo12:.LC249
 	bl	printk
-.L2983:
+.L3122:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x20,80]
 	sub	w2, w24, #1
 	mov	w21, 0
 	mov	w23, w21
-	adrp	x27, .LANCHOR4
+	adrp	x27, .LANCHOR3
 	ldr	x0, [x0,600]
 	strh	w2, [x0,x1,lsl 1]
-	adrp	x0, .LC245
-	add	x0, x0, :lo12:.LC245
+	adrp	x0, .LC251
+	add	x0, x0, :lo12:.LC251
 	str	x0, [x29,120]
-	adrp	x0, .LC244
-	add	x0, x0, :lo12:.LC244
+	adrp	x0, .LC250
+	add	x0, x0, :lo12:.LC250
 	str	x0, [x29,112]
-.L2984:
+.L3123:
 	cmp	w23, w24
-	beq	.L3016
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x0, [x0,1152]
+	beq	.L3155
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x0, [x0,1424]
 	ldr	w2, [x0,w23,sxtw 2]
 	cmn	w2, #1
-	beq	.L2985
+	beq	.L3124
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	lsl	w0, w0, 7
 	udiv	w0, w2, w0
 	and	w0, w0, 65535
 	str	w0, [x29,140]
 	ldr	w0, [x22,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2986
+	tbz	x0, 8, .L3125
 	ldr	x0, [x29,112]
 	mov	w3, w23
 	ldr	w1, [x29,140]
 	bl	printk
-.L2986:
+.L3125:
 	mov	w25, w23
-.L2992:
-	add	x1, x27, :lo12:.LANCHOR4
+.L3131:
+	add	x1, x27, :lo12:.LANCHOR3
 	sbfiz	x26, x25, 2, 32
-	ldr	x0, [x1,1152]
+	ldr	x0, [x1,1424]
 	ldr	w4, [x0,x26]
 	cmn	w4, #1
-	beq	.L2987
+	beq	.L3126
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x29,140]
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	lsl	w0, w0, 7
 	udiv	w0, w4, w0
 	cmp	w2, w0, uxth
-	bne	.L2987
-	ldr	x0, [x1,1160]
+	bne	.L3126
+	ldr	x0, [x1,1432]
 	str	x4, [x29,104]
 	ldr	w28, [x0,x26]
 	mov	w0, w4
@@ -18992,90 +20117,92 @@ gc_update_l2p_map_new:
 	str	w0, [x29,156]
 	cmn	w0, #1
 	ldr	x4, [x29,104]
-	bne	.L2988
+	bne	.L3127
 	mov	w0, w4
 	add	x1, x29, 156
 	mov	w2, 0
 	bl	pm_log2phys
 	ldr	x4, [x29,104]
-.L2988:
+.L3127:
 	ldr	w3, [x29,156]
 	cmp	w3, w28
-	bne	.L2989
-	add	x0, x27, :lo12:.LANCHOR4
+	bne	.L3128
+	add	x0, x27, :lo12:.LANCHOR3
 	add	x1, x29, 152
 	mov	w2, 1
 	add	w21, w21, 1
-	ldr	x0, [x0,1168]
+	ldr	x0, [x0,1440]
 	ldr	w0, [x0,x26]
 	str	w0, [x29,152]
 	mov	w0, w4
 	bl	pm_log2phys
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	w0, 21
-	ldrh	w1, [x2,3264]
-	sub	w3, w0, w1
-	mov	w0, 1
-	lsl	w0, w0, w3
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w2, 24
+	ldrb	w0, [x3,744]
+	ldrh	w1, [x3,3536]
+	sub	w0, w2, w0
+	mov	w2, 1
+	sub	w0, w0, w1
 	lsr	w28, w28, w1
+	lsl	w0, w2, w0
 	sub	w0, w0, #1
 	and	w28, w0, w28
-	ldrb	w0, [x2,3266]
+	ldrb	w0, [x3,3538]
 	udiv	w0, w28, w0
-	b	.L3015
-.L2989:
+	b	.L3154
+.L3128:
 	ldr	w0, [x22,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2991
+	tbz	x0, 8, .L3130
 	ldr	x0, [x29,120]
 	mov	w1, w4
 	mov	w2, w28
 	bl	printk
-.L2991:
+.L3130:
 	ldr	x0, [x29,128]
 	ldrh	w0, [x0]
-.L3015:
+.L3154:
 	bl	ftl_vpn_decrement
-	add	x0, x27, :lo12:.LANCHOR4
+	add	x0, x27, :lo12:.LANCHOR3
 	mov	w1, -1
-	ldr	x0, [x0,1152]
+	ldr	x0, [x0,1424]
 	str	w1, [x0,x26]
 	bl	timer_get_time
-.L2987:
+.L3126:
 	add	w25, w25, 1
 	cmp	w25, w24
-	bne	.L2992
-.L2985:
+	bne	.L3131
+.L3124:
 	add	w23, w23, 1
-	b	.L2984
-.L3016:
+	b	.L3123
+.L3155:
 	ldr	w0, [x22,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2994
+	tbz	x0, 8, .L3133
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w3, [x20,80]
 	ldr	x1, [x0,608]
 	ldr	x2, [x0,600]
-	adrp	x0, .LC246
-	add	x0, x0, :lo12:.LC246
+	adrp	x0, .LC252
+	add	x0, x0, :lo12:.LC252
 	ldrh	w1, [x1,80]
 	ldrh	w2, [x2,x3,lsl 1]
 	mov	w3, w21
 	bl	printk
-.L2994:
+.L3133:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x20,80]
 	ldr	x0, [x0,600]
 	ldrh	w0, [x0,x1,lsl 1]
 	cmp	w0, w21
-	beq	.L2995
-	adrp	x1, .LANCHOR3
+	beq	.L3134
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 616
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 749
 	add	x1, x1, 624
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L2995:
+.L3134:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x20,80]
 	ldr	x0, [x19,600]
@@ -19101,126 +20228,130 @@ gc_scan_src_blk_one_page:
 	adrp	x19, .LANCHOR0
 	str	x23, [sp,48]
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x1, x2, 2896
+	add	x1, x2, 2912
 	stp	x21, x22, [sp,32]
 	ldrb	w0, [x1,4]
 	add	x3, x1, x0, sxtw 1
-	ldrb	w6, [x2,3300]
+	ldrb	w6, [x2,3572]
 	ldrh	w22, [x3,40]
 	mov	w3, 0
 	ldrh	w2, [x1,2]
 	mov	w4, w3
-.L3018:
+.L3157:
 	cmp	w22, w5
-	bne	.L3044
+	bne	.L3187
 	add	w0, w0, 1
 	uxtb	w0, w0
 	cmp	w0, w6
-	bne	.L3019
+	bne	.L3158
 	add	w2, w2, 1
 	mov	w0, 0
 	mov	w4, 1
 	uxth	w2, w2
-.L3019:
+.L3158:
 	add	x3, x1, x0, sxtw 1
 	ldrh	w22, [x3,40]
 	mov	w3, 1
-	b	.L3018
-.L3044:
-	cbz	w4, .L3021
+	b	.L3157
+.L3187:
+	cbz	w4, .L3160
 	add	x1, x19, :lo12:.LANCHOR0
-	strh	w2, [x1,2898]
-.L3021:
-	cbz	w3, .L3022
+	strh	w2, [x1,2914]
+.L3160:
+	cbz	w3, .L3161
 	add	x1, x19, :lo12:.LANCHOR0
-	strb	w0, [x1,2900]
-.L3022:
+	strb	w0, [x1,2916]
+.L3161:
 	mov	w0, 1
 	mov	w23, 1
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	buf_alloc
 	mov	x21, x0
-.L3023:
-	add	x20, x19, 2896
+.L3162:
+	add	x20, x19, 2912
 	ldrb	w1, [x20,6]
 	cmp	w23, w1
-	bgt	.L3045
-	ldrh	w0, [x19,3362]
-	cmp	w1, 3
-	mul	w0, w22, w0
-	bne	.L3024
-	ldrh	w1, [x20,2]
-	add	w0, w0, w1
-	orr	w0, w0, w23, lsl 24
-	b	.L3043
-.L3024:
+	bgt	.L3188
+	ldrh	w0, [x19,3634]
 	cmp	w1, 2
-	ldrh	w1, [x20,2]
-	bne	.L3026
+	mul	w0, w22, w0
+	beq	.L3163
+	cmp	w1, 3
+	bne	.L3164
+	ldrb	w1, [x19,756]
+	cbz	w1, .L3165
+.L3163:
+	ldrh	w1, [x19,2914]
 	add	w0, w0, w1, lsl 1
-	ldrb	w1, [x19,3281]
+	ldrb	w1, [x19,3553]
 	sub	w0, w0, #1
 	add	w0, w0, w23
 	orr	w0, w0, w1, lsl 24
-	b	.L3043
-.L3026:
+	b	.L3186
+.L3165:
+	ldrh	w1, [x20,2]
 	add	w0, w0, w1
-.L3043:
+	orr	w0, w0, w23, lsl 24
+	b	.L3186
+.L3164:
+	ldrh	w1, [x20,2]
+	add	w0, w0, w1
+.L3186:
 	str	w0, [x21,40]
 	mov	w1, 1
 	mov	x0, x21
 	bl	sblk_read_page
 	ldr	w0, [x21,52]
 	cmp	w0, 512
-	beq	.L3029
+	beq	.L3169
 	cmn	w0, #1
-	beq	.L3029
+	beq	.L3169
 	ldr	x0, [x21,24]
 	ldr	w20, [x0,4]
 	mov	w0, w20
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,76]
 	cmn	w0, #1
-	bne	.L3030
-	ldr	w0, [x19,2840]
+	bne	.L3170
+	ldr	w0, [x19,2856]
 	cmp	w20, w0
-	bcs	.L3030
+	bcs	.L3170
 	mov	w0, w20
 	add	x1, x29, 76
 	mov	w2, 0
 	bl	pm_log2phys
-.L3030:
+.L3170:
 	ldr	w1, [x21,40]
 	ldr	w0, [x29,76]
 	cmp	w1, w0
-	bne	.L3029
-	ldrh	w3, [x19,2920]
-	ldr	x2, [x19,3272]
+	bne	.L3169
+	ldrh	w3, [x19,2936]
+	ldr	x2, [x19,3544]
 	str	w1, [x2,x3,lsl 2]
-	ldrh	w1, [x19,2920]
+	ldrh	w1, [x19,2936]
 	add	w1, w1, 1
-	strh	w1, [x19,2920]
-.L3029:
-	ldrh	w0, [x19,2922]
+	strh	w1, [x19,2936]
+.L3169:
+	ldrh	w0, [x19,2938]
 	add	w23, w23, 1
 	add	w0, w0, 1
-	strh	w0, [x19,2922]
-	b	.L3023
-.L3045:
+	strh	w0, [x19,2938]
+	b	.L3162
+.L3188:
 	mov	x0, x21
-	bl	buf_free
+	bl	zbuf_free
 	ldrb	w0, [x20,4]
-	ldrb	w1, [x19,3300]
+	ldrb	w1, [x19,3572]
 	add	w0, w0, 1
 	uxtb	w0, w0
 	strb	w0, [x20,4]
 	cmp	w1, w0
-	bne	.L3017
+	bne	.L3156
 	ldrh	w0, [x20,2]
 	strb	wzr, [x20,4]
 	add	w0, w0, 1
 	strh	w0, [x20,2]
-.L3017:
+.L3156:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -19239,249 +20370,259 @@ gc_scan_src_blk:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	ldrh	w1, [x0,2896]
+	ldrh	w1, [x0,2912]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L3047
-	adrp	x1, .LANCHOR3
+	bne	.L3190
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1051
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1236
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3047:
+.L3190:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w3, 65535
 	mov	w0, 0
-	ldrh	w1, [x2,2896]
+	ldrh	w1, [x2,2912]
 	cmp	w1, w3
-	beq	.L3048
+	beq	.L3191
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3049
+	tbz	x0, 8, .L3192
 	ubfiz	x3, x1, 1, 16
 	ldr	x2, [x2,600]
-	adrp	x0, .LC247
-	add	x0, x0, :lo12:.LC247
+	adrp	x0, .LC253
+	add	x0, x0, :lo12:.LC253
 	ldrh	w2, [x2,x3]
 	bl	printk
-.L3049:
+.L3192:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	timer_get_time
-	add	x21, x20, 2896
-	add	x1, x20, 2936
-	ldrh	w0, [x20,2896]
+	add	x21, x20, 2912
+	add	x1, x20, 2952
+	ldrh	w0, [x20,2912]
 	bl	ftl_get_blk_list_in_sblk
 	uxtb	w1, w0
 	strb	w1, [x21,5]
-	cbnz	w1, .L3050
+	cbnz	w1, .L3193
 	mov	w0, -1
-	strh	w0, [x20,2896]
-	b	.L3076
-.L3050:
-	ldrh	w3, [x20,2896]
+	strh	w0, [x20,2912]
+	b	.L3223
+.L3193:
+	ldrh	w3, [x20,2912]
 	ldr	x2, [x20,584]
 	add	x2, x2, x3, lsl 2
 	ldrb	w2, [x2,2]
 	tst	w2, 192
 	and	w4, w2, 224
-	beq	.L3051
+	beq	.L3194
 	cmp	w4, 224
-	beq	.L3051
+	beq	.L3194
 	ldr	x2, [x20,608]
 	ldrh	w5, [x2,16]
 	cmp	w5, w3
-	beq	.L3051
+	beq	.L3194
 	ldrh	w5, [x2,48]
 	cmp	w5, w3
-	beq	.L3051
+	beq	.L3194
 	ldrh	w2, [x2,80]
 	cmp	w2, w3
-	bne	.L3052
-.L3051:
-	cbnz	w4, .L3053
+	bne	.L3195
+.L3194:
+	cbnz	w4, .L3196
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x0, [x0,600]
 	ldrh	w0, [x0,x3,lsl 1]
-	cbz	w0, .L3054
-	adrp	x1, .LANCHOR3
+	cbz	w0, .L3197
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1071
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1256
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3054:
+.L3197:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2896]
+	ldrh	w1, [x0,2912]
 	ldr	x0, [x0,600]
 	strh	wzr, [x0,x1,lsl 1]
-.L3053:
+.L3196:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	wzr, [x19,2920]
-	strh	w0, [x19,2896]
-.L3076:
+	strh	wzr, [x19,2936]
+	strh	w0, [x19,2912]
+.L3223:
 	mov	w0, 0
-	b	.L3048
-.L3052:
+	b	.L3191
+.L3195:
 	and	w0, w0, 255
 	sub	w0, w0, #1
 	add	x0, x21, x0, sxtw 1
 	ldrh	w20, [x0,40]
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L3055
-	adrp	x1, .LANCHOR3
+	bne	.L3198
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1079
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1264
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3055:
+.L3198:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w25, 1
-	ldrh	w3, [x2,2896]
+	ldrh	w3, [x2,2912]
 	ldr	x4, [x2,584]
-	ldrh	w0, [x2,3324]
+	ldrh	w0, [x2,3596]
 	add	x3, x4, x3, lsl 2
-	ldrh	w1, [x2,3362]
+	ldrh	w1, [x2,3634]
 	sub	w0, w0, #1
 	ldrb	w3, [x3,2]
 	uxth	w0, w0
 	mul	w1, w20, w1
 	and	w3, w3, 224
 	cmp	w3, 160
-	bne	.L3056
-	ldrb	w3, [x2,3281]
+	bne	.L3199
+	ldrb	w3, [x2,3553]
 	cmp	w3, 2
 	uxth	w25, w3
 	orr	w1, w1, w3, lsl 24
-	bne	.L3056
-	ldrh	w0, [x2,3298]
+	bne	.L3200
+	ldrh	w0, [x2,3570]
 	sub	w0, w0, #1
 	uxth	w0, w0
-.L3056:
-	add	x20, x19, :lo12:.LANCHOR0
-	orr	w23, w0, w1
+.L3200:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w3, [x2,756]
+	cbz	w3, .L3199
+	ldrh	w0, [x2,3570]
+	sub	w0, w0, #1
+	uxth	w0, w0
+.L3199:
+	add	x23, x19, :lo12:.LANCHOR0
+	orr	w22, w0, w1
 	mov	w0, 1
-	strb	w25, [x20,2902]
-	strh	wzr, [x20,2898]
-	strb	wzr, [x20,2900]
-	strh	wzr, [x20,2922]
-	strh	wzr, [x20,2924]
+	strb	w25, [x23,2918]
+	strh	wzr, [x23,2914]
+	strb	wzr, [x23,2916]
+	strh	wzr, [x23,2938]
+	strh	wzr, [x23,2940]
 	bl	buf_alloc
 	mov	w1, 1
-	str	w23, [x0,40]
-	mov	x21, x0
+	str	w22, [x0,40]
+	mov	x20, x0
 	bl	sblk_read_page
-	ldrh	w0, [x20,3298]
+	ldrh	w0, [x23,3570]
 	mov	w1, 255
-	ldrb	w2, [x20,3300]
+	ldrb	w2, [x23,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x20,3272]
+	ldr	x0, [x23,3544]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	strh	wzr, [x20,2920]
-	ldr	w0, [x21,52]
+	strh	wzr, [x23,2936]
+	ldr	w0, [x20,52]
 	cmp	w0, 512
-	beq	.L3077
+	beq	.L3224
 	cmn	w0, #1
-	beq	.L3077
-	ldr	x0, [x21,24]
+	beq	.L3224
+	ldr	x0, [x20,24]
 	ldr	w1, [x0]
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	cmp	w1, w0
-	beq	.L3059
-	adrp	x1, .LANCHOR3
+	beq	.L3203
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1112
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1299
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3077:
-	mov	x0, x21
-	bl	buf_free
+.L3224:
+	mov	x0, x20
+	bl	zbuf_free
 	mov	w0, -1
-	b	.L3048
-.L3059:
-	ldrb	w0, [x20,3300]
+	b	.L3191
+.L3203:
+	ldrb	w0, [x23,3572]
 	mov	x26, 0
-	ldrh	w22, [x20,3324]
-	mov	w24, 21
-	ldr	x23, [x21,8]
-	mul	w22, w0, w22
-	mul	w22, w25, w22
-	mov	w25, 1
-	uxth	w22, w22
-.L3060:
-	cmp	w22, w26
-	ble	.L3078
-	ldr	w0, [x23,x26,lsl 2]
+	ldrh	w21, [x23,3596]
+	mov	w24, 1
+	ldr	x22, [x20,8]
+	mul	w21, w0, w21
+	mul	w21, w25, w21
+	mov	x25, x23
+	mov	w23, 24
+	uxth	w21, w21
+.L3204:
+	cmp	w21, w26
+	ble	.L3225
+	ldr	w0, [x22,x26,lsl 2]
 	cmn	w0, #1
-	beq	.L3062
+	beq	.L3206
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,92]
 	cmn	w0, #1
-	bne	.L3063
-	ldr	w0, [x23,x26,lsl 2]
+	bne	.L3207
+	ldr	w0, [x22,x26,lsl 2]
 	add	x1, x29, 92
 	mov	w2, 0
 	bl	pm_log2phys
-.L3063:
-	ldrh	w1, [x20,3264]
+.L3207:
+	ldrb	w1, [x25,744]
+	ldrh	w0, [x25,3536]
+	sub	w1, w23, w1
 	ldr	w2, [x29,92]
-	sub	w0, w24, w1
-	ldrh	w3, [x20,2896]
-	lsl	w0, w25, w0
-	lsr	w1, w2, w1
-	sub	w0, w0, #1
-	and	w1, w0, w1
-	ldrb	w0, [x20,3266]
+	sub	w1, w1, w0
+	ldrh	w3, [x25,2912]
+	lsl	w1, w24, w1
+	lsr	w0, w2, w0
+	sub	w1, w1, #1
+	and	w1, w1, w0
+	ldrb	w0, [x25,3538]
 	udiv	w1, w1, w0
 	cmp	w1, w3
-	bne	.L3062
-	ldrh	w3, [x20,2920]
-	ldr	x1, [x20,3272]
+	bne	.L3206
+	ldrh	w3, [x25,2936]
+	ldr	x1, [x25,3544]
 	str	w2, [x1,x3,lsl 2]
-	ldrh	w1, [x20,2920]
+	ldrh	w1, [x25,2936]
 	add	w1, w1, 1
-	strh	w1, [x20,2920]
-.L3062:
+	strh	w1, [x25,2936]
+.L3206:
 	bl	timer_get_time
 	add	x26, x26, 1
-	b	.L3060
-.L3078:
-	mov	x0, x21
-	bl	buf_free
+	b	.L3204
+.L3225:
+	mov	x0, x20
+	bl	zbuf_free
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2896]
+	ldrh	w1, [x0,2912]
 	ldr	x3, [x0,600]
 	ubfiz	x2, x1, 1, 16
 	ldrh	w2, [x3,x2]
-	ldrh	w3, [x0,2920]
+	ldrh	w3, [x0,2936]
 	cmp	w2, w3
-	beq	.L3066
-	adrp	x0, .LC248
-	add	x0, x0, :lo12:.LC248
+	beq	.L3210
+	adrp	x0, .LC254
+	add	x0, x0, :lo12:.LC254
 	bl	printk
-.L3066:
+.L3210:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x19,2896]
+	ldrh	w2, [x19,2912]
 	ldr	x1, [x19,600]
-	ldrh	w3, [x19,2920]
+	ldrh	w3, [x19,2936]
 	strh	w3, [x1,x2,lsl 1]
-	strh	wzr, [x19,2924]
-	ldrh	w0, [x19,2920]
-.L3048:
+	strh	wzr, [x19,2940]
+	ldrh	w0, [x19,2936]
+.L3191:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -19503,14 +20644,14 @@ gc_scan_static_data:
 	ldr	x0, [x3,608]
 	ldr	w1, [x0,544]
 	cmn	w1, #1
-	beq	.L3080
-	adrp	x21, .LANCHOR3
+	beq	.L3227
+	adrp	x21, .LANCHOR4
 	adrp	x22, .LC0
-	add	x21, x21, :lo12:.LANCHOR3
+	add	x21, x21, :lo12:.LANCHOR4
 	mov	w20, 11
 	add	x22, x22, :lo12:.LC0
 	add	x21, x21, 664
-.L3081:
+.L3228:
 	add	x24, x19, :lo12:.LANCHOR0
 	add	x1, x29, 76
 	mov	w2, 0
@@ -19519,7 +20660,7 @@ gc_scan_static_data:
 	bl	pm_log2phys
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L3082
+	beq	.L3229
 	mov	w0, 1
 	bl	buf_alloc
 	mov	x23, x0
@@ -19529,45 +20670,47 @@ gc_scan_static_data:
 	bl	sblk_read_page
 	ldr	w0, [x23,52]
 	cmp	w0, 256
-	bne	.L3083
-	ldrh	w0, [x24,3264]
-	mov	w2, 21
+	bne	.L3230
+	ldrb	w2, [x24,744]
+	mov	w3, 24
+	ldrh	w0, [x24,3536]
 	mov	w1, 1
+	sub	w2, w3, w2
 	ldr	w3, [x29,76]
 	sub	w2, w2, w0
 	lsl	w2, w1, w2
 	lsr	w3, w3, w0
 	sub	w2, w2, #1
-	ldrb	w0, [x24,3266]
+	ldrb	w0, [x24,3538]
 	and	w2, w2, w3
 	udiv	w0, w2, w0
 	mov	w2, 0
 	bl	gc_add_sblk
-.L3083:
+.L3230:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x1, [x23,24]
 	ldr	x0, [x0,608]
 	ldr	w1, [x1,4]
 	ldr	w0, [x0,544]
 	cmp	w1, w0
-	beq	.L3084
+	beq	.L3231
 	mov	x1, x21
-	mov	w2, 1551
+	mov	w2, 1738
 	mov	x0, x22
 	bl	printk
 	bl	dump_stack
-.L3084:
+.L3231:
 	mov	x0, x23
-	bl	buf_free
-.L3082:
+	bl	zbuf_free
+.L3229:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldr	x1, [x2,608]
-	ldr	w2, [x2,2840]
+	ldr	w2, [x2,2856]
 	ldr	w0, [x1,544]
 	add	w0, w0, 1
 	str	w0, [x1,544]
 	cmp	w0, w2
-	bcc	.L3085
+	bcc	.L3232
 	mov	w0, -1
 	str	w0, [x1,544]
 	ldr	w0, [x1,548]
@@ -19578,37 +20721,37 @@ gc_scan_static_data:
 	bl	ftl_ext_info_flush
 	mov	w0, 0
 	bl	ftl_info_flush
-	b	.L3079
-.L3085:
+	b	.L3226
+.L3232:
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	bne	.L3079
+	bne	.L3226
 	sub	w20, w20, #1
 	uxth	w20, w20
-	cbnz	w20, .L3081
-	b	.L3079
-.L3080:
+	cbnz	w20, .L3228
+	b	.L3226
+.L3227:
 	ldr	w1, [x0,536]
 	ldr	w2, [x0,12]
 	add	w1, w1, 12959744
 	add	w1, w1, 256
 	cmp	w2, w1
-	bhi	.L3090
-	ldr	x3, [x3,2864]
+	bhi	.L3237
+	ldr	x3, [x3,2880]
 	ldr	w1, [x0,540]
 	ldr	w3, [x3,44]
 	add	w1, w1, 4096
 	add	w1, w1, 904
 	cmp	w3, w1
-	bls	.L3079
-.L3090:
+	bls	.L3226
+.L3237:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldr	w1, [x1,44]
 	str	w1, [x0,540]
 	str	w2, [x0,536]
 	str	wzr, [x0,544]
-.L3079:
+.L3226:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -19632,45 +20775,45 @@ gc_block_vpn_scan:
 	ldrh	w0, [x20,576]
 	ldr	w1, [x1,608]
 	cmp	w1, w0
-	bcs	.L3095
+	bcs	.L3242
 	bl	timer_get_time
 	ldr	x21, [x20,608]
 	ldr	w1, [x21,604]
 	add	w1, w1, 28672
 	add	w1, w1, 1328
 	cmp	w0, w1
-	bls	.L3095
+	bls	.L3242
 	bl	timer_get_time
 	str	w0, [x21,604]
 	ldr	x0, [x20,608]
 	ldrh	w2, [x20,576]
 	ldr	w1, [x0,600]
 	cmp	w1, w2
-	bcs	.L3099
-	ldr	x2, [x20,2864]
+	bcs	.L3246
+	ldr	x2, [x20,2880]
 	ldrh	w2, [x2,134]
 	cmp	w1, w2
-	bcs	.L3100
-.L3099:
+	bcs	.L3247
+.L3246:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x1, [x1,2864]
+	ldr	x1, [x1,2880]
 	ldrh	w1, [x1,134]
 	str	w1, [x0,600]
-.L3100:
+.L3247:
 	ldr	w25, [x0,600]
 	mov	w0, 65535
 	uxth	w20, w25
 	cmp	w20, w0
-	bne	.L3101
-	adrp	x1, .LANCHOR3
+	bne	.L3248
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1846
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2035
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3101:
+.L3248:
 	add	x21, x19, :lo12:.LANCHOR0
 	ldr	x0, [x21,608]
 	ldr	w1, [x0,600]
@@ -19683,47 +20826,47 @@ gc_block_vpn_scan:
 	mov	w0, w20
 	bl	ftl_get_blk_list_in_sblk
 	uxth	w1, w0
-	cbz	w1, .L3095
+	cbz	w1, .L3242
 	uxtw	x22, w20
 	ldr	x24, [x21,584]
 	add	x24, x24, x22, lsl 2
 	ldrb	w1, [x24,2]
 	tst	w1, 192
 	and	w2, w1, 224
-	beq	.L3102
+	beq	.L3249
 	cmp	w2, 224
-	beq	.L3102
+	beq	.L3249
 	ldr	x1, [x21,608]
 	ldrh	w3, [x1,16]
 	cmp	w3, w20
-	beq	.L3102
+	beq	.L3249
 	ldrh	w3, [x1,48]
 	cmp	w3, w20
-	beq	.L3102
+	beq	.L3249
 	ldrh	w1, [x1,80]
 	cmp	w1, w20
-	bne	.L3103
-.L3102:
-	cbnz	w2, .L3095
+	bne	.L3250
+.L3249:
+	cbnz	w2, .L3242
 	add	x0, x19, :lo12:.LANCHOR0
 	lsl	x22, x22, 1
 	ldr	x0, [x0,600]
 	ldrh	w0, [x0,x22]
-	cbz	w0, .L3104
-	adrp	x1, .LANCHOR3
+	cbz	w0, .L3251
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1862
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2051
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3104:
+.L3251:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldr	x0, [x19,600]
 	strh	wzr, [x0,x22]
-	b	.L3095
-.L3103:
+	b	.L3242
+.L3250:
 	and	w0, w0, 65535
 	add	x1, x29, 144
 	sub	w0, w0, #1
@@ -19731,36 +20874,36 @@ gc_block_vpn_scan:
 	ldrh	w21, [x0,-16]
 	mov	w0, 65535
 	cmp	w21, w0
-	bne	.L3106
-	adrp	x1, .LANCHOR3
+	bne	.L3253
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1868
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2057
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3106:
+.L3253:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrb	w3, [x24,2]
 	mov	w26, 1
 	and	w3, w3, 224
-	ldrh	w0, [x2,3324]
+	ldrh	w0, [x2,3596]
 	cmp	w3, 160
-	ldrh	w1, [x2,3362]
+	ldrh	w1, [x2,3634]
 	sub	w0, w0, #1
 	mul	w1, w21, w1
 	uxth	w0, w0
-	bne	.L3107
-	ldrb	w3, [x2,3281]
+	bne	.L3254
+	ldrb	w3, [x2,3553]
 	cmp	w3, 2
 	uxth	w26, w3
 	orr	w1, w1, w3, lsl 24
-	bne	.L3107
-	ldrh	w0, [x2,3298]
+	bne	.L3254
+	ldrh	w0, [x2,3570]
 	sub	w0, w0, #1
 	uxth	w0, w0
-.L3107:
+.L3254:
 	orr	w21, w0, w1
 	mov	w0, 1
 	bl	buf_alloc
@@ -19769,42 +20912,42 @@ gc_block_vpn_scan:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	x23, x0
 	bl	sblk_read_page
-	ldrh	w0, [x21,3298]
+	ldrh	w0, [x21,3570]
 	mov	w1, 255
-	ldrb	w2, [x21,3300]
+	ldrb	w2, [x21,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x21,3272]
+	ldr	x0, [x21,3544]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	ldr	w0, [x23,52]
 	cmp	w0, 512
-	beq	.L3119
+	beq	.L3266
 	cmn	w0, #1
 	cset	w2, eq
-	cbz	w2, .L3108
-.L3119:
+	cbz	w2, .L3255
+.L3266:
 	mov	w0, w20
 	mov	w1, 1
 	mov	w2, 0
-	b	.L3132
-.L3108:
+	b	.L3279
+.L3255:
 	ldr	x0, [x23,24]
 	ldr	w1, [x0]
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	cmp	w1, w0
-	beq	.L3110
+	beq	.L3257
 	mov	w0, w20
 	mov	w1, 1
-.L3132:
+.L3279:
 	bl	gc_add_sblk
 	mov	x0, x23
-	bl	buf_free
-	b	.L3095
-.L3110:
-	ldrb	w0, [x21,3300]
+	bl	zbuf_free
+	b	.L3242
+.L3257:
+	ldrb	w0, [x21,3572]
 	mov	x27, 0
-	ldrh	w1, [x21,3324]
+	ldrh	w1, [x21,3596]
 	and	w28, w25, 65535
 	mov	w21, w27
 	mul	w0, w0, w1
@@ -19812,68 +20955,70 @@ gc_block_vpn_scan:
 	uxth	w0, w26
 	ldr	x26, [x23,8]
 	str	w0, [x29,108]
-.L3111:
+.L3258:
 	ldr	w0, [x29,108]
 	cmp	w0, w27
-	ble	.L3133
+	ble	.L3280
 	ldr	w0, [x26,x27,lsl 2]
 	cmn	w0, #1
-	beq	.L3112
+	beq	.L3259
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,124]
 	cmn	w0, #1
-	bne	.L3113
+	bne	.L3260
 	ldr	w0, [x26,x27,lsl 2]
 	add	x1, x29, 124
 	mov	w2, 0
 	bl	pm_log2phys
-.L3113:
-	add	x4, x19, :lo12:.LANCHOR0
-	mov	w1, 21
-	ldrh	w0, [x4,3264]
-	sub	w2, w1, w0
+.L3260:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w1, 24
+	ldrb	w0, [x2,744]
+	ldrh	w4, [x2,3536]
+	sub	w0, w1, w0
 	mov	w1, 1
-	lsl	w2, w1, w2
+	sub	w0, w0, w4
+	lsl	w0, w1, w0
 	ldr	w1, [x29,124]
-	sub	w2, w2, #1
-	lsr	w0, w1, w0
-	ldrb	w1, [x4,3266]
-	and	w0, w2, w0
+	sub	w0, w0, #1
+	lsr	w1, w1, w4
+	and	w0, w0, w1
+	ldrb	w1, [x2,3538]
 	udiv	w0, w0, w1
 	cmp	w0, w28
-	bne	.L3112
+	bne	.L3259
 	add	w21, w21, 1
 	uxth	w21, w21
-.L3112:
+.L3259:
 	add	x27, x27, 1
-	b	.L3111
-.L3133:
+	b	.L3258
+.L3280:
 	mov	x0, x23
-	bl	buf_free
+	bl	zbuf_free
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3115
+	tbz	x0, 8, .L3262
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w4, [x24,2]
 	uxth	w1, w25
 	mov	w3, w21
 	ubfx	x4, x4, 5, 3
 	ldr	x2, [x0,600]
-	adrp	x0, .LC249
-	add	x0, x0, :lo12:.LC249
+	adrp	x0, .LC255
+	add	x0, x0, :lo12:.LC255
 	ldrh	w2, [x2,x22,lsl 1]
 	bl	printk
-.L3115:
+.L3262:
 	add	x19, x19, :lo12:.LANCHOR0
 	cmp	w21, 31
 	ldr	x0, [x19,600]
 	strh	w21, [x0,x22,lsl 1]
-	bhi	.L3095
+	bhi	.L3242
 	mov	w0, w20
 	mov	w1, 1
 	mov	w2, 0
 	bl	gc_add_sblk
-.L3095:
+.L3242:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -19892,7 +21037,7 @@ ftl_sblk_dump:
 	add	x29, sp, 48
 	stp	x23, x24, [sp,96]
 	adrp	x23, .LANCHOR0
-	str	x0, [x29,136]
+	str	x0, [x29,128]
 	stp	x19, x20, [sp,64]
 	add	x19, x23, :lo12:.LANCHOR0
 	mov	x20, x0
@@ -19905,31 +21050,32 @@ ftl_sblk_dump:
 	add	x1, x0, x25
 	ldrh	w4, [x0,x25]
 	ldr	w5, [x0,x25]
-	adrp	x0, .LC250
+	adrp	x0, .LC256
 	ldrb	w3, [x1,2]
-	add	x0, x0, :lo12:.LC250
+	add	x0, x0, :lo12:.LC256
 	mov	w1, w20
 	and	w4, w4, 2047
 	ubfx	x2, x3, 5, 3
 	ubfx	x5, x5, 11, 8
 	ubfx	x3, x3, 3, 2
 	bl	printk
+	str	x23, [x29,152]
 	mov	w1, 65535
 	mov	w0, 0
 	cmp	w20, w1
-	beq	.L3135
+	beq	.L3282
 	ldrh	w1, [x19,576]
 	cmp	w1, w20
-	bls	.L3135
+	bls	.L3282
 	ldr	x0, [x19,584]
 	mov	w26, 1
 	add	x0, x0, x25
 	ldrb	w0, [x0,2]
 	and	w0, w0, 224
 	cmp	w0, 160
-	bne	.L3136
-	ldrb	w26, [x19,3281]
-.L3136:
+	bne	.L3283
+	ldrb	w26, [x19,3553]
+.L3283:
 	add	x1, x29, 192
 	mov	w0, w20
 	strh	w20, [x29,176]
@@ -19937,21 +21083,22 @@ ftl_sblk_dump:
 	bl	ftl_get_blk_list_in_sblk
 	uxtb	w1, w0
 	mov	w4, w0
-	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x0, [x29,152]
 	strb	w1, [x29,185]
 	mov	w3, w26
+	add	x0, x0, :lo12:.LANCHOR0
 	strh	wzr, [x29,178]
+	strb	wzr, [x29,181]
 	uxtb	w4, w4
-	ldrh	w2, [x0,3324]
+	strh	wzr, [x29,186]
 	mov	w27, w22
-	strb	wzr, [x29,181]
+	ldrh	w2, [x0,3596]
 	mov	w19, w22
-	strh	wzr, [x29,186]
 	mul	w1, w1, w2
 	strh	w1, [x29,182]
 	ldr	x1, [x0,584]
-	adrp	x0, .LC251
-	add	x0, x0, :lo12:.LC251
+	adrp	x0, .LC257
+	add	x0, x0, :lo12:.LC257
 	add	x1, x1, x25
 	ldrb	w2, [x1,2]
 	mov	w1, w20
@@ -19960,187 +21107,199 @@ ftl_sblk_dump:
 	mov	w0, 1
 	bl	buf_alloc
 	mov	x28, x0
-	adrp	x0, .LC197
-	str	w22, [x29,152]
-	add	x0, x0, :lo12:.LC197
-	str	x0, [x29,120]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	add	x0, x0, 712
+	adrp	x0, .LC201
+	str	w22, [x29,140]
+	add	x0, x0, :lo12:.LC201
 	str	x0, [x29,112]
-.L3137:
-	add	x21, x23, :lo12:.LANCHOR0
-	ldrh	w0, [x21,3324]
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, 712
+	str	x0, [x29,104]
+.L3284:
+	ldr	x0, [x29,152]
+	add	x21, x0, :lo12:.LANCHOR0
+	ldrh	w0, [x21,3596]
 	cmp	w0, w19
-	bls	.L3153
+	bls	.L3301
 	lsl	w0, w19, 1
-	str	wzr, [x29,156]
+	mov	w24, 0
+	add	w1, w0, w19
 	sub	w0, w0, #1
-	str	w0, [x29,132]
-.L3154:
+	sub	w1, w1, #1
+	str	w0, [x29,124]
+	str	w1, [x29,136]
+.L3302:
 	ldrb	w0, [x29,185]
-	ldr	w1, [x29,156]
-	cmp	w0, w1
-	bls	.L3151
-	mov	w24, 1
-.L3152:
-	cmp	w24, w26
-	ldr	w0, [x29,156]
-	bhi	.L3171
-	add	x1, x29, 176
-	add	x0, x1, x0, sxtw 1
-	ldrh	w2, [x0,16]
+	cmp	w0, w24
+	bls	.L3299
+	mov	w21, 1
+.L3300:
+	cmp	w21, w26
+	bhi	.L3320
+	add	x0, x29, 176
+	add	x0, x0, x24, sxtw 1
+	ldrh	w3, [x0,16]
 	mov	w0, 65535
-	cmp	w2, w0
-	beq	.L3138
-	add	x1, x23, :lo12:.LANCHOR0
+	cmp	w3, w0
+	beq	.L3285
+	ldr	x0, [x29,152]
 	cmp	w26, 3
-	ldrh	w0, [x1,3362]
-	mul	w0, w2, w0
-	add	w21, w0, w19
-	bne	.L3139
-	orr	w21, w21, w24, lsl 24
-	b	.L3140
-.L3139:
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w2, [x0,3634]
+	mul	w2, w3, w2
+	bne	.L3286
+	ldrb	w1, [x0,756]
+	cbz	w1, .L3287
+	ldr	w1, [x29,136]
+	b	.L3319
+.L3287:
+	add	w2, w2, w19
+	orr	w23, w2, w21, lsl 24
+	b	.L3288
+.L3286:
 	cmp	w26, 2
-	bne	.L3140
-	ldr	w3, [x29,132]
-	ldrb	w21, [x1,3281]
-	add	w0, w0, w3
-	add	w0, w0, w24
-	orr	w21, w0, w21, lsl 24
-.L3140:
+	add	w23, w2, w19
+	bne	.L3288
+	ldr	w1, [x29,124]
+.L3319:
+	ldrb	w9, [x0,3553]
+	add	w2, w2, w1
+	add	w2, w2, w21
+	orr	w23, w2, w9, lsl 24
+.L3288:
 	mov	w1, 1
-	str	w21, [x28,40]
+	str	w23, [x28,40]
 	mov	x0, x28
-	str	x2, [x29,104]
+	str	x3, [x29,96]
 	bl	sblk_read_page
 	ldr	x7, [x28,8]
-	mov	w3, w21
+	mov	w2, w19
 	ldr	x0, [x28,24]
-	ldr	w9, [x28,52]
+	ldr	w10, [x28,52]
 	ldr	w1, [x7,12]
 	str	w1, [sp]
-	mov	w4, w9
-	ldr	x2, [x29,104]
+	mov	w4, w10
+	ldr	x3, [x29,96]
 	ldr	w1, [x0]
 	str	w1, [sp,8]
-	str	x9, [x29,104]
+	str	x10, [x29,96]
 	ldr	w1, [x0,4]
 	str	w1, [sp,16]
 	ldr	w1, [x0,8]
 	str	w1, [sp,24]
-	mov	w1, w2
-	mov	w2, w19
+	mov	w1, w3
+	mov	w3, w23
 	ldr	w0, [x0,12]
 	str	w0, [sp,32]
-	ldr	x0, [x29,120]
+	ldr	x0, [x29,112]
 	ldr	w5, [x7]
 	ldr	w6, [x7,4]
 	ldr	w7, [x7,8]
 	bl	printk
-	ldr	x9, [x29,104]
-	cmp	w9, 512
-	beq	.L3158
-	cmn	w9, #1
-	bne	.L3142
-.L3158:
+	ldr	x10, [x29,96]
+	cmp	w10, 512
+	beq	.L3306
+	cmn	w10, #1
+	bne	.L3290
+.L3306:
 	mov	w0, 1
-	str	w0, [x29,152]
-.L3142:
-	add	x0, x23, :lo12:.LANCHOR0
+	str	w0, [x29,140]
+.L3290:
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x0, [x0,584]
 	add	x0, x0, x25
 	ldrb	w0, [x0,2]
 	and	w0, w0, 224
 	cmp	w0, 32
-	beq	.L3138
+	beq	.L3285
 	cmp	w0, 224
 	cset	w2, eq
-	cbnz	w2, .L3138
+	cbnz	w2, .L3285
 	ldr	x0, [x28,24]
-	str	x2, [x29,104]
+	str	x2, [x29,96]
 	ldr	w0, [x0,4]
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,172]
 	cmn	w0, #1
-	ldr	x2, [x29,104]
-	bne	.L3144
+	ldr	x2, [x29,96]
+	bne	.L3292
 	ldr	x0, [x28,24]
 	add	x1, x29, 172
 	ldr	w0, [x0,4]
 	bl	pm_log2phys
-.L3144:
+.L3292:
 	ldr	w0, [x29,172]
-	cmp	w0, w21
-	bne	.L3145
+	cmp	w0, w23
+	bne	.L3293
 	ldr	x2, [x28,24]
 	add	w22, w22, 1
-	adrp	x0, .LC252
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC252
+	adrp	x0, .LC258
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC258
 	mov	w3, w22
 	ldr	w2, [x2,4]
 	bl	printk
-.L3145:
+.L3293:
 	ldr	x0, [x29,144]
-	cbz	x0, .L3147
-	ubfiz	x21, x27, 2, 32
-	ldr	w2, [x0,x21]
+	cbz	x0, .L3295
+	ubfiz	x3, x27, 2, 32
+	ldr	w2, [x0,x3]
 	ldr	x0, [x28,24]
 	ldr	w0, [x0,4]
 	cmp	w0, w2
-	beq	.L3148
+	beq	.L3296
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3148
-	adrp	x0, .LC253
+	tbz	x0, 12, .L3296
+	adrp	x0, .LC259
 	mov	w1, w27
-	add	x0, x0, :lo12:.LC253
+	add	x0, x0, :lo12:.LC259
+	str	x3, [x29,96]
 	bl	printk
-.L3148:
+	ldr	x3, [x29,96]
+.L3296:
 	ldr	x0, [x29,144]
 	ldr	x1, [x28,24]
-	ldr	w0, [x0,x21]
+	ldr	w0, [x0,x3]
 	ldr	w1, [x1,4]
 	cmp	w1, w0
-	beq	.L3147
+	beq	.L3295
 	cmn	w0, #1
-	beq	.L3147
+	beq	.L3295
 	adrp	x0, .LC0
-	ldr	x1, [x29,112]
-	mov	w2, 1312
+	ldr	x1, [x29,104]
+	mov	w2, 1383
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3147:
+.L3295:
 	add	w27, w27, 1
-.L3138:
+.L3285:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L3300
+.L3320:
 	add	w24, w24, 1
 	uxth	w24, w24
-	b	.L3152
-.L3171:
-	add	w0, w0, 1
-	uxth	w0, w0
-	str	w0, [x29,156]
-	b	.L3154
-.L3151:
+	b	.L3302
+.L3299:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L3137
-.L3153:
+	b	.L3284
+.L3301:
 	mov	x0, x28
-	bl	buf_free
-	ldr	x3, [x29,136]
-	adrp	x0, .LC254
+	bl	zbuf_free
+	ldr	x3, [x29,128]
+	adrp	x0, .LC260
 	ldr	x2, [x21,600]
-	add	x0, x0, :lo12:.LC254
+	add	x0, x0, :lo12:.LC260
 	mov	w1, w20
 	ldrh	w2, [x2,x3,lsl 1]
 	mov	w3, w22
 	bl	printk
-	ldr	w0, [x29,152]
-.L3135:
+	ldr	w0, [x29,140]
+.L3282:
 	sub	sp, x29, #48
 	ldp	x19, x20, [sp,64]
 	ldp	x21, x22, [sp,80]
@@ -20155,7 +21314,7 @@ ftl_sblk_dump:
 	.global	zftl_read
 	.type	zftl_read, %function
 zftl_read:
-	sub	sp, sp, #176
+	sub	sp, sp, #192
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
 	stp	x19, x20, [sp,32]
@@ -20169,348 +21328,356 @@ zftl_read:
 	stp	x27, x28, [sp,96]
 	mov	w24, w2
 	mov	x22, x3
-	tbz	x0, 12, .L3173
-	adrp	x0, .LC255
+	tbz	x0, 12, .L3322
+	adrp	x0, .LC261
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC255
+	add	x0, x0, :lo12:.LC261
 	mov	w2, w21
 	mov	w3, w24
 	bl	printk
-.L3173:
-	cbnz	w19, .L3174
+.L3322:
+	cbnz	w19, .L3323
 	adrp	x0, .LANCHOR0+520
 	mov	w19, 24576
 	ldr	w2, [x0,#:lo12:.LANCHOR0+520]
-	b	.L3175
-.L3174:
+	b	.L3324
+.L3323:
 	cmp	w19, 3
 	mov	w0, -1
-	bhi	.L3176
+	bhi	.L3325
 	lsl	w19, w19, 13
 	mov	w2, 8192
-.L3175:
+.L3324:
 	add	w1, w21, w24
 	mov	w0, -1
 	cmp	w1, w2
-	bhi	.L3176
+	bhi	.L3325
+	adrp	x20, .LANCHOR0
 	add	w21, w19, w21
-	adrp	x19, .LANCHOR0
-	add	x1, x19, :lo12:.LANCHOR0
-	add	w27, w21, w24
-	str	wzr, [x29,140]
-	ldr	x2, [x1,2864]
+	add	x1, x20, :lo12:.LANCHOR0
+	add	w28, w21, w24
+	str	wzr, [x29,152]
+	ldr	x2, [x1,2880]
 	ldr	w0, [x2,24]
 	add	w0, w0, w24
 	str	w0, [x2,24]
-	ldrb	w0, [x1,2832]
-	sub	w1, w27, #1
-	udiv	w26, w21, w0
-	mov	w20, w26
+	ldrb	w0, [x1,2848]
+	udiv	w1, w21, w0
+	str	w1, [x29,156]
+	sub	w1, w28, #1
 	udiv	w0, w1, w0
-	str	w0, [x29,136]
-	sub	w23, w0, w26
+	ldr	w1, [x29,156]
+	str	w0, [x29,140]
+	sub	w23, w0, w1
+	mov	x19, x1
 	add	w23, w23, 1
 	adrp	x0, .LC0
 	add	x0, x0, :lo12:.LC0
 	str	x0, [x29,128]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
 	add	x0, x0, 728
 	str	x0, [x29,120]
-.L3177:
-	cbz	w23, .L3242
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w1, [x29,136]
-	cmp	w20, w26
+.L3326:
+	cbz	w23, .L3391
+	ldr	w1, [x29,156]
+	add	x0, x20, :lo12:.LANCHOR0
+	cmp	w19, w1
+	ldr	w1, [x29,140]
+	ldrb	w0, [x0,2848]
 	cset	w2, eq
-	cmp	w20, w1
-	ldrb	w0, [x0,2832]
-	cset	w28, eq
+	cmp	w19, w1
+	cset	w26, eq
 	uxth	w25, w0
-	cbnz	w28, .L3208
-	cbz	w2, .L3178
-	b	.L3241
-.L3208:
-	cbz	w2, .L3180
-.L3241:
-	udiv	w28, w21, w0
-	msub	w28, w28, w0, w21
+	cbnz	w26, .L3357
+	cbz	w2, .L3327
+	b	.L3390
+.L3357:
+	cbz	w2, .L3329
+.L3390:
+	udiv	w26, w21, w0
+	msub	w26, w26, w0, w21
 	uxth	w0, w24
-	uxth	w28, w28
-	sub	w25, w25, w28
+	uxth	w26, w26
+	sub	w25, w25, w26
 	uxth	w25, w25
 	cmp	w25, w24
 	csel	w25, w0, w25, hi
-	b	.L3178
-.L3180:
-	msub	w25, w0, w20, w27
-	mov	w28, w2
+	b	.L3327
+.L3329:
+	msub	w25, w0, w19, w28
+	mov	w26, w2
 	uxtb	w25, w25
-.L3178:
-	add	x1, x19, :lo12:.LANCHOR0
+.L3327:
+	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
-	add	x1, x1, 784
-.L3183:
+	add	x1, x1, 800
+.L3332:
 	ldr	w2, [x1,36]
-	cmp	w2, w20
-	bne	.L3181
+	cmp	w2, w19
+	bne	.L3330
 	ldrb	w2, [x1,2]
-	tbz	x2, 3, .L3181
-	add	x2, x19, :lo12:.LANCHOR0
+	tbz	x2, 3, .L3330
+	add	x2, x20, :lo12:.LANCHOR0
 	ubfiz	x1, x0, 6, 32
 	add	x0, x2, x1
-	ubfiz	x28, x28, 9, 16
+	ubfiz	x26, x26, 9, 16
 	lsl	w2, w25, 9
 	ubfiz	x25, x25, 9, 16
-	ldr	x1, [x0,792]
+	ldr	x1, [x0,808]
 	mov	x0, x22
 	add	x22, x22, x25
-	add	x1, x1, x28
+	add	x1, x1, x26
 	bl	ftl_memcpy
-	b	.L3182
-.L3181:
+	b	.L3331
+.L3330:
 	add	w0, w0, 1
 	add	x1, x1, 64
 	cmp	w0, 32
-	bne	.L3183
-	mov	w0, w20
+	bne	.L3332
+	mov	w0, w19
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,156]
+	str	w0, [x29,172]
 	cmn	w0, #1
-	bne	.L3184
-	mov	w0, w20
-	add	x1, x29, 156
+	bne	.L3333
+	mov	w0, w19
+	add	x1, x29, 172
 	mov	w2, 0
 	bl	pm_log2phys
-.L3184:
-	ldr	w0, [x29,156]
+.L3333:
+	ldr	w0, [x29,172]
 	cmn	w0, #1
-	bne	.L3185
+	bne	.L3334
 	mov	w25, 0
-.L3186:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+.L3335:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2848]
 	cmp	w25, w0
-	bcs	.L3182
-	madd	w0, w20, w0, w25
+	bcs	.L3331
+	madd	w0, w19, w0, w25
 	cmp	w0, w21
-	bcc	.L3187
-	cmp	w0, w27
-	bcs	.L3187
+	bcc	.L3336
+	cmp	w0, w28
+	bcs	.L3336
 	mov	x0, x22
 	mov	w1, 0
 	mov	w2, 512
 	add	x22, x22, 512
 	bl	ftl_memset
-.L3187:
+.L3336:
 	add	w25, w25, 1
-	b	.L3186
-.L3185:
+	b	.L3335
+.L3334:
 	mov	w0, 0
 	bl	buf_alloc
-	cbz	x0, .L3189
-	add	x2, x19, :lo12:.LANCHOR0
-	ldr	x3, [x2,2864]
+	cbz	x0, .L3338
+	add	x2, x20, :lo12:.LANCHOR0
+	ldr	x3, [x2,2880]
 	ldr	w2, [x3,40]
 	add	w2, w2, 1
 	str	w2, [x3,40]
-	ldr	w2, [x29,156]
+	ldr	w2, [x29,172]
 	strb	w25, [x0,56]
 	ubfiz	x25, x25, 9, 16
 	str	x22, [x0,16]
 	add	x22, x22, x25
 	str	w2, [x0,40]
 	str	w2, [x0,44]
-	str	w20, [x0,36]
-	strb	w28, [x0,57]
+	str	w19, [x0,36]
+	strb	w26, [x0,57]
 	bl	zftl_add_read_buf
-.L3182:
-	add	w20, w20, 1
+.L3331:
+	add	w19, w19, 1
 	sub	w23, w23, #1
-.L3189:
-	cbz	w23, .L3209
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2834]
+.L3338:
+	cbz	w23, .L3358
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2850]
 	cmp	w0, 2
-	bhi	.L3177
-.L3209:
-	add	x2, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x2,3908]
-	cbz	w1, .L3177
-	add	x0, x2, 784
-	ldrb	w2, [x2,3907]
+	bhi	.L3326
+.L3358:
+	adrp	x25, .LANCHOR3
+	str	x25, [x29,144]
+	add	x2, x25, :lo12:.LANCHOR3
+	ldrb	w1, [x2,-172]
+	cbz	w1, .L3326
+	ldrb	w2, [x2,-173]
+	add	x26, x20, :lo12:.LANCHOR0
+	add	x0, x26, 800
+	mov	x25, x26
 	add	x0, x0, x2, lsl 6
 	bl	sblk_read_page
-.L3192:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x0,3908]
-	cbz	w1, .L3243
-	ldrb	w0, [x0,3907]
+.L3341:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR3
+	ldrb	w1, [x0,-172]
+	cbz	w1, .L3392
+	ldrb	w0, [x0,-173]
 	cmp	w0, 255
-	bne	.L3193
+	bne	.L3342
 	ldr	x1, [x29,120]
-	mov	w2, 1080
+	mov	w2, 1088
 	ldr	x0, [x29,128]
 	bl	printk
 	bl	dump_stack
-.L3193:
-	add	x5, x19, :lo12:.LANCHOR0
-	add	x1, x5, 784
-	ldrb	w28, [x5,3907]
-	lsl	x0, x28, 6
-	add	x25, x1, x0
-	ldrb	w0, [x1,x0]
-	ldr	w6, [x25,52]
-	strb	w0, [x5,3907]
-	cmn	w6, #1
-	bne	.L3194
-	ldr	x1, [x5,608]
-	str	w6, [x29,140]
+.L3342:
+	ldr	x0, [x29,144]
+	add	x1, x0, :lo12:.LANCHOR3
+	add	x0, x25, 800
+	ldrb	w27, [x1,-173]
+	lsl	x2, x27, 6
+	add	x26, x0, x2
+	ldrb	w0, [x0,x2]
+	ldr	w5, [x26,52]
+	strb	w0, [x1,-173]
+	cmn	w5, #1
+	bne	.L3343
+	ldr	x1, [x25,608]
+	str	w5, [x29,152]
 	ldr	w0, [x1,552]
 	add	w0, w0, 1
 	str	w0, [x1,552]
-	b	.L3195
-.L3194:
-	cmp	w6, 256
-	bne	.L3195
-	ldrh	w0, [x5,3264]
-	mov	w1, 21
-	mov	w7, 1
-	ldr	w3, [x25,40]
-	sub	w4, w1, w0
-	ldr	w2, [x25,36]
-	lsl	w4, w7, w4
+	b	.L3344
+.L3343:
+	cmp	w5, 256
+	bne	.L3344
+	ldrb	w4, [x25,744]
+	mov	w1, 24
+	ldrh	w0, [x25,3536]
+	mov	w6, 1
+	sub	w4, w1, w4
+	ldr	w3, [x26,40]
+	sub	w4, w4, w0
+	ldr	w2, [x26,36]
+	lsl	w4, w6, w4
 	lsr	w0, w3, w0
 	sub	w4, w4, #1
-	str	x6, [x29,96]
+	str	x5, [x29,96]
 	and	w0, w4, w0
-	ldrb	w4, [x5,3266]
-	str	x7, [x29,104]
+	ldrb	w4, [x25,3538]
+	str	x6, [x29,104]
 	udiv	w4, w0, w4
-	adrp	x0, .LC256
-	add	x0, x0, :lo12:.LC256
+	adrp	x0, .LC262
+	add	x0, x0, :lo12:.LC262
 	str	x4, [x29,112]
 	uxth	w1, w4
 	bl	printk
 	ldr	x4, [x29,112]
 	mov	w2, 0
-	ldr	x7, [x29,104]
+	ldr	x6, [x29,104]
 	mov	w0, w4
-	mov	w1, w7
+	mov	w1, w6
 	bl	gc_add_sblk
-	ldr	x6, [x29,96]
-.L3195:
-	add	x0, x19, :lo12:.LANCHOR0
-	cmn	w6, #1
-	add	x0, x0, 784
-	cset	w10, eq
-	add	x0, x0, x28, lsl 6
+	ldr	x5, [x29,96]
+.L3344:
+	add	x0, x25, 800
+	cmn	w5, #1
+	add	x0, x0, x27, lsl 6
+	cset	w11, eq
 	ldr	x1, [x0,24]
 	ldr	w0, [x0,36]
 	ldr	w1, [x1,4]
 	cmp	w1, w0
-	bne	.L3210
-	cbz	w10, .L3196
-.L3210:
-	add	x11, x19, :lo12:.LANCHOR0
-	mov	w2, w6
-	add	x9, x11, 784
-	str	x10, [x29,96]
-	add	x9, x9, x28, lsl 6
+	bne	.L3359
+	cbz	w11, .L3345
+.L3359:
+	ldr	x1, [x25,608]
+	add	x10, x25, 800
+	add	x10, x10, x27, lsl 6
+	mov	w2, w5
+	add	x10, x10, 32
 	str	x11, [x29,104]
-	ldr	x1, [x11,608]
-	add	x9, x9, 32
 	ldr	w0, [x1,552]
 	add	w0, w0, 1
 	str	w0, [x1,552]
-	ldr	x7, [x9,-8]
-	ldrb	w1, [x9,-31]
+	ldr	x7, [x10,-8]
+	ldrb	w1, [x10,-31]
 	ldr	w0, [x7,12]
 	str	w0, [sp]
-	adrp	x0, .LC257
-	add	x0, x0, :lo12:.LC257
-	ldr	w3, [x9,4]
-	ldr	w4, [x9,8]
+	adrp	x0, .LC263
+	add	x0, x0, :lo12:.LC263
+	ldr	w3, [x10,4]
+	ldr	w4, [x10,8]
 	ldr	w5, [x7]
 	ldr	w6, [x7,4]
 	ldr	w7, [x7,8]
-	str	x9, [x29,112]
+	str	x10, [x29,112]
 	bl	printk
-	ldr	x11, [x29,104]
-	mov	w1, 21
-	ldr	x9, [x29,112]
-	ldrh	w0, [x11,3264]
-	sub	w2, w1, w0
+	ldrb	w2, [x25,744]
+	mov	w1, 24
+	ldrh	w0, [x25,3536]
+	ldr	x10, [x29,112]
+	sub	w2, w1, w2
+	sub	w2, w2, w0
 	mov	w1, 1
 	lsl	w2, w1, w2
-	ldr	w1, [x9,8]
+	ldr	w1, [x10,8]
 	sub	w2, w2, #1
 	lsr	w0, w1, w0
-	ldrb	w1, [x11,3266]
+	ldrb	w1, [x25,3538]
 	and	w0, w2, w0
 	udiv	w0, w0, w1
 	mov	x1, 0
 	bl	ftl_sblk_dump
-	ldr	x10, [x29,96]
-.L3196:
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 784
-	add	x0, x0, x28, lsl 6
+	ldr	x11, [x29,104]
+.L3345:
+	add	x0, x25, 800
+	add	x0, x0, x27, lsl 6
 	ldr	x1, [x0,24]
 	ldr	w0, [x0,36]
 	ldr	w1, [x1,4]
 	cmp	w1, w0
-	bne	.L3211
-	cbz	w10, .L3198
-.L3211:
+	bne	.L3360
+	cbz	w11, .L3347
+.L3360:
 	ldr	x1, [x29,120]
-	mov	w2, 1101
+	mov	w2, 1109
 	ldr	x0, [x29,128]
 	bl	printk
 	bl	dump_stack
-.L3198:
-	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x1, 784
-	add	x8, x0, x28, lsl 6
-	ldrb	w1, [x1,2832]
-	ldrb	w2, [x8,56]
+.L3347:
+	add	x0, x25, 800
+	ldrb	w1, [x25,2848]
+	add	x9, x0, x27, lsl 6
+	ldrb	w2, [x9,56]
 	cmp	w1, w2
-	bls	.L3200
-	ldrb	w3, [x8,57]
+	bls	.L3349
+	ldrb	w3, [x9,57]
 	lsl	w2, w2, 9
-	ldr	x1, [x8,8]
-	ldr	x0, [x8,16]
+	ldr	x1, [x9,8]
+	ldr	x0, [x9,16]
 	add	x1, x1, x3, lsl 9
 	bl	ftl_memcpy
-	b	.L3201
-.L3200:
-	ldrb	w0, [x8,2]
+	b	.L3350
+.L3349:
+	ldrb	w0, [x9,2]
 	and	w0, w0, -9
-	strb	w0, [x8,2]
-.L3201:
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	x1, x25
-	add	x0, x2, 3909
+	strb	w0, [x9,2]
+.L3350:
+	ldr	x0, [x29,144]
+	mov	x1, x26
+	add	x2, x0, :lo12:.LANCHOR3
 	str	x2, [x29,112]
+	sub	x0, x2, #171
 	bl	buf_remove_buf
-	mov	x0, x25
-	bl	buf_free
+	mov	x0, x26
+	bl	zbuf_free
 	ldr	x2, [x29,112]
-	ldrb	w0, [x2,3908]
+	ldrb	w0, [x2,-172]
 	sub	w0, w0, #1
-	strb	w0, [x2,3908]
-	b	.L3192
-.L3243:
+	strb	w0, [x2,-172]
+	b	.L3341
+.L3392:
 	mov	w2, -1
-	strb	w1, [x0,3908]
-	strb	w2, [x0,3907]
-	b	.L3177
-.L3242:
+	strb	w1, [x0,-172]
+	strb	w2, [x0,-173]
+	b	.L3326
+.L3391:
 	bl	timer_get_time
-	adrp	x1, .LANCHOR7-64
-	str	w0, [x1,#:lo12:.LANCHOR7-64]
-	ldr	w0, [x29,140]
-.L3176:
+	adrp	x1, .LANCHOR6+256
+	str	w0, [x1,#:lo12:.LANCHOR6+256]
+	ldr	w0, [x29,152]
+.L3325:
 	sub	sp, x29, #16
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
@@ -20518,7 +21685,7 @@ zftl_read:
 	ldp	x25, x26, [sp,80]
 	ldp	x27, x28, [sp,96]
 	ldp	x29, x30, [sp,16]
-	add	sp, sp, 176
+	add	sp, sp, 192
 	ret
 	.size	zftl_read, .-zftl_read
 	.align	2
@@ -20566,146 +21733,147 @@ zftl_debug_proc_write:
 	str	x19, [x29,104]
 	stp	x23, x24, [sp,80]
 	stp	x25, x26, [sp,96]
-	mov	x21, x2
-	bhi	.L3247
+	mov	x22, x2
+	bhi	.L3396
 	mov	x0, x19
 	bl	rk_copy_from_user
-	mov	x22, x0
+	mov	x21, x0
 	mov	x0, -14
-	cbnz	x22, .L3247
-	adrp	x0, .LC258
+	cbnz	x21, .L3396
+	adrp	x0, .LC264
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC258
-	strb	w22, [x19,x21]
+	add	x0, x0, :lo12:.LC264
+	strb	w21, [x19,x22]
 	bl	printk
-	adrp	x0, .LC259
+	adrp	x0, .LC265
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC259
+	add	x0, x0, :lo12:.LC265
 	mov	w2, 1
 	mov	w3, 16
 	bl	rknand_print_hex
 	bl	rknand_device_lock
-	adrp	x1, .LC260
+	adrp	x1, .LC266
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC260
+	add	x1, x1, :lo12:.LC266
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3248
+	cbnz	w0, .L3397
 	adrp	x23, .LANCHOR0
-	adrp	x0, .LC261
+	adrp	x0, .LC267
 	add	x19, x23, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC261
+	add	x0, x0, :lo12:.LC267
 	mov	w2, 4
-	adrp	x20, .LANCHOR4
-	ldr	x3, [x19,2864]
+	adrp	x20, .LANCHOR3
+	ldr	x3, [x19,2880]
 	add	x1, x3, 704
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
-	add	x3, x20, :lo12:.LANCHOR4
-	ldr	x1, [x19,2864]
-	adrp	x0, .LC262
+	add	x3, x20, :lo12:.LANCHOR3
+	ldr	x1, [x19,2880]
+	adrp	x0, .LC268
 	mov	w2, 2
-	add	x0, x0, :lo12:.LC262
+	add	x0, x0, :lo12:.LC268
 	add	x1, x1, 416
-	ldrh	w3, [x3,1180]
-	mov	w19, w22
-	mov	w22, 65535
+	ldrh	w3, [x3,1456]
+	mov	w19, w21
+	mov	w21, 65535
 	bl	rknand_print_hex
-.L3249:
-	add	x0, x20, :lo12:.LANCHOR4
-	ldrh	w0, [x0,1180]
+.L3398:
+	add	x0, x20, :lo12:.LANCHOR3
+	ldrh	w0, [x0,1456]
 	cmp	w19, w0
-	bge	.L3252
+	bge	.L3401
 	mov	w0, 300
 	bl	msleep
 	add	x0, x23, :lo12:.LANCHOR0
-	ldr	x0, [x0,2864]
+	ldr	x0, [x0,2880]
 	add	x0, x0, x19, sxtw 1
 	ldrh	w0, [x0,416]
-	cmp	w0, w22
-	beq	.L3250
+	cmp	w0, w21
+	beq	.L3399
 	mov	x1, 0
 	bl	ftl_sblk_dump
-.L3250:
+.L3399:
 	add	w19, w19, 1
-	b	.L3249
-.L3248:
-	adrp	x1, .LC263
+	b	.L3398
+.L3397:
+	adrp	x1, .LC269
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC263
+	add	x1, x1, :lo12:.LC269
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3253
+	cbnz	w0, .L3402
 	adrp	x23, .LANCHOR0
-	adrp	x0, .LC261
+	adrp	x0, .LC267
 	add	x20, x23, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC261
+	add	x0, x0, :lo12:.LC267
 	mov	w2, 4
-	add	x22, x29, 192
-	adrp	x24, .LC266
-	ldr	x3, [x20,2864]
-	add	x24, x24, :lo12:.LC266
+	adrp	x21, .LANCHOR3
+	add	x21, x21, :lo12:.LANCHOR3
+	adrp	x25, .LC272
+	ldr	x3, [x20,2880]
+	add	x25, x25, :lo12:.LC272
 	add	x1, x3, 704
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
-	adrp	x3, .LANCHOR4+1180
-	ldr	x1, [x20,2864]
-	adrp	x0, .LC262
+	ldr	x1, [x20,2880]
+	adrp	x0, .LC268
+	ldrh	w3, [x21,1456]
 	mov	w2, 2
-	add	x0, x0, :lo12:.LC262
+	add	x0, x0, :lo12:.LC268
 	add	x1, x1, 416
-	ldrh	w3, [x3,#:lo12:.LANCHOR4+1180]
+	add	x20, x29, 192
 	bl	rknand_print_hex
-	adrp	x0, .LC264
+	adrp	x0, .LC270
 	add	x1, x19, 7
-	add	x0, x0, :lo12:.LC264
-	str	x1, [x22,-88]!
-	add	x19, x20, 3920
-	mov	x20, x23
+	add	x0, x0, :lo12:.LC270
+	str	x1, [x20,-88]!
+	mov	x19, x23
+	adrp	x23, .LC271
 	bl	printk
-	adrp	x23, .LC265
+	add	x23, x23, :lo12:.LC271
 	ldr	x0, [x29,104]
-	mov	x1, x22
-	add	x25, x19, 512
-	add	x23, x23, :lo12:.LC265
-	bl	rk_simple_strtoull.constprop.33
-	mov	w22, w0
+	mov	x1, x20
+	sub	x20, x21, #160
+	add	x21, x21, 352
+	bl	rk_simple_strtoull.constprop.34
+	mov	w24, w0
 	str	w0, [x29,100]
 	uxth	w26, w0
-.L3255:
-	ldrh	w1, [x19]
+.L3404:
+	ldrh	w1, [x20]
 	mov	x0, x23
-	ldrh	w2, [x19,2]
+	ldrh	w2, [x20,2]
 	bl	printk
-	ldrh	w0, [x19]
+	ldrh	w0, [x20]
 	cmp	w0, w26
-	bne	.L3254
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x1, [x19,8]
+	bne	.L3403
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x20,8]
 	mov	w2, 4
-	ldrb	w3, [x0,2832]
-	mov	x0, x24
+	ldrb	w3, [x0,2848]
+	mov	x0, x25
 	lsl	w3, w3, 7
 	bl	rknand_print_hex
-.L3254:
-	add	x19, x19, 16
-	cmp	x19, x25
-	bne	.L3255
+.L3403:
+	add	x20, x20, 16
+	cmp	x20, x21
+	bne	.L3404
 	mov	w0, 300
-	add	x20, x20, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
 	bl	msleep
 	mov	w0, 1
 	bl	buf_alloc
-	mov	x19, x0
-	ldr	x1, [x20,2864]
-	add	x1, x1, x22, uxth 2
+	mov	x20, x0
+	ldr	x1, [x19,2880]
+	add	x1, x1, x24, uxth 2
 	ldr	w1, [x1,704]
 	str	w1, [x29,100]
 	str	w1, [x0,40]
 	mov	w1, 1
 	bl	sblk_read_page
-	ldr	x7, [x19,24]
-	ldr	x6, [x19,8]
+	ldr	x7, [x20,24]
+	ldr	x6, [x20,8]
 	ldr	w1, [x29,100]
 	ldr	w0, [x7,4]
 	str	w0, [sp]
@@ -20713,71 +21881,73 @@ zftl_debug_proc_write:
 	str	w0, [sp,8]
 	ldr	w0, [x7,12]
 	str	w0, [sp,16]
-	adrp	x0, .LC228
-	add	x0, x0, :lo12:.LC228
+	adrp	x0, .LC234
+	add	x0, x0, :lo12:.LC234
 	ldr	w3, [x6]
-	ldr	w2, [x19,52]
 	ldr	w4, [x6,4]
 	ldr	w5, [x6,8]
-	ldr	w7, [x7]
+	ldr	w2, [x20,52]
 	ldr	w6, [x6,12]
+	ldr	w7, [x7]
 	bl	printk
-	ldrb	w3, [x20,2832]
-	adrp	x0, .LC267
-	add	x0, x0, :lo12:.LC267
-	ldr	x1, [x19,8]
+	ldrb	w3, [x19,2848]
+	adrp	x0, .LC273
+	ldr	x1, [x20,8]
+	add	x0, x0, :lo12:.LC273
 	mov	w2, 4
 	lsl	w3, w3, 7
-	b	.L3270
-.L3253:
-	adrp	x1, .LC268
+	bl	rknand_print_hex
+	mov	x0, x20
+	b	.L3419
+.L3402:
+	adrp	x1, .LC274
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC268
+	add	x1, x1, :lo12:.LC274
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3256
+	cbnz	w0, .L3405
 	bl	dump_ftl_info
-	b	.L3252
-.L3256:
-	adrp	x1, .LC269
+	b	.L3401
+.L3405:
+	adrp	x1, .LC275
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC269
+	add	x1, x1, :lo12:.LC275
 	mov	x2, 9
 	bl	memcmp
-	cbnz	w0, .L3257
+	cbnz	w0, .L3406
 	add	x1, x29, 192
 	add	x0, x19, 9
 	str	x0, [x1,-88]!
-	bl	rk_simple_strtoull.constprop.33
+	bl	rk_simple_strtoull.constprop.34
 	str	w0, [x29,100]
-	adrp	x1, .LANCHOR0+3360
-	strh	w0, [x1,#:lo12:.LANCHOR0+3360]
+	adrp	x1, .LANCHOR0+3632
+	strh	w0, [x1,#:lo12:.LANCHOR0+3632]
 	bl	dump_all_list_info
-	b	.L3252
-.L3257:
-	adrp	x1, .LC270
+	b	.L3401
+.L3406:
+	adrp	x1, .LC276
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC270
+	add	x1, x1, :lo12:.LC276
 	mov	x2, 8
 	bl	memcmp
-	cbz	w0, .L3252
-	adrp	x1, .LC271
+	cbz	w0, .L3401
+	adrp	x1, .LC277
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC271
+	add	x1, x1, :lo12:.LC277
 	mov	x2, 8
 	bl	memcmp
-	cbnz	w0, .L3259
+	cbnz	w0, .L3408
 	add	x20, x29, 192
-	adrp	x0, .LC264
+	adrp	x0, .LC270
 	add	x1, x19, 8
-	add	x0, x0, :lo12:.LC264
+	add	x0, x0, :lo12:.LC270
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
-	bl	rk_simple_strtoull.constprop.33
+	bl	rk_simple_strtoull.constprop.34
 	str	w0, [x29,100]
 	mov	w0, 1
 	bl	buf_alloc
@@ -20795,126 +21965,108 @@ zftl_debug_proc_write:
 	str	w0, [sp,8]
 	ldr	w0, [x7,12]
 	str	w0, [sp,16]
-	adrp	x0, .LC228
-	add	x0, x0, :lo12:.LC228
-	ldr	w3, [x6]
+	adrp	x0, .LC234
+	add	x0, x0, :lo12:.LC234
 	ldr	w4, [x6,4]
 	ldr	w5, [x6,8]
-	ldr	w2, [x19,52]
-	ldr	w6, [x6,12]
+	ldr	w3, [x6]
 	ldr	w7, [x7]
+	ldr	w6, [x6,12]
+	ldr	w2, [x19,52]
 	bl	printk
-	ldrb	w3, [x20,2832]
-	adrp	x0, .LC223
+	ldrb	w3, [x20,2848]
+	adrp	x0, .LC229
 	ldr	x1, [x19,8]
-	add	x0, x0, :lo12:.LC223
+	add	x0, x0, :lo12:.LC229
 	mov	w2, 4
 	lsl	w3, w3, 7
 	bl	rknand_print_hex
-	ldrb	w3, [x20,2832]
-	adrp	x0, .LC224
+	ldrb	w3, [x20,2848]
+	adrp	x0, .LC230
 	ldr	x1, [x19,24]
-	add	x0, x0, :lo12:.LC224
+	add	x0, x0, :lo12:.LC230
 	mov	w2, 4
 	lsl	w3, w3, 1
-.L3270:
 	bl	rknand_print_hex
 	mov	x0, x19
-	bl	buf_free
-	b	.L3252
-.L3259:
-	adrp	x1, .LC272
+.L3419:
+	bl	zbuf_free
+	b	.L3401
+.L3408:
+	adrp	x1, .LC278
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC272
+	add	x1, x1, :lo12:.LC278
 	mov	x2, 8
 	bl	memcmp
-	cbnz	w0, .L3260
+	cbnz	w0, .L3409
 	add	x20, x29, 192
-	adrp	x0, .LC264
+	adrp	x0, .LC270
 	add	x1, x19, 8
-	add	x0, x0, :lo12:.LC264
+	add	x0, x0, :lo12:.LC270
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
-	bl	rk_simple_strtoull.constprop.33
+	bl	rk_simple_strtoull.constprop.34
 	str	w0, [x29,100]
-	mov	x1, x22
+	mov	x1, x21
 	bl	ftl_sblk_dump
-	b	.L3252
-.L3260:
-	adrp	x1, .LC273
+	b	.L3401
+.L3409:
+	adrp	x1, .LC279
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC273
+	add	x1, x1, :lo12:.LC279
 	mov	x2, 10
 	bl	memcmp
-	cbnz	w0, .L3261
+	cbnz	w0, .L3410
 	add	x20, x29, 192
-	adrp	x0, .LC264
+	adrp	x0, .LC270
 	add	x1, x19, 10
-	add	x0, x0, :lo12:.LC264
+	add	x0, x0, :lo12:.LC270
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
-	bl	rk_simple_strtoull.constprop.33
+	bl	rk_simple_strtoull.constprop.34
 	str	w0, [x29,100]
 	adrp	x1, .LANCHOR2
 	str	w0, [x1,#:lo12:.LANCHOR2]
-	b	.L3252
-.L3261:
-	adrp	x1, .LC274
+	b	.L3401
+.L3410:
+	adrp	x1, .LC280
 	mov	x2, 8
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC274
+	add	x1, x1, :lo12:.LC280
 	bl	memcmp
 	mov	w2, w0
 	str	x2, [x29,88]
-	cbnz	w0, .L3262
+	cbnz	w0, .L3411
 	add	x1, x19, 8
-	adrp	x0, .LC264
+	adrp	x0, .LC270
 	add	x19, x29, 192
-	add	x0, x0, :lo12:.LC264
+	add	x0, x0, :lo12:.LC270
 	str	x1, [x19,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x19
-	bl	rk_simple_strtoull.constprop.33
+	bl	rk_simple_strtoull.constprop.34
 	mov	w19, w0
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,100]
 	cmn	w0, #1
 	ldr	x2, [x29,88]
-	bne	.L3263
+	bne	.L3412
 	mov	w0, w19
 	add	x1, x29, 100
 	bl	pm_log2phys
-.L3263:
-	adrp	x0, .LC275
+.L3412:
+	adrp	x0, .LC281
 	ldr	w2, [x29,100]
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC275
-	bl	printk
-	b	.L3252
-.L3262:
-	adrp	x0, .LC276
-	add	x0, x0, :lo12:.LC276
-	bl	printk
-	adrp	x0, .LC277
-	add	x0, x0, :lo12:.LC277
-	bl	printk
-	adrp	x0, .LC278
-	add	x0, x0, :lo12:.LC278
-	bl	printk
-	adrp	x0, .LC279
-	add	x0, x0, :lo12:.LC279
-	bl	printk
-	adrp	x0, .LC280
-	add	x0, x0, :lo12:.LC280
-	bl	printk
-	adrp	x0, .LC281
 	add	x0, x0, :lo12:.LC281
 	bl	printk
+	b	.L3401
+.L3411:
 	adrp	x0, .LC282
 	add	x0, x0, :lo12:.LC282
 	bl	printk
@@ -20924,10 +22076,28 @@ zftl_debug_proc_write:
 	adrp	x0, .LC284
 	add	x0, x0, :lo12:.LC284
 	bl	printk
-.L3252:
+	adrp	x0, .LC285
+	add	x0, x0, :lo12:.LC285
+	bl	printk
+	adrp	x0, .LC286
+	add	x0, x0, :lo12:.LC286
+	bl	printk
+	adrp	x0, .LC287
+	add	x0, x0, :lo12:.LC287
+	bl	printk
+	adrp	x0, .LC288
+	add	x0, x0, :lo12:.LC288
+	bl	printk
+	adrp	x0, .LC289
+	add	x0, x0, :lo12:.LC289
+	bl	printk
+	adrp	x0, .LC290
+	add	x0, x0, :lo12:.LC290
+	bl	printk
+.L3401:
 	bl	rknand_device_unlock
-	mov	x0, x21
-.L3247:
+	mov	x0, x22
+.L3396:
 	sub	sp, x29, #32
 	ldp	x19, x20, [sp,48]
 	ldp	x21, x22, [sp,64]
@@ -20951,121 +22121,122 @@ gc_check_data_one_wl:
 	stp	x23, x24, [sp,64]
 	stp	x25, x26, [sp,80]
 	stp	x27, x28, [sp,96]
-	ldr	x0, [x20,2904]
+	ldr	x0, [x20,2920]
 	ldr	x23, [x20,608]
-	add	x20, x20, 2896
-	cbnz	x0, .L3272
+	add	x20, x20, 2912
+	cbnz	x0, .L3421
 	mov	w0, 1
 	bl	buf_alloc
 	str	x0, [x20,8]
-.L3272:
+.L3421:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x20, [x0,2904]
-	cbnz	x20, .L3273
-	adrp	x1, .LANCHOR3
+	ldr	x20, [x0,2920]
+	cbnz	x20, .L3422
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 494
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 613
 	add	x1, x1, 744
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3273:
+.L3422:
 	mov	w24, 0
 	add	x25, x23, 80
 	add	x21, x19, :lo12:.LANCHOR0
-	adrp	x27, .LANCHOR4
-.L3274:
+	adrp	x27, .LANCHOR3
+.L3423:
 	ldrb	w0, [x25,9]
 	cmp	w24, w0
-	bge	.L3297
+	bge	.L3450
 	mov	w22, 1
 	sxtw	x28, w24
-.L3283:
-	add	x0, x21, 2896
-	ldrh	w1, [x0,20]
-	cmp	w22, w1
-	bgt	.L3298
-	add	x1, x28, 8
-	ldrh	w2, [x21,3362]
-	ldrh	w0, [x0,16]
-	ldrh	w1, [x25,x1,lsl 1]
-	mul	w1, w1, w2
-	ldrb	w2, [x21,3281]
-	cmp	w2, 3
-	bne	.L3275
-	add	w1, w1, w0
-	orr	w1, w1, w22, lsl 24
-	b	.L3296
-.L3275:
-	cmp	w2, 2
-	bne	.L3277
-	sub	w0, w0, #1
-	add	w1, w0, w1
-	add	w1, w1, w22
-	orr	w1, w1, 33554432
-	b	.L3296
-.L3277:
-	add	w1, w1, w0
-.L3296:
-	str	w1, [x20,40]
-	mov	x0, x20
+.L3433:
+	add	x2, x21, 2912
+	ldrh	w0, [x2,20]
+	cmp	w22, w0
+	bgt	.L3451
+	add	x0, x28, 8
+	ldrh	w1, [x21,3634]
+	ldrh	w0, [x25,x0,lsl 1]
+	mul	w0, w0, w1
+	ldrb	w1, [x21,3553]
+	cmp	w1, 2
+	beq	.L3424
+	ldrb	w3, [x21,756]
+	cbz	w3, .L3425
+.L3424:
+	ldrh	w2, [x21,2928]
+	sub	w2, w2, #1
+	add	w0, w2, w0
+	add	w0, w0, w22
+	orr	w0, w0, w1, lsl 24
+	b	.L3427
+.L3425:
+	cmp	w1, 3
+	ldrh	w1, [x2,16]
+	add	w0, w0, w1
+	bne	.L3427
+	orr	w0, w0, w22, lsl 24
+.L3427:
+	str	w0, [x20,40]
 	mov	w1, 1
+	mov	x0, x20
 	bl	sblk_read_page
 	ldr	w0, [x20,52]
 	cmn	w0, #1
-	beq	.L3278
-	add	x2, x27, :lo12:.LANCHOR4
-	ldrh	w0, [x21,2918]
+	beq	.L3428
+	add	x2, x27, :lo12:.LANCHOR3
+	ldrh	w0, [x21,2934]
 	ldr	x1, [x20,24]
 	lsl	x0, x0, 2
-	ldr	x3, [x2,1152]
+	ldr	x3, [x2,1424]
 	ldr	w4, [x3,x0]
 	ldr	w3, [x1,4]
 	cmp	w4, w3
-	bne	.L3278
-	ldr	x2, [x2,1160]
+	bne	.L3428
+	ldr	x2, [x2,1432]
 	ldr	w2, [x2,x0]
 	ldr	w0, [x1,8]
 	cmp	w2, w0
-	beq	.L3279
-.L3278:
-	add	x26, x27, :lo12:.LANCHOR4
-	ldrh	w0, [x21,2918]
-	add	x4, x21, 2896
-	ldr	x1, [x26,1152]
+	beq	.L3429
+.L3428:
+	add	x26, x27, :lo12:.LANCHOR3
+	ldrh	w0, [x21,2934]
+	add	x4, x21, 2912
+	ldr	x1, [x26,1424]
 	ldr	w0, [x1,x0,lsl 2]
 	cmn	w0, #1
-	beq	.L3279
+	beq	.L3429
 	ldrb	w5, [x25,9]
-	adrp	x0, .LC285
-	ldrh	w3, [x21,3298]
-	add	x0, x0, :lo12:.LC285
+	adrp	x0, .LC291
+	ldrh	w3, [x21,3570]
+	add	x0, x0, :lo12:.LC291
 	mov	w2, 4
 	str	x4, [x29,104]
 	mul	w3, w5, w3
 	bl	rknand_print_hex
 	ldrb	w5, [x25,9]
-	adrp	x0, .LC286
-	ldrh	w3, [x21,3298]
-	add	x0, x0, :lo12:.LC286
-	ldr	x1, [x26,1160]
+	adrp	x0, .LC292
+	ldrh	w3, [x21,3570]
+	add	x0, x0, :lo12:.LC292
+	ldr	x1, [x26,1432]
 	mov	w2, 4
 	mul	w3, w5, w3
 	bl	rknand_print_hex
 	adrp	x0, .LANCHOR2
 	ldr	x4, [x29,104]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 10, .L3280
+	tbz	x0, 10, .L3430
 	ldr	x7, [x20,24]
 	ldrh	w4, [x4,22]
-	ldr	x5, [x26,1160]
+	ldr	x5, [x26,1432]
 	ldr	w0, [x7,12]
 	lsl	x4, x4, 2
-	ldr	x3, [x26,1152]
+	ldr	x3, [x26,1424]
 	str	w0, [sp]
-	adrp	x0, .LC287
-	add	x0, x0, :lo12:.LC287
+	adrp	x0, .LC293
+	add	x0, x0, :lo12:.LC293
 	ldr	w3, [x3,x4]
 	ldr	w6, [x7,4]
 	ldr	w4, [x5,x4]
@@ -21074,38 +22245,52 @@ gc_check_data_one_wl:
 	ldr	w2, [x20,52]
 	ldr	w7, [x7,8]
 	bl	printk
-.L3280:
+.L3430:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	x1, 0
 	ldr	x0, [x19,608]
 	ldrh	w0, [x0,80]
 	bl	ftl_sblk_dump
-	ldr	x0, [x19,600]
 	ldrh	w1, [x23,80]
+	ldr	x0, [x19,600]
 	strh	wzr, [x0,x1,lsl 1]
-	mov	w0, -1
-	b	.L3281
-.L3279:
-	ldrh	w0, [x21,2918]
+	ldr	x1, [x19,608]
+	ldr	w0, [x1,556]
+	add	w0, w0, 1
+	str	w0, [x1,556]
+	ldr	x0, [x19,2880]
+	mov	w19, -1
+	ldr	w1, [x0,156]
+	mov	w0, 20041
+	movk	w0, 0x444b, lsl 16
+	cmp	w1, w0
+	bne	.L3431
+	ldr	w0, [x20,40]
+	bl	ftl_mask_bad_block
+	b	.L3431
+.L3429:
+	ldrh	w0, [x21,2934]
 	add	w22, w22, 1
 	add	w0, w0, 1
-	strh	w0, [x21,2918]
-	b	.L3283
-.L3298:
+	strh	w0, [x21,2934]
+	b	.L3433
+.L3451:
 	add	w24, w24, 1
-	b	.L3274
-.L3297:
+	b	.L3423
+.L3450:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x19,2912]
-	ldrb	w3, [x19,3282]
+	add	x2, x19, 2912
+	ldrh	w1, [x19,2928]
 	add	w0, w1, 1
-	strh	w0, [x19,2912]
-	mov	w0, 0
-	cbz	w3, .L3281
+	strh	w0, [x19,2928]
+	ldrb	w0, [x19,3554]
+	mov	w19, 0
+	cbz	w0, .L3431
 	add	w1, w1, 2
-	strh	w1, [x19,2912]
-.L3281:
+	strh	w1, [x2,16]
+.L3431:
 	sub	sp, x29, #16
+	mov	w0, w19
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
 	ldp	x23, x24, [sp,64]
@@ -21129,85 +22314,88 @@ ftl_update_l2p_map:
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldrb	w1, [x23,9]
-	ldrh	w24, [x0,3324]
 	ldrh	w20, [x23,12]
-	ldr	x0, [x0,3880]
-	mul	w24, w24, w1
-	add	x20, x0, x20, lsl 2
-	add	x0, x20, x24, sxtw 2
-	ldr	w0, [x0,-4]
-	cmn	w0, #1
-	beq	.L3300
-	adrp	x1, .LANCHOR3
+	ldrh	w24, [x0,3596]
+	ldrb	w0, [x23,9]
+	mul	w24, w24, w0
+	adrp	x0, .LANCHOR3
+	str	x0, [x29,120]
+	add	x1, x0, :lo12:.LANCHOR3
+	ldr	x1, [x1,-200]
+	add	x20, x1, x20, lsl 2
+	add	x1, x20, x24, sxtw 2
+	ldr	w1, [x1,-4]
+	cmn	w1, #1
+	beq	.L3453
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1640
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1733
 	add	x1, x1, 768
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3300:
-	adrp	x0, .LC289
+.L3453:
+	adrp	x0, .LC295
 	mov	x28, 0
-	add	x0, x0, :lo12:.LC289
-	adrp	x27, .LC288
-	str	x0, [x29,120]
-	adrp	x0, .LC290
-	add	x0, x0, :lo12:.LC290
-	mov	w22, w28
+	add	x0, x0, :lo12:.LC295
+	adrp	x27, .LC294
 	str	x0, [x29,112]
-	add	x27, x27, :lo12:.LC288
-.L3301:
+	adrp	x0, .LC296
+	add	x0, x0, :lo12:.LC296
+	mov	w22, w28
+	str	x0, [x29,104]
+	add	x27, x27, :lo12:.LC294
+.L3454:
 	cmp	w28, w24
 	mov	w25, w28
-	bge	.L3328
+	bge	.L3481
 	ldr	w2, [x20,x28,lsl 2]
 	cmn	w2, #1
-	beq	.L3302
+	beq	.L3455
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w21, [x0,2832]
+	ldrb	w21, [x0,2848]
 	adrp	x0, .LANCHOR2
 	lsl	w21, w21, 7
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	udiv	w21, w2, w21
 	and	w21, w21, 65535
-	tbz	x0, 12, .L3306
+	tbz	x0, 12, .L3459
 	mov	x0, x27
 	mov	w1, w21
 	mov	w3, w28
 	bl	printk
-.L3306:
+.L3459:
 	sbfiz	x26, x25, 2, 32
 	ldr	w0, [x20,x26]
 	cmn	w0, #1
-	beq	.L3304
-	add	x3, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x3,2832]
+	beq	.L3457
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x2,2848]
 	lsl	w1, w1, 7
 	udiv	w0, w0, w1
 	cmp	w21, w0, uxth
-	bne	.L3304
+	bne	.L3457
 	ldrb	w0, [x23,9]
-	ldrh	w2, [x3,3362]
-	str	x3, [x29,104]
+	ldrh	w2, [x2,3634]
 	sdiv	w1, w25, w0
 	msub	w0, w1, w0, w25
 	add	x0, x23, x0, sxtw 1
 	ldrh	w0, [x0,16]
 	madd	w2, w0, w2, w1
 	str	w2, [x29,140]
-	ldr	x0, [x29,120]
+	ldr	x0, [x29,112]
 	ldr	w1, [x20,x26]
 	bl	pm_ppa_update_check
-	ldr	x3, [x29,104]
-	cbz	w0, .L3305
-	ldr	x1, [x3,3880]
+	cbz	w0, .L3458
+	ldr	x0, [x29,120]
 	mov	w2, 4
-	ldr	x0, [x29,112]
 	mov	w3, w24
+	add	x1, x0, :lo12:.LANCHOR3
+	ldr	x0, [x29,104]
+	ldr	x1, [x1,-200]
 	bl	rknand_print_hex
-.L3305:
+.L3458:
 	ldr	w0, [x20,x26]
 	add	x1, x29, 140
 	mov	w2, 1
@@ -21216,27 +22404,27 @@ ftl_update_l2p_map:
 	uxth	w22, w22
 	mov	w0, -1
 	str	w0, [x20,x26]
-.L3304:
+.L3457:
 	add	w25, w25, 1
 	cmp	w25, w24
-	bne	.L3306
-.L3302:
+	bne	.L3459
+.L3455:
 	add	x28, x28, 1
-	b	.L3301
-.L3328:
+	b	.L3454
+.L3481:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3308
+	tbz	x0, 12, .L3461
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x23]
 	mov	w2, w22
 	ubfiz	x3, x1, 1, 16
 	ldr	x4, [x0,600]
-	adrp	x0, .LC291
-	add	x0, x0, :lo12:.LC291
+	adrp	x0, .LC297
+	add	x0, x0, :lo12:.LC297
 	ldrh	w3, [x4,x3]
 	bl	printk
-.L3308:
+.L3461:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x23]
 	ldr	x0, [x19,600]
@@ -21264,9 +22452,9 @@ ftl_alloc_new_data_sblk:
 	ldrh	w0, [x20]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L3330
+	beq	.L3483
 	bl	zftl_insert_data_list
-.L3330:
+.L3483:
 	adrp	x19, .LANCHOR0
 	mov	w2, 2
 	add	x19, x19, :lo12:.LANCHOR0
@@ -21280,13 +22468,13 @@ ftl_alloc_new_data_sblk:
 	ldr	x0, [x19,608]
 	ldr	w0, [x0,560]
 	cmp	w0, w21
-	bne	.L3332
+	bne	.L3485
 	mov	w20, 65535
 	cmp	w21, w20
-	beq	.L3332
-	adrp	x0, .LC292
+	beq	.L3485
+	adrp	x0, .LC298
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC292
+	add	x0, x0, :lo12:.LC298
 	bl	printk
 	ldr	x0, [x19,608]
 	ldr	w0, [x0,564]
@@ -21295,7 +22483,7 @@ ftl_alloc_new_data_sblk:
 	mov	w1, -1
 	str	w20, [x0,560]
 	str	w1, [x0,564]
-.L3332:
+.L3485:
 	bl	ftl_ext_info_flush
 	mov	w0, 0
 	bl	ftl_info_flush
@@ -21314,296 +22502,295 @@ ftl_write_commit:
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
 	adrp	x24, .LANCHOR0
+	stp	x25, x26, [sp,64]
 	add	x24, x24, :lo12:.LANCHOR0
-	add	x0, x24, 784
+	adrp	x25, .LANCHOR3
+	add	x0, x24, 800
+	add	x25, x25, :lo12:.LANCHOR3
 	str	x0, [x29,112]
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	str	x0, [x29,120]
+	sub	x0, x25, #171
 	stp	x19, x20, [sp,16]
-	add	x0, x0, 1265
-	str	x0, [x29,104]
 	stp	x21, x22, [sp,32]
-	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-.L3341:
-	ldrb	w0, [x24,2856]
-	adrp	x21, .LANCHOR0
-	cbz	w0, .L3343
-	ldrb	w1, [x24,2888]
+	str	x0, [x29,104]
+.L3494:
+	ldrb	w0, [x24,2872]
+	adrp	x22, .LANCHOR0
+	cbz	w0, .L3496
+	ldrb	w1, [x24,2904]
 	sub	w0, w0, #1
 	ldr	x2, [x29,112]
-	str	x1, [x29,128]
+	str	x1, [x29,120]
 	lsl	x1, x1, 6
 	add	x27, x2, x1
-	strb	w0, [x24,2856]
-	ldr	w0, [x24,2840]
+	strb	w0, [x24,2872]
+	ldr	w0, [x24,2856]
 	ldrb	w1, [x2,x1]
-	strb	w1, [x24,2888]
+	strb	w1, [x24,2904]
 	ldr	w1, [x27,36]
 	cmp	w1, w0
-	bcc	.L3344
-	adrp	x1, .LANCHOR3
+	bcc	.L3497
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 502
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 510
 	add	x1, x1, 792
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3344:
-	ldr	x0, [x29,128]
-	add	x1, x21, :lo12:.LANCHOR0
-	add	x4, x1, 784
+.L3497:
+	ldr	x0, [x29,120]
+	add	x1, x22, :lo12:.LANCHOR0
+	add	x4, x1, 800
 	add	x0, x4, x0, lsl 6
-	ldr	w2, [x1,2840]
+	ldr	w2, [x1,2856]
 	ldr	w23, [x0,36]
 	cmp	w23, w2
-	bcc	.L3345
+	bcc	.L3498
 	mov	x0, x27
-	bl	buf_free
+	bl	zbuf_free
 	mov	w0, -1
-	b	.L3399
-.L3345:
-	ldr	x25, [x0,8]
-	ldr	x28, [x0,24]
-	ldrb	w22, [x0,57]
+	b	.L3552
+.L3498:
+	ldr	x2, [x0,24]
+	ldr	x26, [x0,8]
+	ldrb	w21, [x0,57]
 	ldrb	w20, [x0,56]
-	ldrb	w0, [x1,2857]
-	cbz	w0, .L3347
-	ldr	x0, [x29,120]
-	ldrb	w3, [x0,1265]
+	ldrb	w0, [x1,2873]
+	str	x2, [x29,128]
+	cbz	w0, .L3500
+	ldrb	w3, [x25,1545]
 	add	x3, x4, x3, lsl 6
-.L3348:
+.L3501:
 	ldrb	w5, [x3]
 	cmp	w5, 255
-	beq	.L3401
+	beq	.L3554
 	sbfiz	x3, x5, 6, 32
 	add	x3, x4, x3
-	b	.L3348
-.L3401:
+	b	.L3501
+.L3554:
 	ldr	w0, [x3,36]
 	cmp	w0, w23
-	bne	.L3347
+	bne	.L3500
 	ldr	x0, [x3,8]
-	ubfiz	x1, x22, 9, 8
+	ubfiz	x1, x21, 9, 8
 	lsl	w2, w20, 9
 	add	x0, x0, x1
-	add	x1, x25, x1
+	add	x1, x26, x1
 	bl	ftl_memcpy
 	mov	x0, x27
-	bl	buf_free
-	b	.L3341
-.L3347:
+	bl	zbuf_free
+	b	.L3494
+.L3500:
 	mov	w0, w23
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,156]
 	cmn	w0, #1
-	bne	.L3351
+	bne	.L3504
 	mov	w0, w23
 	add	x1, x29, 156
 	mov	w2, 0
 	bl	pm_log2phys
-.L3351:
-	add	x4, x21, :lo12:.LANCHOR0
+.L3504:
+	add	x4, x22, :lo12:.LANCHOR0
 	mov	w3, 0
-	add	x4, x4, 784
-	ldr	x19, [x4,-176]
+	add	x4, x4, 800
+	ldr	x19, [x4,-192]
 	add	x19, x19, 16
-.L3354:
+.L3507:
 	ldr	w0, [x4,36]
 	cmp	w0, w23
-	bne	.L3352
+	bne	.L3505
 	ldrb	w5, [x4,2]
-	tbz	x5, 3, .L3352
-	add	x0, x21, :lo12:.LANCHOR0
+	tbz	x5, 3, .L3505
+	add	x0, x22, :lo12:.LANCHOR0
 	ubfiz	x3, x3, 6, 32
-	add	x0, x0, 784
+	add	x0, x0, 800
 	and	w5, w5, -9
 	add	x3, x0, x3
 	ldr	w0, [x3,40]
 	strb	w5, [x3,2]
-	ldr	x26, [x3,8]
+	ldr	x28, [x3,8]
 	str	w0, [x29,156]
-	b	.L3353
-.L3352:
+	b	.L3506
+.L3505:
 	add	w3, w3, 1
 	add	x4, x4, 64
 	cmp	w3, 32
-	bne	.L3354
-	mov	x26, 0
-.L3353:
-	add	x3, x21, :lo12:.LANCHOR0
+	bne	.L3507
+	mov	x28, 0
+.L3506:
+	add	x3, x22, :lo12:.LANCHOR0
 	str	wzr, [x29,136]
-	ldrb	w0, [x3,2832]
+	ldrb	w0, [x3,2848]
 	cmp	w20, w0
-	bcs	.L3355
-	add	w20, w22, w20
-	cbz	x26, .L3356
-	cbz	w22, .L3357
-	mov	x0, x25
-	mov	x1, x26
-	lsl	w2, w22, 9
+	bcs	.L3508
+	add	w20, w21, w20
+	cbz	x28, .L3509
+	cbz	w21, .L3510
+	mov	x0, x26
+	mov	x1, x28
+	lsl	w2, w21, 9
 	str	x3, [x29,136]
 	bl	ftl_memcpy
 	ldr	x3, [x29,136]
 	ldr	x19, [x3,608]
 	add	x19, x19, 48
-.L3357:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w2, [x0,2832]
+.L3510:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w2, [x0,2848]
 	cmp	w20, w2
-	bcc	.L3358
+	bcc	.L3511
 	ldr	x19, [x0,608]
 	add	x19, x19, 16
-	b	.L3400
-.L3358:
+	b	.L3553
+.L3511:
 	ubfiz	x1, x20, 9, 9
 	sub	w2, w2, w20
-	add	x0, x25, x1
+	add	x0, x26, x1
 	lsl	w2, w2, 9
-	add	x1, x26, x1
+	add	x1, x28, x1
 	bl	ftl_memcpy
-.L3400:
+.L3553:
 	str	wzr, [x29,136]
-	b	.L3355
-.L3356:
+	b	.L3508
+.L3509:
 	ldr	w0, [x29,156]
 	cmn	w0, #1
-	beq	.L3359
+	beq	.L3512
 	mov	w0, 1
 	bl	buf_alloc
-	mov	x26, x0
+	mov	x28, x0
 	ldr	w1, [x29,156]
 	str	w1, [x0,40]
 	mov	w1, 1
 	str	w23, [x0,36]
 	bl	sblk_read_page
-	ldr	x0, [x26,24]
+	ldr	x0, [x28,24]
 	ldr	w1, [x0,12]
 	ldr	w0, [x0,4]
 	add	w1, w1, 1
 	str	w1, [x29,136]
 	cmp	w0, w23
-	bne	.L3360
-	ldr	w0, [x26,52]
+	bne	.L3513
+	ldr	w0, [x28,52]
 	cmn	w0, #1
-	bne	.L3361
-.L3360:
-	add	x0, x21, :lo12:.LANCHOR0
+	bne	.L3514
+.L3513:
+	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w2, [x29,156]
 	mov	w3, w23
 	ldr	x1, [x0,608]
 	ldr	w0, [x1,552]
 	add	w0, w0, 1
 	str	w0, [x1,552]
-	adrp	x0, .LC293
-	ldrb	w1, [x26,1]
-	add	x0, x0, :lo12:.LC293
-	ldr	w4, [x26,52]
+	adrp	x0, .LC299
+	ldrb	w1, [x28,1]
+	add	x0, x0, :lo12:.LC299
+	ldr	w4, [x28,52]
 	bl	printk
-	adrp	x0, .LC224
+	adrp	x0, .LC230
 	mov	w2, 4
-	ldr	x1, [x26,24]
-	add	x0, x0, :lo12:.LC224
+	ldr	x1, [x28,24]
+	add	x0, x0, :lo12:.LC230
 	mov	w3, w2
 	bl	rknand_print_hex
-.L3361:
-	ldr	x0, [x26,24]
+.L3514:
+	ldr	x0, [x28,24]
 	ldr	w0, [x0,4]
 	cmp	w0, w23
-	bne	.L3362
-	ldr	w0, [x26,52]
+	bne	.L3515
+	ldr	w0, [x28,52]
 	cmn	w0, #1
-	bne	.L3363
-.L3362:
-	adrp	x1, .LANCHOR3
+	bne	.L3516
+.L3515:
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 573
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 581
 	add	x1, x1, 792
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3363:
-	cbz	w22, .L3364
+.L3516:
+	cbz	w21, .L3517
 	ldr	w0, [x29,156]
-	lsl	w2, w22, 9
+	lsl	w2, w21, 9
 	cmn	w0, #1
-	beq	.L3365
-	ldr	x1, [x26,8]
-	mov	x0, x25
+	beq	.L3518
+	ldr	x1, [x28,8]
+	mov	x0, x26
 	bl	ftl_memcpy
-	b	.L3366
-.L3359:
-	cbz	w22, .L3364
-	lsl	w2, w22, 9
-.L3365:
-	mov	x0, x25
+	b	.L3519
+.L3512:
+	cbz	w21, .L3517
+	lsl	w2, w21, 9
+.L3518:
+	mov	x0, x26
 	mov	w1, 0
 	bl	ftl_memset
-.L3366:
-	add	x0, x21, :lo12:.LANCHOR0
+.L3519:
+	add	x0, x22, :lo12:.LANCHOR0
 	ldr	x19, [x0,608]
 	add	x19, x19, 48
-.L3364:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w2, [x0,2832]
+.L3517:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w2, [x0,2848]
 	cmp	w20, w2
-	bcc	.L3367
-	bls	.L3368
+	bcc	.L3520
+	bls	.L3521
 	ldr	x19, [x0,608]
 	add	x19, x19, 16
-	b	.L3368
-.L3367:
+	b	.L3521
+.L3520:
 	ldr	w0, [x29,156]
 	sub	w2, w2, w20
 	lsl	w2, w2, 9
 	cmn	w0, #1
 	ubfiz	x0, x20, 7, 9
-	beq	.L3369
-	ldr	x1, [x26,8]
+	beq	.L3522
+	ldr	x1, [x28,8]
 	lsl	x20, x0, 2
-	add	x0, x25, x20
+	add	x0, x26, x20
 	add	x1, x1, x20
 	bl	ftl_memcpy
-	b	.L3368
-.L3369:
-	add	x0, x25, x0, lsl 2
+	b	.L3521
+.L3522:
+	add	x0, x26, x0, lsl 2
 	mov	w1, 0
 	bl	ftl_memset
-.L3368:
-	cbz	x26, .L3355
-	ldrb	w0, [x26,2]
-	mov	x1, x26
+.L3521:
+	cbz	x28, .L3508
+	ldrb	w0, [x28,2]
+	mov	x1, x28
 	and	w0, w0, -9
-	strb	w0, [x26,2]
-	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, 3909
+	strb	w0, [x28,2]
+	ldr	x0, [x29,104]
 	bl	buf_remove_buf
-	mov	x0, x26
-	bl	buf_free
-.L3355:
+	mov	x0, x28
+	bl	zbuf_free
+.L3508:
 	ldrh	w0, [x19,6]
-	cbnz	w0, .L3370
+	cbnz	w0, .L3523
 	bl	ftl_flush
 	mov	x0, x19
 	bl	ftl_alloc_new_data_sblk
-.L3370:
+.L3523:
 	mov	x0, x19
-	add	x20, x21, :lo12:.LANCHOR0
+	add	x20, x22, :lo12:.LANCHOR0
 	bl	ftl_get_new_free_page
-	ldr	x1, [x29,128]
-	add	x3, x20, 784
-	ldr	w6, [x29,136]
+	ldr	x1, [x29,120]
+	add	x3, x20, 800
+	ldr	x6, [x29,128]
 	lsl	x2, x1, 6
+	ldr	w7, [x29,136]
 	add	x1, x3, x2
 	ldr	w5, [x1,32]
-	str	w5, [x28]
-	str	w6, [x28,12]
+	str	w5, [x6]
+	str	w23, [x6,4]
 	ldr	w5, [x29,156]
-	str	w5, [x28,8]
-	str	w23, [x28,4]
+	str	w5, [x6,8]
+	str	w7, [x6,12]
 	str	w0, [x1,40]
 	mov	w0, -1
 	strb	w0, [x3,x2]
@@ -21617,70 +22804,66 @@ ftl_write_commit:
 	add	w0, w2, w0
 	sub	w0, w0, #1
 	strh	w0, [x1,48]
-	ldr	x0, [x29,104]
+	add	x0, x25, 1545
 	mov	x1, x27
 	bl	buf_add_tail
-	ldrb	w0, [x20,2857]
+	ldrb	w0, [x20,2873]
 	add	w0, w0, 1
-	strb	w0, [x20,2857]
+	strb	w0, [x20,2873]
 	bl	timer_get_time
-	ldr	x1, [x29,120]
-	ldrb	w2, [x20,2857]
-	str	w0, [x1,1268]
+	str	w0, [x25,1548]
+	ldrb	w2, [x20,2873]
 	cmp	w2, 2
-	adrp	x0, .LANCHOR4
-	bhi	.L3371
-	ldrh	w1, [x19,6]
-	cmp	w1, 1
-	bne	.L3343
-.L3371:
-	ldrb	w1, [x19,5]
+	bhi	.L3524
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bne	.L3496
+.L3524:
+	ldrb	w0, [x19,5]
 	mov	w4, 2
-	add	x6, x21, :lo12:.LANCHOR0
-	cmp	w1, wzr
-	ldrh	w1, [x19,6]
-	csinc	w4, w4, wzr, ne
-	add	x6, x6, 784
-	cmp	w1, 1
-	add	x1, x0, :lo12:.LANCHOR4
-	csel	w4, w4, w2, ne
-	ldrb	w5, [x1,1265]
+	ldrb	w5, [x25,1545]
 	mov	w1, 0
+	cmp	w0, wzr
+	ldrh	w0, [x19,6]
+	csinc	w4, w4, wzr, ne
 	mov	w3, w5
-.L3375:
+	cmp	w0, 1
+	add	x0, x22, :lo12:.LANCHOR0
+	csel	w4, w4, w2, ne
+	add	x0, x0, 800
+.L3528:
 	cmp	w1, w4
-	beq	.L3402
+	beq	.L3555
 	ubfiz	x3, x3, 6, 8
 	add	w1, w1, 1
-	ldrb	w3, [x6,x3]
-	b	.L3375
-.L3402:
-	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w3, [x0,x3]
+	b	.L3528
+.L3555:
+	add	x0, x22, :lo12:.LANCHOR0
 	uxtb	w1, w1
 	sub	w2, w2, w1
 	ubfiz	x5, x5, 6, 8
-	strb	w3, [x0,1265]
-	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, 784
+	add	x0, x0, 800
+	strb	w3, [x25,1545]
 	strb	w2, [x0,2073]
 	add	x0, x0, x5
 	bl	sblk_prog_page
 	ldrh	w0, [x19,6]
 	cmp	w0, 1
-	bne	.L3343
+	bne	.L3496
 	bl	sblk_wait_write_queue_completed
 	bl	ftl_write_completed
 	mov	x0, x19
 	bl	ftl_write_last_log_page
 	mov	x0, x19
 	bl	ftl_alloc_new_data_sblk
-.L3343:
-	add	x21, x21, :lo12:.LANCHOR0
-	ldrb	w19, [x21,2856]
-	cbnz	w19, .L3341
+.L3496:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrb	w19, [x22,2872]
+	cbnz	w19, .L3494
 	bl	ftl_write_completed
 	mov	w0, w19
-.L3399:
+.L3552:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -21693,23 +22876,23 @@ ftl_write_commit:
 	.global	gc_do_copy_back
 	.type	gc_do_copy_back, %function
 gc_do_copy_back:
-	sub	sp, sp, #208
-	stp	x29, x30, [sp,16]
-	add	x29, sp, 16
-	stp	x19, x20, [sp,32]
+	sub	sp, sp, #240
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	stp	x19, x20, [sp,48]
 	adrp	x19, .LANCHOR0
-	stp	x21, x22, [sp,48]
+	stp	x21, x22, [sp,64]
 	add	x21, x19, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,64]
-	stp	x25, x26, [sp,80]
-	stp	x27, x28, [sp,96]
-	ldrb	w0, [x21,3297]
-	ldr	x22, [x21,608]
-	cbnz	w0, .L3404
+	stp	x23, x24, [sp,80]
+	stp	x25, x26, [sp,96]
+	stp	x27, x28, [sp,112]
+	ldrb	w0, [x21,3569]
+	ldr	x23, [x21,608]
+	cbnz	w0, .L3557
 	bl	buf_alloc
 	mov	x20, x0
-	cbz	x0, .L3403
-	ldrh	w22, [x21,2922]
+	cbz	x0, .L3556
+	ldrh	w22, [x21,2938]
 	mov	w0, w22
 	add	w22, w22, 1
 	bl	gc_get_src_ppa_from_index
@@ -21717,69 +22900,69 @@ gc_do_copy_back:
 	mov	w23, w0
 	mov	w1, 1
 	mov	x0, x20
-	strh	w22, [x21,2922]
+	strh	w22, [x21,2938]
 	bl	sblk_read_page
 	ldr	w0, [x20,52]
 	cmp	w0, 512
-	beq	.L3459
+	beq	.L3635
 	cmn	w0, #1
-	bne	.L3406
-.L3459:
-	adrp	x1, .LANCHOR3
+	bne	.L3559
+.L3635:
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 731
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 864
 	add	x1, x1, 816
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3406:
+.L3559:
 	ldr	x0, [x20,24]
 	ldr	w21, [x0,4]
 	mov	w0, w21
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,144]
+	str	w0, [x29,160]
 	cmn	w0, #1
-	bne	.L3408
+	bne	.L3561
 	mov	w0, w21
-	add	x1, x29, 144
+	add	x1, x29, 160
 	mov	w2, 0
 	bl	pm_log2phys
-.L3408:
-	ldr	w22, [x29,144]
+.L3561:
+	ldr	w22, [x29,160]
 	cmp	w22, w23
-	bne	.L3409
+	bne	.L3562
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x1, 784
-	add	x1, x1, 2832
-.L3412:
+	add	x0, x1, 800
+	add	x1, x1, 2848
+.L3565:
 	ldr	w2, [x0,36]
 	cmp	w2, w21
-	bne	.L3410
+	bne	.L3563
 	ldrb	w2, [x0,2]
-	tbz	x2, 1, .L3410
+	tbz	x2, 1, .L3563
 	mov	x0, x20
-	bl	buf_free
+	bl	zbuf_free
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3403
+	tbz	x0, 8, .L3556
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC294
+	adrp	x0, .LC300
 	mov	w1, w21
 	mov	w2, w22
-	add	x0, x0, :lo12:.LC294
-	ldrh	w3, [x19,2922]
+	add	x0, x0, :lo12:.LC300
+	ldrh	w3, [x19,2938]
 	bl	printk
-	b	.L3403
-.L3410:
+	b	.L3556
+.L3563:
 	add	x0, x0, 64
 	cmp	x0, x1
-	bne	.L3412
+	bne	.L3565
 	add	x23, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20,2]
 	str	w21, [x20,36]
 	strb	wzr, [x20,57]
-	ldrb	w0, [x23,2832]
+	ldrb	w0, [x23,2848]
 	strb	w0, [x20,56]
 	mov	w0, 10
 	orr	w0, w1, w0
@@ -21789,516 +22972,741 @@ gc_do_copy_back:
 	str	w0, [x20,32]
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3413
-	ldr	w2, [x29,144]
+	tbz	x0, 8, .L3566
+	ldr	w2, [x29,160]
 	mov	w0, w21
-	str	x2, [x29,136]
+	str	x2, [x29,152]
 	bl	lpa_hash_get_ppa
 	mov	w3, w0
-	ldr	x2, [x29,136]
-	adrp	x0, .LC295
-	ldrh	w5, [x23,2922]
-	add	x0, x0, :lo12:.LC295
+	ldr	x2, [x29,152]
+	adrp	x0, .LC301
+	ldrh	w5, [x23,2938]
+	add	x0, x0, :lo12:.LC301
 	mov	w1, w21
 	mov	w4, w22
 	bl	printk
-.L3413:
+.L3566:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	x0, x20
 	bl	ftl_gc_write_buf
 	bl	ftl_write_commit
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldr	w0, [x1,60]
 	add	w0, w0, 1
 	str	w0, [x1,60]
-	ldrh	w0, [x19,2924]
+	ldrh	w0, [x19,2940]
 	add	w0, w0, 1
-	strh	w0, [x19,2924]
-	b	.L3403
-.L3409:
+	strh	w0, [x19,2940]
+	b	.L3556
+.L3562:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3415
+	tbz	x0, 8, .L3568
 	mov	w0, w21
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	lpa_hash_get_ppa
 	mov	w3, w0
-	ldrh	w5, [x19,2922]
-	adrp	x0, .LC295
-	add	x0, x0, :lo12:.LC295
+	ldrh	w5, [x19,2938]
+	adrp	x0, .LC301
+	add	x0, x0, :lo12:.LC301
 	mov	w1, w21
 	mov	w2, w22
 	mov	w4, w23
 	bl	printk
-.L3415:
+.L3568:
 	mov	x0, x20
-	bl	buf_free
-	b	.L3403
-.L3404:
-	ldrb	w24, [x21,3281]
-	add	x0, x21, 2896
-	add	x22, x22, 80
-	cmp	w24, 3
-	bne	.L3416
-	ldrb	w1, [x21,3296]
-	cbz	w1, .L3417
-	ldrb	w20, [x22,9]
-	ldrh	w21, [x0,314]
-	str	w24, [x29,136]
-	add	w23, w20, w20, lsl 1
-	sub	w20, w20, w20, lsl 2
-	sdiv	w23, w21, w23
-	madd	w20, w23, w20, w21
-	uxth	w20, w20
-	b	.L3419
-.L3417:
-	ldrh	w20, [x0,314]
+	bl	zbuf_free
+	b	.L3556
+.L3557:
+	ldrb	w0, [x21,3553]
+	add	x1, x21, 2912
+	add	x23, x23, 80
+	cmp	w0, 3
+	bne	.L3569
+	ldrb	w2, [x21,756]
+	cbz	w2, .L3570
+	ldrh	w22, [x1,570]
+	adrp	x1, .LANCHOR6
+	ldrb	w20, [x23,9]
+	add	x1, x1, :lo12:.LANCHOR6
+	sdiv	w2, w22, w20
+	ldrb	w3, [x1,221]
+	uxth	w27, w2
+	cbz	w3, .L3571
 	adrp	x0, .LANCHOR2
-	ldrb	w21, [x22,9]
+	mov	w21, 2
 	add	x0, x0, :lo12:.LANCHOR2
-	add	x0, x0, 1784
-	str	w24, [x29,136]
-	sdiv	w1, w20, w21
-	msub	w20, w1, w21, w20
-	ldrh	w25, [x0,w1,sxtw 1]
+	add	x0, x0, 1976
+	ldrh	w0, [x0,w2,sxtw 1]
+	cmp	w0, wzr
+	csinc	w21, w21, wzr, ne
+	b	.L3572
+.L3571:
+	ldrb	w1, [x1,222]
+	mov	w21, 1
+	cbz	w1, .L3572
+	sub	w1, w27, #62
+	mov	w21, 2
+	uxth	w1, w1
+	cmp	w1, 2159
+	bhi	.L3572
+	udiv	w0, w27, w0
+	add	w0, w0, w0, lsl 1
+	sub	w0, w27, w0
+	uxth	w0, w0
+	cmp	w0, wzr
+	csinc	w21, w21, wzr, eq
+.L3572:
+	msub	w20, w27, w20, w22
 	uxth	w20, w20
-	lsr	w23, w25, 3
-	and	w25, w25, 7
-	madd	w21, w23, w21, w20
-	cmp	w25, 1
-	add	w21, w21, w21, lsl 1
-	uxth	w21, w21
-	bne	.L3420
-	b	.L3419
-.L3416:
-	ldrb	w20, [x22,9]
-	ldrb	w1, [x21,3282]
-	ldrh	w21, [x0,314]
-	mov	w0, 1
-	sdiv	w23, w21, w20
-	msub	w20, w23, w20, w21
+	b	.L3575
+.L3570:
+	ldrb	w2, [x21,3568]
+	cbz	w2, .L3574
+	ldrb	w20, [x23,9]
+	mov	w21, w0
+	ldrh	w22, [x1,570]
+	add	w8, w20, w20, lsl 1
+	sub	w20, w20, w20, lsl 2
+	sdiv	w27, w22, w8
+	madd	w20, w27, w20, w22
 	uxth	w20, w20
-	cbz	w1, .L3501
-	mov	w0, 2
-.L3501:
-	str	w0, [x29,136]
-.L3419:
-	mov	w25, 0
-	add	x24, x19, :lo12:.LANCHOR0
-	adrp	x3, .LANCHOR4
-.L3422:
-	ldrb	w1, [x22,9]
-	ldr	w0, [x29,136]
-	mul	w0, w0, w1
-	cmp	w25, w0
-	bge	.L3456
-	ldrh	w0, [x24,3298]
-	add	w26, w21, w25
+	b	.L3575
+.L3574:
+	ldrh	w20, [x1,570]
+	adrp	x1, .LANCHOR2
+	ldrb	w22, [x23,9]
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x1, x1, 3512
+	mov	w21, w0
+	sdiv	w2, w20, w22
+	msub	w20, w2, w22, w20
+	ldrh	w24, [x1,w2,sxtw 1]
+	uxth	w20, w20
+	lsr	w27, w24, 3
+	and	w24, w24, 7
+	madd	w22, w27, w22, w20
+	cmp	w24, 1
+	add	w22, w22, w22, lsl 1
+	uxth	w22, w22
+	bne	.L3576
+	b	.L3575
+.L3569:
+	ldrh	w22, [x1,570]
+	ldrb	w20, [x23,9]
+	ldrb	w0, [x21,3554]
+	mov	w21, 1
+	sdiv	w27, w22, w20
+	msub	w20, w27, w20, w22
+	uxth	w20, w20
+	cbz	w0, .L3575
+	mov	w21, 2
+.L3575:
+	adrp	x0, .LANCHOR2
+	mov	w24, 0
+	adrp	x2, .LANCHOR6
+	add	x4, x0, :lo12:.LANCHOR2
+	sxtw	x3, w27
+	adrp	x6, .LANCHOR3
+.L3578:
+	ldrb	w1, [x23,9]
+	mul	w0, w21, w1
+	cmp	w24, w0
+	bge	.L3631
+	add	x0, x19, :lo12:.LANCHOR0
+	add	w25, w22, w24
+	ldrh	w0, [x0,3570]
 	mul	w0, w0, w1
 	sub	w0, w0, #1
-	cmp	w26, w0
-	beq	.L3456
-	add	x0, x3, :lo12:.LANCHOR4
-	sbfiz	x26, x26, 2, 32
-	ldr	x1, [x0,1160]
-	ldr	w0, [x1,x26]
+	cmp	w25, w0
+	bne	.L3579
+	add	x0, x2, :lo12:.LANCHOR6
+	ldrb	w0, [x0,221]
+	cbz	w0, .L3631
+	add	x0, x4, 1976
+	ldrh	w0, [x0,x3,lsl 1]
+	cmp	w0, w27
+	bcs	.L3631
+	tbz	x24, 0, .L3631
+.L3579:
+	add	x0, x6, :lo12:.LANCHOR3
+	sbfiz	x25, x25, 2, 32
+	ldr	x5, [x0,1432]
+	ldr	w0, [x5,x25]
 	cmn	w0, #1
-	bne	.L3423
-	ldrh	w27, [x24,2922]
-	ldrh	w0, [x24,2920]
-	str	x3, [x29,120]
-	str	x1, [x29,128]
+	bne	.L3580
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 2912
+	ldrh	w26, [x0,26]
+	ldrh	w0, [x0,24]
+	cmp	w0, w26
+	bls	.L3556
+	add	x0, x2, :lo12:.LANCHOR6
+	ldrb	w0, [x0,221]
+	cbz	w0, .L3581
+	add	x0, x4, 1976
+	ldrh	w0, [x0,x3,lsl 1]
 	cmp	w0, w27
-	bls	.L3403
-	mov	w0, w27
-	add	w27, w27, 1
+	bcs	.L3581
+	tbz	x24, 0, .L3581
+	ubfiz	x0, x0, 2, 16
+	ldr	w0, [x5,x0]
+	str	w0, [x5,x25]
+	b	.L3580
+.L3581:
+	mov	w0, w26
+	str	x6, [x29,120]
+	str	x3, [x29,128]
+	add	w26, w26, 1
+	str	x4, [x29,136]
+	str	x2, [x29,144]
+	str	x5, [x29,152]
 	bl	gc_get_src_ppa_from_index
-	strh	w27, [x24,2922]
-	ldr	x1, [x29,128]
-	ldr	x3, [x29,120]
-	str	w0, [x1,x26]
-.L3423:
-	add	w25, w25, 1
-	uxth	w25, w25
-	b	.L3422
-.L3456:
-	mov	w25, 1
-.L3420:
-	adrp	x0, .LANCHOR2
-	str	x0, [x29,120]
-	ldr	w1, [x0,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L3425
-	adrp	x0, .LANCHOR4+1160
-	add	x4, x19, :lo12:.LANCHOR0
-	ubfiz	x5, x21, 2, 16
-	mov	w1, w23
-	mov	w2, w25
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x5, [x29,152]
+	ldr	x6, [x29,120]
+	ldr	x3, [x29,128]
+	strh	w26, [x1,2938]
+	ldr	x4, [x29,136]
+	ldr	x2, [x29,144]
+	str	w0, [x5,x25]
+.L3580:
+	add	w24, w24, 1
+	uxth	w24, w24
+	b	.L3578
+.L3631:
+	mov	w24, 1
+.L3576:
+	adrp	x25, .LANCHOR2
+	str	x25, [x29,144]
+	add	x0, x25, :lo12:.LANCHOR2
+	ldr	w1, [x25,#:lo12:.LANCHOR2]
+	tbz	x1, 8, .L3583
+	adrp	x1, .LANCHOR3+1432
+	add	x0, x0, 1976
+	ubfiz	x5, x22, 2, 16
+	mov	w2, w24
 	mov	w3, w20
-	ldr	x6, [x0,#:lo12:.LANCHOR4+1160]
-	adrp	x0, .LC296
-	ldrh	w4, [x4,3210]
-	add	x0, x0, :lo12:.LC296
+	ldr	x6, [x1,#:lo12:.LANCHOR3+1432]
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0,w27,sxtw 1]
+	add	x7, x6, x5
+	ldrh	w4, [x1,3482]
+	mov	w1, w27
+	str	w0, [sp]
+	adrp	x0, .LC302
+	add	x0, x0, :lo12:.LC302
 	ldr	w5, [x6,x5]
-	mov	w6, w21
+	ldr	w6, [x7,4]
+	mov	w7, w22
 	bl	printk
-.L3425:
+.L3583:
 	adrp	x0, .LC0
-	mov	w27, 0
+	str	wzr, [x29,136]
 	add	x0, x0, :lo12:.LC0
-	str	x0, [x29,112]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
+	str	x0, [x29,120]
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
 	add	x0, x0, 816
-	str	x0, [x29,104]
-.L3426:
-	ldrb	w1, [x22,9]
+	str	x0, [x29,112]
+.L3584:
 	ldr	w0, [x29,136]
-	mul	w0, w0, w1
-	cmp	w27, w0
-	bge	.L3505
-	add	w26, w21, w27
-	sxtw	x0, w26
-	str	x0, [x29,128]
+	ldrb	w1, [x23,9]
+	and	w0, w0, 65535
+	str	w0, [x29,152]
+	ldrh	w26, [x29,136]
+	mul	w0, w21, w1
+	ldr	w2, [x29,152]
+	cmp	w2, w0
+	bge	.L3709
+	ldr	w0, [x29,152]
+	add	w0, w22, w0
+	str	w0, [x29,128]
+	sxtw	x25, w0
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x29,128]
-	ldr	x0, [x0,3288]
-	ldrb	w0, [x0,x1]
+	ldr	x0, [x0,3560]
+	ldrb	w0, [x0,x25]
 	cmp	w0, 255
-	bne	.L3427
+	bne	.L3585
 	mov	w0, 0
 	bl	buf_alloc
-	mov	x24, x0
-	cbnz	x0, .L3428
+	mov	x28, x0
+	cbnz	x0, .L3586
 	bl	sblk_wait_write_queue_completed
 	bl	ftl_write_completed
 	bl	gc_write_completed
 	bl	gc_free_temp_buf
-	mov	w0, w24
+	mov	w0, w28
 	bl	buf_alloc
-	mov	x24, x0
-	cbz	x0, .L3403
-.L3428:
-	add	x28, x19, :lo12:.LANCHOR0
-	ldr	x2, [x29,128]
-	ldrb	w1, [x24,1]
-	ldr	x0, [x28,3288]
-	strb	w1, [x0,x2]
-	strh	w26, [x24,48]
-	ldrb	w0, [x28,2903]
-	strb	w25, [x24,61]
-	add	w0, w0, 1
-	strb	w0, [x28,2903]
-	ldrb	w1, [x22,9]
-	ldrh	w0, [x28,3298]
+	mov	x28, x0
+	cbz	x0, .L3556
+.L3586:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x28,1]
+	ldr	x1, [x0,3560]
+	strb	w2, [x1,x25]
+	strb	w24, [x28,61]
+	ldrb	w1, [x0,2919]
+	add	w1, w1, 1
+	strb	w1, [x0,2919]
+	add	w1, w26, w22
+	strh	w1, [x28,48]
+	ldrh	w0, [x0,3570]
+	ldrb	w1, [x23,9]
 	mul	w0, w0, w1
+	ldr	w1, [x29,128]
 	sub	w0, w0, #1
-	cmp	w26, w0
-	adrp	x26, .LANCHOR4
-	bne	.L3429
-	add	x26, x26, :lo12:.LANCHOR4
+	cmp	w1, w0
+	bne	.L3587
+	adrp	x1, .LANCHOR6
+	add	x0, x1, :lo12:.LANCHOR6
+	mov	x5, x1
+	ldrb	w0, [x0,221]
+	cbz	w0, .L3588
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 1976
+	ldrh	w0, [x0,w27,sxtw 1]
+	cmp	w0, w27
+	bcs	.L3588
+	tbnz	x26, 0, .L3587
+.L3588:
+	adrp	x0, .LANCHOR3
+	add	x3, x19, :lo12:.LANCHOR0
+	add	x4, x0, :lo12:.LANCHOR3
 	mov	w1, -1
-	ldr	x0, [x26,1152]
-	str	w1, [x0,x2,lsl 2]
-	ldrh	w0, [x28,3298]
-	ldrb	w2, [x28,3300]
-	ldr	x1, [x26,1152]
+	str	x5, [x29,104]
+	str	x3, [x29,128]
+	ldr	x0, [x4,1424]
+	str	w1, [x0,x25,lsl 2]
+	ldrh	w0, [x3,3570]
+	ldrb	w2, [x3,3572]
+	ldr	x1, [x4,1424]
 	mul	w2, w0, w2
-	ldr	x0, [x24,8]
+	ldr	x0, [x28,8]
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	ldrh	w0, [x28,3298]
-	ldrb	w2, [x28,3300]
-	ldr	x1, [x26,1160]
-	mul	w2, w0, w2
-	ldr	x0, [x24,8]
-	add	x0, x0, x2, sxtw 2
-	lsl	w2, w2, 2
+	ldr	x3, [x29,128]
+	ldr	x5, [x29,104]
+	ldrb	w1, [x3,3572]
+	ldrh	w0, [x3,3570]
+	mul	w0, w0, w1
+	add	x1, x5, :lo12:.LANCHOR6
+	lsl	w2, w0, 2
+	ldrb	w1, [x1,222]
+	cbz	w1, .L3589
+	ldrb	w1, [x3,2848]
+	lsl	w1, w1, 9
+	sub	w2, w1, w2
+.L3589:
+	adrp	x1, .LANCHOR3
+	ldr	x3, [x28,8]
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x3, x0, sxtw 2
+	ldr	x1, [x1,1432]
 	bl	ftl_memcpy
-	ldrb	w2, [x28,2832]
+	add	x3, x19, :lo12:.LANCHOR0
+	ldr	x0, [x28,24]
 	mov	w1, 0
-	ldr	x0, [x24,24]
+	str	x3, [x29,128]
+	ldrb	w2, [x3,2848]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldr	x1, [x24,24]
+	ldr	x1, [x28,24]
 	mov	w0, 15555
+	ldr	x3, [x29,128]
 	movk	w0, 0xf55f, lsl 16
 	str	w0, [x1]
-	ldrh	w0, [x28,3298]
-	ldrb	w1, [x28,3300]
-	ldr	x26, [x24,24]
+	ldrh	w0, [x3,3570]
+	ldrb	w1, [x3,3572]
+	ldr	x2, [x28,24]
+	str	x2, [x29,104]
 	mul	w1, w0, w1
-	ldr	x0, [x24,8]
+	ldr	x0, [x28,8]
 	lsl	w1, w1, 2
 	bl	js_hash
-	str	w0, [x26,4]
-	ldr	x1, [x28,608]
-	ldr	x0, [x24,24]
+	ldr	x2, [x29,104]
+	ldr	x3, [x29,128]
+	str	w0, [x2,4]
+	ldr	x1, [x3,608]
+	ldr	x0, [x28,24]
 	ldr	w1, [x1,132]
-	b	.L3502
-.L3429:
-	ldr	x0, [x29,128]
+	b	.L3705
+.L3587:
+	lsl	x0, x25, 2
+	str	x0, [x29,128]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x1, [x29,128]
+	ldr	x0, [x0,1432]
+	ldr	w0, [x0,x1]
 	mov	w1, 1
-	lsl	x28, x0, 2
-	add	x0, x26, :lo12:.LANCHOR4
-	ldr	x0, [x0,1160]
-	ldr	w0, [x0,x28]
-	str	w0, [x24,40]
-	mov	x0, x24
+	str	w0, [x28,40]
+	mov	x0, x28
 	bl	sblk_read_page
-	ldr	w0, [x24,52]
+	ldr	w0, [x28,52]
 	cmp	w0, 512
-	beq	.L3430
+	beq	.L3590
 	cmn	w0, #1
-	bne	.L3431
-.L3430:
-	add	x4, x19, :lo12:.LANCHOR0
-	mov	w2, 21
+	bne	.L3591
+.L3590:
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w1, 24
+	ldrb	w2, [x3,744]
+	ldrh	w0, [x3,3536]
+	sub	w2, w1, w2
 	mov	w1, 1
-	ldrh	w0, [x4,3264]
 	sub	w2, w2, w0
 	lsl	w2, w1, w2
-	ldr	w1, [x24,40]
+	ldr	w1, [x28,40]
 	sub	w2, w2, #1
 	lsr	w0, w1, w0
-	ldrb	w1, [x4,3266]
+	ldrb	w1, [x3,3538]
 	and	w0, w2, w0
 	udiv	w0, w0, w1
 	mov	x1, 0
 	bl	ftl_sblk_dump
-	ldr	w0, [x24,52]
+	ldr	w0, [x28,52]
 	cmp	w0, 512
-	beq	.L3460
+	beq	.L3636
 	cmn	w0, #1
-	bne	.L3431
-.L3460:
-	ldr	x0, [x24,24]
+	bne	.L3591
+.L3636:
+	ldr	x0, [x28,24]
 	mov	w1, -1
 	str	w1, [x0,4]
-.L3431:
-	ldr	w0, [x24,52]
+.L3591:
+	ldr	w0, [x28,52]
 	cmp	w0, 512
-	beq	.L3461
+	beq	.L3637
 	cmn	w0, #1
-	bne	.L3434
-.L3461:
-	ldr	x1, [x29,104]
-	mov	w2, 846
-	ldr	x0, [x29,112]
+	bne	.L3594
+.L3637:
+	ldr	x1, [x29,112]
+	mov	w2, 1003
+	ldr	x0, [x29,120]
 	bl	printk
 	bl	dump_stack
-.L3434:
-	ldr	x1, [x24,24]
+.L3594:
+	ldr	x1, [x28,24]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x1,4]
-	ldr	w0, [x0,2840]
+	ldr	w0, [x0,2856]
 	cmp	w2, w0
-	bcc	.L3436
+	bcc	.L3596
 	mov	w0, -1
 	str	w0, [x1,4]
-.L3436:
-	ldr	x0, [x24,24]
-	add	x26, x26, :lo12:.LANCHOR4
-	ldr	w1, [x0,4]
-	ldr	x0, [x26,1152]
-	str	w1, [x0,x28]
-	ldr	x0, [x24,24]
-	ldr	w1, [x24,40]
-.L3502:
-	str	w1, [x0,8]
-.L3427:
-	add	x3, x19, :lo12:.LANCHOR0
+.L3596:
+	ldr	x0, [x28,24]
 	ldr	x2, [x29,128]
-	add	x1, x3, 784
-	sxtw	x5, w27
-	ldr	x0, [x3,3288]
-	ldrb	w4, [x0,x2]
-	add	x0, x29, 144
-	mov	w2, 2
-	add	x1, x1, x4, lsl 6
-	str	x1, [x0,w27,sxtw 3]
-	ldrb	w0, [x3,3281]
-	strh	w2, [x1,50]
+	ldr	w1, [x0,4]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	ldr	x0, [x0,1424]
+	str	w1, [x0,x2]
+	ldr	x0, [x28,24]
+	ldr	w1, [x28,40]
+.L3705:
+	str	w1, [x0,8]
+.L3585:
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x4, x29, 160
+	add	x2, x1, 800
+	adrp	x11, .LANCHOR6
+	adrp	x10, .LANCHOR3
+	ldr	x0, [x1,3560]
+	ldrb	w3, [x0,x25]
+	ldr	w0, [x29,152]
+	add	x2, x2, x3, lsl 6
+	str	x2, [x4,w0,sxtw 3]
+	mov	w4, 2
+	ldrb	w0, [x1,3553]
+	strb	w24, [x2,61]
+	strh	w4, [x2,50]
 	cmp	w0, 3
-	strb	w25, [x1,61]
-	adrp	x2, .LANCHOR4
-	bne	.L3437
-	udiv	w0, w27, w0
-	ldrh	w3, [x3,3362]
-	add	x2, x2, :lo12:.LANCHOR4
-	add	w4, w0, w20
-	add	x4, x22, x4, sxtw 1
-	ldrh	w4, [x4,16]
-	mul	w3, w4, w3
-	ldrh	w4, [x1,48]
+	bne	.L3597
+	ldrb	w4, [x1,756]
+	cbz	w4, .L3598
+	add	x1, x11, :lo12:.LANCHOR6
+	and	w2, w26, 1
+	add	w0, w27, w2
+	ldrb	w1, [x1,221]
+	cbz	w1, .L3599
+	ldr	x1, [x29,144]
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x1, x1, 1976
+	ldrh	w1, [x1,w27,sxtw 1]
+	cbz	w2, .L3599
+	cmp	w1, w27
+	csel	w0, w0, w1, cs
+.L3599:
+	add	x2, x19, :lo12:.LANCHOR0
+	udiv	w1, w26, w21
+	add	x4, x2, x3, lsl 6
+	add	w1, w1, w20
+	ldrh	w2, [x2,3634]
+	add	x1, x23, x1, sxtw 1
+	ldrh	w1, [x1,16]
+	madd	w0, w1, w2, w0
+	orr	w0, w0, 50331648
+	str	w0, [x4,840]
+	b	.L3600
+.L3598:
+	udiv	w0, w26, w0
+	ldrh	w1, [x1,3634]
+	ldrh	w4, [x2,48]
+	add	w3, w0, w20
+	add	x3, x23, x3, sxtw 1
+	ldrh	w3, [x3,16]
+	mul	w1, w3, w1
+	add	x3, x10, :lo12:.LANCHOR3
 	add	w0, w0, w0, lsl 1
-	orr	w3, w3, w23
-	sub	w0, w27, w0
-	str	w3, [x1,40]
-	ldr	x1, [x2,1168]
+	orr	w1, w1, w27
+	sub	w0, w26, w0
+	str	w1, [x2,40]
+	ldr	x2, [x3,1440]
 	uxth	w0, w0
 	add	w0, w0, 1
-	orr	w0, w3, w0, lsl 24
-	str	w0, [x1,x4,lsl 2]
-	b	.L3438
-.L3437:
+	orr	w0, w1, w0, lsl 24
+	str	w0, [x2,x4,lsl 2]
+	b	.L3601
+.L3597:
 	cmp	w0, 2
-	bne	.L3439
-	ldrb	w6, [x3,3282]
-	add	x1, x1, 32
-	ldrh	w0, [x3,3362]
-	cbnz	w6, .L3440
-	add	w3, w27, w20
-	add	x3, x22, x3, sxtw 1
-	ldrh	w3, [x3,16]
-	madd	w0, w3, w0, w23
-	b	.L3504
-.L3440:
-	add	w3, w20, w27, lsr 1
-	add	x3, x22, x3, sxtw 1
-	ldrh	w3, [x3,16]
-	madd	w0, w3, w0, w23
-	and	w3, w27, 1
-	add	w0, w0, w3
-.L3504:
+	bne	.L3600
+	ldrb	w4, [x1,3554]
+	add	x2, x2, 32
+	ldrh	w0, [x1,3634]
+	cbnz	w4, .L3603
+	ldr	w1, [x29,152]
+	add	w1, w1, w20
+	add	x1, x23, x1, sxtw 1
+	ldrh	w1, [x1,16]
+	madd	w0, w1, w0, w27
+	b	.L3706
+.L3603:
+	add	w1, w20, w26, lsr 1
+	add	x1, x23, x1, sxtw 1
+	ldrh	w1, [x1,16]
+	madd	w0, w1, w0, w27
+	and	w1, w26, 1
+	add	w0, w0, w1
+.L3706:
 	orr	w0, w0, 33554432
-	str	w0, [x1,8]
-.L3439:
+	str	w0, [x2,8]
+.L3600:
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x2, x2, :lo12:.LANCHOR4
-	add	x0, x0, 784
-	add	x0, x0, x4, lsl 6
-	ldr	w3, [x0,40]
-	ldrh	w1, [x0,48]
-	ldr	x0, [x2,1168]
-	str	w3, [x0,x1,lsl 2]
-.L3438:
-	ldr	x0, [x29,120]
+	add	x0, x0, 800
+	add	x3, x0, x3, lsl 6
+	add	x0, x10, :lo12:.LANCHOR3
+	ldrh	w1, [x3,48]
+	ldr	x0, [x0,1440]
+	ldr	w2, [x3,40]
+	str	w2, [x0,x1,lsl 2]
+.L3601:
+	ldr	x0, [x29,144]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3441
-	add	x0, x29, 144
-	ldr	x1, [x29,128]
-	mov	w2, w25
-	ldr	x5, [x0,x5,lsl 3]
+	tbz	x0, 8, .L3604
+	ldr	w0, [x29,152]
+	add	x1, x29, 160
+	mov	w2, w24
+	str	x10, [x29,104]
+	str	x11, [x29,128]
+	ldr	x5, [x1,w0,sxtw 3]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w3, [x0,2902]
-	ldr	x0, [x0,3288]
+	ldr	w1, [x29,152]
+	ldrb	w3, [x0,2918]
+	ldr	x0, [x0,3560]
 	ldrh	w6, [x5,48]
 	ldrb	w7, [x5,1]
-	ldrb	w4, [x0,x1]
+	ldrb	w4, [x0,x25]
 	mov	w0, 3
-	mov	w1, w27
-	udiv	w0, w27, w0
+	udiv	w0, w26, w0
 	add	w0, w20, w0
 	str	w0, [sp]
 	ldr	x0, [x5,24]
 	ldr	w0, [x0,4]
 	str	w0, [sp,8]
-	adrp	x0, .LC297
-	add	x0, x0, :lo12:.LC297
+	ldr	x0, [x28,24]
+	ldr	w0, [x0]
+	str	w0, [sp,16]
+	adrp	x0, .LC303
+	add	x0, x0, :lo12:.LC303
 	ldr	w5, [x5,40]
 	bl	printk
-.L3441:
-	add	w8, w27, 1
-	uxth	w27, w8
-	b	.L3426
-.L3505:
+	ldr	x10, [x29,104]
+	ldr	x11, [x29,128]
+.L3604:
+	add	x11, x11, :lo12:.LANCHOR6
+	ldrb	w0, [x11,221]
+	cbz	w0, .L3605
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 1976
+	ldrh	w0, [x0,w27,sxtw 1]
+	cmp	w0, w27
+	bcs	.L3605
+	tbz	x26, 0, .L3605
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w2, -1
+	add	x10, x10, :lo12:.LANCHOR3
+	ldr	x0, [x1,3560]
+	strb	w2, [x0,x25]
+	add	x2, x29, 160
+	ldr	w0, [x29,152]
+	ldr	x1, [x1,3560]
+	ldr	x2, [x2,w0,sxtw 3]
+	ldrb	w0, [x23,9]
+	mul	w0, w21, w0
+	sub	w0, w22, w0, lsl 1
+	uxth	w0, w0
+	strh	w0, [x2,48]
+	ldrb	w2, [x2,1]
+	uxth	x0, w0
+	strb	w2, [x1,x0]
+	mov	w1, -1
+	ldr	x0, [x10,1432]
+	str	w1, [x0,x25,lsl 2]
+.L3605:
+	ldr	w0, [x29,136]
+	add	w0, w0, 1
+	str	w0, [x29,136]
+	b	.L3584
+.L3709:
 	add	x3, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x3,3281]
+	ldrb	w0, [x3,3553]
 	cmp	w0, 3
-	add	x0, x29, 144
-	bne	.L3443
-	ldrb	w1, [x3,3296]
-	cbz	w1, .L3444
-.L3447:
-	ldr	x1, [x29,144]
-	strb	wzr, [x1,60]
-	b	.L3445
-.L3444:
-	cmp	w25, 1
+	add	x0, x29, 160
+	bne	.L3607
+	ldrb	w2, [x3,756]
+	cbz	w2, .L3710
+	mov	w1, 0
+.L3608:
+	ldrb	w2, [x23,9]
+	mul	w2, w2, w21
+	sub	w2, w2, #1
+	cmp	w1, w2
+	bge	.L3711
+	ldr	x2, [x0,w1,sxtw 3]
+	add	w1, w1, 1
+	ldr	x3, [x0,w1,sxtw 3]
+	uxth	w1, w1
+	ldrb	w3, [x3,1]
+	strb	w3, [x2]
+	b	.L3608
+.L3711:
+	ldr	x0, [x0,w2,sxtw 3]
+	b	.L3708
+.L3710:
+	ldrb	w1, [x3,3568]
+	cbnz	w1, .L3707
+	cmp	w24, 1
 	mov	w2, 9
-	beq	.L3503
-	cmp	w25, 2
-	bne	.L3447
+	beq	.L3707
+	cmp	w24, 2
+	bne	.L3615
 	mov	w2, 13
-.L3503:
-	ldr	x1, [x29,144]
+.L3707:
+	ldr	x1, [x29,160]
 	strb	w2, [x1,60]
-.L3445:
-	ldrb	w2, [x22,9]
+	b	.L3614
+.L3615:
+	ldr	x2, [x29,160]
+	strb	w1, [x2,60]
+.L3614:
+	ldrb	w2, [x23,9]
 	add	x1, x0, 24
 	bl	sblk_xlc_prog_pages
-	b	.L3448
-.L3443:
-	ldrb	w2, [x3,3282]
-	cbz	w2, .L3487
-	ldrb	w3, [x3,3283]
+	b	.L3611
+.L3607:
+	ldrb	w2, [x3,3554]
+	cbz	w2, .L3681
+	ldrb	w3, [x3,3555]
 	mov	w2, 0
-	cbz	w3, .L3487
+	cbz	w3, .L3681
 	bl	sblk_3d_mlc_prog_pages
-	b	.L3448
-.L3487:
-	ldrb	w1, [x22,9]
-	ldr	w3, [x29,136]
-	mul	w1, w1, w3
+	b	.L3611
+.L3681:
+	ldrb	w1, [x23,9]
+	mul	w1, w1, w21
 	sub	w1, w1, #1
 	cmp	w2, w1
-	bge	.L3506
+	bge	.L3712
 	ldr	x1, [x0,w2,sxtw 3]
 	add	w2, w2, 1
 	ldr	x3, [x0,w2,sxtw 3]
 	uxth	w2, w2
 	ldrb	w3, [x3,1]
 	strb	w3, [x1]
-	b	.L3487
-.L3506:
+	b	.L3681
+.L3712:
 	ldr	x0, [x0,w1,sxtw 3]
+.L3708:
 	mov	w1, -1
 	strb	w1, [x0]
-	ldrb	w1, [x22,9]
-	ldr	x0, [x29,144]
-	mul	w1, w3, w1
+	ldrb	w1, [x23,9]
+	ldr	x0, [x29,160]
+	mul	w1, w21, w1
 	bl	sblk_prog_page
-.L3448:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrb	w2, [x22,9]
-	ldrb	w3, [x1,3296]
-	cbz	w3, .L3451
-	add	w0, w2, w2, lsl 1
-	and	w2, w0, 1023
-	b	.L3452
-.L3451:
-	ldrb	w1, [x1,3282]
-	ubfiz	w0, w2, 1, 8
-	cmp	w1, wzr
-	csel	w2, w0, w2, ne
-.L3452:
+.L3611:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,3568]
+	cbz	w1, .L3618
+	ldrb	w21, [x23,9]
+	add	w21, w21, w21, lsl 1
+	and	w21, w21, 1023
+	b	.L3619
+.L3618:
+	ldrb	w1, [x0,3554]
+	cbz	w1, .L3620
+	ldrb	w21, [x23,9]
+	ubfiz	w21, w21, 1, 8
+	b	.L3619
+.L3620:
+	ldrb	w0, [x0,756]
+	cbz	w0, .L3621
+	ldrb	w0, [x23,9]
+	adrp	x1, .LANCHOR6+221
+	mul	w21, w21, w0
+	ldrb	w1, [x1,#:lo12:.LANCHOR6+221]
+	uxth	w21, w21
+	cbz	w1, .L3619
+	ldr	x1, [x29,144]
+	add	x25, x1, :lo12:.LANCHOR2
+	add	x25, x25, 1976
+	ldrh	w1, [x25,w27,sxtw 1]
+	cmp	w1, w27
+	csel	w21, w21, w0, cs
+	b	.L3619
+.L3621:
+	ldrb	w21, [x23,9]
+.L3619:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2864]
+	ldr	x1, [x19,2880]
 	ldr	w0, [x1,52]
-	add	w0, w0, w2
+	add	w0, w0, w21
 	str	w0, [x1,52]
-	ldrh	w1, [x19,3210]
-	add	w0, w2, w1
-	ldrh	w1, [x19,3298]
-	uxth	w0, w0
-	strh	w0, [x19,3210]
-	ldrb	w2, [x22,9]
-	mul	w1, w1, w2
-	cmp	w0, w1
-	blt	.L3453
+	ldrh	w0, [x19,3482]
+	add	w21, w21, w0
+	ldrh	w0, [x19,3570]
+	uxth	w21, w21
+	strh	w21, [x19,3482]
+	ldrb	w1, [x23,9]
+	mul	w0, w0, w1
+	cmp	w21, w0
+	blt	.L3622
 	ldr	x0, [x19,608]
 	strh	wzr, [x0,86]
-.L3453:
+.L3622:
 	bl	gc_write_completed
-.L3403:
-	sub	sp, x29, #16
-	ldp	x19, x20, [sp,32]
-	ldp	x21, x22, [sp,48]
-	ldp	x23, x24, [sp,64]
-	ldp	x25, x26, [sp,80]
-	ldp	x27, x28, [sp,96]
-	ldp	x29, x30, [sp,16]
-	add	sp, sp, 208
+.L3556:
+	sub	sp, x29, #32
+	ldp	x19, x20, [sp,48]
+	ldp	x21, x22, [sp,64]
+	ldp	x23, x24, [sp,80]
+	ldp	x25, x26, [sp,96]
+	ldp	x27, x28, [sp,112]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 240
 	ret
 	.size	gc_do_copy_back, .-gc_do_copy_back
 	.align	2
@@ -22316,241 +23724,241 @@ zftl_do_gc:
 	stp	x23, x24, [sp,64]
 	stp	x27, x28, [sp,96]
 	mov	w26, w0
-	ldrh	w20, [x1,2844]
+	ldrh	w20, [x1,2860]
 	cmp	w26, 1
-	ldrh	w0, [x1,2848]
+	ldrh	w0, [x1,2864]
 	ldr	x22, [x1,608]
 	add	w20, w0, w20
-	ldrh	w21, [x1,2846]
+	ldrh	w21, [x1,2862]
 	uxth	w20, w20
-	bne	.L3508
-	adrp	x23, .LANCHOR7
-	add	x1, x23, :lo12:.LANCHOR7
-	ldr	w24, [x1,-64]
-	cbnz	w24, .L3509
-	ldr	w1, [x1,-60]
-	cbz	w1, .L3508
-.L3509:
+	bne	.L3714
+	adrp	x23, .LANCHOR6
+	add	x1, x23, :lo12:.LANCHOR6
+	ldr	w24, [x1,256]
+	cbnz	w24, .L3715
+	ldr	w1, [x1,260]
+	cbz	w1, .L3714
+.L3715:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x1,3330]
+	ldrh	w2, [x1,3602]
 	cmp	w20, w2, lsr 2
-	bls	.L3508
-	ldrh	w1, [x1,2872]
+	bls	.L3714
+	ldrh	w1, [x1,2888]
 	cmp	w1, w20
-	bcs	.L3508
+	bcs	.L3714
 	add	w24, w24, 20
 	bl	timer_get_time
 	cmp	w24, w0
-	bcs	.L3510
-	add	x0, x23, :lo12:.LANCHOR7
-	str	wzr, [x0,-64]
-.L3510:
-	add	x19, x23, :lo12:.LANCHOR7
-	ldr	w20, [x19,-60]
+	bcs	.L3716
+	add	x0, x23, :lo12:.LANCHOR6
+	str	wzr, [x0,256]
+.L3716:
+	add	x19, x23, :lo12:.LANCHOR6
+	ldr	w20, [x19,260]
 	bl	timer_get_time
 	add	w20, w20, 20
 	cmp	w20, w0
-	bcs	.L3697
-	str	wzr, [x19,-60]
-	b	.L3697
-.L3508:
-	adrp	x23, .LANCHOR4
-	add	x1, x23, :lo12:.LANCHOR4
-	ldrb	w2, [x1,1146]
+	bcs	.L3908
+	str	wzr, [x19,260]
+	b	.L3908
+.L3714:
+	adrp	x23, .LANCHOR3
+	add	x1, x23, :lo12:.LANCHOR3
+	ldrb	w2, [x1,1418]
 	mov	w1, 16
 	cmp	w2, 6
-	bhi	.L3669
-	adrp	x1, .L3514
-	add	x1, x1, :lo12:.L3514
+	bhi	.L3879
+	adrp	x1, .L3720
+	add	x1, x1, :lo12:.L3720
 	ldrh	w1, [x1,w2,uxtw #1]
-	adr	x2, .Lrtx3514
+	adr	x2, .Lrtx3720
 	add	x1, x2, w1, sxth #2
 	br	x1
-.Lrtx3514:
+.Lrtx3720:
 	.section	.rodata
 	.align	0
 	.align	2
-.L3514:
-	.2byte	(.L3513 - .Lrtx3514) / 4
-	.2byte	(.L3515 - .Lrtx3514) / 4
-	.2byte	(.L3516 - .Lrtx3514) / 4
-	.2byte	(.L3517 - .Lrtx3514) / 4
-	.2byte	(.L3518 - .Lrtx3514) / 4
-	.2byte	(.L3625 - .Lrtx3514) / 4
-	.2byte	(.L3520 - .Lrtx3514) / 4
+.L3720:
+	.2byte	(.L3719 - .Lrtx3720) / 4
+	.2byte	(.L3721 - .Lrtx3720) / 4
+	.2byte	(.L3722 - .Lrtx3720) / 4
+	.2byte	(.L3723 - .Lrtx3720) / 4
+	.2byte	(.L3724 - .Lrtx3720) / 4
+	.2byte	(.L3833 - .Lrtx3720) / 4
+	.2byte	(.L3726 - .Lrtx3720) / 4
 	.text
-.L3513:
+.L3719:
 	add	w21, w21, w0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x22,80]
 	uxth	w21, w21
-	ldrh	w1, [x0,2850]
-	ldrh	w25, [x0,2852]
+	ldrh	w1, [x0,2866]
+	ldrh	w25, [x0,2868]
 	add	w25, w25, w1
 	mov	w1, 65535
 	cmp	w2, w1
 	uxth	w25, w25
-	beq	.L3521
-	cbnz	w26, .L3522
-	ldrh	w0, [x0,2872]
+	beq	.L3727
+	cbnz	w26, .L3728
+	ldrh	w0, [x0,2888]
 	cmp	w20, w0, lsl 1
-	bge	.L3697
-.L3522:
+	bge	.L3908
+.L3728:
 	add	x24, x19, :lo12:.LANCHOR0
 	mov	w1, 5
-	ldrh	w0, [x24,3328]
+	ldrh	w0, [x24,3600]
 	add	w0, w0, 1
 	uxth	w0, w0
-	strh	w0, [x24,3328]
+	strh	w0, [x24,3600]
 	bl	zftl_get_gc_node
 	uxth	w2, w0
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L3524
-	add	x3, x23, :lo12:.LANCHOR4
+	beq	.L3730
+	add	x3, x23, :lo12:.LANCHOR3
 	ubfiz	x2, x2, 1, 16
-	ldr	w1, [x3,1148]
+	ldr	w1, [x3,1420]
 	add	w1, w1, 1
-	str	w1, [x3,1148]
+	str	w1, [x3,1420]
 	ldr	x3, [x24,600]
 	ldrh	w2, [x3,x2]
-	ldrh	w3, [x24,3324]
+	ldrh	w3, [x24,3596]
 	cmp	w3, w2
-	bcs	.L3525
+	bcs	.L3731
 	ldrh	w3, [x24,576]
 	cmp	w1, w3, lsr 4
-	bls	.L3524
-	ldrh	w1, [x24,2874]
+	bls	.L3730
+	ldrh	w1, [x24,2890]
 	cmp	w1, w2
-	bls	.L3524
-.L3525:
+	bls	.L3730
+.L3731:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	ldrb	w2, [x2,3297]
+	ldrb	w2, [x2,3569]
 	bl	gc_add_sblk
-	cbz	w0, .L3526
-	add	x23, x23, :lo12:.LANCHOR4
+	cbz	w0, .L3732
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 1
-	str	wzr, [x23,1148]
-	strb	w0, [x23,1146]
-	b	.L3697
-.L3524:
+	str	wzr, [x23,1420]
+	strb	w0, [x23,1418]
+	b	.L3908
+.L3730:
 	add	x0, x19, :lo12:.LANCHOR0
-	strh	wzr, [x0,3328]
-.L3526:
+	strh	wzr, [x0,3600]
+.L3732:
 	cmp	w21, 15
 	mov	w24, 2
-	bls	.L3527
-	cbz	w25, .L3627
+	bls	.L3733
+	cbz	w25, .L3835
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w24, 1
-	ldrh	w1, [x0,2854]
-	ldrh	w0, [x0,3332]
+	ldrh	w1, [x0,2870]
+	ldrh	w0, [x0,3604]
 	cmp	w1, w0
-	bls	.L3527
-.L3627:
+	bls	.L3733
+.L3835:
 	mov	w24, 2
-.L3527:
+.L3733:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3528
+	tbz	x0, 8, .L3734
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w3, w20
 	mov	w4, w21
 	ldr	x0, [x1,608]
-	ldrb	w2, [x1,3297]
-	mov	w1, 1982
+	ldrb	w2, [x1,3569]
+	mov	w1, 2171
 	ldrh	w5, [x0,124]
 	ldrh	w6, [x0,120]
 	ldrh	w7, [x0,122]
 	ldrh	w0, [x22,80]
 	str	w0, [sp]
-	adrp	x0, .LC298
-	add	x0, x0, :lo12:.LC298
+	adrp	x0, .LC304
+	add	x0, x0, :lo12:.LC304
 	bl	printk
-.L3528:
+.L3734:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, w24
 	mov	w2, 1
-	ldrb	w0, [x19,3297]
+	ldrb	w0, [x19,3569]
 	bl	gc_search_src_blk
 	cmp	w0, wzr
-	ble	.L3529
-.L3530:
-	add	x23, x23, :lo12:.LANCHOR4
+	ble	.L3735
+.L3736:
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 1
-	b	.L3700
-.L3529:
-	ldrb	w0, [x19,3297]
+	b	.L3911
+.L3735:
+	ldrb	w0, [x19,3569]
 	mov	w1, 3
 	mov	w2, 1
 	bl	gc_search_src_blk
 	cmp	w0, wzr
-	bgt	.L3530
-	b	.L3697
-.L3521:
+	bgt	.L3736
+	b	.L3908
+.L3727:
 	adrp	x27, .LANCHOR2
 	ldr	w1, [x27,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L3531
-	ldrb	w2, [x0,3297]
-	adrp	x0, .LC298
+	tbz	x1, 8, .L3737
+	ldrb	w2, [x0,3569]
+	adrp	x0, .LC304
 	ldrh	w5, [x22,124]
-	add	x0, x0, :lo12:.LC298
+	add	x0, x0, :lo12:.LC304
 	ldrh	w6, [x22,120]
-	mov	w1, 1994
+	mov	w1, 2183
 	ldrh	w7, [x22,122]
 	mov	w3, w20
 	str	w26, [sp]
 	mov	w4, w21
 	bl	printk
-.L3531:
+.L3737:
 	cmp	w26, 1
-	bne	.L3532
+	bne	.L3738
 	add	x22, x19, :lo12:.LANCHOR0
 	bl	gc_scan_static_data
 	ldr	x0, [x22,608]
 	ldrh	w0, [x0,122]
-	cbz	w0, .L3533
-.L3534:
+	cbz	w0, .L3739
+.L3740:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	add	x23, x23, :lo12:.LANCHOR4
-	strb	w0, [x19,3297]
-	b	.L3700
-.L3533:
+	add	x23, x23, :lo12:.LANCHOR3
+	strb	w0, [x19,3569]
+	b	.L3911
+.L3739:
 	bl	gc_static_wearleveling
-	cbnz	w0, .L3534
+	cbnz	w0, .L3740
 	bl	gc_block_vpn_scan
-	cbz	w21, .L3628
+	cbz	w21, .L3836
 	cmp	w20, w25
-	bcs	.L3537
-	ldrh	w0, [x22,3330]
+	bcs	.L3743
+	ldrh	w0, [x22,3602]
 	cmp	w0, w20
-	bhi	.L3538
-.L3537:
+	bhi	.L3744
+.L3743:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	w1, w20, w25
-	ldrh	w2, [x0,3330]
+	ldrh	w2, [x0,3602]
 	cmp	w1, w2
-	blt	.L3538
-	ldrh	w1, [x0,2854]
-	ldrh	w0, [x0,3332]
+	blt	.L3744
+	ldrh	w1, [x0,2870]
+	ldrh	w0, [x0,3604]
 	cmp	w1, w0
-	bcc	.L3628
-.L3538:
+	bcc	.L3836
+.L3744:
 	add	x22, x19, :lo12:.LANCHOR0
-	add	x28, x23, :lo12:.LANCHOR4
+	add	x28, x23, :lo12:.LANCHOR3
 	mov	w2, 1
-	ldr	w1, [x28,1148]
+	ldr	w1, [x28,1420]
 	ldrh	w0, [x22,576]
 	add	w1, w1, 1
-	strb	w2, [x22,3297]
-	str	w1, [x28,1148]
+	strb	w2, [x22,3569]
+	str	w1, [x28,1420]
 	cmp	w1, w0, lsr 5
-	bls	.L3540
-	ldrh	w0, [x22,2854]
+	bls	.L3746
+	ldrh	w0, [x22,2870]
 	cmp	w0, w21
-	bls	.L3540
+	bls	.L3746
 	mov	w1, 5
 	mov	w0, 0
 	str	x2, [x29,104]
@@ -22558,254 +23966,254 @@ zftl_do_gc:
 	uxth	w1, w0
 	mov	w0, 65535
 	cmp	w1, w0
-	beq	.L3628
+	beq	.L3836
 	ubfiz	x1, x1, 1, 16
 	ldr	x0, [x22,600]
-	ldrb	w3, [x22,3300]
+	ldrb	w3, [x22,3572]
 	mov	w24, 16
 	ldr	x2, [x29,104]
 	ldrh	w0, [x0,x1]
-	ldrh	w1, [x22,3324]
+	ldrh	w1, [x22,3596]
 	mul	w1, w1, w3
 	cmp	w0, w1
-	bgt	.L3536
-	str	wzr, [x28,1148]
+	bgt	.L3742
+	str	wzr, [x28,1420]
 	mov	w0, w2
 	mov	w1, 2
-	b	.L3690
-.L3540:
+	b	.L3901
+.L3746:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,2854]
-	ldrh	w1, [x0,3332]
+	ldrh	w2, [x0,2870]
+	ldrh	w1, [x0,3604]
 	cmp	w2, w1
-	bcc	.L3543
+	bcc	.L3749
 	mov	w0, 1
 	mov	w1, 2
 	mov	w2, w0
-	b	.L3691
-.L3543:
-	ldrh	w24, [x0,2850]
-	cbnz	w24, .L3544
-	ldrh	w0, [x0,2852]
+	b	.L3902
+.L3749:
+	ldrh	w24, [x0,2866]
+	cbnz	w24, .L3750
+	ldrh	w0, [x0,2868]
 	cmp	w0, 8
-	bls	.L3536
-.L3544:
+	bls	.L3742
+.L3750:
 	mov	w0, 1
 	mov	w1, w0
-.L3690:
+.L3901:
 	mov	w2, 4
-.L3691:
+.L3902:
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3530
-	b	.L3628
-.L3532:
+	cbnz	w0, .L3736
+	b	.L3836
+.L3738:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2872]
+	ldrh	w0, [x0,2888]
 	cmp	w0, w20
-	bcc	.L3697
-.L3628:
+	bcc	.L3908
+.L3836:
 	mov	w24, 16
-.L3536:
+.L3742:
 	add	x22, x19, :lo12:.LANCHOR0
-	ldr	w0, [x22,2884]
-	cbz	w0, .L3545
+	ldr	w0, [x22,2900]
+	cbz	w0, .L3751
 	mov	w0, 1
 	mov	w1, 5
-	strb	w0, [x22,3297]
+	strb	w0, [x22,3569]
 	mov	w0, 0
-	str	wzr, [x22,2884]
+	str	wzr, [x22,2900]
 	bl	zftl_get_gc_node
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L3546
+	beq	.L3752
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x22,600]
 	ldrh	w1, [x2,x1]
 	cmp	w1, 8
-	bhi	.L3546
+	bhi	.L3752
 	mov	w2, 1
 	mov	w1, 0
-	str	w2, [x22,2884]
+	str	w2, [x22,2900]
 	bl	gc_add_sblk
-	cbnz	w0, .L3530
-.L3546:
+	cbnz	w0, .L3736
+.L3752:
 	mov	w1, 4
 	mov	w0, 0
 	bl	zftl_get_gc_node
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L3547
+	beq	.L3753
 	add	x3, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x2, [x3,600]
 	ldrh	w1, [x2,x1]
 	cmp	w1, 4
-	bhi	.L3547
+	bhi	.L3753
 	mov	w2, 1
 	mov	w1, 0
-	str	w2, [x3,2884]
+	str	w2, [x3,2900]
 	bl	gc_add_sblk
-	cbnz	w0, .L3530
-.L3547:
+	cbnz	w0, .L3736
+.L3753:
 	mov	w0, 0
 	bl	zftl_get_gc_node.part.12
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L3545
+	beq	.L3751
 	add	x2, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x3, [x2,600]
 	ldrh	w1, [x3,x1]
 	cmp	w1, 4
-	bhi	.L3545
+	bhi	.L3751
 	mov	w1, 1
-	str	w1, [x2,2884]
+	str	w1, [x2,2900]
 	mov	w2, 0
 	bl	gc_add_sblk
-	cbnz	w0, .L3530
-.L3545:
+	cbnz	w0, .L3736
+.L3751:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	ldr	x7, [x22,608]
-	strb	w0, [x22,3297]
+	strb	w0, [x22,3569]
 	ldrh	w5, [x7,124]
-	cbz	w5, .L3548
-	add	x23, x23, :lo12:.LANCHOR4
-	strb	wzr, [x22,3297]
-	strb	w0, [x23,1146]
+	cbz	w5, .L3754
+	add	x23, x23, :lo12:.LANCHOR3
+	strb	wzr, [x22,3569]
+	strb	w0, [x23,1418]
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3549
+	tbz	x0, 8, .L3755
 	ldrh	w6, [x7,120]
-	adrp	x0, .LC299
+	adrp	x0, .LC305
 	ldrh	w7, [x7,122]
-	mov	w1, 2084
+	mov	w1, 2273
 	mov	w2, 0
 	mov	w3, w20
 	mov	w4, w21
-	add	x0, x0, :lo12:.LC299
+	add	x0, x0, :lo12:.LC305
 	bl	printk
-	b	.L3549
-.L3548:
-	ldrh	w2, [x22,2872]
+	b	.L3755
+.L3754:
+	ldrh	w2, [x22,2888]
 	cmp	w20, w2
-	bcs	.L3550
-	cbz	w21, .L3551
+	bcs	.L3756
+	cbz	w21, .L3757
 	cmp	w21, 16
-	bls	.L3552
-	ldrh	w2, [x22,2854]
-	ldrh	w1, [x22,3332]
+	bls	.L3758
+	ldrh	w2, [x22,2870]
+	ldrh	w1, [x22,3604]
 	cmp	w2, w1
-	bhi	.L3552
+	bhi	.L3758
 	mov	w1, w0
 	mov	w2, 4
 	str	x5, [x29,104]
 	bl	gc_search_src_blk
 	uxth	w0, w0
 	ldr	x5, [x29,104]
-	cbnz	w0, .L3553
-	ldrb	w0, [x22,3297]
-	b	.L3699
-.L3553:
+	cbnz	w0, .L3759
+	ldrb	w0, [x22,3569]
+	b	.L3910
+.L3759:
 	mov	w1, 5
 	mov	w0, w5
 	bl	zftl_get_gc_node
 	uxth	w2, w0
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L3622
-	add	x3, x23, :lo12:.LANCHOR4
+	beq	.L3830
+	add	x3, x23, :lo12:.LANCHOR3
 	ubfiz	x2, x2, 1, 16
-	ldr	w1, [x3,1148]
+	ldr	w1, [x3,1420]
 	add	w1, w1, 1
-	str	w1, [x3,1148]
+	str	w1, [x3,1420]
 	ldr	x3, [x22,600]
 	ldrh	w2, [x3,x2]
-	ldrh	w3, [x22,3324]
+	ldrh	w3, [x22,3596]
 	cmp	w3, w2
-	bcs	.L3556
+	bcs	.L3762
 	ldrh	w3, [x22,576]
 	cmp	w1, w3, lsr 4
-	bls	.L3622
-	ldrh	w1, [x22,2874]
+	bls	.L3830
+	ldrh	w1, [x22,2890]
 	cmp	w1, w2
-	bls	.L3622
-.L3556:
+	bls	.L3830
+.L3762:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	ldrb	w2, [x19,3297]
+	ldrb	w2, [x19,3569]
 	bl	gc_add_sblk
 	mov	w0, 1
-	str	w0, [x19,2884]
-	add	x0, x23, :lo12:.LANCHOR4
-	str	wzr, [x0,1148]
-	b	.L3622
-.L3552:
+	str	w0, [x19,2900]
+	add	x0, x23, :lo12:.LANCHOR3
+	str	wzr, [x0,1420]
+	b	.L3830
+.L3758:
 	mov	w0, 1
 	mov	w1, 2
 	mov	w2, w0
-	bl	gc_search_src_blk
-	uxth	w0, w0
-	cbnz	w0, .L3622
 	add	x19, x19, :lo12:.LANCHOR0
-.L3696:
-	ldrb	w0, [x19,3297]
-	mov	w1, 3
-	mov	w2, 2
-.L3693:
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	b	.L3554
-.L3551:
+	cbnz	w0, .L3830
+	b	.L3905
+.L3757:
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	strb	w21, [x22,3297]
-	tbz	x0, 8, .L3558
-	adrp	x0, .LC299
+	strb	w21, [x22,3569]
+	tbz	x0, 8, .L3764
+	adrp	x0, .LC305
 	ldrh	w6, [x7,120]
 	ldrh	w7, [x7,122]
-	add	x0, x0, :lo12:.LC299
-	mov	w1, 2114
+	add	x0, x0, :lo12:.LC305
+	mov	w1, 2303
 	mov	w2, w21
 	mov	w3, w20
 	mov	w4, w21
 	mov	w5, w21
 	bl	printk
-.L3558:
+.L3764:
 	add	x19, x19, :lo12:.LANCHOR0
 	cmp	w20, 16
-	ldrb	w0, [x19,3297]
-	bls	.L3559
-.L3699:
+	ldrb	w0, [x19,3569]
+	bls	.L3765
+.L3910:
 	mov	w1, 3
 	mov	w2, 4
-	b	.L3693
-.L3559:
+	b	.L3904
+.L3765:
 	mov	w1, 1
 	mov	w2, w1
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3622
-	b	.L3696
-.L3550:
+	cbnz	w0, .L3830
+.L3905:
+	ldrb	w0, [x19,3569]
+	mov	w1, 3
+	mov	w2, 2
+.L3904:
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	b	.L3760
+.L3756:
 	cmp	w26, 1
 	mov	w1, w24
-	bne	.L3669
+	bne	.L3879
 	cmp	w20, w2, lsl 1
-	bge	.L3560
+	bge	.L3766
 	cmp	w25, w21, lsr 1
-	bcs	.L3561
-	ldrh	w2, [x22,2854]
-	ldrh	w0, [x22,3332]
+	bcs	.L3767
+	ldrh	w2, [x22,2870]
+	ldrh	w0, [x22,3604]
 	cmp	w2, w0
-	bcs	.L3561
-	ldrh	w0, [x22,3330]
+	bcs	.L3767
+	ldrh	w0, [x22,3602]
 	lsr	w0, w0, 2
-	strh	w0, [x22,2872]
-	b	.L3669
-.L3561:
+	strh	w0, [x22,2888]
+	b	.L3879
+.L3767:
 	mov	w1, 5
 	mov	w0, 0
 	bl	zftl_get_gc_node
@@ -22813,415 +24221,426 @@ zftl_do_gc:
 	mov	w1, 65535
 	mov	w27, w22
 	cmp	w22, w1
-	bne	.L3562
-.L3567:
+	bne	.L3768
+.L3773:
 	cmp	w21, 1
-	bhi	.L3563
-	b	.L3564
-.L3562:
-	add	x26, x23, :lo12:.LANCHOR4
+	bhi	.L3769
+	b	.L3770
+.L3768:
+	add	x26, x23, :lo12:.LANCHOR3
 	add	x2, x19, :lo12:.LANCHOR0
 	uxtw	x22, w22
-	ldr	w1, [x26,1148]
+	ldr	w1, [x26,1420]
 	ldrh	w3, [x2,576]
 	add	w1, w1, 1
-	str	w1, [x26,1148]
+	str	w1, [x26,1420]
 	cmp	w1, w3, lsr 4
-	bls	.L3565
+	bls	.L3771
 	ldr	x1, [x2,600]
-	str	wzr, [x26,1148]
+	str	wzr, [x26,1420]
 	ldrh	w3, [x1,x22,lsl 1]
-	ldrh	w1, [x2,2874]
+	ldrh	w1, [x2,2890]
 	cmp	w3, w1
-	bcs	.L3565
+	bcs	.L3771
 	mov	w1, 0
 	mov	w2, 1
 	bl	gc_add_sblk
-	cbz	w0, .L3565
+	cbz	w0, .L3771
 	mov	w0, 1
-	strb	w0, [x26,1146]
-	b	.L3549
-.L3565:
+	strb	w0, [x26,1418]
+	b	.L3755
+.L3771:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	x0, [x1,600]
 	ldrh	w2, [x0,x22,lsl 1]
-	ldrh	w0, [x1,3324]
+	ldrh	w0, [x1,3596]
 	cmp	w2, w0, lsr 1
-	bhi	.L3566
+	bhi	.L3772
 	mov	w0, w27
 	mov	w1, 1
 	mov	w2, 0
 	bl	gc_add_sblk
-	b	.L3622
-.L3566:
-	ldrh	w3, [x1,2850]
-	ldrh	w0, [x1,2852]
+	b	.L3830
+.L3772:
+	ldrh	w3, [x1,2866]
+	ldrh	w0, [x1,2868]
 	add	w0, w3, w0
-	ldrh	w3, [x1,3330]
+	ldrh	w3, [x1,3602]
 	cmp	w0, w3, lsl 1
-	ble	.L3567
-	ldrh	w0, [x1,2874]
+	ble	.L3773
+	ldrh	w0, [x1,2890]
 	cmp	w0, w2
-	bcc	.L3564
-	b	.L3567
-.L3563:
+	bcc	.L3770
+	b	.L3773
+.L3769:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	cmp	w21, 16
-	strb	w0, [x22,3297]
-	bls	.L3568
-	ldrh	w2, [x22,2854]
-	ldrh	w1, [x22,3332]
+	strb	w0, [x22,3569]
+	bls	.L3774
+	ldrh	w2, [x22,2870]
+	ldrh	w1, [x22,3604]
 	cmp	w2, w1
-	bhi	.L3568
+	bhi	.L3774
 	mov	w1, w0
 	mov	w2, 4
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3569
-	ldrb	w0, [x22,3297]
+	cbnz	w0, .L3775
+	ldrb	w0, [x22,3569]
 	mov	w1, 3
 	mov	w2, 4
-	b	.L3692
-.L3568:
+	b	.L3903
+.L3774:
 	mov	w0, 1
 	mov	w1, 2
 	mov	w2, w0
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3569
+	cbnz	w0, .L3775
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 3
 	mov	w2, 2
-	ldrb	w0, [x0,3297]
-.L3692:
+	ldrb	w0, [x0,3569]
+.L3903:
 	bl	gc_search_src_blk
 	uxth	w0, w0
-.L3569:
+.L3775:
 	add	x19, x19, :lo12:.LANCHOR0
 	cmp	w20, w25, lsr 1
-	ldrh	w1, [x19,3330]
-	bls	.L3694
+	ldrh	w1, [x19,3602]
+	bls	.L3906
 	lsr	w1, w1, 2
-	b	.L3695
-.L3564:
+	b	.L3907
+.L3770:
 	cmp	w20, w25
 	add	x19, x19, :lo12:.LANCHOR0
-	bcs	.L3571
+	bcs	.L3777
 	mov	w0, 4
-	strb	wzr, [x19,3297]
+	strb	wzr, [x19,3569]
 	bl	zftl_get_gc_node.part.12
 	uxth	w0, w0
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L3571
+	beq	.L3777
 	ubfiz	x0, x0, 1, 16
 	ldr	x1, [x19,600]
-	ldrb	w2, [x19,3300]
+	ldrb	w2, [x19,3572]
 	ldrh	w1, [x1,x0]
-	ldrh	w0, [x19,3324]
+	ldrh	w0, [x19,3596]
 	mul	w0, w0, w2
 	cmp	w1, w0, lsr 1
-	bgt	.L3571
+	bgt	.L3777
 	mov	w1, 3
 	mov	w0, 0
 	mov	w2, 4
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	ldrh	w1, [x19,3330]
-.L3694:
+	ldrh	w1, [x19,3602]
+.L3906:
 	lsr	w1, w1, 1
-.L3695:
-	strh	w1, [x19,2872]
-	b	.L3554
-.L3571:
-	ldrh	w0, [x19,3330]
+.L3907:
+	strh	w1, [x19,2888]
+	b	.L3760
+.L3777:
+	ldrh	w0, [x19,3602]
 	lsr	w0, w0, 2
-	strh	w0, [x19,2872]
-	b	.L3549
-.L3560:
-	ldrh	w0, [x22,3330]
+	strh	w0, [x19,2888]
+	b	.L3755
+.L3766:
+	ldrh	w0, [x22,3602]
 	mov	w24, w5
 	lsr	w0, w0, 2
-	strh	w0, [x22,2872]
-	b	.L3549
-.L3554:
+	strh	w0, [x22,2888]
+	b	.L3755
+.L3760:
 	mov	w1, w24
-	cbz	w0, .L3669
-.L3622:
-	add	x23, x23, :lo12:.LANCHOR4
+	cbz	w0, .L3879
+.L3830:
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 1
-	strb	w0, [x23,1146]
-	b	.L3549
-.L3515:
+	strb	w0, [x23,1418]
+	b	.L3755
+.L3721:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w1, [x20,2896]
+	ldrh	w1, [x20,2912]
 	cmp	w1, w0
-	bne	.L3574
+	bne	.L3780
 	bl	gc_get_src_blk
-	strh	w0, [x20,2896]
-.L3574:
+	strh	w0, [x20,2912]
+.L3780:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
-	add	x1, x0, 2896
-	ldrh	w3, [x0,2896]
+	ldrh	w1, [x0,2912]
+	cmp	w1, w2
+	beq	.L3781
+	ldrh	w2, [x0,576]
+	cmp	w2, w1
+	bhi	.L3781
+	mov	w1, -1
+	strh	w1, [x0,2912]
+.L3781:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 65535
+	add	x1, x0, 2912
+	ldrh	w3, [x0,2912]
 	cmp	w3, w2
-	beq	.L3698
+	beq	.L3909
 	ldrh	w5, [x1,56]
 	uxtw	x4, w3
 	ldr	x2, [x0,584]
 	add	x2, x2, x4, lsl 2
-	cbz	w5, .L3577
+	cbz	w5, .L3784
 	mov	x0, 0
-.L3576:
+.L3783:
 	cmp	w5, w0, uxth
-	bls	.L3577
+	bls	.L3784
 	add	x0, x0, 1
 	add	x6, x1, x0, lsl 1
 	ldrh	w6, [x6,56]
 	cmp	w6, w3
-	bne	.L3576
-.L3582:
+	bne	.L3783
+.L3789:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	w0, [x19,2896]
-	b	.L3697
-.L3577:
+	strh	w0, [x19,2912]
+	b	.L3908
+.L3784:
 	ldrb	w0, [x2,2]
 	tst	w0, 192
-	beq	.L3635
+	beq	.L3843
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L3579
-.L3635:
+	bne	.L3786
+.L3843:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x0, [x0,600]
 	ldrh	w0, [x0,x4,lsl 1]
-	cbz	w0, .L3582
-	adrp	x1, .LANCHOR3
+	cbz	w0, .L3789
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2347
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2538
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
-	bl	dump_stack
-	b	.L3582
-.L3579:
-	add	x23, x23, :lo12:.LANCHOR4
+	bl	dump_stack
+	b	.L3789
+.L3786:
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 2
-	b	.L3700
-.L3516:
+	b	.L3911
+.L3722:
 	bl	gc_scan_src_blk
 	cmn	w0, #1
-	bne	.L3583
-	add	x23, x23, :lo12:.LANCHOR4
+	bne	.L3790
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 3
-.L3700:
-	strb	w0, [x23,1146]
-	b	.L3697
-.L3583:
+.L3911:
+	strb	w0, [x23,1418]
+	b	.L3908
+.L3790:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w3, 65535
-	ldrh	w0, [x1,2896]
+	ldrh	w0, [x1,2912]
 	cmp	w0, w3
-	beq	.L3530
-	ldrh	w3, [x1,2920]
-	add	x23, x23, :lo12:.LANCHOR4
-	cbz	w3, .L3584
+	beq	.L3736
+	ldrh	w3, [x1,2936]
+	add	x23, x23, :lo12:.LANCHOR3
+	cbz	w3, .L3791
 	mov	w0, 4
-	strh	wzr, [x1,2922]
-	strb	w0, [x23,1146]
-	b	.L3697
-.L3584:
+	strh	wzr, [x1,2938]
+	strb	w0, [x23,1418]
+	b	.L3908
+.L3791:
 	ubfiz	x0, x0, 1, 16
 	ldr	x1, [x1,600]
 	mov	w2, 1
-	strb	w2, [x23,1146]
+	strb	w2, [x23,1418]
 	ldrh	w0, [x1,x0]
-	cbz	w0, .L3585
-	adrp	x1, .LANCHOR3
+	cbz	w0, .L3792
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2375
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2566
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3585:
+.L3792:
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x21, x20, 2896
-	ldrh	w0, [x20,2896]
+	add	x21, x20, 2912
+	ldrh	w0, [x20,2912]
 	bl	ftl_free_sblk
 	ldr	x0, [x20,600]
-	ldrh	w1, [x20,2896]
+	ldrh	w1, [x20,2912]
 	strh	wzr, [x0,x1,lsl 1]
 	ldrh	w0, [x21,30]
 	add	w0, w0, 1
 	uxth	w0, w0
 	cmp	w0, 8
-	bhi	.L3586
+	bhi	.L3793
 	strh	w0, [x21,30]
-	b	.L3582
-.L3586:
+	b	.L3789
+.L3793:
 	strh	wzr, [x21,30]
 	bl	ftl_flush
 	bl	pm_flush
 	bl	ftl_ext_info_flush
 	mov	w0, 0
 	bl	ftl_info_flush
-	b	.L3582
-.L3517:
+	b	.L3789
+.L3723:
 	add	x21, x19, :lo12:.LANCHOR0
-.L3670:
+.L3880:
 	bl	gc_scan_src_blk_one_page
-	ldrh	w2, [x21,2898]
-	add	x0, x21, 2896
-	ldrh	w1, [x21,3324]
+	ldrh	w2, [x21,2914]
+	add	x0, x21, 2912
+	ldrh	w1, [x21,3596]
 	cmp	w2, w1
-	bcs	.L3588
+	bcs	.L3795
 	cmp	w20, 7
-	bls	.L3670
-	b	.L3697
-.L3588:
+	bls	.L3880
+	b	.L3908
+.L3795:
 	ldrh	w3, [x0,24]
 	adrp	x2, .LANCHOR2
-	cbz	w3, .L3589
-	add	x23, x23, :lo12:.LANCHOR4
+	cbz	w3, .L3796
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w1, 4
 	strh	wzr, [x0,26]
-	strb	w1, [x23,1146]
+	strb	w1, [x23,1418]
 	ldr	w1, [x2,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L3590
+	tbz	x1, 8, .L3797
 	ldrh	w1, [x0]
-	adrp	x0, .LC300
+	adrp	x0, .LC306
 	ldr	x4, [x21,600]
-	add	x0, x0, :lo12:.LC300
+	add	x0, x0, :lo12:.LC306
 	ubfiz	x2, x1, 1, 16
 	ldrh	w2, [x4,x2]
 	bl	printk
-.L3590:
+.L3797:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,2896]
+	ldrh	w2, [x0,2912]
 	ldr	x1, [x0,600]
-	ldrh	w0, [x0,2920]
+	ldrh	w0, [x0,2936]
 	ldrh	w1, [x1,x2,lsl 1]
 	cmp	w1, w0
-	beq	.L3591
-	adrp	x1, .LANCHOR3
+	beq	.L3798
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2409
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2600
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3591:
+.L3798:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x19,2896]
+	ldrh	w1, [x19,2912]
 	ldr	x0, [x19,600]
-	ldrh	w2, [x19,2920]
+	ldrh	w2, [x19,2936]
 	strh	w2, [x0,x1,lsl 1]
-	b	.L3697
-.L3589:
-	add	x23, x23, :lo12:.LANCHOR4
+	b	.L3908
+.L3796:
+	add	x23, x23, :lo12:.LANCHOR3
 	ldrh	w1, [x0]
 	mov	w0, 1
 	ldr	x20, [x21,584]
 	add	x20, x20, x1, uxth 2
-	strb	w0, [x23,1146]
+	strb	w0, [x23,1418]
 	ldr	w0, [x2,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3592
+	tbz	x0, 8, .L3799
 	ldrb	w2, [x20,2]
-	adrp	x0, .LC301
-	add	x0, x0, :lo12:.LC301
+	adrp	x0, .LC307
+	add	x0, x0, :lo12:.LC307
 	ubfx	x2, x2, 5, 3
 	bl	printk
-.L3592:
+.L3799:
 	ldrb	w0, [x20,2]
 	tst	w0, 192
-	beq	.L3636
+	beq	.L3844
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L3593
-.L3636:
-	adrp	x1, .LANCHOR3
+	bne	.L3800
+.L3844:
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2419
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2610
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3593:
+.L3800:
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, 2896
-	ldrh	w0, [x19,2896]
+	add	x20, x19, 2912
+	ldrh	w0, [x19,2912]
 	bl	ftl_free_sblk
 	mov	w0, -1
-	strh	w0, [x19,2896]
+	strh	w0, [x19,2912]
 	ldrh	w0, [x20,30]
 	add	w0, w0, 1
 	uxth	w0, w0
 	cmp	w0, 8
-	bhi	.L3595
+	bhi	.L3802
 	strh	w0, [x20,30]
-	b	.L3697
-.L3595:
+	b	.L3908
+.L3802:
 	strh	wzr, [x20,30]
-	b	.L3701
-.L3518:
-	cbnz	w26, .L3596
+	b	.L3912
+.L3724:
+	cbnz	w26, .L3803
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2872]
+	ldrh	w0, [x0,2888]
 	cmp	w0, w20
-	bcc	.L3697
-.L3596:
+	bcc	.L3908
+.L3803:
 	ldrh	w1, [x22,80]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L3597
+	bne	.L3804
 	add	x24, x19, :lo12:.LANCHOR0
-	ldrb	w21, [x24,3297]
+	ldrb	w21, [x24,3569]
 	cmp	w21, 1
-	bne	.L3597
+	bne	.L3804
 	bl	ftl_flush
-	ldrh	w0, [x24,3214]
-	cbz	w0, .L3598
+	ldrh	w0, [x24,3486]
+	cbz	w0, .L3805
 	mov	w0, w21
-.L3598:
+.L3805:
 	mov	w1, 5
 	bl	zftl_gc_get_free_sblk
 	uxth	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L3600
+	beq	.L3807
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x21, [x0,584]
 	add	x21, x21, x20, uxth 2
 	ldrb	w0, [x21,2]
 	tst	w0, 224
-	beq	.L3601
-	adrp	x1, .LANCHOR3
+	beq	.L3808
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2448
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2639
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3601:
+.L3808:
 	ldrb	w0, [x21,2]
 	mov	w1, 5
 	bfi	w0, w1, 5, 3
 	orr	w0, w0, 16
 	strb	w0, [x21,2]
-.L3623:
+.L3831:
 	mov	w0, w20
 	mov	w1, 1
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LANCHOR4
+	add	x23, x23, :lo12:.LANCHOR3
 	bl	ftl_erase_sblk
 	mov	w0, 5
 	add	x1, x22, 96
@@ -23229,32 +24648,32 @@ zftl_do_gc:
 	mov	w0, w20
 	bl	ftl_get_blk_list_in_sblk
 	uxtb	w0, w0
-	ldrh	w1, [x19,3324]
+	ldrh	w1, [x19,3596]
 	strb	w0, [x22,89]
-	ldrb	w2, [x19,3300]
+	ldrb	w2, [x19,3572]
 	mul	w0, w0, w1
 	strh	w0, [x22,86]
 	mov	w1, 255
-	ldrh	w0, [x19,3298]
+	ldrh	w0, [x19,3570]
 	strh	w20, [x22,80]
 	strh	wzr, [x22,82]
 	mul	w2, w0, w2
-	ldr	x0, [x23,1152]
+	ldr	x0, [x23,1424]
 	strb	wzr, [x22,85]
 	lsl	w2, w2, 2
 	strh	wzr, [x22,90]
 	bl	ftl_memset
-	ldrh	w0, [x19,3298]
+	ldrh	w0, [x19,3570]
 	mov	w1, 255
-	ldrb	w2, [x19,3300]
+	ldrb	w2, [x19,3572]
 	mul	w2, w0, w2
-	ldr	x0, [x23,1160]
+	ldr	x0, [x23,1432]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldrh	w3, [x19,3298]
+	ldrh	w3, [x19,3570]
 	mov	w1, 255
-	ldrb	w2, [x19,3300]
-	ldr	x0, [x19,3288]
+	ldrb	w2, [x19,3572]
+	ldr	x0, [x19,3560]
 	mul	w2, w3, w2
 	bl	ftl_memset
 	ldr	x0, [x19,608]
@@ -23264,18 +24683,18 @@ zftl_do_gc:
 	strh	w1, [x0,130]
 	bl	pm_flush
 	bl	ftl_ext_info_flush
-	strh	wzr, [x19,2952]
-	ldr	x0, [x19,2864]
+	strh	wzr, [x19,2968]
+	ldr	x0, [x19,2880]
 	strh	w20, [x0,126]
 	mov	w0, -1
-	str	w0, [x19,3220]
+	str	w0, [x19,3492]
 	mov	w0, 0
-	strh	wzr, [x19,3210]
-	strh	wzr, [x19,3212]
-	strh	wzr, [x19,3216]
+	strh	wzr, [x19,3482]
+	strh	wzr, [x19,3484]
+	strh	wzr, [x19,3488]
 	bl	ftl_info_flush
-	b	.L3697
-.L3597:
+	b	.L3908
+.L3804:
 	cmp	w26, 1
 	mov	w21, 4
 	csinc	w21, w21, wzr, eq
@@ -23283,109 +24702,109 @@ zftl_do_gc:
 	add	w0, w21, 4
 	add	x24, x19, :lo12:.LANCHOR0
 	csel	w21, w0, w21, ls
-.L3604:
+.L3811:
 	sub	w21, w21, #1
 	uxtb	w21, w21
 	cmp	w21, 255
-	beq	.L3697
+	beq	.L3908
 	bl	gc_do_copy_back
-	ldrb	w0, [x24,3297]
-	cbnz	w0, .L3605
-	ldrb	w0, [x24,2834]
+	ldrb	w0, [x24,3569]
+	cbnz	w0, .L3812
+	ldrb	w0, [x24,2850]
 	cmp	w0, 3
-	bhi	.L3606
+	bhi	.L3813
 	bl	ftl_write_commit
-.L3606:
-	ldrh	w1, [x24,2922]
-	ldrh	w0, [x24,2920]
+.L3813:
+	ldrh	w1, [x24,2938]
+	ldrh	w0, [x24,2936]
 	cmp	w1, w0
-	bcc	.L3604
-	add	x23, x23, :lo12:.LANCHOR4
+	bcc	.L3811
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 1
-	strb	w0, [x23,1146]
+	strb	w0, [x23,1418]
 	bl	ftl_write_commit
 	bl	ftl_flush
-	ldrh	w1, [x24,2896]
+	ldrh	w1, [x24,2912]
 	ldr	x0, [x24,600]
 	ldrh	w0, [x0,x1,lsl 1]
-	cbz	w0, .L3608
-	adrp	x1, .LANCHOR3
+	cbz	w0, .L3815
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2523
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2714
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3608:
+.L3815:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1,2896]
+	ldrh	w0, [x1,2912]
 	ldr	x3, [x1,600]
 	ubfiz	x2, x0, 1, 16
 	ldrh	w4, [x3,x2]
-	cbnz	w4, .L3609
+	cbnz	w4, .L3816
 	strh	w4, [x3,x2]
-	ldrh	w0, [x1,2896]
+	ldrh	w0, [x1,2912]
 	bl	ftl_free_sblk
-	b	.L3582
-.L3609:
+	b	.L3789
+.L3816:
 	mov	w1, 0
 	mov	w2, 1
 	bl	gc_add_sblk
-	b	.L3582
-.L3605:
-	add	x20, x24, 2896
-	ldrh	w0, [x20,320]
-	cbz	w0, .L3610
-	strh	wzr, [x20,320]
+	b	.L3789
+.L3812:
+	add	x20, x24, 2912
+	ldrh	w0, [x20,576]
+	cbz	w0, .L3817
+	strh	wzr, [x20,576]
 	bl	sblk_wait_write_queue_completed
 	bl	gc_write_completed
-	ldr	w0, [x20,324]
+	ldr	w0, [x20,580]
 	cmn	w0, #1
-	beq	.L3611
+	beq	.L3818
 	bl	ftl_mask_bad_block
-.L3611:
+.L3818:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldr	x0, [x20,608]
-	str	wzr, [x20,3220]
-	strh	wzr, [x20,2952]
+	str	wzr, [x20,3492]
+	strh	wzr, [x20,2968]
 	ldrh	w0, [x0,80]
 	bl	ftl_free_sblk
 	ldr	x1, [x20,608]
 	mov	w0, -1
-	ldr	x2, [x20,2864]
+	ldr	x2, [x20,2880]
 	strh	w0, [x1,80]
 	strh	w0, [x2,126]
 	strh	w0, [x1,130]
-	ldr	x0, [x20,2904]
-	cbz	x0, .L3612
-	bl	buf_free
-.L3612:
+	ldr	x0, [x20,2920]
+	cbz	x0, .L3819
+	bl	zbuf_free
+.L3819:
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LANCHOR4
-	str	xzr, [x19,2904]
+	add	x23, x23, :lo12:.LANCHOR3
+	str	xzr, [x19,2920]
 	bl	flt_sys_flush
-	adrp	x1, .LANCHOR3
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2561
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2752
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
-	strb	wzr, [x23,1146]
+	strb	wzr, [x23,1418]
 	bl	printk
 	bl	dump_stack
-	b	.L3697
-.L3610:
+	b	.L3908
+.L3817:
 	ldrh	w0, [x22,86]
 	cmp	w0, 1
-	bls	.L3613
+	bls	.L3820
 	ldrh	w1, [x20,26]
 	ldrh	w0, [x20,24]
 	cmp	w1, w0
-	bcc	.L3604
-	add	x23, x23, :lo12:.LANCHOR4
+	bcc	.L3811
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 1
-	strb	w0, [x23,1146]
+	strb	w0, [x23,1418]
 	ldrh	w0, [x20,56]
 	add	w1, w0, 1
 	add	x0, x20, x0, sxtw 1
@@ -23394,15 +24813,15 @@ zftl_do_gc:
 	strh	w1, [x0,58]
 	mov	w0, -1
 	strh	w0, [x20]
-	b	.L3697
-.L3613:
-	add	x23, x23, :lo12:.LANCHOR4
+	b	.L3908
+.L3820:
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 5
 	ldrh	w1, [x20,26]
-	strb	w0, [x23,1146]
+	strb	w0, [x23,1418]
 	ldrh	w0, [x20,24]
 	cmp	w1, w0
-	bcc	.L3614
+	bcc	.L3821
 	ldrh	w0, [x20,56]
 	add	w1, w0, 1
 	add	x0, x20, x0, sxtw 1
@@ -23411,7 +24830,7 @@ zftl_do_gc:
 	strh	w1, [x0,58]
 	mov	w0, -1
 	strh	w0, [x20]
-.L3614:
+.L3821:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	ftl_flush
 	bl	sblk_wait_write_queue_completed
@@ -23421,71 +24840,80 @@ zftl_do_gc:
 	strh	w1, [x0,128]
 	bl	pm_flush
 	bl	ftl_ext_info_flush
-	strh	wzr, [x20,2912]
-	ldrb	w2, [x20,3281]
-	ldrh	w1, [x20,3324]
-	strh	w1, [x20,2914]
-	cmp	w2, 2
-	strh	w2, [x20,2916]
-	bne	.L3616
+	strh	wzr, [x20,2928]
+	ldrh	w1, [x20,3596]
+	strh	w1, [x20,2930]
+	ldrb	w2, [x20,756]
+	ldrb	w1, [x20,3553]
+	strh	w1, [x20,2932]
+	cbz	w2, .L3822
+	ldrh	w2, [x20,3570]
+	strh	w2, [x20,2930]
+	mov	w2, 1
+	strh	w2, [x20,2932]
+.L3822:
+	cmp	w1, 2
+	bne	.L3824
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x2,2930]
 	lsl	w1, w1, 1
-	strh	w1, [x20,2914]
-	ldrb	w1, [x20,3282]
-	cbnz	w1, .L3616
+	strh	w1, [x2,2930]
+	ldrb	w1, [x2,3554]
+	cbnz	w1, .L3824
 	mov	w1, 1
-	strh	w1, [x20,2916]
-.L3616:
+	strh	w1, [x2,2932]
+.L3824:
 	add	x19, x19, :lo12:.LANCHOR0
-	strh	wzr, [x19,2918]
-	b	.L3697
-.L3625:
+	strh	wzr, [x19,2934]
+	b	.L3908
+.L3833:
 	mov	w21, 0
 	add	x24, x19, :lo12:.LANCHOR0
-.L3519:
+.L3725:
 	bl	gc_check_data_one_wl
-	cbz	w0, .L3619
+	cbz	w0, .L3827
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LANCHOR4
+	add	x23, x23, :lo12:.LANCHOR3
 	ldr	x0, [x19,608]
-	strh	wzr, [x19,2952]
+	strh	wzr, [x19,2968]
 	ldrh	w0, [x0,80]
 	bl	ftl_free_sblk
 	ldr	x1, [x19,608]
 	mov	w0, -1
-	ldr	x2, [x19,2864]
+	ldr	x2, [x19,2880]
 	strh	w0, [x1,80]
 	strh	w0, [x2,126]
 	strh	w0, [x1,130]
-	ldr	x0, [x19,2904]
-	bl	buf_free
-	str	xzr, [x19,2904]
-	strb	wzr, [x23,1146]
-.L3701:
+	ldr	x0, [x19,2920]
+	bl	zbuf_free
+	str	xzr, [x19,2920]
+	strb	wzr, [x23,1418]
+.L3912:
 	bl	flt_sys_flush
-	b	.L3697
-.L3619:
-	ldrh	w1, [x24,2912]
-	ldrh	w0, [x24,2914]
+	b	.L3908
+.L3827:
+	ldrh	w1, [x24,2928]
+	ldrh	w0, [x24,2930]
 	cmp	w1, w0
-	bcc	.L3620
-	add	x23, x23, :lo12:.LANCHOR4
+	bcc	.L3828
+	add	x23, x23, :lo12:.LANCHOR3
 	mov	w0, 6
-	strb	w0, [x23,1146]
-	ldr	x0, [x24,2904]
-	bl	buf_free
-	str	xzr, [x24,2904]
-	b	.L3697
-.L3620:
+	strb	w0, [x23,1418]
+	ldr	x0, [x24,2920]
+	bl	zbuf_free
+	str	xzr, [x24,2920]
+	b	.L3908
+.L3828:
 	cmp	w20, 15
-	bls	.L3519
+	bls	.L3725
 	cmp	w26, 1
-	bne	.L3697
+	bne	.L3908
 	add	w21, w21, 1
 	uxtb	w21, w21
 	cmp	w21, 4
-	bls	.L3519
-	b	.L3697
-.L3520:
+	bls	.L3725
+	b	.L3908
+.L3726:
 	bl	gc_update_l2p_map_new
 	mov	w20, -1
 	bl	gc_free_src_blk
@@ -23494,30 +24922,30 @@ zftl_do_gc:
 	bl	pm_flush
 	strh	w20, [x22,80]
 	bl	ftl_ext_info_flush
-	ldr	x0, [x19,2864]
+	ldr	x0, [x19,2880]
 	strh	w20, [x0,126]
 	mov	w0, 0
 	bl	ftl_info_flush
-.L3698:
-	add	x23, x23, :lo12:.LANCHOR4
-	strb	wzr, [x23,1146]
-.L3697:
+.L3909:
+	add	x23, x23, :lo12:.LANCHOR3
+	strb	wzr, [x23,1418]
+.L3908:
 	mov	w1, 16
-	b	.L3669
-.L3549:
+	b	.L3879
+.L3755:
 	mov	w1, w24
-	b	.L3669
-.L3600:
-	adrp	x1, .LANCHOR3
+	b	.L3879
+.L3807:
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2454
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 2645
 	add	x1, x1, 832
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-	b	.L3623
-.L3669:
+	b	.L3831
+.L3879:
 	sub	sp, x29, #16
 	mov	w0, w1
 	ldp	x19, x20, [sp,32]
@@ -23546,65 +24974,65 @@ zftl_write:
 	stp	x25, x26, [sp,64]
 	mov	w23, w2
 	mov	x24, x3
-	tbz	x0, 12, .L3703
-	adrp	x0, .LC302
+	tbz	x0, 12, .L3914
+	adrp	x0, .LC308
 	ldr	w4, [x24]
-	add	x0, x0, :lo12:.LC302
+	add	x0, x0, :lo12:.LC308
 	mov	w1, w19
 	mov	w2, w28
 	mov	w3, w23
 	bl	printk
-.L3703:
-	cbnz	w19, .L3704
+.L3914:
+	cbnz	w19, .L3915
 	adrp	x0, .LANCHOR0+520
 	mov	w19, 24576
 	ldr	w2, [x0,#:lo12:.LANCHOR0+520]
-	b	.L3705
-.L3704:
+	b	.L3916
+.L3915:
 	cmp	w19, 3
 	mov	w0, -1
-	bhi	.L3706
+	bhi	.L3917
 	lsl	w19, w19, 13
 	mov	w2, 8192
-.L3705:
+.L3916:
 	add	w1, w28, w23
 	mov	w0, -1
 	cmp	w1, w2
-	bhi	.L3706
+	bhi	.L3917
 	add	w28, w19, w28
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	sub	w22, w23, #1
 	add	w22, w22, w28
 	add	w26, w28, w23
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	udiv	w25, w28, w0
 	mov	w21, w25
 	udiv	w22, w22, w0
 	sub	w20, w22, w25
 	add	w20, w20, 1
-.L3707:
-	cbz	w20, .L3726
+.L3918:
+	cbz	w20, .L3937
 	mov	w0, 0
 	bl	buf_alloc
 	mov	x27, x0
-	cbnz	x0, .L3708
+	cbnz	x0, .L3919
 	bl	ftl_write_commit
-	b	.L3707
-.L3708:
+	b	.L3918
+.L3919:
 	strb	wzr, [x0,57]
 	add	x0, x19, :lo12:.LANCHOR0
 	cmp	w21, w25
-	ldrb	w4, [x0,2832]
+	ldrb	w4, [x0,2848]
 	cset	w0, eq
 	strb	w4, [x27,56]
 	cmp	w21, w22
-	beq	.L3710
-	cbz	w0, .L3711
-	b	.L3720
-.L3710:
-	cbz	w0, .L3712
-.L3720:
+	beq	.L3921
+	cbz	w0, .L3922
+	b	.L3931
+.L3921:
+	cbz	w0, .L3923
+.L3931:
 	udiv	w0, w28, w4
 	msub	w0, w0, w4, w28
 	uxtb	w0, w0
@@ -23613,12 +25041,12 @@ zftl_write:
 	uxtb	w4, w4
 	cmp	w4, w23
 	csel	w4, w23, w4, hi
-	b	.L3724
-.L3712:
+	b	.L3935
+.L3923:
 	msub	w4, w4, w21, w26
-.L3724:
+.L3935:
 	strb	w4, [x27,56]
-.L3711:
+.L3922:
 	ldrb	w1, [x27,57]
 	sub	w20, w20, #1
 	ldr	x0, [x27,8]
@@ -23630,7 +25058,7 @@ zftl_write:
 	str	w21, [x27,36]
 	add	x0, x19, :lo12:.LANCHOR0
 	add	w21, w21, 1
-	ldr	x1, [x0,2864]
+	ldr	x1, [x0,2880]
 	ldr	w0, [x1,8]
 	add	w2, w0, 1
 	str	w2, [x1,8]
@@ -23639,27 +25067,27 @@ zftl_write:
 	bl	ftl_write_buf
 	ldrb	w0, [x27,56]
 	add	x24, x24, x0, lsl 9
-	b	.L3707
-.L3726:
+	b	.L3918
+.L3937:
 	bl	ftl_write_commit
 	mov	w0, w20
-.L3725:
+.L3936:
 	mov	w1, 1
 	bl	zftl_do_gc
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x1,2844]
-	ldrh	w0, [x1,2848]
+	ldrh	w2, [x1,2860]
+	ldrh	w0, [x1,2864]
 	add	w0, w2, w0
 	cmp	w0, 7
-	bgt	.L3727
+	bgt	.L3938
 	mov	w0, 0
-	b	.L3725
-.L3727:
+	b	.L3936
+.L3938:
 	bl	timer_get_time
-	adrp	x1, .LANCHOR7-60
-	str	w0, [x1,#:lo12:.LANCHOR7-60]
+	adrp	x1, .LANCHOR6+260
+	str	w0, [x1,#:lo12:.LANCHOR6+260]
 	mov	w0, 0
-.L3706:
+.L3917:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -23717,60 +25145,60 @@ zftl_discard:
 	stp	x27, x28, [sp,80]
 	ldr	w1, [x1,520]
 	cmp	w2, w1
-	bhi	.L3731
-	adrp	x23, .LANCHOR7
-	add	w24, w0, 24576
-	add	x0, x23, :lo12:.LANCHOR7
+	bhi	.L3942
+	adrp	x22, .LANCHOR6
+	add	w23, w0, 24576
+	add	x0, x22, :lo12:.LANCHOR6
 	adrp	x25, .LANCHOR2
-	ldr	w1, [x0,-56]
+	ldr	w1, [x0,264]
 	add	w1, w19, w1
-	str	w1, [x0,-56]
+	str	w1, [x0,264]
 	ldr	w0, [x25,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3732
-	adrp	x0, .LC303
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC303
+	tbz	x0, 12, .L3943
+	adrp	x0, .LC309
+	mov	w2, w23
+	add	x0, x0, :lo12:.LC309
 	mov	w3, w19
 	mov	w4, 0
 	bl	printk
-.L3732:
+.L3943:
 	add	x20, x21, :lo12:.LANCHOR0
-	ldr	x0, [x20,2864]
+	ldr	x0, [x20,2880]
 	ldr	w26, [x0,8]
 	add	w1, w26, 1
 	str	w1, [x0,8]
 	bl	ftl_write_commit
 	bl	ftl_flush
-	ldrb	w22, [x20,2832]
-	udiv	w20, w24, w22
-	msub	w27, w20, w22, w24
-	cbz	w27, .L3733
-	sub	w22, w22, w27
+	ldrb	w24, [x20,2848]
+	udiv	w20, w23, w24
+	msub	w27, w20, w24, w23
+	cbz	w27, .L3944
+	sub	w24, w24, w27
 	mov	w0, w20
-	cmp	w22, w19
-	csel	w22, w22, w19, ls
+	cmp	w24, w19
+	csel	w24, w24, w19, ls
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,120]
 	cmn	w0, #1
-	bne	.L3734
+	bne	.L3945
 	mov	w0, w20
 	add	x1, x29, 120
 	mov	w2, 0
 	bl	pm_log2phys
-.L3734:
+.L3945:
 	ldr	w0, [x29,120]
-	and	w28, w22, 65535
+	and	w28, w24, 65535
 	cmn	w0, #1
-	beq	.L3736
+	beq	.L3947
 	mov	w0, 0
 	bl	buf_alloc
 	mov	x3, x0
-	cbz	x0, .L3736
+	cbz	x0, .L3947
 	strb	w27, [x0,57]
 	ubfiz	x27, x27, 9, 25
 	str	w20, [x0,36]
 	mov	w1, 0
-	strb	w22, [x0,56]
+	strb	w24, [x0,56]
 	lsl	w2, w28, 9
 	str	w26, [x0,32]
 	ldr	x0, [x0,8]
@@ -23782,36 +25210,36 @@ zftl_discard:
 	bl	ftl_write_buf
 	bl	ftl_write_commit
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x1, [x0,2864]
+	ldr	x1, [x0,2880]
 	ldr	w0, [x1,76]
 	add	w0, w0, 1
 	str	w0, [x1,76]
-.L3736:
+.L3947:
 	add	w20, w20, 1
 	sub	w19, w19, w28
-.L3733:
-	cbz	w19, .L3738
+.L3944:
+	cbz	w19, .L3949
 	bl	ftl_flush
-.L3738:
+.L3949:
 	mov	w0, -1
 	mov	w27, 1
 	str	w0, [x29,124]
-	mov	w28, 21
-.L3739:
-	add	x22, x21, :lo12:.LANCHOR0
-	ldrb	w0, [x22,2832]
+	mov	w28, 24
+.L3950:
+	add	x24, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x24,2848]
 	cmp	w19, w0
-	bcc	.L3778
+	bcc	.L3989
 	mov	w0, w20
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,120]
 	cmn	w0, #1
-	beq	.L3740
+	beq	.L3951
 	mov	w0, 0
 	bl	buf_alloc
 	mov	x3, x0
-	cbz	x0, .L3742
-	ldrb	w2, [x22,2832]
+	cbz	x0, .L3953
+	ldrb	w2, [x24,2848]
 	mov	w1, 0
 	str	w20, [x0,36]
 	strb	w2, [x0,56]
@@ -23825,110 +25253,112 @@ zftl_discard:
 	mov	x0, x3
 	bl	ftl_write_buf
 	bl	ftl_write_commit
-	b	.L3777
-.L3740:
+	b	.L3988
+.L3951:
 	mov	w0, w20
 	add	x1, x29, 120
 	mov	w2, 0
 	bl	pm_log2phys
 	ldr	w0, [x29,120]
 	cmn	w0, #1
-	beq	.L3742
+	beq	.L3953
 	add	x1, x29, 124
 	mov	w2, 1
 	mov	w0, w20
 	bl	pm_log2phys
-	ldrh	w0, [x22,3264]
-	ldr	w1, [x29,120]
-	sub	w2, w28, w0
-	lsl	w2, w27, w2
-	lsr	w0, w1, w0
-	sub	w2, w2, #1
-	ldrb	w1, [x22,3266]
-	and	w0, w2, w0
-	udiv	w0, w0, w1
+	ldrb	w1, [x24,744]
+	ldrh	w2, [x24,3536]
+	sub	w1, w28, w1
+	ldr	w0, [x29,120]
+	sub	w1, w1, w2
+	lsl	w1, w27, w1
+	lsr	w0, w0, w2
+	sub	w1, w1, #1
+	and	w1, w1, w0
+	ldrb	w0, [x24,3538]
+	udiv	w0, w1, w0
 	bl	ftl_vpn_decrement
-.L3777:
-	ldr	x1, [x22,2864]
+.L3988:
+	ldr	x1, [x24,2880]
 	ldr	w0, [x1,76]
 	add	w0, w0, 1
 	str	w0, [x1,76]
-.L3742:
+.L3953:
 	add	x0, x21, :lo12:.LANCHOR0
 	add	w20, w20, 1
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	sub	w19, w19, w0
-	b	.L3739
-.L3778:
-	cbz	w19, .L3746
+	b	.L3950
+.L3989:
+	cbz	w19, .L3957
 	mov	w0, w20
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,120]
 	cmn	w0, #1
-	bne	.L3747
+	bne	.L3958
 	mov	w0, w20
 	add	x1, x29, 120
 	mov	w2, 0
 	bl	pm_log2phys
-.L3747:
+.L3958:
 	ldr	w0, [x29,120]
 	cmn	w0, #1
-	beq	.L3746
+	beq	.L3957
 	mov	w0, 0
 	bl	buf_alloc
-	mov	x22, x0
-	cbz	x0, .L3746
+	mov	x24, x0
+	cbz	x0, .L3957
 	str	w20, [x0,36]
 	strb	wzr, [x0,57]
 	strb	w19, [x0,56]
 	str	w26, [x0,32]
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2832]
+	ldrb	w0, [x0,2848]
 	cmp	w19, w0
-	bcc	.L3749
-	adrp	x1, .LANCHOR3
+	bcc	.L3960
+	adrp	x1, .LANCHOR4
 	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1251
+	add	x1, x1, :lo12:.LANCHOR4
+	mov	w2, 1259
 	add	x1, x1, 848
 	add	x0, x0, :lo12:.LC0
 	bl	printk
 	bl	dump_stack
-.L3749:
-	ldr	x0, [x22,8]
+.L3960:
+	ldr	x0, [x24,8]
 	mov	w1, 0
 	lsl	w2, w19, 9
 	bl	ftl_memset
-	mov	x0, x22
+	mov	x0, x24
 	bl	ftl_write_buf
 	bl	ftl_write_commit
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x1, [x0,2864]
+	ldr	x1, [x0,2880]
 	ldr	w0, [x1,76]
 	add	w0, w0, 1
 	str	w0, [x1,76]
-.L3746:
-	add	x0, x23, :lo12:.LANCHOR7
+.L3957:
+	add	x0, x22, :lo12:.LANCHOR6
 	mov	w4, 0
-	ldr	w1, [x0,-56]
+	ldr	w1, [x0,264]
 	cmp	w1, 8192
-	bls	.L3731
+	bls	.L3942
 	ldr	w0, [x25,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3750
-	adrp	x0, .LC303
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC303
+	tbz	x0, 12, .L3961
+	adrp	x0, .LC309
+	mov	w2, w23
+	add	x0, x0, :lo12:.LC309
 	mov	w3, w19
 	bl	printk
-.L3750:
-	add	x23, x23, :lo12:.LANCHOR7
+.L3961:
+	add	x22, x22, :lo12:.LANCHOR6
 	add	x21, x21, :lo12:.LANCHOR0
-	str	wzr, [x23,-56]
+	str	wzr, [x22,264]
 	bl	flt_sys_flush
 	mov	w0, 1
 	mov	w4, 0
-	str	w0, [x21,2884]
-.L3731:
+	str	w0, [x21,2900]
+.L3942:
 	mov	w0, w4
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -23937,7 +25367,58 @@ zftl_discard:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 128
 	ret
-	.size	zftl_discard, .-zftl_discard
+	.size	zftl_discard, .-zftl_discard
+	.align	2
+	.global	dump_pm_blk
+	.type	dump_pm_blk, %function
+dump_pm_blk:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LC267
+	mov	w2, 4
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	add	x0, x0, :lo12:.LC267
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR3
+	mov	w22, 65535
+	ldr	x3, [x19,2880]
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	add	x3, x20, :lo12:.LANCHOR3
+	ldr	x1, [x19,2880]
+	adrp	x0, .LC268
+	mov	w2, 2
+	add	x0, x0, :lo12:.LC268
+	add	x1, x1, 416
+	ldrh	w3, [x3,1456]
+	mov	w19, 0
+	bl	rknand_print_hex
+.L3991:
+	add	x0, x20, :lo12:.LANCHOR3
+	ldrh	w0, [x0,1456]
+	cmp	w0, w19
+	bls	.L3994
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0,2880]
+	add	x0, x0, x19, sxtw 1
+	ldrh	w0, [x0,416]
+	cmp	w0, w22
+	beq	.L3992
+	mov	x1, 0
+	bl	ftl_sblk_dump
+.L3992:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L3991
+.L3994:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	dump_pm_blk, .-dump_pm_blk
 	.align	2
 	.global	id_block_prog_msb_ff_data
 	.type	id_block_prog_msb_ff_data, %function
@@ -23947,7 +25428,7 @@ id_block_prog_msb_ff_data:
 	stp	x21, x22, [sp,32]
 	adrp	x21, .LANCHOR0
 	stp	x23, x24, [sp,48]
-	uxtb	w23, w0
+	uxtb	w24, w0
 	add	x0, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
@@ -23956,55 +25437,55 @@ id_block_prog_msb_ff_data:
 	ldr	x2, [x0,624]
 	ldrb	w0, [x0,634]
 	ldrb	w2, [x2,19]
-	cbnz	w0, .L3779
+	cbnz	w0, .L3995
 	sub	w0, w2, #5
 	uxtb	w0, w0
 	cmp	w0, 2
-	bls	.L3781
+	bls	.L3997
 	cmp	w2, 68
-	beq	.L3781
+	beq	.L3997
 	sub	w2, w2, #19
 	and	w2, w2, -17
 	uxtb	w2, w2
-	cbnz	w2, .L3779
-.L3781:
-	adrp	x24, .LC304
-	adrp	x20, .LANCHOR4
-	mov	w25, w1
-	add	x24, x24, :lo12:.LC304
-	add	x20, x20, :lo12:.LANCHOR4
+	cbnz	w2, .L3995
+.L3997:
+	adrp	x20, .LANCHOR3
+	adrp	x22, .LC310
+	add	x20, x20, :lo12:.LANCHOR3
+	mov	w23, w1
+	add	x22, x22, :lo12:.LC310
+	add	x26, x20, 356
 	mov	w27, 65535
-.L3783:
-	add	x28, x21, :lo12:.LANCHOR0
-	ldr	x0, [x28,624]
+.L3999:
+	add	x25, x21, :lo12:.LANCHOR0
+	ldr	x0, [x25,624]
 	ldrh	w0, [x0,10]
 	cmp	w0, w19
-	bls	.L3779
-	add	x22, x20, 84
-	add	w26, w19, w25
-	mov	x0, x24
+	bls	.L3995
+	add	w28, w19, w23
+	ldrh	w3, [x26,w19,sxtw 1]
+	mov	x0, x22
 	mov	w1, w19
-	mov	w2, w26
-	ldrh	w3, [x22,w19,sxtw 1]
+	mov	w2, w28
 	bl	printk
-	ldrh	w0, [x22,w19,sxtw 1]
+	ldrh	w0, [x26,w19,sxtw 1]
 	cmp	w0, w27
-	bne	.L3779
-	ldr	x0, [x20,1208]
+	bne	.L3995
+	ldr	x0, [x20,1488]
 	mov	w1, 255
 	mov	w2, 16384
 	add	w19, w19, 1
 	bl	ftl_memset
 	uxth	w19, w19
-	ldr	x4, [x28,624]
-	mov	w0, w23
-	ldr	x2, [x20,1208]
-	mov	w1, w26
+	ldr	x4, [x25,624]
+	mov	w0, w24
+	ldr	x2, [x20,1488]
+	mov	w1, w28
 	ldrb	w4, [x4,9]
 	mov	x3, x2
 	bl	flash_prog_page
-	b	.L3783
-.L3779:
+	b	.L3999
+.L3995:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -24017,85 +25498,102 @@ id_block_prog_msb_ff_data:
 	.global	write_idblock
 	.type	write_idblock, %function
 write_idblock:
-	stp	x29, x30, [sp, -256]!
+	stp	x29, x30, [sp, -272]!
 	add	x29, sp, 0
-	stp	x25, x26, [sp,64]
-	adrp	x25, .LANCHOR0
-	add	x26, x25, :lo12:.LANCHOR0
-	str	x2, [x29,160]
 	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	add	x26, x23, :lo12:.LANCHOR0
+	mov	x25, x1
 	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
-	stp	x27, x28, [sp,80]
 	mov	w19, w0
-	mov	x24, x1
+	str	x2, [x29,176]
 	ldr	x0, [x26,624]
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
 	ldrb	w20, [x0,9]
-	ldrh	w22, [x0,10]
+	ldrh	w21, [x0,10]
 	adrp	x0, .LANCHOR2+34
-	ldrh	w21, [x0,#:lo12:.LANCHOR2+34]
-	ldrb	w0, [x25,#:lo12:.LANCHOR0]
+	ldrh	w22, [x0,#:lo12:.LANCHOR2+34]
+	ldrb	w0, [x23,#:lo12:.LANCHOR0]
 	str	w0, [x29,168]
+	ldrh	w0, [x29,168]
+	str	w0, [x29,192]
+	ldrb	w0, [x26,634]
+	str	w0, [x29,160]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	bl	ftl_malloc
-	str	x25, [x29,176]
-	mov	x23, x0
-	cbnz	x0, .L3786
-.L3790:
+	str	x23, [x29,184]
+	mov	x24, x0
 	mov	w0, -1
-	b	.L3852
-.L3786:
-	ldr	x0, [x29,176]
-	str	wzr, [x29,172]
-	ldrb	w0, [x0,#:lo12:.LANCHOR0]
-	cbz	w0, .L3788
+	cbz	x24, .L4074
+	adrp	x0, .LANCHOR6+238
+	str	wzr, [x29,204]
+	ldrb	w0, [x0,#:lo12:.LANCHOR6+238]
+	cbz	w0, .L4003
+	ldrb	w1, [x23,#:lo12:.LANCHOR0]
 	ldrb	w0, [x26,634]
-	cbnz	w0, .L3788
-	adrp	x0, .LANCHOR7-82
-	ldrb	w0, [x0,#:lo12:.LANCHOR7-82]
+	cbz	w1, .L4004
 	cmp	w0, wzr
-	cset	w0, ne
-	str	w0, [x29,172]
-.L3788:
+	cset	w0, eq
+	b	.L4076
+.L4004:
+	ldr	w2, [x29,192]
+	cmp	w0, 3
+	mov	w1, 3
+	mov	w23, 2
+	csel	w1, w2, w1, ne
+	cmp	w0, 3
+	str	w1, [x29,192]
+	csel	w0, wzr, w23, ne
+.L4076:
+	str	w0, [x29,204]
+.L4003:
 	mov	w0, 0
 	add	w19, w19, 511
 	lsr	w19, w19, 9
 	bl	zftl_flash_exit_slc_mode
-	ldr	x0, [x29,176]
+	ldr	x0, [x29,184]
 	cmp	w19, 8
-	ldr	x1, [x29,176]
+	ldr	x1, [x29,184]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,634]
 	strb	w0, [x1,#:lo12:.LANCHOR0]
-	bls	.L3823
+	bls	.L4042
 	cmp	w19, 500
-	bhi	.L3790
-	b	.L3789
-.L3823:
+	bhi	.L4006
+	b	.L4005
+.L4042:
 	mov	w19, 8
-.L3789:
-	ldr	w1, [x24]
+.L4005:
+	ldr	w1, [x25]
 	mov	w0, 35899
 	movk	w0, 0xfcdc, lsl 16
 	cmp	w1, w0
-	bne	.L3790
+	beq	.L4007
+.L4006:
+	mov	x0, x24
+	bl	ftl_free
+	mov	w0, -1
+	b	.L4074
+.L4007:
 	uxth	w20, w20
 	mov	w3, 0
 	mov	w2, 63871
 	mov	w4, 4097
-	mul	w22, w20, w22
-	uxth	w22, w22
-	sub	w0, w22, #1
+	mul	w21, w20, w21
+	uxth	w21, w21
+	sub	w0, w21, #1
 	add	w0, w0, w19
-	udiv	w0, w0, w22
-	str	w0, [x29,148]
-	add	x0, x24, 253952
+	udiv	w0, w0, w21
+	str	w0, [x29,156]
+	add	x0, x25, 253952
 	add	x0, x0, 1532
-.L3794:
+.L4011:
 	ldr	w1, [x0]
-	cbnz	w1, .L3791
-	ldr	w1, [x24,w3,uxtw 2]
+	cbnz	w1, .L4008
+	ldr	w1, [x25,w3,uxtw 2]
 	add	w3, w3, 1
 	cmp	w3, w4
 	sub	w2, w2, #1
@@ -24103,153 +25601,154 @@ write_idblock:
 	csel	w3, w3, wzr, cc
 	cmp	w2, 4096
 	sub	x0, x0, #4
-	bne	.L3794
-	b	.L3793
-.L3791:
-	adrp	x0, .LC305
-	add	x0, x0, :lo12:.LC305
+	bne	.L4011
+	b	.L4010
+.L4008:
+	adrp	x0, .LC311
+	add	x0, x0, :lo12:.LC311
 	bl	printk
-.L3793:
-	mul	w20, w20, w21
-	ldr	x1, [x29,160]
+.L4010:
+	mul	w20, w20, w22
+	ldr	x1, [x29,176]
 	mov	w2, 4
 	mov	w3, 5
 	mov	x21, 0
 	uxth	w0, w20
-	str	w0, [x29,156]
-	adrp	x0, .LC306
-	adrp	x25, .LANCHOR0
-	add	x0, x0, :lo12:.LC306
+	str	w0, [x29,172]
+	adrp	x0, .LC312
+	adrp	x26, .LANCHOR0
+	add	x0, x0, :lo12:.LC312
 	bl	rknand_print_hex
-	adrp	x0, .LC307
+	adrp	x0, .LC313
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC307
+	add	x0, x0, :lo12:.LC313
 	mov	w2, w19
 	bl	printk
-	str	w21, [x29,188]
+	str	w21, [x29,200]
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
+	str	x0, [x29,136]
+	adrp	x0, .LC314
+	add	x0, x0, :lo12:.LC314
 	str	x0, [x29,128]
-	adrp	x0, .LC308
-	add	x0, x0, :lo12:.LC308
-	str	x0, [x29,120]
-.L3819:
-	adrp	x1, .LANCHOR7-82
-	ldrb	w1, [x1,#:lo12:.LANCHOR7-82]
-	cbnz	w1, .L3795
-	ldr	x1, [x29,160]
-	ldr	w2, [x29,156]
+.L4036:
+	adrp	x1, .LANCHOR6+238
+	ldrb	w1, [x1,#:lo12:.LANCHOR6+238]
+	cbnz	w1, .L4012
+	ldr	x1, [x29,176]
+	ldr	w2, [x29,172]
 	ldr	w1, [x1,x21,lsl 2]
 	mul	w20, w1, w2
-	cbz	w21, .L3796
-	ldr	w2, [x29,148]
+	cbz	w21, .L4013
+	ldr	w2, [x29,156]
 	cmp	w2, 1
-	bls	.L3796
+	bls	.L4013
 	sub	w0, w21, #1
-	ldr	x2, [x29,160]
+	ldr	x2, [x29,176]
 	ldr	w0, [x2,x0,lsl 2]
 	add	w0, w0, 1
 	cmp	w1, w0
-	bne	.L3796
-	b	.L3797
-.L3795:
-	add	x22, x25, :lo12:.LANCHOR0
-	ldr	x0, [x22,728]
-	add	x0, x0, x21, uxtw
-	ldrb	w20, [x0,32]
+	bne	.L4013
+	b	.L4014
+.L4012:
+	add	x22, x26, :lo12:.LANCHOR0
+	ldr	x1, [x22,728]
+	add	x1, x1, x21, uxtw
+	ldrb	w20, [x1,32]
 	cmp	w20, 255
-	beq	.L3797
-	ldr	w0, [x29,156]
-	mul	w20, w20, w0
-	ldr	w0, [x29,172]
-	cbz	w0, .L3796
-	cmp	x21, 1
-	bne	.L3798
-	ldrb	w0, [x29,168]
-	strb	w0, [x25,#:lo12:.LANCHOR0]
+	beq	.L4014
+	ldr	w1, [x29,172]
+	mul	w20, w20, w1
+	ldr	w1, [x29,204]
+	cbz	w1, .L4013
+	and	w0, w21, -3
+	cmp	w0, 1
+	bne	.L4015
+	ldrb	w0, [x29,192]
+	strb	w0, [x26,#:lo12:.LANCHOR0]
 	strb	w0, [x22,634]
-	b	.L3796
-.L3798:
+	b	.L4013
+.L4015:
 	mov	w0, 0
 	bl	zftl_flash_exit_slc_mode
-	strb	wzr, [x25,#:lo12:.LANCHOR0]
+	strb	wzr, [x26,#:lo12:.LANCHOR0]
 	strb	wzr, [x22,634]
-.L3796:
+.L4013:
 	mov	w1, 0
 	mov	w2, 512
-	mov	x0, x23
+	mov	x0, x24
 	bl	ftl_memset
-	ldr	x0, [x29,176]
+	ldr	x0, [x29,184]
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1,624]
-	ldrb	w26, [x2,9]
-	ldrh	w27, [x2,10]
-	ldr	x2, [x29,128]
-	uxth	w0, w26
+	ldrb	w27, [x2,9]
+	ldrh	w2, [x2,10]
+	uxth	w0, w27
+	mul	w2, w0, w2
+	uxth	w23, w2
+	ldr	x2, [x29,136]
 	ldrh	w22, [x2,34]
-	mul	w27, w0, w27
 	mul	w22, w0, w22
 	ldrb	w0, [x1,720]
-	uxth	w27, w27
 	strb	wzr, [x1,720]
-	udiv	w1, w20, w26
-	str	w0, [x29,144]
+	udiv	w1, w20, w27
+	str	w0, [x29,152]
 	mov	w0, 0
 	uxth	w22, w22
 	bl	flash_erase_block
-	cmp	w19, w27
-	mov	w2, 1
-	bls	.L3799
+	cmp	w19, w23
+	mov	w3, 1
+	bls	.L4016
 	mov	w0, 0
 	add	w1, w20, w22
 	bl	flash_erase_block
-	mov	w2, 2
-.L3799:
-	add	x27, x25, :lo12:.LANCHOR0
-	ldr	x1, [x27,624]
+	mov	w3, 2
+.L4016:
+	add	x23, x26, :lo12:.LANCHOR0
+	ldr	x1, [x23,624]
 	ldrh	w0, [x1,10]
 	ldrb	w1, [x1,12]
 	lsl	w0, w0, 2
-	mul	w0, w0, w2
+	mul	w0, w0, w3
 	sdiv	w0, w0, w1
-	str	w0, [x29,140]
+	str	w0, [x29,148]
 	udiv	w0, w20, w22
 	msub	w0, w0, w22, w20
-	str	w0, [x29,152]
+	str	w0, [x29,164]
 	sub	w0, w20, w0
-	str	w0, [x29,184]
+	str	w0, [x29,196]
 	cmp	w20, w0
-	bne	.L3826
-	ldrb	w0, [x27,516]
+	bne	.L4045
+	ldrb	w0, [x23,516]
 	cmp	w0, 9
-	bne	.L3826
-	adrp	x0, .LANCHOR4+1248
+	bne	.L4045
+	adrp	x0, .LANCHOR3+1528
 	mov	w1, 0
 	mov	w2, 1024
-	ldr	x3, [x0,#:lo12:.LANCHOR4+1248]
-	str	x3, [x29,112]
+	ldr	x3, [x0,#:lo12:.LANCHOR3+1528]
+	str	x3, [x29,120]
 	mov	x0, x3
 	bl	ftl_memset
-	ldr	x3, [x29,112]
+	ldr	x3, [x29,120]
 	mov	w0, 18766
 	movk	w0, 0x464e, lsl 16
 	str	w0, [x3]
 	mov	w0, 12
 	str	w0, [x3,4]
-	ldrb	w0, [x27,634]
+	ldrb	w0, [x23,634]
 	str	wzr, [x3,12]
 	strb	wzr, [x3,16]
-	cbz	w0, .L3801
-	ldr	x0, [x27,624]
+	cbz	w0, .L4018
+	ldr	x0, [x23,624]
 	ldrb	w0, [x0,29]
 	strb	w0, [x3,16]
-.L3801:
+.L4018:
 	mov	w0, 4
 	strb	w0, [x3,17]
 	adrp	x0, .LANCHOR0
-	cmp	w26, 8
+	cmp	w27, 8
 	add	x0, x0, :lo12:.LANCHOR0
-	str	x3, [x29,112]
+	str	x3, [x29,120]
 	sub	w22, w19, #4
 	ldr	x1, [x0,624]
 	ldrh	w0, [x1,10]
@@ -24265,174 +25764,182 @@ write_idblock:
 	strb	w0, [x3,21]
 	add	x0, x3, 12
 	bl	js_hash
-	ldr	x3, [x29,112]
+	ldr	x3, [x29,120]
 	str	w0, [x3,8]
-	b	.L3800
-.L3826:
+	b	.L4017
+.L4045:
 	mov	w22, w19
 	mov	x3, 0
-.L3800:
-	mov	x28, x24
-	mov	w27, 0
-	add	x11, x25, :lo12:.LANCHOR0
-.L3803:
-	ldr	w0, [x29,140]
-	cmp	w27, w0
-	bcs	.L3855
-	ldr	w0, [x29,152]
+.L4017:
+	mov	x23, x25
+	mov	w28, 0
+	add	x11, x26, :lo12:.LANCHOR0
+.L4020:
+	ldr	w0, [x29,148]
+	cmp	w28, w0
+	bcs	.L4078
+	ldr	w0, [x29,164]
 	ldrb	w2, [x11,634]
-	add	w8, w27, w0
+	add	w8, w28, w0
 	add	x0, x11, 4
 	ubfx	x8, x8, 2, 16
 	add	w1, w8, 1
 	ldrh	w0, [x0,w1,sxtw 1]
-	cbz	w2, .L3805
+	cbz	w2, .L4022
 	ldrb	w4, [x11,1]
 	lsl	w0, w1, 1
 	cmp	w4, wzr
 	csel	w0, w0, w1, ne
-.L3805:
+.L4022:
 	ldrb	w1, [x11,516]
 	cmp	w1, 9
-	beq	.L3854
+	beq	.L4077
 	sub	w0, w0, #1
 	lsl	w0, w0, 2
-.L3854:
-	str	w0, [x29,192]
+.L4077:
+	str	w0, [x29,208]
 	mov	w0, 61424
-	str	w0, [x29,196]
+	str	w0, [x29,212]
 	add	x0, x11, 4
 	ldrh	w0, [x0,w8,sxtw 1]
-	cbnz	w2, .L3809
+	cbnz	w2, .L4026
 	mov	w8, w0
-	b	.L3810
-.L3809:
+	b	.L4027
+.L4026:
 	ldrb	w1, [x11,1]
 	lsl	w0, w8, 1
 	cmp	w1, wzr
 	csel	w8, w0, w8, ne
-.L3810:
-	mul	w0, w8, w26
-	cbnz	x3, .L3811
-	ldr	w1, [x29,184]
-	mov	w2, w27
-	ldr	w5, [x28]
+.L4027:
+	mul	w0, w8, w27
+	cbnz	x3, .L4028
+	ldr	w1, [x29,196]
+	mov	w2, w28
+	ldr	w5, [x23]
 	mov	w3, w19
 	add	w12, w0, w1
-	ldr	w6, [x29,192]
-	ldr	x0, [x29,120]
+	ldr	w6, [x29,208]
+	ldr	x0, [x29,128]
 	mov	w1, w12
-	mov	x4, x28
+	mov	x4, x23
 	mov	w7, 61424
-	str	x11, [x29,96]
-	str	x8, [x29,104]
-	str	x12, [x29,112]
+	str	x11, [x29,104]
+	str	x8, [x29,112]
+	str	x12, [x29,120]
 	bl	printk
-	ldr	x12, [x29,112]
-	mov	x1, x28
-	add	x2, x29, 192
+	ldr	x12, [x29,120]
+	mov	x1, x23
+	add	x2, x29, 208
 	mov	w0, w12
-	bl	fw_flash_page_prog.constprop.29
-	ldr	x11, [x29,96]
-	ldr	x8, [x29,104]
+	bl	fw_flash_page_prog.constprop.30
+	ldr	x11, [x29,104]
+	ldr	x8, [x29,112]
 	ldrb	w0, [x11,634]
-	cbnz	w0, .L3812
-	ldr	w1, [x29,184]
+	cbnz	w0, .L4029
+	ldr	w1, [x29,196]
 	add	w2, w8, 1
-	str	x11, [x29,112]
-	udiv	w1, w1, w26
+	str	x11, [x29,120]
+	udiv	w1, w1, w27
 	bl	id_block_prog_msb_ff_data
-	ldr	x11, [x29,112]
-.L3812:
+	ldr	x11, [x29,120]
+.L4029:
 	add	w0, w22, 16
-	add	x28, x28, 2048
-	cmp	w27, w0
-	bcc	.L3813
+	add	x23, x23, 2048
+	cmp	w28, w0
+	bcc	.L4030
 	add	w1, w22, 20
-	add	x0, x24, 2048
-	cmp	w27, w1
-	csel	x28, x28, x0, cs
-	b	.L3813
-.L3811:
-	ldr	w1, [x29,184]
-	add	x2, x29, 192
-	str	x11, [x29,112]
+	add	x0, x25, 2048
+	cmp	w28, w1
+	csel	x23, x23, x0, cs
+	b	.L4030
+.L4028:
+	ldr	w1, [x29,196]
+	add	x2, x29, 208
+	str	x11, [x29,120]
 	add	w0, w0, w1
 	mov	x1, x3
-	bl	fw_flash_page_prog.constprop.29
-	ldr	x11, [x29,112]
-.L3813:
-	add	w9, w27, 4
+	bl	fw_flash_page_prog.constprop.30
+	ldr	x11, [x29,120]
+.L4030:
+	add	w9, w28, 4
 	mov	x3, 0
-	uxth	w27, w9
-	b	.L3803
-.L3855:
+	uxth	w28, w9
+	b	.L4020
+.L4078:
 	adrp	x0, .LANCHOR0
 	mov	w1, w22
-	add	x26, x0, :lo12:.LANCHOR0
-	ldrb	w0, [x29,144]
-	mov	x2, x23
-	strb	w0, [x26,720]
+	add	x27, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x29,152]
+	mov	x2, x24
+	strb	w0, [x27,720]
 	mov	w0, w20
-	bl	id_block_read_data.constprop.30
-	ldr	w0, [x29,172]
-	cbz	w0, .L3815
+	bl	id_block_read_data.constprop.31
+	ldr	w0, [x29,204]
+	cbz	w0, .L4032
 	mov	w0, 0
 	bl	zftl_flash_exit_slc_mode
-	strb	wzr, [x26,634]
+	strb	wzr, [x27,634]
 	adrp	x0, .LANCHOR0
 	strb	wzr, [x0,#:lo12:.LANCHOR0]
-.L3815:
+.L4032:
 	lsl	w22, w22, 7
 	mov	x0, 0
-.L3816:
+.L4033:
 	cmp	w22, w0
-	bls	.L3856
-	ldr	w2, [x23,x0,lsl 2]
+	bls	.L4079
+	ldr	w2, [x24,x0,lsl 2]
 	add	x0, x0, 1
-	add	x1, x24, x0, lsl 2
+	add	x1, x25, x0, lsl 2
 	ldr	w1, [x1,-4]
 	cmp	w2, w1
-	beq	.L3816
-	mov	x0, x23
+	beq	.L4033
+	mov	x0, x24
 	mov	w1, 0
 	mov	w2, 512
 	bl	ftl_memset
 	mov	w1, w20
 	mov	w0, 0
 	bl	flash_erase_block
-	b	.L3797
-.L3856:
-	ldr	w0, [x29,188]
+	b	.L4014
+.L4079:
+	ldr	w0, [x29,200]
 	add	w0, w0, 1
-	str	w0, [x29,188]
+	str	w0, [x29,200]
 	cmp	w0, 5
-	bhi	.L3820
-.L3797:
+	bhi	.L4038
+.L4014:
 	add	x21, x21, 1
 	cmp	x21, 4
-	bne	.L3819
-.L3820:
+	bne	.L4036
+.L4038:
+	mov	w0, 0
+	bl	zftl_flash_exit_slc_mode
 	adrp	x0, .LANCHOR0
 	ldrb	w2, [x29,168]
 	add	x1, x0, :lo12:.LANCHOR0
 	strb	w2, [x0,#:lo12:.LANCHOR0]
-	mov	w0, 2
-	strb	w0, [x1,744]
+	ldr	w2, [x29,204]
+	cbz	w2, .L4037
+	ldrb	w2, [x29,160]
+	strb	w2, [x1,634]
+.L4037:
+	add	x0, x0, :lo12:.LANCHOR0
+	mov	w1, 2
+	strb	w1, [x0,752]
 	mov	w0, 0
 	bl	zftl_flash_enter_slc_mode
-	mov	x0, x23
+	mov	x0, x24
 	bl	ftl_free
-	ldr	w0, [x29,188]
+	ldr	w0, [x29,200]
 	cmp	w0, wzr
 	csetm	w0, eq
-.L3852:
+.L4074:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 256
+	ldp	x29, x30, [sp], 272
 	ret
 	.size	write_idblock, .-write_idblock
 	.align	2
@@ -24440,21 +25947,21 @@ write_idblock:
 	.type	CRC_32, %function
 CRC_32:
 	mov	x2, 0
-	adrp	x3, .LANCHOR2
+	adrp	x3, .LANCHOR7
 	mov	x5, x0
-	add	x3, x3, :lo12:.LANCHOR2
+	add	x3, x3, :lo12:.LANCHOR7
 	mov	w0, w2
-.L3858:
+.L4081:
 	cmp	w1, w2
-	bls	.L3860
+	bls	.L4083
 	ldrb	w4, [x5,x2]
-	add	x6, x3, 2552
+	sub	x6, x3, #72
 	add	x2, x2, 1
 	eor	w4, w4, w0, lsr 24
 	ldr	w4, [x6,w4,uxtw 2]
 	eor	w0, w4, w0, lsl 8
-	b	.L3858
-.L3860:
+	b	.L4081
+.L4083:
 	ret
 	.size	CRC_32, .-CRC_32
 	.align	2
@@ -24470,41 +25977,41 @@ write_loader_lba:
 	mov	w19, w0
 	mov	w21, w1
 	mov	x24, x2
-	adrp	x20, .LANCHOR7
-	bne	.L3862
+	adrp	x20, .LANCHOR6
+	bne	.L4085
 	ldr	w1, [x2]
 	mov	w0, 35899
 	movk	w0, 0xfcdc, lsl 16
 	cmp	w1, w0
-	bne	.L3862
-	add	x22, x20, :lo12:.LANCHOR7
+	bne	.L4085
+	add	x22, x20, :lo12:.LANCHOR6
 	mov	w0, 1
-	strb	w0, [x22,-52]
+	strb	w0, [x22,268]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	bl	ftl_malloc
-	str	x0, [x22,-48]
+	str	x0, [x22,272]
 	mov	w2, 59392
 	mov	w1, 0
 	movk	w2, 0x3, lsl 16
 	bl	ftl_memset
-	str	w19, [x22,-40]
-.L3862:
-	add	x23, x20, :lo12:.LANCHOR7
-	adrp	x0, .LC309
+	str	w19, [x22,280]
+.L4085:
+	add	x23, x20, :lo12:.LANCHOR6
+	adrp	x0, .LC315
 	ldr	w2, [x24]
-	add	x0, x0, :lo12:.LC309
+	add	x0, x0, :lo12:.LC315
 	mov	w3, w19
 	mov	w4, w21
-	ldr	x1, [x23,-48]
+	ldr	x1, [x23,272]
 	bl	printk
-	ldrb	w0, [x23,-52]
-	cbz	w0, .L3861
-	ldr	x22, [x23,-48]
-	cbz	x22, .L3861
+	ldrb	w0, [x23,268]
+	cbz	w0, .L4084
+	ldr	x22, [x23,272]
+	cbz	x22, .L4084
 	sub	w0, w19, #64
 	cmp	w0, 499
-	bhi	.L3864
+	bhi	.L4087
 	mov	w3, 564
 	ubfiz	x0, x0, 9, 25
 	sub	w3, w3, w19
@@ -24514,26 +26021,26 @@ write_loader_lba:
 	csel	w2, w3, w21, ls
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-	b	.L3865
-.L3864:
+	b	.L4088
+.L4087:
 	cmp	w19, 563
-	bhi	.L3875
-.L3865:
-	add	x23, x20, :lo12:.LANCHOR7
-	ldr	w0, [x23,-40]
+	bhi	.L4098
+.L4088:
+	add	x23, x20, :lo12:.LANCHOR6
+	ldr	w0, [x23,280]
 	cmp	w0, w19
-	beq	.L3873
+	beq	.L4096
 	mov	x0, x22
-	strb	wzr, [x23,-52]
+	strb	wzr, [x23,268]
 	bl	ftl_free
-	str	xzr, [x23,-48]
-.L3873:
-	add	x20, x20, :lo12:.LANCHOR7
+	str	xzr, [x23,272]
+.L4096:
+	add	x20, x20, :lo12:.LANCHOR6
 	add	w19, w19, w21
-	str	w19, [x20,-40]
-	b	.L3861
-.L3875:
-	ldr	w2, [x23,-40]
+	str	w19, [x20,280]
+	b	.L4084
+.L4098:
+	ldr	w2, [x23,280]
 	mov	w0, 500
 	sub	w2, w2, #64
 	cmp	w2, 500
@@ -24542,7 +26049,7 @@ write_loader_lba:
 	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrb	w0, [x0,9]
 	cmp	w0, 4
-	beq	.L3876
+	beq	.L4099
 	mov	w0, 2
 	str	w0, [x29,72]
 	mov	w0, 3
@@ -24553,49 +26060,49 @@ write_loader_lba:
 	str	w0, [x29,84]
 	mov	w0, 6
 	str	w0, [x29,88]
-	b	.L3867
-.L3876:
+	b	.L4090
+.L4099:
 	mov	x3, 0
-.L3866:
+.L4089:
 	cmp	w2, 256
 	add	x0, x29, 72
-	bls	.L3868
+	bls	.L4091
 	lsl	w1, w3, 1
 	str	w1, [x0,x3,lsl 2]
-	b	.L3869
-.L3868:
+	b	.L4092
+.L4091:
 	str	w3, [x0,x3,lsl 2]
-.L3869:
+.L4092:
 	add	x3, x3, 1
 	cmp	x3, 5
-	bne	.L3866
-.L3867:
+	bne	.L4089
+.L4090:
 	add	x0, x22, 245760
 	mov	w3, 61952
 	add	x0, x0, 2048
-.L3872:
+.L4095:
 	ldr	w1, [x0]
-	cbz	w1, .L3870
+	cbz	w1, .L4093
 	add	w3, w3, 2048
 	lsl	w0, w3, 2
-	b	.L3871
-.L3870:
+	b	.L4094
+.L4093:
 	sub	w3, w3, #1
 	sub	x0, x0, #4
 	cmp	w3, 4096
-	bne	.L3872
+	bne	.L4095
 	lsl	w0, w2, 9
-.L3871:
+.L4094:
 	mov	x1, x22
 	add	x2, x29, 72
-	add	x22, x20, :lo12:.LANCHOR7
+	add	x22, x20, :lo12:.LANCHOR6
 	bl	write_idblock
-	ldr	x0, [x22,-48]
-	strb	wzr, [x22,-52]
+	ldr	x0, [x22,272]
+	strb	wzr, [x22,268]
 	bl	ftl_free
-	str	xzr, [x22,-48]
-	b	.L3873
-.L3861:
+	str	xzr, [x22,272]
+	b	.L4096
+.L4084:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -24615,19 +26122,19 @@ FtlWrite:
 	cmp	w0, 1983
 	mov	w19, w1
 	mov	w20, w2
-	bhi	.L3886
-	cbnz	w21, .L3886
+	bhi	.L4109
+	cbnz	w21, .L4109
 	mov	w0, w1
 	mov	w1, w2
 	mov	x2, x3
 	str	x3, [x29,56]
 	bl	write_loader_lba
 	ldr	x3, [x29,56]
-.L3886:
-	adrp	x0, .LANCHOR4+1192
+.L4109:
+	adrp	x0, .LANCHOR3+1472
 	mov	w1, w19
 	mov	w2, w20
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1192]
+	ldr	x0, [x0,#:lo12:.LANCHOR3+1472]
 	ldr	x4, [x0,48]
 	mov	w0, w21
 	blr	x4
@@ -24650,319 +26157,319 @@ rknand_sys_storage_ioctl:
 	stp	x21, x22, [sp,32]
 	mov	w19, w1
 	mov	x20, x2
-	beq	.L3895
+	beq	.L4118
 	mov	w0, 29187
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3896
+	bhi	.L4119
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3897
+	beq	.L4120
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3898
+	bhi	.L4121
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3899
+	beq	.L4122
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3900
+	bhi	.L4123
 	mov	w0, 25364
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bne	.L3957
+	bne	.L4180
 	bl	rknand_dev_flush
-	b	.L3991
-.L3900:
+	b	.L4214
+.L4123:
 	mov	w0, 25602
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3902
+	beq	.L4125
 	mov	w0, 25603
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3903
-	b	.L3957
-.L3898:
+	beq	.L4126
+	b	.L4180
+.L4121:
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3904
+	beq	.L4127
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3905
+	bhi	.L4128
 	mov	w0, 25727
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3906
-	b	.L3957
-.L3905:
+	beq	.L4129
+	b	.L4180
+.L4128:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3904
+	beq	.L4127
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3904
-	b	.L3957
-.L3896:
+	beq	.L4127
+	b	.L4180
+.L4119:
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3907
+	beq	.L4130
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3908
+	bhi	.L4131
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3909
+	beq	.L4132
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bcc	.L3910
+	bcc	.L4133
 	mov	w0, 29210
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3911
+	beq	.L4134
 	mov	w0, 29266
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3912
-	b	.L3957
-.L3908:
+	beq	.L4135
+	b	.L4180
+.L4131:
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3913
+	beq	.L4136
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3914
+	bhi	.L4137
 	mov	w0, 29268
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3915
+	beq	.L4138
 	mov	w0, 30224
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3916
-	b	.L3957
-.L3914:
+	beq	.L4139
+	b	.L4180
+.L4137:
 	mov	w0, 30226
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3916
+	beq	.L4139
 	mov	w0, 30227
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3913
-	b	.L3957
-.L3910:
-	adrp	x0, .LC310
-	add	x0, x0, :lo12:.LC310
+	beq	.L4136
+	b	.L4180
+.L4133:
+	adrp	x0, .LC316
+	add	x0, x0, :lo12:.LC316
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbnz	x0, .L3917
-.L3922:
+	cbnz	x0, .L4140
+.L4145:
 	mov	x0, -12
-	b	.L3894
-.L3917:
+	b	.L4117
+.L4140:
 	mov	x1, x20
 	mov	x2, 512
 	bl	rk_copy_from_user
-	cbnz	x0, .L3998
-	adrp	x0, .LC312
+	cbnz	x0, .L4221
+	adrp	x0, .LC318
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC312
+	add	x0, x0, :lo12:.LC318
 	bl	printk
 	ldr	w0, [x19,4]
 	str	w0, [x29,52]
 	cmp	w0, 8
-	bhi	.L3995
+	bhi	.L4218
 	bl	rknand_device_lock
 	ldr	w1, [x29,52]
 	mov	x2, x19
 	ldr	w0, [x19]
-	bl	id_block_read_data.constprop.30
+	bl	id_block_read_data.constprop.31
 	bl	rknand_device_unlock
 	ldr	w2, [x29,52]
 	mov	x0, x20
 	mov	x1, x19
 	ubfiz	x2, x2, 9, 23
 	bl	rk_copy_to_user
-	cbz	x0, .L4001
-	adrp	x0, .LC313
-	add	x0, x0, :lo12:.LC313
-.L3993:
+	cbz	x0, .L4224
+	adrp	x0, .LC319
+	add	x0, x0, :lo12:.LC319
+.L4216:
 	bl	printk
-.L3995:
+.L4218:
 	mov	x0, x19
-.L3996:
+.L4219:
 	bl	ftl_free
-.L3994:
+.L4217:
 	mov	x0, -14
-	b	.L3894
-.L3909:
-	adrp	x0, .LC314
-	add	x0, x0, :lo12:.LC314
+	b	.L4117
+.L4132:
+	adrp	x0, .LC320
+	add	x0, x0, :lo12:.LC320
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3922
+	cbz	x0, .L4145
 	mov	x1, x20
 	mov	x2, 4096
 	bl	rk_copy_from_user
-	cbnz	x0, .L3998
-	adrp	x0, .LC315
+	cbnz	x0, .L4221
+	adrp	x0, .LC321
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC315
+	add	x0, x0, :lo12:.LC321
 	bl	printk
-	adrp	x0, .LANCHOR7
-	add	x22, x0, :lo12:.LANCHOR7
+	adrp	x0, .LANCHOR6
+	add	x22, x0, :lo12:.LANCHOR6
 	mov	x20, x0
-	ldr	x21, [x22,-32]
-	cbnz	x21, .L3924
+	ldr	x21, [x22,288]
+	cbnz	x21, .L4147
 	mov	w0, 260096
 	bl	ftl_malloc
-	str	x0, [x22,-32]
-	cbz	x0, .L3995
+	str	x0, [x22,288]
+	cbz	x0, .L4218
 	mov	w1, w21
 	mov	x2, 260096
 	bl	memset
-.L3924:
+.L4147:
 	ldr	w2, [x19,4]
 	cmp	w2, 4088
-	bhi	.L3995
+	bhi	.L4218
 	ldr	w0, [x19]
 	mov	w1, 55296
 	movk	w1, 0x3, lsl 16
 	cmp	w0, w1
-	bhi	.L3995
-	add	x20, x20, :lo12:.LANCHOR7
+	bhi	.L4218
+	add	x20, x20, :lo12:.LANCHOR6
 	uxtw	x2, w2
-	ldr	x1, [x20,-32]
+	ldr	x1, [x20,288]
 	add	x0, x1, x0, uxtw
 	add	x1, x19, 8
 	bl	memcpy
-.L4001:
+.L4224:
 	mov	x0, x19
 	bl	ftl_free
-	b	.L3991
-.L3912:
-	adrp	x0, .LC316
-	add	x0, x0, :lo12:.LC316
+	b	.L4214
+.L4135:
+	adrp	x0, .LC322
+	add	x0, x0, :lo12:.LC322
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3922
+	cbz	x0, .L4145
 	mov	x1, x20
 	mov	x2, 28
 	bl	rk_copy_from_user
-	cbz	x0, .L3927
-.L3998:
-	adrp	x0, .LC311
-	add	x0, x0, :lo12:.LC311
-	b	.L3993
-.L3927:
-	ldr	w1, [x19]
+	cbz	x0, .L4150
+.L4221:
 	adrp	x0, .LC317
-	ldr	w2, [x19,4]
 	add	x0, x0, :lo12:.LC317
+	b	.L4216
+.L4150:
+	ldr	w1, [x19]
+	adrp	x0, .LC323
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC323
 	bl	printk
 	ldr	w1, [x19]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	cmp	w1, w0
-	bhi	.L3995
-	adrp	x20, .LANCHOR7
-	add	x20, x20, :lo12:.LANCHOR7
-	ldr	x0, [x20,-32]
-	cbz	x0, .L3995
+	bhi	.L4218
+	adrp	x20, .LANCHOR6
+	add	x20, x20, :lo12:.LANCHOR6
+	ldr	x0, [x20,288]
+	cbz	x0, .L4218
 	bl	CRC_32
 	ldr	w1, [x19,4]
 	cmp	w1, w0
-	beq	.L3930
+	beq	.L4153
 	mov	x0, x19
 	bl	ftl_free
 	mov	x0, -2
-	b	.L3894
-.L3930:
+	b	.L4117
+.L4153:
 	bl	rknand_device_lock
-	ldr	x1, [x20,-32]
+	ldr	x1, [x20,288]
 	add	x2, x19, 8
 	ldr	w0, [x19]
 	bl	write_idblock
 	bl	rknand_device_unlock
-	ldr	x0, [x20,-32]
+	ldr	x0, [x20,288]
 	bl	ftl_free
-	str	xzr, [x20,-32]
-	b	.L4001
-.L3911:
-	adrp	x0, .LC318
-	add	x0, x0, :lo12:.LC318
+	str	xzr, [x20,288]
+	b	.L4224
+.L4134:
+	adrp	x0, .LC324
+	add	x0, x0, :lo12:.LC324
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3922
+	cbz	x0, .L4145
 	bl	ReadFlashInfo
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 11
-	b	.L4003
-.L3895:
-	adrp	x0, .LC319
-	add	x0, x0, :lo12:.LC319
+	b	.L4226
+.L4118:
+	adrp	x0, .LC325
+	add	x0, x0, :lo12:.LC325
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3922
+	cbz	x0, .L4145
 	mov	w1, 0
 	mov	w2, 64
 	bl	ftl_memset
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 64
-	b	.L4003
-.L3907:
-	adrp	x0, .LC320
-	add	x0, x0, :lo12:.LC320
+	b	.L4226
+.L4130:
+	adrp	x0, .LC326
+	add	x0, x0, :lo12:.LC326
 	bl	printk
-	adrp	x0, .LANCHOR7-24
+	adrp	x0, .LANCHOR6+296
 	add	x1, x29, 52
 	mov	x2, 4
-	ldr	x0, [x0,#:lo12:.LANCHOR7-24]
+	ldr	x0, [x0,#:lo12:.LANCHOR6+296]
 	ldr	w0, [x0,20]
 	str	w0, [x29,52]
 	mov	x0, x20
-.L3986:
+.L4209:
 	bl	rk_copy_to_user
-	cbnz	x0, .L3994
-	b	.L3991
-.L3915:
-	adrp	x0, .LC321
-	add	x0, x0, :lo12:.LC321
+	cbnz	x0, .L4217
+	b	.L4214
+.L4138:
+	adrp	x0, .LC327
+	add	x0, x0, :lo12:.LC327
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3922
+	cbz	x0, .L4145
 	bl	rknand_device_lock
 	mov	w1, 264
 	mov	w2, 2
@@ -24973,96 +26480,96 @@ rknand_sys_storage_ioctl:
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 1024
-.L4003:
+.L4226:
 	bl	rk_copy_to_user
 	mov	x19, x0
 	mov	x0, x21
-	cbnz	x19, .L3996
+	cbnz	x19, .L4219
 	bl	ftl_free
-	b	.L3921
-.L3899:
-	adrp	x0, .LC322
-	add	x0, x0, :lo12:.LC322
+	b	.L4144
+.L4122:
+	adrp	x0, .LC328
+	add	x0, x0, :lo12:.LC328
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
 	mov	x19, x0
-	cbz	x0, .L3935
-.L3940:
-	adrp	x0, .LC311
-	add	x0, x0, :lo12:.LC311
+	cbz	x0, .L4158
+.L4163:
+	adrp	x0, .LC317
+	add	x0, x0, :lo12:.LC317
 	bl	printk
-	b	.L3994
-.L3935:
+	b	.L4217
+.L4158:
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	beq	.L3936
-.L3937:
+	beq	.L4159
+.L4160:
 	mov	x19, -1
-	b	.L3921
-.L3936:
+	b	.L4144
+.L4159:
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3937
-	adrp	x21, .LANCHOR7
+	bhi	.L4160
+	adrp	x21, .LANCHOR6
 	add	x0, x29, 56
-	add	x21, x21, :lo12:.LANCHOR7
+	add	x21, x21, :lo12:.LANCHOR6
 	mov	x2, 512
-	ldr	x1, [x21,-24]
+	ldr	x1, [x21,296]
 	bl	memcpy
-	ldr	w1, [x21,-16]
+	ldr	w1, [x21,304]
 	mov	w0, 5161
 	movk	w0, 0xc059, lsl 16
 	cmp	w1, w0
-	beq	.L3938
+	beq	.L4161
 	add	x0, x29, 120
 	mov	w1, w19
 	mov	x2, 128
 	str	w19, [x29,64]
 	str	w19, [x29,68]
 	bl	memset
-.L3938:
+.L4161:
 	add	x0, x29, 312
 	mov	w1, 0
 	mov	x2, 256
 	str	wzr, [x29,72]
 	bl	memset
-	b	.L4000
-.L3902:
-	adrp	x0, .LC323
-	add	x0, x0, :lo12:.LC323
+	b	.L4223
+.L4125:
+	adrp	x0, .LC329
+	add	x0, x0, :lo12:.LC329
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	bne	.L3937
+	bne	.L4160
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3937
-	adrp	x1, .LANCHOR7
+	bhi	.L4160
+	adrp	x1, .LANCHOR6
 	mov	w2, 5161
-	add	x1, x1, :lo12:.LANCHOR7
+	add	x1, x1, :lo12:.LANCHOR6
 	movk	w2, 0xc059, lsl 16
 	mov	x0, -2
-	ldr	w3, [x1,-16]
+	ldr	w3, [x1,304]
 	cmp	w3, w2
-	bne	.L3894
+	bne	.L4117
 	ldr	w2, [x29,68]
 	mov	x0, -3
 	sub	w3, w2, #1
 	cmp	w3, 127
-	bhi	.L3894
-	ldr	x19, [x1,-24]
+	bhi	.L4117
+	ldr	x19, [x1,296]
 	add	x1, x29, 120
 	add	x0, x19, 64
 	str	w2, [x19,12]
@@ -25070,144 +26577,144 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	w0, 1
 	mov	x1, x19
-	b	.L3992
-.L3906:
-	adrp	x0, .LC324
-	add	x0, x0, :lo12:.LC324
+	b	.L4215
+.L4129:
+	adrp	x0, .LC330
+	add	x0, x0, :lo12:.LC330
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 17476
 	movk	w0, 0x4253, lsl 16
 	cmp	w1, w0
-	bne	.L3937
+	bne	.L4160
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3937
-	adrp	x19, .LANCHOR7
-	add	x0, x19, :lo12:.LANCHOR7
-	ldr	w1, [x0,-12]
-	cbnz	w1, .L3941
-.L3944:
+	bhi	.L4160
+	adrp	x19, .LANCHOR6
+	add	x0, x19, :lo12:.LANCHOR6
+	ldr	w1, [x0,308]
+	cbnz	w1, .L4164
+.L4167:
 	mov	x0, 0
-	b	.L3894
-.L3941:
-	ldr	x1, [x0,-8]
+	b	.L4117
+.L4164:
+	ldr	x1, [x0,312]
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	ldr	w3, [x1]
 	cmp	w3, w2
-	beq	.L3942
+	beq	.L4165
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	str	w2, [x1]
 	mov	w2, 504
-	ldr	x1, [x0,-8]
+	ldr	x1, [x0,312]
 	str	w2, [x1,4]
-	ldr	x0, [x0,-8]
+	ldr	x0, [x0,312]
 	str	wzr, [x0,8]
 	str	wzr, [x0,12]
-.L3942:
-	add	x20, x19, :lo12:.LANCHOR7
+.L4165:
+	add	x20, x19, :lo12:.LANCHOR6
 	mov	w0, 0
-	ldr	x1, [x20,-8]
+	ldr	x1, [x20,312]
 	str	wzr, [x1,16]
 	bl	StorageSysDataStore
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3943
+	beq	.L4166
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
 	mov	w1, 504
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	str	w1, [x0,4]
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	str	wzr, [x0,8]
-.L3943:
-	add	x19, x19, :lo12:.LANCHOR7
+.L4166:
+	add	x19, x19, :lo12:.LANCHOR6
 	mov	w1, 0
 	mov	x2, 128
-	ldr	x20, [x19,-24]
+	ldr	x20, [x19,296]
 	add	x0, x20, 64
 	str	wzr, [x20,12]
 	bl	memset
 	mov	w0, 1
 	mov	x1, x20
 	bl	StorageSysDataStore
-	str	wzr, [x19,-12]
-	str	wzr, [x19,-16]
-	b	.L3991
-.L3897:
-	adrp	x0, .LC325
-	add	x0, x0, :lo12:.LC325
+	str	wzr, [x19,308]
+	str	wzr, [x19,304]
+	b	.L4214
+.L4120:
+	adrp	x0, .LC331
+	add	x0, x0, :lo12:.LC331
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w2, [x29,56]
 	mov	w1, 20037
 	movk	w1, 0x4253, lsl 16
 	cmp	w2, w1
-	bne	.L3937
+	bne	.L4160
 	ldr	w1, [x29,60]
 	cmp	w1, 512
-	bhi	.L3937
-	adrp	x19, .LANCHOR7
-	add	x1, x19, :lo12:.LANCHOR7
-	ldr	w2, [x1,-12]
+	bhi	.L4160
+	adrp	x19, .LANCHOR6
+	add	x1, x19, :lo12:.LANCHOR6
+	ldr	w2, [x1,308]
 	cmp	w2, 1
-	beq	.L3944
-	ldr	x2, [x1,-8]
+	beq	.L4167
+	ldr	x2, [x1,312]
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	ldr	w4, [x2]
 	cmp	w4, w3
-	beq	.L3945
+	beq	.L4168
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	str	w3, [x2]
 	mov	w3, 504
-	ldr	x2, [x1,-8]
+	ldr	x2, [x1,312]
 	str	w3, [x2,4]
-	ldr	x1, [x1,-8]
+	ldr	x1, [x1,312]
 	str	w0, [x1,8]
 	str	w0, [x1,12]
-.L3945:
-	add	x20, x19, :lo12:.LANCHOR7
+.L4168:
+	add	x20, x19, :lo12:.LANCHOR6
 	mov	w0, 1
-	ldr	x1, [x20,-8]
+	ldr	x1, [x20,312]
 	str	w0, [x1,16]
 	mov	w0, 0
 	bl	StorageSysDataStore
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3946
+	beq	.L4169
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
 	mov	w1, 504
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	str	w1, [x0,4]
-	ldr	x0, [x20,-24]
+	ldr	x0, [x20,296]
 	str	wzr, [x0,8]
-.L3946:
-	add	x19, x19, :lo12:.LANCHOR7
+.L4169:
+	add	x19, x19, :lo12:.LANCHOR6
 	mov	w1, 0
 	mov	x2, 128
-	ldr	x20, [x19,-24]
+	ldr	x20, [x19,296]
 	add	x0, x20, 64
 	str	wzr, [x20,12]
 	bl	memset
@@ -25215,207 +26722,208 @@ rknand_sys_storage_ioctl:
 	mov	x1, x20
 	bl	StorageSysDataStore
 	mov	w0, 1
-	str	w0, [x19,-12]
-	b	.L3991
-.L3903:
-	adrp	x0, .LC326
-	add	x0, x0, :lo12:.LC326
+	str	w0, [x19,308]
+	b	.L4214
+.L4126:
+	adrp	x0, .LC332
+	add	x0, x0, :lo12:.LC332
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 20051
 	movk	w0, 0x4144, lsl 16
 	cmp	w1, w0
-	bne	.L3937
+	bne	.L4160
 	ldr	w2, [x29,60]
 	cmp	w2, 512
-	bhi	.L3937
-	adrp	x1, .LANCHOR7
+	bhi	.L4160
+	adrp	x1, .LANCHOR6
 	add	x0, x29, 64
-	add	x1, x1, :lo12:.LANCHOR7
+	add	x1, x1, :lo12:.LANCHOR6
 	uxtw	x2, w2
-	b	.L3999
-.L3904:
+	add	x1, x1, 320
+	b	.L4222
+.L4127:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3947
-	adrp	x0, .LC327
-	add	x0, x0, :lo12:.LC327
-	b	.L3989
-.L3947:
+	bne	.L4170
+	adrp	x0, .LC333
+	add	x0, x0, :lo12:.LC333
+	b	.L4212
+.L4170:
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3949
-	adrp	x0, .LC328
-	add	x0, x0, :lo12:.LC328
-	b	.L3989
-.L3949:
-	adrp	x0, .LC329
-	add	x0, x0, :lo12:.LC329
-.L3989:
+	bne	.L4172
+	adrp	x0, .LC334
+	add	x0, x0, :lo12:.LC334
+	b	.L4212
+.L4172:
+	adrp	x0, .LC335
+	add	x0, x0, :lo12:.LC335
+.L4212:
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 17227
 	movk	w0, 0x4c4f, lsl 16
 	cmp	w1, w0
-	bne	.L3994
+	bne	.L4217
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	adrp	x0, .LANCHOR7
-	bne	.L3950
-	add	x0, x0, :lo12:.LANCHOR7
+	adrp	x0, .LANCHOR6
+	bne	.L4173
+	add	x0, x0, :lo12:.LANCHOR6
 	add	x1, x29, 56
 	mov	x2, 16
-	ldr	x0, [x0,-24]
+	ldr	x0, [x0,296]
 	ldr	w0, [x0,20]
 	str	w0, [x29,60]
 	strb	w0, [x29,64]
 	mov	x0, x20
 	bl	rk_copy_to_user
-	cbz	x0, .L3894
-	b	.L3994
-.L3950:
-	add	x20, x0, :lo12:.LANCHOR7
-	ldr	w1, [x20,512]
+	cbz	x0, .L4117
+	b	.L4217
+.L4173:
+	add	x20, x0, :lo12:.LANCHOR6
+	ldr	w1, [x20,832]
 	cmp	w1, 10
-	bhi	.L3994
-	ldr	x1, [x20,-24]
+	bhi	.L4217
+	ldr	x1, [x20,296]
 	ldr	w2, [x29,60]
 	ldr	w3, [x1,24]
 	cmp	w3, w2
-	beq	.L3951
-	cbz	w3, .L3951
-	adrp	x0, .LC330
+	beq	.L4174
+	cbz	w3, .L4174
+	adrp	x0, .LC336
 	mov	w1, w2
-	add	x0, x0, :lo12:.LC330
+	add	x0, x0, :lo12:.LC336
 	bl	printk
-	ldr	w0, [x20,512]
+	ldr	w0, [x20,832]
 	add	w0, w0, 1
-	str	w0, [x20,512]
-	b	.L3994
-.L3951:
-	add	x0, x0, :lo12:.LANCHOR7
-	str	wzr, [x0,512]
+	str	w0, [x20,832]
+	b	.L4217
+.L4174:
+	add	x0, x0, :lo12:.LANCHOR6
+	str	wzr, [x0,832]
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3952
+	bne	.L4175
 	str	wzr, [x1,20]
 	str	wzr, [x1,24]
-	b	.L3953
-.L3952:
+	b	.L4176
+.L4175:
 	mov	w0, 1
 	str	w2, [x1,24]
 	str	w0, [x1,20]
-.L3953:
+.L4176:
 	mov	w0, 1
 	mov	x19, -2
 	bl	StorageSysDataStore
 	cmn	w0, #1
-	bne	.L3991
-	b	.L3921
-.L3916:
-	adrp	x0, .LC331
-	add	x0, x0, :lo12:.LC331
+	bne	.L4214
+	b	.L4144
+.L4139:
+	adrp	x0, .LC337
+	add	x0, x0, :lo12:.LC337
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3937
+	bne	.L4160
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3937
+	bhi	.L4160
 	mov	w0, 30224
-	adrp	x1, .LANCHOR7
+	adrp	x1, .LANCHOR6
 	movk	w0, 0x4004, lsl 16
 	uxtw	x2, w2
 	cmp	w19, w0
-	add	x1, x1, :lo12:.LANCHOR7
+	add	x1, x1, :lo12:.LANCHOR6
 	add	x0, x29, 64
-	bne	.L3954
-	ldr	x1, [x1,520]
-	b	.L3990
-.L3954:
-	ldr	x1, [x1,528]
-.L3990:
+	bne	.L4177
+	ldr	x1, [x1,840]
+	b	.L4213
+.L4177:
+	ldr	x1, [x1,848]
+.L4213:
 	add	x1, x1, 8
-.L3999:
+.L4222:
 	bl	memcpy
-.L4000:
+.L4223:
 	mov	x0, x20
 	add	x1, x29, 56
 	mov	x2, 520
-	b	.L3986
-.L3913:
-	adrp	x0, .LC332
-	add	x0, x0, :lo12:.LC332
+	b	.L4209
+.L4136:
+	adrp	x0, .LC338
+	add	x0, x0, :lo12:.LC338
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3940
+	cbnz	x0, .L4163
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3937
+	bne	.L4160
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3937
+	bhi	.L4160
 	mov	w0, 30225
 	add	w2, w2, 8
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	adrp	x19, .LANCHOR7
-	add	x19, x19, :lo12:.LANCHOR7
-	bne	.L3956
-	ldr	x0, [x19,520]
+	adrp	x19, .LANCHOR6
+	add	x19, x19, :lo12:.LANCHOR6
+	bne	.L4179
+	ldr	x0, [x19,840]
 	add	x1, x29, 56
 	bl	memcpy
 	mov	w0, 2
-	ldr	x1, [x19,520]
-	b	.L3992
-.L3956:
-	ldr	x0, [x19,528]
+	ldr	x1, [x19,840]
+	b	.L4215
+.L4179:
+	ldr	x0, [x19,848]
 	add	x1, x29, 56
 	bl	memcpy
-	ldr	x1, [x19,528]
+	ldr	x1, [x19,848]
 	mov	w0, 3
-.L3992:
+.L4215:
 	bl	StorageSysDataStore
 	uxtw	x19, w0
-	b	.L3921
-.L3991:
+	b	.L4144
+.L4214:
 	mov	x19, 0
-.L3921:
-	adrp	x0, .LC333
+.L4144:
+	adrp	x0, .LC339
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC333
+	add	x0, x0, :lo12:.LC339
 	bl	printk
 	mov	x0, x19
-	b	.L3894
-.L3957:
+	b	.L4117
+.L4180:
 	mov	x0, -22
-.L3894:
+.L4117:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -25431,53 +26939,53 @@ rk_ftl_storage_sys_init:
 	mov	w2, 512
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR7
+	adrp	x20, .LANCHOR6
 	str	x21, [sp,32]
-	add	x19, x20, :lo12:.LANCHOR7
-	ldr	x1, [x19,-80]
-	str	w0, [x19,-40]
+	add	x19, x20, :lo12:.LANCHOR6
+	ldr	x1, [x19,240]
+	str	w0, [x19,280]
 	add	x0, x1, 512
-	str	x0, [x19,-24]
+	str	x0, [x19,296]
 	add	x0, x1, 1024
-	str	x1, [x19,-8]
-	str	x0, [x19,520]
+	str	x1, [x19,312]
+	str	x0, [x19,840]
 	add	x1, x1, 1536
-	mov	x0, x19
-	str	x1, [x19,528]
-	strb	wzr, [x19,-52]
-	str	xzr, [x19,-48]
-	str	xzr, [x19,-32]
+	add	x0, x19, 320
+	str	x1, [x19,848]
+	strb	wzr, [x19,268]
+	str	xzr, [x19,272]
+	str	xzr, [x19,288]
 	bl	ftl_memcpy
-	ldr	x0, [x19,-8]
-	str	wzr, [x19,-16]
-	str	wzr, [x19,512]
+	ldr	x0, [x19,312]
+	str	wzr, [x19,304]
+	str	wzr, [x19,832]
 	ldr	w1, [x0,16]
 	ldr	w21, [x0,508]
-	str	w1, [x19,-12]
-	cbz	w21, .L4007
+	str	w1, [x19,308]
+	cbz	w21, .L4230
 	mov	w1, 508
 	bl	js_hash
 	cmp	w21, w0
-	beq	.L4007
-	ldr	x0, [x19,-8]
-	str	wzr, [x19,-12]
+	beq	.L4230
+	ldr	x0, [x19,312]
+	str	wzr, [x19,308]
 	str	wzr, [x0,16]
-	adrp	x0, .LC334
-	add	x0, x0, :lo12:.LC334
+	adrp	x0, .LC340
+	add	x0, x0, :lo12:.LC340
 	bl	printk
-.L4007:
-	add	x0, x20, :lo12:.LANCHOR7
-	ldr	w1, [x0,-12]
-	cbz	w1, .L4009
+.L4230:
+	add	x0, x20, :lo12:.LANCHOR6
+	ldr	w1, [x0,308]
+	cbz	w1, .L4232
 	mov	w1, 5161
 	movk	w1, 0xc059, lsl 16
-	str	w1, [x0,-16]
-.L4009:
-	add	x20, x20, :lo12:.LANCHOR7
+	str	w1, [x0,304]
+.L4232:
+	add	x20, x20, :lo12:.LANCHOR6
 	mov	w0, 2
-	ldr	x1, [x20,520]
+	ldr	x1, [x20,840]
 	bl	StorageSysDataLoad
-	ldr	x1, [x20,528]
+	ldr	x1, [x20,848]
 	mov	w0, 3
 	bl	StorageSysDataLoad
 	bl	rknand_sys_storage_init
@@ -25503,59 +27011,59 @@ rk_ftl_vendor_storage_init:
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	adrp	x21, .LANCHOR7
+	adrp	x21, .LANCHOR6
 	bl	ftl_malloc
-	add	x1, x21, :lo12:.LANCHOR7
+	add	x1, x21, :lo12:.LANCHOR6
 	mov	w19, -12
-	str	x0, [x1,536]
-	cbz	x0, .L4015
+	str	x0, [x1,856]
+	cbz	x0, .L4238
 	mov	w23, 0
-	adrp	x24, .LC335
+	adrp	x24, .LC341
 	mov	w19, w23
 	mov	w22, w23
-	add	x24, x24, :lo12:.LC335
-.L4019:
-	add	x20, x21, :lo12:.LANCHOR7
+	add	x24, x24, :lo12:.LC341
+.L4242:
+	add	x20, x21, :lo12:.LANCHOR6
 	lsl	w0, w22, 7
 	mov	w1, 128
-	ldr	x2, [x20,536]
+	ldr	x2, [x20,856]
 	bl	FlashBootVendorRead
-	cbnz	w0, .L4016
-	ldr	x3, [x20,536]
+	cbnz	w0, .L4239
+	ldr	x3, [x20,856]
 	mov	x0, x24
 	add	x2, x3, 61440
 	ldr	w1, [x3]
 	ldr	w3, [x3,4]
 	ldr	w2, [x2,4092]
 	bl	printk
-	ldr	x20, [x20,536]
+	ldr	x20, [x20,856]
 	mov	w0, 22084
 	movk	w0, 0x524b, lsl 16
 	ldr	w1, [x20]
 	cmp	w1, w0
-	bne	.L4017
+	bne	.L4240
 	ldr	w0, [x20,4]
 	cmp	w19, w0
-	bcs	.L4017
+	bcs	.L4240
 	add	x1, x20, 61440
 	ldr	w1, [x1,4092]
 	cmp	w1, w0
 	csel	w23, w23, w22, ne
 	csel	w19, w19, w0, ne
-.L4017:
-	cbnz	w22, .L4027
+.L4240:
+	cbnz	w22, .L4250
 	mov	w22, 1
-	b	.L4019
-.L4027:
-	cbz	w19, .L4020
+	b	.L4242
+.L4250:
+	cbz	w19, .L4243
 	lsl	w0, w23, 7
 	mov	w1, 128
 	mov	x2, x20
 	bl	FlashBootVendorRead
 	mov	w19, w0
-	cbz	w0, .L4015
-	b	.L4016
-.L4020:
+	cbz	w0, .L4238
+	b	.L4239
+.L4243:
 	mov	x0, x20
 	mov	w1, w19
 	mov	x2, 65536
@@ -25569,14 +27077,14 @@ rk_ftl_vendor_storage_init:
 	mov	w0, -1032
 	strh	w19, [x20,12]
 	strh	w0, [x20,14]
-	b	.L4015
-.L4016:
-	add	x21, x21, :lo12:.LANCHOR7
+	b	.L4238
+.L4239:
+	add	x21, x21, :lo12:.LANCHOR6
 	mov	w19, -1
-	ldr	x0, [x21,536]
+	ldr	x0, [x21,856]
 	bl	kfree
-	str	xzr, [x21,536]
-.L4015:
+	str	xzr, [x21,856]
+.L4238:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -25588,24 +27096,24 @@ rk_ftl_vendor_storage_init:
 	.global	rk_ftl_vendor_read
 	.type	rk_ftl_vendor_read, %function
 rk_ftl_vendor_read:
-	adrp	x3, .LANCHOR7+536
+	adrp	x3, .LANCHOR6+856
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
-	ldr	x5, [x3,#:lo12:.LANCHOR7+536]
+	ldr	x5, [x3,#:lo12:.LANCHOR6+856]
 	mov	w3, -1
 	str	x19, [sp,16]
-	cbz	x5, .L4029
+	cbz	x5, .L4252
 	ldrh	w3, [x5,10]
 	mov	x4, 0
-.L4030:
+.L4253:
 	cmp	w4, w3
 	mov	w6, w4
-	bcs	.L4034
+	bcs	.L4257
 	add	x7, x5, x4, lsl 3
 	add	x4, x4, 1
 	ldrh	w7, [x7,16]
 	cmp	w7, w0
-	bne	.L4030
+	bne	.L4253
 	add	x6, x5, x6, uxtw 3
 	ldrh	w4, [x6,20]
 	mov	x0, x1
@@ -25617,10 +27125,10 @@ rk_ftl_vendor_read:
 	uxtw	x2, w19
 	bl	memcpy
 	mov	w3, w19
-	b	.L4029
-.L4034:
+	b	.L4252
+.L4257:
 	mov	w3, -1
-.L4029:
+.L4252:
 	mov	w0, w3
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -25632,10 +27140,10 @@ rk_ftl_vendor_read:
 rk_ftl_vendor_write:
 	stp	x29, x30, [sp, -112]!
 	mov	w6, w0
-	adrp	x0, .LANCHOR7+536
+	adrp	x0, .LANCHOR6+856
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	ldr	x19, [x0,#:lo12:.LANCHOR7+536]
+	ldr	x19, [x0,#:lo12:.LANCHOR6+856]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	stp	x21, x22, [sp,32]
@@ -25643,38 +27151,38 @@ rk_ftl_vendor_write:
 	mov	w26, w2
 	mov	x28, x1
 	mov	w2, -1
-	cbz	x19, .L4036
+	cbz	x19, .L4259
 	add	w20, w26, 63
 	ldrh	w3, [x19,10]
 	ldrh	w23, [x19,8]
 	and	w20, w20, -64
 	mov	x2, 0
-.L4037:
+.L4260:
 	cmp	w2, w3
 	mov	w4, w2
-	bcs	.L4052
+	bcs	.L4275
 	add	x0, x19, x2, lsl 3
 	add	x2, x2, 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w6
-	bne	.L4037
+	bne	.L4260
 	add	x21, x19, x4, uxtw 3
 	ldrh	w24, [x21,20]
 	add	x5, x19, 1024
 	add	w24, w24, 63
 	and	w24, w24, -64
 	cmp	w26, w24
-	bls	.L4038
+	bls	.L4261
 	ldrh	w0, [x19,14]
 	mov	w2, -1
 	cmp	w0, w20
-	bcc	.L4036
+	bcc	.L4259
 	ldrh	w21, [x21,18]
 	add	w22, w3, w2
-.L4039:
+.L4262:
 	cmp	w4, w22
 	uxtw	x3, w4
-	bcs	.L4053
+	bcs	.L4276
 	add	x3, x19, x3, lsl 3
 	add	w25, w4, 1
 	add	x1, x19, x25, uxtw 3
@@ -25697,8 +27205,8 @@ rk_ftl_vendor_write:
 	mov	w4, w25
 	ldr	x6, [x29,96]
 	ldr	x5, [x29,104]
-	b	.L4039
-.L4053:
+	b	.L4262
+.L4276:
 	add	x3, x19, x3, lsl 3
 	uxth	w21, w21
 	mov	x1, x28
@@ -25715,20 +27223,20 @@ rk_ftl_vendor_write:
 	add	w24, w24, w0
 	sub	w24, w24, w20
 	strh	w24, [x19,14]
-	b	.L4051
-.L4038:
+	b	.L4274
+.L4261:
 	ldrh	w0, [x21,18]
 	mov	x1, x28
 	uxtw	x2, w26
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w26, [x21,20]
-	b	.L4051
-.L4052:
+	b	.L4274
+.L4275:
 	ldrh	w4, [x19,14]
 	mov	w2, -1
 	cmp	w4, w20
-	bcc	.L4036
+	bcc	.L4259
 	add	x3, x19, x3, uxth 3
 	strh	w6, [x3,16]
 	uxth	w20, w20
@@ -25748,7 +27256,7 @@ rk_ftl_vendor_write:
 	ldrh	w0, [x19,10]
 	add	w0, w0, 1
 	strh	w0, [x19,10]
-.L4051:
+.L4274:
 	ldr	w0, [x19,4]
 	add	x1, x19, 61440
 	mov	x2, x19
@@ -25765,7 +27273,7 @@ rk_ftl_vendor_write:
 	lsl	w0, w23, 7
 	bl	FlashBootVendorWrite
 	mov	w2, 0
-.L4036:
+.L4259:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -25789,37 +27297,37 @@ rk_ftl_vendor_storage_ioctl:
 	mov	x21, x2
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L4055
+	cbz	x0, .L4278
 	mov	w2, 30209
 	ldr	x1, [x29,56]
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L4057
+	beq	.L4280
 	mov	w2, 30210
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L4058
-	b	.L4069
-.L4057:
+	beq	.L4281
+	b	.L4292
+.L4280:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L4069
+	cbnz	x0, .L4292
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L4060
-.L4061:
+	beq	.L4283
+.L4284:
 	mov	x20, -1
-	b	.L4056
-.L4060:
+	b	.L4279
+.L4283:
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_read
 	cmn	w0, #1
-	beq	.L4061
+	beq	.L4284
 	uxth	x2, w0
 	strh	w0, [x19,6]
 	mov	x1, x19
@@ -25829,38 +27337,38 @@ rk_ftl_vendor_storage_ioctl:
 	bl	rk_copy_to_user
 	cmp	x0, xzr
 	csel	x20, xzr, x20, eq
-	b	.L4056
-.L4058:
+	b	.L4279
+.L4281:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L4069
+	cbnz	x0, .L4292
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L4061
+	bne	.L4284
 	ldrh	w3, [x19,6]
 	cmp	w3, 4087
-	bhi	.L4061
+	bhi	.L4284
 	add	w2, w3, 8
 	mov	x0, x19
 	mov	x1, x21
 	sxtw	x2, w2
 	bl	rk_copy_from_user
-	cbnz	x0, .L4069
+	cbnz	x0, .L4292
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_write
 	sxtw	x20, w0
-	b	.L4056
-.L4069:
+	b	.L4279
+.L4292:
 	mov	x20, -14
-.L4056:
+.L4279:
 	mov	x0, x19
 	bl	kfree
-.L4055:
+.L4278:
 	mov	x0, x20
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -25884,6 +27392,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	rk_zftl_enable
 	.global	g_pm_spare
 	.global	pm_first_write
+	.global	pm_force_gc
 	.global	pm_gc_enable
 	.global	pm_last_load_ram_id
 	.global	pm_last_update_ram_id
@@ -25925,6 +27434,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	ftl_info_data_buffer
 	.global	ftl_tmp_buffer
 	.global	g_ftl_info_blk
+	.global	tlc_b05a_prog_tbl
 	.global	tlc_prog_order
 	.global	gc_des_ppa_tbl
 	.global	gc_valid_page_ppa
@@ -26011,10 +27521,14 @@ rk_ftl_vendor_storage_ioctl:
 	.global	g_die_cs_idx
 	.global	IDByte
 	.global	flash_read_retry
+	.global	_c_ftl_cs_bits
 	.global	g_maxRetryCount
 	.global	g_maxRegNum
 	.global	g_retryMode
 	.global	g_flash_toggle_mode_en
+	.global	g_flash_micron_3d_tlc_b16a
+	.global	g_flash_micron_3d_tlc_b05a
+	.global	g_flash_micron_3d_tlc_flag
 	.global	g_flash_3d_mlc_flag
 	.global	g_flash_3d_tlc_flag
 	.global	g_flash_multi_page_prog_en
@@ -26040,24 +27554,24 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	3
 .LANCHOR1 = . + 0
-	.type	__func__.34137, %object
-	.size	__func__.34137, 18
-__func__.34137:
+	.type	__func__.34230, %object
+	.size	__func__.34230, 18
+__func__.34230:
 	.string	"_list_remove_node"
 	.zero	6
-	.type	__func__.34162, %object
-	.size	__func__.34162, 23
-__func__.34162:
+	.type	__func__.34255, %object
+	.size	__func__.34255, 23
+__func__.34255:
 	.string	"_list_update_data_list"
 	.zero	1
-	.type	__func__.19088, %object
-	.size	__func__.19088, 22
-__func__.19088:
+	.type	__func__.19150, %object
+	.size	__func__.19150, 22
+__func__.19150:
 	.string	"nand_flash_print_info"
 	.zero	2
-	.type	__func__.19174, %object
-	.size	__func__.19174, 11
-__func__.19174:
+	.type	__func__.19236, %object
+	.size	__func__.19236, 11
+__func__.19236:
 	.string	"nandc_init"
 	.zero	5
 	.type	toshiba_A19ref_value, %object
@@ -26219,14 +27733,14 @@ toshiba_ref_value:
 	.byte	8
 	.byte	12
 	.byte	112
-	.type	__func__.18644, %object
-	.size	__func__.18644, 28
-__func__.18644:
+	.type	__func__.18699, %object
+	.size	__func__.18699, 28
+__func__.18699:
 	.string	"flash_wait_device_ready_raw"
 	.zero	4
-	.type	__func__.18708, %object
-	.size	__func__.18708, 22
-__func__.18708:
+	.type	__func__.18763, %object
+	.size	__func__.18763, 22
+__func__.18763:
 	.string	"flash_start_page_read"
 	.zero	2
 	.type	toshiba_3D_tlc_value, %object
@@ -26647,19 +28161,19 @@ toshiba_3D_slc_value:
 	.byte	-56
 	.byte	56
 	.zero	5
-	.type	__func__.18733, %object
-	.size	__func__.18733, 23
-__func__.18733:
+	.type	__func__.18788, %object
+	.size	__func__.18788, 23
+__func__.18788:
 	.string	"flash_start_plane_read"
 	.zero	1
-	.type	__func__.18619, %object
-	.size	__func__.18619, 26
-__func__.18619:
+	.type	__func__.18674, %object
+	.size	__func__.18674, 26
+__func__.18674:
 	.string	"flash_erase_duplane_block"
 	.zero	6
-	.type	__func__.18630, %object
-	.size	__func__.18630, 21
-__func__.18630:
+	.type	__func__.18685, %object
+	.size	__func__.18685, 21
+__func__.18685:
 	.string	"flash_erase_block_en"
 	.zero	3
 	.type	random_seed, %object
@@ -26793,19 +28307,19 @@ random_seed:
 	.hword	28406
 	.hword	17598
 	.hword	28087
-	.type	__func__.19353, %object
-	.size	__func__.19353, 13
-__func__.19353:
+	.type	__func__.19419, %object
+	.size	__func__.19419, 13
+__func__.19419:
 	.string	"buf_add_tail"
 	.zero	3
-	.type	__func__.19366, %object
-	.size	__func__.19366, 10
-__func__.19366:
+	.type	__func__.19432, %object
+	.size	__func__.19432, 10
+__func__.19432:
 	.string	"buf_alloc"
 	.zero	6
-	.type	__func__.19380, %object
-	.size	__func__.19380, 16
-__func__.19380:
+	.type	__func__.19446, %object
+	.size	__func__.19446, 16
+__func__.19446:
 	.string	"buf_remove_free"
 	.type	zftl_debug_proc_fops, %object
 	.size	zftl_debug_proc_fops, 216
@@ -26819,254 +28333,254 @@ zftl_debug_proc_fops:
 	.zero	8
 	.xword	single_release
 	.zero	104
-	.type	__func__.33706, %object
-	.size	__func__.33706, 12
-__func__.33706:
+	.type	__func__.33794, %object
+	.size	__func__.33794, 12
+__func__.33794:
 	.string	"gc_add_sblk"
 	.zero	4
-	.type	__func__.33800, %object
-	.size	__func__.33800, 19
-__func__.33800:
+	.type	__func__.33888, %object
+	.size	__func__.33888, 19
+__func__.33888:
 	.string	"gc_write_completed"
 	.zero	5
-	.type	__func__.34344, %object
-	.size	__func__.34344, 18
-__func__.34344:
+	.type	__func__.34437, %object
+	.size	__func__.34437, 18
+__func__.34437:
 	.string	"ftl_alloc_sys_blk"
 	.zero	6
-	.type	__func__.34354, %object
-	.size	__func__.34354, 17
-__func__.34354:
+	.type	__func__.34447, %object
+	.size	__func__.34447, 17
+__func__.34447:
 	.string	"ftl_free_sys_blk"
 	.zero	7
-	.type	__func__.34465, %object
-	.size	__func__.34465, 23
-__func__.34465:
+	.type	__func__.34586, %object
+	.size	__func__.34586, 23
+__func__.34586:
 	.string	"ftl_get_ppa_from_index"
 	.zero	1
-	.type	__func__.34505, %object
-	.size	__func__.34505, 22
-__func__.34505:
+	.type	__func__.34626, %object
+	.size	__func__.34626, 22
+__func__.34626:
 	.string	"ftl_get_new_free_page"
 	.zero	2
-	.type	__func__.34516, %object
-	.size	__func__.34516, 22
-__func__.34516:
+	.type	__func__.34637, %object
+	.size	__func__.34637, 22
+__func__.34637:
 	.string	"ftl_ext_alloc_new_blk"
 	.zero	2
-	.type	__func__.33851, %object
-	.size	__func__.33851, 16
-__func__.33851:
+	.type	__func__.33944, %object
+	.size	__func__.33944, 16
+__func__.33944:
 	.string	"gc_free_src_blk"
-	.type	__func__.33459, %object
-	.size	__func__.33459, 14
-__func__.33459:
+	.type	__func__.33545, %object
+	.size	__func__.33545, 14
+__func__.33545:
 	.string	"ftl_write_buf"
 	.zero	2
-	.type	__func__.33504, %object
-	.size	__func__.33504, 18
-__func__.33504:
+	.type	__func__.33590, %object
+	.size	__func__.33590, 18
+__func__.33590:
 	.string	"zftl_add_read_buf"
 	.zero	6
-	.type	__func__.34302, %object
-	.size	__func__.34302, 15
-__func__.34302:
+	.type	__func__.34395, %object
+	.size	__func__.34395, 15
+__func__.34395:
 	.string	"ftl_alloc_sblk"
 	.align	3
-.LANCHOR3 = . + 0
-	.type	__func__.34892, %object
-	.size	__func__.34892, 17
-__func__.34892:
+.LANCHOR4 = . + 0
+	.type	__func__.35023, %object
+	.size	__func__.35023, 17
+__func__.35023:
 	.string	"pm_alloc_new_blk"
 	.zero	7
-	.type	__func__.34920, %object
-	.size	__func__.34920, 21
-__func__.34920:
+	.type	__func__.35051, %object
+	.size	__func__.35051, 21
+__func__.35051:
 	.string	"pm_select_ram_region"
 	.zero	3
-	.type	__func__.19078, %object
-	.size	__func__.19078, 20
-__func__.19078:
+	.type	__func__.19140, %object
+	.size	__func__.19140, 20
+__func__.19140:
 	.string	"flash_die_info_init"
 	.zero	4
-	.type	__func__.33394, %object
-	.size	__func__.33394, 17
-__func__.33394:
+	.type	__func__.33480, %object
+	.size	__func__.33480, 17
+__func__.33480:
 	.string	"lpa_rebuild_hash"
 	.zero	7
-	.type	__func__.34856, %object
-	.size	__func__.34856, 13
-__func__.34856:
+	.type	__func__.34983, %object
+	.size	__func__.34983, 13
+__func__.34983:
 	.string	"pm_free_sblk"
 	.zero	3
-	.type	__func__.19404, %object
-	.size	__func__.19404, 21
-__func__.19404:
+	.type	__func__.19470, %object
+	.size	__func__.19470, 21
+__func__.19470:
 	.string	"flash_info_data_init"
 	.zero	3
-	.type	__func__.18561, %object
-	.size	__func__.18561, 19
-__func__.18561:
+	.type	__func__.18616, %object
+	.size	__func__.18616, 19
+__func__.18616:
 	.string	"flash_read_page_en"
 	.zero	5
-	.type	__func__.18721, %object
-	.size	__func__.18721, 31
-__func__.18721:
+	.type	__func__.18776, %object
+	.size	__func__.18776, 31
+__func__.18776:
 	.string	"flash_complete_plane_page_read"
 	.zero	1
-	.type	__func__.18746, %object
-	.size	__func__.18746, 25
-__func__.18746:
+	.type	__func__.18801, %object
+	.size	__func__.18801, 25
+__func__.18801:
 	.string	"flash_complete_page_read"
 	.zero	7
-	.type	__func__.34701, %object
-	.size	__func__.34701, 31
-__func__.34701:
+	.type	__func__.34822, %object
+	.size	__func__.34822, 31
+__func__.34822:
 	.string	"queue_wait_first_req_completed"
 	.zero	1
-	.type	__func__.34782, %object
-	.size	__func__.34782, 15
-__func__.34782:
+	.type	__func__.34903, %object
+	.size	__func__.34903, 15
+__func__.34903:
 	.string	"sblk_read_page"
 	.zero	1
-	.type	__func__.18668, %object
-	.size	__func__.18668, 26
-__func__.18668:
+	.type	__func__.18723, %object
+	.size	__func__.18723, 26
+__func__.18723:
 	.string	"flash_start_tlc_page_prog"
 	.zero	6
-	.type	__func__.18679, %object
-	.size	__func__.18679, 29
-__func__.18679:
-	.string	"flash_start_3d_mlc_page_prog"
-	.zero	3
-	.type	__func__.18697, %object
-	.size	__func__.18697, 22
-__func__.18697:
+	.type	__func__.18752, %object
+	.size	__func__.18752, 22
+__func__.18752:
 	.string	"flash_start_page_prog"
 	.zero	2
-	.type	__func__.34755, %object
-	.size	__func__.34755, 15
-__func__.34755:
+	.type	__func__.34876, %object
+	.size	__func__.34876, 15
+__func__.34876:
 	.string	"sblk_prog_page"
 	.zero	1
-	.type	__func__.18603, %object
-	.size	__func__.18603, 19
-__func__.18603:
+	.type	__func__.18734, %object
+	.size	__func__.18734, 29
+__func__.18734:
+	.string	"flash_start_3d_mlc_page_prog"
+	.zero	3
+	.type	__func__.18658, %object
+	.size	__func__.18658, 19
+__func__.18658:
 	.string	"flash_prog_page_en"
 	.zero	5
-	.type	__func__.34579, %object
-	.size	__func__.34579, 14
-__func__.34579:
+	.type	__func__.34700, %object
+	.size	__func__.34700, 14
+__func__.34700:
 	.string	"ftl_prog_page"
 	.zero	2
-	.type	__func__.34270, %object
-	.size	__func__.34270, 15
-__func__.34270:
+	.type	__func__.34363, %object
+	.size	__func__.34363, 15
+__func__.34363:
 	.string	"ftl_info_flush"
 	.zero	1
-	.type	__func__.34541, %object
-	.size	__func__.34541, 19
-__func__.34541:
+	.type	__func__.34662, %object
+	.size	__func__.34662, 19
+__func__.34662:
 	.string	"ftl_ext_info_flush"
 	.zero	5
-	.type	__func__.34553, %object
-	.size	__func__.34553, 18
-__func__.34553:
+	.type	__func__.34674, %object
+	.size	__func__.34674, 18
+__func__.34674:
 	.string	"ftl_ext_info_init"
 	.zero	6
-	.type	__func__.34435, %object
-	.size	__func__.34435, 23
-__func__.34435:
+	.type	__func__.34553, %object
+	.size	__func__.34553, 23
+__func__.34553:
 	.string	"ftl_open_sblk_recovery"
 	.zero	1
-	.type	__func__.34902, %object
-	.size	__func__.34902, 14
-__func__.34902:
+	.type	__func__.35033, %object
+	.size	__func__.35033, 14
+__func__.35033:
 	.string	"pm_write_page"
 	.zero	2
-	.type	__func__.19426, %object
-	.size	__func__.19426, 17
-__func__.19426:
+	.type	__func__.19492, %object
+	.size	__func__.19492, 17
+__func__.19492:
 	.string	"flash_info_flush"
 	.zero	7
-	.type	__func__.19393, %object
-	.size	__func__.19393, 20
-__func__.19393:
+	.type	__func__.19459, %object
+	.size	__func__.19459, 20
+__func__.19459:
 	.string	"flash_info_blk_init"
 	.zero	4
-	.type	__func__.19133, %object
-	.size	__func__.19133, 16
-__func__.19133:
+	.type	__func__.19195, %object
+	.size	__func__.19195, 16
+__func__.19195:
 	.string	"nand_flash_init"
-	.type	__func__.34413, %object
-	.size	__func__.34413, 16
-__func__.34413:
+	.type	__func__.34529, %object
+	.size	__func__.34529, 16
+__func__.34529:
 	.string	"ftl_sysblk_dump"
-	.type	__func__.34842, %object
-	.size	__func__.34842, 16
-__func__.34842:
+	.type	__func__.34967, %object
+	.size	__func__.34967, 16
+__func__.34967:
 	.string	"load_l2p_region"
-	.type	__func__.34876, %object
-	.size	__func__.34876, 6
-__func__.34876:
+	.type	__func__.35007, %object
+	.size	__func__.35007, 6
+__func__.35007:
 	.string	"pm_gc"
 	.zero	2
-	.type	__func__.33787, %object
-	.size	__func__.33787, 22
-__func__.33787:
+	.type	__func__.33875, %object
+	.size	__func__.33875, 22
+__func__.33875:
 	.string	"gc_update_l2p_map_new"
 	.zero	2
-	.type	__func__.33895, %object
-	.size	__func__.33895, 16
-__func__.33895:
+	.type	__func__.33988, %object
+	.size	__func__.33988, 16
+__func__.33988:
 	.string	"gc_scan_src_blk"
-	.type	__func__.33953, %object
-	.size	__func__.33953, 20
-__func__.33953:
+	.type	__func__.34046, %object
+	.size	__func__.34046, 20
+__func__.34046:
 	.string	"gc_scan_static_data"
 	.zero	4
-	.type	__func__.34016, %object
-	.size	__func__.34016, 18
-__func__.34016:
+	.type	__func__.34109, %object
+	.size	__func__.34109, 18
+__func__.34109:
 	.string	"gc_block_vpn_scan"
 	.zero	6
-	.type	__func__.34389, %object
-	.size	__func__.34389, 14
-__func__.34389:
+	.type	__func__.34505, %object
+	.size	__func__.34505, 14
+__func__.34505:
 	.string	"ftl_sblk_dump"
 	.zero	2
-	.type	__func__.33537, %object
-	.size	__func__.33537, 10
-__func__.33537:
+	.type	__func__.33623, %object
+	.size	__func__.33623, 10
+__func__.33623:
 	.string	"zftl_read"
 	.zero	6
-	.type	__func__.33753, %object
-	.size	__func__.33753, 21
-__func__.33753:
+	.type	__func__.33841, %object
+	.size	__func__.33841, 21
+__func__.33841:
 	.string	"gc_check_data_one_wl"
 	.zero	3
-	.type	__func__.34486, %object
-	.size	__func__.34486, 19
-__func__.34486:
+	.type	__func__.34607, %object
+	.size	__func__.34607, 19
+__func__.34607:
 	.string	"ftl_update_l2p_map"
 	.zero	5
-	.type	__func__.33441, %object
-	.size	__func__.33441, 17
-__func__.33441:
+	.type	__func__.33527, %object
+	.size	__func__.33527, 17
+__func__.33527:
 	.string	"ftl_write_commit"
 	.zero	7
-	.type	__func__.33829, %object
-	.size	__func__.33829, 16
-__func__.33829:
+	.type	__func__.33917, %object
+	.size	__func__.33917, 16
+__func__.33917:
 	.string	"gc_do_copy_back"
-	.type	__func__.34044, %object
-	.size	__func__.34044, 11
-__func__.34044:
+	.type	__func__.34137, %object
+	.size	__func__.34137, 11
+__func__.34137:
 	.string	"zftl_do_gc"
 	.zero	5
-	.type	__func__.33568, %object
-	.size	__func__.33568, 13
-__func__.33568:
+	.type	__func__.33654, %object
+	.size	__func__.33654, 13
+__func__.33654:
 	.string	"_ftl_discard"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
@@ -27074,7 +28588,7 @@ __func__.33568:
 .LC1:
 	.string	"%s\n"
 .LC2:
-	.string	"FTL version: 6.0.16 20190427"
+	.string	"FTL version: 6.0.18 20190918"
 .LC3:
 	.string	"zftl_debug:0x%x\n"
 .LC4:
@@ -27244,506 +28758,519 @@ __func__.33568:
 .LC86:
 	.string	"rf info = %x %x %x %x %x\n"
 .LC87:
-	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d\n"
+	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d, %d\n"
 .LC88:
-	.string	"gc_add_sblk = %d, %d, %d,last update:%d, %d\n"
+	.string	"gc_add_sblk = %d, %d, %d\n"
 .LC89:
-	.string	"gc_mark_bad_ppa %d %x %x\n"
+	.string	"gc_add_sblk = %d, %d, %d,last update:%d, %d\n"
 .LC90:
-	.string	"status: %x, ppa: %x\n"
+	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d\n"
 .LC91:
-	.string	"gc_write_completed: %x  %x  %x %x\n"
+	.string	"gc_mark_bad_ppa %d %x %x\n"
 .LC92:
-	.string	"%d gc_free_temp_buf buf id= %x\n"
+	.string	"status: %x, ppa: %x\n"
 .LC93:
-	.string	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\n"
+	.string	"gc_write_completed: %x  %x  %d %x\n"
 .LC94:
-	.string	"zftl_get_gc_node cache = %x index = %d vpn = %x\n"
+	.string	"%d gc_free_temp_buf buf id= %x\n"
 .LC95:
-	.string	"gc_search_src_blk mode = %x, src mode = %x, count= %d %d\n"
+	.string	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\n"
 .LC96:
-	.string	"swl_tlc_free_mini_ec_blk alloc sblk %x\n"
+	.string	"zftl_get_gc_node cache = %x index = %d vpn = %x\n"
 .LC97:
-	.string	"zftl_get_free_sblk %x %d, %p %d %d\n"
+	.string	"gc_search_src_blk mode = %x, src mode = %x, count= %d %d\n"
 .LC98:
-	.string	"zftl_gc_get_free_sblk %x %x %x, %d %d %d\n"
+	.string	"swl_tlc_free_mini_ec_blk alloc sblk %x\n"
 .LC99:
-	.string	"swl_slc_free_mini_ec_blk alloc sblk %x\n"
+	.string	"zftl_get_free_sblk %x %d, %p %d %d\n"
 .LC100:
-	.string	"list count:%p %d\n"
+	.string	"zftl_gc_get_free_sblk %x %x %x, %d %d %d\n"
 .LC101:
-	.string	"%d: node:%x %x %x %x, %d %d %d %d %d\n"
+	.string	"swl_slc_free_mini_ec_blk alloc sblk %x\n"
 .LC102:
-	.string	"ftl_vpn_decrement %x = %d, %d\n"
+	.string	"list count:%p %d\n"
 .LC103:
-	.string	"mask bad block:cs %x %x block: %x %x\n"
+	.string	"%d: node:%x %x %x %x, %d %d %d %d %d\n"
 .LC104:
-	.string	"gc_free_bad_sblk 0x%x\n"
+	.string	"ftl_vpn_decrement %x = %d, %d\n"
 .LC105:
-	.string	"swl_tlc_free_mini_ec_blk sblk %x\n"
+	.string	"mask bad block:cs %x %x block: %x %x\n"
 .LC106:
-	.string	"swl_slc_free_mini_ec_blk sblk %x\n"
+	.string	"gc_free_bad_sblk 0x%x\n"
 .LC107:
-	.string	"gc_free_src_blk = %x, vpn = %d\n"
+	.string	"swl_slc_free_mini_ec_blk sblk %x\n"
 .LC108:
-	.string	"gc_free_src_blk %x, %d\n"
+	.string	"gc_free_src_blk = %x, vpn = %d\n"
 .LC109:
-	.string	"bad blk = %x, %x free blk: s:%x,t:%x,m:%x, data blk:s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\n"
+	.string	"gc_free_src_blk %x, %d\n"
 .LC110:
-	.string	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\n"
+	.string	"bad blk = %x, %x free blk: s:%x,t:%x,m:%x, data blk:s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\n"
 .LC111:
-	.string	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\n"
+	.string	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\n"
 .LC112:
-	.string	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\n"
+	.string	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\n"
 .LC113:
-	.string	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:%d free_th: %d\n"
+	.string	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\n"
 .LC114:
-	.string	"swl : %x %x %x %x\n"
+	.string	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:%d free_th: %d\n"
 .LC115:
-	.string	"ftl prog error =%x, lpa = %x, ppa= %x\n"
+	.string	"swl : %x %x %x %x %x %x\n"
 .LC116:
-	.string	"ftl re prog: lpa = %x, ppa= %x\n"
+	.string	"ftl prog error =%x, lpa = %x, ppa= %x\n"
 .LC117:
-	.string	"alloc sblk %x %d\n"
+	.string	"ftl re prog: lpa = %x, ppa= %x\n"
 .LC118:
-	.string	"dump_sblk_queue: %d\n"
+	.string	"alloc sblk %x %d\n"
 .LC119:
-	.string	"buf id= %d state = %d ppa = %x\n"
+	.string	"dump_sblk_queue: %d\n"
 .LC120:
-	.string	"blk %x is bad block\n"
+	.string	"buf id= %d state = %d ppa = %x\n"
 .LC121:
-	.string	"pm_alloc_new_blk: %x %x %x %x\n"
+	.string	"blk %x is bad block\n"
 .LC122:
-	.string	"%s %d %d\n"
+	.string	"pm_alloc_new_blk: %x %x %x %x\n"
 .LC123:
-	.string	"gc_static_wearleveling: min blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
+	.string	"%s %d %d\n"
 .LC124:
-	.string	"gc_static_wearleveling: min slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
+	.string	"gc_static_wearleveling: min blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC125:
-	.string	"gc_static_wearleveling: min tlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
+	.string	"gc_static_wearleveling: min slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC126:
-	.string	"gc_static_wearleveling: max slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
+	.string	"gc_static_wearleveling: min tlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC127:
-	.string	"gc_static_wearleveling: max xlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
+	.string	"gc_static_wearleveling: max slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC128:
-	.string	"gc_static_wearleveling: slc blk: %x, tlc blk: %d avg slc ec: %d, avg tlc ec: %d \n"
+	.string	"gc_static_wearleveling: max xlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC129:
-	.string	"gc_static_wearleveling: min slc ec: %x, min tlc ec: %d max slc ec: %d, max tlc ec: %d; %d %d\n"
+	.string	"gc_static_wearleveling: slc blk: %x, tlc blk: %d avg slc ec: %d, avg tlc ec: %d \n"
 .LC130:
-	.string	"swl add tlc gc = %x, %d, %d, %d, %d, %d\n"
+	.string	"gc_static_wearleveling: min slc ec: %x, min tlc ec: %d max slc ec: %d, max tlc ec: %d; %d %d\n"
 .LC131:
-	.string	"swl add slc gc  = %x, %d, %d, %d, %d, %d\n"
+	.string	"swl add tlc gc = %x, %d, %d, %d, %d, %d\n"
 .LC132:
-	.string	"free blk vpn error: %x %x\n"
+	.string	"swl add slc gc  = %x, %d, %d, %d, %d, %d\n"
 .LC133:
-	.string	"ftl_free_no_use_map_blk %x %x %x %d\n"
+	.string	"free blk vpn error: %x %x\n"
 .LC134:
-	.string	"...%d @ %s\n"
+	.string	"GC PM block %x %x %x %d\n"
 .LC135:
-	.string	"rk_ftl_de_init %x\n"
+	.string	"ftl_free_no_use_map_blk %x %x %x %d\n"
 .LC136:
-	.string	"%s %p:0x%x:"
+	.string	"...%d @ %s\n"
 .LC137:
-	.string	"%x "
+	.string	"rk_ftl_de_init %x\n"
 .LC138:
-	.string	""
+	.string	"%s %p:0x%x:"
 .LC139:
-	.string	"otp error! %d"
+	.string	"%x "
 .LC140:
-	.string	"rr"
+	.string	""
 .LC141:
-	.string	"flash_abort_clear = %d\n"
+	.string	"otp error! %d"
 .LC142:
-	.string	"%d mtrans_cnt = %d page_num = %d\n"
+	.string	"rr"
 .LC143:
-	.string	"nandc:"
+	.string	"flash_abort_clear = %d\n"
 .LC144:
-	.string	"%d flReg.d32=%x %x\n"
+	.string	"%d mtrans_cnt = %d page_num = %d\n"
 .LC145:
-	.string	"nandc_xfer_done read error %x\n"
+	.string	"nandc:"
 .LC146:
-	.string	"dqs data abort %x\n"
+	.string	"%d flReg.d32=%x %x\n"
 .LC147:
-	.string	"dqs data timeout %x\n"
+	.string	"nandc_xfer_done read error %x\n"
 .LC148:
-	.string	"xfer error %x\n"
+	.string	"dqs data abort %x\n"
 .LC149:
-	.string	"flash_read_page %x %x %x\n"
+	.string	"dqs data timeout %x\n"
 .LC150:
-	.string	"micron %d row=%x,last status %d,status = %d\n"
+	.string	"xfer error %x\n"
 .LC151:
-	.string	"micron RR %d row=%x,count %d,status=%d\n"
+	.string	"flash_read_page %x %x %x\n"
 .LC152:
-	.string	"toshiba SRR %d row=%x, status=%d\n"
+	.string	"MT %d row=%x,last status %d,status = %d\n"
 .LC153:
-	.string	"toshiba TRR %d row=%x, status=%d\n"
+	.string	"MT RR %d row=%x,count %d,status=%d\n"
 .LC154:
-	.string	"toshiba RR %d row=%x,count %d,status=%d\n"
+	.string	"toshiba SRR %d row=%x, status=%d\n"
 .LC155:
-	.string	"hynix RR %d row=%x, count %d, status=%d\n"
+	.string	"toshiba TRR %d row=%x, status=%d\n"
 .LC156:
-	.string	"%d flash_ddr_tuning_read %x ecc=%d\n"
+	.string	"toshiba RR %d row=%x,count %d,status=%d\n"
 .LC157:
-	.string	"sync para %d\n"
+	.string	"hynix RR %d row=%x, count %d, status=%d\n"
 .LC158:
-	.string	"DDR mode Read error %x %x\n"
+	.string	"%d flash_ddr_tuning_read %x ecc=%d\n"
 .LC159:
-	.string	"SDR mode Read %x %x ecc:%x\n"
+	.string	"sync para %d\n"
 .LC160:
-	.string	"flash_read_page_en %x %x %x\n"
+	.string	"DDR mode Read error %x %x\n"
 .LC161:
-	.string	"flash_read_page_en %x %x error_ecc %d %d\n"
+	.string	"SDR mode Read %x %x ecc:%x\n"
 .LC162:
-	.string	"flash_get_last_written_page: %x %x %x\n"
+	.string	"flash_read_page_en %x %x %x\n"
 .LC163:
-	.string	"read page: %x %x %x %x\n"
+	.string	"flash_read_page_en %x %x error_ecc %d %d\n"
 .LC164:
-	.string	"flash_complete_page_read %x %x error_ecc %d %d\n"
+	.string	"flash_get_last_written_page: %x %x %x\n"
 .LC165:
-	.string	"read: %x %x %x %x\n"
+	.string	"read page: %x %x %x %x\n"
 .LC166:
-	.string	"0set buf %d,status = %x, ppa = %x lun state = %d\n"
+	.string	"flash_complete_page_read %x %x error_ecc %d %d\n"
 .LC167:
-	.string	"prog end %x %x error_ecc %d %d\n"
+	.string	"read: %x %x %x %x\n"
 .LC168:
-	.string	"1set buf %d,status = %x, ppa = %x lun state = %d\n"
+	.string	"0set buf %d,status = %x, ppa = %x lun state = %d\n"
 .LC169:
-	.string	"dp prog end %x %x error_ecc %d %d\n"
+	.string	"prog end %x %x error_ecc %d %d\n"
 .LC170:
-	.string	"sblk_3d_tlc_dump_prog wl_addr= %x ppa = %x ppa = %x\n"
+	.string	"1set buf %d,status = %x, ppa = %x lun state = %d\n"
 .LC171:
-	.string	"sblk_mlc_dump_prog wl_addr= %x ppa = %x ppa = %x\n"
+	.string	"dp prog end %x %x error_ecc %d %d\n"
 .LC172:
-	.string	"sblk_prog_page ppa = %x, count = %d\n"
+	.string	"sblk_3d_tlc_dump_prog wl_addr= %x ppa = %x ppa = %x\n"
 .LC173:
-	.string	"flash_prog_page %x %x %x\n"
+	.string	"sblk_prog_page ppa = %x, count = %d\n"
 .LC174:
-	.string	"flash_prog_page page_addr = %x status = %x\n"
+	.string	"flash_prog_page %x %x %x\n"
 .LC175:
-	.string	"flash_prog_page_en:%x %x %x\n"
+	.string	"flash_prog_page page_addr = %x status = %x\n"
 .LC176:
-	.string	"w d:"
+	.string	"sblk_mlc_dump_prog wl_addr= %x ppa = %x ppa = %x\n"
 .LC177:
-	.string	"w s:"
+	.string	"flash_prog_page_en:%x %x %x\n"
 .LC178:
-	.string	"spare"
+	.string	"w d:"
 .LC179:
-	.string	"data"
+	.string	"w s:"
 .LC180:
-	.string	"write error: %x\n"
+	.string	"spare"
 .LC181:
-	.string	"g_ftl_info_blk blk = %x, page = %x version = %d\n"
+	.string	"data"
 .LC182:
-	.string	"%d %x @%d %x\n"
+	.string	"write error: %x\n"
 .LC183:
-	.string	"ftl_info_blk_init %d %d %x\n"
+	.string	"g_ftl_info_blk blk = %x, page = %x version = %d\n"
 .LC184:
-	.string	"ink flag: %x\n"
+	.string	"%d %x @%d %x\n"
 .LC185:
-	.string	"%s %d %d %x %x\n"
+	.string	"ftl_info_blk_init %d %d %x\n"
 .LC186:
-	.string	"saved_active_page  = %x\n"
+	.string	"ink flag: %x\n"
 .LC187:
-	.string	"saved_active_plane = %x\n"
+	.string	"%s %d %d %x %x\n"
 .LC188:
-	.string	"sblk = %x\n"
+	.string	"%s %x %x %x\n"
 .LC189:
-	.string	"phy_blk = %x %x\n"
+	.string	"saved_active_page  = %x\n"
 .LC190:
-	.string	"sblk = %x, vpn0 = %d, vpn1 = %d\n"
+	.string	"saved_active_plane = %x\n"
 .LC191:
-	.string	"dump_write_lpa = %x %x %x %x\n"
+	.string	"sblk = %x\n"
 .LC192:
-	.string	"dump write new ppa = %x, last ppa = %x lpa = %x\n"
+	.string	"phy_blk = %x %x\n"
 .LC193:
-	.string	"dump write = %x %x\n"
+	.string	"num_planes = %x\n"
 .LC194:
-	.string	"dump write hash update = %x %x %x\n"
+	.string	"sblk = %x, vpn0 = %d, vpn1 = %d\n"
 .LC195:
-	.string	"pm_write_page write error: %x\n"
+	.string	"dump_write_lpa = %x %x %x %x\n"
 .LC196:
-	.string	"ftl_sblk_dump_write = %x %d %d %d %d\n"
+	.string	"dump write new ppa = %x, last ppa = %x lpa = %x\n"
 .LC197:
-	.string	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+	.string	"dump write = %x %x %x\n"
 .LC198:
-	.string	"ftl_sblk_dump_write2 = %x %d %d %d\n"
+	.string	"dump write hash update = %x %x %x\n"
 .LC199:
-	.string	"ftl_sblk_dump_write = %x %x\n"
+	.string	"pm_write_page write error: %x\n"
 .LC200:
-	.string	"ftl_sblk_dump_write done = %x\n"
+	.string	"ftl_sblk_dump_write = %x %d %d %d %d\n"
 .LC201:
-	.string	"finfo:"
+	.string	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
 .LC202:
-	.string	"flash_info_flush id = %x, page = %x\n"
+	.string	"ftl_sblk_dump_write2 = %x %d %d %d\n"
 .LC203:
-	.string	"sys_info_flush error:%x\n"
+	.string	"ftl_sblk_dump_write = %x %x\n"
 .LC204:
-	.string	"...%d @ %s %d %p\n"
+	.string	"ftl_sblk_dump_write done = %x\n"
 .LC205:
-	.string	"no sys info %x\n"
+	.string	"ftl_ink_check_sblk = %x %d %d\n"
 .LC206:
-	.string	"l2p:"
+	.string	"ftl_ink_check_sblk = %x %d %d end\n"
 .LC207:
-	.string	"free_buf_count: %d\n"
+	.string	"finfo:"
 .LC208:
-	.string	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\n"
+	.string	"flash_info_flush id = %x, page = %x\n"
 .LC209:
-	.string	"ftl_ext_info_blk blk:0x%x, page:0x%x\n"
+	.string	"sys_info_flush error:%x\n"
 .LC210:
-	.string	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"...%d @ %s %d %p\n"
 .LC211:
-	.string	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"no sys info %x\n"
 .LC212:
-	.string	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"l2p:"
 .LC213:
-	.string	"lpa:"
+	.string	"free_buf_count: %d\n"
 .LC214:
-	.string	"vpn:"
+	.string	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\n"
 .LC215:
-	.string	"sblk:"
+	.string	"ftl_ext_info_blk blk:0x%x, page:0x%x\n"
 .LC216:
-	.string	"lpa_hash:"
+	.string	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC217:
-	.string	"lpa_hash_index:"
+	.string	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC218:
-	.string	"%s w error lpn = %x, max ppa = %d\n"
+	.string	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC219:
-	.string	"region_id = %d, pm_max_region = %d\n"
+	.string	"lpa:"
 .LC220:
-	.string	"load_l2p_region no ppa = %x , %x, all setting 0xff....\n"
+	.string	"vpn:"
 .LC221:
-	.string	"load_l2p_region = %x,%x,%x, %x\n"
+	.string	"sblk:"
 .LC222:
-	.string	"pm_ppa:"
+	.string	"lpa_hash:"
 .LC223:
-	.string	"data:"
+	.string	"lpa_hash_index:"
 .LC224:
-	.string	"spare:"
+	.string	"%s w error lpn = %x, max ppa = %d\n"
 .LC225:
-	.string	"pm_init posr %x %x %x\n"
+	.string	"region_id = %d, pm_max_region = %d\n"
 .LC226:
-	.string	"pm_init recovery %x %x %x\n"
+	.string	"load_l2p_region no ppa = %x , %x, all setting 0xff....\n"
 .LC227:
-	.string	"pm_log2phys  lpn = %d, max lpn = %d\n"
+	.string	"load_l2p_region = %x,%x,%x, %x\n"
 .LC228:
-	.string	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+	.string	"pm_ppa:"
 .LC229:
-	.string	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
+	.string	"data:"
 .LC230:
-	.string	"gc_recovery: %x vpn = %x\n"
+	.string	"spare:"
 .LC231:
-	.string	"_c_user_data_density := %d\n"
+	.string	"pm_init posr %x %x %x\n"
 .LC232:
-	.string	"_c_totle_phy_density := %d\n"
+	.string	"pm_init recovery %x %x %x\n"
 .LC233:
-	.string	"_c_totle_log_page := %d\n"
+	.string	"pm_log2phys  lpn = %d, max lpn = %d\n"
 .LC234:
-	.string	"_c_totle_data_density := %d\n"
+	.string	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
 .LC235:
-	.string	"_c_ftl_pm_page_num := %d\n"
+	.string	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
 .LC236:
-	.string	"_c_ftl_byte_pre_page := %d\n"
+	.string	"gc_recovery: %x vpn = %x\n"
 .LC237:
-	.string	"_c_max_pm_sblk := %d\n"
+	.string	"_c_user_data_density := %d\n"
 .LC238:
-	.string	"_min_slc_super_block := %d\n"
+	.string	"_c_totle_phy_density := %d\n"
 .LC239:
-	.string	"_max_xlc_super_block := %d\n"
+	.string	"_c_totle_log_page := %d\n"
 .LC240:
-	.string	"gp_ftl_ext_info %p %p %p\n"
+	.string	"_c_totle_data_density := %d\n"
 .LC241:
-	.string	"flash info size: %d %d %d\n"
+	.string	"_c_ftl_pm_page_num := %d\n"
 .LC242:
-	.string	"ftl_init %x\n"
+	.string	"_c_ftl_byte_pre_page := %d\n"
 .LC243:
-	.string	"gc_update_l2p_map_new sblk %x\n"
+	.string	"_c_max_pm_sblk := %d\n"
 .LC244:
-	.string	"gc_update_l2p_map_new: %x %x %x\n"
+	.string	"_min_slc_super_block := %d\n"
 .LC245:
-	.string	"lpa: %x %x %x\n"
+	.string	"_max_xlc_super_block := %d\n"
 .LC246:
-	.string	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\n"
+	.string	"gp_ftl_ext_info %p %p %p\n"
 .LC247:
-	.string	"gc_scan_src_blk = %x, vpn = %d\n"
+	.string	"flash info size: %d %d %d\n"
 .LC248:
-	.string	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\n"
+	.string	"ftl_init %x\n"
 .LC249:
-	.string	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:%d\n"
+	.string	"gc_update_l2p_map_new sblk %x\n"
 .LC250:
-	.string	"ftl_sblk_dump = %x %d %d %d %d\n"
+	.string	"gc_update_l2p_map_new: %x %x %x\n"
 .LC251:
-	.string	"ftl_sblk_dump = %x %x %x %x\n"
+	.string	"lpa: %x %x %x\n"
 .LC252:
-	.string	"page_addr = %x, lpa=%x vpn = %d\n"
+	.string	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\n"
 .LC253:
-	.string	"index= %x, lpa=%x\n"
+	.string	"gc_scan_src_blk = %x, vpn = %d\n"
 .LC254:
-	.string	"block = %x, vpn=%x check vpn = %d\n"
+	.string	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\n"
 .LC255:
-	.string	"ftl_read %x %x %x\n"
+	.string	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:%d\n"
 .LC256:
-	.string	"ftl_read refresh =%x, lpa = %x, ppa= %x\n"
+	.string	"ftl_sblk_dump = %x %d %d %d %d\n"
 .LC257:
-	.string	"id=%d, status = %x, lpa = %x, ppa = %x spare = %x %x %x %x\n"
+	.string	"ftl_sblk_dump = %x %x %x %x\n"
 .LC258:
-	.string	"zftl debug cmd: %s\n"
+	.string	"page_addr = %x, lpa=%x vpn = %d\n"
 .LC259:
-	.string	"cmd:"
+	.string	"index= %x, lpa=%x\n"
 .LC260:
-	.string	"dumpl2p"
+	.string	"block = %x, vpn=%x check vpn = %d\n"
 .LC261:
-	.string	"pm l2p:"
+	.string	"ftl_read %x %x %x\n"
 .LC262:
-	.string	"pm blk:"
+	.string	"ftl_read refresh =%x, lpa = %x, ppa= %x\n"
 .LC263:
-	.string	"dumppm:"
+	.string	"id=%d, status = %x, lpa = %x, ppa = %x spare = %x %x %x %x\n"
 .LC264:
-	.string	"p_cmd: %s\n"
+	.string	"zftl debug cmd: %s\n"
 .LC265:
-	.string	"pm ram = %x, %x\n"
+	.string	"cmd:"
 .LC266:
-	.string	"ram:"
+	.string	"dumpl2p"
 .LC267:
-	.string	"pm:"
+	.string	"pm l2p:"
 .LC268:
-	.string	"dumpsys"
+	.string	"pm blk:"
 .LC269:
-	.string	"dumplist:"
+	.string	"dumppm:"
 .LC270:
-	.string	"vpncheck"
+	.string	"p_cmd: %s\n"
 .LC271:
-	.string	"dumpppa:"
+	.string	"pm ram = %x, %x\n"
 .LC272:
-	.string	"dumpblk:"
+	.string	"ram:"
 .LC273:
-	.string	"setzdebug:"
+	.string	"pm:"
 .LC274:
-	.string	"lpa2ppa:"
+	.string	"dumpsys"
 .LC275:
-	.string	"lpa: %x--> ppa: %x\n"
+	.string	"dumplist:"
 .LC276:
-	.string	"help:\n"
+	.string	"vpncheck"
 .LC277:
-	.string	"1. echo dumpl2p > /proc/zftl_debug\n"
+	.string	"dumpppa:"
 .LC278:
-	.string	"2. echo dumppm:x > /proc/zftl_debug\n"
+	.string	"dumpblk:"
 .LC279:
-	.string	"3. echo dumpsys > /proc/zftl_debug\n"
+	.string	"setzdebug:"
 .LC280:
-	.string	"4. echo dumpppa:x > /proc/zftl_debug\n"
+	.string	"lpa2ppa:"
 .LC281:
-	.string	"5. echo vpncheck > /proc/zftl_debug\n"
+	.string	"lpa: %x--> ppa: %x\n"
 .LC282:
-	.string	"6. echo setzdebug:x > /proc/zftl_debug\n"
+	.string	"help:\n"
 .LC283:
-	.string	"7. echo dumplist > /proc/zftl_debug\n"
+	.string	"1. echo dumpl2p > /proc/zftl_debug\n"
 .LC284:
-	.string	"8. echo lpa2ppa:x> /proc/zftl_debug\n"
+	.string	"2. echo dumppm:x > /proc/zftl_debug\n"
 .LC285:
-	.string	"gc_lpa:"
+	.string	"3. echo dumpsys > /proc/zftl_debug\n"
 .LC286:
+	.string	"4. echo dumpppa:x > /proc/zftl_debug\n"
+.LC287:
+	.string	"5. echo vpncheck > /proc/zftl_debug\n"
+.LC288:
+	.string	"6. echo setzdebug:x > /proc/zftl_debug\n"
+.LC289:
+	.string	"7. echo dumplist > /proc/zftl_debug\n"
+.LC290:
+	.string	"8. echo lpa2ppa:x> /proc/zftl_debug\n"
+.LC291:
+	.string	"gc_lpa:"
+.LC292:
 	.string	"gc_ppa:"
-.LC287:
+.LC293:
 	.string	"err: ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
-.LC288:
+.LC294:
 	.string	"ftl_update_l2p_map: %x %x %x\n"
-.LC289:
+.LC295:
 	.string	"ftl_update_l2p_map"
-.LC290:
+.LC296:
 	.string	"lpa_tbl:"
-.LC291:
+.LC297:
 	.string	"sblk %x vpn: %d %d\n"
-.LC292:
+.LC298:
 	.string	"error gc_add_sblk: %x\n"
-.LC293:
+.LC299:
 	.string	"%d read error: ppa:%x, lpa:%x, status:%x\n"
-.LC294:
+.LC300:
 	.string	"gc page in buf: lpa %x ppa = %x pageindex= %x\n"
-.LC295:
+.LC301:
 	.string	"gc_do_copy_back: lpa %x des_ppa = %x %x gc_ppa= %x page_index= %d\n"
-.LC296:
-	.string	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x\n"
-.LC297:
-	.string	"%d prog_step: %x %x buf id= %x ppa = %x hash=%x id = %x plane = %x lpa=%x\n"
-.LC298:
+.LC302:
+	.string	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x %x %d\n"
+.LC303:
+	.string	"%d prog_step: %x %x buf id= %x ppa = %x hash=%d id = %x plane = %x lpa=%x %x\n"
+.LC304:
 	.string	"gc %d: %d %d %d %d %d %d %d\n"
-.LC299:
+.LC305:
 	.string	"gc %d: %d %d %d %d %d %d\n"
-.LC300:
+.LC306:
 	.string	"GC_STATE_SCAN_ALL_PAGE = %x, vpn0 = %d, vpn1 = %d\n"
-.LC301:
+.LC307:
 	.string	"gc free %x, %d\n"
-.LC302:
+.LC308:
 	.string	"ftlwrite %x %x %x %x\n"
-.LC303:
+.LC309:
 	.string	"ftl_discard:(%x, %x, %x, %x)\n"
-.LC304:
+.LC310:
 	.string	"id_block_prog_msb_ff_data slc page = %d pageadd=%x %x\n"
-.LC305:
+.LC311:
 	.string	"write_idblock fix data %x %x\n"
-.LC306:
+.LC312:
 	.string	"idblk:"
-.LC307:
+.LC313:
 	.string	"write_idblock totle_sec %x %x\n"
-.LC308:
+.LC314:
 	.string	"prog page: %x %x %x, %p %x %x %x\n"
-.LC309:
+.LC315:
 	.string	"wl_lba %p %x %x %x\n"
-.LC310:
+.LC316:
 	.string	"READ_SECTOR_IO\n"
-.LC311:
+.LC317:
 	.string	"rk_copy_from_user error\n"
-.LC312:
+.LC318:
 	.string	"READ_SECTOR_IO %x %x\n"
-.LC313:
+.LC319:
 	.string	"rk_copy_to_user error\n"
-.LC314:
+.LC320:
 	.string	"WRITE_SECTOR_IO\n"
-.LC315:
+.LC321:
 	.string	"WRITE_SECTOR_IO %x %x\n"
-.LC316:
+.LC322:
 	.string	"END_WRITE_SECTOR_IO\n"
-.LC317:
+.LC323:
 	.string	"END_WRITE_SECTOR_IO %x %x\n"
-.LC318:
+.LC324:
 	.string	"GET_FLASH_INFO_IO\n"
-.LC319:
+.LC325:
 	.string	"GET_BAD_BLOCK_IO\n"
-.LC320:
+.LC326:
 	.string	"GET_LOCK_FLAG_IO\n"
-.LC321:
+.LC327:
 	.string	"GET_PUBLIC_KEY_IO\n"
-.LC322:
+.LC328:
 	.string	"RKNAND_GET_DRM_KEY\n"
-.LC323:
+.LC329:
 	.string	"RKNAND_STORE_DRM_KEY\n"
-.LC324:
+.LC330:
 	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
-.LC325:
+.LC331:
 	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
-.LC326:
+.LC332:
 	.string	"RKNAND_GET_SN_SECTOR\n"
-.LC327:
+.LC333:
 	.string	"RKNAND_LOADER_UNLOCK\n"
-.LC328:
+.LC334:
 	.string	"RKNAND_LOADER_STATUS\n"
-.LC329:
+.LC335:
 	.string	"RKNAND_LOADER_LOCK\n"
-.LC330:
+.LC336:
 	.string	"LockKey not match %d\n"
-.LC331:
+.LC337:
 	.string	"RKNAND_GET_VENDOR_SECTOR\n"
-.LC332:
+.LC338:
 	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
-.LC333:
+.LC339:
 	.string	"return ret = %lx\n"
-.LC334:
+.LC340:
 	.string	"secureBootEn check error\n"
-.LC335:
+.LC341:
 	.string	"\0013vendor storage %x,%x,%x\n"
 	.data
 	.align	3
 .LANCHOR2 = . + 0
+.LANCHOR7 = . + 4352
 	.type	zftl_debug, %object
 	.size	zftl_debug, 4
 zftl_debug:
@@ -28175,7 +29702,7 @@ hy_f26_ref_value:
 	.byte	-37
 	.zero	4
 	.type	zftl_nand_flash_para_tbl, %object
-	.size	zftl_nand_flash_para_tbl, 1216
+	.size	zftl_nand_flash_para_tbl, 1408
 zftl_nand_flash_para_tbl:
 	.byte	6
 	.byte	-104
@@ -28989,6 +30516,90 @@ zftl_nand_flash_para_tbl:
 	.byte	0
 	.byte	0
 	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-87
+	.byte	4
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	88
+	.byte	50
+	.byte	-95
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	768
+	.byte	3
+	.byte	1
+	.hword	1440
+	.hword	3527
+	.byte	0
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	1024
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	6
+	.byte	44
+	.byte	-92
+	.byte	8
+	.byte	50
+	.byte	-95
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	2304
+	.byte	3
+	.byte	1
+	.hword	1008
+	.hword	3521
+	.byte	0
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	4096
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	4
 	.byte	6
 	.byte	-83
 	.byte	-34
@@ -29125,9 +30736,9 @@ zftl_nand_flash_para_tbl:
 	.byte	3
 	.byte	0
 	.hword	256
-	.byte	2
-	.byte	-65
-	.byte	-66
+	.byte	0
+	.byte	0
+	.byte	0
 	.byte	0
 	.byte	6
 	.byte	-83
@@ -29192,15 +30803,99 @@ zftl_nand_flash_para_tbl:
 	.byte	60
 	.byte	-95
 	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1024
+	.hword	455
+	.byte	4
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	-119
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	455
+	.byte	4
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
 	.byte	4
+	.hword	1024
+	.hword	449
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
 	.byte	1
-	.byte	32
-	.hword	512
+	.byte	16
+	.hword	256
 	.byte	2
-	.byte	1
-	.hword	1024
-	.hword	455
 	.byte	4
+	.hword	1024
+	.hword	449
+	.byte	3
 	.byte	17
 	.byte	40
 	.byte	32
@@ -29208,39 +30903,39 @@ zftl_nand_flash_para_tbl:
 	.byte	0
 	.byte	1
 	.byte	0
-	.hword	512
-	.byte	3
+	.hword	256
 	.byte	0
 	.byte	0
 	.byte	0
-	.byte	5
+	.byte	0
+	.byte	6
 	.byte	-119
-	.byte	-124
-	.byte	100
-	.byte	60
-	.byte	-91
+	.byte	-92
+	.byte	8
+	.byte	50
+	.byte	-95
 	.byte	0
-	.byte	4
+	.byte	7
 	.byte	1
 	.byte	32
-	.hword	512
-	.byte	2
-	.byte	2
-	.hword	1024
-	.hword	455
-	.byte	4
-	.byte	17
-	.byte	40
+	.hword	2304
+	.byte	3
+	.byte	1
+	.hword	1008
+	.hword	3521
+	.byte	0
+	.byte	19
+	.byte	70
 	.byte	32
 	.byte	1
 	.byte	0
 	.byte	1
 	.byte	0
-	.hword	512
+	.hword	4096
 	.byte	3
 	.byte	0
 	.byte	0
-	.byte	0
+	.byte	4
 	.type	nand_opt_para, %object
 	.size	nand_opt_para, 128
 nand_opt_para:
@@ -29320,6 +31015,777 @@ nand_opt_para:
 	.byte	0
 	.byte	0
 	.zero	14
+	.type	tlc_b05a_prog_tbl, %object
+	.size	tlc_b05a_prog_tbl, 1536
+tlc_b05a_prog_tbl:
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	0
+	.hword	9
+	.hword	0
+	.hword	11
+	.hword	0
+	.hword	13
+	.hword	0
+	.hword	15
+	.hword	0
+	.hword	17
+	.hword	0
+	.hword	19
+	.hword	0
+	.hword	21
+	.hword	0
+	.hword	23
+	.hword	0
+	.hword	25
+	.hword	0
+	.hword	27
+	.hword	0
+	.hword	29
+	.hword	0
+	.hword	31
+	.hword	0
+	.hword	33
+	.hword	0
+	.hword	35
+	.hword	0
+	.hword	37
+	.hword	0
+	.hword	39
+	.hword	0
+	.hword	41
+	.hword	0
+	.hword	43
+	.hword	0
+	.hword	45
+	.hword	0
+	.hword	47
+	.hword	0
+	.hword	49
+	.hword	0
+	.hword	51
+	.hword	0
+	.hword	53
+	.hword	0
+	.hword	55
+	.hword	0
+	.hword	25
+	.hword	58
+	.hword	0
+	.hword	27
+	.hword	61
+	.hword	0
+	.hword	29
+	.hword	64
+	.hword	0
+	.hword	31
+	.hword	67
+	.hword	0
+	.hword	33
+	.hword	70
+	.hword	0
+	.hword	35
+	.hword	73
+	.hword	0
+	.hword	37
+	.hword	76
+	.hword	0
+	.hword	39
+	.hword	79
+	.hword	0
+	.hword	41
+	.hword	82
+	.hword	0
+	.hword	43
+	.hword	85
+	.hword	0
+	.hword	45
+	.hword	88
+	.hword	0
+	.hword	47
+	.hword	91
+	.hword	0
+	.hword	49
+	.hword	94
+	.hword	0
+	.hword	51
+	.hword	97
+	.hword	0
+	.hword	53
+	.hword	100
+	.hword	0
+	.hword	55
+	.hword	103
+	.hword	0
+	.hword	58
+	.hword	106
+	.hword	0
+	.hword	61
+	.hword	109
+	.hword	0
+	.hword	64
+	.hword	112
+	.hword	0
+	.hword	67
+	.hword	115
+	.hword	0
+	.hword	70
+	.hword	118
+	.hword	0
+	.hword	73
+	.hword	121
+	.hword	0
+	.hword	76
+	.hword	124
+	.hword	0
+	.hword	79
+	.hword	127
+	.hword	0
+	.hword	82
+	.hword	130
+	.hword	0
+	.hword	85
+	.hword	133
+	.hword	0
+	.hword	88
+	.hword	136
+	.hword	0
+	.hword	91
+	.hword	139
+	.hword	0
+	.hword	94
+	.hword	142
+	.hword	0
+	.hword	97
+	.hword	145
+	.hword	0
+	.hword	100
+	.hword	148
+	.hword	0
+	.hword	103
+	.hword	151
+	.hword	0
+	.hword	106
+	.hword	154
+	.hword	0
+	.hword	109
+	.hword	157
+	.hword	0
+	.hword	112
+	.hword	160
+	.hword	0
+	.hword	115
+	.hword	163
+	.hword	0
+	.hword	118
+	.hword	166
+	.hword	0
+	.hword	121
+	.hword	169
+	.hword	0
+	.hword	124
+	.hword	172
+	.hword	0
+	.hword	127
+	.hword	175
+	.hword	0
+	.hword	130
+	.hword	178
+	.hword	0
+	.hword	133
+	.hword	181
+	.hword	0
+	.hword	136
+	.hword	184
+	.hword	0
+	.hword	139
+	.hword	187
+	.hword	0
+	.hword	142
+	.hword	190
+	.hword	0
+	.hword	145
+	.hword	193
+	.hword	0
+	.hword	148
+	.hword	196
+	.hword	0
+	.hword	151
+	.hword	199
+	.hword	0
+	.hword	154
+	.hword	202
+	.hword	0
+	.hword	157
+	.hword	205
+	.hword	0
+	.hword	160
+	.hword	208
+	.hword	0
+	.hword	163
+	.hword	211
+	.hword	0
+	.hword	166
+	.hword	214
+	.hword	0
+	.hword	169
+	.hword	217
+	.hword	0
+	.hword	172
+	.hword	220
+	.hword	0
+	.hword	175
+	.hword	223
+	.hword	0
+	.hword	178
+	.hword	226
+	.hword	0
+	.hword	181
+	.hword	229
+	.hword	0
+	.hword	184
+	.hword	232
+	.hword	0
+	.hword	187
+	.hword	235
+	.hword	0
+	.hword	190
+	.hword	238
+	.hword	0
+	.hword	193
+	.hword	241
+	.hword	0
+	.hword	196
+	.hword	244
+	.hword	0
+	.hword	199
+	.hword	247
+	.hword	0
+	.hword	202
+	.hword	250
+	.hword	0
+	.hword	205
+	.hword	253
+	.hword	0
+	.hword	208
+	.hword	256
+	.hword	0
+	.hword	211
+	.hword	259
+	.hword	0
+	.hword	214
+	.hword	262
+	.hword	0
+	.hword	217
+	.hword	265
+	.hword	0
+	.hword	220
+	.hword	268
+	.hword	0
+	.hword	223
+	.hword	271
+	.hword	0
+	.hword	226
+	.hword	274
+	.hword	0
+	.hword	229
+	.hword	277
+	.hword	0
+	.hword	232
+	.hword	280
+	.hword	0
+	.hword	235
+	.hword	283
+	.hword	0
+	.hword	238
+	.hword	286
+	.hword	0
+	.hword	241
+	.hword	289
+	.hword	0
+	.hword	244
+	.hword	292
+	.hword	0
+	.hword	247
+	.hword	295
+	.hword	0
+	.hword	250
+	.hword	298
+	.hword	0
+	.hword	253
+	.hword	301
+	.hword	0
+	.hword	256
+	.hword	304
+	.hword	0
+	.hword	259
+	.hword	307
+	.hword	0
+	.hword	262
+	.hword	310
+	.hword	0
+	.hword	265
+	.hword	313
+	.hword	0
+	.hword	268
+	.hword	316
+	.hword	0
+	.hword	271
+	.hword	319
+	.hword	0
+	.hword	274
+	.hword	322
+	.hword	0
+	.hword	277
+	.hword	325
+	.hword	0
+	.hword	280
+	.hword	328
+	.hword	0
+	.hword	283
+	.hword	331
+	.hword	0
+	.hword	286
+	.hword	334
+	.hword	0
+	.hword	289
+	.hword	337
+	.hword	0
+	.hword	292
+	.hword	340
+	.hword	0
+	.hword	295
+	.hword	343
+	.hword	0
+	.hword	298
+	.hword	346
+	.hword	0
+	.hword	301
+	.hword	349
+	.hword	0
+	.hword	304
+	.hword	352
+	.hword	0
+	.hword	307
+	.hword	355
+	.hword	0
+	.hword	310
+	.hword	358
+	.hword	0
+	.hword	313
+	.hword	361
+	.hword	0
+	.hword	316
+	.hword	364
+	.hword	0
+	.hword	319
+	.hword	367
+	.hword	0
+	.hword	322
+	.hword	370
+	.hword	0
+	.hword	325
+	.hword	373
+	.hword	0
+	.hword	328
+	.hword	376
+	.hword	0
+	.hword	331
+	.hword	379
+	.hword	0
+	.hword	334
+	.hword	382
+	.hword	0
+	.hword	337
+	.hword	385
+	.hword	0
+	.hword	340
+	.hword	388
+	.hword	0
+	.hword	343
+	.hword	391
+	.hword	0
+	.hword	346
+	.hword	394
+	.hword	0
+	.hword	349
+	.hword	397
+	.hword	0
+	.hword	352
+	.hword	400
+	.hword	0
+	.hword	355
+	.hword	403
+	.hword	0
+	.hword	358
+	.hword	406
+	.hword	0
+	.hword	361
+	.hword	409
+	.hword	0
+	.hword	364
+	.hword	412
+	.hword	0
+	.hword	367
+	.hword	415
+	.hword	0
+	.hword	370
+	.hword	418
+	.hword	0
+	.hword	373
+	.hword	421
+	.hword	0
+	.hword	376
+	.hword	424
+	.hword	0
+	.hword	379
+	.hword	427
+	.hword	0
+	.hword	382
+	.hword	430
+	.hword	0
+	.hword	385
+	.hword	433
+	.hword	0
+	.hword	388
+	.hword	436
+	.hword	0
+	.hword	391
+	.hword	439
+	.hword	0
+	.hword	394
+	.hword	442
+	.hword	0
+	.hword	397
+	.hword	445
+	.hword	0
+	.hword	400
+	.hword	448
+	.hword	0
+	.hword	403
+	.hword	451
+	.hword	0
+	.hword	406
+	.hword	454
+	.hword	0
+	.hword	409
+	.hword	457
+	.hword	0
+	.hword	412
+	.hword	460
+	.hword	0
+	.hword	415
+	.hword	463
+	.hword	0
+	.hword	418
+	.hword	466
+	.hword	0
+	.hword	421
+	.hword	469
+	.hword	0
+	.hword	424
+	.hword	472
+	.hword	0
+	.hword	427
+	.hword	475
+	.hword	0
+	.hword	430
+	.hword	478
+	.hword	0
+	.hword	433
+	.hword	481
+	.hword	0
+	.hword	436
+	.hword	484
+	.hword	0
+	.hword	439
+	.hword	487
+	.hword	0
+	.hword	442
+	.hword	490
+	.hword	0
+	.hword	445
+	.hword	493
+	.hword	0
+	.hword	448
+	.hword	496
+	.hword	0
+	.hword	451
+	.hword	499
+	.hword	0
+	.hword	454
+	.hword	502
+	.hword	0
+	.hword	457
+	.hword	505
+	.hword	0
+	.hword	460
+	.hword	508
+	.hword	0
+	.hword	463
+	.hword	511
+	.hword	0
+	.hword	466
+	.hword	514
+	.hword	0
+	.hword	469
+	.hword	517
+	.hword	0
+	.hword	472
+	.hword	520
+	.hword	0
+	.hword	475
+	.hword	523
+	.hword	0
+	.hword	478
+	.hword	526
+	.hword	0
+	.hword	481
+	.hword	529
+	.hword	0
+	.hword	484
+	.hword	532
+	.hword	0
+	.hword	487
+	.hword	535
+	.hword	0
+	.hword	490
+	.hword	538
+	.hword	0
+	.hword	493
+	.hword	541
+	.hword	0
+	.hword	496
+	.hword	544
+	.hword	0
+	.hword	499
+	.hword	547
+	.hword	0
+	.hword	502
+	.hword	550
+	.hword	0
+	.hword	505
+	.hword	553
+	.hword	0
+	.hword	508
+	.hword	556
+	.hword	0
+	.hword	511
+	.hword	559
+	.hword	0
+	.hword	514
+	.hword	562
+	.hword	0
+	.hword	517
+	.hword	565
+	.hword	0
+	.hword	520
+	.hword	568
+	.hword	0
+	.hword	523
+	.hword	571
+	.hword	0
+	.hword	526
+	.hword	574
+	.hword	0
+	.hword	529
+	.hword	577
+	.hword	0
+	.hword	532
+	.hword	580
+	.hword	0
+	.hword	535
+	.hword	583
+	.hword	0
+	.hword	538
+	.hword	586
+	.hword	0
+	.hword	541
+	.hword	589
+	.hword	0
+	.hword	544
+	.hword	592
+	.hword	0
+	.hword	547
+	.hword	595
+	.hword	0
+	.hword	550
+	.hword	598
+	.hword	0
+	.hword	553
+	.hword	601
+	.hword	0
+	.hword	556
+	.hword	604
+	.hword	0
+	.hword	559
+	.hword	607
+	.hword	0
+	.hword	562
+	.hword	610
+	.hword	0
+	.hword	565
+	.hword	613
+	.hword	0
+	.hword	568
+	.hword	616
+	.hword	0
+	.hword	571
+	.hword	619
+	.hword	0
+	.hword	574
+	.hword	622
+	.hword	0
+	.hword	577
+	.hword	625
+	.hword	0
+	.hword	580
+	.hword	628
+	.hword	0
+	.hword	583
+	.hword	631
+	.hword	0
+	.hword	586
+	.hword	634
+	.hword	0
+	.hword	589
+	.hword	637
+	.hword	0
+	.hword	592
+	.hword	640
+	.hword	0
+	.hword	595
+	.hword	643
+	.hword	0
+	.hword	598
+	.hword	646
+	.hword	0
+	.hword	601
+	.hword	649
+	.hword	0
+	.hword	604
+	.hword	652
+	.hword	0
+	.hword	607
+	.hword	655
+	.hword	0
+	.hword	610
+	.hword	658
+	.hword	0
+	.hword	613
+	.hword	661
+	.hword	0
+	.hword	616
+	.hword	664
+	.hword	0
+	.hword	619
+	.hword	667
+	.hword	0
+	.hword	622
+	.hword	670
+	.hword	0
+	.hword	625
+	.hword	673
+	.hword	0
+	.hword	628
+	.hword	676
+	.hword	0
+	.hword	631
+	.hword	679
+	.hword	0
+	.hword	634
+	.hword	682
+	.hword	0
+	.hword	637
+	.hword	685
+	.hword	0
+	.hword	640
+	.hword	688
+	.hword	0
+	.hword	643
+	.hword	691
+	.hword	0
+	.hword	646
+	.hword	694
+	.hword	0
+	.hword	649
+	.hword	697
+	.hword	0
+	.hword	652
+	.hword	700
+	.hword	0
+	.hword	655
+	.hword	703
+	.hword	0
+	.hword	658
+	.hword	706
+	.hword	0
+	.hword	661
+	.hword	709
+	.hword	0
+	.hword	664
+	.hword	712
+	.hword	0
+	.hword	667
+	.hword	715
+	.hword	0
+	.hword	670
+	.hword	718
+	.hword	0
+	.hword	673
+	.hword	721
+	.hword	0
+	.hword	676
+	.hword	724
+	.hword	0
+	.hword	679
+	.hword	727
+	.hword	0
+	.hword	682
+	.hword	730
+	.hword	0
+	.hword	685
+	.hword	733
+	.hword	0
+	.hword	688
+	.hword	736
+	.hword	0
+	.hword	691
+	.hword	739
+	.hword	0
+	.hword	694
+	.hword	742
+	.hword	0
+	.hword	697
+	.hword	745
+	.hword	0
+	.hword	700
+	.hword	748
+	.hword	0
+	.hword	703
+	.hword	751
+	.hword	0
+	.hword	706
+	.hword	0
+	.hword	709
+	.hword	0
+	.hword	712
+	.hword	0
+	.hword	715
+	.hword	0
+	.hword	718
+	.hword	0
+	.hword	721
+	.hword	0
+	.hword	724
+	.hword	0
+	.hword	727
+	.hword	0
 	.type	tlc_prog_order, %object
 	.size	tlc_prog_order, 768
 tlc_prog_order:
@@ -29969,10 +32435,9 @@ gTable_Crc32:
 	.bss
 	.align	6
 .LANCHOR0 = . + 0
-.LANCHOR4 = . + 4352
+.LANCHOR3 = . + 4352
 .LANCHOR5 = . + 21760
-.LANCHOR6 = . + 34816
-.LANCHOR7 = . + 39168
+.LANCHOR6 = . + 39168
 	.type	g_flash_slc_mode, %object
 	.size	g_flash_slc_mode, 1
 g_flash_slc_mode:
@@ -30129,10 +32594,20 @@ gp_flash_info:
 	.size	g_die_cs_idx, 8
 g_die_cs_idx:
 	.zero	8
+	.type	_c_ftl_cs_bits, %object
+	.size	_c_ftl_cs_bits, 1
+_c_ftl_cs_bits:
+	.zero	1
+	.zero	7
 	.type	g_flash_cur_mode, %object
 	.size	g_flash_cur_mode, 4
 g_flash_cur_mode:
 	.zero	4
+	.type	g_flash_micron_3d_tlc_flag, %object
+	.size	g_flash_micron_3d_tlc_flag, 1
+g_flash_micron_3d_tlc_flag:
+	.zero	1
+	.zero	3
 	.type	IDByte, %object
 	.size	IDByte, 32
 IDByte:
@@ -30145,7 +32620,7 @@ g_flash_interface_mode:
 	.size	g_flash_multi_page_prog_en, 1
 g_flash_multi_page_prog_en:
 	.zero	1
-	.zero	2
+	.zero	6
 	.type	g_buf, %object
 	.size	g_buf, 2048
 g_buf:
@@ -30242,9 +32717,9 @@ write_buf_head:
 	.zero	1
 	.zero	7
 	.type	g_gc_info, %object
-	.size	g_gc_info, 344
+	.size	g_gc_info, 600
 g_gc_info:
-	.zero	344
+	.zero	600
 	.type	ftl_sblk_vpn_update_id, %object
 	.size	ftl_sblk_vpn_update_id, 2
 ftl_sblk_vpn_update_id:
@@ -30468,6 +32943,10 @@ gc_pre_ppa_tbl:
 	.size	gc_des_ppa_tbl, 8
 gc_des_ppa_tbl:
 	.zero	8
+	.type	pm_force_gc, %object
+	.size	pm_force_gc, 4
+pm_force_gc:
+	.zero	4
 	.type	_c_swl_slc_gc_th, %object
 	.size	_c_swl_slc_gc_th, 2
 _c_swl_slc_gc_th:
@@ -30480,7 +32959,7 @@ _c_swl_xlc_gc_th:
 	.size	_c_max_pm_sblk, 2
 _c_max_pm_sblk:
 	.zero	2
-	.zero	2
+	.zero	6
 	.type	power_on_init_jiffies, %object
 	.size	power_on_init_jiffies, 8
 power_on_init_jiffies:
@@ -30540,7 +33019,7 @@ write_commit_head:
 	.size	ftl_flush_jiffies, 4
 ftl_flush_jiffies:
 	.zero	4
-	.zero	8
+	.zero	48
 	.type	ftl_info_spare, %object
 	.size	ftl_info_spare, 256
 ftl_info_spare:
@@ -30595,6 +33074,14 @@ g_flash_blk_info:
 	.type	g_flash_reversd_blks, %object
 	.size	g_flash_reversd_blks, 1
 g_flash_reversd_blks:
+	.zero	1
+	.type	g_flash_micron_3d_tlc_b05a, %object
+	.size	g_flash_micron_3d_tlc_b05a, 1
+g_flash_micron_3d_tlc_b05a:
+	.zero	1
+	.type	g_flash_micron_3d_tlc_b16a, %object
+	.size	g_flash_micron_3d_tlc_b16a, 1
+g_flash_micron_3d_tlc_b16a:
 	.zero	1
 	.zero	1
 	.type	_c_ftl_byte_pre_page, %object
@@ -30605,7 +33092,7 @@ _c_ftl_byte_pre_page:
 	.size	pm_last_load_ram_id, 1
 pm_last_load_ram_id:
 	.zero	1
-	.zero	3
+	.zero	1
 	.type	read_ahead_lpa, %object
 	.size	read_ahead_lpa, 4
 read_ahead_lpa:
-- 
2.35.3

