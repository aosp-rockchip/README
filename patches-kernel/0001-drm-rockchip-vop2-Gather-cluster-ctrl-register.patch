From c398b4a772ea122a6d88693f3bd5610c267444c0 Mon Sep 17 00:00:00 2001
From: Andy Yan <andy.yan@rock-chips.com>
Date: Sat, 28 Nov 2020 11:44:31 +0800
Subject: [PATCH] drm/rockchip: vop2: Gather cluster ctrl register

Two sub windows in a cluster share same ctrl register bit.

Change-Id: I0a123fd3a1f63bbf0d6abea557e6024a99adb4cb
Signed-off-by: Andy Yan <andy.yan@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_drm_vop.h  |  7 ++
 drivers/gpu/drm/rockchip/rockchip_drm_vop2.c | 25 ++++--
 drivers/gpu/drm/rockchip/rockchip_vop2_reg.c | 87 ++++++++++++++++----
 3 files changed, 99 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
index c716f3f7d6ee..7d8aec930c64 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
@@ -449,6 +449,12 @@ struct vop_win_phy {
 	struct vop_reg key_en;
 };
 
+struct vop2_cluster_regs {
+	struct vop_reg enable;
+	struct vop_reg afbc_enable;
+	struct vop_reg lb_mode;
+};
+
 struct vop2_scl_regs {
 	struct vop_reg scale_yrgb_x;
 	struct vop_reg scale_yrgb_y;
@@ -471,6 +477,7 @@ struct vop2_scl_regs {
 
 struct vop2_win_regs {
 	const struct vop2_scl_regs *scl;
+	const struct vop2_cluster_regs *cluster;
 	const struct vop_afbc *afbc;
 
 	struct vop_reg gate;
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
index afb8d552cfc3..bc9629922b34 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
@@ -54,6 +54,12 @@
 #define REG_SET_MASK(x, name, off, reg, mask, v, relaxed) \
 		_REG_SET(x, name, off, reg, reg.mask & mask, v, relaxed)
 
+#define VOP_CLUSTER_SET(x, win, name, v) \
+	do { \
+		if (win->regs->cluster) \
+			REG_SET(x, name, 0, win->regs->cluster->name, v, true); \
+	} while (0)
+
 #define VOP_AFBC_SET(x, win, name, v) \
 	do { \
 		if (win->regs->afbc) \
@@ -660,7 +666,7 @@ static void vop2_win_disable(struct vop2_win *win)
 
 	VOP_WIN_SET(vop2, win, enable, 0);
 	if (win->feature & WIN_FEATURE_CLUSTER_MAIN)
-		VOP_WIN_SET(vop2, win, gate, 0);
+		VOP_CLUSTER_SET(vop2, win, enable, 0);
 }
 
 static inline void vop2_write_lut(struct vop2 *vop2, uint32_t offset, uint32_t v)
@@ -881,6 +887,12 @@ static inline bool rockchip_afbc(u64 modifier)
 	return modifier == ROCKCHIP_AFBC_MOD;
 }
 
+
+static inline bool vop2_cluster_window(struct vop2_win *win)
+{
+	return  (win->feature & (WIN_FEATURE_CLUSTER_MAIN | WIN_FEATURE_CLUSTER_SUB));
+}
+
 static int vop2_afbc_half_block_enable(struct vop2_plane_state *vpstate)
 {
 	if (vpstate->rotate_270_en || vpstate->rotate_90_en)
@@ -1754,7 +1766,7 @@ static void vop2_plane_atomic_update(struct drm_plane *plane, struct drm_plane_s
 			format = VOP2_CLUSTER_YUV444_10;
 
 		afbc_half_block_en = vop2_afbc_half_block_enable(vpstate);
-		VOP_AFBC_SET(vop2, win, enable, 1);
+		VOP_CLUSTER_SET(vop2, win, afbc_enable, 1);
 		VOP_AFBC_SET(vop2, win, format, afbc_format);
 		VOP_AFBC_SET(vop2, win, rb_swap, rb_swap);
 		VOP_AFBC_SET(vop2, win, uv_swap, uv_swap);
@@ -1800,9 +1812,6 @@ static void vop2_plane_atomic_update(struct drm_plane *plane, struct drm_plane_s
 
 	vop2_setup_scale(vop2, win, actual_w, actual_h, dsp_w, dsp_h, fb->format->format);
 
-	lb_mode = vop2_get_cluster_lb_mode(win, vpstate);
-	VOP_WIN_SET(vop2, win, lb_mode, lb_mode);
-
 	VOP_WIN_SET(vop2, win, act_info, act_info);
 	VOP_WIN_SET(vop2, win, dsp_info, dsp_info);
 	VOP_WIN_SET(vop2, win, dsp_st, dsp_st);
@@ -1812,7 +1821,11 @@ static void vop2_plane_atomic_update(struct drm_plane *plane, struct drm_plane_s
 	VOP_WIN_SET(vop2, win, csc_mode, vpstate->csc_mode);
 
 	VOP_WIN_SET(vop2, win, enable, 1);
-	VOP_WIN_SET(vop2, win, gate, 1);
+	if (vop2_cluster_window(win)) {
+		lb_mode = vop2_get_cluster_lb_mode(win, vpstate);
+		VOP_CLUSTER_SET(vop2, win, lb_mode, lb_mode);
+		VOP_CLUSTER_SET(vop2, win, enable, 1);
+	}
 	spin_unlock(&vop2->reg_lock);
 
 	vop2->is_iommu_needed = true;
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c b/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
index 3b41682cdbd0..c3308966e303 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
+++ b/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
@@ -592,8 +592,19 @@ static const struct vop2_layer_data rk3568_vop_layers[] = {
 	},
 };
 
-static const struct vop_afbc rk3568_vop_afbc = {
-	.enable = VOP_REG(RK3568_CLUSTER0_CTRL, 0x1, 1),
+static const struct vop2_cluster_regs rk3568_vop_cluster0 =  {
+	.afbc_enable = VOP_REG(RK3568_CLUSTER0_CTRL, 0x1, 1),
+	.enable = VOP_REG(RK3568_CLUSTER0_CTRL, 1, 0),
+	.lb_mode = VOP_REG(RK3568_CLUSTER0_CTRL, 0xf, 4),
+};
+
+static const struct vop2_cluster_regs rk3568_vop_cluster1 =  {
+	.afbc_enable = VOP_REG(RK3568_CLUSTER1_CTRL, 0x1, 1),
+	.enable = VOP_REG(RK3568_CLUSTER1_CTRL, 1, 0),
+	.lb_mode = VOP_REG(RK3568_CLUSTER1_CTRL, 0xf, 4),
+};
+
+static const struct vop_afbc rk3568_cluster0_afbc = {
 	.format = VOP_REG(RK3568_CLUSTER0_WIN0_AFBCD_CTRL, 0x1f, 2),
 	.rb_swap = VOP_REG(RK3568_CLUSTER0_WIN0_AFBCD_CTRL, 0x1, 9),
 	.uv_swap = VOP_REG(RK3568_CLUSTER0_WIN0_AFBCD_CTRL, 0x1, 10),
@@ -612,7 +623,7 @@ static const struct vop_afbc rk3568_vop_afbc = {
 	.ymirror = VOP_REG(RK3568_CLUSTER0_WIN0_AFBCD_ROTATE_MODE, 0x1, 3),
 };
 
-static const struct vop2_scl_regs rk3568_cluster_win_scl = {
+static const struct vop2_scl_regs rk3568_cluster0_win_scl = {
 	.scale_yrgb_x = VOP_REG(RK3568_CLUSTER0_WIN0_SCL_FACTOR_YRGB, 0xffff, 0x0),
 	.scale_yrgb_y = VOP_REG(RK3568_CLUSTER0_WIN0_SCL_FACTOR_YRGB, 0xffff, 16),
 	.yrgb_ver_scl_mode = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL1, 0x3, 14),
@@ -622,6 +633,36 @@ static const struct vop2_scl_regs rk3568_cluster_win_scl = {
 	.vsd_yrgb_gt4 = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL1, 0x1, 29),
 };
 
+static const struct vop_afbc rk3568_cluster1_afbc = {
+	.format = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_CTRL, 0x1f, 2),
+	.rb_swap = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_CTRL, 0x1, 9),
+	.uv_swap = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_CTRL, 0x1, 10),
+	.auto_gating_en = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_OUTPUT_CTRL, 0x1, 4),
+	.half_block_en = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_CTRL, 0x1, 7),
+	.block_split_en = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_CTRL, 0x1, 8),
+	.hdr_ptr = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_HDR_PTR, 0xffffffff, 0),
+	.pic_size = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_PIC_SIZE, 0xffffffff, 0),
+	.pic_vir_width = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_VIR_WIDTH, 0xffff, 0),
+	.tile_num = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_VIR_WIDTH, 0xffff, 16),
+	.pic_offset = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_PIC_OFFSET, 0xffffffff, 0),
+	.dsp_offset = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_DSP_OFFSET, 0xffffffff, 0),
+	.rotate_90 = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_ROTATE_MODE, 0x1, 0),
+	.rotate_270 = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_ROTATE_MODE, 0x1, 1),
+	.xmirror = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_ROTATE_MODE, 0x1, 2),
+	.ymirror = VOP_REG(RK3568_CLUSTER1_WIN0_AFBCD_ROTATE_MODE, 0x1, 3),
+};
+
+static const struct vop2_scl_regs rk3568_cluster1_win_scl = {
+	.scale_yrgb_x = VOP_REG(RK3568_CLUSTER1_WIN0_SCL_FACTOR_YRGB, 0xffff, 0x0),
+	.scale_yrgb_y = VOP_REG(RK3568_CLUSTER1_WIN0_SCL_FACTOR_YRGB, 0xffff, 16),
+	.yrgb_ver_scl_mode = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL1, 0x3, 14),
+	.yrgb_hor_scl_mode = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL1, 0x3, 12),
+	.bic_coe_sel = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL1, 0x3, 2),
+	.vsd_yrgb_gt2 = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL1, 0x1, 28),
+	.vsd_yrgb_gt4 = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL1, 0x1, 29),
+};
+
+
 static const struct vop2_scl_regs rk3568_esmart_win_scl = {
 	.scale_yrgb_x = VOP_REG(RK3568_ESMART0_REGION0_SCL_FACTOR_YRGB, 0xffff, 0x0),
 	.scale_yrgb_y = VOP_REG(RK3568_ESMART0_REGION0_SCL_FACTOR_YRGB, 0xffff, 16),
@@ -753,11 +794,10 @@ static const struct vop2_win_regs *rk3568_area_data[] = {
 	&rk3568_area3_data
 };
 
-static const struct vop2_win_regs rk3568_cluster_win_data = {
-	.scl = &rk3568_cluster_win_scl,
-	.afbc = &rk3568_vop_afbc,
-	.gate = VOP_REG(RK3568_CLUSTER0_CTRL, 1, 0),
-	.lb_mode = VOP_REG(RK3568_CLUSTER0_CTRL, 0xf, 4),
+static const struct vop2_win_regs rk3568_cluster0_win_data = {
+	.scl = &rk3568_cluster0_win_scl,
+	.afbc = &rk3568_cluster0_afbc,
+	.cluster = &rk3568_vop_cluster0,
 	.enable = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL0, 0x1, 0),
 	.format = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL0, 0x1f, 1),
 	.rb_swap = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL0, 0x1, 14),
@@ -773,6 +813,25 @@ static const struct vop2_win_regs rk3568_cluster_win_data = {
 	.csc_mode = VOP_REG(RK3568_CLUSTER0_WIN0_CTRL0, 0x3, 10),
 };
 
+static const struct vop2_win_regs rk3568_cluster1_win_data = {
+	.scl = &rk3568_cluster1_win_scl,
+	.afbc = &rk3568_cluster1_afbc,
+	.cluster = &rk3568_vop_cluster1,
+	.enable = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x1, 0),
+	.format = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x1f, 1),
+	.rb_swap = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x1, 14),
+	.act_info = VOP_REG(RK3568_CLUSTER1_WIN0_ACT_INFO, 0x1fff1fff, 0),
+	.dsp_info = VOP_REG(RK3568_CLUSTER1_WIN0_DSP_INFO, 0x0fff0fff, 0),
+	.dsp_st = VOP_REG(RK3568_CLUSTER1_WIN0_DSP_ST, 0x1fff1fff, 0),
+	.yrgb_mst = VOP_REG(RK3568_CLUSTER1_WIN0_YRGB_MST, 0xffffffff, 0),
+	.uv_mst = VOP_REG(RK3568_CLUSTER1_WIN0_CBR_MST, 0xffffffff, 0),
+	.yrgb_vir = VOP_REG(RK3568_CLUSTER1_WIN0_VIR, 0xffff, 0),
+	.uv_vir = VOP_REG(RK3568_CLUSTER1_WIN0_VIR, 0xffff, 16),
+	.y2r_en = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x1, 8),
+	.r2y_en = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x1, 9),
+	.csc_mode = VOP_REG(RK3568_CLUSTER1_WIN0_CTRL0, 0x3, 10),
+};
+
 static const struct vop2_win_regs rk3568_esmart_win_data = {
 	.scl = &rk3568_esmart_win_scl,
 	.enable = VOP_REG(RK3568_ESMART0_REGION0_CTRL, 0x1, 0),
@@ -823,7 +882,7 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
 	  .vsu_filter_mode = VOP2_SCALE_UP_BIL,
 	  .vsd_filter_mode = VOP2_SCALE_DOWN_BIL,
-	  .regs = &rk3568_cluster_win_data,
+	  .regs = &rk3568_cluster0_win_data,
 	  .max_upscale_factor = 4,
 	  .max_downscale_factor = 4,
 	  .type = DRM_PLANE_TYPE_OVERLAY,
@@ -842,7 +901,7 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
 	  .vsu_filter_mode = VOP2_SCALE_UP_BIL,
 	  .vsd_filter_mode = VOP2_SCALE_DOWN_BIL,
-	  .regs = &rk3568_cluster_win_data,
+	  .regs = &rk3568_cluster0_win_data,
 	  .max_upscale_factor = 4,
 	  .max_downscale_factor = 4,
 	  .type = DRM_PLANE_TYPE_OVERLAY,
@@ -852,7 +911,7 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	{
 	  .name = "Cluster1-win0",
 	  .phys_id = 1,
-	  .base = 0x200,
+	  .base = 0x00,
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
 	  .layer_sel_id = 1,
@@ -862,7 +921,7 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
 	  .vsu_filter_mode = VOP2_SCALE_UP_BIL,
 	  .vsd_filter_mode = VOP2_SCALE_DOWN_BIL,
-	  .regs = &rk3568_cluster_win_data,
+	  .regs = &rk3568_cluster1_win_data,
 	  .type = DRM_PLANE_TYPE_OVERLAY,
 	  .max_upscale_factor = 4,
 	  .max_downscale_factor = 4,
@@ -875,13 +934,13 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .layer_sel_id = -1,
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
-	  .base = 0x280,
+	  .base = 0x80,
 	  .supported_rotations = DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
 	  .vsu_filter_mode = VOP2_SCALE_UP_BIL,
 	  .vsd_filter_mode = VOP2_SCALE_DOWN_BIL,
-	  .regs = &rk3568_cluster_win_data,
+	  .regs = &rk3568_cluster1_win_data,
 	  .type = DRM_PLANE_TYPE_OVERLAY,
 	  .max_upscale_factor = 4,
 	  .max_downscale_factor = 4,
-- 
2.35.3

