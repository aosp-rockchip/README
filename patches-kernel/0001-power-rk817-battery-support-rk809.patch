From ef9512730326fd6c10d405c59a8d38d3854e5955 Mon Sep 17 00:00:00 2001
From: shengfei Xu <xsf@rock-chips.com>
Date: Tue, 25 Dec 2018 17:08:29 +0800
Subject: [PATCH] power: rk817-battery: support rk809
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

A “battery fuel gauge” is integrated in the RK809. Using
the proprietary algorithms and the sensed battery current
and voltage, the gauge can accurately calculate the battery
capacity based on the charging/discharging characteristics
of the battery preloaded in the system. The gauge then sends
the battery capacity information to the processor through
the I2C interface.

Change-Id: I0be1f9ef48285c17d599753d65161e79b0a4c95a
Signed-off-by: Shengfei Xu <xsf@rock-chips.com>
---
 drivers/power/rk817_battery.c | 190 +++++++++++++++++++++++++++++++---
 1 file changed, 177 insertions(+), 13 deletions(-)

diff --git a/drivers/power/rk817_battery.c b/drivers/power/rk817_battery.c
index 23615b93a839..b3eddbd325c8 100644
--- a/drivers/power/rk817_battery.c
+++ b/drivers/power/rk817_battery.c
@@ -261,6 +261,7 @@ enum rk817_battery_fields {
 	VOL_ADC_K3, VOL_ADC_K2, VOL_ADC_K1, VOL_ADC_K0,
 	BAT_EXS, CHG_STS, BAT_OVP_STS, CHRG_IN_CLAMP,
 	CHIP_NAME_H, CHIP_NAME_L,
+	PLUG_IN_STS,
 	F_MAX_FIELDS
 };
 
@@ -428,6 +429,7 @@ static const struct reg_field rk817_battery_reg_fields[] = {
 	[CHRG_IN_CLAMP] = REG_FIELD(0xEB, 2, 2),
 	[CHIP_NAME_H] = REG_FIELD(0xED, 0, 7),
 	[CHIP_NAME_L] = REG_FIELD(0xEE, 0, 7),
+	[PLUG_IN_STS] = REG_FIELD(0xF0, 6, 6),
 };
 
 struct battery_platform_data {
@@ -470,6 +472,9 @@ struct battery_platform_data {
 	int dc_det_pin;
 	u8  dc_det_level;
 	u32 sample_res;
+	u32 bat_res_up;
+	u32 bat_res_down;
+	u32 design_max_voltage;
 	bool extcon;
 };
 
@@ -608,6 +613,11 @@ struct rk817_battery_device {
 	int				dbg_calc_rsoc;
 	int				is_charging;
 	unsigned long			charge_count;
+	u8				plugin_trigger;
+	u8				plugout_trigger;
+	int				plugin_irq;
+	int				plugout_irq;
+	int				chip_id;
 };
 
 static u64 get_boot_sec(void)
@@ -772,8 +782,13 @@ static void rk817_bat_init_voltage_kb(struct rk817_battery_device *battery)
 
 	vcalib0 = rk817_bat_get_vaclib0(battery);
 	vcalib1 =  rk817_bat_get_vaclib1(battery);
-	battery->voltage_k = (4025 - 2300) * 1000 / DIV(vcalib1 - vcalib0);
-	battery->voltage_b = 4025 - (battery->voltage_k * vcalib1) / 1000;
+	if (battery->chip_id == RK809_ID) {
+		battery->voltage_k = (1050 - 600) * 1000 / DIV(vcalib1 - vcalib0);
+		battery->voltage_b = 1050 - (battery->voltage_k * vcalib1) / 1000;
+	} else {
+		battery->voltage_k = (4025 - 2300) * 1000 / DIV(vcalib1 - vcalib0);
+		battery->voltage_b = 4025 - (battery->voltage_k * vcalib1) / 1000;
+	}
 }
 
 static void rk817_bat_restart_relax(struct rk817_battery_device *battery)
@@ -874,22 +889,33 @@ static void rk817_bat_ocv_thre(struct rk817_battery_device *battery, int value)
 
 static int rk817_bat_get_ocv_voltage(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
 
 	val = rk817_bat_field_read(battery, OCV_VOL_H) << 8;
 	val |= rk817_bat_field_read(battery, OCV_VOL_L);
 	vol = battery->voltage_k * val / 1000 + battery->voltage_b;
 
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
+
 	return vol;
 }
 
 static int rk817_bat_get_ocv0_voltage0(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
 
 	val = rk817_bat_field_read(battery, OCV_VOL0_H) << 8;
 	val |= rk817_bat_field_read(battery, OCV_VOL0_L);
 	vol = battery->voltage_k * val / 1000 + battery->voltage_b;
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
 
 	return vol;
 }
@@ -897,30 +923,46 @@ static int rk817_bat_get_ocv0_voltage0(struct rk817_battery_device *battery)
 /* power on battery voltage */
 static int rk817_bat_get_pwron_voltage(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
 
 	val = rk817_bat_field_read(battery, PWRON_VOL_H) << 8;
 	val |= rk817_bat_field_read(battery, PWRON_VOL_L);
 	vol = battery->voltage_k * val / 1000 + battery->voltage_b;
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
 
 	return vol;
 }
 
 static int rk817_bat_get_battery_voltage(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
+	int vcalib0, vcalib1;
+
+	vcalib0 = rk817_bat_get_vaclib0(battery);
+	vcalib1 =  rk817_bat_get_vaclib1(battery);
+
 
 	val = rk817_bat_field_read(battery, BAT_VOL_H) << 8;
 	val |= rk817_bat_field_read(battery, BAT_VOL_L) << 0;
 
 	vol = battery->voltage_k * val / 1000 + battery->voltage_b;
 
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
+
 	return vol;
 }
 
 static int rk817_bat_get_USB_voltage(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
 
 	rk817_bat_field_write(battery, USB_VOL_ADC_EN, 0x01);
 
@@ -929,18 +971,30 @@ static int rk817_bat_get_USB_voltage(struct rk817_battery_device *battery)
 
 	vol = (battery->voltage_k * val / 1000 + battery->voltage_b) * 60 / 46;
 
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
+
 	return vol;
 }
 
 static int rk817_bat_get_sys_voltage(struct rk817_battery_device *battery)
 {
-	int vol, val = 0;
+	int vol, val = 0, vol_temp;
 
 	val = rk817_bat_field_read(battery, SYS_VOL_H) << 8;
 	val |= rk817_bat_field_read(battery, SYS_VOL_L) << 0;
 
 	vol = (battery->voltage_k * val / 1000 + battery->voltage_b) * 60 / 46;
 
+	if (battery->chip_id == RK809_ID) {
+		vol_temp = vol * battery->pdata->bat_res_up /
+			   battery->pdata->bat_res_down + vol;
+		vol = vol_temp;
+	}
+
 	return vol;
 }
 
@@ -1297,6 +1351,18 @@ static int rk817_bat_get_charge_status(struct rk817_battery_device *battery)
 {
 	int status;
 
+	if (battery->chip_id == RK809_ID) {
+		if ((battery->voltage_avg > battery->pdata->design_max_voltage) &&
+		    (battery->current_avg > 0) &&
+		    ((battery->current_avg < 500) ||
+		     (battery->rsoc / 1000 == 100)))
+			return CHARGE_FINISH;
+
+		if (battery->plugin_trigger)
+			return CC_OR_CV_CHRG;
+		else
+			return CHRG_OFF;
+	}
 	status = rk817_bat_field_read(battery, CHG_STS);
 
 	if (status == CC_OR_CV_CHRG) {
@@ -1815,6 +1881,23 @@ static int rk817_bat_parse_dt(struct rk817_battery_device *battery)
 	if (ret < 0)
 		dev_err(dev, "power_off_thresd missing!\n");
 
+	if (battery->chip_id == RK809_ID) {
+		ret = of_property_read_u32(np, "bat_res_up",
+					   &pdata->bat_res_up);
+		if (ret < 0)
+			dev_err(dev, "battery res_up missing\n");
+
+		ret = of_property_read_u32(np, "bat_res_down",
+					   &pdata->bat_res_down);
+		if (ret < 0)
+			dev_err(dev, "battery res_down missing!\n");
+
+		ret = of_property_read_u32(np, "design_max_voltage",
+					   &pdata->design_max_voltage);
+		if (ret < 0)
+			dev_err(dev, "battery design_max_voltage missing!\n");
+	}
+
 	DBG("the battery dts info dump:\n"
 	    "bat_res:%d\n"
 	    "res_sample:%d\n"
@@ -1959,10 +2042,16 @@ static int rk817_battery_get_property(struct power_supply *psy,
 			val->intval = VIRTUAL_STATUS;
 		else if (battery->dsoc == 100 * 1000)
 			val->intval = POWER_SUPPLY_STATUS_FULL;
-		else if (rk817_bat_get_charge_state(battery))
-			val->intval = POWER_SUPPLY_STATUS_CHARGING;
-		else
-			val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
+		else {
+			if ((battery->chip_id != RK809_ID) &&
+			    rk817_bat_get_charge_state(battery))
+				val->intval = POWER_SUPPLY_STATUS_CHARGING;
+			else if ((battery->chip_id == RK809_ID) &&
+				 rk817_bat_get_charge_status(battery))
+				val->intval = POWER_SUPPLY_STATUS_CHARGING;
+			else
+				val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
+		}
 		break;
 	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
 		val->intval = battery->charge_count;
@@ -2675,6 +2764,77 @@ static void rk817_battery_work(struct work_struct *work)
 			   msecs_to_jiffies(battery->monitor_ms));
 }
 
+static irqreturn_t rk809_plug_in_isr(int irq, void *cg)
+{
+	struct rk817_battery_device *battery;
+
+	battery = (struct rk817_battery_device *)cg;
+	battery->plugin_trigger = 1;
+	battery->plugout_trigger = 0;
+	power_supply_changed(battery->bat);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t rk809_plug_out_isr(int irq, void *cg)
+{
+	struct rk817_battery_device *battery;
+
+	battery = (struct rk817_battery_device *)cg;
+	battery->plugin_trigger = 0;
+	battery->plugout_trigger = 1;
+	power_supply_changed(battery->bat);
+
+	return IRQ_HANDLED;
+}
+
+static int rk809_charge_init_irqs(struct rk817_battery_device *battery)
+{
+	struct rk808 *rk817 = battery->rk817;
+	struct platform_device *pdev = battery->pdev;
+	int ret, plug_in_irq, plug_out_irq;
+
+	battery->plugin_trigger = 0;
+	battery->plugout_trigger = 0;
+
+	plug_in_irq = regmap_irq_get_virq(rk817->irq_data, RK817_IRQ_PLUG_IN);
+	if (plug_in_irq < 0) {
+		dev_err(battery->dev, "plug_in_irq request failed!\n");
+		return plug_in_irq;
+	}
+
+	plug_out_irq = regmap_irq_get_virq(rk817->irq_data, RK817_IRQ_PLUG_OUT);
+	if (plug_out_irq < 0) {
+		dev_err(battery->dev, "plug_out_irq request failed!\n");
+		return plug_out_irq;
+	}
+
+	ret = devm_request_threaded_irq(battery->dev, plug_in_irq, NULL,
+					rk809_plug_in_isr,
+					IRQF_TRIGGER_RISING | IRQF_ONESHOT,
+					"rk817_plug_in", battery);
+	if (ret) {
+		dev_err(&pdev->dev, "plug_in_irq request failed!\n");
+		return ret;
+	}
+
+	ret = devm_request_threaded_irq(battery->dev, plug_out_irq, NULL,
+					rk809_plug_out_isr,
+					IRQF_TRIGGER_RISING | IRQF_ONESHOT,
+					"rk817_plug_out", battery);
+	if (ret) {
+		dev_err(&pdev->dev, "plug_out_irq request failed!\n");
+		return ret;
+	}
+
+	if (rk817_bat_field_read(battery, PLUG_IN_STS)) {
+		battery->plugin_trigger = 1;
+		battery->plugout_trigger = 0;
+	}
+
+	return 0;
+}
+
 #ifdef CONFIG_OF
 static const struct of_device_id rk817_bat_of_match[] = {
 	{ .compatible = "rk817,battery", },
@@ -2709,6 +2869,7 @@ static int rk817_battery_probe(struct platform_device *pdev)
 	battery->client = client;
 	battery->dev = &pdev->dev;
 	platform_set_drvdata(pdev, battery);
+	battery->chip_id = rk817->variant;
 
 	battery->regmap = rk817->regmap;
 	if (IS_ERR(battery->regmap)) {
@@ -2739,7 +2900,6 @@ static int rk817_battery_probe(struct platform_device *pdev)
 	rk817_bat_init_fg(battery);
 
 	rk817_battery_debug_info(battery);
-
 	rk817_bat_update_info(battery);
 
 	rk817_bat_output_info(battery);
@@ -2754,6 +2914,10 @@ static int rk817_battery_probe(struct platform_device *pdev)
 		dev_err(battery->dev, "rk817 power supply register failed!\n");
 		return ret;
 	}
+
+	if (battery->chip_id == RK809_ID)
+		rk809_charge_init_irqs(battery);
+
 	wake_lock_init(&battery->wake_lock, WAKE_LOCK_SUSPEND,
 		       "rk817_bat_lock");
 
-- 
2.35.3

