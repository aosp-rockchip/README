From 45fd20585f13cf263659b5386b8a7e29048f9387 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Sat, 4 Jan 2020 10:36:05 +0800
Subject: [PATCH] media: rockchip: isp: support get y statics from csirx

Change-Id: I7a69c63c8b42b1144a82e7efdd12b176e3b2090c
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/isp/Makefile  |   3 +-
 drivers/media/platform/rockchip/isp/capture.c |   4 +
 drivers/media/platform/rockchip/isp/dev.c     |   9 +-
 drivers/media/platform/rockchip/isp/dev.h     |   2 +
 .../platform/rockchip/isp/isp_mipi_luma.c     | 478 ++++++++++++++++++
 .../platform/rockchip/isp/isp_mipi_luma.h     |  67 +++
 drivers/media/platform/rockchip/isp/rkisp.c   |   3 +-
 include/uapi/linux/rkisp2-config.h            |  30 ++
 8 files changed, 593 insertions(+), 3 deletions(-)
 create mode 100644 drivers/media/platform/rockchip/isp/isp_mipi_luma.c
 create mode 100644 drivers/media/platform/rockchip/isp/isp_mipi_luma.h

diff --git a/drivers/media/platform/rockchip/isp/Makefile b/drivers/media/platform/rockchip/isp/Makefile
index 00394940fd0d..03cc0bd0783e 100644
--- a/drivers/media/platform/rockchip/isp/Makefile
+++ b/drivers/media/platform/rockchip/isp/Makefile
@@ -13,4 +13,5 @@ video_rkisp-objs += rkisp.o \
 			capture.o \
 			dmarx.o \
 			csi.o \
-			mpfbc.o
+			mpfbc.o \
+			isp_mipi_luma.o
diff --git a/drivers/media/platform/rockchip/isp/capture.c b/drivers/media/platform/rockchip/isp/capture.c
index 5d0e10326a13..dd40a75d4849 100644
--- a/drivers/media/platform/rockchip/isp/capture.c
+++ b/drivers/media/platform/rockchip/isp/capture.c
@@ -3143,4 +3143,8 @@ void rkisp_mipi_v20_isr(unsigned int phy, unsigned int packet,
 
 	if (state & (RAW0_RD_FRAME | RAW1_RD_FRAME | RAW2_RD_FRAME))
 		rkisp2_rawrd_isr(state, dev);
+
+	if (state & (RAW0_Y_STATE | RAW1_Y_STATE | RAW2_Y_STATE |
+	    RAW0_WR_FRAME | RAW1_WR_FRAME | RAW2_WR_FRAME))
+		rkisp_luma_isr(&dev->luma_vdev, state);
 }
diff --git a/drivers/media/platform/rockchip/isp/dev.c b/drivers/media/platform/rockchip/isp/dev.c
index b5ba1e3dbd52..fb9816b83135 100644
--- a/drivers/media/platform/rockchip/isp/dev.c
+++ b/drivers/media/platform/rockchip/isp/dev.c
@@ -557,6 +557,10 @@ static int rkisp_register_platform_subdevs(struct rkisp_device *dev)
 	if (ret < 0)
 		goto err_unreg_stats_vdev;
 
+	ret = rkisp_register_luma_vdev(&dev->luma_vdev, &dev->v4l2_dev, dev);
+	if (ret < 0)
+		goto err_unreg_params_vdev;
+
 	ret = isp_subdev_notifier(dev);
 	if (ret < 0) {
 		v4l2_err(&dev->v4l2_dev,
@@ -565,10 +569,12 @@ static int rkisp_register_platform_subdevs(struct rkisp_device *dev)
 		ret = v4l2_device_register_subdev_nodes(&dev->v4l2_dev);
 		if (ret == 0)
 			return 0;
-		goto err_unreg_params_vdev;
+		goto err_unreg_luma_vdev;
 	}
 
 	return 0;
+err_unreg_luma_vdev:
+	rkisp_unregister_luma_vdev(&dev->luma_vdev);
 err_unreg_params_vdev:
 	rkisp_unregister_params_vdev(&dev->params_vdev);
 err_unreg_stats_vdev:
@@ -1139,6 +1145,7 @@ static int rkisp_plat_remove(struct platform_device *pdev)
 
 	media_device_unregister(&isp_dev->media_dev);
 	v4l2_device_unregister(&isp_dev->v4l2_dev);
+	rkisp_unregister_luma_vdev(&isp_dev->luma_vdev);
 	rkisp_unregister_params_vdev(&isp_dev->params_vdev);
 	rkisp_unregister_stats_vdev(&isp_dev->stats_vdev);
 	rkisp_unregister_stream_vdevs(isp_dev);
diff --git a/drivers/media/platform/rockchip/isp/dev.h b/drivers/media/platform/rockchip/isp/dev.h
index d92d05ae65e6..2e2a6a35d511 100644
--- a/drivers/media/platform/rockchip/isp/dev.h
+++ b/drivers/media/platform/rockchip/isp/dev.h
@@ -42,6 +42,7 @@
 #include "rkisp.h"
 #include "isp_params.h"
 #include "isp_stats.h"
+#include "isp_mipi_luma.h"
 
 #ifdef VIDEO_ROCKCHIP_ISP1
 #define DRIVER_NAME "rkisp1"
@@ -195,6 +196,7 @@ struct rkisp_device {
 	struct rkisp_dmarx_device dmarx_dev;
 	struct rkisp_csi_device csi_dev;
 	struct rkisp_mpfbc_device mpfbc_dev;
+	struct rkisp_luma_vdev luma_vdev;
 	struct rkisp_pipeline pipe;
 	struct iommu_domain *domain;
 	enum rkisp_isp_ver isp_ver;
diff --git a/drivers/media/platform/rockchip/isp/isp_mipi_luma.c b/drivers/media/platform/rockchip/isp/isp_mipi_luma.c
new file mode 100644
index 000000000000..da5d524592b2
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_mipi_luma.c
@@ -0,0 +1,478 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#include <linux/kfifo.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-vmalloc.h>	/* for ISP statistics */
+#include "dev.h"
+#include "regs.h"
+#include "isp_mipi_luma.h"
+
+#define RKISP_ISP_LUMA_REQ_BUFS_MIN 2
+#define RKISP_ISP_LUMA_REQ_BUFS_MAX 8
+
+static int rkisp_luma_enum_fmt_meta_cap(struct file *file, void *priv,
+					struct v4l2_fmtdesc *f)
+{
+	struct video_device *video = video_devdata(file);
+	struct rkisp_luma_vdev *luma_vdev = video_get_drvdata(video);
+
+	if (f->index > 0 || f->type != video->queue->type)
+		return -EINVAL;
+
+	f->pixelformat = luma_vdev->vdev_fmt.fmt.meta.dataformat;
+	return 0;
+}
+
+static int rkisp_luma_g_fmt_meta_cap(struct file *file, void *priv,
+				     struct v4l2_format *f)
+{
+	struct video_device *video = video_devdata(file);
+	struct rkisp_luma_vdev *luma_vdev = video_get_drvdata(video);
+	struct v4l2_meta_format *meta = &f->fmt.meta;
+
+	if (f->type != video->queue->type)
+		return -EINVAL;
+
+	memset(meta, 0, sizeof(*meta));
+	meta->dataformat = luma_vdev->vdev_fmt.fmt.meta.dataformat;
+	meta->buffersize = luma_vdev->vdev_fmt.fmt.meta.buffersize;
+
+	return 0;
+}
+
+static int rkisp_luma_querycap(struct file *file,
+			       void *priv, struct v4l2_capability *cap)
+{
+	struct video_device *vdev = video_devdata(file);
+	struct rkisp_luma_vdev *luma_vdev = video_get_drvdata(vdev);
+
+	strcpy(cap->driver, DRIVER_NAME);
+	snprintf(cap->driver, sizeof(cap->driver),
+		 "%s_v%d", DRIVER_NAME,
+		 luma_vdev->dev->isp_ver >> 4);
+	strlcpy(cap->card, vdev->name, sizeof(cap->card));
+	strlcpy(cap->bus_info, "platform: " DRIVER_NAME, sizeof(cap->bus_info));
+
+	return 0;
+}
+
+/* ISP video device IOCTLs */
+static const struct v4l2_ioctl_ops rkisp_luma_ioctl = {
+	.vidioc_reqbufs = vb2_ioctl_reqbufs,
+	.vidioc_querybuf = vb2_ioctl_querybuf,
+	.vidioc_create_bufs = vb2_ioctl_create_bufs,
+	.vidioc_qbuf = vb2_ioctl_qbuf,
+	.vidioc_dqbuf = vb2_ioctl_dqbuf,
+	.vidioc_prepare_buf = vb2_ioctl_prepare_buf,
+	.vidioc_expbuf = vb2_ioctl_expbuf,
+	.vidioc_streamon = vb2_ioctl_streamon,
+	.vidioc_streamoff = vb2_ioctl_streamoff,
+	.vidioc_enum_fmt_meta_cap = rkisp_luma_enum_fmt_meta_cap,
+	.vidioc_g_fmt_meta_cap = rkisp_luma_g_fmt_meta_cap,
+	.vidioc_s_fmt_meta_cap = rkisp_luma_g_fmt_meta_cap,
+	.vidioc_try_fmt_meta_cap = rkisp_luma_g_fmt_meta_cap,
+	.vidioc_querycap = rkisp_luma_querycap
+};
+
+struct v4l2_file_operations rkisp_luma_fops = {
+	.mmap = vb2_fop_mmap,
+	.unlocked_ioctl = video_ioctl2,
+	.poll = vb2_fop_poll,
+	.open = v4l2_fh_open,
+	.release = vb2_fop_release
+};
+
+static int rkisp_luma_vb2_queue_setup(struct vb2_queue *vq,
+				      unsigned int *num_buffers,
+				      unsigned int *num_planes,
+				      unsigned int sizes[],
+				      struct device *alloc_ctxs[])
+{
+	struct rkisp_luma_vdev *luma_vdev = vq->drv_priv;
+
+	*num_planes = 1;
+
+	*num_buffers = clamp_t(u32, *num_buffers, RKISP_ISP_LUMA_REQ_BUFS_MIN,
+			       RKISP_ISP_LUMA_REQ_BUFS_MAX);
+
+	sizes[0] = sizeof(struct rkisp_isp2x_luma_buffer);
+
+	INIT_LIST_HEAD(&luma_vdev->stat);
+
+	return 0;
+}
+
+static void rkisp_luma_vb2_buf_queue(struct vb2_buffer *vb)
+{
+	struct vb2_v4l2_buffer *vbuf = to_vb2_v4l2_buffer(vb);
+	struct rkisp_buffer *luma_buf = to_rkisp_buffer(vbuf);
+	struct vb2_queue *vq = vb->vb2_queue;
+	struct rkisp_luma_vdev *luma_dev = vq->drv_priv;
+
+	luma_buf->vaddr[0] = vb2_plane_vaddr(vb, 0);
+
+	spin_lock_bh(&luma_dev->rd_lock);
+	list_add_tail(&luma_buf->queue, &luma_dev->stat);
+	spin_unlock_bh(&luma_dev->rd_lock);
+}
+
+static void rkisp_luma_vb2_stop_streaming(struct vb2_queue *vq)
+{
+	struct rkisp_luma_vdev *luma_vdev = vq->drv_priv;
+	struct rkisp_buffer *buf;
+	unsigned long flags;
+	int i;
+
+	/* Make sure no new work queued in isr before draining wq */
+	spin_lock_irqsave(&luma_vdev->irq_lock, flags);
+	luma_vdev->streamon = false;
+	spin_unlock_irqrestore(&luma_vdev->irq_lock, flags);
+
+	tasklet_disable(&luma_vdev->rd_tasklet);
+
+	spin_lock_bh(&luma_vdev->rd_lock);
+	for (i = 0; i < RKISP_ISP_LUMA_REQ_BUFS_MAX; i++) {
+		if (list_empty(&luma_vdev->stat))
+			break;
+		buf = list_first_entry(&luma_vdev->stat,
+				       struct rkisp_buffer, queue);
+		list_del(&buf->queue);
+		vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_ERROR);
+	}
+	spin_unlock_bh(&luma_vdev->rd_lock);
+}
+
+static int
+rkisp_luma_vb2_start_streaming(struct vb2_queue *queue,
+			       unsigned int count)
+{
+	struct rkisp_luma_vdev *luma_vdev = queue->drv_priv;
+	u32 i;
+
+	for (i = 0; i < ISP2X_MIPI_RAW_MAX; i++)
+		luma_vdev->ystat_isrcnt[i] = 0;
+
+	luma_vdev->streamon = true;
+	kfifo_reset(&luma_vdev->rd_kfifo);
+	tasklet_enable(&luma_vdev->rd_tasklet);
+
+	return 0;
+}
+
+static struct vb2_ops rkisp_luma_vb2_ops = {
+	.queue_setup = rkisp_luma_vb2_queue_setup,
+	.buf_queue = rkisp_luma_vb2_buf_queue,
+	.wait_prepare = vb2_ops_wait_prepare,
+	.wait_finish = vb2_ops_wait_finish,
+	.stop_streaming = rkisp_luma_vb2_stop_streaming,
+	.start_streaming = rkisp_luma_vb2_start_streaming,
+};
+
+static int rkisp_luma_init_vb2_queue(struct vb2_queue *q,
+				     struct rkisp_luma_vdev *luma_vdev)
+{
+	q->type = V4L2_BUF_TYPE_META_CAPTURE;
+	q->io_modes = VB2_MMAP | VB2_USERPTR;
+	q->drv_priv = luma_vdev;
+	q->ops = &rkisp_luma_vb2_ops;
+	q->mem_ops = &vb2_vmalloc_memops;
+	q->buf_struct_size = sizeof(struct rkisp_buffer);
+	q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
+	q->lock = &luma_vdev->dev->iqlock;
+	q->dev = luma_vdev->dev->dev;
+
+	return vb2_queue_init(q);
+}
+
+static void
+rkisp_stats_send_luma(struct rkisp_luma_vdev *vdev,
+		      struct rkisp_luma_readout_work *work)
+{
+	unsigned int cur_frame_id;
+	struct rkisp_isp2x_luma_buffer *cur_stat_buf;
+	struct rkisp_buffer *cur_buf = NULL;
+	u32 i, j;
+
+	spin_lock(&vdev->rd_lock);
+	/* get one empty buffer */
+	if (!list_empty(&vdev->stat)) {
+		cur_buf = list_first_entry(&vdev->stat,
+					   struct rkisp_buffer, queue);
+		list_del(&cur_buf->queue);
+	}
+	spin_unlock(&vdev->rd_lock);
+
+	if (!cur_buf) {
+		v4l2_warn(vdev->vnode.vdev.v4l2_dev,
+			  "no luma buffer available\n");
+		return;
+	}
+
+	cur_stat_buf =
+		(struct rkisp_isp2x_luma_buffer *)(cur_buf->vaddr[0]);
+	if (!cur_stat_buf) {
+		v4l2_err(vdev->vnode.vdev.v4l2_dev,
+			 "cur_stat_buf is NULL\n");
+		return;
+	}
+
+	cur_stat_buf->frame_id = work->frame_id;
+	cur_stat_buf->meas_type = work->meas_type;
+	for (i = 0; i < ISP2X_MIPI_RAW_MAX; i++) {
+		for (j = 0; j < ISP2X_MIPI_LUMA_MEAN_MAX; j++) {
+			cur_stat_buf->luma[i].exp_mean[j] =
+				work->luma[i].exp_mean[j];
+		}
+	}
+
+	cur_frame_id = cur_stat_buf->frame_id;
+	vb2_set_plane_payload(&cur_buf->vb.vb2_buf, 0,
+			      sizeof(struct rkisp_isp2x_luma_buffer));
+	cur_buf->vb.sequence = cur_frame_id;
+	cur_buf->vb.vb2_buf.timestamp = work->timestamp;
+	vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
+}
+
+static void rkisp_luma_readout_task(unsigned long data)
+{
+	unsigned int out = 0;
+	struct rkisp_luma_readout_work work;
+	struct rkisp_luma_vdev *vdev =
+		(struct rkisp_luma_vdev *)data;
+
+	while (!kfifo_is_empty(&vdev->rd_kfifo)) {
+		out = kfifo_out(&vdev->rd_kfifo,
+				&work, sizeof(work));
+		if (!out)
+			break;
+
+		if (work.readout == RKISP_ISP_READOUT_LUMA)
+			rkisp_stats_send_luma(vdev, &work);
+	}
+}
+
+void rkisp_luma_isr(struct rkisp_luma_vdev *luma_vdev, u32 isp_stat)
+{
+	void __iomem *base = luma_vdev->dev->base_addr;
+	u8 op_mode = luma_vdev->dev->hdr.op_mode;
+	struct rkisp_luma_readout_work work;
+	unsigned int cur_frame_id =
+		atomic_read(&luma_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	enum rkisp_luma_frm_mode frm_mode;
+	bool send_task;
+	u32 i;
+
+	spin_lock(&luma_vdev->irq_lock);
+	if (!luma_vdev->streamon)
+		goto unlock;
+
+	switch (op_mode) {
+	case HDR_DBG_FRAME2:
+	case HDR_FRAMEX2_DDR:
+	case HDR_LINEX2_DDR:
+	case HDR_LINEX2_NO_DDR:
+		frm_mode = RKISP_LUMA_TWOFRM;
+		break;
+	case HDR_DBG_FRAME3:
+	case HDR_FRAMEX3_DDR:
+	case HDR_LINEX3_DDR:
+	case HDR_LINEX3_NO_DDR:
+		frm_mode = RKISP_LUMA_THREEFRM;
+		break;
+	default:
+		frm_mode = RKISP_LUMA_ONEFRM;
+		break;
+	}
+
+	if (isp_stat & RAW0_Y_STATE)
+		luma_vdev->ystat_isrcnt[0]++;
+
+	if (isp_stat & RAW1_Y_STATE)
+		luma_vdev->ystat_isrcnt[1]++;
+
+	if (isp_stat & RAW2_Y_STATE)
+		luma_vdev->ystat_isrcnt[2]++;
+
+	if (isp_stat & RAW0_WR_FRAME) {
+		if (luma_vdev->ystat_isrcnt[0] != RKISP_LUMA_YSTAT_ISR_NUM) {
+			v4l2_warn(luma_vdev->vnode.vdev.v4l2_dev,
+				 "missing raw0 y state isr, %d\n",
+				 luma_vdev->ystat_isrcnt[0]);
+			luma_vdev->ystat_isrcnt[0] = RKISP_LUMA_YSTAT_ISR_NUM;
+		}
+	}
+
+	if (isp_stat & RAW1_WR_FRAME) {
+		if (luma_vdev->ystat_isrcnt[1] != RKISP_LUMA_YSTAT_ISR_NUM) {
+			v4l2_warn(luma_vdev->vnode.vdev.v4l2_dev,
+				 "missing raw1 y state isr, %d\n",
+				 luma_vdev->ystat_isrcnt[1]);
+			luma_vdev->ystat_isrcnt[1] = RKISP_LUMA_YSTAT_ISR_NUM;
+		}
+	}
+
+	if (isp_stat & RAW2_WR_FRAME) {
+		if (luma_vdev->ystat_isrcnt[2] != RKISP_LUMA_YSTAT_ISR_NUM) {
+			v4l2_warn(luma_vdev->vnode.vdev.v4l2_dev,
+				 "missing raw2 y state isr, %d\n",
+				 luma_vdev->ystat_isrcnt[2]);
+			luma_vdev->ystat_isrcnt[2] = RKISP_LUMA_YSTAT_ISR_NUM;
+		}
+	}
+
+	send_task = false;
+	if (frm_mode == RKISP_LUMA_THREEFRM) {
+		if (luma_vdev->ystat_isrcnt[0] == RKISP_LUMA_YSTAT_ISR_NUM &&
+		    luma_vdev->ystat_isrcnt[1] == RKISP_LUMA_YSTAT_ISR_NUM &&
+		    luma_vdev->ystat_isrcnt[2] == RKISP_LUMA_YSTAT_ISR_NUM)
+			send_task = true;
+	} else if (frm_mode == RKISP_LUMA_TWOFRM) {
+		if (luma_vdev->ystat_isrcnt[0] == RKISP_LUMA_YSTAT_ISR_NUM &&
+		    luma_vdev->ystat_isrcnt[1] == RKISP_LUMA_YSTAT_ISR_NUM)
+			send_task = true;
+	} else if (frm_mode == RKISP_LUMA_ONEFRM) {
+		if (luma_vdev->ystat_isrcnt[0] == RKISP_LUMA_YSTAT_ISR_NUM)
+			send_task = true;
+	}
+
+	if (send_task) {
+		memset(&work, 0, sizeof(work));
+		work.readout = RKISP_ISP_READOUT_LUMA;
+		work.timestamp = ktime_get_ns();
+		work.frame_id = cur_frame_id;
+
+		if (luma_vdev->ystat_isrcnt[0] == RKISP_LUMA_YSTAT_ISR_NUM) {
+			work.meas_type |= ISP2X_RAW0_Y_STATE;
+			for (i = 0; i < ISP2X_MIPI_LUMA_MEAN_MAX; i++)
+				work.luma[0].exp_mean[i] =
+					readl(base + CSI2RX_Y_STAT_RO);
+		}
+
+		if (luma_vdev->ystat_isrcnt[1] == RKISP_LUMA_YSTAT_ISR_NUM) {
+			work.meas_type |= ISP2X_RAW1_Y_STATE;
+			for (i = 0; i < ISP2X_MIPI_LUMA_MEAN_MAX; i++)
+				work.luma[1].exp_mean[i] =
+					readl(base + CSI2RX_Y_STAT_RO);
+		}
+
+		if (luma_vdev->ystat_isrcnt[2] == RKISP_LUMA_YSTAT_ISR_NUM) {
+			work.meas_type |= ISP2X_RAW2_Y_STATE;
+			for (i = 0; i < ISP2X_MIPI_LUMA_MEAN_MAX; i++)
+				work.luma[2].exp_mean[i] =
+					readl(base + CSI2RX_Y_STAT_RO);
+		}
+
+		if (!kfifo_is_full(&luma_vdev->rd_kfifo))
+			kfifo_in(&luma_vdev->rd_kfifo,
+				 &work, sizeof(work));
+		else
+			v4l2_err(luma_vdev->vnode.vdev.v4l2_dev,
+				 "stats kfifo is full\n");
+
+		tasklet_schedule(&luma_vdev->rd_tasklet);
+
+		for (i = 0; i < ISP2X_MIPI_RAW_MAX; i++)
+			luma_vdev->ystat_isrcnt[i] = 0;
+	}
+
+unlock:
+	spin_unlock(&luma_vdev->irq_lock);
+}
+
+static void rkisp_init_luma_vdev(struct rkisp_luma_vdev *luma_vdev)
+{
+	luma_vdev->vdev_fmt.fmt.meta.dataformat =
+		V4L2_META_FMT_RK_ISP1_STAT_3A;
+	luma_vdev->vdev_fmt.fmt.meta.buffersize =
+		sizeof(struct rkisp_isp2x_luma_buffer);
+}
+
+int rkisp_register_luma_vdev(struct rkisp_luma_vdev *luma_vdev,
+			     struct v4l2_device *v4l2_dev,
+			     struct rkisp_device *dev)
+{
+	int ret;
+	struct rkisp_vdev_node *node = &luma_vdev->vnode;
+	struct video_device *vdev = &node->vdev;
+	struct media_entity *source, *sink;
+
+	luma_vdev->dev = dev;
+	INIT_LIST_HEAD(&luma_vdev->stat);
+	spin_lock_init(&luma_vdev->irq_lock);
+	spin_lock_init(&luma_vdev->rd_lock);
+
+	strlcpy(vdev->name, "rkisp-mipi-luma", sizeof(vdev->name));
+
+	video_set_drvdata(vdev, luma_vdev);
+	vdev->ioctl_ops = &rkisp_luma_ioctl;
+	vdev->fops = &rkisp_luma_fops;
+	vdev->release = video_device_release_empty;
+	vdev->lock = &dev->iqlock;
+	vdev->v4l2_dev = v4l2_dev;
+	vdev->queue = &node->buf_queue;
+	vdev->device_caps = V4L2_CAP_META_CAPTURE | V4L2_CAP_STREAMING;
+	vdev->vfl_dir =  VFL_DIR_RX;
+	rkisp_luma_init_vb2_queue(vdev->queue, luma_vdev);
+	rkisp_init_luma_vdev(luma_vdev);
+	video_set_drvdata(vdev, luma_vdev);
+
+	node->pad.flags = MEDIA_PAD_FL_SINK;
+	ret = media_entity_pads_init(&vdev->entity, 1, &node->pad);
+	if (ret < 0)
+		goto err_release_queue;
+
+	ret = video_register_device(vdev, VFL_TYPE_GRABBER, -1);
+	if (ret < 0) {
+		dev_err(&vdev->dev,
+			"could not register Video for Linux device\n");
+		goto err_cleanup_media_entity;
+	}
+
+	source = &dev->isp_sdev.sd.entity;
+	sink = &luma_vdev->vnode.vdev.entity;
+	ret = media_create_pad_link(source, RKISP_ISP_PAD_SOURCE_STATS,
+		sink, 0, MEDIA_LNK_FL_ENABLED);
+	if (ret < 0)
+		goto err_unregister_video;
+
+	ret = kfifo_alloc(&luma_vdev->rd_kfifo,
+			  RKISP_LUMA_READOUT_WORK_SIZE,
+			  GFP_KERNEL);
+	if (ret) {
+		dev_err(&vdev->dev,
+			"kfifo_alloc failed with error %d\n",
+			ret);
+		goto err_unregister_video;
+	}
+
+	tasklet_init(&luma_vdev->rd_tasklet,
+		     rkisp_luma_readout_task,
+		     (unsigned long)luma_vdev);
+	tasklet_disable(&luma_vdev->rd_tasklet);
+
+	return 0;
+
+err_unregister_video:
+	video_unregister_device(vdev);
+err_cleanup_media_entity:
+	media_entity_cleanup(&vdev->entity);
+err_release_queue:
+	vb2_queue_release(vdev->queue);
+	return ret;
+}
+
+void rkisp_unregister_luma_vdev(struct rkisp_luma_vdev *luma_vdev)
+{
+	struct rkisp_vdev_node *node = &luma_vdev->vnode;
+	struct video_device *vdev = &node->vdev;
+
+	kfifo_free(&luma_vdev->rd_kfifo);
+	tasklet_kill(&luma_vdev->rd_tasklet);
+	video_unregister_device(vdev);
+	media_entity_cleanup(&vdev->entity);
+	vb2_queue_release(vdev->queue);
+}
+
diff --git a/drivers/media/platform/rockchip/isp/isp_mipi_luma.h b/drivers/media/platform/rockchip/isp/isp_mipi_luma.h
new file mode 100644
index 000000000000..eac2d0a31556
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_mipi_luma.h
@@ -0,0 +1,67 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#ifndef _RKISP_ISP_LUMA_H
+#define _RKISP_ISP_LUMA_H
+
+#include <linux/rkisp1-config.h>
+#include <linux/interrupt.h>
+#include <linux/kfifo.h>
+#include "common.h"
+
+#define RKISP_LUMA_READOUT_WORK_SIZE	\
+	(9 * sizeof(struct rkisp_luma_readout_work))
+#define RKISP_LUMA_YSTAT_ISR_NUM	4
+
+struct rkisp_luma_vdev;
+
+enum rkisp_luma_readout_cmd {
+	RKISP_ISP_READOUT_LUMA,
+};
+
+enum rkisp_luma_frm_mode {
+	RKISP_LUMA_ONEFRM,
+	RKISP_LUMA_TWOFRM,
+	RKISP_LUMA_THREEFRM,
+};
+
+struct rkisp_luma_readout_work {
+	enum rkisp_luma_readout_cmd readout;
+	unsigned long long timestamp;
+	unsigned int meas_type;
+	unsigned int frame_id;
+	struct rkisp_mipi_luma luma[ISP2X_MIPI_RAW_MAX];
+};
+
+/*
+ * struct rkisp_isp_luma_vdev - ISP Statistics device
+ *
+ * @irq_lock: buffer queue lock
+ * @stat: stats buffer list
+ * @readout_wq: workqueue for statistics information read
+ */
+struct rkisp_luma_vdev {
+	struct rkisp_vdev_node vnode;
+	struct rkisp_device *dev;
+
+	spinlock_t irq_lock;	/* tasklet queue lock */
+	struct list_head stat;
+	struct v4l2_format vdev_fmt;
+	bool streamon;
+
+	spinlock_t rd_lock;	/* buffer queue lock */
+	struct kfifo rd_kfifo;
+	struct tasklet_struct rd_tasklet;
+
+	unsigned int ystat_isrcnt[ISP2X_MIPI_RAW_MAX];
+};
+
+void rkisp_luma_isr(struct rkisp_luma_vdev *luma_vdev, u32 isp_stat);
+
+int rkisp_register_luma_vdev(struct rkisp_luma_vdev *luma_vdev,
+			     struct v4l2_device *v4l2_dev,
+			     struct rkisp_device *dev);
+
+void rkisp_unregister_luma_vdev(struct rkisp_luma_vdev *luma_vdev);
+
+#endif /* _RKISP_ISP_LUMA_H */
diff --git a/drivers/media/platform/rockchip/isp/rkisp.c b/drivers/media/platform/rockchip/isp/rkisp.c
index 974605cbf2bc..a90bd9f471bd 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.c
+++ b/drivers/media/platform/rockchip/isp/rkisp.c
@@ -1602,13 +1602,14 @@ static long rkisp_compat_ioctl32(struct v4l2_subdev *sd,
 	long ret = 0;
 
 	switch (cmd) {
-	case RKISP_CMD_TRIGGER_READ_BACK:
+	case RKISP_CMD_TRIGGER_READ_BACK: {
 		int mode;
 
 		ret = copy_from_user(&mode, up, sizeof(int));
 		if (!ret)
 			ret = rkisp_ioctl(sd, cmd, &mode);
 		break;
+	}
 	default:
 		ret = -ENOIOCTLCMD;
 	}
diff --git a/include/uapi/linux/rkisp2-config.h b/include/uapi/linux/rkisp2-config.h
index 558fb8a1d8f0..9c3581f2507e 100644
--- a/include/uapi/linux/rkisp2-config.h
+++ b/include/uapi/linux/rkisp2-config.h
@@ -118,6 +118,12 @@
 
 #define ISP2X_GAMMA_OUT_MAX_SAMPLES	17
 
+#define ISP2X_MIPI_LUMA_MEAN_MAX	16
+#define ISP2X_MIPI_RAW_MAX		3
+#define ISP2X_RAW0_Y_STATE		(1 << 0)
+#define ISP2X_RAW1_Y_STATE		(1 << 1)
+#define ISP2X_RAW2_Y_STATE		(1 << 2)
+
 struct isp2x_window {
 	u16 h_offs;
 	u16 v_offs;
@@ -1476,4 +1482,28 @@ struct rkisp_isp2x_stat_buffer {
 	struct isp2x_stat params;
 } __attribute__ ((packed));
 
+/**
+ * struct rkisp_mipi_luma - statistics mipi y statistic
+ *
+ * @exp_mean: Mean luminance value of block xx
+ *
+ * Image is divided into 5x5 blocks.
+ */
+struct rkisp_mipi_luma {
+	unsigned int exp_mean[ISP2X_MIPI_LUMA_MEAN_MAX];
+} __attribute__ ((packed));
+
+/**
+ * struct rkisp_isp2x_luma_buffer - Rockchip ISP1 Statistics Mipi Luma
+ *
+ * @meas_type: measurement types (CIFISP_STAT_ definitions)
+ * @frame_id: frame ID for sync
+ * @params: statistics data
+ */
+struct rkisp_isp2x_luma_buffer {
+	unsigned int meas_type;
+	unsigned int frame_id;
+	struct rkisp_mipi_luma luma[ISP2X_MIPI_RAW_MAX];
+} __attribute__ ((packed));
+
 #endif /* _UAPI_RKISP2_CONFIG_H */
-- 
2.35.3

