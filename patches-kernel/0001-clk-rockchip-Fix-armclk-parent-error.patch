From e0b38fccd1fc5a81c57deb26a865d50f1b476e61 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Thu, 8 Mar 2018 16:28:11 +0800
Subject: [PATCH] clk: rockchip: Fix armclk parent error

There are two clocks between armclk and pll_apll on px30,
but there may be only one clock on some Socs, so it will
get a error pll clock.

Change-Id: I34116a1ec824b884d3745082f3546cd9ab4c0d21
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/clk/rockchip/clk-cpu.c  | 29 ++++++++++++++++++-----------
 drivers/clk/rockchip/clk-pll.c  | 12 ++++++++++--
 drivers/clk/rockchip/clk-px30.c |  1 +
 drivers/clk/rockchip/clk.h      |  1 +
 4 files changed, 30 insertions(+), 13 deletions(-)

diff --git a/drivers/clk/rockchip/clk-cpu.c b/drivers/clk/rockchip/clk-cpu.c
index 675f10cc0ed4..7b623ddb3086 100644
--- a/drivers/clk/rockchip/clk-cpu.c
+++ b/drivers/clk/rockchip/clk-cpu.c
@@ -54,6 +54,7 @@
  */
 struct rockchip_cpuclk {
 	struct clk_hw				hw;
+	struct clk_hw				*pll_hw;
 
 	struct clk_mux				cpu_mux;
 	const struct clk_ops			*cpu_mux_ops;
@@ -121,8 +122,7 @@ static void rockchip_cpuclk_set_dividers(struct rockchip_cpuclk *cpuclk,
 }
 
 static int rockchip_cpuclk_pre_rate_change(struct rockchip_cpuclk *cpuclk,
-					   struct clk_notifier_data *ndata,
-					   struct clk_hw *pphw)
+					   struct clk_notifier_data *ndata)
 {
 	const struct rockchip_cpuclk_reg_data *reg_data = cpuclk->reg_data;
 	const struct rockchip_cpuclk_rate_table *rate;
@@ -137,7 +137,7 @@ static int rockchip_cpuclk_pre_rate_change(struct rockchip_cpuclk *cpuclk,
 		return -EINVAL;
 	}
 
-	rockchip_boost_enable_recovery_sw_low(pphw);
+	rockchip_boost_enable_recovery_sw_low(cpuclk->pll_hw);
 
 	alt_prate = clk_get_rate(cpuclk->alt_parent);
 
@@ -178,8 +178,7 @@ static int rockchip_cpuclk_pre_rate_change(struct rockchip_cpuclk *cpuclk,
 }
 
 static int rockchip_cpuclk_post_rate_change(struct rockchip_cpuclk *cpuclk,
-					    struct clk_notifier_data *ndata,
-					    struct clk_hw *pphw)
+					    struct clk_notifier_data *ndata)
 {
 	const struct rockchip_cpuclk_reg_data *reg_data = cpuclk->reg_data;
 	const struct rockchip_cpuclk_rate_table *rate;
@@ -211,7 +210,7 @@ static int rockchip_cpuclk_post_rate_change(struct rockchip_cpuclk *cpuclk,
 	if (ndata->old_rate > ndata->new_rate)
 		rockchip_cpuclk_set_dividers(cpuclk, rate);
 
-	rockchip_boost_disable_recovery_sw(pphw);
+	rockchip_boost_disable_recovery_sw(cpuclk->pll_hw);
 
 	spin_unlock_irqrestore(cpuclk->lock, flags);
 	return 0;
@@ -228,16 +227,14 @@ static int rockchip_cpuclk_notifier_cb(struct notifier_block *nb,
 {
 	struct clk_notifier_data *ndata = data;
 	struct rockchip_cpuclk *cpuclk = to_rockchip_cpuclk_nb(nb);
-	struct clk_hw *phw = clk_hw_get_parent(__clk_get_hw(ndata->clk));
-	struct clk_hw *pphw = clk_hw_get_parent(phw);
 	int ret = 0;
 
 	pr_debug("%s: event %lu, old_rate %lu, new_rate: %lu\n",
 		 __func__, event, ndata->old_rate, ndata->new_rate);
 	if (event == PRE_RATE_CHANGE)
-		ret = rockchip_cpuclk_pre_rate_change(cpuclk, ndata, pphw);
+		ret = rockchip_cpuclk_pre_rate_change(cpuclk, ndata);
 	else if (event == POST_RATE_CHANGE)
-		ret = rockchip_cpuclk_post_rate_change(cpuclk, ndata, pphw);
+		ret = rockchip_cpuclk_post_rate_change(cpuclk, ndata);
 
 	return notifier_from_errno(ret);
 }
@@ -250,7 +247,7 @@ struct clk *rockchip_clk_register_cpuclk(const char *name,
 {
 	struct rockchip_cpuclk *cpuclk;
 	struct clk_init_data init;
-	struct clk *clk, *cclk;
+	struct clk *clk, *cclk, *pll_clk;
 	int ret;
 
 	if (num_parents < 2) {
@@ -280,6 +277,16 @@ struct clk *rockchip_clk_register_cpuclk(const char *name,
 	cpuclk->reg_data = reg_data;
 	cpuclk->clk_nb.notifier_call = rockchip_cpuclk_notifier_cb;
 	cpuclk->hw.init = &init;
+	if (reg_data->pll_name) {
+		pll_clk = __clk_lookup(reg_data->pll_name);
+		if (!pll_clk) {
+			pr_err("%s: could not lookup pll clock: (%s)\n",
+			       __func__, reg_data->pll_name);
+			ret = -EINVAL;
+			goto free_cpuclk;
+		}
+		cpuclk->pll_hw = __clk_get_hw(pll_clk);
+	}
 
 	cpuclk->alt_parent = __clk_lookup(parent_names[reg_data->mux_core_alt]);
 	if (!cpuclk->alt_parent) {
diff --git a/drivers/clk/rockchip/clk-pll.c b/drivers/clk/rockchip/clk-pll.c
index 6f94b9ecfbd3..56be4249d6c1 100644
--- a/drivers/clk/rockchip/clk-pll.c
+++ b/drivers/clk/rockchip/clk-pll.c
@@ -332,9 +332,13 @@ static int rockchip_pll_wait_lock(struct rockchip_clk_pll *pll)
 
 void rockchip_boost_enable_recovery_sw_low(struct clk_hw *hw)
 {
-	struct rockchip_clk_pll *pll = to_rockchip_clk_pll(hw);
+	struct rockchip_clk_pll *pll;
 	int ret;
 
+	if (!hw)
+		return;
+	pll = to_rockchip_clk_pll(hw);
+
 	if (pll->type == pll_px30) {
 		writel_relaxed(HIWORD_UPDATE(1, PX30_BOOST_RECOVERY_MASK,
 					     PX30_BOOST_RECOVERY_SHIFT),
@@ -363,7 +367,11 @@ void rockchip_boost_disable_low(struct rockchip_clk_pll *pll)
 
 void rockchip_boost_disable_recovery_sw(struct clk_hw *hw)
 {
-	struct rockchip_clk_pll *pll = to_rockchip_clk_pll(hw);
+	struct rockchip_clk_pll *pll;
+
+	if (!hw)
+		return;
+	pll = to_rockchip_clk_pll(hw);
 
 	if (pll->type == pll_px30) {
 		writel_relaxed(HIWORD_UPDATE(0, PX30_BOOST_RECOVERY_MASK,
diff --git a/drivers/clk/rockchip/clk-px30.c b/drivers/clk/rockchip/clk-px30.c
index 0b010d4609ed..698ccccbc607 100644
--- a/drivers/clk/rockchip/clk-px30.c
+++ b/drivers/clk/rockchip/clk-px30.c
@@ -139,6 +139,7 @@ static const struct rockchip_cpuclk_reg_data px30_cpuclk_data = {
 	.mux_core_main = 0,
 	.mux_core_shift = 7,
 	.mux_core_mask = 0x1,
+	.pll_name = "pll_apll",
 };
 
 PNAME(mux_pll_p)		= { "xin24m", "clk_rtc32k_pmu" };
diff --git a/drivers/clk/rockchip/clk.h b/drivers/clk/rockchip/clk.h
index 89b5da88ba2b..420b5f846e80 100644
--- a/drivers/clk/rockchip/clk.h
+++ b/drivers/clk/rockchip/clk.h
@@ -349,6 +349,7 @@ struct rockchip_cpuclk_reg_data {
 	u8		mux_core_main;
 	u8		mux_core_shift;
 	u32		mux_core_mask;
+	const char	*pll_name;
 };
 
 struct clk *rockchip_clk_register_cpuclk(const char *name,
-- 
2.35.3

