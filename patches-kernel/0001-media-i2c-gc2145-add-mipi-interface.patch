From ac0c5d3dc340cfea30f02dac464867cbdf67b991 Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Wed, 9 Jan 2019 15:56:56 +0800
Subject: [PATCH] media: i2c: gc2145 add mipi interface

Change-Id: Ie7ee430c6d34b935f1e9e270d50b2a42b726ef1a
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/i2c/gc2145.c | 1295 +++++++++++++++++++++++++++++-------
 1 file changed, 1061 insertions(+), 234 deletions(-)

diff --git a/drivers/media/i2c/gc2145.c b/drivers/media/i2c/gc2145.c
index 612eaf603a9e..4948fcbe9292 100644
--- a/drivers/media/i2c/gc2145.c
+++ b/drivers/media/i2c/gc2145.c
@@ -55,8 +55,6 @@
 /*
  * GC2145 register definitions
  */
-#define REG_SOFTWARE_STANDBY		0xf2
-
 #define REG_SC_CHIP_ID_H		0xf0
 #define REG_SC_CHIP_ID_L		0xf1
 
@@ -111,16 +109,910 @@ struct gc2145 {
 	unsigned int xvclk_frequency;
 	struct clk *xvclk;
 	struct gpio_desc *pwdn_gpio;
+	struct gpio_desc *reset_gpio;
 	struct regulator_bulk_data supplies[GC2145_NUM_SUPPLIES];
 	struct mutex lock;
 	struct i2c_client *client;
 	struct v4l2_ctrl_handler ctrls;
 	struct v4l2_ctrl *link_frequency;
+	struct v4l2_fwnode_endpoint bus_cfg;
 	const struct gc2145_framesize *frame_size;
+	const struct gc2145_framesize *framesize_cfg;
+	unsigned int cfg_num;
 	int streaming;
 };
 
-static const struct sensor_register gc2145_init_regs[] = {
+static const struct sensor_register gc2145_dvp_init_regs[] = {
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfc, 0x06},
+	{0xf6, 0x00},
+	{0xf7, 0x1d},
+	{0xf8, 0x84},
+	{0xfa, 0x00},
+	{0xf9, 0xfe},
+	{0xf2, 0x00},
+	/*ISP reg*/
+	{0xfe, 0x00},
+	{0x03, 0x04},
+	{0x04, 0xe2},
+	{0x09, 0x00},
+	{0x0a, 0x00},
+	{0x0b, 0x00},
+	{0x0c, 0x00},
+	{0x0d, 0x04},
+	{0x0e, 0xc0},
+	{0x0f, 0x06},
+	{0x10, 0x52},
+	{0x12, 0x2e},
+	{0x17, 0x14},
+	{0x18, 0x22},
+	{0x19, 0x0e},
+	{0x1a, 0x01},
+	{0x1b, 0x4b},
+	{0x1c, 0x07},
+	{0x1d, 0x10},
+	{0x1e, 0x88},
+	{0x1f, 0x78},
+	{0x20, 0x03},
+	{0x21, 0x40},
+	{0x22, 0xa0},
+	{0x24, 0x16},
+	{0x25, 0x01},
+	{0x26, 0x10},
+	{0x2d, 0x60},
+	{0x30, 0x01},
+	{0x31, 0x90},
+	{0x33, 0x06},
+	{0x34, 0x01},
+	{0xfe, 0x00},
+	{0x80, 0x7f},
+	{0x81, 0x26},
+	{0x82, 0xfa},
+	{0x83, 0x00},
+	{0x84, 0x00},
+	{0x86, 0x02},
+	{0x88, 0x03},
+	{0x89, 0x03},
+	{0x85, 0x08},
+	{0x8a, 0x00},
+	{0x8b, 0x00},
+	{0xb0, 0x55},
+	{0xc3, 0x00},
+	{0xc4, 0x80},
+	{0xc5, 0x90},
+	{0xc6, 0x3b},
+	{0xc7, 0x46},
+	{0xec, 0x06},
+	{0xed, 0x04},
+	{0xee, 0x60},
+	{0xef, 0x90},
+	{0xb6, 0x01},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x04},
+	{0x96, 0xb0},
+	{0x97, 0x06},
+	{0x98, 0x40},
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x40, 0x42},
+	{0x41, 0x00},
+	{0x43, 0x5b},
+	{0x5e, 0x00},
+	{0x5f, 0x00},
+	{0x60, 0x00},
+	{0x61, 0x00},
+	{0x62, 0x00},
+	{0x63, 0x00},
+	{0x64, 0x00},
+	{0x65, 0x00},
+	{0x66, 0x20},
+	{0x67, 0x20},
+	{0x68, 0x20},
+	{0x69, 0x20},
+	{0x76, 0x00},
+	{0x6a, 0x08},
+	{0x6b, 0x08},
+	{0x6c, 0x08},
+	{0x6d, 0x08},
+	{0x6e, 0x08},
+	{0x6f, 0x08},
+	{0x70, 0x08},
+	{0x71, 0x08},
+	{0x76, 0x00},
+	{0x72, 0xf0},
+	{0x7e, 0x3c},
+	{0x7f, 0x00},
+	{0xfe, 0x02},
+	{0x48, 0x15},
+	{0x49, 0x00},
+	{0x4b, 0x0b},
+	{0xfe, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0xc0},
+	{0x03, 0x04},
+	{0x04, 0x90},
+	{0x05, 0x30},
+	{0x06, 0x90},
+	{0x07, 0x30},
+	{0x08, 0x80},
+	{0x09, 0x00},
+	{0x0a, 0x82},
+	{0x0b, 0x11},
+	{0x0c, 0x10},
+	{0x11, 0x10},
+	{0x13, 0x7b},
+	{0x17, 0x00},
+	{0x1c, 0x11},
+	{0x1e, 0x61},
+	{0x1f, 0x35},
+	{0x20, 0x40},
+	{0x22, 0x40},
+	{0x23, 0x20},
+	{0xfe, 0x02},
+	{0x0f, 0x04},
+	{0xfe, 0x01},
+	{0x12, 0x35},
+	{0x15, 0xb0},
+	{0x10, 0x31},
+	{0x3e, 0x28},
+	{0x3f, 0xb0},
+	{0x40, 0x90},
+	{0x41, 0x0f},
+
+	/*INTPEE*/
+	{0xfe, 0x02},
+	{0x90, 0x6c},
+	{0x91, 0x03},
+	{0x92, 0xcb},
+	{0x94, 0x33},
+	{0x95, 0x84},
+	{0x97, 0x45},
+	{0xa2, 0x11},
+	{0xfe, 0x00},
+	/*DNDD*/
+	{0xfe, 0x02},
+	{0x80, 0xc1},
+	{0x81, 0x08},
+	{0x82, 0x1f},
+	{0x83, 0x10},
+	{0x84, 0x0a},
+	{0x86, 0xf0},
+	{0x87, 0x50},
+	{0x88, 0x15},
+	{0x89, 0xb0},
+	{0x8a, 0x30},
+	{0x8b, 0x10},
+	/*ASDE*/
+	{0xfe, 0x01},
+	{0x21, 0x04},
+	{0xfe, 0x02},
+	{0xa3, 0x50},
+	{0xa4, 0x20},
+	{0xa5, 0x40},
+	{0xa6, 0x80},
+	{0xab, 0x40},
+	{0xae, 0x0c},
+	{0xb3, 0x46},
+	{0xb4, 0x64},
+	{0xb6, 0x38},
+	{0xb7, 0x01},
+	{0xb9, 0x2b},
+	{0x3c, 0x04},
+	{0x3d, 0x15},
+	{0x4b, 0x06},
+	{0x4c, 0x20},
+	{0xfe, 0x00},
+	/*GAMMA*/
+	/*gamma1*/
+#if 1
+	{0xfe, 0x02},
+	{0x10, 0x09},
+	{0x11, 0x0d},
+	{0x12, 0x13},
+	{0x13, 0x19},
+	{0x14, 0x27},
+	{0x15, 0x37},
+	{0x16, 0x45},
+	{0x17, 0x53},
+	{0x18, 0x69},
+	{0x19, 0x7d},
+	{0x1a, 0x8f},
+	{0x1b, 0x9d},
+	{0x1c, 0xa9},
+	{0x1d, 0xbd},
+	{0x1e, 0xcd},
+	{0x1f, 0xd9},
+	{0x20, 0xe3},
+	{0x21, 0xea},
+	{0x22, 0xef},
+	{0x23, 0xf5},
+	{0x24, 0xf9},
+	{0x25, 0xff},
+#else
+	{0xfe, 0x02},
+	{0x10, 0x0a},
+	{0x11, 0x12},
+	{0x12, 0x19},
+	{0x13, 0x1f},
+	{0x14, 0x2c},
+	{0x15, 0x38},
+	{0x16, 0x42},
+	{0x17, 0x4e},
+	{0x18, 0x63},
+	{0x19, 0x76},
+	{0x1a, 0x87},
+	{0x1b, 0x96},
+	{0x1c, 0xa2},
+	{0x1d, 0xb8},
+	{0x1e, 0xcb},
+	{0x1f, 0xd8},
+	{0x20, 0xe2},
+	{0x21, 0xe9},
+	{0x22, 0xf0},
+	{0x23, 0xf8},
+	{0x24, 0xfd},
+	{0x25, 0xff},
+	{0xfe, 0x00},
+#endif
+	{0xfe, 0x00},
+	{0xc6, 0x20},
+	{0xc7, 0x2b},
+	/*gamma2*/
+#if 1
+	{0xfe, 0x02},
+	{0x26, 0x0f},
+	{0x27, 0x14},
+	{0x28, 0x19},
+	{0x29, 0x1e},
+	{0x2a, 0x27},
+	{0x2b, 0x33},
+	{0x2c, 0x3b},
+	{0x2d, 0x45},
+	{0x2e, 0x59},
+	{0x2f, 0x69},
+	{0x30, 0x7c},
+	{0x31, 0x89},
+	{0x32, 0x98},
+	{0x33, 0xae},
+	{0x34, 0xc0},
+	{0x35, 0xcf},
+	{0x36, 0xda},
+	{0x37, 0xe2},
+	{0x38, 0xe9},
+	{0x39, 0xf3},
+	{0x3a, 0xf9},
+	{0x3b, 0xff},
+#else
+	/*Gamma outdoor*/
+	{0xfe, 0x02},
+	{0x26, 0x17},
+	{0x27, 0x18},
+	{0x28, 0x1c},
+	{0x29, 0x20},
+	{0x2a, 0x28},
+	{0x2b, 0x34},
+	{0x2c, 0x40},
+	{0x2d, 0x49},
+	{0x2e, 0x5b},
+	{0x2f, 0x6d},
+	{0x30, 0x7d},
+	{0x31, 0x89},
+	{0x32, 0x97},
+	{0x33, 0xac},
+	{0x34, 0xc0},
+	{0x35, 0xcf},
+	{0x36, 0xda},
+	{0x37, 0xe5},
+	{0x38, 0xec},
+	{0x39, 0xf8},
+	{0x3a, 0xfd},
+	{0x3b, 0xff},
+#endif
+	/*YCP*/
+	{0xfe, 0x02},
+	{0xd1, 0x40},
+	{0xd2, 0x40},
+	{0xd3, 0x48},
+	{0xd6, 0xf0},
+	{0xd7, 0x10},
+	{0xd8, 0xda},
+	{0xdd, 0x14},
+	{0xde, 0x86},
+	{0xed, 0x80},
+	{0xee, 0x00},
+	{0xef, 0x3f},
+	{0xd8, 0xd8},
+	/*abs*/
+	{0xfe, 0x01},
+	{0x9f, 0x40},
+	/*LSC*/
+	{0xfe, 0x01},
+	{0xc2, 0x14},
+	{0xc3, 0x0d},
+	{0xc4, 0x0c},
+	{0xc8, 0x15},
+	{0xc9, 0x0d},
+	{0xca, 0x0a},
+	{0xbc, 0x24},
+	{0xbd, 0x10},
+	{0xbe, 0x0b},
+	{0xb6, 0x25},
+	{0xb7, 0x16},
+	{0xb8, 0x15},
+	{0xc5, 0x00},
+	{0xc6, 0x00},
+	{0xc7, 0x00},
+	{0xcb, 0x00},
+	{0xcc, 0x00},
+	{0xcd, 0x00},
+	{0xbf, 0x07},
+	{0xc0, 0x00},
+	{0xc1, 0x00},
+	{0xb9, 0x00},
+	{0xba, 0x00},
+	{0xbb, 0x00},
+	{0xaa, 0x01},
+	{0xab, 0x01},
+	{0xac, 0x00},
+	{0xad, 0x05},
+	{0xae, 0x06},
+	{0xaf, 0x0e},
+	{0xb0, 0x0b},
+	{0xb1, 0x07},
+	{0xb2, 0x06},
+	{0xb3, 0x17},
+	{0xb4, 0x0e},
+	{0xb5, 0x0e},
+	{0xd0, 0x09},
+	{0xd1, 0x00},
+	{0xd2, 0x00},
+	{0xd6, 0x08},
+	{0xd7, 0x00},
+	{0xd8, 0x00},
+	{0xd9, 0x00},
+	{0xda, 0x00},
+	{0xdb, 0x00},
+	{0xd3, 0x0a},
+	{0xd4, 0x00},
+	{0xd5, 0x00},
+	{0xa4, 0x00},
+	{0xa5, 0x00},
+	{0xa6, 0x77},
+	{0xa7, 0x77},
+	{0xa8, 0x77},
+	{0xa9, 0x77},
+	{0xa1, 0x80},
+	{0xa2, 0x80},
+
+	{0xfe, 0x01},
+	{0xdf, 0x0d},
+	{0xdc, 0x25},
+	{0xdd, 0x30},
+	{0xe0, 0x77},
+	{0xe1, 0x80},
+	{0xe2, 0x77},
+	{0xe3, 0x90},
+	{0xe6, 0x90},
+	{0xe7, 0xa0},
+	{0xe8, 0x90},
+	{0xe9, 0xa0},
+	{0xfe, 0x00},
+	/*AWB*/
+	{0xfe, 0x01},
+	{0x4f, 0x00},
+	{0x4f, 0x00},
+	{0x4b, 0x01},
+	{0x4f, 0x00},
+
+	{0x4c, 0x01},
+	{0x4d, 0x71},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x91},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x70},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x90},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xb0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x8f},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x6f},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xaf},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xd0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xf0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xcf},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xef},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x6e},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8e},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xae},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xce},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xad},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcd},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xac},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcc},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcb},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xab},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8a},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xaa},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xca},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xca},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xc9},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0x8a},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0x89},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xa9},
+	{0x4e, 0x04},
+	{0x4c, 0x02},
+	{0x4d, 0x0b},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x0a},
+	{0x4e, 0x05},
+	{0x4c, 0x01},
+	{0x4d, 0xeb},
+	{0x4e, 0x05},
+	{0x4c, 0x01},
+	{0x4d, 0xea},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x09},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x29},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x2a},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x4a},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x8a},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x49},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x69},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x89},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0xa9},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x48},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x68},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x69},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0xca},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc9},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe9},
+	{0x4e, 0x07},
+	{0x4c, 0x03},
+	{0x4d, 0x09},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc8},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe8},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xa7},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc7},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe7},
+	{0x4e, 0x07},
+	{0x4c, 0x03},
+	{0x4d, 0x07},
+	{0x4e, 0x07},
+
+	{0x4f, 0x01},
+	{0x50, 0x80},
+	{0x51, 0xa8},
+	{0x52, 0x47},
+	{0x53, 0x38},
+	{0x54, 0xc7},
+	{0x56, 0x0e},
+	{0x58, 0x08},
+	{0x5b, 0x00},
+	{0x5c, 0x74},
+	{0x5d, 0x8b},
+	{0x61, 0xdb},
+	{0x62, 0xb8},
+	{0x63, 0x86},
+	{0x64, 0xc0},
+	{0x65, 0x04},
+	{0x67, 0xa8},
+	{0x68, 0xb0},
+	{0x69, 0x00},
+	{0x6a, 0xa8},
+	{0x6b, 0xb0},
+	{0x6c, 0xaf},
+	{0x6d, 0x8b},
+	{0x6e, 0x50},
+	{0x6f, 0x18},
+	{0x73, 0xf0},
+	{0x70, 0x0d},
+	{0x71, 0x60},
+	{0x72, 0x80},
+	{0x74, 0x01},
+	{0x75, 0x01},
+	{0x7f, 0x0c},
+	{0x76, 0x70},
+	{0x77, 0x58},
+	{0x78, 0xa0},
+	{0x79, 0x5e},
+	{0x7a, 0x54},
+	{0x7b, 0x58},
+	{0xfe, 0x00},
+	/*CC*/
+	{0xfe, 0x02},
+	{0xc0, 0x01},
+	{0xc1, 0x44},
+	{0xc2, 0xfd},
+	{0xc3, 0x04},
+	{0xc4, 0xF0},
+	{0xc5, 0x48},
+	{0xc6, 0xfd},
+	{0xc7, 0x46},
+	{0xc8, 0xfd},
+	{0xc9, 0x02},
+	{0xca, 0xe0},
+	{0xcb, 0x45},
+	{0xcc, 0xec},
+	{0xcd, 0x48},
+	{0xce, 0xf0},
+	{0xcf, 0xf0},
+	{0xe3, 0x0c},
+	{0xe4, 0x4b},
+	{0xe5, 0xe0},
+	/*ABS*/
+	{0xfe, 0x01},
+	{0x9f, 0x40},
+	{0xfe, 0x00},
+	/*OUTPUT*/
+	{0xfe, 0x00},
+	{0xf2, 0x0f},
+	/*dark sun*/
+	{0xfe, 0x02},
+	{0x40, 0xbf},
+	{0x46, 0xcf},
+	{0xfe, 0x00},
+
+	/*frame rate 50Hz*/
+	{0xfe, 0x00},
+	{0x05, 0x01},
+	{0x06, 0x56},
+	{0x07, 0x00},
+	{0x08, 0x32},
+	{0xfe, 0x01},
+	{0x25, 0x00},
+	{0x26, 0xfa},
+
+	{0x27, 0x04},
+	{0x28, 0xe2},
+	{0x29, 0x04},
+	{0x2a, 0xe2},
+	{0x2b, 0x04},
+	{0x2c, 0xe2},
+	{0x2d, 0x04},
+	{0x2e, 0xe2},
+	{0xfe, 0x00},
+
+	{0xfe, 0x00},
+	{0xfd, 0x01},
+	{0xfa, 0x00},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x02},
+	{0x96, 0x58},
+	{0x97, 0x03},
+	{0x98, 0x20},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x02},
+	{0xed, 0x02},
+	{0xee, 0x30},
+	{0xef, 0x48},
+	{0xfe, 0x02},
+	{0x9d, 0x08},
+	{0xfe, 0x01},
+	{0x74, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0x60},
+	{0x03, 0x02},
+	{0x04, 0x48},
+	{0x05, 0x18},
+	{0x06, 0x50},
+	{0x07, 0x10},
+	{0x08, 0x38},
+	{0x0a, 0x80},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x03},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/* Senor full resolution setting */
+static const struct sensor_register gc2145_dvp_full[] = {
+	{0xfe, 0x00},
+	{0xfd, 0x00},
+	{0xfa, 0x00},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x04},
+	{0x96, 0xb0},
+	{0x97, 0x06},
+	{0x98, 0x40},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x06},
+	{0xed, 0x04},
+	{0xee, 0x60},
+	{0xef, 0x90},
+	{0xfe, 0x01},
+	{0x74, 0x01},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0xc0},
+	{0x03, 0x04},
+	{0x04, 0x90},
+	{0x05, 0x30},
+	{0x06, 0x90},
+	{0x07, 0x30},
+	{0x08, 0x80},
+	{0x0a, 0x82},
+	{0xfe, 0x01},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x15},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/* Preview resolution setting*/
+static const struct sensor_register gc2145_dvp_svga_30fps[] = {
+	{0xfe, 0x00},
+	{0x05, 0x02},
+	{0x06, 0x20},
+	{0x07, 0x00},
+	{0x08, 0xb8},
+	{0xfe, 0x01},
+	{0x25, 0x01},
+	{0x26, 0xac},
+	{0x27, 0x05},
+	{0x28, 0x04},
+	{0x29, 0x05},
+	{0x2a, 0x04},
+	{0x2b, 0x05},
+	{0x2c, 0x04},
+	{0x2d, 0x05},
+	{0x2e, 0x04},
+	{0x3c, 0x00},
+	{0xfe, 0x00},
+	{0xfe, 0x00},
+	{0xfa, 0x00},
+	{0x18, 0x42},
+	{0xfd, 0x03},
+	{0xb6, 0x01},
+	/* crop window */
+	{0xfe, 0x00},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	{0x9b, 0x00},
+	{0x9c, 0x00},
+	{0x9d, 0x00},
+	{0x9e, 0x00},
+	{0x9f, 0x00},
+	{0xa0, 0x00},
+	{0xa1, 0x00},
+	{0xa2, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x02},
+	{0x96, 0x58},
+	{0x97, 0x03},
+	{0x98, 0x20},
+	/* AWB */
+	{0xfe, 0x00},
+	{0xec, 0x01},
+	{0xed, 0x02},
+	{0xee, 0x30},
+	{0xef, 0x48},
+	{0xfe, 0x01},
+	{0x74, 0x00},
+	/* AEC */
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0x60},
+	{0x03, 0x02},
+	{0x04, 0x48},
+	{0x05, 0x18},
+	{0x06, 0x4c},
+	{0x07, 0x14},
+	{0x08, 0x36},
+	{0x0a, 0xc0},
+	{0x21, 0x14},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/* Preview resolution setting*/
+static const struct sensor_register gc2145_dvp_svga_20fps[] = {
+	{0xfe, 0x00},
+	{0x05, 0x02},
+	{0x06, 0x20},
+	{0x07, 0x03},
+	{0x08, 0x80},
+	{0xb6, 0x01},
+	{0xfd, 0x03},
+	{0xfa, 0x00},
+	{0x18, 0x42},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x02},
+	{0x96, 0x58},
+	{0x97, 0x03},
+	{0x98, 0x20},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x02},
+	{0xed, 0x02},
+	{0xee, 0x30},
+	{0xef, 0x48},
+	{0xfe, 0x02},
+	{0x9d, 0x08},
+	{0xfe, 0x01},
+	{0x74, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0x60},
+	{0x03, 0x02},
+	{0x04, 0x48},
+	{0x05, 0x18},
+	{0x06, 0x50},
+	{0x07, 0x10},
+	{0x08, 0x38},
+	{0x0a, 0x80},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x03},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+static const struct sensor_register gc2145_mipi_init_regs[] = {
 	{0xfe, 0xf0},
 	{0xfe, 0xf0},
 	{0xfe, 0xf0},
@@ -129,7 +1021,7 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0xf7, 0x1d},
 	{0xf8, 0x84},
 	{0xfa, 0x00},
-	{0xf9, 0xfe},
+	{0xf9, 0x8e},
 	{0xf2, 0x00},
 	/*ISP reg*/
 	{0xfe, 0x00},
@@ -264,7 +1156,6 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0x3f, 0xb0},
 	{0x40, 0x90},
 	{0x41, 0x0f},
-
 	/*INTPEE*/
 	{0xfe, 0x02},
 	{0x90, 0x6c},
@@ -272,15 +1163,15 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0x92, 0xcb},
 	{0x94, 0x33},
 	{0x95, 0x84},
-	{0x97, 0x45},
+	{0x97, 0x65},
 	{0xa2, 0x11},
 	{0xfe, 0x00},
 	/*DNDD*/
 	{0xfe, 0x02},
 	{0x80, 0xc1},
 	{0x81, 0x08},
-	{0x82, 0x1f},
-	{0x83, 0x10},
+	{0x82, 0x05},
+	{0x83, 0x08},
 	{0x84, 0x0a},
 	{0x86, 0xf0},
 	{0x87, 0x50},
@@ -310,7 +1201,6 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0xfe, 0x00},
 	/*GAMMA*/
 	/*gamma1*/
-#if 1
 	{0xfe, 0x02},
 	{0x10, 0x09},
 	{0x11, 0x0d},
@@ -334,37 +1224,10 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0x23, 0xf5},
 	{0x24, 0xf9},
 	{0x25, 0xff},
-#else
-	{0xfe, 0x02},
-	{0x10, 0x0a},
-	{0x11, 0x12},
-	{0x12, 0x19},
-	{0x13, 0x1f},
-	{0x14, 0x2c},
-	{0x15, 0x38},
-	{0x16, 0x42},
-	{0x17, 0x4e},
-	{0x18, 0x63},
-	{0x19, 0x76},
-	{0x1a, 0x87},
-	{0x1b, 0x96},
-	{0x1c, 0xa2},
-	{0x1d, 0xb8},
-	{0x1e, 0xcb},
-	{0x1f, 0xd8},
-	{0x20, 0xe2},
-	{0x21, 0xe9},
-	{0x22, 0xf0},
-	{0x23, 0xf8},
-	{0x24, 0xfd},
-	{0x25, 0xff},
-	{0xfe, 0x00},
-#endif
 	{0xfe, 0x00},
 	{0xc6, 0x20},
 	{0xc7, 0x2b},
 	/*gamma2*/
-#if 1
 	{0xfe, 0x02},
 	{0x26, 0x0f},
 	{0x27, 0x14},
@@ -388,37 +1251,11 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0x39, 0xf3},
 	{0x3a, 0xf9},
 	{0x3b, 0xff},
-#else
-	/*Gamma outdoor*/
-	{0xfe, 0x02},
-	{0x26, 0x17},
-	{0x27, 0x18},
-	{0x28, 0x1c},
-	{0x29, 0x20},
-	{0x2a, 0x28},
-	{0x2b, 0x34},
-	{0x2c, 0x40},
-	{0x2d, 0x49},
-	{0x2e, 0x5b},
-	{0x2f, 0x6d},
-	{0x30, 0x7d},
-	{0x31, 0x89},
-	{0x32, 0x97},
-	{0x33, 0xac},
-	{0x34, 0xc0},
-	{0x35, 0xcf},
-	{0x36, 0xda},
-	{0x37, 0xe5},
-	{0x38, 0xec},
-	{0x39, 0xf8},
-	{0x3a, 0xfd},
-	{0x3b, 0xff},
-#endif
 	/*YCP*/
 	{0xfe, 0x02},
-	{0xd1, 0x40},
-	{0xd2, 0x40},
-	{0xd3, 0x48},
+	{0xd1, 0x32},
+	{0xd2, 0x32},
+	{0xd3, 0x40},
 	{0xd6, 0xf0},
 	{0xd7, 0x10},
 	{0xd8, 0xda},
@@ -772,12 +1609,7 @@ static const struct sensor_register gc2145_init_regs[] = {
 	{0xfe, 0x00},
 	/*OUTPUT*/
 	{0xfe, 0x00},
-	{0xf2, 0x0f},
-	/*dark sun*/
-	{0xfe, 0x02},
-	{0x40, 0xbf},
-	{0x46, 0xcf},
-	{0xfe, 0x00},
+	{0xf2, 0x00},
 
 	/*frame rate 50Hz*/
 	{0xfe, 0x00},
@@ -791,63 +1623,49 @@ static const struct sensor_register gc2145_init_regs[] = {
 
 	{0x27, 0x04},
 	{0x28, 0xe2},
-	{0x29, 0x04},
-	{0x2a, 0xe2},
-	{0x2b, 0x04},
-	{0x2c, 0xe2},
-	{0x2d, 0x04},
-	{0x2e, 0xe2},
+	{0x29, 0x06},
+	{0x2a, 0xd6},
+	{0x2b, 0x07},
+	{0x2c, 0xd0},
+	{0x2d, 0x0b},
+	{0x2e, 0xb8},
 	{0xfe, 0x00},
 
-	{0xfe, 0x00},
-	{0xfd, 0x01},
-	{0xfa, 0x00},
-	/*crop window*/
-	{0xfe, 0x00},
-	{0x90, 0x01},
-	{0x91, 0x00},
-	{0x92, 0x00},
-	{0x93, 0x00},
-	{0x94, 0x00},
-	{0x95, 0x02},
-	{0x96, 0x58},
-	{0x97, 0x03},
-	{0x98, 0x20},
-	{0x99, 0x11},
-	{0x9a, 0x06},
-	/*AWB*/
-	{0xfe, 0x00},
-	{0xec, 0x02},
-	{0xed, 0x02},
-	{0xee, 0x30},
-	{0xef, 0x48},
 	{0xfe, 0x02},
-	{0x9d, 0x08},
-	{0xfe, 0x01},
-	{0x74, 0x00},
-	/*AEC*/
-	{0xfe, 0x01},
-	{0x01, 0x04},
-	{0x02, 0x60},
-	{0x03, 0x02},
-	{0x04, 0x48},
-	{0x05, 0x18},
-	{0x06, 0x50},
-	{0x07, 0x10},
-	{0x08, 0x38},
-	{0x0a, 0x80},
-	{0x21, 0x04},
+	{0x40, 0xbf},
+	{0x46, 0xcf},
 	{0xfe, 0x00},
-	{0x20, 0x03},
+
+	{0xfe, 0x03},
+	{0x02, 0x22},
+	{0x03, 0x10},
+	{0x04, 0x10},
+	{0x05, 0x00},
+	{0x06, 0x88},
+	{0x01, 0x83},
+	{0x10, 0x84},
+	{0x11, 0x1e},
+	{0x12, 0x80},
+	{0x13, 0x0c},
+	{0x15, 0x10},
+	{0x17, 0xf0},
+	{0x21, 0x10},
+	{0x22, 0x04},
+	{0x23, 0x10},
+	{0x24, 0x10},
+	{0x25, 0x10},
+	{0x26, 0x05},
+	{0x29, 0x03},
+	{0x2a, 0x0a},
+	{0x2b, 0x06},
 	{0xfe, 0x00},
 	{REG_NULL, 0x00},
 };
 
-/* Senor full resolution setting */
-static const struct sensor_register gc2145_full_regs[] = {
+static const struct sensor_register gc2145_mipi_full[] = {
 	{0xfe, 0x00},
 	{0xfd, 0x00},
-	{0xfa, 0x00},
+	{0xfa, 0x11},
 	/*crop window*/
 	{0xfe, 0x00},
 	{0x90, 0x01},
@@ -881,94 +1699,22 @@ static const struct sensor_register gc2145_full_regs[] = {
 	{0x08, 0x80},
 	{0x0a, 0x82},
 	{0xfe, 0x01},
-	{0x21, 0x04},
+	{0x21, 0x15},
 	{0xfe, 0x00},
 	{0x20, 0x15},
+	{0xfe, 0x03},
+	{0x12, 0x80},
+	{0x13, 0x0c},
+	{0x04, 0x01},
+	{0x05, 0x00},
 	{0xfe, 0x00},
 	{REG_NULL, 0x00},
 };
 
-/* Preview resolution setting*/
-static const struct sensor_register gc2145_svga_regs_30fps[] = {
-	{0xfe, 0x00},
-	{0x05, 0x02},
-	{0x06, 0x20},
-	{0x07, 0x00},
-	{0x08, 0xb8},
-	{0xfe, 0x01},
-	{0x25, 0x01},
-	{0x26, 0xac},
-	{0x27, 0x05},
-	{0x28, 0x04},
-	{0x29, 0x05},
-	{0x2a, 0x04},
-	{0x2b, 0x05},
-	{0x2c, 0x04},
-	{0x2d, 0x05},
-	{0x2e, 0x04},
-	{0x3c, 0x00},
-	{0xfe, 0x00},
-	{0xfe, 0x00},
-	{0xfa, 0x00},
-	{0x18, 0x42},
-	{0xfd, 0x03},
-	{0xb6, 0x01},
-	/* crop window */
-	{0xfe, 0x00},
-	{0x99, 0x11},
-	{0x9a, 0x06},
-	{0x9b, 0x00},
-	{0x9c, 0x00},
-	{0x9d, 0x00},
-	{0x9e, 0x00},
-	{0x9f, 0x00},
-	{0xa0, 0x00},
-	{0xa1, 0x00},
-	{0xa2, 0x00},
-	{0x90, 0x01},
-	{0x91, 0x00},
-	{0x92, 0x00},
-	{0x93, 0x00},
-	{0x94, 0x00},
-	{0x95, 0x02},
-	{0x96, 0x58},
-	{0x97, 0x03},
-	{0x98, 0x20},
-	/* AWB */
-	{0xfe, 0x00},
-	{0xec, 0x01},
-	{0xed, 0x02},
-	{0xee, 0x30},
-	{0xef, 0x48},
-	{0xfe, 0x01},
-	{0x74, 0x00},
-	/* AEC */
-	{0xfe, 0x01},
-	{0x01, 0x04},
-	{0x02, 0x60},
-	{0x03, 0x02},
-	{0x04, 0x48},
-	{0x05, 0x18},
-	{0x06, 0x4c},
-	{0x07, 0x14},
-	{0x08, 0x36},
-	{0x0a, 0xc0},
-	{0x21, 0x14},
-	{0xfe, 0x00},
-	{REG_NULL, 0x00},
-};
-
-/* Preview resolution setting*/
-static const struct sensor_register gc2145_svga_regs_20fps[] = {
+static const struct sensor_register gc2145_mipi_svga[] = {
 	{0xfe, 0x00},
-	{0x05, 0x02},
-	{0x06, 0x20},
-	{0x07, 0x03},
-	{0x08, 0x80},
-	{0xb6, 0x01},
-	{0xfd, 0x03},
+	{0xfd, 0x01},
 	{0xfa, 0x00},
-	{0x18, 0x42},
 	/*crop window*/
 	{0xfe, 0x00},
 	{0x90, 0x01},
@@ -1006,29 +1752,51 @@ static const struct sensor_register gc2145_svga_regs_20fps[] = {
 	{0x21, 0x04},
 	{0xfe, 0x00},
 	{0x20, 0x03},
+	{0xfe, 0x03},
+	{0x12, 0x40},
+	{0x13, 0x06},
+	{0x04, 0x01},
+	{0x05, 0x00},
 	{0xfe, 0x00},
 	{REG_NULL, 0x00},
 };
-
-static const struct gc2145_framesize gc2145_framesizes[] = {
+static const struct gc2145_framesize gc2145_dvp_framesizes[] = {
 	{ /* SVGA */
 		.width		= 800,
 		.height		= 600,
 		.fps		= 20,
-		.regs		= gc2145_svga_regs_20fps,
+		.regs		= gc2145_dvp_svga_20fps,
 	}, { /* SVGA */
 		.width		= 800,
 		.height		= 600,
 		.fps		= 30,
-		.regs		= gc2145_svga_regs_30fps,
+		.regs		= gc2145_dvp_svga_30fps,
 	}, { /* FULL */
 		.width		= 1600,
 		.height		= 1200,
 		.fps		= 20,
-		.regs		= gc2145_full_regs,
+		.regs		= gc2145_dvp_full,
+	}
+};
+
+static const struct gc2145_framesize gc2145_mipi_framesizes[] = {
+	{
+		.width          = 800,
+		.height         = 600,
+		.fps            = 20,
+		.regs           = gc2145_mipi_svga,
+	}, {
+		.width          = 1600,
+		.height         = 1200,
+		.fps            = 10,
+		.regs           = gc2145_mipi_full,
 	}
 };
 
+static const s64 link_freq_menu_items[] = {
+	240000000
+};
+
 static const struct gc2145_pixfmt gc2145_formats[] = {
 	{
 		.code = MEDIA_BUS_FMT_UYVY8_2X8,
@@ -1115,10 +1883,11 @@ static int gc2145_write_array(struct i2c_client *client,
 	return ret;
 }
 
-static void gc2145_get_default_format(struct v4l2_mbus_framefmt *format)
+static void gc2145_get_default_format(struct gc2145 *gc2145,
+				      struct v4l2_mbus_framefmt *format)
 {
-	format->width = gc2145_framesizes[0].width;
-	format->height = gc2145_framesizes[0].height;
+	format->width = gc2145->framesize_cfg[0].width;
+	format->height = gc2145->framesize_cfg[0].height;
 	format->colorspace = V4L2_COLORSPACE_SRGB;
 	format->code = gc2145_formats[0].code;
 	format->field = V4L2_FIELD_NONE;
@@ -1127,11 +1896,19 @@ static void gc2145_get_default_format(struct v4l2_mbus_framefmt *format)
 static void gc2145_set_streaming(struct gc2145 *gc2145, int on)
 {
 	struct i2c_client *client = gc2145->client;
-	int ret;
+	int ret = 0;
+	u8 val;
 
 	dev_dbg(&client->dev, "%s: on: %d\n", __func__, on);
 
-	ret = gc2145_write(client, REG_SOFTWARE_STANDBY, on);
+	if (gc2145->bus_cfg.bus_type == V4L2_MBUS_CSI2) {
+		val = on ? 0x94 : 0x84;
+		ret = gc2145_write(client, 0xfe, 0x03);
+		ret |= gc2145_write(client, 0x10, val);
+	} else {
+		val = on ? 0x0f : 0;
+		ret = gc2145_write(client, 0xf2, val);
+	}
 	if (ret)
 		dev_err(&client->dev, "gc2145 soft standby failed\n");
 }
@@ -1160,12 +1937,13 @@ static int gc2145_enum_frame_sizes(struct v4l2_subdev *sd,
 				   struct v4l2_subdev_pad_config *cfg,
 				   struct v4l2_subdev_frame_size_enum *fse)
 {
+	struct gc2145 *gc2145 = to_gc2145(sd);
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	int i = ARRAY_SIZE(gc2145_formats);
 
 	dev_dbg(&client->dev, "%s:\n", __func__);
 
-	if (fse->index >= ARRAY_SIZE(gc2145_framesizes))
+	if (fse->index >= gc2145->cfg_num)
 		return -EINVAL;
 
 	while (--i)
@@ -1174,9 +1952,9 @@ static int gc2145_enum_frame_sizes(struct v4l2_subdev *sd,
 
 	fse->code = gc2145_formats[i].code;
 
-	fse->min_width  = gc2145_framesizes[fse->index].width;
+	fse->min_width  = gc2145->framesize_cfg[fse->index].width;
 	fse->max_width  = fse->min_width;
-	fse->max_height = gc2145_framesizes[fse->index].height;
+	fse->max_height = gc2145->framesize_cfg[fse->index].height;
 	fse->min_height = fse->max_height;
 
 	return 0;
@@ -1216,13 +1994,14 @@ static int gc2145_get_fmt(struct v4l2_subdev *sd,
 	return 0;
 }
 
-static void __gc2145_try_frame_size_fps(struct v4l2_mbus_framefmt *mf,
+static void __gc2145_try_frame_size_fps(struct gc2145 *gc2145,
+					struct v4l2_mbus_framefmt *mf,
 					const struct gc2145_framesize **size,
 					unsigned int fps)
 {
-	const struct gc2145_framesize *fsize = &gc2145_framesizes[0];
+	const struct gc2145_framesize *fsize = &gc2145->framesize_cfg[0];
 	const struct gc2145_framesize *match = NULL;
-	unsigned int i = ARRAY_SIZE(gc2145_framesizes);
+	unsigned int i = gc2145->cfg_num;
 	unsigned int min_err = UINT_MAX;
 
 	while (i--) {
@@ -1236,10 +2015,10 @@ static void __gc2145_try_frame_size_fps(struct v4l2_mbus_framefmt *mf,
 	}
 
 	if (!match) {
-		match = &gc2145_framesizes[0];
+		match = &gc2145->framesize_cfg[0];
 	} else {
-		fsize = &gc2145_framesizes[0];
-		for (i = 0; i < ARRAY_SIZE(gc2145_framesizes); i++) {
+		fsize = &gc2145->framesize_cfg[0];
+		for (i = 0; i < gc2145->cfg_num; i++) {
 			if (fsize->width == match->width &&
 			    fsize->height == match->height &&
 			    fps >= fsize->fps)
@@ -1269,7 +2048,7 @@ static int gc2145_set_fmt(struct v4l2_subdev *sd,
 
 	dev_dbg(&client->dev, "%s enter\n", __func__);
 
-	__gc2145_try_frame_size_fps(mf, &size, gc2145->fps);
+	__gc2145_try_frame_size_fps(gc2145, mf, &size, gc2145->fps);
 
 	while (--index >= 0)
 		if (gc2145_formats[index].code == mf->code)
@@ -1323,7 +2102,7 @@ static int gc2145_s_stream(struct v4l2_subdev *sd, int on)
 
 	if (!on) {
 		/* Stop Streaming Sequence */
-		gc2145_set_streaming(gc2145, 0x00);
+		gc2145_set_streaming(gc2145, on);
 		gc2145->streaming = on;
 		if (!IS_ERR(gc2145->pwdn_gpio)) {
 			gpiod_set_value_cansleep(gc2145->pwdn_gpio, 1);
@@ -1336,7 +2115,10 @@ static int gc2145_s_stream(struct v4l2_subdev *sd, int on)
 		usleep_range(2000, 5000);
 	}
 
-	ret = gc2145_write_array(client, gc2145_init_regs);
+	if (gc2145->bus_cfg.bus_type == V4L2_MBUS_CSI2)
+		ret = gc2145_write_array(client, gc2145_mipi_init_regs);
+	else
+		ret = gc2145_write_array(client, gc2145_dvp_init_regs);
 	if (ret)
 		goto unlock;
 
@@ -1344,7 +2126,7 @@ static int gc2145_s_stream(struct v4l2_subdev *sd, int on)
 	if (ret)
 		goto unlock;
 
-	gc2145_set_streaming(gc2145, 0x0f);
+	gc2145_set_streaming(gc2145, on);
 	gc2145->streaming = on;
 
 unlock:
@@ -1386,13 +2168,14 @@ static const char * const gc2145_test_pattern_menu[] = {
 #ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
 static int gc2145_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 {
+	struct gc2145 *gc2145 = to_gc2145(sd);
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct v4l2_mbus_framefmt *format =
 				v4l2_subdev_get_try_format(sd, fh->pad, 0);
 
 	dev_dbg(&client->dev, "%s:\n", __func__);
 
-	gc2145_get_default_format(format);
+	gc2145_get_default_format(gc2145, format);
 
 	return 0;
 }
@@ -1401,10 +2184,16 @@ static int gc2145_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 static int gc2145_g_mbus_config(struct v4l2_subdev *sd,
 				struct v4l2_mbus_config *config)
 {
-	config->type = V4L2_MBUS_PARALLEL;
-	config->flags = V4L2_MBUS_HSYNC_ACTIVE_HIGH |
-			V4L2_MBUS_VSYNC_ACTIVE_LOW |
-			V4L2_MBUS_PCLK_SAMPLE_RISING;
+	struct gc2145 *gc2145 = to_gc2145(sd);
+
+	if (gc2145->bus_cfg.bus_type == V4L2_MBUS_CSI2) {
+		config->type = V4L2_MBUS_CSI2;
+	} else {
+		config->type = V4L2_MBUS_PARALLEL;
+		config->flags = V4L2_MBUS_HSYNC_ACTIVE_HIGH |
+				V4L2_MBUS_VSYNC_ACTIVE_LOW |
+				V4L2_MBUS_PCLK_SAMPLE_RISING;
+	}
 
 	return 0;
 }
@@ -1441,7 +2230,7 @@ static int gc2145_s_frame_interval(struct v4l2_subdev *sd,
 	fps = DIV_ROUND_CLOSEST(fi->interval.denominator,
 				fi->interval.numerator);
 	mf = gc2145->format;
-	__gc2145_try_frame_size_fps(&mf, &size, fps);
+	__gc2145_try_frame_size_fps(gc2145, &mf, &size, fps);
 	if (gc2145->frame_size != size) {
 		ret = gc2145_write_array(client, size->regs);
 		if (ret)
@@ -1524,6 +2313,13 @@ static int __gc2145_power_on(struct gc2145 *gc2145)
 	int ret;
 	struct device *dev = &gc2145->client->dev;
 
+	if (!IS_ERR(gc2145->reset_gpio)) {
+		gpiod_set_value_cansleep(gc2145->reset_gpio, 0);
+		usleep_range(2000, 5000);
+		gpiod_set_value_cansleep(gc2145->reset_gpio, 1);
+		usleep_range(2000, 5000);
+	}
+
 	if (!IS_ERR(gc2145->xvclk)) {
 		ret = clk_set_rate(gc2145->xvclk, 24000000);
 		if (ret < 0)
@@ -1567,6 +2363,8 @@ static void __gc2145_power_off(struct gc2145 *gc2145)
 		regulator_bulk_disable(GC2145_NUM_SUPPLIES, gc2145->supplies);
 	if (!IS_ERR(gc2145->pwdn_gpio))
 		gpiod_set_value_cansleep(gc2145->pwdn_gpio, 1);
+	if (!IS_ERR(gc2145->reset_gpio))
+		gpiod_set_value_cansleep(gc2145->reset_gpio, 0);
 }
 
 static int gc2145_configure_regulators(struct gc2145 *gc2145)
@@ -1584,11 +2382,36 @@ static int gc2145_configure_regulators(struct gc2145 *gc2145)
 static int gc2145_parse_of(struct gc2145 *gc2145)
 {
 	struct device *dev = &gc2145->client->dev;
+	struct device_node *endpoint;
 	int ret;
 
+	endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
+	if (!endpoint) {
+		dev_err(dev, "Failed to get endpoint\n");
+		return -EINVAL;
+	}
+
+	ret = v4l2_fwnode_endpoint_parse(of_fwnode_handle(endpoint),
+		&gc2145->bus_cfg);
+	if (ret) {
+		dev_err(dev, "Failed to parse endpoint\n");
+		of_node_put(endpoint);
+		return ret;
+	}
+	if (gc2145->bus_cfg.bus_type == V4L2_MBUS_CSI2) {
+		gc2145->framesize_cfg = gc2145_mipi_framesizes;
+		gc2145->cfg_num = ARRAY_SIZE(gc2145_mipi_framesizes);
+	} else {
+		gc2145->framesize_cfg = gc2145_dvp_framesizes;
+		gc2145->cfg_num = ARRAY_SIZE(gc2145_dvp_framesizes);
+	}
+
 	gc2145->pwdn_gpio = devm_gpiod_get(dev, "pwdn", GPIOD_OUT_LOW);
 	if (IS_ERR(gc2145->pwdn_gpio))
 		dev_info(dev, "Failed to get pwdn-gpios, maybe no use\n");
+	gc2145->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(gc2145->reset_gpio))
+		dev_info(dev, "Failed to get reset-gpios, maybe no use\n");
 
 	ret = gc2145_configure_regulators(gc2145);
 	if (ret)
@@ -1615,20 +2438,24 @@ static int gc2145_probe(struct i2c_client *client,
 		return -EINVAL;
 	}
 
-	gc2145_parse_of(gc2145);
+	ret = gc2145_parse_of(gc2145);
+	if (ret != 0)
+		return -EINVAL;
 
 	gc2145->xvclk_frequency = clk_get_rate(gc2145->xvclk);
 	if (gc2145->xvclk_frequency < 6000000 ||
 	    gc2145->xvclk_frequency > 27000000)
 		return -EINVAL;
 
-	v4l2_ctrl_handler_init(&gc2145->ctrls, 2);
+	v4l2_ctrl_handler_init(&gc2145->ctrls, 3);
 	gc2145->link_frequency =
 			v4l2_ctrl_new_std(&gc2145->ctrls, &gc2145_ctrl_ops,
 					  V4L2_CID_PIXEL_RATE, 0,
 					  GC2145_PIXEL_RATE, 1,
 					  GC2145_PIXEL_RATE);
 
+	v4l2_ctrl_new_int_menu(&gc2145->ctrls, NULL, V4L2_CID_LINK_FREQ,
+			       0, 0, link_freq_menu_items);
 	v4l2_ctrl_new_std_menu_items(&gc2145->ctrls, &gc2145_ctrl_ops,
 				     V4L2_CID_TEST_PATTERN,
 				     ARRAY_SIZE(gc2145_test_pattern_menu) - 1,
@@ -1663,11 +2490,11 @@ static int gc2145_probe(struct i2c_client *client,
 
 	mutex_init(&gc2145->lock);
 
-	gc2145_get_default_format(&gc2145->format);
-	gc2145->frame_size = &gc2145_framesizes[0];
-	gc2145->format.width = gc2145_framesizes[0].width;
-	gc2145->format.height = gc2145_framesizes[0].height;
-	gc2145->fps = gc2145_framesizes[0].fps;
+	gc2145_get_default_format(gc2145, &gc2145->format);
+	gc2145->frame_size = &gc2145->framesize_cfg[0];
+	gc2145->format.width = gc2145->framesize_cfg[0].width;
+	gc2145->format.height = gc2145->framesize_cfg[0].height;
+	gc2145->fps = gc2145->framesize_cfg[0].fps;
 
 	ret = gc2145_detect(gc2145);
 	if (ret < 0)
-- 
2.35.3

