From c9c13e83df76c477a3d397c3711141a1f12b0841 Mon Sep 17 00:00:00 2001
From: Zhaoyifeng <zyf@rock-chips.com>
Date: Thu, 18 May 2017 09:54:05 +0800
Subject: [PATCH] driver: soc: vendor storage support realloc

To rewrite the same id with the data size large than first alloc size,
it`s will write fail. This commit will support realloc new memory
for rewrite.

Change-Id: I3345fc9e4a12d0f61f88cfb944b7efc5a4b5e215
Signed-off-by: Zhaoyifeng <zyf@rock-chips.com>
---
 drivers/soc/rockchip/flash_vendor_storage.c | 63 ++++++++++++++++-----
 1 file changed, 49 insertions(+), 14 deletions(-)

diff --git a/drivers/soc/rockchip/flash_vendor_storage.c b/drivers/soc/rockchip/flash_vendor_storage.c
index 0b6601d9bc5e..711fa7eec168 100644
--- a/drivers/soc/rockchip/flash_vendor_storage.c
+++ b/drivers/soc/rockchip/flash_vendor_storage.c
@@ -134,19 +134,54 @@ static int flash_vendor_read(u32 id, void *pbuf, u32 size)
 
 static int flash_vendor_write(u32 id, void *pbuf, u32 size)
 {
-	u32 i, next_index, algin_size;
+	u32 i, j, next_index, align_size, alloc_size, item_num;
+	u32 offset, next_size;
+	u8 *p_data;
 	struct vendor_item *item;
+	struct vendor_item *next_item;
 
-	algin_size = (size + 0x3F) & (~0x3F); /* algin to 64 bytes */
+	if (!g_vendor)
+		return -1;
+
+	p_data = g_vendor->data;
+	item_num = g_vendor->item_num;
+	align_size = ALIGN(size, 0x40); /* align to 64 bytes*/
 	next_index = g_vendor->next_index;
-	for (i = 0; i < g_vendor->item_num; i++) {
-		if (g_vendor->item[i].id == id) {
-			if (size > algin_size)
-				return -1;
-			memcpy(&g_vendor->data[g_vendor->item[i].offset],
-			       pbuf,
-			       size);
-			g_vendor->item[i].size = size;
+	for (i = 0; i < item_num; i++) {
+		item = &g_vendor->item[i];
+		if (item->id == id) {
+			alloc_size = ALIGN(item->size, 0x40);
+			if (size > alloc_size) {
+				if (g_vendor->free_size < align_size)
+					return -1;
+				offset = item->offset;
+				for (j = i; j < item_num - 1; j++) {
+					item = &g_vendor->item[j];
+					next_item = &g_vendor->item[j + 1];
+					item->id = next_item->id;
+					item->size = next_item->size;
+					item->offset = offset;
+					next_size = ALIGN(next_item->size,
+							  0x40);
+					memcpy(&p_data[offset],
+					       &p_data[next_item->offset],
+					       next_size);
+					offset += next_size;
+				}
+				item = &g_vendor->item[j];
+				item->id = id;
+				item->offset = offset;
+				item->size = size;
+				memcpy(&p_data[item->offset], pbuf, size);
+				g_vendor->free_offset = offset + align_size;
+				g_vendor->free_size -= (align_size -
+							alloc_size);
+			} else {
+				memcpy(&p_data[item->offset],
+				       pbuf,
+				       size);
+				g_vendor->item[i].size = size;
+			}
 			g_vendor->version++;
 			g_vendor->version2 = g_vendor->version;
 			g_vendor->next_index++;
@@ -160,14 +195,14 @@ static int flash_vendor_write(u32 id, void *pbuf, u32 size)
 		}
 	}
 
-	if (g_vendor->free_size >= algin_size) {
+	if (g_vendor->free_size >= align_size) {
 		item = &g_vendor->item[g_vendor->item_num];
 		item->id = id;
 		item->offset = g_vendor->free_offset;
-		item->size = algin_size;
+		item->size = align_size;
 		item->size = size;
-		g_vendor->free_offset += algin_size;
-		g_vendor->free_size -= algin_size;
+		g_vendor->free_offset += align_size;
+		g_vendor->free_size -= align_size;
 		memcpy(&g_vendor->data[item->offset], pbuf, size);
 		g_vendor->item_num++;
 		g_vendor->version++;
-- 
2.35.3

