From 3e3dd37a4676b757633782c71ac4005f2d945e7f Mon Sep 17 00:00:00 2001
From: Allon Huang <allon.huang@rock-chips.com>
Date: Wed, 11 Nov 2020 14:35:54 +0800
Subject: [PATCH] media: rockchip: cif: support rk3568 vicap

Signed-off-by: Allon Huang <allon.huang@rock-chips.com>
Change-Id: If78619cd89ebc1e586a940fd7fac02cea21f0124
---
 drivers/media/platform/rockchip/cif/capture.c |  67 ++++++--
 drivers/media/platform/rockchip/cif/dev.c     |  33 +++-
 drivers/media/platform/rockchip/cif/dev.h     |   8 +
 drivers/media/platform/rockchip/cif/hw.c      | 143 +++++++++++++++++-
 drivers/media/platform/rockchip/cif/hw.h      |   7 +-
 drivers/media/platform/rockchip/cif/regs.h    |  42 +++++
 drivers/media/platform/rockchip/cif/version.h |   2 +
 include/uapi/linux/rk-camera-module.h         |  12 ++
 8 files changed, 291 insertions(+), 23 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index db0f47cff9fe..2fd1dcd05270 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -271,48 +271,56 @@ static const struct cif_input_fmt in_fmts[] = {
 		.mbus_code	= MEDIA_BUS_FMT_YUYV8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_YUYV,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_YUYV,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_NONE,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_YUYV8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_YUYV,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_YUYV,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_INTERLACED,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_YVYU8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_YVYU,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_YVYU,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_NONE,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_YVYU8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_YVYU,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_YVYU,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_INTERLACED,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_UYVY8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_UYVY,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_UYVY,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_NONE,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_UYVY8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_UYVY,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_UYVY,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_INTERLACED,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_VYUY8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_VYUY,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_VYUY,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_NONE,
 	}, {
 		.mbus_code	= MEDIA_BUS_FMT_VYUY8_2X8,
 		.dvp_fmt_val	= YUV_INPUT_422 | YUV_INPUT_ORDER_VYUY,
 		.csi_fmt_val	= CSI_WRDDR_TYPE_YUV422,
+		.csi_yuv_order	= CSI_YUV_INPUT_ORDER_VYUY,
 		.fmt_type	= CIF_FMT_TYPE_YUV,
 		.field		= V4L2_FIELD_INTERLACED,
 	}, {
@@ -1452,6 +1460,9 @@ static int rkcif_csi_channel_set(struct rkcif_stream *stream,
 			val |= CSI_ENABLE_MIPI_COMPACT;
 		else
 			val &= ~CSI_ENABLE_MIPI_COMPACT;
+
+		if (stream->cifdev->chip_id >= CHIP_RK3568_CIF)
+			val |= stream->cif_fmt_in->csi_yuv_order;
 	} else if (mbus_type  == V4L2_MBUS_CCP2) {
 		rkcif_csi_set_lvds_sav_eav(stream, channel);
 		val = LVDS_ENABLE_CAPTURE | LVDS_MODE(channel->lvds_cfg.mode) |
@@ -1853,8 +1864,10 @@ static u32 rkcif_determine_input_mode(struct rkcif_stream *stream)
 {
 	struct rkcif_device *dev = stream->cifdev;
 	struct rkcif_sensor_info *sensor_info = dev->active_sensor;
-	v4l2_std_id std;
+	struct rkcif_sensor_info *terminal_sensor = &dev->terminal_sensor;
+	__u32 intf = BT656_STD_RAW;
 	u32 mode = INPUT_MODE_YUV;
+	v4l2_std_id std;
 	int ret;
 
 	ret = v4l2_subdev_call(sensor_info->sd, video, querystd, &std);
@@ -1878,10 +1891,32 @@ static u32 rkcif_determine_input_mode(struct rkcif_stream *stream)
 		/* determine input mode by mbus_code (fmt_type) */
 		switch (stream->cif_fmt_in->fmt_type) {
 		case CIF_FMT_TYPE_YUV:
-			mode = INPUT_MODE_YUV;
+			if (dev->chip_id >= CHIP_RK3568_CIF) {
+				if (sensor_info->mbus.type == V4L2_MBUS_BT656)
+					mode = INPUT_MODE_BT656_YUV422;
+				else
+					mode = INPUT_MODE_YUV;
+			} else {
+				mode = INPUT_MODE_YUV;
+			}
 			break;
 		case CIF_FMT_TYPE_RAW:
-			mode = INPUT_MODE_RAW;
+			if (dev->chip_id >= CHIP_RK3568_CIF) {
+				ret = v4l2_subdev_call(terminal_sensor->sd,
+						       core, ioctl,
+						       RKMODULE_GET_BT656_INTF_TYPE,
+						       &intf);
+				if (!ret) {
+					if (intf == BT656_SONY_RAW)
+						mode = INPUT_MODE_SONY_RAW;
+					else
+						mode = INPUT_MODE_RAW;
+				} else {
+					mode = INPUT_MODE_RAW;
+				}
+			} else {
+				mode = INPUT_MODE_RAW;
+			}
 			break;
 		}
 	}
@@ -2029,13 +2064,9 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 
 	mbus_flags = sensor_info->mbus.flags;
 	if (mbus_flags & V4L2_MBUS_PCLK_SAMPLE_RISING)
-		rkcif_write_grf_reg(dev,
-				    CIF_REG_GRF_CIFIO_CON,
-				    CIF_PCLK_SAMPLING_EDGE_RISING);
+		rkcif_config_dvp_clk_sampling_edge(dev, RKCIF_CLK_RISING);
 	else
-		rkcif_write_grf_reg(dev,
-				    CIF_REG_GRF_CIFIO_CON,
-				    CIF_PCLK_SAMPLING_EDGE_FALLING);
+		rkcif_config_dvp_clk_sampling_edge(dev, RKCIF_CLK_FALLING);
 
 	href_pol = (mbus_flags & V4L2_MBUS_HSYNC_ACTIVE_HIGH) ?
 		    HSY_HIGH_ACTIVE : HSY_LOW_ACTIVE;
@@ -2108,7 +2139,8 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 	rkcif_write_register(dev, CIF_REG_DVP_SCL_CTRL, rkcif_scl_ctl(stream));
 
 	if ((dev->chip_id == CHIP_RK1808_CIF ||
-	     dev->chip_id == CHIP_RV1126_CIF) &&
+	     dev->chip_id == CHIP_RV1126_CIF ||
+	     dev->chip_id == CHIP_RK3568_CIF) &&
 	     inputmode == INPUT_MODE_BT1120)
 		rkcif_assign_new_buffer_pingpong(stream, 1, 0);
 	else
@@ -2127,7 +2159,8 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 		workmode = MODE_LINELOOP;
 
 	if ((dev->chip_id == CHIP_RK1808_CIF ||
-	     dev->chip_id == CHIP_RV1126_CIF) &&
+	     dev->chip_id == CHIP_RV1126_CIF ||
+	     dev->chip_id == CHIP_RK3568_CIF) &&
 	     inputmode == INPUT_MODE_BT1120) {
 		dev->workmode = RKCIF_WORKMODE_PINGPONG;
 		rkcif_write_register(dev, CIF_REG_DVP_CTRL,
@@ -2279,7 +2312,8 @@ static int rkcif_start_streaming(struct vb2_queue *queue, unsigned int count)
 
 	if (dev->chip_id == CHIP_RK1808_CIF ||
 	    dev->chip_id == CHIP_RV1126_CIF ||
-	    dev->chip_id == CHIP_RV1126_CIF_LITE) {
+	    dev->chip_id == CHIP_RV1126_CIF_LITE ||
+	    dev->chip_id == CHIP_RK3568_CIF) {
 		if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2 ||
 		    dev->active_sensor->mbus.type == V4L2_MBUS_CCP2)
 			ret = rkcif_csi_stream_start(stream);
@@ -2569,7 +2603,8 @@ static int rkcif_fh_open(struct file *filp)
 	 */
 	if (cifdev->chip_id == CHIP_RK1808_CIF ||
 	    cifdev->chip_id == CHIP_RV1126_CIF ||
-	    cifdev->chip_id == CHIP_RV1126_CIF_LITE) {
+	    cifdev->chip_id == CHIP_RV1126_CIF_LITE ||
+	    cifdev->chip_id == CHIP_RK3568_CIF) {
 		mutex_lock(&cifdev->stream_lock);
 		if (!atomic_read(&cifdev->fh_cnt))
 			rkcif_soft_reset(cifdev, true);
@@ -3799,7 +3834,8 @@ static void rkcif_update_stream(struct rkcif_device *cif_dev,
 	rkcif_assign_new_buffer_pingpong(stream, 0, mipi_id);
 
 	if (cif_dev->chip_id == CHIP_RV1126_CIF ||
-	    cif_dev->chip_id == CHIP_RV1126_CIF_LITE)
+	    cif_dev->chip_id == CHIP_RV1126_CIF_LITE ||
+	    cif_dev->chip_id == CHIP_RK3568_CIF)
 		rkcif_luma_isr(&cif_dev->luma_vdev, mipi_id, stream->frame_idx);
 
 	if (active_buf) {
@@ -4182,7 +4218,8 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 	if ((mbus->type == V4L2_MBUS_CSI2 ||
 	     mbus->type == V4L2_MBUS_CCP2) &&
 	    (cif_dev->chip_id == CHIP_RK1808_CIF ||
-	     cif_dev->chip_id == CHIP_RV1126_CIF)) {
+	     cif_dev->chip_id == CHIP_RV1126_CIF ||
+	     cif_dev->chip_id == CHIP_RK3568_CIF)) {
 		int mipi_id;
 		u32 lastline = 0;
 
diff --git a/drivers/media/platform/rockchip/cif/dev.c b/drivers/media/platform/rockchip/cif/dev.c
index fa97bfa53b34..ae1203591544 100644
--- a/drivers/media/platform/rockchip/cif/dev.c
+++ b/drivers/media/platform/rockchip/cif/dev.c
@@ -224,6 +224,30 @@ u32 rkcif_read_grf_reg(struct rkcif_device *dev, enum cif_reg_index index)
 	return val;
 }
 
+void rkcif_config_dvp_clk_sampling_edge(struct rkcif_device *dev,
+					enum rkcif_clk_edge edge)
+{
+	struct rkcif_hw *cif_hw = dev->hw_dev;
+	u32 val = 0x0;
+
+	if (!IS_ERR(cif_hw->grf)) {
+		if (dev->chip_id == CHIP_RV1126_CIF) {
+			if (edge == RKCIF_CLK_RISING)
+				val = CIF_PCLK_SAMPLING_EDGE_RISING;
+			else
+				val = CIF_PCLK_SAMPLING_EDGE_FALLING;
+		}
+
+		if (dev->chip_id == CHIP_RK3568_CIF) {
+			if (edge == RKCIF_CLK_RISING)
+				val = RK3568_CIF_PCLK_SAMPLING_EDGE_RISING;
+			else
+				val = RK3568_CIF_PCLK_SAMPLING_EDGE_FALLING;
+		}
+		rkcif_write_grf_reg(dev, CIF_REG_GRF_CIFIO_CON, val);
+	}
+}
+
 static bool is_iommu_enable(struct device *dev)
 {
 	struct device_node *iommu;
@@ -465,7 +489,8 @@ static int rkcif_create_links(struct rkcif_device *dev)
 				if ((linked_sensor.mbus.type == V4L2_MBUS_BT656 ||
 				     linked_sensor.mbus.type == V4L2_MBUS_PARALLEL) &&
 				    (dev->chip_id == CHIP_RK1808_CIF ||
-				     dev->chip_id == CHIP_RV1126_CIF)) {
+				     dev->chip_id == CHIP_RV1126_CIF ||
+				     dev->chip_id == CHIP_RK3568_CIF)) {
 					source_entity = &linked_sensor.sd->entity;
 					sink_entity = &dev->stream[RKCIF_STREAM_CIF].vnode.vdev.entity;
 
@@ -486,7 +511,8 @@ static int rkcif_create_links(struct rkcif_device *dev)
 
 					if ((dev->chip_id != CHIP_RK1808_CIF &&
 					     dev->chip_id != CHIP_RV1126_CIF &&
-					     dev->chip_id != CHIP_RV1126_CIF_LITE) ||
+					     dev->chip_id != CHIP_RV1126_CIF_LITE &&
+					     dev->chip_id != CHIP_RK3568_CIF) ||
 					    (id == pad - 1 && !mipi_lvds_linked))
 						flags = MEDIA_LNK_FL_ENABLED;
 					else
@@ -853,7 +879,8 @@ int rkcif_plat_init(struct rkcif_device *cif_dev, struct device_node *node, int
 		goto err_unreg_media_dev;
 
 	if (cif_dev->chip_id == CHIP_RV1126_CIF ||
-	    cif_dev->chip_id == CHIP_RV1126_CIF_LITE)
+	    cif_dev->chip_id == CHIP_RV1126_CIF_LITE ||
+	    cif_dev->chip_id == CHIP_RK3568_CIF)
 		rkcif_register_luma_vdev(&cif_dev->luma_vdev, v4l2_dev, cif_dev);
 
 	mutex_lock(&rkcif_dev_mutex);
diff --git a/drivers/media/platform/rockchip/cif/dev.h b/drivers/media/platform/rockchip/cif/dev.h
index 96fa0532f3ec..06cd6b2871e7 100644
--- a/drivers/media/platform/rockchip/cif/dev.h
+++ b/drivers/media/platform/rockchip/cif/dev.h
@@ -112,6 +112,11 @@ enum rkcif_inf_id {
 	RKCIF_MIPI_LVDS,
 };
 
+enum rkcif_clk_edge {
+	RKCIF_CLK_RISING = 0x0,
+	RKCIF_CLK_FALLING,
+};
+
 /*
  * for distinguishing cropping from senosr or usr
  */
@@ -219,6 +224,7 @@ struct cif_input_fmt {
 	u32 mbus_code;
 	u32 dvp_fmt_val;
 	u32 csi_fmt_val;
+	u32 csi_yuv_order;
 	enum cif_fmt_type fmt_type;
 	enum v4l2_field field;
 };
@@ -502,5 +508,7 @@ int rkcif_attach_hw(struct rkcif_device *cif_dev);
 int rkcif_update_sensor_info(struct rkcif_stream *stream);
 int rkcif_reset_notifier(struct notifier_block *nb, unsigned long action, void *data);
 void rkcif_reset_watchdog_timer_handler(struct timer_list *t);
+void rkcif_config_dvp_clk_sampling_edge(struct rkcif_device *dev,
+					enum rkcif_clk_edge edge);
 
 #endif
diff --git a/drivers/media/platform/rockchip/cif/hw.c b/drivers/media/platform/rockchip/cif/hw.c
index 2c701c435024..2fe83664a19d 100644
--- a/drivers/media/platform/rockchip/cif/hw.c
+++ b/drivers/media/platform/rockchip/cif/hw.c
@@ -467,6 +467,123 @@ static const struct cif_reg rv1126_cif_lite_regs[] = {
 	[CIF_REG_Y_STAT_VALUE] = CIF_REG(CIF_Y_STAT_VALUE),
 };
 
+static const char * const rk3568_cif_clks[] = {
+	"aclk_cif",
+	"hclk_cif",
+	"dclk_cif",
+	"iclk_cif_g",
+};
+
+static const char * const rk3568_cif_rsts[] = {
+	"rst_cif_a",
+	"rst_cif_h",
+	"rst_cif_d",
+	"rst_cif_p",
+	"rst_cif_i",
+};
+
+static const struct cif_reg rk3568_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_MULTI_ID] = CIF_REG(CIF_MULTI_ID),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_LINE_INT_NUM] = CIF_REG(CIF_LINE_INT_NUM),
+	[CIF_REG_DVP_LINE_CNT] = CIF_REG(CIF_LINE_CNT),
+	[CIF_REG_DVP_CROP] = CIF_REG(RV1126_CIF_CROP),
+	[CIF_REG_DVP_FIFO_ENTRY] = CIF_REG(RK3568_CIF_FIFO_ENTRY),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(RV1126_CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(RV1126_CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(RV1126_CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(RV1126_CIF_LAST_PIX),
+	[CIF_REG_DVP_FRM0_ADDR_Y_ID1] = CIF_REG(CIF_FRM0_ADDR_Y_ID1),
+	[CIF_REG_DVP_FRM0_ADDR_UV_ID1] = CIF_REG(CIF_FRM0_ADDR_UV_ID1),
+	[CIF_REG_DVP_FRM1_ADDR_Y_ID1] = CIF_REG(CIF_FRM1_ADDR_Y_ID1),
+	[CIF_REG_DVP_FRM1_ADDR_UV_ID1] = CIF_REG(CIF_FRM1_ADDR_UV_ID1),
+	[CIF_REG_DVP_FRM0_ADDR_Y_ID2] = CIF_REG(CIF_FRM0_ADDR_Y_ID2),
+	[CIF_REG_DVP_FRM0_ADDR_UV_ID2] = CIF_REG(CIF_FRM0_ADDR_UV_ID2),
+	[CIF_REG_DVP_FRM1_ADDR_Y_ID2] = CIF_REG(CIF_FRM1_ADDR_Y_ID2),
+	[CIF_REG_DVP_FRM1_ADDR_UV_ID2] = CIF_REG(CIF_FRM1_ADDR_UV_ID2),
+	[CIF_REG_DVP_FRM0_ADDR_Y_ID3] = CIF_REG(CIF_FRM0_ADDR_Y_ID3),
+	[CIF_REG_DVP_FRM0_ADDR_UV_ID3] = CIF_REG(CIF_FRM0_ADDR_UV_ID3),
+	[CIF_REG_DVP_FRM1_ADDR_Y_ID3] = CIF_REG(CIF_FRM1_ADDR_Y_ID3),
+	[CIF_REG_DVP_FRM1_ADDR_UV_ID3] = CIF_REG(CIF_FRM1_ADDR_UV_ID3),
+	[CIF_REG_MIPI_LVDS_ID0_CTRL0] = CIF_REG(CIF_CSI_ID0_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID0_CTRL1] = CIF_REG(CIF_CSI_ID0_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID1_CTRL0] = CIF_REG(CIF_CSI_ID1_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID1_CTRL1] = CIF_REG(CIF_CSI_ID1_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID2_CTRL0] = CIF_REG(CIF_CSI_ID2_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID2_CTRL1] = CIF_REG(CIF_CSI_ID2_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID3_CTRL0] = CIF_REG(CIF_CSI_ID3_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID3_CTRL1] = CIF_REG(CIF_CSI_ID3_CTRL1),
+	[CIF_REG_MIPI_LVDS_CTRL] = CIF_REG(CIF_CSI_MIPI_LVDS_CTRL),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID0] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID0] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID0] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID0] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID0] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID0] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID0] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID0] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID1] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID1] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID1] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID1] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID1] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID1] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID1] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID1] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID2] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID2] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID2] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID2] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID2] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID2] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID2] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID2] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID3] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID3] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID3] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID3] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID3] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID3] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID3] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID3] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID3),
+	[CIF_REG_MIPI_LVDS_INTEN] = CIF_REG(CIF_CSI_INTEN),
+	[CIF_REG_MIPI_LVDS_INTSTAT] = CIF_REG(CIF_CSI_INTSTAT),
+	[CIF_REG_MIPI_LVDS_LINE_INT_NUM_ID0_1] = CIF_REG(CIF_CSI_LINE_INT_NUM_ID0_1),
+	[CIF_REG_MIPI_LVDS_LINE_INT_NUM_ID2_3] = CIF_REG(CIF_CSI_LINE_INT_NUM_ID2_3),
+	[CIF_REG_MIPI_LVDS_LINE_LINE_CNT_ID0_1] = CIF_REG(CIF_CSI_LINE_CNT_ID0_1),
+	[CIF_REG_MIPI_LVDS_LINE_LINE_CNT_ID2_3] = CIF_REG(CIF_CSI_LINE_CNT_ID2_3),
+	[CIF_REG_MIPI_LVDS_ID0_CROP_START] = CIF_REG(CIF_CSI_ID0_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID1_CROP_START] = CIF_REG(CIF_CSI_ID1_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID2_CROP_START] = CIF_REG(CIF_CSI_ID2_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID3_CROP_START] = CIF_REG(CIF_CSI_ID3_CROP_START),
+	[CIF_REG_MIPI_FRAME_NUM_VC0] = CIF_REG(CIF_CSI_FRAME_NUM_VC0),
+	[CIF_REG_MIPI_FRAME_NUM_VC1] = CIF_REG(CIF_CSI_FRAME_NUM_VC1),
+	[CIF_REG_MIPI_FRAME_NUM_VC2] = CIF_REG(CIF_CSI_FRAME_NUM_VC2),
+	[CIF_REG_MIPI_FRAME_NUM_VC3] = CIF_REG(CIF_CSI_FRAME_NUM_VC3),
+	[CIF_REG_Y_STAT_CONTROL] = CIF_REG(CIF_Y_STAT_CONTROL),
+	[CIF_REG_Y_STAT_VALUE] = CIF_REG(CIF_Y_STAT_VALUE),
+	[CIF_REG_MMU_DTE_ADDR] = CIF_REG(CIF_MMU_DTE_ADDR),
+	[CIF_REG_MMU_STATUS] = CIF_REG(CIF_MMU_STATUS),
+	[CIF_REG_MMU_COMMAND] = CIF_REG(CIF_MMU_COMMAND),
+	[CIF_REG_MMU_PAGE_FAULT_ADDR] = CIF_REG(CIF_MMU_PAGE_FAULT_ADDR),
+	[CIF_REG_MMU_ZAP_ONE_LINE] = CIF_REG(CIF_MMU_ZAP_ONE_LINE),
+	[CIF_REG_MMU_INT_RAWSTAT] = CIF_REG(CIF_MMU_INT_RAWSTAT),
+	[CIF_REG_MMU_INT_CLEAR] = CIF_REG(CIF_MMU_INT_CLEAR),
+	[CIF_REG_MMU_INT_MASK] = CIF_REG(CIF_MMU_INT_MASK),
+	[CIF_REG_MMU_INT_STATUS] = CIF_REG(CIF_MMU_INT_STATUS),
+	[CIF_REG_MMU_AUTO_GATING] = CIF_REG(CIF_MMU_AUTO_GATING),
+	[CIF_REG_GRF_CIFIO_CON] = CIF_REG(CIF_GRF_VI_CON0),
+};
+
 static const struct rkcif_hw_match_data px30_cif_match_data = {
 	.chip_id = CHIP_PX30_CIF,
 	.clks = px30_cif_clks,
@@ -539,6 +656,16 @@ static const struct rkcif_hw_match_data rv1126_cif_lite_match_data = {
 	.cif_regs = rv1126_cif_lite_regs,
 };
 
+static const struct rkcif_hw_match_data rk3568_cif_match_data = {
+	.chip_id = CHIP_RK3568_CIF,
+	.clks = rk3568_cif_clks,
+	.clks_num = ARRAY_SIZE(rk3568_cif_clks),
+	.rsts = rk3568_cif_rsts,
+	.rsts_num = ARRAY_SIZE(rk3568_cif_rsts),
+	.cif_regs = rk3568_cif_regs,
+};
+
+
 static const struct of_device_id rkcif_plat_of_match[] = {
 	{
 		.compatible = "rockchip,px30-cif",
@@ -564,6 +691,10 @@ static const struct of_device_id rkcif_plat_of_match[] = {
 		.compatible = "rockchip,rk3368-cif",
 		.data = &rk3368_cif_match_data,
 	},
+	{
+		.compatible = "rockchip,rk3568-cif",
+		.data = &rk3568_cif_match_data,
+	},
 	{
 		.compatible = "rockchip,rv1126-cif",
 		.data = &rv1126_cif_match_data,
@@ -708,7 +839,8 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	cif_hw->chip_id = data->chip_id;
 	if (data->chip_id == CHIP_RK1808_CIF ||
 	    data->chip_id == CHIP_RV1126_CIF ||
-	    data->chip_id == CHIP_RV1126_CIF_LITE) {
+	    data->chip_id == CHIP_RV1126_CIF_LITE ||
+	    data->chip_id == CHIP_RK3568_CIF) {
 		res = platform_get_resource_byname(pdev,
 						   IORESOURCE_MEM,
 						   "cif_regs");
@@ -776,7 +908,8 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 
 	if (data->chip_id != CHIP_RK1808_CIF &&
 	    data->chip_id != CHIP_RV1126_CIF &&
-	    data->chip_id != CHIP_RV1126_CIF_LITE) {
+	    data->chip_id != CHIP_RV1126_CIF_LITE &&
+	    data->chip_id != CHIP_RK3568_CIF) {
 		cif_dev = devm_kzalloc(dev, sizeof(*cif_dev), GFP_KERNEL);
 		if (!cif_dev)
 			return -ENOMEM;
@@ -796,7 +929,8 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	rkcif_hw_soft_reset(cif_hw, true);
 
 	if (data->chip_id == CHIP_RK1808_CIF ||
-	    data->chip_id == CHIP_RV1126_CIF) {
+	    data->chip_id == CHIP_RV1126_CIF ||
+	    data->chip_id == CHIP_RK3568_CIF) {
 		platform_driver_register(&rkcif_plat_drv);
 		platform_driver_register(&rkcif_subdev_driver);
 	}
@@ -814,7 +948,8 @@ static int rkcif_plat_remove(struct platform_device *pdev)
 
 	if (cif_hw->chip_id != CHIP_RK1808_CIF &&
 	    cif_hw->chip_id != CHIP_RV1126_CIF &&
-	    cif_hw->chip_id != CHIP_RV1126_CIF_LITE)
+	    cif_hw->chip_id != CHIP_RV1126_CIF_LITE &&
+	    cif_hw->chip_id != CHIP_RK3568_CIF)
 		rkcif_plat_uninit(cif_hw->cif_dev[0]);
 
 	return 0;
diff --git a/drivers/media/platform/rockchip/cif/hw.h b/drivers/media/platform/rockchip/cif/hw.h
index 79f357ef6199..82adfd185f00 100644
--- a/drivers/media/platform/rockchip/cif/hw.h
+++ b/drivers/media/platform/rockchip/cif/hw.h
@@ -33,15 +33,20 @@
 #define write_cif_reg_and(base, addr, val) \
 	writel(readl((addr) + (base)) & (val), (addr) + (base))
 
+/*
+ * add new chip id in tail in time order
+ * by increasing to distinguish cif version
+ */
 enum rkcif_chip_id {
 	CHIP_PX30_CIF,
-	CHIP_RK1808_CIF,
 	CHIP_RK3128_CIF,
 	CHIP_RK3288_CIF,
 	CHIP_RK3328_CIF,
 	CHIP_RK3368_CIF,
+	CHIP_RK1808_CIF,
 	CHIP_RV1126_CIF,
 	CHIP_RV1126_CIF_LITE,
+	CHIP_RK3568_CIF,
 };
 
 struct rkcif_hw_match_data {
diff --git a/drivers/media/platform/rockchip/cif/regs.h b/drivers/media/platform/rockchip/cif/regs.h
index 35a36d92397e..c0a130451fb4 100644
--- a/drivers/media/platform/rockchip/cif/regs.h
+++ b/drivers/media/platform/rockchip/cif/regs.h
@@ -49,6 +49,18 @@ enum cif_reg_index {
 	CIF_REG_DVP_CUR_DST,
 	CIF_REG_DVP_LAST_LINE,
 	CIF_REG_DVP_LAST_PIX,
+	CIF_REG_DVP_FRM0_ADDR_Y_ID1,
+	CIF_REG_DVP_FRM0_ADDR_UV_ID1,
+	CIF_REG_DVP_FRM1_ADDR_Y_ID1,
+	CIF_REG_DVP_FRM1_ADDR_UV_ID1,
+	CIF_REG_DVP_FRM0_ADDR_Y_ID2,
+	CIF_REG_DVP_FRM0_ADDR_UV_ID2,
+	CIF_REG_DVP_FRM1_ADDR_Y_ID2,
+	CIF_REG_DVP_FRM1_ADDR_UV_ID2,
+	CIF_REG_DVP_FRM0_ADDR_Y_ID3,
+	CIF_REG_DVP_FRM0_ADDR_UV_ID3,
+	CIF_REG_DVP_FRM1_ADDR_Y_ID3,
+	CIF_REG_DVP_FRM1_ADDR_UV_ID3,
 	/* mipi & lvds registers index */
 	CIF_REG_MIPI_LVDS_ID0_CTRL0,
 	CIF_REG_MIPI_LVDS_ID0_CTRL1,
@@ -102,6 +114,10 @@ enum cif_reg_index {
 	CIF_REG_MIPI_LVDS_ID1_CROP_START,
 	CIF_REG_MIPI_LVDS_ID2_CROP_START,
 	CIF_REG_MIPI_LVDS_ID3_CROP_START,
+	CIF_REG_MIPI_FRAME_NUM_VC0,
+	CIF_REG_MIPI_FRAME_NUM_VC1,
+	CIF_REG_MIPI_FRAME_NUM_VC2,
+	CIF_REG_MIPI_FRAME_NUM_VC3,
 	CIF_REG_LVDS_SAV_EAV_ACT0_ID0,
 	CIF_REG_LVDS_SAV_EAV_BLK0_ID0,
 	CIF_REG_LVDS_SAV_EAV_ACT1_ID0,
@@ -158,6 +174,7 @@ enum cif_reg_index {
 #define CIF_WBC_CNT			0x40
 #define CIF_CROP			0x44
 #define RV1126_CIF_CROP			0x34
+#define RK3568_CIF_FIFO_ENTRY		0x38
 #define CIF_SCL_CTRL			0x48
 #define CIF_PATH_SEL			0x48
 #define CIF_SCL_DST			0x4c
@@ -174,6 +191,18 @@ enum cif_reg_index {
 #define CIF_LAST_PIX			0x6c
 #define RV1126_CIF_LAST_PIX		0x48
 #define CIF_MULTI_ID			0x10
+#define CIF_FRM0_ADDR_Y_ID1		0x50
+#define CIF_FRM0_ADDR_UV_ID1		0x54
+#define CIF_FRM1_ADDR_Y_ID1		0x58
+#define CIF_FRM1_ADDR_UV_ID1		0x5c
+#define CIF_FRM0_ADDR_Y_ID2		0x60
+#define CIF_FRM0_ADDR_UV_ID2		0x64
+#define CIF_FRM1_ADDR_Y_ID2		0x68
+#define CIF_FRM1_ADDR_UV_ID2		0x6c
+#define CIF_FRM0_ADDR_Y_ID3		0x70
+#define CIF_FRM0_ADDR_UV_ID3		0x74
+#define CIF_FRM1_ADDR_Y_ID3		0x78
+#define CIF_FRM1_ADDR_UV_ID3		0x7c
 
 #define CIF_FETCH_Y_LAST_LINE(val)	((val) & 0x1fff)
 /* Check if swap y and c in bt1120 mode */
@@ -234,6 +263,10 @@ enum cif_reg_index {
 #define CIF_CSI_ID1_CROP_START		0x140
 #define CIF_CSI_ID2_CROP_START		0x144
 #define CIF_CSI_ID3_CROP_START		0x148
+#define CIF_CSI_FRAME_NUM_VC0		0x14c
+#define CIF_CSI_FRAME_NUM_VC1		0x150
+#define CIF_CSI_FRAME_NUM_VC2		0x154
+#define CIF_CSI_FRAME_NUM_VC3		0x158
 #define CIF_LVDS_SAV_EAV_ACT0_ID0	0x150
 #define CIF_LVDS_SAV_EAV_BLK0_ID0	0x154
 #define CIF_LVDS_SAV_EAV_ACT1_ID0	0x158
@@ -309,10 +342,12 @@ enum cif_reg_index {
 #define HSY_HIGH_ACTIVE			(0x00 << 1)
 #define INPUT_MODE_YUV			(0x00 << 2)
 #define INPUT_MODE_PAL			(0x02 << 2)
+#define INPUT_MODE_BT656_YUV422		(0x02 << 2)
 #define INPUT_MODE_NTSC			(0x03 << 2)
 #define INPUT_MODE_BT1120		(0x07 << 2)
 #define INPUT_MODE_RAW			(0x04 << 2)
 #define INPUT_MODE_JPEG			(0x05 << 2)
+#define INPUT_MODE_SONY_RAW		(0x05 << 2)
 #define INPUT_MODE_MIPI			(0x06 << 2)
 #define YUV_INPUT_ORDER_UYVY		(0x00 << 5)
 #define YUV_INPUT_ORDER_YVYU		(0x01 << 5)
@@ -386,6 +421,10 @@ enum cif_reg_index {
 #define CSI_DISABLE_CROP		(0x0 << 5)
 #define CSI_ENABLE_CROP			(0x1 << 5)
 #define CSI_ENABLE_MIPI_COMPACT		(0x1 << 6)
+#define CSI_YUV_INPUT_ORDER_UYVY	(0x0 << 16)
+#define CSI_YUV_INPUT_ORDER_VYUY	(0x1 << 16)
+#define CSI_YUV_INPUT_ORDER_YUYV	(0x2 << 16)
+#define CSI_YUV_INPUT_ORDER_YVYU	(0x3 << 16)
 
 #define LVDS_ENABLE_CAPTURE		(0x1 << 16)
 #define LVDS_MODE(mode)			(((mode) & 0x7) << 17)
@@ -551,5 +590,8 @@ enum cif_reg_index {
 #define CIF_SAMPLING_EDGE_DOUBLE	(0x01000100)
 #define CIF_SAMPLING_EDGE_SINGLE	(0x01000000)
 #define CIF_PCLK_DELAY_NUM(num)	(0x00ff0000 | ((num) & 0xff))
+#define CIF_GRF_VI_CON0			(0x340)
+#define RK3568_CIF_PCLK_SAMPLING_EDGE_RISING	(0x10001000)
+#define RK3568_CIF_PCLK_SAMPLING_EDGE_FALLING	(0x10000000)
 
 #endif
diff --git a/drivers/media/platform/rockchip/cif/version.h b/drivers/media/platform/rockchip/cif/version.h
index b8f4bcf9bce5..42294454b992 100644
--- a/drivers/media/platform/rockchip/cif/version.h
+++ b/drivers/media/platform/rockchip/cif/version.h
@@ -49,6 +49,8 @@
  *1. add proc interface
  *2. add reset mechanism to resume when csi crc err
  *3. support bt1120 single path
+ *v0.1.9
+ *1. support rk3568 cif
  */
 
 #define RKCIF_DRIVER_VERSION RKCIF_API_VERSION
diff --git a/include/uapi/linux/rk-camera-module.h b/include/uapi/linux/rk-camera-module.h
index e992b5b16987..776a6cbee5d6 100644
--- a/include/uapi/linux/rk-camera-module.h
+++ b/include/uapi/linux/rk-camera-module.h
@@ -52,6 +52,9 @@
 #define RKMODULE_SET_QUICK_STREAM	\
 	_IOW('V', BASE_VIDIOC_PRIVATE + 10, __u32)
 
+#define RKMODULE_GET_BT656_INTF_TYPE	\
+	_IOR('V', BASE_VIDIOC_PRIVATE + 11, __u32)
+
 /**
  * struct rkmodule_base_inf - module base information
  *
@@ -313,4 +316,13 @@ struct rkmodule_nr_switch_threshold {
 	__u32 div_coeff;
 } __attribute__ ((packed));
 
+/**
+ * enum rkmodule_bt656_intf_type
+ * to support sony bt656 raw
+ */
+enum rkmodule_bt656_intf_type {
+	BT656_STD_RAW = 0,
+	BT656_SONY_RAW,
+};
+
 #endif /* _UAPI_RKMODULE_CAMERA_H */
-- 
2.35.3

