From 51a94209b8d78035e1414da21f2d856c98a0413b Mon Sep 17 00:00:00 2001
From: Caesar Wang <wxt@rock-chips.com>
Date: Mon, 19 Nov 2018 16:46:31 +0800
Subject: [PATCH] net/rfkill: bt: improve to set the bt power

There is a bt power issue on Debian OS, the blueman app
will callback to enable the bluetooth power during the bringup.

As below log the system bringup about 10s.
[BT_RFKILL]: rfkill_rk_set_power: set bt wake_host pin output high!
[BT_RFKILL]: rfkill_rk_set_power: enable bt reset pin!
[BT_RFKILL]: ENABLE UART_RTS
[BT_RFKILL]: DISABLE UART_RTS
[BT_RFKILL]: bt turn on power
...

So the rfkill-bt driver should judge the power status, otherwise the
blueman app will cause the bluetoolth timeout error. e.g:
root@linaro-alip:/# bluetoothctl
[NEW] Controller 3B:A0:90:48:46:40 linaro-alip [default]
[bluetooth]# scan on
Discovery started
[   33.076522] Bluetooth: hci0 command 0x2005 tx timeout
[   35.080473] Bluetooth: hci0 command 0x200b tx timeout
[   37.084505] Bluetooth: hci0 command 0x200c tx timeout

Change-Id: Ib0dd99a83c64dbaf469c3eb7a9226a2d83c53e6f
Signed-off-by: Caesar Wang <wxt@rock-chips.com>
---
 net/rfkill/rfkill-bt.c | 54 +++++++++++++++++++++++-------------------
 1 file changed, 30 insertions(+), 24 deletions(-)

diff --git a/net/rfkill/rfkill-bt.c b/net/rfkill/rfkill-bt.c
index b19e0fb9ce82..29d88313e4a8 100644
--- a/net/rfkill/rfkill-bt.c
+++ b/net/rfkill/rfkill-bt.c
@@ -296,20 +296,23 @@ static int rfkill_rk_set_power(void *data, bool blocked)
 		msleep(20);
 	}
 
-	if (gpio_is_valid(poweron->io) && gpio_is_valid(wake_host->io))
-        {
-		gpio_direction_output(poweron->io, !poweron->enable);
-		msleep(20);
-		gpio_direction_output(poweron->io, poweron->enable);
-		msleep(20);
-		gpio_direction_input(wake_host->io);
-		LOG("%s: set bt wake_host pin input!\n", __func__);
+	if (gpio_is_valid(poweron->io) && gpio_is_valid(wake_host->io)) {
+		if (gpio_get_value(poweron->io) == !poweron->enable) {
+			gpio_direction_output(poweron->io, !poweron->enable);
+			msleep(20);
+			gpio_direction_output(poweron->io, poweron->enable);
+			msleep(20);
+			gpio_direction_input(wake_host->io);
+			LOG("%s: set bt wake_host pin input!\n", __func__);
+		}
         }
-		if (gpio_is_valid(reset->io))
-        {
+
+	if (gpio_is_valid(reset->io)) {
+		if (gpio_get_value(reset->io) == !reset->enable) {
 			gpio_direction_output(reset->io, !reset->enable);
-            msleep(20);
+			msleep(20);
 			gpio_direction_output(reset->io, reset->enable);
+		}
         }
 
         if (pinctrl != NULL && gpio_is_valid(rts->io))
@@ -326,20 +329,23 @@ static int rfkill_rk_set_power(void *data, bool blocked)
         bt_power_state = 1;
     	LOG("bt turn on power\n");
 	} else {
-            if (gpio_is_valid(poweron->io))
-            {      
-                gpio_direction_output(poweron->io, !poweron->enable);
-                msleep(20);
-            }
-
-            bt_power_state = 0;
-    		LOG("bt shut off power\n");
-		if (gpio_is_valid(reset->io))
-        {      
-			gpio_direction_output(reset->io, !reset->enable);/* bt reset active*/
-            msleep(20);
-        }
+		if (gpio_is_valid(poweron->io)) {
+			if (gpio_get_value(poweron->io) == poweron->enable) {
+				gpio_direction_output(poweron->io,
+						      !poweron->enable);
+				msleep(20);
+			}
+		}
 
+		bt_power_state = 0;
+		LOG("bt shut off power\n");
+		if (gpio_is_valid(reset->io)) {
+			if (gpio_get_value(reset->io) == reset->enable) {
+				gpio_direction_output(reset->io,
+						      !reset->enable);
+				msleep(20);
+			}
+		}
 	}
 
 	return 0;
-- 
2.35.3

