From 5625ebbdc518aa661da885ec9a4a23483a8b5869 Mon Sep 17 00:00:00 2001
From: Zhou Jing <tracy.zhou@rock-chips.com>
Date: Thu, 2 Apr 2020 20:13:11 +0800
Subject: [PATCH] video: rockchip: mpp: automatic frequency on large resolution

Signed-off-by: Zhou Jing <tracy.zhou@rock-chips.com>
Change-Id: I70150a22a535cd13a6618a66a7c0f5c20790d58f
---
 drivers/video/rockchip/mpp/mpp_rkvdec.c | 70 +++++++++++++++++++++++++
 drivers/video/rockchip/mpp/mpp_vdpu1.c  | 63 ++++++++++++++++++++++
 2 files changed, 133 insertions(+)

diff --git a/drivers/video/rockchip/mpp/mpp_rkvdec.c b/drivers/video/rockchip/mpp/mpp_rkvdec.c
index 7c03d66f920c..d4b316ec4064 100644
--- a/drivers/video/rockchip/mpp/mpp_rkvdec.c
+++ b/drivers/video/rockchip/mpp/mpp_rkvdec.c
@@ -78,7 +78,10 @@
 
 #define RKVDEC_REG_SYS_CTRL		0x008
 #define RKVDEC_REG_SYS_CTRL_INDEX	(2)
+#define RKVDEC_RGE_WIDTH_INDEX		(3)
 #define RKVDEC_GET_FORMAT(x)		(((x) >> 20) & 0x3)
+#define REVDEC_GET_PROD_NUM(x)		(((x) >> 16) & 0xffff)
+#define RKVDEC_GET_WIDTH(x)		(((x) & 0x3ff) << 4)
 #define RKVDEC_FMT_H265D		(0)
 #define RKVDEC_FMT_H264D		(1)
 #define RKVDEC_FMT_VP9D			(2)
@@ -125,6 +128,12 @@ enum SET_CLK_EVENT {
 	EVENT_BUTT,
 };
 
+enum RKVDEC_HW_ID {
+	HEVC_DEC_ID_6867 = 0x6867,
+	RKVDEC_ID_6876   = 0x6876,
+	RKVDEC_ID_3410   = 0x3410,
+};
+
 struct rkvdec_task {
 	struct mpp_task mpp_task;
 	struct mpp_hw_info *hw_info;
@@ -1440,6 +1449,45 @@ static int rkvdec_3328_get_freq(struct mpp_dev *mpp,
 	return 0;
 }
 
+static int rkvdec_probe_width(struct mpp_dev *mpp,
+			      struct mpp_task *mpp_task)
+{
+	u32 width = 0;
+	struct rkvdec_task *task = to_rkvdec_task(mpp_task);
+	u32 prod_num = REVDEC_GET_PROD_NUM(mpp->var->hw_info->hw_id);
+
+	switch (prod_num) {
+	case HEVC_DEC_ID_6867:
+	case RKVDEC_ID_6876:
+	case RKVDEC_ID_3410:
+		width = RKVDEC_GET_WIDTH(task->reg[RKVDEC_RGE_WIDTH_INDEX]);
+		break;
+	default:
+		break;
+	}
+
+	return width;
+}
+
+static int rkvdec_3368_get_freq(struct mpp_dev *mpp,
+				struct mpp_task *mpp_task)
+{
+	struct rkvdec_task *task = to_rkvdec_task(mpp_task);
+	u32 width = rkvdec_probe_width(mpp, mpp_task);
+
+	if (width > 2560) {
+		task->aclk_freq = 600;
+		task->clk_cabac_freq = 400;
+		task->clk_core_freq = 400;
+	} else {
+		task->aclk_freq = 300;
+		task->clk_cabac_freq = 200;
+		task->clk_core_freq = 200;
+	}
+
+	return 0;
+}
+
 static int rkvdec_set_freq(struct mpp_dev *mpp,
 			   struct mpp_task *mpp_task)
 {
@@ -1575,6 +1623,16 @@ static struct mpp_hw_ops rkvdec_3399_hw_ops = {
 	.reset = rkvdec_sip_reset,
 };
 
+static struct mpp_hw_ops rkvdec_3368_hw_ops = {
+	.init = rkvdec_init,
+	.power_on = rkvdec_power_on,
+	.power_off = rkvdec_power_off,
+	.get_freq = rkvdec_3368_get_freq,
+	.set_freq = rkvdec_set_freq,
+	.reduce_freq = rkvdec_reduce_freq,
+	.reset = rkvdec_sip_reset,
+};
+
 static struct mpp_dev_ops rkvdec_v1_dev_ops = {
 	.alloc_task = rkvdec_alloc_task,
 	.prepare = rkvdec_prepare,
@@ -1616,6 +1674,14 @@ static const struct mpp_dev_var rk_hevcdec_data = {
 	.dev_ops = &rkvdec_v1_dev_ops,
 };
 
+static const struct mpp_dev_var rk_hevcdec_3368_data = {
+	.device_type = MPP_DEVICE_HEVC_DEC,
+	.hw_info = &rk_hevcdec_hw_info,
+	.trans_info = rk_hevcdec_trans,
+	.hw_ops = &rkvdec_3368_hw_ops,
+	.dev_ops = &rkvdec_v1_dev_ops,
+};
+
 static const struct mpp_dev_var rk_hevcdec_px30_data = {
 	.device_type = MPP_DEVICE_HEVC_DEC,
 	.hw_info = &rk_hevcdec_hw_info,
@@ -1657,6 +1723,10 @@ static const struct of_device_id mpp_rkvdec_dt_match[] = {
 		.compatible = "rockchip,hevc-decoder-px30",
 		.data = &rk_hevcdec_px30_data,
 	},
+	{
+		.compatible = "rockchip,hevc-decoder-rk3368",
+		.data = &rk_hevcdec_3368_data,
+	},
 	{
 		.compatible = "rockchip,rkv-decoder-v1",
 		.data = &rkvdec_v1_data,
diff --git a/drivers/video/rockchip/mpp/mpp_vdpu1.c b/drivers/video/rockchip/mpp/mpp_vdpu1.c
index dfc2bb4fced2..745973316d58 100644
--- a/drivers/video/rockchip/mpp/mpp_vdpu1.c
+++ b/drivers/video/rockchip/mpp/mpp_vdpu1.c
@@ -60,7 +60,10 @@
 
 #define VDPU1_REG_SYS_CTRL		0x00c
 #define VDPU1_REG_SYS_CTRL_INDEX	(3)
+#define VDPU1_RGE_WIDTH_INDEX		(4)
 #define	VDPU1_GET_FORMAT(x)		(((x) >> 28) & 0xf)
+#define VDPU1_GET_PROD_NUM(x)		(((x) >> 16) & 0xffff)
+#define VDPU1_GET_WIDTH(x)		(((x) & 0xff800000) >> 19)
 #define	VDPU1_FMT_H264D			0
 #define	VDPU1_FMT_MPEG4D		1
 #define	VDPU1_FMT_H263D			2
@@ -87,6 +90,11 @@
 #define to_vdpu_dev(dev)		\
 		container_of(dev, struct vdpu_dev, mpp)
 
+enum VPUD1_HW_ID {
+	VDPU1_ID_0102 = 0x0102,
+	VDPU1_ID_9190 = 0x6731,
+};
+
 struct vdpu_task {
 	struct mpp_task mpp_task;
 	struct mpp_hw_info *hw_info;
@@ -590,6 +598,39 @@ static int vdpu_get_freq(struct mpp_dev *mpp,
 	return 0;
 }
 
+static int vdpu_probe_width(struct mpp_dev *mpp,
+			    struct mpp_task *mpp_task)
+{
+	u32 width = 0;
+	struct vdpu_task *task = to_vdpu_task(mpp_task);
+	u32 prod_num = VDPU1_GET_PROD_NUM(mpp->var->hw_info->hw_id);
+
+	switch (prod_num) {
+	case VDPU1_ID_0102:
+	case VDPU1_ID_9190:
+		width = VDPU1_GET_WIDTH(task->reg[VDPU1_RGE_WIDTH_INDEX]);
+		break;
+	default:
+		break;
+	}
+
+	return width;
+}
+
+static int vdpu_3368_get_freq(struct mpp_dev *mpp,
+			      struct mpp_task *mpp_task)
+{
+	struct vdpu_task *task = to_vdpu_task(mpp_task);
+	u32 width = vdpu_probe_width(mpp, mpp_task);
+
+	if (width > 2560)
+		task->aclk_freq = 600;
+	else
+		task->aclk_freq = 300;
+
+	return 0;
+}
+
 static int vdpu_set_freq(struct mpp_dev *mpp,
 			 struct mpp_task *mpp_task)
 {
@@ -698,6 +739,16 @@ static struct mpp_hw_ops vdpu_v1_hw_ops = {
 	.reset = vdpu_reset,
 };
 
+static struct mpp_hw_ops vdpu_3368_hw_ops = {
+	.init = vdpu_init,
+	.power_on = vdpu_power_on,
+	.power_off = vdpu_power_off,
+	.get_freq = vdpu_3368_get_freq,
+	.set_freq = vdpu_set_freq,
+	.reduce_freq = vdpu_reduce_freq,
+	.reset = vdpu_reset,
+};
+
 static struct mpp_dev_ops vdpu_v1_dev_ops = {
 	.alloc_task = vdpu_alloc_task,
 	.prepare = vdpu_prepare,
@@ -717,6 +768,14 @@ static const struct mpp_dev_var vdpu_v1_data = {
 	.dev_ops = &vdpu_v1_dev_ops,
 };
 
+static const struct mpp_dev_var vdpu_3368_data = {
+	.device_type = MPP_DEVICE_VDPU1,
+	.hw_info = &vdpu_v1_hw_info,
+	.trans_info = vdpu_v1_trans,
+	.hw_ops = &vdpu_3368_hw_ops,
+	.dev_ops = &vdpu_v1_dev_ops,
+};
+
 static const struct mpp_dev_var avsd_plus_data = {
 	.device_type = MPP_DEVICE_AVSPLUS_DEC,
 	.hw_info = &vdpu_v1_hw_info,
@@ -730,6 +789,10 @@ static const struct of_device_id mpp_vdpu1_dt_match[] = {
 		.compatible = "rockchip,vpu-decoder-v1",
 		.data = &vdpu_v1_data,
 	},
+	{
+		.compatible = "rockchip,vpu-decoder-rk3368",
+		.data = &vdpu_3368_data,
+	},
 	{
 		.compatible = "rockchip,avs-plus-decoder",
 		.data = &avsd_plus_data,
-- 
2.35.3

