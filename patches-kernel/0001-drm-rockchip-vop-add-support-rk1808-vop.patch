From 5babaa7e5f27cfa1a8ec50124b6d20a4077d2df6 Mon Sep 17 00:00:00 2001
From: Sandy Huang <hjc@rock-chips.com>
Date: Wed, 8 Aug 2018 15:15:13 +0800
Subject: [PATCH] drm/rockchip: vop: add support rk1808 vop

rk1808 have vop lite and vop raw:
1. vop lite: support win1 for display, vop->dsi tx->dphy->lcd.
2. vop raw: transfer data from ddr to csi tx.

Change-Id: I11229b5e61e66e72e4228e7e0ac966f1f85cb49f
Signed-off-by: Sandy Huang <hjc@rock-chips.com>
---
 .../display/rockchip/rockchip-vop.txt         |   2 +
 drivers/gpu/drm/rockchip/rockchip_drm_drv.c   |  18 ++
 drivers/gpu/drm/rockchip/rockchip_drm_drv.h   |   5 +
 drivers/gpu/drm/rockchip/rockchip_drm_vop.c   | 112 ++++++++-
 drivers/gpu/drm/rockchip/rockchip_drm_vop.h   |  41 ++-
 drivers/gpu/drm/rockchip/rockchip_vop_reg.c   | 233 ++++++++++++++++++
 drivers/gpu/drm/rockchip/rockchip_vop_reg.h   |  55 +++++
 include/uapi/drm/rockchip_drm.h               |   1 +
 8 files changed, 462 insertions(+), 5 deletions(-)

diff --git a/Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt b/Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt
index 7986e50ab699..dba6ffca474d 100644
--- a/Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt
+++ b/Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt
@@ -12,6 +12,8 @@ Required properties:
 		"rockchip,px30-vop-big";
 		"rockchip,px30-vop-lit";
 		"rockchip,rk3308-vop";
+		"rockchip,rk1808-vop-lit";
+		"rockchip,rk1808-vop-raw";
 		"rockchip,rk3288-vop-lit";
 		"rockchip,rk3288-vop-big";
 		"rockchip,rk3368-vop";
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
index c24c6d907549..e10110cb7453 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
@@ -1233,6 +1233,24 @@ static int rockchip_drm_create_properties(struct drm_device *dev)
 		return -ENOMEM;
 	private->alpha_scale_prop = prop;
 
+	prop = drm_property_create_range(dev, DRM_MODE_PROP_ATOMIC,
+					 "PDAF_TYPE", 0, 4);
+	if (!prop)
+		return -ENOMEM;
+	private->pdaf_type = prop;
+
+	prop = drm_property_create_range(dev, DRM_MODE_PROP_ATOMIC,
+					 "WORK_MODE", 0, 6);
+	if (!prop)
+		return -ENOMEM;
+	private->work_mode = prop;
+
+	prop = drm_property_create_range(dev, DRM_MODE_PROP_ATOMIC,
+					 "PDAF_DATA_TYPE", 0, 255);
+	if (!prop)
+		return -ENOMEM;
+	private->pdaf_data_type = prop;
+
 	return drm_mode_create_tv_properties(dev, 0, NULL);
 }
 
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
index 0a6b9cd580f9..757a50d702e4 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
@@ -132,6 +132,8 @@ struct rockchip_crtc_state {
 	int bcsh_en;
 	int color_space;
 	int eotf;
+	int pdaf_work_mode;
+	int pdaf_type;
 	struct rockchip_hdr_state hdr;
 	struct drm_framebuffer *crtc_primary_fb;
 };
@@ -182,6 +184,9 @@ struct rockchip_drm_private {
 	struct drm_property *global_alpha_prop;
 	struct drm_property *blend_mode_prop;
 	struct drm_property *alpha_scale_prop;
+	struct drm_property *pdaf_type;
+	struct drm_property *work_mode;
+	struct drm_property *pdaf_data_type;
 	void *backlight;
 	struct drm_fb_helper *fbdev_helper;
 	struct drm_gem_object *fbdev_bo;
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
index a2c1d85bba95..f23cf80b9764 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
@@ -179,6 +179,7 @@ struct vop_plane_state {
 	int global_alpha;
 	int blend_mode;
 	unsigned long offset;
+	int pdaf_data_type;
 };
 
 struct rockchip_mcu_timing {
@@ -560,6 +561,9 @@ static enum vop_data_format vop_convert_format(uint32_t format)
 	case DRM_FORMAT_NV24:
 	case DRM_FORMAT_NV24_10:
 		return VOP_FMT_YUV444SP;
+	case DRM_FORMAT_RGB332:
+	case DRM_FORMAT_BGR233:
+		return VOP_RAW8;
 	default:
 		DRM_ERROR("unsupport format[%08x]\n", format);
 		return -EINVAL;
@@ -1640,7 +1644,7 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
 	struct drm_framebuffer *fb = state->fb;
 	unsigned int actual_w, actual_h;
 	unsigned int dsp_stx, dsp_sty;
-	uint32_t act_info, dsp_info, dsp_st;
+	uint32_t act_info, dsp_info, dsp_st, ex_vact_st, ex_vact_end;
 	struct drm_rect *src = &vop_plane_state->src;
 	struct drm_rect *dest = &vop_plane_state->dest;
 	const uint32_t *y2r_table = vop_plane_state->y2r_table;
@@ -1695,21 +1699,38 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
 	dsp_stx = dest->x1 + mode->crtc_htotal - mode->crtc_hsync_start;
 	dsp_sty = dest->y1 + mode->crtc_vtotal - mode->crtc_vsync_start;
 	dsp_st = dsp_sty << 16 | (dsp_stx & 0xffff);
+	vop = to_vop(state->crtc);
+
+	if (VOP_WIN_SUPPORT(vop, win, vact_st_end_info)) {
+		if (win->feature & WIN_FEATURE_PDAF_AFTER_VBLANK)
+			ex_vact_st = dest->y1 + mode->crtc_vtotal -
+				mode->crtc_vsync_start + mode->crtc_vdisplay;
+		else
+			ex_vact_st = dest->y1 + mode->crtc_vsync_end -
+				mode->crtc_vsync_start;
+		ex_vact_end = ex_vact_st + drm_rect_height(dest);
+		VOP_WIN_SET(vop, win, vact_st_end_info,
+			    ex_vact_st << 16 | ex_vact_end);
+		VOP_WIN_SET(vop, win, data_type,
+			    vop_plane_state->pdaf_data_type);
+		/* todo: default raw8 format for wc and vir */
+		VOP_WIN_SET(vop, win, ex_wc, actual_w);
+	}
 
 	ymirror = state->rotation & BIT(DRM_REFLECT_Y) ||
 		  (rockchip_fb_is_logo(fb) && vop_plane_state->logo_ymirror);
 	xmirror = !!(state->rotation & BIT(DRM_REFLECT_X));
 
-	vop = to_vop(state->crtc);
 	s = to_rockchip_crtc_state(crtc->state);
 
 	spin_lock(&vop->reg_lock);
-
 	VOP_WIN_SET(vop, win, xmirror, xmirror);
 	VOP_WIN_SET(vop, win, ymirror, ymirror);
 	VOP_WIN_SET(vop, win, format, vop_plane_state->format);
 	VOP_WIN_SET(vop, win, yrgb_vir, fb->pitches[0] >> 2);
 	VOP_WIN_SET(vop, win, yrgb_mst, vop_plane_state->yrgb_mst);
+	VOP_WIN_SET(vop, win, yrgb_mst1, vop_plane_state->yrgb_mst);
+
 	if (is_yuv_support(fb->pixel_format)) {
 		VOP_WIN_SET(vop, win, uv_vir, fb->pitches[1] >> 2);
 		VOP_WIN_SET(vop, win, uv_mst, vop_plane_state->uv_mst);
@@ -1907,6 +1928,11 @@ static int vop_atomic_plane_set_property(struct drm_plane *plane,
 		return 0;
 	}
 
+	if (property == private->pdaf_data_type) {
+		plane_state->pdaf_data_type = val;
+		return 0;
+	}
+
 	DRM_ERROR("failed to set vop plane property\n");
 	return -EINVAL;
 }
@@ -1950,6 +1976,11 @@ static int vop_atomic_plane_get_property(struct drm_plane *plane,
 		return 0;
 	}
 
+	if (property == private->pdaf_data_type) {
+		*val = plane_state->pdaf_data_type;
+		return 0;
+	}
+
 	DRM_ERROR("failed to get vop plane property\n");
 	return -EINVAL;
 }
@@ -3378,6 +3409,32 @@ static void vop_wait_for_irq_handler(struct vop *vop)
 	synchronize_irq(vop->irq);
 }
 
+static int vop_set_work_mode(struct vop *vop, enum vop_pdaf_mode mode)
+{
+	switch (mode) {
+	case VOP_HOLD_MODE:
+		VOP_CTRL_SET(vop, work_mode, 0x1);
+		break;
+	case VOP_BACKGROUND_MODE:
+		VOP_CTRL_SET(vop, dsp_background, 0xff);
+		VOP_CTRL_SET(vop, work_mode, 0x0);
+		break;
+	case VOP_NORMAL_MODE:
+		VOP_CTRL_SET(vop, work_mode, 0);
+		break;
+	case VOP_BYPASS_MODE:
+		VOP_CTRL_SET(vop, work_mode, 0x5);
+		break;
+	case VOP_ONEFRAME_MODE:
+		VOP_CTRL_SET(vop, work_mode, 0x1);
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
 static void vop_crtc_atomic_flush(struct drm_crtc *crtc,
 				  struct drm_crtc_state *old_crtc_state)
 {
@@ -3447,6 +3504,18 @@ static void vop_crtc_atomic_flush(struct drm_crtc *crtc,
 
 	vop_update_cabc(crtc, old_crtc_state);
 	vop_update_hdr(crtc, old_crtc_state);
+	if (VOP_CTRL_SUPPORT(vop, pdaf_type)) {
+		vop_set_work_mode(vop, s->pdaf_work_mode);
+		if (s->pdaf_type) {
+			VOP_CTRL_SET(vop, pdaf_type, s->pdaf_type);
+			VOP_CTRL_SET(vop, pdaf_en, 1);
+		} else {
+			VOP_CTRL_SET(vop, pdaf_en, 0);
+		}
+
+		if (s->pdaf_work_mode == VOP_HOLD_MODE)
+			VOP_CTRL_SET(vop, frame_st, 1);
+	}
 
 	spin_lock_irqsave(&vop->irq_lock, flags);
 	vop->pre_overlay = s->hdr.pre_overlay;
@@ -3539,6 +3608,8 @@ static void vop_crtc_reset(struct drm_crtc *crtc)
 	s->right_margin = 100;
 	s->top_margin = 100;
 	s->bottom_margin = 100;
+	s->pdaf_work_mode = VOP_NORMAL_MODE;
+	s->pdaf_type = VOP_PDAF_TYPE_VBLANK;
 }
 
 static struct drm_crtc_state *vop_crtc_duplicate_state(struct drm_crtc *crtc)
@@ -3629,6 +3700,16 @@ static int vop_crtc_atomic_get_property(struct drm_crtc *crtc,
 		return 0;
 	}
 
+	if (property == private->pdaf_type) {
+		*val = s->pdaf_type;
+		return 0;
+	}
+
+	if (property == private->work_mode) {
+		*val = s->pdaf_work_mode;
+		return 0;
+	}
+
 	DRM_ERROR("failed to get vop crtc property\n");
 	return -EINVAL;
 }
@@ -3715,6 +3796,16 @@ static int vop_crtc_atomic_set_property(struct drm_crtc *crtc,
 								&replaced);
 	}
 
+	if (property == private->pdaf_type) {
+		s->pdaf_type = val;
+		return 0;
+	}
+
+	if (property == private->work_mode) {
+		s->pdaf_work_mode = val;
+		return 0;
+	}
+
 	DRM_ERROR("failed to set vop crtc property\n");
 	return -EINVAL;
 }
@@ -3913,6 +4004,8 @@ static int vop_plane_init(struct vop *vop, struct vop_win *win,
 		feature |= BIT(ROCKCHIP_DRM_PLANE_FEATURE_SDR2HDR);
 	if (win->feature & WIN_FEATURE_AFBDC)
 		feature |= BIT(ROCKCHIP_DRM_PLANE_FEATURE_AFBDC);
+	if (win->feature & WIN_FEATURE_PDAF_AFTER_VBLANK)
+		feature |= BIT(ROCKCHIP_DRM_PLANE_FEATURE_PDAF_POS);
 
 	drm_object_attach_property(&win->base.base, vop->plane_feature_prop,
 				   feature);
@@ -3925,6 +4018,10 @@ static int vop_plane_init(struct vop *vop, struct vop_win *win,
 	drm_object_attach_property(&win->base.base,
 				   private->blend_mode_prop, 0);
 
+	if (VOP_WIN_SUPPORT(vop, win, data_type))
+		drm_object_attach_property(&win->base.base,
+					   private->pdaf_data_type, 0x2a);
+
 	return 0;
 }
 
@@ -4084,6 +4181,11 @@ static int vop_create_crtc(struct vop *vop)
 		feature |= BIT(ROCKCHIP_DRM_CRTC_FEATURE_AFBDC);
 	drm_object_attach_property(&crtc->base, vop->feature_prop,
 				   feature);
+	if (VOP_CTRL_SUPPORT(vop, pdaf_type)) {
+		drm_object_attach_property(&crtc->base, private->pdaf_type, 0);
+		drm_object_attach_property(&crtc->base, private->work_mode, VOP_NORMAL_MODE);
+	}
+
 	if (vop->lut_regs) {
 		u16 *r_base, *g_base, *b_base;
 		u32 lut_len = vop->lut_len;
@@ -4172,6 +4274,7 @@ static int vop_win_init(struct vop *vop)
 		{ ROCKCHIP_DRM_PLANE_FEATURE_HDR2SDR, "hdr2sdr" },
 		{ ROCKCHIP_DRM_PLANE_FEATURE_SDR2HDR, "sdr2hdr" },
 		{ ROCKCHIP_DRM_PLANE_FEATURE_AFBDC, "afbdc" },
+		{ ROCKCHIP_DRM_PLANE_FEATURE_PDAF_POS, "pdaf_pos" },
 	};
 	static const struct drm_prop_enum_list crtc_props[] = {
 		{ ROCKCHIP_DRM_CRTC_FEATURE_AFBDC, "afbdc" },
@@ -4230,7 +4333,8 @@ static int vop_win_init(struct vop *vop)
 				BIT(ROCKCHIP_DRM_PLANE_FEATURE_ALPHA) |
 				BIT(ROCKCHIP_DRM_PLANE_FEATURE_HDR2SDR) |
 				BIT(ROCKCHIP_DRM_PLANE_FEATURE_SDR2HDR) |
-				BIT(ROCKCHIP_DRM_PLANE_FEATURE_AFBDC));
+				BIT(ROCKCHIP_DRM_PLANE_FEATURE_AFBDC) |
+				BIT(ROCKCHIP_DRM_PLANE_FEATURE_PDAF_POS));
 	if (!vop->plane_feature_prop) {
 		DRM_ERROR("failed to create feature property\n");
 		return -EINVAL;
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
index 5850572b40ff..618de17e608a 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
@@ -74,6 +74,13 @@ enum vop_data_format {
 	VOP_FMT_YUV444SP,
 };
 
+enum vop_raw_format {
+	VOP_RAW8	= 0,
+	VOP_RAW10,
+	VOP_RAW_RESERVED,
+	VOP_RAW16,
+};
+
 struct vop_reg_data {
 	uint32_t offset;
 	uint32_t value;
@@ -253,6 +260,13 @@ struct vop_ctrl {
 	struct vop_reg mcu_type;
 	struct vop_reg mcu_rw_bypass_port;
 
+	/* VOP RAW */
+	struct vop_reg frame_st;
+	struct vop_reg work_mode; /* bypass, pingpong, hold mode */
+	struct vop_reg pdaf_en;
+	struct vop_reg pdaf_type; /* hblank or vblank mode */
+	struct vop_reg pdaf_vc_num;
+
 	struct vop_reg reg_done_frm;
 	struct vop_reg cfg_done;
 };
@@ -415,6 +429,10 @@ struct vop_win_phy {
 	struct vop_reg global_alpha_val;
 	struct vop_reg key_color;
 	struct vop_reg key_en;
+	struct vop_reg yrgb_mst1;
+	struct vop_reg ex_wc;
+	struct vop_reg data_type;
+	struct vop_reg vact_st_end_info;
 };
 
 struct vop_win_data {
@@ -439,6 +457,7 @@ struct vop_grf_ctrl {
 #define WIN_FEATURE_SDR2HDR		BIT(1)
 #define WIN_FEATURE_PRE_OVERLAY		BIT(2)
 #define WIN_FEATURE_AFBDC		BIT(3)
+#define WIN_FEATURE_PDAF_AFTER_VBLANK	BIT(4)
 
 struct vop_rect {
 	int width;
@@ -480,6 +499,7 @@ struct vop_data {
 #define PWM_GEN_INTR			BIT(13)
 #define DMA_FINISH_INTR			BIT(14)
 #define FS_FIELD_INTR			BIT(15)
+#define FE_INTR				BIT(16)
 
 #define INTR_MASK			(DSP_HOLD_VALID_INTR | FS_INTR | \
 					 LINE_FLAG_INTR | BUS_ERROR_INTR | \
@@ -488,7 +508,8 @@ struct vop_data {
 					 WIN2_EMPTY_INTR | WIN3_EMPTY_INTR | \
 					 HWC_EMPTY_INTR | \
 					 POST_BUF_EMPTY_INTR | \
-					 DMA_FINISH_INTR | FS_FIELD_INTR)
+					 DMA_FINISH_INTR | FS_FIELD_INTR | \
+					 FE_INTR)
 
 #define DSP_LINE_NUM(x)			(((x) & 0x1fff) << 12)
 #define DSP_LINE_NUM_MASK		(0x1fff << 12)
@@ -593,6 +614,24 @@ enum vop_pol {
 	DEN_NEGATIVE   = 2,
 };
 
+enum vop_pdaf_mode {
+	VOP_HOLD_MODE = 0,
+	VOP_NORMAL_MODE,
+	VOP_PINGPONG_MODE,
+	VOP_BYPASS_MODE,
+	VOP_BACKGROUND_MODE,
+	VOP_ONEFRAME_MODE,
+	VOP_ONEFRAME_NOSEND_MODE
+};
+
+enum vop_pdaf_type {
+	VOP_PDAF_TYPE_DEFAULT = 0,
+	VOP_PDAF_TYPE_HBLANK,
+	VOP_PDAF_TYPE_VBLANK,
+	VOP_PDAF_TYPE_HBLANK_VBLANK,
+	VOP_PDAF_TYPE_INTERWEAVE,
+};
+
 #define FRAC_16_16(mult, div)    (((mult) << 16) / (div))
 #define SCL_FT_DEFAULT_FIXPOINT_SHIFT	12
 #define SCL_MAX_VSKIPLINES		4
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
index 5f517e193cc8..9c96d5614e54 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
+++ b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
@@ -69,6 +69,15 @@ static const uint32_t formats_win_lite[] = {
 	DRM_FORMAT_BGR565,
 };
 
+static const uint32_t formats_win_ex[] = {
+	DRM_FORMAT_XRGB8888,
+	DRM_FORMAT_ARGB8888,
+	DRM_FORMAT_XBGR8888,
+	DRM_FORMAT_ABGR8888,
+	DRM_FORMAT_RGB332,		/* raw8 */
+	DRM_FORMAT_BGR233,
+};
+
 static const struct vop_scl_extension rk3288_win_full_scl_ext = {
 	.cbcr_vsd_mode = VOP_REG(RK3288_WIN0_CTRL1, 0x1, 31),
 	.cbcr_vsu_mode = VOP_REG(RK3288_WIN0_CTRL1, 0x1, 30),
@@ -1662,6 +1671,226 @@ static const struct vop_data rk3308_vop = {
 	.win_size = ARRAY_SIZE(rk3366_vop_lit_win_data),
 };
 
+static const struct vop_grf_ctrl rk1808_vop_lite_grf_ctrl = {
+	.grf_dclk_inv = VOP_REG(RK1808_GRF_PD_VO_CON1, 0x1, 4),
+};
+
+static const struct vop_data rk1808_vop_lit = {
+	.version = VOP_VERSION(2, 8),
+	.max_input = {1920, 8192},
+	.max_output = {1920, 1080},
+	.ctrl = &px30_ctrl_data,
+	.intr = &rk3366_lit_intr,
+	.grf_ctrl = &rk1808_vop_lite_grf_ctrl,
+	.win = px30_vop_lit_win_data,
+	.win_size = ARRAY_SIZE(px30_vop_lit_win_data),
+};
+
+static const struct vop_ctrl rk1808_vop_raw_ctrl_data = {
+	.frame_st = VOP_REG(RK1808_SYS_CTRL0, 0x1, 0),
+	.work_mode = VOP_REG(RK1808_SYS_CTRL0, 0x7, 1),
+	.dsp_black = VOP_REG(RK1808_SYS_CTRL0, 0x1, 11),
+	.dsp_outzero = VOP_REG(RK1808_SYS_CTRL0, 0x1, 12),
+	.dma_stop = VOP_REG(RK1808_SYS_CTRL0, 0x1, 13),
+	.standby = VOP_REG(RK1808_SYS_CTRL0, 0x1, 14),
+	.auto_gate_en = VOP_REG(RK1808_SYS_CTRL0, 0x1, 15),
+
+	.axi_outstanding_max_num = VOP_REG(RK1808_SYS_CTRL1, 0x1f, 4),
+	.axi_max_outstanding_en = VOP_REG(RK1808_SYS_CTRL1, 0x1, 3),
+
+	.mipi_en = VOP_REG(RK1808_DSP_CTRL0, 0x1, 0),
+	.mipi_dclk_pol = VOP_REG(RK1808_DSP_CTRL0, 0x1, 1),
+	.mipi_pin_pol = VOP_REG(RK1808_DSP_CTRL0, 0x7, 2),
+
+	.htotal_pw = VOP_REG(RK1808_DSP_HTOTAL_HS_END, 0x0fff0fff, 0),
+	.hact_st_end = VOP_REG(RK1808_DSP_HACT_ST_END, 0x0fff0fff, 0),
+	.vtotal_pw = VOP_REG(RK1808_DSP_VTOTAL_VS_END, 0x0fff0fff, 0),
+	.vact_st_end = VOP_REG(RK1808_DSP_VACT_ST_END, 0x0fff0fff, 0),
+
+	.pdaf_en = VOP_REG(RK1808_PDAF_CTRL, 0x1, 0),
+	.pdaf_type = VOP_REG(RK1808_PDAF_CTRL, 0x7, 1),
+	.pdaf_vc_num = VOP_REG(RK1808_PDAF_CTRL, 0x3, 4),
+
+	.dsp_background = VOP_REG(RK1808_DSP_BG, 0x00ffffff, 0),
+	.cfg_done = VOP_REG(RK1808_REG_CFG_DONE, 0x1, 0),
+};
+
+static const int rk1808_vop_raw_intrs[] = {
+	DSP_HOLD_VALID_INTR,
+	FS_INTR,
+	FE_INTR,
+	BUS_ERROR_INTR,
+	LINE_FLAG_INTR,
+	LINE_FLAG1_INTR,
+	WIN1_EMPTY_INTR,
+	DMA_FINISH_INTR
+};
+
+static const struct vop_intr rk1808_vop_raw_intr = {
+	.intrs = rk1808_vop_raw_intrs,
+	.nintrs = ARRAY_SIZE(rk1808_vop_raw_intrs),
+	.line_flag_num[0] = VOP_REG(RK1808_LINE_FLAG, 0xfff, 0),
+	.line_flag_num[1] = VOP_REG(RK1808_LINE_FLAG, 0xfff, 16),
+	.status = VOP_REG_MASK(RK1808_INTR_STATUS, 0xffff, 0),
+	.enable = VOP_REG_MASK(RK1808_INTR_EN, 0xffff, 0),
+	.clear = VOP_REG_MASK(RK1808_INTR_CLEAR, 0xffff, 0),
+};
+
+/* vblank end */
+static const struct vop_win_phy rk1808_lit_win9_ex7_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 7),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL1, 0x3f, 24),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_END_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_END_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC3, 0xffff, 16),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX7_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win8_ex6_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 6),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL1, 0x3f, 16),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_END_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_END_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC3, 0xffff, 0),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX6_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win7_ex5_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 5),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL1, 0x3f, 8),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_END_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_END_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC2, 0xffff, 16),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX5_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win6_ex4_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 4),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL1, 0x3f, 0),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_END_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_END_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC2, 0xffff, 0),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX4_VACT_ST_END, 0xffffffff, 0),
+};
+
+/* vblank front */
+static const struct vop_win_phy rk1808_lit_win5_ex3_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 3),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL0, 0x3f, 24),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_FRT_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_FRT_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC1, 0xffff, 16),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX3_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win4_ex2_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 2),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL0, 0x3f, 16),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_FRT_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_FRT_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC1, 0xffff, 0),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX2_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win3_ex1_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 1),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL0, 0x3f, 8),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_FRT_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_FRT_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC0, 0xffff, 16),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX1_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win2_ex0_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_PDAF_EX_EN_CTRL, 0x1, 0),
+	.format = VOP_REG(RK1808_PDAF_CTRL, 0x3, 6),
+	.data_type = VOP_REG(RK1808_PDAF_EX_TYPE_CTRL0, 0x3f, 0),
+	.yrgb_vir = VOP_REG(RK1808_PDAF_EX_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_PDAF_EX_FRT_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_PDAF_EX_FRT_MST1, 0xffffffff, 0),
+	.ex_wc = VOP_REG(RK1808_PDAF_EX_WC0, 0xffff, 0),
+	.vact_st_end_info = VOP_REG(RK1808_DSP_EX0_VACT_ST_END, 0xffffffff, 0),
+};
+
+static const struct vop_win_phy rk1808_lit_win1_data = {
+	.data_formats = formats_win_ex,
+	.nformats = ARRAY_SIZE(formats_win_ex),
+	.enable = VOP_REG(RK1808_WIN1_CTRL0, 0x1, 0),
+	.format = VOP_REG(RK1808_WIN1_CTRL0, 0x3, 1),
+	.yrgb_vir = VOP_REG(RK1808_WIN1_VIR, 0x1fff, 0),
+	.yrgb_mst = VOP_REG(RK1808_WIN1_MST, 0xffffffff, 0),
+	.yrgb_mst1 = VOP_REG(RK1808_WIN1_MST1, 0xffffffff, 0),
+	.dsp_info = VOP_REG(RK1808_WIN1_DSP_INFO, 0xffffffff, 0),
+	.dsp_st = VOP_REG(RK1808_WIN1_DSP_ST, 0xffffffff, 0),
+};
+
+static const struct vop_win_data rk1808_vop_raw_win_data[] = {
+	{ .phy = NULL },
+	{ .base = 0x00, .phy = &rk1808_lit_win1_data,
+	  .type = DRM_PLANE_TYPE_PRIMARY },
+	{ .base = 0x00, .phy = &rk1808_lit_win2_ex0_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY },
+	{ .base = 0x00, .phy = &rk1808_lit_win3_ex1_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY },
+	{ .base = 0x00, .phy = &rk1808_lit_win4_ex2_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY },
+	{ .base = 0x00, .phy = &rk1808_lit_win5_ex3_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY },
+	{ .base = 0x00, .phy = &rk1808_lit_win6_ex4_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY,
+	  .feature = WIN_FEATURE_PDAF_AFTER_VBLANK },
+	{ .base = 0x00, .phy = &rk1808_lit_win7_ex5_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY,
+	  .feature = WIN_FEATURE_PDAF_AFTER_VBLANK },
+	{ .base = 0x00, .phy = &rk1808_lit_win8_ex6_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY,
+	  .feature = WIN_FEATURE_PDAF_AFTER_VBLANK },
+	{ .base = 0x00, .phy = &rk1808_lit_win9_ex7_data,
+	  .type = DRM_PLANE_TYPE_OVERLAY,
+	  .feature = WIN_FEATURE_PDAF_AFTER_VBLANK },
+	{ .phy = NULL },
+};
+
+static const struct vop_data rk1808_vop_raw = {
+	.version = VOP_VERSION(1, 0),
+	.max_input = {1920, 8192},
+	.max_output = {1920, 1080},
+	.ctrl = &rk1808_vop_raw_ctrl_data,
+	.intr = &rk1808_vop_raw_intr,
+	.win = rk1808_vop_raw_win_data,
+	.win_size = ARRAY_SIZE(rk1808_vop_raw_win_data),
+};
+
 static const struct of_device_id vop_driver_dt_match[] = {
 	{ .compatible = "rockchip,rk3036-vop",
 	  .data = &rk3036_vop },
@@ -1675,6 +1904,10 @@ static const struct of_device_id vop_driver_dt_match[] = {
 	  .data = &px30_vop_big },
 	{ .compatible = "rockchip,rk3308-vop",
 	  .data = &rk3308_vop },
+	{ .compatible = "rockchip,rk1808-vop-lit",
+	  .data = &rk1808_vop_lit },
+	{ .compatible = "rockchip,rk1808-vop-raw",
+	  .data = &rk1808_vop_raw },
 	{ .compatible = "rockchip,rk3288-vop-big",
 	  .data = &rk3288_vop_big },
 	{ .compatible = "rockchip,rk3288-vop-lit",
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop_reg.h b/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
index fc172a058f4d..da12a4fa8e65 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
+++ b/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
@@ -1042,4 +1042,59 @@
 #define PX30_GRF_PD_VO_CON1			0x00438
 /* px30 register definition end */
 
+/* rk1808 raw register definition */
+#define RK1808_REG_CFG_DONE			0x00000000
+#define RK1808_VERSION				0x00000004
+#define RK1808_DSP_BG				0x00000008
+#define RK1808_LINE_FLAG			0x0000000c
+#define RK1808_SYS_CTRL0			0x00000010
+#define RK1808_SYS_CTRL1			0x00000014
+#define RK1808_DSP_CTRL0			0x00000018
+#define RK1808_DSP_DBG0				0x0000001c
+#define RK1808_PDAF_CTRL			0x00000020
+#define RK1808_PDAF_HBLANK_CTRL			0x00000024
+#define RK1808_PDAF_MST				0x00000028
+#define RK1808_PDAF_MST1			0x0000002c
+#define RK1808_INTR_EN				0x00000030
+#define RK1808_INTR_CLEAR			0x00000034
+#define RK1808_INTR_STATUS			0x00000038
+#define RK1808_INTR_RAW_STATUS			0x0000003c
+#define RK1808_WIN1_CTRL0			0x00000040
+#define RK1808_WIN1_CTRL1			0x00000044
+#define RK1808_WIN1_VIR				0x00000048
+#define RK1808_PDAF_DSP_INFO			0x0000004c
+#define RK1808_WIN1_MST				0x00000050
+#define RK1808_WIN1_DSP_INFO			0x00000054
+#define RK1808_WIN1_DSP_ST			0x00000058
+#define RK1808_WIN1_MST1			0x0000005c
+#define RK1808_DSP_HTOTAL_HS_END		0x00000060
+#define RK1808_DSP_HACT_ST_END			0x00000064
+#define RK1808_DSP_VTOTAL_VS_END		0x00000068
+#define RK1808_DSP_VACT_ST_END			0x0000006c
+#define RK1808_DSP_PDAF_HACT_ST_END		0x00000070
+#define RK1808_DSP_EX0_VACT_ST_END		0x00000074
+#define RK1808_DSP_EX1_VACT_ST_END		0x00000078
+#define RK1808_DSP_EX2_VACT_ST_END		0x0000007c
+#define RK1808_DSP_EX3_VACT_ST_END		0x00000080
+#define RK1808_DSP_EX4_VACT_ST_END		0x00000084
+#define RK1808_DSP_EX5_VACT_ST_END		0x00000088
+#define RK1808_DSP_EX6_VACT_ST_END		0x0000008c
+#define RK1808_DSP_EX7_VACT_ST_END		0x00000090
+#define RK1808_DSP_PDAF_INTERWEAVE_VACT_ST_END	0x00000094
+#define RK1808_PDAF_RREQ_PRIORITY_VALUE		0x00000098
+#define RK1808_PDAF_EX_VIR			0x0000009c
+#define RK1808_PDAF_EX_FRT_MST			0x000000a0
+#define RK1808_PDAF_EX_FRT_MST1			0x000000a4
+#define RK1808_PDAF_EX_END_MST			0x000000a8
+#define RK1808_PDAF_EX_END_MST1			0x000000ac
+#define RK1808_PDAF_EX_WC0			0x000000b0
+#define RK1808_PDAF_EX_WC1			0x000000b4
+#define RK1808_PDAF_EX_WC2			0x000000b8
+#define RK1808_PDAF_EX_WC3			0x000000bc
+#define RK1808_PDAF_EX_TYPE_CTRL0		0x000000c0
+#define RK1808_PDAF_EX_TYPE_CTRL1		0x000000c4
+#define RK1808_PDAF_EX_EN_CTRL			0x000000c8
+#define RK1808_GRF_PD_VO_CON1			0x00000444
+/* rk1808 raw register definition end */
+
 #endif /* _ROCKCHIP_VOP_REG_H */
diff --git a/include/uapi/drm/rockchip_drm.h b/include/uapi/drm/rockchip_drm.h
index d5bab5a8cf18..496fd771d17c 100644
--- a/include/uapi/drm/rockchip_drm.h
+++ b/include/uapi/drm/rockchip_drm.h
@@ -123,6 +123,7 @@ enum rockchip_plane_feture {
 	ROCKCHIP_DRM_PLANE_FEATURE_HDR2SDR,
 	ROCKCHIP_DRM_PLANE_FEATURE_SDR2HDR,
 	ROCKCHIP_DRM_PLANE_FEATURE_AFBDC,
+	ROCKCHIP_DRM_PLANE_FEATURE_PDAF_POS,
 	ROCKCHIP_DRM_PLANE_FEATURE_MAX,
 };
 
-- 
2.35.3

