From f092c995c31ef6c2a7bd97cc7d2a3a9a92e99193 Mon Sep 17 00:00:00 2001
From: Feng Mingli <fml@rock-chips.com>
Date: Thu, 23 Feb 2017 19:47:28 +0800
Subject: [PATCH] USB: core: flush pending URBs for unusual USB3 core when
 disable device

According to xHCI spec v1.1 section 6.4.5 TRB Completion Codes,
the standard XHCI controller provide a TRB Completion Status
'USB Transaction Error' to asserted in the case where the host
did not receive a valid response from the device, it's useful
to handle pending URBs on the endpoint when the USB device is
plugged out.

Unfortunately, some SOCs USB 3.0 modules lose the ability to
assert the 'USB Transaction Error' status when USB 3.0 device
disconnect. This may cause the pending URBs unhandled, even
lead to USB class driver stalled in waiting for URBs complete.

This patch flush pending URBs in usb_disable_device() when
USB 3.0 device disconnect, it will call xhci_urb_dequeue()
-> xhci_queue_stop_endpoint() to cancel pending URBs and
giveback URB status immediately.

Change-Id: If8acac59bc1f2c10a41ee390ccbeb84b2e7743c1
Signed-off-by: Feng Mingli <fml@rock-chips.com>
Signed-off-by: Frank Wang <frank.wang@rock-chips.com>
---
 drivers/usb/core/message.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index 8e641b5893ed..ce968526851a 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -1169,6 +1169,27 @@ void usb_disable_device(struct usb_device *dev, int skip_ep0)
 			dev_dbg(&dev->dev, "unregistering interface %s\n",
 				dev_name(&interface->dev));
 			remove_intf_ep_devs(interface);
+
+			/*
+			 * Some special SoCs (e.g. rk322xh) USB 3.0 module
+			 * can't handle outstanding URBs by hardware when
+			 * when USB 3.0 device disconnect, so we need to
+			 * cancel all URBs pending on this device here.
+			 *
+			 * In addition, we just reuse the hub autosuspend
+			 * quirk but not add a new quirk for this issue.
+			 * Because it always occurs with autosuspend issue.
+			 */
+			if (hcd->self.root_hub->quirks &
+			    USB_QUIRK_AUTO_SUSPEND) {
+				for (i = skip_ep0; i < 16; ++i) {
+					usb_hcd_flush_endpoint(dev,
+							       dev->ep_out[i]);
+					usb_hcd_flush_endpoint(dev,
+							       dev->ep_in[i]);
+				}
+			}
+
 			device_del(&interface->dev);
 		}
 
-- 
2.35.3

