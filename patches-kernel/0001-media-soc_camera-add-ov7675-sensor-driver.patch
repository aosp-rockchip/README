From 0fe98fce94127faa6f7d1249240a70424ddcf885 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Mon, 23 Oct 2017 16:29:06 +0800
Subject: [PATCH] media: soc_camera: add ov7675 sensor driver

Change-Id: Ia98b71fcc72bb14fb5da8aec76dc9b44459c55b0
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
---
 drivers/media/i2c/soc_camera/rockchip/Kconfig |   7 +
 .../media/i2c/soc_camera/rockchip/Makefile    |   1 +
 .../rockchip/ov7675_v4l2-i2c-subdev.c         | 571 ++++++++++++++++++
 .../soc_camera/rockchip/rk_camera_module.c    | 224 ++++++-
 .../rk_isp10_platform_camera_module.h         |  38 +-
 5 files changed, 827 insertions(+), 14 deletions(-)
 create mode 100644 drivers/media/i2c/soc_camera/rockchip/ov7675_v4l2-i2c-subdev.c

diff --git a/drivers/media/i2c/soc_camera/rockchip/Kconfig b/drivers/media/i2c/soc_camera/rockchip/Kconfig
index 62b759aaa74e..9c5d6bc14b31 100644
--- a/drivers/media/i2c/soc_camera/rockchip/Kconfig
+++ b/drivers/media/i2c/soc_camera/rockchip/Kconfig
@@ -46,3 +46,10 @@ config VIDEO_ADV7181
 	default n
 	---help---
 	  This is adv7181 cvbs video driver adapt to rockchip cif isp platform.
+
+config VIDEO_OV7675
+	tristate "ov7675 driver adapt to rockchip cif isp platform"
+	depends on VIDEO_V4L2 && VIDEO_RK_CIF_ISP10 && I2C
+	default n
+	---help---
+	  This is ov7675 camera driver adapt to rockchip cif isp platform.
diff --git a/drivers/media/i2c/soc_camera/rockchip/Makefile b/drivers/media/i2c/soc_camera/rockchip/Makefile
index 0647d17bdb7c..6a2433a6b8fd 100644
--- a/drivers/media/i2c/soc_camera/rockchip/Makefile
+++ b/drivers/media/i2c/soc_camera/rockchip/Makefile
@@ -5,3 +5,4 @@ obj-$(CONFIG_VIDEO_IMX323) += imx_camera_module.o rk_camera_module.o imx323_v4l2
 obj-$(CONFIG_VIDEO_OV7750) += ov_camera_module.o rk_camera_module.o ov7750_v4l2-i2c-subdev.o
 obj-$(CONFIG_VIDEO_TC358749XBG) += tc_camera_module.o rk_camera_module.o tc358749xbg_v4l2-i2c-subdev.o
 obj-$(CONFIG_VIDEO_ADV7181) += adv_camera_module.o rk_camera_module.o adv7181_v4l2-i2c-subdev.o
+obj-$(CONFIG_VIDEO_OV7675) += ov_camera_module.o rk_camera_module.o ov7675_v4l2-i2c-subdev.o
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov7675_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov7675_v4l2-i2c-subdev.c
new file mode 100644
index 000000000000..6f9837f5d702
--- /dev/null
+++ b/drivers/media/i2c/soc_camera/rockchip/ov7675_v4l2-i2c-subdev.c
@@ -0,0 +1,571 @@
+/*
+ * ov7675 sensor driver
+ *
+ * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd.
+ *
+ * Copyright (C) 2012-2014 Intel Mobile Communications GmbH
+ *
+ * Copyright (C) 2008 Texas Instruments.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+
+#include <linux/i2c.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <media/v4l2-subdev.h>
+#include <media/videobuf-core.h>
+#include <linux/slab.h>
+#include "ov_camera_module.h"
+
+#define OV7675_CAMERA_MODULE_DATA (PLTFRM_CAMERA_MODULE_WR_SINGLE | \
+PLTFRM_CAMERA_MODULE_RD_CONTINUE | PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1)
+
+#define ov7675_DRIVER_NAME "ov7675"
+
+#define ov7675_PIDH_ADDR                       0x0a
+#define ov7675_PIDL_ADDR                       0x0b
+
+#define ov7675_EXT_CLK                         24000000
+/* High byte of product ID */
+#define ov7675_PIDH_MAGIC                      0x76
+/* Low byte of product ID  */
+#define ov7675_PIDL_MAGIC                      0x73
+
+static struct ov_camera_module ov7675;
+static struct ov_camera_module_custom_config ov7675_custom_config;
+
+/* ======================================================================== */
+/* Base sensor configs */
+/* ======================================================================== */
+static struct ov_camera_module_reg ov7675_init_tab_640_480_30fps[] = {
+	{OV7675_CAMERA_MODULE_DATA, 0x12, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0x09, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0xc1, 0x7f},
+	{OV7675_CAMERA_MODULE_DATA, 0x11, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0x3a, 0x0c},
+	{OV7675_CAMERA_MODULE_DATA, 0x3d, 0xc0},
+	{OV7675_CAMERA_MODULE_DATA, 0x12, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x15, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x17, 0x13},
+	{OV7675_CAMERA_MODULE_DATA, 0x18, 0x01},
+	{OV7675_CAMERA_MODULE_DATA, 0x32, 0xbf},
+	{OV7675_CAMERA_MODULE_DATA, 0x19, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0x1a, 0x7a},
+	{OV7675_CAMERA_MODULE_DATA, 0x03, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x0c, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x3e, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x70, 0x3a},
+	{OV7675_CAMERA_MODULE_DATA, 0x71, 0x35},
+	{OV7675_CAMERA_MODULE_DATA, 0x72, 0x11},
+	{OV7675_CAMERA_MODULE_DATA, 0x73, 0xf0},
+	{OV7675_CAMERA_MODULE_DATA, 0xa2, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0x7a, 0x20},
+	{OV7675_CAMERA_MODULE_DATA, 0x7b, 0x03},
+	{OV7675_CAMERA_MODULE_DATA, 0x7c, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x7d, 0x1a},
+	{OV7675_CAMERA_MODULE_DATA, 0x7e, 0x3f},
+	{OV7675_CAMERA_MODULE_DATA, 0x7f, 0x4e},
+	{OV7675_CAMERA_MODULE_DATA, 0x80, 0x5b},
+	{OV7675_CAMERA_MODULE_DATA, 0x81, 0x68},
+	{OV7675_CAMERA_MODULE_DATA, 0x82, 0x75},
+	{OV7675_CAMERA_MODULE_DATA, 0x83, 0x7f},
+	{OV7675_CAMERA_MODULE_DATA, 0x84, 0x89},
+	{OV7675_CAMERA_MODULE_DATA, 0x85, 0x9a},
+	{OV7675_CAMERA_MODULE_DATA, 0x86, 0xa6},
+	{OV7675_CAMERA_MODULE_DATA, 0x87, 0xbd},
+	{OV7675_CAMERA_MODULE_DATA, 0x88, 0xd3},
+	{OV7675_CAMERA_MODULE_DATA, 0x89, 0xe8},
+	{OV7675_CAMERA_MODULE_DATA, 0x13, 0xe0},
+	{OV7675_CAMERA_MODULE_DATA, 0x00, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x10, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x0d, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x14, 0x28},
+	{OV7675_CAMERA_MODULE_DATA, 0xa5, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0xab, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0x24, 0x68},
+	{OV7675_CAMERA_MODULE_DATA, 0x25, 0x58},
+	{OV7675_CAMERA_MODULE_DATA, 0x26, 0xc2},
+	{OV7675_CAMERA_MODULE_DATA, 0x9f, 0x78},
+	{OV7675_CAMERA_MODULE_DATA, 0xa0, 0x68},
+	{OV7675_CAMERA_MODULE_DATA, 0xa1, 0x03},
+	{OV7675_CAMERA_MODULE_DATA, 0xa6, 0xd8},
+	{OV7675_CAMERA_MODULE_DATA, 0xa7, 0xd8},
+	{OV7675_CAMERA_MODULE_DATA, 0xa8, 0xf0},
+	{OV7675_CAMERA_MODULE_DATA, 0xa9, 0x90},
+	{OV7675_CAMERA_MODULE_DATA, 0xaa, 0x14},
+	{OV7675_CAMERA_MODULE_DATA, 0x13, 0xe5},
+	{OV7675_CAMERA_MODULE_DATA, 0x0e, 0x61},
+	{OV7675_CAMERA_MODULE_DATA, 0x0f, 0x4b},
+	{OV7675_CAMERA_MODULE_DATA, 0x16, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0x1e, 0x07},
+	{OV7675_CAMERA_MODULE_DATA, 0x21, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0x22, 0x91},
+	{OV7675_CAMERA_MODULE_DATA, 0x29, 0x07},
+	{OV7675_CAMERA_MODULE_DATA, 0x33, 0x0b},
+	{OV7675_CAMERA_MODULE_DATA, 0x35, 0x0b},
+	{OV7675_CAMERA_MODULE_DATA, 0x37, 0x1d},
+	{OV7675_CAMERA_MODULE_DATA, 0x38, 0x71},
+	{OV7675_CAMERA_MODULE_DATA, 0x39, 0x2a},
+	{OV7675_CAMERA_MODULE_DATA, 0x3c, 0x78},
+	{OV7675_CAMERA_MODULE_DATA, 0x4d, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x4e, 0x20},
+	{OV7675_CAMERA_MODULE_DATA, 0x69, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x6b, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x74, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0x8d, 0x4f},
+	{OV7675_CAMERA_MODULE_DATA, 0x8e, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x8f, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x90, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x91, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x96, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x9a, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0xb0, 0x84},
+	{OV7675_CAMERA_MODULE_DATA, 0xb1, 0x0c},
+	{OV7675_CAMERA_MODULE_DATA, 0xb2, 0x0e},
+	{OV7675_CAMERA_MODULE_DATA, 0xb3, 0x82},
+	{OV7675_CAMERA_MODULE_DATA, 0xb8, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x43, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x44, 0xf2},
+	{OV7675_CAMERA_MODULE_DATA, 0x45, 0x39},
+	{OV7675_CAMERA_MODULE_DATA, 0x46, 0x62},
+	{OV7675_CAMERA_MODULE_DATA, 0x47, 0x3d},
+	{OV7675_CAMERA_MODULE_DATA, 0x48, 0x55},
+	{OV7675_CAMERA_MODULE_DATA, 0x59, 0x83},
+	{OV7675_CAMERA_MODULE_DATA, 0x5a, 0x0d},
+	{OV7675_CAMERA_MODULE_DATA, 0x5b, 0xcd},
+	{OV7675_CAMERA_MODULE_DATA, 0x5c, 0x8c},
+	{OV7675_CAMERA_MODULE_DATA, 0x5d, 0x77},
+	{OV7675_CAMERA_MODULE_DATA, 0x5e, 0x16},
+	{OV7675_CAMERA_MODULE_DATA, 0x6c, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0x6d, 0x65},
+	{OV7675_CAMERA_MODULE_DATA, 0x6e, 0x11},
+	{OV7675_CAMERA_MODULE_DATA, 0x6f, 0x9e},
+	{OV7675_CAMERA_MODULE_DATA, 0x6a, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x01, 0x56},
+	{OV7675_CAMERA_MODULE_DATA, 0x02, 0x44},
+	{OV7675_CAMERA_MODULE_DATA, 0x13, 0xe7},
+	{OV7675_CAMERA_MODULE_DATA, 0x4f, 0x88},
+	{OV7675_CAMERA_MODULE_DATA, 0x50, 0x8b},
+	{OV7675_CAMERA_MODULE_DATA, 0x51, 0x04},
+	{OV7675_CAMERA_MODULE_DATA, 0x52, 0x11},
+	{OV7675_CAMERA_MODULE_DATA, 0x53, 0x8c},
+	{OV7675_CAMERA_MODULE_DATA, 0x54, 0x9d},
+	{OV7675_CAMERA_MODULE_DATA, 0x55, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x56, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x57, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0x58, 0x9a},
+	{OV7675_CAMERA_MODULE_DATA, 0x41, 0x08},
+	{OV7675_CAMERA_MODULE_DATA, 0x3f, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x75, 0x04},
+	{OV7675_CAMERA_MODULE_DATA, 0x76, 0x60},
+	{OV7675_CAMERA_MODULE_DATA, 0x4c, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x77, 0x01},
+	{OV7675_CAMERA_MODULE_DATA, 0x3d, 0xc2},
+	{OV7675_CAMERA_MODULE_DATA, 0x4b, 0x09},
+	{OV7675_CAMERA_MODULE_DATA, 0xc9, 0x30},
+	{OV7675_CAMERA_MODULE_DATA, 0x41, 0x38},
+	{OV7675_CAMERA_MODULE_DATA, 0x56, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x34, 0x11},
+	{OV7675_CAMERA_MODULE_DATA, 0x3b, 0x12},
+	{OV7675_CAMERA_MODULE_DATA, 0xa4, 0x88},
+	{OV7675_CAMERA_MODULE_DATA, 0x96, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x97, 0x30},
+	{OV7675_CAMERA_MODULE_DATA, 0x98, 0x20},
+	{OV7675_CAMERA_MODULE_DATA, 0x99, 0x30},
+	{OV7675_CAMERA_MODULE_DATA, 0x9a, 0x84},
+	{OV7675_CAMERA_MODULE_DATA, 0x9b, 0x29},
+	{OV7675_CAMERA_MODULE_DATA, 0x9c, 0x03},
+	{OV7675_CAMERA_MODULE_DATA, 0x9d, 0x99},
+	{OV7675_CAMERA_MODULE_DATA, 0x9e, 0x7f},
+	{OV7675_CAMERA_MODULE_DATA, 0x78, 0x04},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x01},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0xf0},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x0f},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x7e},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x0a},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x0b},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x01},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x0c},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x0f},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x0d},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x20},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x09},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x80},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x02},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0xc0},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x03},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x05},
+	{OV7675_CAMERA_MODULE_DATA, 0xc8, 0x30},
+	{OV7675_CAMERA_MODULE_DATA, 0x79, 0x26},
+	{OV7675_CAMERA_MODULE_DATA, 0x62, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x63, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x64, 0x06},
+	{OV7675_CAMERA_MODULE_DATA, 0x65, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x66, 0x05},
+	{OV7675_CAMERA_MODULE_DATA, 0x94, 0x05},
+	{OV7675_CAMERA_MODULE_DATA, 0x95, 0x09},
+	{OV7675_CAMERA_MODULE_DATA, 0x2a, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0x2b, 0xc2},
+	{OV7675_CAMERA_MODULE_DATA, 0x15, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x3a, 0x04},
+	{OV7675_CAMERA_MODULE_DATA, 0x3d, 0xc3},
+	{OV7675_CAMERA_MODULE_DATA, 0x19, 0x03},
+	{OV7675_CAMERA_MODULE_DATA, 0x1a, 0x7b},
+	{OV7675_CAMERA_MODULE_DATA, 0x2a, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x2b, 0x00},
+	{OV7675_CAMERA_MODULE_DATA, 0x18, 0x01},
+	{OV7675_CAMERA_MODULE_DATA, 0x66, 0x05},
+	{OV7675_CAMERA_MODULE_DATA, 0x62, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0x63, 0x0b},
+	{OV7675_CAMERA_MODULE_DATA, 0x65, 0x07},
+	{OV7675_CAMERA_MODULE_DATA, 0x64, 0x0f},
+	{OV7675_CAMERA_MODULE_DATA, 0x94, 0x0e},
+	{OV7675_CAMERA_MODULE_DATA, 0x95, 0x10},
+	{OV7675_CAMERA_MODULE_DATA, 0x4f, 0x87},
+	{OV7675_CAMERA_MODULE_DATA, 0x50, 0x68},
+	{OV7675_CAMERA_MODULE_DATA, 0x51, 0x1e},
+	{OV7675_CAMERA_MODULE_DATA, 0x52, 0x15},
+	{OV7675_CAMERA_MODULE_DATA, 0x53, 0x7c},
+	{OV7675_CAMERA_MODULE_DATA, 0x54, 0x91},
+	{OV7675_CAMERA_MODULE_DATA, 0x58, 0x1e},
+	{OV7675_CAMERA_MODULE_DATA, 0x41, 0x38},
+	{OV7675_CAMERA_MODULE_DATA, 0x76, 0xe0},
+	{OV7675_CAMERA_MODULE_DATA, 0x24, 0x40},
+	{OV7675_CAMERA_MODULE_DATA, 0x25, 0x38},
+	{OV7675_CAMERA_MODULE_DATA, 0x26, 0x91},
+	{OV7675_CAMERA_MODULE_DATA, 0x7a, 0x09},
+	{OV7675_CAMERA_MODULE_DATA, 0x7b, 0x0c},
+	{OV7675_CAMERA_MODULE_DATA, 0x7c, 0x16},
+	{OV7675_CAMERA_MODULE_DATA, 0x7d, 0x28},
+	{OV7675_CAMERA_MODULE_DATA, 0x7e, 0x48},
+	{OV7675_CAMERA_MODULE_DATA, 0x7f, 0x57},
+	{OV7675_CAMERA_MODULE_DATA, 0x80, 0x64},
+	{OV7675_CAMERA_MODULE_DATA, 0x81, 0x71},
+	{OV7675_CAMERA_MODULE_DATA, 0x82, 0x7e},
+	{OV7675_CAMERA_MODULE_DATA, 0x83, 0x89},
+	{OV7675_CAMERA_MODULE_DATA, 0x84, 0x94},
+	{OV7675_CAMERA_MODULE_DATA, 0x85, 0xa8},
+	{OV7675_CAMERA_MODULE_DATA, 0x86, 0xba},
+	{OV7675_CAMERA_MODULE_DATA, 0x87, 0xd7},
+	{OV7675_CAMERA_MODULE_DATA, 0x88, 0xec},
+	{OV7675_CAMERA_MODULE_DATA, 0x89, 0xf9},
+	{OV7675_CAMERA_MODULE_DATA, 0x09, 0x00},
+};
+
+/* ======================================================================== */
+
+static struct ov_camera_module_config ov7675_configs[] = {
+	{
+		.name = "640x480_30fps",
+		.frm_fmt = {
+			.width = 640,
+			.height = 480,
+			.code = MEDIA_BUS_FMT_YVYU8_2X8
+		},
+		.frm_intrvl = {
+			.interval = {
+				.numerator = 1,
+				.denominator = 30
+			}
+		},
+		.auto_exp_enabled = false,
+		.auto_gain_enabled = false,
+		.auto_wb_enabled = false,
+		.reg_table = (void *)ov7675_init_tab_640_480_30fps,
+		.reg_table_num_entries =
+			sizeof(ov7675_init_tab_640_480_30fps) /
+			sizeof(ov7675_init_tab_640_480_30fps[0]),
+		.v_blanking_time_us = 1000,
+		PLTFRM_CAM_ITF_DVP_CFG(
+			PLTFRM_CAM_ITF_BT601_8,
+			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
+			PLTFRM_CAM_SIGNAL_HIGH_LEVEL,
+			PLTFRM_CAM_SDR_POS_EDG,
+			ov7675_EXT_CLK)
+	}
+};
+
+/*--------------------------------------------------------------------------*/
+
+static int ov7675_write_aec(struct ov_camera_module *cam_mod)
+{
+	return 0;
+}
+
+/*--------------------------------------------------------------------------*/
+
+static int ov7675_g_ctrl(struct ov_camera_module *cam_mod, u32 ctrl_id)
+{
+	int ret = 0;
+
+	ov_camera_module_pr_info(cam_mod, "\n");
+
+	switch (ctrl_id) {
+	case V4L2_CID_GAIN:
+	case V4L2_CID_EXPOSURE:
+	case V4L2_CID_FLASH_LED_MODE:
+		/* nothing to be done here */
+		break;
+	default:
+		ret = -EINVAL;
+		break;
+	}
+
+	if (IS_ERR_VALUE(ret))
+		ov_camera_module_pr_debug(cam_mod,
+			"failed with error (%d)\n", ret);
+	return ret;
+}
+
+/*--------------------------------------------------------------------------*/
+
+static int ov7675_filltimings(struct ov_camera_module_custom_config *custom)
+{
+	return 0;
+}
+
+static int ov7675_g_timings(struct ov_camera_module *cam_mod,
+	struct ov_camera_module_timings *timings)
+{
+	return 0;
+}
+
+static int ov7675_s_ctrl(struct ov_camera_module *cam_mod, u32 ctrl_id)
+{
+	int ret = 0;
+
+	ov_camera_module_pr_info(cam_mod, "\n");
+
+	switch (ctrl_id) {
+	case V4L2_CID_GAIN:
+	case V4L2_CID_EXPOSURE:
+		ret = ov7675_write_aec(cam_mod);
+		break;
+	case V4L2_CID_FLASH_LED_MODE:
+		/* nothing to be done here */
+		break;
+	default:
+		ret = -EINVAL;
+		break;
+	}
+
+	if (IS_ERR_VALUE(ret))
+		ov_camera_module_pr_debug(cam_mod,
+			"failed with error (%d) 0x%x\n", ret, ctrl_id);
+	return ret;
+}
+
+static int ov7675_s_ext_ctrls(struct ov_camera_module *cam_mod,
+				 struct ov_camera_module_ext_ctrls *ctrls)
+{
+	int ret = 0;
+
+	ov_camera_module_pr_info(cam_mod, "\n");
+
+	/* Handles only exposure and gain together special case. */
+	if (ctrls->count == 1)
+		ret = ov7675_s_ctrl(cam_mod, ctrls->ctrls[0].id);
+	else if ((ctrls->count == 3) &&
+		 ((ctrls->ctrls[0].id == V4L2_CID_GAIN &&
+		   ctrls->ctrls[1].id == V4L2_CID_EXPOSURE) ||
+		  (ctrls->ctrls[1].id == V4L2_CID_GAIN &&
+		   ctrls->ctrls[0].id == V4L2_CID_EXPOSURE)))
+		ret = ov7675_write_aec(cam_mod);
+	else
+		ret = -EINVAL;
+
+	if (IS_ERR_VALUE(ret))
+		ov_camera_module_pr_debug(cam_mod,
+			"failed with error (%d)\n", ret);
+	return ret;
+}
+
+static int ov7675_set_flip(
+	struct ov_camera_module *cam_mod,
+	struct pltfrm_camera_module_reg reglist[],
+	int len)
+{
+	return 0;
+}
+
+static int ov7675_check_camera_id(struct ov_camera_module *cam_mod)
+{
+	u32 pidh, pidl;
+	int ret = 0;
+
+	ov_camera_module_pr_info(cam_mod, "\n");
+	ret |= pltfrm_camera_module_read_reg_ex(&cam_mod->sd, 1,
+		OV7675_CAMERA_MODULE_DATA, ov7675_PIDH_ADDR, &pidh);
+	ret |= pltfrm_camera_module_read_reg_ex(&cam_mod->sd, 1,
+		OV7675_CAMERA_MODULE_DATA, ov7675_PIDL_ADDR, &pidl);
+
+	if (IS_ERR_VALUE(ret)) {
+		ov_camera_module_pr_err(cam_mod,
+			"register read failed, camera module powered off?\n");
+		goto err;
+	}
+
+	if ((pidh == ov7675_PIDH_MAGIC) && (pidl == ov7675_PIDL_MAGIC)) {
+		ov_camera_module_pr_info(cam_mod,
+			"successfully detected camera ID 0x%02x%02x\n",
+			pidh, pidl);
+	} else {
+		ov_camera_module_pr_err(cam_mod,
+			"wrong camera ID, expected 0x%02x%02x, detected 0x%02x%02x\n",
+			ov7675_PIDH_MAGIC, ov7675_PIDL_MAGIC, pidh, pidl);
+		ret = -EINVAL;
+		goto err;
+	}
+
+	return 0;
+err:
+	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+	return ret;
+}
+
+static int ov7675_start_streaming(struct ov_camera_module *cam_mod)
+{
+	int ret = 0;
+
+	ov_camera_module_pr_debug(cam_mod, "\n");
+
+	ret = pltfrm_camera_module_write_reg_ex(&cam_mod->sd,
+		OV7675_CAMERA_MODULE_DATA, 0x09, 0);
+	if (IS_ERR_VALUE(ret))
+		goto err;
+
+	msleep(25);
+
+	return 0;
+err:
+	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+	return ret;
+}
+
+static int ov7675_stop_streaming(struct ov_camera_module *cam_mod)
+{
+	int ret = 0;
+
+	ov_camera_module_pr_debug(cam_mod, "\n");
+
+	ret = pltfrm_camera_module_write_reg_ex(&cam_mod->sd,
+		OV7675_CAMERA_MODULE_DATA, 0x09, 10);
+	if (IS_ERR_VALUE(ret))
+		goto err;
+
+	msleep(25);
+
+	return 0;
+err:
+	ov_camera_module_pr_err(cam_mod, "failed with error (%d)\n", ret);
+	return ret;
+}
+
+/* ======================================================================== */
+/* This part is platform dependent */
+/* ======================================================================== */
+static struct v4l2_subdev_core_ops ov7675_camera_module_core_ops = {
+	.g_ctrl = ov_camera_module_g_ctrl,
+	.s_ctrl = ov_camera_module_s_ctrl,
+	.s_ext_ctrls = ov_camera_module_s_ext_ctrls,
+	.s_power = ov_camera_module_s_power,
+	.ioctl = ov_camera_module_ioctl
+};
+
+static struct v4l2_subdev_video_ops ov7675_camera_module_video_ops = {
+	.s_frame_interval = ov_camera_module_s_frame_interval,
+	.s_stream = ov_camera_module_s_stream
+};
+
+static struct v4l2_subdev_pad_ops ov7675_camera_module_pad_ops = {
+	.enum_frame_interval = ov_camera_module_enum_frameintervals,
+	.get_fmt = ov_camera_module_g_fmt,
+	.set_fmt = ov_camera_module_s_fmt,
+};
+
+static struct v4l2_subdev_ops ov7675_camera_module_ops = {
+	.core = &ov7675_camera_module_core_ops,
+	.video = &ov7675_camera_module_video_ops,
+	.pad = &ov7675_camera_module_pad_ops
+};
+
+static struct ov_camera_module_custom_config ov7675_custom_config = {
+	.start_streaming = ov7675_start_streaming,
+	.stop_streaming = ov7675_stop_streaming,
+	.s_ctrl = ov7675_s_ctrl,
+	.s_ext_ctrls = ov7675_s_ext_ctrls,
+	.g_ctrl = ov7675_g_ctrl,
+	.g_timings = ov7675_g_timings,
+	.check_camera_id = ov7675_check_camera_id,
+	.set_flip = ov7675_set_flip,
+	.configs = ov7675_configs,
+	.num_configs = ARRAY_SIZE(ov7675_configs),
+	.power_up_delays_ms = {20, 20, 0}
+};
+
+static int ov7675_probe(
+	struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	dev_info(&client->dev, "probing...\n");
+
+	ov7675_filltimings(&ov7675_custom_config);
+	v4l2_i2c_subdev_init(&ov7675.sd, client, &ov7675_camera_module_ops);
+
+	ov7675.custom = ov7675_custom_config;
+
+	dev_info(&client->dev, "probing successful\n");
+	return 0;
+}
+
+static int ov7675_remove(struct i2c_client *client)
+{
+	struct ov_camera_module *cam_mod = i2c_get_clientdata(client);
+
+	dev_info(&client->dev, "removing device...\n");
+
+	if (!client->adapter)
+		return -ENODEV;	/* our client isn't attached */
+
+	ov_camera_module_release(cam_mod);
+
+	dev_info(&client->dev, "removed\n");
+	return 0;
+}
+
+static const struct i2c_device_id ov7675_id[] = {
+	{ ov7675_DRIVER_NAME, 0 },
+	{ }
+};
+
+static const struct of_device_id ov7675_of_match[] = {
+	{.compatible = "omnivision,ov7675-v4l2-i2c-subdev"},
+	{},
+};
+
+MODULE_DEVICE_TABLE(i2c, ov7675_id);
+
+static struct i2c_driver ov7675_i2c_driver = {
+	.driver = {
+		.name = ov7675_DRIVER_NAME,
+		.of_match_table = ov7675_of_match
+	},
+	.probe = ov7675_probe,
+	.remove = ov7675_remove,
+	.id_table = ov7675_id,
+};
+
+module_i2c_driver(ov7675_i2c_driver);
+
+MODULE_DESCRIPTION("SoC Camera driver for ov7675");
+MODULE_AUTHOR("George");
+MODULE_LICENSE("GPL");
diff --git a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
index 80f3330c7046..ccd0df044b33 100644
--- a/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/rk_camera_module.c
@@ -994,9 +994,74 @@ int pltfrm_camera_module_read_reg(
 	}
 	pltfrm_camera_module_pr_err(sd,
 		"i2c read from offset 0x%08x failed with error %d\n", reg, ret);
+
 	return ret;
 }
 
+int pltfrm_camera_module_read_reg_ex(
+	struct v4l2_subdev *sd,
+	u16 data_length,
+	u32 flag,
+	u16 reg,
+	u32 *val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int ret = 0;
+	struct i2c_msg msg[2];
+	unsigned char data[4] = { 0, 0, 0, 0 };
+
+	if (!client->adapter) {
+		pltfrm_camera_module_pr_err(sd, "client->adapter NULL\n");
+		return -ENODEV;
+	}
+
+	msg->addr = client->addr;
+	msg->flags = I2C_M_WR;
+	msg->buf = data;
+
+	if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1) {
+		data[0] = (u8)(reg & 0xff);
+		msg->len = 1;
+	} else {
+		/* High byte goes out first */
+		data[0] = (u8)(reg >> 8);
+		data[1] = (u8)(reg & 0xff);
+		msg->len = 2;
+	}
+
+	if ((flag & PLTFRM_CAMERA_MODULE_RD_CONTINUE_MASK) ==
+		PLTFRM_CAMERA_MODULE_RD_CONTINUE) {
+		msg[1].addr = client->addr;
+		msg[1].flags = I2C_M_RD;
+		msg[1].len = data_length;
+		msg[1].buf = data;
+
+		ret = i2c_transfer(client->adapter, msg, 2);
+	} else {
+		ret = i2c_transfer(client->adapter, msg, 1);
+		if (ret >= 0) {
+			mdelay(3);
+			msg->flags = I2C_M_RD;
+			msg->len = data_length;
+			i2c_transfer(client->adapter, msg, 1);
+		}
+	}
+	if (ret >= 0) {
+		*val = 0;
+		/* High byte comes first */
+		if (data_length == 1)
+			*val = data[0];
+		else if (data_length == 2)
+			*val = data[1] + (data[0] << 8);
+		else
+			*val = data[3] + (data[2] << 8) +
+			    (data[1] << 16) + (data[0] << 24);
+		return 0;
+	}
+	pltfrm_camera_module_pr_err(sd,
+		"i2c read from offset 0x%08x failed with error %d\n", reg, ret);
+	return ret;
+}
 /* ======================================================================== */
 
 int pltfrm_camera_module_write_reg(
@@ -1042,6 +1107,73 @@ int pltfrm_camera_module_write_reg(
 	return ret;
 }
 
+int pltfrm_camera_module_write_reg_ex(
+	struct v4l2_subdev *sd,
+	u32 flag, u16 reg, u16 val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int ret = 0;
+	struct i2c_msg msg[1];
+	unsigned char data[4];
+	int retries;
+
+	if (!client->adapter) {
+		pltfrm_camera_module_pr_err(sd, "client->adapter NULL\n");
+		return -ENODEV;
+	}
+
+	for (retries = 0; retries < 5; retries++) {
+		msg->addr = client->addr;
+		msg->flags = I2C_M_WR;
+		msg->buf = data;
+
+		if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1 &&
+			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 1) {
+			data[0] = (u8)(reg & 0xff);
+			data[1] = val;
+			msg->len = 2;
+		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 2 &&
+			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 1) {
+			data[0] = (u8)(reg >> 8);
+			data[1] = (u8)(reg & 0xff);
+			data[2] = val;
+			msg->len = 3;
+		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 1 &&
+			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 2) {
+			data[0] = (u8)(reg & 0xff);
+			data[1] = (u8)(val >> 8);
+			data[2] = (u8)(val & 0xff);
+			msg->len = 3;
+		} else if (PLTFRM_CAMERA_MODULE_REG_LEN(flag) == 2 &&
+			PLTFRM_CAMERA_MODULE_DATA_LEN(flag) == 2) {
+			data[0] = (u8)(reg >> 8);
+			data[1] = (u8)(reg & 0xff);
+			data[2] = (u8)(val >> 8);
+			data[3] = (u8)(val & 0xff);
+			msg->len = 4;
+		} else {
+			pltfrm_camera_module_pr_err(sd,
+				"i2c write flag 0x%x error\n", flag);
+			return -EINVAL;
+		}
+
+		ret = i2c_transfer(client->adapter, msg, 1);
+		if (ret == 1) {
+			pltfrm_camera_module_pr_debug(sd,
+				"i2c write to offset 0x%08x success\n", reg);
+			return 0;
+		}
+
+		pltfrm_camera_module_pr_debug(sd,
+			"retrying I2C... %d\n", retries);
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		schedule_timeout(msecs_to_jiffies(20));
+	}
+	pltfrm_camera_module_pr_err(sd,
+		"i2c write to offset 0x%08x failed with error %d\n", reg, ret);
+	return ret;
+}
+
 /* ======================================================================== */
 int pltfrm_camera_module_write_reglist(
 	struct v4l2_subdev *sd,
@@ -1057,28 +1189,53 @@ int pltfrm_camera_module_write_reglist(
 	unsigned int max_entries = len;
 
 	msg = kmalloc((sizeof(struct i2c_msg) * I2C_MSG_MAX),
-				      GFP_KERNEL);
-	if (!msg)
+			GFP_KERNEL);
+	if (NULL == msg)
 		return -ENOMEM;
 	data = kmalloc((sizeof(unsigned char) * I2C_DATA_MAX),
-				     GFP_KERNEL);
-	if (!data) {
+			GFP_KERNEL);
+	if (NULL == data) {
 		kfree(msg);
 		return -ENOMEM;
 	}
 
 	for (i = 0; i < max_entries; i++) {
-		switch (reglist[i].flag) {
-		case PLTFRM_CAMERA_MODULE_REG_TYPE_DATA:
+		switch (reglist[i].flag & PLTFRM_CAMERA_MODULE_WR_CONTINUE_MASK) {
+		case PLTFRM_CAMERA_MODULE_WR_CONTINUE:
 			(msg + j)->addr = client->addr;
 			(msg + j)->flags = I2C_M_WR;
-			(msg + j)->len = 3;
 			(msg + j)->buf = (data + k);
 
-			data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
-			data[k + 1] = (u8)(reglist[i].reg & 0xFF);
-			data[k + 2] = (u8)(reglist[i].val & 0xFF);
-			k = k + 3;
+			if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
+				data[k + 0] = (u8)(reglist[i].reg & 0xFF);
+				data[k + 1] = (u8)(reglist[i].val & 0xFF);
+				k = k + 2;
+				(msg + j)->len = 2;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
+				data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+				data[k + 1] = (u8)(reglist[i].reg & 0xFF);
+				data[k + 2] = (u8)(reglist[i].val & 0xFF);
+				k = k + 3;
+				(msg + j)->len = 3;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
+				data[k + 0] = (u8)(reglist[i].reg & 0xFF);
+				data[k + 1] = (u8)((reglist[i].val & 0xFF00) >> 8);
+				data[k + 2] = (u8)(reglist[i].val & 0xFF);
+				k = k + 3;
+				(msg + j)->len = 3;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
+				data[k + 0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+				data[k + 1] = (u8)(reglist[i].reg & 0xFF);
+				data[k + 2] = (u8)((reglist[i].val & 0xFF00) >> 8);
+				data[k + 3] = (u8)(reglist[i].val & 0xFF);
+				k = k + 4;
+				(msg + j)->len = 4;
+			}
+
 			j++;
 			if (j == (I2C_MSG_MAX - 1)) {
 				/* Bulk I2C transfer */
@@ -1100,6 +1257,49 @@ int pltfrm_camera_module_write_reglist(
 					"i2c_transfer return %d\n", ret);
 			}
 			break;
+		case PLTFRM_CAMERA_MODULE_WR_SINGLE:
+			msg->addr = client->addr;
+			msg->flags = I2C_M_WR;
+			msg->buf = data;
+
+			if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
+				data[0] = (u8)(reglist[i].reg & 0xFF);
+				data[1] = (u8)(reglist[i].val & 0xFF);
+				msg->len = 2;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 1) {
+				data[0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+				data[1] = (u8)(reglist[i].reg & 0xFF);
+				data[2] = (u8)(reglist[i].val & 0xFF);
+				msg->len = 3;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 1 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
+				data[0] = (u8)(reglist[i].reg & 0xFF);
+				data[1] = (u8)((reglist[i].val & 0xFF00) >> 8);
+				data[2] = (u8)(reglist[i].val & 0xFF);
+				msg->len = 3;
+			} else if (PLTFRM_CAMERA_MODULE_REG_LEN(reglist[i].flag) == 2 &&
+				PLTFRM_CAMERA_MODULE_DATA_LEN(reglist[i].flag) == 2) {
+				data[0] = (u8)((reglist[i].reg & 0xFF00) >> 8);
+				data[1] = (u8)(reglist[i].reg & 0xFF);
+				data[2] = (u8)((reglist[i].val & 0xFF00) >> 8);
+				data[3] = (u8)(reglist[i].val & 0xFF);
+				msg->len = 4;
+			}
+
+			pltfrm_camera_module_pr_debug(sd,
+				"messages transfers 1 0x%p msg\n", msg);
+			ret = i2c_transfer(client->adapter, msg, 1);
+			if (ret < 0) {
+				pltfrm_camera_module_pr_err(sd,
+					"i2c transfer returned with err %d\n",
+					ret);
+				kfree(msg);
+				kfree(data);
+				return ret;
+			}
+			break;
 		case PLTFRM_CAMERA_MODULE_REG_TYPE_TIMEOUT:
 			if (j > 0) {
 				/* Bulk I2C transfer */
@@ -1130,7 +1330,7 @@ int pltfrm_camera_module_write_reglist(
 		}
 	}
 
-	if (j != 0) {	/* Remaining I2C message */
+	if (j != 0) {	   /*Remaining I2C message*/
 		pltfrm_camera_module_pr_debug(sd,
 			"messages transfers 1 0x%p msg %d bytes %d\n",
 			msg, j, k);
diff --git a/include/linux/platform_data/rk_isp10_platform_camera_module.h b/include/linux/platform_data/rk_isp10_platform_camera_module.h
index 276d2189bef7..154694d42c66 100644
--- a/include/linux/platform_data/rk_isp10_platform_camera_module.h
+++ b/include/linux/platform_data/rk_isp10_platform_camera_module.h
@@ -18,8 +18,33 @@
 #define PLATFORM_CAMERA_MODULE_H
 #include <linux/videodev2.h>
 
-#define PLTFRM_CAMERA_MODULE_REG_TYPE_DATA 0
-#define PLTFRM_CAMERA_MODULE_REG_TYPE_TIMEOUT 1
+#define PLTFRM_CAMERA_MODULE_REG_CODE_MASK	0xff
+#define PLTFRM_CAMERA_MODULE_REG_LEN_BIT 8
+#define PLTFRM_CAMERA_MODULE_REG_LEN_MASK	(0x03 << PLTFRM_CAMERA_MODULE_REG_LEN_BIT)
+#define PLTFRM_CAMERA_MODULE_REG_LEN(flag) \
+	(((flag & PLTFRM_CAMERA_MODULE_REG_LEN_MASK) >> PLTFRM_CAMERA_MODULE_REG_LEN_BIT) + 1)
+
+#define PLTFRM_CAMERA_MODULE_DATA_LEN_BIT 10
+#define PLTFRM_CAMERA_MODULE_DATA_LEN_MASK	(0x03 << PLTFRM_CAMERA_MODULE_DATA_LEN_BIT)
+#define PLTFRM_CAMERA_MODULE_DATA_LEN(flag) \
+	(((flag & PLTFRM_CAMERA_MODULE_DATA_LEN_MASK) >> PLTFRM_CAMERA_MODULE_DATA_LEN_BIT) + 1)
+
+#define PLTFRM_CAMERA_MODULE_WR_CONTINUE_MASK 0x1000
+#define PLTFRM_CAMERA_MODULE_WR_CONTINUE 0x0000
+#define PLTFRM_CAMERA_MODULE_WR_SINGLE 0x1000
+
+#define PLTFRM_CAMERA_MODULE_RD_CONTINUE_MASK 0x2000
+#define PLTFRM_CAMERA_MODULE_RD_CONTINUE 0x2000
+#define PLTFRM_CAMERA_MODULE_RD_SINGLE 0x0000
+
+#define PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA1 0x000
+#define PLTFRM_CAMERA_MODULE_REG2_TYPE_DATA1 0x100
+#define PLTFRM_CAMERA_MODULE_REG1_TYPE_DATA2 0x400
+#define PLTFRM_CAMERA_MODULE_REG2_TYPE_DATA2 0x500
+
+#define PLTFRM_CAMERA_MODULE_REG_TYPE_DATA PLTFRM_CAMERA_MODULE_REG2_TYPE_DATA1
+#define PLTFRM_CAMERA_MODULE_REG_TYPE_TIMEOUT 0x01
+#define PLTFRM_CAMERA_MODULE_REG_TYPE_DATA_SINGLE 0x1100
 
 extern const char *PLTFRM_CAMERA_MODULE_PIN_PD;
 extern const char *PLTFRM_CAMERA_MODULE_PIN_PWR;
@@ -95,6 +120,15 @@ int pltfrm_superpix_camera_module_read_reg(struct v4l2_subdev *sd,
 int pltfrm_camera_module_write_reg(struct v4l2_subdev *sd,
 	u16 reg, u8 val);
 
+int pltfrm_camera_module_read_reg_ex(struct v4l2_subdev *sd,
+	u16 data_length,
+	u32 flag,
+	u16 reg,
+	u32 *val);
+
+int pltfrm_camera_module_write_reg_ex(struct v4l2_subdev *sd,
+	u32 flag, u16 reg, u16 val);
+
 int pltfrm_camera_module_write_reglist(
 	struct v4l2_subdev *sd,
 	const struct pltfrm_camera_module_reg reglist[],
-- 
2.35.3

