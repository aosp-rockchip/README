From 9b1870765de7092192ad424879f52e6e8b30b091 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Tue, 24 Apr 2018 09:17:25 +0800
Subject: [PATCH] media: rockchip: phy: Support isp0 and isp1 in rk3399 run at
 the same time

Change-Id: Iba0aee26ac8ec8df5047a07b2fa4c0e311d0329f
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
---
 .../platform/rockchip/isp1/mipi_dphy_sy.c     | 138 ++++++++++++++----
 1 file changed, 106 insertions(+), 32 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp1/mipi_dphy_sy.c b/drivers/media/platform/rockchip/isp1/mipi_dphy_sy.c
index 72b1876cdd03..c76ad313e9fd 100644
--- a/drivers/media/platform/rockchip/isp1/mipi_dphy_sy.c
+++ b/drivers/media/platform/rockchip/isp1/mipi_dphy_sy.c
@@ -65,6 +65,17 @@
 #define RK3399_GRF_SOC_CON24	0x6260
 #define RK3399_GRF_SOC_CON25	0x6264
 #define RK3399_GRF_SOC_STATUS1	0xe2a4
+#define RK3399_GRF_IO_VSEL	0x0900
+
+#define RK3288_PHY_TEST_CTRL0	0x30
+#define RK3288_PHY_TEST_CTRL1	0x34
+#define RK3288_PHY_SHUTDOWNZ	0x08
+#define RK3288_PHY_RSTZ		0x0c
+
+#define RK3399_PHY_TEST_CTRL0	0xb4
+#define RK3399_PHY_TEST_CTRL1	0xb8
+#define RK3399_PHY_SHUTDOWNZ	0xa0
+#define RK3399_PHY_RSTZ		0xa0
 
 #define CLOCK_LANE_HS_RX_CONTROL		0x34
 #define LANE0_HS_RX_CONTROL			0x44
@@ -86,11 +97,6 @@
 /*
  * CSI HOST
  */
-#define CSIHOST_PHY_TEST_CTRL0		0x30
-#define CSIHOST_PHY_TEST_CTRL1		0x34
-#define CSIHOST_PHY_SHUTDOWNZ		0x08
-#define CSIHOST_DPHY_RSTZ		0x0c
-
 #define PHY_TESTEN_ADDR			(0x1 << 16)
 #define PHY_TESTEN_DATA			(0x0 << 16)
 #define PHY_TESTCLK			(0x1 << 1)
@@ -148,6 +154,7 @@ enum dphy_reg_id {
 	/* below is for rk3399 only */
 	GRF_DPHY_RX0_CLK_INV_SEL,
 	GRF_DPHY_RX1_CLK_INV_SEL,
+	GRF_DPHY_TX1RX1_SRC_SEL,
 };
 
 enum mipi_dphy_ctl_type {
@@ -163,15 +170,29 @@ enum mipi_dphy_lane {
 	MIPI_DPHY_LANE_DATA3
 };
 
+enum txrx_reg_id {
+	TXRX_PHY_TEST_CTRL0 = 0,
+	TXRX_PHY_TEST_CTRL1,
+	TXRX_PHY_SHUTDOWNZ,
+	TXRX_PHY_RSTZ,
+};
+
 struct dphy_reg {
 	u32 offset;
 	u32 mask;
 	u32 shift;
 };
 
+struct txrx_reg {
+	u32 offset;
+};
+
 #define PHY_REG(_offset, _width, _shift) \
 	{ .offset = _offset, .mask = BIT(_width) - 1, .shift = _shift, }
 
+#define TXRX_REG(_offset) \
+	{ .offset = _offset, }
+
 static const struct dphy_reg rk3288_grf_dphy_regs[] = {
 	[GRF_CON_DISABLE_ISP] = PHY_REG(RK3288_GRF_SOC_CON6, 1, 0),
 	[GRF_CON_ISP_DPHY_SEL] = PHY_REG(RK3288_GRF_SOC_CON6, 1, 1),
@@ -226,7 +247,7 @@ static const struct dphy_reg rk3399_grf_dphy_regs[] = {
 	[GRF_DPHY_TX1RX1_FORCETXSTOPMODE] = PHY_REG(RK3399_GRF_SOC_CON23, 4, 8),
 	[GRF_DPHY_TX1RX1_TURNDISABLE] = PHY_REG(RK3399_GRF_SOC_CON23, 4, 12),
 	[GRF_DPHY_TX1RX1_TURNREQUEST] = PHY_REG(RK3399_GRF_SOC_CON24, 4, 0),
-	[GRF_DPHY_RX1_SRC_SEL] = PHY_REG(RK3399_GRF_SOC_CON24, 1, 4),
+	[GRF_DPHY_TX1RX1_SRC_SEL] = PHY_REG(RK3399_GRF_SOC_CON24, 1, 4),
 	[GRF_DPHY_TX1RX1_BASEDIR] = PHY_REG(RK3399_GRF_SOC_CON24, 1, 5),
 	[GRF_DPHY_TX1RX1_ENABLECLK] = PHY_REG(RK3399_GRF_SOC_CON24, 1, 6),
 	[GRF_DPHY_TX1RX1_MASTERSLAVEZ] = PHY_REG(RK3399_GRF_SOC_CON24, 1, 7),
@@ -235,6 +256,21 @@ static const struct dphy_reg rk3399_grf_dphy_regs[] = {
 	[GRF_DPHY_RX0_TESTCLK] = PHY_REG(RK3399_GRF_SOC_CON25, 1, 9),
 	[GRF_DPHY_RX0_TESTCLR] = PHY_REG(RK3399_GRF_SOC_CON25, 1, 10),
 	[GRF_DPHY_RX0_TESTDOUT] = PHY_REG(RK3399_GRF_SOC_STATUS1, 8, 0),
+	[GRF_DVP_V18SEL] = PHY_REG(RK3399_GRF_IO_VSEL, 1, 1),
+};
+
+static const struct txrx_reg rk3288_txrx_regs[] = {
+	[TXRX_PHY_TEST_CTRL0] = TXRX_REG(RK3288_PHY_TEST_CTRL0),
+	[TXRX_PHY_TEST_CTRL1] = TXRX_REG(RK3288_PHY_TEST_CTRL1),
+	[TXRX_PHY_SHUTDOWNZ] = TXRX_REG(RK3288_PHY_SHUTDOWNZ),
+	[TXRX_PHY_RSTZ] = TXRX_REG(RK3288_PHY_RSTZ),
+};
+
+static const struct txrx_reg rk3399_txrx_regs[] = {
+	[TXRX_PHY_TEST_CTRL0] = TXRX_REG(RK3399_PHY_TEST_CTRL0),
+	[TXRX_PHY_TEST_CTRL1] = TXRX_REG(RK3399_PHY_TEST_CTRL1),
+	[TXRX_PHY_SHUTDOWNZ] = TXRX_REG(RK3399_PHY_SHUTDOWNZ),
+	[TXRX_PHY_RSTZ] = TXRX_REG(RK3399_PHY_RSTZ),
 };
 
 struct hsfreq_range {
@@ -249,8 +285,10 @@ struct dphy_drv_data {
 	int num_clks;
 	const struct hsfreq_range *hsfreq_ranges;
 	int num_hsfreq_ranges;
-	const struct dphy_reg *regs;
+	const struct dphy_reg *grf_regs;
+	const struct txrx_reg *txrx_regs;
 	enum mipi_dphy_ctl_type ctl_type;
+	void (*individual_init)(struct mipidphy_priv *priv);
 };
 
 struct sensor_async_subdev {
@@ -272,6 +310,7 @@ struct mipidphy_priv {
 	struct device *dev;
 	struct regmap *regmap_grf;
 	const struct dphy_reg *grf_regs;
+	const struct txrx_reg *txrx_regs;
 	void __iomem *csihost_base_addr;
 	struct clk *clks[MAX_DPHY_CLK];
 	const struct dphy_drv_data *drv_data;
@@ -297,8 +336,17 @@ static inline void write_grf_reg(struct mipidphy_priv *priv,
 	const struct dphy_reg *reg = &priv->grf_regs[index];
 	unsigned int val = HIWORD_UPDATE(value, reg->mask, reg->shift);
 
-	WARN_ON(!reg->offset);
-	regmap_write(priv->regmap_grf, reg->offset, val);
+	if (reg->offset)
+		regmap_write(priv->regmap_grf, reg->offset, val);
+}
+
+static inline void write_txrx_reg(struct mipidphy_priv *priv,
+				  int index, u32 value)
+{
+	const struct txrx_reg *reg = &priv->txrx_regs[index];
+
+	if (reg->offset)
+		writel(value, priv->txrx_base_addr + reg->offset);
 }
 
 static void mipidphy0_wr_reg(struct mipidphy_priv *priv,
@@ -327,12 +375,10 @@ static void mipidphy1_wr_reg(struct mipidphy_priv *priv, unsigned char addr,
 	 * TESTEN =0,TESTDIN=data
 	 * TESTCLK=1
 	 */
-	writel((PHY_TESTEN_ADDR | addr),
-	       priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL1);
-	writel(0x00, priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL0);
-	writel((PHY_TESTEN_DATA | data),
-	       priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL1);
-	writel(PHY_TESTCLK, priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL0);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL1, PHY_TESTEN_ADDR | addr);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL0, 0x00);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL1, PHY_TESTEN_DATA | data);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL0, 0x02);
 }
 
 static void csi_mipidphy_wr_ths_settle(struct mipidphy_priv *priv, int hsfreq,
@@ -476,7 +522,8 @@ static int mipidphy_runtime_suspend(struct device *dev)
 
 	num_clks = priv->drv_data->num_clks;
 	for (i = num_clks - 1; i >= 0; i--)
-		clk_disable_unprepare(priv->clks[i]);
+		if (!IS_ERR(priv->clks[i]))
+			clk_disable_unprepare(priv->clks[i]);
 
 	return 0;
 }
@@ -490,9 +537,11 @@ static int mipidphy_runtime_resume(struct device *dev)
 
 	num_clks = priv->drv_data->num_clks;
 	for (i = 0; i < num_clks; i++) {
-		ret = clk_prepare_enable(priv->clks[i]);
-		if (ret < 0)
-			goto err;
+		if (!IS_ERR(priv->clks[i])) {
+			ret = clk_prepare_enable(priv->clks[i]);
+			if (ret < 0)
+				goto err;
+		}
 	}
 
 	return 0;
@@ -581,8 +630,26 @@ static const char * const rk3399_mipidphy_clks[] = {
 	"dphy-ref",
 	"dphy-cfg",
 	"grf",
+	"pclk_mipi_dsi",
 };
 
+static void default_mipidphy_individual_init(struct mipidphy_priv *priv)
+{
+}
+
+static void rk3399_mipidphy_individual_init(struct mipidphy_priv *priv)
+{
+	/*
+	 * According to the sequence of RK3399_TXRX_DPHY, the setting of isp0 mipi
+	 * will affect txrx dphy in default state of grf_soc_con24.
+	 */
+	write_grf_reg(priv, GRF_DPHY_TX1RX1_SRC_SEL, 0);
+	write_grf_reg(priv, GRF_DPHY_TX1RX1_MASTERSLAVEZ, 0);
+	write_grf_reg(priv, GRF_DPHY_TX1RX1_BASEDIR, 0);
+
+	write_grf_reg(priv, GRF_DVP_V18SEL, 0x1);
+}
+
 static int mipidphy_rx_stream_on(struct mipidphy_priv *priv,
 				 struct v4l2_subdev *sd)
 {
@@ -655,6 +722,7 @@ static int mipidphy_txrx_stream_on(struct mipidphy_priv *priv,
 	write_grf_reg(priv, GRF_CON_ISP_DPHY_SEL, 1);
 	write_grf_reg(priv, GRF_DSI_CSI_TESTBUS_SEL, 1);
 	write_grf_reg(priv, GRF_DPHY_RX1_SRC_SEL, 1);
+	write_grf_reg(priv, GRF_DPHY_TX1RX1_SRC_SEL, 0);
 	write_grf_reg(priv, GRF_DPHY_TX1RX1_MASTERSLAVEZ, 0);
 	write_grf_reg(priv, GRF_DPHY_TX1RX1_BASEDIR, 1);
 	/* Disable lan turn around, which is ignored in receive mode */
@@ -665,12 +733,12 @@ static int mipidphy_txrx_stream_on(struct mipidphy_priv *priv,
 	write_grf_reg(priv, GRF_DPHY_TX1RX1_ENABLE,
 		      GENMASK(sensor->lanes - 1, 0));
 	/* dphy start */
-	writel(0, priv->txrx_base_addr + CSIHOST_PHY_SHUTDOWNZ);
-	writel(0, priv->txrx_base_addr + CSIHOST_DPHY_RSTZ);
-	writel(PHY_TESTCLK, priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL0);
-	writel(PHY_TESTCLR, priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL0);
+	write_txrx_reg(priv, TXRX_PHY_SHUTDOWNZ, 0x00);
+	write_txrx_reg(priv, TXRX_PHY_RSTZ, 0x00);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL0, PHY_TESTCLK);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL0, PHY_TESTCLR);
 	usleep_range(100, 150);
-	writel(PHY_TESTCLK, priv->txrx_base_addr + CSIHOST_PHY_TEST_CTRL0);
+	write_txrx_reg(priv, TXRX_PHY_TEST_CTRL0, PHY_TESTCLK);
 	usleep_range(100, 150);
 
 	/* set clock lane */
@@ -750,8 +818,11 @@ static const struct dphy_drv_data rk3288_mipidphy_drv_data = {
 	.num_clks = ARRAY_SIZE(rk3288_mipidphy_clks),
 	.hsfreq_ranges = rk3288_mipidphy_hsfreq_ranges,
 	.num_hsfreq_ranges = ARRAY_SIZE(rk3288_mipidphy_hsfreq_ranges),
-	.regs = rk3288_grf_dphy_regs,
+	.grf_regs = rk3288_grf_dphy_regs,
+	.txrx_regs = rk3288_txrx_regs,
 	.ctl_type = MIPI_DPHY_CTL_GRF_ONLY,
+	.individual_init = default_mipidphy_individual_init,
+
 };
 
 static const struct dphy_drv_data rk3326_mipidphy_drv_data = {
@@ -759,8 +830,9 @@ static const struct dphy_drv_data rk3326_mipidphy_drv_data = {
 	.num_clks = ARRAY_SIZE(rk3326_mipidphy_clks),
 	.hsfreq_ranges = rk3326_mipidphy_hsfreq_ranges,
 	.num_hsfreq_ranges = ARRAY_SIZE(rk3326_mipidphy_hsfreq_ranges),
-	.regs = rk3326_grf_dphy_regs,
+	.grf_regs = rk3326_grf_dphy_regs,
 	.ctl_type = MIPI_DPHY_CTL_CSI_HOST,
+	.individual_init = default_mipidphy_individual_init,
 };
 
 static const struct dphy_drv_data rk3399_mipidphy_drv_data = {
@@ -768,8 +840,10 @@ static const struct dphy_drv_data rk3399_mipidphy_drv_data = {
 	.num_clks = ARRAY_SIZE(rk3399_mipidphy_clks),
 	.hsfreq_ranges = rk3399_mipidphy_hsfreq_ranges,
 	.num_hsfreq_ranges = ARRAY_SIZE(rk3399_mipidphy_hsfreq_ranges),
-	.regs = rk3399_grf_dphy_regs,
+	.grf_regs = rk3399_grf_dphy_regs,
+	.txrx_regs = rk3399_txrx_regs,
 	.ctl_type = MIPI_DPHY_CTL_GRF_ONLY,
+	.individual_init = rk3399_mipidphy_individual_init,
 };
 
 static const struct of_device_id rockchip_mipidphy_match_id[] = {
@@ -972,13 +1046,12 @@ static int rockchip_mipidphy_probe(struct platform_device *pdev)
 	for (i = 0; i < drv_data->num_clks; i++) {
 		priv->clks[i] = devm_clk_get(dev, drv_data->clks[i]);
 
-		if (IS_ERR(priv->clks[i])) {
-			dev_err(dev, "Failed to get %s\n", drv_data->clks[i]);
-			return PTR_ERR(priv->clks[i]);
-		}
+		if (IS_ERR(priv->clks[i]))
+			dev_dbg(dev, "Failed to get %s\n", drv_data->clks[i]);
 	}
 
-	priv->grf_regs = drv_data->regs;
+	priv->grf_regs = drv_data->grf_regs;
+	priv->txrx_regs = drv_data->txrx_regs;
 	priv->drv_data = drv_data;
 	if (drv_data->ctl_type == MIPI_DPHY_CTL_CSI_HOST) {
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
@@ -1006,6 +1079,7 @@ static int rockchip_mipidphy_probe(struct platform_device *pdev)
 		return ret;
 
 	pm_runtime_enable(&pdev->dev);
+	drv_data->individual_init(priv);
 
 	return 0;
 }
-- 
2.35.3

