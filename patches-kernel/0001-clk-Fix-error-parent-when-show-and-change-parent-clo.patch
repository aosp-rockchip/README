From 5f09850f65cc89d071cdf88063c98cec5b571a7a Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Fri, 27 Jul 2018 19:46:07 +0800
Subject: [PATCH] clk: Fix error parent when show and change parent clock

This patch fixes the following crash:

Internal error: Accessing user space memory outside uaccess.h routines:
96000005 [#1] PREEMPT SMP
Modules linked in: bcmdhd
CPU: 2 PID: 1293 Comm: cat Not tainted 4.4.138 #873
Hardware name: Rockchip PX30 evb ddr3 board (DT)
task: ffffffc044f0de80 task.stack: ffffffc044040000
PC is at clock_available_parent_show+0x58/0x78
LR is at seq_read+0x120/0x404
pc : [<ffffff800885a470>] lr : [<ffffff80081e2128>] pstate: 80400145
sp : ffffffc044043cd0
x29: ffffffc044043cd0 x28: ffffffc053f8c880
x27: ffffffc044fce400 x26: ffffffc044043d78
x25: ffffffc044043eb0 x24: 0000005b07cd4868
x23: ffffff8009196000 x22: ffffffc00a28d100
x21: ffffff8008f89317 x20: ffffffc053f8c840
x19: 0000000000000000 x18: 00000075016fd000
x17: 0000007501694f4c x16: ffffff80081c0dac
x15: aaaaaaaaaaaaaaab x14: 0000007501000000
x13: 0000000000000000 x12: 0000000000000000
x11: 0000000000000001 x10: 0101010101010101
x9 : 0000000000001000 x8 : 000000000000003f
x7 : ffffff8009196000 x6 : ffffff80081e2008
x5 : ffffff8008c75170 x4 : 0000000000000000
x3 : 0000000000000000 x2 : ffffff800885a418
x1 : 0000000000000001 x0 : 0000000000000000

Internal error: Accessing user space memory outside uaccess.h routines:
96000005 [#1] PREEMPT SMP
Modules linked in: bcmdhd
CPU: 1 PID: 1036 Comm: sh Not tainted 4.4.138 #871
Hardware name: Rockchip PX30 evb ddr3 board (DT)
task: ffffffc04c2e1b00 task.stack: ffffffc052868000
PC is at clock_parent_write+0x100/0x158
LR is at clock_parent_write+0xe4/0x158
pc : [<ffffff800885c310>] lr : [<ffffff800885c2f4>] pstate: 80400145
sp : ffffffc05286bb40
x29: ffffffc05286bb40 x28: ffffffc04c2e1b00
x27: ffffff8008b62000 x26: 0000000000000040
x25: 000000000000011d x24: ffffffc00a28d100
x23: ffffff8009196000 x22: 0000000000000008
x21: ffffff8009196000 x20: 0000000000000000
x19: 000000000000000e x18: 0000007a98c56000
x17: 0000007a98bee57c x16: ffffff80081c0e68
x15: aaaaaaaaaaaaaaab x14: 0000007a98600000
x13: 000000000000000d x12: 0000000000000019
x11: 0000000000000000 x10: 0000000000000001
x9 : 0000000000000000 x8 : ffffff80091c5850
x7 : ffffff80093efcd0 x6 : ffffffc05286bb96
x5 : ffffffc05286bb96 x4 : 0000000000000140
x3 : ffffffc052873b87 x2 : cb88537fdc8ba68a
x1 : 0000000000000000 x0 : 0000000000000000

Fixes: cd6fa34b83d7 ("clk: add/modify debugfs support for clocks")
Change-Id: I5988376845ef5ad096219c548055972c0998e02c
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/clk/clk.c | 36 ++++++++++++++++++++----------------
 1 file changed, 20 insertions(+), 16 deletions(-)

diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
index f674703bdf86..221d521bb00d 100644
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -2170,28 +2170,26 @@ static int clock_debug_rate_get(void *data, u64 *val)
 DEFINE_SIMPLE_ATTRIBUTE(clock_rate_fops, clock_debug_rate_get,
 			clock_debug_rate_set, "%llu\n");
 
-static int clock_available_parent_show(struct seq_file *s, void *data)
+static int possible_parents_show(struct seq_file *s, void *data)
 {
-	struct clk_core *core = (struct clk_core *)s->private;
+	struct clk_core *core = s->private;
 	int i;
 
-	for (i = 0; i < core->num_parents; i++) {
-		if (!core->parents[i])
-			continue;
-		seq_printf(s, "%s ", core->parents[i]->name);
-	}
-	seq_puts(s, "\n");
+	for (i = 0; i < core->num_parents - 1; i++)
+		seq_printf(s, "%s ", core->parent_names[i]);
+
+	seq_printf(s, "%s\n", core->parent_names[i]);
 
 	return 0;
 }
 
-static int clock_available_parent_open(struct inode *inode, struct file *file)
+static int possible_parents_open(struct inode *inode, struct file *file)
 {
-	return single_open(file, clock_available_parent_show, inode->i_private);
+	return single_open(file, possible_parents_show, inode->i_private);
 }
 
-static const struct file_operations clock_available_parent_fops = {
-	.open		= clock_available_parent_open,
+static const struct file_operations possible_parents_fops = {
+	.open		= possible_parents_open,
 	.read		= seq_read,
 	.llseek		= seq_lseek,
 	.release	= single_release,
@@ -2224,6 +2222,9 @@ static ssize_t clock_parent_write(struct file *filp, const char __user *buf,
 	if (ret != 1)
 		return -EINVAL;
 
+	if (core->num_parents <= 1)
+		return cnt;
+
 	for (i = 0; i < core->num_parents; i++) {
 		if (!core->parents[i])
 			continue;
@@ -2400,10 +2401,13 @@ static int clk_debug_create_one(struct clk_core *core, struct dentry *pdentry)
 	if (!d)
 		goto err_out;
 
-	d = debugfs_create_file("clk_available_parent", S_IRUGO, core->dentry,
-				core, &clock_available_parent_fops);
-	if (!d)
-		goto err_out;
+	if (core->num_parents > 1) {
+		d = debugfs_create_file("clk_possible_parents", S_IRUGO,
+					core->dentry, core,
+					&possible_parents_fops);
+		if (!d)
+			goto err_out;
+	}
 
 	d = debugfs_create_file("clk_parent", S_IRUGO  | S_IWUSR, core->dentry,
 				core, &clock_parent_fops);
-- 
2.35.3

