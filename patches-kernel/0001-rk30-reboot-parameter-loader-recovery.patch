From 414554aa70c96258ef6ab0e5c015ce94dc73bc18 Mon Sep 17 00:00:00 2001
From: kfx <kfx@rock-chips.com>
Date: Wed, 28 Mar 2012 17:10:04 +0800
Subject: [PATCH] rk30: reboot: parameter(loader,recovery)

---
 arch/arm/mach-rk30/include/mach/loader.h | 35 +++++++++++++++++++
 arch/arm/mach-rk30/reset.c               | 44 +++++++++++++++---------
 2 files changed, 63 insertions(+), 16 deletions(-)
 create mode 100644 arch/arm/mach-rk30/include/mach/loader.h

diff --git a/arch/arm/mach-rk30/include/mach/loader.h b/arch/arm/mach-rk30/include/mach/loader.h
new file mode 100644
index 000000000000..f0006b94a684
--- /dev/null
+++ b/arch/arm/mach-rk30/include/mach/loader.h
@@ -0,0 +1,35 @@
+/* arch/arm/mach-rk29/include/mach/loader.h
+ *
+ * Copyright (C) 2011 ROCKCHIP, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#ifndef __ASM_ARCH_RK30_LOADER_H
+#define __ASM_ARCH_RK30_LOADER_H
+
+#define SYS_LOADER_REBOOT_FLAG   0x5242C300  //high 24 bits is tag, low 8 bits is type
+#define SYS_KERNRL_REBOOT_FLAG   0xC3524200  //high 24 bits is tag, low 8 bits is type
+
+enum {
+    BOOT_NORMAL = 0, /* normal boot */
+    BOOT_LOADER,     /* enter loader rockusb mode */
+    BOOT_MASKROM,    /* enter maskrom rockusb mode (not support now) */
+    BOOT_RECOVER,    /* enter recover */
+    BOOT_NORECOVER,  /* do not enter recover */
+    BOOT_SECONDOS,   /* boot second OS (not support now)*/
+    BOOT_WIPEDATA,   /* enter recover and wipe data. */
+    BOOT_WIPEALL,    /* enter recover and wipe all data. */
+    BOOT_CHECKIMG,   /* check firmware img with backup part(in loader mode)*/
+    BOOT_FASTBOOT,   /* enter fast boot mode (not support now) */
+    BOOT_MAX         /* MAX VALID BOOT TYPE.*/
+};
+
+#endif
diff --git a/arch/arm/mach-rk30/reset.c b/arch/arm/mach-rk30/reset.c
index b826ad78917a..851162a2b12e 100644
--- a/arch/arm/mach-rk30/reset.c
+++ b/arch/arm/mach-rk30/reset.c
@@ -1,16 +1,28 @@
-#include <linux/io.h>
-#include <linux/kernel.h>
-#include <mach/system.h>
-#include <mach/cru.h>
-#include <mach/iomux.h>
-
-static void rk30_arch_reset(char mode, const char *cmd)
-{
-	/* disable remap */
-	writel_relaxed(1 << (12 + 16), RK30_GRF_BASE + GRF_SOC_CON0);
-	dsb();
-	writel_relaxed(0xeca8, RK30_CRU_BASE + CRU_GLB_SRST_SND);
-	dsb();
-}
-
-void (*arch_reset)(char, const char *) = rk30_arch_reset;
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <mach/system.h>
+#include <linux/string.h>
+#include <mach/cru.h>
+#include <mach/iomux.h>
+#include <mach/loader.h>
+
+static void rk30_arch_reset(char mode, const char *cmd)
+{
+	unsigned int reason = 0;
+
+	if(cmd) {
+		if (!strcmp(cmd, "loader") || !strcmp(cmd, "bootloader")) 
+			reason = SYS_LOADER_REBOOT_FLAG + BOOT_LOADER;
+		else if(!strcmp(cmd, "recovery"))
+			reason = SYS_LOADER_REBOOT_FLAG + BOOT_RECOVER;
+	}
+	writel_relaxed(reason, RK30_PMU_PHYS + 0x40);  //PMU_OS_REG0
+	dsb();
+	/* disable remap */
+	writel_relaxed(1 << (12 + 16), RK30_GRF_BASE + GRF_SOC_CON0);
+	dsb();
+	writel_relaxed(0xeca8, RK30_CRU_BASE + CRU_GLB_SRST_SND);
+	dsb();
+}
+
+void (*arch_reset)(char, const char *) = rk30_arch_reset;
-- 
2.35.3

