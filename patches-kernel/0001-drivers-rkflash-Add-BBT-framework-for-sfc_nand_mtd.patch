From e701096a22561166c59eec962a41d0f4a7fc1a60 Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Tue, 28 Apr 2020 12:58:00 +0800
Subject: [PATCH] drivers: rkflash: Add BBT framework for sfc_nand_mtd

It's a copy of mtd open source code bbt.c

Change-Id: I782b69345ef321938c76b13d6d68dfdd48265b9f
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/sfc_nand_mtd.c     | 121 ++++++++++++++++++--------
 drivers/rkflash/sfc_nand_mtd.h     |  74 ++++++++++++++++
 drivers/rkflash/sfc_nand_mtd_bbt.c | 134 +++++++++++++++++++++++++++++
 3 files changed, 294 insertions(+), 35 deletions(-)
 create mode 100644 drivers/rkflash/sfc_nand_mtd.h
 create mode 100644 drivers/rkflash/sfc_nand_mtd_bbt.c

diff --git a/drivers/rkflash/sfc_nand_mtd.c b/drivers/rkflash/sfc_nand_mtd.c
index 13f35f09e69d..0d8ceb2508a0 100644
--- a/drivers/rkflash/sfc_nand_mtd.c
+++ b/drivers/rkflash/sfc_nand_mtd.c
@@ -11,13 +11,7 @@
 
 #include "rkflash_blk.h"
 #include "rkflash_debug.h"
-
-struct snand_mtd_dev {
-	struct SFNAND_DEV *snand;
-	struct mutex	*lock; /* to lock this object */
-	struct mtd_info mtd;
-	u8 *dma_buf;
-};
+#include "sfc_nand_mtd.h"
 
 static struct mtd_partition nand_parts[MAX_PART_COUNT];
 
@@ -142,11 +136,35 @@ static int sfc_nand_read_mtd(struct mtd_info *mtd, loff_t from,
 static int sfc_nand_isbad_mtd(struct mtd_info *mtd, loff_t ofs)
 {
 	int ret;
+	struct snand_mtd_dev *p_dev = mtd_to_priv(mtd);
 
 	rkflash_print_dio("%s %llx\n", __func__, ofs);
 	if (ofs & mtd->writesize_mask)
 		return -EINVAL;
 
+	if (snanddev_bbt_is_initialized(p_dev)) {
+		unsigned int entry;
+		int status;
+
+		entry = snanddev_bbt_pos_to_entry(p_dev, ofs);
+		status = snanddev_bbt_get_block_status(p_dev, entry);
+		/* Lazy block status retrieval */
+		if (status == NAND_BBT_BLOCK_STATUS_UNKNOWN) {
+			if ((int)sfc_nand_check_bad_block(0, ofs >> mtd->writesize_shift))
+				status = NAND_BBT_BLOCK_FACTORY_BAD;
+			else
+				status = NAND_BBT_BLOCK_GOOD;
+
+			snanddev_bbt_set_block_status(p_dev, entry, status);
+		}
+
+		if (status == NAND_BBT_BLOCK_WORN ||
+		    status == NAND_BBT_BLOCK_FACTORY_BAD)
+			return true;
+
+		return false;
+	}
+
 	ret = (int)sfc_nand_check_bad_block(0, ofs >> mtd->writesize_shift);
 	if (ret)
 		pr_err("%s %llx is bad block\n", __func__, ofs);
@@ -157,6 +175,8 @@ static int sfc_nand_isbad_mtd(struct mtd_info *mtd, loff_t ofs)
 static int sfc_nand_markbad_mtd(struct mtd_info *mtd, loff_t ofs)
 {
 	u32 ret;
+	struct snand_mtd_dev *p_dev = mtd_to_priv(mtd);
+	unsigned int entry;
 
 	rkflash_print_error("%s %llx\n", __func__, ofs);
 	if (ofs & mtd->erasesize_mask)
@@ -177,6 +197,16 @@ static int sfc_nand_markbad_mtd(struct mtd_info *mtd, loff_t ofs)
 		rkflash_print_error("%s mark fail ofs 0x%llx ret=%d\n",
 				    __func__, ofs, ret);
 
+	if (!snanddev_bbt_is_initialized(p_dev))
+		goto out;
+
+	entry = snanddev_bbt_pos_to_entry(p_dev, ofs);
+	ret = snanddev_bbt_set_block_status(p_dev, entry, NAND_BBT_BLOCK_WORN);
+	if (ret)
+		goto out;
+
+	ret = snanddev_bbt_update(p_dev);
+out:
 	/* Mark bad recheck */
 	if (sfc_nand_check_bad_block(0, ofs >> mtd->writesize_shift)) {
 		mtd->ecc_stats.badblocks++;
@@ -190,9 +220,12 @@ static int sfc_nand_markbad_mtd(struct mtd_info *mtd, loff_t ofs)
 	return ret;
 }
 
+#include "sfc_nand_mtd_bbt.c"
+
 static int sfc_erase_mtd(struct mtd_info *mtd, struct erase_info *instr)
 {
 	struct snand_mtd_dev *p_dev = mtd_to_priv(mtd);
+	struct snand_mtd_dev *nand = mtd_to_snanddev(mtd);
 	u64 addr, remaining;
 	int ret = 0;
 
@@ -206,6 +239,16 @@ static int sfc_erase_mtd(struct mtd_info *mtd, struct erase_info *instr)
 	}
 
 	while (remaining) {
+		ret = snanddev_bbt_get_block_status(nand, addr >> mtd->erasesize_shift);
+		if (ret == NAND_BBT_BLOCK_WORN ||
+		    ret == NAND_BBT_BLOCK_FACTORY_BAD) {
+			pr_warn("attempt to erase a bad/reserved block @%llx\n",
+				addr >> mtd->erasesize_shift);
+			addr += mtd->erasesize;
+			remaining -= mtd->erasesize;
+			continue;
+		}
+
 		ret = sfc_nand_erase_mtd(mtd, addr);
 		if (ret) {
 			rkflash_print_error("%s fail addr 0x%llx ret=%d\n",
@@ -301,42 +344,50 @@ int sfc_nand_mtd_init(struct SFNAND_DEV *p_dev, struct mutex *lock)
 {
 	int ret, i, part_num = 0;
 	int capacity;
-	struct snand_mtd_dev *priv_dev = kzalloc(sizeof(*priv_dev), GFP_KERNEL);
+	struct snand_mtd_dev *nand = kzalloc(sizeof(*nand), GFP_KERNEL);
 
-	if (!priv_dev) {
+	if (!nand) {
 		rkflash_print_error("%s %d alloc failed\n", __func__, __LINE__);
 		return -ENOMEM;
 	}
 
-	priv_dev->snand = p_dev;
+	nand->snand = p_dev;
 	capacity = (1 << p_dev->capacity) << 9;
-	priv_dev->mtd.name = "spi-nand0";
-	priv_dev->mtd.type = MTD_NANDFLASH;
-	priv_dev->mtd.writesize = p_dev->page_size * SFC_NAND_SECTOR_SIZE;
-	priv_dev->mtd.flags = MTD_CAP_NANDFLASH;
-	priv_dev->mtd.size = capacity;
-	priv_dev->mtd._erase = sfc_erase_mtd;
-	priv_dev->mtd._read = sfc_read_mtd;
-	priv_dev->mtd._write = sfc_write_mtd;
-	priv_dev->mtd._block_isbad = sfc_isbad_mtd;
-	priv_dev->mtd._block_markbad = sfc_markbad_mtd;
-	priv_dev->mtd.oobsize = 16 * p_dev->page_size;
-	priv_dev->mtd.bitflip_threshold = 2;
-	priv_dev->mtd.erasesize = p_dev->block_size * SFC_NAND_SECTOR_SIZE;
-	priv_dev->mtd.writebufsize = p_dev->page_size * SFC_NAND_SECTOR_SIZE;
-	priv_dev->mtd.erasesize_shift = ffs(priv_dev->mtd.erasesize) - 1;
-	priv_dev->mtd.erasesize_mask = (1 << priv_dev->mtd.erasesize_shift) - 1;
-	priv_dev->mtd.writesize_shift = ffs(priv_dev->mtd.writesize) - 1;
-	priv_dev->mtd.writesize_mask = (1 << priv_dev->mtd.writesize_shift) - 1;
-	priv_dev->mtd.bitflip_threshold = 1;
-	priv_dev->lock = lock;
-	priv_dev->dma_buf = kmalloc(SFC_NAND_PAGE_MAX_SIZE, GFP_KERNEL | GFP_DMA);
-	if (!priv_dev->dma_buf) {
+	nand->mtd.name = "spi-nand0";
+	nand->mtd.type = MTD_NANDFLASH;
+	nand->mtd.writesize = p_dev->page_size * SFC_NAND_SECTOR_SIZE;
+	nand->mtd.flags = MTD_CAP_NANDFLASH;
+	nand->mtd.size = capacity;
+	nand->mtd._erase = sfc_erase_mtd;
+	nand->mtd._read = sfc_read_mtd;
+	nand->mtd._write = sfc_write_mtd;
+	nand->mtd._block_isbad = sfc_isbad_mtd;
+	nand->mtd._block_markbad = sfc_markbad_mtd;
+	nand->mtd.oobsize = 16 * p_dev->page_size;
+	nand->mtd.bitflip_threshold = 2;
+	nand->mtd.erasesize = p_dev->block_size * SFC_NAND_SECTOR_SIZE;
+	nand->mtd.writebufsize = p_dev->page_size * SFC_NAND_SECTOR_SIZE;
+	nand->mtd.erasesize_shift = ffs(nand->mtd.erasesize) - 1;
+	nand->mtd.erasesize_mask = (1 << nand->mtd.erasesize_shift) - 1;
+	nand->mtd.writesize_shift = ffs(nand->mtd.writesize) - 1;
+	nand->mtd.writesize_mask = (1 << nand->mtd.writesize_shift) - 1;
+	nand->mtd.bitflip_threshold = 1;
+	nand->mtd.priv = nand;
+	nand->lock = lock;
+	nand->dma_buf = kmalloc(SFC_NAND_PAGE_MAX_SIZE, GFP_KERNEL | GFP_DMA);
+	if (!nand->dma_buf) {
 		rkflash_print_error("%s dma_buf alloc failed\n", __func__);
 		ret = -ENOMEM;
 		goto error_out;
 	}
 
+	nand->bbt.option |= NANDDEV_BBT_USE_FLASH;
+	ret = snanddev_bbt_init(nand);
+	if (ret) {
+		rkflash_print_error("snanddev_bbt_init failed, ret= %d\n", ret);
+		return ret;
+	}
+
 	part_num = ARRAY_SIZE(def_nand_part);
 	for (i = 0; i < part_num; i++) {
 		nand_parts[i].name =
@@ -352,7 +403,7 @@ int sfc_nand_mtd_init(struct SFNAND_DEV *p_dev, struct mutex *lock)
 		nand_parts[i].mask_flags = 0;
 	}
 
-	ret = mtd_device_register(&priv_dev->mtd, nand_parts, part_num);
+	ret = mtd_device_register(&nand->mtd, nand_parts, part_num);
 	if (ret) {
 		pr_err("%s register mtd fail %d\n", __func__, ret);
 	} else {
@@ -361,9 +412,9 @@ int sfc_nand_mtd_init(struct SFNAND_DEV *p_dev, struct mutex *lock)
 		return 0;
 	}
 
-	kfree(priv_dev->dma_buf);
+	kfree(nand->dma_buf);
 error_out:
-	kfree(priv_dev);
+	kfree(nand);
 
 	return ret;
 }
diff --git a/drivers/rkflash/sfc_nand_mtd.h b/drivers/rkflash/sfc_nand_mtd.h
new file mode 100644
index 000000000000..c54bcb25b7ae
--- /dev/null
+++ b/drivers/rkflash/sfc_nand_mtd.h
@@ -0,0 +1,74 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+/* Copyright (c) 2018 Rockchip Electronics Co. Ltd. */
+
+#ifndef _SFC_NAND_MTD_H
+#define _SFC_NAND_MTD_H
+
+#ifndef nand_bbt_block_status
+/* BBT related functions */
+enum nand_bbt_block_status {
+	NAND_BBT_BLOCK_STATUS_UNKNOWN,
+	NAND_BBT_BLOCK_GOOD,
+	NAND_BBT_BLOCK_WORN,
+	NAND_BBT_BLOCK_RESERVED,
+	NAND_BBT_BLOCK_FACTORY_BAD,
+	NAND_BBT_BLOCK_NUM_STATUS,
+};
+#endif
+
+/* nand_bbt option */
+#define NANDDEV_BBT_USE_FLASH		BIT(0)
+#define NANDDEV_BBT_SCANNED		BIT(1)
+
+/* The maximum number of blocks to scan for a bbt */
+#define NANDDEV_BBT_SCAN_MAXBLOCKS	4
+
+struct snand_bbt {
+	unsigned long *cache;
+	unsigned int option;
+	unsigned int version;
+};
+
+struct snand_mtd_dev {
+	struct SFNAND_DEV *snand;
+	struct mutex	*lock; /* to lock this object */
+	struct mtd_info mtd;
+	u8 *dma_buf;
+	struct snand_bbt bbt;
+};
+
+static inline unsigned int snanddev_neraseblocks(const struct snand_mtd_dev *nand)
+{
+	unsigned int ret = nand->mtd.size >> nand->mtd.erasesize_shift;
+
+	return ret;
+}
+
+static inline bool snanddev_bbt_is_initialized(struct snand_mtd_dev *nand)
+{
+	return !!nand->bbt.cache;
+}
+
+static inline unsigned int snanddev_bbt_pos_to_entry(struct snand_mtd_dev *nand,
+						     const loff_t pos)
+{
+	return (unsigned int)(pos >> nand->mtd.erasesize_shift);
+}
+
+static inline struct mtd_info *snanddev_to_mtd(struct snand_mtd_dev *nand)
+{
+	return &nand->mtd;
+}
+
+static inline struct snand_mtd_dev *mtd_to_snanddev(struct mtd_info *mtd)
+{
+	return mtd->priv;
+}
+
+int snanddev_bbt_update(struct snand_mtd_dev *nand);
+int snanddev_bbt_get_block_status(const struct snand_mtd_dev *nand,
+				  unsigned int entry);
+int snanddev_bbt_set_block_status(struct snand_mtd_dev *nand, unsigned int entry,
+				  enum nand_bbt_block_status status);
+#endif
diff --git a/drivers/rkflash/sfc_nand_mtd_bbt.c b/drivers/rkflash/sfc_nand_mtd_bbt.c
new file mode 100644
index 000000000000..8ed9e7ff7624
--- /dev/null
+++ b/drivers/rkflash/sfc_nand_mtd_bbt.c
@@ -0,0 +1,134 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2017 Free Electrons
+ *
+ * Authors:
+ *	Boris Brezillon <boris.brezillon@free-electrons.com>
+ *	Peter Pan <peterpandong@micron.com>
+ */
+
+#include <linux/slab.h>
+
+#include "sfc_nand_mtd.h"
+
+/**
+ * nanddev_bbt_init() - Initialize the BBT (Bad Block Table)
+ * @nand: NAND device
+ *
+ * Initialize the in-memory BBT.
+ *
+ * Return: 0 in case of success, a negative error code otherwise.
+ */
+int snanddev_bbt_init(struct snand_mtd_dev *nand)
+{
+	unsigned int bits_per_block = fls(NAND_BBT_BLOCK_NUM_STATUS);
+	unsigned int nblocks = snanddev_neraseblocks(nand);
+	unsigned int nwords = DIV_ROUND_UP(nblocks * bits_per_block,
+					   BITS_PER_LONG);
+
+	nand->bbt.cache = kcalloc(nwords, sizeof(*nand->bbt.cache),
+				  GFP_KERNEL);
+	if (!nand->bbt.cache)
+		return -ENOMEM;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snanddev_bbt_init);
+
+/**
+ * nanddev_bbt_cleanup() - Cleanup the BBT (Bad Block Table)
+ * @nand: NAND device
+ *
+ * Undoes what has been done in nanddev_bbt_init()
+ */
+void snanddev_bbt_cleanup(struct snand_mtd_dev *nand)
+{
+	kfree(nand->bbt.cache);
+}
+EXPORT_SYMBOL_GPL(snanddev_bbt_cleanup);
+
+/**
+ * nanddev_bbt_update() - Update a BBT
+ * @nand: nand device
+ *
+ * Update the BBT. Currently a NOP function since on-flash bbt is not yet
+ * supported.
+ *
+ * Return: 0 in case of success, a negative error code otherwise.
+ */
+int snanddev_bbt_update(struct snand_mtd_dev *nand)
+{
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snanddev_bbt_update);
+
+/**
+ * nanddev_bbt_get_block_status() - Return the status of an eraseblock
+ * @nand: nand device
+ * @entry: the BBT entry
+ *
+ * Return: a positive number nand_bbt_block_status status or -%ERANGE if @entry
+ *	   is bigger than the BBT size.
+ */
+int snanddev_bbt_get_block_status(const struct snand_mtd_dev *nand,
+				  unsigned int entry)
+{
+	unsigned int bits_per_block = fls(NAND_BBT_BLOCK_NUM_STATUS);
+	unsigned long *pos = nand->bbt.cache +
+			     ((entry * bits_per_block) / BITS_PER_LONG);
+	unsigned int offs = (entry * bits_per_block) % BITS_PER_LONG;
+	unsigned long status;
+
+	if (entry >= snanddev_neraseblocks(nand))
+		return -ERANGE;
+
+	status = pos[0] >> offs;
+	if (bits_per_block + offs > BITS_PER_LONG)
+		status |= pos[1] << (BITS_PER_LONG - offs);
+
+	return status & GENMASK(bits_per_block - 1, 0);
+}
+EXPORT_SYMBOL_GPL(snanddev_bbt_get_block_status);
+
+/**
+ * nanddev_bbt_set_block_status() - Update the status of an eraseblock in the
+ *				    in-memory BBT
+ * @nand: nand device
+ * @entry: the BBT entry to update
+ * @status: the new status
+ *
+ * Update an entry of the in-memory BBT. If you want to push the updated BBT
+ * the NAND you should call nanddev_bbt_update().
+ *
+ * Return: 0 in case of success or -%ERANGE if @entry is bigger than the BBT
+ *	   size.
+ */
+int snanddev_bbt_set_block_status(struct snand_mtd_dev *nand,
+				  unsigned int entry,
+				  enum nand_bbt_block_status status)
+{
+	unsigned int bits_per_block = fls(NAND_BBT_BLOCK_NUM_STATUS);
+	unsigned long *pos = nand->bbt.cache +
+			     ((entry * bits_per_block) / BITS_PER_LONG);
+	unsigned int offs = (entry * bits_per_block) % BITS_PER_LONG;
+	unsigned long val = status & GENMASK(bits_per_block - 1, 0);
+
+	if (entry >= snanddev_neraseblocks(nand))
+		return -ERANGE;
+
+	if (offs + bits_per_block - 1 > 31)
+		pos[0] &= ~GENMASK(31, offs);
+	else
+		pos[0] &= ~GENMASK(offs + bits_per_block - 1, offs);
+	pos[0] |= val << offs;
+
+	if (bits_per_block + offs > BITS_PER_LONG) {
+		unsigned int rbits = BITS_PER_LONG - offs;
+
+		pos[1] &= ~GENMASK(bits_per_block - rbits - 1, 0);
+		pos[1] |= val >> rbits;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snanddev_bbt_set_block_status);
-- 
2.35.3

