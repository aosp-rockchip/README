From 8cf48bcc5ae3dde9c8659d3f1141ccace1532254 Mon Sep 17 00:00:00 2001
From: clb <clb@rock-chips.com>
Date: Fri, 29 Jul 2011 16:46:02 +0800
Subject: [PATCH] add bq27541

---
 arch/arm/configs/rk29_newton_defconfig  |  32 +-
 arch/arm/mach-rk29/include/mach/board.h |   6 +
 drivers/power/Kconfig                   |   6 +
 drivers/power/Makefile                  |   3 +-
 drivers/power/bq27541_battery.c         | 687 ++++++++++++++++++++++++
 5 files changed, 710 insertions(+), 24 deletions(-)
 mode change 100755 => 100644 drivers/power/Kconfig
 mode change 100755 => 100644 drivers/power/Makefile
 create mode 100755 drivers/power/bq27541_battery.c

diff --git a/arch/arm/configs/rk29_newton_defconfig b/arch/arm/configs/rk29_newton_defconfig
index 282bc8397431..6e68a11d05a5 100755
--- a/arch/arm/configs/rk29_newton_defconfig
+++ b/arch/arm/configs/rk29_newton_defconfig
@@ -1,7 +1,7 @@
 #
 # Automatically generated make config: don't edit
 # Linux kernel version: 2.6.32.27
-# Wed Jul 27 17:48:19 2011
+# Fri Jul 29 16:43:33 2011
 #
 CONFIG_ARM=y
 CONFIG_SYS_SUPPORTS_APM_EMULATION=y
@@ -199,9 +199,7 @@ CONFIG_MMU=y
 # CONFIG_ARCH_DAVINCI is not set
 # CONFIG_ARCH_OMAP is not set
 # CONFIG_ARCH_BCMRING is not set
-# CONFIG_ARCH_RK2818 is not set
 CONFIG_ARCH_RK29=y
-CONFIG_WIFI_CONTROL_FUNC=y
 # CONFIG_MACH_RK29SDK is not set
 # CONFIG_MACH_RK29SDK_DDR3 is not set
 # CONFIG_MACH_RK29WINACCORD is not set
@@ -237,6 +235,8 @@ CONFIG_MACH_RK29_newton=y
 CONFIG_DDR_TYPE_DDR3_DEFAULT=y
 CONFIG_RK29_MEM_SIZE_M=512
 CONFIG_DDR_SDRAM_FREQ=456
+# CONFIG_DDR_RECONFIG is not set
+CONFIG_WIFI_CONTROL_FUNC=y
 
 #
 # RK29 VPU (Video Processing Unit) support
@@ -969,7 +969,7 @@ CONFIG_UART2_RK29=y
 CONFIG_UART2_CTS_RTS_RK29=y
 # CONFIG_UART2_DMA_RK29 is not set
 CONFIG_UART3_RK29=y
-CONFIG_UART3_CTS_RTS_RK29=y
+# CONFIG_UART3_CTS_RTS_RK29 is not set
 # CONFIG_UART3_DMA_RK29 is not set
 CONFIG_SERIAL_RK29_CONSOLE=y
 CONFIG_UNIX98_PTYS=y
@@ -1004,6 +1004,9 @@ CONFIG_RK29_I2C1_CONTROLLER=y
 CONFIG_I2C2_RK29=y
 CONFIG_RK29_I2C2_CONTROLLER=y
 # CONFIG_RK29_I2C2_GPIO is not set
+CONFIG_I2C3_RK29=y
+CONFIG_RK29_I2C3_CONTROLLER=y
+# CONFIG_RK29_I2C3_GPIO is not set
 CONFIG_I2C_DEV_RK29=y
 
 #
@@ -1020,7 +1023,6 @@ CONFIG_I2C_DEV_RK29=y
 CONFIG_ADC=y
 # CONFIG_ADC_RK28 is not set
 CONFIG_ADC_RK29=y
-# CONFIG_SPI_FPGA is not set
 
 #
 # Headset device support
@@ -1074,10 +1076,9 @@ CONFIG_POWER_SUPPLY=y
 # CONFIG_BATTERY_BQ27x00 is not set
 # CONFIG_BATTERY_MAX17040 is not set
 # CONFIG_BATTERY_STC3100 is not set
-CONFIG_BATTERY_BQ27510=y
+# CONFIG_BATTERY_BQ27510 is not set
+CONFIG_BATTERY_BQ27541=y
 # CONFIG_BATTERY_BQ3060 is not set
-# CONFIG_CHECK_BATT_CAPACITY is not set
-CONFIG_NO_BATTERY_IC=y
 # CONFIG_HWMON is not set
 # CONFIG_THERMAL is not set
 # CONFIG_WATCHDOG is not set
@@ -1818,21 +1819,6 @@ CONFIG_ANDROID_LOW_MEMORY_KILLER=y
 # CONFIG_RAR_REGISTER is not set
 # CONFIG_IIO is not set
 
-#
-# DSP
-#
-# CONFIG_RK2818_DSP is not set
-
-#
-# RK1000 control
-#
-# CONFIG_RK1000_CONTROL is not set
-
-#
-# rk2818 POWER CONTROL
-#
-# CONFIG_RK2818_POWER is not set
-
 #
 # GPU Vivante
 #
diff --git a/arch/arm/mach-rk29/include/mach/board.h b/arch/arm/mach-rk29/include/mach/board.h
index 2e3dcfdc6230..8db0d363584b 100755
--- a/arch/arm/mach-rk29/include/mach/board.h
+++ b/arch/arm/mach-rk29/include/mach/board.h
@@ -156,6 +156,12 @@ struct bq27510_platform_data {
 	unsigned int bat_num;
 };
 
+struct bq27541_platform_data {	
+	int (*init_dc_check_pin)(void);	
+	unsigned int dc_check_pin;	
+	unsigned int bat_num;
+};
+
 /*i2s*/
 struct rk29_i2s_platform_data {
 	int (*io_init)(void);
diff --git a/drivers/power/Kconfig b/drivers/power/Kconfig
old mode 100755
new mode 100644
index 2717e933c221..63116854b652
--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -142,6 +142,12 @@ config BATTERY_BQ27510
 	depends on I2C && ARCH_RK29
 	help
 	  Say Y here to enable support for batteries with BQ27510(I2C) chip.
+config BATTERY_BQ27541
+	tristate "BQ27541 battery driver"
+	select I2C_DEV_RK29
+	depends on I2C && ARCH_RK29
+	help
+	  Say Y here to enable support for batteries with BQ27541(I2C) chip.
 	
 config BATTERY_BQ3060
 	tristate "BQ3060 battery driver"
diff --git a/drivers/power/Makefile b/drivers/power/Makefile
old mode 100755
new mode 100644
index bd027a37cedf..4e8b1a59a99f
--- a/drivers/power/Makefile
+++ b/drivers/power/Makefile
@@ -33,4 +33,5 @@ obj-$(CONFIG_BATTERY_MAX17040)	+= max17040_battery.o
 obj-$(CONFIG_CHARGER_PCF50633)	+= pcf50633-charger.o
 obj-$(CONFIG_BATTERY_STC3100)	+= stc3100_battery.o
 obj-$(CONFIG_BATTERY_BQ27510)	+= bq27510_battery.o
-obj-$(CONFIG_BATTERY_BQ3060)	+= bq3060_battery.o
+obj-$(CONFIG_BATTERY_BQ27541)	+= bq27541_battery.o
+obj-$(CONFIG_BATTERY_BQ3060)   += bq3060_battery.o
diff --git a/drivers/power/bq27541_battery.c b/drivers/power/bq27541_battery.c
new file mode 100755
index 000000000000..126416c22f9c
--- /dev/null
+++ b/drivers/power/bq27541_battery.c
@@ -0,0 +1,687 @@
+/*
+ * BQ27510 battery driver
+ *
+ * This package is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * THIS PACKAGE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
+ * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
+ *
+ */
+#include <linux/module.h>
+#include <linux/param.h>
+#include <linux/jiffies.h>
+#include <linux/workqueue.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/idr.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <asm/unaligned.h>
+#include <mach/gpio.h>
+#include <linux/proc_fs.h>
+#include <asm/uaccess.h>
+#include <mach/board.h>
+
+
+#define DRIVER_VERSION			"1.1.0"
+#define BQ27x00_REG_TEMP		0x06
+#define BQ27x00_REG_VOLT		0x08
+#define BQ27x00_REG_AI			0x14
+#define BQ27x00_REG_FLAGS		0x0A
+#define BQ27x00_REG_TTE			0x16
+#define BQ27x00_REG_TTF			0x18
+#define BQ27x00_REG_TTECP		0x26
+#define BQ27000_REG_RSOC		0x0B /* Relative State-of-Charge */
+#define BQ27500_REG_SOC			0x2c
+
+#define BQ27500_FLAG_DSC		BIT(0)
+#define BQ27000_FLAG_CHGS		BIT(8)
+#define BQ27500_FLAG_FC			BIT(9)
+#define BQ27500_FLAG_OTD		BIT(14)
+#define BQ27500_FLAG_OTC		BIT(15)
+
+#define BQ27510_SPEED 			100 * 1000
+int  virtual_battery_enable = 0;
+extern int dwc_vbus_status(void);
+static void bq27541_set(void);
+
+#if 0
+#define DBG(x...) printk(KERN_INFO x)
+#else
+#define DBG(x...) do { } while (0)
+#endif
+
+/* If the system has several batteries we need a different name for each
+ * of them...
+ */
+static DEFINE_MUTEX(battery_mutex);
+
+struct bq27541_device_info {
+	struct device 		*dev;
+	struct power_supply	bat;
+	struct power_supply	ac;
+	struct delayed_work work;
+	struct i2c_client	*client;
+	unsigned int interval;
+	unsigned int dc_check_pin;
+	unsigned int bat_num;
+};
+  
+static struct bq27541_device_info *bq27541_di;
+static enum power_supply_property bq27541_battery_props[] = {
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_HEALTH,
+	//POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW,
+	//POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG,
+	//POWER_SUPPLY_PROP_TIME_TO_FULL_NOW,
+};
+
+static enum power_supply_property rk29_ac_props[] = {
+	POWER_SUPPLY_PROP_ONLINE,
+};
+
+static ssize_t battery_proc_write(struct file *file,const char __user *buffer,
+			 unsigned long count,void *data)
+{
+	char c;
+	int rc;
+	printk("USER:\n");
+	printk("echo x >/proc/driver/power\n");
+	printk("x=1,means just print log ||x=2,means log and data ||x= other,means close log\n");
+
+	rc = get_user(c,buffer);
+	if(rc)
+		return rc;
+	if(c == '1')
+		virtual_battery_enable = 1;
+	else if(c == '2')
+		virtual_battery_enable = 2;
+	else if(c == '3')
+		virtual_battery_enable = 3;
+	else if(c == '9'){
+		printk("%s:%d>>bq27541 set\n",__FUNCTION__,__LINE__);
+		bq27541_set();
+	}
+	else 
+		virtual_battery_enable = 0;
+	printk("%s,count(%d),virtual_battery_enable(%d)\n",__FUNCTION__,(int)count,virtual_battery_enable);
+	return count;
+}
+
+static const struct file_operations battery_proc_fops = {
+	.owner		= THIS_MODULE, 
+	.write		= battery_proc_write,
+}; 
+
+/*
+ * Common code for BQ27510 devices read
+ */
+static int bq27541_read(struct i2c_client *client, u8 reg, u8 buf[], unsigned len)
+{
+	int ret;
+	ret = i2c_master_reg8_recv(client, reg, buf, len, BQ27510_SPEED);
+	return ret; 
+}
+
+static int bq27541_write(struct i2c_client *client, u8 reg, u8 const buf[], unsigned len)
+{
+	int ret; 
+	ret = i2c_master_reg8_send(client, reg, buf, (int)len, BQ27510_SPEED);
+	return ret;
+}
+
+/*
+ * Return the battery temperature in tenths of degree Celsius
+ * Or < 0 if something fails.
+ */
+static int bq27541_battery_temperature(struct bq27541_device_info *di)
+{
+	int ret;
+	int temp = 0;
+	u8 buf[2] ={0};
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+	return 258;
+	#endif
+
+	if(virtual_battery_enable == 1)
+		return 125/*258*/;
+	ret = bq27541_read(di->client,BQ27x00_REG_TEMP,buf,2);
+	if (ret<0) {
+		dev_err(di->dev, "error reading temperature\n");
+		return ret;
+	}
+	temp = get_unaligned_le16(buf);
+	temp = temp - 2731;  //K
+	DBG("Enter:%s %d--temp = %d\n",__FUNCTION__,__LINE__,temp);
+	return temp;
+}
+
+/*
+ * Return the battery Voltage in milivolts
+ * Or < 0 if something fails.
+ */
+static int bq27541_battery_voltage(struct bq27541_device_info *di)
+{
+	int ret;
+	u8 buf[2] = {0};
+	int volt = 0;
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+		return 4000000;
+	#endif
+	if(virtual_battery_enable == 1)
+		return 2000000/*4000000*/;
+
+	ret = bq27541_read(di->client,BQ27x00_REG_VOLT,buf,2); 
+	if (ret<0) {
+		dev_err(di->dev, "error reading voltage\n");
+		return ret;
+	}
+	volt = get_unaligned_le16(buf);
+
+	//bp27510 can only measure one li-lion bat
+	if(di->bat_num == 2){
+		volt = volt * 1000 * 2;
+	}else{
+		volt = volt * 1000;
+	}
+
+	DBG("Enter:%s %d--volt = %d\n",__FUNCTION__,__LINE__,volt);
+	return volt;
+}
+
+/*
+ * Return the battery average current
+ * Note that current can be negative signed as well
+ * Or 0 if something fails.
+ */
+static int bq27541_battery_current(struct bq27541_device_info *di)
+{
+	int ret;
+	int curr = 0;
+	u8 buf[2] = {0};
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+		return 22000;
+	#endif
+	if(virtual_battery_enable == 1)
+		return 11000/*22000*/;
+	ret = bq27541_read(di->client,BQ27x00_REG_AI,buf,2);
+	if (ret<0) {
+		dev_err(di->dev, "error reading current\n");
+		return 0;
+	}
+
+	curr = get_unaligned_le16(buf);
+	DBG("curr = %x \n",curr);
+	if(curr>0x8000){
+		curr = 0xFFFF^(curr-1);
+	}
+	curr = curr * 1000;
+	DBG("Enter:%s %d--curr = %d\n",__FUNCTION__,__LINE__,curr);
+	return curr;
+}
+
+/*
+ * Return the battery Relative State-of-Charge
+ * Or < 0 if something fails.
+ */
+static int bq27541_battery_rsoc(struct bq27541_device_info *di)
+{
+	int ret;
+	int rsoc = 0;
+	#if 0
+	int nvcap = 0,facap = 0,remcap=0,fccap=0,full=0,cnt=0;
+	int art = 0, artte = 0, ai = 0, tte = 0, ttf = 0, si = 0;
+	int stte = 0, mli = 0, mltte = 0, ae = 0, ap = 0, ttecp = 0, cc = 0;
+	#endif
+	u8 buf[2];
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+		return 100;
+	#endif
+	if(virtual_battery_enable == 1)
+		return 50/*100*/;
+	
+	ret = bq27541_read(di->client,BQ27500_REG_SOC,buf,2); 
+	if (ret<0) {
+		dev_err(di->dev, "error reading relative State-of-Charge\n");
+		return ret;
+	}
+	rsoc = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--rsoc = %d\n",__FUNCTION__,__LINE__,rsoc);
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+	rsoc = 100;
+	#endif
+	#if 0     //other register information, for debug use
+	ret = bq27541_read(di->client,0x0c,buf,2);		//NominalAvailableCapacity
+	nvcap = get_unaligned_le16(buf);
+	DBG("\nEnter:%s %d--nvcap = %d\n",__FUNCTION__,__LINE__,nvcap);
+	ret = bq27541_read(di->client,0x0e,buf,2);		//FullAvailableCapacity
+	facap = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--facap = %d\n",__FUNCTION__,__LINE__,facap);
+	ret = bq27541_read(di->client,0x10,buf,2);		//RemainingCapacity
+	remcap = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--remcap = %d\n",__FUNCTION__,__LINE__,remcap);
+	ret = bq27541_read(di->client,0x12,buf,2);		//FullChargeCapacity
+	fccap = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--fccap = %d\n",__FUNCTION__,__LINE__,fccap);
+	ret = bq27541_read(di->client,0x3c,buf,2);		//DesignCapacity
+	full = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--DesignCapacity = %d\n",__FUNCTION__,__LINE__,full);
+	
+	buf[0] = 0x00;						//CONTROL_STATUS
+	buf[1] = 0x00;
+	bq27541_write(di->client,0x00,buf,2);
+	ret = bq27541_read(di->client,0x00,buf,2);
+	cnt = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--Control status = %x\n",__FUNCTION__,__LINE__,cnt);
+
+	ret = bq27541_read(di->client,0x02,buf,2);		//AtRate
+	art = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--AtRate = %d\n",__FUNCTION__,__LINE__,art);
+	ret = bq27541_read(di->client,0x04,buf,2);		//AtRateTimeToEmpty
+	artte = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--AtRateTimeToEmpty = %d\n",__FUNCTION__,__LINE__,artte);
+	ret = bq27541_read(di->client,0x14,buf,2);		//AverageCurrent
+	ai = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--AverageCurrent = %d\n",__FUNCTION__,__LINE__,ai);
+	ret = bq27541_read(di->client,0x16,buf,2);		//TimeToEmpty
+	tte = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--TimeToEmpty = %d\n",__FUNCTION__,__LINE__,tte);
+	ret = bq27541_read(di->client,0x18,buf,2);		//TimeToFull
+	ttf = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--TimeToFull = %d\n",__FUNCTION__,__LINE__,ttf);
+	ret = bq27541_read(di->client,0x1a,buf,2);		//StandbyCurrent
+	si = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--StandbyCurrent = %d\n",__FUNCTION__,__LINE__,si);
+	ret = bq27541_read(di->client,0x1c,buf,2);		//StandbyTimeToEmpty
+	stte = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--StandbyTimeToEmpty = %d\n",__FUNCTION__,__LINE__,stte);
+	ret = bq27541_read(di->client,0x1e,buf,2);		//MaxLoadCurrent
+	mli = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--MaxLoadCurrent = %d\n",__FUNCTION__,__LINE__,mli);
+	ret = bq27541_read(di->client,0x20,buf,2);		//MaxLoadTimeToEmpty
+	mltte = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--MaxLoadTimeToEmpty = %d\n",__FUNCTION__,__LINE__,mltte);
+	ret = bq27541_read(di->client,0x22,buf,2);		//AvailableEnergy
+	ae = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--AvailableEnergy = %d\n",__FUNCTION__,__LINE__,ae);
+	ret = bq27541_read(di->client,0x24,buf,2);		//AveragePower
+	ap = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--AveragePower = %d\n",__FUNCTION__,__LINE__,ap);
+	ret = bq27541_read(di->client,0x26,buf,2);		//TTEatConstantPower
+	ttecp = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--TTEatConstantPower = %d\n",__FUNCTION__,__LINE__,ttecp);
+	ret = bq27541_read(di->client,0x2a,buf,2);		//CycleCount
+	cc = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--CycleCount = %d\n",__FUNCTION__,__LINE__,cc);
+	#endif
+	return rsoc;
+}
+
+static int bq27541_battery_status(struct bq27541_device_info *di,
+				  union power_supply_propval *val)
+{
+	u8 buf[2] = {0};
+	int flags = 0;
+	int status = 0;
+	int ret = 0;
+
+	#if defined (CONFIG_NO_BATTERY_IC)
+		val->intval = POWER_SUPPLY_STATUS_FULL;
+	return 0;
+	#endif
+
+	if(virtual_battery_enable == 1)
+	{
+		val->intval = POWER_SUPPLY_STATUS_FULL;
+		return 0;
+	}
+	ret = bq27541_read(di->client,BQ27x00_REG_FLAGS, buf, 2);
+	if (ret < 0) {
+		dev_err(di->dev, "error reading flags\n");
+		return ret;
+	}
+	flags = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--status = %x\n",__FUNCTION__,__LINE__,flags);
+	if (flags & BQ27500_FLAG_FC)
+		status = POWER_SUPPLY_STATUS_FULL;
+	else if (flags & BQ27500_FLAG_DSC)
+		status = POWER_SUPPLY_STATUS_DISCHARGING;
+	else
+		status = POWER_SUPPLY_STATUS_CHARGING;
+
+	val->intval = status;
+	return 0;
+}
+
+static int bq27541_health_status(struct bq27541_device_info *di,
+				  union power_supply_propval *val)
+{
+	u8 buf[2] = {0};
+	int flags = 0;
+	int status;
+	int ret;
+	
+	#if defined (CONFIG_NO_BATTERY_IC)
+		val->intval = POWER_SUPPLY_HEALTH_GOOD;
+	return 0;
+	#endif
+
+	if(virtual_battery_enable == 1)
+	{
+		val->intval = POWER_SUPPLY_HEALTH_GOOD;
+		return 0;
+	}
+	ret = bq27541_read(di->client,BQ27x00_REG_FLAGS, buf, 2);
+	if (ret < 0) {
+		dev_err(di->dev, "error reading flags\n");
+		return ret;
+	}
+	flags = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--status = %x\n",__FUNCTION__,__LINE__,flags);
+	
+	if ((flags & BQ27500_FLAG_OTD)||(flags & BQ27500_FLAG_OTC))
+		status = POWER_SUPPLY_HEALTH_OVERHEAT;
+	else
+		status = POWER_SUPPLY_HEALTH_GOOD;
+
+
+
+	val->intval = status;
+	return 0;
+}
+
+
+/*
+ * Read a time register.
+ * Return < 0 if something fails.
+ */
+static int bq27541_battery_time(struct bq27541_device_info *di, int reg,
+				union power_supply_propval *val)
+{
+	u8 buf[2] = {0};
+	int tval = 0;
+	int ret;
+
+	ret = bq27541_read(di->client,reg,buf,2);
+	if (ret<0) {
+		dev_err(di->dev, "error reading register %02x\n", reg);
+		return ret;
+	}
+	tval = get_unaligned_le16(buf);
+	DBG("Enter:%s %d--tval=%d\n",__FUNCTION__,__LINE__,tval);
+	if (tval == 65535)
+		return -ENODATA;
+
+	val->intval = tval * 60;
+	DBG("Enter:%s %d val->intval = %d\n",__FUNCTION__,__LINE__,val->intval);
+	return 0;
+}
+
+#define to_bq27541_device_info(x) container_of((x), \
+				struct bq27541_device_info, bat);
+   
+static int bq27541_battery_get_property(struct power_supply *psy,
+					enum power_supply_property psp,
+					union power_supply_propval *val)
+{
+	int ret = 0;
+	struct bq27541_device_info *di = to_bq27541_device_info(psy);
+	DBG("Enter:%s %d psp= %d\n",__FUNCTION__,__LINE__,psp);
+	
+	switch (psp) {
+
+	case POWER_SUPPLY_PROP_STATUS:
+		ret = bq27541_battery_status(di, val);
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = bq27541_battery_voltage(di);
+		if (psp == POWER_SUPPLY_PROP_PRESENT)
+			val->intval = val->intval <= 0 ? 0 : 1;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		val->intval = bq27541_battery_current(di);
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = bq27541_battery_rsoc(di);
+		break;
+
+	case POWER_SUPPLY_PROP_TEMP:
+		val->intval = bq27541_battery_temperature(di);
+		break;
+
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = POWER_SUPPLY_TECHNOLOGY_LION;	
+		break;
+	case POWER_SUPPLY_PROP_HEALTH:
+		ret = bq27541_health_status(di, val);
+		break;
+	case POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW:
+		ret = bq27541_battery_time(di, BQ27x00_REG_TTE, val);
+		break;
+	case POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG:
+		ret = bq27541_battery_time(di, BQ27x00_REG_TTECP, val);
+		break;
+	case POWER_SUPPLY_PROP_TIME_TO_FULL_NOW:
+		ret = bq27541_battery_time(di, BQ27x00_REG_TTF, val);
+		break;
+	
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int rk29_ac_get_property(struct power_supply *psy,
+			enum power_supply_property psp,
+			union power_supply_propval *val)
+{
+	int ret = 0;
+	struct bq27541_device_info *di = container_of(psy, struct bq27541_device_info, ac);
+	
+	switch (psp) {
+	case POWER_SUPPLY_PROP_ONLINE:
+		if (psy->type == POWER_SUPPLY_TYPE_MAINS){
+			if(gpio_get_value(di->dc_check_pin))
+				val->intval = 0;	/*discharging*/
+			else
+				val->intval = 1;	/*charging*/
+		}
+		DBG("%s:%d val->intval = %d\n",__FUNCTION__,__LINE__,val->intval);
+		break;
+		
+	default:
+		ret = -EINVAL;
+		break;
+	}
+	return ret;
+}
+
+static void bq27541_powersupply_init(struct bq27541_device_info *di)
+{
+	di->bat.type = POWER_SUPPLY_TYPE_BATTERY;
+	di->bat.properties = bq27541_battery_props;
+	di->bat.num_properties = ARRAY_SIZE(bq27541_battery_props);
+	di->bat.get_property = bq27541_battery_get_property;
+	
+	di->ac.name = "ac";
+	di->ac.type = POWER_SUPPLY_TYPE_MAINS;
+	di->ac.properties = rk29_ac_props;
+	di->ac.num_properties = ARRAY_SIZE(rk29_ac_props);
+	di->ac.get_property = rk29_ac_get_property;
+}
+
+
+static void bq27541_battery_update_status(struct bq27541_device_info *di)
+{
+	power_supply_changed(&di->bat);
+}
+
+static void bq27541_battery_work(struct work_struct *work)
+{
+	struct bq27541_device_info *di = container_of(work, struct bq27541_device_info, work.work); 
+	bq27541_battery_update_status(di);
+	/* reschedule for the next time */
+	schedule_delayed_work(&di->work, di->interval);
+}
+
+static void bq27541_set(void)
+{
+	struct bq27541_device_info *di;
+        int i = 0;
+	u8 buf[2];
+
+	di = bq27541_di;
+        printk("enter 0x41\n");
+	buf[0] = 0x41;
+	buf[1] = 0x00;
+	bq27541_write(di->client,0x00,buf,2);
+	
+        msleep(1500);
+		
+        printk("enter 0x21\n");
+	buf[0] = 0x21;
+	buf[1] = 0x00;
+	bq27541_write(di->client,0x00,buf,2);
+
+	buf[0] = 0;
+	buf[1] = 0;
+	bq27541_read(di->client,0x00,buf,2);
+
+      	// printk("%s: Enter:BUF[0]= 0X%x   BUF[1] = 0X%x\n",__FUNCTION__,buf[0],buf[1]);
+
+      	while((buf[0] & 0x04)&&(i<5))	
+       	{
+        	printk("enter more 0x21 times i = %d\n",i);
+              	mdelay(1000);
+       		buf[0] = 0x21;
+		buf[1] = 0x00;
+		bq27541_write(di->client,0x00,buf,2);
+
+		buf[0] = 0;
+		buf[1] = 0;
+		bq27541_read(di->client,0x00,buf,2);
+		i++;
+       	}
+
+      	if(i>5)
+	   	printk("write 0x21 error\n");
+	else
+		printk("bq27541 write 0x21 success\n");
+}
+
+static int bq27541_battery_probe(struct i2c_client *client,
+				 const struct i2c_device_id *id)
+{
+	struct bq27541_device_info *di;
+	int retval = 0;
+	struct bq27541_platform_data *pdata;
+
+	DBG("**********  bq27541_battery_probe**************  ");
+	pdata = client->dev.platform_data;
+	
+	di = kzalloc(sizeof(*di), GFP_KERNEL);
+	if (!di) {
+		dev_err(&client->dev, "failed to allocate device info data\n");
+		retval = -ENOMEM;
+		goto batt_failed_2;
+	}
+	i2c_set_clientdata(client, di);
+	di->dev = &client->dev;
+	di->bat.name = "bq27541-battery";
+	di->client = client;
+	/* 4 seconds between monotor runs interval */
+	di->interval = msecs_to_jiffies(4 * 1000);
+	
+	di->bat_num = pdata->bat_num;
+	di->dc_check_pin = pdata->dc_check_pin;
+	
+	if (pdata->init_dc_check_pin)
+		pdata->init_dc_check_pin( );
+	
+	bq27541_powersupply_init(di);
+	
+	retval = power_supply_register(&client->dev, &di->bat);
+	if (retval) {
+		dev_err(&client->dev, "failed to register battery\n");
+		goto batt_failed_4;
+	}
+	bq27541_di = di;
+	retval = power_supply_register(&client->dev, &di->ac);
+	if (retval) {
+		dev_err(&client->dev, "failed to register ac\n");
+		goto batt_failed_4;
+	}
+	INIT_DELAYED_WORK(&di->work, bq27541_battery_work);
+	schedule_delayed_work(&di->work, di->interval);
+	dev_info(&client->dev, "support ver. %s enabled\n", DRIVER_VERSION);
+	return 0;
+
+batt_failed_4:
+	kfree(di);
+batt_failed_2:
+	return retval;
+}
+
+static int bq27541_battery_remove(struct i2c_client *client)
+{
+	struct bq27541_device_info *di = i2c_get_clientdata(client);
+
+	power_supply_unregister(&di->bat);
+	kfree(di->bat.name);
+	kfree(di);
+	return 0;
+}
+
+static const struct i2c_device_id bq27541_id[] = {
+	{ "bq27541", 0 },
+};
+
+static struct i2c_driver bq27541_battery_driver = {
+	.driver = {
+		.name = "bq27541",
+	},
+	.probe = bq27541_battery_probe,
+	.remove = bq27541_battery_remove,
+	.id_table = bq27541_id,
+};
+
+static int __init bq27541_battery_init(void)
+{
+	int ret;
+	struct proc_dir_entry * battery_proc_entry;
+	
+	ret = i2c_add_driver(&bq27541_battery_driver);
+	if (ret)
+		printk(KERN_ERR "Unable to register BQ27541 driver\n");
+	
+	battery_proc_entry = proc_create("driver/power",0777,NULL,&battery_proc_fops);
+	return ret;
+}
+module_init(bq27541_battery_init);
+
+static void __exit bq27541_battery_exit(void)
+{
+	i2c_del_driver(&bq27541_battery_driver);
+}
+module_exit(bq27541_battery_exit);
+
+MODULE_AUTHOR("clb");
+MODULE_DESCRIPTION("BQ27541 battery monitor driver");
+MODULE_LICENSE("GPL");
-- 
2.35.3

