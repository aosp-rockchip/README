From 0c3d5875c307d46394d3f0ea7f7b154828a31f8f Mon Sep 17 00:00:00 2001
From: Wenping Zhang <wenping.zhang@rock-chips.com>
Date: Wed, 3 May 2017 18:04:46 +0800
Subject: [PATCH] leds: leds-is31fl32xx: enable multi-control mode and solve
 register failed issue during reboot.

Change-Id: I299ae4c97adde806c10ce74d2b843a82a4956682
Signed-off-by: Wenping Zhang <wenping.zhang@rock-chips.com>
---
 drivers/leds/leds-is31fl32xx.c | 42 +++++++++++++++++++++++++++++-----
 1 file changed, 36 insertions(+), 6 deletions(-)

diff --git a/drivers/leds/leds-is31fl32xx.c b/drivers/leds/leds-is31fl32xx.c
index 1ec9720ac0d7..3a07312a79a3 100644
--- a/drivers/leds/leds-is31fl32xx.c
+++ b/drivers/leds/leds-is31fl32xx.c
@@ -23,6 +23,9 @@
 #include <linux/delay.h>
 #include <linux/of_gpio.h>
 #include <linux/gpio.h>
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+#include "leds-multi.h"
+#endif
 
 /* Used to indicate a device has no such register */
 #define IS31FL32XX_REG_NONE 0xFF
@@ -151,14 +154,17 @@ static const struct is31fl32xx_chipdef is31fl3216_cdef = {
 static int is31fl32xx_write(struct is31fl32xx_priv *priv, u8 reg, u8 val)
 {
 	int ret;
+	int retries = 3;
 
 	dev_dbg(&priv->client->dev, "writing register 0x%02X=0x%02X", reg, val);
 
 	ret =  i2c_smbus_write_byte_data(priv->client, reg, val);
-	if (ret) {
+	while (ret && (retries-- > 0)) {
 		dev_err(&priv->client->dev,
 			"register write to 0x%02X failed (error %d),val=%d",
 			reg, ret, val);
+		msleep(100);
+		ret = i2c_smbus_write_byte_data(priv->client, reg, val);
 	}
 	return ret;
 }
@@ -270,6 +276,11 @@ static void is31fl32xx_brightness_set(struct led_classdev *led_cdev,
 	schedule_work(&led_data->brightness_work);
 }
 
+#if 0
+ /*
+  * we use function is31fl32xx_software_shutdown to reset the registers
+  * of is31fl32xx.
+  */
 static int is31fl32xx_reset_regs(struct is31fl32xx_priv *priv)
 {
 	const struct is31fl32xx_chipdef *cdef = priv->cdef;
@@ -286,6 +297,7 @@ static int is31fl32xx_reset_regs(struct is31fl32xx_priv *priv)
 
 	return 0;
 }
+#endif
 
 static int is31fl32xx_software_shutdown(struct is31fl32xx_priv *priv,
 					bool enable)
@@ -312,9 +324,9 @@ static int is31fl32xx_init_regs(struct is31fl32xx_priv *priv)
 	const struct is31fl32xx_chipdef *cdef = priv->cdef;
 	int ret;
 
-	ret = is31fl32xx_reset_regs(priv);
+	ret = is31fl32xx_software_shutdown(priv, true);
 	if (ret)
-		pr_err("%s, write to reset register failed\n", __func__);
+		pr_err("%s, write to shutdown register failed\n", __func__);
 
 	/*
 	 * Set enable bit for all channels.
@@ -468,6 +480,9 @@ static int is31fl32xx_parse_dt(struct device *dev,
 				goto err;
 			}
 		}
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+		led_multi_control_register(&led_data->cdev);
+#endif
 		priv->num_leds++;
 	}
 
@@ -538,6 +553,10 @@ static int is31fl32xx_probe(struct i2c_client *client,
 	if (ret)
 		return ret;
 
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+	led_multi_control_init(dev);
+#endif
+
 	ret = is31fl32xx_parse_dt(dev, priv);
 	if (ret)
 		return ret;
@@ -550,14 +569,19 @@ static int is31fl32xx_remove(struct i2c_client *client)
 	int i;
 	struct is31fl32xx_priv *priv = i2c_get_clientdata(client);
 
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+	led_multi_control_exit(&client->dev);
+#endif
 	for (i = 0; i < priv->num_leds; i++) {
 		struct is31fl32xx_led_data *led_data =
 					&priv->leds[i];
 		cancel_delayed_work_sync(&led_data->register_work);
 		cancel_work_sync(&led_data->brightness_work);
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+		led_multi_control_unregister(&led_data->cdev);
+#endif
 	}
-
-	return is31fl32xx_reset_regs(priv);
+	return is31fl32xx_software_shutdown(priv, true);
 }
 
 static void is31fl32xx_shutdown(struct i2c_client *client)
@@ -565,14 +589,20 @@ static void is31fl32xx_shutdown(struct i2c_client *client)
 	int i;
 	struct is31fl32xx_priv *priv = i2c_get_clientdata(client);
 
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+	led_multi_control_exit(&client->dev);
+#endif
 	for (i = 0; i < priv->num_leds; i++) {
 		struct is31fl32xx_led_data *led_data =
 					&priv->leds[i];
 		cancel_delayed_work_sync(&led_data->register_work);
 		cancel_work_sync(&led_data->brightness_work);
+#ifdef CONFIG_LEDS_TRIGGER_MULTI_CTRL
+		led_multi_control_unregister(&led_data->cdev);
+#endif
 	}
 
-	is31fl32xx_reset_regs(priv);
+	is31fl32xx_software_shutdown(priv, true);
 	gpiod_set_value(priv->reset_gpio, 0);
 }
 
-- 
2.35.3

