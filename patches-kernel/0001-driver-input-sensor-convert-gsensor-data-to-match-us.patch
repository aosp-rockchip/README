From 4b5687dec082f2d2f2bd8e257b4726e690574f9c Mon Sep 17 00:00:00 2001
From: Zorro Liu <lyx@rock-chips.com>
Date: Fri, 1 Dec 2017 15:39:20 +0800
Subject: [PATCH] driver: input: sensor: convert gsensor data to match user
 level

Change-Id: I6c32eab3aad9da36609b7fb0fd24473e0e9ae22d
Signed-off-by: Zorro Liu <lyx@rock-chips.com>
---
 drivers/input/sensors/accel/bma2xx.c     | 15 +++--
 drivers/input/sensors/accel/dmard10.c    | 85 ++++++++---------------
 drivers/input/sensors/accel/kxtik.c      | 60 +++++++----------
 drivers/input/sensors/accel/kxtj9.c      | 60 +++++++----------
 drivers/input/sensors/accel/lsm303d.c    | 62 +++++++----------
 drivers/input/sensors/accel/lsm330_acc.c | 43 +++++-------
 drivers/input/sensors/accel/mma7660.c    | 86 ++++++++----------------
 drivers/input/sensors/accel/mma8452.c    | 78 ++++++++-------------
 drivers/input/sensors/accel/mxc622x.c    | 74 +++++++-------------
 9 files changed, 212 insertions(+), 351 deletions(-)
 mode change 100755 => 100644 drivers/input/sensors/accel/dmard10.c
 mode change 100755 => 100644 drivers/input/sensors/accel/kxtik.c
 mode change 100755 => 100644 drivers/input/sensors/accel/kxtj9.c
 mode change 100755 => 100644 drivers/input/sensors/accel/lsm303d.c
 mode change 100755 => 100644 drivers/input/sensors/accel/mma7660.c
 mode change 100755 => 100644 drivers/input/sensors/accel/mma8452.c

diff --git a/drivers/input/sensors/accel/bma2xx.c b/drivers/input/sensors/accel/bma2xx.c
index d27e1a7e3757..d3226b390269 100644
--- a/drivers/input/sensors/accel/bma2xx.c
+++ b/drivers/input/sensors/accel/bma2xx.c
@@ -1064,7 +1064,7 @@
 
 #define BAM2X2_ENABLE	0X80
 
-#define BMA2XX_RANGE	2000000
+#define BMA2XX_RANGE	32768
 
 #define X_AXIS_COMPEN	0/*X_AXIS  not compensation */
 /*Y_AXIS offset is caused by screws, there needs to be compensation 3.5*/
@@ -1851,12 +1851,13 @@ static int gsensor_report_value
 	struct sensor_private_data *sensor =
 		(struct sensor_private_data *)i2c_get_clientdata(client);
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n", axis->x, axis->y, axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
diff --git a/drivers/input/sensors/accel/dmard10.c b/drivers/input/sensors/accel/dmard10.c
old mode 100755
new mode 100644
index db1545aa462c..6aeee09655de
--- a/drivers/input/sensors/accel/dmard10.c
+++ b/drivers/input/sensors/accel/dmard10.c
@@ -327,19 +327,11 @@ static int sensor_init(struct i2c_client *client)
 
 static int sensor_convert_data(struct i2c_client *client, char high_byte, char low_byte)
 {
-    s64 result;
+	s64 result;
 
+	result = ((int)high_byte << 8) | ((int)low_byte);
 
-		result = ((int)high_byte << 8)|((int)low_byte);
-
-		if (result < DMARD10_BOUNDARY){
-			result = result* DMARD10_GRAVITY_STEP;
-		}else{
-			result = ~( ((~result & (0x7fff>>(16-DMARD10_PRECISION)) ) + 1)* DMARD10_GRAVITY_STEP) + 1;
-		}
-
-		return result;
-
+	return result * 128;
 }
 
 static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *axis)
@@ -347,15 +339,16 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 	    (struct sensor_private_data *) i2c_get_clientdata(client);
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
-
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 	return 0;
 }
+
 #define DMARD10_COUNT_AVERAGE 2
 #define GSENSOR_MIN  		2
 static int sensor_report_value(struct i2c_client *client)
@@ -393,33 +386,11 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z;
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
+	gsensor_report_value(client, &axis);
 
-	axis_average.x_average += axis.x;
-	axis_average.y_average += axis.y;
-	axis_average.z_average += axis.z;
-	axis_average.count++;
-
-	if(axis_average.count >= DMARD10_COUNT_AVERAGE)
-	{
-		axis.x = axis_average.x_average / axis_average.count;
-		axis.y = axis_average.y_average / axis_average.count;
-		axis.z = axis_average.z_average / axis_average.count;
-
-		DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-
-		memset(&axis_average, 0, sizeof(struct sensor_axis_average));
-
-		//Report event only while value is changed to save some power
-		if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-		{
-			gsensor_report_value(client, &axis);
-
-			/* 互斥地缓存数据. */
-			mutex_lock(&(sensor->data_mutex) );
-			sensor->axis = axis;
-			mutex_unlock(&(sensor->data_mutex) );
-		}
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -433,19 +404,19 @@ static int sensor_report_value(struct i2c_client *client)
 
 
 struct sensor_operate gsensor_dmard10_ops = {
-	.name				= "gs_dmard10",
-	.type				= SENSOR_TYPE_ACCEL,			//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_DMARD10,			//i2c id number
-	.read_reg			= DMARD10_REG_X_OUT,			//read data
-	.read_len			= 8,					//data length
-	.id_reg				= SENSOR_UNKNOW_DATA,			//read device id from this register
-	.id_data 			= SENSOR_UNKNOW_DATA,			//device id
-	.precision			= DMARD10_PRECISION,			//12 bit
-	.ctrl_reg 			= DMARD10_REG_MODE,			//enable or disable
-	.int_status_reg 	= SENSOR_UNKNOW_DATA,			//intterupt status register
-	.range				= {-DMARD10_RANGE,DMARD10_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW|IRQF_ONESHOT,
-	.active				= sensor_active,
+	.name			= "gs_dmard10",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_DMARD10,
+	.read_reg			= DMARD10_REG_X_OUT,
+	.read_len			= 8,
+	.id_reg			= SENSOR_UNKNOW_DATA,
+	.id_data			= SENSOR_UNKNOW_DATA,
+	.precision			= DMARD10_PRECISION,
+	.ctrl_reg			= DMARD10_REG_MODE,
+	.int_status_reg	= SENSOR_UNKNOW_DATA,
+	.range			= {-65536, 65536},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
 	.report 			= sensor_report_value,
 };
diff --git a/drivers/input/sensors/accel/kxtik.c b/drivers/input/sensors/accel/kxtik.c
old mode 100755
new mode 100644
index dd76267d7127..48276467df89
--- a/drivers/input/sensors/accel/kxtik.c
+++ b/drivers/input/sensors/accel/kxtik.c
@@ -225,11 +225,7 @@ static int sensor_convert_data(struct i2c_client *client, char high_byte, char l
 		case KXTIK_DEVID_J9_1005:
 		case KXTIK_DEVID_J2_1009:
 			result = (((int)high_byte << 8) | ((int)low_byte ))>>4;
-			if (result < KXTIK_BOUNDARY)
-       			result = result* KXTIK_GRAVITY_STEP;
-    		else
-       			result = ~( ((~result & (0x7fff>>(16-KXTIK_PRECISION)) ) + 1) 
-			   			* KXTIK_GRAVITY_STEP) + 1;
+			result *= 16;
 			break;
 
 		default:
@@ -244,12 +240,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 		(struct sensor_private_data *) i2c_get_clientdata(client);	
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -291,18 +288,11 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z;	
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
-	DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-
-	//Report event  only while value is changed to save some power
-	if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-	{
-		gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
 
-		/* 互斥地缓存数据. */
-		mutex_lock(&(sensor->data_mutex) );
-		sensor->axis = axis;
-		mutex_unlock(&(sensor->data_mutex) );
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -315,21 +305,21 @@ static int sensor_report_value(struct i2c_client *client)
 }
 
 struct sensor_operate gsensor_kxtik_ops = {
-	.name				= "kxtik",
-	.type				= SENSOR_TYPE_ACCEL,		//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_KXTIK,		//i2c id number
-	.read_reg			= KXTIK_XOUT_L,			//read data
-	.read_len			= 6,				//data length
-	.id_reg				= SENSOR_UNKNOW_DATA,		//read device id from this register
+	.name			= "kxtik",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_KXTIK,
+	.read_reg			= KXTIK_XOUT_L,
+	.read_len			= 6,
+	.id_reg			= SENSOR_UNKNOW_DATA,
 	.id_data			= SENSOR_UNKNOW_DATA,
-	.precision			= KXTIK_PRECISION,		//12 bits
-	.ctrl_reg 			= KXTIK_CTRL_REG1,		//enable or disable 
-	.int_status_reg 		= KXTIK_INT_REL,		//intterupt status register
-	.range				= {-KXTIK_RANGE,KXTIK_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW|IRQF_ONESHOT,		
-	.active				= sensor_active,	
+	.precision			= KXTIK_PRECISION,
+	.ctrl_reg			= KXTIK_CTRL_REG1,
+	.int_status_reg	= KXTIK_INT_REL,
+	.range			= {-32768, 32768},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
-	.report				= sensor_report_value,
+	.report			= sensor_report_value,
 };
 
 /****************operate according to sensor chip:end************/
diff --git a/drivers/input/sensors/accel/kxtj9.c b/drivers/input/sensors/accel/kxtj9.c
old mode 100755
new mode 100644
index 5831288ccde8..acd10abf4438
--- a/drivers/input/sensors/accel/kxtj9.c
+++ b/drivers/input/sensors/accel/kxtj9.c
@@ -195,11 +195,7 @@ static int sensor_convert_data(struct i2c_client *client, char high_byte, char l
 	switch (sensor->devid) {	
 		case KXTJ9_DEVID:		
 			result = (((int)high_byte << 8) | ((int)low_byte ))>>4;
-			if (result < KXTJ9_BOUNDARY)
-       			result = result* KXTJ9_GRAVITY_STEP;
-    		else
-       			result = ~( ((~result & (0x7fff>>(16-KXTJ9_PRECISION)) ) + 1) 
-			   			* KXTJ9_GRAVITY_STEP) + 1;
+			result *= 16;
 			break;
 
 		default:
@@ -215,12 +211,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 		(struct sensor_private_data *) i2c_get_clientdata(client);	
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -264,16 +261,11 @@ static int sensor_report_value(struct i2c_client *client)
 
 	DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
 
-	//Report event  only while value is changed to save some power
-	if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-	{
-		gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
 
-		/* 互斥地缓存数据. */
-		mutex_lock(&(sensor->data_mutex) );
-		sensor->axis = axis;
-		mutex_unlock(&(sensor->data_mutex) );
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -286,21 +278,21 @@ static int sensor_report_value(struct i2c_client *client)
 }
 
 struct sensor_operate gsensor_kxtj9_ops = {
-	.name				= "kxtj9",
-	.type				= SENSOR_TYPE_ACCEL,		//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_KXTJ9,		//i2c id number
-	.read_reg			= KXTJ9_XOUT_L,			//read data
-	.read_len			= 6,				//data length
-	.id_reg				= KXTJ9_WHO_AM_I,		//read device id from this register
-	.id_data 			= KXTJ9_DEVID,			//device id
-	.precision			= KXTJ9_PRECISION,		//12 bits
-	.ctrl_reg 			= KXTJ9_CTRL_REG1,		//enable or disable 
-	.int_status_reg 		= KXTJ9_INT_REL,		//intterupt status register
-	.range				= {-KXTJ9_RANGE,KXTJ9_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW|IRQF_ONESHOT,		
-	.active				= sensor_active,	
+	.name			= "kxtj9",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_KXTJ9,
+	.read_reg			= KXTJ9_XOUT_L,
+	.read_len			= 6,
+	.id_reg			= KXTJ9_WHO_AM_I,
+	.id_data			= KXTJ9_DEVID,
+	.precision			= KXTJ9_PRECISION,
+	.ctrl_reg			= KXTJ9_CTRL_REG1,
+	.int_status_reg	= KXTJ9_INT_REL,
+	.range			= {-32768, 32768},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
-	.report				= sensor_report_value,
+	.report			= sensor_report_value,
 };
 
 /****************operate according to sensor chip:end************/
diff --git a/drivers/input/sensors/accel/lsm303d.c b/drivers/input/sensors/accel/lsm303d.c
old mode 100755
new mode 100644
index defb31d97bf7..7a3d5573fe71
--- a/drivers/input/sensors/accel/lsm303d.c
+++ b/drivers/input/sensors/accel/lsm303d.c
@@ -214,11 +214,6 @@ static int sensor_convert_data(struct i2c_client *client, char high_byte, char l
 	switch (sensor->devid) {
 		case LSM303D_DEVID:
 			result = ((int)high_byte << 8) | (int)low_byte;
-			if (result < LSM303D_BOUNDARY)
-       			result = result* LSM303D_GRAVITY_STEP;
-    		else
-       			result = ~( ((~result & (0x7fff>>(16-LSM303D_PRECISION)) ) + 1)
-			   			* LSM303D_GRAVITY_STEP) + 1;
 			break;
 
 		default:
@@ -234,12 +229,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 		(struct sensor_private_data *) i2c_get_clientdata(client);
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -289,19 +285,11 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z;
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
-	DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-	//printk( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-
-	//Report event  only while value is changed to save some power
-	if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-	{
-		gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
 
-		/* 互斥地缓存数据. */
-		mutex_lock(&(sensor->data_mutex) );
-		sensor->axis = axis;
-		mutex_unlock(&(sensor->data_mutex) );
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -314,21 +302,21 @@ static int sensor_report_value(struct i2c_client *client)
 }
 
 struct sensor_operate gsensor_lsm303d_ops = {
-	.name				= "lsm303d",
-	.type				= SENSOR_TYPE_ACCEL,		//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_LSM303D,		//i2c id number
-	.read_reg			= (LSM303D_OUT_X_L | 0x80),	//read data
-	.read_len			= 6,				//data length
-	.id_reg				= LSM303D_WHO_AM_I,		//read device id from this register
-	.id_data 			= LSM303D_DEVID,			//device id
-	.precision			= LSM303D_PRECISION,		//16 bits
-	.ctrl_reg 			= LSM303D_CTRL_REG1,		//enable or disable
-	.int_status_reg 		= LSM303D_IG_SRC1,		//intterupt status register
-	.range				= {-LSM303D_RANGE,LSM303D_RANGE},	//range
-	.trig				= (IRQF_TRIGGER_LOW|IRQF_ONESHOT),
-	.active				= sensor_active,
+	.name			= "lsm303d",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_LSM303D,
+	.read_reg			= (LSM303D_OUT_X_L | 0x80),
+	.read_len			= 6,
+	.id_reg			= LSM303D_WHO_AM_I,
+	.id_data			= LSM303D_DEVID,
+	.precision			= LSM303D_PRECISION,
+	.ctrl_reg			= LSM303D_CTRL_REG1,
+	.int_status_reg	= LSM303D_IG_SRC1,
+	.range			= {-32768, 32768},
+	.trig				= (IRQF_TRIGGER_LOW | IRQF_ONESHOT),
+	.active			= sensor_active,
 	.init				= sensor_init,
-	.report				= sensor_report_value,
+	.report			= sensor_report_value,
 };
 
 
diff --git a/drivers/input/sensors/accel/lsm330_acc.c b/drivers/input/sensors/accel/lsm330_acc.c
index 35dba51892f6..5457aa6880fd 100644
--- a/drivers/input/sensors/accel/lsm330_acc.c
+++ b/drivers/input/sensors/accel/lsm330_acc.c
@@ -158,11 +158,12 @@ static int gsensor_report_value(struct i2c_client *client,
 	struct sensor_private_data *sensor =
 		(struct sensor_private_data *)i2c_get_clientdata(client);
 
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n", axis->x, axis->y, axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -210,18 +211,10 @@ static int sensor_report_value(struct i2c_client *client)
 		(pdata->orientation[7]) * y +
 		(pdata->orientation[8]) * z;
 
-	axis.x = 61 * axis.x;
-	axis.y = 61 * axis.y;
-	axis.z = 61 * axis.z;
-
-	if ((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) ||
-	    (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) ||
-	    (abs(sensor->axis.z - axis.z) > GSENSOR_MIN)) {
-		gsensor_report_value(client, &axis);
-		mutex_lock(&sensor->data_mutex);
-		sensor->axis = axis;
-		mutex_unlock(&sensor->data_mutex);
-	}
+	gsensor_report_value(client, &axis);
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if (sensor->pdata->irq_enable) {
 		value = sensor_read_reg(client, sensor->ops->int_status_reg);
@@ -235,17 +228,17 @@ struct sensor_operate gsensor_lsm330_ops = {
 	.name			= "lsm330_acc",
 	.type			= SENSOR_TYPE_ACCEL,
 	.id_i2c			= ACCEL_ID_LSM330,
-	.read_reg		= OUT_X_L_A,
-	.read_len		= 6,
+	.read_reg			= OUT_X_L_A,
+	.read_len			= 6,
 	.id_reg			= WHO_AM_I_A,
-	.id_data		= LSM330_DEVICE_ID_A,
-	.precision		= 16,
-	.ctrl_reg		= CTRL_REG5_A,
+	.id_data			= LSM330_DEVICE_ID_A,
+	.precision			= 16,
+	.ctrl_reg			= CTRL_REG5_A,
 	.int_status_reg	= STATUS_REG_A,
-	.range			= {-0xffff, 0xffff},
-	.trig			= IRQF_TRIGGER_HIGH | IRQF_ONESHOT,
+	.range			= {-32768, 32768},
+	.trig				= IRQF_TRIGGER_HIGH | IRQF_ONESHOT,
 	.active			= sensor_active,
-	.init			= sensor_init,
+	.init				= sensor_init,
 	.report			= sensor_report_value,
 };
 
diff --git a/drivers/input/sensors/accel/mma7660.c b/drivers/input/sensors/accel/mma7660.c
old mode 100755
new mode 100644
index 7955ee400b1e..59f3060bb402
--- a/drivers/input/sensors/accel/mma7660.c
+++ b/drivers/input/sensors/accel/mma7660.c
@@ -148,17 +148,10 @@ static int sensor_init(struct i2c_client *client)
 
 static int sensor_convert_data(struct i2c_client *client, char high_byte, char low_byte)
 {
-    s64 result;
-	//struct sensor_private_data *sensor =
-	//    (struct sensor_private_data *) i2c_get_clientdata(client);	
-	//int precision = sensor->ops->precision;
-		
+	s64 result;
+
 	result = (int)low_byte;
-	if (result < MMA7660_BOUNDARY)
-		result = result* MMA7660_GRAVITY_STEP;
-	else
-		result = ~( ((~result & (0x7fff>>(16-MMA7660_PRECISION)) ) + 1) 
-	   			* MMA7660_GRAVITY_STEP) + 1;    
+	result *= 768;
 
     	return (int)result;
 }
@@ -168,12 +161,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 	    (struct sensor_private_data *) i2c_get_clientdata(client);	
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -216,34 +210,12 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z; 
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
-	
-	axis_average.x_average += axis.x;
-	axis_average.y_average += axis.y;
-	axis_average.z_average += axis.z;
-	axis_average.count++;
-	
-	if(axis_average.count >= MMA7660_COUNT_AVERAGE)
-	{
-		axis.x = axis_average.x_average / axis_average.count;	
-		axis.y = axis_average.y_average / axis_average.count;	
-		axis.z = axis_average.z_average / axis_average.count;
-		
-		DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-		
-		memset(&axis_average, 0, sizeof(struct sensor_axis_average));
-		
-		//Report event only while value is changed to save some power
-		if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-		{
-			gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
+
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
-			/* 互斥地缓存数据. */
-			mutex_lock(&(sensor->data_mutex) );
-			sensor->axis = axis;
-			mutex_unlock(&(sensor->data_mutex) );
-		}
-	}
-	
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
 		
@@ -256,21 +228,21 @@ static int sensor_report_value(struct i2c_client *client)
 
 
 struct sensor_operate gsensor_mma7660_ops = {
-	.name				= "mma7660",
-	.type				= SENSOR_TYPE_ACCEL,			//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_MMA7660,			//i2c id number
-	.read_reg			= MMA7660_REG_X_OUT,			//read data
-	.read_len			= 3,					//data length
-	.id_reg				= SENSOR_UNKNOW_DATA,			//read device id from this register
-	.id_data 			= SENSOR_UNKNOW_DATA,			//device id
-	.precision			= MMA7660_PRECISION,			//12 bit
-	.ctrl_reg 			= MMA7660_REG_MODE,			//enable or disable 	
-	.int_status_reg 		= SENSOR_UNKNOW_DATA,			//intterupt status register
-	.range				= {-MMA7660_RANGE,MMA7660_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW|IRQF_ONESHOT,		
-	.active				= sensor_active,	
+	.name			= "mma7660",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_MMA7660,
+	.read_reg			= MMA7660_REG_X_OUT,
+	.read_len			= 3,
+	.id_reg			= SENSOR_UNKNOW_DATA,
+	.id_data			= SENSOR_UNKNOW_DATA,
+	.precision			= MMA7660_PRECISION,
+	.ctrl_reg			= MMA7660_REG_MODE,
+	.int_status_reg	= SENSOR_UNKNOW_DATA,
+	.range				= {-24576, 24576},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
-	.report 			= sensor_report_value,
+	.report			= sensor_report_value,
 };
 
 /****************operate according to sensor chip:end************/
diff --git a/drivers/input/sensors/accel/mma8452.c b/drivers/input/sensors/accel/mma8452.c
old mode 100755
new mode 100644
index 5a828e723bcc..81e251738ea8
--- a/drivers/input/sensors/accel/mma8452.c
+++ b/drivers/input/sensors/accel/mma8452.c
@@ -250,44 +250,28 @@ static int sensor_convert_data(struct i2c_client *client, char high_byte, char l
 			swap(high_byte,low_byte);
 			result = ((int)high_byte << (MMA8451_PRECISION-8)) 
 					| ((int)low_byte >> (16-MMA8451_PRECISION));
-			if (result < MMA8451_BOUNDARY)
-				result = result* MMA8451_GRAVITY_STEP;
-			else
-				result = ~( ((~result & (0x7fff>>(16-MMA8451_PRECISION)) ) + 1) 
-						* MMA8451_GRAVITY_STEP) + 1;
+			result *= 4;
 			break;
 
 		case MMA8452_DEVID:			
 			swap(high_byte,low_byte);
 			result = ((int)high_byte << (MMA8452_PRECISION-8)) 
 					| ((int)low_byte >> (16-MMA8452_PRECISION));
-			if (result < MMA8452_BOUNDARY)
-				result = result* MMA8452_GRAVITY_STEP;
-			else
-				result = ~( ((~result & (0x7fff>>(16-MMA8452_PRECISION)) ) + 1) 
-						* MMA8452_GRAVITY_STEP) + 1;
+			result *= 16;
 			break;
 			
 		case MMA8453_DEVID:
 			swap(high_byte,low_byte);
 			result = ((int)high_byte << (MMA8453_PRECISION-8)) 
 					| ((int)low_byte >> (16-MMA8453_PRECISION));
-			if (result < MMA8453_BOUNDARY)
-				result = result* MMA8453_GRAVITY_STEP;
-			else
-				result = ~( ((~result & (0x7fff>>(16-MMA8453_PRECISION)) ) + 1) 
-						* MMA8453_GRAVITY_STEP) + 1;
+			result *= 64;
 			break;
 
 		case MMA8653_DEVID:
 			swap(high_byte,low_byte);
 			result = ((int)high_byte << (MMA8653_PRECISION-8)) 
 					| ((int)low_byte >> (16-MMA8653_PRECISION));
-			if (result < MMA8653_BOUNDARY)
-				result = result* MMA8653_GRAVITY_STEP;
-			else
-				result = ~( ((~result & (0x7fff>>(16-MMA8653_PRECISION)) ) + 1) 
-						* MMA8653_GRAVITY_STEP) + 1;
+			result *= 64;
 			break;
 
 		default:
@@ -303,12 +287,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 	    (struct sensor_private_data *) i2c_get_clientdata(client);	
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -351,18 +336,11 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z; 
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
-	DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-
-	//Report event only while value is changed to save some power
-	if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-	{
-		gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
 
-		/* 互斥地缓存数据. */
-		mutex_lock(&(sensor->data_mutex) );
-		sensor->axis = axis;
-		mutex_unlock(&(sensor->data_mutex) );
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -376,19 +354,19 @@ static int sensor_report_value(struct i2c_client *client)
 
 
 struct sensor_operate gsensor_mma8452_ops = {
-	.name				= "mma8452",
-	.type				= SENSOR_TYPE_ACCEL,			//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_MMA845X,				//i2c id number
-	.read_reg			= MMA8452_REG_X_OUT_MSB,		//read data
-	.read_len			= 6,							//data length
-	.id_reg				= SENSOR_UNKNOW_DATA,			//read device id from this register
-	.id_data 			= SENSOR_UNKNOW_DATA,			//device id
-	.precision			= MMA8452_PRECISION,			//12 bit
-	.ctrl_reg 			= MMA8452_REG_CTRL_REG1,		//enable or disable 	
-	.int_status_reg 		= MMA8452_REG_INTSRC,			//intterupt status register
-	.range				= {-MMA845X_RANGE,MMA845X_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW|IRQF_ONESHOT,		
-	.active				= sensor_active,	
+	.name			= "mma8452",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_MMA845X,
+	.read_reg			= MMA8452_REG_X_OUT_MSB,
+	.read_len			= 6,
+	.id_reg			= SENSOR_UNKNOW_DATA,
+	.id_data			= SENSOR_UNKNOW_DATA,
+	.precision			= MMA8452_PRECISION,
+	.ctrl_reg			= MMA8452_REG_CTRL_REG1,
+	.int_status_reg	= MMA8452_REG_INTSRC,
+	.range			= {-32768, 32768},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
 	.report 			= sensor_report_value,
 };
diff --git a/drivers/input/sensors/accel/mxc622x.c b/drivers/input/sensors/accel/mxc622x.c
index cf17610e7e4a..9b4e1b120dd0 100644
--- a/drivers/input/sensors/accel/mxc622x.c
+++ b/drivers/input/sensors/accel/mxc622x.c
@@ -153,10 +153,7 @@ static int sensor_convert_data(struct i2c_client *client, char high_byte, char l
 	//int precision = sensor->ops->precision;
 		
 	result = (int)low_byte;
-	if (result < MXC6225_BOUNDARY)
-		result = result* MXC6225_GRAVITY_STEP;
-	else
-		result = ~(((~result & 0x7f) + 1) * MXC6225_GRAVITY_STEP) + 1;    
+	result *= 256;
 
     	return (int)result;
 }
@@ -166,12 +163,13 @@ static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *a
 	struct sensor_private_data *sensor =
 	    (struct sensor_private_data *) i2c_get_clientdata(client);	
 
-	/* Report acceleration sensor information */
-	input_report_abs(sensor->input_dev, ABS_X, axis->x);
-	input_report_abs(sensor->input_dev, ABS_Y, axis->y);
-	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
-	input_sync(sensor->input_dev);
-	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+	if (sensor->status_cur == SENSOR_ON) {
+		/* Report acceleration sensor information */
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+		input_sync(sensor->input_dev);
+	}
 
 	return 0;
 }
@@ -214,33 +212,11 @@ static int sensor_report_value(struct i2c_client *client)
 	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z; 
 	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
 
-	
-	axis_average.x_average += axis.x;
-	axis_average.y_average += axis.y;
-	axis_average.z_average += axis.z;
-	axis_average.count++;
-	
-	if(axis_average.count >= MXC6225_COUNT_AVERAGE)
-	{
-		axis.x = axis_average.x_average / axis_average.count;	
-		axis.y = axis_average.y_average / axis_average.count;	
-		axis.z = axis_average.z_average / axis_average.count;
-		
-		DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
-		
-		memset(&axis_average, 0, sizeof(struct sensor_axis_average));
-		
-		//Report event only while value is changed to save some power
-		if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
-		{
-			gsensor_report_value(client, &axis);
+	gsensor_report_value(client, &axis);
 
-			/* 互斥地缓存数据. */
-			mutex_lock(&(sensor->data_mutex) );
-			sensor->axis = axis;
-			mutex_unlock(&(sensor->data_mutex) );
-		}
-	}
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
 	
 	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
 	{
@@ -254,19 +230,19 @@ static int sensor_report_value(struct i2c_client *client)
 
 
 struct sensor_operate gsensor_mxc6225_ops = {
-	.name				= "mxc6225",
-	.type				= SENSOR_TYPE_ACCEL,			//sensor type and it should be correct
-	.id_i2c				= ACCEL_ID_MXC6225,			//i2c id number
-	.read_reg			= MXC6225_REG_DATA,			//read data
-	.read_len			= 3,					//data length
-	.id_reg				= SENSOR_UNKNOW_DATA,			//read device id from this register
-	.id_data 			= SENSOR_UNKNOW_DATA,			//device id
-	.precision			= MXC6225_PRECISION,			//12 bit
-	.ctrl_reg 			= MXC6225_REG_MODE,			//enable or disable 	
-	.int_status_reg 		= SENSOR_UNKNOW_DATA,			//intterupt status register
-	.range				= {-MXC6225_RANGE,MXC6225_RANGE},	//range
-	.trig				= IRQF_TRIGGER_LOW |IRQF_ONESHOT,		
-	.active				= sensor_active,	
+	.name			= "mxc6225",
+	.type			= SENSOR_TYPE_ACCEL,
+	.id_i2c			= ACCEL_ID_MXC6225,
+	.read_reg			= MXC6225_REG_DATA,
+	.read_len			= 3,
+	.id_reg			= SENSOR_UNKNOW_DATA,
+	.id_data			= SENSOR_UNKNOW_DATA,
+	.precision			= MXC6225_PRECISION,
+	.ctrl_reg			= MXC6225_REG_MODE,
+	.int_status_reg	= SENSOR_UNKNOW_DATA,
+	.range			= {-32768, 32768},
+	.trig				= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active			= sensor_active,
 	.init				= sensor_init,
 	.report 			= sensor_report_value,
 };
-- 
2.35.3

