From 2a21a01636fe68f5e848f2eb589a28f416faf6c6 Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Fri, 20 Oct 2017 09:36:45 +0800
Subject: [PATCH] drm/rockchip: dsi: add control of h2p bridge clock for rk3128

Change-Id: I16671a884d3d91b8f2e8cb0b11ba7ad0c0504df6
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 .../display/rockchip/dw_mipi_dsi_rockchip.txt       |  1 +
 drivers/gpu/drm/rockchip/dw-mipi-dsi.c              | 13 +++++++++++++
 2 files changed, 14 insertions(+)

diff --git a/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt b/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
index 7a4246897cef..7c4888222b3b 100644
--- a/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
+++ b/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
@@ -25,6 +25,7 @@ Optional properties
   phandle to the SNPS-PHY config clock, name should be "phy_cfg".
   phandle to the SNPS-PHY PLL reference clock, name should be "ref".
   phandle to the Non-SNPS PHY high speed clock, name should be "hs_clk".
+  phandle to the h2p bridge clock, name should be "h2p".
 - phys: phandle to Non-SNPS PHY node
 - phy-names: the string "mipi_dphy" when is found in a node, along with "phys"
   attribute, provides phandle to MIPI PHY node
diff --git a/drivers/gpu/drm/rockchip/dw-mipi-dsi.c b/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
index 5a2ab29b1f9e..3d652babd470 100644
--- a/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
+++ b/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
@@ -315,6 +315,7 @@ struct dw_mipi_dsi_plat_data {
 	unsigned int max_data_lanes;
 	u32 max_bit_rate_per_lane;
 	bool has_vop_sel;
+	bool need_h2p_clk;
 	enum drm_mode_status (*mode_valid)(struct drm_connector *connector,
 					   struct drm_display_mode *mode);
 };
@@ -342,6 +343,7 @@ struct dw_mipi_dsi {
 	struct reset_control *rst;
 	void __iomem *base;
 	struct clk *pclk;
+	struct clk *h2p_clk;
 
 	/* dual-channel */
 	struct dw_mipi_dsi *master;
@@ -1012,6 +1014,7 @@ static void rockchip_dsi_disable(struct dw_mipi_dsi *dsi)
 
 	pm_runtime_put(dsi->dev);
 	clk_disable_unprepare(dsi->pclk);
+	clk_disable_unprepare(dsi->h2p_clk);
 
 	if (dsi->slave)
 		rockchip_dsi_disable(dsi->slave);
@@ -1139,6 +1142,7 @@ static void rockchip_dsi_host_init(struct dw_mipi_dsi *dsi)
 
 static void rockchip_dsi_init(struct dw_mipi_dsi *dsi)
 {
+	clk_prepare_enable(dsi->h2p_clk);
 	rockchip_dsi_pre_init(dsi);
 	rockchip_dsi_host_init(dsi);
 	dw_mipi_dsi_phy_init(dsi);
@@ -1372,6 +1376,7 @@ static int dw_mipi_dsi_register(struct drm_device *drm,
 static struct dw_mipi_dsi_plat_data rk3128_mipi_dsi_drv_data = {
 	.max_data_lanes = 4,
 	.max_bit_rate_per_lane = 1000000000,
+	.need_h2p_clk = true,
 };
 
 static struct dw_mipi_dsi_plat_data rk3288_mipi_dsi_drv_data = {
@@ -1563,6 +1568,14 @@ static int dw_mipi_dsi_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	if (dsi->pdata->need_h2p_clk) {
+		dsi->h2p_clk = devm_clk_get(dev, "h2p");
+		if (IS_ERR(dsi->h2p_clk)) {
+			dev_err(dev, "failed to get h2p bridge clock\n");
+			return PTR_ERR(dsi->h2p_clk);
+		}
+	}
+
 	dsi->grf_regmap = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
 	if (IS_ERR(dsi->grf_regmap)) {
 		dev_err(dev, "Unable to get rockchip,grf\n");
-- 
2.35.3

