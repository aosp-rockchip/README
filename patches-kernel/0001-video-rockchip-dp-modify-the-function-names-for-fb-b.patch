From 0e83ad3b046eed6f260d65656fbafab3a38309e3 Mon Sep 17 00:00:00 2001
From: "wenping.zhang" <wenping.zhang@rock-chips.com>
Date: Tue, 3 Jan 2017 13:48:48 +0800
Subject: [PATCH] video: rockchip: dp: modify the function names for fb-based
 dp driver.

change the name of functions for fb-based dp driver in order to fix
the compile errors of drm-based dp driver.

Change-Id: I6544c82d81bf4d8e5a7b936c7959349765d55049
Signed-off-by: wenping.zhang <wenping.zhang@rock-chips.com>
---
 drivers/video/rockchip/dp/Makefile            |   2 +-
 .../dp/{cdn-dp-reg.c => cdn-dp-fb-reg.c}      | 178 +++++++++---------
 .../dp/{cdn-dp-reg.h => cdn-dp-fb-reg.h}      |  36 ++--
 drivers/video/rockchip/dp/rockchip_dp.c       |   4 +-
 drivers/video/rockchip/dp/rockchip_dp.h       |   4 +-
 drivers/video/rockchip/dp/rockchip_dp_core.c  |  54 +++---
 6 files changed, 139 insertions(+), 139 deletions(-)
 rename drivers/video/rockchip/dp/{cdn-dp-reg.c => cdn-dp-fb-reg.c} (76%)
 rename drivers/video/rockchip/dp/{cdn-dp-reg.h => cdn-dp-fb-reg.h} (93%)

diff --git a/drivers/video/rockchip/dp/Makefile b/drivers/video/rockchip/dp/Makefile
index 2810235b4ed3..a057b346af61 100644
--- a/drivers/video/rockchip/dp/Makefile
+++ b/drivers/video/rockchip/dp/Makefile
@@ -1 +1 @@
-obj-$(CONFIG_ROCKCHIP_DP) += rockchip_dp_core.o rockchip_dp.o cdn-dp-reg.o
+obj-$(CONFIG_ROCKCHIP_DP) += rockchip_dp_core.o rockchip_dp.o cdn-dp-fb-reg.o
diff --git a/drivers/video/rockchip/dp/cdn-dp-reg.c b/drivers/video/rockchip/dp/cdn-dp-fb-reg.c
similarity index 76%
rename from drivers/video/rockchip/dp/cdn-dp-reg.c
rename to drivers/video/rockchip/dp/cdn-dp-fb-reg.c
index 00d7942067d4..8e603e019f57 100644
--- a/drivers/video/rockchip/dp/cdn-dp-reg.c
+++ b/drivers/video/rockchip/dp/cdn-dp-fb-reg.c
@@ -19,7 +19,7 @@
 #include <linux/iopoll.h>
 #include <linux/reset.h>
 
-#include "cdn-dp-reg.h"
+#include "cdn-dp-fb-reg.h"
 
 #define CDN_DP_SPDIF_CLK		200000000
 #define FW_ALIVE_TIMEOUT_US		1000000
@@ -28,12 +28,12 @@
 #define LINK_TRAINING_RETRY_MS		20
 #define LINK_TRAINING_TIMEOUT_MS	500
 
-void cdn_dp_set_fw_clk(struct cdn_dp_device *dp, u32 clk)
+void cdn_dp_fb_set_fw_clk(struct cdn_dp_device *dp, u32 clk)
 {
 	writel(clk / 1000000, dp->regs + SW_CLK_H);
 }
 
-void cdn_dp_clock_reset(struct cdn_dp_device *dp)
+void cdn_dp_fb_clock_reset(struct cdn_dp_device *dp)
 {
 	u32 val;
 
@@ -82,7 +82,7 @@ void cdn_dp_clock_reset(struct cdn_dp_device *dp)
 	writel(val, dp->regs + APB_INT_MASK);
 }
 
-static int cdn_dp_mailbox_read(struct cdn_dp_device *dp, bool force)
+static int cdn_dp_fb_mailbox_read(struct cdn_dp_device *dp, bool force)
 {
 	int val, ret;
 
@@ -98,7 +98,7 @@ static int cdn_dp_mailbox_read(struct cdn_dp_device *dp, bool force)
 	return readl(dp->regs + MAILBOX0_RD_DATA) & 0xff;
 }
 
-static int cdp_dp_mailbox_write(struct cdn_dp_device *dp, u8 val, bool force)
+static int cdn_dp_fb_mailbox_write(struct cdn_dp_device *dp, u8 val, bool force)
 {
 	int ret, full;
 
@@ -116,7 +116,7 @@ static int cdp_dp_mailbox_write(struct cdn_dp_device *dp, u8 val, bool force)
 	return 0;
 }
 
-static int cdn_dp_mailbox_validate_receive(struct cdn_dp_device *dp,
+static int cdn_dp_fb_mailbox_validate_receive(struct cdn_dp_device *dp,
 					   u8 module_id, u8 opcode,
 					   u8 req_size)
 {
@@ -126,7 +126,7 @@ static int cdn_dp_mailbox_validate_receive(struct cdn_dp_device *dp,
 
 	/* read the header of the message */
 	for (i = 0; i < 4; i++) {
-		ret = cdn_dp_mailbox_read(dp, 0);
+		ret = cdn_dp_fb_mailbox_read(dp, 0);
 		if (ret < 0)
 			return ret;
 
@@ -142,7 +142,7 @@ static int cdn_dp_mailbox_validate_receive(struct cdn_dp_device *dp,
 		 * clear the mailbox by reading its contents.
 		 */
 		for (i = 0; i < mbox_size; i++)
-			if (cdn_dp_mailbox_read(dp, 0) < 0)
+			if (cdn_dp_fb_mailbox_read(dp, 0) < 0)
 				break;
 
 		return -EINVAL;
@@ -151,14 +151,14 @@ static int cdn_dp_mailbox_validate_receive(struct cdn_dp_device *dp,
 	return 0;
 }
 
-static int cdn_dp_mailbox_read_receive(struct cdn_dp_device *dp,
+static int cdn_dp_fb_mailbox_read_receive(struct cdn_dp_device *dp,
 				       u8 *buff, u8 buff_size)
 {
 	u32 i;
 	int ret;
 
 	for (i = 0; i < buff_size; i++) {
-		ret = cdn_dp_mailbox_read(dp, 0);
+		ret = cdn_dp_fb_mailbox_read(dp, 0);
 		if (ret < 0)
 			return ret;
 
@@ -168,7 +168,7 @@ static int cdn_dp_mailbox_read_receive(struct cdn_dp_device *dp,
 	return 0;
 }
 
-static int cdn_dp_mailbox_send(struct cdn_dp_device *dp, u8 module_id,
+static int cdn_dp_fb_mailbox_send(struct cdn_dp_device *dp, u8 module_id,
 			       u8 opcode, u16 size, u8 *message)
 {
 	u8 header[4];
@@ -180,13 +180,13 @@ static int cdn_dp_mailbox_send(struct cdn_dp_device *dp, u8 module_id,
 	header[3] = size & 0xff;
 
 	for (i = 0; i < 4; i++) {
-		ret = cdp_dp_mailbox_write(dp, header[i], 0);
+		ret = cdn_dp_fb_mailbox_write(dp, header[i], 0);
 		if (ret)
 			return ret;
 	}
 
 	for (i = 0; i < size; i++) {
-		ret = cdp_dp_mailbox_write(dp, message[i], 0);
+		ret = cdn_dp_fb_mailbox_write(dp, message[i], 0);
 		if (ret)
 			return ret;
 	}
@@ -194,7 +194,7 @@ static int cdn_dp_mailbox_send(struct cdn_dp_device *dp, u8 module_id,
 	return 0;
 }
 
-static int cdn_dp_reg_write(struct cdn_dp_device *dp, u16 addr, u32 val)
+static int cdn_dp_fb_reg_write(struct cdn_dp_device *dp, u16 addr, u32 val)
 {
 	u8 msg[6];
 
@@ -204,11 +204,11 @@ static int cdn_dp_reg_write(struct cdn_dp_device *dp, u16 addr, u32 val)
 	msg[3] = (val >> 16) & 0xff;
 	msg[4] = (val >> 8) & 0xff;
 	msg[5] = val & 0xff;
-	return cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_REGISTER,
+	return cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_REGISTER,
 				   sizeof(msg), msg);
 }
 
-static int cdn_dp_reg_write_bit(struct cdn_dp_device *dp, u16 addr,
+static int cdn_dp_fb_reg_write_bit(struct cdn_dp_device *dp, u16 addr,
 				u8 start_bit, u8 bits_no, u32 val)
 {
 	u8 field[8];
@@ -222,11 +222,11 @@ static int cdn_dp_reg_write_bit(struct cdn_dp_device *dp, u16 addr,
 	field[6] = (val >> 8) & 0xff;
 	field[7] = val & 0xff;
 
-	return cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_FIELD,
+	return cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_FIELD,
 				   sizeof(field), field);
 }
 
-int cdn_dp_dpcd_read(struct cdn_dp_device *dp, u32 addr, u8 *data, u16 len)
+int cdn_dp_fb_dpcd_read(struct cdn_dp_device *dp, u32 addr, u8 *data, u16 len)
 {
 	u8 msg[5], reg[5];
 	int ret;
@@ -236,28 +236,28 @@ int cdn_dp_dpcd_read(struct cdn_dp_device *dp, u32 addr, u8 *data, u16 len)
 	msg[2] = (addr >> 16) & 0xff;
 	msg[3] = (addr >> 8) & 0xff;
 	msg[4] = addr & 0xff;
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_READ_DPCD,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_READ_DPCD,
 				  sizeof(msg), msg);
 	if (ret)
 		goto err_dpcd_read;
 
-	ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+	ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 					      DPTX_READ_DPCD,
 					      sizeof(reg) + len);
 	if (ret)
 		goto err_dpcd_read;
 
-	ret = cdn_dp_mailbox_read_receive(dp, reg, sizeof(reg));
+	ret = cdn_dp_fb_mailbox_read_receive(dp, reg, sizeof(reg));
 	if (ret)
 		goto err_dpcd_read;
 
-	ret = cdn_dp_mailbox_read_receive(dp, data, len);
+	ret = cdn_dp_fb_mailbox_read_receive(dp, data, len);
 
 err_dpcd_read:
 	return ret;
 }
 
-int cdn_dp_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value)
+int cdn_dp_fb_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value)
 {
 	u8 msg[6], reg[5];
 	int ret;
@@ -268,17 +268,17 @@ int cdn_dp_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value)
 	msg[3] = (addr >> 8) & 0xff;
 	msg[4] = addr & 0xff;
 	msg[5] = value;
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_DPCD,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_WRITE_DPCD,
 				  sizeof(msg), msg);
 	if (ret)
 		goto err_dpcd_write;
 
-	ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+	ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 					      DPTX_WRITE_DPCD, sizeof(reg));
 	if (ret)
 		goto err_dpcd_write;
 
-	ret = cdn_dp_mailbox_read_receive(dp, reg, sizeof(reg));
+	ret = cdn_dp_fb_mailbox_read_receive(dp, reg, sizeof(reg));
 	if (ret)
 		goto err_dpcd_write;
 
@@ -291,7 +291,7 @@ int cdn_dp_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value)
 	return ret;
 }
 
-int cdn_dp_load_firmware(struct cdn_dp_device *dp, const u32 *i_mem,
+int cdn_dp_fb_load_firmware(struct cdn_dp_device *dp, const u32 *i_mem,
 			 u32 i_size, const u32 *d_mem, u32 d_size)
 {
 	u32 reg;
@@ -332,7 +332,7 @@ int cdn_dp_load_firmware(struct cdn_dp_device *dp, const u32 *i_mem,
 	return 0;
 }
 
-int cdn_dp_set_firmware_active(struct cdn_dp_device *dp, bool enable)
+int cdn_dp_fb_set_firmware_active(struct cdn_dp_device *dp, bool enable)
 {
 	u8 msg[5];
 	int ret, i;
@@ -344,14 +344,14 @@ int cdn_dp_set_firmware_active(struct cdn_dp_device *dp, bool enable)
 	msg[4] = enable ? FW_ACTIVE : FW_STANDBY;
 
 	for (i = 0; i < sizeof(msg); i++) {
-		ret = cdp_dp_mailbox_write(dp, msg[i], 1);
+		ret = cdn_dp_fb_mailbox_write(dp, msg[i], 1);
 		if (ret)
 			goto err_set_firmware_active;
 	}
 
 	/* read the firmware state */
 	for (i = 0; i < sizeof(msg); i++)  {
-		ret = cdn_dp_mailbox_read(dp, 1);
+		ret = cdn_dp_fb_mailbox_read(dp, 1);
 		if (ret < 0)
 			goto err_set_firmware_active;
 
@@ -367,7 +367,7 @@ int cdn_dp_set_firmware_active(struct cdn_dp_device *dp, bool enable)
 	return ret;
 }
 
-int cdn_dp_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip)
+int cdn_dp_fb_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip)
 {
 	u8 msg[8];
 	int ret;
@@ -381,13 +381,13 @@ int cdn_dp_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip)
 	msg[6] = flip ? LANE_MAPPING_FLIPPED : LANE_MAPPING_NORMAL;
 	msg[7] = ENHANCED;
 
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX,
 				  DPTX_SET_HOST_CAPABILITIES,
 				  sizeof(msg), msg);
 	if (ret)
 		goto err_set_host_cap;
 
-	ret = cdn_dp_reg_write(dp, DP_AUX_SWAP_INVERSION_CONTROL,
+	ret = cdn_dp_fb_reg_write(dp, DP_AUX_SWAP_INVERSION_CONTROL,
 			       AUX_HOST_INVERT);
 
 err_set_host_cap:
@@ -396,7 +396,7 @@ int cdn_dp_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip)
 	return ret;
 }
 
-int cdn_dp_event_config(struct cdn_dp_device *dp)
+int cdn_dp_fb_event_config(struct cdn_dp_device *dp)
 {
 	u8 msg[5];
 	int ret;
@@ -405,7 +405,7 @@ int cdn_dp_event_config(struct cdn_dp_device *dp)
 
 	msg[0] = DPTX_EVENT_ENABLE_HPD | DPTX_EVENT_ENABLE_TRAINING;
 
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_ENABLE_EVENT,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_ENABLE_EVENT,
 				  sizeof(msg), msg);
 	if (ret)
 		dev_err(dp->dev, "set event config failed: %d\n", ret);
@@ -413,27 +413,27 @@ int cdn_dp_event_config(struct cdn_dp_device *dp)
 	return ret;
 }
 
-u32 cdn_dp_get_event(struct cdn_dp_device *dp)
+u32 cdn_dp_fb_get_event(struct cdn_dp_device *dp)
 {
 	return readl(dp->regs + SW_EVENTS0);
 }
 
-int cdn_dp_get_hpd_status(struct cdn_dp_device *dp)
+int cdn_dp_fb_get_hpd_status(struct cdn_dp_device *dp)
 {
 	u8 status;
 	int ret;
 
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_HPD_STATE,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_HPD_STATE,
 				  0, NULL);
 	if (ret)
 		goto err_get_hpd;
 
-	ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+	ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 					      DPTX_HPD_STATE, sizeof(status));
 	if (ret)
 		goto err_get_hpd;
 
-	ret = cdn_dp_mailbox_read_receive(dp, &status, sizeof(status));
+	ret = cdn_dp_fb_mailbox_read_receive(dp, &status, sizeof(status));
 	if (ret)
 		goto err_get_hpd;
 
@@ -444,7 +444,7 @@ int cdn_dp_get_hpd_status(struct cdn_dp_device *dp)
 	return ret;
 }
 
-int cdn_dp_get_edid_block(void *data, u8 *edid,
+int cdn_dp_fb_get_edid_block(void *data, u8 *edid,
 			  unsigned int block, size_t length)
 {
 	struct cdn_dp_device *dp = data;
@@ -455,22 +455,22 @@ int cdn_dp_get_edid_block(void *data, u8 *edid,
 		msg[0] = block / 2;
 		msg[1] = block % 2;
 
-		ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_GET_EDID,
+		ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_GET_EDID,
 					  sizeof(msg), msg);
 		if (ret)
 			continue;
 
-		ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+		ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 						      DPTX_GET_EDID,
 						      sizeof(reg) + length);
 		if (ret)
 			continue;
 
-		ret = cdn_dp_mailbox_read_receive(dp, reg, sizeof(reg));
+		ret = cdn_dp_fb_mailbox_read_receive(dp, reg, sizeof(reg));
 		if (ret)
 			continue;
 
-		ret = cdn_dp_mailbox_read_receive(dp, edid, length);
+		ret = cdn_dp_fb_mailbox_read_receive(dp, edid, length);
 		if (ret)
 			continue;
 
@@ -484,7 +484,7 @@ int cdn_dp_get_edid_block(void *data, u8 *edid,
 	return ret;
 }
 
-int cdn_dp_training_start(struct cdn_dp_device *dp)
+int cdn_dp_fb_training_start(struct cdn_dp_device *dp)
 {
 	unsigned long timeout;
 	u8 msg, event[2];
@@ -493,7 +493,7 @@ int cdn_dp_training_start(struct cdn_dp_device *dp)
 	msg = LINK_TRAINING_RUN;
 
 	/* start training */
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_TRAINING_CONTROL,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_TRAINING_CONTROL,
 				  sizeof(msg), &msg);
 	if (ret)
 		goto err_training_start;
@@ -501,18 +501,18 @@ int cdn_dp_training_start(struct cdn_dp_device *dp)
 	timeout = jiffies + msecs_to_jiffies(LINK_TRAINING_TIMEOUT_MS);
 	while (time_before(jiffies, timeout)) {
 		msleep(LINK_TRAINING_RETRY_MS);
-		ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX,
+		ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX,
 					  DPTX_READ_EVENT, 0, NULL);
 		if (ret)
 			goto err_training_start;
 
-		ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+		ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 						      DPTX_READ_EVENT,
 						      sizeof(event));
 		if (ret)
 			goto err_training_start;
 
-		ret = cdn_dp_mailbox_read_receive(dp, event, sizeof(event));
+		ret = cdn_dp_fb_mailbox_read_receive(dp, event, sizeof(event));
 		if (ret)
 			goto err_training_start;
 
@@ -527,23 +527,23 @@ int cdn_dp_training_start(struct cdn_dp_device *dp)
 	return ret;
 }
 
-int cdn_dp_get_training_status(struct cdn_dp_device *dp)
+int cdn_dp_fb_get_training_status(struct cdn_dp_device *dp)
 {
 	u8 status[10];
 	int ret;
 
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_READ_LINK_STAT,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_READ_LINK_STAT,
 				  0, NULL);
 	if (ret)
 		goto err_get_training_status;
 
-	ret = cdn_dp_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
+	ret = cdn_dp_fb_mailbox_validate_receive(dp, MB_MODULE_ID_DP_TX,
 					      DPTX_READ_LINK_STAT,
 					      sizeof(status));
 	if (ret)
 		goto err_get_training_status;
 
-	ret = cdn_dp_mailbox_read_receive(dp, status, sizeof(status));
+	ret = cdn_dp_fb_mailbox_read_receive(dp, status, sizeof(status));
 	if (ret)
 		goto err_get_training_status;
 
@@ -556,14 +556,14 @@ int cdn_dp_get_training_status(struct cdn_dp_device *dp)
 	return ret;
 }
 
-int cdn_dp_set_video_status(struct cdn_dp_device *dp, int active)
+int cdn_dp_fb_set_video_status(struct cdn_dp_device *dp, int active)
 {
 	u8 msg;
 	int ret;
 
 	msg = !!active;
 
-	ret = cdn_dp_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_SET_VIDEO,
+	ret = cdn_dp_fb_mailbox_send(dp, MB_MODULE_ID_DP_TX, DPTX_SET_VIDEO,
 				  sizeof(msg), &msg);
 	if (ret)
 		dev_err(dp->dev, "set video status failed: %d\n", ret);
@@ -571,7 +571,7 @@ int cdn_dp_set_video_status(struct cdn_dp_device *dp, int active)
 	return ret;
 }
 
-static int cdn_dp_get_msa_misc(struct video_info *video,
+static int cdn_dp_fb_get_msa_misc(struct video_info *video,
 			       struct drm_display_mode *mode)
 {
 	u32 msa_misc;
@@ -618,7 +618,7 @@ static int cdn_dp_get_msa_misc(struct video_info *video,
 	return msa_misc;
 }
 
-int cdn_dp_config_video(struct cdn_dp_device *dp)
+int cdn_dp_fb_config_video(struct cdn_dp_device *dp)
 {
 	struct video_info *video = &dp->video_info;
 	struct drm_display_mode *mode = &dp->mode;
@@ -633,11 +633,11 @@ int cdn_dp_config_video(struct cdn_dp_device *dp)
 	link_rate = drm_dp_bw_code_to_link_rate(dp->link.rate) / 1000;
 
 	val = VIF_BYPASS_INTERLACE;
-	ret = cdn_dp_reg_write(dp, BND_HSYNC2VSYNC, val);
+	ret = cdn_dp_fb_reg_write(dp, BND_HSYNC2VSYNC, val);
 	if (ret)
 		goto err_config_video;
 
-	ret = cdn_dp_reg_write(dp, HSYNC2VSYNC_POL_CTRL, 0);
+	ret = cdn_dp_fb_reg_write(dp, HSYNC2VSYNC_POL_CTRL, 0);
 	if (ret)
 		goto err_config_video;
 
@@ -657,7 +657,7 @@ int cdn_dp_config_video(struct cdn_dp_device *dp)
 		 (tmp % 1000 > 850) || (tmp % 1000 < 100));
 
 	val = symbol + (tu_size_reg << 8);
-	ret = cdn_dp_reg_write(dp, DP_FRAMER_TU, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_FRAMER_TU, val);
 	if (ret)
 		goto err_config_video;
 
@@ -666,7 +666,7 @@ int cdn_dp_config_video(struct cdn_dp_device *dp)
 	val /= (dp->link.num_lanes * link_rate);
 	val = 8 * (symbol + 1) / bit_per_pix - val;
 	val += 2;
-	ret = cdn_dp_reg_write(dp, DP_VC_TABLE(15), val);
+	ret = cdn_dp_fb_reg_write(dp, DP_VC_TABLE(15), val);
 
 	switch (video->color_depth) {
 	case 6:
@@ -687,79 +687,79 @@ int cdn_dp_config_video(struct cdn_dp_device *dp)
 	};
 
 	val += video->color_fmt << 8;
-	ret = cdn_dp_reg_write(dp, DP_FRAMER_PXL_REPR, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_FRAMER_PXL_REPR, val);
 	if (ret)
 		goto err_config_video;
 
 	val = video->h_sync_polarity ? DP_FRAMER_SP_HSP : 0;
 	val |= video->v_sync_polarity ? DP_FRAMER_SP_VSP : 0;
-	ret = cdn_dp_reg_write(dp, DP_FRAMER_SP, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_FRAMER_SP, val);
 	if (ret)
 		goto err_config_video;
 
 	val = (mode->hsync_start - mode->hdisplay) << 16;
 	val |= mode->htotal - mode->hsync_end;
-	ret = cdn_dp_reg_write(dp, DP_FRONT_BACK_PORCH, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_FRONT_BACK_PORCH, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->hdisplay * bit_per_pix / 8;
-	ret = cdn_dp_reg_write(dp, DP_BYTE_COUNT, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_BYTE_COUNT, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->htotal | ((mode->htotal - mode->hsync_start) << 16);
-	ret = cdn_dp_reg_write(dp, MSA_HORIZONTAL_0, val);
+	ret = cdn_dp_fb_reg_write(dp, MSA_HORIZONTAL_0, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->hsync_end - mode->hsync_start;
 	val |= (mode->hdisplay << 16) | (video->h_sync_polarity << 15);
-	ret = cdn_dp_reg_write(dp, MSA_HORIZONTAL_1, val);
+	ret = cdn_dp_fb_reg_write(dp, MSA_HORIZONTAL_1, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->vtotal;
 	val |= ((mode->vtotal - mode->vsync_start) << 16);
-	ret = cdn_dp_reg_write(dp, MSA_VERTICAL_0, val);
+	ret = cdn_dp_fb_reg_write(dp, MSA_VERTICAL_0, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->vsync_end - mode->vsync_start;
 	val |= mode->vdisplay << 16 | (video->v_sync_polarity << 15);
-	ret = cdn_dp_reg_write(dp, MSA_VERTICAL_1, val);
+	ret = cdn_dp_fb_reg_write(dp, MSA_VERTICAL_1, val);
 	if (ret)
 		goto err_config_video;
 
-	val = cdn_dp_get_msa_misc(video, mode);
-	ret = cdn_dp_reg_write(dp, MSA_MISC, val);
+	val = cdn_dp_fb_get_msa_misc(video, mode);
+	ret = cdn_dp_fb_reg_write(dp, MSA_MISC, val);
 	if (ret)
 		goto err_config_video;
 
-	ret = cdn_dp_reg_write(dp, STREAM_CONFIG, 1);
+	ret = cdn_dp_fb_reg_write(dp, STREAM_CONFIG, 1);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->hsync_end - mode->hsync_start;
 	val |= (mode->hdisplay << 16);
-	ret = cdn_dp_reg_write(dp, DP_HORIZONTAL, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_HORIZONTAL, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->vtotal;
 	val -= (mode->vtotal - mode->vdisplay);
 	val |= (mode->vtotal - mode->vsync_start) << 16;
-	ret = cdn_dp_reg_write(dp, DP_VERTICAL_0, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_VERTICAL_0, val);
 	if (ret)
 		goto err_config_video;
 
 	val = mode->vtotal;
-	ret = cdn_dp_reg_write(dp, DP_VERTICAL_1, val);
+	ret = cdn_dp_fb_reg_write(dp, DP_VERTICAL_1, val);
 	if (ret)
 		goto err_config_video;
 
 	val =  0;
-	ret = cdn_dp_reg_write_bit(dp, DP_VB_ID, 2, 1, val);
+	ret = cdn_dp_fb_reg_write_bit(dp, DP_VB_ID, 2, 1, val);
 
 err_config_video:
 	if (ret)
@@ -767,12 +767,12 @@ int cdn_dp_config_video(struct cdn_dp_device *dp)
 	return ret;
 }
 
-int cdn_dp_audio_stop(struct cdn_dp_device *dp, struct audio_info *audio)
+int cdn_dp_fb_audio_stop(struct cdn_dp_device *dp, struct audio_info *audio)
 {
 	u32 val;
 	int ret;
 
-	ret = cdn_dp_reg_write(dp, AUDIO_PACK_CONTROL, 0);
+	ret = cdn_dp_fb_reg_write(dp, AUDIO_PACK_CONTROL, 0);
 	if (ret) {
 		dev_err(dp->dev, "audio stop failed: %d\n", ret);
 		return ret;
@@ -805,18 +805,18 @@ int cdn_dp_audio_stop(struct cdn_dp_device *dp, struct audio_info *audio)
 	return 0;
 }
 
-int cdn_dp_audio_mute(struct cdn_dp_device *dp, bool enable)
+int cdn_dp_fb_audio_mute(struct cdn_dp_device *dp, bool enable)
 {
 	int ret;
 
-	ret = cdn_dp_reg_write_bit(dp, DP_VB_ID, 4, 1, enable);
+	ret = cdn_dp_fb_reg_write_bit(dp, DP_VB_ID, 4, 1, enable);
 	if (ret)
 		dev_err(dp->dev, "audio mute failed: %d\n", ret);
 
 	return ret;
 }
 
-static void cdn_dp_audio_config_i2s(struct cdn_dp_device *dp,
+static void cdn_dp_fb_audio_config_i2s(struct cdn_dp_device *dp,
 				    struct audio_info *audio)
 {
 	int sub_pckt_num = 1, i2s_port_en_val = 0xf, i;
@@ -902,7 +902,7 @@ static void cdn_dp_audio_config_i2s(struct cdn_dp_device *dp,
 	writel(I2S_DEC_START, dp->regs + AUDIO_SRC_CNTL);
 }
 
-static void cdn_dp_audio_config_spdif(struct cdn_dp_device *dp)
+static void cdn_dp_fb_audio_config_spdif(struct cdn_dp_device *dp)
 {
 	u32 val;
 
@@ -928,7 +928,7 @@ static void cdn_dp_audio_config_spdif(struct cdn_dp_device *dp)
 	clk_set_rate(dp->spdif_clk, CDN_DP_SPDIF_CLK);
 }
 
-int cdn_dp_audio_config(struct cdn_dp_device *dp, struct audio_info *audio)
+int cdn_dp_fb_audio_config(struct cdn_dp_device *dp, struct audio_info *audio)
 {
 	int ret;
 
@@ -938,20 +938,20 @@ int cdn_dp_audio_config(struct cdn_dp_device *dp, struct audio_info *audio)
 		reset_control_deassert(dp->spdif_rst);
 	}
 
-	ret = cdn_dp_reg_write(dp, CM_LANE_CTRL, LANE_REF_CYC);
+	ret = cdn_dp_fb_reg_write(dp, CM_LANE_CTRL, LANE_REF_CYC);
 	if (ret)
 		goto err_audio_config;
 
-	ret = cdn_dp_reg_write(dp, CM_CTRL, 0);
+	ret = cdn_dp_fb_reg_write(dp, CM_CTRL, 0);
 	if (ret)
 		goto err_audio_config;
 
 	if (audio->format == AFMT_I2S)
-		cdn_dp_audio_config_i2s(dp, audio);
+		cdn_dp_fb_audio_config_i2s(dp, audio);
 	else
-		cdn_dp_audio_config_spdif(dp);
+		cdn_dp_fb_audio_config_spdif(dp);
 
-	ret = cdn_dp_reg_write(dp, AUDIO_PACK_CONTROL, AUDIO_PACK_EN);
+	ret = cdn_dp_fb_reg_write(dp, AUDIO_PACK_CONTROL, AUDIO_PACK_EN);
 
 err_audio_config:
 	if (ret)
diff --git a/drivers/video/rockchip/dp/cdn-dp-reg.h b/drivers/video/rockchip/dp/cdn-dp-fb-reg.h
similarity index 93%
rename from drivers/video/rockchip/dp/cdn-dp-reg.h
rename to drivers/video/rockchip/dp/cdn-dp-fb-reg.h
index 83419bcbf338..cbedf5cf4c7e 100644
--- a/drivers/video/rockchip/dp/cdn-dp-reg.h
+++ b/drivers/video/rockchip/dp/cdn-dp-fb-reg.h
@@ -553,25 +553,25 @@ struct cdn_dp_device {
 	struct wake_lock	wake_lock;
 };
 
-void cdn_dp_clock_reset(struct cdn_dp_device *dp);
+void cdn_dp_fb_clock_reset(struct cdn_dp_device *dp);
 
-void cdn_dp_set_fw_clk(struct cdn_dp_device *dp, u32 clk);
-int cdn_dp_load_firmware(struct cdn_dp_device *dp, const u32 *i_mem,
+void cdn_dp_fb_set_fw_clk(struct cdn_dp_device *dp, u32 clk);
+int cdn_dp_fb_load_firmware(struct cdn_dp_device *dp, const u32 *i_mem,
 			 u32 i_size, const u32 *d_mem, u32 d_size);
-int cdn_dp_set_firmware_active(struct cdn_dp_device *dp, bool enable);
-int cdn_dp_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip);
-int cdn_dp_event_config(struct cdn_dp_device *dp);
-u32 cdn_dp_get_event(struct cdn_dp_device *dp);
-int cdn_dp_get_hpd_status(struct cdn_dp_device *dp);
-int cdn_dp_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value);
-int cdn_dp_dpcd_read(struct cdn_dp_device *dp, u32 addr, u8 *data, u16 len);
-int cdn_dp_get_edid_block(void *dp, u8 *edid,
+int cdn_dp_fb_set_firmware_active(struct cdn_dp_device *dp, bool enable);
+int cdn_dp_fb_set_host_cap(struct cdn_dp_device *dp, u8 lanes, bool flip);
+int cdn_dp_fb_event_config(struct cdn_dp_device *dp);
+u32 cdn_dp_fb_get_event(struct cdn_dp_device *dp);
+int cdn_dp_fb_get_hpd_status(struct cdn_dp_device *dp);
+int cdn_dp_fb_dpcd_write(struct cdn_dp_device *dp, u32 addr, u8 value);
+int cdn_dp_fb_dpcd_read(struct cdn_dp_device *dp, u32 addr, u8 *data, u16 len);
+int cdn_dp_fb_get_edid_block(void *dp, u8 *edid,
 			  unsigned int block, size_t length);
-int cdn_dp_training_start(struct cdn_dp_device *dp);
-int cdn_dp_get_training_status(struct cdn_dp_device *dp);
-int cdn_dp_set_video_status(struct cdn_dp_device *dp, int active);
-int cdn_dp_config_video(struct cdn_dp_device *dp);
-int cdn_dp_audio_stop(struct cdn_dp_device *dp, struct audio_info *audio);
-int cdn_dp_audio_mute(struct cdn_dp_device *dp, bool enable);
-int cdn_dp_audio_config(struct cdn_dp_device *dp, struct audio_info *audio);
+int cdn_dp_fb_training_start(struct cdn_dp_device *dp);
+int cdn_dp_fb_get_training_status(struct cdn_dp_device *dp);
+int cdn_dp_fb_set_video_status(struct cdn_dp_device *dp, int active);
+int cdn_dp_fb_config_video(struct cdn_dp_device *dp);
+int cdn_dp_fb_audio_stop(struct cdn_dp_device *dp, struct audio_info *audio);
+int cdn_dp_fb_audio_mute(struct cdn_dp_device *dp, bool enable);
+int cdn_dp_fb_audio_config(struct cdn_dp_device *dp, struct audio_info *audio);
 #endif /* _CDN_DP_REG_H */
diff --git a/drivers/video/rockchip/dp/rockchip_dp.c b/drivers/video/rockchip/dp/rockchip_dp.c
index 9a9a6f31972f..6570937a9c9c 100644
--- a/drivers/video/rockchip/dp/rockchip_dp.c
+++ b/drivers/video/rockchip/dp/rockchip_dp.c
@@ -158,12 +158,12 @@ void hpd_change(struct device *dev, int lanes)
 static void rockchip_dp_early_suspend(struct dp_dev *dp_dev)
 {
 	hdmi_submit_work(dp_dev->hdmi, HDMI_SUSPEND_CTL, 0, 1);
-	cdn_dp_suspend(dp_dev->dp);
+	cdn_dp_fb_suspend(dp_dev->dp);
 }
 
 static void rockchip_dp_early_resume(struct dp_dev *dp_dev)
 {
-	cdn_dp_resume(dp_dev->dp);
+	cdn_dp_fb_resume(dp_dev->dp);
 	hdmi_submit_work(dp_dev->hdmi, HDMI_RESUME_CTL, 0, 0);
 }
 
diff --git a/drivers/video/rockchip/dp/rockchip_dp.h b/drivers/video/rockchip/dp/rockchip_dp.h
index 175f03aeb421..f549e4e08410 100644
--- a/drivers/video/rockchip/dp/rockchip_dp.h
+++ b/drivers/video/rockchip/dp/rockchip_dp.h
@@ -11,7 +11,7 @@ int cdn_dp_connector_detect(void *dp);
 int cdn_dp_encoder_disable(void *dp);
 int cdn_dp_audio_hw_params(void *dp);
 int cdn_dp_audio_digital_mute(void *dp, bool enable);
-int cdn_dp_resume(void *dp_dev);
-int cdn_dp_suspend(void *dp_dev);
+int cdn_dp_fb_resume(void *dp_dev);
+int cdn_dp_fb_suspend(void *dp_dev);
 
 #endif
diff --git a/drivers/video/rockchip/dp/rockchip_dp_core.c b/drivers/video/rockchip/dp/rockchip_dp_core.c
index 30876540b262..dad42f26bafb 100644
--- a/drivers/video/rockchip/dp/rockchip_dp_core.c
+++ b/drivers/video/rockchip/dp/rockchip_dp_core.c
@@ -27,7 +27,7 @@
 #include <linux/fb.h>
 #include <linux/platform_device.h>
 #include "rockchip_dp_core.h"
-#include "cdn-dp-reg.h"
+#include "cdn-dp-fb-reg.h"
 
 static struct cdn_dp_data rk3399_cdn_dp = {
 	.max_phy = 2,
@@ -73,8 +73,8 @@ static int cdn_dp_set_fw_rate(struct cdn_dp_device *dp)
 			dev_err(dp->dev, "get clk rate failed: %d\n", rate);
 			return rate;
 		}
-		cdn_dp_set_fw_clk(dp, rate);
-		cdn_dp_clock_reset(dp);
+		cdn_dp_fb_set_fw_clk(dp, rate);
+		cdn_dp_fb_clock_reset(dp);
 		dp->fw_clk_enabled = true;
 	}
 
@@ -141,7 +141,7 @@ int cdn_dp_get_edid(void *dp, u8 *buf, int block)
 	struct cdn_dp_device *dp_dev = dp;
 
 	mutex_lock(&dp_dev->lock);
-	ret = cdn_dp_get_edid_block(dp_dev, buf, block, EDID_BLOCK_SIZE);
+	ret = cdn_dp_fb_get_edid_block(dp_dev, buf, block, EDID_BLOCK_SIZE);
 	mutex_unlock(&dp_dev->lock);
 
 	return ret;
@@ -187,14 +187,14 @@ int cdn_dp_encoder_disable(void *dp)
 static void cdn_dp_commit(struct cdn_dp_device *dp)
 {
 	char guid[16];
-	int ret = cdn_dp_training_start(dp);
+	int ret = cdn_dp_fb_training_start(dp);
 
 	if (ret) {
 		dev_err(dp->dev, "link training failed: %d\n", ret);
 		return;
 	}
 
-	ret = cdn_dp_get_training_status(dp);
+	ret = cdn_dp_fb_get_training_status(dp);
 	if (ret) {
 		dev_err(dp->dev, "get link training status failed: %d\n", ret);
 		return;
@@ -211,23 +211,23 @@ static void cdn_dp_commit(struct cdn_dp_device *dp)
 	* The sync register is 0x0035, firstly we write 0xaa to sync register,
 	* nanoc will read this register and then start the part2 code of DP.
 	*/
-	ret = cdn_dp_dpcd_read(dp, 0x0030, guid, 8);
+	ret = cdn_dp_fb_dpcd_read(dp, 0x0030, guid, 8);
 	if (ret == 0 && guid[0] == 'n' && guid[1] == 'a' && guid[2] == 'n' &&
 			guid[3] == 'o' && guid[4] == 'c') {
 		u8 sync_number = 0xaa;
 
-		cdn_dp_dpcd_write(dp, 0x0035, sync_number);
+		cdn_dp_fb_dpcd_write(dp, 0x0035, sync_number);
 	}
 
-	if (cdn_dp_set_video_status(dp, CONTROL_VIDEO_IDLE))
+	if (cdn_dp_fb_set_video_status(dp, CONTROL_VIDEO_IDLE))
 		return;
 
-	if (cdn_dp_config_video(dp)) {
+	if (cdn_dp_fb_config_video(dp)) {
 		dev_err(dp->dev, "unable to config video\n");
 		return;
 	}
 
-	if (cdn_dp_set_video_status(dp, CONTROL_VIDEO_VALID))
+	if (cdn_dp_fb_set_video_status(dp, CONTROL_VIDEO_VALID))
 		return;
 
 	dp->dpms_mode = DRM_MODE_DPMS_ON;
@@ -333,19 +333,19 @@ static int cdn_dp_firmware_init(struct cdn_dp_device *dp)
 	iram_data = (const u32 *)(fw->data + hdr->header_size);
 	dram_data = (const u32 *)(fw->data + hdr->header_size + hdr->iram_size);
 
-	ret = cdn_dp_load_firmware(dp, iram_data, hdr->iram_size,
+	ret = cdn_dp_fb_load_firmware(dp, iram_data, hdr->iram_size,
 				   dram_data, hdr->dram_size);
 	if (ret)
 		return ret;
 
-	ret = cdn_dp_set_firmware_active(dp, true);
+	ret = cdn_dp_fb_set_firmware_active(dp, true);
 	if (ret) {
 		dev_err(dp->dev, "active ucpu failed: %d\n", ret);
 		return ret;
 	}
 
 	dp->fw_loaded = 1;
-	return cdn_dp_event_config(dp);
+	return cdn_dp_fb_event_config(dp);
 }
 
 static int cdn_dp_init(struct cdn_dp_device *dp)
@@ -455,7 +455,7 @@ static int cdn_dp_audio_hw_params(struct device *dev,  void *data,
 		return -EINVAL;
 	}
 
-	ret = cdn_dp_audio_config(dp, &audio);
+	ret = cdn_dp_fb_audio_config(dp, &audio);
 	if (!ret)
 		dp->audio_info = audio;
 
@@ -469,7 +469,7 @@ static void cdn_dp_audio_shutdown(struct device *dev, void *data)
 	int ret;
 
 	if (cdn_dp_connector_detect(dp)) {
-		ret = cdn_dp_audio_stop(dp, &dp->audio_info);
+		ret = cdn_dp_fb_audio_stop(dp, &dp->audio_info);
 		if (!ret)
 			dp->audio_info.format = AFMT_UNUSED;
 	}
@@ -483,7 +483,7 @@ static int cdn_dp_audio_digital_mute(struct device *dev, void *data,
 
 	if (!cdn_dp_connector_detect(dp))
 		return 0;
-	return cdn_dp_audio_mute(dp, enable);
+	return cdn_dp_fb_audio_mute(dp, enable);
 }
 
 static const struct hdmi_codec_ops audio_codec_ops = {
@@ -547,7 +547,7 @@ static int cdn_dp_get_dpcd(struct cdn_dp_device *dp, struct cdn_dp_port *port)
 	 * 100ms, if can not get a good dpcd in 10 seconds, give up.
 	 */
 	for (i = 0; i < 100; i++) {
-		ret = cdn_dp_dpcd_read(dp, DP_SINK_COUNT,
+		ret = cdn_dp_fb_dpcd_read(dp, DP_SINK_COUNT,
 				       &sink_count, 1);
 		if (!ret) {
 			dev_dbg(dp->dev, "get dpcd success!\n");
@@ -562,7 +562,7 @@ static int cdn_dp_get_dpcd(struct cdn_dp_device *dp, struct cdn_dp_port *port)
 				continue;
 			}
 
-			ret = cdn_dp_dpcd_read(dp, 0x000, dp->dpcd,
+			ret = cdn_dp_fb_dpcd_read(dp, 0x000, dp->dpcd,
 					       DP_RECEIVER_CAP_SIZE);
 			if (ret)
 				continue;
@@ -601,7 +601,7 @@ static void cdn_dp_enter_standy(struct cdn_dp_device *dp,
 
 	memset(dp->dpcd, 0, DP_RECEIVER_CAP_SIZE);
 	if (dp->fw_actived)
-		cdn_dp_set_firmware_active(dp, false);
+		cdn_dp_fb_set_firmware_active(dp, false);
 	if (dp->fw_clk_enabled) {
 		cdn_dp_clk_disable(dp);
 		dp->fw_clk_enabled = false;
@@ -665,7 +665,7 @@ static int cdn_dp_start_work(struct cdn_dp_device *dp,
 	if (ret)
 		goto err_grf;
 
-	ret = cdn_dp_get_hpd_status(dp);
+	ret = cdn_dp_fb_get_hpd_status(dp);
 	if (ret <= 0) {
 		if (!ret)
 			dev_err(dp->dev, "hpd does not exist\n");
@@ -679,7 +679,7 @@ static int cdn_dp_start_work(struct cdn_dp_device *dp,
 		goto err_hpd;
 	}
 
-	ret = cdn_dp_set_host_cap(dp, cap_lanes, property.intval);
+	ret = cdn_dp_fb_set_host_cap(dp, cap_lanes, property.intval);
 	if (ret) {
 		dev_err(dp->dev, "set host capabilities failed: %d\n", ret);
 		goto err_hpd;
@@ -697,7 +697,7 @@ static int cdn_dp_start_work(struct cdn_dp_device *dp,
 
 err_grf:
 	if (dp->fw_actived)
-		cdn_dp_set_firmware_active(dp, false);
+		cdn_dp_fb_set_firmware_active(dp, false);
 
 err_firmware:
 	if (phy_power_off(port->phy))
@@ -750,7 +750,7 @@ static void cdn_dp_pd_event_wq(struct work_struct *work)
 		 * means something is wrong, we don't do anything here, just
 		 * output error log.
 		 */
-		cdn_dp_dpcd_read(dp, DP_SINK_COUNT, &sink_count, 1);
+		cdn_dp_fb_dpcd_read(dp, DP_SINK_COUNT, &sink_count, 1);
 		if (sink_count) {
 			if (dp->hpd_status == connector_status_connected)
 				dev_info(dp->dev,
@@ -835,7 +835,7 @@ static int cdn_dp_bind(struct cdn_dp_device *dp)
 	return 0;
 }
 
-int cdn_dp_suspend(void *dp_dev)
+int cdn_dp_fb_suspend(void *dp_dev)
 {
 	struct cdn_dp_device *dp = dp_dev;
 	struct cdn_dp_port *port;
@@ -844,7 +844,7 @@ int cdn_dp_suspend(void *dp_dev)
 	for (i = 0; i < dp->ports; i++) {
 		port = dp->port[i];
 		if (port->phy_status) {
-			cdn_dp_dpcd_write(dp, DP_SET_POWER, DP_SET_POWER_D3);
+			cdn_dp_fb_dpcd_write(dp, DP_SET_POWER, DP_SET_POWER_D3);
 			cdn_dp_enter_standy(dp, port);
 		}
 	}
@@ -859,7 +859,7 @@ int cdn_dp_suspend(void *dp_dev)
 	return 0;
 }
 
-int cdn_dp_resume(void *dp_dev)
+int cdn_dp_fb_resume(void *dp_dev)
 {
 	struct cdn_dp_device *dp = dp_dev;
 	struct cdn_dp_port *port;
-- 
2.35.3

