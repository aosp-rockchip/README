From d6191096b0e9e00010913ded8c8ba0ed37a6ab64 Mon Sep 17 00:00:00 2001
From: Ren Jianing <jianing.ren@rock-chips.com>
Date: Fri, 20 Nov 2020 15:39:03 +0800
Subject: [PATCH] usb: gadget: f_uac: add pktsize calculating at setting
 playback srate

Without this patch, we only calculate usb request packet_size when
start playback. If PC set sample rate after opening stream, the value
of packet_size will not be updated to uac driver and the gadget will
send error size of pcm data.

Signed-off-by: Ren Jianing <jianing.ren@rock-chips.com>
Change-Id: Iaa54ed740c98e5f12bf9cf680b50cf4be931cfbd
---
 drivers/usb/gadget/function/u_audio.c | 69 ++++++++++++++++-----------
 1 file changed, 42 insertions(+), 27 deletions(-)

diff --git a/drivers/usb/gadget/function/u_audio.c b/drivers/usb/gadget/function/u_audio.c
index 6e8a8f212a3e..a2b2ab10393f 100644
--- a/drivers/usb/gadget/function/u_audio.c
+++ b/drivers/usb/gadget/function/u_audio.c
@@ -445,6 +445,44 @@ int u_audio_set_capture_srate(struct g_audio *audio_dev, int srate)
 }
 EXPORT_SYMBOL_GPL(u_audio_set_capture_srate);
 
+static void u_audio_set_playback_pktsize(struct g_audio *audio_dev, int srate)
+{
+	struct uac_params *params = &audio_dev->params;
+	struct snd_uac_chip *uac = audio_dev->uac;
+	struct usb_gadget *gadget = audio_dev->gadget;
+	const struct usb_endpoint_descriptor *ep_desc;
+	struct uac_rtd_params *prm;
+	unsigned int factor;
+
+	prm = &uac->p_prm;
+	/* set srate before starting playback, epin is not configured */
+	if (!prm->ep_enabled)
+		return;
+
+	ep_desc = audio_dev->in_ep->desc;
+
+	/* pre-calculate the playback endpoint's interval */
+	if (gadget->speed == USB_SPEED_FULL)
+		factor = 1000;
+	else
+		factor = 8000;
+
+	/* pre-compute some values for iso_complete() */
+	uac->p_framesize = params->p_ssize *
+			    num_channels(params->p_chmask);
+	uac->p_interval = factor / (1 << (ep_desc->bInterval - 1));
+	uac->p_pktsize = min_t(unsigned int,
+				uac->p_framesize *
+				(params->p_srate_active / uac->p_interval),
+				prm->max_psize);
+
+	if (uac->p_pktsize < prm->max_psize)
+		uac->p_pktsize_residue = uac->p_framesize *
+			(params->p_srate_active % uac->p_interval);
+	else
+		uac->p_pktsize_residue = 0;
+}
+
 int u_audio_set_playback_srate(struct g_audio *audio_dev, int srate)
 {
 	struct snd_kcontrol *ctl = u_audio_get_ctl(audio_dev, "Playback Rate");
@@ -457,6 +495,7 @@ int u_audio_set_playback_srate(struct g_audio *audio_dev, int srate)
 			schedule_work(&audio_dev->work);
 
 			params->p_srate_active = srate;
+			u_audio_set_playback_pktsize(audio_dev, srate);
 			snd_ctl_notify(audio_dev->uac->card,
 					SNDRV_CTL_EVENT_MASK_VALUE, &ctl->id);
 			return 0;
@@ -537,8 +576,6 @@ int u_audio_start_playback(struct g_audio *audio_dev)
 	struct usb_ep *ep;
 	struct uac_rtd_params *prm;
 	struct uac_params *params = &audio_dev->params;
-	unsigned int factor;
-	const struct usb_endpoint_descriptor *ep_desc;
 	int req_len, i;
 
 	audio_dev->usb_state[SET_INTERFACE_IN] = true;
@@ -550,35 +587,13 @@ int u_audio_start_playback(struct g_audio *audio_dev)
 	prm = &uac->p_prm;
 	config_ep_by_speed(gadget, &audio_dev->func, ep);
 
-	ep_desc = ep->desc;
-
-	/* pre-calculate the playback endpoint's interval */
-	if (gadget->speed == USB_SPEED_FULL)
-		factor = 1000;
-	else
-		factor = 8000;
-
-	/* pre-compute some values for iso_complete() */
-	uac->p_framesize = params->p_ssize *
-			    num_channels(params->p_chmask);
-	uac->p_interval = factor / (1 << (ep_desc->bInterval - 1));
-	uac->p_pktsize = min_t(unsigned int,
-				uac->p_framesize *
-				(params->p_srate_active / uac->p_interval),
-				prm->max_psize);
-
-	if (uac->p_pktsize < prm->max_psize)
-		uac->p_pktsize_residue = uac->p_framesize *
-			(params->p_srate_active % uac->p_interval);
-	else
-		uac->p_pktsize_residue = 0;
+	prm->ep_enabled = true;
+	usb_ep_enable(ep);
 
+	u_audio_set_playback_pktsize(audio_dev, params->p_srate_active);
 	req_len = uac->p_pktsize;
 	uac->p_residue = 0;
 
-	prm->ep_enabled = true;
-	usb_ep_enable(ep);
-
 	for (i = 0; i < params->req_number; i++) {
 		if (!prm->ureq[i].req) {
 			req = usb_ep_alloc_request(ep, GFP_ATOMIC);
-- 
2.35.3

