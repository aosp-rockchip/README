From fe215b9836f3d27152731e8a5f5e784b8f7753f9 Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Fri, 28 Sep 2018 15:28:41 +0800
Subject: [PATCH] drm/rockchip: lvds: Remove rk3288 phy code

Change-Id: I3e76a471378a6ae31397fcf1a85a017dbb3520a9
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_lvds.c | 371 ++++++-----------------
 drivers/gpu/drm/rockchip/rockchip_lvds.h |  90 ------
 2 files changed, 97 insertions(+), 364 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_lvds.c b/drivers/gpu/drm/rockchip/rockchip_lvds.c
index 2fcaaac3129f..8b1893abf4cd 100644
--- a/drivers/gpu/drm/rockchip/rockchip_lvds.c
+++ b/drivers/gpu/drm/rockchip/rockchip_lvds.c
@@ -50,13 +50,28 @@
 #define RK3126_LVDS_MSBSEL(x)		HIWORD_UPDATE(x,  3,  3)
 #define RK3126_LVDS_SELECT(x)		HIWORD_UPDATE(x,  2,  1)
 
+#define RK3288_GRF_SOC_CON6		0x025c
+#define RK3288_LVDS_LCDC_SEL(x)		HIWORD_UPDATE(x,  3,  3)
+#define RK3288_GRF_SOC_CON7		0x0260
+#define RK3288_LVDS_PWRDWN(x)		HIWORD_UPDATE(x, 15, 15)
+#define RK3288_LVDS_CON_ENABLE_2(x)	HIWORD_UPDATE(x, 12, 12)
+#define RK3288_LVDS_CON_ENABLE_1(x)	HIWORD_UPDATE(x, 11, 11)
+#define RK3288_LVDS_CON_DEN_POL(x)	HIWORD_UPDATE(x, 10, 10)
+#define RK3288_LVDS_CON_HS_POL(x)	HIWORD_UPDATE(x,  9,  9)
+#define RK3288_LVDS_CON_CLKINV(x)	HIWORD_UPDATE(x,  8,  8)
+#define RK3288_LVDS_CON_STARTPHASE(x)	HIWORD_UPDATE(x,  7,  7)
+#define RK3288_LVDS_CON_TTL_EN(x)	HIWORD_UPDATE(x,  6,  6)
+#define RK3288_LVDS_CON_STARTSEL(x)	HIWORD_UPDATE(x,  5,  5)
+#define RK3288_LVDS_CON_CHASEL(x)	HIWORD_UPDATE(x,  4,  4)
+#define RK3288_LVDS_CON_MSBSEL(x)	HIWORD_UPDATE(x,  3,  3)
+#define RK3288_LVDS_CON_SELECT(x)	HIWORD_UPDATE(x,  2,  0)
+
 #define RK3368_GRF_SOC_CON7		0x041c
 #define RK3368_LVDS_SELECT(x)		HIWORD_UPDATE(x, 14, 13)
 #define RK3368_LVDS_MODE_EN(x)		HIWORD_UPDATE(x, 12, 12)
 #define RK3368_LVDS_MSBSEL(x)		HIWORD_UPDATE(x, 11, 11)
 #define RK3368_LVDS_P2S_EN(x)		HIWORD_UPDATE(x,  6,  6)
 
-#define DISPLAY_OUTPUT_RGB		0
 #define DISPLAY_OUTPUT_LVDS		1
 #define DISPLAY_OUTPUT_DUAL_LVDS	2
 
@@ -66,29 +81,18 @@
 #define encoder_to_lvds(c) \
 		container_of(c, struct rockchip_lvds, encoder)
 
-enum chip_type {
-	PX30,
-	RK3126,
-	RK3288,
-	RK3368,
-};
-
 struct rockchip_lvds;
 
-struct rockchip_lvds_soc_data {
-	enum chip_type chip_type;
-	int (*probe)(struct rockchip_lvds *lvds);
-	int (*power_on)(struct rockchip_lvds *lvds);
-	void (*power_off)(struct rockchip_lvds *lvds);
+struct rockchip_lvds_funcs {
+	void (*enable)(struct rockchip_lvds *lvds);
+	void (*disable)(struct rockchip_lvds *lvds);
 };
 
 struct rockchip_lvds {
 	struct device *dev;
 	struct phy *phy;
-	void __iomem *regs;
 	struct regmap *grf;
-	struct clk *pclk;
-	const struct rockchip_lvds_soc_data *soc_data;
+	const struct rockchip_lvds_funcs *funcs;
 
 	int output;
 	int format;
@@ -100,15 +104,6 @@ struct rockchip_lvds {
 	struct drm_display_mode mode;
 };
 
-static inline void lvds_writel(struct rockchip_lvds *lvds, u32 offset, u32 val)
-{
-	writel_relaxed(val, lvds->regs + offset);
-	if ((lvds->output != DISPLAY_OUTPUT_LVDS) &&
-	    (lvds->soc_data->chip_type == RK3288))
-		writel_relaxed(val,
-			       lvds->regs + offset + RK3288_LVDS_CH1_OFFSET);
-}
-
 static inline int lvds_name_to_format(const char *s)
 {
 	if (!s)
@@ -127,9 +122,7 @@ static inline int lvds_name_to_output(const char *s)
 	if (!s)
 		return -EINVAL;
 
-	if (strncmp(s, "rgb", 3) == 0)
-		return DISPLAY_OUTPUT_RGB;
-	else if (strncmp(s, "lvds", 4) == 0)
+	if (strncmp(s, "lvds", 4) == 0)
 		return DISPLAY_OUTPUT_LVDS;
 	else if (strncmp(s, "duallvds", 8) == 0)
 		return DISPLAY_OUTPUT_DUAL_LVDS;
@@ -137,101 +130,6 @@ static inline int lvds_name_to_output(const char *s)
 	return -EINVAL;
 }
 
-static int innov2_lvds_power_on(struct rockchip_lvds *lvds)
-{
-	u32 status;
-	int ret;
-
-	if (lvds->output == DISPLAY_OUTPUT_RGB) {
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG0,
-			    RK3288_LVDS_CH0_REG0_TTL_EN |
-			    RK3288_LVDS_CH0_REG0_LANECK_EN |
-			    RK3288_LVDS_CH0_REG0_LANE4_EN |
-			    RK3288_LVDS_CH0_REG0_LANE3_EN |
-			    RK3288_LVDS_CH0_REG0_LANE2_EN |
-			    RK3288_LVDS_CH0_REG0_LANE1_EN |
-			    RK3288_LVDS_CH0_REG0_LANE0_EN);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG2,
-			    RK3288_LVDS_PLL_FBDIV_REG2(0x46));
-
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG3,
-			    RK3288_LVDS_PLL_FBDIV_REG3(0x46));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG4,
-			    RK3288_LVDS_CH0_REG4_LANECK_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE4_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE3_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE2_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE1_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE0_TTL_MODE);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG5,
-			    RK3288_LVDS_CH0_REG5_LANECK_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE4_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE3_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE2_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE1_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE0_TTL_DATA);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REGD,
-			    RK3288_LVDS_PLL_PREDIV_REGD(0x0a));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG20,
-			    RK3288_LVDS_CH0_REG20_LSB);
-	} else {
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG0,
-			    RK3288_LVDS_CH0_REG0_LVDS_EN |
-			    RK3288_LVDS_CH0_REG0_LANECK_EN |
-			    RK3288_LVDS_CH0_REG0_LANE4_EN |
-			    RK3288_LVDS_CH0_REG0_LANE3_EN |
-			    RK3288_LVDS_CH0_REG0_LANE2_EN |
-			    RK3288_LVDS_CH0_REG0_LANE1_EN |
-			    RK3288_LVDS_CH0_REG0_LANE0_EN);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG1,
-			    RK3288_LVDS_CH0_REG1_LANECK_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE4_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE3_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE2_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE1_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE0_BIAS);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG2,
-			    RK3288_LVDS_CH0_REG2_RESERVE_ON |
-			    RK3288_LVDS_CH0_REG2_LANECK_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE4_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE3_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE2_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE1_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE0_LVDS_MODE |
-			    RK3288_LVDS_PLL_FBDIV_REG2(0x46));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG3,
-			    RK3288_LVDS_PLL_FBDIV_REG3(0x46));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG4, 0x00);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG5, 0x00);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REGD,
-			    RK3288_LVDS_PLL_PREDIV_REGD(0x0a));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG20,
-			    RK3288_LVDS_CH0_REG20_LSB);
-	}
-
-	writel(RK3288_LVDS_CFG_REGC_PLL_ENABLE,
-	       lvds->regs + RK3288_LVDS_CFG_REGC);
-	ret = readl_poll_timeout(lvds->regs + RK3288_LVDS_CH0_REGF, status,
-				 status & RK3288_LVDS_CH0_PLL_LOCK, 500, 10000);
-	if (ret) {
-		dev_err(lvds->dev, "PLL is not lock\n");
-		return ret;
-	}
-
-	writel(RK3288_LVDS_CFG_REG21_TX_ENABLE,
-	       lvds->regs + RK3288_LVDS_CFG_REG21);
-
-	return 0;
-}
-
-static void innov2_lvds_power_off(struct rockchip_lvds *lvds)
-{
-	writel(RK3288_LVDS_CFG_REG21_TX_DISABLE,
-	       lvds->regs + RK3288_LVDS_CFG_REG21);
-	writel(RK3288_LVDS_CFG_REGC_PLL_DISABLE,
-	       lvds->regs + RK3288_LVDS_CFG_REGC);
-}
-
 static enum drm_connector_status
 rockchip_lvds_connector_detect(struct drm_connector *connector, bool force)
 {
@@ -304,25 +202,14 @@ rockchip_lvds_encoder_atomic_check(struct drm_encoder *encoder,
 	struct rockchip_crtc_state *s = to_rockchip_crtc_state(crtc_state);
 	struct drm_connector *connector = conn_state->connector;
 	struct drm_display_info *info = &connector->display_info;
-	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
-
-	if (lvds->output == DISPLAY_OUTPUT_RGB)
-		s->output_type = DRM_MODE_CONNECTOR_DPI;
-	else
-		s->output_type = DRM_MODE_CONNECTOR_LVDS;
 
 	if (info->num_bus_formats)
 		s->bus_format = info->bus_formats[0];
 	else
 		s->bus_format = MEDIA_BUS_FMT_RGB888_1X24;
-	if ((s->bus_format == MEDIA_BUS_FMT_RGB666_1X18) &&
-	    (lvds->output == DISPLAY_OUTPUT_RGB))
-		s->output_mode = ROCKCHIP_OUT_MODE_P666;
-	else if ((s->bus_format == MEDIA_BUS_FMT_RGB565_1X16) &&
-		 (lvds->output == DISPLAY_OUTPUT_RGB))
-		s->output_mode = ROCKCHIP_OUT_MODE_P565;
-	else
-		s->output_mode = ROCKCHIP_OUT_MODE_P888;
+
+	s->output_mode = ROCKCHIP_OUT_MODE_P888;
+	s->output_type = DRM_MODE_CONNECTOR_LVDS;
 	s->tv_state = &conn_state->tv;
 	s->eotf = TRADITIONAL_GAMMA_SDR;
 	s->color_space = V4L2_COLORSPACE_DEFAULT;
@@ -335,25 +222,20 @@ static void rockchip_lvds_encoder_enable(struct drm_encoder *encoder)
 	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
 	int ret;
 
-	clk_prepare_enable(lvds->pclk);
-	pm_runtime_get_sync(lvds->dev);
-
 	if (lvds->panel)
 		drm_panel_prepare(lvds->panel);
 
-	if (lvds->soc_data->power_on)
-		lvds->soc_data->power_on(lvds);
-
-	if (lvds->phy) {
-		ret = phy_set_mode(lvds->phy, PHY_MODE_VIDEO_LVDS);
-		if (ret) {
-			dev_err(lvds->dev, "failed to set phy mode: %d\n", ret);
-			return;
-		}
+	if (lvds->funcs->enable)
+		lvds->funcs->enable(lvds);
 
-		phy_power_on(lvds->phy);
+	ret = phy_set_mode(lvds->phy, PHY_MODE_VIDEO_LVDS);
+	if (ret) {
+		dev_err(lvds->dev, "failed to set phy mode: %d\n", ret);
+		return;
 	}
 
+	phy_power_on(lvds->phy);
+
 	if (lvds->panel)
 		drm_panel_enable(lvds->panel);
 }
@@ -365,30 +247,13 @@ static void rockchip_lvds_encoder_disable(struct drm_encoder *encoder)
 	if (lvds->panel)
 		drm_panel_disable(lvds->panel);
 
-	if (lvds->phy)
-		phy_power_off(lvds->phy);
+	phy_power_off(lvds->phy);
 
-	if (lvds->soc_data->power_off)
-		lvds->soc_data->power_off(lvds);
+	if (lvds->funcs->disable)
+		lvds->funcs->disable(lvds);
 
 	if (lvds->panel)
 		drm_panel_unprepare(lvds->panel);
-
-	pm_runtime_put(lvds->dev);
-	clk_disable_unprepare(lvds->pclk);
-}
-
-static int rockchip_lvds_encoder_loader_protect(struct drm_encoder *encoder,
-						bool on)
-{
-	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
-
-	if (on)
-		pm_runtime_get_sync(lvds->dev);
-	else
-		pm_runtime_put(lvds->dev);
-
-	return 0;
 }
 
 static const
@@ -397,7 +262,6 @@ struct drm_encoder_helper_funcs rockchip_lvds_encoder_helper_funcs = {
 	.enable = rockchip_lvds_encoder_enable,
 	.disable = rockchip_lvds_encoder_disable,
 	.atomic_check = rockchip_lvds_encoder_atomic_check,
-	.loader_protect = rockchip_lvds_encoder_loader_protect,
 };
 
 static void rockchip_lvds_encoder_destroy(struct drm_encoder *encoder)
@@ -458,8 +322,7 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 	}
 
 	if (of_property_read_string(remote, "rockchip,output", &name))
-		/* default set it as output rgb */
-		lvds->output = DISPLAY_OUTPUT_RGB;
+		lvds->output = DISPLAY_OUTPUT_LVDS;
 	else
 		lvds->output = lvds_name_to_output(name);
 
@@ -502,9 +365,7 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 							     dev->of_node);
 
 	ret = drm_encoder_init(drm_dev, encoder, &rockchip_lvds_encoder_funcs,
-			       (lvds->output == DISPLAY_OUTPUT_RGB) ?
-			       DRM_MODE_ENCODER_DPI : DRM_MODE_ENCODER_LVDS,
-			       NULL);
+			       DRM_MODE_ENCODER_LVDS, NULL);
 	if (ret < 0) {
 		DRM_ERROR("failed to initialize encoder with drm\n");
 		goto err_put_remote;
@@ -517,8 +378,6 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 		connector = &lvds->connector;
 		ret = drm_connector_init(drm_dev, connector,
 					 &rockchip_lvds_connector_funcs,
-					 (lvds->output == DISPLAY_OUTPUT_RGB) ?
-					 DRM_MODE_CONNECTOR_DPI :
 					 DRM_MODE_CONNECTOR_LVDS);
 		if (ret < 0) {
 			DRM_ERROR("failed to initialize connector with drm\n");
@@ -550,7 +409,6 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 		encoder->bridge = lvds->bridge;
 	}
 
-	pm_runtime_enable(dev);
 	of_node_put(remote);
 	of_node_put(port);
 
@@ -577,8 +435,6 @@ static void rockchip_lvds_unbind(struct device *dev, struct device *master,
 
 	drm_connector_cleanup(&lvds->connector);
 	drm_encoder_cleanup(&lvds->encoder);
-
-	pm_runtime_disable(dev);
 }
 
 static const struct component_ops rockchip_lvds_component_ops = {
@@ -590,7 +446,6 @@ static int rockchip_lvds_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct rockchip_lvds *lvds;
-	struct resource *res;
 	int ret;
 
 	lvds = devm_kzalloc(dev, sizeof(*lvds), GFP_KERNEL);
@@ -598,47 +453,21 @@ static int rockchip_lvds_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	lvds->dev = dev;
-	lvds->soc_data = of_device_get_match_data(dev);
+	lvds->funcs = of_device_get_match_data(dev);
 	platform_set_drvdata(pdev, lvds);
 
-	lvds->phy = devm_phy_optional_get(dev, "phy");
+	lvds->phy = devm_phy_get(dev, "phy");
 	if (IS_ERR(lvds->phy)) {
 		ret = PTR_ERR(lvds->phy);
 		dev_err(dev, "failed to get phy: %d\n", ret);
 		return ret;
 	}
 
-	if (lvds->phy) {
-		lvds->grf = syscon_node_to_regmap(dev->parent->of_node);
-		if (IS_ERR(lvds->grf)) {
-			ret = PTR_ERR(lvds->grf);
-			dev_err(dev, "Unable to get grf: %d\n", ret);
-			return ret;
-		}
-	} else {
-		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-		lvds->regs = devm_ioremap_resource(dev, res);
-		if (IS_ERR(lvds->regs))
-			return PTR_ERR(lvds->regs);
-
-		lvds->pclk = devm_clk_get(dev, "pclk_lvds");
-		if (IS_ERR(lvds->pclk)) {
-			dev_err(dev, "could not get pclk_lvds\n");
-			return PTR_ERR(lvds->pclk);
-		}
-
-		lvds->grf = syscon_regmap_lookup_by_phandle(dev->of_node,
-							    "rockchip,grf");
-		if (IS_ERR(lvds->grf)) {
-			dev_err(dev, "missing rockchip,grf property\n");
-			return PTR_ERR(lvds->grf);
-		}
-
-		if (lvds->soc_data->probe) {
-			ret = lvds->soc_data->probe(lvds);
-			if (ret)
-				return ret;
-		}
+	lvds->grf = syscon_node_to_regmap(dev->parent->of_node);
+	if (IS_ERR(lvds->grf)) {
+		ret = PTR_ERR(lvds->grf);
+		dev_err(dev, "Unable to get grf: %d\n", ret);
+		return ret;
 	}
 
 	return component_add(dev, &rockchip_lvds_component_ops);
@@ -651,7 +480,7 @@ static int rockchip_lvds_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static int px30_lvds_power_on(struct rockchip_lvds *lvds)
+static void px30_lvds_enable(struct rockchip_lvds *lvds)
 {
 	int pipe = drm_of_encoder_active_endpoint_id(lvds->dev->of_node,
 						     &lvds->encoder);
@@ -660,119 +489,113 @@ static int px30_lvds_power_on(struct rockchip_lvds *lvds)
 		     PX30_LVDS_SELECT(lvds->format) |
 		     PX30_LVDS_MODE_EN(1) | PX30_LVDS_MSBSEL(1) |
 		     PX30_LVDS_P2S_EN(1) | PX30_LVDS_VOP_SEL(pipe));
-
-	return 0;
 }
 
-static void px30_lvds_power_off(struct rockchip_lvds *lvds)
+static void px30_lvds_disable(struct rockchip_lvds *lvds)
 {
 	regmap_write(lvds->grf, PX30_GRF_PD_VO_CON1,
 		     PX30_LVDS_MODE_EN(0) | PX30_LVDS_P2S_EN(0));
 }
 
-static const struct rockchip_lvds_soc_data px30_lvds_soc_data = {
-	.chip_type = PX30,
-	.power_on = px30_lvds_power_on,
-	.power_off = px30_lvds_power_off,
+static const struct rockchip_lvds_funcs px30_lvds_funcs = {
+	.enable = px30_lvds_enable,
+	.disable = px30_lvds_disable,
 };
 
-static int rk3126_lvds_power_on(struct rockchip_lvds *lvds)
+static void rk3126_lvds_enable(struct rockchip_lvds *lvds)
 {
 	regmap_write(lvds->grf, RK3126_GRF_LVDS_CON0,
 		     RK3126_LVDS_P2S_EN(1) | RK3126_LVDS_MODE_EN(1) |
 		     RK3126_LVDS_MSBSEL(1) | RK3126_LVDS_SELECT(lvds->format));
-
-	return 0;
 }
 
-static void rk3126_lvds_power_off(struct rockchip_lvds *lvds)
+static void rk3126_lvds_disable(struct rockchip_lvds *lvds)
 {
 	regmap_write(lvds->grf, RK3126_GRF_LVDS_CON0,
 		     RK3126_LVDS_P2S_EN(0) | RK3126_LVDS_MODE_EN(0));
 }
 
-static const struct rockchip_lvds_soc_data rk3126_lvds_soc_data = {
-	.chip_type = RK3126,
-	.power_on = rk3126_lvds_power_on,
-	.power_off = rk3126_lvds_power_off,
+static const struct rockchip_lvds_funcs rk3126_lvds_funcs = {
+	.enable = rk3126_lvds_enable,
+	.disable = rk3126_lvds_disable,
 };
 
-static int rk3288_lvds_power_on(struct rockchip_lvds *lvds)
+static void rk3288_lvds_enable(struct rockchip_lvds *lvds)
 {
 	struct drm_display_mode *mode = &lvds->mode;
-	u32 h_bp = mode->htotal - mode->hsync_start;
-	u8 pin_hsync = (mode->flags & DRM_MODE_FLAG_PHSYNC) ? 1 : 0;
-	u8 pin_dclk = (mode->flags & DRM_MODE_FLAG_PCSYNC) ? 1 : 0;
-	u32 val;
 	int pipe;
+	bool dual_channel;
+	u32 val;
+
+	if (lvds->output == DISPLAY_OUTPUT_DUAL_LVDS)
+		dual_channel = true;
+	else
+		dual_channel = false;
 
 	pipe = drm_of_encoder_active_endpoint_id(lvds->dev->of_node,
 						 &lvds->encoder);
-	if (pipe)
-		val = RK3288_LVDS_SOC_CON6_SEL_VOP_LIT |
-		      (RK3288_LVDS_SOC_CON6_SEL_VOP_LIT << 16);
-	else
-		val = RK3288_LVDS_SOC_CON6_SEL_VOP_LIT << 16;
-	regmap_write(lvds->grf, RK3288_GRF_SOC_CON6, val);
+	regmap_write(lvds->grf, RK3288_GRF_SOC_CON6,
+		     RK3288_LVDS_LCDC_SEL(pipe));
 
-	val = lvds->format;
-	if (lvds->output == DISPLAY_OUTPUT_DUAL_LVDS)
-		val |= LVDS_DUAL | LVDS_CH0_EN | LVDS_CH1_EN;
-	else if (lvds->output == DISPLAY_OUTPUT_LVDS)
-		val |= LVDS_CH0_EN;
-	else if (lvds->output == DISPLAY_OUTPUT_RGB)
-		val |= LVDS_TTL_EN | LVDS_CH0_EN | LVDS_CH1_EN;
+	val = RK3288_LVDS_PWRDWN(0) | RK3288_LVDS_CON_CLKINV(0) |
+	      RK3288_LVDS_CON_CHASEL(dual_channel) |
+	      RK3288_LVDS_CON_SELECT(lvds->format);
 
-	if (h_bp & 0x01)
-		val |= LVDS_START_PHASE_RST_1;
+	if (dual_channel) {
+		u32 h_bp = mode->htotal - mode->hsync_start;
+
+		val |= RK3288_LVDS_CON_ENABLE_2(1) |
+		       RK3288_LVDS_CON_ENABLE_1(1);
+
+		if (h_bp % 2)
+			val |= RK3288_LVDS_CON_STARTPHASE(1);
+		else
+			val |= RK3288_LVDS_CON_STARTPHASE(0);
+
+	} else {
+		val |= RK3288_LVDS_CON_ENABLE_2(0) |
+		       RK3288_LVDS_CON_ENABLE_1(1);
+	}
 
-	val |= (pin_dclk << 8) | (pin_hsync << 9);
-	val |= (0xffff << 16);
 	regmap_write(lvds->grf, RK3288_GRF_SOC_CON7, val);
 
-	return innov2_lvds_power_on(lvds);
+	phy_set_bus_width(lvds->phy, dual_channel ? 2 : 1);
 }
 
-static void rk3288_lvds_power_off(struct rockchip_lvds *lvds)
+static void rk3288_lvds_disable(struct rockchip_lvds *lvds)
 {
-	regmap_write(lvds->grf, RK3288_GRF_SOC_CON7, 0xffff8000);
-
-	innov2_lvds_power_off(lvds);
+	regmap_write(lvds->grf, RK3288_GRF_SOC_CON7, RK3288_LVDS_PWRDWN(1));
 }
 
-static const struct rockchip_lvds_soc_data rk3288_lvds_soc_data = {
-	.chip_type = RK3288,
-	.power_on = rk3288_lvds_power_on,
-	.power_off = rk3288_lvds_power_off,
+static const struct rockchip_lvds_funcs rk3288_lvds_funcs = {
+	.enable = rk3288_lvds_enable,
+	.disable = rk3288_lvds_disable,
 };
 
-static int rk3368_lvds_power_on(struct rockchip_lvds *lvds)
+static void rk3368_lvds_enable(struct rockchip_lvds *lvds)
 {
 	regmap_write(lvds->grf, RK3368_GRF_SOC_CON7,
 		     RK3368_LVDS_SELECT(lvds->format) |
 		     RK3368_LVDS_MODE_EN(1) | RK3368_LVDS_MSBSEL(1) |
 		     RK3368_LVDS_P2S_EN(1));
-
-	return 0;
 }
 
-static void rk3368_lvds_power_off(struct rockchip_lvds *lvds)
+static void rk3368_lvds_disable(struct rockchip_lvds *lvds)
 {
 	regmap_write(lvds->grf, RK3368_GRF_SOC_CON7,
 		     RK3368_LVDS_MODE_EN(0) | RK3368_LVDS_P2S_EN(0));
 }
 
-static const struct rockchip_lvds_soc_data rk3368_lvds_soc_data = {
-	.chip_type = RK3368,
-	.power_on = rk3368_lvds_power_on,
-	.power_off = rk3368_lvds_power_off,
+static const struct rockchip_lvds_funcs rk3368_lvds_funcs = {
+	.enable = rk3368_lvds_enable,
+	.disable = rk3368_lvds_disable,
 };
 
 static const struct of_device_id rockchip_lvds_dt_ids[] = {
-	{ .compatible = "rockchip,px30-lvds", .data = &px30_lvds_soc_data },
-	{ .compatible = "rockchip,rk3126-lvds", .data = &rk3126_lvds_soc_data },
-	{ .compatible = "rockchip,rk3288-lvds", .data = &rk3288_lvds_soc_data },
-	{ .compatible = "rockchip,rk3368-lvds", .data = &rk3368_lvds_soc_data },
+	{ .compatible = "rockchip,px30-lvds", .data = &px30_lvds_funcs },
+	{ .compatible = "rockchip,rk3126-lvds", .data = &rk3126_lvds_funcs },
+	{ .compatible = "rockchip,rk3288-lvds", .data = &rk3288_lvds_funcs },
+	{ .compatible = "rockchip,rk3368-lvds", .data = &rk3368_lvds_funcs },
 	{}
 };
 MODULE_DEVICE_TABLE(of, rockchip_lvds_dt_ids);
diff --git a/drivers/gpu/drm/rockchip/rockchip_lvds.h b/drivers/gpu/drm/rockchip/rockchip_lvds.h
index 1541669a56bd..71ac8aeec090 100644
--- a/drivers/gpu/drm/rockchip/rockchip_lvds.h
+++ b/drivers/gpu/drm/rockchip/rockchip_lvds.h
@@ -17,96 +17,6 @@
 #ifndef _ROCKCHIP_LVDS_
 #define _ROCKCHIP_LVDS_
 
-#define RK3288_LVDS_CH0_REG0			0x00
-#define RK3288_LVDS_CH0_REG0_LVDS_EN		BIT(7)
-#define RK3288_LVDS_CH0_REG0_TTL_EN		BIT(6)
-#define RK3288_LVDS_CH0_REG0_LANECK_EN		BIT(5)
-#define RK3288_LVDS_CH0_REG0_LANE4_EN		BIT(4)
-#define RK3288_LVDS_CH0_REG0_LANE3_EN		BIT(3)
-#define RK3288_LVDS_CH0_REG0_LANE2_EN		BIT(2)
-#define RK3288_LVDS_CH0_REG0_LANE1_EN		BIT(1)
-#define RK3288_LVDS_CH0_REG0_LANE0_EN		BIT(0)
-
-#define RK3288_LVDS_CH0_REG1			0x04
-#define RK3288_LVDS_CH0_REG1_LANECK_BIAS	BIT(5)
-#define RK3288_LVDS_CH0_REG1_LANE4_BIAS		BIT(4)
-#define RK3288_LVDS_CH0_REG1_LANE3_BIAS		BIT(3)
-#define RK3288_LVDS_CH0_REG1_LANE2_BIAS		BIT(2)
-#define RK3288_LVDS_CH0_REG1_LANE1_BIAS		BIT(1)
-#define RK3288_LVDS_CH0_REG1_LANE0_BIAS		BIT(0)
-
-#define RK3288_LVDS_CH0_REG2			0x08
-#define RK3288_LVDS_CH0_REG2_RESERVE_ON		BIT(7)
-#define RK3288_LVDS_CH0_REG2_LANECK_LVDS_MODE	BIT(6)
-#define RK3288_LVDS_CH0_REG2_LANE4_LVDS_MODE	BIT(5)
-#define RK3288_LVDS_CH0_REG2_LANE3_LVDS_MODE	BIT(4)
-#define RK3288_LVDS_CH0_REG2_LANE2_LVDS_MODE	BIT(3)
-#define RK3288_LVDS_CH0_REG2_LANE1_LVDS_MODE	BIT(2)
-#define RK3288_LVDS_CH0_REG2_LANE0_LVDS_MODE	BIT(1)
-#define RK3288_LVDS_CH0_REG2_PLL_FBDIV8		BIT(0)
-
-#define RK3288_LVDS_CH0_REG3			0x0c
-#define RK3288_LVDS_CH0_REG3_PLL_FBDIV_MASK	0xff
-
-#define RK3288_LVDS_CH0_REG4			0x10
-#define RK3288_LVDS_CH0_REG4_LANECK_TTL_MODE	BIT(5)
-#define RK3288_LVDS_CH0_REG4_LANE4_TTL_MODE	BIT(4)
-#define RK3288_LVDS_CH0_REG4_LANE3_TTL_MODE	BIT(3)
-#define RK3288_LVDS_CH0_REG4_LANE2_TTL_MODE	BIT(2)
-#define RK3288_LVDS_CH0_REG4_LANE1_TTL_MODE	BIT(1)
-#define RK3288_LVDS_CH0_REG4_LANE0_TTL_MODE	BIT(0)
-
-#define RK3288_LVDS_CH0_REG5			0x14
-#define RK3288_LVDS_CH0_REG5_LANECK_TTL_DATA	BIT(5)
-#define RK3288_LVDS_CH0_REG5_LANE4_TTL_DATA	BIT(4)
-#define RK3288_LVDS_CH0_REG5_LANE3_TTL_DATA	BIT(3)
-#define RK3288_LVDS_CH0_REG5_LANE2_TTL_DATA	BIT(2)
-#define RK3288_LVDS_CH0_REG5_LANE1_TTL_DATA	BIT(1)
-#define RK3288_LVDS_CH0_REG5_LANE0_TTL_DATA	BIT(0)
-
-#define RK3288_LVDS_CFG_REGC			0x30
-#define RK3288_LVDS_CFG_REGC_PLL_ENABLE		0x00
-#define RK3288_LVDS_CFG_REGC_PLL_DISABLE	0xff
-
-#define RK3288_LVDS_CH0_REGD			0x34
-#define RK3288_LVDS_CH0_REGD_PLL_PREDIV_MASK	0x1f
-
-#define RK3288_LVDS_CH0_REGF			0x3c
-#define RK3288_LVDS_CH0_PLL_LOCK		BIT(1)
-
-#define RK3288_LVDS_CH0_REG20			0x80
-#define RK3288_LVDS_CH0_REG20_MSB		0x45
-#define RK3288_LVDS_CH0_REG20_LSB		0x44
-
-#define RK3288_LVDS_CFG_REG21			0x84
-#define RK3288_LVDS_CFG_REG21_TX_ENABLE		0x92
-#define RK3288_LVDS_CFG_REG21_TX_DISABLE	0x00
-#define RK3288_LVDS_CH1_OFFSET			0x100
-
-/* fbdiv value is split over 2 registers, with bit8 in reg2 */
-#define RK3288_LVDS_PLL_FBDIV_REG2(_fbd) \
-		(_fbd & BIT(8) ? RK3288_LVDS_CH0_REG2_PLL_FBDIV8 : 0)
-#define RK3288_LVDS_PLL_FBDIV_REG3(_fbd) \
-		(_fbd & RK3288_LVDS_CH0_REG3_PLL_FBDIV_MASK)
-#define RK3288_LVDS_PLL_PREDIV_REGD(_pd) \
-		(_pd & RK3288_LVDS_CH0_REGD_PLL_PREDIV_MASK)
-
-#define RK3288_GRF_SOC_CON6		0x025c
-#define RK3288_GRF_SOC_CON7		0x0260
-
-#define RK3288_LVDS_SOC_CON6_SEL_VOP_LIT	BIT(3)
-
-#define LVDS_FMT_MASK				(0x07 << 16)
-#define LVDS_MSB				BIT(3)
-#define LVDS_DUAL				BIT(4)
-#define LVDS_FMT_1				BIT(5)
-#define LVDS_TTL_EN				BIT(6)
-#define LVDS_START_PHASE_RST_1			BIT(7)
-#define LVDS_DCLK_INV				BIT(8)
-#define LVDS_CH0_EN				BIT(11)
-#define LVDS_CH1_EN				BIT(12)
-#define LVDS_PWRDN				BIT(15)
-
 #define LVDS_24BIT				(0 << 1)
 #define LVDS_18BIT				(1 << 1)
 #define LVDS_FORMAT_VESA			(0 << 0)
-- 
2.35.3

