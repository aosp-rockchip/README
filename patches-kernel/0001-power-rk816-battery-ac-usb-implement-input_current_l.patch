From 393f834ac6239680501ee5c75d207e4c1bc21a24 Mon Sep 17 00:00:00 2001
From: Joseph Chen <chenjh@rock-chips.com>
Date: Tue, 6 Nov 2018 16:57:47 +0800
Subject: [PATCH] power: rk816-battery: ac/usb implement "input_current_limit"
 sysfs node

store 0 to disable charger input current supply, otherwise
enable charger input current supply

Change-Id: Iabf61d3c8e6469cb5d6466677e06b73c6af37bcb
Signed-off-by: Joseph Chen <chenjh@rock-chips.com>
---
 drivers/power/rk816_battery.c | 94 +++++++++++++++++++++++++++++++++++
 drivers/power/rk816_battery.h |  3 ++
 2 files changed, 97 insertions(+)

diff --git a/drivers/power/rk816_battery.c b/drivers/power/rk816_battery.c
index defcc8a443f5..0832ea3eeaf8 100644
--- a/drivers/power/rk816_battery.c
+++ b/drivers/power/rk816_battery.c
@@ -488,6 +488,32 @@ static struct device_attribute rk816_bat_attr[] = {
 	__ATTR(bat, 0664, NULL, bat_info_store),
 };
 
+static void rk816_bat_enable_input_current(struct rk816_battery *di)
+{
+	u8 buf;
+
+	buf = rk816_bat_read(di, RK816_BAT_CTRL_REG);
+	buf |= USB_SYS_EN;
+	rk816_bat_write(di, RK816_BAT_CTRL_REG, buf);
+}
+
+static void rk816_bat_disable_input_current(struct rk816_battery *di)
+{
+	u8 buf;
+
+	buf = rk816_bat_read(di, RK816_BAT_CTRL_REG);
+	buf &= ~USB_SYS_EN;
+	rk816_bat_write(di, RK816_BAT_CTRL_REG, buf);
+}
+
+static int rk816_bat_is_input_enabled(struct rk816_battery *di)
+{
+	u8 buf;
+
+	buf = rk816_bat_read(di, RK816_BAT_CTRL_REG);
+	return !!(buf & USB_SYS_EN);
+}
+
 static void rk816_bat_enable_gauge(struct rk816_battery *di)
 {
 	u8 buf;
@@ -1060,6 +1086,46 @@ static enum power_supply_property rk816_bat_props[] = {
 	POWER_SUPPLY_PROP_CHARGE_FULL,
 };
 
+static int rk816_bat_ac_set_property(struct power_supply *psy,
+				     enum power_supply_property psp,
+				     const union power_supply_propval *val)
+{
+	struct rk816_battery *di = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		if (val->intval)
+			rk816_bat_enable_input_current(di);
+		else
+			rk816_bat_disable_input_current(di);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int rk816_bat_usb_set_property(struct power_supply *psy,
+				      enum power_supply_property psp,
+				      const union power_supply_propval *val)
+{
+	struct rk816_battery *di = power_supply_get_drvdata(psy);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		if (val->intval)
+			rk816_bat_enable_input_current(di);
+		else
+			rk816_bat_disable_input_current(di);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 static int rk816_battery_get_property(struct power_supply *psy,
 				      enum power_supply_property psp,
 				      union power_supply_propval *val)
@@ -1095,6 +1161,8 @@ static int rk816_battery_get_property(struct power_supply *psy,
 		val->intval = di->prop_status;
 		if (di->pdata->bat_mode == MODE_VIRTUAL)
 			val->intval = VIRTUAL_STATUS;
+		if (!rk816_bat_is_input_enabled(di))
+			val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
 		break;
 	case POWER_SUPPLY_PROP_TEMP:
 		val->intval = di->temperature;
@@ -1118,12 +1186,14 @@ static enum power_supply_property rk816_ac_props[] = {
 	POWER_SUPPLY_PROP_ONLINE,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_CURRENT_MAX,
+	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
 };
 
 static enum power_supply_property rk816_usb_props[] = {
 	POWER_SUPPLY_PROP_ONLINE,
 	POWER_SUPPLY_PROP_VOLTAGE_MAX,
 	POWER_SUPPLY_PROP_CURRENT_MAX,
+	POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT,
 };
 
 static int rk816_bat_ac_get_property(struct power_supply *psy,
@@ -1148,6 +1218,9 @@ static int rk816_bat_ac_get_property(struct power_supply *psy,
 	case POWER_SUPPLY_PROP_CURRENT_MAX:
 		val->intval = di->current_max;
 		break;
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		val->intval = rk816_bat_is_input_enabled(di);
+		break;
 	default:
 		ret = -EINVAL;
 		break;
@@ -1178,6 +1251,9 @@ static int rk816_bat_usb_get_property(struct power_supply *psy,
 	case POWER_SUPPLY_PROP_CURRENT_MAX:
 		val->intval = di->current_max;
 		break;
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		val->intval = rk816_bat_is_input_enabled(di);
+		break;
 	default:
 		ret = -EINVAL;
 		break;
@@ -1186,6 +1262,19 @@ static int rk816_bat_usb_get_property(struct power_supply *psy,
 	return ret;
 }
 
+static int rk816_bat_writable_property(struct power_supply *psy,
+				       enum power_supply_property psp)
+{
+	switch (psp) {
+	case POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT:
+		return 1;
+	default:
+		return 0;
+	}
+
+	return 0;
+}
+
 static const struct power_supply_desc rk816_bat_desc = {
 	.name		= "battery",
 	.type		= POWER_SUPPLY_TYPE_BATTERY,
@@ -1200,6 +1289,8 @@ static const struct power_supply_desc rk816_ac_desc = {
 	.properties = rk816_ac_props,
 	.num_properties = ARRAY_SIZE(rk816_ac_props),
 	.get_property = rk816_bat_ac_get_property,
+	.set_property = rk816_bat_ac_set_property,
+	.property_is_writeable = rk816_bat_writable_property,
 };
 
 static const struct power_supply_desc rk816_usb_desc = {
@@ -1208,6 +1299,8 @@ static const struct power_supply_desc rk816_usb_desc = {
 	.properties = rk816_usb_props,
 	.num_properties = ARRAY_SIZE(rk816_usb_props),
 	.get_property = rk816_bat_usb_get_property,
+	.set_property = rk816_bat_usb_set_property,
+	.property_is_writeable = rk816_bat_writable_property,
 };
 
 static int rk816_bat_init_power_supply(struct rk816_battery *di)
@@ -4171,6 +4264,7 @@ static void rk816_bat_init_ts_detect(struct rk816_battery *di)
 
 static void rk816_bat_init_fg(struct rk816_battery *di)
 {
+	rk816_bat_enable_input_current(di);
 	rk816_bat_enable_gauge(di);
 	rk816_bat_init_voltage_kb(di);
 	rk816_bat_init_poffset(di);
diff --git a/drivers/power/rk816_battery.h b/drivers/power/rk816_battery.h
index 9c4349810b99..b2f7ca4430a2 100644
--- a/drivers/power/rk816_battery.h
+++ b/drivers/power/rk816_battery.h
@@ -60,6 +60,9 @@
 #define INPUT_CUR_MSK		(0x0f)
 #define FINISH_CUR_MSK		0xc0
 
+/* BAT_CTRL_REG */
+#define USB_SYS_EN		BIT(6)
+
 /* THERMAL_REG */
 #define FB_TEMP_MSK		0x0c
 #define HOTDIE_STS		BIT(1)
-- 
2.35.3

