From 0f32f17ff0667d9aaf4571883dad43b01d163fb4 Mon Sep 17 00:00:00 2001
From: Andy Yan <andy.yan@rock-chips.com>
Date: Sat, 26 Dec 2020 16:22:59 +0800
Subject: [PATCH] drm/rockchip: vop2: Add support for rk3566

Change-Id: I6b02237f42de611dc0d77c1f4318f4692eae1bc6
Signed-off-by: Andy Yan <andy.yan@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_drm_vop.h  |  6 ++-
 drivers/gpu/drm/rockchip/rockchip_drm_vop2.c | 42 ++++++++++++++------
 drivers/gpu/drm/rockchip/rockchip_vop2_reg.c | 23 +++++++++--
 drivers/gpu/drm/rockchip/rockchip_vop_reg.h  |  1 +
 4 files changed, 56 insertions(+), 16 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
index 76cb07cbaa66..b24bd2302fb3 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
@@ -41,6 +41,8 @@
 #define WIN_FEATURE_CLUSTER_MAIN	BIT(4)
 #define WIN_FEATURE_CLUSTER_SUB		BIT(5)
 
+#define VOP2_SOC_VARIANT		4
+
 enum bcsh_out_mode {
 	BCSH_OUT_MODE_BLACK,
 	BCSH_OUT_MODE_BLUE,
@@ -638,6 +640,7 @@ struct vop2_win_data {
 	const uint32_t *formats;
 	const uint64_t *format_modifiers;
 	const unsigned int supported_rotations;
+	uint32_t possible_crtcs[VOP2_SOC_VARIANT];
 
 	const struct vop2_win_regs *regs;
 	const struct vop2_win_regs **area;
@@ -671,7 +674,7 @@ struct vop2_wb_data {
 struct vop2_video_port_data {
 	char id;
 	uint32_t feature;
-	uint64_t soc_id;
+	uint64_t soc_id[VOP2_SOC_VARIANT];
 	struct vop_rect max_output;
 	const u8 pre_scan_max_dly[4];
 	const struct vop_intr *intr;
@@ -808,6 +811,7 @@ struct vop2_ctrl {
 	struct vop_reg bt656_yc_swap;
 	struct vop_reg gamma_port_sel;
 
+	struct vop_reg otp_en;
 	struct vop_reg reg_done_frm;
 	struct vop_reg cfg_done;
 };
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
index d618619f5c9d..0f2bf737b6c8 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
@@ -34,6 +34,7 @@
 #include <linux/delay.h>
 #include <linux/swab.h>
 #include <linux/sort.h>
+#include <linux/rockchip/cpu.h>
 #include <soc/rockchip/rockchip_dmc.h>
 #include <soc/rockchip/rockchip-system-status.h>
 #include <uapi/linux/videodev2.h>
@@ -294,6 +295,10 @@ struct vop2_win {
 	 * one win can only attach to one vp at the one time.
 	 */
 	uint8_t vp_mask;
+	/*
+	 * @possible_crtcs: which crtc/vp this win can attached to.
+	 */
+	uint32_t possible_crtcs;
 	uint8_t zpos;
 	uint32_t offset;
 	enum drm_plane_type type;
@@ -592,6 +597,11 @@ static inline void vop2_mask_write(struct vop2 *vop2, uint32_t offset,
 		writel(v, vop2->regs + offset);
 }
 
+static bool vop2_soc_is_rk3566(void)
+{
+	return soc_is_rk3566();
+}
+
 static inline const struct vop2_win_regs *vop2_get_win_regs(struct vop2_win *win,
 							    const struct vop_reg *reg)
 {
@@ -2132,6 +2142,9 @@ static void vop2_initial(struct drm_crtc *crtc)
 			return;
 		}
 
+		if (vop2_soc_is_rk3566())
+			VOP_CTRL_SET(vop2, otp_en, 1);
+
 		memcpy(vop2->regsbak, vop2->regs, vop2->len);
 
 		VOP_MODULE_SET(vop2, wb, axi_yrgb_id, 0xd);
@@ -2157,7 +2170,6 @@ static void vop2_initial(struct drm_crtc *crtc)
 		VOP_CTRL_SET(vop2, if_ctrl_cfg_done_imd, 1);
 
 		vop2_layer_map_initial(vop2, current_vp_id);
-
 		vop2_axi_irqs_enable(vop2);
 
 		vop2->is_enabled = true;
@@ -5085,7 +5097,7 @@ static int vop2_plane_create_feature_property(struct vop2 *vop2, struct vop2_win
 	return 0;
 }
 
-static int vop2_plane_init(struct vop2 *vop2, struct vop2_win *win, unsigned long possible_crtcs)
+static int vop2_plane_init(struct vop2 *vop2, struct vop2_win *win)
 {
 	struct rockchip_drm_private *private = vop2->drm_dev->dev_private;
 	unsigned int blend_caps = BIT(DRM_MODE_BLEND_PIXEL_NONE) | BIT(DRM_MODE_BLEND_PREMULTI) |
@@ -5093,9 +5105,9 @@ static int vop2_plane_init(struct vop2 *vop2, struct vop2_win *win, unsigned lon
 	unsigned int max_width, max_height;
 	int ret;
 
-	ret = drm_universal_plane_init(vop2->drm_dev, &win->base, possible_crtcs, &vop2_plane_funcs,
-				       win->formats, win->nformats, win->format_modifiers,
-				       win->type, win->name);
+	ret = drm_universal_plane_init(vop2->drm_dev, &win->base, win->possible_crtcs,
+				       &vop2_plane_funcs, win->formats, win->nformats,
+				       win->format_modifiers, win->type, win->name);
 	if (ret) {
 		DRM_DEV_ERROR(vop2->dev, "failed to initialize plane %d\n", ret);
 		return ret;
@@ -5223,14 +5235,11 @@ static int vop2_create_crtc(struct vop2 *vop2)
 	struct vop2_win *win = NULL;
 	struct vop2_video_port *vp;
 	const struct vop2_video_port_data *vp_data;
-	uint32_t possible_crtcs;
+	uint64_t soc_id;
 	char dclk_name[9];
 	int i = 0, j = 0;
 	int ret = 0;
 
-	/* all planes can attach to any crtc */
-	possible_crtcs = (1 << vop2_data->nr_vps) - 1;
-
 	/*
 	 * Create primary plane for eache crtc first, since we need
 	 * to pass them to drm_crtc_init_with_planes, which sets the
@@ -5242,6 +5251,10 @@ static int vop2_create_crtc(struct vop2 *vop2)
 		vp->vop2 = vop2;
 		vp->id = vp_data->id;
 		vp->regs = vp_data->regs;
+		if (vop2_soc_is_rk3566())
+			soc_id = vp_data->soc_id[1];
+		else
+			soc_id = vp_data->soc_id[0];
 
 		snprintf(dclk_name, sizeof(dclk_name), "dclk_vp%d", vp->id);
 		vp->dclk = devm_clk_get(vop2->dev, dclk_name);
@@ -5266,7 +5279,7 @@ static int vop2_create_crtc(struct vop2 *vop2)
 			break;
 		}
 
-		if (vop2_plane_init(vop2, win, possible_crtcs)) {
+		if (vop2_plane_init(vop2, win)) {
 			DRM_DEV_ERROR(vop2->dev, "failed to init plane\n");
 			break;
 		}
@@ -5293,7 +5306,7 @@ static int vop2_create_crtc(struct vop2 *vop2)
 		init_completion(&vp->dsp_hold_completion);
 		init_completion(&vp->line_flag_completion);
 		rockchip_register_crtc_funcs(crtc, &private_crtc_funcs);
-		drm_object_attach_property(&crtc->base, vop2->soc_id_prop, vp_data->soc_id);
+		drm_object_attach_property(&crtc->base, vop2->soc_id_prop, soc_id);
 		drm_object_attach_property(&crtc->base, vop2->vp_id_prop, vp->id);
 		drm_object_attach_property(&crtc->base,
 					   drm_dev->mode_config.tv_left_margin_property, 100);
@@ -5324,7 +5337,7 @@ static int vop2_create_crtc(struct vop2 *vop2)
 		if (win->type != DRM_PLANE_TYPE_OVERLAY)
 			continue;
 
-		ret = vop2_plane_init(vop2, win, possible_crtcs);
+		ret = vop2_plane_init(vop2, win);
 		if (ret) {
 			DRM_DEV_ERROR(vop2->dev, "failed to init overlay\n");
 			break;
@@ -5388,6 +5401,10 @@ static int vop2_win_init(struct vop2 *vop2)
 		win->area_id = 0;
 		win->zpos = i;
 		win->vop2 = vop2;
+		if (vop2_soc_is_rk3566())
+			win->possible_crtcs = win_data->possible_crtcs[1];
+		else
+			win->possible_crtcs = win_data->possible_crtcs[0];
 
 		num_wins++;
 
@@ -5405,6 +5422,7 @@ static int vop2_win_init(struct vop2 *vop2)
 			area->formats = win->formats;
 			area->nformats = win->nformats;
 			area->format_modifiers = win->format_modifiers;
+			area->possible_crtcs = win->possible_crtcs;
 			area->max_upscale_factor = win_data->max_upscale_factor;
 			area->max_downscale_factor = win_data->max_downscale_factor;
 			area->supported_rotations = win_data->supported_rotations;
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c b/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
index 14e601249b2c..54d6a10dfa8b 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
+++ b/drivers/gpu/drm/rockchip/rockchip_vop2_reg.c
@@ -604,7 +604,7 @@ static const struct vop2_video_port_regs rk3568_vop_vp2_regs = {
 static const struct vop2_video_port_data rk3568_vop_video_ports[] = {
 	{
 	 .id = 0,
-	 .soc_id = 0x3568,
+	 .soc_id = { 0x3568, 0x3566 },
 	 .feature = VOP_FEATURE_OUTPUT_10BIT,
 	 .max_output = { 4096, 2304 },
 	 .pre_scan_max_dly = { 69, 53, 53, 42 },
@@ -614,7 +614,7 @@ static const struct vop2_video_port_data rk3568_vop_video_ports[] = {
 	},
 	{
 	 .id = 1,
-	 .soc_id = 0x3568,
+	 .soc_id = { 0x3568, 0x3566 },
 	 .max_output = { 2048, 1536 },
 	 .pre_scan_max_dly = { 40, 40, 40, 40 },
 	 .intr = &rk3568_vp1_intr,
@@ -622,7 +622,7 @@ static const struct vop2_video_port_data rk3568_vop_video_ports[] = {
 	},
 	{
 	 .id = 2,
-	 .soc_id = 0x3568,
+	 .soc_id = { 0x3568, 0x3566 },
 	 .max_output = { 1920, 1080 },
 	 .pre_scan_max_dly = { 40, 40, 40, 40 },
 	 .intr = &rk3568_vp2_intr,
@@ -974,6 +974,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
 	  .format_modifiers = format_modifiers_afbc,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x1 },
 	  .layer_sel_id = 0,
 	  .supported_rotations = DRM_MODE_ROTATE_90 | DRM_MODE_ROTATE_270 |
 				 DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y,
@@ -997,6 +999,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
 	  .format_modifiers = format_modifiers_afbc,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x1 },
 	  .supported_rotations = DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
@@ -1016,6 +1020,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
 	  .format_modifiers = format_modifiers_afbc,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x2 },
 	  .layer_sel_id = 1,
 	  .supported_rotations = DRM_MODE_ROTATE_90 | DRM_MODE_ROTATE_270 |
 				 DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y,
@@ -1038,6 +1044,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .formats = formats_win_full_10bit,
 	  .nformats = ARRAY_SIZE(formats_win_full_10bit),
 	  .format_modifiers = format_modifiers_afbc,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x2 },
 	  .base = 0x80,
 	  .supported_rotations = DRM_MODE_REFLECT_X | DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
@@ -1059,6 +1067,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .format_modifiers = format_modifiers,
 	  .base = 0x0,
 	  .layer_sel_id = 2,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x1 },
 	  .supported_rotations = DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
@@ -1081,6 +1091,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .format_modifiers = format_modifiers,
 	  .base = 0x200,
 	  .layer_sel_id = 6,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x2 },
 	  .supported_rotations = DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
@@ -1103,6 +1115,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .nformats = ARRAY_SIZE(formats_win_lite),
 	  .format_modifiers = format_modifiers,
 	  .layer_sel_id = 3,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x1 },
 	  .supported_rotations = DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
@@ -1125,6 +1139,8 @@ static const struct vop2_win_data rk3568_vop_win_data[] = {
 	  .format_modifiers = format_modifiers,
 	  .base = 0x600,
 	  .layer_sel_id = 7,
+	  /* RK3568, RK3566 */
+	  .possible_crtcs = { 0x7, 0x2 },
 	  .supported_rotations = DRM_MODE_REFLECT_Y,
 	  .hsu_filter_mode = VOP2_SCALE_UP_BIC,
 	  .hsd_filter_mode = VOP2_SCALE_DOWN_BIL,
@@ -1204,6 +1220,7 @@ static const struct vop2_ctrl rk3568_vop_ctrl = {
 	.win_dly[3] = VOP_REG(RK3568_SMART_DLY_NUM, 0xff, 8),
 	.win_dly[4] = VOP_REG(RK3568_SMART_DLY_NUM, 0xff, 16),
 	.win_dly[5] = VOP_REG(RK3568_SMART_DLY_NUM, 0xff, 24),
+	.otp_en = VOP_REG(RK3568_OTP_WIN_EN, 0x1, 0),
 };
 
 static const struct vop2_data rk3568_vop = {
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop_reg.h b/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
index 67b2bd224735..2c8d1d2e935c 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
+++ b/drivers/gpu/drm/rockchip/rockchip_vop_reg.h
@@ -1061,6 +1061,7 @@
 #define RK3568_WB_XSCAL_FACTOR			0x44
 #define RK3568_WB_YRGB_MST			0x48
 #define RK3568_WB_CBR_MST			0x4C
+#define RK3568_OTP_WIN_EN			0x050
 #define RK3568_LUT_PORT_SEL			0x058
 #define RK3568_SYS_STATUS0			0x060
 #define RK3568_VP0_LINE_FLAG			0x70
-- 
2.35.3

