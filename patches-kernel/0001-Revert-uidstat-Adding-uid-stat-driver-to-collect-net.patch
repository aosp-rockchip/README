From ea32bd9ebc4a04178c8ba357ad2178de244b2a96 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=BB=84=E6=B6=9B?= <huangtao@rock-chips.com>
Date: Sat, 30 Jul 2011 22:57:02 +0800
Subject: [PATCH] Revert "uidstat: Adding uid stat driver to collect network
 statistics."

This reverts commit ab6c8fc0decb0b39f8cff97d4889fef5c3a50aa7.

Conflicts:

	drivers/misc/Kconfig
---
 drivers/misc/Kconfig     |   4 -
 drivers/misc/Makefile    |   1 -
 drivers/misc/uid_stat.c  | 153 ---------------------------------------
 include/linux/uid_stat.h |  24 ------
 net/socket.c             |  18 +----
 5 files changed, 2 insertions(+), 198 deletions(-)
 delete mode 100644 drivers/misc/uid_stat.c
 delete mode 100644 include/linux/uid_stat.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index a185cf80a21a..d3d2329a4981 100755
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -250,10 +250,6 @@ config EP93XX_PWM
 	  To compile this driver as a module, choose M here: the module will
 	  be called ep93xx_pwm.
 
-config UID_STAT
-	bool "UID based statistics tracking exported to /proc/uid_stat"
-	default n
-
 config STE
 	bool "STE modem control driver"
 	default n
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 9789a9f979d0..c0e62d0d0c7a 100755
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -21,7 +21,6 @@ obj-$(CONFIG_SGI_GRU)		+= sgi-gru/
 obj-$(CONFIG_HP_ILO)		+= hpilo.o
 obj-$(CONFIG_ISL29003)		+= isl29003.o
 obj-$(CONFIG_EP93XX_PWM)	+= ep93xx_pwm.o
-obj-$(CONFIG_UID_STAT)		+= uid_stat.o
 obj-$(CONFIG_C2PORT)		+= c2port/
 obj-y				+= eeprom/
 obj-y				+= cb710/
diff --git a/drivers/misc/uid_stat.c b/drivers/misc/uid_stat.c
deleted file mode 100644
index 43a548bab7ac..000000000000
--- a/drivers/misc/uid_stat.c
+++ /dev/null
@@ -1,153 +0,0 @@
-/* drivers/misc/uid_stat.c
- *
- * Copyright (C) 2008 - 2009 Google, Inc.
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <asm/atomic.h>
-
-#include <linux/err.h>
-#include <linux/init.h>
-#include <linux/kernel.h>
-#include <linux/list.h>
-#include <linux/proc_fs.h>
-#include <linux/slab.h>
-#include <linux/spinlock.h>
-#include <linux/stat.h>
-#include <linux/uid_stat.h>
-
-static DEFINE_SPINLOCK(uid_lock);
-static LIST_HEAD(uid_list);
-static struct proc_dir_entry *parent;
-
-struct uid_stat {
-	struct list_head link;
-	uid_t uid;
-	atomic_t tcp_rcv;
-	atomic_t tcp_snd;
-};
-
-static struct uid_stat *find_uid_stat(uid_t uid) {
-	unsigned long flags;
-	struct uid_stat *entry;
-
-	spin_lock_irqsave(&uid_lock, flags);
-	list_for_each_entry(entry, &uid_list, link) {
-		if (entry->uid == uid) {
-			spin_unlock_irqrestore(&uid_lock, flags);
-			return entry;
-		}
-	}
-	spin_unlock_irqrestore(&uid_lock, flags);
-	return NULL;
-}
-
-static int tcp_snd_read_proc(char *page, char **start, off_t off,
-				int count, int *eof, void *data)
-{
-	int len;
-	unsigned int bytes;
-	char *p = page;
-	struct uid_stat *uid_entry = (struct uid_stat *) data;
-	if (!data)
-		return 0;
-
-	bytes = (unsigned int) (atomic_read(&uid_entry->tcp_snd) + INT_MIN);
-	p += sprintf(p, "%u\n", bytes);
-	len = (p - page) - off;
-	*eof = (len <= count) ? 1 : 0;
-	*start = page + off;
-	return len;
-}
-
-static int tcp_rcv_read_proc(char *page, char **start, off_t off,
-				int count, int *eof, void *data)
-{
-	int len;
-	unsigned int bytes;
-	char *p = page;
-	struct uid_stat *uid_entry = (struct uid_stat *) data;
-	if (!data)
-		return 0;
-
-	bytes = (unsigned int) (atomic_read(&uid_entry->tcp_rcv) + INT_MIN);
-	p += sprintf(p, "%u\n", bytes);
-	len = (p - page) - off;
-	*eof = (len <= count) ? 1 : 0;
-	*start = page + off;
-	return len;
-}
-
-/* Create a new entry for tracking the specified uid. */
-static struct uid_stat *create_stat(uid_t uid) {
-	unsigned long flags;
-	char uid_s[32];
-	struct uid_stat *new_uid;
-	struct proc_dir_entry *entry;
-
-	/* Create the uid stat struct and append it to the list. */
-	if ((new_uid = kmalloc(sizeof(struct uid_stat), GFP_KERNEL)) == NULL)
-		return NULL;
-
-	new_uid->uid = uid;
-	/* Counters start at INT_MIN, so we can track 4GB of network traffic. */
-	atomic_set(&new_uid->tcp_rcv, INT_MIN);
-	atomic_set(&new_uid->tcp_snd, INT_MIN);
-
-	spin_lock_irqsave(&uid_lock, flags);
-	list_add_tail(&new_uid->link, &uid_list);
-	spin_unlock_irqrestore(&uid_lock, flags);
-
-	sprintf(uid_s, "%d", uid);
-	entry = proc_mkdir(uid_s, parent);
-
-	/* Keep reference to uid_stat so we know what uid to read stats from. */
-	create_proc_read_entry("tcp_snd", S_IRUGO, entry , tcp_snd_read_proc,
-		(void *) new_uid);
-
-	create_proc_read_entry("tcp_rcv", S_IRUGO, entry, tcp_rcv_read_proc,
-		(void *) new_uid);
-
-	return new_uid;
-}
-
-int update_tcp_snd(uid_t uid, int size) {
-	struct uid_stat *entry;
-	if ((entry = find_uid_stat(uid)) == NULL &&
-		((entry = create_stat(uid)) == NULL)) {
-			return -1;
-	}
-	atomic_add(size, &entry->tcp_snd);
-	return 0;
-}
-
-int update_tcp_rcv(uid_t uid, int size) {
-	struct uid_stat *entry;
-	if ((entry = find_uid_stat(uid)) == NULL &&
-		((entry = create_stat(uid)) == NULL)) {
-			return -1;
-	}
-	atomic_add(size, &entry->tcp_rcv);
-	return 0;
-}
-
-static int __init uid_stat_init(void)
-{
-	parent = proc_mkdir("uid_stat", NULL);
-	if (!parent) {
-		pr_err("uid_stat: failed to create proc entry\n");
-		return -1;
-	}
-	return 0;
-}
-
-__initcall(uid_stat_init);
diff --git a/include/linux/uid_stat.h b/include/linux/uid_stat.h
deleted file mode 100644
index fcd3ab1f8d3d..000000000000
--- a/include/linux/uid_stat.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/* include/linux/uid_stat.h
- *
- * Copyright (C) 2008-2009 Google, Inc.
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef __uid_stat_h
-#define __uid_stat_h
-
-/* Contains definitions for resource tracking per uid. */
-
-extern int update_tcp_snd(uid_t uid, int size);
-extern int update_tcp_rcv(uid_t uid, int size);
-
-#endif /* _LINUX_UID_STAT_H */
diff --git a/net/socket.c b/net/socket.c
index ed84099da26d..75655365b5fd 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -97,10 +97,6 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
-#ifdef CONFIG_UID_STAT
-#include <linux/uid_stat.h>
-#endif
-
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -574,12 +570,7 @@ static inline int __sock_sendmsg(struct kiocb *iocb, struct socket *sock,
 	if (err)
 		return err;
 
-	err = sock->ops->sendmsg(iocb, sock, msg, size);
-#ifdef CONFIG_UID_STAT
-	if (err > 0)
-		update_tcp_snd(current_uid(), err);
-#endif
-	return err;
+	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
 
 int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
@@ -693,12 +684,7 @@ static inline int __sock_recvmsg(struct kiocb *iocb, struct socket *sock,
 	if (err)
 		return err;
 
-	err = sock->ops->recvmsg(iocb, sock, msg, size, flags);
-#ifdef CONFIG_UID_STAT
-	if (err > 0)
-		update_tcp_rcv(current_uid(), err);
-#endif
-	return err;
+	return sock->ops->recvmsg(iocb, sock, msg, size, flags);
 }
 
 int sock_recvmsg(struct socket *sock, struct msghdr *msg,
-- 
2.35.3

