From 84499884700e5a1398e1145ced2a37c463738a7c Mon Sep 17 00:00:00 2001
From: Zefa Chen <zefa.chen@rock-chips.com>
Date: Fri, 14 Aug 2020 17:08:47 +0800
Subject: [PATCH] media: i2c: imx415 support 12bit 3840x2160@20fps HDR DOL3

Signed-off-by: Zefa Chen <zefa.chen@rock-chips.com>
Change-Id: Ifa8086a4c3cec6a762bce54eaaee394ccdfbc385
---
 drivers/media/i2c/imx415.c | 631 +++++++++++++++++++++++++------------
 1 file changed, 436 insertions(+), 195 deletions(-)

diff --git a/drivers/media/i2c/imx415.c b/drivers/media/i2c/imx415.c
index 384512eb7825..94c3eea147bd 100644
--- a/drivers/media/i2c/imx415.c
+++ b/drivers/media/i2c/imx415.c
@@ -13,6 +13,9 @@
  * V0.0X01.0X02
  *  1. shr0 should be greater than (rsh1 + 9).
  *  2. rhs1 should be ceil to 4n + 1.
+ * V0.0X01.0X03
+ *  1. support 12bit HDR DOL3
+ *  2. support HDR/Linear quick switch
  */
 
 #define DEBUG
@@ -35,7 +38,7 @@
 #include <linux/pinctrl/consumer.h>
 #include <linux/rk-preisp.h>
 
-#define DRIVER_VERSION			KERNEL_VERSION(0, 0x01, 0x02)
+#define DRIVER_VERSION			KERNEL_VERSION(0, 0x01, 0x03)
 
 #ifndef V4L2_CID_DIGITAL_GAIN
 #define V4L2_CID_DIGITAL_GAIN		V4L2_CID_GAIN
@@ -66,6 +69,9 @@
 #define IMX415_SF1_GAIN_REG_H		0x3093
 #define IMX415_SF1_GAIN_REG_L		0x3092
 
+#define IMX415_SF2_GAIN_REG_H		0x3095
+#define IMX415_SF2_GAIN_REG_L		0x3094
+
 #define IMX415_LF_EXPO_REG_H		0x3052
 #define IMX415_LF_EXPO_REG_M		0x3051
 #define IMX415_LF_EXPO_REG_L		0x3050
@@ -74,11 +80,20 @@
 #define IMX415_SF1_EXPO_REG_M		0x3055
 #define IMX415_SF1_EXPO_REG_L		0x3054
 
+#define IMX415_SF2_EXPO_REG_H		0x305A
+#define IMX415_SF2_EXPO_REG_M		0x3059
+#define IMX415_SF2_EXPO_REG_L		0x3058
+
 #define IMX415_RHS1_REG_H		0x3062
 #define IMX415_RHS1_REG_M		0x3061
 #define IMX415_RHS1_REG_L		0x3060
 #define IMX415_RHS1_DEFAULT		0x004D
 
+#define IMX415_RHS2_REG_H		0x3066
+#define IMX415_RHS2_REG_M		0x3065
+#define IMX415_RHS2_REG_L		0x3064
+#define IMX415_RHS2_DEFAULT		0x004D
+
 #define	IMX415_EXPOSURE_MIN		8
 #define	IMX415_EXPOSURE_STEP		1
 #define IMX415_VTS_MAX			0x7fff
@@ -123,10 +138,13 @@
 
 /* Basic Readout Lines. Number of necessary readout lines in sensor */
 #define BRL				2228u
-/* Readout timing setting of SEF1(DOL2): RHS1 < 2 * BRL && RHS1 < (SHR0 -9) */
-#define RHS1_MAX			(BRL * 2 - 1)
+/* Readout timing setting of SEF1(DOL2): RHS1 < 2 * BRL and should be 4n + 1 */
+#define RHS1_MAX_X2			((BRL * 2 - 1) / 4 * 4 + 1)
+#define SHR1_MIN_X2			9u
 
-#define SHR1_MIN			9u
+/* Readout timing setting of SEF1(DOL3): RHS1 < 3 * BRL and should be 6n + 1 */
+#define RHS1_MAX_X3			((BRL * 3 - 1) / 6 * 6 + 1)
+#define SHR1_MIN_X3			13u
 
 #define OF_CAMERA_PINCTRL_STATE_DEFAULT	"rockchip,camera_default"
 #define OF_CAMERA_PINCTRL_STATE_SLEEP	"rockchip,camera_sleep"
@@ -164,6 +182,7 @@ struct imx415_mode {
 	u32 exp_def;
 	u32 mipi_freq_idx;
 	u32 bpp;
+	const struct regval *global_reg_list;
 	const struct regval *reg_list;
 	u32 hdr_mode;
 	u32 vc[PAD_MAX];
@@ -173,6 +192,7 @@ struct imx415 {
 	struct i2c_client	*client;
 	struct clk		*xvclk;
 	struct gpio_desc	*reset_gpio;
+	struct gpio_desc	*power_gpio;
 	struct regulator_bulk_data supplies[IMX415_NUM_SUPPLIES];
 
 	struct pinctrl		*pinctrl;
@@ -208,18 +228,13 @@ struct imx415 {
 /*
  * Xclk 37.125Mhz
  */
-static __maybe_unused const struct regval imx415_linear_12bit_3864x2192_891M_regs[] = {
+static __maybe_unused const struct regval imx415_global_12bit_3864x2192_regs[] = {
 	{0x3002, 0x00},
 	{0x3008, 0x7F},
 	{0x300A, 0x5B},
-	{0x3028, 0x4C},
-	{0x3029, 0x04},
-	{0x3033, 0x05},
-	{0x3050, 0x08},
 	{0x30C1, 0x00},
 	{0x3116, 0x24},
 	{0x311E, 0x24},
-	{0x3260, 0x01},
 	{0x32D4, 0x21},
 	{0x32EC, 0xA1},
 	{0x3452, 0x7F},
@@ -293,6 +308,25 @@ static __maybe_unused const struct regval imx415_linear_12bit_3864x2192_891M_reg
 	{0x3BCA, 0xBD},
 	{0x4004, 0x48},
 	{0x4005, 0x09},
+	{REG_NULL, 0x00},
+};
+
+static __maybe_unused const struct regval imx415_linear_12bit_3864x2192_891M_regs[] = {
+	{0x3024, 0xCA},
+	{0x3025, 0x08},
+	{0x3028, 0x4C},
+	{0x3029, 0x04},
+	{0x302C, 0x00},
+	{0x302D, 0x00},
+	{0x3033, 0x05},
+	{0x3050, 0x08},
+	{0x3051, 0x00},
+	{0x3054, 0x19},
+	{0x3058, 0x3E},
+	{0x3060, 0x25},
+	{0x3064, 0x4A},
+	{0x30CF, 0x00},
+	{0x3260, 0x01},
 	{0x400C, 0x00},
 	{0x4018, 0x7F},
 	{0x401A, 0x37},
@@ -308,22 +342,77 @@ static __maybe_unused const struct regval imx415_linear_12bit_3864x2192_891M_reg
 	{REG_NULL, 0x00},
 };
 
-static __maybe_unused const struct regval imx415_hdr_12bit_3864x2192_1782M_regs[] = {
-	{0x3002, 0x00},
-	{0x3008, 0x7F},
-	{0x300A, 0x5B},
+static __maybe_unused const struct regval imx415_hdr2_12bit_3864x2192_1782M_regs[] = {
 	{0x3024, 0xE4},
+	{0x3025, 0x08},
+	{0x3028, 0x26},
+	{0x3029, 0x02},
 	{0x302C, 0x01},
 	{0x302D, 0x01},
+	{0x3033, 0x04},
 	{0x3050, 0x90},
 	{0x3051, 0x0D},
 	{0x3054, 0x09},
+	{0x3058, 0x3E},
 	{0x3060, 0x4D},
-	{0x30C1, 0x00},
+	{0x3064, 0x4A},
 	{0x30CF, 0x01},
+	{0x3260, 0x00},
+	{0x400C, 0x01},
+	{0x4018, 0xB7},
+	{0x401A, 0x67},
+	{0x401C, 0x6F},
+	{0x401E, 0xDF},
+	{0x401F, 0x01},
+	{0x4020, 0x6F},
+	{0x4022, 0xCF},
+	{0x4024, 0x6F},
+	{0x4026, 0xB7},
+	{0x4028, 0x5F},
+	{0x4074, 0x00},
+	{REG_NULL, 0x00},
+};
+
+static __maybe_unused const struct regval imx415_hdr3_12bit_3864x2192_1782M_regs[] = {
+	{0x3024, 0x96},
+	{0x3025, 0x06},
+	{0x3028, 0x26},
+	{0x3029, 0x02},
+	{0x302C, 0x01},
+	{0x302D, 0x02},
+	{0x3033, 0x04},
+	{0x3050, 0x14},
+	{0x3051, 0x01},
+	{0x3054, 0x0D},
+	{0x3058, 0x26},
+	{0x3060, 0x19},
+	{0x3064, 0x32},
+	{0x30CF, 0x03},
+	{0x3260, 0x00},
+	{0x400C, 0x01},
+	{0x4018, 0xB7},
+	{0x401A, 0x67},
+	{0x401C, 0x6F},
+	{0x401E, 0xDF},
+	{0x401F, 0x01},
+	{0x4020, 0x6F},
+	{0x4022, 0xCF},
+	{0x4024, 0x6F},
+	{0x4026, 0xB7},
+	{0x4028, 0x5F},
+	{0x4074, 0x00},
+	{REG_NULL, 0x00},
+};
+
+static __maybe_unused const struct regval imx415_global_10bit_3864x2192_regs[] = {
+	{0x3002, 0x00},
+	{0x3008, 0x7F},
+	{0x300A, 0x5B},
+	{0x3031, 0x00},
+	{0x3032, 0x00},
+	{0x30C1, 0x00},
 	{0x3116, 0x24},
 	{0x311E, 0x24},
-	{0x3260, 0x00},
 	{0x32D4, 0x21},
 	{0x32EC, 0xA1},
 	{0x3452, 0x7F},
@@ -343,6 +432,7 @@ static __maybe_unused const struct regval imx415_hdr_12bit_3864x2192_1782M_regs[
 	{0x36D8, 0x71},
 	{0x36DA, 0x8C},
 	{0x36DB, 0x00},
+	{0x3701, 0x00},
 	{0x3724, 0x02},
 	{0x3726, 0x02},
 	{0x3732, 0x02},
@@ -400,201 +490,49 @@ static __maybe_unused const struct regval imx415_hdr_12bit_3864x2192_1782M_regs[
 	{REG_NULL, 0x00},
 };
 
-static __maybe_unused const struct regval imx415_hdr_10bit_3864x2192_1485M_regs[] = {
-	{0x3002, 0x00},
-	{0x3008, 0x7F},
-	{0x300A, 0x5B},
+static __maybe_unused const struct regval imx415_hdr2_10bit_3864x2192_1485M_regs[] = {
 	{0x3024, 0xFC},
 	{0x3028, 0x1A},
+	{0x3029, 0x02},
 	{0x302C, 0x01},
 	{0x302D, 0x01},
-	{0x3031, 0x00},
-	{0x3032, 0x00},
 	{0x3033, 0x08},
 	{0x3050, 0xA8},
 	{0x3051, 0x0D},
 	{0x3054, 0x09},
 	{0x3060, 0x4D},
-	{0x30C1, 0x00},
 	{0x30CF, 0x01},
-	{0x3116, 0x24},
 	{0x3118, 0xA0},
-	{0x311E, 0x24},
 	{0x3260, 0x00},
-	{0x32D4, 0x21},
-	{0x32EC, 0xA1},
-	{0x3452, 0x7F},
-	{0x3453, 0x03},
-	{0x358A, 0x04},
-	{0x35A1, 0x02},
-	{0x36BC, 0x0C},
-	{0x36CC, 0x53},
-	{0x36CD, 0x00},
-	{0x36CE, 0x3C},
-	{0x36D0, 0x8C},
-	{0x36D1, 0x00},
-	{0x36D2, 0x71},
-	{0x36D4, 0x3C},
-	{0x36D6, 0x53},
-	{0x36D7, 0x00},
-	{0x36D8, 0x71},
-	{0x36DA, 0x8C},
-	{0x36DB, 0x00},
-	{0x3701, 0x00},
-	{0x3724, 0x02},
-	{0x3726, 0x02},
-	{0x3732, 0x02},
-	{0x3734, 0x03},
-	{0x3736, 0x03},
-	{0x3742, 0x03},
-	{0x3862, 0xE0},
-	{0x38CC, 0x30},
-	{0x38CD, 0x2F},
-	{0x395C, 0x0C},
-	{0x3A42, 0xD1},
-	{0x3A4C, 0x77},
-	{0x3AE0, 0x02},
-	{0x3AEC, 0x0C},
-	{0x3B00, 0x2E},
-	{0x3B06, 0x29},
-	{0x3B98, 0x25},
-	{0x3B99, 0x21},
-	{0x3B9B, 0x13},
-	{0x3B9C, 0x13},
-	{0x3B9D, 0x13},
-	{0x3B9E, 0x13},
-	{0x3BA1, 0x00},
-	{0x3BA2, 0x06},
-	{0x3BA3, 0x0B},
-	{0x3BA4, 0x10},
-	{0x3BA5, 0x14},
-	{0x3BA6, 0x18},
-	{0x3BA7, 0x1A},
-	{0x3BA8, 0x1A},
-	{0x3BA9, 0x1A},
-	{0x3BAC, 0xED},
-	{0x3BAD, 0x01},
-	{0x3BAE, 0xF6},
-	{0x3BAF, 0x02},
-	{0x3BB0, 0xA2},
-	{0x3BB1, 0x03},
-	{0x3BB2, 0xE0},
-	{0x3BB3, 0x03},
-	{0x3BB4, 0xE0},
-	{0x3BB5, 0x03},
-	{0x3BB6, 0xE0},
-	{0x3BB7, 0x03},
-	{0x3BB8, 0xE0},
-	{0x3BBA, 0xE0},
-	{0x3BBC, 0xDA},
-	{0x3BBE, 0x88},
-	{0x3BC0, 0x44},
-	{0x3BC2, 0x7B},
-	{0x3BC4, 0xA2},
-	{0x3BC8, 0xBD},
-	{0x3BCA, 0xBD},
-	{0x4004, 0x48},
-	{0x4005, 0x09},
+	{0x400C, 0x01},
 	{0x4018, 0xA7},
 	{0x401A, 0x57},
 	{0x401C, 0x5F},
 	{0x401E, 0x97},
+	{0x401F, 0x01},
 	{0x4020, 0x5F},
 	{0x4022, 0xAF},
 	{0x4024, 0x5F},
 	{0x4026, 0x9F},
 	{0x4028, 0x4F},
+	{0x4074, 0x00},
 	{REG_NULL, 0x00},
 };
 
 static __maybe_unused const struct regval imx415_linear_10bit_3864x2192_891M_regs[] = {
-	{0x3002, 0x00},
-	{0x3008, 0x7F},
-	{0x300A, 0x5B},
+	{0x3024, 0xCA},
 	{0x3028, 0x4C},
 	{0x3029, 0x04},
-	{0x3031, 0x00},
-	{0x3032, 0x00},
+	{0x302C, 0x00},
+	{0x302D, 0x00},
 	{0x3033, 0x05},
 	{0x3050, 0x08},
-	{0x30C1, 0x00},
-	{0x3116, 0x24},
-	{0x311E, 0x24},
+	{0x3051, 0x00},
+	{0x3054, 0x19},
+	{0x3060, 0x25},
+	{0x30CF, 0x00},
+	{0x3118, 0xC0},
 	{0x3260, 0x01},
-	{0x32D4, 0x21},
-	{0x32EC, 0xA1},
-	{0x3452, 0x7F},
-	{0x3453, 0x03},
-	{0x358A, 0x04},
-	{0x35A1, 0x02},
-	{0x36BC, 0x0C},
-	{0x36CC, 0x53},
-	{0x36CD, 0x00},
-	{0x36CE, 0x3C},
-	{0x36D0, 0x8C},
-	{0x36D1, 0x00},
-	{0x36D2, 0x71},
-	{0x36D4, 0x3C},
-	{0x36D6, 0x53},
-	{0x36D7, 0x00},
-	{0x36D8, 0x71},
-	{0x36DA, 0x8C},
-	{0x36DB, 0x00},
-	{0x3701, 0x00},
-	{0x3724, 0x02},
-	{0x3726, 0x02},
-	{0x3732, 0x02},
-	{0x3734, 0x03},
-	{0x3736, 0x03},
-	{0x3742, 0x03},
-	{0x3862, 0xE0},
-	{0x38CC, 0x30},
-	{0x38CD, 0x2F},
-	{0x395C, 0x0C},
-	{0x3A42, 0xD1},
-	{0x3A4C, 0x77},
-	{0x3AE0, 0x02},
-	{0x3AEC, 0x0C},
-	{0x3B00, 0x2E},
-	{0x3B06, 0x29},
-	{0x3B98, 0x25},
-	{0x3B99, 0x21},
-	{0x3B9B, 0x13},
-	{0x3B9C, 0x13},
-	{0x3B9D, 0x13},
-	{0x3B9E, 0x13},
-	{0x3BA1, 0x00},
-	{0x3BA2, 0x06},
-	{0x3BA3, 0x0B},
-	{0x3BA4, 0x10},
-	{0x3BA5, 0x14},
-	{0x3BA6, 0x18},
-	{0x3BA7, 0x1A},
-	{0x3BA8, 0x1A},
-	{0x3BA9, 0x1A},
-	{0x3BAC, 0xED},
-	{0x3BAD, 0x01},
-	{0x3BAE, 0xF6},
-	{0x3BAF, 0x02},
-	{0x3BB0, 0xA2},
-	{0x3BB1, 0x03},
-	{0x3BB2, 0xE0},
-	{0x3BB3, 0x03},
-	{0x3BB4, 0xE0},
-	{0x3BB5, 0x03},
-	{0x3BB6, 0xE0},
-	{0x3BB7, 0x03},
-	{0x3BB8, 0xE0},
-	{0x3BBA, 0xE0},
-	{0x3BBC, 0xDA},
-	{0x3BBE, 0x88},
-	{0x3BC0, 0x44},
-	{0x3BC2, 0x7B},
-	{0x3BC4, 0xA2},
-	{0x3BC8, 0xBD},
-	{0x3BCA, 0xBD},
-	{0x4004, 0x48},
-	{0x4005, 0x09},
 	{0x400C, 0x00},
 	{0x4018, 0x7F},
 	{0x401A, 0x37},
@@ -639,6 +577,7 @@ static const struct imx415_mode supported_modes[] = {
 		.exp_def = 0x08ca - 0x08,
 		.hts_def = 0x044c * IMX415_4LANES * 2,
 		.vts_def = 0x08ca,
+		.global_reg_list = imx415_global_12bit_3864x2192_regs,
 		.reg_list = imx415_linear_12bit_3864x2192_891M_regs,
 		.hdr_mode = NO_HDR,
 		.mipi_freq_idx = 1,
@@ -659,7 +598,8 @@ static const struct imx415_mode supported_modes[] = {
 		 * make vts double(that is FSC) to workaround.
 		 */
 		.vts_def = 0x08e4 * 2,
-		.reg_list = imx415_hdr_12bit_3864x2192_1782M_regs,
+		.global_reg_list = imx415_global_12bit_3864x2192_regs,
+		.reg_list = imx415_hdr2_12bit_3864x2192_1782M_regs,
 		.hdr_mode = HDR_X2,
 		.mipi_freq_idx = 0,
 		.bpp = 12,
@@ -668,6 +608,31 @@ static const struct imx415_mode supported_modes[] = {
 		.vc[PAD2] = V4L2_MBUS_CSI2_CHANNEL_1,
 		.vc[PAD3] = V4L2_MBUS_CSI2_CHANNEL_1,//M->csi wr2
 	},
+	{
+		.bus_fmt = MEDIA_BUS_FMT_SGBRG12_1X12,
+		.width = 3864,
+		.height = 2192,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 200000,
+		},
+		.exp_def = 0x114,
+		.hts_def = 0x0226 * IMX415_4LANES * 2,
+		/*
+		 * IMX415 HDR mode T-line is half of Linear mode,
+		 * make vts double(that is FSC) to workaround.
+		 */
+		.vts_def = 0x0696 * 4,
+		.global_reg_list = imx415_global_12bit_3864x2192_regs,
+		.reg_list = imx415_hdr3_12bit_3864x2192_1782M_regs,
+		.hdr_mode = HDR_X3,
+		.mipi_freq_idx = 0,
+		.bpp = 12,
+		.vc[PAD0] = V4L2_MBUS_CSI2_CHANNEL_2,
+		.vc[PAD1] = V4L2_MBUS_CSI2_CHANNEL_1,//M->csi wr0
+		.vc[PAD2] = V4L2_MBUS_CSI2_CHANNEL_0,//L->csi wr0
+		.vc[PAD3] = V4L2_MBUS_CSI2_CHANNEL_2,//S->csi wr2
+	},
 	{
 		.bus_fmt = MEDIA_BUS_FMT_SGBRG10_1X10,
 		.width = 3864,
@@ -679,6 +644,7 @@ static const struct imx415_mode supported_modes[] = {
 		.exp_def = 0x08fc - 0x08,
 		.hts_def = 0x044c * IMX415_4LANES * 2,
 		.vts_def = 0x08fc,
+		.global_reg_list = imx415_global_10bit_3864x2192_regs,
 		.reg_list = imx415_linear_10bit_3864x2192_891M_regs,
 		.hdr_mode = NO_HDR,
 		.mipi_freq_idx = 1,
@@ -699,7 +665,8 @@ static const struct imx415_mode supported_modes[] = {
 		 * make vts double to workaround.
 		 */
 		.vts_def = 0x08fc * 2,
-		.reg_list = imx415_hdr_10bit_3864x2192_1485M_regs,
+		.global_reg_list = imx415_global_10bit_3864x2192_regs,
+		.reg_list = imx415_hdr2_10bit_3864x2192_1485M_regs,
 		.hdr_mode = HDR_X2,
 		.mipi_freq_idx = 2,
 		.bpp = 10,
@@ -948,12 +915,17 @@ static int imx415_g_frame_interval(struct v4l2_subdev *sd,
 static int imx415_g_mbus_config(struct v4l2_subdev *sd,
 				struct v4l2_mbus_config *config)
 {
+	struct imx415 *imx415 = to_imx415(sd);
+	const struct imx415_mode *mode = imx415->cur_mode;
 	u32 val = 0;
 
 	val = 1 << (IMX415_4LANES - 1) |
 	      V4L2_MBUS_CSI2_CHANNEL_0 |
 	      V4L2_MBUS_CSI2_CONTINUOUS_CLOCK;
-
+	if (mode->hdr_mode != NO_HDR)
+		val |= V4L2_MBUS_CSI2_CHANNEL_1;
+	if (mode->hdr_mode == HDR_X3)
+		val |= V4L2_MBUS_CSI2_CHANNEL_2;
 	config->type = V4L2_MBUS_CSI2;
 	config->flags = val;
 
@@ -970,6 +942,241 @@ static void imx415_get_module_inf(struct imx415 *imx415,
 	strlcpy(inf->base.lens, imx415->len_name, sizeof(inf->base.lens));
 }
 
+static int imx415_set_hdrae_3frame(struct imx415 *imx415,
+				   struct preisp_hdrae_exp_s *ae)
+{
+	struct i2c_client *client = imx415->client;
+	u32 l_exp_time, m_exp_time, s_exp_time;
+	u32 l_a_gain, m_a_gain, s_a_gain;
+	int shr2, shr1, shr0, rhs2, rhs1 = 0;
+	int rhs1_change_limit, rhs2_change_limit = 0;
+	static int rhs1_old = IMX415_RHS1_DEFAULT;
+	static int rhs2_old = IMX415_RHS2_DEFAULT;
+	int ret = 0;
+	u32 fsc;
+	int rhs1_max = 0;
+	int shr2_min = 0;
+
+	if (!imx415->has_init_exp && !imx415->streaming) {
+		imx415->init_hdrae_exp = *ae;
+		imx415->has_init_exp = true;
+		dev_dbg(&imx415->client->dev, "imx415 is not streaming, save hdr ae!\n");
+		return ret;
+	}
+	l_exp_time = ae->long_exp_reg;
+	m_exp_time = ae->middle_exp_reg;
+	s_exp_time = ae->short_exp_reg;
+	l_a_gain = ae->long_gain_reg;
+	m_a_gain = ae->middle_gain_reg;
+	s_a_gain = ae->short_gain_reg;
+	dev_dbg(&client->dev,
+		"rev exp req: L_exp: 0x%x, 0x%x, M_exp: 0x%x, 0x%x S_exp: 0x%x, 0x%x\n",
+		l_exp_time, m_exp_time, s_exp_time,
+		l_a_gain, m_a_gain, s_a_gain);
+
+	ret = imx415_write_reg(client, IMX415_GROUP_HOLD_REG,
+		IMX415_REG_VALUE_08BIT, IMX415_GROUP_HOLD_START);
+	/* gain effect n+1 */
+	ret |= imx415_write_reg(client, IMX415_LF_GAIN_REG_H,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_H(l_a_gain));
+	ret |= imx415_write_reg(client, IMX415_LF_GAIN_REG_L,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_L(l_a_gain));
+	ret |= imx415_write_reg(client, IMX415_SF1_GAIN_REG_H,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_H(m_a_gain));
+	ret |= imx415_write_reg(client, IMX415_SF1_GAIN_REG_L,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_L(m_a_gain));
+	ret |= imx415_write_reg(client, IMX415_SF2_GAIN_REG_H,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_H(s_a_gain));
+	ret |= imx415_write_reg(client, IMX415_SF2_GAIN_REG_L,
+		IMX415_REG_VALUE_08BIT, IMX415_FETCH_GAIN_L(s_a_gain));
+
+	/* Restrictions
+	 *   FSC = 4 * VMAX and FSC should be 6n;
+	 *   exp_l = FSC - SHR0 + Toffset;
+	 *
+	 *   SHR0 = FSC - exp_l + Toffset;
+	 *   SHR0 <= (FSC -12);
+	 *   SHR0 >= RHS2 + 13;
+	 *   SHR0 should be 3n;
+	 *
+	 *   exp_m = RHS1 - SHR1 + Toffset;
+	 *
+	 *   RHS1 < BRL * 3;
+	 *   RHS1 <= SHR2 - 13;
+	 *   RHS1 >= SHR1 + 12;
+	 *   SHR1 >= 13;
+	 *   SHR1 <= RHS1 - 12;
+	 *   RHS1(n+1) >= RHS1(n) + BRL * 3 -FSC + 3;
+	 *
+	 *   SHR1 should be 3n+1 and RHS1 should be 6n+1;
+	 *
+	 *   exp_s = RHS2 - SHR2 + Toffset;
+	 *
+	 *   RHS2 < BRL * 3 + RHS1;
+	 *   RHS2 <= SHR0 - 13;
+	 *   RHS2 >= SHR2 + 12;
+	 *   SHR2 >= RHS1 + 13;
+	 *   SHR2 <= RHS2 - 12;
+	 *   RHS1(n+1) >= RHS1(n) + BRL * 3 -FSC + 3;
+	 *
+	 *   SHR2 should be 3n+2 and RHS2 should be 6n+2;
+	 */
+
+	/* The HDR mode vts is double by default to workaround T-line */
+	fsc = imx415->cur_vts;
+	fsc = fsc / 6 * 6;
+	shr0 = fsc - l_exp_time;
+	dev_dbg(&client->dev,
+		"line(%d) shr0 %d, l_exp_time %d, fsc %d\n",
+		__LINE__, shr0, l_exp_time, fsc);
+
+	rhs1 = (SHR1_MIN_X3 + m_exp_time + 5) / 6 * 6 + 1;
+	rhs1_max = RHS1_MAX_X3;
+	if (rhs1 < 25)
+		rhs1 = 25;
+	else if (rhs1 > rhs1_max)
+		rhs1 = rhs1_max;
+	dev_dbg(&client->dev,
+		"line(%d) rhs1 %d, m_exp_time %d rhs1_old %d\n",
+		__LINE__, rhs1, m_exp_time, rhs1_old);
+
+	//Dynamic adjustment rhs2 must meet the following conditions
+	rhs1_change_limit = rhs1_old + 3 * BRL - fsc + 3;
+	rhs1_change_limit = (rhs1_change_limit < 25) ? 25 : rhs1_change_limit;
+	rhs1_change_limit = (rhs1_change_limit + 5) / 6 * 6 + 1;
+	if (rhs1 < rhs1_change_limit)
+		rhs1 = rhs1_change_limit;
+
+	dev_dbg(&client->dev,
+		"line(%d) m_exp_time %d rhs1_old %d, rhs1_new %d\n",
+		__LINE__, m_exp_time, rhs1_old, rhs1);
+
+	rhs1_old = rhs1;
+
+	/* shr1 = rhs1 - s_exp_time */
+	if (rhs1 - m_exp_time <= SHR1_MIN_X3) {
+		shr1 = SHR1_MIN_X3;
+		m_exp_time = rhs1 - shr1;
+	} else {
+		shr1 = rhs1 - m_exp_time;
+	}
+
+	shr2_min = rhs1 + 13;
+	rhs2 = (shr2_min + s_exp_time + 5) / 6 * 6 + 2;
+	if (rhs2 > (shr0 - 13))
+		rhs2 = shr0 - 13;
+	else if (rhs2 < 50)
+		rhs2 = 50;
+	dev_dbg(&client->dev,
+		"line(%d) rhs2 %d, s_exp_time %d, rhs2_old %d\n",
+		__LINE__, rhs2, s_exp_time, rhs2_old);
+
+	//Dynamic adjustment rhs2 must meet the following conditions
+	rhs2_change_limit = rhs2_old + 3 * BRL - fsc + 3;
+	rhs2_change_limit = (rhs2_change_limit < 50) ?  50 : rhs2_change_limit;
+	rhs2_change_limit = (rhs2_change_limit + 5) / 6 * 6 + 2;
+	if (rhs2 < rhs2_change_limit)
+		rhs2 = rhs2_change_limit;
+
+	rhs2_old = rhs2;
+
+	/* shr2 = rhs2 - s_exp_time */
+	if (rhs2 - s_exp_time <= shr2_min) {
+		shr2 = shr2_min;
+		s_exp_time = rhs2 - shr2;
+	} else {
+		shr2 = rhs2 - s_exp_time;
+	}
+	dev_dbg(&client->dev,
+		"line(%d) rhs2_new %d, s_exp_time %d shr2 %d, rhs2_change_limit %d\n",
+		__LINE__, rhs2, s_exp_time, shr2, rhs2_change_limit);
+
+	if (shr0 < rhs2 + 13)
+		shr0 = rhs2 + 13;
+	else if (shr0 > fsc - 12)
+		shr0 = fsc - 12;
+
+	dev_dbg(&client->dev,
+		"long exposure: l_exp_time=%d, fsc=%d, shr0=%d, l_a_gain=%d\n",
+		l_exp_time, fsc, shr0, l_a_gain);
+	dev_dbg(&client->dev,
+		"middle exposure(SEF1): m_exp_time=%d, rhs1=%d, shr1=%d, m_a_gain=%d\n",
+		m_exp_time, rhs1, shr1, m_a_gain);
+	dev_dbg(&client->dev,
+		"short exposure(SEF2): s_exp_time=%d, rhs2=%d, shr2=%d, s_a_gain=%d\n",
+		s_exp_time, rhs2, shr2, s_a_gain);
+	/* time effect n+1 */
+	/* write SEF2 exposure RHS2 regs*/
+	ret |= imx415_write_reg(client,
+		IMX415_RHS2_REG_L,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_L(rhs2));
+	ret |= imx415_write_reg(client,
+		IMX415_RHS2_REG_M,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_M(rhs2));
+	ret |= imx415_write_reg(client,
+		IMX415_RHS2_REG_H,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_H(rhs2));
+	/* write SEF2 exposure SHR2 regs*/
+	ret |= imx415_write_reg(client,
+		IMX415_SF2_EXPO_REG_L,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_L(shr2));
+	ret |= imx415_write_reg(client,
+		IMX415_SF2_EXPO_REG_M,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_M(shr2));
+	ret |= imx415_write_reg(client,
+		IMX415_SF2_EXPO_REG_H,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_H(shr2));
+	/* write SEF1 exposure RHS1 regs*/
+	ret |= imx415_write_reg(client,
+		IMX415_RHS1_REG_L,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_L(rhs1));
+	ret |= imx415_write_reg(client,
+		IMX415_RHS1_REG_M,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_M(rhs1));
+	ret |= imx415_write_reg(client,
+		IMX415_RHS1_REG_H,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_RHS1_H(rhs1));
+	/* write SEF1 exposure SHR1 regs*/
+	ret |= imx415_write_reg(client,
+		IMX415_SF1_EXPO_REG_L,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_L(shr1));
+	ret |= imx415_write_reg(client,
+		IMX415_SF1_EXPO_REG_M,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_M(shr1));
+	ret |= imx415_write_reg(client,
+		IMX415_SF1_EXPO_REG_H,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_H(shr1));
+	/* write LF exposure SHR0 regs*/
+	ret |= imx415_write_reg(client,
+		IMX415_LF_EXPO_REG_L,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_L(shr0));
+	ret |= imx415_write_reg(client,
+		IMX415_LF_EXPO_REG_M,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_M(shr0));
+	ret |= imx415_write_reg(client,
+		IMX415_LF_EXPO_REG_H,
+		IMX415_REG_VALUE_08BIT,
+		IMX415_FETCH_EXP_H(shr0));
+
+	ret |= imx415_write_reg(client, IMX415_GROUP_HOLD_REG,
+		IMX415_REG_VALUE_08BIT, IMX415_GROUP_HOLD_END);
+	return ret;
+}
+
 static int imx415_set_hdrae(struct imx415 *imx415,
 			    struct preisp_hdrae_exp_s *ae)
 {
@@ -1041,10 +1248,10 @@ static int imx415_set_hdrae(struct imx415 *imx415,
 	fsc = imx415->cur_vts;
 	shr0 = fsc - l_exp_time;
 
-	rhs1_max = min((RHS1_MAX / 4 * 4 + 1), ((shr0 - 9u) / 4 * 4 + 1));
-	rhs1_min = max(SHR1_MIN + 8u, rhs1_old + 2 * BRL - fsc + 2);
+	rhs1_max = min(RHS1_MAX_X2, ((shr0 - 9u) / 4 * 4 + 1));
+	rhs1_min = max(SHR1_MIN_X2 + 8u, rhs1_old + 2 * BRL - fsc + 2);
 	rhs1_min = (rhs1_min + 3) / 4 * 4 + 1;
-	rhs1 = (SHR1_MIN + s_exp_time + 3) / 4 * 4 + 1;/* shall be 4n + 1 */
+	rhs1 = (SHR1_MIN_X2 + s_exp_time + 3) / 4 * 4 + 1;/* shall be 4n + 1 */
 	rhs1 = clamp(rhs1, rhs1_min, rhs1_max);
 	dev_dbg(&client->dev,
 		"line(%d) rhs1 %d, short time %d rhs1_old %d, rhs1_new %d\n",
@@ -1053,8 +1260,8 @@ static int imx415_set_hdrae(struct imx415 *imx415,
 	rhs1_old = rhs1;
 
 	/* shr1 = rhs1 - s_exp_time */
-	if (rhs1 - s_exp_time <= SHR1_MIN) {
-		shr1 = SHR1_MIN;
+	if (rhs1 - s_exp_time <= SHR1_MIN_X2) {
+		shr1 = SHR1_MIN_X2;
 		s_exp_time = rhs1 - shr1;
 	} else {
 		shr1 = rhs1 - s_exp_time;
@@ -1067,7 +1274,7 @@ static int imx415_set_hdrae(struct imx415 *imx415,
 
 	dev_dbg(&client->dev,
 		"fsc=%d,RHS1_MAX=%d,SHR1_MIN=%d,rhs1_max=%d\n",
-		fsc, RHS1_MAX, SHR1_MIN, rhs1_max);
+		fsc, RHS1_MAX_X2, SHR1_MIN_X2, rhs1_max);
 	dev_dbg(&client->dev,
 		"l_exp_time=%d,s_exp_time=%d,shr0=%d,shr1=%d,rhs1=%d,l_a_gain=%d,s_a_gain=%d\n",
 		l_exp_time, s_exp_time, shr0, shr1, rhs1, l_a_gain, s_a_gain);
@@ -1124,7 +1331,10 @@ static long imx415_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 
 	switch (cmd) {
 	case PREISP_CMD_SET_HDRAE_EXP:
-		ret = imx415_set_hdrae(imx415, arg);
+		if (imx415->cur_mode->hdr_mode == HDR_X2)
+			ret = imx415_set_hdrae(imx415, arg);
+		else if (imx415->cur_mode->hdr_mode == HDR_X3)
+			ret = imx415_set_hdrae_3frame(imx415, arg);
 		break;
 	case RKMODULE_GET_MODULE_INFO:
 		imx415_get_module_inf(imx415, (struct rkmodule_inf *)arg);
@@ -1152,6 +1362,17 @@ static long imx415_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 				hdr->hdr_mode, w, h);
 			ret = -EINVAL;
 		} else {
+			if (imx415->streaming) {
+				ret = imx415_write_reg(imx415->client, IMX415_GROUP_HOLD_REG,
+					IMX415_REG_VALUE_08BIT, IMX415_GROUP_HOLD_START);
+
+				ret |= imx415_write_array(imx415->client, imx415->cur_mode->reg_list);
+
+				ret |= imx415_write_reg(imx415->client, IMX415_GROUP_HOLD_REG,
+					IMX415_REG_VALUE_08BIT, IMX415_GROUP_HOLD_END);
+				if (ret)
+					return ret;
+			}
 			w = imx415->cur_mode->hts_def - imx415->cur_mode->width;
 			h = imx415->cur_mode->vts_def - imx415->cur_mode->height;
 			__v4l2_ctrl_modify_range(imx415->hblank, w, w, 1, w);
@@ -1254,6 +1475,9 @@ static int __imx415_start_stream(struct imx415 *imx415)
 {
 	int ret;
 
+	ret = imx415_write_array(imx415->client, imx415->cur_mode->global_reg_list);
+	if (ret)
+		return ret;
 	ret = imx415_write_array(imx415->client, imx415->cur_mode->reg_list);
 	if (ret)
 		return ret;
@@ -1372,7 +1596,8 @@ static int __imx415_power_on(struct imx415 *imx415)
 		dev_err(dev, "Failed to enable regulators\n");
 		goto err_pinctrl;
 	}
-
+	if (!IS_ERR(imx415->power_gpio))
+		gpiod_set_value_cansleep(imx415->power_gpio, 1);
 	/* At least 500ns between power raising and XCLR */
 	/* fix power on timing if insmod this ko */
 	usleep_range(10 * 1000, 20 * 1000);
@@ -1424,6 +1649,8 @@ static void __imx415_power_off(struct imx415 *imx415)
 		if (ret < 0)
 			dev_dbg(dev, "could not set pins\n");
 	}
+	if (!IS_ERR(imx415->power_gpio))
+		gpiod_set_value_cansleep(imx415->power_gpio, 0);
 	regulator_bulk_disable(IMX415_NUM_SUPPLIES, imx415->supplies);
 }
 
@@ -1583,6 +1810,8 @@ static int imx415_set_ctrl(struct v4l2_ctrl *ctrl)
 
 	switch (ctrl->id) {
 	case V4L2_CID_EXPOSURE:
+		if (imx415->cur_mode->hdr_mode != NO_HDR)
+			return ret;
 		shr0 = imx415->cur_vts - ctrl->val;
 		ret = imx415_write_reg(imx415->client, IMX415_LF_EXPO_REG_L,
 				       IMX415_REG_VALUE_08BIT,
@@ -1597,6 +1826,8 @@ static int imx415_set_ctrl(struct v4l2_ctrl *ctrl)
 			shr0, imx415->cur_vts, ctrl->val);
 		break;
 	case V4L2_CID_ANALOGUE_GAIN:
+		if (imx415->cur_mode->hdr_mode != NO_HDR)
+			return ret;
 		ret = imx415_write_reg(imx415->client, IMX415_LF_GAIN_REG_H,
 				       IMX415_REG_VALUE_08BIT,
 				       IMX415_FETCH_GAIN_H(ctrl->val));
@@ -1608,13 +1839,21 @@ static int imx415_set_ctrl(struct v4l2_ctrl *ctrl)
 		break;
 	case V4L2_CID_VBLANK:
 		vts = ctrl->val + imx415->cur_mode->height;
-		imx415->cur_vts = vts;
 		/*
 		 * vts of hdr mode is double to correct T-line calculation.
 		 * Restore before write to reg.
 		 */
-		if (imx415->cur_mode->hdr_mode == HDR_X2)
+		if (imx415->cur_mode->hdr_mode == HDR_X2) {
+			vts = (vts + 3) / 4 * 4;
+			imx415->cur_vts = vts;
 			vts /= 2;
+		} else if (imx415->cur_mode->hdr_mode == HDR_X3) {
+			vts = (vts + 23) / 24 * 24;
+			imx415->cur_vts = vts;
+			vts /= 4;
+		} else {
+			imx415->cur_vts = vts;
+		}
 		ret = imx415_write_reg(imx415->client, IMX415_VTS_REG_L,
 				       IMX415_REG_VALUE_08BIT,
 				       IMX415_FETCH_VTS_L(vts));
@@ -1826,7 +2065,9 @@ static int imx415_probe(struct i2c_client *client,
 	imx415->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
 	if (IS_ERR(imx415->reset_gpio))
 		dev_warn(dev, "Failed to get reset-gpios\n");
-
+	imx415->power_gpio = devm_gpiod_get(dev, "power", GPIOD_OUT_LOW);
+	if (IS_ERR(imx415->power_gpio))
+		dev_warn(dev, "Failed to get power-gpios\n");
 	imx415->pinctrl = devm_pinctrl_get(dev);
 	if (!IS_ERR(imx415->pinctrl)) {
 		imx415->pins_default =
-- 
2.35.3

