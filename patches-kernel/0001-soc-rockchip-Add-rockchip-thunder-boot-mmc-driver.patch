From 62d1f48b38409e74d6647d076a0e739659c8d2f0 Mon Sep 17 00:00:00 2001
From: Shawn Lin <shawn.lin@rock-chips.com>
Date: Thu, 11 Jun 2020 16:51:07 +0800
Subject: [PATCH] soc: rockchip: Add rockchip thunder boot mmc driver

This driver aimed at starting decompression as soon as
possible.

Change-Id: Ie29f43935f0642ae8c9c605d3ebc40292d4d1781
Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
---
 drivers/soc/rockchip/Kconfig                  |   6 +
 drivers/soc/rockchip/Makefile                 |   1 +
 .../soc/rockchip/rockchip_thunderboot_mmc.c   | 130 ++++++++++++++++++
 3 files changed, 137 insertions(+)
 create mode 100644 drivers/soc/rockchip/rockchip_thunderboot_mmc.c

diff --git a/drivers/soc/rockchip/Kconfig b/drivers/soc/rockchip/Kconfig
index 76e4925c3aca..0c7d2074f50b 100644
--- a/drivers/soc/rockchip/Kconfig
+++ b/drivers/soc/rockchip/Kconfig
@@ -122,4 +122,10 @@ config ROCKCHIP_THUNDER_BOOT
 	  Say y here to enable Rockchip thunder boot support.
 	  This option make the kernel boot faster.
 
+config ROCKCHIP_THUNDER_BOOT_MMC
+	bool "Rockchip Thunder Boot from MMC"
+	depends on ROCKCHIP_THUNDER_BOOT
+	help
+	  Say y if boot from MMC.
+
 endif
diff --git a/drivers/soc/rockchip/Makefile b/drivers/soc/rockchip/Makefile
index 1337445741dc..a76e4c27ca71 100644
--- a/drivers/soc/rockchip/Makefile
+++ b/drivers/soc/rockchip/Makefile
@@ -16,4 +16,5 @@ obj-$(CONFIG_ROCKCHIP_PVTM)	+= rockchip_pvtm.o
 obj-$(CONFIG_ROCKCHIP_RAMDISK)	+= rockchip_ramdisk.o
 obj-$(CONFIG_ROCKCHIP_SUSPEND_MODE) += rockchip_pm_config.o
 obj-$(CONFIG_ROCKCHIP_SYSTEM_MONITOR) += rockchip_system_monitor.o
+obj-$(CONFIG_ROCKCHIP_THUNDER_BOOT_MMC) += rockchip_thunderboot_mmc.o
 obj-$(CONFIG_ROCKCHIP_DEBUG) += rockchip_debug.o
diff --git a/drivers/soc/rockchip/rockchip_thunderboot_mmc.c b/drivers/soc/rockchip/rockchip_thunderboot_mmc.c
new file mode 100644
index 000000000000..20df41745163
--- /dev/null
+++ b/drivers/soc/rockchip/rockchip_thunderboot_mmc.c
@@ -0,0 +1,130 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 Rockchip Electronics Co., Ltd.
+ */
+#include <linux/iopoll.h>
+#include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/soc/rockchip/rockchip_decompress.h>
+
+#define SDMMC_RINTSTS		0x044
+#define SDMMC_STATUS		0x048
+#define SDMMC_IDSTS		0x08c
+#define SDMMC_INTR_ERROR	0xB7C2
+
+static int rk_tb_mmc_thread(void *p)
+{
+	int ret = 0;
+	struct platform_device *pdev = p;
+	void __iomem *regs;
+	struct resource *res;
+	struct device_node *rds, *rdd, *dma;
+	struct device *dev = &pdev->dev;
+	u32 status;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	regs = ioremap(res->start, resource_size(res));
+	if (!regs) {
+		dev_err(dev, "ioremap failed for resource %pR\n", res);
+		return -ENOMEM;
+	}
+
+	rds = of_parse_phandle(dev->of_node, "memory-region-src", 0);
+	rdd = of_parse_phandle(dev->of_node, "memory-region-dst", 0);
+	dma = of_parse_phandle(dev->of_node, "memory-region-idmac", 0);
+
+	if (readl_poll_timeout(regs + SDMMC_STATUS, status,
+			       !(status & (BIT(10) | GENMASK(7, 4))), 100,
+			       500 * USEC_PER_MSEC))
+		dev_err(dev, "Controller is occupied!\n");
+
+	if (readl_poll_timeout(regs + SDMMC_IDSTS, status,
+			       !(status & GENMASK(16, 13)), 100,
+			       500 * USEC_PER_MSEC))
+		dev_err(dev, "DMA is still running!\n");
+
+	status = readl_relaxed(regs + SDMMC_RINTSTS);
+	if (status & SDMMC_INTR_ERROR) {
+		dev_err(dev, "SDMMC_INTR_ERROR status: 0x%08x\n", status);
+		goto out;
+	}
+
+	/* Parse ramdisk addr and help start decompressing */
+	if (rds && rdd) {
+		struct resource src, dst;
+
+		if (of_address_to_resource(rds, 0, &src) >= 0 &&
+		    of_address_to_resource(rdd, 0, &dst) >= 0) {
+			/*
+			 * Decompress HW driver will free reserved area of
+			 * memory-region-src.
+			 */
+			ret = rk_decom_start(GZIP_MOD, src.start,
+					     dst.start,
+					     resource_size(&dst));
+			if (ret < 0)
+				dev_err(dev, "failed to start decom\n");
+		}
+	}
+
+	/* Release idmac descriptor */
+	if (dma) {
+		struct resource idmac;
+
+		ret = of_address_to_resource(dma, 0, &idmac);
+		if (ret >= 0)
+			free_reserved_area(phys_to_virt(idmac.start),
+					   phys_to_virt(idmac.start) + resource_size(&idmac),
+					   -1, NULL);
+	}
+
+out:
+	of_node_put(rds);
+	of_node_put(rdd);
+	of_node_put(dma);
+	iounmap(regs);
+
+	return 0;
+}
+
+static int rk_tb_mmc_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct task_struct *tsk;
+
+	tsk = kthread_run(rk_tb_mmc_thread, pdev, "tb_mmc");
+	if (IS_ERR(tsk)) {
+		ret = PTR_ERR(tsk);
+		dev_err(&pdev->dev, "start thread failed (%d)\n", ret);
+	}
+
+	return ret;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id rk_tb_mmc_dt_match[] = {
+	{ .compatible = "rockchip,thunder-boot-mmc" },
+	{},
+};
+#endif
+
+static struct platform_driver rk_tb_mmc_driver = {
+	.driver		= {
+		.name	= "rockchip_thunder_boot_mmc",
+		.of_match_table = rk_tb_mmc_dt_match,
+	},
+	.probe = rk_tb_mmc_probe,
+};
+
+static int __init rk_tb_mmc_init(void)
+{
+	return platform_driver_register(&rk_tb_mmc_driver);
+}
+
+pure_initcall(rk_tb_mmc_init);
-- 
2.35.3

