From 633535034ac8441b594c2f6583e779c7686fdb25 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Mon, 18 Mar 2019 11:57:52 +0800
Subject: [PATCH] media: rockchip: isp1: fix reset on too high isp_clk rate
 will result in bus dead

Change-Id: I4e99c011a599901dbc1aaba147dcc77df9692fd1
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
---
 drivers/media/platform/rockchip/isp1/dev.c    |  2 +-
 drivers/media/platform/rockchip/isp1/rkisp1.c | 20 ++++++++++++++++++-
 2 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp1/dev.c b/drivers/media/platform/rockchip/isp1/dev.c
index 7f132e71ecf2..7ece69cee2d6 100644
--- a/drivers/media/platform/rockchip/isp1/dev.c
+++ b/drivers/media/platform/rockchip/isp1/dev.c
@@ -753,7 +753,7 @@ static const unsigned int rk1808_isp_clk_rate[] = {
 
 /* isp clock adjustment table (MHz) */
 static const unsigned int rk3288_isp_clk_rate[] = {
-	384, 500, 594
+	150, 384, 500, 594
 };
 
 /* isp clock adjustment table (MHz) */
diff --git a/drivers/media/platform/rockchip/isp1/rkisp1.c b/drivers/media/platform/rockchip/isp1/rkisp1.c
index 54ce2fe6ab41..8f5d67123749 100644
--- a/drivers/media/platform/rockchip/isp1/rkisp1.c
+++ b/drivers/media/platform/rockchip/isp1/rkisp1.c
@@ -32,6 +32,7 @@
  * SOFTWARE.
  */
 
+#include <linux/clk.h>
 #include <linux/iopoll.h>
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
@@ -602,6 +603,7 @@ static int rkisp1_config_cif(struct rkisp1_device *dev)
 static int rkisp1_isp_stop(struct rkisp1_device *dev)
 {
 	void __iomem *base = dev->base_addr;
+	unsigned long old_rate, safe_rate;
 	u32 val;
 	u32 i;
 
@@ -666,7 +668,23 @@ static int rkisp1_isp_stop(struct rkisp1_device *dev)
 		 readl(base + CIF_ISP_CTRL),
 		 readl(base + CIF_MIPI_CTRL));
 
-	writel(CIF_IRCL_CIF_SW_RST, base + CIF_IRCL);
+	if (!in_interrupt()) {
+		/* normal case */
+		/* check the isp_clk before isp reset operation */
+		old_rate = clk_get_rate(dev->clks[0]);
+		safe_rate = dev->clk_rate_tbl[0] * 1000000UL;
+		if (old_rate > safe_rate) {
+			clk_set_rate(dev->clks[0], safe_rate);
+			udelay(100);
+		}
+		writel(CIF_IRCL_CIF_SW_RST, base + CIF_IRCL);
+		/* restore the old ispclk after reset */
+		if (old_rate != safe_rate)
+			clk_set_rate(dev->clks[0], old_rate);
+	} else {
+		/* abnormal case, in irq function */
+		writel(CIF_IRCL_CIF_SW_RST, base + CIF_IRCL);
+	}
 	if (dev->isp_ver == ISP_V12 || dev->isp_ver == ISP_V13) {
 		writel(0, base + CIF_ISP_CSI0_CSI2_RESETN);
 		writel(0, base + CIF_ISP_CSI0_CTRL0);
-- 
2.35.3

