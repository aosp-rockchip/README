From 6e639581287ae19c5831dfa3549c9488cf47773c Mon Sep 17 00:00:00 2001
From: Tao Huang <huangtao@rock-chips.com>
Date: Fri, 19 Jun 2020 20:57:50 +0800
Subject: [PATCH] Input: sensor-dev - Fix warning

drivers/input/sensors/sensor-dev.c:1600:5: warning:
no previous prototype for 'sensor_probe' [-Wmissing-prototypes]

drivers/input/sensors/sensor-dev.c:1854:3: warning:
this statement may fall through [-Wimplicit-fallthrough=]

drivers/input/sensors/sensor-dev.c:1857 sensor_probe() warn:
missing break? reassigning 'sensor->input_dev->name'

drivers/input/sensors/sensor-dev.c:1602:30: warning:
Value stored to 'sensor' during its initialization is never read

drivers/input/sensors/sensor-dev.c:504:3: warning:
Value stored to 'result' is never read

Unneeded variable: "result". Return "0" on line 893
Unneeded variable: "result". Return "0" on line 908

Fixes: a32d316fcc3c ("driver: sensors: improve sensor driver to pass android vts test")
Change-Id: I95bdc5373694e0a78f9a29583a3138e14eae6126
Signed-off-by: Tao Huang <huangtao@rock-chips.com>
---
 drivers/input/sensors/sensor-dev.c | 15 ++++++---------
 1 file changed, 6 insertions(+), 9 deletions(-)

diff --git a/drivers/input/sensors/sensor-dev.c b/drivers/input/sensors/sensor-dev.c
index 1ea9d153cbfb..2872c1792d4c 100644
--- a/drivers/input/sensors/sensor-dev.c
+++ b/drivers/input/sensors/sensor-dev.c
@@ -501,7 +501,7 @@ static int sensor_reset_rate(struct i2c_client *client, int rate)
 			sensor->stop_work = 1;
 			cancel_delayed_work_sync(&sensor->delaywork);
 		}
-		result = sensor->ops->active(client, SENSOR_OFF, rate);
+		sensor->ops->active(client, SENSOR_OFF, rate);
 		result = sensor->ops->active(client, SENSOR_ON, rate);
 		if (!sensor->pdata->irq_enable) {
 			sensor->stop_work = 0;
@@ -881,7 +881,6 @@ static long gsensor_dev_ioctl(struct file *file,
 static int compass_dev_open(struct inode *inode, struct file *file)
 {
 	struct sensor_private_data *sensor = g_sensor[SENSOR_TYPE_COMPASS];
-	int result = 0;
 	int flag = 0;
 
 	flag = atomic_read(&sensor->flags.open_flag);
@@ -890,13 +889,12 @@ static int compass_dev_open(struct inode *inode, struct file *file)
 		wake_up(&sensor->flags.open_wq);
 	}
 
-	return result;
+	return 0;
 }
 
 static int compass_dev_release(struct inode *inode, struct file *file)
 {
 	struct sensor_private_data *sensor = g_sensor[SENSOR_TYPE_COMPASS];
-	int result = 0;
 	int flag = 0;
 
 	flag = atomic_read(&sensor->flags.open_flag);
@@ -905,7 +903,7 @@ static int compass_dev_release(struct inode *inode, struct file *file)
 		wake_up(&sensor->flags.open_wq);
 	}
 
-	return result;
+	return 0;
 }
 
 #ifdef CONFIG_COMPAT
@@ -1597,10 +1595,9 @@ int sensor_unregister_slave(int type, struct i2c_client *client,
 	return result;
 }
 
-int sensor_probe(struct i2c_client *client, const struct i2c_device_id *devid)
+static int sensor_probe(struct i2c_client *client, const struct i2c_device_id *devid)
 {
-	struct sensor_private_data *sensor =
-	    (struct sensor_private_data *) i2c_get_clientdata(client);
+	struct sensor_private_data *sensor;
 	struct sensor_platform_data *pdata;
 	struct device_node *np = client->dev.of_node;
 	enum of_gpio_flags rst_flags, pwr_flags;
@@ -1852,7 +1849,7 @@ int sensor_probe(struct i2c_client *client, const struct i2c_device_id *devid)
 		input_set_abs_params(sensor->input_dev, ABS_Y, sensor->ops->range[0], sensor->ops->range[1], 0, 0);
 		/* z-axis acceleration */
 		input_set_abs_params(sensor->input_dev, ABS_Z, sensor->ops->range[0], sensor->ops->range[1], 0, 0);
-
+		break;
 	case SENSOR_TYPE_ACCEL:
 		sensor->input_dev->name = "gsensor";
 		set_bit(EV_ABS, sensor->input_dev->evbit);
-- 
2.35.3

