From 88d1b886cbf6a508541b06a30b3450456ff9207d Mon Sep 17 00:00:00 2001
From: Allon Huang <allon.huang@rock-chips.com>
Date: Fri, 8 May 2020 17:19:04 +0800
Subject: [PATCH] drivers: media: platform: rockchip: cif: support vicap
 samples data with mipi for rv1126

Signed-off-by: Allon Huang <allon.huang@rock-chips.com>
Change-Id: I3c62126cb1f64d0d627d1579fcf2d4d3b11cab0f
---
 drivers/media/platform/rockchip/cif/capture.c | 350 ++++++++++++++++--
 drivers/media/platform/rockchip/cif/dev.c     | 103 +++++-
 drivers/media/platform/rockchip/cif/dev.h     |   4 +
 .../media/platform/rockchip/cif/mipi-csi2.c   |  63 +++-
 drivers/media/platform/rockchip/cif/regs.h    | 116 +++++-
 drivers/media/platform/rockchip/cif/version.h |   1 +
 6 files changed, 580 insertions(+), 57 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index 8d565213a8ed..493b0e4fe0ea 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -503,6 +503,281 @@ cif_output_fmt *find_output_fmt(struct rkcif_stream *stream, u32 pixelfmt)
 	return NULL;
 }
 
+static enum cif_reg_index get_reg_index_of_id_ctrl0(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_ID0_CTRL0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_ID1_CTRL0;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_ID2_CTRL0;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_ID3_CTRL0;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_ID0_CTRL0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_id_ctrl1(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_ID0_CTRL1;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_ID1_CTRL1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_ID2_CTRL1;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_ID3_CTRL1;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_ID0_CTRL1;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm0_y_addr(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm1_y_addr(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm0_uv_addr(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm1_uv_addr(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm0_y_vlw(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm1_y_vlw(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm0_uv_vlw(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_frm1_uv_vlw(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID0;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID1;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID2;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID3;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID0;
+		break;
+	}
+
+	return index;
+}
+
+static enum cif_reg_index get_reg_index_of_id_crop_start(int channel_id)
+{
+	enum cif_reg_index index;
+
+	switch (channel_id) {
+	case 0:
+		index = CIF_REG_MIPI_LVDS_ID0_CROP_START;
+		break;
+	case 1:
+		index = CIF_REG_MIPI_LVDS_ID1_CROP_START;
+		break;
+	case 2:
+		index = CIF_REG_MIPI_LVDS_ID2_CROP_START;
+		break;
+	case 3:
+		index = CIF_REG_MIPI_LVDS_ID3_CROP_START;
+		break;
+	default:
+		index = CIF_REG_MIPI_LVDS_ID0_CROP_START;
+		break;
+	}
+
+	return index;
+}
+
 /***************************** stream operations ******************************/
 static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
 					     enum rkcif_yuvaddr_state stat)
@@ -617,10 +892,10 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 		u32 frm1_addr_y, frm1_addr_uv;
 
 		if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2) {
-			frm0_addr_y = CIF_CSI_FRM0_ADDR_Y_ID0 + 0x20 * csi_ch;
-			frm0_addr_uv = CIF_CSI_FRM0_ADDR_UV_ID0 + 0x20 * csi_ch;
-			frm1_addr_y = CIF_CSI_FRM1_ADDR_Y_ID0 + 0x20 * csi_ch;
-			frm1_addr_uv = CIF_CSI_FRM1_ADDR_UV_ID0 + 0x20 * csi_ch;
+			frm0_addr_y = get_reg_index_of_frm0_y_addr(csi_ch);
+			frm0_addr_uv = get_reg_index_of_frm0_uv_addr(csi_ch);
+			frm1_addr_y = get_reg_index_of_frm1_y_addr(csi_ch);
+			frm1_addr_uv = get_reg_index_of_frm1_uv_addr(csi_ch);
 		} else {
 			frm0_addr_y = CIF_REG_DVP_FRM0_ADDR_Y;
 			frm0_addr_uv = CIF_REG_DVP_FRM0_ADDR_UV;
@@ -669,11 +944,11 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 	} else {
 		if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2) {
 			frm_addr_y = stream->frame_phase & CIF_CSI_FRAME1_READY ?
-				     (CIF_CSI_FRM1_ADDR_Y_ID0 + 0x20 * csi_ch) :
-				     (CIF_CSI_FRM0_ADDR_Y_ID0 + 0x20 * csi_ch);
+				     get_reg_index_of_frm1_y_addr(csi_ch) :
+				     get_reg_index_of_frm0_y_addr(csi_ch);
 			frm_addr_uv = stream->frame_phase & CIF_CSI_FRAME1_READY ?
-				      (CIF_CSI_FRM1_ADDR_UV_ID0 + 0x20 * csi_ch) :
-				      (CIF_CSI_FRM0_ADDR_UV_ID0 + 0x20 * csi_ch);
+				      get_reg_index_of_frm1_uv_addr(csi_ch) :
+				      get_reg_index_of_frm0_uv_addr(csi_ch);
 		} else {
 			frm_addr_y = stream->frame_phase & CIF_CSI_FRAME1_READY ?
 				     CIF_FRM1_ADDR_Y : CIF_FRM0_ADDR_Y;
@@ -821,51 +1096,56 @@ static int rkcif_csi_channel_init(struct rkcif_stream *stream,
 static int rkcif_csi_channel_set(struct rkcif_stream *stream,
 				 struct csi_channel_info *channel)
 {
-	struct rkcif_device *dev = stream->cifdev;
-	void __iomem *base = dev->base_addr;
 	unsigned int val;
+	struct rkcif_device *dev = stream->cifdev;
 
 	if (channel->id >= 4)
 		return -EINVAL;
 
 	if (!channel->enable) {
-		write_cif_reg(base, CIF_CSI_ID0_CTRL0 + 0x8 * channel->id,
-			      CSI_DISABLE_CAPTURE);
+		rkcif_write_register(dev, get_reg_index_of_id_ctrl0(channel->id),
+				     CSI_DISABLE_CAPTURE);
 		return 0;
 	}
 
-	write_cif_reg_and(base, CIF_CSI_INTSTAT,
-			  ~(CSI_START_INTSTAT(channel->id) |
-			  CSI_DMA_END_INTSTAT(channel->id) |
-			  CSI_LINE_INTSTAT(channel->id)));
-	write_cif_reg_or(base, CIF_CSI_INTEN,
-			 CSI_DMA_END_INTEN(channel->id));
+	rkcif_write_register_and(dev, CIF_REG_MIPI_LVDS_INTSTAT,
+				 ~(CSI_START_INTSTAT(channel->id) |
+				 CSI_DMA_END_INTSTAT(channel->id) |
+				 CSI_LINE_INTSTAT(channel->id)));
+
+	rkcif_write_register_or(dev, CIF_REG_MIPI_LVDS_INTEN,
+				CSI_DMA_END_INTEN(channel->id));
+
+	rkcif_write_register(dev, CIF_REG_MIPI_WATER_LINE, 0x70012);
+
+	rkcif_write_register(dev, CIF_REG_MIPI_LVDS_CTRL, 0x7075);
+
+	rkcif_write_register_or(dev, CIF_REG_MIPI_LVDS_INTEN,
+				CSI_ALL_ERROR_INTEN);
 
-	write_cif_reg(base, CIF_CSI_WATER_LINE, 0x70012);
-	write_cif_reg_or(base, CIF_CSI_INTEN, CSI_ALL_ERROR_INTEN);
+	rkcif_write_register(dev, get_reg_index_of_id_ctrl1(channel->id),
+			     channel->width | (channel->height << 16));
 
-	write_cif_reg(base, CIF_CSI_ID0_CTRL1 + 0x8 * channel->id,
-		      channel->width | (channel->height << 16));
-	write_cif_reg(base, CIF_CSI_FRM0_VLW_Y_ID0 + 0x20 * channel->id,
-		      channel->virtual_width);
-	write_cif_reg(base, CIF_CSI_FRM1_VLW_Y_ID0 + 0x20 * channel->id,
-		      channel->virtual_width);
-	write_cif_reg(base, CIF_CSI_FRM0_VLW_UV_ID0 + 0x20 * channel->id,
-		      channel->virtual_width);
-	write_cif_reg(base, CIF_CSI_FRM1_VLW_UV_ID0 + 0x20 * channel->id,
-		      channel->virtual_width);
+	rkcif_write_register(dev, get_reg_index_of_frm0_y_vlw(channel->id),
+			     channel->virtual_width);
+	rkcif_write_register(dev, get_reg_index_of_frm1_y_vlw(channel->id),
+			     channel->virtual_width);
+	rkcif_write_register(dev, get_reg_index_of_frm0_uv_vlw(channel->id),
+			     channel->virtual_width);
+	rkcif_write_register(dev, get_reg_index_of_frm1_uv_vlw(channel->id),
+			     channel->virtual_width);
 
 	if (channel->crop_en)
-		write_cif_reg(base, CIF_CSI_ID0_CROP_START + 0x4 * channel->id,
-			      channel->crop_st_y << 16 | channel->crop_st_x);
+		rkcif_write_register(dev, get_reg_index_of_id_crop_start(channel->id),
+				     channel->crop_st_y << 16 | channel->crop_st_x);
 
 	/* Set up an buffer for the next frame */
 	rkcif_assign_new_buffer_pingpong(stream, 1, channel->id);
 
 	val = CSI_ENABLE_CAPTURE | channel->fmt_val |
-		channel->cmd_mode_en << 4 | channel->crop_en << 5 |
-		channel->id << 8 | channel->data_type << 10;
-	write_cif_reg(base, CIF_CSI_ID0_CTRL0 + 0x8 * channel->id, val);
+	      channel->cmd_mode_en << 4 | channel->crop_en << 5 |
+	      channel->id << 8 | channel->data_type << 10 ;
+	rkcif_write_register(dev, get_reg_index_of_id_ctrl0(channel->id), val);
 
 	return 0;
 }
diff --git a/drivers/media/platform/rockchip/cif/dev.c b/drivers/media/platform/rockchip/cif/dev.c
index cdfe2c7f2723..3f9aa7f10105 100644
--- a/drivers/media/platform/rockchip/cif/dev.c
+++ b/drivers/media/platform/rockchip/cif/dev.c
@@ -59,12 +59,52 @@ void rkcif_write_register(struct rkcif_device *dev,
 		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0))
 			write_cif_reg(base, reg->offset, val);
 		else
-			dev_warn(dev->dev, "write reg[%d] failed, maybe useless!!!\n", index);
+			dev_warn(dev->dev,
+				 "write reg[%d]:0x%x failed, maybe useless!!!\n",
+				 index, val);
 	}
+}
+
+void rkcif_write_register_or(struct rkcif_device *dev,
+			     enum cif_reg_index index, u32 val)
+{
+	unsigned int reg_val = 0x0;
+	void __iomem *base = dev->base_addr;
+	const struct cif_reg *reg = &dev->cif_regs[index];
+
+	if (index < CIF_REG_INDEX_MAX) {
+		if (index == CIF_REG_DVP_CTRL ||
+		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0)) {
+			reg_val = read_cif_reg(base, reg->offset);
+			reg_val |= val;
+			write_cif_reg(base, reg->offset, reg_val);
+		} else {
+			dev_warn(dev->dev,
+				 "write reg[%d]:0x%x with OR failed, maybe useless!!!\n",
+				 index, val);
+		}
+	}
+}
+
+void rkcif_write_register_and(struct rkcif_device *dev,
+			      enum cif_reg_index index, u32 val)
+{
+	unsigned int reg_val = 0x0;
+	void __iomem *base = dev->base_addr;
+	const struct cif_reg *reg = &dev->cif_regs[index];
 
-	if (index == CIF_REG_DVP_VIR_LINE_WIDTH)
-		dev_warn(dev->dev, "reg[%d] offset:0x%x, val:0x%x\n",
-			 index, reg->offset, val);
+	if (index < CIF_REG_INDEX_MAX) {
+		if (index == CIF_REG_DVP_CTRL ||
+		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0)) {
+			reg_val = read_cif_reg(base, reg->offset);
+			reg_val &= val;
+			write_cif_reg(base, reg->offset, reg_val);
+		} else {
+			dev_warn(dev->dev,
+				 "write reg[%d]:0x%x with OR failed, maybe useless!!!\n",
+				 index, val);
+		}
+	}
 }
 
 unsigned int rkcif_read_register(struct rkcif_device *dev,
@@ -79,7 +119,9 @@ unsigned int rkcif_read_register(struct rkcif_device *dev,
 		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0))
 			val = read_cif_reg(base, reg->offset);
 		else
-			dev_warn(dev->dev, "read reg[%d] failed, maybe useless!!!\n", index);
+			dev_warn(dev->dev,
+				 "read reg[%d] failed, maybe useless!!!\n",
+				 index);
 	}
 
 	return val;
@@ -176,7 +218,7 @@ static int rkcif_pipeline_set_stream(struct rkcif_pipeline *p, bool on)
 		rockchip_set_system_status(SYS_STATUS_CIF0);
 
 	/* phy -> sensor */
-	for (i = p->num_subdevs - 1; i > -1; --i) {
+	for (i = 0; i < p->num_subdevs; i++) {
 		ret = v4l2_subdev_call(p->subdevs[i], video, s_stream, on);
 		if (on && ret < 0 && ret != -ENOIOCTLCMD && ret != -ENODEV)
 			goto err_stream_off;
@@ -591,6 +633,8 @@ static const char * const rv1126_cif_clks[] = {
 	"hclk_cif",
 	"aclk_cif_lite",
 	"hclk_cif_lite",
+	"dclk_cif",
+	"dclk_cif_lite",
 };
 
 static const char * const rv1126_cif_rsts[] = {
@@ -625,6 +669,53 @@ static const struct cif_reg rv1126_cif_regs[] = {
 	[CIF_REG_DVP_CUR_DST] = CIF_REG(RV1126_CIF_CUR_DST),
 	[CIF_REG_DVP_LAST_LINE] = CIF_REG(RV1126_CIF_LAST_LINE),
 	[CIF_REG_DVP_LAST_PIX] = CIF_REG(RV1126_CIF_LAST_PIX),
+	[CIF_REG_MIPI_LVDS_ID0_CTRL0] = CIF_REG(CIF_CSI_ID0_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID0_CTRL1] = CIF_REG(CIF_CSI_ID0_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID1_CTRL0] = CIF_REG(CIF_CSI_ID1_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID1_CTRL1] = CIF_REG(CIF_CSI_ID1_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID2_CTRL0] = CIF_REG(CIF_CSI_ID2_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID2_CTRL1] = CIF_REG(CIF_CSI_ID2_CTRL1),
+	[CIF_REG_MIPI_LVDS_ID3_CTRL0] = CIF_REG(CIF_CSI_ID3_CTRL0),
+	[CIF_REG_MIPI_LVDS_ID3_CTRL1] = CIF_REG(CIF_CSI_ID3_CTRL1),
+	[CIF_REG_MIPI_LVDS_CTRL] = CIF_REG(CIF_CSI_MIPI_LVDS_CTRL),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID0] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID0] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID0] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID0] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID0] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID0] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID0] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID0] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID0),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID1] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID1] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID1] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID1] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID1] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID1] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID1] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID1] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID1),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID2] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID2] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID2] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID2] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID2] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID2] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID2] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID2] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID2),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID3] = CIF_REG(CIF_CSI_FRM0_ADDR_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID3] = CIF_REG(CIF_CSI_FRM1_ADDR_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID3] = CIF_REG(CIF_CSI_FRM0_ADDR_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID3] = CIF_REG(CIF_CSI_FRM1_ADDR_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID3] = CIF_REG(CIF_CSI_FRM0_VLW_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID3] = CIF_REG(CIF_CSI_FRM1_VLW_Y_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID3] = CIF_REG(CIF_CSI_FRM0_VLW_UV_ID3),
+	[CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID3] = CIF_REG(CIF_CSI_FRM1_VLW_UV_ID3),
+	[CIF_REG_MIPI_LVDS_INTEN] = CIF_REG(CIF_CSI_INTEN),
+	[CIF_REG_MIPI_LVDS_INTSTAT] = CIF_REG(CIF_CSI_INTSTAT),
+	[CIF_REG_MIPI_LVDS_ID0_CROP_START] = CIF_REG(CIF_CSI_ID0_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID1_CROP_START] = CIF_REG(CIF_CSI_ID1_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID2_CROP_START] = CIF_REG(CIF_CSI_ID2_CROP_START),
+	[CIF_REG_MIPI_LVDS_ID3_CROP_START] = CIF_REG(CIF_CSI_ID3_CROP_START),
 };
 
 static const struct cif_match_data px30_cif_match_data = {
diff --git a/drivers/media/platform/rockchip/cif/dev.h b/drivers/media/platform/rockchip/cif/dev.h
index b8d524c88eb3..1218f723dde8 100644
--- a/drivers/media/platform/rockchip/cif/dev.h
+++ b/drivers/media/platform/rockchip/cif/dev.h
@@ -314,6 +314,10 @@ struct rkcif_device {
 
 void rkcif_write_register(struct rkcif_device *dev,
 			  enum cif_reg_index index, u32 val);
+void rkcif_write_register_or(struct rkcif_device *dev,
+			     enum cif_reg_index index, u32 val);
+void rkcif_write_register_and(struct rkcif_device *dev,
+			      enum cif_reg_index index, u32 val);
 unsigned int rkcif_read_register(struct rkcif_device *dev,
 				 enum cif_reg_index index);
 void rkcif_unregister_stream_vdevs(struct rkcif_device *dev,
diff --git a/drivers/media/platform/rockchip/cif/mipi-csi2.c b/drivers/media/platform/rockchip/cif/mipi-csi2.c
index 0a24b73e9a2d..8b817e0a9201 100644
--- a/drivers/media/platform/rockchip/cif/mipi-csi2.c
+++ b/drivers/media/platform/rockchip/cif/mipi-csi2.c
@@ -42,7 +42,8 @@ enum rkcsi2_chip_id {
 	CHIP_PX30_CSI2,
 	CHIP_RK1808_CSI2,
 	CHIP_RK3128_CSI2,
-	CHIP_RK3288_CSI2
+	CHIP_RK3288_CSI2,
+	CHIP_RV1126_CSI2
 };
 
 enum csi2_pads {
@@ -74,6 +75,7 @@ struct csi2_dev {
 	struct v4l2_subdev      sd;
 	struct media_pad       pad[CSI2_NUM_PADS];
 	struct clk             *pix_clk; /* what is this? */
+	struct clk             *srst_clk;
 	void __iomem           *base;
 	struct v4l2_async_notifier	notifier;
 	struct v4l2_fwnode_bus_mipi_csi2 bus;
@@ -153,8 +155,6 @@ static void csi2_disable(struct csi2_dev *csi2)
 	write_csihost_reg(base, CSIHOST_RESETN, 0);
 	write_csihost_reg(base, CSIHOST_MSK1, 0xffffffff);
 	write_csihost_reg(base, CSIHOST_MSK2, 0xffffffff);
-
-	v4l2_info(&csi2->sd, "mipi csi host disable\n");
 }
 
 static void csi2_enable(struct csi2_dev *csi2,
@@ -181,8 +181,6 @@ static void csi2_enable(struct csi2_dev *csi2,
 	}
 
 	write_csihost_reg(base, CSIHOST_RESETN, 1);
-
-	v4l2_info(&csi2->sd, "mipi csi host enable\n");
 }
 
 static int csi2_start(struct csi2_dev *csi2)
@@ -194,6 +192,14 @@ static int csi2_start(struct csi2_dev *csi2)
 	if (ret)
 		return ret;
 
+	if (!IS_ERR(csi2->srst_clk)) {
+		ret = clk_prepare_enable(csi2->srst_clk);
+		if (ret) {
+			clk_disable_unprepare(csi2->pix_clk);
+			return ret;
+		}
+	}
+
 	if (csi2->format_mbus.code == MEDIA_BUS_FMT_RGB888_1X24)
 		host_type = RK_DSI_RXHOST;
 	else
@@ -202,14 +208,28 @@ static int csi2_start(struct csi2_dev *csi2)
 	csi2_enable(csi2, host_type);
 
 	pr_debug("stream sd: %s\n", csi2->src_sd->name);
+	ret = v4l2_subdev_call(csi2->src_sd, video, s_stream, 1);
+	ret = (ret && ret != -ENOIOCTLCMD) ? ret : 0;
+	if (ret)
+		goto err_assert_reset;
 
 	return 0;
+
+err_assert_reset:
+	csi2_disable(csi2);
+	clk_disable_unprepare(csi2->pix_clk);
+	clk_disable_unprepare(csi2->srst_clk);
+	return ret;
 }
 
 static void csi2_stop(struct csi2_dev *csi2)
 {
+	/* stop upstream */
+	v4l2_subdev_call(csi2->src_sd, video, s_stream, 0);
+
 	csi2_disable(csi2);
 	clk_disable_unprepare(csi2->pix_clk);
+	clk_disable_unprepare(csi2->srst_clk);
 }
 
 /*
@@ -223,9 +243,9 @@ static int csi2_s_stream(struct v4l2_subdev *sd, int enable)
 
 	mutex_lock(&csi2->lock);
 
-	dev_err(csi2->dev, "stream %s, src_sd: %p\n",
-		enable ? "ON" : "OFF",
-		csi2->src_sd);
+	dev_err(csi2->dev, "stream %s, src_sd: %p, sd_name:%s\n",
+		enable ? "on" : "off",
+		csi2->src_sd, csi2->src_sd->name);
 
 	/*
 	 * enable/disable streaming only if stream_count is
@@ -418,8 +438,8 @@ csi2_notifier_bound(struct v4l2_async_notifier *notifier,
 	}
 
 	ret = media_create_pad_link(&sensor->sd->entity, pad,
-				       &csi2->sd.entity, RK_CSI2_PAD_SINK,
-				       0/* csi2->num_sensors != 1 ? 0 : MEDIA_LNK_FL_ENABLED */);
+				    &csi2->sd.entity, RK_CSI2_PAD_SINK,
+				    0/* csi2->num_sensors != 1 ? 0 : MEDIA_LNK_FL_ENABLED */);
 	if (ret) {
 		dev_err(csi2->dev,
 			"failed to create link for %s\n",
@@ -505,10 +525,10 @@ static int csi2_notifier(struct csi2_dev *csi2)
 	struct v4l2_async_notifier *ntf = &csi2->notifier;
 	int ret;
 
-	ret = v4l2_async_notifier_parse_fwnode_endpoints_by_port(
-		csi2->dev, &csi2->notifier,
-		sizeof(struct v4l2_async_subdev), 0,
-		csi2_parse_endpoint);
+	ret = v4l2_async_notifier_parse_fwnode_endpoints_by_port(csi2->dev,
+								 &csi2->notifier,
+								 sizeof(struct v4l2_async_subdev), 0,
+								 csi2_parse_endpoint);
 	if (ret < 0)
 		return ret;
 
@@ -538,6 +558,11 @@ static const struct csi2_match_data rk3288_csi2_match_data = {
 	.num_pads = CSI2_NUM_PADS_SINGLE_LINK
 };
 
+static const struct csi2_match_data rv1126_csi2_match_data = {
+	.chip_id = CHIP_RV1126_CSI2,
+	.num_pads = CSI2_NUM_PADS
+};
+
 static const struct of_device_id csi2_dt_ids[] = {
 	{
 		.compatible = "rockchip,rk1808-mipi-csi2",
@@ -547,6 +572,11 @@ static const struct of_device_id csi2_dt_ids[] = {
 		.compatible = "rockchip,rk3288-mipi-csi2",
 		.data = &rk3288_csi2_match_data,
 	},
+	{
+		.compatible = "rockchip,rv1126-mipi-csi2",
+		.data = &rv1126_csi2_match_data,
+	},
+
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, csi2_dt_ids);
@@ -590,6 +620,11 @@ static int csi2_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	csi2->srst_clk = devm_clk_get(&pdev->dev, "srst_csihost_p");
+	if (IS_ERR(csi2->srst_clk)) {
+		v4l2_warn(&csi2->sd, "failed to get rst clock, maybe useless\n");
+	}
+
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	csi2->base = devm_ioremap_resource(&pdev->dev, res);
 	if (IS_ERR(csi2->base)) {
diff --git a/drivers/media/platform/rockchip/cif/regs.h b/drivers/media/platform/rockchip/cif/regs.h
index 1fc54a383a22..437d66ebdad4 100644
--- a/drivers/media/platform/rockchip/cif/regs.h
+++ b/drivers/media/platform/rockchip/cif/regs.h
@@ -12,9 +12,10 @@ struct cif_reg {
 	u32 offset;
 };
 
-#define CIF_REG(_offset)		{ .offset = _offset, }
+#define CIF_REG(_offset)		{ .offset = (_offset), }
 
 enum cif_reg_index {
+	/* dvp registers index */
 	CIF_REG_DVP_CTRL = 0x0,
 	CIF_REG_DVP_INTEN,
 	CIF_REG_DVP_INTSTAT,
@@ -48,6 +49,87 @@ enum cif_reg_index {
 	CIF_REG_DVP_CUR_DST,
 	CIF_REG_DVP_LAST_LINE,
 	CIF_REG_DVP_LAST_PIX,
+	/* mipi & lvds registers index */
+	CIF_REG_MIPI_LVDS_ID0_CTRL0,
+	CIF_REG_MIPI_LVDS_ID0_CTRL1,
+	CIF_REG_MIPI_LVDS_ID1_CTRL0,
+	CIF_REG_MIPI_LVDS_ID1_CTRL1,
+	CIF_REG_MIPI_LVDS_ID2_CTRL0,
+	CIF_REG_MIPI_LVDS_ID2_CTRL1,
+	CIF_REG_MIPI_LVDS_ID3_CTRL0,
+	CIF_REG_MIPI_LVDS_ID3_CTRL1,
+	CIF_REG_MIPI_WATER_LINE,
+	CIF_REG_MIPI_LVDS_CTRL,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID0,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID0,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID0,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID0,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID0,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID0,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID0,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID0,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID1,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID1,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID1,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID1,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID1,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID1,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID1,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID1,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID2,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID2,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID2,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID2,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID2,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID2,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID2,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID2,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_Y_ID3,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_Y_ID3,
+	CIF_REG_MIPI_LVDS_FRAME0_ADDR_UV_ID3,
+	CIF_REG_MIPI_LVDS_FRAME1_ADDR_UV_ID3,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_Y_ID3,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_Y_ID3,
+	CIF_REG_MIPI_LVDS_FRAME0_VLW_UV_ID3,
+	CIF_REG_MIPI_LVDS_FRAME1_VLW_UV_ID3,
+	CIF_REG_MIPI_LVDS_INTEN,
+	CIF_REG_MIPI_LVDS_INTSTAT,
+	CIF_REG_MIPI_LVDS_LINE_INT_NUM_ID0_1,
+	CIF_REG_MIPI_LVDS_LINE_INT_NUM_ID2_3,
+	CIF_REG_MIPI_LVDS_LINE_LINE_CNT_ID0_1,
+	CIF_REG_MIPI_LVDS_LINE_LINE_CNT_ID2_3,
+	CIF_REG_MIPI_LVDS_ID0_CROP_START,
+	CIF_REG_MIPI_LVDS_ID1_CROP_START,
+	CIF_REG_MIPI_LVDS_ID2_CROP_START,
+	CIF_REG_MIPI_LVDS_ID3_CROP_START,
+	CIF_REG_LVDS_SAV_EAV_ACT0_ID0,
+	CIF_REG_LVDS_SAV_EAV_BLK0_ID0,
+	CIF_REG_LVDS_SAV_EAV_ACT1_ID0,
+	CIF_REG_LVDS_SAV_EAV_BLK1_ID0,
+	CIF_REG_LVDS_SAV_EAV_ACT0_ID1,
+	CIF_REG_LVDS_SAV_EAV_BLK0_ID1,
+	CIF_REG_LVDS_SAV_EAV_ACT1_ID1,
+	CIF_REG_LVDS_SAV_EAV_BLK1_ID1,
+	CIF_REG_LVDS_SAV_EAV_ACT0_ID2,
+	CIF_REG_LVDS_SAV_EAV_BLK0_ID2,
+	CIF_REG_LVDS_SAV_EAV_ACT1_ID2,
+	CIF_REG_LVDS_SAV_EAV_BLK1_ID2,
+	CIF_REG_LVDS_SAV_EAV_ACT0_ID3,
+	CIF_REG_LVDS_SAV_EAV_BLK0_ID3,
+	CIF_REG_LVDS_SAV_EAV_ACT1_ID3,
+	CIF_REG_LVDS_SAV_EAV_BLK1_ID3,
+	CIF_REG_Y_STAT_CONTROL,
+	CIF_REG_Y_STAT_VALUE,
+	CIF_REG_MMU_DTE_ADDR,
+	CIF_REG_MMU_STATUS,
+	CIF_REG_MMU_COMMAND,
+	CIF_REG_MMU_PAGE_FAULT_ADDR,
+	CIF_REG_MMU_ZAP_ONE_LINE,
+	CIF_REG_MMU_INT_RAWSTAT,
+	CIF_REG_MMU_INT_CLEAR,
+	CIF_REG_MMU_INT_MASK,
+	CIF_REG_MMU_INT_STATUS,
+	CIF_REG_MMU_AUTO_GATING,
 	CIF_REG_INDEX_MAX
 };
 
@@ -97,7 +179,7 @@ enum cif_reg_index {
 #define CIF_RAW_STORED_BIT_WIDTH	(16U)
 #define CIF_YUV_STORED_BIT_WIDTH	(8U)
 
-/* RK1808 CIF CSI Registers Offset */
+/* RK1808 & RV1126 CIF CSI & LVDS Registers Offset */
 #define CIF_CSI_ID0_CTRL0		0x80
 #define CIF_CSI_ID0_CTRL1		0x84
 #define CIF_CSI_ID1_CTRL0		0x88
@@ -107,6 +189,7 @@ enum cif_reg_index {
 #define CIF_CSI_ID3_CTRL0		0x98
 #define CIF_CSI_ID3_CTRL1		0x9c
 #define CIF_CSI_WATER_LINE		0xa0
+#define CIF_CSI_MIPI_LVDS_CTRL		0xa0
 #define CIF_CSI_FRM0_ADDR_Y_ID0		0xa4
 #define CIF_CSI_FRM1_ADDR_Y_ID0		0xa8
 #define CIF_CSI_FRM0_ADDR_UV_ID0	0xac
@@ -149,6 +232,34 @@ enum cif_reg_index {
 #define CIF_CSI_ID1_CROP_START		0x140
 #define CIF_CSI_ID2_CROP_START		0x144
 #define CIF_CSI_ID3_CROP_START		0x148
+#define CIF_LVDS_SAV_EAV_ACT0_ID0	0x150
+#define CIF_LVDS_SAV_EAV_BLK0_ID0	0x154
+#define CIF_LVDS_SAV_EAV_ACT1_ID0	0x158
+#define CIF_LVDS_SAV_EAV_BLK1_ID0	0x15c
+#define CIF_LVDS_SAV_EAV_ACT0_ID1	0x160
+#define CIF_LVDS_SAV_EAV_BLK0_ID1	0x164
+#define CIF_LVDS_SAV_EAV_ACT1_ID1	0x168
+#define CIF_LVDS_SAV_EAV_BLK1_ID1	0x16c
+#define CIF_LVDS_SAV_EAV_ACT0_ID2	0x170
+#define CIF_LVDS_SAV_EAV_BLK0_ID2	0x174
+#define CIF_LVDS_SAV_EAV_ACT1_ID2	0x178
+#define CIF_LVDS_SAV_EAV_BLK1_ID2	0x17c
+#define CIF_LVDS_SAV_EAV_ACT0_ID3	0x180
+#define CIF_LVDS_SAV_EAV_BLK0_ID3	0x184
+#define CIF_LVDS_SAV_EAV_ACT1_ID3	0x188
+#define CIF_LVDS_SAV_EAV_BLK1_ID3	0x18c
+#define CIF_Y_STAT_CONTROL		0x190
+#define CIF_Y_STAT_VALUE		0x194
+#define CIF_MMU_DTE_ADDR		0x800
+#define CIF_MMU_STATUS			0x804
+#define CIF_MMU_COMMAND			0x808
+#define CIF_MMU_PAGE_FAULT_ADDR		0x80c
+#define CIF_MMU_ZAP_ONE_LINE		0x810
+#define CIF_MMU_INT_RAWSTAT		0x814
+#define CIF_MMU_INT_CLEAR		0x818
+#define CIF_MMU_INT_MASK		0x81c
+#define CIF_MMU_INT_STATUS		0x820
+#define CIF_MMU_AUTO_GATING		0x824
 
 /* The key register bit description */
 
@@ -257,6 +368,7 @@ enum cif_reg_index {
 #define CSI_ENABLE_COMMAND_MODE		(0x1 << 4)
 #define CSI_DISABLE_CROP		(0x0 << 5)
 #define CSI_ENABLE_CROP			(0x1 << 5)
+#define CSI_ENABLE_MIPI_COMPACT		(0x1 << 6)
 
 /* CIF_CSI_INTEN */
 #define CSI_FRAME1_START_INTEN(id)	(0x1 << ((id) * 2 + 1))
diff --git a/drivers/media/platform/rockchip/cif/version.h b/drivers/media/platform/rockchip/cif/version.h
index a947adf71aec..a980ff77a1fa 100644
--- a/drivers/media/platform/rockchip/cif/version.h
+++ b/drivers/media/platform/rockchip/cif/version.h
@@ -25,6 +25,7 @@
  *10. reconstruct register's reading and writing
  *v0.1.3
  *1. support kernel-4.19 and support vicap single dvp for rv1126
+ *2. support vicap + mipi(single) for rv1126
  */
 
 #define RKCIF_DRIVER_VERSION KERNEL_VERSION(0, 1, 0x3)
-- 
2.35.3

