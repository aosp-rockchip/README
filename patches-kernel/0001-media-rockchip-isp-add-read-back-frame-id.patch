From 6109c9a423f8f5b6f89ad56daf50ef0441c20255 Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Wed, 26 Feb 2020 14:22:11 +0800
Subject: [PATCH] media: rockchip: isp: add read back frame id

read back frame id to sync frame isp input and output

Change-Id: I739cdf04d8a9f1efa8c70e818329ae80ad606a90
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/isp/dmarx.c       |  8 ++++++++
 drivers/media/platform/rockchip/isp/dmarx.h       |  2 ++
 .../media/platform/rockchip/isp/isp_stats_v2x.c   |  5 ++---
 drivers/media/platform/rockchip/isp/rkisp.c       | 15 ++++++++-------
 include/uapi/linux/rkisp2-config.h                |  7 ++++++-
 5 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp/dmarx.c b/drivers/media/platform/rockchip/isp/dmarx.c
index 4782d649331c..614e80ab99ad 100644
--- a/drivers/media/platform/rockchip/isp/dmarx.c
+++ b/drivers/media/platform/rockchip/isp/dmarx.c
@@ -845,6 +845,14 @@ static int dmarx_init(struct rkisp_device *dev, u32 id)
 				     RKISP_ISP_PAD_SINK, 0);
 }
 
+u32 rkisp_dmarx_get_frame_id(struct rkisp_device *dev)
+{
+	if (dev->dmarx_dev.trigger == T_MANUAL)
+		return dev->dmarx_dev.frame_id;
+	else
+		return atomic_read(&dev->isp_sdev.frm_sync_seq) - 1;
+}
+
 int rkisp_register_dmarx_vdev(struct rkisp_device *dev)
 {
 	struct rkisp_dmarx_device *dmarx_dev = &dev->dmarx_dev;
diff --git a/drivers/media/platform/rockchip/isp/dmarx.h b/drivers/media/platform/rockchip/isp/dmarx.h
index a0dd77c4722f..828d0c3c7d83 100644
--- a/drivers/media/platform/rockchip/isp/dmarx.h
+++ b/drivers/media/platform/rockchip/isp/dmarx.h
@@ -30,10 +30,12 @@ struct rkisp_dmarx_device {
 	struct rkisp_device *ispdev;
 	struct rkisp_stream stream[RKISP_MAX_DMARX_STREAM];
 	enum rkisp_dmarx_trigger trigger;
+	u32 frame_id;
 };
 
 void rkisp_dmarx_isr(u32 mis_val, struct rkisp_device *dev);
 void rkisp2_rawrd_isr(u32 mis_val, struct rkisp_device *dev);
+u32 rkisp_dmarx_get_frame_id(struct rkisp_device *dev);
 void rkisp_unregister_dmarx_vdev(struct rkisp_device *dev);
 int rkisp_register_dmarx_vdev(struct rkisp_device *dev);
 #endif /* _RKISP_DMARX_H */
diff --git a/drivers/media/platform/rockchip/isp/isp_stats_v2x.c b/drivers/media/platform/rockchip/isp/isp_stats_v2x.c
index 592b6d1df1fc..5269c823f67b 100644
--- a/drivers/media/platform/rockchip/isp/isp_stats_v2x.c
+++ b/drivers/media/platform/rockchip/isp/isp_stats_v2x.c
@@ -1132,7 +1132,7 @@ rkisp_stats_send_meas_v2x(struct rkisp_isp_stats_vdev *stats_vdev,
 	struct rkisp_stats_v2x_ops *ops =
 		(struct rkisp_stats_v2x_ops *)stats_vdev->priv_ops;
 
-	cur_frame_id = atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	cur_frame_id = rkisp_dmarx_get_frame_id(stats_vdev->dev);
 	if (cur_frame_id != meas_work->frame_id) {
 		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
 			  "Measurement late(%d, %d)\n",
@@ -1275,8 +1275,7 @@ rkisp_stats_isr_v2x(struct rkisp_isp_stats_vdev *stats_vdev,
 {
 	u32 isp_mis_tmp = 0;
 	struct rkisp_isp_readout_work work;
-	u32 cur_frame_id =
-		atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	u32 cur_frame_id = rkisp_dmarx_get_frame_id(stats_vdev->dev);
 	u32 iq_isr_mask = ISP2X_SIAWB_DONE | ISP2X_SIAF_FIN |
 		ISP2X_YUVAE_END | ISP2X_SIHST_RDY | ISP2X_AFM_SUM_OF | ISP2X_AFM_LUM_OF;
 	u32 iq_3a_mask = ISP2X_3A_RAWAE_BIG | ISP2X_3A_RAWAE_CH0 | ISP2X_3A_RAWAE_CH1 |
diff --git a/drivers/media/platform/rockchip/isp/rkisp.c b/drivers/media/platform/rockchip/isp/rkisp.c
index a90bd9f471bd..4d9b5bf7f111 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.c
+++ b/drivers/media/platform/rockchip/isp/rkisp.c
@@ -1579,13 +1579,16 @@ static int rkisp_isp_sd_subs_evt(struct v4l2_subdev *sd, struct v4l2_fh *fh,
 static long rkisp_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 {
 	struct rkisp_device *isp_dev = sd_to_isp_dev(sd);
+	struct isp2x_csi_trigger *trigger;
 	long ret = 0;
 
 	switch (cmd) {
 	case RKISP_CMD_TRIGGER_READ_BACK:
 		if (!IS_HDR_DBG(isp_dev->hdr.op_mode))
 			break;
-		rkisp_trigger_read_back(&isp_dev->csi_dev, *((int *)arg));
+		trigger = (struct isp2x_csi_trigger *)arg;
+		isp_dev->dmarx_dev.frame_id = trigger->frame_id;
+		rkisp_trigger_read_back(&isp_dev->csi_dev, trigger->times);
 		break;
 	default:
 		ret = -ENOIOCTLCMD;
@@ -1599,17 +1602,15 @@ static long rkisp_compat_ioctl32(struct v4l2_subdev *sd,
 				 unsigned int cmd, unsigned long arg)
 {
 	void __user *up = compat_ptr(arg);
+	struct isp2x_csi_trigger trigger;
 	long ret = 0;
 
 	switch (cmd) {
-	case RKISP_CMD_TRIGGER_READ_BACK: {
-		int mode;
-
-		ret = copy_from_user(&mode, up, sizeof(int));
+	case RKISP_CMD_TRIGGER_READ_BACK:
+		ret = copy_from_user(&trigger, up, sizeof(trigger));
 		if (!ret)
-			ret = rkisp_ioctl(sd, cmd, &mode);
+			ret = rkisp_ioctl(sd, cmd, &trigger);
 		break;
-	}
 	default:
 		ret = -ENOIOCTLCMD;
 	}
diff --git a/include/uapi/linux/rkisp2-config.h b/include/uapi/linux/rkisp2-config.h
index 3f4fa3bbd1d1..ff0e2fdd2114 100644
--- a/include/uapi/linux/rkisp2-config.h
+++ b/include/uapi/linux/rkisp2-config.h
@@ -11,7 +11,7 @@
 #include <linux/v4l2-controls.h>
 
 #define RKISP_CMD_TRIGGER_READ_BACK \
-	_IOW('V', BASE_VIDIOC_PRIVATE + 0, int)
+	_IOW('V', BASE_VIDIOC_PRIVATE + 0, struct isp2x_csi_trigger)
 
 #define ISP2X_MODULE_DPCC		BIT_ULL(0)
 #define ISP2X_MODULE_BLS		BIT_ULL(1)
@@ -136,6 +136,11 @@
 
 #define ISP2X_3DLUT_DATA_NUM		729
 
+struct isp2x_csi_trigger {
+	u32 frame_id;
+	int times;
+} __attribute__ ((packed));
+
 struct isp2x_window {
 	u16 h_offs;
 	u16 v_offs;
-- 
2.35.3

