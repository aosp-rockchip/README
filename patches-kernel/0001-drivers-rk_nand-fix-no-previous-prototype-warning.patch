From 5eb415730f13bb085a20cd210162e9a8f7a8a881 Mon Sep 17 00:00:00 2001
From: Yifeng Zhao <zyf@rock-chips.com>
Date: Tue, 8 May 2018 09:37:08 +0800
Subject: [PATCH] drivers: rk_nand: fix no previous prototype warning
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix the following warning(s):
drivers/rk_nand/rk_nand_base.c:105:15: warning: no previous prototype for ‘rknad_dma_map_single’ [-Wmissing-prototypes]
drivers/rk_nand/rk_nand_base.c:117:6: warning: no previous prototype for ‘rknan_dma_unmap_single’ [-Wmissing-prototypes]
drivers/rk_nand/rk_nand_base.c:128:5: warning: no previous prototype for ‘rknan_flash_cs_init’ [-Wmissing-prototypes]
drivers/rk_nand/rk_nand_base.c:142:5: warning: no previous prototype for ‘rknand_get_boot_media’ [-Wmissing-prototypes
......

Change-Id: Iacd769790f97bb89f44fee7f4d24d315d0179399
Signed-off-by: Yifeng Zhao <zyf@rock-chips.com>
---
 drivers/rk_nand/rk_nand_base.c | 13 ++--------
 drivers/rk_nand/rk_nand_base.h | 46 ++++++++++++++++++++++++++++++++++
 drivers/rk_nand/rk_nand_blk.c  | 20 ++++-----------
 drivers/rk_nand/rk_nand_blk.h  |  5 +++-
 4 files changed, 57 insertions(+), 27 deletions(-)
 create mode 100644 drivers/rk_nand/rk_nand_base.h

diff --git a/drivers/rk_nand/rk_nand_base.c b/drivers/rk_nand/rk_nand_base.c
index d3a81201c15c..14b451a2a6ca 100644
--- a/drivers/rk_nand/rk_nand_base.c
+++ b/drivers/rk_nand/rk_nand_base.c
@@ -27,18 +27,9 @@
 
 #include "rk_nand_blk.h"
 #include "rk_ftl_api.h"
+#include "rk_nand_base.h"
 
-#define RKNAND_VERSION_AND_DATE  "rknandbase v1.1 2016-11-08"
-
-struct rk_nandc_info {
-	int	id;
-	void __iomem     *reg_base;
-	int	irq;
-	int	clk_rate;
-	struct clk	*clk;	/* flash clk*/
-	struct clk	*hclk;	/* nandc clk*/
-	struct clk	*gclk;  /* flash clk gate*/
-};
+#define RKNAND_VERSION_AND_DATE  "rknandbase v1.2 2018-05-08"
 
 static struct rk_nandc_info g_nandc_info[2];
 struct device *g_nand_device;
diff --git a/drivers/rk_nand/rk_nand_base.h b/drivers/rk_nand/rk_nand_base.h
new file mode 100644
index 000000000000..023e58d5fc5c
--- /dev/null
+++ b/drivers/rk_nand/rk_nand_base.h
@@ -0,0 +1,46 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */
+
+/*
+ * Copyright (c) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ */
+
+#ifndef __RK_NAND_BASE_H
+#define __RK_NAND_BASE_H
+
+struct rk_nandc_info {
+	int	id;
+	void __iomem     *reg_base;
+	int	irq;
+	int	clk_rate;
+	struct clk	*clk;	/* flash clk*/
+	struct clk	*hclk;	/* nandc clk*/
+	struct clk	*gclk;  /* flash clk gate*/
+};
+
+void *ftl_malloc(int size);
+void ftl_free(void *buf);
+char rknand_get_sn(char *pbuf);
+char rknand_get_vendor0(char *pbuf);
+char *rknand_get_idb_data(void);
+int rknand_get_clk_rate(int nandc_id);
+unsigned long rknand_dma_flush_dcache(unsigned long ptr, int size, int dir);
+unsigned long rknand_dma_map_single(unsigned long ptr, int size, int dir);
+void rknand_dma_unmap_single(unsigned long ptr, int size, int dir);
+int rknand_flash_cs_init(int id);
+int rknand_get_reg_addr(unsigned long *p_nandc0, unsigned long *p_nandc1);
+int rknand_get_boot_media(void);
+unsigned long rk_copy_from_user(void *to, const void __user *from,
+				unsigned long n);
+unsigned long rk_copy_to_user(void __user *to, const void *from,
+			      unsigned long n);
+int rknand_sys_storage_init(void);
+int rknand_vendor_storage_init(void);
+int rk_nand_schedule_enable_config(int en);
+void rk_nandc_xfer_irq_flag_init(void *nandc_reg);
+void rk_nandc_rb_irq_flag_init(void *nandc_reg);
+void wait_for_nandc_xfer_completed(void *nandc_reg);
+void wait_for_nand_flash_ready(void *nandc_reg);
+int rk_nandc_irq_init(void);
+int rk_nandc_irq_deinit(void);
+void rknand_dev_cache_flush(void);
+#endif
diff --git a/drivers/rk_nand/rk_nand_blk.c b/drivers/rk_nand/rk_nand_blk.c
index df0d6f0e2d34..0e7a297c131f 100644
--- a/drivers/rk_nand/rk_nand_blk.c
+++ b/drivers/rk_nand/rk_nand_blk.c
@@ -182,10 +182,6 @@ static int nand_dev_transfer(struct nand_blk_dev *dev,
 	return ret;
 }
 
-void rknand_queue_cond_resched(void)
-{
-};
-
 static DECLARE_WAIT_QUEUE_HEAD(rknand_thread_wait);
 static void rk_ftl_gc_timeout_hack(unsigned long data);
 static DEFINE_TIMER(rk_ftl_gc_timeout, rk_ftl_gc_timeout_hack, 0, 0);
@@ -208,16 +204,13 @@ static int req_check_buffer_align(struct request *req, char **pbuf)
 	char *buffer;
 	void *firstbuf = 0;
 	char *nextbuffer = 0;
-	unsigned long block, nsect;
 
-	block = blk_rq_pos(req);
-	nsect = blk_rq_cur_bytes(req) >> 9;
 	rq_for_each_segment(bv, req, iter) {
 		buffer = page_address(bv.bv_page) + bv.bv_offset;
-		if (firstbuf == 0)
+		if (!firstbuf)
 			firstbuf = buffer;
 		nr_vec++;
-		if (nextbuffer != 0 && nextbuffer != buffer)
+		if (nextbuffer && nextbuffer != buffer)
 			return 0;
 		nextbuffer = buffer + bv.bv_len;
 	}
@@ -434,7 +427,7 @@ static int rknand_get_part(char *parts,
 		char *p;
 
 		p = strchr(parts + 1, delim);
-		if (p == 0)
+		if (!p)
 			return 0;
 		strncpy(name, parts + 1, p - (parts + 1));
 		parts = p + 1;
@@ -650,9 +643,7 @@ int nand_blk_add_whole_disk(void)
 
 static int nand_blk_register(struct nand_blk_ops *nandr)
 {
-	struct task_struct *tsk;
 	int i, ret;
-	u32 offset;
 	u32 part_size;
 
 	rk_nand_schedule_enable_config(1);
@@ -685,11 +676,10 @@ static int nand_blk_register(struct nand_blk_ops *nandr)
 
 	nandr->rq->queuedata = nandr;
 	INIT_LIST_HEAD(&nandr->devs);
-	tsk = kthread_run(nand_blktrans_thread, (void *)nandr, "rknand");
+	kthread_run(nand_blktrans_thread, (void *)nandr, "rknand");
 
 	g_max_part_num = nand_prase_cmdline_part(disk_array);
 	if (g_max_part_num) {
-		offset = 0;
 		nandr->last_dev_index = 0;
 		for (i = 0; i < g_max_part_num; i++) {
 			part_size = (disk_array[i].offset + disk_array[i].size);
@@ -761,7 +751,7 @@ int __init rknand_dev_init(void)
 	void __iomem *nandc1;
 
 	rknand_get_reg_addr((unsigned long *)&nandc0, (unsigned long *)&nandc1);
-	if (nandc0 == 0)
+	if (!nandc0)
 		return -1;
 
 	ret = rk_ftl_init();
diff --git a/drivers/rk_nand/rk_nand_blk.h b/drivers/rk_nand/rk_nand_blk.h
index 49a83ac2ead4..72b3f505abf8 100644
--- a/drivers/rk_nand/rk_nand_blk.h
+++ b/drivers/rk_nand/rk_nand_blk.h
@@ -54,5 +54,8 @@ void rknand_dev_shutdown(void);
 void rknand_dev_flush(void);
 int __init rknand_dev_init(void);
 int rknand_dev_exit(void);
-
+void rknand_device_lock(void);
+int rknand_device_trylock(void);
+void rknand_device_unlock(void);
+int nand_blk_add_whole_disk(void);
 #endif
-- 
2.35.3

