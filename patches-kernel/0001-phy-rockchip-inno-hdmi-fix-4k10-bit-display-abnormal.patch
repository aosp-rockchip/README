From d4953cfed336fc3197ba8e98d69ea6a37f2b5fdc Mon Sep 17 00:00:00 2001
From: Huicong Xu <xhc@rock-chips.com>
Date: Wed, 24 Jan 2018 13:58:39 +0800
Subject: [PATCH] phy: rockchip: inno-hdmi: fix 4k10 bit display abnormal

avoid out of value range calculate catmdsclk when 4k10bit and set
scdc high tmds clock ratio when mtmdsclock is more than 340000000

Change-Id: I8aed4c99813e43c69526f3918d5e7024879d3288
Signed-off-by: Huicong Xu <xhc@rock-chips.com>
---
 drivers/gpu/drm/bridge/synopsys/dw-hdmi.c         | 14 ++++++++++++++
 drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c       |  1 +
 drivers/phy/rockchip/phy-rockchip-inno-hdmi-phy.c | 12 ++++++------
 include/drm/bridge/dw_hdmi.h                      |  1 +
 4 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c b/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
index 473358a27f8f..1f705f0d81b4 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-hdmi.c
@@ -1270,6 +1270,20 @@ static bool hdmi_phy_wait_i2c_done(struct dw_hdmi *hdmi, int msec)
 	return true;
 }
 
+void dw_hdmi_set_high_tmds_clock_ratio(struct dw_hdmi *hdmi)
+{
+	unsigned long mtmdsclock = hdmi->hdmi_data.video_mode.mtmdsclock;
+
+	/* Control for TMDS Bit Period/TMDS Clock-Period Ratio */
+	if (hdmi->connector.display_info.hdmi.scdc.supported) {
+		if (mtmdsclock > 340000000)
+			drm_scdc_set_high_tmds_clock_ratio(hdmi->ddc, 1);
+		else
+			drm_scdc_set_high_tmds_clock_ratio(hdmi->ddc, 0);
+	}
+}
+EXPORT_SYMBOL_GPL(dw_hdmi_set_high_tmds_clock_ratio);
+
 void dw_hdmi_phy_i2c_write(struct dw_hdmi *hdmi, unsigned short data,
 			   unsigned char addr)
 {
diff --git a/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c b/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
index 257d0d0dcc3d..0cb40e2008d6 100644
--- a/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
+++ b/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
@@ -121,6 +121,7 @@ inno_dw_hdmi_phy_init(struct dw_hdmi *dw_hdmi, void *data,
 	struct rockchip_hdmi *hdmi = (struct rockchip_hdmi *)data;
 
 	inno_dw_hdmi_phy_disable(dw_hdmi, data);
+	dw_hdmi_set_high_tmds_clock_ratio(dw_hdmi);
 	return phy_power_on(hdmi->phy);
 }
 
diff --git a/drivers/phy/rockchip/phy-rockchip-inno-hdmi-phy.c b/drivers/phy/rockchip/phy-rockchip-inno-hdmi-phy.c
index 5b28b33e8be4..6aea5b23067f 100644
--- a/drivers/phy/rockchip/phy-rockchip-inno-hdmi-phy.c
+++ b/drivers/phy/rockchip/phy-rockchip-inno-hdmi-phy.c
@@ -337,22 +337,22 @@ static u32 inno_hdmi_phy_get_tmdsclk(struct inno_hdmi_phy *inno, int rate)
 
 	switch (bus_width) {
 	case 4:
-		tmdsclk = rate / 2;
+		tmdsclk = (u32)rate / 2;
 		break;
 	case 5:
-		tmdsclk = rate * 5 / 8;
+		tmdsclk = (u32)rate * 5 / 8;
 		break;
 	case 6:
-		tmdsclk = rate * 3 / 4;
+		tmdsclk = (u32)rate * 3 / 4;
 		break;
 	case 10:
-		tmdsclk = rate * 5 / 4;
+		tmdsclk = (u32)rate * 5 / 4;
 		break;
 	case 12:
-		tmdsclk = rate * 3 / 2;
+		tmdsclk = (u32)rate * 3 / 2;
 		break;
 	case 16:
-		tmdsclk = rate * 2;
+		tmdsclk = (u32)rate * 2;
 		break;
 	default:
 		tmdsclk = rate;
diff --git a/include/drm/bridge/dw_hdmi.h b/include/drm/bridge/dw_hdmi.h
index 29c7c832cb9b..8119bb98f257 100644
--- a/include/drm/bridge/dw_hdmi.h
+++ b/include/drm/bridge/dw_hdmi.h
@@ -198,6 +198,7 @@ enum drm_connector_status dw_hdmi_phy_read_hpd(struct dw_hdmi *hdmi,
 void dw_hdmi_set_sample_rate(struct dw_hdmi *hdmi, unsigned int rate);
 void dw_hdmi_audio_enable(struct dw_hdmi *hdmi);
 void dw_hdmi_audio_disable(struct dw_hdmi *hdmi);
+void dw_hdmi_set_high_tmds_clock_ratio(struct dw_hdmi *hdmi);
 
 /* PHY configuration */
 void dw_hdmi_phy_i2c_write(struct dw_hdmi *hdmi, unsigned short data,
-- 
2.35.3

