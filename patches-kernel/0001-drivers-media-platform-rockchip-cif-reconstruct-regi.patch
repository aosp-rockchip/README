From e081456171b7f7095024a21b74729dd1b13aeb96 Mon Sep 17 00:00:00 2001
From: Allon Huang <allon.huang@rock-chips.com>
Date: Fri, 8 May 2020 21:26:49 +0800
Subject: [PATCH] drivers: media: platform: rockchip: cif: reconstruct
 register's reading and writing

Signed-off-by: Allon Huang <allon.huang@rock-chips.com>
Change-Id: I47e6e118a066a7740a34645cc9736a9a3f5f6afb
---
 drivers/media/platform/rockchip/cif/capture.c | 202 +++++++++---------
 drivers/media/platform/rockchip/cif/dev.c     | 201 +++++++++++++++--
 drivers/media/platform/rockchip/cif/dev.h     |   9 +-
 drivers/media/platform/rockchip/cif/regs.h    |  48 +++++
 drivers/media/platform/rockchip/cif/version.h |   1 +
 5 files changed, 345 insertions(+), 116 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index 209e90a20276..801ebbd66613 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -17,7 +17,6 @@
 #include <media/videobuf2-dma-contig.h>
 
 #include "dev.h"
-#include "regs.h"
 
 #define CIF_REQ_BUFS_MIN	1
 #define CIF_MIN_WIDTH		64
@@ -511,7 +510,6 @@ static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
 	struct rkcif_dummy_buffer *dummy_buf = &stream->dummy_buf;
 	struct rkcif_device *dev = stream->cifdev;
 	struct rkcif_buffer *buffer = NULL;
-	void __iomem *base = dev->base_addr;
 	u32 frm_addr_y, frm_addr_uv;
 
 	spin_lock(&stream->vbq_lock);
@@ -526,15 +524,15 @@ static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
 		}
 
 		if (stream->curr_buf) {
-			write_cif_reg(base, CIF_FRM0_ADDR_Y,
-				      stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, CIF_FRM0_ADDR_UV,
-				      stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM0_ADDR_Y,
+					     stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM0_ADDR_UV,
+					     stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, CIF_FRM0_ADDR_Y,
-				      dummy_buf->dma_addr);
-			write_cif_reg(base, CIF_FRM0_ADDR_UV,
-				      dummy_buf->dma_addr);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM0_ADDR_Y,
+					     dummy_buf->dma_addr);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM0_ADDR_UV,
+					     dummy_buf->dma_addr);
 		}
 
 		if (!stream->next_buf) {
@@ -546,13 +544,15 @@ static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
 		}
 
 		if (stream->next_buf) {
-			write_cif_reg(base, CIF_FRM1_ADDR_Y,
-				      stream->next_buf->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, CIF_FRM1_ADDR_UV,
-				      stream->next_buf->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM1_ADDR_Y,
+					     stream->next_buf->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM1_ADDR_UV,
+					     stream->next_buf->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, CIF_FRM1_ADDR_Y, dummy_buf->dma_addr);
-			write_cif_reg(base, CIF_FRM1_ADDR_UV, dummy_buf->dma_addr);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM1_ADDR_Y,
+					     dummy_buf->dma_addr);
+			rkcif_write_register(dev, CIF_REG_DVP_FRM1_ADDR_UV,
+					     dummy_buf->dma_addr);
 		}
 	} else if (stat == RKCIF_YUV_ADDR_STATE_UPDATE) {
 		if (!list_empty(&stream->buf_head)) {
@@ -578,23 +578,25 @@ static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
 		}
 
 		if (stream->frame_phase == CIF_CSI_FRAME0_READY) {
-			frm_addr_y = CIF_FRM0_ADDR_Y;
-			frm_addr_uv = CIF_FRM0_ADDR_UV;
+			frm_addr_y = CIF_REG_DVP_FRM0_ADDR_Y;
+			frm_addr_uv = CIF_REG_DVP_FRM0_ADDR_UV;
 		}
 
 		if (stream->frame_phase == CIF_CSI_FRAME1_READY) {
-			frm_addr_y = CIF_FRM1_ADDR_Y;
-			frm_addr_uv = CIF_FRM1_ADDR_UV;
+			frm_addr_y = CIF_REG_DVP_FRM1_ADDR_Y;
+			frm_addr_uv = CIF_REG_DVP_FRM1_ADDR_UV;
 		}
 
 		if (buffer) {
-			write_cif_reg(base, frm_addr_y,
-				      buffer->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, frm_addr_uv,
-				      buffer->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, frm_addr_y,
+					     buffer->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, frm_addr_uv,
+					     buffer->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, frm_addr_y, dummy_buf->dma_addr);
-			write_cif_reg(base, frm_addr_uv, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm_addr_y,
+					     dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm_addr_uv,
+					     dummy_buf->dma_addr);
 			v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev,
 				 "frame Drop to dummy buf\n");
 		}
@@ -608,7 +610,6 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 	struct rkcif_dummy_buffer *dummy_buf = &stream->dummy_buf;
 	struct rkcif_device *dev = stream->cifdev;
 	struct rkcif_buffer *buffer = NULL;
-	void __iomem *base = dev->base_addr;
 	u32 frm_addr_y, frm_addr_uv;
 
 	if (init) {
@@ -621,10 +622,10 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 			frm1_addr_y = CIF_CSI_FRM1_ADDR_Y_ID0 + 0x20 * csi_ch;
 			frm1_addr_uv = CIF_CSI_FRM1_ADDR_UV_ID0 + 0x20 * csi_ch;
 		} else {
-			frm0_addr_y = CIF_FRM0_ADDR_Y;
-			frm0_addr_uv = CIF_FRM0_ADDR_UV;
-			frm1_addr_y = CIF_FRM1_ADDR_Y;
-			frm1_addr_uv = CIF_FRM1_ADDR_UV;
+			frm0_addr_y = CIF_REG_DVP_FRM0_ADDR_Y;
+			frm0_addr_uv = CIF_REG_DVP_FRM0_ADDR_UV;
+			frm1_addr_y = CIF_REG_DVP_FRM1_ADDR_Y;
+			frm1_addr_uv = CIF_REG_DVP_FRM1_ADDR_UV;
 		}
 
 		spin_lock(&stream->vbq_lock);
@@ -638,13 +639,13 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 		}
 
 		if (stream->curr_buf) {
-			write_cif_reg(base, frm0_addr_y,
-				      stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, frm0_addr_uv,
-				      stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, frm0_addr_y,
+					     stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, frm0_addr_uv,
+					     stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, frm0_addr_y, dummy_buf->dma_addr);
-			write_cif_reg(base, frm0_addr_uv, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm0_addr_y, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm0_addr_uv, dummy_buf->dma_addr);
 		}
 
 		if (!stream->next_buf) {
@@ -656,13 +657,13 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 		}
 
 		if (stream->next_buf) {
-			write_cif_reg(base, frm1_addr_y,
-				      stream->next_buf->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, frm1_addr_uv,
-				      stream->next_buf->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, frm1_addr_y,
+					     stream->next_buf->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, frm1_addr_uv,
+					     stream->next_buf->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, frm1_addr_y, dummy_buf->dma_addr);
-			write_cif_reg(base, frm1_addr_uv, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm1_addr_y, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm1_addr_uv, dummy_buf->dma_addr);
 		}
 		spin_unlock(&stream->vbq_lock);
 	} else {
@@ -705,13 +706,13 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 		spin_unlock(&stream->vbq_lock);
 
 		if (buffer) {
-			write_cif_reg(base, frm_addr_y,
-				      buffer->buff_addr[RKCIF_PLANE_Y]);
-			write_cif_reg(base, frm_addr_uv,
-				      buffer->buff_addr[RKCIF_PLANE_CBCR]);
+			rkcif_write_register(dev, frm_addr_y,
+					     buffer->buff_addr[RKCIF_PLANE_Y]);
+			rkcif_write_register(dev, frm_addr_uv,
+					     buffer->buff_addr[RKCIF_PLANE_CBCR]);
 		} else {
-			write_cif_reg(base, frm_addr_y, dummy_buf->dma_addr);
-			write_cif_reg(base, frm_addr_uv, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm_addr_y, dummy_buf->dma_addr);
+			rkcif_write_register(dev, frm_addr_uv, dummy_buf->dma_addr);
 			v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev,
 				 "frame Drop to dummy buf\n");
 		}
@@ -913,11 +914,12 @@ static void rkcif_stream_stop(struct rkcif_stream *stream)
 		write_cif_reg_and(base, CIF_CSI_INTEN,
 				  ~CSI_ALL_ERROR_INTEN);
 	} else {
-		val = read_cif_reg(base, CIF_CTRL);
-		write_cif_reg(base, CIF_CTRL, val & (~ENABLE_CAPTURE));
-		write_cif_reg(base, CIF_INTEN, 0x0);
-		write_cif_reg(base, CIF_INTSTAT, 0x3ff);
-		write_cif_reg(base, CIF_FRAME_STATUS, 0x0);
+		val = rkcif_read_register(cif_dev, CIF_REG_DVP_CTRL);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_CTRL,
+				     val & (~ENABLE_CAPTURE));
+		rkcif_write_register(cif_dev, CIF_REG_DVP_INTEN, 0x0);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_INTSTAT, 0x3ff);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_FRAME_STATUS, 0x0);
 	}
 
 	stream->state = RKCIF_STATE_READY;
@@ -935,7 +937,6 @@ static int rkcif_queue_setup(struct vb2_queue *queue,
 	const struct cif_output_fmt *cif_fmt;
 	u32 i;
 
-
 	pixm = &stream->pixm;
 	cif_fmt = stream->cif_fmt_out;
 
@@ -947,7 +948,6 @@ static int rkcif_queue_setup(struct vb2_queue *queue,
 
 		plane_fmt = &pixm->plane_fmt[i];
 		sizes[i] = plane_fmt->sizeimage / pixm->height * h;
-
 	}
 
 	v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev, "%s count %d, size %d\n",
@@ -1238,16 +1238,15 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 	struct rkcif_device *dev = stream->cifdev;
 	struct rkcif_sensor_info *sensor_info;
 	const struct cif_output_fmt *fmt;
-	void __iomem *base = dev->base_addr;
 
 	sensor_info = dev->active_sensor;
 	stream->frame_idx = 0;
 
 	mbus_flags = sensor_info->mbus.flags;
 	href_pol = (mbus_flags & V4L2_MBUS_HSYNC_ACTIVE_HIGH) ?
-			HSY_HIGH_ACTIVE : HSY_LOW_ACTIVE;
+		    HSY_HIGH_ACTIVE : HSY_LOW_ACTIVE;
 	vsync_pol = (mbus_flags & V4L2_MBUS_VSYNC_ACTIVE_HIGH) ?
-			VSY_HIGH_ACTIVE : VSY_LOW_ACTIVE;
+		     VSY_HIGH_ACTIVE : VSY_LOW_ACTIVE;
 
 	if (rkcif_determine_input_mode(stream) == INPUT_MODE_BT1120) {
 		if (stream->cif_fmt_in->field == V4L2_FIELD_NONE)
@@ -1282,24 +1281,24 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 	      | stream->cif_fmt_out->fmt_val
 	      | stream->cif_fmt_in->dvp_fmt_val
 	      | xfer_mode | yc_swap;
-	write_cif_reg(base, CIF_FOR, val);
+	rkcif_write_register(dev, CIF_REG_DVP_FOR, val);
 
 	val = stream->pixm.width;
 	if (stream->cif_fmt_in->fmt_type == CIF_FMT_TYPE_RAW) {
 		fmt = find_output_fmt(stream, stream->pixm.pixelformat);
 		val = stream->pixm.width * rkcif_cal_raw_vir_line_ratio(fmt);
 	}
-	write_cif_reg(base, CIF_VIR_LINE_WIDTH, val);
-	write_cif_reg(base, CIF_SET_SIZE,
-		      stream->pixm.width | (stream->pixm.height << 16));
+	rkcif_write_register(dev, CIF_REG_DVP_VIR_LINE_WIDTH, val);
+	rkcif_write_register(dev, CIF_REG_DVP_SET_SIZE,
+			     stream->pixm.width | (stream->pixm.height << 16));
 
 	v4l2_subdev_call(sensor_info->sd, sensor, g_skip_top_lines, &skip_top);
 
 	/* TODO: set crop properly */
-	write_cif_reg(base, CIF_CROP, skip_top << CIF_CROP_Y_SHIFT);
-	write_cif_reg(base, CIF_FRAME_STATUS, FRAME_STAT_CLS);
-	write_cif_reg(base, CIF_INTSTAT, INTSTAT_CLS);
-	write_cif_reg(base, CIF_SCL_CTRL, rkcif_scl_ctl(stream));
+	rkcif_write_register(dev, CIF_REG_DVP_CROP, skip_top << CIF_CROP_Y_SHIFT);
+	rkcif_write_register(dev, CIF_REG_DVP_FRAME_STATUS, FRAME_STAT_CLS);
+	rkcif_write_register(dev, CIF_REG_DVP_INTSTAT, INTSTAT_CLS);
+	rkcif_write_register(dev, CIF_REG_DVP_SCL_CTRL, rkcif_scl_ctl(stream));
 
 	if (dev->chip_id == CHIP_RK1808_CIF &&
 	    rkcif_determine_input_mode(stream) == INPUT_MODE_BT1120)
@@ -1309,7 +1308,8 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 		rkcif_assign_new_buffer_oneframe(stream,
 						 RKCIF_YUV_ADDR_STATE_INIT);
 
-	write_cif_reg(base, CIF_INTEN, FRAME_END_EN | PST_INF_FRAME_END);
+	rkcif_write_register(dev, CIF_REG_DVP_INTEN,
+			     FRAME_END_EN | PST_INF_FRAME_END);
 
 	if (dev->workmode == RKCIF_WORKMODE_ONEFRAME)
 		workmode = MODE_ONEFRAME;
@@ -1321,11 +1321,11 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 	if (dev->chip_id == CHIP_RK1808_CIF &&
 	    rkcif_determine_input_mode(stream) == INPUT_MODE_BT1120) {
 		dev->workmode = RKCIF_WORKMODE_PINGPONG;
-		write_cif_reg(base, CIF_CTRL,
-			      AXI_BURST_16 | MODE_PINGPONG | ENABLE_CAPTURE);
+		rkcif_write_register(dev, CIF_REG_DVP_CTRL,
+				     AXI_BURST_16 | MODE_PINGPONG | ENABLE_CAPTURE);
 	} else {
-		write_cif_reg(base, CIF_CTRL,
-			      AXI_BURST_16 | workmode | ENABLE_CAPTURE);
+		rkcif_write_register(dev, CIF_REG_DVP_CTRL,
+				     AXI_BURST_16 | workmode | ENABLE_CAPTURE);
 	}
 
 	stream->state = RKCIF_STATE_STREAMING;
@@ -1547,9 +1547,9 @@ static void rkcif_set_fmt(struct rkcif_stream *stream,
 	 * the size should not be larger than input
 	 */
 	pixm->width = clamp_t(u32, pixm->width,
-				CIF_MIN_WIDTH, input_rect.width);
+			      CIF_MIN_WIDTH, input_rect.width);
 	pixm->height = clamp_t(u32, pixm->height,
-				CIF_MIN_HEIGHT, input_rect.height);
+			       CIF_MIN_HEIGHT, input_rect.height);
 	pixm->num_planes = fmt->mplanes;
 	pixm->field = V4L2_FIELD_NONE;
 	pixm->quantization = V4L2_QUANTIZATION_DEFAULT;
@@ -1656,8 +1656,6 @@ static int rkcif_fh_open(struct file *filp)
 	 */
 	if (cifdev->chip_id == CHIP_RK1808_CIF) {
 		mutex_lock(&cifdev->stream_lock);
-		v4l2_info(&cifdev->v4l2_dev, "fh_cnt: %d\n",
-					atomic_read(&cifdev->fh_cnt));
 		if (!atomic_read(&cifdev->fh_cnt))
 			rkcif_soft_reset(cifdev, true);
 		atomic_inc(&cifdev->fh_cnt);
@@ -2043,13 +2041,12 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 	/* TODO: xuhf-debug: add stream type */
 	struct rkcif_stream *stream;
 	u32 lastline, lastpix, ctl, cif_frmst, intstat, frmid;
-	void __iomem *base = cif_dev->base_addr;
 
-	intstat = read_cif_reg(base, CIF_INTSTAT);
-	cif_frmst = read_cif_reg(base, CIF_FRAME_STATUS);
-	lastline = read_cif_reg(base, CIF_LAST_LINE);
-	lastpix = read_cif_reg(base, CIF_LAST_PIX);
-	ctl = read_cif_reg(base, CIF_CTRL);
+	intstat = rkcif_read_register(cif_dev, CIF_REG_DVP_INTSTAT);
+	cif_frmst = rkcif_read_register(cif_dev, CIF_REG_DVP_FRAME_STATUS);
+	lastline = rkcif_read_register(cif_dev, CIF_REG_DVP_LAST_LINE);
+	lastpix = rkcif_read_register(cif_dev, CIF_REG_DVP_LAST_PIX);
+	ctl = rkcif_read_register(cif_dev, CIF_REG_DVP_CTRL);
 	frmid = CIF_GET_FRAME_ID(cif_frmst);
 
 	/* There are two irqs enabled:
@@ -2062,17 +2059,21 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 		stream = &cif_dev->stream[RKCIF_STREAM_CIF];
 
 	if ((intstat & PST_INF_FRAME_END)) {
-		write_cif_reg(base, CIF_INTSTAT, PST_INF_FRAME_END_CLR);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_INTSTAT,
+				     PST_INF_FRAME_END_CLR);
 
 		if (stream->stopping)
 			/* To stop CIF ASAP, before FRAME_END irq */
-			write_cif_reg(base, CIF_CTRL, ctl & (~ENABLE_CAPTURE));
+			rkcif_write_register(cif_dev, CIF_REG_DVP_CTRL,
+					     ctl & (~ENABLE_CAPTURE));
 	}
 
 	if ((intstat & FRAME_END)) {
 		struct vb2_v4l2_buffer *vb_done = NULL;
 
-		write_cif_reg(base, CIF_INTSTAT, FRAME_END_CLR);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_INTSTAT,
+				     FRAME_END_CLR);
+
 		if (stream->stopping) {
 			rkcif_stream_stop(stream);
 			stream->stopping = false;
@@ -2089,7 +2090,8 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 			 * At the same time, don't clear the frame id
 			 * for switching address.
 			 */
-			write_cif_reg(base, CIF_FRAME_STATUS, FRM0_STAT_CLS);
+			rkcif_write_register(cif_dev, CIF_REG_DVP_FRAME_STATUS,
+					     FRM0_STAT_CLS);
 			v4l2_err(&cif_dev->v4l2_dev,
 				 "Bad frame, irq:0x%x frmst:0x%x size:%dx%d\n",
 				 intstat, cif_frmst, lastline, lastpix);
@@ -2115,7 +2117,8 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 		 * the next frame end irq;
 		 * 2,do not clear the frame id for switching address.
 		 */
-		write_cif_reg(base, CIF_FRAME_STATUS, cif_frmst & FRM0_STAT_CLS);
+		rkcif_write_register(cif_dev, CIF_REG_DVP_FRAME_STATUS,
+				     cif_frmst & FRM0_STAT_CLS);
 
 		if (vb_done)
 			rkcif_vb_done_oneframe(stream, vb_done);
@@ -2255,14 +2258,15 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 		}
 	} else {
 		u32 lastline, lastpix, ctl, cif_frmst;
-		void __iomem *base = cif_dev->base_addr;
 		struct rkcif_stream *stream;
 
-		intstat = read_cif_reg(base, CIF_INTSTAT);
-		cif_frmst = read_cif_reg(base, CIF_FRAME_STATUS);
-		lastline = CIF_FETCH_Y_LAST_LINE(read_cif_reg(base, CIF_LAST_LINE));
-		lastpix =  CIF_FETCH_Y_LAST_LINE(read_cif_reg(base, CIF_LAST_PIX));
-		ctl = read_cif_reg(base, CIF_CTRL);
+		intstat = rkcif_read_register(cif_dev, CIF_REG_DVP_INTSTAT);
+		cif_frmst = rkcif_read_register(cif_dev, CIF_REG_DVP_FRAME_STATUS);
+		lastline = rkcif_read_register(cif_dev, CIF_REG_DVP_LAST_LINE);
+		lastline = CIF_FETCH_Y_LAST_LINE(lastline);
+		lastpix = rkcif_read_register(cif_dev, CIF_REG_DVP_LAST_PIX);
+		lastpix =  CIF_FETCH_Y_LAST_LINE(lastpix);
+		ctl = rkcif_read_register(cif_dev, CIF_REG_DVP_CTRL);
 
 		if (cif_dev->chip_id == CHIP_RK1808_CIF)
 			stream = &cif_dev->stream[RKCIF_STREAM_DVP];
@@ -2277,18 +2281,20 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 		 */
 
 		if ((intstat & PST_INF_FRAME_END)) {
-			write_cif_reg(base, CIF_INTSTAT, PST_INF_FRAME_END_CLR);
+			rkcif_write_register(cif_dev, CIF_REG_DVP_INTSTAT,
+					     PST_INF_FRAME_END_CLR);
 
 			if (stream->stopping)
 				/* To stop CIF ASAP, before FRAME_END irq */
-				write_cif_reg(base, CIF_CTRL,
-					      ctl & (~ENABLE_CAPTURE));
+				rkcif_write_register(cif_dev, CIF_REG_DVP_CTRL,
+						     ctl & (~ENABLE_CAPTURE));
 		}
 
 		if ((intstat & FRAME_END)) {
 			struct vb2_v4l2_buffer *vb_done = NULL;
 
-			write_cif_reg(base, CIF_INTSTAT, FRAME_END_CLR);
+			rkcif_write_register(cif_dev, CIF_REG_DVP_INTSTAT,
+					     FRAME_END_CLR);
 
 			if (stream->stopping) {
 				rkcif_stream_stop(stream);
@@ -2302,7 +2308,7 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 			     !(cif_frmst & CIF_F1_READY))) {
 				v4l2_err(&cif_dev->v4l2_dev,
 					 "Bad frame, pp irq:0x%x frmst:0x%x size:%dx%d\n",
-					 intstat, cif_frmst, lastline, lastpix);
+					 intstat, cif_frmst, lastpix, lastline);
 				return;
 			}
 
diff --git a/drivers/media/platform/rockchip/cif/dev.c b/drivers/media/platform/rockchip/cif/dev.c
index e561572459dd..59c7ca51daf2 100644
--- a/drivers/media/platform/rockchip/cif/dev.c
+++ b/drivers/media/platform/rockchip/cif/dev.c
@@ -4,12 +4,12 @@
  *
  * Copyright (C) 2018 Rockchip Electronics Co., Ltd.
  */
-
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <linux/of_graph.h>
 #include <linux/of_platform.h>
 #include <linux/of_reserved_mem.h>
@@ -22,10 +22,9 @@
 #include <linux/iommu.h>
 #include <dt-bindings/soc/rockchip-system-status.h>
 #include <soc/rockchip/rockchip-system-status.h>
-
+#include <linux/io.h>
+#include <linux/mfd/syscon.h>
 #include "dev.h"
-#include "regs.h"
-#include "version.h"
 
 #define RKCIF_VERNO_LEN		10
 
@@ -35,6 +34,7 @@ struct cif_match_data {
 	const char * const *rsts;
 	int clks_num;
 	int rsts_num;
+	const struct cif_reg *cif_regs;
 };
 
 int rkcif_debug;
@@ -48,6 +48,43 @@ MODULE_PARM_DESC(version, "version number");
 static DEFINE_MUTEX(rkcif_dev_mutex);
 static LIST_HEAD(rkcif_device_list);
 
+void rkcif_write_register(struct rkcif_device *dev,
+			  enum cif_reg_index index, u32 val)
+{
+	void __iomem *base = dev->base_addr;
+	const struct cif_reg *reg = &dev->cif_regs[index];
+
+	if (index < CIF_REG_INDEX_MAX) {
+		if (index == CIF_REG_DVP_CTRL ||
+		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0))
+			write_cif_reg(base, reg->offset, val);
+		else
+			dev_warn(dev->dev, "write reg[%d] failed, maybe useless!!!\n", index);
+	}
+
+	if (index == CIF_REG_DVP_VIR_LINE_WIDTH)
+		dev_warn(dev->dev, "reg[%d] offset:0x%x, val:0x%x\n",
+			 index, reg->offset, val);
+}
+
+unsigned int rkcif_read_register(struct rkcif_device *dev,
+				 enum cif_reg_index index)
+{
+	unsigned int val = 0x0;
+	void __iomem *base = dev->base_addr;
+	const struct cif_reg *reg = &dev->cif_regs[index];
+
+	if (index < CIF_REG_INDEX_MAX) {
+		if (index == CIF_REG_DVP_CTRL ||
+		    (index != CIF_REG_DVP_CTRL && reg->offset != 0x0))
+			val = read_cif_reg(base, reg->offset);
+		else
+			dev_warn(dev->dev, "read reg[%d] failed, maybe useless!!!\n", index);
+	}
+
+	return val;
+}
+
 /**************************** pipeline operations *****************************/
 
 static int __cif_pipeline_prepare(struct rkcif_pipeline *p,
@@ -192,10 +229,10 @@ static int rkcif_create_links(struct rkcif_device *dev)
 					sink_entity = &dev->stream[RKCIF_STREAM_DVP].vnode.vdev.entity;
 
 					ret = media_create_pad_link(source_entity,
-								       pad,
-								       sink_entity,
-								       0,
-								       MEDIA_LNK_FL_ENABLED);
+								    pad,
+								    sink_entity,
+								    0,
+								    MEDIA_LNK_FL_ENABLED);
 					if (ret)
 						dev_err(dev->dev, "failed to create link for %s\n",
 							sensor->sd->name);
@@ -210,10 +247,10 @@ static int rkcif_create_links(struct rkcif_device *dev)
 					(flags = MEDIA_LNK_FL_ENABLED) : (flags = 0);
 
 					ret = media_create_pad_link(source_entity,
-								       pad,
-								       sink_entity,
-								       0,
-								       flags);
+								    pad,
+								    sink_entity,
+								    0,
+								    flags);
 					if (ret) {
 						dev_err(dev->dev,
 							"failed to create link for %s\n",
@@ -373,6 +410,36 @@ static int rkcif_register_platform_subdevs(struct rkcif_device *cif_dev)
 	return ret;
 }
 
+static const struct cif_reg px30_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_LINE_NUM_ADDR] = CIF_REG(CIF_LINE_NUM_ADDR),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_SCM_ADDR_Y] = CIF_REG(CIF_SCM_ADDR_Y),
+	[CIF_REG_DVP_SCM_ADDR_U] = CIF_REG(CIF_SCM_ADDR_U),
+	[CIF_REG_DVP_SCM_ADDR_V] = CIF_REG(CIF_SCM_ADDR_V),
+	[CIF_REG_DVP_WB_UP_FILTER] = CIF_REG(CIF_WB_UP_FILTER),
+	[CIF_REG_DVP_WB_LOW_FILTER] = CIF_REG(CIF_WB_LOW_FILTER),
+	[CIF_REG_DVP_WBC_CNT] = CIF_REG(CIF_WBC_CNT),
+	[CIF_REG_DVP_CROP] = CIF_REG(CIF_CROP),
+	[CIF_REG_DVP_SCL_CTRL] = CIF_REG(CIF_SCL_CTRL),
+	[CIF_REG_DVP_SCL_DST] = CIF_REG(CIF_SCL_DST),
+	[CIF_REG_DVP_SCL_FCT] = CIF_REG(CIF_SCL_FCT),
+	[CIF_REG_DVP_SCL_VALID_NUM] = CIF_REG(CIF_SCL_VALID_NUM),
+	[CIF_REG_DVP_LINE_LOOP_CTRL] = CIF_REG(CIF_LINE_LOOP_CTR),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(CIF_LAST_PIX),
+};
+
 static const char * const px30_cif_clks[] = {
 	"aclk_cif",
 	"hclk_cif",
@@ -386,6 +453,29 @@ static const char * const px30_cif_rsts[] = {
 	"rst_cif_pclkin",
 };
 
+/* TODO: define registers related to mipi */
+static const struct cif_reg rk1808_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_DMA_IDLE_REQ] = CIF_REG(CIF_DMA_IDLE_REQ),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_LINE_INT_NUM] = CIF_REG(CIF_LINE_INT_NUM),
+	[CIF_REG_DVP_CROP] = CIF_REG(CIF_CROP),
+	[CIF_REG_DVP_PATH_SEL] = CIF_REG(CIF_PATH_SEL),
+	[CIF_REG_DVP_FIFO_ENTRY] = CIF_REG(CIF_FIFO_ENTRY),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(CIF_LAST_PIX),
+};
+
 static const char * const rk1808_cif_clks[] = {
 	"aclk_cif",
 	"dclk_cif",
@@ -402,6 +492,26 @@ static const char * const rk1808_cif_rsts[] = {
 	"rst_cif_pclkin",
 };
 
+static const struct cif_reg rk3128_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_CROP] = CIF_REG(CIF_CROP),
+	[CIF_REG_DVP_SCL_CTRL] = CIF_REG(CIF_SCL_CTRL),
+	[CIF_REG_DVP_FIFO_ENTRY] = CIF_REG(CIF_FIFO_ENTRY),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(CIF_LAST_PIX),
+};
+
 static const char * const rk3128_cif_clks[] = {
 	"aclk_cif",
 	"hclk_cif",
@@ -412,6 +522,26 @@ static const char * const rk3128_cif_rsts[] = {
 	"rst_cif",
 };
 
+static const struct cif_reg rk3288_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_CROP] = CIF_REG(CIF_CROP),
+	[CIF_REG_DVP_SCL_CTRL] = CIF_REG(CIF_SCL_CTRL),
+	[CIF_REG_DVP_FIFO_ENTRY] = CIF_REG(CIF_FIFO_ENTRY),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(CIF_LAST_PIX),
+};
+
 static const char * const rk3288_cif_clks[] = {
 	"aclk_cif0",
 	"hclk_cif0",
@@ -422,6 +552,26 @@ static const char * const rk3288_cif_rsts[] = {
 	"rst_cif",
 };
 
+static const struct cif_reg rk3328_cif_regs[] = {
+	[CIF_REG_DVP_CTRL] = CIF_REG(CIF_CTRL),
+	[CIF_REG_DVP_INTEN] = CIF_REG(CIF_INTEN),
+	[CIF_REG_DVP_INTSTAT] = CIF_REG(CIF_INTSTAT),
+	[CIF_REG_DVP_FOR] = CIF_REG(CIF_FOR),
+	[CIF_REG_DVP_FRM0_ADDR_Y] = CIF_REG(CIF_FRM0_ADDR_Y),
+	[CIF_REG_DVP_FRM0_ADDR_UV] = CIF_REG(CIF_FRM0_ADDR_UV),
+	[CIF_REG_DVP_FRM1_ADDR_Y] = CIF_REG(CIF_FRM1_ADDR_Y),
+	[CIF_REG_DVP_FRM1_ADDR_UV] = CIF_REG(CIF_FRM1_ADDR_UV),
+	[CIF_REG_DVP_VIR_LINE_WIDTH] = CIF_REG(CIF_VIR_LINE_WIDTH),
+	[CIF_REG_DVP_SET_SIZE] = CIF_REG(CIF_SET_SIZE),
+	[CIF_REG_DVP_CROP] = CIF_REG(CIF_CROP),
+	[CIF_REG_DVP_SCL_CTRL] = CIF_REG(CIF_SCL_CTRL),
+	[CIF_REG_DVP_FIFO_ENTRY] = CIF_REG(CIF_FIFO_ENTRY),
+	[CIF_REG_DVP_FRAME_STATUS] = CIF_REG(CIF_FRAME_STATUS),
+	[CIF_REG_DVP_CUR_DST] = CIF_REG(CIF_CUR_DST),
+	[CIF_REG_DVP_LAST_LINE] = CIF_REG(CIF_LAST_LINE),
+	[CIF_REG_DVP_LAST_PIX] = CIF_REG(CIF_LAST_PIX),
+};
+
 static const char * const rk3328_cif_clks[] = {
 	"aclk_cif",
 	"hclk_cif",
@@ -439,6 +589,7 @@ static const struct cif_match_data px30_cif_match_data = {
 	.clks_num = ARRAY_SIZE(px30_cif_clks),
 	.rsts = px30_cif_rsts,
 	.rsts_num = ARRAY_SIZE(px30_cif_rsts),
+	.cif_regs = px30_cif_regs,
 };
 
 static const struct cif_match_data rk1808_cif_match_data = {
@@ -447,6 +598,7 @@ static const struct cif_match_data rk1808_cif_match_data = {
 	.clks_num = ARRAY_SIZE(rk1808_cif_clks),
 	.rsts = rk1808_cif_rsts,
 	.rsts_num = ARRAY_SIZE(rk1808_cif_rsts),
+	.cif_regs = rk1808_cif_regs,
 };
 
 static const struct cif_match_data rk3128_cif_match_data = {
@@ -455,6 +607,7 @@ static const struct cif_match_data rk3128_cif_match_data = {
 	.clks_num = ARRAY_SIZE(rk3128_cif_clks),
 	.rsts = rk3128_cif_rsts,
 	.rsts_num = ARRAY_SIZE(rk3128_cif_rsts),
+	.cif_regs = rk3128_cif_regs,
 };
 
 static const struct cif_match_data rk3288_cif_match_data = {
@@ -463,6 +616,7 @@ static const struct cif_match_data rk3288_cif_match_data = {
 	.clks_num = ARRAY_SIZE(rk3288_cif_clks),
 	.rsts = rk3288_cif_rsts,
 	.rsts_num = ARRAY_SIZE(rk3288_cif_rsts),
+	.cif_regs = rk3288_cif_regs,
 };
 
 static const struct cif_match_data rk3328_cif_match_data = {
@@ -471,6 +625,7 @@ static const struct cif_match_data rk3328_cif_match_data = {
 	.clks_num = ARRAY_SIZE(rk3328_cif_clks),
 	.rsts = rk3328_cif_rsts,
 	.rsts_num = ARRAY_SIZE(rk3328_cif_rsts),
+	.cif_regs = rk3328_cif_regs,
 };
 
 static const struct of_device_id rkcif_plat_of_match[] = {
@@ -586,7 +741,6 @@ void rkcif_soft_reset(struct rkcif_device *cif_dev, bool is_rst_iommu)
 	for (i = 0; i < ARRAY_SIZE(cif_dev->cif_rst); i++)
 		if (cif_dev->cif_rst[i])
 			reset_control_deassert(cif_dev->cif_rst[i]);
-
 }
 
 static int rkcif_plat_probe(struct platform_device *pdev)
@@ -637,8 +791,16 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 						   IORESOURCE_MEM,
 						   "cif_regs");
 		cif_dev->base_addr = devm_ioremap_resource(dev, res);
-		if (IS_ERR(cif_dev->base_addr))
-			return PTR_ERR(cif_dev->base_addr);
+		if (PTR_ERR(cif_dev->base_addr) == -EBUSY) {
+			resource_size_t offset = res->start;
+			resource_size_t size = resource_size(res);
+
+			cif_dev->base_addr = devm_ioremap(dev, offset, size);
+			if (IS_ERR(cif_dev->base_addr)) {
+				dev_err(dev, "ioremap failed\n");
+				return PTR_ERR(cif_dev->base_addr);
+			}
+		}
 	} else {
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 		cif_dev->base_addr = devm_ioremap_resource(dev, res);
@@ -653,6 +815,7 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 			data->rsts_num, RKCIF_MAX_RESET);
 		return -EINVAL;
 	}
+
 	for (i = 0; i < data->clks_num; i++) {
 		struct clk *clk = devm_clk_get(dev, data->clks[i]);
 
@@ -665,8 +828,10 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	cif_dev->clk_size = data->clks_num;
 
 	for (i = 0; i < data->rsts_num; i++) {
-		struct reset_control *rst =
-			devm_reset_control_get(dev, data->rsts[i]);
+		struct reset_control *rst = NULL;
+
+		if (data->rsts[i])
+			rst = devm_reset_control_get(dev, data->rsts[i]);
 		if (IS_ERR(rst)) {
 			dev_err(dev, "failed to get %s\n", data->rsts[i]);
 			return PTR_ERR(rst);
@@ -674,6 +839,8 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 		cif_dev->cif_rst[i] = rst;
 	}
 
+	cif_dev->cif_regs = data->cif_regs;
+
 	mutex_init(&cif_dev->stream_lock);
 	atomic_set(&cif_dev->pipe.power_cnt, 0);
 	atomic_set(&cif_dev->pipe.stream_cnt, 0);
diff --git a/drivers/media/platform/rockchip/cif/dev.h b/drivers/media/platform/rockchip/cif/dev.h
index 56aab2247ca3..b939e357e584 100644
--- a/drivers/media/platform/rockchip/cif/dev.h
+++ b/drivers/media/platform/rockchip/cif/dev.h
@@ -15,6 +15,8 @@
 #include <media/v4l2-device.h>
 #include <media/videobuf2-v4l2.h>
 #include <media/v4l2-mc.h>
+#include "regs.h"
+#include "version.h"
 
 #define CIF_DRIVER_NAME		"rkcif"
 #define CIF_VIDEODEVICE_NAME	"stream_cif"
@@ -41,7 +43,7 @@
 
 #define RKCIF_MAX_BUS_CLK	8
 #define RKCIF_MAX_SENSOR	2
-#define RKCIF_MAX_RESET		5
+#define RKCIF_MAX_RESET		15
 #define RKCIF_MAX_CSI_CHANNEL	4
 #define RKCIF_MAX_PIPELINE	4
 
@@ -306,8 +308,13 @@ struct rkcif_device {
 	atomic_t			fh_cnt;
 	struct mutex                    stream_lock; /* lock between streams */
 	enum rkcif_workmode		workmode;
+	const struct cif_reg *cif_regs;
 };
 
+void rkcif_write_register(struct rkcif_device *dev,
+			  enum cif_reg_index index, u32 val);
+unsigned int rkcif_read_register(struct rkcif_device *dev,
+				 enum cif_reg_index index);
 void rkcif_unregister_stream_vdevs(struct rkcif_device *dev,
 				   int stream_num);
 int rkcif_register_stream_vdevs(struct rkcif_device *dev,
diff --git a/drivers/media/platform/rockchip/cif/regs.h b/drivers/media/platform/rockchip/cif/regs.h
index fd01091e257f..b44278657d58 100644
--- a/drivers/media/platform/rockchip/cif/regs.h
+++ b/drivers/media/platform/rockchip/cif/regs.h
@@ -8,12 +8,56 @@
 #ifndef _RKCIF_REGS_H
 #define _RKCIF_REGS_H
 
+struct cif_reg {
+	u32 offset;
+};
+
+#define CIF_REG(_offset)		{ .offset = _offset, }
+
+enum cif_reg_index {
+	CIF_REG_DVP_CTRL = 0x0,
+	CIF_REG_DVP_INTEN,
+	CIF_REG_DVP_INTSTAT,
+	CIF_REG_DVP_FOR,
+	CIF_REG_DVP_LINE_NUM_ADDR,
+	CIF_REG_DVP_DMA_IDLE_REQ,
+	CIF_REG_DVP_MULTI_ID,
+	CIF_REG_DVP_FRM0_ADDR_Y,
+	CIF_REG_DVP_FRM0_ADDR_UV,
+	CIF_REG_DVP_FRM1_ADDR_Y,
+	CIF_REG_DVP_FRM1_ADDR_UV,
+	CIF_REG_DVP_VIR_LINE_WIDTH,
+	CIF_REG_DVP_SET_SIZE,
+	CIF_REG_DVP_SCM_ADDR_Y,
+	CIF_REG_DVP_SCM_ADDR_U,
+	CIF_REG_DVP_SCM_ADDR_V,
+	CIF_REG_DVP_WB_UP_FILTER,
+	CIF_REG_DVP_WB_LOW_FILTER,
+	CIF_REG_DVP_WBC_CNT,
+	CIF_REG_DVP_LINE_INT_NUM,
+	CIF_REG_DVP_LINE_CNT,
+	CIF_REG_DVP_CROP,
+	CIF_REG_DVP_SCL_CTRL,
+	CIF_REG_DVP_SCL_DST,
+	CIF_REG_DVP_SCL_FCT,
+	CIF_REG_DVP_SCL_VALID_NUM,
+	CIF_REG_DVP_LINE_LOOP_CTRL,
+	CIF_REG_DVP_PATH_SEL,
+	CIF_REG_DVP_FIFO_ENTRY,
+	CIF_REG_DVP_FRAME_STATUS,
+	CIF_REG_DVP_CUR_DST,
+	CIF_REG_DVP_LAST_LINE,
+	CIF_REG_DVP_LAST_PIX,
+	CIF_REG_INDEX_MAX
+};
+
 /* CIF Reg Offset */
 #define CIF_CTRL			0x00
 #define CIF_INTEN			0x04
 #define CIF_INTSTAT			0x08
 #define CIF_FOR				0x0c
 #define CIF_LINE_NUM_ADDR		0x10
+#define CIF_DMA_IDLE_REQ		0x10
 #define CIF_FRM0_ADDR_Y			0x14
 #define CIF_FRM0_ADDR_UV		0x18
 #define CIF_FRM1_ADDR_Y			0x1c
@@ -21,16 +65,20 @@
 #define CIF_VIR_LINE_WIDTH		0x24
 #define CIF_SET_SIZE			0x28
 #define CIF_SCM_ADDR_Y			0x2c
+#define CIF_LINE_INT_NUM		0x2c
 #define CIF_SCM_ADDR_U			0x30
+#define CIF_LINE_CNT			0x30
 #define CIF_SCM_ADDR_V			0x34
 #define CIF_WB_UP_FILTER		0x38
 #define CIF_WB_LOW_FILTER		0x3c
 #define CIF_WBC_CNT			0x40
 #define CIF_CROP			0x44
 #define CIF_SCL_CTRL			0x48
+#define CIF_PATH_SEL			0x48
 #define CIF_SCL_DST			0x4c
 #define CIF_SCL_FCT			0x50
 #define CIF_SCL_VALID_NUM		0x54
+#define CIF_FIFO_ENTRY			0x54
 #define CIF_LINE_LOOP_CTR		0x58
 #define CIF_FRAME_STATUS		0x60
 #define CIF_CUR_DST			0x64
diff --git a/drivers/media/platform/rockchip/cif/version.h b/drivers/media/platform/rockchip/cif/version.h
index 0f5bb4ef9cfb..1dfed49ec7a4 100644
--- a/drivers/media/platform/rockchip/cif/version.h
+++ b/drivers/media/platform/rockchip/cif/version.h
@@ -22,6 +22,7 @@
  *7. Add framesizes and frmintervals callback
  *8. fix dvp camera fails to link with cif on rk1808
  *9. add camera support hotplug for n4
+ *10. reconstruct register's reading and writing
  */
 
 #define RKCIF_DRIVER_VERSION KERNEL_VERSION(0, 1, 0x2)
-- 
2.35.3

