From b2141a00d24596950a5552797de8c323c6421699 Mon Sep 17 00:00:00 2001
From: Simon Xue <xxm@rock-chips.com>
Date: Wed, 20 Nov 2019 16:55:27 +0800
Subject: [PATCH] iommu: dma: fix iommu mapping issue on ARM32

1. select ARM_DMA_USE_IOMMU only ARM32

2. fix iova hole
   __alloc_iova will return un-continuous va if align non-zero

3. don't break iommu_attach_device
   iommu_attach_device will break if iommu shared by two or more
   masters

Change-Id: Ifd1c652341e2270bfde57ebe1e0cd00d51d38eec
Signed-off-by: Simon Xue <xxm@rock-chips.com>
---
 arch/arm/mm/dma-mapping.c | 3 +++
 drivers/iommu/Kconfig     | 2 +-
 drivers/iommu/iommu.c     | 4 +++-
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index 8211cf45ece1..687bf1e7066c 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -1198,6 +1198,9 @@ static inline dma_addr_t __alloc_iova(struct dma_iommu_mapping *mapping,
 	count = PAGE_ALIGN(size) >> PAGE_SHIFT;
 	align = (1 << order) - 1;
 
+	/* workaround for avoid va hole */
+	align = 0;
+
 	spin_lock_irqsave(&mapping->lock, flags);
 	for (i = 0; i < mapping->nr_bitmaps; i++) {
 		start = bitmap_find_next_zero_area(mapping->bitmaps[i],
diff --git a/drivers/iommu/Kconfig b/drivers/iommu/Kconfig
index c60395b7470f..a33ecf7ee559 100644
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@ -258,7 +258,7 @@ config ROCKCHIP_IOMMU
 	depends on ARM || ARM64
 	depends on ARCH_ROCKCHIP || COMPILE_TEST
 	select IOMMU_API
-	select ARM_DMA_USE_IOMMU
+	select ARM_DMA_USE_IOMMU if ARM
 	help
 	  Support for IOMMUs found on Rockchip rk32xx SOCs.
 	  These IOMMUs allow virtualization of the address space used by most
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index 202813fdda1c..2718d4f41349 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -1358,7 +1358,9 @@ int iommu_attach_device(struct iommu_domain *domain, struct device *dev)
 	 */
 	mutex_lock(&group->mutex);
 	ret = -EINVAL;
-	if (iommu_group_device_count(group) != 1)
+
+	/* don't break attach if iommu shared by more than one master */
+	if (iommu_group_device_count(group) < 1)
 		goto out_unlock;
 
 	ret = __iommu_attach_group(domain, group);
-- 
2.35.3

