From de69a67f1557d2a3f130659702583b3d743b75ae Mon Sep 17 00:00:00 2001
From: Meng Dongyang <daniel.meng@rock-chips.com>
Date: Fri, 12 Jan 2018 10:27:33 +0800
Subject: [PATCH] usb: dwc_otg_310: remove warning

Remove check tool warning of jenkins, smatch and coccinelle in
the dwc_otg_310 driver.

[smatch] drivers/usb/dwc_otg_310/dwc_otg_attr.c:407
error: we previously assumed 'pdev' could be null (see line 404)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_attr.c:415
error: we previously assumed 'pdev' could be null (see line 412)
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_attr.c:468
WARNING comparing pointer to 0
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_attr.c:501
WARNING comparing pointer to 0
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil.c:778
error: buffer overflow 'core_if->core_global_regs->dtxfsiz' 15 <= 15
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil.c:938
error: buffer overflow 'core_if->core_global_regs->dtxfsiz' 15 <= 15
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_cil.c:3687
WARNING: possible condition with no effect (if == else)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil.c:4182
warn: impossible condition '(deptsiz.b.pktcnt > 1023) => (0-1023 > 1023)'
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil.c:4316
warn: impossible condition '(deptsiz.b.pktcnt > 1023) => (0-1023 > 1023)'
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c:329
Unneeded semicolon
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c:829
warn: was && intended here instead of ||?
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c:949
error: uninitialized symbol 'retval'.
[smatch] drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c:1344
warn: we tested 'core_if->otg_ver == 1' before and it was 'true'
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_driver.c:555
WARNING: possible condition with no effect (if == else)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c:480
error: potential null dereference 'hcd'.  (usb_create_hcd returns null)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c:484
warn: variable dereferenced before check 'hcd' (see line 480)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c:571
error: potential null dereference 'hcd'.  (usb_create_hcd returns null)
[smatch] drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c:575
warn: variable dereferenced before check 'hcd' (see line 571)
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c:815
Unneeded semicolon
[smatch] drivers/usb/dwc_otg_310/dwc_otg_pcd.c:1490
warn: this array is probably non-NULL. 'desc->wMaxPacketSize'
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_pcd.c:2277
WARNING comparing pointer to 0
[coccinelle] drivers/usb/dwc_otg_310/dwc_otg_pcd.c:2277
WARNING comparing pointer to 0
[coccinelle] drivers/usb/dwc_otg_310/usbdev_bc.c:102
WARNING: casting value returned by memory allocation function to
(uoc_field_t *) is useless.
[smatch] drivers/usb/dwc_otg_310/usbdev_bc.c:105
error: potential null dereference 'pBC_UOC_FIELDS'.  (kzalloc returns null)
[coccinelle] drivers/usb/dwc_otg_310/usbdev_bc.c:
WARNING: casting value returned by memory allocation function to
(uoc_field_t *) is useless.
[smatch] drivers/usb/dwc_otg_310/usbdev_bc.c:126
error: potential null dereference 'pBC_UOC_FIELDS'.  (kzalloc returns null)
[coccinelle] drivers/usb/dwc_otg_310/usbdev_bc.c:137 uoc_init_inno()
WARNING: casting value returned by memory allocation function to
(uoc_field_t *) is useless.
[smatch] drivers/usb/dwc_otg_310/usbdev_bc.c:141
error: potential null dereference 'pBC_UOC_FIELDS'.  (kzalloc returns null)
CHECK: Avoid CamelCase: <pBC_UOC_FIELDS>
+	pBC_UOC_FIELDS = kzalloc(SYNOP_BC_MAX * sizeof(uoc_field_t),
WARNING: Prefer kcalloc over kzalloc with multiply
+	pBC_UOC_FIELDS = kzalloc(SYNOP_BC_MAX * sizeof(uoc_field_t),
+				 GFP_ATOMIC);

Change-Id: If4831151464eeaf0e399a4be3c179c4a56e28dde
Signed-off-by: Meng Dongyang <daniel.meng@rock-chips.com>
---
 drivers/usb/dwc_otg_310/dwc_otg_attr.c      |  14 ++-
 drivers/usb/dwc_otg_310/dwc_otg_cil.c       |  28 ++---
 drivers/usb/dwc_otg_310/dwc_otg_cil.h       |   2 +-
 drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c  |   9 +-
 drivers/usb/dwc_otg_310/dwc_otg_driver.c    |   4 +-
 drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c |  27 +++--
 drivers/usb/dwc_otg_310/dwc_otg_pcd.c       |   6 +-
 drivers/usb/dwc_otg_310/dwc_otg_regs.h      |   2 +-
 drivers/usb/dwc_otg_310/usbdev_bc.c         | 123 +++++++++++---------
 9 files changed, 117 insertions(+), 98 deletions(-)

diff --git a/drivers/usb/dwc_otg_310/dwc_otg_attr.c b/drivers/usb/dwc_otg_310/dwc_otg_attr.c
index f071bf401473..90b61294ace8 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_attr.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_attr.c
@@ -401,16 +401,20 @@ DEVICE_ATTR(_otg_attr_name_, 0444, _otg_attr_name_##_show, NULL);
 
 void dwc_set_device_platform_data(struct platform_device *pdev, void *data)
 {
-	if (NULL == pdev || NULL == &pdev->dev)
+	if (NULL == pdev || NULL == &pdev->dev) {
 		DWC_ERROR("NULL Pointer in func %s \n", __func__);
+		return;
+	}
 
 	pdev->dev.platform_data = data;
 }
 
 void *dwc_get_device_platform_data(const struct platform_device *pdev)
 {
-	if (NULL == pdev || NULL == &pdev->dev)
+	if (NULL == pdev || NULL == &pdev->dev) {
 		DWC_ERROR("NULL Pointer in func %s \n", __func__);
+		return NULL;
+	}
 
 	return pdev->dev.platform_data;
 }
@@ -464,8 +468,7 @@ static ssize_t regvalue_show(struct device *_dev,
 	uint32_t val;
 	volatile uint32_t *addr;
 
-	if (otg_dev->os_dep.reg_offset != 0xFFFFFFFF
-	    && 0 != otg_dev->os_dep.base) {
+	if (otg_dev->os_dep.reg_offset != 0xFFFFFFFF && otg_dev->os_dep.base) {
 		/* Calculate the address */
 		addr = (uint32_t *) (otg_dev->os_dep.reg_offset +
 				     (uint8_t *) otg_dev->os_dep.base);
@@ -497,8 +500,7 @@ static ssize_t regvalue_store(struct device *_dev,
 	/* dev_dbg(_dev, "Offset=0x%08x Val=0x%08x\n",
 	 * otg_dev->reg_offset, val);
 	 */
-	if (otg_dev->os_dep.reg_offset != 0xFFFFFFFF
-	    && 0 != otg_dev->os_dep.base) {
+	if (otg_dev->os_dep.reg_offset != 0xFFFFFFFF && otg_dev->os_dep.base) {
 		/* Calculate the address */
 		addr = (uint32_t *) (otg_dev->os_dep.reg_offset +
 				     (uint8_t *) otg_dev->os_dep.base);
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_cil.c b/drivers/usb/dwc_otg_310/dwc_otg_cil.c
index 2230fd7a4187..4d37990c6709 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_cil.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_cil.c
@@ -772,7 +772,7 @@ int dwc_otg_save_global_regs(dwc_otg_core_if_t *core_if)
 	gr->pcgcctl_local = DWC_READ_REG32(core_if->pcgcctl);
 	gr->gdfifocfg_local =
 	    DWC_READ_REG32(&core_if->core_global_regs->gdfifocfg);
-	for (i = 0; i < MAX_EPS_CHANNELS; i++) {
+	for (i = 0; i < MAX_TX_FIFOS; i++) {
 		gr->dtxfsiz_local[i] =
 		    DWC_READ_REG32(&(core_if->core_global_regs->dtxfsiz[i]));
 	}
@@ -933,7 +933,7 @@ int dwc_otg_restore_global_regs(dwc_otg_core_if_t *core_if)
 			gr->hptxfsiz_local);
 	DWC_WRITE_REG32(&core_if->core_global_regs->gdfifocfg,
 			gr->gdfifocfg_local);
-	for (i = 0; i < MAX_EPS_CHANNELS; i++) {
+	for (i = 0; i < MAX_TX_FIFOS; i++) {
 		DWC_WRITE_REG32(&core_if->core_global_regs->dtxfsiz[i],
 				gr->dtxfsiz_local[i]);
 	}
@@ -3683,10 +3683,7 @@ void dwc_otg_ep_activate(dwc_otg_core_if_t *core_if, dwc_ep_t *ep)
 		depctl.b.eptype = ep->type;
 		depctl.b.txfnum = ep->tx_fifo_num;
 
-		if (ep->type == DWC_OTG_EP_TYPE_ISOC)
-			depctl.b.setd0pid = 1;
-		else
-			depctl.b.setd0pid = 1;
+		depctl.b.setd0pid = 1;
 
 		depctl.b.usbactep = 1;
 
@@ -4123,6 +4120,7 @@ void dwc_otg_ep_start_transfer(dwc_otg_core_if_t *core_if, dwc_ep_t *ep)
 	depctl_data_t depctl;
 	deptsiz_data_t deptsiz;
 	gintmsk_data_t intr_mask = {.d32 = 0 };
+	u32 pktcnt;
 
 	DWC_DEBUGPL((DBG_PCDV | DBG_CILV), "%s()\n", __func__);
 	DWC_DEBUGPL(DBG_PCD, "ep%d-%s xfer_len=%d xfer_cnt=%d "
@@ -4175,13 +4173,14 @@ void dwc_otg_ep_start_transfer(dwc_otg_core_if_t *core_if, dwc_ep_t *ep)
 			 *	exist ? 1 : 0)
 			 */
 			deptsiz.b.xfersize = ep->xfer_len - ep->xfer_count;
-			deptsiz.b.pktcnt =
-			    (ep->xfer_len - ep->xfer_count - 1 +
-			     ep->maxpacket) / ep->maxpacket;
-			if (deptsiz.b.pktcnt > MAX_PKT_CNT) {
+			pktcnt = (ep->xfer_len - ep->xfer_count - 1 +
+				  ep->maxpacket) / ep->maxpacket;
+			if (pktcnt > MAX_PKT_CNT) {
 				deptsiz.b.pktcnt = MAX_PKT_CNT;
 				deptsiz.b.xfersize =
 				    deptsiz.b.pktcnt * ep->maxpacket;
+			} else {
+				deptsiz.b.pktcnt = pktcnt;
 			}
 			if (ep->type == DWC_OTG_EP_TYPE_ISOC)
 				deptsiz.b.mc = deptsiz.b.pktcnt;
@@ -4309,11 +4308,12 @@ void dwc_otg_ep_start_transfer(dwc_otg_core_if_t *core_if, dwc_ep_t *ep)
 			deptsiz.b.xfersize = ep->maxpacket;
 			deptsiz.b.pktcnt = 1;
 		} else {
-			deptsiz.b.pktcnt =
-			    (ep->xfer_len - ep->xfer_count +
-			     (ep->maxpacket - 1)) / ep->maxpacket;
-			if (deptsiz.b.pktcnt > MAX_PKT_CNT)
+			pktcnt = (ep->xfer_len - ep->xfer_count +
+				  (ep->maxpacket - 1)) / ep->maxpacket;
+			if (pktcnt > MAX_PKT_CNT)
 				deptsiz.b.pktcnt = MAX_PKT_CNT;
+			else
+				deptsiz.b.pktcnt = pktcnt;
 			if (!core_if->dma_desc_enable) {
 				ep->xfer_len =
 				    deptsiz.b.pktcnt * ep->maxpacket +
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_cil.h b/drivers/usb/dwc_otg_310/dwc_otg_cil.h
index f12457dc93c1..cdcf22789e6e 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_cil.h
+++ b/drivers/usb/dwc_otg_310/dwc_otg_cil.h
@@ -782,7 +782,7 @@ struct dwc_otg_global_regs_backup {
 	uint32_t hptxfsiz_local;
 	uint32_t pcgcctl_local;
 	uint32_t gdfifocfg_local;
-	uint32_t dtxfsiz_local[MAX_EPS_CHANNELS];
+	uint32_t dtxfsiz_local[MAX_TX_FIFOS];
 	uint32_t gpwrdn_local;
 	uint32_t xhib_pcgcctl;
 	uint32_t xhib_gpwrdn;
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c b/drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c
index c8e590929d65..735a10c1c58f 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_cil_intr.c
@@ -326,7 +326,7 @@ void w_conn_id_status_change(void *p)
 		DWC_ASSERT(++count < 10000,
 			   "Connection id status change timed out");
 		core_if->op_state = B_PERIPHERAL;
-		cil_hcd_stop(core_if);;
+		cil_hcd_stop(core_if);
 		/* pcd->phy_suspend = 1; */
 		pcd->vbus_status = 0;
 		dwc_otg_pcd_start_check_vbus_work(pcd);
@@ -826,8 +826,7 @@ static int32_t dwc_otg_handle_pwrdn_session_change(dwc_otg_core_if_t *core_if)
 			return 1;
 		}
 
-		if ((otg_cap_param != DWC_OTG_CAP_PARAM_HNP_SRP_CAPABLE ||
-		     otg_cap_param != DWC_OTG_CAP_PARAM_SRP_ONLY_CAPABLE) &&
+		if (otg_cap_param == DWC_OTG_CAP_PARAM_NO_HNP_SRP_CAPABLE &&
 		    gpwrdn.b.bsessvld == 0) {
 			/* Save gpwrdn register for further usage if stschng interrupt */
 			core_if->gr_backup->gpwrdn_local =
@@ -920,7 +919,7 @@ static int32_t dwc_otg_handle_pwrdn_session_change(dwc_otg_core_if_t *core_if)
  */
 static uint32_t dwc_otg_handle_pwrdn_stschng_intr(dwc_otg_device_t *otg_dev)
 {
-	int retval;
+	int retval = 0;
 	gpwrdn_data_t gpwrdn = {.d32 = 0 };
 	gpwrdn_data_t gpwrdn_temp = {.d32 = 0 };
 	dwc_otg_core_if_t *core_if = otg_dev->core_if;
@@ -1341,7 +1340,7 @@ int32_t dwc_otg_handle_usb_suspend_intr(dwc_otg_core_if_t *core_if)
 			gotgctl_data_t gotgctl = {.d32 = 0 };
 			gotgctl.d32 =
 			    DWC_READ_REG32(&core_if->core_global_regs->gotgctl);
-			if (gotgctl.b.devhnpen && core_if->otg_ver == 1) {
+			if (gotgctl.b.devhnpen) {
 				gotgctl_data_t gotgctl = {.d32 = 0 };
 				dwc_mdelay(5);
 				/**@todo Is the gotgctl.devhnpen cleared
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_driver.c b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
index b895efaa67e4..76f08979854c 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_driver.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
@@ -551,9 +551,7 @@ int dwc_otg_usb_state(void)
 		/* op_state is A_HOST */
 		if (1 == otg_dev->core_if->op_state)
 			return 1;
-		/* op_state is B_PERIPHERAL */
-		else if (4 == otg_dev->core_if->op_state)
-			return 0;
+		/* op_state is B_PERIPHERAL or others */
 		else
 			return 0;
 	} else {
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c b/drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c
index 99b7f1adcbba..d6fc10a818f3 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_hcd_linux.c
@@ -472,19 +472,24 @@ int otg20_hcd_init(struct platform_device *_dev)
 	 */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 30)
 	hcd = usb_create_hcd(&dwc_otg_hc_driver, &_dev->dev, _dev->dev.bus_id);
+	if (!hcd) {
+		retval = -ENOMEM;
+		goto error1;
+	}
 #else
 	hcd =
 	    usb_create_hcd(&dwc_otg_hc_driver, &_dev->dev,
 			   dev_name(&_dev->dev));
-	hcd->has_tt = 1;
-	/* hcd->uses_new_polling = 1; */
-	/* hcd->poll_rh = 0; */
-#endif
 	if (!hcd) {
 		retval = -ENOMEM;
 		goto error1;
 	}
 
+	hcd->has_tt = 1;
+	/* hcd->uses_new_polling = 1; */
+	/* hcd->poll_rh = 0; */
+#endif
+
 	hcd->regs = otg_dev->os_dep.base;
 
 	/* Initialize the DWC OTG HCD. */
@@ -563,18 +568,22 @@ int host20_hcd_init(struct platform_device *_dev)
 	 */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 30)
 	hcd = usb_create_hcd(&dwc_otg_hc_driver, &_dev->dev, _dev->dev.bus_id);
+	if (!hcd) {
+		retval = -ENOMEM;
+		goto error1;
+	}
 #else
 	hcd =
 	    usb_create_hcd(&dwc_otg_hc_driver, &_dev->dev,
 			   dev_name(&_dev->dev));
-	hcd->has_tt = 1;
-	/* hcd->uses_new_polling = 1; */
-	/* hcd->poll_rh = 0; */
-#endif
 	if (!hcd) {
 		retval = -ENOMEM;
 		goto error1;
 	}
+	hcd->has_tt = 1;
+	/* hcd->uses_new_polling = 1; */
+	/* hcd->poll_rh = 0; */
+#endif
 
 	hcd->regs = otg_dev->os_dep.base;
 
@@ -811,7 +820,7 @@ static int dwc_otg_hcd_resume(struct usb_hcd *hcd)
 #endif
 
 	/* power on */
-	pcgcctl.d32 = DWC_READ_REG32(core_if->pcgcctl);;
+	pcgcctl.d32 = DWC_READ_REG32(core_if->pcgcctl);
 	pcgcctl.b.stoppclk = 0;	/* restart phy clk */
 	DWC_WRITE_REG32(core_if->pcgcctl, pcgcctl.d32);
 	udelay(1);
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_pcd.c b/drivers/usb/dwc_otg_310/dwc_otg_pcd.c
index 9a25c58112b6..378e29ccfb99 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_pcd.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_pcd.c
@@ -1486,7 +1486,7 @@ int dwc_otg_pcd_ep_enable(dwc_otg_pcd_t *pcd,
 	num = UE_GET_ADDR(desc->bEndpointAddress);
 	dir = UE_GET_DIR(desc->bEndpointAddress);
 
-	if (!desc->wMaxPacketSize) {
+	if (!UGETW(desc->wMaxPacketSize)) {
 		DWC_WARN("bad maxpacketsize\n");
 		retval = -DWC_E_INVALID;
 		goto out;
@@ -2273,7 +2273,7 @@ int dwc_otg_pcd_ep_queue(dwc_otg_pcd_t *pcd, void *ep_handle,
 	 * (odd/even) start transfer
 	 */
 	if (ep->dwc_ep.type == DWC_OTG_EP_TYPE_ISOC) {
-		if (req != 0) {
+		if (req) {
 			depctl_data_t depctl = {.d32 =
 				    DWC_READ_REG32(&pcd->core_if->
 						   dev_if->in_ep_regs[ep->
@@ -2433,7 +2433,7 @@ int dwc_otg_pcd_ep_queue(dwc_otg_pcd_t *pcd, void *ep_handle,
 		}
 	}
 
-	if (req != 0) {
+	if (req) {
 		++pcd->request_pending;
 		DWC_CIRCLEQ_INSERT_TAIL(&ep->queue, req, queue_entry);
 		if (ep->dwc_ep.is_in && ep->stopped
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_regs.h b/drivers/usb/dwc_otg_310/dwc_otg_regs.h
index 5d0a8b75744a..6b57060c6fb7 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_regs.h
+++ b/drivers/usb/dwc_otg_310/dwc_otg_regs.h
@@ -147,7 +147,7 @@ typedef struct dwc_otg_core_global_regs {
 	/** Device Periodic Transmit FIFO#n Register if dedicated fifos are disabled,
 		otherwise Device Transmit FIFO#n Register.
 	 * <i>Offset: 104h + (FIFO_Number-1)*04h, 1 <= FIFO Number <= 15 (1<=n<=15).</i> */
-	volatile uint32_t dtxfsiz[15];
+	volatile uint32_t dtxfsiz[MAX_TX_FIFOS];
 } dwc_otg_core_global_regs_t;
 
 /**
diff --git a/drivers/usb/dwc_otg_310/usbdev_bc.c b/drivers/usb/dwc_otg_310/usbdev_bc.c
index 748b9ee4a454..89d5fca63bf1 100644
--- a/drivers/usb/dwc_otg_310/usbdev_bc.c
+++ b/drivers/usb/dwc_otg_310/usbdev_bc.c
@@ -23,12 +23,12 @@ char *bc_string[USB_BC_TYPE_MAX] = {"DISCONNECT",
 				    "UNKNOW"};
 
 /****** GET and SET REGISTER FIELDS IN GRF UOC ******/
-#define BC_GET(x) grf_uoc_get_field(&pBC_UOC_FIELDS[x])
-#define BC_SET(x, v) grf_uoc_set_field(&pBC_UOC_FIELDS[x], v)
+#define BC_GET(x) grf_uoc_get_field(&p_bc_uoc_fields[x])
+#define BC_SET(x, v) grf_uoc_set_field(&p_bc_uoc_fields[x], v)
 
-uoc_field_t *pBC_UOC_FIELDS;
-static void *pGRF_BASE;
-static void *pGRF_REGMAP;
+uoc_field_t *p_bc_uoc_fields;
+static void *p_grf_base;
+static void *p_grf_regmap;
 DEFINE_MUTEX(bc_mutex);
 
 static enum bc_port_type usb_charger_status = USB_BC_TYPE_DISCNT;
@@ -64,11 +64,11 @@ void grf_uoc_set_field(uoc_field_t *field, u32 value)
 	if (!uoc_field_valid(field))
 		return;
 
-	if (pGRF_BASE) {
-		grf_uoc_set(pGRF_BASE, field->b.offset, field->b.bitmap,
+	if (p_grf_base) {
+		grf_uoc_set(p_grf_base, field->b.offset, field->b.bitmap,
 			    field->b.mask, value);
-	} else if (pGRF_REGMAP) {
-		regmap_grf_uoc_set(pGRF_REGMAP, field->b.offset,
+	} else if (p_grf_regmap) {
+		regmap_grf_uoc_set(p_grf_regmap, field->b.offset,
 				   field->b.bitmap,
 				   field->b.mask, value);
 	}
@@ -76,11 +76,11 @@ void grf_uoc_set_field(uoc_field_t *field, u32 value)
 
 u32 grf_uoc_get_field(uoc_field_t *field)
 {
-	if (pGRF_BASE) {
-		return grf_uoc_get(pGRF_BASE, field->b.offset, field->b.bitmap,
+	if (p_grf_base) {
+		return grf_uoc_get(p_grf_base, field->b.offset, field->b.bitmap,
 				   field->b.mask);
-	} else if (pGRF_REGMAP) {
-		return regmap_grf_uoc_get(pGRF_REGMAP, field->b.offset,
+	} else if (p_grf_regmap) {
+		return regmap_grf_uoc_get(p_grf_regmap, field->b.offset,
 					  field->b.bitmap, field->b.mask);
 	} else {
 		return 0;
@@ -98,72 +98,83 @@ static inline int uoc_init_field(struct device_node *np, const char *name,
 
 static inline void uoc_init_synop(struct device_node *np)
 {
-	pBC_UOC_FIELDS =
-	    (uoc_field_t *) kzalloc(SYNOP_BC_MAX * sizeof(uoc_field_t),
-				    GFP_ATOMIC);
+	p_bc_uoc_fields = kcalloc(SYNOP_BC_MAX, sizeof(uoc_field_t),
+				  GFP_ATOMIC);
 
-	uoc_init_field(np, "rk_usb,bvalid", &pBC_UOC_FIELDS[SYNOP_BC_BVALID]);
-	uoc_init_field(np, "rk_usb,iddig", &pBC_UOC_FIELDS[SYNOP_BC_IDDIG]);
-	uoc_init_field(np, "rk_usb,dcdenb", &pBC_UOC_FIELDS[SYNOP_BC_DCDENB]);
+	if (!p_bc_uoc_fields)
+		return;
+
+	uoc_init_field(np, "rk_usb,bvalid", &p_bc_uoc_fields[SYNOP_BC_BVALID]);
+	uoc_init_field(np, "rk_usb,iddig", &p_bc_uoc_fields[SYNOP_BC_IDDIG]);
+	uoc_init_field(np, "rk_usb,dcdenb", &p_bc_uoc_fields[SYNOP_BC_DCDENB]);
 	uoc_init_field(np, "rk_usb,vdatsrcenb",
-		       &pBC_UOC_FIELDS[SYNOP_BC_VDATSRCENB]);
+		       &p_bc_uoc_fields[SYNOP_BC_VDATSRCENB]);
 	uoc_init_field(np, "rk_usb,vdatdetenb",
-		       &pBC_UOC_FIELDS[SYNOP_BC_VDATDETENB]);
-	uoc_init_field(np, "rk_usb,chrgsel", &pBC_UOC_FIELDS[SYNOP_BC_CHRGSEL]);
-	uoc_init_field(np, "rk_usb,chgdet", &pBC_UOC_FIELDS[SYNOP_BC_CHGDET]);
-	uoc_init_field(np, "rk_usb,fsvplus", &pBC_UOC_FIELDS[SYNOP_BC_FSVPLUS]);
+		       &p_bc_uoc_fields[SYNOP_BC_VDATDETENB]);
+	uoc_init_field(np, "rk_usb,chrgsel",
+		       &p_bc_uoc_fields[SYNOP_BC_CHRGSEL]);
+	uoc_init_field(np, "rk_usb,chgdet", &p_bc_uoc_fields[SYNOP_BC_CHGDET]);
+	uoc_init_field(np, "rk_usb,fsvplus",
+		       &p_bc_uoc_fields[SYNOP_BC_FSVPLUS]);
 	uoc_init_field(np, "rk_usb,fsvminus",
-		       &pBC_UOC_FIELDS[SYNOP_BC_FSVMINUS]);
+		       &p_bc_uoc_fields[SYNOP_BC_FSVMINUS]);
 }
 
 static inline void uoc_init_rk(struct device_node *np)
 {
-	pBC_UOC_FIELDS =
-	    (uoc_field_t *) kzalloc(RK_BC_MAX * sizeof(uoc_field_t),
-				    GFP_ATOMIC);
-
-	uoc_init_field(np, "rk_usb,bvalid", &pBC_UOC_FIELDS[RK_BC_BVALID]);
-	uoc_init_field(np, "rk_usb,iddig", &pBC_UOC_FIELDS[RK_BC_IDDIG]);
-	uoc_init_field(np, "rk_usb,line", &pBC_UOC_FIELDS[RK_BC_LINESTATE]);
-	uoc_init_field(np, "rk_usb,softctrl", &pBC_UOC_FIELDS[RK_BC_SOFTCTRL]);
-	uoc_init_field(np, "rk_usb,opmode", &pBC_UOC_FIELDS[RK_BC_OPMODE]);
-	uoc_init_field(np, "rk_usb,xcvrsel", &pBC_UOC_FIELDS[RK_BC_XCVRSELECT]);
-	uoc_init_field(np, "rk_usb,termsel", &pBC_UOC_FIELDS[RK_BC_TERMSELECT]);
+	p_bc_uoc_fields = kcalloc(RK_BC_MAX, sizeof(uoc_field_t),
+				  GFP_ATOMIC);
+
+	if (!p_bc_uoc_fields)
+		return;
+
+	uoc_init_field(np, "rk_usb,bvalid", &p_bc_uoc_fields[RK_BC_BVALID]);
+	uoc_init_field(np, "rk_usb,iddig", &p_bc_uoc_fields[RK_BC_IDDIG]);
+	uoc_init_field(np, "rk_usb,line", &p_bc_uoc_fields[RK_BC_LINESTATE]);
+	uoc_init_field(np, "rk_usb,softctrl", &p_bc_uoc_fields[RK_BC_SOFTCTRL]);
+	uoc_init_field(np, "rk_usb,opmode", &p_bc_uoc_fields[RK_BC_OPMODE]);
+	uoc_init_field(np, "rk_usb,xcvrsel",
+		       &p_bc_uoc_fields[RK_BC_XCVRSELECT]);
+	uoc_init_field(np, "rk_usb,termsel",
+		       &p_bc_uoc_fields[RK_BC_TERMSELECT]);
 }
 
 static inline void uoc_init_inno(struct device_node *np)
 {
-	pBC_UOC_FIELDS = (uoc_field_t *)
-			 kzalloc(INNO_BC_MAX * sizeof(uoc_field_t), GFP_ATOMIC);
+	p_bc_uoc_fields = kcalloc(INNO_BC_MAX, sizeof(uoc_field_t),
+				  GFP_ATOMIC);
+
+	if (!p_bc_uoc_fields)
+		return;
 
 	uoc_init_field(np, "rk_usb,bvalid",
-			   &pBC_UOC_FIELDS[INNO_BC_BVALID]);
+			   &p_bc_uoc_fields[INNO_BC_BVALID]);
 	uoc_init_field(np, "rk_usb,iddig",
-			   &pBC_UOC_FIELDS[INNO_BC_IDDIG]);
+			   &p_bc_uoc_fields[INNO_BC_IDDIG]);
 	uoc_init_field(np, "rk_usb,vdmsrcen",
-			   &pBC_UOC_FIELDS[INNO_BC_VDMSRCEN]);
+			   &p_bc_uoc_fields[INNO_BC_VDMSRCEN]);
 	uoc_init_field(np, "rk_usb,vdpsrcen",
-			   &pBC_UOC_FIELDS[INNO_BC_VDPSRCEN]);
+			   &p_bc_uoc_fields[INNO_BC_VDPSRCEN]);
 	uoc_init_field(np, "rk_usb,rdmpden",
-			   &pBC_UOC_FIELDS[INNO_BC_RDMPDEN]);
+			   &p_bc_uoc_fields[INNO_BC_RDMPDEN]);
 	uoc_init_field(np, "rk_usb,idpsrcen",
-			   &pBC_UOC_FIELDS[INNO_BC_IDPSRCEN]);
+			   &p_bc_uoc_fields[INNO_BC_IDPSRCEN]);
 	uoc_init_field(np, "rk_usb,idmsinken",
-			   &pBC_UOC_FIELDS[INNO_BC_IDMSINKEN]);
+			   &p_bc_uoc_fields[INNO_BC_IDMSINKEN]);
 	uoc_init_field(np, "rk_usb,idpsinken",
-			   &pBC_UOC_FIELDS[INNO_BC_IDPSINKEN]);
+			   &p_bc_uoc_fields[INNO_BC_IDPSINKEN]);
 	uoc_init_field(np, "rk_usb,dpattach",
-			   &pBC_UOC_FIELDS[INNO_BC_DPATTACH]);
+			   &p_bc_uoc_fields[INNO_BC_DPATTACH]);
 	uoc_init_field(np, "rk_usb,cpdet",
-			   &pBC_UOC_FIELDS[INNO_BC_CPDET]);
+			   &p_bc_uoc_fields[INNO_BC_CPDET]);
 	uoc_init_field(np, "rk_usb,dcpattach",
-			   &pBC_UOC_FIELDS[INNO_BC_DCPATTACH]);
+			   &p_bc_uoc_fields[INNO_BC_DCPATTACH]);
 }
 
 /****** BATTERY CHARGER DETECT FUNCTIONS ******/
 bool is_connected(void)
 {
-	if (!pGRF_BASE && !pGRF_REGMAP)
+	if (!p_grf_base && !p_grf_regmap)
 		return false;
 	if (BC_GET(BC_BVALID) && BC_GET(BC_IDDIG))
 		return true;
@@ -387,26 +398,26 @@ enum bc_port_type usb_battery_charger_detect(bool wait)
 		np = of_find_node_by_name(NULL, "usb_bc");
 	if (!np)
 		return -1;
-	if (!pGRF_BASE && !pGRF_REGMAP) {
-		pGRF_BASE = get_grf_base(np);
-		pGRF_REGMAP = get_grf_regmap(np);
+	if (!p_grf_base && !p_grf_regmap) {
+		p_grf_base = get_grf_base(np);
+		p_grf_regmap = get_grf_regmap(np);
 	}
 
 	mutex_lock(&bc_mutex);
 	if (of_device_is_compatible(np, "rockchip,ctrl")) {
-		if (!pBC_UOC_FIELDS)
+		if (!p_bc_uoc_fields)
 			uoc_init_rk(np);
 		ret = usb_battery_charger_detect_rk(wait);
 	}
 
 	else if (of_device_is_compatible(np, "synopsys,phy")) {
-		if (!pBC_UOC_FIELDS)
+		if (!p_bc_uoc_fields)
 			uoc_init_synop(np);
 		ret = usb_battery_charger_detect_synop(wait);
 	}
 
 	else if (of_device_is_compatible(np, "inno,phy")) {
-		if (!pBC_UOC_FIELDS)
+		if (!p_bc_uoc_fields)
 			uoc_init_inno(np);
 		ret = usb_battery_charger_detect_inno(wait);
 	}
-- 
2.35.3

