From 7d4c2c6551b8b2c0a6b355fb4ba843c37f33cb64 Mon Sep 17 00:00:00 2001
From: Allon Huang <allon.huang@rock-chips.com>
Date: Wed, 5 Jun 2019 19:56:20 +0800
Subject: [PATCH] media: rockchip: cif: support mipi channel and work mode
 switching

rk3288 cif can work with mipi channel and switch work mode

Change-Id: Ie8a49cf787617ff5d98ef84cdac761c3ece761c9
Signed-off-by: Allon Huang <allon.huang@rock-chips.com>
---
 drivers/media/platform/rockchip/cif/Kconfig   |  13 +
 drivers/media/platform/rockchip/cif/capture.c | 254 ++++++++++++------
 drivers/media/platform/rockchip/cif/dev.c     |  46 ++--
 drivers/media/platform/rockchip/cif/dev.h     |  12 +
 drivers/media/platform/rockchip/cif/regs.h    |  12 +-
 drivers/media/platform/rockchip/cif/version.h |  10 +-
 6 files changed, 244 insertions(+), 103 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/Kconfig b/drivers/media/platform/rockchip/cif/Kconfig
index 019cb33fde57..d00d847bb66e 100644
--- a/drivers/media/platform/rockchip/cif/Kconfig
+++ b/drivers/media/platform/rockchip/cif/Kconfig
@@ -10,3 +10,16 @@ config VIDEO_ROCKCHIP_CIF
 	default n
 	help
 	  Support for CIF on the rockchip SoCs like rk312x, rk3288.
+
+choice
+	prompt "rockchip camera sensor interface work mode"
+	depends on VIDEO_ROCKCHIP_CIF
+	default ROCKCHIP_CIF_WORKMODE_PINGPONG
+
+config ROCKCHIP_CIF_WORKMODE_PINGPONG
+	bool "interface works in pingpong mode"
+
+config ROCKCHIP_CIF_WORKMODE_ONEFRAME
+	bool "interface works in oneframe mode"
+
+endchoice
diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index 3335911b0b7b..4a85fc93043e 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -31,12 +31,6 @@
 #define STREAM_PAD_SINK				0
 #define STREAM_PAD_SOURCE			1
 
-#define CIF_FETCH_Y_LAST_LINE(VAL) ((VAL) & 0x1fff)
-/* Check if swap y and c in bt1120 mode */
-#define CIF_FETCH_IS_Y_FIRST(VAL) ((VAL) & 0xf)
-
-/* TODO: pingpong mode is not yet supported */
-
 /* Get xsubs and ysubs for fourcc formats
  *
  * @xsubs: horizontal color samples in a 4*4 matrix, for yuv
@@ -367,7 +361,7 @@ static struct v4l2_subdev *get_remote_sensor(struct rkcif_stream *stream)
 static struct rkcif_sensor_info *sd_to_sensor(struct rkcif_device *dev,
 					      struct v4l2_subdev *sd)
 {
-	int i;
+	u32 i;
 
 	for (i = 0; i < dev->num_sensors; ++i)
 		if (dev->sensors[i].sd == sd)
@@ -500,38 +494,81 @@ cif_output_fmt *find_output_fmt(struct rkcif_stream *stream, u32 pixelfmt)
 }
 
 /***************************** stream operations ******************************/
-static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream)
+static void rkcif_assign_new_buffer_oneframe(struct rkcif_stream *stream,
+					     enum rkcif_yuvaddr_state stat)
 {
 	struct rkcif_dummy_buffer *dummy_buf = &stream->dummy_buf;
 	struct rkcif_device *dev = stream->cifdev;
+	struct rkcif_buffer *buffer = NULL;
 	void __iomem *base = dev->base_addr;
+	u32 frm_addr_y, frm_addr_uv;
 
 	/* Set up an empty buffer for the next frame */
 	spin_lock(&stream->vbq_lock);
 	if (!list_empty(&stream->buf_head)) {
-		stream->curr_buf = list_first_entry(&stream->buf_head,
-					struct rkcif_buffer, queue);
-		list_del(&stream->curr_buf->queue);
+		if (stream->frame_phase == CIF_CSI_FRAME0_READY ||
+		    stat == RKCIF_YUV_ADDR_STATE_INIT) {
+			stream->curr_buf = list_first_entry(&stream->buf_head,
+						struct rkcif_buffer, queue);
+			list_del(&stream->curr_buf->queue);
+			buffer = stream->curr_buf;
+		}
+		if (stream->frame_phase == CIF_CSI_FRAME1_READY ||
+		    stat == RKCIF_YUV_ADDR_STATE_INIT) {
+			stream->next_buf = list_first_entry(&stream->buf_head,
+						struct rkcif_buffer, queue);
+			list_del(&stream->next_buf->queue);
+			buffer = stream->next_buf;
+		}
 	} else {
-		stream->curr_buf = NULL;
+		if (stream->frame_phase == CIF_CSI_FRAME0_READY)
+			stream->curr_buf = NULL;
+		if (stream->frame_phase == CIF_CSI_FRAME1_READY)
+			stream->next_buf = NULL;
+		buffer = NULL;
 	}
 	spin_unlock(&stream->vbq_lock);
 
-	if (stream->curr_buf) {
-		write_cif_reg(base, CIF_FRM0_ADDR_Y,
-			      stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
-		write_cif_reg(base, CIF_FRM0_ADDR_UV,
-			      stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
-		write_cif_reg(base, CIF_FRM1_ADDR_Y,
-			      stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
-		write_cif_reg(base, CIF_FRM1_ADDR_UV,
-			      stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
+	if (stat == RKCIF_YUV_ADDR_STATE_INIT) {
+		if (stream->curr_buf && stream->next_buf) {
+			write_cif_reg(base, CIF_FRM0_ADDR_Y,
+				      stream->curr_buf->buff_addr[RKCIF_PLANE_Y]);
+			write_cif_reg(base, CIF_FRM0_ADDR_UV,
+				      stream->curr_buf->buff_addr[RKCIF_PLANE_CBCR]);
+			write_cif_reg(base, CIF_FRM1_ADDR_Y,
+				      stream->next_buf->buff_addr[RKCIF_PLANE_Y]);
+			write_cif_reg(base, CIF_FRM1_ADDR_UV,
+				      stream->next_buf->buff_addr[RKCIF_PLANE_CBCR]);
+		} else {
+			v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev, "Drop to dummy buf\n");
+			write_cif_reg(base, CIF_FRM0_ADDR_Y, dummy_buf->dma_addr);
+			write_cif_reg(base, CIF_FRM0_ADDR_UV, dummy_buf->dma_addr);
+			write_cif_reg(base, CIF_FRM1_ADDR_Y, dummy_buf->dma_addr);
+			write_cif_reg(base, CIF_FRM1_ADDR_UV, dummy_buf->dma_addr);
+		}
+
 	} else {
-		v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev, "Buf dropped\n");
-		write_cif_reg(base, CIF_FRM0_ADDR_Y, dummy_buf->dma_addr);
-		write_cif_reg(base, CIF_FRM0_ADDR_UV, dummy_buf->dma_addr);
-		write_cif_reg(base, CIF_FRM1_ADDR_Y, dummy_buf->dma_addr);
-		write_cif_reg(base, CIF_FRM1_ADDR_UV, dummy_buf->dma_addr);
+		if (stream->frame_phase == CIF_CSI_FRAME0_READY) {
+			frm_addr_y = CIF_FRM0_ADDR_Y;
+			frm_addr_uv = CIF_FRM0_ADDR_UV;
+		}
+
+		if (stream->frame_phase == CIF_CSI_FRAME1_READY) {
+			frm_addr_y = CIF_FRM1_ADDR_Y;
+			frm_addr_uv = CIF_FRM1_ADDR_UV;
+		}
+
+		if (buffer) {
+			write_cif_reg(base, frm_addr_y,
+				      buffer->buff_addr[RKCIF_PLANE_Y]);
+			write_cif_reg(base, frm_addr_uv,
+				      buffer->buff_addr[RKCIF_PLANE_CBCR]);
+		} else {
+			write_cif_reg(base, frm_addr_y, dummy_buf->dma_addr);
+			write_cif_reg(base, frm_addr_uv, dummy_buf->dma_addr);
+			v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev,
+				 "frame Drop to dummy buf\n");
+		}
 	}
 }
 
@@ -668,8 +705,6 @@ static void rkcif_csi_get_vc_num(struct rkcif_device *dev,
 	dev->num_channels = vc_num ? vc_num : 1;
 	if (dev->num_channels == 1)
 		dev->channels[0].vc = 0;
-
-	return;
 }
 
 static int rkcif_csi_channel_init(struct rkcif_stream *stream,
@@ -783,7 +818,7 @@ static int rkcif_csi_channel_set(struct rkcif_stream *stream,
 static int rkcif_csi_stream_start(struct rkcif_stream *stream)
 {
 	struct rkcif_device *dev = stream->cifdev;
-	unsigned flags = dev->active_sensor->mbus.flags;
+	unsigned int flags = dev->active_sensor->mbus.flags;
 	struct csi_channel_info *channel;
 
 	stream->frame_idx = 0;
@@ -796,6 +831,7 @@ static int rkcif_csi_stream_start(struct rkcif_stream *stream)
 	rkcif_csi_channel_set(stream, channel);
 
 	stream->state = RKCIF_STATE_STREAMING;
+	dev->workmode = RKCIF_WORKMODE_PINGPONG;
 
 	return 0;
 }
@@ -1059,7 +1095,8 @@ static inline u32 rkcif_scl_ctl(struct rkcif_stream *stream)
 static int rkcif_stream_start(struct rkcif_stream *stream)
 {
 	u32 val, mbus_flags, href_pol, vsync_pol,
-	    xfer_mode = 0, yc_swap = 0, skip_top = 0;
+	    xfer_mode = 0, yc_swap = 0, skip_top = 0,
+	    inputmode = 0, mipimode = 0, workmode = 0;
 	struct rkcif_device *dev = stream->cifdev;
 	struct rkcif_sensor_info *sensor_info;
 	void __iomem *base = dev->base_addr;
@@ -1082,10 +1119,32 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 			yc_swap = BT1120_YC_SWAP;
 	}
 
-	val = vsync_pol | href_pol | rkcif_determine_input_mode(stream) |
-	      stream->cif_fmt_out->fmt_val | stream->cif_fmt_in->dvp_fmt_val |
-	      xfer_mode | yc_swap;
+	if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2) {
+		inputmode = INPUT_MODE_MIPI;
+
+		/* if cif is linked with mipi,
+		 * href pol must be set as high active,
+		 * vsyn pol must be set as low active.
+		 */
+		href_pol = HSY_HIGH_ACTIVE;
+		vsync_pol = VSY_LOW_ACTIVE;
+
+		if (stream->cif_fmt_in->fmt_type == CIF_FMT_TYPE_YUV)
+			mipimode = MIPI_MODE_YUV;
+		else if (stream->cif_fmt_in->fmt_type == CIF_FMT_TYPE_RAW)
+			mipimode = MIPI_MODE_RGB;
+		else
+			mipimode = MIPI_MODE_32BITS_BYPASS;
+	} else {
+		inputmode = rkcif_determine_input_mode(stream);
+	}
+
+	val = vsync_pol | href_pol | inputmode | mipimode
+	      | stream->cif_fmt_out->fmt_val
+	      | stream->cif_fmt_in->dvp_fmt_val
+	      | xfer_mode | yc_swap;
 	write_cif_reg(base, CIF_FOR, val);
+
 	val = stream->pixm.width;
 	if (stream->cif_fmt_in->fmt_type == CIF_FMT_TYPE_RAW)
 		val = stream->pixm.width * 2;
@@ -1106,16 +1165,26 @@ static int rkcif_stream_start(struct rkcif_stream *stream)
 		rkcif_assign_new_buffer_pingpong(stream, 1, 0);
 	else
 		/* Set up an buffer for the next frame */
-		rkcif_assign_new_buffer_oneframe(stream);
+		rkcif_assign_new_buffer_oneframe(stream,
+						 RKCIF_YUV_ADDR_STATE_INIT);
 
 	write_cif_reg(base, CIF_INTEN, FRAME_END_EN | PST_INF_FRAME_END);
+
+	if (dev->workmode == RKCIF_WORKMODE_ONEFRAME)
+		workmode = MODE_ONEFRAME;
+	else if (dev->workmode == RKCIF_WORKMODE_PINGPONG)
+		workmode = MODE_PINGPONG;
+	else
+		workmode = MODE_LINELOOP;
+
 	if (dev->chip_id == CHIP_RK1808_CIF &&
 	    rkcif_determine_input_mode(stream) == INPUT_MODE_BT1120) {
+		dev->workmode = RKCIF_WORKMODE_PINGPONG;
 		write_cif_reg(base, CIF_CTRL,
 			      AXI_BURST_16 | MODE_PINGPONG | ENABLE_CAPTURE);
 	} else {
 		write_cif_reg(base, CIF_CTRL,
-			      AXI_BURST_16 | MODE_ONEFRAME | ENABLE_CAPTURE);
+			      AXI_BURST_16 | workmode | ENABLE_CAPTURE);
 	}
 
 	stream->state = RKCIF_STATE_STREAMING;
@@ -1214,8 +1283,11 @@ static int rkcif_start_streaming(struct vb2_queue *queue, unsigned int count)
 		goto destroy_buf;
 	}
 
-	if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2) {
-		ret = rkcif_csi_stream_start(stream);
+	if (dev->chip_id == CHIP_RK1808_CIF) {
+		if (dev->active_sensor->mbus.type == V4L2_MBUS_CSI2)
+			ret = rkcif_csi_stream_start(stream);
+		else
+			ret = rkcif_stream_start(stream);
 	} else {
 		ret = rkcif_stream_start(stream);
 	}
@@ -1718,7 +1790,7 @@ static void rkcif_vb_done_oneframe(struct rkcif_stream *stream,
 	/* Dequeue a filled buffer */
 	for (i = 0; i < fmt->mplanes; i++) {
 		vb2_set_plane_payload(&vb_done->vb2_buf, i,
-			stream->pixm.plane_fmt[i].sizeimage);
+				      stream->pixm.plane_fmt[i].sizeimage);
 	}
 	vb_done->vb2_buf.timestamp = ktime_get_ns();
 	vb2_buffer_done(&vb_done->vb2_buf, VB2_BUF_STATE_DONE);
@@ -1727,8 +1799,8 @@ static void rkcif_vb_done_oneframe(struct rkcif_stream *stream,
 void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 {
 	/* TODO: xuhf-debug: add stream type */
-	struct rkcif_stream *stream = &cif_dev->stream[0];
-	u32 lastline, lastpix, ctl, cif_frmst, intstat;
+	struct rkcif_stream *stream;
+	u32 lastline, lastpix, ctl, cif_frmst, intstat, frmid;
 	void __iomem *base = cif_dev->base_addr;
 
 	intstat = read_cif_reg(base, CIF_INTSTAT);
@@ -1736,11 +1808,16 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 	lastline = read_cif_reg(base, CIF_LAST_LINE);
 	lastpix = read_cif_reg(base, CIF_LAST_PIX);
 	ctl = read_cif_reg(base, CIF_CTRL);
+	frmid = CIF_GET_FRAME_ID(cif_frmst);
 
 	/* There are two irqs enabled:
 	 *  - PST_INF_FRAME_END: cif FIFO is ready, this is prior to FRAME_END
 	 *  -         FRAME_END: cif has saved frame to memory, a frame ready
 	 */
+	if (cif_dev->chip_id == CHIP_RK1808_CIF)
+		stream = &cif_dev->stream[RKCIF_STREAM_DVP];
+	else
+		stream = &cif_dev->stream[RKCIF_STREAM_CIF];
 
 	if ((intstat & PST_INF_FRAME_END)) {
 		write_cif_reg(base, CIF_INTSTAT, PST_INF_FRAME_END_CLR);
@@ -1754,7 +1831,6 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 		struct vb2_v4l2_buffer *vb_done = NULL;
 
 		write_cif_reg(base, CIF_INTSTAT, FRAME_END_CLR);
-
 		if (stream->stopping) {
 			rkcif_stream_stop(stream);
 			stream->stopping = false;
@@ -1764,22 +1840,40 @@ void rkcif_irq_oneframe(struct rkcif_device *cif_dev)
 
 		if (lastline != stream->pixm.height ||
 		    !(cif_frmst & CIF_F0_READY)) {
+			/* Clearing status must be complete before fe packet
+			 * arrives while cif is connected with mipi,
+			 * so it should be placed before printing log here,
+			 * otherwise it would be delayed.
+			 * At the same time, don't clear the frame id
+			 * for switching address.
+			 */
+			write_cif_reg(base, CIF_FRAME_STATUS, FRM0_STAT_CLS);
 			v4l2_err(&cif_dev->v4l2_dev,
 				 "Bad frame, irq:0x%x frmst:0x%x size:%dx%d\n",
 				 intstat, cif_frmst, lastline, lastpix);
-			/* Clear status to receive into the same buffer */
-			write_cif_reg(base, CIF_FRAME_STATUS, FRM0_STAT_CLS);
+
 			return;
 		}
 
-		if (stream->curr_buf)
-			vb_done = &stream->curr_buf->vb;
-		rkcif_assign_new_buffer_oneframe(stream);
+		if (frmid % 2 != 0) {
+			stream->frame_phase = CIF_CSI_FRAME0_READY;
+			if (stream->curr_buf)
+				vb_done = &stream->curr_buf->vb;
+		} else {
+			stream->frame_phase = CIF_CSI_FRAME1_READY;
+			if (stream->next_buf)
+				vb_done = &stream->next_buf->vb;
+		}
+
+		rkcif_assign_new_buffer_oneframe(stream,
+						 RKCIF_YUV_ADDR_STATE_UPDATE);
 
-		/* In one-frame mode, must clear status manually to enable
-		 * the next frame end irq
+		/* In one-frame mode:
+		 * 1,must clear status manually by writing 0 to enable
+		 * the next frame end irq;
+		 * 2,do not clear the frame id for switching address.
 		 */
-		write_cif_reg(base, CIF_FRAME_STATUS, FRM0_STAT_CLS);
+		write_cif_reg(base, CIF_FRAME_STATUS, cif_frmst & FRM0_STAT_CLS);
 
 		if (vb_done)
 			rkcif_vb_done_oneframe(stream, vb_done);
@@ -1829,7 +1923,8 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 	void __iomem *base = cif_dev->base_addr;
 	unsigned int intstat, i;
 
-	if (cif_dev->active_sensor->mbus.type == V4L2_MBUS_CSI2) {
+	if (cif_dev->active_sensor->mbus.type == V4L2_MBUS_CSI2 &&
+	    cif_dev->chip_id == CHIP_RK1808_CIF) {
 		int mipi_id;
 		struct vb2_v4l2_buffer *vb_done = NULL;
 		u32 lastline = 0;
@@ -1855,8 +1950,8 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 		mipi_id = rkcif_csi_g_mipi_id(&cif_dev->v4l2_dev, intstat);
 		if (mipi_id < 0) {
 			v4l2_err(&cif_dev->v4l2_dev,
-					"ERROR: irq[%d] is invalid: 0x%x, lastline: %d, return!!!\n",
-					i, intstat, lastline & 0x3fff);
+				 "ERROR: irq[%d] is invalid: 0x%x, lastline: %d, return!!!\n",
+				 i, intstat, lastline & 0x3fff);
 			return;
 		}
 
@@ -1879,26 +1974,26 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 				continue;
 
 			switch (mipi_id) {
-				case RKCIF_STREAM_MIPI_ID0:
-					stream->frame_phase =
-						 SW_FRM_END_ID0(intstat);
-					intstat &= ~CSI_FRAME_END_ID0;
-					break;
-				case RKCIF_STREAM_MIPI_ID1:
-					stream->frame_phase =
-						 SW_FRM_END_ID1(intstat);
-					intstat &= ~CSI_FRAME_END_ID1;
-					break;
-				case RKCIF_STREAM_MIPI_ID2:
-					stream->frame_phase =
-						 SW_FRM_END_ID2(intstat);
-					intstat &= ~CSI_FRAME_END_ID2;
-					break;
-				case RKCIF_STREAM_MIPI_ID3:
-					stream->frame_phase =
-						 SW_FRM_END_ID3(intstat);
-					intstat &= ~CSI_FRAME_END_ID3;
-					break;
+			case RKCIF_STREAM_MIPI_ID0:
+				stream->frame_phase =
+							SW_FRM_END_ID0(intstat);
+				intstat &= ~CSI_FRAME_END_ID0;
+				break;
+			case RKCIF_STREAM_MIPI_ID1:
+				stream->frame_phase =
+							SW_FRM_END_ID1(intstat);
+				intstat &= ~CSI_FRAME_END_ID1;
+				break;
+			case RKCIF_STREAM_MIPI_ID2:
+				stream->frame_phase =
+							SW_FRM_END_ID2(intstat);
+				intstat &= ~CSI_FRAME_END_ID2;
+				break;
+			case RKCIF_STREAM_MIPI_ID3:
+				stream->frame_phase =
+							SW_FRM_END_ID3(intstat);
+				intstat &= ~CSI_FRAME_END_ID3;
+				break;
 			}
 
 			if (stream->frame_phase & CIF_CSI_FRAME1_READY) {
@@ -1919,6 +2014,7 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 	} else {
 		u32 lastline, lastpix, ctl, cif_frmst;
 		void __iomem *base = cif_dev->base_addr;
+		struct rkcif_stream *stream;
 
 		intstat = read_cif_reg(base, CIF_INTSTAT);
 		cif_frmst = read_cif_reg(base, CIF_FRAME_STATUS);
@@ -1926,6 +2022,11 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 		lastpix = read_cif_reg(base, CIF_LAST_PIX);
 		ctl = read_cif_reg(base, CIF_CTRL);
 
+		if (cif_dev->chip_id == CHIP_RK1808_CIF)
+			stream = &cif_dev->stream[RKCIF_STREAM_DVP];
+		else
+			stream = &cif_dev->stream[RKCIF_STREAM_CIF];
+
 		/* There are two irqs enabled:
 		 *  - PST_INF_FRAME_END: cif FIFO is ready,
 		 *    this is prior to FRAME_END
@@ -1958,7 +2059,7 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 			    (!(cif_frmst & CIF_F0_READY) &&
 			     !(cif_frmst & CIF_F1_READY))) {
 				v4l2_err(&cif_dev->v4l2_dev,
-					 "Bad frame, irq:0x%x frmst:0x%x size:%dx%d\n",
+					 "Bad frame, pp irq:0x%x frmst:0x%x size:%dx%d\n",
 					 intstat, cif_frmst, lastline, lastpix);
 				return;
 			}
@@ -1966,14 +2067,15 @@ void rkcif_irq_pingpong(struct rkcif_device *cif_dev)
 			if (cif_frmst & CIF_F0_READY) {
 				if (stream->curr_buf)
 					vb_done = &stream->curr_buf->vb;
-				stream->frame_phase = 0;
+				stream->frame_phase = CIF_CSI_FRAME0_READY;
 			} else if (cif_frmst & CIF_F1_READY) {
 				if (stream->next_buf)
 					vb_done = &stream->next_buf->vb;
-				stream->frame_phase = 1;
+				stream->frame_phase = CIF_CSI_FRAME1_READY;
 			}
 
-			rkcif_assign_new_buffer_pingpong(stream, 0, 0);
+			rkcif_assign_new_buffer_oneframe(stream,
+							 RKCIF_YUV_ADDR_STATE_UPDATE);
 
 			if (vb_done)
 				rkcif_vb_done_oneframe(stream, vb_done);
diff --git a/drivers/media/platform/rockchip/cif/dev.c b/drivers/media/platform/rockchip/cif/dev.c
index a10856c3c6cf..f8c64c3e33ab 100644
--- a/drivers/media/platform/rockchip/cif/dev.c
+++ b/drivers/media/platform/rockchip/cif/dev.c
@@ -45,8 +45,6 @@ static char rkcif_version[RKCIF_VERNO_LEN];
 module_param_string(version, rkcif_version, RKCIF_VERNO_LEN, 0444);
 MODULE_PARM_DESC(version, "version number");
 
-int using_pingpong;
-
 static DEFINE_MUTEX(rkcif_dev_mutex);
 static LIST_HEAD(rkcif_device_list);
 
@@ -184,7 +182,7 @@ static int rkcif_pipeline_set_stream(struct rkcif_pipeline *p, bool on)
 		rockchip_set_system_status(SYS_STATUS_CIF0);
 
 	/* phy -> sensor */
-	for (i = p->num_subdevs; i > -1; --i) {
+	for (i = p->num_subdevs - 1; i > -1; --i) {
 		ret = v4l2_subdev_call(p->subdevs[i], video, s_stream, on);
 		if (on && ret < 0 && ret != -ENOIOCTLCMD && ret != -ENODEV)
 			goto err_stream_off;
@@ -229,13 +227,13 @@ static int rkcif_create_links(struct rkcif_device *dev)
 				}
 
 				for (id = 0; id < stream_num; id++) {
-					ret = media_entity_create_link(
-							&sensor->sd->entity,
-							pad,
-							&dev->stream[id].vnode.vdev.entity,
-							0,
-							(dev->chip_id != CHIP_RK1808_CIF) | (id == pad - 1) ?
-							MEDIA_LNK_FL_ENABLED : 0);
+					ret = media_entity_create_link(&sensor->sd->entity,
+								       pad,
+								       &dev->stream[id].vnode.vdev.entity,
+								       0,
+								       (dev->chip_id != CHIP_RK1808_CIF) |
+								       (id == pad - 1) ?
+								       MEDIA_LNK_FL_ENABLED : 0);
 					if (ret) {
 						dev_err(dev->dev,
 							"failed to create link for %s\n",
@@ -311,8 +309,8 @@ static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
 }
 
 static int rkcif_fwnode_parse(struct device *dev,
-			       struct v4l2_fwnode_endpoint *vep,
-			       struct v4l2_async_subdev *asd)
+			      struct v4l2_fwnode_endpoint *vep,
+			      struct v4l2_async_subdev *asd)
 {
 	struct rkcif_async_subdev *rk_asd =
 			container_of(asd, struct rkcif_async_subdev, asd);
@@ -347,7 +345,7 @@ static int cif_subdev_notifier(struct rkcif_device *cif_dev)
 	int ret;
 
 	ret = v4l2_async_notifier_parse_fwnode_endpoints(dev, ntf,
-			sizeof(struct rkcif_async_subdev), rkcif_fwnode_parse);
+							 sizeof(struct rkcif_async_subdev), rkcif_fwnode_parse);
 
 	if (ret < 0)
 		return ret;
@@ -441,7 +439,6 @@ static const char * const rk3288_cif_clks[] = {
 	"aclk_cif0",
 	"hclk_cif0",
 	"cif0_in",
-	"cif0_out",
 };
 
 static const char * const rk3288_cif_rsts[] = {
@@ -505,7 +502,7 @@ static irqreturn_t rkcif_irq_handler(int irq, void *ctx)
 	struct device *dev = ctx;
 	struct rkcif_device *cif_dev = dev_get_drvdata(dev);
 
-	if (using_pingpong)
+	if (cif_dev->workmode == RKCIF_WORKMODE_PINGPONG)
 		rkcif_irq_pingpong(cif_dev);
 	else
 		rkcif_irq_oneframe(cif_dev);
@@ -623,15 +620,13 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	data = match->data;
 	cif_dev->chip_id = data->chip_id;
 	if (data->chip_id == CHIP_RK1808_CIF) {
-		using_pingpong = 1;
-
-		res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "cif_regs");
+		res = platform_get_resource_byname(pdev,
+						   IORESOURCE_MEM,
+						   "cif_regs");
 		cif_dev->base_addr = devm_ioremap_resource(dev, res);
 		if (IS_ERR(cif_dev->base_addr))
 			return PTR_ERR(cif_dev->base_addr);
 	} else {
-		using_pingpong = 0;
-
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 		cif_dev->base_addr = devm_ioremap_resource(dev, res);
 		if (IS_ERR(cif_dev->base_addr))
@@ -639,7 +634,7 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	}
 
 	if (data->clks_num > RKCIF_MAX_BUS_CLK ||
-		data->rsts_num > RKCIF_MAX_RESET) {
+	    data->rsts_num > RKCIF_MAX_RESET) {
 		dev_err(dev, "out of range: clks(%d %d) rsts(%d %d)\n",
 			data->clks_num, RKCIF_MAX_BUS_CLK,
 			data->rsts_num, RKCIF_MAX_RESET);
@@ -647,6 +642,7 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 	}
 	for (i = 0; i < data->clks_num; i++) {
 		struct clk *clk = devm_clk_get(dev, data->clks[i]);
+
 		if (IS_ERR(clk)) {
 			dev_err(dev, "failed to get %s\n", data->clks[i]);
 			return PTR_ERR(clk);
@@ -683,6 +679,14 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 		rkcif_stream_init(cif_dev, RKCIF_STREAM_CIF);
 	}
 
+#if defined(CONFIG_ROCKCHIP_CIF_WORKMODE_PINGPONG)
+	cif_dev->workmode = RKCIF_WORKMODE_PINGPONG;
+#elif defined(CONFIG_ROCKCHIP_CIF_WORKMODE_ONEFRAME)
+	cif_dev->workmode = RKCIF_WORKMODE_ONEFRAME;
+#else
+	cif_dev->workmode = RKCIF_WORKMODE_PINGPONG;
+#endif
+
 	strlcpy(cif_dev->media_dev.model, "rkcif",
 		sizeof(cif_dev->media_dev.model));
 	cif_dev->media_dev.dev = &pdev->dev;
diff --git a/drivers/media/platform/rockchip/cif/dev.h b/drivers/media/platform/rockchip/cif/dev.h
index eb0c903be7a8..aa849b241eba 100644
--- a/drivers/media/platform/rockchip/cif/dev.h
+++ b/drivers/media/platform/rockchip/cif/dev.h
@@ -55,6 +55,17 @@
 #define write_cif_reg_and(base, addr, val) \
 	writel(readl((addr) + (base)) & (val), (addr) + (base))
 
+enum rkcif_workmode {
+	RKCIF_WORKMODE_ONEFRAME = 0x00,
+	RKCIF_WORKMODE_PINGPONG = 0x01,
+	RKCIF_WORKMODE_LINELOOP = 0x02
+};
+
+enum rkcif_yuvaddr_state {
+	RKCIF_YUV_ADDR_STATE_UPDATE = 0x0,
+	RKCIF_YUV_ADDR_STATE_INIT = 0x1
+};
+
 enum rkcif_state {
 	RKCIF_STATE_DISABLED,
 	RKCIF_STATE_READY,
@@ -293,6 +304,7 @@ struct rkcif_device {
 	atomic_t			stream_cnt;
 	atomic_t			fh_cnt;
 	struct mutex                    stream_lock; /* lock between streams */
+	enum rkcif_workmode		workmode;
 };
 
 void rkcif_unregister_stream_vdevs(struct rkcif_device *dev,
diff --git a/drivers/media/platform/rockchip/cif/regs.h b/drivers/media/platform/rockchip/cif/regs.h
index 3ff91189fc83..dc4ed448ea7a 100644
--- a/drivers/media/platform/rockchip/cif/regs.h
+++ b/drivers/media/platform/rockchip/cif/regs.h
@@ -36,6 +36,9 @@
 #define CIF_CUR_DST			0x64
 #define CIF_LAST_LINE			0x68
 #define CIF_LAST_PIX			0x6c
+#define CIF_FETCH_Y_LAST_LINE(val)	((val) & 0x1fff)
+/* Check if swap y and c in bt1120 mode */
+#define CIF_FETCH_IS_Y_FIRST(val)	((val) & 0xf)
 
 /* RK1808 CIF CSI Registers Offset */
 #define CIF_CSI_ID0_CTRL0		0x80
@@ -117,7 +120,11 @@
 
 /* FRAME STATUS */
 #define FRAME_STAT_CLS			0x00
-#define FRM0_STAT_CLS			0x20	/* write 0 to clear frame 0 */
+/* write 0 to clear frame 0 */
+#define FRM0_STAT_CLS			0xfffffffe
+#define FRAME_NUM_SHIFT			(16U)
+#define FRAME_NUM_MASK			(0xffff << FRAME_NUM_SHIFT)
+#define CIF_GET_FRAME_ID(val)		(((val) & FRAME_NUM_MASK) >> FRAME_NUM_SHIFT)
 
 /* CIF FORMAT */
 #define VSY_HIGH_ACTIVE			(0x01 << 0)
@@ -144,6 +151,9 @@
 #define RAW_DATA_WIDTH_8		(0x00 << 11)
 #define RAW_DATA_WIDTH_10		(0x01 << 11)
 #define RAW_DATA_WIDTH_12		(0x02 << 11)
+#define MIPI_MODE_32BITS_BYPASS		(0x00 << 13)
+#define MIPI_MODE_RGB			(0x01 << 13)
+#define MIPI_MODE_YUV			(0x02 << 13)
 #define YUV_OUTPUT_422			(0x00 << 16)
 #define YUV_OUTPUT_420			(0x01 << 16)
 #define OUTPUT_420_ORDER_EVEN		(0x00 << 17)
diff --git a/drivers/media/platform/rockchip/cif/version.h b/drivers/media/platform/rockchip/cif/version.h
index c754b60ea769..6459cc6ed322 100644
--- a/drivers/media/platform/rockchip/cif/version.h
+++ b/drivers/media/platform/rockchip/cif/version.h
@@ -11,12 +11,12 @@
  *v0.1.0:
  *1. First version;
  *v0.1.1
- *support the mipi vc multi-channel input in cif driver for rk1808
+ *1. Support the mipi vc multi-channel input in cif driver for rk1808
  *v0.1.2
- *Compatible with cif only have single dma mode in driver
- *v0.1.2
- *support output yuyv fmt by setting the input mode to raw8
- *
+ *1. support output yuyv fmt by setting the input mode to raw8
+ *2. Compatible with cif only have single dma mode in driver
+ *3. Support cif works with mipi channel for rk3288
+ *4. Support switching between oneframe and pingpong for cif
  */
 
 #define RKCIF_DRIVER_VERSION KERNEL_VERSION(0, 1, 0x2)
-- 
2.35.3

