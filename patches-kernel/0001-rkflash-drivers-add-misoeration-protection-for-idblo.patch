From 6121b53e97e9b168f74df532523f99fadd28e6d8 Mon Sep 17 00:00:00 2001
From: Dingqiang Lin <jon.lin@rock-chips.com>
Date: Mon, 29 Oct 2018 12:07:01 +0800
Subject: [PATCH] rkflash: drivers: add misoeration protection for idblock
 upgrading

1.when upgrading not start at NAND_IDB_START, do nothing

Change-Id: Ifb6b250c8c3d99ddb1526130120a37e9dd9e7b2b
Signed-off-by: Dingqiang Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl_arm_v7.S       | 484 ++++++++++++-----------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S | 526 +++++++++++++------------
 drivers/rkflash/rk_sftl_arm_v8.S       | 453 ++++++++++-----------
 3 files changed, 752 insertions(+), 711 deletions(-)

diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index 5dd1ca461724..7b2b06134d48 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-10-11
+ * date: 2018-10-29
  */
 	.file	"rk_sftl.c"
 	.global	__udivsi3
@@ -12416,29 +12416,29 @@ sftl_write:
 	movhi	r3, #0
 	movls	r3, #1
 	cmp	r0, #576
-	orrhi	r3, r3, #1
+	orrcs	r3, r3, #1
 	str	r1, [fp, #-120]
 	cmp	r3, #0
 	str	r2, [fp, #-140]
-	ldr	r4, .L1808
+	ldr	r4, .L1810
 	beq	.L1773
 	ldr	r3, [r4, #3668]
 	cmp	r3, #0
-	beq	.L1774
+	beq	.L1775
 	ldr	r10, [r4, #3672]
-	ldr	r3, .L1808+4
+	ldr	r3, .L1810+4
 	ldr	r2, [r10]
 	cmp	r2, r3
-	beq	.L1775
-.L1792:
-	ldr	r4, .L1808
+	beq	.L1776
+.L1793:
+	ldr	r4, .L1810
 	mov	r3, #0
 	ldr	r0, [r4, #3672]
 	str	r3, [r4, #3668]
 	bl	kfree
 	ldr	r0, [r4, #3676]
 	bl	kfree
-.L1774:
+.L1775:
 	ldr	r3, [fp, #-140]
 	mov	r1, r9
 	ldr	r2, [fp, #-120]
@@ -12446,16 +12446,16 @@ sftl_write:
 	bl	FtlWrite
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1775:
+.L1776:
 	ldrh	r5, [r4, #14]
 	add	r0, r10, #262144
 	ldrh	r4, [r4, #10]
 	mov	r3, #0
 	movw	r2, #65535
-.L1779:
+.L1780:
 	ldr	r1, [r0, #-4]
 	cmp	r1, #0
-	bne	.L1776
+	bne	.L1777
 	ldr	r1, [r10, r3, lsl #2]
 	add	r3, r3, #1
 	cmp	r3, #4096
@@ -12463,20 +12463,20 @@ sftl_write:
 	movhi	r3, #0
 	cmp	r2, #4096
 	str	r1, [r0, #-4]!
-	bne	.L1779
+	bne	.L1780
 	mov	r3, #512
 	str	r3, [fp, #-108]
-	b	.L1778
-.L1776:
+	b	.L1779
+.L1777:
 	add	r3, r2, #127
-	ldr	r0, .L1808+8
+	ldr	r0, .L1810+8
 	lsr	r3, r3, #7
 	str	r3, [fp, #-108]
 	bl	sftl_printk
-.L1778:
+.L1779:
 	uxtb	r5, r5
 	smulbb	r5, r5, r4
-	ldr	r4, .L1808
+	ldr	r4, .L1810
 	uxth	r3, r5
 	mov	r5, #0
 	str	r3, [fp, #-112]
@@ -12494,10 +12494,10 @@ sftl_write:
 	ldr	r3, [fp, #-108]
 	lsl	r3, r3, #7
 	str	r3, [fp, #-152]
-	b	.L1791
-.L1799:
+	b	.L1792
+.L1801:
 	str	r3, [fp, #-136]
-.L1791:
+.L1792:
 	mov	r1, #512
 	ldr	r0, [r4, #3676]
 	bl	__memzero
@@ -12518,7 +12518,7 @@ sftl_write:
 	blx	r3
 	ldr	r3, [fp, #-124]
 	cmp	r3, r6
-	bls	.L1780
+	bls	.L1781
 	mov	r1, r8
 	add	r0, r6, r5
 	bl	__udivsi3
@@ -12526,7 +12526,7 @@ sftl_write:
 	mov	r1, r0
 	mov	r0, #0
 	blx	r3
-.L1780:
+.L1781:
 	mov	r1, r6
 	mov	r0, r5
 	bl	__umodsi3
@@ -12534,10 +12534,10 @@ sftl_write:
 	mov	r8, r0
 	sub	r3, r5, r0
 	str	r3, [fp, #-144]
-.L1781:
+.L1782:
 	ldr	r3, [fp, #-124]
 	cmp	r3, r6
-	bhi	.L1782
+	bhi	.L1783
 	ldrb	r7, [r4, #14]	@ zero_extendqisi2
 	mov	r0, r5
 	ldr	r3, [r4, #3676]
@@ -12557,10 +12557,10 @@ sftl_write:
 	str	r3, [fp, #-156]
 	bl	__modsi3
 	uxth	r3, r0
-.L1783:
+.L1784:
 	ldr	r2, [fp, #-108]
 	cmp	r6, r2
-	bcs	.L1787
+	bcs	.L1788
 	ldr	r2, [fp, #-144]
 	mov	r1, r7
 	str	r3, [fp, #-164]
@@ -12586,25 +12586,25 @@ sftl_write:
 	mov	r0, #0
 	blx	ip
 	cmn	r0, #1
-	bne	.L1784
-.L1787:
+	bne	.L1785
+.L1788:
 	ldr	r0, [r4, #3676]
 	mov	r3, r10
 	mov	r6, #0
-.L1785:
+.L1786:
 	mov	r8, r3
 	ldr	r1, [r0, r6, lsl #2]
 	ldr	r2, [r8]
 	lsl	r7, r6, #2
 	add	r3, r3, #4
 	cmp	r1, r2
-	beq	.L1788
+	beq	.L1789
 	mov	r1, #512
 	bl	__memzero
 	ldr	r2, [r4, #3676]
 	mov	r1, r5
 	str	r6, [sp]
-	ldr	r0, .L1808+12
+	ldr	r0, .L1810+12
 	ldr	r3, [r8]
 	ldr	r2, [r2, r7]
 	bl	sftl_printk
@@ -12614,13 +12614,13 @@ sftl_write:
 	blx	r3
 	ldr	r3, [fp, #-116]
 	cmp	r3, #1
-	bls	.L1798
+	bls	.L1800
 	ldr	r2, [fp, #-112]
 	mov	r0, #0
 	ldr	r3, [r4, #3248]
 	add	r1, r2, r5
 	blx	r3
-.L1798:
+.L1800:
 	ldr	r2, [fp, #-136]
 	ldr	r3, [fp, #-116]
 	add	r3, r3, r2
@@ -12628,9 +12628,9 @@ sftl_write:
 	add	r5, r5, r2
 	ldr	r2, [fp, #-136]
 	cmp	r2, #15
-	bls	.L1799
-	b	.L1792
-.L1782:
+	bls	.L1801
+	b	.L1793
+.L1783:
 	mov	r1, r7
 	add	r0, r8, r6
 	bl	__udivsi3
@@ -12655,26 +12655,26 @@ sftl_write:
 	ldr	r3, [fp, #-132]
 	add	r6, r3, r6
 	uxth	r6, r6
-	b	.L1781
-.L1784:
+	b	.L1782
+.L1785:
 	add	r6, r8, r6
 	mov	r3, #0
 	uxth	r6, r6
-	b	.L1783
-.L1788:
+	b	.L1784
+.L1789:
 	ldr	r2, [fp, #-152]
 	add	r6, r6, #1
 	cmp	r6, r2
-	bne	.L1785
+	bne	.L1786
 	ldr	r3, [fp, #-128]
 	add	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [fp, #-128]
-	bls	.L1798
-	b	.L1792
+	bls	.L1800
+	b	.L1793
 .L1773:
 	cmp	r0, #64
-	bne	.L1793
+	bne	.L1794
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r4, #3672]
@@ -12684,45 +12684,57 @@ sftl_write:
 	str	r0, [r4, #3676]
 	cmp	r0, #0
 	cmpne	r3, #0
-	beq	.L1794
+	beq	.L1795
 	mov	r2, #1
 	mov	r1, #262144
 	mov	r0, r3
 	str	r2, [r4, #3668]
 	bl	__memzero
-.L1793:
+.L1794:
+	ldr	r3, [r4, #3668]
+	cmp	r3, #0
+	beq	.L1775
 	cmp	r9, #63
-	ldr	r0, [r4, #3672]
+	ldr	r1, [r4, #3672]
 	ldrls	r3, [fp, #-120]
-	rsbls	r1, r9, #64
-	ldrhi	r3, .L1808+16
-	ldrhi	r2, [fp, #-120]
-	subls	r2, r3, r1
+	rsbls	r8, r9, #64
+	ldrhi	r4, .L1810+16
+	mov	r2, #262144
+	ldrhi	r7, [fp, #-120]
+	movls	r4, r1
+	subls	r7, r3, r8
 	ldrls	r3, [fp, #-140]
-	addhi	r3, r9, r3
-	ldrhi	r1, [fp, #-140]
-	addhi	r0, r0, r3, lsl #9
-	addls	r1, r3, r1, lsl #9
+	addhi	r4, r9, r4
+	ldrhi	r8, [fp, #-140]
+	addhi	r4, r1, r4, lsl #9
+	ldr	r0, .L1810+20
+	addls	r8, r3, r8, lsl #9
 	cmp	r6, #576
-	subhi	r2, r2, r5
-	subhi	r2, r2, #444
-	subhi	r2, r2, #3
-	lsl	r2, r2, #9
+	subcs	r7, r7, r5
+	subcs	r7, r7, #444
+	mov	r3, r4
+	subcs	r7, r7, #2
+	str	r7, [sp]
+	bl	sftl_printk
+	lsl	r2, r7, #9
+	mov	r1, r8
+	mov	r0, r4
 	bl	ftl_memcpy
-	b	.L1774
-.L1794:
-	ldr	r1, .L1808+20
-	ldr	r0, .L1808+24
+	b	.L1775
+.L1795:
+	ldr	r1, .L1810+24
+	ldr	r0, .L1810+28
 	bl	sftl_printk
-	b	.L1793
-.L1809:
+	b	.L1794
+.L1811:
 	.align	2
-.L1808:
+.L1810:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	.LC115
 	.word	.LC116
 	.word	8388544
+	.word	.LC118
 	.word	.LANCHOR1+615
 	.word	.LC117
 	.size	sftl_write, .-sftl_write
@@ -12759,47 +12771,47 @@ FtlMakeBbt:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r7, #0
-	ldr	r8, .L1830
+	ldr	r8, .L1832
 	bl	FtlBbtMemInit
 	bl	FtlLoadFactoryBbt
 	sub	r5, r8, #180
 	sub	r9, r8, #18
 	mov	r4, r5
-.L1812:
+.L1814:
 	ldrh	r3, [r5, #54]
 	cmp	r7, r3
-	bcc	.L1818
+	bcc	.L1820
 	mov	r0, #0
-.L1819:
+.L1821:
 	ldrh	r2, [r4, #114]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1820
+	bhi	.L1822
 	ldrh	r5, [r4, #164]
 	movw	r6, #65535
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1821:
+.L1823:
 	ldrh	r3, [r4, #164]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1825
+	ble	.L1827
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1822
+	beq	.L1824
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1823
+	beq	.L1825
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1822:
+.L1824:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L1821
-.L1818:
+	b	.L1823
+.L1820:
 	ldrh	r3, [r9, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3292]
@@ -12807,11 +12819,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3452]
 	str	r10, [r5, #3456]
-	beq	.L1813
+	beq	.L1815
 	ldrh	ip, [r5, #98]
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1830+4
+	ldr	r0, .L1832+4
 	mla	ip, r7, ip, r3
 	lsl	r3, ip, #10
 	str	ip, [fp, #-44]
@@ -12824,29 +12836,29 @@ FtlMakeBbt:
 	asr	r2, r2, #3
 	bl	ftl_memcpy
 	ldr	ip, [fp, #-44]
-.L1814:
+.L1816:
 	uxth	r0, ip
 	add	r7, r7, #1
 	add	r8, r8, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1812
-.L1813:
+	b	.L1814
+.L1815:
 	mov	r1, r7
 	bl	FlashGetBadBlockList
 	ldr	r1, [r8]
 	ldr	r0, [r5, #3452]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #98]
-.L1816:
+.L1818:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1815:
+.L1817:
 	ldrh	r0, [r4, #98]
 	smlabb	r0, r0, r7, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1816
+	beq	.L1818
 	mov	r1, #16
 	ldr	r0, [r4, #3324]
 	strh	r6, [r9]	@ movhi
@@ -12854,7 +12866,7 @@ FtlMakeBbt:
 	mov	r1, #4096
 	ldr	r0, [r4, #3292]
 	bl	__memzero
-	ldr	r3, .L1830+8
+	ldr	r3, .L1832+8
 	strh	r3, [r10]	@ movhi
 	mov	r3, #0
 	str	r3, [r10, #4]
@@ -12868,39 +12880,39 @@ FtlMakeBbt:
 	lsl	r3, ip, #10
 	str	ip, [fp, #-44]
 	str	r3, [r4, #3448]
-	ldr	r3, .L1830+12
+	ldr	r3, .L1832+12
 	ldrh	r2, [r3]
 	lsl	r2, r2, #2
 	bl	ftl_memcpy
 	mov	r2, #1
-	ldr	r0, .L1830+4
+	ldr	r0, .L1832+4
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	mov	r3, #1
-	ldr	r0, .L1830+4
+	ldr	r0, .L1832+4
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3444]
 	ldr	ip, [fp, #-44]
 	cmn	r3, #1
-	bne	.L1814
+	bne	.L1816
 	uxth	r0, ip
 	bl	FtlBbmMapBadBlock
-	b	.L1815
-.L1820:
+	b	.L1817
+.L1822:
 	uxth	r0, r0
 	bl	FtlBbmMapBadBlock
 	mov	r0, r5
-	b	.L1819
-.L1823:
+	b	.L1821
+.L1825:
 	ldrh	r3, [r4, #152]
 	cmp	r3, r6
 	strheq	r5, [r4, #152]	@ movhi
-	beq	.L1822
-.L1824:
+	beq	.L1824
+.L1826:
 	strh	r5, [r4, #156]	@ movhi
-.L1825:
+.L1827:
 	ldrh	r3, [r4, #152]
 	mov	r5, #0
 	ldr	r0, [r4, #3260]
@@ -12930,9 +12942,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1831:
+.L1833:
 	.align	2
-.L1830:
+.L1832:
 	.word	.LANCHOR0+180
 	.word	.LANCHOR0+3444
 	.word	-3872
@@ -12950,7 +12962,7 @@ ftl_low_format:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1856
+	ldr	r4, .L1858
 	mov	r3, #0
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
@@ -12958,36 +12970,36 @@ ftl_low_format:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L1833
+	beq	.L1835
 	bl	FtlMakeBbt
-.L1833:
-	ldr	r0, .L1856+4
+.L1835:
+	ldr	r0, .L1858+4
 	mov	r2, #0
-.L1834:
+.L1836:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1835
+	blt	.L1837
 	ldrh	r6, [r4, #40]
 	mov	r5, #0
-.L1836:
+.L1838:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1837
+	bhi	.L1839
 	ldrh	r1, [r4, #32]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1838
-.L1842:
+	bge	.L1840
+.L1844:
 	mov	r0, #0
 	mov	r6, r0
-.L1839:
+.L1841:
 	ldrh	r2, [r4, #40]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1843
+	bhi	.L1845
 	ldrh	r3, [r4, #42]
 	movw	r9, #2572
 	ldrh	r5, [r4, #32]
@@ -13004,7 +13016,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r6, r3
-	ble	.L1844
+	ble	.L1846
 	mov	r1, r5
 	sub	r0, r10, r6
 	bl	__udivsi3
@@ -13012,10 +13024,10 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r4, r9]	@ movhi
-.L1844:
+.L1846:
 	ldrh	r3, [r4, #94]
 	cmp	r3, #0
-	beq	.L1846
+	beq	.L1848
 	movw	r2, #2572
 	ldrh	r1, [r4, r2]
 	add	r1, r1, r3, lsr #1
@@ -13026,7 +13038,7 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r7, r3
 	strhlt	r3, [r4, r2]	@ movhi
-.L1846:
+.L1848:
 	movw	r3, #2572
 	mvn	r6, #0
 	ldrh	r2, [r4, r3]
@@ -13044,7 +13056,7 @@ ftl_low_format:
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r5, .L1856+8
+	ldr	r5, .L1858+8
 	lsl	r2, r2, #1
 	sub	r5, r5, #240
 	bl	ftl_memset
@@ -13067,29 +13079,29 @@ ftl_low_format:
 	ldr	r0, [r4, #24]
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1848:
+.L1850:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1849
+	bne	.L1851
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1848
-.L1835:
+	b	.L1850
+.L1837:
 	ldr	ip, [r4, #3304]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [ip, r3, lsl #2]
 	ldr	r1, [r4, #3308]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1834
-.L1837:
+	b	.L1836
+.L1839:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13097,8 +13109,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1836
-.L1838:
+	b	.L1838
+.L1840:
 	mov	r0, r5
 	bl	__udivsi3
 	ldr	r3, [r4, #132]
@@ -13108,25 +13120,25 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1840:
+.L1842:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1842
+	bls	.L1844
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1840
-.L1843:
+	b	.L1842
+.L1845:
 	mov	r1, #0
 	uxth	r0, r0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	mov	r0, r5
 	uxth	r6, r6
-	b	.L1839
-.L1849:
+	b	.L1841
+.L1851:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -13137,7 +13149,7 @@ ftl_low_format:
 	ldr	r2, [r4, #2324]
 	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L1856+12
+	ldr	r2, .L1858+12
 	movw	r1, #2396
 	strb	r3, [r4, #2402]
 	strh	r3, [r2, #2]	@ movhi
@@ -13148,21 +13160,21 @@ ftl_low_format:
 	strh	r3, [r4, r1]	@ movhi
 	mov	r3, #1
 	strb	r3, [r4, #2404]
-.L1850:
+.L1852:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1851
+	bne	.L1853
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1850
-.L1851:
+	b	.L1852
+.L1853:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -13175,7 +13187,7 @@ ftl_low_format:
 	movw	r3, #2444
 	strh	r5, [r4, r3]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L1856+16
+	ldr	r3, .L1858+16
 	mov	r2, #0
 	strh	r2, [r3, #2]	@ movhi
 	ldr	r2, [r4, #3464]
@@ -13190,13 +13202,13 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L1856+20
+	ldreq	r3, .L1858+20
 	moveq	r2, #1
 	streq	r2, [r3]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1857:
+.L1859:
 	.align	2
-.L1856:
+.L1858:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR0+2588
@@ -13231,7 +13243,7 @@ rk_sftl_vendor_dev_ops_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1862
+	ldr	r2, .L1864
 	ldr	r3, [r2, #3680]
 	cmp	r3, #0
 	streq	r0, [r2, #3680]
@@ -13239,9 +13251,9 @@ rk_sftl_vendor_dev_ops_register:
 	streq	r1, [r2, #3684]
 	mvnne	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1863:
+.L1865:
 	.align	2
-.L1862:
+.L1864:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
@@ -13257,28 +13269,28 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #65536
-	ldr	r4, .L1873
+	ldr	r4, .L1875
 	bl	ftl_malloc
 	cmp	r0, #0
 	str	r0, [r4, #3688]
 	mvneq	r9, #11
-	beq	.L1864
-	ldr	r8, .L1873+4
+	beq	.L1866
+	ldr	r8, .L1875+4
 	mov	r6, #0
 	mov	r5, r6
 	mov	r7, r6
-.L1868:
+.L1870:
 	ldr	r3, [r4, #3680]
 	mov	r1, #128
 	ldr	r2, [r4, #3688]
 	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L1866
+	bne	.L1868
 	ldr	r2, [r4, #3688]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1867
+	bne	.L1869
 	add	r1, r2, #61440
 	ldr	r3, [r2, #4]
 	ldr	r1, [r1, #4092]
@@ -13290,26 +13302,26 @@ rk_sftl_vendor_storage_init:
 	cmp	r1, #0
 	movne	r6, r7
 	movne	r5, r3
-.L1867:
+.L1869:
 	add	r7, r7, #1
 	cmp	r7, #2
-	bne	.L1868
+	bne	.L1870
 	cmp	r5, #0
-	beq	.L1869
+	beq	.L1871
 	ldr	r3, [r4, #3680]
 	mov	r1, #128
 	lsl	r0, r6, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L1864
-.L1866:
+	beq	.L1866
+.L1868:
 	ldr	r0, [r4, #3688]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
 	str	r3, [r4, #3688]
-	b	.L1864
-.L1869:
+	b	.L1866
+.L1871:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
@@ -13319,15 +13331,15 @@ rk_sftl_vendor_storage_init:
 	str	r2, [r3, #4]
 	str	r8, [r3]
 	str	r2, [r1, #4092]
-	ldr	r2, .L1873+8
+	ldr	r2, .L1875+8
 	strh	r5, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1864:
+.L1866:
 	mov	r0, r9
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L1874:
+.L1876:
 	.align	2
-.L1873:
+.L1875:
 	.word	.LANCHOR0
 	.word	1380668996
 	.word	-1032
@@ -13344,26 +13356,26 @@ rk_sftl_vendor_read:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1881
+	ldr	r3, .L1883
 	mov	r4, r0
 	mov	r0, r1
 	ldr	ip, [r3, #3688]
 	cmp	ip, #0
 	ldrhne	lr, [ip, #10]
 	movne	r3, #0
-	bne	.L1877
-.L1880:
+	bne	.L1879
+.L1882:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1878:
+.L1880:
 	add	r3, r3, #1
-.L1877:
+.L1879:
 	cmp	r3, lr
-	bcs	.L1880
+	bcs	.L1882
 	add	r1, ip, r3, lsl #3
 	ldrh	r5, [r1, #16]
 	cmp	r5, r4
-	bne	.L1878
+	bne	.L1880
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13374,9 +13386,9 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1882:
+.L1884:
 	.align	2
-.L1881:
+.L1883:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
@@ -13393,23 +13405,23 @@ rk_sftl_vendor_write:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	ip, r1
-	ldr	r8, .L1902
+	ldr	r8, .L1904
 	mov	r9, r2
 	ldr	r4, [r8, #3688]
 	cmp	r4, #0
-	beq	.L1898
+	beq	.L1900
 	ldrh	r2, [r4, #10]
 	add	r7, r9, #63
 	ldrh	r3, [r4, #8]
 	bic	r7, r7, #63
 	mov	r5, #0
 	str	r3, [fp, #-44]
-.L1885:
+.L1887:
 	cmp	r5, r2
-	bcc	.L1893
+	bcc	.L1895
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1898
+	bhi	.L1900
 	add	r3, r4, r2, lsl #3
 	uxth	r7, r7
 	strh	r0, [r3, #16]	@ movhi
@@ -13441,31 +13453,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r8, #3684]
-	b	.L1901
-.L1893:
+	b	.L1903
+.L1895:
 	add	r6, r4, r5, lsl #3
 	ldrh	r3, [r6, #16]
 	cmp	r3, r0
 	str	r3, [fp, #-48]
-	bne	.L1886
+	bne	.L1888
 	ldrh	r1, [r6, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r9, r1
 	str	r1, [fp, #-52]
-	bls	.L1887
+	bls	.L1889
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1898
+	bhi	.L1900
 	ldrh	r8, [r6, #18]
 	sub	r2, r2, #1
 	str	r2, [fp, #-56]
-.L1888:
+.L1890:
 	ldr	r2, [fp, #-56]
 	add	r6, r6, #8
 	cmp	r5, r2
-	bcc	.L1889
+	bcc	.L1891
 	ldrh	r2, [fp, #-48]
 	add	r5, r4, r5, lsl #3
 	uxth	r8, r8
@@ -13484,7 +13496,7 @@ rk_sftl_vendor_write:
 	strh	r8, [r4, #12]	@ movhi
 	add	r7, r7, r3
 	strh	r7, [r4, #14]	@ movhi
-.L1890:
+.L1892:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -13496,19 +13508,19 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1902
+	ldr	r3, .L1904
 	ldr	r3, [r3, #3684]
-.L1901:
+.L1903:
 	ldr	r0, [fp, #-44]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L1883:
+.L1885:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1889:
+.L1891:
 	ldrh	r10, [r6, #20]
 	add	r0, r3, r8
 	ldrh	r2, [r6, #16]
@@ -13527,8 +13539,8 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	ip, [fp, #-64]
 	ldr	r3, [fp, #-60]
-	b	.L1888
-.L1887:
+	b	.L1890
+.L1889:
 	add	r5, r4, r5, lsl #3
 	mov	r2, r9
 	mov	r1, ip
@@ -13536,16 +13548,16 @@ rk_sftl_vendor_write:
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r9, [r6, #20]	@ movhi
-	b	.L1890
-.L1886:
+	b	.L1892
+.L1888:
 	add	r5, r5, #1
-	b	.L1885
-.L1898:
+	b	.L1887
+.L1900:
 	mvn	r0, #0
-	b	.L1883
-.L1903:
+	b	.L1885
+.L1905:
 	.align	2
-.L1902:
+.L1904:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
@@ -13566,18 +13578,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L1904
-	ldr	r3, .L1929
+	beq	.L1906
+	ldr	r3, .L1931
 	cmp	r6, r3
-	beq	.L1907
+	beq	.L1909
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1908
-.L1924:
+	beq	.L1910
+.L1926:
 	mvn	r5, #13
-	b	.L1906
-.L1907:
-	ldr	r6, .L1929+4
+	b	.L1908
+.L1909:
+	ldr	r6, .L1931+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13588,31 +13600,31 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1914
+	bne	.L1916
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1924
+	bne	.L1926
 	ldr	r2, [r4]
-	ldr	r3, .L1929+8
+	ldr	r3, .L1931+8
 	cmp	r2, r3
-	beq	.L1912
-.L1913:
+	beq	.L1914
+.L1915:
 	mvn	r5, #0
-.L1906:
+.L1908:
 	mov	r0, r4
 	bl	kfree
-.L1904:
+.L1906:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1912:
+.L1914:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	beq	.L1913
+	beq	.L1915
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
@@ -13626,15 +13638,15 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1924
+	bne	.L1926
 	mov	r0, r5
 	mov	r1, r4
 	bl	arm_copy_to_user
 	subs	r5, r0, #0
-	beq	.L1906
-	b	.L1924
-.L1908:
-	ldr	r6, .L1929+4
+	beq	.L1908
+	b	.L1926
+.L1910:
+	ldr	r6, .L1931+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13645,20 +13657,20 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1914
+	bne	.L1916
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1924
+	bne	.L1926
 	ldr	r2, [r4]
-	ldr	r3, .L1929+8
+	ldr	r3, .L1931+8
 	cmp	r2, r3
-	bne	.L1913
+	bne	.L1915
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1913
+	bhi	.L1915
 	mov	r3, sp
 	add	r2, r2, #8
 	and	r6, r6, r3
@@ -13672,26 +13684,26 @@ rk_sftl_vendor_storage_ioctl:
 	cmp	r3, #0
 	movne	r1, r2
 	movne	r0, r4
-	bne	.L1928
+	bne	.L1930
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1924
+	bne	.L1926
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
 	mov	r5, r0
-	b	.L1906
-.L1914:
+	b	.L1908
+.L1916:
 	mov	r1, #8
-.L1928:
-	bl	__memzero
-	b	.L1924
 .L1930:
+	bl	__memzero
+	b	.L1926
+.L1932:
 	.align	2
-.L1929:
+.L1931:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13708,12 +13720,12 @@ rk_sftl_vendor_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L1932
+	ldr	r0, .L1934
 	bl	misc_register
 	ldmfd	sp, {fp, sp, pc}
-.L1933:
+.L1935:
 	.align	2
-.L1932:
+.L1934:
 	.word	.LANCHOR2+12
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
 	.global	g_nand_ops
@@ -14040,7 +14052,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC118
+	.word	.LC119
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14917,4 +14929,6 @@ gp_last_act_superblock:
 .LC117:
 	.ascii	"%s idb buffer alloc fail\012\000"
 .LC118:
+	.ascii	"%p %x %p %x\012\000"
+.LC119:
 	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index e1b0595b18ee..ac8c3bbe7110 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-10-11
+ * date: 2018-10-29
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -12488,35 +12488,35 @@ sftl_write:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	adds	r5, r0, r1
-	subs	r6, r5, #1
+	adds	r6, r0, r1
+	subs	r7, r6, #1
 	.pad #132
 	sub	sp, sp, #132
-	cmp	r6, #63
+	cmp	r7, #63
 	mov	fp, r0
 	str	r1, [sp, #20]
 	str	r2, [sp, #40]
-	ldr	r4, .L1855
+	ldr	r4, .L1857
 	bls	.L1813
 	cmp	r0, #576
-	bls	.L1814
+	bcc	.L1814
 .L1813:
 	ldr	r3, [r4, #3668]
-	cbz	r3, .L1815
+	cbz	r3, .L1816
 	ldr	r10, [r4, #3672]
-	ldr	r3, .L1855+4
+	ldr	r3, .L1857+4
 	ldr	r2, [r10]
 	cmp	r2, r3
-	beq	.L1816
-.L1833:
-	ldr	r4, .L1855
+	beq	.L1817
+.L1834:
+	ldr	r4, .L1857
 	movs	r3, #0
 	ldr	r0, [r4, #3672]
 	str	r3, [r4, #3668]
 	bl	kfree
 	ldr	r0, [r4, #3676]
 	bl	kfree
-.L1815:
+.L1816:
 	ldr	r3, [sp, #40]
 	mov	r1, fp
 	ldr	r2, [sp, #20]
@@ -12525,15 +12525,15 @@ sftl_write:
 	add	sp, sp, #132
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1816:
+.L1817:
 	ldrh	r5, [r4, #14]
 	add	r0, r10, #262144
 	ldrh	r4, [r4, #10]
 	movs	r3, #0
 	movw	r2, #65535
-.L1820:
+.L1821:
 	ldr	r1, [r0, #-4]
-	cbnz	r1, .L1817
+	cbnz	r1, .L1818
 	ldr	r1, [r10, r3, lsl #2]
 	adds	r3, r3, #1
 	cmp	r3, #4096
@@ -12542,20 +12542,20 @@ sftl_write:
 	movhi	r3, #0
 	cmp	r2, #4096
 	str	r1, [r0, #-4]!
-	bne	.L1820
+	bne	.L1821
 	mov	r3, #512
 	str	r3, [sp, #8]
-	b	.L1819
-.L1817:
+	b	.L1820
+.L1818:
 	add	r3, r2, #127
-	ldr	r0, .L1855+8
+	ldr	r0, .L1857+8
 	lsrs	r3, r3, #7
 	str	r3, [sp, #8]
 	bl	sftl_printk
-.L1819:
+.L1820:
 	uxtb	r5, r5
 	smulbb	r5, r5, r4
-	ldr	r4, .L1855
+	ldr	r4, .L1857
 	uxth	r3, r5
 	movs	r5, #0
 	str	r3, [sp, #12]
@@ -12574,10 +12574,10 @@ sftl_write:
 	ldr	r3, [sp, #8]
 	lsls	r3, r3, #7
 	str	r3, [sp, #52]
-	b	.L1832
-.L1840:
+	b	.L1833
+.L1842:
 	str	r3, [sp, #36]
-.L1832:
+.L1833:
 	mov	r1, #512
 	ldr	r0, [r4, #3676]
 	bl	__memzero
@@ -12598,7 +12598,7 @@ sftl_write:
 	blx	r3
 	ldr	r3, [sp, #24]
 	cmp	r3, r6
-	bls	.L1821
+	bls	.L1822
 	mov	r1, r7
 	adds	r0, r6, r5
 	bl	__aeabi_uidiv
@@ -12606,7 +12606,7 @@ sftl_write:
 	mov	r1, r0
 	movs	r0, #0
 	blx	r3
-.L1821:
+.L1822:
 	mov	r1, r6
 	mov	r0, r5
 	bl	__aeabi_uidivmod
@@ -12614,10 +12614,10 @@ sftl_write:
 	mov	r9, r1
 	subs	r3, r5, r1
 	str	r3, [sp, #44]
-.L1822:
+.L1823:
 	ldr	r3, [sp, #24]
 	cmp	r3, r6
-	bhi	.L1823
+	bhi	.L1824
 	ldrb	r8, [r4, #14]	@ zero_extendqisi2
 	mov	r0, r5
 	ldr	r3, [r4, #3676]
@@ -12637,10 +12637,10 @@ sftl_write:
 	str	r3, [sp, #56]
 	bl	__aeabi_idivmod
 	uxth	r7, r1
-.L1824:
+.L1825:
 	ldr	r3, [sp, #8]
 	cmp	r6, r3
-	bcs	.L1828
+	bcs	.L1829
 	ldr	r3, [sp, #44]
 	mov	r1, r8
 	sub	r9, r3, r7
@@ -12664,25 +12664,25 @@ sftl_write:
 	movs	r0, #0
 	blx	r7
 	adds	r0, r0, #1
-	bne	.L1825
-.L1828:
+	bne	.L1826
+.L1829:
 	ldr	r0, [r4, #3676]
 	mov	r1, r10
 	movs	r6, #0
-.L1826:
+.L1827:
 	mov	r8, r1
 	ldr	r2, [r0, r6, lsl #2]
 	ldr	r3, [r8]
 	lsls	r7, r6, #2
 	adds	r1, r1, #4
 	cmp	r2, r3
-	beq	.L1829
+	beq	.L1830
 	mov	r1, #512
 	bl	__memzero
 	ldr	r2, [r4, #3676]
 	mov	r1, r5
 	str	r6, [sp]
-	ldr	r0, .L1855+12
+	ldr	r0, .L1857+12
 	ldr	r3, [r8]
 	ldr	r2, [r2, r7]
 	bl	sftl_printk
@@ -12692,13 +12692,13 @@ sftl_write:
 	blx	r3
 	ldr	r3, [sp, #16]
 	cmp	r3, #1
-	bls	.L1839
+	bls	.L1841
 	ldr	r2, [sp, #12]
 	movs	r0, #0
 	ldr	r3, [r4, #3248]
 	adds	r1, r2, r5
 	blx	r3
-.L1839:
+.L1841:
 	ldr	r2, [sp, #36]
 	ldr	r3, [sp, #16]
 	add	r3, r3, r2
@@ -12706,9 +12706,9 @@ sftl_write:
 	add	r5, r5, r2
 	ldr	r2, [sp, #36]
 	cmp	r2, #15
-	bls	.L1840
-	b	.L1833
-.L1823:
+	bls	.L1842
+	b	.L1834
+.L1824:
 	mov	r1, r8
 	add	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12731,26 +12731,26 @@ sftl_write:
 	ldr	r3, [sp, #32]
 	add	r6, r6, r3
 	uxth	r6, r6
-	b	.L1822
-.L1825:
+	b	.L1823
+.L1826:
 	add	r6, r6, r9
 	movs	r7, #0
 	uxth	r6, r6
-	b	.L1824
-.L1829:
+	b	.L1825
+.L1830:
 	ldr	r3, [sp, #52]
 	adds	r6, r6, #1
 	cmp	r6, r3
-	bne	.L1826
+	bne	.L1827
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #28]
-	bls	.L1839
-	b	.L1833
+	bls	.L1841
+	b	.L1834
 .L1814:
 	cmp	r0, #64
-	bne	.L1834
+	bne	.L1835
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r4, #3672]
@@ -12758,50 +12758,62 @@ sftl_write:
 	bl	ftl_malloc
 	ldr	r3, [r4, #3672]
 	str	r0, [r4, #3676]
-	cbz	r3, .L1835
-	cbz	r0, .L1835
+	cbz	r3, .L1836
+	cbz	r0, .L1836
 	movs	r2, #1
 	mov	r1, #262144
 	mov	r0, r3
 	str	r2, [r4, #3668]
 	bl	__memzero
-.L1834:
+.L1835:
+	ldr	r3, [r4, #3668]
+	cmp	r3, #0
+	beq	.L1816
 	cmp	fp, #63
-	ldr	r0, [r4, #3672]
-	bhi	.L1836
+	ldr	r1, [r4, #3672]
+	bhi	.L1838
 	ldr	r3, [sp, #20]
-	rsb	r1, fp, #64
-	subs	r2, r3, r1
+	rsb	r5, fp, #64
+	mov	r4, r1
+	sub	r8, r3, r5
 	ldr	r3, [sp, #40]
-	add	r1, r3, r1, lsl #9
-.L1837:
-	cmp	r6, #576
-	ittt	hi
-	subhi	r2, r2, r5
-	mvnhi	r3, #446
-	addhi	r2, r2, r3
-	lsls	r2, r2, #9
-	bl	ftl_memcpy
-	b	.L1815
-.L1835:
-	ldr	r1, .L1855+16
-	ldr	r0, .L1855+20
+	add	r5, r3, r5, lsl #9
+.L1839:
+	cmp	r7, #576
+	ldr	r0, .L1857+16
+	it	cs
+	subcs	r8, r8, r6
+	mov	r3, r4
+	it	cs
+	subcs	r8, r8, #446
+	mov	r2, #262144
+	str	r8, [sp]
 	bl	sftl_printk
-	b	.L1834
+	lsl	r2, r8, #9
+	mov	r1, r5
+	mov	r0, r4
+	bl	ftl_memcpy
+	b	.L1816
 .L1836:
-	ldr	r3, .L1855+24
-	ldr	r1, [sp, #40]
-	ldr	r2, [sp, #20]
-	add	r3, r3, fp
-	add	r0, r0, r3, lsl #9
-	b	.L1837
-.L1856:
+	ldr	r1, .L1857+20
+	ldr	r0, .L1857+24
+	bl	sftl_printk
+	b	.L1835
+.L1838:
+	ldr	r4, .L1857+28
+	ldr	r5, [sp, #40]
+	ldr	r8, [sp, #20]
+	add	r4, r4, fp
+	add	r4, r1, r4, lsl #9
+	b	.L1839
+.L1858:
 	.align	2
-.L1855:
+.L1857:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	.LC115
 	.word	.LC116
+	.word	.LC118
 	.word	.LANCHOR1+615
 	.word	.LC117
 	.word	8388544
@@ -12821,47 +12833,47 @@ FtlMakeBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, #0
-	ldr	r9, .L1876+4
+	ldr	r9, .L1878+4
 	bl	FtlBbtMemInit
 	sub	r5, r9, #180
 	sub	r10, r9, #18
 	mov	r4, r5
 	bl	FtlLoadFactoryBbt
-.L1858:
+.L1860:
 	ldrh	r3, [r5, #54]
 	cmp	r8, r3
-	bcc	.L1864
+	bcc	.L1866
 	movs	r5, #0
-.L1865:
+.L1867:
 	ldrh	r3, [r4, #114]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1866
+	bhi	.L1868
 	ldrh	r5, [r4, #164]
 	movw	r6, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1867:
+.L1869:
 	ldrh	r3, [r4, #164]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1871
+	ble	.L1873
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1868
+	beq	.L1870
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1869
+	beq	.L1871
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1868:
+.L1870:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1867
-.L1864:
+	b	.L1869
+.L1866:
 	ldrh	r3, [r10, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3292]
@@ -12869,11 +12881,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3452]
 	str	fp, [r5, #3456]
-	beq	.L1859
+	beq	.L1861
 	ldrh	r7, [r5, #98]
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1876
+	ldr	r0, .L1878
 	mla	r7, r8, r7, r3
 	lsls	r3, r7, #10
 	str	r3, [r5, #3448]
@@ -12884,29 +12896,29 @@ FtlMakeBbt:
 	adds	r2, r2, #7
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
-.L1860:
+.L1862:
 	uxth	r0, r7
 	add	r8, r8, #1
 	add	r9, r9, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1858
-.L1859:
+	b	.L1860
+.L1861:
 	mov	r1, r8
 	bl	FlashGetBadBlockList
 	ldr	r1, [r9]
 	ldr	r0, [r5, #3452]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #98]
-.L1862:
+.L1864:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L1861:
+.L1863:
 	ldrh	r0, [r4, #98]
 	smlabb	r0, r0, r8, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1862
+	beq	.L1864
 	movs	r1, #16
 	ldr	r0, [r4, #3324]
 	strh	r6, [r10]	@ movhi
@@ -12931,32 +12943,32 @@ FtlMakeBbt:
 	str	r3, [r4, #3448]
 	bl	ftl_memcpy
 	movs	r2, #1
-	ldr	r0, .L1876
+	ldr	r0, .L1878
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	ldr	r0, .L1876
+	ldr	r0, .L1878
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3444]
 	adds	r3, r3, #1
-	bne	.L1860
+	bne	.L1862
 	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1861
-.L1866:
+	b	.L1863
+.L1868:
 	bl	FtlBbmMapBadBlock
-	b	.L1865
-.L1869:
+	b	.L1867
+.L1871:
 	ldrh	r3, [r4, #152]
 	cmp	r3, r6
-	bne	.L1870
+	bne	.L1872
 	strh	r5, [r4, #152]	@ movhi
-	b	.L1868
-.L1870:
+	b	.L1870
+.L1872:
 	strh	r5, [r4, #156]	@ movhi
-.L1871:
+.L1873:
 	ldrh	r3, [r4, #152]
 	movs	r5, #0
 	ldr	r0, [r4, #3260]
@@ -12986,9 +12998,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1877:
+.L1879:
 	.align	2
-.L1876:
+.L1878:
 	.word	.LANCHOR0+3444
 	.word	.LANCHOR0+180
 	.fnend
@@ -13007,42 +13019,42 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1902
+	ldr	r4, .L1904
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
 	str	r3, [r4, #2544]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1879
+	cbz	r0, .L1881
 	bl	FtlMakeBbt
-.L1879:
-	ldr	r0, .L1902+4
+.L1881:
+	ldr	r0, .L1904+4
 	movs	r2, #0
-.L1880:
+.L1882:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1881
+	blt	.L1883
 	ldrh	r6, [r4, #40]
 	movs	r5, #0
-.L1882:
+.L1884:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1883
+	bhi	.L1885
 	ldrh	r1, [r4, #32]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1884
-.L1888:
+	bge	.L1886
+.L1890:
 	movs	r5, #0
 	mov	r6, r5
-.L1885:
+.L1887:
 	ldrh	r3, [r4, #40]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1889
+	bhi	.L1891
 	ldrh	r3, [r4, #42]
 	ldrh	r5, [r4, #32]
 	ldr	r9, [r4, #44]
@@ -13058,7 +13070,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1890
+	ble	.L1892
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -13066,9 +13078,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2572]	@ movhi
-.L1890:
+.L1892:
 	ldrh	r3, [r4, #94]
-	cbz	r3, .L1892
+	cbz	r3, .L1894
 	ldrh	r2, [r4, #2572]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2572]	@ movhi
@@ -13079,10 +13091,10 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2572]	@ movhi
-.L1892:
+.L1894:
 	ldrh	r2, [r4, #2572]
 	ldr	r3, [r4, #2504]
-	ldr	r6, .L1902+8
+	ldr	r6, .L1904+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #102]
@@ -13115,28 +13127,28 @@ ftl_low_format:
 	strh	r5, [r4, #2588]	@ movhi
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1894:
+.L1896:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2348]
 	cmp	r3, #0
-	bne	.L1895
+	bne	.L1897
 	ldr	r3, [r4, #2324]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2348]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2348]	@ movhi
-	b	.L1894
-.L1881:
+	b	.L1896
+.L1883:
 	ldr	r5, [r4, #3304]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
 	ldr	r1, [r4, #3308]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1880
-.L1883:
+	b	.L1882
+.L1885:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13144,8 +13156,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1882
-.L1884:
+	b	.L1884
+.L1886:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #132]
@@ -13155,27 +13167,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1886:
+.L1888:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1888
+	bls	.L1890
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1886
-.L1889:
+	b	.L1888
+.L1891:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1885
-.L1895:
+	b	.L1887
+.L1897:
 	ldr	r3, [r4, #2540]
 	movw	r5, #65535
 	ldrh	r1, [r4, #2352]
-	ldr	r6, .L1902+12
+	ldr	r6, .L1904+12
 	str	r3, [r4, #2360]
 	adds	r3, r3, #1
 	str	r3, [r4, #2540]
@@ -13189,19 +13201,19 @@ ftl_low_format:
 	strh	r3, [r4, #2396]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #2404]
-.L1896:
+.L1898:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2396]
-	cbnz	r3, .L1897
+	cbnz	r3, .L1899
 	ldr	r3, [r4, #2324]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2396]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2396]	@ movhi
-	b	.L1896
-.L1897:
+	b	.L1898
+.L1899:
 	ldr	r3, [r4, #2540]
 	movw	r5, #65535
 	ldrh	r1, [r4, #2400]
@@ -13224,16 +13236,16 @@ ftl_low_format:
 	str	r3, [r4, #2540]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1898
-	ldr	r3, .L1902+16
+	cbnz	r0, .L1900
+	ldr	r3, .L1904+16
 	movs	r2, #1
 	str	r2, [r3]
-.L1898:
+.L1900:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1903:
+.L1905:
 	.align	2
-.L1902:
+.L1904:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR0+2348
@@ -13268,19 +13280,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1908
+	ldr	r2, .L1910
 	ldr	r3, [r2, #3680]
-	cbnz	r3, .L1907
+	cbnz	r3, .L1909
 	str	r0, [r2, #3680]
 	mov	r0, r3
 	str	r1, [r2, #3684]
 	bx	lr
-.L1907:
+.L1909:
 	mov	r0, #-1
 	bx	lr
-.L1909:
+.L1911:
 	.align	2
-.L1908:
+.L1910:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -13298,55 +13310,55 @@ rk_sftl_vendor_storage_init:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r4, .L1918
+	ldr	r4, .L1920
 	bl	ftl_malloc
 	str	r0, [r4, #3688]
 	cmp	r0, #0
-	beq	.L1916
-	ldr	r8, .L1918+4
+	beq	.L1918
+	ldr	r8, .L1920+4
 	mov	r9, #0
 	mov	r7, r9
 	mov	r6, r9
-.L1914:
+.L1916:
 	ldr	r3, [r4, #3680]
 	movs	r1, #128
 	ldr	r2, [r4, #3688]
 	lsls	r0, r6, #7
 	blx	r3
 	mov	r5, r0
-	cbnz	r0, .L1912
+	cbnz	r0, .L1914
 	ldr	r2, [r4, #3688]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1913
+	bne	.L1915
 	movw	r3, #65532
 	ldr	r1, [r2, r3]
 	ldr	r3, [r2, #4]
 	cmp	r1, r3
-	bne	.L1913
+	bne	.L1915
 	cmp	r1, r7
 	itt	hi
 	movhi	r9, r6
 	movhi	r7, r1
-.L1913:
+.L1915:
 	adds	r6, r6, #1
 	cmp	r6, #2
-	bne	.L1914
-	cbz	r7, .L1915
+	bne	.L1916
+	cbz	r7, .L1917
 	ldr	r3, [r4, #3680]
 	movs	r1, #128
 	lsl	r0, r9, #7
 	blx	r3
 	mov	r5, r0
-	cbz	r0, .L1910
-.L1912:
+	cbz	r0, .L1912
+.L1914:
 	ldr	r0, [r4, #3688]
 	mov	r5, #-1
 	bl	kfree
 	movs	r3, #0
 	str	r3, [r4, #3688]
-	b	.L1910
-.L1915:
+	b	.L1912
+.L1917:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
@@ -13359,15 +13371,15 @@ rk_sftl_vendor_storage_init:
 	movw	r2, #64504
 	strh	r7, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1910:
+.L1912:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1916:
+.L1918:
 	mvn	r5, #11
-	b	.L1910
-.L1919:
+	b	.L1912
+.L1921:
 	.align	2
-.L1918:
+.L1920:
 	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
@@ -13386,23 +13398,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L1926
+	ldr	r3, .L1928
 	mov	r0, r1
 	ldr	r5, [r3, #3688]
-	cbz	r5, .L1925
+	cbz	r5, .L1927
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L1922:
+.L1924:
 	cmp	r3, r6
-	bcc	.L1924
-.L1925:
+	bcc	.L1926
+.L1927:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1924:
+.L1926:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L1923
+	bne	.L1925
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13414,12 +13426,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1923:
+.L1925:
 	adds	r3, r3, #1
-	b	.L1922
-.L1927:
+	b	.L1924
+.L1929:
 	.align	2
-.L1926:
+.L1928:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -13437,26 +13449,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L1947
+	ldr	r2, .L1949
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
 	ldr	r4, [r2, #3688]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L1943
+	beq	.L1945
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L1930:
+.L1932:
 	cmp	r7, r2
-	bcc	.L1938
+	bcc	.L1940
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1943
+	bhi	.L1945
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -13489,31 +13501,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #3684]
-	b	.L1946
-.L1938:
+	b	.L1948
+.L1940:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L1931
+	bne	.L1933
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L1932
+	bls	.L1934
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1943
+	bhi	.L1945
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L1933:
+.L1935:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L1934
+	bcc	.L1936
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -13532,7 +13544,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L1935:
+.L1937:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -13545,20 +13557,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1947
+	ldr	r3, .L1949
 	ldr	r3, [r3, #3684]
-.L1946:
+.L1948:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L1928:
+.L1930:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1934:
+.L1936:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -13575,24 +13587,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L1933
-.L1932:
+	b	.L1935
+.L1934:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L1935
-.L1931:
+	b	.L1937
+.L1933:
 	adds	r7, r7, #1
-	b	.L1930
-.L1943:
+	b	.L1932
+.L1945:
 	mov	r0, #-1
-	b	.L1928
-.L1948:
+	b	.L1930
+.L1950:
 	.align	2
-.L1947:
+.L1949:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -13615,18 +13627,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L1963
-	ldr	r3, .L1975
+	beq	.L1965
+	ldr	r3, .L1977
 	cmp	r6, r3
-	beq	.L1952
+	beq	.L1954
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1953
-.L1974:
+	beq	.L1955
+.L1976:
 	mvn	r5, #13
-	b	.L1951
-.L1952:
-	ldr	r6, .L1975+4
+	b	.L1953
+.L1954:
+	ldr	r6, .L1977+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13637,31 +13649,31 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1959
+	bne	.L1961
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1974
+	bne	.L1976
 	ldr	r2, [r4]
-	ldr	r3, .L1975+8
+	ldr	r3, .L1977+8
 	cmp	r2, r3
-	beq	.L1957
-.L1958:
+	beq	.L1959
+.L1960:
 	mov	r5, #-1
-.L1951:
+.L1953:
 	mov	r0, r4
 	bl	kfree
-.L1949:
+.L1951:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1957:
+.L1959:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L1958
+	beq	.L1960
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
@@ -13675,17 +13687,17 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1974
+	bne	.L1976
 	mov	r1, r4
 	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L1974
-.L1965:
+	bne	.L1976
+.L1967:
 	mov	r5, r0
-	b	.L1951
-.L1953:
-	ldr	r6, .L1975+4
+	b	.L1953
+.L1955:
+	ldr	r6, .L1977+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13695,20 +13707,20 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1959
+	cbnz	r3, .L1961
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1974
+	bne	.L1976
 	ldr	r2, [r4]
-	ldr	r3, .L1975+8
+	ldr	r3, .L1977+8
 	cmp	r2, r3
-	bne	.L1958
+	bne	.L1960
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1958
+	bhi	.L1960
 	mov	r3, sp
 	adds	r2, r2, #8
 	ands	r6, r6, r3
@@ -13719,32 +13731,32 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1961
+	cbnz	r3, .L1963
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1974
+	bne	.L1976
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L1965
-.L1959:
+	b	.L1967
+.L1961:
 	movs	r1, #8
-.L1973:
+.L1975:
 	bl	__memzero
-	b	.L1974
-.L1961:
+	b	.L1976
+.L1963:
 	mov	r1, r2
 	mov	r0, r4
-	b	.L1973
-.L1963:
+	b	.L1975
+.L1965:
 	mov	r5, #-1
-	b	.L1949
-.L1976:
+	b	.L1951
+.L1978:
 	.align	2
-.L1975:
+.L1977:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13762,11 +13774,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L1978
+	ldr	r0, .L1980
 	b	misc_register
-.L1979:
+.L1981:
 	.align	2
-.L1978:
+.L1980:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14094,7 +14106,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC118
+	.word	.LC119
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14971,4 +14983,6 @@ gp_last_act_superblock:
 .LC117:
 	.ascii	"%s idb buffer alloc fail\012\000"
 .LC118:
+	.ascii	"%p %x %p %x\012\000"
+.LC119:
 	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index 0c7cf75a6486..1b5ac0ac9462 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-10-11
+ * date: 2018-10-29
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
@@ -11440,39 +11440,39 @@ FtlWrite:
 sftl_write:
 	stp	x29, x30, [sp, -224]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	add	w19, w0, w1
-	stp	x27, x28, [sp, 80]
-	adrp	x20, .LANCHOR0
 	stp	x21, x22, [sp, 32]
-	sub	w21, w19, #1
-	stp	x23, x24, [sp, 48]
+	add	w21, w0, w1
+	stp	x27, x28, [sp, 80]
+	sub	w22, w21, #1
+	stp	x19, x20, [sp, 16]
 	mov	w27, w1
+	stp	x23, x24, [sp, 48]
+	mov	x28, x2
 	stp	x25, x26, [sp, 64]
 	mov	w24, w0
-	mov	x28, x2
-	cmp	w21, 63
+	cmp	w22, 63
+	adrp	x20, .LANCHOR0
 	bls	.L1661
-	cmp	w0, 576
+	cmp	w0, 575
 	bls	.L1662
 .L1661:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3972]
-	cbz	w1, .L1663
+	cbz	w1, .L1664
 	ldr	x26, [x0, 3976]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
 	ldr	w2, [x26]
 	cmp	w2, w1
-	beq	.L1664
-.L1681:
+	beq	.L1665
+.L1682:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	x0, [x20, 3976]
 	str	wzr, [x20, 3972]
 	bl	kfree
 	ldr	x0, [x20, 3984]
 	bl	kfree
-.L1663:
+.L1664:
 	mov	x3, x28
 	mov	w2, w27
 	mov	w1, w24
@@ -11485,7 +11485,7 @@ sftl_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 224
 	ret
-.L1664:
+.L1665:
 	ldrh	w19, [x0, 14]
 	mov	w2, 65535
 	ldrh	w22, [x0, 10]
@@ -11493,9 +11493,9 @@ sftl_write:
 	mov	w4, 4097
 	add	x3, x26, x0
 	mov	w0, 0
-.L1668:
+.L1669:
 	ldr	w1, [x3]
-	cbnz	w1, .L1665
+	cbnz	w1, .L1666
 	ldr	w1, [x26, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w1, [x3], -4
@@ -11503,17 +11503,17 @@ sftl_write:
 	sub	w2, w2, #1
 	csel	w0, w0, wzr, cc
 	cmp	w2, 4096
-	bne	.L1668
+	bne	.L1669
 	mov	w25, 512
-	b	.L1667
-.L1665:
+	b	.L1668
+.L1666:
 	add	w25, w2, 127
 	adrp	x0, .LC115
 	lsr	w25, w25, 7
 	add	x0, x0, :lo12:.LC115
 	mov	w3, w25
 	bl	sftl_printk
-.L1667:
+.L1668:
 	and	w19, w19, 255
 	add	x21, x20, :lo12:.LANCHOR0
 	mul	w22, w22, w19
@@ -11527,10 +11527,10 @@ sftl_write:
 	stp	wzr, w0, [x29, 152]
 	lsl	w0, w25, 7
 	str	w0, [x29, 136]
-	b	.L1680
-.L1688:
+	b	.L1681
+.L1690:
 	str	w0, [x29, 140]
-.L1680:
+.L1681:
 	ldr	x0, [x21, 3984]
 	mov	x2, 512
 	mov	w1, 0
@@ -11555,7 +11555,7 @@ sftl_write:
 	ldr	w3, [x29, 120]
 	cmp	w0, w2
 	ldr	x4, [x29, 112]
-	bls	.L1669
+	bls	.L1670
 	add	w1, w2, w19
 	ldr	x4, [x4, 8]
 	str	w2, [x29, 120]
@@ -11563,16 +11563,16 @@ sftl_write:
 	udiv	w1, w1, w3
 	blr	x4
 	ldr	w2, [x29, 120]
-.L1669:
+.L1670:
 	udiv	w5, w19, w2
 	mov	w4, 0
 	mov	w7, 61424
 	msub	w5, w5, w2, w19
 	sub	w6, w19, w5
-.L1670:
+.L1671:
 	ldr	w0, [x29, 156]
 	cmp	w0, w4
-	bhi	.L1671
+	bhi	.L1672
 	ldrh	w5, [x21, 14]
 	mov	w9, 0
 	ldrh	w0, [x21, 10]
@@ -11588,9 +11588,9 @@ sftl_write:
 	sdiv	w0, w1, w4
 	msub	w0, w0, w4, w1
 	and	w0, w0, 65535
-.L1672:
+.L1673:
 	cmp	w9, w25
-	bcs	.L1676
+	bcs	.L1677
 	add	w1, w7, w9
 	sub	w10, w5, w0
 	add	w0, w0, w8
@@ -11616,13 +11616,13 @@ sftl_write:
 	ldr	w8, [x29, 120]
 	ldr	w4, [x29, 144]
 	ldr	x6, [x29, 128]
-	bne	.L1673
-.L1676:
+	bne	.L1674
+.L1677:
 	ldr	x0, [x21, 3984]
 	mov	x2, x26
 	mov	w4, 0
 	mov	x1, x0
-.L1674:
+.L1675:
 	mov	x5, x1
 	mov	x3, x2
 	add	x1, x1, 4
@@ -11630,7 +11630,7 @@ sftl_write:
 	ldr	w6, [x3]
 	ldr	w7, [x5]
 	cmp	w7, w6
-	beq	.L1677
+	beq	.L1678
 	mov	x2, 512
 	mov	w1, 0
 	stp	x3, x5, [x29, 120]
@@ -11651,22 +11651,22 @@ sftl_write:
 	str	x2, [x29, 144]
 	blr	x3
 	cmp	w23, 1
-	bls	.L1687
+	bls	.L1689
 	ldr	x2, [x29, 144]
 	add	w1, w22, w19
 	mov	w0, 0
 	ldr	x2, [x2, 8]
 	blr	x2
-.L1687:
+.L1689:
 	ldr	w1, [x29, 156]
 	ldr	w0, [x29, 140]
 	add	w19, w19, w1
 	ldr	w1, [x29, 140]
 	add	w0, w23, w0
 	cmp	w1, 15
-	bls	.L1688
-	b	.L1681
-.L1671:
+	bls	.L1690
+	b	.L1682
+.L1672:
 	ldr	w1, [x29, 144]
 	add	w0, w5, w4
 	ldr	x8, [x21, 3384]
@@ -11691,76 +11691,87 @@ sftl_write:
 	add	w4, w0, w4
 	ldr	w6, [x29, 120]
 	and	w4, w4, 65535
-	b	.L1670
-.L1673:
+	b	.L1671
+.L1674:
 	add	w9, w10, w9
 	mov	w0, 0
 	and	w9, w9, 65535
-	b	.L1672
-.L1677:
+	b	.L1673
+.L1678:
 	ldr	w3, [x29, 136]
 	add	w4, w4, 1
 	cmp	w4, w3
-	bne	.L1674
+	bne	.L1675
 	ldr	w0, [x29, 152]
 	add	w0, w0, 1
 	str	w0, [x29, 152]
 	cmp	w0, 5
-	bls	.L1687
-	b	.L1681
+	bls	.L1689
+	b	.L1682
 .L1662:
 	cmp	w0, 64
-	bne	.L1682
-	add	x22, x20, :lo12:.LANCHOR0
+	bne	.L1683
+	add	x19, x20, :lo12:.LANCHOR0
 	mov	w0, 262144
 	bl	ftl_malloc
-	str	x0, [x22, 3976]
+	str	x0, [x19, 3976]
 	mov	w0, 262144
 	bl	ftl_malloc
 	mov	x1, x0
-	ldr	x0, [x22, 3976]
-	str	x1, [x22, 3984]
-	cbz	x0, .L1683
-	cbz	x1, .L1683
+	ldr	x0, [x19, 3976]
+	str	x1, [x19, 3984]
+	cbz	x0, .L1684
+	cbz	x1, .L1684
 	mov	w1, 1
 	mov	w2, 262144
-	str	w1, [x22, 3972]
+	str	w1, [x19, 3972]
 	mov	w1, 0
 	bl	ftl_memset
-.L1682:
+.L1683:
 	add	x20, x20, :lo12:.LANCHOR0
+	ldr	w0, [x20, 3972]
+	cbz	w0, .L1664
 	cmp	w24, 63
-	ldr	x0, [x20, 3976]
-	bhi	.L1684
-	mov	w1, 64
-	sub	w1, w1, w24
-	sub	w2, w27, w1
-	ubfiz	x1, x1, 9, 25
-	add	x1, x28, x1
-.L1685:
-	cmp	w21, 576
-	bls	.L1686
-	sub	w2, w2, w19
-	sub	w2, w2, #447
-.L1686:
-	lsl	w2, w2, 9
+	ldr	x1, [x20, 3976]
+	bhi	.L1686
+	mov	w20, 64
+	sub	w20, w20, w24
+	sub	w23, w27, w20
+	ubfiz	x20, x20, 9, 25
+	add	x20, x28, x20
+	mov	x19, x1
+.L1687:
+	cmp	w22, 575
+	bls	.L1688
+	sub	w23, w23, w21
+	sub	w23, w23, #446
+.L1688:
+	mov	w4, w23
+	mov	x3, x19
+	mov	w2, 262144
+	adrp	x0, .LC118
+	add	x0, x0, :lo12:.LC118
+	bl	sftl_printk
+	lsl	w2, w23, 9
+	mov	x1, x20
+	mov	x0, x19
 	bl	ftl_memcpy
-	b	.L1663
-.L1683:
+	b	.L1664
+.L1684:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 728
 	adrp	x0, .LC117
 	add	x0, x0, :lo12:.LC117
 	bl	sftl_printk
-	b	.L1682
-.L1684:
-	lsl	w1, w24, 7
-	mov	w2, w27
-	sub	w1, w1, #8192
-	add	x0, x0, x1, lsl 2
-	mov	x1, x28
-	b	.L1685
+	b	.L1683
+.L1686:
+	lsl	w19, w24, 7
+	mov	x20, x28
+	sub	w19, w19, #8192
+	mov	w23, w27
+	add	x19, x1, x19, lsl 2
+	b	.L1687
 	.size	sftl_write, .-sftl_write
 	.align	2
 	.global	FtlMakeBbt
@@ -11784,47 +11795,47 @@ FtlMakeBbt:
 	add	x25, x0, 172
 	mov	x19, x0
 	add	x20, x0, 3712
-.L1705:
+.L1707:
 	ldrh	w0, [x19, 58]
 	cmp	w24, w0
-	bcc	.L1711
+	bcc	.L1713
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1712:
+.L1714:
 	ldrh	w0, [x20, 118]
 	cmp	w0, w19
-	bhi	.L1713
+	bhi	.L1715
 	add	x20, x20, 160
 	ldrh	w19, [x20, 12]
 	mov	w22, 65535
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L1714:
+.L1716:
 	ldrh	w0, [x20, 12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L1718
+	ble	.L1720
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1715
+	beq	.L1717
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L1716
+	cbz	w0, .L1718
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-.L1715:
+.L1717:
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-	b	.L1714
-.L1711:
+	b	.L1716
+.L1713:
 	ldr	x0, [x19, 3448]
 	mov	w2, 65535
 	ldr	x27, [x19, 3512]
 	ldrh	w1, [x25]
 	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	beq	.L1706
+	beq	.L1708
 	ldrh	w23, [x19, 102]
 	mov	w2, 1
 	madd	w23, w23, w24, w1
@@ -11839,29 +11850,29 @@ FtlMakeBbt:
 	add	w2, w2, 7
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-.L1707:
+.L1709:
 	mov	w0, w23
 	add	w24, w24, 1
 	bl	FtlBbmMapBadBlock
 	add	x26, x26, 8
 	add	x25, x25, 2
-	b	.L1705
-.L1706:
+	b	.L1707
+.L1708:
 	mov	w1, w24
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20, 8]
 	ldr	x1, [x26]
 	bl	FtlBbt2Bitmap
 	ldrh	w22, [x19, 102]
-.L1709:
+.L1711:
 	sub	w22, w22, #1
 	and	w22, w22, 65535
-.L1708:
+.L1710:
 	ldrh	w0, [x19, 102]
 	madd	w0, w24, w0, w22
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1709
+	beq	.L1711
 	ldr	x0, [x19, 3512]
 	mov	w2, 16
 	strh	w22, [x25]
@@ -11896,25 +11907,25 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L1707
+	bne	.L1709
 	mov	w0, w23
 	bl	FtlBbmMapBadBlock
-	b	.L1708
-.L1713:
+	b	.L1710
+.L1715:
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	and	w19, w19, 65535
-	b	.L1712
-.L1716:
+	b	.L1714
+.L1718:
 	ldrh	w0, [x20]
 	cmp	w0, w22
-	bne	.L1717
+	bne	.L1719
 	strh	w19, [x20]
-	b	.L1715
-.L1717:
+	b	.L1717
+.L1719:
 	strh	w19, [x20, 4]
-.L1718:
+.L1720:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, 2
 	ldr	x1, [x21, 3400]
@@ -11967,36 +11978,36 @@ ftl_low_format:
 	ldrh	w0, [x0, 40]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1725
+	cbz	w0, .L1727
 	bl	FtlMakeBbt
-.L1725:
+.L1727:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1726:
+.L1728:
 	ldrh	w2, [x1, 62]
 	cmp	w0, w2, lsl 7
-	blt	.L1727
+	blt	.L1729
 	ldrh	w21, [x1, 44]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1728:
+.L1730:
 	ldrh	w0, [x22, 46]
 	cmp	w0, w21
-	bhi	.L1729
+	bhi	.L1731
 	ldrh	w0, [x22, 36]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1730
-.L1734:
+	bge	.L1732
+.L1736:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1731:
+.L1733:
 	ldrh	w0, [x19, 44]
 	cmp	w0, w22
-	bhi	.L1735
+	bhi	.L1737
 	ldrh	w2, [x19, 36]
 	ldr	w1, [x19, 48]
 	ldrh	w0, [x19, 46]
@@ -12009,28 +12020,28 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1736
+	ble	.L1738
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2584]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2652]
-.L1736:
+.L1738:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 98]
-	cbz	w1, .L1738
+	cbz	w1, .L1740
 	ldrh	w5, [x0, 2652]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2652]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1738
+	bge	.L1740
 	add	w1, w1, 32
 	str	w4, [x0, 2584]
 	add	w1, w3, w1
 	strh	w1, [x0, 2652]
-.L1738:
+.L1740:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w22, -1
 	add	x21, x19, 2424
@@ -12066,20 +12077,20 @@ ftl_low_format:
 	strh	wzr, [x19, 2424]
 	str	wzr, [x19, 2580]
 	bl	ftl_memset
-.L1740:
+.L1742:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1741
+	cbnz	w1, .L1743
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1740
-.L1727:
+	b	.L1742
+.L1729:
 	ldr	x5, [x1, 3472]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -12089,8 +12100,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3480]
 	str	w4, [x2, x3]
-	b	.L1726
-.L1729:
+	b	.L1728
+.L1731:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -12098,8 +12109,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1728
-.L1730:
+	b	.L1730
+.L1732:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 136]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -12108,17 +12119,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 40]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 44]
-.L1732:
+.L1734:
 	ldrh	w0, [x21, 46]
 	cmp	w0, w19
-	bls	.L1734
+	bls	.L1736
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1732
-.L1735:
+	b	.L1734
+.L1737:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -12126,8 +12137,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1731
-.L1741:
+	b	.L1733
+.L1743:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -12147,20 +12158,20 @@ ftl_low_format:
 	strb	w1, [x19, 2480]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1742:
+.L1744:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1743
+	cbnz	w1, .L1745
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1742
-.L1743:
+	b	.L1744
+.L1745:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
@@ -12183,11 +12194,11 @@ ftl_low_format:
 	str	w0, [x19, 2620]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1744
+	cbnz	w0, .L1746
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1744:
+.L1746:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12212,12 +12223,12 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x3, [x2, 3992]
-	cbnz	x3, .L1753
+	cbnz	x3, .L1755
 	str	x0, [x2, 3992]
 	mov	w0, 0
 	str	x1, [x2, 4000]
 	ret
-.L1753:
+.L1755:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12236,38 +12247,38 @@ rk_sftl_vendor_storage_init:
 	stp	x25, x26, [sp, 64]
 	bl	ftl_malloc
 	str	x0, [x22, 4008]
-	cbz	x0, .L1760
+	cbz	x0, .L1762
 	mov	w26, 22084
 	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
 	movk	w26, 0x524b, lsl 16
-.L1758:
+.L1760:
 	ldr	x3, [x22, 3992]
 	mov	w1, 128
 	ldr	x2, [x22, 4008]
 	lsl	w0, w23, 7
 	blr	x3
 	mov	w21, w0
-	cbnz	w0, .L1756
+	cbnz	w0, .L1758
 	ldr	x19, [x22, 4008]
 	ldr	w0, [x19]
 	cmp	w0, w26
-	bne	.L1757
+	bne	.L1759
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1757
+	bne	.L1759
 	cmp	w0, w24
-	bls	.L1757
+	bls	.L1759
 	mov	w25, w23
 	mov	w24, w0
-.L1757:
+.L1759:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1758
-	cbz	w24, .L1759
+	bne	.L1760
+	cbz	w24, .L1761
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
@@ -12275,15 +12286,15 @@ rk_sftl_vendor_storage_init:
 	lsl	w0, w25, 7
 	blr	x3
 	mov	w21, w0
-	cbz	w0, .L1754
-.L1756:
+	cbz	w0, .L1756
+.L1758:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, -1
 	ldr	x0, [x20, 4008]
 	bl	kfree
 	str	xzr, [x20, 4008]
-	b	.L1754
-.L1759:
+	b	.L1756
+.L1761:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -12296,7 +12307,7 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1754:
+.L1756:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12304,9 +12315,9 @@ rk_sftl_vendor_storage_init:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1760:
+.L1762:
 	mov	w21, -12
-	b	.L1754
+	b	.L1756
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -12314,20 +12325,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR0+4008
 	ldr	x4, [x3, #:lo12:.LANCHOR0+4008]
-	cbz	x4, .L1768
+	cbz	x4, .L1770
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1765:
+.L1767:
 	cmp	w3, w6
-	bcc	.L1767
-.L1768:
+	bcc	.L1769
+.L1770:
 	mov	w0, -1
 	ret
-.L1767:
+.L1769:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1766
+	bne	.L1768
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -12345,9 +12356,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1766:
+.L1768:
 	add	w3, w3, 1
-	b	.L1765
+	b	.L1767
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -12363,7 +12374,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 4008]
-	cbz	x19, .L1788
+	cbz	x19, .L1790
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -12372,12 +12383,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1775:
+.L1777:
 	cmp	w20, w3
-	bcc	.L1783
+	bcc	.L1785
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1788
+	bhi	.L1790
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -12397,11 +12408,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1790
-.L1783:
+	b	.L1792
+.L1785:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1776
+	bne	.L1778
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -12409,17 +12420,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1777
+	bls	.L1779
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1788
+	bhi	.L1790
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1778:
+.L1780:
 	cmp	w20, w26
-	bcc	.L1779
+	bcc	.L1781
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -12436,7 +12447,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1790:
+.L1792:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR0
@@ -12455,7 +12466,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1773:
+.L1775:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12463,7 +12474,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1779:
+.L1781:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -12487,21 +12498,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1778
-.L1777:
+	b	.L1780
+.L1779:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1790
-.L1776:
+	b	.L1792
+.L1778:
 	add	w20, w20, 1
-	b	.L1775
-.L1788:
+	b	.L1777
+.L1790:
 	mov	w0, -1
-	b	.L1773
+	b	.L1775
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12515,19 +12526,19 @@ rk_sftl_vendor_storage_ioctl:
 	str	x21, [sp, 32]
 	mov	w21, w1
 	bl	ftl_malloc
-	cbz	x0, .L1805
+	cbz	x0, .L1807
 	mov	w1, 30209
 	mov	x19, x0
 	movk	w1, 0x4004, lsl 16
 	cmp	w21, w1
-	beq	.L1794
+	beq	.L1796
 	add	w1, w1, 1
 	cmp	w21, w1
-	beq	.L1795
-.L1815:
+	beq	.L1797
+.L1817:
 	mov	x20, -14
-	b	.L1793
-.L1794:
+	b	.L1795
+.L1796:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12540,34 +12551,34 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1801
+	cbz	x3, .L1803
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1815
+	cbnz	x0, .L1817
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L1799
-.L1800:
+	beq	.L1801
+.L1802:
 	mov	x20, -1
-.L1793:
+.L1795:
 	mov	x0, x19
 	bl	kfree
-.L1791:
+.L1793:
 	mov	x0, x20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1799:
+.L1801:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_read
 	cmn	w0, #1
-	beq	.L1800
+	beq	.L1802
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
@@ -12578,14 +12589,14 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1815
+	cbz	x3, .L1817
 	mov	x0, x20
 	mov	x1, x19
 	mov	x20, 0
 	bl	__arch_copy_to_user
-	cbz	x0, .L1793
-	b	.L1815
-.L1795:
+	cbz	x0, .L1795
+	b	.L1817
+.L1797:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12598,19 +12609,19 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1801
+	cbz	x3, .L1803
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1815
+	cbnz	x0, .L1817
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1800
+	bne	.L1802
 	ldrh	w2, [x19, 6]
 	cmp	w2, 4087
-	bhi	.L1800
+	bhi	.L1802
 	add	w2, w2, 8
 	mov	x0, x20
 	sxtw	x2, w2
@@ -12620,28 +12631,28 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1803
+	cbz	x3, .L1805
 	mov	x1, x20
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1815
+	cbnz	x0, .L1817
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1793
-.L1801:
-	str	xzr, [x19]
-	b	.L1815
+	b	.L1795
 .L1803:
+	str	xzr, [x19]
+	b	.L1817
+.L1805:
 	mov	w1, 0
 	mov	x0, x19
 	bl	memset
-	b	.L1815
-.L1805:
+	b	.L1817
+.L1807:
 	mov	x20, -1
-	b	.L1791
+	b	.L1793
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -13012,7 +13023,7 @@ power_up_flag:
 rkflash_vender_storage_dev:
 	.word	255
 	.zero	4
-	.xword	.LC118
+	.xword	.LC119
 	.xword	rk_sftl_vendor_storage_fops
 	.zero	56
 	.bss
@@ -13891,4 +13902,6 @@ gp_last_act_superblock:
 .LC117:
 	.string	"%s idb buffer alloc fail\n"
 .LC118:
+	.string	"%p %x %p %x\n"
+.LC119:
 	.string	"vendor_storage"
-- 
2.35.3

