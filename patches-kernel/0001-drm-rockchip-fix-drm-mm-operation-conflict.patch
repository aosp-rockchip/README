From cf2111c9fecb639f14b7aff5adfb5b8d27902907 Mon Sep 17 00:00:00 2001
From: Sandy Huang <hjc@rock-chips.com>
Date: Fri, 21 Feb 2020 08:54:46 +0800
Subject: [PATCH] drm/rockchip: fix drm mm operation conflict

the mm operation for logo memory will conflict with userspace
memory operation, so we add mm_lock to guaranteed no conflict.

Change-Id: If02310e3a9e48478124201edd94af38dd900944a
Signed-off-by: Sandy Huang <hjc@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_drm_drv.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
index df710e00b169..79fa20878871 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
@@ -214,7 +214,9 @@ void rockchip_free_loader_memory(struct drm_device *drm)
 	if (private->domain) {
 		iommu_unmap(private->domain, logo->dma_addr,
 			    logo->iommu_map_size);
+		mutex_lock(&private->mm_lock);
 		drm_mm_remove_node(&logo->mm);
+		mutex_unlock(&private->mm_lock);
 	} else {
 		dma_unmap_sg(drm->dev, logo->sgt->sgl,
 			     logo->sgt->nents, DMA_TO_DEVICE);
@@ -275,9 +277,11 @@ static int init_loader_memory(struct drm_device *drm_dev)
 
 	if (private->domain) {
 		memset(&logo->mm, 0, sizeof(logo->mm));
+		mutex_lock(&private->mm_lock);
 		ret = drm_mm_insert_node_generic(&private->mm, &logo->mm,
 						 size, PAGE_SIZE,
 						 0, 0);
+		mutex_unlock(&private->mm_lock);
 		if (ret < 0) {
 			DRM_ERROR("out of I/O virtual memory: %d\n", ret);
 			goto err_free_pages;
-- 
2.35.3

