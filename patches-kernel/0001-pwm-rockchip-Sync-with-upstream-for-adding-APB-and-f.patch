From 42881941a357b3f3aacc538597a9cedb198b36ce Mon Sep 17 00:00:00 2001
From: David Wu <david.wu@rock-chips.com>
Date: Tue, 8 Aug 2017 23:38:29 +0800
Subject: [PATCH] pwm: rockchip: Sync with upstream for adding APB and function
 both clocks support

New PWM module provides two individual clocks for APB clock and function
clock.

Signed-off-by: David Wu <david.wu@rock-chips.com>
Change-Id: I9f32de5734f9e66472ae5350023ffce9548d717d
---
 .../devicetree/bindings/pwm/pwm-rockchip.txt  |  4 +--
 drivers/pwm/pwm-rockchip.c                    | 25 +++++++++++--------
 2 files changed, 17 insertions(+), 12 deletions(-)

diff --git a/Documentation/devicetree/bindings/pwm/pwm-rockchip.txt b/Documentation/devicetree/bindings/pwm/pwm-rockchip.txt
index f944723128b8..bb2b8a3df68a 100644
--- a/Documentation/devicetree/bindings/pwm/pwm-rockchip.txt
+++ b/Documentation/devicetree/bindings/pwm/pwm-rockchip.txt
@@ -12,9 +12,9 @@ Required properties:
    - For older hardware (rk2928, rk3066, rk3188, rk3228, rk3288, rk3399):
      - There is one clock that's used both to derive the functional clock
        for the device and as the bus clock.
-   - For newer hardware (rk3328): specified by name
+   - For newer hardware (rk3328 and future socs): specified by name
      - "pwm": This is used to derive the functional clock.
-     - "pclk": This is the bus clock.
+     - "pclk": This is the APB bus clock.
  - #pwm-cells: must be 2 (rk2928) or 3 (rk3288). See pwm.txt in this directory
    for a description of the cell format.
 
diff --git a/drivers/pwm/pwm-rockchip.c b/drivers/pwm/pwm-rockchip.c
index de315617e44e..93182f56f8be 100644
--- a/drivers/pwm/pwm-rockchip.c
+++ b/drivers/pwm/pwm-rockchip.c
@@ -360,23 +360,28 @@ static int rockchip_pwm_probe(struct platform_device *pdev)
 		return PTR_ERR(pc->base);
 
 	pc->clk = devm_clk_get(&pdev->dev, "pwm");
-	count = of_property_count_strings(pdev->dev.of_node, "clock-names");
+	if (IS_ERR(pc->clk)) {
+		pc->clk = devm_clk_get(&pdev->dev, NULL);
+		if (IS_ERR(pc->clk)) {
+			ret = PTR_ERR(pc->clk);
+			if (ret != -EPROBE_DEFER)
+				dev_err(&pdev->dev, "Can't get bus clk: %d\n",
+					ret);
+			return ret;
+		}
+	}
+
+	count = of_count_phandle_with_args(pdev->dev.of_node,
+					   "clocks", "#clock-cells");
 	if (count == 2)
 		pc->pclk = devm_clk_get(&pdev->dev, "pclk");
 	else
 		pc->pclk = pc->clk;
 
-	if (IS_ERR(pc->clk)) {
-		ret = PTR_ERR(pc->clk);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Can't get bus clk: %d\n", ret);
-		return ret;
-	}
-
 	if (IS_ERR(pc->pclk)) {
 		ret = PTR_ERR(pc->pclk);
 		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Can't get periph clk: %d\n", ret);
+			dev_err(&pdev->dev, "Can't get APB clk: %d\n", ret);
 		return ret;
 	}
 
@@ -388,7 +393,7 @@ static int rockchip_pwm_probe(struct platform_device *pdev)
 
 	ret = clk_prepare(pc->pclk);
 	if (ret) {
-		dev_err(&pdev->dev, "Can't prepare periph clk: %d\n", ret);
+		dev_err(&pdev->dev, "Can't prepare APB clk: %d\n", ret);
 		goto err_clk;
 	}
 
-- 
2.35.3

