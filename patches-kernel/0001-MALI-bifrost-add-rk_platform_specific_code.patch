From 7481e8328c0986d3177bfc30b5f7dd568d91317b Mon Sep 17 00:00:00 2001
From: Zhen Chen <chenzhen@rock-chips.com>
Date: Wed, 17 Jan 2018 14:48:17 +0800
Subject: [PATCH] MALI: bifrost: add rk_platform_specific_code

Copyed from midgard/platform/rk at commit 77a680a3.

Change-Id: Iaa218e2183e5fc6ef34f50678fc34376a54a29a4
Signed-off-by: Zhen Chen <chenzhen@rock-chips.com>
---
 drivers/gpu/arm/bifrost/platform/rk/Kbuild    |  25 +
 .../gpu/arm/bifrost/platform/rk/custom_log.h  | 192 +++++
 .../platform/rk/mali_kbase_config_platform.h  |  88 +++
 .../platform/rk/mali_kbase_config_rk.c        | 721 ++++++++++++++++++
 .../arm/bifrost/platform/rk/mali_kbase_rk.h   |  62 ++
 5 files changed, 1088 insertions(+)
 create mode 100755 drivers/gpu/arm/bifrost/platform/rk/Kbuild
 create mode 100755 drivers/gpu/arm/bifrost/platform/rk/custom_log.h
 create mode 100755 drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_platform.h
 create mode 100755 drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_rk.c
 create mode 100755 drivers/gpu/arm/bifrost/platform/rk/mali_kbase_rk.h

diff --git a/drivers/gpu/arm/bifrost/platform/rk/Kbuild b/drivers/gpu/arm/bifrost/platform/rk/Kbuild
new file mode 100755
index 000000000000..700fd4341da5
--- /dev/null
+++ b/drivers/gpu/arm/bifrost/platform/rk/Kbuild
@@ -0,0 +1,25 @@
+#
+# (C) COPYRIGHT 2012-2013 ARM Limited. All rights reserved.
+#
+# This program is free software and is provided to you under the terms of the
+# GNU General Public License version 2 as published by the Free Software
+# Foundation, and any use by you of this program is subject to the terms
+# of such GNU licence.
+#
+# A copy of the licence is included with the program, and can also be obtained
+# from Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+# Boston, MA  02110-1301, USA.
+#
+#
+
+ccflags-y += -I$(srctree)/drivers/staging/android
+
+ifeq ($(CONFIG_MALI_MIDGARD),y)
+obj-y += mali_kbase_config_rk.o
+# obj-y += mali_kbase_dvfs.o
+# obj-y += mali_kbase_platform.o
+else ifeq ($(CONFIG_MALI_MIDGARD),m)
+SRC += platform/rk/mali_kbase_config_rk.c
+# SRC += platform/rk/mali_kbase_dvfs.c
+# SRC += platform/rk/mali_kbase_platform.c
+endif
diff --git a/drivers/gpu/arm/bifrost/platform/rk/custom_log.h b/drivers/gpu/arm/bifrost/platform/rk/custom_log.h
new file mode 100755
index 000000000000..5de70ee13d25
--- /dev/null
+++ b/drivers/gpu/arm/bifrost/platform/rk/custom_log.h
@@ -0,0 +1,192 @@
+/*
+ * (C) COPYRIGHT RockChip Limited. All rights reserved.
+ *
+ * This program is free software and is provided to you under the terms of the
+ * GNU General Public License version 2 as published by the Free Software
+ * Foundation, and any use by you of this program is subject to the terms
+ * of such GNU licence.
+ */
+
+#ifndef __CUSTOM_LOG_H__
+#define __CUSTOM_LOG_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* -----------------------------------------------------------------------------
+ *  Include Files
+ * -----------------------------------------------------------------------------
+ */
+#include <linux/kernel.h>
+#include <linux/printk.h>
+
+/* -----------------------------------------------------------------------------
+ *  Macros Definition
+ * -----------------------------------------------------------------------------
+ */
+
+/** 若下列 macro 有被定义, 才 使能 log 输出. */
+/* #define ENABLE_DEBUG_LOG */
+
+/*----------------------------------------------------------------------------*/
+
+#ifdef ENABLE_VERBOSE_LOG
+/** Verbose log. */
+#define V(fmt, args...) \
+	pr_debug("V : [File] : %s; [Line] : %d; [Func] : %s(); " fmt \
+			"\n",	\
+		__FILE__,	\
+		__LINE__,	\
+		__func__,	\
+		## args)
+#else
+#define  V(...)  ((void)0)
+#endif
+
+#ifdef ENABLE_DEBUG_LOG
+/** Debug log. */
+#define D(fmt, args...) \
+	pr_info("D : [File] : %s; [Line] : %d; [Func] : %s(); " fmt \
+			"\n",	\
+		__FILE__,	\
+		__LINE__,	\
+		__func__,	\
+		## args)
+#else
+#define  D(...)  ((void)0)
+#endif
+
+#define I(fmt, args...) \
+	pr_info("I : [File] : %s; [Line] : %d; [Func] : %s(); " fmt \
+			"\n", \
+		__FILE__, \
+		__LINE__, \
+		__func__, \
+		## args)
+
+#define W(fmt, args...) \
+	pr_warn("W : [File] : %s; [Line] : %d; [Func] : %s(); " \
+			fmt "\n", \
+		__FILE__, \
+		__LINE__, \
+		__func__, \
+		## args)
+
+#define E(fmt, args...) \
+	pr_err("E : [File] : %s; [Line] : %d; [Func] : %s(); " fmt \
+			"\n", \
+		__FILE__, \
+		__LINE__, \
+		__func__, \
+		## args)
+
+/*-------------------------------------------------------*/
+
+/** 使用 D(), 以十进制的形式打印变量 'var' 的 value. */
+#define D_DEC(var)  D(#var " = %d.", var)
+
+#define E_DEC(var)  E(#var " = %d.", var)
+
+/** 使用 D(), 以十六进制的形式打印变量 'var' 的 value. */
+#define D_HEX(var)  D(#var " = 0x%x.", var)
+
+#define E_HEX(var)  E(#var " = 0x%x.", var)
+
+/**
+ * 使用 D(), 以十六进制的形式,
+ * 打印指针类型变量 'ptr' 的 value.
+ */
+#define D_PTR(ptr)  D(#ptr " = %p.", ptr)
+
+#define E_PTR(ptr)  E(#ptr " = %p.", ptr)
+
+/** 使用 D(), 打印 char 字串. */
+#define D_STR(p_str) \
+do { \
+	if (!p_str) { \
+		D(#p_str " = NULL."); \
+	else \
+		D(#p_str " = '%s'.", p_str); \
+} while (0)
+
+#define E_STR(p_str) \
+do { \
+	if (!p_str) \
+		E(#p_str " = NULL."); \
+	else \
+		E(#p_str " = '%s'.", p_str); \
+} while (0)
+
+#ifdef ENABLE_DEBUG_LOG
+/**
+ * log 从 'p_start' 地址开始的 'len' 个字节的数据.
+ */
+#define D_MEM(p_start, len) \
+do { \
+	int i = 0; \
+	char *p = (char *)(p_start); \
+	D("dump memory from addr of '" #p_start "', from %p, length %d' : ", \
+		(p_start), \
+		(len)); \
+	pr_debug("\t\t"); \
+	for (i = 0; i < (len); i++) \
+		pr_debug("0x%02x, ", p[i]); \
+	pr_debug("\n"); \
+} while (0)
+#else
+#define  D_MEM(...)  ((void)0)
+#endif
+
+/*-------------------------------------------------------*/
+
+/**
+ * 在特定条件下, 判定 error 发生,
+ * 将变量 'ret_var' 设置 'err_code',
+ * log 输出对应的 Error Caution,
+ * 然后跳转 'label' 指定的代码处执行.
+ * @param msg
+ *	纯字串形式的提示信息.
+ * @param ret_var
+ *	标识函数执行状态或者结果的变量,
+ *	将被设置具体的 Error Code.
+ *	通常是 'ret' or 'result'.
+ * @param err_code
+ *	表征特定 error 的常数标识,
+ *	通常是 宏的形态.
+ * @param label
+ *      程序将要跳转到的错误处理代码的标号,
+ *      通常就是 'EXIT'.
+ * @param args...
+ *      对应 'msg_fmt' 实参中,
+ *      '%s', '%d', ... 等转换说明符的具体可变长实参.
+ */
+#define SET_ERROR_AND_JUMP(msg_fmt, ret_var, err_code, label, args...) \
+do { \
+	E("To set '" #ret_var "' to %d('" #err_code "'), because : " msg_fmt, \
+		(err_code), \
+		## args); \
+	(ret_var) = (err_code); \
+	goto label; \
+} while (0)
+
+/* -----------------------------------------------------------------------------
+ *  Types and Structures Definition
+ * -----------------------------------------------------------------------------
+ */
+
+/* -----------------------------------------------------------------------------
+ *  Global Functions' Prototype
+ * -----------------------------------------------------------------------------
+ */
+
+/* -----------------------------------------------------------------------------
+ *  Inline Functions Implementation
+ * -----------------------------------------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __CUSTOM_LOG_H__ */
diff --git a/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_platform.h b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_platform.h
new file mode 100755
index 000000000000..07c5b6f8a760
--- /dev/null
+++ b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_platform.h
@@ -0,0 +1,88 @@
+/*
+ *
+ * (C) COPYRIGHT 2014-2015 ARM Limited. All rights reserved.
+ *
+ * This program is free software and is provided to you under the terms of the
+ * GNU General Public License version 2 as published by the Free Software
+ * Foundation, and any use by you of this program is subject to the terms
+ * of such GNU licence.
+ */
+
+/**
+ * @file mali_kbase_config_platform.h
+ * 声明 platform_config_of_rk (platform_rk 的 platform_config).
+ */
+
+/**
+ * Maximum frequency GPU will be clocked at.
+ * Given in kHz.
+ * This must be specified as there is no default value.
+ *
+ * Attached value: number in kHz
+ * Default value: NA
+ */
+#define GPU_FREQ_KHZ_MAX (5000)
+
+/**
+ * Minimum frequency GPU will be clocked at.
+ * Given in kHz.
+ * This must be specified as there is no default value.
+ *
+ * Attached value: number in kHz
+ * Default value: NA
+ */
+#define GPU_FREQ_KHZ_MIN (5000)
+
+/**
+ * CPU_SPEED_FUNC
+ * - A pointer to a function that calculates the CPU clock
+ *
+ * CPU clock speed of the platform is in MHz
+ * - see kbase_cpu_clk_speed_func for the function prototype.
+ *
+ * Attached value: A kbase_cpu_clk_speed_func.
+ * Default Value:  NA
+ */
+#define CPU_SPEED_FUNC (NULL)
+
+/**
+ * GPU_SPEED_FUNC
+ * - A pointer to a function that calculates the GPU clock
+ *
+ * GPU clock speed of the platform in MHz
+ * - see kbase_gpu_clk_speed_func for the function prototype.
+ *
+ * Attached value: A kbase_gpu_clk_speed_func.
+ * Default Value:  NA
+ */
+#define GPU_SPEED_FUNC (NULL)
+
+/**
+ * Power management configuration
+ *
+ * Attached value:
+ *	pointer to @ref kbase_pm_callback_conf
+ * Default value:
+ *	See @ref kbase_pm_callback_conf
+ */
+#define POWER_MANAGEMENT_CALLBACKS (&pm_callbacks)
+extern struct kbase_pm_callback_conf pm_callbacks;
+
+/**
+ * Platform specific configuration functions
+ *
+ * Attached value:
+ *	pointer to @ref kbase_platform_funcs_conf
+ * Default value:
+ *	See @ref kbase_platform_funcs_conf
+ */
+#define PLATFORM_FUNCS (&platform_funcs)
+extern struct kbase_platform_funcs_conf platform_funcs;
+
+/**
+ * Secure mode switch
+ *
+ * Attached value: pointer to @ref kbase_secure_ops
+ */
+#define SECURE_CALLBACKS (NULL)
+
diff --git a/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_rk.c b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_rk.c
new file mode 100755
index 000000000000..34fd896c6489
--- /dev/null
+++ b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_config_rk.c
@@ -0,0 +1,721 @@
+/*
+ * (C) COPYRIGHT RockChip Limited. All rights reserved.
+ *
+ * This program is free software and is provided to you under the terms of the
+ * GNU General Public License version 2 as published by the Free Software
+ * Foundation, and any use by you of this program is subject to the terms
+ * of such GNU licence.
+ */
+
+/* #define ENABLE_DEBUG_LOG */
+#include "custom_log.h"
+
+#include <mali_kbase.h>
+#include <mali_kbase_defs.h>
+#include <mali_kbase_config.h>
+#include <backend/gpu/mali_kbase_pm_internal.h>
+
+#include <linux/pm_runtime.h>
+#include <linux/suspend.h>
+#include <linux/of.h>
+#include <linux/delay.h>
+#include <linux/nvmem-consumer.h>
+#include <linux/soc/rockchip/pvtm.h>
+#include <linux/thermal.h>
+
+#include "mali_kbase_rk.h"
+
+#define MAX_PROP_NAME_LEN	3
+#define LEAKAGE_TABLE_END	~1
+#define LEAKAGE_INVALID		0xff
+
+struct pvtm_config {
+	unsigned int freq;
+	unsigned int volt;
+	unsigned int ch[2];
+	unsigned int sample_time;
+	unsigned int num;
+	unsigned int err;
+	unsigned int ref_temp;
+	int temp_prop[2];
+	const char *tz_name;
+	struct thermal_zone_device *tz;
+};
+
+struct volt_sel_table {
+	int min;
+	int max;
+	int sel;
+};
+
+/**
+ * @file mali_kbase_config_rk.c
+ * 对 platform_config_of_rk 的具体实现.
+ *
+ * mali_device_driver 包含两部分 :
+ *      .DP : platform_dependent_part_in_mdd :
+ *		依赖 platform 部分,
+ *		源码在 <mdd_src_dir>/platform/<platform_name>/
+ *		在 mali_device_driver 内部,
+ *			记为 platform_dependent_part,
+ *			也被记为 platform_specific_code.
+ *      .DP : common_parts_in_mdd :
+ *		arm 实现的通用的部分,
+ *		源码在 <mdd_src_dir>/ 下.
+ *		在 mali_device_driver 内部, 记为 common_parts.
+ */
+
+/*---------------------------------------------------------------------------*/
+
+#ifdef CONFIG_REGULATOR
+static int rk_pm_enable_regulator(struct kbase_device *kbdev);
+static void rk_pm_disable_regulator(struct kbase_device *kbdev);
+#else
+static inline int rk_pm_enable_regulator(struct kbase_device *kbdev)
+{
+	return 0;
+}
+
+static inline void rk_pm_disable_regulator(struct kbase_device *kbdev)
+{
+}
+#endif
+
+static int rk_pm_enable_clk(struct kbase_device *kbdev);
+
+static void rk_pm_disable_clk(struct kbase_device *kbdev);
+
+static int kbase_platform_rk_create_sysfs_files(struct device *dev);
+
+static void kbase_platform_rk_remove_sysfs_files(struct device *dev);
+
+/*---------------------------------------------------------------------------*/
+
+static void rk_pm_power_off_delay_work(struct work_struct *work)
+{
+	struct rk_context *platform =
+		container_of(to_delayed_work(work), struct rk_context, work);
+	struct kbase_device *kbdev = platform->kbdev;
+
+	if (!platform->is_powered) {
+		D("mali_dev is already powered off.");
+		return;
+	}
+
+	if (pm_runtime_enabled(kbdev->dev)) {
+		D("to put_sync_suspend mali_dev.");
+		pm_runtime_put_sync_suspend(kbdev->dev);
+	}
+
+	rk_pm_disable_regulator(kbdev);
+
+	platform->is_powered = false;
+	KBASE_TIMELINE_GPU_POWER(kbdev, 0);
+	wake_unlock(&platform->wake_lock);
+}
+
+static int kbase_platform_rk_init(struct kbase_device *kbdev)
+{
+	int ret = 0;
+	struct rk_context *platform;
+
+	platform = kzalloc(sizeof(*platform), GFP_KERNEL);
+	if (!platform) {
+		E("err.");
+		return -ENOMEM;
+	}
+
+	platform->is_powered = false;
+	platform->kbdev = kbdev;
+
+	platform->delay_ms = 200;
+	if (of_property_read_u32(kbdev->dev->of_node, "power-off-delay-ms",
+				 &platform->delay_ms))
+		W("power-off-delay-ms not available.");
+
+	platform->power_off_wq = create_freezable_workqueue("gpu_power_off_wq");
+	if (!platform->power_off_wq) {
+		E("couldn't create workqueue");
+		ret = -ENOMEM;
+		goto err_wq;
+	}
+	INIT_DEFERRABLE_WORK(&platform->work, rk_pm_power_off_delay_work);
+
+	wake_lock_init(&platform->wake_lock, WAKE_LOCK_SUSPEND, "gpu");
+
+	platform->utilisation_period = DEFAULT_UTILISATION_PERIOD_IN_MS;
+
+	ret = kbase_platform_rk_create_sysfs_files(kbdev->dev);
+	if (ret) {
+		E("fail to create sysfs_files. ret = %d.", ret);
+		goto err_sysfs_files;
+	}
+
+	kbdev->platform_context = (void *)platform;
+	pm_runtime_enable(kbdev->dev);
+
+	return 0;
+
+err_sysfs_files:
+	wake_lock_destroy(&platform->wake_lock);
+	destroy_workqueue(platform->power_off_wq);
+err_wq:
+	return ret;
+}
+
+static void kbase_platform_rk_term(struct kbase_device *kbdev)
+{
+	struct rk_context *platform =
+		(struct rk_context *)kbdev->platform_context;
+
+	pm_runtime_disable(kbdev->dev);
+	kbdev->platform_context = NULL;
+
+	if (platform) {
+		wake_lock_destroy(&platform->wake_lock);
+		destroy_workqueue(platform->power_off_wq);
+		platform->is_powered = false;
+		platform->kbdev = NULL;
+		kfree(platform);
+	}
+	kbase_platform_rk_remove_sysfs_files(kbdev->dev);
+}
+
+struct kbase_platform_funcs_conf platform_funcs = {
+	.platform_init_func = &kbase_platform_rk_init,
+	.platform_term_func = &kbase_platform_rk_term,
+};
+
+/*---------------------------------------------------------------------------*/
+
+static int rk_pm_callback_runtime_on(struct kbase_device *kbdev)
+{
+	return 0;
+}
+
+static void rk_pm_callback_runtime_off(struct kbase_device *kbdev)
+{
+}
+
+static int rk_pm_callback_power_on(struct kbase_device *kbdev)
+{
+	int ret = 1; /* Assume GPU has been powered off */
+	int err = 0;
+	struct rk_context *platform = get_rk_context(kbdev);
+
+	cancel_delayed_work_sync(&platform->work);
+
+	err = rk_pm_enable_clk(kbdev);
+	if (err) {
+		E("failed to enable clk: %d", err);
+		return err;
+	}
+
+	if (platform->is_powered) {
+		D("mali_device is already powered.");
+		return 0;
+	}
+
+	/* we must enable vdd_gpu before pd_gpu_in_chip. */
+	err = rk_pm_enable_regulator(kbdev);
+	if (err) {
+		E("fail to enable regulator, err : %d.", err);
+		return err;
+	}
+
+	/* 若 mali_dev 的 runtime_pm 是 enabled 的, 则... */
+	if (pm_runtime_enabled(kbdev->dev)) {
+		D("to resume mali_dev syncly.");
+		/* 对 pd_in_chip 的 on 操作,
+		 * 将在 pm_domain 的 runtime_pm_callbacks 中完成.
+		 */
+		err = pm_runtime_get_sync(kbdev->dev);
+		if (err < 0) {
+			E("failed to runtime resume device: %d.", err);
+			return err;
+		} else if (err == 1) { /* runtime_pm_status is still active */
+			D("chip has NOT been powered off, no need to re-init.");
+			ret = 0;
+		}
+	}
+
+	platform->is_powered = true;
+	KBASE_TIMELINE_GPU_POWER(kbdev, 1);
+	wake_lock(&platform->wake_lock);
+
+	return ret;
+}
+
+static void rk_pm_callback_power_off(struct kbase_device *kbdev)
+{
+	struct rk_context *platform = get_rk_context(kbdev);
+
+	rk_pm_disable_clk(kbdev);
+	queue_delayed_work(platform->power_off_wq, &platform->work,
+			   msecs_to_jiffies(platform->delay_ms));
+}
+
+int rk_kbase_device_runtime_init(struct kbase_device *kbdev)
+{
+	return 0;
+}
+
+void rk_kbase_device_runtime_disable(struct kbase_device *kbdev)
+{
+}
+
+struct kbase_pm_callback_conf pm_callbacks = {
+	.power_on_callback = rk_pm_callback_power_on,
+	.power_off_callback = rk_pm_callback_power_off,
+#ifdef CONFIG_PM
+	.power_runtime_init_callback = rk_kbase_device_runtime_init,
+	.power_runtime_term_callback = rk_kbase_device_runtime_disable,
+	.power_runtime_on_callback = rk_pm_callback_runtime_on,
+	.power_runtime_off_callback = rk_pm_callback_runtime_off,
+#else				/* CONFIG_PM */
+	.power_runtime_init_callback = NULL,
+	.power_runtime_term_callback = NULL,
+	.power_runtime_on_callback = NULL,
+	.power_runtime_off_callback = NULL,
+#endif				/* CONFIG_PM */
+};
+
+int kbase_platform_early_init(void)
+{
+	/* Nothing needed at this stage */
+	return 0;
+}
+
+/*---------------------------------------------------------------------------*/
+
+void kbase_platform_rk_shutdown(struct kbase_device *kbdev)
+{
+	I("to make vdd_gpu enabled for turning off pd_gpu in pm_framework.");
+	rk_pm_enable_regulator(kbdev);
+}
+
+/*---------------------------------------------------------------------------*/
+
+#ifdef CONFIG_REGULATOR
+static int rk_pm_enable_regulator(struct kbase_device *kbdev)
+{
+	int ret = 0;
+
+	if (!kbdev->regulator) {
+		W("no mali regulator control, no need to enable.");
+		goto EXIT;
+	}
+
+	D("to enable regulator.");
+	ret = regulator_enable(kbdev->regulator);
+	if (ret) {
+		E("fail to enable regulator, ret : %d.", ret);
+		goto EXIT;
+	}
+
+EXIT:
+	return ret;
+}
+
+static void rk_pm_disable_regulator(struct kbase_device *kbdev)
+{
+	if (!(kbdev->regulator)) {
+		W("no mali regulator control, no need to disable.");
+		return;
+	}
+
+	D("to disable regulator.");
+	regulator_disable(kbdev->regulator);
+}
+#endif
+
+static int rk_pm_enable_clk(struct kbase_device *kbdev)
+{
+	int err = 0;
+
+	if (!(kbdev->clock)) {
+		W("no mali clock control, no need to enable.");
+	} else {
+		D("to enable clk.");
+		err = clk_enable(kbdev->clock);
+		if (err)
+			E("failed to enable clk: %d.", err);
+	}
+
+	return err;
+}
+
+static void rk_pm_disable_clk(struct kbase_device *kbdev)
+{
+	if (!(kbdev->clock)) {
+		W("no mali clock control, no need to disable.");
+	} else {
+		D("to disable clk.");
+		clk_disable(kbdev->clock);
+	}
+}
+
+/*---------------------------------------------------------------------------*/
+
+static ssize_t utilisation_period_show(struct device *dev,
+				       struct device_attribute *attr,
+				       char *buf)
+{
+	struct kbase_device *kbdev = dev_get_drvdata(dev);
+	struct rk_context *platform = get_rk_context(kbdev);
+	ssize_t ret = 0;
+
+	ret += snprintf(buf, PAGE_SIZE, "%u\n", platform->utilisation_period);
+
+	return ret;
+}
+
+static ssize_t utilisation_period_store(struct device *dev,
+					struct device_attribute *attr,
+					const char *buf,
+					size_t count)
+{
+	struct kbase_device *kbdev = dev_get_drvdata(dev);
+	struct rk_context *platform = get_rk_context(kbdev);
+	int ret = 0;
+
+	ret = kstrtouint(buf, 0, &platform->utilisation_period);
+	if (ret) {
+		E("invalid input period : %s.", buf);
+		return ret;
+	}
+	D("set utilisation_period to '%d'.", platform->utilisation_period);
+
+	return count;
+}
+
+static ssize_t utilisation_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct kbase_device *kbdev = dev_get_drvdata(dev);
+	struct rk_context *platform = get_rk_context(kbdev);
+	ssize_t ret = 0;
+	unsigned long period_in_us = platform->utilisation_period * 1000;
+	unsigned long total_time;
+	unsigned long busy_time;
+	unsigned long utilisation;
+
+	kbase_pm_reset_dvfs_utilisation(kbdev);
+	usleep_range(period_in_us, period_in_us + 100);
+	kbase_pm_get_dvfs_utilisation(kbdev, &total_time, &busy_time);
+	/* 'devfreq_dev_profile' instance registered to devfreq
+	 * also uses kbase_pm_reset_dvfs_utilisation
+	 * and kbase_pm_get_dvfs_utilisation.
+	 * it's better to cat this file when DVFS is disabled.
+	 */
+	D("total_time : %lu, busy_time : %lu.", total_time, busy_time);
+
+	utilisation = busy_time * 100 / total_time;
+	ret += snprintf(buf, PAGE_SIZE, "%ld\n", utilisation);
+
+	return ret;
+}
+
+static DEVICE_ATTR_RW(utilisation_period);
+static DEVICE_ATTR_RO(utilisation);
+
+static int kbase_platform_rk_create_sysfs_files(struct device *dev)
+{
+	int ret = 0;
+
+	ret = device_create_file(dev, &dev_attr_utilisation_period);
+	if (ret) {
+		E("fail to create sysfs file 'utilisation_period'.");
+		goto out;
+	}
+
+	ret = device_create_file(dev, &dev_attr_utilisation);
+	if (ret) {
+		E("fail to create sysfs file 'utilisation'.");
+		goto remove_utilisation_period;
+	}
+
+	return 0;
+
+remove_utilisation_period:
+	device_remove_file(dev, &dev_attr_utilisation_period);
+out:
+	return ret;
+}
+
+static void kbase_platform_rk_remove_sysfs_files(struct device *dev)
+{
+	device_remove_file(dev, &dev_attr_utilisation_period);
+	device_remove_file(dev, &dev_attr_utilisation);
+}
+
+static int rockchip_get_efuse_value(struct device_node *np, char *porp_name,
+				    int *value)
+{
+	struct nvmem_cell *cell;
+	unsigned char *buf;
+	size_t len;
+
+	cell = of_nvmem_cell_get(np, porp_name);
+	if (IS_ERR(cell))
+		return PTR_ERR(cell);
+
+	buf = (unsigned char *)nvmem_cell_read(cell, &len);
+
+	nvmem_cell_put(cell);
+
+	if (IS_ERR(buf))
+		return PTR_ERR(buf);
+
+	if (buf[0] == LEAKAGE_INVALID)
+		return -EINVAL;
+
+	*value = buf[0];
+
+	kfree(buf);
+
+	return 0;
+}
+
+static int rockchip_get_volt_sel_table(struct device_node *np, char *porp_name,
+				       struct volt_sel_table **table)
+{
+	struct volt_sel_table *sel_table;
+	const struct property *prop;
+	int count, i;
+
+	prop = of_find_property(np, porp_name, NULL);
+	if (!prop)
+		return -EINVAL;
+
+	if (!prop->value)
+		return -ENODATA;
+
+	count = of_property_count_u32_elems(np, porp_name);
+	if (count < 0)
+		return -EINVAL;
+
+	if (count % 3)
+		return -EINVAL;
+
+	sel_table = kzalloc(sizeof(*sel_table) * (count / 3 + 1), GFP_KERNEL);
+	if (!sel_table)
+		return -ENOMEM;
+
+	for (i = 0; i < count / 3; i++) {
+		of_property_read_u32_index(np, porp_name, 3 * i,
+					   &sel_table[i].min);
+		of_property_read_u32_index(np, porp_name, 3 * i + 1,
+					   &sel_table[i].max);
+		of_property_read_u32_index(np, porp_name, 3 * i + 2,
+					   &sel_table[i].sel);
+	}
+	sel_table[i].min = 0;
+	sel_table[i].max = 0;
+	sel_table[i].sel = LEAKAGE_TABLE_END;
+
+	*table = sel_table;
+
+	return 0;
+}
+
+static int rockchip_get_volt_sel(struct device_node *np, char *name,
+				 int value, int *sel)
+{
+	struct volt_sel_table *table;
+	int i, j = -1, ret;
+
+	ret = rockchip_get_volt_sel_table(np, name, &table);
+	if (ret)
+		return -EINVAL;
+
+	for (i = 0; table[i].sel != LEAKAGE_TABLE_END; i++) {
+		if (value >= table[i].min)
+			j = i;
+	}
+	if (j != -1)
+		*sel = table[j].sel;
+	else
+		ret = -EINVAL;
+
+	kfree(table);
+
+	return ret;
+}
+
+static int rockchip_parse_pvtm_config(struct device_node *np,
+				      struct pvtm_config *pvtm)
+{
+	if (!of_find_property(np, "rockchip,pvtm-voltage-sel", NULL))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-freq", &pvtm->freq))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-volt", &pvtm->volt))
+		return -EINVAL;
+	if (of_property_read_u32_array(np, "rockchip,pvtm-ch", pvtm->ch, 2))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-sample-time",
+				 &pvtm->sample_time))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-number", &pvtm->num))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-error", &pvtm->err))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-ref-temp", &pvtm->ref_temp))
+		return -EINVAL;
+	if (of_property_read_u32_array(np, "rockchip,pvtm-temp-prop",
+				       pvtm->temp_prop, 2))
+		return -EINVAL;
+	if (of_property_read_string(np, "rockchip,pvtm-thermal-zone",
+				    &pvtm->tz_name))
+		return -EINVAL;
+	pvtm->tz = thermal_zone_get_zone_by_name(pvtm->tz_name);
+	if (IS_ERR(pvtm->tz))
+		return -EINVAL;
+	if (!pvtm->tz->ops->get_temp)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int rockchip_get_pvtm_specific_value(struct device *dev,
+					    struct device_node *np,
+					    struct clk *clk,
+					    struct regulator *reg,
+					    int *target_value)
+{
+	struct pvtm_config *pvtm;
+	unsigned long old_freq;
+	unsigned int old_volt;
+	int cur_temp, diff_temp;
+	int cur_value, total_value, avg_value, diff_value;
+	int min_value, max_value;
+	int ret = 0, i = 0, retry = 2;
+
+	pvtm = kzalloc(sizeof(*pvtm), GFP_KERNEL);
+	if (!pvtm)
+		return -ENOMEM;
+
+	ret = rockchip_parse_pvtm_config(np, pvtm);
+	if (ret)
+		goto pvtm_value_out;
+
+	old_freq = clk_get_rate(clk);
+	old_volt = regulator_get_voltage(reg);
+
+	/*
+	 * Set pvtm_freq to the lowest frequency in dts,
+	 * so change frequency first.
+	 */
+	ret = clk_set_rate(clk, pvtm->freq * 1000);
+	if (ret) {
+		dev_err(dev, "Failed to set pvtm freq\n");
+		goto pvtm_value_out;
+	}
+
+	ret = regulator_set_voltage(reg, pvtm->volt, pvtm->volt);
+	if (ret) {
+		dev_err(dev, "Failed to set pvtm_volt\n");
+		goto restore_clk;
+	}
+
+	/* The first few values may be fluctuant, if error is too big, retry*/
+	while (retry--) {
+		total_value = 0;
+		min_value = INT_MAX;
+		max_value = 0;
+
+		for (i = 0; i < pvtm->num; i++) {
+			cur_value = rockchip_get_pvtm_value(pvtm->ch[0],
+							    pvtm->ch[1],
+							    pvtm->sample_time);
+			if (!cur_value)
+				goto resetore_volt;
+			if (cur_value < min_value)
+				min_value = cur_value;
+			if (cur_value > max_value)
+				max_value = cur_value;
+			total_value += cur_value;
+		}
+		if (max_value - min_value < pvtm->err)
+			break;
+	}
+	avg_value = total_value / pvtm->num;
+
+	/*
+	 * As pvtm is influenced by temperature, compute difference between
+	 * current temperature and reference temperature
+	 */
+	pvtm->tz->ops->get_temp(pvtm->tz, &cur_temp);
+	diff_temp = (cur_temp / 1000 - pvtm->ref_temp);
+	diff_value = diff_temp *
+		(diff_temp < 0 ? pvtm->temp_prop[0] : pvtm->temp_prop[1]);
+	*target_value = avg_value + diff_value;
+
+	dev_info(dev, "temp=%d, pvtm=%d (%d + %d)\n",
+		 cur_temp, *target_value, avg_value, diff_value);
+
+resetore_volt:
+	regulator_set_voltage(reg, old_volt, old_volt);
+restore_clk:
+	clk_set_rate(clk, old_freq);
+pvtm_value_out:
+	kfree(pvtm);
+
+	return ret;
+}
+
+void kbase_platform_rk_set_opp_info(struct kbase_device *kbdev)
+{
+	struct device_node *np;
+	char name[MAX_PROP_NAME_LEN];
+	int pvmt_value, leakage;
+	int lkg_volt_sel, pvtm_volt_sel, volt_sel = -1;
+	int err = 0;
+
+	if (!kbdev)
+		return;
+
+	if (IS_ERR_OR_NULL(kbdev->regulator))
+		return;
+	if (IS_ERR_OR_NULL(kbdev->clock))
+		return;
+
+	np = of_parse_phandle(kbdev->dev->of_node, "operating-points-v2", 0);
+	if (!np) {
+		dev_warn(kbdev->dev, "OPP-v2 not supported\n");
+		return;
+	}
+
+	err = rockchip_get_efuse_value(np, "gpu_leakage", &leakage);
+	if (!err) {
+		dev_info(kbdev->dev, "leakage=%d\n", leakage);
+		err = rockchip_get_volt_sel(np, "rockchip,leakage-voltage-sel",
+					    leakage, &lkg_volt_sel);
+		if (!err) {
+			dev_info(kbdev->dev, "leakage-sel=%d\n", lkg_volt_sel);
+			volt_sel = lkg_volt_sel;
+		}
+	}
+
+	err = rockchip_get_pvtm_specific_value(kbdev->dev, np, kbdev->clock,
+					       kbdev->regulator,
+					       &pvmt_value);
+	if (!err) {
+		err = rockchip_get_volt_sel(np, "rockchip,pvtm-voltage-sel",
+					    pvmt_value, &pvtm_volt_sel);
+		if (!err) {
+			dev_info(kbdev->dev, "pvtm-sel=%d\n", pvtm_volt_sel);
+			if (volt_sel < 0 || volt_sel > pvtm_volt_sel)
+				volt_sel = pvtm_volt_sel;
+		}
+	}
+
+	if (volt_sel >= 0) {
+		snprintf(name, MAX_PROP_NAME_LEN, "L%d", volt_sel);
+		err = dev_pm_opp_set_prop_name(kbdev->dev, name);
+		if (err)
+			dev_err(kbdev->dev, "Failed to set prop name\n");
+	}
+}
diff --git a/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_rk.h b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_rk.h
new file mode 100755
index 000000000000..6eab25014d21
--- /dev/null
+++ b/drivers/gpu/arm/bifrost/platform/rk/mali_kbase_rk.h
@@ -0,0 +1,62 @@
+/* drivers/gpu/t6xx/kbase/src/platform/rk/mali_kbase_platform.h
+ * Rockchip SoC Mali-Midgard platform-dependent codes
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software FoundatIon.
+ */
+
+/**
+ * @file mali_kbase_rk.h
+ *
+ * defines work_context type of platform_dependent_part.
+ */
+
+#ifndef _MALI_KBASE_RK_H_
+#define _MALI_KBASE_RK_H_
+
+#include <linux/wakelock.h>
+
+/*---------------------------------------------------------------------------*/
+
+#define DEFAULT_UTILISATION_PERIOD_IN_MS (100)
+
+/*---------------------------------------------------------------------------*/
+
+/*
+ * struct rk_context - work_context of platform_dependent_part_of_rk.
+ */
+struct rk_context {
+	/*
+	 * record the status of common_parts calling 'power_on_callback'
+	 * and 'power_off_callback'.
+	 */
+	bool is_powered;
+
+	struct kbase_device *kbdev;
+
+	struct workqueue_struct *power_off_wq;
+	/* delayed_work_to_power_off_gpu. */
+	struct delayed_work work;
+	unsigned int delay_ms;
+
+	/*
+	 * WAKE_LOCK_SUSPEND for ensuring to run
+	 * delayed_work_to_power_off_gpu before suspend.
+	 */
+	struct wake_lock wake_lock;
+
+	/* debug only, the period in ms to count gpu_utilisation. */
+	unsigned int utilisation_period;
+};
+
+/*---------------------------------------------------------------------------*/
+
+static inline struct rk_context *get_rk_context(
+		const struct kbase_device *kbdev)
+{
+	return (struct rk_context *)(kbdev->platform_context);
+}
+
+#endif				/* _MALI_KBASE_RK_H_ */
+
-- 
2.35.3

