From c3fb2a45a6ce38793c50665935d5f4cd6e1bc48f Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Mon, 30 Mar 2020 09:26:56 +0800
Subject: [PATCH] spi: rockchip-test: make spi configurable

Change-Id: Ib108ff43db462b6cbd2a2b87641169e0e36f1dc0
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/spi/spi-rockchip-test.c | 54 +++++++++++++++++++++++++++------
 1 file changed, 44 insertions(+), 10 deletions(-)
 mode change 100755 => 100644 drivers/spi/spi-rockchip-test.c

diff --git a/drivers/spi/spi-rockchip-test.c b/drivers/spi/spi-rockchip-test.c
old mode 100755
new mode 100644
index afb2a7561e0b..ace123abb696
--- a/drivers/spi/spi-rockchip-test.c
+++ b/drivers/spi/spi-rockchip-test.c
@@ -78,29 +78,43 @@ struct spi_test_data {
 };
 
 static struct spi_test_data *g_spi_test_data[MAX_SPI_DEV_NUM];
+static u32 bit_per_word = 8;
 
 int spi_write_slt(int id, const void *txbuf, size_t n)
 {
 	int ret = -1;
 	struct spi_device *spi = NULL;
+	struct spi_transfer     t = {
+			.tx_buf         = txbuf,
+			.len            = n,
+			.bits_per_word = bit_per_word,
+		};
+	struct spi_message      m;
 
 	if (id >= MAX_SPI_DEV_NUM)
-		return -1;
+		return ret;
 	if (!g_spi_test_data[id]) {
 		pr_err("g_spi.%d is NULL\n", id);
-		return -1;
+		return ret;
 	} else {
 		spi = g_spi_test_data[id]->spi;
 	}
 
-	ret = spi_write(spi, txbuf, n);
-	return ret;
+	spi_message_init(&m);
+	spi_message_add_tail(&t, &m);
+	return spi_sync(spi, &m);
 }
 
 int spi_read_slt(int id, void *rxbuf, size_t n)
 {
 	int ret = -1;
 	struct spi_device *spi = NULL;
+	struct spi_transfer     t = {
+			.rx_buf         = rxbuf,
+			.len            = n,
+			.bits_per_word = bit_per_word,
+		};
+	struct spi_message      m;
 
 	if (id >= MAX_SPI_DEV_NUM)
 		return ret;
@@ -111,8 +125,9 @@ int spi_read_slt(int id, void *rxbuf, size_t n)
 		spi = g_spi_test_data[id]->spi;
 	}
 
-	ret = spi_read(spi, rxbuf, n);
-	return ret;
+	spi_message_init(&m);
+	spi_message_add_tail(&t, &m);
+	return spi_sync(spi, &m);
 }
 
 int spi_write_then_read_slt(int id, const void *txbuf, unsigned n_tx,
@@ -275,6 +290,13 @@ static ssize_t spi_test_write(struct file *file,
 		bytes = size * times * 1;
 		bytes = bytes * 1000 / us;
 		printk("spi read %d*%d cost %ldus speed:%ldKB/S\n", size, times, us, bytes);
+		print_hex_dump(KERN_ERR, "SPI RX: ",
+			       DUMP_PREFIX_OFFSET,
+			       16,
+			       1,
+			       rxbuf,
+			       size,
+			       1);
 
 		kfree(rxbuf);
 	} else if (!strcmp(cmd, "loop")) {
@@ -299,22 +321,33 @@ static ssize_t spi_test_write(struct file *file,
 			txbuf[i] = i % 256;
 
 		start_time = ktime_get();
-		for (i = 0; i < times; i++)
+		for (i = 0; i < times; i++) {
 			spi_write_and_read_slt(id, txbuf, rxbuf, size);
+			if (memcmp(txbuf, rxbuf, size)) {
+				printk("spi loop test fail\n");
+				break;
+			}
+		}
 
 		end_time = ktime_get();
 		cost_time = ktime_sub(end_time, start_time);
 		us = ktime_to_us(cost_time);
 
-		if (memcmp(txbuf, rxbuf, size))
-			printk("spi loop test fail\n");
-
 		bytes = size * times;
 		bytes = bytes * 1000 / us;
 		printk("spi loop %d*%d cost %ldus speed:%ldKB/S\n", size, times, us, bytes);
 
 		kfree(txbuf);
 		kfree(rxbuf);
+	} else if (!strcmp(cmd, "config")) {
+		int width;
+
+		sscanf(argv[0], "%d", &width);
+
+		if (width == 16)
+			bit_per_word = 16;
+		else
+			bit_per_word = 8;
 	} else {
 		printk("echo id number size > /dev/spi_misc_test\n");
 		printk("echo write 0 10 255 > /dev/spi_misc_test\n");
@@ -322,6 +355,7 @@ static ssize_t spi_test_write(struct file *file,
 		printk("echo read 0 10 255 > /dev/spi_misc_test\n");
 		printk("echo loop 0 10 255 > /dev/spi_misc_test\n");
 		printk("echo setspeed 0 1000000 > /dev/spi_misc_test\n");
+		printk("echo config 8 > /dev/spi_misc_test\n");
 	}
 
 	return n;
-- 
2.35.3

