From 7462adc4d8e9a38f7b9014350c2c95564919a673 Mon Sep 17 00:00:00 2001
From: Zhaoyifeng <zyf@rock-chips.com>
Date: Thu, 3 Aug 2017 16:28:32 +0800
Subject: [PATCH] drivers: rk_nand: update nand driver to support vendor
 storage

Change-Id: Iaf70005f5f3864c923d35ce89332e95f0e7ed459
Signed-off-by: Zhaoyifeng <zyf@rock-chips.com>
---
 drivers/rk_nand/rk_ftl_api.h    |     8 +
 drivers/rk_nand/rk_ftl_arm_v7.S | 19724 ++++++++++++++++--------------
 drivers/rk_nand/rk_ftl_arm_v8.S | 15866 ++++++++++++------------
 drivers/rk_nand/rk_nand_base.c  |    36 +-
 drivers/rk_nand/rk_nand_blk.c   |    18 +-
 5 files changed, 18695 insertions(+), 16957 deletions(-)

diff --git a/drivers/rk_nand/rk_ftl_api.h b/drivers/rk_nand/rk_ftl_api.h
index e4264dec07fb..ebde01e3dbb6 100644
--- a/drivers/rk_nand/rk_ftl_api.h
+++ b/drivers/rk_nand/rk_ftl_api.h
@@ -28,6 +28,14 @@ void rk_ftl_de_init(void);
 void rk_nand_suspend(void);
 void rk_nand_resume(void);
 int rknand_get_reg_addr(unsigned long *p_nandc0, unsigned long *p_nandc1);
+long rknand_sys_storage_ioctl(struct file *file, unsigned int cmd,
+			      unsigned long arg);
+long rk_ftl_vendor_storage_ioctl(struct file *file, unsigned int cmd,
+				 unsigned long arg);
+int rk_ftl_vendor_write(u32 id, void *pbuf, u32 size);
+int rk_ftl_vendor_read(u32 id, void *pbuf, u32 size);
+int rk_ftl_vendor_storage_init(void);
+int rknand_vendor_storage_init(void);
 
 #endif
 
diff --git a/drivers/rk_nand/rk_ftl_arm_v7.S b/drivers/rk_nand/rk_ftl_arm_v7.S
index 0ac2237bf3c5..33ab578f66e2 100644
--- a/drivers/rk_nand/rk_ftl_arm_v7.S
+++ b/drivers/rk_nand/rk_ftl_arm_v7.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2017-05-26
+ * date: 2017-10-16
  */
 	.arch armv7-a
 	.fpu softvfp
@@ -20,27 +20,62 @@
 	.file	"rk_ftl_arm_v7.S"
 	.text
 	.align	2
-	.type	rknand_sys_storage_open, %function
-rknand_sys_storage_open:
+	.type	FlashGetReadRetryDefault.part.19, %function
+FlashGetReadRetryDefault.part.19:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	mov	r0, #0
-	bx	lr
-	.fnend
-	.size	rknand_sys_storage_open, .-rknand_sys_storage_open
+	cmp	r0, #33
+	cmpne	r0, #65
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	beq	.L2
+	cmp	r0, #66
+	bne	.L3
+.L2:
+	ldr	r3, .L8
+	mov	r2, #4
+	strb	r0, [r3, #0]
+	b	.L7
+.L3:
+	cmp	r0, #34
+	cmpne	r0, #67
+	bne	.L5
+	ldr	r3, .L8
+	mov	r2, #5
+	strb	r0, [r3, #0]
+.L7:
+	strb	r2, [r3, #1]
+	add	r0, r3, #4
+	mov	r2, #7
+	ldr	r1, .L8+4
+	strb	r2, [r3, #2]
+	mov	r2, #45
+	b	.L6
+.L5:
+	cmp	r0, #35
+	cmpne	r0, #68
+	ldmnefd	sp!, {r3, pc}
+	ldr	r3, .L8
+	mov	r2, #5
+	ldr	r1, .L8+8
+	strb	r0, [r3, #0]
+	add	r0, r3, #4
+	strb	r2, [r3, #1]
+	mov	r2, #17
+	strb	r2, [r3, #2]
+	mov	r2, #95
+.L6:
+	bl	memcpy
+	ldmfd	sp!, {r3, pc}
+.L9:
 	.align	2
-	.type	rknand_sys_storage_release, %function
-rknand_sys_storage_release:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	mov	r0, #0
-	bx	lr
+.L8:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+45
 	.fnend
-	.size	rknand_sys_storage_release, .-rknand_sys_storage_release
+	.size	FlashGetReadRetryDefault.part.19, .-FlashGetReadRetryDefault.part.19
 	.align	2
 	.global	FlashMemCmp8
 	.type	FlashMemCmp8, %function
@@ -48,37 +83,37 @@ FlashMemCmp8:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L13
+	ldr	r3, .L20
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldrb	r3, [r3, #0]	@ zero_extendqisi2
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L11
+	beq	.L18
 	ldrb	r3, [r1, #1]	@ zero_extendqisi2
 	ldrb	ip, [r0, #1]	@ zero_extendqisi2
 	cmp	ip, r3
 	movne	r3, #0
-	bne	.L11
-	b	.L12
-.L8:
+	bne	.L18
+	b	.L19
+.L15:
 	ldrb	r4, [r0, r3]	@ zero_extendqisi2
 	ldrb	ip, [r1, r3]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r4, ip
-	beq	.L11
+	beq	.L18
 	mov	r0, r3
 	ldmfd	sp!, {r4, pc}
-.L11:
+.L18:
 	cmp	r3, r2
-	bne	.L8
+	bne	.L15
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L12:
+.L19:
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L14:
+.L21:
 	.align	2
-.L13:
+.L20:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashMemCmp8, .-FlashMemCmp8
@@ -90,9 +125,9 @@ FlashRsvdBlkChk:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L16
-	ldrb	r2, [r3, #1]	@ zero_extendqisi2
-	ldr	r3, [r3, #4]
+	ldr	r3, .L23
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r3, [r3, #856]
 	mul	r3, r3, r2
 	cmp	r1, r3
 	movcs	r2, #0
@@ -101,9 +136,9 @@ FlashRsvdBlkChk:
 	movne	r2, #0
 	eor	r0, r2, #1
 	bx	lr
-.L17:
+.L24:
 	.align	2
-.L16:
+.L23:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
@@ -114,25 +149,25 @@ FlashGetRandomizer:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	and	r3, r1, #127
-	ldr	r2, .L20
+	and	r2, r1, #127
+	ldr	r3, .L27
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	mov	r3, r3, asl #1
-	ldrh	r4, [r2, r3]
-	ldr	r3, .L20+4
-	ldrb	r3, [r3, #8]	@ zero_extendqisi2
+	add	r3, r3, r2, asl #1
+	ldrh	r4, [r3, #140]
+	ldr	r3, .L27+4
+	ldrb	r3, [r3, #860]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L19
+	beq	.L26
 	bl	FlashRsvdBlkChk
 	cmp	r0, #0
 	orrne	r4, r4, #-1073741824
-.L19:
+.L26:
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L21:
+.L28:
 	.align	2
-.L20:
+.L27:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -144,57 +179,31 @@ FlashSetRandomizer:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
+	and	r2, r1, #127
+	ldr	r3, .L31
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r3, r3, r2, asl #1
 	mov	r6, r0
-	ldr	r3, .L28
-	mov	r5, r1
-	ldr	r2, [r3, #12]
-	mov	r7, r3
-	cmp	r2, #5
-	bls	.L23
-	and	r5, r1, #127
-	ldr	r3, .L28+4
-	mov	r5, r5, asl #1
-	ldrh	r4, [r3, r5]
-	ldrb	r3, [r7, #8]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L24
+	ldrh	r4, [r3, #140]
+	ldr	r3, .L31+4
+	ldrb	r2, [r3, #860]	@ zero_extendqisi2
+	mov	r5, r3
+	cmp	r2, #0
+	beq	.L30
 	bl	FlashRsvdBlkChk
 	cmp	r0, #0
 	orrne	r4, r4, #-1073741824
-.L24:
-	add	r6, r7, r6, asl #3
-	b	.L27
-.L23:
-	cmp	r2, #4
-	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
-	and	r2, r1, #127
-	ldr	ip, .L28+4
-	ldrb	r3, [r3, #8]	@ zero_extendqisi2
-	mov	r2, r2, asl #1
-	cmp	r3, #0
-	ldrh	r4, [ip, r2]
-	mov	r4, r4, asl #8
-	beq	.L26
-	bl	FlashRsvdBlkChk
-	cmp	r0, #0
-	movne	r5, r5, asl #1
-	uxtbne	r5, r5
-	orrne	r5, r5, #1
-	orrne	r4, r4, r5
-.L26:
-	ldr	r3, .L28
-	add	r6, r3, r6, asl #3
-.L27:
-	ldr	r3, [r6, #16]
+.L30:
+	add	r5, r5, r6, asl #3
+	ldr	r3, [r5, #864]
 	str	r4, [r3, #336]
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L29:
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L32:
 	.align	2
-.L28:
-	.word	.LANCHOR0
+.L31:
 	.word	.LANCHOR1
+	.word	.LANCHOR0
 	.fnend
 	.size	FlashSetRandomizer, .-FlashSetRandomizer
 	.align	2
@@ -204,13 +213,13 @@ FlashReadCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L31
+	ldr	ip, .L34
 	mov	r2, r1, lsr #16
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	add	ip, ip, r0, asl #3
-	ldrb	r3, [ip, #20]	@ zero_extendqisi2
-	ldr	r4, [ip, #16]
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
 	mov	ip, #0
 	add	r3, r3, #8
 	add	r3, r4, r3, asl #8
@@ -226,9 +235,9 @@ FlashReadCmd:
 	str	r2, [r3, #8]
 	ldmfd	sp!, {r4, lr}
 	b	FlashSetRandomizer
-.L32:
+.L35:
 	.align	2
-.L31:
+.L34:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadCmd, .-FlashReadCmd
@@ -239,18 +248,18 @@ FlashReadDpDataOutCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L37
+	ldr	r2, .L40
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	add	ip, r2, r0, asl #3
-	ldrb	r2, [r2, #64]	@ zero_extendqisi2
-	ldrb	r3, [ip, #20]	@ zero_extendqisi2
-	ldr	r4, [ip, #16]
+	ldrb	r2, [r2, #912]	@ zero_extendqisi2
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
 	cmp	r2, #1
 	add	r3, r3, #8
 	mov	r2, #0
 	add	r3, r4, r3, asl #8
-	bne	.L34
+	bne	.L37
 	mov	ip, #6
 	str	ip, [r3, #8]
 	str	r2, [r3, #4]
@@ -260,8 +269,8 @@ FlashReadDpDataOutCmd:
 	mov	r2, r1, lsr #8
 	str	r2, [r3, #4]
 	mov	r2, r1, lsr #16
-	b	.L36
-.L34:
+	b	.L39
+.L37:
 	str	r2, [r3, #8]
 	uxtb	ip, r1
 	str	r2, [r3, #4]
@@ -274,15 +283,15 @@ FlashReadDpDataOutCmd:
 	mov	ip, #5
 	str	ip, [r3, #8]
 	str	r2, [r3, #4]
-.L36:
+.L39:
 	str	r2, [r3, #4]
 	mov	r2, #224
 	str	r2, [r3, #8]
 	ldmfd	sp!, {r4, lr}
 	b	FlashSetRandomizer
-.L38:
+.L41:
 	.align	2
-.L37:
+.L40:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
@@ -294,21 +303,21 @@ flash_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L41
-	ldrb	r2, [r3, #80]	@ zero_extendqisi2
+	ldr	r3, .L44
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
 	bxeq	lr
 	add	r0, r3, r0, asl #3
-	ldrb	r3, [r0, #20]	@ zero_extendqisi2
-	ldr	r2, [r0, #16]
+	ldrb	r3, [r0, #868]	@ zero_extendqisi2
+	ldr	r2, [r0, #864]
 	add	r3, r3, #8
 	add	r3, r2, r3, asl #8
 	mov	r2, #218
 	str	r2, [r3, #8]
 	bx	lr
-.L42:
+.L45:
 	.align	2
-.L41:
+.L44:
 	.word	.LANCHOR0
 	.fnend
 	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
@@ -320,21 +329,21 @@ flash_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L45
-	ldrb	r2, [r3, #80]	@ zero_extendqisi2
+	ldr	r3, .L48
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
 	bxeq	lr
 	add	r0, r3, r0, asl #3
-	ldrb	r3, [r0, #20]	@ zero_extendqisi2
-	ldr	r2, [r0, #16]
+	ldrb	r3, [r0, #868]	@ zero_extendqisi2
+	ldr	r2, [r0, #864]
 	add	r3, r3, #8
 	add	r3, r2, r3, asl #8
 	mov	r2, #223
 	str	r2, [r3, #8]
 	bx	lr
-.L46:
+.L49:
 	.align	2
-.L45:
+.L48:
 	.word	.LANCHOR0
 	.fnend
 	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
@@ -345,13 +354,13 @@ FlashProgFirstCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L48
+	ldr	ip, .L51
 	mov	r2, r1, lsr #16
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	add	ip, ip, r0, asl #3
-	ldrb	r3, [ip, #20]	@ zero_extendqisi2
-	ldr	r4, [ip, #16]
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
 	mov	ip, #128
 	add	r3, r3, #8
 	add	r3, r4, r3, asl #8
@@ -366,9 +375,9 @@ FlashProgFirstCmd:
 	str	r2, [r3, #4]
 	ldmfd	sp!, {r4, lr}
 	b	FlashSetRandomizer
-.L49:
+.L52:
 	.align	2
-.L48:
+.L51:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
@@ -380,15 +389,15 @@ FlashEraseCmd:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L52
+	ldr	r3, .L55
 	cmp	r2, #0
 	add	r0, r3, r0, asl #3
-	ldr	ip, [r0, #16]
-	ldrb	r0, [r0, #20]	@ zero_extendqisi2
+	ldr	ip, [r0, #864]
+	ldrb	r0, [r0, #868]	@ zero_extendqisi2
 	add	r0, r0, #8
 	add	r0, ip, r0, asl #8
-	beq	.L51
-	ldr	r3, [r3, #4]
+	beq	.L54
+	ldr	r3, [r3, #856]
 	mov	r2, #96
 	str	r2, [r0, #8]
 	uxtb	r2, r1
@@ -398,7 +407,7 @@ FlashEraseCmd:
 	mov	r2, r1, lsr #16
 	add	r1, r1, r3
 	str	r2, [r0, #4]
-.L51:
+.L54:
 	mov	r3, #96
 	str	r3, [r0, #8]
 	uxtb	r3, r1
@@ -410,9 +419,9 @@ FlashEraseCmd:
 	str	r1, [r0, #4]
 	str	r3, [r0, #8]
 	bx	lr
-.L53:
+.L56:
 	.align	2
-.L52:
+.L55:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashEraseCmd, .-FlashEraseCmd
@@ -423,14 +432,14 @@ FlashProgDpSecondCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L55
+	ldr	ip, .L58
 	mov	r2, r1, lsr #16
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	add	r4, ip, r0, asl #3
-	ldrb	ip, [ip, #59]	@ zero_extendqisi2
-	ldrb	r3, [r4, #20]	@ zero_extendqisi2
-	ldr	r5, [r4, #16]
+	ldrb	ip, [ip, #907]	@ zero_extendqisi2
+	ldrb	r3, [r4, #868]	@ zero_extendqisi2
+	ldr	r5, [r4, #864]
 	add	r3, r3, #8
 	add	r3, r5, r3, asl #8
 	str	ip, [r3, #8]
@@ -444,9 +453,9 @@ FlashProgDpSecondCmd:
 	str	r2, [r3, #4]
 	ldmfd	sp!, {r4, r5, lr}
 	b	FlashSetRandomizer
-.L56:
+.L59:
 	.align	2
-.L55:
+.L58:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
@@ -458,18 +467,18 @@ FlashProgSecondCmd:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L58
+	ldr	r3, .L61
 	add	r3, r3, r0, asl #3
-	ldr	r2, [r3, #16]
-	ldrb	r3, [r3, #20]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	ldrb	r3, [r3, #868]	@ zero_extendqisi2
 	add	r3, r3, #8
 	add	r3, r2, r3, asl #8
 	mov	r2, #16
 	str	r2, [r3, #8]
 	bx	lr
-.L59:
+.L62:
 	.align	2
-.L58:
+.L61:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
@@ -481,18 +490,18 @@ FlashProgDpFirstCmd:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L61
+	ldr	r3, .L64
 	add	r0, r3, r0, asl #3
-	ldrb	r3, [r3, #58]	@ zero_extendqisi2
-	ldrb	r2, [r0, #20]	@ zero_extendqisi2
-	ldr	r1, [r0, #16]
+	ldrb	r3, [r3, #906]	@ zero_extendqisi2
+	ldrb	r2, [r0, #868]	@ zero_extendqisi2
+	ldr	r1, [r0, #864]
 	add	r2, r2, #8
 	add	r2, r1, r2, asl #8
 	str	r3, [r2, #8]
 	bx	lr
-.L62:
+.L65:
 	.align	2
-.L61:
+.L64:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
@@ -507,22 +516,22 @@ JSHash:
 	mov	r2, #0
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r0, .L66
-	b	.L64
-.L65:
+	ldr	r0, .L69
+	b	.L67
+.L68:
 	mov	ip, r0, asl #5
 	ldrb	r4, [r3, r2]	@ zero_extendqisi2
 	add	ip, ip, r0, lsr #2
 	add	r2, r2, #1
 	add	ip, ip, r4
 	eor	r0, r0, ip
-.L64:
+.L67:
 	cmp	r2, r1
-	bne	.L65
+	bne	.L68
 	ldmfd	sp!, {r4, pc}
-.L67:
+.L70:
 	.align	2
-.L66:
+.L69:
 	.word	1204201446
 	.fnend
 	.size	JSHash, .-JSHash
@@ -559,14 +568,14 @@ FlashReadIdbData:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	mov	r2, #2048
-	ldr	r1, .L71
+	ldr	r1, .L74
 	bl	memcpy
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L72:
+.L75:
 	.align	2
-.L71:
-	.word	.LANCHOR0+84
+.L74:
+	.word	.LANCHOR0+932
 	.fnend
 	.size	FlashReadIdbData, .-FlashReadIdbData
 	.align	2
@@ -579,56 +588,56 @@ FlashLoadPhyInfoInRam:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r4, #0
-	ldr	r6, .L85
-.L77:
+	ldr	r6, .L88
+.L80:
 	add	r5, r6, r4, asl #5
-	ldr	r1, .L85+4
+	ldr	r1, .L88+4
 	add	r0, r5, #1
 	ldrb	r2, [r6, r4, asl #5]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	subs	r1, r0, #0
-	bne	.L74
+	bne	.L77
 	cmp	r5, #0
 	ldrneb	r2, [r5, #22]	@ zero_extendqisi2
-	ldrne	r3, .L85+8
-	bne	.L79
-	b	.L84
-.L74:
+	ldrne	r3, .L88+8
+	bne	.L82
+	b	.L87
+.L77:
 	add	r4, r4, #1
 	cmp	r4, #72
-	bne	.L77
+	bne	.L80
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L79:
+.L82:
 	ldrb	r0, [r3, r1, asl #5]	@ zero_extendqisi2
 	cmp	r0, r2
-	beq	.L78
+	beq	.L81
 	add	r1, r1, #1
 	cmp	r1, #4
-	bne	.L79
-.L78:
-	ldr	r3, .L85+8
+	bne	.L82
+.L81:
+	ldr	r3, .L88+8
 	mov	r2, #32
-	ldr	r0, .L85+12
+	ldr	r0, .L88+12
 	add	r1, r3, r1, asl #5
 	bl	memcpy
-	ldr	r0, .L85+16
+	ldr	r0, .L88+16
 	mov	r1, r5
 	mov	r2, #32
 	bl	memcpy
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L84:
+.L87:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L86:
+.L89:
 	.align	2
-.L85:
-	.word	.LANCHOR1+256
-	.word	.LANCHOR0+2132
-	.word	.LANCHOR1+2560
-	.word	.LANCHOR0+48
-	.word	.LANCHOR1+2688
+.L88:
+	.word	.LANCHOR1+396
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR1+2700
+	.word	.LANCHOR0+896
+	.word	.LANCHOR1+2828
 	.fnend
 	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
 	.align	2
@@ -639,29 +648,29 @@ FlashSuspend:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L88
+	ldr	r3, .L91
 	mov	r0, #0
-	ldr	r2, [r3, #2164]
+	ldr	r2, [r3, #3012]
 	ldr	r1, [r2, #0]
-	str	r1, [r3, #2168]
+	str	r1, [r3, #3016]
 	ldr	r1, [r2, #4]
-	str	r1, [r3, #2172]
+	str	r1, [r3, #3020]
 	ldr	r1, [r2, #8]
-	str	r1, [r3, #2176]
+	str	r1, [r3, #3024]
 	ldr	r1, [r2, #12]
-	str	r1, [r3, #2180]
+	str	r1, [r3, #3028]
 	ldr	r1, [r2, #304]
-	str	r1, [r3, #2184]
+	str	r1, [r3, #3032]
 	ldr	r1, [r2, #308]
-	str	r1, [r3, #2188]
+	str	r1, [r3, #3036]
 	ldr	r1, [r2, #336]
 	ldr	r2, [r2, #344]
-	str	r1, [r3, #2192]
-	str	r2, [r3, #2196]
+	str	r1, [r3, #3040]
+	str	r2, [r3, #3044]
 	bx	lr
-.L89:
+.L92:
 	.align	2
-.L88:
+.L91:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashSuspend, .-FlashSuspend
@@ -676,50 +685,51 @@ LogAddr2PhyAddr:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	fp, r3
-	ldr	r3, .L95
+	ldr	r3, .L98
 	mov	r5, r1
 	mov	r6, r2
-	movw	r1, #2214
-	movw	r2, #2212
+	movw	r1, #3062
+	movw	r2, #3060
 	ldr	r8, [r0, #4]
 	ldrh	r2, [r3, r2]
 	mov	r4, r0
 	ldrh	sl, [r3, r1]
 	bic	r8, r8, #-2147483648
-	ldrh	r7, [r3, #4]
+	ldr	r7, [r3, #856]
 	ubfx	r9, r8, #10, #16
-	ldrb	r3, [r3, #0]	@ zero_extendqisi2
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
 	mov	r8, r8, asl #22
 	mul	sl, sl, r2
+	uxth	r7, r7
 	cmp	r3, #1
-	moveq	r7, r7, asl #1
 	mov	r0, r9
+	moveq	r7, r7, asl #1
 	mov	r8, r8, lsr #22
 	uxtheq	r7, r7
 	uxth	sl, sl
 	mov	r1, sl
 	bl	__aeabi_uidiv
 	cmp	r5, #1
-	ldr	r3, .L95
+	ldr	r3, .L98
 	uxth	r0, r0
 	mls	sl, sl, r0, r9
 	uxth	sl, sl
-	bne	.L92
-	ldrb	r2, [r3, #80]	@ zero_extendqisi2
+	bne	.L95
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
 	addeq	r8, r3, r8, asl #1
-	movweq	r2, #2228
+	movweq	r2, #3076
 	ldreqh	r8, [r8, r2]
-.L92:
+.L95:
 	add	r3, r3, r0, asl #2
-	ldr	r3, [r3, #2740]
+	ldr	r3, [r3, #3588]
 	mla	r7, r7, sl, r3
 	ldrb	r3, [sp, #40]	@ zero_extendqisi2
 	cmp	r3, #1
 	add	r8, r7, r8
 	str	r8, [r6, #0]
 	str	r0, [fp, #0]
-	bls	.L94
+	bls	.L97
 	ldr	r0, [r4, #4]
 	ldr	r3, [r4, #40]
 	add	r0, r0, #1024
@@ -727,12 +737,12 @@ LogAddr2PhyAddr:
 	rsbs	r0, r3, #0
 	adc	r0, r0, r3
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L94:
+.L97:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L96:
+.L99:
 	.align	2
-.L95:
+.L98:
 	.word	.LANCHOR0
 	.fnend
 	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
@@ -744,14 +754,14 @@ FlashScheduleEnSet:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L98
-	ldr	r2, [r3, #2772]
-	str	r0, [r3, #2772]
+	ldr	r3, .L101
+	ldr	r2, [r3, #3620]
+	str	r0, [r3, #3620]
 	mov	r0, r2
 	bx	lr
-.L99:
+.L102:
 	.align	2
-.L98:
+.L101:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
@@ -763,13 +773,13 @@ FlashGetPageSize:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L101
-	ldr	r3, [r3, #2776]
+	ldr	r3, .L104
+	ldr	r3, [r3, #3624]
 	ldrb	r0, [r3, #9]	@ zero_extendqisi2
 	bx	lr
-.L102:
+.L105:
 	.align	2
-.L101:
+.L104:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetPageSize, .-FlashGetPageSize
@@ -792,16 +802,16 @@ NandcGetChipIf:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L105
+	ldr	r3, .L108
 	add	r3, r3, r0, asl #3
-	ldrb	r0, [r3, #20]	@ zero_extendqisi2
-	ldr	r2, [r3, #16]
+	ldrb	r0, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
 	add	r0, r0, #8
 	add	r0, r2, r0, asl #8
 	bx	lr
-.L106:
+.L109:
 	.align	2
-.L105:
+.L108:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetChipIf, .-NandcGetChipIf
@@ -813,16 +823,16 @@ NandcSetDdrPara:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L108
+	ldr	r3, .L111
 	mov	r2, r0, asl #8
 	orr	r2, r2, r0, asl #16
 	orr	r2, r2, #1
-	ldr	r3, [r3, #2164]
+	ldr	r3, [r3, #3012]
 	str	r2, [r3, #304]
 	bx	lr
-.L109:
+.L112:
 	.align	2
-.L108:
+.L111:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrPara, .-NandcSetDdrPara
@@ -834,14 +844,14 @@ NandcSetDdrDiv:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L111
+	ldr	r3, .L114
 	orr	r0, r0, #16640
-	ldr	r3, [r3, #2164]
+	ldr	r3, [r3, #3012]
 	str	r0, [r3, #344]
 	bx	lr
-.L112:
+.L115:
 	.align	2
-.L111:
+.L114:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
@@ -853,17 +863,17 @@ NandcSetDdrMode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L115
+	ldr	r3, .L118
 	cmp	r0, #0
-	ldr	r2, [r3, #2164]
+	ldr	r2, [r3, #3012]
 	ldr	r3, [r2, #0]
 	bfc	r3, #13, #1
 	orrne	r3, r3, #253952
 	str	r3, [r2, #0]
 	bx	lr
-.L116:
+.L119:
 	.align	2
-.L115:
+.L118:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcSetDdrMode, .-NandcSetDdrMode
@@ -874,14 +884,14 @@ NandcSetMode:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L121
+	ldr	r3, .L124
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r3, [r3, #2164]
+	ldr	r3, [r3, #3012]
 	ldr	r4, [r3, #0]
 	ands	r3, r0, #6
 	bfieq	r4, r3, #13, #1
-	beq	.L120
+	beq	.L123
 	orr	r4, r4, #24576
 	tst	r0, #4
 	bfc	r4, #15, #1
@@ -889,25 +899,25 @@ NandcSetMode:
 	orr	r4, r4, #196608
 	orrne	r4, r4, #32768
 	bl	rknand_get_clk_rate
-	ldr	r3, .L121
+	ldr	r3, .L124
 	movw	r2, #16641
-	ldr	r3, [r3, #2164]
+	ldr	r3, [r3, #3012]
 	str	r2, [r3, #344]
-	ldr	r2, .L121+4
+	ldr	r2, .L124+4
 	str	r2, [r3, #304]
 	mov	r2, #38
 	str	r2, [r3, #308]
 	mov	r2, #39
 	str	r2, [r3, #308]
-.L120:
-	ldr	r3, .L121
+.L123:
+	ldr	r3, .L124
 	mov	r0, #0
-	ldr	r3, [r3, #2164]
+	ldr	r3, [r3, #3012]
 	str	r4, [r3, #0]
 	ldmfd	sp!, {r4, pc}
-.L122:
+.L125:
 	.align	2
-.L121:
+.L124:
 	.word	.LANCHOR0
 	.word	1710595
 	.fnend
@@ -920,15 +930,15 @@ NandcFlashCsDebug:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L124
-	ldr	r3, [r3, #16]
+	ldr	r3, .L127
+	ldr	r3, [r3, #864]
 	ldr	r2, [r3, #0]
 	bfi	r2, r0, #0, #8
 	str	r2, [r3, #0]
 	bx	lr
-.L125:
+.L128:
 	.align	2
-.L124:
+.L127:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcFlashCsDebug, .-NandcFlashCsDebug
@@ -940,19 +950,19 @@ NandcFlashCs:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L127
+	ldr	r3, .L130
 	add	r3, r3, r0, asl #3
 	mov	r0, #1
-	ldr	r2, [r3, #16]
-	ldrb	r1, [r3, #20]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	ldrb	r1, [r3, #868]	@ zero_extendqisi2
 	ldr	r3, [r2, #0]
 	mov	r1, r0, asl r1
 	bfi	r3, r1, #0, #8
 	str	r3, [r2, #0]
 	bx	lr
-.L128:
+.L131:
 	.align	2
-.L127:
+.L130:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcFlashCs, .-NandcFlashCs
@@ -964,17 +974,17 @@ NandcFlashDeCs:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L130
+	ldr	r3, .L133
 	add	r3, r3, r0, asl #3
-	ldr	r2, [r3, #16]
+	ldr	r2, [r3, #864]
 	ldr	r3, [r2, #0]
 	bfc	r3, #0, #8
 	bfc	r3, #17, #1
 	str	r3, [r2, #0]
 	bx	lr
-.L131:
+.L134:
 	.align	2
-.L130:
+.L133:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcFlashDeCs, .-NandcFlashDeCs
@@ -990,12 +1000,12 @@ NandcDelayns:
 	sub	sp, sp, #8
 	mov	r0, r0, lsr #4
 	str	r0, [sp, #4]
-.L133:
+.L136:
 	ldr	r0, [sp, #4]
 	cmp	r0, #0
 	sub	r3, r0, #1
 	str	r3, [sp, #4]
-	bne	.L133
+	bne	.L136
 	add	sp, sp, #8
 	bx	lr
 	.fnend
@@ -1009,47 +1019,47 @@ FlashReadStatusEN:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r3, .L144
+	ldr	r3, .L147
 	add	r0, r3, r0, asl #3
-	ldr	ip, [r3, #2776]
-	ldrb	r5, [r0, #20]	@ zero_extendqisi2
-	ldr	r4, [r0, #16]
+	ldr	ip, [r3, #3624]
+	ldrb	r5, [r0, #868]	@ zero_extendqisi2
+	ldr	r4, [r0, #864]
 	ldrb	ip, [ip, #8]	@ zero_extendqisi2
 	add	r5, r5, #8
 	cmp	ip, #2
 	add	r0, r4, r5, asl #8
 	movne	r3, #112
 	strne	r3, [r0, #8]
-	bne	.L140
+	bne	.L143
 	cmp	r2, #0
-	ldreqb	r2, [r3, #61]	@ zero_extendqisi2
-	ldrneb	r2, [r3, #62]	@ zero_extendqisi2
+	ldreqb	r2, [r3, #909]	@ zero_extendqisi2
+	ldrneb	r2, [r3, #910]	@ zero_extendqisi2
 	str	r2, [r0, #8]
-	ldrb	r3, [r3, #63]	@ zero_extendqisi2
+	ldrb	r3, [r3, #911]	@ zero_extendqisi2
 	cmp	r3, #0
 	movne	r3, #0
-	ldrne	r2, .L144
-	bne	.L139
-	b	.L140
-.L141:
+	ldrne	r2, .L147
+	bne	.L142
+	b	.L143
+.L144:
 	mov	ip, r3, asl #3
 	add	r3, r3, #1
 	mov	ip, r1, lsr ip
 	uxtb	ip, ip
 	str	ip, [r0, #4]
-.L139:
-	ldrb	ip, [r2, #63]	@ zero_extendqisi2
+.L142:
+	ldrb	ip, [r2, #911]	@ zero_extendqisi2
 	cmp	r3, ip
-	bcc	.L141
-.L140:
+	bcc	.L144
+.L143:
 	mov	r0, #80
 	bl	NandcDelayns
 	ldr	r0, [r4, r5, asl #8]
 	uxtb	r0, r0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L145:
+.L148:
 	.align	2
-.L144:
+.L147:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadStatusEN, .-FlashReadStatusEN
@@ -1065,15 +1075,15 @@ FlashWaitReadyEN:
 	mov	r6, r0
 	mov	r5, r1
 	mov	r4, r2
-.L150:
+.L153:
 	mov	r0, r6
 	mov	r1, r5
 	mov	r2, r4
 	bl	FlashReadStatusEN
 	cmp	r0, #255
-	beq	.L150
+	beq	.L153
 	tst	r0, #64
-	beq	.L150
+	beq	.L153
 	ldmfd	sp!, {r4, r5, r6, pc}
 	.fnend
 	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
@@ -1084,7 +1094,7 @@ FlashWaitCmdDone:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L154
+	ldr	r3, .L157
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	add	r4, r3, r0, asl #4
@@ -1092,14 +1102,14 @@ FlashWaitCmdDone:
 	mov	r6, r0
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L152
+	beq	.L155
 	mov	r0, r5
 	bl	NandcFlashCs
-	ldr	r3, .L154+4
+	ldr	r3, .L157+4
 	ldr	r1, [r4, #4]
 	mov	r0, r5
 	add	r6, r3, r6, asl #2
-	ldr	r2, [r6, #2740]
+	ldr	r2, [r6, #3588]
 	adds	r2, r2, #0
 	movne	r2, #1
 	bl	FlashWaitReadyEN
@@ -1116,13 +1126,13 @@ FlashWaitCmdDone:
 	cmp	r2, r3
 	strne	r6, [r2, #0]
 	strne	r3, [r4, #12]
-.L152:
+.L155:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L155:
+.L158:
 	.align	2
-.L154:
-	.word	.LANCHOR0+2780
+.L157:
+	.word	.LANCHOR0+3628
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
@@ -1135,53 +1145,63 @@ HynixSetRRPara:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
-	mov	sl, r3
-	ldr	r3, .L161
-	mov	r6, r2
+	mov	r8, r3
+	ldr	r9, .L165
 	mov	r4, r0
 	mov	r5, r1
-	mov	r7, #0
-	ldr	r2, [r3, #2776]
-	ldrb	r2, [r2, #19]	@ zero_extendqisi2
-	cmp	r2, #6
-	addeq	r9, r3, #2928
-	addne	r2, r3, #2928
-	add	r3, r3, r0, asl #3
-	addne	r9, sl, r0, asl #3
+	mov	r6, r2
+	ldr	r3, [r9, #3624]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #6
+	addeq	r9, r9, #20
 	addeq	r9, r9, r0, asl #6
-	ldrb	r8, [r3, #20]	@ zero_extendqisi2
-	addne	r9, r2, r9, asl #3
-	ldr	r2, [r3, #16]
-	addeq	r9, r9, sl, asl #2
-	add	r8, r8, #8
-	add	r8, r2, r8, asl #8
+	addeq	r9, r9, r8, asl #2
+	beq	.L161
+	cmp	r3, #7
+	addeq	r9, r9, #28
+	addne	r3, r8, r0, asl #3
+	moveq	r3, #160
+	addne	r9, r9, #20
+	mlaeq	r9, r3, r0, r9
+	moveq	r3, #10
+	addne	r9, r9, r3, asl #3
+	mlaeq	r9, r3, r8, r9
+.L161:
+	ldr	r3, .L165
+	mov	r0, r4
+	mov	r7, #0
+	add	r3, r3, r4, asl #3
+	ldrb	sl, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	add	sl, sl, #8
+	add	sl, r2, sl, asl #8
 	bl	NandcFlashCs
 	mov	r3, #54
-	str	r3, [r8, #8]
-	b	.L159
-.L160:
+	str	r3, [sl, #8]
+	b	.L163
+.L164:
 	ldrb	r3, [r6, r7]	@ zero_extendqisi2
 	mov	r0, #200
-	str	r3, [r8, #4]
+	str	r3, [sl, #4]
 	bl	NandcDelayns
-	ldrb	r3, [r9, r7]	@ zero_extendqisi2
+	ldrsb	r3, [r9, r7]
 	add	r7, r7, #1
-	str	r3, [r8, #0]
-.L159:
+	str	r3, [sl, #0]
+.L163:
 	uxtb	r3, r7
 	cmp	r3, r5
-	bcc	.L160
+	bcc	.L164
 	mov	r3, #22
 	mov	r0, r4
-	str	r3, [r8, #8]
+	str	r3, [sl, #8]
 	bl	NandcFlashDeCs
-	ldr	r3, .L161
+	ldr	r3, .L165
 	add	r4, r3, r4
-	strb	sl, [r4, #3760]
+	strb	r8, [r4, #3756]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L162:
+.L166:
 	.align	2
-.L161:
+.L165:
 	.word	.LANCHOR0
 	.fnend
 	.size	HynixSetRRPara, .-HynixSetRRPara
@@ -1194,35 +1214,35 @@ FlashSetReadRetryDefault:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldr	r6, .L168
-	ldr	r3, [r6, #2776]
+	ldr	r6, .L172
+	ldr	r3, [r6, #3624]
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
-	cmp	r3, #5
+	cmp	r3, #6
 	ldmhifd	sp!, {r4, r5, r6, pc}
-	ldr	r5, .L168+4
+	ldr	r5, .L172+4
 	mov	r4, #0
-.L166:
+.L170:
 	ldrb	r3, [r5, r4, asl #3]	@ zero_extendqisi2
 	uxtb	r0, r4
 	cmp	r3, #173
-	bne	.L165
-	ldrb	r1, [r6, #2909]	@ zero_extendqisi2
+	bne	.L169
+	ldrb	r1, [r6, #1]	@ zero_extendqisi2
 	mov	r3, #0
-	ldr	r2, .L168+8
+	ldr	r2, .L172+8
 	bl	HynixSetRRPara
-.L165:
+.L169:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L166
+	bne	.L170
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L169:
+.L173:
 	.align	2
-.L168:
+.L172:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2132
-	.word	.LANCHOR0+2912
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+4
 	.fnend
 	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
 	.align	2
@@ -1235,15 +1255,15 @@ SamsungSetRRPara:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r4, r0
-	ldr	r3, .L173
+	ldr	r3, .L177
 	mov	r5, #0
-	ldr	sl, .L173+4
+	ldr	sl, .L177+4
 	mov	r8, #161
 	add	r1, r3, r1, asl #2
 	add	r6, r1, #3
 	mov	r7, r3
-	b	.L171
-.L172:
+	b	.L175
+.L176:
 	str	r8, [r4, #8]
 	mov	r3, #0
 	str	r3, [r4, #0]
@@ -1254,15 +1274,15 @@ SamsungSetRRPara:
 	ldrsb	r3, [r6, #1]!
 	str	r3, [r4, #0]
 	bl	NandcDelayns
-.L171:
-	ldrb	r3, [sl, #3764]	@ zero_extendqisi2
+.L175:
+	ldrb	r3, [sl, #3760]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcc	.L172
+	bcc	.L176
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L174:
+.L178:
 	.align	2
-.L173:
-	.word	.LANCHOR1+2720
+.L177:
+	.word	.LANCHOR1+2860
 	.word	.LANCHOR0
 	.fnend
 	.size	SamsungSetRRPara, .-SamsungSetRRPara
@@ -1273,51 +1293,49 @@ ToshibaSetRRPara:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
-	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	add	r6, r1, #1
-	ldr	r3, .L182
+	ldr	r8, .L186
 	mov	r4, r0
 	add	r6, r6, r6, asl #2
 	mov	r5, #0
-	add	r2, r3, #45
-	sub	sl, r3, #2784
-	add	r7, r3, r6
-	ldr	r8, .L182+4
-	add	r6, r2, r6
-	add	sl, sl, r1
-	b	.L176
-.L180:
+	add	r3, r8, #45
+	add	r7, r8, r6
+	ldr	sl, .L186+4
+	add	r6, r3, r6
+	add	r9, r8, r1
+	b	.L180
+.L184:
 	mov	r3, #85
 	str	r3, [r4, #8]
-	ldr	r3, .L182
+	ldrsb	r3, [r5, r8]
 	mov	r0, #200
-	ldrsb	r3, [r5, r3]
 	str	r3, [r4, #4]
 	bl	NandcDelayns
-	ldrb	r3, [r8, #3765]	@ zero_extendqisi2
+	ldrb	r3, [sl, #3761]	@ zero_extendqisi2
 	cmp	r3, #34
 	ldreqsb	r3, [r7, #0]
-	beq	.L181
+	beq	.L185
 	cmp	r3, #35
-	addne	r3, sl, #2912
+	addne	r3, r9, #2912
 	addne	r3, r3, #12
 	ldreqsb	r3, [r6, #0]
 	ldrnesb	r3, [r3, #0]
-.L181:
+.L185:
 	add	r5, r5, #1
 	add	r7, r7, #1
 	add	r6, r6, #1
 	str	r3, [r4, #0]
-.L176:
-	ldrb	r3, [r8, #3764]	@ zero_extendqisi2
+.L180:
+	ldrb	r3, [sl, #3760]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcc	.L180
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L183:
+	bcc	.L184
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L187:
 	.align	2
-.L182:
-	.word	.LANCHOR1+2784
+.L186:
+	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
 	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
@@ -1331,20 +1349,20 @@ FlashReadStatus:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r2, #112
-	ldr	r3, .L185
+	ldr	r3, .L189
 	add	r3, r3, r0, asl #3
 	mov	r0, #80
-	ldrb	r5, [r3, #20]	@ zero_extendqisi2
-	ldr	r4, [r3, #16]
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r4, [r3, #864]
 	add	r5, r5, #8
 	add	r3, r4, r5, asl #8
 	str	r2, [r3, #8]
 	bl	NandcDelayns
 	ldr	r0, [r4, r5, asl #8]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L186:
+.L190:
 	.align	2
-.L185:
+.L189:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadStatus, .-FlashReadStatus
@@ -1355,31 +1373,31 @@ NandcWaitFlashReady:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L192
+	ldr	r3, .L196
 	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
 	.save {r0, r1, r2, r4, r5, lr}
 	add	r3, r3, r0, asl #3
-	ldr	r4, .L192+4
-	ldr	r5, [r3, #16]
-.L189:
+	ldr	r4, .L196+4
+	ldr	r5, [r3, #864]
+.L193:
 	mov	r0, #100
 	bl	NandcDelayns
 	ldr	r3, [r5, #0]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #512
-	bne	.L190
+	bne	.L194
 	subs	r4, r4, #1
-	bne	.L189
+	bne	.L193
 	mvn	r0, #0
-	b	.L188
-.L190:
+	b	.L192
+.L194:
 	mov	r0, #0
-.L188:
+.L192:
 	ldmfd	sp!, {r1, r2, r3, r4, r5, pc}
-.L193:
+.L197:
 	.align	2
-.L192:
+.L196:
 	.word	.LANCHOR0
 	.word	100000
 	.fnend
@@ -1399,9 +1417,9 @@ FlashEraseSLc2KBlocks:
 	mov	r8, r1
 	mov	r4, r0
 	mov	r7, r6
-	ldr	r5, .L202
-	b	.L195
-.L201:
+	ldr	r5, .L206
+	b	.L199
+.L205:
 	add	r3, r6, r8
 	add	r2, sp, #8
 	mov	r0, r4
@@ -1411,15 +1429,15 @@ FlashEraseSLc2KBlocks:
 	add	r3, sp, #12
 	bl	LogAddr2PhyAddr
 	ldr	r3, [sp, #12]
-	ldrb	r2, [r5, #3766]	@ zero_extendqisi2
+	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r4, #0]
-	bcs	.L197
+	bcs	.L201
 	add	r2, r5, r3
 	add	r3, r5, r3, asl #4
-	ldrb	sl, [r2, #3768]	@ zero_extendqisi2
-	strb	sl, [r3, #2780]
+	ldrb	sl, [r2, #3764]	@ zero_extendqisi2
+	strb	sl, [r3, #3628]
 	mov	r0, sl
 	bl	NandcWaitFlashReady
 	mov	r0, sl
@@ -1438,7 +1456,7 @@ FlashEraseSLc2KBlocks:
 	ands	r0, r0, #1
 	mvnne	r0, #0
 	str	r0, [r4, #0]
-	ldr	r1, [r5, #4]
+	ldr	r1, [r5, #856]
 	mov	r0, sl
 	add	r1, r1, r3
 	bl	FlashEraseCmd
@@ -1452,27 +1470,27 @@ FlashEraseSLc2KBlocks:
 	strne	r3, [r4, #0]
 	ldr	r3, [r4, #0]
 	cmn	r3, #1
-	bne	.L200
-	ldr	r0, .L202+4
+	bne	.L204
+	ldr	r0, .L206+4
 	ldr	r1, [sp, #8]
 	bl	printk
-.L200:
+.L204:
 	mov	r0, sl
 	bl	NandcFlashDeCs
-.L197:
+.L201:
 	sub	r6, r6, #1
 	add	r7, r7, #1
 	add	r4, r4, #36
 	uxtb	r6, r6
-.L195:
+.L199:
 	cmp	r7, r8
-	bne	.L201
+	bne	.L205
 	mov	r0, #0
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L203:
+.L207:
 	.align	2
-.L202:
+.L206:
 	.word	.LANCHOR0
 	.word	.LC1
 	.fnend
@@ -1494,18 +1512,18 @@ SandiskSetRRPara:
 	mov	r0, #200
 	mov	r5, r1
 	bl	NandcDelayns
-	ldr	r1, .L210
+	ldr	r1, .L214
 	add	r3, r5, r5, asl #2
 	mvn	r6, #4
 	add	r0, r1, r3
 	add	r1, r1, #45
 	add	r1, r1, r3
 	mov	r2, #0
-	ldr	ip, .L210+4
+	ldr	ip, .L214+4
 	mul	r5, r6, r5
-	b	.L205
-.L208:
-	ldrb	r6, [ip, #3765]	@ zero_extendqisi2
+	b	.L209
+.L212:
+	ldrb	r6, [ip, #3761]	@ zero_extendqisi2
 	add	r2, r2, #1
 	cmp	r6, #67
 	addeq	r6, r0, r5
@@ -1515,17 +1533,17 @@ SandiskSetRRPara:
 	add	r1, r1, #1
 	ldrsb	r6, [r6, #5]
 	str	r6, [r4, #0]
-.L205:
-	ldrb	r6, [ip, #3764]	@ zero_extendqisi2
+.L209:
+	ldrb	r6, [ip, #3760]	@ zero_extendqisi2
 	cmp	r2, r6
-	bcc	.L208
+	bcc	.L212
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	NandcWaitFlashReady
-.L211:
+.L215:
 	.align	2
-.L210:
-	.word	.LANCHOR1+2784
+.L214:
+	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
 	.size	SandiskSetRRPara, .-SandiskSetRRPara
@@ -1536,12 +1554,12 @@ SandiskProgTestBadBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L213
+	ldr	r3, .L217
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	add	r3, r3, r0, asl #3
-	ldrb	r6, [r3, #20]	@ zero_extendqisi2
-	ldr	r5, [r3, #16]
+	ldrb	r6, [r3, #868]	@ zero_extendqisi2
+	ldr	r5, [r3, #864]
 	mov	r3, #162
 	add	r6, r6, #8
 	add	r4, r5, r6, asl #8
@@ -1567,9 +1585,9 @@ SandiskProgTestBadBlock:
 	ldr	r0, [r5, r6, asl #8]
 	and	r0, r0, #1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L214:
+.L218:
 	.align	2
-.L213:
+.L217:
 	.word	.LANCHOR0
 	.fnend
 	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
@@ -1580,17 +1598,17 @@ FlashReadSpare:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L216
+	ldr	r3, .L220
 	mov	ip, #0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r2
-	ldrb	r2, [r3, #2697]	@ zero_extendqisi2
-	ldr	r3, .L216+4
+	ldrb	r2, [r3, #2837]	@ zero_extendqisi2
+	ldr	r3, .L220+4
 	add	r3, r3, r0, asl #3
 	mov	r2, r2, asl #9
-	ldrb	r5, [r3, #20]	@ zero_extendqisi2
-	ldr	r4, [r3, #16]
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r4, [r3, #864]
 	add	r5, r5, #8
 	add	r3, r4, r5, asl #8
 	str	ip, [r3, #8]
@@ -1609,9 +1627,9 @@ FlashReadSpare:
 	ldr	r3, [r4, r5, asl #8]
 	strb	r3, [r6, #0]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L217:
+.L221:
 	.align	2
-.L216:
+.L220:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -1657,10 +1675,10 @@ FlashReset:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r3, .L220
+	ldr	r3, .L224
 	add	r3, r3, r0, asl #3
-	ldrb	r5, [r3, #20]	@ zero_extendqisi2
-	ldr	r2, [r3, #16]
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
 	add	r5, r5, #8
 	add	r5, r2, r5, asl #8
 	bl	NandcFlashCs
@@ -1671,9 +1689,9 @@ FlashReset:
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	NandcFlashDeCs
-.L221:
+.L225:
 	.align	2
-.L220:
+.L224:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReset, .-FlashReset
@@ -1688,11 +1706,11 @@ FlashReadIDRaw:
 	mov	r5, r1
 	mov	r4, r0
 	bl	FlashReset
-	ldr	r3, .L224
+	ldr	r3, .L228
 	mov	r0, r4
 	add	r3, r3, r4, asl #3
-	ldrb	r7, [r3, #20]	@ zero_extendqisi2
-	ldr	r6, [r3, #16]
+	ldrb	r7, [r3, #868]	@ zero_extendqisi2
+	ldr	r6, [r3, #864]
 	bl	NandcFlashCs
 	add	r7, r7, #8
 	mov	r3, #144
@@ -1715,19 +1733,15 @@ FlashReadIDRaw:
 	strb	r3, [r5, #4]
 	ldr	r3, [r6, r7, asl #8]
 	strb	r3, [r5, #5]
-	ldr	r3, [r6, r7, asl #8]
-	strb	r3, [r5, #6]
-	ldr	r3, [r6, r7, asl #8]
-	strb	r3, [r5, #7]
 	bl	NandcFlashDeCs
 	ldrb	r2, [r5, #0]	@ zero_extendqisi2
 	sub	r3, r2, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L222
+	bhi	.L226
 	ldrb	r1, [r5, #2]	@ zero_extendqisi2
 	ldrb	r3, [r5, #1]	@ zero_extendqisi2
-	ldr	r0, .L224+4
+	ldr	r0, .L228+4
 	str	r1, [sp, #0]
 	ldrb	r1, [r5, #3]	@ zero_extendqisi2
 	str	r1, [sp, #4]
@@ -1737,11 +1751,11 @@ FlashReadIDRaw:
 	str	r1, [sp, #12]
 	add	r1, r4, #1
 	bl	printk
-.L222:
+.L226:
 	ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
-.L225:
+.L229:
 	.align	2
-.L224:
+.L228:
 	.word	.LANCHOR0
 	.word	.LC2
 	.fnend
@@ -1756,78 +1770,78 @@ FlashSetInterfaceMode:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, #0
-	ldr	r9, .L240
+	ldr	sl, .L244
 	mov	r7, #239
-	ldr	sl, .L240+4
+	ldr	r9, .L244+4
 	mov	r1, r4
-	sub	r8, r9, #16
+	sub	r8, sl, #864
 	mov	r6, #128
 	mov	r5, #1
-.L236:
-	mov	r2, r9
-	ldrb	lr, [r4, sl]	@ zero_extendqisi2
+.L240:
+	mov	r2, sl
+	ldrb	lr, [r4, r9]	@ zero_extendqisi2
 	ldr	r3, [r2, r4]!
 	cmp	lr, #152
 	cmpne	lr, #69
 	ldrb	r2, [r2, #4]	@ zero_extendqisi2
 	add	r2, r2, #8
 	add	ip, r3, r2, asl #8
-	beq	.L227
+	beq	.L231
 	cmp	lr, #173
 	cmpne	lr, #44
-	bne	.L228
-.L227:
+	bne	.L232
+.L231:
 	cmp	r0, #1
-	ldrb	fp, [r8, #3776]	@ zero_extendqisi2
-	bne	.L229
+	ldrb	fp, [r8, #3772]	@ zero_extendqisi2
+	bne	.L233
 	tst	fp, #1
-	beq	.L228
+	beq	.L232
 	cmp	lr, #173
 	str	r7, [ip, #8]
 	streq	r0, [ip, #4]
-	beq	.L239
+	beq	.L243
 	cmp	lr, #44
 	streq	r0, [ip, #4]
 	strne	r6, [ip, #4]
 	moveq	ip, #5
 	strne	r0, [r3, r2, asl #8]
-	bne	.L234
-	b	.L238
-.L229:
+	bne	.L238
+	b	.L242
+.L233:
 	tst	fp, #4
-	beq	.L228
+	beq	.L232
 	cmp	lr, #173
 	str	r7, [ip, #8]
 	streq	r5, [ip, #4]
 	moveq	ip, #32
-	beq	.L238
+	beq	.L242
 	cmp	lr, #44
 	strne	r6, [ip, #4]
-	bne	.L239
+	bne	.L243
 	str	r5, [ip, #4]
 	mov	ip, #35
-.L238:
+.L242:
 	str	ip, [r3, r2, asl #8]
-	b	.L234
-.L239:
+	b	.L238
+.L243:
 	str	r1, [r3, r2, asl #8]
-.L234:
+.L238:
 	str	r1, [r3, r2, asl #8]
 	str	r1, [r3, r2, asl #8]
 	str	r1, [r3, r2, asl #8]
-.L228:
+.L232:
 	add	r4, r4, #8
 	cmp	r4, #32
-	bne	.L236
+	bne	.L240
 	mov	r0, #0
 	bl	NandcWaitFlashReady
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L241:
+.L245:
 	.align	2
-.L240:
-	.word	.LANCHOR0+16
-	.word	.LANCHOR0+2132
+.L244:
+	.word	.LANCHOR0+864
+	.word	.LANCHOR0+2980
 	.fnend
 	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
 	.align	2
@@ -1840,29 +1854,29 @@ FlashDeInit:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r0, #0
-	ldr	r4, .L244
+	ldr	r4, .L248
 	bl	NandcWaitFlashReady
 	bl	FlashSetReadRetryDefault
-	ldrb	r3, [r4, #3777]	@ zero_extendqisi2
+	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L243
-	ldrb	r3, [r4, #3776]	@ zero_extendqisi2
+	beq	.L247
+	ldrb	r3, [r4, #3772]	@ zero_extendqisi2
 	tst	r3, #1
-	beq	.L243
+	beq	.L247
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
 	mov	r3, #0
-	strb	r3, [r4, #3777]
-.L243:
-	ldr	r3, [r4, #16]
+	strb	r3, [r4, #3773]
+.L247:
+	ldr	r3, [r4, #864]
 	mov	r0, #0
 	str	r0, [r3, #336]
 	ldmfd	sp!, {r4, pc}
-.L245:
+.L249:
 	.align	2
-.L244:
+.L248:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashDeInit, .-FlashDeInit
@@ -1873,22 +1887,22 @@ FlashReadDpCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L250
+	ldr	r3, .L254
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r7, r2
 	add	r2, r3, r0, asl #3
 	mov	r5, r1
 	mov	r4, r0
-	ldrb	r6, [r2, #20]	@ zero_extendqisi2
-	ldr	r1, [r2, #16]
-	ldrb	r2, [r3, #64]	@ zero_extendqisi2
+	ldrb	r6, [r2, #868]	@ zero_extendqisi2
+	ldr	r1, [r2, #864]
+	ldrb	r2, [r3, #912]	@ zero_extendqisi2
 	add	r6, r6, #8
 	cmp	r2, #1
-	ldrb	r2, [r3, #56]	@ zero_extendqisi2
+	ldrb	r2, [r3, #904]	@ zero_extendqisi2
 	add	r6, r1, r6, asl #8
 	str	r2, [r6, #8]
-	bne	.L247
+	bne	.L251
 	mov	r8, #0
 	uxtb	r2, r5
 	str	r8, [r6, #4]
@@ -1898,23 +1912,23 @@ FlashReadDpCmd:
 	str	r2, [r6, #4]
 	mov	r2, r5, lsr #16
 	str	r2, [r6, #4]
-	ldrb	r3, [r3, #57]	@ zero_extendqisi2
+	ldrb	r3, [r3, #905]	@ zero_extendqisi2
 	str	r3, [r6, #8]
 	bl	NandcWaitFlashReady
 	str	r8, [r6, #8]
 	str	r8, [r6, #4]
 	str	r8, [r6, #4]
-	b	.L249
-.L247:
+	b	.L253
+.L251:
 	uxtb	r2, r5
 	str	r2, [r6, #4]
 	mov	r2, r5, lsr #8
 	str	r2, [r6, #4]
 	mov	r2, r5, lsr #16
 	str	r2, [r6, #4]
-	ldrb	r3, [r3, #57]	@ zero_extendqisi2
+	ldrb	r3, [r3, #905]	@ zero_extendqisi2
 	str	r3, [r6, #8]
-.L249:
+.L253:
 	uxtb	r3, r7
 	mov	r0, r4
 	str	r3, [r6, #4]
@@ -1927,588 +1941,74 @@ FlashReadDpCmd:
 	str	r3, [r6, #8]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	b	FlashSetRandomizer
-.L251:
+.L255:
 	.align	2
-.L250:
+.L254:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadDpCmd, .-FlashReadDpCmd
 	.align	2
-	.global	HynixGetReadRetryDefault
-	.type	HynixGetReadRetryDefault, %function
-HynixGetReadRetryDefault:
+	.global	NandcRandmzSel
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L311
-	mvn	r2, #83
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r4, r0
-	cmp	r4, #2
-	strb	r0, [r3, #2908]
-	strb	r2, [r3, #2912]
-	mvn	r0, #82
-	mvn	r1, #81
-	mvn	r2, #80
-	.pad #68
-	sub	sp, sp, #68
-	strb	r0, [r3, #2913]
-	strb	r1, [r3, #2914]
-	strb	r2, [r3, #2915]
-	bne	.L253
-	mvn	r2, #88
-	strb	r2, [r3, #2912]
-	ldr	r3, .L311+4
-	mvn	r2, #8
-	strb	r2, [r3, #2949]
-	b	.L292
-.L253:
-	cmp	r4, #3
-	bne	.L255
-	mvn	r2, #79
-	strb	r2, [r3, #2912]
-	mvn	r2, #78
-	strb	r2, [r3, #2913]
-	mvn	r2, #77
-	strb	r2, [r3, #2914]
-	mvn	r2, #76
-	strb	r2, [r3, #2915]
-	mvn	r2, #75
-	strb	r2, [r3, #2916]
-	mvn	r2, #74
-	strb	r2, [r3, #2917]
-	mvn	r2, #73
-	strb	r2, [r3, #2918]
-	mvn	r2, #72
-	b	.L307
-.L255:
-	cmp	r4, #4
-	bne	.L256
-	mvn	ip, #51
-	strb	r0, [r3, #2917]
-	strb	ip, [r3, #2912]
-	mvn	ip, #64
-	strb	r1, [r3, #2918]
-	strb	ip, [r3, #2913]
-	mvn	ip, #85
-	strb	ip, [r3, #2914]
-	mvn	ip, #84
-	strb	ip, [r3, #2915]
-	mvn	ip, #50
-	strb	ip, [r3, #2916]
-.L307:
-	mov	r6, #8
-	strb	r2, [r3, #2919]
-	mov	r5, r6
-	b	.L254
-.L256:
-	cmp	r4, #5
-	bne	.L257
-	mov	r2, #56
-	mov	r6, #8
-	strb	r2, [r3, #2912]
-	mov	r2, #57
-	strb	r2, [r3, #2913]
-	mov	r2, #58
-	strb	r2, [r3, #2914]
-	mov	r2, #59
-	strb	r2, [r3, #2915]
-	b	.L306
+	@ link register save eliminated.
+	ldr	r3, .L257
+	add	r3, r3, r0, asl #3
+	ldr	r3, [r3, #864]
+	str	r1, [r3, #336]
+	bx	lr
+.L258:
+	.align	2
 .L257:
-	cmp	r4, #6
-	bne	.L292
-	mov	r2, #14
-	mov	r6, #12
-	strb	r2, [r3, #2912]
-	mov	r2, #15
-	strb	r2, [r3, #2913]
-	mov	r2, #16
-	strb	r2, [r3, #2914]
-	mov	r2, #17
-	strb	r2, [r3, #2915]
-	b	.L306
-.L292:
-	mov	r6, #7
-.L306:
-	mov	r5, #4
-.L254:
-	sub	r3, r4, #1
-	cmp	r3, #1
-	bhi	.L305
-	b	.L310
-.L264:
-	add	r1, r2, r8
-	add	r4, r2, #2928
-	ldr	fp, .L311+8
-	mov	r7, #0
-	ldrb	r1, [r1, #3768]	@ zero_extendqisi2
-	mov	r5, #55
-	add	r2, r2, r1, asl #3
-	add	r4, r4, r1, asl #6
-	ldrb	sl, [r2, #20]	@ zero_extendqisi2
-	ldr	r1, [r2, #16]
-	add	sl, sl, #8
-	add	sl, r1, sl, asl #8
-.L260:
-	add	r2, fp, r7
-	str	r5, [sl, #8]
-	mov	r0, #80
-	ldrb	r2, [r2, #4]	@ zero_extendqisi2
-	str	r2, [sl, #4]
-	str	r3, [sp, #8]
-	bl	NandcDelayns
-	ldr	r2, [sl, #0]
-	strb	r2, [r4, r7]
-	add	r7, r7, #1
-	ldr	r3, [sp, #8]
-	uxtb	r2, r7
-	cmp	r2, r6
-	bcc	.L260
-	mov	r2, #0
-	b	.L261
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.global	__aeabi_idiv
+	.align	2
+	.global	NandcTimeCfg
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r0, #0
+	bl	rknand_get_clk_rate
+	ldr	r1, .L269
+	bl	__aeabi_idiv
+	ldr	r3, .L269+4
+	ldr	r3, [r3, #3012]
+	cmp	r0, #250
+	movwgt	r2, #8354
+	bgt	.L267
+	cmp	r0, #220
+	bgt	.L268
 .L262:
-	ldrb	r7, [r0, r1, asl #2]	@ zero_extendqisi2
-	ldrb	r5, [r4, r2]	@ zero_extendqisi2
-	add	r5, r7, r5
-	strb	r5, [ip, r1, asl #3]
-	add	r1, r1, #1
-	cmp	r1, #7
-	bne	.L262
-	add	r2, r2, #1
-	cmp	r2, #4
-	beq	.L263
-.L261:
-	mov	r1, #1
-	add	ip, r4, r2
-	add	r0, r2, r9
-	b	.L262
-.L263:
-	add	r8, r8, #1
-	mov	r2, #0
-	strb	r2, [r4, #16]
-	strb	r2, [r4, #24]
-	uxtb	r8, r8
-	strb	r2, [r4, #32]
-	strb	r2, [r4, #40]
-	strb	r2, [r4, #48]
-	strb	r2, [r4, #41]
-	strb	r2, [r4, #49]
-	b	.L258
-.L310:
-	ldr	r9, .L311+12
-	mov	r3, r6
-	mov	r8, #0
-	mov	r6, r5
-.L258:
-	ldr	r2, .L311
-	ldrb	r1, [r2, #3766]	@ zero_extendqisi2
-	cmp	r1, r8
-	bhi	.L264
-	mov	r5, r6
-	mov	r6, r3
-	b	.L265
-.L305:
-	sub	r3, r4, #3
-	cmp	r3, #3
-	bhi	.L265
-	mul	r3, r6, r5
-	ldr	r8, .L311
-	str	r6, [sp, #44]
-	mov	r2, r3, asr #2
-	mov	r3, r3, asl #4
-	str	r3, [sp, #52]
-	mov	r3, #0
-	str	r2, [sp, #24]
-	mov	r7, r3
-	str	r3, [sp, #12]
-	b	.L266
-.L291:
-	ldr	ip, [sp, #12]
-	ldr	r1, .L311+16
-	add	r3, r8, ip
-	ldrb	r6, [r3, #3768]	@ zero_extendqisi2
-	add	r3, r8, r6, asl #3
-	mov	r0, r6
-	add	r1, r1, r6, asl #6
-	str	r1, [sp, #48]
-	ldrb	fp, [r3, #20]	@ zero_extendqisi2
-	ldr	r9, [r3, #16]
-	mov	r3, #255
-	add	fp, fp, #8
-	add	sl, r9, fp, asl #8
-	str	r3, [sl, #8]
-	str	r3, [sp, #8]
-	bl	NandcWaitFlashReady
-	cmp	r4, #4
-	mov	r2, #54
-	str	r2, [sl, #8]
-	ldr	r3, [sp, #8]
-	streq	r3, [sl, #4]
-	moveq	r3, #64
-	streq	r3, [r9, fp, asl #8]
-	moveq	r3, #204
-	beq	.L308
+	cmp	r0, #185
+	movwgt	r2, #4226
+	bgt	.L267
+	cmp	r0, #160
+	movwgt	r2, #4194
+	bgt	.L267
+	cmp	r4, #35
+	movwls	r2, #4193
+	bls	.L267
+	cmp	r4, #99
+	movwls	r2, #4225
+	bls	.L267
+.L268:
+	movw	r2, #8322
 .L267:
-	sub	r3, r4, #5
-	cmp	r3, #1
-	ldrls	r2, .L311+8
-	ldrlsb	r3, [r2, #4]	@ zero_extendqisi2
-	strls	r3, [sl, #4]
-	movls	r3, #82
-	bls	.L309
+	str	r2, [r3, #4]
+	ldmfd	sp!, {r4, pc}
+.L270:
+	.align	2
 .L269:
-	mov	r3, #174
-	str	r3, [sl, #4]
-	mov	r3, #176
-	str	r7, [r9, fp, asl #8]
-.L308:
-	str	r3, [sl, #4]
-	mov	r3, #77
-.L309:
-	cmp	r4, #6
-	str	r3, [r9, fp, asl #8]
-	mov	r0, r6
-	mov	r3, #22
-	str	r3, [sl, #8]
-	mov	r3, #23
-	str	r3, [sl, #8]
-	mov	r3, #4
-	str	r3, [sl, #8]
-	mov	r3, #25
-	str	r3, [sl, #8]
-	moveq	r3, #31
-	str	r7, [sl, #8]
-	str	r7, [sl, #4]
-	str	r7, [sl, #4]
-	streq	r3, [sl, #4]
-	mov	r3, #2
-	strne	r7, [sl, #4]
-	str	r3, [sl, #4]
-	mov	r3, #48
-	str	r7, [sl, #4]
-	str	r3, [sl, #8]
-	bl	NandcWaitFlashReady
-	sub	r3, r4, #5
-	cmp	r3, #1
-	str	r3, [sp, #28]
-	mov	r3, #0
-	movls	r2, #16
-	movhi	r2, #2
-.L273:
-	add	r3, r3, #1
-	ldr	r1, [sl, #0]
-	uxtb	r3, r3
-	cmp	r3, r2
-	bcc	.L273
-	ldr	ip, [r8, #3780]
-	mov	r3, #0
-	str	ip, [sp, #32]
-.L274:
-	ldr	r2, [sl, #0]
-	ldr	lr, [sp, #32]
-	strb	r2, [lr, r3]
-	add	r3, r3, #1
-	ldr	r2, [sp, #52]
-	cmp	r3, r2
-	blt	.L274
-	ldr	r3, [sp, #24]
-	mov	ip, r3, asl #2
-	mov	lr, r3, asl #3
-	ldr	r3, .L311
-	str	ip, [sp, #40]
-	ldr	r1, [r3, #3780]
-	mov	r3, #8
-	add	r1, r1, ip
-.L276:
-	mov	r2, #0
-	mov	r0, r2
-.L275:
-	ldr	ip, [r1, r2]
-	add	r0, r0, #1
-	mvn	ip, ip
-	str	ip, [r1, r2]
-	ldr	ip, [sp, #24]
-	add	r2, r2, #4
-	cmp	r0, ip
-	blt	.L275
-	subs	r3, r3, #1
-	add	r1, r1, lr
-	bne	.L276
-	str	r3, [sp, #20]
-	str	r5, [sp, #60]
-	b	.L277
-.L281:
-	mov	lr, #1
-	mov	r0, #0
-	mov	ip, lr, asl r2
-	mov	lr, r0
-	mov	r5, #16
-	str	r3, [sp, #0]
-	str	r5, [sp, #16]
-.L279:
-	ldr	r3, [sp, #56]
-	ldr	r3, [r3, r0]
-	and	r5, ip, r3
-	ldr	r3, [sp, #16]
-	cmp	r5, ip
-	ldr	r5, [sp, #40]
-	addeq	lr, lr, #1
-	subs	r3, r3, #1
-	add	r0, r0, r5
-	str	r3, [sp, #16]
-	bne	.L279
-	cmp	lr, #8
-	add	r2, r2, #1
-	orrhi	r1, r1, ip
-	cmp	r2, #32
-	ldr	r3, [sp, #0]
-	bne	.L281
-	ldr	ip, [sp, #20]
-	ldr	r2, [sp, #24]
-	add	ip, ip, #1
-	ldr	r5, [sp, #36]
-	cmp	ip, r2
-	str	ip, [sp, #20]
-	str	r1, [r5, r3]
-	add	r3, r3, #4
-	bge	.L282
-.L277:
-	ldr	r5, [r8, #3780]
-	mov	r1, #0
-	mov	r2, r1
-	add	ip, r5, r3
-	str	ip, [sp, #56]
-	str	r5, [sp, #36]
-	b	.L281
-.L282:
-	cmp	r4, #6
-	ldr	r5, [sp, #60]
-	ldr	r1, [sp, #48]
-	mov	r2, #0
-	moveq	lr, #4
-	movne	lr, #8
-	cmp	r5, #0
-	str	lr, [sp, #20]
-	subne	r3, r5, #1
-	moveq	r0, #1
-	streq	r0, [sp, #16]
-	uxtbne	r3, r3
-	ldr	r0, [sp, #32]
-	addne	r3, r3, #1
-	strne	r3, [sp, #16]
-	b	.L286
-.L287:
-	ldrb	lr, [ip], #1	@ zero_extendqisi2
-	strb	lr, [r1, r3]
-	add	r3, r3, #1
-	uxtb	lr, r3
-	cmp	lr, r5
-	bcc	.L287
-	ldr	r3, [sp, #16]
-	add	r2, r2, #1
-	ldr	ip, [sp, #20]
-	add	r0, r0, r3
-	ldr	r3, [sp, #44]
-	add	r1, r1, ip
-	cmp	r2, r3
-	bge	.L288
-.L286:
-	mov	ip, r0
-	mov	r3, #0
-	b	.L287
-.L288:
-	mov	r3, #255
-	mov	r0, r6
-	str	r3, [sl, #8]
-	bl	NandcWaitFlashReady
-	ldr	ip, [sp, #28]
-	cmp	ip, #1
-	movhi	r3, #56
-	strhi	r3, [sl, #8]
-	bhi	.L290
-	ldr	lr, .L311+8
-	mov	r3, #54
-	str	r3, [sl, #8]
-	mvn	r1, #0
-	ldr	r0, [sp, #12]
-	ldrb	r3, [lr, #4]	@ zero_extendqisi2
-	str	r3, [sl, #4]
-	mov	r3, #22
-	str	r7, [r9, fp, asl #8]
-	str	r3, [sl, #8]
-	bl	FlashReadCmd
-.L290:
-	mov	r0, r6
-	bl	NandcWaitFlashReady
-	ldr	r2, [sp, #12]
-	add	r3, r2, #1
-	uxtb	r3, r3
-	str	r3, [sp, #12]
-.L266:
-	ldrb	r3, [r8, #3766]	@ zero_extendqisi2
-	ldr	ip, [sp, #12]
-	cmp	r3, ip
-	bhi	.L291
-	ldr	r6, [sp, #44]
-.L265:
-	ldr	r3, .L311
-	strb	r5, [r3, #2909]
-	strb	r6, [r3, #2910]
-	add	sp, sp, #68
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L312:
-	.align	2
-.L311:
-	.word	.LANCHOR0
-	.word	.LANCHOR1
-	.word	.LANCHOR0+2908
-	.word	.LANCHOR1+2932
-	.word	.LANCHOR0+2928
-	.fnend
-	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
-	.align	2
-	.global	FlashGetReadRetryDefault
-	.type	FlashGetReadRetryDefault, %function
-FlashGetReadRetryDefault:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	subs	r3, r0, #0
-	ldmeqfd	sp!, {r3, pc}
-	sub	r2, r3, #1
-	cmp	r2, #5
-	bhi	.L315
-	ldmfd	sp!, {r3, lr}
-	b	HynixGetReadRetryDefault
-.L315:
-	cmp	r3, #49
-	bne	.L316
-	ldr	r0, .L322
-	mov	r2, #64
-	ldr	r1, .L322+4
-	strb	r3, [r0, #2908]
-	mov	r3, #4
-	strb	r3, [r0, #2909]
-	mov	r3, #15
-	strb	r3, [r0, #2910]
-	add	r0, r0, #2912
-	b	.L320
-.L316:
-	cmp	r3, #33
-	cmpne	r3, #65
-	beq	.L317
-	cmp	r3, #66
-	bne	.L318
-.L317:
-	ldr	r0, .L322
-	strb	r3, [r0, #2908]
-	mov	r3, #4
-	b	.L321
-.L318:
-	cmp	r3, #34
-	cmpne	r3, #67
-	bne	.L319
-	ldr	r0, .L322
-	strb	r3, [r0, #2908]
-	mov	r3, #5
-.L321:
-	strb	r3, [r0, #2909]
-	mov	r2, #45
-	mov	r3, #7
-	ldr	r1, .L322+8
-	strb	r3, [r0, #2910]
-	add	r0, r0, #2912
-	b	.L320
-.L319:
-	cmp	r3, #35
-	cmpne	r3, #68
-	ldmnefd	sp!, {r3, pc}
-	ldr	r0, .L322
-	mov	r2, #95
-	ldr	r1, .L322+12
-	strb	r3, [r0, #2908]
-	mov	r3, #5
-	strb	r3, [r0, #2909]
-	mov	r3, #17
-	strb	r3, [r0, #2910]
-	add	r0, r0, #2912
-.L320:
-	bl	memcpy
-	ldmfd	sp!, {r3, pc}
-.L323:
-	.align	2
-.L322:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+2720
-	.word	.LANCHOR1+2784
-	.word	.LANCHOR1+2829
-	.fnend
-	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
-	.align	2
-	.global	NandcRandmzSel
-	.type	NandcRandmzSel, %function
-NandcRandmzSel:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L325
-	add	r3, r3, r0, asl #3
-	ldr	r3, [r3, #16]
-	str	r1, [r3, #336]
-	bx	lr
-.L326:
-	.align	2
-.L325:
-	.word	.LANCHOR0
-	.fnend
-	.size	NandcRandmzSel, .-NandcRandmzSel
-	.global	__aeabi_idiv
-	.align	2
-	.global	NandcTimeCfg
-	.type	NandcTimeCfg, %function
-NandcTimeCfg:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, lr}
-	.save {r4, lr}
-	mov	r4, r0
-	mov	r0, #0
-	bl	rknand_get_clk_rate
-	ldr	r1, .L337
-	bl	__aeabi_idiv
-	ldr	r3, .L337+4
-	ldr	r3, [r3, #2164]
-	cmp	r0, #250
-	movwgt	r2, #8354
-	bgt	.L335
-	cmp	r0, #220
-	bgt	.L336
-.L330:
-	cmp	r0, #185
-	movwgt	r2, #4226
-	bgt	.L335
-	cmp	r0, #160
-	movwgt	r2, #4194
-	bgt	.L335
-	cmp	r4, #35
-	movwls	r2, #4193
-	bls	.L335
-	cmp	r4, #99
-	movwls	r2, #4225
-	bls	.L335
-.L336:
-	movw	r2, #8322
-.L335:
-	str	r2, [r3, #4]
-	ldmfd	sp!, {r4, pc}
-.L338:
-	.align	2
-.L337:
 	.word	1000000
 	.word	.LANCHOR0
 	.fnend
@@ -2523,52 +2023,52 @@ NandcInit:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, #0
-	ldr	r4, .L340
+	ldr	r4, .L272
 	mov	r3, #1
-	str	r0, [r4, #2164]
-	str	r0, [r4, #16]
-	str	r3, [r4, #28]
+	str	r0, [r4, #3012]
+	str	r0, [r4, #864]
+	str	r3, [r4, #876]
 	mov	r3, #2
-	str	r0, [r4, #24]
-	str	r3, [r4, #36]
+	str	r0, [r4, #872]
+	str	r3, [r4, #884]
 	mov	r3, #3
-	str	r0, [r4, #32]
-	str	r0, [r4, #40]
-	str	r5, [r4, #20]
-	str	r3, [r4, #44]
+	str	r0, [r4, #880]
+	str	r0, [r4, #888]
+	str	r5, [r4, #868]
+	str	r3, [r4, #892]
 	ldr	r3, [r0, #0]
 	and	r3, r3, #253952
 	ubfx	r2, r3, #13, #1
-	str	r2, [r4, #3784]
+	str	r2, [r4, #3776]
 	ldr	r2, [r0, #352]
 	and	r3, r3, #245760
 	orr	r3, r3, #256
 	ubfx	r2, r2, #16, #4
-	str	r2, [r4, #12]
+	str	r2, [r4, #3780]
 	ldr	r2, [r0, #352]
-	str	r2, [r4, #3788]
+	str	r2, [r4, #3784]
 	str	r3, [r0, #0]
 	mov	r0, #40
-	ldr	r3, [r4, #2164]
+	ldr	r3, [r4, #3012]
 	str	r5, [r3, #336]
 	bl	NandcTimeCfg
-	ldr	r3, [r4, #2164]
+	ldr	r3, [r4, #3012]
 	movw	r2, #8322
 	mov	r0, #36864
 	str	r2, [r3, #344]
-	ldr	r2, .L340+4
+	ldr	r2, .L272+4
 	str	r2, [r3, #304]
 	bl	ftl_malloc
-	str	r5, [r4, #3820]
-	str	r5, [r4, #3828]
+	str	r5, [r4, #3816]
+	str	r5, [r4, #3824]
+	str	r0, [r4, #3788]
 	str	r0, [r4, #3792]
-	str	r0, [r4, #3796]
 	add	r0, r0, #32768
-	str	r0, [r4, #3800]
+	str	r0, [r4, #3796]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L341:
+.L273:
 	.align	2
-.L340:
+.L272:
 	.word	.LANCHOR0
 	.word	1710593
 	.fnend
@@ -2586,23 +2086,23 @@ FlashTimingCfg:
 	sub	r3, r3, #33
 	cmp	r0, r2
 	cmpne	r3, #1
-	bls	.L343
+	bls	.L275
 	movw	r3, #4226
 	movw	r2, #8322
 	cmp	r0, r3
 	cmpne	r0, r2
-	bne	.L344
-.L343:
-	ldr	r3, .L345
-	ldr	r3, [r3, #2164]
+	bne	.L276
+.L275:
+	ldr	r3, .L277
+	ldr	r3, [r3, #3012]
 	str	r0, [r3, #4]
-.L344:
-	ldr	r3, .L345+4
-	ldrb	r0, [r3, #2709]	@ zero_extendqisi2
+.L276:
+	ldr	r3, .L277+4
+	ldrb	r0, [r3, #2849]	@ zero_extendqisi2
 	b	NandcTimeCfg
-.L346:
+.L278:
 	.align	2
-.L345:
+.L277:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -2614,28 +2114,28 @@ NandcGetTimeCfg:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L348
+	ldr	ip, .L280
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r4, [ip, #2164]
+	ldr	r4, [ip, #3012]
 	ldr	r4, [r4, #4]
 	str	r4, [r0, #0]
-	ldr	r0, [ip, #2164]
+	ldr	r0, [ip, #3012]
 	ldr	r0, [r0, #0]
 	str	r0, [r1, #0]
-	ldr	r1, [ip, #2164]
+	ldr	r1, [ip, #3012]
 	ldr	r1, [r1, #304]
 	str	r1, [r2, #0]
-	ldr	r2, [ip, #2164]
+	ldr	r2, [ip, #3012]
 	ldr	r0, [r2, #308]
 	ldr	r1, [r2, #344]
 	uxtb	r2, r0
 	orr	r2, r2, r1, asl #16
 	str	r2, [r3, #0]
 	ldmfd	sp!, {r4, pc}
-.L349:
+.L281:
 	.align	2
-.L348:
+.L280:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
@@ -2647,34 +2147,34 @@ NandcBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L355
+	ldr	r3, .L287
 	mov	r1, #1
-	ldr	r2, [r3, #2164]
-	str	r0, [r3, #3832]
+	ldr	r2, [r3, #3012]
+	str	r0, [r3, #3828]
 	mov	r3, #0
 	str	r1, [r2, #8]
 	mov	r1, #16
 	cmp	r0, r1
 	bfi	r3, r1, #8, #8
 	bfc	r3, #18, #1
-	beq	.L354
-.L351:
+	beq	.L286
+.L283:
 	cmp	r0, #24
 	orreq	r3, r3, #16
-	beq	.L352
+	beq	.L284
 	cmp	r0, #40
 	orr	r3, r3, #262144
 	orr	r3, r3, #16
-	bne	.L352
-.L354:
+	bne	.L284
+.L286:
 	bfc	r3, #4, #1
-.L352:
+.L284:
 	orr	r3, r3, #1
 	str	r3, [r2, #12]
 	bx	lr
-.L356:
+.L288:
 	.align	2
-.L355:
+.L287:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcBchSel, .-NandcBchSel
@@ -2686,12 +2186,12 @@ FlashBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L358
-	strb	r0, [r3, #3836]
+	ldr	r3, .L290
+	strb	r0, [r3, #3832]
 	b	NandcBchSel
-.L359:
+.L291:
 	.align	2
-.L358:
+.L290:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashBchSel, .-FlashBchSel
@@ -2705,62 +2205,62 @@ FlashResume:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, #0
-	ldr	r3, .L365
-	ldr	r5, .L365+4
-	ldr	r2, [r3, #2164]
-	ldr	r1, [r3, #2168]
+	ldr	r3, .L297
+	ldr	r5, .L297+4
+	ldr	r2, [r3, #3012]
+	ldr	r1, [r3, #3016]
 	str	r1, [r2, #0]
-	ldr	r1, [r3, #2172]
-	ldr	r2, [r3, #2164]
+	ldr	r1, [r3, #3020]
+	ldr	r2, [r3, #3012]
 	str	r1, [r2, #4]
-	ldr	r1, [r3, #2176]
+	ldr	r1, [r3, #3024]
 	str	r1, [r2, #8]
-	ldr	r1, [r3, #2180]
+	ldr	r1, [r3, #3028]
 	str	r1, [r2, #12]
-	ldr	r1, [r3, #2184]
+	ldr	r1, [r3, #3032]
 	str	r1, [r2, #304]
-	ldr	r1, [r3, #2188]
+	ldr	r1, [r3, #3036]
 	str	r1, [r2, #308]
-	ldr	r1, [r3, #2192]
-	ldr	r3, [r3, #2196]
+	ldr	r1, [r3, #3040]
+	ldr	r3, [r3, #3044]
 	str	r1, [r2, #336]
 	str	r3, [r2, #344]
-.L362:
+.L294:
 	ldrb	r3, [r5, r4, asl #3]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L361
+	bhi	.L293
 	uxtb	r0, r4
 	bl	FlashReset
-.L361:
+.L293:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L362
-	ldr	r4, .L365
-	ldrb	r3, [r4, #3777]	@ zero_extendqisi2
+	bne	.L294
+	ldr	r4, .L297
+	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L363
+	beq	.L295
 	mov	r0, #1
 	bl	NandcSetMode
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	NandcSetMode
-	ldrb	r0, [r4, #2185]	@ zero_extendqisi2
+	ldrb	r0, [r4, #3033]	@ zero_extendqisi2
 	bl	NandcSetDdrPara
-.L363:
-	ldr	r3, .L365
-	ldr	r3, [r3, #2776]
+.L295:
+	ldr	r3, .L297
+	ldr	r3, [r3, #3624]
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L366:
+.L298:
 	.align	2
-.L365:
+.L297:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2132
+	.word	.LANCHOR0+2980
 	.fnend
 	.size	FlashResume, .-FlashResume
 	.align	2
@@ -2845,10 +2345,10 @@ NandcIqrWaitFlashReady:
 	and	r3, r3, #2
 	uxtb	r3, r3
 	cmp	r3, #0
-	bne	.L372
+	bne	.L304
 	ldmfd	sp!, {r4, lr}
 	b	wait_for_nand_flash_ready
-.L372:
+.L304:
 	mov	r1, #1
 	ldmfd	sp!, {r4, lr}
 	b	NandCIrqDisable
@@ -2865,18 +2365,18 @@ FlashEraseBlocks:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r5, .L388
+	ldr	r5, .L321
 	mov	r6, r0
 	str	r1, [sp, #12]
 	mov	r7, r2
-	ldrb	r4, [r5, #0]	@ zero_extendqisi2
+	ldrb	r4, [r5, #852]	@ zero_extendqisi2
 	cmp	r4, #0
 	moveq	r9, r5
-	beq	.L374
+	beq	.L306
 	mov	r1, r2
 	bl	FlashEraseSLc2KBlocks
-	b	.L375
-.L382:
+	b	.L307
+.L315:
 	mov	r8, #36
 	rsb	r3, r4, r7
 	mul	r8, r8, r4
@@ -2888,56 +2388,59 @@ FlashEraseBlocks:
 	add	fp, r6, r8
 	mov	r0, fp
 	bl	LogAddr2PhyAddr
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	mov	sl, r0
 	ldr	r0, [sp, #20]
 	cmp	r0, r3
 	mvncs	r3, #0
 	strcs	r3, [r6, r8]
-	bcs	.L377
-	ldrb	r3, [r5, #3837]	@ zero_extendqisi2
+	bcs	.L309
+	ldrb	r3, [r5, #3833]	@ zero_extendqisi2
 	cmp	r3, #0
 	add	r3, r9, r0, asl #4
-	ldr	r3, [r3, #2788]
+	ldr	r3, [r3, #3636]
 	moveq	sl, #0
 	cmp	r3, #0
-	beq	.L379
+	beq	.L311
 	uxtb	r0, r0
 	bl	FlashWaitCmdDone
-.L379:
+.L311:
 	ldr	r2, [sp, #20]
 	mov	r1, #0
 	cmp	sl, #0
 	add	r3, r5, r2, asl #4
 	movne	r0, #36
-	str	r1, [r3, #2792]
+	str	r1, [r3, #3640]
 	ldr	r1, [sp, #16]
-	str	fp, [r3, #2788]
-	str	r1, [r3, #2784]
+	str	fp, [r3, #3636]
+	str	r1, [r3, #3632]
 	addne	r1, r4, #1
 	mlane	r1, r0, r1, r6
-	strne	r1, [r3, #2792]
+	strne	r1, [r3, #3640]
 	add	r3, r9, r2
 	add	r2, r9, r2, asl #4
-	ldrb	r8, [r3, #3768]	@ zero_extendqisi2
-	strb	r8, [r2, #2780]
+	ldrb	r8, [r3, #3764]	@ zero_extendqisi2
 	mov	r0, r8
+	strb	r8, [r2, #3628]
 	bl	NandcFlashCs
 	ldr	r3, [sp, #12]
+	mov	r0, r8
 	cmp	r3, #1
-	bne	.L381
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
+	bne	.L313
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L381
-	mov	r0, r8
+	beq	.L313
 	bl	flash_enter_slc_mode
-.L381:
+	b	.L314
+.L313:
+	bl	flash_exit_slc_mode
+.L314:
 	ldr	r3, [sp, #20]
 	mov	r0, r8
 	ldr	r1, [sp, #16]
 	add	r4, r4, sl
 	add	r3, r5, r3, asl #2
-	ldr	r2, [r3, #2740]
+	ldr	r2, [r3, #3588]
 	adds	r2, r2, #0
 	movne	r2, #1
 	bl	FlashWaitReadyEN
@@ -2947,43 +2450,43 @@ FlashEraseBlocks:
 	bl	FlashEraseCmd
 	mov	r0, r8
 	bl	NandcFlashDeCs
-.L377:
+.L309:
 	add	r4, r4, #1
-.L374:
+.L306:
 	cmp	r4, r7
-	bcc	.L382
-	ldr	r5, .L388
+	bcc	.L315
+	ldr	r5, .L321
 	mov	r4, #0
-	ldr	r6, .L388+4
-	ldr	r0, [r5, #2164]
+	ldr	r6, .L321+4
+	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-	b	.L383
-.L385:
+	b	.L316
+.L318:
 	uxtb	r0, r4
 	bl	FlashWaitCmdDone
 	ldr	r3, [sp, #12]
 	cmp	r3, #1
-	bne	.L384
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
+	bne	.L317
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L384
+	beq	.L317
 	ldrb	r0, [r6, r4, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L384:
+.L317:
 	add	r4, r4, #1
-.L383:
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+.L316:
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcc	.L385
+	bcc	.L318
 	mov	r0, #0
-.L375:
+.L307:
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L389:
+.L322:
 	.align	2
-.L388:
+.L321:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2780
+	.word	.LANCHOR0+3628
 	.fnend
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
@@ -3009,7 +2512,7 @@ NandcSendDumpDataStart:
 	ldr	r2, [r0, #16]
 	.pad #8
 	sub	sp, sp, #8
-	ldr	r3, .L392
+	ldr	r3, .L325
 	str	r2, [sp, #4]
 	ldr	r2, [sp, #4]
 	bfc	r2, #2, #1
@@ -3021,9 +2524,9 @@ NandcSendDumpDataStart:
 	str	r3, [r0, #8]
 	add	sp, sp, #8
 	bx	lr
-.L393:
+.L326:
 	.align	2
-.L392:
+.L325:
 	.word	538969130
 	.fnend
 	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
@@ -3037,12 +2540,12 @@ NandcSendDumpDataDone:
 	@ link register save eliminated.
 	.pad #8
 	sub	sp, sp, #8
-.L395:
+.L328:
 	ldr	r3, [r0, #8]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #1048576
-	beq	.L395
+	beq	.L328
 	add	sp, sp, #8
 	bx	lr
 	.fnend
@@ -3057,15 +2560,15 @@ NandcXferStart:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L410
+	ldr	r2, .L343
 	mov	ip, #16
 	mov	r6, r1
 	mov	r4, #0
 	add	r0, r2, r0, asl #3
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r5, [r0, #16]
-	ldrb	r0, [r0, #20]	@ zero_extendqisi2
+	ldr	r5, [r0, #864]
+	ldrb	r0, [r0, #868]	@ zero_extendqisi2
 	ldr	r9, [sp, #56]
 	ldr	r7, [r5, #12]
 	ldr	r1, [sp, #60]
@@ -3080,9 +2583,9 @@ NandcXferStart:
 	mov	r3, r3, lsr r0
 	orr	r4, r4, #1024
 	bfi	r4, r3, #4, #1
-	ldr	r3, [r2, #12]
+	ldr	r3, [r2, #3780]
 	cmp	r3, #3
-	bls	.L398
+	bls	.L331
 	ldr	r3, [r5, #16]
 	cmp	r9, #0
 	cmpeq	r1, #0
@@ -3090,10 +2593,10 @@ NandcXferStart:
 	ldr	r3, [sp, #12]
 	bfc	r3, #2, #1
 	str	r3, [sp, #12]
-	beq	.L399
+	beq	.L332
 	cmp	r6, #0
-	beq	.L400
-	ldr	r3, [r2, #3832]
+	beq	.L333
+	ldr	r3, [r2, #3828]
 	mov	ip, r1
 	cmp	r3, #24
 	movhi	r3, #128
@@ -3103,26 +2606,26 @@ NandcXferStart:
 	str	r3, [sp, #4]
 	mov	r3, #0
 	mov	r0, r3
-	b	.L402
-.L405:
+	b	.L335
+.L338:
 	cmp	r1, #0
 	mov	lr, r3, lsr #2
 	add	r0, r0, #1
 	ldrneh	fp, [ip, #2]
 	mvneq	fp, #0
 	ldrneh	sl, [ip], #4
-	ldreq	sl, [r2, #3800]
+	ldreq	sl, [r2, #3796]
 	orrne	sl, sl, fp, asl #16
-	ldrne	fp, [r2, #3800]
+	ldrne	fp, [r2, #3796]
 	streq	fp, [sl, lr, asl #2]
 	strne	sl, [fp, lr, asl #2]
 	ldr	lr, [sp, #0]
 	add	r3, r3, lr
-.L402:
+.L335:
 	ldr	sl, [sp, #4]
 	cmp	r0, sl
-	bcc	.L405
-.L400:
+	bcc	.L338
+.L333:
 	mov	r0, r5
 	add	r8, r8, #1
 	bl	rk_nandc_xfer_irq_flag_init
@@ -3131,30 +2634,30 @@ NandcXferStart:
 	mov	r8, r8, asr #1
 	bl	NandCIrqEnable
 	bfi	r4, r8, #22, #6
-	ldr	r8, .L410
+	ldr	r8, .L343
 	cmp	r9, #0
 	ubfx	sl, r4, #22, #5
 	mov	r2, r6
 	movne	r0, r9
-	ldreq	r0, [r8, #3796]
+	ldreq	r0, [r8, #3792]
 	mov	r1, sl, asl #10
-	ldr	r3, [r8, #3800]
-	str	r3, [r8, #3808]
-	str	r0, [r8, #3804]
+	ldr	r3, [r8, #3796]
+	str	r3, [r8, #3804]
+	str	r0, [r8, #3800]
 	bl	rknand_dma_map_single
 	mov	r2, r6
 	mov	r1, sl, asl #7
-	str	r0, [r8, #3812]
-	ldr	r0, [r8, #3808]
+	str	r0, [r8, #3808]
+	ldr	r0, [r8, #3804]
 	bl	rknand_dma_map_single
 	mov	r3, #1
-	str	r3, [r8, #3820]
+	str	r3, [r8, #3816]
 	mov	r2, #16
-	ldr	r3, [r8, #3812]
+	ldr	r3, [r8, #3808]
 	tst	r9, #3
-	str	r0, [r8, #3816]
+	str	r0, [r8, #3812]
 	str	r3, [r5, #20]
-	ldr	r3, [r8, #3816]
+	ldr	r3, [r8, #3812]
 	str	r3, [r5, #24]
 	mov	r3, #0
 	str	r3, [sp, #12]
@@ -3179,19 +2682,19 @@ NandcXferStart:
 	ldr	r3, [sp, #12]
 	orr	r3, r3, #1
 	str	r3, [sp, #12]
-.L399:
+.L332:
 	ldr	r3, [sp, #12]
 	str	r3, [r5, #16]
-.L398:
+.L331:
 	str	r7, [r5, #12]
 	str	r4, [r5, #8]
 	orr	r4, r4, #4
 	str	r4, [r5, #8]
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L411:
+.L344:
 	.align	2
-.L410:
+.L343:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferStart, .-NandcXferStart
@@ -3210,14 +2713,14 @@ NandcCopy1KB:
 	mov	r4, r0
 	ldr	r6, [sp, #16]
 	add	r2, r2, r5, asl #9
-	bne	.L413
+	bne	.L346
 	cmp	r3, #0
-	beq	.L414
+	beq	.L347
 	mov	r0, r2
 	mov	r1, r3
 	mov	r2, #1024
 	bl	memcpy
-.L414:
+.L347:
 	cmp	r6, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	ldrb	r3, [r6, #2]	@ zero_extendqisi2
@@ -3235,14 +2738,14 @@ NandcCopy1KB:
 	add	r5, r5, #128
 	str	r3, [r4, r5, asl #2]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L413:
+.L346:
 	cmp	r3, #0
-	beq	.L416
+	beq	.L349
 	mov	r1, r2
 	mov	r0, r3
 	mov	r2, #1024
 	bl	memcpy
-.L416:
+.L349:
 	cmp	r6, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	mov	r5, r5, lsr #1
@@ -3271,14 +2774,14 @@ Ftl_log2:
 	@ link register save eliminated.
 	mov	r2, #1
 	mov	r3, #0
-	b	.L418
-.L419:
+	b	.L351
+.L352:
 	add	r3, r3, #1
 	mov	r2, r2, asl #1
 	uxth	r3, r3
-.L418:
+.L351:
 	cmp	r2, r0
-	bls	.L419
+	bls	.L352
 	sub	r3, r3, #1
 	uxth	r0, r3
 	bx	lr
@@ -3303,27 +2806,27 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L424
-	movw	r2, #3844
+	ldr	r3, .L357
+	mov	r2, #3840
 	cmp	r0, #23
-	movw	r1, #3854
+	movw	r1, #3850
 	ldrh	r2, [r3, r2]
 	movls	r0, #24
 	ldrh	r1, [r3, r1]
-	str	r0, [r3, #3840]
+	str	r0, [r3, #3836]
 	mul	r2, r2, r0
 	rsb	r0, r0, r1
-	movw	r1, #3852
+	movw	r1, #3848
 	strh	r0, [r3, r1]	@ movhi
 	mov	r0, #0
-	ldr	r1, [r3, #3860]
-	str	r2, [r3, #3848]
+	ldr	r1, [r3, #3856]
+	str	r2, [r3, #3844]
 	rsb	r2, r2, r1
-	str	r2, [r3, #3856]
+	str	r2, [r3, #3852]
 	bx	lr
-.L425:
+.L358:
 	.align	2
-.L424:
+.L357:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -3336,8 +2839,8 @@ FtlConstantsInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r2, #3864
-	ldr	r3, .L440
+	movw	r2, #3860
+	ldr	r3, .L374
 	mov	r4, r0
 	ldrh	lr, [r0, #8]
 	.pad #20
@@ -3350,20 +2853,20 @@ FtlConstantsInit:
 	strh	r1, [r3, r2]	@ movhi
 	add	r2, r2, #2
 	strh	r0, [r3, r2]	@ movhi
-	movw	r2, #3854
+	movw	r2, #3850
 	strh	r6, [r3, r2]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L440+4
-.L427:
+	ldr	r2, .L374+4
+.L360:
 	strb	r3, [r3, r2]
 	add	r3, r3, #1
 	cmp	r3, #32
-	bne	.L427
+	bne	.L360
 	ldrh	r2, [r4, #14]
 	ldrh	r3, [r4, #20]
 	cmp	r3, r2, lsr #8
-	bcs	.L428
-	ldr	r2, .L440+4
+	bcs	.L361
+	ldr	r2, .L374+4
 	sub	ip, r1, #1
 	uxtb	r7, r0
 	mov	r3, #0
@@ -3373,22 +2876,22 @@ FtlConstantsInit:
 	mov	r8, r7, asl #1
 	uxtb	r8, r8
 	str	ip, [sp, #12]
-	b	.L429
-.L430:
+	b	.L362
+.L363:
 	strb	ip, [r9, r2]
 	add	fp, ip, r7
 	add	ip, ip, r8
 	add	r5, r5, #1
 	strb	fp, [sl, r2]
 	uxtb	ip, ip
-.L432:
+.L365:
 	cmp	r5, r1
 	add	r2, r2, r0
-	bcc	.L430
+	bcc	.L363
 	add	r3, r3, #1
-.L429:
+.L362:
 	cmp	r3, r0
-	bcs	.L431
+	bcs	.L364
 	ldr	fp, [sp, #8]
 	mov	r2, #0
 	uxtb	ip, r3
@@ -3396,50 +2899,50 @@ FtlConstantsInit:
 	add	r9, fp, r3
 	ldr	fp, [sp, #12]
 	add	sl, fp, r3
-	b	.L432
-.L431:
-	ldr	r3, .L440
-	movw	r2, #3866
+	b	.L365
+.L364:
+	ldr	r3, .L374
+	movw	r2, #3862
 	mov	r1, r1, asl #1
 	mov	r6, r6, lsr #1
 	strh	r1, [r3, r2]	@ movhi
-	movw	r2, #3854
+	movw	r2, #3850
 	strh	r6, [r3, r2]	@ movhi
-.L428:
-	ldr	r3, .L440
-	movw	r2, #3902
+.L361:
+	ldr	r3, .L374
+	movw	r2, #3898
 	cmp	lr, #1
 	mov	r1, #5
 	mov	ip, #0
-	ldr	sl, .L440
-	ldrb	r8, [r3, #0]	@ zero_extendqisi2
+	ldr	sl, .L374
+	ldrb	r8, [r3, #852]	@ zero_extendqisi2
 	strh	r1, [r3, r2]	@ movhi
-	mov	r1, #3904
+	movw	r1, #3900
 	streqh	lr, [r3, r2]	@ movhi
 	cmp	r8, #0
-	movw	r2, #3906
+	movw	r2, #3902
 	strh	ip, [r3, r1]	@ movhi
 	mov	r1, #4352
 	strh	r1, [r3, r2]	@ movhi
-	ldrne	r3, .L440
+	ldrne	r3, .L374
 	movne	r1, #384
 	strneh	r1, [r3, r2]	@ movhi
-	movw	r3, #3866
+	movw	r3, #3862
 	ldrh	r5, [sl, r3]
-	movw	r3, #3844
+	mov	r3, #3840
 	mul	r5, r5, r0
 	uxth	r5, r5
 	strh	r5, [sl, r3]	@ movhi
 	add	r3, r3, #10
 	ldrh	r6, [sl, r3]
-	add	r3, r3, #54
+	mov	r3, #3904
 	mul	r0, r0, r6
 	uxth	r0, r0
 	strh	r0, [sl, r3]	@ movhi
 	bl	Ftl_log2
-	movw	r3, #3910
+	movw	r3, #3906
 	ldrh	fp, [r4, #18]
-	movw	r2, #3912
+	movw	r2, #3908
 	ldrh	r9, [r4, #20]
 	strh	r0, [sl, r3]	@ movhi
 	mov	r0, r9
@@ -3454,28 +2957,27 @@ FtlConstantsInit:
 	strh	r9, [sl, r2]	@ movhi
 	str	r3, [sp, #4]
 	bl	Ftl_log2
-	mov	r2, #3920
-	movw	r1, #3922
+	movw	r2, #3916
+	movw	r1, #3918
 	cmp	r6, #1024
 	strh	r0, [sl, r2]	@ movhi
 	mov	r2, r9, asl #9
 	mov	r7, r0
 	uxth	r2, r2
 	strh	r2, [sl, r1]	@ movhi
-	add	r1, r1, #2
+	mov	r1, #3920
 	mov	r2, r2, lsr #8
 	strh	r2, [sl, r1]	@ movhi
-	movw	r2, #3926
 	ldrh	r1, [r4, #26]
+	movw	r2, #3922
 	mov	r4, sl
 	strh	r1, [sl, r2]	@ movhi
 	uxtbhi	r1, r6
 	mul	r2, r6, r5
-	str	r2, [sl, #3860]
-	movhi	r2, #3904
+	str	r2, [sl, #3856]
+	movw	r2, #3900
 	ldr	r3, [sp, #4]
 	strhih	r1, [sl, r2]	@ movhi
-	mov	r2, #3904
 	ldrh	r2, [sl, r2]
 	mul	r1, fp, r9
 	rsb	r2, r2, r6
@@ -3484,17 +2986,17 @@ FtlConstantsInit:
 	mul	r2, r9, r2
 	mul	r3, r3, r2
 	mov	r3, r3, asr #11
-	str	r3, [sl, #3928]
-	movw	sl, #3906
+	str	r3, [sl, #3924]
+	movw	sl, #3902
 	ldrh	r0, [r4, sl]
 	mov	r0, r0, asl #3
 	bl	__aeabi_idiv
-	movw	r3, #3932
+	movw	r3, #3928
 	uxth	r0, r0
 	strh	r0, [r4, r3]	@ movhi
 	cmp	r0, #4
-	ldr	r4, .L440
-	ldrls	r2, .L440
+	ldr	r4, .L374
+	ldrls	r2, .L374
 	movls	r1, #4
 	strlsh	r1, [r2, r3]	@ movhi
 	cmp	r8, #0
@@ -3502,60 +3004,74 @@ FtlConstantsInit:
 	movne	r3, #640
 	strneh	r3, [r4, sl]	@ movhi
 	ldrh	r2, [r4, sl]
-	movw	r3, #3934
+	movw	r3, #3930
 	mov	r2, r2, asr r7
 	add	r7, r7, #9
 	mov	r6, r6, asr r7
 	add	r2, r2, #2
 	strh	r2, [r4, r3]	@ movhi
-	mov	r3, #3936
+	add	r3, r3, #2
 	uxth	r6, r6
 	strh	r6, [r4, r3]	@ movhi
 	mul	r3, r5, r6
 	add	r6, r6, #8
-	str	r3, [r4, #3940]
-	movw	r3, #3932
+	str	r3, [r4, #3936]
+	movw	r3, #3928
 	ldrh	r0, [r4, r3]
 	bl	__aeabi_uidiv
 	cmp	r5, #1
-	ldreq	r3, .L440
+	ldreq	r3, .L374
 	uxtah	r6, r6, r0
-	str	r6, [r4, #3840]
-	ldr	r4, .L440
+	str	r6, [r4, #3836]
+	ldr	r4, .L374
 	addeq	r6, r6, #4
-	streq	r6, [r3, #3840]
-	ldr	r0, [r4, #3840]
+	streq	r6, [r3, #3836]
+	ldr	r0, [r4, #3836]
 	uxth	r0, r0
 	bl	FtlSysBlkNumInit
-	ldr	r3, [r4, #3840]
-	ldr	r2, [r4, #3856]
+	ldr	r3, [r4, #3836]
+	ldr	r2, [r4, #3852]
 	mov	r0, #2048
-	str	r3, [r4, #3944]
-	movw	r3, #3912
+	str	r3, [r4, #3940]
+	movw	r3, #3908
 	ldrh	r3, [r4, r3]
 	mov	r2, r2, asl #2
 	mul	r2, r3, r2
-	mov	r3, #3920
+	movw	r3, #3916
 	ldrh	r3, [r4, r3]
 	add	r3, r3, #9
 	mov	r2, r2, lsr r3
-	movw	r3, #3948
+	movw	r3, #3944
 	add	r2, r2, #2
 	strh	r2, [r4, r3]	@ movhi
-	movw	r3, #3918
+	movw	r3, #3914
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_idiv
-	movw	r3, #3950
+	movw	r3, #3946
 	strh	r0, [r4, r3]	@ movhi
+	mov	r3, #0
+	str	r3, [r4, #3948]
+	movw	r3, #3928
+	ldrh	r1, [r4, r3]
+	add	r2, r1, #3
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r2, [r4, #3936]
+	add	r0, r2, #3
+	str	r0, [r4, #3936]
+	ldrb	r0, [r4, #928]	@ zero_extendqisi2
+	cmp	r0, #0
 	mov	r0, #0
-	str	r0, [r4, #3952]
+	addne	r1, r1, #4
+	addne	r2, r2, #5
+	strneh	r1, [r4, r3]	@ movhi
+	strne	r2, [r4, #3936]
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L441:
+.L375:
 	.align	2
-.L440:
+.L374:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3870
+	.word	.LANCHOR0+3866
 	.fnend
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
@@ -3566,36 +3082,36 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L449
-	movw	r2, #3956
+	ldr	r3, .L383
+	mov	r2, #3952
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	beq	.L447
-	movw	r2, #3932
+	beq	.L381
+	movw	r2, #3928
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r3, #3960]
+	ldr	r2, [r3, #3956]
 	mov	r3, #0
-	b	.L444
-.L446:
+	b	.L378
+.L380:
 	ldrh	ip, [r2], #2
 	cmp	ip, r0
-	beq	.L448
+	beq	.L382
 	add	r3, r3, #1
 	uxth	r3, r3
-.L444:
+.L378:
 	cmp	r3, r1
-	bne	.L446
+	bne	.L380
 	mov	r0, #0
 	bx	lr
-.L448:
+.L382:
 	mov	r0, #1
 	bx	lr
-.L447:
+.L381:
 	mov	r0, r2
 	bx	lr
-.L450:
+.L384:
 	.align	2
-.L449:
+.L383:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -3606,36 +3122,36 @@ FtlCacheMetchLpa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L459
+	ldr	r2, .L393
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r3, [r2, #3964]
+	ldr	r3, [r2, #3960]
 	cmp	r3, #0
-	beq	.L456
-	ldr	ip, [r2, #3968]
+	beq	.L390
+	ldr	ip, [r2, #3964]
 	mov	r2, #0
-.L455:
+.L389:
 	ldr	r4, [ip, #16]
 	cmp	r4, r0
-	bcc	.L453
+	bcc	.L387
 	cmp	r4, r1
-	bls	.L457
-.L453:
+	bls	.L391
+.L387:
 	add	r2, r2, #1
 	add	ip, ip, #36
 	cmp	r2, r3
-	bne	.L455
+	bne	.L389
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L457:
+.L391:
 	mov	r0, #1
 	ldmfd	sp!, {r4, pc}
-.L456:
+.L390:
 	mov	r0, r3
 	ldmfd	sp!, {r4, pc}
-.L460:
+.L394:
 	.align	2
-.L459:
+.L393:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
@@ -3647,12 +3163,12 @@ FtlGetCap:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L462
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L396
+	ldr	r0, [r3, #3948]
 	bx	lr
-.L463:
+.L397:
 	.align	2
-.L462:
+.L396:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCap, .-FtlGetCap
@@ -3664,12 +3180,12 @@ FtlGetCapacity:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L465
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L399
+	ldr	r0, [r3, #3948]
 	bx	lr
-.L466:
+.L400:
 	.align	2
-.L465:
+.L399:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCapacity, .-FtlGetCapacity
@@ -3681,12 +3197,12 @@ FtlGetLpn:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L468
-	ldr	r0, [r3, #3972]
+	ldr	r3, .L402
+	ldr	r0, [r3, #3968]
 	bx	lr
-.L469:
+.L403:
 	.align	2
-.L468:
+.L402:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLpn, .-FtlGetLpn
@@ -3698,15 +3214,15 @@ FtlGetCurEraseBlock:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L471
-	movw	r2, #3844
+	ldr	r3, .L405
+	mov	r2, #3840
 	ldrh	r2, [r3, r2]
-	ldr	r0, [r3, #3976]
+	ldr	r0, [r3, #3972]
 	mul	r0, r0, r2
 	bx	lr
-.L472:
+.L406:
 	.align	2
-.L471:
+.L405:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCurEraseBlock, .-FtlGetCurEraseBlock
@@ -3718,16 +3234,16 @@ FtlGetAllBlockNum:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L474
-	movw	r1, #3844
-	movw	r2, #3854
+	ldr	r3, .L408
+	mov	r1, #3840
+	movw	r2, #3850
 	ldrh	r2, [r3, r2]
 	ldrh	r0, [r3, r1]
 	mul	r0, r0, r2
 	bx	lr
-.L475:
+.L409:
 	.align	2
-.L474:
+.L408:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetAllBlockNum, .-FtlGetAllBlockNum
@@ -3740,8 +3256,8 @@ FtlBbmMapBadBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 	.save {r0, r1, r4, r5, r6, lr}
-	movw	r3, #3908
-	ldr	r4, .L477
+	mov	r3, #3904
+	ldr	r4, .L411
 	mov	r5, r0
 	ldrh	r6, [r4, r3]
 	mov	r1, r6
@@ -3750,7 +3266,7 @@ FtlBbmMapBadBlock:
 	mls	r3, r6, r2, r5
 	add	r1, r4, r2, asl #2
 	mov	r6, #1
-	ldr	r0, [r1, #4008]
+	ldr	r0, [r1, #4004]
 	uxth	r3, r3
 	and	r1, r3, #31
 	mov	ip, r3, lsr #5
@@ -3759,17 +3275,17 @@ FtlBbmMapBadBlock:
 	str	r1, [r0, ip, asl #2]
 	str	r1, [sp, #0]
 	mov	r1, r5
-	ldr	r0, .L477+4
+	ldr	r0, .L411+4
 	bl	printk
-	movw	r3, #3986
+	movw	r3, #3982
 	ldrh	r2, [r4, r3]
 	mov	r0, #0
 	add	r2, r2, r6
 	strh	r2, [r4, r3]	@ movhi
 	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
-.L478:
+.L412:
 	.align	2
-.L477:
+.L411:
 	.word	.LANCHOR0
 	.word	.LC3
 	.fnend
@@ -3784,8 +3300,8 @@ FtlBbmIsBadBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	movw	r3, #3908
-	ldr	r5, .L480
+	mov	r3, #3904
+	ldr	r5, .L414
 	mov	r7, r0
 	ldrh	r6, [r5, r3]
 	mov	r1, r6
@@ -3798,14 +3314,14 @@ FtlBbmIsBadBlock:
 	and	r4, r4, #31
 	uxth	r0, r0
 	add	r5, r5, r0, asl #2
-	ldr	r3, [r5, #4008]
+	ldr	r3, [r5, #4004]
 	ldr	r0, [r3, r2, asl #2]
 	mov	r0, r0, lsr r4
 	and	r0, r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L481:
+.L415:
 	.align	2
-.L480:
+.L414:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -3831,11 +3347,11 @@ FtlBbtCalcTotleCnt:
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, #0
 	mov	r5, r4
-	ldr	r6, .L487
-	movw	r8, #3908
-	movw	r7, #3866
-	b	.L484
-.L486:
+	ldr	r6, .L421
+	mov	r8, #3904
+	movw	r7, #3862
+	b	.L418
+.L420:
 	mov	r0, r5
 	add	r5, r5, #1
 	bl	FtlBbmIsBadBlock
@@ -3843,17 +3359,17 @@ FtlBbtCalcTotleCnt:
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-.L484:
+.L418:
 	ldrh	r3, [r6, r8]
 	ldrh	r2, [r6, r7]
 	mul	r3, r2, r3
 	cmp	r5, r3
-	blt	.L486
+	blt	.L420
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L488:
+.L422:
 	.align	2
-.L487:
+.L421:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -3866,14 +3382,14 @@ V2P_block:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	movw	r3, #3868
-	ldr	r5, .L490
+	movw	r3, #3864
+	ldr	r5, .L424
 	mov	r7, r1
 	mov	r6, r0
 	ldrh	r4, [r5, r3]
 	mov	r1, r4
 	bl	__aeabi_uidiv
-	movw	r3, #3908
+	mov	r3, #3904
 	ldrh	r5, [r5, r3]
 	mov	r1, r4
 	mul	r7, r4, r7
@@ -3883,9 +3399,9 @@ V2P_block:
 	add	r1, r5, r1
 	uxth	r0, r1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L491:
+.L425:
 	.align	2
-.L490:
+.L424:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -3896,13 +3412,13 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L493
-	movw	r2, #3868
+	ldr	r3, .L427
+	movw	r2, #3864
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
 	ldrh	r4, [r3, r2]
-	add	r2, r2, #40
+	mov	r2, #3904
 	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
 	mov	r1, r4
@@ -3912,9 +3428,9 @@ P2V_plane:
 	add	r1, r5, r1
 	uxth	r0, r1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L494:
+.L428:
 	.align	2
-.L493:
+.L427:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -3927,23 +3443,76 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	movw	r3, #3908
-	ldr	r4, .L496
+	mov	r3, #3904
+	ldr	r4, .L430
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_uidivmod
-	movw	r3, #3868
+	movw	r3, #3864
 	uxth	r0, r1
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	ldmfd	sp!, {r4, pc}
-.L497:
+.L431:
 	.align	2
-.L496:
+.L430:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
 	.align	2
+	.type	FtlFreeSysBlkQueueOut.part.5, %function
+FtlFreeSysBlkQueueOut.part.5:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L434
+	movw	r2, #4038
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movw	r0, #4036
+	ldrh	r1, [r3, r2]
+	add	ip, r1, #4
+	add	r1, r1, #1
+	bic	r1, r1, #64512
+	add	ip, r3, ip, asl #1
+	ldrh	r5, [ip, r0]
+	add	r0, r0, #6
+	strh	r1, [r3, r2]	@ movhi
+	ldrh	ip, [r3, r0]
+	sub	ip, ip, #1
+	strh	ip, [r3, r0]	@ movhi
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L433
+	mov	r0, r5
+	ldr	r4, .L434+4
+	bl	P2V_block_in_plane
+	mov	r1, #1
+	mov	r3, r5, asl #10
+	mov	r2, r1
+	mov	r6, r0
+	ldr	r0, [r4, #-2092]
+	mov	r6, r6, asl #1
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r3, [r4, #-2088]
+	ldrh	r2, [r3, r6]
+	add	r2, r2, #1
+	strh	r2, [r3, r6]	@ movhi
+	ldr	r3, [r4, #-2084]
+	add	r3, r3, #1
+	str	r3, [r4, #-2084]
+.L433:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L435:
+	.align	2
+.L434:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBlkQueueOut.part.5, .-FtlFreeSysBlkQueueOut.part.5
+	.align	2
 	.global	ftl_cmp_data_ver
 	.type	ftl_cmp_data_ver, %function
 ftl_cmp_data_ver:
@@ -3952,13 +3521,13 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L499
+	bls	.L437
 	rsb	r0, r1, r0
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L499:
+.L437:
 	rsb	r0, r0, r1
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -3974,15 +3543,15 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L502
-	movw	r3, #4046
+	ldr	r2, .L440
+	movw	r3, #4042
 	ldrh	r0, [r2, r3]
 	rsbs	r0, r0, #1
 	movcc	r0, #0
 	bx	lr
-.L503:
+.L441:
 	.align	2
-.L502:
+.L440:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -3994,16 +3563,16 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L505
-	movw	r3, #4046
+	ldr	r2, .L443
+	movw	r3, #4042
 	ldrh	r0, [r2, r3]
 	sub	r2, r0, #1024
 	rsbs	r0, r2, #0
 	adc	r0, r0, r2
 	bx	lr
-.L506:
+.L444:
 	.align	2
-.L505:
+.L443:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -4014,8 +3583,8 @@ FtlFreeSysBlkQueueIn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L510
-	movw	r3, #4046
+	ldr	r2, .L448
+	movw	r3, #4042
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
@@ -4023,32 +3592,32 @@ FtlFreeSysBlkQueueIn:
 	cmp	r3, #1024
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	cmp	r1, #0
-	beq	.L509
+	beq	.L447
 	bl	P2V_block_in_plane
-	ldr	r4, .L510+4
+	ldr	r4, .L448+4
 	mov	r1, #1
 	mov	r3, r5, asl #10
 	mov	r2, r1
 	mov	r6, r0
-	ldr	r0, [r4, #-2088]
+	ldr	r0, [r4, #-2092]
 	mov	r6, r6, asl #1
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-	ldr	r3, [r4, #-2084]
+	ldr	r3, [r4, #-2088]
 	ldrh	r2, [r3, r6]
 	add	r2, r2, #1
 	strh	r2, [r3, r6]	@ movhi
-	ldr	r3, [r4, #-2080]
+	ldr	r3, [r4, #-2084]
 	add	r3, r3, #1
-	str	r3, [r4, #-2080]
-.L509:
-	ldr	r3, .L510
-	movw	r2, #4046
-	movw	r0, #4040
+	str	r3, [r4, #-2084]
+.L447:
+	ldr	r3, .L448
+	movw	r2, #4042
+	movw	r0, #4036
 	ldrh	r1, [r3, r2]
 	add	r1, r1, #1
 	strh	r1, [r3, r2]	@ movhi
-	movw	r2, #4044
+	movw	r2, #4040
 	ldrh	r1, [r3, r2]
 	add	ip, r1, #4
 	add	r1, r1, #1
@@ -4057,9 +3626,9 @@ FtlFreeSysBlkQueueIn:
 	strh	r5, [ip, r0]	@ movhi
 	strh	r1, [r3, r2]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L511:
+.L449:
 	.align	2
-.L510:
+.L448:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4074,81 +3643,81 @@ FtlFreeSysBLkSort:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r4, #0
-	ldr	r5, .L522
-	movw	r8, #4046
-	movw	r7, #4042
-	ldr	r6, .L522+4
-	b	.L513
-.L514:
+	ldr	r5, .L460
+	movw	r8, #4042
+	movw	r7, #4038
+	ldr	r6, .L460+4
+	b	.L451
+.L452:
 	ldrh	r3, [r5, r7]
 	add	r3, r4, r3
 	add	r3, r5, r3, asl #1
-	add	r3, r3, #4048
-	ldrh	r0, [r3, #0]
+	add	r3, r3, #4032
+	ldrh	r0, [r3, #12]
 	bl	P2V_block_in_plane
-	ldr	r2, [r6, #-2084]
-	ldr	r3, [r6, #-2076]
+	ldr	r2, [r6, #-2088]
+	ldr	r3, [r6, #-2080]
 	mov	r0, r0, asl #1
 	ldrh	r2, [r2, r0]
 	str	r2, [r3, r4, asl #2]
 	add	r4, r4, #1
 	uxth	r4, r4
-.L513:
+.L451:
 	ldrh	r3, [r5, r8]
 	cmp	r3, r4
-	bhi	.L514
+	bhi	.L452
 	mov	r3, #0
-	ldr	ip, .L522
-	movw	r8, #4046
-	ldr	r4, .L522+4
-	movw	r7, #4042
-	b	.L515
-.L520:
+	ldr	ip, .L460
+	movw	r8, #4042
+	ldr	r4, .L460+4
+	movw	r7, #4038
+	b	.L453
+.L458:
 	add	r6, r3, #1
-	ldr	r1, [r4, #-2076]
+	ldr	r1, [r4, #-2080]
 	mov	r2, r3
 	uxth	r6, r6
 	mov	r0, r6
-	b	.L516
-.L518:
+	b	.L454
+.L456:
 	ldr	r9, [r1, r2, asl #2]
 	ldr	sl, [r1, r0, asl #2]
 	cmp	r9, sl
 	movhi	r2, r0
 	add	r0, r0, #1
 	uxth	r0, r0
-.L516:
+.L454:
 	cmp	r0, r5
-	bcc	.L518
+	bcc	.L456
 	cmp	r3, r2
-	beq	.L519
+	beq	.L457
 	ldr	r5, [r1, r3, asl #2]
 	ldr	r0, [r1, r2, asl #2]
 	str	r5, [r1, r2, asl #2]
-	ldr	r1, [r4, #-2076]
+	ldr	r1, [r4, #-2080]
 	str	r0, [r1, r3, asl #2]
 	ldrh	r1, [ip, r7]
 	add	r2, r1, r2
 	add	r3, r1, r3
 	add	r2, ip, r2, asl #1
 	add	r3, ip, r3, asl #1
-	add	r2, r2, #4048
-	add	r3, r3, #4048
-	ldrh	r0, [r2, #0]
-	ldrh	r1, [r3, #0]
-	strh	r1, [r2, #0]	@ movhi
-	strh	r0, [r3, #0]	@ movhi
-.L519:
+	add	r2, r2, #4032
+	add	r3, r3, #4032
+	ldrh	r0, [r2, #12]
+	ldrh	r1, [r3, #12]
+	strh	r1, [r2, #12]	@ movhi
+	strh	r0, [r3, #12]	@ movhi
+.L457:
 	mov	r3, r6
-.L515:
+.L453:
 	ldrh	r5, [ip, r8]
 	sub	r2, r5, #1
 	cmp	r3, r2
-	blt	.L520
+	blt	.L458
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L523:
+.L461:
 	.align	2
-.L522:
+.L460:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4160,38 +3729,39 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L530
-	movw	r3, #4046
+	ldr	r2, .L468
+	movw	r3, #4042
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldrh	r1, [r2, r3]
-	cmp	r1, #1024
-	beq	.L528
-	movw	r3, #4042
 	ldrh	ip, [r2, r3]
+	cmp	ip, #1024
+	beq	.L466
+	movw	r3, #4038
+	ldrh	r4, [r2, r3]
 	mov	r3, #0
-	b	.L526
-.L527:
-	add	r4, r3, ip
-	mov	r4, r4, asl #22
-	add	r4, r2, r4, lsr #21
-	add	r4, r4, #4048
-	ldrh	r4, [r4, #0]
-	cmp	r4, r0
-	beq	.L529
+	b	.L464
+.L465:
+	add	r1, r3, r4
+	mov	r1, r1, asl #22
+	add	r1, r2, r1, lsr #21
+	add	r1, r1, #4032
+	add	r1, r1, #12
+	ldrh	r1, [r1, #0]
+	cmp	r1, r0
+	beq	.L467
 	add	r3, r3, #1
-.L526:
-	cmp	r3, r1
-	bcc	.L527
-.L528:
+.L464:
+	cmp	r3, ip
+	bcc	.L465
+.L466:
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L529:
+.L467:
 	mov	r0, #1
 	ldmfd	sp!, {r4, pc}
-.L531:
+.L469:
 	.align	2
-.L530:
+.L468:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -4202,31 +3772,19 @@ FtlFreeSysBlkQueueOut:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L535
-	stmfd	sp!, {r4, r5, lr}
-	.save {r4, r5, lr}
-	movw	r4, #4046
-	ldrh	r2, [r3, r4]
-	cmp	r2, #0
-	beq	.L534
-	movw	r1, #4042
-	movw	r0, #4040
-	ldrh	ip, [r3, r1]
-	sub	r2, r2, #1
-	add	r5, ip, #4
-	add	ip, ip, #1
-	bic	ip, ip, #64512
-	add	r5, r3, r5, asl #1
-	ldrh	r0, [r5, r0]
-	strh	r2, [r3, r4]	@ movhi
-	strh	ip, [r3, r1]	@ movhi
-	ldmfd	sp!, {r4, r5, pc}
-.L534:
-	mov	r0, r2
-	ldmfd	sp!, {r4, r5, pc}
-.L536:
+	@ link register save eliminated.
+	ldr	r2, .L472
+	movw	r3, #4042
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L471
+	b	FtlFreeSysBlkQueueOut.part.5
+.L471:
+	movw	r0, #65535
+	bx	lr
+.L473:
 	.align	2
-.L535:
+.L472:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
@@ -4235,42 +3793,59 @@ FtlFreeSysBlkQueueOut:
 	.type	insert_data_list, %function
 insert_data_list:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #65535
-	cmp	r0, r3
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	beq	.L538
-	ldr	r1, .L552
+	ldr	r2, .L489
+	movw	r3, #3848
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldrh	r3, [r2, r3]
+	cmp	r3, r0
+	bls	.L475
+	ldr	r1, .L489+4
 	mov	ip, #6
 	mul	ip, ip, r0
 	mvn	r6, #0
-	ldr	r4, [r1, #-2072]
-	mov	r8, r1
+	ldr	r4, [r1, #-2076]
+	mov	r5, r1
 	add	r2, r4, ip
 	strh	r6, [r2, #2]	@ movhi
 	strh	r6, [r4, ip]	@ movhi
-	ldr	r3, [r1, #-2068]
+	ldr	r3, [r1, #-2072]
 	cmp	r3, #0
-	beq	.L551
-.L539:
-	ldr	r7, [r1, #-2064]
-	mov	sl, r0, asl #1
+	beq	.L488
+.L476:
+	ldr	r7, [r1, #-2068]
+	mov	r8, r0, asl #1
 	ldrh	r1, [r2, #4]
-	ldr	r9, .L552+4
-	ldrh	r5, [r7, sl]
+	ldr	r9, .L489
+	ldrh	sl, [r7, r8]
 	cmp	r1, #0
-	ldr	fp, [r8, #-2084]
-	mulne	r6, r1, r5
-	ldr	r5, [r8, #-2072]
-	add	sl, fp, sl
-	str	sl, [sp, #4]
-	rsb	r1, r5, r3
-	mov	r1, r1, asr #1
-	mul	r1, r9, r1
-	uxth	r1, r1
-.L546:
+	ldr	fp, [r5, #-2088]
+	mulne	r6, r1, sl
+	ldr	r1, [r5, #-2076]
+	ldr	sl, .L489+8
+	mov	r5, #0
+	add	r8, fp, r8
+	str	r8, [sp, #12]
+	str	r1, [sp, #4]
+	rsb	r1, r1, r3
+	mov	r1, r1, asr #1
+	mul	r1, sl, r1
+	movw	sl, #3848
+	ldrh	sl, [r9, sl]
+	str	sl, [sp, #8]
+	uxth	r1, r1
+.L483:
+	add	r5, r5, #1
+	ldr	r8, [sp, #8]
+	uxth	r5, r5
+	cmp	r5, r8
+	bhi	.L475
+	cmp	r0, r1
+	beq	.L475
 	mov	r9, r1, asl #1
 	ldrh	r8, [r3, #4]
 	ldrh	sl, [r7, r9]
@@ -4278,54 +3853,57 @@ insert_data_list:
 	mvneq	r8, #0
 	mulne	r8, r8, sl
 	cmp	r8, r6
-	bne	.L542
+	bne	.L479
 	ldrh	sl, [fp, r9]
-	ldr	r9, [sp, #4]
+	ldr	r9, [sp, #12]
 	ldrh	r8, [r9, #0]
 	cmp	sl, r8
-	bcc	.L544
-	b	.L543
-.L542:
-	bhi	.L543
-.L544:
+	bcc	.L481
+	b	.L480
+.L479:
+	bhi	.L480
+.L481:
 	ldrh	r8, [r3, #0]
 	movw	sl, #65535
 	cmp	r8, sl
 	streqh	r1, [r2, #2]	@ movhi
 	streqh	r0, [r3, #0]	@ movhi
-	ldreq	r3, .L552
-	streq	r2, [r3, #-2060]
-	beq	.L538
-.L545:
+	ldreq	r3, .L489+4
+	streq	r2, [r3, #-2064]
+	beq	.L475
+.L482:
+	ldr	r9, [sp, #4]
 	mov	r1, #6
-	mla	r3, r1, r8, r5
+	mla	r3, r1, r8, r9
 	mov	r1, r8
-	b	.L546
-.L543:
+	b	.L483
+.L480:
 	strh	r1, [r4, ip]	@ movhi
 	ldrh	r1, [r3, #2]
 	strh	r1, [r2, #2]	@ movhi
-	ldr	r1, .L552
-	ldr	ip, [r1, #-2068]
+	ldr	r1, .L489+4
+	ldr	ip, [r1, #-2072]
 	cmp	r3, ip
-	bne	.L547
+	bne	.L484
 	strh	r0, [r3, #2]	@ movhi
-.L551:
-	str	r2, [r1, #-2068]
-	b	.L538
-.L547:
+.L488:
+	str	r2, [r1, #-2072]
+	b	.L475
+.L484:
 	ldrh	r2, [r3, #2]
 	mov	ip, #6
-	ldr	r1, [r1, #-2072]
+	ldr	r1, [r1, #-2076]
 	mul	r2, ip, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L538:
+.L475:
 	mov	r0, #0
-	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L553:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L490:
 	.align	2
-.L552:
+.L489:
+	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4340,17 +3918,17 @@ INSERT_DATA_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L555
-	ldr	r3, .L555+4
+	ldr	r2, .L492
+	ldr	r3, .L492+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L556:
+.L493:
 	.align	2
-.L555:
+.L492:
 	.word	.LANCHOR2
-	.word	-2056
+	.word	-2060
 	.fnend
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
 	.align	2
@@ -4364,68 +3942,68 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	movw	r6, #65535
 	cmp	r0, r6
-	beq	.L558
-	ldr	r1, .L565
+	beq	.L495
+	ldr	r1, .L502
 	mov	r5, #6
 	mul	ip, r5, r0
 	mvn	r3, #0
-	ldr	r4, [r1, #-2072]
+	ldr	r4, [r1, #-2076]
 	add	r2, r4, ip
 	strh	r3, [r2, #2]	@ movhi
 	strh	r3, [r4, ip]	@ movhi
-	ldr	r3, [r1, #-2052]
+	ldr	r3, [r1, #-2056]
 	cmp	r3, #0
-	beq	.L564
-.L559:
-	ldr	sl, [r1, #-2072]
+	beq	.L501
+.L496:
+	ldr	sl, [r1, #-2076]
 	mov	r8, r0, asl #1
-	ldr	r7, [r1, #-2084]
+	ldr	r7, [r1, #-2088]
 	rsb	r1, sl, r3
-	ldr	r9, .L565+4
+	ldr	r9, .L502+4
 	mov	r1, r1, asr #1
 	ldrh	r8, [r7, r8]
 	mul	r1, r9, r1
 	mov	r9, r5
 	uxth	r1, r1
-.L562:
+.L499:
 	mov	r5, r1, asl #1
 	ldrh	r5, [r7, r5]
 	cmp	r5, r8
-	bcs	.L560
+	bcs	.L497
 	ldrh	r5, [r3, #0]
 	cmp	r5, r6
 	streqh	r1, [r2, #2]	@ movhi
 	streqh	r0, [r3, #0]	@ movhi
-	beq	.L558
-.L561:
+	beq	.L495
+.L498:
 	mla	r3, r9, r5, sl
 	mov	r1, r5
-	b	.L562
-.L560:
+	b	.L499
+.L497:
 	ldrh	r5, [r3, #2]
 	strh	r5, [r2, #2]	@ movhi
 	strh	r1, [r4, ip]	@ movhi
-	ldr	r1, .L565
-	ldr	ip, [r1, #-2052]
+	ldr	r1, .L502
+	ldr	ip, [r1, #-2056]
 	cmp	r3, ip
-	bne	.L563
+	bne	.L500
 	strh	r0, [r3, #2]	@ movhi
-.L564:
-	str	r2, [r1, #-2052]
-	b	.L558
-.L563:
+.L501:
+	str	r2, [r1, #-2056]
+	b	.L495
+.L500:
 	ldrh	r2, [r3, #2]
 	mov	ip, #6
-	ldr	r1, [r1, #-2072]
+	ldr	r1, [r1, #-2076]
 	mul	r2, ip, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L558:
+.L495:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L566:
+.L503:
 	.align	2
-.L565:
+.L502:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4440,17 +4018,17 @@ INSERT_FREE_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L568
-	ldr	r3, .L568+4
+	ldr	r2, .L505
+	ldr	r3, .L505+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L569:
+.L506:
 	.align	2
-.L568:
+.L505:
 	.word	.LANCHOR2
-	.word	-2048
+	.word	-2052
 	.fnend
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
 	.align	2
@@ -4460,48 +4038,52 @@ List_remove_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L575
+	ldr	ip, .L512
 	mov	r2, #6
 	mul	r1, r2, r1
-	ldr	r3, [ip, #-2072]
+	ldr	r3, [ip, #-2076]
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	add	r4, r3, r1
-	ldr	r5, [r0, #0]
+	add	r5, r3, r1
+	ldr	r4, [r0, #0]
 	movw	r6, #65535
-	cmp	r4, r5
-	ldrh	r5, [r3, r1]
-	bne	.L571
-	cmp	r5, r6
-	mlane	r2, r2, r5, r3
+	cmp	r5, r4
+	ldrh	r4, [r3, r1]
+	bne	.L508
+	cmp	r4, r6
+	mlane	r2, r2, r4, r3
 	moveq	r2, #0
 	streq	r2, [r0, #0]
 	strne	r2, [r0, #0]
 	mvnne	r0, #0
 	strneh	r0, [r2, #2]	@ movhi
-	b	.L573
-.L571:
-	cmp	r5, r6
-	ldrh	r0, [r4, #2]
-	mlane	r5, r2, r5, r3
-	muleq	r2, r2, r0
-	mvneq	r0, #0
-	strneh	r0, [r5, #2]	@ movhi
-	ldrneh	r6, [r4, #2]
-	ldrneh	r5, [r3, r1]
-	ldrne	r0, [ip, #-2072]
-	mulne	r2, r2, r6
-	streqh	r0, [r3, r2]	@ movhi
-	strneh	r5, [r0, r2]	@ movhi
-.L573:
+	b	.L510
+.L508:
+	cmp	r4, r6
+	ldrh	r0, [r5, #2]
+	bne	.L511
+	cmp	r0, r4
+	mulne	r2, r2, r0
+	mvnne	r0, #0
+	strneh	r0, [r3, r2]	@ movhi
+	b	.L510
+.L511:
+	mla	r4, r2, r4, r3
+	strh	r0, [r4, #2]	@ movhi
+	ldrh	r6, [r5, #2]
+	ldrh	r4, [r3, r1]
+	ldr	r0, [ip, #-2076]
+	mul	r2, r2, r6
+	strh	r4, [r0, r2]	@ movhi
+.L510:
 	mvn	r2, #0
 	mov	r0, #0
 	strh	r2, [r3, r1]	@ movhi
-	strh	r2, [r4, #2]	@ movhi
+	strh	r2, [r5, #2]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L576:
+.L513:
 	.align	2
-.L575:
+.L512:
 	.word	.LANCHOR2
 	.fnend
 	.size	List_remove_node, .-List_remove_node
@@ -4516,25 +4098,25 @@ List_pop_index_node:
 	.save {r4, lr}
 	ldr	r3, [r0, #0]
 	cmp	r3, #0
-	beq	.L582
-	ldr	r2, .L583
+	beq	.L519
+	ldr	r2, .L520
 	movw	lr, #65535
 	mov	ip, #6
-	ldr	r4, [r2, #-2072]
-	b	.L579
-.L581:
+	ldr	r4, [r2, #-2076]
+	b	.L516
+.L518:
 	mla	r3, ip, r2, r4
 	sub	r1, r1, #1
 	uxth	r1, r1
-.L579:
+.L516:
 	cmp	r1, #0
-	beq	.L580
+	beq	.L517
 	ldrh	r2, [r3, #0]
 	cmp	r2, lr
-	bne	.L581
-.L580:
+	bne	.L518
+.L517:
 	rsb	r4, r4, r3
-	ldr	r3, .L583+4
+	ldr	r3, .L520+4
 	mov	r4, r4, asr #1
 	mul	r4, r3, r4
 	uxth	r4, r4
@@ -4542,12 +4124,12 @@ List_pop_index_node:
 	bl	List_remove_node
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L582:
+.L519:
 	movw	r0, #65535
 	ldmfd	sp!, {r4, pc}
-.L584:
+.L521:
 	.align	2
-.L583:
+.L520:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4572,39 +4154,39 @@ List_get_gc_head_node:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L592
-	ldr	r3, [r2, #-2068]
+	ldr	r2, .L529
+	ldr	r3, [r2, #-2072]
 	cmp	r3, #0
-	beq	.L591
-	ldr	r2, [r2, #-2072]
+	beq	.L528
+	ldr	r2, [r2, #-2076]
 	movw	r1, #65535
 	mov	ip, #6
-	b	.L588
-.L590:
+	b	.L525
+.L527:
 	mla	r3, ip, r3, r2
 	sub	r0, r0, #1
 	uxth	r0, r0
-.L588:
+.L525:
 	cmp	r0, #0
-	beq	.L589
+	beq	.L526
 	ldrh	r3, [r3, #0]
 	cmp	r3, r1
-	bne	.L590
+	bne	.L527
 	mov	r0, r1
 	bx	lr
-.L589:
+.L526:
 	rsb	r3, r2, r3
-	ldr	r0, .L592+4
+	ldr	r0, .L529+4
 	mov	r3, r3, asr #1
 	mul	r0, r0, r3
 	uxth	r0, r0
 	bx	lr
-.L591:
+.L528:
 	movw	r0, #65535
 	bx	lr
-.L593:
+.L530:
 	.align	2
-.L592:
+.L529:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4616,70 +4198,80 @@ List_update_data_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r5, r0
-	ldr	r4, .L600
-	ldr	r3, .L600+4
-	ldrh	r3, [r4, r3]
-	cmp	r3, r0
-	beq	.L595
-	ldr	r3, .L600+8
-	ldrh	r3, [r4, r3]
-	cmp	r3, r0
-	beq	.L595
-	ldr	r3, .L600+12
-	ldrh	r3, [r4, r3]
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, .L538
+	ldr	r2, .L538+4
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L532
+	ldr	r2, .L538+8
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L532
+	ldr	r2, .L538+12
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L532
+	mov	r5, #6
+	ldr	r2, [r3, #-2076]
+	mul	r5, r5, r0
+	ldr	r1, [r3, #-2072]
+	add	r0, r2, r5
+	cmp	r0, r1
+	beq	.L532
+	ldr	ip, [r3, #-2068]
+	mov	r3, r4, asl #1
+	ldrh	r1, [r0, #4]
+	ldrh	r3, [ip, r3]
+	muls	r1, r1, r3
+	ldrh	r3, [r0, #2]
+	mvneq	r1, #0
+	movw	r0, #65535
 	cmp	r3, r0
-	beq	.L595
-	ldr	r3, [r4, #-2072]
-	mov	ip, #6
-	ldr	r2, [r4, #-2068]
-	mla	r1, ip, r0, r3
-	cmp	r1, r2
-	beq	.L595
-	ldrh	r6, [r1, #4]
-	mov	r2, r5, asl #1
-	ldrh	r1, [r1, #2]
-	ldr	r0, [r4, #-2064]
-	mla	r1, ip, r1, r3
-	ldr	ip, .L600+16
-	ldrh	r2, [r0, r2]
-	muls	r2, r6, r2
-	mvneq	r2, #0
-	rsb	r3, r3, r1
-	mov	r3, r3, asr #1
-	ldrh	r1, [r1, #4]
-	mul	r3, ip, r3
-	uxth	r3, r3
-	mov	r3, r3, asl #1
-	ldrh	r3, [r0, r3]
-	muls	r3, r1, r3
+	bne	.L534
+	ldrh	r0, [r2, r5]
+	cmp	r0, r3
+	beq	.L532
+.L534:
+	mov	r0, #6
+	mla	r3, r0, r3, r2
+	ldr	r0, .L538+16
+	rsb	r2, r2, r3
+	mov	r2, r2, asr #1
+	ldrh	r3, [r3, #4]
+	mul	r2, r0, r2
+	uxth	r2, r2
+	mov	r2, r2, asl #1
+	ldrh	r2, [ip, r2]
+	muls	r3, r3, r2
 	mvneq	r3, #0
-	cmp	r2, r3
-	bcs	.L595
-	ldr	r0, .L600+20
-	mov	r1, r5
+	cmp	r1, r3
+	bcs	.L532
+	ldr	r0, .L538+20
+	mov	r1, r4
 	bl	List_remove_node
-	ldr	r3, .L600+24
-	mov	r0, r5
-	ldrh	r2, [r4, r3]
+	ldr	r5, .L538
+	ldr	r3, .L538+24
+	mov	r0, r4
+	ldrh	r2, [r5, r3]
 	sub	r2, r2, #1
-	strh	r2, [r4, r3]	@ movhi
+	strh	r2, [r5, r3]	@ movhi
 	bl	INSERT_DATA_LIST
-.L595:
+.L532:
 	mov	r0, #0
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L601:
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L539:
 	.align	2
-.L600:
+.L538:
 	.word	.LANCHOR2
-	.word	-2044
-	.word	-1996
-	.word	-1948
+	.word	-2048
+	.word	-2000
+	.word	-1952
 	.word	-1431655765
-	.word	.LANCHOR2-2068
-	.word	-2056
+	.word	.LANCHOR2-2072
+	.word	-2060
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	2
@@ -4695,17 +4287,17 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r2, [r0, #10]
 	mov	r5, #0
 	ldr	r3, [r0, #12]
-	b	.L603
-.L606:
+	b	.L541
+.L544:
 	mov	r7, r3
 	add	r3, r3, #2
 	ldrh	r6, [r7, #0]
 	cmp	r6, #0
-	bne	.L604
+	bne	.L542
 	bl	FtlFreeSysBlkQueueOut
 	cmp	r0, #0
 	strh	r0, [r7, #0]	@ movhi
-	beq	.L605
+	beq	.L543
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	add	r3, r3, #1
@@ -4714,14 +4306,14 @@ ftl_map_blk_alloc_new_blk:
 	strh	r5, [r4, #0]	@ movhi
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L605
-.L604:
+	b	.L543
+.L542:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L603:
+.L541:
 	cmp	r5, r2
-	bne	.L606
-.L605:
+	bne	.L544
+.L543:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
 	.fnend
@@ -4733,18 +4325,18 @@ select_l2p_ram_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L619
-	movw	r3, #3950
+	ldr	r2, .L557
+	movw	r3, #3946
 	stmfd	sp!, {r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	movw	r1, #65535
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L619+4
-	ldr	ip, [r2, #-1900]
+	ldr	r2, .L557+4
+	ldr	ip, [r2, #-1904]
 	mov	r2, #0
 	mov	r0, r2
-	b	.L608
-.L610:
+	b	.L546
+.L548:
 	add	r2, r2, #12
 	add	r4, ip, r2
 	ldrh	r4, [r4, #-12]
@@ -4752,62 +4344,62 @@ select_l2p_ram_region:
 	ldmeqfd	sp!, {r4, r5, r6, r7, pc}
 	add	r0, r0, #1
 	uxth	r0, r0
-.L608:
+.L546:
 	cmp	r0, r3
-	bne	.L610
+	bne	.L548
 	mov	r1, #0
 	mov	r0, r3
 	mov	r5, #-2147483648
 	mov	r2, r1
-	b	.L611
-.L613:
+	b	.L549
+.L551:
 	add	r4, ip, r1
 	ldr	r4, [r4, #4]
 	cmp	r4, #0
-	blt	.L612
+	blt	.L550
 	cmp	r4, r5
 	movcc	r5, r4
 	movcc	r0, r2
-.L612:
+.L550:
 	add	r2, r2, #1
 	add	r1, r1, #12
 	uxth	r2, r2
-.L611:
+.L549:
 	cmp	r2, r3
-	bne	.L613
+	bne	.L551
 	cmp	r0, r3
 	ldmccfd	sp!, {r4, r5, r6, r7, pc}
-	ldr	r2, .L619+8
+	ldr	r2, .L557+8
 	mov	r0, r3
-	ldr	r1, .L619+4
+	ldr	r1, .L557+4
 	mvn	r4, #0
 	ldrh	r6, [r1, r2]
 	mov	r2, #0
 	mov	r1, r2
-	b	.L614
-.L616:
+	b	.L552
+.L554:
 	add	r5, ip, r2
 	ldr	r5, [r5, #4]
 	cmp	r5, r4
-	bcs	.L615
+	bcs	.L553
 	ldrh	r7, [ip, r2]
 	cmp	r7, r6
 	movne	r4, r5
 	movne	r0, r1
-.L615:
+.L553:
 	add	r1, r1, #1
 	add	r2, r2, #12
 	uxth	r1, r1
-.L614:
+.L552:
 	cmp	r1, r3
-	bne	.L616
+	bne	.L554
 	ldmfd	sp!, {r4, r5, r6, r7, pc}
-.L620:
+.L558:
 	.align	2
-.L619:
+.L557:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1896
+	.word	-1900
 	.fnend
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
@@ -4817,8 +4409,8 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L627
-	ldr	r2, .L627+4
+	ldr	r3, .L565
+	ldr	r2, .L565+4
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r1, [r2, r3]
@@ -4826,36 +4418,36 @@ FtlUpdateVaildLpn:
 	add	ip, r1, #1
 	mov	r1, r3
 	strh	ip, [r2, r3]	@ movhi
-	bhi	.L622
+	bhi	.L560
 	cmp	r0, #0
 	ldmeqfd	sp!, {r4, r5, pc}
-.L622:
-	ldr	r0, .L627+8
+.L560:
+	ldr	r0, .L565+8
 	mov	r3, #0
 	strh	r3, [r2, r1]	@ movhi
-	movw	r1, #3852
-	str	r3, [r2, #-1892]
+	movw	r1, #3848
+	str	r3, [r2, #-1896]
 	movw	ip, #65535
 	ldrh	r4, [r0, r1]
-	ldr	r1, [r2, #-2064]
-	ldr	r2, .L627+4
-	b	.L624
-.L626:
+	ldr	r1, [r2, #-2068]
+	ldr	r2, .L565+4
+	b	.L562
+.L564:
 	ldrh	r0, [r1], #2
 	add	r3, r3, #1
 	cmp	r0, ip
 	uxth	r3, r3
-	ldrne	r5, [r2, #-1892]
+	ldrne	r5, [r2, #-1896]
 	addne	r0, r0, r5
-	strne	r0, [r2, #-1892]
-.L624:
+	strne	r0, [r2, #-1896]
+.L562:
 	cmp	r3, r4
-	bne	.L626
+	bne	.L564
 	ldmfd	sp!, {r4, r5, pc}
-.L628:
+.L566:
 	.align	2
-.L627:
-	.word	-1894
+.L565:
+	.word	-1898
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -4868,21 +4460,21 @@ ftl_set_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L633
+	ldr	r3, .L571
 	mov	r2, r0, lsr #5
 	cmp	r1, #0
 	and	r0, r0, #31
 	uxth	r2, r2
 	mov	ip, #1
-	ldr	r3, [r3, #-1888]
+	ldr	r3, [r3, #-1892]
 	ldr	r1, [r3, r2, asl #2]
 	orrne	r0, r1, ip, asl r0
 	biceq	r0, r1, ip, asl r0
 	str	r0, [r3, r2, asl #2]
 	bx	lr
-.L634:
+.L572:
 	.align	2
-.L633:
+.L571:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -4894,17 +4486,17 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L636
+	ldr	r3, .L574
 	mov	r2, r0, lsr #5
 	and	r0, r0, #31
-	ldr	r3, [r3, #-1888]
+	ldr	r3, [r3, #-1892]
 	ldr	r3, [r3, r2, asl #2]
 	mov	r0, r3, lsr r0
 	and	r0, r0, #1
 	bx	lr
-.L637:
+.L575:
 	.align	2
-.L636:
+.L574:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -4915,16 +4507,16 @@ ftl_sb_update_avl_pages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L645
+	ldr	ip, .L583
 	mov	r3, #0
 	strh	r3, [r0, #4]	@ movhi
-	movw	r3, #3844
+	mov	r3, #3840
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldrh	r3, [ip, r3]
 	movw	ip, #65535
-	b	.L639
-.L641:
+	b	.L577
+.L579:
 	add	r4, r0, r2, asl #1
 	add	r2, r2, #1
 	ldrh	r4, [r4, #16]
@@ -4933,18 +4525,18 @@ ftl_sb_update_avl_pages:
 	ldrneh	r4, [r0, #4]
 	addne	r4, r4, #1
 	strneh	r4, [r0, #4]	@ movhi
-.L639:
+.L577:
 	cmp	r2, r3
-	bcc	.L641
-	ldr	ip, .L645
-	movw	r2, #3912
+	bcc	.L579
+	ldr	ip, .L583
+	movw	r2, #3908
 	movw	r4, #65535
 	mvn	r1, r1
 	ldrh	r5, [ip, r2]
 	mov	ip, r0
 	mov	r2, #0
-	b	.L642
-.L644:
+	b	.L580
+.L582:
 	ldrh	r6, [ip, #16]
 	add	r2, r2, #1
 	add	ip, ip, #2
@@ -4954,13 +4546,13 @@ ftl_sb_update_avl_pages:
 	addne	r6, r5, r6
 	addne	r6, r6, r1
 	strneh	r6, [r0, #4]	@ movhi
-.L642:
+.L580:
 	cmp	r2, r3
-	bne	.L644
+	bne	.L582
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L646:
+.L584:
 	.align	2
-.L645:
+.L583:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -4975,18 +4567,18 @@ make_superblock:
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r4, r0
 	mov	r5, #0
-	ldr	r6, .L652
+	ldr	r6, .L591
 	strh	r5, [r0, #4]	@ movhi
-	movw	r8, #3844
+	mov	r8, #3840
 	strb	r5, [r4, #7]
 	mvn	r7, #0
-	b	.L648
-.L650:
+	b	.L586
+.L588:
 	add	r3, r6, r5
 	ldrh	r1, [r4, #0]
 	add	sl, r5, #8
 	add	r5, r5, #1
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	sl, sl, asl #1
 	uxth	r5, r5
@@ -4998,35 +4590,40 @@ make_superblock:
 	ldreqb	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	streqb	r3, [r4, #7]
-.L648:
+.L586:
 	ldrh	r3, [r6, r8]
 	cmp	r3, r5
-	bhi	.L650
-	ldr	r1, .L652
-	movw	r2, #3912
+	bhi	.L588
+	ldr	r1, .L591
+	movw	r2, #3908
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	ldrh	r2, [r1, r2]
 	mul	r3, r2, r3
 	strh	r3, [r4, #4]	@ movhi
 	mov	r3, #0
 	strb	r3, [r4, #9]
-	ldr	r3, .L652+4
-	ldr	r2, [r3, #-1884]
+	ldr	r3, .L591+4
+	ldr	r2, [r3, #-1888]
 	cmp	r2, #0
-	beq	.L651
+	beq	.L589
 	ldrh	r1, [r4, #0]
-	ldr	r2, [r3, #-2084]
+	ldr	r2, [r3, #-2088]
 	mov	r3, r1, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #59
 	movls	r3, #1
 	strlsb	r3, [r4, #9]
-.L651:
+.L589:
+	ldr	r3, .L591
 	mov	r0, #0
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	movne	r3, #1
+	strneb	r3, [r4, #9]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L653:
+.L592:
 	.align	2
-.L652:
+.L591:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -5043,15 +4640,15 @@ update_multiplier_value:
 	mov	r4, #0
 	mov	r7, r0
 	mov	r5, r4
-	ldr	r6, .L659
-	movw	sl, #3844
-	movw	r8, #3912
-	b	.L655
-.L657:
+	ldr	r6, .L598
+	mov	sl, #3840
+	movw	r8, #3908
+	b	.L594
+.L596:
 	add	r3, r6, r5
 	mov	r1, r7
 	add	r5, r5, #1
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
 	uxth	r5, r5
 	bl	FtlBbmIsBadBlock
@@ -5059,27 +4656,27 @@ update_multiplier_value:
 	ldreqh	r3, [r6, r8]
 	addeq	r4, r4, r3
 	uxtheq	r4, r4
-.L655:
+.L594:
 	ldrh	r3, [r6, sl]
 	cmp	r3, r5
-	bhi	.L657
+	bhi	.L596
 	cmp	r4, #0
-	beq	.L658
+	beq	.L597
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r4, r0
-.L658:
-	ldr	r3, .L659+4
+.L597:
+	ldr	r3, .L598+4
 	mov	r2, #6
 	mov	r0, #0
-	ldr	r3, [r3, #-2072]
+	ldr	r3, [r3, #-2076]
 	mla	r7, r2, r7, r3
 	strh	r4, [r7, #4]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L660:
+.L599:
 	.align	2
-.L659:
+.L598:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -5092,23 +4689,23 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L664
-	ldr	r0, [r3, #-2052]
+	ldr	r3, .L603
+	ldr	r0, [r3, #-2056]
 	cmp	r0, #0
 	bxeq	lr
-	ldr	r2, [r3, #-2072]
+	ldr	r2, [r3, #-2076]
 	rsb	r0, r2, r0
-	ldr	r2, .L664+4
+	ldr	r2, .L603+4
 	mov	r0, r0, asr #1
 	mul	r0, r2, r0
-	ldr	r2, [r3, #-2084]
+	ldr	r2, [r3, #-2088]
 	uxth	r0, r0
 	mov	r3, r0, asl #1
 	ldrh	r0, [r2, r3]
 	bx	lr
-.L665:
+.L604:
 	.align	2
-.L664:
+.L603:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -5120,13 +4717,13 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L673
+	ldr	r2, .L612
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
-	ldr	r3, [r2, #-2052]
+	ldr	r3, [r2, #-2056]
 	cmp	r3, #0
-	beq	.L672
-	ldr	r1, .L673+4
+	beq	.L611
+	ldr	r1, .L612+4
 	mov	ip, #7
 	mov	r5, #6
 	movw	r4, #65535
@@ -5135,39 +4732,39 @@ GetFreeBlockMaxEraseCount:
 	mov	r1, r1, asr #3
 	cmp	r0, r1
 	uxthgt	r0, r1
-	ldr	r1, [r2, #-2072]
-	ldr	r2, .L673+8
+	ldr	r1, [r2, #-2076]
+	ldr	r2, .L612+8
 	rsb	r3, r1, r3
 	mov	r3, r3, asr #1
 	mul	r3, r2, r3
 	mov	r2, #0
 	uxth	r3, r3
-	b	.L669
-.L671:
+	b	.L608
+.L610:
 	mul	ip, r5, r3
 	ldrh	ip, [r1, ip]
 	cmp	ip, r4
-	beq	.L670
+	beq	.L609
 	add	r2, r2, #1
 	mov	r3, ip
 	uxth	r2, r2
-.L669:
+.L608:
 	cmp	r2, r0
-	bne	.L671
-.L670:
-	ldr	r2, .L673
+	bne	.L610
+.L609:
+	ldr	r2, .L612
 	mov	r3, r3, asl #1
-	ldr	r2, [r2, #-2084]
+	ldr	r2, [r2, #-2088]
 	ldrh	r0, [r2, r3]
 	ldmfd	sp!, {r4, r5, pc}
-.L672:
+.L611:
 	mov	r0, r3
 	ldmfd	sp!, {r4, r5, pc}
-.L674:
+.L613:
 	.align	2
-.L673:
+.L612:
 	.word	.LANCHOR2
-	.word	-2048
+	.word	-2052
 	.word	-1431655765
 	.fnend
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
@@ -5181,27 +4778,27 @@ FtlPrintInfo2buf:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r8, r0
-	ldr	r6, .L685
+	ldr	r6, .L624
 	add	r5, r8, #12
 	.pad #32
 	sub	sp, sp, #32
-	ldr	r1, .L685+4
+	ldr	r1, .L624+4
 	bl	strcpy
 	mov	r0, r5
-	ldr	r1, .L685+8
-	ldr	r2, [r6, #2200]
+	ldr	r1, .L624+8
+	ldr	r2, [r6, #3048]
 	bl	sprintf
-	ldr	r1, .L685+12
-	ldr	r2, [r6, #3928]
+	ldr	r1, .L624+12
+	ldr	r2, [r6, #3924]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+16
-	ldr	r3, [r3, #2960]
+	ldr	r3, .L624+16
+	ldr	r3, [r3, #2932]
 	cmp	r3, #1
 	add	r5, r5, r0
-	bne	.L681
-.L676:
+	bne	.L620
+.L615:
 	add	r0, sp, #16
 	add	r1, sp, #20
 	add	r2, sp, #24
@@ -5210,368 +4807,368 @@ FtlPrintInfo2buf:
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #16]
 	mov	r0, r5
-	ldr	r1, .L685+20
+	ldr	r1, .L624+20
 	str	r3, [sp, #0]
 	ldr	r3, [sp, #28]
-	ldr	r4, .L685+24
-	ldr	r7, .L685+28
+	ldr	r4, .L624+24
+	ldr	r7, .L624+28
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #20]
 	bl	sprintf
-	ldr	r1, .L685+32
+	ldr	r1, .L624+32
 	add	r5, r5, r0
 	mov	r0, r5
 	add	r5, r5, #10
 	bl	strcpy
-	ldr	r2, [r6, #3972]
+	ldr	r2, [r6, #3968]
+	mov	r0, r5
+	ldr	r1, .L624+36
+	bl	sprintf
+	ldr	r1, .L624+40
+	ldr	r2, [r4, #-1896]
+	add	r5, r5, r0
 	mov	r0, r5
-	ldr	r1, .L685+36
 	bl	sprintf
-	ldr	r1, .L685+40
-	ldr	r2, [r4, #-1892]
+	ldr	r1, .L624+44
+	ldr	r2, [r4, #-1884]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+44
+	ldr	r1, .L624+48
 	ldr	r2, [r4, #-1880]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+48
+	ldr	r1, .L624+52
 	ldr	r2, [r4, #-1876]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+52
+	ldr	r1, .L624+56
 	ldr	r2, [r4, #-1872]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+56
+	ldr	r1, .L624+60
 	ldr	r2, [r4, #-1868]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+60
+	ldr	r1, .L624+64
 	ldr	r2, [r4, #-1864]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+64
 	ldr	r2, [r4, #-1860]
+	ldr	r1, .L624+68
+	mov	r2, r2, lsr #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldr	r2, [r4, #-1856]
-	ldr	r1, .L685+68
+	ldr	r1, .L624+72
 	mov	r2, r2, lsr #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
+	ldr	r1, .L624+76
 	ldr	r2, [r4, #-1852]
-	ldr	r1, .L685+72
-	mov	r2, r2, lsr #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+76
+	ldr	r1, .L624+80
 	ldr	r2, [r4, #-1848]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+80
-	ldr	r2, [r4, #-1844]
-	add	r5, r5, r0
-	mov	r0, r5
-	bl	sprintf
 	add	r5, r5, r0
 	bl	FtlBbtCalcTotleCnt
-	movw	r2, #3986
-	ldr	r1, .L685+84
+	movw	r2, #3982
+	ldr	r1, .L624+84
 	ldrh	r2, [r6, r2]
 	mov	r3, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+88
+	ldr	r1, .L624+88
 	ldrh	r2, [r4, r7]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+92
-	ldr	r2, [r4, #-1840]
+	ldr	r1, .L624+92
+	ldr	r2, [r4, #-1844]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+96
-	ldr	r2, [r4, #-1836]
+	ldr	r1, .L624+96
+	ldr	r2, [r4, #-1840]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+100
-	ldr	r2, [r4, #-1832]
+	ldr	r1, .L624+100
+	ldr	r2, [r4, #-1836]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+104
-	ldr	r2, [r4, #-2080]
+	ldr	r1, .L624+104
+	ldr	r2, [r4, #-2084]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+108
-	ldr	r2, [r4, #-1828]
+	ldr	r1, .L624+108
+	ldr	r2, [r4, #-1832]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+112
-	ldr	r2, [r4, #-1824]
+	ldr	r1, .L624+112
+	ldr	r2, [r4, #-1828]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+116
-	ldr	r1, .L685+120
+	ldr	r3, .L624+116
+	ldr	r1, .L624+120
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+124
-	ldr	r1, .L685+128
+	ldr	r3, .L624+124
+	ldr	r1, .L624+128
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r6, #3952]
-	ldr	r1, .L685+132
+	ldr	r2, [r6, #3948]
+	ldr	r1, .L624+132
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r6, #3944]
-	ldr	r1, .L685+136
+	ldr	r2, [r6, #3940]
+	ldr	r1, .L624+136
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r6, #3840]
-	ldr	r1, .L685+140
+	ldr	r2, [r6, #3836]
+	ldr	r1, .L624+140
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	movw	r3, #4046
+	movw	r3, #4042
 	ldrh	r2, [r6, r3]
-	ldr	r1, .L685+144
+	ldr	r1, .L624+144
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	movw	r3, #3852
+	movw	r3, #3848
 	ldrh	r2, [r6, r3]
-	ldr	r1, .L685+148
+	ldr	r1, .L624+148
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+152
-	ldr	r1, .L685+156
+	ldr	r3, .L624+152
+	ldr	r1, .L624+156
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r6, #3856]
-	ldr	r1, .L685+160
+	ldr	r2, [r6, #3852]
+	ldr	r1, .L624+160
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+164
-	ldr	r1, .L685+168
+	ldr	r3, .L624+164
+	ldr	r1, .L624+168
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	movw	r3, #3980
+	movw	r3, #3976
 	ldrh	r2, [r6, r3]
-	ldr	r1, .L685+172
-	ldr	r6, .L685+176
+	ldr	r1, .L624+172
+	ldr	r6, .L624+176
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+180
-	ldr	r1, .L685+184
+	ldr	r3, .L624+180
+	ldr	r1, .L624+184
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+188
-	ldrb	r2, [r4, #-2038]	@ zero_extendqisi2
+	ldr	r1, .L624+188
+	ldrb	r2, [r4, #-2042]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, r6]
-	ldr	r1, .L685+192
+	ldr	r1, .L624+192
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+196
-	ldrb	r2, [r4, #-2036]	@ zero_extendqisi2
+	ldr	r1, .L624+196
+	ldrb	r2, [r4, #-2040]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+200
-	ldr	r1, .L685+204
+	ldr	r3, .L624+200
+	ldr	r1, .L624+204
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r3, [r4, r6]
-	ldr	r2, [r4, #-2064]
+	ldr	r2, [r4, #-2068]
 	add	r6, r6, #48
-	ldr	r1, .L685+208
+	ldr	r1, .L624+208
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+212
-	ldr	r1, .L685+216
+	ldr	r3, .L624+212
+	ldr	r1, .L624+216
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+220
-	ldrb	r2, [r4, #-1990]	@ zero_extendqisi2
+	ldr	r1, .L624+220
+	ldrb	r2, [r4, #-1994]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r2, [r4, r6]
-	ldr	r1, .L685+224
+	ldr	r1, .L624+224
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+228
-	ldrb	r2, [r4, #-1988]	@ zero_extendqisi2
+	ldr	r1, .L624+228
+	ldrb	r2, [r4, #-1992]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+232
-	ldr	r1, .L685+236
+	ldr	r3, .L624+232
+	ldr	r1, .L624+236
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	ldrh	r3, [r4, r6]
-	ldr	r2, [r4, #-2064]
+	ldr	r2, [r4, #-2068]
 	add	r6, r6, #240
-	ldr	r1, .L685+240
+	ldr	r1, .L624+240
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+244
-	ldr	r1, .L685+248
+	ldr	r3, .L624+244
+	ldr	r1, .L624+248
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+252
-	ldrb	r2, [r4, #-1942]	@ zero_extendqisi2
+	ldr	r1, .L624+252
+	ldrb	r2, [r4, #-1946]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+256
-	ldr	r1, .L685+260
+	ldr	r3, .L624+256
+	ldr	r1, .L624+260
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+264
-	ldrb	r2, [r4, #-1940]	@ zero_extendqisi2
+	ldr	r1, .L624+264
+	ldrb	r2, [r4, #-1944]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+268
-	ldr	r1, .L685+272
+	ldr	r3, .L624+268
+	ldr	r1, .L624+272
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+276
-	ldr	r1, .L685+280
+	ldr	r3, .L624+276
+	ldr	r1, .L624+280
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+284
-	ldrb	r2, [r4, #-1750]	@ zero_extendqisi2
+	ldr	r1, .L624+284
+	ldrb	r2, [r4, #-1754]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+288
+	ldr	r1, .L624+288
 	ldrh	r2, [r4, r6]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+292
-	ldrb	r2, [r4, #-1748]	@ zero_extendqisi2
+	ldr	r1, .L624+292
+	ldrb	r2, [r4, #-1752]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+296
-	ldr	r1, .L685+300
+	ldr	r3, .L624+296
+	ldr	r1, .L624+300
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, [r4, #-1620]
-	ldr	r3, [r4, #-1884]
-	ldr	r2, [r4, #-1708]
+	ldr	r1, [r4, #-1624]
+	ldr	r3, [r4, #-1888]
+	ldr	r2, [r4, #-1712]
 	str	r1, [sp, #0]
-	ldr	r1, [r4, #-1628]
+	ldr	r1, [r4, #-1632]
 	orr	r2, r3, r2, asl #8
 	str	r1, [sp, #4]
-	ldr	r1, .L685+304
-	ldr	r3, [r4, #-1624]
+	ldr	r1, .L624+304
+	ldr	r3, [r4, #-1628]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+308
-	ldr	r2, [r4, #-1632]
+	ldr	r1, .L624+308
+	ldr	r2, [r4, #-1636]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+312
-	ldr	r2, [r4, #-1608]
+	ldr	r1, .L624+312
+	ldr	r2, [r4, #-1612]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+316
-	ldr	r1, .L685+320
+	ldr	r3, .L624+316
+	ldr	r1, .L624+320
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+324
-	ldr	r1, .L685+328
+	ldr	r3, .L624+324
+	ldr	r1, .L624+328
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L685+332
-	ldr	r2, [r4, #-1188]
+	ldr	r1, .L624+332
+	ldr	r2, [r4, #-1192]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, .L685+336
-	ldr	r1, .L685+340
+	ldr	r3, .L624+336
+	ldr	r1, .L624+340
 	ldrh	r2, [r4, r3]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	add	r5, r5, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L685+344
+	ldr	r1, .L624+344
 	mov	r2, r0
 	mov	r0, r5
 	bl	sprintf
 	add	r5, r5, r0
 	ldrh	r0, [r4, r7]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L685+348
+	ldr	r1, .L624+348
 	mov	r2, r0
 	mov	r0, r5
 	bl	sprintf
@@ -5579,88 +5176,88 @@ FtlPrintInfo2buf:
 	movw	r2, #65535
 	cmp	r3, r2
 	add	r5, r5, r0
-	beq	.L678
-	ldr	r2, [r4, #-2064]
+	beq	.L617
+	ldr	r2, [r4, #-2068]
 	mov	r3, r3, asl #1
 	mov	r0, r5
-	ldr	r1, .L685+352
+	ldr	r1, .L624+352
 	ldrh	r2, [r2, r3]
 	bl	sprintf
 	add	r5, r5, r0
-.L678:
+.L617:
 	mov	r0, #0
-	ldr	r4, .L685+24
+	ldr	r4, .L624+24
 	bl	List_get_gc_head_node
 	mov	r6, #0
 	movw	sl, #65535
 	mov	r9, #6
 	uxth	r3, r0
-.L680:
+.L619:
 	cmp	r3, sl
-	beq	.L679
-	ldr	r1, [r4, #-2064]
+	beq	.L618
+	ldr	r1, [r4, #-2068]
 	mov	r2, r3, asl #1
 	mul	r7, r9, r3
 	mov	r0, r5
 	ldrh	r1, [r1, r2]
 	str	r1, [sp, #0]
-	ldr	r1, [r4, #-2072]
+	ldr	r1, [r4, #-2076]
 	add	r1, r1, r7
 	ldrh	r1, [r1, #4]
 	str	r1, [sp, #4]
-	ldr	r1, [r4, #-2084]
+	ldr	r1, [r4, #-2088]
 	ldrh	r2, [r1, r2]
-	ldr	r1, .L685+356
+	ldr	r1, .L624+356
 	str	r2, [sp, #8]
 	mov	r2, r6
 	bl	sprintf
 	add	r6, r6, #1
-	ldr	r3, [r4, #-2072]
+	ldr	r3, [r4, #-2076]
 	cmp	r6, #16
 	ldrh	r3, [r3, r7]
 	add	r5, r5, r0
-	bne	.L680
-.L679:
-	ldr	r6, .L685+24
+	bne	.L619
+.L618:
+	ldr	r6, .L624+24
 	mov	r4, #0
 	movw	sl, #65535
 	mov	r9, #6
-	ldr	r2, [r6, #-2052]
-	ldr	r3, [r6, #-2072]
+	ldr	r2, [r6, #-2056]
+	ldr	r3, [r6, #-2076]
 	rsb	r3, r3, r2
-	ldr	r2, .L685+360
+	ldr	r2, .L624+360
 	mov	r3, r3, asr #1
 	mul	r3, r2, r3
 	uxth	r3, r3
-.L682:
+.L621:
 	cmp	r3, sl
-	beq	.L681
+	beq	.L620
 	mul	r7, r9, r3
-	ldr	r2, [r6, #-2072]
+	ldr	r2, [r6, #-2076]
 	mov	r0, r5
 	add	r2, r2, r7
 	ldrh	r2, [r2, #4]
 	str	r2, [sp, #0]
 	mov	r2, r3, asl #1
-	ldr	r1, [r6, #-2084]
+	ldr	r1, [r6, #-2088]
 	ldrh	r2, [r1, r2]
-	ldr	r1, .L685+364
+	ldr	r1, .L624+364
 	str	r2, [sp, #4]
 	mov	r2, r4
 	bl	sprintf
 	add	r4, r4, #1
-	ldr	r3, [r6, #-2072]
+	ldr	r3, [r6, #-2076]
 	cmp	r4, #4
 	ldrh	r3, [r3, r7]
 	add	r5, r5, r0
-	bne	.L682
-.L681:
+	bne	.L621
+.L620:
 	rsb	r0, r8, r5
 	add	sp, sp, #32
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L686:
+.L625:
 	.align	2
-.L685:
+.L624:
 	.word	.LANCHOR0
 	.word	.LC4
 	.word	.LC5
@@ -5668,7 +5265,7 @@ FtlPrintInfo2buf:
 	.word	.LANCHOR1
 	.word	.LC7
 	.word	.LANCHOR2
-	.word	-2048
+	.word	-2052
 	.word	.LC8
 	.word	.LC9
 	.word	.LC10
@@ -5690,62 +5287,62 @@ FtlPrintInfo2buf:
 	.word	.LC26
 	.word	.LC27
 	.word	.LC28
-	.word	-1790
+	.word	-1794
 	.word	.LC29
-	.word	-1792
+	.word	-1796
 	.word	.LC30
 	.word	.LC31
 	.word	.LC32
 	.word	.LC33
 	.word	.LC34
 	.word	.LC35
-	.word	-1772
+	.word	-1776
 	.word	.LC36
 	.word	.LC37
-	.word	-1768
+	.word	-1772
 	.word	.LC38
 	.word	.LC39
-	.word	-2044
-	.word	-2042
+	.word	-2048
+	.word	-2046
 	.word	.LC40
 	.word	.LC41
 	.word	.LC42
 	.word	.LC43
-	.word	-2040
+	.word	-2044
 	.word	.LC44
 	.word	.LC45
-	.word	-1994
+	.word	-1998
 	.word	.LC46
 	.word	.LC47
 	.word	.LC48
 	.word	.LC49
-	.word	-1992
+	.word	-1996
 	.word	.LC50
 	.word	.LC51
-	.word	-1946
+	.word	-1950
 	.word	.LC52
 	.word	.LC53
-	.word	-1948
+	.word	-1952
 	.word	.LC54
 	.word	.LC55
-	.word	-1944
+	.word	-1948
 	.word	.LC56
-	.word	-1754
+	.word	-1758
 	.word	.LC57
 	.word	.LC58
 	.word	.LC59
 	.word	.LC60
-	.word	-1752
+	.word	-1756
 	.word	.LC61
 	.word	.LC62
 	.word	.LC63
 	.word	.LC64
-	.word	-1192
+	.word	-1196
 	.word	.LC65
-	.word	-1190
+	.word	-1194
 	.word	.LC66
 	.word	.LC67
-	.word	-1184
+	.word	-1188
 	.word	.LC68
 	.word	.LC69
 	.word	.LC70
@@ -5765,8 +5362,8 @@ rknand_proc_ftlread:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r1, .L688
-	ldr	r2, .L688+4
+	ldr	r1, .L627
+	ldr	r2, .L627+4
 	bl	sprintf
 	add	r5, r4, r0
 	mov	r0, r5
@@ -5774,9 +5371,9 @@ rknand_proc_ftlread:
 	add	r0, r5, r0
 	rsb	r0, r4, r0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L689:
+.L628:
 	.align	2
-.L688:
+.L627:
 	.word	.LC74
 	.word	.LC75
 	.fnend
@@ -5788,84 +5385,84 @@ GetSwlReplaceBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L717
+	ldr	r3, .L657
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, [r3, #-1832]
-	ldr	r2, [r3, #-1824]
+	ldr	r1, [r3, #-1836]
+	ldr	r2, [r3, #-1828]
 	cmp	r1, r2
-	bcs	.L691
-	ldr	r0, .L717+4
-	movw	r1, #3852
+	bcs	.L630
+	ldr	r0, .L657+4
+	movw	r1, #3848
 	mov	r2, #0
-	str	r2, [r3, #-1840]
+	str	r2, [r3, #-1844]
 	ldrh	r1, [r0, r1]
-	ldr	r0, [r3, #-2084]
-	b	.L692
-.L693:
+	ldr	r0, [r3, #-2088]
+	b	.L631
+.L632:
 	ldrh	lr, [r0], #2
 	add	r2, r2, #1
-	ldr	ip, [r3, #-1840]
+	ldr	ip, [r3, #-1844]
 	add	ip, lr, ip
-	str	ip, [r3, #-1840]
-.L692:
+	str	ip, [r3, #-1844]
+.L631:
 	cmp	r2, r1
-	ldr	r4, .L717
-	bcc	.L693
-	ldr	r5, [r4, #-1840]
+	ldr	r4, .L657
+	bcc	.L632
+	ldr	r5, [r4, #-1844]
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r2, .L717+4
-	movw	r3, #3902
+	ldr	r2, .L657+4
+	movw	r3, #3898
 	ldrh	r1, [r2, r3]
-	str	r0, [r4, #-1832]
-	ldr	r0, [r4, #-1836]
+	str	r0, [r4, #-1836]
+	ldr	r0, [r4, #-1840]
 	rsb	r0, r0, r5
 	bl	__aeabi_uidiv
-	str	r0, [r4, #-1840]
-	b	.L694
-.L691:
-	ldr	r2, [r3, #-1828]
+	str	r0, [r4, #-1844]
+	b	.L633
+.L630:
+	ldr	r2, [r3, #-1832]
 	cmp	r1, r2
-	bls	.L694
+	bls	.L633
 	add	r2, r2, #1
-	ldr	r4, .L717+4
-	str	r2, [r3, #-1828]
-	movw	ip, #3852
+	ldr	r4, .L657+4
+	str	r2, [r3, #-1832]
+	movw	ip, #3848
 	mov	r2, #0
-	b	.L695
-.L696:
-	ldr	r0, [r3, #-2084]
+	b	.L634
+.L635:
+	ldr	r0, [r3, #-2088]
 	mov	r1, r2, asl #1
 	add	r2, r2, #1
 	ldrh	r5, [r0, r1]
 	add	r5, r5, #1
 	strh	r5, [r0, r1]	@ movhi
-.L695:
+.L634:
 	ldrh	r1, [r4, ip]
 	cmp	r2, r1
-	bcc	.L696
-.L694:
-	ldr	r3, .L717
-	ldr	r6, [r3, #-1824]
-	ldr	r5, [r3, #-1832]
+	bcc	.L635
+.L633:
+	ldr	r3, .L657
+	ldr	r6, [r3, #-1828]
+	ldr	r5, [r3, #-1836]
 	add	r2, r6, #256
 	cmp	r2, r5
 	mov	r2, r3
-	bls	.L697
-	ldr	r1, [r3, #-1828]
+	bls	.L636
+	ldr	r1, [r3, #-1832]
 	add	r0, r6, #768
 	cmp	r0, r1
-	bls	.L697
-	ldr	r3, [r3, #-1884]
+	bls	.L636
+	ldr	r3, [r3, #-1888]
 	cmp	r3, #0
-	beq	.L715
+	beq	.L655
 	cmp	r6, #30
-	bhi	.L715
-.L697:
-	ldr	r3, .L717+8
+	bhi	.L655
+.L636:
+	ldr	r3, .L657+8
 	ldrh	r0, [r2, r3]
 	add	r0, r0, r0, asl #1
 	ubfx	r0, r0, #2, #16
@@ -5873,131 +5470,139 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	cmp	r0, r3
 	mov	r8, r0
-	bcs	.L699
+	bcs	.L638
 	cmp	r6, #30
-	bhi	.L715
-.L699:
-	ldr	r2, .L717
-	ldr	r3, [r2, #-2068]
+	bhi	.L655
+.L638:
+	ldr	r2, .L657
+	ldr	r3, [r2, #-2072]
 	cmp	r3, #0
-	beq	.L715
+	beq	.L655
+	ldr	r0, .L657+4
+	movw	r1, #3848
 	movw	r7, #65535
-	ldr	r1, [r2, #-2072]
 	mov	r4, r7
-	ldr	r2, [r2, #-2084]
-	mov	sl, r7
-	ldr	ip, .L717+12
-	mov	fp, #6
-	b	.L700
-.L703:
-	ldrh	r9, [r3, #4]
-	cmp	r9, #0
-	beq	.L701
-	rsb	r3, r1, r3
+	mov	fp, r7
+	ldrh	sl, [r0, r1]
+	ldr	r0, [r2, #-2076]
+	ldr	r1, [r2, #-2088]
+	mov	r2, #0
+	b	.L639
+.L642:
+	add	r2, r2, #1
+	uxth	r2, r2
+	cmp	r2, sl
+	bhi	.L655
+	ldrh	ip, [r3, #4]
+	cmp	ip, #0
+	beq	.L640
+	rsb	r3, r0, r3
+	ldr	ip, .L657+12
 	mov	r3, r3, asr #1
 	mul	r3, ip, r3
 	uxth	r3, r3
-	mov	r9, r3, asl #1
-	ldrh	r9, [r2, r9]
-	cmp	r9, r6
-	bls	.L712
-	cmp	r9, r7
-	movcc	r7, r9
+	mov	ip, r3, asl #1
+	ldrh	ip, [r1, ip]
+	cmp	ip, r6
+	bls	.L652
+	cmp	ip, r7
+	movcc	r7, ip
 	movcc	r4, r3
-.L701:
-	mla	r3, fp, r0, r1
-.L700:
-	ldrh	r0, [r3, #0]
-	cmp	r0, sl
-	bne	.L703
-	b	.L702
-.L712:
+.L640:
+	mov	ip, #6
+	mla	r3, ip, r9, r0
+.L639:
+	ldrh	r9, [r3, #0]
+	cmp	r9, fp
+	bne	.L642
+	b	.L641
+.L652:
 	mov	r4, r3
-.L702:
+.L641:
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L698
+	beq	.L637
 	mov	sl, r4, asl #1
-	ldr	fp, .L717
-	ldrh	r9, [r2, sl]
+	ldr	fp, .L657
+	ldrh	r9, [r1, sl]
 	cmp	r9, r6
-	bls	.L704
+	bls	.L643
 	bl	GetFreeBlockMinEraseCount
 	cmp	r0, r6
-	strhi	r7, [fp, #-1824]
-.L704:
+	strhi	r7, [fp, #-1828]
+.L643:
 	cmp	r9, #29
-	ldr	r2, [fp, #-1884]
+	ldr	r2, [fp, #-1888]
 	movhi	r3, #0
 	movls	r3, #1
 	cmp	r2, #0
 	moveq	r3, #0
 	cmp	r3, #0
-	beq	.L705
+	beq	.L644
 	add	r3, r9, #10
 	cmp	r3, r5
-	bls	.L706
-	ldr	r2, .L717+4
-	movw	r3, #3902
+	bls	.L645
+	ldr	r2, .L657+4
+	movw	r3, #3898
 	ldrh	r3, [r2, r3]
 	cmp	r3, r9
-	bls	.L705
-.L706:
-	ldr	r6, .L717
-	ldr	r3, .L717+16
+	bls	.L644
+.L645:
+	ldr	r6, .L657
+	ldr	r3, .L657+16
 	ldrh	r3, [r6, r3]
 	cmp	r3, #64
-	bls	.L705
-	ldr	r3, [r6, #-2084]
+	bls	.L644
+	ldr	r3, [r6, #-2088]
 	mov	r1, r4
-	ldr	r0, .L717+20
+	ldr	r0, .L657+20
 	ldrh	r2, [r3, sl]
 	bl	printk
-	b	.L716
-.L705:
+	b	.L656
+.L644:
 	cmp	r9, r5
-	bcs	.L715
+	bcs	.L655
 	add	r3, r9, #128
 	cmp	r8, r3
-	ble	.L715
+	ble	.L655
 	add	r3, r9, #256
-	ldr	r6, .L717
+	ldr	r6, .L657
 	cmp	r3, r5
-	bcc	.L707
-	ldr	r3, [r6, #-1828]
+	bcc	.L646
+	ldr	r3, [r6, #-1832]
 	add	r9, r9, #768
 	cmp	r9, r3
-	bcs	.L715
-.L707:
-	ldr	r3, [r6, #-2064]
+	bcs	.L655
+.L646:
+	ldr	r3, [r6, #-2068]
 	mov	r1, r4
-	ldr	r0, .L717+24
+	ldr	r0, .L657+24
 	mov	r2, r5
 	ldrh	r3, [r3, sl]
 	str	r3, [sp, #0]
-	ldr	r3, [r6, #-2084]
+	ldr	r3, [r6, #-2088]
 	ldrh	r3, [r3, sl]
 	stmib	sp, {r3, r8}
-	ldr	r3, [r6, #-1828]
+	ldr	r3, [r6, #-1832]
 	bl	printk
-.L716:
+.L656:
 	mov	r3, #1
-	str	r3, [r6, #-1180]
-	b	.L698
-.L715:
+	str	r3, [r6, #-1184]
+	b	.L637
+.L655:
 	movw	r4, #65535
-.L698:
+.L637:
 	mov	r0, r4
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L718:
+.L658:
 	.align	2
-.L717:
+.L657:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-2048
+	.word	-2052
 	.word	-1431655765
-	.word	-2056
+	.word	-2060
 	.word	.LC76
 	.word	.LC77
 	.fnend
@@ -6013,19 +5618,19 @@ free_data_superblock:
 	cmp	r0, r2
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	beq	.L720
-	ldr	r2, .L721
+	beq	.L660
+	ldr	r2, .L661
 	mov	r3, r0, asl #1
 	mov	r1, #0
-	ldr	r2, [r2, #-2064]
+	ldr	r2, [r2, #-2068]
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
-.L720:
+.L660:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L722:
+.L662:
 	.align	2
-.L721:
+.L661:
 	.word	.LANCHOR2
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -6036,21 +5641,21 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L731
+	ldr	r2, .L671
 	mov	r3, #0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	sl, #3844
-	str	r3, [r2, #-1176]
+	mov	sl, #3840
+	str	r3, [r2, #-1180]
 	mov	r8, #12
-	ldr	r0, .L731+4
+	ldr	r0, .L671+4
 	mov	r7, #1
-	movw	r6, #3922
-	movw	fp, #3924
-	b	.L724
-.L725:
+	movw	r6, #3918
+	mov	fp, #3920
+	b	.L664
+.L665:
 	mul	r1, r8, r3
-	ldr	r4, [r2, #-1172]
+	ldr	r4, [r2, #-1176]
 	add	ip, r4, r1
 	str	r7, [ip, #8]
 	ldrh	ip, [r0, r6]
@@ -6058,22 +5663,22 @@ FtlGcBufInit:
 	add	r5, ip, #3
 	cmp	ip, #0
 	movlt	ip, r5
-	ldr	r5, [r2, #-1168]
+	ldr	r5, [r2, #-1172]
 	bic	ip, ip, #3
 	add	ip, r5, ip
 	str	ip, [r4, r1]
 	ldrh	ip, [r0, fp]
-	ldr	r9, [r2, #-1172]
+	ldr	r9, [r2, #-1176]
 	mul	ip, ip, r3
 	add	r4, r9, r1
 	add	r5, ip, #3
 	cmp	ip, #0
 	movlt	ip, r5
-	ldr	r5, [r2, #-1164]
+	ldr	r5, [r2, #-1168]
 	bic	ip, ip, #3
 	add	ip, r5, ip
 	str	ip, [r4, #4]
-	ldr	ip, [r2, #-1160]
+	ldr	ip, [r2, #-1164]
 	mov	r5, #36
 	ldr	r1, [r9, r1]
 	mla	ip, r5, r3, ip
@@ -6082,14 +5687,14 @@ FtlGcBufInit:
 	str	r1, [ip, #8]
 	ldr	r1, [r4, #4]
 	str	r1, [ip, #12]
-.L724:
+.L664:
 	ldrh	r1, [r0, sl]
 	cmp	r3, r1
-	bcc	.L725
-	b	.L730
-.L727:
+	bcc	.L665
+	b	.L670
+.L667:
 	mul	r2, r8, r1
-	ldr	r4, [r3, #-1172]
+	ldr	r4, [r3, #-1176]
 	add	r0, r4, r2
 	str	r7, [r0, #8]
 	ldrh	r0, [ip, r6]
@@ -6097,11 +5702,11 @@ FtlGcBufInit:
 	add	sl, r0, #3
 	cmp	r0, #0
 	movlt	r0, sl
-	ldr	sl, [r3, #-1168]
+	ldr	sl, [r3, #-1172]
 	bic	r0, r0, #3
 	add	r0, sl, r0
 	str	r0, [r4, r2]
-	ldr	r0, [r3, #-1172]
+	ldr	r0, [r3, #-1176]
 	add	r0, r0, r2
 	ldrh	r2, [ip, r5]
 	mul	r2, r2, r1
@@ -6110,26 +5715,26 @@ FtlGcBufInit:
 	add	r4, r2, #3
 	cmp	r2, #0
 	movlt	r2, r4
-	ldr	r4, [r3, #-1164]
+	ldr	r4, [r3, #-1168]
 	bic	r2, r2, #3
 	add	r2, r4, r2
 	str	r2, [r0, #4]
-	b	.L729
-.L730:
-	ldr	r3, .L731
+	b	.L669
+.L670:
+	ldr	r3, .L671
 	mov	r8, #12
-	ldr	ip, .L731+4
+	ldr	ip, .L671+4
 	mov	r7, #0
-	movw	r6, #3922
-	movw	r5, #3924
-.L729:
-	ldr	r2, [r3, #-1156]
+	movw	r6, #3918
+	mov	r5, #3920
+.L669:
+	ldr	r2, [r3, #-1160]
 	cmp	r1, r2
-	bcc	.L727
+	bcc	.L667
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L732:
+.L672:
 	.align	2
-.L731:
+.L671:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -6141,42 +5746,42 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L740
+	ldr	r3, .L680
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r5, #36
-	ldr	r6, [r3, #-1156]
+	ldr	r6, [r3, #-1160]
 	mov	fp, #12
-	ldr	ip, [r3, #-1172]
+	ldr	ip, [r3, #-1176]
 	mov	r3, #0
 	mov	r4, r3
-	b	.L734
-.L737:
+	b	.L674
+.L677:
 	mul	sl, fp, r2
 	add	r8, ip, sl
 	ldr	r9, [ip, sl]
 	ldr	sl, [r7, #8]
 	cmp	r9, sl
 	streq	r4, [r8, #8]
-	beq	.L736
-.L735:
+	beq	.L676
+.L675:
 	add	r2, r2, #1
 	uxth	r2, r2
-.L739:
+.L679:
 	cmp	r2, r6
-	bcc	.L737
-.L736:
+	bcc	.L677
+.L676:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L734:
+.L674:
 	cmp	r3, r1
 	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 	mla	r7, r5, r3, r0
 	mov	r2, #0
-	b	.L739
-.L741:
+	b	.L679
+.L681:
 	.align	2
-.L740:
+.L680:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -6187,47 +5792,47 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L749
+	ldr	r3, .L689
 	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 	.save {r4, r5, r6, r7, r8, sl, lr}
 	mov	r6, #12
-	ldr	r8, [r3, #-1156]
+	ldr	r8, [r3, #-1160]
 	mov	r5, #1
-	ldr	r7, [r3, #-1172]
+	ldr	r7, [r3, #-1176]
 	mov	r4, #36
 	mov	r3, #0
-	b	.L743
-.L746:
+	b	.L683
+.L686:
 	mla	ip, r6, r2, r7
 	ldr	sl, [ip, #8]
 	cmp	sl, #0
-	bne	.L744
+	bne	.L684
 	mla	r2, r4, r3, r0
 	ldr	sl, [ip, #0]
 	str	r5, [ip, #8]
 	str	sl, [r2, #8]
 	ldr	ip, [ip, #4]
 	str	ip, [r2, #12]
-	b	.L745
-.L744:
+	b	.L685
+.L684:
 	add	r2, r2, #1
 	uxth	r2, r2
-	b	.L747
-.L748:
+	b	.L687
+.L688:
 	mov	r2, #0
-.L747:
+.L687:
 	cmp	r2, r8
-	bcc	.L746
-.L745:
+	bcc	.L686
+.L685:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L743:
+.L683:
 	cmp	r3, r1
-	bcc	.L748
+	bcc	.L688
 	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L750:
+.L690:
 	.align	2
-.L749:
+.L689:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -6239,31 +5844,31 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L756
-	ldr	r2, .L756+4
+	ldr	r3, .L696
+	ldr	r2, .L696+4
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r3, #-1148]
+	ldr	r2, [r3, #-1152]
 	mov	r3, #0
-	b	.L752
-.L754:
+	b	.L692
+.L694:
 	ldrh	ip, [r2], #2
 	cmp	ip, r0
-	beq	.L755
+	beq	.L695
 	add	r3, r3, #1
 	uxth	r3, r3
-.L752:
+.L692:
 	cmp	r3, r1
-	bne	.L754
+	bne	.L694
 	mov	r0, #0
 	bx	lr
-.L755:
+.L695:
 	mov	r0, #1
 	bx	lr
-.L757:
+.L697:
 	.align	2
-.L756:
+.L696:
 	.word	.LANCHOR2
-	.word	-1152
+	.word	-1156
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -6280,36 +5885,36 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	r3, .L762
-	ldr	r2, .L762+4
+	ldr	r3, .L702
+	ldr	r2, .L702+4
 	ldrh	ip, [r3, r2]
-	ldr	r2, [r3, #-1148]
+	ldr	r2, [r3, #-1152]
 	mov	r3, #0
 	mov	r1, r2
-	b	.L759
-.L761:
+	b	.L699
+.L701:
 	ldrh	r7, [r1], #2
 	cmp	r7, r0
-	beq	.L760
+	beq	.L700
 	add	r3, r3, #1
 	uxth	r3, r3
-.L759:
+.L699:
 	cmp	r3, ip
-	bne	.L761
+	bne	.L701
 	mov	r3, r3, asl #1
 	strh	r0, [r2, r3]	@ movhi
-	ldr	r2, .L762
-	ldr	r3, .L762+4
+	ldr	r2, .L702
+	ldr	r3, .L702+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
-.L760:
-	ldr	r3, .L762
+.L700:
+	ldr	r3, .L702
 	mov	r0, #12
-	ldr	r2, .L762+8
+	ldr	r2, .L702+8
 	ldrh	r1, [r3, r2]
 	mul	r1, r0, r1
-	ldr	r0, [r3, #-1144]
+	ldr	r0, [r3, #-1148]
 	add	ip, r0, r1
 	stmib	ip, {r5, r6}
 	str	r4, [r0, r1]
@@ -6317,12 +5922,12 @@ FtlGcUpdatePage:
 	add	r1, r1, #1
 	strh	r1, [r3, r2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L763:
+.L703:
 	.align	2
-.L762:
+.L702:
 	.word	.LANCHOR2
-	.word	-1152
-	.word	-1140
+	.word	-1156
+	.word	-1144
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
 	.align	2
@@ -6332,35 +5937,37 @@ FtlGcRefreshBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, lr}
-	.save {r4, lr}
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
 	mov	r4, r0
 	mov	r1, r4
-	ldr	r0, .L768
+	ldr	r0, .L707
 	bl	printk
-	ldr	r3, .L768+4
-	ldr	r2, .L768+8
-	movw	r1, #65535
-	ldrh	r0, [r3, r2]
-	cmp	r0, r1
-	beq	.L767
-.L765:
-	ldr	r2, .L768+12
+	ldr	r3, .L707+4
+	ldr	ip, .L707+8
+	ldrh	r5, [r3, ip]
+	cmp	r5, r4
+	beq	.L705
+	ldr	r2, .L707+12
 	ldrh	r0, [r3, r2]
+	cmp	r0, r4
+	beq	.L705
+	movw	r1, #65535
+	cmp	r5, r1
+	streqh	r4, [r3, ip]	@ movhi
+	beq	.L705
 	cmp	r0, r1
-	bne	.L766
-.L767:
-	strh	r4, [r3, r2]	@ movhi
-.L766:
+	streqh	r4, [r3, r2]	@ movhi
+.L705:
 	mov	r0, #0
-	ldmfd	sp!, {r4, pc}
-.L769:
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L708:
 	.align	2
-.L768:
+.L707:
 	.word	.LC78
 	.word	.LANCHOR2
-	.word	-1138
-	.word	-1136
+	.word	-1142
+	.word	-1140
 	.fnend
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
@@ -6374,58 +5981,57 @@ FtlGcMarkBadPhyBlk:
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r4, r0
 	bl	P2V_block_in_plane
-	ldr	r5, .L775
+	ldr	r5, .L714
 	mov	r2, r4
-	ldr	r7, .L775+4
+	ldr	r7, .L714+4
 	ldrh	r1, [r5, r7]
 	mov	r6, r0
-	ldr	r0, .L775+8
+	ldr	r0, .L714+8
 	bl	printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
-	ldr	r3, [r5, #-1884]
+	ldr	r3, [r5, #-1888]
 	cmp	r3, #0
-	beq	.L771
-	ldr	r3, [r5, #-2084]
+	beq	.L710
+	ldr	r3, [r5, #-2088]
 	mov	r6, r6, asl #1
 	ldrh	r2, [r3, r6]
 	cmp	r2, #29
 	subhi	r2, r2, #30
 	strhih	r2, [r3, r6]	@ movhi
-.L771:
+.L710:
 	ldrh	r1, [r5, r7]
 	mov	r3, #0
-	ldr	r2, .L775+12
-	b	.L772
-.L774:
+	ldr	r2, .L714+12
+	b	.L711
+.L713:
 	ldrh	r0, [r2, #2]!
 	cmp	r0, r4
-	beq	.L773
+	beq	.L712
 	add	r3, r3, #1
 	uxth	r3, r3
-.L772:
+.L711:
 	cmp	r3, r1
-	bne	.L774
+	bne	.L713
 	cmp	r3, #15
-	bhi	.L773
-	ldr	r2, .L775
-	ldr	r1, .L775+16
-	add	r0, r2, r3, asl #1
+	bhi	.L712
+	ldr	r2, .L714
+	add	r1, r2, r3, asl #1
 	add	r3, r3, #1
-	strh	r4, [r0, r1]	@ movhi
-	sub	r1, r1, #2
+	sub	r1, r1, #1136
+	strh	r4, [r1, #0]	@ movhi
+	ldr	r1, .L714+4
 	strh	r3, [r2, r1]	@ movhi
-.L773:
+.L712:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L776:
+.L715:
 	.align	2
-.L775:
+.L714:
 	.word	.LANCHOR2
-	.word	-1134
+	.word	-1138
 	.word	.LC79
-	.word	.LANCHOR2-1134
-	.word	-1132
+	.word	.LANCHOR2-1138
 	.fnend
 	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
 	.align	2
@@ -6437,42 +6043,41 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r2, .L780
-	ldr	r3, .L780+4
+	ldr	r2, .L719
+	ldr	r3, .L719+4
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	beq	.L778
-	ldr	r1, .L780+8
+	beq	.L717
+	ldr	r1, .L719+8
 	ldrh	r0, [r3, r1]
 	movw	r1, #65535
 	cmp	r0, r1
-	bne	.L778
-	ldr	r4, .L780+12
-	ldr	r5, .L780+4
+	bne	.L717
+	ldr	r4, .L719+12
+	ldr	r5, .L719+4
 	ldrh	r1, [r3, r4]
 	cmp	r1, r2
 	movcs	r2, #0
 	strcsh	r2, [r3, r4]	@ movhi
-	ldrh	r2, [r5, r4]
-	ldr	r3, .L780+16
-	add	r2, r5, r2, asl #1
-	ldrh	r0, [r2, r3]
+	ldrh	r3, [r5, r4]
+	add	r3, r5, r3, asl #1
+	sub	r3, r3, #1136
+	ldrh	r0, [r3, #0]
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r5, r4]
 	add	r3, r3, #1
 	strh	r3, [r5, r4]	@ movhi
-.L778:
+.L717:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L781:
+.L720:
 	.align	2
-.L780:
-	.word	-1134
-	.word	.LANCHOR2
+.L719:
 	.word	-1138
-	.word	-1098
-	.word	-1132
+	.word	.LANCHOR2
+	.word	-1142
+	.word	-1102
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
 	.align	2
@@ -6486,9 +6091,9 @@ ftl_memset:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, r0
-	beq	.L783
+	beq	.L722
 	bl	memset
-.L783:
+.L722:
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
 	.fnend
@@ -6503,12 +6108,12 @@ FtlGcPageVarInit:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r3, #0
-	ldr	r4, .L785
-	movw	r5, #3916
-	ldr	r2, .L785+4
+	ldr	r4, .L724
+	movw	r5, #3912
+	ldr	r2, .L724+4
 	mov	r1, #255
-	ldr	r6, .L785+8
-	ldr	r0, [r4, #-1148]
+	ldr	r6, .L724+8
+	ldr	r0, [r4, #-1152]
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #12
 	strh	r3, [r4, r2]	@ movhi
@@ -6517,17 +6122,17 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	ldrh	r3, [r6, r5]
 	mov	r2, #12
-	ldr	r0, [r4, #-1144]
+	ldr	r0, [r4, #-1148]
 	mov	r1, #255
 	mul	r2, r2, r3
 	bl	ftl_memset
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlGcBufInit
-.L786:
+.L725:
 	.align	2
-.L785:
+.L724:
 	.word	.LANCHOR2
-	.word	-1152
+	.word	-1156
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
@@ -6540,31 +6145,31 @@ SupperBlkListInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r3, #3854
-	ldr	r7, .L796
+	movw	r3, #3850
+	ldr	r7, .L736
 	mov	r2, #6
-	ldr	r4, .L796+4
+	ldr	r4, .L736+4
 	mov	r1, #0
 	mov	r6, #0
 	ldrh	r3, [r7, r3]
 	mov	sl, r6
-	ldr	r0, [r4, #-2072]
+	ldr	r0, [r4, #-2076]
 	mul	r2, r2, r3
 	bl	ftl_memset
-	ldr	r3, .L796+8
-	str	r6, [r4, #-2052]
-	str	r6, [r4, #-2068]
+	ldr	r3, .L736+8
+	str	r6, [r4, #-2056]
+	str	r6, [r4, #-2072]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #8
-	str	r6, [r4, #-2060]
+	str	r6, [r4, #-2064]
 	strh	r6, [r4, r3]	@ movhi
 	mov	r4, r6
-	b	.L788
-.L790:
+	b	.L727
+.L729:
 	add	r3, r7, r8
 	mov	r1, r4
 	add	r8, r8, #1
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
 	uxth	r8, r8
 	bl	FtlBbmIsBadBlock
@@ -6572,79 +6177,86 @@ SupperBlkListInit:
 	ldreqh	r3, [r7, r9]
 	addeq	r5, r5, r3
 	uxtheq	r5, r5
-	b	.L794
-.L795:
+	b	.L734
+.L735:
 	mov	r5, #0
-	movw	fp, #3844
+	mov	fp, #3840
 	mov	r8, r5
-	movw	r9, #3912
-.L794:
+	movw	r9, #3908
+.L734:
 	ldrh	r3, [r7, fp]
 	cmp	r3, r8
-	bhi	.L790
+	bhi	.L729
 	cmp	r5, #0
-	beq	.L791
+	ldr	r8, .L736+4
+	beq	.L730
 	mov	r1, r5
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r5, r0
-.L791:
-	ldr	r3, .L796+4
+	b	.L731
+.L730:
+	ldr	r2, [r8, #-2068]
+	mov	r3, r4, asl #1
+	mvn	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+.L731:
+	ldr	r2, [r8, #-2076]
 	mov	r1, #6
-	ldr	r2, [r3, #-2072]
+	ldr	r3, .L736+4
 	mla	r2, r1, r4, r2
 	strh	r5, [r2, #4]	@ movhi
-	ldr	r2, .L796+12
-	ldrh	r2, [r3, r2]
+	ldr	r2, .L736+12
+	ldrh	r2, [r8, r2]
 	cmp	r2, r4
-	beq	.L792
-	ldr	r2, .L796+16
+	beq	.L732
+	ldr	r2, .L736+16
 	ldrh	r2, [r3, r2]
 	cmp	r2, r4
-	beq	.L792
-	ldr	r2, .L796+20
+	beq	.L732
+	ldr	r2, .L736+20
 	ldrh	r2, [r3, r2]
 	cmp	r2, r4
-	beq	.L792
-	ldr	r2, [r3, #-2064]
+	beq	.L732
+	ldr	r2, [r3, #-2068]
 	mov	r3, r4, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L793
+	bne	.L733
 	add	r6, r6, #1
 	mov	r0, r4
 	uxth	r6, r6
 	bl	INSERT_FREE_LIST
-	b	.L792
-.L793:
+	b	.L732
+.L733:
 	add	sl, sl, #1
 	mov	r0, r4
 	uxth	sl, sl
 	bl	INSERT_DATA_LIST
-.L792:
+.L732:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L788:
-	movw	r2, #3852
+.L727:
+	movw	r2, #3848
 	ldrh	r3, [r7, r2]
 	cmp	r3, r4
-	bhi	.L795
-	ldr	r3, .L796+4
+	bhi	.L735
+	ldr	r3, .L736+4
 	mov	r0, #0
-	ldr	r2, .L796+8
+	ldr	r2, .L736+8
 	strh	sl, [r3, r2]	@ movhi
 	add	r2, r2, #8
 	strh	r6, [r3, r2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L797:
+.L737:
 	.align	2
-.L796:
+.L736:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-2056
-	.word	-2044
-	.word	-1996
-	.word	-1948
+	.word	-2060
+	.word	-2048
+	.word	-2000
+	.word	-1952
 	.fnend
 	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	2
@@ -6657,33 +6269,33 @@ FtlL2PDataInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r1, #0
-	ldr	r4, .L801
-	movw	r6, #3922
-	ldr	r5, .L801+4
-	movw	r7, #3950
+	ldr	r4, .L741
+	movw	r6, #3918
+	ldr	r5, .L741+4
+	movw	r7, #3946
 	mov	r8, #12
-	ldr	r2, [r4, #3940]
-	ldr	r0, [r5, #-1096]
+	ldr	r2, [r4, #3936]
+	ldr	r0, [r5, #-1100]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r3, [r4, r6]
 	ldrh	r2, [r4, r7]
 	mov	r1, #255
-	ldr	r0, [r5, #-1092]
+	ldr	r0, [r5, #-1096]
 	mul	r2, r2, r3
 	bl	ftl_memset
 	mov	r2, #0
 	mov	ip, r2
 	mvn	r0, #0
-	b	.L799
-.L800:
+	b	.L739
+.L740:
 	mul	r3, r8, r2
-	ldr	r1, [r5, #-1900]
+	ldr	r1, [r5, #-1904]
 	add	sl, r1, r3
 	str	ip, [sl, #4]
 	strh	r0, [r1, r3]	@ movhi
-	ldr	r1, [r5, #-1900]
-	ldr	sl, [r5, #-1092]
+	ldr	r1, [r5, #-1904]
+	ldr	sl, [r5, #-1096]
 	add	r3, r1, r3
 	ldrh	r1, [r4, r6]
 	mul	r1, r2, r1
@@ -6692,50 +6304,50 @@ FtlL2PDataInit:
 	bic	r1, r1, #3
 	add	r1, sl, r1
 	str	r1, [r3, #8]
-.L799:
+.L739:
 	ldrh	r3, [r4, r7]
-	ldr	r1, .L801
+	ldr	r1, .L741
 	cmp	r3, r2
-	ldr	r3, .L801+4
-	bhi	.L800
-	ldr	r0, .L801+8
+	ldr	r3, .L741+4
+	bhi	.L740
+	ldr	r0, .L741+8
 	mvn	r2, #0
 	strh	r2, [r3, r0]	@ movhi
-	ldr	r0, .L801+12
+	sub	r0, r0, #2
 	strh	r2, [r3, r0]	@ movhi
-	ldr	r0, [r1, #3940]
-	ldr	r2, .L801+16
+	ldr	r0, [r1, #3936]
+	ldr	r2, .L741+12
 	strh	r0, [r3, r2]	@ movhi
-	sub	r2, r2, #6
-	ldr	r0, .L801+20
+	ldr	r0, .L741+16
+	ldr	r2, .L741+20
 	strh	r0, [r3, r2]	@ movhi
 	add	r2, r2, #36
 	ldrh	r0, [r3, r2]
 	sub	r2, r2, #32
 	strh	r0, [r3, r2]	@ movhi
-	movw	r2, #3948
+	movw	r2, #3944
 	ldrh	r1, [r1, r2]
-	ldr	r2, .L801+24
+	ldr	r2, .L741+24
 	strh	r1, [r3, r2]	@ movhi
+	ldr	r2, [r3, #-1048]
+	str	r2, [r3, #-1080]
 	ldr	r2, [r3, #-1044]
 	str	r2, [r3, #-1076]
-	ldr	r2, [r3, #-1040]
+	ldr	r2, [r3, #-1100]
 	str	r2, [r3, #-1072]
-	ldr	r2, [r3, #-1096]
+	ldr	r2, [r3, #-1040]
 	str	r2, [r3, #-1068]
-	ldr	r2, [r3, #-1036]
-	str	r2, [r3, #-1064]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L802:
+.L742:
 	.align	2
-.L801:
+.L741:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1086
-	.word	-1088
-	.word	-1078
-	.word	-3902
+	.word	-1090
 	.word	-1082
+	.word	-3902
+	.word	-1088
+	.word	-1086
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
@@ -6757,13 +6369,13 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r3, #0
-	b	.L804
-.L808:
+	b	.L744
+.L748:
 	ldr	r0, [r7, r3, asl #2]
 	mov	r2, #0
 	ubfx	r0, r0, #10, #16
-	b	.L805
-.L807:
+	b	.L745
+.L747:
 	mov	r1, r2, asl #1
 	add	r2, r2, #1
 	ldrh	ip, [r6, r1]
@@ -6772,42 +6384,42 @@ ftl_free_no_use_map_blk:
 	ldreqh	ip, [r5, r1]
 	addeq	ip, ip, #1
 	streqh	ip, [r5, r1]	@ movhi
-.L805:
+.L745:
 	ldrh	r1, [r4, #10]
 	cmp	r1, r2
-	bhi	.L807
+	bhi	.L747
 	add	r3, r3, #1
 	uxth	r3, r3
-.L804:
+.L744:
 	ldrh	r2, [r4, #6]
 	cmp	r2, r3
-	bhi	.L808
+	bhi	.L748
 	mov	sl, #0
 	ldrh	fp, [r5, #0]
 	mov	r7, sl
-	ldr	r3, .L814
-	movw	r2, #3914
-	b	.L809
-.L813:
+	ldr	r3, .L754
+	movw	r2, #3910
+	b	.L749
+.L753:
 	ldrh	r1, [r4, #0]
 	cmp	r1, r7
-	bne	.L810
+	bne	.L750
 	ldrh	r0, [r4, #2]
 	ldrh	r1, [r3, r2]
 	cmp	r0, r1
 	movcc	r0, r7, asl #1
 	strcch	r1, [r5, r0]	@ movhi
-.L810:
+.L750:
 	mov	r9, r7, asl #1
 	ldrh	r8, [r5, r9]
 	cmp	fp, r8
 	movhi	sl, r7
 	movhi	fp, r8
 	cmp	r8, #0
-	bne	.L812
+	bne	.L752
 	ldrh	r0, [r6, r9]
 	cmp	r0, #0
-	beq	.L812
+	beq	.L752
 	mov	r1, #1
 	stmia	sp, {r2, r3}
 	bl	FtlFreeSysBlkQueueIn
@@ -6816,18 +6428,18 @@ ftl_free_no_use_map_blk:
 	ldrh	r1, [r4, #8]
 	sub	r1, r1, #1
 	strh	r1, [r4, #8]	@ movhi
-.L812:
+.L752:
 	add	r7, r7, #1
 	uxth	r7, r7
-.L809:
+.L749:
 	ldrh	r1, [r4, #10]
 	cmp	r1, r7
-	bhi	.L813
+	bhi	.L753
 	mov	r0, sl
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L815:
+.L755:
 	.align	2
-.L814:
+.L754:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -6838,8 +6450,8 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L817
-	movw	r2, #4042
+	ldr	r3, .L757
+	movw	r2, #4038
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, #0
@@ -6849,17 +6461,18 @@ FtlFreeSysBlkQueueInit:
 	strh	r4, [r3, r2]	@ movhi
 	add	r2, r2, #2
 	strh	r4, [r3, r2]	@ movhi
-	movw	r2, #4040
+	movw	r2, #4036
 	strh	r0, [r3, r2]	@ movhi
-	add	r0, r3, #4048
 	mov	r2, #2048
+	ldr	r0, .L757+4
 	bl	ftl_memset
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L818:
+.L758:
 	.align	2
-.L817:
+.L757:
 	.word	.LANCHOR0
+	.word	.LANCHOR0+4044
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
 	.align	2
@@ -6870,10 +6483,10 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L820
-	movw	r2, #3980
+	ldr	r3, .L760
+	movw	r2, #3976
 	mvn	r1, #0
-	ldr	r0, .L820+4
+	ldr	r0, .L760+4
 	strh	r1, [r3, r2]	@ movhi
 	add	r2, r2, #6
 	mov	r1, #0
@@ -6881,11 +6494,11 @@ FtlBbtMemInit:
 	mov	r1, #255
 	mov	r2, #16
 	b	ftl_memset
-.L821:
+.L761:
 	.align	2
-.L820:
+.L760:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3992
+	.word	.LANCHOR0+3988
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
 	.align	2
@@ -6895,8 +6508,8 @@ FtlBbt2Bitmap:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L826
-	ldr	r2, .L826+4
+	ldr	r3, .L766
+	ldr	r2, .L766+4
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
@@ -6909,7 +6522,7 @@ FtlBbt2Bitmap:
 	mov	r3, #0
 	movw	ip, #65535
 	mov	r0, #1
-.L824:
+.L764:
 	ldrh	r2, [r5, r3]
 	cmp	r2, ip
 	ldmeqfd	sp!, {r4, r5, r6, pc}
@@ -6920,12 +6533,12 @@ FtlBbt2Bitmap:
 	ldr	r6, [r4, r1, asl #2]
 	orr	r2, r6, r0, asl r2
 	str	r2, [r4, r1, asl #2]
-	bne	.L824
+	bne	.L764
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L827:
+.L767:
 	.align	2
-.L826:
-	.word	-1032
+.L766:
+	.word	-1036
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
@@ -6939,55 +6552,54 @@ FtlVariablesInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mvn	r3, #0
-	ldr	r5, .L829
+	ldr	r5, .L769
 	mov	r4, #0
-	ldr	r2, .L829+4
+	ldr	r2, .L769+4
 	mov	r1, r4
-	ldr	r6, .L829+8
-	movw	r7, #3854
-	str	r3, [r5, #-1012]
+	ldr	r6, .L769+8
+	movw	r7, #3850
+	str	r3, [r5, #-1016]
 	strh	r3, [r5, r2]	@ movhi
-	movw	r3, #3956
+	mov	r3, #3952
 	strh	r4, [r6, r3]	@ movhi
-	movw	r3, #3932
+	movw	r3, #3928
 	ldrh	r2, [r6, r3]
-	ldr	r0, [r6, #3960]
-	str	r4, [r5, #-1028]
+	ldr	r0, [r6, #3956]
+	str	r4, [r5, #-1032]
 	mov	r2, r2, asl #1
+	str	r4, [r5, #-1024]
 	str	r4, [r5, #-1020]
-	str	r4, [r5, #-1016]
-	str	r4, [r5, #-1884]
+	str	r4, [r5, #-1888]
 	bl	ftl_memset
 	ldrh	r2, [r6, r7]
 	mov	r1, r4
-	ldr	r0, [r5, #-2084]
+	ldr	r0, [r5, #-2088]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r2, [r6, r7]
 	mov	r1, r4
-	ldr	r0, [r5, #-1008]
+	ldr	r0, [r5, #-1012]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	mov	r1, r4
+	sub	r0, r5, #1824
 	mov	r2, #48
-	ldr	r0, .L829+12
 	bl	ftl_memset
 	mov	r1, r4
 	mov	r2, #512
-	ldr	r0, .L829+16
+	ldr	r0, .L769+12
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L830:
+.L770:
 	.align	2
-.L829:
+.L769:
 	.word	.LANCHOR2
-	.word	-1024
+	.word	-1028
 	.word	.LANCHOR0
-	.word	.LANCHOR2-1820
-	.word	.LANCHOR2-1704
+	.word	.LANCHOR2-1708
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
@@ -7000,154 +6612,154 @@ FtlMemInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	movw	r3, #65535
-	ldr	r4, .L862
+	ldr	r4, .L802
 	mov	r6, #0
-	ldr	r2, .L862+4
+	ldr	r2, .L802+4
 	mov	r0, #1024
-	ldr	r5, .L862+8
+	ldr	r5, .L802+8
 	mov	r7, #12
-	str	r3, [r4, #-996]
+	str	r3, [r4, #-1000]
 	mvn	r3, #0
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #2
-	str	r6, [r4, #-1004]
-	movw	sl, #3844
+	str	r6, [r4, #-1008]
+	mov	sl, #3840
 	strh	r3, [r4, r2]	@ movhi
 	mov	r2, #32
-	ldr	r3, .L862+12
+	ldr	r3, .L802+12
 	mov	r8, #36
-	str	r6, [r4, #-1708]
-	str	r6, [r4, #-1848]
+	str	r6, [r4, #-1712]
+	str	r6, [r4, #-1852]
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #2
 	mov	r2, #128
-	str	r6, [r4, #-1844]
+	str	r6, [r4, #-1848]
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #6
-	str	r6, [r4, #-1860]
+	str	r6, [r4, #-1864]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #50
-	str	r6, [r4, #-1872]
+	str	r6, [r4, #-1876]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #36
-	str	r6, [r4, #-1876]
+	str	r6, [r4, #-1880]
 	strh	r6, [r4, r3]	@ movhi
-	movw	r3, #3918
+	movw	r3, #3914
 	ldrh	r1, [r5, r3]
+	str	r6, [r4, #-1872]
 	str	r6, [r4, #-1868]
-	str	r6, [r4, #-1864]
-	str	r6, [r4, #-1880]
+	str	r6, [r4, #-1884]
+	str	r6, [r4, #-1844]
 	str	r6, [r4, #-1840]
-	str	r6, [r4, #-1836]
-	str	r6, [r4, #-2080]
+	str	r6, [r4, #-2084]
+	str	r6, [r4, #-1832]
 	str	r6, [r4, #-1828]
-	str	r6, [r4, #-1824]
-	str	r6, [r4, #-1000]
-	str	r6, [r4, #-1180]
-	str	r6, [r4, #-992]
-	str	r6, [r4, #-1188]
-	str	r6, [r5, #3976]
+	str	r6, [r4, #-1004]
+	str	r6, [r4, #-1184]
+	str	r6, [r4, #-996]
+	str	r6, [r4, #-1192]
+	str	r6, [r5, #3972]
 	bl	__aeabi_idiv
-	movw	r3, #3844
+	mov	r3, #3840
 	ldrh	r3, [r5, r3]
-	str	r6, [r5, #3964]
-	movw	r6, #3916
+	str	r6, [r5, #3960]
+	movw	r6, #3912
 	mov	r3, r3, asl #2
 	cmp	r0, r3
-	str	r0, [r4, #-988]
+	str	r0, [r4, #-992]
 	ldrh	r0, [r5, r6]
-	strhi	r3, [r4, #-988]
-	ldr	r4, .L862
+	strhi	r3, [r4, #-992]
+	ldr	r4, .L802
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r4, #-1148]
+	str	r0, [r4, #-1152]
 	ldrh	r0, [r5, r6]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r6, [r5, sl]
 	mul	r6, r8, r6
 	mov	r9, r6, asl #3
-	str	r0, [r4, #-1144]
+	str	r0, [r4, #-1148]
 	mov	r0, r9
 	bl	ftl_malloc
-	str	r0, [r4, #-984]
+	str	r0, [r4, #-988]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-980]
+	str	r0, [r4, #-984]
 	mov	r0, r9
 	bl	ftl_malloc
-	str	r0, [r4, #-976]
+	str	r0, [r4, #-980]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-2088]
+	str	r0, [r4, #-2092]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-1160]
-	ldr	r0, [r4, #-988]
+	str	r0, [r4, #-1164]
+	ldr	r0, [r4, #-992]
 	mul	r0, r8, r0
 	bl	ftl_malloc
-	movw	r8, #3922
+	movw	r8, #3918
 	ldrh	r3, [r5, sl]
 	ldrh	r6, [r5, r8]
 	mov	r3, r3, asl #1
 	add	r3, r3, #1
-	str	r3, [r4, #-1156]
-	str	r0, [r5, #3968]
+	str	r3, [r4, #-1160]
+	str	r0, [r5, #3964]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-2076]
+	str	r0, [r4, #-2080]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-972]
+	str	r0, [r4, #-976]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-968]
-	ldr	r0, [r4, #-1156]
+	str	r0, [r4, #-972]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-1168]
-	ldr	r0, [r4, #-988]
+	str	r0, [r4, #-1172]
+	ldr	r0, [r4, #-992]
 	mul	r0, r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-964]
+	str	r0, [r4, #-968]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-960]
+	str	r0, [r4, #-964]
 	mov	r0, r6
 	bl	ftl_malloc
-	movw	r6, #3924
-	str	r0, [r4, #-956]
-	ldr	r0, [r4, #-1156]
+	mov	r6, #3920
+	str	r0, [r4, #-960]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
 	ldrh	sl, [r5, sl]
 	mul	sl, sl, r3
-	str	r0, [r4, #-1172]
+	str	r0, [r4, #-1176]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-952]
+	str	r0, [r4, #-956]
 	mov	r0, sl, asl #3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	ldr	sl, .L862+16
-	str	r0, [r4, #-948]
-	ldr	r0, [r4, #-1156]
+	ldr	sl, .L802+16
+	str	r0, [r4, #-952]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r0, r3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	movw	r6, #3854
-	str	r0, [r4, #-1164]
-	ldr	r0, [r4, #-988]
+	movw	r6, #3850
+	str	r0, [r4, #-1168]
+	ldr	r0, [r4, #-992]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	str	r0, [r4, #-944]
+	str	r0, [r4, #-948]
 	ldrh	r0, [r5, r6]
 	mov	r0, r0, asl #1
 	uxth	r0, r0
 	strh	r0, [r4, sl]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #-1008]
+	str	r0, [r4, #-1012]
 	ldrh	r0, [r4, sl]
 	add	r0, r0, #544
 	add	r0, r0, #3
@@ -7157,42 +6769,42 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	sl, [r5, r6]
 	mov	sl, sl, asl #1
-	str	r0, [r4, #-936]
+	str	r0, [r4, #-940]
 	add	r0, r0, #32
-	str	r0, [r4, #-2084]
+	str	r0, [r4, #-2088]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-932]
+	str	r0, [r4, #-936]
 	mov	r0, sl
 	bl	ftl_malloc
-	ldr	sl, [r5, #3940]
+	ldr	sl, [r5, #3936]
 	mov	sl, sl, asl #1
-	str	r0, [r4, #-2064]
+	str	r0, [r4, #-2068]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-1044]
+	str	r0, [r4, #-1048]
 	mov	r0, sl
 	bl	ftl_malloc
-	movw	sl, #3932
-	str	r0, [r4, #-1096]
+	movw	sl, #3928
+	str	r0, [r4, #-1100]
 	ldrh	r0, [r5, r6]
 	mov	r0, r0, lsr #3
 	add	r0, r0, #4
 	bl	ftl_malloc
-	str	r0, [r4, #-1888]
+	str	r0, [r4, #-1892]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r5, #3960]
+	str	r0, [r5, #3956]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r4, #-928]
+	str	r0, [r4, #-932]
 	ldrh	r0, [r5, sl]
 	add	sl, sl, #2
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
-	str	r0, [r4, #-924]
+	str	r0, [r4, #-928]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
@@ -7200,212 +6812,212 @@ FtlMemInit:
 	mov	r1, #0
 	add	sl, sl, #16
 	mov	r2, r2, asl #2
-	str	r0, [r4, #-920]
+	str	r0, [r4, #-924]
 	bl	ftl_memset
-	movw	r3, #3948
+	movw	r3, #3944
 	ldrh	r0, [r5, r3]
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
-	str	r0, [r4, #-1036]
-	ldr	r0, [r5, #3940]
+	str	r0, [r4, #-1040]
+	ldr	r0, [r5, #3936]
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
-	str	r0, [r4, #-1040]
+	str	r0, [r4, #-1044]
 	ldrh	r0, [r5, sl]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r5, sl]
-	movw	r7, #3866
-	str	r0, [r4, #-1900]
+	movw	r7, #3862
+	str	r0, [r4, #-1904]
 	ldrh	r0, [r5, r8]
 	mul	r0, r0, r3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	ldr	r6, .L862+20
-	str	r0, [r4, #-1092]
+	ldr	r6, .L802+20
+	str	r0, [r4, #-1096]
 	mov	r0, #6
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	movw	r3, #3908
+	mov	r3, #3904
 	ldrh	r3, [r5, r3]
 	ldrh	r2, [r5, r7]
 	add	r3, r3, #31
 	mov	r3, r3, lsr #5
 	strh	r3, [r4, r6]	@ movhi
 	mul	r3, r2, r3
-	str	r0, [r4, #-2072]
+	str	r0, [r4, #-2076]
 	mov	r0, r3, asl #2
 	bl	ftl_malloc
 	ldrh	r1, [r4, r6]
 	mov	r3, #1
-	ldr	ip, .L862+8
+	ldr	ip, .L802+8
 	mov	r1, r1, asl #2
 	mov	r2, r1
-	str	r0, [r5, #4008]
+	str	r0, [r5, #4004]
 	ldrh	r5, [r5, r7]
-	ldr	r0, .L862+24
-	b	.L833
-.L834:
-	ldr	r4, [ip, #4008]
+	ldr	r0, .L802+24
+	b	.L773
+.L774:
+	ldr	r4, [ip, #4004]
 	add	r3, r3, #1
 	add	r4, r4, r2
 	add	r2, r2, r1
 	str	r4, [r0, #4]!
-.L833:
+.L773:
 	cmp	r3, r5
-	bcc	.L834
-	ldr	r0, .L862+28
+	bcc	.L774
+	ldr	r0, .L802+28
 	mov	r2, #0
 	mov	r1, r2
 	add	r0, r0, r3, asl #2
-	b	.L835
-.L836:
+	b	.L775
+.L776:
 	add	ip, r0, r2
 	add	r3, r3, #1
 	add	r2, r2, #4
 	str	r1, [ip, #28]
-.L835:
+.L775:
 	cmp	r3, #7
-	bls	.L836
-	ldr	r3, .L862
-	ldr	r2, [r3, #-1044]
-	cmp	r2, #0
-	beq	.L861
-.L837:
-	ldr	r2, [r3, #-1096]
+	bls	.L776
+	ldr	r3, .L802
+	ldr	r2, [r3, #-1048]
 	cmp	r2, #0
-	beq	.L861
-.L839:
-	ldr	r2, [r3, #-1036]
+	beq	.L801
+.L777:
+	ldr	r2, [r3, #-1100]
 	cmp	r2, #0
-	beq	.L861
-.L840:
+	beq	.L801
+.L779:
 	ldr	r2, [r3, #-1040]
 	cmp	r2, #0
-	beq	.L861
-.L841:
-	ldr	r2, [r3, #-1900]
+	beq	.L801
+.L780:
+	ldr	r2, [r3, #-1044]
 	cmp	r2, #0
-	beq	.L861
-.L842:
-	ldr	r2, [r3, #-1092]
+	beq	.L801
+.L781:
+	ldr	r2, [r3, #-1904]
 	cmp	r2, #0
-	beq	.L861
-.L843:
-	ldr	r2, [r3, #-2072]
+	beq	.L801
+.L782:
+	ldr	r2, [r3, #-1096]
 	cmp	r2, #0
-	beq	.L861
-.L844:
-	ldr	r2, .L862+8
-	ldr	r2, [r2, #4008]
+	beq	.L801
+.L783:
+	ldr	r2, [r3, #-2076]
 	cmp	r2, #0
-	beq	.L861
-.L845:
-	ldr	r3, [r3, #-2064]
+	beq	.L801
+.L784:
+	ldr	r2, .L802+8
+	ldr	r2, [r2, #4004]
+	cmp	r2, #0
+	beq	.L801
+.L785:
+	ldr	r3, [r3, #-2068]
 	cmp	r3, #0
-	beq	.L861
-.L846:
-	ldr	r3, .L862
-	ldr	r2, [r3, #-1148]
+	beq	.L801
+.L786:
+	ldr	r3, .L802
+	ldr	r2, [r3, #-1152]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-1144]
+	beq	.L801
+	ldr	r2, [r3, #-1148]
 	cmp	r2, #0
-	beq	.L861
-.L848:
-	ldr	r2, [r3, #-984]
+	beq	.L801
+.L788:
+	ldr	r2, [r3, #-988]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-976]
+	beq	.L801
+	ldr	r2, [r3, #-980]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-2088]
+	beq	.L801
+	ldr	r2, [r3, #-2092]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-1160]
+	beq	.L801
+	ldr	r2, [r3, #-1164]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-980]
+	beq	.L801
+	ldr	r2, [r3, #-984]
 	cmp	r2, #0
-	beq	.L861
-.L850:
-	ldr	r2, [r3, #-2076]
+	beq	.L801
+.L790:
+	ldr	r2, [r3, #-2080]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-972]
+	beq	.L801
+	ldr	r2, [r3, #-976]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r3, [r3, #-968]
+	beq	.L801
+	ldr	r3, [r3, #-972]
 	cmp	r3, #0
-	beq	.L861
-	ldr	r3, .L862
-	ldr	r2, [r3, #-1168]
+	beq	.L801
+	ldr	r3, .L802
+	ldr	r2, [r3, #-1172]
+	cmp	r2, #0
+	beq	.L801
+	ldr	r2, [r3, #-964]
 	cmp	r2, #0
-	beq	.L861
+	beq	.L801
 	ldr	r2, [r3, #-960]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-956]
+	beq	.L801
+	ldr	r2, [r3, #-1176]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-1172]
+	beq	.L801
+.L792:
+	ldr	r2, [r3, #-956]
 	cmp	r2, #0
-	beq	.L861
-.L852:
+	beq	.L801
 	ldr	r2, [r3, #-952]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-948]
-	cmp	r2, #0
-	beq	.L861
-	ldr	r2, [r3, #-1164]
+	beq	.L801
+	ldr	r2, [r3, #-1168]
 	cmp	r2, #0
-	beq	.L861
-.L854:
-	ldr	r2, [r3, #-2084]
+	beq	.L801
+.L794:
+	ldr	r2, [r3, #-2088]
 	cmp	r2, #0
-	beq	.L861
-	ldr	r3, [r3, #-1008]
+	beq	.L801
+	ldr	r3, [r3, #-1012]
 	cmp	r3, #0
-	beq	.L861
-.L856:
-	ldr	r3, .L862+8
-	ldr	r3, [r3, #3960]
+	beq	.L801
+.L796:
+	ldr	r3, .L802+8
+	ldr	r3, [r3, #3956]
 	cmp	r3, #0
-	beq	.L861
-.L857:
-	ldr	r3, .L862
-	ldr	r2, [r3, #-928]
+	beq	.L801
+.L797:
+	ldr	r3, .L802
+	ldr	r2, [r3, #-932]
 	cmp	r2, #0
-	beq	.L861
-.L858:
-	ldr	r2, [r3, #-924]
+	beq	.L801
+.L798:
+	ldr	r2, [r3, #-928]
 	cmp	r2, #0
-	beq	.L861
-.L859:
-	ldr	r3, [r3, #-920]
+	beq	.L801
+.L799:
+	ldr	r3, [r3, #-924]
 	cmp	r3, #0
-	bne	.L860
-.L861:
-	ldr	r0, .L862+32
-	ldr	r1, .L862+36
+	bne	.L800
+.L801:
+	ldr	r0, .L802+32
+	ldr	r1, .L802+36
 	bl	printk
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L860:
+.L800:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L863:
+.L803:
 	.align	2
-.L862:
+.L802:
 	.word	.LANCHOR2
-	.word	-1138
+	.word	-1142
 	.word	.LANCHOR0
-	.word	-1192
-	.word	-940
-	.word	-1032
-	.word	.LANCHOR0+4008
-	.word	.LANCHOR0+3980
+	.word	-1196
+	.word	-944
+	.word	-1036
+	.word	.LANCHOR0+4004
+	.word	.LANCHOR0+3976
 	.word	.LC80
 	.word	.LANCHOR3
 	.fnend
@@ -7423,9 +7035,9 @@ ReadFlashInfo:
 	mov	r2, #11
 	mov	r4, r0
 	bl	ftl_memset
-	ldr	r3, .L867
-	ldr	r1, [r3, #2776]
-	ldr	r0, [r3, #4]
+	ldr	r3, .L807
+	ldr	r1, [r3, #3624]
+	ldr	r0, [r3, #856]
 	ldrb	r2, [r1, #9]	@ zero_extendqisi2
 	mul	r2, r0, r2
 	mov	r0, #0
@@ -7433,7 +7045,7 @@ ReadFlashInfo:
 	strb	r2, [r4, #4]
 	mov	ip, r2, lsr #8
 	strb	ip, [r4, #5]
-	ldrb	ip, [r3, #3836]	@ zero_extendqisi2
+	ldrb	ip, [r3, #3832]	@ zero_extendqisi2
 	strb	ip, [r4, #7]
 	ldrb	ip, [r1, #13]	@ zero_extendqisi2
 	mul	r2, r2, ip
@@ -7448,35 +7060,35 @@ ReadFlashInfo:
 	strb	r2, [r4, #0]
 	mov	r2, r2, lsr #24
 	strb	r2, [r4, #3]
-	ldr	r2, [r3, #2776]
-	ldrb	ip, [r3, #3766]	@ zero_extendqisi2
+	ldr	r2, [r3, #3624]
+	ldrb	ip, [r3, #3762]	@ zero_extendqisi2
 	mov	r3, r0
 	ldrb	r1, [r2, #9]	@ zero_extendqisi2
 	strb	r1, [r4, #6]
 	mov	r1, #32
 	strb	r1, [r4, #8]
 	ldrb	r2, [r2, #7]	@ zero_extendqisi2
-	ldr	r1, .L867+4
+	ldr	r1, .L807+4
 	strb	r0, [r4, #10]
 	strb	r2, [r4, #9]
 	mov	r2, #1
-	b	.L865
-.L866:
+	b	.L805
+.L806:
 	ldrb	r5, [r3, r1]	@ zero_extendqisi2
 	add	r3, r3, #1
 	ldrb	r0, [r4, #10]	@ zero_extendqisi2
 	orr	r0, r0, r2, asl r5
 	strb	r0, [r4, #10]
-.L865:
+.L805:
 	uxtb	r0, r3
 	cmp	r0, ip
-	bcc	.L866
+	bcc	.L806
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L868:
+.L808:
 	.align	2
-.L867:
+.L807:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3768
+	.word	.LANCHOR0+3764
 	.fnend
 	.size	ReadFlashInfo, .-ReadFlashInfo
 	.align	2
@@ -7486,123 +7098,123 @@ FlashDieInfoInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L881
+	ldr	r1, .L821
 	mov	r2, #0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
-	ldr	r3, .L881+4
-	strb	r2, [r1, #-916]
-	ldr	r1, .L881+8
-	strb	r2, [r3, #3766]
-	movw	r2, #2698
+	ldr	r3, .L821+4
+	strb	r2, [r1, #-920]
+	ldr	r1, .L821+8
+	strb	r2, [r3, #3762]
+	movw	r2, #2838
 	ldrh	r2, [r1, r2]
 	cmp	r2, #256
-	str	r2, [r3, #4]
+	str	r2, [r3, #856]
 	movhi	r2, #512
-	bhi	.L880
+	bhi	.L820
 	cmp	r2, #128
-	bls	.L871
+	bls	.L811
 	mov	r2, #256
-.L880:
-	str	r2, [r3, #4]
-.L871:
+.L820:
+	str	r2, [r3, #856]
+.L811:
 	mov	r1, #0
 	mov	r2, #8
-	ldr	r0, .L881+12
+	ldr	r0, .L821+12
 	mov	r6, #0
 	bl	ftl_memset
 	mov	r1, #0
 	mov	r2, #32
-	ldr	r0, .L881+16
+	ldr	r0, .L821+16
 	bl	ftl_memset
-	ldr	r0, .L881+20
+	ldr	r0, .L821+20
 	mov	r1, #0
 	mov	r2, #128
 	bl	ftl_memset
-	ldr	r7, .L881+24
-	ldr	r5, .L881+4
+	ldr	r7, .L821+24
+	ldr	r5, .L821+4
 	mov	r8, r7
-.L873:
-	ldr	r4, [r5, #2776]
+.L813:
+	ldr	r4, [r5, #3624]
 	mov	r1, r8
 	add	r0, r4, #1
 	ldrb	r2, [r4, #0]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	cmp	r0, #0
-	bne	.L872
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+	bne	.L812
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	add	r2, r5, r3, asl #2
-	str	r0, [r2, #2740]
+	str	r0, [r2, #3588]
 	add	r2, r5, r3
 	add	r3, r3, #1
-	strb	r3, [r5, #3766]
-	strb	r6, [r2, #3768]
-.L872:
+	strb	r3, [r5, #3762]
+	strb	r6, [r2, #3764]
+.L812:
 	add	r6, r6, #1
 	add	r8, r8, #8
 	cmp	r6, #4
-	bne	.L873
-	ldr	r5, .L881+4
-	ldr	r3, .L881
-	ldrb	r2, [r5, #3766]	@ zero_extendqisi2
-	strb	r2, [r3, #-916]
+	bne	.L813
+	ldr	r5, .L821+4
+	ldr	r3, .L821
+	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
+	strb	r2, [r3, #-920]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #2
-	bne	.L874
+	bne	.L814
 	add	sl, r4, #1
 	mov	r6, #0
 	mov	r8, r5
-.L877:
+.L817:
 	mov	r0, sl
 	mov	r1, r7
 	ldrb	r2, [r4, #0]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	cmp	r0, #0
-	bne	.L875
+	bne	.L815
 	ldrb	r1, [r4, #13]	@ zero_extendqisi2
-	ldr	r0, [r5, #4]
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+	ldr	r0, [r5, #856]
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	mul	r0, r0, r1
 	ldrh	r1, [r4, #14]
 	add	r2, r5, r3, asl #2
 	and	r1, r1, #65280
 	mul	r1, r1, r0
-	str	r1, [r2, #2740]
+	str	r1, [r2, #3588]
 	ldrb	r0, [r4, #23]	@ zero_extendqisi2
 	cmp	r0, #0
 	movne	r1, r1, asl #1
-	strne	r1, [r2, #2740]
+	strne	r1, [r2, #3588]
 	add	r2, r8, r3
 	add	r3, r3, #1
-	strb	r3, [r8, #3766]
-	strb	r6, [r2, #3768]
-.L875:
+	strb	r3, [r8, #3762]
+	strb	r6, [r2, #3764]
+.L815:
 	add	r6, r6, #1
 	add	r7, r7, #8
 	cmp	r6, #4
-	bne	.L877
-.L874:
-	ldr	r3, .L881+4
+	bne	.L817
+.L814:
+	ldr	r3, .L821+4
 	ldrb	r1, [r4, #13]	@ zero_extendqisi2
-	ldr	r2, .L881
-	ldrb	r3, [r3, #3766]	@ zero_extendqisi2
+	ldr	r2, .L821
+	ldrb	r3, [r3, #3762]	@ zero_extendqisi2
 	mul	r1, r1, r3
 	ldrh	r3, [r4, #14]
 	mul	r1, r3, r1
-	ldr	r3, .L881+28
+	ldr	r3, .L821+28
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L882:
+.L822:
 	.align	2
-.L881:
+.L821:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR1
-	.word	.LANCHOR0+3768
-	.word	.LANCHOR0+2740
-	.word	.LANCHOR0+2780
-	.word	.LANCHOR0+2132
-	.word	-914
+	.word	.LANCHOR0+3764
+	.word	.LANCHOR0+3588
+	.word	.LANCHOR0+3628
+	.word	.LANCHOR0+2980
+	.word	-918
 	.fnend
 	.size	FlashDieInfoInit, .-FlashDieInfoInit
 	.align	2
@@ -7616,88 +7228,88 @@ BuildFlashLsbPageTable:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, r1
-	bne	.L884
-	ldr	r3, .L923
-.L885:
+	bne	.L824
+	ldr	r3, .L863
+.L825:
 	strh	r0, [r3, #2]!	@ movhi
 	add	r0, r0, #1
 	uxth	r0, r0
 	cmp	r0, #256
-	bne	.L885
-	b	.L886
-.L884:
+	bne	.L825
+	b	.L826
+.L824:
 	cmp	r0, #1
-	bne	.L887
-	ldr	r0, .L923+4
+	bne	.L827
+	ldr	r0, .L863+4
 	mov	r2, #0
 	mov	r3, r2
-.L890:
+.L830:
 	uxth	r1, r3
 	cmp	r1, #3
-	bls	.L888
+	bls	.L828
 	tst	r3, #1
 	moveq	r1, #2
 	movne	r1, #3
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L888:
+.L828:
 	add	r3, r3, #1
 	strh	r1, [r2, r0]	@ movhi
 	cmp	r3, #256
 	add	r2, r2, #2
-	bne	.L890
-	b	.L886
-.L887:
+	bne	.L830
+	b	.L826
+.L827:
 	cmp	r0, #2
-	bne	.L891
+	bne	.L831
 	mov	r3, #0
-	ldr	r0, .L923
+	ldr	r0, .L863
 	movw	r2, #65535
 	mov	r1, r3
-	b	.L922
-.L894:
+	b	.L862
+.L834:
 	cmp	r3, #1
 	movls	r1, r3
 	movhi	r1, r2
-.L922:
+.L862:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r3, r3
 	uxth	r2, r2
 	cmp	r3, #256
-	bne	.L894
-	b	.L886
-.L891:
+	bne	.L834
+	b	.L826
+.L831:
 	cmp	r0, #3
-	bne	.L895
-	ldr	r0, .L923+4
+	bne	.L835
+	ldr	r0, .L863+4
 	mov	r2, #0
 	mov	r3, r2
-.L898:
+.L838:
 	uxth	r1, r3
 	cmp	r1, #5
-	bls	.L896
+	bls	.L836
 	tst	r3, #1
 	moveq	r1, #4
 	movne	r1, #5
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L896:
+.L836:
 	add	r3, r3, #1
 	strh	r1, [r2, r0]	@ movhi
 	cmp	r3, #256
 	add	r2, r2, #2
-	bne	.L898
-	b	.L886
-.L895:
+	bne	.L838
+	b	.L826
+.L835:
 	cmp	r0, #4
 	mov	r2, #0
-	bne	.L899
-	ldr	r3, .L923+8
-	movw	r1, #2228
+	bne	.L839
+	ldr	r3, .L863+8
+	movw	r1, #3076
 	strh	r2, [r3, r1]	@ movhi
-	movw	r2, #2230
+	movw	r2, #3078
 	mov	r1, #1
 	strh	r1, [r3, r2]	@ movhi
 	mov	r1, #2
@@ -7710,9 +7322,9 @@ BuildFlashLsbPageTable:
 	mov	r1, #5
 	strh	r0, [r3, r2]	@ movhi
 	add	r2, r2, #2
-	ldr	r0, .L923+12
+	ldr	r0, .L863+12
 	strh	r1, [r3, r2]	@ movhi
-	mov	r2, #2240
+	mov	r2, #3088
 	mov	r1, #7
 	strh	r1, [r3, r2]	@ movhi
 	add	r2, r2, #2
@@ -7720,7 +7332,7 @@ BuildFlashLsbPageTable:
 	strh	r1, [r3, r2]	@ movhi
 	mov	r2, #16
 	mov	r3, r1
-.L901:
+.L841:
 	tst	r3, #1
 	add	r3, r3, #1
 	moveq	r1, #6
@@ -7730,78 +7342,78 @@ BuildFlashLsbPageTable:
 	add	r2, r2, #2
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r2, r2
-	bne	.L901
-	b	.L886
-.L899:
+	bne	.L841
+	b	.L826
+.L839:
 	cmp	r0, #5
-	bne	.L902
-	ldr	r1, .L923
+	bne	.L842
+	ldr	r1, .L863
 	mov	r3, r2
-.L903:
+.L843:
 	strh	r3, [r1, #2]!	@ movhi
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmp	r3, #16
-	bne	.L903
-	ldr	r2, .L923+16
-.L904:
+	bne	.L843
+	ldr	r2, .L863+16
+.L844:
 	strh	r3, [r2, #2]!	@ movhi
 	add	r3, r3, #2
 	uxth	r3, r3
 	cmp	r3, #496
-	bne	.L904
-	b	.L886
-.L902:
+	bne	.L844
+	b	.L826
+.L842:
 	cmp	r0, #6
-	bne	.L886
-	ldr	r0, .L923
+	bne	.L826
+	ldr	r0, .L863
 	mov	r3, r2
-.L907:
+.L847:
 	uxth	r1, r3
 	cmp	r1, #5
-	bls	.L905
+	bls	.L845
 	tst	r3, #1
 	moveq	r1, #10
 	movne	r1, #12
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L905:
+.L845:
 	add	r3, r3, #1
 	add	r2, r2, #3
 	cmp	r3, #256
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r2, r2
-	bne	.L907
-.L886:
+	bne	.L847
+.L826:
 	mov	r2, #1024
-	ldr	r0, .L923+20
+	ldr	r0, .L863+20
 	mov	r1, #255
 	uxth	r4, r4
 	bl	ftl_memset
-	ldr	r2, .L923
+	ldr	r2, .L863
 	mov	r3, #0
-	ldr	r0, .L923+24
-	b	.L908
-.L909:
+	ldr	r0, .L863+24
+	b	.L848
+.L849:
 	ldrh	r1, [r2, #2]!
 	add	r3, r3, #1
 	uxth	r3, r3
 	add	ip, r0, r1, asl #1
-	sub	ip, ip, #912
+	sub	ip, ip, #916
 	strh	r1, [ip, #0]	@ movhi
-.L908:
+.L848:
 	cmp	r3, r4
-	bcc	.L909
+	bcc	.L849
 	ldmfd	sp!, {r4, pc}
-.L924:
+.L864:
 	.align	2
-.L923:
-	.word	.LANCHOR0+2226
-	.word	.LANCHOR0+2228
+.L863:
+	.word	.LANCHOR0+3074
+	.word	.LANCHOR0+3076
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2242
-	.word	.LANCHOR0+2258
-	.word	.LANCHOR2-912
+	.word	.LANCHOR0+3090
+	.word	.LANCHOR0+3106
+	.word	.LANCHOR2-916
 	.word	.LANCHOR2
 	.fnend
 	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
@@ -7837,19 +7449,19 @@ FlashSramLoadStore:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	cmp	r2, #0
-	ldr	r4, .L930
+	ldr	r4, .L870
 	mov	ip, r0
 	mov	r2, r3
-	ldr	r4, [r4, #112]
+	ldr	r4, [r4, #108]
 	add	r4, r4, #4096
 	add	r1, r4, r1
 	movne	r0, r1
 	movne	r1, ip
 	ldmfd	sp!, {r4, lr}
 	b	memcpy
-.L931:
+.L871:
 	.align	2
-.L930:
+.L870:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashSramLoadStore, .-FlashSramLoadStore
@@ -7905,12 +7517,12 @@ rk_ftl_get_capacity:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L937
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L877
+	ldr	r0, [r3, #3948]
 	bx	lr
-.L938:
+.L878:
 	.align	2
-.L937:
+.L877:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
@@ -7929,46 +7541,46 @@ rknand_print_hex:
 	mov	r5, r2
 	mov	sl, r3
 	mov	r7, r8
-	b	.L940
-.L946:
+	b	.L880
+.L886:
 	cmp	r8, #0
-	bne	.L941
-	ldr	r0, .L948
+	bne	.L881
+	ldr	r0, .L888
 	mov	r1, r6
 	mov	r2, r7
 	bl	printk
-.L941:
+.L881:
 	cmp	r5, #4
-	ldreq	r0, .L948+4
+	ldreq	r0, .L888+4
 	ldreq	r1, [r4, r7, asl #2]
-	beq	.L947
+	beq	.L887
 	cmp	r5, #2
 	moveq	r3, r7, asl #1
-	ldreq	r0, .L948+4
+	ldreq	r0, .L888+4
 	ldreqsh	r1, [r4, r3]
-	ldrne	r0, .L948+4
+	ldrne	r0, .L888+4
 	ldrneb	r1, [r4, r7]	@ zero_extendqisi2
-.L947:
+.L887:
 	add	r8, r8, #1
 	bl	printk
 	cmp	r8, #15
-	bls	.L945
-	ldr	r0, .L948+8
+	bls	.L885
+	ldr	r0, .L888+8
 	mov	r8, #0
-	ldr	r1, .L948+12
+	ldr	r1, .L888+12
 	bl	printk
-.L945:
+.L885:
 	add	r7, r7, #1
-.L940:
+.L880:
 	cmp	r7, sl
-	bne	.L946
-	ldr	r0, .L948+8
-	ldr	r1, .L948+12
+	bne	.L886
+	ldr	r0, .L888+8
+	ldr	r1, .L888+12
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	b	printk
-.L949:
+.L889:
 	.align	2
-.L948:
+.L888:
 	.word	.LC81
 	.word	.LC82
 	.word	.LC74
@@ -7984,15 +7596,15 @@ NandcXferComp:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 	.save {r0, r1, r4, r5, r6, lr}
-	ldr	r6, .L973
+	ldr	r6, .L913
 	add	r0, r6, r0, asl #3
-	ldr	r3, [r6, #12]
-	ldr	r4, [r0, #16]
+	ldr	r3, [r6, #3780]
+	ldr	r4, [r0, #864]
 	cmp	r3, #3
-	bls	.L967
+	bls	.L907
 	ldr	r3, [r4, #16]
 	tst	r3, #4
-	beq	.L967
+	beq	.L907
 	mov	r0, r4
 	bl	wait_for_nandc_xfer_completed
 	ldr	r5, [r4, #16]
@@ -8000,130 +7612,130 @@ NandcXferComp:
 	ands	r5, r5, #2
 	str	r3, [sp, #0]
 	movne	r5, #0
-	bne	.L971
-	b	.L972
-.L957:
-	ldr	r3, [r6, #12]
+	bne	.L911
+	b	.L912
+.L897:
+	ldr	r3, [r6, #3780]
 	cmp	r3, #5
-	bls	.L954
+	bls	.L894
 	ldr	r3, [r4, #0]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #8192
-	beq	.L954
+	beq	.L894
 	ldr	r3, [sp, #4]
 	tst	r3, #131072
-	bne	.L955
-.L954:
+	bne	.L895
+.L894:
 	add	r5, r5, #1
 	bic	r3, r5, #-16777216
 	cmp	r3, #0
-	bne	.L971
+	bne	.L911
 	ldr	r2, [r4, #28]
 	mov	r1, r5
 	ldr	r3, [sp, #0]
 	ubfx	r2, r2, #16, #5
-	ldr	r0, .L973+4
+	ldr	r0, .L913+4
 	ubfx	r3, r3, #22, #6
 	bl	printk
-	ldr	r0, .L973+8
+	ldr	r0, .L913+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L971:
+.L911:
 	ldr	r2, [r4, #28]
 	ldr	r3, [sp, #0]
 	ubfx	r2, r2, #16, #5
 	ubfx	r3, r3, #22, #6
 	cmp	r2, r3
-	blt	.L957
-.L955:
-	ldr	r4, .L973
-	ldr	r3, [r4, #3820]
+	blt	.L897
+.L895:
+	ldr	r4, .L913
+	ldr	r3, [r4, #3816]
 	cmp	r3, #0
-	beq	.L958
+	beq	.L898
 	ldr	r1, [sp, #0]
 	mov	r2, #0
-	ldr	r0, [r4, #3812]
+	ldr	r0, [r4, #3808]
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #10
 	bl	rknand_dma_unmap_single
 	ldr	r1, [sp, #0]
-	ldr	r0, [r4, #3816]
+	ldr	r0, [r4, #3812]
 	mov	r2, #0
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-	b	.L958
-.L961:
+	b	.L898
+.L901:
 	ldr	r3, [r4, #8]
 	add	r5, r5, #1
 	str	r3, [sp, #0]
 	bic	r3, r5, #-16777216
 	cmp	r3, #0
-	bne	.L972
+	bne	.L912
 	ldr	r2, [sp, #0]
 	mov	r1, r5
 	ldr	r3, [r4, #28]
-	ldr	r0, .L973+12
+	ldr	r0, .L913+12
 	ubfx	r3, r3, #16, #5
 	bl	printk
-	ldr	r0, .L973+8
+	ldr	r0, .L913+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L972:
+.L912:
 	ldr	r3, [sp, #0]
 	tst	r3, #1048576
-	beq	.L961
-	ldr	r6, .L973
-	ldr	r3, [r6, #3828]
+	beq	.L901
+	ldr	r6, .L913
+	ldr	r3, [r6, #3824]
 	cmp	r3, #0
-	beq	.L962
+	beq	.L902
 	mov	r0, r4
 	bl	NandcSendDumpDataStart
-.L962:
-	ldr	r3, [r6, #3820]
-	ldr	r5, .L973
+.L902:
+	ldr	r3, [r6, #3816]
+	ldr	r5, .L913
 	cmp	r3, #0
-	beq	.L963
+	beq	.L903
 	ldr	r1, [sp, #0]
 	mov	r2, #1
-	ldr	r0, [r5, #3812]
+	ldr	r0, [r5, #3808]
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #10
 	bl	rknand_dma_unmap_single
 	ldr	r1, [sp, #0]
-	ldr	r0, [r5, #3816]
+	ldr	r0, [r5, #3812]
 	mov	r2, #1
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-.L963:
-	ldr	r3, .L973
-	ldr	r3, [r3, #3828]
+.L903:
+	ldr	r3, .L913
+	ldr	r3, [r3, #3824]
 	cmp	r3, #0
-	beq	.L958
+	beq	.L898
 	mov	r0, r4
 	bl	NandcSendDumpDataDone
-.L958:
-	ldr	r3, .L973
+.L898:
+	ldr	r3, .L913
 	mov	r2, #0
-	str	r2, [r3, #3820]
-	b	.L950
-.L967:
+	str	r2, [r3, #3816]
+	b	.L890
+.L907:
 	ldr	r3, [r4, #8]
 	str	r3, [sp, #0]
 	ldr	r3, [sp, #0]
 	tst	r3, #1048576
-	beq	.L967
-.L950:
+	beq	.L907
+.L890:
 	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
-.L974:
+.L914:
 	.align	2
-.L973:
+.L913:
 	.word	.LANCHOR0
 	.word	.LC84
 	.word	.LC85
@@ -8141,7 +7753,7 @@ NandcXferData:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, r3
 	mov	r9, r3
-	ldr	r3, .L1013
+	ldr	r3, .L953
 	.pad #92
 	sub	sp, sp, #92
 	tst	r4, #63
@@ -8150,16 +7762,16 @@ NandcXferData:
 	mov	fp, r1
 	mov	sl, r2
 	ldr	r5, [sp, #128]
-	ldr	r6, [r3, #16]
-	bne	.L976
+	ldr	r6, [r3, #864]
+	bne	.L916
 	cmp	r5, #0
-	bne	.L977
+	bne	.L917
 	add	r0, sp, #24
 	mov	r1, #255
 	mov	r2, #64
 	add	r5, sp, #24
 	bl	ftl_memset
-.L977:
+.L917:
 	mov	r0, r7
 	mov	r1, fp
 	mov	r2, sl
@@ -8170,19 +7782,19 @@ NandcXferData:
 	bl	NandcXferComp
 	cmp	fp, #0
 	movne	r4, #0
-	bne	.L978
-	ldr	r1, .L1013
+	bne	.L918
+	ldr	r1, .L953
 	mov	r0, sl, lsr #1
 	mov	r3, fp
 	mov	r2, fp
-	ldr	ip, [r1, #3832]
+	ldr	ip, [r1, #3828]
 	mov	r4, r1
 	cmp	ip, #24
 	movhi	ip, #128
 	movls	ip, #64
-	b	.L980
-.L981:
-	ldr	r1, [r4, #3800]
+	b	.L920
+.L921:
+	ldr	r1, [r4, #3796]
 	mov	r3, r3, lsr #2
 	add	r2, r2, #1
 	ldr	r3, [r1, r3, asl #2]
@@ -8195,29 +7807,29 @@ NandcXferData:
 	strb	r3, [r5, #3]
 	add	r5, r5, #4
 	mov	r3, r7
-.L980:
+.L920:
 	cmp	r2, r0
 	add	r7, r3, ip
-	ldr	r1, .L1013
-	bcc	.L981
+	ldr	r1, .L953
+	bcc	.L921
 	mov	r3, #0
-	ldr	r0, [r1, #3832]
+	ldr	r0, [r1, #3828]
 	mov	sl, sl, lsr #2
-	ldr	r1, [r1, #12]
+	ldr	r1, [r1, #3780]
 	mov	r4, r3
-	b	.L982
-.L988:
+	b	.L922
+.L928:
 	add	r2, r3, #8
 	ldr	r2, [r6, r2, asl #2]
 	str	r2, [sp, #20]
 	ldr	r2, [sp, #20]
 	tst	r2, #4
-	bne	.L1003
+	bne	.L943
 	ldr	r2, [sp, #20]
 	ands	r2, r2, #32768
-	bne	.L1003
+	bne	.L943
 	cmp	r1, #5
-	bls	.L984
+	bls	.L924
 	ldr	r7, [sp, #20]
 	ldr	ip, [sp, #20]
 	ldr	r5, [sp, #20]
@@ -8236,10 +7848,10 @@ NandcXferData:
 	ubfxls	ip, ip, #16, #5
 	ubfxhi	r2, r2, #27, #1
 	ubfxls	r2, r2, #29, #1
-	b	.L1011
-.L984:
+	b	.L951
+.L924:
 	cmp	r1, #3
-	bls	.L986
+	bls	.L926
 	ldr	r7, [sp, #20]
 	ldr	ip, [sp, #20]
 	ldr	r5, [sp, #20]
@@ -8258,31 +7870,31 @@ NandcXferData:
 	ubfxls	ip, ip, #16, #5
 	ubfxhi	r2, r2, #28, #1
 	ubfxls	r2, r2, #30, #1
-.L1011:
+.L951:
 	orr	r2, ip, r2, asl #5
-.L986:
+.L926:
 	cmp	r4, r2
 	movcc	r4, r2
-	b	.L983
-.L1003:
+	b	.L923
+.L943:
 	mvn	r4, #0
-.L983:
+.L923:
 	add	r3, r3, #1
-.L982:
+.L922:
 	cmp	r3, sl
-	bcs	.L978
+	bcs	.L918
 	cmp	r0, #0
-	bne	.L988
-.L978:
+	bne	.L928
+.L918:
 	mov	r3, #0
 	str	r3, [r6, #16]
-	b	.L989
-.L976:
+	b	.L929
+.L916:
 	cmp	r1, #1
 	mov	r8, #0
-	bne	.L1009
-	b	.L990
-.L993:
+	bne	.L949
+	b	.L930
+.L933:
 	cmp	r5, #0
 	and	r4, r8, #3
 	mov	r0, r6
@@ -8306,12 +7918,12 @@ NandcXferData:
 	mov	r0, r7
 	bl	NandcXferComp
 	add	r9, r9, #1024
-.L990:
+.L930:
 	cmp	r8, sl
-	bcc	.L993
+	bcc	.L933
 	mov	r4, #0
-	b	.L989
-.L1009:
+	b	.L929
+.L949:
 	mov	r1, r8
 	mov	r2, #2
 	mov	r3, r8
@@ -8323,15 +7935,15 @@ NandcXferData:
 	mov	ip, r8
 	mov	fp, r6
 	mov	r6, r5
-	b	.L1012
-.L998:
+	b	.L952
+.L938:
 	mov	r0, r7
 	bl	NandcXferComp
 	ldr	r3, [fp, #32]
 	add	ip, r5, #2
 	cmp	ip, sl
 	str	r3, [sp, #20]
-	bcs	.L995
+	bcs	.L935
 	mov	r3, #0
 	mov	r0, r7
 	str	r3, [sp, #0]
@@ -8342,11 +7954,11 @@ NandcXferData:
 	str	ip, [sp, #8]
 	bl	NandcXferStart
 	ldr	ip, [sp, #8]
-.L995:
+.L935:
 	ldr	r3, [sp, #20]
 	tst	r3, #4
 	mvnne	r4, #0
-	bne	.L996
+	bne	.L936
 	ldr	r2, [sp, #20]
 	ldr	r3, [sp, #20]
 	ubfx	r2, r2, #3, #5
@@ -8354,7 +7966,7 @@ NandcXferData:
 	orr	r3, r2, r3, asl #5
 	cmp	r4, r3
 	movcc	r4, r3
-.L996:
+.L936:
 	cmp	r6, #0
 	and	r2, r8, #3
 	mov	r0, fp
@@ -8369,34 +7981,34 @@ NandcXferData:
 	str	r5, [sp, #0]
 	bl	NandcCopy1KB
 	ldr	ip, [sp, #8]
-.L1012:
+.L952:
 	cmp	ip, sl
 	mov	r5, ip
-	bcc	.L998
+	bcc	.L938
 	mov	r6, fp
 	ldr	fp, [sp, #12]
-.L989:
-	ldr	r3, .L1013
+.L929:
+	ldr	r3, .L953
 	rsbs	fp, fp, #1
 	movcc	fp, #0
-	ldr	r3, [r3, #12]
+	ldr	r3, [r3, #3780]
 	cmp	r3, #5
 	movls	fp, #0
 	cmp	fp, #0
-	beq	.L999
+	beq	.L939
 	ldr	r3, [r6, #0]
 	and	r2, r3, #139264
 	cmp	r2, #139264
 	orreq	r3, r3, #131072
 	streq	r3, [r6, #0]
 	mvneq	r4, #0
-.L999:
+.L939:
 	mov	r0, r4
 	add	sp, sp, #92
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1014:
+.L954:
 	.align	2
-.L1013:
+.L953:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferData, .-NandcXferData
@@ -8410,23 +8022,23 @@ FlashProgPage:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r8, r3
-	ldr	r3, .L1018
+	ldr	r3, .L958
 	subs	r4, r0, #0
 	mov	r5, r1
 	mov	r6, r2
-	ldrb	r7, [r3, #2697]	@ zero_extendqisi2
-	bne	.L1016
-	ldr	r3, .L1018+4
-	ldrb	r2, [r3, #1]	@ zero_extendqisi2
-	ldr	r1, [r3, #4]
+	ldrb	r7, [r3, #2837]	@ zero_extendqisi2
+	bne	.L956
+	ldr	r3, .L958+4
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r1, [r3, #856]
 	mul	r2, r1, r2
 	cmp	r5, r2
-	bcs	.L1016
-	ldrb	r3, [r3, #0]	@ zero_extendqisi2
+	bcs	.L956
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
 	cmp	r3, #0
 	subeq	r7, r7, #2
 	movne	r7, #4
-.L1016:
+.L956:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8453,9 +8065,9 @@ FlashProgPage:
 	bl	NandcFlashDeCs
 	and	r0, r5, #1
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1019:
+.L959:
 	.align	2
-.L1018:
+.L958:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8465,154 +8077,66 @@ FlashProgPage:
 	.type	FlashPageProgMsbFFData, %function
 FlashPageProgMsbFFData:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r8, r2
-	ldr	r2, .L1031
-	.pad #28
-	sub	sp, sp, #28
-	mov	r6, r0
-	str	r1, [sp, #12]
-	ldrb	r1, [r2, #80]	@ zero_extendqisi2
-	ldr	r3, [r2, #2776]
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r4, r2
+	ldr	r2, .L967
+	mov	r7, r1
+	mov	r8, r0
+	ldrb	r1, [r2, #928]	@ zero_extendqisi2
+	ldr	r3, [r2, #3624]
 	cmp	r1, #0
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
-	beq	.L1021
-	ldr	r1, [r2, #3788]
-	ldr	r2, .L1031+4
+	beq	.L961
+	ldr	r1, [r2, #3784]
+	ldr	r2, .L967+4
 	cmp	r1, r2
-	beq	.L1020
-.L1021:
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L961:
 	sub	r2, r3, #5
 	uxtb	r2, r2
 	cmp	r3, #68
-	cmpne	r2, #1
-	bls	.L1024
+	cmpne	r2, #2
+	bls	.L964
 	cmp	r3, #35
-	cmpne	r3, #17
-	beq	.L1024
-	cmp	r3, #18
 	cmpne	r3, #19
-	beq	.L1024
-	b	.L1020
-.L1029:
-	add	r3, sl, r8, asl #1
-	sub	r3, r3, #912
-	ldrh	r2, [r3, #0]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L1020
+	beq	.L964
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L965:
+	add	r3, r5, r4, asl #1
+	sub	r3, r3, #916
+	ldrh	r3, [r3, #0]
+	cmp	r3, sl
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
 	mov	r1, #255
-	ldr	r0, [sl, #116]
 	mov	r2, #32768
+	ldr	r0, [r5, #112]
 	bl	ftl_memset
-	ldr	r1, [sp, #20]
-	cmp	r1, #1
-	bhi	.L1025
-	ldr	r3, .L1031+8
-	ldr	r2, [r3, #2964]
-	cmp	r2, #0
-	beq	.L1026
-	ldr	r1, [sp, #16]
-	mov	r0, r6
-	mov	fp, #0
-	ldrb	r4, [r1, #20]	@ zero_extendqisi2
-	ldr	r5, [r1, #16]
-	add	r4, r4, #8
-	str	r2, [sp, #8]
-	str	r3, [sp, #4]
-	bl	NandcFlashCs
-	add	r7, r5, r4, asl #8
-	mov	r1, #239
-	mov	r0, r6
-	str	r1, [r7, #8]
-	mov	r1, #146
-	str	r1, [r7, #4]
-	str	fp, [r5, r4, asl #8]
-	str	fp, [r5, r4, asl #8]
-	str	fp, [r5, r4, asl #8]
-	str	fp, [r5, r4, asl #8]
-	bl	NandcFlashDeCs
-	ldr	r2, [sp, #8]
-	cmp	r2, #1
-	bne	.L1027
-	mov	r0, r6
-	bl	NandcFlashCs
-	mov	r2, #238
-	mov	r0, #2000
-	str	r2, [r7, #8]
-	mov	r2, #146
-	str	r2, [r7, #4]
-	bl	NandcDelayns
-	ldr	r2, [r5, r4, asl #8]
-	mov	r0, r6
-	str	r2, [sp, #8]
-	bl	NandcFlashDeCs
-	ldr	r2, [sp, #8]
-	ldr	r3, [sp, #4]
-	tst	r2, #255
-	moveq	r2, #2
-	streq	r2, [r3, #2964]
-.L1028:
-	strne	fp, [r3, #2964]
-	bne	.L1020
-.L1027:
-	ldr	r3, [sp, #12]
-	mov	r0, r6
-	ldr	r2, [sl, #116]
-	add	r1, r8, r3
-	mov	r3, #0
-	bl	FlashProgPage
-	mov	r0, r6
-	bl	NandcFlashCs
-	mov	r3, #239
-	mov	r0, r6
-	str	r3, [r7, #8]
-	mov	r3, #146
-	str	r3, [r7, #4]
-	mov	r3, #1
-	str	r3, [r5, r4, asl #8]
-	mov	r3, #0
-	str	r3, [r5, r4, asl #8]
-	str	r3, [r5, r4, asl #8]
-	str	r3, [r5, r4, asl #8]
-	bl	NandcFlashDeCs
-	b	.L1026
-.L1025:
-	ldr	r2, [sp, #12]
-	mov	r0, r6
+	add	r1, r4, r7
+	add	r4, r4, #1
+	mov	r0, r8
+	ldr	r2, [r5, #112]
 	mov	r3, #0
-	add	r1, r8, r2
-	ldr	r2, [sl, #116]
 	bl	FlashProgPage
-.L1026:
-	add	r8, r8, #1
-	uxth	r8, r8
-	b	.L1030
-.L1024:
-	ldr	sl, .L1031+12
-	sub	r3, r3, #17
-	ldr	r9, .L1031
-	uxtb	r3, r3
-	str	r3, [sp, #20]
-	add	r3, r9, r6, asl #3
-	str	r3, [sp, #16]
-.L1030:
-	ldr	r3, [r9, #2776]
+	uxth	r4, r4
+	b	.L966
+.L964:
+	ldr	r6, .L967
+	movw	sl, #65535
+	ldr	r5, .L967+8
+.L966:
+	ldr	r3, [r6, #3624]
 	ldrh	r3, [r3, #10]
-	cmp	r3, r8
-	bhi	.L1029
-.L1020:
-	add	sp, sp, #28
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1032:
+	cmp	r3, r4
+	bhi	.L965
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L968:
 	.align	2
-.L1031:
+.L967:
 	.word	.LANCHOR0
 	.word	1446522928
-	.word	.LANCHOR1
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
@@ -8626,19 +8150,19 @@ FlashReadRawPage:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r8, r3
-	ldr	r3, .L1036
+	ldr	r3, .L972
 	subs	r4, r0, #0
 	mov	r6, r1
 	mov	r5, r2
-	ldrb	r7, [r3, #2697]	@ zero_extendqisi2
-	bne	.L1034
-	ldr	r3, .L1036+4
-	ldrb	r2, [r3, #1]	@ zero_extendqisi2
-	ldr	r3, [r3, #4]
+	ldrb	r7, [r3, #2837]	@ zero_extendqisi2
+	bne	.L970
+	ldr	r3, .L972+4
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r3, [r3, #856]
 	mul	r3, r3, r2
 	cmp	r1, r3
 	movcc	r7, #4
-.L1034:
+.L970:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8659,9 +8183,9 @@ FlashReadRawPage:
 	bl	NandcFlashDeCs
 	mov	r0, r5
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1037:
+.L973:
 	.align	2
-.L1036:
+.L972:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8676,28 +8200,33 @@ HynixReadRetrial:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r7, r3
-	ldr	fp, .L1049
+	ldr	r3, .L988
+	mov	sl, r2
+	ldr	fp, .L988
 	mov	r6, r0
+	add	r2, r3, r0
 	str	r1, [sp, #4]
-	mov	sl, r2
-	add	r3, fp, r0
+	ldrb	r9, [r3, #2]	@ zero_extendqisi2
 	mov	r8, #0
-	ldrb	r9, [fp, #2910]	@ zero_extendqisi2
-	mvn	r4, #0
-	ldrb	r5, [r3, #2920]	@ zero_extendqisi2
+	ldr	r3, [r3, #3624]
+	mvn	r5, #0
+	ldrb	r4, [r2, #12]	@ zero_extendqisi2
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #7
+	ldreqb	r4, [r2, #20]	@ zero_extendqisi2
 	bl	NandcWaitFlashReady
 	mov	ip, fp
-	b	.L1039
-.L1044:
-	add	r5, r5, #1
-	ldrb	r1, [fp, #2909]	@ zero_extendqisi2
+	b	.L976
+.L981:
+	add	r4, r4, #1
+	ldrb	r1, [fp, #1]	@ zero_extendqisi2
 	mov	r0, r6
-	ldr	r2, .L1049+4
-	uxtb	r5, r5
+	ldr	r2, .L988+4
+	uxtb	r4, r4
 	str	ip, [sp, #0]
-	cmp	r5, r9
-	movcs	r5, #0
-	mov	r3, r5
+	cmp	r4, r9
+	movcs	r4, #0
+	mov	r3, r4
 	bl	HynixSetRRPara
 	mov	r0, r6
 	ldr	r1, [sp, #4]
@@ -8706,43 +8235,47 @@ HynixReadRetrial:
 	bl	FlashReadRawPage
 	ldr	ip, [sp, #0]
 	cmn	r0, #1
-	beq	.L1041
-	ldrb	r3, [ip, #3836]	@ zero_extendqisi2
-	cmn	r4, #1
-	moveq	r4, r0
+	beq	.L978
+	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
+	cmn	r5, #1
+	moveq	r5, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, lsr #2
-	bcc	.L1048
+	bcc	.L987
 	mov	r7, #0
 	mov	sl, r7
-.L1041:
+.L978:
 	add	r8, r8, #1
-.L1039:
+.L976:
 	cmp	r8, r9
-	bcc	.L1044
-	b	.L1043
-.L1048:
-	mov	r4, r0
-.L1043:
-	ldr	r3, .L1049
-	adds	r0, r4, #1
+	bcc	.L981
+	b	.L980
+.L987:
+	mov	r5, r0
+.L980:
+	ldr	r3, .L988
 	add	r6, r3, r6
-	movne	r0, #1
-	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
-	strb	r5, [r6, #2920]
+	ldr	r2, [r3, #3624]
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	ldrb	r2, [r2, #19]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
-	cmp	r4, r3, lsr #2
+	cmp	r2, #7
+	streqb	r4, [r6, #20]
+	strneb	r4, [r6, #12]
+	adds	r0, r5, #1
+	movne	r0, #1
+	cmp	r5, r3, lsr #2
 	movcc	r0, #0
 	andcs	r0, r0, #1
 	cmp	r0, #0
-	moveq	r0, r4
+	moveq	r0, r5
 	movne	r0, #256
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1050:
+.L989:
 	.align	2
-.L1049:
+.L988:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2912
+	.word	.LANCHOR0+4
 	.fnend
 	.size	HynixReadRetrial, .-HynixReadRetrial
 	.align	2
@@ -8754,95 +8287,107 @@ MicronReadRetrial:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.pad #20
-	sub	sp, sp, #20
-	mov	fp, r2
-	mov	r9, r3
-	str	r1, [sp, #12]
-	mov	sl, #0
-	str	r0, [sp, #8]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L1003
+	mov	sl, r3
+	str	r2, [sp, #20]
+	mov	r9, r0
+	str	r1, [sp, #16]
+	mov	r8, #0
+	ldrb	r3, [r4, #3832]	@ zero_extendqisi2
+	mov	fp, r8
+	ldrb	r2, [r4, #928]	@ zero_extendqisi2
+	add	r4, r4, r9, asl #3
+	cmp	r2, #0
+	addeq	r3, r3, r3, asl #1
+	movne	r3, r3, lsr #2
+	ubfxeq	r3, r3, #2, #8
+	str	r3, [sp, #12]
 	bl	NandcWaitFlashReady
-	ldr	r1, [sp, #8]
-	mvn	r5, #0
-	ldr	r3, .L1063
-	ldr	ip, .L1063+4
-	add	r2, r3, r1, asl #3
-	ldrb	r7, [r2, #20]	@ zero_extendqisi2
-	ldr	r6, [r2, #16]
+	ldrb	r7, [r4, #868]	@ zero_extendqisi2
+	ldr	r6, [r4, #864]
+	mvn	r4, #0
 	add	r7, r7, #8
-	mov	r8, r6
-	add	r4, r6, r7, asl #8
-	b	.L1062
-.L1056:
-	mov	r2, #239
-	mov	r3, #137
-	str	r2, [r4, #8]
-	mov	r0, #200
-	str	r3, [r4, #4]
-	mov	r6, #0
-	str	ip, [sp, #4]
-	add	sl, sl, #1
-	bl	NandcDelayns
-	str	sl, [r4, #0]
-	ldr	r0, [sp, #8]
-	mov	r2, fp
-	str	r6, [r4, #0]
-	mov	r3, r9
-	str	r6, [r4, #0]
-	ldr	r1, [sp, #12]
-	str	r6, [r4, #0]
-	bl	FlashReadRawPage
-	ldr	ip, [sp, #4]
-	cmn	r0, #1
-	beq	.L1062
-	ldr	r1, .L1063
-	cmn	r5, #1
-	moveq	r5, r0
-	ldrb	r3, [r1, #3836]	@ zero_extendqisi2
-	add	r3, r3, r3, asl #1
-	cmp	r0, r3, lsr #2
-	bcc	.L1059
-	mov	r9, r6
-	mov	fp, r6
-.L1062:
-	ldrb	r3, [ip, #120]	@ zero_extendqisi2
-	cmp	sl, r3
-	bcc	.L1056
-	mov	r6, r8
-	b	.L1055
-.L1059:
-	mov	r6, r8
-	mov	r5, r0
-.L1055:
+	add	r5, r6, r7, asl #8
+	b	.L993
+.L997:
 	mov	r3, #239
 	mov	r0, #200
-	str	r3, [r4, #8]
+	str	r3, [r5, #8]
 	mov	r3, #137
-	str	r3, [r4, #4]
+	str	r3, [r5, #4]
 	bl	NandcDelayns
+	add	ip, r8, #1
+	mov	r0, r9
+	str	ip, [r5, #0]
+	ldr	r1, [sp, #16]
+	mov	r3, sl
+	str	fp, [r5, #0]
+	ldr	r2, [sp, #20]
+	str	fp, [r5, #0]
+	str	fp, [r5, #0]
+	str	ip, [sp, #8]
+	bl	FlashReadRawPage
+	ldr	ip, [sp, #8]
+	cmn	r0, #1
+	beq	.L994
+	cmn	r4, #1
+	ldr	r2, [sp, #12]
+	moveq	r4, r0
+	cmp	r0, r2
+	bcc	.L1001
+	mov	sl, #0
+	str	sl, [sp, #20]
+.L994:
+	mov	r8, ip
+.L993:
+	ldr	r2, .L1003+4
+	ldrb	r3, [r2, #116]	@ zero_extendqisi2
+	cmp	r8, r3
+	bcc	.L997
+	b	.L996
+.L1001:
+	mov	r4, r0
+.L996:
+	mov	r3, #239
+	mov	r0, #200
+	str	r3, [r5, #8]
+	mov	r3, #137
+	str	r3, [r5, #4]
+	bl	NandcDelayns
+	ldr	r2, [sp, #12]
 	mov	r3, #0
 	str	r3, [r6, r7, asl #8]
-	adds	r0, r5, #1
+	cmp	r4, r2
 	str	r3, [r6, r7, asl #8]
 	str	r3, [r6, r7, asl #8]
-	movne	r0, #1
 	str	r3, [r6, r7, asl #8]
-	ldr	r3, .L1063
-	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
-	add	r3, r3, r3, asl #1
-	cmp	r5, r3, lsr #2
-	movcc	r0, #0
-	andcs	r0, r0, #1
-	cmp	r0, #0
-	moveq	r0, r5
-	movne	r0, #256
-	add	sp, sp, #20
+	movcc	r3, #0
+	movcs	r3, #1
+	cmn	r4, #1
+	moveq	r3, #0
+	cmp	r3, #0
+	movne	r4, #256
+	cmn	r4, #1
+	cmpne	r4, #256
+	bne	.L999
+	ldr	r0, .L1003+8
+	mov	r1, r8
+	ldr	r2, [sp, #16]
+	mov	r3, r8
+	str	r4, [sp, #0]
+	bl	printk
+.L999:
+	mov	r0, r4
+	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1064:
+.L1004:
 	.align	2
-.L1063:
+.L1003:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
+	.word	.LC87
 	.fnend
 	.size	MicronReadRetrial, .-MicronReadRetrial
 	.align	2
@@ -8859,17 +8404,17 @@ SamsungReadRetrial:
 	mov	r6, r3
 	mov	r9, r1
 	bl	NandcWaitFlashReady
-	ldr	ip, .L1074
+	ldr	ip, .L1014
 	mov	r5, #1
 	mvn	r4, #0
-	ldr	fp, .L1074+4
+	ldr	fp, .L1014+4
 	add	r3, ip, r8, asl #3
-	ldrb	sl, [r3, #20]	@ zero_extendqisi2
-	ldr	r2, [r3, #16]
+	ldrb	sl, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
 	add	sl, sl, #8
 	add	sl, r2, sl, asl #8
-	b	.L1066
-.L1070:
+	b	.L1006
+.L1010:
 	mov	r0, sl
 	uxtb	r1, r5
 	str	ip, [sp, #4]
@@ -8881,32 +8426,32 @@ SamsungReadRetrial:
 	bl	FlashReadRawPage
 	ldr	ip, [sp, #4]
 	cmn	r0, #1
-	beq	.L1067
-	ldrb	r3, [ip, #3836]	@ zero_extendqisi2
+	beq	.L1007
+	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
 	cmn	r4, #1
 	moveq	r4, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, lsr #2
-	bcc	.L1073
+	bcc	.L1013
 	mov	r6, #0
 	mov	r7, r6
-.L1067:
+.L1007:
 	add	r5, r5, #1
-.L1066:
-	ldrb	r3, [fp, #120]	@ zero_extendqisi2
+.L1006:
+	ldrb	r3, [fp, #116]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r5, r3
-	bcc	.L1070
-	b	.L1069
-.L1073:
+	bcc	.L1010
+	b	.L1009
+.L1013:
 	mov	r4, r0
-.L1069:
+.L1009:
 	mov	r0, sl
 	mov	r1, #0
 	bl	SamsungSetRRPara
-	ldr	r3, .L1074
+	ldr	r3, .L1014
 	adds	r0, r4, #1
-	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
 	movne	r0, #1
 	add	r3, r3, r3, asl #1
 	cmp	r4, r3, lsr #2
@@ -8916,9 +8461,9 @@ SamsungReadRetrial:
 	moveq	r0, r4
 	movne	r0, #256
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1075:
+.L1015:
 	.align	2
-.L1074:
+.L1014:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -8937,64 +8482,64 @@ ToshibaReadRetrial:
 	mov	r9, r2
 	mov	r7, r3
 	bl	NandcWaitFlashReady
-	ldr	r3, .L1097
+	ldr	r3, .L1037
 	add	r2, r3, r8, asl #3
-	ldr	r1, [r2, #16]
-	ldrb	r4, [r2, #20]	@ zero_extendqisi2
-	ldrb	r2, [r3, #3765]	@ zero_extendqisi2
+	ldr	r1, [r2, #864]
+	ldrb	r4, [r2, #868]	@ zero_extendqisi2
+	ldrb	r2, [r3, #3761]	@ zero_extendqisi2
 	add	r4, r4, #8
 	sub	r2, r2, #67
 	add	r4, r1, r4, asl #8
 	uxtb	r2, r2
 	cmp	r2, #1
 	movls	sl, #0
-	bls	.L1077
-	ldrb	sl, [r3, #3777]	@ zero_extendqisi2
+	bls	.L1017
+	ldrb	sl, [r3, #3773]	@ zero_extendqisi2
 	cmp	sl, #0
-	beq	.L1078
+	beq	.L1018
 	mov	r0, #0
 	mov	sl, #1
 	bl	NandcSetDdrMode
-.L1078:
+.L1018:
 	mov	r3, #92
 	str	r3, [r4, #8]
 	mov	r3, #197
 	str	r3, [r4, #8]
-.L1077:
+.L1017:
 	mov	r6, #1
 	mvn	r5, #0
-	ldr	fp, .L1097
-	b	.L1079
-.L1088:
-	ldrb	r3, [fp, #3765]	@ zero_extendqisi2
+	ldr	fp, .L1037
+	b	.L1019
+.L1028:
+	ldrb	r3, [fp, #3761]	@ zero_extendqisi2
 	mov	r0, r4
 	uxtb	r1, r6
 	sub	r3, r3, #67
 	uxtb	r3, r3
 	cmp	r3, #1
-	bhi	.L1080
+	bhi	.L1020
 	bl	SandiskSetRRPara
-	b	.L1081
-.L1080:
+	b	.L1021
+.L1020:
 	bl	ToshibaSetRRPara
-.L1081:
-	ldr	r2, .L1097
-	ldrb	r3, [r2, #3765]	@ zero_extendqisi2
+.L1021:
+	ldr	r2, .L1037
+	ldrb	r3, [r2, #3761]	@ zero_extendqisi2
 	cmp	r3, #34
-	bne	.L1082
-	ldr	r2, .L1097+4
-	ldrb	r3, [r2, #120]	@ zero_extendqisi2
+	bne	.L1022
+	ldr	r2, .L1037+4
+	ldrb	r3, [r2, #116]	@ zero_extendqisi2
 	sub	r3, r3, #3
 	cmp	r6, r3
 	moveq	r3, #179
 	streq	r3, [r4, #8]
-.L1082:
+.L1022:
 	cmp	sl, #0
 	mov	r3, #38
 	str	r3, [r4, #8]
 	mov	r3, #93
 	str	r3, [r4, #8]
-	beq	.L1083
+	beq	.L1023
 	mov	r0, #4
 	bl	NandcSetDdrMode
 	ldr	r1, [sp, #4]
@@ -9007,53 +8552,53 @@ ToshibaReadRetrial:
 	str	r3, [sp, #0]
 	bl	NandcSetDdrMode
 	ldr	r3, [sp, #0]
-	b	.L1084
-.L1083:
+	b	.L1024
+.L1023:
 	mov	r3, r7
 	mov	r0, r8
 	ldr	r1, [sp, #4]
 	mov	r2, r9
 	bl	FlashReadRawPage
 	mov	r3, r0
-.L1084:
+.L1024:
 	cmn	r3, #1
-	beq	.L1085
-	ldrb	r2, [fp, #3836]	@ zero_extendqisi2
+	beq	.L1025
+	ldrb	r2, [fp, #3832]	@ zero_extendqisi2
 	cmn	r5, #1
 	moveq	r5, r3
 	add	r2, r2, r2, asl #1
 	cmp	r3, r2, lsr #2
-	bcc	.L1096
+	bcc	.L1036
 	mov	r7, #0
 	mov	r9, r7
-.L1085:
+.L1025:
 	add	r6, r6, #1
-.L1079:
-	ldr	r2, .L1097+4
-	ldrb	r3, [r2, #120]	@ zero_extendqisi2
+.L1019:
+	ldr	r2, .L1037+4
+	ldrb	r3, [r2, #116]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r6, r3
-	bcc	.L1088
-	b	.L1087
-.L1096:
+	bcc	.L1028
+	b	.L1027
+.L1036:
 	mov	r5, r3
-.L1087:
-	ldr	r6, .L1097
+.L1027:
+	ldr	r6, .L1037
 	mov	r0, r4
 	mov	r1, #0
-	ldrb	r3, [r6, #3765]	@ zero_extendqisi2
+	ldrb	r3, [r6, #3761]	@ zero_extendqisi2
 	sub	r3, r3, #67
 	uxtb	r3, r3
 	cmp	r3, #1
-	bhi	.L1089
+	bhi	.L1029
 	bl	SandiskSetRRPara
-	b	.L1090
-.L1089:
+	b	.L1030
+.L1029:
 	bl	ToshibaSetRRPara
-.L1090:
+.L1030:
 	mov	r3, #255
 	str	r3, [r4, #8]
-	ldrb	r3, [r6, #3836]	@ zero_extendqisi2
+	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
 	adds	r2, r5, #1
 	mov	r0, r8
 	movne	r2, #1
@@ -9065,15 +8610,15 @@ ToshibaReadRetrial:
 	movne	r5, #256
 	bl	NandcWaitFlashReady
 	cmp	sl, #0
-	beq	.L1092
+	beq	.L1032
 	mov	r0, #4
 	bl	NandcSetDdrMode
-.L1092:
+.L1032:
 	mov	r0, r5
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1098:
+.L1038:
 	.align	2
-.L1097:
+.L1037:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -9088,130 +8633,129 @@ FlashSavePhyInfo:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r6, #0
-	ldr	r5, .L1106
-	ldr	r7, .L1106+4
-	ldr	r8, .L1106+8
-	ldr	r3, [r5, #3780]
-	ldrb	r0, [r7, #128]	@ zero_extendqisi2
-	str	r3, [r7, #124]
+	ldr	r5, .L1046
+	ldr	r7, .L1046+4
+	ldr	r8, .L1046+8
+	ldr	r3, [r5, #124]
+	ldrb	r0, [r5, #128]	@ zero_extendqisi2
+	str	r3, [r5, #120]
 	bl	FlashBchSel
 	mov	r1, #0
 	mov	r2, #2048
-	ldr	r0, [r5, #3780]
+	ldr	r0, [r5, #124]
 	bl	ftl_memset
-	ldr	r3, [r7, #124]
-	ldr	r1, .L1106+12
+	ldr	r3, [r5, #120]
+	ldr	r1, .L1046+12
 	mov	r2, #32
 	str	r8, [r3, #0]
-	ldr	r4, [r7, #124]
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+	ldr	r4, [r5, #120]
+	ldrb	r3, [r7, #3762]	@ zero_extendqisi2
 	add	r0, r4, #16
 	strh	r3, [r4, #12]	@ movhi
-	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	ldrb	r3, [r7, #853]	@ zero_extendqisi2
 	strh	r3, [r4, #14]	@ movhi
-	ldrb	r3, [r5, #3777]	@ zero_extendqisi2
+	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
 	str	r3, [r4, #1076]
 	bl	memcpy
 	add	r0, r4, #80
-	ldr	r1, .L1106+16
+	ldr	r1, .L1046+16
 	mov	r2, #8
 	bl	memcpy
 	add	r0, r4, #96
-	ldr	r1, .L1106+20
+	ldr	r1, .L1046+20
 	mov	r2, #32
 	bl	memcpy
-	ldr	r0, [r7, #124]
-	ldr	r1, .L1106+24
+	ldr	r0, [r5, #120]
+	ldr	r1, .L1046+24
 	mov	r2, #32
 	add	r0, r0, #160
 	bl	memcpy
-	ldr	r4, [r7, #124]
-	add	r1, r5, #48
+	ldr	r4, [r5, #120]
+	add	r1, r7, #896
 	mov	r2, #32
 	add	r0, r4, #192
 	bl	memcpy
 	mov	r2, #852
 	add	r0, r4, #224
-	ldr	r1, .L1106+28
+	mov	r1, r7
 	bl	memcpy
 	add	r0, r4, #12
 	movw	r1, #2036
 	bl	JSHash
 	movw	r3, #1592
 	str	r3, [r4, #4]
-	ldr	r3, [r7, #116]
-	str	r3, [r7, #124]
+	ldr	r3, [r5, #112]
+	str	r3, [r5, #120]
 	str	r0, [r4, #8]
 	mov	r0, #0
 	bl	flash_enter_slc_mode
 	mov	r4, r6
-.L1102:
-	ldr	r1, [r5, #4]
+.L1042:
+	ldr	r1, [r7, #856]
 	mov	r0, #0
 	mov	r2, r0
 	mul	r1, r1, r4
 	bl	FlashEraseBlock
-	ldr	r1, [r5, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r5, #3780]
+	ldr	r2, [r5, #124]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashProgPage
-	ldr	r1, [r5, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r5, #3780]
+	ldr	r2, [r5, #124]
 	mov	r3, r0
 	mul	r1, r1, r4
 	add	r1, r1, #1
 	bl	FlashProgPage
-	ldr	r1, [r5, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r7, #116]
+	ldr	r2, [r5, #112]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	beq	.L1100
-	ldr	sl, [r7, #124]
+	beq	.L1040
+	ldr	sl, [r5, #120]
 	ldr	r3, [sl, #0]
 	cmp	r3, r8
-	bne	.L1100
+	bne	.L1040
 	add	r0, sl, #12
 	movw	r1, #2036
 	bl	JSHash
 	ldr	r3, [sl, #8]
 	cmp	r3, r0
-	bne	.L1100
+	bne	.L1040
 	add	r3, r4, #1
-	str	r3, [r7, #132]
-	ldr	r3, [r5, #4]
+	str	r3, [r5, #132]
+	ldr	r3, [r7, #856]
 	add	r6, r6, #1
 	cmp	r6, #1
 	mul	r3, r3, r4
-	str	r3, [r7, #136]
-	bhi	.L1101
-.L1100:
+	str	r3, [r5, #136]
+	bhi	.L1041
+.L1040:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L1102
-.L1101:
+	bne	.L1042
+.L1041:
 	mov	r0, #0
 	bl	flash_exit_slc_mode
 	cmp	r6, #0
 	mvneq	r0, #0
 	movne	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1107:
+.L1047:
 	.align	2
-.L1106:
-	.word	.LANCHOR0
+.L1046:
 	.word	.LANCHOR2
+	.word	.LANCHOR0
 	.word	1312902724
-	.word	.LANCHOR0+2132
-	.word	.LANCHOR0+3768
-	.word	.LANCHOR0+2740
-	.word	.LANCHOR1+2688
-	.word	.LANCHOR0+2908
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+3764
+	.word	.LANCHOR0+3588
+	.word	.LANCHOR1+2828
 	.fnend
 	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
 	.align	2
@@ -9219,107 +8763,112 @@ FlashSavePhyInfo:
 	.type	FlashReadIdbDataRaw, %function
 FlashReadIdbDataRaw:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
 	mov	r2, #4
 	mov	sl, r0
-	ldr	r1, .L1119
-	add	r0, sp, #4
+	ldr	r1, .L1059
+	add	r0, sp, #12
 	bl	memcpy
-	ldr	r3, .L1119+4
-	ldr	r2, [r3, #3788]
-	ldrb	fp, [r3, #3836]	@ zero_extendqisi2
-	ldr	r3, .L1119+8
+	ldr	r3, .L1059+4
+	ldrb	r2, [r3, #3832]	@ zero_extendqisi2
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L1059+8
 	cmp	r2, r3
-	bne	.L1109
+	bne	.L1049
 	mov	r0, #0
 	bl	flash_enter_slc_mode
-.L1109:
-	ldr	r7, .L1119+4
+.L1049:
+	ldr	r7, .L1059+4
 	mov	r0, sl
 	mov	r1, #0
 	mov	r2, #2048
 	bl	ftl_memset
 	mvn	r8, #0
 	mov	r4, #2
-	mov	r6, r7
-	ldr	r9, .L1119+12
-	b	.L1110
-.L1117:
-	mov	r5, #0
-.L1112:
-	add	r3, sp, #4
-	ldrb	r0, [r3, r5]	@ zero_extendqisi2
+	ldr	r9, .L1059+12
+	mov	fp, r7
+	b	.L1050
+.L1057:
+	mov	r6, #0
+.L1052:
+	add	r3, sp, #12
+	ldr	r5, .L1059+12
+	ldrb	r0, [r3, r6]	@ zero_extendqisi2
 	bl	FlashBchSel
-	ldr	r1, [r7, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r7, #3780]
+	ldr	r2, [r9, #124]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1111
-	add	r5, r5, #1
-	cmp	r5, #4
-	bne	.L1112
-	b	.L1113
-.L1111:
-	ldr	r3, [r6, #3780]
-	ldr	r3, [r3, #0]
-	cmp	r3, r9
-	bne	.L1113
-	add	r3, sp, #8
-	ldr	r0, .L1119+16
-	add	r5, r3, r5
-	ldrb	r1, [r5, #-4]	@ zero_extendqisi2
+	bne	.L1051
+	add	r6, r6, #1
+	cmp	r6, #4
+	bne	.L1052
+	b	.L1053
+.L1051:
+	ldr	r3, [r5, #124]
+	ldr	r2, [r3, #0]
+	ldr	r3, .L1059+16
+	cmp	r2, r3
+	bne	.L1053
+	add	r3, sp, #16
+	ldr	r0, .L1059+20
+	add	r6, r3, r6
+	ldrb	r1, [r6, #-4]	@ zero_extendqisi2
 	bl	printk
-	mov	r2, #2048
 	mov	r0, sl
-	ldr	r1, [r6, #3780]
+	ldr	r1, [r5, #124]
+	mov	r2, #2048
 	bl	memcpy
-	ldr	r3, [r6, #3780]
+	ldr	r3, [r5, #124]
 	ldr	r3, [r3, #512]
-	strb	r3, [r6, #1]
-	ldr	r3, .L1119+20
-	ldr	r2, [r3, #132]
-	cmp	r2, r4
-	bls	.L1116
-	str	r4, [r3, #132]
-	mov	r8, #0
+	strb	r3, [fp, #853]
+	ldr	r3, [r5, #132]
+	cmp	r3, r4
+	bls	.L1056
+	str	r4, [r5, #132]
 	bl	FlashSavePhyInfo
-.L1113:
+	mov	r8, #0
+.L1053:
 	add	r4, r4, #1
-.L1110:
-	ldrb	r3, [r7, #1]	@ zero_extendqisi2
+.L1050:
+	ldrb	r3, [r7, #853]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcc	.L1117
-	b	.L1114
-.L1116:
+	bcc	.L1057
+	b	.L1054
+.L1056:
 	mov	r8, #0
-.L1114:
-	mov	r0, fp
+.L1054:
+	ldr	r0, [sp, #4]
 	bl	FlashBchSel
-	ldr	r3, .L1119+4
-	ldr	r2, [r3, #3788]
-	ldr	r3, .L1119+8
+	ldr	r3, .L1059+4
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L1059+8
 	cmp	r2, r3
-	bne	.L1115
+	bne	.L1055
 	mov	r0, #0
 	bl	flash_exit_slc_mode
-.L1115:
+.L1055:
 	mov	r0, r8
-	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1120:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1060:
 	.align	2
-.L1119:
+.L1059:
 	.word	.LANCHOR3+11
 	.word	.LANCHOR0
 	.word	1446522928
-	.word	-52655045
-	.word	.LC87
 	.word	.LANCHOR2
+	.word	-52655045
+	.word	.LC88
 	.fnend
 	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
 	.align	2
@@ -9332,121 +8881,121 @@ FlashLoadPhyInfo:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r2, #4
-	ldr	r1, .L1131
+	ldr	r1, .L1072
 	add	r0, sp, #4
 	bl	memcpy
-	ldr	r7, .L1131+4
-	ldr	r2, .L1131+8
-	movw	r3, #2698
-	ldr	r5, .L1131+12
+	ldr	r5, .L1072+4
+	ldr	r2, .L1072+8
+	movw	r3, #2838
 	mov	r4, #0
-	mov	r0, r4
 	mov	r8, #4
-	ldrh	fp, [r2, r3]
-	mvn	sl, #0
-	ldr	r3, [r7, #3780]
+	mov	r0, r4
 	str	r4, [r5, #136]
-	str	r3, [r5, #124]
+	ldrh	r9, [r2, r3]
+	mvn	r6, #0
+	ldr	r3, [r5, #124]
+	ldr	fp, .L1072+12
+	str	r3, [r5, #120]
 	bl	flash_enter_slc_mode
-	b	.L1122
-.L1124:
+	b	.L1062
+.L1064:
 	add	r3, sp, #4
-	ldrb	r0, [r3, r6]	@ zero_extendqisi2
+	ldrb	r0, [r3, r7]	@ zero_extendqisi2
 	bl	FlashBchSel
 	mov	r0, #0
 	mov	r1, r4
-	ldr	r2, [r7, #3780]
+	ldr	r2, [r5, #124]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1123
+	bne	.L1063
 	mov	r0, #0
-	mov	r1, r9
-	ldr	r2, [r7, #3780]
+	mov	r1, sl
+	ldr	r2, [r5, #124]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1123
-	add	r6, r6, #1
-	cmp	r6, #4
-	beq	.L1125
-	b	.L1124
-.L1123:
-	ldr	r6, [r5, #124]
-	ldr	r3, .L1131+16
-	ldr	r2, [r6, #0]
-	cmp	r2, r3
-	bne	.L1125
-	cmp	sl, #0
-	bne	.L1126
-	ldr	r2, .L1131+8
-	movw	r3, #2698
+	bne	.L1063
+	add	r7, r7, #1
+	cmp	r7, #4
+	beq	.L1065
+	b	.L1064
+.L1063:
+	ldr	r7, [r5, #120]
+	ldr	r3, [r7, #0]
+	cmp	r3, fp
+	bne	.L1065
+	cmp	r6, #0
+	bne	.L1066
+	ldr	r2, .L1072+8
+	movw	r3, #2838
 	mov	r0, r4
 	ldrh	r1, [r2, r3]
 	bl	__aeabi_uidiv
-	ldr	r3, .L1131+12
+	ldr	r3, .L1072+4
 	add	r0, r0, #1
 	str	r0, [r3, #132]
-	b	.L1127
-.L1126:
-	add	r0, r6, #12
+	mov	r0, r6
+	b	.L1071
+.L1066:
+	add	r0, r7, #12
 	movw	r1, #2036
 	bl	JSHash
-	ldr	r3, [r6, #8]
+	ldr	r3, [r7, #8]
 	cmp	r3, r0
-	bne	.L1125
-	ldr	sl, .L1131+8
-	add	r1, r6, #160
+	bne	.L1065
+	ldr	r6, .L1072+16
+	add	r1, r7, #160
 	mov	r2, #32
-	add	r0, sl, #2688
+	ldr	r0, .L1072+20
 	bl	memcpy
-	add	r1, r6, #192
+	add	r0, r6, #896
+	add	r1, r7, #192
 	mov	r2, #32
-	ldr	r0, .L1131+20
 	bl	memcpy
-	add	r1, r6, #224
+	mov	r0, r6
+	add	r1, r7, #224
 	mov	r2, #852
-	ldr	r0, .L1131+24
 	bl	memcpy
-	ldr	r3, [r6, #1076]
+	ldr	r3, [r7, #1076]
+	ldr	r2, .L1072+8
 	mov	r0, r4
 	str	r4, [r5, #136]
-	strb	r3, [r7, #3777]
-	movw	r3, #2698
-	ldrh	r1, [sl, r3]
-	mov	sl, #0
+	strb	r3, [r6, #3773]
+	movw	r3, #2838
+	ldrh	r1, [r2, r3]
+	mov	r6, #0
 	bl	__aeabi_uidiv
 	add	r0, r0, #1
 	str	r0, [r5, #132]
 	cmp	r0, #1
 	moveq	r3, #2
 	streq	r3, [r5, #132]
-	ldrh	r3, [r6, #14]
+	ldrh	r3, [r7, #14]
 	strb	r3, [r5, #140]
-.L1125:
+.L1065:
 	subs	r8, r8, #1
-	add	r4, r4, fp
-	beq	.L1129
-.L1122:
-	add	r9, r4, #1
-	mov	r6, #0
-	b	.L1124
-.L1129:
+	add	r4, r4, r9
+	beq	.L1069
+.L1062:
+	add	sl, r4, #1
+	mov	r7, #0
+	b	.L1064
+.L1069:
 	mov	r0, r8
+.L1071:
 	bl	flash_exit_slc_mode
-.L1127:
-	mov	r0, sl
+	mov	r0, r6
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1132:
+.L1073:
 	.align	2
-.L1131:
+.L1072:
 	.word	.LANCHOR3+11
-	.word	.LANCHOR0
-	.word	.LANCHOR1
 	.word	.LANCHOR2
+	.word	.LANCHOR1
 	.word	1312902724
-	.word	.LANCHOR0+48
-	.word	.LANCHOR0+2908
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2828
 	.fnend
 	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
 	.align	2
@@ -9459,14 +9008,14 @@ FlashDdrTunningRead:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	sl, r3
-	ldr	r4, .L1154
+	ldr	r4, .L1095
 	.pad #20
 	sub	sp, sp, #20
 	mov	fp, r0
 	mov	r9, r2
 	str	r1, [sp, #0]
-	ldr	r3, [r4, #2164]
-	ldr	r7, [r4, #12]
+	ldr	r3, [r4, #3012]
+	ldr	r7, [r4, #3780]
 	ldr	r3, [r3, #304]
 	cmp	r7, #7
 	movhi	r7, #12
@@ -9475,7 +9024,7 @@ FlashDdrTunningRead:
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
 	moveq	r8, #1024
-	beq	.L1135
+	beq	.L1076
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
@@ -9488,26 +9037,26 @@ FlashDdrTunningRead:
 	mov	r0, fp
 	bl	FlashReadRawPage
 	mov	r8, r0
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	NandcSetMode
 	cmn	r8, #1
-	beq	.L1136
-	ldr	r0, .L1154+4
+	beq	.L1077
+	ldr	r0, .L1095+4
 	mov	r2, r8
 	ldr	r1, [sp, #0]
 	bl	printk
 	cmp	r8, #9
-	bhi	.L1137
+	bhi	.L1078
 	add	r4, r4, fp, asl #3
-	ldr	r3, [r4, #16]
+	ldr	r3, [r4, #864]
 	ldr	r2, [r3, #3840]
 	ldr	r2, [r3, #0]
 	orr	r2, r2, #131072
 	str	r2, [r3, #0]
-.L1137:
-	ldr	r3, .L1154+8
+.L1078:
+	ldr	r3, .L1095+8
 	ldr	r2, [r3, #144]
 	add	r2, r2, #1
 	str	r2, [r3, #144]
@@ -9515,15 +9064,15 @@ FlashDdrTunningRead:
 	movcs	sl, #0
 	strcs	sl, [r3, #144]
 	movcs	r9, sl
-	bcc	.L1136
-.L1135:
+	bcc	.L1077
+.L1076:
 	mov	r4, #0
 	str	fp, [sp, #4]
 	mov	r5, r4
 	mvn	r6, #0
 	mov	fp, r4
 	str	r4, [sp, #8]
-.L1142:
+.L1083:
 	uxtb	r0, r7
 	bl	NandcSetDdrPara
 	mov	r3, sl
@@ -9533,84 +9082,84 @@ FlashDdrTunningRead:
 	bl	FlashReadRawPage
 	add	r3, r8, #1
 	cmp	r0, r3
-	bhi	.L1138
+	bhi	.L1079
 	cmp	r0, #2
-	bhi	.L1148
+	bhi	.L1089
 	add	r5, r5, #1
 	cmp	r5, #9
-	bls	.L1148
+	bls	.L1089
 	mov	ip, fp
 	rsb	r4, r5, r7
 	ldr	fp, [sp, #4]
 	mov	r8, r0
 	mov	r6, #0
-	b	.L1140
-.L1138:
+	b	.L1081
+.L1079:
 	cmp	fp, r5
-	bcs	.L1149
+	bcs	.L1090
 	cmp	r5, #7
 	rsb	r3, r5, r4
 	str	r3, [sp, #8]
-	bhi	.L1153
+	bhi	.L1094
 	mov	fp, r5
-	b	.L1149
-.L1148:
+	b	.L1090
+.L1089:
 	mov	r6, #0
 	mov	r4, r7
 	mov	r8, r0
 	mov	sl, r6
 	mov	r9, r6
-	b	.L1139
-.L1149:
+	b	.L1080
+.L1090:
 	mov	r5, #0
-.L1139:
+.L1080:
 	add	r7, r7, #2
 	cmp	r7, #69
-	bls	.L1142
+	bls	.L1083
 	mov	ip, fp
 	ldr	fp, [sp, #4]
-.L1140:
+.L1081:
 	cmp	ip, r5
-	bcc	.L1143
-	b	.L1141
-.L1153:
+	bcc	.L1084
+	b	.L1082
+.L1094:
 	ldr	fp, [sp, #4]
-.L1141:
+.L1082:
 	ldr	r4, [sp, #8]
-.L1143:
+.L1084:
 	cmp	r4, #0
-	beq	.L1144
-	ldr	r0, .L1154+12
+	beq	.L1085
+	ldr	r0, .L1095+12
 	mov	r1, r4
 	bl	printk
 	uxtb	r0, r4
 	bl	NandcSetDdrPara
-.L1144:
+.L1085:
 	cmn	r6, #1
-	bne	.L1136
-	ldr	r0, .L1154+16
+	bne	.L1077
+	ldr	r0, .L1095+16
 	mov	r1, fp
 	ldr	r2, [sp, #0]
 	bl	printk
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
 	moveq	r8, r6
-	beq	.L1136
+	beq	.L1077
 	ldr	r3, [sp, #12]
 	ubfx	r0, r3, #8, #8
 	bl	NandcSetDdrPara
-.L1136:
+.L1077:
 	mov	r0, r8
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1155:
+.L1096:
 	.align	2
-.L1154:
+.L1095:
 	.word	.LANCHOR0
-	.word	.LC88
-	.word	.LANCHOR2
 	.word	.LC89
+	.word	.LANCHOR2
 	.word	.LC90
+	.word	.LC91
 	.fnend
 	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
 	.align	2
@@ -9623,12 +9172,12 @@ FlashDdrParaScan:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r7, r0
-	ldr	r5, .L1160
+	ldr	r5, .L1101
 	mov	r4, #0
 	mov	r6, r1
-	ldrb	r0, [r5, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r5, #3772]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r5, #3776]	@ zero_extendqisi2
+	ldrb	r0, [r5, #3772]	@ zero_extendqisi2
 	bl	NandcSetMode
 	mov	r1, r6
 	mov	r2, r4
@@ -9643,598 +9192,129 @@ FlashDdrParaScan:
 	mov	r0, r7
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	beq	.L1157
+	beq	.L1098
 	cmn	r8, #1
-	bne	.L1158
-.L1157:
-	ldrb	r3, [r5, #3776]	@ zero_extendqisi2
+	bne	.L1099
+.L1098:
+	ldrb	r3, [r5, #3772]	@ zero_extendqisi2
 	tst	r3, #1
-	beq	.L1158
+	beq	.L1099
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
-	ldr	r3, .L1160
+	ldr	r3, .L1101
 	mov	r2, #0
-	strb	r2, [r3, #3777]
-	b	.L1159
-.L1158:
+	strb	r2, [r3, #3773]
+	b	.L1100
+.L1099:
 	mov	r3, #1
-	strb	r3, [r5, #3777]
-.L1159:
+	strb	r3, [r5, #3773]
+.L1100:
 	mov	r0, #0
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1161:
+.L1102:
 	.align	2
-.L1160:
+.L1101:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashDdrParaScan, .-FlashDdrParaScan
 	.align	2
-	.global	FlashInit
-	.type	FlashInit, %function
-FlashInit:
-	.fnstart
+	.global	FlashReadPage
+	.type	FlashReadPage, %function
+FlashReadPage:
+	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	mov	r7, r0
-	mov	r0, #32768
-	ldr	r6, .L1206
-	bl	ftl_malloc
-	ldr	r5, .L1206+4
-	mov	r4, #0
-	str	r0, [r6, #3780]
-	mov	r0, #32768
-	bl	ftl_malloc
-	str	r0, [r5, #116]
-	mov	r0, #4096
-	bl	ftl_malloc
-	str	r0, [r5, #148]
-	mov	r0, #32768
-	bl	ftl_malloc
-	str	r0, [r5, #152]
-	mov	r0, #4096
-	bl	ftl_malloc
-	mov	r3, #50
-	str	r4, [r5, #132]
-	strb	r3, [r5, #140]
-	strb	r3, [r6, #1]
-	mov	r3, #128
-	str	r4, [r5, #144]
-	str	r3, [r6, #4]
-	mov	r3, #60
-	strb	r4, [r6, #3777]
-	strb	r3, [r5, #128]
-	strb	r4, [r6, #0]
-	str	r0, [r5, #156]
-	mov	r0, r7
-	bl	NandcInit
-	ldr	r5, .L1206+8
-.L1165:
-	uxtb	r0, r4
-	mov	r1, r5
-	bl	FlashReadIDRaw
-	cmp	r4, #0
-	bne	.L1163
-	ldrb	r3, [r6, #2132]	@ zero_extendqisi2
-	sub	r3, r3, #1
-	uxtb	r3, r3
-	cmp	r3, #253
-	bhi	.L1199
-	ldrb	r3, [r6, #2133]	@ zero_extendqisi2
-	cmp	r3, #255
-	beq	.L1200
-.L1163:
-	add	r4, r4, #1
-	add	r5, r5, #8
-	cmp	r4, #4
-	bne	.L1165
-	ldr	r4, .L1206
-	ldrb	r3, [r4, #2132]	@ zero_extendqisi2
-	cmp	r3, #173
-	beq	.L1166
-	ldr	r0, [r4, #3784]
-	bl	NandcSetDdrMode
-.L1166:
-	mov	r1, #0
-	ldr	r0, .L1206+12
-	mov	r2, #852
-	bl	ftl_memset
-	ldr	r3, .L1206+16
-	str	r3, [r4, #2776]
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r5, r0
+	mov	r6, r1
+	mov	r8, r2
+	mov	sl, r3
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	mov	r4, r0
+	bne	.L1104
+	ldr	r7, .L1109
+	ldrb	r9, [r7, #860]	@ zero_extendqisi2
+	cmp	r9, #0
+	beq	.L1105
 	mov	r3, #0
-	strb	r3, [r4, #8]
-	ldrb	r3, [r4, #2133]	@ zero_extendqisi2
-	sub	r1, r3, #218
-	rsbs	ip, r1, #0
-	adc	ip, ip, r1
-	cmp	r3, #218
-	cmpne	r3, #241
-	beq	.L1167
-	cmp	r3, #220
-	bne	.L1168
-	ldr	r2, .L1206
-	ldrb	r2, [r2, #2135]	@ zero_extendqisi2
-	cmp	r2, #149
-	bne	.L1168
-.L1167:
-	ldr	r2, .L1206
-	mov	r1, #1
-	mov	r0, #16
-	strb	r1, [r2, #0]
-	ldr	r1, .L1206+4
-	strb	r0, [r2, #1]
-	strb	r0, [r1, #128]
-	ldrb	r0, [r2, #2132]	@ zero_extendqisi2
-	ldr	r2, .L1206+20
-	cmp	r0, #152
-	strb	r0, [r2, #2969]
-	moveq	r0, #24
-	streqb	r0, [r1, #128]
-	cmp	ip, #0
-	movwne	r3, #2982
-	movne	r1, #2048
-	strneh	r1, [r2, r3]	@ movhi
-	mvnne	r3, #37
-	bne	.L1203
-.L1170:
-	cmp	r3, #220
-	bne	.L1171
-	movw	r3, #2982
-	mov	r1, #4096
-	strh	r1, [r2, r3]	@ movhi
-	mvn	r3, #35
-.L1203:
-	strb	r3, [r2, #2970]
-.L1171:
-	ldr	r1, .L1206+24
-	mov	r2, #32
-	ldr	r0, .L1206+28
-	bl	memcpy
-	ldr	r0, .L1206+16
-	mov	r2, #32
-	add	r1, r0, #280
-	bl	memcpy
-.L1168:
-	ldr	r4, .L1206
-	ldrb	r3, [r4, #0]	@ zero_extendqisi2
+	mov	r0, r5
+	strb	r3, [r7, #860]
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, sl
+	bl	FlashReadRawPage
+	strb	r9, [r7, #860]
+	cmn	r0, #1
+	movne	r4, r0
+	bne	.L1104
+.L1105:
+	ldr	r7, .L1109
+	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1172
-	bl	FlashLoadPhyInfoInRam
-	cmp	r0, #0
-	bne	.L1173
-	ldr	r3, [r4, #2776]
-	ldrh	r0, [r3, #16]
-	ubfx	r0, r0, #8, #3
-	strb	r0, [r4, #3776]
-	tst	r0, #1
-	bne	.L1173
+	beq	.L1104
+	ldr	r3, [r7, #3012]
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r9, [r3, #304]
 	mov	r3, #1
-	strb	r3, [r4, #3777]
-	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
-	bl	NandcSetMode
-.L1173:
-	ldr	r4, .L1206
-	ldr	r3, [r4, #2776]
-	ldrb	r3, [r3, #26]	@ zero_extendqisi2
-	strb	r3, [r4, #80]
-	bl	FlashLoadPhyInfo
-	cmp	r0, #0
-	beq	.L1172
-	ldr	r3, [r4, #3784]
-	cmp	r3, #0
-	beq	.L1175
-	mov	r0, #1
-	bl	FlashSetInterfaceMode
-	mov	r0, #1
-	b	.L1204
-.L1175:
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
-	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #3776]	@ zero_extendqisi2
-.L1204:
-	bl	NandcSetMode
-	bl	FlashLoadPhyInfo
-	cmp	r0, #0
-	beq	.L1172
-	ldr	r4, .L1206
-	mov	r0, #1
-	bl	FlashSetInterfaceMode
-	mov	r0, #1
-	bl	NandcSetMode
-	ldr	r0, .L1206+32
-	ldr	r3, [r4, #2776]
-	ldrh	r1, [r3, #14]
-	bl	printk
-	bl	FlashLoadPhyInfoInRam
+	str	r3, [sp, #0]
+	mov	r3, sl
+	bl	FlashDdrTunningRead
 	cmn	r0, #1
-	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
-	bl	FlashDieInfoInit
-	ldr	r3, [r4, #2776]
-	ldrb	r0, [r3, #19]	@ zero_extendqisi2
-	bl	FlashGetReadRetryDefault
-	ldr	r1, .L1206+36
-	ldr	r0, .L1206+4
-	ldr	r3, [r4, #2776]
-	ldrh	r1, [r0, r1]
-	ldrb	r2, [r3, #9]	@ zero_extendqisi2
-	add	r1, r1, #4080
-	add	r1, r1, #15
-	cmp	r2, r1, lsr #12
-	blt	.L1178
-	ldrh	r1, [r3, #14]
-	add	r1, r1, #255
-	cmp	r2, r1, lsr #8
-	bge	.L1179
-.L1178:
-	ldrh	r2, [r3, #14]
-	bic	r2, r2, #255
-	strh	r2, [r3, #14]	@ movhi
-.L1179:
-	ldr	r3, .L1206
-	ldrb	r3, [r3, #3776]	@ zero_extendqisi2
-	tst	r3, #6
-	beq	.L1180
-	bl	FlashSavePhyInfo
-	ldr	r3, .L1206+4
-	mov	r0, #0
-	ldr	r1, [r3, #136]
-	bl	FlashDdrParaScan
-.L1180:
-	bl	FlashSavePhyInfo
-.L1172:
-	ldr	r2, .L1206
-	ldr	r0, [r2, #2776]
-	ldrb	r3, [r0, #26]	@ zero_extendqisi2
-	strb	r3, [r2, #80]
-	ldrh	r3, [r0, #16]
-	ubfx	r1, r3, #7, #1
-	strb	r1, [r2, #8]
-	ldr	r1, .L1206+4
-	tst	r3, #64
-	ubfx	ip, r3, #3, #1
-	strb	ip, [r1, #160]
-	ubfx	ip, r3, #4, #1
-	strb	ip, [r2, #3837]
-	ubfx	ip, r3, #8, #3
-	strb	ip, [r2, #3776]
-	mov	ip, #0
-	str	ip, [r1, #164]
-	beq	.L1181
-	ldrb	ip, [r2, #2909]	@ zero_extendqisi2
-	ldrb	r3, [r0, #19]	@ zero_extendqisi2
-	strb	ip, [r2, #3764]
-	ldrb	ip, [r2, #2910]	@ zero_extendqisi2
-	strb	r3, [r2, #3765]
-	strb	ip, [r1, #120]
-	sub	ip, r3, #1
-	uxtb	ip, ip
-	cmp	ip, #5
-	bhi	.L1182
-	sub	r3, r3, #5
-	ldr	ip, .L1206+40
-	uxtb	r3, r3
-	cmp	r3, #1
-	str	ip, [r1, #164]
-	movls	r3, #1
-	strls	r3, [r2, #3828]
-	b	.L1181
-.L1182:
-	sub	r2, r3, #17
-	uxtb	r2, r2
-	cmp	r2, #2
-	bhi	.L1183
-	ldr	r2, .L1206+44
-	cmp	r3, #19
-	moveq	r3, #15
-	str	r2, [r1, #164]
-	mov	r2, #7
-	strb	r2, [r1, #120]
-	streqb	r3, [r1, #120]
-	b	.L1181
-.L1183:
-	cmp	r3, #33
-	cmpne	r3, #65
-	beq	.L1184
-	cmp	r3, #66
-	bne	.L1185
-.L1184:
-	ldr	r3, .L1206+4
-	mov	r1, #4
-	ldr	r2, .L1206+48
-	str	r2, [r3, #164]
-	ldr	r2, .L1206
-	strb	r1, [r2, #3764]
-	mov	r2, #7
-	strb	r2, [r3, #120]
-	b	.L1181
-.L1185:
-	cmp	r3, #67
-	cmpne	r3, #34
-	beq	.L1186
-	cmp	r3, #35
-	beq	.L1186
-	cmp	r3, #68
-	bne	.L1187
-.L1186:
-	ldr	r2, .L1206+4
-	cmp	r3, #35
-	cmpne	r3, #68
-	ldr	r1, .L1206+48
-	sub	r3, r3, #67
-	uxtb	r3, r3
-	str	r1, [r2, #164]
-	mov	r1, #7
-	strb	r1, [r2, #120]
-	moveq	r1, #17
-	streqb	r1, [r2, #120]
-	cmp	r3, #1
-	ldr	r3, .L1206
-	movls	r2, #4
-	movhi	r2, #5
-	strb	r2, [r3, #3764]
-	b	.L1181
-.L1187:
-	cmp	r3, #49
-	ldreq	r3, .L1206+52
-	streq	r3, [r1, #164]
-.L1181:
-	ldr	r5, .L1206
-	ldr	r3, .L1206+56
-	ldr	r2, [r5, #3788]
-	cmp	r2, r3
-	bne	.L1190
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
-	cmp	r3, #0
+	mov	r4, r0
+	beq	.L1106
+	ldrb	r3, [r7, #3832]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1104
+.L1106:
+	ubfx	r0, r9, #8, #8
+	bl	NandcSetDdrPara
+.L1104:
+	ldr	r7, .L1109+4
+	ldr	ip, [r7, #148]
+	adds	r3, ip, #0
+	movne	r3, #1
+	cmn	r4, #1
 	movne	r3, #0
-	strneb	r3, [r0, #18]
-.L1190:
-	ldr	r3, [r5, #2776]
-	ldr	r4, .L1206
-	ldrb	r1, [r3, #12]	@ zero_extendqisi2
-	ldrh	r0, [r3, #10]
-	ldrb	r6, [r3, #18]	@ zero_extendqisi2
-	bl	__aeabi_idiv
-	mov	r1, r0
-	mov	r0, r6
-	bl	BuildFlashLsbPageTable
-	bl	FlashDieInfoInit
-	ldrb	r3, [r5, #2132]	@ zero_extendqisi2
-	cmp	r3, #44
-	bne	.L1191
-	ldrb	r3, [r4, #3777]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1191
-	ldr	r2, [r4, #3788]
-	ldr	r3, .L1206+56
-	cmp	r2, r3
-	bne	.L1192
-	ldrb	r3, [r4, #80]	@ zero_extendqisi2
+	beq	.L1107
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, sl
+	mov	r0, r5
+	blx	ip
+	mov	r2, r5
+	mov	r3, r6
+	mov	r4, r0
+	ldr	r0, .L1109+8
+	mov	r1, r4
+	bl	printk
+	cmn	r4, #1
+	bne	.L1107
+	ldr	r3, .L1109
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1191
-.L1192:
-	ldr	r3, .L1206
-	mov	r2, #0
-	mov	r0, #1
-	strb	r2, [r3, #3777]
-	bl	FlashSetInterfaceMode
-	mov	r0, #1
-	bl	NandcSetMode
-.L1191:
-	mov	r0, #0
+	beq	.L1107
+	mov	r0, r5
 	bl	flash_enter_slc_mode
-	ldr	r2, .L1206
-	ldrb	r3, [r2, #3776]	@ zero_extendqisi2
-	tst	r3, #6
-	beq	.L1193
-	ldrb	r2, [r2, #3777]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1194
-	tst	r3, #1
-	bne	.L1193
-.L1194:
-	ldr	r3, .L1206+4
-	mov	r0, #0
-	ldr	r1, [r3, #136]
-	bl	FlashDdrParaScan
-.L1193:
-	ldr	r4, .L1206
-	mov	r0, #0
-	bl	flash_exit_slc_mode
-	ldr	r3, [r4, #2776]
-	ldrb	r0, [r3, #20]	@ zero_extendqisi2
-	bl	FlashBchSel
-	add	r0, r4, #84
-	bl	FlashReadIdbDataRaw
-	mov	r3, r4
-	cmp	r0, #0
-	movne	r3, #16
-	strneb	r3, [r4, #1]
-	bne	.L1197
-	ldr	r2, .L1206+4
-	ldrb	r1, [r3, #1]	@ zero_extendqisi2
-	ldrb	r2, [r2, #140]	@ zero_extendqisi2
-	cmp	r1, r2
-	strhib	r2, [r3, #1]
-	ldrb	r3, [r3, #1]	@ zero_extendqisi2
-	cmp	r3, #15
-	ldrls	r3, .L1206
-	movls	r2, #16
-	strlsb	r2, [r3, #1]
-.L1197:
-	ldr	r4, .L1206
-	movw	r6, #2214
-	ldr	r0, .L1206+60
-	bl	FlashTimingCfg
-	mov	r3, #2208
-	ldr	r5, [r4, #2776]
-	ldrb	r2, [r5, #12]	@ zero_extendqisi2
-	ldrh	r7, [r5, #14]
-	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	ldrb	r2, [r4, #3766]	@ zero_extendqisi2
-	str	r3, [r4, #2204]
-	ldr	r3, [r4, #2132]
-	str	r3, [r4, #2200]
-	movw	r3, #2210
-	strh	r2, [r4, r3]	@ movhi
-	add	r3, r3, #2
-	ldrb	r2, [r5, #13]	@ zero_extendqisi2
-	strh	r7, [r4, r6]	@ movhi
-	strh	r2, [r4, r3]	@ movhi
-	add	r3, r3, #4
-	ldrh	r2, [r5, #10]
-	strh	r2, [r4, r3]	@ movhi
-	ldrb	r1, [r5, #12]	@ zero_extendqisi2
-	ldrh	r0, [r5, #10]
-	bl	__aeabi_idiv
-	movw	r3, #2218
-	mov	lr, #512
-	movw	r2, #2222
-	strh	r0, [r4, r3]	@ movhi
-	movw	r0, #2220
-	ldrb	ip, [r5, #9]	@ zero_extendqisi2
-	strh	ip, [r4, r0]	@ movhi
-	ldrb	r3, [r5, #9]	@ zero_extendqisi2
-	ldrh	r1, [r5, #10]
-	mul	r1, r1, r3
-	mov	r3, #2224
-	strh	lr, [r4, r3]	@ movhi
-	add	r3, r3, #2
-	ldrb	lr, [r4, #1]	@ zero_extendqisi2
-	strh	lr, [r4, r3]	@ movhi
-	uxth	r1, r1
-	ldrb	lr, [r4, #0]	@ zero_extendqisi2
-	strh	r1, [r4, r2]	@ movhi
-	cmp	lr, #1
-	bne	.L1198
-	mov	lr, #16
-	mov	r7, r7, lsr #1
-	mov	ip, ip, asl #1
-	mov	r1, r1, asl #1
-	strb	lr, [r4, #1]
-	strh	r1, [r4, r2]	@ movhi
-	mov	r2, #8
-	strh	r7, [r4, r6]	@ movhi
-	strh	ip, [r4, r0]	@ movhi
-	strh	r2, [r4, r3]	@ movhi
-.L1198:
-	ldrb	r0, [r5, #20]	@ zero_extendqisi2
-	bl	FlashBchSel
-	bl	FlashSuspend
-	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1199:
-	mvn	r0, #1
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1200:
-	mvn	r0, #1
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1207:
-	.align	2
-.L1206:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR0+2132
-	.word	.LANCHOR0+2908
-	.word	.LANCHOR1+2688
-	.word	.LANCHOR1
-	.word	.LANCHOR1+2592
-	.word	.LANCHOR0+48
-	.word	.LC91
-	.word	-914
-	.word	HynixReadRetrial
-	.word	MicronReadRetrial
-	.word	ToshibaReadRetrial
-	.word	SamsungReadRetrial
-	.word	1446522928
-	.word	150000
-	.fnend
-	.size	FlashInit, .-FlashInit
-	.align	2
-	.global	FlashReadPage
-	.type	FlashReadPage, %function
-FlashReadPage:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
-	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
-	mov	r6, r0
-	mov	r5, r1
-	mov	r8, r2
-	mov	sl, r3
-	bl	FlashReadRawPage
-	cmn	r0, #1
-	mov	r4, r0
-	bne	.L1209
-	ldr	r7, .L1214
-	ldrb	r9, [r7, #8]	@ zero_extendqisi2
-	cmp	r9, #0
-	beq	.L1210
-	mov	r3, #0
-	mov	r0, r6
-	strb	r3, [r7, #8]
-	mov	r1, r5
-	mov	r2, r8
-	mov	r3, sl
-	bl	FlashReadRawPage
-	strb	r9, [r7, #8]
-	cmn	r0, #1
-	movne	r4, r0
-	bne	.L1209
-.L1210:
-	ldr	r7, .L1214
-	ldrb	r3, [r7, #3777]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1209
-	ldr	r3, [r7, #2164]
-	mov	r0, r6
-	mov	r1, r5
-	mov	r2, r8
-	ldr	r9, [r3, #304]
-	mov	r3, #1
-	str	r3, [sp, #0]
-	mov	r3, sl
-	bl	FlashDdrTunningRead
-	cmn	r0, #1
-	mov	r4, r0
-	beq	.L1211
-	ldrb	r3, [r7, #3836]	@ zero_extendqisi2
-	cmp	r0, r3, lsr #1
-	bls	.L1209
-.L1211:
-	ubfx	r0, r9, #8, #8
-	bl	NandcSetDdrPara
-.L1209:
-	ldr	r3, .L1214+4
-	ldr	ip, [r3, #164]
-	adds	r3, ip, #0
-	movne	r3, #1
-	cmn	r4, #1
-	movne	r3, #0
-	cmp	r3, #0
-	beq	.L1212
-	mov	r1, r5
+	ldr	ip, [r7, #148]
+	mov	r0, r5
+	mov	r1, r6
 	mov	r2, r8
 	mov	r3, sl
-	mov	r0, r6
 	blx	ip
-	mov	r2, r6
-	mov	r3, r5
 	mov	r4, r0
-	ldr	r0, .L1214+8
-	mov	r1, r4
-	bl	printk
-.L1212:
+.L1107:
 	mov	r0, r4
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
-.L1215:
+.L1110:
 	.align	2
-.L1214:
+.L1109:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC92
@@ -10247,19 +9327,19 @@ FlashReadSlc2KPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1229
+	ldr	r3, .L1124
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r8, r1
 	.pad #28
 	sub	sp, sp, #28
 	mov	fp, r2
-	ldrb	sl, [r3, #2697]	@ zero_extendqisi2
+	ldrb	sl, [r3, #2837]	@ zero_extendqisi2
 	mov	r4, r0
 	mov	r7, #0
-	ldr	r6, .L1229+4
-	b	.L1217
-.L1226:
+	ldr	r6, .L1124+4
+	b	.L1112
+.L1121:
 	rsb	r3, r7, r8
 	add	r2, sp, #20
 	mov	r0, r4
@@ -10269,13 +9349,13 @@ FlashReadSlc2KPages:
 	add	r3, sp, #16
 	bl	LogAddr2PhyAddr
 	ldr	r3, [sp, #16]
-	ldrb	r2, [r6, #3766]	@ zero_extendqisi2
+	ldrb	r2, [r6, #3762]	@ zero_extendqisi2
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r4, #0]
-	bcs	.L1219
+	bcs	.L1114
 	add	r3, r6, r3
-	ldrb	r5, [r3, #3768]	@ zero_extendqisi2
+	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	NandcWaitFlashReady
 	mov	r0, r5
@@ -10293,7 +9373,7 @@ FlashReadSlc2KPages:
 	ldr	r3, [r4, #8]
 	bl	NandcXferData
 	ldr	r3, [sp, #20]
-	ldr	r1, [r6, #4]
+	ldr	r1, [r6, #856]
 	add	r1, r1, r3
 	mov	r9, r0
 	mov	r0, r5
@@ -10316,7 +9396,7 @@ FlashReadSlc2KPages:
 	ldr	r3, [sp, #12]
 	cmp	r3, r9
 	movcs	r9, r3
-	ldrb	r3, [r6, #3836]	@ zero_extendqisi2
+	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
 	adds	r2, r9, #1
 	add	r3, r3, r3, asl #1
 	movne	r2, #1
@@ -10332,48 +9412,48 @@ FlashReadSlc2KPages:
 	strne	r3, [r4, #0]
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1224
+	beq	.L1119
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L1224
+	bne	.L1119
 	ldr	r3, [r3, #0]
 	cmn	r3, #1
 	strne	r2, [r4, #0]
-.L1224:
+.L1119:
 	ldr	r3, [r4, #0]
 	cmn	r3, #1
-	bne	.L1219
+	bne	.L1114
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1229+8
-	ldrb	r2, [r6, #3836]	@ zero_extendqisi2
+	ldr	r0, .L1124+8
+	ldrb	r2, [r6, #3832]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r4, #8]
 	cmp	r1, #0
-	beq	.L1225
-	ldr	r0, .L1229+12
+	beq	.L1120
+	ldr	r0, .L1124+12
 	mov	r2, #4
 	mov	r3, #8
 	bl	rknand_print_hex
-.L1225:
+.L1120:
 	ldr	r1, [r4, #12]
 	cmp	r1, #0
-	beq	.L1219
+	beq	.L1114
 	mov	r2, #4
-	ldr	r0, .L1229+16
+	ldr	r0, .L1124+16
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1219:
+.L1114:
 	add	r7, r7, #1
 	add	r4, r4, #36
-.L1217:
+.L1112:
 	cmp	r7, r8
-	bne	.L1226
+	bne	.L1121
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1230:
+.L1125:
 	.align	2
-.L1229:
+.L1124:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LC93
@@ -10388,125 +9468,132 @@ FlashReadPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1267
+	ldr	r3, .L1168
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldrb	r3, [r3, #2697]	@ zero_extendqisi2
+	ldrb	r3, [r3, #2837]	@ zero_extendqisi2
 	mov	r9, r0
 	str	r1, [sp, #28]
 	str	r2, [sp, #32]
-	str	r3, [sp, #20]
-	ldr	r3, .L1267+4
-	ldrb	r8, [r3, #0]	@ zero_extendqisi2
-	ldrb	ip, [r3, #8]	@ zero_extendqisi2
+	str	r3, [sp, #24]
+	ldr	r3, .L1168+4
+	ldrb	r8, [r3, #852]	@ zero_extendqisi2
+	ldrb	ip, [r3, #860]	@ zero_extendqisi2
 	cmp	r8, #0
 	str	ip, [sp, #36]
 	moveq	sl, r8
-	beq	.L1232
+	beq	.L1127
 	bl	FlashReadSlc2KPages
-	b	.L1233
-.L1256:
+	b	.L1128
+.L1155:
 	mov	r3, #36
 	ldr	ip, [sp, #28]
 	mul	r3, r3, sl
 	add	r2, sp, #44
 	ldr	r1, [sp, #32]
-	ldr	r5, .L1267+4
+	ldr	fp, .L1168+4
 	add	r6, r9, r3
 	str	r3, [sp, #16]
 	rsb	r3, sl, ip
-	ldr	fp, [r6, #4]
+	ldr	r5, [r6, #4]
 	mov	r0, r6
 	uxtb	r3, r3
 	str	r3, [sp, #0]
 	add	r3, sp, #40
 	bl	LogAddr2PhyAddr
 	ldr	r3, [sp, #40]
-	ldrb	r2, [r5, #3766]	@ zero_extendqisi2
+	ldrb	r2, [fp, #3762]	@ zero_extendqisi2
 	cmp	r3, r2
 	ldrcs	ip, [sp, #16]
 	mvncs	r3, #0
 	mov	r7, r0
 	strcs	r3, [r9, ip]
-	bcs	.L1235
-	add	r3, r5, r3
-	ldrb	r4, [r3, #3768]	@ zero_extendqisi2
-	ldr	r3, .L1267+8
+	bcs	.L1130
+	add	r3, fp, r3
+	ldrb	r4, [r3, #3764]	@ zero_extendqisi2
+	ldr	r3, .L1168+8
 	mov	r0, r4
-	ldrb	r3, [r3, #160]	@ zero_extendqisi2
+	ldrb	r3, [r3, #152]	@ zero_extendqisi2
 	cmp	r3, #0
 	moveq	r7, #0
 	bl	NandcWaitFlashReady
-	ldr	r3, [r5, #2776]
-	ldrb	r3, [r3, #19]	@ zero_extendqisi2
-	sub	r3, r3, #1
+	ldr	r3, [fp, #3624]
+	ldrb	r2, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r2, #1
 	uxtb	r3, r3
-	cmp	r3, #5
-	bhi	.L1237
-	add	r2, r5, r4
-	ldrb	r3, [r2, #2920]	@ zero_extendqisi2
-	ldrb	r2, [r2, #3760]	@ zero_extendqisi2
-	cmp	r2, r3
-	beq	.L1237
+	cmp	r3, #6
+	bhi	.L1132
+	add	r1, fp, r4
+	cmp	r2, #7
+	add	fp, fp, r4
+	ldr	r2, .L1168+4
+	ldrb	r3, [r1, #12]	@ zero_extendqisi2
+	ldreqb	r3, [r1, #20]	@ zero_extendqisi2
+	ldrb	r1, [fp, #3756]	@ zero_extendqisi2
+	cmp	r1, r3
+	beq	.L1132
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
 	mov	r0, r4
-	ldrb	r1, [r5, #2909]	@ zero_extendqisi2
-	add	r2, r5, #2912
+	add	r2, r2, #4
 	bl	HynixSetRRPara
-.L1237:
+.L1132:
 	mov	r0, r4
-	mov	fp, fp, lsr #31
+	mov	r5, r5, lsr #31
 	bl	NandcFlashCs
 	ldr	ip, [sp, #32]
+	mov	r0, r4
 	cmp	ip, #1
-	orreq	fp, fp, #1
-	str	fp, [sp, #24]
-	cmp	fp, #0
-	beq	.L1243
-	ldr	r3, .L1267+4
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	orreq	r5, r5, #1
+	str	r5, [sp, #20]
+	cmp	r5, #0
+	beq	.L1134
+	ldr	r3, .L1168+4
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1243
-	mov	r0, r4
+	beq	.L1134
 	bl	flash_enter_slc_mode
-.L1243:
-	ldr	fp, .L1267+4
-.L1266:
+	b	.L1135
+.L1134:
+	bl	flash_exit_slc_mode
+.L1135:
+	ldr	fp, .L1168+4
+.L1167:
 	ldr	r1, [sp, #44]
 	cmn	r1, #1
 	cmpeq	r4, #255
 	moveq	r3, #0
 	movne	r3, #1
 	moveq	r7, r3
-	beq	.L1239
+	beq	.L1137
 	cmp	r7, #0
-	beq	.L1240
-	ldr	r2, [fp, #4]
+	beq	.L1138
+	ldr	r2, [fp, #856]
 	mov	r0, r4
 	add	r2, r1, r2
 	bl	FlashReadDpCmd
-	b	.L1241
-.L1240:
+	b	.L1139
+.L1138:
 	mov	r0, r4
 	bl	FlashReadCmd
-.L1241:
+.L1139:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	cmp	r7, #0
-	beq	.L1239
+	beq	.L1137
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	bl	FlashReadDpDataOutCmd
-.L1239:
+.L1137:
 	ldr	r3, [r6, #12]
 	mov	r0, r4
-	ldr	r2, [sp, #20]
+	ldr	r2, [sp, #24]
 	mov	r1, #0
 	str	r3, [sp, #0]
 	ldr	r3, [r6, #8]
 	bl	NandcXferData
-	ldrb	r2, [fp, #8]	@ zero_extendqisi2
+	ldrb	r2, [fp, #860]	@ zero_extendqisi2
 	adds	r2, r2, #0
 	movne	r2, #1
 	cmn	r0, #1
@@ -10514,15 +9601,15 @@ FlashReadPages:
 	cmp	r2, #0
 	movne	r2, #0
 	movne	r7, #0
-	strneb	r2, [fp, #8]
-	bne	.L1266
-.L1242:
+	strneb	r2, [fp, #860]
+	bne	.L1167
+.L1140:
 	cmp	r7, #0
 	mov	r5, r0
-	beq	.L1244
-	ldr	r3, .L1267+4
+	beq	.L1141
+	ldr	r3, .L1168+4
 	mov	r0, r4
-	ldr	r1, [r3, #4]
+	ldr	r1, [r3, #856]
 	ldr	r3, [sp, #44]
 	str	r2, [sp, #12]
 	add	r1, r1, r3
@@ -10536,23 +9623,23 @@ FlashReadPages:
 	str	r1, [sp, #0]
 	mov	r1, r2
 	ldr	r3, [r3, #8]
-	ldr	r2, [sp, #20]
+	ldr	r2, [sp, #24]
 	bl	NandcXferData
 	cmn	r0, #1
 	mov	r8, r0
 	moveq	r7, #0
-.L1244:
+.L1141:
 	mov	r0, r4
-	ldr	fp, .L1267+4
+	ldr	fp, .L1168+4
 	bl	NandcFlashDeCs
 	ldr	ip, [sp, #36]
 	cmn	r5, #1
-	strb	ip, [fp, #8]
-	bne	.L1248
-	ldrb	r3, [fp, #3777]	@ zero_extendqisi2
+	strb	ip, [fp, #860]
+	bne	.L1145
+	ldrb	r3, [fp, #3773]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1246
-	ldr	r3, [fp, #2164]
+	beq	.L1143
+	ldr	r3, [fp, #3012]
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r7, [r3, #304]
@@ -10563,74 +9650,96 @@ FlashReadPages:
 	bl	FlashDdrTunningRead
 	cmn	r0, #1
 	mov	r5, r0
-	beq	.L1247
-	ldrb	r3, [fp, #3836]	@ zero_extendqisi2
+	beq	.L1144
+	ldrb	r3, [fp, #3832]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1262
-.L1247:
+	bls	.L1161
+.L1144:
 	ubfx	r0, r7, #8, #8
 	bl	NandcSetDdrPara
 	cmn	r5, #1
-	bne	.L1262
-.L1246:
-	ldr	r3, .L1267+8
+	bne	.L1161
+.L1143:
+	ldr	r3, .L1168+8
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r6, #8]
-	ldr	r7, [r3, #164]
+	ldr	r7, [r3, #148]
 	ldr	r3, [r6, #12]
 	cmp	r7, #0
-	beq	.L1249
+	beq	.L1146
 	blx	r7
 	cmn	r0, #1
 	mov	r5, r0
-	bne	.L1263
-	ldr	r2, .L1267+4
-	ldr	r3, [r2, #2776]
+	bne	.L1163
+	ldr	r2, .L1168+4
+	ldr	r3, [r2, #3624]
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
-	cmp	r3, #5
-	bhi	.L1251
-	ldrb	r1, [r2, #2909]	@ zero_extendqisi2
+	cmp	r3, #6
+	bhi	.L1148
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
 	mov	r0, r4
-	add	r2, r2, #2912
+	add	r2, r2, #4
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L1251:
+.L1148:
 	ldr	r1, [sp, #44]
 	mov	r0, r4
 	ldr	r2, [r6, #8]
 	ldr	r3, [r6, #12]
 	bl	FlashReadRawPage
-	ldr	r3, .L1267+4
+	ldr	r7, .L1168+4
 	ldr	r1, [r6, #4]
-	ldrb	r2, [r3, #3836]	@ zero_extendqisi2
+	ldrb	r2, [r7, #3832]	@ zero_extendqisi2
 	mov	r5, r0
-	ldr	r0, .L1267+12
+	ldr	r0, .L1168+12
 	mov	r3, r5
 	bl	printk
-	b	.L1263
-.L1249:
+	cmn	r5, #1
+	bne	.L1163
+	ldrb	r7, [r7, #928]	@ zero_extendqisi2
+	cmp	r7, #0
+	beq	.L1147
+	ldr	ip, [sp, #20]
+	mov	r0, r4
+	cmp	ip, #0
+	beq	.L1149
+	bl	flash_enter_slc_mode
+	b	.L1150
+.L1149:
+	bl	flash_exit_slc_mode
+.L1150:
+	ldr	r3, .L1168+8
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r6, #8]
+	ldr	ip, [r3, #148]
+	ldr	r3, [r6, #12]
+	blx	ip
+	mov	r5, r0
+	b	.L1163
+.L1146:
 	bl	FlashReadRawPage
 	mov	r5, r0
-	b	.L1250
-.L1262:
+	b	.L1147
+.L1161:
 	mov	r7, #0
-.L1248:
-	ldr	r3, .L1267+4
-	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
+.L1145:
+	ldr	r3, .L1168+4
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r5, r3, lsr #2
-	bls	.L1250
-	ldr	r3, .L1267+8
-	ldr	r3, [r3, #164]
+	bls	.L1147
+	ldr	r3, .L1168+8
+	ldr	r3, [r3, #148]
 	cmp	r3, #0
 	moveq	r5, #256
-	b	.L1250
-.L1263:
+	b	.L1147
+.L1163:
 	mov	r7, #0
-.L1250:
+.L1147:
 	ldr	ip, [sp, #16]
 	cmp	r5, #256
 	cmnne	r5, #1
@@ -10640,32 +9749,32 @@ FlashReadPages:
 	ldr	ip, [sp, #16]
 	ldr	r3, [r9, ip]
 	cmn	r3, #1
-	bne	.L1253
-	ldr	r2, .L1267+4
+	bne	.L1152
+	ldr	r2, .L1168+4
 	ldr	r1, [r6, #4]
-	ldr	r0, .L1267+16
-	ldrb	r2, [r2, #3836]	@ zero_extendqisi2
+	ldr	r0, .L1168+16
+	ldrb	r2, [r2, #3832]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r6, #12]
 	cmp	r1, #0
-	beq	.L1253
+	beq	.L1152
 	mov	r2, #4
-	ldr	r0, .L1267+20
+	ldr	r0, .L1168+20
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1253:
+.L1152:
 	cmp	r7, #0
-	beq	.L1254
-	ldr	r3, .L1267+4
-	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
+	beq	.L1153
+	ldr	r3, .L1168+4
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r8, r3, lsr #2
-	bls	.L1255
-	ldr	r3, .L1267+8
-	ldr	r3, [r3, #164]
+	bls	.L1154
+	ldr	r3, .L1168+8
+	ldr	r3, [r3, #148]
 	cmp	r3, #0
 	moveq	r8, #256
-.L1255:
+.L1154:
 	add	r3, sl, #1
 	mov	r2, #36
 	cmp	r8, #256
@@ -10674,30 +9783,30 @@ FlashReadPages:
 	movne	r2, #0
 	str	r8, [r9, r3]
 	strne	r2, [r9, r3]
-.L1254:
-	ldr	ip, [sp, #24]
+.L1153:
+	ldr	ip, [sp, #20]
 	add	sl, sl, r7
 	cmp	ip, #0
-	beq	.L1235
-	ldr	r3, .L1267+4
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	beq	.L1130
+	ldr	r3, .L1168+4
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1235
+	beq	.L1130
 	mov	r0, r4
 	bl	flash_exit_slc_mode
-.L1235:
+.L1130:
 	add	sl, sl, #1
-.L1232:
+.L1127:
 	ldr	ip, [sp, #28]
 	cmp	sl, ip
-	bcc	.L1256
+	bcc	.L1155
 	mov	r0, #0
-.L1233:
+.L1128:
 	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1268:
+.L1169:
 	.align	2
-.L1267:
+.L1168:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -10711,184 +9820,197 @@ FlashReadPages:
 	.type	FtlGcScanTempBlk, %function
 FtlGcScanTempBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1295
-	movw	r3, #3000
+	ldr	r2, .L1197
+	movw	r3, #2936
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.pad #20
-	sub	sp, sp, #20
+	.pad #28
+	sub	sp, sp, #28
 	ldrh	r4, [r2, r3]
 	movw	r3, #65535
 	mov	r5, r0
-	str	r1, [sp, #12]
+	str	r1, [sp, #16]
 	cmp	r4, r3
-	beq	.L1288
+	beq	.L1190
 	cmp	r4, #0
-	bne	.L1270
-	b	.L1271
-.L1288:
+	bne	.L1171
+	b	.L1172
+.L1190:
 	mov	r4, #0
-.L1270:
-	ldr	r2, .L1295+4
-	movw	r3, #3912
-	ldr	fp, [sp, #12]
+.L1171:
+	ldr	r2, .L1197+4
+	movw	r3, #3908
+	ldr	fp, [sp, #16]
 	ldrh	r3, [r2, r3]
 	cmp	fp, r3
-	bne	.L1272
-.L1271:
+	bne	.L1173
+.L1172:
 	bl	FtlGcPageVarInit
-.L1272:
-	mvn	r8, #0
-	mov	r7, #0
-	movw	sl, #65535
-.L1283:
-	ldrh	r3, [r5, #0]
-	mov	r0, #0
-	strb	r0, [r5, #8]
-	cmp	r3, sl
-	beq	.L1289
-.L1274:
-.L1292:
-	ldr	r3, .L1295+4
-	movw	r2, #3844
-	ldrh	r9, [r3, r2]
-	ldr	r2, .L1295+8
-	ldr	lr, [r2, #-984]
-	ldr	ip, [r2, #-1164]
-	movw	r2, #3924
+.L1173:
+	ldr	r6, .L1197+8
+	mov	r8, #0
+	mvn	sl, #0
+	mov	r9, r8
+.L1185:
+	ldrh	r2, [r5, #0]
+	movw	r3, #65535
+	strb	r9, [r5, #8]
+	cmp	r2, r3
+	beq	.L1191
+.L1175:
+	mov	r7, r5
+.L1194:
+	ldr	r3, .L1197+4
+	mov	r2, #3840
+	ldr	r0, [r6, #-1168]
+	ldr	ip, [r6, #-988]
+	ldrh	lr, [r3, r2]
+	mov	r2, #3920
 	ldrh	r2, [r3, r2]
 	mov	r3, #0
-	mov	r6, r3
-	str	r2, [sp, #8]
-	mov	r2, r5
-	b	.L1275
-.L1277:
+	str	r0, [sp, #12]
+	mov	r5, r3
+	str	r2, [sp, #20]
+	mov	r2, r7
+	b	.L1176
+.L1178:
 	ldrh	r0, [r2, #16]
-	cmp	r0, sl
-	beq	.L1276
+	movw	r1, #65535
+	cmp	r0, r1
+	beq	.L1177
 	mov	fp, #36
 	orr	r0, r4, r0, asl #10
-	mla	r1, fp, r6, lr
-	ldr	fp, [sp, #8]
-	str	r0, [r1, #4]
-	mov	r0, #0
-	str	r0, [r1, #8]
-	mul	r0, fp, r6
-	add	r6, r6, #1
-	uxth	r6, r6
+	mla	r1, fp, r5, ip
+	ldr	fp, [sp, #20]
+	stmib	r1, {r0, r9}
+	mul	r0, fp, r5
+	add	r5, r5, #1
+	uxth	r5, r5
 	add	fp, r0, #3
 	cmp	r0, #0
 	movlt	r0, fp
+	ldr	fp, [sp, #12]
 	bic	r0, r0, #3
-	add	r0, ip, r0
+	add	r0, fp, r0
 	str	r0, [r1, #12]
-.L1276:
+.L1177:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	uxth	r3, r3
-.L1275:
-	cmp	r3, r9
-	bne	.L1277
-	ldr	r9, .L1295+8
-	mov	r1, r6
+.L1176:
+	cmp	r3, lr
+	bne	.L1178
+	mov	r1, r5
+	ldr	r0, [r6, #-988]
 	mov	r2, #0
-	ldr	r0, [r9, #-984]
 	bl	FlashReadPages
 	mov	r3, #36
-	mul	r3, r3, r6
-	mov	r6, #0
-	str	r3, [sp, #8]
-	b	.L1278
-.L1284:
-	ldr	fp, .L1295+8
-	ldr	r1, [fp, #-984]
-	add	r3, r1, r6
-	ldr	r9, [r3, #4]
-	stmia	sp, {r1, r3}
-	ubfx	r0, r9, #10, #16
+	mul	r3, r3, r5
+	mov	r5, #0
+	str	r3, [sp, #12]
+	b	.L1179
+.L1186:
+	ldr	r3, [r6, #-988]
+	ldr	ip, .L1197+8
+	add	r1, r3, r5
+	ldr	fp, [r1, #4]
+	stmia	sp, {r3, ip}
+	ubfx	r0, fp, #10, #16
+	str	r1, [sp, #8]
 	bl	P2V_plane
-	ldr	r1, [sp, #0]
-	ldr	r3, [sp, #4]
-	ldr	r1, [r1, r6]
-	cmp	r1, #0
+	ldr	r3, [sp, #0]
+	ldr	ip, [sp, #4]
+	ldr	r1, [sp, #8]
+	ldr	r3, [r3, r5]
+	cmp	r3, #0
 	mov	r2, r0
-	bne	.L1279
-	ldr	r3, [r3, #12]
-	add	r6, r6, #36
+	mov	r0, ip
+	bne	.L1180
+	ldr	r3, [r1, #12]
+	movw	r0, #65535
+	add	r5, r5, #36
 	ldrh	r1, [r3, #0]
-	cmp	r1, sl
+	cmp	r1, r0
 	moveq	r3, #1
-	streq	r3, [fp, #-1016]
-	beq	.L1273
-.L1280:
+	moveq	r5, r7
+	streq	r3, [ip, #-1020]
+	beq	.L1174
+.L1181:
 	ldr	r0, [r3, #12]
-	mov	r1, r9
+	mov	r1, fp
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-	b	.L1278
-.L1279:
-	ldr	r3, [fp, #-1884]
-	cmp	r3, #0
-	beq	.L1281
-	ldrh	r3, [r5, #0]
-	ldr	r2, [fp, #-2084]
-	mov	r3, r3, asl #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #119
-	movls	r8, r9
-	bls	.L1282
-.L1281:
-	cmn	r1, #1
-	moveq	r8, r9
-.L1282:
-	ldr	r2, .L1295+8
-	mov	r0, #0	@ movhi
+	b	.L1179
+.L1180:
+	ldr	r1, .L1197+8
+	mov	r5, r7
+	ldr	r2, [r1, #-1888]
+	cmp	r2, #0
+	bne	.L1182
+	ldr	r2, .L1197+4
+	ldrb	r2, [r2, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1183
+.L1182:
+	ldrh	r2, [r5, #0]
+	ldr	r1, [r0, #-2088]
+	mov	r2, r2, asl #1
+	ldrh	r2, [r1, r2]
+	cmp	r2, #119
+	movls	sl, fp
+	bls	.L1184
+.L1183:
+	cmn	r3, #1
+	moveq	sl, fp
+.L1184:
 	ldrh	r3, [r5, #0]
 	mov	r4, #0
-	ldr	r2, [r2, #-2064]
+	ldr	r2, [r6, #-2068]
 	mov	r3, r3, asl #1
-	strh	r0, [r2, r3]	@ movhi
+	strh	r9, [r2, r3]	@ movhi
 	ldrh	r0, [r5, #0]
 	bl	INSERT_FREE_LIST
 	mvn	r3, #0
 	strh	r3, [r5, #0]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1283
-.L1278:
-	ldr	r3, [sp, #8]
-	cmp	r6, r3
-	bne	.L1284
-	ldr	fp, [sp, #12]
-	add	r7, r7, #1
+	b	.L1185
+.L1179:
+	ldr	r3, [sp, #12]
+	cmp	r5, r3
+	bne	.L1186
+	ldr	fp, [sp, #16]
+	add	r8, r8, #1
 	add	r4, r4, #1
-	cmp	r7, fp
+	cmp	r8, fp
 	uxth	r4, r4
-	bcc	.L1285
-	ldr	r2, .L1295
-	movw	r3, #3000
+	bcc	.L1187
+	ldr	r2, .L1197
+	movw	r3, #2936
+	movw	r0, #65535
 	ldrh	r1, [r2, r3]
-	cmp	r1, sl
-	beq	.L1285
-	add	r1, r1, r7
+	cmp	r1, r0
+	beq	.L1187
+	add	r1, r1, r8
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r2, .L1295+4
-	add	r3, r3, #912
+	ldr	r2, .L1197+4
+	add	r3, r3, #972
 	ldrh	r3, [r2, r3]
 	cmp	r3, r4
-	bhi	.L1286
-.L1285:
-	ldr	r2, .L1295+4
-	movw	r3, #3912
+	bhi	.L1188
+.L1187:
+	ldr	r2, .L1197+4
+	movw	r3, #3908
 	ldrh	r3, [r2, r3]
 	cmp	r3, r4
-	bhi	.L1292
-.L1289:
+	bhi	.L1194
+	mov	r5, r7
+.L1191:
 	mov	r2, #0
-.L1273:
-	ldr	r1, .L1295
-	movw	r3, #3000
+.L1174:
+	ldr	r1, .L1197
+	movw	r3, #2936
 	mvn	r0, #0
 	strh	r4, [r5, #2]	@ movhi
 	strb	r2, [r5, #6]
@@ -10896,13 +10018,13 @@ FtlGcScanTempBlk:
 	mov	r0, r5
 	mov	r1, r4
 	bl	ftl_sb_update_avl_pages
-.L1286:
-	mov	r0, r8
-	add	sp, sp, #20
+.L1188:
+	mov	r0, sl
+	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1296:
+.L1198:
 	.align	2
-.L1295:
+.L1197:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -10918,424 +10040,434 @@ FtlScanSysBlk:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r6, #0
-	ldr	r5, .L1355
+	ldr	r5, .L1258
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L1355+4
+	ldr	r4, .L1258+4
 	mov	r1, r6
-	ldr	r3, .L1355+8
-	movw	r7, #3932
-	ldr	r2, [r5, #3940]
-	ldr	r0, [r4, #-1040]
+	ldr	r3, .L1258+8
+	movw	r7, #3928
+	ldr	r2, [r5, #3936]
+	ldr	r0, [r4, #-1044]
 	mov	sl, r4
 	strh	r6, [r4, r3]	@ movhi
-	movw	r3, #3956
+	mov	r3, #3952
 	strh	r6, [r5, r3]	@ movhi
 	mov	r2, r2, asl #2
 	bl	ftl_memset
-	ldr	r2, [r5, #3940]
+	ldr	r2, [r5, #3936]
 	mov	r1, r6
-	ldr	r0, [r4, #-1044]
+	ldr	r0, [r4, #-1048]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r2, [r5, r7]
 	mov	r1, r6
-	ldr	r0, [r4, #-924]
+	ldr	r0, [r4, #-928]
 	mov	r2, r2, asl #2
 	bl	ftl_memset
 	ldrh	r2, [r5, r7]
 	mov	r1, r6
-	ldr	r0, [r5, #3960]
+	ldr	r0, [r5, #3956]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
-	ldr	r0, .L1355+12
+	ldr	r0, .L1258+12
 	mov	r1, #255
 	mov	r2, #12
 	bl	ftl_memset
-	movw	r3, #3852
+	movw	r3, #3848
 	ldrh	r3, [r5, r3]
 	str	r3, [sp, #8]
-	b	.L1298
-.L1300:
+	b	.L1200
+.L1202:
 	add	r3, r6, r5
 	ldr	r1, [sp, #8]
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
 	str	r0, [sp, #0]
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #0]
 	cmp	r0, #0
-	bne	.L1299
-	ldr	r2, [r4, #-984]
+	bne	.L1201
+	ldr	r2, [r4, #-988]
 	mov	r3, r3, asl #10
 	mla	r2, r9, r7, r2
 	str	r3, [r2, #4]
+	ldr	r3, [r4, #-1172]
+	str	r3, [r2, #8]
 	ldrh	r3, [r6, r8]
-	str	r0, [r2, #8]
 	mul	r3, r3, r7
 	add	r7, r7, #1
 	uxth	r7, r7
 	add	r1, r3, #3
 	cmp	r3, #0
 	movlt	r3, r1
-	ldr	r1, [r4, #-1164]
+	ldr	r1, [r4, #-1168]
 	bic	r3, r3, #3
 	add	r3, r1, r3
 	str	r3, [r2, #12]
-.L1299:
+.L1201:
 	add	r5, r5, #1
 	uxth	r5, r5
-	b	.L1336
-.L1349:
+	b	.L1235
+.L1248:
 	mov	r7, #0
-	movw	fp, #3844
+	mov	fp, #3840
 	mov	r5, r7
 	mov	r9, #36
-	movw	r8, #3924
-.L1336:
+	mov	r8, #3920
+.L1235:
 	ldrh	r3, [r6, fp]
 	cmp	r3, r5
-	bhi	.L1300
-	ldr	r0, [r4, #-984]
+	bhi	.L1202
+	cmp	r7, #0
+	beq	.L1203
+	ldr	r0, [r4, #-988]
 	mov	r1, r7
 	mov	r2, #1
-	mov	r8, #0
-	bl	FlashReadPages
 	mov	fp, r7
+	bl	FlashReadPages
+	mov	r8, #0
 	str	r8, [sp, #12]
-	b	.L1301
-.L1335:
-	ldr	r2, [r4, #-984]
-	add	r0, r2, r8
-	ldr	r7, [r2, r8]
-	ldr	r3, [r0, #4]
-	cmn	r7, #1
-	ldr	r5, [r0, #12]
-	ubfx	r6, r3, #10, #16
-	bne	.L1302
+.L1234:
+	ldr	r3, [r4, #-988]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	ldr	r6, [r2, #4]
+	cmn	r3, #1
+	ldr	r5, [r2, #12]
+	ubfx	r6, r6, #10, #16
+	bne	.L1204
+	mov	r7, #16
+.L1206:
+	ldr	r0, [r4, #-988]
 	mov	r1, #1
-	add	r3, r3, #1
 	mov	r2, r1
+	add	r0, r0, r8
+	ldr	r3, [r0, #4]
+	add	r3, r3, #1
 	str	r3, [r0, #4]
 	bl	FlashReadPages
 	ldrh	r3, [r5, #0]
-	movw	r0, #65535
-	cmp	r3, r0
-	ldreq	r3, [r4, #-984]
-	streq	r7, [r3, r8]
-.L1302:
-	ldr	r3, [r4, #-984]
+	movw	r1, #65535
+	cmp	r3, r1
+	ldreq	r3, [sl, #-988]
+	mvneq	r2, #0
+	streq	r2, [r3, r8]
+	beq	.L1204
+.L1205:
+	ldr	r3, [r4, #-988]
 	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	beq	.L1303
-	ldr	r2, [r4, #-1848]
+	bne	.L1204
+	sub	r7, r7, #1
+	uxth	r7, r7
+	cmp	r7, #0
+	bne	.L1206
+.L1204:
+	ldr	r3, [r4, #-988]
+	ldr	r3, [r3, r8]
+	cmn	r3, #1
+	beq	.L1207
+	ldr	r2, [r4, #-1852]
 	ldr	r3, [r5, #4]
 	cmn	r2, #1
-	beq	.L1304
+	beq	.L1208
 	cmp	r2, r3
-	bhi	.L1305
-.L1304:
+	bhi	.L1209
+.L1208:
 	cmn	r3, #1
 	addne	r3, r3, #1
-	strne	r3, [sl, #-1848]
-.L1305:
+	strne	r3, [sl, #-1852]
+.L1209:
 	ldrh	r3, [r5, #0]
 	movw	r2, #61604
 	cmp	r3, r2
-	beq	.L1308
-	bhi	.L1311
+	beq	.L1212
+	bhi	.L1215
 	movw	r2, #61574
 	cmp	r3, r2
-	bne	.L1306
-	b	.L1353
-.L1311:
+	bne	.L1210
+	b	.L1256
+.L1215:
 	movw	r2, #61634
 	cmp	r3, r2
-	beq	.L1309
-	movw	r1, #65535
-	cmp	r3, r1
-	bne	.L1306
-	b	.L1354
-.L1309:
-	ldr	r3, .L1355
-	ldr	r1, [r4, #-1040]
-	ldr	r2, [r3, #3940]
-	ldr	r3, .L1355+8
-	uxth	r0, r2
-	ldrh	r3, [r4, r3]
-	sub	r7, r0, #1
-	rsb	r0, r3, r0
-	uxth	r7, r7
-	sub	r0, r0, #1
-	sxth	r0, r0
-	str	r0, [sp, #4]
-	b	.L1312
-.L1320:
-	mov	ip, r9, asl #2
-	ldr	r0, [r1, r9, asl #2]
-	str	ip, [sp, #16]
-	ldr	ip, [r5, #4]
-	cmp	ip, r0
-	bls	.L1313
-	ldr	r1, [r1, #0]
-	cmp	r1, #0
-	bne	.L1314
-	cmp	r3, r2
-	bne	.L1315
-.L1314:
-	ldr	r3, [r4, #-1044]
-	mov	r1, #1
-	ldrh	r0, [r3, #0]
-	bl	FtlFreeSysBlkQueueIn
-	b	.L1316
-.L1315:
-	ldr	r2, .L1355+8
-	add	r3, r3, #1
-	strh	r3, [r4, r2]	@ movhi
-.L1316:
-	sxth	ip, r7
-	mov	r2, #0
-	str	ip, [sp, #4]
-	b	.L1317
-.L1318:
-	ldr	r0, [r4, #-1040]
-	add	r1, r3, #1
-	add	r2, r2, #1
-	ldr	ip, [r0, r1, asl #2]
-	mov	r1, r1, asl #1
-	uxth	r2, r2
-	str	ip, [r0, r3, asl #2]
-	mov	r3, r3, asl #1
-	ldr	r0, [r4, #-1044]
-	ldrh	r1, [r0, r1]
-	strh	r1, [r0, r3]	@ movhi
-.L1317:
-	ldr	r0, [sp, #4]
-	sxth	r3, r2
-	cmp	r3, r0
-	bne	.L1318
-	ldr	r3, [sl, #-1040]
-	mov	r9, r9, asl #1
-	ldr	r2, [r5, #4]
-	ldr	ip, [sp, #16]
-	str	r2, [r3, ip]
-	ldr	r3, [sl, #-1044]
-	strh	r6, [r3, r9]	@ movhi
-	b	.L1319
-.L1313:
-	sub	r7, r7, #1
-	uxth	r7, r7
-.L1312:
-	ldr	r0, [sp, #4]
-	sxth	r9, r7
-	cmp	r9, r0
-	bgt	.L1320
-.L1319:
-	sxth	r7, r7
-	cmp	r7, #0
-	blt	.L1303
-.L1321:
-	ldr	r3, .L1355+8
-	ldr	r1, .L1355
-	ldrh	r2, [r4, r3]
-	ldr	r1, [r1, #3940]
-	rsb	r1, r2, r1
-	sub	r1, r1, #1
-	sxth	r1, r1
-	cmp	r7, r1
-	bgt	.L1306
-	add	r2, r2, #1
-	strh	r2, [r4, r3]	@ movhi
-	ldr	r3, [r4, #-1040]
-	ldr	r2, [r5, #4]
-	str	r2, [r3, r7, asl #2]
-	mov	r7, r7, asl #1
-	ldr	r3, [r4, #-1044]
-	b	.L1351
-.L1353:
-	ldr	r3, .L1355
-	movw	r2, #3932
-	movw	r0, #3956
-	ldrh	r2, [r3, r2]
-	ldrh	r3, [r3, r0]
-	sub	r1, r2, #1
-	uxth	r7, r1
-	rsb	r1, r3, r1
-	str	r1, [sp, #4]
-	ldr	r1, [r4, #-924]
-	b	.L1322
-.L1330:
-	mov	ip, r9, asl #2
-	ldr	r0, [r1, r9, asl #2]
-	str	ip, [sp, #16]
-	ldr	ip, [r5, #4]
-	cmp	ip, r0
-	bls	.L1323
-	ldr	r1, [r1, #0]
-	cmp	r1, #0
-	ldr	r1, .L1355
-	bne	.L1324
+	beq	.L1213
+	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1325
-.L1324:
-	ldr	r3, [r1, #3960]
-	mov	r1, #1
-	ldrh	r0, [r3, #0]
-	bl	FtlFreeSysBlkQueueIn
-	b	.L1326
-.L1325:
-	movw	r2, #3956
-	add	r3, r3, #1
-	strh	r3, [r1, r2]	@ movhi
-.L1326:
-	sxth	r0, r7
-	mov	r2, #0
-	str	r0, [sp, #20]
-	ldr	ip, .L1355
-	str	r5, [sp, #4]
-	b	.L1327
-.L1328:
-	ldr	r0, [r4, #-924]
-	add	r1, r3, #1
-	add	r2, r2, #1
-	ldr	r5, [r0, r1, asl #2]
+	bne	.L1210
+	b	.L1257
+.L1213:
+	ldr	r3, .L1258
+	mov	r9, r6
+	ldr	r1, .L1258+8
+	ldr	ip, [r4, #-1044]
+	ldr	r0, [r3, #3936]
+	ldrh	r1, [r4, r1]
+	uxth	r2, r0
+	sub	r3, r2, #1
+	rsb	r2, r1, r2
+	sub	r2, r2, #1
+	uxth	r3, r3
+	sxth	r2, r2
+	str	r2, [sp, #4]
+	b	.L1216
+.L1222:
+	mov	r6, r2, asl #2
+	ldr	r7, [r5, #4]
+	str	r6, [sp, #16]
+	ldr	r6, [ip, r2, asl #2]
+	cmp	r7, r6
+	bls	.L1217
+	ldr	ip, [ip, #0]
+	mov	r6, r9
+	cmp	ip, #0
+	bne	.L1218
+	cmp	r1, r0
+	addne	r1, r1, #1
+	ldrne	r0, .L1258+8
+	strneh	r1, [r4, r0]	@ movhi
+.L1218:
+	mov	r0, #0
+	sxth	r9, r3
+	str	r3, [sp, #4]
+	b	.L1219
+.L1220:
+	ldr	r7, [r4, #-1044]
+	add	ip, r1, #1
+	add	r0, r0, #1
+	ldr	r3, [r7, ip, asl #2]
+	mov	ip, ip, asl #1
+	uxth	r0, r0
+	str	r3, [r7, r1, asl #2]
 	mov	r1, r1, asl #1
-	uxth	r2, r2
-	str	r5, [r0, r3, asl #2]
-	mov	r3, r3, asl #1
-	ldr	r0, [ip, #3960]
-	ldrh	r1, [r0, r1]
-	strh	r1, [r0, r3]	@ movhi
-.L1327:
-	ldr	r0, [sp, #20]
-	sxth	r3, r2
-	cmp	r3, r0
-	bne	.L1328
-	ldr	r5, [sp, #4]
-	mov	r9, r9, asl #1
-	ldr	r3, [sl, #-924]
+	ldr	r7, [r4, #-1048]
+	ldrh	ip, [r7, ip]
+	strh	ip, [r7, r1]	@ movhi
+.L1219:
+	sxth	r1, r0
+	cmp	r1, r9
+	bne	.L1220
+	ldr	r1, [sl, #-1044]
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #4]
 	ldr	ip, [sp, #16]
-	ldr	r2, [r5, #4]
-	str	r2, [r3, ip]
-	ldr	r3, .L1355
-	ldr	r3, [r3, #3960]
-	strh	r6, [r3, r9]	@ movhi
-	b	.L1329
-.L1323:
-	sub	r7, r7, #1
-	uxth	r7, r7
-.L1322:
-	ldr	r0, [sp, #4]
-	sxth	r9, r7
-	cmp	r9, r0
-	bgt	.L1330
-.L1329:
-	sxth	r7, r7
-	cmp	r7, #0
-	blt	.L1303
-.L1331:
-	ldr	r3, .L1355
-	movw	r0, #3932
-	movw	r2, #3956
-	ldrh	r0, [r3, r0]
-	ldrh	r1, [r3, r2]
-	sub	r0, r0, #1
+	ldr	r3, [sp, #4]
+	str	r0, [r1, ip]
+	ldr	r1, [sl, #-1048]
+	strh	r6, [r1, r2]	@ movhi
+	b	.L1221
+.L1217:
+	sub	r3, r3, #1
+	uxth	r3, r3
+.L1216:
+	ldr	r6, [sp, #4]
+	sxth	r2, r3
+	cmp	r2, r6
+	bgt	.L1222
+	mov	r6, r9
+.L1221:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L1210
+	ldr	r2, .L1258+8
+	ldr	r0, .L1258
+	ldrh	r1, [r4, r2]
+	ldr	r0, [r0, #3936]
 	rsb	r0, r1, r0
+	sub	r0, r0, #1
 	sxth	r0, r0
-	cmp	r7, r0
-	bgt	.L1306
+	cmp	r3, r0
+	bgt	.L1210
 	add	r1, r1, #1
-	strh	r1, [r3, r2]	@ movhi
+	strh	r1, [r4, r2]	@ movhi
+	ldr	r2, [r4, #-1044]
 	ldr	r1, [r5, #4]
-	ldr	r2, [r4, #-924]
-	str	r1, [r2, r7, asl #2]
-	mov	r7, r7, asl #1
-	ldr	r3, [r3, #3960]
-.L1351:
-	strh	r6, [r3, r7]	@ movhi
-	b	.L1306
-.L1308:
-	ldr	r3, .L1355+16
-	movw	r1, #65535
+	str	r1, [r2, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r4, #-1048]
+	b	.L1253
+.L1256:
+	ldr	r1, .L1258
+	movw	r3, #3928
+	mov	ip, #3952
+	mov	r9, r6
+	ldrh	r0, [r1, r3]
+	ldrh	r1, [r1, ip]
+	sub	r2, r0, #1
+	ldr	ip, [r4, #-928]
+	uxth	r3, r2
+	rsb	r2, r1, r2
+	str	r2, [sp, #4]
+	b	.L1223
+.L1229:
+	mov	r6, r2, asl #2
+	ldr	r7, [r5, #4]
+	str	r6, [sp, #16]
+	ldr	r6, [ip, r2, asl #2]
+	cmp	r7, r6
+	bls	.L1224
+	ldr	ip, [ip, #0]
+	mov	r6, r9
+	cmp	ip, #0
+	bne	.L1225
+	cmp	r1, r0
+	addne	r1, r1, #1
+	ldrne	ip, .L1258
+	movne	r0, #3952
+	strneh	r1, [ip, r0]	@ movhi
+.L1225:
+	sxth	ip, r3
+	mov	r0, #0
+	str	ip, [sp, #20]
+	ldr	r9, .L1258
+	str	r3, [sp, #4]
+	b	.L1226
+.L1227:
+	ldr	r7, [r4, #-928]
+	add	ip, r1, #1
+	add	r0, r0, #1
+	ldr	r3, [r7, ip, asl #2]
+	mov	ip, ip, asl #1
+	uxth	r0, r0
+	str	r3, [r7, r1, asl #2]
+	mov	r1, r1, asl #1
+	ldr	r7, [r9, #3956]
+	ldrh	ip, [r7, ip]
+	strh	ip, [r7, r1]	@ movhi
+.L1226:
+	ldr	ip, [sp, #20]
+	sxth	r1, r0
+	cmp	r1, ip
+	bne	.L1227
+	ldr	r1, [sl, #-928]
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #4]
+	ldr	ip, [sp, #16]
+	ldr	r3, [sp, #4]
+	str	r0, [r1, ip]
+	ldr	r1, .L1258
+	ldr	r1, [r1, #3956]
+	strh	r6, [r1, r2]	@ movhi
+	b	.L1228
+.L1224:
+	sub	r3, r3, #1
+	uxth	r3, r3
+.L1223:
+	ldr	r6, [sp, #4]
+	sxth	r2, r3
+	cmp	r2, r6
+	bgt	.L1229
+	mov	r6, r9
+.L1228:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L1210
+	ldr	r2, .L1258
+	movw	ip, #3928
+	mov	r1, #3952
+	ldrh	ip, [r2, ip]
+	ldrh	r0, [r2, r1]
+	sub	ip, ip, #1
+	rsb	ip, r0, ip
+	sxth	ip, ip
+	cmp	r3, ip
+	bgt	.L1210
+	add	r0, r0, #1
+	strh	r0, [r2, r1]	@ movhi
+	ldr	r0, [r5, #4]
+	ldr	r1, [r4, #-928]
+	str	r0, [r1, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r2, #3956]
+.L1253:
+	strh	r6, [r2, r3]	@ movhi
+	b	.L1210
+.L1212:
+	ldr	r3, .L1258+16
+	movw	ip, #65535
 	ldrh	r2, [r4, r3]
-	cmp	r2, r1
+	cmp	r2, ip
 	streqh	r6, [r4, r3]	@ movhi
-	beq	.L1352
-	ldr	r3, .L1355+20
-	movw	r2, #65535
+	beq	.L1254
+	ldr	r3, .L1258+20
+	movw	r1, #65535
 	ldrh	r0, [r4, r3]
-	cmp	r0, r2
-	beq	.L1333
+	cmp	r0, r1
+	beq	.L1231
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L1333:
+.L1231:
 	ldr	r3, [r5, #4]
-	ldr	r2, [sl, #-1760]
+	ldr	r2, [sl, #-1764]
 	cmp	r2, r3
-	ldr	r3, .L1355+20
+	ldr	r3, .L1258+20
 	strcsh	r6, [r4, r3]	@ movhi
-	bcs	.L1306
-	ldr	r2, .L1355+16
+	bcs	.L1210
+	ldr	r2, .L1258+16
 	ldrh	r1, [r4, r2]
 	strh	r6, [r4, r2]	@ movhi
 	strh	r1, [r4, r3]	@ movhi
-.L1352:
+.L1254:
 	ldr	r3, [r5, #4]
-	str	r3, [r4, #-1760]
-	b	.L1306
-.L1354:
+	str	r3, [r4, #-1764]
+	b	.L1210
+.L1257:
 	mov	r0, r6
-	mov	r1, #0
-	b	.L1350
-.L1303:
+	b	.L1255
+.L1207:
+	ldr	r3, .L1258
 	mov	r0, r6
-	mov	r1, #1
-.L1350:
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r1, #1
+	beq	.L1252
+.L1255:
+	mov	r1, #0
+.L1252:
 	bl	FtlFreeSysBlkQueueIn
-.L1306:
-	ldr	r5, [sp, #12]
+.L1210:
+	ldr	r6, [sp, #12]
 	add	r8, r8, #36
-	add	r3, r5, #1
+	add	r3, r6, #1
 	uxth	r3, r3
 	str	r3, [sp, #12]
-.L1301:
-	ldr	ip, [sp, #12]
-	cmp	ip, fp
-	bne	.L1335
-	ldr	r5, [sp, #8]
-	add	r3, r5, #1
+	cmp	r3, fp
+	bne	.L1234
+.L1203:
+	ldr	ip, [sp, #8]
+	add	r3, ip, #1
 	uxth	r3, r3
 	str	r3, [sp, #8]
-.L1298:
-	ldr	r6, .L1355
-	movw	r3, #3854
+.L1200:
+	ldr	r6, .L1258
+	movw	r3, #3850
 	ldr	ip, [sp, #8]
 	ldrh	r3, [r6, r3]
 	cmp	r3, ip
-	bhi	.L1349
-	ldr	r1, .L1355+4
-	ldr	r2, [r1, #-1044]
+	bhi	.L1248
+	ldr	r1, .L1258+4
+	ldr	r2, [r1, #-1048]
 	ldrh	r3, [r2, #0]
 	cmp	r3, #0
-	bne	.L1337
-	ldr	r0, .L1355+8
+	bne	.L1236
+	ldr	r0, .L1258+8
 	ldrh	r1, [r1, r0]
 	cmp	r1, #0
-	ldrne	r0, [r6, #3940]
-	bne	.L1338
-	b	.L1337
-.L1342:
+	ldrne	r0, [r6, #3936]
+	bne	.L1237
+	b	.L1236
+.L1241:
 	mov	r1, r1, asl #1
 	ldrh	r1, [r2, r1]
 	cmp	r1, #0
-	beq	.L1339
-	ldr	r7, .L1355
+	beq	.L1238
+	ldr	r7, .L1258
 	sxth	r6, r3
-	ldr	r1, .L1355+4
+	ldr	r1, .L1258+4
 	mov	r5, #0
-	b	.L1340
-.L1341:
-	ldr	ip, [r1, #-1044]
+	b	.L1239
+.L1240:
+	ldr	ip, [r1, #-1048]
 	mov	r0, r2, asl #1
 	rsb	r4, r6, r2
 	add	r3, r3, #1
@@ -11343,49 +10475,49 @@ FtlScanSysBlk:
 	mov	r8, r4, asl #1
 	uxth	r3, r3
 	strh	sl, [ip, r8]	@ movhi
-	ldr	ip, [r1, #-1040]
+	ldr	ip, [r1, #-1044]
 	ldr	r2, [ip, r2, asl #2]
 	str	r2, [ip, r4, asl #2]
-	ldr	r2, [r1, #-1044]
+	ldr	r2, [r1, #-1048]
 	strh	r5, [r2, r0]	@ movhi
-.L1340:
-	ldr	r0, [r7, #3940]
+.L1239:
+	ldr	r0, [r7, #3936]
 	sxth	r2, r3
 	cmp	r2, r0
-	bcc	.L1341
-	b	.L1337
-.L1339:
+	bcc	.L1240
+	b	.L1236
+.L1238:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1338:
+.L1237:
 	sxth	r1, r3
 	cmp	r1, r0
-	bcc	.L1342
-.L1337:
-	ldr	r2, .L1355
-	ldr	r1, [r2, #3960]
+	bcc	.L1241
+.L1236:
+	ldr	r2, .L1258
+	ldr	r1, [r2, #3956]
 	ldrh	r3, [r1, #0]
 	cmp	r3, #0
-	bne	.L1343
-	movw	r0, #3956
+	bne	.L1242
+	mov	r0, #3952
 	ldrh	r0, [r2, r0]
 	cmp	r0, #0
-	movwne	r0, #3932
+	movwne	r0, #3928
 	ldrneh	r2, [r2, r0]
-	bne	.L1344
-	b	.L1343
-.L1348:
+	bne	.L1243
+	b	.L1242
+.L1247:
 	mov	ip, r0, asl #1
 	ldrh	ip, [r1, ip]
 	cmp	ip, #0
-	beq	.L1345
-	ldr	r1, .L1355
-	movw	r8, #3932
-	ldr	r7, .L1355+4
+	beq	.L1244
+	ldr	r1, .L1258
+	movw	r8, #3928
+	ldr	r7, .L1258+4
 	mov	r6, #0
-	b	.L1346
-.L1347:
-	ldr	r4, [r1, #3960]
+	b	.L1245
+.L1246:
+	ldr	r4, [r1, #3956]
 	mov	ip, r2, asl #1
 	rsb	r5, r0, r2
 	add	r3, r3, #1
@@ -11393,37 +10525,37 @@ FtlScanSysBlk:
 	mov	sl, r5, asl #1
 	uxth	r3, r3
 	strh	r9, [r4, sl]	@ movhi
-	ldr	r4, [r7, #-924]
+	ldr	r4, [r7, #-928]
 	ldr	r2, [r4, r2, asl #2]
 	str	r2, [r4, r5, asl #2]
-	ldr	r2, [r1, #3960]
+	ldr	r2, [r1, #3956]
 	strh	r6, [r2, ip]	@ movhi
-.L1346:
+.L1245:
 	ldrh	ip, [r1, r8]
 	sxth	r2, r3
 	cmp	r2, ip
-	blt	.L1347
-	b	.L1343
-.L1345:
+	blt	.L1246
+	b	.L1242
+.L1244:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1344:
+.L1243:
 	sxth	r0, r3
 	cmp	r0, r2
-	blt	.L1348
-.L1343:
+	blt	.L1247
+.L1242:
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1356:
+.L1259:
 	.align	2
-.L1355:
+.L1258:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1048
-	.word	.LANCHOR2-1768
+	.word	-1052
+	.word	.LANCHOR2-1772
+	.word	-1772
 	.word	-1768
-	.word	-1764
 	.fnend
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
@@ -11433,14 +10565,14 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1367
+	ldr	r3, .L1270
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r8, r2
-	mov	r2, #3920
+	movw	r2, #3916
 	mov	r5, r1
 	ldrh	r9, [r3, r2]
-	movw	r2, #3906
+	movw	r2, #3902
 	ldrh	r2, [r3, r2]
 	add	r1, r1, r0
 	.pad #52
@@ -11448,18 +10580,18 @@ FtlVendorPartRead:
 	mov	r6, r0
 	cmp	r1, r2
 	mvnhi	r7, #0
-	bhi	.L1358
+	bhi	.L1261
 	mov	r9, r0, lsr r9
 	mov	r7, #0
-	ldr	sl, .L1367+4
+	ldr	sl, .L1270+4
 	mov	r9, r9, asl #2
-	b	.L1359
-.L1364:
-	ldr	r3, [sl, #-920]
+	b	.L1262
+.L1267:
+	ldr	r3, [sl, #-924]
 	mov	r0, r6
-	ldr	r1, .L1367
+	ldr	r1, .L1270
 	ldr	fp, [r3, r9]
-	movw	r3, #3918
+	movw	r3, #3914
 	ldrh	r4, [r1, r3]
 	mov	r1, r4
 	bl	__aeabi_uidivmod
@@ -11469,11 +10601,11 @@ FtlVendorPartRead:
 	cmp	r4, r5
 	uxthhi	r4, r5
 	cmp	fp, #0
-	beq	.L1361
-	ldr	r1, .L1367+4
+	beq	.L1264
+	ldr	r1, .L1270+4
 	add	r0, sp, #12
 	str	fp, [sp, #16]
-	ldr	r2, [r1, #-968]
+	ldr	r2, [r1, #-972]
 	mov	r1, #1
 	str	r3, [sp, #4]
 	str	r2, [sp, #20]
@@ -11485,32 +10617,32 @@ FtlVendorPartRead:
 	ldr	r3, [sp, #4]
 	mov	r0, r8
 	cmn	r2, #1
-	ldr	r1, [sl, #-968]
+	ldr	r1, [sl, #-972]
 	moveq	r7, r2
 	add	r1, r1, r3, asl #9
 	mov	r2, r4, asl #9
 	bl	memcpy
-	b	.L1363
-.L1361:
+	b	.L1266
+.L1264:
 	mov	r0, r8
 	mov	r1, fp
 	mov	r2, r4, asl #9
 	bl	ftl_memset
-.L1363:
+.L1266:
 	rsb	r5, r4, r5
 	add	r6, r6, r4
 	add	r8, r8, r4, asl #9
 	add	r9, r9, #4
-.L1359:
+.L1262:
 	cmp	r5, #0
-	bne	.L1364
-.L1358:
+	bne	.L1267
+.L1261:
 	mov	r0, r7
 	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1368:
+.L1271:
 	.align	2
-.L1367:
+.L1270:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11525,80 +10657,80 @@ Ftl_load_ext_data:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #0
-	ldr	r5, .L1373
+	ldr	r5, .L1276
 	mov	r1, #1
-	ldr	r2, .L1373+4
+	ldr	r2, .L1276+4
 	bl	FtlVendorPartRead
-	ldr	r4, .L1373+8
-	ldr	r3, [r5, #-1704]
+	ldr	r4, .L1276+8
+	ldr	r3, [r5, #-1708]
 	cmp	r3, r4
-	beq	.L1370
-	ldr	r0, .L1373+4
+	beq	.L1273
+	ldr	r0, .L1276+4
 	mov	r1, #0
 	mov	r2, #512
 	bl	ftl_memset
-	str	r4, [r5, #-1704]
-.L1370:
-	ldr	r2, [r5, #-1704]
-	ldr	r3, .L1373
+	str	r4, [r5, #-1708]
+.L1273:
+	ldr	r2, [r5, #-1708]
+	ldr	r3, .L1276
 	cmp	r2, r4
-	bne	.L1371
+	bne	.L1274
+	ldr	r2, [r3, #-1620]
+	str	r2, [r3, #-1860]
 	ldr	r2, [r3, #-1616]
 	str	r2, [r3, #-1856]
-	ldr	r2, [r3, #-1612]
-	str	r2, [r3, #-1852]
+	ldr	r2, [r3, #-1700]
+	str	r2, [r3, #-1864]
 	ldr	r2, [r3, #-1696]
-	str	r2, [r3, #-1860]
+	str	r2, [r3, #-1876]
 	ldr	r2, [r3, #-1692]
-	str	r2, [r3, #-1872]
+	str	r2, [r3, #-1884]
 	ldr	r2, [r3, #-1688]
-	str	r2, [r3, #-1880]
-	ldr	r2, [r3, #-1684]
-	str	r2, [r3, #-1864]
+	str	r2, [r3, #-1868]
+	ldr	r2, [r3, #-1680]
+	str	r2, [r3, #-1840]
 	ldr	r2, [r3, #-1676]
-	str	r2, [r3, #-1836]
+	str	r2, [r3, #-2084]
 	ldr	r2, [r3, #-1672]
-	str	r2, [r3, #-2080]
+	str	r2, [r3, #-1880]
 	ldr	r2, [r3, #-1668]
-	str	r2, [r3, #-1876]
+	str	r2, [r3, #-1872]
 	ldr	r2, [r3, #-1664]
-	str	r2, [r3, #-1868]
+	str	r2, [r3, #-1832]
 	ldr	r2, [r3, #-1660]
 	str	r2, [r3, #-1828]
-	ldr	r2, [r3, #-1656]
-	str	r2, [r3, #-1824]
-	ldr	r2, [r3, #-1644]
-	str	r2, [r3, #-1708]
-.L1371:
-	ldr	r4, .L1373
+	ldr	r2, [r3, #-1648]
+	str	r2, [r3, #-1712]
+.L1274:
+	ldr	r4, .L1276
 	mov	r3, #0
-	ldr	r2, [r4, #-1636]
-	str	r3, [r4, #-1004]
-	ldr	r3, .L1373+12
+	ldr	r2, [r4, #-1640]
+	str	r3, [r4, #-1008]
+	ldr	r3, .L1276+12
 	cmp	r2, r3
-	bne	.L1372
+	bne	.L1275
 	mov	r3, #1
-	ldr	r0, .L1373+16
-	str	r3, [r4, #-1884]
-	ldr	r1, .L1373+20
+	ldr	r0, .L1276+16
+	str	r3, [r4, #-1888]
+	ldr	r1, .L1276+20
 	bl	printk
-.L1372:
-	ldr	r3, .L1373+24
-	movw	r2, #3902
-	ldr	r0, [r4, #-1840]
+.L1275:
+	ldr	r3, .L1276+24
+	movw	r2, #3898
+	ldr	r0, [r4, #-1844]
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r4, #-1836]
+	ldr	r2, [r4, #-1840]
 	mla	r0, r0, r1, r2
-	movw	r2, #3852
+	movw	r2, #3848
 	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
-	str	r0, [r4, #-1832]
+	str	r0, [r4, #-1836]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1374:
+.L1277:
 	.align	2
-.L1373:
+.L1276:
 	.word	.LANCHOR2
-	.word	.LANCHOR2-1704
+	.word	.LANCHOR2-1708
 	.word	1179929683
 	.word	305432421
 	.word	.LC74
@@ -11616,32 +10748,32 @@ FtlLoadEctTbl:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #64
-	ldr	r4, .L1377
-	ldr	r5, .L1377+4
-	ldr	r2, [r4, #-936]
+	ldr	r4, .L1280
+	ldr	r5, .L1280+4
+	ldr	r2, [r4, #-940]
 	ldrh	r1, [r4, r5]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #-936]
+	ldr	r3, [r4, #-940]
 	ldr	r2, [r3, #0]
-	ldr	r3, .L1377+8
+	ldr	r3, .L1280+8
 	cmp	r2, r3
-	beq	.L1376
-	ldr	r1, .L1377+12
-	ldr	r0, .L1377+16
+	beq	.L1279
+	ldr	r1, .L1280+12
+	ldr	r0, .L1280+16
 	bl	printk
 	ldrh	r2, [r4, r5]
-	ldr	r0, [r4, #-936]
+	ldr	r0, [r4, #-940]
 	mov	r1, #0
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L1376:
+.L1279:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1378:
+.L1281:
 	.align	2
-.L1377:
+.L1280:
 	.word	.LANCHOR2
-	.word	-940
+	.word	-944
 	.word	1112818501
 	.word	.LC98
 	.word	.LC74
@@ -11657,51 +10789,51 @@ load_l2p_region:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r6, r0
-	ldr	r4, .L1382
+	ldr	r4, .L1285
 	mov	r5, #12
-	ldr	r3, [r4, #-1036]
+	ldr	r3, [r4, #-1040]
 	ldr	r7, [r3, r0, asl #2]
 	cmp	r7, #0
-	bne	.L1380
+	bne	.L1283
 	mul	r5, r5, r1
-	ldr	r3, [r4, #-1900]
-	ldr	r2, .L1382+4
+	ldr	r3, [r4, #-1904]
+	ldr	r2, .L1285+4
 	mov	r1, #255
 	add	r3, r3, r5
 	ldr	r0, [r3, #8]
-	movw	r3, #3922
+	movw	r3, #3918
 	ldrh	r2, [r2, r3]
 	bl	ftl_memset
-	ldr	r3, [r4, #-1900]
+	ldr	r3, [r4, #-1904]
 	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #-1900]
+	ldr	r3, [r4, #-1904]
 	add	r5, r3, r5
 	str	r7, [r5, #4]
-	b	.L1381
-.L1380:
+	b	.L1284
+.L1283:
 	mul	r5, r5, r1
-	ldr	r3, [r4, #-1900]
+	ldr	r3, [r4, #-1904]
 	mov	r1, #1
-	add	r0, r4, #168
+	add	r0, r4, #156
 	mov	r2, r1
-	str	r7, [r4, #172]
+	str	r7, [r4, #160]
 	add	r3, r3, r5
 	ldr	r3, [r3, #8]
-	str	r3, [r4, #176]
-	ldr	r3, [r4, #-952]
-	str	r3, [r4, #180]
+	str	r3, [r4, #164]
+	ldr	r3, [r4, #-956]
+	str	r3, [r4, #168]
 	bl	FlashReadPages
-	ldr	r3, [r4, #-1900]
+	ldr	r3, [r4, #-1904]
 	mov	r1, #0
 	add	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-.L1381:
+.L1284:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1383:
+.L1286:
 	.align	2
-.L1382:
+.L1285:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -11714,11 +10846,11 @@ FtlGetLastWrittenPage:
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
 	cmp	r1, #1
-	ldr	r3, .L1395
+	ldr	r3, .L1298
 	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 	.save {r4, r5, r6, r7, r8, sl, lr}
-	movweq	r2, #3914
-	movwne	r2, #3912
+	movweq	r2, #3910
+	movwne	r2, #3908
 	.pad #108
 	sub	sp, sp, #108
 	ldrh	r4, [r3, r2]
@@ -11740,9 +10872,9 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	cmn	r3, #1
-	bne	.L1388
-	b	.L1393
-.L1391:
+	bne	.L1291
+	b	.L1296
+.L1294:
 	add	r6, r6, r3
 	mov	r0, r7
 	mov	r1, #1
@@ -11755,30 +10887,30 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	cmn	r3, #1
-	bne	.L1389
+	bne	.L1292
 	ldr	r3, [sp, #44]
 	cmn	r3, #1
-	bne	.L1389
+	bne	.L1292
 	ldr	r3, [sp, #4]
 	cmn	r3, #1
 	subne	r4, r6, #1
 	uxthne	r4, r4
-	bne	.L1393
-.L1389:
+	bne	.L1296
+.L1292:
 	add	r6, r6, #1
 	uxth	r8, r6
-.L1393:
+.L1296:
 	sxth	r6, r8
 	sxth	r3, r4
 	cmp	r6, r3
-	ble	.L1391
-.L1388:
+	ble	.L1294
+.L1291:
 	sxth	r0, r4
 	add	sp, sp, #108
 	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L1396:
+.L1299:
 	.align	2
-.L1395:
+.L1298:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -11792,231 +10924,241 @@ FtlLoadSysInfo:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, #0
-	ldr	r4, .L1411
+	ldr	r4, .L1315
 	mov	r1, r5
-	ldr	r2, .L1411+4
-	ldr	r7, .L1411+8
-	ldr	r3, [r4, #-952]
-	str	r5, [r4, #176]
-	ldr	r0, [r4, #-2064]
-	str	r3, [r4, #180]
-	movw	r3, #3852
+	ldr	r2, .L1315+4
+	ldr	r7, .L1315+8
+	ldr	r3, [r4, #-956]
+	ldr	r0, [r4, #-2068]
+	str	r5, [r4, #164]
+	str	r3, [r4, #168]
+	movw	r3, #3848
 	ldrh	r2, [r2, r3]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r0, [r4, r7]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1409
+	beq	.L1313
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
-	ldr	r3, .L1411+12
+	ldr	r3, .L1315+12
 	add	r2, r0, #1
 	mov	r6, r0
 	strh	r2, [r4, r3]	@ movhi
-	b	.L1399
-.L1401:
+	b	.L1302
+.L1305:
 	ldrh	r2, [r4, r7]
 	mov	r1, #1
-	ldr	r0, .L1411+16
-	sub	r5, r5, #1
+	ldr	r0, .L1315+16
 	orr	r3, r3, r2, asl #10
-	str	r3, [r4, #172]
-	ldr	r3, [r4, #-2076]
+	str	r3, [r4, #160]
+	ldr	r3, [r4, #-2080]
 	mov	r2, r1
-	uxth	r5, r5
-	str	r3, [r4, #176]
+	str	r3, [r4, #164]
 	bl	FlashReadPages
-	ldr	r3, [r4, #168]
+	ldr	r3, [r4, #156]
 	cmn	r3, #1
-	bne	.L1400
-.L1399:
+	beq	.L1303
+	ldr	r3, [r4, #-2080]
+	ldr	r2, [r3, #0]
+	ldr	r3, .L1315+20
+	cmp	r2, r3
+	bne	.L1303
+	ldr	r3, [r4, #-956]
+	ldrh	r2, [r3, #0]
+	movw	r3, #61604
+	cmp	r2, r3
+	beq	.L1304
+.L1303:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1302:
 	add	r3, r5, r6
 	sxth	r3, r3
 	cmp	r3, #0
-	bge	.L1401
-.L1400:
-	ldr	r4, .L1411
+	bge	.L1305
+.L1304:
+	ldr	r4, .L1315
 	mov	r2, #48
-	ldr	r5, .L1411+4
-	movw	r6, #3852
-	ldr	r0, .L1411+20
-	ldr	r7, [r4, #176]
+	ldr	r5, .L1315+4
+	movw	r6, #3848
+	sub	r0, r4, #1824
+	ldr	r7, [r4, #164]
 	mov	r1, r7
 	bl	memcpy
 	ldrh	r2, [r5, r6]
 	add	r1, r7, #48
-	ldr	r0, [r4, #-2064]
+	ldr	r0, [r4, #-2068]
 	mov	r2, r2, asl #1
 	bl	memcpy
 	ldrh	r1, [r5, r6]
-	ldr	r3, [r4, #176]
-	ldr	r0, [r4, #-1888]
+	ldr	r3, [r4, #164]
+	ldr	r0, [r4, #-1892]
 	mov	r2, r1, lsr #3
 	add	r1, r1, #24
 	add	r2, r2, #4
 	mov	r1, r1, lsr #1
 	add	r1, r3, r1, asl #2
 	bl	memcpy
-	ldr	r2, [r4, #-1820]
-	ldr	r3, .L1411+24
+	ldr	r2, [r4, #-1824]
+	ldr	r3, .L1315+20
 	cmp	r2, r3
-	bne	.L1409
-	ldr	r3, .L1411+28
-	ldr	r2, .L1411+32
-	ldrb	r1, [r4, #-1810]	@ zero_extendqisi2
+	bne	.L1313
+	ldr	r3, .L1315+24
+	ldr	r2, .L1315+28
+	ldrb	r1, [r4, #-1814]	@ zero_extendqisi2
 	ldrh	r3, [r4, r3]
 	strh	r3, [r4, r2]	@ movhi
-	movw	r2, #3866
+	movw	r2, #3862
 	ldrh	r2, [r5, r2]
 	cmp	r1, r2
-	bne	.L1409
-	movw	r2, #3912
-	movw	r1, #3918
+	bne	.L1313
+	movw	r2, #3908
+	movw	r1, #3914
 	ldrh	r2, [r5, r2]
 	ldrh	r1, [r5, r1]
-	ldr	r0, [r5, #3856]
+	ldr	r0, [r5, #3852]
 	mul	r2, r3, r2
-	str	r3, [r4, #204]
-	str	r2, [r5, #3972]
+	str	r3, [r4, #192]
+	str	r2, [r5, #3968]
 	mul	r2, r1, r2
-	str	r2, [r5, #3952]
-	movw	r2, #3986
+	str	r2, [r5, #3948]
+	movw	r2, #3982
 	ldrh	r2, [r5, r2]
 	rsb	r0, r2, r0
 	rsb	r0, r3, r0
-	movw	r3, #3844
+	mov	r3, #3840
 	ldrh	r1, [r5, r3]
 	movw	r5, #65535
 	bl	__aeabi_uidiv
-	ldr	r3, .L1411+36
-	ldr	r1, .L1411+40
+	ldr	r3, .L1315+32
+	ldr	r1, .L1315+36
 	strh	r0, [r4, r3]	@ movhi
 	sub	r3, r3, #34
 	ldrh	r2, [r4, r3]
-	sub	r3, r3, #238
+	ldr	r3, .L1315+40
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #240
 	ldrh	r3, [r4, r3]
 	mov	r0, r3, lsr #6
 	and	r3, r3, #63
-	strb	r3, [r4, #-2038]
-	ldrb	r3, [r4, #-1809]	@ zero_extendqisi2
+	strb	r3, [r4, #-2042]
+	ldrb	r3, [r4, #-1813]	@ zero_extendqisi2
 	strh	r0, [r4, r1]	@ movhi
 	mvn	r1, #0
-	ldr	r0, .L1411+44
-	strb	r3, [r4, #-2036]
-	ldr	r3, .L1411+48
+	ldr	r0, .L1315+44
+	strb	r3, [r4, #-2040]
+	ldr	r3, .L1315+48
 	strh	r1, [r4, r3]	@ movhi
 	mov	r3, #0
-	ldr	r1, .L1411+52
+	ldr	r1, .L1315+52
 	strh	r3, [r4, r0]	@ movhi
-	strb	r3, [r4, #-1750]
+	strb	r3, [r4, #-1754]
 	ldrh	r0, [r4, r1]
-	sub	r1, r1, #194
-	strb	r3, [r4, #-1748]
-	str	r3, [r4, #-1860]
+	ldr	r1, .L1315+56
+	strb	r3, [r4, #-1752]
+	str	r3, [r4, #-1864]
 	strh	r0, [r4, r1]	@ movhi
 	add	r1, r1, #196
-	ldr	r0, .L1411+56
+	ldr	r0, .L1315+60
 	ldrh	r1, [r4, r1]
 	mov	ip, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-1990]
-	ldrb	r1, [r4, #-1808]	@ zero_extendqisi2
+	strb	r1, [r4, #-1994]
+	ldrb	r1, [r4, #-1812]	@ zero_extendqisi2
 	strh	ip, [r4, r0]	@ movhi
-	strb	r1, [r4, #-1988]
-	ldr	r1, .L1411+60
+	strb	r1, [r4, #-1992]
+	ldr	r1, .L1315+64
 	ldrh	r0, [r4, r1]
-	sub	r1, r1, #150
+	ldr	r1, .L1315+68
 	strh	r0, [r4, r1]	@ movhi
 	add	r1, r1, #152
-	ldr	r0, .L1411+64
+	ldr	r0, .L1315+72
 	ldrh	r1, [r4, r1]
 	mov	ip, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-1942]
-	ldrb	r1, [r4, #-1807]	@ zero_extendqisi2
+	strb	r1, [r4, #-1946]
+	ldrb	r1, [r4, #-1811]	@ zero_extendqisi2
 	strh	ip, [r4, r0]	@ movhi
-	strb	r1, [r4, #-1940]
-	str	r3, [r4, #-1872]
-	ldr	r1, [r4, #-1788]
-	str	r3, [r4, #-1880]
-	str	r3, [r4, #-1864]
-	str	r3, [r4, #-1836]
-	str	r3, [r4, #-1828]
+	strb	r1, [r4, #-1944]
+	str	r3, [r4, #-1876]
+	ldr	r1, [r4, #-1792]
+	str	r3, [r4, #-1884]
 	str	r3, [r4, #-1868]
-	ldr	r3, [r4, #-1780]
-	str	r1, [r4, #-1840]
+	str	r3, [r4, #-1840]
+	str	r3, [r4, #-1832]
+	str	r3, [r4, #-1872]
+	ldr	r3, [r4, #-1784]
+	str	r1, [r4, #-1844]
+	ldr	r1, [r4, #-1852]
+	cmp	r3, r1
+	strhi	r3, [r4, #-1852]
+	ldr	r4, .L1315
+	ldr	r3, [r4, #-1788]
 	ldr	r1, [r4, #-1848]
 	cmp	r3, r1
 	strhi	r3, [r4, #-1848]
-	ldr	r4, .L1411
-	ldr	r3, [r4, #-1784]
-	ldr	r1, [r4, #-1844]
-	cmp	r3, r1
-	strhi	r3, [r4, #-1844]
 	cmp	r2, r5
-	beq	.L1404
-	ldr	r0, .L1411+68
+	beq	.L1308
+	ldr	r0, .L1315+76
 	bl	make_superblock
-.L1404:
-	ldr	r3, .L1411+72
+.L1308:
+	ldr	r3, .L1315+56
 	ldrh	r3, [r4, r3]
 	cmp	r3, r5
-	beq	.L1405
-	ldr	r0, .L1411+76
+	beq	.L1309
+	ldr	r0, .L1315+80
 	bl	make_superblock
-.L1405:
-	ldr	r5, .L1411
-	movw	r4, #65535
-	ldr	r3, .L1411+80
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L1406
-	ldr	r0, .L1411+84
+.L1309:
+	ldr	r4, .L1315
+	movw	r5, #65535
+	ldr	r3, .L1315+68
+	ldrh	r3, [r4, r3]
+	cmp	r3, r5
+	beq	.L1310
+	sub	r0, r4, #1952
 	bl	make_superblock
-.L1406:
-	ldr	r3, .L1411+48
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L1410
-	ldr	r0, .L1411+88
+.L1310:
+	ldr	r3, .L1315+48
+	ldrh	r3, [r4, r3]
+	cmp	r3, r5
+	beq	.L1314
+	ldr	r0, .L1315+84
 	bl	make_superblock
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1409:
+.L1313:
 	mvn	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1410:
+.L1314:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1412:
+.L1316:
 	.align	2
-.L1411:
+.L1315:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-1768
-	.word	-1766
-	.word	.LANCHOR2+168
-	.word	.LANCHOR2-1820
-	.word	1179929683
-	.word	-1812
-	.word	-1762
 	.word	-1772
-	.word	-2042
-	.word	-1754
-	.word	-1756
+	.word	-1770
+	.word	.LANCHOR2+156
+	.word	1179929683
+	.word	-1816
+	.word	-1766
+	.word	-1776
+	.word	-2046
+	.word	-2048
+	.word	-1758
+	.word	-1760
+	.word	-1806
+	.word	-2000
+	.word	-1998
 	.word	-1802
-	.word	-1994
-	.word	-1798
-	.word	-1946
-	.word	.LANCHOR2-2044
-	.word	-1996
-	.word	.LANCHOR2-1996
-	.word	-1948
-	.word	.LANCHOR2-1948
-	.word	.LANCHOR2-1756
+	.word	-1952
+	.word	-1950
+	.word	.LANCHOR2-2048
+	.word	.LANCHOR2-2000
+	.word	.LANCHOR2-1760
 	.fnend
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
@@ -12029,181 +11171,186 @@ FtlLoadBbt:
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r3, #0
-	ldr	r6, .L1428
-	ldr	r8, .L1428+4
-	ldr	r4, [r6, #-952]
+	ldr	r6, .L1333
+	ldr	r8, .L1333+4
+	ldr	r4, [r6, #-956]
 	mov	r7, r6
-	str	r3, [r6, #176]
-	str	r4, [r6, #180]
+	str	r3, [r6, #164]
+	str	r4, [r6, #168]
 	bl	FtlBbtMemInit
-	movw	r3, #3908
+	mov	r3, #3904
 	ldrh	r5, [r8, r3]
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L1414
-.L1418:
+	b	.L1318
+.L1322:
 	mov	r1, #1
 	mov	r3, r5, asl #10
-	ldr	r0, .L1428+8
+	ldr	r0, .L1333+8
 	mov	r2, r1
-	str	r3, [r6, #172]
+	str	r3, [r6, #160]
 	bl	FlashReadPages
-	ldr	r3, [r6, #168]
+	ldr	r3, [r6, #156]
 	cmn	r3, #1
-	bne	.L1415
-	ldr	r3, [r6, #172]
+	bne	.L1319
+	ldr	r3, [r6, #160]
 	mov	r1, #1
-	ldr	r0, .L1428+8
+	ldr	r0, .L1333+8
 	mov	r2, r1
 	add	r3, r3, #1
-	str	r3, [r6, #172]
+	str	r3, [r6, #160]
 	bl	FlashReadPages
-.L1415:
-	ldr	r3, [r7, #168]
+.L1319:
+	ldr	r3, [r7, #156]
 	cmn	r3, #1
-	beq	.L1416
+	beq	.L1320
 	ldrh	r2, [r4, #0]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1416
-	ldr	r3, .L1428+4
-	movw	r2, #3980
+	bne	.L1320
+	ldr	r3, .L1333+4
+	movw	r2, #3976
 	strh	r5, [r3, r2]	@ movhi
 	ldr	r2, [r4, #4]
-	str	r2, [r3, #3988]
-	mov	r2, #3984
+	str	r2, [r3, #3984]
+	movw	r2, #3980
 	ldrh	r1, [r4, #8]
 	strh	r1, [r3, r2]	@ movhi
-	b	.L1417
-.L1416:
+	b	.L1321
+.L1320:
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1414:
-	movw	r3, #3908
+.L1318:
+	mov	r3, #3904
 	ldrh	r3, [r8, r3]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	bgt	.L1418
-.L1417:
-	ldr	r5, .L1428+4
-	movw	r8, #3980
+	bgt	.L1322
+.L1321:
+	ldr	r5, .L1333+4
+	movw	r8, #3976
 	movw	r3, #65535
 	ldrh	r2, [r5, r8]
 	cmp	r2, r3
-	beq	.L1427
-	mov	r6, #3984
+	beq	.L1332
+	movw	r6, #3980
 	ldrh	r2, [r5, r6]
 	cmp	r2, r3
-	beq	.L1420
-	ldr	r7, .L1428
+	beq	.L1324
+	ldr	r7, .L1333
 	mov	r1, #1
 	mov	r2, r2, asl #10
-	add	r0, r7, #168
-	str	r2, [r7, #172]
+	add	r0, r7, #156
+	str	r2, [r7, #160]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r3, [r7, #168]
+	ldr	r3, [r7, #156]
 	cmn	r3, #1
-	beq	.L1420
+	beq	.L1324
 	ldrh	r2, [r4, #0]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1420
+	bne	.L1324
 	ldr	r3, [r4, #4]
-	ldr	r2, [r5, #3988]
+	ldr	r2, [r5, #3984]
 	cmp	r3, r2
-	strhi	r3, [r5, #3988]
+	strhi	r3, [r5, #3984]
 	ldrhih	r2, [r5, r6]
 	ldrhih	r3, [r4, #8]
 	strhih	r2, [r5, r8]	@ movhi
 	strhih	r3, [r5, r6]	@ movhi
-.L1420:
-	ldr	r8, .L1428+4
-	movw	r3, #3980
+.L1324:
+	ldr	r8, .L1333+4
+	movw	r3, #3976
 	mov	r1, #1
 	mov	r6, #0
-	ldr	r5, .L1428
+	ldr	r5, .L1333
 	ldrh	r0, [r8, r3]
 	bl	FtlGetLastWrittenPage
-	movw	r3, #3982
+	movw	r3, #3978
 	add	r2, r0, #1
 	mov	r7, r0
 	strh	r2, [r8, r3]	@ movhi
-	b	.L1421
-.L1423:
-	movw	r2, #3980
+	b	.L1325
+.L1328:
+	movw	r2, #3976
 	mov	r1, #1
 	ldrh	r2, [r8, r2]
-	sub	r6, r6, #1
-	ldr	r0, .L1428+8
-	uxth	r6, r6
+	ldr	r0, .L1333+8
 	orr	r3, r3, r2, asl #10
-	str	r3, [r5, #172]
-	ldr	r3, [r5, #-2076]
+	str	r3, [r5, #160]
+	ldr	r3, [r5, #-2080]
 	mov	r2, r1
-	str	r3, [r5, #176]
+	str	r3, [r5, #164]
 	bl	FlashReadPages
-	ldr	r3, [r5, #168]
+	ldr	r3, [r5, #156]
 	cmn	r3, #1
-	bne	.L1422
-.L1421:
+	beq	.L1326
+	ldrh	r2, [r4, #0]
+	movw	r3, #61649
+	cmp	r2, r3
+	beq	.L1327
+.L1326:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1325:
 	add	r3, r6, r7
 	sxth	r3, r3
 	cmp	r3, #0
-	bge	.L1423
-.L1422:
-	ldr	r3, .L1428+4
-	movw	r2, #3986
+	bge	.L1328
+.L1327:
+	ldr	r3, .L1333+4
+	movw	r2, #3982
 	ldrh	r1, [r4, #10]
 	ldrh	r0, [r4, #12]
 	strh	r1, [r3, r2]	@ movhi
 	movw	r2, #65535
 	cmp	r0, r2
-	beq	.L1424
-	ldr	r2, [r3, #3840]
+	beq	.L1329
+	ldr	r2, [r3, #3836]
 	cmp	r0, r2
-	beq	.L1424
-	movw	r1, #3854
+	beq	.L1329
+	movw	r1, #3850
 	ldrh	r3, [r3, r1]
 	mov	r3, r3, lsr #2
 	cmp	r2, r3
-	bcs	.L1424
+	bcs	.L1329
 	cmp	r0, r3
-	bcs	.L1424
+	bcs	.L1329
 	bl	FtlSysBlkNumInit
-.L1424:
-	ldr	r6, .L1428+12
+.L1329:
+	ldr	r5, .L1333+12
 	mov	r4, #0
-	ldr	r8, .L1428+4
-	movw	r7, #3866
-	ldr	r5, .L1428
-	b	.L1425
-.L1426:
-	ldr	r3, .L1428+16
-	ldr	r1, [r5, #176]
-	ldr	r0, [r6, #4]!
-	ldrh	r2, [r5, r3]
+	movw	r7, #3862
+	ldr	r6, .L1333
+	sub	r8, r5, #4000
+	b	.L1330
+.L1331:
+	ldr	r3, .L1333+16
+	ldr	r1, [r6, #164]
+	ldr	r0, [r5, #4]!
+	ldrh	r2, [r6, r3]
 	mov	r2, r2, asl #2
 	mla	r1, r4, r2, r1
 	bl	memcpy
 	add	r4, r4, #1
-.L1425:
+.L1330:
 	ldrh	r3, [r8, r7]
 	cmp	r4, r3
-	bcc	.L1426
+	bcc	.L1331
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1427:
+.L1332:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1429:
+.L1334:
 	.align	2
-.L1428:
+.L1333:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+168
-	.word	.LANCHOR0+4004
-	.word	-1032
+	.word	.LANCHOR2+156
+	.word	.LANCHOR0+4000
+	.word	-1036
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
@@ -12216,63 +11363,64 @@ FtlLoadFactoryBbt:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r5, #0
-	ldr	r3, .L1437
-	movw	fp, #3866
-	ldr	r7, .L1437+4
-	ldr	r6, .L1437+8
-	ldr	r2, [r3, #-2076]
-	ldr	r8, [r3, #-952]
-	str	r2, [r3, #176]
-	str	r8, [r3, #180]
-	b	.L1431
-.L1436:
-	movw	r9, #3908
+	ldr	r3, .L1342
+	movw	fp, #3862
+	ldr	r7, .L1342+4
+	ldr	r6, .L1342+8
+	ldr	r2, [r3, #-2080]
+	ldr	r8, [r3, #-956]
+	str	r2, [r3, #164]
+	str	r8, [r3, #168]
+	b	.L1336
+.L1341:
 	mvn	r3, #0
-	ldrh	r4, [r6, r9]
 	strh	r3, [r7], #2	@ movhi
-	add	r4, r4, r3
-	ldr	sl, .L1437
+	mov	r3, #3904
+	ldr	sl, .L1342
+	ldrh	r4, [r6, r3]
+	movw	r9, #61664
+	sub	r4, r4, #1
 	uxth	r4, r4
-	b	.L1432
-.L1435:
+	b	.L1337
+.L1340:
 	mla	r3, r3, r5, r4
 	mov	r1, #1
-	ldr	r0, .L1437+12
+	ldr	r0, .L1342+12
 	mov	r2, r1
 	mov	r3, r3, asl #10
-	str	r3, [sl, #172]
+	str	r3, [sl, #160]
 	bl	FlashReadPages
-	ldr	r3, [sl, #168]
+	ldr	r3, [sl, #156]
 	cmn	r3, #1
-	beq	.L1433
-	ldrh	r2, [r8, #0]
-	movw	r3, #61664
-	cmp	r2, r3
+	beq	.L1338
+	ldrh	r3, [r8, #0]
+	cmp	r3, r9
 	streqh	r4, [r7, #-2]	@ movhi
-	beq	.L1434
-.L1433:
+	beq	.L1339
+.L1338:
 	sub	r4, r4, #1
 	uxth	r4, r4
-.L1432:
-	ldrh	r3, [r6, r9]
+.L1337:
+	mov	r3, #3904
+	ldrh	r3, [r6, r3]
 	sub	r2, r3, #16
 	cmp	r4, r2
-	bgt	.L1435
-.L1434:
+	bgt	.L1340
+.L1339:
 	add	r5, r5, #1
-.L1431:
+.L1336:
 	ldrh	r3, [r6, fp]
 	cmp	r5, r3
-	bcc	.L1436
+	bcc	.L1341
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1438:
+.L1343:
 	.align	2
-.L1437:
+.L1342:
 	.word	.LANCHOR2
-	.word	.LANCHOR0+3992
+	.word	.LANCHOR0+3988
 	.word	.LANCHOR0
-	.word	.LANCHOR2+168
+	.word	.LANCHOR2+156
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
@@ -12290,13 +11438,13 @@ FlashProgSlc2KPages:
 	mov	r9, r2
 	str	r3, [sp, #12]
 	mov	r4, r0
-	ldr	r3, .L1458
+	ldr	r3, .L1363
 	mov	r6, r0
 	mov	r8, #0
-	ldr	r7, .L1458+4
-	ldrb	fp, [r3, #2697]	@ zero_extendqisi2
-	b	.L1440
-.L1447:
+	ldr	r7, .L1363+4
+	ldrb	fp, [r3, #2837]	@ zero_extendqisi2
+	b	.L1345
+.L1352:
 	rsb	r3, r8, sl
 	add	r2, sp, #20
 	mov	r0, r6
@@ -12306,13 +11454,13 @@ FlashProgSlc2KPages:
 	add	r3, sp, #24
 	bl	LogAddr2PhyAddr
 	ldr	r3, [sp, #24]
-	ldrb	r2, [r7, #3766]	@ zero_extendqisi2
+	ldrb	r2, [r7, #3762]	@ zero_extendqisi2
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r6, #0]
-	bcs	.L1442
+	bcs	.L1347
 	add	r3, r7, r3
-	ldrb	r5, [r3, #3768]	@ zero_extendqisi2
+	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	NandcWaitFlashReady
 	mov	r0, r5
@@ -12339,7 +11487,7 @@ FlashProgSlc2KPages:
 	ands	r0, r0, #1
 	mvnne	r0, #0
 	str	r0, [r6, #0]
-	ldr	r1, [r7, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, r5
 	add	r1, r1, r3
 	bl	FlashProgFirstCmd
@@ -12355,7 +11503,7 @@ FlashProgSlc2KPages:
 	mov	r2, fp
 	bl	NandcXferData
 	ldr	r3, [sp, #20]
-	ldr	r1, [r7, #4]
+	ldr	r1, [r7, #856]
 	mov	r0, r5
 	add	r1, r1, r3
 	bl	FlashProgSecondCmd
@@ -12369,27 +11517,27 @@ FlashProgSlc2KPages:
 	mvnne	r3, #0
 	strne	r3, [r6, #0]
 	bl	NandcFlashDeCs
-.L1442:
+.L1347:
 	add	r8, r8, #1
 	add	r6, r6, #36
-.L1440:
+.L1345:
 	cmp	r8, sl
-	bne	.L1447
+	bne	.L1352
 	ldr	r3, [sp, #12]
 	cmp	r3, #0
 	movne	r6, #0
-	ldrne	r5, .L1458+8
-	bne	.L1448
-	b	.L1449
-.L1454:
+	ldrne	r5, .L1363+8
+	bne	.L1353
+	b	.L1354
+.L1359:
 	ldr	r3, [r4, #0]
 	cmn	r3, #1
-	bne	.L1450
+	bne	.L1355
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1458+12
+	ldr	r0, .L1363+12
 	bl	printk
-	b	.L1451
-.L1450:
+	b	.L1356
+.L1355:
 	rsb	r3, r6, sl
 	mov	r1, r9
 	add	r2, sp, #20
@@ -12398,12 +11546,12 @@ FlashProgSlc2KPages:
 	str	r3, [sp, #0]
 	add	r3, sp, #24
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r5, #152]
+	ldr	r2, [r5, #196]
 	mov	r3, #0
 	mov	lr, r4
 	add	ip, sp, #28
 	str	r3, [r2, #0]
-	ldr	r2, [r5, #156]
+	ldr	r2, [r5, #200]
 	str	r3, [r2, #0]
 	ldmia	lr!, {r0, r1, r2, r3}
 	stmia	ip!, {r0, r1, r2, r3}
@@ -12414,59 +11562,59 @@ FlashProgSlc2KPages:
 	mov	r1, #1
 	mov	r2, r9
 	str	r3, [ip, #0]
-	ldr	r3, [r5, #152]
+	ldr	r3, [r5, #196]
 	str	r3, [sp, #36]
-	ldr	r3, [r5, #156]
+	ldr	r3, [r5, #200]
 	str	r3, [sp, #40]
 	bl	FlashReadPages
 	ldr	r7, [sp, #28]
 	cmn	r7, #1
-	bne	.L1452
-	ldr	r0, .L1458+16
+	bne	.L1357
+	ldr	r0, .L1363+16
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r7, [r4, #0]
-.L1452:
+.L1357:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1453
+	beq	.L1358
 	ldr	r2, [r3, #0]
-	ldr	r3, [r5, #156]
+	ldr	r3, [r5, #200]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1453
-	ldr	r0, .L1458+20
+	beq	.L1358
+	ldr	r0, .L1363+20
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4, #0]
-.L1453:
+.L1358:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L1451
+	beq	.L1356
 	ldr	r2, [r3, #0]
-	ldr	r3, [r5, #152]
+	ldr	r3, [r5, #196]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1451
-	ldr	r0, .L1458+24
+	beq	.L1356
+	ldr	r0, .L1363+24
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4, #0]
-.L1451:
+.L1356:
 	add	r6, r6, #1
 	add	r4, r4, #36
-.L1448:
+.L1353:
 	cmp	r6, sl
-	bne	.L1454
-.L1449:
+	bne	.L1359
+.L1354:
 	mov	r0, #0
 	add	sp, sp, #68
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1459:
+.L1364:
 	.align	2
-.L1458:
+.L1363:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -12487,24 +11635,24 @@ FlashProgPages:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
-	ldr	r5, .L1487
+	ldr	r5, .L1393
 	mov	r9, r0
 	str	r1, [sp, #8]
 	mov	sl, r2
 	str	r3, [sp, #16]
-	ldr	ip, [r5, #2776]
-	ldrb	r6, [r5, #0]	@ zero_extendqisi2
+	ldr	ip, [r5, #3624]
+	ldrb	r6, [r5, #852]	@ zero_extendqisi2
 	ldrb	ip, [ip, #19]	@ zero_extendqisi2
 	cmp	r6, #0
 	moveq	fp, r5
 	str	ip, [sp, #20]
-	ldr	ip, .L1487+4
-	ldrb	ip, [ip, #2697]	@ zero_extendqisi2
+	ldr	ip, .L1393+4
+	ldrb	ip, [ip, #2837]	@ zero_extendqisi2
 	str	ip, [sp, #12]
-	beq	.L1461
+	beq	.L1366
 	bl	FlashProgSlc2KPages
-	b	.L1462
-.L1474:
+	b	.L1367
+.L1380:
 	mov	r4, #36
 	ldr	r2, [sp, #8]
 	mul	r4, r4, r6
@@ -12517,87 +11665,90 @@ FlashProgPages:
 	add	r3, sp, #32
 	mov	r0, r7
 	bl	LogAddr2PhyAddr
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	ldr	r2, [sp, #32]
 	cmp	r2, r3
 	mvncs	r3, #0
 	strcs	r3, [r9, r4]
 	mov	r8, r0
-	bcs	.L1464
-	ldrb	r1, [r5, #3837]	@ zero_extendqisi2
+	bcs	.L1369
+	ldrb	r1, [r5, #3833]	@ zero_extendqisi2
 	add	r2, fp, r2, asl #4
 	cmp	r1, #0
-	ldr	r2, [r2, #2788]
+	ldr	r2, [r2, #3636]
 	moveq	r8, #0
 	cmp	r2, #0
-	beq	.L1466
+	beq	.L1371
 	cmp	r3, #1
-	bne	.L1467
-	ldr	r0, [r5, #2164]
+	bne	.L1372
+	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-.L1467:
+.L1372:
 	ldrb	r0, [sp, #32]	@ zero_extendqisi2
 	bl	FlashWaitCmdDone
-.L1466:
+.L1371:
 	ldr	r2, [sp, #32]
 	mov	r1, #0
 	cmp	r8, #0
 	add	r3, r5, r2, asl #4
 	movne	r0, #36
-	str	r1, [r3, #2792]
+	str	r1, [r3, #3640]
 	ldr	r1, [sp, #28]
-	str	r7, [r3, #2788]
-	str	r1, [r3, #2784]
+	str	r7, [r3, #3636]
+	str	r1, [r3, #3632]
 	addne	r1, r6, #1
 	mlane	r1, r0, r1, r9
-	strne	r1, [r3, #2792]
+	strne	r1, [r3, #3640]
 	add	r3, fp, r2
 	add	r2, fp, r2, asl #4
-	ldrb	r4, [r3, #3768]	@ zero_extendqisi2
-	ldrb	r3, [fp, #3766]	@ zero_extendqisi2
+	ldrb	r4, [r3, #3764]	@ zero_extendqisi2
+	ldrb	r3, [fp, #3762]	@ zero_extendqisi2
 	cmp	r3, #1
-	strb	r4, [r2, #2780]
+	strb	r4, [r2, #3628]
 	mov	r0, r4
-	bne	.L1469
+	bne	.L1374
 	bl	NandcWaitFlashReady
-	b	.L1470
-.L1469:
+	b	.L1375
+.L1374:
 	bl	NandcFlashCs
 	ldr	r3, [sp, #32]
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	add	r3, r5, r3, asl #2
-	ldr	r2, [r3, #2740]
+	ldr	r2, [r3, #3588]
 	adds	r2, r2, #0
 	movne	r2, #1
 	bl	FlashWaitReadyEN
 	mov	r0, r4
 	bl	NandcFlashDeCs
-.L1470:
+.L1375:
 	ldr	r2, [sp, #20]
 	sub	r3, r2, #1
-	cmp	r3, #5
-	bhi	.L1471
+	cmp	r3, #6
+	bhi	.L1376
 	add	r3, r5, r4
-	ldrb	r3, [r3, #3760]	@ zero_extendqisi2
+	ldrb	r3, [r3, #3756]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1471
+	beq	.L1376
 	mov	r0, r4
-	ldrb	r1, [r5, #2909]	@ zero_extendqisi2
-	ldr	r2, .L1487+8
+	ldrb	r1, [r5, #1]	@ zero_extendqisi2
+	ldr	r2, .L1393+8
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L1471:
+.L1376:
 	mov	r0, r4
 	bl	NandcFlashCs
 	cmp	sl, #1
-	bne	.L1472
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1472
 	mov	r0, r4
+	bne	.L1377
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1377
 	bl	flash_enter_slc_mode
-.L1472:
+	b	.L1378
+.L1377:
+	bl	flash_exit_slc_mode
+.L1378:
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgFirstCmd
@@ -12609,7 +11760,7 @@ FlashProgPages:
 	ldr	r3, [r7, #8]
 	bl	NandcXferData
 	cmp	r8, #0
-	beq	.L1473
+	beq	.L1379
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgDpFirstCmd
@@ -12617,12 +11768,12 @@ FlashProgPages:
 	ldr	r1, [sp, #28]
 	mov	r0, r4
 	add	r3, r5, r3, asl #2
-	ldr	r2, [r3, #2740]
+	ldr	r2, [r3, #3588]
 	adds	r2, r2, #0
 	movne	r2, #1
 	bl	FlashWaitReadyEN
 	ldr	r3, [sp, #28]
-	ldr	r1, [r5, #4]
+	ldr	r1, [r5, #856]
 	mov	r0, r4
 	add	r1, r1, r3
 	bl	FlashProgDpSecondCmd
@@ -12636,58 +11787,58 @@ FlashProgPages:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3, #8]
 	bl	NandcXferData
-.L1473:
+.L1379:
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgSecondCmd
 	mov	r0, r4
 	bl	NandcFlashDeCs
 	add	r6, r6, r8
-.L1464:
+.L1369:
 	add	r6, r6, #1
-.L1461:
+.L1366:
 	ldr	r3, [sp, #8]
 	cmp	r6, r3
-	bcc	.L1474
-	ldr	r5, .L1487
+	bcc	.L1380
+	ldr	r5, .L1393
 	mov	r4, #0
-	ldr	r6, .L1487+12
-	ldr	r0, [r5, #2164]
+	ldr	r6, .L1393+12
+	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-	b	.L1475
-.L1477:
+	b	.L1381
+.L1383:
 	uxtb	r0, r4
 	bl	FlashWaitCmdDone
 	cmp	sl, #1
-	bne	.L1476
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
+	bne	.L1382
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1476
+	beq	.L1382
 	ldrb	r0, [r6, r4, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L1476:
+.L1382:
 	add	r4, r4, #1
-.L1475:
-	ldrb	r3, [r5, #3766]	@ zero_extendqisi2
+.L1381:
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcc	.L1477
+	bcc	.L1383
 	ldr	r2, [sp, #16]
 	cmp	r2, #0
 	ldreq	r0, [sp, #16]
-	beq	.L1462
+	beq	.L1367
 	mov	r5, #0
-	ldr	r4, .L1487+16
+	ldr	r4, .L1393+16
 	ldr	r6, [sp, #8]
-	b	.L1478
-.L1483:
+	b	.L1384
+.L1389:
 	ldr	r3, [r9, #0]
 	cmn	r3, #1
-	bne	.L1479
+	bne	.L1385
 	ldr	r1, [r9, #4]
-	ldr	r0, .L1487+20
+	ldr	r0, .L1393+20
 	bl	printk
-	b	.L1480
-.L1479:
+	b	.L1386
+.L1385:
 	rsb	r3, r5, r6
 	mov	r1, sl
 	add	r2, sp, #28
@@ -12696,12 +11847,12 @@ FlashProgPages:
 	str	r3, [sp, #0]
 	add	r3, sp, #32
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r4, #152]
+	ldr	r2, [r4, #196]
 	mov	r3, #0
 	mov	lr, r9
 	add	ip, sp, #36
 	str	r3, [r2, #0]
-	ldr	r2, [r4, #156]
+	ldr	r2, [r4, #200]
 	str	r3, [r2, #0]
 	ldmia	lr!, {r0, r1, r2, r3}
 	stmia	ip!, {r0, r1, r2, r3}
@@ -12712,63 +11863,63 @@ FlashProgPages:
 	mov	r1, #1
 	mov	r2, sl
 	str	r3, [ip, #0]
-	ldr	r3, [r4, #152]
+	ldr	r3, [r4, #196]
 	str	r3, [sp, #44]
-	ldr	r3, [r4, #156]
+	ldr	r3, [r4, #200]
 	str	r3, [sp, #48]
 	bl	FlashReadPages
 	ldr	r7, [sp, #36]
 	cmn	r7, #1
-	bne	.L1481
-	ldr	r0, .L1487+24
+	bne	.L1387
+	ldr	r0, .L1393+24
 	ldr	r1, [r9, #4]
 	bl	printk
 	str	r7, [r9, #0]
-.L1481:
+.L1387:
 	ldr	r3, [r9, #12]
 	cmp	r3, #0
-	beq	.L1482
+	beq	.L1388
 	ldr	r2, [r3, #0]
-	ldr	r3, [r4, #156]
+	ldr	r3, [r4, #200]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1482
-	ldr	r0, .L1487+28
+	beq	.L1388
+	ldr	r0, .L1393+28
 	ldr	r1, [r9, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r9, #0]
-.L1482:
+.L1388:
 	ldr	r3, [r9, #8]
 	cmp	r3, #0
-	beq	.L1480
+	beq	.L1386
 	ldr	r2, [r3, #0]
-	ldr	r3, [r4, #152]
+	ldr	r3, [r4, #196]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1480
-	ldr	r0, .L1487+32
+	beq	.L1386
+	ldr	r0, .L1393+32
 	ldr	r1, [r9, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r9, #0]
-.L1480:
+.L1386:
 	add	r5, r5, #1
 	add	r9, r9, #36
-.L1478:
+.L1384:
 	cmp	r5, r6
-	bne	.L1483
+	bne	.L1389
 	mov	r0, #0
-.L1462:
+.L1367:
 	add	sp, sp, #76
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1488:
+.L1394:
 	.align	2
-.L1487:
+.L1393:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
-	.word	.LANCHOR0+2912
-	.word	.LANCHOR0+2780
+	.word	.LANCHOR0+4
+	.word	.LANCHOR0+3628
 	.word	.LANCHOR2
 	.word	.LC99
 	.word	.LC100
@@ -12785,194 +11936,204 @@ FtlVpcTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
-	mov	r8, #0
-	ldr	r4, .L1498
+	mov	r6, #0
+	ldr	r4, .L1406
 	mov	r1, #255
-	ldr	r6, .L1498+4
-	movw	sl, #3852
-	ldr	r7, .L1498+8
-	ldr	r3, [r4, #-2076]
-	ldr	r5, [r4, #-952]
-	str	r3, [r4, #176]
-	ldrh	r3, [r4, r6]
-	str	r5, [r4, #180]
-	str	r8, [r5, #12]
+	ldr	r8, .L1406+4
+	movw	sl, #3848
+	ldr	r7, .L1406+8
+	ldr	r3, [r4, #-2080]
+	ldr	r5, [r4, #-956]
+	str	r3, [r4, #164]
+	ldrh	r3, [r4, r8]
+	str	r5, [r4, #168]
+	str	r6, [r5, #12]
 	strh	r3, [r5, #2]	@ movhi
-	ldr	r3, .L1498+12
+	ldr	r3, .L1406+12
 	strh	r3, [r5, #0]	@ movhi
-	ldr	r3, [r4, #-1760]
-	str	r8, [r5, #8]
+	ldr	r3, [r4, #-1764]
+	str	r6, [r5, #8]
 	str	r3, [r5, #4]
-	ldr	r3, .L1498+16
+	ldr	r3, .L1406+16
+	str	r3, [r4, #-1824]
+	ldr	r3, .L1406+20
 	str	r3, [r4, #-1820]
-	ldr	r3, .L1498+20
-	str	r3, [r4, #-1816]
-	ldr	r3, .L1498+24
+	ldr	r3, .L1406+24
 	ldrh	r2, [r4, r3]
 	sub	r3, r3, #50
 	strh	r2, [r4, r3]	@ movhi
-	movw	r3, #3866
+	movw	r3, #3862
 	ldrh	r3, [r7, r3]
-	strb	r3, [r4, #-1810]
-	ldr	r3, .L1498+28
+	strb	r3, [r4, #-1814]
+	ldr	r3, .L1406+28
 	ldrh	r2, [r4, r3]
 	add	r3, r3, #238
 	strh	r2, [r4, r3]	@ movhi
 	sub	r3, r3, #236
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-2038]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-2042]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1498+32
+	ldr	r3, .L1406+32
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-2036]	@ zero_extendqisi2
-	strb	r3, [r4, #-1809]
-	ldr	r3, .L1498+36
+	ldrb	r3, [r4, #-2040]	@ zero_extendqisi2
+	strb	r3, [r4, #-1813]
+	ldr	r3, .L1406+36
 	ldrh	r2, [r4, r3]
 	add	r3, r3, #194
 	strh	r2, [r4, r3]	@ movhi
 	sub	r3, r3, #192
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-1990]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-1994]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1498+40
+	ldr	r3, .L1406+40
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-1988]	@ zero_extendqisi2
-	strb	r3, [r4, #-1808]
-	ldr	r3, .L1498+44
+	ldrb	r3, [r4, #-1992]	@ zero_extendqisi2
+	strb	r3, [r4, #-1812]
+	ldr	r3, .L1406+44
 	ldrh	r2, [r4, r3]
 	add	r3, r3, #150
 	strh	r2, [r4, r3]	@ movhi
 	sub	r3, r3, #148
-	ldr	r0, [r4, #176]
+	ldr	r0, [r4, #164]
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-1942]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-1946]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1498+48
+	ldr	r3, .L1406+48
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-1940]	@ zero_extendqisi2
-	strb	r3, [r4, #-1807]
-	ldr	r3, [r4, #-1840]
-	str	r3, [r4, #-1788]
-	ldr	r3, [r4, #-1848]
-	str	r3, [r4, #-1780]
+	ldrb	r3, [r4, #-1944]	@ zero_extendqisi2
+	strb	r3, [r4, #-1811]
 	ldr	r3, [r4, #-1844]
+	str	r3, [r4, #-1792]
+	ldr	r3, [r4, #-1852]
 	str	r3, [r4, #-1784]
-	movw	r3, #3922
+	ldr	r3, [r4, #-1848]
+	str	r3, [r4, #-1788]
+	movw	r3, #3918
 	ldrh	r2, [r7, r3]
 	bl	ftl_memset
-	ldr	r1, .L1498+52
+	sub	r1, r4, #1824
 	mov	r2, #48
-	ldr	r0, [r4, #176]
+	ldr	r0, [r4, #164]
 	bl	memcpy
 	ldrh	r2, [r7, sl]
-	ldr	r0, [r4, #176]
-	ldr	r1, [r4, #-2064]
+	ldr	r0, [r4, #164]
+	ldr	r1, [r4, #-2068]
 	mov	r2, r2, asl #1
 	add	r0, r0, #48
 	bl	memcpy
 	ldrh	r2, [r7, sl]
-	ldr	r3, [r4, #176]
+	ldr	r3, [r4, #164]
+	movw	sl, #65535
 	add	r0, r2, #24
-	ldr	r1, [r4, #-1888]
+	ldr	r1, [r4, #-1892]
 	mov	r2, r2, lsr #3
 	mov	r0, r0, lsr #1
 	add	r2, r2, #4
 	add	r0, r3, r0, asl #2
 	bl	memcpy
-	mov	r0, r8
+	mov	r0, r6
 	bl	FtlUpdateVaildLpn
-	movw	r8, #65535
-.L1497:
-	ldr	r3, [r4, #-2076]
+.L1405:
+	ldr	r3, [r4, #-2080]
 	mov	r1, #1
-	ldr	r7, .L1498+56
-	ldrh	r2, [r4, r6]
-	str	r3, [r4, #176]
-	ldr	r3, [r4, #-952]
-	ldr	r0, .L1498+60
-	str	r3, [r4, #180]
+	ldr	r7, .L1406+52
+	ldrh	r2, [r4, r8]
+	str	r3, [r4, #164]
+	ldr	r3, [r4, #-956]
+	ldr	r0, .L1406+56
+	str	r3, [r4, #168]
 	ldrh	r3, [r4, r7]
 	orr	r3, r3, r2, asl #10
 	mov	r2, r1
-	str	r3, [r4, #172]
+	str	r3, [r4, #160]
 	mov	r3, r1
 	bl	FlashProgPages
-	ldr	r1, .L1498+8
-	movw	r3, #3914
+	ldr	r1, .L1406+8
+	movw	r3, #3910
 	ldrh	r2, [r4, r7]
 	ldrh	r3, [r1, r3]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1491
-	ldr	r3, .L1498+64
-	ldrh	r2, [r4, r6]
-	ldrh	r8, [r4, r3]
+	blt	.L1397
+	ldr	r3, .L1406+60
+	ldrh	r2, [r4, r8]
+	ldrh	sl, [r4, r3]
 	strh	r2, [r4, r3]	@ movhi
 	mov	r3, #0
 	strh	r3, [r4, r7]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, [r4, #-1848]
+	ldr	r3, [r4, #-1852]
 	mov	r1, #1
 	add	r2, r3, #1
-	str	r2, [r4, #-1848]
-	str	r3, [r4, #-1760]
+	str	r2, [r4, #-1852]
+	str	r3, [r4, #-1764]
 	mov	r2, r0, asl #10
-	strh	r0, [r4, r6]	@ movhi
-	str	r2, [r4, #172]
+	strh	r0, [r4, r8]	@ movhi
+	str	r2, [r4, #160]
 	mov	r2, r1
 	str	r3, [r5, #4]
 	mov	r3, r1
 	strh	r0, [r5, #2]	@ movhi
-	ldr	r0, .L1498+60
+	ldr	r0, .L1406+56
 	bl	FlashProgPages
-.L1491:
-	ldr	r2, .L1498+56
-	ldr	r1, [r4, #168]
+.L1397:
+	ldr	r2, .L1406+52
+	ldr	r1, [r4, #156]
 	ldrh	r3, [r4, r2]
 	cmn	r1, #1
 	add	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r4, r2]	@ movhi
-	bne	.L1492
+	bne	.L1398
 	cmp	r3, #1
-	ldreq	r1, .L1498+8
-	movweq	r3, #3914
+	add	r6, r6, #1
+	ldreq	r1, .L1406+8
+	movweq	r3, #3910
+	uxth	r6, r6
 	ldreqh	r3, [r1, r3]
 	subeq	r3, r3, #1
 	streqh	r3, [r4, r2]	@ movhi
-	b	.L1497
-.L1492:
+	cmp	r6, #3
+	bls	.L1405
+	ldr	r3, .L1406
+	mov	r2, r6
+	ldr	r0, .L1406+64
+	ldr	r1, [r3, #160]
+	bl	printk
+.L1401:
+	b	.L1401
+.L1398:
 	cmp	r3, #1
-	beq	.L1497
+	beq	.L1405
 	movw	r3, #65535
-	cmp	r8, r3
-	beq	.L1494
-	mov	r0, r8
+	cmp	sl, r3
+	beq	.L1402
+	mov	r0, sl
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L1494:
+.L1402:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1499:
+.L1407:
 	.align	2
-.L1498:
+.L1406:
 	.word	.LANCHOR2
-	.word	-1768
+	.word	-1772
 	.word	.LANCHOR0
 	.word	-3932
 	.word	1179929683
-	.word	1342177334
-	.word	-1762
-	.word	-2044
+	.word	1342177344
+	.word	-1766
+	.word	-2048
+	.word	-1808
+	.word	-2000
 	.word	-1804
-	.word	-1996
+	.word	-1952
 	.word	-1800
-	.word	-1948
-	.word	-1796
-	.word	.LANCHOR2-1820
-	.word	-1766
-	.word	.LANCHOR2+168
-	.word	-1764
+	.word	-1770
+	.word	.LANCHOR2+156
+	.word	-1768
+	.word	.LC103
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	2
@@ -12985,142 +12146,153 @@ FtlBbmTblFlush:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r1, #0
-	ldr	r7, .L1509
+	ldr	r7, .L1420
 	mov	r6, #0
-	ldr	sl, .L1509+4
-	movw	r9, #3866
-	ldr	r8, .L1509+8
-	ldr	r3, [r7, #-952]
-	ldr	r0, [r7, #-2076]
-	str	r3, [r7, #180]
-	movw	r3, #3922
-	str	r0, [r7, #176]
+	ldr	sl, .L1420+4
+	movw	r9, #3862
+	ldr	r3, [r7, #-956]
+	add	r8, sl, #4000
+	ldr	r0, [r7, #-2080]
+	str	r3, [r7, #168]
+	movw	r3, #3918
+	str	r0, [r7, #164]
 	ldrh	r2, [sl, r3]
 	bl	ftl_memset
-	b	.L1501
-.L1502:
-	ldr	r3, .L1509+12
+	b	.L1409
+.L1410:
+	ldr	r3, .L1420+8
 	ldr	r1, [r8, #4]!
 	ldrh	r2, [r7, r3]
-	ldr	r3, [r7, #176]
+	ldr	r3, [r7, #164]
 	mul	r0, r2, r6
 	mov	r2, r2, asl #2
 	add	r6, r6, #1
 	add	r0, r3, r0, asl #2
 	bl	memcpy
-.L1501:
+.L1409:
 	ldrh	r3, [sl, r9]
-	ldr	r4, .L1509+4
+	ldr	r4, .L1420+4
 	cmp	r6, r3
-	ldr	r5, .L1509
-	blt	.L1502
-	ldr	r6, [r5, #180]
+	ldr	r5, .L1420
+	blt	.L1410
+	ldr	r6, [r5, #168]
 	mov	r1, #255
 	mov	r2, #16
 	mov	r7, #0
 	mov	fp, r7
 	mov	r0, r6
 	bl	ftl_memset
-	ldr	r3, .L1509+16
+	ldr	r3, .L1420+12
 	strh	r3, [r6, #0]	@ movhi
-	ldr	r3, [r4, #3988]
+	ldr	r3, [r4, #3984]
 	str	r3, [r6, #4]
-	movw	r3, #3980
+	movw	r3, #3976
 	ldrh	r3, [r4, r3]
 	strh	r3, [r6, #2]	@ movhi
-	mov	r3, #3984
+	movw	r3, #3980
 	ldrh	r3, [r4, r3]
 	strh	r3, [r6, #8]	@ movhi
-	movw	r3, #3986
+	movw	r3, #3982
 	ldrh	r3, [r4, r3]
 	strh	r3, [r6, #10]	@ movhi
-	ldr	r3, [r4, #3840]
+	ldr	r3, [r4, #3836]
 	strh	r3, [r6, #12]	@ movhi
-	b	.L1508
-.L1507:
-	mov	r7, #1
-.L1508:
-	ldr	r3, [r5, #-2076]
-	movw	r8, #3980
-	ldr	r4, .L1509+4
-	movw	sl, #3982
-	mov	r9, #3984
-	str	r3, [r5, #176]
-	ldr	r3, [r5, #-952]
+	b	.L1419
+.L1416:
+	mov	fp, #1
+.L1419:
+	ldr	r3, [r5, #-2080]
+	movw	r8, #3976
+	ldr	r4, .L1420+4
+	mov	r1, #0
+	movw	sl, #3978
+	str	r1, [r5, #156]
+	str	r3, [r5, #164]
+	movw	r9, #3980
+	ldr	r3, [r5, #-956]
 	ldrh	r1, [r4, r8]
 	ldrh	r2, [r4, sl]
-	str	r3, [r5, #180]
-	mov	r3, #0
-	ldrh	r0, [r6, #10]
 	str	r3, [r5, #168]
+	ldrh	r0, [r6, #10]
 	orr	r3, r2, r1, asl #10
-	str	r3, [r5, #172]
-	str	r0, [sp, #0]
+	str	r3, [r5, #160]
 	ldrh	r3, [r4, r9]
-	ldr	r0, .L1509+20
+	str	r0, [sp, #0]
+	ldr	r0, .L1420+16
 	bl	printk
 	mov	r1, #1
 	mov	r2, r1
 	mov	r3, r1
-	ldr	r0, .L1509+24
+	ldr	r0, .L1420+20
 	bl	FlashProgPages
-	movw	r3, #3914
+	movw	r3, #3910
 	ldrh	r3, [r4, r3]
 	ldrh	r2, [r4, sl]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1504
-	ldr	r3, [r4, #3988]
-	mov	r1, #1
+	blt	.L1412
+	ldr	r3, [r4, #3984]
+	mov	r1, #0	@ movhi
 	ldrh	r2, [r4, r8]
 	add	r3, r3, #1
-	ldr	r0, [r5, #-2088]
-	str	r3, [r4, #3988]
+	ldr	r0, [r5, #-2092]
+	str	r3, [r4, #3984]
 	str	r3, [r6, #4]
 	ldrh	r3, [r4, r9]
+	strh	r1, [r4, sl]	@ movhi
+	mov	r1, #1
 	strh	r2, [r6, #8]	@ movhi
 	strh	r2, [r4, r9]	@ movhi
 	mov	r2, r1
 	strh	r3, [r4, r8]	@ movhi
 	mov	r3, r3, asl #10
-	str	r3, [r5, #172]
+	str	r3, [r5, #160]
 	str	r3, [r0, #4]
-	strh	fp, [r4, sl]	@ movhi
 	bl	FlashEraseBlocks
 	mov	r1, #1
-	ldr	r0, .L1509+24
+	ldr	r0, .L1420+20
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
-.L1504:
-	ldr	r2, .L1509+4
-	movw	r3, #3982
+.L1412:
+	ldr	r2, .L1420+4
+	movw	r3, #3978
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r5, #168]
+	ldr	r3, [r5, #156]
 	cmn	r3, #1
-	bne	.L1505
-	ldr	r1, [r5, #172]
-	ldr	r0, .L1509+28
+	bne	.L1413
+	add	r7, r7, #1
+	ldr	r0, .L1420+24
+	ldr	r1, [r5, #160]
+	uxth	r7, r7
 	bl	printk
-	b	.L1508
-.L1505:
-	cmp	r7, #0
-	beq	.L1507
+	cmp	r7, #3
+	bls	.L1419
+	ldr	r3, .L1420
+	mov	r2, r7
+	ldr	r0, .L1420+28
+	ldr	r1, [r3, #160]
+	bl	printk
+.L1415:
+	b	.L1415
+.L1413:
+	cmp	fp, #0
+	beq	.L1416
 	mov	r0, #0
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1510:
+.L1421:
 	.align	2
-.L1509:
+.L1420:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR0+4004
-	.word	-1032
+	.word	-1036
 	.word	-3887
-	.word	.LC103
-	.word	.LANCHOR2+168
 	.word	.LC104
+	.word	.LANCHOR2+156
+	.word	.LC105
+	.word	.LC106
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
@@ -13133,79 +12305,77 @@ FtlGcFreeBadSuperBlk:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r9, r0
-	ldr	r4, .L1521
-	ldr	r3, .L1521+4
+	ldr	r4, .L1432
+	ldr	r3, .L1432+4
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
 	movne	r6, #0
 	movne	sl, r4
-	bne	.L1512
-	b	.L1513
-.L1519:
+	bne	.L1423
+	b	.L1424
+.L1430:
 	add	r3, r3, r6
 	mov	r1, r9
 	mov	r5, #0
-	ldr	r7, .L1521+4
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldr	r7, .L1432+4
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	b	.L1514
-.L1518:
+	b	.L1425
+.L1429:
 	add	r3, r4, r5, asl #1
-	sub	r3, r3, #1120
-	sub	r3, r3, #12
+	sub	r3, r3, #1136
 	ldrh	r3, [r3, #0]
 	cmp	r3, r8
-	bne	.L1515
+	bne	.L1426
 	mov	r1, r8
-	ldr	r0, .L1521+8
+	ldr	r0, .L1432+8
 	bl	printk
 	mov	r0, r8
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldrh	r1, [r4, r7]
+	ldrh	r2, [r4, r7]
 	mov	r3, r5
-	b	.L1516
-.L1517:
-	add	r0, r3, #1
+	b	.L1427
+.L1428:
+	add	r1, r3, #1
 	add	r3, r4, r3, asl #1
-	sub	r3, r3, #1120
-	add	r2, r4, r0, asl #1
-	sub	r2, r2, #1120
-	sub	r2, r2, #12
-	ldrh	r2, [r2, #0]
-	strh	r2, [r3, #-12]	@ movhi
-	uxth	r3, r0
-.L1516:
-	cmp	r3, r1
-	bcc	.L1517
-	sub	r1, r1, #1
-	strh	r1, [sl, r7]	@ movhi
-.L1515:
+	sub	r3, r3, #1136
+	add	r0, r4, r1, asl #1
+	sub	r0, r0, #1136
+	ldrh	r0, [r0, #0]
+	strh	r0, [r3, #0]	@ movhi
+	uxth	r3, r1
+.L1427:
+	cmp	r3, r2
+	bcc	.L1428
+	sub	r2, r2, #1
+	strh	r2, [sl, r7]	@ movhi
+.L1426:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L1514:
+.L1425:
 	ldrh	r3, [r4, r7]
 	cmp	r3, r5
-	bhi	.L1518
+	bhi	.L1429
 	add	r6, r6, #1
 	uxth	r6, r6
-.L1512:
-	ldr	r3, .L1521+12
-	movw	r2, #3844
+.L1423:
+	ldr	r3, .L1432+12
+	mov	r2, #3840
 	ldrh	r2, [r3, r2]
 	cmp	r2, r6
-	bhi	.L1519
+	bhi	.L1430
 	bl	FtlGcReFreshBadBlk
-.L1513:
+.L1424:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L1522:
+.L1433:
 	.align	2
-.L1521:
+.L1432:
 	.word	.LANCHOR2
-	.word	-1134
-	.word	.LC105
+	.word	-1138
+	.word	.LC107
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
@@ -13219,36 +12389,36 @@ update_vpc_list:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r2, r0, asl #1
-	ldr	r3, .L1531
+	ldr	r3, .L1442
 	mov	r4, r0
-	ldr	r1, [r3, #-2064]
+	ldr	r1, [r3, #-2068]
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	bne	.L1524
-	ldr	r1, .L1531+4
+	bne	.L1435
+	ldr	r1, .L1442+4
 	ldrh	r0, [r3, r1]
 	cmp	r0, r4
 	mvneq	r2, #0
 	streqh	r2, [r3, r1]	@ movhi
-	beq	.L1526
-	ldr	r1, .L1531+8
+	beq	.L1437
+	ldr	r1, .L1442+8
 	ldrh	r1, [r3, r1]
 	cmp	r1, r4
-	beq	.L1527
-	ldr	r1, .L1531+12
+	beq	.L1438
+	ldr	r1, .L1442+12
 	ldrh	r1, [r3, r1]
 	cmp	r1, r4
-	beq	.L1527
-	ldr	r1, .L1531+16
+	beq	.L1438
+	ldr	r1, .L1442+16
 	ldrh	r3, [r3, r1]
 	cmp	r3, r4
-	beq	.L1527
-.L1526:
+	beq	.L1438
+.L1437:
 	mov	r1, r4
-	ldr	r0, .L1531+20
+	ldr	r0, .L1442+20
 	bl	List_remove_node
-	ldr	r5, .L1531
-	ldr	r3, .L1531+24
+	ldr	r5, .L1442
+	ldr	r3, .L1442+24
 	mov	r0, r4
 	ldrh	r2, [r5, r3]
 	sub	r2, r2, #1
@@ -13257,23 +12427,23 @@ update_vpc_list:
 	mov	r0, r4
 	bl	FtlGcFreeBadSuperBlk
 	mov	r2, #1
-	b	.L1527
-.L1524:
+	b	.L1438
+.L1435:
 	bl	List_update_data_list
 	mov	r2, #0
-.L1527:
+.L1438:
 	mov	r0, r2
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1532:
+.L1443:
 	.align	2
-.L1531:
+.L1442:
 	.word	.LANCHOR2
-	.word	-1756
-	.word	-2044
-	.word	-1996
-	.word	-1948
-	.word	.LANCHOR2-2068
-	.word	-2056
+	.word	-1760
+	.word	-2048
+	.word	-2000
+	.word	-1952
+	.word	.LANCHOR2-2072
+	.word	-2060
 	.fnend
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
@@ -13288,46 +12458,46 @@ decrement_vpc_count:
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r5, r0
-	beq	.L1534
-	ldr	r2, .L1539
+	beq	.L1445
+	ldr	r2, .L1450
 	mov	r3, r0, asl #1
-	ldr	r2, [r2, #-2064]
+	ldr	r2, [r2, #-2068]
 	ldrh	r4, [r2, r3]
 	cmp	r4, #0
 	subne	r4, r4, #1
 	strneh	r4, [r2, r3]	@ movhi
-	bne	.L1534
-	ldr	r0, .L1539+4
+	bne	.L1445
+	ldr	r0, .L1450+4
 	mov	r1, r5
 	mov	r2, r4
 	bl	printk
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1534:
-	ldr	r7, .L1539
+.L1445:
+	ldr	r7, .L1450
 	movw	r3, #65535
-	ldr	r6, .L1539+8
+	ldr	r6, .L1450+8
 	ldrh	r0, [r7, r6]
 	cmp	r0, r3
 	streqh	r5, [r7, r6]	@ movhi
 	moveq	r0, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	cmp	r0, r5
-	beq	.L1538
+	beq	.L1449
 	bl	update_vpc_list
 	strh	r5, [r7, r6]	@ movhi
 	adds	r0, r0, #0
 	movne	r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1538:
+.L1449:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1540:
+.L1451:
 	.align	2
-.L1539:
+.L1450:
 	.word	.LANCHOR2
-	.word	.LC106
-	.word	-1024
+	.word	.LC108
+	.word	-1028
 	.fnend
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
@@ -13344,14 +12514,14 @@ get_new_active_ppa:
 	mov	r4, r0
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	movw	r6, #65535
-	ldr	r5, .L1553
-	ldr	r7, .L1553+4
+	ldr	r5, .L1464
+	ldr	r7, .L1464+4
 	add	r3, r0, r3, asl #1
 	ldrh	r3, [r3, #16]
-	b	.L1542
-.L1543:
+	b	.L1453
+.L1454:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	movw	r2, #3844
+	mov	r2, #3840
 	ldrh	r2, [r5, r2]
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -13365,28 +12535,28 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r3, [r3, #16]
-.L1542:
+.L1453:
 	cmp	r3, r6
-	beq	.L1543
+	beq	.L1454
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r2, #1
-	bne	.L1545
-	ldrb	r2, [r5, #80]	@ zero_extendqisi2
+	bne	.L1456
+	ldrb	r2, [r5, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1545
+	bne	.L1456
 	ldrh	r2, [r4, #2]
 	add	r2, r7, r2, asl #1
-	sub	r2, r2, #912
+	sub	r2, r2, #916
 	ldrh	r2, [r2, #0]
 	cmp	r2, r6
-	bne	.L1545
+	bne	.L1456
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4, #0]
 	sub	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L1543
-.L1545:
+	b	.L1454
+.L1456:
 	ldrh	r6, [r4, #2]
 	movw	r5, #65535
 	mov	r7, r5
@@ -13394,12 +12564,12 @@ get_new_active_ppa:
 	ldrh	r3, [r4, #4]
 	sub	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
-.L1550:
-	ldr	r2, .L1553
-	movw	r3, #3844
+.L1461:
+	ldr	r2, .L1464
+	mov	r3, #3840
 	ldrh	r2, [r2, r3]
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-.L1547:
+.L1458:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r2
@@ -13410,39 +12580,39 @@ get_new_active_ppa:
 	add	r1, r4, r3, asl #1
 	ldrh	r1, [r1, #16]
 	cmp	r1, r5
-	beq	.L1547
+	beq	.L1458
 	strb	r3, [r4, #6]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L1548
-	ldr	r3, .L1553
-	ldrb	r2, [r3, #80]	@ zero_extendqisi2
+	bne	.L1459
+	ldr	r3, .L1464
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
 	ldrh	r2, [r4, #2]
-	bne	.L1551
-	ldr	r3, .L1553+4
+	bne	.L1462
+	ldr	r3, .L1464+4
 	add	r2, r3, r2, asl #1
-	sub	r2, r2, #912
+	sub	r2, r2, #916
 	ldrh	r3, [r2, #0]
 	cmp	r3, r7
-	bne	.L1548
+	bne	.L1459
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1548
+	beq	.L1459
 	sub	r3, r3, #1
 	ldrh	r0, [r4, #0]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L1550
-.L1551:
-	movw	r1, #3914
+	b	.L1461
+.L1462:
+	movw	r1, #3910
 	ldrh	r1, [r3, r1]
 	cmp	r2, r1
-	bcc	.L1548
-	ldr	r1, .L1553+4
+	bcc	.L1459
+	ldr	r1, .L1464+4
 	ldrh	r2, [r4, #0]
 	ldrh	r0, [r4, #4]
-	ldr	r1, [r1, #-2064]
+	ldr	r1, [r1, #-2068]
 	mov	r2, r2, asl #1
 	ldrh	ip, [r1, r2]
 	rsb	r0, r0, ip
@@ -13450,23 +12620,23 @@ get_new_active_ppa:
 	mov	r2, #0
 	strh	r2, [r4, #4]	@ movhi
 	mov	r1, r2	@ movhi
-	movw	r2, #3912
+	movw	r2, #3908
 	ldrh	r3, [r3, r2]
 	strb	r1, [r4, #6]
 	strh	r3, [r4, #2]	@ movhi
-.L1548:
+.L1459:
 	mov	r0, r6
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1554:
+.L1465:
 	.align	2
-.L1553:
+.L1464:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
-	.type	FtlSlcSuperblockCheck.part.17, %function
-FtlSlcSuperblockCheck.part.17:
+	.type	FtlSlcSuperblockCheck.part.16, %function
+FtlSlcSuperblockCheck.part.16:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -13475,14 +12645,14 @@ FtlSlcSuperblockCheck.part.17:
 	mov	r4, r0
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	movw	r6, #65535
-	ldr	r5, .L1561
-	ldr	r7, .L1561+4
+	ldr	r5, .L1472
+	ldr	r7, .L1472+4
 	add	r3, r0, r3, asl #1
 	ldrh	r3, [r3, #16]
-	b	.L1556
-.L1557:
+	b	.L1467
+.L1468:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	movw	r2, #3844
+	mov	r2, #3840
 	ldrh	r2, [r5, r2]
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -13496,21 +12666,21 @@ FtlSlcSuperblockCheck.part.17:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r3, [r3, #16]
-.L1556:
+.L1467:
 	cmp	r3, r6
-	beq	.L1557
+	beq	.L1468
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r2, #1
-	bne	.L1559
-	ldrb	r3, [r5, #80]	@ zero_extendqisi2
+	bne	.L1470
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1559
+	bne	.L1470
 	ldrh	r3, [r4, #2]
 	add	r3, r7, r3, asl #1
-	sub	r3, r3, #912
+	sub	r3, r3, #916
 	ldrh	r3, [r3, #0]
 	cmp	r3, r6
-	bne	.L1559
+	bne	.L1470
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4, #0]
 	sub	r3, r3, #1
@@ -13518,28 +12688,28 @@ FtlSlcSuperblockCheck.part.17:
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1557
+	bne	.L1468
 	ldrh	r2, [r4, #2]
 	strb	r3, [r4, #6]
 	add	r2, r2, #1
 	strh	r2, [r4, #2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1559:
-	ldr	r3, .L1561
-	ldrb	r1, [r3, #80]	@ zero_extendqisi2
+.L1470:
+	ldr	r3, .L1472
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
 	cmp	r1, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	cmp	r2, #1
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
-	movw	r2, #3914
+	movw	r2, #3910
 	ldrh	r1, [r4, #2]
 	ldrh	r2, [r3, r2]
 	cmp	r1, r2
 	ldmccfd	sp!, {r3, r4, r5, r6, r7, pc}
-	ldr	r1, .L1561+4
+	ldr	r1, .L1472+4
 	ldrh	r2, [r4, #0]
 	ldrh	r0, [r4, #4]
-	ldr	r1, [r1, #-2064]
+	ldr	r1, [r1, #-2068]
 	mov	r2, r2, asl #1
 	ldrh	ip, [r1, r2]
 	rsb	r0, r0, ip
@@ -13547,18 +12717,18 @@ FtlSlcSuperblockCheck.part.17:
 	mov	r2, #0
 	strh	r2, [r4, #4]	@ movhi
 	mov	r1, r2	@ movhi
-	movw	r2, #3912
+	movw	r2, #3908
 	ldrh	r3, [r3, r2]
 	strb	r1, [r4, #6]
 	strh	r3, [r4, #2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1562:
+.L1473:
 	.align	2
-.L1561:
+.L1472:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
-	.size	FtlSlcSuperblockCheck.part.17, .-FtlSlcSuperblockCheck.part.17
+	.size	FtlSlcSuperblockCheck.part.16, .-FtlSlcSuperblockCheck.part.16
 	.align	2
 	.global	FtlSlcSuperblockCheck
 	.type	FtlSlcSuperblockCheck, %function
@@ -13567,10 +12737,14 @@ FtlSlcSuperblockCheck:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldrh	r3, [r0, #4]
-	cmp	r3, #0
+	ldrh	r2, [r0, #4]
+	cmp	r2, #0
+	bxeq	lr
+	ldrh	r2, [r0, #0]
+	movw	r3, #65535
+	cmp	r2, r3
 	bxeq	lr
-	b	FtlSlcSuperblockCheck.part.17
+	b	FtlSlcSuperblockCheck.part.16
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
@@ -13584,107 +12758,104 @@ allocate_data_superblock:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r4, .L1599
+	ldr	r4, .L1509
 	mov	r5, r0
-	mov	r7, r4
-.L1595:
-	ldr	r3, .L1599+4
+	ldr	r8, .L1509+4
+.L1506:
+	ldr	r3, .L1509+8
 	cmp	r5, r3
-	bne	.L1567
-	ldr	r3, .L1599+8
-	ldrh	r2, [r4, r3]
-	ldr	r3, [r4, #-1180]
+	bne	.L1478
+	ldrh	r2, [r4, r8]
+	ldr	r3, [r4, #-1184]
 	mov	r1, r2, lsr #1
 	mul	ip, r3, r2
 	add	r0, r1, #1
 	add	r0, r0, ip, lsr #2
-	ldr	ip, [r4, #-1884]
+	ldr	ip, [r4, #-1888]
 	cmp	ip, #0
 	uxth	r0, r0
-	beq	.L1589
-	ldr	ip, [r4, #-1824]
+	beq	.L1500
+	ldr	ip, [r4, #-1828]
 	cmp	ip, #29
-	bhi	.L1589
+	bhi	.L1500
 	cmp	ip, #2
-	bls	.L1594
+	bls	.L1505
 	tst	r2, #1
-	beq	.L1568
+	beq	.L1479
 	cmp	r3, #0
 	moveq	r1, r3
-	beq	.L1569
-	b	.L1568
-.L1567:
+	beq	.L1480
+	b	.L1479
+.L1478:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L1594
-	ldr	r3, .L1599+12
-	movw	r2, #3864
+	bne	.L1505
+	ldr	r3, .L1509+12
+	movw	r2, #3860
 	ldrh	r2, [r3, r2]
 	cmp	r2, #1
-	beq	.L1594
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	beq	.L1505
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1594
-	sub	r3, r3, #2048
-	ldr	r2, [r4, #-1884]
-	ldrh	r3, [r4, r3]
+	bne	.L1505
+	ldr	r2, [r4, #-1888]
+	ldrh	r3, [r4, r8]
 	cmp	r2, #0
 	mov	r1, r3, lsr #3
-	beq	.L1568
-	ldr	r2, [r4, #-1824]
+	beq	.L1479
+	ldr	r2, [r4, #-1828]
 	cmp	r2, #1
 	movls	r1, #7
 	mulls	r1, r1, r3
 	movls	r1, r1, lsr #3
-	b	.L1568
-.L1589:
+	b	.L1479
+.L1500:
 	mov	r1, r0
-.L1568:
+.L1479:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-	b	.L1569
-.L1594:
+	b	.L1480
+.L1505:
 	mov	r1, #0
-.L1569:
-	ldr	r0, .L1599+16
+.L1480:
+	ldr	r0, .L1509+16
 	bl	List_pop_index_node
-	ldr	r3, .L1599+8
-	ldrh	r2, [r4, r3]
-	sub	r2, r2, #1
-	strh	r2, [r4, r3]	@ movhi
+	ldrh	r3, [r4, r8]
+	sub	r3, r3, #1
+	strh	r3, [r4, r8]	@ movhi
 	uxth	r6, r0
 	mov	r0, r5
 	strh	r6, [r5, #0]	@ movhi
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1570
-	ldr	r2, .L1599+12
-	movw	r3, #3844
-	ldr	ip, [r4, #-2088]
+	beq	.L1481
+	ldr	r2, .L1509+12
+	mov	r3, #3840
+	ldr	ip, [r4, #-2092]
 	mov	fp, #0
 	mov	sl, r5
 	mov	r1, r5
-	ldrh	r8, [r2, r3]
+	ldrh	r7, [r2, r3]
 	mov	r0, fp
 	mov	r3, ip
 	mov	r2, fp
 	stmia	sp, {r5, ip}
-	b	.L1571
-.L1570:
-	ldr	r2, [r4, #-2064]
-	mov	r3, r6, asl #1
-	mvn	r1, #0
-	strh	r1, [r2, r3]	@ movhi
-	b	.L1596
-.L1574:
+	b	.L1482
+.L1481:
+	ldr	r3, [r4, #-2068]
+	mov	r6, r6, asl #1
+	mvn	r2, #0
+	strh	r2, [r3, r6]	@ movhi
+	b	.L1506
+.L1485:
 	str	r0, [r3, #8]
 	movw	r5, #65535
 	str	r0, [r3, #12]
 	ldrh	lr, [r1, #16]
 	cmp	lr, r5
-	beq	.L1573
+	beq	.L1484
 	ldr	r5, [sp, #4]
 	mov	ip, #36
 	mov	lr, lr, asl #10
@@ -13692,112 +12863,113 @@ allocate_data_superblock:
 	add	fp, fp, #1
 	uxth	fp, fp
 	str	lr, [r9, #4]
-.L1573:
+.L1484:
 	add	r2, r2, #1
 	add	r3, r3, #36
 	add	r1, r1, #2
 	uxth	r2, r2
-.L1571:
-	cmp	r2, r8
-	bne	.L1574
-	ldr	r3, [r4, #-1884]
+.L1482:
+	cmp	r2, r7
+	bne	.L1485
+	ldr	r3, [r4, #-1888]
 	ldr	r5, [sp, #0]
 	cmp	r3, #0
-	beq	.L1575
-	ldr	r3, .L1599+20
+	beq	.L1486
+	ldr	r3, .L1509+20
 	cmp	r5, r3
-	bne	.L1575
-	ldr	r2, [r4, #-2084]
+	bne	.L1486
+	ldr	r2, [r4, #-2088]
 	mov	r3, r6, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #30
 	movhi	r3, #0
-	strhib	r3, [r4, #-2036]
-.L1575:
+	strhib	r3, [r4, #-2040]
+.L1486:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #-2084]
+	ldr	r2, [r4, #-2088]
 	cmp	r3, #0
 	mov	r3, r6, asl #1
 	ldrh	r1, [r2, r3]
-	bne	.L1576
+	bne	.L1487
 	cmp	r1, #0
-	ldrne	ip, .L1599+12
-	movwne	r0, #3902
+	ldrne	ip, .L1509+12
+	movwne	r0, #3898
 	moveq	r1, #2
 	ldrneh	r0, [ip, r0]
 	addne	r1, r1, r0
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r4, #-1840]
+	ldr	r3, [r4, #-1844]
 	mov	r0, r6
 	mov	r1, #0
 	add	r3, r3, #1
-	str	r3, [r4, #-1840]
-	b	.L1598
-.L1576:
+	str	r3, [r4, #-1844]
+	b	.L1508
+.L1487:
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r4, #-1836]
+	ldr	r3, [r4, #-1840]
 	mov	r0, r6
 	mov	r1, #1
 	add	r3, r3, #1
-	str	r3, [r4, #-1836]
-.L1598:
+	str	r3, [r4, #-1840]
+.L1508:
 	bl	ftl_set_blk_mode
-	ldr	r3, [r4, #-2084]
+	ldr	r3, [r4, #-2088]
 	mov	r9, r6, asl #1
-	ldr	r2, [r4, #-1828]
-	ldr	r0, [r7, #-1840]
-	mov	r8, #0
+	ldr	r2, [r4, #-1832]
+	ldr	r7, .L1509
 	ldrh	r3, [r3, r9]
 	cmp	r3, r2
-	movw	r2, #3902
-	strhi	r3, [r4, #-1828]
-	ldr	r3, .L1599+12
+	movw	r2, #3898
+	strhi	r3, [r4, #-1832]
+	ldr	r3, .L1509+12
+	ldr	r0, [r7, #-1844]
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r7, #-1836]
+	ldr	r2, [r7, #-1840]
 	mla	r0, r0, r1, r2
-	movw	r2, #3852
+	movw	r2, #3848
 	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
-	ldr	r3, [r7, #-936]
+	ldr	r3, [r7, #-940]
 	ldr	r2, [r3, #16]
 	add	r2, r2, #1
 	str	r2, [r3, #16]
-	ldr	r3, [r7, #-2088]
-	str	r0, [r7, #-1832]
-	b	.L1581
-.L1582:
-	add	r8, r8, #1
+	ldr	r3, [r7, #-2092]
+	str	r0, [r7, #-1836]
+	mov	r7, #0
+	b	.L1492
+.L1493:
+	add	r7, r7, #1
 	ldr	r2, [r3, #-32]
-	uxth	r8, r8
+	uxth	r7, r7
 	bic	r2, r2, #1020
 	bic	r2, r2, #3
 	str	r2, [r3, #-32]
-.L1581:
-	cmp	r8, fp
+.L1492:
+	cmp	r7, fp
 	add	r3, r3, #36
-	bne	.L1582
-	mov	r2, r8
-	ldr	r0, [r4, #-2088]
+	bne	.L1493
+	mov	r2, r7
+	ldr	r0, [r4, #-2092]
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	fp, #0
 	bl	FlashEraseBlocks
 	mov	r2, #36
-	mul	r2, r2, r8
+	mul	r2, r2, r7
 	mov	r3, r6
 	mov	ip, r9
-	mov	r8, fp
+	mov	r7, fp
 	mov	r6, r5
 	mov	r9, r2
-	b	.L1583
-.L1585:
-	ldr	r1, [r4, #-2088]
+	b	.L1494
+.L1496:
+	ldr	r1, [r4, #-2092]
 	add	r0, r1, fp
 	ldr	r5, [r1, fp]
 	cmn	r5, #1
-	bne	.L1584
+	bne	.L1495
 	ldr	r0, [r0, #4]
-	add	r8, r8, #1
+	add	r7, r7, #1
 	str	r3, [sp, #12]
 	ubfx	r0, r0, #10, #16
 	str	ip, [sp, #8]
@@ -13808,62 +12980,59 @@ allocate_data_superblock:
 	strb	r1, [r6, #7]
 	ldr	ip, [sp, #8]
 	ldr	r3, [sp, #12]
-.L1584:
+.L1495:
 	add	fp, fp, #36
 	add	sl, sl, #2
-.L1583:
+.L1494:
 	cmp	fp, r9
-	bne	.L1585
-	cmp	r8, #0
+	bne	.L1496
+	cmp	r7, #0
 	mov	r5, r6
 	mov	r9, ip
 	mov	r6, r3
-	beq	.L1586
+	beq	.L1497
 	mov	r0, r3
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1586:
+.L1497:
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1587
-	ldr	r3, [r7, #-2064]
-	mvn	r2, #0
-	strh	r2, [r3, r9]	@ movhi
-.L1596:
-	mov	r0, r6
-	bl	INSERT_DATA_LIST
-	b	.L1595
-.L1587:
-	ldr	r1, .L1599+12
-	movw	r2, #3912
+	ldreq	r3, .L1509
+	mvneq	r2, #0
+	ldreq	r3, [r3, #-2068]
+	streqh	r2, [r3, r9]	@ movhi
+	beq	.L1506
+.L1498:
+	ldr	r1, .L1509+12
+	movw	r2, #3908
 	mov	r0, #0
 	strh	r0, [r5, #2]	@ movhi
 	strb	r0, [r5, #6]
 	ldrh	r2, [r1, r2]
 	strh	r6, [r5, #0]	@ movhi
 	mul	r2, r2, r3
-	ldr	r3, .L1599
-	ldr	r1, [r3, #-1848]
+	ldr	r3, .L1509
+	ldr	r1, [r3, #-1852]
 	uxth	r2, r2
 	strh	r2, [r5, #4]	@ movhi
 	str	r1, [r5, #12]
 	add	r1, r1, #1
-	str	r1, [r3, #-1848]
+	str	r1, [r3, #-1852]
 	ldrh	ip, [r5, #0]
-	ldr	r1, [r3, #-2064]
+	ldr	r1, [r3, #-2068]
 	mov	r3, ip, asl #1
 	strh	r2, [r1, r3]	@ movhi
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1600:
+.L1510:
 	.align	2
-.L1599:
+.L1509:
 	.word	.LANCHOR2
-	.word	.LANCHOR2-1948
-	.word	-2048
+	.word	-2052
+	.word	.LANCHOR2-1952
 	.word	.LANCHOR0
-	.word	.LANCHOR2-2052
-	.word	.LANCHOR2-2044
+	.word	.LANCHOR2-2056
+	.word	.LANCHOR2-2048
 	.fnend
 	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	2
@@ -13873,68 +13042,70 @@ FtlSuperblockPowerLostFix:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1608
+	ldr	r3, .L1518
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, r0
-	ldrb	r7, [r3, #80]	@ zero_extendqisi2
+	ldrb	r7, [r3, #928]	@ zero_extendqisi2
 	.pad #40
 	sub	sp, sp, #40
 	cmp	r7, #0
-	beq	.L1602
+	beq	.L1512
 	ldrb	r7, [r0, #8]	@ zero_extendqisi2
-	sub	r0, r7, #1
-	rsbs	r7, r0, #0
-	adc	r7, r7, r0
-.L1602:
+	sub	r1, r7, #1
+	rsbs	r7, r1, #0
+	adc	r7, r7, r1
+.L1512:
 	mov	r8, #7
 	mvn	r6, #0
-	ldr	r5, .L1608+4
-	b	.L1603
-.L1606:
+	ldr	r5, .L1518+4
+	b	.L1513
+.L1516:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1604
+	beq	.L1514
 	mov	r0, r4
 	bl	get_new_active_ppa
-	ldr	r2, [r5, #-952]
-	ldr	r3, [r5, #-2076]
+	cmn	r0, #1
+	str	r0, [sp, #8]
+	beq	.L1514
+	ldr	r2, [r5, #-956]
+	add	r0, sp, #4
+	ldr	r3, [r5, #-2080]
 	str	r6, [sp, #20]
 	str	r2, [sp, #16]
 	str	r3, [sp, #12]
 	str	r6, [r2, #12]
 	str	r6, [r2, #8]
 	ldrh	r3, [r4, #0]
-	str	r0, [sp, #8]
-	add	r0, sp, #4
 	strh	r3, [r2, #2]	@ movhi
 	mov	r3, #0
 	strh	r3, [r2, #0]	@ movhi
-	ldr	r1, [r5, #-1844]
+	ldr	r1, [r5, #-1848]
 	cmn	r1, #2
 	str	r1, [r2, #4]
 	addne	r1, r1, #1
 	moveq	r1, #0
 	mov	r2, r7
-	str	r1, [r5, #-1844]
+	str	r1, [r5, #-1848]
 	mov	r1, #1
 	bl	FlashProgPages
 	ldrh	r0, [r4, #0]
 	bl	decrement_vpc_count
-.L1603:
+.L1513:
 	subs	r8, r8, #1
-	bne	.L1606
-.L1604:
-	ldr	r2, .L1608+4
+	bne	.L1516
+.L1514:
+	ldr	r2, .L1518+4
 	ldrh	r3, [r4, #0]
 	ldrh	r1, [r4, #4]
-	ldr	r2, [r2, #-2064]
+	ldr	r2, [r2, #-2068]
 	mov	r3, r3, asl #1
 	ldrh	r0, [r2, r3]
 	rsb	r1, r1, r0
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r2, .L1608
-	movw	r3, #3912
+	ldr	r2, .L1518
+	movw	r3, #3908
 	ldrh	r3, [r2, r3]
 	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #0
@@ -13942,9 +13113,9 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	add	sp, sp, #40
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1609:
+.L1519:
 	.align	2
-.L1608:
+.L1518:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -13960,144 +13131,155 @@ FtlLowFormatEraseBlock:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L1636
+	ldr	r8, .L1550
 	mov	r6, #0
-	mov	r8, r0
-	mov	r7, r1
+	mov	r9, r0
+	mov	sl, r1
 	mov	r4, r6
 	mov	r5, r6
-	ldrb	r2, [r9, #80]	@ zero_extendqisi2
+	ldrb	r2, [r8, #928]	@ zero_extendqisi2
 	mov	fp, #36
-	str	r0, [r9, #3976]
-	ldr	sl, .L1636+4
+	str	r0, [r8, #3972]
+	ldr	r7, .L1550+4
 	str	r2, [sp, #8]
-	b	.L1611
-.L1615:
+	b	.L1521
+.L1525:
 	mul	r3, fp, r6
-	ldr	r2, [sl, #-2088]
+	ldr	r2, [r7, #-2092]
 	mov	r0, #0
-	mov	r1, r8
+	mov	r1, r9
 	str	r0, [r2, r3]
-	add	r3, r9, r6
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	add	r3, r8, r6
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
-	cmp	r7, #0
+	cmp	sl, #0
 	str	r0, [sp, #4]
-	beq	.L1612
+	beq	.L1522
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L1613
-.L1612:
+	bne	.L1523
+.L1522:
 	ldr	r0, [sp, #4]
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r5, r5, #1
 	uxthne	r5, r5
-	bne	.L1613
-	ldr	r3, [sl, #-2088]
+	bne	.L1523
+	ldr	r3, [r7, #-2092]
 	ldr	r1, [sp, #4]
 	mla	r3, fp, r4, r3
 	mov	r2, r1, asl #10
 	str	r0, [r3, #8]
-	movw	r0, #3924
+	mov	r0, #3920
 	str	r2, [r3, #4]
-	ldrh	r2, [r9, r0]
+	ldrh	r2, [r8, r0]
 	mul	r2, r2, r4
 	add	r4, r4, #1
 	uxth	r4, r4
 	add	r1, r2, #3
 	cmp	r2, #0
 	movlt	r2, r1
-	ldr	r1, [sl, #-948]
+	ldr	r1, [r7, #-952]
 	bic	r2, r2, #3
 	add	r2, r1, r2
 	str	r2, [r3, #12]
-.L1613:
+.L1523:
 	add	r6, r6, #1
 	uxth	r6, r6
-.L1611:
-	movw	r1, #3844
-	ldrh	r3, [r9, r1]
+.L1521:
+	mov	r1, #3840
+	ldrh	r3, [r8, r1]
 	cmp	r3, r6
-	bhi	.L1615
+	bhi	.L1525
 	cmp	r4, #0
-	beq	.L1617
+	beq	.L1527
 	ldr	r2, [sp, #8]
-	mov	r9, #0
-	ldr	r6, .L1636+4
-	mov	fp, r9
-	adds	sl, r2, #0
+	mov	r8, #0
+	ldr	r7, .L1550+4
+	mov	fp, r8
+	adds	r6, r2, #0
 	mov	r2, r4
-	movne	sl, #1
-	ldr	r0, [r6, #-2088]
-	mov	r1, sl
+	movne	r6, #1
+	ldr	r0, [r7, #-2092]
+	mov	r1, r6
 	bl	FlashEraseBlocks
-.L1619:
-	ldr	r3, [r6, #-2088]
-	add	r2, r3, r9
-	ldr	r3, [r3, r9]
+.L1529:
+	ldr	r3, [r7, #-2092]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	bne	.L1618
+	bne	.L1528
 	ldr	r0, [r2, #4]
 	add	r5, r5, #1
 	ubfx	r0, r0, #10, #16
 	uxth	r5, r5
 	bl	FtlBbmMapBadBlock
-.L1618:
+.L1528:
 	add	fp, fp, #1
-	add	r9, r9, #36
+	add	r8, r8, #36
 	uxth	fp, fp
 	cmp	fp, r4
-	bne	.L1619
-.L1620:
-	cmp	r7, #0
+	bne	.L1529
+	cmp	sl, #0
+	beq	.L1542
+	ldr	r3, .L1550
+	movw	r2, #3910
+	ldrh	r2, [r3, r2]
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	str	r2, [sp, #8]
+	moveq	r3, r2, lsr #2
+	streq	r3, [sp, #4]
+	moveq	r6, #1
+	beq	.L1530
+	b	.L1549
+.L1542:
+	mov	r0, #6
+	mov	r1, #1
+	stmib	sp, {r0, r1}
+	b	.L1530
+.L1549:
+	mov	r6, #1
+	str	r6, [sp, #4]
+.L1530:
+	mov	r8, #0
+	mov	r7, r6
+.L1538:
 	mov	r6, #0
-	ldrne	r2, .L1636
-	movwne	r3, #3914
-	movne	sl, #1
-	moveq	r0, #1
-	moveq	r1, #6
-	stmeqib	sp, {r0, r1}
-	ldrneh	r3, [r2, r3]
-	strne	r3, [sp, #4]
-	movne	r3, r3, lsr #2
-	strne	r3, [sp, #8]
-.L1630:
-	mov	r9, #0
-	ldr	fp, .L1636+4
-	mov	r4, r9
-	b	.L1621
-.L1624:
+	ldr	fp, .L1550+4
+	mov	r4, r6
+	b	.L1531
+.L1534:
 	mov	r0, #36
-	ldr	r2, [fp, #-2088]
-	mul	r3, r0, r9
+	ldr	r2, [fp, #-2092]
+	mul	r3, r0, r6
 	mov	r1, #0
 	str	r1, [r2, r3]
-	mov	r1, r8
-	ldr	r2, .L1636
-	add	r3, r2, r9
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	mov	r1, r9
+	ldr	r2, .L1550
+	add	r3, r2, r6
+	ldrb	r0, [r3, #3866]	@ zero_extendqisi2
 	bl	V2P_block
-	cmp	r7, #0
+	cmp	sl, #0
 	str	r0, [sp, #12]
-	beq	.L1622
+	beq	.L1532
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L1623
-.L1622:
+	bne	.L1533
+.L1532:
 	ldr	r0, [sp, #12]
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L1623
-	ldr	r3, [fp, #-2088]
+	bne	.L1533
+	ldr	r3, [fp, #-2092]
 	mov	r0, #36
 	ldr	r1, [sp, #12]
 	mla	r3, r0, r4, r3
-	add	r2, r6, r1, asl #10
-	ldr	r1, .L1636
-	add	r0, r0, #3888
+	add	r2, r8, r1, asl #10
+	ldr	r1, .L1550
+	mov	r0, #3920
 	str	r2, [r3, #4]
-	ldr	r2, [fp, #-960]
+	ldr	r2, [fp, #-964]
 	str	r2, [r3, #8]
 	ldrh	r2, [r1, r0]
 	mul	r2, r2, r4
@@ -14106,103 +13288,128 @@ FtlLowFormatEraseBlock:
 	add	r1, r2, #3
 	cmp	r2, #0
 	movlt	r2, r1
-	ldr	r1, [fp, #-956]
+	ldr	r1, [fp, #-960]
 	bic	r2, r2, #3
 	add	r2, r1, r2
 	str	r2, [r3, #12]
-.L1623:
-	add	r9, r9, #1
-	uxth	r9, r9
-.L1621:
-	ldr	r0, .L1636
-	movw	r2, #3844
+.L1533:
+	add	r6, r6, #1
+	uxth	r6, r6
+.L1531:
+	ldr	r0, .L1550
+	mov	r2, #3840
 	ldrh	r3, [r0, r2]
-	cmp	r3, r9
-	bhi	.L1624
+	cmp	r3, r6
+	bhi	.L1534
 	cmp	r4, #0
-	beq	.L1617
-	ldr	r9, .L1636+4
-	mov	r3, #1
+	beq	.L1527
+	ldr	r6, .L1550+4
 	mov	r1, r4
-	mov	r2, sl
+	mov	r2, r7
+	mov	r3, #1
 	mov	fp, #0
-	ldr	r0, [r9, #-2088]
+	ldr	r0, [r6, #-2092]
 	bl	FlashProgPages
-	mov	r3, #36
-	mul	r3, r3, r4
-	str	r3, [sp, #12]
-	b	.L1626
-.L1629:
-	ldr	r2, [r9, #-2088]
-	add	r3, r2, fp
+	mov	ip, sl
+	mov	sl, r7
+	mov	r7, r4
+	mov	r4, fp
+.L1537:
+	ldr	r2, [r6, #-2092]
+	add	r1, r2, fp
 	ldr	r2, [r2, fp]
-	cmn	r2, #1
-	bne	.L1627
-	ldr	r0, [r3, #4]
+	cmp	r2, #0
+	beq	.L1536
+	ldr	r0, [r1, #4]
 	add	r5, r5, #1
+	str	ip, [sp, #0]
 	ubfx	r0, r0, #10, #16
 	uxth	r5, r5
 	bl	FtlBbmMapBadBlock
-	b	.L1628
-.L1627:
-	cmp	r7, #0
-	beq	.L1628
-	ldr	r0, [r3, #4]
+	ldr	ip, [sp, #0]
+.L1536:
+	add	r4, r4, #1
+	add	fp, fp, #36
+	uxth	r4, r4
+	cmp	r4, r7
+	bne	.L1537
+	ldr	r1, [sp, #4]
+	mov	r4, r7
+	ldr	r2, [sp, #8]
+	mov	r7, sl
+	add	r8, r8, r1
+	mov	sl, ip
+	uxth	r8, r8
+	cmp	r8, r2
+	bcc	.L1538
+	ldr	fp, .L1550+4
+	mov	r6, r7
+	mov	r7, #0
+	mov	r8, r7
+.L1540:
+	cmp	sl, #0
+	beq	.L1539
+	ldr	r3, [fp, #-2092]
+	add	r2, r3, r7
+	ldr	r3, [r3, r7]
+	cmp	r3, #0
+	bne	.L1539
+	ldr	r0, [r2, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L1628:
-	add	fp, fp, #36
-.L1626:
-	ldr	r2, [sp, #12]
-	cmp	fp, r2
-	bne	.L1629
-	ldr	r3, [sp, #8]
-	ldr	r0, [sp, #4]
-	add	r6, r6, r3
-	uxth	r6, r6
-	cmp	r6, r0
-	bcc	.L1630
-	cmp	r8, #63
-	bhi	.L1617
-	ldr	r3, .L1636+4
-	mov	r1, sl
-	mov	r2, r4
-	ldr	r0, [r3, #-2088]
+.L1539:
+	add	r8, r8, #1
+	add	r7, r7, #36
+	uxth	r8, r8
+	cmp	r8, r4
+	bne	.L1540
+	cmp	r9, #63
+	movhi	r9, #0
+	movls	r9, #1
+	cmp	sl, #0
+	moveq	sl, r9
+	orrne	sl, r9, #1
+	cmp	sl, #0
+	beq	.L1527
+	ldr	r3, .L1550+4
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r0, [r3, #-2092]
 	bl	FlashEraseBlocks
-.L1617:
+.L1527:
 	mov	r0, r5
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1637:
+.L1551:
 	.align	2
-.L1636:
+.L1550:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.type	FlashTestBlk.part.19, %function
-FlashTestBlk.part.19:
+	.type	FlashTestBlk.part.18, %function
+FlashTestBlk.part.18:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-.L1639:
+.L1553:
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	.pad #108
 	sub	sp, sp, #108
-	ldr	r4, .L1641
+	ldr	r4, .L1555
 	mov	r5, r0
 	mov	r1, #165
 	add	r0, sp, #40
 	mov	r2, #32
 	str	r0, [sp, #16]
-	ldr	r3, [r4, #116]
+	ldr	r3, [r4, #112]
 	mov	r5, r5, asl #10
 	str	r3, [sp, #12]
 	bl	ftl_memset
-	ldr	r0, [r4, #116]
+	ldr	r0, [r4, #112]
 	mov	r1, #90
 	mov	r2, #8
 	bl	ftl_memset
@@ -14219,19 +13426,19 @@ FlashTestBlk.part.19:
 	ldr	r4, [sp, #4]
 	add	r0, sp, #4
 	mov	r1, #0
-	cmn	r4, #1
+	cmp	r4, #0
 	mov	r2, #1
-	movne	r4, #0
+	mvnne	r4, #0
 	bl	FlashEraseBlocks
 	mov	r0, r4
 	add	sp, sp, #108
 	ldmfd	sp!, {r4, r5, pc}
-.L1642:
+.L1556:
 	.align	2
-.L1641:
+.L1555:
 	.word	.LANCHOR2
 	.fnend
-	.size	FlashTestBlk.part.19, .-FlashTestBlk.part.19
+	.size	FlashTestBlk.part.18, .-FlashTestBlk.part.18
 	.align	2
 	.global	FlashTestBlk
 	.type	FlashTestBlk, %function
@@ -14240,17 +13447,17 @@ FlashTestBlk:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1645
+	ldr	r3, .L1559
 	ldr	r3, [r3, #132]
 	cmp	r0, r3
-	bcc	.L1644
-	b	FlashTestBlk.part.19
-.L1644:
+	bcc	.L1558
+	b	FlashTestBlk.part.18
+.L1558:
 	mov	r0, #0
 	bx	lr
-.L1646:
+.L1560:
 	.align	2
-.L1645:
+.L1559:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -14261,284 +13468,288 @@ FlashMakeFactorBbt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 72
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1589
+	movw	r1, #3062
+	movw	r2, #3060
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
-	ldr	r4, .L1675
-	movw	r1, #2214
-	ldr	r3, .L1675+4
+	ldrh	r2, [r3, r2]
 	mov	r5, #0
-	ldr	r0, .L1675+8
-	ldr	r2, [r4, #148]
-	ldrh	r9, [r3, r1]
+	ldrh	fp, [r3, r1]
 	mov	r1, #1
-	str	r2, [sp, #28]
-	movw	r2, #2212
-	ldrh	r2, [r3, r2]
-	mul	r9, r9, r2
-	ldr	r2, [r3, #2776]
+	ldr	r4, .L1589+4
+	mul	fp, fp, r2
+	ldr	r2, [r3, #3624]
+	ldr	r0, [r4, #204]
 	ldrb	r2, [r2, #24]	@ zero_extendqisi2
-	uxth	r9, r9
+	str	r0, [sp, #28]
+	ldr	r0, .L1589+8
+	uxth	fp, fp
 	str	r2, [sp, #12]
-	ldrh	r2, [r3, #4]
-	ldrb	r3, [r3, #0]	@ zero_extendqisi2
+	ldr	r2, [r3, #856]
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	uxth	r2, r2
 	cmp	r3, #1
 	str	r2, [sp, #8]
 	moveq	r3, r2, asl #1
 	uxtheq	r3, r3
 	streq	r3, [sp, #8]
 	bl	printk
-	ldr	r0, [r4, #148]
-	mov	r1, #0
+	ldr	r0, [r4, #204]
 	mov	r2, #4096
+	mov	r1, #0
 	bl	ftl_memset
-	mov	r3, r9, lsr #4
-	str	r3, [sp, #20]
-	sub	r3, r9, #1
-	ldr	r4, .L1675+4
+	sub	r3, fp, #1
+	mov	r2, fp, lsr #4
+	ldr	r4, .L1589
 	uxth	r3, r3
+	str	r2, [sp, #20]
 	str	r3, [sp, #24]
-	b	.L1649
-.L1671:
-	ldr	r3, .L1675
-	add	r3, r3, r5, asl #1
-	ldrh	r6, [r3, #208]
+	b	.L1563
+.L1585:
+	ldr	r3, .L1589+4
+	add	r2, r3, r5, asl #1
+	ldrh	r6, [r2, #208]
 	cmp	r6, #0
-	bne	.L1650
-	movw	r3, #2220
-	ldr	r0, [r4, #3780]
-	ldrh	r2, [r4, r3]
+	bne	.L1564
+	movw	r2, #3068
+	ldr	r0, [r3, #124]
+	ldrh	r2, [r4, r2]
 	mov	r1, r6
+	mov	r8, r6
 	mov	r7, r6
-	mov	sl, r6
-	add	r8, r4, r5, asl #2
+	add	sl, r4, r5, asl #2
 	mov	r2, r2, asl #9
 	bl	ftl_memset
 	add	r3, r4, r5
-	ldrb	fp, [r3, #3768]	@ zero_extendqisi2
-	b	.L1651
-.L1659:
-	ldr	r2, [sp, #12]
+	ldrb	r9, [r3, #3764]	@ zero_extendqisi2
+	b	.L1565
+.L1573:
 	mvn	r3, #0
 	strb	r3, [sp, #34]
-	tst	r2, #1
 	strb	r3, [sp, #35]
-	beq	.L1652
-	ldr	r3, [r8, #2740]
+	ldr	r3, [sp, #12]
+	tst	r3, #1
+	beq	.L1566
+	ldr	r3, [sl, #3588]
 	add	r2, sp, #34
-	mov	r0, fp
+	mov	r0, r9
 	add	r3, r6, r3
 	str	r3, [sp, #4]
 	mov	r1, r3
 	bl	FlashReadSpare
-	ldrb	r2, [r4, #0]	@ zero_extendqisi2
+	ldrb	r2, [r4, #852]	@ zero_extendqisi2
 	ldr	r3, [sp, #4]
 	cmp	r2, #1
-	bne	.L1652
-	ldr	r1, [r4, #4]
+	bne	.L1566
+	ldr	r1, [r4, #856]
 	add	r2, sp, #35
-	mov	r0, fp
+	mov	r0, r9
 	add	r1, r3, r1
 	bl	FlashReadSpare
 	ldrb	r3, [sp, #34]	@ zero_extendqisi2
 	ldrb	r2, [sp, #35]	@ zero_extendqisi2
 	and	r3, r2, r3
 	strb	r3, [sp, #34]
-.L1652:
-	ldr	r3, [sp, #12]
-	tst	r3, #2
-	beq	.L1653
-	ldr	r3, [r4, #2776]
-	mov	r0, fp
+.L1566:
+	ldr	r0, [sp, #12]
+	tst	r0, #2
+	beq	.L1567
+	ldr	r3, [r4, #3624]
+	mov	r0, r9
 	add	r2, sp, #35
 	ldrh	r1, [r3, #10]
-	ldr	r3, [r8, #2740]
+	ldr	r3, [sl, #3588]
 	sub	r1, r1, #1
 	add	r1, r1, r3
 	add	r1, r1, r6
 	bl	FlashReadSpare
-.L1653:
-	ldr	r3, [r4, #2776]
+.L1567:
+	ldr	r3, [r4, #3624]
 	ldrb	r3, [r3, #7]	@ zero_extendqisi2
 	cmp	r3, #1
 	cmpne	r3, #8
 	ldrb	r3, [sp, #34]	@ zero_extendqisi2
-	bne	.L1654
+	bne	.L1568
 	cmp	r3, #0
-	beq	.L1673
+	beq	.L1587
 	ldrb	r0, [sp, #35]	@ zero_extendqisi2
 	rsbs	r0, r0, #1
 	movcc	r0, #0
-	b	.L1655
-.L1654:
+	b	.L1569
+.L1568:
 	cmp	r3, #255
-	bne	.L1673
+	bne	.L1587
 	ldrb	r0, [sp, #35]	@ zero_extendqisi2
 	subs	r0, r0, #255
 	movne	r0, #1
-	b	.L1655
-.L1673:
+	b	.L1569
+.L1587:
 	mov	r0, #1
-.L1655:
+.L1569:
 	ldr	r2, [sp, #12]
 	tst	r2, #4
-	beq	.L1656
-	ldr	r1, [r8, #2740]
-	mov	r0, fp
+	beq	.L1570
+	ldr	r1, [sl, #3588]
+	mov	r0, r9
 	add	r1, r6, r1
 	bl	SandiskProgTestBadBlock
-.L1656:
+.L1570:
 	cmp	r0, #0
-	beq	.L1657
+	beq	.L1571
 	mov	r1, r5
-	mov	r2, r7
-	ldr	r0, .L1675+12
-	add	sl, sl, #1
+	mov	r2, r8
+	ldr	r0, .L1589+12
+	add	r7, r7, #1
 	bl	printk
 	ldr	r3, [sp, #16]
-	and	r0, r7, #31
+	and	r0, r8, #31
 	mov	ip, #1
-	uxth	sl, sl
+	uxth	r7, r7
 	mov	r2, r3, lsr #5
-	ldr	r3, [r4, #3780]
+	ldr	r3, .L1589+4
+	ldr	r3, [r3, #124]
 	ldr	r1, [r3, r2, asl #2]
 	orr	r1, r1, ip, asl r0
+	ldr	r0, [sp, #20]
 	str	r1, [r3, r2, asl #2]
-	ldr	r2, [sp, #20]
-	ldrb	r3, [r4, #3766]	@ zero_extendqisi2
-	mul	r3, r3, r2
-	cmp	sl, r3
-	bgt	.L1658
-.L1657:
-	ldr	r3, [sp, #8]
-	add	r7, r7, #1
-	add	r6, r6, r3
-.L1651:
-	uxth	r3, r7
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
+	mul	r3, r3, r0
+	cmp	r7, r3
+	bgt	.L1572
+.L1571:
+	ldr	r2, [sp, #8]
+	add	r8, r8, #1
+	add	r6, r6, r2
+.L1565:
+	uxth	r3, r8
 	str	r3, [sp, #16]
-	cmp	r3, r9
-	bcc	.L1659
-.L1658:
-	mov	r2, sl
-	ldr	r0, .L1675+16
+	cmp	r3, fp
+	bcc	.L1573
+.L1572:
+	ldr	r0, .L1589+16
 	mov	r1, r5
+	mov	r2, r7
 	bl	printk
-	ldrb	r3, [r4, #3766]	@ zero_extendqisi2
-	ldr	r2, [sp, #20]
-	mul	r3, r3, r2
-	cmp	sl, r3
-	blt	.L1660
-	movw	r3, #2220
-	ldr	r0, [r4, #3780]
-	ldrh	r2, [r4, r3]
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
+	ldr	r0, [sp, #20]
+	mul	r3, r3, r0
+	cmp	r7, r3
+	blt	.L1574
+	movw	r3, #3068
 	mov	r1, #0
+	ldrh	r2, [r4, r3]
+	ldr	r3, .L1589+4
 	mov	r2, r2, asl #9
+	ldr	r0, [r3, #124]
 	bl	ftl_memset
-.L1660:
+.L1574:
 	cmp	r5, #0
-	bne	.L1661
-	ldr	r3, .L1675
+	bne	.L1575
+	ldr	sl, .L1589+4
 	mov	r8, r5
 	mov	r7, r5
-	mov	sl, #1
-	ldrh	fp, [r3, #132]
-	b	.L1662
-.L1664:
+	ldrh	r9, [sl, #132]
+	b	.L1576
+.L1578:
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1663
+	beq	.L1577
 	mov	r1, r6
-	ldr	r0, .L1675+20
+	ldr	r0, .L1589+20
 	bl	printk
-	ldr	r3, [r4, #3780]
+	ldr	r3, [sl, #124]
 	mov	r2, r6, lsr #5
-	add	r7, r7, #1
+	mov	r0, #1
+	add	r7, r7, r0
 	and	r6, r6, #31
 	ldr	r1, [r3, r2, asl #2]
 	uxth	r7, r7
-	orr	r6, r1, sl, asl r6
+	orr	r6, r1, r0, asl r6
 	str	r6, [r3, r2, asl #2]
-.L1663:
+.L1577:
 	add	r8, r8, #1
 	uxth	r8, r8
-.L1662:
-	add	r6, r8, fp
-	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+.L1576:
+	add	r6, r8, r9
+	ldrb	r3, [r4, #853]	@ zero_extendqisi2
 	uxth	r6, r6
 	cmp	r3, r6
-	bhi	.L1664
+	bhi	.L1578
 	ldr	r6, [sp, #24]
-	sub	sl, r9, #50
+	sub	r9, fp, #50
+	ldr	sl, .L1589+4
 	mov	r8, #1
-	b	.L1665
-.L1667:
+	b	.L1579
+.L1581:
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1666
+	beq	.L1580
 	mov	r1, r6
-	ldr	r0, .L1675+20
+	ldr	r0, .L1589+20
 	bl	printk
-	ldr	r3, [r4, #3780]
+	ldr	r3, [sl, #124]
 	mov	r2, r6, lsr #5
 	and	r0, r6, #31
 	ldr	r1, [r3, r2, asl #2]
 	orr	r1, r1, r8, asl r0
 	str	r1, [r3, r2, asl #2]
-.L1666:
+.L1580:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1665:
-	cmp	r6, sl
-	bgt	.L1667
-	ldr	r3, .L1675
-	ldrb	r2, [r4, #1]	@ zero_extendqisi2
-	ldr	r3, [r3, #132]
-	rsb	r3, r3, r2
-	cmp	r7, r3
-	bcc	.L1661
-	movw	r3, #2220
-	ldr	r0, [r4, #3780]
-	ldrh	r2, [r4, r3]
+.L1579:
+	cmp	r6, r9
+	bgt	.L1581
+	ldr	r3, .L1589+4
+	ldrb	r1, [r4, #853]	@ zero_extendqisi2
+	ldr	r2, [r3, #132]
+	rsb	r2, r2, r1
+	cmp	r7, r2
+	bcc	.L1575
+	movw	r2, #3068
+	ldr	r0, [r3, #124]
+	ldrh	r2, [r4, r2]
 	mov	r1, #0
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L1661:
-	mul	r8, r9, r5
-	ldr	r7, .L1675
+.L1575:
+	mul	r8, fp, r5
+	ldr	r7, .L1589+4
 	ldr	r6, [sp, #24]
-	ldr	fp, [sp, #28]
+	ldr	r9, [sp, #28]
 	add	sl, r7, r5, asl #1
-.L1668:
-	ldr	r0, .L1675+24
+.L1582:
+	ldr	r0, .L1589+24
 	mov	r1, r5
 	mov	r2, r6
 	bl	printk
-	ldr	r3, [r4, #3780]
-	b	.L1669
-.L1670:
+	ldr	r3, [r7, #124]
+	b	.L1583
+.L1584:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1669:
+.L1583:
 	mov	r1, r6, lsr #5
 	and	r2, r6, #31
 	ldr	r1, [r3, r1, asl #2]
 	mov	r2, r1, lsr r2
 	ands	r2, r2, #1
-	bne	.L1670
-	ldr	r3, .L1675+28
+	bne	.L1584
+	ldr	r3, .L1589+28
 	mov	r1, #1
 	strh	r6, [sl, #208]	@ movhi
 	add	r0, sp, #36
-	strh	r6, [fp, #2]	@ movhi
-	strh	r3, [fp, #0]	@ movhi
-	ldr	r3, [r4, #3780]
-	strh	r2, [fp, #8]	@ movhi
+	strh	r6, [r9, #2]	@ movhi
+	strh	r3, [r9, #0]	@ movhi
+	ldr	r3, [r7, #124]
+	strh	r2, [r9, #8]	@ movhi
 	mov	r2, r1
 	str	r3, [sp, #44]
-	ldr	r3, [r7, #148]
+	ldr	r3, [r7, #204]
 	str	r3, [sp, #48]
 	add	r3, r6, r8
 	mov	r3, r3, asl #10
@@ -14553,26 +13764,26 @@ FlashMakeFactorBbt:
 	cmp	r3, #0
 	subne	r6, r6, #1
 	uxthne	r6, r6
-	bne	.L1668
-.L1650:
+	bne	.L1582
+.L1564:
 	add	r5, r5, #1
 	uxtb	r5, r5
-.L1649:
-	ldrb	r3, [r4, #3766]	@ zero_extendqisi2
+.L1563:
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
 	cmp	r3, r5
-	bhi	.L1671
+	bhi	.L1585
 	add	sp, sp, #76
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1676:
+.L1590:
 	.align	2
-.L1675:
-	.word	.LANCHOR2
+.L1589:
 	.word	.LANCHOR0
-	.word	.LC107
-	.word	.LC108
+	.word	.LANCHOR2
 	.word	.LC109
 	.word	.LC110
 	.word	.LC111
+	.word	.LC112
+	.word	.LC113
 	.word	-3872
 	.fnend
 	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
@@ -14591,89 +13802,89 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	sub	r3, r3, #1
+	sub	r3, r3, #4
 	cmp	r2, r3
-	blt	.L1678
+	blt	.L1592
 	uxth	r0, r0
 	mov	r0, r0, asl #1
 	ldrh	r7, [r5, r0]
 	cmp	r7, #0
-	beq	.L1678
+	beq	.L1592
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L1678
+	bne	.L1592
 	mov	r2, #1
-	ldr	r1, .L1685
+	ldr	r1, .L1599
 	str	r2, [r4, #32]
 	strh	r3, [r5, r0]	@ movhi
 	ldrh	r3, [r4, #8]
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	movw	r3, #3914
+	movw	r3, #3910
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bcc	.L1679
+	bcc	.L1593
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1679:
+.L1593:
 	mov	r5, #0
-	ldr	r6, .L1685+4
+	ldr	r6, .L1599+4
 	mov	r9, r5
-	b	.L1680
-.L1683:
+	b	.L1594
+.L1597:
 	ldr	r3, [r8, r5, asl #2]
 	mov	sl, r5, asl #2
 	cmp	r7, r3, lsr #10
-	bne	.L1681
-	ldr	r3, [r6, #-972]
+	bne	.L1595
+	ldr	r3, [r6, #-976]
 	mov	r1, #1
-	ldr	r0, .L1685+8
+	ldr	r0, .L1599+8
 	mov	r2, r1
-	str	r3, [r6, #176]
-	ldr	r3, [r6, #-952]
-	str	r3, [r6, #180]
+	str	r3, [r6, #164]
+	ldr	r3, [r6, #-956]
+	str	r3, [r6, #168]
 	ldr	r3, [r8, r5, asl #2]
-	str	r3, [r6, #172]
+	str	r3, [r6, #160]
 	bl	FlashReadPages
-	ldr	r3, [r6, #168]
+	ldr	r3, [r6, #156]
 	cmn	r3, #1
 	streq	r9, [r8, sl]
-	beq	.L1681
+	beq	.L1595
 	mov	r0, r4
 	mov	r1, r5
-	ldr	r2, [r6, #176]
+	ldr	r2, [r6, #164]
 	bl	FtlMapWritePage
-.L1681:
+.L1595:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L1680:
+.L1594:
 	ldrh	r3, [r4, #6]
 	cmp	r3, r5
-	bhi	.L1683
+	bhi	.L1597
 	mov	r0, r7
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L1678:
-	ldr	r1, .L1685
-	movw	r3, #3914
+.L1592:
+	ldr	r1, .L1599
+	movw	r3, #3910
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bcc	.L1684
+	bcc	.L1598
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1684:
+.L1598:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L1686:
+.L1600:
 	.align	2
-.L1685:
+.L1599:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2+168
+	.word	.LANCHOR2+156
 	.fnend
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
@@ -14691,7 +13902,7 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
 	ldr	r7, [r0, #24]
-	bne	.L1688
+	bne	.L1602
 	ldrh	r3, [r0, #8]
 	add	r3, r3, #1
 	strh	r3, [r0, #8]	@ movhi
@@ -14703,57 +13914,57 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	add	r3, r3, #1
 	str	r3, [r4, #28]
-	b	.L1689
-.L1688:
+	b	.L1603
+.L1602:
 	mov	r3, r3, asl #1
 	ldr	r2, [r0, #28]
 	mov	r1, #255
 	ldrh	r6, [r5, r3]
-	ldr	r5, .L1693
+	ldr	r5, .L1607
 	ldrh	r3, [r0, #2]
 	orr	r3, r3, r6, asl #10
-	str	r3, [r5, #172]
-	ldr	r3, [r5, #-2076]
-	str	r3, [r5, #176]
-	ldr	r3, [r5, #-952]
-	str	r3, [r5, #180]
+	str	r3, [r5, #160]
+	ldr	r3, [r5, #-2080]
+	str	r3, [r5, #164]
+	ldr	r3, [r5, #-956]
+	str	r3, [r5, #168]
 	str	r2, [r3, #4]
-	ldr	r2, .L1693+4
+	ldr	r2, .L1607+4
 	strh	r2, [r3, #8]	@ movhi
 	ldrh	r2, [r0, #4]
 	strh	r6, [r3, #2]	@ movhi
 	strh	r2, [r3, #0]	@ movhi
-	movw	r3, #3914
-	ldr	r2, .L1693+8
-	ldr	r0, [r5, #-2076]
+	movw	r3, #3910
+	ldr	r2, .L1607+8
+	ldr	r0, [r5, #-2080]
 	ldrh	r2, [r2, r3]
 	mov	r2, r2, asl #3
 	bl	ftl_memset
 	mov	r2, #0
 	mov	r3, r2
-	b	.L1690
-.L1692:
+	b	.L1604
+.L1606:
 	ldr	r1, [r7, r3, asl #2]
 	cmp	r6, r1, lsr #10
-	bne	.L1691
+	bne	.L1605
 	add	r2, r2, #1
-	ldr	r1, [r5, #-2076]
+	ldr	r1, [r5, #-2080]
 	uxth	r2, r2
 	str	r3, [r1, r2, asl #3]
-	ldr	r1, [r5, #-2076]
+	ldr	r1, [r5, #-2080]
 	ldr	r0, [r7, r3, asl #2]
 	add	r1, r1, r2, asl #3
 	str	r0, [r1, #4]
-.L1691:
+.L1605:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1690:
+.L1604:
 	ldrh	r1, [r4, #6]
 	cmp	r1, r3
-	bhi	.L1692
+	bhi	.L1606
 	mov	r1, #1
 	mov	r3, #0
-	ldr	r0, .L1693+12
+	ldr	r0, .L1607+12
 	mov	r2, r1
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
@@ -14761,16 +13972,16 @@ Ftl_write_map_blk_to_last_page:
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-.L1689:
+.L1603:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1694:
+.L1608:
 	.align	2
-.L1693:
+.L1607:
 	.word	.LANCHOR2
 	.word	-1291
 	.word	.LANCHOR0
-	.word	.LANCHOR2+168
+	.word	.LANCHOR2+156
 	.fnend
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
@@ -14778,78 +13989,108 @@ Ftl_write_map_blk_to_last_page:
 	.type	FtlMapWritePage, %function
 FtlMapWritePage:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, r0
-	ldr	r5, .L1702
-	mov	r6, r1
-	ldr	r9, .L1702+4
-	mov	r8, r2
-	movw	fp, #3914
-.L1701:
-	ldr	r3, [r5, #-1864]
+	ldr	r5, .L1623
+	mov	fp, r1
+	ldr	r7, .L1623+4
+	mov	r6, #0
+	movw	r8, #3910
+	str	r2, [sp, #4]
+.L1621:
+	ldr	r3, [r5, #-1868]
 	add	r3, r3, #1
-	str	r3, [r5, #-1864]
-	ldrh	r3, [r9, fp]
+	str	r3, [r5, #-1868]
+	ldrh	r3, [r7, r8]
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1696
+	bge	.L1611
 	ldrh	r2, [r4, #0]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1697
-.L1696:
+	bne	.L1612
+.L1611:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1697:
+.L1612:
 	ldrh	r3, [r4, #0]
 	mov	r1, #0
 	ldr	r2, [r4, #12]
-	ldr	r0, [r5, #-952]
+	ldr	r0, [r5, #-956]
 	mov	r3, r3, asl #1
-	ldr	r7, .L1702
+	ldr	r9, .L1623
 	ldrh	sl, [r2, r3]
 	mov	r2, #16
 	ldrh	r3, [r4, #2]
-	str	r8, [r5, #176]
+	str	r0, [r5, #168]
 	orr	r3, r3, sl, asl #10
-	str	r0, [r5, #180]
-	str	r3, [r5, #172]
+	str	r3, [r5, #160]
+	ldr	r3, [sp, #4]
+	str	r3, [r5, #164]
 	bl	ftl_memset
-	ldr	r3, [r5, #180]
+	ldr	r3, [r5, #168]
 	mov	r1, #1
 	ldr	r2, [r4, #28]
-	add	r0, r7, #168
-	strh	r6, [r3, #8]	@ movhi
+	add	r0, r9, #156
+	strh	fp, [r3, #8]	@ movhi
 	str	r2, [r3, #4]
 	ldrh	r2, [r4, #4]
 	strh	sl, [r3, #2]	@ movhi
 	strh	r2, [r3, #0]	@ movhi
-	mov	r3, r1
 	mov	r2, r1
+	mov	r3, r1
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #156]
+	cmn	r2, #1
+	bne	.L1613
+	ldr	r0, .L1623+8
+	add	r6, r6, #1
+	ldr	r1, [r5, #160]
+	bl	printk
+	ldrh	r3, [r4, #2]
+	uxth	r6, r6
+	cmp	r3, #2
+	ldrlsh	r3, [r7, r8]
+	subls	r3, r3, #1
+	strlsh	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1615
+	ldr	r3, .L1623
+	mov	r2, r6
+	ldr	r0, .L1623+12
+	ldr	r1, [r3, #160]
+	bl	printk
+.L1616:
+	b	.L1616
+.L1615:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1621
+.L1622:
+	b	.L1622
+.L1613:
 	cmp	r3, #1
-	beq	.L1701
-	ldr	r3, [r5, #168]
-	cmn	r3, #1
-	beq	.L1701
-	ldr	r2, [r7, #172]
+	beq	.L1621
+	ldr	r2, [r9, #160]
 	mov	r0, #0
 	ldr	r3, [r4, #24]
-	str	r2, [r3, r6, asl #2]
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1703:
+	str	r2, [r3, fp, asl #2]
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1624:
 	.align	2
-.L1702:
+.L1623:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
+	.word	.LC114
+	.word	.LC115
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
@@ -14862,25 +14103,26 @@ flush_l2p_region:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, #12
-	ldr	r5, .L1705
+	ldr	r5, .L1626
 	mul	r4, r4, r0
-	sub	r0, r5, #1088
-	ldr	r2, [r5, #-1900]
+	ldr	r0, .L1626+4
+	ldr	r2, [r5, #-1904]
 	add	r3, r2, r4
 	ldrh	r1, [r2, r4]
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	ldr	r3, [r5, #-1900]
+	ldr	r3, [r5, #-1904]
 	mov	r0, #0
 	add	r4, r3, r4
 	ldr	r3, [r4, #4]
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1706:
+.L1627:
 	.align	2
-.L1705:
+.L1626:
 	.word	.LANCHOR2
+	.word	.LANCHOR2-1092
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
@@ -14893,71 +14135,71 @@ log2phys:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r8, r2
-	ldr	r3, .L1716
-	mov	r2, #3920
+	ldr	r3, .L1637
+	movw	r2, #3916
 	mov	r4, r1
 	ldrh	r7, [r3, r2]
 	mvn	r2, #0
 	add	r7, r7, #7
 	mov	r6, r0, lsr r7
 	bic	r7, r0, r2, asl r7
-	movw	r2, #3950
+	movw	r2, #3946
 	ldrh	r2, [r3, r2]
 	uxth	r6, r6
-	ldr	r3, .L1716+4
+	ldr	r3, .L1637+4
 	uxth	r7, r7
-	ldr	sl, [r3, #-1900]
+	ldr	sl, [r3, #-1904]
 	mov	r3, #0
 	mov	r5, r3
-	b	.L1708
-.L1714:
+	b	.L1629
+.L1635:
 	add	r3, r3, #12
 	add	r1, sl, r3
 	ldrh	r1, [r1, #-12]
 	cmp	r1, r6
-	bne	.L1709
-.L1710:
+	bne	.L1630
+.L1631:
 	cmp	r8, #0
-	ldr	r3, .L1716+4
+	ldr	r3, .L1637+4
 	mov	r2, #12
-	bne	.L1711
-	ldr	r3, [r3, #-1900]
+	bne	.L1632
+	ldr	r3, [r3, #-1904]
 	mla	r2, r2, r5, r3
 	ldr	r3, [r2, #8]
 	ldr	r3, [r3, r7, asl #2]
 	str	r3, [r4, #0]
-	b	.L1712
-.L1711:
+	b	.L1633
+.L1632:
 	mul	r2, r2, r5
-	ldr	r1, [r3, #-1900]
+	ldr	r1, [r3, #-1904]
 	ldr	r0, [r4, #0]
 	add	r1, r1, r2
 	ldr	r1, [r1, #8]
 	str	r0, [r1, r7, asl #2]
-	ldr	r1, [r3, #-1900]
+	ldr	r1, [r3, #-1904]
 	add	r2, r1, r2
 	ldr	r1, [r2, #4]
 	orr	r1, r1, #-2147483648
 	str	r1, [r2, #4]
-	ldr	r2, .L1716+8
+	ldr	r2, .L1637+8
 	strh	r6, [r3, r2]	@ movhi
-.L1712:
-	ldr	r3, .L1716+4
+.L1633:
+	ldr	r3, .L1637+4
 	mov	r2, #12
 	mov	r0, #0
-	ldr	r3, [r3, #-1900]
+	ldr	r3, [r3, #-1904]
 	mla	r5, r2, r5, r3
 	ldr	r3, [r5, #4]
 	cmn	r3, #1
 	addne	r3, r3, #1
 	strne	r3, [r5, #4]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1709:
+.L1630:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L1708:
+.L1629:
 	cmp	r5, r2
-	bne	.L1714
+	bne	.L1635
 	bl	select_l2p_ram_region
 	mov	r3, #12
 	mul	r3, r3, r0
@@ -14966,22 +14208,22 @@ log2phys:
 	ldrh	r1, [sl, r3]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1715
+	beq	.L1636
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L1715
+	bge	.L1636
 	bl	flush_l2p_region
-.L1715:
+.L1636:
 	mov	r0, r6
 	mov	r1, r5
 	bl	load_l2p_region
-	b	.L1710
-.L1717:
+	b	.L1631
+.L1638:
 	.align	2
-.L1716:
+.L1637:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1896
+	.word	-1900
 	.fnend
 	.size	log2phys, .-log2phys
 	.align	2
@@ -14997,69 +14239,69 @@ FtlReUsePrevPpa:
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
-	ldr	r3, .L1724
-	ldr	r1, [r3, #-2064]
+	ldr	r3, .L1645
+	ldr	r1, [r3, #-2068]
 	mov	r5, r0, asl #1
 	ldrh	r2, [r1, r5]
 	cmp	r2, #0
 	addne	r2, r2, #1
 	strneh	r2, [r1, r5]	@ movhi
-	bne	.L1720
-	ldr	r4, [r3, #-2052]
+	bne	.L1641
+	ldr	r4, [r3, #-2056]
 	cmp	r4, #0
-	beq	.L1720
-	ldr	r1, .L1724+4
+	beq	.L1641
+	ldr	r1, .L1645+4
 	mov	ip, #6
 	ldrh	lr, [r3, r1]
-	ldr	r3, [r3, #-2072]
-	ldr	r1, .L1724+8
+	ldr	r3, [r3, #-2076]
+	ldr	r1, .L1645+8
 	rsb	r4, r3, r4
 	mov	r4, r4, asr #1
 	mul	r4, r1, r4
 	movw	r1, #65535
 	uxth	r4, r4
-	b	.L1721
-.L1723:
+	b	.L1642
+.L1644:
 	cmp	r4, r0
-	bne	.L1722
+	bne	.L1643
 	mov	r1, r4
-	ldr	r0, .L1724+12
+	ldr	r0, .L1645+12
 	bl	List_remove_node
-	ldr	r6, .L1724
-	ldr	r3, .L1724+4
+	ldr	r6, .L1645
+	ldr	r3, .L1645+4
 	mov	r0, r4
 	ldrh	r2, [r6, r3]
 	sub	r2, r2, #1
 	strh	r2, [r6, r3]	@ movhi
 	bl	INSERT_DATA_LIST
-	ldr	r3, [r6, #-2064]
+	ldr	r3, [r6, #-2068]
 	ldrh	r2, [r3, r5]
 	add	r2, r2, #1
 	strh	r2, [r3, r5]	@ movhi
-	b	.L1720
-.L1722:
+	b	.L1641
+.L1643:
 	mul	r4, ip, r4
 	ldrh	r4, [r3, r4]
 	cmp	r4, r1
-	beq	.L1720
+	beq	.L1641
 	add	r2, r2, #1
 	uxth	r2, r2
-.L1721:
+.L1642:
 	cmp	r2, lr
-	bne	.L1723
-.L1720:
+	bne	.L1644
+.L1641:
 	mov	r0, r7
 	add	r1, sp, #4
 	mov	r2, #1
 	bl	log2phys
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
-.L1725:
+.L1646:
 	.align	2
-.L1724:
+.L1645:
 	.word	.LANCHOR2
-	.word	-2048
+	.word	-2052
 	.word	-1431655765
-	.word	.LANCHOR2-2052
+	.word	.LANCHOR2-2056
 	.fnend
 	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
@@ -15077,39 +14319,39 @@ FtlMapBlkWriteDumpData:
 	cmp	r2, #0
 	ldr	r3, [r0, #24]
 	ldmeqfd	sp!, {r4, r5, r6, pc}
-	ldr	r5, .L1730
+	ldr	r5, .L1651
 	sub	r6, r6, #1
 	mov	r2, #0
 	str	r2, [r0, #36]
 	uxth	r6, r6
-	ldr	r0, [r5, #-972]
-	ldr	r2, [r5, #-952]
-	str	r0, [r5, #176]
-	str	r2, [r5, #180]
+	ldr	r0, [r5, #-976]
+	ldr	r2, [r5, #-956]
+	str	r0, [r5, #164]
+	str	r2, [r5, #168]
 	ldr	r3, [r3, r6, asl #2]
 	cmp	r3, #0
-	str	r3, [r5, #172]
-	beq	.L1728
+	str	r3, [r5, #160]
+	beq	.L1649
 	mov	r1, #1
-	add	r0, r5, #168
+	add	r0, r5, #156
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L1729
-.L1728:
-	ldr	r2, .L1730+4
-	movw	r3, #3922
+	b	.L1650
+.L1649:
+	ldr	r2, .L1651+4
+	movw	r3, #3918
 	mov	r1, #255
 	ldrh	r2, [r2, r3]
 	bl	ftl_memset
-.L1729:
+.L1650:
 	mov	r0, r4
 	mov	r1, r6
-	ldr	r2, [r5, #176]
+	ldr	r2, [r5, #164]
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1731:
+.L1652:
 	.align	2
-.L1730:
+.L1651:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -15121,14 +14363,14 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1742
+	ldr	r3, .L1663
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r9, r2
-	mov	r2, #3920
+	movw	r2, #3916
 	mov	r4, r1
 	ldrh	r8, [r3, r2]
-	movw	r2, #3906
+	movw	r2, #3902
 	ldrh	r2, [r3, r2]
 	add	r1, r1, r0
 	.pad #60
@@ -15136,26 +14378,26 @@ FtlVendorPartWrite:
 	mov	r6, r0
 	cmp	r1, r2
 	mvnhi	r7, #0
-	bhi	.L1733
+	bhi	.L1654
 	mov	r8, r0, lsr r8
 	mov	r7, #0
-	ldr	sl, .L1742+4
+	ldr	sl, .L1663+4
 	mov	ip, r8, asl #2
 	str	ip, [sp, #8]
-	b	.L1734
-.L1739:
-	ldr	r1, .L1742
-	movw	r2, #3918
+	b	.L1655
+.L1660:
+	ldr	r1, .L1663
+	movw	r2, #3914
 	ldr	ip, [sp, #8]
 	mov	r0, r6
-	ldr	r3, [sl, #-920]
+	ldr	r3, [sl, #-924]
 	ldrh	fp, [r1, r2]
 	ldr	r3, [r3, ip]
 	mov	r1, fp
 	str	r3, [sp, #4]
 	bl	__aeabi_uidivmod
 	ldr	r3, [sp, #4]
-	ldr	r2, .L1742+4
+	ldr	r2, .L1663+4
 	uxth	r1, r1
 	str	r1, [sp, #12]
 	rsb	r5, r1, fp
@@ -15163,30 +14405,30 @@ FtlVendorPartWrite:
 	cmp	r5, r4
 	uxthhi	r5, r4
 	cmp	r3, #0
-	beq	.L1736
+	beq	.L1657
 	cmp	r5, fp
-	beq	.L1736
+	beq	.L1657
 	str	r3, [sp, #24]
 	mov	r1, #1
-	ldr	r3, [r2, #-968]
+	ldr	r3, [r2, #-972]
 	add	r0, sp, #20
 	mov	r2, r1
 	str	r3, [sp, #28]
 	mov	r3, #0
 	str	r3, [sp, #32]
 	bl	FlashReadPages
-	b	.L1737
-.L1736:
-	ldr	ip, .L1742
-	movw	r3, #3922
-	ldr	r0, [r2, #-968]
+	b	.L1658
+.L1657:
+	ldr	ip, .L1663
+	movw	r3, #3918
+	ldr	r0, [r2, #-972]
 	mov	r1, #0
 	ldrh	r2, [ip, r3]
 	bl	ftl_memset
-.L1737:
+.L1658:
 	ldr	r3, [sp, #12]
 	mov	fp, r5, asl #9
-	ldr	r0, [sl, #-968]
+	ldr	r0, [sl, #-972]
 	mov	r1, r9
 	mov	r2, fp
 	rsb	r4, r5, r4
@@ -15194,9 +14436,9 @@ FtlVendorPartWrite:
 	add	r6, r6, r5
 	bl	memcpy
 	mov	r1, r8
-	ldr	r0, .L1742+8
+	ldr	r0, .L1663+8
 	add	r8, r8, #1
-	ldr	r2, [sl, #-968]
+	ldr	r2, [sl, #-972]
 	add	r9, r9, fp
 	bl	FtlMapWritePage
 	ldr	ip, [sp, #8]
@@ -15204,16 +14446,16 @@ FtlVendorPartWrite:
 	str	ip, [sp, #8]
 	cmn	r0, #1
 	moveq	r7, r0
-.L1734:
+.L1655:
 	cmp	r4, #0
-	bne	.L1739
-.L1733:
+	bne	.L1660
+.L1654:
 	mov	r0, r7
 	add	sp, sp, #60
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1743:
+.L1664:
 	.align	2
-.L1742:
+.L1663:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR2+224
@@ -15227,52 +14469,52 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1746
-	ldr	r2, .L1746+4
-	ldr	r1, [r3, #-1704]
+	ldr	r3, .L1667
+	ldr	r2, .L1667+4
+	ldr	r1, [r3, #-1708]
 	cmp	r1, r2
 	bxne	lr
-	ldr	r2, .L1746+8
+	ldr	r2, .L1667+8
 	mov	r0, #0
 	mov	r1, #1
-	str	r2, [r3, #-1700]
+	str	r2, [r3, #-1704]
+	ldr	r2, [r3, #-1860]
+	str	r2, [r3, #-1620]
 	ldr	r2, [r3, #-1856]
 	str	r2, [r3, #-1616]
-	ldr	r2, [r3, #-1852]
-	str	r2, [r3, #-1612]
-	ldr	r2, [r3, #-1860]
+	ldr	r2, [r3, #-1864]
+	str	r2, [r3, #-1700]
+	ldr	r2, [r3, #-1876]
 	str	r2, [r3, #-1696]
-	ldr	r2, [r3, #-1872]
+	ldr	r2, [r3, #-1884]
 	str	r2, [r3, #-1692]
-	ldr	r2, [r3, #-1880]
+	ldr	r2, [r3, #-1868]
 	str	r2, [r3, #-1688]
-	ldr	r2, [r3, #-1864]
-	str	r2, [r3, #-1684]
-	ldr	r2, [r3, #-1836]
+	ldr	r2, [r3, #-1840]
+	str	r2, [r3, #-1680]
+	ldr	r2, [r3, #-2084]
 	str	r2, [r3, #-1676]
-	ldr	r2, [r3, #-2080]
+	ldr	r2, [r3, #-1880]
 	str	r2, [r3, #-1672]
-	ldr	r2, [r3, #-1876]
+	ldr	r2, [r3, #-1872]
 	str	r2, [r3, #-1668]
-	ldr	r2, [r3, #-1868]
+	ldr	r2, [r3, #-1832]
 	str	r2, [r3, #-1664]
 	ldr	r2, [r3, #-1828]
 	str	r2, [r3, #-1660]
-	ldr	r2, [r3, #-1824]
-	str	r2, [r3, #-1656]
-	ldr	r2, [r3, #-1708]
+	ldr	r2, [r3, #-1712]
+	str	r2, [r3, #-1648]
+	ldr	r2, [r3, #-1008]
 	str	r2, [r3, #-1644]
-	ldr	r2, [r3, #-1004]
-	str	r2, [r3, #-1640]
-	ldr	r2, .L1746+12
+	ldr	r2, .L1667+12
 	b	FtlVendorPartWrite
-.L1747:
+.L1668:
 	.align	2
-.L1746:
+.L1667:
 	.word	.LANCHOR2
 	.word	1179929683
-	.word	1342177334
-	.word	.LANCHOR2-1704
+	.word	1342177344
+	.word	.LANCHOR2-1708
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -15282,43 +14524,43 @@ FtlEctTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L1755
+	ldr	r1, .L1676
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, [r1, #-1884]
+	ldr	r3, [r1, #-1888]
 	cmp	r3, #0
 	moveq	r2, #32
-	beq	.L1749
-	ldr	r2, [r1, #-1824]
+	beq	.L1670
+	ldr	r2, [r1, #-1828]
 	cmp	r2, #29
 	movls	r2, #4
 	movhi	r2, #32
-.L1749:
+.L1670:
 	mov	r3, #264
 	ldrh	r1, [r1, r3]
 	cmp	r1, #31
 	addls	r1, r1, #1
-	ldrls	r2, .L1755
+	ldrls	r2, .L1676
 	strlsh	r1, [r2, r3]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	ldr	r3, .L1755
-	bne	.L1751
-	ldr	r1, [r3, #-936]
+	ldr	r3, .L1676
+	bne	.L1672
+	ldr	r1, [r3, #-940]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1752
-.L1751:
-	ldr	r2, [r3, #-936]
+	bcc	.L1673
+.L1672:
+	ldr	r2, [r3, #-940]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1755+4
+	ldr	r1, .L1676+4
 	str	r1, [r2, #0]
-	ldr	r1, .L1755+8
-	ldr	r2, [r3, #-936]
+	ldr	r1, .L1676+8
+	ldr	r2, [r3, #-940]
 	ldrh	r1, [r3, r1]
 	mov	r3, r1, asl #9
 	str	r3, [r2, #12]
@@ -15329,20 +14571,20 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1752:
+.L1673:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1756:
+.L1677:
 	.align	2
-.L1755:
+.L1676:
 	.word	.LANCHOR2
 	.word	1112818501
-	.word	-940
+	.word	-944
 	.fnend
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
 	.align	2
-	.type	FtlReadRefresh.part.14, %function
-FtlReadRefresh.part.14:
+	.type	FtlReadRefresh.part.13, %function
+FtlReadRefresh.part.13:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -15350,27 +14592,31 @@ FtlReadRefresh.part.14:
 	.save {r4, r5, r6, lr}
 	.pad #40
 	sub	sp, sp, #40
-	ldr	r4, .L1762
+	ldr	r4, .L1686
+	ldr	r6, .L1686+4
+	ldr	r2, [r4, #-1624]
+	ldr	r3, [r6, #3968]
+	cmp	r2, r3
+	bcs	.L1679
 	mov	r5, #2048
-	ldr	r6, .L1762+4
-.L1760:
-	ldr	r0, [r4, #-1620]
-	ldr	r3, [r6, #3972]
+.L1682:
+	ldr	r0, [r4, #-1624]
+	ldr	r3, [r6, #3968]
 	cmp	r0, r3
-	bcs	.L1758
-	mov	r2, #0
+	bcs	.L1684
 	mov	r1, sp
+	mov	r2, #0
 	bl	log2phys
-	ldr	r2, [sp, #0]
-	ldr	r3, [r4, #-1620]
-	cmn	r2, #1
+	ldr	r0, [sp, #0]
+	ldr	r3, [r4, #-1624]
+	cmn	r0, #1
 	add	r3, r3, #1
-	str	r3, [r4, #-1620]
-	beq	.L1759
+	str	r3, [r4, #-1624]
+	beq	.L1681
+	str	r0, [sp, #8]
 	add	r0, sp, #40
-	str	r2, [sp, #8]
-	mov	r1, #1
 	mov	r2, #0
+	mov	r1, #1
 	str	r2, [r0, #-36]!
 	str	r3, [sp, #20]
 	str	r2, [sp, #12]
@@ -15378,26 +14624,35 @@ FtlReadRefresh.part.14:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	cmp	r3, #256
-	bne	.L1758
+	bne	.L1684
 	ldr	r0, [sp, #0]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1758
-.L1759:
+	b	.L1684
+.L1681:
 	subs	r5, r5, #1
-	bne	.L1760
-.L1758:
+	bne	.L1682
+	b	.L1680
+.L1679:
+	ldr	r3, [r4, #-1884]
+	mov	r0, #0
+	str	r0, [r4, #-1628]
+	str	r0, [r4, #-1624]
+	str	r3, [r4, #-1632]
+	b	.L1680
+.L1684:
 	mvn	r0, #0
+.L1680:
 	add	sp, sp, #40
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L1763:
+.L1687:
 	.align	2
-.L1762:
+.L1686:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
-	.size	FtlReadRefresh.part.14, .-FtlReadRefresh.part.14
+	.size	FtlReadRefresh.part.13, .-FtlReadRefresh.part.13
 	.align	2
 	.global	FtlReadRefresh
 	.type	FtlReadRefresh, %function
@@ -15406,54 +14661,46 @@ FtlReadRefresh:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1773
-	ldr	r0, .L1773+4
-	ldr	r2, [r3, #-1624]
+	ldr	r3, .L1695
+	ldr	r2, [r3, #-1628]
 	cmp	r2, #0
-	mov	r2, r3
-	beq	.L1765
-	ldr	r1, [r3, #-1620]
-	ldr	r2, [r0, #3972]
+	beq	.L1689
+	b	FtlReadRefresh.part.13
+.L1689:
+	ldr	r1, .L1695+4
+	ldr	r0, [r3, #-1832]
+	ldr	r2, [r3, #-1888]
+	ldrb	r1, [r1, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	addeq	r0, r2, r0, lsr #10
+	ldr	r2, [r3, #-1884]
+	moveq	r1, #33554432
+	movne	r0, #4194304
+	moveq	r0, r1, asr r0
+	ldr	r1, [r3, #-1632]
+	add	r3, r2, #1048576
+	cmp	r1, r3
+	bhi	.L1691
+	add	r1, r0, r1
 	cmp	r1, r2
-	bcs	.L1766
-	b	FtlReadRefresh.part.14
-.L1766:
-	mov	r2, #0
-	str	r2, [r3, #-1624]
-	str	r2, [r3, #-1620]
-	ldr	r2, [r3, #-1880]
-	b	.L1772
-.L1765:
-	ldrb	r0, [r0, #80]	@ zero_extendqisi2
-	ldr	r1, [r3, #-1828]
-	cmp	r0, #0
-	ldr	r3, [r3, #-1884]
-	addeq	r1, r3, r1, lsr #10
-	moveq	r3, #33554432
-	moveq	r1, r3, asr r1
-	ldr	r3, [r2, #-1628]
-	ldr	r2, [r2, #-1880]
-	movne	r1, #1048576
-	add	r0, r2, #1048576
-	cmp	r3, r0
-	bhi	.L1769
-	add	r3, r1, r3
-	cmp	r3, r2
-	bcs	.L1767
-.L1769:
-	ldr	r3, .L1773
+	bcc	.L1691
+	ldr	r3, .L1695
+	ldrb	r3, [r3, #-1796]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1692
+.L1691:
+	ldr	r3, .L1695
 	mov	r1, #1
-	str	r1, [r3, #-1624]
+	str	r2, [r3, #-1632]
+	str	r1, [r3, #-1628]
 	mov	r1, #0
-	str	r1, [r3, #-1620]
-.L1772:
-	str	r2, [r3, #-1628]
-.L1767:
+	str	r1, [r3, #-1624]
+.L1692:
 	mov	r0, #0
 	bx	lr
-.L1774:
+.L1696:
 	.align	2
-.L1773:
+.L1695:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -15471,208 +14718,206 @@ FtlMapTblRecovery:
 	sub	sp, sp, #28
 	ldr	r3, [r0, #16]
 	mov	r4, r0
-	ldrh	sl, [r0, #6]
+	ldr	r7, [r0, #24]
 	mov	r1, #0
-	ldr	r8, [r0, #24]
-	mov	r9, #0
-	ldr	r5, .L1795
+	ldrh	r8, [r0, #6]
+	mov	fp, #0
 	str	r3, [sp, #16]
-	mov	r2, sl, asl #2
 	ldrh	r3, [r0, #8]
-	ldr	r7, [r0, #12]
-	mov	r0, r8
+	mov	sl, r7
+	ldr	r9, [r0, #12]
+	mov	r2, r8, asl #2
+	mov	r0, r7
 	str	r3, [sp, #8]
 	bl	ftl_memset
-	ldr	r3, [r5, #-2076]
-	ldr	r6, [r5, #-952]
-	str	r9, [r4, #32]
-	str	r3, [r5, #176]
+	ldr	r3, .L1717
+	str	fp, [r4, #32]
+	str	fp, [r4, #28]
+	ldr	r2, [r3, #-2080]
+	ldr	r5, [r3, #-956]
+	str	r2, [r3, #164]
+	str	r5, [r3, #168]
 	mvn	r3, #0
-	str	r6, [r5, #180]
 	strh	r3, [r4, #0]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #1
 	str	r3, [r4, #36]
 	ldr	r3, [sp, #8]
-	str	r9, [r4, #28]
 	sub	r3, r3, #1
 	str	r3, [sp, #12]
-	b	.L1776
-.L1790:
+	ldr	r3, .L1717+4
+	b	.L1698
+.L1711:
 	ldr	r0, [sp, #12]
-	cmp	r3, r0
-	mov	r3, r3, asl #1
-	bne	.L1777
-	ldrh	r0, [r7, r3]
+	cmp	r2, r0
+	mov	r2, r2, asl #1
+	bne	.L1699
+	ldrh	r0, [r9, r2]
 	mov	r1, #1
-	add	fp, r7, r3
+	add	r3, r9, r2
+	str	r3, [sp, #8]
 	bl	FtlGetLastWrittenPage
 	ldr	r1, [sp, #12]
-	mov	r7, #0
 	ldr	r2, [sp, #16]
-	strh	r9, [r4, #0]	@ movhi
-	ldr	r5, .L1795
+	mov	r7, sl
+	strh	fp, [r4, #0]	@ movhi
+	mov	sl, #0
+	ldr	r6, .L1717
 	uxth	r0, r0
 	add	r3, r0, #1
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r3, [r2, r1, asl #2]
 	sxth	r9, r0
-	str	r7, [r5, #176]
 	add	r9, r9, #1
 	str	r3, [r4, #28]
-	b	.L1778
-.L1780:
-	ldrh	r2, [fp, #0]
+	b	.L1700
+.L1702:
+	ldr	r0, [sp, #8]
 	mov	r1, #1
-	ldr	r0, .L1795+4
+	ldrh	r2, [r0, #0]
+	ldr	r0, .L1717+8
 	orr	r3, r3, r2, asl #10
 	mov	r2, r1
-	str	r3, [r5, #172]
+	str	r3, [r6, #160]
 	bl	FlashReadPages
-	ldr	r3, [r5, #168]
+	ldr	r3, [r6, #156]
 	cmn	r3, #1
-	beq	.L1779
-	ldrh	r3, [r6, #8]
-	cmp	r3, sl
-	bcs	.L1779
+	beq	.L1701
+	ldrh	r3, [r5, #8]
+	cmp	r3, r8
+	bcs	.L1701
 	ldrh	r2, [r4, #4]
-	ldrh	r1, [r6, #0]
+	ldrh	r1, [r5, #0]
 	cmp	r1, r2
-	ldreq	r2, [r5, #172]
-	streq	r2, [r8, r3, asl #2]
-.L1779:
-	add	r7, r7, #1
-	uxth	r7, r7
-.L1778:
-	sxth	r3, r7
+	ldreq	r2, [r6, #160]
+	streq	r2, [r7, r3, asl #2]
+.L1701:
+	add	sl, sl, #1
+	uxth	sl, sl
+.L1700:
+	sxth	r3, sl
 	cmp	r3, r9
-	blt	.L1780
-	b	.L1781
-.L1777:
-	ldr	r2, [r5, #-2076]
-	add	r0, r7, r3
-	ldr	fp, .L1795+8
-	str	r0, [sp, #20]
-	str	r2, [r5, #176]
-	ldrh	r1, [r7, r3]
-	movw	r3, #3914
-	ldrh	r2, [fp, r3]
-	ldr	r0, .L1795+4
+	blt	.L1702
+	b	.L1703
+.L1699:
+	ldr	r6, .L1717
+	movw	r7, #3910
+	add	r0, r6, #156
+	ldr	r1, [r6, #-2080]
+	str	r1, [r6, #164]
+	add	r1, r9, r2
+	str	r1, [sp, #20]
+	ldrh	r1, [r9, r2]
+	ldrh	r2, [r3, r7]
 	sub	r2, r2, #1
-	str	r3, [sp, #0]
 	orr	r2, r2, r1, asl #10
 	mov	r1, #1
-	str	r2, [r5, #172]
+	str	r2, [r6, #160]
 	mov	r2, r1
+	str	r3, [sp, #4]
 	bl	FlashReadPages
-	ldr	r2, [r5, #168]
-	ldr	r3, [sp, #0]
+	ldr	r2, [r6, #156]
+	ldr	r3, [sp, #4]
 	cmn	r2, #1
-	beq	.L1782
-	ldrh	r1, [r6, #0]
+	beq	.L1714
+	ldrh	r1, [r5, #0]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
-	bne	.L1782
-	ldrh	r1, [r6, #8]
+	bne	.L1714
+	ldrh	r1, [r5, #8]
 	movw	r2, #64245
 	cmp	r1, r2
-	bne	.L1782
-	b	.L1794
-.L1785:
-	ldr	r0, [r5, #-2076]
+	bne	.L1714
+	b	.L1715
+.L1707:
+	ldr	r0, [r6, #-2080]
 	mov	ip, r1, asl #3
 	add	r2, r2, #1
 	ldr	r1, [r0, r1, asl #3]
 	uxth	r2, r2
 	uxth	r1, r1
-	cmp	r1, sl
+	cmp	r1, r8
 	addcc	r0, r0, ip
 	ldrcc	r0, [r0, #4]
-	strcc	r0, [r8, r1, asl #2]
-	b	.L1783
-.L1794:
+	strcc	r0, [sl, r1, asl #2]
+	b	.L1705
+.L1715:
 	mov	r2, #0
-.L1783:
-	ldrh	r0, [fp, r3]
+.L1705:
+	ldrh	r0, [r3, r7]
 	sxth	r1, r2
 	sub	r0, r0, #1
 	cmp	r1, r0
-	blt	.L1785
-	b	.L1786
-.L1782:
-	ldr	r1, .L1795
-	mov	fp, #0
-	ldr	r3, .L1795+8
-	add	ip, r1, #168
-	str	fp, [r1, #176]
-	b	.L1787
-.L1789:
+	blt	.L1707
+	b	.L1708
+.L1710:
 	ldr	r0, [sp, #20]
 	ldrh	r1, [r0, #0]
-	mov	r0, ip
-	stmia	sp, {r3, ip}
+	ldr	r0, .L1717+8
 	orr	r2, r2, r1, asl #10
 	mov	r1, #1
-	str	r2, [r5, #172]
+	str	r2, [r7, #160]
 	mov	r2, r1
+	str	r3, [sp, #4]
 	bl	FlashReadPages
-	ldr	r2, [r5, #168]
-	ldmia	sp, {r3, ip}
+	ldr	r2, [r7, #156]
+	ldr	r3, [sp, #4]
 	cmn	r2, #1
-	beq	.L1788
-	ldrh	r2, [r6, #8]
-	cmp	r2, sl
-	bcs	.L1788
+	beq	.L1709
+	ldrh	r2, [r5, #8]
+	cmp	r2, r8
+	bcs	.L1709
 	ldrh	r1, [r4, #4]
-	ldrh	r0, [r6, #0]
+	ldrh	r0, [r5, #0]
 	cmp	r0, r1
-	ldreq	r1, [r5, #172]
-	streq	r1, [r8, r2, asl #2]
-.L1788:
+	ldreq	r1, [r7, #160]
+	streq	r1, [sl, r2, asl #2]
+.L1709:
+	add	r6, r6, #1
+	uxth	r6, r6
+	b	.L1716
+.L1714:
+	ldr	r7, .L1717
+	mov	r6, #0
+.L1716:
+	movw	r1, #3910
+	sxth	r2, r6
+	ldrh	r1, [r3, r1]
+	cmp	r2, r1
+	blt	.L1710
+.L1708:
 	add	fp, fp, #1
 	uxth	fp, fp
-.L1787:
-	movw	r1, #3914
+.L1698:
+	ldr	r1, [sp, #8]
 	sxth	r2, fp
-	ldrh	r1, [r3, r1]
 	cmp	r2, r1
-	blt	.L1789
-.L1786:
-	add	r9, r9, #1
-	uxth	r9, r9
-.L1776:
-	ldr	r1, [sp, #8]
-	sxth	r3, r9
-	cmp	r3, r1
-	blt	.L1790
-.L1781:
+	blt	.L1711
+.L1703:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
-	ldr	r1, .L1795+8
-	movw	r3, #3914
+	ldr	r1, .L1717+4
+	movw	r3, #3910
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bne	.L1791
+	bne	.L1712
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1791:
-	ldrh	r2, [r4, #8]
-	ldrh	r3, [r4, #10]
-	cmp	r2, r3
-	bcc	.L1792
+.L1712:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
 	mov	r0, r4
 	bl	ftl_map_blk_gc
-.L1792:
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1796:
+.L1718:
 	.align	2
-.L1795:
+.L1717:
 	.word	.LANCHOR2
-	.word	.LANCHOR2+168
 	.word	.LANCHOR0
+	.word	.LANCHOR2+156
 	.fnend
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
@@ -15685,14 +14930,14 @@ FtlLoadMapInfo:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L1798
+	ldr	r0, .L1720
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1799:
+.L1721:
 	.align	2
-.L1798:
-	.word	.LANCHOR2-1088
+.L1720:
+	.word	.LANCHOR2-1092
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	2
@@ -15704,34 +14949,34 @@ FtlLoadVonderInfo:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	movw	r2, #3932
-	ldr	r3, .L1801
-	ldr	r0, .L1801+4
+	movw	r2, #3928
+	ldr	r3, .L1723
+	ldr	r0, .L1723+4
 	ldrh	r2, [r3, r2]
 	strh	r2, [r0, #234]	@ movhi
-	ldr	r2, .L1801+8
+	ldr	r2, .L1723+8
 	strh	r2, [r0, #228]	@ movhi
-	movw	r2, #3956
+	mov	r2, #3952
 	ldrh	r2, [r3, r2]
 	strh	r2, [r0, #232]	@ movhi
-	movw	r2, #3934
+	movw	r2, #3930
 	ldrh	r2, [r3, r2]
-	ldr	r3, [r3, #3960]
+	ldr	r3, [r3, #3956]
 	strh	r2, [r0, #230]	@ movhi
 	str	r3, [r0, #236]
-	ldr	r3, [r0, #-924]
-	str	r3, [r0, #240]
 	ldr	r3, [r0, #-928]
+	str	r3, [r0, #240]
+	ldr	r3, [r0, #-932]
 	str	r3, [r0, #244]
-	ldr	r3, [r0, #-920]
+	ldr	r3, [r0, #-924]
 	str	r3, [r0, #248]
 	add	r0, r0, #224
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1802:
+.L1724:
 	.align	2
-.L1801:
+.L1723:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-3962
@@ -15746,15 +14991,19 @@ FtlRecoverySuperblock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r2, #65535
+	ldrh	r3, [r0, #0]
 	.pad #68
 	sub	sp, sp, #68
-	ldrh	r3, [r0, #2]
 	mov	r4, r0
-	ldr	r2, .L1888
+	cmp	r3, r2
+	beq	.L1726
+	ldrh	r3, [r0, #2]
+	ldr	r1, .L1813
 	ldrb	fp, [r0, #6]	@ zero_extendqisi2
 	str	r3, [sp, #20]
-	movw	r3, #3912
-	ldrh	r3, [r2, r3]
+	movw	r3, #3908
+	ldrh	r3, [r1, r3]
 	ldr	ip, [sp, #20]
 	str	fp, [sp, #32]
 	cmp	r3, ip
@@ -15762,66 +15011,65 @@ FtlRecoverySuperblock:
 	streqh	r3, [r0, #4]	@ movhi
 	moveq	r2, r3	@ movhi
 	ldrneh	r0, [r0, #16]
-	movwne	r2, #65535
-	bne	.L1806
-	b	.L1885
-.L1807:
+	bne	.L1728
+	b	.L1810
+.L1729:
 	add	r3, r3, #1
 	uxth	r3, r3
 	add	r1, r4, r3, asl #1
 	ldrh	r0, [r1, #16]
-.L1806:
+.L1728:
 	cmp	r0, r2
-	beq	.L1807
+	beq	.L1729
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	cmp	r1, #1
-	bne	.L1808
+	bne	.L1730
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r7, r0
-	beq	.L1809
-	ldr	r3, .L1888
-	ldrb	r2, [r3, #80]	@ zero_extendqisi2
+	beq	.L1731
+	ldr	r3, .L1813
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1878
+	bne	.L1803
 	add	r3, r3, r0, asl #1
-	movw	r2, #2228
+	movw	r2, #3076
 	ldrh	r5, [r3, r2]
-	b	.L1872
-.L1808:
+	b	.L1795
+.L1730:
 	mov	r1, #0
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r7, r0
-	beq	.L1809
-.L1878:
+	beq	.L1731
+.L1803:
 	mov	r5, r7
-.L1872:
-	ldr	r3, .L1888
-	movw	r2, #3844
+.L1795:
+	ldr	r3, .L1813
+	mov	r2, #3840
 	mov	r6, #0
 	str	r4, [sp, #40]
 	movw	ip, #65535
 	ldrh	r9, [r3, r2]
-	ldr	r2, .L1888+4
-	ldr	sl, [r2, #-984]
-	ldr	r8, [r2, #-1164]
-	movw	r2, #3924
+	ldr	r2, .L1813+4
+	ldr	sl, [r2, #-988]
+	ldr	r8, [r2, #-1168]
+	mov	r2, #3920
 	ldrh	lr, [r3, r2]
 	mov	r2, r4
 	mov	r3, r6
-	b	.L1811
-.L1809:
+	b	.L1733
+.L1731:
 	mov	r3, #0
 	strh	r3, [r4, #2]	@ movhi
 	mov	r2, r3	@ movhi
-.L1885:
+.L1810:
 	strb	r2, [r4, #6]
-	b	.L1805
-.L1813:
+	b	.L1726
+.L1735:
 	ldrh	r0, [r2, #16]
 	cmp	r0, ip
-	beq	.L1812
+	beq	.L1734
 	mov	fp, #36
 	orr	r0, r5, r0, asl #10
 	mla	r1, fp, r6, sl
@@ -15837,49 +15085,49 @@ FtlRecoverySuperblock:
 	bic	r0, r0, #3
 	add	r0, r8, r0
 	str	r0, [r1, #12]
-.L1812:
+.L1734:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	uxth	r3, r3
-.L1811:
+.L1733:
 	cmp	r3, r9
-	bne	.L1813
+	bne	.L1735
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
 	movne	r3, #0
-	bne	.L1879
-	ldr	r3, .L1888
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	bne	.L1804
+	ldr	r3, .L1813
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	adds	r3, r3, #0
 	movne	r3, #1
-.L1879:
-	ldr	r8, .L1888+4
+.L1804:
+	ldr	r8, .L1813+4
 	mov	r1, r6
 	str	r3, [sp, #28]
 	mov	sl, #0
 	ldr	r2, [sp, #28]
-	ldr	r0, [r8, #-984]
+	ldr	r0, [r8, #-988]
 	bl	FlashReadPages
-	ldr	fp, [r8, #-1844]
+	ldr	fp, [r8, #-1848]
 	uxth	r2, r5
-	ldr	r9, [r8, #-984]
+	ldr	r9, [r8, #-988]
 	movw	ip, #65535
 	mov	r3, r8
 	str	fp, [sp, #16]
 	mov	r8, r2
 	str	ip, [sp, #12]
 	mov	fp, r7
-	b	.L1815
-.L1820:
+	b	.L1737
+.L1742:
 	ldr	r2, [r9, #0]
 	cmp	r2, #0
 	strne	r8, [sp, #12]
-	bne	.L1818
+	bne	.L1740
 	ldr	r2, [r9, #12]
 	ldr	r7, [r2, #4]
 	cmn	r7, #1
-	beq	.L1817
-	ldr	r1, [r3, #-1844]
+	beq	.L1739
+	ldr	r1, [r3, #-1848]
 	mov	r0, r7
 	str	r2, [sp, #8]
 	str	r3, [sp, #4]
@@ -15888,45 +15136,45 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #8]
 	cmp	r0, #0
 	addne	r7, r7, #1
-	strne	r7, [r3, #-1844]
-.L1817:
+	strne	r7, [r3, #-1848]
+.L1739:
 	ldr	r2, [r2, #0]
 	cmn	r2, #1
-	bne	.L1818
-	ldr	r3, .L1888+4
+	bne	.L1740
+	ldr	r3, .L1813+4
 	mov	r2, #36
 	uxth	r7, fp
-	ldr	r3, [r3, #-984]
+	ldr	r3, [r3, #-988]
 	mla	sl, r2, sl, r3
 	ldr	r0, [sl, #4]
-	b	.L1880
-.L1818:
+	b	.L1805
+.L1740:
 	add	sl, sl, #1
 	add	r9, r9, #36
 	uxth	sl, sl
-.L1815:
+.L1737:
 	cmp	sl, r6
-	bne	.L1820
-	ldr	r3, .L1888+4
+	bne	.L1742
+	ldr	r3, .L1813+4
 	add	r7, fp, #1
 	uxth	r7, r7
-	ldr	r3, [r3, #-984]
+	ldr	r3, [r3, #-988]
 	ldr	r0, [r3, #4]
-.L1880:
+.L1805:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
-	ldr	r3, .L1888
+	ldr	r3, .L1813
 	cmp	r2, #1
 	str	r0, [sp, #24]
-	bne	.L1821
-	ldrb	r1, [r3, #80]	@ zero_extendqisi2
+	bne	.L1743
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
 	cmp	r1, #0
 	addeq	r7, r3, r7, asl #1
-	movweq	r1, #2228
+	movweq	r1, #3076
 	ldreqh	r7, [r7, r1]
-.L1821:
-	movw	r1, #3912
+.L1743:
+	movw	r1, #3908
 	ldr	fp, [sp, #24]
 	ldrh	r3, [r3, r1]
 	ldr	ip, [sp, #32]
@@ -15938,28 +15186,30 @@ FtlRecoverySuperblock:
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
 	cmpeq	fp, ip
-	beq	.L1886
-.L1823:
+	moveq	r0, r4
+	moveq	r1, r7
+	moveq	r2, fp
+	beq	.L1811
 	ldr	r3, [sp, #16]
 	ldr	fp, [sp, #12]
 	sub	r6, r3, #1
 	movw	r3, #65535
 	cmp	fp, r3
-	bne	.L1824
+	bne	.L1746
 	cmp	r2, #0
-	bne	.L1825
-.L1824:
-	ldr	r2, .L1888+4
+	bne	.L1747
+.L1746:
+	ldr	r2, .L1813+4
 	uxth	r3, r5
 	ldr	ip, [sp, #20]
 	mvn	fp, #0
 	mov	sl, r3
 	mov	r9, fp
-	ldr	r1, [r2, #-1012]
-	ldr	r8, .L1888+4
+	ldr	r1, [r2, #-1016]
+	ldr	r8, .L1813+4
 	cmn	r1, #1
-	streq	r6, [r2, #-1012]
-	ldr	r2, [r2, #-1012]
+	streq	r6, [r2, #-1016]
+	ldr	r2, [r2, #-1016]
 	str	r2, [sp, #12]
 	add	r2, ip, #7
 	cmp	r3, r2
@@ -15968,12 +15218,12 @@ FtlRecoverySuperblock:
 	ldrle	r5, [sp, #20]
 	mov	r7, r6
 	uxthgt	r5, r5
-	b	.L1828
-.L1830:
+	b	.L1750
+.L1752:
 	ldrh	r0, [r1, #16]
 	movw	lr, #65535
 	cmp	r0, lr
-	beq	.L1829
+	beq	.L1751
 	ldr	ip, [sp, #16]
 	mov	r3, #36
 	orr	r0, r5, r0, asl #10
@@ -15981,111 +15231,111 @@ FtlRecoverySuperblock:
 	add	r6, r6, #1
 	uxth	r6, r6
 	str	r0, [lr, #4]
-.L1829:
+.L1751:
 	add	r2, r2, #1
 	add	r1, r1, #2
 	uxth	r2, r2
-.L1841:
+.L1763:
 	ldr	lr, [sp, #44]
 	cmp	r2, lr
-	bne	.L1830
+	bne	.L1752
 	ldr	r3, [sp, #36]
 	mov	r1, r6
-	ldr	r0, [r8, #-984]
+	ldr	r0, [r8, #-988]
 	ldr	r2, [sp, #28]
 	str	r3, [sp, #4]
 	bl	FlashReadPages
-	ldr	r2, .L1888
+	ldr	r2, .L1813
 	add	r0, r8, r5, asl #1
 	mov	r1, #0
 	str	r0, [sp, #16]
 	ldr	r3, [sp, #4]
-	ldrb	ip, [r2, #80]	@ zero_extendqisi2
-	ldr	r2, [r8, #-984]
+	ldrb	ip, [r2, #928]	@ zero_extendqisi2
+	ldr	r2, [r8, #-988]
 	str	ip, [sp, #36]
-	b	.L1831
-.L1839:
+	b	.L1753
+.L1761:
 	ldr	r0, [r2, #0]
 	cmp	r0, #0
-	bne	.L1832
+	bne	.L1754
 	ldr	r0, [r2, #12]
 	movw	ip, #65535
 	ldrh	lr, [r0, #0]
 	cmp	lr, ip
-	beq	.L1833
+	beq	.L1755
 	ldr	r0, [r0, #4]
 	cmn	r0, #1
-	beq	.L1833
+	beq	.L1755
 	cmn	fp, #1
-	ldr	r9, [r8, #-1012]
-	str	r0, [r8, #-1012]
-	bne	.L1833
+	ldr	r9, [r8, #-1016]
+	str	r0, [r8, #-1016]
+	bne	.L1755
 	ldr	lr, [sp, #16]
-	sub	r0, lr, #912
+	sub	r0, lr, #916
 	ldrh	r0, [r0, #0]
 	cmp	r0, ip
-	bne	.L1834
+	bne	.L1756
 	ldr	r0, [sp, #36]
 	cmp	r0, #0
-	beq	.L1833
-.L1834:
+	beq	.L1755
+.L1756:
 	cmp	r9, r7
 	mvneq	fp, #0
 	movne	fp, r9
-	b	.L1833
-.L1832:
+	b	.L1755
+.L1754:
 	mov	r6, r7
 	mov	r7, r3
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1825
-	ldr	r3, .L1888+4
+	bne	.L1747
+	ldr	r3, .L1813+4
 	movw	r2, #65535
 	add	r5, r3, r5, asl #1
-	sub	r5, r5, #912
+	sub	r5, r5, #916
 	ldrh	r1, [r5, #0]
 	cmp	r1, r2
-	bne	.L1835
+	bne	.L1757
 	cmn	fp, #1
-	bne	.L1881
-.L1836:
+	bne	.L1806
+.L1758:
 	ldr	fp, [sp, #12]
 	cmp	fp, r6
-	beq	.L1837
-.L1881:
-	str	fp, [r3, #-1012]
-	b	.L1825
-.L1837:
-	ldr	r2, [r3, #-1012]
-	b	.L1887
-.L1835:
+	beq	.L1759
+.L1806:
+	str	fp, [r3, #-1016]
+	b	.L1747
+.L1759:
+	ldr	r2, [r3, #-1016]
+	b	.L1812
+.L1757:
 	cmp	r9, r6
-	beq	.L1838
+	beq	.L1760
 	cmn	r9, #1
-	strne	r9, [r3, #-1012]
-	b	.L1825
-.L1838:
-	ldr	r2, [r3, #-1012]
+	strne	r9, [r3, #-1016]
+	b	.L1747
+.L1760:
+	ldr	r2, [r3, #-1016]
 	cmp	r2, r6
-	beq	.L1825
-.L1887:
+	beq	.L1747
+.L1812:
 	sub	r2, r2, #1
-	b	.L1882
-.L1833:
+	b	.L1807
+.L1755:
 	add	r1, r1, #1
 	add	r2, r2, #36
 	uxth	r1, r1
-.L1831:
+.L1753:
 	cmp	r1, r6
-	bne	.L1839
+	bne	.L1761
 	add	r5, r5, #1
 	uxth	r5, r5
-.L1828:
+.L1750:
 	cmp	r5, sl
-	bhi	.L1840
-	ldr	r1, .L1888
-	movw	r2, #3844
-	ldr	lr, [r8, #-984]
+	bhi	.L1762
+	ldr	r1, .L1813
+	mov	r2, #3840
+	ldr	lr, [r8, #-988]
 	mov	r6, #0
 	str	r3, [sp, #36]
 	ldrh	ip, [r1, r2]
@@ -16093,128 +15343,128 @@ FtlRecoverySuperblock:
 	str	lr, [sp, #16]
 	mov	r2, r6
 	str	ip, [sp, #44]
-	b	.L1841
-.L1840:
+	b	.L1763
+.L1762:
 	mov	r6, r7
 	mov	r7, r3
-	ldr	r3, .L1888+4
+	ldr	r3, .L1813+4
 	mvn	r2, #0
-.L1882:
-	str	r2, [r3, #-1012]
-.L1825:
-	ldr	r5, .L1888+4
+.L1807:
+	str	r2, [r3, #-1016]
+.L1747:
+	ldr	r5, .L1813+4
 	movw	r3, #266
 	mov	r2, #1
-	sub	r0, r5, #1088
+	ldr	r0, .L1813+8
 	strh	r2, [r5, r3]	@ movhi
 	bl	FtlMapBlkWriteDumpData
-	ldr	r9, [sp, #20]
-	str	r7, [sp, #36]
-.L1842:
-	ldr	r3, .L1888
-	movw	r2, #3844
+	ldr	r8, [sp, #20]
+	str	r7, [sp, #16]
+.L1764:
+	ldr	r3, .L1813
+	mov	r2, #3840
 	mov	r7, #0
-	ldr	lr, [r5, #-984]
+	ldr	lr, [r5, #-988]
 	mov	fp, #36
-	ldrh	r8, [r3, r2]
+	ldrh	sl, [r3, r2]
 	mov	r2, r4
-	ldrb	ip, [r3, #80]	@ zero_extendqisi2
+	ldrb	ip, [r3, #928]	@ zero_extendqisi2
 	mov	r3, r7
-	b	.L1843
-.L1846:
+	b	.L1765
+.L1768:
 	ldrh	r0, [r2, #16]
 	movw	r1, #65535
 	cmp	r0, r1
-	beq	.L1844
+	beq	.L1766
 	mla	r1, fp, r7, lr
-	orr	r0, r9, r0, asl #10
+	orr	r0, r8, r0, asl #10
 	str	r0, [r1, #4]
-	ldrb	sl, [r4, #8]	@ zero_extendqisi2
-	cmp	sl, #1
-	bne	.L1845
+	ldrb	r9, [r4, #8]	@ zero_extendqisi2
+	cmp	r9, #1
+	bne	.L1767
 	cmp	ip, #0
 	orrne	r0, r0, #-2147483648
 	strne	r0, [r1, #4]
-.L1845:
+.L1767:
 	add	r7, r7, #1
 	uxth	r7, r7
-.L1844:
+.L1766:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	uxth	r3, r3
-.L1843:
-	cmp	r3, r8
-	bne	.L1846
+.L1765:
+	cmp	r3, sl
+	bne	.L1768
 	mov	r1, r7
-	ldr	r0, [r5, #-984]
+	ldr	r0, [r5, #-988]
 	ldr	r2, [sp, #28]
 	bl	FlashReadPages
 	mov	r3, #36
 	mul	r3, r3, r7
 	mov	r7, #0
 	str	r3, [sp, #44]
-	b	.L1847
-.L1868:
-	ldr	sl, [r5, #-984]
-	add	sl, sl, r7
-	ldr	r8, [sl, #4]
-	ubfx	r0, r8, #10, #16
-	str	r8, [sp, #60]
+	b	.L1769
+.L1790:
+	ldr	r9, [r5, #-988]
+	add	r9, r9, r7
+	ldr	sl, [r9, #4]
+	ubfx	r0, sl, #10, #16
+	str	sl, [sp, #60]
 	bl	P2V_plane
 	ldr	r3, [sp, #20]
-	cmp	r9, r3
-	bcc	.L1848
+	cmp	r8, r3
+	bcc	.L1770
 	ldr	fp, [sp, #32]
 	mov	ip, r3
 	cmp	r0, fp
 	movcs	r3, #0
 	movcc	r3, #1
-	cmp	r9, ip
+	cmp	r8, ip
 	movne	r3, #0
 	cmp	r3, #0
-	bne	.L1848
+	bne	.L1770
 	ldr	r3, [sp, #24]
-	ldr	ip, [sp, #36]
+	ldr	ip, [sp, #16]
 	cmp	r0, r3
-	cmpeq	r9, ip
-	beq	.L1849
-	ldr	r3, [sl, #0]
+	cmpeq	r8, ip
+	beq	.L1802
+	ldr	r3, [r9, #0]
 	cmn	r3, #1
-	beq	.L1850
-	ldr	r8, [sl, #12]
+	beq	.L1772
+	ldr	sl, [r9, #12]
 	movw	lr, #61589
-	ldrh	r3, [r8, #0]
+	ldrh	r3, [sl, #0]
 	cmp	r3, lr
-	bne	.L1857
-.L1851:
-	ldr	r6, [r8, #4]
+	bne	.L1779
+.L1773:
+	ldr	r6, [sl, #4]
 	cmn	r6, #1
-	beq	.L1852
-	ldr	r1, [r5, #-1844]
+	beq	.L1774
+	ldr	r1, [r5, #-1848]
 	mov	r0, r6
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
 	addne	r3, r6, #1
-	strne	r3, [r5, #-1844]
-.L1852:
-	ldr	sl, [r8, #8]
+	strne	r3, [r5, #-1848]
+.L1774:
+	ldr	r9, [sl, #8]
 	add	r1, sp, #56
-	ldr	r3, [r8, #12]
+	ldr	r3, [sl, #12]
 	mov	r2, #0
-	mov	r0, sl
+	mov	r0, r9
 	str	r3, [sp, #52]
 	bl	log2phys
-	ldr	r1, [r5, #-1012]
+	ldr	r1, [r5, #-1016]
 	cmn	r1, #1
-	beq	.L1853
+	beq	.L1775
 	mov	r0, r6
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1853
+	beq	.L1775
 	ldr	r3, [sp, #52]
 	cmn	r3, #1
-	beq	.L1854
-	ldr	r0, [r5, #-984]
+	beq	.L1776
+	ldr	r0, [r5, #-988]
 	mov	r1, #1
 	mov	r2, #0
 	add	r0, r0, r7
@@ -16222,47 +15472,47 @@ FtlRecoverySuperblock:
 	str	r3, [r0, #4]
 	str	fp, [sp, #12]
 	bl	FlashReadPages
-	ldr	r3, [r5, #-984]
+	ldr	r3, [r5, #-988]
 	ldr	ip, [fp, #4]
 	add	fp, r3, r7
 	ldr	r3, [r3, r7]
-	str	ip, [sp, #16]
+	str	ip, [sp, #36]
 	cmn	r3, #1
-	bne	.L1855
-	b	.L1856
-.L1854:
+	bne	.L1777
+	b	.L1778
+.L1776:
 	ldr	r3, [sp, #60]
 	ldr	r2, [sp, #56]
 	cmp	r2, r3
-	bne	.L1857
-	mov	r0, sl
+	bne	.L1779
+	mov	r0, r9
 	add	r1, sp, #52
 	mov	r2, #1
 	bl	log2phys
-.L1857:
+.L1779:
 	ldrh	r0, [r4, #0]
-	b	.L1884
-.L1855:
+	b	.L1809
+.L1777:
 	ldr	r3, [sp, #12]
-	ldr	r8, [r3, #8]
-	cmp	r8, sl
-	bne	.L1856
-	ldr	r0, [r5, #-1012]
-	ldr	r1, [sp, #16]
+	ldr	sl, [r3, #8]
+	cmp	sl, r9
+	bne	.L1778
+	ldr	r0, [r5, #-1016]
+	ldr	r1, [sp, #36]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1856
+	beq	.L1778
 	ldr	r3, [sp, #56]
 	ldr	r2, [sp, #60]
 	cmp	r3, r2
-	beq	.L1861
-.L1858:
+	beq	.L1783
+.L1780:
 	ldr	r2, [sp, #52]
 	cmp	r3, r2
-	beq	.L1856
+	beq	.L1778
 	cmn	r3, #1
 	streq	r3, [fp, #0]
-	beq	.L1860
+	beq	.L1782
 	ldr	ip, [fp, #12]
 	mov	r0, fp
 	str	r3, [fp, #4]
@@ -16270,178 +15520,194 @@ FtlRecoverySuperblock:
 	mov	r2, #0
 	str	ip, [sp, #12]
 	bl	FlashReadPages
-.L1860:
-	ldr	r3, [r5, #-984]
+.L1782:
+	ldr	r3, [r5, #-988]
 	ldr	r3, [r3, r7]
 	cmn	r3, #1
-	beq	.L1861
+	beq	.L1783
 	ldr	r3, [sp, #12]
-	ldr	r0, [r5, #-1012]
-	ldr	sl, [r3, #4]
-	mov	r1, sl
+	ldr	r0, [r5, #-1016]
+	ldr	r9, [r3, #4]
+	mov	r1, r9
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1861
-	ldr	r0, [sp, #16]
-	mov	r1, sl
+	beq	.L1783
+	ldr	r0, [sp, #36]
+	mov	r1, r9
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1856
-.L1861:
-	mov	r0, r8
+	beq	.L1778
+.L1783:
+	mov	r0, sl
 	ldr	r1, [sp, #52]
 	bl	FtlReUsePrevPpa
-.L1856:
+.L1778:
 	ldrh	r0, [r4, #0]
 	mvn	r3, #0
 	str	r3, [sp, #52]
 	bl	decrement_vpc_count
-	b	.L1863
-.L1853:
+	b	.L1785
+.L1775:
 	ldr	r3, [sp, #60]
 	ldr	r2, [sp, #56]
 	cmp	r2, r3
-	beq	.L1863
-	mov	r0, sl
+	beq	.L1785
+	mov	r0, r9
 	add	r1, sp, #60
 	mov	r2, #1
 	bl	log2phys
 	ldr	fp, [sp, #56]
 	cmn	fp, #1
-	beq	.L1863
+	beq	.L1785
 	ldr	r3, [sp, #52]
 	cmp	fp, r3
-	beq	.L1863
+	beq	.L1785
 	ubfx	r0, fp, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, .L1888+8
+	ldr	r3, .L1813+12
 	ldrh	r3, [r5, r3]
 	cmp	r3, r0
-	beq	.L1864
-	ldr	r3, .L1888+12
+	beq	.L1786
+	ldr	r3, .L1813+16
 	ldrh	r3, [r5, r3]
 	cmp	r3, r0
-	beq	.L1864
-	ldr	r3, .L1888+16
+	beq	.L1786
+	ldr	r3, .L1813+20
 	ldrh	r3, [r5, r3]
 	cmp	r3, r0
-	bne	.L1863
-.L1864:
-	ldr	ip, .L1888+4
+	bne	.L1785
+.L1786:
+	ldr	ip, .L1813+4
 	mov	r1, #1
 	mov	r2, #0
-	ldr	r0, [ip, #-984]
+	ldr	r0, [ip, #-988]
 	str	fp, [r0, #4]
-	ldr	r8, [r0, #12]
+	ldr	sl, [r0, #12]
 	bl	FlashReadPages
-	ldr	r0, .L1888+4
-	ldr	r1, [r8, #4]
-	ldr	r3, [r0, #-984]
+	ldr	r0, .L1813+4
+	ldr	r1, [sl, #4]
+	ldr	r3, [r0, #-988]
 	ldr	r3, [r3, #0]
 	cmn	r3, #1
-	beq	.L1863
+	beq	.L1785
 	mov	r0, r6
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1863
-	mov	r0, sl
+	bne	.L1785
+	mov	r0, r9
 	add	r1, sp, #56
 	mov	r2, #1
 	bl	log2phys
-.L1863:
+.L1785:
 	ldr	r0, [sp, #52]
 	cmn	r0, #1
-	beq	.L1848
+	beq	.L1770
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r5, #-2064]
+	ldr	r2, [r5, #-2068]
 	mov	r3, r0, asl #1
 	mov	r1, r0
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1865
-.L1884:
+	beq	.L1787
+.L1809:
 	bl	decrement_vpc_count
-	b	.L1848
-.L1865:
-	ldr	r0, .L1888+20
+	b	.L1770
+.L1787:
+	ldr	r0, .L1813+24
 	bl	printk
-	b	.L1848
-.L1850:
+	b	.L1770
+.L1772:
 	ldr	r3, [r5, #268]
 	cmp	r3, #31
 	addls	r2, r5, r3, asl #2
 	addls	r3, r3, #1
 	strls	r3, [r5, #268]
-	strls	r8, [r2, #272]
+	strls	sl, [r2, #272]
 	ldrh	r0, [r4, #0]
 	bl	decrement_vpc_count
-	ldr	r3, [r5, #-1012]
+	ldr	r3, [r5, #-1016]
 	cmn	r3, #1
-	beq	.L1883
-.L1867:
+	beq	.L1808
+.L1789:
 	cmp	r3, r6
-	bls	.L1848
-.L1883:
-	str	r6, [r5, #-1012]
-.L1848:
+	bls	.L1770
+.L1808:
+	str	r6, [r5, #-1016]
+.L1770:
 	add	r7, r7, #36
-.L1847:
+.L1769:
 	ldr	r3, [sp, #44]
 	cmp	r7, r3
-	bne	.L1868
-	ldr	r3, .L1888
-	add	r9, r9, #1
-	movw	r2, #3912
-	uxth	r9, r9
+	bne	.L1790
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	add	r8, r8, #1
+	cmp	r3, #1
+	uxth	r8, r8
+	bne	.L1791
+	ldr	r3, .L1813
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1791
+	movw	r2, #3910
+	ldr	ip, [sp, #16]
+	ldrh	r3, [r3, r2]
+	cmp	ip, r8
+	cmpeq	r3, r8
+	beq	.L1802
+.L1791:
+	ldr	r3, .L1813
+	movw	r2, #3908
 	ldrh	r2, [r3, r2]
-	cmp	r9, r2
-	bne	.L1842
+	cmp	r8, r2
+	bne	.L1764
 	mov	r2, #0
-	movw	r1, #3844
+	mov	r1, #3840
 	strh	r2, [r4, #4]	@ movhi
 	ldrh	r1, [r3, r1]
 	mov	r3, r2
-	strh	r9, [r4, #2]	@ movhi
+	strh	r8, [r4, #2]	@ movhi
 	movw	r2, #65535
 	ldr	r0, [sp, #40]
-	b	.L1869
-.L1871:
+	b	.L1792
+.L1794:
 	add	r0, r0, #2
 	ldrh	ip, [r0, #14]
 	cmp	ip, r2
 	strneb	r3, [r4, #6]
-	bne	.L1805
-.L1870:
+	bne	.L1726
+.L1793:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1869:
+.L1792:
 	cmp	r3, r1
-	bne	.L1871
-	b	.L1805
-.L1849:
-	ldr	r7, [sp, #36]
-	ldr	fp, [sp, #24]
-	strh	r7, [r4, #2]	@ movhi
-	strb	fp, [r4, #6]
-.L1886:
+	bne	.L1794
+	b	.L1726
+.L1802:
+.L1771:
+	ldr	r7, [sp, #16]
 	mov	r0, r4
+	ldr	r3, [sp, #24]
 	mov	r1, r7
-	mov	r2, fp
+	strh	r7, [r4, #2]	@ movhi
+	mov	r2, r3
+	strb	r3, [r4, #6]
+.L1811:
 	bl	ftl_sb_update_avl_pages
-.L1805:
+.L1726:
 	mov	r0, #0
 	add	sp, sp, #68
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1889:
+.L1814:
 	.align	2
-.L1888:
+.L1813:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-2044
-	.word	-1996
-	.word	-1948
-	.word	.LC112
+	.word	.LANCHOR2-1092
+	.word	-2048
+	.word	-2000
+	.word	-1952
+	.word	.LC116
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
@@ -16451,78 +15717,78 @@ FtlWriteDumpData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
-	.save {r4, r5, r6, r7, r8, sl, lr}
-	.pad #44
-	sub	sp, sp, #44
-	ldr	r4, .L1899
-	ldr	r3, .L1899+4
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r4, .L1824
+	ldr	r3, .L1824+4
 	mov	r2, r4
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	beq	.L1891
-	ldrb	r1, [r4, #-2036]	@ zero_extendqisi2
+	beq	.L1816
+	ldrb	r1, [r4, #-2040]	@ zero_extendqisi2
 	cmp	r1, #0
-	bne	.L1891
-	ldr	r5, .L1899+8
-	movw	r0, #3912
-	ldrb	r1, [r4, #-2037]	@ zero_extendqisi2
+	bne	.L1816
+	ldr	r5, .L1824+8
+	movw	r0, #3908
+	ldrb	r1, [r4, #-2041]	@ zero_extendqisi2
 	ldrh	r0, [r5, r0]
 	mul	r1, r0, r1
 	cmp	r3, r1
-	beq	.L1891
-	ldrb	r8, [r4, #-2034]	@ zero_extendqisi2
-	movw	r3, #3844
-	ldr	r7, [r5, #3972]
+	beq	.L1816
+	ldrb	r8, [r4, #-2038]	@ zero_extendqisi2
+	mov	r3, #3840
+	ldr	r7, [r5, #3968]
 	cmp	r8, #0
 	ldrh	r6, [r5, r3]
-	bne	.L1890
+	bne	.L1815
 	sub	r7, r7, #1
 	mov	r1, sp
 	mov	r2, r8
 	mov	r0, r7
 	bl	log2phys
 	ldr	r3, [sp, #0]
-	ldr	r0, [r4, #-2076]
-	ldr	r4, [r4, #-952]
+	ldr	r0, [r4, #-2080]
+	ldr	r4, [r4, #-956]
 	cmn	r3, #1
 	str	r3, [sp, #8]
 	str	r7, [sp, #20]
 	str	r0, [sp, #12]
 	str	r4, [sp, #16]
 	str	r8, [r4, #4]
-	beq	.L1893
+	beq	.L1818
 	add	r0, sp, #4
 	mov	r1, #1
 	mov	r2, r8
 	bl	FlashReadPages
-	b	.L1894
-.L1893:
-	movw	r3, #3922
+	b	.L1819
+.L1818:
+	movw	r3, #3918
 	mov	r1, #255
 	ldrh	r2, [r5, r3]
 	bl	ftl_memset
-.L1894:
-	ldr	r3, .L1899+12
+.L1819:
+	ldr	r3, .L1824+12
 	mov	r6, r6, asl #2
-	ldr	r5, .L1899
-	ldr	sl, .L1899+4
+	ldr	r5, .L1824
+	ldr	r8, .L1824+4
 	strh	r3, [r4, #0]	@ movhi
-	ldr	r8, .L1899+16
-	b	.L1895
-.L1898:
-	ldrh	r3, [r5, sl]
+	b	.L1820
+.L1823:
+	ldrh	r3, [r5, r8]
 	cmp	r3, #0
-	beq	.L1896
+	beq	.L1821
 	ldr	r3, [sp, #8]
-	sub	r6, r6, #1
+	sub	r0, r0, #2048
 	str	r7, [r4, #8]
-	ldr	r0, .L1899+20
+	sub	r6, r6, #1
 	str	r3, [r4, #12]
-	ldrh	r3, [r5, r8]
+	ldr	r3, .L1824+16
+	ldrh	r3, [r5, r3]
 	strh	r3, [r4, #2]	@ movhi
 	bl	get_new_active_ppa
-	ldr	r3, [r5, #-1844]
+	ldr	r3, [r5, #-1848]
 	mov	r2, #0
 	mov	r1, #1
 	str	r0, [sp, #8]
@@ -16530,36 +15796,36 @@ FtlWriteDumpData:
 	str	r3, [r4, #4]
 	add	r3, r3, #1
 	cmn	r3, #1
-	str	r3, [r5, #-1844]
+	str	r3, [r5, #-1848]
 	moveq	r3, #0
-	streq	r3, [r5, #-1844]
+	streq	r3, [r5, #-1848]
 	mov	r3, r2
 	bl	FlashProgPages
-	ldrh	r0, [r5, r8]
+	ldr	r3, .L1824+16
+	ldrh	r0, [r5, r3]
 	bl	decrement_vpc_count
-.L1895:
+.L1820:
 	cmp	r6, #0
-	bne	.L1898
-.L1896:
-	ldr	r3, .L1899
-	mov	r2, #1
-	strb	r2, [r3, #-2034]
-	b	.L1890
-.L1891:
-	mov	r3, #0
-	strb	r3, [r2, #-2034]
-.L1890:
-	add	sp, sp, #44
-	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L1900:
+	ldr	r0, .L1824
+	bne	.L1823
+.L1821:
+	mov	r3, #1
+	strb	r3, [r0, #-2038]
+	b	.L1815
+.L1816:
+	mov	r3, #0
+	strb	r3, [r2, #-2038]
+.L1815:
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1825:
 	.align	2
-.L1899:
+.L1824:
 	.word	.LANCHOR2
-	.word	-2040
+	.word	-2044
 	.word	.LANCHOR0
 	.word	-3947
-	.word	-2044
-	.word	.LANCHOR2-2044
+	.word	-2048
 	.fnend
 	.size	FtlWriteDumpData, .-FtlWriteDumpData
 	.align	2
@@ -16573,31 +15839,31 @@ l2p_flush:
 	.save {r3, r4, r5, r6, r7, lr}
 	bl	FtlWriteDumpData
 	mov	r4, #0
-	ldr	r7, .L1905
-	movw	r6, #3950
-	ldr	r5, .L1905+4
-	b	.L1902
-.L1904:
-	ldr	r3, [r5, #-1900]
+	ldr	r7, .L1830
+	movw	r6, #3946
+	ldr	r5, .L1830+4
+	b	.L1827
+.L1829:
+	ldr	r3, [r5, #-1904]
 	mov	r2, #12
 	mla	r3, r2, r4, r3
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1903
+	bge	.L1828
 	mov	r0, r4
 	bl	flush_l2p_region
-.L1903:
+.L1828:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L1902:
+.L1827:
 	ldrh	r3, [r7, r6]
 	cmp	r3, r4
-	bhi	.L1904
+	bhi	.L1829
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1906:
+.L1831:
 	.align	2
-.L1905:
+.L1830:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -16612,97 +15878,97 @@ FtlVpcCheckAndModify:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r4, #0
-	ldr	r6, .L1914
-	ldr	r1, .L1914+4
-	ldr	r0, .L1914+8
+	ldr	r6, .L1839
+	ldr	r1, .L1839+4
+	ldr	r0, .L1839+8
 	bl	printk
-	movw	r3, #3854
+	movw	r3, #3850
 	ldrh	r2, [r6, r3]
 	mov	r1, #0
-	ldr	r5, .L1914+12
+	ldr	r5, .L1839+12
 	mov	r2, r2, asl #1
-	ldr	r0, [r5, #-932]
+	ldr	r0, [r5, #-936]
 	bl	ftl_memset
-	b	.L1908
-.L1910:
+	b	.L1833
+.L1835:
 	mov	r0, r4
 	add	r1, sp, #4
 	mov	r2, #0
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	cmn	r0, #1
-	beq	.L1909
+	beq	.L1834
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, [r5, #-932]
+	ldr	r3, [r5, #-936]
 	mov	r0, r0, asl #1
 	ldrh	r2, [r3, r0]
 	add	r2, r2, #1
 	strh	r2, [r3, r0]	@ movhi
-.L1909:
+.L1834:
 	add	r4, r4, #1
-.L1908:
-	ldr	r3, [r6, #3972]
+.L1833:
+	ldr	r3, [r6, #3968]
 	cmp	r4, r3
-	bcc	.L1910
+	bcc	.L1835
 	mov	r4, #0
-	ldr	r7, .L1914
-	movw	r8, #3852
-	ldr	r5, .L1914+12
-	b	.L1911
-.L1913:
-	ldr	r3, [r5, #-2064]
+	ldr	r7, .L1839
+	movw	r8, #3848
+	ldr	r5, .L1839+12
+	b	.L1836
+.L1838:
+	ldr	r3, [r5, #-2068]
 	mov	r6, r4, asl #1
 	ldrh	r2, [r3, r6]
-	ldr	r3, [r5, #-932]
+	ldr	r3, [r5, #-936]
 	ldrh	r3, [r3, r6]
 	cmp	r2, r3
-	beq	.L1912
+	beq	.L1837
 	movw	r1, #65535
 	cmp	r2, r1
-	beq	.L1912
-	ldr	r0, .L1914+16
+	beq	.L1837
+	ldr	r0, .L1839+16
 	mov	r1, r4
 	bl	printk
-	ldr	r3, .L1914+20
+	ldr	r3, .L1839+20
 	ldrh	r3, [r5, r3]
 	cmp	r3, r4
-	beq	.L1912
-	ldr	r3, .L1914+24
+	beq	.L1837
+	ldr	r3, .L1839+24
 	ldrh	r3, [r5, r3]
 	cmp	r3, r4
-	beq	.L1912
-	ldr	r3, .L1914+28
+	beq	.L1837
+	ldr	r3, .L1839+28
 	ldrh	r3, [r5, r3]
 	cmp	r3, r4
-	beq	.L1912
-	ldr	r3, [r5, #-932]
+	beq	.L1837
+	ldr	r3, [r5, #-936]
 	mov	r0, r4
 	ldrh	r2, [r3, r6]
-	ldr	r3, [r5, #-2064]
+	ldr	r3, [r5, #-2068]
 	strh	r2, [r3, r6]	@ movhi
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1912:
+.L1837:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L1911:
+.L1836:
 	ldrh	r3, [r7, r8]
 	cmp	r3, r4
-	bhi	.L1913
+	bhi	.L1838
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1915:
+.L1840:
 	.align	2
-.L1914:
+.L1839:
 	.word	.LANCHOR0
 	.word	.LANCHOR3+15
-	.word	.LC113
+	.word	.LC117
 	.word	.LANCHOR2
-	.word	.LC114
-	.word	-2044
-	.word	-1948
-	.word	-1996
+	.word	.LC118
+	.word	-2048
+	.word	-1952
+	.word	-2000
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
@@ -16718,106 +15984,104 @@ allocate_new_data_superblock:
 	ldrh	r5, [r0, #0]
 	mov	r4, r0
 	cmp	r5, r3
-	beq	.L1917
-	ldr	r3, .L1927
+	beq	.L1842
+	ldr	r3, .L1852
 	mov	r0, r5
-	ldr	r2, [r3, #-2064]
+	ldr	r2, [r3, #-2068]
 	mov	r3, r5, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1918
+	beq	.L1843
 	bl	INSERT_DATA_LIST
-	b	.L1917
-.L1918:
+	b	.L1842
+.L1843:
 	bl	INSERT_FREE_LIST
-.L1917:
+.L1842:
 	mov	r3, #0
 	strb	r3, [r4, #8]
-	ldr	r3, .L1927+4
-	cmp	r4, r3
-	beq	.L1919
-	ldr	r2, .L1927+8
-	movw	r3, #3864
-	ldrh	r3, [r2, r3]
-	cmp	r3, #1
-	beq	.L1919
-	ldrb	r2, [r2, #80]	@ zero_extendqisi2
-	cmp	r2, #0
-	beq	.L1920
-.L1919:
+	ldr	r3, .L1852
+	sub	r2, r3, #2000
+	cmp	r4, r2
+	beq	.L1844
+	ldr	r1, .L1852+4
+	movw	r2, #3860
+	ldrh	r2, [r1, r2]
+	cmp	r2, #1
+	beq	.L1844
+	ldrb	r1, [r1, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L1845
+.L1844:
 	mov	r3, #1
 	strb	r3, [r4, #8]
-	b	.L1921
-.L1920:
-	ldr	r2, .L1927+12
-	cmp	r4, r2
-	bne	.L1921
-	cmp	r3, #3
-	ldr	r3, .L1927
-	beq	.L1922
-	ldr	r2, [r3, #-1708]
+	b	.L1846
+.L1845:
+	sub	r1, r3, #2048
+	cmp	r4, r1
+	bne	.L1846
+	cmp	r2, #3
+	beq	.L1847
+	ldr	r2, [r3, #-1712]
 	cmp	r2, #1
-	bne	.L1923
-.L1922:
+	bne	.L1848
+.L1847:
 	mov	r2, #1
-	strb	r2, [r3, #-2036]
-.L1923:
-	ldr	r3, [r3, #-1884]
-	ldr	r2, .L1927
+	strb	r2, [r3, #-2040]
+.L1848:
+	ldr	r3, [r3, #-1888]
+	ldr	r2, .L1852
 	cmp	r3, #0
-	beq	.L1921
-	ldr	r3, [r2, #-1824]
+	beq	.L1846
+	ldr	r3, [r2, #-1828]
 	cmp	r3, #29
 	movls	r3, #1
-	strlsb	r3, [r2, #-2036]
-.L1921:
-	ldr	r3, .L1927+16
-	ldr	r6, .L1927
+	strlsb	r3, [r2, #-2040]
+.L1846:
+	ldr	r3, .L1852+8
+	ldr	r6, .L1852
 	ldrh	r0, [r6, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1924
+	beq	.L1849
 	cmp	r5, r0
-	bne	.L1925
-	ldr	r2, [r6, #-2064]
+	bne	.L1850
+	ldr	r2, [r6, #-2068]
 	mov	r3, r0, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1926
-.L1925:
+	beq	.L1851
+.L1850:
 	bl	update_vpc_list
-.L1926:
-	ldr	r3, .L1927+16
+.L1851:
+	ldr	r3, .L1852+8
 	mvn	r2, #0
 	strh	r2, [r6, r3]	@ movhi
-.L1924:
+.L1849:
 	mov	r0, r4
 	bl	allocate_data_superblock
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
 	mov	r0, #0
 	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L1928:
+.L1853:
 	.align	2
-.L1927:
+.L1852:
 	.word	.LANCHOR2
-	.word	.LANCHOR2-1996
 	.word	.LANCHOR0
-	.word	.LANCHOR2-2044
-	.word	-1024
+	.word	-1028
 	.fnend
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
-	.type	rk_ftl_garbage_collect.part.18, %function
-rk_ftl_garbage_collect.part.18:
+	.type	rk_ftl_garbage_collect.part.17, %function
+rk_ftl_garbage_collect.part.17:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2025
+	ldr	r3, .L1952
 	movw	ip, #65535
-	ldr	r2, .L2025+4
+	ldr	r2, .L1952+4
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r7, r0
@@ -16826,75 +16090,99 @@ rk_ftl_garbage_collect.part.18:
 	sub	sp, sp, #36
 	cmp	r0, ip
 	str	r1, [sp, #20]
-	beq	.L1930
-	ldr	r1, .L2025+8
+	beq	.L1855
+	ldr	r1, .L1952+8
 	ldrh	r4, [r3, r1]
 	cmp	r4, ip
 	streqh	r0, [r3, r1]	@ movhi
 	mvneq	r1, #0
 	streqh	r1, [r3, r2]	@ movhi
-.L1930:
-	ldr	r2, [r3, #-1188]
+.L1855:
+	ldr	r2, [r3, #-1192]
 	cmp	r7, #1
-	ldr	r5, .L2025
 	add	r2, r2, #1
 	add	r2, r2, r7, asl #7
-	str	r2, [r3, #-1188]
-	bne	.L2005
-	ldr	r3, [r5, #-1884]
+	str	r2, [r3, #-1192]
+	bne	.L1856
+	ldr	r3, .L1952
+	ldr	r3, [r3, #-1888]
+	cmp	r3, #0
+	bne	.L1857
+	ldr	r3, .L1952+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2005
-	ldr	r3, [r5, #-1824]
+	beq	.L1856
+.L1857:
+	ldr	r4, .L1952
+	ldr	r3, [r4, #-1828]
 	cmp	r3, #29
-	bhi	.L2005
-	mov	r6, #400
-	movw	r4, #65535
-	ldrh	r3, [r5, r6]
+	bhi	.L1856
+	mov	r3, #400
+	ldrh	r3, [r4, r3]
 	add	r2, r2, r3
-	str	r2, [r5, #-1188]
+	str	r2, [r4, #-1192]
 	bl	FtlGcReFreshBadBlk
-	ldr	r3, .L2025+12
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	bne	.L1931
-	ldr	r2, .L2025+8
-	ldrh	r4, [r5, r2]
-	cmp	r4, r3
-	movne	r4, r3
-	bne	.L1931
-	ldr	r3, [r5, #-1188]
+	ldr	r3, .L1952+16
+	movw	r2, #65535
+	ldrh	r3, [r4, r3]
+	cmp	r3, r2
+	bne	.L1856
+	ldr	r2, .L1952+8
+	ldrh	r2, [r4, r2]
+	cmp	r2, r3
+	bne	.L1856
+	ldr	r3, [r4, #-1192]
 	cmp	r3, #1024
-	bls	.L1931
-	mov	r3, #0
-	str	r3, [r5, #-1188]
-	strh	r3, [r5, r6]	@ movhi
-	ldr	r3, [r5, #-1824]
-	cmp	r3, #0
-	moveq	r3, #6
-	beq	.L2020
-	cmp	r3, #5
-	bhi	.L1933
-	mov	r3, #18
-.L2020:
-	strh	r3, [r5, r6]	@ movhi
-.L1933:
+	bhi	.L1858
+	ldr	r3, .L1952+20
+	ldrh	r3, [r4, r3]
+	cmp	r3, #63
+	bhi	.L1856
+.L1858:
+	ldr	r3, .L1952
+	mov	r2, #400
+	mov	r1, #0
+	str	r1, [r3, #-1192]
+	strh	r1, [r3, r2]	@ movhi
+	ldr	r1, [r3, #-1828]
+	cmp	r1, #0
+	moveq	r1, #6
+	beq	.L1948
+	cmp	r1, #5
+	bhi	.L1860
+	mov	r1, #18
+.L1948:
+	strh	r1, [r3, r2]	@ movhi
+.L1860:
+	ldr	r2, .L1952+12
+	ldrb	r2, [r2, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1861
+	ldr	r2, .L1952+20
+	ldr	r1, .L1952+24
+	ldrh	r2, [r3, r2]
+	ldrh	r3, [r3, r1]
+	add	r3, r3, #64
+	cmp	r2, r3
+	bgt	.L1856
+.L1861:
 	mov	r0, #32
 	movw	r8, #65535
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	cmp	r2, r8
-	beq	.L1934
-	ldr	r5, .L2025
-	ldr	r6, .L2025+16
+	beq	.L1862
+	ldr	r5, .L1952
+	ldr	r6, .L1952+28
 	ldrh	r0, [r5, r6]
 	cmp	r0, #0
 	moveq	r3, #1
 	streqh	r3, [r5, r6]	@ movhi
-	beq	.L1934
-	ldr	r3, .L2025+20
-	movw	ip, #3914
-	movw	lr, #3844
-	ldr	r9, [r5, #-2064]
+	beq	.L1862
+	ldr	r3, .L1952+12
+	movw	ip, #3910
+	mov	lr, #3840
+	ldr	r9, [r5, #-2068]
 	mov	r2, r2, asl #1
 	ldrh	ip, [r3, ip]
 	ldrh	r3, [r3, lr]
@@ -16902,10 +16190,10 @@ rk_ftl_garbage_collect.part.18:
 	mul	r3, r3, ip
 	add	r3, r3, #1
 	cmp	r1, r3
-	bgt	.L1934
+	bgt	.L1862
 	add	fp, r0, #1
 	mov	sl, #0
-	str	sl, [r5, #-1180]
+	str	sl, [r5, #-1184]
 	uxth	fp, fp
 	strh	fp, [r5, r6]	@ movhi
 	str	r2, [sp, #12]
@@ -16913,10 +16201,10 @@ rk_ftl_garbage_collect.part.18:
 	ldr	r2, [sp, #12]
 	uxth	r4, r0
 	cmp	r4, r8
-	beq	.L1934
+	beq	.L1862
 	ldrh	r2, [r9, r2]
 	mov	r8, r4, asl #1
-	ldr	r0, .L2025+24
+	ldr	r0, .L1952+32
 	mov	r1, fp
 	ldrh	r3, [r9, r8]
 	str	r2, [sp, #0]
@@ -16924,97 +16212,99 @@ rk_ftl_garbage_collect.part.18:
 	bl	printk
 	ldrh	r3, [r5, r6]
 	cmp	r3, #40
-	bls	.L1936
-	ldr	r3, [r5, #-2064]
+	bls	.L1864
+	ldr	r3, [r5, #-2068]
 	ldrh	r3, [r3, r8]
 	cmp	r3, #32
 	strhih	sl, [r5, r6]	@ movhi
-.L1936:
+.L1864:
+	ldr	r2, .L1952
+	mov	r3, #400
 	mov	r1, #6
-	b	.L2021
-.L1934:
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1866
+.L1862:
 	bl	GetSwlReplaceBlock
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r4, r0
-	bne	.L1931
-	mov	r1, #0
-.L2021:
-	ldr	r2, .L2025
+	bne	.L1866
+	ldr	r2, .L1952
 	mov	r3, #400
+	mov	r1, #0
 	strh	r1, [r2, r3]	@ movhi
-	b	.L1931
-.L2005:
+.L1856:
+	ldr	r6, .L1952
 	movw	r4, #65535
-.L1931:
-	ldr	r3, .L2025+12
-	ldr	r6, .L2025
+	ldr	r3, .L1952+16
 	ldrh	r2, [r6, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L1937
-	ldr	r3, .L2025+28
+	cmp	r2, r4
+	bne	.L1866
+	ldr	r3, .L1952+36
 	ldrh	r3, [r6, r3]
 	cmp	r3, r2
-	bne	.L1937
-	ldr	r2, .L2025+8
-	ldrh	sl, [r6, r2]
-	cmp	sl, r3
-	bne	.L1937
-	ldr	r8, .L2025+32
-	ldr	r2, [r6, #-1188]
-	ldrh	r3, [r6, r8]
+	movne	r4, r2
+	bne	.L1866
+	ldr	r2, .L1952+8
+	ldrh	r8, [r6, r2]
+	cmp	r8, r3
+	movne	r4, r3
+	bne	.L1866
+	ldr	sl, .L1952+20
+	ldr	r2, [r6, #-1192]
+	ldrh	r3, [r6, sl]
 	cmp	r3, #23
 	movhi	r3, #1024
 	movls	r3, #5120
 	cmp	r2, r3
-	bls	.L1937
+	movls	r4, r8
+	bls	.L1866
 	mov	r2, #400
 	mov	r3, #0
-	str	r3, [r6, #-1188]
+	str	r3, [r6, #-1192]
 	strh	r3, [r6, r2]	@ movhi
 	bl	GetSwlReplaceBlock
-	cmp	r0, sl
+	cmp	r0, r8
 	mov	r4, r0
-	bne	.L1939
-	ldr	r3, .L2025+36
-	ldrh	r1, [r6, r8]
+	bne	.L1868
+	ldr	r3, .L1952+24
+	ldrh	r1, [r6, sl]
 	ldrh	r2, [r6, r3]
 	cmp	r1, r2
 	movcs	r2, #80
 	strcsh	r2, [r6, r3]	@ movhi
-	bcs	.L1949
+	bcs	.L1878
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r4
-	beq	.L1949
-	ldr	r2, [r6, #-1004]
+	beq	.L1878
+	ldr	r2, [r6, #-1008]
 	cmp	r2, #0
-	bne	.L1942
-	ldr	r2, .L2025+20
-	movw	r1, #3864
+	bne	.L1871
+	ldr	r2, .L1952+12
+	movw	r1, #3860
 	ldrh	r1, [r2, r1]
 	cmp	r1, #3
-	beq	.L1942
-	ldr	r1, [r6, #-1708]
+	beq	.L1871
+	ldr	r1, [r6, #-1712]
 	cmp	r1, #0
-	bne	.L1942
-	ldr	r1, [r6, #-1884]
+	bne	.L1871
+	ldr	r1, [r6, #-1888]
 	cmp	r1, #0
-	bne	.L1942
-	ldrb	r0, [r2, #80]	@ zero_extendqisi2
+	bne	.L1871
+	ldrb	r0, [r2, #928]	@ zero_extendqisi2
 	cmp	r0, #0
-	beq	.L1943
-.L1942:
-	ldr	r1, .L2025
+	beq	.L1872
+.L1871:
+	ldr	r1, .L1952
 	mov	r3, r3, asl #1
-	movw	ip, #3844
-	movw	lr, #3864
-	ldr	r2, [r1, #-2064]
+	mov	ip, #3840
+	movw	lr, #3860
+	ldr	r2, [r1, #-2068]
 	ldrh	r0, [r2, r3]
-	movw	r2, #3914
-	ldr	r3, .L2025+20
+	movw	r2, #3910
+	ldr	r3, .L1952+12
 	ldrh	r2, [r3, r2]
 	ldrh	ip, [r3, ip]
 	ldrh	r3, [r3, lr]
@@ -17024,141 +16314,141 @@ rk_ftl_garbage_collect.part.18:
 	movne	r3, #0
 	add	r3, ip, r3
 	cmp	r0, r3
-	bgt	.L1945
+	bgt	.L1874
 	mov	r0, #0
 	bl	List_get_gc_head_node
-	ldr	r2, .L2025+20
-	ldr	r3, .L2025
-	ldr	r2, [r2, #3972]
-	ldr	r1, [r3, #-1892]
+	ldr	r2, .L1952+12
+	ldr	r3, .L1952
+	ldr	r2, [r2, #3968]
+	ldr	r1, [r3, #-1896]
 	add	r2, r2, r2, asl #1
 	cmp	r1, r2, lsr #2
-	ldr	r2, .L2025+36
+	ldr	r2, .L1952+24
 	movhi	r1, #128
 	movls	r1, #160
 	strh	r1, [r3, r2]	@ movhi
 	uxth	r4, r0
-	b	.L1947
-.L1945:
-	ldr	r3, .L2025+36
+	b	.L1876
+.L1874:
+	ldr	r3, .L1952+24
 	mov	r2, #128
 	strh	r2, [r1, r3]	@ movhi
-	b	.L1949
-.L1943:
-	ldr	r2, [r6, #-2064]
+	b	.L1878
+.L1872:
+	ldr	r2, [r6, #-2068]
 	mov	r3, r3, asl #1
-	ldr	r6, .L2025
-	ldr	r5, .L2025+36
+	ldr	r6, .L1952
+	ldr	r5, .L1952+24
 	ldrh	r3, [r2, r3]
 	cmp	r3, #7
 	movhi	r3, #64
 	strhih	r3, [r6, r5]	@ movhi
-	bhi	.L1949
+	bhi	.L1878
 	bl	List_get_gc_head_node
 	mov	r3, #128
 	strh	r3, [r6, r5]	@ movhi
 	uxth	r4, r0
-.L1947:
+.L1876:
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L1949
-.L1939:
-	ldr	r1, .L2025
+	beq	.L1878
+.L1868:
+	ldr	r1, .L1952
 	mov	r0, r4, asl #1
-	ldr	r3, .L2025+32
-	ldr	ip, [r1, #-2084]
+	ldr	r3, .L1952+20
+	ldr	ip, [r1, #-2088]
 	ldrh	r2, [r1, r3]
-	ldr	r3, [r1, #-2064]
+	ldr	r3, [r1, #-2068]
 	ldrh	r3, [r3, r0]
 	ldrh	r0, [ip, r0]
 	str	r0, [sp, #0]
-	ldr	r0, .L2025+40
+	ldr	r0, .L1952+40
 	ldrh	r1, [r1, r0]
-	ldr	r0, .L2025+44
+	ldr	r0, .L1952+44
 	str	r1, [sp, #4]
 	mov	r1, r4
 	bl	printk
-.L1949:
+.L1878:
 	bl	FtlGcReFreshBadBlk
-.L1937:
+.L1866:
 	movw	r1, #65535
-	rsb	ip, r1, r4
-	rsbs	r2, ip, #0
-	ldr	r5, .L2025
-	adc	r2, r2, ip
+	rsb	r0, r1, r4
+	rsbs	r2, r0, #0
+	ldr	r5, .L1952
+	adc	r2, r2, r0
 	cmp	r7, #0
 	movne	r7, #0
 	andeq	r7, r2, #1
 	cmp	r7, #0
-	beq	.L1950
-	ldr	r3, .L2025+32
+	beq	.L1879
+	ldr	r3, .L1952+20
 	ldrh	r2, [r5, r3]
 	cmp	r2, #24
 	movhi	r6, #1
-	bhi	.L1951
-	ldr	r1, .L2025+20
-	movw	r3, #3912
+	bhi	.L1880
+	ldr	r1, .L1952+12
+	movw	r3, #3908
 	cmp	r2, #16
 	ldrh	r6, [r1, r3]
 	movhi	r6, r6, lsr #5
-	bhi	.L1951
+	bhi	.L1880
 	cmp	r2, #12
 	movhi	r6, r6, lsr #4
-	bhi	.L1951
+	bhi	.L1880
 	cmp	r2, #8
 	movhi	r6, r6, lsr #2
-.L1951:
-	ldr	r1, .L2025+40
-	ldr	r3, .L2025
+.L1880:
+	ldr	r1, .L1952+40
+	ldr	r3, .L1952
 	ldrh	r0, [r5, r1]
 	cmp	r0, r2
 	mov	r0, r1
-	bcs	.L1955
-	ldr	r2, .L2025+28
+	bcs	.L1884
+	ldr	r2, .L1952+36
 	movw	ip, #65535
 	ldrh	r2, [r3, r2]
 	cmp	r2, ip
-	bne	.L1956
-	ldr	ip, .L2025+8
+	bne	.L1885
+	ldr	ip, .L1952+8
 	ldrh	ip, [r3, ip]
 	cmp	ip, r2
-	bne	.L1956
+	bne	.L1885
 	mov	r2, #400
 	ldrh	r0, [r3, r2]
 	cmp	r0, #0
-	bne	.L1957
-	ldr	r2, .L2025+20
-	ldr	ip, [r3, #-1892]
-	ldr	r2, [r2, #3972]
+	bne	.L1886
+	ldr	r2, .L1952+12
+	ldr	ip, [r3, #-1896]
+	ldr	r2, [r2, #3968]
 	add	r2, r2, r2, asl #1
 	cmp	ip, r2, lsr #2
 	movcs	r2, #18
-	bcs	.L2023
-.L1957:
-	ldr	r3, .L2025
-	ldr	r2, .L2025+48
-	ldr	r1, .L2025+40
+	bcs	.L1950
+.L1886:
+	ldr	r3, .L1952
+	ldr	r2, .L1952+48
+	ldr	r1, .L1952+40
 	ldrh	r2, [r3, r2]
 	add	r2, r2, r2, asl #1
 	mov	r2, r2, asr #2
-.L2023:
+.L1950:
 	strh	r2, [r3, r1]	@ movhi
 	mov	r2, #0
-	ldr	r3, .L2025
-	str	r2, [r3, #-1180]
-	b	.L1960
-.L1956:
-	ldr	r3, .L2025
-	ldr	r2, .L2025+48
+	ldr	r3, .L1952
+	str	r2, [r3, #-1184]
+	b	.L1889
+.L1885:
+	ldr	r3, .L1952
+	ldr	r2, .L1952+48
 	ldrh	r2, [r3, r2]
 	add	r2, r2, r2, asl #1
 	mov	r2, r2, asr #2
 	strh	r2, [r3, r0]	@ movhi
-.L1955:
-	ldr	r3, .L2025
+.L1884:
+	ldr	r3, .L1952
 	movw	r4, #65535
 	ldr	r8, [sp, #20]
-	ldr	r2, [r3, #-1884]
+	ldr	r2, [r3, #-1888]
 	cmp	r8, #2
 	movhi	r3, #0
 	movls	r3, #1
@@ -17167,248 +16457,262 @@ rk_ftl_garbage_collect.part.18:
 	cmp	r3, #0
 	addne	r6, r6, #1
 	uxthne	r6, r6
-	b	.L1961
-.L1950:
-	ldr	r3, .L2025+28
+	b	.L1890
+.L1879:
+	ldr	r3, .L1952+36
 	ldrh	r3, [r5, r3]
 	cmp	r3, r1
-	bne	.L1962
-	ldr	r1, .L2025+8
+	bne	.L1891
+	ldr	r1, .L1952+8
 	ldrh	r1, [r5, r1]
 	cmp	r1, r3
 	movne	r2, #0
 	andeq	r2, r2, #1
 	cmp	r2, #0
-	beq	.L1962
-	ldr	r2, .L2025+12
+	beq	.L1891
+	ldr	r2, .L1952+16
 	ldrh	r4, [r5, r2]
 	cmp	r4, r3
 	movne	r4, r3
-	bne	.L1962
-	ldr	r3, .L2025+32
+	bne	.L1891
+	ldr	r3, .L1952+20
 	mov	r6, #400
-	str	r7, [r5, #-1180]
+	str	r7, [r5, #-1184]
 	ldrh	r7, [r5, r3]
 	add	r3, r3, #856
 	ldrh	r2, [r5, r3]
 	cmp	r2, r7
-	bcs	.L1963
+	bcs	.L1892
 	ldrh	r2, [r5, r6]
 	cmp	r2, #0
-	bne	.L1964
-	ldr	r2, .L2025+20
-	ldr	r1, [r5, #-1892]
-	ldr	r2, [r2, #3972]
+	bne	.L1893
+	ldr	r2, .L1952+12
+	ldr	r1, [r5, #-1896]
+	ldr	r2, [r2, #3968]
 	add	r2, r2, r2, asl #1
 	cmp	r1, r2, lsr #2
 	movcs	r2, #18
 	strcsh	r2, [r5, r3]	@ movhi
-	bcs	.L1966
-.L1964:
-	ldr	r3, .L2025
-	ldr	r2, .L2025+48
-	ldr	r1, .L2025+40
+	bcs	.L1895
+.L1893:
+	ldr	r3, .L1952
+	ldr	r2, .L1952+48
+	ldr	r1, .L1952+40
 	ldrh	r2, [r3, r2]
 	add	r2, r2, r2, asl #1
 	mov	r2, r2, asr #2
 	strh	r2, [r3, r1]	@ movhi
-.L1966:
+.L1895:
 	bl	FtlReadRefresh
 	mov	r3, #400
-	ldr	r2, .L2025
-	b	.L2024
-.L1963:
+	ldr	r2, .L1952
+	b	.L1951
+.L1892:
 	ldrh	r0, [r5, r6]
 	cmp	r0, #0
-	bne	.L1962
-	ldr	r2, .L2025+48
+	bne	.L1891
+	ldr	r2, .L1952+48
 	ldrh	r4, [r5, r2]
 	add	r2, r4, r4, asl #1
 	mov	r2, r2, asr #2
 	strh	r2, [r5, r3]	@ movhi
 	bl	List_get_gc_head_node
-	ldr	r3, [r5, #-2064]
-	ldr	r1, .L2025+20
-	movw	r2, #3914
+	ldr	r3, [r5, #-2068]
+	ldr	r1, .L1952+12
+	movw	r2, #3910
 	ldrh	r2, [r1, r2]
 	uxth	r0, r0
 	mov	r0, r0, asl #1
 	ldrh	r3, [r3, r0]
-	movw	r0, #3844
+	mov	r0, #3840
 	ldrh	r1, [r1, r0]
 	mul	r2, r1, r2
 	add	r2, r2, r2, lsr #31
 	cmp	r3, r2, asr #1
-	ble	.L1967
+	ble	.L1896
 	sub	r4, r4, #1
 	cmp	r7, r4
-	blt	.L1967
+	blt	.L1896
 	bl	FtlReadRefresh
 	ldrh	r0, [r5, r6]
-	b	.L1960
-.L1967:
+	b	.L1889
+.L1896:
 	cmp	r3, #0
 	movwne	r4, #65535
-	bne	.L1962
+	bne	.L1891
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L2025+32
-	ldr	r2, .L2025
+	ldr	r3, .L1952+20
+	ldr	r2, .L1952
 	ldrh	r0, [r2, r3]
 	add	r0, r0, #1
-	b	.L1960
-.L1962:
-	ldr	r3, .L2025
-	ldr	r6, [r3, #-1884]
+	b	.L1889
+.L1891:
+	ldr	r3, .L1952
+	ldr	r6, [r3, #-1888]
 	cmp	r6, #0
 	movne	r6, #2
 	moveq	r6, #1
-.L1961:
-	ldr	r3, .L2025
+.L1890:
+	ldr	r3, .L1952
 	movw	r0, #65535
-	ldr	r2, .L2025+12
+	ldr	r2, .L1952+16
 	ldrh	r1, [r3, r2]
 	cmp	r1, r0
-	bne	.L1968
+	bne	.L1897
 	cmp	r4, r1
 	strneh	r4, [r3, r2]	@ movhi
-	bne	.L1970
-	ldr	r1, .L2025+8
-	ldrh	r0, [r3, r1]
-	cmp	r0, r4
-	strneh	r0, [r3, r2]	@ movhi
-	mvnne	r2, #0
-	strneh	r2, [r3, r1]	@ movhi
-.L1970:
-	mov	r2, #0
-	strb	r2, [r3, #-1748]
-	ldr	r3, .L2025+20
-	ldr	r5, .L2025
-	ldr	r7, .L2025+12
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
-	cmp	r3, r2
-	beq	.L1971
-	ldrh	r0, [r5, r7]
-	bl	ftl_get_blk_mode
-	strb	r0, [r5, #-1748]
-.L1971:
-	ldr	r5, .L2025
+	bne	.L1899
+	ldr	r2, .L1952+8
+	ldrh	r1, [r3, r2]
+	cmp	r1, r4
+	beq	.L1899
+	ldr	r0, [r3, #-2068]
+	mov	r1, r1, asl #1
+	ldrh	r1, [r0, r1]
+	cmp	r1, #0
+	mvneq	r1, #0
+	streqh	r1, [r3, r2]	@ movhi
+	ldr	r3, .L1952
+	ldr	r1, .L1952+16
+	ldrh	r0, [r3, r2]
+	strh	r0, [r3, r1]	@ movhi
+	mvn	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+.L1899:
+	ldr	r5, .L1952
+	mov	r3, #0
+	ldr	r7, .L1952+16
+	strb	r3, [r5, #-1752]
+	movw	r3, #65535
 	ldrh	r0, [r5, r7]
+	cmp	r0, r3
+	beq	.L1897
 	bl	IsBlkInGcList
-	ldr	r7, .L2025+12
-	mov	r3, r5
 	cmp	r0, #0
-	ldrne	r2, .L2025+12
-	mvnne	r1, #0
-	strneh	r1, [r5, r2]	@ movhi
-	ldrh	r2, [r3, r7]
+	mvnne	r3, #0
+	strneh	r3, [r5, r7]	@ movhi
+	ldr	r3, .L1952+12
+	ldr	r7, .L1952
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1902
+	ldr	r3, .L1952+16
+	ldrh	r0, [r7, r3]
+	bl	ftl_get_blk_mode
+	strb	r0, [r7, #-1752]
+.L1902:
+	ldr	r8, .L1952+16
 	movw	r3, #65535
-	ldr	r5, .L2025
+	ldr	r5, .L1952
+	ldrh	r2, [r7, r8]
 	cmp	r2, r3
-	beq	.L1968
-	ldr	r0, .L2025+52
+	beq	.L1897
+	add	r0, r5, r8
 	bl	make_superblock
-	ldr	r1, .L2025+56
+	ldr	r1, .L1952+52
 	movw	r2, #402
 	mov	r3, #0
 	strh	r3, [r5, r2]	@ movhi
 	strh	r3, [r5, r1]	@ movhi
-	strb	r3, [r5, #-1750]
-	ldrh	r3, [r5, r7]
-	ldr	r2, [r5, #-2064]
+	strb	r3, [r5, #-1754]
+	ldrh	r3, [r5, r8]
+	ldr	r2, [r5, #-2068]
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
 	mov	r3, #404
 	strh	r2, [r5, r3]	@ movhi
-.L1968:
-	ldr	r3, .L2025
-	ldr	r0, .L2025+12
-	ldr	r2, .L2025+60
-	ldrh	r1, [r3, r0]
+.L1897:
+	ldr	r3, .L1952
+	ldr	r2, .L1952+16
+	ldrh	r1, [r3, r2]
+	sub	r2, r2, #288
 	ldrh	r2, [r3, r2]
 	cmp	r2, r1
 	mov	r2, r3
-	beq	.L1973
-	ldr	ip, .L2025+64
-	ldrh	r3, [r3, ip]
+	beq	.L1903
+	ldr	r0, .L1952+56
+	ldrh	r3, [r3, r0]
 	cmp	r3, r1
-	strne	r4, [sp, #20]
-	bne	.L2019
-.L1974:
-.L1973:
-	mvn	r3, #0
-	strh	r3, [r2, r0]	@ movhi
+	movne	fp, r4
+	bne	.L1947
+.L1904:
+.L1903:
+	ldr	r3, .L1952+16
+	mvn	r1, #0
+	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #400
-.L2024:
+.L1951:
 	ldrh	r0, [r2, r3]
-	b	.L1960
-.L2019:
-	ldr	r4, .L2025
-	movw	r0, #65535
-	ldr	r9, .L2025+12
-	ldrh	r3, [r4, r9]
-	cmp	r3, r0
-	bne	.L1976
-	mov	r3, #0
-	str	r3, [r4, #-1180]
-.L2018:
-	ldr	r8, .L2025+16
-	ldrh	r7, [r4, r8]
-	mov	r0, r7
-	bl	List_get_gc_head_node
+	b	.L1889
+.L1947:
+	ldr	r4, .L1952
 	movw	r1, #65535
-	uxth	r5, r0
-	strh	r5, [r4, r9]	@ movhi
-	cmp	r5, r1
-	ldreq	r3, .L2025
-	moveq	r2, #0
-	moveq	r0, #8
-	streqh	r2, [r3, r8]	@ movhi
-	beq	.L1960
-.L1978:
-	mov	r0, r5
-	add	r7, r7, #1
+	ldr	r3, .L1952+16
+	ldrh	r3, [r4, r3]
+	cmp	r3, r1
+	bne	.L1906
+	ldr	r5, .L1952+28
+	mov	r3, #0
+	str	r3, [r4, #-1184]
+.L1946:
+	ldrh	r8, [r4, r5]
+	mov	r0, r8
+	bl	List_get_gc_head_node
+	ldr	r3, .L1952+16
+	movw	r2, #65535
+	uxth	r7, r0
+	strh	r7, [r4, r3]	@ movhi
+	cmp	r7, r2
+	bne	.L1908
+	ldr	r2, .L1952
+	add	r3, r3, #572
+	mov	r1, #0
+	mov	r0, #8
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1889
+.L1908:
+	mov	r0, r7
+	add	r8, r8, #1
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	strneh	r7, [r4, r8]	@ movhi
-	bne	.L2018
-	ldr	ip, .L2025+20
-	uxth	r7, r7
-	movw	r3, #3912
-	strh	r7, [r4, r8]	@ movhi
-	movw	r8, #3844
-	ldr	r1, [r4, #-2064]
+	strneh	r8, [r4, r5]	@ movhi
+	bne	.L1946
+	ldr	ip, .L1952+12
+	movw	r3, #3908
+	mov	sl, #3840
+	ldr	r1, [r4, #-2068]
+	mov	r2, r7, asl #1
+	uxth	r8, r8
 	ldrh	r3, [ip, r3]
-	mov	r2, r5, asl #1
-	ldrh	ip, [ip, r8]
+	ldrh	ip, [ip, sl]
+	strh	r8, [r4, r5]	@ movhi
 	ldrh	r0, [r1, r2]
 	mul	r3, ip, r3
 	add	ip, r3, r3, lsr #31
 	cmp	r0, ip, asr #1
-	bgt	.L1981
-	cmp	r7, #48
-	bls	.L1982
+	bgt	.L1911
+	cmp	r8, #48
+	bls	.L1912
 	cmp	r0, #8
-	bls	.L1982
-	ldr	r0, .L2025+68
+	bls	.L1912
+	ldr	r0, .L1952+60
 	ldrh	r0, [r4, r0]
 	cmp	r0, #35
-	bhi	.L1982
-.L1981:
-	ldr	r0, .L2025+16
-	mov	ip, #0
-	strh	ip, [r4, r0]	@ movhi
-.L1982:
+	bhi	.L1912
+.L1911:
+	mov	r0, #0
+	strh	r0, [r4, r5]	@ movhi
+.L1912:
 	ldrh	r2, [r1, r2]
-	movw	r0, #65535
-	ldr	r8, [sp, #20]
-	ldr	sl, .L2025
+	movw	r8, #65535
+	ldr	sl, .L1952
 	cmp	r2, r3
-	cmpge	r8, r0
+	cmpge	fp, r8
 	movne	r3, #0
 	moveq	r3, #1
-	bne	.L1983
-	ldr	r3, .L2025+12
+	bne	.L1913
+	ldr	r3, .L1952+16
 	mvn	r2, #0
 	strh	r2, [sl, r3]	@ movhi
 	add	r3, r3, #572
@@ -17416,70 +16720,70 @@ rk_ftl_garbage_collect.part.18:
 	strh	r2, [sl, r3]	@ movhi
 	mov	r3, #400
 	ldrh	r0, [sl, r3]
-	b	.L1960
-.L1983:
+	b	.L1889
+.L1913:
 	cmp	r2, #0
-	bne	.L1984
+	bne	.L1914
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L2025+16
-	ldrh	r2, [r4, r3]
-	add	r2, r2, #1
-	strh	r2, [r4, r3]	@ movhi
-	b	.L2018
-.L1984:
-	strb	r3, [sl, #-1748]
-	ldr	r3, .L2025+20
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	ldrh	r3, [r4, r5]
+	add	r3, r3, #1
+	strh	r3, [r4, r5]	@ movhi
+	b	.L1946
+.L1914:
+	strb	r3, [sl, #-1752]
+	ldr	r3, .L1952+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1985
-	mov	r0, r5
+	beq	.L1915
+	mov	r0, r7
 	bl	ftl_get_blk_mode
-	strb	r0, [sl, #-1748]
-.L1985:
-	ldr	r4, .L2025
-	ldr	r0, .L2025+52
+	strb	r0, [sl, #-1752]
+.L1915:
+	ldr	r4, .L1952
+	sub	r0, r4, #1760
 	bl	make_superblock
 	movw	r1, #402
 	mov	r3, #0
 	strh	r3, [r4, r1]	@ movhi
-	ldr	r1, .L2025+12
-	ldr	r0, [r4, #-2064]
+	ldr	r1, .L1952+16
+	ldr	r0, [r4, #-2068]
 	ldrh	r1, [r4, r1]
 	mov	r1, r1, asl #1
 	ldrh	r0, [r0, r1]
 	mov	r1, #404
-	strb	r3, [r4, #-1750]
+	strb	r3, [r4, #-1754]
 	strh	r0, [r4, r1]	@ movhi
-	ldr	r1, .L2025+56
+	ldr	r1, .L1952+52
 	strh	r3, [r4, r1]	@ movhi
-.L1976:
+.L1906:
 	bl	FtlReadRefresh
-	ldr	r3, .L2025
+	ldr	r3, .L1952
 	mov	r2, #1
-	movw	r1, #3912
-	str	r2, [r3, #-1000]
-	ldr	r2, .L2025+20
+	movw	r1, #3908
+	str	r2, [r3, #-1004]
+	ldr	r2, .L1952+12
 	ldrh	r9, [r2, r1]
-	ldrb	r1, [r2, #80]	@ zero_extendqisi2
+	ldrb	r1, [r2, #928]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L1986
-	ldrb	r1, [r3, #-1748]	@ zero_extendqisi2
+	beq	.L1916
+	ldrb	r1, [r3, #-1752]	@ zero_extendqisi2
 	cmp	r1, #1
-	movweq	r1, #3914
+	movweq	r1, #3910
 	ldreqh	r9, [r2, r1]
-.L1986:
-	ldr	r2, .L2025+56
+.L1916:
+	ldr	r2, .L1952+52
 	mov	sl, #0
-	ldr	r4, .L2025
+	str	fp, [sp, #20]
 	mov	fp, r9
+	ldr	r4, .L1952
 	ldrh	r3, [r3, r2]
 	add	r2, r3, r6
 	cmp	r2, r9
 	rsbgt	r6, r3, r9
 	uxthgt	r6, r6
-	b	.L1988
-.L1990:
+	b	.L1918
+.L1920:
 	ldrh	r1, [r2, #2]!
 	movw	r8, #65535
 	add	r3, r3, #1
@@ -17490,46 +16794,46 @@ rk_ftl_garbage_collect.part.18:
 	addne	r7, r7, #1
 	uxthne	r7, r7
 	strne	r1, [r8, #4]
-.L1996:
+.L1926:
 	cmp	r3, r5
-	bne	.L1990
-	ldr	r0, [r4, #-1160]
+	bne	.L1920
+	ldr	r0, [r4, #-1164]
 	mov	r1, r7
-	ldrb	r2, [r4, #-1748]	@ zero_extendqisi2
+	ldrb	r2, [r4, #-1752]	@ zero_extendqisi2
 	mov	r5, #0
 	bl	FlashReadPages
 	mov	r9, r5
 	mov	r8, r6
-	b	.L1991
-.L1994:
-	ldr	r3, [r4, #-1160]
+	b	.L1921
+.L1924:
+	ldr	r3, [r4, #-1164]
 	add	r2, r3, r5
 	ldr	r3, [r3, r5]
 	ldr	r6, [r2, #12]
 	cmn	r3, #1
-	beq	.L1992
+	beq	.L1922
 	ldrh	r3, [r6, #0]
-	movw	r0, #61589
-	cmp	r3, r0
-	bne	.L1992
+	movw	r1, #61589
+	cmp	r3, r1
+	bne	.L1922
 	add	r1, sp, #28
 	mov	r2, #0
 	ldr	r0, [r6, #8]
 	bl	log2phys
-	ldr	r1, [r4, #-1160]
+	ldr	r1, [r4, #-1164]
 	ldr	r2, [sp, #28]
 	add	r1, r1, r5
 	bic	r2, r2, #-2147483648
 	ldr	r3, [r1, #4]
 	cmp	r2, r3
-	bne	.L1992
+	bne	.L1922
 	movw	r3, #402
-	ldr	r0, [r4, #-1176]
+	ldr	r0, [r4, #-1180]
 	ldrh	r2, [r4, r3]
 	ldr	r1, [r1, #16]
 	add	r2, r2, #1
 	strh	r2, [r4, r3]	@ movhi
-	ldr	r2, [r4, #-980]
+	ldr	r2, [r4, #-984]
 	mov	r3, #36
 	mla	r2, r3, r0, r2
 	str	r1, [r2, #16]
@@ -17537,12 +16841,12 @@ rk_ftl_garbage_collect.part.18:
 	str	r3, [sp, #16]
 	bl	Ftl_get_new_temp_ppa
 	ldr	r2, [sp, #12]
-	ldr	r1, [r4, #-1176]
+	ldr	r1, [r4, #-1180]
 	str	r0, [r2, #4]
 	ldr	r3, [sp, #16]
-	ldr	r2, [r4, #-980]
+	ldr	r2, [r4, #-984]
 	mla	r3, r3, r1, r2
-	ldr	r2, [r4, #-1160]
+	ldr	r2, [r4, #-1164]
 	add	r2, r2, r5
 	ldr	r1, [r2, #8]
 	str	r1, [r3, #8]
@@ -17551,157 +16855,156 @@ rk_ftl_garbage_collect.part.18:
 	str	r2, [r3, #12]
 	ldr	r3, [sp, #28]
 	str	r3, [r6, #12]
-	ldr	r3, .L2025+28
+	ldr	r3, .L1952+36
 	ldrh	r3, [r4, r3]
 	strh	r3, [r6, #2]	@ movhi
-	ldr	r3, [r4, #-1844]
-	ldr	r0, [r4, #-1160]
+	ldr	r3, [r4, #-1848]
+	ldr	r0, [r4, #-1164]
 	str	r3, [r6, #4]
 	add	r0, r0, r5
-	ldr	r3, [r4, #-1176]
+	ldr	r3, [r4, #-1180]
 	add	r3, r3, #1
-	str	r3, [r4, #-1176]
+	str	r3, [r4, #-1180]
 	bl	FtlGcBufAlloc
-	ldr	r3, .L2025+20
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	ldr	r3, .L1952+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1993
-	ldrb	r3, [r4, #-1941]	@ zero_extendqisi2
-	ldr	r2, [r4, #-1176]
+	bne	.L1923
+	ldrb	r3, [r4, #-1945]	@ zero_extendqisi2
+	ldr	r2, [r4, #-1180]
 	cmp	r2, r3
-	beq	.L1993
-	ldr	r3, .L2025+72
+	beq	.L1923
+	ldr	r3, .L1952+64
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L1992
-.L1993:
+	bne	.L1922
+.L1923:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	ldrne	r3, .L2025
+	ldrne	r3, .L1952
 	movne	r2, #0
-	strne	r2, [r3, #-1000]
+	strne	r2, [r3, #-1004]
 	movne	r2, #400
-	bne	.L2024
-.L1992:
+	bne	.L1951
+.L1922:
 	add	r9, r9, #1
 	add	r5, r5, #36
 	uxth	r9, r9
-.L1991:
+.L1921:
 	cmp	r9, r7
-	bne	.L1994
+	bne	.L1924
 	add	sl, sl, #1
 	mov	r6, r8
-.L1988:
+.L1918:
 	uxth	r3, sl
-	ldr	r2, .L2025+56
+	ldr	r2, .L1952+52
 	cmp	r3, r6
-	ldr	r3, .L2025
-	bcs	.L1995
-	ldr	r1, .L2025+20
-	movw	r3, #3844
+	ldr	r3, .L1952
+	bcs	.L1925
+	ldr	r1, .L1952+12
+	mov	r3, #3840
 	ldrh	ip, [r4, r2]
 	mov	r7, #0
-	ldr	lr, [r4, #-1160]
+	ldr	lr, [r4, #-1164]
 	mov	r0, #36
 	ldrh	r5, [r1, r3]
 	add	ip, ip, sl
-	ldr	r2, .L2025+76
+	ldr	r2, .L1952+68
 	mov	r3, r7
-	b	.L1996
-.L1995:
+	b	.L1926
+.L1925:
 	ldrh	r1, [r3, r2]
 	mov	r9, fp
+	ldr	fp, [sp, #20]
 	add	r6, r6, r1
 	uxth	r6, r6
 	strh	r6, [r3, r2]	@ movhi
-	cmp	r6, fp
-	bcs	.L1997
+	cmp	r6, r9
+	bcs	.L1927
 	movw	r2, #402
 	mov	r1, #404
 	ldrh	r2, [r3, r2]
 	ldrh	r3, [r3, r1]
 	cmp	r2, r3
-	bne	.L1998
-.L1997:
-	ldr	r5, .L2025
-	ldr	r3, [r5, #-1176]
+	bne	.L1928
+.L1927:
+	ldr	r5, .L1952
+	ldr	r3, [r5, #-1180]
 	cmp	r3, #0
-	beq	.L1999
+	beq	.L1929
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	movne	r3, #0
-	strne	r3, [r5, #-1000]
+	strne	r3, [r5, #-1004]
 	movne	r3, #400
 	ldrneh	r0, [r5, r3]
-	bne	.L1960
-.L1999:
+	bne	.L1889
+.L1929:
 	movw	r2, #402
-	ldr	r3, .L2025
+	ldr	r3, .L1952
 	ldrh	ip, [r5, r2]
 	cmp	ip, #0
-	bne	.L2000
-	ldr	r2, .L2025+12
-	ldr	r0, [r3, #-2064]
+	bne	.L1930
+	ldr	r2, .L1952+16
+	ldr	r0, [r3, #-2068]
 	ldrh	r1, [r3, r2]
 	mov	r1, r1, asl #1
 	ldrh	r4, [r0, r1]
 	cmp	r4, #0
-	beq	.L2000
+	beq	.L1930
 	strh	ip, [r0, r1]	@ movhi
 	ldrh	r0, [r3, r2]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2000:
-	ldr	r3, .L2025+12
+.L1930:
+	ldr	r3, .L1952+16
 	mvn	r1, #0
-	ldr	r2, .L2025
+	ldr	r2, .L1952
 	strh	r1, [r2, r3]	@ movhi
-.L1998:
-	ldr	r3, .L2025
-	ldr	r2, .L2025+32
+.L1928:
+	ldr	r3, .L1952
+	ldr	r2, .L1952+20
 	ldrh	r2, [r3, r2]
 	cmp	r2, #2
-	ldrls	r2, .L2025+20
-	movwls	r3, #3912
+	ldrls	r2, .L1952+12
+	movwls	r3, #3908
 	ldrlsh	r6, [r2, r3]
-	bls	.L2019
-.L2001:
+	bls	.L1947
+.L1931:
 	mov	r1, #0
-	str	r1, [r3, #-1000]
+	str	r1, [r3, #-1004]
 	mov	r1, #400
 	ldrh	r0, [r3, r1]
 	cmp	r0, #0
 	addeq	r0, r2, #1
-.L1960:
+.L1889:
 	add	sp, sp, #36
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2026:
+.L1953:
 	.align	2
-.L2025:
+.L1952:
 	.word	.LANCHOR2
-	.word	-1136
-	.word	-1138
-	.word	-1756
-	.word	-1184
+	.word	-1140
+	.word	-1142
 	.word	.LANCHOR0
-	.word	.LC115
+	.word	-1760
+	.word	-2052
+	.word	-1194
+	.word	-1188
+	.word	.LC119
+	.word	-1952
+	.word	-1196
+	.word	.LC120
+	.word	-1776
+	.word	-1758
+	.word	-2000
+	.word	-1156
 	.word	-1948
-	.word	-2048
-	.word	-1190
-	.word	-1192
-	.word	.LC116
-	.word	-1772
-	.word	.LANCHOR2-1756
-	.word	-1754
-	.word	-2044
-	.word	-1996
-	.word	-1152
-	.word	-1944
-	.word	.LANCHOR2-1742
+	.word	.LANCHOR2-1746
 	.fnend
-	.size	rk_ftl_garbage_collect.part.18, .-rk_ftl_garbage_collect.part.18
+	.size	rk_ftl_garbage_collect.part.17, .-rk_ftl_garbage_collect.part.17
 	.align	2
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
@@ -17712,45 +17015,45 @@ rk_ftl_garbage_collect:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r3, .L2033
+	ldr	r3, .L1960
 	mov	r5, r1
-	ldr	r0, [r3, #-1000]
+	ldr	r0, [r3, #-1004]
 	cmp	r0, #0
 	movne	r0, #0
 	ldmnefd	sp!, {r3, r4, r5, pc}
-	ldr	r2, .L2033+4
+	ldr	r2, .L1960+4
 	ldrh	r2, [r3, r2]
 	cmp	r2, #47
 	ldmlsfd	sp!, {r3, r4, r5, pc}
-	ldr	r1, .L2033+8
-	movw	r2, #3000
+	ldr	r1, .L1960+8
+	movw	r2, #2936
 	ldrh	r1, [r1, r2]
 	movw	r2, #65535
 	cmp	r1, r2
-	beq	.L2029
-	ldr	r1, .L2033+12
+	beq	.L1956
+	ldr	r1, .L1960+12
 	ldrh	r3, [r3, r1]
 	cmp	r3, r2
-	beq	.L2029
+	beq	.L1956
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	bne	.L2032
-.L2029:
+	bne	.L1959
+.L1956:
 	mov	r0, r4
 	mov	r1, r5
 	ldmfd	sp!, {r3, r4, r5, lr}
-	b	rk_ftl_garbage_collect.part.18
-.L2032:
+	b	rk_ftl_garbage_collect.part.17
+.L1959:
 	mov	r0, #1
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L2034:
+.L1961:
 	.align	2
-.L2033:
+.L1960:
 	.word	.LANCHOR2
-	.word	-2056
+	.word	-2060
 	.word	.LANCHOR1
-	.word	-1948
+	.word	-1952
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
@@ -17760,37 +17063,37 @@ FtlCacheWriteBack:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2057
+	ldr	r3, .L1984
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 	ldr	r4, [r3, #408]
-	ldr	r3, .L2057+4
-	ldr	r1, [r3, #3964]
+	ldr	r3, .L1984+4
+	ldr	r1, [r3, #3960]
 	cmp	r1, #0
-	beq	.L2036
-	ldrb	r8, [r3, #80]	@ zero_extendqisi2
+	beq	.L1963
+	ldrb	r8, [r3, #928]	@ zero_extendqisi2
 	cmp	r8, #0
-	beq	.L2037
+	beq	.L1964
 	ldrb	r8, [r4, #8]	@ zero_extendqisi2
-	sub	lr, r8, #1
-	rsbs	r8, lr, #0
-	adc	r8, r8, lr
-.L2037:
-	ldr	r0, [r3, #3968]
+	sub	ip, r8, #1
+	rsbs	r8, ip, #0
+	adc	r8, r8, ip
+.L1964:
+	ldr	r0, [r3, #3964]
 	mov	r2, r8
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r5, #0
 	bl	FlashProgPages
 	mov	r7, r5
-	ldr	r6, .L2057+4
-	ldr	r9, .L2057
-	b	.L2038
-.L2043:
-	ldr	r2, [r6, #3968]
+	ldr	r6, .L1984+4
+	ldr	r9, .L1984
+	b	.L1965
+.L1970:
+	ldr	r2, [r6, #3964]
 	add	r3, r2, r5
 	ldr	r2, [r2, r5]
 	cmn	r2, #1
-	beq	.L2056
+	beq	.L1983
 	ldr	r2, [r3, #4]
 	cmp	r8, #0
 	ldr	r0, [r3, #16]
@@ -17800,48 +17103,48 @@ FtlCacheWriteBack:
 	strne	r2, [sp, #4]
 	mov	r2, #1
 	bl	log2phys
-	ldr	r3, [r6, #3968]
+	ldr	r3, [r6, #3964]
 	add	r3, r3, r5
 	ldr	r3, [r3, #12]
 	ldr	r0, [r3, #12]
 	cmn	r0, #1
-	beq	.L2041
+	beq	.L1968
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r9, #-2064]
+	ldr	r2, [r9, #-2068]
 	mov	r3, r0, asl #1
 	mov	sl, r0
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L2042
-	ldr	r0, .L2057+8
+	bne	.L1969
+	ldr	r0, .L1984+8
 	mov	r1, sl
 	bl	printk
-.L2042:
+.L1969:
 	mov	r0, sl
 	bl	decrement_vpc_count
-.L2041:
+.L1968:
 	add	r7, r7, #1
 	add	r5, r5, #36
-.L2038:
-	ldr	r3, [r6, #3964]
+.L1965:
+	ldr	r3, [r6, #3960]
 	cmp	r7, r3
-	bcc	.L2043
-	b	.L2044
-.L2052:
-	ldr	r3, [r6, #3968]
+	bcc	.L1970
+	b	.L1971
+.L1979:
+	ldr	r3, [r6, #3964]
 	mvn	r2, #0
-	movw	sl, #3912
+	movw	sl, #3908
 	str	r2, [r3, r5]
-	b	.L2045
-.L2048:
+	b	.L1972
+.L1975:
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #0]
 	cmp	r3, r0
-	bne	.L2046
-	ldr	r2, [r7, #-2064]
+	bne	.L1973
+	ldr	r2, [r7, #-2068]
 	mov	r3, r3, asl #1
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r2, r3]
@@ -17852,17 +17155,17 @@ FtlCacheWriteBack:
 	mov	r3, #0
 	strb	r3, [r4, #6]
 	strh	r3, [r4, #4]	@ movhi
-.L2046:
+.L1973:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L2047
+	bne	.L1974
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L2047:
-	ldr	r3, [r7, #-1608]
+.L1974:
+	ldr	r3, [r7, #-1612]
 	add	r3, r3, #1
-	str	r3, [r7, #-1608]
-	ldr	r3, [r6, #3968]
+	str	r3, [r7, #-1612]
+	ldr	r3, [r6, #3964]
 	add	r3, r3, r5
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
@@ -17873,17 +17176,17 @@ FtlCacheWriteBack:
 	mov	r2, r8
 	mov	r3, r0
 	str	r0, [sp, #4]
-	ldr	r0, [r6, #3968]
+	ldr	r0, [r6, #3964]
 	add	r0, r0, r5
 	str	r3, [r0, #4]
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L2045:
-	ldr	r2, [r6, #3968]
+.L1972:
+	ldr	r2, [r6, #3964]
 	add	r3, r2, r5
 	ldr	r2, [r2, r5]
 	cmn	r2, #1
-	beq	.L2048
+	beq	.L1975
 	ldr	r2, [r3, #4]
 	cmp	r8, #0
 	ldr	r0, [r3, #16]
@@ -17893,67 +17196,67 @@ FtlCacheWriteBack:
 	strne	r2, [sp, #4]
 	mov	r2, #1
 	bl	log2phys
-	ldr	r3, [r6, #3968]
+	ldr	r3, [r6, #3964]
 	add	r3, r3, r5
 	ldr	r3, [r3, #12]
 	ldr	r0, [r3, #12]
 	cmn	r0, #1
-	beq	.L2050
+	beq	.L1977
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r7, #-2064]
+	ldr	r2, [r7, #-2068]
 	mov	r3, r0, asl #1
 	mov	sl, r0
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L2051
-	ldr	r0, .L2057+8
+	bne	.L1978
+	ldr	r0, .L1984+8
 	mov	r1, sl
 	bl	printk
-.L2051:
+.L1978:
 	mov	r0, sl
 	bl	decrement_vpc_count
-.L2050:
+.L1977:
 	add	r9, r9, #1
 	add	r5, r5, #36
-	b	.L2039
-.L2056:
-	ldr	r6, .L2057+4
+	b	.L1966
+.L1983:
+	ldr	r6, .L1984+4
 	mov	r5, #0
-	ldr	r7, .L2057
+	ldr	r7, .L1984
 	mov	r9, r5
-.L2039:
-	ldr	r3, [r6, #3964]
+.L1966:
+	ldr	r3, [r6, #3960]
 	cmp	r9, r3
-	bcc	.L2052
+	bcc	.L1979
 	movw	r4, #16386
-	ldr	r6, .L2057
-	ldr	r5, .L2057+12
-	b	.L2053
-.L2054:
+	ldr	r6, .L1984
+	ldr	r5, .L1984+12
+	b	.L1980
+.L1981:
 	mov	r0, #1
 	mov	r1, r0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	beq	.L2044
-.L2053:
+	beq	.L1971
+.L1980:
 	ldrh	r3, [r6, r5]
 	cmp	r3, #0
-	bne	.L2054
-.L2044:
-	ldr	r3, .L2057+4
+	bne	.L1981
+.L1971:
+	ldr	r3, .L1984+4
 	mov	r2, #0
-	str	r2, [r3, #3964]
-.L2036:
+	str	r2, [r3, #3960]
+.L1963:
 	mov	r0, #0
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
-.L2058:
+.L1985:
 	.align	2
-.L2057:
+.L1984:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC117
-	.word	-1134
+	.word	.LC121
+	.word	-1138
 	.fnend
 	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
 	.align	2
@@ -17976,98 +17279,98 @@ FtlGcFreeTempBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
-	movw	r3, #3912
-	ldr	r2, .L2081
+	movw	r3, #3908
+	ldr	r2, .L2008
 	ldrh	r1, [r2, r3]
-	ldr	r2, .L2081+4
-	ldr	r3, .L2081+8
-	ldrh	r4, [r3, r2]
+	ldr	r2, .L2008+4
+	ldr	r3, .L2008+8
+	ldrh	r5, [r3, r2]
 	movw	r2, #65535
-	cmp	r4, r2
-	beq	.L2061
+	cmp	r5, r2
+	beq	.L1988
 	cmp	r0, #0
-	beq	.L2062
-	ldr	ip, .L2081+12
-	movw	r0, #3000
+	beq	.L1989
+	ldr	ip, .L2008+12
+	movw	r0, #2936
 	ldrh	lr, [ip, r0]
 	cmp	lr, r2
 	movne	r1, #2
-	bne	.L2062
+	bne	.L1989
 	mov	r2, #0
 	strh	r2, [ip, r0]	@ movhi
-	sub	r2, r2, #2048
+	ldr	r2, .L2008+16
 	ldrh	r3, [r3, r2]
 	cmp	r3, #17
 	movhi	r1, #2
-.L2062:
-	ldr	r0, .L2081+16
+.L1989:
+	ldr	r4, .L2008+8
+	sub	r0, r4, #1952
 	bl	FtlGcScanTempBlk
 	cmn	r0, #1
 	str	r0, [sp, #4]
-	beq	.L2063
-	ldr	r3, .L2081+8
-	mov	r4, r4, asl #1
-	ldr	r3, [r3, #-2084]
-	ldrh	r2, [r3, r4]
+	beq	.L1990
+	ldr	r3, [r4, #-2088]
+	mov	r5, r5, asl #1
+	ldrh	r2, [r3, r5]
 	cmp	r2, #4
-	bls	.L2064
+	bls	.L1991
 	sub	r2, r2, #5
 	mov	r0, #1
-	strh	r2, [r3, r4]	@ movhi
+	strh	r2, [r3, r5]	@ movhi
 	bl	FtlEctTblFlush
-.L2064:
-	ldr	r3, .L2081+8
-	ldr	r2, [r3, #-1016]
+.L1991:
+	ldr	r3, .L2008+8
+	ldr	r2, [r3, #-1020]
 	cmp	r2, #0
-	bne	.L2065
-	ldr	r2, [r3, #-1608]
+	bne	.L1992
+	ldr	r2, [r3, #-1612]
 	ldr	r0, [sp, #4]
 	add	r2, r2, #1
-	str	r2, [r3, #-1608]
+	str	r2, [r3, #-1612]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L2065:
-	ldr	r3, .L2081+8
+.L1992:
+	ldr	r3, .L2008+8
 	mov	r2, #0
-	str	r2, [r3, #-1016]
-	b	.L2076
-.L2063:
-	ldr	r2, .L2081+12
-	movw	r3, #3000
+	str	r2, [r3, #-1020]
+	b	.L2004
+.L1990:
+	ldr	r2, .L2008+12
+	movw	r3, #2936
 	ldrh	r2, [r2, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2076
-.L2061:
-	ldr	r6, .L2081+8
+	bne	.L2004
+.L1988:
+	ldr	r6, .L2008+8
 	movw	r3, #65535
-	ldr	r5, .L2081+4
+	ldr	r5, .L2008+4
 	mov	r4, #0
-	str	r4, [r6, #-1016]
+	str	r4, [r6, #-1020]
 	ldrh	r2, [r6, r5]
 	cmp	r2, r3
 	moveq	r0, r4
-	beq	.L2066
+	beq	.L1993
 	bl	FtlCacheWriteBack
-	ldr	ip, .L2081
-	movw	r0, #3912
-	ldrb	r1, [r6, #-1941]	@ zero_extendqisi2
+	ldr	ip, .L2008
+	movw	r0, #3908
+	ldrb	r1, [r6, #-1945]	@ zero_extendqisi2
 	ldrh	r3, [r6, r5]
 	ldrh	r0, [ip, r0]
-	ldr	r2, [r6, #-2064]
-	ldr	sl, .L2081+20
+	ldr	r2, [r6, #-2068]
+	ldr	sl, .L2008+20
 	mov	r3, r3, asl #1
 	mul	r1, r0, r1
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r6, #-1860]
+	ldr	r3, [r6, #-1864]
 	ldrh	r2, [r6, sl]
 	add	r3, r2, r3
-	str	r3, [r6, #-1860]
-	b	.L2067
-.L2070:
+	str	r3, [r6, #-1864]
+	b	.L1994
+.L1997:
 	mov	r7, #12
-	ldr	r8, [r6, #-1144]
+	ldr	r8, [r6, #-1148]
 	mul	r7, r7, r4
 	add	r1, sp, #4
 	mov	r2, #0
@@ -18077,7 +17380,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [sp, #4]
 	ldr	r3, [r8, r7]
 	cmp	r0, r3
-	bne	.L2068
+	bne	.L1995
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	add	r1, r5, #4
@@ -18086,104 +17389,108 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-	b	.L2079
-.L2068:
+	b	.L2007
+.L1995:
 	ldr	r3, [r5, #4]
 	cmp	r0, r3
-	beq	.L2069
-	ldr	r3, .L2081+4
+	beq	.L1996
+	ldr	r3, .L2008+4
 	ldrh	r0, [r6, r3]
-.L2079:
+.L2007:
 	bl	decrement_vpc_count
-.L2069:
+.L1996:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L2067:
+.L1994:
 	ldrh	r3, [r6, sl]
-	ldr	r5, .L2081+8
+	ldr	r5, .L2008+8
 	cmp	r3, r4
-	bhi	.L2070
+	bhi	.L1997
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L2081+4
-	ldr	r1, [r5, #-2064]
+	ldr	r3, .L2008+4
+	ldr	r1, [r5, #-2068]
 	ldrh	r0, [r5, r3]
 	mov	r5, r3
 	mov	r2, r0, asl #1
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	beq	.L2071
+	beq	.L1998
 	bl	INSERT_DATA_LIST
-	b	.L2072
-.L2071:
+	b	.L1999
+.L1998:
 	bl	INSERT_FREE_LIST
-.L2072:
-	ldr	r4, .L2081+8
+.L1999:
+	ldr	r4, .L2008+8
 	mvn	r3, #0
-	ldr	r2, .L2081+20
+	ldr	r2, .L2008+20
 	strh	r3, [r4, r5]	@ movhi
 	mov	r3, #0
 	strh	r3, [r4, r2]	@ movhi
-	ldr	r2, .L2081+24
+	sub	r2, r2, #12
 	strh	r3, [r4, r2]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	ldr	r3, [r4, #-1884]
-	mov	r1, r4
-	ldr	r2, .L2081+28
+	ldr	r3, [r4, #-1888]
+	mov	r0, r4
+	ldr	r1, .L2008+16
 	cmp	r3, #0
-	beq	.L2073
-	ldr	r3, [r4, #-1824]
+	beq	.L2000
+	ldr	r3, [r4, #-1828]
 	cmp	r3, #29
-	bhi	.L2073
-	ldrh	r3, [r4, r2]
-	sub	r2, r2, #276
+	bhi	.L2000
+	ldr	r3, .L2008+24
+	ldrh	r2, [r4, r1]
 	mvn	r1, #0
-	ldrh	r2, [r4, r2]
+	ldrh	r3, [r4, r3]
 	cmp	r2, r3
 	movcc	r3, r3, asl #1
-	ldrcc	r2, .L2081+32
+	ldrcc	r2, .L2008+28
 	strcch	r3, [r4, r2]	@ movhi
-	ldr	r3, .L2081+36
-	ldr	r2, .L2081+8
-	b	.L2080
-.L2073:
-	ldr	r0, .L2081+40
-	ldrh	r2, [r1, r2]
-	ldr	r3, .L2081+8
-	ldrh	r0, [r1, r0]
-	add	r2, r2, r2, asl #1
-	cmp	r0, r2, lsr #2
-	ble	.L2078
-	ldr	r2, .L2081+36
-	mvn	r1, #0
-	strh	r1, [r3, r2]	@ movhi
-	add	r2, r2, #564
-	mov	r1, #20
-.L2080:
-	strh	r1, [r3, r2]	@ movhi
-	b	.L2078
-.L2076:
+	ldr	r3, .L2008+32
+	ldr	r2, .L2008+8
+	strh	r1, [r2, r3]	@ movhi
+	b	.L2006
+.L2000:
+	ldr	r2, .L2008+24
+	ldrh	r1, [r0, r1]
+	ldr	r3, .L2008+8
+	ldrh	r2, [r0, r2]
+	add	r0, r2, r2, asl #1
+	cmp	r1, r0, lsr #2
+	ble	.L2006
+	ldr	r1, .L2008+32
+	mvn	r0, #0
+	strh	r0, [r3, r1]	@ movhi
+	ldr	r1, .L2008
+	ldrb	r0, [r1, #928]	@ zero_extendqisi2
+	ldr	r1, .L2008+28
+	cmp	r0, #0
+	subne	r2, r2, #2
+	moveq	r2, #20
+	strneh	r2, [r3, r1]	@ movhi
+	streqh	r2, [r3, r1]	@ movhi
+	beq	.L1993
+	b	.L2006
+.L2004:
 	mov	r0, #1
-	b	.L2066
-.L2078:
+	b	.L1993
+.L2006:
 	mov	r0, #0
-.L2066:
+.L1993:
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}
-.L2082:
+.L2009:
 	.align	2
-.L2081:
+.L2008:
 	.word	.LANCHOR0
-	.word	-1948
+	.word	-1952
 	.word	.LANCHOR2
 	.word	.LANCHOR1
-	.word	.LANCHOR2-1948
-	.word	-1140
-	.word	-1152
-	.word	-1772
-	.word	-1192
-	.word	-1756
-	.word	-2048
+	.word	-2052
+	.word	-1144
+	.word	-1776
+	.word	-1196
+	.word	-1760
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
@@ -18195,54 +17502,54 @@ Ftl_gc_temp_data_write_back:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r3, .L2092
-	ldrb	r3, [r3, #80]	@ zero_extendqisi2
+	ldr	r3, .L2019
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldr	r3, .L2092+4
-	beq	.L2084
-	ldr	r2, [r3, #-1176]
+	ldr	r3, .L2019+4
+	beq	.L2011
+	ldr	r2, [r3, #-1180]
 	tst	r2, #1
-	beq	.L2084
-	ldr	r2, .L2092+8
+	beq	.L2011
+	ldr	r2, .L2019+8
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	bne	.L2089
-.L2084:
+	bne	.L2016
+.L2011:
 	mov	r2, #0
-	ldr	r0, [r3, #-980]
-	ldr	r1, [r3, #-1176]
+	ldr	r0, [r3, #-984]
+	ldr	r1, [r3, #-1180]
 	mov	r3, r2
 	bl	FlashProgPages
 	mov	r4, #0
-	ldr	r5, .L2092+4
+	ldr	r5, .L2019+4
 	mov	r6, #36
-	b	.L2086
-.L2088:
+	b	.L2013
+.L2015:
 	mul	r3, r6, r4
-	ldr	r1, [r5, #-980]
+	ldr	r1, [r5, #-984]
 	add	r2, r1, r3
 	ldr	r1, [r1, r3]
 	cmn	r1, #1
-	bne	.L2087
-	ldr	r2, .L2092+12
+	bne	.L2014
+	ldr	r2, .L2019+12
 	mov	lr, #0
-	ldr	ip, [r7, #-2064]
+	ldr	ip, [r7, #-2068]
 	ldrh	r0, [r7, r2]
 	mov	r0, r0, asl #1
 	strh	lr, [ip, r0]	@ movhi
 	strh	r1, [r7, r2]	@ movhi
-	ldr	r2, [r7, #-1608]
+	ldr	r2, [r7, #-1612]
 	add	r2, r2, #1
-	str	r2, [r7, #-1608]
-	ldr	r2, [r7, #-980]
+	str	r2, [r7, #-1612]
+	ldr	r2, [r7, #-984]
 	add	r3, r2, r3
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L2091
-.L2087:
+	b	.L2018
+.L2014:
 	ldr	r3, [r2, #12]
 	add	r4, r4, #1
 	ldr	r1, [r2, #4]
@@ -18250,34 +17557,34 @@ Ftl_gc_temp_data_write_back:
 	ldr	r0, [r3, #12]
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-.L2086:
-	ldr	r1, [r5, #-1176]
-	ldr	r7, .L2092+4
+.L2013:
+	ldr	r1, [r5, #-1180]
+	ldr	r7, .L2019+4
 	cmp	r4, r1
-	bcc	.L2088
-	ldr	r0, [r7, #-980]
+	bcc	.L2015
+	ldr	r0, [r7, #-984]
 	bl	FtlGcBufFree
-	ldr	r3, .L2092+8
+	ldr	r3, .L2019+8
 	mov	r0, #0
-	str	r0, [r7, #-1176]
+	str	r0, [r7, #-1180]
 	ldrh	r3, [r7, r3]
 	cmp	r3, r0
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-.L2091:
+.L2018:
 	mov	r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2089:
+.L2016:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2093:
+.L2020:
 	.align	2
-.L2092:
+.L2019:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1944
 	.word	-1948
+	.word	-1952
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
@@ -18289,31 +17596,31 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r5, #3912
-	ldr	r6, .L2096
-	ldr	r0, .L2096+4
-	ldr	r4, .L2096+8
+	movw	r5, #3908
+	ldr	r6, .L2023
+	ldr	r4, .L2023+4
 	ldrh	r1, [r6, r5]
+	sub	r0, r4, #1952
 	bl	FtlGcScanTempBlk
-	ldr	r3, .L2096+12
+	ldr	r3, .L2023+8
 	ldrh	r2, [r4, r3]
 	ldrh	r3, [r6, r5]
 	cmp	r2, r3
 	ldmccfd	sp!, {r4, r5, r6, pc}
-	sub	r0, r4, #1088
+	ldr	r0, .L2023+12
 	bl	FtlMapBlkWriteDumpData
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
-	str	r3, [r4, #-1016]
+	str	r3, [r4, #-1020]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2097:
+.L2024:
 	.align	2
-.L2096:
+.L2023:
 	.word	.LANCHOR0
-	.word	.LANCHOR2-1948
 	.word	.LANCHOR2
-	.word	-1946
+	.word	-1950
+	.word	.LANCHOR2-1092
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
 	.align	2
@@ -18323,33 +17630,30 @@ FtlPowerLostRecovery:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	movw	r2, #266
-	ldr	r3, .L2099
-	mov	r4, #0
-	ldr	r5, .L2099+4
-	strh	r4, [r3, r2]	@ movhi
-	str	r4, [r3, #268]
-	mov	r0, r5
-	bl	FtlRecoverySuperblock
-	mov	r0, r5
-	add	r5, r5, #48
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r4, .L2026
+	sub	r6, r4, #2048
+	str	r5, [r4, #268]
+	sub	r4, r4, #2000
+	mov	r0, r6
+	bl	FtlRecoverySuperblock
+	mov	r0, r6
 	bl	FtlSlcSuperblockCheck
-	mov	r0, r5
+	mov	r0, r4
 	bl	FtlRecoverySuperblock
-	mov	r0, r5
+	mov	r0, r4
 	bl	FtlSlcSuperblockCheck
 	bl	FtlGcPageRecovery
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	mov	r0, r4
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L2100:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2027:
 	.align	2
-.L2099:
+.L2026:
 	.word	.LANCHOR2
-	.word	.LANCHOR2-2044
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -18361,20 +17665,23 @@ FtlSysBlkInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldr	r5, .L2112
-	ldr	r4, .L2112+4
-	ldr	r0, [r5, #3848]
+	movw	r3, #266
+	ldr	r5, .L2039
+	mov	r2, #0
+	ldr	r4, .L2039+4
+	ldr	r0, [r5, #3844]
+	strh	r2, [r4, r3]	@ movhi
 	uxth	r0, r0
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
-	ldr	r3, .L2112+8
+	ldr	r3, .L2039+8
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L2110
+	beq	.L2037
 	bl	FtlLoadSysInfo
 	subs	r6, r0, #0
-	bne	.L2110
+	bne	.L2037
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -18382,57 +17689,59 @@ FtlSysBlkInit:
 	bl	FtlFreeSysBLkSort
 	bl	SupperBlkListInit
 	bl	FtlPowerLostRecovery
-	movw	r3, #3950
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	movw	r3, #3946
 	ldrh	r2, [r5, r3]
 	mov	r3, r6
-	ldr	r1, [r4, #-1900]
-	b	.L2103
-.L2105:
+	ldr	r1, [r4, #-1904]
+	b	.L2030
+.L2032:
 	add	r0, r1, r6
 	add	r6, r6, #12
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L2104
+	blt	.L2031
 	add	r3, r3, #1
-.L2103:
+.L2030:
 	cmp	r3, r2
-	blt	.L2105
-.L2104:
-	ldr	r4, .L2112+4
+	blt	.L2032
+.L2031:
+	ldr	r4, .L2039+4
 	cmp	r3, r2
-	ldr	r1, .L2112+12
+	ldr	r1, .L2039+12
 	ldrh	r0, [r4, r1]
 	add	r0, r0, #1
 	strh	r0, [r4, r1]	@ movhi
-	blt	.L2106
+	blt	.L2033
 	movw	r3, #266
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	beq	.L2107
-.L2106:
-	ldr	r0, .L2112+16
+	beq	.L2034
+.L2033:
+	ldr	r0, .L2039+16
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L2112+20
+	ldr	r0, .L2039+20
 	bl	FtlSuperblockPowerLostFix
-	ldr	r3, .L2112+24
-	ldr	r1, [r4, #-2064]
-	ldr	r2, .L2112+28
+	ldr	r3, .L2039+24
+	ldr	r1, [r4, #-2068]
+	ldr	r2, .L2039+28
 	ldrh	r3, [r4, r3]
 	ldrh	r0, [r4, r2]
 	mov	r3, r3, asl #1
 	ldrh	ip, [r1, r3]
 	rsb	r0, r0, ip
 	strh	r0, [r1, r3]	@ movhi
-	ldr	r0, .L2112
-	movw	r1, #3912
-	ldr	r3, .L2112+32
-	ldr	lr, [r4, #-2064]
+	ldr	r0, .L2039
+	movw	r1, #3908
+	ldr	r3, .L2039+32
+	ldr	lr, [r4, #-2068]
 	ldrh	ip, [r0, r1]
 	strh	ip, [r4, r3]	@ movhi
 	mov	r3, #0
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #44
-	strb	r3, [r4, #-2038]
+	strb	r3, [r4, #-2042]
 	ldrh	ip, [r4, r2]
 	add	r2, r2, #4
 	ldrh	r5, [r4, r2]
@@ -18441,183 +17750,82 @@ FtlSysBlkInit:
 	rsb	r5, r5, r6
 	strh	r5, [lr, ip]	@ movhi
 	ldrh	r0, [r0, r1]
-	ldr	r1, .L2112+36
+	ldr	r1, .L2039+36
 	strh	r3, [r4, r2]	@ movhi
-	strb	r3, [r4, #-1990]
+	strb	r3, [r4, #-1994]
 	strh	r0, [r4, r1]	@ movhi
-	ldr	r0, .L2112+40
+	ldr	r0, .L2039+40
 	bl	FtlMapBlkWriteDumpData
-	ldr	r0, .L2112+44
+	ldr	r0, .L2039+44
 	bl	FtlMapBlkWriteDumpData
-	ldr	r3, .L2112+48
+	ldr	r3, .L2039+48
 	ldrh	r2, [r4, r3]
 	add	r2, r2, #1
 	strh	r2, [r4, r3]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L2107:
-	mov	r0, #1
-	ldr	r4, .L2112+4
-	bl	FtlUpdateVaildLpn
-	ldr	r3, .L2112+24
+.L2034:
+	ldr	r3, .L2039+24
+	ldr	r4, .L2039+4
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L2108
-	ldr	r3, .L2112+28
+	beq	.L2035
+	ldr	r3, .L2039+28
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2108
-	ldr	r3, .L2112+52
+	bne	.L2035
+	ldr	r3, .L2039+52
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2108
+	bne	.L2035
 	bl	FtlGcRefreshBlock
-	ldr	r3, .L2112+56
+	ldr	r3, .L2039+56
 	ldrh	r0, [r4, r3]
 	bl	FtlGcRefreshBlock
-	ldr	r0, .L2112+16
+	sub	r0, r4, #2048
 	bl	allocate_new_data_superblock
-	ldr	r0, .L2112+20
+	sub	r0, r4, #2000
 	bl	allocate_new_data_superblock
 	add	r0, r4, #224
 	bl	FtlMapBlkWriteDumpData
-.L2108:
-	ldr	r3, .L2112+12
-	ldr	r2, .L2112+4
+.L2035:
+	ldr	r3, .L2039+12
+	ldr	r2, .L2039+4
 	ldrh	r0, [r2, r3]
 	ands	r4, r0, #31
-	bne	.L2111
+	bne	.L2038
 	bl	FtlVpcCheckAndModify
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2110:
+.L2037:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2111:
+.L2038:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2113:
+.L2040:
 	.align	2
-.L2112:
+.L2039:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1768
-	.word	-1792
-	.word	.LANCHOR2-2044
-	.word	.LANCHOR2-1996
+	.word	-1772
+	.word	-1796
+	.word	.LANCHOR2-2048
+	.word	.LANCHOR2-2000
+	.word	-2048
 	.word	-2044
-	.word	-2040
-	.word	-2042
-	.word	-1994
-	.word	.LANCHOR2-1088
+	.word	-2046
+	.word	-1998
+	.word	.LANCHOR2-1092
 	.word	.LANCHOR2+224
-	.word	-1790
-	.word	-1992
+	.word	-1794
 	.word	-1996
+	.word	-2000
 	.fnend
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
-	.global	FtlInit
-	.type	FtlInit, %function
-FtlInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-.L2115:
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mvn	r3, #0
-	ldr	r4, .L2117
-	mov	r2, #0
-	ldr	r1, .L2117+4
-	mov	r5, r0
-	ldr	r0, .L2117+8
-	str	r3, [r4, #2960]
-	ldr	r3, .L2117+12
-	str	r2, [r3, #412]
-	bl	printk
-	mov	r0, r5
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldr	r3, .L2117+16
-	ldr	r0, [r3, #3848]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	bne	.L2116
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	moveq	r3, #1
-	streq	r3, [r4, #2960]
-.L2116:
-	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L2118:
-	.align	2
-.L2117:
-	.word	.LANCHOR1
-	.word	.LC75
-	.word	.LC74
-	.word	.LANCHOR2
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlInit, .-FtlInit
-	.align	2
-	.global	rk_ftl_init
-	.type	rk_ftl_init, %function
-rk_ftl_init:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mov	r0, #2048
-	bl	ftl_malloc
-	ldr	r4, .L2123
-	mov	r5, #0
-	add	r1, r4, #420
-	str	r5, [r4, #112]
-	str	r5, [r4, #420]
-	str	r0, [r4, #416]
-	add	r0, r4, #112
-	bl	rknand_get_reg_addr
-	ldr	r3, [r4, #112]
-	cmp	r3, r5
-	mvneq	r4, #0
-	beq	.L2120
-	bl	rk_nandc_irq_init
-	ldr	r0, [r4, #416]
-	mov	r1, r5
-	mov	r2, r5
-	mov	r3, #2048
-	bl	FlashSramLoadStore
-	bl	rknand_flash_cs_init
-	ldr	r0, [r4, #112]
-	bl	FlashInit
-	subs	r4, r0, #0
-	bne	.L2121
-	ldr	r0, .L2123+4
-	bl	FtlInit
-.L2121:
-	ldr	r0, .L2123+8
-	mov	r1, r4
-	bl	printk
-.L2120:
-	mov	r0, r4
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L2124:
-	.align	2
-.L2123:
-	.word	.LANCHOR2
-	.word	.LANCHOR0+2200
-	.word	.LC118
-	.fnend
-	.size	rk_ftl_init, .-rk_ftl_init
-	.align	2
 	.global	Ftl_get_new_temp_ppa
 	.type	Ftl_get_new_temp_ppa, %function
 Ftl_get_new_temp_ppa:
@@ -18626,44 +17834,44 @@ Ftl_get_new_temp_ppa:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r3, .L2128
-	ldr	r5, .L2128+4
+	ldr	r3, .L2044
+	ldr	r5, .L2044+4
 	ldrh	r2, [r5, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L2126
-	ldr	r3, .L2128+8
+	beq	.L2042
+	ldr	r3, .L2044+8
 	ldrh	r3, [r5, r3]
 	cmp	r3, #0
-	bne	.L2127
-.L2126:
+	bne	.L2043
+.L2042:
 	bl	FtlCacheWriteBack
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L2128+12
+	ldr	r0, .L2044+12
 	mov	r4, #0
-	strb	r4, [r5, #-1940]
+	strb	r4, [r5, #-1944]
 	bl	allocate_data_superblock
-	ldr	r3, .L2128+16
+	ldr	r3, .L2044+16
 	strh	r4, [r5, r3]	@ movhi
 	add	r3, r3, #12
 	strh	r4, [r5, r3]	@ movhi
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
 	mov	r0, r4
 	bl	FtlEctTblFlush
-.L2127:
-	ldr	r0, .L2128+12
+	bl	FtlVpcTblFlush
+.L2043:
+	ldr	r0, .L2044+12
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L2129:
+.L2045:
 	.align	2
-.L2128:
-	.word	-1948
+.L2044:
+	.word	-1952
 	.word	.LANCHOR2
-	.word	-1944
-	.word	.LANCHOR2-1948
-	.word	-1152
+	.word	-1948
+	.word	.LANCHOR2-1952
+	.word	-1156
 	.fnend
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
@@ -18676,18 +17884,18 @@ FtlDiscard:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, lr}
 	add	r2, r1, r0
-	ldr	r5, .L2139
+	ldr	r5, .L2055
 	mov	r7, r0
 	mov	r4, r1
-	ldr	r3, [r5, #3952]
+	ldr	r3, [r5, #3948]
 	cmp	r2, r3
 	mvnhi	r0, #0
-	bhi	.L2131
+	bhi	.L2047
 	cmp	r1, #31
 	movls	r0, #0
-	bls	.L2131
+	bls	.L2047
 	bl	FtlCacheWriteBack
-	movw	r3, #3918
+	movw	r3, #3914
 	ldrh	r6, [r5, r3]
 	mov	r0, r7
 	mov	r1, r6
@@ -18696,65 +17904,65 @@ FtlDiscard:
 	mov	r5, r0
 	uxth	r7, r7
 	cmp	r7, #0
-	beq	.L2132
+	beq	.L2048
 	rsb	r6, r7, r6
 	add	r5, r0, #1
 	cmp	r6, r4
 	movcs	r6, r4
 	uxth	r6, r6
 	rsb	r4, r6, r4
-.L2132:
+.L2048:
 	mvn	r3, #0
-	ldr	r7, .L2139
+	ldr	r7, .L2055
 	str	r3, [sp, #4]
-	movw	r6, #3918
-	b	.L2133
-.L2135:
+	movw	r6, #3914
+	b	.L2049
+.L2051:
 	mov	r0, r5
 	mov	r1, sp
 	mov	r2, #0
 	bl	log2phys
 	ldr	r3, [sp, #0]
 	cmn	r3, #1
-	beq	.L2134
-	ldr	r3, .L2139+4
+	beq	.L2050
+	ldr	r3, .L2055+4
 	add	r1, sp, #4
 	mov	r0, r5
-	ldr	r2, [r3, #424]
+	ldr	r2, [r3, #412]
 	add	r2, r2, #1
-	str	r2, [r3, #424]
-	ldr	r2, [r3, #-1876]
+	str	r2, [r3, #412]
+	ldr	r2, [r3, #-1880]
 	add	r2, r2, #1
-	str	r2, [r3, #-1876]
+	str	r2, [r3, #-1880]
 	mov	r2, #1
 	bl	log2phys
 	ldr	r0, [sp, #0]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L2134:
+.L2050:
 	ldrh	r3, [r7, r6]
 	add	r5, r5, #1
 	rsb	r4, r3, r4
-.L2133:
+.L2049:
 	ldrh	r3, [r7, r6]
 	cmp	r4, r3
-	bcs	.L2135
-	ldr	r3, .L2139+4
+	bcs	.L2051
+	ldr	r3, .L2055+4
 	mov	r4, #0
-	ldr	r2, [r3, #424]
+	ldr	r2, [r3, #412]
 	cmp	r2, #32
-	bls	.L2138
-	str	r4, [r3, #424]
+	bls	.L2054
+	str	r4, [r3, #412]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2138:
+.L2054:
 	mov	r0, r4
-.L2131:
+.L2047:
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
-.L2140:
+.L2056:
 	.align	2
-.L2139:
+.L2055:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -18770,9 +17978,9 @@ FtlSysFlush:
 	.save {r3, lr}
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
 	mov	r0, #1
 	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
 	.fnend
@@ -18786,17 +17994,17 @@ FtlDeInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L2144
-	ldr	r3, [r3, #2960]
+	ldr	r3, .L2060
+	ldr	r3, [r3, #2932]
 	cmp	r3, #1
-	bne	.L2143
+	bne	.L2059
 	bl	FtlSysFlush
-.L2143:
+.L2059:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L2145:
+.L2061:
 	.align	2
-.L2144:
+.L2060:
 	.word	.LANCHOR1
 	.fnend
 	.size	FtlDeInit, .-FtlDeInit
@@ -18816,6 +18024,67 @@ rk_ftl_de_init:
 	.fnend
 	.size	rk_ftl_de_init, .-rk_ftl_de_init
 	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+.L2064:
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r5, .L2068
+	mov	r6, r0
+	ldr	r4, .L2068+4
+	ldr	r1, .L2068+8
+	str	r3, [r5, #2932]
+	mov	r3, #0
+	ldr	r0, .L2068+12
+	str	r3, [r4, #416]
+	bl	printk
+	mov	r0, r6
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldr	r3, .L2068+16
+	ldr	r0, [r3, #3844]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	bne	.L2065
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L2065
+	mov	r3, #1
+	str	r3, [r5, #2932]
+	ldr	r3, .L2068+20
+	ldrh	r3, [r4, r3]
+	cmp	r3, #15
+	bhi	.L2065
+	movw	r4, #8129
+.L2066:
+	mov	r0, #0
+	mov	r1, #1
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L2066
+.L2065:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2069:
+	.align	2
+.L2068:
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LC75
+	.word	.LC74
+	.word	.LANCHOR0
+	.word	-2052
+	.fnend
+	.size	FtlInit, .-FtlInit
+	.align	2
 	.global	FtlWrite
 	.type	FtlWrite, %function
 FtlWrite:
@@ -18829,309 +18098,304 @@ FtlWrite:
 	.pad #100
 	sub	sp, sp, #100
 	mov	r5, r2
-	mov	r8, r3
-	bne	.L2148
+	mov	sl, r3
+	bne	.L2071
 	add	r0, r1, #256
 	mov	r1, r2
 	mov	r2, r3
 	bl	FtlVendorPartWrite
-	b	.L2149
-.L2148:
-	ldr	r9, .L2197
+	b	.L2072
+.L2071:
+	ldr	r9, .L2125
 	add	r7, r2, r1
-	ldr	r3, [r9, #3952]
+	ldr	r3, [r9, #3948]
 	cmp	r7, r3
 	mvnhi	r0, #0
-	bhi	.L2149
-	ldr	r6, .L2197+4
+	bhi	.L2072
+	ldr	r6, .L2125+4
 	mov	r3, #2048
 	mov	r0, r1
-	str	r3, [r6, #428]
-	movw	r3, #3918
-	ldrh	sl, [r9, r3]
-	mov	r1, sl
+	str	r3, [r6, #420]
+	movw	r3, #3914
+	ldrh	r8, [r9, r3]
+	mov	r1, r8
 	bl	__aeabi_uidiv
-	mov	r1, sl
-	str	r0, [sp, #20]
+	mov	r1, r8
+	str	r0, [sp, #12]
 	sub	r0, r7, #1
 	bl	__aeabi_uidiv
-	ldr	r3, [sp, #20]
+	ldr	r3, [sp, #12]
 	cmp	r5, #8
+	sub	r7, r6, #2048
+	subls	r7, r6, #2000
 	rsb	fp, r3, r0
-	ldr	r3, [r6, #-1872]
-	add	r7, fp, #1
-	str	r7, [sp, #16]
-	add	r3, r7, r3
-	str	r3, [r6, #-1872]
-	ldr	r3, [r6, #-1856]
+	ldr	r3, [r6, #-1876]
+	add	ip, fp, #1
 	str	r0, [sp, #44]
+	add	r3, ip, r3
+	str	r3, [r6, #-1876]
+	ldr	r3, [r6, #-1860]
+	str	ip, [sp, #8]
 	add	r3, r5, r3
-	str	r3, [r6, #-1856]
-	ldr	r3, .L2197+8
-	add	r7, r3, #48
-	movhi	r7, r3
-	ldr	r3, [r9, #3964]
+	str	r3, [r6, #-1860]
+	ldr	r3, [r9, #3960]
 	cmp	r3, #0
-	beq	.L2183
-	ldr	r2, [r9, #3968]
+	beq	.L2108
+	ldr	r2, [r9, #3964]
 	sub	r3, r3, #1
 	mov	r7, #36
-	ldr	lr, [sp, #20]
+	ldr	ip, [sp, #12]
 	mla	r7, r7, r3, r2
 	ldr	r3, [r7, #16]
-	cmp	lr, r3
-	strne	r5, [sp, #32]
-	bne	.L2152
-	ldr	r3, [r6, #-1868]
+	cmp	ip, r3
+	strne	r5, [sp, #28]
+	bne	.L2075
+	ldr	r3, [r6, #-1872]
 	mov	r0, r4
-	mov	r1, sl
+	mov	r1, r8
 	add	r3, r3, #1
-	str	r3, [r6, #-1868]
-	ldr	r3, [r6, #432]
+	str	r3, [r6, #-1872]
+	ldr	r3, [r6, #424]
 	add	r3, r3, #1
-	str	r3, [r6, #432]
+	str	r3, [r6, #424]
 	bl	__aeabi_uidivmod
 	ldr	r0, [r7, #8]
-	rsb	r9, r1, sl
+	rsb	r9, r1, r8
 	add	r0, r0, r1, asl #9
 	cmp	r9, r5
 	movcs	r9, r5
-	mov	r1, r8
+	mov	r1, sl
 	mov	r3, r9, asl #9
-	str	r3, [sp, #4]
+	str	r3, [sp, #0]
 	mov	r2, r3
 	bl	memcpy
 	cmp	fp, #0
-	ldr	r3, [sp, #4]
-	bne	.L2153
-	ldr	r2, [r6, #432]
+	ldr	r3, [sp, #0]
+	bne	.L2076
+	ldr	r2, [r6, #424]
 	cmp	r2, #2
 	movle	r0, fp
-	ble	.L2149
-.L2153:
-	add	r8, r8, r3
+	ble	.L2072
+.L2076:
+	add	sl, sl, r3
 	add	r4, r4, r9
-	ldr	r3, [sp, #20]
-	rsb	r7, r9, r5
-	str	fp, [sp, #16]
+	ldr	r3, [sp, #12]
+	rsb	ip, r9, r5
+	str	fp, [sp, #8]
 	add	r3, r3, #1
-	str	r7, [sp, #32]
-	str	r3, [sp, #20]
-.L2152:
-	ldr	r3, .L2197+4
+	str	ip, [sp, #28]
+	str	r3, [sp, #12]
+.L2075:
+	ldr	r3, .L2125+4
 	mov	r2, #0
 	ldr	r7, [r3, #408]
-	str	r2, [r3, #432]
-	b	.L2151
-.L2183:
-	str	r5, [sp, #32]
-.L2151:
-	ldr	r0, [sp, #20]
+	str	r2, [r3, #424]
+	b	.L2074
+.L2108:
+	str	r5, [sp, #28]
+.L2074:
+	ldr	r0, [sp, #12]
 	ldr	r1, [sp, #44]
 	bl	FtlCacheMetchLpa
 	cmp	r0, #0
-	beq	.L2154
+	beq	.L2077
 	bl	FtlCacheWriteBack
-.L2154:
-	cmp	r5, sl, asl #1
-	ldr	r5, .L2197
+.L2077:
+	cmp	r5, r8, asl #1
+	ldr	r8, .L2125+4
+	ldr	r5, .L2125
 	mov	fp, #0
-	ldr	r6, [sp, #20]
-	movcc	r3, #0
-	movcs	r3, #1
-	str	r3, [sp, #24]
-	ldr	r3, .L2197+4
-	mov	sl, r5
-	str	fp, [sp, #40]
-	mov	r9, r8
-	str	r7, [r3, #408]
-	b	.L2194
-.L2180:
-	ldrh	r1, [r7, #4]
-	cmp	r1, #0
-	bne	.L2156
-	ldr	r3, .L2197+8
-	ldr	r2, .L2197+4
-	cmp	r7, r3
-	ldr	r8, .L2197+12
-	bne	.L2157
-	ldr	r3, .L2197+16
-	ldrh	r3, [r2, r3]
+	movcc	ip, #0
+	movcs	ip, #1
+	ldr	r6, [sp, #12]
+	str	ip, [sp, #16]
+	str	r7, [r8, #408]
+	mov	r9, r5
+	str	fp, [sp, #40]
+	str	sl, [sp, #24]
+	b	.L2122
+.L2103:
+	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	bne	.L2158
-	ldr	r0, .L2197+20
-	str	r3, [sp, #4]
+	bne	.L2079
+	ldr	lr, .L2125+8
+	cmp	r7, lr
+	bne	.L2080
+	ldr	r3, .L2125+12
+	ldrh	sl, [r8, r3]
+	cmp	sl, #0
+	bne	.L2081
+	sub	r0, r2, #2000
 	bl	allocate_new_data_superblock
-	ldr	r3, [sp, #4]
-	str	r3, [r8, #3004]
-.L2158:
-	ldr	r0, .L2197+8
+	ldr	r0, .L2125+16
+	str	sl, [r0, #2940]
+.L2081:
+	ldr	r0, .L2125+8
 	bl	allocate_new_data_superblock
-	ldr	r2, [r8, #3004]
-	ldr	r3, .L2197+20
-	cmp	r2, #0
-	movne	r7, r3
-	b	.L2159
-.L2157:
-	str	r1, [r8, #3004]
-	ldr	r1, .L2197+24
-	ldrh	r2, [r2, r1]
+	ldr	r1, .L2125+16
+	ldr	r3, .L2125+20
+	ldr	r2, [r1, #2940]
 	cmp	r2, #0
 	movne	r7, r3
-	bne	.L2159
+	b	.L2082
+.L2080:
+	ldr	ip, .L2125+16
+	str	r3, [ip, #2940]
+	ldr	r3, .L2125+24
+	ldrh	r3, [r8, r3]
+	cmp	r3, #0
+	subne	r7, r2, #2048
+	bne	.L2082
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-.L2159:
+.L2082:
 	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	bne	.L2160
+	bne	.L2083
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-.L2160:
-	ldr	r3, .L2197+4
-	str	r7, [r3, #408]
-.L2156:
-	ldr	r2, .L2197+4
-	mov	r8, r7
+.L2083:
+	str	r7, [r8, #408]
+.L2079:
+	ldr	r1, [r8, #-992]
+	mov	ip, #0
+	ldr	r2, [r5, #3960]
+	mov	sl, r7
 	ldrh	r3, [r7, #4]
-	ldr	r1, [r2, #-988]
-	ldr	r2, [r5, #3964]
 	rsb	r2, r2, r1
+	str	ip, [sp, #20]
 	cmp	r3, r2
 	movcc	r2, r3
-	ldr	r3, [sp, #16]
+	ldr	r3, [sp, #8]
 	cmp	r2, r3
 	movcc	r3, r2
 	str	r3, [sp, #36]
-	mov	r3, #0
-	str	r3, [sp, #28]
-	b	.L2161
-.L2177:
-	ldrh	r3, [r8, #4]
+	b	.L2084
+.L2100:
+	ldrh	r3, [sl, #4]
 	cmp	r3, #0
-	beq	.L2189
-	ldr	r7, [sp, #44]
-	rsb	r2, r7, r6
-	ldr	r7, [sp, #24]
-	rsbs	r3, r2, #0
-	adc	r3, r3, r2
-	tst	r3, r7
-	beq	.L2163
-	ldr	r7, [sp, #28]
-	cmp	r7, #0
-	beq	.L2163
-	movw	lr, #3918
-	ldr	r7, [sp, #32]
+	beq	.L2113
+	ldr	ip, [sp, #44]
+	rsb	r7, ip, r6
+	ldr	ip, [sp, #16]
+	rsbs	r3, r7, #0
+	adc	r3, r3, r7
+	tst	r3, ip
+	beq	.L2086
+	ldr	ip, [sp, #20]
+	cmp	ip, #0
+	beq	.L2086
+	movw	lr, #3914
+	ldr	ip, [sp, #28]
 	ldrh	r2, [r5, lr]
-	add	r1, r7, r4
+	add	r1, ip, r4
 	mls	r1, r2, r6, r1
 	cmp	r1, r2
-	bne	.L2189
-.L2163:
+	bne	.L2114
+.L2086:
 	add	r1, sp, #56
 	mov	r2, #0
 	mov	r0, r6
-	str	r3, [sp, #4]
+	str	r3, [sp, #0]
 	bl	log2phys
-	mov	r0, r8
+	mov	r0, sl
 	bl	get_new_active_ppa
-	ldr	lr, [r5, #3964]
-	ldr	r1, [r5, #3968]
-	movw	r2, #3924
+	ldr	lr, [r5, #3960]
+	ldr	r1, [r5, #3964]
 	mov	ip, #36
+	mov	r2, #3920
 	ldrh	r2, [r5, r2]
-	ldr	r7, .L2197+4
 	mla	r1, ip, lr, r1
-	mul	lr, lr, r2
-	ldr	r7, [r7, #-944]
-	bic	lr, lr, #3
-	str	r7, [sp, #52]
-	str	lr, [sp, #48]
-	add	r7, r7, lr
 	str	r6, [r1, #16]
-	str	r7, [r1, #12]
 	str	r0, [r1, #4]
-	movw	r0, #3922
-	ldrh	lr, [r5, r0]
-	ldr	r0, [r5, #3964]
-	mul	lr, r0, lr
-	ldr	r0, .L2197+4
+	mul	r0, lr, r2
+	bic	r0, r0, #3
+	str	r0, [sp, #48]
+	ldr	r0, [r8, #-948]
+	ldr	lr, [sp, #48]
+	str	r0, [sp, #52]
+	add	r7, r0, lr
+	movw	r0, #3918
+	ldr	lr, [r5, #3960]
+	ldrh	r0, [r5, r0]
+	str	r7, [r1, #12]
+	mul	lr, lr, r0
+	ldr	r0, [r8, #-968]
+	str	lr, [sp, #32]
 	bic	lr, lr, #3
-	str	lr, [sp, #12]
-	ldr	lr, [r0, #-964]
-	ldr	r0, [sp, #12]
-	add	lr, lr, r0
+	add	lr, r0, lr
 	mov	r0, r7
 	str	lr, [r1, #8]
 	mov	r1, #0
-	str	ip, [sp, #8]
+	str	ip, [sp, #4]
 	bl	ftl_memset
-	ldr	r1, [sp, #20]
-	ldr	ip, [sp, #8]
-	rsb	r3, r1, r6
-	rsbs	r1, r3, #0
-	adc	r1, r1, r3
-	ldr	r3, [sp, #4]
-	str	r1, [sp, #12]
-	orrs	r1, r1, r3
-	beq	.L2164
-	ldr	r2, [sp, #12]
-	cmp	r2, #0
-	beq	.L2165
-	movw	r3, #3918
+	ldr	r0, [sp, #12]
+	ldr	r3, [sp, #0]
+	rsb	lr, r0, r6
+	ldr	ip, [sp, #4]
+	rsbs	r0, lr, #0
+	adc	r0, r0, lr
+	str	r0, [sp, #32]
+	orrs	r0, r0, r3
+	beq	.L2087
+	ldr	ip, [sp, #32]
+	cmp	ip, #0
+	beq	.L2088
+	movw	lr, #3914
 	mov	r0, r4
-	ldrh	fp, [r5, r3]
+	ldrh	fp, [r5, lr]
 	mov	r1, fp
 	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #32]
+	ldr	r3, [sp, #28]
 	rsb	fp, r1, fp
 	str	r1, [sp, #40]
 	cmp	fp, r3
 	movcs	fp, r3
-	b	.L2166
-.L2165:
+	b	.L2089
+.L2088:
 	cmp	r3, #0
-	beq	.L2166
-	ldr	r3, [sp, #32]
-	movw	lr, #3918
-	add	fp, r3, r4
+	beq	.L2089
+	ldr	ip, [sp, #28]
+	movw	lr, #3914
 	ldrh	r3, [r5, lr]
+	add	fp, ip, r4
 	mls	fp, r3, r6, fp
-	ldr	r3, [sp, #12]
+	ldr	r3, [sp, #32]
 	str	r3, [sp, #40]
 	uxth	fp, fp
-.L2166:
-	movw	lr, #3918
-	ldrh	r3, [r5, lr]
+.L2089:
+	movw	ip, #3914
+	ldrh	r3, [r5, ip]
 	cmp	fp, r3
-	bne	.L2167
-	ldr	r3, [sp, #12]
-	ldr	r0, [sl, #3964]
+	bne	.L2090
+	ldr	r3, [sp, #32]
+	ldr	r0, [r9, #3960]
 	cmp	r3, #0
-	ldr	r2, [sl, #3968]
-	ldr	r3, [sp, #24]
+	ldr	r2, [r9, #3964]
+	ldr	r3, [sp, #16]
 	muleq	r1, r6, fp
-	movne	r1, r9
+	ldreq	ip, [sp, #24]
+	ldrne	r1, [sp, #24]
 	rsbeq	r1, r4, r1
-	addeq	r1, r9, r1, asl #9
+	addeq	r1, ip, r1, asl #9
 	cmp	r3, #0
 	mov	r3, #36
 	mla	r3, r3, r0, r2
 	strne	r1, [r3, #8]
-	bne	.L2170
+	bne	.L2093
 	ldr	r0, [r3, #8]
-	movw	r3, #3922
-	ldrh	r2, [sl, r3]
-	b	.L2195
-.L2167:
+	movw	r3, #3918
+	ldrh	r2, [r9, r3]
+	b	.L2123
+.L2090:
 	ldr	r2, [sp, #56]
 	mov	r3, #36
 	cmn	r2, #1
-	beq	.L2171
-	ldr	r1, [r5, #3964]
+	beq	.L2094
+	ldr	r1, [r5, #3960]
 	add	r0, sp, #60
 	str	r2, [sp, #64]
-	ldr	r2, [r5, #3968]
+	ldr	r2, [r5, #3964]
 	str	r6, [sp, #76]
 	mla	r3, r3, r1, r2
 	mov	r1, #1
@@ -19143,163 +18407,215 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #60]
 	cmn	r3, #1
-	ldr	r3, .L2197+4
-	ldreq	r2, [r3, #-1632]
-	addeq	r2, r2, #1
-	streq	r2, [r3, #-1632]
-	beq	.L2173
-	ldr	r2, [r7, #8]
-	cmp	r2, r6
-	beq	.L2173
-	ldr	r2, [r3, #-1632]
-	ldr	r0, .L2197+28
-	add	r2, r2, #1
-	str	r2, [r3, #-1632]
+	ldreq	r3, [r8, #-1636]
+	addeq	r3, r3, #1
+	streq	r3, [r8, #-1636]
+	beq	.L2096
+	ldr	r3, [r7, #8]
+	cmp	r3, r6
+	beq	.L2096
+	ldr	r3, [r8, #-1636]
 	mov	r2, r6
+	ldr	r0, .L2125+28
+	add	r3, r3, #1
+	str	r3, [r8, #-1636]
 	ldr	r1, [r7, #8]
 	bl	printk
-	b	.L2173
-.L2171:
-	ldr	r1, [r5, #3964]
-	ldr	r2, [r5, #3968]
+	b	.L2096
+.L2094:
+	ldr	r1, [r5, #3960]
+	ldr	r2, [r5, #3964]
 	mla	r3, r3, r1, r2
 	mov	r1, #0
 	ldr	r0, [r3, #8]
-	movw	r3, #3922
+	movw	r3, #3918
 	ldrh	r2, [r5, r3]
 	bl	ftl_memset
-.L2173:
-	ldr	r3, [sp, #12]
-	ldr	r1, [r5, #3964]
-	cmp	r3, #0
-	ldr	r2, [r5, #3968]
+.L2096:
+	ldr	ip, [sp, #32]
 	mov	r3, #36
-	movweq	lr, #3918
+	ldr	r1, [r5, #3960]
+	ldr	r2, [r5, #3964]
+	cmp	ip, #0
 	mla	r3, r3, r1, r2
-	ldreqh	r1, [r5, lr]
-	movne	r1, r9
-	mov	r2, fp, asl #9
-	muleq	r1, r1, r6
 	ldrne	r0, [r3, #8]
 	ldrne	r3, [sp, #40]
-	rsbeq	r1, r4, r1
-	ldreq	r0, [r3, #8]
+	ldrne	r1, [sp, #24]
 	addne	r0, r0, r3, asl #9
-	addeq	r1, r9, r1, asl #9
-	b	.L2195
-.L2164:
+	bne	.L2124
+.L2097:
+	movw	ip, #3914
+	ldr	r0, [r3, #8]
+	ldrh	r1, [r5, ip]
 	ldr	r3, [sp, #24]
-	ldr	r2, [r5, #3964]
+	mul	r1, r1, r6
+	rsb	r1, r4, r1
+	add	r1, r3, r1, asl #9
+.L2124:
+	mov	r2, fp, asl #9
+	b	.L2123
+.L2087:
+	ldr	r3, [sp, #16]
+	ldr	r2, [r5, #3960]
 	cmp	r3, #0
-	ldr	r3, [r5, #3968]
+	ldr	r3, [r5, #3964]
 	mla	ip, ip, r2, r3
-	beq	.L2175
-	movw	lr, #3918
+	beq	.L2098
+	movw	lr, #3914
+	ldr	r0, [sp, #24]
 	ldrh	r3, [r5, lr]
 	mul	r3, r3, r6
 	rsb	r3, r4, r3
-	add	r3, r9, r3, asl #9
+	add	r3, r0, r3, asl #9
 	str	r3, [ip, #8]
-	b	.L2170
-.L2175:
-	movw	r0, #3918
-	movw	r3, #3922
-	ldrh	r1, [r5, r0]
-	ldrh	r2, [r5, r3]
+	b	.L2093
+.L2098:
+	movw	r2, #3914
 	ldr	r0, [ip, #8]
+	ldrh	r1, [r5, r2]
+	movw	ip, #3918
+	ldr	r3, [sp, #24]
+	ldrh	r2, [r5, ip]
 	mul	r1, r1, r6
 	rsb	r1, r4, r1
-	add	r1, r9, r1, asl #9
-.L2195:
+	add	r1, r3, r1, asl #9
+.L2123:
 	bl	memcpy
-.L2170:
-	ldr	r3, .L2197+32
-	ldr	r0, [sp, #52]
-	ldr	lr, [sp, #48]
-	strh	r3, [r0, lr]	@ movhi
-	ldr	r3, .L2197+4
+.L2093:
+	ldr	r3, .L2125+32
+	ldr	lr, [sp, #52]
+	ldr	ip, [sp, #48]
+	strh	r3, [lr, ip]	@ movhi
+	ldr	r3, [r8, #-1848]
 	str	r6, [r7, #8]
 	add	r6, r6, #1
-	ldr	r2, [r3, #-1844]
-	str	r2, [r7, #4]
-	add	r2, r2, #1
-	cmn	r2, #1
-	str	r2, [r3, #-1844]
-	moveq	r2, #0
-	streq	r2, [r3, #-1844]
+	str	r3, [r7, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	str	r3, [r8, #-1848]
+	moveq	r3, #0
+	streq	r3, [r8, #-1848]
 	ldr	r3, [sp, #56]
 	str	r3, [r7, #12]
-	ldrh	r3, [r8, #0]
+	ldrh	r3, [sl, #0]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, [r5, #3964]
+	ldr	r3, [r5, #3960]
 	add	r3, r3, #1
-	str	r3, [r5, #3964]
-	ldr	r3, [sp, #28]
+	str	r3, [r5, #3960]
+	ldr	r3, [sp, #20]
 	add	r3, r3, #1
-	str	r3, [sp, #28]
-.L2161:
-	ldr	r7, [sp, #28]
+	str	r3, [sp, #20]
+.L2084:
+	ldr	ip, [sp, #20]
 	ldr	r3, [sp, #36]
-	cmp	r7, r3
-	bne	.L2177
-	mov	r7, r8
-	b	.L2162
-.L2189:
-	ldr	r3, [sp, #28]
-	mov	r7, r8
+	cmp	ip, r3
+	bne	.L2100
+	mov	r7, sl
+	b	.L2085
+.L2113:
+	ldr	ip, [sp, #20]
+	mov	r7, sl
+	str	ip, [sp, #36]
+	b	.L2085
+.L2114:
+	ldr	r3, [sp, #20]
+	mov	r7, sl
 	str	r3, [sp, #36]
-.L2162:
-	ldr	r3, [sp, #16]
-	ldr	lr, [sp, #36]
-	ldr	r2, [r5, #3964]
-	rsb	r3, lr, r3
-	str	r3, [sp, #16]
-	ldr	r3, .L2197+4
-	ldr	r0, [sp, #24]
-	ldr	r3, [r3, #-988]
+.L2085:
+	ldr	ip, [sp, #8]
+	ldr	r3, [sp, #36]
+	ldr	r2, [r5, #3960]
+	rsb	ip, r3, ip
+	ldr	r3, [r8, #-992]
+	str	ip, [sp, #8]
+	ldr	ip, [sp, #16]
 	cmp	r2, r3
-	orrcs	r0, r0, #1
-	uxtb	r3, r0
+	orrcs	ip, ip, #1
+	uxtb	r3, ip
 	cmp	r3, #0
-	bne	.L2178
+	bne	.L2101
 	ldrh	r2, [r7, #4]
 	cmp	r2, #0
-	bne	.L2192
-.L2178:
+	bne	.L2117
+.L2101:
 	bl	FtlCacheWriteBack
-	ldr	lr, [sp, #16]
+	ldr	ip, [sp, #8]
 	mov	r3, #0
-	str	r3, [sl, #3964]
-	cmp	lr, #3
-	ldr	r3, [sp, #24]
-	movls	r3, #0
-.L2192:
-	str	r3, [sp, #24]
-.L2194:
+	str	r3, [r9, #3960]
+	cmp	ip, #3
 	ldr	r3, [sp, #16]
+	movls	r3, #0
+.L2117:
+	str	r3, [sp, #16]
+.L2122:
+	ldr	r3, [sp, #8]
+	ldr	r2, .L2125+4
 	cmp	r3, #0
-	bne	.L2180
+	bne	.L2103
 	mov	r0, r3
-	ldr	r7, [sp, #44]
-	ldr	r3, [sp, #20]
-	rsb	r1, r3, r7
+	ldr	ip, [sp, #44]
+	ldr	r3, [sp, #12]
+	str	r2, [sp, #4]
+	rsb	r1, r3, ip
 	bl	rk_ftl_garbage_collect
-	ldr	r0, [sp, #16]
-.L2149:
+	ldr	r3, .L2125+36
+	ldr	r2, [sp, #4]
+	ldrh	r3, [r2, r3]
+	cmp	r3, #15
+	ldrhi	r0, [sp, #8]
+	bhi	.L2072
+	mov	r5, r2
+	movw	r6, #65535
+	mov	r4, r2
+.L2120:
+	ldr	r3, .L2125+40
+	ldrh	r3, [r5, r3]
+	cmp	r3, r6
+	bne	.L2104
+	ldr	r3, .L2125+44
+	ldrh	r3, [r5, r3]
+	cmp	r3, r6
+	bne	.L2104
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L2104:
+	ldr	r2, .L2125+48
+	mov	r3, #128
+	mov	r0, #1
+	mov	r1, r0
+	strh	r3, [r4, r2]	@ movhi
+	sub	r2, r2, #2
+	strh	r3, [r4, r2]	@ movhi
+	bl	rk_ftl_garbage_collect
+	mov	r0, #0
+	mov	r1, #1
+	bl	rk_ftl_garbage_collect
+	ldr	r3, .L2125+36
+	ldrh	r3, [r4, r3]
+	cmp	r3, #8
+	bls	.L2120
+	mov	r0, #0
+.L2072:
 	add	sp, sp, #100
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2198:
+.L2126:
 	.align	2
-.L2197:
+.L2125:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2-2044
+	.word	.LANCHOR2-2048
+	.word	-1996
 	.word	.LANCHOR1
-	.word	-1992
-	.word	.LANCHOR2-1996
-	.word	-2040
-	.word	.LC119
+	.word	.LANCHOR2-2000
+	.word	-2044
+	.word	.LC122
 	.word	-3947
+	.word	-2052
+	.word	-1760
+	.word	-1142
+	.word	-1194
 	.fnend
 	.size	FtlWrite, .-FtlWrite
 	.align	2
@@ -19340,25 +18656,25 @@ FtlRead:
 	mov	r4, r1
 	mov	r8, r3
 	str	r2, [sp, #28]
-	bne	.L2201
+	bne	.L2129
 	add	r0, r1, #256
 	mov	r1, r2
 	mov	r2, r3
 	bl	FtlVendorPartRead
 	str	r0, [sp, #16]
-	b	.L2202
-.L2201:
+	b	.L2130
+.L2129:
 	ldr	r3, [sp, #28]
 	add	r3, r3, r1
 	str	r3, [sp, #20]
-	ldr	r3, .L2231
+	ldr	r3, .L2159
 	ldr	r1, [sp, #20]
-	ldr	r2, [r3, #3952]
+	ldr	r2, [r3, #3948]
 	cmp	r1, r2
 	mvnhi	r3, #0
 	strhi	r3, [sp, #16]
-	bhi	.L2202
-	movw	r2, #3918
+	bhi	.L2130
+	movw	r2, #3914
 	mov	r0, r4
 	ldrh	r5, [r3, r2]
 	mov	r1, r5
@@ -19373,45 +18689,45 @@ FtlRead:
 	ldr	r1, [sp, #28]
 	add	r3, r3, r0
 	str	r3, [sp, #8]
-	ldr	r3, .L2231+4
+	ldr	r3, .L2159+4
 	mov	fp, r0
 	ldr	r0, [sp, #12]
-	ldr	r2, [r3, #-1852]
+	ldr	r2, [r3, #-1856]
 	add	r2, r1, r2
 	ldr	r1, [sp, #8]
-	str	r2, [r3, #-1852]
-	ldr	r2, [r3, #-1880]
+	str	r2, [r3, #-1856]
+	ldr	r2, [r3, #-1884]
 	add	r2, r1, r2
 	mov	r1, fp
-	str	r2, [r3, #-1880]
+	str	r2, [r3, #-1884]
 	bl	FtlCacheMetchLpa
 	cmp	r0, #0
-	beq	.L2203
+	beq	.L2131
 	bl	FtlCacheWriteBack
-.L2203:
+.L2131:
 	mov	r9, #0
 	ldr	r6, [sp, #12]
 	str	r9, [sp, #32]
 	mov	r5, r9
 	str	r9, [sp, #16]
-	ldr	r7, .L2231
-	b	.L2226
-.L2220:
+	ldr	r7, .L2159
+	b	.L2154
+.L2148:
 	mov	r2, #0
 	mov	r0, r6
 	add	r1, sp, #60
 	bl	log2phys
 	ldr	r2, [sp, #60]
 	cmn	r2, #1
-	bne	.L2227
-	b	.L2230
-.L2208:
+	bne	.L2155
+	b	.L2158
+.L2136:
 	mla	r0, r0, r6, sl
 	cmp	r0, r4
-	bcc	.L2207
+	bcc	.L2135
 	ldr	r2, [sp, #20]
 	cmp	r0, r2
-	bcs	.L2207
+	bcs	.L2135
 	rsb	r0, r4, r0
 	mov	r1, #0
 	mov	r2, #512
@@ -19419,28 +18735,28 @@ FtlRead:
 	add	r0, r8, r0, asl #9
 	bl	ftl_memset
 	ldr	r3, [sp, #4]
-.L2207:
+.L2135:
 	add	sl, sl, #1
-	b	.L2205
-.L2230:
+	b	.L2133
+.L2158:
 	mov	sl, #0
-	movw	r3, #3918
-.L2205:
+	movw	r3, #3914
+.L2133:
 	ldrh	r0, [r7, r3]
 	cmp	sl, r0
-	bcc	.L2208
-	b	.L2209
-.L2227:
-	ldr	r3, .L2231+4
+	bcc	.L2136
+	b	.L2137
+.L2155:
+	ldr	r3, .L2159+4
 	mov	sl, #36
-	ldr	r1, [r3, #-984]
+	ldr	r1, [r3, #-988]
 	mla	sl, sl, r5, r1
 	ldr	r1, [sp, #12]
 	cmp	r6, r1
 	str	r2, [sl, #4]
-	movw	r2, #3918
-	bne	.L2210
-	ldr	r3, [r3, #-960]
+	movw	r2, #3914
+	bne	.L2138
+	ldr	r3, [r3, #-964]
 	mov	r0, r4
 	str	r3, [sl, #8]
 	ldrh	r3, [r7, r2]
@@ -19456,52 +18772,52 @@ FtlRead:
 	str	r1, [sp, #32]
 	cmp	r1, r3
 	streq	r8, [sl, #8]
-	b	.L2211
-.L2210:
+	b	.L2139
+.L2138:
 	cmp	r6, fp
 	ldrneh	r3, [r7, r2]
 	mulne	r3, r3, r6
-	bne	.L2228
-	ldr	r3, [r3, #-956]
+	bne	.L2156
+	ldr	r3, [r3, #-960]
 	ldrh	r2, [r7, r2]
 	ldr	r1, [sp, #20]
 	str	r3, [sl, #8]
 	mul	r3, r2, r6
 	rsb	r9, r3, r1
 	cmp	r9, r2
-	bne	.L2211
-.L2228:
+	bne	.L2139
+.L2156:
 	rsb	r3, r4, r3
 	add	r3, r8, r3, asl #9
 	str	r3, [sl, #8]
-.L2211:
-	movw	r3, #3924
-	ldr	r2, .L2231+4
+.L2139:
+	mov	r3, #3920
+	ldr	r2, .L2159+4
 	ldrh	r3, [r7, r3]
 	str	r6, [sl, #16]
-	ldr	r2, [r2, #-948]
+	ldr	r2, [r2, #-952]
 	mul	r3, r3, r5
 	add	r5, r5, #1
 	bic	r3, r3, #3
 	add	r3, r2, r3
 	str	r3, [sl, #12]
-.L2209:
+.L2137:
 	ldr	r3, [sp, #8]
 	add	r6, r6, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #8]
-	beq	.L2213
-	movw	r3, #3844
+	beq	.L2141
+	mov	r3, #3840
 	ldrh	r3, [r7, r3]
 	cmp	r5, r3, asl #3
-	bne	.L2226
-.L2213:
+	bne	.L2154
+.L2141:
 	cmp	r5, #0
-	beq	.L2226
-	ldr	sl, .L2231+4
+	beq	.L2154
+	ldr	sl, .L2159+4
 	mov	r1, r5
 	mov	r2, #0
-	ldr	r0, [sl, #-984]
+	ldr	r0, [sl, #-988]
 	bl	FlashReadPages
 	ldr	r3, [sp, #36]
 	str	r6, [sp, #52]
@@ -19515,86 +18831,86 @@ FtlRead:
 	str	r3, [sp, #48]
 	mov	r3, #0
 	str	r3, [sp, #24]
-.L2219:
+.L2147:
 	ldr	r3, [sp, #24]
 	mov	r5, #36
 	ldr	r1, [sp, #12]
 	mul	r5, r5, r3
-	ldr	r3, [sl, #-984]
+	ldr	r3, [sl, #-988]
 	add	r3, r3, r5
 	ldr	r2, [r3, #16]
 	cmp	r2, r1
-	bne	.L2215
+	bne	.L2143
 	ldr	r1, [r3, #8]
-	ldr	r3, [sl, #-960]
+	ldr	r3, [sl, #-964]
 	cmp	r1, r3
-	bne	.L2216
+	bne	.L2144
 	ldr	r3, [sp, #40]
 	mov	r0, r8
 	ldr	r2, [sp, #44]
 	add	r1, r1, r3
-	b	.L2229
-.L2215:
+	b	.L2157
+.L2143:
 	cmp	r2, fp
-	bne	.L2216
+	bne	.L2144
 	ldr	r1, [r3, #8]
-	ldr	r3, [sl, #-956]
+	ldr	r3, [sl, #-960]
 	cmp	r1, r3
-	bne	.L2216
-	movw	r2, #3918
+	bne	.L2144
+	movw	r2, #3914
 	ldrh	r0, [r7, r2]
 	ldr	r2, [sp, #48]
 	mul	r0, r0, fp
 	rsb	r0, r4, r0
 	add	r0, r8, r0, asl #9
-.L2229:
+.L2157:
 	bl	memcpy
-.L2216:
-	ldr	r3, [sl, #-984]
+.L2144:
+	ldr	r3, [sl, #-988]
 	add	r0, r3, r5
 	ldr	r2, [r3, r5]
 	cmn	r2, #1
 	streq	r2, [sp, #16]
-	ldreq	r1, [sl, #-1632]
+	ldreq	r1, [sl, #-1636]
 	addeq	r1, r1, #1
-	streq	r1, [sl, #-1632]
+	streq	r1, [sl, #-1636]
 	ldr	r3, [r3, r5]
 	cmp	r3, #256
-	bne	.L2218
+	bne	.L2146
 	ldr	r0, [r0, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L2218:
+.L2146:
 	ldr	r3, [sp, #24]
 	add	r3, r3, #1
 	str	r3, [sp, #24]
 	cmp	r3, r6
-	bne	.L2219
+	bne	.L2147
 	ldr	r6, [sp, #52]
 	mov	r5, #0
-.L2226:
+.L2154:
 	ldr	r3, [sp, #8]
 	cmp	r3, #0
-	bne	.L2220
-	ldr	r3, .L2231+8
-	ldr	r2, .L2231+4
+	bne	.L2148
+	ldr	r3, .L2159+8
+	ldr	r2, .L2159+4
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L2202
+	beq	.L2130
 	ldr	r0, [sp, #8]
 	mov	r1, #1
 	bl	rk_ftl_garbage_collect
-.L2202:
+.L2130:
 	ldr	r0, [sp, #16]
 	add	sp, sp, #68
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2232:
+.L2160:
 	.align	2
-.L2231:
+.L2159:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1134
+	.word	-1138
 	.fnend
 	.size	FtlRead, .-FtlRead
 	.align	2
@@ -19624,6 +18940,35 @@ StorageSysDataLoad:
 	.fnend
 	.size	StorageSysDataLoad, .-StorageSysDataLoad
 	.align	2
+	.type	rk_ftl_vendor_ops.constprop.20, %function
+rk_ftl_vendor_ops.constprop.20:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r6, r2
+	mov	r5, r1
+	bl	rknand_device_lock
+	cmp	r6, #0
+	mov	r0, #16
+	mov	r1, r5
+	mov	r2, #128
+	mov	r3, r4
+	beq	.L2163
+	bl	FtlWrite
+	b	.L2165
+.L2163:
+	bl	FtlRead
+.L2165:
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	rk_ftl_vendor_ops.constprop.20, .-rk_ftl_vendor_ops.constprop.20
+	.align	2
 	.global	FlashLoadFactorBbt
 	.type	FlashLoadFactorBbt, %function
 FlashLoadFactorBbt:
@@ -19632,10 +18977,10 @@ FlashLoadFactorBbt:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r2, #2214
-	ldr	r9, .L2243
-	movw	r3, #2212
-	ldr	r4, .L2243+4
+	movw	r2, #3062
+	ldr	r9, .L2175
+	movw	r3, #3060
+	ldr	r4, .L2175+4
 	.pad #52
 	sub	sp, sp, #52
 	mov	r1, #0
@@ -19647,7 +18992,7 @@ FlashLoadFactorBbt:
 	mov	r6, #0
 	mul	r8, r8, r3
 	bl	ftl_memset
-	ldr	r3, [r4, #148]
+	ldr	r3, [r4, #204]
 	str	r6, [sp, #20]
 	mov	r4, r6
 	str	r3, [sp, #24]
@@ -19655,14 +19000,14 @@ FlashLoadFactorBbt:
 	add	r3, r8, r7
 	uxth	r3, r3
 	str	r3, [sp, #4]
-	b	.L2235
-.L2241:
+	b	.L2167
+.L2173:
 	ldr	r5, [sp, #4]
-	sub	r3, r8, #8
+	sub	r3, r8, #12
 	mul	fp, r8, r4
-	ldr	sl, .L2243+4
-	b	.L2236
-.L2239:
+	ldr	sl, .L2175+4
+	b	.L2168
+.L2171:
 	add	r2, fp, r5
 	mov	r1, #1
 	add	r0, sp, #12
@@ -19674,47 +19019,47 @@ FlashLoadFactorBbt:
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #0]
 	cmn	r2, #1
-	beq	.L2237
-	ldr	r2, [sl, #148]
+	beq	.L2169
+	ldr	r2, [sl, #204]
 	ldrh	r1, [r2, #0]
 	movw	r2, #61664
 	cmp	r1, r2
-	bne	.L2237
-	ldr	r0, .L2243+8
+	bne	.L2169
+	ldr	r0, .L2175+8
 	mov	r1, r4
 	mov	r2, r5
 	add	r6, r6, #1
 	bl	printk
-	ldr	r3, .L2243+4
+	ldr	r3, .L2175+4
 	uxth	r6, r6
 	add	r3, r3, r4, asl #1
 	strh	r5, [r3, #208]	@ movhi
-	b	.L2238
-.L2237:
+	b	.L2170
+.L2169:
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L2236:
+.L2168:
 	cmp	r5, r3
-	bgt	.L2239
-.L2238:
-	ldrb	r3, [r9, #3766]	@ zero_extendqisi2
+	bgt	.L2171
+.L2170:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
 	add	r4, r4, #1
 	cmp	r3, r6
 	uxtb	r4, r4
 	moveq	r7, #0
-.L2235:
-	ldrb	r3, [r9, #3766]	@ zero_extendqisi2
+.L2167:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
 	cmp	r3, r4
-	bhi	.L2241
+	bhi	.L2173
 	mov	r0, r7
 	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2244:
+.L2176:
 	.align	2
-.L2243:
+.L2175:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC120
+	.word	.LC123
 	.fnend
 	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
 	.align	2
@@ -19724,31 +19069,31 @@ FlashReadFacBbtData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2255
+	ldr	r3, .L2187
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r6, r1
 	mov	r9, r2
-	movw	r1, #2214
-	movw	r2, #2212
+	movw	r1, #3062
+	movw	r2, #3060
 	ldrh	r8, [r3, r1]
 	ldrh	r2, [r3, r2]
 	.pad #40
 	sub	sp, sp, #40
-	ldr	r3, [r3, #3780]
+	ldr	r7, .L2187+4
 	mov	r4, r0
-	ldr	r7, .L2255+4
 	mul	r8, r8, r2
+	ldr	r3, [r7, #124]
 	str	r3, [sp, #12]
-	ldr	r3, [r7, #148]
-	str	r3, [sp, #16]
+	ldr	r3, [r7, #204]
 	uxth	r8, r8
 	sub	r5, r8, #1
 	mul	sl, r8, r6
+	str	r3, [sp, #16]
 	uxth	r5, r5
 	sub	r8, r8, #16
-	b	.L2246
-.L2252:
+	b	.L2178
+.L2184:
 	mov	r1, #1
 	add	r3, r5, sl
 	add	r0, sp, #4
@@ -19758,65 +19103,62 @@ FlashReadFacBbtData:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	cmn	r3, #1
-	beq	.L2247
-	ldr	r3, [r7, #148]
+	beq	.L2179
+	ldr	r3, [r7, #204]
 	ldrh	r2, [r3, #0]
 	movw	r3, #61664
 	cmp	r2, r3
-	bne	.L2247
+	bne	.L2179
 	cmp	r4, #0
 	moveq	r0, r4
-	beq	.L2248
+	beq	.L2180
 	cmp	r6, #0
-	beq	.L2254
-	b	.L2250
-.L2251:
-	ldr	r3, [r0, #3780]
-	ubfx	r2, r6, #5, #16
-	and	r5, r6, #31
+	ldreq	r3, .L2187+4
+	moveq	r0, #1
+	beq	.L2181
+	b	.L2182
+.L2183:
+	ldr	r2, [r3, #124]
+	ubfx	r1, r6, #5, #16
+	and	lr, r6, #31
 	add	r6, r6, #1
-	ldr	lr, [r3, r2, asl #2]
+	ldr	ip, [r2, r1, asl #2]
 	uxth	r6, r6
-	orr	lr, lr, r1, asl r5
-	str	lr, [r3, r2, asl #2]
-	b	.L2249
-.L2254:
-	ldr	ip, .L2255+4
-	mov	r1, #1
-	ldr	r0, .L2255
-.L2249:
-	ldr	r3, [ip, #132]
-	cmp	r6, r3
-	bcc	.L2251
-.L2250:
-	ldr	r3, .L2255
+	orr	ip, ip, r0, asl lr
+	str	ip, [r2, r1, asl #2]
+.L2181:
+	ldr	r2, [r3, #132]
+	cmp	r6, r2
+	bcc	.L2183
+.L2182:
+	ldr	r3, .L2187+4
 	mov	r2, r9
 	mov	r0, r4
-	ldr	r1, [r3, #3780]
+	ldr	r1, [r3, #124]
 	bl	memcpy
 	mov	r2, #4
-	ldr	r0, .L2255+8
+	ldr	r0, .L2187+8
 	mov	r1, r4
 	mov	r3, r2
 	bl	rknand_print_hex
 	mov	r0, #0
-	b	.L2248
-.L2247:
+	b	.L2180
+.L2179:
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L2246:
+.L2178:
 	cmp	r5, r8
-	bgt	.L2252
+	bgt	.L2184
 	mvn	r0, #0
-.L2248:
+.L2180:
 	add	sp, sp, #40
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L2256:
+.L2188:
 	.align	2
-.L2255:
+.L2187:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC121
+	.word	.LC124
 	.fnend
 	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
 	.align	2
@@ -19826,30 +19168,30 @@ FlashGetBadBlockList:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2264
+	ldr	r3, .L2196
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r5, r0
-	ldr	r3, [r3, #2776]
-	ldr	r6, .L2264+4
+	ldr	r3, [r3, #3624]
+	ldr	r6, .L2196+4
 	ldrb	r2, [r3, #13]	@ zero_extendqisi2
 	ldrh	r4, [r3, #14]
-	ldr	r0, [r6, #116]
+	ldr	r0, [r6, #112]
 	mul	r4, r4, r2
 	uxth	r4, r4
 	add	r2, r4, #7
 	mov	r2, r2, lsr #3
 	bl	FlashReadFacBbtData
 	cmn	r0, #1
-	beq	.L2263
+	beq	.L2195
 	mov	r2, #0
 	mov	r0, r4, lsr #4
 	mov	r3, r2
 	sub	r4, r4, #1
 	mov	r1, #1
-	b	.L2259
-.L2261:
-	ldr	ip, [r6, #116]
+	b	.L2191
+.L2193:
+	ldr	ip, [r6, #112]
 	mov	r8, r2, lsr #5
 	and	r7, r2, #31
 	ldr	ip, [ip, r8, asl #2]
@@ -19859,24 +19201,24 @@ FlashGetBadBlockList:
 	uxthne	r3, r3
 	strneh	r2, [r5, ip]	@ movhi
 	cmp	r3, r0
-	bcs	.L2263
+	bcs	.L2195
 	add	r2, r2, #1
 	uxth	r2, r2
-.L2259:
+.L2191:
 	cmp	r2, r4
-	blt	.L2261
-	b	.L2258
-.L2263:
+	blt	.L2193
+	b	.L2190
+.L2195:
 	mov	r3, #0
-.L2258:
+.L2190:
 	mov	r3, r3, asl #1
 	mvn	r2, #0
 	mov	r0, #0
 	strh	r2, [r5, r3]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2265:
+.L2197:
 	.align	2
-.L2264:
+.L2196:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -19892,61 +19234,62 @@ FtlMakeBbt:
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	bl	FtlBbtMemInit
 	mov	r5, #0
-	ldr	r7, .L2283
+	ldr	r7, .L2215
 	bl	FtlLoadFactoryBbt
-	ldr	r6, .L2283+4
+	ldr	r6, .L2215+4
 	add	sl, r7, #12
-	ldr	r4, .L2283+8
-	b	.L2267
-.L2273:
+	ldr	r4, .L2215+8
+	b	.L2199
+.L2205:
 	ldrh	r3, [sl], #2
 	movw	r2, #65535
-	ldr	r0, [r4, #-2076]
-	movw	fp, #3908
-	ldr	r9, [r4, #-952]
+	ldr	r0, [r4, #-2080]
+	ldr	r9, [r4, #-956]
 	cmp	r3, r2
-	str	r0, [r4, #176]
-	str	r9, [r4, #180]
-	beq	.L2268
-	ldrh	r8, [r6, fp]
+	str	r0, [r4, #164]
+	str	r9, [r4, #168]
+	beq	.L2200
+	mov	r9, #3904
 	mov	r1, #1
+	ldrh	r8, [r6, r9]
 	mov	r2, r1
-	ldr	r0, .L2283+12
+	ldr	r0, .L2215+12
 	mla	r8, r8, r5, r3
 	mov	r3, r8, asl #10
-	str	r3, [r4, #172]
+	str	r3, [r4, #160]
 	bl	FlashReadPages
-	ldrh	r2, [r6, fp]
+	ldrh	r2, [r6, r9]
 	ldr	r0, [r7, #28]
 	add	r2, r2, #7
-	ldr	r1, [r4, #176]
+	ldr	r1, [r4, #164]
 	mov	r2, r2, lsr #3
 	bl	memcpy
-	b	.L2269
-.L2268:
+	b	.L2201
+.L2200:
 	mov	r1, r5
 	bl	FlashGetBadBlockList
-	ldr	r0, [r4, #176]
+	ldr	r0, [r4, #164]
 	ldr	r1, [r7, #28]
 	bl	FtlBbt2Bitmap
-	ldrh	fp, [r6, fp]
-.L2271:
+	mov	r3, #3904
+	ldrh	fp, [r6, r3]
+.L2203:
 	sub	fp, fp, #1
 	uxth	fp, fp
-.L2282:
-	movw	r8, #3908
+.L2214:
+	mov	r8, #3904
 	ldrh	r0, [r6, r8]
 	mla	r0, r0, r5, fp
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L2271
+	beq	.L2203
 	mov	r1, #0
 	mov	r2, #16
 	strh	fp, [sl, #-2]	@ movhi
-	ldr	r0, [r4, #-952]
+	ldr	r0, [r4, #-956]
 	bl	ftl_memset
-	ldr	r3, .L2283+16
+	ldr	r3, .L2215+16
 	strh	r3, [r9, #0]	@ movhi
 	mov	r3, #0
 	str	r3, [r9, #4]
@@ -19955,99 +19298,99 @@ FtlMakeBbt:
 	strh	r3, [r9, #2]	@ movhi
 	ldrh	r3, [sl, #-2]
 	ldr	r1, [r7, #28]
-	ldr	r0, [r4, #176]
+	ldr	r0, [r4, #164]
 	mla	r8, r8, r5, r3
 	mov	r3, r8, asl #10
-	str	r3, [r4, #172]
-	ldr	r3, .L2283+20
+	str	r3, [r4, #160]
+	ldr	r3, .L2215+20
 	ldrh	r2, [r4, r3]
 	mov	r2, r2, asl #2
 	bl	memcpy
 	mov	r1, #1
 	mov	r2, r1
-	ldr	r0, .L2283+12
+	ldr	r0, .L2215+12
 	bl	FlashEraseBlocks
 	mov	r1, #1
 	mov	r3, r1
-	ldr	r0, .L2283+12
+	ldr	r0, .L2215+12
 	mov	r2, r1
 	bl	FlashProgPages
-	ldr	r3, [r4, #168]
+	ldr	r3, [r4, #156]
 	cmn	r3, #1
-	bne	.L2269
+	bne	.L2201
 	uxth	r0, r8
 	bl	FtlBbmMapBadBlock
-	b	.L2282
-.L2269:
+	b	.L2214
+.L2201:
 	uxth	r0, r8
 	add	r5, r5, #1
 	bl	FtlBbmMapBadBlock
 	add	r7, r7, #4
-.L2267:
-	movw	r3, #3866
+.L2199:
+	movw	r3, #3862
 	ldrh	r3, [r6, r3]
 	cmp	r5, r3
-	bcc	.L2273
+	bcc	.L2205
 	mov	r4, #0
-	ldr	r7, .L2283+4
-	movw	r6, #3926
-	b	.L2274
-.L2275:
+	ldr	r7, .L2215+4
+	movw	r6, #3922
+	b	.L2206
+.L2207:
 	mov	r0, r4
 	add	r4, r4, #1
 	bl	FtlBbmMapBadBlock
 	uxth	r4, r4
-.L2274:
+.L2206:
 	ldrh	r3, [r7, r6]
-	ldr	r5, .L2283+4
+	ldr	r5, .L2215+4
 	cmp	r3, r4
-	bhi	.L2275
-	movw	r7, #3992
-	movw	r6, #3980
+	bhi	.L2207
+	movw	r7, #3988
+	movw	r6, #3976
 	ldrh	r4, [r5, r7]
 	sub	r4, r4, #1
 	uxth	r4, r4
-	b	.L2276
-.L2281:
+	b	.L2208
+.L2213:
 	mov	r0, r4
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L2277
+	beq	.L2209
 	mov	r0, r4
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L2278
+	beq	.L2210
 	mov	r0, r4
 	bl	FtlBbmMapBadBlock
-	b	.L2277
-.L2278:
+	b	.L2209
+.L2210:
 	ldrh	r2, [r5, r6]
 	movw	r3, #65535
 	cmp	r2, r3
 	streqh	r4, [r5, r6]	@ movhi
-.L2279:
-	ldrne	r2, .L2283+4
-	movne	r3, #3984
+.L2211:
+	ldrne	r2, .L2215+4
+	movwne	r3, #3980
 	strneh	r4, [r2, r3]	@ movhi
-	bne	.L2280
-.L2277:
+	bne	.L2212
+.L2209:
 	sub	r4, r4, #1
 	uxth	r4, r4
-.L2276:
+.L2208:
 	ldrh	r3, [r5, r7]
 	sub	r3, r3, #48
 	cmp	r4, r3
-	bgt	.L2281
-.L2280:
-	ldr	r4, .L2283+4
-	movw	r7, #3980
-	ldr	r3, .L2283+8
-	mov	r6, #3984
+	bgt	.L2213
+.L2212:
+	ldr	r4, .L2215+4
+	movw	r7, #3976
+	ldr	r3, .L2215+8
+	movw	r6, #3980
 	mov	r5, #0
-	movw	r8, #3982
-	str	r5, [r4, #3988]
+	movw	r8, #3978
+	str	r5, [r4, #3984]
 	mov	r1, #1
-	ldr	r0, [r3, #-2088]
+	ldr	r0, [r3, #-2092]
 	mov	r2, #2
 	ldrh	r3, [r4, r7]
 	strh	r5, [r4, r8]	@ movhi
@@ -20062,10 +19405,10 @@ FtlMakeBbt:
 	ldrh	r0, [r4, r6]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #3988]
+	ldr	r3, [r4, #3984]
 	ldrh	r2, [r4, r6]
 	add	r3, r3, #1
-	str	r3, [r4, #3988]
+	str	r3, [r4, #3984]
 	ldrh	r3, [r4, r7]
 	strh	r5, [r4, r8]	@ movhi
 	strh	r2, [r4, r7]	@ movhi
@@ -20073,341 +19416,1504 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2284:
+.L2216:
+	.align	2
+.L2215:
+	.word	.LANCHOR0+3976
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+156
+	.word	-3872
+	.word	-1036
+	.fnend
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r2, #0
+	ldr	r3, .L2238
+	str	r2, [r3, #-1852]
+	str	r2, [r3, #-1848]
+	ldr	r3, .L2238+4
+	ldr	r0, [r3, #3844]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	beq	.L2218
+	bl	FtlMakeBbt
+.L2218:
+	mov	r3, #0
+	ldr	ip, .L2238+4
+	movw	r0, #3914
+	ldr	r2, .L2238
+	ldr	r1, .L2238+8
+	b	.L2219
+.L2220:
+	ldr	lr, [r2, #-964]
+	mvn	r4, r3
+	orr	r4, r3, r4, asl #16
+	str	r4, [lr, r3, asl #2]
+	ldr	lr, [r2, #-960]
+	str	r1, [lr, r3, asl #2]
+	add	r3, r3, #1
+	uxth	r3, r3
+.L2219:
+	ldrh	lr, [ip, r0]
+	ldr	r8, .L2238+4
+	cmp	r3, lr, asl #7
+	blt	.L2220
+	movw	r3, #3848
+	mov	r5, #0
+	ldrh	r6, [r8, r3]
+	movw	r7, #3850
+	b	.L2221
+.L2222:
+	mov	r0, r6
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r5, r5, r0
+	uxth	r5, r5
+.L2221:
+	ldrh	r3, [r8, r7]
+	ldr	r4, .L2238+4
+	cmp	r3, r6
+	bhi	.L2222
+	mov	r3, #3840
+	ldrh	r1, [r4, r3]
+	sub	r3, r5, #3
+	cmp	r3, r1, asl #1
+	bge	.L2223
+.L2227:
+	mov	r4, #0
+	ldr	r8, .L2238+4
+	mov	r6, r4
+	movw	r7, #3848
+	b	.L2224
+.L2223:
+	mov	r0, r5
+	movw	r6, #3850
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #3940]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldr	r0, [r4, #3844]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	movw	r3, #3848
+	ldrh	r5, [r4, r3]
+	b	.L2225
+.L2226:
+	mov	r0, r5
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r5, r5, #1
+	uxth	r5, r5
+.L2225:
+	ldrh	r3, [r4, r6]
+	cmp	r3, r5
+	bhi	.L2226
+	b	.L2227
+.L2228:
+	mov	r0, r6
+	mov	r1, #0
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r4, r4, r0
+	uxth	r4, r4
+.L2224:
+	ldrh	r3, [r8, r7]
+	ldr	r5, .L2238+4
+	cmp	r3, r6
+	bhi	.L2228
+	movw	r3, #3850
+	ldr	fp, [r5, #3852]
+	ldrh	r3, [r5, r3]
+	ldr	r9, .L2238
+	mov	r0, fp
+	ldr	sl, .L2238+12
+	str	r3, [r5, #3972]
+	mov	r3, #3840
+	ldrh	r6, [r5, r3]
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ubfx	r8, r0, #5, #16
+	mov	r7, r0
+	add	r3, r8, #36
+	strh	r3, [r9, sl]	@ movhi
+	mov	r3, #24
+	str	r0, [r5, #3968]
+	mul	r3, r3, r6
+	cmp	r4, r3
+	ble	.L2229
+	rsb	r0, r4, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	str	r0, [r5, #3968]
+	mov	r0, r0, lsr #5
+	add	r0, r0, #24
+	strh	r0, [r9, sl]	@ movhi
+.L2229:
+	ldr	r5, .L2238
+	ldr	r3, [r5, #-1888]
+	cmp	r3, #1
+	bne	.L2230
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	sl, .L2238+12
+	ldrh	r9, [r5, sl]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [r5, sl]	@ movhi
+.L2230:
+	ldr	r3, .L2238+4
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2231
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	sl, .L2238
+	ldr	r5, .L2238+12
+	ldrh	r9, [sl, r5]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [sl, r5]	@ movhi
+.L2231:
+	ldr	r0, .L2238+4
+	movw	r3, #3900
+	ldrh	r3, [r0, r3]
+	cmp	r3, #0
+	beq	.L2232
+	ldr	r1, .L2238
+	ldr	r2, .L2238+12
+	ldrh	ip, [r1, r2]
+	add	ip, ip, r3, lsr #1
+	strh	ip, [r1, r2]	@ movhi
+	mul	ip, r6, r3
+	cmp	ip, r4
+	strgt	r7, [r0, #3968]
+	addgt	r3, r3, #32
+	addgt	r8, r8, r3
+	strgth	r8, [r1, r2]	@ movhi
+.L2232:
+	ldr	r4, .L2238
+	ldr	r5, .L2238+4
+	ldr	r3, .L2238+12
+	ldr	r2, [r5, #3968]
+	ldrh	r3, [r4, r3]
+	rsb	r3, r3, r2
+	mul	r6, r6, r3
+	movw	r3, #3908
+	ldrh	r3, [r5, r3]
+	str	r6, [r4, #192]
+	mul	r6, r3, r6
+	movw	r3, #3914
+	ldrh	r3, [r5, r3]
+	str	r6, [r5, #3968]
+	mul	r6, r3, r6
+	str	r6, [r5, #3948]
+	bl	FtlBbmTblFlush
+	movw	r3, #3850
+	ldrh	r2, [r5, r3]
+	mov	r1, #0
+	ldr	r0, [r4, #-2068]
+	ldr	r6, .L2238+16
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r2, .L2238+20
+	mvn	r1, #0
+	mov	r3, #0
+	str	r3, [r4, #-1896]
+	strh	r1, [r4, r2]	@ movhi
+	ldr	r1, .L2238+24
+	strb	r3, [r4, #-1754]
+	strb	r3, [r4, #-1752]
+	strh	r3, [r4, r1]	@ movhi
+	sub	r1, r1, #288
+	strb	r3, [r4, #-2042]
+	strh	r3, [r4, r1]	@ movhi
+	mov	r1, #255
+	strh	r3, [r4, r6]	@ movhi
+	mov	r3, #1
+	strb	r3, [r4, #-2040]
+	movw	r3, #3848
+	ldrh	r2, [r5, r3]
+	ldr	r0, [r4, #-1892]
+	mov	r2, r2, lsr #3
+	bl	ftl_memset
+.L2233:
+	ldr	r5, .L2238
+	sub	r0, r5, #2048
+	bl	make_superblock
+	ldrb	r3, [r4, #-2041]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2234
+	ldrh	r3, [r4, r6]
+	mvn	r1, #0
+	ldr	r2, [r4, #-2068]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r3, [r4, r6]
+	add	r3, r3, #1
+	strh	r3, [r4, r6]	@ movhi
+	b	.L2233
+.L2234:
+	ldr	r3, [r5, #-1852]
+	ldr	r1, [r5, #-2068]
+	ldr	r6, .L2238+28
+	str	r3, [r5, #-2036]
+	add	r3, r3, #1
+	str	r3, [r5, #-1852]
+	ldr	r3, .L2238+32
+	ldrh	r0, [r5, r3]
+	ldr	r3, .L2238+16
+	ldrh	r2, [r5, r3]
+	mov	r2, r2, asl #1
+	strh	r0, [r1, r2]	@ movhi
+	mov	r2, #0
+	ldr	r0, .L2238+36
+	ldrh	r3, [r5, r3]
+	strb	r2, [r5, #-1994]
+	add	r3, r3, #1
+	strh	r2, [r5, r0]	@ movhi
+	strh	r3, [r5, r6]	@ movhi
+	mov	r3, #1
+	strb	r3, [r5, #-1992]
+.L2235:
+	ldr	r4, .L2238
+	sub	r0, r4, #2000
+	bl	make_superblock
+	ldrb	r3, [r5, #-1993]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2236
+	ldrh	r3, [r5, r6]
+	mvn	r1, #0
+	ldr	r2, [r5, #-2068]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r3, [r5, r6]
+	add	r3, r3, #1
+	strh	r3, [r5, r6]	@ movhi
+	b	.L2235
+.L2236:
+	ldr	r3, [r4, #-1852]
+	mvn	r5, #0
+	ldr	r2, [r4, #-2068]
+	str	r3, [r4, #-1988]
+	add	r3, r3, #1
+	str	r3, [r4, #-1852]
+	ldr	r3, .L2238+40
+	ldrh	r1, [r4, r3]
+	ldr	r3, .L2238+28
+	ldrh	r3, [r4, r3]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, .L2238+44
+	strh	r5, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, .L2238+48
+	mov	r2, #0
+	strh	r0, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	ldr	r2, [r4, #192]
+	strh	r5, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r3, [r4, #-1852]
+	str	r3, [r4, #-1764]
+	add	r3, r3, #1
+	str	r3, [r4, #-1852]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	mov	r0, #0
+	ldreq	r3, .L2238+52
+	moveq	r2, #1
+	streq	r2, [r3, #2932]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2239:
+	.align	2
+.L2238:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	168778952
+	.word	-1776
+	.word	-2048
+	.word	-1760
+	.word	-1758
+	.word	-2000
+	.word	-2044
+	.word	-1998
+	.word	-1996
+	.word	-1952
+	.word	-1772
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2325
+	mvn	r2, #83
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r0
+	cmp	r4, #2
+	strb	r0, [r3, #0]
+	strb	r2, [r3, #4]
+	mvn	r0, #82
+	mvn	r1, #81
+	mvn	r2, #80
+	.pad #68
+	sub	sp, sp, #68
+	strb	r0, [r3, #5]
+	strb	r1, [r3, #6]
+	strb	r2, [r3, #7]
+	bne	.L2241
+	mvn	r2, #88
+	strb	r2, [r3, #4]
+	ldr	r3, .L2325+4
+	mvn	r2, #8
+	strb	r2, [r3, #2961]
+	b	.L2297
+.L2241:
+	cmp	r4, #3
+	bne	.L2243
+	mvn	r2, #79
+	strb	r2, [r3, #4]
+	mvn	r2, #78
+	strb	r2, [r3, #5]
+	mvn	r2, #77
+	strb	r2, [r3, #6]
+	mvn	r2, #76
+	strb	r2, [r3, #7]
+	mvn	r2, #75
+	strb	r2, [r3, #8]
+	mvn	r2, #74
+	strb	r2, [r3, #9]
+	mvn	r2, #73
+	strb	r2, [r3, #10]
+	mvn	r2, #72
+	b	.L2320
+.L2243:
+	cmp	r4, #4
+	bne	.L2244
+	mvn	ip, #51
+	strb	r0, [r3, #9]
+	strb	ip, [r3, #4]
+	mvn	ip, #64
+	strb	r1, [r3, #10]
+	strb	ip, [r3, #5]
+	mvn	ip, #85
+	strb	ip, [r3, #6]
+	mvn	ip, #84
+	strb	ip, [r3, #7]
+	mvn	ip, #50
+	strb	ip, [r3, #8]
+.L2320:
+	mov	r6, #8
+	strb	r2, [r3, #11]
+	mov	r5, r6
+	b	.L2242
+.L2244:
+	cmp	r4, #5
+	bne	.L2245
+	mov	r2, #56
+	mov	r6, #8
+	strb	r2, [r3, #4]
+	mov	r2, #57
+	strb	r2, [r3, #5]
+	mov	r2, #58
+	strb	r2, [r3, #6]
+	mov	r2, #59
+	strb	r2, [r3, #7]
+	b	.L2319
+.L2245:
+	cmp	r4, #6
+	bne	.L2246
+	mov	r2, #14
+	mov	r6, #12
+	strb	r2, [r3, #4]
+	mov	r2, #15
+	strb	r2, [r3, #5]
+	mov	r2, #16
+	strb	r2, [r3, #6]
+	mov	r2, #17
+	strb	r2, [r3, #7]
+	b	.L2319
+.L2246:
+	cmp	r4, #7
+	bne	.L2297
+	mvn	r2, #79
+	mov	r6, #12
+	strb	r2, [r3, #4]
+	mov	r5, #10
+	mvn	r2, #78
+	strb	r2, [r3, #5]
+	mvn	r2, #77
+	strb	r2, [r3, #6]
+	mvn	r2, #76
+	strb	r2, [r3, #7]
+	mvn	r2, #75
+	strb	r2, [r3, #8]
+	mvn	r2, #74
+	strb	r2, [r3, #9]
+	mvn	r2, #73
+	strb	r2, [r3, #10]
+	mvn	r2, #72
+	strb	r2, [r3, #11]
+	mvn	r2, #43
+	strb	r2, [r3, #12]
+	mvn	r2, #42
+	strb	r2, [r3, #13]
+	b	.L2242
+.L2297:
+	mov	r6, #7
+.L2319:
+	mov	r5, #4
+.L2242:
+	sub	r3, r4, #1
+	cmp	r3, #1
+	bhi	.L2315
+	b	.L2323
+.L2253:
+	add	r2, fp, r8
+	add	r4, fp, #20
+	mov	r7, #0
+	mov	r5, #55
+	ldrb	r2, [r2, #3764]	@ zero_extendqisi2
+	add	r4, r4, r2, asl #6
+	add	r2, fp, r2, asl #3
+	ldrb	sl, [r2, #868]	@ zero_extendqisi2
+	ldr	r1, [r2, #864]
+	add	sl, sl, #8
+	add	sl, r1, sl, asl #8
+.L2249:
+	add	r2, fp, r7
+	str	r5, [sl, #8]
+	mov	r0, #80
+	ldrb	r2, [r2, #4]	@ zero_extendqisi2
+	str	r2, [sl, #4]
+	str	r3, [sp, #12]
+	bl	NandcDelayns
+	ldr	r2, [sl, #0]
+	strb	r2, [r4, r7]
+	add	r7, r7, #1
+	ldr	r3, [sp, #12]
+	uxtb	r2, r7
+	cmp	r2, r6
+	bcc	.L2249
+	mov	r2, #0
+	b	.L2250
+.L2251:
+	ldrb	r7, [r0, r1, asl #2]	@ zero_extendqisi2
+	ldrb	r5, [r4, r2]	@ zero_extendqisi2
+	add	r5, r7, r5
+	strb	r5, [ip, r1, asl #3]
+	add	r1, r1, #1
+	cmp	r1, #7
+	bne	.L2251
+	add	r2, r2, #1
+	cmp	r2, #4
+	beq	.L2252
+.L2250:
+	mov	r1, #1
+	add	ip, r4, r2
+	add	r0, r2, r9
+	b	.L2251
+.L2252:
+	add	r8, r8, #1
+	mov	r2, #0
+	strb	r2, [r4, #16]
+	strb	r2, [r4, #24]
+	uxtb	r8, r8
+	strb	r2, [r4, #32]
+	strb	r2, [r4, #40]
+	strb	r2, [r4, #48]
+	strb	r2, [r4, #41]
+	strb	r2, [r4, #49]
+	b	.L2247
+.L2323:
+	ldr	r9, .L2325+8
+	mov	r3, r6
+	mov	r8, #0
+	mov	r6, r5
+.L2247:
+	ldr	fp, .L2325
+	ldrb	r2, [fp, #3762]	@ zero_extendqisi2
+	cmp	r2, r8
+	bhi	.L2253
+	mov	r5, r6
+	mov	r6, r3
+	b	.L2254
+.L2315:
+	sub	r3, r4, #3
+	cmp	r3, #4
+	bhi	.L2254
+	mul	r3, r6, r5
+	mov	sl, #0
+	mov	r7, sl
+	str	r6, [sp, #48]
+	mov	r2, r3, asr #2
+	mov	r3, r3, asl #4
+	str	r2, [sp, #24]
+	str	r3, [sp, #52]
+	b	.L2255
+.L2296:
+	add	r3, r1, sl
+	ldrb	r6, [r3, #3764]	@ zero_extendqisi2
+	add	r3, r1, r6, asl #3
+	mov	r0, r6
+	ldrb	fp, [r3, #868]	@ zero_extendqisi2
+	ldr	r9, [r3, #864]
+	mov	r3, #255
+	add	fp, fp, #8
+	add	r8, r9, fp, asl #8
+	str	r3, [r8, #8]
+	str	r1, [sp, #12]
+	bl	NandcWaitFlashReady
+	ldr	r1, [sp, #12]
+	cmp	r4, #7
+	addeq	r1, r1, #28
+	moveq	r3, #160
+	addne	r1, r1, #20
+	addne	r1, r1, r6, asl #6
+	strne	r1, [sp, #28]
+	mlaeq	r3, r3, r6, r1
+	streq	r3, [sp, #28]
+	cmp	r4, #4
+	mov	r3, #54
+	str	r3, [r8, #8]
+	bne	.L2258
+	mov	r3, #255
+	str	r3, [r8, #4]
+	mov	r3, #64
+	str	r3, [r9, fp, asl #8]
+	mov	r3, #204
+	b	.L2321
+.L2258:
+	sub	r3, r4, #5
+	cmp	r3, #1
+	ldrls	r3, .L2325
+	ldrlsb	r3, [r3, #4]	@ zero_extendqisi2
+	strls	r3, [r8, #4]
+	movls	r3, #82
+	bls	.L2322
+.L2260:
+	mov	r3, #174
+	str	r3, [r8, #4]
+	mov	r3, #176
+	str	r7, [r9, fp, asl #8]
+.L2321:
+	str	r3, [r8, #4]
+	mov	r3, #77
+.L2322:
+	cmp	r4, #6
+	str	r3, [r9, fp, asl #8]
+	mov	r0, r6
+	mov	r3, #22
+	str	r3, [r8, #8]
+	mov	r3, #23
+	str	r3, [r8, #8]
+	mov	r3, #4
+	str	r3, [r8, #8]
+	mov	r3, #25
+	str	r3, [r8, #8]
+	moveq	r3, #31
+	str	r7, [r8, #8]
+	str	r7, [r8, #4]
+	str	r7, [r8, #4]
+	streq	r3, [r8, #4]
+	mov	r3, #2
+	strne	r7, [r8, #4]
+	str	r3, [r8, #4]
+	mov	r3, #48
+	str	r7, [r8, #4]
+	str	r3, [r8, #8]
+	bl	NandcWaitFlashReady
+	sub	r3, r4, #5
+	cmp	r3, #1
+	str	r3, [sp, #36]
+	movls	r1, #16
+	bls	.L2264
+	cmp	r4, #7
+	moveq	r1, #32
+	movne	r1, #2
+.L2264:
+	ldr	r3, .L2325+12
+	ldr	r2, [r3, #124]
+	mov	r3, #0
+.L2265:
+	ldr	r0, [r8, #0]
+	strb	r0, [r2, r3]
+	add	r3, r3, #1
+	uxtb	r0, r3
+	cmp	r0, r1
+	bcc	.L2265
+	cmp	r4, #7
+	bne	.L2266
+	mov	r3, #0
+.L2268:
+	ldrb	r1, [r2, #0]	@ zero_extendqisi2
+	cmp	r1, #12
+	beq	.L2267
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
+	cmp	r1, #10
+	beq	.L2267
+	add	r3, r3, #1
+	add	r2, r2, #4
+	uxtb	r3, r3
+	cmp	r3, #8
+	bne	.L2268
+	b	.L2269
+.L2267:
+	cmp	r3, #6
+	bls	.L2270
+.L2269:
+	ldr	r0, .L2325+16
+	mov	r1, #0
+	bl	printk
+.L2271:
+	b	.L2271
+.L2266:
+	cmp	r4, #6
+	bne	.L2270
+	mov	r1, #8
+.L2272:
+	ldrb	r3, [r2], #1	@ zero_extendqisi2
+	cmp	r3, #12
+	beq	.L2270
+	ldrb	r3, [r2, #7]	@ zero_extendqisi2
+	cmp	r3, #4
+	beq	.L2270
+	sub	r1, r1, #1
+	uxtb	r1, r1
+	cmp	r1, #0
+	bne	.L2272
+	b	.L2324
+.L2274:
+	b	.L2274
+.L2270:
+	ldr	r3, .L2325+12
+	mov	r2, #0
+	ldr	ip, [r3, #124]
+	str	ip, [sp, #40]
+.L2275:
+	ldr	r1, [r8, #0]
+	ldr	lr, [sp, #40]
+	ldr	ip, [sp, #52]
+	strb	r1, [lr, r2]
+	add	r2, r2, #1
+	cmp	r2, ip
+	blt	.L2275
+	ldr	r2, [sp, #24]
+	ldr	r1, [r3, #124]
+	mov	r3, #8
+	mov	ip, r2, asl #2
+	mov	lr, r2, asl #3
+	add	r1, r1, ip
+	str	ip, [sp, #32]
+.L2277:
+	mov	r2, #0
+	mov	r0, r2
+.L2276:
+	ldr	ip, [r1, r2]
+	add	r0, r0, #1
+	mvn	ip, ip
+	str	ip, [r1, r2]
+	ldr	ip, [sp, #24]
+	add	r2, r2, #4
+	cmp	r0, ip
+	blt	.L2276
+	subs	r3, r3, #1
+	add	r1, r1, lr
+	bne	.L2277
+	str	r3, [sp, #16]
+	str	sl, [sp, #60]
+	b	.L2278
+.L2282:
+	mov	lr, #1
+	mov	r0, #0
+	mov	ip, lr, asl r2
+	mov	lr, r0
+	mov	sl, #16
+	str	r3, [sp, #4]
+	str	sl, [sp, #20]
+.L2280:
+	ldr	r3, [sp, #56]
+	ldr	r3, [r3, r0]
+	and	sl, ip, r3
+	ldr	r3, [sp, #20]
+	cmp	sl, ip
+	ldr	sl, [sp, #32]
+	addeq	lr, lr, #1
+	subs	r3, r3, #1
+	add	r0, r0, sl
+	str	r3, [sp, #20]
+	bne	.L2280
+	cmp	lr, #8
+	add	r2, r2, #1
+	orrhi	r1, r1, ip
+	cmp	r2, #32
+	ldr	r3, [sp, #4]
+	bne	.L2282
+	ldr	ip, [sp, #16]
+	ldr	r2, [sp, #24]
+	add	ip, ip, #1
+	ldr	sl, [sp, #44]
+	cmp	ip, r2
+	str	ip, [sp, #16]
+	str	r1, [sl, r3]
+	add	r3, r3, #4
+	bge	.L2283
+.L2278:
+	ldr	sl, .L2325+12
+	mov	r1, #0
+	mov	r2, r1
+	ldr	sl, [sl, #124]
+	add	ip, sl, r3
+	str	ip, [sp, #56]
+	str	sl, [sp, #44]
+	b	.L2282
+.L2283:
+	ldr	r3, .L2325+12
+	ldr	sl, [sp, #60]
+	ldr	r1, [r3, #124]
+	mov	r3, #0
+	mov	r2, r3
+.L2285:
+	ldr	r0, [r1, r3]
+	add	r3, r3, #4
+	cmp	r0, #0
+	addeq	r2, r2, #1
+	cmp	r3, #32
+	bne	.L2285
+	cmp	r2, #7
+	ble	.L2286
+	ldr	r0, .L2325+20
+	mov	r2, #1
+	mov	r3, #1024
+	bl	rknand_print_hex
+	ldr	r0, .L2325+16
+	mov	r1, #0
+	bl	printk
+.L2287:
+	b	.L2287
+.L2286:
+	cmp	r4, #6
+	moveq	r0, #4
+	streq	r0, [sp, #16]
+	beq	.L2288
+	cmp	r4, #7
+	moveq	lr, #10
+	movne	lr, #8
+	str	lr, [sp, #16]
+.L2288:
+	cmp	r5, #0
+	ldr	r0, [sp, #40]
+	subne	r3, r5, #1
+	mov	r2, #0
+	moveq	r1, #1
+	streq	r1, [sp, #20]
+	uxtbne	r3, r3
+	ldr	r1, [sp, #28]
+	addne	r3, r3, #1
+	strne	r3, [sp, #20]
+	b	.L2291
+.L2292:
+	ldrb	lr, [ip], #1	@ zero_extendqisi2
+	strb	lr, [r1, r3]
+	add	r3, r3, #1
+	uxtb	lr, r3
+	cmp	lr, r5
+	bcc	.L2292
+	ldr	r3, [sp, #20]
+	add	r2, r2, #1
+	ldr	ip, [sp, #16]
+	add	r0, r0, r3
+	ldr	r3, [sp, #48]
+	add	r1, r1, ip
+	cmp	r2, r3
+	bge	.L2293
+.L2291:
+	mov	ip, r0
+	mov	r3, #0
+	b	.L2292
+.L2293:
+	mov	r3, #255
+	mov	r0, r6
+	str	r3, [r8, #8]
+	bl	NandcWaitFlashReady
+	ldr	ip, [sp, #36]
+	cmp	ip, #1
+	movhi	r3, #56
+	strhi	r3, [r8, #8]
+	bhi	.L2295
+	mov	r3, #54
+	str	r3, [r8, #8]
+	ldr	r3, .L2325
+	mov	r0, sl
+	mvn	r1, #0
+	ldrb	r3, [r3, #4]	@ zero_extendqisi2
+	str	r3, [r8, #4]
+	mov	r3, #22
+	str	r7, [r9, fp, asl #8]
+	str	r3, [r8, #8]
+	bl	FlashReadCmd
+.L2295:
+	mov	r0, r6
+	add	sl, sl, #1
+	bl	NandcWaitFlashReady
+	uxtb	sl, sl
+.L2255:
+	ldr	r1, .L2325
+	ldrb	r3, [r1, #3762]	@ zero_extendqisi2
+	cmp	r3, sl
+	bhi	.L2296
+	ldr	r6, [sp, #48]
+.L2254:
+	ldr	r3, .L2325
+	strb	r5, [r3, #1]
+	strb	r6, [r3, #2]
+	add	sp, sp, #68
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2324:
+	ldr	r0, .L2325+16
+	bl	printk
+	b	.L2274
+.L2326:
 	.align	2
-.L2283:
-	.word	.LANCHOR0+3980
+.L2325:
 	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+2944
 	.word	.LANCHOR2
-	.word	.LANCHOR2+168
-	.word	-3872
-	.word	-1032
+	.word	.LC125
+	.word	.LC126
 	.fnend
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
 	.align	2
-	.global	FtlLowFormat
-	.type	FtlLowFormat, %function
-FtlLowFormat:
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r2, #0
-	ldr	r3, .L2305
-	str	r2, [r3, #-1848]
-	str	r2, [r3, #-1844]
-	ldr	r3, .L2305+4
-	ldr	r0, [r3, #3848]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	beq	.L2286
-	bl	FtlMakeBbt
-.L2286:
-	mov	r3, #0
-	ldr	ip, .L2305+4
-	movw	r0, #3918
-	ldr	r2, .L2305
-	ldr	r1, .L2305+8
-	b	.L2287
-.L2288:
-	ldr	lr, [r2, #-960]
-	mvn	r4, r3
-	orr	r4, r3, r4, asl #16
-	str	r4, [lr, r3, asl #2]
-	ldr	lr, [r2, #-956]
-	str	r1, [lr, r3, asl #2]
-	add	r3, r3, #1
-	uxth	r3, r3
-.L2287:
-	ldrh	lr, [ip, r0]
-	ldr	r8, .L2305+4
-	cmp	r3, lr, asl #7
-	blt	.L2288
-	movw	r3, #3852
-	mov	r5, #0
-	ldrh	r6, [r8, r3]
-	movw	r7, #3854
-	b	.L2289
-.L2290:
-	mov	r0, r6
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	uxth	r6, r6
-	add	r5, r5, r0
-	uxth	r5, r5
-.L2289:
-	ldrh	r3, [r8, r7]
-	ldr	r4, .L2305+4
-	cmp	r3, r6
-	bhi	.L2290
-	movw	r3, #3844
-	ldrh	r1, [r4, r3]
-	sub	r3, r5, #3
-	cmp	r3, r1, asl #1
-	bge	.L2291
-.L2295:
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	subs	r3, r0, #0
+	ldmeqfd	sp!, {r3, pc}
+	sub	r2, r3, #1
+	cmp	r2, #6
+	bhi	.L2329
+	ldmfd	sp!, {r3, lr}
+	b	HynixGetReadRetryDefault
+.L2329:
+	cmp	r3, #49
+	bne	.L2330
+	ldr	r0, .L2331
+	mov	r2, #64
+	ldr	r1, .L2331+4
+	strb	r3, [r0, #0]
+	mov	r3, #4
+	strb	r3, [r0, #1]
+	mov	r3, #15
+	strb	r3, [r0, #2]
+	add	r0, r0, #4
+	bl	memcpy
+	ldmfd	sp!, {r3, pc}
+.L2330:
+	ldmfd	sp!, {r3, lr}
+	b	FlashGetReadRetryDefault.part.19
+.L2332:
+	.align	2
+.L2331:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2860
+	.fnend
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
+	.global	FlashInit
+	.type	FlashInit, %function
+FlashInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r7, r0
+	mov	r0, #32768
+	ldr	r5, .L2384
+	bl	ftl_malloc
+	ldr	r6, .L2384+4
 	mov	r4, #0
-	ldr	r8, .L2305+4
-	mov	r6, r4
-	movw	r7, #3852
-	b	.L2292
-.L2291:
-	mov	r0, r5
-	movw	r6, #3854
-	bl	__aeabi_uidiv
-	ldr	r3, [r4, #3944]
-	add	r0, r0, r3
-	uxth	r0, r0
-	bl	FtlSysBlkNumInit
-	ldr	r0, [r4, #3848]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	movw	r3, #3852
-	ldrh	r5, [r4, r3]
-	b	.L2293
-.L2294:
-	mov	r0, r5
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r5, r5, #1
-	uxth	r5, r5
-.L2293:
-	ldrh	r3, [r4, r6]
-	cmp	r3, r5
-	bhi	.L2294
-	b	.L2295
-.L2296:
-	mov	r0, r6
+	str	r0, [r5, #124]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #112]
+	mov	r0, #4096
+	bl	ftl_malloc
+	str	r0, [r5, #204]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #196]
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r3, #50
+	str	r4, [r5, #132]
+	strb	r3, [r5, #140]
+	strb	r3, [r6, #853]
+	mov	r3, #128
+	str	r4, [r5, #144]
+	str	r3, [r6, #856]
+	mov	r3, #60
+	strb	r4, [r6, #3773]
+	strb	r3, [r5, #128]
+	strb	r4, [r6, #852]
+	str	r0, [r5, #200]
+	mov	r0, r7
+	bl	NandcInit
+	ldr	r5, .L2384+8
+	mov	r7, #44
+.L2337:
+	uxtb	r0, r4
+	mov	r1, r5
+	bl	FlashReadIDRaw
+	cmp	r4, #0
+	bne	.L2334
+	ldrb	r3, [r6, #2980]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L2376
+	ldrb	r3, [r6, #2981]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L2377
+.L2334:
+	ldrb	r3, [r5, #0]	@ zero_extendqisi2
+	add	r4, r4, #1
+	cmp	r3, #181
+	streqb	r7, [r5, #0]
+	cmp	r4, #4
+	add	r5, r5, #8
+	bne	.L2337
+	ldr	r4, .L2384+4
+	ldrb	r3, [r4, #2980]	@ zero_extendqisi2
+	cmp	r3, #173
+	beq	.L2338
+	ldr	r0, [r4, #3776]
+	bl	NandcSetDdrMode
+.L2338:
+	mov	r2, #852
+	ldr	r0, .L2384+4
 	mov	r1, #0
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	uxth	r6, r6
-	add	r4, r4, r0
-	uxth	r4, r4
-.L2292:
-	ldrh	r3, [r8, r7]
-	ldr	r5, .L2305+4
-	cmp	r3, r6
-	bhi	.L2296
-	movw	r3, #3854
-	ldr	fp, [r5, #3856]
-	ldrh	r3, [r5, r3]
-	ldr	r9, .L2305
-	mov	r0, fp
-	ldr	sl, .L2305+12
-	str	r3, [r5, #3976]
-	movw	r3, #3844
-	ldrh	r6, [r5, r3]
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	ubfx	r8, r0, #5, #16
-	mov	r7, r0
-	add	r3, r8, #36
-	strh	r3, [r9, sl]	@ movhi
-	mov	r3, #24
-	str	r0, [r5, #3972]
-	mul	r3, r3, r6
-	cmp	r4, r3
-	ble	.L2297
-	rsb	r0, r4, fp
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	str	r0, [r5, #3972]
-	mov	r0, r0, lsr #5
-	add	r0, r0, #24
-	strh	r0, [r9, sl]	@ movhi
-.L2297:
-	ldr	r5, .L2305
-	ldr	r3, [r5, #-1884]
+	bl	ftl_memset
+	ldr	r3, .L2384+12
+	str	r3, [r4, #3624]
+	mov	r3, #0
+	strb	r3, [r4, #860]
+	ldrb	r3, [r4, #2981]	@ zero_extendqisi2
+	sub	r2, r3, #218
+	rsbs	lr, r2, #0
+	adc	lr, lr, r2
+	cmp	r3, #218
+	cmpne	r3, #241
+	beq	.L2339
+	cmp	r3, #220
+	bne	.L2340
+.L2339:
+	ldr	r2, .L2384+4
+	mov	r1, #1
+	ldr	r0, .L2384
+	ldrb	ip, [r2, #2980]	@ zero_extendqisi2
+	strb	r1, [r2, #852]
+	mov	r1, #16
+	strb	r1, [r2, #853]
+	cmp	ip, #152
+	strb	r1, [r0, #128]
+	ldr	r1, .L2384+16
+	strb	ip, [r1, #2973]
+	bne	.L2341
+	ldrb	r2, [r2, #2984]	@ zero_extendqisi2
+	sxtb	r2, r2
+	cmp	r2, #0
+	movge	r2, #24
+	strgeb	r2, [r0, #128]
+.L2341:
+	cmp	lr, #0
+	beq	.L2342
+	movw	r3, #2986
+	mov	r2, #2048
+	strh	r2, [r1, r3]	@ movhi
+	mvn	r3, #37
+	strb	r3, [r1, #2974]
+	b	.L2343
+.L2342:
+	cmp	r3, #220
+	bne	.L2343
+	ldr	r3, .L2384+16
+	movw	r2, #2986
+	mov	r1, #4096
+	strh	r1, [r3, r2]	@ movhi
+	mvn	r2, #35
+	strb	r2, [r3, #2974]
+.L2343:
+	ldr	r1, .L2384+20
+	mov	r2, #32
+	ldr	r0, .L2384+24
+	bl	memcpy
+	ldr	r0, .L2384+12
+	mov	r2, #32
+	add	r1, r0, #144
+	bl	memcpy
+.L2340:
+	ldr	r4, .L2384+4
+	ldrb	r3, [r4, #852]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2344
+	bl	FlashLoadPhyInfoInRam
+	cmp	r0, #0
+	bne	.L2345
+	ldr	r3, [r4, #3624]
+	ldrh	r0, [r3, #16]
+	ubfx	r0, r0, #8, #3
+	strb	r0, [r4, #3772]
+	tst	r0, #1
+	bne	.L2345
+	mov	r3, #1
+	strb	r3, [r4, #3773]
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	NandcSetMode
+.L2345:
+	ldr	r4, .L2384+4
+	ldr	r3, [r4, #3624]
+	ldrb	r3, [r3, #26]	@ zero_extendqisi2
+	strb	r3, [r4, #928]
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L2344
+	ldr	r3, [r4, #3776]
+	cmp	r3, #0
+	beq	.L2347
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	b	.L2382
+.L2347:
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+.L2382:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L2344
+	ldr	r4, .L2384+4
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	ldr	r0, .L2384+28
+	ldr	r3, [r4, #3624]
+	ldrh	r1, [r3, #14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	cmn	r0, #1
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	bl	FlashDieInfoInit
+	ldr	r3, [r4, #3624]
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	bl	FlashGetReadRetryDefault
+	ldr	r1, .L2384+32
+	ldr	r0, .L2384
+	ldr	r3, [r4, #3624]
+	ldrh	r1, [r0, r1]
+	ldrb	r2, [r3, #9]	@ zero_extendqisi2
+	add	r1, r1, #4080
+	add	r1, r1, #15
+	cmp	r2, r1, lsr #12
+	blt	.L2350
+	ldrh	r1, [r3, #14]
+	add	r1, r1, #255
+	cmp	r2, r1, lsr #8
+	bge	.L2351
+.L2350:
+	ldrh	r2, [r3, #14]
+	bic	r2, r2, #255
+	strh	r2, [r3, #14]	@ movhi
+.L2351:
+	ldr	r3, .L2384+4
+	ldrb	r3, [r3, #3772]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L2352
+	bl	FlashSavePhyInfo
+	ldr	r3, .L2384
+	mov	r0, #0
+	ldr	r1, [r3, #136]
+	bl	FlashDdrParaScan
+.L2352:
+	bl	FlashSavePhyInfo
+.L2344:
+	ldr	r4, .L2384+4
+	ldr	r5, .L2384
+	ldr	r3, [r4, #3624]
+	ldrb	r2, [r3, #26]	@ zero_extendqisi2
+	ldrh	r0, [r3, #10]
+	ldrb	r6, [r3, #18]	@ zero_extendqisi2
+	strb	r2, [r4, #928]
+	ldrh	r2, [r3, #16]
+	ubfx	r1, r2, #7, #1
+	strb	r1, [r4, #860]
+	ubfx	r1, r2, #3, #1
+	strb	r1, [r5, #152]
+	ubfx	r1, r2, #4, #1
+	ubfx	r2, r2, #8, #3
+	strb	r1, [r4, #3833]
+	strb	r2, [r4, #3772]
+	mov	r2, #0
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	str	r2, [r5, #148]
+	bl	__aeabi_idiv
+	mov	r1, r0
+	mov	r0, r6
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	r3, [r4, #3624]
+	ldrh	r2, [r3, #16]
+	tst	r2, #64
+	beq	.L2353
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	strb	r0, [r4, #3761]
+	strb	r3, [r4, #3760]
+	ldrb	r3, [r4, #2]	@ zero_extendqisi2
+	strb	r3, [r5, #116]
+	sub	r3, r0, #1
+	uxtb	r3, r3
+	cmp	r3, #6
+	bhi	.L2354
+	ldr	r3, .L2384+36
+	str	r3, [r5, #148]
+	sub	r3, r0, #5
+	uxtb	r3, r3
 	cmp	r3, #1
-	bne	.L2298
-	mov	r0, r4
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	ldr	sl, .L2305+12
-	ldrh	r9, [r5, sl]
-	uxtah	r0, r9, r0
-	add	r9, r9, r0, lsr #2
-	strh	r9, [r5, sl]	@ movhi
-.L2298:
-	ldr	r0, .L2305+4
-	mov	r3, #3904
-	ldrh	r3, [r0, r3]
-	cmp	r3, #0
-	beq	.L2299
-	ldr	r1, .L2305
-	ldr	r2, .L2305+12
-	ldrh	ip, [r1, r2]
-	add	ip, ip, r3, lsr #1
-	strh	ip, [r1, r2]	@ movhi
-	mul	ip, r6, r3
-	cmp	ip, r4
-	strgt	r7, [r0, #3972]
-	addgt	r3, r3, #32
-	addgt	r8, r8, r3
-	strgth	r8, [r1, r2]	@ movhi
-.L2299:
-	ldr	r4, .L2305
-	ldr	r5, .L2305+4
-	ldr	r3, .L2305+12
-	ldr	r7, .L2305+16
-	ldr	r2, [r5, #3972]
-	ldrh	r3, [r4, r3]
-	rsb	r3, r3, r2
-	mul	r6, r6, r3
-	movw	r3, #3912
-	ldrh	r3, [r5, r3]
-	str	r6, [r4, #204]
-	mul	r6, r3, r6
-	movw	r3, #3918
-	ldrh	r3, [r5, r3]
-	str	r6, [r5, #3972]
-	mul	r6, r3, r6
-	str	r6, [r5, #3952]
-	mvn	r6, #0
-	bl	FtlBbmTblFlush
-	movw	r3, #3854
-	ldrh	r2, [r5, r3]
-	mov	r1, #0
-	ldr	r0, [r4, #-2064]
-	mov	r2, r2, asl #1
-	bl	ftl_memset
-	ldr	r1, .L2305+20
+	movls	r3, #1
+	strls	r3, [r4, #3824]
+	bls	.L2356
+	cmp	r0, #7
+	addeq	r4, r4, #28
+	beq	.L2357
+.L2356:
+	ldr	r4, .L2384+40
+.L2357:
 	mov	r3, #0
-	ldr	r2, .L2305+24
-	str	r3, [r4, #-1892]
-	strh	r3, [r4, r1]	@ movhi
-	sub	r1, r1, #288
-	strb	r3, [r4, #-1750]
-	strh	r3, [r4, r1]	@ movhi
-	mov	r1, #255
-	strb	r3, [r4, #-1748]
-	strb	r3, [r4, #-2038]
-	strh	r3, [r4, r7]	@ movhi
-	mov	r3, #1
-	strb	r3, [r4, #-2036]
-	movw	r3, #3852
-	strh	r6, [r4, r2]	@ movhi
-	ldrh	r2, [r5, r3]
-	ldr	r0, [r4, #-1888]
-	mov	r2, r2, lsr #3
-	bl	ftl_memset
-.L2300:
-	ldr	r0, .L2305+28
-	bl	make_superblock
-	ldrb	r3, [r4, #-2037]	@ zero_extendqisi2
-	ldr	r5, .L2305
-	cmp	r3, #0
-	ldr	r3, .L2305+16
-	bne	.L2301
-	ldrh	r3, [r4, r7]
-	ldr	r2, [r4, #-2064]
-	mov	r3, r3, asl #1
-	strh	r6, [r2, r3]	@ movhi
-	ldrh	r3, [r4, r7]
-	add	r3, r3, #1
-	strh	r3, [r4, r7]	@ movhi
-	b	.L2300
-.L2301:
-	ldr	r2, [r5, #-1848]
-	mvn	r7, #0
-	ldr	r1, [r5, #-2064]
-	ldr	r6, .L2305+32
-	str	r2, [r5, #-2032]
+	mov	r2, r3
+.L2359:
+	ldrsb	r1, [r4, r2]
 	add	r2, r2, #1
-	str	r2, [r5, #-1848]
-	ldr	r2, .L2305+36
-	ldrh	r0, [r5, r2]
-	ldrh	r2, [r5, r3]
-	mov	r2, r2, asl #1
-	strh	r0, [r1, r2]	@ movhi
-	mov	r2, #0
-	ldr	r0, .L2305+40
-	ldrh	r3, [r5, r3]
-	strb	r2, [r5, #-1990]
-	add	r3, r3, #1
-	strh	r2, [r5, r0]	@ movhi
-	strh	r3, [r5, r6]	@ movhi
-	mov	r3, #1
-	strb	r3, [r5, #-1988]
-.L2302:
-	ldr	r0, .L2305+44
-	bl	make_superblock
-	ldrb	r3, [r5, #-1989]	@ zero_extendqisi2
-	ldr	r4, .L2305
+	cmp	r1, #0
+	addeq	r3, r3, #1
+	cmp	r2, #32
+	bne	.L2359
+	cmp	r3, #27
+	bls	.L2353
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L2353
+.L2354:
+	sub	r3, r0, #17
+	uxtb	r3, r3
+	cmp	r3, #2
+	bhi	.L2360
+	ldr	r3, .L2384+44
+	cmp	r0, #19
+	str	r3, [r5, #148]
+	mov	r3, #7
+	strb	r3, [r5, #116]
+	moveq	r3, #15
+	streqb	r3, [r5, #116]
+	b	.L2353
+.L2360:
+	cmp	r0, #33
+	cmpne	r0, #65
+	beq	.L2361
+	cmp	r0, #66
+	bne	.L2362
+.L2361:
+	ldr	r3, .L2384
+	mov	r1, #4
+	ldr	r2, .L2384+48
+	str	r2, [r3, #148]
+	ldr	r2, .L2384+4
+	strb	r1, [r2, #3760]
+	mov	r2, #7
+	strb	r2, [r3, #116]
+	b	.L2353
+.L2362:
+	cmp	r0, #67
+	cmpne	r0, #34
+	beq	.L2363
+	cmp	r0, #35
+	beq	.L2363
+	cmp	r0, #68
+	bne	.L2364
+.L2363:
+	ldr	r3, .L2384
+	cmp	r0, #35
+	cmpne	r0, #68
+	ldr	r2, .L2384+48
+	sub	r0, r0, #67
+	uxtb	r0, r0
+	str	r2, [r3, #148]
+	mov	r2, #7
+	strb	r2, [r3, #116]
+	moveq	r2, #17
+	streqb	r2, [r3, #116]
+	cmp	r0, #1
+	ldr	r3, .L2384+4
+	movls	r2, #4
+	movhi	r2, #5
+	strb	r2, [r3, #3760]
+	b	.L2353
+.L2364:
+	cmp	r0, #49
+	ldreq	r3, .L2384+52
+	streq	r3, [r5, #148]
+.L2353:
+	ldr	r2, .L2384+4
+	ldr	r3, .L2384+56
+	ldr	r1, [r2, #3784]
+	cmp	r1, r3
+	bne	.L2367
+	ldrb	r3, [r2, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2303
-	ldrh	r3, [r5, r6]
-	ldr	r2, [r5, #-2064]
-	mov	r3, r3, asl #1
-	strh	r7, [r2, r3]	@ movhi
-	ldrh	r3, [r5, r6]
-	add	r3, r3, #1
-	strh	r3, [r5, r6]	@ movhi
-	b	.L2302
-.L2303:
-	ldr	r3, [r4, #-1848]
-	mvn	r5, #0
-	ldr	r2, [r4, #-2064]
-	str	r3, [r4, #-1984]
-	add	r3, r3, #1
-	str	r3, [r4, #-1848]
-	ldr	r3, .L2305+48
-	ldrh	r1, [r4, r3]
-	sub	r3, r3, #4
-	ldrh	r3, [r4, r3]
-	mov	r3, r3, asl #1
-	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, .L2305+52
-	strh	r5, [r4, r3]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L2305+56
+	ldrne	r3, [r2, #3624]
+	movne	r1, #0
+	strneb	r1, [r3, #18]
+.L2367:
+	ldrb	r2, [r2, #2980]	@ zero_extendqisi2
+	ldr	r3, .L2384+4
+	cmp	r2, #44
+	bne	.L2368
+	ldrb	r2, [r3, #3773]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2368
+	ldr	r1, [r3, #3784]
+	ldr	r2, .L2384+56
+	cmp	r1, r2
+	bne	.L2369
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2368
+.L2369:
+	ldr	r3, .L2384+4
 	mov	r2, #0
-	strh	r0, [r4, r3]	@ movhi
-	add	r3, r3, #2
+	mov	r0, #1
+	strb	r2, [r3, #3773]
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+.L2368:
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	ldr	r2, .L2384+4
+	ldrb	r3, [r2, #3772]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L2370
+	ldrb	r2, [r2, #3773]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L2371
+	tst	r3, #1
+	bne	.L2370
+.L2371:
+	ldr	r3, .L2384
+	mov	r0, #0
+	ldr	r1, [r3, #136]
+	bl	FlashDdrParaScan
+.L2370:
+	ldr	r4, .L2384+4
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+	ldr	r3, [r4, #3624]
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	add	r0, r4, #932
+	bl	FlashReadIdbDataRaw
+	mov	r3, r4
+	cmp	r0, #0
+	movne	r3, #16
+	strneb	r3, [r4, #853]
+	bne	.L2374
+	ldr	r2, .L2384
+	ldrb	r1, [r3, #853]	@ zero_extendqisi2
+	ldrb	r2, [r2, #140]	@ zero_extendqisi2
+	cmp	r1, r2
+	strhib	r2, [r3, #853]
+	ldrb	r3, [r3, #853]	@ zero_extendqisi2
+	cmp	r3, #15
+	ldrls	r3, .L2384+4
+	movls	r2, #16
+	strlsb	r2, [r3, #853]
+.L2374:
+	ldr	r4, .L2384+4
+	movw	r6, #3062
+	ldr	r0, .L2384+60
+	bl	FlashTimingCfg
+	mov	r3, #3056
+	ldr	r5, [r4, #3624]
+	ldrb	r2, [r5, #12]	@ zero_extendqisi2
+	ldrh	r7, [r5, #14]
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	ldrb	r2, [r4, #3762]	@ zero_extendqisi2
+	str	r3, [r4, #3052]
+	ldr	r3, [r4, #2980]
+	str	r3, [r4, #3048]
+	movw	r3, #3058
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #2
-	ldr	r2, [r4, #204]
-	strh	r5, [r4, r3]	@ movhi
+	ldrb	r2, [r5, #13]	@ zero_extendqisi2
+	strh	r7, [r4, r6]	@ movhi
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #4
+	ldrh	r2, [r5, #10]
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r1, [r5, #12]	@ zero_extendqisi2
+	ldrh	r0, [r5, #10]
+	bl	__aeabi_idiv
+	movw	r3, #3066
+	mov	lr, #512
+	movw	r2, #3070
+	strh	r0, [r4, r3]	@ movhi
+	movw	r0, #3068
+	ldrb	ip, [r5, #9]	@ zero_extendqisi2
+	strh	ip, [r4, r0]	@ movhi
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	ldrh	r1, [r5, #10]
+	mul	r1, r1, r3
+	mov	r3, #3072
+	strh	lr, [r4, r3]	@ movhi
 	add	r3, r3, #2
+	ldrb	lr, [r4, #853]	@ zero_extendqisi2
+	strh	lr, [r4, r3]	@ movhi
+	uxth	r1, r1
+	ldrb	lr, [r4, #852]	@ zero_extendqisi2
+	strh	r1, [r4, r2]	@ movhi
+	cmp	lr, #1
+	bne	.L2375
+	mov	lr, #16
+	mov	r7, r7, lsr #1
+	mov	ip, ip, asl #1
+	mov	r1, r1, asl #1
+	strb	lr, [r4, #853]
+	strh	r1, [r4, r2]	@ movhi
+	mov	r2, #8
+	strh	r7, [r4, r6]	@ movhi
+	strh	ip, [r4, r0]	@ movhi
 	strh	r2, [r4, r3]	@ movhi
-	ldr	r3, [r4, #-1848]
-	str	r3, [r4, #-1760]
-	add	r3, r3, #1
-	str	r3, [r4, #-1848]
-	bl	FtlVpcTblFlush
-	bl	FtlSysBlkInit
-	cmp	r0, #0
+.L2375:
+	ldrb	r0, [r5, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	bl	FlashSuspend
 	mov	r0, #0
-	ldreq	r3, .L2305+60
-	moveq	r2, #1
-	streq	r2, [r3, #2960]
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2306:
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2376:
+	mvn	r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2377:
+	mvn	r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2385:
 	.align	2
-.L2305:
+.L2384:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	168778952
-	.word	-1772
-	.word	-2044
-	.word	-1754
-	.word	-1756
-	.word	.LANCHOR2-2044
-	.word	-1996
-	.word	-2040
-	.word	-1994
-	.word	.LANCHOR2-1996
-	.word	-1992
-	.word	-1948
-	.word	-1768
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR1+2828
 	.word	.LANCHOR1
+	.word	.LANCHOR1+2732
+	.word	.LANCHOR0+896
+	.word	.LC127
+	.word	-918
+	.word	HynixReadRetrial
+	.word	.LANCHOR0+20
+	.word	MicronReadRetrial
+	.word	ToshibaReadRetrial
+	.word	SamsungReadRetrial
+	.word	1446522928
+	.word	150000
 	.fnend
-	.size	FtlLowFormat, .-FtlLowFormat
+	.size	FlashInit, .-FlashInit
+	.align	2
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #2048
+	bl	ftl_malloc
+	ldr	r4, .L2390
+	mov	r5, #0
+	add	r1, r4, #432
+	str	r5, [r4, #108]
+	str	r5, [r4, #432]
+	str	r0, [r4, #428]
+	add	r0, r4, #108
+	bl	rknand_get_reg_addr
+	ldr	r3, [r4, #108]
+	cmp	r3, r5
+	mvneq	r4, #0
+	beq	.L2387
+	bl	rk_nandc_irq_init
+	ldr	r0, [r4, #428]
+	mov	r1, r5
+	mov	r2, r5
+	mov	r3, #2048
+	bl	FlashSramLoadStore
+	bl	rknand_flash_cs_init
+	ldr	r0, [r4, #108]
+	bl	FlashInit
+	subs	r4, r0, #0
+	bne	.L2388
+	ldr	r0, .L2390+4
+	bl	FtlInit
+.L2388:
+	ldr	r0, .L2390+8
+	mov	r1, r4
+	bl	printk
+.L2387:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2391:
+	.align	2
+.L2390:
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3048
+	.word	.LC128
+	.fnend
+	.size	rk_ftl_init, .-rk_ftl_init
 	.align	2
 	.global	FtlReInitForSDUpdata
 	.type	FtlReInitForSDUpdata, %function
@@ -20415,23 +20921,30 @@ FtlReInitForSDUpdata:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r3, r4, lr}
-	.save {r0, r1, r2, r3, r4, lr}
-	ldr	r4, .L2331
-	ldr	r0, [r4, #112]
+	ldr	r3, .L2417
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldrb	r4, [r3, #928]	@ zero_extendqisi2
+	cmp	r4, #0
+	movne	r0, #0
+	bne	.L2393
+	ldr	r5, .L2417+4
+	ldr	r0, [r5, #108]
 	bl	FlashInit
 	cmp	r0, #0
-	movne	r0, #0
-	bne	.L2308
+	movne	r0, r4
+	bne	.L2393
 	bl	FlashLoadFactorBbt
 	cmp	r0, #0
-	beq	.L2309
+	beq	.L2394
 	bl	FlashMakeFactorBbt
-.L2309:
-	ldr	r0, [r4, #116]
+.L2394:
+	ldr	r0, [r5, #112]
 	bl	FlashReadIdbDataRaw
 	cmp	r0, #0
-	beq	.L2310
+	beq	.L2395
 	mov	r1, #0
 	mov	r2, #16
 	mov	r0, sp
@@ -20440,78 +20953,78 @@ FtlReInitForSDUpdata:
 	mov	r3, #0
 	mov	r0, #1
 	mov	r2, r3
-.L2312:
+.L2397:
 	ands	ip, r1, r0, asl r2
 	add	r2, r2, #1
 	addne	r3, r3, #1
 	cmp	r2, #16
-	bne	.L2312
+	bne	.L2397
 	cmp	r3, #6
-	ldrls	r3, .L2331+4
-	bls	.L2327
+	ldrls	r3, .L2417
+	bls	.L2413
 	mov	r2, #0
 	mov	r0, #1
-.L2313:
+.L2398:
 	ands	ip, r1, r0, asl r2
 	add	r2, r2, #1
 	addne	r3, r3, #1
 	cmp	r2, #24
-	bne	.L2313
+	bne	.L2398
 	cmp	r3, #17
-	ldr	r3, .L2331+4
+	ldr	r3, .L2417
 	movhi	r2, #36
-.L2327:
-	strb	r2, [r3, #1]
-	movw	r2, #2226
-	ldr	r3, .L2331+4
-	ldrb	r1, [r3, #1]	@ zero_extendqisi2
+.L2413:
+	strb	r2, [r3, #853]
+	movw	r2, #3074
+	ldr	r3, .L2417
+	ldrb	r1, [r3, #853]	@ zero_extendqisi2
 	strh	r1, [r3, r2]	@ movhi
-.L2310:
-	ldr	r1, .L2331+8
+.L2395:
+	ldr	r1, .L2417+8
 	mov	r4, #1
-	ldr	r0, .L2331+12
+	ldr	r0, .L2417+12
 	bl	printk
-	ldr	r0, .L2331+16
+	ldr	r0, .L2417+16
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
-	ldr	r3, .L2331+4
-	ldr	r0, [r3, #3848]
+	ldr	r3, .L2417
+	ldr	r0, [r3, #3844]
 	uxth	r0, r0
 	bl	FtlFreeSysBlkQueueInit
-	b	.L2317
-.L2319:
+	b	.L2402
+.L2404:
 	add	r4, r4, #1
-.L2317:
+.L2402:
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L2329
-.L2318:
+	bne	.L2415
+.L2403:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	beq	.L2320
-.L2329:
+	beq	.L2405
+.L2415:
 	bl	FtlLowFormat
 	cmp	r4, #3
-	bls	.L2319
-	b	.L2330
-.L2320:
-	ldr	r3, .L2331+20
+	bls	.L2404
+	b	.L2416
+.L2405:
+	ldr	r3, .L2417+20
 	mov	r2, #1
-	str	r2, [r3, #2960]
-	b	.L2308
-.L2330:
+	str	r2, [r3, #2932]
+	b	.L2393
+.L2416:
 	mvn	r0, #0
-.L2308:
-	add	sp, sp, #16
-	ldmfd	sp!, {r4, pc}
-.L2332:
+.L2393:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, pc}
+.L2418:
 	.align	2
-.L2331:
-	.word	.LANCHOR2
+.L2417:
 	.word	.LANCHOR0
+	.word	.LANCHOR2
 	.word	.LC75
 	.word	.LC74
-	.word	.LANCHOR0+2200
+	.word	.LANCHOR0+3048
 	.word	.LANCHOR1
 	.fnend
 	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
@@ -20523,15 +21036,15 @@ flash_boot_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L2335
-	ldr	r2, [r3, #3788]
-	ldr	r3, .L2335+4
+	ldr	r3, .L2421
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L2421+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_enter_slc_mode
-.L2336:
+.L2422:
 	.align	2
-.L2335:
+.L2421:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -20544,15 +21057,15 @@ flash_boot_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L2339
-	ldr	r2, [r3, #3788]
-	ldr	r3, .L2339+4
+	ldr	r3, .L2425
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L2425+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_exit_slc_mode
-.L2340:
+.L2426:
 	.align	2
-.L2339:
+.L2425:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -20568,20 +21081,20 @@ IdBlockReadData:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L2346
+	ldr	r4, .L2432
 	mov	r6, r0
 	str	r2, [sp, #20]
 	mov	sl, r1
-	ldr	r0, .L2346+4
+	ldr	r0, .L2432+4
 	mov	r1, r6
-	ldr	r2, [r4, #2776]
-	ldr	r3, [r4, #4]
-	ldr	r8, .L2346+8
+	ldr	r2, [r4, #3624]
+	ldr	r3, [r4, #856]
+	ldr	r8, .L2432+8
 	ldrb	r5, [r2, #9]	@ zero_extendqisi2
 	mov	r2, sl
 	mul	r5, r5, r3
 	bl	printk
-	ldr	r3, [r4, #2776]
+	ldr	r3, [r4, #3624]
 	mov	r0, r6
 	ldrb	r9, [r3, #9]	@ zero_extendqisi2
 	uxth	r5, r5
@@ -20593,32 +21106,32 @@ IdBlockReadData:
 	mov	r7, r1
 	str	ip, [sp, #12]
 	ubfx	r2, r2, #2, #2
-	b	.L2342
-.L2344:
+	b	.L2428
+.L2430:
 	add	r1, r5, r7
 	rsb	r3, r2, #4
 	ubfx	r1, r1, #2, #16
-	ldrb	r0, [r4, #80]	@ zero_extendqisi2
+	ldrb	r0, [r4, #928]	@ zero_extendqisi2
 	uxth	r3, r3
 	str	r3, [sp, #16]
 	add	r3, r4, r1, asl #1
 	cmp	r0, #0
-	add	r3, r3, #2224
+	add	r3, r3, #3072
 	add	r3, r3, #4
 	ldrh	r3, [r3, #0]
-	beq	.L2343
-	ldr	r0, [r4, #3788]
-	ldr	ip, .L2346+12
+	beq	.L2429
+	ldr	r0, [r4, #3784]
+	ldr	ip, .L2432+12
 	cmp	r0, ip
 	moveq	r3, r1
-.L2343:
+.L2429:
 	ldr	ip, [sp, #12]
 	ldrb	r0, [r8, #128]	@ zero_extendqisi2
 	add	r2, r2, ip
-	ldrb	ip, [r4, #3836]	@ zero_extendqisi2
-	ldr	fp, [r8, #116]
+	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
+	ldr	fp, [r8, #112]
 	mla	r2, r9, r3, r2
-	ldr	r3, [r4, #2776]
+	ldr	r3, [r4, #3624]
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
 	str	ip, [sp, #0]
 	stmib	sp, {r1, r2}
@@ -20641,32 +21154,32 @@ IdBlockReadData:
 	bl	FlashBchSel
 	ldr	ip, [sp, #20]
 	mov	r2, #2048
-	ldr	r1, [r8, #116]
+	ldr	r1, [r8, #112]
 	add	r0, ip, r5, asl #9
 	bl	memcpy
 	ldr	ip, [sp, #16]
 	mov	r2, #0
 	add	r5, ip, r5
 	uxth	r5, r5
-.L2342:
+.L2428:
 	cmp	r5, sl
-	bcc	.L2344
+	bcc	.L2430
 	mov	r1, r6
 	mov	r2, sl
 	mov	r3, #0
-	ldr	r0, .L2346+16
+	ldr	r0, .L2432+16
 	bl	printk
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2347:
+.L2433:
 	.align	2
-.L2346:
+.L2432:
 	.word	.LANCHOR0
-	.word	.LC122
+	.word	.LC129
 	.word	.LANCHOR2
 	.word	1446522928
-	.word	.LC123
+	.word	.LC130
 	.fnend
 	.size	IdBlockReadData, .-IdBlockReadData
 	.align	2
@@ -20680,23 +21193,23 @@ IDBlockWriteData:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r4, .L2355
+	ldr	r4, .L2441
 	mov	r5, r0
 	str	r2, [sp, #20]
 	mov	r8, r1
-	ldr	r0, .L2355+4
+	ldr	r0, .L2441+4
 	mov	r1, r5
-	ldr	r2, [r4, #2776]
+	ldr	r2, [r4, #3624]
 	mov	r7, r5
-	ldr	r3, [r4, #4]
-	ldr	fp, .L2355+8
+	ldr	r3, [r4, #856]
+	ldr	fp, .L2441+8
 	ldrb	r6, [r2, #9]	@ zero_extendqisi2
 	mov	r2, r8
 	mul	r6, r6, r3
 	bl	printk
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
-	movw	r3, #2220
+	movw	r3, #3068
 	ldrh	r1, [r4, r3]
 	mov	r0, r5
 	bl	__aeabi_uidiv
@@ -20707,7 +21220,7 @@ IDBlockWriteData:
 	bl	FlashEraseBlock
 	mov	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	r3, [r4, #2776]
+	ldr	r3, [r4, #3624]
 	mov	r1, r6
 	mov	r0, r5
 	mov	r6, #0
@@ -20716,46 +21229,46 @@ IDBlockWriteData:
 	mov	r9, r1
 	rsb	r1, r1, r5
 	str	r1, [sp, #16]
-	b	.L2349
-.L2353:
+	b	.L2435
+.L2439:
 	add	r3, r6, r9
 	ubfx	r3, r3, #2, #16
 	cmp	r3, #0
-	beq	.L2350
+	beq	.L2436
 	add	r1, r3, #1
-	ldrb	r0, [r4, #80]	@ zero_extendqisi2
+	ldrb	r0, [r4, #928]	@ zero_extendqisi2
 	add	r2, r4, r1, asl #1
 	cmp	r0, #0
-	add	r2, r2, #2224
+	add	r2, r2, #3072
 	add	r2, r2, #4
 	ldrh	r2, [r2, #0]
-	beq	.L2351
-	ldr	r0, [r4, #3788]
+	beq	.L2437
+	ldr	r0, [r4, #3784]
 	cmp	r0, fp
 	uxtheq	r2, r1
-.L2351:
+.L2437:
 	sub	r2, r2, #1
 	mov	r2, r2, asl #2
 	str	r2, [sp, #24]
 	mov	r2, #0
 	str	r2, [sp, #28]
-.L2350:
+.L2436:
 	add	r2, r4, r3, asl #1
-	add	r2, r2, #2224
+	add	r2, r2, #3072
 	ldrh	r5, [r2, #4]
-	ldrb	r2, [r4, #80]	@ zero_extendqisi2
+	ldrb	r2, [r4, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L2352
-	ldr	r2, [r4, #3788]
+	beq	.L2438
+	ldr	r2, [r4, #3784]
 	cmp	r2, fp
 	moveq	r5, r3
-.L2352:
+.L2438:
 	ldr	r2, [sp, #16]
 	ldr	r1, [sp, #20]
-	ldrb	ip, [r4, #3836]	@ zero_extendqisi2
+	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
 	mla	r3, sl, r5, r2
 	add	r2, r1, r6, asl #9
-	ldr	r1, .L2355+12
+	ldr	r1, .L2441+12
 	add	r6, r6, #4
 	uxth	r6, r6
 	ldrb	r0, [r1, #128]	@ zero_extendqisi2
@@ -20766,7 +21279,7 @@ IDBlockWriteData:
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
 	ldr	r3, [sp, #12]
-	ldr	r1, [r4, #2776]
+	ldr	r1, [r4, #3624]
 	mov	r0, r3
 	ldrb	r1, [r1, #9]	@ zero_extendqisi2
 	bl	__aeabi_uidiv
@@ -20788,26 +21301,26 @@ IDBlockWriteData:
 	mov	r1, r0
 	mov	r0, #0
 	bl	FlashPageProgMsbFFData
-.L2349:
+.L2435:
 	cmp	r6, r8
-	bcc	.L2353
+	bcc	.L2439
 	mov	r1, r7
 	mov	r2, r8
 	mov	r3, #0
-	ldr	r0, .L2355+16
+	ldr	r0, .L2441+16
 	bl	printk
 	mov	r5, r7
 	mov	r0, #0
 	add	sp, sp, #92
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2356:
+.L2442:
 	.align	2
-.L2355:
+.L2441:
 	.word	.LANCHOR0
-	.word	.LC124
+	.word	.LC131
 	.word	1446522928
 	.word	.LANCHOR2
-	.word	.LC125
+	.word	.LC132
 	.fnend
 	.size	IDBlockWriteData, .-IDBlockWriteData
 	.align	2
@@ -20817,55 +21330,53 @@ write_idblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2370
+	ldr	r3, .L2456
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r7, r2
-	ldr	r2, [r3, #4]
+	ldr	r2, [r3, #856]
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r3, [r3, #2776]
+	ldr	r3, [r3, #3624]
 	mov	r6, r0
-	mov	r4, r1
 	mov	r0, #256000
-	mov	r1, #208
+	mov	r4, r1
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	mul	r3, r3, r2
-	mov	r2, #6
 	uxth	r3, r3
 	str	r3, [sp, #8]
-	bl	kmalloc_order_trace
+	bl	ftl_malloc
 	subs	r5, r0, #0
 	mvneq	r0, #0
-	beq	.L2358
+	beq	.L2444
 	add	sl, r6, #508
 	add	sl, sl, #3
 	mov	sl, sl, lsr #9
 	cmp	sl, #255
-	bhi	.L2359
+	bhi	.L2445
 	add	r0, r4, sl, asl #9
 	mov	r1, r4
 	rsb	r2, sl, #256
 	bl	memcpy
-.L2359:
-	ldr	r8, .L2370
+.L2445:
+	ldr	r8, .L2456
 	mov	r3, #5
-	ldr	r0, .L2370+4
+	ldr	r0, .L2456+4
 	mov	r1, r7
 	mov	r2, #4
 	add	sl, sl, #128
 	bl	rknand_print_hex
-	ldrb	r2, [r8, #1]	@ zero_extendqisi2
+	ldrb	r2, [r8, #853]	@ zero_extendqisi2
 	ldr	r1, [r4, #512]
 	cmp	sl, #256
 	movcs	sl, #256
-	ldr	r0, .L2370+8
+	ldr	r0, .L2456+8
 	mov	fp, #0
 	bl	printk
-	ldrb	r3, [r8, #1]	@ zero_extendqisi2
+	ldrb	r3, [r8, #853]	@ zero_extendqisi2
 	ldr	r2, [r4, #512]
 	mov	r1, sl
-	ldr	r0, .L2370+12
+	ldr	r0, .L2456+12
 	mov	r9, fp
 	cmp	r2, r3
 	mov	r8, r4
@@ -20875,17 +21386,17 @@ write_idblock:
 	bl	printk
 	mov	r1, sl, asl #7
 	str	r1, [sp, #12]
-.L2365:
-	ldr	r1, .L2370
-	movw	r2, #2226
+.L2451:
+	ldr	r1, .L2456
+	movw	r2, #3074
 	ldr	r3, [r6], #4
 	ldrh	r2, [r1, r2]
 	cmp	r3, r2
-	bcs	.L2361
-	ldr	r2, .L2370+16
+	bcs	.L2447
+	ldr	r2, .L2456+16
 	ldr	r2, [r2, #132]
 	cmp	r3, r2
-	bcc	.L2361
+	bcc	.L2447
 	mov	r0, r5
 	mov	r1, #512
 	bl	__memzero
@@ -20903,29 +21414,29 @@ write_idblock:
 	bl	IdBlockReadData
 	mov	r3, #0
 	mov	r7, r3
-.L2364:
+.L2450:
 	ldr	r1, [r5, r3]
 	add	r3, r3, #4
 	add	r2, r8, r3
 	ldr	r2, [r2, #-4]
 	cmp	r1, r2
-	beq	.L2362
+	beq	.L2448
 	bic	r4, r7, #255
 	stmia	sp, {r1, r2}
 	mov	r3, r7
 	mov	r1, r9
 	ldr	r2, [r6, #-4]
 	mov	r4, r4, asl #2
-	ldr	r0, .L2370+20
+	ldr	r0, .L2456+20
 	bl	printk
-	ldr	r0, .L2370+24
+	ldr	r0, .L2456+24
 	add	r1, r8, r4
 	mov	r2, #4
 	mov	r3, #256
 	bl	rknand_print_hex
 	mov	r3, #256
 	mov	r2, #4
-	ldr	r0, .L2370+28
+	ldr	r0, .L2456+28
 	add	r1, r5, r4
 	bl	rknand_print_hex
 	mov	r0, r5
@@ -20937,43 +21448,43 @@ write_idblock:
 	mul	r0, r0, r1
 	mov	r1, #4
 	bl	IDBlockWriteData
-	ldr	r0, .L2370+32
+	ldr	r0, .L2456+32
 	bl	printk
 	ldr	r2, [sp, #12]
 	cmp	r7, r2
-	bcc	.L2361
-	b	.L2363
-.L2362:
+	bcc	.L2447
+	b	.L2449
+.L2448:
 	ldr	r1, [sp, #12]
 	add	r7, r7, #1
 	cmp	r7, r1
-	bne	.L2364
-.L2363:
+	bne	.L2450
+.L2449:
 	add	fp, fp, #1
-.L2361:
+.L2447:
 	add	r9, r9, #1
 	cmp	r9, #5
-	bne	.L2365
+	bne	.L2451
 	mov	r0, r5
-	bl	kfree
+	bl	ftl_free
 	cmp	fp, #0
 	mvneq	r0, #0
 	movne	r0, #0
-.L2358:
+.L2444:
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2371:
+.L2457:
 	.align	2
-.L2370:
+.L2456:
 	.word	.LANCHOR0
-	.word	.LC126
-	.word	.LC127
-	.word	.LC128
+	.word	.LC133
+	.word	.LC134
+	.word	.LC135
 	.word	.LANCHOR2
-	.word	.LC129
-	.word	.LC130
-	.word	.LC131
-	.word	.LC132
+	.word	.LC136
+	.word	.LC137
+	.word	.LC138
+	.word	.LC139
 	.fnend
 	.size	write_idblock, .-write_idblock
 	.align	2
@@ -20988,32 +21499,33 @@ CRC_32:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r2, r0
-	ldr	ip, .L2375
-	b	.L2373
-.L2374:
+	ldr	ip, .L2461
+	b	.L2459
+.L2460:
 	ldrb	r4, [r3, r2]	@ zero_extendqisi2
 	add	r2, r2, #1
 	eor	r4, r4, r0, lsr #24
 	add	r4, ip, r4, asl #2
-	ldr	r4, [r4, #3008]
+	ldr	r4, [r4, #3004]
 	eor	r0, r4, r0, asl #8
-.L2373:
+.L2459:
 	cmp	r2, r1
-	bne	.L2374
+	bne	.L2460
 	ldmfd	sp!, {r4, pc}
-.L2376:
+.L2462:
 	.align	2
-.L2375:
+.L2461:
 	.word	.LANCHOR1
 	.fnend
 	.size	CRC_32, .-CRC_32
 	.align	2
+	.global	rknand_sys_storage_ioctl
 	.type	rknand_sys_storage_ioctl, %function
 rknand_sys_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 528
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2493
+	ldr	r3, .L2579
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	cmp	r1, r3
@@ -21021,106 +21533,103 @@ rknand_sys_storage_ioctl:
 	sub	sp, sp, #528
 	mov	r5, r1
 	mov	r4, r2
-	beq	.L2386
-	bhi	.L2395
-	ldr	r3, .L2493+4
+	beq	.L2472
+	bhi	.L2481
+	ldr	r3, .L2579+4
 	cmp	r1, r3
-	beq	.L2383
-	bhi	.L2396
+	beq	.L2469
+	bhi	.L2482
 	sub	r3, r3, #125
 	cmp	r1, r3
-	beq	.L2380
-	bhi	.L2397
+	beq	.L2466
+	bhi	.L2483
 	sub	r3, r3, #237
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2489
-.L2397:
-	ldr	r3, .L2493+8
+	bne	.L2524
+	b	.L2575
+.L2483:
+	ldr	r3, .L2579+8
 	cmp	r1, r3
-	beq	.L2381
+	beq	.L2467
 	add	r3, r3, #1
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2490
-.L2396:
-	ldr	r3, .L2493+12
+	bne	.L2524
+	b	.L2576
+.L2482:
+	ldr	r3, .L2579+12
 	cmp	r1, r3
-	beq	.L2385
-	bhi	.L2398
-	ldr	r3, .L2493+16
+	beq	.L2471
+	bhi	.L2484
+	ldr	r3, .L2579+16
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2491
-.L2398:
-	ldr	r3, .L2493+20
+	bne	.L2524
+	b	.L2577
+.L2484:
+	ldr	r3, .L2579+20
 	cmp	r1, r3
-	beq	.L2385
+	beq	.L2471
 	add	r3, r3, #10
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2385
-.L2395:
-	ldr	r3, .L2493+24
+	bne	.L2524
+	b	.L2471
+.L2481:
+	ldr	r3, .L2579+24
 	cmp	r1, r3
-	beq	.L2391
-	bhi	.L2399
+	beq	.L2477
+	bhi	.L2485
 	sub	r3, r3, #78
 	cmp	r1, r3
-	beq	.L2388
-	bcc	.L2387
+	beq	.L2474
+	bcc	.L2473
 	add	r3, r3, #21
 	cmp	r1, r3
-	beq	.L2389
+	beq	.L2475
 	add	r3, r3, #56
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2492
-.L2399:
-	ldr	r3, .L2493+28
+	bne	.L2524
+	b	.L2578
+.L2485:
+	ldr	r3, .L2579+28
 	cmp	r1, r3
-	beq	.L2394
-	bhi	.L2400
+	beq	.L2480
+	bhi	.L2486
 	sub	r3, r3, #956
 	sub	r3, r3, #1
 	cmp	r1, r3
-	beq	.L2392
+	beq	.L2478
 	add	r3, r3, #956
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2393
-.L2400:
-	ldr	r3, .L2493+32
+	bne	.L2524
+	b	.L2479
+.L2486:
+	ldr	r3, .L2579+32
 	cmp	r1, r3
-	beq	.L2393
+	beq	.L2479
 	add	r3, r3, #1
 	cmp	r1, r3
-	bne	.L2438
-	b	.L2394
-.L2387:
-	ldr	r0, .L2493+36
+	bne	.L2524
+	b	.L2480
+.L2473:
+	ldr	r0, .L2579+36
 	bl	printk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
+	beq	.L2532
 	mov	r1, r4
 	mov	r2, #512
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2488
-.L2401:
-	ldr	r0, .L2493+44
+	bne	.L2574
+.L2487:
+	ldr	r0, .L2579+40
 	ldmia	r5, {r1, r2}
 	bl	printk
 	ldr	r3, [r5, #4]
 	cmp	r3, #8
 	str	r3, [sp, #4]
-	bhi	.L2409
-	bl	rknand_device_unlock
+	bhi	.L2495
+	bl	rknand_device_lock
 	ldr	r1, [sp, #4]
 	mov	r2, r5
 	ldr	r0, [r5, #0]
@@ -21132,99 +21641,91 @@ rknand_sys_storage_ioctl:
 	mov	r2, r2, asl #9
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L2474
-	ldr	r0, .L2493+48
-.L2487:
+	beq	.L2560
+	ldr	r0, .L2579+44
+.L2573:
 	bl	printk
-	b	.L2409
-.L2388:
-	ldr	r0, .L2493+52
+	b	.L2495
+.L2474:
+	ldr	r0, .L2579+48
 	bl	printk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
+	beq	.L2532
 	mov	r1, r4
 	mov	r2, #4096
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2488
-.L2405:
-	ldr	r4, .L2493+56
-	ldr	r0, .L2493+60
+	bne	.L2574
+.L2491:
+	ldr	r4, .L2579+52
+	ldr	r0, .L2579+56
 	ldmia	r5, {r1, r2}
 	bl	printk
 	ldr	r3, [r4, #436]
 	cmp	r3, #0
-	bne	.L2406
+	bne	.L2492
 	mov	r0, #260096
-	mov	r1, #208
-	mov	r2, #6
-	bl	kmalloc_order_trace
+	bl	ftl_malloc
 	cmp	r0, #0
 	str	r0, [r4, #436]
-	beq	.L2409
-.L2406:
+	beq	.L2495
+.L2492:
 	ldr	r2, [r5, #4]
 	movw	r3, #4088
 	cmp	r2, r3
-	bhi	.L2409
+	bhi	.L2495
 	ldr	r3, [r5, #0]
 	cmp	r3, #251904
-	bhi	.L2409
-	ldr	r1, .L2493+56
+	bhi	.L2495
+	ldr	r1, .L2579+52
 	ldr	r0, [r1, #436]
 	add	r1, r5, #8
 	add	r0, r0, r3
 	bl	memcpy
-.L2474:
+.L2560:
 	mov	r0, r5
-	bl	kfree
-.L2475:
+	bl	ftl_free
+.L2561:
 	mov	r4, #0
-	b	.L2404
-.L2492:
-	ldr	r0, .L2493+64
+	b	.L2490
+.L2578:
+	ldr	r0, .L2579+60
 	bl	printk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
+	beq	.L2532
 	mov	r1, r4
 	mov	r2, #28
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L2408
-.L2488:
-	ldr	r0, .L2493+68
-	b	.L2487
-.L2408:
+	beq	.L2494
+.L2574:
+	ldr	r0, .L2579+64
+	b	.L2573
+.L2494:
 	ldmia	r5, {r1, r2}
-	ldr	r0, .L2493+72
+	ldr	r0, .L2579+68
 	bl	printk
 	ldr	r1, [r5, #0]
 	cmp	r1, #256000
-	bhi	.L2409
-	ldr	r4, .L2493+56
+	bhi	.L2495
+	ldr	r4, .L2579+52
 	ldr	r0, [r4, #436]
 	cmp	r0, #0
-	beq	.L2409
-.L2410:
+	beq	.L2495
+.L2496:
 	bl	CRC_32
 	ldr	r3, [r5, #4]
 	cmp	r3, r0
-	beq	.L2411
+	beq	.L2497
 	mov	r0, r5
-	bl	kfree
-	b	.L2452
-.L2411:
-	bl	rknand_device_unlock
+	bl	ftl_free
+	b	.L2538
+.L2497:
+	bl	rknand_device_lock
 	ldr	r1, [r4, #436]
 	add	r2, r5, #8
 	ldr	r0, [r5, #0]
@@ -21232,54 +21733,48 @@ rknand_sys_storage_ioctl:
 	mov	r6, #0
 	bl	rknand_device_unlock
 	ldr	r0, [r4, #436]
-	bl	kfree
+	bl	ftl_free
 	str	r6, [r4, #436]
 	mov	r0, r5
 	mov	r4, r6
-	bl	kfree
-	b	.L2404
-.L2409:
+	bl	ftl_free
+	b	.L2490
+.L2495:
 	mov	r0, r5
-	b	.L2478
-.L2389:
-	ldr	r0, .L2493+76
+	b	.L2564
+.L2475:
+	ldr	r0, .L2579+72
 	bl	printk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
+	beq	.L2532
 	bl	ReadFlashInfo
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #11
-	b	.L2485
-.L2386:
-	ldr	r0, .L2493+80
+	b	.L2571
+.L2472:
+	ldr	r0, .L2579+76
 	bl	printk
-	bl	rknand_device_unlock
+	bl	rknand_device_lock
 	bl	FtlReInitForSDUpdata
 	mov	r6, r0
 	bl	rknand_device_unlock
 	cmp	r6, #0
-	bne	.L2469
+	bne	.L2555
 	bl	nand_blk_add_whole_disk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
-	bl	rknand_device_unlock
+	beq	.L2532
+	bl	rknand_device_lock
 	mov	r1, r6
 	mov	r2, #64
 	mov	r0, r5
 	bl	FlashReadFacBbtData
 	bl	rknand_device_unlock
-	ldr	r0, .L2493+84
+	ldr	r0, .L2579+80
 	mov	r1, r5
 	mov	r2, #4
 	mov	r3, #8
@@ -21287,29 +21782,26 @@ rknand_sys_storage_ioctl:
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #64
-	b	.L2485
-.L2391:
-	ldr	r0, .L2493+88
+	b	.L2571
+.L2477:
+	ldr	r0, .L2579+84
 	bl	printk
-	ldr	r3, .L2493+56
+	ldr	r3, .L2579+52
 	add	r1, sp, #528
 	mov	r0, r4
 	mov	r2, #4
 	ldr	r3, [r3, #440]
 	ldr	r3, [r3, #20]
 	str	r3, [r1, #-524]!
-	b	.L2482
-.L2392:
-	ldr	r0, .L2493+92
+	b	.L2568
+.L2478:
+	ldr	r0, .L2579+88
 	bl	printk
-	ldr	r3, .L2493+40
-	mov	r1, #208
-	mov	r2, #4096
-	ldr	r0, [r3, #48]
-	bl	kmem_cache_alloc_trace
+	mov	r0, #4096
+	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2446
-	bl	rknand_device_unlock
+	beq	.L2532
+	bl	rknand_device_lock
 	mov	r1, #264
 	mov	r2, #2
 	mov	r3, r5
@@ -21319,82 +21811,82 @@ rknand_sys_storage_ioctl:
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #1024
-.L2485:
+.L2571:
 	bl	rk_copy_to_user
 	subs	r4, r0, #0
 	mov	r0, r5
-	beq	.L2414
-.L2478:
-	bl	kfree
-	b	.L2469
-.L2414:
-	bl	kfree
-	b	.L2404
-.L2380:
-	ldr	r0, .L2493+96
+	beq	.L2500
+.L2564:
+	bl	ftl_free
+	b	.L2555
+.L2500:
+	bl	ftl_free
+	b	.L2490
+.L2466:
+	ldr	r0, .L2579+92
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	subs	r5, r0, #0
-	bne	.L2479
-.L2415:
+	bne	.L2565
+.L2501:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+100
+	ldr	r3, .L2579+96
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2471
-	ldr	r6, .L2493+56
+	bhi	.L2557
+	ldr	r6, .L2579+52
 	mov	r2, #512
 	add	r0, sp, #8
 	ldr	r1, [r6, #440]
 	bl	memcpy
 	ldr	r2, [r6, #444]
-	ldr	r3, .L2493+104
+	ldr	r3, .L2579+100
 	cmp	r2, r3
-	beq	.L2416
+	beq	.L2502
 	add	r0, sp, #72
 	mov	r1, #128
 	str	r5, [sp, #16]
 	str	r5, [sp, #20]
 	bl	__memzero
-.L2416:
+.L2502:
 	add	r0, sp, #264
 	mov	r1, #256
 	mov	r3, #0
 	str	r3, [sp, #24]
 	bl	__memzero
-	b	.L2481
-.L2381:
-	ldr	r0, .L2493+108
+	b	.L2567
+.L2467:
+	ldr	r0, .L2579+104
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2479
-.L2417:
+	bne	.L2565
+.L2503:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+100
+	ldr	r3, .L2579+96
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2471
-	ldr	r4, .L2493+56
-	ldr	r3, .L2493+104
+	bhi	.L2557
+	ldr	r4, .L2579+52
+	ldr	r3, .L2579+100
 	ldr	r2, [r4, #444]
 	cmp	r2, r3
-	bne	.L2452
+	bne	.L2538
 	ldr	r3, [sp, #20]
 	sub	r2, r3, #1
 	cmp	r2, #127
 	mvnhi	r4, #2
-	bhi	.L2378
+	bhi	.L2464
 	ldr	r0, [r4, #440]
 	add	r1, sp, #72
 	str	r3, [r0, #12]
@@ -21403,33 +21895,33 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	r0, #1
 	ldr	r1, [r4, #440]
-	b	.L2476
-.L2491:
-	ldr	r0, .L2493+112
+	b	.L2562
+.L2577:
+	ldr	r0, .L2579+108
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2479
-.L2418:
+	bne	.L2565
+.L2504:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+116
+	ldr	r3, .L2579+112
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2471
-	ldr	r5, .L2493+56
+	bhi	.L2557
+	ldr	r5, .L2579+52
 	ldr	r4, [r5, #448]
 	cmp	r4, #0
-	beq	.L2378
+	beq	.L2464
 	ldr	r3, [r5, #452]
-	ldr	r2, .L2493+120
+	ldr	r2, .L2579+116
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
-	beq	.L2419
+	beq	.L2505
 	str	r2, [r3, #0]
 	mov	r2, #504
 	ldr	r3, [r5, #452]
@@ -21437,21 +21929,21 @@ rknand_sys_storage_ioctl:
 	mov	r2, #0
 	str	r2, [r3, #8]
 	str	r2, [r3, #12]
-.L2419:
+.L2505:
 	ldr	r1, [r5, #452]
 	mov	r4, #0
 	mov	r0, r4
 	str	r4, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r5, #440]
-	ldr	r2, .L2493+100
-	ldr	r5, .L2493+56
+	ldr	r2, .L2579+96
+	ldr	r5, .L2579+52
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
 	strne	r2, [r3, #0]
 	ldr	r0, [r5, #440]
 	mov	r1, #128
-	ldrne	r3, .L2493+56
+	ldrne	r3, .L2579+52
 	movne	r2, #504
 	ldrne	r3, [r3, #440]
 	stmneib	r3, {r2, r4}
@@ -21464,31 +21956,31 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	str	r4, [r5, #448]
 	str	r4, [r5, #444]
-	b	.L2404
-.L2383:
-	ldr	r0, .L2493+124
+	b	.L2490
+.L2469:
+	ldr	r0, .L2579+120
 	bl	printk
 	mov	r1, r4
 	add	r0, sp, #8
 	mov	r2, #520
 	bl	rk_copy_from_user
 	subs	r4, r0, #0
-	bne	.L2479
-.L2421:
+	bne	.L2565
+.L2507:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+128
+	ldr	r3, .L2579+124
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2471
-	ldr	r5, .L2493+56
+	bhi	.L2557
+	ldr	r5, .L2579+52
 	ldr	r3, [r5, #448]
 	cmp	r3, #1
-	beq	.L2378
+	beq	.L2464
 	ldr	r3, [r5, #452]
 	mov	r0, #0
-	ldr	r2, .L2493+120
+	ldr	r2, .L2579+116
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
 	strne	r2, [r3, #0]
@@ -21501,18 +21993,18 @@ rknand_sys_storage_ioctl:
 	str	r3, [r1, #16]
 	bl	StorageSysDataStore
 	ldr	r3, [r5, #440]
-	ldr	r2, .L2493+100
+	ldr	r2, .L2579+96
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
-	beq	.L2423
+	beq	.L2509
 	str	r2, [r3, #0]
 	mov	r1, #504
-	ldr	r3, .L2493+56
+	ldr	r3, .L2579+52
 	mov	r2, #0
 	ldr	r3, [r3, #440]
 	stmib	r3, {r1, r2}
-.L2423:
-	ldr	r5, .L2493+56
+.L2509:
+	ldr	r5, .L2579+52
 	mov	r1, #128
 	mov	r4, #0
 	ldr	r0, [r5, #440]
@@ -21524,53 +22016,53 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	mov	r3, #1
 	str	r3, [r5, #448]
-	b	.L2404
-.L2490:
-	ldr	r0, .L2493+132
+	b	.L2490
+.L2576:
+	ldr	r0, .L2579+128
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2479
-.L2424:
+	bne	.L2565
+.L2510:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+136
+	ldr	r3, .L2579+132
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r2, [sp, #12]
 	cmp	r2, #512
 	addls	r0, sp, #16
-	ldrls	r1, .L2493+140
-	bls	.L2480
-	b	.L2471
-.L2385:
-	ldr	r3, .L2493+20
+	ldrls	r1, .L2579+136
+	bls	.L2566
+	b	.L2557
+.L2471:
+	ldr	r3, .L2579+20
 	cmp	r5, r3
-	ldreq	r0, .L2493+144
-	beq	.L2472
-	ldr	r3, .L2493+148
+	ldreq	r0, .L2579+140
+	beq	.L2558
+	ldr	r3, .L2579+144
 	cmp	r5, r3
-	ldreq	r0, .L2493+152
-	ldrne	r0, .L2493+156
-.L2472:
+	ldreq	r0, .L2579+148
+	ldrne	r0, .L2579+152
+.L2558:
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2479
-.L2428:
+	bne	.L2565
+.L2514:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+160
+	ldr	r3, .L2579+156
 	cmp	r2, r3
-	bne	.L2469
-	ldr	r3, .L2493+148
-	ldr	r6, .L2493+56
+	bne	.L2555
+	ldr	r3, .L2579+144
+	ldr	r6, .L2579+52
 	cmp	r5, r3
-	bne	.L2429
+	bne	.L2515
 	ldr	r3, [r6, #440]
 	mov	r0, r4
 	add	r1, sp, #8
@@ -21582,29 +22074,29 @@ rknand_sys_storage_ioctl:
 	cmp	r0, #0
 	moveq	r4, r0
 	mvnne	r4, #13
-	b	.L2378
-.L2429:
+	b	.L2464
+.L2515:
 	ldr	r3, [r6, #968]
 	cmp	r3, #10
-	bhi	.L2469
+	bhi	.L2555
 	ldr	r3, [r6, #440]
 	ldr	r1, [sp, #12]
 	ldr	r2, [r3, #24]
 	cmp	r2, r1
-	beq	.L2430
+	beq	.L2516
 	cmp	r2, #0
-	beq	.L2430
-	ldr	r0, .L2493+164
+	beq	.L2516
+	ldr	r0, .L2579+160
 	bl	printk
 	ldr	r3, [r6, #968]
 	add	r3, r3, #1
 	str	r3, [r6, #968]
-	b	.L2469
-.L2430:
-	ldr	r0, .L2493+56
+	b	.L2555
+.L2516:
+	ldr	r0, .L2579+52
 	mov	r2, #0
 	str	r2, [r0, #968]
-	ldr	r0, .L2493+20
+	ldr	r0, .L2579+20
 	cmp	r5, r0
 	mov	r0, #1
 	strne	r1, [r3, #24]
@@ -21617,112 +22109,112 @@ rknand_sys_storage_ioctl:
 	cmn	r0, #1
 	mvneq	r4, #1
 	movne	r4, #0
-	b	.L2404
-.L2393:
-	ldr	r0, .L2493+168
+	b	.L2490
+.L2479:
+	ldr	r0, .L2579+164
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2479
-.L2433:
+	bne	.L2565
+.L2519:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+172
+	ldr	r3, .L2579+168
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L2471
-	ldr	r3, .L2493+176
+	bhi	.L2557
+	ldr	r3, .L2579+172
 	add	r0, sp, #16
 	cmp	r5, r3
-	ldr	r3, .L2493+56
+	ldr	r3, .L2579+52
 	ldreq	r1, [r3, #972]
 	ldrne	r1, [r3, #976]
 	add	r1, r1, #8
-.L2480:
+.L2566:
 	bl	memcpy
-.L2481:
+.L2567:
 	add	r1, sp, #8
 	mov	r0, r4
 	mov	r2, #520
-.L2482:
+.L2568:
 	bl	rk_copy_to_user
 	subs	r4, r0, #0
-	bne	.L2469
-	b	.L2404
-.L2394:
-	ldr	r0, .L2493+180
+	bne	.L2555
+	b	.L2490
+.L2480:
+	ldr	r0, .L2579+176
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L2436
-.L2479:
-	ldr	r0, .L2493+68
+	beq	.L2522
+.L2565:
+	ldr	r0, .L2579+64
 	bl	printk
-	b	.L2469
-.L2436:
+	b	.L2555
+.L2522:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2493+172
+	ldr	r3, .L2579+168
 	cmp	r2, r3
-	bne	.L2471
+	bne	.L2557
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L2471
-	ldr	r3, .L2493+28
+	bhi	.L2557
+	ldr	r3, .L2579+28
 	add	r2, r2, #8
-	ldr	r4, .L2493+56
+	ldr	r4, .L2579+52
 	cmp	r5, r3
-	bne	.L2437
+	bne	.L2523
 	add	r1, sp, #8
 	ldr	r0, [r4, #972]
 	bl	memcpy
 	ldr	r1, [r4, #972]
 	mov	r0, #2
-.L2476:
+.L2562:
 	bl	StorageSysDataStore
 	mov	r4, r0
-	b	.L2404
-.L2437:
+	b	.L2490
+.L2523:
 	add	r1, sp, #8
 	ldr	r0, [r4, #976]
 	bl	memcpy
 	mov	r0, #3
 	ldr	r1, [r4, #976]
-	b	.L2476
-.L2489:
+	b	.L2562
+.L2575:
 	bl	rknand_dev_flush
-	b	.L2475
-.L2471:
+	b	.L2561
+.L2557:
 	mvn	r4, #0
-.L2404:
+.L2490:
 	mov	r1, r4
-	ldr	r0, .L2493+184
+	ldr	r0, .L2579+180
 	bl	printk
-	b	.L2378
-.L2438:
+	b	.L2464
+.L2524:
 	mvn	r4, #21
-	b	.L2378
-.L2446:
+	b	.L2464
+.L2532:
 	mvn	r4, #11
-	b	.L2378
-.L2452:
+	b	.L2464
+.L2538:
 	mvn	r4, #1
-	b	.L2378
-.L2469:
+	b	.L2464
+.L2555:
 	mvn	r4, #13
-.L2378:
+.L2464:
 	mov	r0, r4
 	add	sp, sp, #528
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2494:
+.L2580:
 	.align	2
-.L2493:
+.L2579:
 	.word	1074033155
 	.word	1074029694
 	.word	1074029570
@@ -21732,44 +22224,43 @@ rknand_sys_storage_ioctl:
 	.word	1074033235
 	.word	1074034193
 	.word	1074034194
-	.word	.LC133
-	.word	kmalloc_caches
-	.word	.LC135
-	.word	.LC136
-	.word	.LC137
-	.word	.LANCHOR2
-	.word	.LC138
-	.word	.LC139
-	.word	.LC134
 	.word	.LC140
-	.word	.LC141
 	.word	.LC142
 	.word	.LC143
 	.word	.LC144
+	.word	.LANCHOR2
 	.word	.LC145
 	.word	.LC146
-	.word	1263358532
-	.word	-1067903959
+	.word	.LC141
 	.word	.LC147
 	.word	.LC148
+	.word	.LC149
+	.word	.LC150
+	.word	.LC151
+	.word	.LC152
+	.word	.LC153
+	.word	1263358532
+	.word	-1067903959
+	.word	.LC154
+	.word	.LC155
 	.word	1112753220
 	.word	1146313043
-	.word	.LC149
+	.word	.LC156
 	.word	1112755781
-	.word	.LC150
+	.word	.LC157
 	.word	1094995539
 	.word	.LANCHOR2+456
-	.word	.LC151
+	.word	.LC158
 	.word	1074031676
-	.word	.LC152
-	.word	.LC153
+	.word	.LC159
+	.word	.LC160
 	.word	1280262987
-	.word	.LC154
-	.word	.LC155
+	.word	.LC161
+	.word	.LC162
 	.word	1145980246
 	.word	1074034192
-	.word	.LC156
-	.word	.LC157
+	.word	.LC163
+	.word	.LC164
 	.fnend
 	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
 	.align	2
@@ -21782,10 +22273,10 @@ rk_ftl_storage_sys_init:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r2, #512
-	ldr	r4, .L2498
+	ldr	r4, .L2584
 	mov	r6, #0
 	add	r0, r4, #456
-	ldr	r5, [r4, #416]
+	ldr	r5, [r4, #428]
 	str	r6, [r4, #436]
 	add	r1, r5, #1536
 	add	r3, r5, #512
@@ -21801,39 +22292,37 @@ rk_ftl_storage_sys_init:
 	str	r6, [r4, #444]
 	str	r6, [r4, #968]
 	str	r3, [r4, #448]
-	beq	.L2496
+	beq	.L2582
 	mov	r0, r5
 	mov	r1, #508
 	bl	JSHash
 	cmp	r7, r0
-	beq	.L2496
+	beq	.L2582
 	str	r6, [r5, #16]
-	ldr	r0, .L2498+4
+	ldr	r0, .L2584+4
 	str	r6, [r4, #448]
 	bl	printk
-.L2496:
+.L2582:
 	ldr	r3, [r4, #448]
 	mov	r0, #2
-	ldr	r4, .L2498
+	ldr	r4, .L2584
 	cmp	r3, #0
-	ldrne	r2, .L2498+8
-	ldrne	r3, .L2498
+	ldrne	r2, .L2584+8
+	ldrne	r3, .L2584
 	ldr	r1, [r4, #972]
 	strne	r2, [r3, #444]
 	bl	StorageSysDataLoad
 	ldr	r1, [r4, #976]
 	mov	r0, #3
 	bl	StorageSysDataLoad
-	ldr	r0, .L2498+12
 	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
-	b	misc_register
-.L2499:
+	b	rknand_sys_storage_init
+.L2585:
 	.align	2
-.L2498:
+.L2584:
 	.word	.LANCHOR2
-	.word	.LC158
+	.word	.LC165
 	.word	-1067903959
-	.word	.LANCHOR1+4032
 	.fnend
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
 	.align	2
@@ -21843,19 +22332,420 @@ StorageSysDataDeInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	ldr	r0, .L2501
-	bl	misc_deregister
+	@ link register save eliminated.
 	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L2502:
-	.align	2
-.L2501:
-	.word	.LANCHOR1+4032
+	bx	lr
 	.fnend
 	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
-	.global	rknand_sys_storage_fops
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r0, #65536
+	mov	r1, #209
+	mov	r2, #4
+	bl	kmalloc_order_trace
+	ldr	r7, .L2595
+	cmp	r0, #0
+	str	r0, [r7, #980]
+	beq	.L2593
+	ldr	sl, .L2595+4
+	mov	r6, #0
+	mov	r4, r6
+	mov	r5, r6
+	movw	r8, #65532
+.L2591:
+	ldr	r0, [r7, #980]
+	mov	r1, r5, asl #7
+	mov	r2, #0
+	bl	rk_ftl_vendor_ops.constprop.20
+	cmp	r0, #0
+	bne	.L2589
+	ldr	r3, [r7, #980]
+	ldr	r0, .L2595+8
+	ldr	r1, [r3, #0]
+	ldr	r2, [r3, r8]
+	ldr	r3, [r3, #4]
+	bl	printk
+	ldr	r0, [r7, #980]
+	ldr	r3, [r0, #0]
+	cmp	r3, sl
+	bne	.L2590
+	ldr	r3, [r0, r8]
+	ldr	r2, [r0, #4]
+	cmp	r3, r2
+	bne	.L2590
+	cmp	r4, r3
+	movcc	r6, r5
+	movcc	r4, r3
+.L2590:
+	add	r5, r5, #1
+	cmp	r5, #2
+	bne	.L2591
+	cmp	r4, #0
+	beq	.L2592
+	mov	r1, r6, asl #7
+	mov	r2, #0
+	bl	rk_ftl_vendor_ops.constprop.20
+	cmp	r0, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+	b	.L2589
+.L2592:
+	mov	r1, #65536
+	bl	__memzero
+	ldr	r3, .L2595
+	ldr	r1, .L2595+4
+	mov	r2, #1
+	mov	r0, r4
+	ldr	r3, [r3, #980]
+	stmia	r3, {r1, r2}
+	movw	r1, #65532
+	str	r2, [r3, r1]
+	ldr	r2, .L2595+12
+	strh	r4, [r3, #12]	@ movhi
+	strh	r2, [r3, #14]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2589:
+	ldr	r4, .L2595
+	ldr	r0, [r4, #980]
+	bl	kfree
+	mov	r3, #0
+	mvn	r0, #0
+	str	r3, [r4, #980]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2593:
+	mvn	r0, #11
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2596:
+	.align	2
+.L2595:
+	.word	.LANCHOR2
+	.word	1380668996
+	.word	.LC166
+	.word	-1032
+	.fnend
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
+	mov	r0, r1
+	ldr	r1, .L2604
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	ip, [r1, #980]
+	cmp	ip, #0
+	ldrneh	r4, [ip, #10]
+	movne	r5, ip
+	movne	r1, #0
+	bne	.L2599
+	b	.L2603
+.L2601:
+	ldrh	r6, [r5, #16]
+	add	r5, r5, #8
+	cmp	r6, r3
+	bne	.L2600
+	add	r1, r1, #2
+	add	r1, ip, r1, asl #3
+	ldrh	r4, [r1, #4]
+	ldrh	r1, [r1, #2]
+	cmp	r2, r4
+	movcc	r4, r2
+	add	r1, r1, #1024
+	add	r1, ip, r1
+	mov	r2, r4
+	bl	memcpy
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2600:
+	add	r1, r1, #1
+.L2599:
+	cmp	r1, r4
+	bcc	.L2601
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2603:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2605:
+	.align	2
+.L2604:
+	.word	.LANCHOR2
+	.fnend
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2623
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	sl, r0
+	ldr	r4, [r3, #980]
+	.pad #20
+	sub	sp, sp, #20
+	mov	r9, r1
+	mov	r5, r2
+	cmp	r4, #0
+	beq	.L2619
+	add	r8, r2, #63
+	ldrh	r2, [r4, #8]
+	ldrh	r3, [r4, #10]
+	bic	r8, r8, #63
+	mov	r7, #0
+	str	r2, [sp, #8]
+	b	.L2608
+.L2615:
+	add	r2, r7, #2
+	mov	r2, r2, asl #3
+	add	r6, r4, r2
+	ldrh	r2, [r4, r2]
+	cmp	r2, sl
+	bne	.L2609
+	ldrh	r2, [r6, #4]
+	add	r2, r2, #63
+	bic	r2, r2, #63
+	str	r2, [sp, #12]
+	cmp	r5, r2
+	bls	.L2610
+	ldrh	r2, [r4, #14]
+	cmp	r2, r8
+	bcc	.L2619
+	sub	r3, r3, #1
+	mov	fp, r8
+	ldrh	r6, [r6, #2]
+	mov	r8, r3
+	b	.L2611
+.L2612:
+	add	r7, r7, #1
+	mov	r2, r2, asl #3
+	add	r0, r7, #2
+	add	r3, r4, r2
+	mov	r0, r0, asl #3
+	add	r1, r4, r0
+	ldrh	r0, [r4, r0]
+	strh	r0, [r4, r2]	@ movhi
+	add	r0, r6, #1024
+	ldrh	r2, [r1, #4]
+	add	r0, r4, r0
+	strh	r6, [r3, #2]	@ movhi
+	strh	r2, [r3, #4]	@ movhi
+	ldrh	r3, [r1, #4]
+	ldrh	r1, [r1, #2]
+	add	r3, r3, #63
+	bic	r3, r3, #63
+	add	r1, r1, #1024
+	add	r1, r4, r1
+	str	r3, [sp, #4]
+	mov	r2, r3
+	bl	memcpy
+	ldr	r3, [sp, #4]
+	add	r6, r6, r3
+.L2611:
+	cmp	r7, r8
+	add	r2, r7, #2
+	bcc	.L2612
+	mov	r2, r2, asl #3
+	uxth	r6, r6
+	add	r3, r4, r2
+	add	r0, r6, #1024
+	strh	sl, [r4, r2]	@ movhi
+	add	r0, r4, r0
+	strh	r6, [r3, #2]	@ movhi
+	mov	r2, r5
+	strh	r5, [r3, #4]	@ movhi
+	mov	r1, r9
+	bl	memcpy
+	ldrh	r3, [r4, #14]
+	ldr	r2, [sp, #12]
+	uxth	r8, fp
+	add	r6, r6, r8
+	strh	r6, [r4, #12]	@ movhi
+	add	r3, r2, r3
+	rsb	r8, r8, r3
+	strh	r8, [r4, #14]	@ movhi
+	b	.L2622
+.L2610:
+	ldrh	r0, [r6, #2]
+	mov	r1, r9
+	mov	r2, r5
+	add	r0, r0, #1024
+	add	r0, r4, r0
+	bl	memcpy
+	strh	r5, [r6, #4]	@ movhi
+	b	.L2622
+.L2609:
+	add	r7, r7, #1
+.L2608:
+	cmp	r7, r3
+	bcc	.L2615
+	ldrh	r2, [r4, #14]
+	cmp	r2, r8
+	bcc	.L2619
+	add	r3, r3, #2
+	uxth	r8, r8
+	mov	r1, r9
+	mov	r3, r3, asl #3
+	add	r2, r4, r3
+	strh	sl, [r4, r3]	@ movhi
+	ldrh	r3, [r4, #12]
+	strh	r5, [r2, #4]	@ movhi
+	strh	r3, [r2, #2]	@ movhi
+	ldrh	r3, [r4, #12]
+	add	r3, r8, r3
+	strh	r3, [r4, #12]	@ movhi
+	ldrh	r3, [r4, #14]
+	rsb	r8, r8, r3
+	strh	r8, [r4, #14]	@ movhi
+	ldrh	r0, [r2, #2]
+	mov	r2, r5
+	add	r0, r0, #1024
+	add	r0, r4, r0
+	bl	memcpy
+	ldrh	r3, [r4, #10]
+	add	r3, r3, #1
+	strh	r3, [r4, #10]	@ movhi
+.L2622:
+	ldr	r3, [r4, #4]
+	movw	r2, #65532
+	mov	r0, r4
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	str	r3, [r4, r2]
+	mov	r2, #1
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #8]	@ movhi
+	cmp	r3, #1
+	movhi	r3, #0
+	strhih	r3, [r4, #8]	@ movhi
+	ldr	r3, [sp, #8]
+	mov	r1, r3, asl #7
+	bl	rk_ftl_vendor_ops.constprop.20
+	mov	r0, #0
+	b	.L2607
+.L2619:
+	mvn	r0, #0
+.L2607:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2624:
+	.align	2
+.L2623:
+	.word	.LANCHOR2
+	.fnend
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2642
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r2
+	mov	r6, r1
+	ldr	r0, [r3, #48]
+	mov	r1, #208
+	mov	r2, #4096
+	bl	kmem_cache_alloc_trace
+	subs	r4, r0, #0
+	mvneq	r5, #0
+	beq	.L2626
+	ldr	r3, .L2642+4
+	cmp	r6, r3
+	beq	.L2628
+	add	r3, r3, #1
+	cmp	r6, r3
+	bne	.L2639
+	b	.L2641
+.L2628:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2639
+	ldr	r2, [r4, #0]
+	ldr	r3, .L2642+8
+	cmp	r2, r3
+	bne	.L2638
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_read
+	cmn	r0, #1
+	beq	.L2634
+	uxth	r2, r0
+	mov	r1, r4
+	strh	r2, [r4, #6]	@ movhi
+	mov	r0, r5
+	add	r2, r2, #8
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	moveq	r5, r0
+	mvnne	r5, #13
+	b	.L2627
+.L2641:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2639
+	ldr	r2, [r4, #0]
+	ldr	r3, .L2642+8
+	cmp	r2, r3
+	bne	.L2638
+	ldrh	r2, [r4, #6]
+	movw	r3, #4087
+	cmp	r2, r3
+	bhi	.L2638
+	mov	r0, r4
+	mov	r1, r5
+	add	r2, r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2639
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_write
+.L2634:
+	mov	r5, r0
+	b	.L2627
+.L2638:
+	mvn	r5, #0
+	b	.L2627
+.L2639:
+	mvn	r5, #13
+.L2627:
+	mov	r0, r4
+	bl	kfree
+.L2626:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2643:
+	.align	2
+.L2642:
+	.word	kmalloc_caches
+	.word	1074034177
+	.word	1448232273
+	.fnend
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
 	.global	gTable_Crc32
 	.global	SecureBootUnlockTryCount
 	.global	SecureBootCheckOK
@@ -22091,18 +22981,18 @@ StorageSysDataDeInit:
 	.global	read_retry_cur_offset
 	.section	.rodata
 	.set	.LANCHOR3,. + 0
-	.type	__func__.14255, %object
-	.size	__func__.14255, 11
-__func__.14255:
+	.type	__func__.14251, %object
+	.size	__func__.14251, 11
+__func__.14251:
 	.ascii	"FtlMemInit\000"
 .LC0:
 	.byte	60
 	.byte	40
 	.byte	24
 	.byte	16
-	.type	__func__.15131, %object
-	.size	__func__.15131, 21
-__func__.15131:
+	.type	__func__.15149, %object
+	.size	__func__.15149, 21
+__func__.15149:
 	.ascii	"FtlVpcCheckAndModify\000"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC1:
@@ -22255,14 +23145,14 @@ __func__.15131:
 .LC74:
 	.ascii	"%s\012\000"
 .LC75:
-	.ascii	"FTL version: 5.0.36 20170512\000"
+	.ascii	"FTL version: 5.0.44 20171016\000"
 .LC76:
 	.ascii	"GetSwlReplaceBlock min_ec_id =%x %x\012\000"
 .LC77:
 	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
 	.ascii	"\012\000"
 .LC78:
-	.ascii	"FtlGcRefreshBlock  0x%x \012\000"
+	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
 .LC79:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC80:
@@ -22281,15 +23171,15 @@ __func__.15131:
 .LC86:
 	.ascii	"%d flReg.d32=%x %x\012\000"
 .LC87:
-	.ascii	"ECC:%d\012\000"
+	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
 .LC88:
-	.ascii	"sdr read ok %x ecc=%d\012\000"
+	.ascii	"ECC:%d\012\000"
 .LC89:
-	.ascii	"sync para %d\012\000"
+	.ascii	"sdr read ok %x ecc=%d\012\000"
 .LC90:
-	.ascii	"TOG mode Read error %x %x\012\000"
+	.ascii	"sync para %d\012\000"
 .LC91:
-	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+	.ascii	"TOG mode Read error %x %x\012\000"
 .LC92:
 	.ascii	"read retry status %x %x %x\012\000"
 .LC93:
@@ -22299,7 +23189,7 @@ __func__.15131:
 .LC95:
 	.ascii	"spare:\000"
 .LC96:
-	.ascii	"ReadRetry pageadd=%x  ecc=%x err=%x\012\000"
+	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
 .LC97:
 	.ascii	"slc mode\000"
 .LC98:
@@ -22313,123 +23203,283 @@ __func__.15131:
 .LC102:
 	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC103:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC104:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC105:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC106:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC107:
-	.ascii	"FlashMakeFactorBbt %d\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC108:
-	.ascii	"bad block:%d %d\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC109:
-	.ascii	"FMFB:%d %d\012\000"
+	.ascii	"FlashMakeFactorBbt %d\012\000"
 .LC110:
-	.ascii	"E:bad block:%d\012\000"
+	.ascii	"bad block:%d %d\012\000"
 .LC111:
-	.ascii	"FMFB:Save %d %d\012\000"
+	.ascii	"FMFB:%d %d\012\000"
 .LC112:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"E:bad block:%d\012\000"
 .LC113:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"FMFB:Save %d %d\012\000"
 .LC114:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC115:
-	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC116:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC117:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC118:
-	.ascii	"FtlInit %x\012\000"
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC119:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
 .LC120:
-	.ascii	"FLFB:%d %d\012\000"
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC121:
-	.ascii	"BBT:\000"
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC122:
-	.ascii	"IdBlockReadData %x %x\012\000"
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC123:
-	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+	.ascii	"FLFB:%d %d\012\000"
 .LC124:
-	.ascii	"IDBlockWriteData %x %x\012\000"
+	.ascii	"BBT:\000"
 .LC125:
-	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+	.ascii	"otp error! %d\000"
 .LC126:
-	.ascii	"idblk:\000"
+	.ascii	"rr\000"
 .LC127:
-	.ascii	"idb reverse %x %x\012\000"
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
 .LC128:
-	.ascii	"write_idblock totle_sec %x %x\012\000"
+	.ascii	"FtlInit %x\012\000"
 .LC129:
+	.ascii	"IdBlockReadData %x %x\012\000"
+.LC130:
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+.LC131:
+	.ascii	"IDBlockWriteData %x %x\012\000"
+.LC132:
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+.LC133:
+	.ascii	"idblk:\000"
+.LC134:
+	.ascii	"idb reverse %x %x\012\000"
+.LC135:
+	.ascii	"write_idblock totle_sec %x %x\012\000"
+.LC136:
 	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
 	.ascii	"\012\000"
-.LC130:
+.LC137:
 	.ascii	"write\000"
-.LC131:
+.LC138:
 	.ascii	"read\000"
-.LC132:
+.LC139:
 	.ascii	"write_idblock error\012\000"
-.LC133:
+.LC140:
 	.ascii	"READ_SECTOR_IO\012\000"
-.LC134:
+.LC141:
 	.ascii	"rk_copy_from_user error\012\000"
-.LC135:
+.LC142:
 	.ascii	"READ_SECTOR_IO %x %x\012\000"
-.LC136:
+.LC143:
 	.ascii	"rk_copy_to_user error\012\000"
-.LC137:
+.LC144:
 	.ascii	"WRITE_SECTOR_IO\012\000"
-.LC138:
+.LC145:
 	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
-.LC139:
+.LC146:
 	.ascii	"END_WRITE_SECTOR_IO\012\000"
-.LC140:
+.LC147:
 	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
-.LC141:
+.LC148:
 	.ascii	"GET_FLASH_INFO_IO\012\000"
-.LC142:
+.LC149:
 	.ascii	"GET_BAD_BLOCK_IO\012\000"
-.LC143:
+.LC150:
 	.ascii	"bbt:\000"
-.LC144:
+.LC151:
 	.ascii	"GET_LOCK_FLAG_IO\012\000"
-.LC145:
+.LC152:
 	.ascii	"GET_PUBLIC_KEY_IO\012\000"
-.LC146:
+.LC153:
 	.ascii	"RKNAND_GET_DRM_KEY\012\000"
-.LC147:
+.LC154:
 	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
-.LC148:
+.LC155:
 	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
-.LC149:
+.LC156:
 	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
-.LC150:
+.LC157:
 	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
-.LC151:
+.LC158:
 	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
-.LC152:
+.LC159:
 	.ascii	"RKNAND_LOADER_STATUS\012\000"
-.LC153:
+.LC160:
 	.ascii	"RKNAND_LOADER_LOCK\012\000"
-.LC154:
+.LC161:
 	.ascii	"LockKey not match %d\012\000"
-.LC155:
+.LC162:
 	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
-.LC156:
+.LC163:
 	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
-.LC157:
+.LC164:
 	.ascii	"return ret = %lx\012\000"
-.LC158:
+.LC165:
 	.ascii	"secureBootEn check error\012\000"
-.LC159:
-	.ascii	"rknand_sys_storage\000"
+.LC166:
+	.ascii	"\0013vendor storage %x,%x,%x\012\000"
 	.data
 	.align	2
 	.set	.LANCHOR1,. + 0
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
 	.type	random_seed, %object
 	.size	random_seed, 256
 random_seed:
@@ -22772,7 +23822,7 @@ NandFlashParaTbl:
 	.byte	0
 	.byte	0
 	.space	4
-	.byte	6
+	.byte	5
 	.byte	44
 	.byte	-124
 	.byte	100
@@ -23033,19 +24083,19 @@ NandFlashParaTbl:
 	.byte	0
 	.space	4
 	.byte	5
-	.byte	-75
+	.byte	44
 	.byte	100
 	.byte	100
-	.byte	86
-	.byte	-91
+	.byte	84
+	.byte	-92
 	.byte	0
 	.byte	4
 	.byte	1
-	.byte	24
+	.byte	32
 	.short	512
 	.byte	2
-	.byte	2
-	.short	700
+	.byte	1
+	.short	1024
 	.short	479
 	.byte	4
 	.byte	18
@@ -23071,7 +24121,7 @@ NandFlashParaTbl:
 	.short	512
 	.byte	2
 	.byte	1
-	.short	1088
+	.short	1048
 	.short	1503
 	.byte	5
 	.byte	19
@@ -23230,7 +24280,7 @@ NandFlashParaTbl:
 	.short	1066
 	.short	473
 	.byte	1
-	.byte	3
+	.byte	7
 	.byte	40
 	.byte	32
 	.byte	4
@@ -24607,152 +25657,6 @@ SamsungRefValue:
 	.byte	12
 	.byte	2
 	.byte	0
-	.type	ToshibaA19RefValue, %object
-	.size	ToshibaA19RefValue, 45
-ToshibaA19RefValue:
-	.byte	4
-	.byte	5
-	.byte	6
-	.byte	7
-	.byte	13
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	4
-	.byte	4
-	.byte	124
-	.byte	126
-	.byte	0
-	.byte	0
-	.byte	124
-	.byte	120
-	.byte	120
-	.byte	0
-	.byte	124
-	.byte	118
-	.byte	116
-	.byte	114
-	.byte	0
-	.byte	8
-	.byte	8
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	11
-	.byte	126
-	.byte	118
-	.byte	116
-	.byte	0
-	.byte	16
-	.byte	118
-	.byte	114
-	.byte	112
-	.byte	0
-	.byte	2
-	.byte	0
-	.byte	126
-	.byte	124
-	.byte	0
-	.type	Toshiba15RefValue, %object
-	.size	Toshiba15RefValue, 95
-Toshiba15RefValue:
-	.byte	4
-	.byte	5
-	.byte	6
-	.byte	7
-	.byte	13
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	2
-	.byte	4
-	.byte	2
-	.byte	0
-	.byte	0
-	.byte	8
-	.byte	8
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	124
-	.byte	0
-	.byte	124
-	.byte	124
-	.byte	0
-	.byte	122
-	.byte	0
-	.byte	122
-	.byte	122
-	.byte	0
-	.byte	11
-	.byte	126
-	.byte	118
-	.byte	116
-	.byte	0
-	.byte	120
-	.byte	2
-	.byte	120
-	.byte	122
-	.byte	0
-	.byte	126
-	.byte	4
-	.byte	126
-	.byte	122
-	.byte	0
-	.byte	16
-	.byte	118
-	.byte	114
-	.byte	112
-	.byte	0
-	.byte	118
-	.byte	4
-	.byte	118
-	.byte	120
-	.byte	0
-	.byte	4
-	.byte	4
-	.byte	4
-	.byte	118
-	.byte	0
-	.byte	2
-	.byte	0
-	.byte	126
-	.byte	124
-	.byte	0
-	.byte	6
-	.byte	10
-	.byte	6
-	.byte	2
-	.byte	0
-	.byte	116
-	.byte	124
-	.byte	116
-	.byte	118
-	.byte	0
-	.byte	4
-	.byte	4
-	.byte	124
-	.byte	126
-	.byte	0
-	.byte	0
-	.byte	124
-	.byte	120
-	.byte	120
-	.byte	0
-	.byte	124
-	.byte	118
-	.byte	116
-	.byte	114
-	.byte	0
 	.type	ToshibaRefValue, %object
 	.size	ToshibaRefValue, 8
 ToshibaRefValue:
@@ -24764,6 +25668,19 @@ ToshibaRefValue:
 	.byte	8
 	.byte	12
 	.byte	112
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.short	-1
+	.space	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
 	.type	refValueDefault, %object
 	.size	refValueDefault, 28
 refValueDefault:
@@ -24795,14 +25712,6 @@ refValueDefault:
 	.byte	0
 	.byte	-32
 	.byte	-37
-	.type	gFtlInitStatus, %object
-	.size	gFtlInitStatus, 4
-gFtlInitStatus:
-	.word	-1
-	.type	micron_flash_randomizer_flag, %object
-	.size	micron_flash_randomizer_flag, 4
-micron_flash_randomizer_flag:
-	.word	1
 	.type	gSlcNandParaInfo, %object
 	.size	gSlcNandParaInfo, 32
 gSlcNandParaInfo:
@@ -24832,15 +25741,6 @@ gSlcNandParaInfo:
 	.byte	0
 	.byte	0
 	.space	4
-	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
-	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
-ftl_gc_temp_block_bops_scan_page_addr:
-	.short	-1
-	.space	2
-	.type	power_up_flag, %object
-	.size	power_up_flag, 4
-power_up_flag:
-	.word	1
 	.type	gTable_Crc32, %object
 	.size	gTable_Crc32, 1024
 gTable_Crc32:
@@ -25100,28 +26000,14 @@ gTable_Crc32:
 	.word	-1199924262
 	.word	-1254519549
 	.word	-1309114188
-	.type	rknand_sys_storage_dev, %object
-	.size	rknand_sys_storage_dev, 36
-rknand_sys_storage_dev:
-	.word	255
-	.word	.LC159
-	.word	rknand_sys_storage_fops
-	.space	24
-	.type	rknand_sys_storage_fops, %object
-	.size	rknand_sys_storage_fops, 112
-rknand_sys_storage_fops:
-	.space	36
-	.word	rknand_sys_storage_ioctl
-	.word	rknand_sys_storage_ioctl
-	.space	4
-	.word	rknand_sys_storage_open
-	.space	4
-	.word	rknand_sys_storage_release
-	.space	52
 	.bss
 	.align	2
 	.set	.LANCHOR0,. + 0
 	.set	.LANCHOR2,. + 8184
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.space	852
 	.type	g_slc2KBNand, %object
 	.size	g_slc2KBNand, 1
 g_slc2KBNand:
@@ -25140,10 +26026,6 @@ gBlockPageAlignSize:
 gNandRandomizer:
 	.space	1
 	.space	3
-	.type	gNandcVer, %object
-	.size	gNandcVer, 4
-gNandcVer:
-	.space	4
 	.type	gNandChipMap, %object
 	.size	gNandChipMap, 32
 gNandChipMap:
@@ -25225,10 +26107,6 @@ gpNandParaInfo:
 	.size	gDieOp, 128
 gDieOp:
 	.space	128
-	.type	gReadRetryInfo, %object
-	.size	gReadRetryInfo, 852
-gReadRetryInfo:
-	.space	852
 	.type	read_retry_cur_offset, %object
 	.size	read_retry_cur_offset, 4
 read_retry_cur_offset:
@@ -25259,13 +26137,13 @@ gFlashInterfaceMode:
 gFlashToggleModeEn:
 	.space	1
 	.space	2
-	.type	gFlashPageBuffer0, %object
-	.size	gFlashPageBuffer0, 4
-gFlashPageBuffer0:
-	.space	4
 	.type	gBootDdrMode, %object
 	.size	gBootDdrMode, 4
 gBootDdrMode:
+	.space	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
 	.space	4
 	.type	g_nandc_version_data, %object
 	.size	g_nandc_version_data, 4
@@ -25889,6 +26767,10 @@ g_maxRetryCount:
 	.type	gpFlashSaveInfo, %object
 	.size	gpFlashSaveInfo, 4
 gpFlashSaveInfo:
+	.space	4
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 4
+gFlashPageBuffer0:
 	.space	4
 	.type	gNandFlashIDBEccBits, %object
 	.size	gNandFlashIDBEccBits, 1
@@ -25912,27 +26794,15 @@ gNandIDBResBlkNumSaveInFlash:
 	.size	FlashDdrTunningReadCount, 4
 FlashDdrTunningReadCount:
 	.space	4
-	.type	gFlashSpareBuffer, %object
-	.size	gFlashSpareBuffer, 4
-gFlashSpareBuffer:
-	.space	4
-	.type	gFlashProgCheckBuffer, %object
-	.size	gFlashProgCheckBuffer, 4
-gFlashProgCheckBuffer:
-	.space	4
-	.type	gFlashProgCheckSpareBuffer, %object
-	.size	gFlashProgCheckSpareBuffer, 4
-gFlashProgCheckSpareBuffer:
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 4
+gpReadRetrial:
 	.space	4
 	.type	gMultiPageReadEn, %object
 	.size	gMultiPageReadEn, 1
 gMultiPageReadEn:
 	.space	1
 	.space	3
-	.type	gpReadRetrial, %object
-	.size	gpReadRetrial, 4
-gpReadRetrial:
-	.space	4
 	.type	req_sys, %object
 	.size	req_sys, 36
 req_sys:
@@ -25940,6 +26810,18 @@ req_sys:
 	.type	g_MaxLbn, %object
 	.size	g_MaxLbn, 4
 g_MaxLbn:
+	.space	4
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 4
+gFlashProgCheckBuffer:
+	.space	4
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 4
+gFlashProgCheckSpareBuffer:
+	.space	4
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 4
+gFlashSpareBuffer:
 	.space	4
 	.type	FbbtBlk, %object
 	.size	FbbtBlk, 16
@@ -25981,22 +26863,14 @@ g_gc_cur_blk_max_valid_pages:
 	.type	gp_last_act_superblock, %object
 	.size	gp_last_act_superblock, 4
 gp_last_act_superblock:
-	.space	4
-	.type	g_LowFormat, %object
-	.size	g_LowFormat, 4
-g_LowFormat:
-	.space	4
-	.type	gLoaderBootInfo, %object
-	.size	gLoaderBootInfo, 4
-gLoaderBootInfo:
-	.space	4
-	.type	RK29_NANDC1_REG_BASE, %object
-	.size	RK29_NANDC1_REG_BASE, 4
-RK29_NANDC1_REG_BASE:
 	.space	4
 	.type	gc_discard_updated, %object
 	.size	gc_discard_updated, 4
 gc_discard_updated:
+	.space	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
 	.space	4
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
@@ -26005,6 +26879,14 @@ g_ftl_nand_free_count:
 	.type	last_cache_match_count, %object
 	.size	last_cache_match_count, 4
 last_cache_match_count:
+	.space	4
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 4
+gLoaderBootInfo:
+	.space	4
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 4
+RK29_NANDC1_REG_BASE:
 	.space	4
 	.type	g_idb_buffer, %object
 	.size	g_idb_buffer, 4
@@ -26041,6 +26923,10 @@ gpVendor0Info:
 	.type	gpVendor1Info, %object
 	.size	gpVendor1Info, 4
 gpVendor1Info:
+	.space	4
+	.type	g_vendor, %object
+	.size	g_vendor, 4
+g_vendor:
 	.space	4
 	.type	gToggleModeClkDiv, %object
 	.size	gToggleModeClkDiv, 4
diff --git a/drivers/rk_nand/rk_ftl_arm_v8.S b/drivers/rk_nand/rk_ftl_arm_v8.S
index 35f5a1b16d1b..373af074f304 100644
--- a/drivers/rk_nand/rk_ftl_arm_v8.S
+++ b/drivers/rk_nand/rk_ftl_arm_v8.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2017-05-26
+ * date: 2017-10-16
  */
 	.cpu generic+fp+simd
 	.file	"rk_ftl_arm_v8.S"
@@ -27,18 +27,6 @@
 #NO_APP
 	.text
 	.align	2
-	.type	rknand_sys_storage_open, %function
-rknand_sys_storage_open:
-	mov	w0, 0
-	ret
-	.size	rknand_sys_storage_open, .-rknand_sys_storage_open
-	.align	2
-	.type	rknand_sys_storage_release, %function
-rknand_sys_storage_release:
-	mov	w0, 0
-	ret
-	.size	rknand_sys_storage_release, .-rknand_sys_storage_release
-	.align	2
 	.type	ftl_set_blk_mode.part.8, %function
 ftl_set_blk_mode.part.8:
 	adrp	x1, .LANCHOR0
@@ -60,29 +48,29 @@ FlashMemCmp8:
 	mov	x5, x0
 	adrp	x0, .LANCHOR0+8
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+8]
-	cbz	w0, .L9
+	cbz	w0, .L7
 	ldrb	w4, [x5,1]
 	mov	w0, 0
 	ldrb	w3, [x1,1]
 	cmp	w4, w3
-	beq	.L6
-.L9:
-	mov	x3, 0
+	beq	.L4
 .L7:
+	mov	x3, 0
+.L5:
 	cmp	w3, w2
 	mov	w4, w3
-	bcs	.L13
+	bcs	.L11
 	ldrb	w0, [x5,x3]
 	add	x3, x3, 1
 	add	x6, x1, x3
 	ldrb	w6, [x6,-1]
 	cmp	w6, w0
-	beq	.L7
+	beq	.L5
 	add	w0, w4, 1
-	b	.L6
-.L13:
+	b	.L4
+.L11:
 	mov	w0, 0
-.L6:
+.L4:
 	ret
 	.size	FlashMemCmp8, .-FlashMemCmp8
 	.align	2
@@ -117,12 +105,12 @@ FlashGetRandomizer:
 	ldrh	w19, [x2,w3,uxtw 1]
 	adrp	x2, .LANCHOR0+16
 	ldrb	w2, [x2,#:lo12:.LANCHOR0+16]
-	cbz	w2, .L16
+	cbz	w2, .L14
 	bl	FlashRsvdBlkChk
 	cmp	w0, wzr
 	orr	w1, w19, -1073741824
 	csel	w19, w1, w19, ne
-.L16:
+.L14:
 	mov	w0, w19
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -133,57 +121,31 @@ FlashGetRandomizer:
 	.type	FlashSetRandomizer, %function
 FlashSetRandomizer:
 	stp	x29, x30, [sp, -48]!
+	and	w2, w1, 127
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	mov	w20, w1
-	stp	x21, x22, [sp,32]
+	str	x21, [sp,32]
 	uxtb	w21, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w2, [x0,20]
-	cmp	w2, 5
-	bls	.L23
-	adrp	x2, .LANCHOR1
-	and	w20, w1, 127
-	add	x2, x2, :lo12:.LANCHOR1
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	stp	x19, x20, [sp,16]
+	ldrh	w20, [x0,w2,uxtw 1]
+	adrp	x2, .LANCHOR0
+	add	x0, x2, :lo12:.LANCHOR0
+	mov	x19, x2
 	ldrb	w0, [x0,16]
-	ldrh	w20, [x2,w20,uxtw 1]
-	cbz	w0, .L24
+	cbz	w0, .L21
 	mov	w0, w21
 	bl	FlashRsvdBlkChk
 	cmp	w0, wzr
 	orr	w1, w20, -1073741824
 	csel	w20, w1, w20, ne
-.L24:
-	add	x19, x19, :lo12:.LANCHOR0
-	add	x21, x19, x21, sxtw 4
-	ldr	x0, [x21,24]
+.L21:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x2, x2, x21, sxtw 4
+	ldr	x0, [x2,24]
 	str	w20, [x0,336]
-	b	.L22
-.L23:
-	cmp	w2, 4
-	bne	.L22
-	adrp	x2, .LANCHOR1
-	and	w3, w1, 127
-	add	x2, x2, :lo12:.LANCHOR1
-	ldrb	w0, [x0,16]
-	ldrh	w22, [x2,w3,uxtw 1]
-	lsl	w22, w22, 8
-	cbz	w0, .L26
-	mov	w0, w21
-	bl	FlashRsvdBlkChk
-	cbz	w0, .L26
-	ubfiz	w20, w20, 1, 7
-	orr	w20, w20, 1
-	orr	w22, w22, w20
-.L26:
-	add	x19, x19, :lo12:.LANCHOR0
-	add	x21, x19, x21, sxtw 4
-	ldr	x0, [x21,24]
-	str	w22, [x0,336]
-.L22:
 	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
+	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	FlashSetRandomizer, .-FlashSetRandomizer
@@ -237,7 +199,7 @@ FlashReadDpDataOutCmd:
 	ldrb	w2, [x5,8]
 	and	w5, w1, 255
 	add	x2, x6, x2, lsl 8
-	bne	.L40
+	bne	.L29
 	mov	w6, 6
 	str	w6, [x2,2056]
 	str	wzr, [x2,2052]
@@ -245,8 +207,8 @@ FlashReadDpDataOutCmd:
 	str	w5, [x2,2052]
 	str	w4, [x2,2052]
 	str	w3, [x2,2052]
-	b	.L42
-.L40:
+	b	.L31
+.L29:
 	str	wzr, [x2,2056]
 	str	wzr, [x2,2052]
 	str	wzr, [x2,2052]
@@ -257,7 +219,7 @@ FlashReadDpDataOutCmd:
 	str	w3, [x2,2056]
 	str	wzr, [x2,2052]
 	str	wzr, [x2,2052]
-.L42:
+.L31:
 	mov	w3, 224
 	str	w3, [x2,2056]
 	bl	FlashSetRandomizer
@@ -272,7 +234,7 @@ flash_enter_slc_mode:
 	uxtb	w0, w0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrb	w2, [x1,120]
-	cbz	w2, .L43
+	cbz	w2, .L32
 	sbfiz	x0, x0, 4, 32
 	add	x1, x1, 24
 	add	x2, x1, x0
@@ -282,7 +244,7 @@ flash_enter_slc_mode:
 	add	x0, x1, x0, lsl 8
 	mov	w1, 218
 	str	w1, [x0,8]
-.L43:
+.L32:
 	ret
 	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
 	.align	2
@@ -293,7 +255,7 @@ flash_exit_slc_mode:
 	uxtb	w0, w0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrb	w2, [x1,120]
-	cbz	w2, .L48
+	cbz	w2, .L37
 	sbfiz	x0, x0, 4, 32
 	add	x1, x1, 24
 	add	x2, x1, x0
@@ -303,7 +265,7 @@ flash_exit_slc_mode:
 	add	x0, x1, x0, lsl 8
 	mov	w1, 223
 	str	w1, [x0,8]
-.L48:
+.L37:
 	ret
 	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
 	.align	2
@@ -346,7 +308,7 @@ FlashEraseCmd:
 	add	x5, x4, x0
 	ldr	x4, [x4,x0]
 	ldrb	w0, [x5,8]
-	cbz	w2, .L55
+	cbz	w2, .L44
 	add	x2, x4, x0, lsl 8
 	mov	w5, 96
 	str	w5, [x2,2056]
@@ -358,7 +320,7 @@ FlashEraseCmd:
 	str	w5, [x2,2052]
 	ldr	w2, [x3,12]
 	add	w1, w1, w2
-.L55:
+.L44:
 	add	x0, x4, x0, lsl 8
 	mov	w2, 96
 	str	w2, [x0,2056]
@@ -443,17 +405,17 @@ JSHash:
 	mov	w0, 42982
 	mov	x2, 0
 	movk	w0, 0x47c6, lsl 16
-.L63:
+.L52:
 	cmp	w1, w2
-	bls	.L65
+	bls	.L54
 	lsl	w3, w0, 5
 	ldrb	w4, [x5,x2]
 	add	w3, w3, w0, lsr 2
 	add	x2, x2, 1
 	add	w3, w3, w4
 	eor	w0, w0, w3
-	b	.L63
-.L65:
+	b	.L52
+.L54:
 	ret
 	.size	JSHash, .-JSHash
 	.align	2
@@ -518,13 +480,13 @@ LogAddr2PhyAddr:
 	udiv	w10, w6, w5
 	msub	w5, w10, w5, w6
 	uxth	w6, w5
-	bne	.L71
+	bne	.L60
 	add	x1, x7, :lo12:.LANCHOR0
 	ldrb	w5, [x1,120]
-	cbnz	w5, .L71
+	cbnz	w5, .L60
 	add	x1, x1, 196
 	ldrh	w8, [x1,w8,sxtw 1]
-.L71:
+.L60:
 	add	x7, x7, :lo12:.LANCHOR0
 	cmp	w4, 1
 	add	x7, x7, 708
@@ -534,13 +496,13 @@ LogAddr2PhyAddr:
 	add	w5, w5, w8
 	str	w5, [x2]
 	str	w10, [x3]
-	bls	.L72
+	bls	.L61
 	ldr	w1, [x0,4]
 	ldr	w0, [x0,60]
 	add	w1, w1, 1024
 	cmp	w1, w0
 	cset	w1, eq
-.L72:
+.L61:
 	mov	w0, w1
 	ret
 	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
@@ -639,7 +601,7 @@ NandcSetMode:
 	mov	x20, x1
 	ldr	x2, [x21,128]
 	ldr	w19, [x2]
-	beq	.L84
+	beq	.L73
 	orr	w19, w19, 24576
 	and	w0, w0, 4
 	and	w19, w19, -32769
@@ -659,10 +621,10 @@ NandcSetMode:
 	str	w1, [x0,308]
 	mov	w1, 39
 	str	w1, [x0,308]
-	b	.L86
-.L84:
+	b	.L75
+.L73:
 	and	w19, w19, -8193
-.L86:
+.L75:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	x0, [x1,128]
 	str	w19, [x0]
@@ -724,11 +686,11 @@ NandcDelayns:
 	sub	sp, sp, #16
 	lsr	w0, w0, 4
 	str	w0, [sp,12]
-.L93:
+.L82:
 	ldr	w0, [sp,12]
 	sub	w1, w0, #1
 	str	w1, [sp,12]
-	cbnz	w0, .L93
+	cbnz	w0, .L82
 	add	sp, sp, 16
 	ret
 	.size	NandcDelayns, .-NandcDelayns
@@ -783,11 +745,11 @@ ToshibaSetRRPara:
 	adrp	x26, .LANCHOR0
 	mov	w27, 85
 	mov	x19, x2
-.L97:
+.L86:
 	add	x25, x26, :lo12:.LANCHOR0
 	ldrb	w0, [x25,753]
 	cmp	w0, w20
-	bls	.L103
+	bls	.L92
 	add	x0, x19, 256
 	str	w27, [x22,8]
 	ldrsb	w0, [x20,x0]
@@ -796,21 +758,21 @@ ToshibaSetRRPara:
 	bl	NandcDelayns
 	ldrb	w0, [x25,752]
 	cmp	w0, 34
-	bne	.L98
+	bne	.L87
 	ldrsb	w0, [x24,x20]
-	b	.L102
-.L98:
+	b	.L91
+.L87:
 	cmp	w0, 35
-	bne	.L100
+	bne	.L89
 	ldrsb	w0, [x21,x20]
-	b	.L102
-.L100:
+	b	.L91
+.L89:
 	ldrsb	w0, [x23,400]
-.L102:
+.L91:
 	str	w0, [x22]
 	add	x20, x20, 1
-	b	.L97
-.L103:
+	b	.L86
+.L92:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -837,11 +799,11 @@ SamsungSetRRPara:
 	adrp	x23, .LANCHOR0
 	mov	w24, 161
 	mov	x19, x2
-.L105:
+.L94:
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrb	w0, [x0,753]
 	cmp	w0, w20
-	bls	.L107
+	bls	.L96
 	str	w24, [x21,8]
 	add	x0, x19, 408
 	str	wzr, [x21]
@@ -852,8 +814,8 @@ SamsungSetRRPara:
 	str	w0, [x21]
 	mov	w0, 300
 	bl	NandcDelayns
-	b	.L105
-.L107:
+	b	.L94
+.L96:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -866,67 +828,77 @@ SamsungSetRRPara:
 HynixSetRRPara:
 	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR0
-	str	x27, [sp,80]
 	stp	x19, x20, [sp,16]
-	add	x19, x22, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR0
+	str	x27, [sp,80]
+	add	x19, x20, :lo12:.LANCHOR0
 	uxtb	w27, w1
-	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
-	uxtb	x23, w0
-	mov	x25, x2
+	stp	x23, x24, [sp,48]
+	uxtb	x25, w0
+	mov	x22, x2
 	ldr	x0, [x19,744]
-	mov	x26, x23
-	uxtb	w24, w3
+	mov	x26, x25
+	uxtb	w21, w3
 	add	x19, x19, 760
 	ldrb	w0, [x0,19]
 	cmp	w0, 6
-	bne	.L109
-	add	x19, x19, x23, lsl 6
-	lsl	w0, w24, 2
+	bne	.L98
+	add	x19, x19, x25, lsl 6
+	lsl	w4, w21, 2
 	add	x19, x19, 20
-	add	x19, x19, x0, sxtw
-	b	.L110
-.L109:
-	lsl	x2, x23, 3
-	add	x2, x2, x24, sxtw
-	add	x19, x19, x2, lsl 3
+	b	.L103
+.L98:
+	cmp	w0, 7
+	bne	.L100
+	mov	x2, 160
+	mov	w4, 10
+	madd	x19, x25, x2, x19
+	mul	w4, w21, w4
+	add	x19, x19, 28
+.L103:
+	add	x19, x19, x4, sxtw
+	b	.L99
+.L100:
+	lsl	x4, x25, 3
+	add	x4, x4, x21, sxtw
+	add	x19, x19, x4, lsl 3
 	add	x19, x19, 20
-.L110:
-	add	x2, x22, :lo12:.LANCHOR0
-	lsl	x0, x23, 4
+.L99:
+	add	x2, x20, :lo12:.LANCHOR0
+	lsl	x0, x25, 4
 	add	x2, x2, 24
 	uxtb	x27, w27
 	add	x1, x2, x0
-	ldr	x20, [x2,x0]
+	ldr	x23, [x2,x0]
 	mov	w0, w26
-	ldrb	w21, [x1,8]
+	ldrb	w24, [x1,8]
 	bl	NandcFlashCs
-	ubfiz	x21, x21, 8, 8
+	ubfiz	x24, x24, 8, 8
 	mov	w0, 54
-	add	x20, x20, x21
-	mov	x21, 0
-	str	w0, [x20,2056]
-.L111:
-	cmp	x21, x27
-	beq	.L113
-	ldrb	w0, [x25,x21]
-	str	w0, [x20,2052]
+	add	x23, x23, x24
+	mov	x24, 0
+	str	w0, [x23,2056]
+.L101:
+	cmp	x24, x27
+	beq	.L104
+	ldrb	w0, [x22,x24]
+	str	w0, [x23,2052]
 	mov	w0, 200
 	bl	NandcDelayns
-	ldrb	w0, [x19,x21]
-	add	x21, x21, 1
-	str	w0, [x20,2048]
-	b	.L111
-.L113:
-	add	x22, x22, :lo12:.LANCHOR0
+	ldrsb	w0, [x19,x24]
+	add	x24, x24, 1
+	str	w0, [x23,2048]
+	b	.L101
+.L104:
+	add	x20, x20, :lo12:.LANCHOR0
 	mov	w0, 22
-	add	x23, x22, x23
-	str	w0, [x20,2056]
+	add	x25, x20, x25
+	str	w0, [x23,2056]
 	mov	w0, w26
 	bl	NandcFlashDeCs
-	strb	w24, [x23,1616]
+	strb	w21, [x25,1616]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -950,25 +922,25 @@ FlashSetReadRetryDefault:
 	ldrb	w0, [x0,19]
 	sub	w0, w0, #1
 	uxtb	w0, w0
-	cmp	w0, 5
-	bhi	.L114
+	cmp	w0, 6
+	bhi	.L105
 	add	x21, x19, 1620
 	add	x22, x19, 764
-.L119:
+.L110:
 	lsl	x1, x20, 3
 	uxtb	w0, w20
 	ldrb	w1, [x1,x21]
 	cmp	w1, 173
-	bne	.L116
+	bne	.L107
 	ldrb	w1, [x19,761]
 	mov	x2, x22
 	mov	w3, 0
 	bl	HynixSetRRPara
-.L116:
+.L107:
 	add	x20, x20, 1
 	cmp	x20, 4
-	bne	.L119
-.L114:
+	bne	.L110
+.L105:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -992,39 +964,39 @@ FlashReadStatusEN:
 	ldrb	w19, [x6,8]
 	ldrb	w0, [x0,8]
 	cmp	w0, 2
-	bne	.L122
+	bne	.L113
 	add	x4, x4, 88
-	cbnz	w2, .L123
+	cbnz	w2, .L114
 	ldrb	w2, [x4,13]
-	b	.L131
-.L123:
+	b	.L122
+.L114:
 	ldrb	w2, [x4,14]
-.L131:
+.L122:
 	add	x0, x19, 8
 	add	x3, x3, :lo12:.LANCHOR0
 	add	x0, x20, x0, lsl 8
 	str	w2, [x0,8]
 	mov	w2, 0
 	ldrb	w4, [x3,103]
-	cbz	w4, .L126
+	cbz	w4, .L117
 	add	x3, x19, 8
 	lsl	x3, x3, 8
-.L130:
+.L121:
 	cmp	w2, w4
-	bcs	.L126
+	bcs	.L117
 	add	x5, x20, x3
 	lsl	w0, w2, 3
 	lsr	w0, w1, w0
 	add	w2, w2, 1
 	and	w0, w0, 255
 	str	w0, [x5,4]
-	b	.L130
-.L122:
+	b	.L121
+.L113:
 	add	x0, x19, 8
 	mov	w1, 112
 	add	x0, x20, x0, lsl 8
 	str	w1, [x0,8]
-.L126:
+.L117:
 	add	x19, x19, 8
 	mov	w0, 80
 	lsl	x19, x19, 8
@@ -1046,15 +1018,15 @@ FlashWaitReadyEN:
 	uxtb	w19, w0
 	mov	w20, w1
 	uxtb	w21, w2
-.L136:
+.L127:
 	mov	w0, w19
 	mov	w1, w20
 	mov	w2, w21
 	bl	FlashReadStatusEN
 	cmp	w0, 255
 	mov	w3, w0
-	beq	.L136
-	tbz	x3, 6, .L136
+	beq	.L127
+	tbz	x3, 6, .L127
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -1078,7 +1050,7 @@ FlashWaitCmdDone:
 	add	x19, x0, x1
 	ldrb	w21, [x0,x1]
 	ldr	x0, [x19,8]
-	cbz	x0, .L141
+	cbz	x0, .L132
 	mov	w0, w21
 	add	x20, x20, 708
 	bl	NandcFlashCs
@@ -1096,10 +1068,10 @@ FlashWaitCmdDone:
 	str	w0, [x1]
 	str	xzr, [x19,8]
 	ldr	x1, [x19,16]
-	cbz	x1, .L141
+	cbz	x1, .L132
 	str	w0, [x1]
 	str	xzr, [x19,16]
-.L141:
+.L132:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -1120,20 +1092,20 @@ NandcWaitFlashReady:
 	mov	w19, 34464
 	ldr	x20, [x1,x0]
 	movk	w19, 0x1, lsl 16
-.L148:
+.L139:
 	mov	w0, 100
 	bl	NandcDelayns
 	ldr	w0, [x20]
 	str	w0, [x29,40]
 	ldr	w0, [x29,40]
-	tbnz	x0, 9, .L149
+	tbnz	x0, 9, .L140
 	subs	w19, w19, #1
-	bne	.L148
+	bne	.L139
 	mov	w0, -1
-	b	.L147
-.L149:
+	b	.L138
+.L140:
 	mov	w0, 0
-.L147:
+.L138:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -1221,68 +1193,68 @@ FlashSetInterfaceMode:
 	mov	w13, 32
 	mov	w14, 5
 	uxtb	w5, w2
-.L164:
+.L155:
 	ldrb	w3, [x6,x4]
 	ldr	x1, [x7]
 	cmp	w3, 152
 	ldrb	w2, [x7,8]
-	beq	.L154
+	beq	.L145
 	cmp	w3, 69
-	beq	.L154
+	beq	.L145
 	cmp	w3, 173
-	beq	.L154
+	beq	.L145
 	cmp	w3, 44
-	bne	.L155
-.L154:
+	bne	.L146
+.L145:
 	cmp	w0, 1
-	bne	.L157
-	cbz	w11, .L155
+	bne	.L148
+	cbz	w11, .L146
 	ubfiz	x2, x2, 8, 8
 	cmp	w3, 173
 	add	x1, x1, x2
 	str	w8, [x1,2056]
-	bne	.L158
+	bne	.L149
 	str	w0, [x1,2052]
-	b	.L175
-.L158:
+	b	.L166
+.L149:
 	cmp	w3, 44
-	bne	.L160
+	bne	.L151
 	str	w0, [x1,2052]
 	str	w14, [x1,2048]
-	b	.L162
-.L160:
+	b	.L153
+.L151:
 	str	w9, [x1,2052]
 	str	w0, [x1,2048]
-	b	.L162
-.L157:
-	cbz	w5, .L155
+	b	.L153
+.L148:
+	cbz	w5, .L146
 	ubfiz	x2, x2, 8, 8
 	cmp	w3, 173
 	add	x1, x1, x2
 	str	w8, [x1,2056]
-	bne	.L161
+	bne	.L152
 	str	w10, [x1,2052]
 	str	w13, [x1,2048]
-	b	.L162
-.L161:
+	b	.L153
+.L152:
 	cmp	w3, 44
-	bne	.L163
+	bne	.L154
 	str	w10, [x1,2052]
 	str	w12, [x1,2048]
-	b	.L162
-.L163:
+	b	.L153
+.L154:
 	str	w9, [x1,2052]
-.L175:
+.L166:
 	str	wzr, [x1,2048]
-.L162:
+.L153:
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
-.L155:
+.L146:
 	add	x6, x6, 8
 	add	x7, x7, 16
 	cmp	x6, 32
-	bne	.L164
+	bne	.L155
 	mov	w0, 0
 	bl	NandcWaitFlashReady
 	mov	w0, 0
@@ -1396,23 +1368,23 @@ SandiskSetRRPara:
 	add	x0, x0, x1
 	add	x1, x2, x1
 	mov	x2, 0
-.L179:
+.L170:
 	add	x3, x5, :lo12:.LANCHOR0
 	ldrb	w4, [x3,753]
 	cmp	w4, w2
-	bls	.L184
+	bls	.L175
 	ldrb	w3, [x3,752]
 	cmp	w3, 67
-	bne	.L180
+	bne	.L171
 	ldrsb	w3, [x0,x2]
-	b	.L183
-.L180:
+	b	.L174
+.L171:
 	ldrsb	w3, [x1,x2]
-.L183:
+.L174:
 	str	w3, [x20]
 	add	x2, x2, 1
-	b	.L179
-.L184:
+	b	.L170
+.L175:
 	mov	w0, 0
 	bl	NandcWaitFlashReady
 	ldp	x19, x20, [sp,16]
@@ -1437,9 +1409,9 @@ FlashEraseSLc2KBlocks:
 	mov	w22, 0
 	add	x25, x21, 1652
 	add	x23, x23, :lo12:.LC0
-.L186:
+.L177:
 	cmp	w22, w24
-	beq	.L195
+	beq	.L186
 	add	x2, x29, 88
 	sub	w4, w24, w22
 	mov	x0, x20
@@ -1449,11 +1421,11 @@ FlashEraseSLc2KBlocks:
 	ldr	w2, [x29,92]
 	ldrb	w0, [x21,1845]
 	cmp	w2, w0
-	bcc	.L187
+	bcc	.L178
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L188
-.L187:
+	b	.L179
+.L178:
 	uxtw	x2, w2
 	add	x0, x21, x2
 	ldrb	w19, [x0,1848]
@@ -1486,24 +1458,24 @@ FlashEraseSLc2KBlocks:
 	ldr	w1, [x29,88]
 	mov	w0, w19
 	bl	FlashReadStatus
-	tbz	x0, 0, .L189
+	tbz	x0, 0, .L180
 	mov	w0, -1
 	str	w0, [x20]
-.L189:
+.L180:
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L190
+	bne	.L181
 	ldr	w1, [x29,88]
 	mov	x0, x23
 	bl	printk
-.L190:
+.L181:
 	mov	w0, w19
 	bl	NandcFlashDeCs
-.L188:
+.L179:
 	add	w22, w22, 1
 	add	x20, x20, 56
-	b	.L186
-.L195:
+	b	.L177
+.L186:
 	mov	w0, 0
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -1513,431 +1485,32 @@ FlashEraseSLc2KBlocks:
 	ret
 	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
 	.align	2
-	.global	HynixGetReadRetryDefault
-	.type	HynixGetReadRetryDefault, %function
-HynixGetReadRetryDefault:
-	stp	x29, x30, [sp, -144]!
-	mov	w4, -83
-	mov	w3, -82
+	.global	FlashReadDpCmd
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	stp	x29, x30, [sp, -80]!
+	adrp	x3, .LANCHOR0
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	stp	x25, x26, [sp,64]
-	mov	w26, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x0, 760
-	cmp	w26, 2
 	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	stp	x27, x28, [sp,80]
-	strb	w26, [x0,760]
-	mov	w0, -84
-	strb	w4, [x1,5]
-	strb	w0, [x1,4]
-	mov	w0, -81
-	strb	w3, [x1,6]
-	strb	w0, [x1,7]
-	bne	.L197
-	mov	w0, -89
-	strb	w0, [x1,4]
-	adrp	x0, .LANCHOR1+521
-	mov	w1, -9
-	strb	w1, [x0,#:lo12:.LANCHOR1+521]
-	b	.L234
-.L197:
-	cmp	w26, 3
-	bne	.L199
-	mov	w0, -80
-	strb	w0, [x1,4]
-	mov	w0, -79
-	strb	w0, [x1,5]
-	mov	w0, -78
-	strb	w0, [x1,6]
-	mov	w0, -77
-	strb	w0, [x1,7]
-	mov	w0, -76
-	strb	w0, [x1,8]
-	mov	w0, -75
-	strb	w0, [x1,9]
-	mov	w0, -74
-	strb	w0, [x1,10]
-	mov	w0, -73
-	b	.L250
-.L199:
-	cmp	w26, 4
-	bne	.L200
-	mov	w5, -52
-	strb	w5, [x1,4]
-	mov	w5, -65
-	strb	w5, [x1,5]
-	mov	w5, -86
-	strb	w5, [x1,6]
-	mov	w5, -85
-	strb	w4, [x1,9]
-	strb	w5, [x1,7]
-	mov	w5, -51
-	strb	w3, [x1,10]
-	strb	w5, [x1,8]
-.L250:
-	mov	w21, 8
-	strb	w0, [x1,11]
-	mov	w20, w21
-	b	.L198
-.L200:
-	cmp	w26, 5
-	bne	.L201
-	mov	w0, 56
-	strb	w0, [x1,4]
-	mov	w0, 57
-	strb	w0, [x1,5]
-	mov	w0, 58
-	mov	w21, 8
-	strb	w0, [x1,6]
-	mov	w0, 59
-	strb	w0, [x1,7]
-	b	.L249
-.L201:
-	cmp	w26, 6
-	bne	.L234
-	mov	w0, 14
-	strb	w0, [x1,4]
-	mov	w0, 15
-	strb	w0, [x1,5]
-	mov	w0, 16
-	mov	w21, 12
-	strb	w0, [x1,6]
-	mov	w0, 17
-	strb	w0, [x1,7]
-	b	.L249
-.L234:
-	mov	w21, 7
-.L249:
-	mov	w20, 4
-.L198:
-	sub	w0, w26, #1
-	cmp	w0, 1
-	bhi	.L246
-	adrp	x24, .LANCHOR1
-	add	x27, x19, :lo12:.LANCHOR0
-	add	x24, x24, :lo12:.LANCHOR1
-	mov	w23, 0
-	add	x28, x27, 760
-	add	x4, x27, 24
-	add	x24, x24, 504
-.L202:
-	ldrb	w0, [x27,1845]
-	cmp	w0, w23
-	bls	.L209
-	add	x0, x27, x23, sxtw
-	ldrb	w0, [x0,1848]
-	mov	x25, 0
-	add	x22, x28, x0, lsl 6
-	lsl	x0, x0, 4
-	add	x1, x4, x0
-	add	x22, x22, 20
-	ldr	x26, [x4,x0]
-	ldrb	w0, [x1,8]
-	mov	w1, 55
-	add	x26, x26, x0, lsl 8
-.L204:
-	add	x0, x28, x25
-	str	w1, [x26,2056]
-	str	x4, [x29,128]
-	str	x1, [x29,136]
-	ldrb	w0, [x0,4]
-	str	w0, [x26,2052]
-	mov	w0, 80
-	bl	NandcDelayns
-	ldr	w0, [x26,2048]
-	strb	w0, [x22,x25]
-	add	x25, x25, 1
-	ldr	x1, [x29,136]
-	cmp	w20, w25, uxtb
-	ldr	x4, [x29,128]
-	bhi	.L204
-	mov	x0, 0
-.L205:
-	add	w2, w0, 8
-	mov	x1, 0
-.L206:
-	add	x3, x1, x0
-	add	x1, x1, 4
-	add	x3, x24, x3
-	cmp	x1, 24
-	ldrb	w5, [x3,4]
-	ldrb	w3, [x22,x0]
-	add	w3, w5, w3
-	strb	w3, [x22,w2,sxtw]
-	add	w2, w2, 8
-	bne	.L206
-	add	x0, x0, 1
-	cmp	x0, 4
-	bne	.L205
-	add	w23, w23, 1
-	strb	wzr, [x22,16]
-	strb	wzr, [x22,24]
-	strb	wzr, [x22,32]
-	uxtb	w23, w23
-	strb	wzr, [x22,40]
-	strb	wzr, [x22,48]
-	strb	wzr, [x22,41]
-	strb	wzr, [x22,49]
-	b	.L202
-.L246:
-	sub	w0, w26, #3
-	cmp	w0, 3
-	bhi	.L209
-	mul	w0, w20, w21
-	cmp	w26, 6
-	mov	w1, 4
-	asr	w24, w0, 2
-	lsl	w0, w0, 4
-	str	w0, [x29,124]
-	lsl	w0, w24, 1
-	str	w0, [x29,116]
-	mov	w0, 8
-	csel	w0, w1, w0, eq
-	add	x23, x19, :lo12:.LANCHOR0
-	str	w0, [x29,120]
-	add	x0, x23, 760
-	str	x0, [x29,136]
-	sub	w0, w20, #1
-	mov	w22, 0
-	sub	w27, w26, #5
-	uxtb	x0, w0
-	add	x0, x0, 1
-	str	x0, [x29,104]
-.L210:
-	ldrb	w0, [x23,1845]
-	cmp	w0, w22
-	bhi	.L233
-.L209:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	strb	w21, [x19,762]
-	strb	w20, [x19,761]
-	ldp	x21, x22, [sp,32]
-	ldp	x19, x20, [sp,16]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 144
-	ret
-.L233:
-	add	x0, x23, x22, sxtw
-	ldrb	w0, [x0,1848]
-	ldr	x1, [x29,136]
-	add	x3, x23, 24
-	mov	x25, x0
-	add	x28, x1, x0, lsl 6
-	lsl	x0, x0, 4
-	add	x1, x28, 20
-	str	x1, [x29,128]
-	add	x1, x3, x0
-	ldr	x0, [x3,x0]
-	mov	w3, 255
-	str	x3, [x29,96]
-	ldrb	w1, [x1,8]
-	add	x28, x0, x1, lsl 8
-	mov	w0, w25
-	str	w3, [x28,2056]
-	bl	NandcWaitFlashReady
-	mov	w0, 54
-	cmp	w26, 4
-	str	w0, [x28,2056]
-	ldr	x3, [x29,96]
-	bne	.L211
-	mov	w0, 64
-	str	w3, [x28,2052]
-	str	w0, [x28,2048]
-	mov	w0, 204
-	b	.L251
-.L211:
-	cmp	w27, 1
-	bhi	.L213
-	ldr	x0, [x29,136]
-	ldrb	w0, [x0,4]
-	str	w0, [x28,2052]
-	mov	w0, 82
-	b	.L252
-.L213:
-	mov	w0, 174
-	str	w0, [x28,2052]
-	str	wzr, [x28,2048]
-	mov	w0, 176
-.L251:
-	str	w0, [x28,2052]
-	mov	w0, 77
-.L252:
-	str	w0, [x28,2048]
-	mov	w0, 22
-	str	w0, [x28,2056]
-	mov	w0, 23
-	str	w0, [x28,2056]
-	mov	w0, 4
-	str	w0, [x28,2056]
-	mov	w0, 25
-	str	w0, [x28,2056]
-	cmp	w26, 6
-	str	wzr, [x28,2056]
-	str	wzr, [x28,2052]
-	str	wzr, [x28,2052]
-	bne	.L214
-	mov	w0, 31
-	str	w0, [x28,2052]
-	b	.L215
-.L214:
-	str	wzr, [x28,2052]
-.L215:
-	mov	w3, 2
-	str	w3, [x28,2052]
-	str	wzr, [x28,2052]
-	mov	w0, 48
-	str	w0, [x28,2056]
-	mov	w0, w25
-	str	x3, [x29,96]
-	bl	NandcWaitFlashReady
-	ldr	x3, [x29,96]
-	mov	w0, 16
-	cmp	w27, 1
-	csel	w3, w3, w0, hi
-	mov	w0, 0
-.L217:
-	add	w0, w0, 1
-	ldr	w4, [x28,2048]
-	uxtb	w0, w0
-	cmp	w0, w3
-	bne	.L217
-	ldr	x6, [x23,1856]
-	mov	x0, 0
-.L218:
-	ldr	w1, [x29,124]
-	cmp	w1, w0
-	ble	.L253
-	ldr	w3, [x28,2048]
-	strb	w3, [x6,x0]
-	add	x0, x0, 1
-	b	.L218
-.L253:
-	ldr	x8, [x23,1856]
-	mov	w5, w24
-	mov	w4, 8
-.L221:
-	mov	w0, 0
-.L220:
-	add	w3, w0, w5
-	add	w0, w0, 1
-	sbfiz	x3, x3, 2, 32
-	cmp	w0, w24
-	ldr	w7, [x8,x3]
-	mvn	w7, w7
-	str	w7, [x8,x3]
-	bne	.L220
-	ldr	w0, [x29,116]
-	subs	w4, w4, #1
-	add	w5, w5, w0
-	bne	.L221
-	mov	x4, 0
-	mov	w12, 1
-.L222:
-	mov	w3, 0
-	ldr	x11, [x23,1856]
-	mov	w7, w3
-.L226:
-	lsl	w5, w12, w7
-	mov	w9, w4
-	mov	w0, 16
-	mov	w8, 0
-.L224:
-	ldr	w10, [x11,w9,sxtw 2]
-	add	w9, w9, w24
-	and	w10, w5, w10
-	cmp	w10, w5
-	csinc	w8, w8, w8, ne
-	subs	w0, w0, #1
-	bne	.L224
-	cmp	w8, 9
-	orr	w5, w3, w5
-	add	w7, w7, 1
-	csel	w3, w5, w3, cs
-	cmp	w7, 32
-	bne	.L226
-	str	w3, [x11,x4,lsl 2]
-	add	x4, x4, 1
-	cmp	w24, w4
-	bgt	.L222
-	mov	w4, w0
-.L229:
-	mov	x3, 0
-.L228:
-	add	w5, w0, w3
-	ldr	x1, [x29,128]
-	ldrb	w7, [x6,x3]
-	add	x3, x3, 1
-	cmp	w20, w3, uxtb
-	strb	w7, [x1,w5,sxtw]
-	bhi	.L228
-	ldr	x1, [x29,104]
-	add	w4, w4, 1
-	cmp	w4, w21
-	add	x6, x6, x1
-	ldr	w1, [x29,120]
-	add	w0, w0, w1
-	blt	.L229
-	mov	w0, 255
-	str	w0, [x28,2056]
-	mov	w0, w25
-	bl	NandcWaitFlashReady
-	cmp	w27, 1
-	bhi	.L231
-	mov	w0, 54
-	str	w0, [x28,2056]
-	ldr	x0, [x29,136]
-	mov	w1, -1
-	ldrb	w0, [x0,4]
-	str	w0, [x28,2052]
-	mov	w0, 22
-	str	wzr, [x28,2048]
-	str	w0, [x28,2056]
-	mov	w0, w22
-	bl	FlashReadCmd
-	b	.L232
-.L231:
-	mov	w0, 56
-	str	w0, [x28,2056]
-.L232:
-	mov	w0, w25
-	add	w22, w22, 1
-	bl	NandcWaitFlashReady
-	uxtb	w22, w22
-	b	.L210
-	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
-	.align	2
-	.global	FlashReadDpCmd
-	.type	FlashReadDpCmd, %function
-FlashReadDpCmd:
-	stp	x29, x30, [sp, -80]!
-	adrp	x3, .LANCHOR0
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	add	x3, x3, :lo12:.LANCHOR0
-	uxtb	w21, w0
-	add	x4, x3, 24
-	sbfiz	x0, x21, 4, 32
-	add	x3, x3, 88
-	str	x23, [sp,48]
-	stp	x19, x20, [sp,16]
-	add	x5, x4, x0
-	and	w23, w2, 255
-	ldr	x6, [x4,x0]
-	lsr	w22, w2, 8
-	ldrb	w0, [x3,16]
-	lsr	w4, w1, 8
-	ldrb	w19, [x5,8]
-	lsr	w20, w2, 16
+	add	x3, x3, :lo12:.LANCHOR0
+	uxtb	w21, w0
+	add	x4, x3, 24
+	sbfiz	x0, x21, 4, 32
+	add	x3, x3, 88
+	str	x23, [sp,48]
+	stp	x19, x20, [sp,16]
+	add	x5, x4, x0
+	and	w23, w2, 255
+	ldr	x6, [x4,x0]
+	lsr	w22, w2, 8
+	ldrb	w0, [x3,16]
+	lsr	w4, w1, 8
+	ldrb	w19, [x5,8]
+	lsr	w20, w2, 16
 	cmp	w0, 1
 	and	w5, w1, 255
 	lsr	w0, w1, 16
-	bne	.L255
+	bne	.L188
 	add	x19, x6, x19, lsl 8
 	ldrb	w2, [x3,8]
 	str	x1, [x29,72]
@@ -1960,8 +1533,8 @@ FlashReadDpCmd:
 	str	w20, [x19,2052]
 	str	w0, [x19,2056]
 	ldr	x1, [x29,72]
-	b	.L256
-.L255:
+	b	.L189
+.L188:
 	add	x19, x6, x19, lsl 8
 	ldrb	w2, [x3,8]
 	str	w2, [x19,2056]
@@ -1975,7 +1548,7 @@ FlashReadDpCmd:
 	str	w22, [x19,2052]
 	str	w20, [x19,2052]
 	str	w0, [x19,2056]
-.L256:
+.L189:
 	mov	w0, w21
 	bl	FlashSetRandomizer
 	ldr	x23, [sp,48]
@@ -1997,16 +1570,16 @@ FlashDeInit:
 	adrp	x0, .LANCHOR0
 	add	x20, x0, :lo12:.LANCHOR0
 	mov	x19, x0
-	ldrb	w1, [x20,1864]
-	cbz	w1, .L258
+	ldrb	w1, [x20,1856]
+	cbz	w1, .L191
 	ldrb	w0, [x20,1844]
-	tbz	x0, 0, .L258
+	tbz	x0, 0, .L191
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-	strb	wzr, [x20,1864]
-.L258:
+	strb	wzr, [x20,1856]
+.L191:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x0, [x0,24]
 	str	wzr, [x0,336]
@@ -2043,37 +1616,37 @@ NandcTimeCfg:
 	add	x1, x1, :lo12:.LANCHOR0
 	sdiv	w0, w0, w2
 	cmp	w0, 250
-	ble	.L267
+	ble	.L200
 	ldr	x0, [x1,128]
 	mov	w1, 8354
-	b	.L274
-.L267:
+	b	.L207
+.L200:
 	cmp	w0, 220
-	ble	.L269
+	ble	.L202
 	ldr	x0, [x1,128]
-	b	.L275
-.L269:
+	b	.L208
+.L202:
 	cmp	w0, 185
-	ble	.L270
+	ble	.L203
 	ldr	x0, [x1,128]
 	mov	w1, 4226
-	b	.L274
-.L270:
+	b	.L207
+.L203:
 	cmp	w0, 160
 	ldr	x0, [x1,128]
-	ble	.L271
+	ble	.L204
 	mov	w1, 4194
-	b	.L274
-.L271:
+	b	.L207
+.L204:
 	cmp	w19, 35
 	mov	w1, 4193
-	bls	.L274
+	bls	.L207
 	cmp	w19, 99
 	mov	w1, 4225
-	bls	.L274
-.L275:
+	bls	.L207
+.L208:
 	mov	w1, 8322
-.L274:
+.L207:
 	str	w1, [x0,4]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -2089,15 +1662,15 @@ FlashTimingCfg:
 	and	w1, w1, -33
 	cmp	w1, 1
 	add	x29, sp, 0
-	bls	.L277
+	bls	.L210
 	mov	w1, 8322
 	cmp	w0, w1
-	bne	.L278
-.L277:
+	bne	.L211
+.L210:
 	adrp	x1, .LANCHOR0+128
 	ldr	x1, [x1,#:lo12:.LANCHOR0+128]
 	str	w0, [x1,4]
-.L278:
+.L211:
 	adrp	x0, .LANCHOR1+493
 	ldrb	w0, [x0,#:lo12:.LANCHOR1+493]
 	bl	NandcTimeCfg
@@ -2127,14 +1700,14 @@ NandcInit:
 	str	wzr, [x19,32]
 	ldr	w1, [x0]
 	ubfx	x2, x1, 13, 1
-	str	w2, [x19,1868]
+	str	w2, [x19,1860]
 	ldr	w2, [x0,352]
 	and	w1, w1, 245760
 	orr	w1, w1, 256
 	ubfx	x2, x2, 16, 4
-	str	w2, [x19,20]
+	str	w2, [x19,1864]
 	ldr	w2, [x0,352]
-	str	w2, [x19,1872]
+	str	w2, [x19,1868]
 	str	w1, [x0]
 	ldr	x0, [x19,128]
 	str	wzr, [x0,336]
@@ -2148,12 +1721,12 @@ NandcInit:
 	str	w1, [x0,304]
 	mov	w0, 36864
 	bl	ftl_malloc
-	str	wzr, [x19,1928]
+	str	wzr, [x19,1920]
+	str	x0, [x19,1872]
 	str	x0, [x19,1880]
-	str	x0, [x19,1888]
 	add	x0, x0, 32768
-	str	wzr, [x19,1936]
-	str	x0, [x19,1896]
+	str	wzr, [x19,1928]
+	str	x0, [x19,1888]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -2191,24 +1764,24 @@ NandcBchSel:
 	mov	w3, 1
 	cmp	w0, 16
 	ldr	x2, [x1,128]
-	str	w0, [x1,1940]
+	str	w0, [x1,1932]
 	mov	w1, 4096
 	str	w3, [x2,8]
-	bne	.L282
-.L285:
+	bne	.L215
+.L218:
 	and	w1, w1, -17
-	b	.L283
-.L282:
+	b	.L216
+.L215:
 	cmp	w0, 24
-	bne	.L284
+	bne	.L217
 	orr	w1, w1, 16
-	b	.L283
-.L284:
+	b	.L216
+.L217:
 	cmp	w0, 40
 	orr	w1, w1, 262144
 	orr	w1, w1, 16
-	beq	.L285
-.L283:
+	beq	.L218
+.L216:
 	orr	w1, w1, 1
 	str	w1, [x2,12]
 	ret
@@ -2218,10 +1791,10 @@ NandcBchSel:
 	.type	FlashBchSel, %function
 FlashBchSel:
 	stp	x29, x30, [sp, -16]!
-	adrp	x1, .LANCHOR0+1944
+	adrp	x1, .LANCHOR0+1936
 	uxtb	w0, w0
 	add	x29, sp, 0
-	strb	w0, [x1,#:lo12:.LANCHOR0+1944]
+	strb	w0, [x1,#:lo12:.LANCHOR0+1936]
 	bl	NandcBchSel
 	ldp	x29, x30, [sp], 16
 	ret
@@ -2257,22 +1830,22 @@ FlashResume:
 	str	w2, [x1,336]
 	ldr	w2, [x0,164]
 	str	w2, [x1,344]
-.L292:
+.L225:
 	lsl	x0, x21, 3
 	ldrb	w0, [x0,x19]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L291
+	bhi	.L224
 	mov	w0, w21
 	bl	FlashReset
-.L291:
+.L224:
 	add	x21, x21, 1
 	cmp	x21, 4
-	bne	.L292
+	bne	.L225
 	add	x19, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x19,1864]
-	cbz	w0, .L293
+	ldrb	w0, [x19,1856]
+	cbz	w0, .L226
 	mov	w0, 1
 	bl	NandcSetMode
 	ldrb	w0, [x19,1844]
@@ -2282,7 +1855,7 @@ FlashResume:
 	ldr	w0, [x19,152]
 	lsr	w0, w0, 8
 	bl	NandcSetDdrPara
-.L293:
+.L226:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	x0, [x20,744]
 	ldrb	w0, [x0,20]
@@ -2352,15 +1925,15 @@ NandcIqrWaitFlashReady:
 	mov	w1, 1
 	bl	NandCIrqEnable
 	ldr	w0, [x19]
-	tbnz	x0, 9, .L303
+	tbnz	x0, 9, .L236
 	mov	x0, x19
 	bl	wait_for_nand_flash_ready
-	b	.L302
-.L303:
+	b	.L235
+.L236:
 	mov	x0, x19
 	mov	w1, 1
 	bl	NandCIrqDisable
-.L302:
+.L235:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -2384,17 +1957,17 @@ FlashEraseBlocks:
 	mov	w20, 0
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
-	cbz	w2, .L306
+	cbz	w2, .L239
 	mov	w1, w23
 	bl	FlashEraseSLc2KBlocks
-	b	.L307
-.L306:
+	b	.L240
+.L239:
 	mov	w28, 56
 	add	x25, x19, 1652
 	mov	x26, 24
-.L331:
+.L265:
 	cmp	w20, w23
-	bcs	.L332
+	bcs	.L266
 	umull	x5, w20, w28
 	mov	w1, 0
 	sub	w4, w23, w20
@@ -2409,32 +1982,32 @@ FlashEraseBlocks:
 	ldr	w0, [x29,124]
 	ldr	x5, [x29,96]
 	cmp	w0, w1
-	bcc	.L308
+	bcc	.L241
 	mov	w0, -1
 	str	w0, [x24,x5]
-	b	.L309
-.L308:
-	ldrb	w1, [x19,1945]
+	b	.L242
+.L241:
+	ldrb	w1, [x19,1937]
 	cmp	w1, wzr
 	uxtw	x1, w0
 	csel	w22, w22, wzr, ne
 	madd	x1, x1, x26, x25
 	ldr	x1, [x1,8]
-	cbz	x1, .L311
+	cbz	x1, .L244
 	bl	FlashWaitCmdDone
-.L311:
+.L244:
 	ldr	w0, [x29,124]
 	ldr	w1, [x29,120]
 	madd	x2, x0, x26, x25
 	str	x21, [x2,8]
 	str	xzr, [x2,16]
 	str	w1, [x2,4]
-	cbz	w22, .L312
+	cbz	w22, .L245
 	add	w1, w20, 1
 	umull	x1, w1, w28
 	add	x1, x24, x1
 	str	x1, [x2,16]
-.L312:
+.L245:
 	add	x1, x19, x0
 	mul	x0, x0, x26
 	ldrb	w21, [x1,1848]
@@ -2442,12 +2015,16 @@ FlashEraseBlocks:
 	mov	w0, w21
 	bl	NandcFlashCs
 	cmp	w27, 1
-	bne	.L313
+	bne	.L246
 	ldrb	w0, [x19,120]
-	cbz	w0, .L313
+	cbz	w0, .L246
 	mov	w0, w21
 	bl	flash_enter_slc_mode
-.L313:
+	b	.L247
+.L246:
+	mov	w0, w21
+	bl	flash_exit_slc_mode
+.L247:
 	ldr	w1, [x29,124]
 	add	x0, x19, 708
 	add	w20, w20, w22
@@ -2463,10 +2040,10 @@ FlashEraseBlocks:
 	bl	FlashEraseCmd
 	mov	w0, w21
 	bl	NandcFlashDeCs
-.L309:
+.L242:
 	add	w20, w20, 1
-	b	.L331
-.L332:
+	b	.L265
+.L266:
 	ldr	x0, [x29,104]
 	mov	x20, 0
 	mov	x22, 24
@@ -2474,25 +2051,25 @@ FlashEraseBlocks:
 	add	x21, x19, 1652
 	ldr	x0, [x19,128]
 	bl	NandcIqrWaitFlashReady
-.L315:
+.L249:
 	ldrb	w0, [x19,1845]
 	cmp	w0, w20
-	bls	.L333
+	bls	.L267
 	mov	w0, w20
 	bl	FlashWaitCmdDone
 	cmp	w27, 1
-	bne	.L316
+	bne	.L250
 	ldrb	w0, [x19,120]
-	cbz	w0, .L316
+	cbz	w0, .L250
 	mul	x0, x20, x22
 	ldrb	w0, [x0,x21]
 	bl	flash_exit_slc_mode
-.L316:
+.L250:
 	add	x20, x20, 1
-	b	.L315
-.L333:
+	b	.L249
+.L267:
 	mov	w0, 0
-.L307:
+.L240:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -2541,11 +2118,11 @@ NandcSendDumpDataStart:
 	.type	NandcSendDumpDataDone, %function
 NandcSendDumpDataDone:
 	sub	sp, sp, #16
-.L337:
+.L271:
 	ldr	w1, [x0,8]
 	str	w1, [sp,8]
 	ldr	w1, [sp,8]
-	tbz	x1, 20, .L337
+	tbz	x1, 20, .L271
 	add	sp, sp, 16
 	ret
 	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
@@ -2579,12 +2156,12 @@ NandcXferStart:
 	bfi	w23, w0, 5, 3
 	mov	w0, 1
 	bfi	w20, w0, 5, 2
-	ldr	w0, [x1,20]
+	ldr	w0, [x1,1864]
 	orr	w20, w20, 536870912
 	cmp	w0, 3
 	orr	w20, w20, 1024
 	bfi	w20, w3, 4, 1
-	bls	.L341
+	bls	.L275
 	ldr	w0, [x21,16]
 	cmp	x5, xzr
 	str	w0, [x29,88]
@@ -2592,11 +2169,11 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	and	w0, w0, -5
 	str	w0, [x29,88]
-	cbnz	w8, .L355
-	cbz	x22, .L342
-.L355:
-	cbnz	w24, .L344
-.L352:
+	cbnz	w8, .L289
+	cbz	x22, .L276
+.L289:
+	cbnz	w24, .L278
+.L286:
 	mov	x0, x21
 	bl	rk_nandc_xfer_irq_flag_init
 	mov	x0, x21
@@ -2606,62 +2183,62 @@ NandcXferStart:
 	mov	x0, x22
 	asr	w2, w2, 1
 	bfi	w20, w2, 22, 6
-	cbnz	x22, .L346
+	cbnz	x22, .L280
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,1888]
-	b	.L346
-.L344:
+	ldr	x0, [x0,1880]
+	b	.L280
+.L278:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w6, 128
 	mov	w3, 0
 	lsr	w2, w25, 1
 	mov	w4, w3
 	mov	w9, -1
-	ldr	w0, [x1,1940]
+	ldr	w0, [x1,1932]
 	cmp	w0, 25
 	mov	w0, 64
 	csel	w6, w0, w6, cc
-.L348:
+.L282:
 	cmp	w4, w2
-	bcs	.L352
+	bcs	.L286
 	lsr	w0, w3, 2
 	ubfiz	x0, x0, 2, 30
-	cbz	w8, .L349
+	cbz	w8, .L283
 	ldrh	w7, [x5,2]
-	ldr	x10, [x1,1896]
+	ldr	x10, [x1,1888]
 	ldrh	w11, [x5],4
 	orr	w7, w11, w7, lsl 16
 	str	w7, [x10,x0]
-	b	.L350
-.L349:
-	ldr	x7, [x1,1896]
+	b	.L284
+.L283:
+	ldr	x7, [x1,1888]
 	str	w9, [x7,x0]
-.L350:
+.L284:
 	add	w4, w4, 1
 	add	w3, w3, w6
-	b	.L348
-.L346:
+	b	.L282
+.L280:
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfx	x25, x20, 22, 5
 	mov	w2, w24
 	and	x22, x22, 3
-	ldr	x1, [x19,1896]
-	str	x1, [x19,1912]
+	ldr	x1, [x19,1888]
+	str	x1, [x19,1904]
 	lsl	w1, w25, 10
-	str	x0, [x19,1904]
+	str	x0, [x19,1896]
 	bl	rknand_dma_map_single
-	str	w0, [x19,1920]
-	ldr	x0, [x19,1912]
+	str	w0, [x19,1912]
+	ldr	x0, [x19,1904]
 	lsl	w1, w25, 7
 	mov	w2, w24
 	bl	rknand_dma_map_single
-	str	w0, [x19,1924]
+	str	w0, [x19,1916]
 	mov	w0, 1
-	str	w0, [x19,1928]
-	ldr	w0, [x19,1920]
+	str	w0, [x19,1920]
+	ldr	w0, [x19,1912]
 	mov	w1, 16
 	str	w0, [x21,20]
-	ldr	w0, [x19,1924]
+	ldr	w0, [x19,1916]
 	str	w0, [x21,24]
 	str	wzr, [x29,88]
 	ldr	w0, [x29,88]
@@ -2670,12 +2247,12 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	orr	w0, w0, 448
 	str	w0, [x29,88]
-	cbnz	x22, .L353
+	cbnz	x22, .L287
 	ldr	w0, [x29,88]
 	mov	w1, 2
 	bfi	w0, w1, 3, 3
 	str	w0, [x29,88]
-.L353:
+.L287:
 	ldr	w0, [x29,88]
 	cmp	w24, wzr
 	cset	w1, eq
@@ -2687,10 +2264,10 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	orr	w0, w0, 1
 	str	w0, [x29,88]
-.L342:
+.L276:
 	ldr	w0, [x29,88]
 	str	w0, [x21,16]
-.L341:
+.L275:
 	str	w23, [x21,12]
 	str	w20, [x21,8]
 	orr	w20, w20, 4
@@ -2708,14 +2285,14 @@ NandcXferStart:
 Ftl_log2:
 	mov	w2, 1
 	mov	w1, 0
-.L360:
+.L294:
 	cmp	w2, w0
-	bhi	.L362
+	bhi	.L296
 	add	w1, w1, 1
 	lsl	w2, w2, 1
 	uxth	w1, w1
-	b	.L360
-.L362:
+	b	.L294
+.L296:
 	sub	w0, w1, #1
 	ret
 	.size	Ftl_log2, .-Ftl_log2
@@ -2735,30 +2312,31 @@ FtlSysBlkNumInit:
 	csel	w0, w0, w1, hi
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x1,1952]
-	ldrh	w3, [x1,1962]
-	str	w0, [x1,1948]
+	ldrh	w2, [x1,1944]
+	ldrh	w3, [x1,1954]
+	str	w0, [x1,1940]
 	mul	w2, w0, w2
 	sub	w0, w3, w0
-	strh	w0, [x1,1960]
-	ldr	w0, [x1,1968]
-	str	w2, [x1,1956]
+	strh	w0, [x1,1952]
+	ldr	w0, [x1,1960]
+	str	w2, [x1,1948]
 	sub	w2, w0, w2
 	mov	w0, 0
-	str	w2, [x1,1964]
+	str	w2, [x1,1956]
 	ret
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
 	.align	2
 	.global	FtlConstantsInit
 	.type	FtlConstantsInit, %function
 FtlConstantsInit:
-	stp	x29, x30, [sp, -80]!
+	stp	x29, x30, [sp, -96]!
 	mov	x3, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
 	mov	x23, x0
 	adrp	x19, .LANCHOR0
 	ldrh	w6, [x0,8]
@@ -2766,35 +2344,35 @@ FtlConstantsInit:
 	ldrh	w2, [x23,10]
 	ldrh	w1, [x23,12]
 	ldrh	w4, [x23,14]
-	strh	w6, [x0,1972]
-	strh	w2, [x0,1974]
-	strh	w1, [x0,1976]
-	strh	w4, [x0,1962]
-.L367:
-	add	x5, x0, 1984
+	strh	w6, [x0,1964]
+	strh	w2, [x0,1966]
+	strh	w1, [x0,1968]
+	strh	w4, [x0,1954]
+.L301:
+	add	x5, x0, 1976
 	strb	w3, [x3,x5]
 	add	x3, x3, 1
 	cmp	x3, 32
-	bne	.L367
+	bne	.L301
 	ldrh	w3, [x23,20]
 	ldrb	w0, [x23,15]
 	cmp	w3, w0
-	bcs	.L368
+	bcs	.L302
 	uxtb	w8, w1
 	mov	w3, 0
 	mul	w11, w1, w2
 	ubfiz	w10, w8, 1, 7
 	add	x12, x19, :lo12:.LANCHOR0
-.L369:
+.L303:
 	cmp	w3, w1
-	bcs	.L371
+	bcs	.L305
 	uxtb	w0, w3
 	mov	w5, w3
 	mov	w7, 0
-.L372:
+.L306:
 	cmp	w7, w2
-	bcs	.L385
-	add	x9, x12, 1984
+	bcs	.L328
+	add	x9, x12, 1976
 	add	w13, w5, w11
 	add	w14, w0, w8
 	add	w7, w7, 1
@@ -2803,136 +2381,153 @@ FtlConstantsInit:
 	strb	w14, [x9,x13]
 	add	w5, w5, w1
 	uxtb	w0, w0
-	b	.L372
-.L385:
+	b	.L306
+.L328:
 	add	w3, w3, 1
-	b	.L369
-.L371:
+	b	.L303
+.L305:
 	add	x0, x19, :lo12:.LANCHOR0
 	lsl	w2, w2, 1
 	lsr	w4, w4, 1
-	strh	w2, [x0,1974]
-	strh	w4, [x0,1962]
-.L368:
+	strh	w2, [x0,1966]
+	strh	w4, [x0,1954]
+.L302:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 5
 	cmp	w6, 1
-	strh	w2, [x0,2016]
-	strh	wzr, [x0,2018]
-	bne	.L373
-	strh	w6, [x0,2016]
-.L373:
+	strh	w2, [x0,2008]
+	strh	wzr, [x0,2010]
+	bne	.L307
+	strh	w6, [x0,2008]
+.L307:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 4352
-	strh	w2, [x0,2020]
-	ldrb	w2, [x0,8]
-	cbz	w2, .L374
+	ldrb	w26, [x0,8]
+	strh	w2, [x0,2012]
+	cbz	w26, .L308
 	mov	w2, 384
-	strh	w2, [x0,2020]
-.L374:
+	strh	w2, [x0,2012]
+.L308:
 	add	x21, x19, :lo12:.LANCHOR0
-	ldrh	w20, [x21,1962]
-	ldrh	w22, [x21,1974]
+	ldrh	w20, [x21,1954]
+	ldrh	w22, [x21,1966]
 	mul	w22, w1, w22
 	mul	w1, w20, w1
 	uxth	w22, w22
-	strh	w22, [x21,1952]
+	strh	w22, [x21,1944]
 	uxth	w0, w1
-	strh	w0, [x21,2022]
+	strh	w0, [x21,2014]
 	bl	Ftl_log2
 	ldrh	w25, [x23,16]
 	ldrh	w24, [x23,20]
-	strh	w0, [x21,2024]
+	strh	w0, [x21,2016]
 	mul	w0, w22, w25
-	strh	w0, [x21,2030]
+	strh	w0, [x21,2022]
 	mov	w0, w24
-	ldrh	w26, [x23,18]
-	strh	w25, [x21,2026]
-	strh	w26, [x21,2028]
-	strh	w24, [x21,2032]
+	ldrh	w27, [x23,18]
+	strh	w25, [x21,2018]
+	strh	w27, [x21,2020]
+	strh	w24, [x21,2024]
 	bl	Ftl_log2
+	lsl	w2, w24, 9
 	uxth	w3, w0
-	strh	w0, [x21,2034]
-	lsl	w0, w24, 9
-	strh	w0, [x21,2036]
-	ubfx	x0, x0, 9, 7
+	strh	w0, [x21,2026]
 	cmp	w20, 1024
-	lsl	w0, w0, 1
-	strh	w0, [x21,2038]
 	ldrh	w0, [x23,26]
-	strh	w0, [x21,2040]
+	strh	w2, [x21,2028]
+	ubfx	x2, x2, 9, 7
+	strh	w0, [x21,2032]
+	lsl	w2, w2, 1
 	mul	w0, w22, w20
-	str	w0, [x21,1968]
-	bls	.L375
+	strh	w2, [x21,2030]
+	str	w0, [x21,1960]
+	bls	.L309
 	and	w0, w20, 255
-	strh	w0, [x21,2018]
-.L375:
+	strh	w0, [x21,2010]
+.L309:
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x2,2018]
-	ldrh	w0, [x2,2020]
+	mul	w0, w24, w27
+	ldrh	w1, [x2,2010]
 	sub	w1, w20, w1
 	mul	w1, w22, w1
 	mul	w1, w1, w24
-	mul	w24, w24, w26
 	mul	w1, w1, w25
 	asr	w1, w1, 11
-	str	w1, [x2,2044]
-	lsl	w1, w0, 3
-	sdiv	w24, w1, w24
-	uxth	w24, w24
-	cmp	w24, 4
-	bls	.L376
-	strh	w24, [x2,2048]
-	b	.L377
-.L376:
-	mov	w1, 4
-	strh	w1, [x2,2048]
-.L377:
+	str	w1, [x2,2036]
+	ldrh	w1, [x2,2012]
+	lsl	w1, w1, 3
+	sdiv	w0, w1, w0
+	uxth	w0, w0
+	cmp	w0, 4
+	bhi	.L326
+	mov	w0, 4
+.L326:
+	strh	w0, [x2,2040]
+	cbz	w26, .L312
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 640
+	strh	w1, [x0,2012]
+.L312:
 	add	x1, x19, :lo12:.LANCHOR0
-	asr	w0, w0, w3
 	lsl	w20, w20, 6
+	cmp	w22, 1
+	ldrh	w0, [x1,2012]
+	asr	w0, w0, w3
 	add	w3, w3, 9
 	asr	w20, w20, w3
-	add	w0, w0, 2
-	strh	w20, [x1,2052]
+	strh	w20, [x1,2044]
 	and	w20, w20, 65535
-	strh	w0, [x1,2050]
-	cmp	w22, 1
+	add	w0, w0, 2
+	strh	w0, [x1,2042]
 	mul	w0, w20, w22
-	str	w0, [x1,2056]
+	str	w0, [x1,2048]
 	add	w20, w20, 8
-	ldrh	w0, [x1,2048]
+	ldrh	w0, [x1,2040]
 	udiv	w0, w0, w22
 	add	w20, w20, w0
-	bne	.L384
+	bne	.L327
 	add	w20, w20, 4
-.L384:
+.L327:
 	add	x19, x19, :lo12:.LANCHOR0
-	str	w20, [x1,1948]
-	ldrh	w0, [x19,1948]
+	str	w20, [x1,1940]
+	ldrh	w0, [x19,1940]
 	bl	FtlSysBlkNumInit
-	str	wzr, [x19,2068]
-	ldr	w0, [x19,1948]
-	str	w0, [x19,2060]
-	ldr	w0, [x19,1964]
-	ldrh	w1, [x19,2026]
+	str	wzr, [x19,2060]
+	ldr	w0, [x19,1940]
+	str	w0, [x19,2052]
+	ldr	w0, [x19,1956]
+	ldrh	w1, [x19,2018]
 	lsl	w0, w0, 2
-	ldp	x21, x22, [sp,32]
 	mul	w1, w0, w1
-	ldrh	w0, [x19,2034]
-	ldp	x23, x24, [sp,48]
+	ldrh	w0, [x19,2026]
 	add	w0, w0, 9
 	lsr	w0, w1, w0
-	ldrh	w1, [x19,2032]
+	ldrh	w1, [x19,2024]
 	add	w0, w0, 2
-	strh	w0, [x19,2064]
+	strh	w0, [x19,2056]
 	mov	w0, 2048
-	ldp	x25, x26, [sp,64]
 	sdiv	w0, w0, w1
-	strh	w0, [x19,2066]
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 80
+	ldrh	w1, [x19,2040]
+	strh	w0, [x19,2058]
+	add	w0, w1, 3
+	strh	w0, [x19,2040]
+	ldr	w0, [x19,2048]
+	add	w2, w0, 3
+	str	w2, [x19,2048]
+	ldrb	w2, [x19,120]
+	cbz	w2, .L315
+	add	w1, w1, 4
+	add	w0, w0, 5
+	strh	w1, [x19,2040]
+	str	w0, [x19,2048]
+.L315:
 	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
@@ -2943,24 +2538,24 @@ IsBlkInVendorPart:
 	uxth	w4, w0
 	add	x1, x1, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldrh	w2, [x1,2072]
-	cbz	w2, .L387
-	ldrh	w2, [x1,2048]
-	ldr	x3, [x1,2080]
+	ldrh	w2, [x1,2064]
+	cbz	w2, .L330
+	ldrh	w2, [x1,2040]
+	ldr	x3, [x1,2072]
 	mov	x1, 0
-.L388:
+.L331:
 	cmp	w2, w1, uxth
-	bls	.L393
+	bls	.L336
 	add	x1, x1, 1
 	add	x0, x3, x1, lsl 1
 	ldrh	w0, [x0,-2]
 	cmp	w0, w4
-	bne	.L388
+	bne	.L331
 	mov	w0, 1
-	b	.L387
-.L393:
+	b	.L330
+.L336:
 	mov	w0, 0
-.L387:
+.L330:
 	ret
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
@@ -2971,50 +2566,50 @@ FtlCacheMetchLpa:
 	mov	w6, w0
 	add	x2, x2, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldr	w3, [x2,2088]
-	cbz	w3, .L395
-	ldr	x5, [x2,2096]
+	ldr	w3, [x2,2080]
+	cbz	w3, .L338
+	ldr	x5, [x2,2088]
 	mov	x0, 56
 	mov	x2, 0
-.L396:
+.L339:
 	cmp	w3, w2
-	bls	.L405
+	bls	.L348
 	madd	x4, x2, x0, x5
 	add	x2, x2, 1
 	ldr	w4, [x4,24]
 	cmp	w4, w6
-	bcc	.L396
+	bcc	.L339
 	cmp	w4, w1
-	bhi	.L396
+	bhi	.L339
 	mov	w0, 1
-	b	.L395
-.L405:
+	b	.L338
+.L348:
 	mov	w0, 0
-.L395:
+.L338:
 	ret
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
 	.align	2
 	.global	FtlGetCap
 	.type	FtlGetCap, %function
 FtlGetCap:
-	adrp	x0, .LANCHOR0+2068
-	ldr	w0, [x0,#:lo12:.LANCHOR0+2068]
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
 	ret
 	.size	FtlGetCap, .-FtlGetCap
 	.align	2
 	.global	FtlGetCapacity
 	.type	FtlGetCapacity, %function
 FtlGetCapacity:
-	adrp	x0, .LANCHOR0+2068
-	ldr	w0, [x0,#:lo12:.LANCHOR0+2068]
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
 	ret
 	.size	FtlGetCapacity, .-FtlGetCapacity
 	.align	2
 	.global	FtlGetLpn
 	.type	FtlGetLpn, %function
 FtlGetLpn:
-	adrp	x0, .LANCHOR0+2104
-	ldr	w0, [x0,#:lo12:.LANCHOR0+2104]
+	adrp	x0, .LANCHOR0+2096
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2096]
 	ret
 	.size	FtlGetLpn, .-FtlGetLpn
 	.align	2
@@ -3023,8 +2618,8 @@ FtlGetLpn:
 FtlGetCurEraseBlock:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x1,1952]
-	ldr	w0, [x1,2108]
+	ldrh	w2, [x1,1944]
+	ldr	w0, [x1,2100]
 	mul	w0, w2, w0
 	ret
 	.size	FtlGetCurEraseBlock, .-FtlGetCurEraseBlock
@@ -3034,8 +2629,8 @@ FtlGetCurEraseBlock:
 FtlGetAllBlockNum:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x1,1962]
-	ldrh	w0, [x1,1952]
+	ldrh	w2, [x1,1954]
+	ldrh	w0, [x1,1944]
 	mul	w0, w2, w0
 	ret
 	.size	FtlGetAllBlockNum, .-FtlGetAllBlockNum
@@ -3050,7 +2645,7 @@ FtlBbmMapBadBlock:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x19, x19, 2112
+	add	x19, x19, 2104
 	ldrh	w3, [x19,-90]
 	udiv	w2, w1, w3
 	add	x0, x19, x2, uxth 3
@@ -3081,11 +2676,11 @@ FtlBbmIsBadBlock:
 	adrp	x2, .LANCHOR0
 	uxth	w0, w0
 	add	x3, x2, :lo12:.LANCHOR0
-	ldrh	w1, [x3,2022]
+	ldrh	w1, [x3,2014]
 	udiv	w2, w0, w1
 	msub	w0, w2, w1, w0
 	add	x2, x3, x2, uxth 3
-	ldr	x1, [x2,2144]
+	ldr	x1, [x2,2136]
 	uxth	w0, w0
 	ubfx	x3, x0, 5, 11
 	ldr	w1, [x1,x3,lsl 2]
@@ -3111,22 +2706,22 @@ FtlBbtCalcTotleCnt:
 	str	x21, [sp,32]
 	mov	w19, 0
 	mov	w20, w19
-	ldrh	w1, [x0,2022]
-	ldrh	w21, [x0,1974]
+	ldrh	w1, [x0,2014]
+	ldrh	w21, [x0,1966]
 	mul	w21, w1, w21
-.L415:
+.L358:
 	cmp	w20, w21
-	bge	.L421
+	bge	.L364
 	mov	w0, w20
 	bl	FtlBbmIsBadBlock
-	cbz	w0, .L416
+	cbz	w0, .L359
 	add	w19, w19, 1
 	uxth	w19, w19
-.L416:
+.L359:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L415
-.L421:
+	b	.L358
+.L364:
 	mov	w0, w19
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -3141,11 +2736,11 @@ V2P_block:
 	uxth	w0, w0
 	add	x3, x3, :lo12:.LANCHOR0
 	uxth	w1, w1
-	ldrh	w4, [x3,1976]
+	ldrh	w4, [x3,1968]
 	udiv	w2, w0, w4
 	msub	w0, w2, w4, w0
 	madd	w0, w1, w4, w0
-	ldrh	w1, [x3,2022]
+	ldrh	w1, [x3,2014]
 	madd	w0, w2, w1, w0
 	ret
 	.size	V2P_block, .-V2P_block
@@ -3156,8 +2751,8 @@ P2V_plane:
 	adrp	x2, .LANCHOR0
 	uxth	w0, w0
 	add	x2, x2, :lo12:.LANCHOR0
-	ldrh	w1, [x2,1976]
-	ldrh	w3, [x2,2022]
+	ldrh	w1, [x2,1968]
+	ldrh	w3, [x2,2014]
 	udiv	w2, w0, w1
 	udiv	w3, w0, w3
 	msub	w0, w2, w1, w0
@@ -3171,10 +2766,10 @@ P2V_block_in_plane:
 	adrp	x2, .LANCHOR0
 	uxth	w0, w0
 	add	x2, x2, :lo12:.LANCHOR0
-	ldrh	w3, [x2,2022]
+	ldrh	w3, [x2,2014]
 	udiv	w1, w0, w3
 	msub	w0, w1, w3, w0
-	ldrh	w1, [x2,1976]
+	ldrh	w1, [x2,1968]
 	uxth	w0, w0
 	udiv	w0, w0, w1
 	ret
@@ -3185,24 +2780,24 @@ P2V_block_in_plane:
 ftl_cmp_data_ver:
 	cmp	w0, w1
 	mov	w2, -2147483648
-	bls	.L426
+	bls	.L369
 	sub	w1, w0, w1
 	cmp	w1, w2
 	cset	w0, ls
-	b	.L427
-.L426:
+	b	.L370
+.L369:
 	sub	w1, w1, w0
 	cmp	w1, w2
 	cset	w0, hi
-.L427:
+.L370:
 	ret
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	2
 	.global	FtlFreeSysBlkQueueEmpty
 	.type	FtlFreeSysBlkQueueEmpty, %function
 FtlFreeSysBlkQueueEmpty:
-	adrp	x0, .LANCHOR0+2214
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+2214]
+	adrp	x0, .LANCHOR0+2206
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2206]
 	cmp	w0, wzr
 	cset	w0, eq
 	ret
@@ -3211,8 +2806,8 @@ FtlFreeSysBlkQueueEmpty:
 	.global	FtlFreeSysBlkQueueFull
 	.type	FtlFreeSysBlkQueueFull, %function
 FtlFreeSysBlkQueueFull:
-	adrp	x0, .LANCHOR0+2214
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+2214]
+	adrp	x0, .LANCHOR0+2206
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2206]
 	cmp	w0, 1024
 	cset	w0, eq
 	ret
@@ -3230,33 +2825,33 @@ FtlFreeSysBlkQueueIn:
 	add	x0, x2, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
 	mov	x19, x2
-	ldrh	w0, [x0,2214]
+	ldrh	w0, [x0,2206]
 	cmp	w0, 1024
-	beq	.L430
-	cbz	w1, .L432
+	beq	.L373
+	cbz	w1, .L375
 	adrp	x20, .LANCHOR2
 	mov	w0, w22
 	add	x20, x20, :lo12:.LANCHOR2
 	bl	P2V_block_in_plane
 	uxth	w21, w0
 	lsl	w1, w22, 10
-	ldr	x0, [x20,-88]
+	ldr	x0, [x20,-96]
 	str	w1, [x0,4]
 	mov	w1, 1
 	mov	w2, w1
-	ldr	x0, [x20,-88]
+	ldr	x0, [x20,-96]
 	bl	FlashEraseBlocks
 	ubfiz	x1, x21, 1, 16
-	ldr	x2, [x20,-80]
+	ldr	x2, [x20,-88]
 	ldrh	w0, [x2,x1]
 	add	w0, w0, 1
 	strh	w0, [x2,x1]
-	ldr	w0, [x20,-72]
+	ldr	w0, [x20,-80]
 	add	w0, w0, 1
-	str	w0, [x20,-72]
-.L432:
+	str	w0, [x20,-80]
+.L375:
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x1, x1, 2208
+	add	x1, x1, 2200
 	ldrh	w0, [x1,6]
 	ldrh	w2, [x1,4]
 	add	w0, w0, 1
@@ -3266,7 +2861,7 @@ FtlFreeSysBlkQueueIn:
 	and	w2, w2, 1023
 	strh	w22, [x0,8]
 	strh	w2, [x1,4]
-.L430:
+.L373:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -3283,12 +2878,12 @@ FtlFreeSysBLkSort:
 	str	x21, [sp,32]
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-	add	x20, x20, 2208
+	add	x20, x20, 2200
 	adrp	x21, .LANCHOR2
-.L440:
+.L383:
 	ldrh	w0, [x20,6]
 	cmp	w0, w19
-	bls	.L448
+	bls	.L391
 	ldrh	w0, [x20,2]
 	add	w0, w0, w19
 	add	x0, x20, x0, sxtw 1
@@ -3298,32 +2893,32 @@ FtlFreeSysBLkSort:
 	add	x1, x21, :lo12:.LANCHOR2
 	ubfiz	x2, x19, 2, 16
 	add	w19, w19, 1
-	ldr	x3, [x1,-64]
+	ldr	x3, [x1,-72]
 	uxth	w19, w19
-	ldr	x1, [x1,-80]
+	ldr	x1, [x1,-88]
 	ldrh	w0, [x1,x0]
 	str	w0, [x3,x2]
-	b	.L440
-.L448:
+	b	.L383
+.L391:
 	adrp	x4, .LANCHOR0
 	adrp	x7, .LANCHOR2
 	mov	w0, 0
 	add	x4, x4, :lo12:.LANCHOR0
 	mov	x8, x7
-.L442:
-	ldrh	w6, [x4,2214]
+.L385:
+	ldrh	w6, [x4,2206]
 	sub	w1, w6, #1
 	cmp	w0, w1
-	bge	.L449
+	bge	.L392
 	add	x1, x7, :lo12:.LANCHOR2
 	add	w5, w0, 1
 	uxth	w5, w5
-	ldr	x3, [x1,-64]
+	ldr	x3, [x1,-72]
 	mov	w2, w5
 	mov	w1, w0
-.L443:
+.L386:
 	cmp	w2, w6
-	bcs	.L450
+	bcs	.L393
 	ubfiz	x9, x2, 2, 16
 	ldr	w10, [x3,w1,uxtw 2]
 	ldr	w9, [x3,x9]
@@ -3331,20 +2926,20 @@ FtlFreeSysBLkSort:
 	csel	w1, w1, w2, ls
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L443
-.L450:
+	b	.L386
+.L393:
 	cmp	w0, w1
-	beq	.L446
+	beq	.L389
 	ubfiz	x2, x0, 2, 16
 	ubfiz	x6, x1, 2, 32
 	ldr	w10, [x3,x2]
 	ldr	w9, [x3,x6]
 	str	w10, [x3,x6]
 	add	x3, x8, :lo12:.LANCHOR2
-	ldr	x3, [x3,-64]
+	ldr	x3, [x3,-72]
 	str	w9, [x3,x2]
-	add	x2, x4, 2208
-	ldrh	w3, [x4,2210]
+	add	x2, x4, 2200
+	ldrh	w3, [x4,2202]
 	add	w1, w3, w1
 	add	w0, w3, w0
 	add	x1, x2, x1, sxtw 1
@@ -3353,10 +2948,10 @@ FtlFreeSysBLkSort:
 	ldrh	w6, [x1,8]
 	strh	w2, [x1,8]
 	strh	w6, [x0,8]
-.L446:
+.L389:
 	mov	w0, w5
-	b	.L442
-.L449:
+	b	.L385
+.L392:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -3370,139 +2965,181 @@ IsInFreeQueue:
 	uxth	w6, w0
 	add	x1, x1, :lo12:.LANCHOR0
 	mov	w0, 0
-	add	x1, x1, 2208
+	add	x1, x1, 2200
 	ldrh	w4, [x1,6]
 	cmp	w4, 1024
-	beq	.L452
+	beq	.L395
 	ldrh	w5, [x1,2]
 	mov	w3, w0
-.L453:
+.L396:
 	cmp	w3, w4
-	bcs	.L457
+	bcs	.L400
 	add	w2, w3, w5
 	ubfiz	x2, x2, 1, 10
 	add	x2, x1, x2
 	ldrh	w0, [x2,8]
 	cmp	w0, w6
-	beq	.L456
+	beq	.L399
 	add	w3, w3, 1
-	b	.L453
-.L457:
+	b	.L396
+.L400:
 	mov	w0, 0
-	b	.L452
-.L456:
+	b	.L395
+.L399:
 	mov	w0, 1
-.L452:
+.L395:
 	ret
 	.size	IsInFreeQueue, .-IsInFreeQueue
 	.align	2
 	.global	FtlFreeSysBlkQueueOut
 	.type	FtlFreeSysBlkQueueOut, %function
 FtlFreeSysBlkQueueOut:
-	adrp	x1, .LANCHOR0
-	mov	w0, 0
-	add	x1, x1, :lo12:.LANCHOR0
-	add	x1, x1, 2208
-	ldrh	w3, [x1,6]
-	cbz	w3, .L459
-	ldrh	w2, [x1,2]
-	add	x0, x1, x2, sxtw 1
-	ldrh	w0, [x0,8]
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x2, x0, 2200
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w20, 65535
+	ldrh	w3, [x0,2206]
+	cbz	w3, .L402
+	ldrh	w1, [x0,2202]
+	add	x4, x2, x1, sxtw 1
 	sub	w3, w3, #1
-	add	w2, w2, 1
-	strh	w3, [x1,6]
-	and	w2, w2, 1023
-	strh	w2, [x1,2]
-.L459:
+	strh	w3, [x0,2206]
+	add	w1, w1, 1
+	ldrh	w20, [x4,8]
+	and	w1, w1, 1023
+	strh	w1, [x0,2202]
+	ldrb	w0, [x0,120]
+	cbz	w0, .L402
+	adrp	x19, .LANCHOR2
+	mov	w0, w20
+	add	x19, x19, :lo12:.LANCHOR2
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	lsl	w1, w20, 10
+	ldr	x0, [x19,-96]
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x0, [x19,-96]
+	bl	FlashEraseBlocks
+	ubfiz	x0, x21, 1, 16
+	ldr	x2, [x19,-88]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+	ldr	w0, [x19,-80]
+	add	w0, w0, 1
+	str	w0, [x19,-80]
+.L402:
+	mov	w0, w20
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
 	ret
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
 	.global	insert_data_list
 	.type	insert_data_list, %function
 insert_data_list:
+	adrp	x9, .LANCHOR0
 	uxth	w0, w0
-	mov	w9, 65535
-	cmp	w0, w9
-	beq	.L463
+	add	x9, x9, :lo12:.LANCHOR0
+	ldrh	w1, [x9,1952]
+	cmp	w1, w0
+	bls	.L410
 	adrp	x2, .LANCHOR2
 	mov	w7, 6
 	add	x5, x2, :lo12:.LANCHOR2
 	mov	w1, -1
 	umull	x10, w0, w7
 	mov	x3, x2
-	ldr	x11, [x5,-56]
+	ldr	x11, [x5,-64]
 	add	x4, x11, x10
 	strh	w1, [x4,2]
 	strh	w1, [x11,x10]
-	ldr	x1, [x5,-48]
-	cbnz	x1, .L464
-	str	x4, [x5,-48]
-	b	.L463
-.L464:
+	ldr	x1, [x5,-56]
+	cbnz	x1, .L411
+	str	x4, [x5,-56]
+	b	.L410
+.L411:
 	ubfiz	x8, x0, 1, 16
-	ldr	x13, [x5,-40]
+	ldr	x13, [x5,-48]
 	ldrh	w2, [x4,4]
 	mov	x14, -6148914691236517206
-	ldr	x12, [x5,-56]
+	ldr	x12, [x5,-64]
+	mov	w18, 65535
 	ldrh	w6, [x13,x8]
 	cmp	w2, wzr
+	ldrh	w17, [x9,1952]
 	mul	w6, w6, w2
 	sub	x2, x1, x12
 	asr	x2, x2, 1
 	csinv	w6, w6, wzr, ne
 	madd	x2, x14, x2, x2
-	ldr	x14, [x5,-80]
+	ldr	x14, [x5,-88]
+	mov	w5, 0
+	add	x9, x14, x8
 	uxth	w2, w2
-	add	x8, x14, x8
-.L471:
+	mov	w8, w7
+.L419:
+	add	w5, w5, 1
+	cmp	w0, w2
+	uxth	w5, w5
+	beq	.L410
+	cmp	w5, w17
+	bhi	.L410
 	ubfiz	x15, x2, 1, 16
 	ldrh	w16, [x1,4]
 	cmp	w16, wzr
-	ldrh	w5, [x13,x15]
-	mul	w5, w5, w16
-	csinv	w5, w5, wzr, ne
-	cmp	w5, w6
-	bne	.L467
+	ldrh	w7, [x13,x15]
+	mul	w7, w7, w16
+	csinv	w7, w7, wzr, ne
+	cmp	w7, w6
+	bne	.L415
 	ldrh	w15, [x14,x15]
-	ldrh	w5, [x8]
-	cmp	w15, w5
-	bcc	.L469
-	b	.L468
-.L467:
-	bhi	.L468
-.L469:
-	ldrh	w5, [x1]
-	cmp	w5, w9
-	bne	.L470
+	ldrh	w7, [x9]
+	cmp	w15, w7
+	bcc	.L417
+	b	.L416
+.L415:
+	bhi	.L416
+.L417:
+	ldrh	w7, [x1]
+	cmp	w7, w18
+	bne	.L418
 	strh	w2, [x4,2]
 	add	x2, x3, :lo12:.LANCHOR2
 	strh	w0, [x1]
-	str	x4, [x2,-32]
-	b	.L463
-.L470:
-	umull	x1, w5, w7
-	mov	w2, w5
+	str	x4, [x2,-40]
+	b	.L410
+.L418:
+	umull	x1, w7, w8
+	mov	w2, w7
 	add	x1, x12, x1
-	b	.L471
-.L468:
+	b	.L419
+.L416:
 	strh	w2, [x11,x10]
 	ldrh	w2, [x1,2]
 	strh	w2, [x4,2]
 	add	x2, x3, :lo12:.LANCHOR2
-	ldr	x3, [x2,-48]
+	ldr	x3, [x2,-56]
 	cmp	x1, x3
-	bne	.L472
+	bne	.L420
 	strh	w0, [x1,2]
-	str	x4, [x2,-48]
-	b	.L463
-.L472:
+	str	x4, [x2,-56]
+	b	.L410
+.L420:
 	ldrh	w3, [x1,2]
 	mov	w4, 6
-	ldr	x2, [x2,-56]
+	ldr	x2, [x2,-64]
 	umull	x3, w3, w4
 	strh	w0, [x2,x3]
 	strh	w0, [x1,2]
-.L463:
+.L410:
 	mov	w0, 0
 	ret
 	.size	insert_data_list, .-insert_data_list
@@ -3515,9 +3152,9 @@ INSERT_DATA_LIST:
 	bl	insert_data_list
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
-	ldrh	w1, [x0,-24]
+	ldrh	w1, [x0,-32]
 	add	w1, w1, 1
-	strh	w1, [x0,-24]
+	strh	w1, [x0,-32]
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -3528,66 +3165,66 @@ insert_free_list:
 	uxth	w0, w0
 	mov	w7, 65535
 	cmp	w0, w7
-	beq	.L477
+	beq	.L425
 	adrp	x2, .LANCHOR2
 	mov	w6, 6
 	add	x5, x2, :lo12:.LANCHOR2
 	mov	w1, -1
 	umull	x8, w0, w6
 	mov	x3, x2
-	ldr	x9, [x5,-56]
+	ldr	x9, [x5,-64]
 	add	x4, x9, x8
 	strh	w1, [x4,2]
 	strh	w1, [x9,x8]
-	ldr	x1, [x5,-16]
-	cbnz	x1, .L478
-	str	x4, [x5,-16]
-	b	.L477
-.L478:
-	ldr	x11, [x5,-80]
+	ldr	x1, [x5,-24]
+	cbnz	x1, .L426
+	str	x4, [x5,-24]
+	b	.L425
+.L426:
+	ldr	x11, [x5,-88]
 	ubfiz	x2, x0, 1, 16
-	ldr	x10, [x5,-56]
+	ldr	x10, [x5,-64]
 	mov	x5, -6148914691236517206
 	ldrh	w12, [x11,x2]
 	sub	x2, x1, x10
 	asr	x2, x2, 1
 	madd	x2, x5, x2, x2
 	uxth	w2, w2
-.L481:
+.L429:
 	ubfiz	x5, x2, 1, 16
 	ldrh	w5, [x11,x5]
 	cmp	w5, w12
-	bcs	.L479
+	bcs	.L427
 	ldrh	w5, [x1]
 	cmp	w5, w7
-	bne	.L480
+	bne	.L428
 	strh	w2, [x4,2]
 	strh	w0, [x1]
-	b	.L477
-.L480:
+	b	.L425
+.L428:
 	umull	x1, w5, w6
 	mov	w2, w5
 	add	x1, x10, x1
-	b	.L481
-.L479:
+	b	.L429
+.L427:
 	ldrh	w5, [x1,2]
 	strh	w5, [x4,2]
 	strh	w2, [x9,x8]
 	add	x2, x3, :lo12:.LANCHOR2
-	ldr	x3, [x2,-16]
+	ldr	x3, [x2,-24]
 	cmp	x1, x3
-	bne	.L482
+	bne	.L430
 	strh	w0, [x1,2]
-	str	x4, [x2,-16]
-	b	.L477
-.L482:
+	str	x4, [x2,-24]
+	b	.L425
+.L430:
 	ldrh	w3, [x1,2]
 	mov	w4, 6
-	ldr	x2, [x2,-56]
+	ldr	x2, [x2,-64]
 	umull	x3, w3, w4
 	strh	w0, [x2,x3]
 	strh	w0, [x1,2]
-.L477:
+.L425:
 	mov	w0, 0
 	ret
 	.size	insert_free_list, .-insert_free_list
@@ -3600,9 +3237,9 @@ INSERT_FREE_LIST:
 	bl	insert_free_list
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
-	ldrh	w1, [x0,-8]
+	ldrh	w1, [x0,-16]
 	add	w1, w1, 1
-	strh	w1, [x0,-8]
+	strh	w1, [x0,-16]
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -3617,41 +3254,43 @@ List_remove_node:
 	ldr	x3, [x0]
 	mov	w7, 65535
 	umull	x1, w1, w5
-	ldr	x2, [x6,-56]
+	ldr	x2, [x6,-64]
 	add	x4, x2, x1
 	cmp	x4, x3
-	bne	.L485
+	bne	.L433
 	ldrh	w3, [x2,x1]
 	cmp	w3, w7
-	bne	.L486
+	bne	.L434
 	str	xzr, [x0]
-	b	.L487
-.L486:
+	b	.L435
+.L434:
 	umull	x3, w3, w5
 	add	x3, x2, x3
 	str	x3, [x0]
 	mov	w0, -1
 	strh	w0, [x3,2]
-	b	.L487
-.L485:
+	b	.L435
+.L433:
 	ldrh	w0, [x2,x1]
 	ldrh	w3, [x4,2]
 	cmp	w0, w7
-	bne	.L488
+	bne	.L436
+	cmp	w3, w0
+	beq	.L435
 	umull	x3, w3, w5
 	mov	w0, -1
 	strh	w0, [x2,x3]
-	b	.L487
-.L488:
+	b	.L435
+.L436:
 	umull	x0, w0, w5
 	add	x0, x2, x0
 	strh	w3, [x0,2]
 	ldrh	w3, [x4,2]
-	ldr	x0, [x6,-56]
+	ldr	x0, [x6,-64]
 	ldrh	w7, [x2,x1]
 	umull	x3, w3, w5
 	strh	w7, [x0,x3]
-.L487:
+.L435:
 	mov	w0, -1
 	strh	w0, [x2,x1]
 	strh	w0, [x4,2]
@@ -3668,14 +3307,14 @@ List_pop_index_node:
 	str	x19, [sp,16]
 	mov	w19, 65535
 	ldr	x2, [x0]
-	cbz	x2, .L490
-	adrp	x3, .LANCHOR2-56
+	cbz	x2, .L438
+	adrp	x3, .LANCHOR2-64
 	mov	w5, w19
 	mov	w6, 6
-	ldr	x4, [x3,#:lo12:.LANCHOR2-56]
-.L491:
-	cbnz	w1, .L492
-.L494:
+	ldr	x4, [x3,#:lo12:.LANCHOR2-64]
+.L439:
+	cbnz	w1, .L440
+.L442:
 	sub	x2, x2, x4
 	mov	x1, -6148914691236517206
 	asr	x2, x2, 1
@@ -3683,17 +3322,17 @@ List_pop_index_node:
 	uxth	w19, w2
 	mov	w1, w19
 	bl	List_remove_node
-	b	.L490
-.L492:
+	b	.L438
+.L440:
 	ldrh	w3, [x2]
 	cmp	w3, w5
-	beq	.L494
+	beq	.L442
 	umull	x3, w3, w6
 	sub	w1, w1, #1
 	add	x2, x4, x3
 	uxth	w1, w1
-	b	.L491
-.L490:
+	b	.L439
+.L438:
 	mov	w0, w19
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -3718,27 +3357,27 @@ List_get_gc_head_node:
 	uxth	w3, w0
 	add	x2, x2, :lo12:.LANCHOR2
 	mov	w0, 65535
-	ldr	x1, [x2,-48]
-	cbz	x1, .L503
-	ldr	x4, [x2,-56]
+	ldr	x1, [x2,-56]
+	cbz	x1, .L451
+	ldr	x4, [x2,-64]
 	mov	w5, 6
-.L499:
-	cbz	w3, .L500
+.L447:
+	cbz	w3, .L448
 	ldrh	w2, [x1]
 	cmp	w2, w0
-	beq	.L503
+	beq	.L451
 	umull	x2, w2, w5
 	sub	w3, w3, #1
 	add	x1, x4, x2
 	uxth	w3, w3
-	b	.L499
-.L500:
+	b	.L447
+.L448:
 	sub	x1, x1, x4
 	mov	x0, -6148914691236517206
 	asr	x1, x1, 1
 	madd	x1, x0, x1, x1
 	uxth	w0, w1
-.L503:
+.L451:
 	ret
 	.size	List_get_gc_head_node, .-List_get_gc_head_node
 	.align	2
@@ -3748,54 +3387,63 @@ List_update_data_list:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
 	uxth	w20, w0
-	adrp	x0, .LANCHOR2
-	add	x19, x0, :lo12:.LANCHOR2
-	ldrh	w0, [x0,#:lo12:.LANCHOR2]
-	cmp	w0, w20
-	beq	.L505
-	ldrh	w0, [x19,48]
-	cmp	w0, w20
-	beq	.L505
-	ldrh	w0, [x19,96]
-	cmp	w0, w20
-	beq	.L505
-	mov	w2, 6
-	ldr	x4, [x19,-56]
-	ldr	x0, [x19,-48]
-	umull	x3, w20, w2
-	add	x3, x4, x3
-	cmp	x3, x0
-	beq	.L505
-	ldr	x5, [x19,-40]
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,-8]
+	cmp	w1, w20
+	beq	.L453
+	ldrh	w1, [x0,40]
+	cmp	w1, w20
+	beq	.L453
+	ldrh	w1, [x0,88]
+	cmp	w1, w20
+	beq	.L453
+	mov	w3, 6
+	ldr	x4, [x0,-64]
+	ldr	x2, [x0,-56]
+	umull	x3, w20, w3
+	add	x1, x4, x3
+	cmp	x1, x2
+	beq	.L453
+	ldr	x5, [x0,-48]
 	ubfiz	x0, x20, 1, 16
-	ldrh	w1, [x3,4]
+	ldrh	w2, [x1,4]
+	ldrh	w1, [x1,2]
 	ldrh	w0, [x5,x0]
-	mul	w1, w0, w1
-	ldrh	w0, [x3,2]
+	mul	w2, w0, w2
+	mov	w0, 65535
+	cmp	w2, wzr
+	csinv	w2, w2, wzr, ne
+	cmp	w1, w0
+	bne	.L455
+	ldrh	w0, [x4,x3]
+	cmp	w0, w1
+	beq	.L453
+.L455:
+	mov	w0, 6
 	mov	x3, -6148914691236517206
-	cmp	w1, wzr
-	csinv	w1, w1, wzr, ne
-	umull	x2, w0, w2
-	asr	x0, x2, 1
-	add	x2, x4, x2
+	umull	x1, w1, w0
+	asr	x0, x1, 1
+	add	x1, x4, x1
 	madd	x0, x3, x0, x0
-	ldrh	w2, [x2,4]
+	ldrh	w1, [x1,4]
 	ldrh	w0, [x5,x0,lsl 1]
-	mul	w0, w0, w2
+	mul	w0, w0, w1
 	cmp	w0, wzr
 	csinv	w0, w0, wzr, ne
-	cmp	w1, w0
-	bcs	.L505
-	sub	x0, x19, #48
+	cmp	w2, w0
+	bcs	.L453
+	add	x19, x19, :lo12:.LANCHOR2
 	mov	w1, w20
+	sub	x0, x19, #56
 	bl	List_remove_node
-	ldrh	w0, [x19,-24]
+	ldrh	w0, [x19,-32]
 	sub	w0, w0, #1
-	strh	w0, [x19,-24]
+	strh	w0, [x19,-32]
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L505:
+.L453:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -3812,17 +3460,17 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w2, [x0,10]
 	ldr	x1, [x0,16]
-.L509:
+.L458:
 	cmp	w20, w2
-	beq	.L512
+	beq	.L461
 	mov	x22, x1
 	ldrh	w21, [x1],2
-	cbnz	w21, .L510
+	cbnz	w21, .L459
 	mov	x19, x0
 	bl	FtlFreeSysBlkQueueOut
 	uxth	w1, w0
 	strh	w0, [x22]
-	cbz	w1, .L512
+	cbz	w1, .L461
 	ldr	w0, [x19,48]
 	strh	w21, [x19,2]
 	add	w0, w0, 1
@@ -3831,12 +3479,12 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19,8]
-	b	.L512
-.L510:
+	b	.L461
+.L459:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L509
-.L512:
+	b	.L458
+.L461:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -3847,71 +3495,71 @@ ftl_map_blk_alloc_new_blk:
 	.global	select_l2p_ram_region
 	.type	select_l2p_ram_region, %function
 select_l2p_ram_region:
-	adrp	x0, .LANCHOR0+2066
+	adrp	x0, .LANCHOR0+2058
 	mov	x4, 0
 	mov	w5, 65535
-	ldrh	w2, [x0,#:lo12:.LANCHOR0+2066]
+	ldrh	w2, [x0,#:lo12:.LANCHOR0+2058]
 	adrp	x0, .LANCHOR2
 	add	x1, x0, :lo12:.LANCHOR2
 	mov	x3, x0
-	ldr	x1, [x1,144]
-.L516:
+	ldr	x1, [x1,136]
+.L465:
 	uxth	w0, w4
 	cmp	w0, w2
-	bcs	.L532
+	bcs	.L481
 	add	x4, x4, 1
 	add	x6, x1, x4, lsl 4
 	ldrh	w6, [x6,-16]
 	cmp	w6, w5
-	bne	.L516
-	b	.L517
-.L532:
+	bne	.L465
+	b	.L466
+.L481:
 	mov	w0, w2
 	mov	x4, 0
 	mov	w7, -2147483648
-.L519:
+.L468:
 	uxth	w6, w4
 	cmp	w6, w2
-	bcs	.L533
+	bcs	.L482
 	add	x5, x1, x4, lsl 4
 	ldr	w5, [x5,4]
-	tbnz	w5, #31, .L528
+	tbnz	w5, #31, .L477
 	cmp	w5, w7
-	bcc	.L520
-.L528:
+	bcc	.L469
+.L477:
 	mov	w5, w7
 	mov	w6, w0
-.L520:
+.L469:
 	add	x4, x4, 1
 	mov	w7, w5
 	mov	w0, w6
-	b	.L519
-.L533:
+	b	.L468
+.L482:
 	cmp	w0, w2
-	bcc	.L517
+	bcc	.L466
 	add	x0, x3, :lo12:.LANCHOR2
 	add	x1, x1, 4
 	mov	w4, -1
 	mov	w3, 0
-	ldrh	w5, [x0,152]
+	ldrh	w5, [x0,144]
 	mov	w0, w2
-.L523:
+.L472:
 	cmp	w3, w2
-	beq	.L517
+	beq	.L466
 	ldr	w7, [x1]
 	cmp	w7, w4
-	bcs	.L524
+	bcs	.L473
 	ldrh	w6, [x1,-4]
 	cmp	w6, w5
 	csel	w4, w4, w7, eq
 	cmp	w6, w5
 	csel	w0, w0, w3, eq
-.L524:
+.L473:
 	add	w3, w3, 1
 	add	x1, x1, 16
 	uxth	w3, w3
-	b	.L523
-.L517:
+	b	.L472
+.L466:
 	ret
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
@@ -3920,36 +3568,36 @@ select_l2p_ram_region:
 FtlUpdateVaildLpn:
 	adrp	x1, .LANCHOR2
 	add	x3, x1, :lo12:.LANCHOR2
-	ldrh	w2, [x3,154]
-	cbnz	w0, .L535
+	ldrh	w2, [x3,146]
+	cbnz	w0, .L484
 	cmp	w2, 4
-	bhi	.L535
+	bhi	.L484
 	add	w2, w2, 1
-	strh	w2, [x3,154]
-	b	.L534
-.L535:
-	adrp	x2, .LANCHOR0+1960
+	strh	w2, [x3,146]
+	b	.L483
+.L484:
+	adrp	x2, .LANCHOR0+1952
 	add	x0, x1, :lo12:.LANCHOR2
 	mov	w7, 65535
-	ldrh	w5, [x2,#:lo12:.LANCHOR0+1960]
-	strh	wzr, [x0,154]
-	str	wzr, [x0,156]
-	ldr	x6, [x0,-40]
+	ldrh	w5, [x2,#:lo12:.LANCHOR0+1952]
+	strh	wzr, [x0,146]
+	str	wzr, [x0,148]
+	ldr	x6, [x0,-48]
 	mov	x0, 0
-.L536:
+.L485:
 	cmp	w5, w0, uxth
-	bls	.L534
+	bls	.L483
 	ldrh	w4, [x6,x0,lsl 1]
 	cmp	w4, w7
-	beq	.L537
+	beq	.L486
 	add	x3, x1, :lo12:.LANCHOR2
-	ldr	w2, [x3,156]
+	ldr	w2, [x3,148]
 	add	w2, w4, w2
-	str	w2, [x3,156]
-.L537:
+	str	w2, [x3,148]
+.L486:
 	add	x0, x0, 1
-	b	.L536
-.L534:
+	b	.L485
+.L483:
 	ret
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
@@ -3959,10 +3607,10 @@ ftl_set_blk_mode:
 	stp	x29, x30, [sp, -16]!
 	uxth	w0, w0
 	add	x29, sp, 0
-	cbz	w1, .L541
+	cbz	w1, .L490
 	bl	ftl_set_blk_mode.part.8
-	b	.L540
-.L541:
+	b	.L489
+.L490:
 	adrp	x1, .LANCHOR0
 	ubfx	x2, x0, 5, 11
 	lsl	x2, x2, 2
@@ -3972,7 +3620,7 @@ ftl_set_blk_mode:
 	ldr	w1, [x3,x2]
 	bic	w0, w1, w0
 	str	w0, [x3,x2]
-.L540:
+.L489:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -3999,42 +3647,42 @@ ftl_sb_update_avl_pages:
 	uxth	w2, w2
 	strh	wzr, [x0,4]
 	mov	w6, 65535
-	ldrh	w4, [x4,1952]
-.L545:
+	ldrh	w4, [x4,1944]
+.L494:
 	cmp	w2, w4
-	bcs	.L551
+	bcs	.L500
 	add	x5, x0, x2, sxtw 1
 	ldrh	w5, [x5,16]
 	cmp	w5, w6
-	beq	.L546
+	beq	.L495
 	ldrh	w5, [x0,4]
 	add	w5, w5, 1
 	strh	w5, [x0,4]
-.L546:
+.L495:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L545
-.L551:
+	b	.L494
+.L500:
 	add	x3, x3, :lo12:.LANCHOR0
 	mov	w6, 65535
 	add	x4, x0, x4, uxth 1
-	ldrh	w5, [x3,2026]
+	ldrh	w5, [x3,2018]
 	mov	x3, x0
-.L548:
+.L497:
 	cmp	x3, x4
-	beq	.L552
+	beq	.L501
 	ldrh	w2, [x3,16]
 	cmp	w2, w6
-	beq	.L549
+	beq	.L498
 	ldrh	w2, [x0,4]
 	add	w2, w5, w2
 	sub	w2, w2, #1
 	sub	w2, w2, w1
 	strh	w2, [x0,4]
-.L549:
+.L498:
 	add	x3, x3, 2
-	b	.L548
-.L552:
+	b	.L497
+.L501:
 	ret
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
@@ -4047,55 +3695,60 @@ make_superblock:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
+	adrp	x20, .LANCHOR0
 	mov	x19, x0
 	strh	wzr, [x0,4]
-	strb	wzr, [x0,7]
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
 	add	x22, x19, 16
+	strb	wzr, [x0,7]
+	add	x0, x20, :lo12:.LANCHOR0
 	mov	x21, 0
-	mov	x20, x0
-	mov	x23, x1
+	mov	x23, x0
 	mov	w25, -1
-	ldrh	w24, [x1,1952]
-.L554:
+	ldrh	w24, [x0,1944]
+.L503:
 	cmp	w24, w21, uxth
-	bls	.L561
-	add	x0, x23, 1984
+	bls	.L514
+	add	x0, x23, 1976
 	ldrh	w1, [x19]
 	ldrb	w0, [x0,x21]
 	bl	V2P_block
 	strh	w25, [x22]
 	mov	w26, w0
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L555
+	cbnz	w0, .L504
 	strh	w26, [x22]
 	ldrb	w0, [x19,7]
 	add	w0, w0, 1
 	strb	w0, [x19,7]
-.L555:
+.L504:
 	add	x21, x21, 1
 	add	x22, x22, 2
-	b	.L554
-.L561:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x19,7]
+	b	.L503
+.L514:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x19,7]
 	strb	wzr, [x19,9]
-	ldrh	w0, [x0,2026]
-	mul	w0, w1, w0
+	ldrh	w1, [x1,2018]
+	mul	w0, w0, w1
 	strh	w0, [x19,4]
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
-	ldr	w1, [x0,160]
-	cbz	w1, .L557
+	ldr	w1, [x0,152]
+	cbz	w1, .L506
 	ldrh	w1, [x19]
-	ldr	x0, [x0,-80]
+	ldr	x0, [x0,-88]
 	ldrh	w0, [x0,x1,lsl 1]
 	cmp	w0, 59
-	bhi	.L557
+	bhi	.L506
 	mov	w0, 1
 	strb	w0, [x19,9]
-.L557:
+.L506:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x20,120]
+	cbz	w0, .L507
+	mov	w0, 1
+	strb	w0, [x19,9]
+.L507:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4117,33 +3770,33 @@ update_multiplier_value:
 	stp	x23, x24, [sp,48]
 	mov	x22, 0
 	uxth	w21, w0
-	ldrh	w23, [x1,1952]
+	ldrh	w23, [x1,1944]
 	mov	w19, w22
-	ldrh	w24, [x1,2026]
+	ldrh	w24, [x1,2018]
 	mov	x20, x1
-.L563:
+.L516:
 	cmp	w23, w22, uxth
-	bls	.L570
-	add	x0, x20, 1984
+	bls	.L523
+	add	x0, x20, 1976
 	mov	w1, w21
 	ldrb	w0, [x0,x22]
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L564
+	cbnz	w0, .L517
 	add	w19, w19, w24
 	uxth	w19, w19
-.L564:
+.L517:
 	add	x22, x22, 1
-	b	.L563
-.L570:
-	cbz	w19, .L566
+	b	.L516
+.L523:
+	cbz	w19, .L519
 	mov	w0, 32768
 	sdiv	w19, w0, w19
-.L566:
+.L519:
 	mov	w0, 6
 	umull	x21, w21, w0
-	adrp	x0, .LANCHOR2-56
-	ldr	x0, [x0,#:lo12:.LANCHOR2-56]
+	adrp	x0, .LANCHOR2-64
+	ldr	x0, [x0,#:lo12:.LANCHOR2-64]
 	add	x21, x0, x21
 	mov	w0, 0
 	strh	w19, [x21,4]
@@ -4159,18 +3812,18 @@ update_multiplier_value:
 GetFreeBlockMinEraseCount:
 	adrp	x2, .LANCHOR2
 	add	x2, x2, :lo12:.LANCHOR2
-	ldr	x1, [x2,-16]
+	ldr	x1, [x2,-24]
 	mov	w0, w1
-	cbz	x1, .L572
-	ldr	x0, [x2,-56]
+	cbz	x1, .L525
+	ldr	x0, [x2,-64]
 	sub	x1, x1, x0
 	mov	x0, -6148914691236517206
 	asr	x1, x1, 1
 	madd	x1, x0, x1, x1
-	ldr	x0, [x2,-80]
+	ldr	x0, [x2,-88]
 	and	x1, x1, 65535
 	ldrh	w0, [x0,x1,lsl 1]
-.L572:
+.L525:
 	ret
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
 	.align	2
@@ -4180,15 +3833,15 @@ GetFreeBlockMaxEraseCount:
 	adrp	x2, .LANCHOR2
 	uxth	w4, w0
 	add	x5, x2, :lo12:.LANCHOR2
-	ldr	x1, [x5,-16]
+	ldr	x1, [x5,-24]
 	mov	w0, w1
-	cbz	x1, .L575
-	ldrh	w3, [x5,-8]
+	cbz	x1, .L528
+	ldrh	w3, [x5,-16]
 	mov	w0, 7
 	mov	w6, 6
 	mov	w7, 65535
 	mul	w3, w3, w0
-	ldr	x0, [x5,-56]
+	ldr	x0, [x5,-64]
 	asr	w3, w3, 3
 	cmp	w4, w3
 	sub	x1, x1, x0
@@ -4198,25 +3851,25 @@ GetFreeBlockMaxEraseCount:
 	madd	x1, x3, x1, x1
 	mov	w3, 0
 	uxth	w1, w1
-.L577:
+.L530:
 	cmp	w3, w4
-	beq	.L580
+	beq	.L533
 	umull	x5, w1, w6
 	ldrh	w5, [x0,x5]
 	cmp	w5, w7
-	bne	.L578
-.L580:
+	bne	.L531
+.L533:
 	add	x2, x2, :lo12:.LANCHOR2
 	ubfiz	x1, x1, 1, 16
-	ldr	x0, [x2,-80]
+	ldr	x0, [x2,-88]
 	ldrh	w0, [x0,x1]
-	b	.L575
-.L578:
+	b	.L528
+.L531:
 	add	w3, w3, 1
 	mov	w1, w5
 	uxth	w3, w3
-	b	.L577
-.L575:
+	b	.L530
+.L528:
 	ret
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -4232,11 +3885,11 @@ FtlPrintInfo2buf:
 	add	x25, x25, :lo12:.LANCHOR0
 	str	x27, [sp,80]
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
 	stp	x21, x22, [sp,32]
-	mov	x23, x0
+	stp	x23, x24, [sp,48]
+	mov	x22, x0
 	bl	strcpy
-	add	x20, x23, 12
+	add	x20, x22, 12
 	ldr	w2, [x25,168]
 	adrp	x1, .LC3
 	mov	x0, x20
@@ -4244,25 +3897,25 @@ FtlPrintInfo2buf:
 	bl	sprintf
 	add	x20, x20, x0, sxtw
 	adrp	x1, .LC4
-	ldr	w2, [x25,2044]
+	ldr	w2, [x25,2036]
 	mov	x0, x20
 	add	x1, x1, :lo12:.LC4
 	bl	sprintf
 	add	x20, x20, x0, sxtw
-	adrp	x0, .LANCHOR1+532
-	ldr	w0, [x0,#:lo12:.LANCHOR1+532]
+	adrp	x0, .LANCHOR1+504
+	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
 	cmp	w0, 1
-	beq	.L583
-	sub	w0, w20, w23
-	b	.L584
-.L583:
+	beq	.L536
+	sub	w0, w20, w22
+	b	.L537
+.L536:
 	add	x0, x29, 96
 	add	x1, x29, 100
 	add	x2, x29, 104
 	add	x3, x29, 108
 	adrp	x24, .LANCHOR2
 	bl	NandcGetTimeCfg
-	add	x22, x24, :lo12:.LANCHOR2
+	add	x23, x24, :lo12:.LANCHOR2
 	ldr	w4, [x29,104]
 	adrp	x1, .LC5
 	ldr	w5, [x29,108]
@@ -4277,75 +3930,75 @@ FtlPrintInfo2buf:
 	add	x1, x1, :lo12:.LC6
 	add	x21, x21, 10
 	bl	strcpy
-	ldr	w2, [x25,2104]
+	ldr	w2, [x25,2096]
 	adrp	x1, .LC7
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC7
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,156]
+	ldr	w2, [x23,148]
 	adrp	x1, .LC8
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC8
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,164]
+	ldr	w2, [x23,156]
 	adrp	x1, .LC9
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC9
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,168]
+	ldr	w2, [x23,160]
 	adrp	x1, .LC10
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC10
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,172]
+	ldr	w2, [x23,164]
 	adrp	x1, .LC11
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,176]
+	ldr	w2, [x23,168]
 	adrp	x1, .LC12
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC12
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,180]
+	ldr	w2, [x23,172]
 	adrp	x1, .LC13
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC13
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,184]
+	ldr	w2, [x23,176]
 	adrp	x1, .LC14
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC14
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,188]
+	ldr	w2, [x23,180]
 	adrp	x1, .LC15
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC15
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,192]
+	ldr	w2, [x23,184]
 	adrp	x1, .LC16
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC16
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,196]
+	ldr	w2, [x23,188]
 	adrp	x1, .LC17
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC17
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,200]
+	ldr	w2, [x23,192]
 	adrp	x1, .LC18
 	add	x1, x1, :lo12:.LC18
 	mov	x0, x21
@@ -4353,298 +4006,298 @@ FtlPrintInfo2buf:
 	add	x21, x21, x0, sxtw
 	bl	FtlBbtCalcTotleCnt
 	uxth	w3, w0
-	ldrh	w2, [x25,2118]
+	ldrh	w2, [x25,2110]
 	adrp	x1, .LC19
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC19
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,-8]
+	ldrh	w2, [x23,-16]
 	adrp	x1, .LC20
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC20
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,204]
+	ldr	w2, [x23,196]
 	adrp	x1, .LC21
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC21
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,208]
+	ldr	w2, [x23,200]
 	adrp	x1, .LC22
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC22
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,212]
+	ldr	w2, [x23,204]
 	adrp	x1, .LC23
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC23
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,-72]
+	ldr	w2, [x23,-80]
 	adrp	x1, .LC24
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC24
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,216]
+	ldr	w2, [x23,208]
 	adrp	x1, .LC25
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC25
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x22,220]
+	ldr	w2, [x23,212]
 	adrp	x1, .LC26
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC26
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,254]
+	ldrh	w2, [x23,246]
 	adrp	x1, .LC27
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC27
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,252]
+	ldrh	w2, [x23,244]
 	adrp	x1, .LC28
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC28
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x25,2068]
+	ldr	w2, [x25,2060]
 	adrp	x1, .LC29
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC29
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x25,2060]
+	ldr	w2, [x25,2052]
 	adrp	x1, .LC30
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC30
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x25,1948]
+	ldr	w2, [x25,1940]
 	adrp	x1, .LC31
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC31
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x25,2214]
+	ldrh	w2, [x25,2206]
 	adrp	x1, .LC32
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC32
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x25,1960]
+	ldrh	w2, [x25,1952]
 	adrp	x1, .LC33
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC33
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,272]
+	ldrh	w2, [x23,264]
 	adrp	x1, .LC34
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC34
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x25,1964]
+	ldr	w2, [x25,1956]
 	adrp	x1, .LC35
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC35
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,280]
+	ldrh	w2, [x23,272]
 	adrp	x1, .LC36
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC36
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x25,2112]
+	ldrh	w2, [x25,2104]
 	adrp	x1, .LC37
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC37
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,2]
+	ldrh	w2, [x23,-6]
 	adrp	x1, .LC38
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC38
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,6]
+	ldrb	w2, [x23,-2]
 	adrp	x1, .LC39
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC39
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x24,#:lo12:.LANCHOR2]
+	ldrh	w2, [x23,-8]
 	adrp	x1, .LC40
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC40
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,8]
+	ldrb	w2, [x23]
 	adrp	x1, .LC41
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC41
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,4]
+	ldrh	w2, [x23,-4]
 	adrp	x1, .LC42
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC42
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w3, [x24,#:lo12:.LANCHOR2]
+	ldrh	w3, [x23,-8]
 	adrp	x1, .LC43
-	ldr	x2, [x22,-40]
+	ldr	x2, [x23,-48]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC43
 	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,50]
+	ldrh	w2, [x23,42]
 	adrp	x1, .LC44
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC44
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,54]
+	ldrb	w2, [x23,46]
 	adrp	x1, .LC45
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC45
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,48]
+	ldrh	w2, [x23,40]
 	adrp	x1, .LC46
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC46
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,56]
+	ldrb	w2, [x23,48]
 	adrp	x1, .LC47
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC47
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,52]
+	ldrh	w2, [x23,44]
 	adrp	x1, .LC48
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC48
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w3, [x22,48]
+	ldrh	w3, [x23,40]
 	adrp	x1, .LC49
-	ldr	x2, [x22,-40]
+	ldr	x2, [x23,-48]
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC49
 	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,98]
+	ldrh	w2, [x23,90]
 	adrp	x1, .LC50
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC50
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,102]
+	ldrb	w2, [x23,94]
 	adrp	x1, .LC51
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC51
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,96]
+	ldrh	w2, [x23,88]
 	adrp	x1, .LC52
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC52
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,104]
+	ldrb	w2, [x23,96]
 	adrp	x1, .LC53
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC53
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,100]
+	ldrh	w2, [x23,92]
 	adrp	x1, .LC54
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC54
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,298]
+	ldrh	w2, [x23,290]
 	adrp	x1, .LC55
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC55
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,302]
+	ldrb	w2, [x23,294]
 	adrp	x1, .LC56
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC56
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,296]
+	ldrh	w2, [x23,288]
 	adrp	x1, .LC57
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC57
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,304]
+	ldrb	w2, [x23,296]
 	adrp	x1, .LC58
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC58
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,300]
+	ldrh	w2, [x23,292]
 	adrp	x1, .LC59
 	mov	x0, x21
 	add	x1, x1, :lo12:.LC59
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w3, [x22,344]
+	ldr	w3, [x23,336]
 	adrp	x1, .LC60
-	ldr	w2, [x22,160]
+	ldr	w2, [x23,152]
 	add	x1, x1, :lo12:.LC60
-	ldr	w4, [x22,436]
+	ldr	w4, [x23,428]
 	mov	x0, x21
-	ldr	w5, [x22,428]
+	ldr	w5, [x23,420]
 	orr	w2, w2, w3, lsl 8
-	ldr	w3, [x22,432]
+	ldr	w3, [x23,424]
 	bl	sprintf
 	add	x19, x21, x0, sxtw
-	ldr	w2, [x22,424]
+	ldr	w2, [x23,416]
 	adrp	x1, .LC61
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC61
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x22,448]
+	ldr	w2, [x23,440]
 	adrp	x1, .LC62
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC62
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,864]
+	ldrh	w2, [x23,856]
 	adrp	x1, .LC63
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC63
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,866]
+	ldrh	w2, [x23,858]
 	adrp	x1, .LC64
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC64
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x22,868]
+	ldr	w2, [x23,860]
 	adrp	x1, .LC65
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC65
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x22,872]
+	ldrh	w2, [x23,864]
 	adrp	x1, .LC66
 	add	x1, x1, :lo12:.LC66
 	mov	x0, x19
@@ -4657,7 +4310,7 @@ FtlPrintInfo2buf:
 	add	x1, x1, :lo12:.LC67
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w0, [x22,-8]
+	ldrh	w0, [x23,-16]
 	bl	GetFreeBlockMaxEraseCount
 	uxth	w2, w0
 	adrp	x1, .LC68
@@ -4665,88 +4318,88 @@ FtlPrintInfo2buf:
 	add	x1, x1, :lo12:.LC68
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w0, [x22,296]
+	ldrh	w0, [x23,288]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L585
+	beq	.L538
 	ubfiz	x2, x0, 1, 16
-	ldr	x3, [x22,-40]
+	ldr	x3, [x23,-48]
 	adrp	x1, .LC69
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC69
 	ldrh	w2, [x3,x2]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-.L585:
+.L538:
 	mov	w0, 0
-	adrp	x22, .LC70
+	adrp	x23, .LC70
 	mov	w20, 0
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	mov	w26, 6
 	uxth	w3, w0
-	add	x22, x22, :lo12:.LC70
-.L587:
+	add	x23, x23, :lo12:.LC70
+.L540:
 	cmp	w3, w27
-	beq	.L586
+	beq	.L539
 	add	x21, x24, :lo12:.LANCHOR2
 	ubfiz	x6, x3, 1, 16
 	umull	x25, w3, w26
 	mov	x0, x19
 	mov	w2, w20
-	ldr	x5, [x21,-56]
-	mov	x1, x22
-	ldr	x4, [x21,-40]
+	ldr	x5, [x21,-64]
+	mov	x1, x23
+	ldr	x4, [x21,-48]
 	add	w20, w20, 1
-	ldr	x7, [x21,-80]
+	ldr	x7, [x21,-88]
 	add	x5, x5, x25
 	ldrh	w4, [x4,x6]
 	ldrh	w5, [x5,4]
 	ldrh	w6, [x7,x6]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,-56]
+	ldr	x0, [x21,-64]
 	cmp	w20, 16
 	ldrh	w3, [x0,x25]
-	bne	.L587
-.L586:
+	bne	.L540
+.L539:
 	add	x1, x24, :lo12:.LANCHOR2
-	adrp	x22, .LC71
+	adrp	x23, .LC71
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-	add	x22, x22, :lo12:.LC71
-	ldr	x0, [x1,-16]
-	ldr	x3, [x1,-56]
+	add	x23, x23, :lo12:.LC71
+	ldr	x0, [x1,-24]
+	ldr	x3, [x1,-64]
 	sub	x3, x0, x3
 	mov	x0, -6148914691236517206
 	asr	x3, x3, 1
 	madd	x3, x0, x3, x3
 	uxth	w3, w3
-.L589:
+.L542:
 	cmp	w3, w27
-	beq	.L588
+	beq	.L541
 	add	x21, x24, :lo12:.LANCHOR2
 	ubfiz	x5, x3, 1, 16
 	umull	x25, w3, w26
 	mov	x0, x19
 	mov	w2, w20
-	ldr	x4, [x21,-56]
-	mov	x1, x22
-	ldr	x6, [x21,-80]
+	ldr	x4, [x21,-64]
+	mov	x1, x23
+	ldr	x6, [x21,-88]
 	add	w20, w20, 1
 	add	x4, x4, x25
 	ldrh	w5, [x6,x5]
 	ldrh	w4, [x4,4]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,-56]
+	ldr	x0, [x21,-64]
 	cmp	w20, 4
 	ldrh	w3, [x0,x25]
-	bne	.L589
-.L588:
-	sub	w0, w19, w23
-.L584:
+	bne	.L542
+.L541:
+	sub	w0, w19, w22
+.L537:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -4781,209 +4434,220 @@ rknand_proc_ftlread:
 	.global	GetSwlReplaceBlock
 	.type	GetSwlReplaceBlock, %function
 GetSwlReplaceBlock:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR2
+	str	x27, [sp,80]
 	add	x0, x19, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	ldr	w2, [x0,212]
-	ldr	w1, [x0,220]
+	ldr	w2, [x0,204]
+	ldr	w1, [x0,212]
 	cmp	w2, w1
-	bcs	.L594
+	bcs	.L547
 	adrp	x1, .LANCHOR0
-	str	wzr, [x0,204]
+	str	wzr, [x0,196]
 	add	x2, x1, :lo12:.LANCHOR0
-	ldr	x5, [x0,-80]
+	ldr	x5, [x0,-88]
 	mov	x0, 0
-	ldrh	w3, [x2,1960]
-.L595:
+	ldrh	w3, [x2,1952]
+.L548:
 	cmp	w3, w0
-	bls	.L636
+	bls	.L589
 	add	x4, x19, :lo12:.LANCHOR2
 	ldrh	w6, [x5,x0,lsl 1]
 	add	x0, x0, 1
-	ldr	w2, [x4,204]
+	ldr	w2, [x4,196]
 	add	w2, w6, w2
-	str	w2, [x4,204]
-	b	.L595
-.L636:
+	str	w2, [x4,196]
+	b	.L548
+.L589:
 	add	x2, x19, :lo12:.LANCHOR2
 	add	x1, x1, :lo12:.LANCHOR0
-	ldr	w0, [x2,204]
-	ldrh	w1, [x1,2016]
+	ldr	w0, [x2,196]
+	ldrh	w1, [x1,2008]
 	udiv	w3, w0, w3
-	str	w3, [x2,212]
-	ldr	w3, [x2,208]
+	str	w3, [x2,204]
+	ldr	w3, [x2,200]
 	sub	w0, w0, w3
 	udiv	w0, w0, w1
-	str	w0, [x2,204]
-	b	.L597
-.L594:
-	ldr	w1, [x0,216]
+	str	w0, [x2,196]
+	b	.L550
+.L547:
+	ldr	w1, [x0,208]
 	cmp	w2, w1
-	bls	.L597
+	bls	.L550
 	add	w1, w1, 1
 	adrp	x4, .LANCHOR0
-	str	w1, [x0,216]
+	str	w1, [x0,208]
 	mov	w0, 0
-.L599:
+.L552:
 	add	x1, x4, :lo12:.LANCHOR0
-	ldrh	w1, [x1,1960]
+	ldrh	w1, [x1,1952]
 	cmp	w0, w1
-	bcs	.L597
+	bcs	.L550
 	add	x1, x19, :lo12:.LANCHOR2
 	ubfiz	x2, x0, 1, 32
 	add	w0, w0, 1
-	ldr	x3, [x1,-80]
+	ldr	x3, [x1,-88]
 	ldrh	w1, [x3,x2]
 	add	w1, w1, 1
 	strh	w1, [x3,x2]
-	b	.L599
-.L597:
+	b	.L552
+.L550:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	w22, [x0,220]
-	ldr	w23, [x0,212]
+	ldr	w22, [x0,212]
+	ldr	w24, [x0,204]
 	add	w1, w22, 256
-	cmp	w1, w23
-	bls	.L602
-	ldr	w2, [x0,216]
+	cmp	w1, w24
+	bls	.L555
+	ldr	w2, [x0,208]
 	add	w1, w22, 768
 	cmp	w1, w2
-	bls	.L602
-	ldr	w0, [x0,160]
-	cbz	w0, .L605
+	bls	.L555
+	ldr	w0, [x0,152]
+	cbz	w0, .L558
 	cmp	w22, 30
-	bls	.L602
-.L605:
+	bls	.L555
+.L558:
 	mov	w0, 65535
-	b	.L604
-.L602:
+	b	.L557
+.L555:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x0,-8]
+	ldrh	w0, [x0,-16]
 	add	w0, w0, w0, lsl 1
 	lsr	w0, w0, 2
 	bl	GetFreeBlockMaxEraseCount
 	uxth	w6, w0
 	add	w0, w22, 64
 	cmp	w6, w0
-	bcs	.L616
+	bcs	.L569
 	cmp	w22, 30
-	bhi	.L605
-.L616:
+	bhi	.L558
+.L569:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	x3, [x0,-48]
-	cbz	x3, .L605
-	mov	w24, 65535
-	ldr	x5, [x0,-56]
-	ldr	x26, [x0,-80]
+	ldr	x3, [x0,-56]
+	cbz	x3, .L558
+	adrp	x2, .LANCHOR0
+	mov	w23, 65535
+	add	x1, x2, :lo12:.LANCHOR0
+	ldr	x7, [x0,-64]
+	ldr	x25, [x0,-88]
 	mov	x0, -6148914691236517206
-	mov	w20, w24
-	mov	w7, w24
+	mov	w20, w23
+	mov	x26, x2
+	ldrh	w9, [x1,1952]
+	mov	w8, w23
+	mov	w1, 0
 	add	x0, x0, 1
-	mov	w8, 6
-.L607:
-	ldrh	w1, [x3]
-	cmp	w1, w7
-	beq	.L609
+	mov	w10, 6
+.L560:
+	ldrh	w5, [x3]
+	cmp	w5, w8
+	beq	.L562
+	add	w1, w1, 1
+	uxth	w1, w1
+	cmp	w1, w9
+	bhi	.L558
 	ldrh	w2, [x3,4]
-	cbz	w2, .L608
-	sub	x4, x3, x5
+	cbz	w2, .L561
+	sub	x4, x3, x7
 	asr	x4, x4, 1
 	mul	x4, x4, x0
 	uxth	w3, w4
 	and	x4, x4, 65535
-	ldrh	w2, [x26,x4,lsl 1]
+	ldrh	w2, [x25,x4,lsl 1]
 	cmp	w2, w22
-	bls	.L615
-	cmp	w2, w24
-	bcs	.L608
-	mov	w24, w2
+	bls	.L568
+	cmp	w2, w23
+	bcs	.L561
+	mov	w23, w2
 	mov	w20, w3
-.L608:
-	umull	x3, w1, w8
-	add	x3, x5, x3
-	b	.L607
-.L615:
+.L561:
+	umull	x3, w5, w10
+	add	x3, x7, x3
+	b	.L560
+.L568:
 	mov	w20, w3
-.L609:
+.L562:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L605
-	ubfiz	x25, x20, 1, 16
-	ldrh	w21, [x26,x25]
+	beq	.L558
+	ubfiz	x27, x20, 1, 16
+	ldrh	w21, [x25,x27]
 	cmp	w21, w22
-	bls	.L611
-	str	x6, [x29,88]
+	bls	.L564
+	str	x6, [x29,104]
 	bl	GetFreeBlockMinEraseCount
-	ldr	x6, [x29,88]
+	ldr	x6, [x29,104]
 	cmp	w22, w0, uxth
-	bcs	.L611
+	bcs	.L564
 	add	x0, x19, :lo12:.LANCHOR2
-	str	w24, [x0,220]
-.L611:
+	str	w23, [x0,212]
+.L564:
 	cmp	w21, 29
-	bhi	.L612
+	bhi	.L565
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	w0, [x0,160]
-	cbz	w0, .L612
+	ldr	w0, [x0,152]
+	cbz	w0, .L565
 	add	w0, w21, 10
-	cmp	w0, w23
-	bls	.L613
-	adrp	x0, .LANCHOR0+2016
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+2016]
+	cmp	w0, w24
+	bls	.L566
+	add	x1, x26, :lo12:.LANCHOR0
+	ldrh	w0, [x1,2008]
 	cmp	w0, w21
-	bls	.L612
-.L613:
+	bls	.L565
+.L566:
 	add	x22, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x22,-24]
+	ldrh	w0, [x22,-32]
 	cmp	w0, 64
-	bls	.L612
+	bls	.L565
 	adrp	x0, .LC74
-	ldrh	w2, [x26,x25]
+	ldrh	w2, [x25,x27]
 	add	x0, x0, :lo12:.LC74
 	mov	w1, w20
 	bl	printk
 	mov	w0, 1
-	str	w0, [x22,876]
-	b	.L635
-.L612:
-	cmp	w21, w23
-	bcs	.L605
+	str	w0, [x22,868]
+	b	.L588
+.L565:
+	cmp	w21, w24
+	bcs	.L558
 	add	w0, w21, 128
 	cmp	w6, w0
-	ble	.L605
+	ble	.L558
 	add	w0, w21, 256
-	cmp	w0, w23
-	bcc	.L614
+	cmp	w0, w24
+	bcc	.L567
 	add	x0, x19, :lo12:.LANCHOR2
 	add	w21, w21, 768
-	ldr	w0, [x0,216]
+	ldr	w0, [x0,208]
 	cmp	w21, w0
-	bcs	.L605
-.L614:
+	bcs	.L558
+.L567:
 	add	x19, x19, :lo12:.LANCHOR2
 	adrp	x0, .LC75
-	ldrh	w5, [x26,x25]
+	ldrh	w5, [x25,x27]
 	add	x0, x0, :lo12:.LC75
 	mov	w1, w20
-	mov	w2, w23
-	ldr	x4, [x19,-40]
-	ldr	w3, [x19,216]
-	ldrh	w4, [x4,x25]
+	mov	w2, w24
+	ldr	x4, [x19,-48]
+	ldr	w3, [x19,208]
+	ldrh	w4, [x4,x27]
 	bl	printk
 	mov	w0, 1
-	str	w0, [x19,876]
-.L635:
+	str	w0, [x19,868]
+.L588:
 	mov	w0, w20
-.L604:
+.L557:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 96
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	2
@@ -4995,13 +4659,13 @@ free_data_superblock:
 	mov	w1, 65535
 	cmp	w0, w1
 	add	x29, sp, 0
-	beq	.L638
-	adrp	x2, .LANCHOR2-40
+	beq	.L591
+	adrp	x2, .LANCHOR2-48
 	ubfiz	x1, x0, 1, 16
-	ldr	x2, [x2,#:lo12:.LANCHOR2-40]
+	ldr	x2, [x2,#:lo12:.LANCHOR2-48]
 	strh	wzr, [x2,x1]
 	bl	INSERT_FREE_LIST
-.L638:
+.L591:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -5018,30 +4682,30 @@ FtlGcBufInit:
 	mov	w12, 1
 	mov	w6, 4
 	mov	w13, 56
-	str	wzr, [x0,880]
-.L640:
+	str	wzr, [x0,872]
+.L593:
 	add	x5, x10, :lo12:.LANCHOR0
 	adrp	x9, .LANCHOR0
-	ldrh	w0, [x5,1952]
+	ldrh	w0, [x5,1944]
 	cmp	w1, w0
-	bcs	.L644
+	bcs	.L597
 	add	x2, x3, :lo12:.LANCHOR2
 	umull	x4, w1, w11
-	ldr	x7, [x2,888]
-	ldr	x8, [x2,896]
+	ldr	x7, [x2,880]
+	ldr	x8, [x2,888]
 	add	x0, x7, x4
 	str	w12, [x0,16]
-	ldrh	w0, [x5,2036]
+	ldrh	w0, [x5,2028]
 	mul	w0, w1, w0
 	sdiv	w0, w0, w6
 	add	x0, x8, x0, sxtw 2
 	str	x0, [x7,x4]
-	ldrh	w0, [x5,2038]
-	ldr	x8, [x2,888]
-	ldr	x5, [x2,904]
+	ldrh	w0, [x5,2030]
+	ldr	x8, [x2,880]
+	ldr	x5, [x2,896]
 	mul	w0, w1, w0
 	add	x7, x8, x4
-	ldr	x2, [x2,912]
+	ldr	x2, [x2,904]
 	sdiv	w0, w0, w6
 	add	x0, x5, x0, sxtw 2
 	str	x0, [x7,8]
@@ -5053,29 +4717,29 @@ FtlGcBufInit:
 	str	x2, [x0,8]
 	ldr	x2, [x7,8]
 	str	x2, [x0,16]
-	b	.L640
-.L644:
+	b	.L593
+.L597:
 	mov	w8, 24
 	mov	w5, 4
-.L642:
+.L595:
 	add	x2, x3, :lo12:.LANCHOR2
-	ldr	w1, [x2,920]
+	ldr	w1, [x2,912]
 	cmp	w0, w1
-	bcs	.L645
+	bcs	.L598
 	umull	x4, w0, w8
-	ldr	x7, [x2,888]
+	ldr	x7, [x2,880]
 	add	x6, x9, :lo12:.LANCHOR0
-	ldr	x10, [x2,896]
+	ldr	x10, [x2,888]
 	add	x1, x7, x4
 	str	wzr, [x1,16]
-	ldrh	w1, [x6,2036]
+	ldrh	w1, [x6,2028]
 	mul	w1, w0, w1
 	sdiv	w1, w1, w5
 	add	x1, x10, x1, sxtw 2
 	str	x1, [x7,x4]
-	ldrh	w1, [x6,2038]
-	ldr	x6, [x2,888]
-	ldr	x2, [x2,904]
+	ldrh	w1, [x6,2030]
+	ldr	x6, [x2,880]
+	ldr	x2, [x2,896]
 	mul	w1, w0, w1
 	add	x4, x6, x4
 	add	w0, w0, 1
@@ -5083,8 +4747,8 @@ FtlGcBufInit:
 	uxth	w0, w0
 	add	x1, x2, x1, sxtw 2
 	str	x1, [x4,8]
-	b	.L642
-.L645:
+	b	.L595
+.L598:
 	ret
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
@@ -5096,34 +4760,34 @@ FtlGcBufFree:
 	add	x2, x2, :lo12:.LANCHOR2
 	mov	w7, 56
 	mov	w9, 24
-	ldr	w8, [x2,920]
-	ldr	x5, [x2,888]
-.L647:
+	ldr	w8, [x2,912]
+	ldr	x5, [x2,880]
+.L600:
 	cmp	w3, w1
-	bcs	.L646
+	bcs	.L599
 	umull	x4, w3, w7
 	mov	w2, 0
 	add	x4, x0, x4
-.L652:
+.L605:
 	cmp	w2, w8
-	bcs	.L649
+	bcs	.L602
 	umull	x6, w2, w9
 	add	x10, x5, x6
 	ldr	x11, [x5,x6]
 	ldr	x6, [x4,8]
 	cmp	x11, x6
-	bne	.L648
+	bne	.L601
 	str	wzr, [x10,16]
-	b	.L649
-.L648:
+	b	.L602
+.L601:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L652
-.L649:
+	b	.L605
+.L602:
 	add	w3, w3, 1
 	uxth	w3, w3
-	b	.L647
-.L646:
+	b	.L600
+.L599:
 	ret
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -5135,20 +4799,20 @@ FtlGcBufAlloc:
 	add	x2, x2, :lo12:.LANCHOR2
 	mov	w8, 1
 	mov	w9, 56
-	ldr	w5, [x2,920]
-	ldr	x6, [x2,888]
+	ldr	w5, [x2,912]
+	ldr	x6, [x2,880]
 	mov	w2, 0
-.L654:
+.L607:
 	cmp	w2, w1
-	bcs	.L660
+	bcs	.L613
 	mov	w3, 0
-.L658:
+.L611:
 	cmp	w3, w5
-	bcs	.L656
+	bcs	.L609
 	umull	x4, w3, w7
 	add	x4, x6, x4
 	ldr	w10, [x4,16]
-	cbnz	w10, .L655
+	cbnz	w10, .L608
 	umull	x3, w2, w9
 	str	w8, [x4,16]
 	add	x3, x0, x3
@@ -5156,16 +4820,16 @@ FtlGcBufAlloc:
 	str	x10, [x3,8]
 	ldr	x4, [x4,8]
 	str	x4, [x3,16]
-	b	.L656
-.L655:
+	b	.L609
+.L608:
 	add	w3, w3, 1
 	uxth	w3, w3
-	b	.L658
-.L656:
+	b	.L611
+.L609:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L654
-.L660:
+	b	.L607
+.L613:
 	ret
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -5175,22 +4839,22 @@ IsBlkInGcList:
 	adrp	x1, .LANCHOR2
 	uxth	w0, w0
 	add	x1, x1, :lo12:.LANCHOR2
-	ldrh	w2, [x1,924]
-	ldr	x3, [x1,928]
+	ldrh	w2, [x1,916]
+	ldr	x3, [x1,920]
 	mov	x1, 0
-.L662:
+.L615:
 	cmp	w2, w1, uxth
-	bls	.L666
+	bls	.L619
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4,-2]
 	cmp	w4, w0
-	bne	.L662
+	bne	.L615
 	mov	w0, 1
-	b	.L663
-.L666:
+	b	.L616
+.L619:
 	mov	w0, 0
-.L663:
+.L616:
 	ret
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -5211,41 +4875,41 @@ FtlGcUpdatePage:
 	ldr	x1, [x29,32]
 	uxth	w8, w0
 	mov	x5, 0
-	ldrh	w7, [x4,924]
-	ldr	x6, [x4,928]
-.L668:
+	ldrh	w7, [x4,916]
+	ldr	x6, [x4,920]
+.L621:
 	uxth	w4, w5
 	cmp	w4, w7
-	bcs	.L672
+	bcs	.L625
 	add	x5, x5, 1
 	add	x9, x6, x5, lsl 1
 	ldrh	w9, [x9,-2]
 	cmp	w9, w8
-	bne	.L668
-.L672:
+	bne	.L621
+.L625:
 	cmp	w4, w7
-	bne	.L670
+	bne	.L623
 	ubfiz	x4, x4, 1, 16
 	strh	w0, [x6,x4]
 	add	x0, x3, :lo12:.LANCHOR2
-	ldrh	w4, [x0,924]
+	ldrh	w4, [x0,916]
 	add	w4, w4, 1
-	strh	w4, [x0,924]
-.L670:
+	strh	w4, [x0,916]
+.L623:
 	add	x3, x3, :lo12:.LANCHOR2
 	mov	w0, 12
-	ldrh	w4, [x3,936]
-	ldr	x5, [x3,944]
+	ldrh	w4, [x3,928]
+	ldr	x5, [x3,936]
 	umull	x4, w4, w0
 	add	x5, x5, x4
 	str	w1, [x5,4]
-	ldr	x1, [x3,944]
+	ldr	x1, [x3,936]
 	add	x0, x1, x4
 	str	w2, [x0,8]
 	str	w19, [x1,x4]
-	ldrh	w0, [x3,936]
+	ldrh	w0, [x3,928]
 	add	w0, w0, 1
-	strh	w0, [x3,936]
+	strh	w0, [x3,928]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -5263,19 +4927,23 @@ FtlGcRefreshBlock:
 	add	x0, x0, :lo12:.LC76
 	bl	printk
 	adrp	x2, .LANCHOR2
-	mov	w0, 65535
 	add	x2, x2, :lo12:.LANCHOR2
-	ldrh	w1, [x2,952]
-	cmp	w1, w0
-	bne	.L675
-	strh	w19, [x2,952]
-	b	.L676
-.L675:
-	ldrh	w1, [x2,954]
+	ldrh	w3, [x2,944]
+	cmp	w3, w19
+	beq	.L628
+	ldrh	w1, [x2,946]
+	cmp	w1, w19
+	beq	.L628
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L629
+	strh	w19, [x2,944]
+	b	.L628
+.L629:
 	cmp	w1, w0
-	bne	.L676
-	strh	w19, [x2,954]
-.L676:
+	bne	.L628
+	strh	w19, [x2,946]
+.L628:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -5296,45 +4964,45 @@ FtlGcMarkBadPhyBlk:
 	str	x23, [sp,48]
 	bl	P2V_block_in_plane
 	uxth	w21, w0
-	ldrh	w1, [x22,956]
+	ldrh	w1, [x22,948]
 	adrp	x0, .LC77
 	mov	w2, w20
 	add	x0, x0, :lo12:.LC77
 	bl	printk
 	mov	w0, w21
 	bl	FtlGcRefreshBlock
-	ldr	w0, [x22,160]
-	cbz	w0, .L678
+	ldr	w0, [x22,152]
+	cbz	w0, .L631
 	ubfiz	x0, x21, 1, 16
-	ldr	x2, [x22,-80]
+	ldr	x2, [x22,-88]
 	ldrh	w1, [x2,x0]
 	cmp	w1, 29
-	bls	.L678
+	bls	.L631
 	sub	w1, w1, #30
 	strh	w1, [x2,x0]
-.L678:
+.L631:
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	x0, 0
-	add	x2, x2, 960
+	add	x2, x2, 952
 	ldrh	w1, [x2,-4]
-.L679:
+.L632:
 	cmp	w1, w0, uxth
-	bls	.L685
+	bls	.L638
 	add	x0, x0, 1
 	add	x3, x2, x0, lsl 1
 	ldrh	w3, [x3,-2]
 	cmp	w3, w20
-	bne	.L679
-	b	.L680
-.L685:
+	bne	.L632
+	b	.L633
+.L638:
 	cmp	w1, 15
-	bhi	.L680
+	bhi	.L633
 	add	x19, x19, :lo12:.LANCHOR2
 	add	w0, w1, 1
-	add	x19, x19, 960
+	add	x19, x19, 952
 	strh	w0, [x19,-4]
 	strh	w20, [x19,w1,sxtw 1]
-.L680:
+.L633:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -5351,27 +5019,27 @@ FtlGcReFreshBadBlk:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR2
 	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x0,956]
-	cbz	w1, .L687
-	ldrh	w3, [x0,952]
+	ldrh	w1, [x0,948]
+	cbz	w1, .L640
+	ldrh	w3, [x0,944]
 	mov	w2, 65535
 	cmp	w3, w2
-	bne	.L687
-	ldrh	w2, [x0,994]
+	bne	.L640
+	ldrh	w2, [x0,986]
 	cmp	w2, w1
-	bcc	.L688
-	strh	wzr, [x0,994]
-.L688:
+	bcc	.L641
+	strh	wzr, [x0,986]
+.L641:
 	add	x19, x19, :lo12:.LANCHOR2
-	add	x0, x19, 960
-	ldrh	w1, [x19,994]
+	add	x0, x19, 952
+	ldrh	w1, [x19,986]
 	ldrh	w0, [x0,w1,sxtw 1]
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	ldrh	w0, [x19,994]
+	ldrh	w0, [x19,986]
 	add	w0, w0, 1
-	strh	w0, [x19,994]
-.L687:
+	strh	w0, [x19,986]
+.L640:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -5396,63 +5064,63 @@ BuildFlashLsbPageTable:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	mov	w20, w1
-	cbnz	w0, .L694
+	cbnz	w0, .L647
 	adrp	x1, .LANCHOR0
 	mov	x0, 0
 	add	x1, x1, :lo12:.LANCHOR0
-.L695:
+.L648:
 	add	x2, x1, 196
 	strh	w0, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L695
-.L701:
+	bne	.L648
+.L654:
 	adrp	x19, .LANCHOR2
 	mov	w1, 255
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w2, 1024
-	add	x19, x19, 996
+	add	x19, x19, 988
 	uxth	w20, w20
 	mov	x0, x19
 	bl	ftl_memset
 	adrp	x1, .LANCHOR0
 	mov	x0, 0
 	add	x1, x1, :lo12:.LANCHOR0
-	b	.L696
-.L694:
+	b	.L649
+.L647:
 	cmp	w0, 1
-	bne	.L697
+	bne	.L650
 	adrp	x3, .LANCHOR0
 	mov	x0, 0
 	mov	w4, 3
 	mov	w5, 2
 	add	x3, x3, :lo12:.LANCHOR0
-.L700:
+.L653:
 	cmp	x0, 3
 	uxth	w1, w0
 	mov	w2, w1
-	bls	.L698
+	bls	.L651
 	ubfiz	w2, w1, 1, 15
 	and	w1, w1, 1
 	cmp	w1, wzr
 	csel	w1, w4, w5, ne
 	sub	w2, w2, w1
 	uxth	w2, w2
-.L698:
+.L651:
 	add	x1, x3, 196
 	strh	w2, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L700
-	b	.L701
-.L697:
+	bne	.L653
+	b	.L654
+.L650:
 	cmp	w0, 2
-	bne	.L702
+	bne	.L655
 	adrp	x3, .LANCHOR0
 	mov	w1, 65535
 	mov	x0, 0
 	add	x3, x3, :lo12:.LANCHOR0
-.L704:
+.L657:
 	add	x4, x3, 196
 	cmp	x0, 1
 	uxth	w2, w0
@@ -5462,37 +5130,37 @@ BuildFlashLsbPageTable:
 	add	x0, x0, 1
 	cmp	x0, 256
 	uxth	w1, w1
-	bne	.L704
-	b	.L701
-.L702:
+	bne	.L657
+	b	.L654
+.L655:
 	cmp	w0, 3
-	bne	.L705
+	bne	.L658
 	adrp	x3, .LANCHOR0
 	mov	x0, 0
 	mov	w4, 5
 	mov	w5, 4
 	add	x3, x3, :lo12:.LANCHOR0
-.L708:
+.L661:
 	cmp	x0, 5
 	uxth	w1, w0
 	mov	w2, w1
-	bls	.L706
+	bls	.L659
 	ubfiz	w2, w1, 1, 15
 	and	w1, w1, 1
 	cmp	w1, wzr
 	csel	w1, w4, w5, ne
 	sub	w2, w2, w1
 	uxth	w2, w2
-.L706:
+.L659:
 	add	x1, x3, 196
 	strh	w2, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L708
-	b	.L701
-.L705:
+	bne	.L661
+	b	.L654
+.L658:
 	cmp	w0, 4
-	bne	.L709
+	bne	.L662
 	adrp	x1, .LANCHOR0
 	mov	w5, 7
 	add	x1, x1, :lo12:.LANCHOR0
@@ -5513,7 +5181,7 @@ BuildFlashLsbPageTable:
 	strh	w0, [x2,14]
 	mov	w0, 8
 	strh	w1, [x2,6]
-.L711:
+.L664:
 	and	w3, w0, 1
 	ubfiz	w1, w0, 1, 15
 	add	w0, w0, 1
@@ -5524,42 +5192,42 @@ BuildFlashLsbPageTable:
 	sub	w1, w1, w3
 	cmp	w0, 256
 	strh	w1, [x2,14]
-	bne	.L711
-	b	.L701
-.L709:
+	bne	.L664
+	b	.L654
+.L662:
 	cmp	w0, 5
-	bne	.L712
+	bne	.L665
 	adrp	x2, .LANCHOR0
 	mov	x0, 0
 	add	x2, x2, :lo12:.LANCHOR0
-.L713:
+.L666:
 	add	x1, x2, 196
 	strh	w0, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 16
-	bne	.L713
+	bne	.L666
 	mov	x0, 0
-.L714:
+.L667:
 	add	x2, x1, x0
 	add	w3, w0, 16
 	add	x0, x0, 2
 	cmp	x0, 480
 	strh	w3, [x2,32]
-	bne	.L714
-	b	.L701
-.L712:
+	bne	.L667
+	b	.L654
+.L665:
 	cmp	w0, 6
-	bne	.L701
+	bne	.L654
 	adrp	x1, .LANCHOR0
 	mov	x2, 0
 	mov	w4, 12
 	mov	w5, 10
 	add	x1, x1, :lo12:.LANCHOR0
-.L717:
+.L670:
 	cmp	x2, 5
 	uxth	w3, w2
 	mov	w0, w3
-	bls	.L715
+	bls	.L668
 	add	w0, w3, w3, lsl 1
 	and	w3, w3, 1
 	cmp	w3, wzr
@@ -5567,22 +5235,22 @@ BuildFlashLsbPageTable:
 	csel	w3, w4, w5, ne
 	sub	w0, w0, w3
 	uxth	w0, w0
-.L715:
+.L668:
 	add	x3, x1, 196
 	strh	w0, [x3,x2,lsl 1]
 	add	x2, x2, 1
 	cmp	x2, 256
-	bne	.L717
-	b	.L701
-.L696:
+	bne	.L670
+	b	.L654
+.L649:
 	cmp	w20, w0, uxth
-	bls	.L735
+	bls	.L688
 	add	x2, x1, 196
 	ldrh	w2, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	strh	w2, [x19,w2,sxtw 1]
-	b	.L696
-.L735:
+	b	.L649
+.L688:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -5601,20 +5269,20 @@ FlashDieInfoInit:
 	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	strb	wzr, [x1,2020]
+	strb	wzr, [x1,2012]
 	adrp	x1, .LANCHOR1+482
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x1,#:lo12:.LANCHOR1+482]
 	strb	wzr, [x0,1845]
 	cmp	w1, 256
-	bls	.L737
+	bls	.L690
 	mov	w1, 512
-	b	.L753
-.L737:
+	b	.L706
+.L690:
 	cmp	w1, 128
-	bls	.L753
+	bls	.L706
 	mov	w1, 256
-.L753:
+.L706:
 	add	x19, x21, :lo12:.LANCHOR0
 	str	w1, [x0,12]
 	mov	w2, 8
@@ -5634,30 +5302,30 @@ FlashDieInfoInit:
 	bl	ftl_memset
 	ldr	x20, [x19,744]
 	add	x23, x20, 1
-.L741:
+.L694:
 	ldrb	w2, [x20]
 	mov	x0, x23
 	add	x1, x26, x24, lsl 3
 	bl	FlashMemCmp8
-	cbnz	w0, .L740
+	cbnz	w0, .L693
 	ldrb	w1, [x19,1845]
 	str	w0, [x25,w1,sxtw 2]
 	add	w0, w1, 1
 	add	x1, x19, x1, sxtw
 	strb	w0, [x19,1845]
 	strb	w24, [x1,1848]
-.L740:
+.L693:
 	add	x24, x24, 1
 	cmp	x24, 4
-	bne	.L741
+	bne	.L694
 	add	x19, x21, :lo12:.LANCHOR0
 	add	x0, x22, :lo12:.LANCHOR2
 	ldrb	w1, [x19,1845]
-	strb	w1, [x0,2020]
+	strb	w1, [x0,2012]
 	ldrb	w0, [x20,8]
 	cmp	w0, 2
-	beq	.L742
-.L746:
+	beq	.L695
+.L699:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrb	w1, [x20,13]
 	add	x22, x22, :lo12:.LANCHOR2
@@ -5669,21 +5337,21 @@ FlashDieInfoInit:
 	ldrh	w1, [x20,14]
 	ldp	x19, x20, [sp,16]
 	mul	w0, w0, w1
-	strh	w0, [x22,2022]
+	strh	w0, [x22,2014]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 96
 	ret
-.L742:
+.L695:
 	ldr	w26, [x19,12]
 	mov	x24, 0
 	add	x27, x19, 1620
 	add	x25, x19, 708
-.L745:
+.L698:
 	ldrb	w2, [x20]
 	mov	x0, x23
 	add	x1, x27, x24, lsl 3
 	bl	FlashMemCmp8
-	cbnz	w0, .L743
+	cbnz	w0, .L696
 	ldrb	w1, [x20,13]
 	ldrb	w3, [x19,1845]
 	mul	w0, w1, w26
@@ -5693,19 +5361,19 @@ FlashDieInfoInit:
 	mul	w1, w0, w1
 	str	w1, [x25,w3,sxtw 2]
 	ldrb	w0, [x20,23]
-	cbz	w0, .L744
+	cbz	w0, .L697
 	lsl	w1, w1, 1
 	str	w1, [x25,w3,sxtw 2]
-.L744:
+.L697:
 	add	x0, x19, x3
 	add	w2, w2, 1
 	strb	w2, [x19,1845]
 	strb	w24, [x0,1848]
-.L743:
+.L696:
 	add	x24, x24, 1
 	cmp	x24, 4
-	bne	.L745
-	b	.L746
+	bne	.L698
+	b	.L699
 	.size	FlashDieInfoInit, .-FlashDieInfoInit
 	.align	2
 	.global	ReadFlashInfo
@@ -5725,7 +5393,7 @@ ReadFlashInfo:
 	ldrb	w2, [x0,9]
 	ldr	w0, [x1,12]
 	mul	w0, w0, w2
-	ldrb	w2, [x1,1944]
+	ldrb	w2, [x1,1936]
 	strb	w2, [x19,7]
 	uxth	w0, w0
 	strh	w0, [x19,4]
@@ -5748,9 +5416,9 @@ ReadFlashInfo:
 	strb	w0, [x19,9]
 	mov	x0, 0
 	strb	wzr, [x19,10]
-.L755:
+.L708:
 	cmp	w4, w0, uxtb
-	bls	.L757
+	bls	.L710
 	add	x2, x1, 1848
 	ldrb	w3, [x19,10]
 	ldrb	w2, [x0,x2]
@@ -5758,8 +5426,8 @@ ReadFlashInfo:
 	lsl	w2, w5, w2
 	orr	w2, w2, w3
 	strb	w2, [x19,10]
-	b	.L755
-.L757:
+	b	.L708
+.L710:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -5779,328 +5447,328 @@ FtlMemInit:
 	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
 	str	x25, [sp,64]
-	str	w1, [x0,2032]
+	str	w1, [x0,2024]
 	mov	w1, -1
-	str	wzr, [x0,2024]
-	strh	w1, [x0,952]
-	strh	w1, [x0,954]
+	str	wzr, [x0,2016]
+	strh	w1, [x0,944]
+	strh	w1, [x0,946]
 	mov	w1, 32
-	str	wzr, [x0,344]
-	str	wzr, [x0,196]
-	str	wzr, [x0,200]
-	str	wzr, [x0,184]
-	str	wzr, [x0,172]
-	str	wzr, [x0,168]
+	str	wzr, [x0,336]
+	str	wzr, [x0,188]
+	str	wzr, [x0,192]
 	str	wzr, [x0,176]
-	str	wzr, [x0,180]
 	str	wzr, [x0,164]
-	str	wzr, [x0,204]
+	str	wzr, [x0,160]
+	str	wzr, [x0,168]
+	str	wzr, [x0,172]
+	str	wzr, [x0,156]
+	str	wzr, [x0,196]
+	str	wzr, [x0,200]
+	str	wzr, [x0,-80]
 	str	wzr, [x0,208]
-	str	wzr, [x0,-72]
-	str	wzr, [x0,216]
-	str	wzr, [x0,220]
-	str	wzr, [x0,2028]
-	str	wzr, [x0,876]
-	str	wzr, [x0,2036]
+	str	wzr, [x0,212]
+	str	wzr, [x0,2020]
 	str	wzr, [x0,868]
-	str	wzr, [x3,2108]
-	strh	w1, [x0,864]
+	str	wzr, [x0,2028]
+	str	wzr, [x0,860]
+	str	wzr, [x3,2100]
+	strh	w1, [x0,856]
 	mov	w1, 128
-	ldrh	w2, [x3,2032]
-	strh	w1, [x0,866]
+	ldrh	w2, [x3,2024]
+	strh	w1, [x0,858]
 	mov	w1, 1024
-	strh	wzr, [x0,872]
+	strh	wzr, [x0,864]
 	sdiv	w2, w1, w2
-	ldrh	w1, [x3,1952]
-	strh	wzr, [x0,956]
+	ldrh	w1, [x3,1944]
+	strh	wzr, [x0,948]
 	lsl	w1, w1, 2
-	strh	wzr, [x0,994]
-	str	w2, [x0,2040]
+	strh	wzr, [x0,986]
+	str	w2, [x0,2032]
 	cmp	w2, w1
-	bls	.L759
-	str	w1, [x0,2040]
-.L759:
+	bls	.L712
+	str	w1, [x0,2032]
+.L712:
 	add	x20, x22, :lo12:.LANCHOR0
 	add	x19, x21, :lo12:.LANCHOR2
 	mov	w24, 56
-	ldrh	w0, [x20,2030]
-	str	wzr, [x20,2088]
+	ldrh	w0, [x20,2022]
+	str	wzr, [x20,2080]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	str	x0, [x19,928]
-	ldrh	w1, [x20,2030]
+	str	x0, [x19,920]
+	ldrh	w1, [x20,2022]
 	mov	w0, 12
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	ldrh	w23, [x20,1952]
-	str	x0, [x19,944]
+	ldrh	w23, [x20,1944]
+	str	x0, [x19,936]
 	mul	w23, w23, w24
 	lsl	w25, w23, 3
 	mov	w0, w25
 	bl	ftl_malloc
-	str	x0, [x19,2048]
+	str	x0, [x19,2040]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2056]
+	str	x0, [x19,2048]
 	mov	w0, w25
 	bl	ftl_malloc
-	str	x0, [x19,2064]
+	str	x0, [x19,2056]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,-88]
+	str	x0, [x19,-96]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,912]
-	ldr	w0, [x19,2040]
+	str	x0, [x19,904]
+	ldr	w0, [x19,2032]
 	mul	w0, w0, w24
 	bl	ftl_malloc
-	str	x0, [x20,2096]
-	ldrh	w0, [x20,1952]
-	ldrh	w23, [x20,2036]
+	str	x0, [x20,2088]
+	ldrh	w0, [x20,1944]
+	ldrh	w23, [x20,2028]
 	lsl	w0, w0, 1
 	add	w0, w0, 1
-	str	w0, [x19,920]
+	str	w0, [x19,912]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,-64]
+	str	x0, [x19,-72]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2072]
+	str	x0, [x19,2064]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2080]
-	ldr	w0, [x19,920]
+	str	x0, [x19,2072]
+	ldr	w0, [x19,912]
 	mul	w0, w23, w0
 	bl	ftl_malloc
-	str	x0, [x19,896]
-	ldr	w0, [x19,2040]
+	str	x0, [x19,888]
+	ldr	w0, [x19,2032]
 	mul	w0, w23, w0
 	bl	ftl_malloc
-	str	x0, [x19,2088]
+	str	x0, [x19,2080]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2096]
+	str	x0, [x19,2088]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2104]
-	ldr	w1, [x19,920]
+	str	x0, [x19,2096]
+	ldr	w1, [x19,912]
 	mov	w0, 24
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	ldrh	w23, [x20,1952]
-	str	x0, [x19,888]
-	ldrh	w0, [x20,2038]
+	ldrh	w23, [x20,1944]
+	str	x0, [x19,880]
+	ldrh	w0, [x20,2030]
 	mul	w23, w0, w23
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2112]
+	str	x0, [x19,2104]
 	lsl	w0, w23, 3
 	bl	ftl_malloc
-	str	x0, [x19,2120]
-	ldrh	w1, [x20,2038]
-	ldr	w0, [x19,920]
+	str	x0, [x19,2112]
+	ldrh	w1, [x20,2030]
+	ldr	w0, [x19,912]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,904]
-	ldrh	w1, [x20,2038]
-	ldr	w0, [x19,2040]
+	str	x0, [x19,896]
+	ldrh	w1, [x20,2030]
+	ldr	w0, [x19,2032]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,2128]
-	ldrh	w0, [x20,1962]
+	str	x0, [x19,2120]
+	ldrh	w0, [x20,1954]
 	lsl	w0, w0, 1
-	strh	w0, [x19,2136]
+	strh	w0, [x19,2128]
 	and	w0, w0, 65534
 	bl	ftl_malloc
-	str	x0, [x19,2144]
-	ldrh	w0, [x19,2136]
+	str	x0, [x19,2136]
+	ldrh	w0, [x19,2128]
 	add	x0, x0, 547
 	lsr	x0, x0, 9
-	strh	w0, [x19,2136]
+	strh	w0, [x19,2128]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
-	ldrh	w23, [x20,1962]
-	str	x0, [x19,2152]
+	ldrh	w23, [x20,1954]
+	str	x0, [x19,2144]
 	add	x0, x0, 32
 	lsl	w23, w23, 1
-	str	x0, [x19,-80]
+	str	x0, [x19,-88]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2160]
+	str	x0, [x19,2152]
 	mov	w0, w23
 	bl	ftl_malloc
-	ldr	w23, [x20,2056]
-	str	x0, [x19,-40]
+	ldr	w23, [x20,2048]
+	str	x0, [x19,-48]
 	lsl	w23, w23, 1
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2168]
+	str	x0, [x19,2160]
 	mov	w0, w23
 	bl	ftl_malloc
-	str	x0, [x19,2176]
-	ldrh	w0, [x20,1962]
+	str	x0, [x19,2168]
+	ldrh	w0, [x20,1954]
 	lsr	w0, w0, 3
 	add	w0, w0, 4
 	bl	ftl_malloc
 	str	x0, [x22,#:lo12:.LANCHOR0]
-	ldrh	w0, [x20,2048]
+	ldrh	w0, [x20,2040]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	str	x0, [x20,2080]
-	ldrh	w0, [x20,2048]
+	str	x0, [x20,2072]
+	ldrh	w0, [x20,2040]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	str	x0, [x19,2184]
-	ldrh	w0, [x20,2048]
+	str	x0, [x19,2176]
+	ldrh	w0, [x20,2040]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,2192]
-	ldrh	w0, [x20,2050]
+	str	x0, [x19,2184]
+	ldrh	w0, [x20,2042]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,2200]
-	ldrh	w2, [x20,2050]
+	str	x0, [x19,2192]
+	ldrh	w2, [x20,2042]
 	mov	w1, 0
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldrh	w0, [x20,2064]
+	ldrh	w0, [x20,2056]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,2208]
-	ldr	w0, [x20,2056]
+	str	x0, [x19,2200]
+	ldr	w0, [x20,2048]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,2216]
-	ldrh	w0, [x20,2066]
+	str	x0, [x19,2208]
+	ldrh	w0, [x20,2058]
 	lsl	w0, w0, 4
 	bl	ftl_malloc
-	str	x0, [x19,144]
-	ldrh	w1, [x20,2066]
-	ldrh	w0, [x20,2036]
+	str	x0, [x19,136]
+	ldrh	w1, [x20,2058]
+	ldrh	w0, [x20,2028]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,2224]
-	ldrh	w1, [x20,1962]
+	str	x0, [x19,2216]
+	ldrh	w1, [x20,1954]
 	mov	w0, 6
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,-56]
-	ldrh	w0, [x20,2022]
-	ldrh	w1, [x20,1974]
+	str	x0, [x19,-64]
+	ldrh	w0, [x20,2014]
+	ldrh	w1, [x20,1966]
 	add	w0, w0, 31
 	asr	w0, w0, 5
-	strh	w0, [x19,2232]
+	strh	w0, [x19,2224]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x20,2144]
-	add	x1, x20, 2112
-	ldrh	w4, [x19,2232]
-	ldrh	w5, [x20,1974]
+	str	x0, [x20,2136]
+	add	x1, x20, 2104
+	ldrh	w4, [x19,2224]
+	ldrh	w5, [x20,1966]
 	mov	w0, 1
 	mov	w2, w4
-.L760:
+.L713:
 	cmp	w0, w5
 	add	x1, x1, 8
-	bcs	.L860
-	ldr	x3, [x20,2144]
+	bcs	.L813
+	ldr	x3, [x20,2136]
 	add	w0, w0, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x1,32]
-	b	.L760
-.L860:
+	b	.L713
+.L813:
 	add	x1, x22, :lo12:.LANCHOR0
-.L762:
+.L715:
 	cmp	w0, 8
-	beq	.L861
+	beq	.L814
 	add	x2, x1, x0, uxtw 3
 	add	w0, w0, 1
-	str	xzr, [x2,2144]
-	b	.L762
-.L861:
+	str	xzr, [x2,2136]
+	b	.L715
+.L814:
 	add	x0, x21, :lo12:.LANCHOR2
-	ldr	x1, [x0,2168]
-	cbnz	x1, .L764
-.L766:
+	ldr	x1, [x0,2160]
+	cbnz	x1, .L717
+.L719:
 	adrp	x0, .LC78
 	adrp	x1, .LANCHOR3
 	add	x0, x0, :lo12:.LC78
 	add	x1, x1, :lo12:.LANCHOR3
 	bl	printk
 	mov	w0, -1
-	b	.L765
-.L764:
-	ldr	x1, [x0,2176]
-	cbz	x1, .L766
+	b	.L718
+.L717:
+	ldr	x1, [x0,2168]
+	cbz	x1, .L719
+	ldr	x1, [x0,2200]
+	cbz	x1, .L719
 	ldr	x1, [x0,2208]
-	cbz	x1, .L766
+	cbz	x1, .L719
+	ldr	x1, [x0,136]
+	cbz	x1, .L719
 	ldr	x1, [x0,2216]
-	cbz	x1, .L766
-	ldr	x1, [x0,144]
-	cbz	x1, .L766
-	ldr	x1, [x0,2224]
-	cbz	x1, .L766
-	ldr	x1, [x0,-56]
-	cbz	x1, .L766
+	cbz	x1, .L719
+	ldr	x1, [x0,-64]
+	cbz	x1, .L719
 	add	x22, x22, :lo12:.LANCHOR0
-	ldr	x1, [x22,2144]
-	cbz	x1, .L766
-	ldr	x0, [x0,-40]
-	cbz	x0, .L766
+	ldr	x1, [x22,2136]
+	cbz	x1, .L719
+	ldr	x0, [x0,-48]
+	cbz	x0, .L719
 	add	x0, x21, :lo12:.LANCHOR2
-	ldr	x1, [x0,928]
-	cbz	x1, .L766
-	ldr	x1, [x0,944]
-	cbz	x1, .L766
+	ldr	x1, [x0,920]
+	cbz	x1, .L719
+	ldr	x1, [x0,936]
+	cbz	x1, .L719
+	ldr	x1, [x0,2040]
+	cbz	x1, .L719
+	ldr	x1, [x0,2056]
+	cbz	x1, .L719
+	ldr	x1, [x0,-96]
+	cbz	x1, .L719
+	ldr	x1, [x0,904]
+	cbz	x1, .L719
 	ldr	x1, [x0,2048]
-	cbz	x1, .L766
+	cbz	x1, .L719
+	ldr	x1, [x0,-72]
+	cbz	x1, .L719
 	ldr	x1, [x0,2064]
-	cbz	x1, .L766
-	ldr	x1, [x0,-88]
-	cbz	x1, .L766
-	ldr	x1, [x0,912]
-	cbz	x1, .L766
-	ldr	x1, [x0,2056]
-	cbz	x1, .L766
-	ldr	x1, [x0,-64]
-	cbz	x1, .L766
-	ldr	x1, [x0,2072]
-	cbz	x1, .L766
-	ldr	x0, [x0,2080]
-	cbz	x0, .L766
+	cbz	x1, .L719
+	ldr	x0, [x0,2072]
+	cbz	x0, .L719
 	add	x0, x21, :lo12:.LANCHOR2
-	ldr	x1, [x0,896]
-	cbz	x1, .L766
+	ldr	x1, [x0,888]
+	cbz	x1, .L719
+	ldr	x1, [x0,2088]
+	cbz	x1, .L719
 	ldr	x1, [x0,2096]
-	cbz	x1, .L766
+	cbz	x1, .L719
+	ldr	x1, [x0,880]
+	cbz	x1, .L719
 	ldr	x1, [x0,2104]
-	cbz	x1, .L766
-	ldr	x1, [x0,888]
-	cbz	x1, .L766
+	cbz	x1, .L719
 	ldr	x1, [x0,2112]
-	cbz	x1, .L766
-	ldr	x1, [x0,2120]
-	cbz	x1, .L766
-	ldr	x1, [x0,904]
-	cbz	x1, .L766
-	ldr	x1, [x0,-80]
-	cbz	x1, .L766
-	ldr	x0, [x0,2144]
-	cbz	x0, .L766
-	adrp	x0, .LANCHOR0+2080
-	ldr	x0, [x0,#:lo12:.LANCHOR0+2080]
-	cbz	x0, .L766
+	cbz	x1, .L719
+	ldr	x1, [x0,896]
+	cbz	x1, .L719
+	ldr	x1, [x0,-88]
+	cbz	x1, .L719
+	ldr	x0, [x0,2136]
+	cbz	x0, .L719
+	adrp	x0, .LANCHOR0+2072
+	ldr	x0, [x0,#:lo12:.LANCHOR0+2072]
+	cbz	x0, .L719
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
+	ldr	x1, [x0,2176]
+	cbz	x1, .L719
 	ldr	x1, [x0,2184]
-	cbz	x1, .L766
-	ldr	x1, [x0,2192]
-	cbz	x1, .L766
-	ldr	x0, [x0,2200]
-	cbz	x0, .L766
+	cbz	x1, .L719
+	ldr	x0, [x0,2192]
+	cbz	x0, .L719
 	mov	w0, 0
-.L765:
+.L718:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -6116,9 +5784,9 @@ FtlBbt2Bitmap:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	mov	x20, x0
-	adrp	x0, .LANCHOR2+2232
+	adrp	x0, .LANCHOR2+2224
 	mov	x19, x1
-	ldrh	w2, [x0,#:lo12:.LANCHOR2+2232]
+	ldrh	w2, [x0,#:lo12:.LANCHOR2+2224]
 	mov	x0, x1
 	mov	w1, 0
 	lsl	w2, w2, 2
@@ -6126,10 +5794,10 @@ FtlBbt2Bitmap:
 	mov	x3, 0
 	mov	w0, 65535
 	mov	w5, 1
-.L864:
+.L817:
 	ldrh	w2, [x20,x3]
 	cmp	w2, w0
-	beq	.L862
+	beq	.L815
 	ubfx	x4, x2, 5, 11
 	add	x3, x3, 2
 	lsl	x4, x4, 2
@@ -6138,8 +5806,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x19,x4]
 	orr	w2, w1, w2
 	str	w2, [x19,x4]
-	bne	.L864
-.L862:
+	bne	.L817
+.L815:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -6154,7 +5822,7 @@ FtlBbtMemInit:
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w2, 16
 	add	x29, sp, 0
-	add	x0, x0, 2124
+	add	x0, x0, 2116
 	strh	w1, [x0,-12]
 	mov	w1, 255
 	strh	wzr, [x0,-6]
@@ -6171,11 +5839,11 @@ FtlFreeSysBlkQueueInit:
 	stp	x29, x30, [sp, -16]!
 	add	x1, x1, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	strh	w0, [x1,2208]
-	add	x0, x1, 2216
-	strh	wzr, [x1,2210]
-	strh	wzr, [x1,2212]
-	strh	wzr, [x1,2214]
+	strh	w0, [x1,2200]
+	add	x0, x1, 2208
+	strh	wzr, [x1,2202]
+	strh	wzr, [x1,2204]
+	strh	wzr, [x1,2206]
 	mov	w1, 0
 	bl	ftl_memset
 	mov	w0, 0
@@ -6203,74 +5871,74 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L870:
+.L823:
 	ldrh	w1, [x19,6]
 	cmp	w1, w0
-	bls	.L883
+	bls	.L836
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20,x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L871:
+.L824:
 	ldrh	w3, [x19,10]
 	cmp	w3, w1
-	bls	.L884
+	bls	.L837
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x25,x3]
 	cmp	w4, w2
-	bne	.L872
+	bne	.L825
 	ldrh	w4, [x21,x3]
 	add	w4, w4, 1
 	strh	w4, [x21,x3]
-.L872:
+.L825:
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L871
-.L884:
+	b	.L824
+.L837:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L870
-.L883:
+	b	.L823
+.L836:
 	mov	w24, 0
 	ldrh	w26, [x21]
 	mov	w20, w24
 	adrp	x27, .LANCHOR0
-.L875:
+.L828:
 	ldrh	w0, [x19,10]
 	cmp	w0, w20
-	bls	.L885
+	bls	.L838
 	ldrh	w0, [x19]
 	uxtw	x22, w20
 	cmp	w0, w20
-	bne	.L876
+	bne	.L829
 	add	x0, x27, :lo12:.LANCHOR0
 	ldrh	w1, [x19,2]
-	ldrh	w0, [x0,2028]
+	ldrh	w0, [x0,2020]
 	cmp	w1, w0
-	bcs	.L876
+	bcs	.L829
 	strh	w0, [x21,x22,lsl 1]
-.L876:
+.L829:
 	lsl	x22, x22, 1
 	ldrh	w23, [x21,x22]
 	cmp	w26, w23
-	bls	.L877
+	bls	.L830
 	mov	w24, w20
 	mov	w26, w23
-.L877:
-	cbnz	w23, .L878
+.L830:
+	cbnz	w23, .L831
 	ldrh	w0, [x25,x22]
-	cbz	w0, .L878
+	cbz	w0, .L831
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	w23, [x25,x22]
 	ldrh	w0, [x19,8]
 	sub	w0, w0, #1
 	strh	w0, [x19,8]
-.L878:
+.L831:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L875
-.L885:
+	b	.L828
+.L838:
 	mov	w0, w24
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -6293,34 +5961,34 @@ FtlL2PDataInit:
 	stp	x21, x22, [sp,32]
 	add	x21, x20, :lo12:.LANCHOR0
 	add	x22, x19, :lo12:.LANCHOR2
-	ldr	w2, [x21,2056]
-	ldr	x0, [x22,2176]
+	ldr	w2, [x21,2048]
+	ldr	x0, [x22,2168]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w3, [x21,2036]
+	ldrh	w3, [x21,2028]
 	mov	w1, 255
-	ldrh	w2, [x21,2066]
-	ldr	x0, [x22,2224]
+	ldrh	w2, [x21,2058]
+	ldr	x0, [x22,2216]
 	mul	w2, w3, w2
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w5, -1
-.L887:
+.L840:
 	add	x3, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x3,2066]
+	ldrh	w0, [x3,2058]
 	cmp	w0, w1
-	bls	.L889
+	bls	.L842
 	add	x4, x19, :lo12:.LANCHOR2
 	ubfiz	x0, x1, 4, 16
-	ldr	x2, [x4,144]
+	ldr	x2, [x4,136]
 	add	x2, x2, x0
 	str	wzr, [x2,4]
-	ldr	x2, [x4,144]
+	ldr	x2, [x4,136]
 	strh	w5, [x2,x0]
-	ldr	x2, [x4,144]
+	ldr	x2, [x4,136]
 	add	x2, x2, x0
-	ldrh	w0, [x3,2036]
-	ldr	x3, [x4,2224]
+	ldrh	w0, [x3,2028]
+	ldr	x3, [x4,2216]
 	mul	w0, w0, w1
 	add	w1, w1, 1
 	sxtw	x0, w0
@@ -6328,28 +5996,28 @@ FtlL2PDataInit:
 	and	x0, x0, -4
 	add	x0, x3, x0
 	str	x0, [x2,8]
-	b	.L887
-.L889:
+	b	.L840
+.L842:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, -1
-	add	x1, x0, 2240
+	add	x1, x0, 2232
+	strh	w2, [x0,2234]
+	strh	w2, [x0,2232]
+	ldr	w2, [x3,2048]
 	strh	w2, [x0,2242]
-	strh	w2, [x0,2240]
-	ldr	w2, [x3,2056]
-	strh	w2, [x0,2250]
 	mov	w2, -3902
-	strh	w2, [x0,2244]
-	ldrh	w2, [x0,2304]
-	strh	w2, [x0,2248]
-	ldrh	w2, [x3,2064]
-	strh	w2, [x0,2246]
-	ldr	x2, [x0,2168]
+	strh	w2, [x0,2236]
+	ldrh	w2, [x0,2296]
+	strh	w2, [x0,2240]
+	ldrh	w2, [x3,2056]
+	strh	w2, [x0,2238]
+	ldr	x2, [x0,2160]
+	str	x2, [x0,2248]
+	ldr	x2, [x0,2208]
 	str	x2, [x0,2256]
-	ldr	x2, [x0,2216]
+	ldr	x2, [x0,2168]
 	str	x2, [x0,2264]
-	ldr	x2, [x0,2176]
-	str	x2, [x0,2272]
-	ldr	x0, [x0,2208]
+	ldr	x0, [x0,2200]
 	str	x0, [x1,40]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -6369,35 +6037,35 @@ FtlVariablesInit:
 	adrp	x20, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x20, x20, :lo12:.LANCHOR0
-	strh	w0, [x19,2320]
+	strh	w0, [x19,2312]
 	mov	w0, -1
-	ldrh	w2, [x20,2048]
-	str	w0, [x19,2332]
-	ldr	x0, [x20,2080]
+	ldrh	w2, [x20,2040]
+	str	w0, [x19,2324]
+	ldr	x0, [x20,2072]
 	lsl	w2, w2, 1
-	str	xzr, [x19,2312]
-	str	wzr, [x19,2324]
-	str	wzr, [x19,2328]
-	str	wzr, [x19,160]
-	strh	wzr, [x20,2072]
+	str	xzr, [x19,2304]
+	str	wzr, [x19,2316]
+	str	wzr, [x19,2320]
+	str	wzr, [x19,152]
+	strh	wzr, [x20,2064]
 	bl	ftl_memset
-	ldrh	w2, [x20,1962]
+	ldrh	w2, [x20,1954]
 	mov	w1, 0
-	ldr	x0, [x19,-80]
+	ldr	x0, [x19,-88]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w2, [x20,1962]
+	ldrh	w2, [x20,1954]
 	mov	w1, 0
-	ldr	x0, [x19,2144]
+	ldr	x0, [x19,2136]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	add	x0, x19, 224
+	add	x0, x19, 216
 	mov	w1, 0
 	mov	w2, 48
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w2, 512
-	add	x0, x19, 352
+	add	x0, x19, 344
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
@@ -6410,107 +6078,116 @@ FtlVariablesInit:
 	.global	SupperBlkListInit
 	.type	SupperBlkListInit, %function
 SupperBlkListInit:
-	stp	x29, x30, [sp, -112]!
+	stp	x29, x30, [sp, -128]!
 	mov	w1, 0
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
 	adrp	x24, .LANCHOR0
 	add	x0, x24, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
+	stp	x21, x22, [sp,32]
 	stp	x27, x28, [sp,80]
-	adrp	x22, .LANCHOR2
-	mov	w26, 6
-	add	x20, x22, :lo12:.LANCHOR2
-	ldrh	w2, [x0,1962]
-	mov	w25, 0
-	mov	x21, x20
-	mov	w23, w25
-	mov	w19, w25
-	ldr	x0, [x20,-56]
-	mul	w2, w2, w26
+	adrp	x20, .LANCHOR2
+	mov	w25, 6
+	add	x19, x20, :lo12:.LANCHOR2
+	ldrh	w2, [x0,1954]
+	mov	w22, 0
+	mov	w26, -1
+	mov	w23, w22
+	mov	w27, 32768
+	ldr	x0, [x19,-64]
+	mul	w2, w2, w25
 	bl	ftl_memset
-	str	xzr, [x20,-16]
-	str	xzr, [x20,-48]
-	str	xzr, [x20,-32]
-	strh	wzr, [x20,-24]
-	strh	wzr, [x20,-8]
-.L892:
+	str	xzr, [x19,-24]
+	str	xzr, [x19,-56]
+	str	xzr, [x19,-40]
+	strh	wzr, [x19,-32]
+	strh	wzr, [x19,-16]
+	mov	w19, w22
+.L845:
 	add	x0, x24, :lo12:.LANCHOR0
-	ldrh	w1, [x0,1960]
+	ldrh	w1, [x0,1952]
 	cmp	w1, w19
-	bls	.L898
-	mov	x28, 0
-	ldrh	w3, [x0,1952]
-	ldrh	w2, [x0,2026]
-	mov	w20, w28
-	mov	x27, x0
-.L899:
-	cmp	w3, w28, uxth
-	bls	.L903
-	add	x0, x27, 1984
+	bls	.L852
+	mov	x2, 0
+	ldrh	w4, [x0,1944]
+	ldrh	w3, [x0,2018]
+	mov	w21, w2
+	mov	x28, x0
+.L853:
+	cmp	w4, w2, uxth
+	bls	.L854
+	add	x0, x28, 1976
 	mov	w1, w19
-	str	x2, [x29,96]
 	str	x3, [x29,104]
-	ldrb	w0, [x0,x28]
+	str	x4, [x29,112]
+	ldrb	w0, [x0,x2]
+	str	x2, [x29,120]
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
+	ldr	x2, [x29,120]
+	ldr	x4, [x29,112]
 	ldr	x3, [x29,104]
-	ldr	x2, [x29,96]
-	cbnz	w0, .L893
-	add	w20, w20, w2
-	uxth	w20, w20
-.L893:
-	add	x28, x28, 1
-	b	.L899
-.L903:
-	cbz	w20, .L895
-	mov	w0, 32768
-	sdiv	w20, w0, w20
-.L895:
-	ldr	x1, [x21,-56]
-	umull	x0, w19, w26
-	add	x0, x1, x0
-	strh	w20, [x0,4]
-	ldrh	w0, [x21]
-	cmp	w0, w19
-	beq	.L896
-	ldrh	w0, [x21,48]
-	cmp	w0, w19
-	beq	.L896
-	ldrh	w0, [x21,96]
-	cmp	w0, w19
-	beq	.L896
+	cbnz	w0, .L846
+	add	w21, w21, w3
+	uxth	w21, w21
+.L846:
+	add	x2, x2, 1
+	b	.L853
+.L854:
+	cbz	w21, .L848
+	sdiv	w21, w27, w21
+	b	.L849
+.L848:
+	add	x1, x20, :lo12:.LANCHOR2
 	ubfiz	x0, x19, 1, 16
-	ldr	x1, [x21,-40]
-	ldrh	w0, [x1,x0]
-	cbnz	w0, .L897
-	add	w4, w25, 1
+	ldr	x1, [x1,-48]
+	strh	w26, [x1,x0]
+.L849:
+	add	x0, x20, :lo12:.LANCHOR2
+	umull	x1, w19, w25
+	ldr	x2, [x0,-64]
+	add	x1, x2, x1
+	strh	w21, [x1,4]
+	ldrh	w1, [x0,-8]
+	cmp	w1, w19
+	beq	.L850
+	ldrh	w1, [x0,40]
+	cmp	w1, w19
+	beq	.L850
+	ldrh	w1, [x0,88]
+	cmp	w1, w19
+	beq	.L850
+	ubfiz	x1, x19, 1, 16
+	ldr	x2, [x0,-48]
+	ldrh	w0, [x2,x1]
+	cbnz	w0, .L851
+	add	w22, w22, 1
 	mov	w0, w19
-	uxth	w25, w4
+	uxth	w22, w22
 	bl	INSERT_FREE_LIST
-	b	.L896
-.L897:
+	b	.L850
+.L851:
 	add	w23, w23, 1
 	mov	w0, w19
 	uxth	w23, w23
 	bl	INSERT_DATA_LIST
-.L896:
+.L850:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L892
-.L898:
-	add	x22, x22, :lo12:.LANCHOR2
+	b	.L845
+.L852:
+	add	x20, x20, :lo12:.LANCHOR2
 	mov	w0, 0
-	ldp	x19, x20, [sp,16]
+	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	strh	w23, [x22,-24]
-	strh	w25, [x22,-8]
+	strh	w23, [x20,-32]
+	strh	w22, [x20,-16]
 	ldp	x23, x24, [sp,48]
+	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 128
 	ret
 	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	2
@@ -6525,15 +6202,15 @@ FtlGcPageVarInit:
 	adrp	x19, .LANCHOR2
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w2, [x20,2030]
-	ldr	x0, [x19,928]
+	ldrh	w2, [x20,2022]
+	ldr	x0, [x19,920]
 	lsl	w2, w2, 1
-	strh	wzr, [x19,924]
-	strh	wzr, [x19,936]
+	strh	wzr, [x19,916]
+	strh	wzr, [x19,928]
 	bl	ftl_memset
-	ldrh	w3, [x20,2030]
+	ldrh	w3, [x20,2022]
 	mov	w2, 12
-	ldr	x0, [x19,944]
+	ldr	x0, [x19,936]
 	mov	w1, 255
 	mul	w2, w3, w2
 	bl	ftl_memset
@@ -6554,100 +6231,15 @@ ftl_memcpy:
 	ret
 	.size	ftl_memcpy, .-ftl_memcpy
 	.align	2
-	.global	FlashGetReadRetryDefault
-	.type	FlashGetReadRetryDefault, %function
-FlashGetReadRetryDefault:
+	.global	FlashReadIdbData
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
 	stp	x29, x30, [sp, -16]!
-	mov	w1, w0
+	adrp	x1, .LANCHOR2
+	mov	w2, 2048
+	add	x1, x1, :lo12:.LANCHOR2
 	add	x29, sp, 0
-	cbz	w0, .L906
-	sub	w2, w0, #1
-	cmp	w2, 5
-	bhi	.L908
-	bl	HynixGetReadRetryDefault
-	b	.L906
-.L908:
-	cmp	w0, 49
-	bne	.L909
-	adrp	x0, .LANCHOR0
-	mov	w2, 64
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 764
-	strb	w1, [x0,-4]
-	mov	w1, 4
-	strb	w1, [x0,-3]
-	mov	w1, 15
-	strb	w1, [x0,-2]
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	add	x1, x1, 408
-	b	.L924
-.L909:
-	sub	w0, w0, #65
-	cmp	w0, 1
-	bls	.L915
-	cmp	w1, 33
-	bne	.L910
-.L915:
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x0,760]
-	mov	w1, 4
-	b	.L925
-.L910:
-	cmp	w1, 67
-	beq	.L916
-	cmp	w1, 34
-	bne	.L912
-.L916:
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x0,760]
-	mov	w1, 5
-.L925:
-	strb	w1, [x0,761]
-	mov	w1, 7
-	strb	w1, [x0,762]
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, 764
-	add	x1, x1, 256
-	mov	w2, 45
-	b	.L924
-.L912:
-	cmp	w1, 68
-	beq	.L917
-	cmp	w1, 35
-	bne	.L906
-.L917:
-	adrp	x0, .LANCHOR0
-	mov	w2, 95
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 764
-	strb	w1, [x0,-4]
-	mov	w1, 5
-	strb	w1, [x0,-3]
-	mov	w1, 17
-	strb	w1, [x0,-2]
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	add	x1, x1, 304
-.L924:
-	bl	ftl_memcpy
-.L906:
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
-	.align	2
-	.global	FlashReadIdbData
-	.type	FlashReadIdbData, %function
-FlashReadIdbData:
-	stp	x29, x30, [sp, -16]!
-	adrp	x1, .LANCHOR2
-	mov	w2, 2048
-	add	x1, x1, :lo12:.LANCHOR2
-	add	x29, sp, 0
-	add	x1, x1, 2336
+	add	x1, x1, 2328
 	bl	ftl_memcpy
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
@@ -6666,46 +6258,46 @@ FlashLoadPhyInfoInRam:
 	add	x21, x20, :lo12:.LANCHOR1
 	add	x22, x22, :lo12:.LANCHOR0
 	str	x23, [sp,48]
-	add	x21, x21, 536
+	add	x21, x21, 512
 	mov	w19, 0
 	add	x22, x22, 1620
-.L931:
+.L862:
 	ldrb	w2, [x21]
 	add	x0, x21, 1
 	mov	x1, x22
 	bl	FlashMemCmp8
 	mov	w23, w0
-	cbnz	w0, .L928
+	cbnz	w0, .L859
 	add	x0, x20, :lo12:.LANCHOR1
 	ubfiz	x19, x19, 5, 32
-	add	x1, x0, 536
+	add	x1, x0, 512
 	adds	x19, x1, x19
-	beq	.L934
+	beq	.L865
 	ldrb	w3, [x19,22]
 	mov	x2, 0
 	mov	x1, x0
-	b	.L933
-.L928:
+	b	.L864
+.L859:
 	add	w19, w19, 1
 	add	x21, x21, 32
 	cmp	w19, 72
-	bne	.L931
-	b	.L934
-.L933:
+	bne	.L862
+	b	.L865
+.L864:
 	add	x4, x1, x2, lsl 5
 	mov	w0, w2
-	ldrb	w4, [x4,2840]
+	ldrb	w4, [x4,2816]
 	cmp	w4, w3
-	beq	.L932
+	beq	.L863
 	add	x2, x2, 1
 	cmp	x2, 4
-	bne	.L933
+	bne	.L864
 	mov	w0, w2
-.L932:
+.L863:
 	add	x20, x20, :lo12:.LANCHOR1
 	ubfiz	x1, x0, 5, 32
 	adrp	x0, .LANCHOR0
-	add	x2, x20, 2840
+	add	x2, x20, 2816
 	add	x0, x0, :lo12:.LANCHOR0
 	add	x1, x2, x1
 	add	x0, x0, 88
@@ -6715,10 +6307,10 @@ FlashLoadPhyInfoInRam:
 	mov	x1, x19
 	mov	w2, 32
 	bl	ftl_memcpy
-	b	.L929
-.L934:
+	b	.L860
+.L865:
 	mov	w23, -1
-.L929:
+.L860:
 	mov	w0, w23
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -6742,14 +6334,14 @@ NandcCopy1KB:
 	add	x4, x0, 4096
 	add	x21, x0, 512
 	add	x2, x4, x2
-	bne	.L939
-	cbz	x3, .L940
+	bne	.L870
+	cbz	x3, .L871
 	mov	x0, x2
 	mov	x1, x3
 	mov	w2, 1024
 	bl	ftl_memcpy
-.L940:
-	cbz	x20, .L938
+.L871:
+	cbz	x20, .L869
 	mov	w0, 48
 	lsr	w19, w19, 1
 	ldrb	w1, [x20,1]
@@ -6763,15 +6355,15 @@ NandcCopy1KB:
 	ldrb	w1, [x20,3]
 	orr	w0, w0, w1, lsl 24
 	str	w0, [x21,w19,sxtw 2]
-	b	.L938
-.L939:
-	cbz	x3, .L943
+	b	.L869
+.L870:
+	cbz	x3, .L874
 	mov	x1, x2
 	mov	x0, x3
 	mov	w2, 1024
 	bl	ftl_memcpy
-.L943:
-	cbz	x20, .L938
+.L874:
+	cbz	x20, .L869
 	mov	w0, 48
 	lsr	w19, w19, 1
 	mul	w19, w19, w0
@@ -6784,7 +6376,7 @@ NandcCopy1KB:
 	lsr	w0, w0, 24
 	strb	w1, [x20,2]
 	strb	w0, [x20,3]
-.L938:
+.L869:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -6805,20 +6397,20 @@ ftl_memcmp:
 	.global	FlashSramLoadStore
 	.type	FlashSramLoadStore, %function
 FlashSramLoadStore:
-	adrp	x4, .LANCHOR4+32
+	adrp	x4, .LANCHOR4+24
 	mov	x6, x0
 	stp	x29, x30, [sp, -16]!
 	uxtw	x1, w1
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+32]
+	ldr	x4, [x4,#:lo12:.LANCHOR4+24]
 	add	x4, x4, 4096
-	cbnz	w2, .L956
+	cbnz	w2, .L887
 	add	x1, x4, x1
-	b	.L958
-.L956:
+	b	.L889
+.L887:
 	add	x0, x4, x1
 	mov	x1, x6
-.L958:
+.L889:
 	mov	w2, w3
 	bl	ftl_memcpy
 	ldp	x29, x30, [sp], 16
@@ -6864,8 +6456,8 @@ rk_nand_resume:
 	.global	rk_ftl_get_capacity
 	.type	rk_ftl_get_capacity, %function
 rk_ftl_get_capacity:
-	adrp	x0, .LANCHOR0+2068
-	ldr	w0, [x0,#:lo12:.LANCHOR0+2068]
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
 	ret
 	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
 	.align	2
@@ -6891,41 +6483,41 @@ rknand_print_hex:
 	add	x23, x23, :lo12:.LC79
 	add	x21, x21, :lo12:.LC80
 	add	x24, x24, :lo12:.LC72
-.L965:
+.L896:
 	cmp	x19, x26
-	beq	.L973
-	cbnz	w20, .L966
+	beq	.L904
+	cbnz	w20, .L897
 	mov	x0, x23
 	mov	x1, x27
 	mov	w2, w19
 	bl	printk
-.L966:
+.L897:
 	cmp	w25, 4
 	mov	x0, x21
-	bne	.L967
+	bne	.L898
 	ldr	w1, [x22,x19,lsl 2]
-	b	.L972
-.L967:
+	b	.L903
+.L898:
 	cmp	w25, 2
-	bne	.L969
+	bne	.L900
 	ldrsh	w1, [x22,x19,lsl 1]
-	b	.L972
-.L969:
+	b	.L903
+.L900:
 	ldrb	w1, [x22,x19]
-.L972:
+.L903:
 	bl	printk
 	add	w20, w20, 1
 	cmp	w20, 15
-	bls	.L970
+	bls	.L901
 	adrp	x1, .LC81
 	mov	x0, x24
 	add	x1, x1, :lo12:.LC81
 	mov	w20, 0
 	bl	printk
-.L970:
+.L901:
 	add	x19, x19, 1
-	b	.L965
-.L973:
+	b	.L896
+.L904:
 	adrp	x0, .LC72
 	adrp	x1, .LC81
 	add	x1, x1, :lo12:.LC81
@@ -6940,6 +6532,609 @@ rknand_print_hex:
 	ret
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	stp	x29, x30, [sp, -144]!
+	mov	w4, -83
+	mov	w2, -82
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x0, 760
+	cmp	w26, 2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	strb	w26, [x0,760]
+	mov	w0, -84
+	strb	w4, [x1,5]
+	strb	w0, [x1,4]
+	mov	w0, -81
+	strb	w2, [x1,6]
+	strb	w0, [x1,7]
+	bne	.L906
+	mov	w0, -89
+	strb	w0, [x1,4]
+	adrp	x0, .LANCHOR1+2961
+	mov	w1, -9
+	strb	w1, [x0,#:lo12:.LANCHOR1+2961]
+	b	.L961
+.L906:
+	cmp	w26, 3
+	bne	.L908
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	b	.L994
+.L908:
+	cmp	w26, 4
+	bne	.L909
+	mov	w5, -52
+	strb	w5, [x1,4]
+	mov	w5, -65
+	strb	w5, [x1,5]
+	mov	w5, -86
+	strb	w5, [x1,6]
+	mov	w5, -85
+	strb	w4, [x1,9]
+	strb	w5, [x1,7]
+	mov	w5, -51
+	strb	w2, [x1,10]
+	strb	w5, [x1,8]
+.L994:
+	mov	w27, 8
+	strb	w0, [x1,11]
+	mov	w28, w27
+	b	.L907
+.L909:
+	cmp	w26, 5
+	bne	.L910
+	mov	w0, 56
+	strb	w0, [x1,4]
+	mov	w0, 57
+	strb	w0, [x1,5]
+	mov	w0, 58
+	mov	w27, 8
+	strb	w0, [x1,6]
+	mov	w0, 59
+	strb	w0, [x1,7]
+	b	.L993
+.L910:
+	cmp	w26, 6
+	bne	.L911
+	mov	w0, 14
+	strb	w0, [x1,4]
+	mov	w0, 15
+	strb	w0, [x1,5]
+	mov	w0, 16
+	mov	w27, 12
+	strb	w0, [x1,6]
+	mov	w0, 17
+	strb	w0, [x1,7]
+	b	.L993
+.L911:
+	cmp	w26, 7
+	bne	.L961
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	strb	w0, [x1,11]
+	mov	w0, -44
+	mov	w27, 12
+	strb	w0, [x1,12]
+	mov	w28, 10
+	mov	w0, -43
+	strb	w0, [x1,13]
+	b	.L907
+.L961:
+	mov	w27, 7
+.L993:
+	mov	w28, 4
+.L907:
+	sub	w0, w26, #1
+	cmp	w0, 1
+	bhi	.L990
+	adrp	x22, .LANCHOR1
+	add	x25, x19, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LANCHOR1
+	mov	w21, 0
+	add	x26, x25, 760
+	add	x4, x25, 24
+	add	x22, x22, 2944
+.L912:
+	ldrb	w0, [x25,1845]
+	cmp	w0, w21
+	bls	.L919
+	add	x0, x25, x21, sxtw
+	ldrb	w0, [x0,1848]
+	mov	x23, 0
+	add	x20, x26, x0, lsl 6
+	lsl	x0, x0, 4
+	add	x1, x4, x0
+	add	x20, x20, 20
+	ldr	x24, [x4,x0]
+	ldrb	w0, [x1,8]
+	mov	w1, 55
+	add	x24, x24, x0, lsl 8
+.L914:
+	add	x0, x26, x23
+	str	w1, [x24,2056]
+	str	x4, [x29,128]
+	str	x1, [x29,136]
+	ldrb	w0, [x0,4]
+	str	w0, [x24,2052]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x24,2048]
+	strb	w0, [x20,x23]
+	add	x23, x23, 1
+	ldr	x1, [x29,136]
+	cmp	w28, w23, uxtb
+	ldr	x4, [x29,128]
+	bhi	.L914
+	mov	x0, 0
+.L915:
+	add	w2, w0, 8
+	mov	x1, 0
+.L916:
+	add	x3, x1, x0
+	add	x1, x1, 4
+	add	x3, x22, x3
+	cmp	x1, 24
+	ldrb	w6, [x3,4]
+	ldrb	w3, [x20,x0]
+	add	w3, w6, w3
+	strb	w3, [x20,w2,sxtw]
+	add	w2, w2, 8
+	bne	.L916
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L915
+	add	w21, w21, 1
+	strb	wzr, [x20,16]
+	strb	wzr, [x20,24]
+	strb	wzr, [x20,32]
+	uxtb	w21, w21
+	strb	wzr, [x20,40]
+	strb	wzr, [x20,48]
+	strb	wzr, [x20,41]
+	strb	wzr, [x20,49]
+	b	.L912
+.L990:
+	sub	w0, w26, #3
+	cmp	w0, 4
+	bhi	.L919
+	mul	w25, w28, w27
+	sub	w23, w28, #1
+	add	x21, x19, :lo12:.LANCHOR0
+	lsl	w0, w25, 4
+	asr	w22, w25, 2
+	str	w0, [x29,128]
+	lsl	w0, w22, 1
+	uxtb	x23, w23
+	str	w0, [x29,124]
+	add	x0, x21, 24
+	mov	w20, 0
+	str	x0, [x29,136]
+	sub	w25, w26, #5
+	add	x0, x23, 1
+	str	x0, [x29,112]
+.L920:
+	ldrb	w0, [x21,1845]
+	cmp	w0, w20
+	bhi	.L960
+.L919:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	strb	w28, [x19,761]
+	strb	w27, [x19,762]
+	ldp	x25, x26, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+.L960:
+	add	x0, x21, x20, sxtw
+	ldrb	w1, [x0,1848]
+	str	x1, [x29,104]
+	lsl	x0, x1, 4
+	mov	x24, x1
+	ldr	x1, [x29,136]
+	add	x2, x1, x0
+	ldr	x0, [x1,x0]
+	ldrb	w2, [x2,8]
+	add	x23, x0, x2, lsl 8
+	mov	w0, 255
+	str	w0, [x23,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	cmp	w26, 7
+	add	x6, x21, 760
+	ldr	x1, [x29,104]
+	beq	.L921
+	add	x1, x6, x1, lsl 6
+	add	x6, x1, 20
+	b	.L922
+.L921:
+	mov	x0, 160
+	madd	x1, x1, x0, x6
+	add	x6, x1, 28
+.L922:
+	mov	w0, 54
+	cmp	w26, 4
+	str	w0, [x23,2056]
+	bne	.L923
+	mov	w0, 255
+	str	w0, [x23,2052]
+	mov	w0, 64
+	str	w0, [x23,2048]
+	mov	w0, 204
+	b	.L995
+.L923:
+	cmp	w25, 1
+	bhi	.L925
+	ldrb	w0, [x21,764]
+	str	w0, [x23,2052]
+	mov	w0, 82
+	b	.L996
+.L925:
+	mov	w0, 174
+	str	w0, [x23,2052]
+	str	wzr, [x23,2048]
+	mov	w0, 176
+.L995:
+	str	w0, [x23,2052]
+	mov	w0, 77
+.L996:
+	str	w0, [x23,2048]
+	mov	w0, 22
+	str	w0, [x23,2056]
+	mov	w0, 23
+	str	w0, [x23,2056]
+	mov	w0, 4
+	str	w0, [x23,2056]
+	mov	w0, 25
+	str	w0, [x23,2056]
+	cmp	w26, 6
+	str	wzr, [x23,2056]
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	bne	.L926
+	mov	w0, 31
+	str	w0, [x23,2052]
+	b	.L927
+.L926:
+	str	wzr, [x23,2052]
+.L927:
+	mov	w1, 2
+	str	w1, [x23,2052]
+	str	wzr, [x23,2052]
+	mov	w0, 48
+	str	w0, [x23,2056]
+	mov	w0, w24
+	str	x6, [x29,96]
+	str	x1, [x29,104]
+	bl	NandcWaitFlashReady
+	cmp	w25, 1
+	mov	w7, 16
+	ldr	x6, [x29,96]
+	bls	.L929
+	ldr	x1, [x29,104]
+	cmp	w26, 7
+	mov	w7, 32
+	csel	w7, w7, w1, eq
+.L929:
+	adrp	x0, .LANCHOR4
+	mov	x8, 0
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x1, [x1,32]
+.L930:
+	ldr	w9, [x23,2048]
+	strb	w9, [x1,x8]
+	add	x8, x8, 1
+	cmp	w7, w8, uxtb
+	bhi	.L930
+	cmp	w26, 7
+	bne	.L931
+	mov	w7, 0
+.L933:
+	ldrb	w8, [x1]
+	cmp	w8, 12
+	beq	.L932
+	ldrb	w8, [x1,1]
+	cmp	w8, 10
+	beq	.L932
+	add	w7, w7, 1
+	add	x1, x1, 4
+	uxtb	w7, w7
+	cmp	w7, 8
+	bne	.L933
+	b	.L934
+.L932:
+	cmp	w7, 7
+	bne	.L935
+.L934:
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L936:
+	b	.L936
+.L931:
+	cmp	w26, 6
+	bne	.L935
+	mov	x7, 0
+.L937:
+	ldrb	w8, [x1,x7]
+	cmp	w8, 12
+	beq	.L935
+	add	x8, x1, x7
+	ldrb	w8, [x8,8]
+	cmp	w8, 4
+	beq	.L935
+	add	x7, x7, 1
+	cmp	x7, 8
+	bne	.L937
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L939:
+	b	.L939
+.L935:
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x10, [x1,32]
+	mov	x1, 0
+.L940:
+	ldr	w2, [x29,128]
+	cmp	w2, w1
+	ble	.L997
+	ldr	w7, [x23,2048]
+	strb	w7, [x10,x1]
+	add	x1, x1, 1
+	b	.L940
+.L997:
+	add	x1, x0, :lo12:.LANCHOR4
+	mov	w9, w22
+	mov	w8, 8
+	ldr	x12, [x1,32]
+.L943:
+	mov	w1, 0
+.L942:
+	add	w7, w1, w9
+	add	w1, w1, 1
+	sbfiz	x7, x7, 2, 32
+	cmp	w1, w22
+	ldr	w11, [x12,x7]
+	mvn	w11, w11
+	str	w11, [x12,x7]
+	bne	.L942
+	ldr	w1, [x29,124]
+	subs	w8, w8, #1
+	add	w9, w9, w1
+	bne	.L943
+	mov	x8, 0
+	mov	w16, 1
+.L944:
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x15, [x1,32]
+	mov	w1, 0
+	mov	w11, w1
+.L948:
+	lsl	w9, w16, w11
+	mov	w13, w8
+	mov	w7, 16
+	mov	w12, 0
+.L946:
+	ldr	w14, [x15,w13,sxtw 2]
+	add	w13, w13, w22
+	and	w14, w9, w14
+	cmp	w14, w9
+	csinc	w12, w12, w12, ne
+	subs	w7, w7, #1
+	bne	.L946
+	cmp	w12, 9
+	orr	w9, w1, w9
+	add	w11, w11, 1
+	csel	w1, w9, w1, cs
+	cmp	w11, 32
+	bne	.L948
+	str	w1, [x15,x8,lsl 2]
+	add	x8, x8, 1
+	cmp	w22, w8
+	bgt	.L944
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x1, [x0,32]
+	mov	x0, 0
+	mov	w8, w0
+.L951:
+	ldr	w9, [x1,x0]
+	add	x0, x0, 4
+	cmp	w9, wzr
+	csinc	w8, w8, w8, ne
+	cmp	x0, 32
+	bne	.L951
+	cmp	w8, 7
+	ble	.L952
+	adrp	x0, .LC83
+	mov	w2, 1
+	add	x0, x0, :lo12:.LC83
+	mov	w3, 1024
+	bl	rknand_print_hex
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L953:
+	b	.L953
+.L952:
+	cmp	w26, 6
+	mov	w1, 4
+	beq	.L954
+	cmp	w26, 7
+	mov	w1, 10
+	mov	w0, 8
+	csel	w1, w0, w1, ne
+.L954:
+	mov	w8, 0
+.L955:
+	mov	x0, 0
+.L956:
+	add	w9, w7, w0
+	ldrb	w11, [x10,x0]
+	add	x0, x0, 1
+	cmp	w28, w0, uxtb
+	strb	w11, [x6,w9,sxtw]
+	bhi	.L956
+	add	w8, w8, 1
+	ldr	x0, [x29,112]
+	cmp	w8, w27
+	add	w7, w7, w1
+	add	x10, x10, x0
+	blt	.L955
+	mov	w0, 255
+	str	w0, [x23,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	cmp	w25, 1
+	bhi	.L958
+	mov	w0, 54
+	str	w0, [x23,2056]
+	adrp	x0, .LANCHOR0+764
+	mov	w1, -1
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+764]
+	str	w0, [x23,2052]
+	mov	w0, 22
+	str	wzr, [x23,2048]
+	str	w0, [x23,2056]
+	mov	w0, w20
+	bl	FlashReadCmd
+	b	.L959
+.L958:
+	mov	w0, 56
+	str	w0, [x23,2056]
+.L959:
+	mov	w0, w24
+	add	w20, w20, 1
+	bl	NandcWaitFlashReady
+	uxtb	w20, w20
+	b	.L920
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	2
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, w0
+	add	x29, sp, 0
+	cbz	w0, .L998
+	sub	w2, w0, #1
+	cmp	w2, 6
+	bhi	.L1000
+	bl	HynixGetReadRetryDefault
+	b	.L998
+.L1000:
+	cmp	w0, 49
+	bne	.L1001
+	adrp	x0, .LANCHOR0
+	mov	w2, 64
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 764
+	strb	w1, [x0,-4]
+	mov	w1, 4
+	strb	w1, [x0,-3]
+	mov	w1, 15
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 408
+	b	.L1016
+.L1001:
+	sub	w0, w0, #65
+	cmp	w0, 1
+	bls	.L1007
+	cmp	w1, 33
+	bne	.L1002
+.L1007:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,760]
+	mov	w1, 4
+	b	.L1017
+.L1002:
+	cmp	w1, 67
+	beq	.L1008
+	cmp	w1, 34
+	bne	.L1004
+.L1008:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,760]
+	mov	w1, 5
+.L1017:
+	strb	w1, [x0,761]
+	mov	w1, 7
+	strb	w1, [x0,762]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, 764
+	add	x1, x1, 256
+	mov	w2, 45
+	b	.L1016
+.L1004:
+	cmp	w1, 68
+	beq	.L1009
+	cmp	w1, 35
+	bne	.L998
+.L1009:
+	adrp	x0, .LANCHOR0
+	mov	w2, 95
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 764
+	strb	w1, [x0,-4]
+	mov	w1, 5
+	strb	w1, [x0,-3]
+	mov	w1, 17
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 304
+.L1016:
+	bl	ftl_memcpy
+.L998:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
 	.global	NandcXferComp
 	.type	NandcXferComp, %function
 NandcXferComp:
@@ -6953,38 +7148,38 @@ NandcXferComp:
 	add	x2, x1, 24
 	stp	x21, x22, [sp,32]
 	ldr	x19, [x2,x0]
-	ldr	w0, [x1,20]
+	ldr	w0, [x1,1864]
 	cmp	w0, 3
-	bls	.L1005
+	bls	.L1049
 	ldr	w0, [x19,16]
-	tbz	x0, 2, .L1005
+	tbz	x0, 2, .L1049
 	mov	x0, x19
 	bl	wait_for_nandc_xfer_completed
 	ldr	w21, [x19,16]
 	ldr	w0, [x19,8]
 	ubfx	x21, x21, 1, 1
 	str	w0, [x29,64]
-	cbz	w21, .L976
-	adrp	x22, .LC82
-	adrp	x23, .LC83
+	cbz	w21, .L1020
+	adrp	x22, .LC84
+	adrp	x23, .LC85
 	mov	w21, 0
-	add	x22, x22, :lo12:.LC82
-	add	x23, x23, :lo12:.LC83
-.L977:
+	add	x22, x22, :lo12:.LC84
+	add	x23, x23, :lo12:.LC85
+.L1021:
 	ldr	w2, [x19,28]
 	ldr	w1, [x29,64]
 	ubfx	x2, x2, 16, 5
 	ubfx	x1, x1, 22, 6
 	cmp	w2, w1
-	bge	.L985
+	bge	.L1029
 	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w0, [x0,20]
+	ldr	w0, [x0,1864]
 	cmp	w0, 5
-	bhi	.L978
-.L981:
+	bhi	.L1022
+.L1025:
 	add	w21, w21, 1
 	and	w0, w21, 16777215
-	cbnz	w0, .L977
+	cbnz	w0, .L1021
 	ldr	w2, [x19,28]
 	mov	w1, w21
 	ldr	w3, [x29,64]
@@ -6997,19 +7192,19 @@ NandcXferComp:
 	mov	w2, 4
 	mov	w3, 512
 	bl	rknand_print_hex
-	b	.L977
-.L978:
+	b	.L1021
+.L1022:
 	ldr	w0, [x19]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L981
+	tbz	x0, 13, .L1025
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L981
-.L985:
+	tbz	x0, 17, .L1025
+.L1029:
 	add	x19, x20, :lo12:.LANCHOR0
-	add	x19, x19, 1888
+	add	x19, x19, 1880
 	ldr	w0, [x19,40]
-	cbz	w0, .L986
+	cbz	w0, .L1030
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x19,32]
@@ -7022,20 +7217,20 @@ NandcXferComp:
 	ubfx	x1, x1, 22, 5
 	lsl	w1, w1, 7
 	bl	rknand_dma_unmap_single
-	b	.L986
-.L976:
-	adrp	x22, .LC84
-	adrp	x23, .LC83
-	add	x22, x22, :lo12:.LC84
-	add	x23, x23, :lo12:.LC83
-.L987:
+	b	.L1030
+.L1020:
+	adrp	x22, .LC86
+	adrp	x23, .LC85
+	add	x22, x22, :lo12:.LC86
+	add	x23, x23, :lo12:.LC85
+.L1031:
 	ldr	w0, [x29,64]
-	tbnz	x0, 20, .L1013
+	tbnz	x0, 20, .L1057
 	ldr	w0, [x19,8]
 	add	w21, w21, 1
 	str	w0, [x29,64]
 	and	w0, w21, 16777215
-	cbnz	w0, .L987
+	cbnz	w0, .L1031
 	ldr	w2, [x29,64]
 	mov	w1, w21
 	ldr	w3, [x19,28]
@@ -7047,18 +7242,18 @@ NandcXferComp:
 	mov	w2, 4
 	mov	w3, 512
 	bl	rknand_print_hex
-	b	.L987
-.L1013:
+	b	.L1031
+.L1057:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w0, [x0,1936]
-	cbz	w0, .L990
+	ldr	w0, [x0,1928]
+	cbz	w0, .L1034
 	mov	x0, x19
 	bl	NandcSendDumpDataStart
-.L990:
+.L1034:
 	add	x21, x20, :lo12:.LANCHOR0
-	add	x21, x21, 1888
+	add	x21, x21, 1880
 	ldr	w0, [x21,40]
-	cbz	w0, .L991
+	cbz	w0, .L1035
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x21,32]
@@ -7071,22 +7266,22 @@ NandcXferComp:
 	ubfx	x1, x1, 22, 5
 	lsl	w1, w1, 7
 	bl	rknand_dma_unmap_single
-.L991:
+.L1035:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w0, [x0,1936]
-	cbz	w0, .L986
+	ldr	w0, [x0,1928]
+	cbz	w0, .L1030
 	mov	x0, x19
 	bl	NandcSendDumpDataDone
-.L986:
+.L1030:
 	add	x20, x20, :lo12:.LANCHOR0
-	str	wzr, [x20,1928]
-	b	.L974
-.L1005:
+	str	wzr, [x20,1920]
+	b	.L1018
+.L1049:
 	ldr	w0, [x19,8]
 	str	w0, [x29,64]
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L1005
-.L974:
+	tbz	x0, 20, .L1049
+.L1018:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -7114,14 +7309,14 @@ NandcXferData:
 	uxtb	w24, w2
 	mov	x26, x3
 	mov	x22, x4
-	cbnz	x0, .L1015
-	cbnz	x4, .L1016
+	cbnz	x0, .L1059
+	cbnz	x4, .L1060
 	add	x0, x29, 112
 	mov	w1, 255
 	mov	w2, 64
 	add	x22, x29, 112
 	bl	ftl_memset
-.L1016:
+.L1060:
 	mov	w0, w25
 	mov	w1, w21
 	mov	w2, w24
@@ -7132,21 +7327,21 @@ NandcXferData:
 	bl	NandcXferStart
 	mov	w0, w25
 	bl	NandcXferComp
-	cbnz	w21, .L1017
+	cbnz	w21, .L1061
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfx	x2, x24, 1, 7
 	mov	w3, 128
 	add	x2, x22, x2, lsl 2
-	ldr	w0, [x1,1940]
+	ldr	w0, [x1,1932]
 	cmp	w0, 25
 	mov	w0, 64
 	csel	w3, w0, w3, cc
 	mov	w0, w21
-.L1019:
+.L1063:
 	cmp	x22, x2
 	add	w4, w0, w3
-	beq	.L1061
-	ldr	x5, [x1,1896]
+	beq	.L1105
+	ldr	x5, [x1,1888]
 	and	x0, x0, 4294967292
 	add	x22, x22, 4
 	ldr	w0, [x5,x0]
@@ -7158,29 +7353,29 @@ NandcXferData:
 	lsr	w0, w0, 24
 	strb	w0, [x22,-1]
 	mov	w0, w4
-	b	.L1019
-.L1061:
+	b	.L1063
+.L1105:
 	add	x0, x19, :lo12:.LANCHOR0
 	lsr	w24, w24, 2
-	ldr	w5, [x0,1940]
-	ldr	w4, [x0,20]
+	ldr	w5, [x0,1932]
+	ldr	w4, [x0,1864]
 	mov	w0, 0
 	mov	w23, w0
-.L1021:
+.L1065:
 	cmp	w0, w24
-	bcs	.L1017
-	cbz	w5, .L1017
+	bcs	.L1061
+	cbz	w5, .L1061
 	uxtw	x1, w0
 	add	x1, x1, 8
 	ldr	w1, [x20,x1,lsl 2]
 	str	w1, [x29,104]
 	ldr	w1, [x29,104]
-	tbnz	x1, 2, .L1045
+	tbnz	x1, 2, .L1089
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 15, 1
-	cbnz	w3, .L1045
+	cbnz	w3, .L1089
 	cmp	w4, 5
-	bls	.L1023
+	bls	.L1067
 	ldr	w2, [x29,104]
 	ubfx	x6, x2, 3, 5
 	ldr	w2, [x29,104]
@@ -7193,20 +7388,20 @@ NandcXferData:
 	orr	w1, w3, w1, lsl 5
 	ldr	w3, [x29,104]
 	cmp	w2, w1
-	bls	.L1024
+	bls	.L1068
 	ldr	w1, [x29,104]
 	ubfx	x3, x3, 3, 5
 	ubfx	x1, x1, 27, 1
 	orr	w3, w3, w1, lsl 5
-	b	.L1025
-.L1024:
+	b	.L1069
+.L1068:
 	ubfx	x1, x3, 16, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 29, 1
-	b	.L1060
-.L1023:
+	b	.L1104
+.L1067:
 	cmp	w4, 3
-	bls	.L1025
+	bls	.L1069
 	ldr	w2, [x29,104]
 	ubfx	x6, x2, 3, 5
 	ldr	w2, [x29,104]
@@ -7219,43 +7414,43 @@ NandcXferData:
 	orr	w1, w3, w1, lsl 5
 	ldr	w3, [x29,104]
 	cmp	w2, w1
-	bls	.L1026
+	bls	.L1070
 	ubfx	x1, x3, 3, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 28, 1
-	b	.L1060
-.L1026:
+	b	.L1104
+.L1070:
 	ubfx	x1, x3, 16, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 30, 1
-.L1060:
+.L1104:
 	orr	w3, w1, w3, lsl 5
-.L1025:
+.L1069:
 	cmp	w23, w3
 	csel	w23, w23, w3, cs
-	b	.L1022
-.L1045:
+	b	.L1066
+.L1089:
 	mov	w23, -1
-.L1022:
+.L1066:
 	add	w0, w0, 1
-	b	.L1021
-.L1017:
+	b	.L1065
+.L1061:
 	str	wzr, [x20,16]
-	b	.L1028
-.L1015:
+	b	.L1072
+.L1059:
 	cmp	w21, 1
-	bne	.L1059
+	bne	.L1103
 	mov	w23, 0
 	mov	w28, 2
-.L1029:
+.L1073:
 	cmp	w23, w24
-	bcs	.L1062
+	bcs	.L1106
 	and	w27, w23, 3
 	mov	x3, x26
-	cbz	x26, .L1031
+	cbz	x26, .L1075
 	ubfiz	x0, x23, 9, 23
 	add	x3, x26, x0
-.L1031:
+.L1075:
 	cmp	x22, xzr
 	mov	x0, x20
 	csel	w4, w28, wzr, ne
@@ -7274,11 +7469,11 @@ NandcXferData:
 	bl	NandcXferStart
 	mov	w0, w25
 	bl	NandcXferComp
-	b	.L1029
-.L1062:
+	b	.L1073
+.L1106:
 	mov	w23, 0
-	b	.L1028
-.L1059:
+	b	.L1072
+.L1103:
 	mov	w1, 0
 	mov	x4, 0
 	mov	w27, 0
@@ -7288,16 +7483,16 @@ NandcXferData:
 	mov	x5, x4
 	mov	w23, w27
 	bl	NandcXferStart
-.L1034:
+.L1078:
 	cmp	w27, w24
-	bcs	.L1028
+	bcs	.L1072
 	mov	w0, w25
 	add	w28, w27, 2
 	bl	NandcXferComp
 	ldr	w0, [x20,32]
 	cmp	w28, w24
 	str	w0, [x29,104]
-	bcs	.L1035
+	bcs	.L1079
 	mov	x4, 0
 	mov	w0, w25
 	mov	w1, 0
@@ -7305,9 +7500,9 @@ NandcXferData:
 	and	w3, w28, 3
 	mov	x5, x4
 	bl	NandcXferStart
-.L1035:
+.L1079:
 	ldr	w0, [x29,104]
-	tbnz	x0, 2, .L1050
+	tbnz	x0, 2, .L1094
 	ldr	w0, [x29,104]
 	ubfx	x1, x0, 3, 5
 	ldr	w0, [x29,104]
@@ -7315,16 +7510,16 @@ NandcXferData:
 	orr	w0, w1, w0, lsl 5
 	cmp	w23, w0
 	csel	w23, w23, w0, cs
-	b	.L1036
-.L1050:
+	b	.L1080
+.L1094:
 	mov	w23, -1
-.L1036:
+.L1080:
 	and	w2, w27, 3
 	mov	x3, x26
-	cbz	x26, .L1037
+	cbz	x26, .L1081
 	ubfiz	x3, x27, 9, 23
 	add	x3, x26, x3
-.L1037:
+.L1081:
 	cmp	x22, xzr
 	mov	w0, 2
 	csel	w4, w0, wzr, ne
@@ -7334,23 +7529,23 @@ NandcXferData:
 	mov	w27, w28
 	add	x4, x22, x4
 	bl	NandcCopy1KB
-	b	.L1034
-.L1028:
-	cbnz	w21, .L1040
+	b	.L1078
+.L1072:
+	cbnz	w21, .L1084
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	w0, [x19,20]
+	ldr	w0, [x19,1864]
 	cmp	w0, 5
-	bls	.L1040
+	bls	.L1084
 	ldr	w0, [x20]
 	mov	w1, 8192
 	movk	w1, 0x2, lsl 16
 	and	w1, w0, w1
 	cmp	w1, 139264
-	bne	.L1040
+	bne	.L1084
 	orr	w0, w0, 131072
 	mov	w23, -1
 	str	w0, [x20]
-.L1040:
+.L1084:
 	mov	w0, w23
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7373,7 +7568,7 @@ FlashReadRawPage:
 	str	x21, [sp,32]
 	mov	x21, x2
 	ldrb	w20, [x0,#:lo12:.LANCHOR1+481]
-	cbnz	w19, .L1064
+	cbnz	w19, .L1108
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w5, [x0,9]
@@ -7382,7 +7577,7 @@ FlashReadRawPage:
 	cmp	w1, w0
 	mov	w0, 4
 	csel	w20, w20, w0, cs
-.L1064:
+.L1108:
 	mov	w0, w19
 	str	x4, [x29,48]
 	str	x1, [x29,56]
@@ -7432,11 +7627,11 @@ FlashDdrTunningRead:
 	mov	w21, 1024
 	ldr	w0, [x0,304]
 	str	w0, [x29,124]
-	ldr	w0, [x19,20]
+	ldr	w0, [x19,1864]
 	cmp	w0, 8
 	mov	w0, 12
 	csel	w22, w22, w0, cc
-	cbz	w4, .L1067
+	cbz	w4, .L1111
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
@@ -7454,42 +7649,42 @@ FlashDdrTunningRead:
 	ldrb	w0, [x19,1844]
 	bl	NandcSetMode
 	cmn	w21, #1
-	bne	.L1068
-.L1077:
+	bne	.L1112
+.L1121:
 	mov	w21, -1
-	b	.L1069
-.L1068:
-	adrp	x0, .LC85
+	b	.L1113
+.L1112:
+	adrp	x0, .LC87
 	mov	w1, w24
-	add	x0, x0, :lo12:.LC85
+	add	x0, x0, :lo12:.LC87
 	mov	w2, w21
 	bl	printk
 	cmp	w21, 9
-	bhi	.L1070
+	bhi	.L1114
 	add	x19, x19, x23, sxtw 4
 	ldr	x0, [x19,24]
 	ldr	w1, [x0,3840]
 	ldr	w1, [x0]
 	orr	w1, w1, 131072
 	str	w1, [x0]
-.L1070:
+.L1114:
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	w1, [x0,40]
 	add	w1, w1, 1
 	str	w1, [x0,40]
 	cmp	w1, 2047
-	bls	.L1069
+	bls	.L1113
 	mov	x27, 0
 	str	wzr, [x0,40]
 	mov	x28, x27
-.L1067:
+.L1111:
 	mov	w19, 0
 	mov	w26, -1
 	mov	w5, w19
 	mov	w6, w19
 	mov	w20, w19
-.L1075:
+.L1119:
 	mov	w0, w22
 	str	x5, [x29,104]
 	str	x6, [x29,112]
@@ -7503,63 +7698,63 @@ FlashDdrTunningRead:
 	ldr	x6, [x29,112]
 	cmp	w0, w1
 	ldr	x5, [x29,104]
-	bhi	.L1071
+	bhi	.L1115
 	cmp	w0, 2
-	bhi	.L1081
+	bhi	.L1125
 	add	w20, w20, 1
 	cmp	w20, 9
-	bls	.L1081
+	bls	.L1125
 	sub	w19, w22, w20
 	mov	w21, w0
 	mov	w26, 0
-	b	.L1073
-.L1071:
+	b	.L1117
+.L1115:
 	cmp	w6, w20
-	bcs	.L1082
+	bcs	.L1126
 	cmp	w20, 7
 	sub	w5, w19, w20
-	bhi	.L1083
+	bhi	.L1127
 	mov	w6, w20
-	b	.L1082
-.L1081:
+	b	.L1126
+.L1125:
 	mov	x27, 0
 	mov	w19, w22
 	mov	w21, w0
 	mov	w26, 0
 	mov	x28, x27
-	b	.L1072
-.L1082:
+	b	.L1116
+.L1126:
 	mov	w20, 0
-.L1072:
+.L1116:
 	add	w22, w22, 2
 	cmp	w22, 69
-	bls	.L1075
-.L1073:
+	bls	.L1119
+.L1117:
 	cmp	w6, w20
 	csel	w19, w19, w5, cc
-	b	.L1074
-.L1083:
+	b	.L1118
+.L1127:
 	mov	w19, w5
-.L1074:
-	cbz	w19, .L1076
-	adrp	x0, .LC86
+.L1118:
+	cbz	w19, .L1120
+	adrp	x0, .LC88
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC86
+	add	x0, x0, :lo12:.LC88
 	bl	printk
 	mov	w0, w19
 	bl	NandcSetDdrPara
-.L1076:
-	cbz	w26, .L1069
-	adrp	x0, .LC87
+.L1120:
+	cbz	w26, .L1113
+	adrp	x0, .LC89
 	mov	w1, w23
-	add	x0, x0, :lo12:.LC87
+	add	x0, x0, :lo12:.LC89
 	mov	w2, w24
 	bl	printk
-	cbz	w25, .L1077
+	cbz	w25, .L1121
 	ldr	w0, [x29,124]
 	lsr	w0, w0, 8
 	bl	NandcSetDdrPara
-.L1069:
+.L1113:
 	mov	w0, w21
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7587,17 +7782,17 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	cmn	w0, #1
 	mov	w19, w0
-	bne	.L1093
+	bne	.L1137
 	adrp	x20, .LANCHOR0
 	add	x25, x20, :lo12:.LANCHOR0
 	ldrb	w26, [x25,16]
-	cbnz	w26, .L1094
-.L1096:
+	cbnz	w26, .L1138
+.L1140:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x20,1864]
-	cbz	w0, .L1093
-	b	.L1111
-.L1094:
+	ldrb	w0, [x20,1856]
+	cbz	w0, .L1137
+	b	.L1158
+.L1138:
 	mov	w0, w21
 	mov	w1, w22
 	mov	x2, x24
@@ -7606,10 +7801,10 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	strb	w26, [x25,16]
 	cmn	w0, #1
-	beq	.L1096
+	beq	.L1140
 	mov	w19, w0
-	b	.L1093
-.L1111:
+	b	.L1137
+.L1158:
 	ldr	x0, [x20,128]
 	mov	w1, w22
 	mov	x2, x24
@@ -7620,32 +7815,47 @@ FlashReadPage:
 	bl	FlashDdrTunningRead
 	cmn	w0, #1
 	mov	w19, w0
-	beq	.L1097
-	ldrb	w0, [x20,1944]
+	beq	.L1141
+	ldrb	w0, [x20,1936]
 	cmp	w19, w0, lsr 1
-	bls	.L1093
-.L1097:
+	bls	.L1137
+.L1141:
 	lsr	w0, w25, 8
 	bl	NandcSetDdrPara
-.L1093:
-	adrp	x0, .LANCHOR4+48
+.L1137:
+	adrp	x20, .LANCHOR4
 	cmn	w19, #1
-	ldr	x4, [x0,#:lo12:.LANCHOR4+48]
-	bne	.L1098
-	cbz	x4, .L1098
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	x4, [x20,48]
+	bne	.L1142
+	cbz	x4, .L1142
 	mov	w1, w22
 	mov	x2, x24
 	mov	x3, x23
 	mov	w0, w21
 	blr	x4
 	mov	w19, w0
-	adrp	x0, .LC88
+	adrp	x0, .LC90
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC88
+	add	x0, x0, :lo12:.LC90
 	mov	w2, w21
 	mov	w3, w22
 	bl	printk
-.L1098:
+	cmn	w19, #1
+	bne	.L1142
+	adrp	x0, .LANCHOR0+120
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+120]
+	cbz	w0, .L1142
+	mov	w0, w21
+	bl	flash_enter_slc_mode
+	ldr	x4, [x20,48]
+	mov	w0, w21
+	mov	w1, w22
+	mov	x2, x24
+	mov	x3, x23
+	blr	x4
+	mov	w19, w0
+.L1142:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7683,24 +7893,24 @@ FlashDdrParaScan:
 	mov	x3, x2
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L1116
+	beq	.L1163
 	cmn	w22, #1
-	bne	.L1113
-.L1116:
+	bne	.L1160
+.L1163:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x20,1844]
-	tbz	x0, 0, .L1113
+	tbz	x0, 0, .L1160
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-	strb	wzr, [x20,1864]
-	b	.L1115
-.L1113:
+	strb	wzr, [x20,1856]
+	b	.L1162
+.L1160:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	strb	w0, [x19,1864]
-.L1115:
+	strb	w0, [x19,1856]
+.L1162:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7715,100 +7925,112 @@ FlashLoadPhyInfo:
 	mov	w0, 60
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
-	adrp	x24, .LANCHOR0
 	adrp	x23, .LANCHOR4
+	mov	w24, -1
 	strb	w0, [x29,120]
 	mov	w0, 40
 	strb	w0, [x29,121]
 	mov	w0, 24
-	add	x1, x24, :lo12:.LANCHOR0
 	strb	w0, [x29,122]
 	mov	w0, 16
 	strb	w0, [x29,123]
+	add	x0, x23, :lo12:.LANCHOR4
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
 	stp	x27, x28, [sp,80]
-	add	x0, x23, :lo12:.LANCHOR4
 	adrp	x22, .LANCHOR1
+	adrp	x25, .LANCHOR0
 	add	x21, x22, :lo12:.LANCHOR1
-	ldr	x1, [x1,1856]
+	ldr	x1, [x0,32]
 	add	x21, x21, 472
-	mov	w20, 0
+	add	x25, x25, :lo12:.LANCHOR0
 	str	x1, [x0,56]
-	mov	w26, 4
+	mov	w20, 0
 	str	wzr, [x0,64]
-	mov	w25, -1
+	mov	w26, 4
 	mov	w0, 0
+	add	x28, x25, 88
 	ldrh	w27, [x21,10]
 	bl	flash_enter_slc_mode
-.L1124:
-	add	w28, w20, 1
+.L1171:
+	add	w0, w20, 1
 	mov	x19, 0
-.L1126:
+	str	w0, [x29,104]
+.L1173:
 	add	x0, x29, 120
 	ldrb	w0, [x19,x0]
 	bl	FlashBchSel
-	add	x4, x24, :lo12:.LANCHOR0
+	add	x5, x23, :lo12:.LANCHOR4
 	mov	w0, 0
 	mov	w1, w20
 	mov	x3, 0
-	str	x4, [x29,104]
-	ldr	x2, [x4,1856]
+	str	x5, [x29,96]
+	ldr	x2, [x5,32]
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L1125
-	ldr	x4, [x29,104]
+	bne	.L1172
+	ldr	x5, [x29,96]
 	mov	w0, 0
-	mov	w1, w28
+	ldr	w1, [x29,104]
 	mov	x3, 0
-	ldr	x2, [x4,1856]
+	ldr	x2, [x5,32]
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L1125
+	bne	.L1172
 	add	x19, x19, 1
 	cmp	x19, 4
-	beq	.L1127
-	b	.L1126
-.L1128:
+	beq	.L1174
+	b	.L1173
+.L1175:
+	add	x0, x2, 12
 	mov	w1, 2036
-	add	x0, x28, 12
-	mov	w25, -1
+	str	x2, [x29,104]
+	mov	w24, -1
 	bl	JSHash
-	ldr	w1, [x28,8]
+	ldr	x2, [x29,104]
+	ldr	w1, [x2,8]
 	cmp	w1, w0
-	beq	.L1137
-.L1127:
+	beq	.L1185
+.L1174:
 	subs	w26, w26, #1
 	add	w20, w20, w27
-	bne	.L1124
+	bne	.L1171
 	mov	w0, w26
+.L1184:
 	bl	flash_exit_slc_mode
-	b	.L1136
-.L1125:
+	mov	w0, w24
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+.L1172:
 	add	x19, x23, :lo12:.LANCHOR4
 	mov	w0, 20036
 	movk	w0, 0x4e41, lsl 16
-	ldr	x28, [x19,56]
-	ldr	w1, [x28]
+	ldr	x2, [x19,56]
+	ldr	w1, [x2]
 	cmp	w1, w0
-	bne	.L1127
-	cbnz	w25, .L1128
+	bne	.L1174
+	cbnz	w24, .L1175
 	add	x22, x22, :lo12:.LANCHOR1
 	ldrh	w0, [x22,482]
 	udiv	w20, w20, w0
+	mov	w0, w24
 	add	w20, w20, 1
 	str	w20, [x19,68]
-	b	.L1136
-.L1137:
-	add	x1, x28, 160
-	mov	w2, 32
+	b	.L1184
+.L1185:
+	add	x1, x2, 160
 	mov	x0, x21
-	add	x25, x24, :lo12:.LANCHOR0
+	mov	w2, 32
 	bl	ftl_memcpy
 	ldr	x1, [x19,56]
 	mov	w2, 32
-	add	x0, x25, 88
+	mov	x0, x28
 	add	x1, x1, 192
 	bl	ftl_memcpy
 	ldr	x1, [x19,56]
@@ -7819,31 +8041,22 @@ FlashLoadPhyInfo:
 	str	w20, [x19,64]
 	ldr	x1, [x19,56]
 	ldr	w0, [x1,1076]
-	strb	w0, [x25,1864]
+	strb	w0, [x25,1856]
 	ldrh	w0, [x21,10]
 	udiv	w0, w20, w0
 	add	w2, w0, 1
-	cbz	w0, .L1130
+	cbz	w0, .L1177
 	str	w2, [x19,68]
-	b	.L1131
-.L1130:
+	b	.L1178
+.L1177:
 	mov	w0, 2
 	str	w0, [x19,68]
-.L1131:
+.L1178:
 	add	x0, x23, :lo12:.LANCHOR4
 	ldrh	w1, [x1,14]
-	mov	w25, 0
+	mov	w24, 0
 	strb	w1, [x0,72]
-	b	.L1127
-.L1136:
-	mov	w0, w25
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
-	ret
+	b	.L1174
 	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
 	.align	2
 	.global	ToshibaReadRetrial
@@ -7878,20 +8091,20 @@ ToshibaReadRetrial:
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
-	bls	.L1139
-	ldrb	w0, [x2,1864]
-	cbz	w0, .L1140
+	bls	.L1187
+	ldrb	w0, [x2,1856]
+	cbz	w0, .L1188
 	mov	w0, w22
 	mov	w22, 1
 	bl	NandcSetDdrMode
-.L1140:
+.L1188:
 	ubfiz	x0, x28, 8, 8
 	mov	w2, 92
 	add	x0, x24, x0
 	str	w2, [x0,2056]
 	mov	w2, 197
 	str	w2, [x0,2056]
-.L1139:
+.L1187:
 	ldr	x0, [x29,120]
 	mov	w21, 1
 	mov	w25, -1
@@ -7900,13 +8113,13 @@ ToshibaReadRetrial:
 	str	x0, [x29,104]
 	ubfiz	x0, x28, 8, 8
 	str	x0, [x29,96]
-.L1141:
+.L1189:
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
 	ldrb	w0, [x0,73]
 	add	w0, w0, 1
 	cmp	w21, w0
-	bcs	.L1166
+	bcs	.L1214
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w21
 	ldrb	w0, [x0,752]
@@ -7914,34 +8127,34 @@ ToshibaReadRetrial:
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x20
-	bhi	.L1142
+	bhi	.L1190
 	bl	SandiskSetRRPara
-	b	.L1143
-.L1142:
+	b	.L1191
+.L1190:
 	bl	ToshibaSetRRPara
-.L1143:
+.L1191:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,752]
 	cmp	w0, 34
-	bne	.L1144
+	bne	.L1192
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
 	ldrb	w0, [x0,73]
 	sub	w0, w0, #3
 	cmp	w21, w0
-	bne	.L1144
+	bne	.L1192
 	ldr	x0, [x29,104]
 	mov	w1, 179
 	add	x0, x24, x0
 	str	w1, [x0,8]
-.L1144:
+.L1192:
 	ldr	x0, [x29,96]
 	mov	w1, 38
 	add	x0, x24, x0
 	str	w1, [x0,2056]
 	mov	w1, 93
 	str	w1, [x0,2056]
-	cbz	w22, .L1145
+	cbz	w22, .L1193
 	mov	w0, 4
 	bl	NandcSetDdrMode
 	ldr	w1, [x29,116]
@@ -7952,32 +8165,32 @@ ToshibaReadRetrial:
 	mov	w28, w0
 	mov	w0, 0
 	bl	NandcSetDdrMode
-	b	.L1146
-.L1145:
+	b	.L1194
+.L1193:
 	ldr	w1, [x29,116]
 	mov	w0, w23
 	mov	x2, x27
 	mov	x3, x26
 	bl	FlashReadRawPage
 	mov	w28, w0
-.L1146:
+.L1194:
 	cmn	w28, #1
-	beq	.L1147
+	beq	.L1195
 	add	x0, x19, :lo12:.LANCHOR0
 	cmn	w25, #1
 	csel	w25, w25, w28, ne
-	ldrb	w0, [x0,1944]
+	ldrb	w0, [x0,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1149
+	bcc	.L1197
 	mov	x26, 0
 	mov	x27, x26
-.L1147:
+.L1195:
 	add	w21, w21, 1
-	b	.L1141
-.L1166:
+	b	.L1189
+.L1214:
 	mov	w28, w25
-.L1149:
+.L1197:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 0
 	ldrb	w0, [x0,752]
@@ -7985,32 +8198,32 @@ ToshibaReadRetrial:
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x20
-	bhi	.L1151
+	bhi	.L1199
 	bl	SandiskSetRRPara
-	b	.L1152
-.L1151:
+	b	.L1200
+.L1199:
 	bl	ToshibaSetRRPara
-.L1152:
+.L1200:
 	ldr	x0, [x29,120]
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x0, 8
 	add	x24, x24, x0, lsl 8
 	mov	w0, 255
 	str	w0, [x24,8]
-	ldrb	w0, [x19,1944]
+	ldrb	w0, [x19,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1153
+	bcc	.L1201
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L1153:
+.L1201:
 	mov	w0, w23
 	bl	NandcWaitFlashReady
-	cbz	w22, .L1154
+	cbz	w22, .L1202
 	mov	w0, 4
 	bl	NandcSetDdrMode
-.L1154:
+.L1202:
 	mov	w0, w28
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -8049,12 +8262,12 @@ SamsungReadRetrial:
 	ldrb	w21, [x2,8]
 	add	x21, x21, 8
 	add	x21, x0, x21, lsl 8
-.L1168:
+.L1216:
 	add	x0, x27, :lo12:.LANCHOR4
 	ldrb	w0, [x0,73]
 	add	w0, w0, 1
 	cmp	w26, w0
-	bcs	.L1171
+	bcs	.L1219
 	mov	x0, x21
 	mov	w1, w26
 	bl	SamsungSetRRPara
@@ -8064,34 +8277,34 @@ SamsungReadRetrial:
 	mov	x3, x23
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L1169
+	beq	.L1217
 	add	x1, x20, :lo12:.LANCHOR0
 	cmn	w19, #1
 	csel	w19, w19, w0, ne
-	ldrb	w1, [x1,1944]
+	ldrb	w1, [x1,1936]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L1174
+	bcc	.L1222
 	mov	x23, 0
 	mov	x24, x23
-.L1169:
+.L1217:
 	add	w26, w26, 1
-	b	.L1168
-.L1174:
+	b	.L1216
+.L1222:
 	mov	w19, w0
-.L1171:
+.L1219:
 	mov	x0, x21
 	mov	w1, 0
 	add	x20, x20, :lo12:.LANCHOR0
 	bl	SamsungSetRRPara
-	ldrb	w0, [x20,1944]
+	ldrb	w0, [x20,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L1173
+	bcc	.L1221
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1173:
+.L1221:
 	mov	w0, w19
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -8105,102 +8318,122 @@ SamsungReadRetrial:
 	.global	MicronReadRetrial
 	.type	MicronReadRetrial, %function
 MicronReadRetrial:
-	stp	x29, x30, [sp, -128]!
+	stp	x29, x30, [sp, -144]!
+	adrp	x4, .LANCHOR0
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
-	uxtb	w24, w0
-	mov	w23, 0
-	mov	w0, w24
+	mov	w24, w1
+	add	x1, x4, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	stp	x21, x22, [sp,32]
-	mov	w25, w1
-	mov	x27, x2
-	mov	x26, x3
-	adrp	x21, .LANCHOR0
+	uxtb	w22, w0
+	mov	x25, x2
+	ldrb	w0, [x1,1936]
+	mov	x23, x3
+	ldrb	w1, [x1,120]
+	mov	x19, x4
+	lsr	w21, w0, 2
+	cbnz	w1, .L1230
+	add	w0, w0, w0, lsl 1
+	ubfx	x21, x0, 2, 8
+.L1230:
+	mov	w0, w22
+	mov	w27, 0
 	bl	NandcWaitFlashReady
+	add	x4, x19, :lo12:.LANCHOR0
+	sbfiz	x0, x22, 4, 32
+	add	x4, x4, 24
 	mov	w19, -1
-	add	x0, x21, :lo12:.LANCHOR0
-	sbfiz	x1, x24, 4, 32
-	add	x0, x0, 24
-	adrp	x4, .LANCHOR4
-	add	x2, x0, x1
-	mov	w6, 239
-	mov	w7, 137
-	ldr	x28, [x0,x1]
-	ldrb	w20, [x2,8]
-	lsl	x5, x20, 8
-.L1181:
-	add	x0, x4, :lo12:.LANCHOR4
+	add	x1, x4, x0
+	adrp	x5, .LANCHOR4
+	mov	w7, 239
+	mov	w8, 137
+	ldr	x28, [x4,x0]
+	ldrb	w20, [x1,8]
+	lsl	x6, x20, 8
+.L1231:
+	add	x0, x5, :lo12:.LANCHOR4
 	ldrb	w0, [x0,73]
-	cmp	w23, w0
-	bcs	.L1184
-	add	x22, x28, x5
+	cmp	w27, w0
+	bcs	.L1234
+	add	x26, x28, x6
 	mov	w0, 200
-	str	x4, [x29,96]
-	add	w23, w23, 1
 	str	x5, [x29,104]
-	str	w6, [x22,2056]
-	str	w7, [x22,2052]
 	str	x6, [x29,112]
+	str	w7, [x26,2056]
+	str	w8, [x26,2052]
 	str	x7, [x29,120]
+	str	x8, [x29,128]
 	bl	NandcDelayns
-	str	w23, [x22,2048]
-	mov	w0, w24
-	str	wzr, [x22,2048]
-	mov	w1, w25
-	str	wzr, [x22,2048]
-	mov	x2, x27
-	str	wzr, [x22,2048]
-	mov	x3, x26
+	add	w4, w27, 1
+	str	w4, [x26,2048]
+	str	wzr, [x26,2048]
+	mov	w0, w22
+	str	wzr, [x26,2048]
+	mov	w1, w24
+	str	wzr, [x26,2048]
+	mov	x2, x25
+	mov	x3, x23
+	str	x4, [x29,136]
 	bl	FlashReadRawPage
 	cmn	w0, #1
+	ldr	x4, [x29,136]
+	ldr	x8, [x29,128]
 	ldr	x7, [x29,120]
 	ldr	x6, [x29,112]
 	ldr	x5, [x29,104]
-	ldr	x4, [x29,96]
-	beq	.L1181
-	add	x1, x21, :lo12:.LANCHOR0
+	beq	.L1232
 	cmn	w19, #1
 	csel	w19, w19, w0, ne
-	ldrb	w2, [x1,1944]
-	add	w2, w2, w2, lsl 1
-	cmp	w0, w2, lsr 2
-	bcc	.L1187
-	mov	x26, 0
-	mov	x27, x26
-	b	.L1181
-.L1187:
+	cmp	w0, w21
+	bcc	.L1239
+	mov	x23, 0
+	mov	x25, x23
+.L1232:
+	mov	w27, w4
+	b	.L1231
+.L1239:
 	mov	w19, w0
-.L1184:
+.L1234:
 	add	x20, x28, x20, lsl 8
 	mov	w0, 239
-	add	x21, x21, :lo12:.LANCHOR0
 	str	w0, [x20,2056]
 	mov	w0, 137
 	str	w0, [x20,2052]
 	mov	w0, 200
 	bl	NandcDelayns
 	str	wzr, [x20,2048]
-	ldrb	w0, [x21,1944]
 	str	wzr, [x20,2048]
+	cmp	w19, w21
 	str	wzr, [x20,2048]
-	add	w0, w0, w0, lsl 1
 	str	wzr, [x20,2048]
-	cmp	w19, w0, lsr 2
-	bcc	.L1186
+	bcc	.L1236
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1186:
+.L1236:
+	cmn	w19, #1
+	beq	.L1240
+	cmp	w19, 256
+	bne	.L1237
+.L1240:
+	adrp	x0, .LC91
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC91
+	mov	w2, w24
+	mov	w3, w27
+	mov	w4, w19
+	bl	printk
+.L1237:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 144
 	ret
 	.size	MicronReadRetrial, .-MicronReadRetrial
 	.align	2
@@ -8213,36 +8446,43 @@ HynixReadRetrial:
 	adrp	x21, .LANCHOR0
 	uxtb	x22, w0
 	stp	x27, x28, [sp,80]
-	add	x28, x21, :lo12:.LANCHOR0
 	mov	w27, w1
-	add	x0, x28, 760
-	add	x1, x0, x22
-	mov	w0, w22
+	add	x1, x21, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
 	mov	x26, x2
-	mov	x24, x3
-	ldrb	w20, [x1,12]
+	add	x2, x1, 760
+	ldrb	w25, [x1,762]
+	add	x0, x2, x22
+	ldr	x1, [x1,744]
 	mov	x23, x22
-	ldrb	w25, [x28,762]
+	mov	x24, x3
+	ldrb	w19, [x0,12]
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L1250
+	ldrb	w19, [x0,20]
+.L1250:
+	mov	w0, w23
+	mov	w28, 0
+	mov	w20, -1
 	bl	NandcWaitFlashReady
-	mov	w4, 0
-	mov	w19, -1
-	add	x5, x28, 764
-.L1194:
-	cmp	w4, w25
-	bcs	.L1198
-	add	w20, w20, 1
-	ldrb	w1, [x28,761]
+	add	x4, x21, :lo12:.LANCHOR0
+	add	x5, x4, 764
+.L1251:
+	cmp	w28, w25
+	bcs	.L1255
+	add	w19, w19, 1
+	ldrb	w1, [x4,761]
 	mov	x2, x5
 	mov	w0, w23
-	uxtb	w20, w20
+	uxtb	w19, w19
 	str	x4, [x29,96]
-	cmp	w20, w25
+	cmp	w19, w25
 	str	x5, [x29,104]
-	csel	w20, w20, wzr, cc
-	mov	w3, w20
+	csel	w19, w19, wzr, cc
+	mov	w3, w19
 	bl	HynixSetRRPara
 	mov	w0, w23
 	mov	w1, w27
@@ -8252,33 +8492,43 @@ HynixReadRetrial:
 	cmn	w0, #1
 	ldr	x5, [x29,104]
 	ldr	x4, [x29,96]
-	beq	.L1196
-	ldrb	w1, [x28,1944]
-	cmn	w19, #1
-	csel	w19, w19, w0, ne
+	beq	.L1253
+	ldrb	w1, [x4,1936]
+	cmn	w20, #1
+	csel	w20, w20, w0, ne
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L1201
+	bcc	.L1260
 	mov	x24, 0
 	mov	x26, x24
-.L1196:
-	add	w4, w4, 1
-	b	.L1194
-.L1201:
-	mov	w19, w0
-.L1198:
+.L1253:
+	add	w28, w28, 1
+	b	.L1251
+.L1260:
+	mov	w20, w0
+.L1255:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, 760
+	ldr	x1, [x0,-16]
+	add	x0, x0, x22
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L1257
+	strb	w19, [x0,20]
+	b	.L1258
+.L1257:
+	strb	w19, [x0,12]
+.L1258:
 	add	x21, x21, :lo12:.LANCHOR0
-	add	x22, x21, x22
-	ldrb	w0, [x21,1944]
-	strb	w20, [x22,772]
+	ldrb	w0, [x21,1936]
 	add	w0, w0, w0, lsl 1
-	cmp	w19, w0, lsr 2
-	bcc	.L1200
-	cmn	w19, #1
+	cmp	w20, w0, lsr 2
+	bcc	.L1259
+	cmn	w20, #1
 	mov	w0, 256
-	csel	w19, w19, w0, eq
-.L1200:
-	mov	w0, w19
+	csel	w20, w20, w0, eq
+.L1259:
+	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -8301,21 +8551,21 @@ FlashProgPage:
 	mov	w20, w1
 	mov	x22, x2
 	ldrb	w21, [x0,#:lo12:.LANCHOR1+481]
-	cbnz	w19, .L1208
+	cbnz	w19, .L1267
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x0,9]
 	ldr	w2, [x0,12]
 	mul	w1, w1, w2
 	cmp	w20, w1
-	bcs	.L1208
+	bcs	.L1267
 	ldrb	w0, [x0,8]
-	cbnz	w0, .L1209
+	cbnz	w0, .L1268
 	sub	w21, w21, #2
-	b	.L1208
-.L1209:
+	b	.L1267
+.L1268:
 	mov	w21, 4
-.L1208:
+.L1267:
 	mov	w0, w19
 	str	x4, [x29,56]
 	bl	NandcWaitFlashReady
@@ -8354,19 +8604,19 @@ FlashSavePhyInfo:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
+	adrp	x23, .LANCHOR4
+	adrp	x24, .LANCHOR0
 	stp	x19, x20, [sp,16]
+	add	x19, x23, :lo12:.LANCHOR4
+	add	x20, x24, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	add	x20, x23, :lo12:.LANCHOR0
-	adrp	x22, .LANCHOR4
-	add	x19, x22, :lo12:.LANCHOR4
-	mov	w21, 0
 	stp	x25, x26, [sp,64]
-	ldr	x0, [x20,1856]
+	mov	w21, 0
+	ldr	x0, [x19,32]
 	str	x0, [x19,56]
 	ldrb	w0, [x19,74]
 	bl	FlashBchSel
-	ldr	x0, [x20,1856]
+	ldr	x0, [x19,32]
 	mov	w1, 0
 	mov	w2, 2048
 	bl	ftl_memset
@@ -8381,7 +8631,7 @@ FlashSavePhyInfo:
 	strh	w1, [x0,-4]
 	ldrb	w1, [x20,9]
 	strh	w1, [x0,-2]
-	ldrb	w1, [x20,1864]
+	ldrb	w1, [x20,1856]
 	str	w1, [x0,1060]
 	add	x1, x20, 1620
 	bl	ftl_memcpy
@@ -8424,63 +8674,63 @@ FlashSavePhyInfo:
 	mov	w0, 0
 	mov	w19, w21
 	bl	flash_enter_slc_mode
-.L1213:
-	add	x20, x23, :lo12:.LANCHOR0
+.L1272:
+	add	x22, x24, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w0, 0
-	add	x24, x22, :lo12:.LANCHOR4
+	add	x20, x23, :lo12:.LANCHOR4
 	add	w26, w19, 1
-	ldr	w1, [x20,12]
+	ldr	w1, [x22,12]
 	mul	w1, w19, w1
 	bl	FlashEraseBlock
-	ldr	w1, [x20,12]
+	ldr	w1, [x22,12]
 	mov	x3, 0
-	ldr	x2, [x20,1856]
+	ldr	x2, [x20,32]
 	mov	w0, 0
 	mul	w1, w19, w1
 	bl	FlashProgPage
-	ldr	w1, [x20,12]
+	ldr	w1, [x22,12]
 	mov	x3, 0
-	ldr	x2, [x20,1856]
+	ldr	x2, [x20,32]
 	mov	w0, 0
 	mul	w1, w19, w1
 	add	w1, w1, 1
 	bl	FlashProgPage
-	ldr	w1, [x20,12]
+	ldr	w1, [x22,12]
 	mov	w0, 0
-	ldr	x2, [x24,80]
+	ldr	x2, [x20,80]
 	mov	x3, 0
 	mul	w1, w19, w1
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L1211
-	ldr	x25, [x24,56]
+	beq	.L1270
+	ldr	x25, [x20,56]
 	mov	w0, 20036
 	movk	w0, 0x4e41, lsl 16
 	ldr	w1, [x25]
 	cmp	w1, w0
-	bne	.L1211
+	bne	.L1270
 	mov	w1, 2036
 	add	x0, x25, 12
 	bl	JSHash
 	ldr	w1, [x25,8]
 	cmp	w1, w0
-	bne	.L1211
-	ldr	w0, [x20,12]
+	bne	.L1270
+	ldr	w0, [x22,12]
 	cmp	w21, 1
-	str	w26, [x24,68]
+	str	w26, [x20,68]
 	mul	w19, w19, w0
-	str	w19, [x24,64]
-	beq	.L1214
+	str	w19, [x20,64]
+	beq	.L1273
 	mov	w21, 1
-.L1211:
+.L1270:
 	cmp	w26, 4
 	mov	w19, w26
-	bne	.L1213
-	b	.L1212
-.L1214:
+	bne	.L1272
+	b	.L1271
+.L1273:
 	mov	w21, 2
-.L1212:
+.L1271:
 	mov	w0, 0
 	bl	flash_exit_slc_mode
 	cmp	w21, wzr
@@ -8496,114 +8746,115 @@ FlashSavePhyInfo:
 	.global	FlashReadIdbDataRaw
 	.type	FlashReadIdbDataRaw, %function
 FlashReadIdbDataRaw:
-	stp	x29, x30, [sp, -112]!
+	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
 	stp	x25, x26, [sp,64]
 	mov	x26, x0
 	mov	w0, 60
-	strb	w0, [x29,104]
+	strb	w0, [x29,120]
 	mov	w0, 40
-	strb	w0, [x29,105]
+	strb	w0, [x29,121]
 	mov	w0, 24
 	stp	x19, x20, [sp,16]
-	strb	w0, [x29,106]
+	strb	w0, [x29,122]
 	adrp	x19, .LANCHOR0
 	mov	w0, 16
-	strb	w0, [x29,107]
+	strb	w0, [x29,123]
 	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x27, x28, [sp,80]
-	ldr	w1, [x0,1872]
-	ldrb	w27, [x0,1944]
+	ldr	w1, [x0,1868]
+	ldrb	w27, [x0,1936]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L1220
+	bne	.L1279
 	mov	w0, 0
 	bl	flash_enter_slc_mode
-.L1220:
-	adrp	x24, .LC89
+.L1279:
 	mov	x0, x26
 	mov	w1, 0
 	mov	w2, 2048
+	adrp	x24, .LC92
 	mov	w23, -1
 	mov	w20, 2
-	add	x24, x24, :lo12:.LC89
-	adrp	x28, .LANCHOR4
 	bl	ftl_memset
-.L1221:
+	adrp	x28, .LANCHOR4
+	add	x0, x24, :lo12:.LC92
+	str	x0, [x29,104]
+.L1280:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,9]
 	cmp	w20, w0
-	bcs	.L1225
+	bcs	.L1284
 	mov	x22, 0
-.L1223:
-	add	x0, x29, 104
-	add	x21, x19, :lo12:.LANCHOR0
+.L1282:
+	add	x0, x29, 120
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x21, x28, :lo12:.LANCHOR4
 	ldrb	w25, [x22,x0]
 	mov	w0, w25
 	bl	FlashBchSel
-	ldr	w1, [x21,12]
+	ldr	w1, [x24,12]
 	mov	w0, 0
-	ldr	x2, [x21,1856]
+	ldr	x2, [x21,32]
 	mov	x3, 0
 	mul	w1, w20, w1
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L1222
+	bne	.L1281
 	add	x22, x22, 1
 	cmp	x22, 4
-	bne	.L1223
-	b	.L1224
-.L1222:
-	ldr	x0, [x21,1856]
+	bne	.L1282
+	b	.L1283
+.L1281:
+	ldr	x0, [x21,32]
 	ldr	w1, [x0]
 	mov	w0, 35899
 	movk	w0, 0xfcdc, lsl 16
 	cmp	w1, w0
-	bne	.L1224
+	bne	.L1283
+	ldr	x0, [x29,104]
 	mov	w1, w25
-	mov	x0, x24
 	bl	printk
-	ldr	x1, [x21,1856]
+	ldr	x1, [x21,32]
 	mov	x0, x26
 	mov	w2, 2048
 	bl	ftl_memcpy
-	ldr	x0, [x21,1856]
+	ldr	x0, [x21,32]
 	ldr	w0, [x0,512]
-	strb	w0, [x21,9]
-	add	x0, x28, :lo12:.LANCHOR4
-	ldr	w1, [x0,68]
-	cmp	w1, w20
-	bls	.L1228
+	strb	w0, [x24,9]
+	ldr	w0, [x21,68]
+	cmp	w0, w20
+	bls	.L1287
 	mov	w23, 0
-	str	w20, [x0,68]
+	str	w20, [x21,68]
 	bl	FlashSavePhyInfo
-.L1224:
+.L1283:
 	add	w20, w20, 1
-	b	.L1221
-.L1228:
+	b	.L1280
+.L1287:
 	mov	w23, 0
-.L1225:
+.L1284:
 	mov	w0, w27
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	FlashBchSel
-	ldr	w1, [x19,1872]
+	ldr	w1, [x19,1868]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L1230
+	bne	.L1289
 	mov	w0, 0
 	bl	flash_exit_slc_mode
-.L1230:
+.L1289:
 	mov	w0, w23
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 128
 	ret
 	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
 	.align	2
@@ -8612,328 +8863,359 @@ FlashReadIdbDataRaw:
 FlashInit:
 	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	mov	x22, x0
-	mov	w0, 32768
+	adrp	x21, .LANCHOR4
+	add	x22, x21, :lo12:.LANCHOR4
 	stp	x23, x24, [sp,48]
+	mov	x23, x0
+	mov	w0, 32768
+	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	adrp	x23, .LANCHOR4
 	bl	ftl_malloc
-	add	x21, x23, :lo12:.LANCHOR4
-	str	x0, [x20,1856]
+	str	x0, [x22,32]
 	mov	w0, 32768
-	add	x24, x20, 24
-	adrp	x25, .LC90
-	mov	w28, 0
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	adrp	x25, .LC93
 	bl	ftl_malloc
-	str	x0, [x21,80]
+	str	x0, [x22,80]
 	mov	w0, 4096
-	mov	w27, 144
+	add	x24, x20, 24
+	mov	w27, 0
+	mov	w28, 44
 	bl	ftl_malloc
-	str	x0, [x21,88]
+	str	x0, [x22,88]
 	mov	w0, 32768
 	bl	ftl_malloc
-	str	x0, [x21,96]
+	str	x0, [x22,96]
 	mov	w0, 4096
 	bl	ftl_malloc
-	str	x0, [x21,104]
+	str	x0, [x22,104]
 	mov	w0, 128
 	str	w0, [x20,12]
 	mov	w0, 60
 	mov	w1, 50
-	strb	w0, [x21,74]
-	mov	x0, x22
-	strb	wzr, [x20,1864]
+	strb	w0, [x22,74]
+	mov	x0, x23
+	strb	wzr, [x20,1856]
 	strb	w1, [x20,9]
 	strb	wzr, [x20,8]
 	add	x20, x20, 1620
-	strb	w1, [x21,72]
+	strb	w1, [x22,72]
 	mov	x26, x20
-	str	wzr, [x21,68]
-	str	wzr, [x21,40]
+	str	wzr, [x22,68]
+	str	wzr, [x22,40]
 	bl	NandcInit
-	add	x0, x25, :lo12:.LC90
+	add	x0, x25, :lo12:.LC93
 	str	x0, [x29,104]
-.L1236:
-	uxtb	w25, w28
+.L1296:
+	uxtb	w25, w27
 	mov	w0, w25
 	bl	FlashReset
-	ldrb	w22, [x24,8]
-	ldr	x21, [x24]
+	ldrb	w23, [x24,8]
+	ldr	x22, [x24]
 	mov	w0, w25
-	ubfiz	x22, x22, 8, 8
-	add	x21, x21, x22
+	ubfiz	x23, x23, 8, 8
+	add	x22, x22, x23
 	bl	NandcFlashCs
+	mov	w0, 144
+	str	w0, [x22,2056]
 	mov	w0, 200
-	str	w27, [x21,2056]
-	str	wzr, [x21,2052]
+	str	wzr, [x22,2052]
 	bl	NandcDelayns
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20]
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20,1]
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20,2]
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20,3]
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20,4]
-	ldr	w0, [x21,2048]
+	ldr	w0, [x22,2048]
 	strb	w0, [x20,5]
-	ldr	w0, [x21,2048]
-	strb	w0, [x20,6]
-	ldr	w0, [x21,2048]
-	strb	w0, [x20,7]
 	mov	w0, w25
 	bl	NandcFlashDeCs
 	ldrb	w2, [x20]
 	sub	w0, w2, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L1233
+	bhi	.L1292
 	ldr	x0, [x29,104]
-	add	w1, w28, 1
+	add	w1, w27, 1
 	ldrb	w3, [x20,1]
 	ldrb	w4, [x20,2]
 	ldrb	w5, [x20,3]
 	ldrb	w6, [x20,4]
 	ldrb	w7, [x20,5]
 	bl	printk
-.L1233:
-	cbnz	w28, .L1234
+.L1292:
+	cbnz	w27, .L1293
 	ldrb	w0, [x26]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L1276
+	bhi	.L1341
 	ldrb	w0, [x26,1]
 	cmp	w0, 255
-	beq	.L1276
-.L1234:
-	add	w28, w28, 1
+	beq	.L1341
+.L1293:
+	ldrb	w0, [x20]
+	cmp	w0, 181
+	bne	.L1295
+	strb	w28, [x20]
+.L1295:
+	add	w27, w27, 1
 	add	x24, x24, 16
-	cmp	w28, 4
+	cmp	w27, 4
 	add	x20, x20, 8
-	bne	.L1236
+	bne	.L1296
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,1620]
 	cmp	w1, 173
-	beq	.L1237
-	ldr	w0, [x0,1868]
+	beq	.L1297
+	ldr	w0, [x0,1860]
 	bl	NandcSetDdrMode
-.L1237:
+.L1297:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	add	x0, x20, 760
 	mov	w2, 852
+	add	x0, x20, 760
 	bl	ftl_memset
 	strb	wzr, [x20,16]
-	ldrb	w2, [x20,1621]
 	adrp	x1, .LANCHOR1
+	ldrb	w2, [x20,1621]
 	add	x0, x1, :lo12:.LANCHOR1
-	cmp	w2, 218
 	add	x0, x0, 472
-	cset	w3, eq
 	str	x0, [x20,744]
-	add	x20, x20, 1620
-	cbnz	w3, .L1238
+	add	w0, w2, 38
+	and	w0, w0, -3
+	uxtb	w0, w0
+	cbz	w0, .L1343
 	cmp	w2, 241
-	beq	.L1238
-	cmp	w2, 220
-	bne	.L1239
-	ldrb	w0, [x20,3]
-	cmp	w0, 149
-	bne	.L1239
-.L1238:
+	bne	.L1298
+.L1343:
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w4, 1
-	mov	w5, 16
-	strb	w4, [x0,8]
-	add	x4, x23, :lo12:.LANCHOR4
-	strb	w5, [x0,9]
-	ldrb	w0, [x0,1620]
-	strb	w5, [x4,74]
+	mov	w3, 1
+	mov	w4, 16
 	add	x5, x1, :lo12:.LANCHOR1
+	strb	w3, [x0,8]
+	add	x3, x21, :lo12:.LANCHOR4
+	strb	w4, [x0,9]
+	strb	w4, [x3,74]
+	add	x4, x0, 1620
+	ldrb	w0, [x0,1620]
+	strb	w0, [x5,2977]
 	cmp	w0, 152
-	strb	w0, [x5,2969]
-	bne	.L1240
+	bne	.L1300
+	ldrsb	w0, [x4,4]
+	tbnz	w0, #31, .L1300
 	mov	w0, 24
-	strb	w0, [x4,74]
-.L1240:
-	cbz	w3, .L1241
+	strb	w0, [x3,74]
+.L1300:
+	cmp	w2, 218
+	bne	.L1301
 	add	x0, x1, :lo12:.LANCHOR1
 	mov	w2, 2048
-	strh	w2, [x0,2982]
+	strh	w2, [x0,2990]
 	mov	w2, -38
-	b	.L1307
-.L1241:
+	b	.L1376
+.L1301:
 	cmp	w2, 220
-	bne	.L1242
+	bne	.L1302
 	add	x0, x1, :lo12:.LANCHOR1
 	mov	w2, 4096
-	strh	w2, [x0,2982]
+	strh	w2, [x0,2990]
 	mov	w2, -36
-.L1307:
-	strb	w2, [x0,2970]
-.L1242:
+.L1376:
+	strb	w2, [x0,2978]
+.L1302:
 	add	x20, x1, :lo12:.LANCHOR1
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x20, 2872
+	add	x1, x20, 2848
 	mov	w2, 32
 	add	x0, x0, 88
 	bl	ftl_memcpy
 	add	x0, x20, 472
-	add	x1, x20, 2968
+	add	x1, x20, 2976
 	mov	w2, 32
 	bl	ftl_memcpy
-.L1239:
+.L1298:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x20,8]
-	cbnz	w0, .L1243
+	cbnz	w0, .L1303
 	bl	FlashLoadPhyInfoInRam
-	cbnz	w0, .L1245
+	cbnz	w0, .L1305
 	ldr	x0, [x20,744]
 	ldrb	w1, [x0,17]
 	and	w0, w1, 7
 	strb	w0, [x20,1844]
-	tbnz	x1, 0, .L1245
+	tbnz	x1, 0, .L1305
 	mov	w1, 1
-	strb	w1, [x20,1864]
+	strb	w1, [x20,1856]
 	bl	FlashSetInterfaceMode
 	ldrb	w0, [x20,1844]
 	bl	NandcSetMode
-.L1245:
+.L1305:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldr	x0, [x20,744]
 	ldrb	w0, [x0,26]
 	strb	w0, [x20,120]
 	bl	FlashLoadPhyInfo
-	cbz	w0, .L1243
-	ldr	w0, [x20,1868]
-	cbz	w0, .L1248
+	cbz	w0, .L1303
+	ldr	w0, [x20,1860]
+	cbz	w0, .L1308
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
-	b	.L1308
-.L1248:
+	b	.L1377
+.L1308:
 	ldrb	w0, [x20,1844]
 	bl	FlashSetInterfaceMode
 	ldrb	w0, [x20,1844]
-.L1308:
+.L1377:
 	bl	NandcSetMode
 	bl	FlashLoadPhyInfo
-	cbz	w0, .L1243
+	cbz	w0, .L1303
 	mov	w0, 1
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
 	ldr	x1, [x20,744]
-	adrp	x0, .LC91
-	add	x0, x0, :lo12:.LC91
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
 	ldrh	w1, [x1,14]
 	bl	printk
 	bl	FlashLoadPhyInfoInRam
 	cmn	w0, #1
-	beq	.L1235
+	beq	.L1294
 	bl	FlashDieInfoInit
 	ldr	x0, [x20,744]
 	ldrb	w0, [x0,19]
 	bl	FlashGetReadRetryDefault
-	adrp	x1, .LANCHOR2+2022
+	adrp	x1, .LANCHOR2+2014
 	ldr	x0, [x20,744]
-	ldrh	w1, [x1,#:lo12:.LANCHOR2+2022]
+	ldrh	w1, [x1,#:lo12:.LANCHOR2+2014]
 	ldrb	w2, [x0,9]
 	add	w1, w1, 4095
 	cmp	w2, w1, lsr 12
-	blt	.L1250
+	blt	.L1310
 	ldrh	w1, [x0,14]
 	add	w1, w1, 255
 	cmp	w2, w1, lsr 8
-	bge	.L1251
-.L1250:
+	bge	.L1311
+.L1310:
 	ldrh	w1, [x0,14]
 	and	w1, w1, -256
 	strh	w1, [x0,14]
-.L1251:
+.L1311:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,1844]
 	tst	w0, 6
-	beq	.L1252
+	beq	.L1312
 	bl	FlashSavePhyInfo
-	add	x1, x23, :lo12:.LANCHOR4
+	add	x1, x21, :lo12:.LANCHOR4
 	mov	w0, 0
 	ldr	w1, [x1,64]
 	bl	FlashDdrParaScan
-.L1252:
+.L1312:
 	bl	FlashSavePhyInfo
-.L1243:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x3, [x1,744]
-	ldrh	w0, [x3,16]
-	ldrb	w4, [x3,26]
-	ubfx	x2, x0, 7, 1
-	strb	w2, [x1,16]
-	add	x2, x23, :lo12:.LANCHOR4
-	ubfx	x5, x0, 3, 1
-	strb	w4, [x1,120]
-	strb	w5, [x2,112]
-	ubfx	x5, x0, 4, 1
-	str	xzr, [x2,48]
-	strb	w5, [x1,1945]
-	ubfx	x5, x0, 8, 3
-	strb	w5, [x1,1844]
-	tbz	x0, 6, .L1254
-	ldrb	w0, [x3,19]
-	ldrb	w5, [x1,762]
-	strb	w5, [x2,73]
-	sub	w5, w0, #1
-	ldrb	w6, [x1,761]
-	uxtb	w5, w5
-	strb	w0, [x1,752]
-	strb	w6, [x1,753]
-	cmp	w5, 5
-	bhi	.L1255
-	sub	w0, w0, #5
-	adrp	x5, HynixReadRetrial
-	add	x5, x5, :lo12:HynixReadRetrial
-	str	x5, [x2,48]
-	uxtb	w0, w0
-	cmp	w0, 1
-	bhi	.L1254
-	mov	w0, 1
-	str	w0, [x1,1936]
-	b	.L1254
-.L1255:
+.L1303:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR4
+	ldr	x2, [x20,744]
+	str	xzr, [x22,48]
+	ldrb	w0, [x2,26]
+	strb	w0, [x20,120]
+	ldrh	w0, [x2,16]
+	ldrh	w3, [x2,10]
+	ubfx	x1, x0, 7, 1
+	strb	w1, [x20,16]
+	ubfx	x1, x0, 3, 1
+	strb	w1, [x22,112]
+	ubfx	x1, x0, 4, 1
+	strb	w1, [x20,1937]
+	ldrb	w1, [x2,12]
+	ubfx	x0, x0, 8, 3
+	strb	w0, [x20,1844]
+	ldrb	w0, [x2,18]
+	sdiv	w1, w3, w1
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	x0, [x20,744]
+	ldrh	w1, [x0,16]
+	tbz	x1, 6, .L1314
+	ldrb	w0, [x0,19]
+	ldrb	w1, [x20,762]
+	strb	w1, [x22,73]
+	sub	w1, w0, #1
+	ldrb	w2, [x20,761]
+	uxtb	w1, w1
+	strb	w0, [x20,752]
+	strb	w2, [x20,753]
+	cmp	w1, 6
+	bhi	.L1315
+	adrp	x1, HynixReadRetrial
+	add	x1, x1, :lo12:HynixReadRetrial
+	str	x1, [x22,48]
+	sub	w1, w0, #5
+	uxtb	w1, w1
+	cmp	w1, 1
+	bhi	.L1316
+	mov	w1, 1
+	str	w1, [x20,1928]
+	b	.L1317
+.L1316:
+	cmp	w0, 7
+	add	x20, x20, 788
+	beq	.L1318
+.L1317:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 780
+.L1318:
+	mov	x1, 0
+	mov	w2, w1
+.L1320:
+	ldrsb	w3, [x20,x1]
+	add	x1, x1, 1
+	cmp	w3, wzr
+	csinc	w2, w2, w2, ne
+	cmp	x1, 32
+	bne	.L1320
+	cmp	w2, 27
+	bls	.L1314
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L1314
+.L1315:
 	sub	w1, w0, #17
 	uxtb	w1, w1
 	cmp	w1, 2
-	bhi	.L1257
+	bhi	.L1322
 	adrp	x1, MicronReadRetrial
 	cmp	w0, 19
 	add	x1, x1, :lo12:MicronReadRetrial
-	str	x1, [x2,48]
-	beq	.L1258
+	str	x1, [x22,48]
+	beq	.L1323
 	mov	w0, 7
-	b	.L1309
-.L1258:
+	b	.L1378
+.L1323:
 	mov	w0, 15
-.L1309:
-	strb	w0, [x2,73]
-	b	.L1254
-.L1257:
+.L1378:
+	strb	w0, [x22,73]
+	b	.L1314
+.L1322:
 	sub	w1, w0, #65
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L1277
+	bls	.L1344
 	cmp	w0, 33
-	bne	.L1259
-.L1277:
-	add	x0, x23, :lo12:.LANCHOR4
+	bne	.L1324
+.L1344:
+	add	x0, x21, :lo12:.LANCHOR4
 	adrp	x1, ToshibaReadRetrial
 	add	x1, x1, :lo12:ToshibaReadRetrial
 	mov	w2, 4
@@ -8942,99 +9224,94 @@ FlashInit:
 	strb	w2, [x1,753]
 	mov	w1, 7
 	strb	w1, [x0,73]
-	b	.L1254
-.L1259:
+	b	.L1314
+.L1324:
 	sub	w1, w0, #67
 	uxtb	w1, w1
 	cmp	w1, 1
 	sub	w1, w0, #34
-	cset	w5, ls
+	cset	w2, ls
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L1278
-	cbz	w5, .L1261
-.L1278:
-	add	x2, x23, :lo12:.LANCHOR4
+	bls	.L1345
+	cbz	w2, .L1326
+.L1345:
+	add	x3, x21, :lo12:.LANCHOR4
 	adrp	x1, ToshibaReadRetrial
 	add	x1, x1, :lo12:ToshibaReadRetrial
 	cmp	w0, 35
-	str	x1, [x2,48]
-	beq	.L1263
+	str	x1, [x3,48]
+	beq	.L1328
 	cmp	w0, 68
-	beq	.L1263
+	beq	.L1328
 	mov	w0, 7
-	strb	w0, [x2,73]
-	b	.L1264
-.L1263:
-	add	x0, x23, :lo12:.LANCHOR4
+	strb	w0, [x3,73]
+	b	.L1329
+.L1328:
+	add	x0, x21, :lo12:.LANCHOR4
 	mov	w1, 17
 	strb	w1, [x0,73]
-.L1264:
+.L1329:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 4
-	cbnz	w5, .L1310
+	cbnz	w2, .L1379
 	mov	w1, 5
-.L1310:
+.L1379:
 	strb	w1, [x0,753]
-	b	.L1254
-.L1261:
+	b	.L1314
+.L1326:
 	cmp	w0, 49
-	bne	.L1254
+	bne	.L1314
 	adrp	x0, SamsungReadRetrial
 	add	x0, x0, :lo12:SamsungReadRetrial
-	str	x0, [x2,48]
-.L1254:
+	str	x0, [x22,48]
+.L1314:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w1, [x0,1872]
-	mov	w0, 12336
-	movk	w0, 0x5638, lsl 16
-	cmp	w1, w0
-	bne	.L1266
-	cbz	w4, .L1266
-	strb	wzr, [x3,18]
-.L1266:
-	ldrh	w2, [x3,10]
-	ldrb	w1, [x3,12]
-	ldrb	w0, [x3,18]
-	sdiv	w1, w2, w1
-	bl	BuildFlashLsbPageTable
-	bl	FlashDieInfoInit
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	ldr	w2, [x0,1868]
+	cmp	w2, w1
+	bne	.L1331
+	ldrb	w1, [x0,120]
+	cbz	w1, .L1331
+	ldr	x0, [x0,744]
+	strb	wzr, [x0,18]
+.L1331:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,1620]
 	cmp	w1, 44
-	bne	.L1267
-	ldrb	w1, [x0,1864]
-	cbz	w1, .L1267
-	ldr	w2, [x0,1872]
+	bne	.L1332
+	ldrb	w1, [x0,1856]
+	cbz	w1, .L1332
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L1268
+	bne	.L1333
 	ldrb	w0, [x0,120]
-	cbnz	w0, .L1267
-.L1268:
+	cbnz	w0, .L1332
+.L1333:
 	add	x0, x19, :lo12:.LANCHOR0
-	strb	wzr, [x0,1864]
+	strb	wzr, [x0,1856]
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-.L1267:
+.L1332:
 	mov	w0, 0
 	bl	flash_enter_slc_mode
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x1,1844]
 	tst	w0, 6
-	beq	.L1269
-	ldrb	w1, [x1,1864]
-	cbnz	w1, .L1270
-	tbnz	x0, 0, .L1269
-.L1270:
-	add	x1, x23, :lo12:.LANCHOR4
+	beq	.L1334
+	ldrb	w1, [x1,1856]
+	cbnz	w1, .L1335
+	tbnz	x0, 0, .L1334
+.L1335:
+	add	x1, x21, :lo12:.LANCHOR4
 	mov	w0, 0
 	ldr	w1, [x1,64]
 	bl	FlashDdrParaScan
-.L1269:
+.L1334:
 	mov	w0, 0
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	flash_exit_slc_mode
@@ -9043,25 +9320,25 @@ FlashInit:
 	bl	FlashBchSel
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
-	add	x0, x0, 2336
+	add	x0, x0, 2328
 	bl	FlashReadIdbDataRaw
-	cbnz	w0, .L1271
-	add	x23, x23, :lo12:.LANCHOR4
+	cbnz	w0, .L1336
+	add	x21, x21, :lo12:.LANCHOR4
 	ldrb	w1, [x20,9]
-	ldrb	w0, [x23,72]
+	ldrb	w0, [x21,72]
 	cmp	w1, w0
-	bls	.L1272
+	bls	.L1337
 	strb	w0, [x20,9]
-.L1272:
+.L1337:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,9]
 	cmp	w0, 15
-	bhi	.L1273
-.L1271:
+	bhi	.L1338
+.L1336:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 16
 	strb	w1, [x0,9]
-.L1273:
+.L1338:
 	mov	w0, 18928
 	add	x19, x19, :lo12:.LANCHOR0
 	movk	w0, 0x2, lsl 16
@@ -9098,7 +9375,7 @@ FlashInit:
 	ldrb	w5, [x19,8]
 	strh	w2, [x19,190]
 	cmp	w5, 1
-	bne	.L1274
+	bne	.L1339
 	lsl	w2, w2, 1
 	mov	w5, 16
 	lsr	w4, w4, 1
@@ -9109,15 +9386,15 @@ FlashInit:
 	strh	w4, [x19,182]
 	strh	w3, [x19,188]
 	strh	w2, [x19,194]
-.L1274:
+.L1339:
 	ldrb	w0, [x1,20]
 	bl	FlashBchSel
 	bl	FlashSuspend
 	mov	w0, 0
-	b	.L1235
-.L1276:
+	b	.L1294
+.L1341:
 	mov	w0, -2
-.L1235:
+.L1294:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9128,148 +9405,74 @@ FlashInit:
 	.size	FlashInit, .-FlashInit
 	.align	2
 	.global	FlashPageProgMsbFFData
-	.type	FlashPageProgMsbFFData, %function
-FlashPageProgMsbFFData:
-	stp	x29, x30, [sp, -112]!
-	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
-	stp	x21, x22, [sp,32]
-	uxtb	w21, w0
-	add	x0, x23, :lo12:.LANCHOR0
-	stp	x19, x20, [sp,16]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	uxth	w22, w2
-	ldr	x2, [x0,744]
-	ldrb	w24, [x2,19]
-	ldrb	w2, [x0,120]
-	cbz	w2, .L1312
-	ldr	w2, [x0,1872]
-	mov	w0, 12336
-	movk	w0, 0x5638, lsl 16
-	cmp	w2, w0
-	beq	.L1311
-.L1312:
-	sub	w0, w24, #5
-	uxtb	w0, w0
-	cmp	w0, 1
-	bls	.L1314
-	cmp	w24, 68
-	beq	.L1314
-	cmp	w24, 35
-	beq	.L1314
-	sub	w0, w24, #17
-	uxtb	w0, w0
-	cmp	w0, 2
-	bhi	.L1311
-.L1314:
-	mov	w27, w1
-	sub	w24, w24, #17
-	add	x23, x23, :lo12:.LANCHOR0
-	add	x26, x23, 24
-	add	x26, x26, x21, sxtw 4
-.L1317:
-	ldr	x0, [x23,744]
-	ldrh	w0, [x0,10]
-	cmp	w0, w22
-	bls	.L1311
-	adrp	x0, .LANCHOR2
-	add	x0, x0, :lo12:.LANCHOR2
-	add	x0, x0, 996
-	ldrh	w1, [x0,w22,sxtw 1]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L1311
-	adrp	x25, .LANCHOR4
-	mov	w1, 255
-	add	x19, x25, :lo12:.LANCHOR4
-	mov	w2, 32768
-	ldr	x0, [x19,80]
-	bl	ftl_memset
-	uxtb	w0, w24
-	cmp	w0, 1
-	bhi	.L1318
-	adrp	x28, .LANCHOR1
-	add	x28, x28, :lo12:.LANCHOR1
-	ldr	w1, [x28,3000]
-	cbz	w1, .L1319
-	ldrb	w20, [x26,8]
-	mov	w0, w21
-	ldr	x19, [x26]
-	ubfiz	x20, x20, 8, 8
-	str	x1, [x29,104]
-	add	x19, x19, x20
-	bl	NandcFlashCs
-	mov	w0, 239
-	mov	w20, 146
-	str	w0, [x19,2056]
-	mov	w0, w21
-	str	w20, [x19,2052]
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
-	bl	NandcFlashDeCs
-	ldr	x1, [x29,104]
-	cmp	w1, 1
-	bne	.L1320
-	mov	w0, w21
-	bl	NandcFlashCs
-	mov	w0, 238
-	str	w0, [x19,2056]
-	str	w20, [x19,2052]
-	mov	w0, 2000
-	bl	NandcDelayns
-	ldr	w20, [x19,2048]
-	mov	w0, w21
-	uxtb	w20, w20
-	bl	NandcFlashDeCs
-	cbnz	w20, .L1321
-	mov	w0, 2
-	str	w0, [x28,3000]
-	b	.L1320
-.L1321:
-	str	wzr, [x28,3000]
-	b	.L1311
-.L1320:
-	add	x25, x25, :lo12:.LANCHOR4
-	add	w1, w22, w27
-	mov	x3, 0
-	mov	w0, w21
-	ldr	x2, [x25,80]
-	bl	FlashProgPage
-	mov	w0, w21
-	bl	NandcFlashCs
-	mov	w0, 239
-	str	w0, [x19,2056]
-	mov	w0, 146
-	str	w0, [x19,2052]
-	mov	w0, 1
-	str	w0, [x19,2048]
-	str	wzr, [x19,2048]
-	mov	w0, w21
-	str	wzr, [x19,2048]
-	str	wzr, [x19,2048]
-	bl	NandcFlashDeCs
-	b	.L1319
-.L1318:
-	ldr	x2, [x19,80]
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w19, w2
+	adrp	x2, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x23, x2
+	ldr	x3, [x0,744]
+	ldrb	w4, [x0,120]
+	ldrb	w3, [x3,19]
+	cbz	w4, .L1381
+	ldr	w2, [x0,1868]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w2, w0
+	beq	.L1380
+.L1381:
+	sub	w2, w3, #5
+	uxtb	w2, w2
+	cmp	w2, 2
+	bls	.L1382
+	cmp	w3, 68
+	beq	.L1382
+	sub	w3, w3, #19
+	and	w3, w3, -17
+	uxtb	w3, w3
+	cbnz	w3, .L1380
+.L1382:
+	adrp	x20, .LANCHOR2
+	mov	w24, w1
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w25, 65535
+	add	x20, x20, 988
+	adrp	x26, .LANCHOR4
+.L1384:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x0, [x0,744]
+	ldrh	w0, [x0,10]
+	cmp	w0, w19
+	bls	.L1380
+	ldrh	w0, [x20,w19,sxtw 1]
+	cmp	w0, w25
+	bne	.L1380
+	add	x22, x26, :lo12:.LANCHOR4
+	mov	w1, 255
+	mov	w2, 32768
+	ldr	x0, [x22,80]
+	bl	ftl_memset
+	ldr	x2, [x22,80]
+	add	w1, w19, w24
 	mov	w0, w21
-	add	w1, w22, w27
 	mov	x3, 0
+	add	w19, w19, 1
 	bl	FlashProgPage
-.L1319:
-	add	w22, w22, 1
-	uxth	w22, w22
-	b	.L1317
-.L1311:
+	uxth	w19, w19
+	b	.L1384
+.L1380:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 80
 	ret
 	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
 	.align	2
@@ -9284,8 +9487,8 @@ FlashReadSlc2KPages:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	adrp	x21, .LANCHOR0
-	adrp	x23, .LC92
-	adrp	x24, .LC94
+	adrp	x23, .LC95
+	adrp	x24, .LC97
 	ldrb	w26, [x1,#:lo12:.LANCHOR1+481]
 	stp	x19, x20, [sp,16]
 	stp	x27, x28, [sp,80]
@@ -9293,11 +9496,11 @@ FlashReadSlc2KPages:
 	mov	w27, w2
 	mov	w22, 0
 	add	x21, x21, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LC92
-	add	x24, x24, :lo12:.LC94
-.L1333:
+	add	x23, x23, :lo12:.LC95
+	add	x24, x24, :lo12:.LC97
+.L1390:
 	cmp	w22, w25
-	beq	.L1367
+	beq	.L1424
 	mov	w1, w27
 	sub	w4, w25, w22
 	mov	x0, x19
@@ -9308,11 +9511,11 @@ FlashReadSlc2KPages:
 	adrp	x5, .LANCHOR0
 	ldrb	w1, [x21,1845]
 	cmp	w0, w1
-	bcc	.L1334
+	bcc	.L1391
 	mov	w0, -1
 	str	w0, [x19]
-	b	.L1335
-.L1334:
+	b	.L1392
+.L1391:
 	add	x0, x21, x0, uxtw
 	ldrb	w28, [x0,1848]
 	str	x5, [x29,96]
@@ -9358,61 +9561,61 @@ FlashReadSlc2KPages:
 	add	x0, x5, :lo12:.LANCHOR0
 	cmp	w20, w6
 	csel	w3, w20, w6, cs
-	ldrb	w0, [x0,1944]
+	ldrb	w0, [x0,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w3, w0, lsr 2
-	bls	.L1338
+	bls	.L1395
 	cmn	w3, #1
 	mov	w0, 256
 	csel	w3, w3, w0, eq
-.L1338:
+.L1395:
 	cmp	w3, 256
-	beq	.L1349
+	beq	.L1406
 	cmn	w3, #1
-	bne	.L1339
-.L1349:
+	bne	.L1396
+.L1406:
 	str	w3, [x19]
-	b	.L1341
-.L1339:
+	b	.L1398
+.L1396:
 	str	wzr, [x19]
-.L1341:
+.L1398:
 	ldr	x0, [x19,16]
-	cbz	x0, .L1342
+	cbz	x0, .L1399
 	ldr	w1, [x0,8]
 	cmn	w1, #1
-	bne	.L1342
+	bne	.L1399
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L1342
+	beq	.L1399
 	str	w1, [x19]
-.L1342:
+.L1399:
 	ldr	w3, [x19]
 	cmn	w3, #1
-	bne	.L1335
+	bne	.L1392
 	add	x5, x5, :lo12:.LANCHOR0
 	ldr	w1, [x19,4]
 	mov	x0, x23
-	ldrb	w2, [x5,1944]
+	ldrb	w2, [x5,1936]
 	bl	printk
 	ldr	x1, [x19,8]
-	cbz	x1, .L1344
-	adrp	x0, .LC93
+	cbz	x1, .L1401
+	adrp	x0, .LC96
 	mov	w2, 4
-	add	x0, x0, :lo12:.LC93
+	add	x0, x0, :lo12:.LC96
 	mov	w3, 8
 	bl	rknand_print_hex
-.L1344:
+.L1401:
 	ldr	x1, [x19,16]
-	cbz	x1, .L1335
+	cbz	x1, .L1392
 	mov	w2, 4
 	mov	x0, x24
 	mov	w3, w2
 	bl	rknand_print_hex
-.L1335:
+.L1392:
 	add	w22, w22, 1
 	add	x19, x19, 56
-	b	.L1333
-.L1367:
+	b	.L1390
+.L1424:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -9432,328 +9635,361 @@ FlashReadPages:
 	stp	x21, x22, [sp,32]
 	ldrb	w3, [x3,#:lo12:.LANCHOR1+481]
 	adrp	x22, .LANCHOR0
-	str	w3, [x29,156]
+	str	w3, [x29,148]
 	add	x3, x22, :lo12:.LANCHOR0
 	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
 	stp	x27, x28, [sp,80]
-	str	w1, [x29,152]
-	mov	x25, x0
+	str	w1, [x29,144]
+	mov	x26, x0
 	ldrb	w4, [x3,16]
 	ldrb	w23, [x3,8]
 	str	w2, [x29,140]
 	str	w4, [x29,136]
-	cbz	w23, .L1404
+	cbz	w23, .L1465
 	bl	FlashReadSlc2KPages
-	b	.L1450
-.L1404:
-	adrp	x0, .LC92
+	b	.L1514
+.L1465:
+	adrp	x0, .LC95
 	mov	w24, w23
-	add	x0, x0, :lo12:.LC92
+	add	x0, x0, :lo12:.LC95
 	str	x0, [x29,128]
-	adrp	x0, .LC94
-	add	x0, x0, :lo12:.LC94
+	adrp	x0, .LC97
+	add	x0, x0, :lo12:.LC97
 	str	x0, [x29,120]
-	adrp	x0, .LC95
-	add	x0, x0, :lo12:.LC95
+	adrp	x0, .LC98
+	add	x0, x0, :lo12:.LC98
 	str	x0, [x29,112]
-.L1369:
-	ldr	w0, [x29,152]
+.L1426:
+	ldr	w0, [x29,144]
 	cmp	w24, w0
-	bcs	.L1452
+	bcs	.L1516
 	mov	w27, 56
-	ldr	w0, [x29,152]
+	ldr	w0, [x29,144]
 	ldr	w1, [x29,140]
 	add	x2, x29, 172
 	umull	x27, w24, w27
 	sub	w4, w0, w24
 	add	x3, x29, 168
-	add	x21, x25, x27
+	add	x21, x26, x27
 	mov	x0, x21
 	ldr	w28, [x21,4]
 	bl	LogAddr2PhyAddr
-	add	x2, x22, :lo12:.LANCHOR0
-	mov	w19, w0
+	add	x1, x22, :lo12:.LANCHOR0
+	mov	w20, w0
 	ldr	w0, [x29,168]
-	ldrb	w1, [x2,1845]
-	cmp	w0, w1
-	bcc	.L1371
+	ldrb	w2, [x1,1845]
+	cmp	w0, w2
+	bcc	.L1428
 	mov	w0, -1
-	str	w0, [x25,x27]
-	b	.L1372
-.L1371:
-	add	x0, x2, x0, uxtw
-	adrp	x26, .LANCHOR4
-	ldrb	w20, [x0,1848]
-	add	x0, x26, :lo12:.LANCHOR4
-	str	x2, [x29,144]
+	str	w0, [x26,x27]
+	b	.L1429
+.L1428:
+	add	x0, x1, x0, uxtw
+	adrp	x25, .LANCHOR4
+	ldrb	w19, [x0,1848]
+	add	x0, x25, :lo12:.LANCHOR4
+	str	x1, [x29,152]
 	ldrb	w0, [x0,112]
 	cmp	w0, wzr
-	mov	w0, w20
-	csel	w19, w19, wzr, ne
+	mov	w0, w19
+	csel	w20, w20, wzr, ne
 	bl	NandcWaitFlashReady
-	ldr	x2, [x29,144]
-	ldr	x0, [x2,744]
-	ldrb	w0, [x0,19]
-	sub	w0, w0, #1
+	ldr	x1, [x29,152]
+	ldr	x0, [x1,744]
+	ldrb	w2, [x0,19]
+	sub	w0, w2, #1
 	uxtb	w0, w0
-	cmp	w0, 5
-	bhi	.L1374
-	sxtw	x0, w20
-	add	x1, x2, 760
-	add	x3, x1, x0
+	cmp	w0, 6
+	bhi	.L1431
+	add	x1, x1, 760
+	sxtw	x0, w19
+	add	x1, x1, x0
+	cmp	w2, 7
+	ldrb	w3, [x1,12]
+	bne	.L1432
+	ldrb	w3, [x1,20]
+.L1432:
+	add	x2, x22, :lo12:.LANCHOR0
 	add	x0, x2, x0
-	ldrb	w3, [x3,12]
 	ldrb	w0, [x0,1616]
 	cmp	w0, w3
-	beq	.L1374
+	beq	.L1431
 	ldrb	w1, [x2,761]
-	mov	w0, w20
+	mov	w0, w19
 	add	x2, x2, 764
 	bl	HynixSetRRPara
-.L1374:
-	mov	w0, w20
+.L1431:
+	mov	w0, w19
 	bl	NandcFlashCs
 	ldr	w0, [x29,140]
 	cmp	w0, 1
 	cset	w0, eq
 	orr	w0, w0, w28, lsr 31
-	str	w0, [x29,144]
-	cbz	w0, .L1381
+	str	w0, [x29,152]
+	cbz	w0, .L1433
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbz	w0, .L1381
-	mov	w0, w20
+	cbz	w0, .L1433
+	mov	w0, w19
 	bl	flash_enter_slc_mode
-.L1381:
-	cmp	w20, 255
+	b	.L1434
+.L1433:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L1434:
+	cmp	w19, 255
 	ldr	w1, [x29,172]
-	bne	.L1409
+	bne	.L1472
 	cmn	w1, #1
 	cset	w0, ne
-	cbz	w0, .L1405
-.L1409:
-	cbz	w19, .L1378
+	cbz	w0, .L1466
+.L1472:
+	cbz	w20, .L1438
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w2, [x0,12]
-	mov	w0, w20
+	mov	w0, w19
 	add	w2, w1, w2
 	bl	FlashReadDpCmd
-	b	.L1379
-.L1378:
-	mov	w0, w20
+	b	.L1439
+.L1438:
+	mov	w0, w19
 	bl	FlashReadCmd
-	b	.L1379
-.L1405:
-	mov	w19, w0
-.L1376:
-	ldrb	w2, [x29,156]
-	mov	w0, w20
+	b	.L1439
+.L1466:
+	mov	w20, w0
+.L1436:
+	ldrb	w2, [x29,148]
+	mov	w0, w19
 	ldr	x3, [x21,8]
 	mov	w1, 0
 	ldr	x4, [x21,16]
 	bl	NandcXferData
 	cmn	w0, #1
 	mov	w28, w0
-	bne	.L1380
+	bne	.L1440
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x0,16]
-	cbz	w1, .L1380
+	cbz	w1, .L1440
 	strb	wzr, [x0,16]
-	mov	w19, 0
-	b	.L1381
-.L1380:
-	cbz	w19, .L1382
+	mov	w20, 0
+	b	.L1434
+.L1440:
+	cbz	w20, .L1441
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w1, [x29,172]
 	ldr	w2, [x0,12]
-	mov	w0, w20
+	mov	w0, w19
 	add	w1, w2, w1
 	bl	FlashReadDpDataOutCmd
 	add	w0, w24, 1
 	mov	w4, 56
-	ldrb	w2, [x29,156]
+	ldrb	w2, [x29,148]
 	mov	w1, 0
 	umull	x4, w0, w4
-	mov	w0, w20
-	add	x4, x25, x4
+	mov	w0, w19
+	add	x4, x26, x4
 	ldr	x3, [x4,8]
 	ldr	x4, [x4,16]
 	bl	NandcXferData
 	cmn	w0, #1
 	mov	w23, w0
-	csel	w19, w19, wzr, ne
-.L1382:
-	mov	w0, w20
+	csel	w20, w20, wzr, ne
+.L1441:
+	mov	w0, w19
 	bl	NandcFlashDeCs
 	add	x6, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x29,136]
 	cmn	w28, #1
 	strb	w0, [x6,16]
-	bne	.L1389
-	ldrb	w0, [x6,1864]
-	cbnz	w0, .L1384
-.L1388:
-	add	x0, x26, :lo12:.LANCHOR4
-	ldr	x19, [x0,48]
-	cbnz	x19, .L1385
-	b	.L1453
-.L1384:
+	bne	.L1448
+	ldrb	w0, [x6,1856]
+	cbnz	w0, .L1443
+.L1447:
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	x20, [x0,48]
+	cbnz	x20, .L1444
+	b	.L1517
+.L1443:
 	ldr	x0, [x6,128]
 	mov	w4, 1
 	ldr	w1, [x29,172]
 	ldr	x2, [x21,8]
 	ldr	x3, [x21,16]
-	ldr	w19, [x0,304]
-	mov	w0, w20
+	ldr	w20, [x0,304]
+	mov	w0, w19
 	str	x6, [x29,104]
 	bl	FlashDdrTunningRead
 	cmn	w0, #1
 	mov	w28, w0
-	beq	.L1387
+	beq	.L1446
 	ldr	x6, [x29,104]
-	ldrb	w0, [x6,1944]
+	ldrb	w0, [x6,1936]
 	cmp	w28, w0, lsr 1
-	bls	.L1407
-.L1387:
-	lsr	w0, w19, 8
+	bls	.L1468
+.L1446:
+	lsr	w0, w20, 8
 	bl	NandcSetDdrPara
 	cmn	w28, #1
-	beq	.L1388
-	b	.L1407
-.L1385:
+	beq	.L1447
+	b	.L1468
+.L1444:
 	ldr	w1, [x29,172]
-	mov	w0, w20
+	mov	w0, w19
 	ldr	x2, [x21,8]
 	ldr	x3, [x21,16]
-	blr	x19
+	blr	x20
 	cmn	w0, #1
 	mov	w28, w0
-	mov	w19, 0
-	bne	.L1390
+	mov	w20, 0
+	bne	.L1449
 	add	x2, x22, :lo12:.LANCHOR0
 	ldr	x0, [x2,744]
 	ldrb	w0, [x0,19]
 	sub	w0, w0, #1
 	uxtb	w0, w0
-	cmp	w0, 5
-	bhi	.L1391
+	cmp	w0, 6
+	bhi	.L1450
 	ldrb	w1, [x2,761]
-	mov	w0, w20
+	mov	w0, w19
 	add	x2, x2, 764
-	mov	w3, w19
+	mov	w3, w20
 	bl	HynixSetRRPara
-.L1391:
+.L1450:
 	ldr	w1, [x29,172]
-	mov	w0, w20
+	mov	w0, w19
 	ldr	x2, [x21,8]
-	mov	w19, 0
+	mov	w20, 0
 	ldr	x3, [x21,16]
 	bl	FlashReadRawPage
 	mov	w28, w0
-	add	x2, x22, :lo12:.LANCHOR0
+	add	x4, x22, :lo12:.LANCHOR0
 	ldr	x0, [x29,112]
 	ldr	w1, [x21,4]
 	mov	w3, w28
-	ldrb	w2, [x2,1944]
+	str	x4, [x29,104]
+	ldrb	w2, [x4,1936]
 	bl	printk
-	b	.L1390
-.L1453:
+	cmn	w28, #1
+	ldr	x4, [x29,104]
+	bne	.L1449
+	ldrb	w0, [x4,120]
+	cbz	w0, .L1449
+	ldr	w0, [x29,152]
+	cbz	w0, .L1451
+	mov	w0, w19
+	bl	flash_enter_slc_mode
+	b	.L1452
+.L1451:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L1452:
+	add	x0, x25, :lo12:.LANCHOR4
 	ldr	w1, [x29,172]
-	mov	w0, w20
+	ldr	x2, [x21,8]
+	mov	w20, 0
+	ldr	x3, [x21,16]
+	ldr	x4, [x0,48]
+	mov	w0, w19
+	blr	x4
+	mov	w28, w0
+	b	.L1449
+.L1517:
+	ldr	w1, [x29,172]
+	mov	w0, w19
 	ldr	x2, [x21,8]
 	ldr	x3, [x21,16]
 	bl	FlashReadRawPage
 	mov	w28, w0
-	b	.L1390
-.L1407:
-	mov	w19, 0
-.L1389:
+	b	.L1449
+.L1468:
+	mov	w20, 0
+.L1448:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrb	w0, [x0,1944]
+	ldrb	w0, [x0,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bls	.L1390
-	add	x0, x26, :lo12:.LANCHOR4
+	bls	.L1449
+	add	x0, x25, :lo12:.LANCHOR4
 	ldr	x0, [x0,48]
 	cmp	x0, xzr
 	mov	w0, 256
 	csel	w28, w28, w0, ne
-.L1390:
+.L1449:
 	cmp	w28, 256
-	beq	.L1410
+	beq	.L1473
 	cmn	w28, #1
-	bne	.L1392
-.L1410:
-	str	w28, [x25,x27]
-	b	.L1394
-.L1392:
-	str	wzr, [x25,x27]
-.L1394:
-	ldr	w3, [x25,x27]
+	bne	.L1453
+.L1473:
+	str	w28, [x26,x27]
+	b	.L1455
+.L1453:
+	str	wzr, [x26,x27]
+.L1455:
+	ldr	w3, [x26,x27]
 	cmn	w3, #1
-	bne	.L1396
+	bne	.L1457
 	add	x2, x22, :lo12:.LANCHOR0
 	ldr	w1, [x21,4]
 	ldr	x0, [x29,128]
-	ldrb	w2, [x2,1944]
+	ldrb	w2, [x2,1936]
 	bl	printk
 	ldr	x1, [x21,16]
-	cbz	x1, .L1396
+	cbz	x1, .L1457
 	mov	w2, 4
 	ldr	x0, [x29,120]
 	mov	w3, w2
 	bl	rknand_print_hex
-.L1396:
-	cbz	w19, .L1398
+.L1457:
+	cbz	w20, .L1459
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrb	w0, [x0,1944]
+	ldrb	w0, [x0,1936]
 	add	w0, w0, w0, lsl 1
 	cmp	w23, w0, lsr 2
-	bls	.L1399
-	add	x26, x26, :lo12:.LANCHOR4
-	ldr	x0, [x26,48]
+	bls	.L1460
+	add	x25, x25, :lo12:.LANCHOR4
+	ldr	x0, [x25,48]
 	cmp	x0, xzr
 	mov	w0, 256
 	csel	w23, w23, w0, ne
-.L1399:
+.L1460:
 	add	w0, w24, 1
 	mov	w1, 56
 	cmp	w23, 256
 	umull	x0, w0, w1
-	beq	.L1411
+	beq	.L1474
 	cmn	w23, #1
-	bne	.L1400
-.L1411:
-	str	w23, [x25,x0]
-	b	.L1398
-.L1400:
-	str	wzr, [x25,x0]
-.L1398:
-	ldr	w0, [x29,144]
-	add	w24, w24, w19
-	cbz	w0, .L1372
+	bne	.L1461
+.L1474:
+	str	w23, [x26,x0]
+	b	.L1459
+.L1461:
+	str	wzr, [x26,x0]
+.L1459:
+	ldr	w0, [x29,152]
+	add	w24, w24, w20
+	cbz	w0, .L1429
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbz	w0, .L1372
-	mov	w0, w20
+	cbz	w0, .L1429
+	mov	w0, w19
 	bl	flash_exit_slc_mode
-.L1372:
+.L1429:
 	add	w24, w24, 1
-	b	.L1369
-.L1452:
+	b	.L1426
+.L1516:
 	mov	w0, 0
-	b	.L1450
-.L1379:
-	mov	w0, w20
+	b	.L1514
+.L1439:
+	mov	w0, w19
 	bl	NandcWaitFlashReady
-	cbz	w19, .L1376
+	cbz	w20, .L1436
 	ldr	w1, [x29,172]
-	mov	w0, w20
+	mov	w0, w19
 	bl	FlashReadDpDataOutCmd
-	b	.L1376
-.L1450:
+	b	.L1436
+.L1514:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9783,8 +10019,8 @@ FlashLoadFactorBbt:
 	ldrh	w21, [x0,182]
 	add	x0, x19, 120
 	mov	w28, 0
-	adrp	x26, .LC96
-	add	x26, x26, :lo12:.LC96
+	adrp	x26, .LC99
+	add	x26, x26, :lo12:.LC99
 	mul	w21, w1, w21
 	mov	w1, 0
 	uxth	w21, w21
@@ -9793,22 +10029,22 @@ FlashLoadFactorBbt:
 	ldr	x0, [x19,88]
 	str	x0, [x29,152]
 	mov	w19, w28
-	sub	w0, w21, #8
+	sub	w0, w21, #12
 	str	xzr, [x29,144]
 	uxth	w25, w25
 	str	w0, [x29,124]
-.L1455:
+.L1519:
 	add	x1, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x1,1845]
 	cmp	w1, w19
-	bls	.L1465
+	bls	.L1529
 	mul	w3, w19, w21
 	mov	w20, w25
 	mov	w4, 61664
-.L1456:
+.L1520:
 	ldr	w0, [x29,124]
 	cmp	w20, w0
-	ble	.L1458
+	ble	.L1522
 	add	w1, w3, w20
 	add	x0, x29, 136
 	lsl	w1, w1, 10
@@ -9822,12 +10058,12 @@ FlashLoadFactorBbt:
 	ldr	x3, [x29,112]
 	cmn	w0, #1
 	ldr	x4, [x29,104]
-	beq	.L1457
+	beq	.L1521
 	add	x24, x23, :lo12:.LANCHOR4
 	ldr	x0, [x24,88]
 	ldrh	w0, [x0]
 	cmp	w0, w4
-	bne	.L1457
+	bne	.L1521
 	add	x24, x24, 120
 	mov	x0, x26
 	mov	w1, w19
@@ -9836,20 +10072,20 @@ FlashLoadFactorBbt:
 	bl	printk
 	strh	w20, [x24,w19,sxtw 1]
 	uxth	w28, w28
-	b	.L1458
-.L1457:
+	b	.L1522
+.L1521:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L1456
-.L1458:
+	b	.L1520
+.L1522:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	w19, w19, 1
 	uxtb	w19, w19
 	ldrb	w1, [x1,1845]
 	cmp	w1, w28
 	csel	w27, w27, wzr, ne
-	b	.L1455
-.L1465:
+	b	.L1519
+.L1529:
 	mov	w0, w27
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -9881,9 +10117,9 @@ FlashProgSlc2KPages:
 	mov	w25, 0
 	add	x22, x22, :lo12:.LANCHOR0
 	mov	w28, -1
-.L1467:
+.L1531:
 	cmp	w25, w23
-	beq	.L1496
+	beq	.L1560
 	mov	w1, w24
 	sub	w4, w23, w25
 	mov	x0, x21
@@ -9893,10 +10129,10 @@ FlashProgSlc2KPages:
 	ldr	w0, [x29,100]
 	ldrb	w1, [x22,1845]
 	cmp	w0, w1
-	bcc	.L1468
+	bcc	.L1532
 	str	w28, [x21]
-	b	.L1469
-.L1468:
+	b	.L1533
+.L1532:
 	add	x0, x22, x0, uxtw
 	ldrb	w20, [x0,1848]
 	mov	w0, w20
@@ -9951,36 +10187,36 @@ FlashProgSlc2KPages:
 	ldr	w1, [x29,96]
 	mov	w0, w20
 	bl	FlashReadStatus
-	tbz	x0, 0, .L1472
+	tbz	x0, 0, .L1536
 	str	w28, [x21]
-.L1472:
+.L1536:
 	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1469:
+.L1533:
 	add	w25, w25, 1
 	add	x21, x21, 56
-	b	.L1467
-.L1496:
+	b	.L1531
+.L1560:
 	mov	w21, 0
-	cbz	w27, .L1494
-	adrp	x25, .LC100
-	adrp	x26, .LC99
-	adrp	x27, .LC98
-	add	x25, x25, :lo12:.LC100
-	add	x26, x26, :lo12:.LC99
-	add	x27, x27, :lo12:.LC98
-.L1495:
+	cbz	w27, .L1558
+	adrp	x25, .LC103
+	adrp	x26, .LC102
+	adrp	x27, .LC101
+	add	x25, x25, :lo12:.LC103
+	add	x26, x26, :lo12:.LC102
+	add	x27, x27, :lo12:.LC101
+.L1559:
 	cmp	w21, w23
-	beq	.L1494
+	beq	.L1558
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1475
-	adrp	x0, .LC97
+	bne	.L1539
+	adrp	x0, .LC100
 	ldr	w1, [x19,4]
-	add	x0, x0, :lo12:.LC97
+	add	x0, x0, :lo12:.LC100
 	bl	printk
-	b	.L1476
-.L1475:
+	b	.L1540
+.L1539:
 	adrp	x20, .LANCHOR4
 	sub	w4, w23, w21
 	add	x22, x20, :lo12:.LANCHOR4
@@ -10007,44 +10243,44 @@ FlashProgSlc2KPages:
 	bl	FlashReadPages
 	ldr	w22, [x29,104]
 	cmn	w22, #1
-	bne	.L1477
+	bne	.L1541
 	ldr	w1, [x19,4]
 	mov	x0, x27
 	bl	printk
 	str	w22, [x19]
-.L1477:
+.L1541:
 	ldr	x0, [x19,16]
-	cbz	x0, .L1478
+	cbz	x0, .L1542
 	ldr	w2, [x0]
 	add	x0, x20, :lo12:.LANCHOR4
 	ldr	x0, [x0,104]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1478
+	beq	.L1542
 	ldr	w1, [x19,4]
 	mov	x0, x26
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1478:
+.L1542:
 	ldr	x0, [x19,8]
-	cbz	x0, .L1476
+	cbz	x0, .L1540
 	add	x20, x20, :lo12:.LANCHOR4
 	ldr	w2, [x0]
 	ldr	x0, [x20,96]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1476
+	beq	.L1540
 	ldr	w1, [x19,4]
 	mov	x0, x25
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1476:
+.L1540:
 	add	w21, w21, 1
 	add	x19, x19, 56
-	b	.L1495
-.L1494:
+	b	.L1559
+.L1558:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10070,30 +10306,30 @@ FtlLoadFactoryBbt:
 	stp	x23, x24, [sp,48]
 	add	x19, x19, 136
 	adrp	x22, .LANCHOR0
-	ldr	x1, [x0,-64]
+	ldr	x1, [x0,-72]
 	add	x21, x22, :lo12:.LANCHOR0
-	ldr	x24, [x0,2112]
-	add	x21, x21, 2112
+	ldr	x24, [x0,2104]
+	add	x21, x21, 2104
 	str	x1, [x19,8]
 	mov	w23, 0
 	str	x24, [x19,16]
 	mov	w25, -1
 	mov	w26, 61664
-.L1498:
+.L1562:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w1, [x0,1974]
+	ldrh	w1, [x0,1966]
 	cmp	w23, w1
-	bcs	.L1507
-	ldrh	w20, [x0,2022]
+	bcs	.L1571
+	ldrh	w20, [x0,2014]
 	strh	w25, [x21,12]
-.L1500:
+.L1564:
 	add	x0, x22, :lo12:.LANCHOR0
 	sub	w20, w20, #1
 	uxth	w20, w20
-	ldrh	w0, [x0,2022]
+	ldrh	w0, [x0,2014]
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L1501
+	ble	.L1565
 	madd	w0, w23, w0, w20
 	mov	w1, 1
 	lsl	w0, w0, 10
@@ -10103,16 +10339,16 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x19]
 	cmn	w0, #1
-	beq	.L1500
+	beq	.L1564
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L1500
+	bne	.L1564
 	strh	w20, [x21,12]
-.L1501:
+.L1565:
 	add	w23, w23, 1
 	add	x21, x21, 2
-	b	.L1498
-.L1507:
+	b	.L1562
+.L1571:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10135,12 +10371,12 @@ FtlGetLastWrittenPage:
 	str	x25, [sp,64]
 	mov	w23, w1
 	add	x3, x3, :lo12:.LANCHOR0
-	bne	.L1509
-	ldrh	w19, [x3,2028]
-	b	.L1510
-.L1509:
-	ldrh	w19, [x3,2026]
-.L1510:
+	bne	.L1573
+	ldrh	w19, [x3,2020]
+	b	.L1574
+.L1573:
+	ldrh	w19, [x3,2018]
+.L1574:
 	sub	w19, w19, #1
 	lsl	w21, w0, 10
 	mov	w1, 1
@@ -10155,12 +10391,12 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29,144]
 	cmn	w0, #1
-	bne	.L1511
+	bne	.L1575
 	mov	w22, 0
 	mov	w25, 2
-.L1512:
+.L1576:
 	cmp	w22, w19
-	bgt	.L1511
+	bgt	.L1575
 	add	w3, w22, w19
 	mov	w1, 1
 	mov	w2, w23
@@ -10172,21 +10408,21 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x24]
 	cmn	w0, #1
-	bne	.L1513
+	bne	.L1577
 	ldr	w0, [x24,4]
 	cmn	w0, #1
-	bne	.L1513
+	bne	.L1577
 	ldr	w0, [x29,88]
 	cmn	w0, #1
-	beq	.L1513
+	beq	.L1577
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L1512
-.L1513:
+	b	.L1576
+.L1577:
 	add	w20, w20, 1
 	sxth	w22, w20
-	b	.L1512
-.L1511:
+	b	.L1576
+.L1575:
 	mov	w0, w19
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -10208,24 +10444,24 @@ FtlLoadBbt:
 	add	x0, x24, :lo12:.LANCHOR2
 	add	x19, x23, :lo12:.LANCHOR4
 	stp	x21, x22, [sp,32]
-	str	x25, [sp,64]
+	stp	x25, x26, [sp,64]
 	add	x19, x19, 136
 	adrp	x20, .LANCHOR0
-	str	xzr, [x19,8]
-	ldr	x22, [x0,2112]
+	ldr	x22, [x0,2104]
 	mov	w25, 61649
+	str	xzr, [x19,8]
 	str	x22, [x19,16]
 	bl	FtlBbtMemInit
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w21, [x0,2022]
+	ldrh	w21, [x0,2014]
 	sub	w21, w21, #1
 	uxth	w21, w21
-.L1520:
+.L1584:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2022]
+	ldrh	w0, [x0,2014]
 	sub	w0, w0, #48
 	cmp	w21, w0
-	ble	.L1523
+	ble	.L1587
 	lsl	w0, w21, 10
 	mov	w1, 1
 	str	w0, [x19,4]
@@ -10234,7 +10470,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1521
+	bne	.L1585
 	ldr	w0, [x19,4]
 	mov	w1, 1
 	mov	w2, w1
@@ -10242,35 +10478,35 @@ FtlLoadBbt:
 	str	w0, [x19,4]
 	mov	x0, x19
 	bl	FlashReadPages
-.L1521:
+.L1585:
 	ldr	w0, [x19]
 	cmn	w0, #1
-	beq	.L1522
+	beq	.L1586
 	ldrh	w0, [x22]
 	cmp	w0, w25
-	bne	.L1522
+	bne	.L1586
 	add	x1, x20, :lo12:.LANCHOR0
-	add	x0, x1, 2112
-	strh	w21, [x1,2112]
+	add	x0, x1, 2104
+	strh	w21, [x1,2104]
 	ldr	w1, [x22,4]
 	str	w1, [x0,8]
 	ldrh	w1, [x22,8]
 	strh	w1, [x0,4]
-	b	.L1523
-.L1522:
+	b	.L1587
+.L1586:
 	sub	w21, w21, #1
 	uxth	w21, w21
-	b	.L1520
-.L1523:
+	b	.L1584
+.L1587:
 	add	x21, x20, :lo12:.LANCHOR0
 	mov	w2, 65535
 	mov	w0, -1
-	ldrh	w1, [x21,2112]
+	ldrh	w1, [x21,2104]
 	cmp	w1, w2
-	beq	.L1525
-	ldrh	w1, [x21,2116]
+	beq	.L1589
+	ldrh	w1, [x21,2108]
 	cmp	w1, w2
-	beq	.L1527
+	beq	.L1591
 	add	x25, x23, :lo12:.LANCHOR4
 	lsl	w1, w1, 10
 	add	x0, x25, 136
@@ -10280,97 +10516,101 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x25,136]
 	cmn	w0, #1
-	beq	.L1527
+	beq	.L1591
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L1527
+	bne	.L1591
 	ldr	w0, [x22,4]
-	ldr	w1, [x21,2120]
+	ldr	w1, [x21,2112]
 	cmp	w0, w1
-	bls	.L1527
-	str	w0, [x21,2120]
-	ldrh	w1, [x21,2116]
+	bls	.L1591
+	str	w0, [x21,2112]
+	ldrh	w1, [x21,2108]
 	ldrh	w0, [x22,8]
-	strh	w1, [x21,2112]
-	strh	w0, [x21,2116]
-.L1527:
+	strh	w1, [x21,2104]
+	strh	w0, [x21,2108]
+.L1591:
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	x21, x23, :lo12:.LANCHOR4
+	mov	w26, 61649
 	add	x21, x21, 136
-	ldrh	w0, [x25,2112]
+	ldrh	w0, [x25,2104]
 	bl	FtlGetLastWrittenPage
 	sxth	w19, w0
 	add	w0, w0, 1
-	strh	w0, [x25,2114]
-.L1529:
-	tbnz	w19, #31, .L1534
-	ldrh	w0, [x25,2112]
+	strh	w0, [x25,2106]
+.L1593:
+	tbnz	w19, #31, .L1598
+	ldrh	w0, [x25,2104]
 	mov	w1, 1
 	mov	w2, w1
 	orr	w0, w19, w0, lsl 10
 	str	w0, [x21,4]
 	add	x0, x24, :lo12:.LANCHOR2
-	ldr	x0, [x0,-64]
+	ldr	x0, [x0,-72]
 	str	x0, [x21,8]
 	mov	x0, x21
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1530
-.L1534:
+	beq	.L1594
+	ldrh	w0, [x22]
+	cmp	w0, w26
+	bne	.L1594
+.L1598:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x22,10]
 	mov	w2, 65535
-	strh	w0, [x1,2118]
+	strh	w0, [x1,2110]
 	ldrh	w0, [x22,12]
 	cmp	w0, w2
-	bne	.L1531
-	b	.L1532
-.L1530:
+	bne	.L1595
+	b	.L1596
+.L1594:
 	sub	w19, w19, #1
 	sxth	w19, w19
-	b	.L1529
-.L1531:
-	ldr	w2, [x1,1948]
+	b	.L1593
+.L1595:
+	ldr	w2, [x1,1940]
 	cmp	w0, w2
-	beq	.L1532
-	ldrh	w1, [x1,1962]
+	beq	.L1596
+	ldrh	w1, [x1,1954]
 	lsr	w1, w1, 2
 	cmp	w0, w1
-	bcs	.L1532
+	bcs	.L1596
 	cmp	w2, w1
-	bcs	.L1532
+	bcs	.L1596
 	bl	FtlSysBlkNumInit
-.L1532:
+.L1596:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	x19, 0
-	add	x21, x20, 2112
+	add	x21, x20, 2104
 	add	x23, x23, :lo12:.LANCHOR4
-.L1535:
-	ldrh	w0, [x20,1974]
+.L1599:
+	ldrh	w0, [x20,1966]
 	mov	w1, w19
 	add	x19, x19, 1
 	cmp	w1, w0
-	bcs	.L1550
+	bcs	.L1617
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	x3, [x23,144]
-	ldrh	w2, [x0,2232]
+	ldrh	w2, [x0,2224]
 	add	x0, x21, x19, lsl 3
 	mul	w1, w1, w2
 	ldr	x0, [x0,24]
 	lsl	w2, w2, 2
 	add	x1, x3, x1, lsl 2
 	bl	ftl_memcpy
-	b	.L1535
-.L1550:
+	b	.L1599
+.L1617:
 	mov	w0, 0
-.L1525:
+.L1589:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldr	x25, [sp,64]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	FtlLoadBbt, .-FtlLoadBbt
@@ -10387,44 +10627,44 @@ load_l2p_region:
 	stp	x21, x22, [sp,32]
 	uxth	w21, w0
 	ubfiz	x0, x21, 2, 16
-	ldr	x2, [x20,2208]
+	ldr	x2, [x20,2200]
 	ldr	w22, [x2,x0]
-	cbnz	w22, .L1552
-	ldr	x0, [x20,144]
+	cbnz	w22, .L1619
+	ldr	x0, [x20,136]
 	lsl	x19, x1, 4
-	adrp	x2, .LANCHOR0+2036
+	adrp	x2, .LANCHOR0+2028
 	mov	w1, 255
 	add	x0, x0, x19
-	ldrh	w2, [x2,#:lo12:.LANCHOR0+2036]
+	ldrh	w2, [x2,#:lo12:.LANCHOR0+2028]
 	ldr	x0, [x0,8]
 	bl	ftl_memset
-	ldr	x0, [x20,144]
+	ldr	x0, [x20,136]
 	strh	w21, [x0,x19]
-	ldr	x1, [x20,144]
+	ldr	x1, [x20,136]
 	add	x19, x1, x19
 	str	w22, [x19,4]
-	b	.L1553
-.L1552:
+	b	.L1620
+.L1619:
 	lsl	x19, x1, 4
-	ldr	x1, [x20,144]
+	ldr	x1, [x20,136]
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
 	add	x1, x1, x19
 	add	x0, x0, 136
 	ldr	x1, [x1,8]
 	str	x1, [x0,8]
-	ldr	x1, [x20,2112]
+	ldr	x1, [x20,2104]
 	str	x1, [x0,16]
 	mov	w1, 1
 	mov	w2, w1
 	str	w22, [x0,4]
 	bl	FlashReadPages
-	ldr	x0, [x20,144]
+	ldr	x0, [x20,136]
 	add	x0, x0, x19
 	str	wzr, [x0,4]
-	ldr	x0, [x20,144]
+	ldr	x0, [x20,136]
 	strh	w21, [x0,x19]
-.L1553:
+.L1620:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10447,22 +10687,22 @@ FtlVendorPartRead:
 	stp	x27, x28, [sp,80]
 	mov	w21, w1
 	add	w1, w22, w1
-	ldrh	w28, [x0,2034]
+	ldrh	w28, [x0,2026]
 	mov	x24, x2
-	ldrh	w0, [x0,2020]
+	ldrh	w0, [x0,2012]
 	mov	w20, -1
 	cmp	w1, w0
-	bhi	.L1555
+	bhi	.L1622
 	lsr	w28, w22, w28
 	mov	w20, 0
 	adrp	x26, .LANCHOR2
-.L1556:
-	cbz	w21, .L1555
+.L1623:
+	cbz	w21, .L1622
 	add	x3, x26, :lo12:.LANCHOR2
-	ldr	x0, [x3,2200]
+	ldr	x0, [x3,2192]
 	ldr	w1, [x0,w28,uxtw 2]
 	add	x0, x25, :lo12:.LANCHOR0
-	ldrh	w19, [x0,2032]
+	ldrh	w19, [x0,2024]
 	uxth	w0, w21
 	udiv	w23, w22, w19
 	msub	w23, w23, w19, w22
@@ -10471,8 +10711,8 @@ FtlVendorPartRead:
 	cmp	w19, w21
 	csel	w19, w0, w19, hi
 	lsl	w27, w19, 9
-	cbz	w1, .L1558
-	ldr	x0, [x3,2080]
+	cbz	w1, .L1625
+	ldr	x0, [x3,2072]
 	ubfiz	x23, x23, 9, 16
 	str	w1, [x29,124]
 	mov	w1, 1
@@ -10485,24 +10725,24 @@ FtlVendorPartRead:
 	ldr	x3, [x29,104]
 	mov	w2, w27
 	ldr	w0, [x29,120]
-	ldr	x1, [x3,2080]
+	ldr	x1, [x3,2072]
 	cmn	w0, #1
 	mov	x0, x24
 	csinv	w20, w20, wzr, ne
 	add	x1, x1, x23
 	bl	ftl_memcpy
-	b	.L1560
-.L1558:
+	b	.L1627
+.L1625:
 	mov	x0, x24
 	mov	w2, w27
 	bl	ftl_memset
-.L1560:
+.L1627:
 	add	w28, w28, 1
 	sub	w21, w21, w19
 	add	w22, w22, w19
 	add	x24, x24, x27, sxtw
-	b	.L1556
-.L1555:
+	b	.L1623
+.L1622:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10522,26 +10762,26 @@ FtlLoadEctTbl:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR2
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x19,2136]
-	ldr	x2, [x19,2152]
+	ldrh	w1, [x19,2128]
+	ldr	x2, [x19,2144]
 	bl	FtlVendorPartRead
-	ldr	x0, [x19,2152]
+	ldr	x0, [x19,2144]
 	ldr	w1, [x0]
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1564
+	beq	.L1631
 	adrp	x0, .LC72
-	adrp	x1, .LC101
-	add	x1, x1, :lo12:.LC101
+	adrp	x1, .LC104
+	add	x1, x1, :lo12:.LC104
 	add	x0, x0, :lo12:.LC72
 	bl	printk
-	ldrh	w2, [x19,2136]
+	ldrh	w2, [x19,2128]
 	mov	w1, 0
-	ldr	x0, [x19,2152]
+	ldr	x0, [x19,2144]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1564:
+.L1631:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -10559,81 +10799,81 @@ Ftl_load_ext_data:
 	adrp	x19, .LANCHOR2
 	str	x21, [sp,32]
 	add	x20, x19, :lo12:.LANCHOR2
-	add	x21, x20, 352
+	add	x21, x20, 344
 	mov	x2, x21
 	bl	FtlVendorPartRead
-	ldr	w1, [x20,352]
+	ldr	w1, [x20,344]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	beq	.L1566
+	beq	.L1633
 	mov	x0, x21
 	mov	w1, 0
 	mov	w2, 512
 	bl	ftl_memset
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
-	str	w0, [x20,352]
-.L1566:
+	str	w0, [x20,344]
+.L1633:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
-	ldr	w3, [x0,352]
+	ldr	w3, [x0,344]
 	cmp	w3, w2
-	bne	.L1567
-	ldr	w2, [x0,440]
-	str	w2, [x0,188]
-	ldr	w2, [x0,444]
-	str	w2, [x0,192]
-	ldr	w2, [x0,360]
+	bne	.L1634
+	ldr	w2, [x0,432]
+	str	w2, [x0,180]
+	ldr	w2, [x0,436]
 	str	w2, [x0,184]
+	ldr	w2, [x0,352]
+	str	w2, [x0,176]
+	ldr	w2, [x0,356]
+	str	w2, [x0,164]
+	ldr	w2, [x0,360]
+	str	w2, [x0,156]
 	ldr	w2, [x0,364]
 	str	w2, [x0,172]
-	ldr	w2, [x0,368]
-	str	w2, [x0,164]
 	ldr	w2, [x0,372]
-	str	w2, [x0,180]
+	str	w2, [x0,200]
+	ldr	w2, [x0,376]
+	str	w2, [x0,-80]
 	ldr	w2, [x0,380]
-	str	w2, [x0,208]
+	str	w2, [x0,160]
 	ldr	w2, [x0,384]
-	str	w2, [x0,-72]
-	ldr	w2, [x0,388]
 	str	w2, [x0,168]
+	ldr	w2, [x0,388]
+	str	w2, [x0,208]
+	ldr	w1, [x0,404]
 	ldr	w2, [x0,392]
-	str	w2, [x0,176]
-	ldr	w2, [x0,396]
-	str	w2, [x0,216]
-	ldr	w1, [x0,412]
-	ldr	w2, [x0,400]
-	str	w2, [x0,220]
-	str	w1, [x0,344]
-.L1567:
+	str	w2, [x0,212]
+	str	w1, [x0,336]
+.L1634:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 34661
 	movk	w1, 0x1234, lsl 16
-	ldr	w2, [x0,420]
-	str	wzr, [x0,2024]
+	ldr	w2, [x0,412]
+	str	wzr, [x0,2016]
 	cmp	w2, w1
-	bne	.L1568
+	bne	.L1635
 	mov	w1, 1
-	str	w1, [x0,160]
+	str	w1, [x0,152]
 	adrp	x0, .LC72
-	adrp	x1, .LC102
+	adrp	x1, .LC105
 	add	x0, x0, :lo12:.LC72
-	add	x1, x1, :lo12:.LC102
+	add	x1, x1, :lo12:.LC105
 	bl	printk
-.L1568:
+.L1635:
 	adrp	x2, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x21, [sp,32]
-	ldr	w3, [x19,204]
-	ldrh	w1, [x2,2016]
-	ldr	w0, [x19,208]
+	ldr	w3, [x19,196]
+	ldrh	w1, [x2,2008]
+	ldr	w0, [x19,200]
 	madd	w0, w1, w3, w0
-	ldrh	w1, [x2,1960]
+	ldrh	w1, [x2,1952]
 	udiv	w0, w0, w1
-	str	w0, [x19,212]
+	str	w0, [x19,204]
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -10679,48 +10919,48 @@ FtlScanSysBlk:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	strh	wzr, [x21,2304]
+	strh	wzr, [x21,2296]
 	mov	x24, x22
-	ldr	w2, [x20,2056]
+	ldr	w2, [x20,2048]
 	mov	w22, 65535
-	ldr	x0, [x21,2216]
+	ldr	x0, [x21,2208]
 	lsl	w2, w2, 2
-	strh	wzr, [x20,2072]
+	strh	wzr, [x20,2064]
 	bl	ftl_memset
-	ldr	w2, [x20,2056]
+	ldr	w2, [x20,2048]
 	mov	w1, 0
-	ldr	x0, [x21,2168]
+	ldr	x0, [x21,2160]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w2, [x20,2048]
+	ldrh	w2, [x20,2040]
 	mov	w1, 0
-	ldr	x0, [x21,2192]
+	ldr	x0, [x21,2184]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldrh	w2, [x20,2048]
+	ldrh	w2, [x20,2040]
 	mov	w1, 0
-	ldr	x0, [x20,2080]
+	ldr	x0, [x20,2072]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	add	x0, x21, 280
+	add	x0, x21, 272
 	mov	w1, 255
 	mov	w2, 12
 	bl	ftl_memset
-	ldrh	w21, [x20,1960]
-.L1571:
+	ldrh	w21, [x20,1952]
+.L1638:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1,1962]
+	ldrh	w0, [x1,1954]
 	cmp	w0, w21
-	bls	.L1614
+	bls	.L1679
 	mov	x27, 0
-	ldrh	w5, [x1,1952]
-	ldrh	w4, [x1,2038]
+	ldrh	w5, [x1,1944]
+	ldrh	w4, [x1,2030]
 	mov	w20, w27
 	mov	x23, x1
-.L1615:
+.L1680:
 	cmp	w5, w27, uxth
-	bls	.L1646
-	add	x0, x23, 1984
+	bls	.L1714
+	add	x0, x23, 1976
 	mov	w1, w21
 	str	x4, [x29,112]
 	str	x5, [x29,120]
@@ -10730,401 +10970,394 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	x5, [x29,120]
 	ldr	x4, [x29,112]
-	cbnz	w0, .L1572
+	cbnz	w0, .L1639
 	add	x2, x24, :lo12:.LANCHOR2
 	mov	w0, 56
 	lsl	w28, w28, 10
 	mov	w3, 4
 	umull	x0, w20, w0
-	ldr	x1, [x2,2048]
+	ldr	x1, [x2,2040]
 	add	x1, x1, x0
 	str	w28, [x1,4]
-	ldr	x1, [x2,2048]
-	ldr	x2, [x2,904]
+	ldr	x1, [x2,2040]
 	add	x0, x1, x0
+	ldr	x1, [x2,888]
+	ldr	x2, [x2,896]
+	str	x1, [x0,8]
 	mul	w1, w20, w4
 	add	w20, w20, 1
-	str	xzr, [x0,8]
 	sdiv	w1, w1, w3
 	uxth	w20, w20
 	add	x1, x2, x1, sxtw 2
 	str	x1, [x0,16]
-.L1572:
+.L1639:
 	add	x27, x27, 1
-	b	.L1615
-.L1646:
+	b	.L1680
+.L1714:
+	cbz	w20, .L1642
 	add	x0, x24, :lo12:.LANCHOR2
 	mov	w1, w20
 	mov	w2, 1
 	mov	x23, 0
-	mov	w27, 61634
-	mov	w28, 61574
-	ldr	x0, [x0,2048]
+	mov	w27, -1
+	mov	w28, 61604
+	ldr	x0, [x0,2040]
 	bl	FlashReadPages
-.L1574:
+.L1643:
 	cmp	w20, w23, uxth
-	bls	.L1647
-	add	x7, x24, :lo12:.LANCHOR2
+	bls	.L1642
 	mov	x0, 56
 	mul	x6, x23, x0
-	ldr	x2, [x7,2048]
-	add	x1, x2, x6
-	ldr	w8, [x2,x6]
-	ldr	w0, [x1,4]
-	cmn	w8, #1
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,2040]
+	add	x1, x0, x6
+	ldr	w0, [x0,x6]
+	ldr	w5, [x1,4]
+	cmn	w0, #1
 	ldr	x26, [x1,16]
-	ubfx	x25, x0, 10, 16
-	bne	.L1576
-	add	w0, w0, 1
-	str	w0, [x1,4]
+	ubfx	x25, x5, 10, 16
+	bne	.L1645
+	mov	w7, 16
+.L1644:
+	add	x8, x24, :lo12:.LANCHOR2
+	str	x7, [x29,104]
+	str	x8, [x29,112]
+	str	x6, [x29,120]
+	ldr	x0, [x8,2040]
+	add	x0, x0, x6
+	ldr	w1, [x0,4]
+	add	w1, w1, 1
+	str	w1, [x0,4]
 	mov	w1, 1
-	str	x8, [x29,104]
-	ldr	x0, [x7,2048]
+	ldr	x0, [x8,2040]
 	mov	w2, w1
-	str	x7, [x29,112]
 	add	x0, x0, x6
-	str	x6, [x29,120]
 	bl	FlashReadPages
 	ldrh	w0, [x26]
-	ldr	x6, [x29,120]
+	ldr	x8, [x29,112]
 	cmp	w0, w22
-	ldr	x7, [x29,112]
-	ldr	x8, [x29,104]
-	bne	.L1576
-	ldr	x0, [x7,2048]
-	str	w8, [x0,x6]
-.L1576:
+	ldr	x6, [x29,120]
+	ldr	x7, [x29,104]
+	ldr	x0, [x8,2040]
+	bne	.L1646
+	str	w27, [x0,x6]
+	b	.L1645
+.L1646:
+	ldr	w0, [x0,x6]
+	cmn	w0, #1
+	bne	.L1645
+	sub	w7, w7, #1
+	uxth	w7, w7
+	cbnz	w7, .L1644
+.L1645:
 	add	x0, x24, :lo12:.LANCHOR2
-	ldr	x1, [x0,2048]
+	ldr	x1, [x0,2040]
 	ldr	w1, [x1,x6]
 	cmn	w1, #1
-	beq	.L1578
-	ldr	w0, [x0,196]
+	beq	.L1648
+	ldr	w0, [x0,188]
 	cmn	w0, #1
-	beq	.L1579
+	beq	.L1649
 	ldr	w1, [x26,4]
 	cmp	w0, w1
-	bhi	.L1580
-.L1579:
+	bhi	.L1650
+.L1649:
 	ldr	w0, [x26,4]
 	cmn	w0, #1
-	beq	.L1580
+	beq	.L1650
 	add	x1, x24, :lo12:.LANCHOR2
 	add	w0, w0, 1
-	str	w0, [x1,196]
-.L1580:
+	str	w0, [x1,188]
+.L1650:
 	ldrh	w0, [x26]
-	mov	w1, 61604
-	cmp	w0, w1
-	beq	.L1582
-	bhi	.L1583
 	cmp	w0, w28
-	bne	.L1581
+	beq	.L1652
+	bhi	.L1653
+	mov	w1, 61574
+	cmp	w0, w1
+	bne	.L1651
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x7, x24, :lo12:.LANCHOR2
-	ldrh	w6, [x0,2048]
-	ldrh	w0, [x0,2072]
-	sub	w1, w6, #1
-	ldr	x7, [x7,2192]
-	sxth	w2, w1
-	sub	w1, w1, w0
-	b	.L1599
-.L1583:
-	cmp	w0, w27
-	beq	.L1585
+	ldrh	w6, [x0,2040]
+	ldrh	w0, [x0,2064]
+	sub	w2, w6, #1
+	ldr	x7, [x7,2184]
+	sxth	x1, w2
+	sub	w2, w2, w0
+	b	.L1666
+.L1653:
+	mov	w1, 61634
+	cmp	w0, w1
+	beq	.L1655
 	cmp	w0, w22
-	bne	.L1581
-	mov	w0, w25
-	mov	w1, 0
-	b	.L1644
-.L1585:
+	beq	.L1713
+	b	.L1651
+.L1655:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x7, x24, :lo12:.LANCHOR2
-	ldr	w6, [x0,2056]
-	ldrh	w0, [x7,2304]
-	ldr	x7, [x7,2216]
-	uxth	w1, w6
-	sub	w2, w1, #1
-	sub	w1, w1, w0
-	sub	w1, w1, #1
+	ldr	w6, [x0,2048]
+	ldrh	w0, [x7,2296]
+	ldr	x7, [x7,2208]
+	uxth	w2, w6
+	sub	w1, w2, #1
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	sxth	x1, w1
 	sxth	w2, w2
-	sxth	w1, w1
-.L1587:
-	cmp	w2, w1
-	ble	.L1648
-	sbfiz	x8, x2, 2, 32
+.L1657:
+	cmp	w1, w2
+	ble	.L1715
+	sbfiz	x8, x1, 2, 32
 	ldr	w11, [x26,4]
-	sxth	x9, w2
+	sxth	x9, w1
 	ldr	w10, [x7,x8]
 	cmp	w11, w10
-	bls	.L1588
-	ldr	w1, [x7]
-	cbnz	w1, .L1589
+	bls	.L1658
+	ldr	w2, [x7]
+	cbnz	w2, .L1659
 	cmp	w0, w6
-	bne	.L1590
-.L1589:
-	add	x0, x24, :lo12:.LANCHOR2
-	mov	w1, 1
-	str	x9, [x29,104]
-	str	x2, [x29,112]
-	ldr	x0, [x0,2168]
-	str	x8, [x29,120]
-	ldrh	w0, [x0]
-	bl	FtlFreeSysBlkQueueIn
-	ldr	x8, [x29,120]
-	ldr	x2, [x29,112]
-	ldr	x9, [x29,104]
-	b	.L1591
-.L1590:
-	add	x1, x24, :lo12:.LANCHOR2
+	beq	.L1659
+	add	x2, x24, :lo12:.LANCHOR2
 	add	w0, w0, 1
-	strh	w0, [x1,2304]
-.L1591:
+	strh	w0, [x2,2296]
+.L1659:
 	mov	w0, 0
-.L1592:
-	cmp	w0, w2
-	beq	.L1649
+.L1660:
+	cmp	w0, w1
+	beq	.L1716
 	add	x6, x24, :lo12:.LANCHOR2
-	sxtw	x1, w0
-	lsl	x7, x1, 2
-	lsl	x1, x1, 1
+	sxtw	x2, w0
+	lsl	x7, x2, 2
+	lsl	x2, x2, 1
 	add	w0, w0, 1
-	ldr	x10, [x6,2216]
+	ldr	x10, [x6,2208]
 	sxth	w0, w0
 	add	x11, x10, x7
 	ldr	w11, [x11,4]
 	str	w11, [x10,x7]
-	ldr	x6, [x6,2168]
-	add	x7, x6, x1
+	ldr	x6, [x6,2160]
+	add	x7, x6, x2
 	ldrh	w7, [x7,2]
-	strh	w7, [x6,x1]
-	b	.L1592
-.L1649:
+	strh	w7, [x6,x2]
+	b	.L1660
+.L1716:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	w6, [x26,4]
-	ldr	x1, [x0,2216]
-	str	w6, [x1,x8]
-	ldr	x1, [x0,2168]
-	strh	w25, [x1,x9,lsl 1]
-	tbz	w2, #31, .L1643
-	b	.L1578
-.L1588:
-	sub	w2, w2, #1
-	sxth	w2, w2
-	b	.L1587
-.L1648:
-	tbz	w2, #31, .L1598
-	b	.L1578
-.L1643:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2304]
-	ldr	w1, [x1,2056]
-	sub	w1, w1, w0
+	ldr	x2, [x0,2208]
+	str	w6, [x2,x8]
+	ldr	x2, [x0,2160]
+	strh	w25, [x2,x9,lsl 1]
+	tbz	w1, #31, .L1662
+	b	.L1651
+.L1658:
 	sub	w1, w1, #1
-	cmp	w2, w1, sxth
-	bgt	.L1581
-.L1598:
-	add	x1, x24, :lo12:.LANCHOR2
+	sxth	x1, w1
+	b	.L1657
+.L1715:
+	tbz	w1, #31, .L1695
+	b	.L1651
+.L1662:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2296]
+	ldr	w2, [x2,2048]
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	cmp	w1, w2, sxth
+	bgt	.L1651
+.L1695:
+	add	x2, x24, :lo12:.LANCHOR2
 	add	w0, w0, 1
-	sxtw	x2, w2
 	ldr	w4, [x26,4]
-	strh	w0, [x1,2304]
-	ldr	x0, [x1,2216]
-	str	w4, [x0,x2,lsl 2]
-	ldr	x0, [x1,2168]
-	b	.L1645
-.L1607:
-	sbfiz	x8, x2, 2, 32
+	strh	w0, [x2,2296]
+	ldr	x0, [x2,2208]
+	str	w4, [x0,x1,lsl 2]
+	ldr	x0, [x2,2160]
+	b	.L1712
+.L1672:
+	sbfiz	x8, x1, 2, 32
 	ldr	w11, [x26,4]
-	sxth	x9, w2
+	sxth	x9, w1
 	ldr	w10, [x7,x8]
 	cmp	w11, w10
-	bhi	.L1650
-	sub	w2, w2, #1
-	sxth	w2, w2
-.L1599:
-	cmp	w2, w1
-	bgt	.L1607
-	b	.L1606
-.L1650:
-	ldr	w1, [x7]
-	cbnz	w1, .L1601
+	bhi	.L1717
+	sub	w1, w1, #1
+	sxth	x1, w1
+.L1666:
+	cmp	w1, w2
+	bgt	.L1672
+	b	.L1671
+.L1717:
+	ldr	w2, [x7]
+	cbnz	w2, .L1668
 	cmp	w0, w6
-	bne	.L1602
-.L1601:
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, 1
-	str	x9, [x29,104]
-	str	x8, [x29,112]
-	ldr	x0, [x0,2080]
-	str	x2, [x29,120]
-	ldrh	w0, [x0]
-	bl	FtlFreeSysBlkQueueIn
-	ldr	x2, [x29,120]
-	ldr	x8, [x29,112]
-	ldr	x9, [x29,104]
-	b	.L1603
-.L1602:
-	add	x1, x19, :lo12:.LANCHOR0
+	beq	.L1668
+	add	x2, x19, :lo12:.LANCHOR0
 	add	w0, w0, 1
-	strh	w0, [x1,2072]
-.L1603:
+	strh	w0, [x2,2064]
+.L1668:
 	mov	w0, 0
-.L1604:
-	cmp	w0, w2
-	beq	.L1651
-	add	x1, x24, :lo12:.LANCHOR2
-	ldr	x7, [x1,2192]
-	sxtw	x1, w0
-	lsl	x6, x1, 2
-	lsl	x1, x1, 1
+.L1669:
+	cmp	w0, w1
+	beq	.L1718
+	add	x2, x24, :lo12:.LANCHOR2
+	ldr	x7, [x2,2184]
+	sxtw	x2, w0
+	lsl	x6, x2, 2
+	lsl	x2, x2, 1
 	add	x10, x7, x6
 	add	w0, w0, 1
 	sxth	w0, w0
 	ldr	w10, [x10,4]
 	str	w10, [x7,x6]
 	add	x6, x19, :lo12:.LANCHOR0
-	ldr	x6, [x6,2080]
-	add	x7, x6, x1
+	ldr	x6, [x6,2072]
+	add	x7, x6, x2
 	ldrh	w7, [x7,2]
-	strh	w7, [x6,x1]
-	b	.L1604
-.L1651:
+	strh	w7, [x6,x2]
+	b	.L1669
+.L1718:
 	add	x0, x24, :lo12:.LANCHOR2
-	ldr	w1, [x26,4]
-	ldr	x0, [x0,2192]
-	str	w1, [x0,x8]
+	ldr	w2, [x26,4]
+	ldr	x0, [x0,2184]
+	str	w2, [x0,x8]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2080]
+	ldr	x0, [x0,2072]
 	strh	w25, [x0,x9,lsl 1]
-.L1606:
-	tbnz	w2, #31, .L1578
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1,2048]
-	ldrh	w6, [x1,2072]
+.L1671:
+	tbnz	w1, #31, .L1651
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x2,2040]
+	ldrh	w6, [x2,2064]
 	sub	w0, w0, #1
 	sub	w0, w0, w6
-	cmp	w2, w0, sxth
-	bgt	.L1581
+	cmp	w1, w0, sxth
+	bgt	.L1651
 	add	x0, x24, :lo12:.LANCHOR2
-	sxtw	x2, w2
 	add	w6, w6, 1
 	ldr	w4, [x26,4]
-	strh	w6, [x1,2072]
-	ldr	x0, [x0,2192]
-	str	w4, [x0,x2,lsl 2]
-	ldr	x0, [x1,2080]
-.L1645:
-	strh	w25, [x0,x2,lsl 1]
-	b	.L1581
-.L1582:
+	strh	w6, [x2,2064]
+	ldr	x0, [x0,2184]
+	str	w4, [x0,x1,lsl 2]
+	ldr	x0, [x2,2072]
+.L1712:
+	strh	w25, [x0,x1,lsl 1]
+	b	.L1651
+.L1652:
 	add	x0, x24, :lo12:.LANCHOR2
-	add	x1, x0, 280
-	ldrh	w2, [x0,280]
+	add	x1, x0, 272
+	ldrh	w2, [x0,272]
 	cmp	w2, w22
-	bne	.L1610
-	strh	w25, [x0,280]
+	bne	.L1673
+	strh	w25, [x0,272]
 	ldr	w0, [x26,4]
 	str	w0, [x1,8]
-	b	.L1581
-.L1610:
+	b	.L1651
+.L1673:
 	ldrh	w0, [x1,4]
 	cmp	w0, w22
-	beq	.L1611
+	beq	.L1674
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L1611:
+.L1674:
 	add	x1, x24, :lo12:.LANCHOR2
 	ldr	w2, [x26,4]
-	add	x0, x1, 280
+	add	x0, x1, 272
 	ldr	w6, [x0,8]
 	cmp	w6, w2
-	bcs	.L1612
-	ldrh	w2, [x1,280]
+	bcs	.L1675
+	ldrh	w2, [x1,272]
 	strh	w2, [x0,4]
-	strh	w25, [x1,280]
+	strh	w25, [x1,272]
 	ldr	w1, [x26,4]
 	str	w1, [x0,8]
-	b	.L1581
-.L1612:
+	b	.L1651
+.L1675:
 	strh	w25, [x0,4]
-	b	.L1581
-.L1578:
+	b	.L1651
+.L1648:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1676
+.L1713:
+	mov	w0, w25
+	mov	w1, 0
+	b	.L1711
+.L1676:
 	mov	w0, w25
 	mov	w1, 1
-.L1644:
+.L1711:
 	bl	FtlFreeSysBlkQueueIn
-.L1581:
+.L1651:
 	add	x23, x23, 1
-	b	.L1574
-.L1647:
+	b	.L1643
+.L1642:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L1571
-.L1614:
+	b	.L1638
+.L1679:
 	add	x4, x24, :lo12:.LANCHOR2
-	ldr	x2, [x4,2168]
+	ldr	x2, [x4,2160]
 	ldrh	w0, [x2]
-	cbz	w0, .L1616
-.L1619:
+	cbz	w0, .L1681
+.L1684:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x2, [x1,2080]
+	ldr	x2, [x1,2072]
 	ldrh	w0, [x2]
-	cbz	w0, .L1617
-	b	.L1638
-.L1616:
-	ldrh	w4, [x4,2304]
-	cbz	w4, .L1619
-	ldr	w1, [x1,2056]
-.L1620:
+	cbz	w0, .L1682
+	b	.L1705
+.L1681:
+	ldrh	w4, [x4,2296]
+	cbz	w4, .L1684
+	ldr	w1, [x1,2048]
+.L1685:
 	cmp	w0, w1
-	bcs	.L1619
+	bcs	.L1684
 	ldrh	w4, [x2,w0,sxtw 1]
-	cbz	w4, .L1621
+	cbz	w4, .L1686
 	mov	w7, w0
-.L1622:
+.L1687:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	w1, [x1,2056]
+	ldr	w1, [x1,2048]
 	cmp	w0, w1
-	bcs	.L1619
+	bcs	.L1684
 	add	x2, x24, :lo12:.LANCHOR2
 	sxtw	x6, w0
 	sub	w1, w0, w7
 	lsl	x4, x6, 1
 	add	w0, w0, 1
-	ldr	x5, [x2,2168]
+	ldr	x5, [x2,2160]
 	sxtw	x1, w1
 	sxth	w0, w0
 	ldrh	w8, [x5,x4]
 	strh	w8, [x5,x1,lsl 1]
-	ldr	x5, [x2,2216]
+	ldr	x5, [x2,2208]
 	ldr	w6, [x5,x6,lsl 2]
 	str	w6, [x5,x1,lsl 2]
-	ldr	x1, [x2,2168]
+	ldr	x1, [x2,2160]
 	strh	wzr, [x1,x4]
-	b	.L1622
-.L1621:
+	b	.L1687
+.L1686:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1620
-.L1617:
-	ldrh	w4, [x1,2072]
-	cbz	w4, .L1638
-	ldrh	w1, [x1,2048]
-.L1625:
+	b	.L1685
+.L1682:
+	ldrh	w4, [x1,2064]
+	cbz	w4, .L1705
+	ldrh	w1, [x1,2040]
+.L1690:
 	cmp	w0, w1
 	mov	w7, w0
-	bge	.L1638
+	bge	.L1705
 	ldrh	w4, [x2,w0,sxtw 1]
-	cbz	w4, .L1626
-.L1627:
+	cbz	w4, .L1691
+.L1692:
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x2,2048]
+	ldrh	w1, [x2,2040]
 	cmp	w0, w1
-	bge	.L1638
+	bge	.L1705
 	sxtw	x6, w0
 	sub	w1, w0, w7
-	ldr	x5, [x2,2080]
+	ldr	x5, [x2,2072]
 	lsl	x4, x6, 1
 	sxtw	x1, w1
 	add	w0, w0, 1
@@ -11132,17 +11365,17 @@ FtlScanSysBlk:
 	sxth	w0, w0
 	strh	w8, [x5,x1,lsl 1]
 	add	x5, x24, :lo12:.LANCHOR2
-	ldr	x5, [x5,2192]
+	ldr	x5, [x5,2184]
 	ldr	w6, [x5,x6,lsl 2]
 	str	w6, [x5,x1,lsl 2]
-	ldr	x1, [x2,2080]
+	ldr	x1, [x2,2072]
 	strh	wzr, [x1,x4]
-	b	.L1627
-.L1626:
+	b	.L1692
+.L1691:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1625
-.L1638:
+	b	.L1690
+.L1705:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -11170,57 +11403,68 @@ FtlLoadSysInfo:
 	add	x19, x19, 136
 	adrp	x23, .LANCHOR0
 	str	xzr, [x19,8]
-	ldr	x0, [x20,2112]
-	add	x25, x20, 280
+	ldr	x0, [x20,2104]
+	add	x25, x20, 272
 	str	x0, [x19,16]
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrh	w2, [x0,1960]
-	ldr	x0, [x20,-40]
+	ldrh	w2, [x0,1952]
+	ldr	x0, [x20,-48]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w0, [x20,280]
+	ldrh	w0, [x20,272]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1653
-.L1657:
+	bne	.L1720
+.L1724:
 	mov	w19, -1
-	b	.L1654
-.L1653:
+	b	.L1721
+.L1720:
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	sxth	w24, w0
 	add	w0, w0, 1
 	strh	w0, [x25,2]
-.L1655:
-	tbnz	w24, #31, .L1660
-	ldrh	w0, [x20,280]
+	mov	w25, 61604
+.L1722:
+	tbnz	w24, #31, .L1727
+	ldrh	w0, [x20,272]
 	mov	w1, 1
 	mov	w2, w1
 	orr	w0, w24, w0, lsl 10
 	str	w0, [x19,4]
-	ldr	x0, [x20,-64]
+	ldr	x0, [x20,-72]
 	str	x0, [x19,8]
 	mov	x0, x19
 	bl	FlashReadPages
 	ldr	w0, [x19]
 	cmn	w0, #1
-	beq	.L1656
-.L1660:
+	beq	.L1723
+	ldr	x0, [x20,-72]
+	ldr	w1, [x0]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L1723
+	ldr	x0, [x20,2104]
+	ldrh	w0, [x0]
+	cmp	w0, w25
+	bne	.L1723
+.L1727:
 	add	x24, x22, :lo12:.LANCHOR4
 	add	x19, x21, :lo12:.LANCHOR2
-	add	x20, x19, 224
+	add	x20, x19, 216
 	mov	w2, 48
 	add	x22, x23, :lo12:.LANCHOR0
 	mov	x0, x20
 	ldr	x1, [x24,144]
 	bl	ftl_memcpy
 	ldr	x1, [x24,144]
-	ldrh	w2, [x22,1960]
-	ldr	x0, [x19,-40]
+	ldrh	w2, [x22,1952]
+	ldr	x0, [x19,-48]
 	add	x1, x1, 48
 	lsl	w2, w2, 1
 	bl	ftl_memcpy
-	ldrh	w2, [x22,1960]
+	ldrh	w2, [x22,1952]
 	ldr	x3, [x24,144]
 	ldr	x0, [x23,#:lo12:.LANCHOR0]
 	uxth	x1, w2
@@ -11230,123 +11474,123 @@ FtlLoadSysInfo:
 	lsr	x1, x1, 1
 	add	x1, x3, x1, lsl 2
 	bl	ftl_memcpy
-	ldr	w1, [x19,224]
+	ldr	w1, [x19,216]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	beq	.L1667
-	b	.L1657
-.L1656:
+	beq	.L1737
+	b	.L1724
+.L1723:
 	sub	w24, w24, #1
 	sxth	w24, w24
-	b	.L1655
-.L1667:
+	b	.L1722
+.L1737:
 	ldrb	w1, [x20,10]
-	ldrh	w0, [x22,1974]
+	ldrh	w0, [x22,1966]
 	ldrh	w2, [x20,8]
-	strh	w2, [x19,286]
+	strh	w2, [x19,278]
 	cmp	w1, w0
-	bne	.L1657
-	ldrh	w1, [x22,2026]
-	ldrh	w0, [x22,2032]
+	bne	.L1724
+	ldrh	w1, [x22,2018]
+	ldrh	w0, [x22,2024]
 	str	w2, [x24,192]
 	mul	w1, w1, w2
-	str	w1, [x22,2104]
-	strh	wzr, [x19,298]
+	str	w1, [x22,2096]
+	strh	wzr, [x19,290]
 	mul	w1, w1, w0
-	str	w1, [x22,2068]
-	ldrh	w0, [x22,2118]
-	ldr	w1, [x22,1964]
-	strb	wzr, [x19,302]
+	str	w1, [x22,2060]
+	ldrh	w0, [x22,2110]
+	ldr	w1, [x22,1956]
+	strb	wzr, [x19,294]
 	sub	w0, w1, w0
-	ldrh	w1, [x22,1952]
+	ldrh	w1, [x22,1944]
 	sub	w0, w0, w2
 	ldrh	w2, [x20,14]
-	strb	wzr, [x19,304]
+	strh	w2, [x19,-8]
 	udiv	w0, w0, w1
-	strh	w0, [x19,272]
-	adrp	x0, .LANCHOR2
-	strh	w2, [x0,#:lo12:.LANCHOR2]
+	strb	wzr, [x19,296]
+	strh	w0, [x19,264]
 	ldrh	w0, [x20,16]
 	lsr	w1, w0, 6
-	strh	w1, [x19,2]
+	strh	w1, [x19,-6]
 	mov	w1, -1
-	strh	w1, [x19,296]
+	strh	w1, [x19,288]
 	ldrh	w1, [x20,18]
 	and	w0, w0, 63
-	strh	w1, [x19,48]
+	strh	w1, [x19,40]
 	ldrh	w1, [x20,20]
-	strb	w0, [x19,6]
+	strb	w0, [x19,-2]
 	lsr	w3, w1, 6
 	and	w1, w1, 63
-	strb	w1, [x19,54]
+	strb	w1, [x19,46]
 	ldrb	w1, [x20,12]
-	strb	w1, [x19,56]
+	strb	w1, [x19,48]
 	ldrh	w1, [x20,22]
-	strh	w1, [x19,96]
+	strh	w1, [x19,88]
 	ldrh	w1, [x20,24]
 	ldrb	w0, [x20,11]
-	strh	w3, [x19,50]
+	strh	w3, [x19,42]
 	lsr	w3, w1, 6
 	and	w1, w1, 63
-	strb	w0, [x19,8]
-	strb	w1, [x19,102]
-	strh	w3, [x19,98]
+	strb	w0, [x19]
+	strb	w1, [x19,94]
+	strh	w3, [x19,90]
 	ldrb	w1, [x20,13]
-	strb	w1, [x19,104]
+	strb	w1, [x19,96]
 	ldr	w0, [x20,32]
-	str	w0, [x19,204]
-	ldr	w1, [x19,196]
-	ldr	w0, [x20,40]
-	str	wzr, [x19,184]
-	str	wzr, [x19,172]
-	cmp	w0, w1
+	str	w0, [x19,196]
+	ldr	w1, [x19,188]
+	ldr	w0, [x20,40]
+	str	wzr, [x19,176]
 	str	wzr, [x19,164]
-	str	wzr, [x19,180]
+	cmp	w0, w1
+	str	wzr, [x19,156]
+	str	wzr, [x19,172]
+	str	wzr, [x19,200]
 	str	wzr, [x19,208]
-	str	wzr, [x19,216]
-	str	wzr, [x19,176]
-	bls	.L1661
-	str	w0, [x19,196]
-.L1661:
+	str	wzr, [x19,168]
+	bls	.L1728
+	str	w0, [x19,188]
+.L1728:
 	add	x0, x21, :lo12:.LANCHOR2
-	ldr	w1, [x0,260]
-	ldr	w3, [x0,200]
+	ldr	w1, [x0,252]
+	ldr	w3, [x0,192]
 	cmp	w1, w3
-	bls	.L1662
-	str	w1, [x0,200]
-.L1662:
+	bls	.L1729
+	str	w1, [x0,192]
+.L1729:
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1663
+	beq	.L1730
 	add	x0, x21, :lo12:.LANCHOR2
+	sub	x0, x0, #8
 	bl	make_superblock
-.L1663:
+.L1730:
 	add	x1, x21, :lo12:.LANCHOR2
-	add	x0, x1, 48
-	ldrh	w2, [x1,48]
+	add	x0, x1, 40
+	ldrh	w2, [x1,40]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1664
+	beq	.L1731
 	bl	make_superblock
-.L1664:
+.L1731:
 	add	x1, x21, :lo12:.LANCHOR2
-	add	x0, x1, 96
-	ldrh	w2, [x1,96]
+	add	x0, x1, 88
+	ldrh	w2, [x1,88]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1665
+	beq	.L1732
 	bl	make_superblock
-.L1665:
+.L1732:
 	add	x21, x21, :lo12:.LANCHOR2
 	mov	w1, 65535
-	add	x0, x21, 296
+	add	x0, x21, 288
 	mov	w19, 0
-	ldrh	w2, [x21,296]
+	ldrh	w2, [x21,288]
 	cmp	w2, w1
-	beq	.L1654
+	beq	.L1721
 	bl	make_superblock
-.L1654:
+.L1721:
 	mov	w0, w19
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -11359,69 +11603,70 @@ FtlLoadSysInfo:
 	.global	FtlGcScanTempBlk
 	.type	FtlGcScanTempBlk, %function
 FtlGcScanTempBlk:
-	stp	x29, x30, [sp, -144]!
+	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR1
-	stp	x23, x24, [sp,48]
-	mov	x24, x0
+	stp	x27, x28, [sp,80]
+	mov	x28, x0
 	add	x0, x19, :lo12:.LANCHOR1
-	stp	x25, x26, [sp,64]
 	stp	x21, x22, [sp,32]
-	stp	x27, x28, [sp,80]
-	str	x19, [x29,136]
-	mov	w25, w1
-	ldrh	w28, [x0,3004]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	str	w1, [x29,156]
+	ldrh	w27, [x0,3008]
 	mov	w0, 65535
-	cmp	w28, w0
-	beq	.L1688
-	cbnz	w28, .L1669
-	b	.L1670
-.L1688:
-	mov	w28, 0
-.L1669:
-	adrp	x0, .LANCHOR0+2026
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+2026]
-	cmp	w25, w0
-	bne	.L1671
-.L1670:
+	str	x19, [x29,144]
+	cmp	w27, w0
+	beq	.L1759
+	cbnz	w27, .L1739
+	b	.L1740
+.L1759:
+	mov	w27, 0
+.L1739:
+	adrp	x0, .LANCHOR0+2018
+	ldr	w1, [x29,156]
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2018]
+	cmp	w1, w0
+	bne	.L1741
+.L1740:
 	bl	FtlGcPageVarInit
-.L1671:
-	mov	w23, -1
+.L1741:
+	mov	w22, -1
 	mov	w20, 0
 	mov	w21, 65535
-	adrp	x26, .LANCHOR0
-	adrp	x27, .LANCHOR2
-.L1682:
-	ldrh	w0, [x24]
-	strb	wzr, [x24,8]
+	adrp	x23, .LANCHOR0
+.L1753:
+	ldrh	w0, [x28]
+	strb	wzr, [x28,8]
 	cmp	w0, w21
-	beq	.L1689
-.L1673:
-.L1685:
-	add	x0, x26, :lo12:.LANCHOR0
-	mov	x2, x24
+	beq	.L1760
+.L1743:
+	adrp	x26, .LANCHOR2
+.L1756:
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	x2, x28
 	mov	w19, 0
 	mov	w10, 4
-	ldrh	w6, [x0,1952]
-	ldrh	w9, [x0,2038]
-	add	x6, x24, x6, lsl 1
-.L1674:
+	ldrh	w6, [x0,1944]
+	ldrh	w9, [x0,2030]
+	add	x6, x28, x6, lsl 1
+.L1744:
 	cmp	x2, x6
-	beq	.L1699
+	beq	.L1770
 	ldrh	w1, [x2,16]
 	cmp	w1, w21
-	beq	.L1675
-	add	x7, x27, :lo12:.LANCHOR2
+	beq	.L1745
+	add	x7, x26, :lo12:.LANCHOR2
 	mov	w0, 56
-	orr	w1, w28, w1, lsl 10
+	orr	w1, w27, w1, lsl 10
 	add	w5, w19, 1
 	umull	x0, w19, w0
-	ldr	x8, [x7,2048]
+	ldr	x8, [x7,2040]
 	add	x8, x8, x0
 	str	w1, [x8,4]
-	ldr	x1, [x7,2048]
-	ldr	x7, [x7,904]
+	ldr	x1, [x7,2040]
+	ldr	x7, [x7,896]
 	add	x0, x1, x0
 	mul	w1, w19, w9
 	uxth	w19, w5
@@ -11429,128 +11674,134 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w10
 	add	x1, x7, x1, sxtw 2
 	str	x1, [x0,16]
-.L1675:
+.L1745:
 	add	x2, x2, 2
-	b	.L1674
-.L1699:
-	add	x0, x27, :lo12:.LANCHOR2
+	b	.L1744
+.L1770:
+	add	x0, x26, :lo12:.LANCHOR2
 	mov	w1, w19
 	mov	w2, 0
-	mov	x22, 0
-	ldr	x0, [x0,2048]
+	mov	x24, 0
+	adrp	x25, .LANCHOR2
+	ldr	x0, [x0,2040]
 	bl	FlashReadPages
-.L1677:
-	cmp	w19, w22, uxth
-	bls	.L1700
-	adrp	x0, .LANCHOR2
-	add	x7, x0, :lo12:.LANCHOR2
+.L1747:
+	cmp	w19, w24, uxth
+	bls	.L1771
+	add	x9, x25, :lo12:.LANCHOR2
 	mov	x0, 56
-	str	x7, [x29,96]
-	mul	x8, x22, x0
-	ldr	x10, [x7,2048]
-	str	x8, [x29,104]
-	add	x9, x10, x8
-	str	x10, [x29,112]
-	str	x9, [x29,120]
-	ldr	w1, [x9,4]
-	str	x1, [x29,128]
+	str	x9, [x29,104]
+	mul	x8, x24, x0
+	ldr	x11, [x9,2040]
+	str	x8, [x29,112]
+	add	x10, x11, x8
+	str	x11, [x29,120]
+	str	x10, [x29,128]
+	ldr	w1, [x10,4]
+	str	x1, [x29,136]
 	lsr	x0, x1, 10
 	bl	P2V_plane
 	uxth	w2, w0
-	ldr	x10, [x29,112]
-	ldr	x8, [x29,104]
-	ldr	x1, [x29,128]
-	ldr	x7, [x29,96]
-	ldr	w0, [x10,x8]
-	cbnz	w0, .L1678
-	ldr	x9, [x29,120]
-	add	x22, x22, 1
-	ldr	x8, [x9,16]
+	ldr	x11, [x29,120]
+	ldr	x8, [x29,112]
+	ldr	x1, [x29,136]
+	ldr	x9, [x29,104]
+	ldr	w8, [x11,x8]
+	cbnz	w8, .L1748
+	ldr	x10, [x29,128]
+	add	x24, x24, 1
+	ldr	x8, [x10,16]
 	ldrh	w0, [x8]
 	cmp	w0, w21
-	bne	.L1679
+	bne	.L1749
 	mov	w0, 1
-	str	w0, [x7,2328]
-	b	.L1672
-.L1679:
+	str	w0, [x9,2320]
+	b	.L1742
+.L1749:
 	ldr	w0, [x8,12]
 	ldr	w2, [x8,8]
 	bl	FtlGcUpdatePage
-	b	.L1677
-.L1678:
-	ldr	w2, [x7,160]
-	cbz	w2, .L1680
-	ldrh	w3, [x24]
-	ldr	x2, [x7,-80]
-	ldrh	w2, [x2,x3,lsl 1]
-	cmp	w2, 119
-	bls	.L1681
-.L1680:
-	cmn	w0, #1
-	csel	w1, w1, w23, eq
-.L1681:
-	adrp	x0, .LANCHOR2
-	ldrh	w2, [x24]
-	add	x22, x0, :lo12:.LANCHOR2
-	str	x1, [x29,128]
-	mov	w28, 0
-	ldr	x0, [x22,-40]
+	b	.L1747
+.L1748:
+	ldr	w0, [x9,152]
+	cbnz	w0, .L1750
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1751
+.L1750:
+	add	x0, x25, :lo12:.LANCHOR2
+	ldrh	w2, [x28]
+	ldr	x0, [x0,-88]
+	ldrh	w0, [x0,x2,lsl 1]
+	cmp	w0, 119
+	bls	.L1752
+.L1751:
+	cmn	w8, #1
+	csel	w1, w1, w22, eq
+.L1752:
+	add	x6, x25, :lo12:.LANCHOR2
+	ldrh	w2, [x28]
+	str	x1, [x29,136]
+	mov	w27, 0
+	ldr	x0, [x6,-48]
 	strh	wzr, [x0,x2,lsl 1]
-	ldrh	w0, [x24]
+	ldrh	w0, [x28]
 	bl	INSERT_FREE_LIST
 	mov	w0, -1
-	strh	w0, [x24]
+	strh	w0, [x28]
 	bl	FtlGcPageVarInit
-	ldr	x1, [x29,128]
-	mov	w23, w1
-	b	.L1682
-.L1700:
+	ldr	x1, [x29,136]
+	mov	w22, w1
+	b	.L1753
+.L1771:
+	ldr	w0, [x29,156]
 	add	w20, w20, 1
-	add	w3, w28, 1
-	cmp	w20, w25
-	uxth	w28, w3
-	bcs	.L1684
-.L1686:
+	add	w3, w27, 1
+	cmp	w20, w0
+	uxth	w27, w3
+	bcs	.L1755
+.L1757:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2026]
-	cmp	w0, w28
-	bhi	.L1685
-	b	.L1689
-.L1684:
-	ldr	x0, [x29,136]
+	ldrh	w0, [x0,2018]
+	cmp	w0, w27
+	bhi	.L1756
+	b	.L1760
+.L1755:
+	ldr	x0, [x29,144]
 	add	x1, x0, :lo12:.LANCHOR1
-	ldrh	w0, [x1,3004]
+	ldrh	w0, [x1,3008]
 	cmp	w0, w21
-	beq	.L1686
+	beq	.L1757
 	add	w0, w0, w20
-	strh	w0, [x1,3004]
+	strh	w0, [x1,3008]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2026]
-	cmp	w0, w28
-	bls	.L1686
-	b	.L1687
-.L1689:
+	ldrh	w0, [x0,2018]
+	cmp	w0, w27
+	bls	.L1757
+	b	.L1758
+.L1760:
 	mov	w2, 0
-.L1672:
-	ldr	x0, [x29,136]
-	mov	w1, w28
-	strh	w28, [x24,2]
+.L1742:
+	ldr	x0, [x29,144]
+	mov	w1, w27
+	strh	w27, [x28,2]
 	add	x19, x0, :lo12:.LANCHOR1
 	mov	w0, -1
-	strb	w2, [x24,6]
-	strh	w0, [x19,3004]
-	mov	x0, x24
+	strb	w2, [x28,6]
+	strh	w0, [x19,3008]
+	mov	x0, x28
 	bl	ftl_sb_update_avl_pages
-.L1687:
-	mov	w0, w23
+.L1758:
+	mov	w0, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 144
+	ldp	x29, x30, [sp], 160
 	ret
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	2
@@ -11560,12 +11811,12 @@ FlashProgPages:
 	stp	x29, x30, [sp, -192]!
 	adrp	x6, .LANCHOR1+481
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
 	ldrb	w6, [x6,#:lo12:.LANCHOR1+481]
-	add	x4, x20, :lo12:.LANCHOR0
+	add	x4, x21, :lo12:.LANCHOR0
 	str	w3, [x29,120]
-	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
@@ -11577,52 +11828,52 @@ FlashProgPages:
 	mov	w23, w2
 	mov	w22, 0
 	ldrb	w5, [x5,19]
-	cbz	w4, .L1702
+	cbz	w4, .L1773
 	bl	FlashProgSlc2KPages
-	b	.L1703
-.L1702:
+	b	.L1774
+.L1773:
 	sub	w0, w5, #1
 	mov	w27, 56
 	mov	x28, 24
 	str	w0, [x29,116]
-.L1753:
+.L1825:
 	cmp	w22, w25
-	bcs	.L1754
-	umull	x21, w22, w27
+	bcs	.L1826
+	umull	x20, w22, w27
 	sub	w4, w25, w22
 	add	x2, x29, 128
-	add	x26, x19, x21
+	add	x26, x19, x20
 	mov	w1, w23
 	mov	x0, x26
 	add	x3, x29, 132
 	bl	LogAddr2PhyAddr
 	mov	w24, w0
-	add	x2, x20, :lo12:.LANCHOR0
+	add	x2, x21, :lo12:.LANCHOR0
 	ldr	w0, [x29,132]
 	ldrb	w4, [x2,1845]
 	cmp	w0, w4
-	bcc	.L1704
+	bcc	.L1775
 	mov	w0, -1
-	str	w0, [x19,x21]
-	b	.L1705
-.L1704:
-	ldrb	w1, [x2,1945]
+	str	w0, [x19,x20]
+	b	.L1776
+.L1775:
+	ldrb	w1, [x2,1937]
 	add	x3, x2, 1652
 	cmp	w1, wzr
 	uxtw	x1, w0
 	csel	w24, w24, wzr, ne
 	madd	x0, x1, x28, x3
 	ldr	x0, [x0,8]
-	cbz	x0, .L1707
+	cbz	x0, .L1778
 	cmp	w4, 1
-	bne	.L1708
+	bne	.L1779
 	ldr	x0, [x2,128]
 	bl	NandcIqrWaitFlashReady
-.L1708:
+.L1779:
 	ldrb	w0, [x29,132]
 	bl	FlashWaitCmdDone
-.L1707:
-	add	x0, x20, :lo12:.LANCHOR0
+.L1778:
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,132]
 	add	x0, x0, 1652
 	ldr	w1, [x29,128]
@@ -11630,25 +11881,25 @@ FlashProgPages:
 	str	x26, [x0,8]
 	str	xzr, [x0,16]
 	str	w1, [x0,4]
-	cbz	w24, .L1709
+	cbz	w24, .L1780
 	add	w1, w22, 1
 	umull	x1, w1, w27
 	add	x1, x19, x1
 	str	x1, [x0,16]
-.L1709:
-	add	x1, x20, :lo12:.LANCHOR0
+.L1780:
+	add	x1, x21, :lo12:.LANCHOR0
 	add	x0, x1, x2
 	madd	x2, x2, x28, x1
-	ldrb	w21, [x0,1848]
+	ldrb	w20, [x0,1848]
 	ldrb	w0, [x1,1845]
-	strb	w21, [x2,1652]
+	strb	w20, [x2,1652]
 	cmp	w0, 1
-	bne	.L1710
-	mov	w0, w21
+	bne	.L1781
+	mov	w0, w20
 	bl	NandcWaitFlashReady
-	b	.L1711
-.L1710:
-	mov	w0, w21
+	b	.L1782
+.L1781:
+	mov	w0, w20
 	str	x1, [x29,104]
 	bl	NandcFlashCs
 	ldr	x1, [x29,104]
@@ -11657,130 +11908,134 @@ FlashProgPages:
 	ldr	w0, [x1,x0,lsl 2]
 	ldr	w1, [x29,128]
 	cmp	w0, wzr
-	mov	w0, w21
+	mov	w0, w20
 	cset	w2, ne
 	bl	FlashWaitReadyEN
-	mov	w0, w21
+	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1711:
+.L1782:
 	ldr	w0, [x29,116]
-	cmp	w0, 5
-	bhi	.L1712
-	add	x2, x20, :lo12:.LANCHOR0
-	add	x0, x2, x21, sxtw
+	cmp	w0, 6
+	bhi	.L1783
+	add	x2, x21, :lo12:.LANCHOR0
+	add	x0, x2, x20, sxtw
 	ldrb	w0, [x0,1616]
-	cbz	w0, .L1712
+	cbz	w0, .L1783
 	ldrb	w1, [x2,761]
-	mov	w0, w21
+	mov	w0, w20
 	add	x2, x2, 764
 	mov	w3, 0
 	bl	HynixSetRRPara
-.L1712:
-	mov	w0, w21
+.L1783:
+	mov	w0, w20
 	bl	NandcFlashCs
 	cmp	w23, 1
-	bne	.L1713
-	add	x0, x20, :lo12:.LANCHOR0
+	bne	.L1784
+	add	x0, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbz	w0, .L1713
-	mov	w0, w21
+	cbz	w0, .L1784
+	mov	w0, w20
 	bl	flash_enter_slc_mode
-.L1713:
+	b	.L1785
+.L1784:
+	mov	w0, w20
+	bl	flash_exit_slc_mode
+.L1785:
 	ldr	w1, [x29,128]
-	mov	w0, w21
+	mov	w0, w20
 	bl	FlashProgFirstCmd
 	ldrb	w2, [x29,124]
-	mov	w0, w21
+	mov	w0, w20
 	ldr	x3, [x26,8]
 	mov	w1, 1
 	ldr	x4, [x26,16]
 	bl	NandcXferData
-	cbz	w24, .L1714
+	cbz	w24, .L1786
 	ldr	w1, [x29,128]
-	mov	w0, w21
-	add	x26, x20, :lo12:.LANCHOR0
+	mov	w0, w20
+	add	x26, x21, :lo12:.LANCHOR0
 	bl	FlashProgDpFirstCmd
 	ldr	w1, [x29,132]
 	add	x0, x26, 708
 	ldr	w0, [x0,x1,lsl 2]
 	ldr	w1, [x29,128]
 	cmp	w0, wzr
-	mov	w0, w21
+	mov	w0, w20
 	cset	w2, ne
 	bl	FlashWaitReadyEN
 	ldr	w2, [x26,12]
-	mov	w0, w21
+	mov	w0, w20
 	ldr	w1, [x29,128]
 	add	w1, w2, w1
 	bl	FlashProgDpSecondCmd
 	add	w4, w22, 1
 	ldrb	w2, [x29,124]
-	mov	w0, w21
+	mov	w0, w20
 	mov	w1, 1
 	umull	x4, w4, w27
 	add	x4, x19, x4
 	ldr	x3, [x4,8]
 	ldr	x4, [x4,16]
 	bl	NandcXferData
-.L1714:
+.L1786:
 	ldr	w1, [x29,128]
-	mov	w0, w21
+	mov	w0, w20
 	add	w22, w22, w24
 	bl	FlashProgSecondCmd
-	mov	w0, w21
+	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1705:
+.L1776:
 	add	w22, w22, 1
-	b	.L1753
-.L1754:
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	x21, 0
-	add	x22, x20, 1652
+	b	.L1825
+.L1826:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	x20, 0
+	add	x22, x21, 1652
 	mov	x24, 24
-	ldr	x0, [x20,128]
+	ldr	x0, [x21,128]
 	bl	NandcIqrWaitFlashReady
-.L1716:
-	ldrb	w0, [x20,1845]
-	cmp	w0, w21
-	bls	.L1755
-	mov	w0, w21
+.L1788:
+	ldrb	w0, [x21,1845]
+	cmp	w0, w20
+	bls	.L1827
+	mov	w0, w20
 	bl	FlashWaitCmdDone
 	cmp	w23, 1
-	bne	.L1717
-	ldrb	w0, [x20,120]
-	cbz	w0, .L1717
-	mul	x0, x21, x24
+	bne	.L1789
+	ldrb	w0, [x21,120]
+	cbz	w0, .L1789
+	mul	x0, x20, x24
 	ldrb	w0, [x0,x22]
 	bl	flash_exit_slc_mode
-.L1717:
-	add	x21, x21, 1
-	b	.L1716
-.L1755:
+.L1789:
+	add	x20, x20, 1
+	b	.L1788
+.L1827:
 	ldr	w0, [x29,120]
-	cbnz	w0, .L1719
-.L1727:
+	cbnz	w0, .L1791
+.L1799:
 	mov	w0, 0
-	b	.L1703
-.L1719:
-	adrp	x24, .LC100
-	adrp	x26, .LC99
-	adrp	x27, .LC98
+	b	.L1774
+.L1791:
+	adrp	x24, .LC103
+	adrp	x26, .LC102
+	adrp	x27, .LC101
 	mov	w21, 0
-	add	x24, x24, :lo12:.LC100
-	add	x26, x26, :lo12:.LC99
-	add	x27, x27, :lo12:.LC98
-.L1720:
+	add	x24, x24, :lo12:.LC103
+	add	x26, x26, :lo12:.LC102
+	add	x27, x27, :lo12:.LC101
+.L1792:
 	cmp	w21, w25
-	beq	.L1727
+	beq	.L1799
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1721
-	adrp	x0, .LC97
+	bne	.L1793
+	adrp	x0, .LC100
 	ldr	w1, [x19,4]
-	add	x0, x0, :lo12:.LC97
+	add	x0, x0, :lo12:.LC100
 	bl	printk
-	b	.L1722
-.L1721:
+	b	.L1794
+.L1793:
 	adrp	x20, .LANCHOR4
 	sub	w4, w25, w21
 	add	x22, x20, :lo12:.LANCHOR4
@@ -11807,44 +12062,44 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w22, [x29,136]
 	cmn	w22, #1
-	bne	.L1723
+	bne	.L1795
 	ldr	w1, [x19,4]
 	mov	x0, x27
 	bl	printk
 	str	w22, [x19]
-.L1723:
+.L1795:
 	ldr	x0, [x19,16]
-	cbz	x0, .L1724
+	cbz	x0, .L1796
 	ldr	w2, [x0]
 	add	x0, x20, :lo12:.LANCHOR4
 	ldr	x0, [x0,104]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1724
+	beq	.L1796
 	ldr	w1, [x19,4]
 	mov	x0, x26
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1724:
+.L1796:
 	ldr	x0, [x19,8]
-	cbz	x0, .L1722
+	cbz	x0, .L1794
 	add	x20, x20, :lo12:.LANCHOR4
 	ldr	w2, [x0]
 	ldr	x0, [x20,96]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1722
+	beq	.L1794
 	ldr	w1, [x19,4]
 	mov	x0, x24
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1722:
+.L1794:
 	add	w21, w21, 1
 	add	x19, x19, 56
-	b	.L1720
-.L1703:
+	b	.L1792
+.L1774:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -11854,8 +12109,8 @@ FlashProgPages:
 	ret
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
-	.type	FlashTestBlk.part.17, %function
-FlashTestBlk.part.17:
+	.type	FlashTestBlk.part.16, %function
+FlashTestBlk.part.16:
 	stp	x29, x30, [sp, -160]!
 	mov	w1, 165
 	mov	w2, 32
@@ -11887,15 +12142,15 @@ FlashTestBlk.part.17:
 	ldr	w0, [x29,40]
 	mov	w1, 0
 	mov	w2, 1
-	cmn	w0, #1
+	cmp	w0, wzr
 	add	x0, x29, 40
-	csetm	w19, eq
+	csetm	w19, ne
 	bl	FlashEraseBlocks
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 160
 	ret
-	.size	FlashTestBlk.part.17, .-FlashTestBlk.part.17
+	.size	FlashTestBlk.part.16, .-FlashTestBlk.part.16
 	.align	2
 	.global	FlashTestBlk
 	.type	FlashTestBlk, %function
@@ -11907,10 +12162,10 @@ FlashTestBlk:
 	ldr	w2, [x0,#:lo12:.LANCHOR4+68]
 	mov	w0, 0
 	cmp	w1, w2
-	bcc	.L1758
+	bcc	.L1830
 	mov	w0, w1
-	bl	FlashTestBlk.part.17
-.L1758:
+	bl	FlashTestBlk.part.16
+.L1830:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -11919,27 +12174,26 @@ FlashTestBlk:
 	.type	FlashMakeFactorBbt, %function
 FlashMakeFactorBbt:
 	stp	x29, x30, [sp, -240]!
-	adrp	x4, .LANCHOR0
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR4
-	add	x0, x22, :lo12:.LANCHOR4
+	adrp	x21, .LANCHOR4
+	add	x0, x21, :lo12:.LANCHOR4
 	stp	x19, x20, [sp,16]
-	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	stp	x23, x24, [sp,48]
-	mov	x20, x4
-	mov	w19, 0
+	stp	x25, x26, [sp,64]
+	adrp	x19, .LANCHOR0
+	mov	w20, 0
 	ldr	x0, [x0,88]
-	add	x25, x20, :lo12:.LANCHOR0
 	str	x0, [x29,160]
-	add	x0, x4, :lo12:.LANCHOR0
-	add	x28, x25, 708
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x28, x19, 708
 	ldrh	w1, [x0,180]
-	ldrh	w21, [x0,182]
-	mul	w21, w1, w21
+	ldrh	w23, [x0,182]
+	mul	w23, w1, w23
 	ldr	x1, [x0,744]
-	uxth	w21, w21
+	uxth	w23, w23
 	ldrb	w1, [x1,24]
 	str	w1, [x29,128]
 	ldrh	w1, [x0,12]
@@ -11950,67 +12204,67 @@ FlashMakeFactorBbt:
 	ldr	w0, [x29,172]
 	csel	w0, w1, w0, eq
 	str	w0, [x29,172]
-	adrp	x0, .LC103
+	adrp	x0, .LC106
 	mov	w1, 1
-	add	x0, x0, :lo12:.LC103
+	add	x0, x0, :lo12:.LC106
 	bl	printk
-	add	x0, x22, :lo12:.LANCHOR4
+	add	x0, x21, :lo12:.LANCHOR4
 	mov	w1, 0
 	mov	w2, 4096
 	ldr	x0, [x0,88]
 	bl	ftl_memset
-	lsr	w0, w21, 4
+	lsr	w0, w23, 4
 	str	w0, [x29,168]
 	ldr	w0, [x29,128]
 	and	w0, w0, 1
 	str	w0, [x29,116]
-	sub	w0, w21, #1
+	sub	w0, w23, #1
 	uxth	w0, w0
 	str	w0, [x29,124]
-.L1762:
-	ldrb	w0, [x25,1845]
-	cmp	w0, w19
-	bls	.L1813
-	add	x0, x22, :lo12:.LANCHOR4
-	sxtw	x24, w19
-	add	x0, x0, 120
-	ldrh	w20, [x0,w19,sxtw 1]
-	cbnz	w20, .L1792
-	ldrh	w2, [x25,188]
-	mov	w1, w20
-	ldr	x0, [x25,1856]
-	mov	w26, w20
+.L1834:
+	ldrb	w0, [x19,1845]
+	cmp	w0, w20
+	bls	.L1885
+	add	x0, x21, :lo12:.LANCHOR4
+	sxtw	x25, w20
+	add	x1, x0, 120
+	ldrh	w22, [x1,w20,sxtw 1]
+	cbnz	w22, .L1864
+	ldrh	w2, [x19,188]
+	mov	w1, w22
+	ldr	x0, [x0,32]
+	mov	w26, w22
 	lsl	w2, w2, 9
-	mov	w23, w20
+	mov	w24, w22
 	bl	ftl_memset
-	add	x0, x25, x24
+	add	x0, x19, x25
 	ldrb	w27, [x0,1848]
 	ldr	w0, [x29,128]
 	and	w0, w0, 2
 	uxtb	w0, w0
 	str	w0, [x29,120]
-.L1764:
+.L1836:
 	uxth	w0, w26
 	str	w0, [x29,144]
-	cmp	w0, w21
-	bcs	.L1774
+	cmp	w0, w23
+	bcs	.L1846
 	mov	w0, -1
 	strb	w0, [x29,182]
 	strb	w0, [x29,183]
 	ldr	w0, [x29,116]
-	cbz	w0, .L1766
-	ldr	w3, [x28,x24,lsl 2]
+	cbz	w0, .L1838
+	ldr	w3, [x28,x25,lsl 2]
 	mov	w0, w27
 	add	x2, x29, 182
-	add	w3, w20, w3
+	add	w3, w22, w3
 	str	x3, [x29,104]
 	mov	w1, w3
 	bl	FlashReadSpare
-	ldrb	w0, [x25,8]
+	ldrb	w0, [x19,8]
 	ldr	x3, [x29,104]
 	cmp	w0, 1
-	bne	.L1766
-	ldr	w1, [x25,12]
+	bne	.L1838
+	ldr	w1, [x19,12]
 	mov	w0, w27
 	add	x2, x29, 183
 	add	w1, w3, w1
@@ -12019,199 +12273,204 @@ FlashMakeFactorBbt:
 	ldrb	w1, [x29,183]
 	and	w0, w1, w0
 	strb	w0, [x29,182]
-.L1766:
+.L1838:
 	ldr	w0, [x29,120]
-	cbz	w0, .L1768
-	ldr	x0, [x25,744]
+	cbz	w0, .L1840
+	ldr	x0, [x19,744]
 	add	x2, x29, 183
 	ldrh	w1, [x0,10]
-	ldr	w0, [x28,x24,lsl 2]
+	ldr	w0, [x28,x25,lsl 2]
 	sub	w1, w1, #1
 	add	w1, w1, w0
 	mov	w0, w27
-	add	w1, w1, w20
+	add	w1, w1, w22
 	bl	FlashReadSpare
-.L1768:
-	ldr	x0, [x25,744]
+.L1840:
+	ldr	x0, [x19,744]
 	ldrb	w1, [x29,182]
 	ldrb	w0, [x0,7]
 	cmp	w0, 8
-	beq	.L1793
+	beq	.L1865
 	cmp	w0, 1
-	bne	.L1769
-.L1793:
+	bne	.L1841
+.L1865:
 	mov	w0, 1
-	cbz	w1, .L1771
+	cbz	w1, .L1843
 	ldrb	w0, [x29,183]
 	cmp	w0, wzr
 	cset	w0, eq
-	b	.L1771
-.L1769:
+	b	.L1843
+.L1841:
 	cmp	w1, 255
 	mov	w0, 1
-	bne	.L1771
+	bne	.L1843
 	ldrb	w0, [x29,183]
 	cmp	w0, 255
 	cset	w0, ne
-.L1771:
+.L1843:
 	ldr	x1, [x29,128]
-	tbz	x1, 2, .L1772
-	ldr	w1, [x28,x24,lsl 2]
+	tbz	x1, 2, .L1844
+	ldr	w1, [x28,x25,lsl 2]
 	mov	w0, w27
-	add	w1, w20, w1
+	add	w1, w22, w1
 	bl	SandiskProgTestBadBlock
-.L1772:
-	cbz	w0, .L1773
-	adrp	x0, .LC104
-	mov	w1, w19
+.L1844:
+	cbz	w0, .L1845
+	adrp	x0, .LC107
+	mov	w1, w20
 	mov	w2, w26
-	add	x0, x0, :lo12:.LC104
-	add	w23, w23, 1
+	add	x0, x0, :lo12:.LC107
+	add	w24, w24, 1
 	bl	printk
-	ldr	x0, [x29,144]
-	uxth	w23, w23
-	ldr	x2, [x25,1856]
-	ubfx	x1, x0, 5, 11
+	add	x0, x21, :lo12:.LANCHOR4
+	ldr	x1, [x29,144]
 	ldrb	w3, [x29,144]
+	uxth	w24, w24
+	ubfx	x1, x1, 5, 11
 	lsl	x1, x1, 2
+	ldr	x2, [x0,32]
 	mov	w0, 1
 	lsl	w0, w0, w3
 	ldr	w3, [x2,x1]
 	orr	w0, w3, w0
 	str	w0, [x2,x1]
 	ldr	w1, [x29,168]
-	ldrb	w0, [x25,1845]
+	ldrb	w0, [x19,1845]
 	mul	w0, w1, w0
-	cmp	w23, w0
-	bgt	.L1774
-.L1773:
+	cmp	w24, w0
+	bgt	.L1846
+.L1845:
 	ldr	w0, [x29,172]
 	add	w26, w26, 1
-	add	w20, w20, w0
-	b	.L1764
-.L1774:
-	adrp	x0, .LC105
-	mov	w1, w19
-	add	x0, x0, :lo12:.LC105
-	mov	w2, w23
+	add	w22, w22, w0
+	b	.L1836
+.L1846:
+	adrp	x0, .LC108
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC108
+	mov	w2, w24
 	bl	printk
-	ldrb	w0, [x25,1845]
+	ldrb	w0, [x19,1845]
 	ldr	w1, [x29,168]
 	mul	w0, w1, w0
-	cmp	w23, w0
-	blt	.L1776
-	ldrh	w2, [x25,188]
+	cmp	w24, w0
+	blt	.L1848
+	add	x0, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x19,188]
 	mov	w1, 0
-	ldr	x0, [x25,1856]
 	lsl	w2, w2, 9
+	ldr	x0, [x0,32]
 	bl	ftl_memset
-.L1776:
-	cbnz	w19, .L1778
-	add	x0, x22, :lo12:.LANCHOR4
-	adrp	x26, .LC106
-	mov	w20, w19
-	add	x26, x26, :lo12:.LC106
-	mov	w23, 1
+.L1848:
+	cbnz	w20, .L1850
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x26, .LC109
+	mov	w22, w20
+	add	x26, x26, :lo12:.LC109
+	mov	w24, 1
 	ldrh	w27, [x0,68]
-.L1779:
-	ldrb	w0, [x25,9]
+.L1851:
+	ldrb	w0, [x19,9]
 	cmp	w0, w27
-	bls	.L1814
+	bls	.L1886
 	mov	w0, w27
 	bl	FlashTestBlk
-	cbz	w0, .L1780
+	cbz	w0, .L1852
 	mov	w1, w27
 	mov	x0, x26
-	add	w20, w20, 1
+	add	w22, w22, 1
 	bl	printk
+	add	x0, x21, :lo12:.LANCHOR4
 	ubfx	x1, x27, 5, 11
-	ldr	x2, [x25,1856]
 	lsl	x1, x1, 2
-	lsl	w0, w23, w27
-	uxth	w20, w20
+	uxth	w22, w22
+	ldr	x2, [x0,32]
+	lsl	w0, w24, w27
 	ldr	w3, [x2,x1]
 	orr	w0, w3, w0
 	str	w0, [x2,x1]
-.L1780:
+.L1852:
 	add	w27, w27, 1
 	uxth	w27, w27
-	b	.L1779
-.L1814:
-	adrp	x26, .LC106
-	ldr	w23, [x29,124]
-	sub	w27, w21, #50
-	add	x26, x26, :lo12:.LC106
-.L1782:
-	cmp	w23, w27
-	ble	.L1815
-	mov	w0, w23
+	b	.L1851
+.L1886:
+	adrp	x26, .LC109
+	ldr	w24, [x29,124]
+	sub	w27, w23, #50
+	add	x26, x26, :lo12:.LC109
+.L1854:
+	cmp	w24, w27
+	ble	.L1887
+	mov	w0, w24
 	bl	FlashTestBlk
-	cbz	w0, .L1783
-	mov	w1, w23
+	cbz	w0, .L1855
+	mov	w1, w24
 	mov	x0, x26
 	bl	printk
-	ubfx	x1, x23, 5, 11
-	ldr	x3, [x25,1856]
+	add	x0, x21, :lo12:.LANCHOR4
+	ubfx	x1, x24, 5, 11
 	lsl	x1, x1, 2
+	ldr	x3, [x0,32]
 	mov	w0, 1
-	lsl	w0, w0, w23
-	ldr	w5, [x3,x1]
-	orr	w0, w5, w0
+	lsl	w0, w0, w24
+	ldr	w4, [x3,x1]
+	orr	w0, w4, w0
 	str	w0, [x3,x1]
-.L1783:
-	sub	w2, w23, #1
-	uxth	w23, w2
-	b	.L1782
-.L1815:
-	add	x1, x22, :lo12:.LANCHOR4
-	ldrb	w0, [x25,9]
-	ldr	w1, [x1,68]
-	sub	w0, w0, w1
-	cmp	w20, w0
-	bcc	.L1778
-	ldrh	w2, [x25,188]
+.L1855:
+	sub	w2, w24, #1
+	uxth	w24, w2
+	b	.L1854
+.L1887:
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrb	w0, [x19,9]
+	ldr	w2, [x1,68]
+	sub	w0, w0, w2
+	cmp	w22, w0
+	bcc	.L1850
+	ldrh	w2, [x19,188]
+	ldr	x0, [x1,32]
 	mov	w1, 0
-	ldr	x0, [x25,1856]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1778:
-	adrp	x23, .LC107
+.L1850:
+	adrp	x24, .LC110
 	ldr	w27, [x29,124]
-	mul	w26, w19, w21
-	add	x23, x23, :lo12:.LC107
-	add	x20, x22, :lo12:.LANCHOR4
-.L1786:
+	mul	w26, w20, w23
+	add	x24, x24, :lo12:.LC110
+	mov	w22, -3872
+.L1858:
 	mov	w2, w27
-	mov	x0, x23
-	mov	w1, w19
+	mov	x0, x24
+	mov	w1, w20
 	bl	printk
-	ldr	x2, [x25,1856]
-.L1787:
+	add	x0, x21, :lo12:.LANCHOR4
+	ldr	x2, [x0,32]
+.L1859:
 	ubfx	x0, x27, 5, 11
 	ldr	w0, [x2,x0,lsl 2]
 	lsr	w0, w0, w27
 	and	w1, w0, 1
-	tbz	x0, 0, .L1816
+	tbz	x0, 0, .L1888
 	sub	w27, w27, #1
 	uxth	w27, w27
-	b	.L1787
-.L1816:
-	add	x0, x20, 120
-	mov	w2, -3872
-	strh	w27, [x0,x24,lsl 1]
-	ldr	x0, [x29,160]
-	strh	w2, [x0]
-	strh	w27, [x0,2]
-	strh	w1, [x0,8]
-	mov	w1, 1
-	ldr	x0, [x25,1856]
-	mov	w2, w1
-	str	x0, [x29,192]
-	ldr	x0, [x20,88]
+	b	.L1859
+.L1888:
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x2, x0, 120
+	strh	w27, [x2,x25,lsl 1]
+	ldr	x2, [x29,160]
+	strh	w22, [x2]
+	strh	w27, [x2,2]
+	strh	w1, [x2,8]
+	ldr	x1, [x0,32]
+	ldr	x0, [x0,88]
 	str	x0, [x29,200]
 	add	w0, w27, w26
+	str	x1, [x29,192]
 	lsl	w0, w0, 10
+	mov	w1, 1
 	str	w0, [x29,188]
+	mov	w2, w1
 	add	x0, x29, 184
 	bl	FlashEraseBlocks
 	mov	w1, 1
@@ -12220,15 +12479,15 @@ FlashMakeFactorBbt:
 	mov	w3, w1
 	bl	FlashProgPages
 	ldr	w0, [x29,184]
-	cbz	w0, .L1792
+	cbz	w0, .L1864
 	sub	w27, w27, #1
 	uxth	w27, w27
-	b	.L1786
-.L1792:
-	add	w19, w19, 1
-	uxtb	w19, w19
-	b	.L1762
-.L1813:
+	b	.L1858
+.L1864:
+	add	w20, w20, 1
+	uxtb	w20, w20
+	b	.L1834
+.L1885:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -12250,51 +12509,51 @@ FtlLowFormatEraseBlock:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	stp	x23, x24, [sp,48]
-	uxth	w25, w0
+	uxth	w26, w0
 	mov	w28, 0
 	ldrb	w0, [x20,120]
-	uxtb	w26, w1
-	str	w0, [x29,124]
+	uxtb	w25, w1
+	str	w0, [x29,120]
 	mov	w21, w28
-	str	w25, [x20,2108]
+	str	w26, [x20,2100]
 	mov	w19, w28
 	adrp	x24, .LANCHOR2
 	mov	w27, 56
-.L1818:
-	ldrh	w0, [x20,1952]
+.L1890:
+	ldrh	w0, [x20,1944]
 	cmp	w0, w28
-	bls	.L1851
+	bls	.L1934
 	add	x1, x24, :lo12:.LANCHOR2
 	umull	x0, w28, w27
-	ldr	x1, [x1,-88]
+	ldr	x1, [x1,-96]
 	str	wzr, [x1,x0]
-	add	x0, x20, 1984
-	mov	w1, w25
+	add	x0, x20, 1976
+	mov	w1, w26
 	ldrb	w0, [x0,w28,sxtw]
 	bl	V2P_block
 	uxth	w23, w0
 	mov	w1, w23
-	cbz	w26, .L1819
+	cbz	w25, .L1891
 	str	x1, [x29,112]
 	bl	IsBlkInVendorPart
 	ldr	x1, [x29,112]
-	cbnz	w0, .L1820
-.L1819:
+	cbnz	w0, .L1892
+.L1891:
 	mov	w0, w1
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1821
+	cbnz	w0, .L1893
 	adrp	x1, .LANCHOR2
 	lsl	w23, w23, 10
 	add	x3, x1, :lo12:.LANCHOR2
 	mov	w2, 4
 	umull	x0, w21, w27
-	ldr	x1, [x3,-88]
+	ldr	x1, [x3,-96]
 	add	x1, x1, x0
 	str	w23, [x1,4]
-	ldr	x1, [x3,-88]
-	ldr	x3, [x3,2120]
+	ldr	x1, [x3,-96]
+	ldr	x3, [x3,2112]
 	add	x1, x1, x0
-	ldrh	w0, [x20,2038]
+	ldrh	w0, [x20,2030]
 	mul	w0, w21, w0
 	add	w21, w21, 1
 	str	xzr, [x1,8]
@@ -12302,17 +12561,17 @@ FtlLowFormatEraseBlock:
 	uxth	w21, w21
 	add	x0, x3, x0, sxtw 2
 	str	x0, [x1,16]
-	b	.L1820
-.L1821:
+	b	.L1892
+.L1893:
 	add	w19, w19, 1
 	uxth	w19, w19
-.L1820:
+.L1892:
 	add	w2, w28, 1
 	uxth	w28, w2
-	b	.L1818
-.L1851:
-	cbz	w21, .L1824
-	ldr	w0, [x29,124]
+	b	.L1890
+.L1934:
+	cbz	w21, .L1896
+	ldr	w0, [x29,120]
 	adrp	x20, .LANCHOR2
 	mov	w2, w21
 	mov	x24, 0
@@ -12321,144 +12580,167 @@ FtlLowFormatEraseBlock:
 	cset	w23, ne
 	mov	x27, 56
 	mov	w1, w23
-	ldr	x0, [x0,-88]
+	ldr	x0, [x0,-96]
 	bl	FlashEraseBlocks
-.L1825:
+.L1897:
 	cmp	w21, w24, uxth
-	bls	.L1852
+	bls	.L1935
 	add	x1, x20, :lo12:.LANCHOR2
 	mul	x0, x24, x27
-	ldr	x1, [x1,-88]
+	ldr	x1, [x1,-96]
 	add	x2, x1, x0
 	ldr	w0, [x1,x0]
 	cmn	w0, #1
-	bne	.L1826
+	bne	.L1898
 	ldr	w0, [x2,4]
 	add	w19, w19, 1
 	lsr	w0, w0, 10
 	uxth	w19, w19
 	bl	FtlBbmMapBadBlock
-.L1826:
+.L1898:
 	add	x24, x24, 1
-	b	.L1825
-.L1852:
-	cbnz	w26, .L1828
-	mov	w0, 6
+	b	.L1897
+.L1935:
+	cbnz	w25, .L1900
 	uxth	w23, w23
-	str	w0, [x29,124]
+	mov	w28, 6
 	mov	w27, 1
-	b	.L1829
-.L1828:
+	b	.L1901
+.L1900:
 	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w27, [x0,2020]
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L1916
+	lsr	w28, w27, 2
 	mov	w23, 1
-	ldrh	w27, [x0,2028]
-	lsr	w0, w27, 2
-	str	w0, [x29,124]
-.L1829:
+	b	.L1901
+.L1916:
+	mov	w23, 1
+	mov	w28, w23
+.L1901:
+	add	x0, x22, :lo12:.LANCHOR0
 	mov	w24, 0
-	add	x22, x22, :lo12:.LANCHOR0
-.L1839:
-	mov	w28, 0
-	mov	w21, w28
-.L1830:
-	ldrh	w0, [x22,1952]
-	cmp	w0, w28
-	bls	.L1853
+	str	x0, [x29,120]
+.L1910:
+	mov	w22, 0
+	mov	w21, w22
+.L1902:
+	ldr	x0, [x29,120]
+	ldrh	w0, [x0,1944]
+	cmp	w0, w22
+	bls	.L1936
 	add	x1, x20, :lo12:.LANCHOR2
 	mov	w0, 56
-	umull	x0, w28, w0
-	ldr	x1, [x1,-88]
+	umull	x0, w22, w0
+	ldr	x1, [x1,-96]
 	str	wzr, [x1,x0]
-	add	x0, x22, 1984
-	mov	w1, w25
-	ldrb	w0, [x0,w28,sxtw]
+	mov	w1, w26
+	ldr	x0, [x29,120]
+	add	x0, x0, 1976
+	ldrb	w0, [x0,w22,sxtw]
 	bl	V2P_block
 	uxth	w2, w0
 	str	w2, [x29,112]
 	mov	w1, w2
-	cbz	w26, .L1831
+	cbz	w25, .L1903
 	str	x1, [x29,104]
 	bl	IsBlkInVendorPart
 	ldr	x1, [x29,104]
-	cbnz	w0, .L1832
-.L1831:
+	cbnz	w0, .L1904
+.L1903:
 	mov	w0, w1
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1832
+	cbnz	w0, .L1904
 	add	x3, x20, :lo12:.LANCHOR2
 	mov	w0, 56
 	ldr	w2, [x29,112]
 	umull	x0, w21, w0
-	ldr	x1, [x3,-88]
+	ldr	x1, [x3,-96]
 	add	w4, w24, w2, lsl 10
 	mov	w2, 4
 	add	x1, x1, x0
 	str	w4, [x1,4]
-	ldr	x1, [x3,-88]
+	ldr	x1, [x3,-96]
 	add	x1, x1, x0
-	ldr	x0, [x3,2096]
-	ldr	x3, [x3,2104]
+	ldr	x0, [x3,2088]
+	ldr	x3, [x3,2096]
 	str	x0, [x1,8]
-	ldrh	w0, [x22,2038]
+	ldr	x0, [x29,120]
+	ldrh	w0, [x0,2030]
 	mul	w0, w21, w0
 	add	w21, w21, 1
 	sdiv	w0, w0, w2
 	uxth	w21, w21
 	add	x0, x3, x0, sxtw 2
 	str	x0, [x1,16]
-.L1832:
-	add	w2, w28, 1
-	uxth	w28, w2
-	b	.L1830
-.L1853:
-	cbz	w21, .L1824
+.L1904:
+	add	w2, w22, 1
+	uxth	w22, w2
+	b	.L1902
+.L1936:
+	cbz	w21, .L1896
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w1, w21
 	mov	w2, w23
 	mov	w3, 1
-	mov	x28, 0
-	ldr	x0, [x0,-88]
+	ldr	x0, [x0,-96]
 	bl	FlashProgPages
-.L1835:
-	cmp	w21, w28, uxth
-	bls	.L1854
-	add	x1, x20, :lo12:.LANCHOR2
+	mov	x1, 0
+.L1907:
+	cmp	w21, w1, uxth
+	bls	.L1937
+	add	x2, x20, :lo12:.LANCHOR2
 	mov	x0, 56
-	mul	x0, x28, x0
-	ldr	x3, [x1,-88]
-	add	x1, x3, x0
-	ldr	w0, [x3,x0]
-	cmn	w0, #1
-	bne	.L1836
-	ldr	w0, [x1,4]
+	mul	x0, x1, x0
+	ldr	x2, [x2,-96]
+	add	x3, x2, x0
+	ldr	w0, [x2,x0]
+	cbz	w0, .L1908
+	ldr	w0, [x3,4]
 	add	w19, w19, 1
+	str	x1, [x29,112]
 	lsr	w0, w0, 10
 	uxth	w19, w19
 	bl	FtlBbmMapBadBlock
-	b	.L1837
-.L1836:
-	cbz	w26, .L1837
-	ldr	w0, [x1,4]
+	ldr	x1, [x29,112]
+.L1908:
+	add	x1, x1, 1
+	b	.L1907
+.L1937:
+	add	w24, w24, w28
+	uxth	w24, w24
+	cmp	w24, w27
+	bcc	.L1910
+	mov	x22, 0
+	mov	x24, 56
+.L1911:
+	cmp	w21, w22, uxth
+	bls	.L1938
+	cbz	w25, .L1912
+	add	x1, x20, :lo12:.LANCHOR2
+	mul	x0, x22, x24
+	ldr	x1, [x1,-96]
+	add	x2, x1, x0
+	ldr	w0, [x1,x0]
+	cbnz	w0, .L1912
+	ldr	w0, [x2,4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L1837:
-	add	x28, x28, 1
-	b	.L1835
-.L1854:
-	ldr	w0, [x29,124]
-	add	w24, w24, w0
-	uxth	w24, w24
-	cmp	w24, w27
-	bcc	.L1839
-	cmp	w25, 63
-	bhi	.L1824
+.L1912:
+	add	x22, x22, 1
+	b	.L1911
+.L1938:
+	cmp	w26, 63
+	bls	.L1917
+	cbz	w25, .L1896
+.L1917:
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w1, w23
 	mov	w2, w21
-	ldr	x0, [x20,-88]
+	ldr	x0, [x20,-96]
 	bl	FlashEraseBlocks
-.L1824:
+.L1896:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -12477,77 +12759,78 @@ FtlBbmTblFlush:
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
 	adrp	x22, .LANCHOR2
-	str	x27, [sp,80]
 	stp	x19, x20, [sp,16]
 	add	x2, x22, :lo12:.LANCHOR2
 	adrp	x19, .LANCHOR4
 	adrp	x20, .LANCHOR0
-	mov	x21, 0
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
 	add	x24, x19, :lo12:.LANCHOR4
 	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x2,-64]
-	add	x23, x20, 2112
-	ldr	x2, [x2,2112]
+	ldr	x0, [x2,-72]
+	mov	x23, 0
+	ldr	x2, [x2,2104]
+	add	x21, x20, 2104
 	str	x2, [x24,152]
-	ldrh	w2, [x20,2036]
+	ldrh	w2, [x20,2028]
 	str	x0, [x24,144]
 	bl	ftl_memset
-.L1856:
-	ldrh	w1, [x20,1974]
-	mov	w0, w21
-	add	x21, x21, 1
+.L1940:
+	ldrh	w1, [x20,1966]
+	mov	w0, w23
+	add	x23, x23, 1
 	cmp	w0, w1
-	bge	.L1863
+	bge	.L1948
 	add	x1, x22, :lo12:.LANCHOR2
 	ldr	x3, [x24,144]
-	ldrh	w2, [x1,2232]
-	add	x1, x23, x21, lsl 3
+	ldrh	w2, [x1,2224]
+	add	x1, x21, x23, lsl 3
 	ldr	x1, [x1,24]
 	mul	w0, w0, w2
 	add	x0, x3, x0, sxtw 2
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	b	.L1856
-.L1863:
+	b	.L1940
+.L1948:
 	add	x19, x19, :lo12:.LANCHOR4
 	mov	w1, 255
 	add	x19, x19, 136
 	mov	w2, 16
-	adrp	x25, .LC108
-	adrp	x26, .LC109
-	ldr	x21, [x19,16]
-	mov	w24, 0
-	add	x25, x25, :lo12:.LC108
-	add	x26, x26, :lo12:.LC109
-	mov	x0, x21
+	mov	w28, 0
+	adrp	x25, .LC111
+	ldr	x27, [x19,16]
+	adrp	x26, .LC112
+	mov	w24, w28
+	add	x25, x25, :lo12:.LC111
+	mov	x0, x27
+	add	x26, x26, :lo12:.LC112
 	bl	ftl_memset
 	mov	w0, -3887
-	strh	w0, [x21]
-	ldr	w0, [x23,8]
-	str	w0, [x21,4]
-	ldrh	w0, [x20,2112]
-	strh	w0, [x21,2]
-	ldrh	w0, [x23,4]
-	strh	w0, [x21,8]
-	ldrh	w0, [x23,6]
-	strh	w0, [x21,10]
-	ldr	w0, [x20,1948]
-	strh	w0, [x21,12]
-.L1858:
-	add	x27, x22, :lo12:.LANCHOR2
-	ldrh	w1, [x20,2112]
-	ldrh	w2, [x20,2114]
-	ldrh	w3, [x20,2116]
-	ldr	x0, [x27,-64]
+	strh	w0, [x27]
+	ldr	w0, [x21,8]
+	str	w0, [x27,4]
+	ldrh	w0, [x20,2104]
+	strh	w0, [x27,2]
+	ldrh	w0, [x21,4]
+	strh	w0, [x27,8]
+	ldrh	w0, [x21,6]
+	strh	w0, [x27,10]
+	ldr	w0, [x20,1940]
+	strh	w0, [x27,12]
+.L1942:
+	add	x23, x22, :lo12:.LANCHOR2
+	ldrh	w1, [x20,2104]
+	ldrh	w2, [x20,2106]
+	ldrh	w3, [x20,2108]
+	ldr	x0, [x23,-72]
 	str	x0, [x19,8]
-	ldr	x0, [x27,2112]
+	ldr	x0, [x23,2104]
 	str	x0, [x19,16]
 	orr	w0, w2, w1, lsl 10
 	str	w0, [x19,4]
 	mov	x0, x25
-	ldrh	w4, [x21,10]
+	ldrh	w4, [x27,10]
 	str	wzr, [x19]
 	bl	printk
 	mov	w1, 1
@@ -12555,56 +12838,66 @@ FtlBbmTblFlush:
 	mov	w2, w1
 	mov	w3, w1
 	bl	FlashProgPages
-	ldrh	w0, [x20,2028]
-	ldrh	w1, [x20,2114]
+	ldrh	w0, [x20,2020]
+	ldrh	w1, [x20,2106]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L1859
-	ldr	w0, [x20,2120]
-	strh	wzr, [x20,2114]
-	add	w0, w0, 1
-	str	w0, [x20,2120]
-	str	w0, [x21,4]
-	ldrh	w0, [x20,2112]
-	ldrh	w1, [x20,2116]
-	strh	w0, [x21,8]
-	strh	w0, [x20,2116]
-	ldr	x0, [x27,-88]
-	strh	w1, [x20,2112]
+	blt	.L1943
+	ldr	w1, [x20,2112]
+	ldrh	w0, [x20,2104]
+	add	w1, w1, 1
+	str	w1, [x20,2112]
+	str	w1, [x27,4]
+	strh	w0, [x27,8]
+	ldrh	w1, [x20,2108]
+	strh	w0, [x20,2108]
+	ldr	x0, [x23,-96]
+	strh	w1, [x20,2104]
 	lsl	w1, w1, 10
 	str	w1, [x19,4]
 	str	w1, [x0,4]
 	mov	w1, 1
 	mov	w2, w1
-	ldr	x0, [x27,-88]
+	strh	wzr, [x20,2106]
+	ldr	x0, [x23,-96]
 	bl	FlashEraseBlocks
 	mov	w1, 1
 	mov	x0, x19
 	mov	w2, w1
 	mov	w3, w1
 	bl	FlashProgPages
-.L1859:
-	ldrh	w0, [x20,2114]
+.L1943:
+	ldrh	w0, [x20,2106]
 	add	w0, w0, 1
-	strh	w0, [x20,2114]
+	strh	w0, [x20,2106]
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1860
+	bne	.L1944
 	ldr	w1, [x19,4]
 	mov	x0, x26
+	add	w28, w28, 1
 	bl	printk
-	b	.L1858
-.L1860:
-	cbnz	w24, .L1864
+	uxth	w28, w28
+	cmp	w28, 3
+	bls	.L1942
+	adrp	x0, .LC113
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC113
+	mov	w2, w28
+	bl	printk
+.L1946:
+	b	.L1946
+.L1944:
+	cbnz	w24, .L1949
 	mov	w24, 1
-	b	.L1858
-.L1864:
+	b	.L1942
+.L1949:
 	mov	w0, 0
-	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
@@ -12622,195 +12915,196 @@ allocate_data_superblock:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	mov	x20, x0
-	add	x23, x21, 96
+	add	x23, x21, 88
 	mov	x19, x21
-	sub	x24, x21, #16
-.L1866:
+	sub	x24, x21, #24
+.L1951:
 	cmp	x20, x23
-	bne	.L1867
-	ldrh	w0, [x21,-8]
-	ldr	w3, [x21,876]
+	bne	.L1952
+	ldrh	w0, [x21,-16]
+	ldr	w3, [x21,868]
 	lsr	w2, w0, 1
 	add	w4, w2, 1
 	mul	w1, w0, w3
 	add	w1, w4, w1, lsr 2
-	ldr	w4, [x21,160]
+	ldr	w4, [x21,152]
 	uxth	w1, w1
-	cbz	w4, .L1868
-	ldr	w4, [x21,220]
+	cbz	w4, .L1953
+	ldr	w4, [x21,212]
 	cmp	w4, 29
-	bhi	.L1868
+	bhi	.L1953
 	cmp	w4, 2
 	mov	w1, 0
-	bls	.L1869
-	tbz	x0, 0, .L1894
-	cbz	w3, .L1869
-.L1894:
+	bls	.L1954
+	tbz	x0, 0, .L1979
+	cbz	w3, .L1954
+.L1979:
 	mov	w1, w2
-	b	.L1868
-.L1867:
+	b	.L1953
+.L1952:
 	ldrb	w0, [x20,8]
 	mov	w1, 0
 	cmp	w0, 1
-	bne	.L1869
+	bne	.L1954
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w2, [x0,1972]
+	ldrh	w2, [x0,1964]
 	cmp	w2, 1
-	beq	.L1869
+	beq	.L1954
 	ldrb	w0, [x0,120]
-	cbnz	w0, .L1869
-	ldr	w2, [x21,160]
-	ldrh	w0, [x21,-8]
+	cbnz	w0, .L1954
+	ldr	w2, [x21,152]
+	ldrh	w0, [x21,-16]
 	lsr	w1, w0, 3
-	cbz	w2, .L1868
-	ldr	w2, [x21,220]
+	cbz	w2, .L1953
+	ldr	w2, [x21,212]
 	cmp	w2, 1
-	bhi	.L1868
+	bhi	.L1953
 	mov	w1, 7
 	mul	w1, w0, w1
 	lsr	w1, w1, 3
-.L1868:
-	cbz	w1, .L1869
+.L1953:
+	cbz	w1, .L1954
 	sub	w1, w1, #1
 	uxth	w1, w1
-.L1869:
+.L1954:
 	mov	x0, x24
 	bl	List_pop_index_node
 	uxth	w22, w0
-	ldrh	w0, [x19,-8]
+	ldrh	w0, [x19,-16]
 	sub	w0, w0, #1
-	strh	w0, [x19,-8]
+	strh	w0, [x19,-16]
 	strh	w22, [x20]
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbz	w0, .L1871
+	cbz	w0, .L1956
 	adrp	x25, .LANCHOR0
 	mov	x3, 56
 	add	x0, x25, :lo12:.LANCHOR0
 	mov	w6, 65535
-	ldrh	w5, [x0,1952]
+	ldrh	w5, [x0,1944]
 	mov	x0, 0
 	mov	w26, w0
-	b	.L1872
-.L1871:
-	ubfiz	x0, x22, 1, 16
-	ldr	x1, [x19,-40]
-	mov	w2, -1
-	strh	w2, [x1,x0]
-	b	.L1916
-.L1875:
-	ldr	x4, [x19,-88]
+	b	.L1957
+.L1956:
+	ubfiz	x22, x22, 1, 16
+	ldr	x0, [x19,-48]
+	mov	w1, -1
+	strh	w1, [x0,x22]
+	b	.L1951
+.L1960:
+	ldr	x4, [x19,-96]
 	madd	x1, x0, x3, x4
 	str	xzr, [x1,16]
 	str	xzr, [x1,8]
 	add	x1, x20, x0, lsl 1
 	ldrh	w1, [x1,16]
 	cmp	w1, w6
-	beq	.L1874
+	beq	.L1959
 	umull	x2, w26, w3
 	add	w26, w26, 1
 	lsl	w1, w1, 10
 	add	x2, x4, x2
 	uxth	w26, w26
 	str	w1, [x2,4]
-.L1874:
+.L1959:
 	add	x0, x0, 1
-.L1872:
+.L1957:
 	cmp	w5, w0, uxth
-	bhi	.L1875
-	cmp	x20, x19
+	bhi	.L1960
+	sub	x0, x19, #8
 	uxtw	x27, w22
-	bne	.L1876
-	ldr	w0, [x19,160]
-	cbz	w0, .L1876
-	ldr	x0, [x19,-80]
-	ldrh	w0, [x0,x27,lsl 1]
-	cmp	w0, 30
-	bls	.L1876
-	strb	wzr, [x19,8]
-.L1876:
+	cmp	x20, x0
+	bne	.L1961
+	ldr	w1, [x19,152]
+	cbz	w1, .L1961
+	ldr	x1, [x19,-88]
+	ldrh	w1, [x1,x27,lsl 1]
+	cmp	w1, 30
+	bls	.L1961
+	strb	wzr, [x19]
+.L1961:
 	ldrb	w0, [x20,8]
-	cbnz	w0, .L1877
+	cbnz	w0, .L1962
 	lsl	x0, x27, 1
-	ldr	x1, [x19,-80]
+	ldr	x1, [x19,-88]
 	mov	w2, 2
 	ldrh	w3, [x1,x0]
-	cbz	w3, .L1917
+	cbz	w3, .L2001
 	add	x2, x25, :lo12:.LANCHOR0
-	ldrh	w2, [x2,2016]
+	ldrh	w2, [x2,2008]
 	add	w2, w3, w2
-.L1917:
+.L2001:
 	strh	w2, [x1,x0]
 	mov	w1, 0
-	ldr	w0, [x19,204]
+	ldr	w0, [x19,196]
 	add	w0, w0, 1
-	str	w0, [x19,204]
+	str	w0, [x19,196]
 	mov	w0, w22
 	bl	ftl_set_blk_mode
-	b	.L1880
-.L1877:
+	b	.L1965
+.L1962:
 	lsl	x0, x27, 1
-	ldr	x2, [x19,-80]
+	ldr	x2, [x19,-88]
 	ldrh	w1, [x2,x0]
 	add	w1, w1, 1
 	strh	w1, [x2,x0]
-	ldr	w0, [x19,208]
+	ldr	w0, [x19,200]
 	add	w0, w0, 1
-	str	w0, [x19,208]
+	str	w0, [x19,200]
 	mov	w0, w22
 	bl	ftl_set_blk_mode.part.8
-.L1880:
+.L1965:
 	lsl	x27, x27, 1
-	ldr	x0, [x19,-80]
-	ldr	w1, [x19,216]
+	ldr	x0, [x19,-88]
+	ldr	w1, [x19,208]
 	ldrh	w0, [x0,x27]
 	cmp	w0, w1
-	bls	.L1881
-	str	w0, [x19,216]
-.L1881:
+	bls	.L1966
+	str	w0, [x19,208]
+.L1966:
 	add	x2, x25, :lo12:.LANCHOR0
-	ldr	w3, [x19,204]
-	ldr	w0, [x19,208]
-	ldrh	w1, [x2,2016]
+	ldr	w3, [x19,196]
+	ldr	w0, [x19,200]
+	ldrh	w1, [x2,2008]
 	madd	w0, w1, w3, w0
-	ldrh	w1, [x2,1960]
+	ldrh	w1, [x2,1952]
 	mov	x3, 56
 	udiv	w0, w0, w1
-	ldr	x1, [x19,2152]
-	str	w0, [x19,212]
+	ldr	x1, [x19,2144]
+	str	w0, [x19,204]
 	ldr	w0, [x1,16]
 	add	w0, w0, 1
 	str	w0, [x1,16]
 	mov	x0, 0
-.L1882:
+.L1967:
 	cmp	w26, w0, uxth
-	bls	.L1918
-	ldr	x1, [x19,-88]
+	bls	.L2002
+	ldr	x1, [x19,-96]
 	madd	x1, x0, x3, x1
 	add	x0, x0, 1
 	ldr	w2, [x1,4]
 	and	w2, w2, -1024
 	str	w2, [x1,4]
-	b	.L1882
-.L1918:
+	b	.L1967
+.L2002:
 	ldrb	w1, [x20,8]
 	mov	w2, w26
-	ldr	x0, [x19,-88]
+	ldr	x0, [x19,-96]
 	mov	x28, 0
 	bl	FlashEraseBlocks
 	mov	w1, w28
 	mov	x3, 56
-.L1884:
+.L1969:
 	cmp	w26, w28, uxth
-	bls	.L1919
+	bls	.L2003
 	mul	x0, x28, x3
-	ldr	x2, [x19,-88]
+	ldr	x2, [x19,-96]
 	add	x4, x2, x0
 	ldr	w2, [x2,x0]
 	cmn	w2, #1
-	bne	.L1885
+	bne	.L1970
 	ldr	w0, [x4,4]
 	add	w1, w1, 1
 	str	x3, [x29,96]
@@ -12827,40 +13121,37 @@ allocate_data_superblock:
 	ldrb	w0, [x20,7]
 	sub	w0, w0, #1
 	strb	w0, [x20,7]
-.L1885:
+.L1970:
 	add	x28, x28, 1
-	b	.L1884
-.L1919:
-	cbz	w1, .L1887
+	b	.L1969
+.L2003:
+	cbz	w1, .L1972
 	mov	w0, w22
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1887:
+.L1972:
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L1888
-	ldr	x0, [x19,-40]
+	cbnz	w0, .L1973
+	ldr	x0, [x19,-48]
 	mov	w1, -1
 	strh	w1, [x0,x27]
-.L1916:
-	mov	w0, w22
-	bl	INSERT_DATA_LIST
-	b	.L1866
-.L1888:
+	b	.L1951
+.L1973:
 	add	x25, x25, :lo12:.LANCHOR0
 	strh	wzr, [x20,2]
 	strb	wzr, [x20,6]
-	ldrh	w1, [x25,2026]
+	ldrh	w1, [x25,2018]
 	strh	w22, [x20]
 	mul	w0, w0, w1
 	adrp	x1, .LANCHOR2
 	add	x1, x1, :lo12:.LANCHOR2
 	uxth	w0, w0
 	strh	w0, [x20,4]
-	ldr	w2, [x1,196]
+	ldr	w2, [x1,188]
 	str	w2, [x20,12]
 	add	w2, w2, 1
-	str	w2, [x1,196]
-	ldr	x1, [x1,-40]
+	str	w2, [x1,188]
+	ldr	x1, [x1,-48]
 	ldrh	w2, [x20]
 	strh	w0, [x1,x2,lsl 1]
 	mov	w0, 0
@@ -12884,63 +13175,63 @@ FtlGcFreeBadSuperBlk:
 	add	x19, x19, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,48]
 	uxth	w23, w0
-	ldrh	w0, [x19,956]
+	ldrh	w0, [x19,948]
 	stp	x21, x22, [sp,32]
 	mov	w21, 0
-	cbz	w0, .L1922
+	cbz	w0, .L2006
 	adrp	x22, .LANCHOR0
-	adrp	x24, .LC110
+	adrp	x24, .LC114
 	add	x22, x22, :lo12:.LANCHOR0
-	add	x24, x24, :lo12:.LC110
-.L1930:
-	ldrh	w0, [x22,1952]
+	add	x24, x24, :lo12:.LC114
+.L2014:
+	ldrh	w0, [x22,1944]
 	cmp	w0, w21
-	bls	.L1931
-	add	x0, x22, 1984
+	bls	.L2015
+	add	x0, x22, 1976
 	mov	w1, w23
 	mov	w20, 0
 	ldrb	w0, [x0,w21,sxtw]
 	bl	V2P_block
 	uxth	w25, w0
-.L1923:
-	ldrh	w0, [x19,956]
+.L2007:
+	ldrh	w0, [x19,948]
 	cmp	w0, w20
-	bls	.L1932
-	add	x0, x19, 960
+	bls	.L2016
+	add	x0, x19, 952
 	ldrh	w0, [x0,w20,sxtw 1]
 	cmp	w0, w25
-	bne	.L1924
+	bne	.L2008
 	mov	w1, w25
 	mov	x0, x24
 	bl	printk
 	mov	w0, w25
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldrh	w2, [x19,956]
+	ldrh	w2, [x19,948]
 	mov	w3, w20
-.L1925:
+.L2009:
 	cmp	w3, w2
-	bcs	.L1933
-	add	x4, x19, 960
+	bcs	.L2017
+	add	x4, x19, 952
 	add	w0, w3, 1
 	ldrh	w1, [x4,w0,sxtw 1]
 	strh	w1, [x4,w3,sxtw 1]
 	uxth	w3, w0
-	b	.L1925
-.L1933:
+	b	.L2009
+.L2017:
 	sub	w2, w2, #1
-	strh	w2, [x19,956]
-.L1924:
+	strh	w2, [x19,948]
+.L2008:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L1923
-.L1932:
+	b	.L2007
+.L2016:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L1930
-.L1931:
+	b	.L2014
+.L2015:
 	bl	FtlGcReFreshBadBlk
-.L1922:
+.L2006:
 	mov	w0, 0
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -12956,50 +13247,49 @@ update_vpc_list:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
 	uxth	w19, w0
-	adrp	x0, .LANCHOR2
-	add	x1, x0, :lo12:.LANCHOR2
-	ubfiz	x2, x19, 1, 16
-	mov	x20, x0
-	ldr	x3, [x1,-40]
-	ldrh	w2, [x3,x2]
-	cbnz	w2, .L1935
-	ldrh	w3, [x1,296]
-	cmp	w3, w19
-	bne	.L1936
+	add	x1, x20, :lo12:.LANCHOR2
+	ubfiz	x0, x19, 1, 16
+	ldr	x2, [x1,-48]
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2019
+	ldrh	w0, [x1,288]
+	cmp	w0, w19
+	bne	.L2020
 	mov	w0, -1
-	strh	w0, [x1,296]
-	b	.L1937
-.L1936:
-	ldrh	w3, [x0,#:lo12:.LANCHOR2]
+	strh	w0, [x1,288]
+	b	.L2021
+.L2020:
+	ldrh	w3, [x1,-8]
 	mov	w0, w2
 	cmp	w3, w19
-	beq	.L1938
-	ldrh	w3, [x1,48]
+	beq	.L2022
+	ldrh	w3, [x1,40]
 	cmp	w3, w19
-	beq	.L1938
-	ldrh	w1, [x1,96]
+	beq	.L2022
+	ldrh	w1, [x1,88]
 	cmp	w1, w19
-	beq	.L1938
-.L1937:
+	beq	.L2022
+.L2021:
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w1, w19
-	sub	x0, x20, #48
+	sub	x0, x20, #56
 	bl	List_remove_node
-	ldrh	w0, [x20,-24]
+	ldrh	w0, [x20,-32]
 	sub	w0, w0, #1
-	strh	w0, [x20,-24]
+	strh	w0, [x20,-32]
 	mov	w0, w19
 	bl	free_data_superblock
 	mov	w0, w19
 	bl	FtlGcFreeBadSuperBlk
 	mov	w0, 1
-	b	.L1938
-.L1935:
+	b	.L2022
+.L2019:
 	mov	w0, w19
 	bl	List_update_data_list
 	mov	w0, 0
-.L1938:
+.L2022:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -13015,42 +13305,42 @@ decrement_vpc_count:
 	str	x19, [sp,16]
 	cmp	w1, w0
 	adrp	x2, .LANCHOR2
-	beq	.L1943
+	beq	.L2027
 	add	x0, x2, :lo12:.LANCHOR2
 	ubfiz	x3, x1, 1, 16
-	ldr	x0, [x0,-40]
+	ldr	x0, [x0,-48]
 	ldrh	w19, [x0,x3]
-	cbnz	w19, .L1944
-	adrp	x0, .LC111
+	cbnz	w19, .L2028
+	adrp	x0, .LC115
 	mov	w2, w19
-	add	x0, x0, :lo12:.LC111
+	add	x0, x0, :lo12:.LC115
 	bl	printk
-	b	.L1948
-.L1944:
+	b	.L2032
+.L2028:
 	sub	w19, w19, #1
 	strh	w19, [x0,x3]
-.L1943:
+.L2027:
 	add	x19, x2, :lo12:.LANCHOR2
 	mov	w0, 65535
-	ldrh	w2, [x19,2320]
+	ldrh	w2, [x19,2312]
 	cmp	w2, w0
-	bne	.L1946
-	strh	w1, [x19,2320]
-.L1948:
+	bne	.L2030
+	strh	w1, [x19,2312]
+.L2032:
 	mov	w0, 0
-	b	.L1945
-.L1946:
+	b	.L2029
+.L2030:
 	cmp	w2, w1
 	str	x1, [x29,40]
 	mov	w0, 0
-	beq	.L1945
+	beq	.L2029
 	mov	w0, w2
 	bl	update_vpc_list
 	cmp	w0, wzr
 	ldr	x1, [x29,40]
 	cset	w0, ne
-	strh	w1, [x19,2320]
-.L1945:
+	strh	w1, [x19,2312]
+.L2029:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -13064,84 +13354,87 @@ FtlSlcSuperblockCheck:
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	ldrh	w1, [x0,4]
-	cbz	w1, .L1949
+	cbz	w1, .L2033
+	ldrh	w1, [x0]
+	mov	w20, 65535
+	cmp	w1, w20
+	beq	.L2033
 	mov	x19, x0
 	ldrb	w0, [x0,6]
-	adrp	x20, .LANCHOR2
-	mov	w21, 65535
-	add	x0, x0, 8
-	add	x20, x20, :lo12:.LANCHOR2
+	adrp	x21, .LANCHOR2
 	adrp	x22, .LANCHOR0
-	add	x20, x20, 996
+	add	x0, x0, 8
+	add	x21, x21, :lo12:.LANCHOR2
+	add	x21, x21, 988
 	ldrh	w0, [x19,x0,lsl 1]
-.L1952:
-	cmp	w0, w21
-	bne	.L1960
-.L1954:
+.L2037:
+	cmp	w0, w20
+	bne	.L2044
+.L2039:
 	ldrb	w0, [x19,6]
 	add	x1, x22, :lo12:.LANCHOR0
 	add	w0, w0, 1
-	ldrh	w1, [x1,1952]
+	ldrh	w1, [x1,1944]
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L1953
+	bne	.L2038
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L1953:
+.L2038:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L1952
-.L1960:
+	b	.L2037
+.L2044:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L1955
+	bne	.L2040
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbnz	w0, .L1955
+	cbnz	w0, .L2040
 	ldrh	w0, [x19,2]
-	ldrh	w0, [x20,w0,sxtw 1]
-	cmp	w0, w21
-	bne	.L1955
+	ldrh	w0, [x21,w0,sxtw 1]
+	cmp	w0, w20
+	bne	.L2040
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	ldrh	w1, [x19,4]
-	cbnz	w1, .L1954
+	cbnz	w1, .L2039
 	ldrh	w0, [x19,2]
 	strb	w1, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-	b	.L1949
-.L1955:
+	b	.L2033
+.L2040:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w2, [x0,120]
-	cbz	w2, .L1949
+	cbz	w2, .L2033
 	cmp	w1, 1
-	bne	.L1949
+	bne	.L2033
 	ldrh	w2, [x19,2]
-	ldrh	w1, [x0,2028]
+	ldrh	w1, [x0,2020]
 	cmp	w2, w1
-	bcc	.L1949
-	adrp	x2, .LANCHOR2-40
+	bcc	.L2033
+	adrp	x2, .LANCHOR2-48
 	ldrh	w1, [x19]
 	ldrh	w4, [x19,4]
 	lsl	x1, x1, 1
-	ldr	x3, [x2,#:lo12:.LANCHOR2-40]
+	ldr	x3, [x2,#:lo12:.LANCHOR2-48]
 	ldrh	w2, [x3,x1]
 	sub	w2, w2, w4
 	strh	w2, [x3,x1]
 	strh	wzr, [x19,4]
-	ldrh	w0, [x0,2026]
+	ldrh	w0, [x0,2018]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L1949:
+.L2033:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -13164,48 +13457,48 @@ get_new_active_ppa:
 	mov	w22, 65535
 	add	x0, x0, 8
 	adrp	x23, .LANCHOR0
-	add	x21, x21, 996
+	add	x21, x21, 988
 	ldrh	w0, [x19,x0,lsl 1]
-.L1962:
+.L2046:
 	cmp	w0, w22
 	adrp	x20, .LANCHOR0
-	bne	.L1977
-.L1963:
+	bne	.L2061
+.L2047:
 	ldrb	w0, [x19,6]
 	add	x1, x23, :lo12:.LANCHOR0
 	add	w0, w0, 1
-	ldrh	w1, [x1,1952]
+	ldrh	w1, [x1,1944]
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L1964
+	bne	.L2048
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L1964:
+.L2048:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L1962
-.L1977:
+	b	.L2046
+.L2061:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L1965
+	bne	.L2049
 	add	x1, x23, :lo12:.LANCHOR0
 	ldrb	w1, [x1,120]
-	cbnz	w1, .L1965
+	cbnz	w1, .L2049
 	ldrh	w1, [x19,2]
 	ldrh	w1, [x21,w1,sxtw 1]
 	cmp	w1, w22
-	bne	.L1965
+	bne	.L2049
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L1963
-.L1965:
+	b	.L2047
+.L2049:
 	ldrh	w1, [x19,4]
 	adrp	x21, .LANCHOR2
 	ldrh	w22, [x19,2]
@@ -13215,64 +13508,64 @@ get_new_active_ppa:
 	orr	w22, w22, w0, lsl 10
 	strh	w1, [x19,4]
 	mov	w24, w23
-	add	x21, x21, 996
-.L1966:
+	add	x21, x21, 988
+.L2050:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w1, [x19,6]
-	ldrh	w2, [x0,1952]
-.L1968:
+	ldrh	w2, [x0,1944]
+.L2052:
 	add	w1, w1, 1
 	uxtb	w1, w1
 	cmp	w1, w2
-	bne	.L1967
+	bne	.L2051
 	ldrh	w1, [x19,2]
 	add	w1, w1, 1
 	strh	w1, [x19,2]
 	mov	w1, 0
-.L1967:
+.L2051:
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w23
-	beq	.L1968
+	beq	.L2052
 	ldrb	w0, [x19,8]
 	strb	w1, [x19,6]
 	cmp	w0, 1
-	bne	.L1973
+	bne	.L2057
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbnz	w0, .L1970
+	cbnz	w0, .L2054
 	ldrh	w0, [x19,2]
 	ldrh	w0, [x21,w0,sxtw 1]
 	cmp	w0, w24
-	bne	.L1970
+	bne	.L2054
 	ldrh	w1, [x19,4]
-	cbz	w1, .L1970
+	cbz	w1, .L2054
 	ldrh	w0, [x19]
 	sub	w1, w1, #1
 	strh	w1, [x19,4]
 	bl	decrement_vpc_count
-	b	.L1966
-.L1970:
+	b	.L2050
+.L2054:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x20,120]
-	cbz	w0, .L1973
+	cbz	w0, .L2057
 	ldrh	w1, [x19,2]
-	ldrh	w0, [x20,2028]
+	ldrh	w0, [x20,2020]
 	cmp	w1, w0
-	bcc	.L1973
-	adrp	x0, .LANCHOR2-40
+	bcc	.L2057
+	adrp	x0, .LANCHOR2-48
 	ldrh	w1, [x19]
 	ldrh	w3, [x19,4]
 	lsl	x1, x1, 1
-	ldr	x0, [x0,#:lo12:.LANCHOR2-40]
+	ldr	x0, [x0,#:lo12:.LANCHOR2-48]
 	ldrh	w2, [x0,x1]
 	sub	w2, w2, w3
 	strh	w2, [x0,x1]
 	strh	wzr, [x19,4]
-	ldrh	w0, [x20,2026]
+	ldrh	w0, [x20,2018]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L1973:
+.L2057:
 	mov	w0, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13285,89 +13578,90 @@ get_new_active_ppa:
 	.type	FtlVpcTblFlush, %function
 FtlVpcTblFlush:
 	stp	x29, x30, [sp, -80]!
-	adrp	x0, .LANCHOR2
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	add	x19, x0, :lo12:.LANCHOR2
-	adrp	x20, .LANCHOR4
-	add	x20, x20, :lo12:.LANCHOR4
-	str	x25, [sp,64]
-	add	x20, x20, 136
-	mov	w25, 65535
-	stp	x21, x22, [sp,32]
-	ldr	x22, [x19,2112]
-	add	x21, x19, 224
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,48]
-	ldr	x1, [x19,-64]
+	adrp	x23, .LANCHOR4
 	adrp	x24, .LANCHOR0
-	str	x1, [x20,8]
-	add	x23, x24, :lo12:.LANCHOR0
-	str	x22, [x20,16]
-	ldrh	w2, [x19,280]
-	strh	w2, [x22,2]
-	mov	w2, -3932
-	strh	w2, [x22]
+	add	x20, x23, :lo12:.LANCHOR4
+	ldr	x0, [x19,-72]
+	stp	x21, x22, [sp,32]
+	ldr	x22, [x19,2104]
+	add	x21, x20, 136
+	stp	x25, x26, [sp,64]
+	str	x0, [x20,144]
+	add	x25, x24, :lo12:.LANCHOR0
+	str	x22, [x20,152]
+	add	x20, x19, 216
+	ldrh	w1, [x19,272]
+	mov	w26, 65535
+	strh	w1, [x22,2]
+	mov	w1, -3932
+	strh	w1, [x22]
 	str	wzr, [x22,12]
-	ldr	w2, [x19,288]
-	str	w2, [x22,4]
-	mov	w2, 19539
+	ldr	w1, [x19,280]
+	str	w1, [x22,4]
+	mov	w1, 19539
 	str	wzr, [x22,8]
-	movk	w2, 0x4654, lsl 16
-	ldrh	w1, [x19,286]
-	ldrh	w0, [x0,#:lo12:.LANCHOR2]
-	strh	w1, [x19,232]
-	strh	w0, [x19,238]
-	ldrh	w1, [x23,1974]
-	ldrh	w0, [x19,2]
-	strb	w1, [x19,234]
-	ldrb	w1, [x19,6]
-	str	w2, [x19,224]
-	mov	w2, 54
+	movk	w1, 0x4654, lsl 16
+	ldrh	w0, [x19,278]
+	strh	w0, [x19,224]
+	ldrh	w0, [x25,1966]
+	str	w1, [x19,216]
+	mov	w1, 64
+	strb	w0, [x19,226]
+	movk	w1, 0x5000, lsl 16
+	ldrh	w0, [x19,-8]
+	strh	w0, [x19,230]
+	ldrh	w0, [x19,-6]
+	str	w1, [x19,220]
+	ldrb	w1, [x19,-2]
 	orr	w0, w1, w0, lsl 6
-	movk	w2, 0x5000, lsl 16
-	strh	w0, [x19,240]
-	str	w2, [x19,228]
-	ldrb	w0, [x19,8]
-	strb	w0, [x19,235]
-	ldrh	w1, [x19,48]
-	strh	w1, [x19,242]
-	ldrh	w1, [x19,50]
-	ldrb	w2, [x19,54]
-	ldrb	w0, [x19,56]
+	strh	w0, [x19,232]
+	ldrb	w0, [x19]
+	ldrh	w1, [x19,40]
+	strh	w1, [x19,234]
+	ldrh	w1, [x19,42]
+	ldrb	w2, [x19,46]
+	strb	w0, [x19,227]
 	orr	w1, w2, w1, lsl 6
-	strb	w0, [x19,236]
-	strh	w1, [x19,244]
-	ldrb	w0, [x19,104]
-	ldrh	w1, [x19,96]
-	strh	w1, [x19,246]
-	strb	w0, [x19,237]
-	ldrh	w1, [x19,98]
-	ldr	w0, [x19,204]
-	ldrb	w2, [x19,102]
-	str	w0, [x19,256]
+	ldrb	w0, [x19,48]
+	strh	w1, [x19,236]
+	strb	w0, [x19,228]
+	ldrh	w1, [x19,88]
+	ldrb	w0, [x19,96]
+	strh	w1, [x19,238]
+	strb	w0, [x19,229]
+	ldrh	w1, [x19,90]
 	ldr	w0, [x19,196]
+	ldrb	w2, [x19,94]
+	str	w0, [x19,248]
+	ldr	w0, [x19,188]
 	orr	w1, w2, w1, lsl 6
-	str	w0, [x19,264]
-	ldr	w0, [x19,200]
-	str	w0, [x19,260]
-	ldrh	w2, [x23,2036]
-	ldr	x0, [x20,8]
-	strh	w1, [x19,248]
+	str	w0, [x19,256]
+	ldr	w0, [x19,192]
+	ldrh	w2, [x25,2028]
+	str	w0, [x19,252]
+	ldr	x0, [x21,8]
+	strh	w1, [x19,240]
 	mov	w1, 255
 	bl	ftl_memset
-	ldr	x0, [x20,8]
-	mov	x1, x21
+	ldr	x0, [x21,8]
+	mov	x1, x20
 	mov	w2, 48
-	mov	x21, x24
+	mov	x20, x21
 	bl	ftl_memcpy
-	ldr	x0, [x20,8]
-	ldrh	w2, [x23,1960]
-	ldr	x1, [x19,-40]
-	add	x0, x0, 48
+	ldrh	w2, [x25,1952]
+	ldr	x0, [x21,8]
+	ldr	x1, [x19,-48]
 	lsl	w2, w2, 1
+	add	x0, x0, 48
 	bl	ftl_memcpy
-	ldrh	w2, [x23,1960]
-	ldr	x1, [x20,8]
+	ldrh	w2, [x25,1952]
+	mov	w25, 0
+	ldr	x1, [x21,8]
 	uxth	x0, w2
 	lsr	w2, w2, 3
 	add	x0, x0, 24
@@ -13378,75 +13672,87 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1979:
-	ldr	x0, [x19,-64]
+.L2063:
+	ldr	x0, [x19,-72]
 	str	x0, [x20,8]
-	ldrh	w1, [x19,280]
-	ldr	x0, [x19,2112]
+	ldr	x0, [x19,2104]
 	str	x0, [x20,16]
-	ldrh	w0, [x19,282]
-	orr	w1, w0, w1, lsl 10
-	str	w1, [x20,4]
+	ldrh	w0, [x19,272]
+	ldrh	w1, [x19,274]
+	orr	w0, w1, w0, lsl 10
 	mov	w1, 1
-	mov	x0, x20
+	str	w0, [x20,4]
 	mov	w2, w1
 	mov	w3, w1
+	mov	x0, x20
 	bl	FlashProgPages
-	add	x1, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19,282]
-	ldrh	w1, [x1,2028]
-	sub	w1, w1, #1
-	cmp	w0, w1
-	blt	.L1980
-	ldrh	w0, [x19,280]
-	ldrh	w25, [x19,284]
-	strh	wzr, [x19,282]
-	strh	w0, [x19,284]
+	add	x0, x24, :lo12:.LANCHOR0
+	ldrh	w1, [x19,274]
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L2064
+	ldrh	w0, [x19,272]
+	ldrh	w26, [x19,276]
+	strh	wzr, [x19,274]
+	strh	w0, [x19,276]
 	bl	FtlFreeSysBlkQueueOut
-	ldr	w1, [x19,196]
-	str	w1, [x19,288]
+	ldr	w1, [x19,188]
+	str	w1, [x19,280]
 	add	w2, w1, 1
-	str	w2, [x19,196]
+	str	w2, [x19,188]
 	ubfiz	w2, w0, 10, 16
 	str	w2, [x20,4]
 	str	w1, [x22,4]
 	mov	w1, 1
-	strh	w0, [x19,280]
+	strh	w0, [x19,272]
 	mov	w2, w1
 	strh	w0, [x22,2]
 	mov	w3, w1
 	mov	x0, x20
 	bl	FlashProgPages
-.L1980:
-	ldrh	w1, [x19,282]
-	ldr	w0, [x20]
+.L2064:
+	ldrh	w1, [x19,274]
+	ldr	w2, [x20]
 	add	w1, w1, 1
-	cmn	w0, #1
+	cmn	w2, #1
 	uxth	w1, w1
-	strh	w1, [x19,282]
-	bne	.L1981
+	strh	w1, [x19,274]
+	bne	.L2065
 	cmp	w1, 1
-	bne	.L1979
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2028]
+	bne	.L2066
+	add	x1, x24, :lo12:.LANCHOR0
+	ldrh	w1, [x1,2020]
 	sub	w1, w1, #1
-	strh	w1, [x19,282]
-	b	.L1979
-.L1981:
+	strh	w1, [x19,274]
+.L2066:
+	add	w25, w25, 1
+	uxth	w25, w25
+	cmp	w25, 3
+	bls	.L2063
+	add	x23, x23, :lo12:.LANCHOR4
+	adrp	x0, .LC116
+	add	x0, x0, :lo12:.LC116
+	mov	w2, w25
+	ldr	w1, [x23,140]
+	bl	printk
+.L2068:
+	b	.L2068
+.L2065:
 	cmp	w1, 1
-	beq	.L1979
+	beq	.L2063
 	mov	w0, 65535
-	cmp	w25, w0
-	beq	.L1983
-	mov	w0, w25
+	cmp	w26, w0
+	beq	.L2069
+	mov	w0, w26
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L1983:
+.L2069:
 	mov	w0, 0
-	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
@@ -13454,82 +13760,80 @@ FtlVpcTblFlush:
 	.global	FtlSuperblockPowerLostFix
 	.type	FtlSuperblockPowerLostFix, %function
 FtlSuperblockPowerLostFix:
-	stp	x29, x30, [sp, -144]!
+	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR2
+	adrp	x20, .LANCHOR0
 	mov	x19, x0
-	add	x0, x20, :lo12:.LANCHOR2
-	str	x25, [sp,64]
+	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	mov	w23, 0
-	ldr	x22, [x0,2112]
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
-	mov	x21, x0
-	ldrb	w1, [x1,120]
-	cbz	w1, .L1988
+	mov	w22, 0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2074
 	ldrb	w0, [x19,8]
 	cmp	w0, 1
-	cset	w23, eq
-.L1988:
-	mov	w24, 7
-	mov	w25, -1
-.L1989:
-	subs	w24, w24, #1
-	beq	.L1990
+	cset	w22, eq
+.L2074:
+	mov	w21, 7
+	adrp	x23, .LANCHOR2
+	mov	w24, -1
+.L2075:
+	subs	w21, w21, #1
+	beq	.L2077
 	ldrh	w0, [x19,4]
-	cbz	w0, .L1990
-	mov	x0, x19
-	bl	get_new_active_ppa
-	str	w0, [x29,92]
-	add	x1, x20, :lo12:.LANCHOR2
-	str	w25, [x29,112]
-	mov	w2, w23
-	mov	w3, 0
-	ldr	x0, [x1,-64]
-	str	x0, [x29,96]
-	ldr	x0, [x1,2112]
-	str	x0, [x29,104]
-	str	w25, [x22,8]
-	str	w25, [x22,12]
-	ldrh	w0, [x19]
-	strh	w0, [x22,2]
-	strh	wzr, [x22]
-	ldr	x22, [x1,2112]
-	ldr	w0, [x1,200]
-	str	w0, [x22,4]
-	add	w0, w0, 1
-	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x1,200]
-	add	x0, x29, 88
-	mov	w1, 1
-	bl	FlashProgPages
-	ldrh	w0, [x19]
-	bl	decrement_vpc_count
-	b	.L1989
-.L1990:
-	add	x20, x20, :lo12:.LANCHOR2
+	cbnz	w0, .L2076
+.L2077:
+	adrp	x1, .LANCHOR2
 	ldrh	w0, [x19]
+	add	x1, x1, :lo12:.LANCHOR2
 	ldrh	w3, [x19,4]
 	lsl	x0, x0, 1
-	ldr	x2, [x20,-40]
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x2, [x1,-48]
 	ldrh	w1, [x2,x0]
 	sub	w1, w1, w3
 	strh	w1, [x2,x0]
-	add	x0, x21, :lo12:.LANCHOR0
 	strb	wzr, [x19,6]
+	ldrh	w0, [x20,2018]
+	strh	w0, [x19,2]
 	strh	wzr, [x19,4]
 	ldp	x21, x22, [sp,32]
-	ldrh	w0, [x0,2026]
-	strh	w0, [x19,2]
-	ldp	x23, x24, [sp,48]
 	ldp	x19, x20, [sp,16]
-	ldr	x25, [sp,64]
-	ldp	x29, x30, [sp], 144
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 128
 	ret
+.L2076:
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2077
+	add	x3, x23, :lo12:.LANCHOR2
+	str	w24, [x29,96]
+	mov	w2, w22
+	ldr	x1, [x3,2104]
+	ldr	x0, [x3,-72]
+	str	x0, [x29,80]
+	str	x1, [x29,88]
+	str	w24, [x1,8]
+	str	w24, [x1,12]
+	ldrh	w0, [x19]
+	strh	w0, [x1,2]
+	strh	wzr, [x1]
+	ldr	w0, [x3,192]
+	str	w0, [x1,4]
+	mov	w1, 1
+	add	w0, w0, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x3,192]
+	add	x0, x29, 72
+	mov	w3, 0
+	bl	FlashProgPages
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2075
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	ftl_map_blk_gc
@@ -13548,14 +13852,14 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	w1, [x19,10]
 	ldrh	w2, [x19,8]
-	sub	w1, w1, #1
+	sub	w1, w1, #4
 	cmp	w2, w1
-	blt	.L2000
+	blt	.L2088
 	ubfiz	x1, x0, 1, 16
 	ldrh	w24, [x20,x1]
-	cbz	w24, .L2000
+	cbz	w24, .L2088
 	ldr	w0, [x19,52]
-	cbnz	w0, .L2000
+	cbnz	w0, .L2088
 	mov	w2, 1
 	str	w2, [x19,52]
 	strh	w0, [x20,x1]
@@ -13564,28 +13868,28 @@ ftl_map_blk_gc:
 	sub	w0, w0, #1
 	strh	w0, [x19,8]
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2028]
+	ldrh	w0, [x0,2020]
 	cmp	w1, w0
-	bcc	.L2001
+	bcc	.L2089
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L2001:
+.L2089:
 	adrp	x20, .LANCHOR4
 	mov	w21, 0
 	add	x20, x20, :lo12:.LANCHOR4
 	adrp	x26, .LANCHOR2
 	add	x20, x20, 136
-.L2002:
+.L2090:
 	ldrh	w0, [x19,6]
 	cmp	w0, w21
-	bls	.L2010
+	bls	.L2098
 	ubfiz	x25, x21, 2, 16
 	ldr	w0, [x23,x25]
 	cmp	w24, w0, lsr 10
-	bne	.L2003
+	bne	.L2091
 	add	x0, x26, :lo12:.LANCHOR2
-	ldr	x1, [x0,2072]
-	ldr	x0, [x0,2112]
+	ldr	x1, [x0,2064]
+	ldr	x0, [x0,2104]
 	str	x1, [x20,8]
 	mov	w1, 1
 	str	x0, [x20,16]
@@ -13596,32 +13900,32 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L2004
+	bne	.L2092
 	str	wzr, [x23,x25]
-	b	.L2003
-.L2004:
+	b	.L2091
+.L2092:
 	ldr	x2, [x20,8]
 	mov	x0, x19
 	mov	w1, w21
 	bl	FtlMapWritePage
-.L2003:
+.L2091:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L2002
-.L2010:
+	b	.L2090
+.L2098:
 	mov	w0, w24
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19,52]
-.L2000:
+.L2088:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19,2]
-	ldrh	w0, [x22,2028]
+	ldrh	w0, [x22,2020]
 	cmp	w1, w0
-	bcc	.L2006
+	bcc	.L2094
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L2006:
+.L2094:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13645,7 +13949,7 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x23, [x0,40]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	bne	.L2012
+	bne	.L2100
 	ldrh	w0, [x19,8]
 	add	w0, w0, 1
 	strh	w0, [x19,8]
@@ -13656,8 +13960,8 @@ Ftl_write_map_blk_to_last_page:
 	strh	wzr, [x19]
 	add	w0, w0, 1
 	str	w0, [x19,48]
-	b	.L2013
-.L2012:
+	b	.L2101
+.L2100:
 	ubfiz	x0, x0, 1, 16
 	adrp	x21, .LANCHOR2
 	add	x3, x21, :lo12:.LANCHOR2
@@ -13667,9 +13971,9 @@ Ftl_write_map_blk_to_last_page:
 	add	x1, x20, :lo12:.LANCHOR4
 	orr	w0, w0, w22, lsl 10
 	str	w0, [x1,140]
-	ldr	x0, [x3,-64]
+	ldr	x0, [x3,-72]
 	str	x0, [x1,144]
-	ldr	x0, [x3,2112]
+	ldr	x0, [x3,2104]
 	str	x0, [x1,152]
 	ldr	w1, [x19,48]
 	str	w1, [x0,4]
@@ -13679,36 +13983,36 @@ Ftl_write_map_blk_to_last_page:
 	strh	w1, [x0]
 	mov	w1, 255
 	strh	w22, [x0,2]
-	adrp	x0, .LANCHOR0+2028
-	ldrh	w2, [x0,#:lo12:.LANCHOR0+2028]
-	ldr	x0, [x3,-64]
+	adrp	x0, .LANCHOR0+2020
+	ldrh	w2, [x0,#:lo12:.LANCHOR0+2020]
+	ldr	x0, [x3,-72]
 	lsl	w2, w2, 3
 	bl	ftl_memset
 	mov	w0, 0
 	mov	w1, w0
-.L2014:
+.L2102:
 	ldrh	w2, [x19,6]
 	cmp	w2, w1
-	bls	.L2017
+	bls	.L2105
 	ubfiz	x4, x1, 2, 16
 	ldr	w2, [x23,x4]
 	cmp	w22, w2, lsr 10
-	bne	.L2015
+	bne	.L2103
 	add	x3, x21, :lo12:.LANCHOR2
 	add	w0, w0, 1
 	uxth	w0, w0
-	ldr	x5, [x3,-64]
+	ldr	x5, [x3,-72]
 	ubfiz	x2, x0, 3, 16
 	str	w1, [x5,x2]
-	ldr	x3, [x3,-64]
+	ldr	x3, [x3,-72]
 	ldr	w4, [x23,x4]
 	add	x2, x3, x2
 	str	w4, [x2,4]
-.L2015:
+.L2103:
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L2014
-.L2017:
+	b	.L2102
+.L2105:
 	mov	w1, 1
 	add	x0, x20, :lo12:.LANCHOR4
 	add	x0, x0, 136
@@ -13720,7 +14024,7 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19,2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-.L2013:
+.L2101:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -13736,80 +14040,113 @@ FtlMapWritePage:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR4
-	str	x27, [sp,80]
-	stp	x21, x22, [sp,32]
-	add	x20, x20, :lo12:.LANCHOR4
-	adrp	x22, .LANCHOR2
+	mov	x19, x0
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	mov	x19, x0
-	mov	w21, w1
-	mov	x23, x2
-	adrp	x24, .LANCHOR0
-	mov	x25, x22
-	mov	w26, 65535
+	add	x20, x20, :lo12:.LANCHOR4
+	adrp	x25, .LANCHOR2
+	adrp	x23, .LC117
+	mov	w24, w1
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	mov	x26, x2
+	mov	w21, 0
+	mov	x27, x25
 	add	x20, x20, 136
-.L2024:
-	add	x1, x22, :lo12:.LANCHOR2
-	ldr	w0, [x1,180]
+	add	x23, x23, :lo12:.LC117
+.L2107:
+	add	x1, x25, :lo12:.LANCHOR2
+	adrp	x22, .LANCHOR0
+	ldr	w0, [x1,172]
 	add	w0, w0, 1
-	str	w0, [x1,180]
-	add	x0, x24, :lo12:.LANCHOR0
+	str	w0, [x1,172]
+	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19,2]
-	ldrh	w0, [x0,2028]
+	ldrh	w0, [x0,2020]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	bge	.L2019
-	ldrh	w0, [x19]
-	cmp	w0, w26
-	bne	.L2020
-.L2019:
+	bge	.L2108
+	ldrh	w1, [x19]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2109
+.L2108:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L2020:
+.L2109:
 	ldrh	w1, [x19]
 	mov	w2, 16
 	ldr	x0, [x19,16]
-	ldrh	w27, [x0,x1,lsl 1]
+	ldrh	w28, [x0,x1,lsl 1]
 	mov	w1, 0
 	ldrh	w0, [x19,2]
-	str	x23, [x20,8]
-	orr	w0, w0, w27, lsl 10
+	str	x26, [x20,8]
+	orr	w0, w0, w28, lsl 10
 	str	w0, [x20,4]
-	add	x0, x25, :lo12:.LANCHOR2
-	ldr	x0, [x0,2112]
+	add	x0, x27, :lo12:.LANCHOR2
+	ldr	x0, [x0,2104]
 	str	x0, [x20,16]
 	bl	ftl_memset
 	ldr	x0, [x20,16]
 	ldr	w1, [x19,48]
 	str	w1, [x0,4]
-	strh	w21, [x0,8]
+	strh	w24, [x0,8]
 	ldrh	w1, [x19,4]
 	strh	w1, [x0]
 	mov	w1, 1
-	strh	w27, [x0,2]
-	mov	w2, w1
-	mov	x0, x20
+	strh	w28, [x0,2]
 	mov	w3, w1
+	mov	x0, x20
+	mov	w2, w1
 	bl	FlashProgPages
-	ldrh	w0, [x19,2]
-	add	w0, w0, 1
-	uxth	w0, w0
-	strh	w0, [x19,2]
-	cmp	w0, 1
-	beq	.L2024
+	ldrh	w3, [x19,2]
+	add	w3, w3, 1
+	uxth	w3, w3
+	strh	w3, [x19,2]
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L2024
+	bne	.L2110
+	ldr	w1, [x20,4]
+	mov	x0, x23
+	add	w21, w21, 1
+	bl	printk
+	uxth	w21, w21
+	ldrh	w0, [x19,2]
+	cmp	w0, 2
+	bhi	.L2111
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x22,2020]
+	sub	w0, w0, #1
+	strh	w0, [x19,2]
+.L2111:
+	cmp	w21, 3
+	bls	.L2112
+	adrp	x1, .LANCHOR4
+	adrp	x0, .LC118
+	add	x1, x1, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC118
+	mov	w2, w21
+	ldr	w1, [x1,140]
+	bl	printk
+.L2113:
+	b	.L2113
+.L2112:
+	ldr	w0, [x19,52]
+	cbz	w0, .L2107
+.L2122:
+	b	.L2122
+.L2110:
+	cmp	w3, 1
+	beq	.L2107
 	ldr	x0, [x19,40]
 	ldr	w1, [x20,4]
-	str	w1, [x0,w21,uxtw 2]
+	str	w1, [x0,w24,uxtw 2]
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldr	x27, [sp,80]
+	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlMapWritePage, .-FtlMapWritePage
@@ -13823,13 +14160,13 @@ flush_l2p_region:
 	adrp	x20, .LANCHOR2
 	ubfiz	x19, x0, 4, 16
 	add	x20, x20, :lo12:.LANCHOR2
-	add	x0, x20, 2240
-	ldr	x1, [x20,144]
+	add	x0, x20, 2232
+	ldr	x1, [x20,136]
 	add	x2, x1, x19
 	ldrh	w1, [x1,x19]
 	ldr	x2, [x2,8]
 	bl	FtlMapWritePage
-	ldr	x0, [x20,144]
+	ldr	x0, [x20,136]
 	add	x19, x0, x19
 	ldr	w0, [x19,4]
 	and	w0, w0, 2147483647
@@ -13855,10 +14192,10 @@ log2phys:
 	adrp	x23, .LANCHOR2
 	mov	x21, x1
 	add	x1, x23, :lo12:.LANCHOR2
-	ldrh	w3, [x5,2034]
+	ldrh	w3, [x5,2026]
 	mov	w22, w2
 	add	w3, w3, 7
-	ldr	x25, [x1,144]
+	ldr	x25, [x1,136]
 	lsr	w20, w0, w3
 	lsl	x3, x4, x3
 	sub	w3, w3, #1
@@ -13866,50 +14203,50 @@ log2phys:
 	and	w0, w3, w0
 	uxth	w20, w20
 	uxth	x24, w0
-	ldrh	w0, [x5,2066]
-.L2029:
+	ldrh	w0, [x5,2058]
+.L2125:
 	uxth	x19, w4
 	cmp	w19, w0
-	bcs	.L2041
+	bcs	.L2137
 	add	x4, x4, 1
 	add	x1, x25, x4, lsl 4
 	ldrh	w1, [x1,-16]
 	cmp	w1, w20
-	bne	.L2029
-.L2030:
-	cbnz	w22, .L2031
+	bne	.L2125
+.L2126:
+	cbnz	w22, .L2127
 	add	x0, x23, :lo12:.LANCHOR2
-	ldr	x1, [x0,144]
+	ldr	x1, [x0,136]
 	add	x1, x1, x19, lsl 4
 	ldr	x0, [x1,8]
 	ldr	w0, [x0,x24,lsl 2]
 	str	w0, [x21]
-	b	.L2032
-.L2031:
+	b	.L2128
+.L2127:
 	add	x1, x23, :lo12:.LANCHOR2
 	lsl	x0, x19, 4
 	ldr	w3, [x21]
-	ldr	x2, [x1,144]
+	ldr	x2, [x1,136]
 	add	x2, x2, x0
 	ldr	x2, [x2,8]
 	str	w3, [x2,x24,lsl 2]
-	strh	w20, [x1,152]
-	ldr	x2, [x1,144]
+	strh	w20, [x1,144]
+	ldr	x2, [x1,136]
 	add	x0, x2, x0
 	ldr	w2, [x0,4]
 	orr	w2, w2, -2147483648
 	str	w2, [x0,4]
-.L2032:
+.L2128:
 	add	x23, x23, :lo12:.LANCHOR2
-	ldr	x0, [x23,144]
+	ldr	x0, [x23,136]
 	add	x19, x0, x19, lsl 4
 	ldr	w0, [x19,4]
 	cmn	w0, #1
-	beq	.L2038
+	beq	.L2134
 	add	w0, w0, 1
 	str	w0, [x19,4]
-	b	.L2038
-.L2041:
+	b	.L2134
+.L2137:
 	bl	select_l2p_ram_region
 	uxth	x19, w0
 	ubfiz	x2, x19, 4, 16
@@ -13918,17 +14255,17 @@ log2phys:
 	ldrh	w4, [x25,x2]
 	mov	w2, 65535
 	cmp	w4, w2
-	beq	.L2035
+	beq	.L2131
 	ldr	w2, [x3,4]
-	tbz	w2, #31, .L2035
+	tbz	w2, #31, .L2131
 	str	x1, [x29,88]
 	bl	flush_l2p_region
 	ldr	x1, [x29,88]
-.L2035:
+.L2131:
 	mov	w0, w20
 	bl	load_l2p_region
-	b	.L2030
-.L2038:
+	b	.L2126
+.L2134:
 	mov	w0, 0
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -13953,51 +14290,51 @@ FtlReUsePrevPpa:
 	uxth	w0, w0
 	add	x2, x21, :lo12:.LANCHOR2
 	ubfiz	x22, x0, 1, 16
-	ldr	x3, [x2,-40]
+	ldr	x3, [x2,-48]
 	ldrh	w1, [x3,x22]
-	cbnz	w1, .L2043
-	ldr	x19, [x2,-16]
-	cbz	x19, .L2044
-	ldrh	w3, [x2,-8]
+	cbnz	w1, .L2139
+	ldr	x19, [x2,-24]
+	cbz	x19, .L2140
+	ldrh	w3, [x2,-16]
 	mov	x4, -6148914691236517206
-	ldr	x2, [x2,-56]
+	ldr	x2, [x2,-64]
 	mov	w5, 65535
 	sub	x19, x19, x2
 	asr	x19, x19, 1
 	madd	x19, x4, x19, x19
 	mov	w4, 6
 	uxth	w19, w19
-.L2045:
+.L2141:
 	cmp	w1, w3
-	beq	.L2044
+	beq	.L2140
 	cmp	w19, w0
-	bne	.L2046
+	bne	.L2142
 	add	x21, x21, :lo12:.LANCHOR2
 	mov	w1, w19
-	sub	x0, x21, #16
+	sub	x0, x21, #24
 	bl	List_remove_node
-	ldrh	w0, [x21,-8]
+	ldrh	w0, [x21,-16]
 	sub	w0, w0, #1
-	strh	w0, [x21,-8]
+	strh	w0, [x21,-16]
 	mov	w0, w19
 	bl	INSERT_DATA_LIST
-	ldr	x1, [x21,-40]
+	ldr	x1, [x21,-48]
 	ldrh	w0, [x1,x22]
 	add	w0, w0, 1
 	strh	w0, [x1,x22]
-	b	.L2044
-.L2046:
+	b	.L2140
+.L2142:
 	umull	x19, w19, w4
 	ldrh	w19, [x2,x19]
 	cmp	w19, w5
-	beq	.L2044
+	beq	.L2140
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L2045
-.L2043:
+	b	.L2141
+.L2139:
 	add	w1, w1, 1
 	strh	w1, [x3,x22]
-.L2044:
+.L2140:
 	add	x1, x29, 60
 	mov	w0, w20
 	mov	w2, 1
@@ -14035,16 +14372,16 @@ FtlMapTblRecovery:
 	str	x19, [x29,136]
 	add	x1, x19, :lo12:.LANCHOR2
 	adrp	x0, .LANCHOR4
-	add	x4, x0, :lo12:.LANCHOR4
+	add	x5, x0, :lo12:.LANCHOR4
 	str	x0, [x29,120]
-	add	x4, x4, 136
+	add	x5, x5, 136
 	sub	w0, w23, #1
-	ldr	x2, [x1,-64]
-	ldr	x26, [x1,2112]
+	ldr	x2, [x1,-72]
+	ldr	x26, [x1,2104]
 	mov	w1, -1
-	str	x2, [x4,8]
-	str	x26, [x4,16]
-	mov	x19, x4
+	str	x2, [x5,8]
+	str	x26, [x5,16]
+	mov	x19, x5
 	strh	w1, [x27]
 	strh	w1, [x27,2]
 	mov	w1, 1
@@ -14052,18 +14389,18 @@ FtlMapTblRecovery:
 	str	wzr, [x27,48]
 	str	w1, [x27,56]
 	str	w0, [x29,116]
-.L2052:
+.L2148:
 	cmp	w25, w23
-	bge	.L2069
+	bge	.L2164
 	ldr	w0, [x29,116]
 	sxtw	x28, w25
 	cmp	w25, w0
-	bne	.L2053
+	bne	.L2149
 	lsl	x0, x28, 1
 	mov	w1, 1
 	add	x23, x21, x0
+	mov	w19, 0
 	ldrh	w0, [x21,x0]
-	mov	w21, 0
 	bl	FtlGetLastWrittenPage
 	sxth	w24, w0
 	add	w0, w0, 1
@@ -14074,57 +14411,56 @@ FtlMapTblRecovery:
 	ldr	w0, [x0,x28,lsl 2]
 	str	w0, [x27,48]
 	ldr	x0, [x29,120]
-	add	x19, x0, :lo12:.LANCHOR4
-	add	x19, x19, 136
-	str	xzr, [x19,8]
-.L2054:
-	cmp	w21, w24
-	bge	.L2069
+	add	x21, x0, :lo12:.LANCHOR4
+	add	x21, x21, 136
+.L2150:
+	cmp	w19, w24
+	bge	.L2164
 	ldrh	w0, [x23]
 	mov	w1, 1
 	mov	w2, w1
-	orr	w0, w21, w0, lsl 10
-	str	w0, [x19,4]
-	mov	x0, x19
+	orr	w0, w19, w0, lsl 10
+	str	w0, [x21,4]
+	mov	x0, x21
 	bl	FlashReadPages
-	ldr	w0, [x19]
+	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L2055
+	beq	.L2151
 	ldrh	w0, [x26,8]
 	cmp	w0, w22
-	bcs	.L2055
+	bcs	.L2151
 	ldrh	w2, [x26]
 	ldrh	w1, [x27,4]
 	cmp	w2, w1
-	bne	.L2055
+	bne	.L2151
 	ubfiz	x0, x0, 2, 16
-	ldr	w1, [x19,4]
+	ldr	w1, [x21,4]
 	str	w1, [x20,x0]
-.L2055:
-	add	w21, w21, 1
-	sxth	w21, w21
-	b	.L2054
-.L2069:
+.L2151:
+	add	w19, w19, 1
+	sxth	w19, w19
+	b	.L2150
+.L2164:
 	mov	x0, x27
 	bl	ftl_free_no_use_map_blk
-	adrp	x0, .LANCHOR0+2028
+	adrp	x0, .LANCHOR0+2020
 	ldrh	w1, [x27,2]
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+2028]
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2020]
 	cmp	w1, w0
-	bne	.L2058
+	bne	.L2154
 	mov	x0, x27
 	bl	ftl_map_blk_alloc_new_blk
-	b	.L2058
-.L2053:
+	b	.L2154
+.L2149:
 	ldr	x0, [x29,136]
 	add	x0, x0, :lo12:.LANCHOR2
-	ldr	x0, [x0,-64]
+	ldr	x0, [x0,-72]
 	str	x0, [x19,8]
 	lsl	x0, x28, 1
 	add	x28, x21, x0
 	ldrh	w1, [x21,x0]
 	add	x0, x24, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2028]
+	ldrh	w0, [x0,2020]
 	sub	w0, w0, #1
 	orr	w0, w0, w1, lsl 10
 	mov	w1, 1
@@ -14134,85 +14470,81 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x19]
 	cmn	w0, #1
-	beq	.L2059
+	beq	.L2165
 	ldrh	w1, [x26]
+	mov	w4, 0
 	ldrh	w0, [x27,4]
 	cmp	w1, w0
-	bne	.L2059
+	bne	.L2174
 	ldrh	w1, [x26,8]
 	mov	w0, 64245
 	cmp	w1, w0
-	bne	.L2059
-	mov	w0, 0
-.L2060:
-	adrp	x1, .LANCHOR0
-	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w1, [x1,2028]
-	sub	w1, w1, #1
-	cmp	w0, w1
-	bge	.L2063
-	ldr	x1, [x29,136]
-	sbfiz	x2, x0, 3, 32
-	add	x1, x1, :lo12:.LANCHOR2
-	ldr	x5, [x1,-64]
-	ldrh	w1, [x5,x2]
-	cmp	w1, w22
-	bcs	.L2061
-	add	x2, x5, x2
-	ubfiz	x1, x1, 2, 16
-	ldr	w2, [x2,4]
-	str	w2, [x20,x1]
-.L2061:
-	add	w0, w0, 1
-	sxth	w0, w0
-	b	.L2060
-.L2059:
-	str	xzr, [x19,8]
-	mov	w5, 0
-.L2064:
+	bne	.L2174
+.L2156:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	cmp	w4, w0
+	bge	.L2159
+	ldr	x0, [x29,136]
+	sbfiz	x1, x4, 3, 32
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	x2, [x0,-72]
+	ldrh	w0, [x2,x1]
+	cmp	w0, w22
+	bcs	.L2157
+	add	x1, x2, x1
+	ubfiz	x0, x0, 2, 16
+	ldr	w1, [x1,4]
+	str	w1, [x20,x0]
+.L2157:
+	add	w4, w4, 1
+	sxth	w4, w4
+	b	.L2156
+.L2165:
+	mov	w4, 0
+.L2174:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2028]
-	cmp	w5, w0
-	bge	.L2063
+	ldrh	w0, [x0,2020]
+	cmp	w4, w0
+	bge	.L2159
 	ldrh	w0, [x28]
 	mov	w1, 1
 	mov	w2, w1
-	str	x5, [x29,104]
-	orr	w0, w5, w0, lsl 10
+	str	x4, [x29,104]
+	orr	w0, w4, w0, lsl 10
 	str	w0, [x19,4]
 	mov	x0, x19
 	bl	FlashReadPages
 	ldr	w0, [x19]
-	ldr	x5, [x29,104]
+	ldr	x4, [x29,104]
 	cmn	w0, #1
-	beq	.L2065
+	beq	.L2160
 	ldrh	w0, [x26,8]
 	cmp	w0, w22
-	bcs	.L2065
+	bcs	.L2160
 	ldrh	w2, [x26]
 	ldrh	w1, [x27,4]
 	cmp	w2, w1
-	bne	.L2065
+	bne	.L2160
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x19,4]
 	str	w1, [x20,x0]
-.L2065:
-	add	w5, w5, 1
-	sxth	w5, w5
-	b	.L2064
-.L2063:
+.L2160:
+	add	w4, w4, 1
+	sxth	w4, w4
+	b	.L2174
+.L2159:
 	add	w6, w25, 1
 	sxth	w25, w6
-	b	.L2052
-.L2058:
-	ldrh	w1, [x27,8]
-	ldrh	w0, [x27,10]
-	cmp	w1, w0
-	bcc	.L2070
+	b	.L2148
+.L2154:
+	mov	x0, x27
+	bl	ftl_map_blk_gc
 	mov	x0, x27
 	bl	ftl_map_blk_gc
-.L2070:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -14233,22 +14565,22 @@ FtlLoadVonderInfo:
 	stp	x29, x30, [sp, -16]!
 	add	x0, x0, 200
 	add	x29, sp, 0
-	ldrh	w2, [x1,2048]
+	ldrh	w2, [x1,2040]
 	strh	w2, [x0,10]
 	mov	w2, -3962
 	strh	w2, [x0,4]
-	ldrh	w2, [x1,2072]
+	ldrh	w2, [x1,2064]
 	strh	w2, [x0,8]
-	ldrh	w2, [x1,2050]
-	ldr	x1, [x1,2080]
+	ldrh	w2, [x1,2042]
+	ldr	x1, [x1,2072]
 	str	x1, [x0,16]
 	adrp	x1, .LANCHOR2
 	add	x1, x1, :lo12:.LANCHOR2
 	strh	w2, [x0,6]
-	ldr	x2, [x1,2192]
-	str	x2, [x0,24]
 	ldr	x2, [x1,2184]
-	ldr	x1, [x1,2200]
+	str	x2, [x0,24]
+	ldr	x2, [x1,2176]
+	ldr	x1, [x1,2192]
 	str	x2, [x0,32]
 	str	x1, [x0,40]
 	bl	FtlMapTblRecovery
@@ -14265,7 +14597,7 @@ FtlLoadMapInfo:
 	bl	FtlL2PDataInit
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
-	add	x0, x0, 2240
+	add	x0, x0, 2232
 	bl	FtlMapTblRecovery
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
@@ -14279,34 +14611,34 @@ FtlReadRefresh:
 	adrp	x1, .LANCHOR2
 	add	x0, x1, :lo12:.LANCHOR2
 	add	x29, sp, 0
-	add	x2, x0, 352
+	add	x2, x0, 344
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	adrp	x20, .LANCHOR0
 	ldr	w3, [x2,80]
-	cbz	w3, .L2084
+	cbz	w3, .L2178
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	w3, [x2,84]
-	ldr	w1, [x1,2104]
+	ldr	w1, [x1,2096]
 	cmp	w3, w1
-	bcs	.L2085
+	bcs	.L2179
 	mov	w21, 2048
 	mov	x19, x0
-.L2090:
+.L2184:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldr	w0, [x19,436]
-	ldr	w1, [x1,2104]
+	ldr	w0, [x19,428]
+	ldr	w1, [x1,2096]
 	cmp	w0, w1
-	bcs	.L2087
+	bcs	.L2181
 	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
-	ldr	w0, [x19,436]
+	ldr	w0, [x19,428]
 	ldr	w1, [x29,52]
 	add	w0, w0, 1
-	str	w0, [x19,436]
+	str	w0, [x19,428]
 	cmn	w1, #1
-	beq	.L2088
+	beq	.L2182
 	str	w1, [x29,60]
 	mov	w2, 0
 	str	w0, [x29,80]
@@ -14318,54 +14650,56 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29,56]
 	cmp	w0, 256
-	bne	.L2087
+	bne	.L2181
 	ldr	w0, [x29,52]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L2087
-.L2088:
+	b	.L2181
+.L2182:
 	subs	w21, w21, #1
-	bne	.L2090
-.L2087:
+	bne	.L2184
+.L2181:
 	mov	w0, -1
-	b	.L2092
-.L2085:
-	ldr	w0, [x0,164]
+	b	.L2186
+.L2179:
+	ldr	w0, [x0,156]
 	str	wzr, [x2,80]
 	str	wzr, [x2,84]
 	str	w0, [x2,76]
-	b	.L2098
-.L2084:
+	b	.L2192
+.L2178:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldr	w3, [x0,216]
-	mov	w2, 1048576
-	ldr	w0, [x0,160]
+	ldr	w3, [x0,208]
+	mov	w2, 4194304
+	ldr	w0, [x0,152]
 	ldrb	w4, [x20,120]
-	cbnz	w4, .L2093
-	add	w2, w0, w3, lsr 10
-	mov	w0, 33554432
-	asr	w2, w0, w2
-.L2093:
-	add	x3, x1, :lo12:.LANCHOR2
-	ldr	w0, [x3,428]
-	ldr	w3, [x3,164]
-	add	w4, w3, 1048576
-	cmp	w0, w4
-	bhi	.L2094
-	add	w2, w2, w0
+	cbnz	w4, .L2187
+	add	w0, w0, w3, lsr 10
+	mov	w3, 33554432
+	asr	w2, w3, w0
+.L2187:
+	add	x4, x1, :lo12:.LANCHOR2
+	ldr	w3, [x4,156]
+	ldr	w0, [x4,420]
+	add	w5, w3, 1048576
+	cmp	w0, w5
+	bhi	.L2188
+	add	w0, w2, w0
+	cmp	w0, w3
+	bcc	.L2188
+	ldrb	w2, [x4,244]
 	mov	w0, 0
-	cmp	w2, w3
-	bcs	.L2092
-.L2094:
+	cbnz	w2, .L2186
+.L2188:
 	add	x0, x1, :lo12:.LANCHOR2
 	mov	w1, 1
-	str	wzr, [x0,436]
-	str	w1, [x0,432]
-	str	w3, [x0,428]
-.L2098:
+	str	wzr, [x0,428]
+	str	w1, [x0,424]
+	str	w3, [x0,420]
+.L2192:
 	mov	w0, 0
-.L2092:
+.L2186:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
@@ -14387,26 +14721,26 @@ FtlVendorPartWrite:
 	stp	x21, x22, [sp,32]
 	mov	w28, w1
 	add	w1, w26, w1
-	ldrh	w21, [x0,2034]
+	ldrh	w21, [x0,2026]
 	mov	x25, x2
-	ldrh	w0, [x0,2020]
+	ldrh	w0, [x0,2012]
 	mov	w20, -1
 	cmp	w1, w0
-	bhi	.L2100
+	bhi	.L2194
 	adrp	x24, .LANCHOR4
 	lsr	w21, w26, w21
 	add	x24, x24, :lo12:.LANCHOR4
 	mov	w20, 0
 	adrp	x27, .LANCHOR2
 	add	x24, x24, 200
-.L2101:
-	cbz	w28, .L2100
+.L2195:
+	cbz	w28, .L2194
 	adrp	x0, .LANCHOR2
 	add	x2, x0, :lo12:.LANCHOR2
-	ldr	x0, [x2,2200]
+	ldr	x0, [x2,2192]
 	ldr	w4, [x0,w21,uxtw 2]
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2032]
+	ldrh	w1, [x0,2024]
 	uxth	w0, w28
 	udiv	w22, w26, w1
 	msub	w22, w22, w1, w26
@@ -14415,9 +14749,9 @@ FtlVendorPartWrite:
 	cmp	w19, w28
 	csel	w19, w0, w19, hi
 	cmp	w19, w1
-	beq	.L2103
-	cbz	w4, .L2103
-	ldr	x0, [x2,2080]
+	beq	.L2197
+	cbz	w4, .L2197
+	ldr	x0, [x2,2072]
 	mov	w1, 1
 	str	x0, [x29,128]
 	mov	w2, w1
@@ -14425,22 +14759,22 @@ FtlVendorPartWrite:
 	str	w4, [x29,124]
 	str	xzr, [x29,136]
 	bl	FlashReadPages
-	b	.L2104
-.L2103:
+	b	.L2198
+.L2197:
 	add	x0, x27, :lo12:.LANCHOR2
 	add	x2, x23, :lo12:.LANCHOR0
 	mov	w1, 0
-	ldr	x0, [x0,2080]
-	ldrh	w2, [x2,2036]
+	ldr	x0, [x0,2072]
+	ldrh	w2, [x2,2028]
 	bl	ftl_memset
-.L2104:
+.L2198:
 	add	x5, x27, :lo12:.LANCHOR2
 	lsl	w4, w19, 9
 	ubfiz	x22, x22, 9, 16
 	mov	w2, w4
 	mov	x1, x25
 	str	x4, [x29,104]
-	ldr	x0, [x5,2080]
+	ldr	x0, [x5,2072]
 	sub	w28, w28, w19
 	str	x5, [x29,96]
 	add	w26, w26, w19
@@ -14450,14 +14784,14 @@ FtlVendorPartWrite:
 	mov	w1, w21
 	mov	x0, x24
 	add	w21, w21, 1
-	ldr	x2, [x5,2080]
+	ldr	x2, [x5,2072]
 	bl	FtlMapWritePage
 	cmn	w0, #1
 	ldr	x4, [x29,104]
 	csinv	w20, w20, wzr, ne
 	add	x25, x25, x4, sxtw
-	b	.L2101
-.L2100:
+	b	.L2195
+.L2194:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -14476,46 +14810,46 @@ Ftl_save_ext_data:
 	add	x0, x0, :lo12:.LANCHOR2
 	movk	w1, 0x4654, lsl 16
 	stp	x29, x30, [sp, -16]!
-	add	x2, x0, 352
+	add	x2, x0, 344
 	add	x29, sp, 0
-	ldr	w3, [x0,352]
+	ldr	w3, [x0,344]
 	cmp	w3, w1
-	bne	.L2114
-	mov	w1, 54
+	bne	.L2208
+	mov	w1, 64
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2,4]
-	ldr	w1, [x0,188]
+	ldr	w1, [x0,180]
 	str	w1, [x2,88]
-	ldr	w1, [x0,192]
-	str	w1, [x2,92]
 	ldr	w1, [x0,184]
+	str	w1, [x2,92]
+	ldr	w1, [x0,176]
 	str	w1, [x2,8]
-	ldr	w1, [x0,172]
-	str	w1, [x2,12]
 	ldr	w1, [x0,164]
+	str	w1, [x2,12]
+	ldr	w1, [x0,156]
 	str	w1, [x2,16]
-	ldr	w1, [x0,180]
+	ldr	w1, [x0,172]
 	str	w1, [x2,20]
-	ldr	w1, [x0,208]
+	ldr	w1, [x0,200]
 	str	w1, [x2,28]
-	ldr	w1, [x0,-72]
+	ldr	w1, [x0,-80]
 	str	w1, [x2,32]
-	ldr	w1, [x0,168]
+	ldr	w1, [x0,160]
 	str	w1, [x2,36]
-	ldr	w1, [x0,176]
+	ldr	w1, [x0,168]
 	str	w1, [x2,40]
-	ldr	w1, [x0,216]
+	ldr	w1, [x0,208]
 	str	w1, [x2,44]
-	ldr	w1, [x0,220]
+	ldr	w1, [x0,212]
 	str	w1, [x2,48]
-	ldr	w1, [x0,344]
-	ldr	w0, [x0,2024]
+	ldr	w1, [x0,336]
+	ldr	w0, [x0,2016]
 	str	w1, [x2,60]
 	mov	w1, 1
 	str	w0, [x2,64]
 	mov	w0, 0
 	bl	FtlVendorPartWrite
-.L2114:
+.L2208:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
@@ -14528,51 +14862,51 @@ FtlEctTblFlush:
 	add	x3, x2, :lo12:.LANCHOR2
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	w4, [x3,160]
-	cbz	w4, .L2117
-	ldr	w3, [x3,220]
+	ldr	w4, [x3,152]
+	cbz	w4, .L2211
+	ldr	w3, [x3,212]
 	cmp	w3, 29
 	mov	w3, 4
 	csel	w1, w1, w3, hi
-.L2117:
+.L2211:
 	adrp	x3, .LANCHOR4
 	add	x3, x3, :lo12:.LANCHOR4
 	ldrh	w4, [x3,264]
 	cmp	w4, 31
-	bhi	.L2118
+	bhi	.L2212
 	add	w4, w4, 1
 	mov	w1, 1
 	strh	w4, [x3,264]
-.L2118:
-	cbnz	w0, .L2119
+.L2212:
+	cbnz	w0, .L2213
 	add	x0, x2, :lo12:.LANCHOR2
-	ldr	x3, [x0,2152]
+	ldr	x3, [x0,2144]
 	ldr	w0, [x3,20]
 	add	w1, w1, w0
 	ldr	w0, [x3,16]
 	cmp	w0, w1
-	bcc	.L2120
-.L2119:
+	bcc	.L2214
+.L2213:
 	add	x2, x2, :lo12:.LANCHOR2
-	ldr	x0, [x2,2152]
+	ldr	x0, [x2,2144]
 	ldr	w1, [x0,16]
 	str	w1, [x0,20]
 	mov	w1, 17221
 	movk	w1, 0x4254, lsl 16
 	str	w1, [x0]
-	ldr	x0, [x2,2152]
-	ldrh	w1, [x2,2136]
+	ldr	x0, [x2,2144]
+	ldrh	w1, [x2,2128]
 	str	wzr, [x0,4]
 	lsl	w3, w1, 9
 	str	w3, [x0,12]
 	ldr	w3, [x0,8]
-	ldr	x2, [x2,2152]
+	ldr	x2, [x2,2144]
 	add	w3, w3, 1
 	str	w3, [x0,8]
 	mov	w0, 64
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L2120:
+.L2214:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -14608,7 +14942,7 @@ FtlMapBlkWriteDumpData:
 	ldr	w1, [x0,56]
 	ldrh	w20, [x0,6]
 	ldr	x4, [x0,40]
-	cbz	w1, .L2125
+	cbz	w1, .L2219
 	adrp	x3, .LANCHOR2
 	adrp	x2, .LANCHOR4
 	add	x3, x3, :lo12:.LANCHOR2
@@ -14617,33 +14951,33 @@ FtlMapBlkWriteDumpData:
 	str	wzr, [x0,56]
 	mov	x21, x0
 	add	x1, x1, 136
-	ldr	x0, [x3,2072]
+	ldr	x0, [x3,2064]
 	uxth	w20, w20
-	ldr	x3, [x3,2112]
+	ldr	x3, [x3,2104]
 	mov	x19, x2
 	str	x3, [x1,16]
 	ubfiz	x3, x20, 2, 16
 	str	x0, [x1,8]
 	ldr	w3, [x4,x3]
 	str	w3, [x1,4]
-	cbz	w3, .L2127
+	cbz	w3, .L2221
 	mov	x0, x1
 	mov	w1, 1
 	mov	w2, w1
 	bl	FlashReadPages
-	b	.L2128
-.L2127:
-	adrp	x2, .LANCHOR0+2036
+	b	.L2222
+.L2221:
+	adrp	x2, .LANCHOR0+2028
 	mov	w1, 255
-	ldrh	w2, [x2,#:lo12:.LANCHOR0+2036]
+	ldrh	w2, [x2,#:lo12:.LANCHOR0+2028]
 	bl	ftl_memset
-.L2128:
+.L2222:
 	add	x2, x19, :lo12:.LANCHOR4
 	mov	x0, x21
 	mov	w1, w20
 	ldr	x2, [x2,144]
 	bl	FtlMapWritePage
-.L2125:
+.L2219:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -14654,87 +14988,90 @@ FtlMapBlkWriteDumpData:
 	.type	FtlRecoverySuperblock, %function
 FtlRecoverySuperblock:
 	stp	x29, x30, [sp, -208]!
+	mov	w2, 65535
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	stp	x27, x28, [sp,80]
 	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
 	mov	x19, x0
+	ldrh	w0, [x0]
+	cmp	w0, w2
+	beq	.L2382
+	ldrh	w0, [x19,2]
 	adrp	x23, .LANCHOR0
-	ldrh	w0, [x0,2]
 	str	w0, [x29,188]
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrb	w27, [x19,6]
 	ldr	w1, [x29,188]
-	ldrh	w0, [x0,2026]
+	ldrh	w0, [x0,2018]
 	cmp	w0, w1
-	bne	.L2133
+	bne	.L2229
 	strh	wzr, [x19,4]
-	b	.L2284
-.L2133:
+	b	.L2388
+.L2229:
 	ldrh	w0, [x19,16]
 	mov	w1, 0
-	mov	w2, 65535
-.L2135:
+.L2230:
 	cmp	w0, w2
-	bne	.L2287
+	bne	.L2391
 	add	w1, w1, 1
 	uxth	w1, w1
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
-	b	.L2135
-.L2287:
+	b	.L2230
+.L2391:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2137
+	bne	.L2232
 	bl	FtlGetLastWrittenPage
 	cmn	w0, #1
 	mov	w21, w0
-	beq	.L2138
+	beq	.L2233
 	add	x0, x23, :lo12:.LANCHOR0
 	mov	w24, w21
 	ldrb	w1, [x0,120]
-	cbnz	w1, .L2207
+	cbnz	w1, .L2305
 	add	x0, x0, 196
 	ldrh	w24, [x0,w21,sxtw 1]
-	b	.L2207
-.L2137:
+	b	.L2305
+.L2232:
 	mov	w1, 0
 	bl	FtlGetLastWrittenPage
 	cmn	w0, #1
 	mov	w21, w0
-	beq	.L2138
+	beq	.L2233
 	mov	w24, w0
-.L2207:
+.L2305:
 	add	x0, x23, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w28, 0
 	mov	w7, 65535
 	mov	w8, 56
 	adrp	x9, .LANCHOR2
-	ldrh	w3, [x0,1952]
+	ldrh	w3, [x0,1944]
 	mov	w10, 4
-	ldrh	w6, [x0,2038]
+	ldrh	w6, [x0,2030]
 	add	x3, x19, x3, lsl 1
-	b	.L2140
-.L2138:
+	b	.L2235
+.L2233:
 	strh	wzr, [x19,2]
-.L2284:
+.L2388:
 	strb	wzr, [x19,6]
-	b	.L2278
-.L2142:
+	b	.L2382
+.L2237:
 	ldrh	w1, [x2,16]
 	cmp	w1, w7
-	beq	.L2141
+	beq	.L2236
 	add	x4, x9, :lo12:.LANCHOR2
 	orr	w1, w24, w1, lsl 10
 	umull	x0, w28, w8
-	ldr	x5, [x4,2048]
+	ldr	x5, [x4,2040]
 	add	x5, x5, x0
 	str	w1, [x5,4]
-	ldr	x1, [x4,2048]
-	ldr	x4, [x4,904]
+	ldr	x1, [x4,2040]
+	ldr	x4, [x4,896]
 	add	x0, x1, x0
 	mul	w1, w28, w6
 	add	w28, w28, 1
@@ -14743,46 +15080,46 @@ FtlRecoverySuperblock:
 	uxth	w28, w28
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x0,16]
-.L2141:
+.L2236:
 	add	x2, x2, 2
-.L2140:
+.L2235:
 	cmp	x2, x3
-	bne	.L2142
+	bne	.L2237
 	ldrb	w0, [x19,8]
 	str	wzr, [x29,184]
 	cmp	w0, 1
-	bne	.L2143
+	bne	.L2238
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
 	cmp	w0, wzr
 	cset	w0, ne
 	str	w0, [x29,184]
-.L2143:
+.L2238:
 	adrp	x20, .LANCHOR2
 	ldr	w2, [x29,184]
 	add	x25, x20, :lo12:.LANCHOR2
 	mov	w1, w28
 	mov	w26, 0
-	ldr	x0, [x25,2048]
+	ldr	x0, [x25,2040]
 	bl	FlashReadPages
-	ldr	w22, [x25,200]
-	ldr	x3, [x25,2048]
+	ldr	w22, [x25,192]
+	ldr	x3, [x25,2040]
 	uxth	w6, w24
 	mov	w25, 65535
-.L2144:
+.L2239:
 	cmp	w26, w28
-	beq	.L2288
+	beq	.L2392
 	ldr	w0, [x3]
-	cbnz	w0, .L2145
+	cbnz	w0, .L2240
 	ldr	x4, [x3,16]
 	ldr	w2, [x4,4]
 	cmn	w2, #1
-	beq	.L2146
+	beq	.L2241
 	add	x5, x20, :lo12:.LANCHOR2
 	mov	w0, w2
 	str	x6, [x29,144]
 	str	x4, [x29,152]
-	ldr	w1, [x5,200]
+	ldr	w1, [x5,192]
 	str	x3, [x29,160]
 	str	x2, [x29,168]
 	str	x5, [x29,176]
@@ -14792,119 +15129,119 @@ FtlRecoverySuperblock:
 	ldr	x3, [x29,160]
 	ldr	x4, [x29,152]
 	ldr	x6, [x29,144]
-	cbz	w0, .L2146
+	cbz	w0, .L2241
 	add	w2, w2, 1
-	str	w2, [x5,200]
-.L2146:
+	str	w2, [x5,192]
+.L2241:
 	ldr	w0, [x4]
 	cmn	w0, #1
-	bne	.L2147
+	bne	.L2242
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w1, 56
 	uxth	w21, w21
 	umull	x26, w26, w1
-	ldr	x0, [x0,2048]
+	ldr	x0, [x0,2040]
 	add	x26, x0, x26
 	ldr	w0, [x26,4]
-	b	.L2280
-.L2145:
+	b	.L2384
+.L2240:
 	mov	w25, w6
-.L2147:
+.L2242:
 	add	w26, w26, 1
 	add	x3, x3, 56
 	uxth	w26, w26
-	b	.L2144
-.L2288:
+	b	.L2239
+.L2392:
 	add	x0, x20, :lo12:.LANCHOR2
 	add	w21, w21, 1
 	uxth	w21, w21
-	ldr	x0, [x0,2048]
+	ldr	x0, [x0,2040]
 	ldr	w0, [x0,4]
-.L2280:
+.L2384:
 	lsr	x0, x0, 10
 	bl	P2V_plane
 	uxth	w26, w0
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2151
+	bne	.L2246
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrb	w2, [x0,120]
-	cbnz	w2, .L2151
+	cbnz	w2, .L2246
 	add	x0, x0, 196
 	ldrh	w21, [x0,w21,sxtw 1]
-.L2151:
+.L2246:
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2026]
+	ldrh	w0, [x0,2018]
 	cmp	w0, w21
-	bne	.L2152
+	bne	.L2247
 	strh	w21, [x19,2]
 	strb	wzr, [x19,6]
 	strh	wzr, [x19,4]
-.L2152:
+.L2247:
 	uxth	w0, w27
 	str	w0, [x29,152]
 	ldr	w0, [x29,188]
 	cmp	w21, w0
-	bne	.L2153
+	bne	.L2248
 	ldr	w0, [x29,152]
 	cmp	w26, w0
-	beq	.L2285
-.L2153:
+	beq	.L2389
+.L2248:
 	mov	w0, 65535
 	sub	w22, w22, #1
 	cmp	w25, w0
-	bne	.L2154
-	cbnz	w1, .L2155
-.L2154:
+	bne	.L2249
+	cbnz	w1, .L2250
+.L2249:
 	add	x0, x20, :lo12:.LANCHOR2
 	uxth	w5, w24
-	ldr	w1, [x0,2332]
+	ldr	w1, [x0,2324]
 	cmn	w1, #1
-	bne	.L2156
-	str	w22, [x0,2332]
-.L2156:
+	bne	.L2251
+	str	w22, [x0,2324]
+.L2251:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w25, [x29,188]
-	ldr	w6, [x0,2332]
+	ldr	w6, [x0,2324]
 	ldr	w0, [x29,188]
 	add	w0, w0, 7
 	cmp	w0, w24, uxth
-	bge	.L2157
+	bge	.L2252
 	sub	w25, w5, #7
 	uxth	w25, w25
-.L2157:
+.L2252:
 	mov	w3, -1
 	add	x28, x20, :lo12:.LANCHOR2
 	mov	w27, w3
 	mov	w4, 65535
 	mov	w7, 56
-	add	x8, x28, 996
-.L2158:
+	add	x8, x28, 988
+.L2253:
 	cmp	w25, w5
-	bhi	.L2171
+	bhi	.L2266
 	add	x0, x23, :lo12:.LANCHOR0
 	mov	w24, 0
-	ldrh	w2, [x0,1952]
+	ldrh	w2, [x0,1944]
 	mov	x0, x19
 	add	x2, x19, x2, lsl 1
-.L2172:
+.L2267:
 	cmp	x0, x2
-	beq	.L2289
+	beq	.L2393
 	ldrh	w1, [x0,16]
 	cmp	w1, w4
-	beq	.L2159
+	beq	.L2254
 	umull	x9, w24, w7
-	ldr	x10, [x28,2048]
+	ldr	x10, [x28,2040]
 	add	w24, w24, 1
 	orr	w1, w25, w1, lsl 10
 	add	x9, x10, x9
 	uxth	w24, w24
 	str	w1, [x9,4]
-.L2159:
+.L2254:
 	add	x0, x0, 2
-	b	.L2172
-.L2289:
-	ldr	x0, [x28,2048]
+	b	.L2267
+.L2393:
+	ldr	x0, [x28,2040]
 	mov	w1, w24
 	ldr	w2, [x29,184]
 	str	x8, [x29,128]
@@ -14921,153 +15258,153 @@ FtlRecoverySuperblock:
 	ldr	x6, [x29,160]
 	sxtw	x10, w25
 	ldrb	w9, [x0,120]
-	ldr	x0, [x28,2048]
+	ldr	x0, [x28,2040]
 	ldr	x4, [x29,144]
 	ldr	x7, [x29,136]
 	add	x0, x0, 16
 	ldr	x8, [x29,128]
-.L2161:
+.L2256:
 	cmp	w1, w24
-	beq	.L2290
+	beq	.L2394
 	ldr	w2, [x0,-16]
-	cbnz	w2, .L2162
+	cbnz	w2, .L2257
 	ldr	x2, [x0]
 	ldrh	w11, [x2]
 	cmp	w11, w4
-	beq	.L2163
+	beq	.L2258
 	ldr	w2, [x2,4]
 	cmn	w2, #1
-	beq	.L2163
-	ldr	w27, [x28,2332]
+	beq	.L2258
+	ldr	w27, [x28,2324]
 	cmn	w3, #1
-	str	w2, [x28,2332]
-	bne	.L2163
+	str	w2, [x28,2324]
+	bne	.L2258
 	ldrh	w2, [x8,x10,lsl 1]
 	cmp	w2, w4
-	bne	.L2164
-	cbz	w9, .L2163
-.L2164:
+	bne	.L2259
+	cbz	w9, .L2258
+.L2259:
 	cmp	w27, w22
 	csinv	w3, w27, wzr, ne
-	b	.L2163
-.L2162:
+	b	.L2258
+.L2257:
 	ldrb	w0, [x19,8]
-	cbnz	w0, .L2155
+	cbnz	w0, .L2250
 	add	x0, x20, :lo12:.LANCHOR2
-	add	x1, x0, 996
+	add	x1, x0, 988
 	ldrh	w2, [x1,w25,sxtw 1]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L2166
+	bne	.L2261
 	cmn	w3, #1
-	beq	.L2167
-	str	w3, [x0,2332]
-	b	.L2155
-.L2167:
+	beq	.L2262
+	str	w3, [x0,2324]
+	b	.L2250
+.L2262:
 	cmp	w6, w22
-	beq	.L2168
-	str	w6, [x0,2332]
-	b	.L2155
-.L2168:
-	ldr	w1, [x0,2332]
-	b	.L2286
-.L2166:
+	beq	.L2263
+	str	w6, [x0,2324]
+	b	.L2250
+.L2263:
+	ldr	w1, [x0,2324]
+	b	.L2390
+.L2261:
 	cmp	w27, w22
-	beq	.L2169
+	beq	.L2264
 	cmn	w27, #1
-	beq	.L2155
-	str	w27, [x0,2332]
-	b	.L2155
-.L2169:
-	ldr	w1, [x0,2332]
+	beq	.L2250
+	str	w27, [x0,2324]
+	b	.L2250
+.L2264:
+	ldr	w1, [x0,2324]
 	cmp	w1, w22
-	beq	.L2155
-.L2286:
+	beq	.L2250
+.L2390:
 	sub	w1, w1, #1
-	b	.L2281
-.L2163:
+	b	.L2385
+.L2258:
 	add	w1, w1, 1
 	add	x0, x0, 56
 	uxth	w1, w1
-	b	.L2161
-.L2290:
+	b	.L2256
+.L2394:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L2158
-.L2171:
+	b	.L2253
+.L2266:
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w1, -1
-.L2281:
-	str	w1, [x0,2332]
-.L2155:
+.L2385:
+	str	w1, [x0,2324]
+.L2250:
 	adrp	x25, .LANCHOR4
 	mov	w1, 1
 	add	x0, x25, :lo12:.LANCHOR4
 	strh	w1, [x0,266]
 	add	x0, x20, :lo12:.LANCHOR2
-	add	x0, x0, 2240
+	add	x0, x0, 2232
 	bl	FtlMapBlkWriteDumpData
 	ldr	w24, [x29,188]
-	adrp	x0, .LC112
+	adrp	x0, .LC119
 	str	x25, [x29,136]
-	add	x0, x0, :lo12:.LC112
+	add	x0, x0, :lo12:.LC119
 	str	x0, [x29,128]
-.L2173:
+.L2268:
 	add	x0, x23, :lo12:.LANCHOR0
 	mov	x1, x19
 	str	wzr, [x29,176]
 	mov	w7, 65535
 	mov	w8, 56
-	ldrh	w3, [x0,1952]
+	ldrh	w3, [x0,1944]
 	ldrb	w6, [x0,120]
 	add	x3, x19, x3, lsl 1
-.L2174:
+.L2269:
 	cmp	x1, x3
-	beq	.L2291
+	beq	.L2395
 	ldrh	w2, [x1,16]
 	cmp	w2, w7
-	beq	.L2175
+	beq	.L2270
 	ldr	w0, [x29,176]
 	add	x5, x20, :lo12:.LANCHOR2
 	orr	w2, w24, w2, lsl 10
-	ldr	x4, [x5,2048]
+	ldr	x4, [x5,2040]
 	umull	x0, w0, w8
 	add	x4, x4, x0
 	str	w2, [x4,4]
 	ldrb	w2, [x19,8]
 	cmp	w2, 1
-	bne	.L2176
-	cbz	w6, .L2176
-	ldr	x2, [x5,2048]
+	bne	.L2271
+	cbz	w6, .L2271
+	ldr	x2, [x5,2040]
 	add	x0, x2, x0
 	ldr	w2, [x0,4]
 	orr	w2, w2, -2147483648
 	str	w2, [x0,4]
-.L2176:
+.L2271:
 	ldr	w0, [x29,176]
 	add	w0, w0, 1
 	uxth	w0, w0
 	str	w0, [x29,176]
-.L2175:
+.L2270:
 	add	x1, x1, 2
-	b	.L2174
-.L2291:
+	b	.L2269
+.L2395:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w1, [x29,176]
 	ldr	w2, [x29,184]
-	ldr	x0, [x0,2048]
+	ldr	x0, [x0,2040]
 	bl	FlashReadPages
 	str	xzr, [x29,160]
-.L2178:
+.L2273:
 	ldrh	w0, [x29,160]
 	ldr	w1, [x29,176]
 	cmp	w1, w0, uxth
-	bls	.L2292
+	bls	.L2396
 	ldr	x0, [x29,160]
 	mov	x1, 56
 	mul	x25, x0, x1
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	x1, [x0,2048]
+	ldr	x1, [x0,2040]
 	str	x1, [x29,168]
 	add	x28, x1, x25
 	ldr	w27, [x28,4]
@@ -15078,38 +15415,38 @@ FtlRecoverySuperblock:
 	ldr	w1, [x29,188]
 	cmp	w24, w1
 	ldr	x1, [x29,168]
-	bcc	.L2179
+	bcc	.L2274
 	ldr	w2, [x29,152]
 	cmp	w0, w2
-	bcs	.L2211
+	bcs	.L2309
 	ldr	w2, [x29,188]
 	cmp	w24, w2
-	beq	.L2179
-.L2211:
+	beq	.L2274
+.L2309:
 	cmp	w0, w26
-	bne	.L2212
+	bne	.L2310
 	cmp	w24, w21
-	beq	.L2181
-.L2212:
+	beq	.L2276
+.L2310:
 	ldr	w0, [x1,x25]
 	cmn	w0, #1
-	beq	.L2183
+	beq	.L2278
 	ldr	x28, [x28,16]
 	mov	w0, 61589
 	ldrh	w1, [x28]
 	cmp	w1, w0
-	bne	.L2190
+	bne	.L2285
 	ldr	w22, [x28,4]
 	cmn	w22, #1
-	beq	.L2185
+	beq	.L2280
 	add	x27, x20, :lo12:.LANCHOR2
 	mov	w0, w22
-	ldr	w1, [x27,200]
+	ldr	w1, [x27,192]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2185
+	cbz	w0, .L2280
 	add	w0, w22, 1
-	str	w0, [x27,200]
-.L2185:
+	str	w0, [x27,192]
+.L2280:
 	ldr	w27, [x28,8]
 	add	x1, x29, 200
 	ldr	w0, [x28,12]
@@ -15119,55 +15456,55 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	add	x3, x20, :lo12:.LANCHOR2
 	str	x3, [x29,168]
-	ldr	w1, [x3,2332]
+	ldr	w1, [x3,2324]
 	cmn	w1, #1
-	beq	.L2186
+	beq	.L2281
 	mov	w0, w22
 	bl	ftl_cmp_data_ver
 	ldr	x3, [x29,168]
-	cbz	w0, .L2186
+	cbz	w0, .L2281
 	ldr	w1, [x29,196]
 	cmn	w1, #1
-	beq	.L2187
-	ldr	x0, [x3,2048]
+	beq	.L2282
+	ldr	x0, [x3,2040]
 	str	x3, [x29,120]
 	add	x0, x0, x25
 	str	w1, [x0,4]
 	mov	w1, 1
 	ldr	x2, [x0,16]
-	ldr	x0, [x3,2048]
+	ldr	x0, [x3,2040]
 	str	x2, [x29,168]
 	mov	w2, 0
 	add	x0, x0, x25
 	bl	FlashReadPages
 	ldr	x3, [x29,120]
 	ldr	x0, [x29,168]
-	ldr	x2, [x3,2048]
+	ldr	x2, [x3,2040]
 	ldr	w0, [x0,4]
 	str	w0, [x29,144]
 	add	x4, x2, x25
 	ldr	w0, [x2,x25]
 	cmn	w0, #1
-	bne	.L2188
-	b	.L2189
-.L2187:
+	bne	.L2283
+	b	.L2284
+.L2282:
 	ldr	w0, [x29,204]
 	ldr	w1, [x29,200]
 	cmp	w1, w0
-	bne	.L2190
+	bne	.L2285
 	mov	w0, w27
 	add	x1, x29, 196
 	mov	w2, 1
 	bl	log2phys
-.L2190:
+.L2285:
 	ldrh	w0, [x19]
-	b	.L2283
-.L2188:
+	b	.L2387
+.L2283:
 	ldr	x0, [x29,168]
 	ldr	w28, [x0,8]
 	cmp	w28, w27
-	bne	.L2189
-	ldr	w0, [x3,2332]
+	bne	.L2284
+	ldr	w0, [x3,2324]
 	ldr	w1, [x29,144]
 	str	x2, [x29,104]
 	str	x4, [x29,112]
@@ -15176,181 +15513,193 @@ FtlRecoverySuperblock:
 	ldr	x3, [x29,120]
 	ldr	x4, [x29,112]
 	ldr	x2, [x29,104]
-	cbz	w0, .L2189
+	cbz	w0, .L2284
 	ldr	w0, [x29,200]
 	ldr	w1, [x29,204]
 	cmp	w0, w1
-	beq	.L2195
+	beq	.L2290
 	ldr	w1, [x29,196]
 	cmp	w0, w1
-	beq	.L2189
+	beq	.L2284
 	cmn	w0, #1
-	beq	.L2193
+	beq	.L2288
 	str	w0, [x4,4]
 	mov	w2, 0
 	ldr	x1, [x4,16]
-	ldr	x0, [x3,2048]
+	ldr	x0, [x3,2040]
 	str	x1, [x29,168]
 	mov	w1, 1
 	add	x0, x0, x25
 	bl	FlashReadPages
-	b	.L2194
-.L2193:
+	b	.L2289
+.L2288:
 	str	w0, [x2,x25]
-.L2194:
+.L2289:
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	x1, [x0,2048]
+	ldr	x1, [x0,2040]
 	ldr	w1, [x1,x25]
 	cmn	w1, #1
-	beq	.L2195
+	beq	.L2290
 	ldr	x1, [x29,168]
-	ldr	w0, [x0,2332]
+	ldr	w0, [x0,2324]
 	ldr	w25, [x1,4]
 	mov	w1, w25
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2195
+	cbz	w0, .L2290
 	ldr	w0, [x29,144]
 	mov	w1, w25
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2189
-.L2195:
+	cbz	w0, .L2284
+.L2290:
 	ldr	w1, [x29,196]
 	mov	w0, w28
 	bl	FtlReUsePrevPpa
-.L2189:
+.L2284:
 	mov	w0, -1
 	str	w0, [x29,196]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2197
-.L2186:
+	b	.L2292
+.L2281:
 	ldr	w0, [x29,204]
 	ldr	w1, [x29,200]
 	cmp	w1, w0
-	beq	.L2197
+	beq	.L2292
 	mov	w0, w27
 	add	x1, x29, 204
 	mov	w2, 1
 	bl	log2phys
 	ldr	w25, [x29,200]
 	cmn	w25, #1
-	beq	.L2197
+	beq	.L2292
 	ldr	w0, [x29,196]
 	cmp	w25, w0
-	beq	.L2197
+	beq	.L2292
 	lsr	x0, x25, 10
 	bl	P2V_block_in_plane
 	uxth	w0, w0
-	ldrh	w2, [x20,#:lo12:.LANCHOR2]
 	add	x1, x20, :lo12:.LANCHOR2
+	ldrh	w2, [x1,-8]
 	cmp	w2, w0
-	beq	.L2200
-	ldrh	w2, [x1,48]
+	beq	.L2295
+	ldrh	w2, [x1,40]
 	cmp	w2, w0
-	beq	.L2200
-	ldrh	w1, [x1,96]
+	beq	.L2295
+	ldrh	w1, [x1,88]
 	cmp	w1, w0
-	bne	.L2197
-.L2200:
+	bne	.L2292
+.L2295:
 	add	x28, x20, :lo12:.LANCHOR2
 	mov	w1, 1
 	mov	w2, 0
-	ldr	x0, [x28,2048]
+	ldr	x0, [x28,2040]
 	str	w25, [x0,4]
 	ldr	x3, [x0,16]
-	ldr	x0, [x28,2048]
+	ldr	x0, [x28,2040]
 	str	x3, [x29,168]
 	bl	FlashReadPages
-	ldr	x0, [x28,2048]
+	ldr	x0, [x28,2040]
 	ldr	x3, [x29,168]
 	ldr	w0, [x0]
 	ldr	w1, [x3,4]
 	cmn	w0, #1
-	beq	.L2197
+	beq	.L2292
 	mov	w0, w22
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L2197
+	cbnz	w0, .L2292
 	mov	w0, w27
 	add	x1, x29, 200
 	mov	w2, 1
 	bl	log2phys
-.L2197:
+.L2292:
 	ldr	w0, [x29,196]
 	cmn	w0, #1
-	beq	.L2179
+	beq	.L2274
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
 	add	x2, x20, :lo12:.LANCHOR2
 	ubfiz	x3, x1, 1, 16
-	ldr	x2, [x2,-40]
+	ldr	x2, [x2,-48]
 	ldrh	w2, [x2,x3]
-	cbz	w2, .L2201
-.L2283:
+	cbz	w2, .L2296
+.L2387:
 	bl	decrement_vpc_count
-	b	.L2179
-.L2201:
+	b	.L2274
+.L2296:
 	ldr	x0, [x29,128]
 	bl	printk
-	b	.L2179
-.L2183:
+	b	.L2274
+.L2278:
 	ldr	x0, [x29,136]
 	add	x1, x0, :lo12:.LANCHOR4
 	ldr	w0, [x1,268]
 	cmp	w0, 31
-	bhi	.L2202
+	bhi	.L2297
 	add	x2, x1, 272
 	str	w27, [x2,w0,uxtw 2]
 	add	w0, w0, 1
 	str	w0, [x1,268]
-.L2202:
+.L2297:
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	w1, [x0,2332]
+	ldr	w1, [x0,2324]
 	cmn	w1, #1
-	beq	.L2282
+	beq	.L2386
 	cmp	w1, w22
-	bls	.L2179
-.L2282:
-	str	w22, [x0,2332]
-.L2179:
+	bls	.L2274
+.L2386:
+	str	w22, [x0,2324]
+.L2274:
 	ldr	x0, [x29,160]
 	add	x0, x0, 1
 	str	x0, [x29,160]
-	b	.L2178
-.L2292:
-	add	x0, x23, :lo12:.LANCHOR0
+	b	.L2273
+.L2396:
+	ldrb	w0, [x19,8]
 	add	w24, w24, 1
+	cmp	w0, 1
 	uxth	w24, w24
-	ldrh	w1, [x0,2026]
+	bne	.L2300
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w1, [x0,120]
+	cbz	w1, .L2300
+	cmp	w21, w24
+	bne	.L2300
+	ldrh	w0, [x0,2020]
+	cmp	w0, w24
+	beq	.L2276
+.L2300:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2018]
 	cmp	w24, w1
-	bne	.L2173
-	ldrh	w2, [x0,1952]
+	bne	.L2268
+	ldrh	w2, [x0,1944]
 	mov	w3, 65535
 	strh	w24, [x19,2]
 	mov	x0, 0
 	strh	wzr, [x19,4]
-.L2205:
+.L2302:
 	uxth	w1, w0
 	cmp	w1, w2
-	bcs	.L2278
+	bcs	.L2382
 	add	x0, x0, 1
 	add	x4, x19, x0, lsl 1
 	ldrh	w4, [x4,14]
 	cmp	w4, w3
-	beq	.L2205
+	beq	.L2302
 	strb	w1, [x19,6]
-	b	.L2278
-.L2181:
+	b	.L2382
+.L2276:
 	strb	w26, [x19,6]
 	strh	w21, [x19,2]
-.L2285:
+.L2389:
 	mov	x0, x19
 	mov	w1, w21
 	mov	w2, w26
 	bl	ftl_sb_update_avl_pages
-.L2278:
+.L2382:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -15370,59 +15719,60 @@ FtlWriteDumpData:
 	adrp	x19, .LANCHOR2
 	str	x25, [sp,64]
 	stp	x21, x22, [sp,32]
-	add	x21, x19, :lo12:.LANCHOR2
+	add	x22, x19, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,48]
-	ldrh	w1, [x21,4]
-	cbz	w1, .L2294
-	ldrb	w0, [x21,8]
-	cbnz	w0, .L2294
-	adrp	x22, .LANCHOR0
-	ldrb	w0, [x21,7]
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w2, [x22,2026]
-	mul	w0, w0, w2
-	cmp	w1, w0
-	beq	.L2294
-	ldrb	w24, [x21,10]
-	ldr	w23, [x22,2104]
-	ldrh	w25, [x22,1952]
-	cbnz	w24, .L2293
+	ldrh	w2, [x22,-4]
+	cbz	w2, .L2398
+	ldrb	w0, [x22]
+	cbnz	w0, .L2398
+	adrp	x21, .LANCHOR0
+	ldrb	w0, [x22,-1]
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrh	w3, [x21,2018]
+	mul	w0, w0, w3
+	cmp	w2, w0
+	beq	.L2398
+	ldrb	w24, [x22,2]
+	ldr	w23, [x21,2096]
+	ldrh	w25, [x21,1944]
+	cbnz	w24, .L2397
 	sub	w23, w23, #1
 	add	x1, x29, 84
 	mov	w0, w23
 	mov	w2, w24
 	bl	log2phys
-	ldr	x20, [x21,2112]
+	ldr	x20, [x22,2104]
 	ldr	w0, [x29,84]
-	ldr	x1, [x21,-64]
+	ldr	x1, [x22,-72]
 	str	w0, [x29,92]
 	cmn	w0, #1
 	str	w23, [x29,112]
 	str	x1, [x29,96]
 	str	x20, [x29,104]
 	str	w24, [x20,4]
-	beq	.L2296
+	beq	.L2400
 	add	x0, x29, 88
 	mov	w1, 1
 	mov	w2, w24
 	bl	FlashReadPages
-	b	.L2297
-.L2296:
-	ldr	x0, [x21,-64]
+	b	.L2401
+.L2400:
+	ldr	x0, [x22,-72]
 	mov	w1, 255
-	ldrh	w2, [x22,2036]
+	ldrh	w2, [x21,2028]
 	bl	ftl_memset
-.L2297:
+.L2401:
+	add	x24, x19, :lo12:.LANCHOR2
 	mov	w0, -3947
 	lsl	w25, w25, 2
 	strh	w0, [x20]
 	mov	w22, 0
-	add	x21, x19, :lo12:.LANCHOR2
-.L2298:
+	sub	x21, x24, #8
+.L2402:
 	cmp	w22, w25
-	beq	.L2299
+	beq	.L2403
 	ldrh	w0, [x21,4]
-	cbz	w0, .L2299
+	cbz	w0, .L2403
 	ldr	w0, [x29,92]
 	add	w22, w22, 1
 	str	w0, [x20,12]
@@ -15432,7 +15782,7 @@ FtlWriteDumpData:
 	str	w23, [x20,8]
 	bl	get_new_active_ppa
 	str	w0, [x29,92]
-	ldr	w1, [x21,200]
+	ldr	w1, [x24,192]
 	mov	w2, 0
 	str	w1, [x20,4]
 	mov	w3, w2
@@ -15440,21 +15790,21 @@ FtlWriteDumpData:
 	add	x0, x29, 88
 	cmn	w1, #1
 	csel	w1, w1, wzr, ne
-	str	w1, [x21,200]
+	str	w1, [x24,192]
 	mov	w1, 1
 	bl	FlashProgPages
 	ldrh	w0, [x21]
 	bl	decrement_vpc_count
-	b	.L2298
-.L2299:
+	b	.L2402
+.L2403:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
-	strb	w0, [x19,10]
-	b	.L2293
-.L2294:
+	strb	w0, [x19,2]
+	b	.L2397
+.L2398:
 	add	x19, x19, :lo12:.LANCHOR2
-	strb	wzr, [x19,10]
-.L2293:
+	strb	wzr, [x19,2]
+.L2397:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -15474,24 +15824,24 @@ l2p_flush:
 	adrp	x20, .LANCHOR0
 	adrp	x21, .LANCHOR2
 	bl	FtlWriteDumpData
-.L2311:
+.L2415:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2066]
+	ldrh	w0, [x0,2058]
 	cmp	w0, w19
-	bls	.L2314
+	bls	.L2418
 	add	x1, x21, :lo12:.LANCHOR2
 	ubfiz	x0, x19, 4, 16
-	ldr	x1, [x1,144]
+	ldr	x1, [x1,136]
 	add	x0, x1, x0
 	ldr	w0, [x0,4]
-	tbz	w0, #31, .L2312
+	tbz	w0, #31, .L2416
 	mov	w0, w19
 	bl	flush_l2p_region
-.L2312:
+.L2416:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2311
-.L2314:
+	b	.L2415
+.L2418:
 	mov	w0, 0
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -15504,11 +15854,11 @@ l2p_flush:
 FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC113
+	adrp	x0, .LC120
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x29, sp, 0
 	add	x1, x1, 16
-	add	x0, x0, :lo12:.LC113
+	add	x0, x0, :lo12:.LC120
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
@@ -15518,79 +15868,79 @@ FtlVpcCheckAndModify:
 	adrp	x20, .LANCHOR2
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w19, 0
-	ldrh	w2, [x1,1962]
+	ldrh	w2, [x1,1954]
 	mov	w1, 0
-	ldr	x0, [x0,2160]
+	ldr	x0, [x0,2152]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L2316:
+.L2420:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w0, [x0,2104]
+	ldr	w0, [x0,2096]
 	cmp	w19, w0
-	bcs	.L2331
+	bcs	.L2435
 	mov	w0, w19
 	add	x1, x29, 76
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2317
+	beq	.L2421
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ubfiz	x0, x0, 1, 16
 	add	x1, x20, :lo12:.LANCHOR2
-	ldr	x2, [x1,2160]
+	ldr	x2, [x1,2152]
 	ldrh	w1, [x2,x0]
 	add	w1, w1, 1
 	strh	w1, [x2,x0]
-.L2317:
+.L2421:
 	add	w19, w19, 1
-	b	.L2316
-.L2331:
-	adrp	x23, .LC114
+	b	.L2420
+.L2435:
+	adrp	x23, .LC121
 	mov	w19, 0
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w24, 65535
-	add	x23, x23, :lo12:.LC114
-.L2319:
+	add	x23, x23, :lo12:.LC121
+.L2423:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,1960]
+	ldrh	w0, [x0,1952]
 	cmp	w0, w19
-	bls	.L2332
+	bls	.L2436
 	ubfiz	x22, x19, 1, 16
-	ldr	x0, [x20,-40]
+	ldr	x0, [x20,-48]
 	ldrh	w2, [x0,x22]
-	ldr	x0, [x20,2160]
+	ldr	x0, [x20,2152]
 	ldrh	w3, [x0,x22]
 	cmp	w2, w3
-	beq	.L2322
+	beq	.L2426
 	cmp	w2, w24
-	beq	.L2322
+	beq	.L2426
 	mov	x0, x23
 	mov	w1, w19
 	bl	printk
-	ldrh	w0, [x20]
+	ldrh	w0, [x20,-8]
 	cmp	w0, w19
-	beq	.L2322
-	ldrh	w0, [x20,96]
+	beq	.L2426
+	ldrh	w0, [x20,88]
 	cmp	w0, w19
-	beq	.L2322
-	ldrh	w0, [x20,48]
+	beq	.L2426
+	ldrh	w0, [x20,40]
 	cmp	w0, w19
-	beq	.L2322
-	ldr	x0, [x20,2160]
+	beq	.L2426
+	ldr	x0, [x20,2152]
 	ldrh	w1, [x0,x22]
-	ldr	x0, [x20,-40]
+	ldr	x0, [x20,-48]
 	strh	w1, [x0,x22]
 	mov	w0, w19
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2322:
+.L2426:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2319
-.L2332:
+	b	.L2423
+.L2436:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -15610,81 +15960,81 @@ allocate_new_data_superblock:
 	ldrh	w21, [x0]
 	mov	w0, 65535
 	cmp	w21, w0
-	beq	.L2334
+	beq	.L2438
 	add	x1, x19, :lo12:.LANCHOR2
 	ubfiz	x0, x21, 1, 16
-	ldr	x1, [x1,-40]
+	ldr	x1, [x1,-48]
 	ldrh	w0, [x1,x0]
-	cbz	w0, .L2335
+	cbz	w0, .L2439
 	mov	w0, w21
 	bl	INSERT_DATA_LIST
-	b	.L2334
-.L2335:
+	b	.L2438
+.L2439:
 	mov	w0, w21
 	bl	INSERT_FREE_LIST
-.L2334:
-	add	x2, x19, :lo12:.LANCHOR2
+.L2438:
+	add	x1, x19, :lo12:.LANCHOR2
 	strb	wzr, [x20,8]
-	add	x0, x2, 48
+	add	x0, x1, 40
 	cmp	x20, x0
-	beq	.L2336
+	beq	.L2440
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w1, [x0,1972]
-	cmp	w1, 1
-	beq	.L2336
+	ldrh	w2, [x0,1964]
+	cmp	w2, 1
+	beq	.L2440
 	ldrb	w0, [x0,120]
-	cbz	w0, .L2337
-.L2336:
+	cbz	w0, .L2441
+.L2440:
 	mov	w0, 1
 	strb	w0, [x20,8]
-	b	.L2338
-.L2337:
-	cmp	x20, x2
-	bne	.L2338
-	cmp	w1, 3
-	beq	.L2340
-	ldr	w0, [x20,344]
+	b	.L2442
+.L2441:
+	sub	x0, x1, #8
+	cmp	x20, x0
+	bne	.L2442
+	cmp	w2, 3
+	beq	.L2444
+	ldr	w0, [x1,336]
 	cmp	w0, 1
-	bne	.L2341
-.L2340:
-	add	x0, x19, :lo12:.LANCHOR2
-	mov	w1, 1
-	strb	w1, [x0,8]
-.L2341:
+	bne	.L2445
+.L2444:
+	mov	w0, 1
+	strb	w0, [x19,#:lo12:.LANCHOR2]
+.L2445:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	w1, [x0,160]
-	cbz	w1, .L2338
-	ldr	w1, [x0,220]
+	ldr	w1, [x0,152]
+	cbz	w1, .L2442
+	ldr	w1, [x0,212]
 	cmp	w1, 29
-	bhi	.L2338
+	bhi	.L2442
 	mov	w1, 1
-	strb	w1, [x0,8]
-.L2338:
+	strb	w1, [x0]
+.L2442:
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	w1, 65535
-	ldrh	w0, [x2,2320]
+	ldrh	w0, [x2,2312]
 	cmp	w0, w1
-	beq	.L2343
+	beq	.L2447
 	cmp	w21, w0
-	bne	.L2344
+	bne	.L2448
 	ubfiz	x1, x0, 1, 16
-	ldr	x2, [x2,-40]
+	ldr	x2, [x2,-48]
 	ldrh	w1, [x2,x1]
-	cbz	w1, .L2345
-.L2344:
+	cbz	w1, .L2449
+.L2448:
 	bl	update_vpc_list
-.L2345:
+.L2449:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
-	strh	w0, [x19,2320]
-.L2343:
+	strh	w0, [x19,2312]
+.L2447:
 	mov	x0, x20
 	bl	allocate_data_superblock
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
 	mov	w0, 0
 	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
 	ldr	x21, [sp,32]
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -15705,703 +16055,614 @@ rk_ftl_garbage_collect:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldr	w4, [x3,2028]
-	cbnz	w4, .L2495
-	ldrh	w4, [x3,-24]
+	ldr	w4, [x3,2020]
+	cbnz	w4, .L2609
+	ldrh	w4, [x3,-32]
 	cmp	w4, 47
-	bls	.L2495
+	bls	.L2609
 	mov	w24, w0
-	adrp	x0, .LANCHOR1+3004
+	adrp	x0, .LANCHOR1+3008
 	mov	w22, w1
-	ldrh	w1, [x0,#:lo12:.LANCHOR1+3004]
+	ldrh	w1, [x0,#:lo12:.LANCHOR1+3008]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2360
-.L2363:
+	bne	.L2464
+.L2467:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
-	ldrh	w1, [x0,954]
+	ldrh	w1, [x0,946]
 	cmp	w1, w2
-	bne	.L2361
-	b	.L2362
-.L2360:
-	ldrh	w1, [x3,96]
+	bne	.L2465
+	b	.L2466
+.L2464:
+	ldrh	w1, [x3,88]
 	cmp	w1, w0
-	beq	.L2363
+	beq	.L2467
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w2, 1
-	cbz	w0, .L2363
-	b	.L2495
-.L2361:
-	ldrh	w3, [x0,952]
+	cbz	w0, .L2467
+	b	.L2609
+.L2465:
+	ldrh	w3, [x0,944]
 	cmp	w3, w2
-	bne	.L2362
-	strh	w1, [x0,952]
+	bne	.L2466
+	strh	w1, [x0,944]
 	mov	w1, -1
-	strh	w1, [x0,954]
-.L2362:
-	add	x20, x19, :lo12:.LANCHOR2
+	strh	w1, [x0,946]
+.L2466:
+	add	x1, x19, :lo12:.LANCHOR2
 	cmp	w24, 1
-	ldr	w0, [x20,868]
+	ldr	w0, [x1,860]
 	add	w0, w0, 1
 	add	w0, w0, w24, lsl 7
-	str	w0, [x20,868]
-	beq	.L2364
-.L2366:
-	mov	w21, 65535
-	b	.L2365
-.L2364:
-	ldr	w1, [x20,160]
-	cbz	w1, .L2366
-	ldr	w1, [x20,220]
+	str	w0, [x1,860]
+	bne	.L2479
+	ldr	w1, [x1,152]
+	cbnz	w1, .L2469
+	adrp	x1, .LANCHOR0+120
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+120]
+	cbz	w1, .L2479
+.L2469:
+	add	x20, x19, :lo12:.LANCHOR2
+	ldr	w1, [x20,212]
 	cmp	w1, 29
-	bhi	.L2366
-	adrp	x23, .LANCHOR4
-	add	x21, x23, :lo12:.LANCHOR4
-	ldrh	w1, [x21,400]
+	bhi	.L2479
+	adrp	x21, .LANCHOR4
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x1,400]
 	add	w0, w0, w1
-	str	w0, [x20,868]
+	str	w0, [x20,860]
 	bl	FtlGcReFreshBadBlk
-	ldrh	w0, [x20,296]
+	ldrh	w0, [x20,288]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L2366
-	ldrh	w1, [x20,952]
+	bne	.L2479
+	ldrh	w1, [x20,944]
 	cmp	w1, w0
-	bne	.L2366
-	ldr	w0, [x20,868]
+	bne	.L2479
+	ldr	w0, [x20,860]
 	cmp	w0, 1024
-	bls	.L2366
-	ldr	w0, [x20,220]
-	str	wzr, [x20,868]
-	strh	wzr, [x21,400]
-	cbnz	w0, .L2367
-	mov	w0, 6
-	b	.L2517
-.L2367:
-	cmp	w0, 5
-	bhi	.L2368
-	mov	w0, 18
-.L2517:
-	strh	w0, [x21,400]
-.L2368:
+	bhi	.L2470
+	ldrh	w0, [x20,-16]
+	cmp	w0, 63
+	bhi	.L2479
+.L2470:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR4
+	str	wzr, [x1,860]
+	ldr	w1, [x1,212]
+	strh	wzr, [x0,400]
+	cbnz	w1, .L2471
+	mov	w1, 6
+	b	.L2632
+.L2471:
+	cmp	w1, 5
+	bhi	.L2472
+	mov	w1, 18
+.L2632:
+	strh	w1, [x0,400]
+.L2472:
+	adrp	x1, .LANCHOR0
+	add	x0, x1, :lo12:.LANCHOR0
+	mov	x20, x1
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2473
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,-16]
+	ldrh	w0, [x0,858]
+	add	w0, w0, 64
+	cmp	w1, w0
+	bgt	.L2479
+.L2473:
 	mov	w0, 32
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	uxth	w25, w0
 	cmp	w25, w27
-	beq	.L2372
-	add	x20, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x20,872]
-	cbz	w0, .L2370
-	adrp	x2, .LANCHOR0
-	ldr	x26, [x20,-40]
-	add	x2, x2, :lo12:.LANCHOR0
+	beq	.L2478
+	add	x23, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x23,864]
+	cbz	w0, .L2475
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x26, [x23,-48]
 	ubfiz	x25, x25, 1, 16
-	ldrh	w1, [x2,2028]
-	ldrh	w2, [x2,1952]
+	ldrh	w2, [x1,2020]
+	ldrh	w1, [x1,1944]
 	ldrh	w3, [x26,x25]
-	mul	w1, w1, w2
+	mul	w1, w2, w1
 	add	w1, w1, 1
 	cmp	w3, w1
-	bgt	.L2372
+	bgt	.L2478
 	add	w1, w0, 1
-	str	wzr, [x20,876]
+	str	wzr, [x23,868]
 	uxth	w1, w1
-	strh	w1, [x20,872]
+	strh	w1, [x23,864]
 	str	x1, [x29,120]
 	bl	List_get_gc_head_node
-	uxth	w21, w0
-	cmp	w21, w27
+	uxth	w20, w0
+	cmp	w20, w27
 	ldr	x1, [x29,120]
-	beq	.L2372
-	ubfiz	x27, x21, 1, 16
-	adrp	x0, .LC115
+	beq	.L2478
+	ubfiz	x27, x20, 1, 16
+	adrp	x0, .LC122
 	ldrh	w4, [x26,x25]
-	add	x0, x0, :lo12:.LC115
-	mov	w2, w21
+	add	x0, x0, :lo12:.LC122
+	mov	w2, w20
 	ldrh	w3, [x26,x27]
 	bl	printk
-	ldrh	w0, [x20,872]
+	ldrh	w0, [x23,864]
 	cmp	w0, 40
-	bls	.L2371
-	ldr	x0, [x20,-40]
+	bls	.L2476
+	ldr	x0, [x23,-48]
 	ldrh	w0, [x0,x27]
 	cmp	w0, 32
-	bls	.L2371
-	strh	wzr, [x20,872]
-.L2371:
-	add	x23, x23, :lo12:.LANCHOR4
+	bls	.L2476
+	strh	wzr, [x23,864]
+.L2476:
+	add	x21, x21, :lo12:.LANCHOR4
 	mov	w0, 6
-	strh	w0, [x23,400]
-	b	.L2365
-.L2370:
+	strh	w0, [x21,400]
+	b	.L2480
+.L2475:
 	mov	w0, 1
-	strh	w0, [x20,872]
-.L2372:
+	strh	w0, [x23,864]
+.L2478:
 	bl	GetSwlReplaceBlock
-	uxth	w21, w0
-	mov	w0, 65535
-	cmp	w21, w0
-	bne	.L2365
-	add	x23, x23, :lo12:.LANCHOR4
-	strh	wzr, [x23,400]
-.L2365:
-	add	x20, x19, :lo12:.LANCHOR2
+	uxth	w20, w0
 	mov	w0, 65535
-	ldrh	w1, [x20,296]
-	cmp	w1, w0
-	bne	.L2373
-	ldrh	w0, [x20,96]
-	cmp	w0, w1
-	bne	.L2373
-	ldrh	w25, [x20,952]
-	cmp	w25, w0
-	bne	.L2373
-	ldrh	w0, [x20,-8]
-	mov	w2, 1024
-	ldr	w1, [x20,868]
-	cmp	w0, 24
-	mov	w0, 5120
-	csel	w0, w0, w2, cc
-	cmp	w1, w0
-	bls	.L2373
-	adrp	x0, .LANCHOR4+400
-	str	wzr, [x20,868]
-	mov	x23, x20
-	strh	wzr, [x0,#:lo12:.LANCHOR4+400]
-	bl	GetSwlReplaceBlock
-	uxth	w21, w0
-	cmp	w21, w25
-	bne	.L2375
-	ldrh	w1, [x20,-8]
-	ldrh	w0, [x20,866]
-	cmp	w1, w0
-	bcs	.L2376
-	mov	w0, 64
-	bl	List_get_gc_head_node
-	uxth	w0, w0
-	cmp	w0, w21
-	beq	.L2385
-	ldr	w2, [x20,2024]
-	uxtw	x1, w0
-	adrp	x20, .LANCHOR0
-	cbnz	w2, .L2378
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x0,1972]
-	cmp	w2, 3
-	beq	.L2378
-	ldr	w2, [x23,344]
-	cbnz	w2, .L2378
-	ldr	w2, [x23,160]
-	cbnz	w2, .L2378
-	ldrb	w0, [x0,120]
-	cbz	w0, .L2379
-.L2378:
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x3, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,-40]
-	ldrh	w4, [x0,x1,lsl 1]
-	ldrh	w1, [x3,2028]
-	ldrh	w0, [x3,1952]
-	ldrh	w3, [x3,1972]
-	mul	w2, w1, w0
-	cmp	w3, 3
-	mov	w0, 0
-	lsr	w1, w1, 1
-	csel	w0, w1, w0, eq
-	add	w0, w2, w0
-	cmp	w4, w0
-	bgt	.L2381
-	mov	w0, 0
-	add	x20, x20, :lo12:.LANCHOR0
-	bl	List_get_gc_head_node
-	uxth	w21, w0
-	add	x1, x19, :lo12:.LANCHOR2
-	ldr	w0, [x20,2104]
-	ldr	w2, [x1,156]
-	add	w0, w0, w0, lsl 1
-	cmp	w2, w0, lsr 2
-	bls	.L2382
-	mov	w0, 128
-	b	.L2518
-.L2382:
-	mov	w0, 160
-.L2518:
-	strh	w0, [x1,866]
-	b	.L2383
-.L2381:
-	add	x0, x19, :lo12:.LANCHOR2
-	mov	w1, 128
-	b	.L2519
-.L2379:
-	ldr	x2, [x23,-40]
-	ldrh	w1, [x2,x1,lsl 1]
-	cmp	w1, 7
-	bhi	.L2384
-	bl	List_get_gc_head_node
-	uxth	w21, w0
-	add	x0, x19, :lo12:.LANCHOR2
-	mov	w1, 128
-	strh	w1, [x0,866]
-	b	.L2383
-.L2384:
-	add	x0, x19, :lo12:.LANCHOR2
-	mov	w1, 64
-.L2519:
-	strh	w1, [x0,866]
-	b	.L2385
-.L2376:
-	mov	w0, 80
-	strh	w0, [x20,866]
-	b	.L2385
-.L2383:
+	cmp	w20, w0
+	bne	.L2480
+	add	x21, x21, :lo12:.LANCHOR4
+	strh	wzr, [x21,400]
+.L2479:
+	add	x21, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
-	cmp	w21, w0
-	beq	.L2385
-.L2375:
-	add	x5, x19, :lo12:.LANCHOR2
-	ubfiz	x4, x21, 1, 16
-	adrp	x0, .LC116
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC116
-	ldr	x3, [x5,-40]
-	ldr	x6, [x5,-80]
-	ldrh	w2, [x5,-8]
-	ldrh	w3, [x3,x4]
-	ldrh	w5, [x5,864]
-	ldrh	w4, [x6,x4]
-	bl	printk
-.L2385:
-	bl	FtlGcReFreshBadBlk
-.L2373:
+	ldrh	w20, [x21,288]
+	cmp	w20, w0
+	bne	.L2636
+	ldrh	w0, [x21,88]
+	cmp	w0, w20
+	beq	.L2637
+.L2480:
 	mov	w0, 65535
-	cmp	w21, w0
+	cmp	w20, w0
 	cset	w1, eq
-	cbz	w1, .L2386
-	cbnz	w24, .L2386
+	cbz	w1, .L2493
+	cbnz	w24, .L2493
 	add	x0, x19, :lo12:.LANCHOR2
-	mov	w20, 1
-	ldrh	w1, [x0,-8]
+	mov	w21, 1
+	ldrh	w1, [x0,-16]
 	cmp	w1, 24
-	bhi	.L2387
+	bhi	.L2494
 	adrp	x0, .LANCHOR0
 	cmp	w1, 16
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w20, [x0,2026]
-	bls	.L2388
-	lsr	w20, w20, 5
-	b	.L2387
-.L2388:
+	ldrh	w21, [x0,2018]
+	bls	.L2495
+	lsr	w21, w21, 5
+	b	.L2494
+.L2495:
 	cmp	w1, 12
-	bls	.L2389
-	lsr	w20, w20, 4
-	b	.L2387
-.L2389:
+	bls	.L2496
+	lsr	w21, w21, 4
+	b	.L2494
+.L2496:
 	cmp	w1, 8
-	bls	.L2387
-	lsr	w20, w20, 2
-.L2387:
+	bls	.L2494
+	lsr	w21, w21, 2
+.L2494:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w2, [x0,864]
+	ldrh	w2, [x0,856]
 	cmp	w2, w1
-	bcs	.L2391
-	ldrh	w1, [x0,96]
+	bcs	.L2498
+	ldrh	w1, [x0,88]
 	mov	w2, 65535
 	cmp	w1, w2
-	bne	.L2392
-	ldrh	w2, [x0,952]
+	bne	.L2499
+	ldrh	w2, [x0,944]
 	cmp	w2, w1
-	bne	.L2392
+	bne	.L2499
 	adrp	x1, .LANCHOR4+400
 	ldrh	w2, [x1,#:lo12:.LANCHOR4+400]
-	cbnz	w2, .L2393
-	adrp	x1, .LANCHOR0+2104
-	ldr	w3, [x0,156]
-	ldr	w1, [x1,#:lo12:.LANCHOR0+2104]
+	cbnz	w2, .L2500
+	adrp	x1, .LANCHOR0+2096
+	ldr	w3, [x0,148]
+	ldr	w1, [x1,#:lo12:.LANCHOR0+2096]
 	add	w1, w1, w1, lsl 1
 	cmp	w3, w1, lsr 2
-	bcs	.L2394
-.L2393:
+	bcs	.L2501
+.L2500:
 	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x1,272]
+	ldrh	w0, [x1,264]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x1,864]
-	b	.L2395
-.L2394:
+	strh	w0, [x1,856]
+	b	.L2502
+.L2501:
 	mov	w1, 18
-	strh	w1, [x0,864]
-.L2395:
+	strh	w1, [x0,856]
+.L2502:
 	add	x19, x19, :lo12:.LANCHOR2
-	str	wzr, [x19,876]
-	b	.L2495
-.L2392:
+	str	wzr, [x19,868]
+	b	.L2609
+.L2499:
 	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x1,272]
+	ldrh	w0, [x1,264]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x1,864]
-.L2391:
+	strh	w0, [x1,856]
+.L2498:
 	cmp	w22, 2
-	bhi	.L2450
+	bhi	.L2562
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	w0, [x0,160]
-	cbz	w0, .L2450
-	add	w20, w20, 1
-	uxth	w20, w20
-	b	.L2450
-.L2386:
-	add	x20, x19, :lo12:.LANCHOR2
+	ldr	w0, [x0,152]
+	cbz	w0, .L2562
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2562
+.L2493:
+	add	x21, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
-	ldrh	w0, [x20,96]
+	ldrh	w0, [x21,88]
 	cmp	w0, w2
-	bne	.L2398
-	cbz	w1, .L2398
-	ldrh	w1, [x20,952]
+	bne	.L2505
+	cbz	w1, .L2505
+	ldrh	w1, [x21,944]
 	cmp	w1, w0
-	bne	.L2398
-	ldrh	w1, [x20,296]
+	bne	.L2505
+	ldrh	w1, [x21,288]
 	cmp	w1, w0
-	beq	.L2399
-.L2404:
-	mov	w21, 65535
-	b	.L2398
-.L2399:
-	ldrh	w23, [x20,-8]
-	adrp	x21, .LANCHOR4
-	ldrh	w0, [x20,864]
-	str	wzr, [x20,876]
+	beq	.L2506
+.L2511:
+	mov	w20, 65535
+	b	.L2505
+.L2506:
+	ldrh	w23, [x21,-16]
+	adrp	x20, .LANCHOR4
+	ldrh	w0, [x21,856]
+	str	wzr, [x21,868]
 	cmp	w0, w23
-	bcs	.L2400
-	add	x0, x21, :lo12:.LANCHOR4
+	bcs	.L2507
+	add	x0, x20, :lo12:.LANCHOR4
 	ldrh	w0, [x0,400]
-	cbnz	w0, .L2401
-	adrp	x0, .LANCHOR0+2104
-	ldr	w1, [x20,156]
-	ldr	w0, [x0,#:lo12:.LANCHOR0+2104]
+	cbnz	w0, .L2508
+	adrp	x0, .LANCHOR0+2096
+	ldr	w1, [x21,148]
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2096]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	bcs	.L2402
-.L2401:
+	bcs	.L2509
+.L2508:
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x19,272]
+	ldrh	w0, [x19,264]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x19,864]
-	b	.L2403
-.L2402:
+	strh	w0, [x19,856]
+	b	.L2510
+.L2509:
 	mov	w0, 18
-	strh	w0, [x20,864]
-.L2403:
-	add	x21, x21, :lo12:.LANCHOR4
+	strh	w0, [x21,856]
+.L2510:
+	add	x20, x20, :lo12:.LANCHOR4
 	bl	FtlReadRefresh
-	ldrh	w2, [x21,400]
-	b	.L2495
-.L2400:
-	add	x22, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x20,400]
+	b	.L2609
+.L2507:
+	add	x22, x20, :lo12:.LANCHOR4
 	ldrh	w0, [x22,400]
-	cbnz	w0, .L2404
-	ldrh	w21, [x20,272]
-	add	w1, w21, w21, lsl 1
+	cbnz	w0, .L2511
+	ldrh	w20, [x21,264]
+	add	w1, w20, w20, lsl 1
 	asr	w1, w1, 2
-	strh	w1, [x20,864]
+	strh	w1, [x21,856]
 	bl	List_get_gc_head_node
 	ubfiz	x0, x0, 1, 16
-	ldr	x1, [x20,-40]
+	ldr	x1, [x21,-48]
 	ldrh	w2, [x1,x0]
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w0, [x1,2028]
-	ldrh	w1, [x1,1952]
+	ldrh	w0, [x1,2020]
+	ldrh	w1, [x1,1944]
 	mul	w0, w0, w1
 	mov	w1, 2
 	sdiv	w0, w0, w1
 	cmp	w2, w0
-	ble	.L2405
-	sub	w21, w21, #1
-	cmp	w23, w21
-	blt	.L2405
+	ble	.L2512
+	sub	w20, w20, #1
+	cmp	w23, w20
+	blt	.L2512
 	bl	FtlReadRefresh
 	ldrh	w2, [x22,400]
-	b	.L2495
-.L2405:
-	cbnz	w2, .L2404
+	b	.L2609
+.L2512:
+	cbnz	w2, .L2511
 	mov	w0, -1
 	add	x19, x19, :lo12:.LANCHOR2
 	bl	decrement_vpc_count
-	ldrh	w2, [x19,-8]
+	ldrh	w2, [x19,-16]
 	add	w2, w2, 1
-	b	.L2495
-.L2398:
+	b	.L2609
+.L2505:
 	add	x0, x19, :lo12:.LANCHOR2
-	mov	w20, 2
-	ldr	w0, [x0,160]
+	mov	w21, 2
+	ldr	w0, [x0,152]
 	cmp	w0, wzr
-	csinc	w20, w20, wzr, ne
-	b	.L2397
-.L2450:
-	mov	w21, 65535
-.L2397:
+	csinc	w21, w21, wzr, ne
+	b	.L2504
+.L2562:
+	mov	w20, 65535
+.L2504:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
-	ldrh	w1, [x0,296]
+	ldrh	w1, [x0,288]
 	cmp	w1, w2
-	bne	.L2407
-	cmp	w21, w1
-	beq	.L2408
-	strh	w21, [x0,296]
-	b	.L2409
-.L2408:
-	ldrh	w1, [x0,952]
-	cmp	w1, w21
-	beq	.L2409
-	strh	w1, [x0,296]
+	bne	.L2514
+	cmp	w20, w1
+	beq	.L2515
+	strh	w20, [x0,288]
+	b	.L2516
+.L2515:
+	ldrh	w1, [x0,944]
+	cmp	w1, w20
+	beq	.L2516
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x0,-48]
+	ldrh	w1, [x2,x1]
+	cbnz	w1, .L2517
 	mov	w1, -1
-	strh	w1, [x0,952]
-.L2409:
-	adrp	x1, .LANCHOR0+120
+	strh	w1, [x0,944]
+.L2517:
 	add	x0, x19, :lo12:.LANCHOR2
-	add	x22, x0, 296
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+120]
-	strb	wzr, [x0,304]
-	cbz	w1, .L2410
-	ldrh	w0, [x0,296]
-	bl	ftl_get_blk_mode
-	strb	w0, [x22,8]
-.L2410:
+	ldrh	w1, [x0,944]
+	strh	w1, [x0,288]
+	mov	w1, -1
+	strh	w1, [x0,944]
+.L2516:
 	add	x22, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x22,296]
+	mov	w1, 65535
+	ldrh	w0, [x22,288]
+	strb	wzr, [x22,296]
+	cmp	w0, w1
+	beq	.L2514
 	bl	IsBlkInGcList
-	cbz	w0, .L2411
+	cbz	w0, .L2519
 	mov	w0, -1
-	strh	w0, [x22,296]
-.L2411:
+	strh	w0, [x22,288]
+.L2519:
+	adrp	x0, .LANCHOR0+120
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+120]
+	cbz	w0, .L2520
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x22, x0, 288
+	ldrh	w0, [x0,288]
+	bl	ftl_get_blk_mode
+	strb	w0, [x22,8]
+.L2520:
 	add	x22, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
-	add	x23, x22, 296
-	ldrh	w1, [x22,296]
+	add	x23, x22, 288
+	ldrh	w1, [x22,288]
 	cmp	w1, w0
-	beq	.L2407
+	beq	.L2514
 	mov	x0, x23
 	bl	make_superblock
-	strh	wzr, [x22,298]
+	strh	wzr, [x22,290]
 	adrp	x0, .LANCHOR4
-	ldrh	w2, [x22,296]
+	ldrh	w2, [x22,288]
 	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x1, [x22,-40]
-	strb	wzr, [x22,302]
+	ldr	x1, [x22,-48]
+	strb	wzr, [x22,294]
 	strh	wzr, [x0,402]
 	ldrh	w1, [x1,x2,lsl 1]
 	strh	w1, [x0,404]
-.L2407:
+.L2514:
 	add	x3, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x19,#:lo12:.LANCHOR2]
-	ldrh	w0, [x3,296]
+	ldrh	w0, [x3,288]
+	ldrh	w1, [x3,-8]
 	cmp	w1, w0
-	beq	.L2413
-	ldrh	w1, [x3,48]
+	beq	.L2521
+	ldrh	w1, [x3,40]
 	cmp	w1, w0
-	beq	.L2413
-.L2414:
+	beq	.L2521
+.L2522:
 	mov	x28, x3
 	mov	w24, 65535
-	b	.L2415
-.L2413:
+	b	.L2523
+.L2521:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
-	strh	w0, [x19,296]
-	b	.L2520
-.L2435:
-	ldrh	w0, [x28,298]
-	add	w20, w20, w0
-	uxth	w20, w20
-	strh	w20, [x28,298]
-	cmp	w20, w25
-	adrp	x20, .LANCHOR4
-	bcs	.L2437
-	add	x0, x20, :lo12:.LANCHOR4
+	strh	w0, [x19,288]
+	b	.L2635
+.L2543:
+	ldrh	w0, [x28,290]
+	add	w21, w21, w0
+	uxth	w21, w21
+	strh	w21, [x28,290]
+	cmp	w21, w25
+	adrp	x21, .LANCHOR4
+	bcs	.L2545
+	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w1, [x0,402]
 	ldrh	w0, [x0,404]
 	cmp	w1, w0
-	beq	.L2437
-.L2438:
-	ldrh	w0, [x28,-8]
+	beq	.L2545
+.L2546:
+	ldrh	w0, [x28,-16]
 	cmp	w0, 2
-	bhi	.L2441
+	bhi	.L2549
 	add	x23, x23, :lo12:.LANCHOR0
-	ldrh	w20, [x23,2026]
-.L2415:
-	ldrh	w0, [x28,296]
+	ldrh	w21, [x23,2018]
+.L2523:
+	ldrh	w0, [x28,288]
 	cmp	w0, w24
-	bne	.L2416
-	str	wzr, [x28,876]
-.L2417:
-	ldrh	w22, [x28,872]
+	bne	.L2524
+	str	wzr, [x28,868]
+.L2525:
+	ldrh	w22, [x28,864]
 	mov	w0, w22
 	bl	List_get_gc_head_node
 	uxth	w23, w0
 	cmp	w23, w24
-	strh	w23, [x28,296]
-	bne	.L2418
-	strh	wzr, [x28,872]
+	strh	w23, [x28,288]
+	bne	.L2526
+	strh	wzr, [x28,864]
 	mov	w2, 8
-	b	.L2495
-.L2418:
+	b	.L2609
+.L2526:
 	mov	w0, w23
 	add	w22, w22, 1
 	bl	IsBlkInGcList
-	cbz	w0, .L2419
-	strh	w22, [x28,872]
-	b	.L2417
-.L2419:
+	cbz	w0, .L2527
+	strh	w22, [x28,864]
+	b	.L2525
+.L2527:
 	adrp	x0, .LANCHOR0
 	ubfiz	x1, x23, 1, 16
 	add	x5, x0, :lo12:.LANCHOR0
-	ldr	x2, [x28,-40]
+	ldr	x2, [x28,-48]
 	uxth	w22, w22
 	mov	w3, 2
-	strh	w22, [x28,872]
-	ldrh	w0, [x5,2026]
-	ldrh	w5, [x5,1952]
+	strh	w22, [x28,864]
+	ldrh	w0, [x5,2018]
+	ldrh	w5, [x5,1944]
 	ldrh	w4, [x2,x1]
 	mul	w0, w0, w5
 	sdiv	w5, w0, w3
 	cmp	w4, w5
-	bgt	.L2421
+	bgt	.L2529
 	cmp	w4, 8
-	bls	.L2422
+	bls	.L2530
 	cmp	w22, 48
-	bls	.L2422
-	ldrh	w4, [x28,924]
+	bls	.L2530
+	ldrh	w4, [x28,916]
 	cmp	w4, 35
-	bhi	.L2422
-.L2421:
-	strh	wzr, [x28,872]
-.L2422:
+	bhi	.L2530
+.L2529:
+	strh	wzr, [x28,864]
+.L2530:
 	ldrh	w1, [x2,x1]
 	cmp	w1, w0
-	blt	.L2423
-	cmp	w21, w24
-	bne	.L2423
+	blt	.L2531
+	cmp	w20, w24
+	bne	.L2531
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
-	strh	wzr, [x19,872]
-	strh	w0, [x19,296]
-.L2520:
+	strh	wzr, [x19,864]
+	strh	w0, [x19,288]
+.L2635:
 	adrp	x0, .LANCHOR4+400
 	ldrh	w2, [x0,#:lo12:.LANCHOR4+400]
-	b	.L2495
-.L2423:
-	cbnz	w1, .L2424
+	b	.L2609
+.L2531:
+	cbnz	w1, .L2532
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldrh	w0, [x28,872]
+	ldrh	w0, [x28,864]
 	add	w0, w0, 1
-	strh	w0, [x28,872]
-	b	.L2417
-.L2424:
+	strh	w0, [x28,864]
+	b	.L2525
+.L2532:
 	adrp	x0, .LANCHOR0
-	strb	wzr, [x28,304]
+	strb	wzr, [x28,296]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbz	w0, .L2425
+	cbz	w0, .L2533
 	mov	w0, w23
 	bl	ftl_get_blk_mode
-	strb	w0, [x28,304]
-.L2425:
-	add	x22, x28, 296
+	strb	w0, [x28,296]
+.L2533:
+	add	x22, x28, 288
 	mov	x0, x22
 	bl	make_superblock
 	adrp	x1, .LANCHOR4
-	ldrh	w2, [x28,296]
+	ldrh	w2, [x28,288]
 	add	x1, x1, :lo12:.LANCHOR4
-	ldr	x0, [x28,-40]
+	ldr	x0, [x28,-48]
 	strh	wzr, [x1,402]
 	ldrh	w0, [x0,x2,lsl 1]
 	strh	w0, [x1,404]
-	strh	wzr, [x28,298]
-	strb	wzr, [x28,302]
-.L2416:
+	strh	wzr, [x28,290]
+	strb	wzr, [x28,294]
+.L2524:
 	bl	FtlReadRefresh
 	adrp	x23, .LANCHOR0
 	mov	w0, 1
-	str	w0, [x28,2028]
+	str	w0, [x28,2020]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x0,120]
-	ldrh	w25, [x0,2026]
-	cbz	w1, .L2426
-	ldrb	w1, [x28,304]
+	ldrh	w25, [x0,2018]
+	cbz	w1, .L2534
+	ldrb	w1, [x28,296]
 	cmp	w1, 1
-	bne	.L2426
-	ldrh	w25, [x0,2028]
-.L2426:
-	ldrh	w0, [x28,298]
-	add	w1, w0, w20
+	bne	.L2534
+	ldrh	w25, [x0,2020]
+.L2534:
+	ldrh	w0, [x28,290]
+	add	w1, w0, w21
 	cmp	w1, w25
-	ble	.L2427
-	sub	w20, w25, w0
-	uxth	w20, w20
-.L2427:
+	ble	.L2535
+	sub	w21, w25, w0
+	uxth	w21, w21
+.L2535:
 	mov	w26, 0
-.L2428:
-	cmp	w20, w26, uxth
-	bls	.L2435
-	add	x1, x28, 296
+.L2536:
+	cmp	w21, w26, uxth
+	bls	.L2543
+	add	x1, x28, 288
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrh	w4, [x1,2]
-	ldrh	w6, [x0,1952]
+	ldrh	w6, [x0,1944]
 	mov	x0, 0
 	add	w4, w4, w26
 	mov	w22, w0
-.L2436:
+.L2544:
 	cmp	w6, w0, uxth
-	bls	.L2521
+	bls	.L2638
 	add	x2, x1, x0, lsl 1
 	ldrh	w2, [x2,16]
 	cmp	w2, w24
-	beq	.L2429
+	beq	.L2537
 	mov	w3, 56
-	ldr	x7, [x28,912]
+	ldr	x7, [x28,904]
 	orr	w2, w4, w2, lsl 10
 	umull	x5, w22, w3
 	add	w22, w22, 1
 	add	x5, x7, x5
 	uxth	w22, w22
 	str	w2, [x5,4]
-.L2429:
+.L2537:
 	add	x0, x0, 1
-	b	.L2436
-.L2521:
-	ldr	x0, [x28,912]
+	b	.L2544
+.L2638:
+	ldr	x0, [x28,904]
 	mov	w1, w22
-	ldrb	w2, [x28,304]
+	ldrb	w2, [x28,296]
 	mov	x27, 0
 	bl	FlashReadPages
-.L2431:
+.L2539:
 	cmp	w22, w27, uxth
-	bls	.L2522
+	bls	.L2639
 	mov	x0, 56
 	mul	x5, x27, x0
-	ldr	x0, [x28,912]
+	ldr	x0, [x28,904]
 	add	x1, x0, x5
 	ldr	w0, [x0,x5]
 	cmn	w0, #1
 	ldr	x4, [x1,16]
-	beq	.L2452
+	beq	.L2564
 	ldrh	w0, [x4]
 	mov	w1, 61589
 	cmp	w0, w1
-	bne	.L2452
+	bne	.L2564
 	ldr	w0, [x4,8]
 	add	x1, x29, 140
 	mov	w2, 0
 	str	x5, [x29,112]
 	str	x4, [x29,120]
 	bl	log2phys
-	ldr	x2, [x28,912]
+	ldr	x2, [x28,904]
 	ldr	x5, [x29,112]
 	ldr	w0, [x29,140]
 	add	x2, x2, x5
@@ -16409,7 +16670,7 @@ rk_ftl_garbage_collect:
 	and	w0, w0, 2147483647
 	ldr	w1, [x2,4]
 	cmp	w0, w1
-	bne	.L2452
+	bne	.L2564
 	adrp	x0, .LANCHOR4
 	mov	x3, 56
 	add	x1, x0, :lo12:.LANCHOR4
@@ -16418,8 +16679,8 @@ rk_ftl_garbage_collect:
 	ldrh	w0, [x1,402]
 	add	w0, w0, 1
 	strh	w0, [x1,402]
-	ldr	w0, [x28,880]
-	ldr	x1, [x28,2056]
+	ldr	w0, [x28,872]
+	ldr	x1, [x28,2048]
 	madd	x1, x0, x3, x1
 	ldr	w0, [x2,24]
 	str	x1, [x29,120]
@@ -16430,90 +16691,215 @@ rk_ftl_garbage_collect:
 	ldr	x5, [x29,104]
 	ldr	x4, [x29,112]
 	str	w0, [x1,4]
-	ldr	w0, [x28,880]
-	ldr	x1, [x28,2056]
+	ldr	w0, [x28,872]
+	ldr	x1, [x28,2048]
 	madd	x0, x0, x2, x1
-	ldr	x1, [x28,912]
+	ldr	x1, [x28,904]
 	add	x1, x1, x5
 	ldr	x2, [x1,8]
 	str	x2, [x0,8]
-	add	x2, x28, 96
+	add	x2, x28, 88
 	str	x2, [x29,120]
 	ldr	x1, [x1,16]
 	str	x1, [x0,16]
 	mov	w1, 1
 	ldr	w0, [x29,140]
 	str	w0, [x4,12]
-	ldrh	w0, [x28,96]
+	ldrh	w0, [x28,88]
 	strh	w0, [x4,2]
-	ldr	w0, [x28,200]
+	ldr	w0, [x28,192]
 	str	w0, [x4,4]
-	ldr	w0, [x28,880]
+	ldr	w0, [x28,872]
 	add	w0, w0, 1
-	str	w0, [x28,880]
-	ldr	x0, [x28,912]
+	str	w0, [x28,872]
+	ldr	x0, [x28,904]
 	add	x0, x0, x5
 	bl	FtlGcBufAlloc
 	add	x0, x23, :lo12:.LANCHOR0
 	ldrb	w0, [x0,120]
-	cbnz	w0, .L2433
+	cbnz	w0, .L2541
 	ldr	x2, [x29,120]
-	ldr	w1, [x28,880]
+	ldr	w1, [x28,872]
 	ldrb	w0, [x2,7]
 	cmp	w1, w0
-	beq	.L2433
+	beq	.L2541
 	ldrh	w0, [x2,4]
-	cbnz	w0, .L2452
-.L2433:
+	cbnz	w0, .L2564
+.L2541:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2452
+	cbz	w0, .L2564
 	adrp	x0, .LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR4
-	str	wzr, [x19,2028]
+	str	wzr, [x19,2020]
 	ldrh	w2, [x0,400]
-	b	.L2495
-.L2452:
+	b	.L2609
+.L2564:
 	add	x27, x27, 1
-	b	.L2431
-.L2522:
+	b	.L2539
+.L2639:
 	add	w26, w26, 1
-	b	.L2428
-.L2437:
-	ldr	w0, [x28,880]
-	cbz	w0, .L2439
+	b	.L2536
+.L2545:
+	ldr	w0, [x28,872]
+	cbz	w0, .L2547
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2439
-	add	x20, x20, :lo12:.LANCHOR4
-	str	wzr, [x28,2028]
-	ldrh	w2, [x20,400]
-	b	.L2495
-.L2439:
-	add	x0, x20, :lo12:.LANCHOR4
+	cbz	w0, .L2547
+	add	x21, x21, :lo12:.LANCHOR4
+	str	wzr, [x28,2020]
+	ldrh	w2, [x21,400]
+	b	.L2609
+.L2547:
+	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w2, [x0,402]
-	cbnz	w2, .L2440
-	ldrh	w0, [x28,296]
-	ldr	x1, [x28,-40]
+	cbnz	w2, .L2548
+	ldrh	w0, [x28,288]
+	ldr	x1, [x28,-48]
 	lsl	x0, x0, 1
 	ldrh	w4, [x1,x0]
-	cbz	w4, .L2440
+	cbz	w4, .L2548
 	strh	w2, [x1,x0]
-	ldrh	w0, [x28,296]
+	ldrh	w0, [x28,288]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2440:
+.L2548:
 	mov	w0, -1
-	strh	w0, [x28,296]
-	b	.L2438
-.L2441:
-	add	x20, x20, :lo12:.LANCHOR4
-	str	wzr, [x28,2028]
-	ldrh	w2, [x20,400]
+	strh	w0, [x28,288]
+	b	.L2546
+.L2549:
+	add	x21, x21, :lo12:.LANCHOR4
+	str	wzr, [x28,2020]
+	ldrh	w2, [x21,400]
 	cmp	w2, wzr
 	csinc	w2, w2, w0, ne
-.L2495:
+	b	.L2609
+.L2637:
+	ldrh	w25, [x21,944]
+	cmp	w25, w20
+	bne	.L2480
+	ldrh	w0, [x21,-16]
+	mov	w2, 1024
+	ldr	w1, [x21,860]
+	cmp	w0, 24
+	mov	w0, 5120
+	csel	w0, w0, w2, cc
+	cmp	w1, w0
+	bls	.L2480
+	adrp	x0, .LANCHOR4+400
+	str	wzr, [x21,860]
+	mov	x23, x21
+	strh	wzr, [x0,#:lo12:.LANCHOR4+400]
+	bl	GetSwlReplaceBlock
+	uxth	w20, w0
+	cmp	w20, w25
+	bne	.L2482
+	ldrh	w1, [x21,-16]
+	ldrh	w0, [x21,858]
+	cmp	w1, w0
+	bcs	.L2483
+	mov	w0, 64
+	bl	List_get_gc_head_node
+	uxth	w0, w0
+	cmp	w0, w20
+	beq	.L2492
+	ldr	w2, [x21,2016]
+	uxtw	x1, w0
+	adrp	x21, .LANCHOR0
+	cbnz	w2, .L2485
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w2, [x0,1964]
+	cmp	w2, 3
+	beq	.L2485
+	ldr	w2, [x23,336]
+	cbnz	w2, .L2485
+	ldr	w2, [x23,152]
+	cbnz	w2, .L2485
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2486
+.L2485:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x3, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0,-48]
+	ldrh	w4, [x0,x1,lsl 1]
+	ldrh	w1, [x3,2020]
+	ldrh	w0, [x3,1944]
+	ldrh	w3, [x3,1964]
+	mul	w2, w1, w0
+	cmp	w3, 3
+	mov	w0, 0
+	lsr	w1, w1, 1
+	csel	w0, w1, w0, eq
+	add	w0, w2, w0
+	cmp	w4, w0
+	bgt	.L2488
+	mov	w0, 0
+	add	x21, x21, :lo12:.LANCHOR0
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w0, [x21,2096]
+	ldr	w2, [x1,148]
+	add	w0, w0, w0, lsl 1
+	cmp	w2, w0, lsr 2
+	bls	.L2489
+	mov	w0, 128
+	b	.L2633
+.L2489:
+	mov	w0, 160
+.L2633:
+	strh	w0, [x1,858]
+	b	.L2490
+.L2488:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 128
+	b	.L2634
+.L2486:
+	ldr	x2, [x23,-48]
+	ldrh	w1, [x2,x1,lsl 1]
+	cmp	w1, 7
+	bhi	.L2491
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 128
+	strh	w1, [x0,858]
+	b	.L2490
+.L2491:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 64
+.L2634:
+	strh	w1, [x0,858]
+	b	.L2492
+.L2483:
+	mov	w0, 80
+	strh	w0, [x21,858]
+	b	.L2492
+.L2490:
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2492
+.L2482:
+	add	x5, x19, :lo12:.LANCHOR2
+	ubfiz	x4, x20, 1, 32
+	adrp	x0, .LC123
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC123
+	ldr	x3, [x5,-48]
+	ldr	x6, [x5,-88]
+	ldrh	w2, [x5,-16]
+	ldrh	w3, [x3,x4]
+	ldrh	w5, [x5,856]
+	ldrh	w4, [x6,x4]
+	bl	printk
+.L2492:
+	bl	FtlGcReFreshBadBlk
+	b	.L2480
+.L2636:
+	mov	w20, w0
+	b	.L2480
+.L2609:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -16538,135 +16924,135 @@ FtlCacheWriteBack:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	ldr	w1, [x0,2088]
-	cbz	w1, .L2524
+	ldr	w1, [x0,2080]
+	cbz	w1, .L2641
 	ldrb	w0, [x0,120]
 	mov	w22, 0
-	cbz	w0, .L2525
+	cbz	w0, .L2642
 	ldrb	w0, [x20,8]
 	cmp	w0, 1
 	cset	w22, eq
-.L2525:
+.L2642:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w3, [x20,9]
-	adrp	x24, .LC117
+	adrp	x24, .LC124
 	mov	w2, w22
 	mov	w23, 0
 	mov	w25, 56
-	ldr	x0, [x0,2096]
+	ldr	x0, [x0,2088]
 	adrp	x26, .LANCHOR2
-	add	x24, x24, :lo12:.LC117
+	add	x24, x24, :lo12:.LC124
 	bl	FlashProgPages
-.L2526:
+.L2643:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w1, [x0,2088]
+	ldr	w1, [x0,2080]
 	cmp	w23, w1
-	bcs	.L2543
+	bcs	.L2660
 	umull	x21, w23, w25
-	ldr	x1, [x0,2096]
+	ldr	x1, [x0,2088]
 	add	x0, x1, x21
 	ldr	w1, [x1,x21]
 	cmn	w1, #1
-	beq	.L2546
+	beq	.L2663
 	ldr	w1, [x0,4]
-	cbz	w22, .L2560
+	cbz	w22, .L2677
 	orr	w1, w1, -2147483648
-.L2560:
+.L2677:
 	ldr	w0, [x0,24]
 	mov	w2, 1
 	str	w1, [x29,108]
 	add	x1, x29, 108
 	bl	log2phys
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2096]
+	ldr	x0, [x0,2088]
 	add	x21, x0, x21
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2530
+	beq	.L2647
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
 	add	x2, x26, :lo12:.LANCHOR2
 	ubfiz	x0, x1, 1, 16
 	mov	w21, w1
-	ldr	x2, [x2,-40]
+	ldr	x2, [x2,-48]
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2531
+	cbnz	w2, .L2648
 	mov	x0, x24
 	bl	printk
-.L2531:
+.L2648:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2530:
+.L2647:
 	add	w23, w23, 1
-	b	.L2526
-.L2562:
+	b	.L2643
+.L2679:
 	mov	w20, 16386
 	adrp	x21, .LANCHOR2
-.L2542:
+.L2659:
 	add	x0, x21, :lo12:.LANCHOR2
-	ldrh	w0, [x0,956]
-	cbz	w0, .L2543
+	ldrh	w0, [x0,948]
+	cbz	w0, .L2660
 	mov	w0, 1
 	mov	w1, w0
 	bl	rk_ftl_garbage_collect
 	subs	w20, w20, #1
-	bne	.L2542
-.L2543:
+	bne	.L2659
+.L2660:
 	add	x19, x19, :lo12:.LANCHOR0
-	str	wzr, [x19,2088]
-	b	.L2524
-.L2546:
+	str	wzr, [x19,2080]
+	b	.L2641
+.L2663:
 	adrp	x23, .LANCHOR2
-	adrp	x25, .LC117
+	adrp	x25, .LC124
 	mov	w24, 0
 	mov	w26, 56
 	add	x23, x23, :lo12:.LANCHOR2
-	add	x25, x25, :lo12:.LC117
-.L2527:
+	add	x25, x25, :lo12:.LC124
+.L2644:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w1, [x0,2088]
+	ldr	w1, [x0,2080]
 	cmp	w24, w1
-	bcs	.L2562
+	bcs	.L2679
 	umull	x21, w24, w26
-	ldr	x0, [x0,2096]
+	ldr	x0, [x0,2088]
 	mov	w1, -1
 	str	w1, [x0,x21]
-.L2533:
+.L2650:
 	add	x27, x19, :lo12:.LANCHOR0
-	ldr	x0, [x27,2096]
+	ldr	x0, [x27,2088]
 	add	x1, x0, x21
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
 	ldr	w0, [x1,4]
-	bne	.L2563
+	bne	.L2680
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20]
 	cmp	w1, w0, uxth
-	bne	.L2534
-	ldr	x2, [x23,-40]
+	bne	.L2651
+	ldr	x2, [x23,-48]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w3, [x20,4]
 	ldrh	w0, [x2,x1]
 	sub	w0, w0, w3
 	strh	w0, [x2,x1]
 	strb	wzr, [x20,6]
-	ldrh	w0, [x27,2026]
+	ldrh	w0, [x27,2018]
 	strh	w0, [x20,2]
 	strh	wzr, [x20,4]
-.L2534:
+.L2651:
 	ldrh	w0, [x20,4]
-	cbnz	w0, .L2535
+	cbnz	w0, .L2652
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L2535:
-	ldr	w0, [x23,448]
+.L2652:
+	ldr	w0, [x23,440]
 	add	x27, x19, :lo12:.LANCHOR0
 	add	w0, w0, 1
-	str	w0, [x23,448]
-	ldr	x0, [x27,2096]
+	str	w0, [x23,440]
+	ldr	x0, [x27,2088]
 	add	x0, x0, x21
 	ldr	w0, [x0,4]
 	lsr	x0, x0, 10
@@ -16674,49 +17060,49 @@ FtlCacheWriteBack:
 	mov	x0, x20
 	bl	get_new_active_ppa
 	str	w0, [x29,108]
-	ldr	x1, [x27,2096]
+	ldr	x1, [x27,2088]
 	mov	w2, w22
 	add	x1, x1, x21
 	str	w0, [x1,4]
 	mov	w1, 1
-	ldr	x0, [x27,2096]
+	ldr	x0, [x27,2088]
 	ldrb	w3, [x20,9]
 	add	x0, x0, x21
 	bl	FlashProgPages
-	b	.L2533
-.L2563:
-	cbz	w22, .L2561
+	b	.L2650
+.L2680:
+	cbz	w22, .L2678
 	orr	w0, w0, -2147483648
-.L2561:
+.L2678:
 	str	w0, [x29,108]
 	mov	w2, 1
 	ldr	w0, [x1,24]
 	add	x1, x29, 108
 	bl	log2phys
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2096]
+	ldr	x0, [x0,2088]
 	add	x21, x0, x21
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2539
+	beq	.L2656
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
 	ubfiz	x0, x1, 1, 16
-	ldr	x2, [x23,-40]
+	ldr	x2, [x23,-48]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2540
+	cbnz	w2, .L2657
 	mov	x0, x25
 	bl	printk
-.L2540:
+.L2657:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2539:
+.L2656:
 	add	w24, w24, 1
-	b	.L2527
-.L2524:
+	b	.L2644
+.L2641:
 	mov	w0, 0
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -16734,9 +17120,9 @@ FtlSysFlush:
 	add	x29, sp, 0
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
 	mov	w0, 1
 	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -16745,14 +17131,14 @@ FtlSysFlush:
 	.global	FtlDeInit
 	.type	FtlDeInit, %function
 FtlDeInit:
-	adrp	x0, .LANCHOR1+532
+	adrp	x0, .LANCHOR1+504
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	w0, [x0,#:lo12:.LANCHOR1+532]
+	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
 	cmp	w0, 1
-	bne	.L2566
+	bne	.L2683
 	bl	FtlSysFlush
-.L2566:
+.L2683:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -16783,49 +17169,49 @@ FtlDiscard:
 	stp	x19, x20, [sp,16]
 	mov	w19, w1
 	mov	w20, w0
-	ldr	w1, [x21,2068]
+	ldr	w1, [x21,2060]
 	mov	w0, -1
 	cmp	w2, w1
-	bhi	.L2569
+	bhi	.L2686
 	cmp	w19, 31
-	bls	.L2583
+	bls	.L2700
 	bl	FtlCacheWriteBack
-	ldrh	w1, [x21,2032]
+	ldrh	w1, [x21,2024]
 	udiv	w21, w20, w1
 	msub	w20, w1, w21, w20
 	uxth	w20, w20
-	cbz	w20, .L2571
+	cbz	w20, .L2688
 	sub	w1, w1, w20
 	add	w21, w21, 1
 	cmp	w1, w19
 	csel	w1, w1, w19, ls
 	sub	w19, w19, w1, uxth
-.L2571:
+.L2688:
 	mov	w0, -1
 	adrp	x20, .LANCHOR4
 	str	w0, [x29,76]
 	adrp	x23, .LANCHOR2
-.L2572:
+.L2689:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	cmp	w19, w0
-	bcc	.L2584
+	bcc	.L2701
 	mov	w0, w21
 	add	x1, x29, 72
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,72]
 	cmn	w0, #1
-	beq	.L2573
+	beq	.L2690
 	add	x1, x20, :lo12:.LANCHOR4
 	mov	w2, 1
 	ldr	w0, [x1,416]
 	add	w0, w0, 1
 	str	w0, [x1,416]
 	add	x1, x23, :lo12:.LANCHOR2
-	ldr	w0, [x1,168]
+	ldr	w0, [x1,160]
 	add	w0, w0, 1
-	str	w0, [x1,168]
+	str	w0, [x1,160]
 	add	x1, x29, 76
 	mov	w0, w21
 	bl	log2phys
@@ -16833,24 +17219,24 @@ FtlDiscard:
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L2573:
+.L2690:
 	add	x0, x22, :lo12:.LANCHOR0
 	add	w21, w21, 1
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	sub	w19, w19, w0
-	b	.L2572
-.L2584:
+	b	.L2689
+.L2701:
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	w1, [x0,416]
 	cmp	w1, 32
-	bls	.L2583
+	bls	.L2700
 	str	wzr, [x0,416]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2583:
+.L2700:
 	mov	w0, 0
-.L2569:
+.L2686:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -16866,184 +17252,191 @@ FtlGcFreeTempBlock:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR2
-	str	x25, [sp,64]
 	add	x2, x19, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
 	adrp	x21, .LANCHOR0
-	ldrh	w20, [x2,96]
+	ldrh	w20, [x2,88]
 	add	x1, x21, :lo12:.LANCHOR0
 	cmp	w20, w3
-	ldrh	w1, [x1,2026]
-	bne	.L2586
-.L2596:
+	ldrh	w1, [x1,2018]
+	bne	.L2703
+.L2713:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w0, 65535
-	add	x22, x20, 96
-	ldrh	w1, [x20,96]
-	str	wzr, [x20,2328]
+	add	x22, x20, 88
+	ldrh	w1, [x20,88]
+	str	wzr, [x20,2320]
 	cmp	w1, w0
-	beq	.L2614
-	add	x21, x21, :lo12:.LANCHOR0
+	beq	.L2732
 	bl	FtlCacheWriteBack
+	mov	w26, 12
+	add	x3, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x22,7]
-	mov	w25, 12
-	ldr	x1, [x20,-40]
-	ldrh	w3, [x21,2026]
-	mov	w21, 0
-	ldrh	w2, [x20,96]
+	ldr	x1, [x20,-48]
+	mov	w22, 0
+	ldrh	w2, [x20,88]
+	ldrh	w3, [x3,2018]
 	mul	w0, w0, w3
 	strh	w0, [x1,x2,lsl 1]
-	ldr	w0, [x20,184]
-	ldrh	w1, [x20,936]
+	ldr	w0, [x20,176]
+	ldrh	w1, [x20,928]
 	add	w0, w1, w0
-	str	w0, [x20,184]
-	b	.L2597
-.L2586:
-	cbz	w0, .L2589
+	str	w0, [x20,176]
+	b	.L2714
+.L2703:
+	cbz	w0, .L2706
 	adrp	x0, .LANCHOR1
 	add	x0, x0, :lo12:.LANCHOR1
-	ldrh	w4, [x0,3004]
+	ldrh	w4, [x0,3008]
 	cmp	w4, w3
-	beq	.L2590
-.L2591:
+	beq	.L2707
+.L2708:
 	mov	w1, 2
-	b	.L2589
-.L2590:
-	strh	wzr, [x0,3004]
-	ldrh	w0, [x2,-8]
+	b	.L2706
+.L2707:
+	strh	wzr, [x0,3008]
+	ldrh	w0, [x2,-16]
 	cmp	w0, 17
-	bhi	.L2591
-.L2589:
+	bhi	.L2708
+.L2706:
 	add	x22, x19, :lo12:.LANCHOR2
-	add	x0, x22, 96
+	add	x0, x22, 88
 	bl	FtlGcScanTempBlk
 	str	w0, [x29,92]
 	cmn	w0, #1
-	beq	.L2592
+	beq	.L2709
 	ubfiz	x20, x20, 1, 16
-	ldr	x1, [x22,-80]
+	ldr	x1, [x22,-88]
 	ldrh	w0, [x1,x20]
 	cmp	w0, 4
-	bls	.L2593
+	bls	.L2710
 	sub	w0, w0, #5
 	strh	w0, [x1,x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L2593:
+.L2710:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	w1, [x0,2328]
-	cbnz	w1, .L2594
-	ldr	w1, [x0,448]
+	ldr	w1, [x0,2320]
+	cbnz	w1, .L2711
+	ldr	w1, [x0,440]
 	add	w1, w1, 1
-	str	w1, [x0,448]
+	str	w1, [x0,440]
 	ldr	w0, [x29,92]
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L2594:
+.L2711:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
-	str	wzr, [x19,2328]
-	b	.L2595
-.L2592:
-	adrp	x0, .LANCHOR1+3004
+	str	wzr, [x19,2320]
+	b	.L2712
+.L2709:
+	adrp	x0, .LANCHOR1+3008
 	mov	w1, 65535
-	ldrh	w2, [x0,#:lo12:.LANCHOR1+3004]
+	ldrh	w2, [x0,#:lo12:.LANCHOR1+3008]
 	mov	w0, 1
 	cmp	w2, w1
-	bne	.L2595
-	b	.L2596
-.L2600:
-	ldr	x24, [x20,944]
+	bne	.L2712
+	b	.L2713
+.L2717:
+	ldr	x25, [x20,936]
 	add	x1, x29, 92
-	umull	x23, w21, w25
+	umull	x24, w22, w26
 	mov	w2, 0
-	add	x22, x24, x23
-	ldr	w0, [x22,8]
+	add	x23, x25, x24
+	ldr	w0, [x23,8]
 	bl	log2phys
 	ldr	w0, [x29,92]
-	ldr	w1, [x24,x23]
+	ldr	w1, [x25,x24]
 	cmp	w0, w1
-	bne	.L2598
+	bne	.L2715
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
-	mov	w23, w0
-	ldr	w0, [x22,8]
-	add	x1, x22, 4
+	mov	w24, w0
+	ldr	w0, [x23,8]
+	add	x1, x23, 4
 	mov	w2, 1
 	bl	log2phys
-	mov	w0, w23
-.L2613:
+	mov	w0, w24
+.L2731:
 	bl	decrement_vpc_count
-.L2599:
-	add	w21, w21, 1
-	uxth	w21, w21
-.L2597:
-	ldrh	w0, [x20,936]
-	cmp	w0, w21
-	bhi	.L2600
-	b	.L2615
-.L2598:
-	ldr	w1, [x22,4]
+.L2716:
+	add	w22, w22, 1
+	uxth	w22, w22
+.L2714:
+	ldrh	w0, [x20,928]
+	cmp	w0, w22
+	bhi	.L2717
+	b	.L2733
+.L2715:
+	ldr	w1, [x23,4]
 	cmp	w0, w1
-	beq	.L2599
-	ldrh	w0, [x20,96]
-	b	.L2613
-.L2615:
+	beq	.L2716
+	ldrh	w0, [x20,88]
+	b	.L2731
+.L2733:
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldrh	w0, [x20,96]
-	ldr	x2, [x20,-40]
+	ldrh	w0, [x20,88]
+	ldr	x2, [x20,-48]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2,x1]
-	cbz	w1, .L2601
+	cbz	w1, .L2718
 	bl	INSERT_DATA_LIST
-	b	.L2602
-.L2601:
+	b	.L2719
+.L2718:
 	bl	INSERT_FREE_LIST
-.L2602:
+.L2719:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w0, -1
-	strh	wzr, [x20,936]
-	strh	w0, [x20,96]
-	strh	wzr, [x20,924]
+	strh	wzr, [x20,928]
+	strh	w0, [x20,88]
+	strh	wzr, [x20,916]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	ldr	w0, [x20,160]
-	cbz	w0, .L2603
-	ldr	w0, [x20,220]
+	ldr	w0, [x20,152]
+	cbz	w0, .L2720
+	ldr	w0, [x20,212]
 	cmp	w0, 29
-	bhi	.L2603
-	ldrh	w0, [x20,272]
-	ldrh	w1, [x20,-8]
+	bhi	.L2720
+	ldrh	w0, [x20,264]
+	ldrh	w1, [x20,-16]
 	cmp	w1, w0
-	bcs	.L2604
+	bcs	.L2721
 	lsl	w0, w0, 1
-	strh	w0, [x20,864]
-.L2604:
+	strh	w0, [x20,856]
+.L2721:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
-	strh	w0, [x19,296]
-	b	.L2614
-.L2603:
+	strh	w0, [x19,288]
+	b	.L2732
+.L2720:
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x19,272]
-	ldrh	w1, [x19,-8]
-	add	w0, w0, w0, lsl 1
-	cmp	w1, w0, lsr 2
-	ble	.L2614
+	ldrh	w1, [x19,264]
+	ldrh	w0, [x19,-16]
+	add	w2, w1, w1, lsl 1
+	cmp	w0, w2, lsr 2
+	ble	.L2732
+	add	x21, x21, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	w0, [x19,296]
-	mov	w0, 20
-	strh	w0, [x19,864]
-.L2614:
+	strh	w0, [x19,288]
+	ldrb	w0, [x21,120]
+	cbz	w0, .L2722
+	sub	w1, w1, #2
+	strh	w1, [x19,856]
+.L2732:
 	mov	w0, 0
-.L2595:
+	b	.L2712
+.L2722:
+	mov	w1, 20
+	strh	w1, [x19,856]
+.L2712:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldr	x25, [sp,64]
+	ldp	x25, x26, [sp,64]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
@@ -17058,51 +17451,51 @@ Ftl_gc_temp_data_write_back:
 	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
 	adrp	x21, .LANCHOR2
-	cbz	w0, .L2617
+	cbz	w0, .L2735
 	add	x0, x21, :lo12:.LANCHOR2
-	ldr	w1, [x0,880]
-	tbz	x1, 0, .L2617
-	ldrh	w0, [x0,100]
-	cbz	w0, .L2617
-.L2622:
+	ldr	w1, [x0,872]
+	tbz	x1, 0, .L2735
+	ldrh	w0, [x0,92]
+	cbz	w0, .L2735
+.L2740:
 	mov	w0, 0
-	b	.L2618
-.L2617:
+	b	.L2736
+.L2735:
 	add	x1, x21, :lo12:.LANCHOR2
 	mov	w2, 0
 	mov	w3, w2
 	mov	w20, 0
 	mov	w22, 56
-	ldr	x0, [x1,2056]
-	ldr	w1, [x1,880]
+	ldr	x0, [x1,2048]
+	ldr	w1, [x1,872]
 	bl	FlashProgPages
-.L2619:
+.L2737:
 	add	x19, x21, :lo12:.LANCHOR2
-	ldr	w1, [x19,880]
+	ldr	w1, [x19,872]
 	cmp	w20, w1
-	bcs	.L2633
+	bcs	.L2751
 	umull	x0, w20, w22
-	ldr	x2, [x19,2056]
+	ldr	x2, [x19,2048]
 	add	x1, x2, x0
 	ldr	w2, [x2,x0]
 	cmn	w2, #1
-	bne	.L2620
-	ldrh	w3, [x19,96]
-	ldr	x1, [x19,-40]
+	bne	.L2738
+	ldrh	w3, [x19,88]
+	ldr	x1, [x19,-48]
 	strh	wzr, [x1,x3,lsl 1]
-	strh	w2, [x19,96]
-	ldr	w1, [x19,448]
+	strh	w2, [x19,88]
+	ldr	w1, [x19,440]
 	add	w1, w1, 1
-	str	w1, [x19,448]
-	ldr	x1, [x19,2056]
+	str	w1, [x19,440]
+	ldr	x1, [x19,2048]
 	add	x0, x1, x0
 	ldr	w0, [x0,4]
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L2632
-.L2620:
+	b	.L2750
+.L2738:
 	ldr	x2, [x1,16]
 	add	w20, w20, 1
 	ldr	w1, [x1,4]
@@ -17110,18 +17503,18 @@ Ftl_gc_temp_data_write_back:
 	ldr	w0, [x2,12]
 	ldr	w2, [x2,8]
 	bl	FtlGcUpdatePage
-	b	.L2619
-.L2633:
-	ldr	x0, [x19,2056]
+	b	.L2737
+.L2751:
+	ldr	x0, [x19,2048]
 	bl	FtlGcBufFree
-	str	wzr, [x19,880]
-	ldrh	w0, [x19,100]
-	cbnz	w0, .L2622
+	str	wzr, [x19,872]
+	ldrh	w0, [x19,92]
+	cbnz	w0, .L2740
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-.L2632:
+.L2750:
 	mov	w0, 1
-.L2618:
+.L2736:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -17139,20 +17532,20 @@ FtlGcPageRecovery:
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR2
 	str	x21, [sp,32]
-	add	x21, x19, 96
+	add	x21, x19, 88
 	mov	x0, x21
-	ldrh	w1, [x20,2026]
+	ldrh	w1, [x20,2018]
 	bl	FtlGcScanTempBlk
-	ldrh	w1, [x19,98]
-	ldrh	w0, [x20,2026]
+	ldrh	w1, [x19,90]
+	ldrh	w0, [x20,2018]
 	cmp	w1, w0
-	bcc	.L2634
-	add	x0, x19, 2240
+	bcc	.L2752
+	add	x0, x19, 2232
 	bl	FtlMapBlkWriteDumpData
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
-	str	wzr, [x19,2328]
-.L2634:
+	str	wzr, [x19,2320]
+.L2752:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -17163,18 +17556,17 @@ FtlGcPageRecovery:
 	.type	FtlPowerLostRecovery, %function
 FtlPowerLostRecovery:
 	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LANCHOR4
+	adrp	x0, .LANCHOR4+268
 	add	x29, sp, 0
-	add	x0, x0, :lo12:.LANCHOR4
-	str	x19, [sp,16]
+	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR2
+	str	wzr, [x0,#:lo12:.LANCHOR4+268]
 	add	x19, x19, :lo12:.LANCHOR2
-	strh	wzr, [x0,266]
-	str	wzr, [x0,268]
-	mov	x0, x19
+	sub	x20, x19, #8
+	add	x19, x19, 40
+	mov	x0, x20
 	bl	FtlRecoverySuperblock
-	mov	x0, x19
-	add	x19, x19, 48
+	mov	x0, x20
 	bl	FtlSlcSuperblockCheck
 	mov	x0, x19
 	bl	FtlRecoverySuperblock
@@ -17183,8 +17575,8 @@ FtlPowerLostRecovery:
 	bl	FtlGcPageRecovery
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldr	x19, [sp,16]
 	mov	w0, 0
+	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -17193,28 +17585,31 @@ FtlPowerLostRecovery:
 	.type	FtlSysBlkInit, %function
 FtlSysBlkInit:
 	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
+	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	add	x21, x23, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR4
+	adrp	x24, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x22, x24, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
-	ldrh	w0, [x21,1956]
+	strh	wzr, [x0,266]
 	add	x19, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x22,1948]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
-	ldrh	w1, [x19,280]
+	ldrh	w1, [x19,272]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2638
-.L2640:
-	mov	w22, -1
-	b	.L2639
-.L2638:
+	bne	.L2756
+.L2758:
+	mov	w23, -1
+	b	.L2757
+.L2756:
 	bl	FtlLoadSysInfo
-	mov	w22, w0
-	cbnz	w0, .L2640
+	mov	w23, w0
+	cbnz	w0, .L2758
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -17222,100 +17617,101 @@ FtlSysBlkInit:
 	bl	FtlFreeSysBLkSort
 	bl	SupperBlkListInit
 	bl	FtlPowerLostRecovery
-	ldrh	w2, [x21,2066]
+	mov	w0, 1
+	bl	FtlUpdateVaildLpn
+	ldrh	w2, [x22,2058]
 	mov	x1, 0
-	ldr	x0, [x19,144]
-.L2641:
+	ldr	x0, [x19,136]
+.L2759:
 	cmp	w1, w2
 	mov	w3, w1
-	bge	.L2645
+	bge	.L2763
 	add	x4, x0, x1, lsl 4
 	add	x1, x1, 1
 	ldr	w4, [x4,4]
-	tbz	w4, #31, .L2641
-.L2645:
+	tbz	w4, #31, .L2759
+.L2763:
 	add	x0, x20, :lo12:.LANCHOR2
 	cmp	w3, w2
-	adrp	x24, .LANCHOR4
-	ldrh	w1, [x0,252]
+	ldrh	w1, [x0,244]
 	add	w1, w1, 1
-	strh	w1, [x0,252]
-	blt	.L2642
-	add	x0, x24, :lo12:.LANCHOR4
+	strh	w1, [x0,244]
+	blt	.L2760
+	add	x0, x21, :lo12:.LANCHOR4
 	ldrh	w0, [x0,266]
-	cbz	w0, .L2646
-.L2642:
+	cbz	w0, .L2764
+.L2760:
 	add	x19, x20, :lo12:.LANCHOR2
-	mov	x0, x19
-	add	x21, x19, 48
+	sub	x0, x19, #8
+	add	x22, x19, 40
 	bl	FtlSuperblockPowerLostFix
-	mov	x0, x21
+	mov	x0, x22
 	bl	FtlSuperblockPowerLostFix
-	ldrh	w0, [x20,#:lo12:.LANCHOR2]
-	ldr	x2, [x19,-40]
+	ldrh	w0, [x19,-8]
+	ldr	x2, [x19,-48]
 	lsl	x0, x0, 1
-	ldrh	w3, [x19,4]
+	ldrh	w3, [x19,-4]
 	ldrh	w1, [x2,x0]
 	sub	w1, w1, w3
 	strh	w1, [x2,x0]
-	add	x2, x23, :lo12:.LANCHOR0
-	strb	wzr, [x19,6]
-	ldr	x3, [x19,-40]
-	strh	wzr, [x19,4]
-	ldrh	w0, [x2,2026]
-	strh	w0, [x19,2]
-	ldrh	w0, [x19,48]
-	ldrh	w4, [x19,52]
-	lsl	x0, x0, 1
-	ldrh	w1, [x3,x0]
-	sub	w1, w1, w4
-	strh	w1, [x3,x0]
-	strb	wzr, [x19,54]
-	ldrh	w0, [x2,2026]
-	strh	w0, [x19,50]
-	add	x0, x19, 2240
-	strh	wzr, [x19,52]
+	add	x0, x24, :lo12:.LANCHOR0
+	strb	wzr, [x19,-2]
+	ldr	x3, [x19,-48]
+	strh	wzr, [x19,-4]
+	ldrh	w1, [x0,2018]
+	strh	w1, [x19,-6]
+	ldrh	w1, [x19,40]
+	ldrh	w4, [x19,44]
+	lsl	x1, x1, 1
+	ldrh	w2, [x3,x1]
+	sub	w2, w2, w4
+	strh	w2, [x3,x1]
+	strb	wzr, [x19,46]
+	ldrh	w0, [x0,2018]
+	strh	w0, [x19,42]
+	add	x0, x19, 2232
+	strh	wzr, [x19,44]
 	bl	FtlMapBlkWriteDumpData
-	add	x0, x24, :lo12:.LANCHOR4
+	add	x0, x21, :lo12:.LANCHOR4
 	add	x0, x0, 200
 	bl	FtlMapBlkWriteDumpData
-	ldrh	w0, [x19,254]
+	ldrh	w0, [x19,246]
 	add	w0, w0, 1
-	strh	w0, [x19,254]
+	strh	w0, [x19,246]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L2646:
-	mov	w0, 1
+.L2764:
 	add	x19, x20, :lo12:.LANCHOR2
-	bl	FtlUpdateVaildLpn
-	ldrh	w0, [x20,#:lo12:.LANCHOR2]
-	mov	w1, 65535
-	cmp	w0, w1
-	beq	.L2647
-	ldrh	w1, [x19,4]
-	cbnz	w1, .L2647
-	ldrh	w1, [x19,52]
-	add	x21, x19, 48
-	cbnz	w1, .L2647
+	mov	w0, 65535
+	sub	x24, x19, #8
+	ldrh	w1, [x19,-8]
+	cmp	w1, w0
+	beq	.L2765
+	ldrh	w0, [x19,-4]
+	cbnz	w0, .L2765
+	ldrh	w0, [x19,44]
+	add	x22, x19, 40
+	cbnz	w0, .L2765
+	mov	w0, w1
 	bl	FtlGcRefreshBlock
-	ldrh	w0, [x19,48]
+	ldrh	w0, [x19,40]
 	bl	FtlGcRefreshBlock
-	mov	x0, x19
+	mov	x0, x24
 	bl	allocate_new_data_superblock
-	mov	x0, x21
+	mov	x0, x22
 	bl	allocate_new_data_superblock
-	add	x0, x24, :lo12:.LANCHOR4
+	add	x0, x21, :lo12:.LANCHOR4
 	add	x0, x0, 200
 	bl	FtlMapBlkWriteDumpData
-.L2647:
+.L2765:
 	add	x20, x20, :lo12:.LANCHOR2
-	ldrh	w0, [x20,252]
+	ldrh	w0, [x20,244]
 	and	w0, w0, 31
-	cbnz	w0, .L2639
+	cbnz	w0, .L2757
 	bl	FtlVpcCheckAndModify
-.L2639:
-	mov	w0, w22
+.L2757:
+	mov	w0, w23
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -17323,6 +17719,54 @@ FtlSysBlkInit:
 	ret
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 88
+	ldrh	w2, [x0,88]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2772
+	ldrh	w0, [x1,4]
+	cbnz	w0, .L2773
+.L2772:
+	bl	FtlCacheWriteBack
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	strb	wzr, [x20,96]
+	add	x0, x20, 88
+	bl	allocate_data_superblock
+	strh	wzr, [x20,916]
+	strh	wzr, [x20,928]
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2773:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 88
+	bl	get_new_active_ppa
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlCacheWriteBack
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
 	.global	FtlInit
 	.type	FtlInit, %function
 FtlInit:
@@ -17335,7 +17779,7 @@ FtlInit:
 	add	x19, x19, :lo12:.LANCHOR1
 	mov	w0, -1
 	add	x1, x1, :lo12:.LC73
-	str	w0, [x19,532]
+	str	w0, [x19,504]
 	adrp	x0, .LANCHOR4+420
 	str	wzr, [x0,#:lo12:.LANCHOR4+420]
 	adrp	x0, .LC72
@@ -17345,16 +17789,27 @@ FtlInit:
 	bl	FtlConstantsInit
 	bl	FtlMemInit
 	bl	FtlVariablesInit
-	adrp	x0, .LANCHOR0+1956
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+1956]
+	adrp	x0, .LANCHOR0+1948
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+1948]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	w0, .L2655
+	cbnz	w0, .L2779
 	bl	FtlSysBlkInit
-	cbnz	w0, .L2655
+	cbnz	w0, .L2779
 	mov	w0, 1
-	str	w0, [x19,532]
-.L2655:
+	str	w0, [x19,504]
+	adrp	x0, .LANCHOR2-16
+	ldrh	w0, [x0,#:lo12:.LANCHOR2-16]
+	cmp	w0, 15
+	bhi	.L2779
+	mov	w19, 8129
+.L2778:
+	mov	w0, 0
+	mov	w1, 1
+	bl	rk_ftl_garbage_collect
+	subs	w19, w19, #1
+	bne	.L2778
+.L2779:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -17373,13 +17828,13 @@ rk_ftl_init:
 	bl	ftl_malloc
 	add	x1, x19, 432
 	str	x0, [x19,424]
-	add	x0, x19, 32
-	str	xzr, [x19,32]
+	add	x0, x19, 24
+	str	xzr, [x19,24]
 	str	xzr, [x19,432]
 	bl	rknand_get_reg_addr
-	ldr	x1, [x19,32]
+	ldr	x1, [x19,24]
 	mov	w0, -1
-	cbz	x1, .L2658
+	cbz	x1, .L2782
 	bl	rk_nandc_irq_init
 	mov	w1, 0
 	ldr	x0, [x19,424]
@@ -17387,74 +17842,26 @@ rk_ftl_init:
 	mov	w3, 2048
 	bl	FlashSramLoadStore
 	bl	rknand_flash_cs_init
-	ldr	x0, [x19,32]
+	ldr	x0, [x19,24]
 	bl	FlashInit
 	mov	w19, w0
-	cbnz	w0, .L2659
+	cbnz	w0, .L2783
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	add	x0, x0, 168
 	bl	FtlInit
-.L2659:
-	adrp	x0, .LC118
+.L2783:
+	adrp	x0, .LC125
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC118
+	add	x0, x0, :lo12:.LC125
 	bl	printk
 	mov	w0, w19
-.L2658:
+.L2782:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	rk_ftl_init, .-rk_ftl_init
 	.align	2
-	.global	Ftl_get_new_temp_ppa
-	.type	Ftl_get_new_temp_ppa, %function
-Ftl_get_new_temp_ppa:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR2
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x1, x0, 96
-	ldrh	w2, [x0,96]
-	mov	w0, 65535
-	cmp	w2, w0
-	beq	.L2663
-	ldrh	w0, [x1,4]
-	cbnz	w0, .L2664
-.L2663:
-	bl	FtlCacheWriteBack
-	add	x20, x19, :lo12:.LANCHOR2
-	mov	w0, 0
-	bl	FtlGcFreeTempBlock
-	strb	wzr, [x20,104]
-	add	x0, x20, 96
-	bl	allocate_data_superblock
-	strh	wzr, [x20,924]
-	strh	wzr, [x20,936]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	mov	w0, 0
-	bl	FtlEctTblFlush
-.L2664:
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x0, x0, 96
-	bl	get_new_active_ppa
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
-	.align	2
-	.global	rk_ftl_cache_write_back
-	.type	rk_ftl_cache_write_back, %function
-rk_ftl_cache_write_back:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	FtlCacheWriteBack
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
-	.align	2
 	.global	FtlRead
 	.type	FtlRead, %function
 FtlRead:
@@ -17470,23 +17877,23 @@ FtlRead:
 	mov	w20, w1
 	mov	w28, w2
 	mov	x26, x3
-	bne	.L2667
+	bne	.L2787
 	add	w0, w1, 256
 	mov	w1, w2
 	mov	x2, x3
 	bl	FtlVendorPartRead
-	b	.L2668
-.L2667:
+	b	.L2788
+.L2787:
 	adrp	x21, .LANCHOR0
 	add	w0, w1, w2
 	add	x1, x21, :lo12:.LANCHOR0
 	str	w0, [x29,152]
 	mov	w0, -1
 	ldr	w3, [x29,152]
-	ldr	w2, [x1,2068]
+	ldr	w2, [x1,2060]
 	cmp	w3, w2
-	bhi	.L2668
-	ldrh	w0, [x1,2032]
+	bhi	.L2788
+	ldrh	w0, [x1,2024]
 	sub	w25, w3, #1
 	adrp	x19, .LANCHOR2
 	udiv	w1, w20, w0
@@ -17496,44 +17903,44 @@ FtlRead:
 	sub	w24, w25, w0
 	add	x0, x19, :lo12:.LANCHOR2
 	add	w24, w24, 1
-	ldr	w1, [x0,192]
+	ldr	w1, [x0,184]
 	add	w1, w28, w1
-	str	w1, [x0,192]
-	ldr	w1, [x0,164]
+	str	w1, [x0,184]
+	ldr	w1, [x0,156]
 	add	w1, w24, w1
-	str	w1, [x0,164]
+	str	w1, [x0,156]
 	ldr	w0, [x29,156]
 	mov	w1, w25
 	bl	FtlCacheMetchLpa
-	cbz	w0, .L2669
+	cbz	w0, .L2789
 	bl	FtlCacheWriteBack
-.L2669:
+.L2789:
 	mov	w27, 0
 	ldr	w22, [x29,156]
 	str	w27, [x29,140]
 	mov	w23, w27
 	str	w27, [x29,136]
-.L2670:
-	cbz	w24, .L2712
+.L2790:
+	cbz	w24, .L2832
 	mov	w0, w22
 	add	x1, x29, 172
 	mov	w2, 0
 	bl	log2phys
 	ldr	w3, [x29,172]
 	cmn	w3, #1
-	bne	.L2709
+	bne	.L2829
 	mov	w3, 0
-.L2671:
+.L2791:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	cmp	w3, w0
-	bcs	.L2675
+	bcs	.L2795
 	madd	w0, w22, w0, w3
 	cmp	w0, w20
-	bcc	.L2673
+	bcc	.L2793
 	ldr	w1, [x29,152]
 	cmp	w0, w1
-	bcs	.L2673
+	bcs	.L2793
 	sub	w0, w0, w20
 	mov	w1, 0
 	ubfiz	x0, x0, 9, 23
@@ -17542,25 +17949,25 @@ FtlRead:
 	str	x3, [x29,144]
 	bl	ftl_memset
 	ldr	x3, [x29,144]
-.L2673:
+.L2793:
 	add	w3, w3, 1
-	b	.L2671
-.L2709:
+	b	.L2791
+.L2829:
 	mov	w0, 56
 	umull	x1, w23, w0
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	x2, [x0,2048]
+	ldr	x2, [x0,2040]
 	add	x2, x2, x1
 	str	w3, [x2,4]
 	ldr	w2, [x29,156]
 	cmp	w22, w2
-	ldr	x2, [x0,2048]
+	ldr	x2, [x0,2040]
 	add	x2, x2, x1
-	bne	.L2676
-	ldr	x0, [x0,2096]
+	bne	.L2796
+	ldr	x0, [x0,2088]
 	str	x0, [x2,8]
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	udiv	w3, w20, w0
 	msub	w3, w3, w0, w20
 	str	w3, [x29,112]
@@ -17569,58 +17976,58 @@ FtlRead:
 	csel	w3, w3, w28, ls
 	str	w3, [x29,140]
 	cmp	w3, w0
-	bne	.L2677
+	bne	.L2797
 	str	x26, [x2,8]
-	b	.L2677
-.L2676:
+	b	.L2797
+.L2796:
 	cmp	w22, w25
-	bne	.L2678
-	ldr	x0, [x0,2104]
+	bne	.L2798
+	ldr	x0, [x0,2096]
 	str	x0, [x2,8]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w4, [x29,152]
-	ldrh	w3, [x0,2032]
+	ldrh	w3, [x0,2024]
 	mul	w0, w22, w3
 	sub	w27, w4, w0
 	cmp	w27, w3
-	bne	.L2677
-	b	.L2710
-.L2678:
+	bne	.L2797
+	b	.L2830
+.L2798:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	mul	w0, w22, w0
-.L2710:
+.L2830:
 	sub	w0, w0, w20
 	ubfiz	x0, x0, 9, 23
 	add	x0, x26, x0
 	str	x0, [x2,8]
-.L2677:
+.L2797:
 	add	x2, x19, :lo12:.LANCHOR2
-	ldr	x0, [x2,2048]
-	ldr	x2, [x2,2120]
+	ldr	x0, [x2,2040]
+	ldr	x2, [x2,2112]
 	add	x1, x0, x1
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2038]
+	ldrh	w0, [x0,2030]
 	str	w22, [x1,24]
 	mul	w0, w23, w0
 	add	w23, w23, 1
 	and	x0, x0, 4294967292
 	add	x0, x2, x0
 	str	x0, [x1,16]
-.L2675:
+.L2795:
 	subs	w24, w24, #1
 	add	w22, w22, 1
-	beq	.L2679
+	beq	.L2799
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x0,1952]
+	ldrh	w0, [x0,1944]
 	cmp	w23, w0, lsl 3
-	bne	.L2670
-.L2679:
-	cbz	w23, .L2670
+	bne	.L2790
+.L2799:
+	cbz	w23, .L2790
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, w23
 	mov	w2, 0
-	ldr	x0, [x0,2048]
+	ldr	x0, [x0,2040]
 	bl	FlashReadPages
 	str	xzr, [x29,144]
 	ldr	x0, [x29,112]
@@ -17631,85 +18038,85 @@ FtlRead:
 	str	w0, [x29,108]
 	lsl	w0, w27, 9
 	str	w0, [x29,104]
-.L2681:
+.L2801:
 	ldr	w0, [x29,144]
 	cmp	w23, w0
-	bls	.L2713
+	bls	.L2833
 	ldr	x0, [x29,144]
 	add	x2, x19, :lo12:.LANCHOR2
 	mov	x1, 56
 	ldr	w4, [x29,156]
 	mul	x3, x0, x1
-	ldr	x0, [x2,2048]
+	ldr	x0, [x2,2040]
 	add	x0, x0, x3
 	ldr	w1, [x0,24]
 	cmp	w1, w4
-	bne	.L2682
+	bne	.L2802
 	ldr	x1, [x0,8]
-	ldr	x0, [x2,2096]
+	ldr	x0, [x2,2088]
 	cmp	x1, x0
-	bne	.L2683
+	bne	.L2803
 	ldr	x2, [x29,128]
 	mov	x0, x26
 	str	x3, [x29,96]
 	add	x1, x1, x2
 	ldr	w2, [x29,108]
-	b	.L2711
-.L2682:
+	b	.L2831
+.L2802:
 	cmp	w1, w25
-	bne	.L2683
+	bne	.L2803
 	ldr	x1, [x0,8]
-	ldr	x0, [x2,2104]
+	ldr	x0, [x2,2096]
 	cmp	x1, x0
-	bne	.L2683
+	bne	.L2803
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,104]
 	str	x3, [x29,96]
-	ldrh	w0, [x0,2032]
+	ldrh	w0, [x0,2024]
 	mul	w0, w25, w0
 	sub	w0, w0, w20
 	ubfiz	x0, x0, 9, 23
 	add	x0, x26, x0
-.L2711:
+.L2831:
 	bl	ftl_memcpy
 	ldr	x3, [x29,96]
-.L2683:
+.L2803:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	x1, [x0,2048]
+	ldr	x1, [x0,2040]
 	add	x5, x1, x3
 	ldr	w4, [x1,x3]
 	cmn	w4, #1
-	bne	.L2684
-	ldr	w2, [x0,424]
+	bne	.L2804
+	ldr	w2, [x0,416]
 	str	w4, [x29,136]
 	add	w2, w2, 1
-	str	w2, [x0,424]
-.L2684:
+	str	w2, [x0,416]
+.L2804:
 	ldr	w0, [x1,x3]
 	cmp	w0, 256
-	bne	.L2685
+	bne	.L2805
 	ldr	w0, [x5,4]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L2685:
+.L2805:
 	ldr	x0, [x29,144]
 	add	x0, x0, 1
 	str	x0, [x29,144]
-	b	.L2681
-.L2713:
+	b	.L2801
+.L2833:
 	mov	w23, 0
-	b	.L2670
-.L2712:
+	b	.L2790
+.L2832:
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x19,956]
-	cbz	w0, .L2688
+	ldrh	w0, [x19,948]
+	cbz	w0, .L2808
 	mov	w0, w24
 	mov	w1, 1
 	bl	rk_ftl_garbage_collect
-.L2688:
+.L2808:
 	ldr	w0, [x29,136]
-.L2668:
+.L2788:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -17722,516 +18129,556 @@ FtlRead:
 	.global	FtlWrite
 	.type	FtlWrite, %function
 FtlWrite:
-	stp	x29, x30, [sp, -272]!
+	stp	x29, x30, [sp, -288]!
 	uxtb	w0, w0
 	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
 	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	cmp	w0, 16
-	mov	w23, w1
-	mov	w24, w2
-	mov	x25, x3
-	bne	.L2715
+	mov	w21, w1
+	mov	w22, w2
+	mov	x24, x3
+	bne	.L2835
 	add	w0, w1, 256
 	mov	w1, w2
 	mov	x2, x3
 	bl	FtlVendorPartWrite
-	b	.L2716
-.L2715:
-	adrp	x22, .LANCHOR0
-	add	w27, w1, w2
-	add	x2, x22, :lo12:.LANCHOR0
+	b	.L2836
+.L2835:
+	adrp	x20, .LANCHOR0
+	add	w26, w1, w2
+	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, -1
-	ldr	w1, [x2,2068]
-	cmp	w27, w1
-	bhi	.L2716
-	adrp	x5, .LANCHOR4
-	ldrh	w1, [x2,2032]
-	add	x4, x5, :lo12:.LANCHOR4
-	sub	w27, w27, #1
-	mov	w0, 2048
-	adrp	x20, .LANCHOR2
-	udiv	w26, w23, w1
-	cmp	w24, w1, lsl 1
-	str	w0, [x4,440]
-	str	x5, [x29,152]
-	udiv	w0, w27, w1
-	str	w0, [x29,180]
-	sub	w28, w0, w26
-	add	w21, w28, 1
-	add	x0, x20, :lo12:.LANCHOR2
-	add	x19, x0, 48
-	ldr	w3, [x0,172]
-	add	w3, w21, w3
-	str	w3, [x0,172]
-	ldr	w3, [x0,188]
-	add	w3, w24, w3
-	str	w3, [x0,188]
-	cset	w3, cs
-	str	w3, [x29,204]
-	ldr	w3, [x2,2088]
-	cmp	w24, 8
-	csel	x19, x0, x19, hi
-	cbz	w3, .L2718
-	sub	w3, w3, #1
-	mov	w5, 56
-	ldr	x2, [x2,2096]
-	umull	x3, w3, w5
-	add	x3, x2, x3
-	ldr	w2, [x3,24]
+	ldr	w2, [x1,2060]
 	cmp	w26, w2
-	bne	.L2719
-	ldr	w2, [x0,176]
-	str	x4, [x29,192]
-	add	w2, w2, 1
-	str	w2, [x0,176]
-	ldr	w0, [x4,444]
+	bhi	.L2836
+	adrp	x3, .LANCHOR4
+	ldrh	w1, [x1,2024]
+	add	x0, x3, :lo12:.LANCHOR4
+	sub	w26, w26, #1
+	mov	w2, 2048
+	str	x3, [x29,184]
+	udiv	w25, w21, w1
+	cmp	w22, w1, lsl 1
+	str	w2, [x0,440]
+	adrp	x2, .LANCHOR2
+	add	x19, x2, :lo12:.LANCHOR2
+	str	x2, [x29,152]
+	udiv	w0, w26, w1
+	str	w0, [x29,196]
+	sub	w28, w0, w25
+	add	w27, w28, 1
+	ldr	w0, [x19,164]
+	add	w0, w27, w0
+	str	w0, [x19,164]
+	ldr	w0, [x19,180]
+	add	w0, w22, w0
+	str	w0, [x19,180]
+	cset	w0, cs
+	cmp	w22, 8
+	str	w0, [x29,220]
+	bhi	.L2877
+	add	x19, x19, 40
+	b	.L2837
+.L2877:
+	sub	x19, x19, #8
+.L2837:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w3, [x0,2080]
+	cbz	w3, .L2838
+	sub	w3, w3, #1
+	mov	w2, 56
+	ldr	x0, [x0,2088]
+	umull	x3, w3, w2
+	add	x3, x0, x3
+	ldr	w0, [x3,24]
+	cmp	w25, w0
+	bne	.L2839
+	ldr	x0, [x29,152]
+	add	x2, x0, :lo12:.LANCHOR2
+	ldr	w0, [x2,168]
 	add	w0, w0, 1
-	str	w0, [x4,444]
-	msub	w0, w26, w1, w23
+	str	w0, [x2,168]
+	ldr	x0, [x29,184]
+	add	x27, x0, :lo12:.LANCHOR4
+	ldr	w0, [x27,444]
+	add	w0, w0, 1
+	str	w0, [x27,444]
+	msub	w0, w25, w1, w21
 	sub	w1, w1, w0
 	ubfiz	x0, x0, 9, 23
-	cmp	w1, w24
-	csel	w19, w1, w24, ls
+	cmp	w1, w22
+	csel	w19, w1, w22, ls
 	ldr	x1, [x3,8]
-	lsl	w21, w19, 9
+	lsl	w23, w19, 9
 	add	x0, x1, x0
-	mov	w2, w21
-	mov	x1, x25
+	mov	w2, w23
+	mov	x1, x24
 	bl	ftl_memcpy
-	ldr	x4, [x29,192]
-	cbnz	w28, .L2720
-	ldr	w1, [x4,444]
-	mov	w0, w28
-	cmp	w1, 2
-	ble	.L2716
-.L2720:
-	add	x25, x25, x21
-	sub	w24, w24, w19
-	add	w23, w23, w19
-	add	w26, w26, 1
-	mov	w21, w28
-.L2719:
-	ldr	x0, [x29,152]
+	cbnz	w28, .L2840
+	ldr	w0, [x27,444]
+	cmp	w0, 2
+	bgt	.L2840
+.L2873:
+	mov	w0, 0
+	b	.L2836
+.L2840:
+	sub	w22, w22, w19
+	add	w21, w21, w19
+	add	x24, x24, x23
+	add	w25, w25, 1
+	mov	w27, w28
+.L2839:
+	ldr	x0, [x29,184]
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	x19, [x0,408]
 	str	wzr, [x0,444]
-.L2718:
-	ldr	w1, [x29,180]
-	mov	w0, w26
+.L2838:
+	ldr	w1, [x29,196]
+	mov	w0, w25
 	bl	FtlCacheMetchLpa
-	cbz	w0, .L2721
+	cbz	w0, .L2841
 	bl	FtlCacheWriteBack
-.L2721:
-	ldr	x0, [x29,152]
-	add	x20, x20, :lo12:.LANCHOR2
-	str	w26, [x29,200]
+.L2841:
+	ldr	x0, [x29,184]
+	str	w25, [x29,216]
 	add	x0, x0, :lo12:.LANCHOR4
 	str	x19, [x0,408]
-	adrp	x0, .LC119
-	add	x0, x0, :lo12:.LC119
+	ldr	x0, [x29,152]
+	add	x23, x0, :lo12:.LANCHOR2
+	sub	x0, x23, #8
+	str	x0, [x29,176]
+	adrp	x0, .LC126
+	add	x0, x0, :lo12:.LC126
 	str	x0, [x29,112]
-.L2722:
-	cbz	w21, .L2780
+.L2842:
+	cbz	w27, .L2903
 	ldrh	w0, [x19,4]
-	cbnz	w0, .L2723
-	cmp	x19, x20
-	bne	.L2724
-	add	x0, x20, 48
+	cbnz	w0, .L2843
+	ldr	x1, [x29,176]
+	adrp	x28, .LANCHOR1
+	cmp	x19, x1
+	bne	.L2844
+	add	x0, x23, 40
 	ldrh	w19, [x0,4]
-	cbnz	w19, .L2725
+	cbnz	w19, .L2845
 	bl	allocate_new_data_superblock
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	str	w19, [x0,3008]
-.L2725:
-	mov	x0, x20
-	add	x19, x20, 48
+	add	x0, x28, :lo12:.LANCHOR1
+	str	w19, [x0,3012]
+.L2845:
+	ldr	x0, [x29,176]
+	add	x28, x28, :lo12:.LANCHOR1
+	add	x19, x23, 40
 	bl	allocate_new_data_superblock
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	ldr	w0, [x0,3008]
-	cbnz	w0, .L2726
-.L2727:
-	mov	x19, x20
-	b	.L2726
-.L2724:
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	str	w0, [x1,3008]
-	ldrh	w0, [x20,4]
-	cbnz	w0, .L2727
+	ldr	w0, [x28,3012]
+	cbnz	w0, .L2846
+.L2847:
+	ldr	x19, [x29,176]
+	b	.L2846
+.L2844:
+	add	x28, x28, :lo12:.LANCHOR1
+	str	w0, [x28,3012]
+	ldr	x0, [x29,176]
+	ldrh	w0, [x0,4]
+	cbnz	w0, .L2847
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-.L2726:
+.L2846:
 	ldrh	w0, [x19,4]
-	cbnz	w0, .L2728
+	cbnz	w0, .L2848
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-.L2728:
-	ldr	x0, [x29,152]
+.L2848:
+	ldr	x0, [x29,184]
 	add	x0, x0, :lo12:.LANCHOR4
 	str	x19, [x0,408]
-.L2723:
-	add	x2, x22, :lo12:.LANCHOR0
-	ldr	w0, [x20,2040]
+.L2843:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldr	w0, [x23,2032]
 	ldrh	w1, [x19,4]
-	str	xzr, [x29,192]
-	ldr	w2, [x2,2088]
+	str	xzr, [x29,208]
+	ldr	w2, [x2,2080]
 	sub	w0, w0, w2
 	cmp	w1, w0
 	csel	w0, w1, w0, ls
-	cmp	w0, w21
-	csel	w0, w0, w21, ls
+	cmp	w0, w27
+	csel	w0, w0, w27, ls
 	str	w0, [x29,148]
-	ldr	w0, [x29,204]
+	ldr	w0, [x29,220]
 	and	w0, w0, 1
 	str	w0, [x29,124]
-	add	w0, w24, w23
+	add	w0, w22, w21
 	str	w0, [x29,144]
-.L2729:
-	ldr	w0, [x29,192]
+.L2849:
+	ldr	w0, [x29,208]
 	ldr	w2, [x29,148]
-	ldr	w1, [x29,200]
+	ldr	w1, [x29,216]
 	cmp	w0, w2
-	add	w27, w1, w0
-	bcs	.L2781
+	add	w26, w1, w0
+	bcs	.L2904
 	ldrh	w1, [x19,4]
-	cbz	w1, .L2758
-	ldr	w1, [x29,180]
-	cmp	w27, w1
+	cbz	w1, .L2880
+	ldr	w1, [x29,196]
+	cmp	w26, w1
 	cset	w7, eq
-	cbz	w0, .L2731
+	cbz	w0, .L2851
 	ldr	w1, [x29,124]
 	tst	w7, w1
-	beq	.L2731
-	add	x1, x22, :lo12:.LANCHOR0
+	beq	.L2851
+	add	x1, x20, :lo12:.LANCHOR0
 	ldr	w2, [x29,144]
-	ldrh	w1, [x1,2032]
-	msub	w2, w27, w1, w2
+	ldrh	w1, [x1,2024]
+	msub	w2, w26, w1, w2
 	cmp	w2, w1
-	bne	.L2758
-.L2731:
-	add	x1, x29, 212
+	bne	.L2880
+.L2851:
+	add	x1, x29, 228
 	mov	w2, 0
-	mov	w0, w27
+	mov	w0, w26
 	str	x7, [x29,104]
 	bl	log2phys
 	mov	x0, x19
 	bl	get_new_active_ppa
-	add	x4, x22, :lo12:.LANCHOR0
+	add	x4, x20, :lo12:.LANCHOR0
 	mov	w5, 56
-	str	x4, [x29,184]
+	str	x4, [x29,200]
 	str	x5, [x29,160]
-	ldr	w6, [x4,2088]
-	ldr	x2, [x4,2096]
+	ldr	w6, [x4,2080]
+	ldr	x2, [x4,2088]
 	umull	x1, w6, w5
 	add	x2, x2, x1
 	str	w0, [x2,4]
-	ldrh	w2, [x4,2038]
-	ldr	x0, [x4,2096]
+	ldrh	w2, [x4,2030]
+	ldr	x0, [x4,2088]
 	add	x1, x0, x1
 	mul	w0, w2, w6
 	and	x0, x0, 4294967292
 	str	x0, [x29,136]
-	ldr	x0, [x20,2128]
+	ldr	x0, [x23,2120]
 	ldr	x3, [x29,136]
 	str	x0, [x29,128]
 	add	x28, x0, x3
-	ldrh	w0, [x4,2036]
+	ldrh	w0, [x4,2028]
 	str	x28, [x1,16]
-	str	w27, [x1,24]
+	str	w26, [x1,24]
 	mul	w0, w0, w6
-	ldr	x6, [x20,2088]
+	ldr	x6, [x23,2080]
 	and	x0, x0, 4294967292
 	add	x0, x6, x0
 	str	x0, [x1,8]
 	mov	x0, x28
 	mov	w1, 0
 	bl	ftl_memset
-	cmp	w27, w26
-	ldr	x4, [x29,184]
+	cmp	w26, w25
+	ldr	x4, [x29,200]
 	cset	w0, eq
-	str	w0, [x29,176]
-	cbnz	w0, .L2761
+	str	w0, [x29,192]
+	cbnz	w0, .L2883
 	ldr	x7, [x29,104]
 	ldr	x5, [x29,160]
-	cbz	w7, .L2732
+	cbz	w7, .L2852
 	ldr	w0, [x29,144]
-	ldrh	w2, [x4,2032]
-	msub	w2, w27, w2, w0
+	ldrh	w2, [x4,2024]
+	msub	w2, w26, w2, w0
 	uxth	w0, w2
-	str	w0, [x29,184]
-	ldr	w0, [x29,176]
+	str	w0, [x29,200]
+	ldr	w0, [x29,192]
 	str	w0, [x29,160]
-	b	.L2735
-.L2761:
-	ldrh	w2, [x4,2032]
-	udiv	w0, w23, w2
-	msub	w0, w0, w2, w23
+	b	.L2855
+.L2883:
+	ldrh	w2, [x4,2024]
+	udiv	w0, w21, w2
+	msub	w0, w0, w2, w21
 	str	w0, [x29,160]
 	sub	w2, w2, w0
-	cmp	w2, w24
-	csel	w0, w2, w24, ls
-	str	w0, [x29,184]
-.L2735:
-	add	x2, x22, :lo12:.LANCHOR0
-	ldr	w1, [x29,184]
-	ldrh	w0, [x2,2032]
+	cmp	w2, w22
+	csel	w0, w2, w22, ls
+	str	w0, [x29,200]
+.L2855:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldr	w1, [x29,200]
+	ldrh	w0, [x2,2024]
 	cmp	w1, w0
-	bne	.L2736
-	ldr	w0, [x29,176]
-	mov	x1, x25
-	cbnz	w0, .L2737
-	ldr	w0, [x29,184]
-	mul	w1, w0, w27
-	sub	w1, w1, w23
+	bne	.L2856
+	ldr	w0, [x29,192]
+	mov	x1, x24
+	cbnz	w0, .L2857
+	ldr	w0, [x29,200]
+	mul	w1, w0, w26
+	sub	w1, w1, w21
 	ubfiz	x1, x1, 9, 23
-	add	x1, x25, x1
-.L2737:
-	ldr	w2, [x29,204]
+	add	x1, x24, x1
+.L2857:
+	ldr	w2, [x29,220]
 	mov	w0, 56
-	add	x4, x22, :lo12:.LANCHOR0
-	cbz	w2, .L2738
-	ldr	w2, [x4,2088]
+	add	x4, x20, :lo12:.LANCHOR0
+	cbz	w2, .L2858
+	ldr	w2, [x4,2080]
 	umull	x0, w2, w0
-	ldr	x2, [x4,2096]
+	ldr	x2, [x4,2088]
 	add	x0, x2, x0
-	b	.L2779
-.L2738:
-	ldr	w2, [x4,2088]
+	b	.L2902
+.L2858:
+	ldr	w2, [x4,2080]
 	umull	x0, w2, w0
-	ldr	x2, [x4,2096]
+	ldr	x2, [x4,2088]
 	add	x0, x2, x0
 	ldr	x0, [x0,8]
-	b	.L2777
-.L2736:
-	ldr	w0, [x29,212]
+	b	.L2900
+.L2856:
+	ldr	w0, [x29,228]
 	cmn	w0, #1
-	beq	.L2740
-	str	w0, [x29,220]
+	beq	.L2860
+	str	w0, [x29,236]
 	mov	w1, 56
-	ldr	w0, [x2,2088]
-	str	w27, [x29,240]
+	ldr	w0, [x2,2080]
+	str	w26, [x29,256]
 	umull	x0, w0, w1
-	ldr	x1, [x2,2096]
+	ldr	x1, [x2,2088]
 	mov	w2, 0
 	add	x0, x1, x0
 	ldr	x1, [x0,8]
 	ldr	x0, [x0,16]
-	str	x1, [x29,224]
+	str	x1, [x29,240]
 	mov	w1, 1
-	str	x0, [x29,232]
-	add	x0, x29, 216
+	str	x0, [x29,248]
+	add	x0, x29, 232
 	bl	FlashReadPages
-	ldr	w0, [x29,216]
+	ldr	w0, [x29,232]
 	cmn	w0, #1
-	bne	.L2741
-	ldr	w0, [x20,424]
+	bne	.L2861
+	ldr	w0, [x23,416]
 	add	w0, w0, 1
-	str	w0, [x20,424]
-	b	.L2743
-.L2741:
+	str	w0, [x23,416]
+	b	.L2863
+.L2861:
 	ldr	w0, [x28,8]
-	cmp	w0, w27
-	beq	.L2743
-	ldr	w0, [x20,424]
-	mov	w2, w27
+	cmp	w0, w26
+	beq	.L2863
+	ldr	w0, [x23,416]
+	mov	w2, w26
 	add	w0, w0, 1
-	str	w0, [x20,424]
+	str	w0, [x23,416]
 	ldr	x0, [x29,112]
 	ldr	w1, [x28,8]
 	bl	printk
-	b	.L2743
-.L2740:
-	ldr	w0, [x2,2088]
+	b	.L2863
+.L2860:
+	ldr	w0, [x2,2080]
 	mov	w1, 56
 	umull	x0, w0, w1
-	ldr	x1, [x2,2096]
-	ldrh	w2, [x2,2036]
+	ldr	x1, [x2,2088]
+	ldrh	w2, [x2,2028]
 	add	x0, x1, x0
 	mov	w1, 0
 	ldr	x0, [x0,8]
 	bl	ftl_memset
-.L2743:
-	ldr	w1, [x29,184]
+.L2863:
+	ldr	w1, [x29,200]
 	mov	w0, 56
 	lsl	w2, w1, 9
-	ldr	w1, [x29,176]
-	cbz	w1, .L2744
-	add	x1, x22, :lo12:.LANCHOR0
-	ldr	w4, [x1,2088]
+	ldr	w1, [x29,192]
+	cbz	w1, .L2864
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w4, [x1,2080]
 	umull	x0, w4, w0
-	ldr	x4, [x1,2096]
+	ldr	x4, [x1,2088]
 	add	x4, x4, x0
 	ldr	x0, [x29,160]
 	ubfiz	x0, x0, 9, 23
 	ldr	x1, [x4,8]
 	add	x0, x1, x0
-	mov	x1, x25
-	b	.L2778
-.L2744:
-	add	x5, x22, :lo12:.LANCHOR0
-	ldr	w4, [x5,2088]
-	ldr	x1, [x5,2096]
+	mov	x1, x24
+	b	.L2901
+.L2864:
+	add	x5, x20, :lo12:.LANCHOR0
+	ldr	w4, [x5,2080]
+	ldr	x1, [x5,2088]
 	umull	x0, w4, w0
 	add	x0, x1, x0
-	ldrh	w1, [x5,2032]
-	mul	w1, w27, w1
+	ldrh	w1, [x5,2024]
+	mul	w1, w26, w1
 	ldr	x0, [x0,8]
-	sub	w1, w1, w23
+	sub	w1, w1, w21
 	ubfiz	x1, x1, 9, 23
-	add	x1, x25, x1
-	b	.L2778
-.L2732:
-	ldr	w0, [x29,204]
-	ldrh	w1, [x4,2032]
-	ldr	w2, [x4,2088]
-	cbz	w0, .L2745
-	mul	w1, w27, w1
+	add	x1, x24, x1
+	b	.L2901
+.L2852:
+	ldr	w0, [x29,220]
+	ldrh	w1, [x4,2024]
+	ldr	w2, [x4,2080]
+	cbz	w0, .L2865
+	mul	w1, w26, w1
 	umull	x0, w2, w5
-	sub	w1, w1, w23
-	ldr	x2, [x4,2096]
+	sub	w1, w1, w21
+	ldr	x2, [x4,2088]
 	ubfiz	x1, x1, 9, 23
 	add	x0, x2, x0
-	add	x1, x25, x1
-.L2779:
+	add	x1, x24, x1
+.L2902:
 	str	x1, [x0,8]
-	b	.L2739
-.L2745:
+	b	.L2859
+.L2865:
 	umull	x0, w2, w5
-	ldr	x2, [x4,2096]
-	mul	w1, w27, w1
+	ldr	x2, [x4,2088]
+	mul	w1, w26, w1
 	add	x0, x2, x0
-	sub	w1, w1, w23
+	sub	w1, w1, w21
 	ubfiz	x1, x1, 9, 23
 	ldr	x0, [x0,8]
-	add	x1, x25, x1
-.L2777:
-	ldrh	w2, [x4,2036]
-.L2778:
+	add	x1, x24, x1
+.L2900:
+	ldrh	w2, [x4,2028]
+.L2901:
 	bl	ftl_memcpy
-.L2739:
+.L2859:
 	ldr	x1, [x29,128]
 	mov	w0, -3947
 	ldr	x2, [x29,136]
 	strh	w0, [x1,x2]
-	add	x1, x22, :lo12:.LANCHOR0
-	str	w27, [x28,8]
-	ldr	w0, [x20,200]
+	add	x1, x20, :lo12:.LANCHOR0
+	str	w26, [x28,8]
+	ldr	w0, [x23,192]
 	str	w0, [x28,4]
 	add	w0, w0, 1
 	cmn	w0, #1
 	csel	w0, w0, wzr, ne
-	str	w0, [x20,200]
-	ldr	w0, [x29,212]
+	str	w0, [x23,192]
+	ldr	w0, [x29,228]
 	str	w0, [x28,12]
 	ldrh	w0, [x19]
 	strh	w0, [x28,2]
-	ldr	w0, [x1,2088]
+	ldr	w0, [x1,2080]
 	add	w0, w0, 1
-	str	w0, [x1,2088]
-	ldr	x0, [x29,192]
+	str	w0, [x1,2080]
+	ldr	x0, [x29,208]
 	add	x0, x0, 1
-	str	x0, [x29,192]
-	b	.L2729
-.L2781:
-	str	w27, [x29,200]
+	str	x0, [x29,208]
+	b	.L2849
+.L2904:
+	str	w26, [x29,216]
 	mov	x0, x2
-	b	.L2730
-.L2758:
-	str	w27, [x29,200]
-.L2730:
-	sub	w21, w21, w0
-	ldr	w0, [x29,204]
-	cbnz	w0, .L2749
-	add	x0, x22, :lo12:.LANCHOR0
-	ldr	w1, [x0,2088]
-	ldr	w0, [x20,2040]
+	b	.L2850
+.L2880:
+	str	w26, [x29,216]
+.L2850:
+	sub	w27, w27, w0
+	ldr	w0, [x29,220]
+	cbnz	w0, .L2869
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x0,2080]
+	ldr	w0, [x23,2032]
 	cmp	w1, w0
-	bcs	.L2749
+	bcs	.L2869
 	ldrh	w0, [x19,4]
-	cbz	w0, .L2749
-.L2751:
-	str	wzr, [x29,204]
-	b	.L2722
-.L2749:
+	cbz	w0, .L2869
+.L2871:
+	str	wzr, [x29,220]
+	b	.L2842
+.L2869:
 	bl	FtlCacheWriteBack
-	add	x0, x22, :lo12:.LANCHOR0
-	cmp	w21, 3
-	str	wzr, [x0,2088]
-	bls	.L2751
-	b	.L2722
-.L2780:
-	ldr	w1, [x29,180]
-	mov	w0, w21
-	sub	w1, w1, w26
+	add	x0, x20, :lo12:.LANCHOR0
+	cmp	w27, 3
+	str	wzr, [x0,2080]
+	bls	.L2871
+	b	.L2842
+.L2903:
+	ldr	w1, [x29,196]
+	mov	w0, w27
+	sub	w1, w1, w25
 	bl	rk_ftl_garbage_collect
-	mov	w0, w21
-.L2716:
+	ldr	x0, [x29,152]
+	add	x19, x0, :lo12:.LANCHOR2
+	ldrh	w0, [x19,-16]
+	cmp	w0, 15
+	bhi	.L2873
+	mov	w21, 65535
+	mov	w20, 128
+.L2899:
+	ldrh	w0, [x19,288]
+	cmp	w0, w21
+	bne	.L2874
+	ldrh	w0, [x19,944]
+	cmp	w0, w21
+	bne	.L2874
+	mov	w0, 0
+	bl	List_get_gc_head_node
+	bl	FtlGcRefreshBlock
+.L2874:
+	mov	w0, 1
+	strh	w20, [x19,858]
+	mov	w1, w0
+	strh	w20, [x19,856]
+	bl	rk_ftl_garbage_collect
+	mov	w0, 0
+	mov	w1, 1
+	bl	rk_ftl_garbage_collect
+	ldrh	w0, [x19,-16]
+	cmp	w0, 8
+	bls	.L2899
+	b	.L2873
+.L2836:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 272
+	ldp	x29, x30, [sp], 288
 	ret
 	.size	FtlWrite, .-FtlWrite
 	.align	2
-	.type	FlashReadFacBbtData.part.14, %function
-FlashReadFacBbtData.part.14:
+	.type	FlashReadFacBbtData.part.13, %function
+FlashReadFacBbtData.part.13:
 	stp	x29, x30, [sp, -32]!
 	mov	w3, 0
-	adrp	x4, .LANCHOR0
+	adrp	x4, .LANCHOR4
 	add	x29, sp, 0
 	str	x19, [sp,16]
-	mov	x19, x0
-	cbnz	w1, .L2785
-	adrp	x1, .LANCHOR4
 	mov	w7, 1
-.L2788:
-	add	x0, x1, :lo12:.LANCHOR4
-	ldr	w0, [x0,68]
-	cmp	w3, w0
-	bcs	.L2785
-	add	x6, x4, :lo12:.LANCHOR0
+	mov	x19, x0
+	cbnz	w1, .L2908
+.L2910:
+	add	x0, x4, :lo12:.LANCHOR4
+	ldr	w1, [x0,68]
+	cmp	w3, w1
+	bcs	.L2908
 	ubfx	x5, x3, 5, 11
+	ldr	x0, [x0,32]
 	lsl	x5, x5, 2
-	ldr	x0, [x6,1856]
 	lsl	w6, w7, w3
 	add	w3, w3, 1
-	ldr	w8, [x0,x5]
+	ldr	w1, [x0,x5]
 	uxth	w3, w3
-	orr	w6, w8, w6
+	orr	w6, w1, w6
 	str	w6, [x0,x5]
-	b	.L2788
-.L2785:
-	add	x4, x4, :lo12:.LANCHOR0
+	b	.L2910
+.L2908:
+	add	x4, x4, :lo12:.LANCHOR4
 	mov	x0, x19
-	ldr	x1, [x4,1856]
+	ldr	x1, [x4,32]
 	bl	ftl_memcpy
 	mov	w2, 4
-	adrp	x0, .LC120
+	adrp	x0, .LC127
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC120
+	add	x0, x0, :lo12:.LC127
 	mov	w3, w2
 	bl	rknand_print_hex
 	ldr	x19, [sp,16]
 	mov	w0, 0
 	ldp	x29, x30, [sp], 32
 	ret
-	.size	FlashReadFacBbtData.part.14, .-FlashReadFacBbtData.part.14
+	.size	FlashReadFacBbtData.part.13, .-FlashReadFacBbtData.part.13
 	.align	2
 	.global	FlashReadFacBbtData
 	.type	FlashReadFacBbtData, %function
 FlashReadFacBbtData:
 	stp	x29, x30, [sp, -144]!
 	adrp	x4, .LANCHOR0
-	add	x4, x4, :lo12:.LANCHOR0
 	add	x29, sp, 0
+	add	x4, x4, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
@@ -18241,23 +18688,23 @@ FlashReadFacBbtData:
 	ldrh	w0, [x4,182]
 	mov	w25, w2
 	ldrh	w3, [x4,180]
+	adrp	x4, .LANCHOR4
+	mov	x21, x4
 	mov	w26, 61664
 	mul	w3, w3, w0
-	ldr	x0, [x4,1856]
-	adrp	x4, .LANCHOR4
-	str	x0, [x29,96]
 	add	x0, x4, :lo12:.LANCHOR4
 	uxth	w3, w3
-	mov	x21, x4
 	sub	w20, w3, #1
-	sub	w19, w3, #16
+	ldr	x1, [x0,32]
+	mul	w24, w23, w3
 	ldr	x0, [x0,88]
-	mul	w24, w1, w3
-	str	x0, [x29,104]
 	uxth	w20, w20
-.L2790:
+	str	x1, [x29,96]
+	sub	w19, w3, #16
+	str	x0, [x29,104]
+.L2913:
 	cmp	w20, w19
-	ble	.L2798
+	ble	.L2921
 	add	w0, w20, w24
 	mov	w1, 1
 	lsl	w0, w0, 10
@@ -18267,26 +18714,26 @@ FlashReadFacBbtData:
 	bl	FlashReadPages
 	ldr	w0, [x29,88]
 	cmn	w0, #1
-	beq	.L2791
+	beq	.L2914
 	add	x0, x21, :lo12:.LANCHOR4
 	ldr	x0, [x0,88]
 	ldrh	w0, [x0]
 	cmp	w0, w26
-	bne	.L2791
+	bne	.L2914
 	mov	w0, w22
-	cbz	x22, .L2792
+	cbz	x22, .L2915
 	mov	x0, x22
 	mov	w1, w23
 	mov	w2, w25
-	bl	FlashReadFacBbtData.part.14
-	b	.L2792
-.L2791:
+	bl	FlashReadFacBbtData.part.13
+	b	.L2915
+.L2914:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L2790
-.L2798:
+	b	.L2913
+.L2921:
 	mov	w0, -1
-.L2792:
+.L2915:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -18316,37 +18763,37 @@ FlashGetBadBlockList:
 	lsr	w2, w2, 3
 	bl	FlashReadFacBbtData
 	cmn	w0, #1
-	bne	.L2800
-.L2804:
+	bne	.L2923
+.L2927:
 	mov	w1, 0
-	b	.L2801
-.L2800:
+	b	.L2924
+.L2923:
 	mov	w2, 0
 	lsr	w0, w19, 4
 	mov	w1, w2
 	sub	w19, w19, #1
 	mov	w5, 1
-.L2802:
+.L2925:
 	cmp	w2, w19
-	bge	.L2801
+	bge	.L2924
 	add	x3, x20, :lo12:.LANCHOR4
 	ubfx	x4, x2, 5, 11
 	ldr	x6, [x3,80]
 	lsl	w3, w5, w2
 	ldr	w4, [x6,x4,lsl 2]
 	tst	w3, w4
-	beq	.L2803
+	beq	.L2926
 	add	w3, w1, 1
 	ubfiz	x1, x1, 1, 16
 	strh	w2, [x21,x1]
 	uxth	w1, w3
-.L2803:
+.L2926:
 	cmp	w1, w0
-	bcs	.L2804
+	bcs	.L2927
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L2802
-.L2801:
+	b	.L2925
+.L2924:
 	ubfiz	x1, x1, 1, 16
 	mov	w0, -1
 	ldp	x19, x20, [sp,16]
@@ -18368,7 +18815,7 @@ FtlMakeBbt:
 	stp	x21, x22, [sp,32]
 	add	x20, x20, :lo12:.LANCHOR4
 	add	x22, x19, :lo12:.LANCHOR0
-	add	x22, x22, 2112
+	add	x22, x22, 2104
 	add	x20, x20, 136
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
@@ -18378,23 +18825,23 @@ FtlMakeBbt:
 	stp	x27, x28, [sp,80]
 	bl	FtlBbtMemInit
 	bl	FtlLoadFactoryBbt
-.L2810:
+.L2933:
 	add	x21, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x21,1974]
+	ldrh	w0, [x21,1966]
 	cmp	w23, w0
-	bcs	.L2828
+	bcs	.L2951
 	adrp	x1, .LANCHOR2
 	ldrh	w27, [x24,12]
 	add	x2, x1, :lo12:.LANCHOR2
 	str	x1, [x29,104]
-	ldr	x0, [x2,-64]
-	ldr	x26, [x2,2112]
+	ldr	x0, [x2,-72]
+	ldr	x26, [x2,2104]
 	mov	w2, 65535
 	str	x0, [x20,8]
 	cmp	w27, w2
 	str	x26, [x20,16]
-	beq	.L2811
-	ldrh	w0, [x21,2022]
+	beq	.L2934
+	ldrh	w0, [x21,2014]
 	mov	w1, 1
 	mov	w2, w1
 	madd	w27, w23, w0, w27
@@ -18402,50 +18849,50 @@ FtlMakeBbt:
 	str	w0, [x20,4]
 	mov	x0, x20
 	bl	FlashReadPages
-	ldrh	w2, [x21,2022]
+	ldrh	w2, [x21,2014]
 	ldr	x0, [x22,32]
 	add	w2, w2, 7
 	ldr	x1, [x20,8]
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-	b	.L2812
-.L2811:
+	b	.L2935
+.L2934:
 	mov	w1, w23
 	mov	w28, -3872
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20,8]
 	ldr	x1, [x22,32]
 	bl	FtlBbt2Bitmap
-	ldrh	w21, [x21,2022]
+	ldrh	w21, [x21,2014]
 	sub	w21, w21, #1
 	uxth	w21, w21
-.L2813:
+.L2936:
 	add	x27, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x27,2022]
+	ldrh	w0, [x27,2014]
 	madd	w0, w23, w0, w21
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	bne	.L2829
+	bne	.L2952
 	sub	w21, w21, #1
 	uxth	w21, w21
-	b	.L2813
-.L2829:
+	b	.L2936
+.L2952:
 	ldr	x0, [x29,104]
 	mov	w1, 0
 	mov	w2, 16
 	strh	w21, [x24,12]
 	add	x3, x0, :lo12:.LANCHOR2
 	str	x3, [x29,96]
-	ldr	x0, [x3,2112]
+	ldr	x0, [x3,2104]
 	bl	ftl_memset
 	strh	w28, [x26]
 	str	wzr, [x26,4]
 	ldr	x3, [x29,96]
 	ldrh	w0, [x24,12]
 	strh	w0, [x26,2]
-	ldrh	w0, [x27,2022]
+	ldrh	w0, [x27,2014]
 	ldrh	w1, [x24,12]
-	ldrh	w2, [x3,2232]
+	ldrh	w2, [x3,2224]
 	madd	w27, w23, w0, w1
 	ldr	x1, [x22,32]
 	lsl	w2, w2, 2
@@ -18464,93 +18911,93 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	bne	.L2812
+	bne	.L2935
 	mov	w0, w27
 	bl	FtlBbmMapBadBlock
-	b	.L2813
-.L2812:
+	b	.L2936
+.L2935:
 	mov	w0, w27
 	add	w23, w23, 1
 	add	x22, x22, 8
 	add	x24, x24, 2
 	bl	FtlBbmMapBadBlock
-	b	.L2810
-.L2828:
+	b	.L2933
+.L2951:
 	mov	w20, 0
-.L2817:
+.L2940:
 	add	x21, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x21,2040]
+	ldrh	w0, [x21,2032]
 	cmp	w0, w20
-	bls	.L2830
+	bls	.L2953
 	mov	w0, w20
 	add	w20, w20, 1
 	bl	FtlBbmMapBadBlock
 	uxth	w20, w20
-	b	.L2817
-.L2830:
-	ldrh	w20, [x21,2124]
+	b	.L2940
+.L2953:
+	ldrh	w20, [x21,2116]
 	mov	w23, 65535
 	sub	w20, w20, #1
 	uxth	w20, w20
-.L2819:
-	add	x22, x21, 2112
+.L2942:
+	add	x22, x21, 2104
 	ldrh	w0, [x22,12]
 	sub	w0, w0, #48
 	cmp	w20, w0
-	ble	.L2823
+	ble	.L2946
 	mov	w0, w20
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L2820
+	beq	.L2943
 	mov	w0, w20
 	bl	FlashTestBlk
-	cbz	w0, .L2821
+	cbz	w0, .L2944
 	mov	w0, w20
 	bl	FtlBbmMapBadBlock
-	b	.L2820
-.L2821:
-	ldrh	w0, [x21,2112]
+	b	.L2943
+.L2944:
+	ldrh	w0, [x21,2104]
 	cmp	w0, w23
-	bne	.L2822
-	strh	w20, [x21,2112]
-	b	.L2820
-.L2822:
+	bne	.L2945
+	strh	w20, [x21,2104]
+	b	.L2943
+.L2945:
 	strh	w20, [x22,4]
-	b	.L2823
-.L2820:
+	b	.L2946
+.L2943:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L2819
-.L2823:
+	b	.L2942
+.L2946:
 	adrp	x0, .LANCHOR2
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR2
-	ldrh	w1, [x19,2112]
-	ldr	x2, [x0,-88]
-	str	wzr, [x19,2120]
+	ldrh	w1, [x19,2104]
+	ldr	x2, [x0,-96]
+	str	wzr, [x19,2112]
 	lsl	w1, w1, 10
-	strh	wzr, [x19,2114]
+	strh	wzr, [x19,2106]
 	str	w1, [x2,4]
 	mov	w2, 2
-	ldrh	w1, [x19,2116]
-	ldr	x0, [x0,-88]
+	ldrh	w1, [x19,2108]
+	ldr	x0, [x0,-96]
 	lsl	w1, w1, 10
 	str	w1, [x0,60]
 	mov	w1, 1
 	bl	FlashEraseBlocks
-	ldrh	w0, [x19,2112]
+	ldrh	w0, [x19,2104]
 	bl	FtlBbmMapBadBlock
-	ldrh	w0, [x19,2116]
+	ldrh	w0, [x19,2108]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	strh	wzr, [x19,2114]
-	ldr	w0, [x19,2120]
-	ldrh	w1, [x19,2116]
+	strh	wzr, [x19,2106]
+	ldr	w0, [x19,2112]
+	ldrh	w1, [x19,2108]
 	add	w0, w0, 1
-	str	w0, [x19,2120]
-	ldrh	w0, [x19,2112]
-	strh	w0, [x19,2116]
-	strh	w1, [x19,2112]
+	str	w0, [x19,2112]
+	ldrh	w0, [x19,2104]
+	strh	w0, [x19,2108]
+	strh	w1, [x19,2104]
 	bl	FtlBbmTblFlush
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -18567,253 +19014,264 @@ FtlMakeBbt:
 FtlLowFormat:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR2
-	add	x0, x21, :lo12:.LANCHOR2
 	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
+	adrp	x19, .LANCHOR2
 	adrp	x20, .LANCHOR0
-	str	wzr, [x0,196]
-	str	wzr, [x0,200]
+	add	x0, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	str	wzr, [x0,188]
+	str	wzr, [x0,192]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,1956]
+	ldrh	w0, [x0,1948]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L2832
+	cbz	w0, .L2955
 	bl	FtlMakeBbt
-.L2832:
+.L2955:
 	mov	w0, 0
-.L2833:
+.L2956:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,2032]
+	ldrh	w2, [x1,2024]
 	cmp	w0, w2, lsl 7
-	bge	.L2856
-	add	x3, x21, :lo12:.LANCHOR2
+	bge	.L2983
+	add	x3, x19, :lo12:.LANCHOR2
 	ubfiz	x2, x0, 2, 16
 	mvn	w1, w0
-	ldr	x4, [x3,2096]
+	ldr	x4, [x3,2088]
 	orr	w1, w0, w1, lsl 16
 	add	w0, w0, 1
 	str	w1, [x4,x2]
 	mov	w1, 23752
 	movk	w1, 0xa0f, lsl 16
 	uxth	w0, w0
-	ldr	x3, [x3,2104]
+	ldr	x3, [x3,2096]
 	str	w1, [x3,x2]
-	b	.L2833
-.L2856:
-	ldrh	w22, [x1,1960]
-	mov	w19, 0
-.L2835:
+	b	.L2956
+.L2983:
+	ldrh	w22, [x1,1952]
+	mov	w21, 0
+.L2958:
 	add	x23, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x23,1962]
+	ldrh	w0, [x23,1954]
 	cmp	w0, w22
-	bls	.L2857
+	bls	.L2984
 	mov	w0, w22
 	mov	w1, 1
 	add	w22, w22, 1
 	bl	FtlLowFormatEraseBlock
-	add	w0, w19, w0
+	add	w0, w21, w0
 	uxth	w22, w22
-	uxth	w19, w0
-	b	.L2835
-.L2857:
-	ldrh	w0, [x23,1952]
-	sub	w1, w19, #3
+	uxth	w21, w0
+	b	.L2958
+.L2984:
+	ldrh	w0, [x23,1944]
+	sub	w1, w21, #3
 	cmp	w1, w0, lsl 1
-	bge	.L2837
-.L2841:
-	mov	w19, 0
-	mov	w22, w19
-	b	.L2838
-.L2837:
-	udiv	w19, w19, w0
-	ldr	w0, [x23,2060]
-	add	w0, w19, w0
+	bge	.L2960
+.L2964:
+	mov	w21, 0
+	mov	w22, w21
+	b	.L2961
+.L2960:
+	udiv	w21, w21, w0
+	ldr	w0, [x23,2052]
+	add	w0, w21, w0
 	bl	FtlSysBlkNumInit
-	ldrh	w0, [x23,1956]
+	ldrh	w0, [x23,1948]
 	bl	FtlFreeSysBlkQueueInit
-	ldrh	w19, [x23,1960]
-.L2839:
+	ldrh	w21, [x23,1952]
+.L2962:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,1962]
-	cmp	w0, w19
-	bls	.L2841
-	mov	w0, w19
+	ldrh	w0, [x0,1954]
+	cmp	w0, w21
+	bls	.L2964
+	mov	w0, w21
 	mov	w1, 1
-	add	w19, w19, 1
+	add	w21, w21, 1
 	bl	FtlLowFormatEraseBlock
-	uxth	w19, w19
-	b	.L2839
-.L2838:
-	add	x2, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x2,1960]
-	cmp	w0, w22
-	bls	.L2858
+	uxth	w21, w21
+	b	.L2962
+.L2961:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x0,1952]
+	cmp	w1, w22
+	bls	.L2985
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
 	bl	FtlLowFormatEraseBlock
-	add	w0, w19, w0
+	add	w0, w21, w0
 	uxth	w22, w22
-	uxth	w19, w0
-	b	.L2838
-.L2858:
-	ldrh	w3, [x2,1952]
-	add	x6, x21, :lo12:.LANCHOR2
-	ldr	w1, [x2,1964]
-	ldrh	w0, [x2,1962]
-	str	w0, [x2,2108]
-	udiv	w4, w1, w3
-	str	w4, [x2,2104]
-	ubfx	x5, x4, 5, 16
-	add	w0, w5, 36
-	strh	w0, [x6,272]
-	mov	w0, 24
-	mul	w0, w3, w0
-	cmp	w19, w0
-	ble	.L2843
-	sub	w1, w1, w19
-	udiv	w1, w1, w3
-	str	w1, [x2,2104]
+	uxth	w21, w0
+	b	.L2961
+.L2985:
+	ldrh	w1, [x0,1954]
+	add	x6, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x0,1944]
+	str	w1, [x0,2100]
+	ldr	w1, [x0,1956]
+	udiv	w3, w1, w2
+	str	w3, [x0,2096]
+	ubfx	x5, x3, 5, 16
+	add	w4, w5, 36
+	strh	w4, [x6,264]
+	mov	w4, 24
+	mul	w4, w2, w4
+	cmp	w21, w4
+	ble	.L2966
+	sub	w1, w1, w21
+	udiv	w1, w1, w2
+	str	w1, [x0,2096]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
-	strh	w1, [x6,272]
-.L2843:
-	add	x2, x21, :lo12:.LANCHOR2
-	ldr	w0, [x2,160]
+	strh	w1, [x6,264]
+.L2966:
+	add	x4, x19, :lo12:.LANCHOR2
+	ldr	w0, [x4,152]
 	cmp	w0, 1
-	bne	.L2844
-	ldrh	w1, [x2,272]
-	udiv	w0, w19, w3
+	bne	.L2967
+	ldrh	w1, [x4,264]
+	udiv	w0, w21, w2
 	add	w0, w1, w0
 	add	w0, w1, w0, asr 2
-	strh	w0, [x2,272]
-.L2844:
+	strh	w0, [x4,264]
+.L2967:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2968
+	add	x1, x19, :lo12:.LANCHOR2
+	udiv	w0, w21, w2
+	ldrh	w4, [x1,264]
+	add	w0, w4, w0
+	add	w0, w4, w0, asr 2
+	strh	w0, [x1,264]
+.L2968:
 	add	x6, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x6,2018]
-	cbz	w1, .L2846
-	add	x0, x21, :lo12:.LANCHOR2
-	ldrh	w2, [x0,272]
-	add	w2, w2, w1, lsr 1
-	strh	w2, [x0,272]
-	mul	w2, w1, w3
-	cmp	w2, w19
-	ble	.L2846
+	ldrh	w1, [x6,2010]
+	cbz	w1, .L2970
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w4, [x0,264]
+	add	w4, w4, w1, lsr 1
+	strh	w4, [x0,264]
+	mul	w4, w1, w2
+	cmp	w4, w21
+	ble	.L2970
 	add	w1, w1, 32
-	str	w4, [x6,2104]
-	add	w1, w5, w1
-	strh	w1, [x0,272]
-.L2846:
-	add	x19, x21, :lo12:.LANCHOR2
+	str	w3, [x6,2096]
+	add	w1, w5, w1
+	strh	w1, [x0,264]
+.L2970:
+	add	x19, x19, :lo12:.LANCHOR2
 	add	x22, x20, :lo12:.LANCHOR0
 	adrp	x24, .LANCHOR4
+	mov	x21, x19
 	mov	w23, -1
-	ldr	w1, [x22,2104]
-	ldrh	w0, [x19,272]
+	ldr	w1, [x22,2096]
+	ldrh	w0, [x19,264]
 	sub	w0, w1, w0
 	add	x1, x24, :lo12:.LANCHOR4
-	mul	w0, w0, w3
+	mul	w0, w0, w2
 	str	w0, [x1,192]
-	ldrh	w1, [x22,2026]
+	ldrh	w1, [x22,2018]
 	mul	w0, w0, w1
-	ldrh	w1, [x22,2032]
-	str	w0, [x22,2104]
+	ldrh	w1, [x22,2024]
+	str	w0, [x22,2096]
 	mul	w0, w0, w1
-	str	w0, [x22,2068]
+	str	w0, [x22,2060]
 	bl	FtlBbmTblFlush
-	ldrh	w2, [x22,1962]
+	ldrh	w2, [x22,1954]
 	mov	w1, 0
-	ldr	x0, [x19,-40]
+	ldr	x0, [x19,-48]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	strh	wzr, [x21,#:lo12:.LANCHOR2]
+	str	wzr, [x19,148]
+	ldrh	w2, [x22,1952]
 	mov	w0, 1
-	ldrh	w2, [x22,1960]
-	strb	w0, [x19,8]
+	strb	w0, [x21],-8
 	mov	w1, 255
 	ldr	x0, [x20,#:lo12:.LANCHOR0]
 	lsr	w2, w2, 3
-	mov	x21, x24
-	str	wzr, [x19,156]
-	strh	w23, [x19,296]
-	strh	wzr, [x19,298]
-	strb	wzr, [x19,302]
-	strb	wzr, [x19,304]
-	strh	wzr, [x19,2]
-	strb	wzr, [x19,6]
+	mov	x22, x24
+	strh	w23, [x19,288]
+	strh	wzr, [x19,290]
+	strb	wzr, [x19,294]
+	strb	wzr, [x19,296]
+	strh	wzr, [x19,-6]
+	strb	wzr, [x19,-2]
+	strh	wzr, [x19,-8]
 	bl	ftl_memset
-.L2848:
-	mov	x0, x19
+.L2972:
+	mov	x0, x21
 	bl	make_superblock
-	ldrb	w0, [x19,7]
-	cbnz	w0, .L2849
-	ldrh	w1, [x19]
-	ldr	x0, [x19,-40]
+	ldrb	w0, [x21,7]
+	cbnz	w0, .L2973
+	ldrh	w1, [x21]
+	ldr	x0, [x19,-48]
 	strh	w23, [x0,x1,lsl 1]
-	ldrh	w0, [x19]
+	ldrh	w0, [x21]
 	add	w0, w0, 1
-	strh	w0, [x19]
-	b	.L2848
-.L2849:
-	ldr	w0, [x19,196]
-	add	x20, x19, 48
-	str	w0, [x19,12]
-	mov	w22, -1
+	strh	w0, [x21]
+	b	.L2972
+.L2973:
+	ldr	w0, [x19,188]
+	add	x20, x19, 40
+	str	w0, [x21,12]
 	add	w0, w0, 1
-	ldrh	w1, [x19]
-	str	w0, [x19,196]
-	ldr	x0, [x19,-40]
-	ldrh	w2, [x19,4]
+	ldrh	w1, [x21]
+	str	w0, [x19,188]
+	ldr	x0, [x19,-48]
+	ldrh	w2, [x21,4]
 	strh	w2, [x0,x1,lsl 1]
 	strh	wzr, [x20,2]
-	ldrh	w0, [x19]
+	ldrh	w0, [x21]
+	mov	w21, -1
 	strb	wzr, [x20,6]
 	add	w0, w0, 1
-	strh	w0, [x19,48]
+	strh	w0, [x19,40]
 	mov	w0, 1
 	strb	w0, [x20,8]
-.L2850:
+.L2974:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L2851
+	cbnz	w0, .L2975
 	ldrh	w1, [x20]
-	ldr	x0, [x19,-40]
-	strh	w22, [x0,x1,lsl 1]
+	ldr	x0, [x19,-48]
+	strh	w21, [x0,x1,lsl 1]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L2850
-.L2851:
-	ldr	w0, [x19,196]
-	add	x21, x21, :lo12:.LANCHOR4
+	b	.L2974
+.L2975:
+	ldr	w0, [x19,188]
+	add	x22, x22, :lo12:.LANCHOR4
 	str	w0, [x20,12]
 	add	w0, w0, 1
 	ldrh	w1, [x20]
-	str	w0, [x19,196]
-	ldr	x0, [x19,-40]
+	str	w0, [x19,188]
+	ldr	x0, [x19,-48]
 	ldrh	w2, [x20,4]
 	mov	w20, -1
 	strh	w2, [x0,x1,lsl 1]
-	strh	w20, [x19,96]
+	strh	w20, [x19,88]
 	bl	FtlFreeSysBlkQueueOut
-	strh	w0, [x19,280]
-	ldr	w0, [x21,192]
-	strh	w0, [x19,286]
-	ldr	w0, [x19,196]
-	str	w0, [x19,288]
+	strh	w0, [x19,272]
+	ldr	w0, [x22,192]
+	strh	w0, [x19,278]
+	ldr	w0, [x19,188]
+	str	w0, [x19,280]
 	add	w0, w0, 1
-	strh	wzr, [x19,282]
-	strh	w20, [x19,284]
-	str	w0, [x19,196]
+	strh	wzr, [x19,274]
+	strh	w20, [x19,276]
+	str	w0, [x19,188]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L2852
-	adrp	x0, .LANCHOR1+532
+	cbnz	w0, .L2976
+	adrp	x0, .LANCHOR1+504
 	mov	w1, 1
-	str	w1, [x0,#:lo12:.LANCHOR1+532]
-.L2852:
+	str	w1, [x0,#:lo12:.LANCHOR1+504]
+.L2976:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -18827,21 +19285,28 @@ FtlLowFormat:
 FtlReInitForSDUpdata:
 	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
-	str	x19, [sp,16]
-	adrp	x19, .LANCHOR4
-	add	x0, x19, :lo12:.LANCHOR4
-	ldr	x0, [x0,32]
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2987
+.L2989:
+	mov	w0, 0
+	b	.L2988
+.L2987:
+	adrp	x20, .LANCHOR4
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x0, [x0,24]
 	bl	FlashInit
-	mov	w1, 0
-	cbnz	w0, .L2860
+	cbnz	w0, .L2989
 	bl	FlashLoadFactorBbt
-	cbz	w0, .L2861
+	cbz	w0, .L2990
 	bl	FlashMakeFactorBbt
-.L2861:
-	add	x19, x19, :lo12:.LANCHOR4
-	ldr	x0, [x19,80]
+.L2990:
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	x0, [x20,80]
 	bl	FlashReadIdbDataRaw
-	cbz	w0, .L2862
+	cbz	w0, .L2991
 	mov	w1, 0
 	mov	w2, 16
 	add	x0, x29, 32
@@ -18850,78 +19315,71 @@ FtlReInitForSDUpdata:
 	ldr	w2, [x29,32]
 	mov	w1, w0
 	mov	w4, 1
-.L2864:
+.L2993:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 16
 	add	w0, w0, w3
-	bne	.L2864
+	bne	.L2993
 	cmp	w0, 6
-	bhi	.L2865
-	adrp	x0, .LANCHOR0+9
-	strb	w1, [x0,#:lo12:.LANCHOR0+9]
-	b	.L2866
-.L2865:
+	bhi	.L2994
+	add	x0, x19, :lo12:.LANCHOR0
+	b	.L3017
+.L2994:
 	mov	w1, 0
 	mov	w4, 1
-.L2868:
+.L2997:
 	lsl	w3, w4, w1
 	add	w1, w1, 1
 	tst	w3, w2
 	cset	w3, ne
 	cmp	w1, 24
 	add	w0, w0, w3
-	bne	.L2868
+	bne	.L2997
 	cmp	w0, 17
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	bls	.L2889
+	add	x0, x19, :lo12:.LANCHOR0
+	bls	.L3017
 	mov	w1, 36
-.L2889:
+.L3017:
 	strb	w1, [x0,9]
-.L2866:
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,9]
 	strh	w1, [x0,194]
-.L2862:
+.L2991:
 	adrp	x0, .LC72
 	adrp	x1, .LC73
 	add	x1, x1, :lo12:.LC73
 	add	x0, x0, :lo12:.LC72
-	adrp	x19, .LANCHOR0
-	bl	printk
 	add	x19, x19, :lo12:.LANCHOR0
+	bl	printk
 	add	x0, x19, 168
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
-	ldrh	w0, [x19,1956]
+	ldrh	w0, [x19,1948]
 	mov	w19, 1
 	bl	FtlFreeSysBlkQueueInit
-.L2870:
+.L2999:
 	bl	FtlLoadBbt
-	cbz	w0, .L2871
-.L2891:
+	cbz	w0, .L3000
+.L3019:
 	bl	FtlLowFormat
 	cmp	w19, 3
-	bhi	.L2892
+	bhi	.L3020
 	add	w19, w19, 1
-	b	.L2870
-.L2892:
-	mov	w1, -1
-	b	.L2860
-.L2871:
+	b	.L2999
+.L3020:
+	mov	w0, -1
+	b	.L2988
+.L3000:
 	bl	FtlSysBlkInit
-	cbnz	w0, .L2891
-	adrp	x1, .LANCHOR1+532
+	cbnz	w0, .L3019
+	adrp	x1, .LANCHOR1+504
 	mov	w2, 1
-	str	w2, [x1,#:lo12:.LANCHOR1+532]
-	mov	w1, w0
-.L2860:
-	mov	w0, w1
-	ldr	x19, [sp,16]
+	str	w2, [x1,#:lo12:.LANCHOR1+504]
+.L2988:
+	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
@@ -18929,17 +19387,17 @@ FtlReInitForSDUpdata:
 	.global	flash_boot_enter_slc_mode
 	.type	flash_boot_enter_slc_mode, %function
 flash_boot_enter_slc_mode:
-	adrp	x1, .LANCHOR0+1872
+	adrp	x1, .LANCHOR0+1868
 	uxtb	w0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	w2, [x1,#:lo12:.LANCHOR0+1872]
+	ldr	w2, [x1,#:lo12:.LANCHOR0+1868]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L2893
+	bne	.L3021
 	bl	flash_enter_slc_mode
-.L2893:
+.L3021:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_boot_enter_slc_mode, .-flash_boot_enter_slc_mode
@@ -18947,17 +19405,17 @@ flash_boot_enter_slc_mode:
 	.global	flash_boot_exit_slc_mode
 	.type	flash_boot_exit_slc_mode, %function
 flash_boot_exit_slc_mode:
-	adrp	x1, .LANCHOR0+1872
+	adrp	x1, .LANCHOR0+1868
 	uxtb	w0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	w2, [x1,#:lo12:.LANCHOR0+1872]
+	ldr	w2, [x1,#:lo12:.LANCHOR0+1868]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L2895
+	bne	.L3023
 	bl	flash_exit_slc_mode
-.L2895:
+.L3023:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
@@ -18980,8 +19438,8 @@ IdBlockReadData:
 	ldr	w3, [x19,12]
 	mov	w26, w1
 	ldrb	w21, [x0,9]
-	adrp	x0, .LC121
-	add	x0, x0, :lo12:.LC121
+	adrp	x0, .LC128
+	add	x0, x0, :lo12:.LC128
 	mov	w1, w22
 	mov	w2, w26
 	mov	w23, 0
@@ -18997,9 +19455,9 @@ IdBlockReadData:
 	sub	w5, w22, w21
 	mul	w3, w21, w28
 	ubfx	x3, x3, 2, 2
-.L2898:
+.L3026:
 	cmp	w23, w26
-	bcs	.L2904
+	bcs	.L3032
 	ldrb	w1, [x19,120]
 	sub	w24, w6, w3
 	add	w4, w23, w21
@@ -19007,17 +19465,17 @@ IdBlockReadData:
 	uxth	w24, w24
 	add	x0, x19, x4, uxth 1
 	ldrh	w0, [x0,196]
-	cbz	w1, .L2899
-	ldr	w2, [x19,1872]
+	cbz	w1, .L3027
+	ldr	w2, [x19,1868]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	uxth	w4, w4
 	cmp	w2, w1
 	csel	w0, w4, w0, eq
-.L2899:
+.L3027:
 	add	w3, w3, w5
 	add	x27, x7, :lo12:.LANCHOR4
-	ldrb	w4, [x19,1944]
+	ldrb	w4, [x19,1936]
 	madd	w25, w0, w28, w3
 	ldr	x0, [x19,744]
 	ldr	x2, [x27,80]
@@ -19054,13 +19512,13 @@ IdBlockReadData:
 	ldr	x6, [x29,96]
 	ldr	x5, [x29,104]
 	ldr	x7, [x29,112]
-	b	.L2898
-.L2904:
-	adrp	x0, .LC122
+	b	.L3026
+.L3032:
+	adrp	x0, .LC129
 	mov	w1, w22
 	mov	w2, w26
 	mov	w3, 0
-	add	x0, x0, :lo12:.LC122
+	add	x0, x0, :lo12:.LC129
 	bl	printk
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -19095,8 +19553,8 @@ IDBlockWriteData:
 	mov	w2, w27
 	mov	w23, 0
 	mul	w21, w0, w21
-	adrp	x0, .LC123
-	add	x0, x0, :lo12:.LC123
+	adrp	x0, .LC130
+	add	x0, x0, :lo12:.LC130
 	uxth	w21, w21
 	bl	printk
 	mov	w0, 0
@@ -19113,44 +19571,44 @@ IDBlockWriteData:
 	ldrb	w20, [x0,9]
 	msub	w26, w26, w21, w24
 	sub	w21, w24, w26
-.L2906:
+.L3034:
 	cmp	w23, w27
-	bcs	.L2920
+	bcs	.L3048
 	add	w4, w23, w26
 	lsr	w4, w4, 2
 	uxth	w0, w4
 	and	w4, w4, 65535
-	cbz	w0, .L2907
+	cbz	w0, .L3035
 	add	x1, x19, 196
 	add	w2, w4, 1
 	ldrh	w3, [x1,w2,sxtw 1]
 	ldrb	w1, [x19,120]
-	cbz	w1, .L2908
-	ldr	w2, [x19,1872]
+	cbz	w1, .L3036
+	ldr	w2, [x19,1868]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
-	bne	.L2908
+	bne	.L3036
 	add	w3, w0, 1
 	uxth	w3, w3
-.L2908:
+.L3036:
 	sub	w3, w3, #1
 	str	wzr, [x29,132]
 	lsl	w3, w3, 2
 	str	w3, [x29,128]
-.L2907:
+.L3035:
 	add	x1, x19, 196
 	ldrh	w25, [x1,w4,sxtw 1]
 	ldrb	w1, [x19,120]
-	cbz	w1, .L2909
-	ldr	w2, [x19,1872]
+	cbz	w1, .L3037
+	ldr	w2, [x19,1868]
 	mov	w1, 12336
 	movk	w1, 0x5638, lsl 16
 	cmp	w2, w1
 	csel	w25, w25, w0, ne
-.L2909:
+.L3037:
 	add	x0, x28, :lo12:.LANCHOR4
-	ldrb	w4, [x19,1944]
+	ldrb	w4, [x19,1936]
 	madd	w3, w25, w20, w21
 	ubfiz	x2, x23, 9, 16
 	str	x4, [x29,120]
@@ -19180,13 +19638,13 @@ IDBlockWriteData:
 	add	w2, w25, 1
 	mov	w0, 0
 	bl	FlashPageProgMsbFFData
-	b	.L2906
-.L2920:
-	adrp	x0, .LC124
+	b	.L3034
+.L3048:
+	adrp	x0, .LC131
 	mov	w1, w24
 	mov	w2, w27
 	mov	w3, 0
-	add	x0, x0, :lo12:.LC124
+	add	x0, x0, :lo12:.LC131
 	bl	printk
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -19213,82 +19671,79 @@ write_idblock:
 	stp	x21, x22, [sp,32]
 	stp	x27, x28, [sp,80]
 	mov	x21, x1
-	mov	w2, 6
-	ldr	x1, [x0,744]
 	ldr	w26, [x0,12]
-	mov	x0, 59392
-	movk	x0, 0x3, lsl 16
+	ldr	x1, [x0,744]
+	mov	w0, 59392
+	movk	w0, 0x3, lsl 16
 	ldrb	w22, [x1,9]
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	bl	kmalloc_order_trace
+	bl	ftl_malloc
 	str	x24, [x29,120]
 	mov	x20, x0
 	mov	w0, -1
-	cbz	x20, .L2931
+	cbz	x20, .L3059
 	add	w19, w25, 511
 	lsr	w19, w19, 9
 	cmp	w19, 255
-	bhi	.L2923
+	bhi	.L3051
 	ubfiz	x0, x19, 9, 23
 	mov	w2, 256
 	add	x0, x21, x0
 	mov	x1, x21
 	sub	w2, w2, w19
 	bl	memcpy
-.L2923:
+.L3051:
 	add	w19, w19, 128
 	mov	w0, 256
 	cmp	w19, 256
 	mov	x1, x23
 	csel	w19, w19, w0, ls
-	adrp	x0, .LC125
-	add	x0, x0, :lo12:.LC125
+	adrp	x0, .LC132
+	add	x0, x0, :lo12:.LC132
 	mov	w2, 4
 	mov	w3, 5
 	bl	rknand_print_hex
 	ldr	x0, [x29,120]
 	ldr	w1, [x21,512]
 	add	x27, x0, :lo12:.LANCHOR0
-	adrp	x0, .LC126
-	add	x0, x0, :lo12:.LC126
+	adrp	x0, .LC133
+	add	x0, x0, :lo12:.LC133
 	ldrb	w2, [x27,9]
 	bl	printk
 	ldrb	w0, [x27,9]
 	ldr	w1, [x21,512]
 	cmp	w1, w0
-	bls	.L2924
+	bls	.L3052
 	str	w0, [x21,512]
-.L2924:
-	adrp	x0, .LC127
+.L3052:
+	adrp	x0, .LC134
 	mov	w2, w25
 	mul	w22, w22, w26
-	add	x0, x0, :lo12:.LC127
+	add	x0, x0, :lo12:.LC134
 	mov	w1, w19
 	mov	x24, 0
-	adrp	x26, .LC128
+	adrp	x26, .LC135
 	bl	printk
-	adrp	x27, .LC129
-	adrp	x28, .LC130
+	adrp	x27, .LC136
+	adrp	x28, .LC137
 	lsl	w0, w19, 7
 	uxth	w22, w22
 	str	w0, [x29,116]
 	mov	w25, w24
-	add	x26, x26, :lo12:.LC128
-	add	x27, x27, :lo12:.LC129
-	add	x28, x28, :lo12:.LC130
-.L2929:
+	add	x26, x26, :lo12:.LC135
+	add	x27, x27, :lo12:.LC136
+	add	x28, x28, :lo12:.LC137
+.L3057:
 	ldr	x1, [x29,120]
 	mov	w8, w24
 	ldr	w0, [x23,x24,lsl 2]
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrh	w1, [x1,194]
 	cmp	w0, w1
-	bcs	.L2925
+	bcs	.L3053
 	adrp	x1, .LANCHOR4+68
 	ldr	w1, [x1,#:lo12:.LANCHOR4+68]
 	cmp	w0, w1
-	bcc	.L2925
+	bcc	.L3053
 	mov	w1, 0
 	mov	x2, 512
 	mov	x0, x20
@@ -19306,18 +19761,18 @@ write_idblock:
 	bl	IdBlockReadData
 	ldr	x8, [x29,104]
 	mov	x0, 0
-.L2926:
+.L3054:
 	ldr	w1, [x29,116]
 	mov	w3, w0
 	cmp	w0, w1
-	bcs	.L2936
+	bcs	.L3064
 	ldr	w4, [x20,x0,lsl 2]
 	mov	x7, x0
 	add	x0, x0, 1
 	add	x1, x21, x0, lsl 2
 	ldr	w5, [x1,-4]
 	cmp	w4, w5
-	beq	.L2926
+	beq	.L3054
 	ldr	w2, [x23,x24,lsl 2]
 	mov	w1, w8
 	mov	x0, x26
@@ -19347,21 +19802,21 @@ write_idblock:
 	mov	x2, x20
 	mul	w0, w22, w0
 	bl	IDBlockWriteData
-	adrp	x0, .LC131
-	add	x0, x0, :lo12:.LC131
+	adrp	x0, .LC138
+	add	x0, x0, :lo12:.LC138
 	bl	printk
-	b	.L2925
-.L2936:
+	b	.L3053
+.L3064:
 	add	w25, w25, 1
-.L2925:
+.L3053:
 	add	x24, x24, 1
 	cmp	x24, 5
-	bne	.L2929
+	bne	.L3057
 	mov	x0, x20
-	bl	kfree
+	bl	ftl_free
 	cmp	w25, wzr
 	csetm	w0, eq
-.L2931:
+.L3059:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -19379,20 +19834,21 @@ CRC_32:
 	mov	x5, x0
 	add	x3, x3, :lo12:.LANCHOR1
 	mov	w0, w2
-.L2938:
+.L3066:
 	cmp	w1, w2
-	bls	.L2940
+	bls	.L3068
 	ldrb	w4, [x5,x2]
 	add	x6, x3, 3016
 	add	x2, x2, 1
 	eor	w4, w4, w0, lsr 24
 	ldr	w4, [x6,w4,uxtw 2]
 	eor	w0, w4, w0, lsl 8
-	b	.L2938
-.L2940:
+	b	.L3066
+.L3068:
 	ret
 	.size	CRC_32, .-CRC_32
 	.align	2
+	.global	rknand_sys_storage_ioctl
 	.type	rknand_sys_storage_ioctl, %function
 rknand_sys_storage_ioctl:
 	sub	sp, sp, #528
@@ -19405,151 +19861,147 @@ rknand_sys_storage_ioctl:
 	str	x21, [sp,32]
 	mov	w19, w1
 	mov	x20, x2
-	beq	.L2943
+	beq	.L3071
 	mov	w0, 29187
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2944
+	bhi	.L3072
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2945
+	beq	.L3073
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2946
+	bhi	.L3074
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2947
+	beq	.L3075
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2948
+	bhi	.L3076
 	mov	w0, 25364
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bne	.L3005
+	bne	.L3133
 	bl	rknand_dev_flush
-	b	.L3037
-.L2948:
+	b	.L3165
+.L3076:
 	mov	w0, 25602
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2950
+	beq	.L3078
 	mov	w0, 25603
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2951
-	b	.L3005
-.L2946:
+	beq	.L3079
+	b	.L3133
+.L3074:
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2952
+	beq	.L3080
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2953
+	bhi	.L3081
 	mov	w0, 25727
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2954
-	b	.L3005
-.L2953:
+	beq	.L3082
+	b	.L3133
+.L3081:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2952
+	beq	.L3080
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2952
-	b	.L3005
-.L2944:
+	beq	.L3080
+	b	.L3133
+.L3072:
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2955
+	beq	.L3083
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2956
+	bhi	.L3084
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2957
+	beq	.L3085
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bcc	.L2958
+	bcc	.L3086
 	mov	w0, 29210
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2959
+	beq	.L3087
 	mov	w0, 29266
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2960
-	b	.L3005
-.L2956:
+	beq	.L3088
+	b	.L3133
+.L3084:
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2961
+	beq	.L3089
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L2962
+	bhi	.L3090
 	mov	w0, 29268
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2963
+	beq	.L3091
 	mov	w0, 30224
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2964
-	b	.L3005
-.L2962:
+	beq	.L3092
+	b	.L3133
+.L3090:
 	mov	w0, 30226
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2964
+	beq	.L3092
 	mov	w0, 30227
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L2961
-	b	.L3005
-.L2958:
-	adrp	x0, .LC132
-	add	x0, x0, :lo12:.LC132
+	beq	.L3089
+	b	.L3133
+.L3086:
+	adrp	x0, .LC139
+	add	x0, x0, :lo12:.LC139
 	bl	printk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x19, x0
-	cbnz	x0, .L2965
-.L2970:
+	cbnz	x0, .L3093
+.L3098:
 	mov	x0, -12
-	b	.L2942
-.L2965:
+	b	.L3070
+.L3093:
 	mov	x1, x20
 	mov	x2, 512
 	bl	rk_copy_from_user
-	cbnz	x0, .L3044
-	adrp	x0, .LC134
+	cbnz	x0, .L3172
+	adrp	x0, .LC141
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC134
+	add	x0, x0, :lo12:.LC141
 	bl	printk
 	ldr	w0, [x19,4]
 	str	w0, [x29,52]
 	cmp	w0, 8
-	bhi	.L3040
-	bl	rknand_device_unlock
+	bhi	.L3168
+	bl	rknand_device_lock
 	ldr	w1, [x29,52]
 	mov	x2, x19
 	ldr	w0, [x19]
@@ -19560,178 +20012,159 @@ rknand_sys_storage_ioctl:
 	mov	x1, x19
 	ubfiz	x2, x2, 9, 23
 	bl	rk_copy_to_user
-	cbz	x0, .L3046
-	adrp	x0, .LC135
-	add	x0, x0, :lo12:.LC135
-.L3039:
+	cbz	x0, .L3174
+	adrp	x0, .LC142
+	add	x0, x0, :lo12:.LC142
+.L3167:
 	bl	printk
-.L3040:
+.L3168:
 	mov	x0, x19
-.L3041:
-	bl	kfree
-.L3042:
+.L3169:
+	bl	ftl_free
+.L3170:
 	mov	x0, -14
-	b	.L2942
-.L2957:
-	adrp	x0, .LC136
-	add	x0, x0, :lo12:.LC136
+	b	.L3070
+.L3085:
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
 	bl	printk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L2970
+	cbz	x0, .L3098
 	mov	x1, x20
 	mov	x2, 4096
 	bl	rk_copy_from_user
-	cbnz	x0, .L3044
+	cbnz	x0, .L3172
 	ldr	w1, [x19]
-	adrp	x0, .LC137
+	adrp	x0, .LC144
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC137
+	add	x0, x0, :lo12:.LC144
 	bl	printk
 	adrp	x0, .LANCHOR4
 	add	x21, x0, :lo12:.LANCHOR4
 	mov	x20, x0
 	ldr	x1, [x21,448]
-	cbnz	x1, .L2972
-	mov	w1, 192
-	mov	x0, 260096
-	movk	w1, 0x240, lsl 16
-	mov	w2, 6
-	bl	kmalloc_order_trace
+	cbnz	x1, .L3100
+	mov	w0, 260096
+	bl	ftl_malloc
 	str	x0, [x21,448]
-	cbz	x0, .L3040
-.L2972:
+	cbz	x0, .L3168
+.L3100:
 	ldr	w2, [x19,4]
 	cmp	w2, 4088
-	bhi	.L3040
+	bhi	.L3168
 	ldr	w0, [x19]
 	mov	w1, 55296
 	movk	w1, 0x3, lsl 16
 	cmp	w0, w1
-	bhi	.L3040
+	bhi	.L3168
 	add	x20, x20, :lo12:.LANCHOR4
 	uxtw	x2, w2
 	ldr	x1, [x20,448]
 	add	x0, x1, x0, uxtw
 	add	x1, x19, 8
 	bl	memcpy
-.L3046:
+.L3174:
 	mov	x0, x19
-	bl	kfree
-	b	.L3037
-.L2960:
-	adrp	x0, .LC138
-	add	x0, x0, :lo12:.LC138
+	bl	ftl_free
+	b	.L3165
+.L3088:
+	adrp	x0, .LC145
+	add	x0, x0, :lo12:.LC145
 	bl	printk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L2970
+	cbz	x0, .L3098
 	mov	x1, x20
 	mov	x2, 28
 	bl	rk_copy_from_user
-	cbz	x0, .L2974
-.L3044:
-	adrp	x0, .LC133
-	add	x0, x0, :lo12:.LC133
-	b	.L3039
-.L2974:
+	cbz	x0, .L3102
+.L3172:
+	adrp	x0, .LC140
+	add	x0, x0, :lo12:.LC140
+	b	.L3167
+.L3102:
 	ldr	w1, [x19]
-	adrp	x0, .LC139
+	adrp	x0, .LC146
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC146
 	bl	printk
 	ldr	w1, [x19]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	cmp	w1, w0
-	bhi	.L3040
+	bhi	.L3168
 	adrp	x20, .LANCHOR4
 	add	x20, x20, :lo12:.LANCHOR4
 	ldr	x0, [x20,448]
-	cbz	x0, .L3040
+	cbz	x0, .L3168
 	bl	CRC_32
 	ldr	w1, [x19,4]
 	cmp	w1, w0
-	beq	.L2977
+	beq	.L3105
 	mov	x0, x19
-	bl	kfree
+	bl	ftl_free
 	mov	x0, -2
-	b	.L2942
-.L2977:
-	bl	rknand_device_unlock
+	b	.L3070
+.L3105:
+	bl	rknand_device_lock
 	ldr	x1, [x20,448]
 	add	x2, x19, 8
 	ldr	w0, [x19]
 	bl	write_idblock
 	bl	rknand_device_unlock
 	ldr	x0, [x20,448]
-	bl	kfree
+	bl	ftl_free
 	str	xzr, [x20,448]
-	b	.L3046
-.L2959:
-	adrp	x0, .LC140
-	add	x0, x0, :lo12:.LC140
+	b	.L3174
+.L3087:
+	adrp	x0, .LC147
+	add	x0, x0, :lo12:.LC147
 	bl	printk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L2970
+	cbz	x0, .L3098
 	bl	ReadFlashInfo
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 11
-	b	.L3048
-.L2943:
-	adrp	x0, .LC141
-	add	x0, x0, :lo12:.LC141
+	b	.L3176
+.L3071:
+	adrp	x0, .LC148
+	add	x0, x0, :lo12:.LC148
 	bl	printk
-	bl	rknand_device_unlock
+	bl	rknand_device_lock
 	bl	FtlReInitForSDUpdata
 	mov	w19, w0
 	bl	rknand_device_unlock
-	cbnz	w19, .L3042
+	cbnz	w19, .L3170
 	bl	nand_blk_add_whole_disk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L2970
-	bl	rknand_device_unlock
+	cbz	x0, .L3098
+	bl	rknand_device_lock
 	mov	w1, w19
 	mov	w2, 64
 	mov	x0, x21
 	bl	FlashReadFacBbtData
 	bl	rknand_device_unlock
-	adrp	x0, .LC142
+	adrp	x0, .LC149
 	mov	x1, x21
-	add	x0, x0, :lo12:.LC142
+	add	x0, x0, :lo12:.LC149
 	mov	w2, 4
 	mov	w3, 8
 	bl	rknand_print_hex
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 64
-	b	.L3048
-.L2955:
-	adrp	x0, .LC143
-	add	x0, x0, :lo12:.LC143
+	b	.L3176
+.L3083:
+	adrp	x0, .LC150
+	add	x0, x0, :lo12:.LC150
 	bl	printk
 	adrp	x0, .LANCHOR4+456
 	add	x1, x29, 52
@@ -19740,20 +20173,16 @@ rknand_sys_storage_ioctl:
 	ldr	w0, [x0,20]
 	str	w0, [x29,52]
 	mov	x0, x20
-	b	.L3033
-.L2963:
-	adrp	x0, .LC144
-	add	x0, x0, :lo12:.LC144
+	b	.L3161
+.L3091:
+	adrp	x0, .LC151
+	add	x0, x0, :lo12:.LC151
 	bl	printk
-	adrp	x0, kmalloc_caches+96
-	mov	w1, 192
-	movk	w1, 0x240, lsl 16
-	mov	x2, 4096
-	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
-	bl	kmem_cache_alloc_trace
+	mov	w0, 4096
+	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L2970
-	bl	rknand_device_unlock
+	cbz	x0, .L3098
+	bl	rknand_device_lock
 	mov	w1, 2
 	mov	x2, x21
 	mov	w0, 520
@@ -19762,41 +20191,41 @@ rknand_sys_storage_ioctl:
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 1024
-.L3048:
+.L3176:
 	bl	rk_copy_to_user
 	mov	x19, x0
 	mov	x0, x21
-	cbnz	x19, .L3041
-	bl	kfree
-	b	.L2969
-.L2947:
-	adrp	x0, .LC145
-	add	x0, x0, :lo12:.LC145
+	cbnz	x19, .L3169
+	bl	ftl_free
+	b	.L3097
+.L3075:
+	adrp	x0, .LC152
+	add	x0, x0, :lo12:.LC152
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
 	mov	x19, x0
-	cbz	x0, .L2983
-.L2988:
-	adrp	x0, .LC133
-	add	x0, x0, :lo12:.LC133
+	cbz	x0, .L3111
+.L3116:
+	adrp	x0, .LC140
+	add	x0, x0, :lo12:.LC140
 	bl	printk
-	b	.L3042
-.L2983:
+	b	.L3170
+.L3111:
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	beq	.L2984
-.L2985:
+	beq	.L3112
+.L3113:
 	mov	x19, -1
-	b	.L2969
-.L2984:
+	b	.L3097
+.L3112:
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L2985
+	bhi	.L3113
 	adrp	x21, .LANCHOR4
 	add	x0, x29, 56
 	add	x21, x21, :lo12:.LANCHOR4
@@ -19807,44 +20236,44 @@ rknand_sys_storage_ioctl:
 	mov	w0, 5161
 	movk	w0, 0xc059, lsl 16
 	cmp	w1, w0
-	beq	.L2986
+	beq	.L3114
 	add	x0, x29, 120
 	mov	w1, w19
 	mov	x2, 128
 	str	w19, [x29,64]
 	str	w19, [x29,68]
 	bl	memset
-.L2986:
+.L3114:
 	add	x0, x29, 312
 	mov	w1, 0
 	mov	x2, 256
 	str	wzr, [x29,72]
 	bl	memset
-.L3034:
+.L3162:
 	mov	x0, x20
 	add	x1, x29, 56
 	mov	x2, 520
-.L3033:
+.L3161:
 	bl	rk_copy_to_user
-	cbnz	x0, .L3042
-	b	.L3037
-.L2950:
-	adrp	x0, .LC146
-	add	x0, x0, :lo12:.LC146
+	cbnz	x0, .L3170
+	b	.L3165
+.L3078:
+	adrp	x0, .LC153
+	add	x0, x0, :lo12:.LC153
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	bne	.L2985
+	bne	.L3113
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L2985
+	bhi	.L3113
 	adrp	x1, .LANCHOR4
 	mov	w2, 5161
 	add	x1, x1, :lo12:.LANCHOR4
@@ -19852,12 +20281,12 @@ rknand_sys_storage_ioctl:
 	mov	x0, -2
 	ldr	w3, [x1,464]
 	cmp	w3, w2
-	bne	.L2942
+	bne	.L3070
 	ldr	w2, [x29,68]
 	mov	x0, -3
 	sub	w3, w2, #1
 	cmp	w3, 127
-	bhi	.L2942
+	bhi	.L3070
 	ldr	x19, [x1,456]
 	add	x1, x29, 120
 	add	x0, x19, 64
@@ -19866,38 +20295,38 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	w0, 1
 	mov	x1, x19
-	b	.L3038
-.L2954:
-	adrp	x0, .LC147
-	add	x0, x0, :lo12:.LC147
+	b	.L3166
+.L3082:
+	adrp	x0, .LC154
+	add	x0, x0, :lo12:.LC154
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 17476
 	movk	w0, 0x4253, lsl 16
 	cmp	w1, w0
-	bne	.L2985
+	bne	.L3113
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L2985
+	bhi	.L3113
 	adrp	x19, .LANCHOR4
 	add	x0, x19, :lo12:.LANCHOR4
 	ldr	w1, [x0,468]
-	cbnz	w1, .L2989
-.L2992:
+	cbnz	w1, .L3117
+.L3120:
 	mov	x0, 0
-	b	.L2942
-.L2989:
+	b	.L3070
+.L3117:
 	ldr	x1, [x0,472]
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	ldr	w3, [x1]
 	cmp	w3, w2
-	beq	.L2990
+	beq	.L3118
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	str	w2, [x1]
@@ -19907,7 +20336,7 @@ rknand_sys_storage_ioctl:
 	ldr	x0, [x0,472]
 	str	wzr, [x0,8]
 	str	wzr, [x0,12]
-.L2990:
+.L3118:
 	add	x20, x19, :lo12:.LANCHOR4
 	mov	w0, 0
 	ldr	x1, [x20,472]
@@ -19918,7 +20347,7 @@ rknand_sys_storage_ioctl:
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L2991
+	beq	.L3119
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
@@ -19927,7 +20356,7 @@ rknand_sys_storage_ioctl:
 	str	w1, [x0,4]
 	ldr	x0, [x20,456]
 	str	wzr, [x0,8]
-.L2991:
+.L3119:
 	add	x19, x19, :lo12:.LANCHOR4
 	mov	w1, 0
 	mov	x2, 128
@@ -19940,35 +20369,35 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	str	wzr, [x19,468]
 	str	wzr, [x19,464]
-	b	.L3037
-.L2945:
-	adrp	x0, .LC148
-	add	x0, x0, :lo12:.LC148
+	b	.L3165
+.L3073:
+	adrp	x0, .LC155
+	add	x0, x0, :lo12:.LC155
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w2, [x29,56]
 	mov	w1, 20037
 	movk	w1, 0x4253, lsl 16
 	cmp	w2, w1
-	bne	.L2985
+	bne	.L3113
 	ldr	w1, [x29,60]
 	cmp	w1, 512
-	bhi	.L2985
+	bhi	.L3113
 	adrp	x19, .LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR4
 	ldr	w2, [x1,468]
 	cmp	w2, 1
-	beq	.L2992
+	beq	.L3120
 	ldr	x2, [x1,472]
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	ldr	w4, [x2]
 	cmp	w4, w3
-	beq	.L2993
+	beq	.L3121
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	str	w3, [x2]
@@ -19978,7 +20407,7 @@ rknand_sys_storage_ioctl:
 	ldr	x1, [x1,472]
 	str	w0, [x1,8]
 	str	w0, [x1,12]
-.L2993:
+.L3121:
 	add	x20, x19, :lo12:.LANCHOR4
 	mov	w0, 1
 	ldr	x1, [x20,472]
@@ -19990,7 +20419,7 @@ rknand_sys_storage_ioctl:
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L2994
+	beq	.L3122
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
@@ -19999,7 +20428,7 @@ rknand_sys_storage_ioctl:
 	str	w1, [x0,4]
 	ldr	x0, [x20,456]
 	str	wzr, [x0,8]
-.L2994:
+.L3122:
 	add	x19, x19, :lo12:.LANCHOR4
 	mov	w1, 0
 	mov	x2, 128
@@ -20012,66 +20441,66 @@ rknand_sys_storage_ioctl:
 	bl	StorageSysDataStore
 	mov	w0, 1
 	str	w0, [x19,468]
-	b	.L3037
-.L2951:
-	adrp	x0, .LC149
-	add	x0, x0, :lo12:.LC149
+	b	.L3165
+.L3079:
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 20051
 	movk	w0, 0x4144, lsl 16
 	cmp	w1, w0
-	bne	.L2985
+	bne	.L3113
 	ldr	w2, [x29,60]
 	cmp	w2, 512
-	bhi	.L2985
+	bhi	.L3113
 	adrp	x1, .LANCHOR4
 	add	x0, x29, 64
 	add	x1, x1, :lo12:.LANCHOR4
 	uxtw	x2, w2
 	add	x1, x1, 480
-	b	.L3035
-.L2952:
+	b	.L3163
+.L3080:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L2995
-	adrp	x0, .LC150
-	add	x0, x0, :lo12:.LC150
-	b	.L3036
-.L2995:
+	bne	.L3123
+	adrp	x0, .LC157
+	add	x0, x0, :lo12:.LC157
+	b	.L3164
+.L3123:
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L2997
-	adrp	x0, .LC151
-	add	x0, x0, :lo12:.LC151
-	b	.L3036
-.L2997:
-	adrp	x0, .LC152
-	add	x0, x0, :lo12:.LC152
-.L3036:
+	bne	.L3125
+	adrp	x0, .LC158
+	add	x0, x0, :lo12:.LC158
+	b	.L3164
+.L3125:
+	adrp	x0, .LC159
+	add	x0, x0, :lo12:.LC159
+.L3164:
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 17227
 	movk	w0, 0x4c4f, lsl 16
 	cmp	w1, w0
-	bne	.L3042
+	bne	.L3170
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
 	adrp	x0, .LANCHOR4
-	bne	.L2998
+	bne	.L3126
 	add	x0, x0, :lo12:.LANCHOR4
 	add	x1, x29, 56
 	mov	x2, 16
@@ -20081,65 +20510,65 @@ rknand_sys_storage_ioctl:
 	strb	w0, [x29,64]
 	mov	x0, x20
 	bl	rk_copy_to_user
-	cbz	x0, .L2942
-	b	.L3042
-.L2998:
+	cbz	x0, .L3070
+	b	.L3170
+.L3126:
 	add	x20, x0, :lo12:.LANCHOR4
 	ldr	w1, [x20,992]
 	cmp	w1, 10
-	bhi	.L3042
+	bhi	.L3170
 	ldr	x1, [x20,456]
 	ldr	w2, [x29,60]
 	ldr	w3, [x1,24]
 	cmp	w3, w2
-	beq	.L2999
-	cbz	w3, .L2999
-	adrp	x0, .LC153
+	beq	.L3127
+	cbz	w3, .L3127
+	adrp	x0, .LC160
 	mov	w1, w2
-	add	x0, x0, :lo12:.LC153
+	add	x0, x0, :lo12:.LC160
 	bl	printk
 	ldr	w0, [x20,992]
 	add	w0, w0, 1
 	str	w0, [x20,992]
-	b	.L3042
-.L2999:
+	b	.L3170
+.L3127:
 	add	x0, x0, :lo12:.LANCHOR4
 	str	wzr, [x0,992]
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3000
+	bne	.L3128
 	str	wzr, [x1,20]
 	str	wzr, [x1,24]
-	b	.L3001
-.L3000:
+	b	.L3129
+.L3128:
 	mov	w0, 1
 	str	w2, [x1,24]
 	str	w0, [x1,20]
-.L3001:
+.L3129:
 	mov	w0, 1
 	mov	x19, -2
 	bl	StorageSysDataStore
 	cmn	w0, #1
-	bne	.L3037
-	b	.L2969
-.L2964:
-	adrp	x0, .LC154
-	add	x0, x0, :lo12:.LC154
+	bne	.L3165
+	b	.L3097
+.L3092:
+	adrp	x0, .LC161
+	add	x0, x0, :lo12:.LC161
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L2985
+	bne	.L3113
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L2985
+	bhi	.L3113
 	mov	w0, 30224
 	adrp	x1, .LANCHOR4
 	movk	w0, 0x4004, lsl 16
@@ -20147,68 +20576,68 @@ rknand_sys_storage_ioctl:
 	cmp	w19, w0
 	add	x1, x1, :lo12:.LANCHOR4
 	add	x0, x29, 64
-	bne	.L3002
+	bne	.L3130
 	ldr	x1, [x1,1000]
-	b	.L3045
-.L3002:
+	b	.L3173
+.L3130:
 	ldr	x1, [x1,1008]
-.L3045:
+.L3173:
 	add	x1, x1, 8
-.L3035:
+.L3163:
 	bl	memcpy
-	b	.L3034
-.L2961:
-	adrp	x0, .LC155
-	add	x0, x0, :lo12:.LC155
+	b	.L3162
+.L3089:
+	adrp	x0, .LC162
+	add	x0, x0, :lo12:.LC162
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L2988
+	cbnz	x0, .L3116
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L2985
+	bne	.L3113
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L2985
+	bhi	.L3113
 	mov	w0, 30225
 	add	w2, w2, 8
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
 	adrp	x19, .LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR4
-	bne	.L3004
+	bne	.L3132
 	ldr	x0, [x19,1000]
 	add	x1, x29, 56
 	bl	memcpy
 	mov	w0, 2
 	ldr	x1, [x19,1000]
-	b	.L3038
-.L3004:
+	b	.L3166
+.L3132:
 	ldr	x0, [x19,1008]
 	add	x1, x29, 56
 	bl	memcpy
 	ldr	x1, [x19,1008]
 	mov	w0, 3
-.L3038:
+.L3166:
 	bl	StorageSysDataStore
 	uxtw	x19, w0
-	b	.L2969
-.L3037:
+	b	.L3097
+.L3165:
 	mov	x19, 0
-.L2969:
-	adrp	x0, .LC156
+.L3097:
+	adrp	x0, .LC163
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC156
+	add	x0, x0, :lo12:.LC163
 	bl	printk
 	mov	x0, x19
-	b	.L2942
-.L3005:
+	b	.L3070
+.L3133:
 	mov	x0, -22
-.L2942:
+.L3070:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -20243,25 +20672,25 @@ rk_ftl_storage_sys_init:
 	ldr	w0, [x21,16]
 	ldr	w22, [x21,508]
 	str	w0, [x19,468]
-	cbz	w22, .L3051
+	cbz	w22, .L3179
 	mov	x0, x21
 	mov	w1, 508
 	bl	JSHash
 	cmp	w22, w0
-	beq	.L3051
-	adrp	x0, .LC157
+	beq	.L3179
+	adrp	x0, .LC164
 	str	wzr, [x21,16]
-	add	x0, x0, :lo12:.LC157
+	add	x0, x0, :lo12:.LC164
 	str	wzr, [x19,468]
 	bl	printk
-.L3051:
+.L3179:
 	add	x0, x20, :lo12:.LANCHOR4
 	ldr	w1, [x0,468]
-	cbz	w1, .L3052
+	cbz	w1, .L3180
 	mov	w1, 5161
 	movk	w1, 0xc059, lsl 16
 	str	w1, [x0,464]
-.L3052:
+.L3180:
 	add	x20, x20, :lo12:.LANCHOR4
 	mov	w0, 2
 	ldr	x1, [x20,1000]
@@ -20269,10 +20698,7 @@ rk_ftl_storage_sys_init:
 	ldr	x1, [x20,1008]
 	mov	w0, 3
 	bl	StorageSysDataLoad
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	add	x0, x0, 4040
-	bl	misc_register
+	bl	rknand_sys_storage_init
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -20282,17 +20708,402 @@ rk_ftl_storage_sys_init:
 	.global	StorageSysDataDeInit
 	.type	StorageSysDataDeInit, %function
 StorageSysDataDeInit:
-	stp	x29, x30, [sp, -16]!
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	add	x29, sp, 0
-	add	x0, x0, 4040
-	bl	misc_deregister
 	mov	w0, 0
-	ldp	x29, x30, [sp], 16
 	ret
 	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
-	.global	rknand_sys_storage_fops
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 193
+	mov	x0, 65536
+	add	x29, sp, 0
+	movk	w1, 0x240, lsl 16
+	mov	w2, 4
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR4
+	bl	kmalloc_order_trace
+	add	x1, x21, :lo12:.LANCHOR4
+	mov	w19, -12
+	str	x0, [x1,1016]
+	cbz	x0, .L3189
+	mov	w22, 0
+	adrp	x24, .LC165
+	mov	w19, w22
+	mov	w23, w22
+	add	x24, x24, :lo12:.LC165
+.L3193:
+	add	x20, x21, :lo12:.LANCHOR4
+	ldr	x2, [x20,1016]
+	str	x2, [x29,72]
+	bl	rknand_device_lock
+	ldr	x2, [x29,72]
+	add	w0, w23, 2
+	mov	w1, 128
+	lsl	w0, w0, 7
+	bl	FtlVendorPartRead
+	str	x0, [x29,72]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,72]
+	cbnz	w0, .L3190
+	ldr	x3, [x20,1016]
+	mov	x0, x24
+	add	x2, x3, 61440
+	ldr	w1, [x3]
+	ldr	w3, [x3,4]
+	ldr	w2, [x2,4092]
+	bl	printk
+	ldr	x20, [x20,1016]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	ldr	w1, [x20]
+	cmp	w1, w0
+	bne	.L3191
+	ldr	w0, [x20,4]
+	cmp	w19, w0
+	bcs	.L3191
+	add	x1, x20, 61440
+	ldr	w1, [x1,4092]
+	cmp	w1, w0
+	csel	w22, w22, w23, ne
+	csel	w19, w19, w0, ne
+.L3191:
+	cbnz	w23, .L3201
+	mov	w23, 1
+	b	.L3193
+.L3201:
+	cbz	w19, .L3194
+	bl	rknand_device_lock
+	lsl	w0, w22, 7
+	mov	w1, 128
+	add	w0, w0, 256
+	mov	x2, x20
+	bl	FtlVendorPartRead
+	mov	w19, w0
+	bl	rknand_device_unlock
+	cbz	w19, .L3189
+	b	.L3190
+.L3194:
+	mov	x0, x20
+	mov	w1, w19
+	mov	x2, 65536
+	bl	memset
+	str	w23, [x20,4]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	str	w0, [x20]
+	add	x0, x20, 61440
+	str	w23, [x0,4092]
+	mov	w0, -1032
+	strh	w19, [x20,12]
+	strh	w0, [x20,14]
+	b	.L3189
+.L3190:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w19, -1
+	ldr	x0, [x21,1016]
+	bl	kfree
+	str	xzr, [x21,1016]
+.L3189:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	adrp	x3, .LANCHOR4+1016
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	ldr	x5, [x3,#:lo12:.LANCHOR4+1016]
+	mov	w3, -1
+	str	x19, [sp,16]
+	cbz	x5, .L3203
+	ldrh	w3, [x5,10]
+	mov	x4, 0
+.L3204:
+	cmp	w4, w3
+	mov	w6, w4
+	bcs	.L3208
+	add	x7, x5, x4, lsl 3
+	add	x4, x4, 1
+	ldrh	w7, [x7,16]
+	cmp	w7, w0
+	bne	.L3204
+	add	x6, x5, x6, uxtw 3
+	ldrh	w4, [x6,20]
+	mov	x0, x1
+	ldrh	w1, [x6,18]
+	cmp	w2, w4
+	csel	w19, w2, w4, ls
+	add	x1, x1, 1024
+	add	x1, x5, x1
+	uxtw	x2, w19
+	bl	memcpy
+	mov	w3, w19
+	b	.L3203
+.L3208:
+	mov	w3, -1
+.L3203:
+	mov	w0, w3
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	stp	x29, x30, [sp, -112]!
+	mov	w6, w0
+	adrp	x0, .LANCHOR4+1016
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	ldr	x19, [x0,#:lo12:.LANCHOR4+1016]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	w26, w2
+	mov	x28, x1
+	mov	w2, -1
+	cbz	x19, .L3210
+	add	w20, w26, 63
+	ldrh	w3, [x19,10]
+	ldrh	w23, [x19,8]
+	and	w20, w20, -64
+	mov	x2, 0
+.L3211:
+	cmp	w2, w3
+	mov	w4, w2
+	bcs	.L3226
+	add	x0, x19, x2, lsl 3
+	add	x2, x2, 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w6
+	bne	.L3211
+	add	x21, x19, x4, uxtw 3
+	ldrh	w24, [x21,20]
+	add	x5, x19, 1024
+	add	w24, w24, 63
+	and	w24, w24, -64
+	cmp	w26, w24
+	bls	.L3212
+	ldrh	w0, [x19,14]
+	mov	w2, -1
+	cmp	w0, w20
+	bcc	.L3210
+	ldrh	w21, [x21,18]
+	add	w22, w3, w2
+.L3213:
+	cmp	w4, w22
+	uxtw	x3, w4
+	bcs	.L3227
+	add	x3, x19, x3, lsl 3
+	add	w25, w4, 1
+	add	x1, x19, x25, uxtw 3
+	ldrh	w0, [x1,16]
+	str	x6, [x29,96]
+	strh	w0, [x3,16]
+	str	x5, [x29,104]
+	ldrh	w0, [x1,20]
+	strh	w0, [x3,20]
+	strh	w21, [x3,18]
+	add	x0, x5, x21, uxtw
+	ldrh	w27, [x1,20]
+	ldrh	w1, [x1,18]
+	add	w27, w27, 63
+	and	w27, w27, -64
+	add	x1, x5, x1
+	and	x2, x27, 131008
+	add	w21, w21, w27
+	bl	memcpy
+	mov	w4, w25
+	ldr	x6, [x29,96]
+	ldr	x5, [x29,104]
+	b	.L3213
+.L3227:
+	add	x3, x19, x3, lsl 3
+	uxth	w21, w21
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x21, uxth
+	uxth	w20, w20
+	strh	w21, [x3,18]
+	add	w21, w21, w20
+	strh	w6, [x3,16]
+	strh	w26, [x3,20]
+	bl	memcpy
+	strh	w21, [x19,12]
+	ldrh	w0, [x19,14]
+	add	w24, w24, w0
+	sub	w24, w24, w20
+	strh	w24, [x19,14]
+	b	.L3225
+.L3212:
+	ldrh	w0, [x21,18]
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x0
+	bl	memcpy
+	strh	w26, [x21,20]
+	b	.L3225
+.L3226:
+	ldrh	w4, [x19,14]
+	mov	w2, -1
+	cmp	w4, w20
+	bcc	.L3210
+	add	x3, x19, x3, uxth 3
+	strh	w6, [x3,16]
+	uxth	w20, w20
+	mov	x1, x28
+	ldrh	w0, [x19,12]
+	uxtw	x2, w26
+	strh	w0, [x3,18]
+	strh	w26, [x3,20]
+	add	w0, w20, w0
+	sub	w20, w4, w20
+	strh	w0, [x19,12]
+	strh	w20, [x19,14]
+	ldrh	w0, [x3,18]
+	add	x0, x0, 1024
+	add	x0, x19, x0
+	bl	memcpy
+	ldrh	w0, [x19,10]
+	add	w0, w0, 1
+	strh	w0, [x19,10]
+.L3225:
+	ldr	w0, [x19,4]
+	add	x1, x19, 61440
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	str	w0, [x1,4092]
+	ldrh	w0, [x19,8]
+	add	w0, w0, 1
+	uxth	w0, w0
+	cmp	w0, 1
+	csel	w0, w0, wzr, ls
+	strh	w0, [x19,8]
+	bl	rknand_device_lock
+	lsl	w0, w23, 7
+	mov	x2, x19
+	mov	w1, 128
+	add	w0, w0, 256
+	bl	FtlVendorPartWrite
+	bl	rknand_device_unlock
+	mov	w2, 0
+.L3210:
+	mov	w0, w2
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, kmalloc_caches+96
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
+	mov	w22, w1
+	mov	w1, 192
+	mov	x21, x2
+	movk	w1, 0x240, lsl 16
+	mov	x2, 4096
+	stp	x19, x20, [sp,16]
+	bl	kmem_cache_alloc_trace
+	mov	x20, -1
+	mov	x19, x0
+	cbz	x0, .L3229
+	mov	w1, 30209
+	movk	w1, 0x4004, lsl 16
+	cmp	w22, w1
+	beq	.L3231
+	mov	w2, 30210
+	movk	w2, 0x4004, lsl 16
+	cmp	w22, w2
+	beq	.L3232
+	b	.L3243
+.L3231:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3243
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	beq	.L3234
+.L3235:
+	mov	x20, -1
+	b	.L3230
+.L3234:
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_read
+	cmn	w0, #1
+	beq	.L3235
+	uxth	x2, w0
+	strh	w0, [x19,6]
+	mov	x1, x19
+	mov	x0, x21
+	add	x2, x2, 8
+	mov	x20, -14
+	bl	rk_copy_to_user
+	cmp	x0, xzr
+	csel	x20, xzr, x20, eq
+	b	.L3230
+.L3232:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3243
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	bne	.L3235
+	ldrh	w3, [x19,6]
+	cmp	w3, 4087
+	bhi	.L3235
+	add	w2, w3, 8
+	mov	x0, x19
+	mov	x1, x21
+	sxtw	x2, w2
+	bl	rk_copy_from_user
+	cbnz	x0, .L3243
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_write
+	sxtw	x20, w0
+	b	.L3230
+.L3243:
+	mov	x20, -14
+.L3230:
+	mov	x0, x19
+	bl	kfree
+.L3229:
+	mov	x0, x20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
 	.global	gTable_Crc32
 	.global	SecureBootUnlockTryCount
 	.global	SecureBootCheckOK
@@ -20529,14 +21340,14 @@ StorageSysDataDeInit:
 	.section	.rodata
 	.align	3
 .LANCHOR3 = . + 0
-	.type	__func__.19115, %object
-	.size	__func__.19115, 11
-__func__.19115:
+	.type	__func__.19307, %object
+	.size	__func__.19307, 11
+__func__.19307:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.19991, %object
-	.size	__func__.19991, 21
-__func__.19991:
+	.type	__func__.20205, %object
+	.size	__func__.20205, 21
+__func__.20205:
 	.string	"FtlVpcCheckAndModify"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
@@ -20686,13 +21497,13 @@ __func__.19991:
 .LC72:
 	.string	"%s\n"
 .LC73:
-	.string	"FTL version: 5.0.36 20170512"
+	.string	"FTL version: 5.0.44 20171016"
 .LC74:
 	.string	"GetSwlReplaceBlock min_ec_id =%x %x\n"
 .LC75:
 	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
 .LC76:
-	.string	"FtlGcRefreshBlock  0x%x \n"
+	.string	"FtlGcRefreshBlock  0x%x\n"
 .LC77:
 	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
 .LC78:
@@ -20704,159 +21515,173 @@ __func__.19991:
 .LC81:
 	.string	""
 .LC82:
-	.string	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\n"
+	.string	"otp error! %d"
 .LC83:
-	.string	"nandc:"
+	.string	"rr"
 .LC84:
-	.string	"%d flReg.d32=%x %x\n"
+	.string	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\n"
 .LC85:
-	.string	"sdr read ok %x ecc=%d\n"
+	.string	"nandc:"
 .LC86:
-	.string	"sync para %d\n"
+	.string	"%d flReg.d32=%x %x\n"
 .LC87:
-	.string	"TOG mode Read error %x %x\n"
+	.string	"sdr read ok %x ecc=%d\n"
 .LC88:
-	.string	"read retry status %x %x %x\n"
+	.string	"sync para %d\n"
 .LC89:
-	.string	"ECC:%d\n"
+	.string	"TOG mode Read error %x %x\n"
 .LC90:
-	.string	"No.%d FLASH ID:%x %x %x %x %x %x\n"
+	.string	"read retry status %x %x %x\n"
 .LC91:
-	.string	"FlashLoadPhyInfo fail %x!!\n"
+	.string	"micron RR %d row=%x,count %d,status=%d\n"
 .LC92:
-	.string	"Read pageadd=%x  ecc=%x err=%x\n"
+	.string	"ECC:%d\n"
 .LC93:
-	.string	"data:"
+	.string	"No.%d FLASH ID:%x %x %x %x %x %x\n"
 .LC94:
-	.string	"spare:"
+	.string	"FlashLoadPhyInfo fail %x!!\n"
 .LC95:
-	.string	"ReadRetry pageadd=%x  ecc=%x err=%x\n"
+	.string	"Read pageadd=%x  ecc=%x err=%x\n"
 .LC96:
-	.string	"FLFB:%d %d\n"
+	.string	"data:"
 .LC97:
-	.string	"prog error: = %x\n"
+	.string	"spare:"
 .LC98:
-	.string	"prog read error: = %x\n"
+	.string	"ReadRetry pageadd=%x ecc=%x err=%x\n"
 .LC99:
-	.string	"prog read s error: = %x %x %x\n"
+	.string	"FLFB:%d %d\n"
 .LC100:
-	.string	"prog read d error: = %x %x %x\n"
+	.string	"prog error: = %x\n"
 .LC101:
-	.string	"no ect"
+	.string	"prog read error: = %x\n"
 .LC102:
-	.string	"slc mode"
+	.string	"prog read s error: = %x %x %x\n"
 .LC103:
-	.string	"FlashMakeFactorBbt %d\n"
+	.string	"prog read d error: = %x %x %x\n"
 .LC104:
-	.string	"bad block:%d %d\n"
+	.string	"no ect"
 .LC105:
-	.string	"FMFB:%d %d\n"
+	.string	"slc mode"
 .LC106:
-	.string	"E:bad block:%d\n"
+	.string	"FlashMakeFactorBbt %d\n"
 .LC107:
-	.string	"FMFB:Save %d %d\n"
+	.string	"bad block:%d %d\n"
 .LC108:
-	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+	.string	"FMFB:%d %d\n"
 .LC109:
-	.string	"FtlBbmTblFlush error:%x\n"
+	.string	"E:bad block:%d\n"
 .LC110:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"FMFB:Save %d %d\n"
 .LC111:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
 .LC112:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"FtlBbmTblFlush error:%x\n"
 .LC113:
-	.string	"...%s enter...\n"
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
 .LC114:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC115:
-	.string	"%d GC datablk  = %x vpc %x %x\n"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC116:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
 .LC117:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"FtlMapWritePage error = %x \n"
 .LC118:
-	.string	"FtlInit %x\n"
+	.string	"FtlMapWritePage error = %x error count = %d\n"
 .LC119:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"spuer block %x vpn is 0\n "
 .LC120:
-	.string	"BBT:"
+	.string	"...%s enter...\n"
 .LC121:
-	.string	"IdBlockReadData %x %x\n"
+	.string	"FtlCheckVpc %x = %x  %x\n"
 .LC122:
-	.string	"IdBlockReadData %x %x ret= %x\n"
+	.string	"%d GC datablk  = %x vpc %x %x\n"
 .LC123:
-	.string	"IDBlockWriteData %x %x\n"
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
 .LC124:
-	.string	"IDBlockWriteData %x %x ret= %x\n"
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
 .LC125:
-	.string	"idblk:"
+	.string	"FtlInit %x\n"
 .LC126:
-	.string	"idb reverse %x %x\n"
+	.string	"FtlWrite: lpa error:%x %x\n"
 .LC127:
-	.string	"write_idblock totle_sec %x %x\n"
+	.string	"BBT:"
 .LC128:
-	.string	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x\n"
+	.string	"IdBlockReadData %x %x\n"
 .LC129:
-	.string	"write"
+	.string	"IdBlockReadData %x %x ret= %x\n"
 .LC130:
-	.string	"read"
+	.string	"IDBlockWriteData %x %x\n"
 .LC131:
-	.string	"write_idblock error\n"
+	.string	"IDBlockWriteData %x %x ret= %x\n"
 .LC132:
-	.string	"READ_SECTOR_IO\n"
+	.string	"idblk:"
 .LC133:
-	.string	"rk_copy_from_user error\n"
+	.string	"idb reverse %x %x\n"
 .LC134:
-	.string	"READ_SECTOR_IO %x %x\n"
+	.string	"write_idblock totle_sec %x %x\n"
 .LC135:
-	.string	"rk_copy_to_user error\n"
+	.string	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x\n"
 .LC136:
-	.string	"WRITE_SECTOR_IO\n"
+	.string	"write"
 .LC137:
-	.string	"WRITE_SECTOR_IO %x %x\n"
+	.string	"read"
 .LC138:
-	.string	"END_WRITE_SECTOR_IO\n"
+	.string	"write_idblock error\n"
 .LC139:
-	.string	"END_WRITE_SECTOR_IO %x %x\n"
+	.string	"READ_SECTOR_IO\n"
 .LC140:
-	.string	"GET_FLASH_INFO_IO\n"
+	.string	"rk_copy_from_user error\n"
 .LC141:
-	.string	"GET_BAD_BLOCK_IO\n"
+	.string	"READ_SECTOR_IO %x %x\n"
 .LC142:
-	.string	"bbt:"
+	.string	"rk_copy_to_user error\n"
 .LC143:
-	.string	"GET_LOCK_FLAG_IO\n"
+	.string	"WRITE_SECTOR_IO\n"
 .LC144:
-	.string	"GET_PUBLIC_KEY_IO\n"
+	.string	"WRITE_SECTOR_IO %x %x\n"
 .LC145:
-	.string	"RKNAND_GET_DRM_KEY\n"
+	.string	"END_WRITE_SECTOR_IO\n"
 .LC146:
-	.string	"RKNAND_STORE_DRM_KEY\n"
+	.string	"END_WRITE_SECTOR_IO %x %x\n"
 .LC147:
-	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
+	.string	"GET_FLASH_INFO_IO\n"
 .LC148:
-	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
+	.string	"GET_BAD_BLOCK_IO\n"
 .LC149:
-	.string	"RKNAND_GET_SN_SECTOR\n"
+	.string	"bbt:"
 .LC150:
-	.string	"RKNAND_LOADER_UNLOCK\n"
+	.string	"GET_LOCK_FLAG_IO\n"
 .LC151:
-	.string	"RKNAND_LOADER_STATUS\n"
+	.string	"GET_PUBLIC_KEY_IO\n"
 .LC152:
-	.string	"RKNAND_LOADER_LOCK\n"
+	.string	"RKNAND_GET_DRM_KEY\n"
 .LC153:
-	.string	"LockKey not match %d\n"
+	.string	"RKNAND_STORE_DRM_KEY\n"
 .LC154:
-	.string	"RKNAND_GET_VENDOR_SECTOR\n"
+	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
 .LC155:
-	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
+	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
 .LC156:
-	.string	"return ret = %lx\n"
+	.string	"RKNAND_GET_SN_SECTOR\n"
 .LC157:
-	.string	"secureBootEn check error\n"
+	.string	"RKNAND_LOADER_UNLOCK\n"
 .LC158:
-	.string	"rknand_sys_storage"
+	.string	"RKNAND_LOADER_STATUS\n"
+.LC159:
+	.string	"RKNAND_LOADER_LOCK\n"
+.LC160:
+	.string	"LockKey not match %d\n"
+.LC161:
+	.string	"RKNAND_GET_VENDOR_SECTOR\n"
+.LC162:
+	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
+.LC163:
+	.string	"return ret = %lx\n"
+.LC164:
+	.string	"secureBootEn check error\n"
+.LC165:
+	.string	"\0013vendor storage %x,%x,%x\n"
 	.data
 	.align	3
 .LANCHOR1 = . + 0
@@ -21242,41 +22067,11 @@ gNandParaInfo:
 	.byte	0
 	.byte	0
 	.zero	4
-	.type	refValueDefault, %object
-	.size	refValueDefault, 28
-refValueDefault:
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	0
-	.byte	6
-	.byte	10
-	.byte	6
-	.byte	0
-	.byte	-3
-	.byte	-7
-	.byte	-8
-	.byte	0
-	.byte	-6
-	.byte	-13
-	.byte	-15
-	.byte	0
-	.byte	-11
-	.byte	-20
-	.byte	-23
-	.byte	0
-	.byte	0
-	.byte	-26
-	.byte	-30
-	.byte	0
-	.byte	0
-	.byte	-32
-	.byte	-37
 	.type	gFtlInitStatus, %object
 	.size	gFtlInitStatus, 4
 gFtlInitStatus:
 	.word	-1
+	.zero	4
 	.type	NandFlashParaTbl, %object
 	.size	NandFlashParaTbl, 2304
 NandFlashParaTbl:
@@ -21488,7 +22283,7 @@ NandFlashParaTbl:
 	.byte	0
 	.byte	0
 	.zero	4
-	.byte	6
+	.byte	5
 	.byte	44
 	.byte	-124
 	.byte	100
@@ -21749,19 +22544,19 @@ NandFlashParaTbl:
 	.byte	0
 	.zero	4
 	.byte	5
-	.byte	-75
+	.byte	44
 	.byte	100
 	.byte	100
-	.byte	86
-	.byte	-91
+	.byte	84
+	.byte	-92
 	.byte	0
 	.byte	4
 	.byte	1
-	.byte	24
+	.byte	32
 	.hword	512
 	.byte	2
-	.byte	2
-	.hword	700
+	.byte	1
+	.hword	1024
 	.hword	479
 	.byte	4
 	.byte	18
@@ -21787,7 +22582,7 @@ NandFlashParaTbl:
 	.hword	512
 	.byte	2
 	.byte	1
-	.hword	1088
+	.hword	1048
 	.hword	1503
 	.byte	5
 	.byte	19
@@ -21946,7 +22741,7 @@ NandFlashParaTbl:
 	.hword	1066
 	.hword	473
 	.byte	1
-	.byte	3
+	.byte	7
 	.byte	40
 	.byte	32
 	.byte	4
@@ -23231,6 +24026,38 @@ NandOptPara:
 	.byte	0
 	.byte	0
 	.zero	14
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.zero	4
 	.type	gSlcNandParaInfo, %object
 	.size	gSlcNandParaInfo, 32
 gSlcNandParaInfo:
@@ -23260,10 +24087,6 @@ gSlcNandParaInfo:
 	.byte	0
 	.byte	0
 	.zero	4
-	.type	micron_flash_randomizer_flag, %object
-	.size	micron_flash_randomizer_flag, 4
-micron_flash_randomizer_flag:
-	.word	1
 	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
 	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
 ftl_gc_temp_block_bops_scan_page_addr:
@@ -23273,7 +24096,6 @@ ftl_gc_temp_block_bops_scan_page_addr:
 	.size	power_up_flag, 4
 power_up_flag:
 	.word	1
-	.zero	4
 	.type	gTable_Crc32, %object
 	.size	gTable_Crc32, 1024
 gTable_Crc32:
@@ -23533,25 +24355,6 @@ gTable_Crc32:
 	.word	-1199924262
 	.word	-1254519549
 	.word	-1309114188
-	.type	rknand_sys_storage_dev, %object
-	.size	rknand_sys_storage_dev, 80
-rknand_sys_storage_dev:
-	.word	255
-	.zero	4
-	.xword	.LC158
-	.xword	rknand_sys_storage_fops
-	.zero	56
-	.type	rknand_sys_storage_fops, %object
-	.size	rknand_sys_storage_fops, 216
-rknand_sys_storage_fops:
-	.zero	64
-	.xword	rknand_sys_storage_ioctl
-	.xword	rknand_sys_storage_ioctl
-	.zero	8
-	.xword	rknand_sys_storage_open
-	.zero	8
-	.xword	rknand_sys_storage_release
-	.zero	104
 	.bss
 	.align	3
 .LANCHOR0 = . + 0
@@ -23578,11 +24381,7 @@ gBlockPageAlignSize:
 	.size	gNandRandomizer, 1
 gNandRandomizer:
 	.zero	1
-	.zero	3
-	.type	gNandcVer, %object
-	.size	gNandcVer, 4
-gNandcVer:
-	.zero	4
+	.zero	7
 	.type	gNandChipMap, %object
 	.size	gNandChipMap, 64
 gNandChipMap:
@@ -23690,10 +24489,6 @@ gNandMaxDie:
 	.type	DieCsIndex, %object
 	.size	DieCsIndex, 8
 DieCsIndex:
-	.zero	8
-	.type	gFlashPageBuffer0, %object
-	.size	gFlashPageBuffer0, 8
-gFlashPageBuffer0:
 	.zero	8
 	.type	gFlashToggleModeEn, %object
 	.size	gFlashToggleModeEn, 1
@@ -23703,11 +24498,14 @@ gFlashToggleModeEn:
 	.type	gBootDdrMode, %object
 	.size	gBootDdrMode, 4
 gBootDdrMode:
+	.zero	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
 	.zero	4
 	.type	g_nandc_version_data, %object
 	.size	g_nandc_version_data, 4
 g_nandc_version_data:
-	.zero	4
 	.zero	4
 	.type	gMasterTempBuf, %object
 	.size	gMasterTempBuf, 8
@@ -24324,6 +25122,10 @@ gNandIDataBuf:
 	.type	RK29_NANDC_REG_BASE, %object
 	.size	RK29_NANDC_REG_BASE, 8
 RK29_NANDC_REG_BASE:
+	.zero	8
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 8
+gFlashPageBuffer0:
 	.zero	8
 	.type	FlashDdrTunningReadCount, %object
 	.size	FlashDdrTunningReadCount, 4
@@ -24490,6 +25292,10 @@ gpVendor0Info:
 	.type	gpVendor1Info, %object
 	.size	gpVendor1Info, 8
 gpVendor1Info:
+	.zero	8
+	.type	g_vendor, %object
+	.size	g_vendor, 8
+g_vendor:
 	.zero	8
 	.type	gToggleModeClkDiv, %object
 	.size	gToggleModeClkDiv, 4
diff --git a/drivers/rk_nand/rk_nand_base.c b/drivers/rk_nand/rk_nand_base.c
index 343ec6cd3103..77fe609484a6 100644
--- a/drivers/rk_nand/rk_nand_base.c
+++ b/drivers/rk_nand/rk_nand_base.c
@@ -18,6 +18,8 @@
 #include <linux/platform_device.h>
 #include <linux/clk.h>
 #include <linux/uaccess.h>
+#include <linux/miscdevice.h>
+#include <linux/debugfs.h>
 #ifdef CONFIG_OF
 #include <linux/of.h>
 #endif
@@ -28,7 +30,7 @@
 
 struct rk_nandc_info {
 	int	id;
-	void __iomem	*reg_base;
+	void __iomem     *reg_base;
 	int	irq;
 	int	clk_rate;
 	struct clk	*clk;	/* flash clk*/
@@ -153,6 +155,38 @@ unsigned long rk_copy_to_user(void __user *to, const void *from,
 	return copy_to_user(to, from, n);
 }
 
+static const struct file_operations rknand_sys_storage_fops = {
+	.compat_ioctl = rknand_sys_storage_ioctl,
+	.unlocked_ioctl = rknand_sys_storage_ioctl,
+};
+
+static struct miscdevice rknand_sys_storage_dev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = "rknand_sys_storage",
+	.fops  = &rknand_sys_storage_fops,
+};
+
+int rknand_sys_storage_init(void)
+{
+	return misc_register(&rknand_sys_storage_dev);
+}
+
+static const struct file_operations rknand_vendor_storage_fops = {
+	.compat_ioctl	= rk_ftl_vendor_storage_ioctl,
+	.unlocked_ioctl = rk_ftl_vendor_storage_ioctl,
+};
+
+static struct miscdevice rknand_vender_storage_dev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = "vendor_storage",
+	.fops  = &rknand_vendor_storage_fops,
+};
+
+int rknand_vendor_storage_init(void)
+{
+	return misc_register(&rknand_vender_storage_dev);
+}
+
 int rk_nand_schedule_enable_config(int en)
 {
 	int tmp = rk_nand_wait_busy_schedule;
diff --git a/drivers/rk_nand/rk_nand_blk.c b/drivers/rk_nand/rk_nand_blk.c
index 9ef3c6a58235..f1e4baee5e4c 100644
--- a/drivers/rk_nand/rk_nand_blk.c
+++ b/drivers/rk_nand/rk_nand_blk.c
@@ -30,6 +30,7 @@
 #include <linux/kthread.h>
 #include <linux/proc_fs.h>
 #include <linux/version.h>
+#include <linux/soc/rockchip/rk_vendor_storage.h>
 
 #include "rk_nand_blk.h"
 #include "rk_ftl_api.h"
@@ -260,14 +261,9 @@ static int nand_blktrans_thread(void *arg)
 				ftl_gc_status = rk_ftl_garbage_collect(1, 0);
 				rknand_device_unlock();
 				rk_ftl_gc_jiffies = HZ / 50;
-				if (ftl_gc_status == 0) {
+				if (ftl_gc_status == 0)
 					rk_ftl_gc_jiffies = 1 * HZ;
-				} else if (ftl_gc_status < 8) {
-					spin_lock_irq(rq->queue_lock);
-					remove_wait_queue(&nandr->thread_wq,
-							  &wait);
-					continue;
-				}
+
 			} else {
 				rk_ftl_gc_jiffies = HZ / 50;
 			}
@@ -699,6 +695,14 @@ static int nand_blk_register(struct nand_blk_ops *nandr)
 	rknand_create_procfs();
 	rk_ftl_storage_sys_init();
 
+	ret = rk_ftl_vendor_storage_init();
+	if (!ret) {
+#ifdef CONFIG_ROCKCHIP_VENDOR_STORAGE
+		rk_vendor_register(rk_ftl_vendor_read, rk_ftl_vendor_write);
+#endif
+		rknand_vendor_storage_init();
+	}
+
 	return 0;
 }
 
-- 
2.35.3

