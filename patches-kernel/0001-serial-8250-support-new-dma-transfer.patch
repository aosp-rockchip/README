From c4c2d0c47b16e6b0d10ac525a3a499ad3838f463 Mon Sep 17 00:00:00 2001
From: Huibin Hong <huibin.hong@rock-chips.com>
Date: Thu, 28 Dec 2017 16:24:32 +0800
Subject: [PATCH] serial: 8250: support new dma transfer

The old mode uses soft timer to update received data,
which costs much cpu resource, even though there is no
data. The new mode is based on uart time out, it updates
data only when transfer completes.

Change-Id: Id12e351ff00015e4bfb36f416731ce4af5330001
Signed-off-by: Huibin Hong <huibin.hong@rock-chips.com>
---
 drivers/tty/serial/8250/8250.h      |   1 -
 drivers/tty/serial/8250/8250_dma.c  | 155 +++++++++++++++++++---------
 drivers/tty/serial/8250/8250_port.c |  20 ++--
 3 files changed, 116 insertions(+), 60 deletions(-)

diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index 61cb31163fae..cf0c26da0e21 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -47,7 +47,6 @@ struct uart_8250_dma {
 	unsigned char		rx_running;
 
 	size_t			rx_index;
-	struct timer_list	dma_rx_timer;
 };
 
 struct old_serial_port {
diff --git a/drivers/tty/serial/8250/8250_dma.c b/drivers/tty/serial/8250/8250_dma.c
index c321d2ac0266..b2da90f1538c 100644
--- a/drivers/tty/serial/8250/8250_dma.c
+++ b/drivers/tty/serial/8250/8250_dma.c
@@ -15,6 +15,12 @@
 
 #include "8250.h"
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+#define MAX_TX_BYTES		64
+#define MAX_FIFO_SIZE		64
+#define UART_RFL_16550A		0x21
+#endif
+
 static void __dma_tx_complete(void *param)
 {
 	struct uart_8250_port	*p = param;
@@ -46,61 +52,61 @@ static void __dma_tx_complete(void *param)
 	spin_unlock_irqrestore(&p->port.lock, flags);
 }
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+
 static void __dma_rx_complete(void *param)
 {
 	struct uart_8250_port	*p = param;
 	struct uart_8250_dma	*dma = p->dma;
 	struct tty_port		*tty_port = &p->port.state->port;
 	struct dma_tx_state	state;
-	int			count;
-	unsigned long		flags;
+	unsigned int		count = 0, cur_index = 0;
 
-	spin_lock_irqsave(&p->port.lock, flags);
-	del_timer(&dma->dma_rx_timer);
-	dma->rx_running = 0;
 	dmaengine_tx_status(dma->rxchan, dma->rx_cookie, &state);
+	cur_index = dma->rx_size - state.residue;
 
-	count = dma->rx_size - state.residue - dma->rx_index;
-	tty_insert_flip_string(tty_port, dma->rx_buf + dma->rx_index, count);
-	p->port.icount.rx += count;
-	dma->rx_index = dma->rx_size - state.residue;
+	if (cur_index == dma->rx_index)
+		return;
+	else if (cur_index > dma->rx_index)
+		count = cur_index - dma->rx_index;
+	else
+		count = dma->rx_size - dma->rx_index;
 
-	tty_flip_buffer_push(tty_port);
+	tty_insert_flip_string(tty_port, dma->rx_buf + dma->rx_index, count);
 
-	/* RDI can be enable again, so that dma transfer can be restarted */
-	p->ier |= (UART_IER_RLSI | UART_IER_RDI);
-	p->port.read_status_mask |= UART_LSR_DR;
-	serial_port_out(&p->port, UART_IER, p->ier);
+	if (cur_index < dma->rx_index) {
+		tty_insert_flip_string(tty_port, dma->rx_buf, cur_index);
+		count += cur_index;
+	}
 
-	spin_unlock_irqrestore(&p->port.lock, flags);
+	p->port.icount.rx += count;
+	dma->rx_index = cur_index;
+	tty_flip_buffer_push(tty_port);
 }
 
-void __dma_rx_timer_callback(unsigned long param)
+#else
+
+static void __dma_rx_complete(void *param)
 {
-	struct uart_8250_port	*p = (struct uart_8250_port *)param;
+	struct uart_8250_port	*p = param;
 	struct uart_8250_dma	*dma = p->dma;
 	struct tty_port		*tty_port = &p->port.state->port;
 	struct dma_tx_state	state;
 	int			count;
-	unsigned long		flags;
 
-	if (dma->rx_running == 0)
-		return;
-
-	spin_lock_irqsave(&p->port.lock, flags);
+	dma->rx_running = 0;
 	dmaengine_tx_status(dma->rxchan, dma->rx_cookie, &state);
 
-	count = dma->rx_size - state.residue - dma->rx_index;
-	tty_insert_flip_string(tty_port, dma->rx_buf + dma->rx_index, count);
+	count = dma->rx_size - state.residue;
+
+	tty_insert_flip_string(tty_port, dma->rx_buf, count);
 	p->port.icount.rx += count;
-	dma->rx_index = dma->rx_size - state.residue;
 
 	tty_flip_buffer_push(tty_port);
-	spin_unlock_irqrestore(&p->port.lock, flags);
-
-	mod_timer(&dma->dma_rx_timer, jiffies + msecs_to_jiffies(10));
 }
 
+#endif
+
 int serial8250_tx_dma(struct uart_8250_port *p)
 {
 	struct uart_8250_dma		*dma = p->dma;
@@ -113,7 +119,10 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 		return 0;
 
 	dma->tx_size = CIRC_CNT_TO_END(xmit->head, xmit->tail, UART_XMIT_SIZE);
-
+#ifdef CONFIG_ARCH_ROCKCHIP
+	if (dma->tx_size < MAX_TX_BYTES)
+		goto err;
+#endif
 	desc = dmaengine_prep_slave_single(dma->txchan,
 					   dma->tx_addr + xmit->tail,
 					   dma->tx_size, DMA_MEM_TO_DEV,
@@ -146,6 +155,57 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 	return ret;
 }
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+
+int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
+{
+	unsigned int rfl, i = 0;
+	unsigned char buf[MAX_FIFO_SIZE];
+	struct uart_port	*port = &p->port;
+	struct tty_port		*tty_port = &p->port.state->port;
+
+	if ((iir & 0xf) != UART_IIR_RX_TIMEOUT)
+		return 0;
+
+	rfl = serial_port_in(port, UART_RFL_16550A);
+
+	while (i < rfl)
+		buf[i++] = serial_port_in(port, UART_RX);
+
+	if (i > 0) {
+		__dma_rx_complete(p);
+		tty_insert_flip_string(tty_port, buf, i);
+		p->port.icount.rx += i;
+		tty_flip_buffer_push(tty_port);
+	}
+
+	return 0;
+}
+
+int serial8250_start_rx_dma(struct uart_8250_port *p)
+{
+	struct uart_8250_dma		*dma = p->dma;
+	struct dma_async_tx_descriptor	*desc;
+
+	desc = dmaengine_prep_dma_cyclic(dma->rxchan, dma->rx_addr,
+					 dma->rx_size, dma->rx_size,
+					 DMA_DEV_TO_MEM, DMA_PREP_INTERRUPT |
+					 DMA_CTRL_ACK);
+	if (!desc)
+		return -EBUSY;
+
+	dma->rx_running = 1;
+	desc->callback = NULL;
+	desc->callback_param = NULL;
+
+	dma->rx_cookie = dmaengine_submit(desc);
+	dma_async_issue_pending(dma->rxchan);
+	dma->rx_index = 0;
+	return 0;
+}
+
+#else
+
 int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 {
 	struct uart_8250_dma		*dma = p->dma;
@@ -186,13 +246,12 @@ int serial8250_rx_dma(struct uart_8250_port *p, unsigned int iir)
 	dma->rx_cookie = dmaengine_submit(desc);
 
 	dma_async_issue_pending(dma->rxchan);
-	dma->rx_index = 0;
-
-	mod_timer(&dma->dma_rx_timer, jiffies + msecs_to_jiffies(10));
 
 	return 0;
 }
 
+#endif
+
 int serial8250_request_dma(struct uart_8250_port *p)
 {
 	struct uart_8250_dma	*dma = p->dma;
@@ -202,13 +261,18 @@ int serial8250_request_dma(struct uart_8250_port *p)
 	dma->rxconf.direction		= DMA_DEV_TO_MEM;
 	dma->rxconf.src_addr_width	= DMA_SLAVE_BUSWIDTH_1_BYTE;
 	dma->rxconf.src_addr		= p->port.mapbase + UART_RX;
-	dma->rxconf.src_maxburst	= 1;
-
+#ifdef CONFIG_ARCH_ROCKCHIP
+	if ((p->port.fifosize / 4) < 16)
+		dma->rxconf.src_maxburst = p->port.fifosize / 4;
+	else
+		dma->rxconf.src_maxburst = 16;
+#endif
 	dma->txconf.direction		= DMA_MEM_TO_DEV;
 	dma->txconf.dst_addr_width	= DMA_SLAVE_BUSWIDTH_1_BYTE;
 	dma->txconf.dst_addr		= p->port.mapbase + UART_TX;
-	dma->txconf.dst_maxburst	= 1;
-
+#ifdef CONFIG_ARCH_ROCKCHIP
+	dma->txconf.dst_maxburst	= 16;
+#endif
 	dma_cap_zero(mask);
 	dma_cap_set(DMA_SLAVE, mask);
 
@@ -233,9 +297,13 @@ int serial8250_request_dma(struct uart_8250_port *p)
 	dmaengine_slave_config(dma->txchan, &dma->txconf);
 
 	/* RX buffer */
+#ifdef CONFIG_ARCH_ROCKCHIP
+	if (!dma->rx_size)
+		dma->rx_size = PAGE_SIZE * 2;
+#else
 	if (!dma->rx_size)
 		dma->rx_size = PAGE_SIZE;
-
+#endif
 	dma->rx_buf = dma_alloc_coherent(dma->rxchan->device->dev, dma->rx_size,
 					&dma->rx_addr, GFP_KERNEL);
 	if (!dma->rx_buf)
@@ -253,13 +321,10 @@ int serial8250_request_dma(struct uart_8250_port *p)
 	}
 
 	dev_dbg_ratelimited(p->port.dev, "got both dma channels\n");
-
-	/* init rx timer */
-	dma->dma_rx_timer.function = __dma_rx_timer_callback;
-	dma->dma_rx_timer.data = (unsigned long)p;
-	dma->dma_rx_timer.expires = jiffies + msecs_to_jiffies(10);
-	init_timer(&dma->dma_rx_timer);
-
+#ifdef CONFIG_ARCH_ROCKCHIP
+	/* start dma for rx*/
+	serial8250_start_rx_dma(p);
+#endif
 	return 0;
 err:
 	dma_release_channel(dma->rxchan);
@@ -276,8 +341,6 @@ void serial8250_release_dma(struct uart_8250_port *p)
 	if (!dma)
 		return;
 
-	del_timer_sync(&dma->dma_rx_timer);
-
 	/* Release RX resources */
 	dmaengine_terminate_all(dma->rxchan);
 	dma_free_coherent(dma->rxchan->device->dev, dma->rx_size, dma->rx_buf,
diff --git a/drivers/tty/serial/8250/8250_port.c b/drivers/tty/serial/8250/8250_port.c
index 4feb9ed92d7c..43f49386cde4 100644
--- a/drivers/tty/serial/8250/8250_port.c
+++ b/drivers/tty/serial/8250/8250_port.c
@@ -1563,17 +1563,9 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	DEBUG_INTR("status = %x...", status);
 
 	if (status & (UART_LSR_DR | UART_LSR_BI)) {
-		if (up->dma) {
-			/*
-			 * The RDI must be masked, or interrupt
-			 * would occur all the time.
-			 */
-			up->ier &= ~(UART_IER_RLSI | UART_IER_RDI);
-			up->port.read_status_mask &= ~UART_LSR_DR;
-			serial_port_out(port, UART_IER, up->ier);
-
+		if (up->dma)
 			dma_err = up->dma->rx_dma(up, iir);
-		}
+
 		if (!up->dma || dma_err)
 			status = serial8250_rx_chars(up, status);
 	}
@@ -2362,10 +2354,12 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	}
 
 	serial8250_set_divisor(port, baud, quot, frac);
-
+#ifdef CONFIG_ARCH_ROCKCHIP
 	if (up->dma)
-		up->fcr = UART_FCR_ENABLE_FIFO | UART_FCR_T_TRIG_11;
-
+		up->fcr = UART_FCR_ENABLE_FIFO | UART_FCR_T_TRIG_10 | UART_FCR_R_TRIG_10;
+	else
+		up->fcr = UART_FCR_ENABLE_FIFO | UART_FCR_T_TRIG_10 | UART_FCR_R_TRIG_00;
+#endif
 	/*
 	 * LCR DLAB must be set to enable 64-byte FIFO mode. If the FCR
 	 * is written without DLAB set, this mode will be disabled.
-- 
2.35.3

