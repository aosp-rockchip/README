From e631e47fe7012d165f185009f224d52a81b0f74f Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Thu, 2 Jan 2020 16:37:18 +0800
Subject: [PATCH] media: rockchip: isp: support 3a part of isp2.0

Change-Id: I5650286494b09e9d0dbda651d84761327621de11
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/isp/Makefile  |    4 +
 drivers/media/platform/rockchip/isp/dev.c     |   16 +-
 .../media/platform/rockchip/isp/isp_params.c  | 2425 +---------------
 .../media/platform/rockchip/isp/isp_params.h  |  128 +-
 .../platform/rockchip/isp/isp_params_v1x.c    | 2362 ++++++++++++++++
 .../platform/rockchip/isp/isp_params_v1x.h    |   81 +
 .../platform/rockchip/isp/isp_params_v2x.c    | 2514 +++++++++++++++++
 .../platform/rockchip/isp/isp_params_v2x.h    |  306 ++
 .../media/platform/rockchip/isp/isp_stats.c   |  421 +--
 .../media/platform/rockchip/isp/isp_stats.h   |   67 +-
 .../platform/rockchip/isp/isp_stats_v1x.c     |  409 +++
 .../platform/rockchip/isp/isp_stats_v1x.h     |   36 +
 .../platform/rockchip/isp/isp_stats_v2x.c     |  737 +++++
 .../platform/rockchip/isp/isp_stats_v2x.h     |   52 +
 drivers/media/platform/rockchip/isp/regs.h    |    2 +
 .../media/platform/rockchip/isp/regs_v2x.h    |    3 +-
 drivers/media/platform/rockchip/isp/rkisp.c   |   34 +-
 drivers/media/platform/rockchip/isp/rkisp.h   |    3 +-
 include/uapi/linux/rkisp1-config.h            |    1 +
 include/uapi/linux/rkisp2-config.h            | 1476 ++++++++++
 20 files changed, 8127 insertions(+), 2950 deletions(-)
 create mode 100644 drivers/media/platform/rockchip/isp/isp_params_v1x.c
 create mode 100644 drivers/media/platform/rockchip/isp/isp_params_v1x.h
 create mode 100644 drivers/media/platform/rockchip/isp/isp_params_v2x.c
 create mode 100644 drivers/media/platform/rockchip/isp/isp_params_v2x.h
 create mode 100644 drivers/media/platform/rockchip/isp/isp_stats_v1x.c
 create mode 100644 drivers/media/platform/rockchip/isp/isp_stats_v1x.h
 create mode 100644 drivers/media/platform/rockchip/isp/isp_stats_v2x.c
 create mode 100644 drivers/media/platform/rockchip/isp/isp_stats_v2x.h
 create mode 100644 include/uapi/linux/rkisp2-config.h

diff --git a/drivers/media/platform/rockchip/isp/Makefile b/drivers/media/platform/rockchip/isp/Makefile
index c9c1c8a2ec08..00394940fd0d 100644
--- a/drivers/media/platform/rockchip/isp/Makefile
+++ b/drivers/media/platform/rockchip/isp/Makefile
@@ -5,7 +5,11 @@ video_rkisp-objs += rkisp.o \
 			dev.o \
 			regs.o \
 			isp_stats.o \
+			isp_stats_v1x.o \
+			isp_stats_v2x.o \
 			isp_params.o \
+			isp_params_v1x.o \
+			isp_params_v2x.o \
 			capture.o \
 			dmarx.o \
 			csi.o \
diff --git a/drivers/media/platform/rockchip/isp/dev.c b/drivers/media/platform/rockchip/isp/dev.c
index 5f019bac6718..05a391dbe6ac 100644
--- a/drivers/media/platform/rockchip/isp/dev.c
+++ b/drivers/media/platform/rockchip/isp/dev.c
@@ -591,11 +591,13 @@ static irqreturn_t rkisp_irq_handler(int irq, void *ctx)
 {
 	struct device *dev = ctx;
 	struct rkisp_device *rkisp_dev = dev_get_drvdata(dev);
-	unsigned int mis_val;
+	unsigned int mis_val, mis_3a = 0;
 
 	mis_val = readl(rkisp_dev->base_addr + CIF_ISP_MIS);
-	if (mis_val)
-		rkisp_isp_isr(mis_val, rkisp_dev);
+	if (rkisp_dev->isp_ver == ISP_V20)
+		mis_3a = readl(rkisp_dev->base_addr + ISP_ISP3A_MIS);
+	if (mis_val || mis_3a)
+		rkisp_isp_isr(mis_val, mis_3a, rkisp_dev);
 
 	mis_val = readl(rkisp_dev->base_addr + CIF_MIPI_MIS);
 	if (mis_val)
@@ -612,11 +614,13 @@ static irqreturn_t rkisp_isp_irq_hdl(int irq, void *ctx)
 {
 	struct device *dev = ctx;
 	struct rkisp_device *rkisp_dev = dev_get_drvdata(dev);
-	unsigned int mis_val;
+	unsigned int mis_val, mis_3a = 0;
 
 	mis_val = readl(rkisp_dev->base_addr + CIF_ISP_MIS);
-	if (mis_val)
-		rkisp_isp_isr(mis_val, rkisp_dev);
+	if (rkisp_dev->isp_ver == ISP_V20)
+		mis_3a = readl(rkisp_dev->base_addr + ISP_ISP3A_MIS);
+	if (mis_val || mis_3a)
+		rkisp_isp_isr(mis_val, mis_3a, rkisp_dev);
 
 	return IRQ_HANDLED;
 }
diff --git a/drivers/media/platform/rockchip/isp/isp_params.c b/drivers/media/platform/rockchip/isp/isp_params.c
index fe0c902ebccc..5178e7f8dce4 100644
--- a/drivers/media/platform/rockchip/isp/isp_params.c
+++ b/drivers/media/platform/rockchip/isp/isp_params.c
@@ -1,36 +1,5 @@
-/*
- * Rockchip isp1 driver
- *
- * Copyright (C) 2017 Rockchip Electronics Co., Ltd.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
 
 #include <media/v4l2-common.h>
 #include <media/v4l2-ioctl.h>
@@ -39,2331 +8,16 @@
 #include <media/v4l2-event.h>
 #include <linux/rk-preisp.h>
 #include "dev.h"
-#include "regs.h"
+#include "isp_params.h"
+#include "isp_params_v1x.h"
+#include "isp_params_v2x.h"
 
 #define PARAMS_NAME DRIVER_NAME "-input-params"
 #define RKISP_ISP_PARAMS_REQ_BUFS_MIN	2
 #define RKISP_ISP_PARAMS_REQ_BUFS_MAX	8
 
-#define BLS_START_H_MAX_IS_VALID(val)	((val) < CIFISP_BLS_START_H_MAX)
-#define BLS_STOP_H_MAX_IS_VALID(val)	((val) < CIFISP_BLS_STOP_H_MAX)
-
-#define BLS_START_V_MAX_IS_VALID(val)	((val) < CIFISP_BLS_START_V_MAX)
-#define BLS_STOP_V_MAX_IS_VALID(val)	((val) < CIFISP_BLS_STOP_V_MAX)
-
-#define BLS_SAMPLE_MAX_IS_VALID(val)	((val) < CIFISP_BLS_SAMPLES_MAX)
-
-#define BLS_FIX_SUB_IS_VALID(val)	\
-	((val) > (s16) CIFISP_BLS_FIX_SUB_MIN && (val) < CIFISP_BLS_FIX_SUB_MAX)
-
-#define RKISP_ISP_DPCC_LINE_THRESH(n)	(CIF_ISP_DPCC_LINE_THRESH_1 + 0x14 * (n))
-#define RKISP_ISP_DPCC_LINE_MAD_FAC(n) (CIF_ISP_DPCC_LINE_MAD_FAC_1 + 0x14 * (n))
-#define RKISP_ISP_DPCC_PG_FAC(n)	(CIF_ISP_DPCC_PG_FAC_1 + 0x14 * (n))
-#define RKISP_ISP_DPCC_RND_THRESH(n)	(CIF_ISP_DPCC_RND_THRESH_1 + 0x14 * (n))
-#define RKISP_ISP_DPCC_RG_FAC(n)	(CIF_ISP_DPCC_RG_FAC_1 + 0x14 * (n))
-#define RKISP_ISP_CC_COEFF(n)		(CIF_ISP_CC_COEFF_0 + (n) * 4)
-
-static inline void rkisp_iowrite32(struct rkisp_isp_params_vdev *params_vdev,
-				   u32 value, u32 addr)
-{
-	iowrite32(value, params_vdev->dev->base_addr + addr);
-}
-
-static inline u32 rkisp_ioread32(struct rkisp_isp_params_vdev *params_vdev,
-				  u32 addr)
-{
-	return ioread32(params_vdev->dev->base_addr + addr);
-}
-
-static inline void isp_param_set_bits(struct rkisp_isp_params_vdev
-					     *params_vdev,
-				      u32 reg, u32 bit_mask)
-{
-	u32 val;
-
-	val = rkisp_ioread32(params_vdev, reg);
-	rkisp_iowrite32(params_vdev, val | bit_mask, reg);
-}
-
-static inline void isp_param_clear_bits(struct rkisp_isp_params_vdev
-					       *params_vdev,
-					u32 reg, u32 bit_mask)
-{
-	u32 val;
-
-	val = rkisp_ioread32(params_vdev, reg);
-	rkisp_iowrite32(params_vdev, val & ~bit_mask, reg);
-}
-
-/* ISP BP interface function */
-static void isp_dpcc_config(struct rkisp_isp_params_vdev *params_vdev,
-			    const struct cifisp_dpcc_config *arg)
-{
-	unsigned int i;
-	u32 mode;
-
-	/* avoid to override the old enable value */
-	mode = rkisp_ioread32(params_vdev, CIF_ISP_DPCC_MODE);
-	mode &= CIF_ISP_DPCC_ENA;
-	mode |= arg->mode & ~CIF_ISP_DPCC_ENA;
-	rkisp_iowrite32(params_vdev, mode, CIF_ISP_DPCC_MODE);
-	rkisp_iowrite32(params_vdev, arg->output_mode,
-			CIF_ISP_DPCC_OUTPUT_MODE);
-	rkisp_iowrite32(params_vdev, arg->set_use, CIF_ISP_DPCC_SET_USE);
-
-	rkisp_iowrite32(params_vdev, arg->methods[0].method,
-			CIF_ISP_DPCC_METHODS_SET_1);
-	rkisp_iowrite32(params_vdev, arg->methods[1].method,
-			CIF_ISP_DPCC_METHODS_SET_2);
-	rkisp_iowrite32(params_vdev, arg->methods[2].method,
-			CIF_ISP_DPCC_METHODS_SET_3);
-	for (i = 0; i < CIFISP_DPCC_METHODS_MAX; i++) {
-		rkisp_iowrite32(params_vdev, arg->methods[i].line_thresh,
-				RKISP_ISP_DPCC_LINE_THRESH(i));
-		rkisp_iowrite32(params_vdev, arg->methods[i].line_mad_fac,
-				RKISP_ISP_DPCC_LINE_MAD_FAC(i));
-		rkisp_iowrite32(params_vdev, arg->methods[i].pg_fac,
-				RKISP_ISP_DPCC_PG_FAC(i));
-		rkisp_iowrite32(params_vdev, arg->methods[i].rnd_thresh,
-				RKISP_ISP_DPCC_RND_THRESH(i));
-		rkisp_iowrite32(params_vdev, arg->methods[i].rg_fac,
-				RKISP_ISP_DPCC_RG_FAC(i));
-	}
-
-	rkisp_iowrite32(params_vdev, arg->rnd_offs, CIF_ISP_DPCC_RND_OFFS);
-	rkisp_iowrite32(params_vdev, arg->ro_limits, CIF_ISP_DPCC_RO_LIMITS);
-}
-
-/* ISP black level subtraction interface function */
-static void isp_bls_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_bls_config *arg)
-{
-	/* avoid to override the old enable value */
-	u32 new_control;
-
-	new_control = rkisp_ioread32(params_vdev, CIF_ISP_BLS_CTRL);
-	new_control &= CIF_ISP_BLS_ENA;
-	/* fixed subtraction values */
-	if (!arg->enable_auto) {
-		const struct cifisp_bls_fixed_val *pval = &arg->fixed_val;
-
-		switch (params_vdev->raw_type) {
-		case RAW_BGGR:
-			rkisp_iowrite32(params_vdev,
-					pval->r, CIF_ISP_BLS_D_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gr, CIF_ISP_BLS_C_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gb, CIF_ISP_BLS_B_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->b, CIF_ISP_BLS_A_FIXED);
-			break;
-		case RAW_GBRG:
-			rkisp_iowrite32(params_vdev,
-					pval->r, CIF_ISP_BLS_C_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gr, CIF_ISP_BLS_D_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gb, CIF_ISP_BLS_A_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->b, CIF_ISP_BLS_B_FIXED);
-			break;
-		case RAW_GRBG:
-			rkisp_iowrite32(params_vdev,
-					pval->r, CIF_ISP_BLS_B_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gr, CIF_ISP_BLS_A_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gb, CIF_ISP_BLS_D_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->b, CIF_ISP_BLS_C_FIXED);
-			break;
-		case RAW_RGGB:
-			rkisp_iowrite32(params_vdev,
-					pval->r, CIF_ISP_BLS_A_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gr, CIF_ISP_BLS_B_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->gb, CIF_ISP_BLS_C_FIXED);
-			rkisp_iowrite32(params_vdev,
-					pval->b, CIF_ISP_BLS_D_FIXED);
-			break;
-		default:
-			break;
-		}
-
-	} else {
-		if (arg->en_windows & BIT(1)) {
-			rkisp_iowrite32(params_vdev, arg->bls_window2.h_offs,
-					CIF_ISP_BLS_H2_START);
-			rkisp_iowrite32(params_vdev, arg->bls_window2.h_size,
-					CIF_ISP_BLS_H2_STOP);
-			rkisp_iowrite32(params_vdev, arg->bls_window2.v_offs,
-					CIF_ISP_BLS_V2_START);
-			rkisp_iowrite32(params_vdev, arg->bls_window2.v_size,
-					CIF_ISP_BLS_V2_STOP);
-			new_control |= CIF_ISP_BLS_WINDOW_2;
-		}
-
-		if (arg->en_windows & BIT(0)) {
-			rkisp_iowrite32(params_vdev, arg->bls_window1.h_offs,
-					CIF_ISP_BLS_H1_START);
-			rkisp_iowrite32(params_vdev, arg->bls_window1.h_size,
-					CIF_ISP_BLS_H1_STOP);
-			rkisp_iowrite32(params_vdev, arg->bls_window1.v_offs,
-					CIF_ISP_BLS_V1_START);
-			rkisp_iowrite32(params_vdev, arg->bls_window1.v_size,
-					CIF_ISP_BLS_V1_STOP);
-			new_control |= CIF_ISP_BLS_WINDOW_1;
-		}
-
-		rkisp_iowrite32(params_vdev, arg->bls_samples,
-				CIF_ISP_BLS_SAMPLES);
-
-		new_control |= CIF_ISP_BLS_MODE_MEASURED;
-	}
-	rkisp_iowrite32(params_vdev, new_control, CIF_ISP_BLS_CTRL);
-}
-
-/* ISP LS correction interface function */
-static void
-isp_lsc_matrix_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_lsc_config *pconfig)
-{
-	int i, j;
-	unsigned int isp_lsc_status, sram_addr, isp_lsc_table_sel;
-	unsigned int data;
-
-	isp_lsc_status = rkisp_ioread32(params_vdev, CIF_ISP_LSC_STATUS);
-
-	/* CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17 * 18 ) >> 1 */
-	sram_addr = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
-		     CIF_ISP_LSC_TABLE_ADDRESS_0 :
-		     CIF_ISP_LSC_TABLE_ADDRESS_153;
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_R_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GR_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GB_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_B_TABLE_ADDR);
-
-	/* program data tables (table size is 9 * 17 = 153) */
-	for (i = 0; i < CIF_ISP_LSC_SECTORS_MAX * CIF_ISP_LSC_SECTORS_MAX;
-	     i += CIF_ISP_LSC_SECTORS_MAX) {
-		/*
-		 * 17 sectors with 2 values in one DWORD = 9
-		 * DWORDs (2nd value of last DWORD unused)
-		 */
-		for (j = 0; j < CIF_ISP_LSC_SECTORS_MAX - 1; j += 2) {
-			data = CIF_ISP_LSC_TABLE_DATA_V10(
-					pconfig->r_data_tbl[i + j],
-					pconfig->r_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_R_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V10(
-					pconfig->gr_data_tbl[i + j],
-					pconfig->gr_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_GR_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V10(
-					pconfig->gb_data_tbl[i + j],
-					pconfig->gb_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_GB_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V10(
-					pconfig->b_data_tbl[i + j],
-					pconfig->b_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_B_TABLE_DATA);
-		}
-
-		data = CIF_ISP_LSC_TABLE_DATA_V10(
-				pconfig->r_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_R_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V10(
-				pconfig->gr_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_GR_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V10(
-				pconfig->gb_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_GB_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V10(
-				pconfig->b_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_B_TABLE_DATA);
-	}
-	isp_lsc_table_sel = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
-				CIF_ISP_LSC_TABLE_0 : CIF_ISP_LSC_TABLE_1;
-	rkisp_iowrite32(params_vdev, isp_lsc_table_sel, CIF_ISP_LSC_TABLE_SEL);
-}
-
-static void
-isp_lsc_matrix_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_lsc_config *pconfig)
-{
-	int i, j;
-	unsigned int isp_lsc_status, sram_addr, isp_lsc_table_sel;
-	unsigned int data;
-
-	isp_lsc_status = rkisp_ioread32(params_vdev, CIF_ISP_LSC_STATUS);
-
-	/* CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17 * 18 ) >> 1 */
-	sram_addr = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
-		     CIF_ISP_LSC_TABLE_ADDRESS_0 :
-		     CIF_ISP_LSC_TABLE_ADDRESS_153;
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_R_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GR_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GB_TABLE_ADDR);
-	rkisp_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_B_TABLE_ADDR);
-
-	/* program data tables (table size is 9 * 17 = 153) */
-	for (i = 0; i < CIF_ISP_LSC_SECTORS_MAX * CIF_ISP_LSC_SECTORS_MAX;
-	     i += CIF_ISP_LSC_SECTORS_MAX) {
-		/*
-		 * 17 sectors with 2 values in one DWORD = 9
-		 * DWORDs (2nd value of last DWORD unused)
-		 */
-		for (j = 0; j < CIF_ISP_LSC_SECTORS_MAX - 1; j += 2) {
-			data = CIF_ISP_LSC_TABLE_DATA_V12(
-					pconfig->r_data_tbl[i + j],
-					pconfig->r_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_R_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V12(
-					pconfig->gr_data_tbl[i + j],
-					pconfig->gr_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_GR_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V12(
-					pconfig->gb_data_tbl[i + j],
-					pconfig->gb_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_GB_TABLE_DATA);
-
-			data = CIF_ISP_LSC_TABLE_DATA_V12(
-					pconfig->b_data_tbl[i + j],
-					pconfig->b_data_tbl[i + j + 1]);
-			rkisp_iowrite32(params_vdev, data,
-					CIF_ISP_LSC_B_TABLE_DATA);
-		}
-
-		data = CIF_ISP_LSC_TABLE_DATA_V12(
-				pconfig->r_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_R_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V12(
-				pconfig->gr_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_GR_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V12(
-				pconfig->gb_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_GB_TABLE_DATA);
-
-		data = CIF_ISP_LSC_TABLE_DATA_V12(
-				pconfig->b_data_tbl[i + j],
-				0);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_B_TABLE_DATA);
-	}
-	isp_lsc_table_sel = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
-				CIF_ISP_LSC_TABLE_0 : CIF_ISP_LSC_TABLE_1;
-	rkisp_iowrite32(params_vdev, isp_lsc_table_sel, CIF_ISP_LSC_TABLE_SEL);
-}
-
-static void isp_lsc_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_lsc_config *arg)
-{
-	int i;
-	u32 lsc_ctrl;
-	unsigned int data;
-
-	/* To config must be off , store the current status firstly */
-	lsc_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_LSC_CTRL);
-	isp_param_clear_bits(params_vdev, CIF_ISP_LSC_CTRL,
-			     CIF_ISP_LSC_CTRL_ENA);
-	params_vdev->ops->lsc_matrix_config(params_vdev, arg);
-
-	for (i = 0; i < 4; i++) {
-		/* program x size tables */
-		data = CIF_ISP_LSC_SECT_SIZE(arg->x_size_tbl[i * 2],
-					arg->x_size_tbl[i * 2 + 1]);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_XSIZE_01 + i * 4);
-
-		/* program x grad tables */
-		data = CIF_ISP_LSC_SECT_SIZE(arg->x_grad_tbl[i * 2],
-					arg->x_grad_tbl[i * 2 + 1]);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_XGRAD_01 + i * 4);
-
-		/* program y size tables */
-		data = CIF_ISP_LSC_SECT_SIZE(arg->y_size_tbl[i * 2],
-					arg->y_size_tbl[i * 2 + 1]);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_YSIZE_01 + i * 4);
-
-		/* program y grad tables */
-		data = CIF_ISP_LSC_SECT_SIZE(arg->y_grad_tbl[i * 2],
-					arg->y_grad_tbl[i * 2 + 1]);
-		rkisp_iowrite32(params_vdev, data,
-				CIF_ISP_LSC_YGRAD_01 + i * 4);
-	}
-
-	/* restore the lsc ctrl status */
-	if (lsc_ctrl & CIF_ISP_LSC_CTRL_ENA) {
-		isp_param_set_bits(params_vdev,
-				   CIF_ISP_LSC_CTRL,
-				   CIF_ISP_LSC_CTRL_ENA);
-	} else {
-		isp_param_clear_bits(params_vdev,
-				     CIF_ISP_LSC_CTRL,
-				     CIF_ISP_LSC_CTRL_ENA);
-	}
-}
-
-/* ISP Filtering function */
-static void isp_flt_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_flt_config *arg)
-{
-	u32 filt_mode;
-
-	rkisp_iowrite32(params_vdev, arg->thresh_bl0, CIF_ISP_FILT_THRESH_BL0);
-	rkisp_iowrite32(params_vdev, arg->thresh_bl1, CIF_ISP_FILT_THRESH_BL1);
-	rkisp_iowrite32(params_vdev, arg->thresh_sh0, CIF_ISP_FILT_THRESH_SH0);
-	rkisp_iowrite32(params_vdev, arg->thresh_sh1, CIF_ISP_FILT_THRESH_SH1);
-	rkisp_iowrite32(params_vdev, arg->fac_bl0, CIF_ISP_FILT_FAC_BL0);
-	rkisp_iowrite32(params_vdev, arg->fac_bl1, CIF_ISP_FILT_FAC_BL1);
-	rkisp_iowrite32(params_vdev, arg->fac_mid, CIF_ISP_FILT_FAC_MID);
-	rkisp_iowrite32(params_vdev, arg->fac_sh0, CIF_ISP_FILT_FAC_SH0);
-	rkisp_iowrite32(params_vdev, arg->fac_sh1, CIF_ISP_FILT_FAC_SH1);
-	rkisp_iowrite32(params_vdev, arg->lum_weight, CIF_ISP_FILT_LUM_WEIGHT);
-
-	/* avoid to override the old enable value */
-	filt_mode = rkisp_ioread32(params_vdev, CIF_ISP_FILT_MODE);
-	filt_mode &= CIF_ISP_FLT_ENA;
-	if (arg->mode)
-		filt_mode |= CIF_ISP_FLT_MODE_DNR;
-	filt_mode |= CIF_ISP_FLT_CHROMA_V_MODE(arg->chr_v_mode) |
-				 CIF_ISP_FLT_CHROMA_H_MODE(arg->chr_h_mode) |
-				 CIF_ISP_FLT_GREEN_STAGE1(arg->grn_stage1);
-	rkisp_iowrite32(params_vdev, filt_mode, CIF_ISP_FILT_MODE);
-}
-
-/* ISP demosaic interface function */
-static void isp_bdm_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_bdm_config *arg)
-{
-	u32 bdm_th;
-
-	/* avoid to override the old enable value */
-	bdm_th = rkisp_ioread32(params_vdev, CIF_ISP_DEMOSAIC);
-	bdm_th &= CIF_ISP_DEMOSAIC_BYPASS;
-	bdm_th |= arg->demosaic_th & ~CIF_ISP_DEMOSAIC_BYPASS;
-	/* set demosaic threshold */
-	rkisp_iowrite32(params_vdev, bdm_th, CIF_ISP_DEMOSAIC);
-}
-
-/* ISP GAMMA correction interface function */
-static void isp_sdg_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_sdg_config *arg)
-{
-	int i;
-
-	rkisp_iowrite32(params_vdev,
-			arg->xa_pnts.gamma_dx0, CIF_ISP_GAMMA_DX_LO);
-	rkisp_iowrite32(params_vdev,
-			arg->xa_pnts.gamma_dx1, CIF_ISP_GAMMA_DX_HI);
-
-	for (i = 0; i < CIFISP_DEGAMMA_CURVE_SIZE; i++) {
-		rkisp_iowrite32(params_vdev, arg->curve_r.gamma_y[i],
-				CIF_ISP_GAMMA_R_Y0 + i * 4);
-		rkisp_iowrite32(params_vdev, arg->curve_g.gamma_y[i],
-				CIF_ISP_GAMMA_G_Y0 + i * 4);
-		rkisp_iowrite32(params_vdev, arg->curve_b.gamma_y[i],
-				CIF_ISP_GAMMA_B_Y0 + i * 4);
-	}
-}
-
-/* ISP GAMMA correction interface function */
-static void isp_goc_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_goc_config *arg)
-{
-	int i;
-
-	rkisp_iowrite32(params_vdev, arg->mode, CIF_ISP_GAMMA_OUT_MODE_V10);
-
-	for (i = 0; i < params_vdev->config->gamma_out_max_samples; i++)
-		rkisp_iowrite32(params_vdev, arg->gamma_y[i],
-				CIF_ISP_GAMMA_OUT_Y_0_V10 + i * 4);
-}
-
-static void isp_goc_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_goc_config *arg)
-{
-	int i;
-	u32 value;
-
-	rkisp_iowrite32(params_vdev, arg->mode, CIF_ISP_GAMMA_OUT_MODE_V12);
-
-	for (i = 0; i < params_vdev->config->gamma_out_max_samples / 2; i++) {
-		value = CIF_ISP_GAMMA_REG_VALUE_V12(
-			arg->gamma_y[2 * i + 1],
-			arg->gamma_y[2 * i]);
-		rkisp_iowrite32(params_vdev, value,
-				CIF_ISP_GAMMA_OUT_Y_0_V12 + i * 4);
-	}
-}
-
-/* ISP Cross Talk */
-static void isp_ctk_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_ctk_config *arg)
-{
-	rkisp_iowrite32(params_vdev, arg->coeff0, CIF_ISP_CT_COEFF_0);
-	rkisp_iowrite32(params_vdev, arg->coeff1, CIF_ISP_CT_COEFF_1);
-	rkisp_iowrite32(params_vdev, arg->coeff2, CIF_ISP_CT_COEFF_2);
-	rkisp_iowrite32(params_vdev, arg->coeff3, CIF_ISP_CT_COEFF_3);
-	rkisp_iowrite32(params_vdev, arg->coeff4, CIF_ISP_CT_COEFF_4);
-	rkisp_iowrite32(params_vdev, arg->coeff5, CIF_ISP_CT_COEFF_5);
-	rkisp_iowrite32(params_vdev, arg->coeff6, CIF_ISP_CT_COEFF_6);
-	rkisp_iowrite32(params_vdev, arg->coeff7, CIF_ISP_CT_COEFF_7);
-	rkisp_iowrite32(params_vdev, arg->coeff8, CIF_ISP_CT_COEFF_8);
-	rkisp_iowrite32(params_vdev, arg->ct_offset_r, CIF_ISP_CT_OFFSET_R);
-	rkisp_iowrite32(params_vdev, arg->ct_offset_g, CIF_ISP_CT_OFFSET_G);
-	rkisp_iowrite32(params_vdev, arg->ct_offset_b, CIF_ISP_CT_OFFSET_B);
-}
-
-static void isp_ctk_enable(struct rkisp_isp_params_vdev *params_vdev, bool en)
-{
-	if (en)
-		return;
-
-	/* Write back the default values. */
-	rkisp_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_0);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_1);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_2);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_3);
-	rkisp_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_4);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_5);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_6);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_7);
-	rkisp_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_8);
-
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_R);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_G);
-	rkisp_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_B);
-}
-
-/* ISP White Balance Mode */
-static void isp_awb_meas_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_meas_config *arg)
-{
-	u32 reg_val = 0;
-	/* based on the mode,configure the awb module */
-	if (arg->awb_mode == CIFISP_AWB_MODE_YCBCR) {
-		/* Reference Cb and Cr */
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AWB_REF_CR_SET(arg->awb_ref_cr) |
-				arg->awb_ref_cb, CIF_ISP_AWB_REF_V10);
-		/* Yc Threshold */
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AWB_MAX_Y_SET(arg->max_y) |
-				CIF_ISP_AWB_MIN_Y_SET(arg->min_y) |
-				CIF_ISP_AWB_MAX_CS_SET(arg->max_csum) |
-				arg->min_c, CIF_ISP_AWB_THRESH_V10);
-	}
-
-	reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
-	if (arg->enable_ymax_cmp)
-		reg_val |= CIF_ISP_AWB_YMAX_CMP_EN;
-	else
-		reg_val &= ~CIF_ISP_AWB_YMAX_CMP_EN;
-	rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
-
-	/* window offset */
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.v_offs, CIF_ISP_AWB_WND_V_OFFS_V10);
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.h_offs, CIF_ISP_AWB_WND_H_OFFS_V10);
-	/* AWB window size */
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.v_size, CIF_ISP_AWB_WND_V_SIZE_V10);
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.h_size, CIF_ISP_AWB_WND_H_SIZE_V10);
-	/* Number of frames */
-	rkisp_iowrite32(params_vdev,
-			arg->frames, CIF_ISP_AWB_FRAMES_V10);
-}
-
-static void isp_awb_meas_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_meas_config *arg)
-{
-	u32 reg_val = 0;
-	/* based on the mode,configure the awb module */
-	if (arg->awb_mode == CIFISP_AWB_MODE_YCBCR) {
-		/* Reference Cb and Cr */
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AWB_REF_CR_SET(arg->awb_ref_cr) |
-				arg->awb_ref_cb, CIF_ISP_AWB_REF_V12);
-		/* Yc Threshold */
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AWB_MAX_Y_SET(arg->max_y) |
-				CIF_ISP_AWB_MIN_Y_SET(arg->min_y) |
-				CIF_ISP_AWB_MAX_CS_SET(arg->max_csum) |
-				arg->min_c, CIF_ISP_AWB_THRESH_V12);
-	}
-
-	reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V12);
-	if (arg->enable_ymax_cmp)
-		reg_val |= CIF_ISP_AWB_YMAX_CMP_EN;
-	else
-		reg_val &= ~CIF_ISP_AWB_YMAX_CMP_EN;
-	reg_val &= ~CIF_ISP_AWB_SET_FRAMES_MASK_V12;
-	reg_val |= CIF_ISP_AWB_SET_FRAMES_V12(arg->frames);
-	rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V12);
-
-	/* window offset */
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.v_offs << 16 |
-			arg->awb_wnd.h_offs,
-			CIF_ISP_AWB_OFFS_V12);
-	/* AWB window size */
-	rkisp_iowrite32(params_vdev,
-			arg->awb_wnd.v_size << 16 |
-			arg->awb_wnd.h_size,
-			CIF_ISP_AWB_SIZE_V12);
-}
-
-static void isp_awb_meas_enable_v10(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_meas_config *arg, bool en)
-{
-	u32 reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
-
-	/* switch off */
-	reg_val &= CIF_ISP_AWB_MODE_MASK_NONE;
-
-	if (en) {
-		if (arg->awb_mode == CIFISP_AWB_MODE_RGB)
-			reg_val |= CIF_ISP_AWB_MODE_RGB_EN;
-		else
-			reg_val |= CIF_ISP_AWB_MODE_YCBCR_EN;
-
-		rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
-
-		/* Measurements require AWB block be active. */
-		/* TODO: need to enable here ? awb_gain_enable has done this */
-		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
-				   CIF_ISP_CTRL_ISP_AWB_ENA);
-	} else {
-		rkisp_iowrite32(params_vdev,
-				reg_val, CIF_ISP_AWB_PROP_V10);
-		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-				     CIF_ISP_CTRL_ISP_AWB_ENA);
-	}
-}
-
-static void isp_awb_meas_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_meas_config *arg, bool en)
-{
-	u32 reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V12);
-
-	/* switch off */
-	reg_val &= CIF_ISP_AWB_MODE_MASK_NONE;
-
-	if (en) {
-		if (arg->awb_mode == CIFISP_AWB_MODE_RGB)
-			reg_val |= CIF_ISP_AWB_MODE_RGB_EN;
-		else
-			reg_val |= CIF_ISP_AWB_MODE_YCBCR_EN;
-
-		rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V12);
-
-		/* Measurements require AWB block be active. */
-		/* TODO: need to enable here ? awb_gain_enable has done this */
-		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
-				   CIF_ISP_CTRL_ISP_AWB_ENA);
-	} else {
-		rkisp_iowrite32(params_vdev,
-				reg_val, CIF_ISP_AWB_PROP_V12);
-		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-				     CIF_ISP_CTRL_ISP_AWB_ENA);
-	}
-}
-
-static void isp_awb_gain_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_gain_config *arg)
-{
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_AWB_GAIN_R_SET(arg->gain_green_r) |
-			arg->gain_green_b, CIF_ISP_AWB_GAIN_G_V10);
-
-	rkisp_iowrite32(params_vdev, CIF_ISP_AWB_GAIN_R_SET(arg->gain_red) |
-			arg->gain_blue, CIF_ISP_AWB_GAIN_RB_V10);
-}
-
-static void isp_awb_gain_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_awb_gain_config *arg)
-{
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_AWB_GAIN_R_SET(arg->gain_green_r) |
-			arg->gain_green_b, CIF_ISP_AWB_GAIN_G_V12);
-
-	rkisp_iowrite32(params_vdev, CIF_ISP_AWB_GAIN_R_SET(arg->gain_red) |
-			arg->gain_blue, CIF_ISP_AWB_GAIN_RB_V12);
-}
-
-static void isp_aec_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_aec_config *arg)
-{
-	unsigned int block_hsize, block_vsize;
-	u32 exp_ctrl;
-
-	/* avoid to override the old enable value */
-	exp_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_EXP_CTRL);
-	exp_ctrl &= CIF_ISP_EXP_ENA;
-	if (arg->autostop)
-		exp_ctrl |= CIF_ISP_EXP_CTRL_AUTOSTOP;
-	if (arg->mode == CIFISP_EXP_MEASURING_MODE_1)
-		exp_ctrl |= CIF_ISP_EXP_CTRL_MEASMODE_1;
-	rkisp_iowrite32(params_vdev, exp_ctrl, CIF_ISP_EXP_CTRL);
-
-	rkisp_iowrite32(params_vdev,
-			arg->meas_window.h_offs, CIF_ISP_EXP_H_OFFSET_V10);
-	rkisp_iowrite32(params_vdev,
-			arg->meas_window.v_offs, CIF_ISP_EXP_V_OFFSET_V10);
-
-	block_hsize = arg->meas_window.h_size / CIF_ISP_EXP_COLUMN_NUM_V10 - 1;
-	block_vsize = arg->meas_window.v_size / CIF_ISP_EXP_ROW_NUM_V10 - 1;
-
-	rkisp_iowrite32(params_vdev, CIF_ISP_EXP_H_SIZE_SET_V10(block_hsize),
-			CIF_ISP_EXP_H_SIZE_V10);
-	rkisp_iowrite32(params_vdev, CIF_ISP_EXP_V_SIZE_SET_V10(block_vsize),
-			CIF_ISP_EXP_V_SIZE_V10);
-}
-
-static void isp_aec_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_aec_config *arg)
-{
-	u32 exp_ctrl;
-	u32 block_hsize, block_vsize;
-	u32 wnd_num_idx = 1;
-	const u32 ae_wnd_num[] = {
-		5, 9, 15, 15
-	};
-
-	/* avoid to override the old enable value */
-	exp_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_EXP_CTRL);
-	exp_ctrl &= CIF_ISP_EXP_ENA;
-	if (arg->autostop)
-		exp_ctrl |= CIF_ISP_EXP_CTRL_AUTOSTOP;
-	if (arg->mode == CIFISP_EXP_MEASURING_MODE_1)
-		exp_ctrl |= CIF_ISP_EXP_CTRL_MEASMODE_1;
-	exp_ctrl |= CIF_ISP_EXP_CTRL_WNDNUM_SET_V12(wnd_num_idx);
-	rkisp_iowrite32(params_vdev, exp_ctrl, CIF_ISP_EXP_CTRL);
-
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_EXP_V_OFFSET_SET_V12(arg->meas_window.v_offs) |
-			CIF_ISP_EXP_H_OFFSET_SET_V12(arg->meas_window.h_offs),
-			CIF_ISP_EXP_OFFS_V12);
-
-	block_hsize = arg->meas_window.h_size / ae_wnd_num[wnd_num_idx] - 1;
-	block_vsize = arg->meas_window.v_size / ae_wnd_num[wnd_num_idx] - 1;
-
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_EXP_V_SIZE_SET_V12(block_vsize) |
-			CIF_ISP_EXP_H_SIZE_SET_V12(block_hsize),
-			CIF_ISP_EXP_SIZE_V12);
-}
-
-static void isp_cproc_config(struct rkisp_isp_params_vdev *params_vdev,
-			     const struct cifisp_cproc_config *arg)
-{
-	struct cifisp_isp_other_cfg *cur_other_cfg = &params_vdev->cur_params.others;
-	struct cifisp_ie_config *cur_ie_config = &cur_other_cfg->ie_config;
-	u32 effect = cur_ie_config->effect;
-	u32 quantization = params_vdev->quantization;
-
-	rkisp_iowrite32(params_vdev, arg->contrast, CIF_C_PROC_CONTRAST);
-	rkisp_iowrite32(params_vdev, arg->hue, CIF_C_PROC_HUE);
-	rkisp_iowrite32(params_vdev, arg->sat, CIF_C_PROC_SATURATION);
-	rkisp_iowrite32(params_vdev, arg->brightness, CIF_C_PROC_BRIGHTNESS);
-
-	if (quantization != V4L2_QUANTIZATION_FULL_RANGE ||
-	    effect != V4L2_COLORFX_NONE) {
-		isp_param_clear_bits(params_vdev, CIF_C_PROC_CTRL,
-				     CIF_C_PROC_YOUT_FULL |
-				     CIF_C_PROC_YIN_FULL |
-				     CIF_C_PROC_COUT_FULL);
-	} else {
-		isp_param_set_bits(params_vdev, CIF_C_PROC_CTRL,
-				   CIF_C_PROC_YOUT_FULL |
-				   CIF_C_PROC_YIN_FULL |
-				   CIF_C_PROC_COUT_FULL);
-	}
-}
-
-static void isp_hst_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_hst_config *arg)
-{
-	unsigned int block_hsize, block_vsize;
-	const u32 hist_weight_regs[] = {
-		CIF_ISP_HIST_WEIGHT_00TO30_V10, CIF_ISP_HIST_WEIGHT_40TO21_V10,
-		CIF_ISP_HIST_WEIGHT_31TO12_V10, CIF_ISP_HIST_WEIGHT_22TO03_V10,
-		CIF_ISP_HIST_WEIGHT_13TO43_V10, CIF_ISP_HIST_WEIGHT_04TO34_V10,
-		CIF_ISP_HIST_WEIGHT_44_V10,
-	};
-	int i;
-	const u8 *weight;
-	u32 hist_prop;
-
-	/* avoid to override the old enable value */
-	hist_prop = rkisp_ioread32(params_vdev, CIF_ISP_HIST_PROP_V10);
-	hist_prop &= CIF_ISP_HIST_PROP_MODE_MASK_V10;
-	hist_prop |= CIF_ISP_HIST_PREDIV_SET_V10(arg->histogram_predivider);
-	rkisp_iowrite32(params_vdev, hist_prop, CIF_ISP_HIST_PROP_V10);
-	rkisp_iowrite32(params_vdev,
-			arg->meas_window.h_offs,
-			CIF_ISP_HIST_H_OFFS_V10);
-	rkisp_iowrite32(params_vdev,
-			arg->meas_window.v_offs,
-			CIF_ISP_HIST_V_OFFS_V10);
-
-	block_hsize = arg->meas_window.h_size / CIF_ISP_HIST_COLUMN_NUM_V10 - 1;
-	block_vsize = arg->meas_window.v_size / CIF_ISP_HIST_ROW_NUM_V10 - 1;
-
-	rkisp_iowrite32(params_vdev, block_hsize, CIF_ISP_HIST_H_SIZE_V10);
-	rkisp_iowrite32(params_vdev, block_vsize, CIF_ISP_HIST_V_SIZE_V10);
-
-	weight = arg->hist_weight;
-	for (i = 0; i < ARRAY_SIZE(hist_weight_regs); ++i, weight += 4)
-		rkisp_iowrite32(params_vdev, CIF_ISP_HIST_WEIGHT_SET_V10(
-				weight[0], weight[1], weight[2], weight[3]),
-				hist_weight_regs[i]);
-}
-
-static void isp_hst_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_hst_config *arg)
-{
-	u32 i, j;
-	u32 value;
-	u32 hist_ctrl;
-	u32 block_hsize, block_vsize;
-	u32 wnd_num_idx, hist_weight_num;
-	u8 weight15x15[CIF_ISP_HIST_WEIGHT_REG_SIZE_V12];
-	const u32 hist_wnd_num[] = {
-		5, 9, 15, 15
-	};
-
-	/* now we just support 9x9 window */
-	wnd_num_idx = 1;
-	memset(weight15x15, 0x00, sizeof(weight15x15));
-	/* avoid to override the old enable value */
-	hist_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_HIST_CTRL_V12);
-	hist_ctrl &= CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
-		     CIF_ISP_HIST_CTRL_EN_MASK_V12;
-	hist_ctrl = hist_ctrl |
-		    CIF_ISP_HIST_CTRL_INTRSEL_SET_V12(1) |
-		    CIF_ISP_HIST_CTRL_DATASEL_SET_V12(0) |
-		    CIF_ISP_HIST_CTRL_WATERLINE_SET_V12(0) |
-		    CIF_ISP_HIST_CTRL_AUTOSTOP_SET_V12(0) |
-		    CIF_ISP_HIST_CTRL_WNDNUM_SET_V12(1) |
-		    CIF_ISP_HIST_CTRL_STEPSIZE_SET_V12(arg->histogram_predivider);
-	rkisp_iowrite32(params_vdev, hist_ctrl, CIF_ISP_HIST_CTRL_V12);
-
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_HIST_OFFS_SET_V12(arg->meas_window.h_offs,
-						  arg->meas_window.v_offs),
-			CIF_ISP_HIST_OFFS_V12);
-
-	block_hsize = arg->meas_window.h_size / hist_wnd_num[wnd_num_idx] - 1;
-	block_vsize = arg->meas_window.v_size / hist_wnd_num[wnd_num_idx] - 1;
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_HIST_SIZE_SET_V12(block_hsize, block_vsize),
-			CIF_ISP_HIST_SIZE_V12);
-
-	for (i = 0; i < hist_wnd_num[wnd_num_idx]; i++) {
-		for (j = 0; j < hist_wnd_num[wnd_num_idx]; j++) {
-			weight15x15[i * CIF_ISP_HIST_ROW_NUM_V12 + j] =
-				arg->hist_weight[i * hist_wnd_num[wnd_num_idx] + j];
-		}
-	}
-
-	hist_weight_num = CIF_ISP_HIST_WEIGHT_REG_SIZE_V12;
-	for (i = 0; i < (hist_weight_num / 4); i++) {
-		value = CIF_ISP_HIST_WEIGHT_SET_V12(
-				 weight15x15[4 * i + 0],
-				 weight15x15[4 * i + 1],
-				 weight15x15[4 * i + 2],
-				 weight15x15[4 * i + 3]);
-		rkisp_iowrite32(params_vdev, value,
-				CIF_ISP_HIST_WEIGHT_V12 + 4 * i);
-	}
-	value = CIF_ISP_HIST_WEIGHT_SET_V12(
-				 weight15x15[4 * i + 0], 0, 0, 0);
-	rkisp_iowrite32(params_vdev, value,
-			CIF_ISP_HIST_WEIGHT_V12 + 4 * i);
-}
-
-static void isp_hst_enable_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_hst_config *arg, bool en)
-{
-	if (en) {
-		u32 hist_prop = rkisp_ioread32(params_vdev, CIF_ISP_HIST_PROP_V10);
-
-		hist_prop &= ~CIF_ISP_HIST_PROP_MODE_MASK_V10;
-		hist_prop |= arg->mode;
-		isp_param_set_bits(params_vdev, CIF_ISP_HIST_PROP_V10, hist_prop);
-	} else {
-		isp_param_clear_bits(params_vdev, CIF_ISP_HIST_PROP_V10,
-				CIF_ISP_HIST_PROP_MODE_MASK_V10);
-	}
-}
-
-static void isp_hst_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_hst_config *arg, bool en)
-{
-	if (en) {
-		u32 hist_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_HIST_CTRL_V12);
-
-		hist_ctrl &= ~CIF_ISP_HIST_CTRL_MODE_MASK_V12;
-		hist_ctrl |= CIF_ISP_HIST_CTRL_MODE_SET_V12(arg->mode);
-		hist_ctrl |= CIF_ISP_HIST_CTRL_EN_SET_V12(1);
-		isp_param_set_bits(params_vdev, CIF_ISP_HIST_CTRL_V12, hist_ctrl);
-	} else {
-		isp_param_clear_bits(params_vdev, CIF_ISP_HIST_CTRL_V12,
-				CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
-				CIF_ISP_HIST_CTRL_EN_MASK_V12);
-	}
-}
-
-static void isp_afm_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_afc_config *arg)
-{
-	int i;
-	size_t num_of_win = min_t(size_t, ARRAY_SIZE(arg->afm_win),
-				  arg->num_afm_win);
-	u32 afm_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_AFM_CTRL);
-
-	/* Switch off to configure. */
-	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
-
-	for (i = 0; i < num_of_win; i++) {
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_offs) |
-				CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_offs),
-				CIF_ISP_AFM_LT_A + i * 8);
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_size +
-						     arg->afm_win[i].h_offs) |
-				CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_size +
-						     arg->afm_win[i].v_offs),
-				CIF_ISP_AFM_RB_A + i * 8);
-	}
-	rkisp_iowrite32(params_vdev, arg->thres, CIF_ISP_AFM_THRES);
-	rkisp_iowrite32(params_vdev, arg->var_shift, CIF_ISP_AFM_VAR_SHIFT);
-	/* restore afm status */
-	rkisp_iowrite32(params_vdev, afm_ctrl, CIF_ISP_AFM_CTRL);
-}
-
-static void isp_afm_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_afc_config *arg)
-{
-	unsigned int i;
-	u32 lum_var_shift, afm_var_shift;
-	size_t num_of_win = min_t(size_t, ARRAY_SIZE(arg->afm_win),
-				  arg->num_afm_win);
-	u32 afm_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_AFM_CTRL);
-
-	/* Switch off to configure. */
-	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
-
-	for (i = 0; i < num_of_win; i++) {
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_offs) |
-				CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_offs),
-				CIF_ISP_AFM_LT_A + i * 8);
-		rkisp_iowrite32(params_vdev,
-				CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_size +
-						     arg->afm_win[i].h_offs) |
-				CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_size +
-						     arg->afm_win[i].v_offs),
-				CIF_ISP_AFM_RB_A + i * 8);
-	}
-	rkisp_iowrite32(params_vdev, arg->thres, CIF_ISP_AFM_THRES);
-
-	lum_var_shift = CIF_ISP_AFM_GET_LUM_SHIFT_a_V12(arg->var_shift);
-	afm_var_shift = CIF_ISP_AFM_GET_AFM_SHIFT_a_V12(arg->var_shift);
-	rkisp_iowrite32(params_vdev,
-			CIF_ISP_AFM_SET_SHIFT_a_V12(lum_var_shift, afm_var_shift) |
-			CIF_ISP_AFM_SET_SHIFT_b_V12(lum_var_shift, afm_var_shift) |
-			CIF_ISP_AFM_SET_SHIFT_c_V12(lum_var_shift, afm_var_shift),
-			CIF_ISP_AFM_VAR_SHIFT);
-
-	/* restore afm status */
-	rkisp_iowrite32(params_vdev, afm_ctrl, CIF_ISP_AFM_CTRL);
-}
-
-static void isp_ie_config(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_ie_config *arg)
-{
-	u32 eff_ctrl;
-
-	eff_ctrl = rkisp_ioread32(params_vdev, CIF_IMG_EFF_CTRL);
-	eff_ctrl &= ~CIF_IMG_EFF_CTRL_MODE_MASK;
-
-	if (params_vdev->quantization == V4L2_QUANTIZATION_FULL_RANGE)
-		eff_ctrl |= CIF_IMG_EFF_CTRL_YCBCR_FULL;
-
-	switch (arg->effect) {
-	case V4L2_COLORFX_SEPIA:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SEPIA;
-		break;
-	case V4L2_COLORFX_SET_CBCR:
-		rkisp_iowrite32(params_vdev, arg->eff_tint, CIF_IMG_EFF_TINT);
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SEPIA;
-		break;
-		/*
-		 * Color selection is similar to water color(AQUA):
-		 * grayscale + selected color w threshold
-		 */
-	case V4L2_COLORFX_AQUA:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_COLOR_SEL;
-		rkisp_iowrite32(params_vdev, arg->color_sel,
-				CIF_IMG_EFF_COLOR_SEL);
-		break;
-	case V4L2_COLORFX_EMBOSS:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_EMBOSS;
-		rkisp_iowrite32(params_vdev, arg->eff_mat_1,
-				CIF_IMG_EFF_MAT_1);
-		rkisp_iowrite32(params_vdev, arg->eff_mat_2,
-				CIF_IMG_EFF_MAT_2);
-		rkisp_iowrite32(params_vdev, arg->eff_mat_3,
-				CIF_IMG_EFF_MAT_3);
-		break;
-	case V4L2_COLORFX_SKETCH:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SKETCH;
-		rkisp_iowrite32(params_vdev, arg->eff_mat_3,
-				CIF_IMG_EFF_MAT_3);
-		rkisp_iowrite32(params_vdev, arg->eff_mat_4,
-				CIF_IMG_EFF_MAT_4);
-		rkisp_iowrite32(params_vdev, arg->eff_mat_5,
-				CIF_IMG_EFF_MAT_5);
-		break;
-	case V4L2_COLORFX_BW:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_BLACKWHITE;
-		break;
-	case V4L2_COLORFX_NEGATIVE:
-		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_NEGATIVE;
-		break;
-	default:
-		break;
-	}
-
-	rkisp_iowrite32(params_vdev, eff_ctrl, CIF_IMG_EFF_CTRL);
-}
-
-static void isp_ie_enable(struct rkisp_isp_params_vdev *params_vdev, bool en)
-{
-	if (en) {
-		isp_param_set_bits(params_vdev, CIF_ICCL, CIF_ICCL_IE_CLK);
-		isp_param_set_bits(params_vdev, CIF_IMG_EFF_CTRL,
-				   CIF_IMG_EFF_CTRL_ENABLE);
-		isp_param_set_bits(params_vdev, CIF_IMG_EFF_CTRL,
-				   CIF_IMG_EFF_CTRL_CFG_UPD);
-	} else {
-		isp_param_clear_bits(params_vdev, CIF_IMG_EFF_CTRL,
-				     CIF_IMG_EFF_CTRL_ENABLE);
-		isp_param_clear_bits(params_vdev, CIF_ICCL, CIF_ICCL_IE_CLK);
-	}
-}
-
-static void isp_csm_config(struct rkisp_isp_params_vdev *params_vdev,
-			   bool full_range)
-{
-	const u16 full_range_coeff[] = {
-		0x0026, 0x004b, 0x000f,
-		0x01ea, 0x01d6, 0x0040,
-		0x0040, 0x01ca, 0x01f6
-	};
-	const u16 limited_range_coeff[] = {
-		0x0021, 0x0040, 0x000d,
-		0x01ed, 0x01db, 0x0038,
-		0x0038, 0x01d1, 0x01f7,
-	};
-	unsigned int i;
-
-	if (full_range) {
-		for (i = 0; i < ARRAY_SIZE(full_range_coeff); i++)
-			rkisp_iowrite32(params_vdev, full_range_coeff[i],
-					CIF_ISP_CC_COEFF_0 + i * 4);
-
-		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
-				   CIF_ISP_CTRL_ISP_CSM_Y_FULL_ENA |
-				   CIF_ISP_CTRL_ISP_CSM_C_FULL_ENA);
-	} else {
-		for (i = 0; i < ARRAY_SIZE(limited_range_coeff); i++)
-			rkisp_iowrite32(params_vdev, limited_range_coeff[i],
-					CIF_ISP_CC_COEFF_0 + i * 4);
-
-		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-				     CIF_ISP_CTRL_ISP_CSM_Y_FULL_ENA |
-				     CIF_ISP_CTRL_ISP_CSM_C_FULL_ENA);
-	}
-}
-
-/* ISP De-noise Pre-Filter(DPF) function */
-static void isp_dpf_config(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_dpf_config *arg)
-{
-	unsigned int isp_dpf_mode;
-	unsigned int spatial_coeff;
-	unsigned int i;
-
-	switch (arg->gain.mode) {
-	case CIFISP_DPF_GAIN_USAGE_NF_GAINS:
-		isp_dpf_mode = CIF_ISP_DPF_MODE_USE_NF_GAIN |
-				CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
-		break;
-	case CIFISP_DPF_GAIN_USAGE_LSC_GAINS:
-		isp_dpf_mode = CIF_ISP_DPF_MODE_LSC_GAIN_COMP;
-		break;
-	case CIFISP_DPF_GAIN_USAGE_NF_LSC_GAINS:
-		isp_dpf_mode = CIF_ISP_DPF_MODE_USE_NF_GAIN |
-				CIF_ISP_DPF_MODE_AWB_GAIN_COMP |
-				CIF_ISP_DPF_MODE_LSC_GAIN_COMP;
-		break;
-	case CIFISP_DPF_GAIN_USAGE_AWB_GAINS:
-		isp_dpf_mode = CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
-		break;
-	case CIFISP_DPF_GAIN_USAGE_AWB_LSC_GAINS:
-		isp_dpf_mode = CIF_ISP_DPF_MODE_LSC_GAIN_COMP |
-				CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
-		break;
-	case CIFISP_DPF_GAIN_USAGE_DISABLED:
-	default:
-		isp_dpf_mode = 0;
-		break;
-	}
-
-	if (arg->nll.scale_mode == CIFISP_NLL_SCALE_LOGARITHMIC)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_NLL_SEGMENTATION;
-	if (arg->rb_flt.fltsize == CIFISP_DPF_RB_FILTERSIZE_9x9)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_RB_FLTSIZE_9x9;
-	if (!arg->rb_flt.r_enable)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_R_FLT_DIS;
-	if (!arg->rb_flt.b_enable)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_B_FLT_DIS;
-	if (!arg->g_flt.gb_enable)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_GB_FLT_DIS;
-	if (!arg->g_flt.gr_enable)
-		isp_dpf_mode |= CIF_ISP_DPF_MODE_GR_FLT_DIS;
-
-	isp_param_set_bits(params_vdev, CIF_ISP_DPF_MODE, isp_dpf_mode);
-	rkisp_iowrite32(params_vdev, arg->gain.nf_b_gain,
-			CIF_ISP_DPF_NF_GAIN_B);
-	rkisp_iowrite32(params_vdev, arg->gain.nf_r_gain,
-			CIF_ISP_DPF_NF_GAIN_R);
-	rkisp_iowrite32(params_vdev, arg->gain.nf_gb_gain,
-			CIF_ISP_DPF_NF_GAIN_GB);
-	rkisp_iowrite32(params_vdev, arg->gain.nf_gr_gain,
-			CIF_ISP_DPF_NF_GAIN_GR);
-
-	for (i = 0; i < CIFISP_DPF_MAX_NLF_COEFFS; i++) {
-		rkisp_iowrite32(params_vdev, arg->nll.coeff[i],
-				CIF_ISP_DPF_NULL_COEFF_0 + i * 4);
-	}
-
-	spatial_coeff = arg->g_flt.spatial_coeff[0] |
-			(arg->g_flt.spatial_coeff[1] << 8) |
-			(arg->g_flt.spatial_coeff[2] << 16) |
-			(arg->g_flt.spatial_coeff[3] << 24);
-	rkisp_iowrite32(params_vdev, spatial_coeff,
-			CIF_ISP_DPF_S_WEIGHT_G_1_4);
-
-	spatial_coeff = arg->g_flt.spatial_coeff[4] |
-			(arg->g_flt.spatial_coeff[5] << 8);
-	rkisp_iowrite32(params_vdev, spatial_coeff,
-			CIF_ISP_DPF_S_WEIGHT_G_5_6);
-
-	spatial_coeff = arg->rb_flt.spatial_coeff[0] |
-			(arg->rb_flt.spatial_coeff[1] << 8) |
-			(arg->rb_flt.spatial_coeff[2] << 16) |
-			(arg->rb_flt.spatial_coeff[3] << 24);
-	rkisp_iowrite32(params_vdev, spatial_coeff,
-			CIF_ISP_DPF_S_WEIGHT_RB_1_4);
-
-	spatial_coeff = arg->rb_flt.spatial_coeff[4] |
-			(arg->rb_flt.spatial_coeff[5] << 8);
-	rkisp_iowrite32(params_vdev, spatial_coeff,
-			CIF_ISP_DPF_S_WEIGHT_RB_5_6);
-}
-
-static void isp_dpf_strength_config(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_dpf_strength_config *arg)
-{
-	rkisp_iowrite32(params_vdev, arg->b, CIF_ISP_DPF_STRENGTH_B);
-	rkisp_iowrite32(params_vdev, arg->g, CIF_ISP_DPF_STRENGTH_G);
-	rkisp_iowrite32(params_vdev, arg->r, CIF_ISP_DPF_STRENGTH_R);
-}
-
-static void isp_dummy_enable(struct rkisp_isp_params_vdev *params_vdev,
-			     bool en)
-{
-}
-
-static void isp_wdr_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_wdr_config *arg)
-{
-}
-
-static void isp_wdr_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       const struct cifisp_wdr_config *arg)
-{
-	int i;
-
-	for (i = 0; i < CIFISP_WDR_SIZE; i++) {
-		if (i <= 39)
-			rkisp_iowrite32(params_vdev, arg->c_wdr[i],
-					CIF_ISP_WDR_CTRL + i * 4);
-		else
-			rkisp_iowrite32(params_vdev, arg->c_wdr[i],
-					CIF_ISP_RKWDR_CTRL0 + (i - 40) * 4);
-	}
-}
-
-static void isp_wdr_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
-			       bool en)
-{
-	if (en)
-		rkisp_iowrite32(params_vdev, 0x030cf1,
-				CIF_ISP_RKWDR_CTRL0);
-	else
-		rkisp_iowrite32(params_vdev, 0x030cf0,
-				CIF_ISP_RKWDR_CTRL0);
-}
-
-static void
-isp_demosaiclp_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_demosaiclp_config *arg)
-{
-}
-
-static void
-isp_demosaiclp_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_demosaiclp_config *arg)
-{
-	u32 val;
-	u32 level_sel;
-
-	val = CIF_ISP_PACK_4BYTE(arg->lu_divided[0],
-				 arg->lu_divided[1],
-				 arg->lu_divided[2],
-				 arg->lu_divided[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_LU_DIVID);
-
-	val = CIF_ISP_PACK_4BYTE(arg->thgrad_divided[0],
-				 arg->thgrad_divided[1],
-				 arg->thgrad_divided[2],
-				 arg->thgrad_divided[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_THGRAD_DIVID0123);
-	rkisp_iowrite32(params_vdev,
-			arg->thgrad_divided[4],
-			CIF_ISP_FILT_THGRAD_DIVID4);
-
-	val = CIF_ISP_PACK_4BYTE(arg->thdiff_divided[0],
-				 arg->thdiff_divided[1],
-				 arg->thdiff_divided[2],
-				 arg->thdiff_divided[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_THDIFF_DIVID0123);
-	rkisp_iowrite32(params_vdev,
-			arg->thdiff_divided[4],
-			CIF_ISP_FILT_THDIFF_DIVID4);
-
-	val = CIF_ISP_PACK_4BYTE(arg->thcsc_divided[0],
-				 arg->thcsc_divided[1],
-				 arg->thcsc_divided[2],
-				 arg->thcsc_divided[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_THCSC_DIVID0123);
-	rkisp_iowrite32(params_vdev, arg->thcsc_divided[4],
-			CIF_ISP_FILT_THCSC_DIVID4);
-
-	val = CIF_ISP_PACK_2SHORT(arg->thvar_divided[0],
-				  arg->thvar_divided[1]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_THVAR_DIVID01);
-
-	val = CIF_ISP_PACK_2SHORT(arg->thvar_divided[2],
-				  arg->thvar_divided[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_THVAR_DIVID23);
-	rkisp_iowrite32(params_vdev, arg->thvar_divided[4],
-			CIF_ISP_FILT_THVAR_DIVID4);
-
-	rkisp_iowrite32(params_vdev, arg->th_grad,
-			CIF_ISP_FILT_TH_GRAD);
-	rkisp_iowrite32(params_vdev, arg->th_diff,
-			CIF_ISP_FILT_TH_DIFF);
-	rkisp_iowrite32(params_vdev, arg->th_csc,
-			CIF_ISP_FILT_TH_CSC);
-	rkisp_iowrite32(params_vdev, arg->th_var,
-			CIF_ISP_FILT_TH_VAR);
-
-	val = CIF_ISP_PACK_4BYTE(arg->thvar_r_fct,
-				 arg->thdiff_r_fct,
-				 arg->thgrad_r_fct,
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_R_FCT);
-
-	val = CIF_ISP_PACK_4BYTE(arg->thgrad_b_fct,
-				 arg->thdiff_b_fct,
-				 arg->thvar_b_fct,
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_ISP_FILT_B_FCT);
-
-	isp_param_set_bits(params_vdev,
-			   CIF_ISP_FILT_MODE,
-			   arg->rb_filter_en << 3 |
-			   arg->hp_filter_en << 2);
-
-	level_sel = rkisp_ioread32(params_vdev, CIF_ISP_FILT_LELEL_SEL);
-	level_sel &= CIF_ISP_FLT_LEVEL_OLD_LP;
-	level_sel |= arg->th_var_en << 20 |
-		     arg->th_csc_en << 19 |
-		     arg->th_diff_en << 18 |
-		     arg->th_grad_en << 17 |
-		     arg->similarity_th << 12 |
-		     arg->flat_level_sel << 8 |
-		     arg->pattern_level_sel << 4 |
-		     arg->edge_level_sel;
-
-	rkisp_iowrite32(params_vdev, level_sel,
-			CIF_ISP_FILT_LELEL_SEL);
-}
-
-static void
-isp_demosaiclp_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
-			  bool en)
-{
-	if (en)
-		isp_param_clear_bits(params_vdev,
-				     CIF_ISP_FILT_LELEL_SEL,
-				     CIF_ISP_FLT_LEVEL_OLD_LP);
-	else
-		isp_param_set_bits(params_vdev,
-				   CIF_ISP_FILT_LELEL_SEL,
-				   CIF_ISP_FLT_LEVEL_OLD_LP);
-}
-
-static void
-isp_rkiesharp_config_v10(struct rkisp_isp_params_vdev *params_vdev,
-			 const struct cifisp_rkiesharp_config *arg)
-{
-}
-
-static void
-isp_rkiesharp_config_v12(struct rkisp_isp_params_vdev *params_vdev,
-			 const struct cifisp_rkiesharp_config *arg)
-{
-	u32 i;
-	u32 val;
-	u32 eff_ctrl;
-	u32 minmax[5];
-
-	val = CIF_ISP_PACK_4BYTE(arg->yavg_thr[0],
-				 arg->yavg_thr[1],
-				 arg->yavg_thr[2],
-				 arg->yavg_thr[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_YAVG_THR);
-
-	val = CIF_ISP_PACK_4BYTE(arg->delta1[0],
-				 arg->delta2[0],
-				 arg->delta1[1],
-				 arg->delta2[1]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_DELTA_P0_P1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->delta1[2],
-				 arg->delta2[2],
-				 arg->delta1[3],
-				 arg->delta2[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_DELTA_P2_P3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->delta1[4],
-				 arg->delta2[4],
-				 0,
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_DELTA_P4);
-
-	for (i = 0; i < 5; i++)
-		minmax[i] = arg->minnumber[i] << 4 | arg->maxnumber[i];
-	val = CIF_ISP_PACK_4BYTE(minmax[0],
-				 minmax[1],
-				 minmax[2],
-				 minmax[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_NPIXEL_P0_P1_P2_P3);
-	rkisp_iowrite32(params_vdev, minmax[4],
-			CIF_RKSHARP_NPIXEL_P4);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[0],
-				 arg->gauss_flat_coe[1],
-				 arg->gauss_flat_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_FLAT_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[3],
-				 arg->gauss_flat_coe[4],
-				 arg->gauss_flat_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_FLAT_COE2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[6],
-				 arg->gauss_flat_coe[7],
-				 arg->gauss_flat_coe[8],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_FLAT_COE3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[0],
-				 arg->gauss_noise_coe[1],
-				 arg->gauss_noise_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_NOISE_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[3],
-				 arg->gauss_noise_coe[4],
-				 arg->gauss_noise_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_NOISE_COE2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[6],
-				 arg->gauss_noise_coe[7],
-				 arg->gauss_noise_coe[8],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_NOISE_COE3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[0],
-				 arg->gauss_other_coe[1],
-				 arg->gauss_other_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_OTHER_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[3],
-				 arg->gauss_other_coe[4],
-				 arg->gauss_other_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_OTHER_COE2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[6],
-				 arg->gauss_other_coe[7],
-				 arg->gauss_other_coe[8],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GAUSS_OTHER_COE3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line1_filter_coe[0],
-				 arg->line1_filter_coe[1],
-				 arg->line1_filter_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE1_FILTER_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line1_filter_coe[3],
-				 arg->line1_filter_coe[4],
-				 arg->line1_filter_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE1_FILTER_COE2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[0],
-				 arg->line2_filter_coe[1],
-				 arg->line2_filter_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE2_FILTER_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[3],
-				 arg->line2_filter_coe[4],
-				 arg->line2_filter_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE2_FILTER_COE2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[6],
-				 arg->line2_filter_coe[7],
-				 arg->line2_filter_coe[8],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE2_FILTER_COE3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line3_filter_coe[0],
-				 arg->line3_filter_coe[1],
-				 arg->line3_filter_coe[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE3_FILTER_COE1);
-
-	val = CIF_ISP_PACK_4BYTE(arg->line3_filter_coe[3],
-				 arg->line3_filter_coe[4],
-				 arg->line3_filter_coe[5],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_LINE3_FILTER_COE2);
-
-	val = CIF_ISP_PACK_2SHORT(arg->grad_seq[0],
-				  arg->grad_seq[1]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GRAD_SEQ_P0_P1);
-
-	val = CIF_ISP_PACK_2SHORT(arg->grad_seq[2],
-				  arg->grad_seq[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_GRAD_SEQ_P2_P3);
-
-	val = CIF_ISP_PACK_4BYTE(arg->sharp_factor[0],
-				 arg->sharp_factor[1],
-				 arg->sharp_factor[2],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_SHARP_FACTOR_P0_P1_P2);
-
-	val = CIF_ISP_PACK_4BYTE(arg->sharp_factor[3],
-				 arg->sharp_factor[4],
-				 0,
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_SHARP_FACTOR_P3_P4);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[0],
-				 arg->uv_gauss_flat_coe[1],
-				 arg->uv_gauss_flat_coe[2],
-				 arg->uv_gauss_flat_coe[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_FLAT_COE11_COE14);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[4],
-				 arg->uv_gauss_flat_coe[5],
-				 arg->uv_gauss_flat_coe[6],
-				 arg->uv_gauss_flat_coe[7]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_FLAT_COE15_COE23);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[8],
-				 arg->uv_gauss_flat_coe[9],
-				 arg->uv_gauss_flat_coe[10],
-				 arg->uv_gauss_flat_coe[11]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_FLAT_COE24_COE32);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[12],
-				 arg->uv_gauss_flat_coe[13],
-				 arg->uv_gauss_flat_coe[14],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_FLAT_COE33_COE35);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[0],
-				 arg->uv_gauss_noise_coe[1],
-				 arg->uv_gauss_noise_coe[2],
-				 arg->uv_gauss_noise_coe[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_NOISE_COE11_COE14);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[4],
-				 arg->uv_gauss_noise_coe[5],
-				 arg->uv_gauss_noise_coe[6],
-				 arg->uv_gauss_noise_coe[7]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_NOISE_COE15_COE23);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[8],
-				 arg->uv_gauss_noise_coe[9],
-				 arg->uv_gauss_noise_coe[10],
-				 arg->uv_gauss_noise_coe[11]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_NOISE_COE24_COE32);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[12],
-				 arg->uv_gauss_noise_coe[13],
-				 arg->uv_gauss_noise_coe[14],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_NOISE_COE33_COE35);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[0],
-				 arg->uv_gauss_other_coe[1],
-				 arg->uv_gauss_other_coe[2],
-				 arg->uv_gauss_other_coe[3]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_OTHER_COE11_COE14);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[4],
-				 arg->uv_gauss_other_coe[5],
-				 arg->uv_gauss_other_coe[6],
-				 arg->uv_gauss_other_coe[7]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_OTHER_COE15_COE23);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[8],
-				 arg->uv_gauss_other_coe[9],
-				 arg->uv_gauss_other_coe[10],
-				 arg->uv_gauss_other_coe[11]);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_OTHER_COE24_COE32);
-
-	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[12],
-				 arg->uv_gauss_other_coe[13],
-				 arg->uv_gauss_other_coe[14],
-				 0);
-	rkisp_iowrite32(params_vdev, val,
-			CIF_RKSHARP_UV_GAUSS_OTHER_COE33_COE35);
-
-	rkisp_iowrite32(params_vdev, arg->switch_avg,
-			CIF_RKSHARP_CTRL);
-
-	rkisp_iowrite32(params_vdev,
-			arg->coring_thr,
-			CIF_IMG_EFF_SHARPEN);
-
-	val = rkisp_ioread32(params_vdev, CIF_IMG_EFF_MAT_3) & 0x0F;
-	val |= (arg->lap_mat_coe[0] & 0x0F) << 4 |
-	       (arg->lap_mat_coe[1] & 0x0F) << 8 |
-	       (arg->lap_mat_coe[2] & 0x0F) << 12;
-	rkisp_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_3);
-
-	val = (arg->lap_mat_coe[3] & 0x0F) << 0 |
-	       (arg->lap_mat_coe[4] & 0x0F) << 4 |
-	       (arg->lap_mat_coe[5] & 0x0F) << 8 |
-	       (arg->lap_mat_coe[6] & 0x0F) << 12;
-	rkisp_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_4);
-
-	val = (arg->lap_mat_coe[7] & 0x0F) << 0 |
-	       (arg->lap_mat_coe[8] & 0x0F) << 4;
-	rkisp_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_5);
-
-	eff_ctrl = rkisp_ioread32(params_vdev, CIF_IMG_EFF_CTRL);
-	eff_ctrl &= ~CIF_IMG_EFF_CTRL_MODE_MASK;
-	eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_RKSHARPEN;
-
-	if (arg->full_range)
-		eff_ctrl |= CIF_IMG_EFF_CTRL_YCBCR_FULL;
-
-	rkisp_iowrite32(params_vdev, eff_ctrl, CIF_IMG_EFF_CTRL);
-}
-
-static struct rkisp_isp_params_ops rkisp_v10_isp_params_ops = {
-	.dpcc_config = isp_dpcc_config,
-	.bls_config = isp_bls_config,
-	.lsc_config = isp_lsc_config,
-	.lsc_matrix_config = isp_lsc_matrix_config_v10,
-	.flt_config = isp_flt_config,
-	.bdm_config = isp_bdm_config,
-	.sdg_config = isp_sdg_config,
-	.goc_config = isp_goc_config_v10,
-	.ctk_config = isp_ctk_config,
-	.ctk_enable = isp_ctk_enable,
-	.awb_meas_config = isp_awb_meas_config_v10,
-	.awb_meas_enable = isp_awb_meas_enable_v10,
-	.awb_gain_config = isp_awb_gain_config_v10,
-	.aec_config = isp_aec_config_v10,
-	.cproc_config = isp_cproc_config,
-	.hst_config = isp_hst_config_v10,
-	.hst_enable = isp_hst_enable_v10,
-	.afm_config = isp_afm_config_v10,
-	.ie_config = isp_ie_config,
-	.ie_enable = isp_ie_enable,
-	.csm_config = isp_csm_config,
-	.dpf_config = isp_dpf_config,
-	.dpf_strength_config = isp_dpf_strength_config,
-	.wdr_config = isp_wdr_config_v10,
-	.wdr_enable = isp_dummy_enable,
-	.demosaiclp_config = isp_demosaiclp_config_v10,
-	.demosaiclp_enable = isp_dummy_enable,
-	.rkiesharp_config = isp_rkiesharp_config_v10,
-	.rkiesharp_enable = isp_dummy_enable,
-};
-
-static struct rkisp_isp_params_ops rkisp_v12_isp_params_ops = {
-	.dpcc_config = isp_dpcc_config,
-	.bls_config = isp_bls_config,
-	.lsc_config = isp_lsc_config,
-	.lsc_matrix_config = isp_lsc_matrix_config_v12,
-	.flt_config = isp_flt_config,
-	.bdm_config = isp_bdm_config,
-	.sdg_config = isp_sdg_config,
-	.goc_config = isp_goc_config_v12,
-	.ctk_config = isp_ctk_config,
-	.ctk_enable = isp_ctk_enable,
-	.awb_meas_config = isp_awb_meas_config_v12,
-	.awb_meas_enable = isp_awb_meas_enable_v12,
-	.awb_gain_config = isp_awb_gain_config_v12,
-	.aec_config = isp_aec_config_v12,
-	.cproc_config = isp_cproc_config,
-	.hst_config = isp_hst_config_v12,
-	.hst_enable = isp_hst_enable_v12,
-	.afm_config = isp_afm_config_v12,
-	.ie_config = isp_ie_config,
-	.ie_enable = isp_ie_enable,
-	.csm_config = isp_csm_config,
-	.dpf_config = isp_dpf_config,
-	.dpf_strength_config = isp_dpf_strength_config,
-	.wdr_config = isp_wdr_config_v12,
-	.wdr_enable = isp_wdr_enable_v12,
-	.demosaiclp_config = isp_demosaiclp_config_v12,
-	.demosaiclp_enable = isp_demosaiclp_enable_v12,
-	.rkiesharp_config = isp_rkiesharp_config_v12,
-	.rkiesharp_enable = isp_ie_enable,
-};
-
-static struct rkisp_isp_params_config rkisp_v10_isp_params_config = {
-	.gamma_out_max_samples = 17,
-	.hst_weight_grids_size = 28,
-};
-
-static struct rkisp_isp_params_config rkisp_v12_isp_params_config = {
-	.gamma_out_max_samples = 34,
-	.hst_weight_grids_size = 81,
-};
-
-static __maybe_unused
-void __isp_isr_other_config(struct rkisp_isp_params_vdev *params_vdev,
-			    const struct rkisp1_isp_params_cfg *new_params)
-{
-	unsigned int module_en_update, module_cfg_update, module_ens;
-	struct rkisp_isp_params_ops *ops = params_vdev->ops;
-	struct ispsd_in_fmt *in_fmt = &params_vdev->dev->isp_sdev.in_fmt;
-	bool ie_enable;
-	bool iesharp_enable;
-	bool is_grey_sensor;
-
-	is_grey_sensor = in_fmt->mbus_code == MEDIA_BUS_FMT_Y8_1X8 ||
-			 in_fmt->mbus_code == MEDIA_BUS_FMT_Y10_1X10 ||
-			 in_fmt->mbus_code == MEDIA_BUS_FMT_Y12_1X12;
-
-	module_en_update = new_params->module_en_update;
-	module_cfg_update = new_params->module_cfg_update;
-	module_ens = new_params->module_ens;
-
-	ie_enable = !!(module_ens & CIFISP_MODULE_IE);
-	iesharp_enable = !!(module_ens & CIFISP_MODULE_RK_IESHARP);
-	if (ie_enable && iesharp_enable) {
-		iesharp_enable = false;
-		dev_err(params_vdev->dev->dev,
-			"You can only use one mode in IE and RK_IESHARP!\n");
-	}
-
-	if ((module_en_update & CIFISP_MODULE_DPCC) ||
-	    (module_cfg_update & CIFISP_MODULE_DPCC)) {
-		/*update dpc config */
-		if ((module_cfg_update & CIFISP_MODULE_DPCC))
-			ops->dpcc_config(params_vdev,
-					 &new_params->others.dpcc_config);
-
-		if (module_en_update & CIFISP_MODULE_DPCC) {
-			if (!!(module_ens & CIFISP_MODULE_DPCC))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_DPCC_MODE,
-						   CIF_ISP_DPCC_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_DPCC_MODE,
-						     CIF_ISP_DPCC_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_BLS) ||
-	    (module_cfg_update & CIFISP_MODULE_BLS)) {
-		/* update bls config */
-		if ((module_cfg_update & CIFISP_MODULE_BLS))
-			ops->bls_config(params_vdev, &new_params->others.bls_config);
-
-		if (module_en_update & CIFISP_MODULE_BLS) {
-			if (!!(module_ens & CIFISP_MODULE_BLS))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_BLS_CTRL,
-						   CIF_ISP_BLS_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_BLS_CTRL,
-						     CIF_ISP_BLS_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_SDG) ||
-	    (module_cfg_update & CIFISP_MODULE_SDG)) {
-		/* update sdg config */
-		if ((module_cfg_update & CIFISP_MODULE_SDG))
-			ops->sdg_config(params_vdev, &new_params->others.sdg_config);
-
-		if (module_en_update & CIFISP_MODULE_SDG) {
-			if (!!(module_ens & CIFISP_MODULE_SDG))
-				isp_param_set_bits(params_vdev,
-						CIF_ISP_CTRL,
-						CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						CIF_ISP_CTRL,
-						CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_LSC) ||
-	    (module_cfg_update & CIFISP_MODULE_LSC)) {
-		/* update lsc config */
-		if ((module_cfg_update & CIFISP_MODULE_LSC))
-			ops->lsc_config(params_vdev, &new_params->others.lsc_config);
-
-		if (module_en_update & CIFISP_MODULE_LSC) {
-			if (!!(module_ens & CIFISP_MODULE_LSC))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_LSC_CTRL,
-						   CIF_ISP_LSC_CTRL_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_LSC_CTRL,
-						     CIF_ISP_LSC_CTRL_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_AWB_GAIN) ||
-	    (module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
-		/* update awb gains */
-		if ((module_cfg_update & CIFISP_MODULE_AWB_GAIN))
-			ops->awb_gain_config(params_vdev,
-					     &new_params->others.awb_gain_config);
-
-		if (module_en_update & CIFISP_MODULE_AWB_GAIN) {
-			if (!!(module_ens & CIFISP_MODULE_AWB_GAIN))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_CTRL,
-						   CIF_ISP_CTRL_ISP_AWB_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_CTRL,
-						     CIF_ISP_CTRL_ISP_AWB_ENA);
-		}
-	}
-
-	if (((module_en_update & CIFISP_MODULE_BDM) ||
-	    (module_cfg_update & CIFISP_MODULE_BDM)) &&
-	    !is_grey_sensor) {
-		/* update bdm config */
-		if ((module_cfg_update & CIFISP_MODULE_BDM))
-			ops->bdm_config(params_vdev, &new_params->others.bdm_config);
-
-		if (module_en_update & CIFISP_MODULE_BDM) {
-			if (!!(module_ens & CIFISP_MODULE_BDM))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_DEMOSAIC,
-						   CIF_ISP_DEMOSAIC_BYPASS);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_DEMOSAIC,
-						     CIF_ISP_DEMOSAIC_BYPASS);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_DEMOSAICLP) ||
-	    (module_cfg_update & CIFISP_MODULE_DEMOSAICLP)) {
-		/* update demosaiclp  config */
-		if ((module_cfg_update & CIFISP_MODULE_DEMOSAICLP))
-			ops->demosaiclp_config(params_vdev,
-				&new_params->others.demosaiclp_config);
-
-		if (module_en_update & CIFISP_MODULE_DEMOSAICLP)
-			ops->demosaiclp_enable(params_vdev,
-				!!(module_ens & CIFISP_MODULE_DEMOSAICLP));
-	}
-
-	if ((module_en_update & CIFISP_MODULE_FLT) ||
-	    (module_cfg_update & CIFISP_MODULE_FLT)) {
-		/* update filter config */
-		if ((module_cfg_update & CIFISP_MODULE_FLT))
-			ops->flt_config(params_vdev, &new_params->others.flt_config);
-
-		if (module_en_update & CIFISP_MODULE_FLT) {
-			if (!!(module_ens & CIFISP_MODULE_FLT))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_FILT_MODE,
-						   CIF_ISP_FLT_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_FILT_MODE,
-						     CIF_ISP_FLT_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_CTK) ||
-	    (module_cfg_update & CIFISP_MODULE_CTK)) {
-		/* update ctk config */
-		if ((module_cfg_update & CIFISP_MODULE_CTK))
-			ops->ctk_config(params_vdev, &new_params->others.ctk_config);
-
-		if (module_en_update & CIFISP_MODULE_CTK)
-			ops->ctk_enable(params_vdev,
-					!!(module_ens & CIFISP_MODULE_CTK));
-	}
-
-	if ((module_en_update & CIFISP_MODULE_GOC) ||
-	    (module_cfg_update & CIFISP_MODULE_GOC)) {
-		/* update goc config */
-		if ((module_cfg_update & CIFISP_MODULE_GOC))
-			ops->goc_config(params_vdev, &new_params->others.goc_config);
-
-		if (module_en_update & CIFISP_MODULE_GOC) {
-			if (!!(module_ens & CIFISP_MODULE_GOC))
-				isp_param_set_bits(params_vdev,
-						CIF_ISP_CTRL,
-						CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						CIF_ISP_CTRL,
-						CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_CPROC) ||
-	    (module_cfg_update & CIFISP_MODULE_CPROC)) {
-		/* update cproc config */
-		if ((module_cfg_update & CIFISP_MODULE_CPROC)) {
-			ops->cproc_config(params_vdev,
-					  &new_params->others.cproc_config);
-
-		}
-
-		if (module_en_update & CIFISP_MODULE_CPROC) {
-			if (!!(module_ens & CIFISP_MODULE_CPROC))
-				isp_param_set_bits(params_vdev,
-						   CIF_C_PROC_CTRL,
-						   CIF_C_PROC_CTR_ENABLE);
-			else
-				isp_param_clear_bits(params_vdev,
-						   CIF_C_PROC_CTRL,
-						   CIF_C_PROC_CTR_ENABLE);
-		}
-	}
-
-	if (((module_en_update & CIFISP_MODULE_IE) ||
-	     (module_cfg_update & CIFISP_MODULE_IE)) && ie_enable) {
-		/* update ie config */
-		if ((module_cfg_update & CIFISP_MODULE_IE))
-			ops->ie_config(params_vdev, &new_params->others.ie_config);
-	}
-
-	if (((module_en_update & CIFISP_MODULE_RK_IESHARP) ||
-	     (module_cfg_update & CIFISP_MODULE_RK_IESHARP)) && iesharp_enable) {
-		/* update rkiesharp config */
-		if ((module_cfg_update & CIFISP_MODULE_RK_IESHARP))
-			ops->rkiesharp_config(params_vdev,
-				&new_params->others.rkiesharp_config);
-	}
-
-	if (ie_enable || iesharp_enable)
-		ops->ie_enable(params_vdev, true);
-	else
-		ops->ie_enable(params_vdev, false);
-
-	if ((module_en_update & CIFISP_MODULE_DPF) ||
-	    (module_cfg_update & CIFISP_MODULE_DPF)) {
-		/* update dpf  config */
-		if ((module_cfg_update & CIFISP_MODULE_DPF))
-			ops->dpf_config(params_vdev, &new_params->others.dpf_config);
-
-		if (module_en_update & CIFISP_MODULE_DPF) {
-			if (!!(module_ens & CIFISP_MODULE_DPF))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_DPF_MODE,
-						   CIF_ISP_DPF_MODE_EN);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_DPF_MODE,
-						     CIF_ISP_DPF_MODE_EN);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_DPF_STRENGTH) ||
-	    (module_cfg_update & CIFISP_MODULE_DPF_STRENGTH)) {
-		/* update dpf strength config */
-		ops->dpf_strength_config(params_vdev,
-					 &new_params->others.dpf_strength_config);
-	}
-
-	if ((module_en_update & CIFISP_MODULE_WDR) ||
-	    (module_cfg_update & CIFISP_MODULE_WDR)) {
-		/* update wdr config */
-		if ((module_cfg_update & CIFISP_MODULE_WDR))
-			ops->wdr_config(params_vdev,
-				&new_params->others.wdr_config);
-
-		if (module_en_update & CIFISP_MODULE_WDR)
-			ops->wdr_enable(params_vdev,
-				       !!(module_ens & CIFISP_MODULE_WDR));
-	}
-}
-
-static __maybe_unused
-void __isp_isr_meas_config(struct rkisp_isp_params_vdev *params_vdev,
-			   struct  rkisp1_isp_params_cfg *new_params)
-{
-	unsigned int module_en_update, module_cfg_update, module_ens;
-	struct rkisp_isp_params_ops *ops = params_vdev->ops;
-
-	module_en_update = new_params->module_en_update;
-	module_cfg_update = new_params->module_cfg_update;
-	module_ens = new_params->module_ens;
-
-	if ((module_en_update & CIFISP_MODULE_AWB) ||
-	    (module_cfg_update & CIFISP_MODULE_AWB)) {
-		/* update awb config */
-		if ((module_cfg_update & CIFISP_MODULE_AWB))
-			ops->awb_meas_config(params_vdev,
-					     &new_params->meas.awb_meas_config);
-
-		if (module_en_update & CIFISP_MODULE_AWB)
-			ops->awb_meas_enable(params_vdev,
-					     &new_params->meas.awb_meas_config,
-					     !!(module_ens & CIFISP_MODULE_AWB));
-	}
-
-	if ((module_en_update & CIFISP_MODULE_AFC) ||
-	    (module_cfg_update & CIFISP_MODULE_AFC)) {
-		/* update afc config */
-		if ((module_cfg_update & CIFISP_MODULE_AFC))
-			ops->afm_config(params_vdev, &new_params->meas.afc_config);
-
-		if (module_en_update & CIFISP_MODULE_AFC) {
-			if (!!(module_ens & CIFISP_MODULE_AFC))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_AFM_CTRL,
-						   CIF_ISP_AFM_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_AFM_CTRL,
-						     CIF_ISP_AFM_ENA);
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_HST) ||
-	    (module_cfg_update & CIFISP_MODULE_HST)) {
-		/* update hst config */
-		if ((module_cfg_update & CIFISP_MODULE_HST))
-			ops->hst_config(params_vdev, &new_params->meas.hst_config);
-
-		if (module_en_update & CIFISP_MODULE_HST)
-			ops->hst_enable(params_vdev,
-					&new_params->meas.hst_config,
-					!!(module_ens & CIFISP_MODULE_HST));
-	}
-
-	if ((module_en_update & CIFISP_MODULE_AEC) ||
-	    (module_cfg_update & CIFISP_MODULE_AEC)) {
-		/* update aec config */
-		if ((module_cfg_update & CIFISP_MODULE_AEC))
-			ops->aec_config(params_vdev, &new_params->meas.aec_config);
-
-		if (module_en_update & CIFISP_MODULE_AEC) {
-			if (!!(module_ens & CIFISP_MODULE_AEC))
-				isp_param_set_bits(params_vdev,
-						   CIF_ISP_EXP_CTRL,
-						   CIF_ISP_EXP_ENA);
-			else
-				isp_param_clear_bits(params_vdev,
-						     CIF_ISP_EXP_CTRL,
-						     CIF_ISP_EXP_ENA);
-		}
-	}
-}
-
-static __maybe_unused
-void __preisp_isr_update_hdrae_para(struct rkisp_isp_params_vdev *params_vdev,
-				    struct rkisp1_isp_params_cfg *new_params)
-{
-	struct preisp_hdrae_para_s *hdrae;
-	struct cifisp_lsc_config *lsc;
-	struct cifisp_awb_gain_config *awb_gain;
-	unsigned int module_en_update, module_cfg_update, module_ens;
-	int i, ret;
-
-	hdrae = &params_vdev->hdrae_para;
-	module_en_update = new_params->module_en_update;
-	module_cfg_update = new_params->module_cfg_update;
-	module_ens = new_params->module_ens;
-	lsc = &new_params->others.lsc_config;
-	awb_gain = &new_params->others.awb_gain_config;
-
-	if (!params_vdev->dev->hdr.sensor)
-		return;
-
-	if ((module_en_update & CIFISP_MODULE_AWB_GAIN) ||
-	    (module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
-		/* update awb gains */
-		if ((module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
-			hdrae->r_gain = awb_gain->gain_red;
-			hdrae->b_gain = awb_gain->gain_blue;
-			hdrae->gr_gain = awb_gain->gain_green_r;
-			hdrae->gb_gain = awb_gain->gain_green_b;
-		}
-
-		if (module_en_update & CIFISP_MODULE_AWB_GAIN) {
-			if (!(module_ens & CIFISP_MODULE_AWB_GAIN)) {
-				hdrae->r_gain = 0x0100;
-				hdrae->b_gain = 0x0100;
-				hdrae->gr_gain = 0x0100;
-				hdrae->gb_gain = 0x0100;
-			}
-		}
-	}
-
-	if ((module_en_update & CIFISP_MODULE_LSC) ||
-	    (module_cfg_update & CIFISP_MODULE_LSC)) {
-		/* update lsc config */
-		if ((module_cfg_update & CIFISP_MODULE_LSC))
-			memcpy(hdrae->lsc_table, lsc->gr_data_tbl,
-				PREISP_LSCTBL_SIZE);
-
-		if (module_en_update & CIFISP_MODULE_LSC) {
-			if (!(module_ens & CIFISP_MODULE_LSC))
-				for (i = 0; i < PREISP_LSCTBL_SIZE; i++)
-					hdrae->lsc_table[i] = 0x0400;
-		}
-	}
-
-	ret = v4l2_subdev_call(params_vdev->dev->hdr.sensor, core, ioctl,
-			       PREISP_CMD_SAVE_HDRAE_PARAM, hdrae);
-	if (ret)
-		params_vdev->dev->hdr.sensor = NULL;
-}
-
-void rkisp_params_isr(struct rkisp_isp_params_vdev *params_vdev, u32 isp_mis)
-{
-	struct rkisp1_isp_params_cfg *new_params;
-	struct rkisp_buffer *cur_buf = NULL;
-	unsigned int cur_frame_id = -1;
-	cur_frame_id = atomic_read(&params_vdev->dev->isp_sdev.frm_sync_seq) - 1;
-
-	spin_lock(&params_vdev->config_lock);
-	if (!params_vdev->streamon) {
-		spin_unlock(&params_vdev->config_lock);
-		return;
-	}
-
-	/* get one empty buffer */
-	if (!list_empty(&params_vdev->params))
-		cur_buf = list_first_entry(&params_vdev->params,
-					   struct rkisp_buffer, queue);
-	if (!cur_buf) {
-		spin_unlock(&params_vdev->config_lock);
-		return;
-	}
-
-	new_params = (struct rkisp1_isp_params_cfg *)(cur_buf->vaddr[0]);
-
-	if (isp_mis & CIF_ISP_FRAME) {
-		u32 isp_ctrl;
-
-		list_del(&cur_buf->queue);
-
-		__isp_isr_other_config(params_vdev, new_params);
-		__isp_isr_meas_config(params_vdev, new_params);
-
-		/* update shadow register immediately */
-		isp_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_CTRL);
-		isp_ctrl |= CIF_ISP_CTRL_ISP_CFG_UPD;
-		rkisp_iowrite32(params_vdev, isp_ctrl, CIF_ISP_CTRL);
-
-		__preisp_isr_update_hdrae_para(params_vdev, new_params);
-
-		cur_buf->vb.sequence = cur_frame_id;
-		vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
-	}
-	spin_unlock(&params_vdev->config_lock);
-}
-
-static const struct cifisp_awb_meas_config awb_params_default_config = {
-	{
-		0, 0, RKISP_DEFAULT_WIDTH, RKISP_DEFAULT_HEIGHT
-	},
-	CIFISP_AWB_MODE_YCBCR, 200, 30, 20, 20, 0, 128, 128
-};
-
-static const struct cifisp_aec_config aec_params_default_config = {
-	CIFISP_EXP_MEASURING_MODE_0,
-	CIFISP_EXP_CTRL_AUTOSTOP_0,
-	{
-		RKISP_DEFAULT_WIDTH >> 2, RKISP_DEFAULT_HEIGHT >> 2,
-		RKISP_DEFAULT_WIDTH >> 1, RKISP_DEFAULT_HEIGHT >> 1
-	}
-};
-
-static const struct cifisp_hst_config hst_params_default_config = {
-	CIFISP_HISTOGRAM_MODE_RGB_COMBINED,
-	3,
-	{
-		RKISP_DEFAULT_WIDTH >> 2, RKISP_DEFAULT_HEIGHT >> 2,
-		RKISP_DEFAULT_WIDTH >> 1, RKISP_DEFAULT_HEIGHT >> 1
-	},
-	{
-		0, /* To be filled in with 0x01 at runtime. */
-	}
-};
-
-static const struct cifisp_afc_config afc_params_default_config = {
-	1,
-	{
-		{
-			300, 225, 200, 150
-		}
-	},
-	4,
-	14
-};
-
-static
-void rkisp_params_config_parameter(struct rkisp_isp_params_vdev *params_vdev)
-{
-	struct rkisp_isp_params_ops *ops = params_vdev->ops;
-	struct cifisp_hst_config hst = hst_params_default_config;
-	struct device *dev = params_vdev->dev->dev;
-	int i;
-
-	spin_lock(&params_vdev->config_lock);
-
-	ops->awb_meas_config(params_vdev, &awb_params_default_config);
-	ops->awb_meas_enable(params_vdev, &awb_params_default_config, true);
-
-	ops->aec_config(params_vdev, &aec_params_default_config);
-	isp_param_set_bits(params_vdev, CIF_ISP_EXP_CTRL, CIF_ISP_EXP_ENA);
-
-	ops->afm_config(params_vdev, &afc_params_default_config);
-	isp_param_set_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
-
-	memset(hst.hist_weight, 0x01, sizeof(hst.hist_weight));
-	ops->hst_config(params_vdev, &hst);
-	if (params_vdev->dev->isp_ver == ISP_V12 ||
-	    params_vdev->dev->isp_ver == ISP_V13) {
-		isp_param_set_bits(params_vdev, CIF_ISP_HIST_CTRL_V12,
-			   ~CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
-			   hst_params_default_config.mode);
-	} else {
-		isp_param_set_bits(params_vdev, CIF_ISP_HIST_PROP_V10,
-			   ~CIF_ISP_HIST_PROP_MODE_MASK_V10 |
-			   hst_params_default_config.mode);
-	}
-
-	/* set the  range */
-	if (params_vdev->quantization == V4L2_QUANTIZATION_FULL_RANGE)
-		ops->csm_config(params_vdev, true);
-	else
-		ops->csm_config(params_vdev, false);
-
-	/* disable color related config for grey sensor */
-	if (params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y8_1X8 ||
-	    params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y10_1X10 ||
-	    params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y12_1X12) {
-		ops->ctk_enable(params_vdev, false);
-		isp_param_clear_bits(params_vdev,
-				     CIF_ISP_CTRL,
-				     CIF_ISP_CTRL_ISP_AWB_ENA);
-		isp_param_clear_bits(params_vdev,
-				     CIF_ISP_LSC_CTRL,
-				     CIF_ISP_LSC_CTRL_ENA);
-	}
-
-	params_vdev->hdrae_para.r_gain = 0x0100;
-	params_vdev->hdrae_para.b_gain = 0x0100;
-	params_vdev->hdrae_para.gr_gain = 0x0100;
-	params_vdev->hdrae_para.gb_gain = 0x0100;
-	for (i = 0; i < PREISP_LSCTBL_SIZE; i++)
-		params_vdev->hdrae_para.lsc_table[i] = 0x0400;
-
-	/* override the default things */
-	if (!params_vdev->cur_params.module_cfg_update &&
-	    !params_vdev->cur_params.module_en_update)
-		dev_warn(dev, "can not get first iq setting in stream on\n");
-
-	__isp_isr_other_config(params_vdev, &params_vdev->cur_params);
-	__isp_isr_meas_config(params_vdev, &params_vdev->cur_params);
-	__preisp_isr_update_hdrae_para(params_vdev, &params_vdev->cur_params);
-
-	spin_unlock(&params_vdev->config_lock);
-}
-
-/* Not called when the camera active, thus not isr protection. */
-void rkisp_params_configure_isp(struct rkisp_isp_params_vdev *params_vdev,
-			  struct ispsd_in_fmt *in_fmt,
-			  enum v4l2_quantization quantization)
-{
-	params_vdev->quantization = quantization;
-	params_vdev->raw_type = in_fmt->bayer_pat;
-	params_vdev->in_mbus_code = in_fmt->mbus_code;
-	rkisp_params_config_parameter(params_vdev);
-}
-
-/* Not called when the camera active, thus not isr protection. */
-void rkisp_params_disable_isp(struct rkisp_isp_params_vdev *params_vdev)
-{
-	struct rkisp_isp_params_ops *ops = params_vdev->ops;
-
-	isp_param_clear_bits(params_vdev, CIF_ISP_DPCC_MODE, CIF_ISP_DPCC_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_LSC_CTRL,
-			     CIF_ISP_LSC_CTRL_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_BLS_CTRL, CIF_ISP_BLS_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-			     CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-			     CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_DEMOSAIC,
-			     CIF_ISP_DEMOSAIC_BYPASS);
-	isp_param_clear_bits(params_vdev, CIF_ISP_FILT_MODE, CIF_ISP_FLT_ENA);
-	ops->awb_meas_enable(params_vdev, NULL, false);
-	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
-			     CIF_ISP_CTRL_ISP_AWB_ENA);
-	isp_param_clear_bits(params_vdev, CIF_ISP_EXP_CTRL, CIF_ISP_EXP_ENA);
-	ops->ctk_enable(params_vdev, false);
-	isp_param_clear_bits(params_vdev, CIF_C_PROC_CTRL,
-			     CIF_C_PROC_CTR_ENABLE);
-	ops->hst_enable(params_vdev, NULL, false);
-	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
-	ops->ie_enable(params_vdev, false);
-	isp_param_clear_bits(params_vdev, CIF_ISP_DPF_MODE,
-			     CIF_ISP_DPF_MODE_EN);
-}
-
 static int rkisp_params_enum_fmt_meta_out(struct file *file, void *priv,
-					   struct v4l2_fmtdesc *f)
+					  struct v4l2_fmtdesc *f)
 {
 	struct video_device *video = video_devdata(file);
 	struct rkisp_isp_params_vdev *params_vdev = video_get_drvdata(video);
@@ -2377,7 +31,7 @@ static int rkisp_params_enum_fmt_meta_out(struct file *file, void *priv,
 }
 
 static int rkisp_params_g_fmt_meta_out(struct file *file, void *fh,
-					struct v4l2_format *f)
+				       struct v4l2_format *f)
 {
 	struct video_device *video = video_devdata(file);
 	struct rkisp_isp_params_vdev *params_vdev = video_get_drvdata(video);
@@ -2394,7 +48,7 @@ static int rkisp_params_g_fmt_meta_out(struct file *file, void *fh,
 }
 
 static int rkisp_params_querycap(struct file *file,
-				  void *priv, struct v4l2_capability *cap)
+				 void *priv, struct v4l2_capability *cap)
 {
 	struct video_device *vdev = video_devdata(file);
 	struct rkisp_isp_params_vdev *params_vdev = video_get_drvdata(vdev);
@@ -2409,7 +63,7 @@ static int rkisp_params_querycap(struct file *file,
 }
 
 static int rkisp_params_subs_evt(struct v4l2_fh *fh,
-				  const struct v4l2_event_subscription *sub)
+				 const struct v4l2_event_subscription *sub)
 {
 	if (sub->id != 0)
 		return -EINVAL;
@@ -2444,10 +98,10 @@ static const struct v4l2_ioctl_ops rkisp_params_ioctl = {
 };
 
 static int rkisp_params_vb2_queue_setup(struct vb2_queue *vq,
-					 unsigned int *num_buffers,
-					 unsigned int *num_planes,
-					 unsigned int sizes[],
-					 struct device *alloc_ctxs[])
+					unsigned int *num_buffers,
+					unsigned int *num_planes,
+					unsigned int sizes[],
+					struct device *alloc_ctxs[])
 {
 	struct rkisp_isp_params_vdev *params_vdev = vq->drv_priv;
 
@@ -2457,7 +111,10 @@ static int rkisp_params_vb2_queue_setup(struct vb2_queue *vq,
 
 	*num_planes = 1;
 
-	sizes[0] = sizeof(struct rkisp1_isp_params_cfg);
+	if (params_vdev->dev->isp_ver <= ISP_V13)
+		sizes[0] = sizeof(struct rkisp1_isp_params_cfg);
+	else
+		sizes[0] = sizeof(struct isp2x_isp_params_cfg);
 
 	INIT_LIST_HEAD(&params_vdev->params);
 	params_vdev->first_params = true;
@@ -2471,19 +128,17 @@ static void rkisp_params_vb2_buf_queue(struct vb2_buffer *vb)
 	struct rkisp_buffer *params_buf = to_rkisp_buffer(vbuf);
 	struct vb2_queue *vq = vb->vb2_queue;
 	struct rkisp_isp_params_vdev *params_vdev = vq->drv_priv;
-	struct rkisp1_isp_params_cfg *new_params;
+	void *first_param;
 	unsigned long flags;
 
 	unsigned int cur_frame_id = -1;
 	cur_frame_id = atomic_read(&params_vdev->dev->isp_sdev.frm_sync_seq) - 1;
-
 	if (params_vdev->first_params) {
-		new_params = (struct rkisp1_isp_params_cfg *)
-			(vb2_plane_vaddr(vb, 0));
+		first_param = vb2_plane_vaddr(vb, 0);
+		params_vdev->ops->save_first_param(params_vdev, first_param);
 		vbuf->sequence = cur_frame_id;
 		vb2_buffer_done(&params_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
 		params_vdev->first_params = false;
-		params_vdev->cur_params = *new_params;
 		wake_up(&params_vdev->dev->sync_onoff);
 		return;
 	}
@@ -2528,8 +183,7 @@ static void rkisp_params_vb2_stop_streaming(struct vb2_queue *vq)
 	}
 
 	/* clean module params */
-	params_vdev->cur_params.module_cfg_update = 0;
-	params_vdev->cur_params.module_en_update = 0;
+	params_vdev->ops->clear_first_param(params_vdev);
 }
 
 static int
@@ -2565,7 +219,7 @@ struct v4l2_file_operations rkisp_params_fops = {
 
 static int
 rkisp_params_init_vb2_queue(struct vb2_queue *q,
-			     struct rkisp_isp_params_vdev *params_vdev)
+			    struct rkisp_isp_params_vdev *params_vdev)
 {
 	q->type = V4L2_BUF_TYPE_META_OUTPUT;
 	q->io_modes = VB2_MMAP | VB2_USERPTR;
@@ -2587,14 +241,33 @@ static void rkisp_init_params_vdev(struct rkisp_isp_params_vdev *params_vdev)
 	params_vdev->vdev_fmt.fmt.meta.buffersize =
 		sizeof(struct rkisp1_isp_params_cfg);
 
-	if (params_vdev->dev->isp_ver == ISP_V12 ||
-	    params_vdev->dev->isp_ver == ISP_V13) {
-		params_vdev->ops = &rkisp_v12_isp_params_ops;
-		params_vdev->config = &rkisp_v12_isp_params_config;
-	} else {
-		params_vdev->ops = &rkisp_v10_isp_params_ops;
-		params_vdev->config = &rkisp_v10_isp_params_config;
-	}
+	if (params_vdev->dev->isp_ver <= ISP_V13)
+		rkisp_init_params_vdev_v1x(params_vdev);
+	else
+		rkisp_init_params_vdev_v2x(params_vdev);
+}
+
+void rkisp_params_isr(struct rkisp_isp_params_vdev *params_vdev,
+		      u32 isp_mis)
+{
+	params_vdev->ops->isr_hdl(params_vdev, isp_mis);
+}
+
+/* Not called when the camera active, thus not isr protection. */
+void rkisp_params_configure_isp(struct rkisp_isp_params_vdev *params_vdev,
+				struct ispsd_in_fmt *in_fmt,
+				enum v4l2_quantization quantization)
+{
+	params_vdev->quantization = quantization;
+	params_vdev->raw_type = in_fmt->bayer_pat;
+	params_vdev->in_mbus_code = in_fmt->mbus_code;
+	params_vdev->ops->config_isp(params_vdev);
+}
+
+/* Not called when the camera active, thus not isr protection. */
+void rkisp_params_disable_isp(struct rkisp_isp_params_vdev *params_vdev)
+{
+	params_vdev->ops->disable_isp(params_vdev);
 }
 
 int rkisp_register_params_vdev(struct rkisp_isp_params_vdev *params_vdev,
diff --git a/drivers/media/platform/rockchip/isp/isp_params.h b/drivers/media/platform/rockchip/isp/isp_params.h
index 7e557932dd25..35ce6acd5a1a 100644
--- a/drivers/media/platform/rockchip/isp/isp_params.h
+++ b/drivers/media/platform/rockchip/isp/isp_params.h
@@ -1,39 +1,8 @@
-/*
- * Rockchip isp1 driver
- *
- * Copyright (C) 2017 Rockchip Electronics Co., Ltd.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
 
-#ifndef _RKISP_ISP_H
-#define _RKISP_ISP_H
+#ifndef _RKISP_ISP_PARAM_H
+#define _RKISP_ISP_PARAM_H
 
 #include <linux/rkisp1-config.h>
 #include <linux/rk-preisp.h>
@@ -41,73 +10,16 @@
 
 struct rkisp_isp_params_vdev;
 struct rkisp_isp_params_ops {
-	void (*dpcc_config)(struct rkisp_isp_params_vdev *params_vdev,
-			    const struct cifisp_dpcc_config *arg);
-	void (*bls_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_bls_config *arg);
-	void (*lsc_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_lsc_config *arg);
-	void (*lsc_matrix_config)(struct rkisp_isp_params_vdev *params_vdev,
-				  const struct cifisp_lsc_config *pconfig);
-	void (*flt_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_flt_config *arg);
-	void (*bdm_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_bdm_config *arg);
-	void (*sdg_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_sdg_config *arg);
-	void (*goc_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_goc_config *arg);
-	void (*ctk_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_ctk_config *arg);
-	void (*ctk_enable)(struct rkisp_isp_params_vdev *params_vdev,
-			   bool en);
-	void (*awb_meas_config)(struct rkisp_isp_params_vdev *params_vdev,
-				const struct cifisp_awb_meas_config *arg);
-	void (*awb_meas_enable)(struct rkisp_isp_params_vdev *params_vdev,
-				const struct cifisp_awb_meas_config *arg,
-				bool en);
-	void (*awb_gain_config)(struct rkisp_isp_params_vdev *params_vdev,
-				const struct cifisp_awb_gain_config *arg);
-	void (*aec_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_aec_config *arg);
-	void (*cproc_config)(struct rkisp_isp_params_vdev *params_vdev,
-			     const struct cifisp_cproc_config *arg);
-	void (*hst_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_hst_config *arg);
-	void (*hst_enable)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_hst_config *arg, bool en);
-	void (*afm_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_afc_config *arg);
-	void (*ie_config)(struct rkisp_isp_params_vdev *params_vdev,
-			  const struct cifisp_ie_config *arg);
-	void (*ie_enable)(struct rkisp_isp_params_vdev *params_vdev,
-			  bool en);
-	void (*csm_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   bool full_range);
-	void (*dpf_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_dpf_config *arg);
-	void (*dpf_strength_config)(struct rkisp_isp_params_vdev *params_vdev,
-				    const struct cifisp_dpf_strength_config *arg);
-	void (*wdr_config)(struct rkisp_isp_params_vdev *params_vdev,
-			   const struct cifisp_wdr_config *arg);
-	void (*wdr_enable)(struct rkisp_isp_params_vdev *params_vdev, bool en);
-	void (*demosaiclp_config)(struct rkisp_isp_params_vdev *params_vdev,
-				  const struct cifisp_demosaiclp_config *arg);
-	void (*demosaiclp_enable)(struct rkisp_isp_params_vdev *params_vdev,
-				  bool en);
-	void (*rkiesharp_config)(struct rkisp_isp_params_vdev *params_vdev,
-				 const struct cifisp_rkiesharp_config *arg);
-	void (*rkiesharp_enable)(struct rkisp_isp_params_vdev *params_vdev,
-				 bool en);
-};
-
-struct rkisp_isp_params_config {
-	const int gamma_out_max_samples;
-	const int hst_weight_grids_size;
+	void (*save_first_param)(struct rkisp_isp_params_vdev *params_vdev, void *param);
+	void (*clear_first_param)(struct rkisp_isp_params_vdev *params_vdev);
+	void (*config_isp)(struct rkisp_isp_params_vdev *params_vdev);
+	void (*disable_isp)(struct rkisp_isp_params_vdev *params_vdev);
+	void (*isr_hdl)(struct rkisp_isp_params_vdev *params_vdev,
+			u32 isp_mis);
 };
 
 /*
- * struct rkisp_isp_subdev - ISP input parameters device
+ * struct rkisp_isp_params_vdev - ISP input parameters device
  *
  * @cur_params: Current ISP parameters
  * @first_params: the first params should take effect immediately
@@ -118,7 +30,10 @@ struct rkisp_isp_params_vdev {
 
 	spinlock_t config_lock;
 	struct list_head params;
-	struct rkisp1_isp_params_cfg cur_params;
+	union {
+		struct rkisp1_isp_params_cfg isp1x_params;
+		struct isp2x_isp_params_cfg isp2x_params;
+	};
 	struct v4l2_format vdev_fmt;
 	bool streamon;
 	bool first_params;
@@ -130,21 +45,22 @@ struct rkisp_isp_params_vdev {
 	struct preisp_hdrae_para_s hdrae_para;
 
 	struct rkisp_isp_params_ops *ops;
-	struct rkisp_isp_params_config *config;
+	void *priv_ops;
+	void *priv_cfg;
 };
 
 /* config params before ISP streaming */
 void rkisp_params_configure_isp(struct rkisp_isp_params_vdev *params_vdev,
-			  struct ispsd_in_fmt *in_fmt,
-			  enum v4l2_quantization quantization);
+				struct ispsd_in_fmt *in_fmt,
+				enum v4l2_quantization quantization);
 void rkisp_params_disable_isp(struct rkisp_isp_params_vdev *params_vdev);
 
 int rkisp_register_params_vdev(struct rkisp_isp_params_vdev *params_vdev,
-				struct v4l2_device *v4l2_dev,
-				struct rkisp_device *dev);
+			       struct v4l2_device *v4l2_dev,
+			       struct rkisp_device *dev);
 
 void rkisp_unregister_params_vdev(struct rkisp_isp_params_vdev *params_vdev);
 
 void rkisp_params_isr(struct rkisp_isp_params_vdev *params_vdev, u32 isp_mis);
 
-#endif /* _RKISP_ISP_H */
+#endif /* _RKISP_ISP_PARAM_H */
diff --git a/drivers/media/platform/rockchip/isp/isp_params_v1x.c b/drivers/media/platform/rockchip/isp/isp_params_v1x.c
new file mode 100644
index 000000000000..a9da239c0a39
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_params_v1x.c
@@ -0,0 +1,2362 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#include <media/v4l2-common.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-vmalloc.h>	/* for ISP params */
+#include <linux/rk-preisp.h>
+#include "dev.h"
+#include "regs.h"
+#include "isp_params_v1x.h"
+
+#define RKISP1_ISP_PARAMS_REQ_BUFS_MIN	2
+#define RKISP1_ISP_PARAMS_REQ_BUFS_MAX	8
+
+#define BLS_START_H_MAX_IS_VALID(val)	((val) < CIFISP_BLS_START_H_MAX)
+#define BLS_STOP_H_MAX_IS_VALID(val)	((val) < CIFISP_BLS_STOP_H_MAX)
+
+#define BLS_START_V_MAX_IS_VALID(val)	((val) < CIFISP_BLS_START_V_MAX)
+#define BLS_STOP_V_MAX_IS_VALID(val)	((val) < CIFISP_BLS_STOP_V_MAX)
+
+#define BLS_SAMPLE_MAX_IS_VALID(val)	((val) < CIFISP_BLS_SAMPLES_MAX)
+
+#define BLS_FIX_SUB_IS_VALID(val) \
+	((val) > (s16)CIFISP_BLS_FIX_SUB_MIN && (val) < CIFISP_BLS_FIX_SUB_MAX)
+
+#define RKISP1_ISP_DPCC_LINE_THRESH(n)	(CIF_ISP_DPCC_LINE_THRESH_1 + 0x14 * (n))
+#define RKISP1_ISP_DPCC_LINE_MAD_FAC(n) (CIF_ISP_DPCC_LINE_MAD_FAC_1 + 0x14 * (n))
+#define RKISP1_ISP_DPCC_PG_FAC(n)	(CIF_ISP_DPCC_PG_FAC_1 + 0x14 * (n))
+#define RKISP1_ISP_DPCC_RND_THRESH(n)	(CIF_ISP_DPCC_RND_THRESH_1 + 0x14 * (n))
+#define RKISP1_ISP_DPCC_RG_FAC(n)	(CIF_ISP_DPCC_RG_FAC_1 + 0x14 * (n))
+#define RKISP1_ISP_CC_COEFF(n)		(CIF_ISP_CC_COEFF_0 + (n) * 4)
+
+static inline void rkisp1_iowrite32(struct rkisp_isp_params_vdev *params_vdev,
+				    u32 value, u32 addr)
+{
+	iowrite32(value, params_vdev->dev->base_addr + addr);
+}
+
+static inline u32 rkisp1_ioread32(struct rkisp_isp_params_vdev *params_vdev,
+				  u32 addr)
+{
+	return ioread32(params_vdev->dev->base_addr + addr);
+}
+
+static inline void isp_param_set_bits(struct rkisp_isp_params_vdev
+				      *params_vdev,
+				      u32 reg, u32 bit_mask)
+{
+	u32 val;
+
+	val = rkisp1_ioread32(params_vdev, reg);
+	rkisp1_iowrite32(params_vdev, val | bit_mask, reg);
+}
+
+static inline void isp_param_clear_bits(struct rkisp_isp_params_vdev
+					*params_vdev,
+					u32 reg, u32 bit_mask)
+{
+	u32 val;
+
+	val = rkisp1_ioread32(params_vdev, reg);
+	rkisp1_iowrite32(params_vdev, val & ~bit_mask, reg);
+}
+
+/* ISP BP interface function */
+static void isp_dpcc_config(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct cifisp_dpcc_config *arg)
+{
+	unsigned int i;
+	u32 mode;
+
+	/* avoid to override the old enable value */
+	mode = rkisp1_ioread32(params_vdev, CIF_ISP_DPCC_MODE);
+	mode &= CIF_ISP_DPCC_ENA;
+	mode |= arg->mode & ~CIF_ISP_DPCC_ENA;
+	rkisp1_iowrite32(params_vdev, mode, CIF_ISP_DPCC_MODE);
+	rkisp1_iowrite32(params_vdev, arg->output_mode,
+			 CIF_ISP_DPCC_OUTPUT_MODE);
+	rkisp1_iowrite32(params_vdev, arg->set_use, CIF_ISP_DPCC_SET_USE);
+
+	rkisp1_iowrite32(params_vdev, arg->methods[0].method,
+			 CIF_ISP_DPCC_METHODS_SET_1);
+	rkisp1_iowrite32(params_vdev, arg->methods[1].method,
+			 CIF_ISP_DPCC_METHODS_SET_2);
+	rkisp1_iowrite32(params_vdev, arg->methods[2].method,
+			 CIF_ISP_DPCC_METHODS_SET_3);
+	for (i = 0; i < CIFISP_DPCC_METHODS_MAX; i++) {
+		rkisp1_iowrite32(params_vdev, arg->methods[i].line_thresh,
+				 RKISP1_ISP_DPCC_LINE_THRESH(i));
+		rkisp1_iowrite32(params_vdev, arg->methods[i].line_mad_fac,
+				 RKISP1_ISP_DPCC_LINE_MAD_FAC(i));
+		rkisp1_iowrite32(params_vdev, arg->methods[i].pg_fac,
+				 RKISP1_ISP_DPCC_PG_FAC(i));
+		rkisp1_iowrite32(params_vdev, arg->methods[i].rnd_thresh,
+				 RKISP1_ISP_DPCC_RND_THRESH(i));
+		rkisp1_iowrite32(params_vdev, arg->methods[i].rg_fac,
+				 RKISP1_ISP_DPCC_RG_FAC(i));
+	}
+
+	rkisp1_iowrite32(params_vdev, arg->rnd_offs, CIF_ISP_DPCC_RND_OFFS);
+	rkisp1_iowrite32(params_vdev, arg->ro_limits, CIF_ISP_DPCC_RO_LIMITS);
+}
+
+/* ISP black level subtraction interface function */
+static void isp_bls_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_bls_config *arg)
+{
+	/* avoid to override the old enable value */
+	u32 new_control;
+
+	new_control = rkisp1_ioread32(params_vdev, CIF_ISP_BLS_CTRL);
+	new_control &= CIF_ISP_BLS_ENA;
+	/* fixed subtraction values */
+	if (!arg->enable_auto) {
+		const struct cifisp_bls_fixed_val *pval = &arg->fixed_val;
+
+		switch (params_vdev->raw_type) {
+		case RAW_BGGR:
+			rkisp1_iowrite32(params_vdev,
+					 pval->r, CIF_ISP_BLS_D_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gr, CIF_ISP_BLS_C_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gb, CIF_ISP_BLS_B_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->b, CIF_ISP_BLS_A_FIXED);
+			break;
+		case RAW_GBRG:
+			rkisp1_iowrite32(params_vdev,
+					 pval->r, CIF_ISP_BLS_C_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gr, CIF_ISP_BLS_D_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gb, CIF_ISP_BLS_A_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->b, CIF_ISP_BLS_B_FIXED);
+			break;
+		case RAW_GRBG:
+			rkisp1_iowrite32(params_vdev,
+					 pval->r, CIF_ISP_BLS_B_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gr, CIF_ISP_BLS_A_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gb, CIF_ISP_BLS_D_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->b, CIF_ISP_BLS_C_FIXED);
+			break;
+		case RAW_RGGB:
+			rkisp1_iowrite32(params_vdev,
+					 pval->r, CIF_ISP_BLS_A_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gr, CIF_ISP_BLS_B_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->gb, CIF_ISP_BLS_C_FIXED);
+			rkisp1_iowrite32(params_vdev,
+					 pval->b, CIF_ISP_BLS_D_FIXED);
+			break;
+		default:
+			break;
+		}
+
+	} else {
+		if (arg->en_windows & BIT(1)) {
+			rkisp1_iowrite32(params_vdev, arg->bls_window2.h_offs,
+					 CIF_ISP_BLS_H2_START);
+			rkisp1_iowrite32(params_vdev, arg->bls_window2.h_size,
+					 CIF_ISP_BLS_H2_STOP);
+			rkisp1_iowrite32(params_vdev, arg->bls_window2.v_offs,
+					 CIF_ISP_BLS_V2_START);
+			rkisp1_iowrite32(params_vdev, arg->bls_window2.v_size,
+					 CIF_ISP_BLS_V2_STOP);
+			new_control |= CIF_ISP_BLS_WINDOW_2;
+		}
+
+		if (arg->en_windows & BIT(0)) {
+			rkisp1_iowrite32(params_vdev, arg->bls_window1.h_offs,
+					 CIF_ISP_BLS_H1_START);
+			rkisp1_iowrite32(params_vdev, arg->bls_window1.h_size,
+					 CIF_ISP_BLS_H1_STOP);
+			rkisp1_iowrite32(params_vdev, arg->bls_window1.v_offs,
+					 CIF_ISP_BLS_V1_START);
+			rkisp1_iowrite32(params_vdev, arg->bls_window1.v_size,
+					 CIF_ISP_BLS_V1_STOP);
+			new_control |= CIF_ISP_BLS_WINDOW_1;
+		}
+
+		rkisp1_iowrite32(params_vdev, arg->bls_samples,
+				 CIF_ISP_BLS_SAMPLES);
+
+		new_control |= CIF_ISP_BLS_MODE_MEASURED;
+	}
+	rkisp1_iowrite32(params_vdev, new_control, CIF_ISP_BLS_CTRL);
+}
+
+/* ISP LS correction interface function */
+static void
+isp_lsc_matrix_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_lsc_config *pconfig)
+{
+	int i, j;
+	unsigned int isp_lsc_status, sram_addr, isp_lsc_table_sel;
+	unsigned int data;
+
+	isp_lsc_status = rkisp1_ioread32(params_vdev, CIF_ISP_LSC_STATUS);
+
+	/* CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17 * 18 ) >> 1 */
+	sram_addr = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
+		     CIF_ISP_LSC_TABLE_ADDRESS_0 :
+		     CIF_ISP_LSC_TABLE_ADDRESS_153;
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_R_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GR_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GB_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_B_TABLE_ADDR);
+
+	/* program data tables (table size is 9 * 17 = 153) */
+	for (i = 0; i < CIF_ISP_LSC_SECTORS_MAX * CIF_ISP_LSC_SECTORS_MAX;
+	     i += CIF_ISP_LSC_SECTORS_MAX) {
+		/*
+		 * 17 sectors with 2 values in one DWORD = 9
+		 * DWORDs (2nd value of last DWORD unused)
+		 */
+		for (j = 0; j < CIF_ISP_LSC_SECTORS_MAX - 1; j += 2) {
+			data = CIF_ISP_LSC_TABLE_DATA_V10(
+					pconfig->r_data_tbl[i + j],
+					pconfig->r_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_R_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V10(
+					pconfig->gr_data_tbl[i + j],
+					pconfig->gr_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_GR_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V10(
+					pconfig->gb_data_tbl[i + j],
+					pconfig->gb_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_GB_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V10(
+					pconfig->b_data_tbl[i + j],
+					pconfig->b_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_B_TABLE_DATA);
+		}
+
+		data = CIF_ISP_LSC_TABLE_DATA_V10(
+				pconfig->r_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_R_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V10(
+				pconfig->gr_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_GR_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V10(
+				pconfig->gb_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_GB_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V10(
+				pconfig->b_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_B_TABLE_DATA);
+	}
+	isp_lsc_table_sel = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
+				CIF_ISP_LSC_TABLE_0 : CIF_ISP_LSC_TABLE_1;
+	rkisp1_iowrite32(params_vdev, isp_lsc_table_sel, CIF_ISP_LSC_TABLE_SEL);
+}
+
+static void
+isp_lsc_matrix_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_lsc_config *pconfig)
+{
+	int i, j;
+	unsigned int isp_lsc_status, sram_addr, isp_lsc_table_sel;
+	unsigned int data;
+
+	isp_lsc_status = rkisp1_ioread32(params_vdev, CIF_ISP_LSC_STATUS);
+
+	/* CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17 * 18 ) >> 1 */
+	sram_addr = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
+		     CIF_ISP_LSC_TABLE_ADDRESS_0 :
+		     CIF_ISP_LSC_TABLE_ADDRESS_153;
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_R_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GR_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_GB_TABLE_ADDR);
+	rkisp1_iowrite32(params_vdev, sram_addr, CIF_ISP_LSC_B_TABLE_ADDR);
+
+	/* program data tables (table size is 9 * 17 = 153) */
+	for (i = 0; i < CIF_ISP_LSC_SECTORS_MAX * CIF_ISP_LSC_SECTORS_MAX;
+	     i += CIF_ISP_LSC_SECTORS_MAX) {
+		/*
+		 * 17 sectors with 2 values in one DWORD = 9
+		 * DWORDs (2nd value of last DWORD unused)
+		 */
+		for (j = 0; j < CIF_ISP_LSC_SECTORS_MAX - 1; j += 2) {
+			data = CIF_ISP_LSC_TABLE_DATA_V12(
+					pconfig->r_data_tbl[i + j],
+					pconfig->r_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_R_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V12(
+					pconfig->gr_data_tbl[i + j],
+					pconfig->gr_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_GR_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V12(
+					pconfig->gb_data_tbl[i + j],
+					pconfig->gb_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_GB_TABLE_DATA);
+
+			data = CIF_ISP_LSC_TABLE_DATA_V12(
+					pconfig->b_data_tbl[i + j],
+					pconfig->b_data_tbl[i + j + 1]);
+			rkisp1_iowrite32(params_vdev, data,
+					 CIF_ISP_LSC_B_TABLE_DATA);
+		}
+
+		data = CIF_ISP_LSC_TABLE_DATA_V12(
+				pconfig->r_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_R_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V12(
+				pconfig->gr_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_GR_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V12(
+				pconfig->gb_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_GB_TABLE_DATA);
+
+		data = CIF_ISP_LSC_TABLE_DATA_V12(
+				pconfig->b_data_tbl[i + j],
+				0);
+		rkisp1_iowrite32(params_vdev, data,
+				CIF_ISP_LSC_B_TABLE_DATA);
+	}
+	isp_lsc_table_sel = (isp_lsc_status & CIF_ISP_LSC_ACTIVE_TABLE) ?
+				CIF_ISP_LSC_TABLE_0 : CIF_ISP_LSC_TABLE_1;
+	rkisp1_iowrite32(params_vdev, isp_lsc_table_sel, CIF_ISP_LSC_TABLE_SEL);
+}
+
+static void isp_lsc_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_lsc_config *arg)
+{
+	int i;
+	u32 lsc_ctrl;
+	unsigned int data;
+	struct rkisp_isp_params_v1x_ops *ops =
+		(struct rkisp_isp_params_v1x_ops *)params_vdev->priv_ops;
+
+	/* To config must be off , store the current status firstly */
+	lsc_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_LSC_CTRL);
+	isp_param_clear_bits(params_vdev, CIF_ISP_LSC_CTRL,
+			     CIF_ISP_LSC_CTRL_ENA);
+	ops->lsc_matrix_config(params_vdev, arg);
+
+	for (i = 0; i < 4; i++) {
+		/* program x size tables */
+		data = CIF_ISP_LSC_SECT_SIZE(arg->x_size_tbl[i * 2],
+					arg->x_size_tbl[i * 2 + 1]);
+		rkisp1_iowrite32(params_vdev, data,
+				 CIF_ISP_LSC_XSIZE_01 + i * 4);
+
+		/* program x grad tables */
+		data = CIF_ISP_LSC_SECT_SIZE(arg->x_grad_tbl[i * 2],
+					arg->x_grad_tbl[i * 2 + 1]);
+		rkisp1_iowrite32(params_vdev, data,
+				 CIF_ISP_LSC_XGRAD_01 + i * 4);
+
+		/* program y size tables */
+		data = CIF_ISP_LSC_SECT_SIZE(arg->y_size_tbl[i * 2],
+					arg->y_size_tbl[i * 2 + 1]);
+		rkisp1_iowrite32(params_vdev, data,
+				 CIF_ISP_LSC_YSIZE_01 + i * 4);
+
+		/* program y grad tables */
+		data = CIF_ISP_LSC_SECT_SIZE(arg->y_grad_tbl[i * 2],
+					arg->y_grad_tbl[i * 2 + 1]);
+		rkisp1_iowrite32(params_vdev, data,
+				 CIF_ISP_LSC_YGRAD_01 + i * 4);
+	}
+
+	/* restore the lsc ctrl status */
+	if (lsc_ctrl & CIF_ISP_LSC_CTRL_ENA) {
+		isp_param_set_bits(params_vdev,
+				   CIF_ISP_LSC_CTRL,
+				   CIF_ISP_LSC_CTRL_ENA);
+	} else {
+		isp_param_clear_bits(params_vdev,
+				     CIF_ISP_LSC_CTRL,
+				     CIF_ISP_LSC_CTRL_ENA);
+	}
+}
+
+/* ISP Filtering function */
+static void isp_flt_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_flt_config *arg)
+{
+	u32 filt_mode;
+
+	rkisp1_iowrite32(params_vdev, arg->thresh_bl0, CIF_ISP_FILT_THRESH_BL0);
+	rkisp1_iowrite32(params_vdev, arg->thresh_bl1, CIF_ISP_FILT_THRESH_BL1);
+	rkisp1_iowrite32(params_vdev, arg->thresh_sh0, CIF_ISP_FILT_THRESH_SH0);
+	rkisp1_iowrite32(params_vdev, arg->thresh_sh1, CIF_ISP_FILT_THRESH_SH1);
+	rkisp1_iowrite32(params_vdev, arg->fac_bl0, CIF_ISP_FILT_FAC_BL0);
+	rkisp1_iowrite32(params_vdev, arg->fac_bl1, CIF_ISP_FILT_FAC_BL1);
+	rkisp1_iowrite32(params_vdev, arg->fac_mid, CIF_ISP_FILT_FAC_MID);
+	rkisp1_iowrite32(params_vdev, arg->fac_sh0, CIF_ISP_FILT_FAC_SH0);
+	rkisp1_iowrite32(params_vdev, arg->fac_sh1, CIF_ISP_FILT_FAC_SH1);
+	rkisp1_iowrite32(params_vdev, arg->lum_weight, CIF_ISP_FILT_LUM_WEIGHT);
+
+	/* avoid to override the old enable value */
+	filt_mode = rkisp1_ioread32(params_vdev, CIF_ISP_FILT_MODE);
+	filt_mode &= CIF_ISP_FLT_ENA;
+	if (arg->mode)
+		filt_mode |= CIF_ISP_FLT_MODE_DNR;
+	filt_mode |= CIF_ISP_FLT_CHROMA_V_MODE(arg->chr_v_mode) |
+				 CIF_ISP_FLT_CHROMA_H_MODE(arg->chr_h_mode) |
+				 CIF_ISP_FLT_GREEN_STAGE1(arg->grn_stage1);
+	rkisp1_iowrite32(params_vdev, filt_mode, CIF_ISP_FILT_MODE);
+}
+
+/* ISP demosaic interface function */
+static void isp_bdm_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_bdm_config *arg)
+{
+	u32 bdm_th;
+
+	/* avoid to override the old enable value */
+	bdm_th = rkisp1_ioread32(params_vdev, CIF_ISP_DEMOSAIC);
+	bdm_th &= CIF_ISP_DEMOSAIC_BYPASS;
+	bdm_th |= arg->demosaic_th & ~CIF_ISP_DEMOSAIC_BYPASS;
+	/* set demosaic threshold */
+	rkisp1_iowrite32(params_vdev, bdm_th, CIF_ISP_DEMOSAIC);
+}
+
+/* ISP GAMMA correction interface function */
+static void isp_sdg_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_sdg_config *arg)
+{
+	int i;
+
+	rkisp1_iowrite32(params_vdev,
+			 arg->xa_pnts.gamma_dx0, CIF_ISP_GAMMA_DX_LO);
+	rkisp1_iowrite32(params_vdev,
+			 arg->xa_pnts.gamma_dx1, CIF_ISP_GAMMA_DX_HI);
+
+	for (i = 0; i < CIFISP_DEGAMMA_CURVE_SIZE; i++) {
+		rkisp1_iowrite32(params_vdev, arg->curve_r.gamma_y[i],
+				 CIF_ISP_GAMMA_R_Y0 + i * 4);
+		rkisp1_iowrite32(params_vdev, arg->curve_g.gamma_y[i],
+				 CIF_ISP_GAMMA_G_Y0 + i * 4);
+		rkisp1_iowrite32(params_vdev, arg->curve_b.gamma_y[i],
+				 CIF_ISP_GAMMA_B_Y0 + i * 4);
+	}
+}
+
+/* ISP GAMMA correction interface function */
+static void isp_goc_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_goc_config *arg)
+{
+	int i;
+	struct rkisp_isp_params_v1x_config *config =
+		(struct rkisp_isp_params_v1x_config *)params_vdev->priv_cfg;
+
+	rkisp1_iowrite32(params_vdev, arg->mode, CIF_ISP_GAMMA_OUT_MODE_V10);
+
+	for (i = 0; i < config->gamma_out_max_samples; i++)
+		rkisp1_iowrite32(params_vdev, arg->gamma_y[i],
+				 CIF_ISP_GAMMA_OUT_Y_0_V10 + i * 4);
+}
+
+static void isp_goc_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_goc_config *arg)
+{
+	int i;
+	u32 value;
+	struct rkisp_isp_params_v1x_config *config =
+		(struct rkisp_isp_params_v1x_config *)params_vdev->priv_cfg;
+
+	rkisp1_iowrite32(params_vdev, arg->mode, CIF_ISP_GAMMA_OUT_MODE_V12);
+
+	for (i = 0; i < config->gamma_out_max_samples / 2; i++) {
+		value = CIF_ISP_GAMMA_REG_VALUE_V12(
+			arg->gamma_y[2 * i + 1],
+			arg->gamma_y[2 * i]);
+		rkisp1_iowrite32(params_vdev, value,
+				 CIF_ISP_GAMMA_OUT_Y_0_V12 + i * 4);
+	}
+}
+
+/* ISP Cross Talk */
+static void isp_ctk_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_ctk_config *arg)
+{
+	rkisp1_iowrite32(params_vdev, arg->coeff0, CIF_ISP_CT_COEFF_0);
+	rkisp1_iowrite32(params_vdev, arg->coeff1, CIF_ISP_CT_COEFF_1);
+	rkisp1_iowrite32(params_vdev, arg->coeff2, CIF_ISP_CT_COEFF_2);
+	rkisp1_iowrite32(params_vdev, arg->coeff3, CIF_ISP_CT_COEFF_3);
+	rkisp1_iowrite32(params_vdev, arg->coeff4, CIF_ISP_CT_COEFF_4);
+	rkisp1_iowrite32(params_vdev, arg->coeff5, CIF_ISP_CT_COEFF_5);
+	rkisp1_iowrite32(params_vdev, arg->coeff6, CIF_ISP_CT_COEFF_6);
+	rkisp1_iowrite32(params_vdev, arg->coeff7, CIF_ISP_CT_COEFF_7);
+	rkisp1_iowrite32(params_vdev, arg->coeff8, CIF_ISP_CT_COEFF_8);
+	rkisp1_iowrite32(params_vdev, arg->ct_offset_r, CIF_ISP_CT_OFFSET_R);
+	rkisp1_iowrite32(params_vdev, arg->ct_offset_g, CIF_ISP_CT_OFFSET_G);
+	rkisp1_iowrite32(params_vdev, arg->ct_offset_b, CIF_ISP_CT_OFFSET_B);
+}
+
+static void isp_ctk_enable(struct rkisp_isp_params_vdev *params_vdev, bool en)
+{
+	if (en)
+		return;
+
+	/* Write back the default values. */
+	rkisp1_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_0);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_1);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_2);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_3);
+	rkisp1_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_4);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_5);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_6);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_COEFF_7);
+	rkisp1_iowrite32(params_vdev, 0x80, CIF_ISP_CT_COEFF_8);
+
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_R);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_G);
+	rkisp1_iowrite32(params_vdev, 0, CIF_ISP_CT_OFFSET_B);
+}
+
+/* ISP White Balance Mode */
+static void isp_awb_meas_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_meas_config *arg)
+{
+	u32 reg_val = 0;
+	/* based on the mode,configure the awb module */
+	if (arg->awb_mode == CIFISP_AWB_MODE_YCBCR) {
+		/* Reference Cb and Cr */
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AWB_REF_CR_SET(arg->awb_ref_cr) |
+				 arg->awb_ref_cb, CIF_ISP_AWB_REF_V10);
+		/* Yc Threshold */
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AWB_MAX_Y_SET(arg->max_y) |
+				 CIF_ISP_AWB_MIN_Y_SET(arg->min_y) |
+				 CIF_ISP_AWB_MAX_CS_SET(arg->max_csum) |
+				 arg->min_c, CIF_ISP_AWB_THRESH_V10);
+	}
+
+	reg_val = rkisp1_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
+	if (arg->enable_ymax_cmp)
+		reg_val |= CIF_ISP_AWB_YMAX_CMP_EN;
+	else
+		reg_val &= ~CIF_ISP_AWB_YMAX_CMP_EN;
+	rkisp1_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
+
+	/* window offset */
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.v_offs, CIF_ISP_AWB_WND_V_OFFS_V10);
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.h_offs, CIF_ISP_AWB_WND_H_OFFS_V10);
+	/* AWB window size */
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.v_size, CIF_ISP_AWB_WND_V_SIZE_V10);
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.h_size, CIF_ISP_AWB_WND_H_SIZE_V10);
+	/* Number of frames */
+	rkisp1_iowrite32(params_vdev,
+			 arg->frames, CIF_ISP_AWB_FRAMES_V10);
+}
+
+static void isp_awb_meas_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_meas_config *arg)
+{
+	u32 reg_val = 0;
+	/* based on the mode,configure the awb module */
+	if (arg->awb_mode == CIFISP_AWB_MODE_YCBCR) {
+		/* Reference Cb and Cr */
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AWB_REF_CR_SET(arg->awb_ref_cr) |
+				 arg->awb_ref_cb, CIF_ISP_AWB_REF_V12);
+		/* Yc Threshold */
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AWB_MAX_Y_SET(arg->max_y) |
+				 CIF_ISP_AWB_MIN_Y_SET(arg->min_y) |
+				 CIF_ISP_AWB_MAX_CS_SET(arg->max_csum) |
+				 arg->min_c, CIF_ISP_AWB_THRESH_V12);
+	}
+
+	reg_val = rkisp1_ioread32(params_vdev, CIF_ISP_AWB_PROP_V12);
+	if (arg->enable_ymax_cmp)
+		reg_val |= CIF_ISP_AWB_YMAX_CMP_EN;
+	else
+		reg_val &= ~CIF_ISP_AWB_YMAX_CMP_EN;
+	reg_val &= ~CIF_ISP_AWB_SET_FRAMES_MASK_V12;
+	reg_val |= CIF_ISP_AWB_SET_FRAMES_V12(arg->frames);
+	rkisp1_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V12);
+
+	/* window offset */
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.v_offs << 16 |
+			 arg->awb_wnd.h_offs,
+			 CIF_ISP_AWB_OFFS_V12);
+	/* AWB window size */
+	rkisp1_iowrite32(params_vdev,
+			 arg->awb_wnd.v_size << 16 |
+			 arg->awb_wnd.h_size,
+			 CIF_ISP_AWB_SIZE_V12);
+}
+
+static void isp_awb_meas_enable_v10(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_meas_config *arg, bool en)
+{
+	u32 reg_val = rkisp1_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
+
+	/* switch off */
+	reg_val &= CIF_ISP_AWB_MODE_MASK_NONE;
+
+	if (en) {
+		if (arg->awb_mode == CIFISP_AWB_MODE_RGB)
+			reg_val |= CIF_ISP_AWB_MODE_RGB_EN;
+		else
+			reg_val |= CIF_ISP_AWB_MODE_YCBCR_EN;
+
+		rkisp1_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
+
+		/* Measurements require AWB block be active. */
+		/* TODO: need to enable here ? awb_gain_enable has done this */
+		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
+				   CIF_ISP_CTRL_ISP_AWB_ENA);
+	} else {
+		rkisp1_iowrite32(params_vdev,
+				 reg_val, CIF_ISP_AWB_PROP_V10);
+		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+				     CIF_ISP_CTRL_ISP_AWB_ENA);
+	}
+}
+
+static void isp_awb_meas_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_meas_config *arg, bool en)
+{
+	u32 reg_val = rkisp1_ioread32(params_vdev, CIF_ISP_AWB_PROP_V12);
+
+	/* switch off */
+	reg_val &= CIF_ISP_AWB_MODE_MASK_NONE;
+
+	if (en) {
+		if (arg->awb_mode == CIFISP_AWB_MODE_RGB)
+			reg_val |= CIF_ISP_AWB_MODE_RGB_EN;
+		else
+			reg_val |= CIF_ISP_AWB_MODE_YCBCR_EN;
+
+		rkisp1_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V12);
+
+		/* Measurements require AWB block be active. */
+		/* TODO: need to enable here ? awb_gain_enable has done this */
+		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
+				   CIF_ISP_CTRL_ISP_AWB_ENA);
+	} else {
+		rkisp1_iowrite32(params_vdev,
+				 reg_val, CIF_ISP_AWB_PROP_V12);
+		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+				     CIF_ISP_CTRL_ISP_AWB_ENA);
+	}
+}
+
+static void isp_awb_gain_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_gain_config *arg)
+{
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_AWB_GAIN_R_SET(arg->gain_green_r) |
+			 arg->gain_green_b, CIF_ISP_AWB_GAIN_G_V10);
+
+	rkisp1_iowrite32(params_vdev, CIF_ISP_AWB_GAIN_R_SET(arg->gain_red) |
+			 arg->gain_blue, CIF_ISP_AWB_GAIN_RB_V10);
+}
+
+static void isp_awb_gain_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_awb_gain_config *arg)
+{
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_AWB_GAIN_R_SET(arg->gain_green_r) |
+			 arg->gain_green_b, CIF_ISP_AWB_GAIN_G_V12);
+
+	rkisp1_iowrite32(params_vdev, CIF_ISP_AWB_GAIN_R_SET(arg->gain_red) |
+			 arg->gain_blue, CIF_ISP_AWB_GAIN_RB_V12);
+}
+
+static void isp_aec_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_aec_config *arg)
+{
+	unsigned int block_hsize, block_vsize;
+	u32 exp_ctrl;
+
+	/* avoid to override the old enable value */
+	exp_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_EXP_CTRL);
+	exp_ctrl &= CIF_ISP_EXP_ENA;
+	if (arg->autostop)
+		exp_ctrl |= CIF_ISP_EXP_CTRL_AUTOSTOP;
+	if (arg->mode == CIFISP_EXP_MEASURING_MODE_1)
+		exp_ctrl |= CIF_ISP_EXP_CTRL_MEASMODE_1;
+	rkisp1_iowrite32(params_vdev, exp_ctrl, CIF_ISP_EXP_CTRL);
+
+	rkisp1_iowrite32(params_vdev,
+			 arg->meas_window.h_offs, CIF_ISP_EXP_H_OFFSET_V10);
+	rkisp1_iowrite32(params_vdev,
+			 arg->meas_window.v_offs, CIF_ISP_EXP_V_OFFSET_V10);
+
+	block_hsize = arg->meas_window.h_size / CIF_ISP_EXP_COLUMN_NUM_V10 - 1;
+	block_vsize = arg->meas_window.v_size / CIF_ISP_EXP_ROW_NUM_V10 - 1;
+
+	rkisp1_iowrite32(params_vdev, CIF_ISP_EXP_H_SIZE_SET_V10(block_hsize),
+			 CIF_ISP_EXP_H_SIZE_V10);
+	rkisp1_iowrite32(params_vdev, CIF_ISP_EXP_V_SIZE_SET_V10(block_vsize),
+			 CIF_ISP_EXP_V_SIZE_V10);
+}
+
+static void isp_aec_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_aec_config *arg)
+{
+	u32 exp_ctrl;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx = 1;
+	const u32 ae_wnd_num[] = {
+		5, 9, 15, 15
+	};
+
+	/* avoid to override the old enable value */
+	exp_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_EXP_CTRL);
+	exp_ctrl &= CIF_ISP_EXP_ENA;
+	if (arg->autostop)
+		exp_ctrl |= CIF_ISP_EXP_CTRL_AUTOSTOP;
+	if (arg->mode == CIFISP_EXP_MEASURING_MODE_1)
+		exp_ctrl |= CIF_ISP_EXP_CTRL_MEASMODE_1;
+	exp_ctrl |= CIF_ISP_EXP_CTRL_WNDNUM_SET_V12(wnd_num_idx);
+	rkisp1_iowrite32(params_vdev, exp_ctrl, CIF_ISP_EXP_CTRL);
+
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_EXP_V_OFFSET_SET_V12(arg->meas_window.v_offs) |
+			 CIF_ISP_EXP_H_OFFSET_SET_V12(arg->meas_window.h_offs),
+			 CIF_ISP_EXP_OFFS_V12);
+
+	block_hsize = arg->meas_window.h_size / ae_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->meas_window.v_size / ae_wnd_num[wnd_num_idx] - 1;
+
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_EXP_V_SIZE_SET_V12(block_vsize) |
+			 CIF_ISP_EXP_H_SIZE_SET_V12(block_hsize),
+			 CIF_ISP_EXP_SIZE_V12);
+}
+
+static void isp_cproc_config(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct cifisp_cproc_config *arg)
+{
+	struct cifisp_isp_other_cfg *cur_other_cfg = &params_vdev->isp1x_params.others;
+	struct cifisp_ie_config *cur_ie_config = &cur_other_cfg->ie_config;
+	u32 effect = cur_ie_config->effect;
+	u32 quantization = params_vdev->quantization;
+
+	rkisp1_iowrite32(params_vdev, arg->contrast, CIF_C_PROC_CONTRAST);
+	rkisp1_iowrite32(params_vdev, arg->hue, CIF_C_PROC_HUE);
+	rkisp1_iowrite32(params_vdev, arg->sat, CIF_C_PROC_SATURATION);
+	rkisp1_iowrite32(params_vdev, arg->brightness, CIF_C_PROC_BRIGHTNESS);
+
+	if (quantization != V4L2_QUANTIZATION_FULL_RANGE ||
+	    effect != V4L2_COLORFX_NONE) {
+		isp_param_clear_bits(params_vdev, CIF_C_PROC_CTRL,
+				     CIF_C_PROC_YOUT_FULL |
+				     CIF_C_PROC_YIN_FULL |
+				     CIF_C_PROC_COUT_FULL);
+	} else {
+		isp_param_set_bits(params_vdev, CIF_C_PROC_CTRL,
+				   CIF_C_PROC_YOUT_FULL |
+				   CIF_C_PROC_YIN_FULL |
+				   CIF_C_PROC_COUT_FULL);
+	}
+}
+
+static void isp_hst_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_hst_config *arg)
+{
+	unsigned int block_hsize, block_vsize;
+	const u32 hist_weight_regs[] = {
+		CIF_ISP_HIST_WEIGHT_00TO30_V10, CIF_ISP_HIST_WEIGHT_40TO21_V10,
+		CIF_ISP_HIST_WEIGHT_31TO12_V10, CIF_ISP_HIST_WEIGHT_22TO03_V10,
+		CIF_ISP_HIST_WEIGHT_13TO43_V10, CIF_ISP_HIST_WEIGHT_04TO34_V10,
+		CIF_ISP_HIST_WEIGHT_44_V10,
+	};
+	int i;
+	const u8 *weight;
+	u32 hist_prop;
+
+	/* avoid to override the old enable value */
+	hist_prop = rkisp1_ioread32(params_vdev, CIF_ISP_HIST_PROP_V10);
+	hist_prop &= CIF_ISP_HIST_PROP_MODE_MASK_V10;
+	hist_prop |= CIF_ISP_HIST_PREDIV_SET_V10(arg->histogram_predivider);
+	rkisp1_iowrite32(params_vdev, hist_prop, CIF_ISP_HIST_PROP_V10);
+	rkisp1_iowrite32(params_vdev,
+			arg->meas_window.h_offs,
+			CIF_ISP_HIST_H_OFFS_V10);
+	rkisp1_iowrite32(params_vdev,
+			arg->meas_window.v_offs,
+			CIF_ISP_HIST_V_OFFS_V10);
+
+	block_hsize = arg->meas_window.h_size / CIF_ISP_HIST_COLUMN_NUM_V10 - 1;
+	block_vsize = arg->meas_window.v_size / CIF_ISP_HIST_ROW_NUM_V10 - 1;
+
+	rkisp1_iowrite32(params_vdev, block_hsize, CIF_ISP_HIST_H_SIZE_V10);
+	rkisp1_iowrite32(params_vdev, block_vsize, CIF_ISP_HIST_V_SIZE_V10);
+
+	weight = arg->hist_weight;
+	for (i = 0; i < ARRAY_SIZE(hist_weight_regs); ++i, weight += 4)
+		rkisp1_iowrite32(params_vdev, CIF_ISP_HIST_WEIGHT_SET_V10(
+				 weight[0], weight[1], weight[2], weight[3]),
+				 hist_weight_regs[i]);
+}
+
+static void isp_hst_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_hst_config *arg)
+{
+	u32 i, j;
+	u32 value;
+	u32 hist_ctrl;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx, hist_weight_num;
+	u8 weight15x15[CIF_ISP_HIST_WEIGHT_REG_SIZE_V12];
+	const u32 hist_wnd_num[] = {
+		5, 9, 15, 15
+	};
+
+	/* now we just support 9x9 window */
+	wnd_num_idx = 1;
+	memset(weight15x15, 0x00, sizeof(weight15x15));
+	/* avoid to override the old enable value */
+	hist_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_HIST_CTRL_V12);
+	hist_ctrl &= CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
+		     CIF_ISP_HIST_CTRL_EN_MASK_V12;
+	hist_ctrl = hist_ctrl |
+		    CIF_ISP_HIST_CTRL_INTRSEL_SET_V12(1) |
+		    CIF_ISP_HIST_CTRL_DATASEL_SET_V12(0) |
+		    CIF_ISP_HIST_CTRL_WATERLINE_SET_V12(0) |
+		    CIF_ISP_HIST_CTRL_AUTOSTOP_SET_V12(0) |
+		    CIF_ISP_HIST_CTRL_WNDNUM_SET_V12(1) |
+		    CIF_ISP_HIST_CTRL_STEPSIZE_SET_V12(arg->histogram_predivider);
+	rkisp1_iowrite32(params_vdev, hist_ctrl, CIF_ISP_HIST_CTRL_V12);
+
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_HIST_OFFS_SET_V12(arg->meas_window.h_offs,
+						   arg->meas_window.v_offs),
+			 CIF_ISP_HIST_OFFS_V12);
+
+	block_hsize = arg->meas_window.h_size / hist_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->meas_window.v_size / hist_wnd_num[wnd_num_idx] - 1;
+	rkisp1_iowrite32(params_vdev,
+			 CIF_ISP_HIST_SIZE_SET_V12(block_hsize, block_vsize),
+			 CIF_ISP_HIST_SIZE_V12);
+
+	for (i = 0; i < hist_wnd_num[wnd_num_idx]; i++) {
+		for (j = 0; j < hist_wnd_num[wnd_num_idx]; j++) {
+			weight15x15[i * CIF_ISP_HIST_ROW_NUM_V12 + j] =
+				arg->hist_weight[i * hist_wnd_num[wnd_num_idx] + j];
+		}
+	}
+
+	hist_weight_num = CIF_ISP_HIST_WEIGHT_REG_SIZE_V12;
+	for (i = 0; i < (hist_weight_num / 4); i++) {
+		value = CIF_ISP_HIST_WEIGHT_SET_V12(
+				 weight15x15[4 * i + 0],
+				 weight15x15[4 * i + 1],
+				 weight15x15[4 * i + 2],
+				 weight15x15[4 * i + 3]);
+		rkisp1_iowrite32(params_vdev, value,
+				 CIF_ISP_HIST_WEIGHT_V12 + 4 * i);
+	}
+	value = CIF_ISP_HIST_WEIGHT_SET_V12(
+				 weight15x15[4 * i + 0], 0, 0, 0);
+	rkisp1_iowrite32(params_vdev, value,
+				 CIF_ISP_HIST_WEIGHT_V12 + 4 * i);
+}
+
+static void isp_hst_enable_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_hst_config *arg, bool en)
+{
+	if (en) {
+		u32 hist_prop = rkisp1_ioread32(params_vdev, CIF_ISP_HIST_PROP_V10);
+
+		hist_prop &= ~CIF_ISP_HIST_PROP_MODE_MASK_V10;
+		hist_prop |= arg->mode;
+		isp_param_set_bits(params_vdev, CIF_ISP_HIST_PROP_V10, hist_prop);
+	} else {
+		isp_param_clear_bits(params_vdev, CIF_ISP_HIST_PROP_V10,
+				CIF_ISP_HIST_PROP_MODE_MASK_V10);
+	}
+}
+
+static void isp_hst_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_hst_config *arg, bool en)
+{
+	if (en) {
+		u32 hist_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_HIST_CTRL_V12);
+
+		hist_ctrl &= ~CIF_ISP_HIST_CTRL_MODE_MASK_V12;
+		hist_ctrl |= CIF_ISP_HIST_CTRL_MODE_SET_V12(arg->mode);
+		hist_ctrl |= CIF_ISP_HIST_CTRL_EN_SET_V12(1);
+		isp_param_set_bits(params_vdev, CIF_ISP_HIST_CTRL_V12, hist_ctrl);
+	} else {
+		isp_param_clear_bits(params_vdev, CIF_ISP_HIST_CTRL_V12,
+				CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
+				CIF_ISP_HIST_CTRL_EN_MASK_V12);
+	}
+}
+
+static void isp_afm_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_afc_config *arg)
+{
+	int i;
+	size_t num_of_win = min_t(size_t, ARRAY_SIZE(arg->afm_win),
+				  arg->num_afm_win);
+	u32 afm_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_AFM_CTRL);
+
+	/* Switch off to configure. */
+	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
+
+	for (i = 0; i < num_of_win; i++) {
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_offs) |
+				 CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_offs),
+				 CIF_ISP_AFM_LT_A + i * 8);
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_size +
+						      arg->afm_win[i].h_offs) |
+				 CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_size +
+						      arg->afm_win[i].v_offs),
+				 CIF_ISP_AFM_RB_A + i * 8);
+	}
+	rkisp1_iowrite32(params_vdev, arg->thres, CIF_ISP_AFM_THRES);
+	rkisp1_iowrite32(params_vdev, arg->var_shift, CIF_ISP_AFM_VAR_SHIFT);
+	/* restore afm status */
+	rkisp1_iowrite32(params_vdev, afm_ctrl, CIF_ISP_AFM_CTRL);
+}
+
+static void isp_afm_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_afc_config *arg)
+{
+	unsigned int i;
+	u32 lum_var_shift, afm_var_shift;
+	size_t num_of_win = min_t(size_t, ARRAY_SIZE(arg->afm_win),
+				  arg->num_afm_win);
+	u32 afm_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_AFM_CTRL);
+
+	/* Switch off to configure. */
+	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
+
+	for (i = 0; i < num_of_win; i++) {
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_offs) |
+				 CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_offs),
+				 CIF_ISP_AFM_LT_A + i * 8);
+		rkisp1_iowrite32(params_vdev,
+				 CIF_ISP_AFM_WINDOW_X(arg->afm_win[i].h_size +
+						      arg->afm_win[i].h_offs) |
+				 CIF_ISP_AFM_WINDOW_Y(arg->afm_win[i].v_size +
+						      arg->afm_win[i].v_offs),
+				 CIF_ISP_AFM_RB_A + i * 8);
+	}
+	rkisp1_iowrite32(params_vdev, arg->thres, CIF_ISP_AFM_THRES);
+
+	lum_var_shift = CIF_ISP_AFM_GET_LUM_SHIFT_a_V12(arg->var_shift);
+	afm_var_shift = CIF_ISP_AFM_GET_AFM_SHIFT_a_V12(arg->var_shift);
+	rkisp1_iowrite32(params_vdev,
+		CIF_ISP_AFM_SET_SHIFT_a_V12(lum_var_shift, afm_var_shift) |
+		CIF_ISP_AFM_SET_SHIFT_b_V12(lum_var_shift, afm_var_shift) |
+		CIF_ISP_AFM_SET_SHIFT_c_V12(lum_var_shift, afm_var_shift),
+		CIF_ISP_AFM_VAR_SHIFT);
+
+	/* restore afm status */
+	rkisp1_iowrite32(params_vdev, afm_ctrl, CIF_ISP_AFM_CTRL);
+}
+
+static void isp_ie_config(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_ie_config *arg)
+{
+	u32 eff_ctrl;
+
+	eff_ctrl = rkisp1_ioread32(params_vdev, CIF_IMG_EFF_CTRL);
+	eff_ctrl &= ~CIF_IMG_EFF_CTRL_MODE_MASK;
+
+	if (params_vdev->quantization == V4L2_QUANTIZATION_FULL_RANGE)
+		eff_ctrl |= CIF_IMG_EFF_CTRL_YCBCR_FULL;
+
+	switch (arg->effect) {
+	case V4L2_COLORFX_SEPIA:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SEPIA;
+		break;
+	case V4L2_COLORFX_SET_CBCR:
+		rkisp1_iowrite32(params_vdev, arg->eff_tint, CIF_IMG_EFF_TINT);
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SEPIA;
+		break;
+		/*
+		 * Color selection is similar to water color(AQUA):
+		 * grayscale + selected color w threshold
+		 */
+	case V4L2_COLORFX_AQUA:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_COLOR_SEL;
+		rkisp1_iowrite32(params_vdev, arg->color_sel,
+				 CIF_IMG_EFF_COLOR_SEL);
+		break;
+	case V4L2_COLORFX_EMBOSS:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_EMBOSS;
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_1,
+				 CIF_IMG_EFF_MAT_1);
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_2,
+				 CIF_IMG_EFF_MAT_2);
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_3,
+				 CIF_IMG_EFF_MAT_3);
+		break;
+	case V4L2_COLORFX_SKETCH:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_SKETCH;
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_3,
+				 CIF_IMG_EFF_MAT_3);
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_4,
+				 CIF_IMG_EFF_MAT_4);
+		rkisp1_iowrite32(params_vdev, arg->eff_mat_5,
+				 CIF_IMG_EFF_MAT_5);
+		break;
+	case V4L2_COLORFX_BW:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_BLACKWHITE;
+		break;
+	case V4L2_COLORFX_NEGATIVE:
+		eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_NEGATIVE;
+		break;
+	default:
+		break;
+	}
+
+	rkisp1_iowrite32(params_vdev, eff_ctrl, CIF_IMG_EFF_CTRL);
+}
+
+static void isp_ie_enable(struct rkisp_isp_params_vdev *params_vdev, bool en)
+{
+	if (en) {
+		isp_param_set_bits(params_vdev, CIF_ICCL, CIF_ICCL_IE_CLK);
+		isp_param_set_bits(params_vdev, CIF_IMG_EFF_CTRL,
+				   CIF_IMG_EFF_CTRL_ENABLE);
+		isp_param_set_bits(params_vdev, CIF_IMG_EFF_CTRL,
+				   CIF_IMG_EFF_CTRL_CFG_UPD);
+	} else {
+		isp_param_clear_bits(params_vdev, CIF_IMG_EFF_CTRL,
+				     CIF_IMG_EFF_CTRL_ENABLE);
+		isp_param_clear_bits(params_vdev, CIF_ICCL, CIF_ICCL_IE_CLK);
+	}
+}
+
+static void isp_csm_config(struct rkisp_isp_params_vdev *params_vdev,
+			   bool full_range)
+{
+	const u16 full_range_coeff[] = {
+		0x0026, 0x004b, 0x000f,
+		0x01ea, 0x01d6, 0x0040,
+		0x0040, 0x01ca, 0x01f6
+	};
+	const u16 limited_range_coeff[] = {
+		0x0021, 0x0040, 0x000d,
+		0x01ed, 0x01db, 0x0038,
+		0x0038, 0x01d1, 0x01f7,
+	};
+	unsigned int i;
+
+	if (full_range) {
+		for (i = 0; i < ARRAY_SIZE(full_range_coeff); i++)
+			rkisp1_iowrite32(params_vdev, full_range_coeff[i],
+					 CIF_ISP_CC_COEFF_0 + i * 4);
+
+		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
+				   CIF_ISP_CTRL_ISP_CSM_Y_FULL_ENA |
+				   CIF_ISP_CTRL_ISP_CSM_C_FULL_ENA);
+	} else {
+		for (i = 0; i < ARRAY_SIZE(limited_range_coeff); i++)
+			rkisp1_iowrite32(params_vdev, limited_range_coeff[i],
+					 CIF_ISP_CC_COEFF_0 + i * 4);
+
+		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+				     CIF_ISP_CTRL_ISP_CSM_Y_FULL_ENA |
+				     CIF_ISP_CTRL_ISP_CSM_C_FULL_ENA);
+	}
+}
+
+/* ISP De-noise Pre-Filter(DPF) function */
+static void isp_dpf_config(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_dpf_config *arg)
+{
+	unsigned int isp_dpf_mode;
+	unsigned int spatial_coeff;
+	unsigned int i;
+
+	switch (arg->gain.mode) {
+	case CIFISP_DPF_GAIN_USAGE_NF_GAINS:
+		isp_dpf_mode = CIF_ISP_DPF_MODE_USE_NF_GAIN |
+				CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
+		break;
+	case CIFISP_DPF_GAIN_USAGE_LSC_GAINS:
+		isp_dpf_mode = CIF_ISP_DPF_MODE_LSC_GAIN_COMP;
+		break;
+	case CIFISP_DPF_GAIN_USAGE_NF_LSC_GAINS:
+		isp_dpf_mode = CIF_ISP_DPF_MODE_USE_NF_GAIN |
+				CIF_ISP_DPF_MODE_AWB_GAIN_COMP |
+				CIF_ISP_DPF_MODE_LSC_GAIN_COMP;
+		break;
+	case CIFISP_DPF_GAIN_USAGE_AWB_GAINS:
+		isp_dpf_mode = CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
+		break;
+	case CIFISP_DPF_GAIN_USAGE_AWB_LSC_GAINS:
+		isp_dpf_mode = CIF_ISP_DPF_MODE_LSC_GAIN_COMP |
+				CIF_ISP_DPF_MODE_AWB_GAIN_COMP;
+		break;
+	case CIFISP_DPF_GAIN_USAGE_DISABLED:
+	default:
+		isp_dpf_mode = 0;
+		break;
+	}
+
+	if (arg->nll.scale_mode == CIFISP_NLL_SCALE_LOGARITHMIC)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_NLL_SEGMENTATION;
+	if (arg->rb_flt.fltsize == CIFISP_DPF_RB_FILTERSIZE_9x9)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_RB_FLTSIZE_9x9;
+	if (!arg->rb_flt.r_enable)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_R_FLT_DIS;
+	if (!arg->rb_flt.b_enable)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_B_FLT_DIS;
+	if (!arg->g_flt.gb_enable)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_GB_FLT_DIS;
+	if (!arg->g_flt.gr_enable)
+		isp_dpf_mode |= CIF_ISP_DPF_MODE_GR_FLT_DIS;
+
+	isp_param_set_bits(params_vdev, CIF_ISP_DPF_MODE, isp_dpf_mode);
+	rkisp1_iowrite32(params_vdev, arg->gain.nf_b_gain,
+			 CIF_ISP_DPF_NF_GAIN_B);
+	rkisp1_iowrite32(params_vdev, arg->gain.nf_r_gain,
+			 CIF_ISP_DPF_NF_GAIN_R);
+	rkisp1_iowrite32(params_vdev, arg->gain.nf_gb_gain,
+			 CIF_ISP_DPF_NF_GAIN_GB);
+	rkisp1_iowrite32(params_vdev, arg->gain.nf_gr_gain,
+			 CIF_ISP_DPF_NF_GAIN_GR);
+
+	for (i = 0; i < CIFISP_DPF_MAX_NLF_COEFFS; i++) {
+		rkisp1_iowrite32(params_vdev, arg->nll.coeff[i],
+				 CIF_ISP_DPF_NULL_COEFF_0 + i * 4);
+	}
+
+	spatial_coeff = arg->g_flt.spatial_coeff[0] |
+			(arg->g_flt.spatial_coeff[1] << 8) |
+			(arg->g_flt.spatial_coeff[2] << 16) |
+			(arg->g_flt.spatial_coeff[3] << 24);
+	rkisp1_iowrite32(params_vdev, spatial_coeff,
+			 CIF_ISP_DPF_S_WEIGHT_G_1_4);
+
+	spatial_coeff = arg->g_flt.spatial_coeff[4] |
+			(arg->g_flt.spatial_coeff[5] << 8);
+	rkisp1_iowrite32(params_vdev, spatial_coeff,
+			 CIF_ISP_DPF_S_WEIGHT_G_5_6);
+
+	spatial_coeff = arg->rb_flt.spatial_coeff[0] |
+			(arg->rb_flt.spatial_coeff[1] << 8) |
+			(arg->rb_flt.spatial_coeff[2] << 16) |
+			(arg->rb_flt.spatial_coeff[3] << 24);
+	rkisp1_iowrite32(params_vdev, spatial_coeff,
+			 CIF_ISP_DPF_S_WEIGHT_RB_1_4);
+
+	spatial_coeff = arg->rb_flt.spatial_coeff[4] |
+			(arg->rb_flt.spatial_coeff[5] << 8);
+	rkisp1_iowrite32(params_vdev, spatial_coeff,
+			CIF_ISP_DPF_S_WEIGHT_RB_5_6);
+}
+
+static void isp_dpf_strength_config(struct rkisp_isp_params_vdev *params_vdev,
+				    const struct cifisp_dpf_strength_config *arg)
+{
+	rkisp1_iowrite32(params_vdev, arg->b, CIF_ISP_DPF_STRENGTH_B);
+	rkisp1_iowrite32(params_vdev, arg->g, CIF_ISP_DPF_STRENGTH_G);
+	rkisp1_iowrite32(params_vdev, arg->r, CIF_ISP_DPF_STRENGTH_R);
+}
+
+static void isp_dummy_enable(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en)
+{
+}
+
+static void isp_wdr_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_wdr_config *arg)
+{
+}
+
+static void isp_wdr_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct cifisp_wdr_config *arg)
+{
+	int i;
+
+	for (i = 0; i < CIFISP_WDR_SIZE; i++) {
+		if (i <= 39)
+			rkisp1_iowrite32(params_vdev, arg->c_wdr[i],
+					 CIF_ISP_WDR_CTRL + i * 4);
+		else
+			rkisp1_iowrite32(params_vdev, arg->c_wdr[i],
+					 CIF_ISP_RKWDR_CTRL0 + (i - 40) * 4);
+	}
+}
+
+static void isp_wdr_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
+			       bool en)
+{
+	if (en)
+		rkisp1_iowrite32(params_vdev, 0x030cf1,
+				 CIF_ISP_RKWDR_CTRL0);
+	else
+		rkisp1_iowrite32(params_vdev, 0x030cf0,
+				 CIF_ISP_RKWDR_CTRL0);
+}
+
+static void
+isp_demosaiclp_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_demosaiclp_config *arg)
+{
+}
+
+static void
+isp_demosaiclp_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_demosaiclp_config *arg)
+{
+	u32 val;
+	u32 level_sel;
+
+	val = CIF_ISP_PACK_4BYTE(arg->lu_divided[0],
+				 arg->lu_divided[1],
+				 arg->lu_divided[2],
+				 arg->lu_divided[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_LU_DIVID);
+
+	val = CIF_ISP_PACK_4BYTE(arg->thgrad_divided[0],
+				 arg->thgrad_divided[1],
+				 arg->thgrad_divided[2],
+				 arg->thgrad_divided[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_THGRAD_DIVID0123);
+	rkisp1_iowrite32(params_vdev,
+			 arg->thgrad_divided[4],
+			 CIF_ISP_FILT_THGRAD_DIVID4);
+
+	val = CIF_ISP_PACK_4BYTE(arg->thdiff_divided[0],
+				 arg->thdiff_divided[1],
+				 arg->thdiff_divided[2],
+				 arg->thdiff_divided[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_THDIFF_DIVID0123);
+	rkisp1_iowrite32(params_vdev,
+			 arg->thdiff_divided[4],
+			 CIF_ISP_FILT_THDIFF_DIVID4);
+
+	val = CIF_ISP_PACK_4BYTE(arg->thcsc_divided[0],
+				 arg->thcsc_divided[1],
+				 arg->thcsc_divided[2],
+				 arg->thcsc_divided[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_THCSC_DIVID0123);
+	rkisp1_iowrite32(params_vdev, arg->thcsc_divided[4],
+			 CIF_ISP_FILT_THCSC_DIVID4);
+
+	val = CIF_ISP_PACK_2SHORT(arg->thvar_divided[0],
+				  arg->thvar_divided[1]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_THVAR_DIVID01);
+
+	val = CIF_ISP_PACK_2SHORT(arg->thvar_divided[2],
+				  arg->thvar_divided[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_THVAR_DIVID23);
+	rkisp1_iowrite32(params_vdev, arg->thvar_divided[4],
+			 CIF_ISP_FILT_THVAR_DIVID4);
+
+	rkisp1_iowrite32(params_vdev, arg->th_grad,
+			 CIF_ISP_FILT_TH_GRAD);
+	rkisp1_iowrite32(params_vdev, arg->th_diff,
+			 CIF_ISP_FILT_TH_DIFF);
+	rkisp1_iowrite32(params_vdev, arg->th_csc,
+			 CIF_ISP_FILT_TH_CSC);
+	rkisp1_iowrite32(params_vdev, arg->th_var,
+			 CIF_ISP_FILT_TH_VAR);
+
+	val = CIF_ISP_PACK_4BYTE(arg->thvar_r_fct,
+				 arg->thdiff_r_fct,
+				 arg->thgrad_r_fct,
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_R_FCT);
+
+	val = CIF_ISP_PACK_4BYTE(arg->thgrad_b_fct,
+				 arg->thdiff_b_fct,
+				 arg->thvar_b_fct,
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_ISP_FILT_B_FCT);
+
+	isp_param_set_bits(params_vdev,
+			   CIF_ISP_FILT_MODE,
+			   arg->rb_filter_en << 3 |
+			   arg->hp_filter_en << 2);
+
+	level_sel = rkisp1_ioread32(params_vdev, CIF_ISP_FILT_LELEL_SEL);
+	level_sel &= CIF_ISP_FLT_LEVEL_OLD_LP;
+	level_sel |= arg->th_var_en << 20 |
+		     arg->th_csc_en << 19 |
+		     arg->th_diff_en << 18 |
+		     arg->th_grad_en << 17 |
+		     arg->similarity_th << 12 |
+		     arg->flat_level_sel << 8 |
+		     arg->pattern_level_sel << 4 |
+		     arg->edge_level_sel;
+
+	rkisp1_iowrite32(params_vdev, level_sel,
+			 CIF_ISP_FILT_LELEL_SEL);
+}
+
+static void
+isp_demosaiclp_enable_v12(struct rkisp_isp_params_vdev *params_vdev,
+			  bool en)
+{
+	if (en)
+		isp_param_clear_bits(params_vdev,
+				     CIF_ISP_FILT_LELEL_SEL,
+				     CIF_ISP_FLT_LEVEL_OLD_LP);
+	else
+		isp_param_set_bits(params_vdev,
+				   CIF_ISP_FILT_LELEL_SEL,
+				   CIF_ISP_FLT_LEVEL_OLD_LP);
+}
+
+static void
+isp_rkiesharp_config_v10(struct rkisp_isp_params_vdev *params_vdev,
+			 const struct cifisp_rkiesharp_config *arg)
+{
+}
+
+static void
+isp_rkiesharp_config_v12(struct rkisp_isp_params_vdev *params_vdev,
+			 const struct cifisp_rkiesharp_config *arg)
+{
+	u32 i;
+	u32 val;
+	u32 eff_ctrl;
+	u32 minmax[5];
+
+	val = CIF_ISP_PACK_4BYTE(arg->yavg_thr[0],
+				 arg->yavg_thr[1],
+				 arg->yavg_thr[2],
+				 arg->yavg_thr[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_YAVG_THR);
+
+	val = CIF_ISP_PACK_4BYTE(arg->delta1[0],
+				 arg->delta2[0],
+				 arg->delta1[1],
+				 arg->delta2[1]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_DELTA_P0_P1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->delta1[2],
+				 arg->delta2[2],
+				 arg->delta1[3],
+				 arg->delta2[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_DELTA_P2_P3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->delta1[4],
+				 arg->delta2[4],
+				 0,
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_DELTA_P4);
+
+	for (i = 0; i < 5; i++)
+		minmax[i] = arg->minnumber[i] << 4 | arg->maxnumber[i];
+	val = CIF_ISP_PACK_4BYTE(minmax[0],
+				 minmax[1],
+				 minmax[2],
+				 minmax[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_NPIXEL_P0_P1_P2_P3);
+	rkisp1_iowrite32(params_vdev, minmax[4],
+			 CIF_RKSHARP_NPIXEL_P4);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[0],
+				 arg->gauss_flat_coe[1],
+				 arg->gauss_flat_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_FLAT_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[3],
+				 arg->gauss_flat_coe[4],
+				 arg->gauss_flat_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_FLAT_COE2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_flat_coe[6],
+				 arg->gauss_flat_coe[7],
+				 arg->gauss_flat_coe[8],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_FLAT_COE3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[0],
+				 arg->gauss_noise_coe[1],
+				 arg->gauss_noise_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_NOISE_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[3],
+				 arg->gauss_noise_coe[4],
+				 arg->gauss_noise_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_NOISE_COE2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_noise_coe[6],
+				 arg->gauss_noise_coe[7],
+				 arg->gauss_noise_coe[8],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_NOISE_COE3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[0],
+				 arg->gauss_other_coe[1],
+				 arg->gauss_other_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_OTHER_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[3],
+				 arg->gauss_other_coe[4],
+				 arg->gauss_other_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_OTHER_COE2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->gauss_other_coe[6],
+				 arg->gauss_other_coe[7],
+				 arg->gauss_other_coe[8],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GAUSS_OTHER_COE3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line1_filter_coe[0],
+				 arg->line1_filter_coe[1],
+				 arg->line1_filter_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE1_FILTER_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line1_filter_coe[3],
+				 arg->line1_filter_coe[4],
+				 arg->line1_filter_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE1_FILTER_COE2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[0],
+				 arg->line2_filter_coe[1],
+				 arg->line2_filter_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE2_FILTER_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[3],
+				 arg->line2_filter_coe[4],
+				 arg->line2_filter_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE2_FILTER_COE2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line2_filter_coe[6],
+				 arg->line2_filter_coe[7],
+				 arg->line2_filter_coe[8],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE2_FILTER_COE3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line3_filter_coe[0],
+				 arg->line3_filter_coe[1],
+				 arg->line3_filter_coe[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE3_FILTER_COE1);
+
+	val = CIF_ISP_PACK_4BYTE(arg->line3_filter_coe[3],
+				 arg->line3_filter_coe[4],
+				 arg->line3_filter_coe[5],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_LINE3_FILTER_COE2);
+
+	val = CIF_ISP_PACK_2SHORT(arg->grad_seq[0],
+				  arg->grad_seq[1]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GRAD_SEQ_P0_P1);
+
+	val = CIF_ISP_PACK_2SHORT(arg->grad_seq[2],
+				  arg->grad_seq[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_GRAD_SEQ_P2_P3);
+
+	val = CIF_ISP_PACK_4BYTE(arg->sharp_factor[0],
+				 arg->sharp_factor[1],
+				 arg->sharp_factor[2],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_SHARP_FACTOR_P0_P1_P2);
+
+	val = CIF_ISP_PACK_4BYTE(arg->sharp_factor[3],
+				 arg->sharp_factor[4],
+				 0,
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_SHARP_FACTOR_P3_P4);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[0],
+				 arg->uv_gauss_flat_coe[1],
+				 arg->uv_gauss_flat_coe[2],
+				 arg->uv_gauss_flat_coe[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_FLAT_COE11_COE14);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[4],
+				 arg->uv_gauss_flat_coe[5],
+				 arg->uv_gauss_flat_coe[6],
+				 arg->uv_gauss_flat_coe[7]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_FLAT_COE15_COE23);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[8],
+				 arg->uv_gauss_flat_coe[9],
+				 arg->uv_gauss_flat_coe[10],
+				 arg->uv_gauss_flat_coe[11]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_FLAT_COE24_COE32);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_flat_coe[12],
+				 arg->uv_gauss_flat_coe[13],
+				 arg->uv_gauss_flat_coe[14],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_FLAT_COE33_COE35);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[0],
+				 arg->uv_gauss_noise_coe[1],
+				 arg->uv_gauss_noise_coe[2],
+				 arg->uv_gauss_noise_coe[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_NOISE_COE11_COE14);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[4],
+				 arg->uv_gauss_noise_coe[5],
+				 arg->uv_gauss_noise_coe[6],
+				 arg->uv_gauss_noise_coe[7]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_NOISE_COE15_COE23);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[8],
+				 arg->uv_gauss_noise_coe[9],
+				 arg->uv_gauss_noise_coe[10],
+				 arg->uv_gauss_noise_coe[11]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_NOISE_COE24_COE32);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_noise_coe[12],
+				 arg->uv_gauss_noise_coe[13],
+				 arg->uv_gauss_noise_coe[14],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_NOISE_COE33_COE35);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[0],
+				 arg->uv_gauss_other_coe[1],
+				 arg->uv_gauss_other_coe[2],
+				 arg->uv_gauss_other_coe[3]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_OTHER_COE11_COE14);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[4],
+				 arg->uv_gauss_other_coe[5],
+				 arg->uv_gauss_other_coe[6],
+				 arg->uv_gauss_other_coe[7]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_OTHER_COE15_COE23);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[8],
+				 arg->uv_gauss_other_coe[9],
+				 arg->uv_gauss_other_coe[10],
+				 arg->uv_gauss_other_coe[11]);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_OTHER_COE24_COE32);
+
+	val = CIF_ISP_PACK_4BYTE(arg->uv_gauss_other_coe[12],
+				 arg->uv_gauss_other_coe[13],
+				 arg->uv_gauss_other_coe[14],
+				 0);
+	rkisp1_iowrite32(params_vdev, val,
+			 CIF_RKSHARP_UV_GAUSS_OTHER_COE33_COE35);
+
+	rkisp1_iowrite32(params_vdev, arg->switch_avg,
+			 CIF_RKSHARP_CTRL);
+
+	rkisp1_iowrite32(params_vdev,
+			 arg->coring_thr,
+			 CIF_IMG_EFF_SHARPEN);
+
+	val = rkisp1_ioread32(params_vdev, CIF_IMG_EFF_MAT_3) & 0x0F;
+	val |= (arg->lap_mat_coe[0] & 0x0F) << 4 |
+	       (arg->lap_mat_coe[1] & 0x0F) << 8 |
+	       (arg->lap_mat_coe[2] & 0x0F) << 12;
+	rkisp1_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_3);
+
+	val = (arg->lap_mat_coe[3] & 0x0F) << 0 |
+	       (arg->lap_mat_coe[4] & 0x0F) << 4 |
+	       (arg->lap_mat_coe[5] & 0x0F) << 8 |
+	       (arg->lap_mat_coe[6] & 0x0F) << 12;
+	rkisp1_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_4);
+
+	val = (arg->lap_mat_coe[7] & 0x0F) << 0 |
+	       (arg->lap_mat_coe[8] & 0x0F) << 4;
+	rkisp1_iowrite32(params_vdev, val, CIF_IMG_EFF_MAT_5);
+
+	eff_ctrl = rkisp1_ioread32(params_vdev, CIF_IMG_EFF_CTRL);
+	eff_ctrl &= ~CIF_IMG_EFF_CTRL_MODE_MASK;
+	eff_ctrl |= CIF_IMG_EFF_CTRL_MODE_RKSHARPEN;
+
+	if (arg->full_range)
+		eff_ctrl |= CIF_IMG_EFF_CTRL_YCBCR_FULL;
+
+	rkisp1_iowrite32(params_vdev, eff_ctrl, CIF_IMG_EFF_CTRL);
+}
+
+static struct rkisp_isp_params_v1x_ops rkisp1_v10_isp_params_ops = {
+	.dpcc_config = isp_dpcc_config,
+	.bls_config = isp_bls_config,
+	.lsc_config = isp_lsc_config,
+	.lsc_matrix_config = isp_lsc_matrix_config_v10,
+	.flt_config = isp_flt_config,
+	.bdm_config = isp_bdm_config,
+	.sdg_config = isp_sdg_config,
+	.goc_config = isp_goc_config_v10,
+	.ctk_config = isp_ctk_config,
+	.ctk_enable = isp_ctk_enable,
+	.awb_meas_config = isp_awb_meas_config_v10,
+	.awb_meas_enable = isp_awb_meas_enable_v10,
+	.awb_gain_config = isp_awb_gain_config_v10,
+	.aec_config = isp_aec_config_v10,
+	.cproc_config = isp_cproc_config,
+	.hst_config = isp_hst_config_v10,
+	.hst_enable = isp_hst_enable_v10,
+	.afm_config = isp_afm_config_v10,
+	.ie_config = isp_ie_config,
+	.ie_enable = isp_ie_enable,
+	.csm_config = isp_csm_config,
+	.dpf_config = isp_dpf_config,
+	.dpf_strength_config = isp_dpf_strength_config,
+	.wdr_config = isp_wdr_config_v10,
+	.wdr_enable = isp_dummy_enable,
+	.demosaiclp_config = isp_demosaiclp_config_v10,
+	.demosaiclp_enable = isp_dummy_enable,
+	.rkiesharp_config = isp_rkiesharp_config_v10,
+	.rkiesharp_enable = isp_dummy_enable,
+};
+
+static struct rkisp_isp_params_v1x_ops rkisp1_v12_isp_params_ops = {
+	.dpcc_config = isp_dpcc_config,
+	.bls_config = isp_bls_config,
+	.lsc_config = isp_lsc_config,
+	.lsc_matrix_config = isp_lsc_matrix_config_v12,
+	.flt_config = isp_flt_config,
+	.bdm_config = isp_bdm_config,
+	.sdg_config = isp_sdg_config,
+	.goc_config = isp_goc_config_v12,
+	.ctk_config = isp_ctk_config,
+	.ctk_enable = isp_ctk_enable,
+	.awb_meas_config = isp_awb_meas_config_v12,
+	.awb_meas_enable = isp_awb_meas_enable_v12,
+	.awb_gain_config = isp_awb_gain_config_v12,
+	.aec_config = isp_aec_config_v12,
+	.cproc_config = isp_cproc_config,
+	.hst_config = isp_hst_config_v12,
+	.hst_enable = isp_hst_enable_v12,
+	.afm_config = isp_afm_config_v12,
+	.ie_config = isp_ie_config,
+	.ie_enable = isp_ie_enable,
+	.csm_config = isp_csm_config,
+	.dpf_config = isp_dpf_config,
+	.dpf_strength_config = isp_dpf_strength_config,
+	.wdr_config = isp_wdr_config_v12,
+	.wdr_enable = isp_wdr_enable_v12,
+	.demosaiclp_config = isp_demosaiclp_config_v12,
+	.demosaiclp_enable = isp_demosaiclp_enable_v12,
+	.rkiesharp_config = isp_rkiesharp_config_v12,
+	.rkiesharp_enable = isp_ie_enable,
+};
+
+static struct rkisp_isp_params_v1x_config rkisp1_v10_isp_params_config = {
+	.gamma_out_max_samples = 17,
+	.hst_weight_grids_size = 28,
+};
+
+static struct rkisp_isp_params_v1x_config rkisp1_v12_isp_params_config = {
+	.gamma_out_max_samples = 34,
+	.hst_weight_grids_size = 81,
+};
+
+static __maybe_unused
+void __isp_isr_other_config(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct rkisp1_isp_params_cfg *new_params)
+{
+	unsigned int module_en_update, module_cfg_update, module_ens;
+	struct rkisp_isp_params_v1x_ops *ops =
+		(struct rkisp_isp_params_v1x_ops *)params_vdev->priv_ops;
+	struct ispsd_in_fmt *in_fmt = &params_vdev->dev->isp_sdev.in_fmt;
+	bool ie_enable;
+	bool iesharp_enable;
+	bool is_grey_sensor;
+
+	is_grey_sensor = in_fmt->mbus_code == MEDIA_BUS_FMT_Y8_1X8 ||
+			 in_fmt->mbus_code == MEDIA_BUS_FMT_Y10_1X10 ||
+			 in_fmt->mbus_code == MEDIA_BUS_FMT_Y12_1X12;
+
+	module_en_update = new_params->module_en_update;
+	module_cfg_update = new_params->module_cfg_update;
+	module_ens = new_params->module_ens;
+
+	ie_enable = !!(module_ens & CIFISP_MODULE_IE);
+	iesharp_enable = !!(module_ens & CIFISP_MODULE_RK_IESHARP);
+	if (ie_enable && iesharp_enable) {
+		iesharp_enable = false;
+		dev_err(params_vdev->dev->dev,
+			"You can only use one mode in IE and RK_IESHARP!\n");
+	}
+
+	if ((module_en_update & CIFISP_MODULE_DPCC) ||
+	    (module_cfg_update & CIFISP_MODULE_DPCC)) {
+		/*update dpc config */
+		if ((module_cfg_update & CIFISP_MODULE_DPCC))
+			ops->dpcc_config(params_vdev,
+					 &new_params->others.dpcc_config);
+
+		if (module_en_update & CIFISP_MODULE_DPCC) {
+			if (!!(module_ens & CIFISP_MODULE_DPCC))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_DPCC_MODE,
+						   CIF_ISP_DPCC_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_DPCC_MODE,
+						     CIF_ISP_DPCC_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_BLS) ||
+	    (module_cfg_update & CIFISP_MODULE_BLS)) {
+		/* update bls config */
+		if ((module_cfg_update & CIFISP_MODULE_BLS))
+			ops->bls_config(params_vdev, &new_params->others.bls_config);
+
+		if (module_en_update & CIFISP_MODULE_BLS) {
+			if (!!(module_ens & CIFISP_MODULE_BLS))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_BLS_CTRL,
+						   CIF_ISP_BLS_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_BLS_CTRL,
+						     CIF_ISP_BLS_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_SDG) ||
+	    (module_cfg_update & CIFISP_MODULE_SDG)) {
+		/* update sdg config */
+		if ((module_cfg_update & CIFISP_MODULE_SDG))
+			ops->sdg_config(params_vdev, &new_params->others.sdg_config);
+
+		if (module_en_update & CIFISP_MODULE_SDG) {
+			if (!!(module_ens & CIFISP_MODULE_SDG))
+				isp_param_set_bits(params_vdev,
+						CIF_ISP_CTRL,
+						CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						CIF_ISP_CTRL,
+						CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_LSC) ||
+	    (module_cfg_update & CIFISP_MODULE_LSC)) {
+		/* update lsc config */
+		if ((module_cfg_update & CIFISP_MODULE_LSC))
+			ops->lsc_config(params_vdev, &new_params->others.lsc_config);
+
+		if (module_en_update & CIFISP_MODULE_LSC) {
+			if (!!(module_ens & CIFISP_MODULE_LSC))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_LSC_CTRL,
+						   CIF_ISP_LSC_CTRL_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_LSC_CTRL,
+						     CIF_ISP_LSC_CTRL_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_AWB_GAIN) ||
+	    (module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
+		/* update awb gains */
+		if ((module_cfg_update & CIFISP_MODULE_AWB_GAIN))
+			ops->awb_gain_config(params_vdev,
+					     &new_params->others.awb_gain_config);
+
+		if (module_en_update & CIFISP_MODULE_AWB_GAIN) {
+			if (!!(module_ens & CIFISP_MODULE_AWB_GAIN))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_CTRL,
+						   CIF_ISP_CTRL_ISP_AWB_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_CTRL,
+						     CIF_ISP_CTRL_ISP_AWB_ENA);
+		}
+	}
+
+	if (((module_en_update & CIFISP_MODULE_BDM) ||
+	     (module_cfg_update & CIFISP_MODULE_BDM)) &&
+	    !is_grey_sensor) {
+		/* update bdm config */
+		if ((module_cfg_update & CIFISP_MODULE_BDM))
+			ops->bdm_config(params_vdev, &new_params->others.bdm_config);
+
+		if (module_en_update & CIFISP_MODULE_BDM) {
+			if (!!(module_ens & CIFISP_MODULE_BDM))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_DEMOSAIC,
+						   CIF_ISP_DEMOSAIC_BYPASS);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_DEMOSAIC,
+						     CIF_ISP_DEMOSAIC_BYPASS);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_DEMOSAICLP) ||
+	    (module_cfg_update & CIFISP_MODULE_DEMOSAICLP)) {
+		/* update demosaiclp  config */
+		if ((module_cfg_update & CIFISP_MODULE_DEMOSAICLP))
+			ops->demosaiclp_config(params_vdev,
+				&new_params->others.demosaiclp_config);
+
+		if (module_en_update & CIFISP_MODULE_DEMOSAICLP)
+			ops->demosaiclp_enable(params_vdev,
+				!!(module_ens & CIFISP_MODULE_DEMOSAICLP));
+	}
+
+	if ((module_en_update & CIFISP_MODULE_FLT) ||
+	    (module_cfg_update & CIFISP_MODULE_FLT)) {
+		/* update filter config */
+		if ((module_cfg_update & CIFISP_MODULE_FLT))
+			ops->flt_config(params_vdev, &new_params->others.flt_config);
+
+		if (module_en_update & CIFISP_MODULE_FLT) {
+			if (!!(module_ens & CIFISP_MODULE_FLT))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_FILT_MODE,
+						   CIF_ISP_FLT_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_FILT_MODE,
+						     CIF_ISP_FLT_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_CTK) ||
+	    (module_cfg_update & CIFISP_MODULE_CTK)) {
+		/* update ctk config */
+		if ((module_cfg_update & CIFISP_MODULE_CTK))
+			ops->ctk_config(params_vdev, &new_params->others.ctk_config);
+
+		if (module_en_update & CIFISP_MODULE_CTK)
+			ops->ctk_enable(params_vdev,
+					!!(module_ens & CIFISP_MODULE_CTK));
+	}
+
+	if ((module_en_update & CIFISP_MODULE_GOC) ||
+	    (module_cfg_update & CIFISP_MODULE_GOC)) {
+		/* update goc config */
+		if ((module_cfg_update & CIFISP_MODULE_GOC))
+			ops->goc_config(params_vdev, &new_params->others.goc_config);
+
+		if (module_en_update & CIFISP_MODULE_GOC) {
+			if (!!(module_ens & CIFISP_MODULE_GOC))
+				isp_param_set_bits(params_vdev,
+						CIF_ISP_CTRL,
+						CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						CIF_ISP_CTRL,
+						CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_CPROC) ||
+	    (module_cfg_update & CIFISP_MODULE_CPROC)) {
+		/* update cproc config */
+		if ((module_cfg_update & CIFISP_MODULE_CPROC)) {
+			ops->cproc_config(params_vdev,
+					  &new_params->others.cproc_config);
+		}
+		if (module_en_update & CIFISP_MODULE_CPROC) {
+			if (!!(module_ens & CIFISP_MODULE_CPROC))
+				isp_param_set_bits(params_vdev,
+						   CIF_C_PROC_CTRL,
+						   CIF_C_PROC_CTR_ENABLE);
+			else
+				isp_param_clear_bits(params_vdev,
+						   CIF_C_PROC_CTRL,
+						   CIF_C_PROC_CTR_ENABLE);
+		}
+	}
+
+	if (((module_en_update & CIFISP_MODULE_IE) ||
+	     (module_cfg_update & CIFISP_MODULE_IE)) && ie_enable) {
+		/* update ie config */
+		if ((module_cfg_update & CIFISP_MODULE_IE))
+			ops->ie_config(params_vdev, &new_params->others.ie_config);
+	}
+
+	if (((module_en_update & CIFISP_MODULE_RK_IESHARP) ||
+	     (module_cfg_update & CIFISP_MODULE_RK_IESHARP)) && iesharp_enable) {
+		/* update rkiesharp config */
+		if ((module_cfg_update & CIFISP_MODULE_RK_IESHARP))
+			ops->rkiesharp_config(params_vdev,
+				&new_params->others.rkiesharp_config);
+	}
+
+	if (ie_enable || iesharp_enable)
+		ops->ie_enable(params_vdev, true);
+	else
+		ops->ie_enable(params_vdev, false);
+
+	if ((module_en_update & CIFISP_MODULE_DPF) ||
+	    (module_cfg_update & CIFISP_MODULE_DPF)) {
+		/* update dpf  config */
+		if ((module_cfg_update & CIFISP_MODULE_DPF))
+			ops->dpf_config(params_vdev, &new_params->others.dpf_config);
+
+		if (module_en_update & CIFISP_MODULE_DPF) {
+			if (!!(module_ens & CIFISP_MODULE_DPF))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_DPF_MODE,
+						   CIF_ISP_DPF_MODE_EN);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_DPF_MODE,
+						     CIF_ISP_DPF_MODE_EN);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_DPF_STRENGTH) ||
+	    (module_cfg_update & CIFISP_MODULE_DPF_STRENGTH)) {
+		/* update dpf strength config */
+		ops->dpf_strength_config(params_vdev,
+					 &new_params->others.dpf_strength_config);
+	}
+
+	if ((module_en_update & CIFISP_MODULE_WDR) ||
+	    (module_cfg_update & CIFISP_MODULE_WDR)) {
+		/* update wdr config */
+		if ((module_cfg_update & CIFISP_MODULE_WDR))
+			ops->wdr_config(params_vdev,
+				&new_params->others.wdr_config);
+
+		if (module_en_update & CIFISP_MODULE_WDR)
+			ops->wdr_enable(params_vdev,
+				       !!(module_ens & CIFISP_MODULE_WDR));
+	}
+}
+
+static __maybe_unused
+void __isp_isr_meas_config(struct rkisp_isp_params_vdev *params_vdev,
+			   struct  rkisp1_isp_params_cfg *new_params)
+{
+	unsigned int module_en_update, module_cfg_update, module_ens;
+	struct rkisp_isp_params_v1x_ops *ops =
+		(struct rkisp_isp_params_v1x_ops *)params_vdev->priv_ops;
+
+	module_en_update = new_params->module_en_update;
+	module_cfg_update = new_params->module_cfg_update;
+	module_ens = new_params->module_ens;
+
+	if ((module_en_update & CIFISP_MODULE_AWB) ||
+	    (module_cfg_update & CIFISP_MODULE_AWB)) {
+		/* update awb config */
+		if ((module_cfg_update & CIFISP_MODULE_AWB))
+			ops->awb_meas_config(params_vdev,
+					     &new_params->meas.awb_meas_config);
+
+		if (module_en_update & CIFISP_MODULE_AWB)
+			ops->awb_meas_enable(params_vdev,
+					     &new_params->meas.awb_meas_config,
+					     !!(module_ens & CIFISP_MODULE_AWB));
+	}
+
+	if ((module_en_update & CIFISP_MODULE_AFC) ||
+	    (module_cfg_update & CIFISP_MODULE_AFC)) {
+		/* update afc config */
+		if ((module_cfg_update & CIFISP_MODULE_AFC))
+			ops->afm_config(params_vdev, &new_params->meas.afc_config);
+
+		if (module_en_update & CIFISP_MODULE_AFC) {
+			if (!!(module_ens & CIFISP_MODULE_AFC))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_AFM_CTRL,
+						   CIF_ISP_AFM_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_AFM_CTRL,
+						     CIF_ISP_AFM_ENA);
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_HST) ||
+	    (module_cfg_update & CIFISP_MODULE_HST)) {
+		/* update hst config */
+		if ((module_cfg_update & CIFISP_MODULE_HST))
+			ops->hst_config(params_vdev, &new_params->meas.hst_config);
+
+		if (module_en_update & CIFISP_MODULE_HST)
+			ops->hst_enable(params_vdev,
+					&new_params->meas.hst_config,
+					!!(module_ens & CIFISP_MODULE_HST));
+	}
+
+	if ((module_en_update & CIFISP_MODULE_AEC) ||
+	    (module_cfg_update & CIFISP_MODULE_AEC)) {
+		/* update aec config */
+		if ((module_cfg_update & CIFISP_MODULE_AEC))
+			ops->aec_config(params_vdev, &new_params->meas.aec_config);
+
+		if (module_en_update & CIFISP_MODULE_AEC) {
+			if (!!(module_ens & CIFISP_MODULE_AEC))
+				isp_param_set_bits(params_vdev,
+						   CIF_ISP_EXP_CTRL,
+						   CIF_ISP_EXP_ENA);
+			else
+				isp_param_clear_bits(params_vdev,
+						     CIF_ISP_EXP_CTRL,
+						     CIF_ISP_EXP_ENA);
+		}
+	}
+}
+
+static __maybe_unused
+void __preisp_isr_update_hdrae_para(struct rkisp_isp_params_vdev *params_vdev,
+				    struct rkisp1_isp_params_cfg *new_params)
+{
+	struct preisp_hdrae_para_s *hdrae;
+	struct cifisp_lsc_config *lsc;
+	struct cifisp_awb_gain_config *awb_gain;
+	unsigned int module_en_update, module_cfg_update, module_ens;
+	int i, ret;
+
+	hdrae = &params_vdev->hdrae_para;
+	module_en_update = new_params->module_en_update;
+	module_cfg_update = new_params->module_cfg_update;
+	module_ens = new_params->module_ens;
+	lsc = &new_params->others.lsc_config;
+	awb_gain = &new_params->others.awb_gain_config;
+
+	if (!params_vdev->dev->hdr.sensor)
+		return;
+
+	if ((module_en_update & CIFISP_MODULE_AWB_GAIN) ||
+	    (module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
+		/* update awb gains */
+		if ((module_cfg_update & CIFISP_MODULE_AWB_GAIN)) {
+			hdrae->r_gain = awb_gain->gain_red;
+			hdrae->b_gain = awb_gain->gain_blue;
+			hdrae->gr_gain = awb_gain->gain_green_r;
+			hdrae->gb_gain = awb_gain->gain_green_b;
+		}
+
+		if (module_en_update & CIFISP_MODULE_AWB_GAIN) {
+			if (!(module_ens & CIFISP_MODULE_AWB_GAIN)) {
+				hdrae->r_gain = 0x0100;
+				hdrae->b_gain = 0x0100;
+				hdrae->gr_gain = 0x0100;
+				hdrae->gb_gain = 0x0100;
+			}
+		}
+	}
+
+	if ((module_en_update & CIFISP_MODULE_LSC) ||
+	    (module_cfg_update & CIFISP_MODULE_LSC)) {
+		/* update lsc config */
+		if ((module_cfg_update & CIFISP_MODULE_LSC))
+			memcpy(hdrae->lsc_table, lsc->gr_data_tbl,
+				PREISP_LSCTBL_SIZE);
+
+		if (module_en_update & CIFISP_MODULE_LSC) {
+			if (!(module_ens & CIFISP_MODULE_LSC))
+				for (i = 0; i < PREISP_LSCTBL_SIZE; i++)
+					hdrae->lsc_table[i] = 0x0400;
+		}
+	}
+
+	ret = v4l2_subdev_call(params_vdev->dev->hdr.sensor, core, ioctl,
+			       PREISP_CMD_SAVE_HDRAE_PARAM, hdrae);
+	if (ret)
+		params_vdev->dev->hdr.sensor = NULL;
+}
+
+static const struct cifisp_awb_meas_config awb_params_default_config = {
+	{
+		0, 0, RKISP_DEFAULT_WIDTH, RKISP_DEFAULT_HEIGHT
+	},
+	CIFISP_AWB_MODE_YCBCR, 200, 30, 20, 20, 0, 128, 128
+};
+
+static const struct cifisp_aec_config aec_params_default_config = {
+	CIFISP_EXP_MEASURING_MODE_0,
+	CIFISP_EXP_CTRL_AUTOSTOP_0,
+	{
+		RKISP_DEFAULT_WIDTH >> 2, RKISP_DEFAULT_HEIGHT >> 2,
+		RKISP_DEFAULT_WIDTH >> 1, RKISP_DEFAULT_HEIGHT >> 1
+	}
+};
+
+static const struct cifisp_hst_config hst_params_default_config = {
+	CIFISP_HISTOGRAM_MODE_RGB_COMBINED,
+	3,
+	{
+		RKISP_DEFAULT_WIDTH >> 2, RKISP_DEFAULT_HEIGHT >> 2,
+		RKISP_DEFAULT_WIDTH >> 1, RKISP_DEFAULT_HEIGHT >> 1
+	},
+	{
+		0, /* To be filled in with 0x01 at runtime. */
+	}
+};
+
+static const struct cifisp_afc_config afc_params_default_config = {
+	1,
+	{
+		{
+			300, 225, 200, 150
+		}
+	},
+	4,
+	14
+};
+
+/* Not called when the camera active, thus not isr protection. */
+static void rkisp1_params_configure_isp_v1x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	struct rkisp_isp_params_v1x_ops *ops =
+		(struct rkisp_isp_params_v1x_ops *)params_vdev->priv_ops;
+	struct cifisp_hst_config hst = hst_params_default_config;
+	struct device *dev = params_vdev->dev->dev;
+	int i;
+
+	spin_lock(&params_vdev->config_lock);
+
+	ops->awb_meas_config(params_vdev, &awb_params_default_config);
+	ops->awb_meas_enable(params_vdev, &awb_params_default_config, true);
+
+	ops->aec_config(params_vdev, &aec_params_default_config);
+	isp_param_set_bits(params_vdev, CIF_ISP_EXP_CTRL, CIF_ISP_EXP_ENA);
+
+	ops->afm_config(params_vdev, &afc_params_default_config);
+	isp_param_set_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
+
+	memset(hst.hist_weight, 0x01, sizeof(hst.hist_weight));
+	ops->hst_config(params_vdev, &hst);
+	if (params_vdev->dev->isp_ver == ISP_V12 ||
+	    params_vdev->dev->isp_ver == ISP_V13) {
+		isp_param_set_bits(params_vdev, CIF_ISP_HIST_CTRL_V12,
+				   ~CIF_ISP_HIST_CTRL_MODE_MASK_V12 |
+				   hst_params_default_config.mode);
+	} else {
+		isp_param_set_bits(params_vdev, CIF_ISP_HIST_PROP_V10,
+				   ~CIF_ISP_HIST_PROP_MODE_MASK_V10 |
+				   hst_params_default_config.mode);
+	}
+
+	/* set the  range */
+	if (params_vdev->quantization == V4L2_QUANTIZATION_FULL_RANGE)
+		ops->csm_config(params_vdev, true);
+	else
+		ops->csm_config(params_vdev, false);
+
+	/* disable color related config for grey sensor */
+	if (params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y8_1X8 ||
+	    params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y10_1X10 ||
+	    params_vdev->in_mbus_code == MEDIA_BUS_FMT_Y12_1X12) {
+		ops->ctk_enable(params_vdev, false);
+		isp_param_clear_bits(params_vdev,
+				     CIF_ISP_CTRL,
+				     CIF_ISP_CTRL_ISP_AWB_ENA);
+		isp_param_clear_bits(params_vdev,
+				     CIF_ISP_LSC_CTRL,
+				     CIF_ISP_LSC_CTRL_ENA);
+	}
+
+	params_vdev->hdrae_para.r_gain = 0x0100;
+	params_vdev->hdrae_para.b_gain = 0x0100;
+	params_vdev->hdrae_para.gr_gain = 0x0100;
+	params_vdev->hdrae_para.gb_gain = 0x0100;
+	for (i = 0; i < PREISP_LSCTBL_SIZE; i++)
+		params_vdev->hdrae_para.lsc_table[i] = 0x0400;
+
+	/* override the default things */
+	if (!params_vdev->isp1x_params.module_cfg_update &&
+	    !params_vdev->isp1x_params.module_en_update)
+		dev_warn(dev, "can not get first iq setting in stream on\n");
+
+	__isp_isr_other_config(params_vdev, &params_vdev->isp1x_params);
+	__isp_isr_meas_config(params_vdev, &params_vdev->isp1x_params);
+	__preisp_isr_update_hdrae_para(params_vdev, &params_vdev->isp1x_params);
+
+	spin_unlock(&params_vdev->config_lock);
+}
+
+static void rkisp1_save_first_param_v1x(struct rkisp_isp_params_vdev *params_vdev, void *param)
+{
+	struct rkisp1_isp_params_cfg *new_params;
+
+	new_params = (struct rkisp1_isp_params_cfg *)param;
+	params_vdev->isp1x_params = *new_params;
+}
+
+static void rkisp1_clear_first_param_v1x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	params_vdev->isp1x_params.module_cfg_update = 0;
+	params_vdev->isp1x_params.module_en_update = 0;
+}
+
+/* Not called when the camera active, thus not isr protection. */
+static void rkisp1_params_disable_isp_v1x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	struct rkisp_isp_params_v1x_ops *ops =
+		(struct rkisp_isp_params_v1x_ops *)params_vdev->priv_ops;
+
+	isp_param_clear_bits(params_vdev, CIF_ISP_DPCC_MODE, CIF_ISP_DPCC_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_LSC_CTRL,
+			     CIF_ISP_LSC_CTRL_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_BLS_CTRL, CIF_ISP_BLS_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+			     CIF_ISP_CTRL_ISP_GAMMA_IN_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+			     CIF_ISP_CTRL_ISP_GAMMA_OUT_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_DEMOSAIC,
+			     CIF_ISP_DEMOSAIC_BYPASS);
+	isp_param_clear_bits(params_vdev, CIF_ISP_FILT_MODE, CIF_ISP_FLT_ENA);
+	ops->awb_meas_enable(params_vdev, NULL, false);
+	isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+			     CIF_ISP_CTRL_ISP_AWB_ENA);
+	isp_param_clear_bits(params_vdev, CIF_ISP_EXP_CTRL, CIF_ISP_EXP_ENA);
+	ops->ctk_enable(params_vdev, false);
+	isp_param_clear_bits(params_vdev, CIF_C_PROC_CTRL,
+			     CIF_C_PROC_CTR_ENABLE);
+	ops->hst_enable(params_vdev, NULL, false);
+	isp_param_clear_bits(params_vdev, CIF_ISP_AFM_CTRL, CIF_ISP_AFM_ENA);
+	ops->ie_enable(params_vdev, false);
+	isp_param_clear_bits(params_vdev, CIF_ISP_DPF_MODE,
+			     CIF_ISP_DPF_MODE_EN);
+}
+
+static void rkisp1_params_isr_v1x(struct rkisp_isp_params_vdev *params_vdev,
+				  u32 isp_mis)
+{
+	struct rkisp1_isp_params_cfg *new_params;
+	struct rkisp_buffer *cur_buf = NULL;
+	unsigned int cur_frame_id =
+		atomic_read(&params_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+
+	spin_lock(&params_vdev->config_lock);
+	if (!params_vdev->streamon)
+		goto unlock;
+
+	/* get one empty buffer */
+	if (!list_empty(&params_vdev->params))
+		cur_buf = list_first_entry(&params_vdev->params,
+					   struct rkisp_buffer, queue);
+	if (!cur_buf)
+		goto unlock;
+
+	new_params = (struct rkisp1_isp_params_cfg *)(cur_buf->vaddr[0]);
+
+	if (isp_mis & CIF_ISP_FRAME) {
+		u32 isp_ctrl;
+
+		list_del(&cur_buf->queue);
+
+		__isp_isr_other_config(params_vdev, new_params);
+		__isp_isr_meas_config(params_vdev, new_params);
+
+		/* update shadow register immediately */
+		isp_ctrl = rkisp1_ioread32(params_vdev, CIF_ISP_CTRL);
+		isp_ctrl |= CIF_ISP_CTRL_ISP_CFG_UPD;
+		rkisp1_iowrite32(params_vdev, isp_ctrl, CIF_ISP_CTRL);
+
+		__preisp_isr_update_hdrae_para(params_vdev, new_params);
+
+		cur_buf->vb.sequence = cur_frame_id;
+		vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
+	}
+unlock:
+	spin_unlock(&params_vdev->config_lock);
+}
+
+static struct rkisp_isp_params_ops rkisp_isp_params_ops_tbl = {
+	.save_first_param = rkisp1_save_first_param_v1x,
+	.clear_first_param = rkisp1_clear_first_param_v1x,
+	.config_isp = rkisp1_params_configure_isp_v1x,
+	.disable_isp = rkisp1_params_disable_isp_v1x,
+	.isr_hdl = rkisp1_params_isr_v1x,
+};
+
+void rkisp_init_params_vdev_v1x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	params_vdev->ops = &rkisp_isp_params_ops_tbl;
+
+	if (params_vdev->dev->isp_ver == ISP_V12 ||
+	    params_vdev->dev->isp_ver == ISP_V13) {
+		params_vdev->priv_ops = &rkisp1_v12_isp_params_ops;
+		params_vdev->priv_cfg = &rkisp1_v12_isp_params_config;
+	} else {
+		params_vdev->priv_ops = &rkisp1_v10_isp_params_ops;
+		params_vdev->priv_cfg = &rkisp1_v10_isp_params_config;
+	}
+}
diff --git a/drivers/media/platform/rockchip/isp/isp_params_v1x.h b/drivers/media/platform/rockchip/isp/isp_params_v1x.h
new file mode 100644
index 000000000000..f527ec078f63
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_params_v1x.h
@@ -0,0 +1,81 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#ifndef _RKISP_ISP_PARAM_V1X_H
+#define _RKISP_ISP_PARAM_V1X_H
+
+#include <linux/rkisp1-config.h>
+#include <linux/rk-preisp.h>
+#include "common.h"
+#include "isp_params.h"
+
+struct rkisp_isp_params_vdev;
+struct rkisp_isp_params_v1x_ops {
+	void (*dpcc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct cifisp_dpcc_config *arg);
+	void (*bls_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_bls_config *arg);
+	void (*lsc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_lsc_config *arg);
+	void (*lsc_matrix_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct cifisp_lsc_config *pconfig);
+	void (*flt_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_flt_config *arg);
+	void (*bdm_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_bdm_config *arg);
+	void (*sdg_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_sdg_config *arg);
+	void (*goc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_goc_config *arg);
+	void (*ctk_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_ctk_config *arg);
+	void (*ctk_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*awb_meas_config)(struct rkisp_isp_params_vdev *params_vdev,
+				const struct cifisp_awb_meas_config *arg);
+	void (*awb_meas_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				const struct cifisp_awb_meas_config *arg,
+				bool en);
+	void (*awb_gain_config)(struct rkisp_isp_params_vdev *params_vdev,
+				const struct cifisp_awb_gain_config *arg);
+	void (*aec_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_aec_config *arg);
+	void (*cproc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct cifisp_cproc_config *arg);
+	void (*hst_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_hst_config *arg);
+	void (*hst_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_hst_config *arg, bool en);
+	void (*afm_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_afc_config *arg);
+	void (*ie_config)(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct cifisp_ie_config *arg);
+	void (*ie_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			  bool en);
+	void (*csm_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool full_range);
+	void (*dpf_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_dpf_config *arg);
+	void (*dpf_strength_config)(struct rkisp_isp_params_vdev *params_vdev,
+				const struct cifisp_dpf_strength_config *arg);
+	void (*wdr_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct cifisp_wdr_config *arg);
+	void (*wdr_enable)(struct rkisp_isp_params_vdev *params_vdev, bool en);
+	void (*demosaiclp_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct cifisp_demosaiclp_config *arg);
+	void (*demosaiclp_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				  bool en);
+	void (*rkiesharp_config)(struct rkisp_isp_params_vdev *params_vdev,
+				 const struct cifisp_rkiesharp_config *arg);
+	void (*rkiesharp_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				 bool en);
+};
+
+struct rkisp_isp_params_v1x_config {
+	const int gamma_out_max_samples;
+	const int hst_weight_grids_size;
+};
+
+void rkisp_init_params_vdev_v1x(struct rkisp_isp_params_vdev *params_vdev);
+
+#endif /* _RKISP_ISP_PARAM_V1X_H */
diff --git a/drivers/media/platform/rockchip/isp/isp_params_v2x.c b/drivers/media/platform/rockchip/isp/isp_params_v2x.c
new file mode 100644
index 000000000000..fc6f3e32bc08
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_params_v2x.c
@@ -0,0 +1,2514 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#include <media/v4l2-common.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-vmalloc.h>	/* for ISP params */
+#include <linux/rk-preisp.h>
+#include "dev.h"
+#include "regs.h"
+#include "regs_v2x.h"
+#include "isp_params_v2x.h"
+
+#define ISP2X_PACK_4BYTE(a, b, c, d)	\
+	(((a) & 0xFF) << 0 | ((b) & 0xFF) << 8 | \
+	 ((c) & 0xFF) << 16 | ((d) & 0xFF) << 24)
+
+#define ISP2X_PACK_2SHORT(a, b)	\
+	(((a) & 0xFFFF) << 0 | ((b) & 0xFFFF) << 16)
+
+#define ISP2X_REG_WR_MASK BIT(31) //disable write protect
+
+static inline void
+rkisp_iowrite32(struct rkisp_isp_params_vdev *params_vdev,
+		u32 value, u32 addr)
+{
+	iowrite32(value, params_vdev->dev->base_addr + addr);
+}
+
+static inline u32
+rkisp_ioread32(struct rkisp_isp_params_vdev *params_vdev,
+	       u32 addr)
+{
+	return ioread32(params_vdev->dev->base_addr + addr);
+}
+
+static inline void
+isp_param_set_bits(struct rkisp_isp_params_vdev *params_vdev,
+		   u32 reg, u32 bit_mask)
+{
+	u32 val;
+
+	val = rkisp_ioread32(params_vdev, reg);
+	rkisp_iowrite32(params_vdev, val | bit_mask, reg);
+}
+
+static inline void
+isp_param_clear_bits(struct rkisp_isp_params_vdev *params_vdev,
+		     u32 reg, u32 bit_mask)
+{
+	u32 val;
+
+	val = rkisp_ioread32(params_vdev, reg);
+	rkisp_iowrite32(params_vdev, val & ~bit_mask, reg);
+}
+
+static void
+isp_dpcc_config(struct rkisp_isp_params_vdev *params_vdev,
+		const struct isp2x_dpcc_cfg *arg)
+{
+}
+
+static void
+isp_dpcc_enable(struct rkisp_isp_params_vdev *params_vdev,
+		bool en)
+{
+}
+
+static void
+isp_bls_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_bls_cfg *arg)
+{
+}
+
+static void
+isp_bls_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_sdg_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_sdg_cfg *arg)
+{
+}
+
+static void
+isp_sdg_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_sihst_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_sihst_cfg *arg)
+{
+	u32 i, j;
+	u32 value;
+	u32 hist_ctrl;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx, hist_weight_num;
+	u8 weight15x15[ISP2X_SIHST_WEIGHT_REG_SIZE];
+	const u32 hist_wnd_num[] = {
+		5, 9, 15, 15
+	};
+
+	wnd_num_idx = arg->wnd_num;
+	for (i = 0; i < ISP2X_HIST_WIN_NUM; i++) {
+		/* avoid to override the old enable value */
+		hist_ctrl = rkisp_ioread32(params_vdev, ISP_HIST_HIST_CTRL + i * 0x10);
+		hist_ctrl &= ISP2X_SIHST_CTRL_INTRSEL_MASK |
+				ISP2X_SIHST_CTRL_WNDNUM_MASK |
+			    ISP2X_SIHST_CTRL_EN_MASK;
+		hist_ctrl = hist_ctrl |
+			    ISP2X_SIHST_CTRL_DATASEL_SET(arg->win_cfg[i].data_sel) |
+			    ISP2X_SIHST_CTRL_WATERLINE_SET(arg->win_cfg[i].waterline) |
+			    ISP2X_SIHST_CTRL_AUTOSTOP_SET(arg->win_cfg[i].auto_stop) |
+			    ISP2X_SIHST_CTRL_MODE_SET(arg->win_cfg[i].mode) |
+			    ISP2X_SIHST_CTRL_STEPSIZE_SET(arg->win_cfg[i].stepsize);
+		rkisp_iowrite32(params_vdev, hist_ctrl, ISP_HIST_HIST_CTRL + i * 0x10);
+
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_SIHST_OFFS_SET(arg->win_cfg[i].win.h_offs,
+						      arg->win_cfg[i].win.v_offs),
+				 ISP_HIST_HIST_OFFS + i * 0x10);
+
+		block_hsize = arg->win_cfg[i].win.h_size / hist_wnd_num[wnd_num_idx] - 1;
+		block_vsize = arg->win_cfg[i].win.v_size / hist_wnd_num[wnd_num_idx] - 1;
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_SIHST_SIZE_SET(block_hsize, block_vsize),
+				 ISP_HIST_HIST_SIZE + i * 0x10);
+	}
+
+	memset(weight15x15, 0x00, sizeof(weight15x15));
+	for (i = 0; i < hist_wnd_num[wnd_num_idx]; i++) {
+		for (j = 0; j < hist_wnd_num[wnd_num_idx]; j++) {
+			weight15x15[i * ISP2X_SIHST_ROW_NUM + j] =
+				arg->hist_weight[i * hist_wnd_num[wnd_num_idx] + j];
+		}
+	}
+
+	hist_weight_num = ISP2X_SIHST_WEIGHT_REG_SIZE;
+	for (i = 0; i < (hist_weight_num / 4); i++) {
+		value = ISP2X_SIHST_WEIGHT_SET(
+				 weight15x15[4 * i + 0],
+				 weight15x15[4 * i + 1],
+				 weight15x15[4 * i + 2],
+				 weight15x15[4 * i + 3]);
+		rkisp_iowrite32(params_vdev, value,
+				 ISP_HIST_HIST_WEIGHT_0 + 4 * i);
+	}
+	value = ISP2X_SIHST_WEIGHT_SET(
+				 weight15x15[4 * i + 0], 0, 0, 0);
+	rkisp_iowrite32(params_vdev, value,
+				 ISP_HIST_HIST_WEIGHT_0 + 4 * i);
+
+	hist_ctrl = rkisp_ioread32(params_vdev, ISP_HIST_HIST_CTRL);
+	hist_ctrl &= ~ISP2X_SIHST_CTRL_WNDNUM_MASK;
+	hist_ctrl |= ISP2X_SIHST_CTRL_WNDNUM_SET(arg->wnd_num);
+	rkisp_iowrite32(params_vdev, hist_ctrl, ISP_HIST_HIST_CTRL);
+}
+
+static void
+isp_sihst_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+	u32 hist_ctrl;
+
+	hist_ctrl = rkisp_ioread32(params_vdev, ISP_HIST_HIST_CTRL);
+	hist_ctrl &= ~ISP2X_SIHST_CTRL_EN_MASK;
+	if (en)
+		hist_ctrl |= ISP2X_SIHST_CTRL_EN_SET(0x1);
+
+	rkisp_iowrite32(params_vdev, hist_ctrl, ISP_HIST_HIST_CTRL);
+}
+
+static void
+isp_lsc_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_lsc_cfg *arg)
+{
+}
+
+static void
+isp_lsc_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_awbgain_config(struct rkisp_isp_params_vdev *params_vdev,
+		   const struct isp2x_awb_gain_cfg *arg)
+{
+	rkisp_iowrite32(params_vdev,
+			 CIF_ISP_AWB_GAIN_R_SET(arg->gain_green_r) |
+			 arg->gain_green_b, CIF_ISP_AWB_GAIN_G_V12);
+
+	rkisp_iowrite32(params_vdev, CIF_ISP_AWB_GAIN_R_SET(arg->gain_red) |
+			 arg->gain_blue, CIF_ISP_AWB_GAIN_RB_V12);
+}
+
+static void
+isp_awbgain_enable(struct rkisp_isp_params_vdev *params_vdev,
+		   bool en)
+{
+	if (!en) {
+		rkisp_iowrite32(params_vdev,
+			CIF_ISP_AWB_GAIN_R_SET(0x0100) | 0x100, CIF_ISP_AWB_GAIN_G_V12);
+
+		rkisp_iowrite32(params_vdev,
+			CIF_ISP_AWB_GAIN_R_SET(0x0100) | 0x100, CIF_ISP_AWB_GAIN_RB_V12);
+	}
+}
+
+static void
+isp_bdm_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_bdm_config *arg)
+{
+}
+
+static void
+isp_bdm_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_ctk_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_ctk_cfg *arg)
+{
+}
+
+static void
+isp_ctk_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_goc_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_gammaout_cfg *arg)
+{
+}
+
+static void
+isp_goc_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_cproc_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_cproc_cfg *arg)
+{
+}
+
+static void
+isp_cproc_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+}
+
+static void
+isp_siaf_config(struct rkisp_isp_params_vdev *params_vdev,
+		const struct isp2x_siaf_cfg *arg)
+{
+	unsigned int i;
+	size_t num_of_win;
+	u32 afm_ctrl;
+
+	num_of_win = min_t(size_t, ARRAY_SIZE(arg->afm_win),
+				  arg->num_afm_win);
+	afm_ctrl = rkisp_ioread32(params_vdev, ISP_AFM_CTRL);
+
+	/* Switch off to configure. */
+	isp_param_clear_bits(params_vdev, ISP_AFM_CTRL, ISP2X_SIAF_ENA);
+	for (i = 0; i < num_of_win; i++) {
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_SIAF_WIN_X(arg->afm_win[i].win.h_offs) |
+				 ISP2X_SIAF_WIN_Y(arg->afm_win[i].win.v_offs),
+				 ISP_AFM_LT_A + i * 8);
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_SIAF_WIN_X(arg->afm_win[i].win.h_size +
+						      arg->afm_win[i].win.h_offs) |
+				 ISP2X_SIAF_WIN_Y(arg->afm_win[i].win.v_size +
+						      arg->afm_win[i].win.v_offs),
+				 ISP_AFM_RB_A + i * 8);
+	}
+	rkisp_iowrite32(params_vdev, arg->thres, ISP_AFM_THRES);
+
+	rkisp_iowrite32(params_vdev,
+		ISP2X_SIAF_SET_SHIFT_A(arg->afm_win[0].lum_shift, arg->afm_win[0].sum_shift) |
+		ISP2X_SIAF_SET_SHIFT_B(arg->afm_win[1].lum_shift, arg->afm_win[1].sum_shift) |
+		ISP2X_SIAF_SET_SHIFT_C(arg->afm_win[2].lum_shift, arg->afm_win[2].sum_shift),
+		ISP_AFM_VAR_SHIFT);
+
+	/* restore afm status */
+	rkisp_iowrite32(params_vdev, afm_ctrl, ISP_AFM_CTRL);
+}
+
+static void
+isp_siaf_enable(struct rkisp_isp_params_vdev *params_vdev,
+		bool en)
+{
+	u32 afm_ctrl = rkisp_ioread32(params_vdev, ISP_AFM_CTRL);
+
+	if (en)
+		afm_ctrl |= ISP2X_SIAF_ENA;
+	else
+		afm_ctrl &= ~ISP2X_SIAF_ENA;
+
+	rkisp_iowrite32(params_vdev, afm_ctrl, ISP_AFM_CTRL);
+}
+
+static void
+isp_siawb_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_siawb_meas_cfg *arg)
+{
+	u32 reg_val = 0;
+	/* based on the mode,configure the awb module */
+	if (arg->awb_mode == CIFISP_AWB_MODE_YCBCR) {
+		/* Reference Cb and Cr */
+		rkisp_iowrite32(params_vdev,
+				 CIF_ISP_AWB_REF_CR_SET(arg->awb_ref_cr) |
+				 arg->awb_ref_cb, CIF_ISP_AWB_REF_V10);
+		/* Yc Threshold */
+		rkisp_iowrite32(params_vdev,
+				 CIF_ISP_AWB_MAX_Y_SET(arg->max_y) |
+				 CIF_ISP_AWB_MIN_Y_SET(arg->min_y) |
+				 CIF_ISP_AWB_MAX_CS_SET(arg->max_csum) |
+				 arg->min_c, CIF_ISP_AWB_THRESH_V10);
+	}
+
+	reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
+	if (arg->enable_ymax_cmp)
+		reg_val |= CIF_ISP_AWB_YMAX_CMP_EN;
+	else
+		reg_val &= ~CIF_ISP_AWB_YMAX_CMP_EN;
+	if (arg->awb_mode != CIFISP_AWB_MODE_YCBCR)
+		reg_val |= CIF_ISP_AWB_MODE_RGB;
+	else
+		reg_val &= ~CIF_ISP_AWB_MODE_RGB;
+	rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
+
+	/* window offset */
+	rkisp_iowrite32(params_vdev,
+			 arg->awb_wnd.v_offs, CIF_ISP_AWB_WND_V_OFFS_V10);
+	rkisp_iowrite32(params_vdev,
+			 arg->awb_wnd.h_offs, CIF_ISP_AWB_WND_H_OFFS_V10);
+	/* AWB window size */
+	rkisp_iowrite32(params_vdev,
+			 arg->awb_wnd.v_size, CIF_ISP_AWB_WND_V_SIZE_V10);
+	rkisp_iowrite32(params_vdev,
+			 arg->awb_wnd.h_size, CIF_ISP_AWB_WND_H_SIZE_V10);
+	/* Number of frames */
+	rkisp_iowrite32(params_vdev,
+			 arg->frames, CIF_ISP_AWB_FRAMES_V10);
+}
+
+static void
+isp_siawb_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+	u32 reg_val = rkisp_ioread32(params_vdev, CIF_ISP_AWB_PROP_V10);
+
+	/* switch off */
+	reg_val &= CIF_ISP_AWB_MODE_MASK_NONE;
+
+	if (en) {
+		reg_val |= CIF_ISP_AWB_ENABLE;
+
+		rkisp_iowrite32(params_vdev, reg_val, CIF_ISP_AWB_PROP_V10);
+
+		/* Measurements require AWB block be active. */
+		/* TODO: need to enable here ? awb_gain_enable has done this */
+		isp_param_set_bits(params_vdev, CIF_ISP_CTRL,
+				   CIF_ISP_CTRL_ISP_AWB_ENA);
+	} else {
+		rkisp_iowrite32(params_vdev,
+				 reg_val, CIF_ISP_AWB_PROP_V10);
+		isp_param_clear_bits(params_vdev, CIF_ISP_CTRL,
+				     CIF_ISP_CTRL_ISP_AWB_ENA);
+	}
+}
+
+static void
+isp_ie_config(struct rkisp_isp_params_vdev *params_vdev,
+	      const struct isp2x_ie_cfg *arg)
+{
+}
+
+static void
+isp_ie_enable(struct rkisp_isp_params_vdev *params_vdev,
+	      bool en)
+{
+}
+
+static void
+isp_yuvae_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_yuvae_meas_cfg *arg)
+{
+	u32 i;
+	u32 exp_ctrl;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx = 0;
+	const u32 ae_wnd_num[] = {
+		1, 15
+	};
+
+	/* avoid to override the old enable value */
+	exp_ctrl = rkisp_ioread32(params_vdev, ISP_YUVAE_CTRL);
+	exp_ctrl &= ~(ISP2X_YUVAE_WNDNUM_SET |
+		      ISP2X_YUVAE_SUBWIN1_EN |
+		      ISP2X_YUVAE_SUBWIN2_EN |
+		      ISP2X_YUVAE_SUBWIN3_EN |
+		      ISP2X_YUVAE_SUBWIN4_EN |
+		      ISP2X_YUVAE_YSEL |
+		      ISP2X_REG_WR_MASK);
+	if (arg->ysel)
+		exp_ctrl |= ISP2X_YUVAE_YSEL;
+	if (arg->wnd_num) {
+		exp_ctrl |= ISP2X_YUVAE_WNDNUM_SET;
+		wnd_num_idx = 1;
+	}
+	if (arg->subwin_en[0])
+		exp_ctrl |= ISP2X_YUVAE_SUBWIN1_EN;
+	if (arg->subwin_en[1])
+		exp_ctrl |= ISP2X_YUVAE_SUBWIN2_EN;
+	if (arg->subwin_en[2])
+		exp_ctrl |= ISP2X_YUVAE_SUBWIN3_EN;
+	if (arg->subwin_en[3])
+		exp_ctrl |= ISP2X_YUVAE_SUBWIN4_EN;
+
+	rkisp_iowrite32(params_vdev, exp_ctrl, ISP_YUVAE_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_YUVAE_V_OFFSET_SET(arg->win.v_offs) |
+			 ISP2X_YUVAE_H_OFFSET_SET(arg->win.h_offs),
+			 ISP_YUVAE_OFFSET);
+
+	block_hsize = arg->win.h_size / ae_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->win.v_size / ae_wnd_num[wnd_num_idx] - 1;
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_YUVAE_V_SIZE_SET(block_vsize) |
+			 ISP2X_YUVAE_H_SIZE_SET(block_hsize),
+			 ISP_YUVAE_BLK_SIZE);
+
+	for (i = 0; i < ISP2X_YUVAE_SUBWIN_NUM; i++) {
+		rkisp_iowrite32(params_vdev,
+			 ISP2X_YUVAE_SUBWIN_V_OFFSET_SET(arg->subwin[i].v_offs) |
+			 ISP2X_YUVAE_SUBWIN_H_OFFSET_SET(arg->subwin[i].h_offs),
+			 ISP_YUVAE_WND1_OFFSET + 8 * i);
+
+		rkisp_iowrite32(params_vdev,
+			 ISP2X_YUVAE_SUBWIN_V_SIZE_SET(arg->subwin[i].v_size + arg->subwin[i].v_offs) |
+			 ISP2X_YUVAE_SUBWIN_H_SIZE_SET(arg->subwin[i].h_size + arg->subwin[i].h_offs),
+			 ISP_YUVAE_WND1_SIZE + 8 * i);
+	}
+}
+
+static void
+isp_yuvae_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+	u32 exp_ctrl;
+
+	exp_ctrl = rkisp_ioread32(params_vdev, ISP_YUVAE_CTRL);
+	exp_ctrl &= ~ISP2X_REG_WR_MASK;
+	if (en)
+		exp_ctrl |= ISP2X_YUVAE_ENA;
+	else
+		exp_ctrl &= ~ISP2X_YUVAE_ENA;
+
+	rkisp_iowrite32(params_vdev, exp_ctrl, ISP_YUVAE_CTRL);
+}
+
+static void
+isp_wdr_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_wdr_cfg *arg)
+{
+}
+
+static void
+isp_wdr_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_iesharp_config(struct rkisp_isp_params_vdev *params_vdev,
+		   const struct isp2x_rkiesharp_cfg *arg)
+{
+}
+
+static void
+isp_iesharp_enable(struct rkisp_isp_params_vdev *params_vdev,
+		   bool en)
+{
+}
+
+static void
+isp_rawaf_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_rawaf_meas_cfg *arg)
+{
+	u32 i, var;
+	u16 h_size, v_size;
+	u16 h_offs, v_offs;
+	size_t num_of_win = min_t(size_t, ARRAY_SIZE(arg->win),
+				  arg->num_afm_win);
+	u32 value = rkisp_ioread32(params_vdev, ISP_RAWAF_CTRL);
+
+	for (i = 0; i < num_of_win; i++) {
+		h_size = arg->win[i].h_size;
+		v_size = arg->win[i].v_size;
+		h_offs = arg->win[i].h_offs < 2 ? 2 : arg->win[i].h_offs;
+		v_offs = arg->win[i].v_offs < 1 ? 1 : arg->win[i].v_offs;
+
+		if (i == 0) {
+			h_size = h_size / 15 * 15;
+			v_size = v_size / 15 * 15;
+		}
+
+		// (horizontal left row), value must be greater or equal 2
+		// (vertical top line), value must be greater or equal 1
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_PACK_2SHORT(v_offs, h_offs),
+				 ISP_RAWAF_LT_A + i * 8);
+
+		// value must be smaller than [width of picture -2]
+		// value must be lower than (number of lines -2)
+		rkisp_iowrite32(params_vdev,
+				 ISP2X_PACK_2SHORT(v_size, h_size),
+				 ISP_RAWAF_RB_A + i * 8);
+	}
+
+	var = 0;
+	for (i = 0; i < ISP2X_RAWAF_LINE_NUM; i++) {
+		if (arg->line_en[i])
+			var |= ISP2X_RAWAF_INT_LINE0_EN << i;
+		var |= ISP2X_RAWAF_INT_LINE0_NUM(arg->line_num[i]) << 4 * i;
+	}
+	rkisp_iowrite32(params_vdev, var, ISP_RAWAF_INT_LINE);
+
+	rkisp_iowrite32(params_vdev,
+		ISP2X_PACK_4BYTE(arg->gaus_coe_h0, arg->gaus_coe_h1, arg->gaus_coe_h2, 0),
+		ISP_RAWAF_GAUS_COE);
+
+	var = rkisp_ioread32(params_vdev, ISP_RAWAF_THRES);
+	var &= ~(ISP2X_RAWAF_THRES(0xFFFF));
+	var |= arg->afm_thres;
+	rkisp_iowrite32(params_vdev, var, ISP_RAWAF_THRES);
+
+	rkisp_iowrite32(params_vdev,
+		ISP2X_RAWAF_SET_SHIFT_A(arg->lum_var_shift[0], arg->afm_var_shift[0]) |
+		ISP2X_RAWAF_SET_SHIFT_B(arg->lum_var_shift[1], arg->afm_var_shift[1]),
+		ISP_RAWAF_VAR_SHIFT);
+
+	for (i = 0; i < ISP2X_RAWAF_GAMMA_NUM / 2; i++)
+		rkisp_iowrite32(params_vdev,
+			ISP2X_PACK_2SHORT(arg->gamma_y[2 * i], arg->gamma_y[2 * i + 1]),
+			ISP_RAWAF_GAMMA_Y0 + i * 4);
+
+	rkisp_iowrite32(params_vdev,
+		ISP2X_PACK_2SHORT(arg->gamma_y[16], 0),
+		ISP_RAWAF_GAMMA_Y8);
+
+	value &= ~ISP2X_RAWAF_ENA;
+	if (arg->gamma_en)
+		value |= ISP2X_RAWAF_GAMMA_ENA;
+	else
+		value &= ~ISP2X_RAWAF_GAMMA_ENA;
+	if (arg->gaus_en)
+		value |= ISP2X_RAWAF_GAUS_ENA;
+	else
+		value &= ~ISP2X_RAWAF_GAUS_ENA;
+	value &= ~ISP2X_REG_WR_MASK;
+	rkisp_iowrite32(params_vdev, value, ISP_RAWAF_CTRL);
+
+	value = rkisp_ioread32(params_vdev, CTRL_VI_ISP_PATH);
+	value &= ~(ISP2X_ISPPATH_RAWAF_SEL_SET(3));
+	value |= ISP2X_ISPPATH_RAWAF_SEL_SET(arg->rawaf_sel);
+	rkisp_iowrite32(params_vdev, value, CTRL_VI_ISP_PATH);
+}
+
+static void
+isp_rawaf_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+	u32 afm_ctrl = rkisp_ioread32(params_vdev, ISP_RAWAF_CTRL);
+
+	afm_ctrl &= ~ISP2X_REG_WR_MASK;
+	if (en)
+		afm_ctrl |= ISP2X_RAWAF_ENA;
+	else
+		afm_ctrl &= ~ISP2X_RAWAF_ENA;
+
+	rkisp_iowrite32(params_vdev, afm_ctrl, ISP_RAWAF_CTRL);
+}
+
+static void
+isp_rawaelite_config(struct rkisp_isp_params_vdev *params_vdev,
+		     const struct isp2x_rawaelite_meas_cfg *arg)
+{
+	u32 value;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx = 0;
+	const u32 ae_wnd_num[] = {
+		1, 5
+	};
+
+	value = rkisp_ioread32(params_vdev, ISP_RAWAE_LITE_CTRL);
+	value &= ~(ISP2X_RAWAE_LITE_WNDNUM_SET(0x1));
+	if (arg->wnd_num) {
+		value |= ISP2X_RAWAE_LITE_WNDNUM_SET(0x1);
+		wnd_num_idx = 1;
+	}
+	value &= ~ISP2X_REG_WR_MASK;
+	rkisp_iowrite32(params_vdev, value, ISP_RAWAE_LITE_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			ISP2X_RAWAE_LITE_V_OFFSET_SET(arg->win.v_offs) |
+			ISP2X_RAWAE_LITE_H_OFFSET_SET(arg->win.h_offs),
+			ISP_RAWAE_LITE_OFFSET);
+
+	block_hsize = arg->win.h_size / ae_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->win.v_size / ae_wnd_num[wnd_num_idx] - 1;
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWAE_LITE_V_SIZE_SET(block_vsize) |
+			 ISP2X_RAWAE_LITE_H_SIZE_SET(block_hsize),
+			 ISP_RAWAE_LITE_BLK_SIZ);
+}
+
+static void
+isp_rawaelite_enable(struct rkisp_isp_params_vdev *params_vdev,
+		     bool en)
+{
+	u32 exp_ctrl;
+
+	exp_ctrl = rkisp_ioread32(params_vdev, ISP_RAWAE_LITE_CTRL);
+	exp_ctrl &= ~ISP2X_REG_WR_MASK;
+	if (en)
+		exp_ctrl |= ISP2X_RAWAE_LITE_ENA;
+	else
+		exp_ctrl &= ~ISP2X_RAWAE_LITE_ENA;
+
+	rkisp_iowrite32(params_vdev, exp_ctrl, ISP_RAWAE_LITE_CTRL);
+}
+
+static void
+isp_rawaebig_config(struct rkisp_isp_params_vdev *params_vdev,
+		    const struct isp2x_rawaebig_meas_cfg *arg, u32 blk_no)
+{
+	u32 i;
+	u32 value;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx = 0;
+	const u32 ae_wnd_num[] = {
+		1, 5, 15, 15
+	};
+	u32 addr;
+
+	switch (blk_no) {
+	case 0:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	case 1:
+		addr = RAWAE_BIG2_BASE;
+		break;
+	case 2:
+		addr = RAWAE_BIG3_BASE;
+		break;
+	default:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	}
+
+	/* avoid to override the old enable value */
+	value = rkisp_ioread32(params_vdev, addr + RAWAE_BIG_CTRL);
+	value &= ~(ISP2X_RAWAEBIG_WNDNUM_SET(0x3) |
+		   ISP2X_RAWAEBIG_SUBWIN1_EN |
+		   ISP2X_RAWAEBIG_SUBWIN2_EN |
+		   ISP2X_RAWAEBIG_SUBWIN3_EN |
+		   ISP2X_RAWAEBIG_SUBWIN4_EN |
+		   ISP2X_REG_WR_MASK);
+
+	wnd_num_idx = arg->wnd_num;
+	value |= ISP2X_RAWAEBIG_WNDNUM_SET(wnd_num_idx);
+
+	if (arg->subwin_en[0])
+		value |= ISP2X_RAWAEBIG_SUBWIN1_EN;
+	if (arg->subwin_en[1])
+		value |= ISP2X_RAWAEBIG_SUBWIN2_EN;
+	if (arg->subwin_en[2])
+		value |= ISP2X_RAWAEBIG_SUBWIN3_EN;
+	if (arg->subwin_en[3])
+		value |= ISP2X_RAWAEBIG_SUBWIN4_EN;
+
+	rkisp_iowrite32(params_vdev, value, addr + RAWAE_BIG_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWAEBIG_V_OFFSET_SET(arg->win.v_offs) |
+			 ISP2X_RAWAEBIG_H_OFFSET_SET(arg->win.h_offs),
+			 addr + RAWAE_BIG_OFFSET);
+
+	block_hsize = arg->win.h_size / ae_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->win.v_size / ae_wnd_num[wnd_num_idx] - 1;
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWAEBIG_V_SIZE_SET(block_vsize) |
+			 ISP2X_RAWAEBIG_H_SIZE_SET(block_hsize),
+			 addr + RAWAE_BIG_BLK_SIZE);
+
+	for (i = 0; i < ISP2X_RAWAEBIG_SUBWIN_NUM; i++) {
+		rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWAEBIG_SUBWIN_V_OFFSET_SET(arg->subwin[i].v_offs) |
+			 ISP2X_RAWAEBIG_SUBWIN_H_OFFSET_SET(arg->subwin[i].h_offs),
+			 addr + RAWAE_BIG_WND1_OFFSET + 8 * i);
+
+		rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWAEBIG_SUBWIN_V_SIZE_SET(arg->subwin[i].v_size + arg->subwin[i].v_offs) |
+			 ISP2X_RAWAEBIG_SUBWIN_H_SIZE_SET(arg->subwin[i].h_size + arg->subwin[i].h_offs),
+			 addr + RAWAE_BIG_WND1_SIZE + 8 * i);
+	}
+
+	if (blk_no == 0) {
+		value = rkisp_ioread32(params_vdev, CTRL_VI_ISP_PATH);
+		value &= ~(ISP2X_ISPPATH_RAWAE_SEL_SET(3));
+		value |= ISP2X_ISPPATH_RAWAE_SEL_SET(arg->rawae_sel);
+		rkisp_iowrite32(params_vdev, value, CTRL_VI_ISP_PATH);
+	}
+}
+
+static void
+isp_rawaebig_enable(struct rkisp_isp_params_vdev *params_vdev,
+		    bool en, u32 blk_no)
+{
+	u32 exp_ctrl;
+	u32 addr;
+
+	switch (blk_no) {
+	case 0:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	case 1:
+		addr = RAWAE_BIG2_BASE;
+		break;
+	case 2:
+		addr = RAWAE_BIG3_BASE;
+		break;
+	default:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	}
+
+	exp_ctrl = rkisp_ioread32(params_vdev, addr + RAWAE_BIG_CTRL);
+	exp_ctrl &= ~ISP2X_REG_WR_MASK;
+	if (en)
+		exp_ctrl |= ISP2X_RAWAEBIG_ENA;
+	else
+		exp_ctrl &= ~ISP2X_RAWAEBIG_ENA;
+
+	rkisp_iowrite32(params_vdev, exp_ctrl, addr + RAWAE_BIG_CTRL);
+}
+
+static void
+isp_rawaebig1_config(struct rkisp_isp_params_vdev *params_vdev,
+		     const struct isp2x_rawaebig_meas_cfg *arg)
+{
+	isp_rawaebig_config(params_vdev, arg, 0);
+}
+
+static void
+isp_rawaebig1_enable(struct rkisp_isp_params_vdev *params_vdev,
+		     bool en)
+{
+	isp_rawaebig_enable(params_vdev, en, 0);
+}
+
+static void
+isp_rawaebig2_config(struct rkisp_isp_params_vdev *params_vdev,
+		     const struct isp2x_rawaebig_meas_cfg *arg)
+{
+	isp_rawaebig_config(params_vdev, arg, 1);
+}
+
+static void
+isp_rawaebig2_enable(struct rkisp_isp_params_vdev *params_vdev,
+		     bool en)
+{
+	isp_rawaebig_enable(params_vdev, en, 1);
+}
+
+static void
+isp_rawaebig3_config(struct rkisp_isp_params_vdev *params_vdev,
+		     const struct isp2x_rawaebig_meas_cfg *arg)
+{
+	isp_rawaebig_config(params_vdev, arg, 2);
+}
+
+static void
+isp_rawaebig3_enable(struct rkisp_isp_params_vdev *params_vdev,
+		     bool en)
+{
+	isp_rawaebig_enable(params_vdev, en, 2);
+}
+
+static void
+isp_rawawb_config(struct rkisp_isp_params_vdev *params_vdev,
+		  const struct isp2x_rawawb_meas_cfg *arg)
+{
+	u32 value;
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_h_offs, arg->sw_rawawb_v_offs),
+			 ISP_RAWAWB_WIN_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_h_size, arg->sw_rawawb_v_size),
+			 ISP_RAWAWB_WIN_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_r_max, arg->sw_rawawb_g_max),
+			 ISP_RAWAWB_LIMIT_RG_MAX);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_b_max, arg->sw_rawawb_y_max),
+			 ISP_RAWAWB_LIMIT_BY_MAX);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_r_min, arg->sw_rawawb_g_min),
+			 ISP_RAWAWB_LIMIT_RG_MIN);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_b_min, arg->sw_rawawb_y_min),
+			 ISP_RAWAWB_LIMIT_BY_MIN);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_y_r, arg->sw_rawawb_coeff_y_g),
+			 ISP_RAWAWB_RGB2Y_0);
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_y_b, 0),
+			 ISP_RAWAWB_RGB2Y_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_u_r, arg->sw_rawawb_coeff_u_g),
+			 ISP_RAWAWB_RGB2U_0);
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_u_b, 0),
+			 ISP_RAWAWB_RGB2U_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_v_r, arg->sw_rawawb_coeff_v_g),
+			 ISP_RAWAWB_RGB2V_0);
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_coeff_v_b, 0),
+			 ISP_RAWAWB_RGB2V_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_0, arg->sw_rawawb_vertex0_v_0),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_0, arg->sw_rawawb_vertex1_v_0),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_0, arg->sw_rawawb_vertex2_v_0),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_0, arg->sw_rawawb_vertex3_v_0),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_0,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_0,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_0,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_0,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_1, arg->sw_rawawb_vertex0_v_1),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_1, arg->sw_rawawb_vertex1_v_1),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_1, arg->sw_rawawb_vertex2_v_1),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_1, arg->sw_rawawb_vertex3_v_1),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_1,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_1,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_1,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_1,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_2, arg->sw_rawawb_vertex0_v_2),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_2, arg->sw_rawawb_vertex1_v_2),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_2, arg->sw_rawawb_vertex2_v_2),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_2, arg->sw_rawawb_vertex3_v_2),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_2,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_2,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_2,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_2,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_3, arg->sw_rawawb_vertex0_v_3),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_3, arg->sw_rawawb_vertex1_v_3),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_3, arg->sw_rawawb_vertex2_v_3),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_3, arg->sw_rawawb_vertex3_v_3),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_3,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_3,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_3,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_3,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_4, arg->sw_rawawb_vertex0_v_4),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_4, arg->sw_rawawb_vertex1_v_4),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_4, arg->sw_rawawb_vertex2_v_4),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_4, arg->sw_rawawb_vertex3_v_4),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_4);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_4,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_4);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_4,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_4);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_4,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_4);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_4,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_5, arg->sw_rawawb_vertex0_v_5),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_5, arg->sw_rawawb_vertex1_v_5),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_5, arg->sw_rawawb_vertex2_v_5),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_5, arg->sw_rawawb_vertex3_v_5),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_5);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_5,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_5);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_5,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_5);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_5,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_5);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_5,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex0_u_6, arg->sw_rawawb_vertex0_v_6),
+			 ISP_RAWAWB_UV_DETC_VERTEX0_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex1_u_6, arg->sw_rawawb_vertex1_v_6),
+			 ISP_RAWAWB_UV_DETC_VERTEX1_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex2_u_6, arg->sw_rawawb_vertex2_v_6),
+			 ISP_RAWAWB_UV_DETC_VERTEX2_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_vertex3_u_6, arg->sw_rawawb_vertex3_v_6),
+			 ISP_RAWAWB_UV_DETC_VERTEX3_6);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope01_6,
+			 ISP_RAWAWB_UV_DETC_ISLOPE01_6);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope12_6,
+			 ISP_RAWAWB_UV_DETC_ISLOPE12_6);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope23_6,
+			 ISP_RAWAWB_UV_DETC_ISLOPE23_6);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_islope30_6,
+			 ISP_RAWAWB_UV_DETC_ISLOPE30_6);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_uv_0,
+			 ISP_RAWAWB_YUV_DETC_B_UV_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_vtcuv_0,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_VTCUV_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_inv_dslope_0,
+			 ISP_RAWAWB_YUV_DETC_INV_DSLOPE_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_ydis_0,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_YDIS_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_ydis_0,
+			 ISP_RAWAWB_YUV_DETC_B_YDIS_0);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_uv_1,
+			 ISP_RAWAWB_YUV_DETC_B_UV_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_vtcuv_1,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_VTCUV_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_inv_dslope_1,
+			 ISP_RAWAWB_YUV_DETC_INV_DSLOPE_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_ydis_1,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_YDIS_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_ydis_1,
+			 ISP_RAWAWB_YUV_DETC_B_YDIS_1);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_uv_2,
+			 ISP_RAWAWB_YUV_DETC_B_UV_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_vtcuv_2,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_VTCUV_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_inv_dslope_2,
+			 ISP_RAWAWB_YUV_DETC_INV_DSLOPE_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_ydis_2,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_YDIS_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_ydis_2,
+			 ISP_RAWAWB_YUV_DETC_B_YDIS_2);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_uv_3,
+			 ISP_RAWAWB_YUV_DETC_B_UV_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_vtcuv_3,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_VTCUV_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_inv_dslope_3,
+			 ISP_RAWAWB_YUV_DETC_INV_DSLOPE_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_slope_ydis_3,
+			 ISP_RAWAWB_YUV_DETC_SLOPE_YDIS_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_b_ydis_3,
+			 ISP_RAWAWB_YUV_DETC_B_YDIS_3);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_ref_u,
+			 ISP_RAWAWB_YUV_DETC_REF_U);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_ref_v_0, arg->sw_rawawb_ref_v_1,
+					  arg->sw_rawawb_ref_v_2, arg->sw_rawawb_ref_v_3),
+			 ISP_RAWAWB_YUV_DETC_REF_V);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis0_0, arg->sw_rawawb_dis1_0),
+			 ISP_RAWAWB_YUV_DETC_DIS01_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis2_0, arg->sw_rawawb_dis3_0),
+			 ISP_RAWAWB_YUV_DETC_DIS23_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis4_0, arg->sw_rawawb_dis5_0),
+			 ISP_RAWAWB_YUV_DETC_DIS45_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th0_0, arg->sw_rawawb_th1_0,
+					  arg->sw_rawawb_th2_0, arg->sw_rawawb_th3_0),
+			 ISP_RAWAWB_YUV_DETC_TH03_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th4_0, arg->sw_rawawb_th5_0,
+					  0, 0),
+			 ISP_RAWAWB_YUV_DETC_TH45_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis0_1, arg->sw_rawawb_dis1_1),
+			 ISP_RAWAWB_YUV_DETC_DIS01_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis2_1, arg->sw_rawawb_dis3_1),
+			 ISP_RAWAWB_YUV_DETC_DIS23_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis4_1, arg->sw_rawawb_dis5_1),
+			 ISP_RAWAWB_YUV_DETC_DIS45_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th0_1, arg->sw_rawawb_th1_1,
+					  arg->sw_rawawb_th2_1, arg->sw_rawawb_th3_1),
+			 ISP_RAWAWB_YUV_DETC_TH03_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th4_1, arg->sw_rawawb_th5_1,
+					  0, 0),
+			 ISP_RAWAWB_YUV_DETC_TH45_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis0_2, arg->sw_rawawb_dis1_2),
+			 ISP_RAWAWB_YUV_DETC_DIS01_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis2_2, arg->sw_rawawb_dis3_2),
+			 ISP_RAWAWB_YUV_DETC_DIS23_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis4_2, arg->sw_rawawb_dis5_2),
+			 ISP_RAWAWB_YUV_DETC_DIS45_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th0_2, arg->sw_rawawb_th1_2,
+					  arg->sw_rawawb_th2_2, arg->sw_rawawb_th3_2),
+			 ISP_RAWAWB_YUV_DETC_TH03_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th4_2, arg->sw_rawawb_th5_2,
+					  0, 0),
+			 ISP_RAWAWB_YUV_DETC_TH45_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis0_3, arg->sw_rawawb_dis1_3),
+			 ISP_RAWAWB_YUV_DETC_DIS01_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis2_3, arg->sw_rawawb_dis3_3),
+			 ISP_RAWAWB_YUV_DETC_DIS23_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_dis4_3, arg->sw_rawawb_dis5_3),
+			 ISP_RAWAWB_YUV_DETC_DIS45_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th0_3, arg->sw_rawawb_th1_3,
+					  arg->sw_rawawb_th2_3, arg->sw_rawawb_th3_3),
+			 ISP_RAWAWB_YUV_DETC_TH03_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->sw_rawawb_th4_3, arg->sw_rawawb_th5_3,
+					  0, 0),
+			 ISP_RAWAWB_YUV_DETC_TH45_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_wt0, arg->sw_rawawb_wt1),
+			 ISP_RAWAWB_RGB2XY_WT01);
+
+	rkisp_iowrite32(params_vdev,
+			 arg->sw_rawawb_wt2,
+			 ISP_RAWAWB_RGB2XY_WT2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_mat0_x, arg->sw_rawawb_mat0_y),
+			 ISP_RAWAWB_RGB2XY_MAT0_XY);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_mat1_x, arg->sw_rawawb_mat1_y),
+			 ISP_RAWAWB_RGB2XY_MAT1_XY);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_mat2_x, arg->sw_rawawb_mat2_y),
+			 ISP_RAWAWB_RGB2XY_MAT2_XY);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_0, arg->sw_rawawb_nor_x1_0),
+			 ISP_RAWAWB_XY_DETC_NOR_X_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_0, arg->sw_rawawb_nor_y1_0),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_0, arg->sw_rawawb_big_x1_0),
+			 ISP_RAWAWB_XY_DETC_BIG_X_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_0, arg->sw_rawawb_big_y1_0),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_0, arg->sw_rawawb_sma_x1_0),
+			 ISP_RAWAWB_XY_DETC_SMA_X_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_0, arg->sw_rawawb_sma_y1_0),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_0);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_1, arg->sw_rawawb_nor_x1_1),
+			 ISP_RAWAWB_XY_DETC_NOR_X_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_1, arg->sw_rawawb_nor_y1_1),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_1, arg->sw_rawawb_big_x1_1),
+			 ISP_RAWAWB_XY_DETC_BIG_X_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_1, arg->sw_rawawb_big_y1_1),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_1, arg->sw_rawawb_sma_x1_1),
+			 ISP_RAWAWB_XY_DETC_SMA_X_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_1, arg->sw_rawawb_sma_y1_1),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_1);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_2, arg->sw_rawawb_nor_x1_2),
+			 ISP_RAWAWB_XY_DETC_NOR_X_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_2, arg->sw_rawawb_nor_y1_2),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_2, arg->sw_rawawb_big_x1_2),
+			 ISP_RAWAWB_XY_DETC_BIG_X_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_2, arg->sw_rawawb_big_y1_2),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_2, arg->sw_rawawb_sma_x1_2),
+			 ISP_RAWAWB_XY_DETC_SMA_X_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_2, arg->sw_rawawb_sma_y1_2),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_2);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_3, arg->sw_rawawb_nor_x1_3),
+			 ISP_RAWAWB_XY_DETC_NOR_X_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_3, arg->sw_rawawb_nor_y1_3),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_3, arg->sw_rawawb_big_x1_3),
+			 ISP_RAWAWB_XY_DETC_BIG_X_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_3, arg->sw_rawawb_big_y1_3),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_3, arg->sw_rawawb_sma_x1_3),
+			 ISP_RAWAWB_XY_DETC_SMA_X_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_3, arg->sw_rawawb_sma_y1_3),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_3);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_4, arg->sw_rawawb_nor_x1_4),
+			 ISP_RAWAWB_XY_DETC_NOR_X_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_4, arg->sw_rawawb_nor_y1_4),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_4, arg->sw_rawawb_big_x1_4),
+			 ISP_RAWAWB_XY_DETC_BIG_X_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_4, arg->sw_rawawb_big_y1_4),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_4, arg->sw_rawawb_sma_x1_4),
+			 ISP_RAWAWB_XY_DETC_SMA_X_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_4, arg->sw_rawawb_sma_y1_4),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_4);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_5, arg->sw_rawawb_nor_x1_5),
+			 ISP_RAWAWB_XY_DETC_NOR_X_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_5, arg->sw_rawawb_nor_y1_5),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_5, arg->sw_rawawb_big_x1_5),
+			 ISP_RAWAWB_XY_DETC_BIG_X_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_5, arg->sw_rawawb_big_y1_5),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_5, arg->sw_rawawb_sma_x1_5),
+			 ISP_RAWAWB_XY_DETC_SMA_X_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_5, arg->sw_rawawb_sma_y1_5),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_5);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_x0_6, arg->sw_rawawb_nor_x1_6),
+			 ISP_RAWAWB_XY_DETC_NOR_X_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_nor_y0_6, arg->sw_rawawb_nor_y1_6),
+			 ISP_RAWAWB_XY_DETC_NOR_Y_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_x0_6, arg->sw_rawawb_big_x1_6),
+			 ISP_RAWAWB_XY_DETC_BIG_X_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_big_y0_6, arg->sw_rawawb_big_y1_6),
+			 ISP_RAWAWB_XY_DETC_BIG_Y_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_x0_6, arg->sw_rawawb_sma_x1_6),
+			 ISP_RAWAWB_XY_DETC_SMA_X_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_sma_y0_6, arg->sw_rawawb_sma_y1_6),
+			 ISP_RAWAWB_XY_DETC_SMA_Y_6);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow0_h_offs, arg->sw_rawawb_multiwindow0_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW0_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow0_h_size, arg->sw_rawawb_multiwindow0_v_size),
+			 ISP_RAWAWB_MULTIWINDOW0_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow1_h_offs, arg->sw_rawawb_multiwindow1_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW1_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow1_h_size, arg->sw_rawawb_multiwindow1_v_size),
+			 ISP_RAWAWB_MULTIWINDOW1_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow2_h_offs, arg->sw_rawawb_multiwindow2_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW2_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow2_h_size, arg->sw_rawawb_multiwindow2_v_size),
+			 ISP_RAWAWB_MULTIWINDOW2_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow3_h_offs, arg->sw_rawawb_multiwindow3_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW3_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow3_h_size, arg->sw_rawawb_multiwindow3_v_size),
+			 ISP_RAWAWB_MULTIWINDOW3_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow4_h_offs, arg->sw_rawawb_multiwindow4_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW4_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow4_h_size, arg->sw_rawawb_multiwindow4_v_size),
+			 ISP_RAWAWB_MULTIWINDOW4_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow5_h_offs, arg->sw_rawawb_multiwindow5_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW5_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow5_h_size, arg->sw_rawawb_multiwindow5_v_size),
+			 ISP_RAWAWB_MULTIWINDOW5_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow6_h_offs, arg->sw_rawawb_multiwindow6_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW6_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow6_h_size, arg->sw_rawawb_multiwindow6_v_size),
+			 ISP_RAWAWB_MULTIWINDOW6_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow7_h_offs, arg->sw_rawawb_multiwindow7_v_offs),
+			 ISP_RAWAWB_MULTIWINDOW7_OFFS);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_multiwindow7_h_size, arg->sw_rawawb_multiwindow7_v_size),
+			 ISP_RAWAWB_MULTIWINDOW7_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region0_xu0, arg->sw_rawawb_exc_wp_region0_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION0_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region0_yv0, arg->sw_rawawb_exc_wp_region0_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION0_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region1_xu0, arg->sw_rawawb_exc_wp_region1_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION1_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region1_yv0, arg->sw_rawawb_exc_wp_region1_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION1_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region2_xu0, arg->sw_rawawb_exc_wp_region2_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION2_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region2_yv0, arg->sw_rawawb_exc_wp_region2_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION2_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region3_xu0, arg->sw_rawawb_exc_wp_region3_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION3_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region3_yv0, arg->sw_rawawb_exc_wp_region3_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION3_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region4_xu0, arg->sw_rawawb_exc_wp_region4_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION4_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region4_yv0, arg->sw_rawawb_exc_wp_region4_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION4_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region5_xu0, arg->sw_rawawb_exc_wp_region5_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION5_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region5_yv0, arg->sw_rawawb_exc_wp_region5_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION5_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region6_xu0, arg->sw_rawawb_exc_wp_region6_xu1),
+			 ISP_RAWAWB_EXC_WP_REGION6_XU);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_2SHORT(arg->sw_rawawb_exc_wp_region6_yv0, arg->sw_rawawb_exc_wp_region6_yv1),
+			 ISP_RAWAWB_EXC_WP_REGION6_YV);
+
+	rkisp_iowrite32(params_vdev,
+			 (arg->sw_rawawb_multiwindow_en & 0x1) << 31 |
+			 (arg->sw_rawawb_exc_wp_region6_domain & 0x1) << 26 |
+			 (arg->sw_rawawb_exc_wp_region6_measen & 0x1) << 25 |
+			 (arg->sw_rawawb_exc_wp_region6_excen & 0x1) << 24 |
+			 (arg->sw_rawawb_exc_wp_region5_domain & 0x1) << 22 |
+			 (arg->sw_rawawb_exc_wp_region5_measen & 0x1) << 21 |
+			 (arg->sw_rawawb_exc_wp_region5_excen & 0x1) << 20 |
+			 (arg->sw_rawawb_exc_wp_region4_domain & 0x1) << 18 |
+			 (arg->sw_rawawb_exc_wp_region4_measen & 0x1) << 17 |
+			 (arg->sw_rawawb_exc_wp_region4_excen & 0x1) << 16 |
+			 (arg->sw_rawawb_exc_wp_region3_domain & 0x1) << 14 |
+			 (arg->sw_rawawb_exc_wp_region3_measen & 0x1) << 13 |
+			 (arg->sw_rawawb_exc_wp_region3_excen & 0x1) << 12 |
+			 (arg->sw_rawawb_exc_wp_region2_domain & 0x1) << 10 |
+			 (arg->sw_rawawb_exc_wp_region2_measen & 0x1) << 9 |
+			 (arg->sw_rawawb_exc_wp_region2_excen & 0x1) << 8 |
+			 (arg->sw_rawawb_exc_wp_region1_domain & 0x1) << 6 |
+			 (arg->sw_rawawb_exc_wp_region1_measen & 0x1) << 5 |
+			 (arg->sw_rawawb_exc_wp_region1_excen & 0x1) << 4 |
+			 (arg->sw_rawawb_exc_wp_region0_domain & 0x1) << 2 |
+			 (arg->sw_rawawb_exc_wp_region0_measen & 0x1) << 1 |
+			 (arg->sw_rawawb_exc_wp_region0_excen & 0x1) << 0,
+			 ISP_RAWAWB_MULTIWINDOW_EXC_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			 (arg->sw_rawawb_store_wp_flag_ls_idx0 & 0x7) |
+			 (arg->sw_rawawb_store_wp_flag_ls_idx1 & 0x7) << 3 |
+			 (arg->sw_rawawb_store_wp_flag_ls_idx2 & 0x7) << 6 |
+			 (arg->sw_rawawb_blk_measure_mode & 0x3) << 12,
+			 ISP_RAWAWB_BLK_CTRL);
+
+	/* avoid to override the old enable value */
+	value = rkisp_ioread32(params_vdev, ISP_RAWAWB_CTRL);
+	value &= ISP2X_RAWAWB_ENA;
+	value &= ~ISP2X_REG_WR_MASK;
+	rkisp_iowrite32(params_vdev,
+			 value |
+			 (arg->sw_rawawb_uv_en & 0x1) << 1 |
+			 (arg->sw_rawawb_xy_en & 0x1) << 2 |
+			 (arg->sw_rawawb_3dyuv_ls_idx0 & 0x7) << 4 |
+			 (arg->sw_rawawb_3dyuv_ls_idx1 & 0x7) << 7 |
+			 (arg->sw_rawawb_3dyuv_ls_idx2 & 0x7) << 10 |
+			 (arg->sw_rawawb_3dyuv_ls_idx3 & 0x7) << 13 |
+			 (arg->sw_rawawb_y_range & 0x1) << 16 |
+			 (arg->sw_rawawb_c_range & 0x1) << 17 |
+			 (arg->sw_rawawb_wind_size & 0x1) << 18 |
+			 (arg->sw_rawawb_light_num & 0x7) << 20,
+			 ISP_RAWAWB_CTRL);
+
+	value = rkisp_ioread32(params_vdev, CTRL_VI_ISP_PATH);
+	value &= ~(ISP2X_ISPPATH_RAWAWB_SEL_SET(3));
+	value |= ISP2X_ISPPATH_RAWAWB_SEL_SET(arg->rawawb_sel);
+	rkisp_iowrite32(params_vdev, value, CTRL_VI_ISP_PATH);
+}
+
+static void
+isp_rawawb_enable(struct rkisp_isp_params_vdev *params_vdev,
+		  bool en)
+{
+	u32 awb_ctrl;
+
+	awb_ctrl = rkisp_ioread32(params_vdev, ISP_RAWAWB_CTRL);
+	awb_ctrl &= ~ISP2X_REG_WR_MASK;
+	if (en)
+		awb_ctrl |= ISP2X_RAWAWB_ENA;
+	else
+		awb_ctrl &= ~ISP2X_RAWAWB_ENA;
+
+	rkisp_iowrite32(params_vdev, awb_ctrl, ISP_RAWAWB_CTRL);
+}
+
+static void
+isp_rawhstlite_config(struct rkisp_isp_params_vdev *params_vdev,
+		      const struct isp2x_rawhistlite_cfg *arg)
+{
+	u32 i;
+	u32 value;
+	u32 hist_ctrl;
+	u32 block_hsize, block_vsize;
+
+	/* avoid to override the old enable value */
+	hist_ctrl = rkisp_ioread32(params_vdev,
+		ISP_RAWHIST_LITE_CTRL);
+	hist_ctrl &= ISP2X_RAWHSTLITE_CTRL_EN_MASK;
+	hist_ctrl &= ~ISP2X_REG_WR_MASK;
+	hist_ctrl = hist_ctrl |
+		    ISP2X_RAWHSTLITE_CTRL_MODE_SET(arg->mode) |
+		    ISP2X_RAWHSTLITE_CTRL_DATASEL_SET(arg->data_sel) |
+		    ISP2X_RAWHSTLITE_CTRL_WATERLINE_SET(arg->waterline) |
+		    ISP2X_RAWHSTLITE_CTRL_STEPSIZE_SET(arg->stepsize);
+	rkisp_iowrite32(params_vdev, hist_ctrl,
+		ISP_RAWHIST_LITE_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWHSTLITE_OFFS_SET(arg->win.h_offs & 0xFFFE,
+						   arg->win.v_offs & 0xFFFE),
+			 ISP_RAWHIST_LITE_OFFS);
+
+	block_hsize = arg->win.h_size / ISP2X_RAWHSTLITE_ROW_NUM - 1;
+	block_vsize = arg->win.v_size / ISP2X_RAWHSTLITE_COLUMN_NUM - 1;
+	block_hsize &= 0xFFFE;
+	block_vsize &= 0xFFFE;
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWHSTLITE_SIZE_SET(block_hsize, block_vsize),
+			 ISP_RAWHIST_LITE_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->rcc, arg->gcc, arg->bcc, arg->off),
+			 ISP_RAWHIST_LITE_RAW2Y_CC);
+
+	for (i = 0; i < (ISP2X_RAWHSTLITE_WEIGHT_REG_SIZE / 4); i++) {
+		value = ISP2X_RAWHSTLITE_WEIGHT_SET(
+				 arg->weight[4 * i + 0],
+				 arg->weight[4 * i + 1],
+				 arg->weight[4 * i + 2],
+				 arg->weight[4 * i + 3]);
+		rkisp_iowrite32(params_vdev, value,
+				 ISP_RAWHIST_LITE_WEIGHT + 4 * i);
+	}
+
+	value = ISP2X_RAWHSTLITE_WEIGHT_SET(
+				 arg->weight[4 * i + 0], 0, 0, 0);
+	rkisp_iowrite32(params_vdev, value,
+			 ISP_RAWHIST_LITE_WEIGHT + 4 * i);
+}
+
+static void
+isp_rawhstlite_enable(struct rkisp_isp_params_vdev *params_vdev,
+		      bool en)
+{
+	u32 hist_ctrl;
+
+	hist_ctrl = rkisp_ioread32(params_vdev,
+		ISP_RAWHIST_LITE_CTRL);
+	hist_ctrl &= ~(ISP2X_RAWHSTLITE_CTRL_EN_MASK | ISP2X_REG_WR_MASK);
+
+	if (en)
+		hist_ctrl |= ISP2X_RAWHSTLITE_CTRL_EN_SET(0x1);
+
+	rkisp_iowrite32(params_vdev, hist_ctrl,
+		ISP_RAWHIST_LITE_CTRL);
+}
+
+static void
+isp_rawhstbig_config(struct rkisp_isp_params_vdev *params_vdev,
+		     const struct isp2x_rawhistbig_cfg *arg, u32 blk_no)
+{
+	u32 i, j;
+	u32 value;
+	u32 hist_ctrl;
+	u32 block_hsize, block_vsize;
+	u32 wnd_num_idx, hist_weight_num;
+	u8 weight15x15[ISP2X_RAWHSTBIG_WEIGHT_REG_SIZE];
+	const u32 hist_wnd_num[] = {
+		5, 5, 15, 15
+	};
+	u32 addr;
+
+	switch (blk_no) {
+	case 0:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	case 1:
+		addr = ISP_RAWHIST_BIG2_BASE;
+		break;
+	case 2:
+		addr = ISP_RAWHIST_BIG3_BASE;
+		break;
+	default:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	}
+
+	wnd_num_idx = arg->wnd_num;
+	memset(weight15x15, 0x00, sizeof(weight15x15));
+	/* avoid to override the old enable value */
+	hist_ctrl = rkisp_ioread32(params_vdev, addr + ISP_RAWHIST_BIG_CTRL);
+	hist_ctrl &= ISP2X_RAWHSTBIG_CTRL_EN_MASK;
+	hist_ctrl &= ~ISP2X_REG_WR_MASK;
+	hist_ctrl = hist_ctrl |
+		    ISP2X_RAWHSTBIG_CTRL_MODE_SET(arg->mode) |
+		    ISP2X_RAWHSTBIG_CTRL_DATASEL_SET(arg->data_sel) |
+		    ISP2X_RAWHSTBIG_CTRL_WATERLINE_SET(arg->waterline) |
+		    ISP2X_RAWHSTBIG_CTRL_WNDNUM_SET(arg->wnd_num) |
+		    ISP2X_RAWHSTBIG_CTRL_STEPSIZE_SET(arg->stepsize);
+	rkisp_iowrite32(params_vdev, hist_ctrl, addr + ISP_RAWHIST_BIG_CTRL);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWHSTBIG_OFFS_SET(arg->win.h_offs & 0xFFFE,
+						  arg->win.v_offs & 0xFFFE),
+			 addr + ISP_RAWHIST_BIG_OFFS);
+
+	block_hsize = arg->win.h_size / hist_wnd_num[wnd_num_idx] - 1;
+	block_vsize = arg->win.v_size / hist_wnd_num[wnd_num_idx] - 1;
+	block_hsize &= 0xFFFE;
+	block_vsize &= 0xFFFE;
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_RAWHSTBIG_SIZE_SET(block_hsize, block_vsize),
+			 addr + ISP_RAWHIST_BIG_SIZE);
+
+	rkisp_iowrite32(params_vdev,
+			 ISP2X_PACK_4BYTE(arg->rcc, arg->gcc, arg->bcc, arg->off),
+			 addr + ISP_RAWHIST_BIG_RAW2Y_CC);
+
+	for (i = 0; i < hist_wnd_num[wnd_num_idx]; i++) {
+		for (j = 0; j < hist_wnd_num[wnd_num_idx]; j++) {
+			weight15x15[i * ISP2X_RAWHSTBIG_ROW_NUM + j] =
+				arg->weight[i * hist_wnd_num[wnd_num_idx] + j];
+		}
+	}
+
+	rkisp_iowrite32(params_vdev, ISP2X_RAWHSTBIG_WRAM_EN, ISP_RAWHIST_BIG_WRAM_CTRL);
+	hist_weight_num = ISP2X_RAWHSTBIG_WEIGHT_REG_SIZE;
+	for (i = 0; i < (hist_weight_num / 5); i++) {
+		value = ISP2X_RAWHSTBIG_WEIGHT_SET(
+				 weight15x15[5 * i + 0],
+				 weight15x15[5 * i + 1],
+				 weight15x15[5 * i + 2],
+				 weight15x15[5 * i + 3],
+				 weight15x15[5 * i + 4]);
+		rkisp_iowrite32(params_vdev, value,
+				 addr + ISP_RAWHIST_BIG_WEIGHT_BASE);
+	}
+}
+
+static void
+isp_rawhstbig_enable(struct rkisp_isp_params_vdev *params_vdev,
+		     bool en, u32 blk_no)
+{
+	u32 hist_ctrl;
+	u32 addr;
+
+	switch (blk_no) {
+	case 0:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	case 1:
+		addr = ISP_RAWHIST_BIG2_BASE;
+		break;
+	case 2:
+		addr = ISP_RAWHIST_BIG3_BASE;
+		break;
+	default:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	}
+
+	hist_ctrl = rkisp_ioread32(params_vdev, addr + ISP_RAWHIST_BIG_CTRL);
+	hist_ctrl &= ~(ISP2X_RAWHSTBIG_CTRL_EN_MASK | ISP2X_REG_WR_MASK);
+	if (en)
+		hist_ctrl |= ISP2X_RAWHSTBIG_CTRL_EN_SET(0x1);
+
+	rkisp_iowrite32(params_vdev, hist_ctrl, addr + ISP_RAWHIST_BIG_CTRL);
+}
+
+static void
+isp_rawhstbig1_config(struct rkisp_isp_params_vdev *params_vdev,
+		      const struct isp2x_rawhistbig_cfg *arg)
+{
+	isp_rawhstbig_config(params_vdev, arg, 0);
+}
+
+static void
+isp_rawhstbig1_enable(struct rkisp_isp_params_vdev *params_vdev,
+		      bool en)
+{
+	isp_rawhstbig_enable(params_vdev, en, 0);
+}
+
+static void
+isp_rawhstbig2_config(struct rkisp_isp_params_vdev *params_vdev,
+		      const struct isp2x_rawhistbig_cfg *arg)
+{
+	isp_rawhstbig_config(params_vdev, arg, 1);
+}
+
+static void
+isp_rawhstbig2_enable(struct rkisp_isp_params_vdev *params_vdev,
+		      bool en)
+{
+	isp_rawhstbig_enable(params_vdev, en, 1);
+}
+
+static void
+isp_rawhstbig3_config(struct rkisp_isp_params_vdev *params_vdev,
+		      const struct isp2x_rawhistbig_cfg *arg)
+{
+	isp_rawhstbig_config(params_vdev, arg, 2);
+}
+
+static void
+isp_rawhstbig3_enable(struct rkisp_isp_params_vdev *params_vdev,
+		      bool en)
+{
+	isp_rawhstbig_enable(params_vdev, en, 2);
+}
+
+static void
+isp_hdrmge_config(struct rkisp_isp_params_vdev *params_vdev,
+		  const struct isp2x_hdrmge_cfg *arg)
+{
+}
+
+static void
+isp_hdrmge_enable(struct rkisp_isp_params_vdev *params_vdev,
+		  bool en)
+{
+}
+
+static void
+isp_rawnr_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_rawnr_cfg *arg)
+{
+}
+
+static void
+isp_rawnr_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+}
+
+static void
+isp_hdrtmo_config(struct rkisp_isp_params_vdev *params_vdev,
+		  const struct isp2x_hdrtmo_cfg *arg)
+{
+}
+
+static void
+isp_hdrtmo_enable(struct rkisp_isp_params_vdev *params_vdev,
+		  bool en)
+{
+}
+
+static void
+isp_gic_config(struct rkisp_isp_params_vdev *params_vdev,
+	       const struct isp2x_gic_cfg *arg)
+{
+}
+
+static void
+isp_gic_enable(struct rkisp_isp_params_vdev *params_vdev,
+	       bool en)
+{
+}
+
+static void
+isp_dhaz_config(struct rkisp_isp_params_vdev *params_vdev,
+		const struct isp2x_dhaz_cfg *arg)
+{
+}
+
+static void
+isp_dhaz_enable(struct rkisp_isp_params_vdev *params_vdev,
+		bool en)
+{
+}
+
+static void
+isp_3dlut_config(struct rkisp_isp_params_vdev *params_vdev,
+		 const struct isp2x_3dlut_cfg *arg)
+{
+}
+
+static void
+isp_3dlut_enable(struct rkisp_isp_params_vdev *params_vdev,
+		 bool en)
+{
+}
+
+struct rkisp_isp_params_v2x_ops rkisp_v2x_isp_params_ops = {
+	.dpcc_config = isp_dpcc_config,
+	.dpcc_enable = isp_dpcc_enable,
+	.bls_config = isp_bls_config,
+	.bls_enable = isp_bls_enable,
+	.sdg_config = isp_sdg_config,
+	.sdg_enable = isp_sdg_enable,
+	.sihst_config = isp_sihst_config,
+	.sihst_enable = isp_sihst_enable,
+	.lsc_config = isp_lsc_config,
+	.lsc_enable = isp_lsc_enable,
+	.awbgain_config = isp_awbgain_config,
+	.awbgain_enable = isp_awbgain_enable,
+	.bdm_config = isp_bdm_config,
+	.bdm_enable = isp_bdm_enable,
+	.ctk_config = isp_ctk_config,
+	.ctk_enable = isp_ctk_enable,
+	.goc_config = isp_goc_config,
+	.goc_enable = isp_goc_enable,
+	.cproc_config = isp_cproc_config,
+	.cproc_enable = isp_cproc_enable,
+	.siaf_config = isp_siaf_config,
+	.siaf_enable = isp_siaf_enable,
+	.siawb_config = isp_siawb_config,
+	.siawb_enable = isp_siawb_enable,
+	.ie_config = isp_ie_config,
+	.ie_enable = isp_ie_enable,
+	.yuvae_config = isp_yuvae_config,
+	.yuvae_enable = isp_yuvae_enable,
+	.wdr_config = isp_wdr_config,
+	.wdr_enable = isp_wdr_enable,
+	.iesharp_config = isp_iesharp_config,
+	.iesharp_enable = isp_iesharp_enable,
+	.rawaf_config = isp_rawaf_config,
+	.rawaf_enable = isp_rawaf_enable,
+	.rawaelite_config = isp_rawaelite_config,
+	.rawaelite_enable = isp_rawaelite_enable,
+	.rawaebig1_config = isp_rawaebig1_config,
+	.rawaebig1_enable = isp_rawaebig1_enable,
+	.rawaebig2_config = isp_rawaebig2_config,
+	.rawaebig2_enable = isp_rawaebig2_enable,
+	.rawaebig3_config = isp_rawaebig3_config,
+	.rawaebig3_enable = isp_rawaebig3_enable,
+	.rawawb_config = isp_rawawb_config,
+	.rawawb_enable = isp_rawawb_enable,
+	.rawhstlite_config = isp_rawhstlite_config,
+	.rawhstlite_enable = isp_rawhstlite_enable,
+	.rawhstbig1_config = isp_rawhstbig1_config,
+	.rawhstbig1_enable = isp_rawhstbig1_enable,
+	.rawhstbig2_config = isp_rawhstbig2_config,
+	.rawhstbig2_enable = isp_rawhstbig2_enable,
+	.rawhstbig3_config = isp_rawhstbig3_config,
+	.rawhstbig3_enable = isp_rawhstbig3_enable,
+	.hdrmge_config = isp_hdrmge_config,
+	.hdrmge_enable = isp_hdrmge_enable,
+	.rawnr_config = isp_rawnr_config,
+	.rawnr_enable = isp_rawnr_enable,
+	.hdrtmo_config = isp_hdrtmo_config,
+	.hdrtmo_enable = isp_hdrtmo_enable,
+	.gic_config = isp_gic_config,
+	.gic_enable = isp_gic_enable,
+	.dhaz_config = isp_dhaz_config,
+	.dhaz_enable = isp_dhaz_enable,
+	.isp3dlut_config = isp_3dlut_config,
+	.isp3dlut_enable = isp_3dlut_enable,
+};
+
+static __maybe_unused
+void __isp_isr_other_config(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct isp2x_isp_params_cfg *new_params)
+{
+	u64 module_en_update, module_cfg_update, module_ens;
+	struct rkisp_isp_params_v2x_ops *ops =
+		(struct rkisp_isp_params_v2x_ops *)params_vdev->priv_ops;
+
+	module_en_update = new_params->module_en_update;
+	module_cfg_update = new_params->module_cfg_update;
+	module_ens = new_params->module_ens;
+
+	if ((module_en_update & ISP2X_MODULE_DPCC) ||
+	    (module_cfg_update & ISP2X_MODULE_DPCC)) {
+		if ((module_cfg_update & ISP2X_MODULE_DPCC))
+			ops->dpcc_config(params_vdev,
+				&new_params->others.dpcc_cfg);
+
+		if (module_en_update & ISP2X_MODULE_DPCC)
+			ops->dpcc_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_DPCC));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_BLS) ||
+	    (module_cfg_update & ISP2X_MODULE_BLS)) {
+		if ((module_cfg_update & ISP2X_MODULE_BLS))
+			ops->bls_config(params_vdev,
+				&new_params->others.bls_cfg);
+
+		if (module_en_update & ISP2X_MODULE_BLS)
+			ops->bls_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_BLS));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_SDG) ||
+	    (module_cfg_update & ISP2X_MODULE_SDG)) {
+		if ((module_cfg_update & ISP2X_MODULE_SDG))
+			ops->sdg_config(params_vdev,
+				&new_params->others.sdg_cfg);
+
+		if (module_en_update & ISP2X_MODULE_SDG)
+			ops->sdg_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_SDG));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_LSC) ||
+	    (module_cfg_update & ISP2X_MODULE_LSC)) {
+		if ((module_cfg_update & ISP2X_MODULE_LSC))
+			ops->lsc_config(params_vdev,
+				&new_params->others.lsc_cfg);
+
+		if (module_en_update & ISP2X_MODULE_LSC)
+			ops->lsc_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_LSC));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_AWB_GAIN) ||
+	    (module_cfg_update & ISP2X_MODULE_AWB_GAIN)) {
+		if ((module_cfg_update & ISP2X_MODULE_AWB_GAIN))
+			ops->awbgain_config(params_vdev,
+				&new_params->others.awb_gain_cfg);
+
+		if (module_en_update & ISP2X_MODULE_AWB_GAIN)
+			ops->awbgain_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_AWB_GAIN));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_BDM) ||
+	    (module_cfg_update & ISP2X_MODULE_BDM)) {
+		if ((module_cfg_update & ISP2X_MODULE_BDM))
+			ops->bdm_config(params_vdev,
+				&new_params->others.bdm_cfg);
+
+		if (module_en_update & ISP2X_MODULE_BDM)
+			ops->bdm_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_BDM));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_CTK) ||
+	    (module_cfg_update & ISP2X_MODULE_CTK)) {
+		if ((module_cfg_update & ISP2X_MODULE_CTK))
+			ops->ctk_config(params_vdev,
+				&new_params->others.ctk_cfg);
+
+		if (module_en_update & ISP2X_MODULE_CTK)
+			ops->ctk_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_CTK));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_GOC) ||
+	    (module_cfg_update & ISP2X_MODULE_GOC)) {
+		if ((module_cfg_update & ISP2X_MODULE_GOC))
+			ops->goc_config(params_vdev,
+				&new_params->others.gammaout_cfg);
+
+		if (module_en_update & ISP2X_MODULE_GOC)
+			ops->goc_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_GOC));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_CPROC) ||
+	    (module_cfg_update & ISP2X_MODULE_CPROC)) {
+		if ((module_cfg_update & ISP2X_MODULE_CPROC))
+			ops->cproc_config(params_vdev,
+				&new_params->others.cproc_cfg);
+
+		if (module_en_update & ISP2X_MODULE_CPROC)
+			ops->cproc_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_CPROC));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_IE) ||
+	    (module_cfg_update & ISP2X_MODULE_IE)) {
+		if ((module_cfg_update & ISP2X_MODULE_IE))
+			ops->ie_config(params_vdev,
+				&new_params->others.ie_cfg);
+
+		if (module_en_update & ISP2X_MODULE_IE)
+			ops->ie_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_IE));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_WDR) ||
+	    (module_cfg_update & ISP2X_MODULE_WDR)) {
+		if ((module_cfg_update & ISP2X_MODULE_WDR))
+			ops->wdr_config(params_vdev,
+				&new_params->others.wdr_cfg);
+
+		if (module_en_update & ISP2X_MODULE_WDR)
+			ops->wdr_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_WDR));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RK_IESHARP) ||
+	    (module_cfg_update & ISP2X_MODULE_RK_IESHARP)) {
+		if ((module_cfg_update & ISP2X_MODULE_RK_IESHARP))
+			ops->iesharp_config(params_vdev,
+				&new_params->others.rkiesharp_cfg);
+
+		if (module_en_update & ISP2X_MODULE_RK_IESHARP)
+			ops->iesharp_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RK_IESHARP));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_HDRMGE) ||
+	    (module_cfg_update & ISP2X_MODULE_HDRMGE)) {
+		if ((module_cfg_update & ISP2X_MODULE_HDRMGE))
+			ops->hdrmge_config(params_vdev,
+				&new_params->others.hdrmge_cfg);
+
+		if (module_en_update & ISP2X_MODULE_HDRMGE)
+			ops->hdrmge_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_HDRMGE));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWNR) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWNR)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWNR))
+			ops->rawnr_config(params_vdev,
+				&new_params->others.rawnr_cfg);
+
+		if (module_en_update & ISP2X_MODULE_RAWNR)
+			ops->rawnr_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWNR));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_HDRTMO) ||
+	    (module_cfg_update & ISP2X_MODULE_HDRTMO)) {
+		if ((module_cfg_update & ISP2X_MODULE_HDRTMO))
+			ops->hdrtmo_config(params_vdev,
+				&new_params->others.hdrtmo_cfg);
+
+		if (module_en_update & ISP2X_MODULE_HDRTMO)
+			ops->hdrtmo_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_HDRTMO));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_GIC) ||
+	    (module_cfg_update & ISP2X_MODULE_GIC)) {
+		if ((module_cfg_update & ISP2X_MODULE_GIC))
+			ops->gic_config(params_vdev,
+				&new_params->others.gic_cfg);
+
+		if (module_en_update & ISP2X_MODULE_GIC)
+			ops->gic_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_GIC));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_DHAZ) ||
+	    (module_cfg_update & ISP2X_MODULE_DHAZ)) {
+		if ((module_cfg_update & ISP2X_MODULE_DHAZ))
+			ops->dhaz_config(params_vdev,
+				&new_params->others.dhaz_cfg);
+
+		if (module_en_update & ISP2X_MODULE_DHAZ)
+			ops->dhaz_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_DHAZ));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_3DLUT) ||
+	    (module_cfg_update & ISP2X_MODULE_3DLUT)) {
+		if ((module_cfg_update & ISP2X_MODULE_3DLUT))
+			ops->isp3dlut_config(params_vdev,
+				&new_params->others.isp3dlut_cfg);
+
+		if (module_en_update & ISP2X_MODULE_3DLUT)
+			ops->isp3dlut_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_3DLUT));
+	}
+}
+
+static __maybe_unused
+void __isp_isr_meas_config(struct rkisp_isp_params_vdev *params_vdev,
+			   struct isp2x_isp_params_cfg *new_params)
+{
+	u64 module_en_update, module_cfg_update, module_ens;
+	struct rkisp_isp_params_v2x_ops *ops =
+		(struct rkisp_isp_params_v2x_ops *)params_vdev->priv_ops;
+
+	module_en_update = new_params->module_en_update;
+	module_cfg_update = new_params->module_cfg_update;
+	module_ens = new_params->module_ens;
+
+	if ((module_en_update & ISP2X_MODULE_YUVAE) ||
+	    (module_cfg_update & ISP2X_MODULE_YUVAE)) {
+		if ((module_cfg_update & ISP2X_MODULE_YUVAE))
+			ops->yuvae_config(params_vdev,
+				&new_params->meas.yuvae);
+
+		if (module_en_update & ISP2X_MODULE_YUVAE)
+			ops->yuvae_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_YUVAE));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAE_LITE) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAE_LITE)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAE_LITE))
+			ops->rawaelite_config(params_vdev,
+				&new_params->meas.rawaelite);
+
+		if (module_en_update & ISP2X_MODULE_RAWAE_LITE)
+			ops->rawaelite_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAE_LITE));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAE_BIG1) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAE_BIG1)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAE_BIG1))
+			ops->rawaebig1_config(params_vdev,
+				&new_params->meas.rawaebig1);
+
+		if (module_en_update & ISP2X_MODULE_RAWAE_BIG1)
+			ops->rawaebig1_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAE_BIG1));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAE_BIG2) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAE_BIG2)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAE_BIG2))
+			ops->rawaebig2_config(params_vdev,
+				&new_params->meas.rawaebig2);
+
+		if (module_en_update & ISP2X_MODULE_RAWAE_BIG2)
+			ops->rawaebig2_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAE_BIG2));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAE_BIG3) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAE_BIG3)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAE_BIG3))
+			ops->rawaebig3_config(params_vdev,
+				&new_params->meas.rawaebig3);
+
+		if (module_en_update & ISP2X_MODULE_RAWAE_BIG3)
+			ops->rawaebig3_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAE_BIG3));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_SIHST) ||
+	    (module_cfg_update & ISP2X_MODULE_SIHST)) {
+		if ((module_cfg_update & ISP2X_MODULE_SIHST))
+			ops->sihst_config(params_vdev,
+				&new_params->meas.sihst);
+
+		if (module_en_update & ISP2X_MODULE_SIHST)
+			ops->sihst_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_SIHST));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWHIST_LITE) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWHIST_LITE)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWHIST_LITE))
+			ops->rawhstlite_config(params_vdev,
+				&new_params->meas.rawhstlite);
+
+		if (module_en_update & ISP2X_MODULE_RAWHIST_LITE)
+			ops->rawhstlite_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWHIST_LITE));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWHIST_BIG1) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWHIST_BIG1)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWHIST_BIG1))
+			ops->rawhstbig1_config(params_vdev,
+				&new_params->meas.rawhstbig1);
+
+		if (module_en_update & ISP2X_MODULE_RAWHIST_BIG1)
+			ops->rawhstbig1_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWHIST_BIG1));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWHIST_BIG2) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWHIST_BIG2)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWHIST_BIG2))
+			ops->rawhstbig2_config(params_vdev,
+				&new_params->meas.rawhstbig2);
+
+		if (module_en_update & ISP2X_MODULE_RAWHIST_BIG2)
+			ops->rawhstbig2_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWHIST_BIG2));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWHIST_BIG3) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWHIST_BIG3)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWHIST_BIG3))
+			ops->rawhstbig3_config(params_vdev,
+				&new_params->meas.rawhstbig3);
+
+		if (module_en_update & ISP2X_MODULE_RAWHIST_BIG3)
+			ops->rawhstbig3_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWHIST_BIG3));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_SIAWB) ||
+	    (module_cfg_update & ISP2X_MODULE_SIAWB)) {
+		if ((module_cfg_update & ISP2X_MODULE_SIAWB))
+			ops->siawb_config(params_vdev,
+				&new_params->meas.siawb);
+
+		if (module_en_update & ISP2X_MODULE_SIAWB)
+			ops->siawb_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_SIAWB));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAWB) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAWB)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAWB))
+			ops->rawawb_config(params_vdev,
+				&new_params->meas.rawawb);
+
+		if (module_en_update & ISP2X_MODULE_RAWAWB)
+			ops->rawawb_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAWB));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_SIAF) ||
+	    (module_cfg_update & ISP2X_MODULE_SIAF)) {
+		if ((module_cfg_update & ISP2X_MODULE_SIAF))
+			ops->siaf_config(params_vdev,
+				&new_params->meas.siaf);
+
+		if (module_en_update & ISP2X_MODULE_SIAF)
+			ops->siaf_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_SIAF));
+	}
+
+	if ((module_en_update & ISP2X_MODULE_RAWAF) ||
+	    (module_cfg_update & ISP2X_MODULE_RAWAF)) {
+		if ((module_cfg_update & ISP2X_MODULE_RAWAF))
+			ops->rawaf_config(params_vdev,
+				&new_params->meas.rawaf);
+
+		if (module_en_update & ISP2X_MODULE_RAWAF)
+			ops->rawaf_enable(params_vdev,
+				!!(module_ens & ISP2X_MODULE_RAWAF));
+	}
+}
+
+static __maybe_unused
+void __preisp_isr_update_hdrae_para(struct rkisp_isp_params_vdev *params_vdev,
+				    struct isp2x_isp_params_cfg *new_params)
+{
+}
+
+/* Not called when the camera active, thus not isr protection. */
+static void
+rkisp_params_configure_isp_v2x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	struct device *dev = params_vdev->dev->dev;
+
+	spin_lock(&params_vdev->config_lock);
+	/* override the default things */
+	if (!params_vdev->isp2x_params.module_cfg_update &&
+	    !params_vdev->isp2x_params.module_en_update)
+		dev_warn(dev, "can not get first iq setting in stream on\n");
+
+	__isp_isr_other_config(params_vdev, &params_vdev->isp2x_params);
+	__isp_isr_meas_config(params_vdev, &params_vdev->isp2x_params);
+	__preisp_isr_update_hdrae_para(params_vdev, &params_vdev->isp2x_params);
+	spin_unlock(&params_vdev->config_lock);
+}
+
+static void rkisp1_save_first_param_v2x(struct rkisp_isp_params_vdev *params_vdev, void *param)
+{
+	struct isp2x_isp_params_cfg *new_params;
+
+	new_params = (struct isp2x_isp_params_cfg *)param;
+	params_vdev->isp2x_params = *new_params;
+}
+
+static void rkisp1_clear_first_param_v2x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	params_vdev->isp2x_params.module_cfg_update = 0;
+	params_vdev->isp2x_params.module_en_update = 0;
+}
+
+/* Not called when the camera active, thus not isr protection. */
+static void
+rkisp_params_disable_isp_v2x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	struct rkisp_isp_params_v2x_ops *ops =
+		(struct rkisp_isp_params_v2x_ops *)params_vdev->priv_ops;
+
+	ops->dpcc_enable(params_vdev, false);
+	ops->bls_enable(params_vdev, false);
+	ops->sdg_enable(params_vdev, false);
+	ops->sihst_enable(params_vdev, false);
+	ops->lsc_enable(params_vdev, false);
+	ops->awbgain_enable(params_vdev, false);
+	ops->bdm_enable(params_vdev, false);
+	ops->ctk_enable(params_vdev, false);
+	ops->goc_enable(params_vdev, false);
+	ops->cproc_enable(params_vdev, false);
+	ops->siaf_enable(params_vdev, false);
+	ops->siawb_enable(params_vdev, false);
+	ops->ie_enable(params_vdev, false);
+	ops->yuvae_enable(params_vdev, false);
+	ops->wdr_enable(params_vdev, false);
+	ops->iesharp_enable(params_vdev, false);
+	ops->rawaf_enable(params_vdev, false);
+	ops->rawaelite_enable(params_vdev, false);
+	ops->rawaebig1_enable(params_vdev, false);
+	ops->rawaebig2_enable(params_vdev, false);
+	ops->rawaebig3_enable(params_vdev, false);
+	ops->rawawb_enable(params_vdev, false);
+	ops->rawhstlite_enable(params_vdev, false);
+	ops->rawhstbig1_enable(params_vdev, false);
+	ops->rawhstbig2_enable(params_vdev, false);
+	ops->rawhstbig3_enable(params_vdev, false);
+	ops->hdrmge_enable(params_vdev, false);
+	ops->rawnr_enable(params_vdev, false);
+	ops->hdrtmo_enable(params_vdev, false);
+	ops->gic_enable(params_vdev, false);
+	ops->dhaz_enable(params_vdev, false);
+	ops->isp3dlut_enable(params_vdev, false);
+}
+
+static void
+rkisp_params_isr_v2x(struct rkisp_isp_params_vdev *params_vdev,
+		     u32 isp_mis)
+{
+	struct isp2x_isp_params_cfg *new_params;
+	struct rkisp_buffer *cur_buf = NULL;
+	unsigned int cur_frame_id =
+		atomic_read(&params_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+
+	spin_lock(&params_vdev->config_lock);
+	if (!params_vdev->streamon)
+		goto unlock;
+
+	/* get one empty buffer */
+	if (!list_empty(&params_vdev->params))
+		cur_buf = list_first_entry(&params_vdev->params,
+					   struct rkisp_buffer, queue);
+	if (!cur_buf)
+		goto unlock;
+
+	new_params = (struct isp2x_isp_params_cfg *)(cur_buf->vaddr[0]);
+	if (isp_mis & CIF_ISP_FRAME) {
+		u32 isp_ctrl;
+
+		list_del(&cur_buf->queue);
+
+		__isp_isr_other_config(params_vdev, new_params);
+		__isp_isr_meas_config(params_vdev, new_params);
+
+		/* update shadow register immediately */
+		isp_ctrl = rkisp_ioread32(params_vdev, CIF_ISP_CTRL);
+		isp_ctrl |= CIF_ISP_CTRL_ISP_CFG_UPD;
+		rkisp_iowrite32(params_vdev, isp_ctrl, CIF_ISP_CTRL);
+
+		cur_buf->vb.sequence = cur_frame_id;
+		vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
+	}
+
+unlock:
+	spin_unlock(&params_vdev->config_lock);
+}
+
+static struct rkisp_isp_params_ops rkisp_isp_params_ops_tbl = {
+	.save_first_param = rkisp1_save_first_param_v2x,
+	.clear_first_param = rkisp1_clear_first_param_v2x,
+	.config_isp = rkisp_params_configure_isp_v2x,
+	.disable_isp = rkisp_params_disable_isp_v2x,
+	.isr_hdl = rkisp_params_isr_v2x,
+};
+
+void rkisp_init_params_vdev_v2x(struct rkisp_isp_params_vdev *params_vdev)
+{
+	params_vdev->ops = &rkisp_isp_params_ops_tbl;
+	params_vdev->priv_ops = &rkisp_v2x_isp_params_ops;
+}
+
diff --git a/drivers/media/platform/rockchip/isp/isp_params_v2x.h b/drivers/media/platform/rockchip/isp/isp_params_v2x.h
new file mode 100644
index 000000000000..eadb9249aa41
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_params_v2x.h
@@ -0,0 +1,306 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#ifndef _RKISP_ISP_PARAM_V2X_H
+#define _RKISP_ISP_PARAM_V2X_H
+
+#include <linux/rkisp1-config.h>
+#include <linux/rk-preisp.h>
+#include "common.h"
+#include "isp_params.h"
+
+#define ISP2X_YUVAE_ENA				BIT(0)
+#define ISP2X_YUVAE_WNDNUM_SET			BIT(1)
+#define ISP2X_YUVAE_SUBWIN1_EN			BIT(4)
+#define ISP2X_YUVAE_SUBWIN2_EN			BIT(5)
+#define ISP2X_YUVAE_SUBWIN3_EN			BIT(6)
+#define ISP2X_YUVAE_SUBWIN4_EN			BIT(7)
+#define ISP2X_YUVAE_YSEL			BIT(16)
+#define ISP2X_YUVAE_H_OFFSET_SET(x)		((x) & 0x1FFF)
+#define ISP2X_YUVAE_V_OFFSET_SET(x)		(((x) & 0x1FFF) << 16)
+#define ISP2X_YUVAE_H_SIZE_SET(x)		((x) & 0x7FF)
+#define ISP2X_YUVAE_V_SIZE_SET(x)		(((x) & 0x7FF) << 16)
+#define ISP2X_YUVAE_SUBWIN_H_OFFSET_SET(x)	((x) & 0x1FFF)
+#define ISP2X_YUVAE_SUBWIN_V_OFFSET_SET(x)	(((x) & 0x1FFF) << 16)
+#define ISP2X_YUVAE_SUBWIN_H_SIZE_SET(x)	((x) & 0x1FFF)
+#define ISP2X_YUVAE_SUBWIN_V_SIZE_SET(x)	(((x) & 0x1FFF) << 16)
+
+#define ISP2X_RAWAE_LITE_ENA			BIT(0)
+#define ISP2X_RAWAE_LITE_WNDNUM_SET(x)		(((x) & 0x1) << 1)
+#define ISP2X_RAWAE_LITE_H_OFFSET_SET(x)	((x) & 0x1FFF)
+#define ISP2X_RAWAE_LITE_V_OFFSET_SET(x)	(((x) & 0x1FFF) << 16)
+#define ISP2X_RAWAE_LITE_H_SIZE_SET(x)		((x) & 0x1FFF)
+#define ISP2X_RAWAE_LITE_V_SIZE_SET(x)		(((x) & 0x1FFF) << 16)
+
+#define ISP2X_RAWAEBIG_ENA			BIT(0)
+#define ISP2X_RAWAEBIG_WNDNUM_SET(x)		(((x) & 0x3) << 1)
+#define ISP2X_RAWAEBIG_SUBWIN1_EN		BIT(4)
+#define ISP2X_RAWAEBIG_SUBWIN2_EN		BIT(5)
+#define ISP2X_RAWAEBIG_SUBWIN3_EN		BIT(6)
+#define ISP2X_RAWAEBIG_SUBWIN4_EN		BIT(7)
+#define ISP2X_RAWAEBIG_H_OFFSET_SET(x)		((x) & 0x1FFF)
+#define ISP2X_RAWAEBIG_V_OFFSET_SET(x)		(((x) & 0x1FFF) << 16)
+#define ISP2X_RAWAEBIG_H_SIZE_SET(x)		((x) & 0x7FF)
+#define ISP2X_RAWAEBIG_V_SIZE_SET(x)		(((x) & 0x7FF) << 16)
+#define ISP2X_RAWAEBIG_SUBWIN_H_OFFSET_SET(x)	((x) & 0x1FFF)
+#define ISP2X_RAWAEBIG_SUBWIN_V_OFFSET_SET(x)	(((x) & 0x1FFF) << 16)
+#define ISP2X_RAWAEBIG_SUBWIN_H_SIZE_SET(x)	((x) & 0x1FFF)
+#define ISP2X_RAWAEBIG_SUBWIN_V_SIZE_SET(x)	(((x) & 0x1FFF) << 16)
+
+#define ISP2X_SIAWB_YMAX_CMP_EN			BIT(2)
+#define ISP2X_SIAWB_RGB_MODE_EN			BIT(31)
+#define ISP2X_SIAWB_SET_FRAMES(x)		(((x) & 0x07) << 28)
+#define ISP2X_SIAWB_MODE_SET(x)			((x) << 0)
+
+#define ISP2X_SIAF_ENA				BIT(0)
+#define ISP2X_SIAF_WIN_X(x)			(((x) & 0x1FFF) << 16)
+#define ISP2X_SIAF_WIN_Y(x)			((x) & 0x1FFF)
+#define ISP2X_SIAF_SET_SHIFT_A(x, y)		(((x) & 0x7) << 16 | ((y) & 0x7) << 0)
+#define ISP2X_SIAF_SET_SHIFT_B(x, y)		(((x) & 0x7) << 20 | ((y) & 0x7) << 4)
+#define ISP2X_SIAF_SET_SHIFT_C(x, y)		(((x) & 0x7) << 24 | ((y) & 0x7) << 8)
+#define ISP2X_SIAF_GET_LUM_SHIFT_A(x)		(((x) & 0x70000) >> 16)
+#define ISP2X_SIAF_GET_AFM_SHIFT_A(x)		((x) & 0x7)
+
+#define ISP2X_RAWAF_ENA				BIT(0)
+#define ISP2X_RAWAF_GAMMA_ENA			BIT(1)
+#define ISP2X_RAWAF_GAUS_ENA			BIT(2)
+
+#define ISP2X_RAWAF_INT_LINE0_EN		BIT(27)
+#define ISP2X_RAWAF_INT_LINE1_EN		BIT(28)
+#define ISP2X_RAWAF_INT_LINE2_EN		BIT(29)
+#define ISP2X_RAWAF_INT_LINE3_EN		BIT(30)
+#define ISP2X_RAWAF_INT_LINE4_EN		BIT(31)
+#define ISP2X_RAWAF_INT_LINE0_NUM(x)		(((x) & 0xF) << 0)
+#define ISP2X_RAWAF_INT_LINE1_NUM(x)		(((x) & 0xF) << 4)
+#define ISP2X_RAWAF_INT_LINE2_NUM(x)		(((x) & 0xF) << 8)
+#define ISP2X_RAWAF_INT_LINE3_NUM(x)		(((x) & 0xF) << 12)
+#define ISP2X_RAWAF_INT_LINE4_NUM(x)		(((x) & 0xF) << 16)
+
+#define ISP2X_RAWAF_THRES(x)			((x) & 0xFFFF)
+
+#define ISP2X_RAWAF_WIN_X(x)			(((x) & 0x1FFF) << 16)
+#define ISP2X_RAWAF_WIN_Y(x)			((x) & 0x1FFF)
+#define ISP2X_RAWAF_SET_SHIFT_A(x, y)		(((x) & 0x7) << 16 | ((y) & 0x7) << 0)
+#define ISP2X_RAWAF_SET_SHIFT_B(x, y)		(((x) & 0x7) << 20 | ((y) & 0x7) << 4)
+
+#define ISP2X_SIHST_CTRL_EN_SET(x)		(((x) & 0x01) << 0)
+#define ISP2X_SIHST_CTRL_EN_MASK		ISP2X_SIHST_CTRL_EN_SET(0x01)
+#define ISP2X_SIHST_CTRL_STEPSIZE_SET(x)	(((x) & 0x7F) << 1)
+#define ISP2X_SIHST_CTRL_MODE_SET(x)		(((x) & 0x07) << 8)
+#define ISP2X_SIHST_CTRL_MODE_MASK		ISP2X_SIHST_CTRL_MODE_SET(0x07)
+#define ISP2X_SIHST_CTRL_AUTOSTOP_SET(x)	(((x) & 0x01) << 11)
+#define ISP2X_SIHST_CTRL_WATERLINE_SET(x)	(((x) & 0xFFF) << 12)
+#define ISP2X_SIHST_CTRL_DATASEL_SET(x)		(((x) & 0x07) << 24)
+#define ISP2X_SIHST_CTRL_INTRSEL_SET(x)		(((x) & 0x01) << 27)
+#define ISP2X_SIHST_CTRL_INTRSEL_MASK		ISP2X_SIHST_CTRL_INTRSEL_SET(0x01)
+#define ISP2X_SIHST_CTRL_WNDNUM_SET(x)		(((x) & 0x03) << 28)
+#define ISP2X_SIHST_CTRL_WNDNUM_MASK		ISP2X_SIHST_CTRL_WNDNUM_SET(0x03)
+
+#define ISP2X_SIHST_ROW_NUM			15
+#define ISP2X_SIHST_COLUMN_NUM			15
+#define ISP2X_SIHST_WEIGHT_REG_SIZE		\
+				(ISP2X_SIHST_ROW_NUM * ISP2X_SIHST_COLUMN_NUM)
+
+#define ISP2X_SIHST_WEIGHT_SET(v0, v1, v2, v3)	\
+				(((v0) & 0x3F) | (((v1) & 0x3F) << 8) |\
+				(((v2) & 0x3F) << 16) |\
+				(((v3) & 0x3F) << 24))
+
+#define ISP2X_SIHST_OFFS_SET(v0, v1)		\
+				(((v0) & 0x1FFF) | (((v1) & 0x1FFF) << 16))
+#define ISP2X_SIHST_SIZE_SET(v0, v1)		\
+				(((v0) & 0x1FFF) | (((v1) & 0x1FFF) << 16))
+
+#define ISP2X_RAWHSTBIG_CTRL_EN_SET(x)		(((x) & 0x01) << 0)
+#define ISP2X_RAWHSTBIG_CTRL_EN_MASK		ISP2X_RAWHSTBIG_CTRL_EN_SET(0x01)
+#define ISP2X_RAWHSTBIG_CTRL_STEPSIZE_SET(x)	(((x) & 0x07) << 1)
+#define ISP2X_RAWHSTBIG_CTRL_MODE_SET(x)	(((x) & 0x07) << 8)
+#define ISP2X_RAWHSTBIG_CTRL_MODE_MASK		ISP2X_RAWHSTBIG_CTRL_MODE_SET(0x07)
+#define ISP2X_RAWHSTBIG_CTRL_WATERLINE_SET(x)	(((x) & 0xFFF) << 12)
+#define ISP2X_RAWHSTBIG_CTRL_DATASEL_SET(x)	(((x) & 0x07) << 24)
+#define ISP2X_RAWHSTBIG_CTRL_WNDNUM_SET(x)	(((x) & 0x03) << 28)
+#define ISP2X_RAWHSTBIG_CTRL_WNDNUM_MASK	ISP2X_RAWHSTBIG_CTRL_WNDNUM_SET(0x03)
+
+#define ISP2X_RAWHSTBIG_WRAM_EN			BIT(31)
+
+#define ISP2X_RAWHSTBIG_ROW_NUM			15
+#define ISP2X_RAWHSTBIG_COLUMN_NUM		15
+#define ISP2X_RAWHSTBIG_WEIGHT_REG_SIZE		\
+				(ISP2X_RAWHSTBIG_ROW_NUM * ISP2X_RAWHSTBIG_COLUMN_NUM)
+
+#define ISP2X_RAWHSTBIG_WEIGHT_SET(v0, v1, v2, v3, v4)	\
+				(((v0) & 0x3F) | (((v1) & 0x3F) << 6) |\
+				(((v2) & 0x3F) << 12) |\
+				(((v3) & 0x3F) << 18) |\
+				(((v4) & 0x3F) << 24))
+
+#define ISP2X_RAWHSTBIG_OFFS_SET(v0, v1)	\
+				(((v0) & 0x1FFF) | (((v1) & 0x1FFF) << 16))
+#define ISP2X_RAWHSTBIG_SIZE_SET(v0, v1)	\
+				(((v0) & 0x7FF) | (((v1) & 0x7FF) << 16))
+
+#define ISP2X_RAWHSTLITE_CTRL_EN_SET(x)		(((x) & 0x01) << 0)
+#define ISP2X_RAWHSTLITE_CTRL_EN_MASK		ISP2X_RAWHSTBIG_CTRL_EN_SET(0x01)
+#define ISP2X_RAWHSTLITE_CTRL_STEPSIZE_SET(x)	(((x) & 0x07) << 1)
+#define ISP2X_RAWHSTLITE_CTRL_MODE_SET(x)	(((x) & 0x07) << 8)
+#define ISP2X_RAWHSTLITE_CTRL_MODE_MASK		ISP2X_RAWHSTBIG_CTRL_MODE_SET(0x07)
+#define ISP2X_RAWHSTLITE_CTRL_WATERLINE_SET(x)	(((x) & 0xFFF) << 12)
+#define ISP2X_RAWHSTLITE_CTRL_DATASEL_SET(x)	(((x) & 0x07) << 24)
+
+#define ISP2X_RAWHSTLITE_ROW_NUM		5
+#define ISP2X_RAWHSTLITE_COLUMN_NUM		5
+#define ISP2X_RAWHSTLITE_WEIGHT_REG_SIZE	\
+				(ISP2X_RAWHSTLITE_ROW_NUM * ISP2X_RAWHSTLITE_COLUMN_NUM)
+
+#define ISP2X_RAWHSTLITE_WEIGHT_SET(v0, v1, v2, v3)	\
+				(((v0) & 0x3F) | (((v1) & 0x3F) << 8) |\
+				(((v2) & 0x3F) << 16) |\
+				(((v3) & 0x3F) << 24))
+
+#define ISP2X_RAWHSTLITE_OFFS_SET(v0, v1)	\
+				(((v0) & 0x1FFF) | (((v1) & 0x1FFF) << 16))
+#define ISP2X_RAWHSTLITE_SIZE_SET(v0, v1)	\
+				(((v0) & 0x7FF) | (((v1) & 0x7FF) << 16))
+
+#define ISP2X_RAWAWB_ENA			BIT(0)
+
+#define ISP2X_ISPPATH_RAWAE_SEL_SET(x)	(((x) & 0x03) << 16)
+#define ISP2X_ISPPATH_RAWAF_SEL_SET(x)	(((x) & 0x03) << 18)
+#define ISP2X_ISPPATH_RAWAWB_SEL_SET(x)	(((x) & 0x03) << 20)
+#define ISP2X_ISPPATH_RAWAE_SWAP_SET(x)	(((x) & 0x03) << 22)
+
+struct rkisp_isp_params_vdev;
+struct rkisp_isp_params_v2x_ops {
+	void (*dpcc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct isp2x_dpcc_cfg *arg);
+	void (*dpcc_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			    bool en);
+	void (*bls_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_bls_cfg *arg);
+	void (*bls_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*sdg_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_sdg_cfg *arg);
+	void (*sdg_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*sihst_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_sihst_cfg *arg);
+	void (*sihst_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*lsc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_lsc_cfg *arg);
+	void (*lsc_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*awbgain_config)(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct isp2x_awb_gain_cfg *arg);
+	void (*awbgain_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			       bool en);
+	void (*bdm_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_bdm_config *arg);
+	void (*bdm_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*ctk_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_ctk_cfg *arg);
+	void (*ctk_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*goc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_gammaout_cfg *arg);
+	void (*goc_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*cproc_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_cproc_cfg *arg);
+	void (*cproc_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*siaf_config)(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct isp2x_siaf_cfg *arg);
+	void (*siaf_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			    bool en);
+	void (*siawb_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_siawb_meas_cfg *arg);
+	void (*siawb_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*ie_config)(struct rkisp_isp_params_vdev *params_vdev,
+			  const struct isp2x_ie_cfg *arg);
+	void (*ie_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			  bool en);
+	void (*yuvae_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_yuvae_meas_cfg *arg);
+	void (*yuvae_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*wdr_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_wdr_cfg *arg);
+	void (*wdr_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*iesharp_config)(struct rkisp_isp_params_vdev *params_vdev,
+			       const struct isp2x_rkiesharp_cfg *arg);
+	void (*iesharp_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			       bool en);
+	void (*rawaf_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_rawaf_meas_cfg *arg);
+	void (*rawaf_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*rawaelite_config)(struct rkisp_isp_params_vdev *params_vdev,
+				 const struct isp2x_rawaelite_meas_cfg *arg);
+	void (*rawaelite_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				 bool en);
+	void (*rawaebig1_config)(struct rkisp_isp_params_vdev *params_vdev,
+				 const struct isp2x_rawaebig_meas_cfg *arg);
+	void (*rawaebig1_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				 bool en);
+	void (*rawaebig2_config)(struct rkisp_isp_params_vdev *params_vdev,
+				 const struct isp2x_rawaebig_meas_cfg *arg);
+	void (*rawaebig2_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				 bool en);
+	void (*rawaebig3_config)(struct rkisp_isp_params_vdev *params_vdev,
+				 const struct isp2x_rawaebig_meas_cfg *arg);
+	void (*rawaebig3_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				 bool en);
+	void (*rawawb_config)(struct rkisp_isp_params_vdev *params_vdev,
+			      const struct isp2x_rawawb_meas_cfg *arg);
+	void (*rawawb_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			      bool en);
+	void (*rawhstlite_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct isp2x_rawhistlite_cfg *arg);
+	void (*rawhstlite_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				  bool en);
+	void (*rawhstbig1_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct isp2x_rawhistbig_cfg *arg);
+	void (*rawhstbig1_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				  bool en);
+	void (*rawhstbig2_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct isp2x_rawhistbig_cfg *arg);
+	void (*rawhstbig2_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				  bool en);
+	void (*rawhstbig3_config)(struct rkisp_isp_params_vdev *params_vdev,
+				  const struct isp2x_rawhistbig_cfg *arg);
+	void (*rawhstbig3_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				  bool en);
+	void (*hdrmge_config)(struct rkisp_isp_params_vdev *params_vdev,
+			      const struct isp2x_hdrmge_cfg *arg);
+	void (*hdrmge_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			      bool en);
+	void (*rawnr_config)(struct rkisp_isp_params_vdev *params_vdev,
+			     const struct isp2x_rawnr_cfg *arg);
+	void (*rawnr_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			     bool en);
+	void (*hdrtmo_config)(struct rkisp_isp_params_vdev *params_vdev,
+			      const struct isp2x_hdrtmo_cfg *arg);
+	void (*hdrtmo_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			      bool en);
+	void (*gic_config)(struct rkisp_isp_params_vdev *params_vdev,
+			   const struct isp2x_gic_cfg *arg);
+	void (*gic_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			   bool en);
+	void (*dhaz_config)(struct rkisp_isp_params_vdev *params_vdev,
+			    const struct isp2x_dhaz_cfg *arg);
+	void (*dhaz_enable)(struct rkisp_isp_params_vdev *params_vdev,
+			    bool en);
+	void (*isp3dlut_config)(struct rkisp_isp_params_vdev *params_vdev,
+				const struct isp2x_3dlut_cfg *arg);
+	void (*isp3dlut_enable)(struct rkisp_isp_params_vdev *params_vdev,
+				bool en);
+};
+
+void rkisp_init_params_vdev_v2x(struct rkisp_isp_params_vdev *params_vdev);
+
+#endif /* _RKISP_ISP_PARAM_V2X_H */
diff --git a/drivers/media/platform/rockchip/isp/isp_stats.c b/drivers/media/platform/rockchip/isp/isp_stats.c
index be53941d0ec7..9c5bd337411f 100644
--- a/drivers/media/platform/rockchip/isp/isp_stats.c
+++ b/drivers/media/platform/rockchip/isp/isp_stats.c
@@ -1,36 +1,5 @@
-/*
- * Rockchip isp1 driver
- *
- * Copyright (C) 2017 Rockchip Electronics Co., Ltd.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
 
 #include <linux/kfifo.h>
 #include <media/v4l2-common.h>
@@ -38,7 +7,9 @@
 #include <media/videobuf2-core.h>
 #include <media/videobuf2-vmalloc.h>	/* for ISP statistics */
 #include "dev.h"
-#include "regs.h"
+#include "isp_stats.h"
+#include "isp_stats_v1x.h"
+#include "isp_stats_v2x.h"
 
 #define STATS_NAME DRIVER_NAME "-statistics"
 #define RKISP_ISP_STATS_REQ_BUFS_MIN 2
@@ -129,7 +100,10 @@ static int rkisp_stats_vb2_queue_setup(struct vb2_queue *vq,
 	*num_buffers = clamp_t(u32, *num_buffers, RKISP_ISP_STATS_REQ_BUFS_MIN,
 			       RKISP_ISP_STATS_REQ_BUFS_MAX);
 
-	sizes[0] = sizeof(struct rkisp1_stat_buffer);
+	if (stats_vdev->dev->isp_ver <= ISP_V13)
+		sizes[0] = sizeof(struct rkisp1_stat_buffer);
+	else
+		sizes[0] = sizeof(struct isp2x_stat);
 
 	INIT_LIST_HEAD(&stats_vdev->stat);
 
@@ -214,300 +188,6 @@ static int rkisp_stats_init_vb2_queue(struct vb2_queue *q,
 	return vb2_queue_init(q);
 }
 
-static void rkisp_stats_get_awb_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	/* Protect against concurrent access from ISR? */
-	u32 reg_val;
-
-	pbuf->meas_type |= CIFISP_STAT_AWB;
-	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_WHITE_CNT_V10);
-	pbuf->params.awb.awb_mean[0].cnt = CIF_ISP_AWB_GET_PIXEL_CNT(reg_val);
-	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_MEAN_V10);
-
-	pbuf->params.awb.awb_mean[0].mean_cr_or_r =
-		CIF_ISP_AWB_GET_MEAN_CR_R(reg_val);
-	pbuf->params.awb.awb_mean[0].mean_cb_or_b =
-		CIF_ISP_AWB_GET_MEAN_CB_B(reg_val);
-	pbuf->params.awb.awb_mean[0].mean_y_or_g =
-		CIF_ISP_AWB_GET_MEAN_Y_G(reg_val);
-}
-
-static void rkisp_stats_get_awb_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	/* Protect against concurrent access from ISR? */
-	u32 reg_val;
-
-	pbuf->meas_type |= CIFISP_STAT_AWB;
-	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_WHITE_CNT_V12);
-	pbuf->params.awb.awb_mean[0].cnt = CIF_ISP_AWB_GET_PIXEL_CNT(reg_val);
-	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_MEAN_V12);
-
-	pbuf->params.awb.awb_mean[0].mean_cr_or_r =
-		CIF_ISP_AWB_GET_MEAN_CR_R(reg_val);
-	pbuf->params.awb.awb_mean[0].mean_cb_or_b =
-		CIF_ISP_AWB_GET_MEAN_CB_B(reg_val);
-	pbuf->params.awb.awb_mean[0].mean_y_or_g =
-		CIF_ISP_AWB_GET_MEAN_Y_G(reg_val);
-}
-
-static void rkisp_stats_get_aec_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	unsigned int i;
-	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_EXP_MEAN_00_V10;
-
-	pbuf->meas_type |= CIFISP_STAT_AUTOEXP;
-	for (i = 0; i < stats_vdev->config->ae_mean_max; i++)
-		pbuf->params.ae.exp_mean[i] = (u8)readl(addr + i * 4);
-}
-
-static void rkisp_stats_get_aec_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	int i;
-	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_EXP_MEAN_V12;
-	u32 value;
-
-	pbuf->meas_type |= CIFISP_STAT_AUTOEXP;
-	for (i = 0; i < stats_vdev->config->ae_mean_max / 4; i++) {
-		value = readl(addr + i * 4);
-		pbuf->params.ae.exp_mean[4 * i + 0] = CIF_ISP_EXP_GET_MEAN_xy0_V12(value);
-		pbuf->params.ae.exp_mean[4 * i + 1] = CIF_ISP_EXP_GET_MEAN_xy1_V12(value);
-		pbuf->params.ae.exp_mean[4 * i + 2] = CIF_ISP_EXP_GET_MEAN_xy2_V12(value);
-		pbuf->params.ae.exp_mean[4 * i + 3] = CIF_ISP_EXP_GET_MEAN_xy3_V12(value);
-	}
-	value = readl(addr + i * 4);
-	pbuf->params.ae.exp_mean[4 * i + 0] = CIF_ISP_EXP_GET_MEAN_xy0_V12(value);
-}
-
-static void rkisp_stats_get_afc_meas(struct rkisp_isp_stats_vdev *stats_vdev,
-				      struct rkisp1_stat_buffer *pbuf)
-{
-	void __iomem *base_addr;
-	struct cifisp_af_stat *af;
-
-	pbuf->meas_type |= CIFISP_STAT_AFM_FIN;
-
-	af = &pbuf->params.af;
-	base_addr = stats_vdev->dev->base_addr;
-	af->window[0].sum = readl(base_addr + CIF_ISP_AFM_SUM_A);
-	af->window[0].lum = readl(base_addr + CIF_ISP_AFM_LUM_A);
-	af->window[1].sum = readl(base_addr + CIF_ISP_AFM_SUM_B);
-	af->window[1].lum = readl(base_addr + CIF_ISP_AFM_LUM_B);
-	af->window[2].sum = readl(base_addr + CIF_ISP_AFM_SUM_C);
-	af->window[2].lum = readl(base_addr + CIF_ISP_AFM_LUM_C);
-}
-
-static void rkisp_stats_get_hst_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	int i;
-	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_HIST_BIN_0_V10;
-
-	pbuf->meas_type |= CIFISP_STAT_HIST;
-	for (i = 0; i < stats_vdev->config->hist_bin_n_max; i++)
-		pbuf->params.hist.hist_bins[i] = readl(addr + (i * 4));
-}
-
-static void rkisp_stats_get_hst_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
-					  struct rkisp1_stat_buffer *pbuf)
-{
-	int i;
-	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_HIST_BIN_V12;
-	u32 value;
-
-	pbuf->meas_type |= CIFISP_STAT_HIST;
-	for (i = 0; i < stats_vdev->config->hist_bin_n_max / 2; i++) {
-		value = readl(addr + (i * 4));
-		pbuf->params.hist.hist_bins[2 * i] = CIF_ISP_HIST_GET_BIN0_V12(value);
-		pbuf->params.hist.hist_bins[2 * i + 1] = CIF_ISP_HIST_GET_BIN1_V12(value);
-	}
-}
-
-static void rkisp_stats_get_bls_meas(struct rkisp_isp_stats_vdev *stats_vdev,
-				      struct rkisp1_stat_buffer *pbuf)
-{
-	struct rkisp_device *dev = stats_vdev->dev;
-	const struct ispsd_in_fmt *in_fmt =
-			rkisp_get_ispsd_in_fmt(&dev->isp_sdev);
-	void __iomem *base = stats_vdev->dev->base_addr;
-	struct cifisp_bls_meas_val *bls_val;
-
-	bls_val = &pbuf->params.ae.bls_val;
-	if (in_fmt->bayer_pat == RAW_BGGR) {
-		bls_val->meas_b = readl(base + CIF_ISP_BLS_A_MEASURED);
-		bls_val->meas_gb = readl(base + CIF_ISP_BLS_B_MEASURED);
-		bls_val->meas_gr = readl(base + CIF_ISP_BLS_C_MEASURED);
-		bls_val->meas_r = readl(base + CIF_ISP_BLS_D_MEASURED);
-	} else if (in_fmt->bayer_pat == RAW_GBRG) {
-		bls_val->meas_gb = readl(base + CIF_ISP_BLS_A_MEASURED);
-		bls_val->meas_b = readl(base + CIF_ISP_BLS_B_MEASURED);
-		bls_val->meas_r = readl(base + CIF_ISP_BLS_C_MEASURED);
-		bls_val->meas_gr = readl(base + CIF_ISP_BLS_D_MEASURED);
-	} else if (in_fmt->bayer_pat == RAW_GRBG) {
-		bls_val->meas_gr = readl(base + CIF_ISP_BLS_A_MEASURED);
-		bls_val->meas_r = readl(base + CIF_ISP_BLS_B_MEASURED);
-		bls_val->meas_b = readl(base + CIF_ISP_BLS_C_MEASURED);
-		bls_val->meas_gb = readl(base + CIF_ISP_BLS_D_MEASURED);
-	} else if (in_fmt->bayer_pat == RAW_RGGB) {
-		bls_val->meas_r = readl(base + CIF_ISP_BLS_A_MEASURED);
-		bls_val->meas_gr = readl(base + CIF_ISP_BLS_B_MEASURED);
-		bls_val->meas_gb = readl(base + CIF_ISP_BLS_C_MEASURED);
-		bls_val->meas_b = readl(base + CIF_ISP_BLS_D_MEASURED);
-	}
-}
-
-static void rkisp_stats_get_emb_data(struct rkisp_isp_stats_vdev *stats_vdev,
-				      struct rkisp1_stat_buffer *pbuf)
-{
-	unsigned int i;
-	struct rkisp_device *dev = stats_vdev->dev;
-	unsigned int ph = 0, out = 0, packet_len = 0, playload_len = 0;
-	unsigned int mipi_kfifo_len;
-	unsigned int idx;
-	unsigned char *fifo_data;
-
-	idx = RKISP_EMDDATA_FIFO_MAX;
-	for (i = 0; i < RKISP_EMDDATA_FIFO_MAX; i++) {
-		if (dev->emd_data_fifo[i].frame_id == pbuf->frame_id) {
-			idx = i;
-			break;
-		}
-	}
-
-	if (idx == RKISP_EMDDATA_FIFO_MAX)
-		return;
-
-	if (kfifo_is_empty(&dev->emd_data_fifo[idx].mipi_kfifo))
-		return;
-
-	mipi_kfifo_len = dev->emd_data_fifo[idx].data_len;
-	fifo_data = &pbuf->params.emd.data[0];
-	for (i = 0; i < mipi_kfifo_len;) {
-		/* handle the package header */
-		out = kfifo_out(&dev->emd_data_fifo[idx].mipi_kfifo,
-				&ph, sizeof(ph));
-		if (!out)
-			break;
-		packet_len = (ph >> 8) & 0xfff;
-		i += sizeof(ph);
-
-		/* handle the package data */
-		out = kfifo_out(&dev->emd_data_fifo[idx].mipi_kfifo,
-				fifo_data, packet_len);
-		if (!out)
-			break;
-
-		i += packet_len;
-		playload_len += packet_len;
-		fifo_data += packet_len;
-
-		v4l2_dbg(1, rkisp_debug, &dev->v4l2_dev,
-			 "packet_len: 0x%x, ph: 0x%x\n",
-			 packet_len, ph);
-	}
-
-	pbuf->meas_type |= CIFISP_STAT_EMB_DATA;
-
-	v4l2_dbg(1, rkisp_debug, &dev->v4l2_dev,
-		 "playload_len: %d, pbuf->frame_id %d\n",
-		 playload_len, pbuf->frame_id);
-}
-
-static struct rkisp_stats_ops rkisp_v10_stats_ops = {
-	.get_awb_meas = rkisp_stats_get_awb_meas_v10,
-	.get_aec_meas = rkisp_stats_get_aec_meas_v10,
-	.get_afc_meas = rkisp_stats_get_afc_meas,
-	.get_hst_meas = rkisp_stats_get_hst_meas_v10,
-	.get_bls_meas = rkisp_stats_get_bls_meas,
-	.get_emb_data = rkisp_stats_get_emb_data,
-};
-
-static struct rkisp_stats_ops rkisp_v12_stats_ops = {
-	.get_awb_meas = rkisp_stats_get_awb_meas_v12,
-	.get_aec_meas = rkisp_stats_get_aec_meas_v12,
-	.get_afc_meas = rkisp_stats_get_afc_meas,
-	.get_hst_meas = rkisp_stats_get_hst_meas_v12,
-	.get_bls_meas = rkisp_stats_get_bls_meas,
-};
-
-static struct rkisp_stats_config rkisp_v10_stats_config = {
-	.ae_mean_max = 25,
-	.hist_bin_n_max = 16,
-};
-
-static struct rkisp_stats_config rkisp_v12_stats_config = {
-	.ae_mean_max = 81,
-	.hist_bin_n_max = 32,
-};
-
-static void
-rkisp_stats_send_measurement(struct rkisp_isp_stats_vdev *stats_vdev,
-			      struct rkisp_isp_readout_work *meas_work)
-{
-	unsigned int cur_frame_id = -1;
-	struct rkisp1_stat_buffer *cur_stat_buf;
-	struct rkisp_buffer *cur_buf = NULL;
-	struct rkisp_stats_ops *ops = stats_vdev->ops;
-
-	cur_frame_id = atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
-	if (cur_frame_id != meas_work->frame_id) {
-		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
-			  "Measurement late(%d, %d)\n",
-			  cur_frame_id, meas_work->frame_id);
-		cur_frame_id = meas_work->frame_id;
-	}
-
-	spin_lock(&stats_vdev->rd_lock);
-	/* get one empty buffer */
-	if (!list_empty(&stats_vdev->stat)) {
-		cur_buf = list_first_entry(&stats_vdev->stat,
-					   struct rkisp_buffer, queue);
-		list_del(&cur_buf->queue);
-	}
-	spin_unlock(&stats_vdev->rd_lock);
-
-	if (!cur_buf)
-		return;
-
-	cur_stat_buf =
-		(struct rkisp1_stat_buffer *)(cur_buf->vaddr[0]);
-	memset(cur_stat_buf, 0, sizeof(*cur_stat_buf));
-	cur_stat_buf->frame_id = cur_frame_id;
-	if (meas_work->isp_ris & CIF_ISP_AWB_DONE) {
-		ops->get_awb_meas(stats_vdev, cur_stat_buf);
-		cur_stat_buf->meas_type |= CIFISP_STAT_AWB;
-	}
-
-	if (meas_work->isp_ris & CIF_ISP_AFM_FIN) {
-		ops->get_afc_meas(stats_vdev, cur_stat_buf);
-		cur_stat_buf->meas_type |= CIFISP_STAT_AFM_FIN;
-	}
-
-	if (meas_work->isp_ris & CIF_ISP_EXP_END) {
-		ops->get_aec_meas(stats_vdev, cur_stat_buf);
-		ops->get_bls_meas(stats_vdev, cur_stat_buf);
-		cur_stat_buf->meas_type |= CIFISP_STAT_AUTOEXP;
-	}
-
-	if (meas_work->isp_ris & CIF_ISP_HIST_MEASURE_RDY) {
-		ops->get_hst_meas(stats_vdev, cur_stat_buf);
-		cur_stat_buf->meas_type |= CIFISP_STAT_HIST;
-	}
-
-	if ((meas_work->isp_ris & CIF_ISP_FRAME) &&
-		ops->get_emb_data)
-		ops->get_emb_data(stats_vdev, cur_stat_buf);
-
-	vb2_set_plane_payload(&cur_buf->vb.vb2_buf, 0,
-			      sizeof(struct rkisp1_stat_buffer));
-	cur_buf->vb.sequence = cur_frame_id;
-	cur_buf->vb.vb2_buf.timestamp = meas_work->timestamp;
-	vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
-}
-
 static void rkisp_stats_readout_task(unsigned long data)
 {
 	unsigned int out = 0;
@@ -522,73 +202,14 @@ static void rkisp_stats_readout_task(unsigned long data)
 			break;
 
 		if (work.readout == RKISP_ISP_READOUT_MEAS)
-			rkisp_stats_send_measurement(vdev, &work);
+			vdev->ops->send_meas(vdev, &work);
 	}
 }
 
-int rkisp_stats_isr(struct rkisp_isp_stats_vdev *stats_vdev, u32 isp_ris)
+void rkisp_stats_isr(struct rkisp_isp_stats_vdev *stats_vdev,
+		      u32 isp_ris, u32 isp3a_ris)
 {
-	unsigned int isp_mis_tmp = 0;
-	struct rkisp_isp_readout_work work;
-	unsigned int cur_frame_id =
-		atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
-#ifdef LOG_ISR_EXE_TIME
-	ktime_t in_t = ktime_get();
-#endif
-
-	spin_lock(&stats_vdev->irq_lock);
-
-	isp_mis_tmp = isp_ris & (CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN |
-			CIF_ISP_EXP_END | CIF_ISP_HIST_MEASURE_RDY);
-	if (isp_mis_tmp) {
-		writel(isp_mis_tmp,
-			stats_vdev->dev->base_addr + CIF_ISP_ICR);
-
-		isp_mis_tmp &= readl(stats_vdev->dev->base_addr + CIF_ISP_MIS);
-		if (isp_mis_tmp)
-			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
-				 "isp icr 3A info err: 0x%x 0x%x\n",
-				 isp_mis_tmp, isp_ris);
-	}
-
-	if (!stats_vdev->streamon)
-		goto unlock;
-
-	if (isp_ris & (CIF_ISP_FRAME | CIF_ISP_AWB_DONE |
-		CIF_ISP_AFM_FIN | CIF_ISP_EXP_END |
-		CIF_ISP_HIST_MEASURE_RDY)) {
-		work.readout = RKISP_ISP_READOUT_MEAS;
-		work.frame_id = cur_frame_id;
-		work.isp_ris = isp_ris;
-		work.timestamp = ktime_get_ns();
-		if (!kfifo_is_full(&stats_vdev->rd_kfifo))
-			kfifo_in(&stats_vdev->rd_kfifo,
-				 &work, sizeof(work));
-		else
-			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
-				 "stats kfifo is full\n");
-
-		tasklet_schedule(&stats_vdev->rd_tasklet);
-	}
-
-#ifdef LOG_ISR_EXE_TIME
-	if (isp_ris & (CIF_ISP_EXP_END | CIF_ISP_AWB_DONE |
-		       CIF_ISP_FRAME | CIF_ISP_HIST_MEASURE_RDY)) {
-		unsigned int diff_us =
-		    ktime_to_us(ktime_sub(ktime_get(), in_t));
-
-		if (diff_us > g_longest_isr_time)
-			g_longest_isr_time = diff_us;
-
-		v4l2_info(stats_vdev->vnode.vdev.v4l2_dev,
-			  "isp_isr time %d %d\n", diff_us, g_longest_isr_time);
-	}
-#endif
-
-unlock:
-	spin_unlock(&stats_vdev->irq_lock);
-
-	return 0;
+	stats_vdev->ops->isr_hdl(stats_vdev, isp_ris, isp3a_ris);
 }
 
 static void rkisp_init_stats_vdev(struct rkisp_isp_stats_vdev *stats_vdev)
@@ -598,19 +219,15 @@ static void rkisp_init_stats_vdev(struct rkisp_isp_stats_vdev *stats_vdev)
 	stats_vdev->vdev_fmt.fmt.meta.buffersize =
 		sizeof(struct rkisp1_stat_buffer);
 
-	if (stats_vdev->dev->isp_ver == ISP_V12 ||
-	    stats_vdev->dev->isp_ver == ISP_V13) {
-		stats_vdev->ops = &rkisp_v12_stats_ops;
-		stats_vdev->config = &rkisp_v12_stats_config;
-	} else {
-		stats_vdev->ops = &rkisp_v10_stats_ops;
-		stats_vdev->config = &rkisp_v10_stats_config;
-	}
+	if (stats_vdev->dev->isp_ver <= ISP_V13)
+		rkisp_init_stats_vdev_v1x(stats_vdev);
+	else
+		rkisp_init_stats_vdev_v2x(stats_vdev);
 }
 
 int rkisp_register_stats_vdev(struct rkisp_isp_stats_vdev *stats_vdev,
-			       struct v4l2_device *v4l2_dev,
-			       struct rkisp_device *dev)
+			      struct v4l2_device *v4l2_dev,
+			      struct rkisp_device *dev)
 {
 	int ret;
 	struct rkisp_vdev_node *node = &stats_vdev->vnode;
diff --git a/drivers/media/platform/rockchip/isp/isp_stats.h b/drivers/media/platform/rockchip/isp/isp_stats.h
index d9ae23fd4d8e..069189a82ace 100644
--- a/drivers/media/platform/rockchip/isp/isp_stats.h
+++ b/drivers/media/platform/rockchip/isp/isp_stats.h
@@ -1,36 +1,5 @@
-/*
- * Rockchip isp1 driver
- *
- * Copyright (C) 2017 Rockchip Electronics Co., Ltd.
- *
- * This software is available to you under a choice of one of two
- * licenses.  You may choose to be licensed under the terms of the GNU
- * General Public License (GPL) Version 2, available from the file
- * COPYING in the main directory of this source tree, or the
- * OpenIB.org BSD license below:
- *
- *     Redistribution and use in source and binary forms, with or
- *     without modification, are permitted provided that the following
- *     conditions are met:
- *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
- *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
 
 #ifndef _RKISP_ISP_STATS_H
 #define _RKISP_ISP_STATS_H
@@ -53,28 +22,16 @@ enum rkisp_isp_readout_cmd {
 struct rkisp_isp_readout_work {
 	unsigned int frame_id;
 	unsigned int isp_ris;
+	unsigned int isp3a_ris;
 	enum rkisp_isp_readout_cmd readout;
 	unsigned long long timestamp;
 };
 
-struct rkisp_stats_ops {
-	void (*get_awb_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-	void (*get_aec_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-	void (*get_afc_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-	void (*get_hst_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-	void (*get_bls_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-	void (*get_emb_data)(struct rkisp_isp_stats_vdev *stats_vdev,
-			     struct rkisp1_stat_buffer *pbuf);
-};
-
-struct rkisp_stats_config {
-	const int ae_mean_max;
-	const int hist_bin_n_max;
+struct rkisp_isp_stats_ops {
+	void (*isr_hdl)(struct rkisp_isp_stats_vdev *params_vdev,
+			u32 isp_mis, u32 isp3a_ris);
+	void (*send_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			  struct rkisp_isp_readout_work *meas_work);
 };
 
 /*
@@ -97,11 +54,13 @@ struct rkisp_isp_stats_vdev {
 	struct kfifo rd_kfifo;
 	struct tasklet_struct rd_tasklet;
 
-	struct rkisp_stats_ops *ops;
-	struct rkisp_stats_config *config;
+	struct rkisp_isp_stats_ops *ops;
+	void *priv_ops;
+	void *priv_cfg;
 };
 
-int rkisp_stats_isr(struct rkisp_isp_stats_vdev *stats_vdev, u32 isp_ris);
+void rkisp_stats_isr(struct rkisp_isp_stats_vdev *stats_vdev,
+		     u32 isp_ris, u32 isp3a_ris);
 
 int rkisp_register_stats_vdev(struct rkisp_isp_stats_vdev *stats_vdev,
 			       struct v4l2_device *v4l2_dev,
diff --git a/drivers/media/platform/rockchip/isp/isp_stats_v1x.c b/drivers/media/platform/rockchip/isp/isp_stats_v1x.c
new file mode 100644
index 000000000000..6e04121b62f8
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_stats_v1x.c
@@ -0,0 +1,409 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#include <linux/kfifo.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-vmalloc.h>	/* for ISP statistics */
+#include "dev.h"
+#include "regs.h"
+#include "isp_stats.h"
+#include "isp_stats_v1x.h"
+
+static void
+rkisp1_stats_get_awb_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp1_stat_buffer *pbuf)
+{
+	/* Protect against concurrent access from ISR? */
+	u32 reg_val;
+
+	pbuf->meas_type |= CIFISP_STAT_AWB;
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_WHITE_CNT_V10);
+	pbuf->params.awb.awb_mean[0].cnt = CIF_ISP_AWB_GET_PIXEL_CNT(reg_val);
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_MEAN_V10);
+
+	pbuf->params.awb.awb_mean[0].mean_cr_or_r =
+		CIF_ISP_AWB_GET_MEAN_CR_R(reg_val);
+	pbuf->params.awb.awb_mean[0].mean_cb_or_b =
+		CIF_ISP_AWB_GET_MEAN_CB_B(reg_val);
+	pbuf->params.awb.awb_mean[0].mean_y_or_g =
+		CIF_ISP_AWB_GET_MEAN_Y_G(reg_val);
+}
+
+static void
+rkisp1_stats_get_awb_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp1_stat_buffer *pbuf)
+{
+	/* Protect against concurrent access from ISR? */
+	u32 reg_val;
+
+	pbuf->meas_type |= CIFISP_STAT_AWB;
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_WHITE_CNT_V12);
+	pbuf->params.awb.awb_mean[0].cnt = CIF_ISP_AWB_GET_PIXEL_CNT(reg_val);
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_MEAN_V12);
+
+	pbuf->params.awb.awb_mean[0].mean_cr_or_r =
+		CIF_ISP_AWB_GET_MEAN_CR_R(reg_val);
+	pbuf->params.awb.awb_mean[0].mean_cb_or_b =
+		CIF_ISP_AWB_GET_MEAN_CB_B(reg_val);
+	pbuf->params.awb.awb_mean[0].mean_y_or_g =
+		CIF_ISP_AWB_GET_MEAN_Y_G(reg_val);
+}
+
+static void
+rkisp1_stats_get_aec_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp1_stat_buffer *pbuf)
+{
+	int i;
+	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_EXP_MEAN_00_V10;
+	struct rkisp_stats_v1x_config *config =
+		(struct rkisp_stats_v1x_config *)stats_vdev->priv_cfg;
+
+	pbuf->meas_type |= CIFISP_STAT_AUTOEXP;
+	for (i = 0; i < config->ae_mean_max; i++)
+		pbuf->params.ae.exp_mean[i] = (u8)readl(addr + i * 4);
+}
+
+static void
+rkisp1_stats_get_aec_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp1_stat_buffer *pbuf)
+{
+	int i;
+	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_EXP_MEAN_V12;
+	struct rkisp_stats_v1x_config *config =
+		(struct rkisp_stats_v1x_config *)stats_vdev->priv_cfg;
+	u32 value;
+
+	pbuf->meas_type |= CIFISP_STAT_AUTOEXP;
+	for (i = 0; i < config->ae_mean_max / 4; i++) {
+		value = readl(addr + i * 4);
+		pbuf->params.ae.exp_mean[4 * i + 0] = CIF_ISP_EXP_GET_MEAN_xy0_V12(value);
+		pbuf->params.ae.exp_mean[4 * i + 1] = CIF_ISP_EXP_GET_MEAN_xy1_V12(value);
+		pbuf->params.ae.exp_mean[4 * i + 2] = CIF_ISP_EXP_GET_MEAN_xy2_V12(value);
+		pbuf->params.ae.exp_mean[4 * i + 3] = CIF_ISP_EXP_GET_MEAN_xy3_V12(value);
+	}
+	value = readl(addr + i * 4);
+	pbuf->params.ae.exp_mean[4 * i + 0] = CIF_ISP_EXP_GET_MEAN_xy0_V12(value);
+}
+
+static void rkisp1_stats_get_afc_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				      struct rkisp1_stat_buffer *pbuf)
+{
+	void __iomem *base_addr;
+	struct cifisp_af_stat *af;
+
+	pbuf->meas_type |= CIFISP_STAT_AFM_FIN;
+
+	af = &pbuf->params.af;
+	base_addr = stats_vdev->dev->base_addr;
+	af->window[0].sum = readl(base_addr + CIF_ISP_AFM_SUM_A);
+	af->window[0].lum = readl(base_addr + CIF_ISP_AFM_LUM_A);
+	af->window[1].sum = readl(base_addr + CIF_ISP_AFM_SUM_B);
+	af->window[1].lum = readl(base_addr + CIF_ISP_AFM_LUM_B);
+	af->window[2].sum = readl(base_addr + CIF_ISP_AFM_SUM_C);
+	af->window[2].lum = readl(base_addr + CIF_ISP_AFM_LUM_C);
+}
+
+static void
+rkisp1_stats_get_hst_meas_v10(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp1_stat_buffer *pbuf)
+{
+	int i;
+	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_HIST_BIN_0_V10;
+	struct rkisp_stats_v1x_config *config =
+		(struct rkisp_stats_v1x_config *)stats_vdev->priv_cfg;
+
+	pbuf->meas_type |= CIFISP_STAT_HIST;
+	for (i = 0; i < config->hist_bin_n_max; i++)
+		pbuf->params.hist.hist_bins[i] = readl(addr + (i * 4));
+}
+
+static void
+rkisp1_stats_get_hst_meas_v12(struct rkisp_isp_stats_vdev *stats_vdev,
+					  struct rkisp1_stat_buffer *pbuf)
+{
+	int i;
+	void __iomem *addr = stats_vdev->dev->base_addr + CIF_ISP_HIST_BIN_V12;
+	struct rkisp_stats_v1x_config *config =
+		(struct rkisp_stats_v1x_config *)stats_vdev->priv_cfg;
+	u32 value;
+
+	pbuf->meas_type |= CIFISP_STAT_HIST;
+	for (i = 0; i < config->hist_bin_n_max / 2; i++) {
+		value = readl(addr + (i * 4));
+		pbuf->params.hist.hist_bins[2 * i] = CIF_ISP_HIST_GET_BIN0_V12(value);
+		pbuf->params.hist.hist_bins[2 * i + 1] = CIF_ISP_HIST_GET_BIN1_V12(value);
+	}
+}
+
+static void rkisp1_stats_get_bls_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				      struct rkisp1_stat_buffer *pbuf)
+{
+	struct rkisp_device *dev = stats_vdev->dev;
+	const struct ispsd_in_fmt *in_fmt =
+			rkisp_get_ispsd_in_fmt(&dev->isp_sdev);
+	void __iomem *base = stats_vdev->dev->base_addr;
+	struct cifisp_bls_meas_val *bls_val;
+
+	bls_val = &pbuf->params.ae.bls_val;
+	if (in_fmt->bayer_pat == RAW_BGGR) {
+		bls_val->meas_b = readl(base + CIF_ISP_BLS_A_MEASURED);
+		bls_val->meas_gb = readl(base + CIF_ISP_BLS_B_MEASURED);
+		bls_val->meas_gr = readl(base + CIF_ISP_BLS_C_MEASURED);
+		bls_val->meas_r = readl(base + CIF_ISP_BLS_D_MEASURED);
+	} else if (in_fmt->bayer_pat == RAW_GBRG) {
+		bls_val->meas_gb = readl(base + CIF_ISP_BLS_A_MEASURED);
+		bls_val->meas_b = readl(base + CIF_ISP_BLS_B_MEASURED);
+		bls_val->meas_r = readl(base + CIF_ISP_BLS_C_MEASURED);
+		bls_val->meas_gr = readl(base + CIF_ISP_BLS_D_MEASURED);
+	} else if (in_fmt->bayer_pat == RAW_GRBG) {
+		bls_val->meas_gr = readl(base + CIF_ISP_BLS_A_MEASURED);
+		bls_val->meas_r = readl(base + CIF_ISP_BLS_B_MEASURED);
+		bls_val->meas_b = readl(base + CIF_ISP_BLS_C_MEASURED);
+		bls_val->meas_gb = readl(base + CIF_ISP_BLS_D_MEASURED);
+	} else if (in_fmt->bayer_pat == RAW_RGGB) {
+		bls_val->meas_r = readl(base + CIF_ISP_BLS_A_MEASURED);
+		bls_val->meas_gr = readl(base + CIF_ISP_BLS_B_MEASURED);
+		bls_val->meas_gb = readl(base + CIF_ISP_BLS_C_MEASURED);
+		bls_val->meas_b = readl(base + CIF_ISP_BLS_D_MEASURED);
+	}
+}
+
+static void rkisp1_stats_get_emb_data(struct rkisp_isp_stats_vdev *stats_vdev,
+				      struct rkisp1_stat_buffer *pbuf)
+{
+	unsigned int i;
+	struct rkisp_device *dev = stats_vdev->dev;
+	unsigned int ph = 0, out = 0, packet_len = 0, playload_len = 0;
+	unsigned int mipi_kfifo_len;
+	unsigned int idx;
+	unsigned char *fifo_data;
+
+	idx = RKISP_EMDDATA_FIFO_MAX;
+	for (i = 0; i < RKISP_EMDDATA_FIFO_MAX; i++) {
+		if (dev->emd_data_fifo[i].frame_id == pbuf->frame_id) {
+			idx = i;
+			break;
+		}
+	}
+
+	if (idx == RKISP_EMDDATA_FIFO_MAX)
+		return;
+
+	if (kfifo_is_empty(&dev->emd_data_fifo[idx].mipi_kfifo))
+		return;
+
+	mipi_kfifo_len = dev->emd_data_fifo[idx].data_len;
+	fifo_data = &pbuf->params.emd.data[0];
+	for (i = 0; i < mipi_kfifo_len;) {
+		/* handle the package header */
+		out = kfifo_out(&dev->emd_data_fifo[idx].mipi_kfifo,
+				&ph, sizeof(ph));
+		if (!out)
+			break;
+		packet_len = (ph >> 8) & 0xfff;
+		i += sizeof(ph);
+
+		/* handle the package data */
+		out = kfifo_out(&dev->emd_data_fifo[idx].mipi_kfifo,
+				fifo_data, packet_len);
+		if (!out)
+			break;
+
+		i += packet_len;
+		playload_len += packet_len;
+		fifo_data += packet_len;
+
+		v4l2_dbg(1, rkisp_debug, &dev->v4l2_dev,
+			 "packet_len: 0x%x, ph: 0x%x\n",
+			 packet_len, ph);
+	}
+
+	pbuf->meas_type |= CIFISP_STAT_EMB_DATA;
+
+	v4l2_dbg(1, rkisp_debug, &dev->v4l2_dev,
+		 "playload_len: %d, pbuf->frame_id %d\n",
+		 playload_len, pbuf->frame_id);
+}
+
+static struct rkisp_stats_v1x_ops rkisp1_v10_stats_ops = {
+	.get_awb_meas = rkisp1_stats_get_awb_meas_v10,
+	.get_aec_meas = rkisp1_stats_get_aec_meas_v10,
+	.get_afc_meas = rkisp1_stats_get_afc_meas,
+	.get_hst_meas = rkisp1_stats_get_hst_meas_v10,
+	.get_bls_meas = rkisp1_stats_get_bls_meas,
+	.get_emb_data = rkisp1_stats_get_emb_data,
+};
+
+static struct rkisp_stats_v1x_ops rkisp1_v12_stats_ops = {
+	.get_awb_meas = rkisp1_stats_get_awb_meas_v12,
+	.get_aec_meas = rkisp1_stats_get_aec_meas_v12,
+	.get_afc_meas = rkisp1_stats_get_afc_meas,
+	.get_hst_meas = rkisp1_stats_get_hst_meas_v12,
+	.get_bls_meas = rkisp1_stats_get_bls_meas,
+};
+
+static struct rkisp_stats_v1x_config rkisp1_v10_stats_config = {
+	.ae_mean_max = 25,
+	.hist_bin_n_max = 16,
+};
+
+static struct rkisp_stats_v1x_config rkisp1_v12_stats_config = {
+	.ae_mean_max = 81,
+	.hist_bin_n_max = 32,
+};
+
+static void
+rkisp1_stats_send_meas_v1x(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct rkisp_isp_readout_work *meas_work)
+{
+	unsigned int cur_frame_id = -1;
+	struct rkisp1_stat_buffer *cur_stat_buf;
+	struct rkisp_buffer *cur_buf = NULL;
+	struct rkisp_stats_v1x_ops *ops =
+		(struct rkisp_stats_v1x_ops *)stats_vdev->priv_ops;
+
+	cur_frame_id = atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	if (cur_frame_id != meas_work->frame_id) {
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "Measurement late(%d, %d)\n",
+			  cur_frame_id, meas_work->frame_id);
+		cur_frame_id = meas_work->frame_id;
+	}
+
+	spin_lock(&stats_vdev->rd_lock);
+	/* get one empty buffer */
+	if (!list_empty(&stats_vdev->stat)) {
+		cur_buf = list_first_entry(&stats_vdev->stat,
+					   struct rkisp_buffer, queue);
+		list_del(&cur_buf->queue);
+	}
+	spin_unlock(&stats_vdev->rd_lock);
+
+	if (!cur_buf)
+		return;
+
+	cur_stat_buf =
+		(struct rkisp1_stat_buffer *)(cur_buf->vaddr[0]);
+	memset(cur_stat_buf, 0, sizeof(*cur_stat_buf));
+	cur_stat_buf->frame_id = cur_frame_id;
+	if (meas_work->isp_ris & CIF_ISP_AWB_DONE) {
+		ops->get_awb_meas(stats_vdev, cur_stat_buf);
+		cur_stat_buf->meas_type |= CIFISP_STAT_AWB;
+	}
+
+	if (meas_work->isp_ris & CIF_ISP_AFM_FIN) {
+		ops->get_afc_meas(stats_vdev, cur_stat_buf);
+		cur_stat_buf->meas_type |= CIFISP_STAT_AFM_FIN;
+	}
+
+	if (meas_work->isp_ris & CIF_ISP_EXP_END) {
+		ops->get_aec_meas(stats_vdev, cur_stat_buf);
+		ops->get_bls_meas(stats_vdev, cur_stat_buf);
+		cur_stat_buf->meas_type |= CIFISP_STAT_AUTOEXP;
+	}
+
+	if (meas_work->isp_ris & CIF_ISP_HIST_MEASURE_RDY) {
+		ops->get_hst_meas(stats_vdev, cur_stat_buf);
+		cur_stat_buf->meas_type |= CIFISP_STAT_HIST;
+	}
+
+	if ((meas_work->isp_ris & CIF_ISP_FRAME) &&
+		ops->get_emb_data)
+		ops->get_emb_data(stats_vdev, cur_stat_buf);
+
+	vb2_set_plane_payload(&cur_buf->vb.vb2_buf, 0,
+			      sizeof(struct rkisp1_stat_buffer));
+	cur_buf->vb.sequence = cur_frame_id;
+	cur_buf->vb.vb2_buf.timestamp = meas_work->timestamp;
+	vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
+}
+
+static void
+rkisp1_stats_isr_v1x(struct rkisp_isp_stats_vdev *stats_vdev,
+		     u32 isp_ris, u32 isp3a_ris)
+{
+	unsigned int isp_mis_tmp = 0;
+	struct rkisp_isp_readout_work work;
+	unsigned int cur_frame_id =
+		atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+#ifdef LOG_ISR_EXE_TIME
+	ktime_t in_t = ktime_get();
+#endif
+
+	spin_lock(&stats_vdev->irq_lock);
+
+	isp_mis_tmp = isp_ris & (CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN |
+			CIF_ISP_EXP_END | CIF_ISP_HIST_MEASURE_RDY);
+	if (isp_mis_tmp) {
+		writel(isp_mis_tmp,
+			stats_vdev->dev->base_addr + CIF_ISP_ICR);
+
+		isp_mis_tmp &= readl(stats_vdev->dev->base_addr + CIF_ISP_MIS);
+		if (isp_mis_tmp)
+			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
+				 "isp icr 3A info err: 0x%x 0x%x\n",
+				 isp_mis_tmp, isp_ris);
+	}
+
+	if (!stats_vdev->streamon)
+		goto unlock;
+
+	if (isp_ris & (CIF_ISP_FRAME | CIF_ISP_AWB_DONE |
+		CIF_ISP_AFM_FIN | CIF_ISP_EXP_END |
+		CIF_ISP_HIST_MEASURE_RDY)) {
+		work.readout = RKISP_ISP_READOUT_MEAS;
+		work.frame_id = cur_frame_id;
+		work.isp_ris = isp_ris;
+		work.timestamp = ktime_get_ns();
+		if (!kfifo_is_full(&stats_vdev->rd_kfifo))
+			kfifo_in(&stats_vdev->rd_kfifo,
+				 &work, sizeof(work));
+		else
+			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
+				 "stats kfifo is full\n");
+
+		tasklet_schedule(&stats_vdev->rd_tasklet);
+	}
+
+#ifdef LOG_ISR_EXE_TIME
+	if (isp_ris & (CIF_ISP_EXP_END | CIF_ISP_AWB_DONE |
+		       CIF_ISP_FRAME | CIF_ISP_HIST_MEASURE_RDY)) {
+		unsigned int diff_us =
+		    ktime_to_us(ktime_sub(ktime_get(), in_t));
+
+		if (diff_us > g_longest_isr_time)
+			g_longest_isr_time = diff_us;
+
+		v4l2_info(stats_vdev->vnode.vdev.v4l2_dev,
+			  "isp_isr time %d %d\n", diff_us, g_longest_isr_time);
+	}
+#endif
+
+unlock:
+	spin_unlock(&stats_vdev->irq_lock);
+}
+
+static struct rkisp_isp_stats_ops rkisp_isp_stats_ops_tbl = {
+	.isr_hdl = rkisp1_stats_isr_v1x,
+	.send_meas = rkisp1_stats_send_meas_v1x,
+};
+
+void rkisp_init_stats_vdev_v1x(struct rkisp_isp_stats_vdev *stats_vdev)
+{
+	stats_vdev->vdev_fmt.fmt.meta.dataformat =
+		V4L2_META_FMT_RK_ISP1_STAT_3A;
+	stats_vdev->vdev_fmt.fmt.meta.buffersize =
+		sizeof(struct rkisp1_stat_buffer);
+
+	stats_vdev->ops = &rkisp_isp_stats_ops_tbl;
+	if (stats_vdev->dev->isp_ver == ISP_V12 ||
+	    stats_vdev->dev->isp_ver == ISP_V13) {
+		stats_vdev->priv_ops = &rkisp1_v12_stats_ops;
+		stats_vdev->priv_cfg = &rkisp1_v12_stats_config;
+	} else {
+		stats_vdev->priv_ops = &rkisp1_v10_stats_ops;
+		stats_vdev->priv_cfg = &rkisp1_v10_stats_config;
+	}
+}
diff --git a/drivers/media/platform/rockchip/isp/isp_stats_v1x.h b/drivers/media/platform/rockchip/isp/isp_stats_v1x.h
new file mode 100644
index 000000000000..841346d3c8c1
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_stats_v1x.h
@@ -0,0 +1,36 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#ifndef _RKISP_ISP_STATS_V1X_H
+#define _RKISP_ISP_STATS_V1X_H
+
+#include <linux/rkisp1-config.h>
+#include <linux/interrupt.h>
+#include <linux/kfifo.h>
+#include "common.h"
+
+struct rkisp_isp_stats_vdev;
+
+struct rkisp_stats_v1x_ops {
+	void (*get_awb_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+	void (*get_aec_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+	void (*get_afc_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+	void (*get_hst_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+	void (*get_bls_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+	void (*get_emb_data)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp1_stat_buffer *pbuf);
+};
+
+struct rkisp_stats_v1x_config {
+	const int ae_mean_max;
+	const int hist_bin_n_max;
+};
+
+void rkisp_init_stats_vdev_v1x(struct rkisp_isp_stats_vdev *stats_vdev);
+
+#endif /* _RKISP_ISP_STATS_V1X_H */
diff --git a/drivers/media/platform/rockchip/isp/isp_stats_v2x.c b/drivers/media/platform/rockchip/isp/isp_stats_v2x.c
new file mode 100644
index 000000000000..ccb6060f7715
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_stats_v2x.c
@@ -0,0 +1,737 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#include <linux/kfifo.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-vmalloc.h>	/* for ISP statistics */
+#include "dev.h"
+#include "regs.h"
+#include "common.h"
+#include "isp_stats.h"
+#include "isp_stats_v2x.h"
+
+#define ISP2X_SIAWB_GET_MEAN_CR_R(x)	((x) & 0xFF)
+#define ISP2X_SIAWB_GET_MEAN_CB_B(x)	(((x) >> 8) & 0xFF)
+#define ISP2X_SIAWB_GET_MEAN_Y_G(x)	(((x) >> 16) & 0xFF)
+#define ISP2X_SIAWB_GET_PIXEL_CNT(x)	((x) & 0x3FFFFFF)
+
+#define ISP2X_HIST_GET_BIN0(x)		((x) & 0xFFFF)
+#define ISP2X_HIST_GET_BIN1(x)		(((x) >> 16) & 0xFFFF)
+
+#define ISP2X_3A_MEAS_DONE		BIT(31)
+
+#define ISP2X_EXP_GET_MEAN_xy0(x)	((x) & 0xFF)
+#define ISP2X_EXP_GET_MEAN_xy1(x)	(((x) >> 8) & 0xFF)
+#define ISP2X_EXP_GET_MEAN_xy2(x)	(((x) >> 16) & 0xFF)
+#define ISP2X_EXP_GET_MEAN_xy3(x)	(((x) >> 24) & 0xFF)
+
+#define ISP2X_RAWAEBIG_GET_MEAN_G(x)	((x) & 0xFFF)
+#define ISP2X_RAWAEBIG_GET_MEAN_B(x)	(((x) >> 12) & 0x3FF)
+#define ISP2X_RAWAEBIG_GET_MEAN_R(x)	(((x) >> 22) & 0x3FF)
+
+#define ISP2X_RAWAF_INT_LINE0_EN	BIT(27)
+
+static void
+rkisp_stats_get_siawb_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			   struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	u32 reg_val;
+
+	if (!pbuf)
+		return;
+
+	pbuf->meas_type |= ISP2X_STAT_SIAWB;
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_WHITE_CNT_V10);
+	pbuf->params.siawb.awb_mean[0].cnt = ISP2X_SIAWB_GET_PIXEL_CNT(reg_val);
+	reg_val = readl(stats_vdev->dev->base_addr + CIF_ISP_AWB_MEAN_V10);
+
+	pbuf->params.siawb.awb_mean[0].mean_cr_or_r =
+		ISP2X_SIAWB_GET_MEAN_CR_R(reg_val);
+	pbuf->params.siawb.awb_mean[0].mean_cb_or_b =
+		ISP2X_SIAWB_GET_MEAN_CB_B(reg_val);
+	pbuf->params.siawb.awb_mean[0].mean_y_or_g =
+		ISP2X_SIAWB_GET_MEAN_Y_G(reg_val);
+}
+
+static void
+rkisp_stats_get_rawawb_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			    struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	void __iomem *base_addr = stats_vdev->dev->base_addr;
+	u64 msb, lsb;
+	u32 value;
+	int i;
+
+	if (!pbuf)
+		goto out;
+
+	pbuf->meas_type |= ISP2X_STAT_RAWAWB;
+
+	for (i = 0; i < ISP2X_RAWAWB_SUM_NUM; i++) {
+		pbuf->params.rawawb.ro_rawawb_sum_r_nor[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_NOR_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_g_nor[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_NOR_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_b_nor[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_NOR_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_wp_num_nor[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NUM_NOR_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_r_big[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_BIG_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_g_big[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_BIG_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_b_big[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_BIG_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_wp_num_big[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NUM_BIG_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_r_sma[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_SMA_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_g_sma[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_SMA_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_sum_b_sma[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_SMA_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_rawawb_wp_num_sma[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NUM_SMA_0 + 0x30 * i);
+	}
+
+	for (i = 0; i < ISP2X_RAWAWB_MULWD_NUM; i++) {
+		pbuf->params.rawawb.ro_sum_r_nor_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_NOR_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_g_nor_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_NOR_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_b_nor_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_NOR_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_wp_nm_nor_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NM_NOR_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_r_big_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_BIG_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_g_big_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_BIG_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_b_big_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_BIG_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_wp_nm_big_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NM_BIG_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_r_sma_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_SMA_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_g_sma_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_SMA_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_sum_b_sma_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_SMA_MULTIWINDOW_0 + 0x30 * i);
+		pbuf->params.rawawb.ro_wp_nm_sma_multiwindow[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NM_SMA_MULTIWINDOW_0 + 0x30 * i);
+	}
+
+	for (i = 0; i < ISP2X_RAWAWB_SUM_NUM; i++) {
+		pbuf->params.rawawb.ro_sum_r_exc[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_R_EXC_0 + 0x10 * i);
+		pbuf->params.rawawb.ro_sum_g_exc[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_G_EXC_0 + 0x10 * i);
+		pbuf->params.rawawb.ro_sum_b_exc[i] =
+			readl(base_addr + ISP_RAWAWB_SUM_B_EXC_0 + 0x10 * i);
+		pbuf->params.rawawb.ro_wp_nm_exc[i] =
+			readl(base_addr + ISP_RAWAWB_WP_NM_EXC_0 + 0x10 * i);
+	}
+
+	for (i = 0; i < ISP2X_RAWAWB_RAMDATA_NUM; i++) {
+		lsb = readl(base_addr + ISP_RAWAWB_RAM_DATA);
+		msb = readl(base_addr + ISP_RAWAWB_RAM_DATA);
+		pbuf->params.rawawb.ramdata[i].b = lsb & 0x3FFFF;
+		pbuf->params.rawawb.ramdata[i].g = ((lsb & 0xFFFC0000) >> 18) | (msb & 0xF) << 14;
+		pbuf->params.rawawb.ramdata[i].r = (msb & 0x3FFFF0) >> 4;
+		pbuf->params.rawawb.ramdata[i].wp = (msb & 0xE0000000) >> 29;
+	}
+
+out:
+	value = readl(base_addr + ISP_RAWAWB_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, base_addr + ISP_RAWAWB_CTRL);
+}
+
+static void
+rkisp_stats_get_siaf_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			  struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	void __iomem *base_addr;
+	struct isp2x_siaf_stat *af;
+
+	if (!pbuf)
+		return;
+
+	pbuf->meas_type |= ISP2X_STAT_SIAF;
+
+	af = &pbuf->params.siaf;
+	base_addr = stats_vdev->dev->base_addr;
+	af->win[0].sum = readl(base_addr + ISP_AFM_SUM_A);
+	af->win[0].lum = readl(base_addr + ISP_AFM_LUM_A);
+	af->win[1].sum = readl(base_addr + ISP_AFM_SUM_B);
+	af->win[1].lum = readl(base_addr + ISP_AFM_LUM_B);
+	af->win[2].sum = readl(base_addr + ISP_AFM_SUM_C);
+	af->win[2].lum = readl(base_addr + ISP_AFM_LUM_C);
+}
+
+static void
+rkisp_stats_get_rawaf_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			   struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	void __iomem *base_addr = stats_vdev->dev->base_addr;
+	struct isp2x_rawaf_stat *af;
+	u32 value, read_line;
+	u32 line_num[ISP2X_RAWAF_LINE_NUM + 1];
+	int i;
+
+	if (!pbuf)
+		goto out;
+
+	af = &pbuf->params.rawaf;
+	pbuf->meas_type |= ISP2X_STAT_RAWAF;
+
+	af->afm_sum[0] = readl(base_addr + ISP_RAWAF_SUM_A);
+	af->afm_sum[1] = readl(base_addr + ISP_RAWAF_SUM_B);
+	af->afm_lum[0] = readl(base_addr + ISP_RAWAF_LUM_A);
+	af->afm_lum[1] = readl(base_addr + ISP_RAWAF_LUM_B);
+	af->int_state = readl(base_addr + ISP_RAWAF_INT_STATE);
+
+	memset(line_num, 0, sizeof(line_num));
+	line_num[ISP2X_RAWAF_LINE_NUM] = ISP2X_RAWAF_SUMDATA_ROW;
+	value = readl(base_addr + ISP_RAWAF_INT_LINE);
+	for (i = 0; i < ISP2X_RAWAF_LINE_NUM; i++) {
+		if (value & (ISP2X_RAWAF_INT_LINE0_EN << i)) {
+			line_num[i] = (value >> (4 * i)) & 0xF;
+			line_num[ISP2X_RAWAF_LINE_NUM] -= line_num[i];
+		}
+	}
+
+	read_line = 0;
+	for (i = 0; i < ISP2X_RAWAF_LINE_NUM; i++) {
+		if (af->int_state & (1 << i))
+			read_line += line_num[i];
+	}
+
+	if (!read_line)
+		read_line = line_num[ISP2X_RAWAF_LINE_NUM];
+
+	for (i = 0; i < read_line * ISP2X_RAWAF_SUMDATA_COLUMN; i++)
+		af->ramdata[i] = readl(base_addr + ISP_RAWAF_RAM_DATA);
+
+out:
+	value = readl(base_addr + ISP_RAWAF_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, base_addr + ISP_RAWAF_CTRL);
+}
+
+static void
+rkisp_stats_get_yuvae_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			   struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	void __iomem *addr;
+	u32 value;
+	int i;
+
+	if (!pbuf)
+		goto out;
+
+	pbuf->meas_type |= ISP2X_STAT_YUVAE;
+	addr = stats_vdev->dev->base_addr + ISP_YUVAE_RO_MEAN_BASE_ADDR;
+	for (i = 0; i < ISP2X_YUVAE_MEAN_NUM / 4; i++) {
+		value = readl(addr);
+		pbuf->params.yuvae.mean[4 * i + 0] = ISP2X_EXP_GET_MEAN_xy0(value);
+		pbuf->params.yuvae.mean[4 * i + 1] = ISP2X_EXP_GET_MEAN_xy1(value);
+		pbuf->params.yuvae.mean[4 * i + 2] = ISP2X_EXP_GET_MEAN_xy2(value);
+		pbuf->params.yuvae.mean[4 * i + 3] = ISP2X_EXP_GET_MEAN_xy3(value);
+	}
+	value = readl(addr);
+	pbuf->params.yuvae.mean[4 * i + 0] = ISP2X_EXP_GET_MEAN_xy0(value);
+
+	addr = stats_vdev->dev->base_addr + ISP_YUVAE_WND1_SUMY;
+	for (i = 0; i < ISP2X_YUVAE_SUBWIN_NUM; i++)
+		pbuf->params.yuvae.ro_yuvae_sumy[i] = readl(addr + 4 * i);
+
+out:
+	addr = stats_vdev->dev->base_addr + ISP_YUVAE_CTRL;
+	value = readl(addr);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, addr);
+}
+
+static void
+rkisp_stats_get_sihst_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			   struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	void __iomem *addr;
+	u32 value;
+	int i, j;
+
+	if (!pbuf)
+		return;
+
+	pbuf->meas_type |= ISP2X_STAT_SIHST;
+	addr = stats_vdev->dev->base_addr + ISP_HIST_HIST_BIN;
+	for (i = 0; i < ISP2X_HIST_WIN_NUM; i++) {
+		addr += i * 0x40;
+		for (j = 0; j < ISP2X_HIST_BIN_N_MAX / 2; j++) {
+			value = readl(addr + (j * 4));
+			pbuf->params.sihst.win_stat[i].hist_bins[2 * j] =
+				ISP2X_HIST_GET_BIN0(value);
+			pbuf->params.sihst.win_stat[i].hist_bins[2 * j + 1] =
+				ISP2X_HIST_GET_BIN1(value);
+		}
+	}
+}
+
+static void
+rkisp_stats_get_rawaebig_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			      struct isp2x_rawaebig_stat *ae, u32 blk_no)
+{
+	void __iomem *base_addr;
+	u32 addr, value;
+	int i;
+
+	switch (blk_no) {
+	case 0:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	case 1:
+		addr = RAWAE_BIG2_BASE;
+		break;
+	case 2:
+		addr = RAWAE_BIG3_BASE;
+		break;
+	default:
+		addr = RAWAE_BIG1_BASE;
+		break;
+	}
+
+	base_addr = stats_vdev->dev->base_addr + addr;
+
+	if (!ae)
+		goto out;
+
+	for (i = 0; i < ISP2X_RAWAEBIG_SUBWIN_NUM; i++)
+		ae->sumr[i] = readl(base_addr + RAWAE_BIG_WND1_SUMR + i * 4);
+
+	for (i = 0; i < ISP2X_RAWAEBIG_SUBWIN_NUM; i++)
+		ae->sumg[i] = readl(base_addr + RAWAE_BIG_WND1_SUMG + i * 4);
+
+	for (i = 0; i < ISP2X_RAWAEBIG_SUBWIN_NUM; i++)
+		ae->sumb[i] = readl(base_addr + RAWAE_BIG_WND1_SUMB + i * 4);
+
+	for (i = 0; i < ISP2X_RAWAEBIG_MEAN_NUM; i++) {
+		value = readl(base_addr + RAWAE_BIG_RO_MEAN_BASE_ADDR);
+		ae->data[i].channelg_xy = ISP2X_RAWAEBIG_GET_MEAN_G(value);
+		ae->data[i].channelb_xy = ISP2X_RAWAEBIG_GET_MEAN_B(value);
+		ae->data[i].channelr_xy = ISP2X_RAWAEBIG_GET_MEAN_R(value);
+	}
+
+out:
+	value = readl(base_addr + RAWAE_BIG_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, base_addr + RAWAE_BIG_CTRL);
+}
+
+static void
+rkisp_stats_get_rawhstbig_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			       struct isp2x_rawhistbig_stat *hst, u32 blk_no)
+{
+	void __iomem *base_addr;
+	u32 addr, value;
+	int i;
+
+	switch (blk_no) {
+	case 0:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	case 1:
+		addr = ISP_RAWHIST_BIG2_BASE;
+		break;
+	case 2:
+		addr = ISP_RAWHIST_BIG3_BASE;
+		break;
+	default:
+		addr = ISP_RAWHIST_BIG1_BASE;
+		break;
+	}
+
+	base_addr = stats_vdev->dev->base_addr + addr;
+	if (!hst)
+		goto out;
+
+	for (i = 0; i < ISP2X_HIST_BIN_N_MAX; i++)
+		hst->hist_bin[i] = readl(base_addr + ISP_RAWHIST_BIG_RO_BASE_BIN);
+
+out:
+	value = readl(base_addr + ISP_RAWHIST_BIG_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, base_addr + ISP_RAWHIST_BIG_CTRL);
+}
+
+static void
+rkisp_stats_get_rawaebig1_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			       struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawaebig_meas(stats_vdev, NULL, 0);
+	else
+		rkisp_stats_get_rawaebig_meas(stats_vdev, &pbuf->params.rawaebig1, 0);
+}
+
+static void
+rkisp_stats_get_rawhstbig1_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, NULL, 0);
+	else
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, &pbuf->params.rawhistbig1, 0);
+}
+
+static void
+rkisp_stats_get_rawaebig2_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			       struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawaebig_meas(stats_vdev, NULL, 1);
+	else
+		rkisp_stats_get_rawaebig_meas(stats_vdev, &pbuf->params.rawaebig2, 1);
+}
+
+static void
+rkisp_stats_get_rawhstbig2_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, NULL, 1);
+	else
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, &pbuf->params.rawhistbig2, 1);
+}
+
+static void
+rkisp_stats_get_rawaebig3_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			       struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawaebig_meas(stats_vdev, NULL, 2);
+	else
+		rkisp_stats_get_rawaebig_meas(stats_vdev, &pbuf->params.rawaebig3, 2);
+}
+
+static void
+rkisp_stats_get_rawhstbig3_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	if (!pbuf)
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, NULL, 2);
+	else
+		rkisp_stats_get_rawhstbig_meas(stats_vdev, &pbuf->params.rawhistbig3, 2);
+}
+
+static void
+rkisp_stats_get_rawaelite_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+			       struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	struct isp2x_rawaelite_stat *ae;
+	void __iomem *addr = stats_vdev->dev->base_addr;
+	u32 value;
+	int i;
+
+	if (!pbuf)
+		goto out;
+
+	ae = &pbuf->params.rawaelite;
+	value = readl(addr + ISP_RAWAE_LITE_CTRL);
+
+	if ((value & ISP2X_3A_MEAS_DONE) == 0)
+		return;
+
+	for (i = 0; i < ISP2X_RAWAELITE_MEAN_NUM; i++) {
+		value = readl(addr + ISP_RAWAE_LITE_RO_MEAN + 4 * i);
+		ae->data[i].channelg_xy = ISP2X_RAWAEBIG_GET_MEAN_G(value);
+		ae->data[i].channelb_xy = ISP2X_RAWAEBIG_GET_MEAN_B(value);
+		ae->data[i].channelr_xy = ISP2X_RAWAEBIG_GET_MEAN_R(value);
+	}
+
+out:
+	value = readl(addr + ISP_RAWAE_LITE_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, addr + ISP_RAWAE_LITE_CTRL);
+}
+
+static void
+rkisp_stats_get_rawhstlite_meas(struct rkisp_isp_stats_vdev *stats_vdev,
+				struct rkisp_isp2x_stat_buffer *pbuf)
+{
+	struct isp2x_rawhistlite_stat *hst;
+	void __iomem *addr = stats_vdev->dev->base_addr;
+	u32 value;
+	int i;
+
+	if (!pbuf)
+		goto out;
+
+	hst = &pbuf->params.rawhistlite;
+	for (i = 0; i < ISP2X_HIST_BIN_N_MAX; i++)
+		hst->hist_bin[i] = readl(addr + ISP_RAWHIST_LITE_RO_BASE_BIN);
+
+out:
+	value = readl(addr + ISP_RAWHIST_LITE_CTRL);
+	value |= ISP2X_3A_MEAS_DONE;
+	writel(value, addr + ISP_RAWHIST_LITE_CTRL);
+}
+
+static struct rkisp_stats_v2x_ops rkisp_stats_ops_v2x = {
+	.get_siawb_meas = rkisp_stats_get_siawb_meas,
+	.get_rawawb_meas = rkisp_stats_get_rawawb_meas,
+	.get_siaf_meas = rkisp_stats_get_siaf_meas,
+	.get_rawaf_meas = rkisp_stats_get_rawaf_meas,
+	.get_yuvae_meas = rkisp_stats_get_yuvae_meas,
+	.get_sihst_meas = rkisp_stats_get_sihst_meas,
+	.get_rawaebig1_meas = rkisp_stats_get_rawaebig1_meas,
+	.get_rawhstbig1_meas = rkisp_stats_get_rawhstbig1_meas,
+	.get_rawaebig2_meas = rkisp_stats_get_rawaebig2_meas,
+	.get_rawhstbig2_meas = rkisp_stats_get_rawhstbig2_meas,
+	.get_rawaebig3_meas = rkisp_stats_get_rawaebig3_meas,
+	.get_rawhstbig3_meas = rkisp_stats_get_rawhstbig3_meas,
+	.get_rawaelite_meas = rkisp_stats_get_rawaelite_meas,
+	.get_rawhstlite_meas = rkisp_stats_get_rawhstlite_meas,
+};
+
+static void
+rkisp_stats_send_meas_v2x(struct rkisp_isp_stats_vdev *stats_vdev,
+			  struct rkisp_isp_readout_work *meas_work)
+{
+	unsigned int cur_frame_id = -1;
+	struct rkisp_isp2x_stat_buffer *cur_stat_buf = NULL;
+	struct rkisp_buffer *cur_buf = NULL;
+	struct rkisp_stats_v2x_ops *ops =
+		(struct rkisp_stats_v2x_ops *)stats_vdev->priv_ops;
+
+	cur_frame_id = atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	if (cur_frame_id != meas_work->frame_id) {
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "Measurement late(%d, %d)\n",
+			  cur_frame_id, meas_work->frame_id);
+		cur_frame_id = meas_work->frame_id;
+	}
+
+	spin_lock(&stats_vdev->rd_lock);
+	/* get one empty buffer */
+	if (!list_empty(&stats_vdev->stat)) {
+		cur_buf = list_first_entry(&stats_vdev->stat,
+					   struct rkisp_buffer, queue);
+		list_del(&cur_buf->queue);
+	}
+	spin_unlock(&stats_vdev->rd_lock);
+
+	if (cur_buf) {
+		cur_stat_buf =
+			(struct rkisp_isp2x_stat_buffer *)(cur_buf->vaddr[0]);
+		cur_stat_buf->frame_id = cur_frame_id;
+	}
+
+	if (meas_work->isp_ris & ISP2X_SIAWB_DONE) {
+		ops->get_siawb_meas(stats_vdev, cur_stat_buf);
+
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_SIAWB;
+	}
+
+	if (meas_work->isp_ris & ISP2X_SIAF_FIN) {
+		ops->get_siaf_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_SIAF;
+	}
+
+	if (meas_work->isp_ris & ISP2X_AFM_SUM_OF)
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "ISP2X_AFM_SUM_OF\n");
+
+	if (meas_work->isp_ris & ISP2X_AFM_LUM_OF)
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "ISP2X_AFM_LUM_OF\n");
+
+	if (meas_work->isp_ris & ISP2X_YUVAE_END) {
+		ops->get_yuvae_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_YUVAE;
+	}
+
+	if (meas_work->isp_ris & ISP2X_SIHST_RDY) {
+		ops->get_sihst_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_SIHST;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAWB) {
+		ops->get_rawawb_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAWB;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAF) {
+		ops->get_rawaf_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAF;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAF_SUM)
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "ISP2X_3A_RAWAF_SUM\n");
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAF_LUM)
+		v4l2_warn(stats_vdev->vnode.vdev.v4l2_dev,
+			  "ISP2X_3A_RAWAF_LUM\n");
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAE_BIG) {
+		ops->get_rawaebig1_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAEBIG;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWHIST_BIG) {
+		ops->get_rawhstbig1_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWHSTBIG;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAE_CH0) {
+		ops->get_rawaelite_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAECH0;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAE_CH1) {
+		ops->get_rawaebig2_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAECH1;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWAE_CH2) {
+		ops->get_rawaebig3_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWAECH2;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWHIST_CH0) {
+		ops->get_rawhstlite_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWHSTCH0;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWHIST_CH1) {
+		ops->get_rawhstbig2_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWHSTCH1;
+	}
+
+	if (meas_work->isp3a_ris & ISP2X_3A_RAWHIST_CH2) {
+		ops->get_rawhstbig3_meas(stats_vdev, cur_stat_buf);
+		if (cur_stat_buf)
+			cur_stat_buf->meas_type |= ISP2X_STAT_RAWHSTCH2;
+	}
+
+	if (cur_buf) {
+		vb2_set_plane_payload(&cur_buf->vb.vb2_buf, 0,
+				      sizeof(struct rkisp_isp2x_stat_buffer));
+		cur_buf->vb.sequence = cur_frame_id;
+		cur_buf->vb.vb2_buf.timestamp = meas_work->timestamp;
+		vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
+	}
+}
+
+static void
+rkisp_stats_isr_v2x(struct rkisp_isp_stats_vdev *stats_vdev,
+		    u32 isp_ris, u32 isp3a_ris)
+{
+	u32 isp_mis_tmp = 0;
+	struct rkisp_isp_readout_work work;
+	u32 cur_frame_id =
+		atomic_read(&stats_vdev->dev->isp_sdev.frm_sync_seq) - 1;
+	u32 iq_isr_mask = ISP2X_SIAWB_DONE | ISP2X_SIAF_FIN |
+		ISP2X_YUVAE_END | ISP2X_SIHST_RDY | ISP2X_AFM_SUM_OF | ISP2X_AFM_LUM_OF;
+	u32 iq_3a_mask = ISP2X_3A_RAWAE_BIG | ISP2X_3A_RAWAE_CH0 | ISP2X_3A_RAWAE_CH1 |
+		ISP2X_3A_RAWAE_CH2 | ISP2X_3A_RAWHIST_BIG | ISP2X_3A_RAWHIST_CH0 |
+		ISP2X_3A_RAWHIST_CH1 | ISP2X_3A_RAWHIST_CH2 | ISP2X_3A_RAWAF_SUM |
+		ISP2X_3A_RAWAF_LUM | ISP2X_3A_RAWAF | ISP2X_3A_RAWAWB;
+
+#ifdef LOG_ISR_EXE_TIME
+	ktime_t in_t = ktime_get();
+#endif
+	spin_lock(&stats_vdev->irq_lock);
+
+	isp_mis_tmp = isp_ris & iq_isr_mask;
+	if (isp_mis_tmp) {
+		writel(isp_mis_tmp,
+			stats_vdev->dev->base_addr + ISP_ISP_ICR);
+
+		isp_mis_tmp &= readl(stats_vdev->dev->base_addr + ISP_ISP_MIS);
+		if (isp_mis_tmp)
+			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
+				 "isp icr 3A info err: 0x%x 0x%x\n",
+				 isp_mis_tmp, isp_ris);
+	}
+
+	isp_mis_tmp = isp3a_ris & iq_3a_mask;
+	if (isp_mis_tmp) {
+		writel(isp_mis_tmp,
+			stats_vdev->dev->base_addr + ISP_ISP3A_ICR);
+
+		isp_mis_tmp &= readl(stats_vdev->dev->base_addr + ISP_ISP3A_MIS);
+		if (isp_mis_tmp)
+			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
+				 "isp3A icr 3A info err: 0x%x 0x%x\n",
+				 isp_mis_tmp, isp_ris);
+	}
+
+	if (!stats_vdev->streamon)
+		goto unlock;
+
+	if ((isp_ris & iq_isr_mask) || (isp3a_ris & iq_3a_mask)) {
+		work.readout = RKISP_ISP_READOUT_MEAS;
+		work.frame_id = cur_frame_id;
+		work.isp_ris = isp_ris;
+		work.isp3a_ris = isp3a_ris;
+		work.timestamp = ktime_get_ns();
+
+		if (!kfifo_is_full(&stats_vdev->rd_kfifo))
+			kfifo_in(&stats_vdev->rd_kfifo,
+				 &work, sizeof(work));
+		else
+			v4l2_err(stats_vdev->vnode.vdev.v4l2_dev,
+				 "stats kfifo is full\n");
+
+		tasklet_schedule(&stats_vdev->rd_tasklet);
+	}
+
+#ifdef LOG_ISR_EXE_TIME
+	if (isp_ris & iq_isr_mask) {
+		unsigned int diff_us =
+		    ktime_to_us(ktime_sub(ktime_get(), in_t));
+
+		if (diff_us > g_longest_isr_time)
+			g_longest_isr_time = diff_us;
+
+		v4l2_info(stats_vdev->vnode.vdev.v4l2_dev,
+			  "isp_isr time %d %d\n", diff_us, g_longest_isr_time);
+	}
+#endif
+
+unlock:
+	spin_unlock(&stats_vdev->irq_lock);
+}
+
+static struct rkisp_isp_stats_ops rkisp_isp_stats_ops_tbl = {
+	.isr_hdl = rkisp_stats_isr_v2x,
+	.send_meas = rkisp_stats_send_meas_v2x,
+};
+
+void rkisp_init_stats_vdev_v2x(struct rkisp_isp_stats_vdev *stats_vdev)
+{
+	stats_vdev->vdev_fmt.fmt.meta.dataformat =
+		V4L2_META_FMT_RK_ISP1_STAT_3A;
+	stats_vdev->vdev_fmt.fmt.meta.buffersize =
+		sizeof(struct rkisp_isp2x_stat_buffer);
+
+	stats_vdev->ops = &rkisp_isp_stats_ops_tbl;
+	stats_vdev->priv_ops = &rkisp_stats_ops_v2x;
+}
diff --git a/drivers/media/platform/rockchip/isp/isp_stats_v2x.h b/drivers/media/platform/rockchip/isp/isp_stats_v2x.h
new file mode 100644
index 000000000000..a3d4105e3cee
--- /dev/null
+++ b/drivers/media/platform/rockchip/isp/isp_stats_v2x.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019 Fuzhou Rockchip Electronics Co., Ltd. */
+
+#ifndef _RKISP_ISP_STATS_V2X_H
+#define _RKISP_ISP_STATS_V2X_H
+
+#include <linux/rkisp1-config.h>
+#include <linux/interrupt.h>
+#include <linux/kfifo.h>
+#include "common.h"
+
+struct rkisp_isp_stats_vdev;
+struct rkisp_stats_v2x_ops {
+	void (*get_siawb_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawawb_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_siaf_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawaf_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_yuvae_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_sihst_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_rawaebig1_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawhstbig1_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_rawaebig2_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawhstbig2_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_rawaebig3_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawhstbig3_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+
+	void (*get_rawaelite_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+	void (*get_rawhstlite_meas)(struct rkisp_isp_stats_vdev *stats_vdev,
+			     struct rkisp_isp2x_stat_buffer *pbuf);
+};
+
+void rkisp_init_stats_vdev_v2x(struct rkisp_isp_stats_vdev *stats_vdev);
+
+#endif /* _RKISP_ISP_STATS_V2X_H */
diff --git a/drivers/media/platform/rockchip/isp/regs.h b/drivers/media/platform/rockchip/isp/regs.h
index 92731141f4f8..5e9721e1522e 100644
--- a/drivers/media/platform/rockchip/isp/regs.h
+++ b/drivers/media/platform/rockchip/isp/regs.h
@@ -517,6 +517,8 @@
 #define CIF_ISP_AWB_YMAX_READ(x)		(((x) >> 2) & 1)
 #define CIF_ISP_AWB_MODE_RGB_EN			((1 << 31) | (0x2 << 0))
 #define CIF_ISP_AWB_MODE_YCBCR_EN		((0 << 31) | (0x2 << 0))
+#define CIF_ISP_AWB_MODE_RGB			BIT(31)
+#define CIF_ISP_AWB_ENABLE			(0x2 << 0)
 #define CIF_ISP_AWB_MODE_MASK_NONE		0xFFFFFFFC
 #define CIF_ISP_AWB_MODE_READ(x)		((x) & 3)
 #define CIF_ISP_AWB_SET_FRAMES_V12(x)		(((x) & 0x07) << 28)
diff --git a/drivers/media/platform/rockchip/isp/regs_v2x.h b/drivers/media/platform/rockchip/isp/regs_v2x.h
index 9b424de35dde..144d97210d25 100644
--- a/drivers/media/platform/rockchip/isp/regs_v2x.h
+++ b/drivers/media/platform/rockchip/isp/regs_v2x.h
@@ -474,6 +474,7 @@
 #define MI_DBR_RD_BASE				(MI_BASE + 0x00570)
 #define MI_DBR_RD_LENGTH			(MI_BASE + 0x00574)
 #define MI_DBR_RD_BASE_SHD			(MI_BASE + 0x00578)
+#define MI_SWS_3A_WR_BASE			(MI_BASE + 0x0057c)
 #define MI_GAIN_WR_BASE				(MI_BASE + 0x00580)
 #define MI_GAIN_WR_SIZE				(MI_BASE + 0x00584)
 #define MI_GAIN_WR_LENGTH			(MI_BASE + 0x00588)
@@ -572,7 +573,7 @@
 #define ISP_LSC_YSIZE_45			(ISP_LSC_BASE + 0x0005c)
 #define ISP_LSC_YSIZE_67			(ISP_LSC_BASE + 0x00060)
 #define ISP_LSC_TABLE_SEL			(ISP_LSC_BASE + 0x00064)
-#define ISP_LSC_ISP_LSC_STATUS			(ISP_LSC_BASE + 0x00068)
+#define ISP_LSC_STATUS				(ISP_LSC_BASE + 0x00068)
 
 #define ISP_DEBAYER_BASE			0x00002500
 #define ISP_DEBAYER_CONTROL			(ISP_DEBAYER_BASE + 0x00000)
diff --git a/drivers/media/platform/rockchip/isp/rkisp.c b/drivers/media/platform/rockchip/isp/rkisp.c
index 79e3c0b13767..708fc87514ea 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.c
+++ b/drivers/media/platform/rockchip/isp/rkisp.c
@@ -338,7 +338,8 @@ static void rkisp_config_clk(struct rkisp_device *dev, int on)
 		      CLK_CTRL_MI_JPEG | CLK_CTRL_MI_DP |
 		      CLK_CTRL_MI_Y12 | CLK_CTRL_MI_SP |
 		      CLK_CTRL_MI_RAW0 | CLK_CTRL_MI_RAW1 |
-		      CLK_CTRL_MI_READ | CLK_CTRL_MI_RAWRD;
+		      CLK_CTRL_MI_READ | CLK_CTRL_MI_RAWRD |
+		      CLK_CTRL_ISP_3A;
 		writel(val, dev->base_addr + CTRL_VI_ISP_CLK_CTRL);
 	}
 }
@@ -501,6 +502,15 @@ static int rkisp_config_isp(struct rkisp_device *dev)
 	irq_mask |= CIF_ISP_FRAME | CIF_ISP_V_START | CIF_ISP_PIC_SIZE_ERROR |
 		    CIF_ISP_FRAME_IN | CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN;
 	writel(irq_mask, base + CIF_ISP_IMSC);
+	if (dev->isp_ver == ISP_V20) {
+		irq_mask = ISP2X_3A_RAWAE_BIG | ISP2X_3A_RAWAE_CH0 |
+			ISP2X_3A_RAWAE_CH1 | ISP2X_3A_RAWAE_CH2 |
+			ISP2X_3A_RAWHIST_BIG | ISP2X_3A_RAWHIST_CH0 |
+			ISP2X_3A_RAWHIST_CH1 | ISP2X_3A_RAWHIST_CH2 |
+			ISP2X_3A_RAWAWB | ISP2X_3A_RAWAF | ISP2X_3A_RAWAF_SUM |
+			ISP2X_3A_RAWAF_LUM;
+		writel(irq_mask, base + ISP_ISP3A_IMSC);
+	}
 
 	if (out_fmt->fmt_type == FMT_BAYER)
 		rkisp_params_disable_isp(&dev->params_vdev);
@@ -698,6 +708,11 @@ static int rkisp_isp_stop(struct rkisp_device *dev)
 	writel(0, base + CIF_ISP_IMSC);
 	writel(~0, base + CIF_ISP_ICR);
 
+	if (dev->isp_ver == ISP_V20) {
+		writel(0, base + ISP_ISP3A_IMSC);
+		writel(~0, base + ISP_ISP3A_ICR);
+	}
+
 	writel(0, base + CIF_MI_IMSC);
 	writel(~0, base + CIF_MI_ICR);
 	if (dev->isp_ver == ISP_V12 || dev->isp_ver == ISP_V13) {
@@ -1766,11 +1781,21 @@ void rkisp_mipi_v13_isr(unsigned int err1, unsigned int err2,
 		v4l2_warn(v4l2_dev, "MIPI error: err2: 0x%08x\n", err2);
 }
 
-void rkisp_isp_isr(unsigned int isp_mis, struct rkisp_device *dev)
+void rkisp_isp_isr(unsigned int isp_mis,
+		   unsigned int isp3a_mis,
+		   struct rkisp_device *dev)
 {
 	void __iomem *base = dev->base_addr;
 	unsigned int isp_mis_tmp = 0;
 	unsigned int isp_err = 0;
+	u32 si3a_isr_mask = ISP2X_SIAWB_DONE | ISP2X_SIAF_FIN |
+		ISP2X_YUVAE_END | ISP2X_SIHST_RDY;
+	u32 raw3a_isr_mask = ISP2X_3A_RAWAE_BIG | ISP2X_3A_RAWAE_CH0 |
+		ISP2X_3A_RAWAE_CH1 | ISP2X_3A_RAWAE_CH2 |
+		ISP2X_3A_RAWHIST_BIG | ISP2X_3A_RAWHIST_CH0 |
+		ISP2X_3A_RAWHIST_CH1 | ISP2X_3A_RAWHIST_CH2 |
+		ISP2X_3A_RAWAF_SUM | ISP2X_3A_RAWAF_LUM |
+		ISP2X_3A_RAWAF | ISP2X_3A_RAWAWB;
 
 	v4l2_dbg(3, rkisp_debug, &dev->v4l2_dev,
 		 "isp isr:0x%x\n", isp_mis);
@@ -1856,7 +1881,8 @@ void rkisp_isp_isr(unsigned int isp_mis, struct rkisp_device *dev)
 		rkisp_isp_read_add_fifo_data(dev);
 	}
 
-	if (isp_mis & (CIF_ISP_FRAME | CIF_ISP_AWB_DONE | CIF_ISP_AFM_FIN)) {
+	if ((isp_mis & (CIF_ISP_FRAME | si3a_isr_mask)) ||
+	    (isp3a_mis & raw3a_isr_mask)) {
 		u32 irq = isp_mis;
 
 		/* FRAME to get EXP and HIST together */
@@ -1865,7 +1891,7 @@ void rkisp_isp_isr(unsigned int isp_mis, struct rkisp_device *dev)
 				CIF_ISP_HIST_MEASURE_RDY) &
 				readl(base + CIF_ISP_RIS));
 
-		rkisp_stats_isr(&dev->stats_vdev, irq);
+		rkisp_stats_isr(&dev->stats_vdev, irq, isp3a_mis);
 	}
 
 	/*
diff --git a/drivers/media/platform/rockchip/isp/rkisp.h b/drivers/media/platform/rockchip/isp/rkisp.h
index 4303db6380dc..449ee71bcac6 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.h
+++ b/drivers/media/platform/rockchip/isp/rkisp.h
@@ -138,7 +138,8 @@ void rkisp_mipi_v20_isr(unsigned int phy, unsigned int packet,
 			 unsigned int overflow, unsigned int state,
 			 struct rkisp_device *dev);
 
-void rkisp_isp_isr(unsigned int isp_mis, struct rkisp_device *dev);
+void rkisp_isp_isr(unsigned int isp_mis, unsigned int isp3a_mis,
+		   struct rkisp_device *dev);
 
 irqreturn_t rkisp_vs_isr_handler(int irq, void *ctx);
 
diff --git a/include/uapi/linux/rkisp1-config.h b/include/uapi/linux/rkisp1-config.h
index c7742f59d135..e59cac691a75 100644
--- a/include/uapi/linux/rkisp1-config.h
+++ b/include/uapi/linux/rkisp1-config.h
@@ -9,6 +9,7 @@
 
 #include <linux/types.h>
 #include <linux/v4l2-controls.h>
+#include "rkisp2-config.h"
 
 #define CIFISP_MODULE_DPCC			(1 << 0)
 #define CIFISP_MODULE_BLS			(1 << 1)
diff --git a/include/uapi/linux/rkisp2-config.h b/include/uapi/linux/rkisp2-config.h
new file mode 100644
index 000000000000..425aa08d16a6
--- /dev/null
+++ b/include/uapi/linux/rkisp2-config.h
@@ -0,0 +1,1476 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+ *
+ * Rockchip isp2 driver
+ * Copyright (C) 2017 Rockchip Electronics Co., Ltd.
+ */
+
+#ifndef _UAPI_RKISP2_CONFIG_H
+#define _UAPI_RKISP2_CONFIG_H
+
+#include <linux/types.h>
+#include <linux/v4l2-controls.h>
+
+#define ISP2X_MODULE_DPCC		BIT_ULL(0)
+#define ISP2X_MODULE_BLS		BIT_ULL(1)
+#define ISP2X_MODULE_SDG		BIT_ULL(2)
+#define ISP2X_MODULE_SIHST		BIT_ULL(3)
+#define ISP2X_MODULE_LSC		BIT_ULL(4)
+#define ISP2X_MODULE_AWB_GAIN		BIT_ULL(5)
+#define ISP2X_MODULE_BDM		BIT_ULL(7)
+#define ISP2X_MODULE_CTK		BIT_ULL(8)
+#define ISP2X_MODULE_GOC		BIT_ULL(9)
+#define ISP2X_MODULE_CPROC		BIT_ULL(10)
+#define ISP2X_MODULE_SIAF		BIT_ULL(11)
+#define ISP2X_MODULE_SIAWB		BIT_ULL(12)
+#define ISP2X_MODULE_IE			BIT_ULL(13)
+#define ISP2X_MODULE_YUVAE		BIT_ULL(14)
+#define ISP2X_MODULE_WDR		BIT_ULL(15)
+#define ISP2X_MODULE_RK_IESHARP		BIT_ULL(16)
+#define ISP2X_MODULE_RAWAF		BIT_ULL(17)
+#define ISP2X_MODULE_RAWAE_LITE		BIT_ULL(18)
+#define ISP2X_MODULE_RAWAE_BIG1		BIT_ULL(19)
+#define ISP2X_MODULE_RAWAE_BIG2		BIT_ULL(20)
+#define ISP2X_MODULE_RAWAE_BIG3		BIT_ULL(21)
+#define ISP2X_MODULE_RAWAWB		BIT_ULL(22)
+#define ISP2X_MODULE_RAWHIST_LITE	BIT_ULL(23)
+#define ISP2X_MODULE_RAWHIST_BIG1	BIT_ULL(24)
+#define ISP2X_MODULE_RAWHIST_BIG2	BIT_ULL(25)
+#define ISP2X_MODULE_RAWHIST_BIG3	BIT_ULL(26)
+#define ISP2X_MODULE_HDRMGE		BIT_ULL(27)
+#define ISP2X_MODULE_RAWNR		BIT_ULL(28)
+#define ISP2X_MODULE_HDRTMO		BIT_ULL(29)
+#define ISP2X_MODULE_GIC		BIT_ULL(30)
+#define ISP2X_MODULE_DHAZ		BIT_ULL(31)
+#define ISP2X_MODULE_3DLUT		BIT_ULL(32)
+
+/*
+ * Measurement types
+ */
+#define ISP2X_STAT_SIAWB		BIT(0)
+#define ISP2X_STAT_YUVAE		BIT(1)
+#define ISP2X_STAT_SIAF			BIT(2)
+#define ISP2X_STAT_SIHST		BIT(3)
+#define ISP2X_STAT_EMB_DATA		BIT(4)
+#define ISP2X_STAT_RAWAWB		BIT(5)
+#define ISP2X_STAT_RAWAF		BIT(6)
+#define ISP2X_STAT_RAWAEBIG		BIT(7)
+#define ISP2X_STAT_RAWHSTBIG		BIT(8)
+#define ISP2X_STAT_RAWAECH0		BIT(9)
+#define ISP2X_STAT_RAWAECH1		BIT(10)
+#define ISP2X_STAT_RAWAECH2		BIT(11)
+#define ISP2X_STAT_RAWHSTCH0		BIT(12)
+#define ISP2X_STAT_RAWHSTCH1		BIT(13)
+#define ISP2X_STAT_RAWHSTCH2		BIT(14)
+
+#define ISP2X_LSC_GRAD_TBL_SIZE		8
+#define ISP2X_LSC_SIZE_TBL_SIZE		8
+#define ISP2X_LSC_DATA_TBL_SIZE		290
+
+#define ISP2X_DEGAMMA_CURVE_SIZE	17
+
+#define ISP2X_AWB_MAX_GRID		1
+#define ISP2X_RAWAWB_SUM_NUM		7
+#define ISP2X_RAWAWB_MULWD_NUM		8
+#define ISP2X_RAWAWB_RAMDATA_NUM	225
+
+#define ISP2X_RAWAEBIG_SUBWIN_NUM	4
+#define ISP2X_RAWAEBIG_MEAN_NUM		225
+#define ISP2X_RAWAELITE_MEAN_NUM	25
+#define ISP2X_YUVAE_SUBWIN_NUM		4
+#define ISP2X_YUVAE_MEAN_NUM		225
+
+#define ISP2X_RAWHISTBIG_SUBWIN_NUM	225
+#define ISP2X_RAWHISTLITE_SUBWIN_NUM	25
+#define ISP2X_HIST_WIN_NUM		4
+#define ISP2X_HIST_WEIGHT_NUM		225
+#define ISP2X_HIST_BIN_N_MAX		256
+
+#define ISP2X_RAWAF_WIN_NUM		2
+#define ISP2X_RAWAF_LINE_NUM		5
+#define ISP2X_RAWAF_GAMMA_NUM		17
+#define ISP2X_RAWAF_SUMDATA_ROW		15
+#define ISP2X_RAWAF_SUMDATA_COLUMN	15
+#define ISP2X_RAWAF_SUMDATA_NUM		225
+#define ISP2X_AFM_MAX_WINDOWS		3
+
+#define ISP2X_DPCC_PDAF_POINT_NUM	16
+
+#define ISP2X_HDRMGE_L_CURVE_NUM	17
+#define ISP2X_HDRMGE_E_CURVE_NUM	17
+
+#define ISP2X_RAWNR_LUMA_RATION_NUM	17
+
+#define ISP2X_HDRTMO_MINMAX_NUM		32
+
+#define ISP2X_CCM_CURVE_NUM		17
+
+#define ISP2X_WDR_DY_NUM		32
+#define ISP2X_WDR_TONE_YN_NUM		16
+#define ISP2X_WDR_TONE_YM_NUM		32
+#define ISP2X_WDR_BLKMEAN_ROW_NUM	10
+#define ISP2X_WDR_BLKMEAN_DATA_NUM	8
+
+#define ISP2X_DHAZ_CONV_COEFF_NUM	6
+#define ISP2X_DHAZ_HIST_IIR_NUM		64
+
+#define ISP2X_GAMMA_OUT_MAX_SAMPLES	17
+
+struct isp2x_window {
+	u16 h_offs;
+	u16 v_offs;
+	u16 h_size;
+	u16 v_size;
+} __attribute__ ((packed));
+
+struct isp2x_bls_fixed_val {
+	s16 r;
+	s16 gr;
+	s16 gb;
+	s16 b;
+} __attribute__ ((packed));
+
+struct isp2x_bls_cfg {
+	u8 enable_auto;
+	u8 en_windows;
+	struct isp2x_window bls_window1;
+	struct isp2x_window bls_window2;
+	u8 bls_samples;
+	struct isp2x_bls_fixed_val fixed_val;
+} __attribute__ ((packed));
+
+struct isp2x_bls_stat {
+	u16 meas_r;
+	u16 meas_gr;
+	u16 meas_gb;
+	u16 meas_b;
+} __attribute__ ((packed));
+
+struct isp2x_dpcc_pdaf_point {
+	u8 y;
+	u8 x;
+} __attribute__ ((packed));
+
+struct isp2x_dpcc_cfg {
+	//mode 0x0000
+	u8 stage1_enable;
+	u8 grayscale_mode;
+
+	//output_mode 0x0004
+	u8 sw_rk_out_sel;
+	u8 sw_dpcc_output_sel;
+	u8 stage1_rb_3x3;
+	u8 stage1_g_3x3;
+	u8 stage1_incl_rb_center;
+	u8 stage1_incl_green_center;
+
+	//set_use 0x0008
+	u8 stage1_use_fix_set;
+	u8 stage1_use_set_3;
+	u8 stage1_use_set_2;
+	u8 stage1_use_set_1;
+
+	//methods_set_1 0x000c
+	u8 sw_rk_red_blue1_en;
+	u8 rg_red_blue1_enable;
+	u8 rnd_red_blue1_enable;
+	u8 ro_red_blue1_enable;
+	u8 lc_red_blue1_enable;
+	u8 pg_red_blue1_enable;
+	u8 sw_rk_green1_en;
+	u8 rg_green1_enable;
+	u8 rnd_green1_enable;
+	u8 ro_green1_enable;
+	u8 lc_green1_enable;
+	u8 pg_green1_enable;
+
+	//methods_set_2 0x0010
+	u8 sw_rk_red_blue2_en;
+	u8 rg_red_blue2_enable;
+	u8 rnd_red_blue2_enable;
+	u8 ro_red_blue2_enable;
+	u8 lc_red_blue2_enable;
+	u8 pg_red_blue2_enable;
+	u8 sw_rk_green2_en;
+	u8 rg_green2_enable;
+	u8 rnd_green2_enable;
+	u8 ro_green2_enable;
+	u8 lc_green2_enable;
+	u8 pg_green2_enable;
+
+	//methods_set_3 0x0014
+	u8 sw_rk_red_blue3_en;
+	u8 rg_red_blue3_enable;
+	u8 rnd_red_blue3_enable;
+	u8 ro_red_blue3_enable;
+	u8 lc_red_blue3_enable;
+	u8 pg_red_blue3_enable;
+	u8 sw_rk_green3_en;
+	u8 rg_green3_enable;
+	u8 rnd_green3_enable;
+	u8 ro_green3_enable;
+	u8 lc_green3_enable;
+	u8 pg_green3_enable;
+
+	//line_thresh_1 0x0018
+	u8 sw_mindis1_rb;
+	u8 sw_mindis1_g;
+	u8 line_thr_1_rb;
+	u8 line_thr_1_g;
+
+	//line_mad_fac_1 0x001c
+	u8 sw_dis_scale_min1;
+	u8 sw_dis_scale_max1;
+	u8 line_mad_fac_1_rb;
+	u8 line_mad_fac_1_g;
+
+	//pg_fac_1 0x0020
+	u8 pg_fac_1_rb;
+	u8 pg_fac_1_g;
+
+	//rnd_thresh_1 0x0024
+	u8 rnd_thr_1_rb;
+	u8 rnd_thr_1_g;
+
+	//rg_fac_1 0x0028
+	u8 rg_fac_1_rb;
+	u8 rg_fac_1_g;
+
+	//line_thresh_2 0x002c
+	u8 sw_mindis2_rb;
+	u8 sw_mindis2_g;
+	u8 line_thr_2_rb;
+	u8 line_thr_2_g;
+
+	//line_mad_fac_2 0x0030
+	u8 sw_dis_scale_min2;
+	u8 sw_dis_scale_max2;
+	u8 line_mad_fac_2_rb;
+	u8 line_mad_fac_2_g;
+
+	//pg_fac_2 0x0034
+	u8 pg_fac_2_rb;
+	u8 pg_fac_2_g;
+
+	//rnd_thresh_2 0x0038
+	u8 rnd_thr_2_rb;
+	u8 rnd_thr_2_g;
+
+	//rg_fac_2 0x003c
+	u8 rg_fac_2_rb;
+	u8 rg_fac_2_g;
+
+	//line_thresh_3 0x0040
+	u8 sw_mindis3_rb;
+	u8 sw_mindis3_g;
+	u8 line_thr_3_rb;
+	u8 line_thr_3_g;
+
+	//line_mad_fac_3 0x0044
+	u8 sw_dis_scale_min3;
+	u8 sw_dis_scale_max3;
+	u8 line_mad_fac_3_rb;
+	u8 line_mad_fac_3_g;
+
+	//pg_fac_3 0x0048
+	u8 pg_fac_3_rb;
+	u8 pg_fac_3_g;
+
+	//rnd_thresh_3 0x004c
+	u8 rnd_thr_3_rb;
+	u8 rnd_thr_3_g;
+
+	//rg_fac_3 0x0050
+	u8 rg_fac_3_rb;
+	u8 rg_fac_3_g;
+
+	//ro_limits 0x0054
+	u8 ro_lim_3_rb;
+	u8 ro_lim_3_g;
+	u8 ro_lim_2_rb;
+	u8 ro_lim_2_g;
+	u8 ro_lim_1_rb;
+	u8 ro_lim_1_g;
+
+	//rnd_offs 0x0058
+	u8 rnd_offs_3_rb;
+	u8 rnd_offs_3_g;
+	u8 rnd_offs_2_rb;
+	u8 rnd_offs_2_g;
+	u8 rnd_offs_1_rb;
+	u8 rnd_offs_1_g;
+
+	//bpt_ctrl 0x005c
+	u8 bpt_rb_3x3;
+	u8 bpt_g_3x3;
+	u8 bpt_incl_rb_center;
+	u8 bpt_incl_green_center;
+	u8 bpt_use_fix_set;
+	u8 bpt_use_set_3;
+	u8 bpt_use_set_2;
+	u8 bpt_use_set_1;
+	u8 bpt_cor_en;
+	u8 bpt_det_en;
+
+	//bpt_number 0x0060
+	u16 bp_number;
+
+	//bpt_addr 0x0064
+	u16 bp_table_addr;
+
+	//bpt_data 0x0068
+	u16 bpt_v_addr;
+	u16 bpt_h_addr;
+
+	//bp_cnt 0x006c
+	u32 bp_cnt;
+
+	//pdaf_en 0x0070
+	u8 sw_pdaf_en;
+
+	//pdaf_point_en 0x0074
+	u8 pdaf_point_en[ISP2X_DPCC_PDAF_POINT_NUM];
+
+	//pdaf_offset 0x0078
+	u16 pdaf_offsety;
+	u16 pdaf_offsetx;
+
+	//pdaf_wrap 0x007c
+	u16 pdaf_wrapy;
+	u16 pdaf_wrapx;
+
+	//pdaf_scope 0x0080
+	u16 pdaf_wrapy_num;
+	u16 pdaf_wrapx_num;
+
+	//pdaf_point_0 0x0084
+	struct isp2x_dpcc_pdaf_point point[ISP2X_DPCC_PDAF_POINT_NUM];
+
+	//pdaf_forward_med 0x00a4
+	u8 pdaf_forward_med;
+} __attribute__ ((packed));
+
+struct isp2x_hdrmge_curve {
+	u16 curve_1;
+	u16 curve_0;
+} __attribute__ ((packed));
+
+struct isp2x_hdrmge_cfg {
+	u8 mode;
+	u16 gain0_inv;
+	u16 gain0;
+	u16 gain1_inv;
+	u16 gain1;
+	u8 gain2;
+	u8 lm_dif_0p15;
+	u8 lm_dif_0p9;
+	u8 ms_diff_0p15;
+	u8 ms_dif_0p8;
+	struct isp2x_hdrmge_curve curve[ISP2X_HDRMGE_L_CURVE_NUM];
+	u16 e_y[ISP2X_HDRMGE_E_CURVE_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawnr_cfg {
+	u8 gauss_en;
+	u8 log_bypass;
+
+	u16 filtpar0;
+	u16 filtpar1;
+	u16 filtpar2;
+
+	u32 dgain0;
+	u32 dgain1;
+	u32 dgain2;
+
+	u16 luration[ISP2X_RAWNR_LUMA_RATION_NUM];
+	u32 gauss;
+	u16 sigma;
+	u16 pix_diff;
+	u32 thld_diff;
+	u16 thld_chanelw;
+	u16 lamda;
+
+	u16 fixw0;
+	u16 fixw1;
+	u16 fixw2;
+	u16 fixw3;
+
+	u32 wlamda0;
+	u32 wlamda1;
+	u32 wlamda2;
+
+	u16 rgain_filp;
+	u16 bgain_filp;
+} __attribute__ ((packed));
+
+struct isp2x_lsc_cfg {
+	u32 r_data_tbl[ISP2X_LSC_DATA_TBL_SIZE];
+	u32 gr_data_tbl[ISP2X_LSC_DATA_TBL_SIZE];
+	u32 gb_data_tbl[ISP2X_LSC_DATA_TBL_SIZE];
+	u32 b_data_tbl[ISP2X_LSC_DATA_TBL_SIZE];
+
+	u32 x_grad_tbl[ISP2X_LSC_GRAD_TBL_SIZE];
+	u32 y_grad_tbl[ISP2X_LSC_GRAD_TBL_SIZE];
+
+	u32 x_size_tbl[ISP2X_LSC_SIZE_TBL_SIZE];
+	u32 y_size_tbl[ISP2X_LSC_SIZE_TBL_SIZE];
+	u16 cfg_width;
+	u16 cfg_height;
+} __attribute__ ((packed));
+
+enum isp2x_goc_mode {
+	ISP2X_GOC_MODE_LOGARITHMIC,
+	ISP2X_GOC_MODE_EQUIDISTANT
+};
+
+struct isp2x_goc_cfg {
+	enum isp2x_goc_mode mode;
+	u8 gamma_y[ISP2X_GAMMA_OUT_MAX_SAMPLES];
+} __attribute__ ((packed));
+
+struct isp2x_hdrtmo_cfg {
+	u8 cfg_alpha;
+	u16 set_gainoff;
+	u16 set_palpha;
+	u16 set_lgmax;
+	u16 set_lgmin;
+	u8 set_weightkey;
+	u16 set_lgmean;
+	u16 set_lgrange1;
+	u16 set_lgrange0;
+	u16 set_lgavgmax;
+	u8 clipgap1_i;
+	u8 clipgap0_i;
+	u8 clipratio1;
+	u8 clipratio0;
+	u8 ratiol;
+	u16 lgscl_inv;
+	u16 lgscl;
+	u16 lgmax;
+	u16 hist_low;
+	u16 hist_min;
+	u8 hist_shift;
+	u16 hist_0p3;
+	u16 hist_high;
+	u16 palpha_0p5;
+	u16 palpha_0p18;
+	u16 maxgain;
+	u16 maxpalpha;
+} __attribute__ ((packed));
+
+struct isp2x_hdrtmo_stat {
+	u16 lglow;
+	u16 lgmin;
+	u16 lghigh;
+	u16 lgmax;
+	u16 weightkey;
+	u16 lgmean;
+	u16 lgrange1;
+	u16 lgrange0;
+	u16 palpha;
+	u16 lgavgmax;
+	u16 linecnt;
+	u32 min_max[ISP2X_HDRTMO_MINMAX_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_gic_cfg {
+	u8 edge_open;
+
+	u16 regmingradthrdark2;
+	u16 regmingradthrdark1;
+	u16 regminbusythre;
+
+	u16 regdarkthre;
+	u16 regmaxcorvboth;
+	u16 regdarktthrehi;
+
+	u8 regkgrad2dark;
+	u8 regkgrad1dark;
+	u8 regstrengthglobal_fix;
+	u8 regdarkthrestep;
+	u8 regkgrad2;
+	u8 regkgrad1;
+	u8 reggbthre;
+
+	u16 regmaxcorv;
+	u16 regmingradthr2;
+	u16 regmingradthr1;
+
+	u16 dnloscale;
+	u16 dnhiscale;
+	u8 reglumapointsstep;
+	u16 gvaluelimitlo;
+	u16 gvaluelimithi;
+	u8 fusionratiohilimt1;
+
+	u8 regstrength_fix;
+
+	u16 sigma_y1;
+} __attribute__ ((packed));
+
+struct isp2x_debayer_cfg {
+	u8 filter_c_en;
+	u8 filter_g_en;
+
+	u8 gain_offset;
+	u16 hf_offset;
+	u8 thed1;
+	u8 thed0;
+	u8 dist_scale;
+	u8 max_ratio;
+	u8 clip_en;
+
+	u8 filter1_coe5;
+	u8 filter1_coe4;
+	u8 filter1_coe3;
+	u8 filter1_coe2;
+	u8 filter1_coe1;
+
+	u8 filter2_coe5;
+	u8 filter2_coe4;
+	u8 filter2_coe3;
+	u8 filter2_coe2;
+	u8 filter2_coe1;
+
+	u8 offset;
+
+	u8 shift_num;
+	u8 order_max;
+	u8 order_min;
+} __attribute__ ((packed));
+
+struct isp2x_ccm_cfg {
+	u16 coeff0_r;
+	u16 coeff1_r;
+	u16 coeff2_r;
+	u16 offset_r;
+
+	u16 coeff0_g;
+	u16 coeff1_g;
+	u16 coeff2_g;
+	u16 offset_g;
+
+	u16 coeff0_b;
+	u16 coeff1_b;
+	u16 coeff2_b;
+	u16 offset_b;
+
+	u16 coeff0_y;
+	u16 coeff1_y;
+	u16 coeff2_y;
+
+	u16 alp_y[ISP2X_CCM_CURVE_NUM];
+
+	u8 bound_bit;
+} __attribute__ ((packed));
+
+struct isp2x_gammaout_cfg {
+	u8 equ_segm;
+	u16 offset;
+	u16 y[ISP2X_GAMMA_OUT_MAX_SAMPLES];
+} __attribute__ ((packed));
+
+struct isp2x_wdr_cfg {
+	u8 wdr_dy[ISP2X_WDR_DY_NUM];
+	u16 tonecurve_yn[ISP2X_WDR_TONE_YN_NUM];
+	u16 tonecurve_ym[ISP2X_WDR_TONE_YM_NUM];
+
+	u16 lum_offset;
+	u16 rgb_offset;
+
+	u8 pym_cc;
+	u8 epsilon;
+	u8 lvl_en;
+	u8 blkgain_gam;
+	u8 csc_sel;
+	u8 h_size_sel;
+
+	u8 gain_max_en;
+	u8 gain_max;
+	u8 bavg_clip;
+	u8 nonl_segm;
+	u8 nonl_open;
+	u8 nonl_mode1;
+	u8 flt_sel;
+	u8 blk_sel;
+
+	u8 gain_off1;
+	u8 gain_off2;
+
+	u8 bestlight;
+	u8 noiseratio;
+
+	u16 coe_0;
+	u16 coe_1;
+	u16 coe_2;
+	u32 coe_off;
+	u8 gain_off3;
+} __attribute__ ((packed));
+
+struct isp2x_wdr_stat {
+	u32 blkmean[ISP2X_WDR_BLKMEAN_ROW_NUM][ISP2X_WDR_BLKMEAN_DATA_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_dhaz_cfg {
+	u8 gain_en;
+	u8 enhance_en;
+	u8 hist_chn;
+	u8 hpara_en;
+	u8 hist_en;
+	u8 dc_en;
+
+	u8 yblk_th;
+	u8 yhist_th;
+	u8 dc_max_th;
+	u8 dc_min_th;
+
+	u16 wt_max;
+	u8 bright_max;
+	u8 bright_min;
+
+	u8 tmax_base;
+	u8 dark_th;
+	u8 air_max;
+	u8 air_min;
+
+	u16 tmax_max;
+	u16 tmax_off;
+
+	u8 hist_th_off;
+	u8 hist_gratio;
+
+	u16 hist_min;
+	u16 hist_k;
+
+	u16 enhance_value;
+	u16 hist_scale;
+
+	u16 iir_wt_sigma;
+	u16 iir_sigma;
+	u16 stab_fnum;
+
+	u16 iir_tmax_sigma;
+	u16 iir_air_sigma;
+
+	u16 cfg_wt;
+	u16 cfg_air;
+	u16 cfg_alpha;
+
+	u16 cfg_gratio;
+	u16 cfg_tmax;
+
+	u16 dc_weitcur;
+	u16 dc_thed;
+
+	u8 sw_dhaz_dc_bf_h3;
+	u8 sw_dhaz_dc_bf_h2;
+	u8 sw_dhaz_dc_bf_h1;
+	u8 sw_dhaz_dc_bf_h0;
+
+	u8 sw_dhaz_dc_bf_h5;
+	u8 sw_dhaz_dc_bf_h4;
+
+	u16 air_weitcur;
+	u16 air_thed;
+
+	u8 air_bf_h2;
+	u8 air_bf_h1;
+	u8 air_bf_h0;
+
+	u8 gaus_h2;
+	u8 gaus_h1;
+	u8 gaus_h0;
+
+	u8 conv_t0[ISP2X_DHAZ_CONV_COEFF_NUM];
+	u8 conv_t1[ISP2X_DHAZ_CONV_COEFF_NUM];
+	u8 conv_t2[ISP2X_DHAZ_CONV_COEFF_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_dhaz_stat {
+	u16 dhaz_adp_air_base;
+	u16 dhaz_adp_wt;
+
+	u16 dhaz_adp_gratio;
+	u16 dhaz_adp_tmax;
+
+	u16 h_r_iir[ISP2X_DHAZ_HIST_IIR_NUM];
+	u16 h_g_iir[ISP2X_DHAZ_HIST_IIR_NUM];
+	u16 h_b_iir[ISP2X_DHAZ_HIST_IIR_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_cproc_cfg {
+	u8 c_out_range;
+	u8 y_in_range;
+	u8 y_out_range;
+	u8 contrast;
+	u8 brightness;
+	u8 sat;
+	u8 hue;
+} __attribute__ ((packed));
+
+struct isp2x_ie_cfg {
+	u16 effect;
+	u16 color_sel;
+	u16 eff_mat_1;
+	u16 eff_mat_2;
+	u16 eff_mat_3;
+	u16 eff_mat_4;
+	u16 eff_mat_5;
+	u16 eff_tint;
+} __attribute__ ((packed));
+
+struct isp2x_rkiesharp_cfg {
+	u8 coring_thr;
+	u8 full_range;
+	u8 switch_avg;
+	u8 yavg_thr[4];
+	u8 delta1[5];
+	u8 delta2[5];
+	u8 maxnumber[5];
+	u8 minnumber[5];
+	u8 gauss_flat_coe[9];
+	u8 gauss_noise_coe[9];
+	u8 gauss_other_coe[9];
+	u8 line1_filter_coe[6];
+	u8 line2_filter_coe[9];
+	u8 line3_filter_coe[6];
+	u16 grad_seq[4];
+	u8 sharp_factor[5];
+	u8 uv_gauss_flat_coe[15];
+	u8 uv_gauss_noise_coe[15];
+	u8 uv_gauss_other_coe[15];
+	u8 lap_mat_coe[9];
+} __attribute__ ((packed));
+
+struct isp2x_superimp_cfg {
+	u8 transparency_mode;
+	u8 ref_image;
+
+	u16 offset_x;
+	u16 offset_y;
+
+	u8 y_comp;
+	u8 cb_comp;
+	u8 cr_comp;
+} __attribute__ ((packed));
+
+struct isp2x_gamma_corr_curve {
+	u16 gamma_y[ISP2X_DEGAMMA_CURVE_SIZE];
+} __attribute__ ((packed));
+
+struct isp2x_gamma_curve_x_axis_pnts {
+	u32 gamma_dx0;
+	u32 gamma_dx1;
+} __attribute__ ((packed));
+
+struct isp2x_sdg_cfg {
+	struct isp2x_gamma_corr_curve curve_r;
+	struct isp2x_gamma_corr_curve curve_g;
+	struct isp2x_gamma_corr_curve curve_b;
+	struct isp2x_gamma_curve_x_axis_pnts xa_pnts;
+} __attribute__ ((packed));
+
+struct isp2x_bdm_config {
+	u8 demosaic_th;
+} __attribute__ ((packed));
+
+struct isp2x_3dlut_cfg {
+	u8 dummy;
+} __attribute__ ((packed));
+
+struct isp2x_ctk_cfg {
+	u16 coeff0;
+	u16 coeff1;
+	u16 coeff2;
+	u16 coeff3;
+	u16 coeff4;
+	u16 coeff5;
+	u16 coeff6;
+	u16 coeff7;
+	u16 coeff8;
+	u16 ct_offset_r;
+	u16 ct_offset_g;
+	u16 ct_offset_b;
+} __attribute__ ((packed));
+
+struct isp2x_awb_gain_cfg {
+	u16 gain_red;
+	u16 gain_green_r;
+	u16 gain_blue;
+	u16 gain_green_b;
+} __attribute__ ((packed));
+
+struct isp2x_siawb_meas_cfg {
+	struct isp2x_window awb_wnd;
+	u8 awb_mode;
+	u8 max_y;
+	u8 min_y;
+	u8 max_csum;
+	u8 min_c;
+	u8 frames;
+	u8 awb_ref_cr;
+	u8 awb_ref_cb;
+	u8 enable_ymax_cmp;
+} __attribute__ ((packed));
+
+struct isp2x_rawawb_meas_cfg {
+	u8 rawawb_sel;
+	u8 sw_rawawb_meas_done;			//CTRL
+	u8 ro_rawawb_working;			//CTRL
+	u8 sw_rawawb_light_num;			//CTRL
+	u8 sw_rawawb_wind_size;			//CTRL
+	u8 sw_rawawb_c_range;			//CTRL
+	u8 sw_rawawb_y_range;			//CTRL
+	u8 sw_rawawb_3dyuv_ls_idx3;		//CTRL
+	u8 sw_rawawb_3dyuv_ls_idx2;		//CTRL
+	u8 sw_rawawb_3dyuv_ls_idx1;		//CTRL
+	u8 sw_rawawb_3dyuv_ls_idx0;		//CTRL
+	u8 sw_rawawb_xy_en;			//CTRL
+	u8 sw_rawawb_uv_en;			//CTRL
+	u8 sw_rawawb_en;			//CTRL
+	u8 sw_rawawb_blk_measure_mode;		//BLK_CTRL
+	u8 sw_rawawb_store_wp_flag_ls_idx2;	//BLK_CTRL
+	u8 sw_rawawb_store_wp_flag_ls_idx1;	//BLK_CTRL
+	u8 sw_rawawb_store_wp_flag_ls_idx0;	//BLK_CTRL
+	u16 sw_rawawb_v_offs;			//WIN_OFFS
+	u16 sw_rawawb_h_offs;			//WIN_OFFS
+	u16 sw_rawawb_v_size;			//WIN_SIZE
+	u16 sw_rawawb_h_size;			//WIN_SIZE
+	u16 sw_rawawb_g_max;			//LIMIT_RG_MAX
+	u16 sw_rawawb_r_max;			//LIMIT_RG_MAX
+	u16 sw_rawawb_y_max;			//LIMIT_BY_MAX
+	u16 sw_rawawb_b_max;			//LIMIT_BY_MAX
+	u16 sw_rawawb_g_min;			//LIMIT_RG_MIN
+	u16 sw_rawawb_r_min;			//LIMIT_RG_MIN
+	u16 sw_rawawb_y_min;			//LIMIT_BY_MIN
+	u16 sw_rawawb_b_min;			//LIMIT_BY_MIN
+	u16 sw_rawawb_coeff_y_g;		//RGB2Y_0
+	u16 sw_rawawb_coeff_y_r;		//RGB2Y_0
+	u16 sw_rawawb_coeff_y_b;		//RGB2Y_1
+	u16 sw_rawawb_coeff_u_g;		//RGB2U_0
+	u16 sw_rawawb_coeff_u_r;		//RGB2U_0
+	u16 sw_rawawb_coeff_u_b;		//RGB2U_1
+	u16 sw_rawawb_coeff_v_g;		//RGB2V_0
+	u16 sw_rawawb_coeff_v_r;		//RGB2V_0
+	u16 sw_rawawb_coeff_v_b;		//RGB2V_1
+	u16 sw_rawawb_vertex0_v_0;		//UV_DETC_VERTEX0_0
+	u16 sw_rawawb_vertex0_u_0;		//UV_DETC_VERTEX0_0
+	u16 sw_rawawb_vertex1_v_0;		//UV_DETC_VERTEX1_0
+	u16 sw_rawawb_vertex1_u_0;		//UV_DETC_VERTEX1_0
+	u16 sw_rawawb_vertex2_v_0;		//UV_DETC_VERTEX2_0
+	u16 sw_rawawb_vertex2_u_0;		//UV_DETC_VERTEX2_0
+	u16 sw_rawawb_vertex3_v_0;		//UV_DETC_VERTEX3_0
+	u16 sw_rawawb_vertex3_u_0;		//UV_DETC_VERTEX3_0
+	u32 sw_rawawb_islope01_0;		//UV_DETC_ISLOPE01_0
+	u32 sw_rawawb_islope12_0;		//UV_DETC_ISLOPE12_0
+	u32 sw_rawawb_islope23_0;		//UV_DETC_ISLOPE23_0
+	u32 sw_rawawb_islope30_0;		//UV_DETC_ISLOPE30_0
+	u16 sw_rawawb_vertex0_v_1;		//UV_DETC_VERTEX0_1
+	u16 sw_rawawb_vertex0_u_1;		//UV_DETC_VERTEX0_1
+	u16 sw_rawawb_vertex1_v_1;		//UV_DETC_VERTEX1_1
+	u16 sw_rawawb_vertex1_u_1;		//UV_DETC_VERTEX1_1
+	u16 sw_rawawb_vertex2_v_1;		//UV_DETC_VERTEX2_1
+	u16 sw_rawawb_vertex2_u_1;		//UV_DETC_VERTEX2_1
+	u16 sw_rawawb_vertex3_v_1;		//UV_DETC_VERTEX3_1
+	u16 sw_rawawb_vertex3_u_1;		//UV_DETC_VERTEX3_1
+	u32 sw_rawawb_islope01_1;		//UV_DETC_ISLOPE01_1
+	u32 sw_rawawb_islope12_1;		//UV_DETC_ISLOPE12_1
+	u32 sw_rawawb_islope23_1;		//UV_DETC_ISLOPE23_1
+	u32 sw_rawawb_islope30_1;		//UV_DETC_ISLOPE30_1
+	u16 sw_rawawb_vertex0_v_2;		//UV_DETC_VERTEX0_2
+	u16 sw_rawawb_vertex0_u_2;		//UV_DETC_VERTEX0_2
+	u16 sw_rawawb_vertex1_v_2;		//UV_DETC_VERTEX1_2
+	u16 sw_rawawb_vertex1_u_2;		//UV_DETC_VERTEX1_2
+	u16 sw_rawawb_vertex2_v_2;		//UV_DETC_VERTEX2_2
+	u16 sw_rawawb_vertex2_u_2;		//UV_DETC_VERTEX2_2
+	u16 sw_rawawb_vertex3_v_2;		//UV_DETC_VERTEX3_2
+	u16 sw_rawawb_vertex3_u_2;		//UV_DETC_VERTEX3_2
+	u32 sw_rawawb_islope01_2;		//UV_DETC_ISLOPE01_2
+	u32 sw_rawawb_islope12_2;		//UV_DETC_ISLOPE12_2
+	u32 sw_rawawb_islope23_2;		//UV_DETC_ISLOPE23_2
+	u32 sw_rawawb_islope30_2;		//UV_DETC_ISLOPE30_2
+	u16 sw_rawawb_vertex0_v_3;		//UV_DETC_VERTEX0_3
+	u16 sw_rawawb_vertex0_u_3;		//UV_DETC_VERTEX0_3
+	u16 sw_rawawb_vertex1_v_3;		//UV_DETC_VERTEX1_3
+	u16 sw_rawawb_vertex1_u_3;		//UV_DETC_VERTEX1_3
+	u16 sw_rawawb_vertex2_v_3;		//UV_DETC_VERTEX2_3
+	u16 sw_rawawb_vertex2_u_3;		//UV_DETC_VERTEX2_3
+	u16 sw_rawawb_vertex3_v_3;		//UV_DETC_VERTEX3_3
+	u16 sw_rawawb_vertex3_u_3;		//UV_DETC_VERTEX3_3
+	u32 sw_rawawb_islope01_3;		//UV_DETC_ISLOPE01_3
+	u32 sw_rawawb_islope12_3;		//UV_DETC_ISLOPE12_3
+	u32 sw_rawawb_islope23_3;		//UV_DETC_ISLOPE23_3
+	u32 sw_rawawb_islope30_3;		//UV_DETC_ISLOPE30_3
+	u16 sw_rawawb_vertex0_v_4;		//UV_DETC_VERTEX0_4
+	u16 sw_rawawb_vertex0_u_4;		//UV_DETC_VERTEX0_4
+	u16 sw_rawawb_vertex1_v_4;		//UV_DETC_VERTEX1_4
+	u16 sw_rawawb_vertex1_u_4;		//UV_DETC_VERTEX1_4
+	u16 sw_rawawb_vertex2_v_4;		//UV_DETC_VERTEX2_4
+	u16 sw_rawawb_vertex2_u_4;		//UV_DETC_VERTEX2_4
+	u16 sw_rawawb_vertex3_v_4;		//UV_DETC_VERTEX3_4
+	u16 sw_rawawb_vertex3_u_4;		//UV_DETC_VERTEX3_4
+	u32 sw_rawawb_islope01_4;		//UV_DETC_ISLOPE01_4
+	u32 sw_rawawb_islope12_4;		//UV_DETC_ISLOPE12_4
+	u32 sw_rawawb_islope23_4;		//UV_DETC_ISLOPE23_4
+	u32 sw_rawawb_islope30_4;		//UV_DETC_ISLOPE30_4
+	u16 sw_rawawb_vertex0_v_5;		//UV_DETC_VERTEX0_5
+	u16 sw_rawawb_vertex0_u_5;		//UV_DETC_VERTEX0_5
+	u16 sw_rawawb_vertex1_v_5;		//UV_DETC_VERTEX1_5
+	u16 sw_rawawb_vertex1_u_5;		//UV_DETC_VERTEX1_5
+	u16 sw_rawawb_vertex2_v_5;		//UV_DETC_VERTEX2_5
+	u16 sw_rawawb_vertex2_u_5;		//UV_DETC_VERTEX2_5
+	u16 sw_rawawb_vertex3_v_5;		//UV_DETC_VERTEX3_5
+	u16 sw_rawawb_vertex3_u_5;		//UV_DETC_VERTEX3_5
+	u32 sw_rawawb_islope01_5;		//UV_DETC_ISLOPE01_5
+	u32 sw_rawawb_islope12_5;		//UV_DETC_ISLOPE10_5
+	u32 sw_rawawb_islope23_5;		//UV_DETC_ISLOPE23_5
+	u32 sw_rawawb_islope30_5;		//UV_DETC_ISLOPE30_5
+	u16 sw_rawawb_vertex0_v_6;		//UV_DETC_VERTEX0_6
+	u16 sw_rawawb_vertex0_u_6;		//UV_DETC_VERTEX0_6
+	u16 sw_rawawb_vertex1_v_6;		//UV_DETC_VERTEX1_6
+	u16 sw_rawawb_vertex1_u_6;		//UV_DETC_VERTEX1_6
+	u16 sw_rawawb_vertex2_v_6;		//UV_DETC_VERTEX2_6
+	u16 sw_rawawb_vertex2_u_6;		//UV_DETC_VERTEX2_6
+	u16 sw_rawawb_vertex3_v_6;		//UV_DETC_VERTEX3_6
+	u16 sw_rawawb_vertex3_u_6;		//UV_DETC_VERTEX3_6
+	u32 sw_rawawb_islope01_6;		//UV_DETC_ISLOPE01_6
+	u32 sw_rawawb_islope12_6;		//UV_DETC_ISLOPE10_6
+	u32 sw_rawawb_islope23_6;		//UV_DETC_ISLOPE23_6
+	u32 sw_rawawb_islope30_6;		//UV_DETC_ISLOPE30_6
+	u32 sw_rawawb_b_uv_0;			//YUV_DETC_B_UV_0
+	u32 sw_rawawb_slope_vtcuv_0;		//YUV_DETC_SLOPE_VTCUV_0
+	u32 sw_rawawb_inv_dslope_0;		//YUV_DETC_INV_DSLOPE_0
+	u32 sw_rawawb_slope_ydis_0;		//YUV_DETC_SLOPE_YDIS_0
+	u32 sw_rawawb_b_ydis_0;			//YUV_DETC_B_YDIS_0
+	u32 sw_rawawb_b_uv_1;			//YUV_DETC_B_UV_1
+	u32 sw_rawawb_slope_vtcuv_1;		//YUV_DETC_SLOPE_VTCUV_1
+	u32 sw_rawawb_inv_dslope_1;		//YUV_DETC_INV_DSLOPE_1
+	u32 sw_rawawb_slope_ydis_1;		//YUV_DETC_SLOPE_YDIS_1
+	u32 sw_rawawb_b_ydis_1;			//YUV_DETC_B_YDIS_1
+	u32 sw_rawawb_b_uv_2;			//YUV_DETC_B_UV_2
+	u32 sw_rawawb_slope_vtcuv_2;		//YUV_DETC_SLOPE_VTCUV_2
+	u32 sw_rawawb_inv_dslope_2;		//YUV_DETC_INV_DSLOPE_2
+	u32 sw_rawawb_slope_ydis_2;		//YUV_DETC_SLOPE_YDIS_2
+	u32 sw_rawawb_b_ydis_2;			//YUV_DETC_B_YDIS_2
+	u32 sw_rawawb_b_uv_3;			//YUV_DETC_B_UV_3
+	u32 sw_rawawb_slope_vtcuv_3;		//YUV_DETC_SLOPE_VTCUV_3
+	u32 sw_rawawb_inv_dslope_3;		//YUV_DETC_INV_DSLOPE_3
+	u32 sw_rawawb_slope_ydis_3;		//YUV_DETC_SLOPE_YDIS_3
+	u32 sw_rawawb_b_ydis_3;			//YUV_DETC_B_YDIS_3
+	u32 sw_rawawb_ref_u;			//YUV_DETC_REF_U
+	u8 sw_rawawb_ref_v_3;			//YUV_DETC_REF_V_1
+	u8 sw_rawawb_ref_v_2;			//YUV_DETC_REF_V_1
+	u8 sw_rawawb_ref_v_1;			//YUV_DETC_REF_V_1
+	u8 sw_rawawb_ref_v_0;			//YUV_DETC_REF_V_1
+	u16 sw_rawawb_dis1_0;			//YUV_DETC_DIS01_0
+	u16 sw_rawawb_dis0_0;			//YUV_DETC_DIS01_0
+	u16 sw_rawawb_dis3_0;			//YUV_DETC_DIS23_0
+	u16 sw_rawawb_dis2_0;			//YUV_DETC_DIS23_0
+	u16 sw_rawawb_dis5_0;			//YUV_DETC_DIS45_0
+	u16 sw_rawawb_dis4_0;			//YUV_DETC_DIS45_0
+	u8 sw_rawawb_th3_0;			//YUV_DETC_TH03_0
+	u8 sw_rawawb_th2_0;			//YUV_DETC_TH03_0
+	u8 sw_rawawb_th1_0;			//YUV_DETC_TH03_0
+	u8 sw_rawawb_th0_0;			//YUV_DETC_TH03_0
+	u8 sw_rawawb_th5_0;			//YUV_DETC_TH45_0
+	u8 sw_rawawb_th4_0;			//YUV_DETC_TH45_0
+	u16 sw_rawawb_dis1_1;			//YUV_DETC_DIS01_1
+	u16 sw_rawawb_dis0_1;			//YUV_DETC_DIS01_1
+	u16 sw_rawawb_dis3_1;			//YUV_DETC_DIS23_1
+	u16 sw_rawawb_dis2_1;			//YUV_DETC_DIS23_1
+	u16 sw_rawawb_dis5_1;			//YUV_DETC_DIS45_1
+	u16 sw_rawawb_dis4_1;			//YUV_DETC_DIS45_1
+	u8 sw_rawawb_th3_1;			//YUV_DETC_TH03_1
+	u8 sw_rawawb_th2_1;			//YUV_DETC_TH03_1
+	u8 sw_rawawb_th1_1;			//YUV_DETC_TH03_1
+	u8 sw_rawawb_th0_1;			//YUV_DETC_TH03_1
+	u8 sw_rawawb_th5_1;			//YUV_DETC_TH45_1
+	u8 sw_rawawb_th4_1;			//YUV_DETC_TH45_1
+	u16 sw_rawawb_dis1_2;			//YUV_DETC_DIS01_2
+	u16 sw_rawawb_dis0_2;			//YUV_DETC_DIS01_2
+	u16 sw_rawawb_dis3_2;			//YUV_DETC_DIS23_2
+	u16 sw_rawawb_dis2_2;			//YUV_DETC_DIS23_2
+	u16 sw_rawawb_dis5_2;			//YUV_DETC_DIS45_2
+	u16 sw_rawawb_dis4_2;			//YUV_DETC_DIS45_2
+	u8 sw_rawawb_th3_2;			//YUV_DETC_TH03_2
+	u8 sw_rawawb_th2_2;			//YUV_DETC_TH03_2
+	u8 sw_rawawb_th1_2;			//YUV_DETC_TH03_2
+	u8 sw_rawawb_th0_2;			//YUV_DETC_TH03_2
+	u8 sw_rawawb_th5_2;			//YUV_DETC_TH45_2
+	u8 sw_rawawb_th4_2;			//YUV_DETC_TH45_2
+	u16 sw_rawawb_dis1_3;			//YUV_DETC_DIS01_3
+	u16 sw_rawawb_dis0_3;			//YUV_DETC_DIS01_3
+	u16 sw_rawawb_dis3_3;			//YUV_DETC_DIS23_3
+	u16 sw_rawawb_dis2_3;			//YUV_DETC_DIS23_3
+	u16 sw_rawawb_dis5_3;			//YUV_DETC_DIS45_3
+	u16 sw_rawawb_dis4_3;			//YUV_DETC_DIS45_3
+	u8 sw_rawawb_th3_3;			//YUV_DETC_TH03_3
+	u8 sw_rawawb_th2_3;			//YUV_DETC_TH03_3
+	u8 sw_rawawb_th1_3;			//YUV_DETC_TH03_3
+	u8 sw_rawawb_th0_3;			//YUV_DETC_TH03_3
+	u8 sw_rawawb_th5_3;			//YUV_DETC_TH45_3
+	u8 sw_rawawb_th4_3;			//YUV_DETC_TH45_3
+	u16 sw_rawawb_wt1;			//RGB2XY_WT01
+	u16 sw_rawawb_wt0;			//RGB2XY_WT01
+	u16 sw_rawawb_wt2;			//RGB2XY_WT2
+	u16 sw_rawawb_mat0_y;			//RGB2XY_MAT0_XY
+	u16 sw_rawawb_mat0_x;			//RGB2XY_MAT0_XY
+	u16 sw_rawawb_mat1_y;			//RGB2XY_MAT1_XY
+	u16 sw_rawawb_mat1_x;			//RGB2XY_MAT1_XY
+	u16 sw_rawawb_mat2_y;			//RGB2XY_MAT2_XY
+	u16 sw_rawawb_mat2_x;			//RGB2XY_MAT2_XY
+	u16 sw_rawawb_nor_x1_0;			//XY_DETC_NOR_X_0
+	u16 sw_rawawb_nor_x0_0;			//XY_DETC_NOR_X_0
+	u16 sw_rawawb_nor_y1_0;			//XY_DETC_NOR_Y_0
+	u16 sw_rawawb_nor_y0_0;			//XY_DETC_NOR_Y_0
+	u16 sw_rawawb_big_x1_0;			//XY_DETC_BIG_X_0
+	u16 sw_rawawb_big_x0_0;			//XY_DETC_BIG_X_0
+	u16 sw_rawawb_big_y1_0;			//XY_DETC_BIG_Y_0
+	u16 sw_rawawb_big_y0_0;			//XY_DETC_BIG_Y_0
+	u16 sw_rawawb_sma_x1_0;			//XY_DETC_SMA_X_0
+	u16 sw_rawawb_sma_x0_0;			//XY_DETC_SMA_X_0
+	u16 sw_rawawb_sma_y1_0;			//XY_DETC_SMA_Y_0
+	u16 sw_rawawb_sma_y0_0;			//XY_DETC_SMA_Y_0
+	u16 sw_rawawb_nor_x1_1;			//XY_DETC_NOR_X_1
+	u16 sw_rawawb_nor_x0_1;			//XY_DETC_NOR_X_1
+	u16 sw_rawawb_nor_y1_1;			//XY_DETC_NOR_Y_1
+	u16 sw_rawawb_nor_y0_1;			//XY_DETC_NOR_Y_1
+	u16 sw_rawawb_big_x1_1;			//XY_DETC_BIG_X_1
+	u16 sw_rawawb_big_x0_1;			//XY_DETC_BIG_X_1
+	u16 sw_rawawb_big_y1_1;			//XY_DETC_BIG_Y_1
+	u16 sw_rawawb_big_y0_1;			//XY_DETC_BIG_Y_1
+	u16 sw_rawawb_sma_x1_1;			//XY_DETC_SMA_X_1
+	u16 sw_rawawb_sma_x0_1;			//XY_DETC_SMA_X_1
+	u16 sw_rawawb_sma_y1_1;			//XY_DETC_SMA_Y_1
+	u16 sw_rawawb_sma_y0_1;			//XY_DETC_SMA_Y_1
+	u16 sw_rawawb_nor_x1_2;			//XY_DETC_NOR_X_2
+	u16 sw_rawawb_nor_x0_2;			//XY_DETC_NOR_X_2
+	u16 sw_rawawb_nor_y1_2;			//XY_DETC_NOR_Y_2
+	u16 sw_rawawb_nor_y0_2;			//XY_DETC_NOR_Y_2
+	u16 sw_rawawb_big_x1_2;			//XY_DETC_BIG_X_2
+	u16 sw_rawawb_big_x0_2;			//XY_DETC_BIG_X_2
+	u16 sw_rawawb_big_y1_2;			//XY_DETC_BIG_Y_2
+	u16 sw_rawawb_big_y0_2;			//XY_DETC_BIG_Y_2
+	u16 sw_rawawb_sma_x1_2;			//XY_DETC_SMA_X_2
+	u16 sw_rawawb_sma_x0_2;			//XY_DETC_SMA_X_2
+	u16 sw_rawawb_sma_y1_2;			//XY_DETC_SMA_Y_2
+	u16 sw_rawawb_sma_y0_2;			//XY_DETC_SMA_Y_2
+	u16 sw_rawawb_nor_x1_3;			//XY_DETC_NOR_X_3
+	u16 sw_rawawb_nor_x0_3;			//XY_DETC_NOR_X_3
+	u16 sw_rawawb_nor_y1_3;			//XY_DETC_NOR_Y_3
+	u16 sw_rawawb_nor_y0_3;			//XY_DETC_NOR_Y_3
+	u16 sw_rawawb_big_x1_3;			//XY_DETC_BIG_X_3
+	u16 sw_rawawb_big_x0_3;			//XY_DETC_BIG_X_3
+	u16 sw_rawawb_big_y1_3;			//XY_DETC_BIG_Y_3
+	u16 sw_rawawb_big_y0_3;			//XY_DETC_BIG_Y_3
+	u16 sw_rawawb_sma_x1_3;			//XY_DETC_SMA_X_3
+	u16 sw_rawawb_sma_x0_3;			//XY_DETC_SMA_X_3
+	u16 sw_rawawb_sma_y1_3;			//XY_DETC_SMA_Y_3
+	u16 sw_rawawb_sma_y0_3;			//XY_DETC_SMA_Y_3
+	u16 sw_rawawb_nor_x1_4;			//XY_DETC_NOR_X_4
+	u16 sw_rawawb_nor_x0_4;			//XY_DETC_NOR_X_4
+	u16 sw_rawawb_nor_y1_4;			//XY_DETC_NOR_Y_4
+	u16 sw_rawawb_nor_y0_4;			//XY_DETC_NOR_Y_4
+	u16 sw_rawawb_big_x1_4;			//XY_DETC_BIG_X_4
+	u16 sw_rawawb_big_x0_4;			//XY_DETC_BIG_X_4
+	u16 sw_rawawb_big_y1_4;			//XY_DETC_BIG_Y_4
+	u16 sw_rawawb_big_y0_4;			//XY_DETC_BIG_Y_4
+	u16 sw_rawawb_sma_x1_4;			//XY_DETC_SMA_X_4
+	u16 sw_rawawb_sma_x0_4;			//XY_DETC_SMA_X_4
+	u16 sw_rawawb_sma_y1_4;			//XY_DETC_SMA_Y_4
+	u16 sw_rawawb_sma_y0_4;			//XY_DETC_SMA_Y_4
+	u16 sw_rawawb_nor_x1_5;			//XY_DETC_NOR_X_5
+	u16 sw_rawawb_nor_x0_5;			//XY_DETC_NOR_X_5
+	u16 sw_rawawb_nor_y1_5;			//XY_DETC_NOR_Y_5
+	u16 sw_rawawb_nor_y0_5;			//XY_DETC_NOR_Y_5
+	u16 sw_rawawb_big_x1_5;			//XY_DETC_BIG_X_5
+	u16 sw_rawawb_big_x0_5;			//XY_DETC_BIG_X_5
+	u16 sw_rawawb_big_y1_5;			//XY_DETC_BIG_Y_5
+	u16 sw_rawawb_big_y0_5;			//XY_DETC_BIG_Y_5
+	u16 sw_rawawb_sma_x1_5;			//XY_DETC_SMA_X_5
+	u16 sw_rawawb_sma_x0_5;			//XY_DETC_SMA_X_5
+	u16 sw_rawawb_sma_y1_5;			//XY_DETC_SMA_Y_5
+	u16 sw_rawawb_sma_y0_5;			//XY_DETC_SMA_Y_5
+	u16 sw_rawawb_nor_x1_6;			//XY_DETC_NOR_X_6
+	u16 sw_rawawb_nor_x0_6;			//XY_DETC_NOR_X_6
+	u16 sw_rawawb_nor_y1_6;			//XY_DETC_NOR_Y_6
+	u16 sw_rawawb_nor_y0_6;			//XY_DETC_NOR_Y_6
+	u16 sw_rawawb_big_x1_6;			//XY_DETC_BIG_X_6
+	u16 sw_rawawb_big_x0_6;			//XY_DETC_BIG_X_6
+	u16 sw_rawawb_big_y1_6;			//XY_DETC_BIG_Y_6
+	u16 sw_rawawb_big_y0_6;			//XY_DETC_BIG_Y_6
+	u16 sw_rawawb_sma_x1_6;			//XY_DETC_SMA_X_6
+	u16 sw_rawawb_sma_x0_6;			//XY_DETC_SMA_X_6
+	u16 sw_rawawb_sma_y1_6;			//XY_DETC_SMA_Y_6
+	u16 sw_rawawb_sma_y0_6;			//XY_DETC_SMA_Y_6
+	u8 sw_rawawb_multiwindow_en;		//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region6_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region6_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region6_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region5_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region5_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region5_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region4_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region4_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region4_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region3_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region3_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region3_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region2_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region2_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region2_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region1_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region1_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region1_excen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region0_domain;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region0_measen;	//MULTIWINDOW_EXC_CTRL
+	u8 sw_rawawb_exc_wp_region0_excen;	//MULTIWINDOW_EXC_CTRL
+	u16 sw_rawawb_multiwindow0_v_offs;	//MULTIWINDOW0_OFFS
+	u16 sw_rawawb_multiwindow0_h_offs;	//MULTIWINDOW0_OFFS
+	u16 sw_rawawb_multiwindow0_v_size;	//MULTIWINDOW0_SIZE
+	u16 sw_rawawb_multiwindow0_h_size;	//MULTIWINDOW0_SIZE
+	u16 sw_rawawb_multiwindow1_v_offs;	//MULTIWINDOW1_OFFS
+	u16 sw_rawawb_multiwindow1_h_offs;	//MULTIWINDOW1_OFFS
+	u16 sw_rawawb_multiwindow1_v_size;	//MULTIWINDOW1_SIZE
+	u16 sw_rawawb_multiwindow1_h_size;	//MULTIWINDOW1_SIZE
+	u16 sw_rawawb_multiwindow2_v_offs;	//MULTIWINDOW2_OFFS
+	u16 sw_rawawb_multiwindow2_h_offs;	//MULTIWINDOW2_OFFS
+	u16 sw_rawawb_multiwindow2_v_size;	//MULTIWINDOW2_SIZE
+	u16 sw_rawawb_multiwindow2_h_size;	//MULTIWINDOW2_SIZE
+	u16 sw_rawawb_multiwindow3_v_offs;	//MULTIWINDOW3_OFFS
+	u16 sw_rawawb_multiwindow3_h_offs;	//MULTIWINDOW3_OFFS
+	u16 sw_rawawb_multiwindow3_v_size;	//MULTIWINDOW3_SIZE
+	u16 sw_rawawb_multiwindow3_h_size;	//MULTIWINDOW3_SIZE
+	u16 sw_rawawb_multiwindow4_v_offs;	//MULTIWINDOW4_OFFS
+	u16 sw_rawawb_multiwindow4_h_offs;	//MULTIWINDOW4_OFFS
+	u16 sw_rawawb_multiwindow4_v_size;	//MULTIWINDOW4_SIZE
+	u16 sw_rawawb_multiwindow4_h_size;	//MULTIWINDOW4_SIZE
+	u16 sw_rawawb_multiwindow5_v_offs;	//MULTIWINDOW5_OFFS
+	u16 sw_rawawb_multiwindow5_h_offs;	//MULTIWINDOW5_OFFS
+	u16 sw_rawawb_multiwindow5_v_size;	//MULTIWINDOW5_SIZE
+	u16 sw_rawawb_multiwindow5_h_size;	//MULTIWINDOW5_SIZE
+	u16 sw_rawawb_multiwindow6_v_offs;	//MULTIWINDOW6_OFFS
+	u16 sw_rawawb_multiwindow6_h_offs;	//MULTIWINDOW6_OFFS
+	u16 sw_rawawb_multiwindow6_v_size;	//MULTIWINDOW6_SIZE
+	u16 sw_rawawb_multiwindow6_h_size;	//MULTIWINDOW6_SIZE
+	u16 sw_rawawb_multiwindow7_v_offs;	//MULTIWINDOW7_OFFS
+	u16 sw_rawawb_multiwindow7_h_offs;	//MULTIWINDOW7_OFFS
+	u16 sw_rawawb_multiwindow7_v_size;	//MULTIWINDOW7_SIZE
+	u16 sw_rawawb_multiwindow7_h_size;	//MULTIWINDOW7_SIZE
+	u16 sw_rawawb_exc_wp_region0_xu1;	//EXC_WP_REGION0_XU
+	u16 sw_rawawb_exc_wp_region0_xu0;	//EXC_WP_REGION0_XU
+	u16 sw_rawawb_exc_wp_region0_yv1;	//EXC_WP_REGION0_YV
+	u16 sw_rawawb_exc_wp_region0_yv0;	//EXC_WP_REGION0_YV
+	u16 sw_rawawb_exc_wp_region1_xu1;	//EXC_WP_REGION1_XU
+	u16 sw_rawawb_exc_wp_region1_xu0;	//EXC_WP_REGION1_XU
+	u16 sw_rawawb_exc_wp_region1_yv1;	//EXC_WP_REGION1_YV
+	u16 sw_rawawb_exc_wp_region1_yv0;	//EXC_WP_REGION1_YV
+	u16 sw_rawawb_exc_wp_region2_xu1;	//EXC_WP_REGION2_XU
+	u16 sw_rawawb_exc_wp_region2_xu0;	//EXC_WP_REGION2_XU
+	u16 sw_rawawb_exc_wp_region2_yv1;	//EXC_WP_REGION2_YV
+	u16 sw_rawawb_exc_wp_region2_yv0;	//EXC_WP_REGION2_YV
+	u16 sw_rawawb_exc_wp_region3_xu1;	//EXC_WP_REGION3_XU
+	u16 sw_rawawb_exc_wp_region3_xu0;	//EXC_WP_REGION3_XU
+	u16 sw_rawawb_exc_wp_region3_yv1;	//EXC_WP_REGION3_YV
+	u16 sw_rawawb_exc_wp_region3_yv0;	//EXC_WP_REGION3_YV
+	u16 sw_rawawb_exc_wp_region4_xu1;	//EXC_WP_REGION4_XU
+	u16 sw_rawawb_exc_wp_region4_xu0;	//EXC_WP_REGION4_XU
+	u16 sw_rawawb_exc_wp_region4_yv1;	//EXC_WP_REGION4_YV
+	u16 sw_rawawb_exc_wp_region4_yv0;	//EXC_WP_REGION4_YV
+	u16 sw_rawawb_exc_wp_region5_xu1;	//EXC_WP_REGION5_XU
+	u16 sw_rawawb_exc_wp_region5_xu0;	//EXC_WP_REGION5_XU
+	u16 sw_rawawb_exc_wp_region5_yv1;	//EXC_WP_REGION5_YV
+	u16 sw_rawawb_exc_wp_region5_yv0;	//EXC_WP_REGION5_YV
+	u16 sw_rawawb_exc_wp_region6_xu1;	//EXC_WP_REGION6_XU
+	u16 sw_rawawb_exc_wp_region6_xu0;	//EXC_WP_REGION6_XU
+	u16 sw_rawawb_exc_wp_region6_yv1;	//EXC_WP_REGION6_YV
+	u16 sw_rawawb_exc_wp_region6_yv0;	//EXC_WP_REGION6_YV
+} __attribute__ ((packed));
+
+struct isp2x_rawaebig_meas_cfg {
+	u8 rawae_sel;
+	u8 wnd_num;
+	u8 subwin_en[ISP2X_RAWAEBIG_SUBWIN_NUM];
+	struct isp2x_window win;
+	struct isp2x_window subwin[ISP2X_RAWAEBIG_SUBWIN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawaelite_meas_cfg {
+	u8 rawae_sel;
+	u8 wnd_num;
+	u8 off;
+	u8 bcc;
+	u8 gcc;
+	u8 rcc;
+	struct isp2x_window win;
+} __attribute__ ((packed));
+
+struct isp2x_yuvae_meas_cfg {
+	u8 ysel;
+	u8 wnd_num;
+	u8 subwin_en[ISP2X_YUVAE_SUBWIN_NUM];
+	struct isp2x_window win;
+	struct isp2x_window subwin[ISP2X_YUVAE_SUBWIN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawaf_meas_cfg {
+	u8 rawaf_sel;
+	u8 num_afm_win;
+	u8 gaus_en;
+	u8 gamma_en;
+	struct isp2x_window win[ISP2X_RAWAF_WIN_NUM];
+	u8 line_en[ISP2X_RAWAF_LINE_NUM];
+	u8 line_num[ISP2X_RAWAF_LINE_NUM];
+	u8 gaus_coe_h2;
+	u8 gaus_coe_h1;
+	u8 gaus_coe_h0;
+	u16 afm_thres;
+	u8 lum_var_shift[ISP2X_RAWAF_WIN_NUM];
+	u8 afm_var_shift[ISP2X_RAWAF_WIN_NUM];
+	u16 gamma_y[ISP2X_RAWAF_GAMMA_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_siaf_win_cfg {
+	u8 sum_shift;
+	u8 lum_shift;
+	struct isp2x_window win;
+} __attribute__ ((packed));
+
+struct isp2x_siaf_cfg {
+	u8 num_afm_win;
+	u32 thres;
+	struct isp2x_siaf_win_cfg afm_win[ISP2X_AFM_MAX_WINDOWS];
+} __attribute__ ((packed));
+
+struct isp2x_rawhistbig_cfg {
+	u8 wnd_num;
+	u8 data_sel;
+	u8 waterline;
+	u8 mode;
+	u8 stepsize;
+	u8 off;
+	u8 bcc;
+	u8 gcc;
+	u8 rcc;
+	struct isp2x_window win;
+	u8 weight[ISP2X_RAWHISTBIG_SUBWIN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawhistlite_cfg {
+	u8 data_sel;
+	u8 waterline;
+	u8 mode;
+	u8 stepsize;
+	u8 off;
+	u8 bcc;
+	u8 gcc;
+	u8 rcc;
+	struct isp2x_window win;
+	u8 weight[ISP2X_RAWHISTLITE_SUBWIN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_sihst_win_cfg {
+	u8 data_sel;
+	u8 waterline;
+	u8 auto_stop;
+	u8 mode;
+	u8 stepsize;
+	struct isp2x_window win;
+} __attribute__ ((packed));
+
+struct isp2x_sihst_cfg {
+	u8 wnd_num;
+	struct isp2x_sihst_win_cfg win_cfg[ISP2X_HIST_WIN_NUM];
+	u8 hist_weight[ISP2X_HIST_WEIGHT_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_isp_other_cfg {
+	struct isp2x_bls_cfg bls_cfg;
+	struct isp2x_dpcc_cfg dpcc_cfg;
+	struct isp2x_hdrmge_cfg hdrmge_cfg;
+	struct isp2x_rawnr_cfg rawnr_cfg;
+	struct isp2x_lsc_cfg lsc_cfg;
+	struct isp2x_awb_gain_cfg awb_gain_cfg;
+	struct isp2x_goc_cfg goc_cfg;
+	struct isp2x_gic_cfg gic_cfg;
+	struct isp2x_debayer_cfg debayer_cfg;
+	struct isp2x_ccm_cfg ccm_cfg;
+	struct isp2x_gammaout_cfg gammaout_cfg;
+	struct isp2x_wdr_cfg wdr_cfg;
+	struct isp2x_cproc_cfg cproc_cfg;
+	struct isp2x_ie_cfg ie_cfg;
+	struct isp2x_rkiesharp_cfg rkiesharp_cfg;
+	struct isp2x_superimp_cfg superimp_cfg;
+	struct isp2x_sdg_cfg sdg_cfg;
+	struct isp2x_ctk_cfg ctk_cfg;
+	struct isp2x_bdm_config bdm_cfg;
+	struct isp2x_hdrtmo_cfg hdrtmo_cfg;
+	struct isp2x_dhaz_cfg dhaz_cfg;
+	struct isp2x_3dlut_cfg isp3dlut_cfg;
+} __attribute__ ((packed));
+
+struct isp2x_isp_meas_cfg {
+	struct isp2x_siawb_meas_cfg siawb;
+	struct isp2x_rawawb_meas_cfg rawawb;
+	struct isp2x_rawaebig_meas_cfg rawaebig1;
+	struct isp2x_rawaebig_meas_cfg rawaebig2;
+	struct isp2x_rawaebig_meas_cfg rawaebig3;
+	struct isp2x_rawaelite_meas_cfg rawaelite;
+	struct isp2x_yuvae_meas_cfg yuvae;
+	struct isp2x_rawaf_meas_cfg rawaf;
+	struct isp2x_siaf_cfg siaf;
+	struct isp2x_rawhistbig_cfg rawhstbig1;
+	struct isp2x_rawhistbig_cfg rawhstbig2;
+	struct isp2x_rawhistbig_cfg rawhstbig3;
+	struct isp2x_rawhistlite_cfg rawhstlite;
+	struct isp2x_sihst_cfg sihst;
+} __attribute__ ((packed));
+
+struct isp2x_isp_params_cfg {
+	u64 module_en_update;
+	u64 module_ens;
+	u64 module_cfg_update;
+
+	struct isp2x_isp_meas_cfg meas;
+	struct isp2x_isp_other_cfg others;
+} __attribute__ ((packed));
+
+struct isp2x_siawb_meas {
+	u32 cnt;
+	u8 mean_y_or_g;
+	u8 mean_cb_or_b;
+	u8 mean_cr_or_r;
+} __attribute__ ((packed));
+
+struct isp2x_siawb_stat {
+	struct isp2x_siawb_meas awb_mean[ISP2X_AWB_MAX_GRID];
+} __attribute__ ((packed));
+
+struct isp2x_rawawb_ramdata {
+	u32 wp;
+	u32 r;
+	u32 g;
+	u32 b;
+};
+
+struct isp2x_rawawb_meas_stat {
+	u32 ro_rawawb_sum_r_nor[ISP2X_RAWAWB_SUM_NUM];		//SUM_R_NOR_0
+	u32 ro_rawawb_sum_g_nor[ISP2X_RAWAWB_SUM_NUM];		//SUM_G_NOR_0
+	u32 ro_rawawb_sum_b_nor[ISP2X_RAWAWB_SUM_NUM];		//SUM_B_NOR_0
+	u32 ro_rawawb_wp_num_nor[ISP2X_RAWAWB_SUM_NUM];		//WP_NUM_NOR_0
+	u32 ro_rawawb_sum_r_big[ISP2X_RAWAWB_SUM_NUM];		//SUM_R_BIG_0
+	u32 ro_rawawb_sum_g_big[ISP2X_RAWAWB_SUM_NUM];		//SUM_G_BIG_0
+	u32 ro_rawawb_sum_b_big[ISP2X_RAWAWB_SUM_NUM];		//SUM_B_BIG_0
+	u32 ro_rawawb_wp_num_big[ISP2X_RAWAWB_SUM_NUM];		//WP_NUM_BIG_0
+	u32 ro_rawawb_sum_r_sma[ISP2X_RAWAWB_SUM_NUM];		//SUM_R_SMA_0
+	u32 ro_rawawb_sum_g_sma[ISP2X_RAWAWB_SUM_NUM];		//SUM_G_SMA_0
+	u32 ro_rawawb_sum_b_sma[ISP2X_RAWAWB_SUM_NUM];		//SUM_B_SMA_0
+	u32 ro_rawawb_wp_num_sma[ISP2X_RAWAWB_SUM_NUM];
+	u32 ro_sum_r_nor_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_R_NOR_MULTIWINDOW_0
+	u32 ro_sum_g_nor_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_G_NOR_MULTIWINDOW_0
+	u32 ro_sum_b_nor_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_B_NOR_MULTIWINDOW_0
+	u32 ro_wp_nm_nor_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//WP_NM_NOR_MULTIWINDOW_0
+	u32 ro_sum_r_big_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_R_BIG_MULTIWINDOW_0
+	u32 ro_sum_g_big_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_G_BIG_MULTIWINDOW_0
+	u32 ro_sum_b_big_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_B_BIG_MULTIWINDOW_0
+	u32 ro_wp_nm_big_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//WP_NM_BIG_MULTIWINDOW_0
+	u32 ro_sum_r_sma_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_R_SMA_MULTIWINDOW_0
+	u32 ro_sum_g_sma_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_G_SMA_MULTIWINDOW_0
+	u32 ro_sum_b_sma_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//SUM_B_SMA_MULTIWINDOW_0
+	u32 ro_wp_nm_sma_multiwindow[ISP2X_RAWAWB_MULWD_NUM];	//WP_NM_SMA_MULTIWINDOW_0
+	u32 ro_sum_r_exc[ISP2X_RAWAWB_SUM_NUM];
+	u32 ro_sum_g_exc[ISP2X_RAWAWB_SUM_NUM];
+	u32 ro_sum_b_exc[ISP2X_RAWAWB_SUM_NUM];
+	u32 ro_wp_nm_exc[ISP2X_RAWAWB_SUM_NUM];
+	struct isp2x_rawawb_ramdata ramdata[ISP2X_RAWAWB_RAMDATA_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawae_meas_data {
+	u16 channelr_xy;
+	u16 channelb_xy;
+	u16 channelg_xy;
+};
+
+struct isp2x_rawaebig_stat {
+	u32 sumr[ISP2X_RAWAEBIG_SUBWIN_NUM];
+	u32 sumg[ISP2X_RAWAEBIG_SUBWIN_NUM];
+	u32 sumb[ISP2X_RAWAEBIG_SUBWIN_NUM];
+	struct isp2x_rawae_meas_data data[ISP2X_RAWAEBIG_MEAN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawaelite_stat {
+	struct isp2x_rawae_meas_data data[ISP2X_RAWAELITE_MEAN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_yuvae_stat {
+	u32 ro_yuvae_sumy[ISP2X_YUVAE_SUBWIN_NUM];
+	u8 mean[ISP2X_YUVAE_MEAN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_rawaf_stat {
+	u32 int_state;
+	u32 afm_sum[ISP2X_RAWAF_WIN_NUM];
+	u32 afm_lum[ISP2X_RAWAF_WIN_NUM];
+	u32 ramdata[ISP2X_RAWAF_SUMDATA_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_siaf_meas_val {
+	u32 sum;
+	u32 lum;
+} __attribute__ ((packed));
+
+struct isp2x_siaf_stat {
+	struct isp2x_siaf_meas_val win[ISP2X_AFM_MAX_WINDOWS];
+} __attribute__ ((packed));
+
+struct isp2x_rawhistbig_stat {
+	u32 hist_bin[ISP2X_HIST_BIN_N_MAX];
+} __attribute__ ((packed));
+
+struct isp2x_rawhistlite_stat {
+	u32 hist_bin[ISP2X_HIST_BIN_N_MAX];
+} __attribute__ ((packed));
+
+struct isp2x_sihst_win_stat {
+	u32 hist_bins[ISP2X_HIST_BIN_N_MAX];
+} __attribute__ ((packed));
+
+struct isp2x_sihst_stat {
+	struct isp2x_sihst_win_stat win_stat[ISP2X_HIST_WIN_NUM];
+} __attribute__ ((packed));
+
+struct isp2x_stat {
+	struct isp2x_siawb_stat siawb;
+	struct isp2x_rawawb_meas_stat rawawb;
+	struct isp2x_rawaebig_stat rawaebig1;
+	struct isp2x_rawaebig_stat rawaebig2;
+	struct isp2x_rawaebig_stat rawaebig3;
+	struct isp2x_rawaelite_stat rawaelite;
+	struct isp2x_yuvae_stat yuvae;
+	struct isp2x_rawaf_stat rawaf;
+	struct isp2x_siaf_stat siaf;
+	struct isp2x_rawhistbig_stat rawhistbig1;
+	struct isp2x_rawhistbig_stat rawhistbig2;
+	struct isp2x_rawhistbig_stat rawhistbig3;
+	struct isp2x_rawhistlite_stat rawhistlite;
+	struct isp2x_sihst_stat sihst;
+
+	struct isp2x_bls_stat bls;
+	struct isp2x_hdrtmo_stat hdrtmo;
+	struct isp2x_wdr_stat wdr;
+	struct isp2x_dhaz_stat dhaz;
+} __attribute__ ((packed));
+
+/**
+ * struct rkisp_isp2x_stat_buffer - Rockchip ISP2 Statistics Meta Data
+ *
+ * @meas_type: measurement types (CIFISP_STAT_ definitions)
+ * @frame_id: frame ID for sync
+ * @params: statistics data
+ */
+struct rkisp_isp2x_stat_buffer {
+	unsigned int meas_type;
+	unsigned int frame_id;
+	struct isp2x_stat params;
+} __attribute__ ((packed));
+
+#endif /* _UAPI_RKISP2_CONFIG_H */
-- 
2.35.3

