From 7a96299fce27fb6fb43e7ad8b4e1765c1c941967 Mon Sep 17 00:00:00 2001
From: Xu Hongfei <xuhf@rock-chips.com>
Date: Wed, 3 Feb 2021 15:28:34 +0800
Subject: [PATCH] media: rockchip: isp: support output isp/ispp reg in nv12
 format

used by follow steps :
1. echo Y > /sys/module/video_rkispp/parameters/sendreg_withstream
2. echo videoX > /sys/module/video_rkispp/parameters/sendreg_withstream_video_name

Signed-off-by: Xu Hongfei <xuhf@rock-chips.com>
Change-Id: I68f332accc6d617d46289727fe50c93f62fe67c3
---
 drivers/media/platform/rockchip/isp/bridge.c  | 83 ++++++++++++++-----
 drivers/media/platform/rockchip/isp/bridge.h  |  7 ++
 drivers/media/platform/rockchip/ispp/common.c | 21 +++--
 drivers/media/platform/rockchip/ispp/common.h |  5 +-
 drivers/media/platform/rockchip/ispp/dev.c    |  5 ++
 drivers/media/platform/rockchip/ispp/ispp.c   |  2 +-
 drivers/media/platform/rockchip/ispp/stream.c | 34 +++++---
 drivers/media/platform/rockchip/ispp/stream.h |  1 +
 8 files changed, 121 insertions(+), 37 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp/bridge.c b/drivers/media/platform/rockchip/isp/bridge.c
index e0e91abc44f0..f562dc64dc03 100644
--- a/drivers/media/platform/rockchip/isp/bridge.c
+++ b/drivers/media/platform/rockchip/isp/bridge.c
@@ -20,6 +20,25 @@ struct rkisp_bridge_buf *to_bridge_buf(struct rkisp_ispp_buf *dbufs)
 	return container_of(dbufs, struct rkisp_bridge_buf, dbufs);
 }
 
+/* compatible with MI frame end are triggered before ISP frame end */
+static void reg_buf_wait_for_stats(struct rkisp_bridge_device *dev,
+				   struct rkisp_ispp_reg *reg_buf,
+				   struct rkisp_isp2x_stat_buffer *tmp_statsbuf)
+{
+	s32 retry = 10;
+
+	do {
+		if (reg_buf->frame_id > tmp_statsbuf->frame_id)
+			usleep_range(1000, 1200);
+		else
+			break;
+	} while (retry-- > 0);
+
+	if (retry < 0)
+		v4l2_err(&dev->sd, "reg id(%d) don't match stats id(%d)\n",
+			 reg_buf->frame_id, tmp_statsbuf->frame_id);
+}
+
 static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg *reg_buf)
 {
 	struct rkisp_isp2x_stat_buffer *tmp_statsbuf;
@@ -27,6 +46,7 @@ static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg
 	u32 offset = 0, size;
 
 	tmp_statsbuf = (struct rkisp_isp2x_stat_buffer *)dev->ispdev->stats_vdev.tmp_statsbuf.vaddr;
+	reg_buf_wait_for_stats(dev, reg_buf, tmp_statsbuf);
 	memset(reg_buf->isp_offset, -1, sizeof(reg_buf->isp_offset));
 	memset(reg_buf->ispp_offset, -1, sizeof(reg_buf->ispp_offset));
 	memset(reg_buf->isp_size, 0, sizeof(reg_buf->isp_offset));
@@ -179,11 +199,10 @@ static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg
 		size = ISP2X_RAWAELITE_MEAN_NUM * sizeof(tmp_statsbuf->params.rawae0.data[0]);
 		reg_buf->isp_size[ISP2X_ID_RAWAE0] += size;
 		reg_buf->isp_stats_size[ISP2X_ID_RAWAE0] = size;
-		if (tmp_statsbuf->frame_id == reg_buf->frame_id) {
+		if (tmp_statsbuf->frame_id == reg_buf->frame_id)
 			memcpy(&reg_buf->reg[offset], &tmp_statsbuf->params.rawae0.data[0], size);
-		} else {
+		else
 			memset(&reg_buf->reg[offset], 0, size);
-		}
 		offset += size;
 	}
 
@@ -197,11 +216,10 @@ static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg
 		size = ISP2X_RAWAEBIG_MEAN_NUM * sizeof(tmp_statsbuf->params.rawae1.data[0]);
 		reg_buf->isp_size[ISP2X_ID_RAWAE1] += size;
 		reg_buf->isp_stats_size[ISP2X_ID_RAWAE1] = size;
-		if (tmp_statsbuf->frame_id == reg_buf->frame_id) {
+		if (tmp_statsbuf->frame_id == reg_buf->frame_id)
 			memcpy(&reg_buf->reg[offset], &tmp_statsbuf->params.rawae1.data[0], size);
-		} else {
+		else
 			memset(&reg_buf->reg[offset], 0, size);
-		}
 		offset += size;
 	}
 
@@ -215,11 +233,10 @@ static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg
 		size = ISP2X_RAWAEBIG_MEAN_NUM * sizeof(tmp_statsbuf->params.rawae2.data[0]);
 		reg_buf->isp_size[ISP2X_ID_RAWAE2] += size;
 		reg_buf->isp_stats_size[ISP2X_ID_RAWAE2] = size;
-		if (tmp_statsbuf->frame_id == reg_buf->frame_id) {
+		if (tmp_statsbuf->frame_id == reg_buf->frame_id)
 			memcpy(&reg_buf->reg[offset], &tmp_statsbuf->params.rawae2.data[0], size);
-		} else {
+		else
 			memset(&reg_buf->reg[offset], 0, size);
-		}
 		offset += size;
 	}
 
@@ -233,11 +250,10 @@ static void dump_dbg_reg(struct rkisp_bridge_device *dev, struct rkisp_ispp_reg
 		size = ISP2X_RAWAEBIG_MEAN_NUM * sizeof(tmp_statsbuf->params.rawae3.data[0]);
 		reg_buf->isp_size[ISP2X_ID_RAWAE3] += size;
 		reg_buf->isp_stats_size[ISP2X_ID_RAWAE3] = size;
-		if (tmp_statsbuf->frame_id == reg_buf->frame_id) {
+		if (tmp_statsbuf->frame_id == reg_buf->frame_id)
 			memcpy(&reg_buf->reg[offset], &tmp_statsbuf->params.rawae3.data[0], size);
-		} else {
+		else
 			memset(&reg_buf->reg[offset], 0, size);
-		}
 		offset += size;
 	}
 
@@ -481,6 +497,19 @@ static void rkisp_bridge_save_fbcgain(struct rkisp_device *dev, struct rkisp_isp
 	spin_unlock_irqrestore(&hw->buf_lock, lock_flags);
 }
 
+static void rkisp_bridge_work(struct work_struct *work)
+{
+	struct rkisp_bridge_work *br_wk =
+		container_of(work, struct rkisp_bridge_work, work);
+	struct rkisp_bridge_device *dev = br_wk->dev;
+
+	struct rkisp_ispp_reg *reg_buf = (struct rkisp_ispp_reg *)br_wk->param;
+
+	dump_dbg_reg(dev, reg_buf);
+
+	kfree(br_wk);
+}
+
 static int frame_end(struct rkisp_bridge_device *dev, bool en)
 {
 	struct rkisp_hw_dev *hw = dev->ispdev->hw_dev;
@@ -518,13 +547,26 @@ static int frame_end(struct rkisp_bridge_device *dev, bool en)
 			v4l2_subdev_call(sd, core, ioctl, RKISP_ISPP_CMD_REQUEST_REGBUF,
 					 &reg_buf);
 			if (reg_buf) {
-				reg_buf->stat = ISP_ISPP_INUSE;
-				reg_buf->dev_id = hw->cur_buf->index;
-				reg_buf->frame_id = hw->cur_buf->frame_id;
-				reg_buf->sof_timestamp = sof_ns;
-				reg_buf->frame_timestamp = hw->cur_buf->frame_timestamp;
-				reg_buf->exposure = dev->ispdev->params_vdev.exposure;
-				dump_dbg_reg(dev, reg_buf);
+				struct rkisp_bridge_work *br_wk;
+
+				br_wk = kzalloc(sizeof(struct rkisp_bridge_work), GFP_ATOMIC);
+				if (br_wk) {
+					reg_buf->stat = ISP_ISPP_INUSE;
+					reg_buf->dev_id = hw->cur_buf->index;
+					reg_buf->frame_id = hw->cur_buf->frame_id;
+					reg_buf->sof_timestamp = sof_ns;
+					reg_buf->frame_timestamp = hw->cur_buf->frame_timestamp;
+					reg_buf->exposure = dev->ispdev->params_vdev.exposure;
+
+					br_wk->dev = dev;
+					br_wk->param = (void *)reg_buf;
+					INIT_WORK((struct work_struct *)&br_wk->work,
+						  rkisp_bridge_work);
+					if (!queue_work(dev->wq, (struct work_struct *)&br_wk->work)) {
+						v4l2_err(&dev->sd, "queue work failed\n");
+						kfree(br_wk);
+					}
+				}
 			}
 
 			if (dev->ispdev->send_fbcgain) {
@@ -995,6 +1037,7 @@ static int bridge_stop(struct rkisp_bridge_device *dev)
 	irq = dev->cfg->frame_end_id;
 	irq = (irq == MI_MPFBC_FRAME) ? ISP_FRAME_MPFBC : ISP_FRAME_MP;
 	dev->ispdev->irq_ends_mask &= ~irq;
+	drain_workqueue(dev->wq);
 
 	/* make sure ispp last frame done */
 	if (dev->work_mode & ISP_ISPP_QUICK) {
@@ -1504,6 +1547,8 @@ int rkisp_register_bridge_subdev(struct rkisp_device *dev,
 	ret = media_create_pad_link(source, RKISP_ISP_PAD_SOURCE_PATH,
 				    sink, 0, bridge->linked);
 	init_waitqueue_head(&bridge->done);
+	bridge->wq = alloc_workqueue("rkisp bridge workqueue",
+				     WQ_UNBOUND | WQ_MEM_RECLAIM, 1);
 	return ret;
 
 free_media:
diff --git a/drivers/media/platform/rockchip/isp/bridge.h b/drivers/media/platform/rockchip/isp/bridge.h
index f8dbe291b52a..97fbd79fc7c3 100644
--- a/drivers/media/platform/rockchip/isp/bridge.h
+++ b/drivers/media/platform/rockchip/isp/bridge.h
@@ -41,6 +41,12 @@ struct rkisp_bridge_buf {
 	struct rkisp_dummy_buffer dummy[GROUP_BUF_MAX];
 };
 
+struct rkisp_bridge_work {
+	struct work_struct work;
+	struct rkisp_bridge_device *dev;
+	void *param;
+};
+
 struct rkisp_bridge_device {
 	struct rkisp_device *ispdev;
 	struct v4l2_subdev sd;
@@ -56,6 +62,7 @@ struct rkisp_bridge_device {
 	bool stopping;
 	bool linked;
 	bool en;
+	struct workqueue_struct *wq;
 };
 
 int rkisp_register_bridge_subdev(struct rkisp_device *dev,
diff --git a/drivers/media/platform/rockchip/ispp/common.c b/drivers/media/platform/rockchip/ispp/common.c
index 465a4d83d6c4..a9777aad991f 100644
--- a/drivers/media/platform/rockchip/ispp/common.c
+++ b/drivers/media/platform/rockchip/ispp/common.c
@@ -197,7 +197,7 @@ static int rkispp_init_regbuf(struct rkispp_hw_dev *hw)
 	struct rkisp_ispp_reg *reg_buf;
 	u32 i, buf_size;
 
-	if (!rkispp_reg_withstream) {
+	if (!rkispp_is_reg_withstream_global()) {
 		hw->reg_buf = NULL;
 		return 0;
 	}
@@ -564,9 +564,6 @@ void rkispp_release_regbuf(struct rkispp_device *ispp, struct rkisp_ispp_reg *fr
 			reg_buf[i].stat = ISP_ISPP_FREE;
 		}
 	}
-
-	freebuf->frame_id = 0;
-	freebuf->stat = ISP_ISPP_FREE;
 }
 
 void rkispp_request_regbuf(struct rkispp_device *dev, struct rkisp_ispp_reg **free_buf)
@@ -585,7 +582,21 @@ void rkispp_request_regbuf(struct rkispp_device *dev, struct rkisp_ispp_reg **fr
 	}
 }
 
-bool rkispp_get_reg_withstream(void)
+bool rkispp_is_reg_withstream_global(void)
 {
 	return rkispp_reg_withstream;
 }
+
+bool rkispp_is_reg_withstream_local(struct device *dev)
+{
+	const char *node_name = dev_name(dev);
+
+	if (!node_name)
+		return false;
+
+	if (!memcmp(rkispp_reg_withstream_video_name, node_name,
+		    strlen(node_name)))
+		return true;
+	else
+		return false;
+}
diff --git a/drivers/media/platform/rockchip/ispp/common.h b/drivers/media/platform/rockchip/ispp/common.h
index 464955609e01..184d28b0bc6e 100644
--- a/drivers/media/platform/rockchip/ispp/common.h
+++ b/drivers/media/platform/rockchip/ispp/common.h
@@ -21,6 +21,7 @@
 #define RKISPP_MAX_HEIGHT	3312
 #define RKISPP_MIN_WIDTH	66
 #define RKISPP_MIN_HEIGHT	258
+#define RKISPP_VIDEO_NAME_LEN   16
 
 #define RKISPP_BUF_POOL_MAX	RKISP_ISPP_BUF_MAX
 
@@ -103,6 +104,7 @@ static inline struct vb2_queue *to_vb2_queue(struct file *file)
 extern int rkispp_debug;
 extern bool rkispp_monitor;
 extern bool rkispp_reg_withstream;
+extern char rkispp_reg_withstream_video_name[RKISPP_VIDEO_NAME_LEN];
 extern unsigned int rkispp_debug_reg;
 extern struct platform_driver rkispp_plat_drv;
 
@@ -129,6 +131,7 @@ int rkispp_find_regbuf_by_id(struct rkispp_device *ispp, struct rkisp_ispp_reg *
 			     u32 dev_id, u32 frame_id);
 void rkispp_release_regbuf(struct rkispp_device *ispp, struct rkisp_ispp_reg *freebuf);
 void rkispp_request_regbuf(struct rkispp_device *dev, struct rkisp_ispp_reg **free_buf);
-bool rkispp_get_reg_withstream(void);
+bool rkispp_is_reg_withstream_global(void);
+bool rkispp_is_reg_withstream_local(struct device *dev);
 void rkispp_set_clk_rate(struct clk *clk, unsigned long rate);
 #endif
diff --git a/drivers/media/platform/rockchip/ispp/dev.c b/drivers/media/platform/rockchip/ispp/dev.c
index 4860e57bb1d9..f4d42abe14ab 100644
--- a/drivers/media/platform/rockchip/ispp/dev.c
+++ b/drivers/media/platform/rockchip/ispp/dev.c
@@ -51,6 +51,11 @@ bool rkispp_reg_withstream;
 module_param_named(sendreg_withstream, rkispp_reg_withstream, bool, 0644);
 MODULE_PARM_DESC(sendreg_withstream, "rkispp send reg out with stream");
 
+char rkispp_reg_withstream_video_name[RKISPP_VIDEO_NAME_LEN];
+module_param_string(sendreg_withstream_video_name, rkispp_reg_withstream_video_name,
+		    RKISPP_VIDEO_NAME_LEN, 0644);
+MODULE_PARM_DESC(sendreg_withstream, "rkispp video send reg out with stream");
+
 unsigned int rkispp_debug_reg = 0x1F;
 module_param_named(debug_reg, rkispp_debug_reg, uint, 0644);
 MODULE_PARM_DESC(debug_reg, "rkispp debug register");
diff --git a/drivers/media/platform/rockchip/ispp/ispp.c b/drivers/media/platform/rockchip/ispp/ispp.c
index 18b58e4885c6..d8aede16e5ed 100644
--- a/drivers/media/platform/rockchip/ispp/ispp.c
+++ b/drivers/media/platform/rockchip/ispp/ispp.c
@@ -397,7 +397,7 @@ static long rkispp_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		break;
 	case RKISP_ISPP_CMD_GET_REG_WITHSTREAM:
 		rkispp_reg_withstream = arg;
-		*rkispp_reg_withstream = rkispp_get_reg_withstream();
+		*rkispp_reg_withstream = rkispp_is_reg_withstream_global();
 		break;
 	case RKISPP_CMD_TRIGGER_YNRRUN:
 		rkispp_sendbuf_to_nr(ispp_dev, (struct rkispp_tnr_inf *)arg);
diff --git a/drivers/media/platform/rockchip/ispp/stream.c b/drivers/media/platform/rockchip/ispp/stream.c
index a2cdd70f14b5..a0959230c86d 100644
--- a/drivers/media/platform/rockchip/ispp/stream.c
+++ b/drivers/media/platform/rockchip/ispp/stream.c
@@ -408,7 +408,7 @@ static int rkispp_frame_end(struct rkispp_stream *stream)
 {
 	struct rkispp_device *dev = stream->isppdev;
 	struct capture_fmt *fmt = &stream->out_cap_fmt;
-	struct rkisp_ispp_reg *reg_buf;
+	struct rkisp_ispp_reg *reg_buf = NULL;
 	unsigned long lock_flags = 0;
 	int i = 0;
 
@@ -431,7 +431,8 @@ static int rkispp_frame_end(struct rkispp_stream *stream)
 			atomic_read(&dev->ispp_sdev.frm_sync_seq);
 		stream->curr_buf->vb.vb2_buf.timestamp = ns;
 
-		if (rkispp_reg_withstream && (fmt->wr_fmt & FMT_FBC)) {
+		if (stream->is_reg_withstream &&
+		    (fmt->wr_fmt & FMT_FBC || fmt->wr_fmt == FMT_YUV420)) {
 			void *addr = vb2_plane_vaddr(&stream->curr_buf->vb.vb2_buf, i);
 
 			rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id,
@@ -444,6 +445,9 @@ static int rkispp_frame_end(struct rkispp_stream *stream)
 
 				rkispp_release_regbuf(dev, reg_buf);
 				vb2_set_plane_payload(&stream->curr_buf->vb.vb2_buf, 1, cpy_size);
+				v4l2_dbg(3, rkispp_debug, &dev->v4l2_dev,
+					 "stream(0x%x) write reg buf to last plane\n",
+					 stream->id);
 			} else {
 				v4l2_err(&dev->v4l2_dev,
 					 "%s can not find reg buf: dev_id %d, sequence %d\n",
@@ -473,7 +477,8 @@ static int rkispp_frame_end(struct rkispp_stream *stream)
 		stream->dbg.id = stream->curr_buf->vb.sequence;
 
 		stream->curr_buf = NULL;
-	} else if (rkispp_reg_withstream && (fmt->wr_fmt & FMT_FBC)) {
+	} else if (stream->is_reg_withstream &&
+		   (fmt->wr_fmt & FMT_FBC || fmt->wr_fmt == FMT_YUV420)) {
 		u32 frame_id;
 
 		frame_id = atomic_read(&dev->ispp_sdev.frm_sync_seq);
@@ -1469,7 +1474,8 @@ static int rkispp_queue_setup(struct vb2_queue *queue,
 				plane_fmt->sizeimage;
 	}
 
-	if (rkispp_reg_withstream && (cap_fmt->wr_fmt & FMT_FBC)) {
+	if (stream->is_reg_withstream &&
+	    (cap_fmt->wr_fmt & FMT_FBC || cap_fmt->wr_fmt == FMT_YUV420)) {
 		(*num_planes)++;
 		sizes[1] = sizeof(struct rkisp_ispp_reg);
 	}
@@ -1920,7 +1926,9 @@ static int rkispp_set_fmt(struct rkispp_stream *stream,
 	if (fmt->mplanes == 1)
 		pixm->plane_fmt[0].sizeimage = imagsize;
 
-	if ((fmt->wr_fmt & FMT_FBC) && rkispp_reg_withstream)
+	stream->is_reg_withstream = rkispp_is_reg_withstream_local(&stream->vnode.vdev.dev);
+	if (stream->is_reg_withstream &&
+	    (fmt->wr_fmt & FMT_FBC || fmt->wr_fmt == FMT_YUV420))
 		pixm->num_planes++;
 
 	if (!try) {
@@ -2290,7 +2298,7 @@ static void fec_work_event(struct rkispp_device *dev,
 	struct rkispp_dummy_buffer *dummy;
 	unsigned long lock_flags = 0, lock_flags1 = 0;
 	bool is_start = false, is_quick = false;
-	struct rkisp_ispp_reg *reg_buf;
+	struct rkisp_ispp_reg *reg_buf = NULL;
 	u32 val;
 
 	if (!(vdev->module_ens & ISPP_MODULE_FEC))
@@ -2397,7 +2405,8 @@ static void fec_work_event(struct rkispp_device *dev,
 				complete(&monitor->fec.cmpl);
 		}
 
-		rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
+		if (stream->is_reg_withstream)
+			rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
 		if (reg_buf && (rkispp_debug_reg & ISPP_MODULE_FEC)) {
 			u32 offset, size;
 
@@ -2437,7 +2446,7 @@ static void nr_work_event(struct rkispp_device *dev,
 	bool is_start = false, is_quick = false;
 	bool is_tnr_en = vdev->module_ens & ISPP_MODULE_TNR;
 	bool is_fec_en = (vdev->module_ens & ISPP_MODULE_FEC);
-	struct rkisp_ispp_reg *reg_buf;
+	struct rkisp_ispp_reg *reg_buf = NULL;
 	u32 val;
 
 	if (!(vdev->module_ens & (ISPP_MODULE_NR | ISPP_MODULE_SHP)))
@@ -2613,7 +2622,8 @@ static void nr_work_event(struct rkispp_device *dev,
 				complete(&monitor->nr.cmpl);
 		}
 
-		rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
+		if (stream->is_reg_withstream)
+			rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
 		if (reg_buf && (rkispp_debug_reg & ISPP_MODULE_NR)) {
 			u32 offset, size;
 
@@ -2685,7 +2695,7 @@ static void tnr_work_event(struct rkispp_device *dev,
 	u32 val, size = sizeof(vdev->tnr.buf) / sizeof(*dummy);
 	bool is_3to1 = vdev->tnr.is_3to1, is_start = false, is_skip = false;
 	bool is_en = rkispp_read(dev, RKISPP_TNR_CORE_CTRL) & SW_TNR_EN;
-	struct rkisp_ispp_reg *reg_buf;
+	struct rkisp_ispp_reg *reg_buf = NULL;
 
 	if (!(vdev->module_ens & ISPP_MODULE_TNR) ||
 	    (dev->inp == INP_ISP && dev->isp_mode & ISP_ISPP_QUICK))
@@ -2894,7 +2904,9 @@ static void tnr_work_event(struct rkispp_device *dev,
 			if (!completion_done(&monitor->tnr.cmpl))
 				complete(&monitor->tnr.cmpl);
 		}
-		rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
+
+		if (stream->is_reg_withstream)
+			rkispp_find_regbuf_by_id(dev, &reg_buf, dev->dev_id, seq);
 		if (reg_buf && (rkispp_debug_reg & ISPP_MODULE_TNR)) {
 			u32 offset, size;
 
diff --git a/drivers/media/platform/rockchip/ispp/stream.h b/drivers/media/platform/rockchip/ispp/stream.h
index 7c1ab80f305a..cadf20c57f2b 100644
--- a/drivers/media/platform/rockchip/ispp/stream.h
+++ b/drivers/media/platform/rockchip/ispp/stream.h
@@ -177,6 +177,7 @@ struct rkispp_stream {
 	bool is_upd;
 	bool is_cfg;
 	bool is_end;
+	bool is_reg_withstream;
 };
 
 enum {
-- 
2.35.3

