From af178019f03f5103f62d0ab8803dcfd5f46390b0 Mon Sep 17 00:00:00 2001
From: Sugar Zhang <sugar.zhang@rock-chips.com>
Date: Thu, 23 Aug 2018 17:15:36 +0800
Subject: [PATCH] ALSA: pcm: vad: copy vad buffer to dma buffer

This patch copy vad buffer to dma buffer and recaculate
the hw pointer to support mmap access. in the mmap mode,
the buffer is handled by userspace, leading to prefetch
the vad data is impossible, so vad buffer data should be
copied to dma buffer. the only restriction is the dma buf
size should be larger than vad buf size.

Change-Id: I2ef6156fe8a791563a4bd02962c61d4b57c5329e
Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
---
 sound/core/pcm_dmaengine.c | 82 ++++++++++++++++++++++++++++++++++++++
 sound/core/pcm_lib.c       | 26 ------------
 sound/core/pcm_native.c    | 22 ++++++++++
 3 files changed, 104 insertions(+), 26 deletions(-)

diff --git a/sound/core/pcm_dmaengine.c b/sound/core/pcm_dmaengine.c
index 9648861b12fe..238ff6f6ca68 100644
--- a/sound/core/pcm_dmaengine.c
+++ b/sound/core/pcm_dmaengine.c
@@ -33,6 +33,9 @@ struct dmaengine_pcm_runtime_data {
 	dma_cookie_t cookie;
 
 	unsigned int pos;
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	unsigned int vpos;
+#endif
 };
 
 static inline struct dmaengine_pcm_runtime_data *substream_to_prtd(
@@ -180,6 +183,73 @@ static int dmaengine_pcm_prepare_and_submit(struct snd_pcm_substream *substream)
 	return 0;
 }
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+static void dmaengine_pcm_vad_dma_complete(void *arg)
+{
+	struct snd_pcm_substream *substream = arg;
+	struct dmaengine_pcm_runtime_data *prtd = substream_to_prtd(substream);
+
+	prtd->vpos += snd_pcm_lib_period_bytes(substream);
+	if (prtd->vpos >= snd_pcm_lib_buffer_bytes(substream))
+		prtd->vpos = 0;
+	snd_pcm_period_elapsed(substream);
+}
+
+static int dmaengine_pcm_prepare_single_and_submit(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_pcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct dma_chan *chan = prtd->dma_chan;
+	struct dma_async_tx_descriptor *desc;
+	enum dma_transfer_direction direction;
+	unsigned long flags = DMA_CTRL_ACK;
+	snd_pcm_uframes_t avail;
+	dma_addr_t buf_start, buf_end;
+	int offset, i, count, residue_bytes;
+	int period_bytes, buffer_bytes;
+
+	direction = snd_pcm_substream_to_dma_direction(substream);
+
+	if (!substream->runtime->no_period_wakeup)
+		flags |= DMA_PREP_INTERRUPT;
+
+	period_bytes = snd_pcm_lib_period_bytes(substream);
+	buffer_bytes = snd_pcm_lib_buffer_bytes(substream);
+	avail = snd_pcm_vad_avail(substream);
+	offset = frames_to_bytes(substream->runtime, avail);
+	prtd->vpos = offset;
+	buf_start = substream->runtime->dma_addr + offset;
+	buf_end = substream->runtime->dma_addr + snd_pcm_lib_buffer_bytes(substream);
+	count = (buf_end - buf_start) / period_bytes;
+	residue_bytes = (buf_end - buf_start) % period_bytes;
+	pr_debug("%s: offset: %d, buffer_bytes: %d\n", __func__, offset, buffer_bytes);
+	pr_debug("%s: count: %d, residue_bytes: %d\n", __func__, count, residue_bytes);
+	for (i = 0; i < count; i++) {
+		desc = dmaengine_prep_slave_single(chan, buf_start,
+						   period_bytes,
+						   direction, flags);
+		if (!desc)
+			return -ENOMEM;
+		desc->callback = dmaengine_pcm_vad_dma_complete;
+		desc->callback_param = substream;
+		dmaengine_submit(desc);
+		buf_start += period_bytes;
+	}
+
+	if (residue_bytes) {
+		desc = dmaengine_prep_slave_single(chan, buf_start,
+						   residue_bytes,
+						   direction, flags);
+		if (!desc)
+			return -ENOMEM;
+		desc->callback = dmaengine_pcm_vad_dma_complete;
+		desc->callback_param = substream;
+		dmaengine_submit(desc);
+	}
+
+	return 0;
+}
+#endif
+
 /**
  * snd_dmaengine_pcm_trigger - dmaengine based PCM trigger implementation
  * @substream: PCM substream
@@ -198,6 +268,14 @@ int snd_dmaengine_pcm_trigger(struct snd_pcm_substream *substream, int cmd)
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+		if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
+		    snd_pcm_vad_attached(substream) &&
+		    snd_pcm_vad_avail(substream)) {
+			dmaengine_pcm_prepare_single_and_submit(substream);
+			dma_async_issue_pending(prtd->dma_chan);
+		}
+#endif
 		ret = dmaengine_pcm_prepare_and_submit(substream);
 		if (ret)
 			return ret;
@@ -255,6 +333,10 @@ snd_pcm_uframes_t snd_dmaengine_pcm_pointer(struct snd_pcm_substream *substream)
 	unsigned int buf_size;
 	unsigned int pos = 0;
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	if (prtd->vpos)
+		return bytes_to_frames(substream->runtime, prtd->vpos);
+#endif
 	dmaengine_tx_status(prtd->dma_chan, prtd->cookie, &state);
 	buf_size = snd_pcm_lib_buffer_bytes(substream);
 	if (state.residue > 0 && state.residue <= buf_size)
diff --git a/sound/core/pcm_lib.c b/sound/core/pcm_lib.c
index 25914635bef0..4c145d6bccd4 100644
--- a/sound/core/pcm_lib.c
+++ b/sound/core/pcm_lib.c
@@ -2349,32 +2349,6 @@ snd_pcm_sframes_t snd_pcm_lib_read(struct snd_pcm_substream *substream, void __u
 	nonblock = !!(substream->f_flags & O_NONBLOCK);
 	if (runtime->access != SNDRV_PCM_ACCESS_RW_INTERLEAVED)
 		return -EINVAL;
-#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
-	if (snd_pcm_vad_attached(substream)) {
-		snd_pcm_stream_lock_irq(substream);
-		switch (runtime->status->state) {
-		case SNDRV_PCM_STATE_PREPARED:
-			if (size >= runtime->start_threshold) {
-				err = snd_pcm_start(substream);
-				if (err < 0) {
-					snd_pcm_stream_unlock_irq(substream);
-					return err;
-				}
-			}
-			break;
-		default:
-			break;
-		}
-		snd_pcm_stream_unlock_irq(substream);
-
-		if (snd_pcm_vad_avail(substream))
-			return snd_pcm_vad_read(substream, buf, size);
-		else
-			return snd_pcm_lib_read1(substream, (unsigned long)buf,
-						 size, nonblock,
-						 snd_pcm_lib_read_transfer);
-	}
-#endif
 	return snd_pcm_lib_read1(substream, (unsigned long)buf, size, nonblock, snd_pcm_lib_read_transfer);
 }
 
diff --git a/sound/core/pcm_native.c b/sound/core/pcm_native.c
index 3de88974eeb6..0864cd298a34 100644
--- a/sound/core/pcm_native.c
+++ b/sound/core/pcm_native.c
@@ -578,6 +578,15 @@ static int snd_pcm_hw_params(struct snd_pcm_substream *substream,
 	runtime->byte_align = bits / 8;
 	runtime->min_align = frames;
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
+	    snd_pcm_vad_attached(substream) &&
+	    frames_to_bytes(runtime, runtime->buffer_size) < 256 * 1024) {
+		pr_info("pcm buffer_size should be larger than 256 KB\n");
+		err = -EINVAL;
+		goto _error;
+	}
+#endif
 	/* Default sw params */
 	runtime->tstamp_mode = SNDRV_PCM_TSTAMP_NONE;
 	runtime->period_step = 1;
@@ -1066,6 +1075,19 @@ static void snd_pcm_post_start(struct snd_pcm_substream *substream, int state)
 	    runtime->silence_size > 0)
 		snd_pcm_playback_silence(substream, ULONG_MAX);
 	snd_pcm_timer_notify(substream, SNDRV_TIMER_EVENT_MSTART);
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
+	    snd_pcm_vad_attached(substream) &&
+	    snd_pcm_vad_avail(substream)) {
+		snd_pcm_uframes_t avail;
+
+		avail = snd_pcm_vad_avail(substream);
+		snd_pcm_vad_memcpy(substream,
+				   runtime->dma_area,
+				   avail);
+		pr_info("%s: vad copy buffer %lu frames\n", __func__, avail);
+	}
+#endif
 }
 
 static struct action_ops snd_pcm_action_start = {
-- 
2.35.3

