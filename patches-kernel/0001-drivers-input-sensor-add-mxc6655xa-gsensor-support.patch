From 16be479deb19aa0feb5354232a1a807d1de0ea6a Mon Sep 17 00:00:00 2001
From: Wang Jie <dave.wang@rock-chips.com>
Date: Thu, 16 Apr 2020 09:44:15 +0800
Subject: [PATCH] drivers: input: sensor: add mxc6655xa gsensor support.

Change-Id: I0d3c70cd5ee917b8a64f2ffb4e63615edda33cf9
Signed-off-by: Wang Jie <dave.wang@rock-chips.com>
---
 drivers/input/sensors/accel/Kconfig     |   6 +
 drivers/input/sensors/accel/Makefile    |   1 +
 drivers/input/sensors/accel/mxc6655xa.c | 255 ++++++++++++++++++++++++
 drivers/input/sensors/sensor-dev.c      |   2 +
 include/linux/sensor-dev.h              |   1 +
 5 files changed, 265 insertions(+)
 create mode 100755 drivers/input/sensors/accel/mxc6655xa.c

diff --git a/drivers/input/sensors/accel/Kconfig b/drivers/input/sensors/accel/Kconfig
index abc7ce06083a..248c2e8e3ba9 100644
--- a/drivers/input/sensors/accel/Kconfig
+++ b/drivers/input/sensors/accel/Kconfig
@@ -77,6 +77,12 @@ config GS_MXC6225
 	  To have support for your sepcific gsensor you will have to
 	  select het proper drivers which depend on this option.
 
+config GS_MXC6655XA
+	bool "gsensor mxc6655xa"
+	help
+	  To have support for your sepcific gsensor you will have to
+	  select het proper drivers which depend on this option.
+
 config GS_DMT10
 	bool "gsensor dmard10"
 	help
diff --git a/drivers/input/sensors/accel/Makefile b/drivers/input/sensors/accel/Makefile
index deed0a8057dc..1628b8058131 100644
--- a/drivers/input/sensors/accel/Makefile
+++ b/drivers/input/sensors/accel/Makefile
@@ -5,6 +5,7 @@ obj-$(CONFIG_GS_MMA8452)	+= mma8452.o
 obj-$(CONFIG_GS_LIS3DH)		+= lis3dh.o
 obj-$(CONFIG_GS_MMA7660)	+= mma7660.o
 obj-$(CONFIG_GS_MXC6225)	+= mxc622x.o
+obj-$(CONFIG_GS_MXC6655XA)	+= mxc6655xa.o
 obj-$(CONFIG_GS_DMT10)		+= dmard10.o
 obj-$(CONFIG_GS_LSM303D)	+= lsm303d.o
 obj-$(CONFIG_GS_MC3230)		+= mc3230.o
diff --git a/drivers/input/sensors/accel/mxc6655xa.c b/drivers/input/sensors/accel/mxc6655xa.c
new file mode 100755
index 000000000000..d215e9ce91bd
--- /dev/null
+++ b/drivers/input/sensors/accel/mxc6655xa.c
@@ -0,0 +1,255 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * kernel/drivers/input/sensors/accel/mxc6655xa.c
+ *
+ * Copyright (C) 2020 Rockchip Co.,Ltd.
+ * Author: Jie Wang <dave.wang@rock-chips.com>
+ */
+
+#include <linux/interrupt.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <linux/irq.h>
+#include <linux/miscdevice.h>
+#include <linux/gpio.h>
+#include <linux/uaccess.h>
+#include <linux/atomic.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/freezer.h>
+#include <linux/of_gpio.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/sensor-dev.h>
+
+/* Linear acceleration  register */
+#define MXC6655_INT_SRC0	0x00
+#define MXC6655_INT_CLR0	0x00
+#define MXC6655_INT_SRC1	0x01
+#define MXC6655_INT_CLR1	0x01
+#define MXC6655_STATUS		0x02
+#define	MXC6655_OUT_X_H		0x03
+#define	MXC6655_OUT_X_L		0x04
+#define	MXC6655_OUT_Y_H		0x05
+#define	MXC6655_OUT_Y_L		0x06
+#define	MXC6655_OUT_Z_H		0x07
+#define	MXC6655_OUT_Z_L		0x08
+#define MXC6655_OUT_TEMP	0x09
+#define MXC6655_INT_MASK0	0x0A
+#define MXC6655_INT_MASK1	0x0B
+#define MXC6655_DETECTION	0x0C
+#define MXC6655_CONTROL		0x0D
+#define	MXC6655_WHO_AM_I_A	0x0F
+#define	MXC6655_DEVICE_ID_A	0x05
+#define MXC6655_POWER_DOWN	BIT(0)
+#define MXC6655_INT_ENABLE	BIT(0)
+#define MXC6655_RANGE		(16384 * 2)
+#define MXC6655_PRECISION	12
+#define MXC6655_BOUNDARY	(0x1 << (MXC6655_PRECISION - 1))
+#define MXC6655_GRAVITY_STEP	(MXC6655_RANGE / MXC6655_BOUNDARY)
+
+static int sensor_active(struct i2c_client *client, int enable, int rate)
+{
+	struct sensor_private_data *sensor =
+		(struct sensor_private_data *)i2c_get_clientdata(client);
+	int result = 0;
+
+	sensor->ops->ctrl_data = sensor_read_reg(client, sensor->ops->ctrl_reg);
+	if (enable)
+		sensor->ops->ctrl_data &= ~MXC6655_POWER_DOWN;
+	else
+		sensor->ops->ctrl_data |= MXC6655_POWER_DOWN;
+
+	result = sensor_write_reg(client, sensor->ops->ctrl_reg,
+				  sensor->ops->ctrl_data);
+	if (result)
+		dev_err(&client->dev, "%s:fail to active sensor\n", __func__);
+
+	pr_debug("%s:reg = 0x%x, reg_ctrl = 0x%x, enable= %d\n",
+		 __func__,
+		 sensor->ops->ctrl_reg, sensor->ops->ctrl_data, enable);
+
+	return result;
+}
+
+static int sensor_init(struct i2c_client *client)
+{
+	struct sensor_private_data *sensor =
+		(struct sensor_private_data *)i2c_get_clientdata(client);
+	int status = 0;
+	int result = 0;
+
+	result = sensor->ops->active(client, 0, 0);
+	if (result) {
+		dev_err(&client->dev,
+			"%s:line=%d,error\n", __func__, __LINE__);
+		return result;
+	}
+	sensor->status_cur = SENSOR_OFF;
+
+	/*  Operating mode control and full-scale range(2g) */
+	result = sensor_write_reg(client, sensor->ops->ctrl_reg, 0x01);
+	if (result) {
+		dev_err(&client->dev,
+			"%s:fail to set MXC6655_CONTROL.\n", __func__);
+		return result;
+	}
+
+	/* Enable or Disable for DRDY Interrupt */
+	status = sensor_read_reg(client, MXC6655_INT_MASK1);
+	if (sensor->pdata->irq_enable)
+		status |= MXC6655_INT_ENABLE;
+	else
+		status &= ~MXC6655_INT_ENABLE;
+	result = sensor_write_reg(client, MXC6655_INT_MASK1, status);
+	if (result) {
+		dev_err(&client->dev,
+			"%s:fail to set MXC6655_INT_MASK1.\n", __func__);
+		return result;
+	}
+
+	return result;
+}
+
+static int sensor_convert_data(struct i2c_client *client,
+			       char high_byte, char low_byte)
+{
+	s64 result;
+
+	result = ((int)high_byte << (MXC6655_PRECISION - 8)) |
+		 ((int)low_byte >> (16 - MXC6655_PRECISION));
+
+	if (result < MXC6655_BOUNDARY)
+		result = result * MXC6655_GRAVITY_STEP;
+	else
+		result = ~(((~result & (0x7fff >> (16 - MXC6655_PRECISION))) +
+			  1) * MXC6655_GRAVITY_STEP) + 1;
+
+	return (int)result;
+}
+
+static int gsensor_report_value(struct i2c_client *client,
+				struct sensor_axis *axis)
+{
+	struct sensor_private_data *sensor =
+		(struct sensor_private_data *)i2c_get_clientdata(client);
+
+	if (sensor->status_cur == SENSOR_ON) {
+		input_report_abs(sensor->input_dev, ABS_X, axis->x);
+		input_report_abs(sensor->input_dev, ABS_Y, axis->y);
+		input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+	}
+
+	return 0;
+}
+
+static int sensor_report_value(struct i2c_client *client)
+{
+	struct sensor_axis axis;
+	struct sensor_private_data *sensor =
+		(struct sensor_private_data *)i2c_get_clientdata(client);
+	struct sensor_platform_data *pdata = sensor->pdata;
+	char buffer[6] = {0};
+	char value = 0;
+	int x, y, z;
+	int ret = 0;
+
+	if (sensor->ops->read_len < 6) {
+		dev_err(&client->dev, "%s:Read len is error,len= %d\n",
+			__func__, sensor->ops->read_len);
+		return -1;
+	}
+
+	*buffer = sensor->ops->read_reg;
+	ret = sensor_rx_data(client, buffer, sensor->ops->read_len);
+	if (ret < 0) {
+		dev_err(&client->dev,
+			"mxc6655 read data failed, ret = %d\n", ret);
+		return ret;
+	}
+
+	/* x,y,z axis is the 12-bit acceleration output */
+	x = sensor_convert_data(sensor->client, buffer[0], buffer[1]);
+	y = sensor_convert_data(sensor->client, buffer[2], buffer[3]);
+	z = sensor_convert_data(sensor->client, buffer[4], buffer[5]);
+
+	pr_debug("%s: x = %d, y = %d, z = %d\n", __func__, x, y, z);
+
+	axis.x = (pdata->orientation[0]) * x + (pdata->orientation[1]) * y +
+		 (pdata->orientation[2]) * z;
+	axis.y = (pdata->orientation[3]) * x + (pdata->orientation[4]) * y +
+		 (pdata->orientation[5]) * z;
+	axis.z = (pdata->orientation[6]) * x + (pdata->orientation[7]) * y +
+		 (pdata->orientation[8]) * z;
+
+	gsensor_report_value(client, &axis);
+
+	mutex_lock(&sensor->data_mutex);
+	sensor->axis = axis;
+	mutex_unlock(&sensor->data_mutex);
+
+	if (sensor->pdata->irq_enable) {
+		value = sensor_read_reg(client, sensor->ops->int_status_reg);
+		if (value & 0x01) {
+			pr_debug("%s:gsensor int status :0x%x\n",
+				 __func__, value);
+			ret = sensor_write_reg(client, MXC6655_INT_CLR1, 0x01);
+			if (ret) {
+				dev_err(&client->dev,
+					"%s:fail to clear MXC6655_INT_CLR1.\n",
+					__func__);
+				return ret;
+			}
+		}
+	}
+
+	return ret;
+}
+
+static struct sensor_operate gsensor_mxc6655_ops = {
+	.name		= "gs_mxc6655xa",
+	.type		= SENSOR_TYPE_ACCEL,
+	.id_i2c		= ACCEL_ID_MXC6655XA,
+	.read_reg	= MXC6655_OUT_X_H,
+	.read_len	= 6,
+	.id_reg		= MXC6655_WHO_AM_I_A,
+	.id_data	= MXC6655_DEVICE_ID_A,
+	.precision	= MXC6655_PRECISION,
+	.ctrl_reg	= MXC6655_CONTROL,
+	.int_status_reg	= MXC6655_INT_SRC1,
+	.range		= {-MXC6655_RANGE, MXC6655_RANGE},
+	.trig		= IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.active		= sensor_active,
+	.init		= sensor_init,
+	.report		= sensor_report_value,
+};
+
+static struct sensor_operate *gsensor_get_ops(void)
+{
+	return &gsensor_mxc6655_ops;
+}
+
+static int __init gsensor_mxc6655_init(void)
+{
+	struct sensor_operate *ops = gsensor_get_ops();
+	int result = 0;
+	int type = ops->type;
+
+	result = sensor_register_slave(type, NULL, NULL, gsensor_get_ops);
+
+	return result;
+}
+
+static void __exit gsensor_mxc6655_exit(void)
+{
+	struct sensor_operate *ops = gsensor_get_ops();
+	int type = ops->type;
+
+	sensor_unregister_slave(type, NULL, NULL, gsensor_get_ops);
+}
+
+module_init(gsensor_mxc6655_init);
+module_exit(gsensor_mxc6655_exit);
+
diff --git a/drivers/input/sensors/sensor-dev.c b/drivers/input/sensors/sensor-dev.c
index ba65346c11fb..823d8a46862a 100644
--- a/drivers/input/sensors/sensor-dev.c
+++ b/drivers/input/sensors/sensor-dev.c
@@ -2013,6 +2013,7 @@ static const struct i2c_device_id sensor_id[] = {
 	{"gs_lis3dh", ACCEL_ID_LIS3DH},
 	{"gs_mma7660", ACCEL_ID_MMA7660},
 	{"gs_mxc6225", ACCEL_ID_MXC6225},
+	{"gs_mxc6655xa", ACCEL_ID_MXC6655XA},
 	{"gs_dmard10", ACCEL_ID_DMARD10},
 	{"gs_lsm303d", ACCEL_ID_LSM303D},
 	{"gs_mc3230", ACCEL_ID_MC3230},
@@ -2076,6 +2077,7 @@ static struct of_device_id sensor_dt_ids[] = {
 	{ .compatible = "lsm330_acc" },
 	{ .compatible = "bma2xx_acc" },
 	{ .compatible = "gs_stk8baxx" },
+	{ .compatible = "gs_mxc6655xa"},
 	/*compass*/
 	{ .compatible = "ak8975" },
 	{ .compatible = "ak8963" },
diff --git a/include/linux/sensor-dev.h b/include/linux/sensor-dev.h
index 4881c9ed0a50..5c7b589aa5cb 100644
--- a/include/linux/sensor-dev.h
+++ b/include/linux/sensor-dev.h
@@ -53,6 +53,7 @@ enum sensor_id {
 	ACCEL_ID_MMA7660,
 	ACCEL_ID_MPU6050,
 	ACCEL_ID_MXC6225,
+	ACCEL_ID_MXC6655XA,
 	ACCEL_ID_DMARD10,
 	ACCEL_ID_LSM303D,
 	ACCEL_ID_MC3230,
-- 
2.35.3

