From 2542a9a36c894d77107614e2e27aae5edf94dee4 Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Fri, 25 Sep 2020 14:56:36 +0800
Subject: [PATCH] drivers: rkflash: Fix last data block vpn has been modify
 issue

Change-Id: Ief1b572d6f1321b9dcdd6d8eae31ff21e2e2f57f
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl_arm_v7.S       | 8236 ++++++++++++-----------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S | 8475 ++++++++++++------------
 drivers/rkflash/rk_sftl_arm_v8.S       | 7144 ++++++++++----------
 3 files changed, 11810 insertions(+), 12045 deletions(-)

diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index da0bf173c0cc..a8119e884d35 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2020-04-10
+ * date: 2020-09-25
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -62,31 +62,6 @@ l2p_addr_tran:
 	.fnend
 	.size	l2p_addr_tran, .-l2p_addr_tran
 	.align	2
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_set_blk_mode.part.6, %function
-ftl_set_blk_mode.part.6:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L7
-	lsr	r1, r0, #5
-	mov	ip, #1
-	and	r0, r0, #31
-	ldr	r2, [r3, #24]
-	ldr	r3, [r2, r1, lsl #2]
-	orr	r0, r3, ip, lsl r0
-	str	r0, [r2, r1, lsl #2]
-	bx	lr
-.L8:
-	.align	2
-.L7:
-	.word	.LANCHOR0
-	.fnend
-	.size	ftl_set_blk_mode.part.6, .-ftl_set_blk_mode.part.6
-	.align	2
 	.global	ftl_print_sblk_info
 	.syntax unified
 	.arm
@@ -99,73 +74,73 @@ ftl_print_sblk_info:
 	push	{r0, r1, r2, r3, r4, lr}
 	.save {r4, lr}
 	.pad #16
-	ldr	r4, .L11
-	ldr	r1, .L11+4
-	ldr	r0, .L11+8
+	ldr	r4, .L8
+	ldr	r1, .L8+4
+	ldr	r0, .L8+8
 	bl	sftl_printk
-	ldrh	r1, [r4, #28]
-	ldr	ip, [r4, #76]
-	ldrb	r3, [r4, #34]	@ zero_extendqisi2
-	ldrh	r2, [r4, #30]
+	ldrh	r1, [r4, #24]
+	ldr	ip, [r4, #72]
+	ldrb	r3, [r4, #30]	@ zero_extendqisi2
+	ldrh	r2, [r4, #26]
 	lsl	r0, r1, #1
 	ldrh	r0, [ip, r0]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #32]
+	ldrh	r0, [r4, #28]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #36]	@ zero_extendqisi2
+	ldrb	r0, [r4, #32]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L11+12
+	ldr	r0, .L8+12
 	bl	sftl_printk
-	ldrh	r1, [r4, #80]
-	ldr	ip, [r4, #76]
-	ldrb	r3, [r4, #86]	@ zero_extendqisi2
-	ldrh	r2, [r4, #82]
+	ldrh	r1, [r4, #76]
+	ldr	ip, [r4, #72]
+	ldrb	r3, [r4, #82]	@ zero_extendqisi2
+	ldrh	r2, [r4, #78]
 	lsl	r0, r1, #1
 	ldrh	r0, [ip, r0]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #84]
+	ldrh	r0, [r4, #80]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #88]	@ zero_extendqisi2
+	ldrb	r0, [r4, #84]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L11+16
+	ldr	r0, .L8+16
 	bl	sftl_printk
-	ldrh	r1, [r4, #128]
-	ldr	ip, [r4, #76]
-	ldrb	r3, [r4, #134]	@ zero_extendqisi2
-	ldrh	r2, [r4, #130]
+	ldrh	r1, [r4, #124]
+	ldr	ip, [r4, #72]
+	ldrb	r3, [r4, #130]	@ zero_extendqisi2
+	ldrh	r2, [r4, #126]
 	lsl	r0, r1, #1
 	ldrh	r0, [ip, r0]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #132]
+	ldrh	r0, [r4, #128]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #136]	@ zero_extendqisi2
+	ldrb	r0, [r4, #132]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L11+20
+	ldr	r0, .L8+20
 	bl	sftl_printk
-	ldrh	r1, [r4, #176]
-	ldr	ip, [r4, #76]
-	ldrb	r3, [r4, #182]	@ zero_extendqisi2
-	ldrh	r2, [r4, #178]
+	ldrh	r1, [r4, #172]
+	ldr	ip, [r4, #72]
+	ldrb	r3, [r4, #178]	@ zero_extendqisi2
+	ldrh	r2, [r4, #174]
 	lsl	r0, r1, #1
 	ldrh	r0, [ip, r0]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #180]
+	ldrh	r0, [r4, #176]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #184]	@ zero_extendqisi2
+	ldrb	r0, [r4, #180]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L11+24
+	ldr	r0, .L8+24
 	bl	sftl_printk
-	ldrh	r3, [r4, #224]
-	ldrh	r2, [r4, #226]
-	ldrh	r1, [r4, #228]
-	ldr	r0, .L11+28
+	ldrh	r3, [r4, #220]
+	ldrh	r2, [r4, #222]
+	ldrh	r1, [r4, #224]
+	ldr	r0, .L8+28
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, lr}
 	b	sftl_printk
-.L12:
+.L9:
 	.align	2
-.L11:
+.L8:
 	.word	.LANCHOR0
 	.word	.LC0
 	.word	.LC1
@@ -189,17 +164,17 @@ Ftl_log2:
 	@ link register save eliminated.
 	mov	r1, #0
 	mov	r2, #1
-.L14:
+.L11:
 	cmp	r2, r0
 	uxth	r3, r1
 	add	r1, r1, #1
-	bls	.L15
+	bls	.L12
 	sub	r0, r3, #1
 	uxth	r0, r0
 	bx	lr
-.L15:
+.L12:
 	lsl	r2, r2, #1
-	b	.L14
+	b	.L11
 	.fnend
 	.size	Ftl_log2, .-Ftl_log2
 	.align	2
@@ -227,24 +202,24 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L18
+	ldr	r3, .L15
 	cmp	r0, #24
 	movcc	r0, #24
-	ldrh	r2, [r3, #236]
-	ldrh	r1, [r3, #246]
-	str	r0, [r3, #232]
+	ldrh	r2, [r3, #232]
+	ldrh	r1, [r3, #242]
+	str	r0, [r3, #228]
 	mul	r2, r0, r2
 	sub	r0, r1, r0
-	ldr	r1, [r3, #252]
-	strh	r0, [r3, #244]	@ movhi
+	ldr	r1, [r3, #248]
+	strh	r0, [r3, #240]	@ movhi
 	mov	r0, #0
-	str	r2, [r3, #240]
+	str	r2, [r3, #236]
 	sub	r2, r1, r2
-	str	r2, [r3, #248]
+	str	r2, [r3, #244]
 	bx	lr
-.L19:
+.L16:
 	.align	2
-.L18:
+.L15:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -259,80 +234,78 @@ FtlConstantsInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	mov	r3, r0
-	ldr	r4, .L35
-	movw	r5, #262
+	ldrh	ip, [r3, #14]
+	movw	r5, #258
+	ldr	r4, .L32
 	ldrh	r0, [r0]
+	cmp	ip, #4
 	ldrh	r7, [r3, #2]
-	add	r2, r4, #256
-	ldrh	ip, [r3, #14]
-	add	r1, r4, #260
-	strh	r0, [r2]	@ movhi
-	movw	r2, #258
-	strh	r7, [r4, r2]	@ movhi
 	ldrh	lr, [r3, #4]
-	cmp	ip, #4
+	add	r1, r4, #256
 	ldrh	r2, [r3, #6]
-	strh	ip, [r4, r5]	@ movhi
+	strh	r0, [r4, #252]	@ movhi
+	strh	r7, [r4, #254]	@ movhi
 	strh	lr, [r1]	@ movhi
-	strh	r2, [r4, #246]	@ movhi
-	bne	.L21
+	strh	r2, [r4, #242]	@ movhi
+	strh	ip, [r4, r5]	@ movhi
+	bne	.L18
 	lsr	r2, r2, #1
-	strh	r2, [r4, #246]	@ movhi
+	strh	r2, [r4, #242]	@ movhi
 	mov	r2, #8
 	strh	r2, [r4, r5]	@ movhi
-.L22:
-	ldr	ip, .L35+4
+.L19:
+	ldr	ip, .L32+4
 	mov	r2, #0
-.L23:
+.L20:
 	strb	r2, [r2, ip]
 	add	r2, r2, #1
 	cmp	r2, #32
-	bne	.L23
-	ldr	r2, .L35+8
+	bne	.L20
+	ldr	r2, .L32+8
 	cmp	r0, #1
 	mov	ip, #5
-	ldrh	r5, [r4, #246]
-	ldr	r8, .L35+12
+	ldrh	r5, [r4, #242]
+	ldr	r8, .L32+12
 	mov	lr, #0
 	strh	ip, [r2]	@ movhi
-	movw	ip, #298
+	movw	ip, #294
 	strheq	r0, [r2]	@ movhi
 	mov	r2, #640
 	ldrh	r0, [r1]
 	mov	r6, r8
 	strh	r2, [r6], #4	@ movhi
-	movw	r2, #302
+	movw	r2, #298
 	strh	lr, [r4, ip]	@ movhi
 	str	r3, [sp, #4]
 	smulbb	r7, r7, r0
 	smulbb	r0, r0, r5
 	uxth	r7, r7
 	uxth	r0, r0
-	strh	r7, [r4, #236]	@ movhi
+	strh	r7, [r4, #232]	@ movhi
 	strh	r0, [r4, r2]	@ movhi
 	bl	Ftl_log2
 	ldr	r3, [sp, #4]
-	movw	r2, #306
+	movw	r2, #302
 	strh	r0, [r6]	@ movhi
 	mov	r6, r8
 	add	r8, r8, #24
 	ldrh	r10, [r3, #12]
 	strh	r10, [r4, r2]	@ movhi
-	movw	r2, #310
+	movw	r2, #306
 	smulbb	r1, r7, r10
 	strh	r10, [r8, #-16]	@ movhi
 	strh	r1, [r4, r2]	@ movhi
-	movw	r2, #262
+	movw	r2, #258
 	ldrh	fp, [r4, r2]
 	mov	r0, fp
 	bl	Ftl_log2
 	lsl	r2, fp, #9
 	ldr	r3, [sp, #4]
-	movw	r1, #314
+	movw	r1, #310
 	strh	r0, [r6, #12]!	@ movhi
 	uxth	r2, r2
 	mov	r9, r0
@@ -342,18 +315,18 @@ FtlConstantsInit:
 	mul	r1, r10, fp
 	strh	r2, [r8, #-8]	@ movhi
 	ldrh	r2, [r3, #20]
-	movw	r3, #318
+	movw	r3, #314
 	strh	r2, [r4, r3]	@ movhi
 	mul	r3, r5, r7
 	lsl	r5, r5, #6
-	str	r3, [r4, #252]
+	str	r3, [r4, #248]
 	mul	r3, fp, r3
 	mul	r3, r10, r3
 	asr	r3, r3, #11
-	str	r3, [r4, #320]
+	str	r3, [r4, #316]
 	bl	__aeabi_idiv
 	uxth	r0, r0
-	movw	r2, #326
+	movw	r2, #322
 	mov	r1, r7
 	cmp	r0, #4
 	movls	r3, #4
@@ -366,63 +339,63 @@ FtlConstantsInit:
 	ldrh	r0, [r8]
 	add	r3, r3, #2
 	strh	r3, [r4, r2]	@ movhi
-	ldr	r3, .L35+16
+	ldr	r3, .L32+16
 	strh	r5, [r3]	@ movhi
 	uxth	r5, r5
 	mul	r3, r7, r5
 	add	r5, r5, #8
-	str	r3, [r4, #332]
+	str	r3, [r4, #328]
 	bl	__aeabi_uidiv
 	uxtah	r0, r5, r0
 	cmp	r7, #1
 	addeq	r0, r0, #4
-	str	r0, [r4, #232]
-	ldrh	r0, [r4, #232]
+	str	r0, [r4, #228]
+	ldrh	r0, [r4, #228]
 	bl	FtlSysBlkNumInit
-	ldr	r3, [r4, #232]
+	ldr	r3, [r4, #228]
 	mov	r0, #0
-	str	r0, [r4, #344]
-	str	r3, [r4, #336]
-	ldr	r3, [r4, #248]
+	str	r0, [r4, #340]
+	str	r3, [r4, #332]
+	ldr	r3, [r4, #244]
 	lsl	r2, r3, #2
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r3, [r4, r3]
 	mul	r3, r3, r2
 	ldrh	r2, [r6]
 	add	r2, r2, #9
 	lsr	r3, r3, r2
-	ldr	r2, .L35+20
+	ldr	r2, .L32+20
 	add	r3, r3, #2
 	strh	r3, [r2]	@ movhi
 	mov	r2, #32
-	movw	r3, #342
+	movw	r3, #338
 	strh	r2, [r4, r3]	@ movhi
 	ldrh	r3, [r8]
 	add	r3, r3, #3
 	strh	r3, [r8]	@ movhi
-	ldr	r3, [r4, #332]
+	ldr	r3, [r4, #328]
 	add	r3, r3, #3
-	str	r3, [r4, #332]
+	str	r3, [r4, #328]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L21:
+.L18:
 	cmp	lr, #1
 	cmpeq	ip, #8
 	lsreq	r2, r2, #1
-	strheq	r2, [r4, #246]	@ movhi
+	strheq	r2, [r4, #242]	@ movhi
 	moveq	r2, #2
 	strheq	r2, [r1]	@ movhi
-	b	.L22
-.L36:
+	b	.L19
+.L33:
 	.align	2
-.L35:
+.L32:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+264
+	.word	.LANCHOR0+260
+	.word	.LANCHOR0+292
 	.word	.LANCHOR0+296
-	.word	.LANCHOR0+300
-	.word	.LANCHOR0+328
-	.word	.LANCHOR0+340
+	.word	.LANCHOR0+324
+	.word	.LANCHOR0+336
 	.fnend
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
@@ -436,30 +409,30 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L44
-	add	r3, r2, #348
+	ldr	r2, .L41
+	add	r3, r2, #344
 	ldrh	r3, [r3]
 	cmp	r3, #0
-	beq	.L43
-	ldr	r3, [r2, #352]
-	add	r2, r2, #324
+	beq	.L40
+	ldr	r3, [r2, #348]
+	add	r2, r2, #320
 	ldrh	r2, [r2]
 	add	r2, r3, r2, lsl #1
-.L39:
+.L36:
 	cmp	r3, r2
-	bne	.L40
-.L43:
+	bne	.L37
+.L40:
 	mov	r0, #0
 	bx	lr
-.L40:
+.L37:
 	ldrh	r1, [r3], #2
 	cmp	r0, r1
-	bne	.L39
+	bne	.L36
 	mov	r0, #1
 	bx	lr
-.L45:
+.L42:
 	.align	2
-.L44:
+.L41:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -489,12 +462,12 @@ sftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L48
-	ldr	r0, [r3, #344]
+	ldr	r3, .L45
+	ldr	r0, [r3, #340]
 	bx	lr
-.L49:
+.L46:
 	.align	2
-.L48:
+.L45:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_get_density, .-sftl_get_density
@@ -512,8 +485,8 @@ FtlBbmMapBadBlock:
 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
-	movw	r3, #302
-	ldr	r4, .L52
+	movw	r3, #298
+	ldr	r4, .L49
 	mov	r5, r0
 	ldrh	r7, [r4, r3]
 	mov	r1, r7
@@ -524,18 +497,18 @@ FtlBbmMapBadBlock:
 	bl	__aeabi_uidivmod
 	add	r2, r4, r6, lsl #2
 	uxth	r3, r1
-	ldr	r2, [r2, #384]
+	ldr	r2, [r2, #380]
 	lsr	r1, r3, #5
 	and	ip, r3, #31
 	mov	lr, #1
-	add	r4, r4, #356
+	add	r4, r4, #352
 	ldr	r0, [r2, r1, lsl #2]
 	orr	r0, r0, lr, lsl ip
 	str	r0, [r2, r1, lsl #2]
 	mov	r2, r6
 	str	r0, [sp]
 	mov	r1, r5
-	ldr	r0, .L52+4
+	ldr	r0, .L49+4
 	bl	sftl_printk
 	ldrh	r3, [r4, #6]
 	mov	r0, #0
@@ -544,9 +517,9 @@ FtlBbmMapBadBlock:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L53:
+.L50:
 	.align	2
-.L52:
+.L49:
 	.word	.LANCHOR0
 	.word	.LC7
 	.fnend
@@ -563,8 +536,8 @@ FtlBbmIsBadBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movw	r3, #302
-	ldr	r5, .L56
+	movw	r3, #298
+	ldr	r5, .L53
 	mov	r7, r0
 	ldrh	r6, [r5, r3]
 	mov	r1, r6
@@ -577,14 +550,14 @@ FtlBbmIsBadBlock:
 	lsr	r2, r4, #5
 	add	r5, r5, r0, lsl #2
 	and	r4, r4, #31
-	ldr	r3, [r5, #384]
+	ldr	r3, [r5, #380]
 	ldr	r0, [r3, r2, lsl #2]
 	lsr	r0, r0, r4
 	and	r0, r0, #1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L57:
+.L54:
 	.align	2
-.L56:
+.L53:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -612,32 +585,31 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L67
-	movw	r2, #302
-	movw	r1, #258
+	ldr	r3, .L64
+	movw	r2, #298
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, #0
 	mov	r4, r5
 	ldrh	r2, [r3, r2]
-	ldrh	r6, [r3, r1]
+	ldrh	r6, [r3, #254]
 	mul	r6, r6, r2
-.L60:
+.L57:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L62
+	blt	.L59
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L62:
+.L59:
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	add	r5, r5, #1
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	b	.L60
-.L68:
+	b	.L57
+.L65:
 	.align	2
-.L67:
+.L64:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -654,13 +626,13 @@ V2P_block:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r5, r1
-	ldr	r4, .L71
+	ldr	r4, .L68
 	mov	r7, r0
-	add	r3, r4, #260
+	add	r3, r4, #256
 	ldrh	r6, [r3]
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	movw	r3, #302
+	movw	r3, #298
 	smulbb	r5, r6, r5
 	ldrh	r4, [r4, r3]
 	mov	r1, r6
@@ -671,9 +643,9 @@ V2P_block:
 	add	r0, r4, r0
 	uxth	r0, r0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L72:
+.L69:
 	.align	2
-.L71:
+.L68:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -687,13 +659,13 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L75
+	ldr	r3, .L72
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	add	r2, r3, #260
+	add	r2, r3, #256
 	ldrh	r5, [r2]
-	movw	r2, #302
+	movw	r2, #298
 	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
 	mov	r1, r5
@@ -703,9 +675,9 @@ P2V_plane:
 	add	r1, r4, r1
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L76:
+.L73:
 	.align	2
-.L75:
+.L72:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -721,19 +693,19 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	movw	r3, #302
-	ldr	r4, .L79
+	movw	r3, #298
+	ldr	r4, .L76
 	ldrh	r1, [r4, r3]
-	add	r4, r4, #260
+	add	r4, r4, #256
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
 	ldrh	r1, [r4]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L80:
+.L77:
 	.align	2
-.L79:
+.L76:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -749,13 +721,13 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L82
+	bls	.L79
 	sub	r0, r0, r1
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L82:
+.L79:
 	sub	r0, r1, r0
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -774,15 +746,15 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L85
+	ldr	r3, .L82
 	ldrh	r0, [r3, #6]
 	clz	r0, r0
 	lsr	r0, r0, #5
 	bx	lr
-.L86:
+.L83:
 	.align	2
-.L85:
-	.word	.LANCHOR0+416
+.L82:
+	.word	.LANCHOR0+412
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
 	.align	2
@@ -796,16 +768,16 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L88
+	ldr	r3, .L85
 	ldrh	r0, [r3, #6]
 	sub	r0, r0, #1024
 	clz	r0, r0
 	lsr	r0, r0, #5
 	bx	lr
-.L89:
+.L86:
 	.align	2
-.L88:
-	.word	.LANCHOR0+416
+.L85:
+	.word	.LANCHOR0+412
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
 	.align	2
@@ -818,11 +790,11 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L103
+	ldr	r3, .L100
 	ldrh	r2, [r3, #6]
 	cmp	r2, #0
 	bxeq	lr
-	ldr	r2, .L103+4
+	ldr	r2, .L100+4
 	mov	r0, #0
 	push	{r4, lr}
 	.save {r4, lr}
@@ -831,16 +803,16 @@ FtlFreeSysBLkSort:
 	ldrh	lr, [r2, #28]
 	ldrh	r2, [r3, #4]
 	and	lr, lr, #31
-.L92:
+.L89:
 	uxth	ip, r0
 	add	r0, r0, #1
 	cmp	lr, ip
-	bgt	.L93
+	bgt	.L90
 	cmp	r4, #0
 	strhne	r1, [r3, #2]	@ movhi
 	strhne	r2, [r3, #4]	@ movhi
 	pop	{r4, pc}
-.L93:
+.L90:
 	add	ip, r3, r1, lsl #1
 	add	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -850,12 +822,12 @@ FtlFreeSysBLkSort:
 	mov	r4, #1
 	add	r2, r2, r4
 	ubfx	r2, r2, #0, #10
-	b	.L92
-.L104:
+	b	.L89
+.L101:
 	.align	2
-.L103:
-	.word	.LANCHOR0+416
-	.word	.LANCHOR0+2472
+.L100:
+	.word	.LANCHOR0+412
+	.word	.LANCHOR0+2468
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	2
@@ -868,38 +840,38 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L115
+	ldr	r3, .L112
 	ldrh	ip, [r3, #6]
 	cmp	ip, #1024
-	beq	.L109
+	beq	.L106
 	str	lr, [sp, #-4]!
 	.save {lr}
 	mov	r1, #0
 	ldrh	lr, [r3, #2]
-.L107:
+.L104:
 	cmp	r1, ip
-	bcc	.L108
+	bcc	.L105
 	mov	r0, #0
 	ldr	pc, [sp], #4
-.L108:
+.L105:
 	add	r2, r1, lr
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #8]
 	cmp	r2, r0
-	beq	.L110
+	beq	.L107
 	add	r1, r1, #1
-	b	.L107
-.L109:
+	b	.L104
+.L106:
 	mov	r0, #0
 	bx	lr
-.L110:
+.L107:
 	mov	r0, #1
 	ldr	pc, [sp], #4
-.L116:
+.L113:
 	.align	2
-.L115:
-	.word	.LANCHOR0+416
+.L112:
+	.word	.LANCHOR0+412
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
 	.align	2
@@ -915,25 +887,25 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r2, .L132
-	ldrh	r3, [r2, #244]
+	ldr	r2, .L129
+	ldrh	r3, [r2, #240]
 	cmp	r3, r0
-	bls	.L119
+	bls	.L116
 	mov	r4, #6
-	ldr	r7, [r2, #2520]
+	ldr	r7, [r2, #2516]
 	mul	r4, r4, r0
 	mvn	lr, #0
 	add	ip, r7, r4
 	strh	lr, [ip, #2]	@ movhi
 	strh	lr, [r7, r4]	@ movhi
-	ldr	r3, [r2, #2524]
+	ldr	r3, [r2, #2520]
 	cmp	r3, #0
-	streq	ip, [r2, #2524]
-	beq	.L119
-	ldr	r9, [r2, #76]
+	streq	ip, [r2, #2520]
+	beq	.L116
+	ldr	r9, [r2, #72]
 	mov	r1, r2
 	lsl	r2, r0, #1
-	ldr	r8, [r1, #2520]
+	ldr	r8, [r1, #2516]
 	movw	r10, #65535
 	ldrh	r5, [r9, r2]
 	ldrh	r2, [ip, #4]
@@ -941,13 +913,13 @@ insert_data_list:
 	mulne	lr, r2, r5
 	sub	r2, r3, r8
 	asr	r5, r2, #1
-	ldr	r2, .L132+4
+	ldr	r2, .L129+4
 	mul	r2, r2, r5
-	ldrh	r5, [r1, #244]
+	ldrh	r5, [r1, #240]
 	str	r5, [sp, #4]
 	mov	r5, #0
 	uxth	r2, r2
-.L125:
+.L122:
 	ldr	r6, [sp, #4]
 	add	r5, r5, #1
 	uxth	r5, r5
@@ -957,49 +929,49 @@ insert_data_list:
 	cmp	r0, r2
 	orreq	r6, r6, #1
 	cmp	r6, #0
-	bne	.L119
+	bne	.L116
 	ldrh	r6, [r3, #4]
 	cmp	r6, #0
-	beq	.L123
+	beq	.L120
 	lsl	fp, r2, #1
 	ldrh	fp, [r9, fp]
 	mul	r6, r6, fp
 	cmp	r6, lr
-	bcs	.L123
+	bcs	.L120
 	ldrh	r6, [r3]
 	cmp	r6, r10
-	bne	.L124
+	bne	.L121
 	strh	r2, [ip, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	str	ip, [r1, #2528]
-.L119:
+	str	ip, [r1, #2524]
+.L116:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L124:
+.L121:
 	mov	r3, #6
 	mov	r2, r6
 	mla	r3, r3, r6, r8
-	b	.L125
-.L123:
+	b	.L122
+.L120:
 	strh	r2, [r7, r4]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [ip, #2]	@ movhi
-	ldr	r2, [r1, #2524]
+	ldr	r2, [r1, #2520]
 	cmp	r3, r2
 	ldrhne	ip, [r3, #2]
 	movne	r2, #6
-	ldrne	r1, [r1, #2520]
+	ldrne	r1, [r1, #2516]
 	strheq	r0, [r3, #2]	@ movhi
-	streq	ip, [r1, #2524]
+	streq	ip, [r1, #2520]
 	mulne	r2, r2, ip
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L119
-.L133:
+	b	.L116
+.L130:
 	.align	2
-.L132:
+.L129:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1017,23 +989,23 @@ INSERT_DATA_LIST:
 	push	{r4, lr}
 	.save {r4, lr}
 	bl	insert_data_list
-	movw	r1, #2532
-	ldr	r2, .L137
-	ldrh	r3, [r2, r1]
+	ldr	r2, .L134
+	add	r1, r2, #2528
+	ldrh	r2, [r2, #240]
+	ldrh	r3, [r1]
 	add	r3, r3, #1
 	uxth	r3, r3
-	strh	r3, [r2, r1]	@ movhi
-	ldrh	r2, [r2, #244]
 	cmp	r2, r3
+	strh	r3, [r1]	@ movhi
 	popcs	{r4, pc}
 	mov	r2, #214
-	ldr	r1, .L137+4
-	ldr	r0, .L137+8
+	ldr	r1, .L134+4
+	ldr	r0, .L134+8
 	pop	{r4, lr}
 	b	sftl_printk
-.L138:
+.L135:
 	.align	2
-.L137:
+.L134:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC8
@@ -1053,65 +1025,65 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L140
-	ldr	r2, .L147
+	beq	.L137
+	ldr	r2, .L144
 	mov	r1, #6
 	mul	r5, r1, r0
 	mvn	r3, #0
-	ldr	r6, [r2, #2520]
+	ldr	r6, [r2, #2516]
 	mov	ip, r2
 	add	lr, r6, r5
 	strh	r3, [lr, #2]	@ movhi
 	strh	r3, [r6, r5]	@ movhi
-	ldr	r3, [r2, #2536]
+	ldr	r3, [r2, #2532]
 	cmp	r3, #0
-	streq	lr, [r2, #2536]
-	beq	.L140
-	ldr	r8, [r2, #2540]
+	streq	lr, [r2, #2532]
+	beq	.L137
+	ldr	r8, [r2, #2536]
 	lsl	r2, r0, #1
-	ldr	r7, [ip, #2520]
+	ldr	r7, [ip, #2516]
 	ldrh	r9, [r8, r2]
 	sub	r2, r3, r7
 	asr	r10, r2, #1
-	ldr	r2, .L147+4
+	ldr	r2, .L144+4
 	mul	r2, r2, r10
 	mov	r10, r1
 	uxth	r2, r2
-.L144:
+.L141:
 	lsl	r1, r2, #1
 	ldrh	r1, [r8, r1]
 	cmp	r1, r9
-	bcs	.L142
+	bcs	.L139
 	ldrh	r1, [r3]
 	cmp	r1, r4
-	bne	.L143
+	bne	.L140
 	strh	r2, [lr, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-.L140:
+.L137:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L143:
+.L140:
 	mla	r3, r10, r1, r7
 	mov	r2, r1
-	b	.L144
-.L142:
+	b	.L141
+.L139:
 	ldrh	r1, [r3, #2]
 	strh	r1, [lr, #2]	@ movhi
 	strh	r2, [r6, r5]	@ movhi
-	ldr	r2, [ip, #2536]
+	ldr	r2, [ip, #2532]
 	cmp	r3, r2
 	ldrhne	lr, [r3, #2]
 	movne	r2, #6
-	ldrne	r1, [ip, #2520]
+	ldrne	r1, [ip, #2516]
 	strheq	r0, [r3, #2]	@ movhi
-	streq	lr, [ip, #2536]
+	streq	lr, [ip, #2532]
 	mulne	r2, r2, lr
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L140
-.L148:
+	b	.L137
+.L145:
 	.align	2
-.L147:
+.L144:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1129,22 +1101,22 @@ INSERT_FREE_LIST:
 	push	{r4, lr}
 	.save {r4, lr}
 	bl	insert_free_list
-	ldr	r2, .L152
-	ldrh	r3, [r2, #228]
+	ldr	r2, .L149
+	ldrh	r3, [r2, #224]
 	add	r3, r3, #1
 	uxth	r3, r3
-	strh	r3, [r2, #228]	@ movhi
-	ldrh	r2, [r2, #244]
+	strh	r3, [r2, #224]	@ movhi
+	ldrh	r2, [r2, #240]
 	cmp	r2, r3
 	popcs	{r4, pc}
 	mov	r2, #207
-	ldr	r1, .L152+4
-	ldr	r0, .L152+8
+	ldr	r1, .L149+4
+	ldr	r0, .L149+8
 	pop	{r4, lr}
 	b	sftl_printk
-.L153:
+.L150:
 	.align	2
-.L152:
+.L149:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC8
@@ -1163,30 +1135,30 @@ List_remove_node:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, #6
-	ldr	r4, .L161
+	ldr	r4, .L158
 	mul	r6, r6, r1
 	movw	r3, #65535
 	mov	r8, r0
-	ldr	r7, [r4, #2520]
+	ldr	r7, [r4, #2516]
 	add	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L155
+	bne	.L152
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L155
+	beq	.L152
 	mov	r2, #372
-	ldr	r1, .L161+4
-	ldr	r0, .L161+8
+	ldr	r1, .L158+4
+	ldr	r0, .L158+8
 	bl	sftl_printk
-.L155:
+.L152:
 	ldr	r3, [r8]
 	movw	r2, #65535
 	cmp	r5, r3
 	ldrh	r3, [r7, r6]
-	bne	.L156
+	bne	.L153
 	cmp	r3, r2
-	ldrne	r2, [r4, #2520]
+	ldrne	r2, [r4, #2516]
 	movne	r1, #6
 	moveq	r3, #0
 	streq	r3, [r8]
@@ -1194,37 +1166,37 @@ List_remove_node:
 	mvnne	r2, #0
 	strne	r3, [r8]
 	strhne	r2, [r3, #2]	@ movhi
-.L158:
+.L155:
 	mvn	r3, #0
 	mov	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L156:
+.L153:
 	cmp	r3, r2
 	ldrh	r1, [r5, #2]
-	bne	.L159
+	bne	.L156
 	cmp	r1, r3
 	movne	r3, #6
-	ldrne	r2, [r4, #2520]
+	ldrne	r2, [r4, #2516]
 	mulne	r1, r3, r1
 	mvnne	r3, #0
 	strhne	r3, [r2, r1]	@ movhi
-	b	.L158
-.L159:
-	ldr	r0, [r4, #2520]
+	b	.L155
+.L156:
+	ldr	r0, [r4, #2516]
 	mov	r2, #6
 	mla	r3, r2, r3, r0
 	strh	r1, [r3, #2]	@ movhi
 	ldrh	r0, [r5, #2]
 	ldrh	r1, [r7, r6]
-	ldr	r3, [r4, #2520]
+	ldr	r3, [r4, #2516]
 	mul	r2, r2, r0
 	strh	r1, [r3, r2]	@ movhi
-	b	.L158
-.L162:
+	b	.L155
+.L159:
 	.align	2
-.L161:
+.L158:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC8
@@ -1242,18 +1214,18 @@ List_pop_index_node:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	ldr	r3, [r0]
 	cmp	r3, #0
-	beq	.L169
-	ldr	r2, .L174
+	beq	.L166
+	ldr	r2, .L171
 	push	{r4, lr}
 	.save {r4, lr}
 	movw	lr, #65535
 	mov	r4, #6
-	ldr	r2, [r2, #2520]
-.L165:
+	ldr	r2, [r2, #2516]
+.L162:
 	cmp	r1, #0
-	bne	.L166
-.L168:
-	ldr	r4, .L174+4
+	bne	.L163
+.L165:
+	ldr	r4, .L171+4
 	sub	r3, r3, r2
 	asr	r3, r3, #1
 	mul	r4, r4, r3
@@ -1261,20 +1233,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, pc}
-.L166:
+.L163:
 	ldrh	ip, [r3]
 	cmp	ip, lr
-	beq	.L168
+	beq	.L165
 	sub	r1, r1, #1
 	mla	r3, r4, ip, r2
 	uxth	r1, r1
-	b	.L165
-.L169:
+	b	.L162
+.L166:
 	movw	r0, #65535
 	bx	lr
-.L175:
+.L172:
 	.align	2
-.L174:
+.L171:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1305,37 +1277,37 @@ List_get_gc_head_node:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L183
-	ldr	r3, [r2, #2524]
+	ldr	r2, .L180
+	ldr	r3, [r2, #2520]
 	cmp	r3, #0
-	ldrne	r1, [r2, #2520]
+	ldrne	r1, [r2, #2516]
 	movne	ip, #6
 	movwne	r2, #65535
-	bne	.L179
-.L182:
+	bne	.L176
+.L179:
 	movw	r0, #65535
 	bx	lr
-.L181:
+.L178:
 	sub	r0, r0, #1
 	mla	r3, ip, r3, r1
 	uxth	r0, r0
-.L179:
+.L176:
 	cmp	r0, #0
-	beq	.L180
+	beq	.L177
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L181
-	b	.L182
-.L180:
-	ldr	r0, .L183+4
+	bne	.L178
+	b	.L179
+.L177:
+	ldr	r0, .L180+4
 	sub	r3, r3, r1
 	asr	r3, r3, #1
 	mul	r3, r0, r3
 	uxth	r0, r3
 	bx	lr
-.L184:
+.L181:
 	.align	2
-.L183:
+.L180:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1352,24 +1324,24 @@ List_update_data_list:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	ldr	r4, .L197
-	ldrh	r3, [r4, #28]
+	ldr	r4, .L194
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L187
-	ldrh	r3, [r4, #80]
+	beq	.L184
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L187
-	ldrh	r3, [r4, #128]
+	beq	.L184
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	beq	.L187
+	beq	.L184
 	mov	r7, #6
-	ldr	r9, [r4, #2520]
+	ldr	r9, [r4, #2516]
 	mul	r7, r7, r0
-	ldr	r3, [r4, #2524]
+	ldr	r3, [r4, #2520]
 	add	r8, r9, r7
 	cmp	r8, r3
-	beq	.L187
-	ldr	r2, [r4, #76]
+	beq	.L184
+	ldr	r2, [r4, #72]
 	lsl	r3, r0, #1
 	ldrh	r6, [r8, #4]
 	mov	r5, r0
@@ -1380,68 +1352,68 @@ List_update_data_list:
 	mulne	r6, r6, r3
 	ldrh	r3, [r8, #2]
 	cmp	r3, r2
-	bne	.L190
+	bne	.L187
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	bne	.L190
+	bne	.L187
 	movw	r2, #463
-	ldr	r1, .L197+4
-	ldr	r0, .L197+8
+	ldr	r1, .L194+4
+	ldr	r0, .L194+8
 	bl	sftl_printk
-.L190:
+.L187:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L191
+	bne	.L188
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	beq	.L187
-.L191:
+	beq	.L184
+.L188:
 	mov	r2, #6
 	mul	r2, r2, r3
-	ldr	r3, .L197+12
+	ldr	r3, .L194+12
 	asr	r1, r2, #1
 	mul	r3, r3, r1
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	lsl	r3, r3, #1
 	ldrh	r0, [r1, r3]
-	ldr	r1, [r4, #2520]
+	ldr	r1, [r4, #2516]
 	add	r2, r1, r2
 	ldrh	r3, [r2, #4]
 	cmp	r3, #0
 	mulne	r3, r3, r0
 	mvneq	r3, #0
 	cmp	r6, r3
-	bcs	.L187
+	bcs	.L184
+	ldr	r4, .L194+16
 	mov	r1, r5
-	ldr	r0, .L197+16
+	ldr	r0, .L194+20
 	bl	List_remove_node
-	movw	r3, #2532
-	ldrh	r3, [r4, r3]
+	ldrh	r3, [r4]
 	cmp	r3, #0
-	bne	.L193
+	bne	.L190
 	movw	r2, #474
-	ldr	r1, .L197+4
-	ldr	r0, .L197+8
+	ldr	r1, .L194+4
+	ldr	r0, .L194+8
 	bl	sftl_printk
-.L193:
-	movw	r2, #2532
+.L190:
+	ldrh	r3, [r4]
 	mov	r0, r5
-	ldrh	r3, [r4, r2]
 	sub	r3, r3, #1
-	strh	r3, [r4, r2]	@ movhi
+	strh	r3, [r4]	@ movhi
 	bl	INSERT_DATA_LIST
-.L187:
+.L184:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L198:
+.L195:
 	.align	2
-.L197:
+.L194:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC8
 	.word	-1431655765
-	.word	.LANCHOR0+2524
+	.word	.LANCHOR0+2528
+	.word	.LANCHOR0+2520
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	2
@@ -1454,84 +1426,84 @@ select_l2p_ram_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L210
-	movw	r3, #342
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r3, .L207
+	movw	r2, #338
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r1, #0
-	movw	ip, #65535
-	mov	lr, r0
-	ldrh	r2, [r0, r3]
-	ldr	r3, [r0, #2544]
 	mov	r0, #12
-.L200:
+	movw	ip, #65535
+	ldrh	r2, [r3, r2]
+	ldr	r3, [r3, #2540]
+.L197:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L202
+	bcc	.L199
 	mov	r4, r2
 	mov	r1, #0
 	mov	r0, #-2147483648
-	mov	r6, #12
-.L203:
-	uxth	r5, r1
-	cmp	r5, r2
-	bcc	.L205
+	mov	r5, #12
+.L200:
+	uxth	lr, r1
+	cmp	lr, r2
+	bcc	.L202
 	cmp	r4, r2
-	bcc	.L201
-	movw	r1, #2548
+	bcc	.L198
+	ldr	r1, .L207+4
 	mov	r4, r2
-	ldrh	r5, [lr, r1]
 	mvn	r0, #0
+	ldrh	r5, [r1]
 	mov	r1, #0
-.L206:
+.L203:
 	uxth	ip, r1
 	cmp	ip, r2
-	bcc	.L208
+	bcc	.L205
 	cmp	r4, r2
-	bcc	.L201
+	bcc	.L198
 	movw	r2, #789
-	ldr	r1, .L210+4
-	ldr	r0, .L210+8
+	ldr	r1, .L207+8
+	ldr	r0, .L207+12
 	bl	sftl_printk
-	b	.L201
-.L202:
+	b	.L198
+.L199:
 	add	r1, r1, #1
-	mla	r5, r0, r1, r3
-	ldrh	r5, [r5, #-12]
-	cmp	r5, ip
-	bne	.L200
-.L201:
+	mla	lr, r0, r1, r3
+	ldrh	lr, [lr, #-12]
+	cmp	lr, ip
+	bne	.L197
+.L198:
 	mov	r0, r4
-	pop	{r4, r5, r6, r7, r8, pc}
-.L205:
-	mla	ip, r6, r1, r3
+	pop	{r4, r5, r6, pc}
+.L202:
+	mla	ip, r5, r1, r3
 	add	r1, r1, #1
 	ldr	ip, [ip, #4]
 	cmp	r0, ip
-	movls	r7, #0
-	movhi	r7, #1
+	movls	r6, #0
+	movhi	r6, #1
 	cmp	ip, #0
-	movlt	r7, #0
-	cmp	r7, #0
+	movlt	r6, #0
+	cmp	r6, #0
 	movne	r0, ip
-	movne	r4, r5
-	b	.L203
-.L208:
+	movne	r4, lr
+	b	.L200
+.L205:
 	ldr	lr, [r3, #4]
 	cmp	r0, lr
-	bls	.L207
+	bls	.L204
 	ldrh	r6, [r3]
 	cmp	r6, r5
 	movne	r0, lr
 	movne	r4, ip
-.L207:
+.L204:
 	add	r1, r1, #1
 	add	r3, r3, #12
-	b	.L206
-.L211:
+	b	.L203
+.L208:
 	.align	2
-.L210:
+.L207:
 	.word	.LANCHOR0
+	.word	.LANCHOR0+2544
 	.word	.LANCHOR1+73
 	.word	.LC8
 	.fnend
@@ -1546,75 +1518,44 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L221
-	movw	r1, #2550
+	ldr	ip, .L218
+	movw	r1, #2546
 	ldrh	r2, [ip, r1]
 	cmp	r2, #4
 	cmpls	r0, #0
-	bne	.L213
+	bne	.L210
 	add	r2, r2, #1
 	strh	r2, [ip, r1]	@ movhi
 	bx	lr
-.L213:
+.L210:
 	mov	r2, #0
 	str	lr, [sp, #-4]!
 	.save {lr}
 	strh	r2, [ip, r1]	@ movhi
 	mov	r3, ip
 	movw	lr, #65535
-	str	r2, [ip, #2552]
-	ldrh	r1, [ip, #244]
-	ldr	r2, [ip, #76]
+	str	r2, [ip, #2548]
+	ldrh	r1, [ip, #240]
+	ldr	r2, [ip, #72]
 	add	r1, r2, r1, lsl #1
-.L214:
+.L211:
 	cmp	r2, r1
-	bne	.L216
+	bne	.L213
 	ldr	pc, [sp], #4
-.L216:
+.L213:
 	ldrh	ip, [r2], #2
 	cmp	ip, lr
-	ldrne	r0, [r3, #2552]
+	ldrne	r0, [r3, #2548]
 	addne	r0, r0, ip
-	strne	r0, [r3, #2552]
-	b	.L214
-.L222:
+	strne	r0, [r3, #2548]
+	b	.L211
+.L219:
 	.align	2
-.L221:
+.L218:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
-	.global	ftl_set_blk_mode
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_set_blk_mode, %function
-ftl_set_blk_mode:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	cmp	r1, #0
-	mov	r3, r0
-	beq	.L224
-	b	ftl_set_blk_mode.part.6
-.L224:
-	ldr	r2, .L225
-	lsr	r0, r0, #5
-	and	r3, r3, #31
-	mov	ip, #1
-	ldr	r1, [r2, #24]
-	ldr	r2, [r1, r0, lsl #2]
-	bic	r3, r2, ip, lsl r3
-	str	r3, [r1, r0, lsl #2]
-	bx	lr
-.L226:
-	.align	2
-.L225:
-	.word	.LANCHOR0
-	.fnend
-	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
-	.align	2
 	.global	ftl_get_blk_mode
 	.syntax unified
 	.arm
@@ -1625,17 +1566,17 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L228
+	ldr	r3, .L221
 	lsr	r2, r0, #5
 	and	r0, r0, #31
-	ldr	r3, [r3, #24]
+	ldr	r3, [r3, #2552]
 	ldr	r3, [r3, r2, lsl #2]
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-.L229:
+.L222:
 	.align	2
-.L228:
+.L221:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -1655,13 +1596,13 @@ ftl_sb_update_avl_pages:
 	strh	r3, [r0, #4]	@ movhi
 	add	ip, r0, r2, lsl #1
 	movw	r5, #65535
-	ldr	r3, .L238
+	ldr	r3, .L231
 	add	ip, ip, #14
-	ldrh	lr, [r3, #236]
-.L231:
+	ldrh	lr, [r3, #232]
+.L224:
 	cmp	r2, lr
-	bcc	.L233
-	movw	r2, #306
+	bcc	.L226
+	movw	r2, #302
 	add	ip, r0, #16
 	ldrh	r3, [r3, r2]
 	movw	r4, #65535
@@ -1669,12 +1610,12 @@ ftl_sb_update_avl_pages:
 	sub	r1, r3, r1
 	mov	r3, #0
 	uxth	r1, r1
-.L234:
+.L227:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L236
+	bhi	.L229
 	pop	{r4, r5, pc}
-.L233:
+.L226:
 	ldrh	r4, [ip, #2]!
 	add	r2, r2, #1
 	uxth	r2, r2
@@ -1682,18 +1623,18 @@ ftl_sb_update_avl_pages:
 	ldrhne	r4, [r0, #4]
 	addne	r4, r4, #1
 	strhne	r4, [r0, #4]	@ movhi
-	b	.L231
-.L236:
+	b	.L224
+.L229:
 	ldrh	r2, [ip], #2
 	add	r3, r3, #1
 	cmp	r2, r4
 	ldrhne	r2, [r0, #4]
 	addne	r2, r1, r2
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L234
-.L239:
+	b	.L227
+.L232:
 	.align	2
-.L238:
+.L231:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -1720,14 +1661,14 @@ FtlSlcSuperblockCheck:
 	mov	lr, #0
 	add	r2, r0, r2, lsl #1
 	ldrh	r1, [r2, #16]
-	ldr	r2, .L250
-	ldrh	ip, [r2, #236]
+	ldr	r2, .L243
+	ldrh	ip, [r2, #232]
 	mov	r2, r3
-.L243:
+.L236:
 	cmp	r1, r2
-	beq	.L245
+	beq	.L238
 	ldr	pc, [sp], #4
-.L245:
+.L238:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -1740,10 +1681,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r0, r3, lsl #1
 	ldrh	r1, [r3, #16]
-	b	.L243
-.L251:
+	b	.L236
+.L244:
 	.align	2
-.L250:
+.L243:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
@@ -1760,29 +1701,29 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r6, .L259
+	ldr	r6, .L252
 	ldrh	r2, [r0]
-	ldrh	r3, [r6, #244]
+	ldrh	r3, [r6, #240]
 	cmp	r2, r3
-	bcc	.L253
-	movw	r2, #2148
-	ldr	r1, .L259+4
-	ldr	r0, .L259+8
+	bcc	.L246
+	movw	r2, #2150
+	ldr	r1, .L252+4
+	ldr	r0, .L252+8
 	bl	sftl_printk
-.L253:
-	ldrh	r9, [r6, #236]
+.L246:
+	ldrh	r9, [r6, #232]
 	add	r7, r4, #16
-	ldr	r10, .L259+12
+	ldr	r10, .L252+12
 	mvn	r8, #0
 	mov	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L254:
+.L247:
 	uxth	r3, r5
 	ldrh	r1, [r4]
 	cmp	r9, r3
-	bhi	.L256
-	movw	r2, #306
+	bhi	.L249
+	movw	r2, #302
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	ldrh	r2, [r6, r2]
 	lsl	r1, r1, #1
@@ -1791,14 +1732,14 @@ make_superblock:
 	strh	r3, [r4, #4]	@ movhi
 	mov	r3, #0
 	strb	r3, [r4, #9]
-	ldr	r3, [r6, #2540]
+	ldr	r3, [r6, #2536]
 	ldrh	r2, [r3, r1]
 	movw	r3, #10000
 	cmp	r2, r3
 	movhi	r3, #1
 	strbhi	r3, [r4, #9]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L256:
+.L249:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	add	r7, r7, #2
 	bl	V2P_block
@@ -1811,14 +1752,14 @@ make_superblock:
 	ldrbeq	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	strbeq	r3, [r4, #7]
-	b	.L254
-.L260:
+	b	.L247
+.L253:
 	.align	2
-.L259:
+.L252:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC8
-	.word	.LANCHOR0+264
+	.word	.LANCHOR0+260
 	.fnend
 	.size	make_superblock, .-make_superblock
 	.align	2
@@ -1831,35 +1772,35 @@ update_multiplier_value:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L268
-	movw	r2, #306
+	ldr	r3, .L261
+	movw	r2, #302
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, #0
 	mov	r7, r0
 	mov	r4, r5
 	mov	r6, r3
-	add	r10, r3, #264
-	ldrh	r8, [r3, #236]
+	add	r10, r3, #260
+	ldrh	r8, [r3, #232]
 	ldrh	r9, [r3, r2]
-.L262:
+.L255:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L264
+	bhi	.L257
 	cmp	r4, #0
 	moveq	r0, r4
-	beq	.L265
+	beq	.L258
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L265:
-	ldr	r1, [r6, #2520]
+.L258:
+	ldr	r1, [r6, #2516]
 	mov	r3, #6
 	mla	r1, r3, r7, r1
 	strh	r0, [r1, #4]	@ movhi
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L264:
+.L257:
 	mov	r1, r7
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -1868,10 +1809,10 @@ update_multiplier_value:
 	add	r5, r5, #1
 	addeq	r4, r4, r9
 	uxtheq	r4, r4
-	b	.L262
-.L269:
+	b	.L255
+.L262:
 	.align	2
-.L268:
+.L261:
 	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
@@ -1886,23 +1827,23 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L273
-	ldr	r0, [r2, #2536]
+	ldr	r2, .L266
+	ldr	r0, [r2, #2532]
 	cmp	r0, #0
 	bxeq	lr
-	ldr	r3, [r2, #2520]
+	ldr	r3, [r2, #2516]
 	sub	r0, r0, r3
-	ldr	r3, .L273+4
+	ldr	r3, .L266+4
 	asr	r0, r0, #1
 	mul	r0, r3, r0
-	ldr	r3, [r2, #2540]
+	ldr	r3, [r2, #2536]
 	uxth	r0, r0
 	lsl	r0, r0, #1
 	ldrh	r0, [r3, r0]
 	bx	lr
-.L274:
+.L267:
 	.align	2
-.L273:
+.L266:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1917,49 +1858,49 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L287
-	ldr	r3, [r1, #2536]
+	ldr	r1, .L280
+	ldr	r3, [r1, #2532]
 	cmp	r3, #0
-	beq	.L281
+	beq	.L274
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r4, #6
-	ldrh	r2, [r1, #228]
+	ldrh	r2, [r1, #224]
 	movw	r5, #65535
-	ldr	ip, [r1, #2520]
+	ldr	ip, [r1, #2516]
 	rsb	r2, r2, r2, lsl #3
 	sub	r3, r3, ip
 	asr	r2, r2, #3
 	asr	r3, r3, #1
 	cmp	r0, r2
 	uxthgt	r0, r2
-	ldr	r2, .L287+4
+	ldr	r2, .L280+4
 	mul	r3, r2, r3
 	mov	r2, #0
 	uxth	r3, r3
-.L278:
+.L271:
 	uxth	lr, r2
 	cmp	r0, lr
-	bls	.L280
+	bls	.L273
 	mul	lr, r4, r3
 	add	r2, r2, #1
 	ldrh	lr, [ip, lr]
 	cmp	lr, r5
-	bne	.L282
-.L280:
-	ldr	r2, [r1, #2540]
+	bne	.L275
+.L273:
+	ldr	r2, [r1, #2536]
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	pop	{r4, r5, pc}
-.L282:
+.L275:
 	mov	r3, lr
-	b	.L278
-.L281:
+	b	.L271
+.L274:
 	mov	r0, r3
 	bx	lr
-.L288:
+.L281:
 	.align	2
-.L287:
+.L280:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1977,185 +1918,185 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r5, .L302
+	ldr	r5, .L295
 	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, .L302+4
+	ldr	r1, .L295+4
 	bl	strcpy
-	ldr	r3, [r5, #320]
+	ldr	r3, [r5, #316]
 	mov	r1, #64
-	ldr	r2, .L302+8
+	ldr	r2, .L295+8
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r1, .L302+12
+	ldr	r1, .L295+12
 	mov	r0, r4
 	add	r4, r4, #10
 	bl	strcpy
 	ldr	r3, [r5, #2556]
 	mov	r1, #64
-	ldr	r2, .L302+16
+	ldr	r2, .L295+16
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2552]
-	ldr	r2, .L302+20
+	ldr	r3, [r5, #2548]
+	ldr	r2, .L295+20
 	mov	r1, #64
 	mov	r0, r4
-	add	r7, r5, #356
+	add	r7, r5, #352
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2560]
-	ldr	r2, .L302+24
+	ldr	r2, .L295+24
 	mov	r1, #64
 	mov	r0, r4
-	ldr	r8, .L302+28
+	ldr	r8, .L295+28
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2564]
-	ldr	r2, .L302+32
+	ldr	r2, .L295+32
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2568]
-	ldr	r2, .L302+36
+	ldr	r2, .L295+36
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2572]
-	ldr	r2, .L302+40
+	ldr	r2, .L295+40
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2576]
-	ldr	r2, .L302+44
+	ldr	r2, .L295+44
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2580]
-	ldr	r2, .L302+48
+	ldr	r2, .L295+48
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2584]
 	add	r4, r4, r0
-	ldr	r2, .L302+52
+	ldr	r2, .L295+52
 	mov	r1, #64
 	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
 	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	ldr	r2, .L302+56
+	ldr	r2, .L295+56
 	mov	r1, #64
 	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2592]
-	ldr	r2, .L302+60
+	ldr	r2, .L295+60
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2596]
-	ldr	r2, .L302+64
+	ldr	r2, .L295+64
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r7, #6]
-	ldr	r2, .L302+68
+	ldr	r2, .L295+68
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #228]
-	ldr	r2, .L302+72
+	ldrh	r3, [r5, #224]
+	ldr	r2, .L295+72
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2600]
-	ldr	r2, .L302+76
+	ldr	r2, .L295+76
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2604]
-	ldr	r2, .L302+80
+	ldr	r2, .L295+80
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2608]
-	ldr	r2, .L302+84
+	ldr	r2, .L295+84
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2612]
-	ldr	r2, .L302+88
+	ldr	r2, .L295+88
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2616]
-	ldr	r2, .L302+92
+	ldr	r2, .L295+92
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2620]
-	ldr	r2, .L302+96
+	ldr	r2, .L295+96
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r8, #30]
-	ldr	r2, .L302+100
+	ldr	r2, .L295+100
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r8, #28]
-	ldr	r2, .L302+104
+	ldr	r2, .L295+104
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #344]
-	ldr	r2, .L302+108
+	ldr	r3, [r5, #340]
+	ldr	r2, .L295+108
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #336]
-	ldr	r2, .L302+112
+	ldr	r3, [r5, #332]
+	ldr	r2, .L295+112
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #232]
-	ldr	r2, .L302+116
+	ldr	r3, [r5, #228]
+	ldr	r2, .L295+116
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	add	r3, r5, #416
+	add	r3, r5, #412
 	add	r4, r4, r0
 	ldrh	r3, [r3, #6]
 	mov	r1, #64
-	ldr	r2, .L302+120
+	ldr	r2, .L295+120
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #244]
-	ldr	r2, .L302+124
+	ldrh	r3, [r5, #240]
+	ldr	r2, .L295+124
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2163,12 +2104,12 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r3]
 	mov	r1, #64
-	ldr	r2, .L302+128
+	ldr	r2, .L295+128
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #248]
-	ldr	r2, .L302+132
+	ldr	r3, [r5, #244]
+	ldr	r2, .L295+132
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2176,156 +2117,156 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L302+136
+	ldr	r2, .L295+136
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r7]
-	ldr	r2, .L302+140
+	ldr	r2, .L295+140
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #30]
-	ldr	r2, .L302+144
+	ldrh	r3, [r5, #26]
+	ldr	r2, .L295+144
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #34]	@ zero_extendqisi2
-	ldr	r2, .L302+148
+	ldrb	r3, [r5, #30]	@ zero_extendqisi2
+	ldr	r2, .L295+148
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #28]
-	ldr	r2, .L302+152
+	ldrh	r3, [r5, #24]
+	ldr	r2, .L295+152
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #36]	@ zero_extendqisi2
-	ldr	r2, .L302+156
+	ldrb	r3, [r5, #32]	@ zero_extendqisi2
+	ldr	r2, .L295+156
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #32]
-	ldr	r2, .L302+160
+	ldrh	r3, [r5, #28]
+	ldr	r2, .L295+160
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r5, #28]
+	ldrh	r3, [r5, #24]
 	add	r4, r4, r0
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	mov	r1, #64
 	mov	r0, r4
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L302+164
+	ldr	r2, .L295+164
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #82]
-	ldr	r2, .L302+168
+	ldrh	r3, [r5, #78]
+	ldr	r2, .L295+168
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #86]	@ zero_extendqisi2
-	ldr	r2, .L302+172
+	ldrb	r3, [r5, #82]	@ zero_extendqisi2
+	ldr	r2, .L295+172
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #80]
-	ldr	r2, .L302+176
+	ldrh	r3, [r5, #76]
+	ldr	r2, .L295+176
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #88]	@ zero_extendqisi2
-	ldr	r2, .L302+180
+	ldrb	r3, [r5, #84]	@ zero_extendqisi2
+	ldr	r2, .L295+180
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #84]
-	ldr	r2, .L302+184
+	ldrh	r3, [r5, #80]
+	ldr	r2, .L295+184
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r5, #80]
+	ldrh	r3, [r5, #76]
 	add	r4, r4, r0
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	mov	r1, #64
 	mov	r0, r4
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L302+188
+	ldr	r2, .L295+188
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #130]
-	ldr	r2, .L302+192
+	ldrh	r3, [r5, #126]
+	ldr	r2, .L295+192
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #134]	@ zero_extendqisi2
-	ldr	r2, .L302+196
+	ldrb	r3, [r5, #130]	@ zero_extendqisi2
+	ldr	r2, .L295+196
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #128]
-	ldr	r2, .L302+200
+	ldrh	r3, [r5, #124]
+	ldr	r2, .L295+200
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #136]	@ zero_extendqisi2
-	ldr	r2, .L302+204
+	ldrb	r3, [r5, #132]	@ zero_extendqisi2
+	ldr	r2, .L295+204
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #132]
-	ldr	r2, .L302+208
+	ldrh	r3, [r5, #128]
+	ldr	r2, .L295+208
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #178]
-	ldr	r2, .L302+212
+	ldrh	r3, [r5, #174]
+	ldr	r2, .L295+212
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #182]	@ zero_extendqisi2
-	ldr	r2, .L302+216
+	ldrb	r3, [r5, #178]	@ zero_extendqisi2
+	ldr	r2, .L295+216
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #176]
-	ldr	r2, .L302+220
+	ldrh	r3, [r5, #172]
+	ldr	r2, .L295+220
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #184]	@ zero_extendqisi2
-	ldr	r2, .L302+224
+	ldrb	r3, [r5, #180]	@ zero_extendqisi2
+	ldr	r2, .L295+224
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #180]
-	ldr	r2, .L302+228
+	ldrh	r3, [r5, #176]
+	ldr	r2, .L295+228
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r2, .L302+232
+	ldr	r2, .L295+232
 	mov	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
@@ -2335,13 +2276,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2716]
-	ldr	r2, .L302+236
+	ldr	r2, .L295+236
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2740]
-	ldr	r2, .L302+240
+	ldr	r2, .L295+240
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2349,19 +2290,19 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L302+244
+	ldr	r2, .L295+244
 	mov	r0, r4
 	bl	snprintf
 	movw	r3, #3158
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L302+248
+	ldr	r2, .L295+248
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #3160]
-	ldr	r2, .L302+252
+	ldr	r2, .L295+252
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2369,69 +2310,69 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L302+256
+	ldr	r2, .L295+256
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r2, .L302+260
+	ldr	r2, .L295+260
 	mov	r3, r0
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r0, [r5, #228]
+	ldrh	r0, [r5, #224]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r2, .L302+264
+	ldr	r2, .L295+264
 	mov	r3, r0
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, .L302+268
+	ldr	r3, .L295+268
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L290
-.L295:
+	beq	.L283
+.L288:
 	sub	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L290:
-	ldrh	r3, [r5, #176]
+.L283:
+	ldrh	r3, [r5, #172]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L292
-	ldr	r2, [r5, #76]
+	beq	.L285
+	ldr	r2, [r5, #72]
 	lsl	r3, r3, #1
 	mov	r0, r4
 	mov	r1, #64
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L302+272
+	ldr	r2, .L295+272
 	bl	snprintf
 	add	r4, r4, r0
-.L292:
+.L285:
 	mov	r0, #0
-	ldr	r9, .L302+276
+	ldr	r9, .L295+276
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	mov	r7, #0
 	movw	fp, #65535
 	mov	r10, #6
-.L294:
+.L287:
 	cmp	r0, fp
-	beq	.L293
-	ldr	r3, [r5, #2540]
+	beq	.L286
+	ldr	r3, [r5, #2536]
 	lsl	r2, r0, #1
 	mul	r8, r10, r0
 	mov	r1, #64
 	ldrh	r3, [r3, r2]
 	str	r3, [sp, #12]
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	add	r3, r3, r8
 	ldrh	r3, [r3, #4]
 	str	r3, [sp, #8]
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	ldrh	r3, [r3, r2]
 	mov	r2, r9
 	stm	sp, {r0, r3}
@@ -2439,34 +2380,34 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	add	r7, r7, #1
 	bl	snprintf
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	cmp	r7, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
-	bne	.L294
-.L293:
-	ldr	r2, [r5, #2520]
+	bne	.L287
+.L286:
+	ldr	r2, [r5, #2516]
 	mov	r7, #0
-	ldr	r3, [r5, #2536]
+	ldr	r3, [r5, #2532]
 	movw	r9, #65535
-	ldr	fp, .L302+280
+	ldr	fp, .L295+280
 	mov	r10, #6
 	sub	r3, r3, r2
-	ldr	r2, .L302+284
+	ldr	r2, .L295+284
 	asr	r3, r3, #1
 	mul	r3, r2, r3
 	uxth	r3, r3
-.L296:
+.L289:
 	cmp	r3, r9
-	beq	.L295
-	ldr	r1, [r5, #2540]
+	beq	.L288
+	ldr	r1, [r5, #2536]
 	lsl	r2, r3, #1
 	mul	r8, r10, r3
 	mov	r0, r4
 	ldrh	r2, [r1, r2]
 	mov	r1, #64
 	str	r2, [sp, #8]
-	ldr	r2, [r5, #2520]
+	ldr	r2, [r5, #2516]
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
 	str	r3, [sp]
@@ -2477,13 +2418,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L295
-	ldr	r3, [r5, #2520]
+	beq	.L288
+	ldr	r3, [r5, #2516]
 	ldrh	r3, [r3, r8]
-	b	.L296
-.L303:
+	b	.L289
+.L296:
 	.align	2
-.L302:
+.L295:
 	.word	.LANCHOR0
 	.word	.LC9
 	.word	.LC10
@@ -2491,7 +2432,7 @@ FtlPrintInfo2buf:
 	.word	.LC12
 	.word	.LC13
 	.word	.LC14
-	.word	.LANCHOR0+2472
+	.word	.LANCHOR0+2468
 	.word	.LC15
 	.word	.LC16
 	.word	.LC17
@@ -2569,14 +2510,14 @@ rknand_proc_ftlread:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	cmp	r0, #2048
-	blt	.L306
+	blt	.L299
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r1
-	ldr	r3, .L311
+	ldr	r3, .L304
 	mov	r1, #64
 	mov	r0, r5
-	ldr	r2, .L311+4
+	ldr	r2, .L304+4
 	bl	snprintf
 	add	r4, r5, r0
 	mov	r0, r4
@@ -2584,12 +2525,12 @@ rknand_proc_ftlread:
 	add	r0, r4, r0
 	sub	r0, r0, r5
 	pop	{r4, r5, r6, pc}
-.L306:
+.L299:
 	mov	r0, #0
 	bx	lr
-.L312:
+.L305:
 	.align	2
-.L311:
+.L304:
 	.word	.LC0
 	.word	.LC77
 	.fnend
@@ -2608,146 +2549,146 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L338
+	ldr	r4, .L331
 	ldr	r2, [r4, #2608]
 	ldr	r3, [r4, #2620]
 	cmp	r2, r3
-	bcs	.L314
-	ldr	r2, [r4, #2540]
+	bcs	.L307
+	ldr	r2, [r4, #2536]
 	mov	r3, #0
-	ldrh	r1, [r4, #244]
+	ldrh	r1, [r4, #240]
 	str	r3, [r4, #2600]
 	sub	r2, r2, #2
-.L315:
+.L308:
 	cmp	r3, r1
-	bcc	.L316
+	bcc	.L309
 	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r3, .L338+4
+	ldr	r3, .L331+4
 	str	r0, [r4, #2608]
 	ldr	r0, [r4, #2604]
 	ldrh	r1, [r3]
 	sub	r0, r5, r0
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2600]
-.L317:
+.L310:
 	ldr	r6, [r4, #2620]
 	ldr	r7, [r4, #2608]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L322
+	bls	.L315
 	ldr	r2, [r4, #2616]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L322
-.L324:
+	bls	.L315
+.L317:
 	movw	r5, #65535
-.L323:
+.L316:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L316:
+.L309:
 	ldrh	r0, [r2, #2]!
 	add	r3, r3, #1
 	ldr	ip, [r4, #2600]
 	add	r0, r0, ip
 	str	r0, [r4, #2600]
-	b	.L315
-.L314:
+	b	.L308
+.L307:
 	ldr	r3, [r4, #2616]
 	cmp	r2, r3
 	addhi	r3, r3, #1
 	strhi	r3, [r4, #2616]
 	movhi	r3, #0
-	bls	.L317
-.L319:
-	ldrh	r2, [r4, #244]
+	bls	.L310
+.L312:
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	bcs	.L317
-	ldr	r0, [r4, #2540]
+	bcs	.L310
+	ldr	r0, [r4, #2536]
 	lsl	r1, r3, #1
 	add	r3, r3, #1
 	ldrh	r2, [r0, r1]
 	add	r2, r2, #1
 	strh	r2, [r0, r1]	@ movhi
-	b	.L319
-.L322:
-	ldrh	r0, [r4, #228]
+	b	.L312
+.L315:
+	ldrh	r0, [r4, #224]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
 	bl	GetFreeBlockMaxEraseCount
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L324
-	ldr	r3, [r4, #2524]
+	bcc	.L317
+	ldr	r3, [r4, #2520]
 	cmp	r3, #0
-	beq	.L324
-	ldrh	r2, [r4, #244]
+	beq	.L317
+	ldrh	r2, [r4, #240]
 	movw	r1, #65535
-	ldr	lr, [r4, #2520]
+	ldr	lr, [r4, #2516]
 	mov	r0, #0
-	ldr	r8, [r4, #2540]
+	ldr	r8, [r4, #2536]
 	mov	fp, #6
-	ldr	r10, .L338+8
+	ldr	r10, .L331+8
 	str	r2, [sp, #20]
 	mov	r2, r1
-.L325:
+.L318:
 	ldrh	ip, [r3]
 	movw	r5, #65535
 	cmp	ip, r5
-	bne	.L328
+	bne	.L321
 	mov	r5, r2
-.L327:
+.L320:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L324
+	beq	.L317
 	lsl	fp, r5, #1
 	ldrh	r10, [r8, fp]
 	cmp	r6, r10
-	bcs	.L329
+	bcs	.L322
 	bl	GetFreeBlockMinEraseCount
 	cmp	r6, r0
 	strcc	r1, [r4, #2620]
-.L329:
+.L322:
 	cmp	r7, r10
-	bls	.L324
+	bls	.L317
 	add	r3, r10, #128
 	cmp	r9, r3
-	ble	.L324
+	ble	.L317
 	add	r3, r10, #256
 	cmp	r7, r3
-	bhi	.L330
+	bhi	.L323
 	ldr	r3, [r4, #2616]
 	add	r10, r10, #768
 	cmp	r10, r3
-	bcs	.L324
-.L330:
+	bcs	.L317
+.L323:
 	str	r9, [sp, #8]
 	mov	r2, r7
 	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldr	r0, .L338+12
+	ldr	r0, .L331+12
 	str	r3, [sp, #4]
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, fp]
 	str	r3, [sp]
 	ldr	r3, [r4, #2616]
 	bl	sftl_printk
 	mov	r3, #1
 	str	r3, [r4, #3168]
-	b	.L323
-.L328:
+	b	.L316
+.L321:
 	add	r0, r0, #1
 	ldr	r5, [sp, #20]
 	uxth	r0, r0
 	cmp	r0, r5
-	bhi	.L324
+	bhi	.L317
 	ldrh	r5, [r3, #4]
 	cmp	r5, #0
-	beq	.L326
+	beq	.L319
 	sub	r3, r3, lr
 	asr	r3, r3, #1
 	mul	r3, r10, r3
@@ -2755,18 +2696,18 @@ GetSwlReplaceBlock:
 	lsl	r3, r5, #1
 	ldrh	r3, [r8, r3]
 	cmp	r6, r3
-	bcs	.L327
+	bcs	.L320
 	cmp	r1, r3
 	movhi	r1, r3
 	movhi	r2, r5
-.L326:
+.L319:
 	mla	r3, fp, ip, lr
-	b	.L325
-.L339:
+	b	.L318
+.L332:
 	.align	2
-.L338:
+.L331:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+296
+	.word	.LANCHOR0+292
 	.word	-1431655765
 	.word	.LC78
 	.fnend
@@ -2783,23 +2724,23 @@ free_data_superblock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	movw	r2, #65535
 	cmp	r0, r2
-	beq	.L343
-	ldr	r2, .L346
+	beq	.L336
+	ldr	r2, .L339
 	lsl	r3, r0, #1
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r1, #0
-	ldr	r2, [r2, #76]
+	ldr	r2, [r2, #72]
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
 	mov	r0, #0
 	pop	{r4, pc}
-.L343:
+.L336:
 	mov	r0, #0
 	bx	lr
-.L347:
+.L340:
 	.align	2
-.L346:
+.L339:
 	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -2819,48 +2760,48 @@ get_new_active_ppa:
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L349
-	movw	r2, #2781
-	ldr	r1, .L364
-	ldr	r0, .L364+4
+	bne	.L342
+	movw	r2, #2785
+	ldr	r1, .L357
+	ldr	r0, .L357+4
 	bl	sftl_printk
-.L349:
-	ldr	r6, .L364+8
-	movw	r3, #306
+.L342:
+	ldr	r6, .L357+8
+	movw	r3, #302
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r6, r3]
 	cmp	r2, r3
-	bne	.L350
-	movw	r2, #2782
-	ldr	r1, .L364
-	ldr	r0, .L364+4
+	bne	.L343
+	movw	r2, #2786
+	ldr	r1, .L357
+	ldr	r0, .L357+4
 	bl	sftl_printk
-.L350:
+.L343:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L351
-	movw	r2, #2783
-	ldr	r1, .L364
-	ldr	r0, .L364+4
+	bne	.L344
+	movw	r2, #2787
+	ldr	r1, .L357
+	ldr	r0, .L357+4
 	bl	sftl_printk
-.L351:
+.L344:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	mov	r3, #0
-	ldrh	r1, [r6, #236]
+	ldrh	r1, [r6, #232]
 	movw	ip, #65535
 	strb	r3, [r4, #10]
 	add	r2, r4, r2, lsl #1
 	ldrh	r0, [r2, #16]
 	mov	r2, r3
-.L352:
+.L345:
 	cmp	r0, ip
-	beq	.L354
-	movw	r3, #306
+	beq	.L347
+	movw	r3, #302
 	ldrh	r5, [r4, #2]
 	ldrh	ip, [r6, r3]
 	cmp	r5, ip
 	movwcs	r5, #65535
-	bcs	.L348
+	bcs	.L341
 	ldrh	r2, [r4, #4]
 	orr	r5, r5, r0, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
@@ -2868,7 +2809,7 @@ get_new_active_ppa:
 	sub	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #4]	@ movhi
-.L357:
+.L350:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2879,7 +2820,7 @@ get_new_active_ppa:
 	add	r0, r4, r3, lsl #1
 	ldrh	r0, [r0, #16]
 	cmp	r0, lr
-	beq	.L357
+	beq	.L350
 	strb	r3, [r4, #6]
 	cmp	r2, #0
 	ldrh	r3, [r4, #2]
@@ -2888,15 +2829,15 @@ get_new_active_ppa:
 	lsr	r3, r3, #5
 	moveq	r3, #0
 	cmp	r3, #0
-	beq	.L348
-	movw	r2, #2806
-	ldr	r1, .L364
-	ldr	r0, .L364+4
+	beq	.L341
+	movw	r2, #2810
+	ldr	r1, .L357
+	ldr	r0, .L357+4
 	bl	sftl_printk
-.L348:
+.L341:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L354:
+.L347:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -2909,10 +2850,10 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, lsl #1
 	ldrh	r0, [r3, #16]
-	b	.L352
-.L365:
+	b	.L345
+.L358:
 	.align	2
-.L364:
+.L357:
 	.word	.LANCHOR1+111
 	.word	.LC8
 	.word	.LANCHOR0
@@ -2931,27 +2872,27 @@ FtlGcBufInit:
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	mov	lr, #12
-	ldr	r5, .L372
+	ldr	r5, .L365
 	mov	r4, #1
 	mov	r6, #20
 	mov	r3, #0
-	ldr	r2, .L372+4
+	ldr	r2, .L365+4
 	str	r3, [r2, #3172]
-.L367:
-	ldrh	r1, [r2, #236]
+.L360:
+	ldrh	r1, [r2, #232]
 	uxth	r0, r3
 	add	ip, r3, #1
 	cmp	r0, r1
-	bcc	.L368
-	ldr	r4, .L372
+	bcc	.L361
+	ldr	r4, .L365
 	mov	ip, #12
 	mov	lr, #0
-.L369:
+.L362:
 	ldr	r3, [r2, #3192]
 	cmp	r1, r3
-	bcc	.L370
+	bcc	.L363
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L368:
+.L361:
 	uxth	r3, r3
 	ldr	r7, [r2, #3176]
 	mul	r0, lr, r3
@@ -2966,7 +2907,7 @@ FtlGcBufInit:
 	bic	r1, r1, #3
 	add	r1, r8, r1
 	str	r1, [r7, r0]
-	ldr	r1, .L372+8
+	ldr	r1, .L365+8
 	ldr	r8, [r2, #3176]
 	ldrh	r1, [r1]
 	add	r7, r8, r0
@@ -2985,8 +2926,8 @@ FtlGcBufInit:
 	ldr	r1, [r7, #4]
 	str	r1, [r3, #12]
 	mov	r3, ip
-	b	.L367
-.L370:
+	b	.L360
+.L363:
 	mul	r5, ip, r1
 	ldr	r6, [r2, #3176]
 	add	r3, r6, r5
@@ -3000,7 +2941,7 @@ FtlGcBufInit:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r6, r5]
-	ldr	r3, .L372+8
+	ldr	r3, .L365+8
 	ldr	r0, [r2, #3176]
 	ldrh	r3, [r3]
 	add	r0, r0, r5
@@ -3014,13 +2955,13 @@ FtlGcBufInit:
 	bic	r3, r3, #3
 	add	r3, r5, r3
 	str	r3, [r0, #4]
-	b	.L369
-.L373:
+	b	.L362
+.L366:
 	.align	2
-.L372:
-	.word	.LANCHOR0+314
+.L365:
+	.word	.LANCHOR0+310
 	.word	.LANCHOR0
-	.word	.LANCHOR0+316
+	.word	.LANCHOR0+312
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
@@ -3033,7 +2974,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L382
+	ldr	r3, .L375
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	lr, #0
@@ -3042,30 +2983,30 @@ FtlGcBufFree:
 	mov	r8, lr
 	ldr	r6, [r3, #3192]
 	ldr	r4, [r3, #3176]
-.L375:
+.L368:
 	uxth	r3, lr
 	cmp	r1, r3
 	popls	{r4, r5, r6, r7, r8, r9, r10, pc}
 	mla	ip, r5, r3, r0
 	mov	r2, #0
-.L376:
+.L369:
 	uxth	r3, r2
 	cmp	r6, r3
-	bls	.L377
+	bls	.L370
 	mul	r3, r7, r3
 	add	r2, r2, #1
 	ldr	r10, [r4, r3]
 	add	r9, r4, r3
 	ldr	r3, [ip, #8]
 	cmp	r10, r3
-	bne	.L376
+	bne	.L369
 	str	r8, [r9, #8]
-.L377:
+.L370:
 	add	lr, lr, #1
-	b	.L375
-.L383:
+	b	.L368
+.L376:
 	.align	2
-.L382:
+.L375:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -3079,7 +3020,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L392
+	ldr	r3, .L385
 	mov	ip, #0
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -3088,34 +3029,34 @@ FtlGcBufAlloc:
 	mov	r8, #20
 	ldr	r4, [r3, #3192]
 	ldr	r5, [r3, #3176]
-.L385:
+.L378:
 	uxth	r2, ip
 	cmp	r1, r2
-	bhi	.L389
+	bhi	.L382
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L389:
+.L382:
 	mov	lr, #0
-.L386:
+.L379:
 	uxth	r3, lr
 	cmp	r4, r3
-	bls	.L387
+	bls	.L380
 	mla	r3, r6, r3, r5
 	add	lr, lr, #1
 	ldr	r9, [r3, #8]
 	cmp	r9, #0
-	bne	.L386
+	bne	.L379
 	mla	r2, r8, r2, r0
 	ldr	lr, [r3]
 	str	r7, [r3, #8]
 	str	lr, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L387:
+.L380:
 	add	ip, ip, #1
-	b	.L385
-.L393:
+	b	.L378
+.L386:
 	.align	2
-.L392:
+.L385:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -3130,25 +3071,25 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L399
+	ldr	r2, .L392
 	ldr	r3, [r2, #3196]
 	add	r2, r2, #3200
 	ldrh	r2, [r2]
 	add	r2, r3, r2, lsl #1
-.L395:
+.L388:
 	cmp	r3, r2
-	bne	.L397
+	bne	.L390
 	mov	r0, #0
 	bx	lr
-.L397:
+.L390:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L395
+	bne	.L388
 	mov	r0, #1
 	bx	lr
-.L400:
+.L393:
 	.align	2
-.L399:
+.L392:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -3169,29 +3110,29 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	r3, .L406
+	ldr	r3, .L399
 	mov	ip, #0
 	add	lr, r3, #3200
 	ldr	r1, [r3, #3196]
 	ldrh	r7, [lr]
 	sub	r2, r1, #2
-.L402:
+.L395:
 	uxth	r8, ip
 	cmp	r8, r7
-	bcc	.L404
+	bcc	.L397
 	moveq	ip, r8
 	lsleq	ip, ip, #1
 	strheq	r0, [r1, ip]	@ movhi
 	ldrheq	r2, [lr]
 	addeq	r2, r2, #1
 	strheq	r2, [lr]	@ movhi
-	b	.L403
-.L404:
+	b	.L396
+.L397:
 	ldrh	r8, [r2, #2]!
 	add	ip, ip, #1
 	cmp	r8, r0
-	bne	.L402
-.L403:
+	bne	.L395
+.L396:
 	movw	ip, #3208
 	mov	r0, #12
 	ldrh	r2, [r3, ip]
@@ -3204,9 +3145,9 @@ FtlGcUpdatePage:
 	add	r2, r2, #1
 	strh	r2, [r3, ip]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L407:
+.L400:
 	.align	2
-.L406:
+.L399:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -3224,27 +3165,27 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r1, r0
 	mov	r4, r0
-	ldr	r0, .L412
+	ldr	r0, .L405
 	bl	sftl_printk
-	ldr	r3, .L412+4
-	ldrh	r0, [r3, #226]
+	ldr	r3, .L405+4
+	ldrh	r0, [r3, #222]
 	cmp	r4, r0
-	beq	.L409
-	ldrh	r1, [r3, #224]
+	beq	.L402
+	ldrh	r1, [r3, #220]
 	cmp	r4, r1
-	beq	.L409
+	beq	.L402
 	movw	r2, #65535
 	cmp	r0, r2
-	strheq	r4, [r3, #226]	@ movhi
-	beq	.L409
+	strheq	r4, [r3, #222]	@ movhi
+	beq	.L402
 	cmp	r1, r2
-	strheq	r4, [r3, #224]	@ movhi
-.L409:
+	strheq	r4, [r3, #220]	@ movhi
+.L402:
 	mov	r0, #0
 	pop	{r4, pc}
-.L413:
+.L406:
 	.align	2
-.L412:
+.L405:
 	.word	.LC79
 	.word	.LANCHOR0
 	.fnend
@@ -3262,43 +3203,43 @@ FtlGcMarkBadPhyBlk:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r5, r0
-	ldr	r4, .L419
+	ldr	r4, .L412
 	movw	r6, #3210
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r7, r0
 	ldrh	r1, [r4, r6]
-	ldr	r0, .L419+4
+	ldr	r0, .L412+4
 	bl	sftl_printk
 	mov	r0, r7
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, r6]
 	mov	r2, #0
-	ldr	r0, .L419+8
-.L415:
+	ldr	r0, .L412+8
+.L408:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L417
+	bhi	.L410
 	cmp	r3, #15
 	movwls	r2, #3210
 	addls	r1, r3, #1
 	strhls	r1, [r4, r2]	@ movhi
 	lslls	r3, r3, #1
-	ldrls	r2, .L419+8
+	ldrls	r2, .L412+8
 	strhls	r5, [r2, r3]	@ movhi
-	b	.L416
-.L417:
+	b	.L409
+.L410:
 	add	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L415
-.L416:
+	bne	.L408
+.L409:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L420:
+.L413:
 	.align	2
-.L419:
+.L412:
 	.word	.LANCHOR0
 	.word	.LC80
 	.word	.LANCHOR0+3212
@@ -3317,14 +3258,14 @@ FtlGcReFreshBadBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movw	r3, #3210
-	ldr	r4, .L428
+	ldr	r4, .L421
 	ldrh	r2, [r4, r3]
 	cmp	r2, #0
-	beq	.L422
-	ldrh	r1, [r4, #226]
+	beq	.L415
+	ldrh	r1, [r4, #222]
 	movw	r3, #65535
 	cmp	r1, r3
-	bne	.L422
+	bne	.L415
 	movw	r3, #3246
 	movw	r5, #3246
 	ldrh	r1, [r4, r3]
@@ -3332,7 +3273,7 @@ FtlGcReFreshBadBlk:
 	movcs	r2, #0
 	strhcs	r2, [r4, r3]	@ movhi
 	ldrh	r3, [r4, r5]
-	ldr	r2, .L428+4
+	ldr	r2, .L421+4
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	bl	P2V_block_in_plane
@@ -3340,12 +3281,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, r5]
 	add	r3, r3, #1
 	strh	r3, [r4, r5]	@ movhi
-.L422:
+.L415:
 	mov	r0, #0
 	pop	{r4, r5, r6, pc}
-.L429:
+.L422:
 	.align	2
-.L428:
+.L421:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3212
 	.fnend
@@ -3361,11 +3302,11 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r1, .L431
+	ldr	r1, .L424
 	b	__kmalloc
-.L432:
+.L425:
 	.align	2
-.L431:
+.L424:
 	.word	6291649
 	.fnend
 	.size	ftl_malloc, .-ftl_malloc
@@ -3396,53 +3337,53 @@ rknand_print_hex:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, #0
-	ldr	fp, .L444
+	ldr	fp, .L437
 	mov	r10, r0
 	mov	r7, r1
 	mov	r8, r2
 	mov	r9, r3
 	mov	r5, r6
 	mov	r4, r6
-.L435:
+.L428:
 	cmp	r4, r9
-	bcc	.L441
-	ldr	r0, .L444+4
+	bcc	.L434
+	ldr	r0, .L437+4
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	sftl_printk
-.L441:
+.L434:
 	cmp	r5, #0
-	bne	.L436
+	bne	.L429
 	mov	r3, r6
 	mov	r2, r7
 	mov	r1, r10
-	ldr	r0, .L444+8
+	ldr	r0, .L437+8
 	bl	sftl_printk
-.L436:
+.L429:
 	cmp	r8, #4
 	ldreq	r1, [r7, r4, lsl #2]
-	ldreq	r0, .L444+12
-	beq	.L443
+	ldreq	r0, .L437+12
+	beq	.L436
 	cmp	r8, #2
 	lsleq	r3, r4, #1
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
-	ldrne	r0, .L444+16
+	ldrne	r0, .L437+16
 	moveq	r0, fp
 	ldrheq	r1, [r7, r3]
-.L443:
+.L436:
 	add	r5, r5, #1
 	bl	sftl_printk
 	cmp	r5, #15
-	bls	.L440
+	bls	.L433
 	mov	r5, #0
-	ldr	r0, .L444+4
+	ldr	r0, .L437+4
 	bl	sftl_printk
-.L440:
+.L433:
 	add	r4, r4, #1
 	add	r6, r6, r8
-	b	.L435
-.L445:
+	b	.L428
+.L438:
 	.align	2
-.L444:
+.L437:
 	.word	.LC83
 	.word	.LC85
 	.word	.LC81
@@ -3463,12 +3404,12 @@ FlashEraseBlocks:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r5, .L464
+	ldr	r5, .L457
 	.pad #28
 	sub	sp, sp, #28
 	mov	r4, r0
 	mov	fp, r0
-	ldr	r2, .L464+4
+	ldr	r2, .L457+4
 	mov	r7, #0
 	ldrh	r9, [r5, #12]
 	mvn	r10, #0
@@ -3477,25 +3418,25 @@ FlashEraseBlocks:
 	str	r3, [sp, #20]
 	lsl	r3, r9, #3
 	str	r3, [sp]
-.L447:
+.L440:
 	cmp	r7, r8
-	beq	.L451
+	beq	.L444
 	add	r2, sp, #12
 	add	r1, sp, #16
 	mov	r0, fp
 	bl	l2p_addr_tran
 	ldr	r6, [sp, #12]
 	cmp	r6, #0
-	bne	.L448
+	bne	.L441
 	ldr	r2, [sp, #16]
 	ldr	r3, [sp]
 	cmp	r3, r2
-	bls	.L448
-	ldr	r5, .L464+8
-	ldr	r7, .L464+12
-	ldr	r9, .L464+16
-	b	.L462
-.L450:
+	bls	.L441
+	ldr	r5, .L457+8
+	ldr	r7, .L457+12
+	ldr	r9, .L457+16
+	b	.L455
+.L443:
 	mvn	r3, #0
 	ldr	r2, [sp, #16]
 	str	r3, [r4, #-20]
@@ -3511,22 +3452,22 @@ FlashEraseBlocks:
 	mov	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L464+20
+	ldr	r0, .L457+20
 	bl	rknand_print_hex
-.L462:
+.L455:
 	cmp	r6, r8
 	add	r4, r4, #20
-	bne	.L450
+	bne	.L443
 	bl	dump_stack
-.L451:
+.L444:
 	ldr	r3, [sp, #4]
 	mov	r0, #0
 	ldr	r2, [sp, #20]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L458
+	beq	.L451
 	bl	__stack_chk_fail
-.L448:
+.L441:
 	ldr	r2, [r5, #3252]
 	uxtb	r0, r6
 	ldr	r1, [sp, #16]
@@ -3536,7 +3477,7 @@ FlashEraseBlocks:
 	str	r2, [fp]
 	ldrh	r2, [r5, #14]
 	cmp	r2, #4
-	bne	.L455
+	bne	.L448
 	ldr	r1, [sp, #16]
 	ldr	r2, [r5, #3252]
 	ldrb	r0, [sp, #12]	@ zero_extendqisi2
@@ -3544,17 +3485,17 @@ FlashEraseBlocks:
 	blx	r2
 	cmp	r0, #0
 	strne	r10, [fp]
-.L455:
+.L448:
 	add	r7, r7, #1
 	add	fp, fp, #20
-	b	.L447
-.L458:
+	b	.L440
+.L451:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L465:
+.L458:
 	.align	2
-.L464:
+.L457:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1+130
@@ -3580,14 +3521,14 @@ FtlFreeSysBlkQueueIn:
 	bxhi	lr
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	ldr	r6, .L479
-	add	r4, r6, #416
+	ldr	r6, .L472
+	add	r4, r6, #412
 	ldrh	r3, [r4, #6]
 	cmp	r3, #1024
 	popeq	{r4, r5, r6, r7, r8, pc}
 	cmp	r1, #0
 	mov	r5, r0
-	beq	.L468
+	beq	.L461
 	bl	P2V_block_in_plane
 	mov	r7, r0
 	ldr	r0, [r6, #3272]
@@ -3596,7 +3537,7 @@ FtlFreeSysBlkQueueIn:
 	mov	r1, r2
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-	ldr	r2, [r6, #2540]
+	ldr	r2, [r6, #2536]
 	lsl	r0, r7, #1
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
@@ -3604,7 +3545,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r6, #2612]
 	add	r3, r3, #1
 	str	r3, [r6, #2612]
-.L468:
+.L461:
 	ldrh	r3, [r4, #6]
 	add	r3, r3, #1
 	strh	r3, [r4, #6]	@ movhi
@@ -3615,9 +3556,9 @@ FtlFreeSysBlkQueueIn:
 	strh	r5, [r2, #8]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L480:
+.L473:
 	.align	2
-.L479:
+.L472:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
@@ -3633,12 +3574,12 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldr	r6, .L487
-	add	r4, r6, #416
+	ldr	r6, .L480
+	add	r4, r6, #412
 	ldrh	r2, [r4, #6]
 	cmp	r2, #0
 	movweq	r5, #65535
-	beq	.L482
+	beq	.L475
 	ldrh	r3, [r4, #2]
 	sub	r2, r2, #1
 	ldr	r0, [r6, #3272]
@@ -3656,24 +3597,24 @@ FtlFreeSysBlkQueueOut:
 	ldr	r3, [r6, #2612]
 	add	r3, r3, #1
 	str	r3, [r6, #2612]
-.L482:
+.L475:
 	sub	r3, r5, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L483
+	bls	.L476
 	ldrh	r2, [r4, #6]
 	mov	r1, r5
-	ldr	r0, .L487+4
+	ldr	r0, .L480+4
 	bl	sftl_printk
-.L484:
-	b	.L484
-.L483:
+.L477:
+	b	.L477
+.L476:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L488:
+.L481:
 	.align	2
-.L487:
+.L480:
 	.word	.LANCHOR0
 	.word	.LC89
 	.fnend
@@ -3694,16 +3635,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	mov	r4, r0
 	ldr	r2, [r0, #12]
-.L490:
+.L483:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L493
+	bcs	.L486
 	mov	r7, r2
 	add	r3, r3, #1
 	ldrh	r6, [r7]
 	add	r2, r2, #2
 	cmp	r6, #0
-	bne	.L490
+	bne	.L483
 	bl	FtlFreeSysBlkQueueOut
 	sub	r3, r0, #1
 	movw	r2, #65533
@@ -3711,14 +3652,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L491
-	ldr	r3, .L498
-	ldr	r0, .L498+4
+	bls	.L484
+	ldr	r3, .L491
+	ldr	r0, .L491+4
 	ldrh	r2, [r3, #6]
 	bl	sftl_printk
-.L492:
-	b	.L492
-.L491:
+.L485:
+	b	.L485
+.L484:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -3727,21 +3668,21 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L493:
+.L486:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L495
+	bhi	.L488
 	movw	r2, #578
-	ldr	r1, .L498+8
-	ldr	r0, .L498+12
+	ldr	r1, .L491+8
+	ldr	r0, .L491+12
 	bl	sftl_printk
-.L495:
+.L488:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L499:
+.L492:
 	.align	2
-.L498:
-	.word	.LANCHOR0+416
+.L491:
+	.word	.LANCHOR0+412
 	.word	.LC90
 	.word	.LANCHOR1+147
 	.word	.LC8
@@ -3774,17 +3715,17 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r3, #65535
-	ldr	r4, .L603
-	movw	r6, #310
+	ldr	r4, .L596
+	movw	r6, #306
 	mov	r2, #32
 	mov	r5, #0
 	mov	r7, #12
 	str	r3, [r4, #3280]
 	mvn	r3, #0
 	ldrh	r0, [r4, r6]
-	add	r9, r4, #316
-	strh	r3, [r4, #226]	@ movhi
-	strh	r3, [r4, #224]	@ movhi
+	add	r9, r4, #312
+	strh	r3, [r4, #222]	@ movhi
+	strh	r3, [r4, #220]	@ movhi
 	movw	r3, #3156
 	strh	r2, [r4, r3]	@ movhi
 	mov	r2, #128
@@ -3821,7 +3762,7 @@ FtlMemInit:
 	mov	r6, #20
 	mul	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	str	r0, [r4, #3204]
 	mul	r6, r6, r3
 	lsl	r8, r6, #2
@@ -3839,8 +3780,8 @@ FtlMemInit:
 	str	r0, [r4, #3272]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldrh	r3, [r4, #236]
-	movw	r8, #314
+	ldrh	r3, [r4, #232]
+	movw	r8, #310
 	ldrh	r6, [r4, r8]
 	str	r0, [r4, #3188]
 	lsl	r3, r3, #1
@@ -3874,13 +3815,13 @@ FtlMemInit:
 	str	r0, [r4, #3324]
 	mov	r0, r6
 	bl	ftl_malloc
-	movw	r3, #262
+	movw	r3, #258
 	str	r0, [r4, #3328]
 	ldrh	r0, [r4, r3]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r3, [r9]
-	ldrh	r6, [r4, #236]
+	ldrh	r6, [r4, #232]
 	str	r0, [r4, #3332]
 	mul	r6, r6, r3
 	mov	r0, r6
@@ -3895,55 +3836,50 @@ FtlMemInit:
 	mul	r0, r0, r3
 	bl	ftl_malloc
 	str	r0, [r4, #3184]
-	ldrh	r0, [r4, #246]
+	ldrh	r0, [r4, #242]
 	lsl	r0, r0, #1
 	uxth	r0, r0
 	strh	r0, [r6]	@ movhi
 	bl	ftl_malloc
 	str	r0, [r4, #3348]
 	ldrh	r0, [r6]
-	ldr	r3, .L603+4
+	ldr	r3, .L596+4
 	add	r0, r0, #544
 	add	r0, r0, #3
 	lsr	r0, r0, #9
 	strh	r0, [r6]	@ movhi
 	and	r0, r3, r0, lsl #9
 	bl	ftl_malloc
-	ldrh	r6, [r4, #246]
+	ldrh	r6, [r4, #242]
 	str	r0, [r4, #3352]
 	add	r0, r0, #32
-	str	r0, [r4, #2540]
+	str	r0, [r4, #2536]
 	lsl	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3356]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r6, [r4, #332]
-	str	r0, [r4, #76]
+	ldr	r6, [r4, #328]
+	str	r0, [r4, #72]
 	lsl	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3360]
 	mov	r0, r6
+	add	r6, r4, #320
 	bl	ftl_malloc
 	str	r0, [r4, #3364]
-	add	r6, r4, #324
-	ldrh	r0, [r4, #246]
-	lsr	r0, r0, #3
-	add	r0, r0, #4
-	bl	ftl_malloc
-	str	r0, [r4, #24]
 	ldrh	r0, [r6]
 	lsl	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #352]
+	str	r0, [r4, #348]
 	ldrh	r0, [r6]
 	lsl	r0, r0, #1
 	bl	ftl_malloc
 	str	r0, [r4, #3368]
 	ldrh	r0, [r6]
-	movw	r6, #326
+	movw	r6, #322
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3372]
@@ -3953,16 +3889,15 @@ FtlMemInit:
 	ldrh	r2, [r4, r6]
 	mov	r1, r5
 	str	r0, [r4, #3376]
-	movw	r5, #342
-	movw	r6, #258
+	movw	r5, #338
 	lsl	r2, r2, #2
 	bl	ftl_memset
-	add	r3, r4, #340
+	add	r3, r4, #336
 	ldrh	r0, [r3]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3380]
-	ldr	r0, [r4, #332]
+	ldr	r0, [r4, #328]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3384]
@@ -3971,19 +3906,19 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	r3, [r4, r5]
 	add	r5, r4, #3392
-	str	r0, [r4, #2544]
+	str	r0, [r4, #2540]
 	ldrh	r0, [r4, r8]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	ldrh	r3, [r4, #246]
+	ldrh	r3, [r4, #242]
 	str	r0, [r4, #3388]
 	mov	r0, #6
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	movw	r3, #302
-	str	r0, [r4, #2520]
+	movw	r3, #298
+	str	r0, [r4, #2516]
 	ldrh	r0, [r4, r3]
-	ldrh	r3, [r4, r6]
+	ldrh	r3, [r4, #254]
 	add	r0, r0, #31
 	asr	r0, r0, #5
 	strh	r0, [r5]	@ movhi
@@ -3991,145 +3926,145 @@ FtlMemInit:
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r2, [r5]
-	add	ip, r4, #384
-	ldrh	lr, [r4, r6]
+	add	ip, r4, #380
+	ldrh	lr, [r4, #254]
 	mov	r3, #1
-	str	r0, [r4, #384]
+	str	r0, [r4, #380]
 	lsl	r2, r2, #2
 	mov	r1, r2
-.L502:
+.L495:
 	cmp	r3, lr
-	bcc	.L503
-	ldr	r2, .L603+8
+	bcc	.L496
+	ldr	r2, .L596+8
 	mov	r1, #0
 	add	r3, r2, r3, lsl #2
 	add	r2, r2, #56
 	add	r3, r3, #24
-.L504:
+.L497:
 	cmp	r2, r3
-	bne	.L505
+	bne	.L498
 	ldr	r3, [r4, #3360]
 	cmp	r3, #0
-	bne	.L506
-.L508:
-	ldr	r1, .L603+12
-	ldr	r0, .L603+16
+	bne	.L499
+.L501:
+	ldr	r1, .L596+12
+	ldr	r0, .L596+16
 	bl	sftl_printk
 	mvn	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L503:
-	ldr	r0, [r4, #384]
+.L496:
+	ldr	r0, [r4, #380]
 	add	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [ip, #4]!
-	b	.L502
-.L505:
+	b	.L495
+.L498:
 	str	r1, [r3, #4]!
-	b	.L504
-.L506:
+	b	.L497
+.L499:
 	ldr	r3, [r4, #3364]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3380]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3384]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #2544]
+	beq	.L501
+	ldr	r3, [r4, #2540]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3388]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #2520]
+	beq	.L501
+	ldr	r3, [r4, #2516]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #384]
+	beq	.L501
+	ldr	r3, [r4, #380]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #76]
+	beq	.L501
+	ldr	r3, [r4, #72]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3204]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3272]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3312]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3320]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3340]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3184]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #2540]
+	beq	.L501
+	ldr	r3, [r4, #2536]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, [r4, #352]
+	beq	.L501
+	ldr	r3, [r4, #348]
 	cmp	r3, #0
-	beq	.L508
-	ldr	r3, .L603
+	beq	.L501
+	ldr	r3, .L596
 	ldr	r2, [r3, #3368]
 	cmp	r2, #0
-	beq	.L508
+	beq	.L501
 	ldr	r2, [r3, #3372]
 	cmp	r2, #0
-	beq	.L508
+	beq	.L501
 	ldr	r3, [r3, #3376]
 	cmp	r3, #0
-	beq	.L508
+	beq	.L501
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L604:
+.L597:
 	.align	2
-.L603:
+.L596:
 	.word	.LANCHOR0
 	.word	33553920
-	.word	.LANCHOR0+356
+	.word	.LANCHOR0+352
 	.word	.LANCHOR1+173
 	.word	.LC91
 	.fnend
@@ -4144,35 +4079,35 @@ FtlBbt2Bitmap:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L612
+	ldr	r3, .L605
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r4, r0
-	ldr	r7, .L612+4
+	ldr	r7, .L605+4
 	sub	r5, r4, #2
 	add	r4, r4, #1020
 	mov	r6, r1
 	ldrh	r2, [r3]
 	add	r4, r4, #2
-	ldr	r8, .L612+8
+	ldr	r8, .L605+8
 	mov	r1, #0
-	ldr	r9, .L612+12
+	ldr	r9, .L605+12
 	mov	r0, r6
 	lsl	r2, r2, #2
 	bl	ftl_memset
-.L608:
+.L601:
 	ldrh	r3, [r5, #2]
 	movw	r2, #65535
 	cmp	r3, r2
 	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
 	ldrh	r2, [r7]
 	cmp	r2, r3
-	bhi	.L607
+	bhi	.L600
 	mov	r2, #74
 	mov	r1, r8
 	mov	r0, r9
 	bl	sftl_printk
-.L607:
+.L600:
 	ldrh	r3, [r5, #2]!
 	mov	r0, #1
 	cmp	r4, r5
@@ -4181,13 +4116,13 @@ FtlBbt2Bitmap:
 	ldr	r2, [r6, r1, lsl #2]
 	orr	r3, r2, r0, lsl r3
 	str	r3, [r6, r1, lsl #2]
-	bne	.L608
+	bne	.L601
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L613:
+.L606:
 	.align	2
-.L612:
+.L605:
 	.word	.LANCHOR0+3392
-	.word	.LANCHOR0+302
+	.word	.LANCHOR0+298
 	.word	.LANCHOR1+184
 	.word	.LC8
 	.fnend
@@ -4203,19 +4138,19 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L615
+	ldr	r0, .L608
 	mvn	r2, #0
 	mov	r1, #255
-	add	r3, r0, #356
-	add	r0, r0, #368
+	add	r3, r0, #352
+	add	r0, r0, #364
 	strh	r2, [r3]	@ movhi
 	mov	r2, #0
 	strh	r2, [r3, #6]	@ movhi
 	mov	r2, #16
 	b	ftl_memset
-.L616:
+.L609:
 	.align	2
-.L615:
+.L608:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
@@ -4229,24 +4164,24 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L619
+	ldr	ip, .L612
 	mov	r2, #2048
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r4, #0
 	mov	r1, r4
-	add	r3, ip, #416
+	add	r3, ip, #412
 	strh	r0, [r3]	@ movhi
-	add	r0, ip, #424
+	add	r0, ip, #420
 	strh	r4, [r3, #2]	@ movhi
 	strh	r4, [r3, #4]	@ movhi
 	strh	r4, [r3, #6]	@ movhi
 	bl	ftl_memset
 	mov	r0, r4
 	pop	{r4, pc}
-.L620:
+.L613:
 	.align	2
-.L619:
+.L612:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
@@ -4272,12 +4207,12 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r2, #0
-.L622:
+.L615:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L626
-	ldr	r3, .L642
+	bhi	.L619
+	ldr	r3, .L635
 	mov	r6, #0
 	mov	r8, r6
 	mov	r10, r6
@@ -4286,25 +4221,25 @@ ftl_free_no_use_map_blk:
 	lsl	r3, r3, #1
 	strh	r2, [r5, r3]	@ movhi
 	ldrh	r9, [r5]
-.L627:
+.L620:
 	ldrh	r3, [r4, #10]
 	uxth	r1, r6
 	cmp	r3, r1
-	bhi	.L631
+	bhi	.L624
 	mov	r0, r8
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L626:
+.L619:
 	uxth	r3, r2
 	mov	r1, #0
 	ldr	r0, [r6, r3, lsl #2]
 	ubfx	r0, r0, #10, #16
-.L623:
+.L616:
 	ldrh	ip, [r4, #10]
 	uxth	r3, r1
 	cmp	ip, r3
 	addls	r2, r2, #1
-	bls	.L622
-.L625:
+	bls	.L615
+.L618:
 	uxth	r3, r1
 	add	r1, r1, #1
 	lsl	r3, r3, #1
@@ -4317,44 +4252,44 @@ ftl_free_no_use_map_blk:
 	ldrhne	ip, [r5, r3]
 	addne	ip, ip, #1
 	strhne	ip, [r5, r3]	@ movhi
-	b	.L623
-.L631:
+	b	.L616
+.L624:
 	uxth	r3, r6
 	lsl	r3, r3, #1
 	ldrh	r2, [r5, r3]
 	cmp	r9, r2
-	bls	.L628
+	bls	.L621
 	ldrh	r0, [r7, r3]
 	add	fp, r7, r3
 	cmp	r0, #0
-	bne	.L629
-.L630:
+	bne	.L622
+.L623:
 	add	r6, r6, #1
-	b	.L627
-.L628:
+	b	.L620
+.L621:
 	cmp	r2, #0
-	bne	.L630
+	bne	.L623
 	ldrh	r0, [r7, r3]
 	add	fp, r7, r3
 	cmp	r0, #0
-	beq	.L630
-.L632:
+	beq	.L623
+.L625:
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	strh	r10, [fp]	@ movhi
 	ldrh	r3, [r4, #8]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L630
-.L629:
+	b	.L623
+.L622:
 	subs	r9, r2, #0
 	mov	r8, r1
-	beq	.L632
-	b	.L630
-.L643:
+	beq	.L625
+	b	.L623
+.L636:
 	.align	2
-.L642:
-	.word	.LANCHOR0+308
+.L635:
+	.word	.LANCHOR0+304
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
@@ -4370,44 +4305,44 @@ FtlL2PDataInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r1, #0
-	ldr	r4, .L648
+	ldr	r4, .L641
 	mvn	r5, #0
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	ldr	r0, [r4, #3364]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-	movw	r3, #314
-	movw	r2, #342
+	movw	r3, #310
+	movw	r2, #338
 	ldrh	r3, [r4, r3]
 	mov	r1, #255
 	ldrh	r2, [r4, r2]
 	ldr	r0, [r4, #3388]
 	mul	r2, r2, r3
 	bl	ftl_memset
-	ldr	r0, .L648+4
+	ldr	r0, .L641+4
 	mov	r2, #0
 	mov	r3, r4
 	mov	lr, #12
 	mov	r4, r2
 	sub	r6, r0, #28
-.L645:
+.L638:
 	ldrh	r7, [r0]
 	uxth	r1, r2
 	add	ip, r2, #1
 	cmp	r7, r1
-	bhi	.L646
-	ldr	r2, .L648+8
+	bhi	.L639
+	ldr	r2, .L641+8
 	mvn	r1, #0
 	movw	r0, #3396
 	strh	r1, [r3, r0]	@ movhi
 	strh	r1, [r2, #2]	@ movhi
-	ldr	r1, [r3, #332]
+	ldr	r1, [r3, #328]
 	strh	r1, [r2, #10]	@ movhi
-	ldr	r1, .L648+12
+	ldr	r1, .L641+12
 	strh	r1, [r2, #4]	@ movhi
 	ldrh	r1, [r2, #44]
 	strh	r1, [r2, #8]	@ movhi
-	sub	r1, r2, #3056
+	ldr	r1, .L641+16
 	ldrh	r1, [r1]
 	strh	r1, [r2, #6]	@ movhi
 	ldr	r2, [r3, #3360]
@@ -4419,14 +4354,14 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3380]
 	str	r2, [r3, #3420]
 	pop	{r4, r5, r6, r7, r8, pc}
-.L646:
+.L639:
 	uxth	r2, r2
-	ldr	r1, [r3, #2544]
+	ldr	r1, [r3, #2540]
 	mul	r7, lr, r2
 	add	r8, r1, r7
 	str	r4, [r8, #4]
 	strh	r5, [r1, r7]	@ movhi
-	ldr	r1, [r3, #2544]
+	ldr	r1, [r3, #2540]
 	add	r1, r1, r7
 	ldrh	r7, [r6]
 	mul	r2, r2, r7
@@ -4435,14 +4370,15 @@ FtlL2PDataInit:
 	add	r2, r7, r2
 	str	r2, [r1, #8]
 	mov	r2, ip
-	b	.L645
-.L649:
+	b	.L638
+.L642:
 	.align	2
-.L648:
+.L641:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+342
+	.word	.LANCHOR0+338
 	.word	.LANCHOR0+3396
 	.word	-3902
+	.word	.LANCHOR0+336
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
@@ -4458,27 +4394,27 @@ FtlVariablesInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mvn	r3, #0
-	ldr	r4, .L652
+	ldr	r4, .L645
 	movw	r2, #3442
 	mov	r5, #0
 	mov	r1, r5
 	strh	r3, [r4, r2]	@ movhi
 	str	r3, [r4, #3452]
-	add	r3, r4, #348
+	add	r3, r4, #344
 	strh	r5, [r3]	@ movhi
-	add	r3, r4, #324
+	add	r3, r4, #320
 	ldrh	r2, [r3]
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	str	r5, [r4, #3444]
 	str	r5, [r4, #3448]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, r5
-	ldr	r0, [r4, #2540]
+	ldr	r0, [r4, #2536]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, r5
 	ldr	r0, [r4, #3348]
 	lsl	r2, r2, #1
@@ -4486,7 +4422,7 @@ FtlVariablesInit:
 	add	r0, r4, #2464
 	mov	r1, r5
 	mov	r2, #48
-	add	r0, r0, #8
+	add	r0, r0, #4
 	bl	ftl_memset
 	add	r0, r4, #2640
 	mov	r2, #512
@@ -4497,9 +4433,9 @@ FtlVariablesInit:
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L653:
+.L646:
 	.align	2
-.L652:
+.L645:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -4516,37 +4452,38 @@ SupperBlkListInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r2, #6
-	ldr	r4, .L666
+	ldr	r4, .L659
 	mov	r5, #0
 	.pad #20
 	sub	sp, sp, #20
 	mov	r1, #0
-	ldr	r10, .L666+4
+	ldr	r10, .L659+4
 	mov	r9, r5
-	ldrh	r3, [r4, #246]
+	ldrh	r3, [r4, #242]
 	mov	r6, r5
-	ldr	r0, [r4, #2520]
-	add	fp, r4, #264
+	ldr	r0, [r4, #2516]
+	add	fp, r4, #260
 	mul	r2, r2, r3
 	bl	ftl_memset
-	movw	r3, #2532
-	str	r5, [r4, #2536]
+	add	r3, r4, #2528
+	str	r5, [r4, #2532]
+	str	r5, [r4, #2520]
 	str	r5, [r4, #2524]
-	str	r5, [r4, #2528]
-	strh	r5, [r4, r3]	@ movhi
-	strh	r5, [r4, #228]	@ movhi
-.L655:
-	ldrh	r3, [r4, #244]
+	strh	r5, [r3]	@ movhi
+	strh	r5, [r4, #224]	@ movhi
+	str	r3, [sp, #4]
+.L648:
+	ldrh	r3, [r4, #240]
 	uxth	r8, r5
 	cmp	r8, r3
-	bcs	.L662
+	bcs	.L655
 	ldrh	r3, [r10]
-	ldrh	r2, [r4, #236]
-	str	r3, [sp, #4]
+	ldrh	r2, [r4, #232]
+	str	r3, [sp]
 	mov	r3, #0
 	mov	r7, r3
-	b	.L663
-.L657:
+	b	.L656
+.L650:
 	mov	r1, r8
 	ldrb	r0, [fp, r3]	@ zero_extendqisi2
 	str	r2, [sp, #12]
@@ -4555,83 +4492,83 @@ SupperBlkListInit:
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	ldr	r3, [sp, #8]
-	ldreq	r1, [sp, #4]
+	ldreq	r1, [sp]
 	ldr	r2, [sp, #12]
 	add	r3, r3, #1
 	addeq	r7, r7, r1
 	uxtheq	r7, r7
-.L663:
+.L656:
 	uxth	r1, r3
 	cmp	r2, r1
-	bhi	.L657
+	bhi	.L650
 	cmp	r7, #0
 	uxth	r3, r5
-	beq	.L658
+	beq	.L651
 	mov	r1, r7
 	mov	r0, #32768
-	str	r3, [sp, #4]
+	str	r3, [sp]
 	bl	__aeabi_idiv
-	ldr	r3, [sp, #4]
+	ldr	r3, [sp]
 	uxth	r7, r0
-.L659:
-	ldr	r1, [r4, #2520]
+.L652:
+	ldr	r1, [r4, #2516]
 	mov	r2, #6
 	mla	r2, r2, r3, r1
 	strh	r7, [r2, #4]	@ movhi
-	ldrh	r2, [r4, #28]
+	ldrh	r2, [r4, #24]
 	cmp	r2, r8
-	beq	.L660
-	ldrh	r2, [r4, #80]
+	beq	.L653
+	ldrh	r2, [r4, #76]
 	cmp	r2, r8
-	beq	.L660
-	ldrh	r2, [r4, #128]
+	beq	.L653
+	ldrh	r2, [r4, #124]
 	cmp	r2, r8
-	beq	.L660
-	ldr	r2, [r4, #76]
+	beq	.L653
+	ldr	r2, [r4, #72]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L661
+	bne	.L654
 	add	r9, r9, #1
 	mov	r0, r8
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-.L660:
+.L653:
 	add	r5, r5, #1
-	b	.L655
-.L658:
-	ldr	r1, [r4, #76]
+	b	.L648
+.L651:
+	ldr	r1, [r4, #72]
 	lsl	r2, r3, #1
 	mvn	r0, #0
 	strh	r0, [r1, r2]	@ movhi
-	b	.L659
-.L661:
+	b	.L652
+.L654:
 	add	r6, r6, #1
 	mov	r0, r8
 	uxth	r6, r6
 	bl	INSERT_DATA_LIST
-	b	.L660
-.L662:
-	movw	r2, #2532
-	strh	r9, [r4, #228]	@ movhi
-	strh	r6, [r4, r2]	@ movhi
+	b	.L653
+.L655:
+	ldr	r2, [sp, #4]
+	strh	r9, [r4, #224]	@ movhi
+	strh	r6, [r2]	@ movhi
 	add	r6, r6, r9
 	cmp	r6, r3
-	ble	.L664
-	movw	r2, #2210
-	ldr	r1, .L666+8
-	ldr	r0, .L666+12
+	ble	.L657
+	movw	r2, #2212
+	ldr	r1, .L659+8
+	ldr	r0, .L659+12
 	bl	sftl_printk
-.L664:
+.L657:
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L667:
+.L660:
 	.align	2
-.L666:
+.L659:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+306
+	.word	.LANCHOR0+302
 	.word	.LANCHOR1+198
 	.word	.LC8
 	.fnend
@@ -4649,8 +4586,8 @@ FtlGcPageVarInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r3, #0
-	ldr	r4, .L670
-	movw	r5, #310
+	ldr	r4, .L663
+	movw	r5, #306
 	mov	r1, #255
 	add	r2, r4, #3200
 	ldr	r0, [r4, #3196]
@@ -4668,9 +4605,9 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	pop	{r4, r5, r6, lr}
 	b	FtlGcBufInit
-.L671:
+.L664:
 	.align	2
-.L670:
+.L663:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
@@ -4687,7 +4624,7 @@ FlashGetBadBlockList:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r2, #256
-	ldr	r5, .L680
+	ldr	r5, .L673
 	mov	r4, r0
 	mov	r6, r1
 	mov	r1, #255
@@ -4698,30 +4635,30 @@ FlashGetBadBlockList:
 	blx	r3
 	uxth	r0, r0
 	cmp	r0, #50
-	bls	.L673
+	bls	.L666
 	mov	r2, #256
 	mov	r1, #255
 	mov	r0, r4
 	bl	ftl_memset
 	mov	r0, #0
-.L673:
+.L666:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
 	moveq	r3, r4
 	addeq	r1, r3, r0, lsl #1
-	beq	.L675
+	beq	.L668
 	pop	{r4, r5, r6, pc}
-.L676:
+.L669:
 	ldrh	r2, [r3]
 	lsr	r2, r2, #1
 	strh	r2, [r3], #2	@ movhi
-.L675:
+.L668:
 	cmp	r3, r1
-	bne	.L676
+	bne	.L669
 	pop	{r4, r5, r6, pc}
-.L681:
+.L674:
 	.align	2
-.L680:
+.L673:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
@@ -4749,44 +4686,44 @@ FlashReadPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L724
+	ldr	r3, .L717
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r5, .L724+4
+	ldr	r5, .L717+4
 	mov	r8, r1
 	mov	r4, r0
 	mov	r7, #0
 	ldr	r2, [r3]
 	mov	fp, r3
-	ldr	r9, .L724+8
-	ldr	r10, .L724+12
+	ldr	r9, .L717+8
+	ldr	r10, .L717+12
 	str	r2, [sp, #20]
 	ldrh	r2, [r5, #12]
 	str	r2, [sp, #4]
-.L684:
+.L677:
 	cmp	r7, r8
-	bne	.L697
+	bne	.L690
 	ldr	r2, [sp, #20]
 	mov	r0, #0
 	ldr	r3, [fp]
 	cmp	r2, r3
-	beq	.L698
+	beq	.L691
 	bl	__stack_chk_fail
-.L697:
+.L690:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L685
+	beq	.L678
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	bne	.L686
-.L685:
+	bne	.L679
+.L678:
 	mov	r2, #96
-	ldr	r1, .L724+16
+	ldr	r1, .L717+16
 	mov	r0, r9
 	bl	sftl_printk
-.L686:
+.L679:
 	add	r2, sp, #12
 	add	r1, sp, #16
 	mov	r0, r4
@@ -4795,7 +4732,7 @@ FlashReadPages:
 	cmp	r0, #3
 	mvnhi	r3, #0
 	strhi	r3, [r4]
-	bhi	.L688
+	bhi	.L681
 	ldr	r6, [r4, #8]
 	uxtb	r0, r0
 	ldr	r3, [r4, #12]
@@ -4808,7 +4745,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L691
+	bne	.L684
 	ldr	r0, [sp, #4]
 	add	r2, r6, #2048
 	ldr	r3, [r4, #12]
@@ -4820,21 +4757,21 @@ FlashReadPages:
 	blx	ip
 	cmn	r0, #1
 	mov	r1, r0
-	beq	.L692
+	beq	.L685
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	cmn	r2, #1
-	bne	.L693
+	bne	.L686
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L693
+	bne	.L686
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L693
-.L692:
+	beq	.L686
+.L685:
 	mvn	r3, #0
 	str	r3, [r4]
-.L693:
+.L686:
 	ldr	r3, [r4]
 	sub	r0, r1, #256
 	clz	r0, r0
@@ -4847,52 +4784,52 @@ FlashReadPages:
 	ldr	r3, [r4]
 	cmn	r3, #1
 	cmpne	r3, #256
-	bne	.L691
+	bne	.L684
 	ldr	r1, [r4, #4]
 	ldr	r2, [sp, #16]
-	ldr	r0, .L724+20
+	ldr	r0, .L717+20
 	bl	sftl_printk
 	ldr	r1, [r4, #8]
 	cmp	r1, #0
-	beq	.L696
+	beq	.L689
 	mov	r3, #4
-	ldr	r0, .L724+24
+	ldr	r0, .L717+24
 	mov	r2, r3
 	bl	rknand_print_hex
-.L696:
+.L689:
 	ldr	r1, [r4, #12]
 	cmp	r1, #0
-	beq	.L691
+	beq	.L684
 	mov	r3, #4
-	ldr	r0, .L724+28
+	ldr	r0, .L717+28
 	mov	r2, r3
 	bl	rknand_print_hex
-.L691:
+.L684:
 	ldr	r3, [r5, #3324]
 	cmp	r6, r3
-	bne	.L688
+	bne	.L681
 	ldr	r0, [r4, #8]
 	cmp	r6, r0
-	beq	.L688
+	beq	.L681
 	ldrh	r2, [r10]
 	mov	r1, r6
 	lsl	r2, r2, #9
 	bl	ftl_memcpy
-.L688:
+.L681:
 	add	r7, r7, #1
 	add	r4, r4, #20
-	b	.L684
-.L698:
+	b	.L677
+.L691:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L725:
+.L718:
 	.align	2
-.L724:
+.L717:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC8
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+258
 	.word	.LANCHOR1+216
 	.word	.LC92
 	.word	.LC93
@@ -4907,70 +4844,63 @@ FlashReadPages:
 	.type	FtlLoadFactoryBbt, %function
 FtlLoadFactoryBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, #0
-	ldr	r5, .L737
-	add	r6, r5, #364
-	ldr	r3, [r5, #3304]
+	ldr	r4, .L730
+	add	r6, r4, #360
+	ldr	r3, [r4, #3304]
+	ldr	r8, [r4, #3336]
 	add	r6, r6, #2
-	ldr	r8, [r5, #3336]
-	sub	r10, r6, #108
 	sub	r9, r6, #64
-	str	r3, [r5, #3464]
-	str	r8, [r5, #3468]
-.L727:
-	ldrh	r3, [r10]
+	add	r10, r4, #3456
+	str	r3, [r4, #3464]
+	str	r8, [r4, #3468]
+.L720:
+	ldrh	r3, [r4, #254]
 	cmp	r7, r3
-	bcc	.L732
+	bcc	.L725
 	mov	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L732:
-	ldrh	r4, [r9]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L725:
+	ldrh	r5, [r9]
 	mvn	r3, #0
-	ldr	fp, .L737+4
+	movw	fp, #61664
 	strh	r3, [r6, #2]!	@ movhi
-	add	r4, r4, r3
-	movw	r3, #61664
-	uxth	r4, r4
-.L728:
-	ldrh	r2, [r9]
-	sub	r1, r2, #16
-	cmp	r4, r1
-	ble	.L730
-	mla	r2, r7, r2, r4
-	str	r3, [sp, #4]
-	mov	r0, fp
-	lsl	r2, r2, #10
-	str	r2, [r5, #3460]
+	add	r5, r5, r3
+	uxth	r5, r5
+.L721:
+	ldrh	r3, [r9]
+	sub	r2, r3, #16
+	cmp	r5, r2
+	ble	.L723
+	mla	r3, r7, r3, r5
 	mov	r2, #1
 	mov	r1, r2
+	mov	r0, r10
+	lsl	r3, r3, #10
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r2, [r5, #3456]
-	ldr	r3, [sp, #4]
-	cmn	r2, #1
-	beq	.L729
-	ldrh	r2, [r8]
-	cmp	r2, r3
-	bne	.L729
-	strh	r4, [r6]	@ movhi
-.L730:
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	beq	.L722
+	ldrh	r3, [r8]
+	cmp	r3, fp
+	bne	.L722
+	strh	r5, [r6]	@ movhi
+.L723:
 	add	r7, r7, #1
-	b	.L727
-.L729:
-	sub	r4, r4, #1
-	uxth	r4, r4
-	b	.L728
-.L738:
+	b	.L720
+.L722:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L721
+.L731:
 	.align	2
-.L737:
+.L730:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3456
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
@@ -4987,16 +4917,16 @@ FtlGetLastWrittenPage:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r6, .L752
+	ldr	r6, .L745
 	cmp	r1, #1
-	movwne	r2, #306
+	movwne	r2, #302
 	lsl	r8, r0, #10
 	mov	r7, r1
 	ldr	r3, [r6]
 	mov	r0, sp
 	str	r3, [sp, #84]
-	ldr	r3, .L752+4
-	addeq	r2, r3, #308
+	ldr	r3, .L745+4
+	addeq	r2, r3, #304
 	ldrhne	r5, [r3, r2]
 	ldrheq	r5, [r2]
 	mov	r2, r1
@@ -5013,15 +4943,15 @@ FtlGetLastWrittenPage:
 	ldr	r3, [sp, #20]
 	cmn	r3, #1
 	moveq	r9, #0
-	beq	.L743
-.L742:
+	beq	.L736
+.L735:
 	ldr	r2, [sp, #84]
 	mov	r0, r5
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L747
+	beq	.L740
 	bl	__stack_chk_fail
-.L746:
+.L739:
 	add	r3, r9, r5
 	mov	r2, r7
 	add	r3, r3, r3, lsr #31
@@ -5034,29 +4964,29 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #20]
 	cmn	r3, #1
-	bne	.L744
+	bne	.L737
 	ldr	r3, [sp, #24]
 	cmn	r3, #1
-	bne	.L744
+	bne	.L737
 	ldr	r3, [sp]
 	cmn	r3, #1
 	subne	r4, r4, #1
 	sxthne	r5, r4
-	bne	.L743
-.L744:
+	bne	.L736
+.L737:
 	add	r4, r4, #1
 	sxth	r9, r4
-.L743:
+.L736:
 	cmp	r9, r5
-	ble	.L746
-	b	.L742
-.L747:
+	ble	.L739
+	b	.L735
+.L740:
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L753:
+.L746:
 	.align	2
-.L752:
+.L745:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -5074,20 +5004,20 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, #0
-	ldr	r4, .L836
+	ldr	r4, .L829
 	mov	r1, r5
 	.pad #36
 	sub	sp, sp, #36
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	add	r7, r4, #3440
-	add	r6, r4, #348
+	add	r6, r4, #344
 	ldr	r0, [r4, #3384]
 	strh	r5, [r7]	@ movhi
-	add	r8, r4, #324
+	add	r8, r4, #320
 	strh	r5, [r6]	@ movhi
 	lsl	r2, r2, #2
 	bl	ftl_memset
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	mov	r1, r5
 	ldr	r0, [r4, #3360]
 	lsl	r2, r2, #1
@@ -5099,7 +5029,7 @@ FtlScanSysBlk:
 	bl	ftl_memset
 	ldrh	r2, [r8]
 	mov	r1, r5
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	sub	r5, r7, #812
 	lsl	r2, r2, #1
 	bl	ftl_memset
@@ -5107,17 +5037,17 @@ FtlScanSysBlk:
 	mov	r1, #255
 	sub	r0, r7, #812
 	bl	ftl_memset
-	ldrh	r3, [r4, #244]
+	ldrh	r3, [r4, #240]
 	str	r6, [sp, #16]
 	stmib	sp, {r3, r7}
-.L755:
-	ldrh	r3, [r4, #246]
+.L748:
+	ldrh	r3, [r4, #242]
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bls	.L796
-	ldr	r7, .L836+4
+	bls	.L789
+	ldr	r7, .L829+4
 	mov	r6, #0
-	ldrh	r2, [r4, #236]
+	ldrh	r2, [r4, #232]
 	mov	r10, r6
 	ldr	r8, [r4, #3292]
 	mov	r9, #20
@@ -5125,8 +5055,8 @@ FtlScanSysBlk:
 	ldr	r3, [r4, #3180]
 	ldr	fp, [r4, #3184]
 	str	r1, [sp, #12]
-	b	.L797
-.L757:
+	b	.L790
+.L750:
 	ldr	r1, [sp, #4]
 	ldrb	r0, [r7, r6]	@ zero_extendqisi2
 	str	r3, [sp, #28]
@@ -5137,7 +5067,7 @@ FtlScanSysBlk:
 	cmp	r0, #0
 	ldr	r2, [sp, #24]
 	ldr	r3, [sp, #28]
-	bne	.L756
+	bne	.L749
 	ldr	r1, [sp, #20]
 	mla	r0, r9, r10, r8
 	lsl	r1, r1, #10
@@ -5152,30 +5082,30 @@ FtlScanSysBlk:
 	str	r1, [r0, #12]
 	add	r1, r10, #1
 	uxth	r10, r1
-.L756:
+.L749:
 	add	r6, r6, #1
-.L797:
+.L790:
 	uxth	r1, r6
 	cmp	r2, r1
-	bhi	.L757
+	bhi	.L750
 	cmp	r10, #0
-	bne	.L758
-.L795:
+	bne	.L751
+.L788:
 	ldr	r3, [sp, #4]
 	add	r3, r3, #1
 	uxth	r3, r3
 	str	r3, [sp, #4]
-	b	.L755
-.L758:
+	b	.L748
+.L751:
 	mov	fp, #0
 	mov	r2, #1
 	mov	r1, r10
 	mov	r0, r8
 	bl	FlashReadPages
-.L759:
+.L752:
 	uxth	r3, fp
 	cmp	r10, r3
-	bls	.L795
+	bls	.L788
 	mov	r8, #20
 	ldr	r3, [r4, #3292]
 	mul	r8, r8, fp
@@ -5185,9 +5115,9 @@ FtlScanSysBlk:
 	ldr	r7, [r2, #12]
 	cmn	r3, #1
 	ubfx	r6, r6, #10, #16
-	bne	.L762
+	bne	.L755
 	mov	r9, #16
-.L764:
+.L757:
 	ldr	r0, [r4, #3292]
 	mov	r2, #1
 	mov	r1, r2
@@ -5200,72 +5130,72 @@ FtlScanSysBlk:
 	movw	r2, #65535
 	cmp	r3, r2
 	ldr	r3, [r4, #3292]
-	bne	.L761
+	bne	.L754
 	mvn	r2, #0
 	str	r2, [r3, r8]
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r8]
 	cmp	r3, r2
-	bne	.L762
-.L763:
+	bne	.L755
+.L756:
 	mov	r1, #1
-	b	.L835
-.L761:
+	b	.L828
+.L754:
 	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	bne	.L762
+	bne	.L755
 	sub	r9, r9, #1
 	uxth	r9, r9
 	cmp	r9, #0
-	bne	.L764
-	b	.L763
-.L762:
+	bne	.L757
+	b	.L756
+.L755:
 	ldr	r2, [r4, #2592]
 	ldr	r3, [r7, #4]
 	cmn	r2, #1
-	beq	.L765
+	beq	.L758
 	cmp	r2, r3
-	bhi	.L766
-.L765:
+	bhi	.L759
+.L758:
 	cmn	r3, #1
 	addne	r2, r3, #1
 	strne	r2, [r4, #2592]
-.L766:
+.L759:
 	ldrh	r2, [r7]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L768
-	bhi	.L769
+	beq	.L761
+	bhi	.L762
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L770
-.L767:
+	beq	.L763
+.L760:
 	add	fp, fp, #1
-	b	.L759
-.L769:
+	b	.L752
+.L762:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L771
+	beq	.L764
 	movw	r3, #65535
 	cmp	r2, r3
 	moveq	r1, #0
-	bne	.L767
-.L835:
+	bne	.L760
+.L828:
 	mov	r0, r6
 	bl	FtlFreeSysBlkQueueIn
-	b	.L767
-.L771:
+	b	.L760
+.L764:
 	ldr	r3, [sp, #8]
 	ldrh	r2, [r3]
-	ldr	r3, [r4, #332]
+	ldr	r3, [r4, #328]
 	cmp	r2, r3
-	bls	.L773
+	bls	.L766
 	movw	r2, #1225
-	ldr	r1, .L836+8
-	ldr	r0, .L836+12
+	ldr	r1, .L829+8
+	ldr	r0, .L829+12
 	bl	sftl_printk
-.L773:
-	ldr	r0, [r4, #332]
+.L766:
+	ldr	r0, [r4, #328]
 	ldr	r2, [sp, #8]
 	ldr	ip, [r4, #3384]
 	ldrh	r2, [r2]
@@ -5275,33 +5205,33 @@ FtlScanSysBlk:
 	sxth	r3, r3
 	sub	r1, r1, #1
 	sxth	r1, r1
-.L774:
+.L767:
 	cmp	r3, r1
-	bgt	.L780
+	bgt	.L773
 	cmp	r3, #0
-	bge	.L812
-	b	.L767
-.L780:
+	bge	.L805
+	b	.L760
+.L773:
 	ldr	r9, [r7, #4]
 	lsl	lr, r3, #2
 	ldr	r8, [ip, r3, lsl #2]
 	cmp	r9, r8
-	bls	.L775
+	bls	.L768
 	ldr	r1, [ip]
 	cmp	r1, #0
-	bne	.L776
+	bne	.L769
 	cmp	r0, r2
-	ldrne	r1, .L836+16
+	ldrne	r1, .L829+16
 	addne	r2, r2, #1
 	strhne	r2, [r1]	@ movhi
-.L776:
+.L769:
 	uxth	ip, r3
 	mov	r1, #0
-.L777:
+.L770:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L778
+	bhi	.L771
 	ldr	r1, [r7, #4]
 	cmp	r3, #0
 	ldr	r2, [r4, #3384]
@@ -5309,16 +5239,16 @@ FtlScanSysBlk:
 	lsl	r2, r3, #1
 	ldr	r1, [r4, #3360]
 	strh	r6, [r1, r2]	@ movhi
-	blt	.L767
-	ldr	r2, .L836+16
-	ldr	r1, [r4, #332]
+	blt	.L760
+	ldr	r2, .L829+16
+	ldr	r1, [r4, #328]
 	ldrh	r2, [r2]
 	sub	r1, r1, r2
 	sub	r1, r1, #1
 	sxth	r1, r1
 	cmp	r3, r1
-	bgt	.L767
-.L812:
+	bgt	.L760
+.L805:
 	ldr	r1, [sp, #8]
 	add	r2, r2, #1
 	strh	r2, [r1]	@ movhi
@@ -5327,10 +5257,10 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
 	ldr	r2, [r4, #3360]
-.L833:
+.L826:
 	strh	r6, [r2, r3]	@ movhi
-	b	.L767
-.L778:
+	b	.L760
+.L771:
 	ldr	r0, [r4, #3384]
 	add	r1, r1, #1
 	add	r8, r0, r2, lsl #2
@@ -5341,24 +5271,24 @@ FtlScanSysBlk:
 	add	r8, r0, r2
 	ldrh	r8, [r8, #2]
 	strh	r8, [r0, r2]	@ movhi
-	b	.L777
-.L775:
+	b	.L770
+.L768:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L774
-.L770:
+	b	.L767
+.L763:
 	ldr	r3, [sp, #16]
-	ldr	r8, .L836+20
+	ldr	r8, .L829+20
 	ldrh	r2, [r3]
 	ldrh	r3, [r8]
 	cmp	r2, r3
-	bls	.L783
+	bls	.L776
 	movw	r2, #1266
-	ldr	r1, .L836+8
-	ldr	r0, .L836+12
+	ldr	r1, .L829+8
+	ldr	r0, .L829+12
 	bl	sftl_printk
-.L783:
-	ldr	lr, .L836+24
+.L776:
+	ldr	lr, .L829+24
 	ldrh	r2, [r8]
 	ldr	ip, [r4, #3372]
 	ldrh	r1, [lr]
@@ -5366,15 +5296,15 @@ FtlScanSysBlk:
 	sxth	r3, r0
 	sub	r0, r0, r1
 	str	r0, [sp, #12]
-.L784:
+.L777:
 	ldr	r0, [sp, #12]
 	cmp	r3, r0
-	ble	.L789
+	ble	.L782
 	ldr	r9, [ip, r3, lsl #2]
 	lsl	r8, r3, #2
 	ldr	r0, [r7, #4]
 	cmp	r0, r9
-	bls	.L785
+	bls	.L778
 	sub	r2, r2, r1
 	ldr	r0, [ip]
 	clz	r2, r2
@@ -5386,122 +5316,122 @@ FtlScanSysBlk:
 	addeq	r1, r1, #1
 	strheq	r1, [lr]	@ movhi
 	mov	r1, #0
-.L787:
+.L780:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L788
+	bhi	.L781
 	ldr	r1, [r7, #4]
 	ldr	r2, [r4, #3372]
 	str	r1, [r2, r8]
 	lsl	r2, r3, #1
-	ldr	r1, [r4, #352]
+	ldr	r1, [r4, #348]
 	strh	r6, [r1, r2]	@ movhi
-.L789:
+.L782:
 	cmp	r3, #0
-	blt	.L767
-	ldr	r0, .L836+24
+	blt	.L760
+	ldr	r0, .L829+24
 	ldrh	r2, [r0, #-24]
 	ldrh	r1, [r0]
 	sub	r2, r2, #1
 	sub	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L767
+	bgt	.L760
 	add	r1, r1, #1
 	ldr	r2, [r4, #3372]
 	strh	r1, [r0]	@ movhi
 	ldr	r1, [r7, #4]
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
-	ldr	r2, [r4, #352]
-	b	.L833
-.L788:
+	ldr	r2, [r4, #348]
+	b	.L826
+.L781:
 	ldr	r0, [r4, #3372]
 	add	r1, r1, #1
 	add	lr, r0, r2, lsl #2
 	ldr	lr, [lr, #4]
 	str	lr, [r0, r2, lsl #2]
 	lsl	r2, r2, #1
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	add	lr, r0, r2
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r2]	@ movhi
-	b	.L787
-.L785:
+	b	.L780
+.L778:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L784
-.L768:
+	b	.L777
+.L761:
 	ldrh	r1, [r5]
 	movw	r2, #65535
 	cmp	r1, r2
 	strheq	r6, [r5]	@ movhi
-	beq	.L834
+	beq	.L827
 	ldrh	r0, [r5, #4]
 	cmp	r0, r2
-	beq	.L792
+	beq	.L785
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L792:
+.L785:
 	ldr	r3, [r7, #4]
 	ldr	r2, [r4, #2636]
 	cmp	r2, r3
 	strhcs	r6, [r5, #4]	@ movhi
-	bcs	.L767
+	bcs	.L760
 	ldrh	r3, [r5]
 	strh	r6, [r5]	@ movhi
 	strh	r3, [r5, #4]	@ movhi
 	ldr	r3, [r7, #4]
-.L834:
+.L827:
 	str	r3, [r4, #2636]
-	b	.L767
-.L796:
+	b	.L760
+.L789:
 	ldr	r1, [r4, #3360]
 	ldrh	r3, [r1]
 	cmp	r3, #0
-	beq	.L798
-.L801:
-	ldr	r0, [r4, #352]
+	beq	.L791
+.L794:
+	ldr	r0, [r4, #348]
 	ldrh	r2, [r0]
 	cmp	r2, #0
-	beq	.L799
-.L800:
+	beq	.L792
+.L793:
 	ldr	r3, [sp, #8]
 	ldrh	r2, [r3]
-	ldr	r3, [r4, #332]
+	ldr	r3, [r4, #328]
 	cmp	r2, r3
-	bls	.L831
+	bls	.L824
 	movw	r2, #1391
-	ldr	r1, .L836+8
-	ldr	r0, .L836+12
+	ldr	r1, .L829+8
+	ldr	r0, .L829+12
 	bl	sftl_printk
-.L831:
+.L824:
 	mov	r0, #0
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L798:
-	ldr	r2, .L836+16
+.L791:
+	ldr	r2, .L829+16
 	ldrh	r2, [r2]
 	cmp	r2, #0
-	ldrne	r0, [r4, #332]
-	beq	.L801
-.L802:
+	ldrne	r0, [r4, #328]
+	beq	.L794
+.L795:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L801
+	bcs	.L794
 	lsl	ip, r2, #1
 	add	r3, r3, #1
 	ldrh	ip, [r1, ip]
 	cmp	ip, #0
-	beq	.L802
+	beq	.L795
 	mov	r3, r2
 	mov	lr, #0
-.L803:
-	ldr	r1, [r4, #332]
+.L796:
+	ldr	r1, [r4, #328]
 	cmp	r3, r1
-	bcs	.L801
+	bcs	.L794
 	ldr	r0, [r4, #3360]
 	lsl	r1, r3, #1
 	sub	ip, r3, r2
@@ -5515,30 +5445,30 @@ FtlScanSysBlk:
 	str	r5, [r0, ip, lsl #2]
 	ldr	r0, [r4, #3360]
 	strh	lr, [r0, r1]	@ movhi
-	b	.L803
-.L799:
-	ldr	r3, .L836+24
+	b	.L796
+.L792:
+	ldr	r3, .L829+24
 	ldrh	r1, [r3]
 	cmp	r1, #0
 	ldrhne	ip, [r3, #-24]!
 	movne	r1, r3
-	beq	.L800
-.L808:
+	beq	.L793
+.L801:
 	sxth	r3, r2
 	cmp	r3, ip
 	mov	lr, r3
-	bge	.L800
+	bge	.L793
 	lsl	r5, r3, #1
 	add	r2, r2, #1
 	ldrh	r5, [r0, r5]
 	cmp	r5, #0
-	beq	.L808
+	beq	.L801
 	mov	r5, #0
-.L809:
+.L802:
 	ldrh	r2, [r1]
 	cmp	r3, r2
-	bge	.L800
-	ldr	r0, [r4, #352]
+	bge	.L793
+	ldr	r0, [r4, #348]
 	lsl	r2, r3, #1
 	sub	ip, r3, lr
 	lsl	r6, ip, #1
@@ -5549,19 +5479,19 @@ FtlScanSysBlk:
 	add	r3, r3, #1
 	sxth	r3, r3
 	str	r6, [r0, ip, lsl #2]
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	strh	r5, [r0, r2]	@ movhi
-	b	.L809
-.L837:
+	b	.L802
+.L830:
 	.align	2
-.L836:
+.L829:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+316
+	.word	.LANCHOR0+312
 	.word	.LANCHOR1+231
 	.word	.LC8
 	.word	.LANCHOR0+3440
-	.word	.LANCHOR0+324
-	.word	.LANCHOR0+348
+	.word	.LANCHOR0+320
+	.word	.LANCHOR0+344
 	.fnend
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
@@ -5576,23 +5506,23 @@ FtlLoadBbt:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	ldr	r4, .L871
-	ldr	r8, .L871+4
+	ldr	r4, .L864
+	ldr	r8, .L864+4
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #3456
 	ldr	r6, [r4, #3336]
 	str	r3, [r4, #3464]
 	str	r6, [r4, #3468]
 	bl	FtlBbtMemInit
-	movw	r3, #302
+	movw	r3, #298
 	ldrh	r5, [r4, r3]
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L839:
+.L832:
 	ldrh	r3, [r8]
 	sub	r3, r3, #16
 	cmp	r5, r3
-	ble	.L842
+	ble	.L835
 	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
@@ -5601,7 +5531,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	bne	.L840
+	bne	.L833
 	ldr	r3, [r4, #3460]
 	mov	r2, #1
 	mov	r1, r2
@@ -5609,52 +5539,52 @@ FtlLoadBbt:
 	add	r3, r3, #1
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
-.L840:
+.L833:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L841
+	beq	.L834
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L841
+	bne	.L834
 	ldr	r2, [r6, #4]
-	ldr	r3, .L871+8
-	str	r2, [r4, #364]
+	ldr	r3, .L864+8
+	str	r2, [r4, #360]
 	ldrh	r2, [r6, #8]
 	strh	r5, [r3]	@ movhi
 	strh	r2, [r3, #4]	@ movhi
-.L842:
-	ldr	r5, .L871+8
+.L835:
+	ldr	r5, .L864+8
 	movw	r2, #65535
 	ldrh	r3, [r5]
 	cmp	r3, r2
-	beq	.L856
+	beq	.L849
 	ldrh	r3, [r5, #4]
 	cmp	r3, r2
-	beq	.L846
+	beq	.L839
 	lsl	r3, r3, #10
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L871+12
+	add	r0, r5, #3104
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L846
+	beq	.L839
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L846
+	bne	.L839
 	ldr	r3, [r6, #4]
-	ldr	r2, [r4, #364]
+	ldr	r2, [r4, #360]
 	cmp	r3, r2
 	ldrhhi	r2, [r5, #4]
-	strhi	r3, [r4, #364]
+	strhi	r3, [r4, #360]
 	ldrhhi	r3, [r6, #8]
 	strhhi	r2, [r5]	@ movhi
 	strhhi	r3, [r5, #4]	@ movhi
-.L846:
-	ldr	r8, .L871+12
+.L839:
+	ldr	r8, .L864+12
 	mov	r1, #1
 	ldrh	r0, [r5]
 	movw	r9, #61649
@@ -5662,45 +5592,44 @@ FtlLoadBbt:
 	sxth	r7, r0
 	add	r0, r0, #1
 	strh	r0, [r5, #2]	@ movhi
-.L848:
+.L841:
 	cmp	r7, #0
-	bge	.L851
+	bge	.L844
 	mov	r2, #251
-	ldr	r1, .L871+16
-	ldr	r0, .L871+20
+	ldr	r1, .L864+16
+	ldr	r0, .L864+20
 	bl	sftl_printk
-.L850:
+.L843:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r5, #6]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L853
-	ldr	r2, [r4, #232]
+	beq	.L846
+	ldr	r2, [r4, #228]
 	cmp	r0, r2
-	beq	.L853
-	ldrh	r3, [r4, #246]
+	beq	.L846
+	ldrh	r3, [r4, #242]
 	lsr	r3, r3, #2
 	cmp	r0, r3
 	cmpcc	r2, r3
-	bcs	.L853
+	bcs	.L846
 	bl	FtlSysBlkNumInit
-.L853:
-	ldr	r6, .L871+24
+.L846:
+	ldr	r6, .L864+24
 	mov	r5, #0
-	ldr	r8, .L871+28
-	sub	r7, r6, #122
-.L854:
-	ldrh	r3, [r7]
+	ldr	r7, .L864+28
+.L847:
+	ldrh	r3, [r4, #254]
 	cmp	r5, r3
-	bcc	.L855
+	bcc	.L848
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L841:
+.L834:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L839
-.L851:
+	b	.L832
+.L844:
 	ldrh	r3, [r5]
 	mov	r2, #1
 	mov	r1, r2
@@ -5712,36 +5641,36 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L849
+	beq	.L842
 	ldrh	r3, [r6]
 	cmp	r3, r9
-	beq	.L850
-.L849:
+	beq	.L843
+.L842:
 	sub	r7, r7, #1
 	sxth	r7, r7
-	b	.L848
-.L855:
-	ldrh	r2, [r8]
+	b	.L841
+.L848:
+	ldrh	r2, [r7]
 	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
 	lsl	r2, r2, #2
 	mla	r1, r5, r2, r1
 	add	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L854
-.L856:
+	b	.L847
+.L849:
 	mvn	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L872:
+.L865:
 	.align	2
-.L871:
+.L864:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+302
-	.word	.LANCHOR0+356
+	.word	.LANCHOR0+298
+	.word	.LANCHOR0+352
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
 	.word	.LC8
-	.word	.LANCHOR0+380
+	.word	.LANCHOR0+376
 	.word	.LANCHOR0+3392
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
@@ -5753,76 +5682,134 @@ FtlLoadBbt:
 	.type	FlashProgPages, %function
 FlashProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 56
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #60
-	sub	sp, sp, #60
-	str	r3, [sp, #16]
-	mov	fp, r1
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r6, .L905
+	mov	r10, r1
 	mov	r4, r0
 	mov	r5, r0
-	ldr	r3, .L914
+	ldr	r3, .L905+4
 	mov	r8, #0
-	ldr	r6, .L914+4
-	str	r2, [sp, #12]
-	ldr	r2, [r3]
+	ldrh	fp, [r6, #12]
 	mov	r9, r6
-	mov	r10, r6
-	str	r3, [sp, #20]
-	str	r2, [sp, #52]
-	ldrh	r2, [r6, #12]
-	str	r2, [sp, #4]
-	lsl	r2, r2, #3
 	str	r2, [sp, #8]
-.L874:
-	cmp	r8, fp
-	bne	.L888
-	ldr	r3, [sp, #16]
-	cmp	r3, #0
-	beq	.L882
+	ldr	r2, [r3]
+	str	r3, [sp, #12]
+	str	r2, [sp, #44]
+	lsl	r2, fp, #3
+	str	r2, [sp, #4]
+.L867:
+	cmp	r8, r10
+	bne	.L881
+	ldr	r7, .L905+8
 	mov	r5, #0
-	ldr	r7, .L914+8
-	ldr	r10, .L914+12
-	ldr	r6, .L914+4
-	b	.L889
-.L888:
+	ldr	r9, .L905+12
+	ldr	r10, .L905+16
+.L882:
+	cmp	r8, r5
+	beq	.L875
+	ldr	r2, [r6, #3324]
+	mov	r3, #0
+	mov	r1, #1
+	add	r0, sp, #24
+	str	r3, [r2]
+	ldr	r2, [r6, #3332]
+	str	r3, [r2]
+	ldr	r3, [r4, #4]
+	ldr	r2, [sp, #8]
+	str	r3, [sp, #28]
+	ldr	r3, [r6, #3324]
+	str	r3, [sp, #32]
+	ldr	r3, [r6, #3332]
+	str	r3, [sp, #36]
+	bl	FlashReadPages
+	ldr	fp, [sp, #24]
+	cmn	fp, #1
+	bne	.L883
+	ldr	r1, [r4, #4]
+	mov	r0, r7
+	bl	sftl_printk
+	str	fp, [r4]
+.L883:
+	ldr	fp, [sp, #24]
+	cmp	fp, #256
+	bne	.L884
+	ldr	r1, [r4, #4]
+	mov	r0, r9
+	bl	sftl_printk
+	str	fp, [r4]
+.L884:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L885
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3332]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L885
+	ldr	r1, [r4, #4]
+	mov	r0, r10
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L885:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L886
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3324]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L886
+	ldr	r1, [r4, #4]
+	ldr	r0, .L905+20
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L886:
+	add	r5, r5, #1
+	add	r4, r4, #20
+	b	.L882
+.L881:
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	beq	.L875
+	beq	.L868
 	ldr	r3, [r5, #12]
 	cmp	r3, #0
-	bne	.L876
-.L875:
+	bne	.L869
+.L868:
 	mov	r2, #148
-	ldr	r1, .L914+16
-	ldr	r0, .L914+20
+	ldr	r1, .L905+24
+	ldr	r0, .L905+28
 	bl	sftl_printk
-.L876:
-	add	r2, sp, #24
-	add	r1, sp, #28
+.L869:
+	add	r2, sp, #16
+	add	r1, sp, #20
 	mov	r0, r5
 	bl	l2p_addr_tran
-	ldr	r7, [sp, #24]
+	ldr	r7, [sp, #16]
 	cmp	r7, #3
-	bls	.L877
-.L913:
+	bls	.L870
+.L904:
 	mvn	r3, #0
 	str	r3, [r5]
-	b	.L878
-.L877:
+	b	.L871
+.L870:
 	cmp	r7, #0
-	bne	.L879
-	ldr	r3, [sp, #28]
-	ldr	r2, [sp, #8]
+	bne	.L872
+	ldr	r3, [sp, #20]
+	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bls	.L879
-	ldr	r5, .L914+16
-	ldr	r6, .L914+24
-	ldr	r8, .L914+28
-	b	.L911
-.L881:
+	bls	.L872
+	ldr	r5, .L905+24
+	ldr	r6, .L905+32
+	ldr	r8, .L905+36
+	b	.L902
+.L874:
 	mvn	r3, #0
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5838,148 +5825,81 @@ FlashProgPages:
 	mov	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L914+32
+	ldr	r0, .L905+40
 	bl	rknand_print_hex
-.L911:
-	cmp	r7, fp
+.L902:
+	cmp	r7, r10
 	add	r4, r4, #20
-	bne	.L881
+	bne	.L874
 	bl	dump_stack
-.L882:
-	ldr	r3, [sp, #20]
+.L875:
+	ldr	r3, [sp, #12]
 	mov	r0, #0
-	ldr	r2, [sp, #52]
+	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L896
+	beq	.L888
 	bl	__stack_chk_fail
-.L879:
+.L872:
 	ldr	r1, [r5, #8]
 	tst	r1, #63
 	moveq	r7, r1
-	beq	.L883
-	ldr	r7, [r10, #3324]
+	beq	.L876
+	ldr	r7, [r9, #3324]
 	cmp	r1, r7
-	beq	.L883
-	ldr	r3, .L914+36
+	beq	.L876
+	ldr	r3, .L905+44
 	mov	r0, r7
 	ldrh	r2, [r3]
 	lsl	r2, r2, #9
 	bl	ftl_memcpy
-.L883:
+.L876:
 	ldr	r3, [r5, #12]
 	mov	r2, r7
-	ldr	r1, [sp, #28]
-	ldrb	r0, [sp, #24]	@ zero_extendqisi2
-	ldr	ip, [r10, #3256]
+	ldr	r1, [sp, #20]
+	ldrb	r0, [sp, #16]	@ zero_extendqisi2
+	ldr	ip, [r9, #3256]
 	blx	ip
 	cmp	r0, #0
 	mvnne	r3, #0
 	streq	r0, [r5]
 	strne	r3, [r5]
-	ldrh	r3, [r6, #14]
+	ldrh	r3, [r9, #14]
 	cmp	r3, #4
-	bne	.L878
-	ldr	r0, [sp, #4]
-	add	r2, r7, #2048
+	bne	.L871
 	ldr	r3, [r5, #12]
-	ldr	r1, [sp, #28]
-	ldr	ip, [r6, #3256]
+	add	r2, r7, #2048
+	ldr	r1, [sp, #20]
+	ldrb	r0, [sp, #16]	@ zero_extendqisi2
 	add	r3, r3, #8
-	add	r1, r0, r1
-	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+	ldr	ip, [r9, #3256]
+	add	r1, fp, r1
 	blx	ip
 	cmp	r0, #0
-	bne	.L913
-.L878:
+	bne	.L904
+.L871:
 	add	r8, r8, #1
 	add	r5, r5, #20
-	b	.L874
-.L894:
-	ldr	r2, [r9, #3324]
-	mov	r3, #0
-	mov	r1, #1
-	add	r0, sp, #32
-	str	r3, [r2]
-	ldr	r2, [r9, #3332]
-	str	r3, [r2]
-	ldr	r3, [r4, #4]
-	ldr	r2, [sp, #12]
-	str	r3, [sp, #36]
-	ldr	r3, [r9, #3324]
-	str	r3, [sp, #40]
-	ldr	r3, [r9, #3332]
-	str	r3, [sp, #44]
-	bl	FlashReadPages
-	ldr	fp, [sp, #32]
-	cmn	fp, #1
-	bne	.L890
-	ldr	r1, [r4, #4]
-	mov	r0, r7
-	bl	sftl_printk
-	str	fp, [r4]
-.L890:
-	ldr	fp, [sp, #32]
-	cmp	fp, #256
-	bne	.L891
-	ldr	r1, [r4, #4]
-	mov	r0, r10
-	bl	sftl_printk
-	str	fp, [r4]
-.L891:
-	ldr	r3, [r4, #12]
-	cmp	r3, #0
-	beq	.L892
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3332]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	beq	.L892
-	ldr	r1, [r4, #4]
-	ldr	r0, .L914+40
-	bl	sftl_printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L892:
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L893
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3324]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	beq	.L893
-	ldr	r1, [r4, #4]
-	ldr	r0, .L914+44
-	bl	sftl_printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L893:
-	add	r5, r5, #1
-	add	r4, r4, #20
-.L889:
-	cmp	r8, r5
-	bne	.L894
-	b	.L882
-.L896:
-	add	sp, sp, #60
+	b	.L867
+.L888:
+	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L915:
+.L906:
 	.align	2
-.L914:
-	.word	__stack_chk_guard
+.L905:
 	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.word	.LC95
 	.word	.LC96
+	.word	.LC97
+	.word	.LC98
 	.word	.LANCHOR1+256
 	.word	.LC8
 	.word	.LC86
 	.word	.LC87
 	.word	.LC88
-	.word	.LANCHOR0+262
-	.word	.LC97
-	.word	.LC98
+	.word	.LANCHOR0+258
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
@@ -5995,37 +5915,37 @@ FtlLowFormatEraseBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, #0
-	ldr	r4, .L959
+	ldr	r4, .L950
 	mov	r6, r1
 	mov	r7, r10
 	mov	r5, r10
 	mov	r9, #20
 	.pad #20
 	sub	sp, sp, #20
-	add	fp, r4, #316
+	add	fp, r4, #312
 	str	r0, [sp, #4]
 	str	r0, [r4, #3288]
-.L917:
-	ldrh	r1, [r4, #236]
+.L908:
+	ldrh	r1, [r4, #232]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L921
+	bhi	.L912
 	cmp	r7, #0
-	beq	.L916
+	beq	.L907
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r7
 	mov	r1, #0
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L924:
+.L915:
 	uxth	r3, r8
 	cmp	r7, r3
-	bhi	.L926
-.L927:
+	bhi	.L917
+.L918:
 	cmp	r6, #0
 	mov	r8, #0
-	ldrne	r3, .L959+4
+	ldrne	r3, .L950+4
 	mov	fp, #20
 	moveq	r3, #2
 	streq	r6, [sp, #8]
@@ -6034,54 +5954,54 @@ FtlLowFormatEraseBlock:
 	strne	r3, [sp, #12]
 	movne	r3, #1
 	strne	r3, [sp, #8]
-.L936:
+.L927:
 	mov	r10, #0
 	mov	r7, r10
-.L928:
-	ldrh	r1, [r4, #236]
+.L919:
+	ldrh	r1, [r4, #232]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L931
+	bhi	.L922
 	cmp	r7, #0
-	beq	.L916
+	beq	.L907
 	mov	r9, #0
 	mov	r3, #1
 	ldr	r2, [sp, #8]
 	mov	r1, r7
 	ldr	r0, [r4, #3272]
 	bl	FlashProgPages
-.L933:
+.L924:
 	uxth	r3, r9
 	cmp	r7, r3
-	bhi	.L935
+	bhi	.L926
 	add	r8, r8, #1
 	ldr	r2, [sp, #12]
 	uxth	r3, r8
 	cmp	r2, r3
-	bhi	.L936
+	bhi	.L927
 	mov	r8, #0
 	mov	r9, #20
-.L937:
+.L928:
 	uxth	r3, r8
 	cmp	r7, r3
-	bhi	.L939
+	bhi	.L930
 	ldr	r3, [sp, #4]
 	adds	r6, r6, #0
 	movne	r6, #1
 	cmp	r3, #63
 	orrls	r6, r6, #1
 	cmp	r6, #0
-	beq	.L916
+	beq	.L907
 	mov	r2, r7
 	ldr	r1, [sp, #8]
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L916:
+.L907:
 	mov	r0, r5
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L921:
+.L912:
 	uxth	r3, r10
 	ldr	r0, [r4, #3272]
 	mov	r2, #0
@@ -6089,21 +6009,21 @@ FtlLowFormatEraseBlock:
 	add	r3, r4, r3
 	str	r2, [r0, r1]
 	ldr	r1, [sp, #4]
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r8, r0
-	beq	.L918
+	beq	.L909
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L919
-.L918:
+	bne	.L910
+.L909:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r5, r5, #1
 	uxthne	r5, r5
-	bne	.L919
+	bne	.L910
 	ldr	r1, [r4, #3272]
 	lsl	r8, r8, #10
 	ldr	r3, [r4, #3320]
@@ -6121,25 +6041,25 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L919:
+.L910:
 	add	r10, r10, #1
-	b	.L917
-.L926:
+	b	.L908
+.L917:
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmn	r3, #1
-	bne	.L925
+	bne	.L916
 	ldr	r0, [r1, #4]
 	add	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L925:
+.L916:
 	add	r8, r8, #1
-	b	.L924
-.L931:
+	b	.L915
+.L922:
 	uxth	r3, r10
 	ldr	r0, [r4, #3272]
 	mov	r2, #0
@@ -6147,25 +6067,25 @@ FtlLowFormatEraseBlock:
 	add	r3, r4, r3
 	str	r2, [r0, r1]
 	ldr	r1, [sp, #4]
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r9, r0
-	beq	.L929
+	beq	.L920
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L930
-.L929:
+	bne	.L921
+.L920:
 	mov	r0, r9
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L930
+	bne	.L921
 	ldr	r1, [r4, #3272]
 	add	r9, r8, r9, lsl #10
 	ldr	r3, [r4, #3316]
 	mla	r1, fp, r7, r1
 	str	r3, [r1, #8]
-	ldr	r3, .L959+8
+	ldr	r3, .L950+8
 	str	r9, [r1, #4]
 	ldrh	r3, [r3]
 	mul	r3, r7, r3
@@ -6178,46 +6098,46 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L930:
+.L921:
 	add	r10, r10, #1
-	b	.L928
-.L935:
+	b	.L919
+.L926:
 	mul	r3, fp, r9
 	ldr	r2, [r4, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L934
+	beq	.L925
 	ldr	r0, [r1, #4]
 	add	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L934:
+.L925:
 	add	r9, r9, #1
-	b	.L933
-.L939:
+	b	.L924
+.L930:
 	cmp	r6, #0
-	beq	.L938
+	beq	.L929
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L938
+	bne	.L929
 	ldr	r0, [r1, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L938:
+.L929:
 	add	r8, r8, #1
-	b	.L937
-.L960:
+	b	.L928
+.L951:
 	.align	2
-.L959:
+.L950:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+308
-	.word	.LANCHOR0+316
+	.word	.LANCHOR0+304
+	.word	.LANCHOR0+312
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
@@ -6230,7 +6150,7 @@ FlashTestBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L968
+	ldr	r3, .L959
 	cmp	r0, #11
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
@@ -6240,8 +6160,8 @@ FlashTestBlk:
 	mov	r6, r3
 	ldr	r2, [r3]
 	str	r2, [sp, #84]
-	bls	.L961
-	ldr	r4, .L968+4
+	bls	.L952
+	ldr	r4, .L959+4
 	mov	r5, r0
 	mov	r2, #32
 	add	r0, sp, #20
@@ -6268,7 +6188,7 @@ FlashTestBlk:
 	ldr	r3, [sp]
 	cmp	r3, #0
 	mvnne	r4, #0
-	bne	.L963
+	bne	.L954
 	add	r3, r5, #1
 	mov	r0, sp
 	str	r3, [sp, #4]
@@ -6280,26 +6200,26 @@ FlashTestBlk:
 	adds	r4, r4, #0
 	movne	r4, #1
 	rsb	r4, r4, #0
-.L963:
+.L954:
 	mov	r2, #1
 	mov	r1, #0
 	mov	r0, sp
 	str	r5, [sp, #4]
 	bl	FlashEraseBlocks
-.L961:
+.L952:
 	ldr	r2, [sp, #84]
 	mov	r0, r4
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L964
+	beq	.L955
 	bl	__stack_chk_fail
-.L964:
+.L955:
 	add	sp, sp, #88
 	@ sp needed
 	pop	{r4, r5, r6, pc}
-.L969:
+.L960:
 	.align	2
-.L968:
+.L959:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -6318,35 +6238,34 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r5, #0
-	ldr	r4, .L983
+	ldr	r4, .L974
 	mov	r1, #0
 	ldr	r3, [r4, #3336]
-	add	r6, r4, #380
+	add	r6, r4, #376
 	ldr	r0, [r4, #3304]
-	sub	r7, r6, #122
-	add	r8, r4, #3392
+	add	r7, r4, #3392
 	str	r3, [r4, #3468]
-	movw	r3, #314
+	movw	r3, #310
 	ldrh	r2, [r4, r3]
 	str	r0, [r4, #3464]
 	bl	ftl_memset
-.L971:
-	ldrh	r3, [r7]
+.L962:
+	ldrh	r3, [r4, #254]
 	cmp	r5, r3
-	blt	.L972
+	blt	.L963
 	ldr	r7, [r4, #3468]
 	mov	r2, #16
 	mov	r1, #255
-	ldr	r6, .L983+4
-	ldr	r10, .L983+8
+	ldr	r6, .L974+4
+	ldr	r10, .L974+8
 	mov	r5, #0
 	mov	r0, r7
 	mov	r8, r5
 	bl	ftl_memset
-	ldr	r3, .L983+12
+	ldr	r3, .L974+12
 	sub	r9, r6, #48
 	strh	r3, [r7]	@ movhi
-	ldr	r3, [r4, #364]
+	ldr	r3, [r4, #360]
 	str	r3, [r7, #4]
 	ldrh	r3, [r6]
 	strh	r3, [r7, #2]	@ movhi
@@ -6354,11 +6273,11 @@ FtlBbmTblFlush:
 	strh	r3, [r7, #8]	@ movhi
 	ldrh	r3, [r6, #6]
 	strh	r3, [r7, #10]	@ movhi
-	ldr	r3, [r4, #232]
+	ldr	r3, [r4, #228]
 	strh	r3, [r7, #12]	@ movhi
 	ldr	r3, [r4, #2608]
 	strh	r3, [r7, #14]	@ movhi
-.L973:
+.L964:
 	ldr	r3, [r4, #3304]
 	mov	fp, #0
 	ldrh	r2, [r6, #2]
@@ -6378,13 +6297,13 @@ FtlBbmTblFlush:
 	ldrh	r2, [r6, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L974
-	ldr	r3, [r4, #364]
+	blt	.L965
+	ldr	r3, [r4, #360]
 	ldrh	r2, [r6]
 	ldr	r0, [r4, #3272]
 	add	r3, r3, #1
 	strh	fp, [r6, #2]	@ movhi
-	str	r3, [r4, #364]
+	str	r3, [r4, #360]
 	str	r3, [r7, #4]
 	ldrh	r3, [r6, #4]
 	strh	r2, [r7, #8]	@ movhi
@@ -6396,9 +6315,9 @@ FtlBbmTblFlush:
 	str	r3, [r4, #3460]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-.L974:
+.L965:
 	mov	r3, #1
-	ldr	r0, .L983+16
+	ldr	r0, .L974+16
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
@@ -6407,22 +6326,22 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #2]	@ movhi
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	bne	.L975
+	bne	.L966
 	add	r5, r5, #1
 	ldr	r1, [r4, #3460]
 	uxth	r5, r5
-	ldr	r0, .L983+20
+	ldr	r0, .L974+20
 	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L973
+	bls	.L964
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L983+24
+	ldr	r0, .L974+24
 	bl	sftl_printk
-.L977:
-	b	.L977
-.L972:
-	ldrh	r2, [r8]
+.L968:
+	b	.L968
+.L963:
+	ldrh	r2, [r7]
 	ldr	r3, [r4, #3464]
 	ldr	r1, [r6, #4]!
 	mul	r0, r2, r5
@@ -6430,25 +6349,25 @@ FtlBbmTblFlush:
 	add	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L971
-.L978:
+	b	.L962
+.L969:
 	mov	r8, #1
-	b	.L973
-.L975:
+	b	.L964
+.L966:
 	add	r8, r8, #1
 	cmp	r8, #1
-	ble	.L978
+	ble	.L969
 	cmp	r3, #256
-	beq	.L973
+	beq	.L964
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L984:
+.L975:
 	.align	2
-.L983:
+.L974:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+356
+	.word	.LANCHOR0+352
 	.word	.LC99
 	.word	-3887
 	.word	.LANCHOR0+3456
@@ -6469,29 +6388,28 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	fp, .L1022
+	ldr	r4, .L1013
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r4, .L1022+4
-.L986:
-	ldr	r3, .L1022+4
-	ldrh	r2, [fp]
-	ldrh	r3, [r3, #228]
+	add	fp, r4, #2528
+.L977:
+	ldr	r2, .L1013+4
+	ldrh	r3, [r4, #224]
+	ldrh	r2, [r2]
 	add	r3, r3, r2
-	ldr	r2, .L1022+4
-	ldrh	r2, [r2, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L987
-	mov	r2, #2656
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	ble	.L978
+	movw	r2, #2660
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L987:
-	ldr	r3, .L1022+16
+.L978:
+	ldr	r3, .L1013+16
 	cmp	r5, r3
 	movne	r1, #0
-	bne	.L988
-	ldrh	r3, [r4, #228]
+	bne	.L979
+	ldrh	r3, [r4, #224]
 	ldr	r1, [r4, #3168]
 	mul	r2, r1, r3
 	lsr	r1, r3, #1
@@ -6501,118 +6419,115 @@ allocate_data_superblock:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-.L988:
-	ldr	r0, .L1022+20
+.L979:
+	ldr	r0, .L1013+20
 	bl	List_pop_index_node
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	mov	r6, r0
 	uxth	r8, r0
 	cmp	r3, #0
-	bne	.L989
-	movw	r2, #2665
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	bne	.L980
+	movw	r2, #2669
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L989:
-	ldrh	r3, [r4, #228]
+.L980:
+	ldrh	r3, [r4, #224]
 	sub	r3, r3, #1
-	strh	r3, [r4, #228]	@ movhi
-	ldrh	r3, [r4, #244]
+	strh	r3, [r4, #224]	@ movhi
+	ldrh	r3, [r4, #240]
 	cmp	r3, r8
-	bls	.L986
+	bls	.L977
 	uxth	r6, r6
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	lsl	r6, r6, #1
 	ldrh	r7, [r3, r6]
 	cmp	r7, #0
-	bne	.L986
+	bne	.L977
 	strh	r8, [r5]	@ movhi
 	mov	r0, r5
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L991
-	ldr	r3, [r4, #76]
+	bne	.L982
+	ldr	r3, [r4, #72]
 	mvn	r2, #0
 	mov	r0, r8
 	strh	r2, [r3, r6]	@ movhi
 	bl	INSERT_DATA_LIST
 	ldrh	r2, [fp]
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L986
-	movw	r2, #2679
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	ble	.L977
+	movw	r2, #2683
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-	b	.L986
-.L991:
+	b	.L977
+.L982:
 	ldrh	r2, [fp]
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L993
-	movw	r2, #2682
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	ble	.L984
+	movw	r2, #2686
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L993:
+.L984:
 	ldr	r1, [r4, #3272]
 	mov	r9, #20
-	ldrh	r2, [r4, #236]
+	ldrh	r2, [r4, #232]
 	add	r10, r5, #16
 	mov	r0, r10
 	mov	ip, #0
 	mov	r3, r1
 	mla	r2, r9, r2, r1
 	str	r2, [sp, #4]
-.L994:
+.L985:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L996
+	bne	.L987
 	cmp	r7, #0
-	bne	.L997
-	movw	r2, #2693
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	bne	.L988
+	movw	r2, #2697
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L997:
-	ldrh	r3, [r4, #176]
+.L988:
+	ldrh	r3, [r4, #172]
 	cmp	r3, r8
-	bne	.L998
-	movw	r2, #2695
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	bne	.L989
+	movw	r2, #2699
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L998:
+.L989:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #2540]
-	ldr	r9, .L1022+24
+	ldr	r1, [r4, #2536]
+	ldr	r2, .L1013+24
 	cmp	r3, #0
-	ldrh	r3, [r2, r6]
-	bne	.L999
+	ldrh	r3, [r1, r6]
+	bne	.L990
 	cmp	r3, #0
-	mov	r0, r8
-	ldrhne	r1, [r9]
+	ldrhne	r0, [r2]
 	moveq	r3, #2
-	addne	r3, r3, r1
-	mov	r1, #0
-	strh	r3, [r2, r6]	@ movhi
+	addne	r3, r3, r0
+	strh	r3, [r1, r6]	@ movhi
 	ldr	r3, [r4, #2600]
 	add	r3, r3, #1
 	str	r3, [r4, #2600]
-	bl	ftl_set_blk_mode
-.L1002:
-	ldr	r3, [r4, #2540]
-	ldr	r2, [r4, #2616]
-	ldr	r0, [r4, #2600]
+.L993:
+	ldr	r3, [r4, #2536]
+	ldr	r1, [r4, #2616]
+	ldrh	r2, [r2]
 	ldrh	r3, [r3, r6]
-	ldrh	r1, [r4, #244]
-	cmp	r3, r2
-	ldrh	r2, [r9]
+	ldr	r0, [r4, #2600]
+	cmp	r3, r1
+	ldrh	r1, [r4, #240]
 	strhi	r3, [r4, #2616]
 	ldr	r3, [r4, #2604]
 	mla	r0, r0, r2, r3
@@ -6621,17 +6536,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3272]
 	str	r0, [r4, #2608]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L1022+28
+	ldr	r0, .L1013+28
 	add	r3, r3, #1
 	str	r3, [r2, #16]
 	mov	r2, #20
 	mla	r2, r2, r7, r1
 	add	r3, r1, #4
 	add	r2, r2, #24
-.L1004:
+.L995:
 	add	r3, r3, #20
 	cmp	r2, r3
-	bne	.L1005
+	bne	.L996
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3272]
@@ -6639,24 +6554,24 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r3, r9
 	mov	r1, #20
-.L1006:
+.L997:
 	uxth	r2, r9
 	cmp	r7, r2
-	bhi	.L1008
+	bhi	.L999
 	cmp	r3, #0
-	ble	.L1009
+	ble	.L1000
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1009:
+.L1000:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1010
-	ldr	r3, [r4, #76]
+	bne	.L1001
+	ldr	r3, [r4, #72]
 	mvn	r2, #0
 	strh	r2, [r3, r6]	@ movhi
-	b	.L986
-.L996:
+	b	.L977
+.L987:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
@@ -6668,28 +6583,26 @@ allocate_data_superblock:
 	addne	r7, r7, #1
 	uxthne	r7, r7
 	strne	r2, [lr, #4]
-	b	.L994
-.L999:
+	b	.L985
+.L990:
 	add	r3, r3, #1
-	mov	r0, r8
-	strh	r3, [r2, r6]	@ movhi
+	strh	r3, [r1, r6]	@ movhi
 	ldr	r3, [r4, #2604]
 	add	r3, r3, #1
 	str	r3, [r4, #2604]
-	bl	ftl_set_blk_mode.part.6
-	b	.L1002
-.L1005:
+	b	.L993
+.L996:
 	ldr	r1, [r3, #-20]
 	and	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L1004
-.L1008:
+	b	.L995
+.L999:
 	mul	r2, r1, r9
 	ldr	r0, [r4, #3272]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	cmn	r2, #1
-	bne	.L1007
+	bne	.L998
 	ldr	r0, [ip, #4]
 	add	r3, r3, #1
 	str	r1, [sp, #12]
@@ -6704,12 +6617,12 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	sub	r2, r2, #1
 	strb	r2, [r5, #7]
-.L1007:
+.L998:
 	add	r9, r9, #1
 	add	r10, r10, #2
-	b	.L1006
-.L1010:
-	movw	r3, #306
+	b	.L997
+.L1001:
+	movw	r3, #302
 	ldrh	r3, [r4, r3]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -6718,7 +6631,7 @@ allocate_data_superblock:
 	strb	r2, [r5, #6]
 	ldr	r2, [r4, #2592]
 	uxth	r3, r3
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	strh	r3, [r5, #4]	@ movhi
 	str	r2, [r5, #12]
 	add	r2, r2, #1
@@ -6728,30 +6641,30 @@ allocate_data_superblock:
 	strh	r3, [r1, r2]	@ movhi
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1011
+	beq	.L1002
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1012
-.L1011:
-	movw	r2, #2748
-	ldr	r1, .L1022+8
-	ldr	r0, .L1022+12
+	bne	.L1003
+.L1002:
+	mov	r2, #2752
+	ldr	r1, .L1013+8
+	ldr	r0, .L1013+12
 	bl	sftl_printk
-.L1012:
+.L1003:
 	mov	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1023:
+.L1014:
 	.align	2
-.L1022:
-	.word	.LANCHOR0+2532
+.L1013:
 	.word	.LANCHOR0
+	.word	.LANCHOR0+2528
 	.word	.LANCHOR1+271
 	.word	.LC8
-	.word	.LANCHOR0+128
-	.word	.LANCHOR0+2536
-	.word	.LANCHOR0+296
+	.word	.LANCHOR0+124
+	.word	.LANCHOR0+2532
+	.word	.LANCHOR0+292
 	.word	-1024
 	.fnend
 	.size	allocate_data_superblock, .-allocate_data_superblock
@@ -6769,69 +6682,69 @@ FtlGcFreeBadSuperBlk:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r3, #3210
-	ldr	r6, .L1037
+	ldr	r6, .L1028
 	ldrh	r3, [r6, r3]
 	cmp	r3, #0
-	beq	.L1025
-	ldr	fp, .L1037+4
+	beq	.L1016
+	ldr	fp, .L1028+4
 	mov	r7, #0
 	str	r0, [sp, #4]
 	add	r10, fp, #2
-.L1026:
-	ldrh	r2, [r6, #236]
+.L1017:
+	ldrh	r2, [r6, #232]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L1032
+	bhi	.L1023
 	bl	FtlGcReFreshBadBlk
-.L1025:
+.L1016:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1032:
+.L1023:
 	uxtah	r3, r6, r7
 	ldr	r1, [sp, #4]
 	mov	r8, #0
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L1027:
+.L1018:
 	ldrh	r3, [fp]
 	uxth	r4, r8
 	cmp	r3, r4
 	addls	r7, r7, #1
-	bls	.L1026
-.L1031:
+	bls	.L1017
+.L1022:
 	uxth	r5, r8
 	lsl	r3, r5, #1
 	ldrh	r3, [r10, r3]
 	cmp	r3, r9
-	bne	.L1028
+	bne	.L1019
 	mov	r1, r9
-	ldr	r0, .L1037+8
+	ldr	r0, .L1028+8
 	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [fp]
 	add	r3, r10, r5, lsl #1
-.L1029:
+.L1020:
 	cmp	r4, r1
-	bcc	.L1030
+	bcc	.L1021
 	sub	r1, r1, #1
 	strh	r1, [fp]	@ movhi
-.L1028:
+.L1019:
 	add	r8, r8, #1
-	b	.L1027
-.L1030:
+	b	.L1018
+.L1021:
 	ldrh	r0, [r3, #2]!
 	add	r4, r4, #1
 	uxth	r4, r4
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L1029
-.L1038:
+	b	.L1020
+.L1029:
 	.align	2
-.L1037:
+.L1028:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3210
 	.word	.LC102
@@ -6850,78 +6763,78 @@ update_vpc_list:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	lsl	r3, r0, #1
-	ldr	r4, .L1052
-	ldr	r2, [r4, #76]
+	ldr	r4, .L1043
+	ldr	r2, [r4, #72]
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L1040
-	ldrh	r3, [r4, #226]
+	bne	.L1031
+	ldrh	r3, [r4, #222]
 	mov	r5, r0
 	cmp	r3, r0
 	mvneq	r3, #0
-	strheq	r3, [r4, #226]	@ movhi
-	ldrh	r3, [r4, #224]
+	strheq	r3, [r4, #222]	@ movhi
+	ldrh	r3, [r4, #220]
 	cmp	r3, r0
 	mvneq	r3, #0
-	strheq	r3, [r4, #224]	@ movhi
-	ldrh	r3, [r4, #176]
+	strheq	r3, [r4, #220]	@ movhi
+	ldrh	r3, [r4, #172]
 	cmp	r3, r0
 	mvneq	r3, #0
-	strheq	r3, [r4, #176]	@ movhi
-	beq	.L1044
-	ldrh	r3, [r4, #28]
+	strheq	r3, [r4, #172]	@ movhi
+	beq	.L1035
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L1049
-	ldrh	r3, [r4, #80]
+	beq	.L1040
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L1049
-	ldrh	r3, [r4, #128]
+	beq	.L1040
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	beq	.L1049
-.L1044:
+	beq	.L1040
+.L1035:
+	ldr	r6, .L1043+4
 	mov	r1, r5
-	ldr	r0, .L1052+4
+	ldr	r0, .L1043+8
 	bl	List_remove_node
-	movw	r3, #2532
-	ldrh	r3, [r4, r3]
+	ldrh	r3, [r6]
 	cmp	r3, #0
-	bne	.L1046
-	movw	r2, #2824
-	ldr	r1, .L1052+8
-	ldr	r0, .L1052+12
+	bne	.L1037
+	movw	r2, #2828
+	ldr	r1, .L1043+12
+	ldr	r0, .L1043+16
 	bl	sftl_printk
-.L1046:
-	movw	r6, #2532
+.L1037:
+	ldrh	r3, [r6]
 	mov	r0, r5
-	ldrh	r3, [r4, r6]
 	sub	r3, r3, #1
-	strh	r3, [r4, r6]	@ movhi
+	strh	r3, [r6]	@ movhi
 	bl	free_data_superblock
 	mov	r0, r5
 	bl	FtlGcFreeBadSuperBlk
-	ldrh	r2, [r4, r6]
-	ldrh	r3, [r4, #228]
+	ldrh	r2, [r6]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L1050
-	movw	r2, #2827
-	ldr	r1, .L1052+8
-	ldr	r0, .L1052+12
+	ble	.L1041
+	movw	r2, #2831
+	ldr	r1, .L1043+12
+	ldr	r0, .L1043+16
 	bl	sftl_printk
-.L1050:
+.L1041:
 	mov	r0, #1
 	pop	{r4, r5, r6, pc}
-.L1040:
+.L1031:
 	bl	List_update_data_list
-.L1049:
+.L1040:
 	mov	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1053:
+.L1044:
 	.align	2
-.L1052:
+.L1043:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2524
+	.word	.LANCHOR0+2528
+	.word	.LANCHOR0+2520
 	.word	.LANCHOR1+296
 	.word	.LC8
 	.fnend
@@ -6941,54 +6854,54 @@ decrement_vpc_count:
 	.save {r4, r5, r6, r7, r8, lr}
 	cmp	r0, r3
 	mov	r6, r0
-	ldr	r4, .L1067
-	beq	.L1055
-	ldr	r3, [r4, #76]
+	ldr	r4, .L1058
+	beq	.L1046
+	ldr	r3, [r4, #72]
 	lsl	r5, r0, #1
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	subne	r2, r2, #1
 	strhne	r2, [r3, r5]	@ movhi
-	bne	.L1055
+	bne	.L1046
 	mov	r1, r0
-	ldr	r0, .L1067+4
+	ldr	r0, .L1058+4
 	bl	sftl_printk
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r5, [r3, r5]
 	cmp	r5, #0
-	beq	.L1057
-.L1065:
+	beq	.L1048
+.L1056:
 	mov	r5, #0
-.L1054:
+.L1045:
 	mov	r0, r5
 	pop	{r4, r5, r6, r7, r8, pc}
+.L1048:
+	movw	r2, #2846
 .L1057:
-	movw	r2, #2842
-.L1066:
-	ldr	r1, .L1067+8
-	ldr	r0, .L1067+12
+	ldr	r1, .L1058+8
+	ldr	r0, .L1058+12
 	bl	sftl_printk
-	b	.L1054
-.L1055:
+	b	.L1045
+.L1046:
 	movw	r7, #3442
 	movw	r3, #65535
 	ldrh	r0, [r4, r7]
 	cmp	r0, r3
 	strheq	r6, [r4, r7]	@ movhi
-	beq	.L1065
-.L1059:
+	beq	.L1056
+.L1050:
 	cmp	r6, r0
-	beq	.L1065
+	beq	.L1056
 	bl	update_vpc_list
-	ldr	r2, [r4, #2520]
+	ldr	r2, [r4, #2516]
 	adds	r5, r0, #0
-	ldr	r3, [r4, #2524]
+	ldr	r3, [r4, #2520]
 	movne	r5, #1
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	strh	r6, [r4, r7]	@ movhi
 	sub	r3, r3, r2
 	asr	r2, r3, #1
-	ldr	r3, .L1067+16
+	ldr	r3, .L1058+16
 	mul	r3, r3, r2
 	uxth	r2, r3
 	uxth	r3, r3
@@ -6999,12 +6912,12 @@ decrement_vpc_count:
 	lsr	r2, r2, #5
 	moveq	r2, #0
 	cmp	r2, #0
-	beq	.L1054
-	movw	r2, #2858
-	b	.L1066
-.L1068:
+	beq	.L1045
+	movw	r2, #2862
+	b	.L1057
+.L1059:
 	.align	2
-.L1067:
+.L1058:
 	.word	.LANCHOR0
 	.word	.LC103
 	.word	.LANCHOR1+312
@@ -7026,11 +6939,11 @@ FtlSuperblockPowerLostFix:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L1084
+	ldr	r7, .L1075
 	mov	r8, #0
 	movw	r2, #61589
 	mov	r4, r0
-	ldr	r5, .L1084+4
+	ldr	r5, .L1075+4
 	ldr	r3, [r7]
 	ldr	r6, [r5, #3336]
 	str	r3, [sp, #20]
@@ -7048,26 +6961,26 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r6, #2]	@ movhi
 	ldr	r3, [r5, #3304]
 	str	r2, [r3]
-	ldr	r2, .L1084+8
+	ldr	r2, .L1075+8
 	ldr	r3, [r5, #3304]
 	str	r2, [r3, #4]
 	ldrh	r3, [r0, #4]
 	tst	r3, #1
 	moveq	r9, #6
 	movne	r9, #7
-.L1075:
+.L1066:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1071
-.L1072:
+	bne	.L1062
+.L1063:
 	ldrh	r3, [r4]
-	ldr	r1, [r5, #76]
+	ldr	r1, [r5, #72]
 	ldrh	r0, [r4, #4]
 	lsl	r3, r3, #1
 	ldrh	r2, [r1, r3]
 	sub	r2, r2, r0
 	strh	r2, [r1, r3]	@ movhi
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r3, [r5, r3]
 	ldr	r2, [sp, #20]
 	strh	r3, [r4, #2]	@ movhi
@@ -7076,14 +6989,14 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1076
+	beq	.L1067
 	bl	__stack_chk_fail
-.L1071:
+.L1062:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	cmn	r0, #1
 	str	r0, [sp, #4]
-	beq	.L1072
+	beq	.L1063
 	ldr	r3, [r5, #2596]
 	mov	r1, #1
 	mov	r0, sp
@@ -7098,15 +7011,15 @@ FtlSuperblockPowerLostFix:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
 	subs	r9, r9, #1
-	bne	.L1075
-	b	.L1072
-.L1076:
+	bne	.L1066
+	b	.L1063
+.L1067:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1085:
+.L1076:
 	.align	2
-.L1084:
+.L1075:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	305419896
@@ -7126,99 +7039,98 @@ FtlMakeBbt:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r9, #0
-	ldr	r7, .L1107
+	ldr	r8, .L1098
 	bl	FtlBbtMemInit
-	sub	r8, r7, #384
-	sub	r10, r7, #18
-	sub	r4, r7, #28
-	mov	r5, r8
+	sub	r4, r8, #28
+	sub	r6, r8, #380
+	sub	r10, r8, #18
+	mov	r5, r6
+	sub	fp, r4, #54
 	bl	FtlLoadFactoryBbt
-.L1087:
-	ldr	r3, .L1107+4
-	ldrh	r3, [r3]
+.L1078:
+	ldrh	r3, [r6, #254]
 	cmp	r9, r3
-	bcc	.L1093
-	ldr	r7, .L1107+8
+	bcc	.L1084
+	ldr	r7, .L1098+4
 	mov	r6, #0
-.L1094:
+.L1085:
 	ldrh	r3, [r7]
 	uxth	r0, r6
 	add	r6, r6, #1
 	cmp	r3, r0
-	bhi	.L1095
+	bhi	.L1086
 	ldrh	r6, [r4, #12]
 	movw	r7, #65535
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1096:
+.L1087:
 	ldrh	r3, [r4, #12]
 	sub	r3, r3, #48
 	cmp	r6, r3
-	ble	.L1100
+	ble	.L1091
 	mov	r0, r6
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1097
+	beq	.L1088
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1098
+	beq	.L1089
 	mov	r0, r6
 	bl	FtlBbmMapBadBlock
-.L1097:
+.L1088:
 	sub	r6, r6, #1
 	uxth	r6, r6
-	b	.L1096
-.L1093:
-	ldr	r3, [r8, #3336]
+	b	.L1087
+.L1084:
+	ldr	r3, [r6, #3336]
 	movw	r2, #65535
-	ldr	r0, [r8, #3304]
-	ldr	fp, .L1107+12
+	ldr	r0, [r6, #3304]
 	str	r3, [sp, #4]
-	str	r3, [r8, #3468]
+	str	r3, [r6, #3468]
 	ldrh	r3, [r10, #2]!
-	str	r0, [r8, #3464]
+	str	r0, [r6, #3464]
 	cmp	r3, r2
-	beq	.L1088
-	ldrh	r6, [fp]
+	beq	.L1079
+	ldrh	r7, [fp]
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1107+16
-	mla	r6, r9, r6, r3
-	lsl	r3, r6, #10
-	str	r3, [r8, #3460]
+	ldr	r0, .L1098+8
+	mla	r7, r9, r7, r3
+	lsl	r3, r7, #10
+	str	r3, [r6, #3460]
 	bl	FlashReadPages
 	ldrh	r2, [fp]
-	ldr	r1, [r8, #3464]
-	ldr	r0, [r7]
+	ldr	r1, [r6, #3464]
+	ldr	r0, [r8]
 	add	r2, r2, #7
 	asr	r2, r2, #3
 	bl	ftl_memcpy
-.L1089:
-	uxth	r0, r6
+.L1080:
+	uxth	r0, r7
 	add	r9, r9, #1
-	add	r7, r7, #4
+	add	r8, r8, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1087
-.L1088:
+	b	.L1078
+.L1079:
 	mov	r1, r9
 	bl	FlashGetBadBlockList
-	ldr	r1, [r7]
-	ldr	r0, [r8, #3464]
+	ldr	r1, [r8]
+	ldr	r0, [r6, #3464]
 	bl	FtlBbt2Bitmap
 	ldrh	r3, [fp]
-.L1106:
+.L1097:
 	sub	r3, r3, #1
 	uxth	r3, r3
 	str	r3, [sp]
-.L1090:
+.L1081:
 	ldr	r3, [sp]
 	ldrh	r0, [fp]
 	smlabb	r0, r0, r9, r3
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1091
+	beq	.L1082
 	ldrh	r3, [sp]
 	mov	r2, #16
 	mov	r1, #0
@@ -7234,54 +7146,54 @@ FtlMakeBbt:
 	strh	r2, [r3]	@ movhi
 	mov	r3, #0
 	ldr	r2, [sp, #4]
-	ldrh	r6, [fp]
+	ldrh	r7, [fp]
 	str	r3, [r2, #4]
 	ldrh	r3, [r10]
 	strh	r3, [r2, #2]	@ movhi
 	ldrh	r3, [r10]
-	ldr	r1, [r7]
+	ldr	r1, [r8]
 	ldr	r0, [r5, #3464]
-	mla	r6, r9, r6, r3
-	lsl	r3, r6, #10
+	mla	r7, r9, r7, r3
+	lsl	r3, r7, #10
 	str	r3, [r5, #3460]
-	ldr	r3, .L1107+20
+	ldr	r3, .L1098+12
 	ldrh	r2, [r3]
 	lsl	r2, r2, #2
 	bl	ftl_memcpy
 	mov	r2, #1
-	ldr	r0, .L1107+16
+	ldr	r0, .L1098+8
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	mov	r3, #1
-	ldr	r0, .L1107+16
+	ldr	r0, .L1098+8
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	bne	.L1089
-	uxth	r0, r6
+	bne	.L1080
+	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1090
-.L1091:
+	b	.L1081
+.L1082:
 	ldr	r3, [sp]
-	b	.L1106
-.L1095:
+	b	.L1097
+.L1086:
 	bl	FtlBbmMapBadBlock
-	b	.L1094
-.L1098:
+	b	.L1085
+.L1089:
 	ldrh	r3, [r4]
 	cmp	r3, r7
 	strheq	r6, [r4]	@ movhi
-	beq	.L1097
-.L1099:
+	beq	.L1088
+.L1090:
 	strh	r6, [r4, #4]	@ movhi
-.L1100:
+.L1091:
 	ldrh	r3, [r4]
 	mov	r6, #0
 	ldr	r0, [r5, #3272]
 	mov	r1, #1
-	str	r6, [r5, #364]
+	str	r6, [r5, #360]
 	mov	r2, #2
 	strh	r6, [r4, #2]	@ movhi
 	lsl	r3, r3, #10
@@ -7295,11 +7207,11 @@ FtlMakeBbt:
 	ldrh	r0, [r4, #4]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldr	r3, [r5, #364]
+	ldr	r3, [r5, #360]
 	ldrh	r2, [r4, #4]
 	strh	r6, [r4, #2]	@ movhi
 	add	r3, r3, #1
-	str	r3, [r5, #364]
+	str	r3, [r5, #360]
 	ldrh	r3, [r4]
 	strh	r2, [r4]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
@@ -7308,13 +7220,11 @@ FtlMakeBbt:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1108:
+.L1099:
 	.align	2
-.L1107:
-	.word	.LANCHOR0+384
-	.word	.LANCHOR0+258
-	.word	.LANCHOR0+318
-	.word	.LANCHOR0+302
+.L1098:
+	.word	.LANCHOR0+380
+	.word	.LANCHOR0+314
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR0+3392
 	.fnend
@@ -7344,23 +7254,23 @@ js_hash:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1113
+	ldr	r3, .L1104
 	add	r1, r0, r1
-.L1111:
+.L1102:
 	cmp	r0, r1
-	bne	.L1112
+	bne	.L1103
 	mov	r0, r3
 	bx	lr
-.L1112:
+.L1103:
 	lsr	r2, r3, #2
 	ldrb	ip, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsl #5
 	add	r2, r2, ip
 	eor	r3, r3, r2
-	b	.L1111
-.L1114:
+	b	.L1102
+.L1105:
 	.align	2
-.L1113:
+.L1104:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -7381,15 +7291,15 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L1116
+	bne	.L1107
 	ldrh	r3, [r0, #8]
 	cmp	r3, #0
-	beq	.L1117
+	beq	.L1108
 	movw	r2, #641
-	ldr	r1, .L1126
-	ldr	r0, .L1126+4
+	ldr	r1, .L1117
+	ldr	r0, .L1117+4
 	bl	sftl_printk
-.L1117:
+.L1108:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -7401,16 +7311,16 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	add	r3, r3, #1
 	str	r3, [r4, #28]
-.L1118:
+.L1109:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1116:
+.L1107:
 	lsl	r3, r3, #1
 	ldr	r7, [r0, #24]
 	mov	r1, #255
 	ldrh	r8, [r5, r3]
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1126+8
+	ldr	r5, .L1117+8
 	orr	r3, r3, r8, lsl #10
 	ldr	r6, [r5, #3336]
 	str	r3, [r5, #3460]
@@ -7419,24 +7329,24 @@ Ftl_write_map_blk_to_last_page:
 	str	r3, [r5, #3464]
 	ldr	r3, [r0, #28]
 	str	r3, [r6, #4]
-	ldr	r3, .L1126+12
+	ldr	r3, .L1117+12
 	strh	r3, [r6, #8]	@ movhi
 	ldrh	r3, [r0, #4]
 	strh	r8, [r6, #2]	@ movhi
 	strh	r3, [r6]	@ movhi
-	add	r3, r5, #308
+	add	r3, r5, #304
 	ldrh	r2, [r3]
 	ldr	r0, [r5, #3304]
 	lsl	r2, r2, #3
 	bl	ftl_memset
 	mov	r2, #0
 	mov	r3, r2
-.L1119:
+.L1110:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L1121
-	movw	r3, #314
+	bhi	.L1112
+	movw	r3, #310
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r5, r3]
 	bl	js_hash
@@ -7444,19 +7354,19 @@ Ftl_write_map_blk_to_last_page:
 	str	r0, [r6, #12]
 	mov	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1126+16
+	ldr	r0, .L1117+16
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L1118
-.L1121:
+	b	.L1109
+.L1112:
 	uxth	r1, r2
 	ldr	r0, [r7, r1, lsl #2]
 	cmp	r8, r0, lsr #10
-	bne	.L1120
+	bne	.L1111
 	ldr	r0, [r5, #3304]
 	add	r3, r3, #1
 	uxth	r3, r3
@@ -7465,12 +7375,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r1, [r5, #3304]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L1120:
+.L1111:
 	add	r2, r2, #1
-	b	.L1119
-.L1127:
+	b	.L1110
+.L1118:
 	.align	2
-.L1126:
+.L1117:
 	.word	.LANCHOR1+332
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7492,13 +7402,13 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r4, r0
-	ldr	r5, .L1147
+	ldr	r5, .L1138
 	mov	r7, r1
 	mov	r9, r2
 	mov	r6, #0
-	add	r8, r5, #308
+	add	r8, r5, #304
 	mov	r10, r8
-.L1129:
+.L1120:
 	ldr	r3, [r5, #2576]
 	add	r3, r3, #1
 	str	r3, [r5, #2576]
@@ -7506,35 +7416,35 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1130
+	bge	.L1121
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1131
-.L1130:
+	bne	.L1122
+.L1121:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1131:
+.L1122:
 	ldrh	r3, [r4]
 	ldr	r2, [r4, #12]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L1132
+	bne	.L1123
 	mov	r2, #700
-	ldr	r1, .L1147+4
-	ldr	r0, .L1147+8
+	ldr	r1, .L1138+4
+	ldr	r0, .L1138+8
 	bl	sftl_printk
-.L1132:
+.L1123:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L1133
+	bcc	.L1124
 	movw	r2, #701
-	ldr	r1, .L1147+4
-	ldr	r0, .L1147+8
+	ldr	r1, .L1138+4
+	ldr	r0, .L1138+8
 	bl	sftl_printk
-.L1133:
+.L1124:
 	ldrh	r3, [r4]
 	mov	r1, #0
 	ldr	r2, [r4, #12]
@@ -7556,7 +7466,7 @@ FtlMapWritePage:
 	strh	r7, [fp, #8]	@ movhi
 	ldrh	r2, [r4, #4]
 	strh	r3, [fp, #2]	@ movhi
-	ldr	r3, .L1147+12
+	ldr	r3, .L1138+12
 	strh	r2, [fp]	@ movhi
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r3]
@@ -7565,7 +7475,7 @@ FtlMapWritePage:
 	str	r0, [fp, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1147+16
+	ldr	r0, .L1138+16
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
@@ -7573,10 +7483,10 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	bne	.L1134
+	bne	.L1125
 	ldr	r1, [r5, #3460]
 	add	r6, r6, #1
-	ldr	r0, .L1147+20
+	ldr	r0, .L1138+20
 	uxth	r6, r6
 	bl	sftl_printk
 	ldrh	r3, [r4, #2]
@@ -7585,44 +7495,44 @@ FtlMapWritePage:
 	subls	r3, r3, #1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1136
+	bls	.L1127
 	mov	r2, r6
 	ldr	r1, [r5, #3460]
-	ldr	r0, .L1147+24
+	ldr	r0, .L1138+24
 	bl	sftl_printk
-.L1137:
-	b	.L1137
-.L1136:
+.L1128:
+	b	.L1128
+.L1127:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1129
-.L1145:
-	b	.L1145
-.L1134:
+	beq	.L1120
+.L1136:
+	b	.L1136
+.L1125:
 	cmp	r3, #1
 	cmpne	r2, #256
-	beq	.L1140
+	beq	.L1131
 	ldr	r0, [r4, #36]
 	cmp	r0, #0
-	beq	.L1141
-.L1140:
+	beq	.L1132
+.L1131:
 	mov	r3, #0
 	str	r3, [r4, #36]
-	b	.L1129
-.L1141:
+	b	.L1120
+.L1132:
 	ldr	r2, [r5, #3460]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r7, lsl #2]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1148:
+.L1139:
 	.align	2
-.L1147:
+.L1138:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+363
 	.word	.LC8
-	.word	.LANCHOR0+314
+	.word	.LANCHOR0+310
 	.word	.LANCHOR0+3456
 	.word	.LC104
 	.word	.LC105
@@ -7641,42 +7551,42 @@ load_l2p_region:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r6, r0
-	ldr	r9, .L1157
+	ldr	r9, .L1148
 	mov	r10, r1
 	ldrh	r3, [r9]
 	cmp	r3, r0
-	bcs	.L1150
+	bcs	.L1141
 	movw	r2, #485
-	ldr	r1, .L1157+4
-	ldr	r0, .L1157+8
+	ldr	r1, .L1148+4
+	ldr	r0, .L1148+8
 	bl	sftl_printk
-.L1150:
-	ldr	r7, .L1157+12
+.L1141:
+	ldr	r7, .L1148+12
 	mov	r5, #12
 	ldr	r3, [r7, #3380]
 	mov	r4, r7
 	ldr	r8, [r3, r6, lsl #2]
 	cmp	r8, #0
-	bne	.L1151
+	bne	.L1142
 	mul	r5, r5, r10
-	ldr	r3, [r7, #2544]
-	movw	r2, #314
+	ldr	r3, [r7, #2540]
+	movw	r2, #310
 	mov	r1, #255
 	ldrh	r2, [r7, r2]
 	add	r3, r3, r5
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	ldr	r3, [r7, #2544]
+	ldr	r3, [r7, #2540]
 	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r7, #2544]
+	ldr	r3, [r7, #2540]
 	add	r5, r3, r5
 	str	r8, [r5, #4]
-.L1152:
+.L1143:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1151:
+.L1142:
 	mul	r5, r5, r10
-	ldr	r3, [r7, #2544]
+	ldr	r3, [r7, #2540]
 	mov	r2, #1
 	add	r0, r7, #3456
 	mov	r1, r2
@@ -7690,55 +7600,55 @@ load_l2p_region:
 	ldr	r7, [r7, #3468]
 	ldrh	r3, [r7, #8]
 	cmp	r3, r6
-	beq	.L1153
+	beq	.L1144
 	mov	r2, r8
 	mov	r1, r6
-	ldr	r0, .L1157+16
+	ldr	r0, .L1148+16
 	bl	sftl_printk
 	mov	r3, #4
 	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	ldr	r0, .L1157+20
+	ldr	r0, .L1148+20
 	bl	rknand_print_hex
 	ldrh	r3, [r9]
 	mov	r2, #4
 	ldr	r1, [r4, #3380]
-	ldr	r0, .L1157+24
+	ldr	r0, .L1148+24
 	bl	rknand_print_hex
-.L1154:
+.L1145:
 	ldrh	r3, [r7, #8]
 	cmp	r3, r6
-	beq	.L1155
+	beq	.L1146
 	mov	r2, #508
-	ldr	r1, .L1157+4
-	ldr	r0, .L1157+8
+	ldr	r1, .L1148+4
+	ldr	r0, .L1148+8
 	bl	sftl_printk
-.L1155:
-	ldr	r3, [r4, #2544]
+.L1146:
+	ldr	r3, [r4, #2540]
 	mov	r1, #0
 	add	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L1152
-.L1153:
+	b	.L1143
+.L1144:
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	bne	.L1154
+	bne	.L1145
 	mov	r2, r8
 	mov	r1, r6
-	ldr	r0, .L1157+28
+	ldr	r0, .L1148+28
 	bl	sftl_printk
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	mov	r1, r6
-	ldr	r0, .L1157+32
+	ldr	r0, .L1148+32
 	add	r3, r3, r5
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	b	.L1154
-.L1158:
+	b	.L1145
+.L1149:
 	.align	2
-.L1157:
-	.word	.LANCHOR0+340
+.L1148:
+	.word	.LANCHOR0+336
 	.word	.LANCHOR1+379
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7770,15 +7680,15 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #8]
 	sub	r3, r3, #5
 	cmp	r2, r3
-	blt	.L1160
+	blt	.L1151
 	uxth	r0, r0
 	lsl	r0, r0, #1
 	ldrh	r9, [r5, r0]
 	cmp	r9, #0
-	beq	.L1160
+	beq	.L1151
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L1160
+	bne	.L1151
 	mov	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r5, r0]	@ movhi
@@ -7786,48 +7696,48 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1176
+	ldr	r3, .L1167
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bcc	.L1161
+	bcc	.L1152
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1161:
-	ldr	r5, .L1176+4
+.L1152:
+	ldr	r5, .L1167+4
 	mov	r6, #0
-.L1162:
+.L1153:
 	ldrh	r2, [r4, #6]
 	uxth	fp, r6
 	cmp	r2, fp
-	bhi	.L1169
+	bhi	.L1160
 	mov	r1, #1
 	mov	r0, r9
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L1160:
-	ldr	r3, .L1176
+.L1151:
+	ldr	r3, .L1167
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bcc	.L1170
+	bcc	.L1161
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1170:
+.L1161:
 	mov	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1169:
+.L1160:
 	uxth	r7, r6
 	ldr	r2, [r10, r7, lsl #2]
 	add	r3, r10, r7, lsl #2
 	str	r3, [sp, #4]
 	cmp	r9, r2, lsr #10
-	bne	.L1163
+	bne	.L1154
 	ldr	r2, [r5, #3308]
 	ldr	r8, [r5, #3336]
-	ldr	r0, .L1176+8
+	ldr	r0, .L1167+8
 	str	r2, [r5, #3464]
 	str	r8, [r5, #3468]
 	ldr	r2, [r10, r7, lsl #2]
@@ -7837,40 +7747,40 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	beq	.L1164
+	beq	.L1155
 	movw	r2, #611
-	ldr	r1, .L1176+12
-	ldr	r0, .L1176+16
+	ldr	r1, .L1167+12
+	ldr	r0, .L1167+16
 	bl	sftl_printk
-.L1164:
+.L1155:
 	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	bne	.L1165
-.L1167:
+	bne	.L1156
+.L1158:
 	ldr	r2, [sp, #4]
 	mov	r3, #0
 	str	r3, [r2]
-.L1166:
-	b	.L1166
-.L1165:
+.L1157:
+	b	.L1157
+.L1156:
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	bne	.L1167
+	bne	.L1158
 	ldrh	r2, [r8]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1167
+	bne	.L1158
 	ldr	r2, [r5, #3464]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L1163:
+.L1154:
 	add	r6, r6, #1
-	b	.L1162
-.L1177:
+	b	.L1153
+.L1168:
 	.align	2
-.L1176:
-	.word	.LANCHOR0+308
+.L1167:
+	.word	.LANCHOR0+304
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+395
@@ -7890,25 +7800,25 @@ flush_l2p_region:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r4, #12
-	ldr	r5, .L1180
+	ldr	r5, .L1171
 	mul	r4, r4, r0
-	ldr	r3, [r5, #2544]
+	ldr	r3, [r5, #2540]
 	add	r0, r5, #3392
 	add	r0, r0, #4
 	add	r2, r3, r4
 	ldrh	r1, [r3, r4]
 	ldr	r2, [r2, #8]
 	bl	FtlMapWritePage
-	ldr	r3, [r5, #2544]
+	ldr	r3, [r5, #2540]
 	mov	r0, #0
 	add	r4, r3, r4
 	ldr	r3, [r4, #4]
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r4, r5, r6, pc}
-.L1181:
+.L1172:
 	.align	2
-.L1180:
+.L1171:
 	.word	.LANCHOR0
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -7925,77 +7835,77 @@ log2phys:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	fp, r0
-	ldr	r4, .L1196
+	ldr	r4, .L1187
 	mov	r6, r1
 	mov	r10, r2
-	add	r3, r4, #312
+	add	r3, r4, #308
 	ldrh	r9, [r3]
 	ldr	r3, [r4, #2556]
 	cmp	r0, r3
-	bcc	.L1183
+	bcc	.L1174
 	movw	r2, #813
-	ldr	r1, .L1196+4
-	ldr	r0, .L1196+8
+	ldr	r1, .L1187+4
+	ldr	r0, .L1187+8
 	bl	sftl_printk
-.L1183:
+.L1174:
 	ldr	r3, [r4, #2556]
 	cmp	fp, r3
-	bcs	.L1184
+	bcs	.L1175
 	add	r9, r9, #7
-	ldr	r1, [r4, #2544]
+	ldr	r1, [r4, #2540]
 	lsr	r7, fp, r9
-	movw	r3, #342
+	movw	r3, #338
 	ldrh	r2, [r4, r3]
 	mov	r8, #12
 	uxth	r7, r7
 	mov	r3, #0
-.L1185:
+.L1176:
 	uxth	r5, r3
 	cmp	r5, r2
-	bcc	.L1190
+	bcc	.L1181
 	bl	select_l2p_ram_region
 	mul	r8, r8, r0
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	mov	r5, r0
 	ldrh	r1, [r3, r8]
 	add	r2, r3, r8
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1191
+	beq	.L1182
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L1191
+	bge	.L1182
 	bl	flush_l2p_region
-.L1191:
+.L1182:
 	mov	r1, r5
 	mov	r0, r7
 	bl	load_l2p_region
-	b	.L1187
-.L1184:
+	b	.L1178
+.L1175:
 	mvn	r0, #0
 	cmp	r10, #0
 	streq	r0, [r6]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1190:
+.L1181:
 	add	r3, r3, #1
 	mla	r0, r8, r3, r1
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r7
-	bne	.L1185
-.L1187:
+	bne	.L1176
+.L1178:
 	mvn	r0, #0
 	cmp	r10, #0
 	bic	r0, fp, r0, lsl r9
 	mov	r3, #12
 	uxth	r0, r0
-	bne	.L1188
-	ldr	r2, [r4, #2544]
+	bne	.L1179
+	ldr	r2, [r4, #2540]
 	mla	r3, r3, r5, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r0, lsl #2]
 	str	r3, [r6]
-.L1189:
-	ldr	r2, [r4, #2544]
+.L1180:
+	ldr	r2, [r4, #2540]
 	mov	r3, #12
 	mov	r0, #0
 	mla	r5, r3, r5, r2
@@ -8004,27 +7914,28 @@ log2phys:
 	addne	r3, r3, #1
 	strne	r3, [r5, #4]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1188:
+.L1179:
 	mul	r3, r3, r5
-	ldr	r2, [r4, #2544]
+	ldr	r2, [r4, #2540]
 	ldr	r1, [r6]
 	add	r2, r2, r3
 	ldr	r2, [r2, #8]
 	str	r1, [r2, r0, lsl #2]
-	ldr	r2, [r4, #2544]
+	ldr	r2, [r4, #2540]
 	add	r3, r2, r3
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	movw	r3, #2548
-	strh	r7, [r4, r3]	@ movhi
-	b	.L1189
-.L1197:
+	ldr	r3, .L1187+12
+	strh	r7, [r3]	@ movhi
+	b	.L1180
+.L1188:
 	.align	2
-.L1196:
+.L1187:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+410
 	.word	.LC8
+	.word	.LANCHOR0+2544
 	.fnend
 	.size	log2phys, .-log2phys
 	.align	2
@@ -8041,29 +7952,29 @@ FtlWriteDump_data:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #36
 	sub	sp, sp, #36
-	ldr	r4, .L1218
-	ldr	r7, .L1218+4
-	ldrh	r2, [r4, #32]
+	ldr	r4, .L1209
+	ldr	r7, .L1209+4
+	ldrh	r2, [r4, #28]
 	ldr	r3, [r7]
 	cmp	r2, #0
 	str	r3, [sp, #28]
-	beq	.L1199
-	ldrb	r3, [r4, #36]	@ zero_extendqisi2
+	beq	.L1190
+	ldrb	r3, [r4, #32]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1199
-	movw	r3, #306
-	ldrb	r1, [r4, #35]	@ zero_extendqisi2
+	bne	.L1190
+	movw	r3, #302
+	ldrb	r1, [r4, #31]	@ zero_extendqisi2
 	ldrh	r3, [r4, r3]
 	mul	r3, r3, r1
 	cmp	r2, r3
-	beq	.L1199
-	ldrb	r8, [r4, #38]	@ zero_extendqisi2
+	beq	.L1190
+	ldrb	r8, [r4, #34]	@ zero_extendqisi2
 	cmp	r8, #0
-	bne	.L1198
+	bne	.L1189
 	ldr	r6, [r4, #2556]
 	mov	r2, r8
 	add	r1, sp, #4
-	ldrh	r9, [r4, #236]
+	ldrh	r9, [r4, #232]
 	sub	r6, r6, #1
 	mov	r0, r6
 	bl	log2phys
@@ -8076,47 +7987,47 @@ FtlWriteDump_data:
 	str	r0, [sp, #16]
 	str	r5, [sp, #20]
 	str	r8, [r5, #4]
-	beq	.L1201
+	beq	.L1192
 	mov	r2, r8
 	mov	r1, #1
 	add	r0, sp, #8
 	bl	FlashReadPages
-.L1202:
-	ldr	r10, .L1218+8
+.L1193:
+	ldr	r10, .L1209+8
 	mov	r8, #0
-	ldr	r3, .L1218+12
+	ldr	r3, .L1209+12
 	lsl	r9, r9, #2
 	mov	fp, r8
 	strh	r3, [r5]	@ movhi
-.L1203:
+.L1194:
 	cmp	r9, r8
-	bne	.L1207
-.L1204:
+	bne	.L1198
+.L1195:
 	mov	r3, #1
-.L1217:
-	strb	r3, [r4, #38]
-.L1198:
+.L1208:
+	strb	r3, [r4, #34]
+.L1189:
 	ldr	r2, [sp, #28]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1209
+	beq	.L1200
 	bl	__stack_chk_fail
-.L1201:
-	movw	r3, #314
+.L1192:
+	movw	r3, #310
 	mov	r1, #255
 	ldrh	r2, [r4, r3]
 	bl	ftl_memset
-	b	.L1202
-.L1207:
-	ldrh	r3, [r4, #32]
+	b	.L1193
+.L1198:
+	ldrh	r3, [r4, #28]
 	cmp	r3, #0
-	beq	.L1204
+	beq	.L1195
 	ldr	r3, [sp, #12]
 	mov	r0, r10
 	str	r6, [r5, #8]
 	add	r8, r8, #1
 	str	r3, [r5, #12]
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	strh	r3, [r5, #2]	@ movhi
 	bl	get_new_active_ppa
 	ldr	r3, [r4, #2596]
@@ -8131,22 +8042,22 @@ FtlWriteDump_data:
 	mov	r3, #0
 	mov	r2, r3
 	bl	FlashProgPages
-	ldrh	r0, [r4, #28]
+	ldrh	r0, [r4, #24]
 	bl	decrement_vpc_count
-	b	.L1203
-.L1199:
+	b	.L1194
+.L1190:
 	mov	r3, #0
-	b	.L1217
-.L1209:
+	b	.L1208
+.L1200:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1219:
+.L1210:
 	.align	2
-.L1218:
+.L1209:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
-	.word	.LANCHOR0+28
+	.word	.LANCHOR0+24
 	.word	-3947
 	.fnend
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
@@ -8164,62 +8075,62 @@ FtlReUsePrevPpa:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r7, r0
-	ldr	r5, .L1231
+	ldr	r5, .L1222
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	lsl	r6, r0, #1
 	ldrh	r3, [r2, r6]
 	cmp	r3, #0
-	bne	.L1221
-	ldr	r4, [r5, #2536]
+	bne	.L1212
+	ldr	r4, [r5, #2532]
 	cmp	r4, #0
-	beq	.L1222
-	ldr	r1, [r5, #2520]
+	beq	.L1213
+	ldr	r1, [r5, #2516]
 	mov	lr, #6
-	ldr	r2, .L1231+4
+	ldr	r2, .L1222+4
 	movw	r8, #65535
-	ldrh	ip, [r5, #228]
+	ldrh	ip, [r5, #224]
 	sub	r4, r4, r1
 	asr	r4, r4, #1
 	mul	r4, r2, r4
 	uxth	r4, r4
-.L1223:
+.L1214:
 	uxth	r2, r3
 	cmp	ip, r2
-	bls	.L1222
+	bls	.L1213
 	cmp	r4, r0
-	bne	.L1224
+	bne	.L1215
 	mov	r1, r4
-	ldr	r0, .L1231+8
+	ldr	r0, .L1222+8
 	bl	List_remove_node
-	ldrh	r3, [r5, #228]
+	ldrh	r3, [r5, #224]
 	cmp	r3, #0
-	bne	.L1225
-	movw	r2, #1733
-	ldr	r1, .L1231+12
-	ldr	r0, .L1231+16
+	bne	.L1216
+	movw	r2, #1735
+	ldr	r1, .L1222+12
+	ldr	r0, .L1222+16
 	bl	sftl_printk
-.L1225:
-	ldrh	r3, [r5, #228]
+.L1216:
+	ldrh	r3, [r5, #224]
 	mov	r0, r4
 	sub	r3, r3, #1
-	strh	r3, [r5, #228]	@ movhi
+	strh	r3, [r5, #224]	@ movhi
 	bl	INSERT_DATA_LIST
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	ldrh	r3, [r2, r6]
-.L1221:
+.L1212:
 	add	r3, r3, #1
 	strh	r3, [r2, r6]	@ movhi
-	b	.L1222
-.L1224:
+	b	.L1213
+.L1215:
 	mul	r4, lr, r4
 	add	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, r8
-	bne	.L1223
-.L1222:
+	bne	.L1214
+.L1213:
 	mov	r2, #1
 	add	r1, sp, #4
 	mov	r0, r7
@@ -8227,12 +8138,12 @@ FtlReUsePrevPpa:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1232:
+.L1223:
 	.align	2
-.L1231:
+.L1222:
 	.word	.LANCHOR0
 	.word	-1431655765
-	.word	.LANCHOR0+2536
+	.word	.LANCHOR0+2532
 	.word	.LANCHOR1+419
 	.word	.LC8
 	.fnend
@@ -8247,7 +8158,7 @@ FtlRecoverySuperblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1367
+	ldr	r3, .L1358
 	movw	r2, #65535
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -8257,46 +8168,46 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #44]
 	ldrh	r3, [r0]
 	cmp	r3, r2
-	beq	.L1235
+	beq	.L1226
 	ldrh	r3, [r0, #2]
 	mov	fp, r0
-	ldr	r4, .L1367+4
+	ldr	r4, .L1358+4
 	str	r3, [sp, #12]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp, #12]
 	str	r3, [sp, #28]
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r3, [r4, r3]
 	cmp	r3, r1
 	mov	r3, #0
 	strheq	r3, [r0, #4]	@ movhi
 	ldrhne	r0, [r0, #16]
-	bne	.L1237
-.L1365:
+	bne	.L1228
+.L1356:
 	strb	r3, [fp, #6]
-.L1235:
-	ldr	r3, .L1367
+.L1226:
+	ldr	r3, .L1358
 	mov	r0, #0
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1303
+	beq	.L1294
 	bl	__stack_chk_fail
-.L1238:
+.L1229:
 	uxth	r1, r3
 	add	r1, fp, r1, lsl #1
 	ldrh	r0, [r1, #16]
-.L1237:
+.L1228:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1238
+	beq	.L1229
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r5, r0
-	beq	.L1239
-	ldrh	r3, [r4, #236]
+	beq	.L1230
+	ldrh	r3, [r4, #232]
 	mov	r2, #0
 	ldr	r0, [r4, #3292]
 	mov	r6, r2
@@ -8305,20 +8216,20 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #4]
 	ldr	r3, [r4, #3180]
 	str	r3, [sp, #8]
-	movw	r3, #314
+	movw	r3, #310
 	ldrh	lr, [r4, r3]
-	ldr	r3, .L1367+8
+	ldr	r3, .L1358+8
 	ldr	r4, [r4, #3184]
 	ldrh	r7, [r3]
 	add	r3, fp, #16
 	mov	ip, r3
 	str	r3, [sp, #24]
-.L1240:
+.L1231:
 	ldr	r1, [sp, #4]
 	uxth	r3, r2
 	cmp	r3, r1
-	bcc	.L1244
-	ldr	r4, .L1367+4
+	bcc	.L1235
+	ldr	r4, .L1358+4
 	mov	r2, #0
 	mov	r1, r6
 	movw	r9, #65535
@@ -8331,19 +8242,19 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #4]
 	mov	r7, r8
 	mov	r3, #0
-.L1245:
+.L1236:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1250
+	bhi	.L1241
 	addeq	r3, r5, #1
 	uxtheq	r3, r3
 	streq	r3, [sp, #8]
-	bne	.L1248
-.L1360:
+	bne	.L1239
+.L1351:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
-	movw	r3, #306
+	movw	r3, #302
 	ldr	r2, [sp, #8]
 	ldrh	r3, [r4, r3]
 	str	r0, [sp, #16]
@@ -8361,18 +8272,18 @@ FtlRecoverySuperblock:
 	cmpeq	r1, r0
 	moveq	r2, r1
 	moveq	r1, r3
-	beq	.L1366
+	beq	.L1357
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1254
+	bne	.L1245
 	ldrb	r3, [fp, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1255
-.L1254:
+	bne	.L1246
+.L1245:
 	ldr	r3, [r4, #3452]
 	uxth	r8, r5
 	uxth	r5, r5
-	ldr	r7, .L1367+4
+	ldr	r7, .L1358+4
 	movw	r9, #65535
 	cmn	r3, #1
 	ldreq	r3, [sp, #4]
@@ -8383,41 +8294,41 @@ FtlRecoverySuperblock:
 	subgt	r5, r8, #7
 	ldrle	r5, [sp, #12]
 	uxthgt	r5, r5
-.L1258:
+.L1249:
 	cmp	r5, r8
-	bhi	.L1265
+	bhi	.L1256
 	mov	r3, #0
-	ldrh	lr, [r7, #236]
+	ldrh	lr, [r7, #232]
 	ldr	r0, [r7, #3292]
 	mov	r6, r3
 	ldr	r1, [sp, #24]
 	mov	ip, #20
-	b	.L1266
-.L1239:
+	b	.L1257
+.L1230:
 	ldr	r3, [sp, #12]
 	cmp	r3, #0
-	beq	.L1241
-	movw	r2, #1800
-	ldr	r1, .L1367+12
-	ldr	r0, .L1367+16
+	beq	.L1232
+	movw	r2, #1802
+	ldr	r1, .L1358+12
+	ldr	r0, .L1358+16
 	bl	sftl_printk
-.L1241:
+.L1232:
 	ldr	r3, [sp, #28]
 	cmp	r3, #0
 	cmpne	r6, r3
-	beq	.L1242
-	movw	r2, #1801
-	ldr	r1, .L1367+12
-	ldr	r0, .L1367+16
+	beq	.L1233
+	movw	r2, #1803
+	ldr	r1, .L1358+12
+	ldr	r0, .L1358+16
 	bl	sftl_printk
-.L1242:
+.L1233:
 	mov	r3, #0
 	strh	r3, [fp, #2]	@ movhi
-	b	.L1365
-.L1244:
+	b	.L1356
+.L1235:
 	ldrh	r3, [ip], #2
 	cmp	r3, r8
-	beq	.L1243
+	beq	.L1234
 	mla	r1, r9, r6, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8438,41 +8349,41 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, r4, r3
 	str	r3, [r1, #12]
-.L1243:
+.L1234:
 	add	r2, r2, #1
-	b	.L1240
-.L1250:
+	b	.L1231
+.L1241:
 	ldr	r2, [r7]
 	cmp	r2, #0
-	bne	.L1246
+	bne	.L1237
 	ldr	r10, [r7, #12]
 	ldr	r2, [r10, #4]
 	cmn	r2, #1
-	beq	.L1247
+	beq	.L1238
 	ldr	r1, [r4, #2596]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
 	addne	r2, r2, #1
 	strne	r2, [r4, #2596]
-.L1247:
+.L1238:
 	ldr	r2, [r10]
 	cmn	r2, #1
-	bne	.L1249
-.L1248:
+	bne	.L1240
+.L1239:
 	uxth	r2, r5
 	uxth	r3, r3
 	str	r2, [sp, #8]
 	mov	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1360
-.L1246:
+	b	.L1351
+.L1237:
 	ldr	r9, [sp, #8]
-.L1249:
+.L1240:
 	add	r3, r3, #1
 	add	r7, r7, #20
-	b	.L1245
-.L1260:
+	b	.L1236
+.L1251:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, r9
@@ -8481,89 +8392,89 @@ FtlRecoverySuperblock:
 	orrne	r2, r5, r2, lsl #10
 	uxthne	r6, r6
 	strne	r2, [r10, #4]
-.L1266:
+.L1257:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L1260
+	bhi	.L1251
 	mov	r2, #0
 	mov	r1, r6
 	bl	FlashReadPages
 	ldr	r3, [r7, #3292]
 	mov	r2, #20
 	mla	r6, r2, r6, r3
-.L1261:
+.L1252:
 	cmp	r6, r3
 	addeq	r5, r5, #1
 	uxtheq	r5, r5
-	beq	.L1258
-.L1264:
+	beq	.L1249
+.L1255:
 	ldr	r2, [r3]
 	cmp	r2, #0
-	bne	.L1255
+	bne	.L1246
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r9
-	beq	.L1263
+	beq	.L1254
 	ldr	r2, [r2, #4]
 	cmn	r2, #1
 	strne	r2, [r7, #3452]
-.L1263:
+.L1254:
 	add	r3, r3, #20
-	b	.L1261
-.L1265:
+	b	.L1252
+.L1256:
 	mvn	r3, #0
 	str	r3, [r7, #3452]
-.L1255:
+.L1246:
 	mov	r2, #1
 	movw	r3, #3476
 	strh	r2, [r4, r3]	@ movhi
 	ldr	r9, [sp, #12]
-	ldr	r4, .L1367+4
-.L1267:
-	ldrh	ip, [r4, #236]
+	ldr	r4, .L1358+4
+.L1258:
+	ldrh	ip, [r4, #232]
 	mov	r3, #0
 	ldr	r0, [r4, #3292]
 	mov	r10, r3
 	ldr	r1, [sp, #24]
 	movw	lr, #65535
 	mov	r5, #20
-.L1268:
+.L1259:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1270
+	bhi	.L1261
 	mov	r2, #0
 	mov	r1, r10
 	bl	FlashReadPages
 	mov	r3, #0
-.L1364:
+.L1355:
 	str	r3, [sp, #20]
 	ldrh	r3, [sp, #20]
 	cmp	r10, r3
-	bhi	.L1298
-	ldr	r3, .L1367+20
+	bhi	.L1289
+	ldr	r3, .L1358+20
 	add	r9, r9, #1
 	uxth	r9, r9
 	ldrh	r3, [r3]
 	cmp	r3, r9
-	bne	.L1267
-	ldrh	r2, [r4, #236]
+	bne	.L1258
+	ldrh	r2, [r4, #232]
 	movw	r0, #65535
 	mov	r3, #0
 	strh	r9, [fp, #2]	@ movhi
 	strh	r3, [fp, #4]	@ movhi
-.L1299:
+.L1290:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1235
+	bcs	.L1226
 	ldr	r1, [sp, #24]
 	ldrh	ip, [r1], #2
 	cmp	ip, r0
 	str	r1, [sp, #24]
 	add	r1, r3, #1
-	bne	.L1365
+	bne	.L1356
 	mov	r3, r1
-	b	.L1299
-.L1270:
+	b	.L1290
+.L1261:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8572,8 +8483,8 @@ FtlRecoverySuperblock:
 	addne	r10, r10, #1
 	uxthne	r10, r10
 	strne	r2, [r6, #4]
-	b	.L1268
-.L1298:
+	b	.L1259
+.L1289:
 	ldr	r3, [sp, #20]
 	mov	r6, #20
 	ldr	r8, [r4, #3292]
@@ -8585,7 +8496,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp, #12]
 	cmp	r9, r3
-	bcc	.L1272
+	bcc	.L1263
 	ldr	r2, [sp, #28]
 	moveq	r3, #1
 	movne	r3, #0
@@ -8593,25 +8504,25 @@ FtlRecoverySuperblock:
 	movls	r3, #0
 	andhi	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1272
+	bne	.L1263
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #16]
 	cmp	r9, r3
 	cmpeq	r2, r0
-	beq	.L1273
+	beq	.L1264
 	ldr	r3, [r8, r6]
 	cmn	r3, #1
-	beq	.L1274
+	beq	.L1265
 	ldr	r7, [r7, #12]
 	movw	r3, #61589
 	ldrh	r2, [r7]
 	cmp	r2, r3
 	ldrhne	r0, [fp]
-	bne	.L1361
+	bne	.L1352
 	ldr	r3, [r7, #4]
 	cmn	r3, #1
 	str	r3, [sp, #4]
-	beq	.L1276
+	beq	.L1267
 	mov	r0, r3
 	ldr	r1, [r4, #2596]
 	bl	ftl_cmp_data_ver
@@ -8619,16 +8530,16 @@ FtlRecoverySuperblock:
 	ldrne	r3, [sp, #4]
 	addne	r3, r3, #1
 	strne	r3, [r4, #2596]
-.L1276:
+.L1267:
 	ldrh	r2, [r7]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1277
-	mov	r2, #1952
-	ldr	r1, .L1367+12
-	ldr	r0, .L1367+16
+	beq	.L1268
+	movw	r2, #1954
+	ldr	r1, .L1358+12
+	ldr	r0, .L1358+16
 	bl	sftl_printk
-.L1277:
+.L1268:
 	ldr	r5, [r7, #8]
 	add	r1, sp, #36
 	ldr	r3, [r7, #12]
@@ -8638,14 +8549,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #3452]
 	cmn	r1, #1
-	beq	.L1278
+	beq	.L1269
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1278
+	beq	.L1269
 	ldr	r3, [sp, #32]
 	cmn	r3, #1
-	beq	.L1279
+	beq	.L1270
 	ldr	r0, [r4, #3292]
 	mov	r2, #0
 	mov	r1, #1
@@ -8657,132 +8568,132 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r6]
 	add	r3, r2, r6
 	cmn	r1, #1
-	bne	.L1280
-.L1281:
+	bne	.L1271
+.L1272:
 	mvn	r3, #0
 	str	r3, [sp, #32]
-.L1288:
+.L1279:
 	ldr	r7, [sp, #32]
 	cmn	r7, #1
-	beq	.L1272
-.L1302:
+	beq	.L1263
+.L1293:
 	ubfx	r0, r7, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #244]
+	ldrh	r3, [r4, #240]
 	mov	r5, r0
 	cmp	r3, r0
-	bhi	.L1294
-	movw	r2, #2057
-	ldr	r1, .L1367+12
-	ldr	r0, .L1367+16
+	bhi	.L1285
+	movw	r2, #2059
+	ldr	r1, .L1358+12
+	ldr	r0, .L1358+16
 	bl	sftl_printk
-.L1294:
-	ldr	r2, [r4, #76]
+.L1285:
+	ldr	r2, [r4, #72]
 	lsl	r3, r5, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1295
+	beq	.L1286
 	mov	r0, r5
-.L1361:
+.L1352:
 	bl	decrement_vpc_count
-	b	.L1272
-.L1279:
+	b	.L1263
+.L1270:
 	ldr	r3, [sp, #40]
 	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	bne	.L1272
+	bne	.L1263
 	mov	r2, #1
 	add	r1, sp, #32
 	mov	r0, r5
 	bl	log2phys
-.L1272:
+.L1263:
 	ldr	r3, [sp, #20]
 	add	r3, r3, #1
-	b	.L1364
-.L1280:
+	b	.L1355
+.L1271:
 	ldr	r1, [r7, #8]
 	cmp	r5, r1
-	bne	.L1281
+	bne	.L1272
 	ldr	r8, [r7, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r8
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1281
+	beq	.L1272
 	ldr	r1, [sp, #36]
 	ldr	r0, [sp, #40]
 	cmp	r1, r0
-	bne	.L1283
-.L1286:
+	bne	.L1274
+.L1277:
 	ldr	r1, [sp, #32]
 	mov	r0, r5
 	bl	FtlReUsePrevPpa
-	b	.L1281
-.L1283:
+	b	.L1272
+.L1274:
 	ldr	r0, [sp, #32]
 	cmp	r1, r0
-	beq	.L1281
+	beq	.L1272
 	cmn	r1, #1
 	streq	r1, [r2, r6]
-	beq	.L1285
+	beq	.L1276
 	str	r1, [r3, #4]
 	mov	r2, #0
 	mov	r1, #1
 	mov	r0, r3
 	ldr	r7, [r3, #12]
 	bl	FlashReadPages
-.L1285:
+.L1276:
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r6]
 	cmn	r3, #1
-	beq	.L1286
+	beq	.L1277
 	ldr	r3, [r7, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1286
+	beq	.L1277
 	mov	r1, r3
 	mov	r0, r8
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1281
-	b	.L1286
-.L1278:
+	beq	.L1272
+	b	.L1277
+.L1269:
 	ldr	r3, [sp, #40]
 	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	beq	.L1288
+	beq	.L1279
 	ldr	r1, [sp, #32]
 	cmn	r1, #1
-	beq	.L1290
-	ldr	r3, [r4, #252]
+	beq	.L1281
+	ldr	r3, [r4, #248]
 	cmp	r3, r1, lsr #10
-	ldrls	r0, .L1367+24
-	bls	.L1363
-.L1290:
+	ldrls	r0, .L1358+24
+	bls	.L1354
+.L1281:
 	mov	r2, #1
 	add	r1, sp, #40
 	mov	r0, r5
 	bl	log2phys
 	ldr	r7, [sp, #36]
 	cmn	r7, #1
-	beq	.L1288
+	beq	.L1279
 	ldr	r3, [sp, #32]
 	cmp	r7, r3
-	beq	.L1302
+	beq	.L1293
 	ubfx	r0, r7, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L1293
-	ldrh	r3, [r4, #80]
+	beq	.L1284
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L1293
-	ldrh	r3, [r4, #128]
+	beq	.L1284
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	bne	.L1288
-.L1293:
+	bne	.L1279
+.L1284:
 	ldr	r0, [r4, #3292]
 	mov	r2, #0
 	mov	r1, #1
@@ -8792,24 +8703,24 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L1288
+	beq	.L1279
 	ldr	r1, [r6, #4]
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1288
+	bne	.L1279
 	mov	r2, #1
 	add	r1, sp, #36
 	mov	r0, r5
 	bl	log2phys
-	b	.L1288
-.L1295:
-	ldr	r0, .L1367+28
+	b	.L1279
+.L1286:
+	ldr	r0, .L1358+28
 	mov	r1, r5
-.L1363:
+.L1354:
 	bl	sftl_printk
-	b	.L1272
-.L1274:
+	b	.L1263
+.L1265:
 	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	addls	r2, r4, r3, lsl #2
@@ -8821,38 +8732,38 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #3452]
 	cmn	r3, #1
 	ldreq	r3, [sp, #4]
-	beq	.L1362
+	beq	.L1353
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bcs	.L1272
+	bcs	.L1263
 	mov	r3, r2
-.L1362:
+.L1353:
 	str	r3, [r4, #3452]
-	b	.L1272
-.L1273:
+	b	.L1263
+.L1264:
 	ldrb	r3, [sp, #16]	@ zero_extendqisi2
 	ldr	r2, [sp, #16]
 	ldr	r1, [sp, #8]
 	strb	r3, [fp, #6]
 	ldrh	r3, [sp, #8]
 	strh	r3, [fp, #2]	@ movhi
-.L1366:
+.L1357:
 	mov	r0, fp
 	bl	ftl_sb_update_avl_pages
-	b	.L1235
-.L1303:
+	b	.L1226
+.L1294:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1368:
+.L1359:
 	.align	2
-.L1367:
+.L1358:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
-	.word	.LANCHOR0+316
+	.word	.LANCHOR0+312
 	.word	.LANCHOR1+435
 	.word	.LC8
-	.word	.LANCHOR0+306
+	.word	.LANCHOR0+302
 	.word	.LC109
 	.word	.LC110
 	.fnend
@@ -8871,129 +8782,129 @@ ftl_check_vpc:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r5, .L1395
+	ldr	r5, .L1386
 	mov	r4, #0
-	ldr	r6, .L1395+4
+	ldr	r6, .L1386+4
 	ldr	r3, [r5]
-	ldr	r1, .L1395+8
-	ldr	r0, .L1395+12
-	ldr	r7, .L1395+16
+	ldr	r1, .L1386+8
+	ldr	r0, .L1386+12
+	ldr	r7, .L1386+16
 	str	r3, [sp, #12]
 	bl	sftl_printk
 	mov	r2, #8192
 	mov	r1, #0
-	ldr	r0, .L1395+16
+	ldr	r0, .L1386+16
 	bl	ftl_memset
 	str	r5, [sp, #4]
 	mov	r5, r6
-.L1370:
+.L1361:
 	ldr	r3, [r6, #2556]
 	cmp	r4, r3
-	bcc	.L1372
-	ldr	r8, .L1395+16
+	bcc	.L1363
+	ldr	r8, .L1386+16
 	mov	r4, #0
-	ldr	r10, .L1395+20
+	ldr	r10, .L1386+20
 	mov	r6, r4
 	movw	r9, #65535
-.L1373:
-	ldrh	r2, [r5, #244]
+.L1364:
+	ldrh	r2, [r5, #240]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1375
-	ldr	r4, [r5, #2536]
+	bhi	.L1366
+	ldr	r4, [r5, #2532]
 	cmp	r4, #0
-	beq	.L1376
-	ldr	r3, [r5, #2520]
+	beq	.L1367
+	ldr	r3, [r5, #2516]
 	mov	r7, #0
-	ldrh	r8, [r5, #228]
+	ldrh	r8, [r5, #224]
 	mov	fp, #6
-	ldr	r9, .L1395+16
+	ldr	r9, .L1386+16
 	sub	r4, r4, r3
-	ldr	r3, .L1395+24
+	ldr	r3, .L1386+24
 	asr	r4, r4, #1
-	ldr	r10, .L1395+28
+	ldr	r10, .L1386+28
 	mul	r4, r3, r4
 	uxth	r4, r4
-.L1377:
+.L1368:
 	uxth	r3, r7
 	cmp	r8, r3
-	bls	.L1376
-	ldr	r2, [r5, #76]
+	bls	.L1367
+	ldr	r2, [r5, #72]
 	lsl	r3, r4, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L1378
+	beq	.L1369
 	mov	r6, #1
 	ldrh	r3, [r9, r3]
 	mov	r1, r4
 	mov	r0, r10
 	bl	sftl_printk
-.L1378:
+.L1369:
 	mul	r4, fp, r4
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	add	r7, r7, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L1377
-.L1376:
+	bne	.L1368
+.L1367:
 	cmp	r6, #0
-	beq	.L1369
-	movw	r2, #2383
-	ldr	r1, .L1395+8
-	ldr	r0, .L1395+32
+	beq	.L1360
+	movw	r2, #2387
+	ldr	r1, .L1386+8
+	ldr	r0, .L1386+32
 	bl	sftl_printk
-.L1369:
+.L1360:
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1381
+	beq	.L1372
 	bl	__stack_chk_fail
-.L1372:
+.L1363:
 	mov	r2, #0
 	add	r1, sp, #8
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [sp, #8]
 	cmn	r0, #1
-	beq	.L1371
+	beq	.L1362
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	lsl	r0, r0, #1
 	ldrh	r3, [r7, r0]
 	add	r3, r3, #1
 	strh	r3, [r7, r0]	@ movhi
-.L1371:
+.L1362:
 	add	r4, r4, #1
-	b	.L1370
-.L1375:
+	b	.L1361
+.L1366:
 	uxth	r1, r4
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	lsl	r7, r1, #1
 	ldrh	r2, [r3, r7]
 	ldrh	r3, [r8, r7]
 	cmp	r2, r3
-	beq	.L1374
+	beq	.L1365
 	mov	r0, r10
 	bl	sftl_printk
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	ldrh	r3, [r3, r7]
 	cmp	r3, r9
-	beq	.L1374
+	beq	.L1365
 	ldrh	r2, [r8, r7]
 	cmp	r2, r3
 	movhi	r6, #1
-.L1374:
+.L1365:
 	add	r4, r4, #1
-	b	.L1373
-.L1381:
+	b	.L1364
+.L1372:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1396:
+.L1387:
 	.align	2
-.L1395:
+.L1386:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+457
@@ -9018,48 +8929,48 @@ ftl_scan_all_data:
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, #0
-	ldr	r6, .L1407
+	ldr	r6, .L1398
 	.pad #36
 	sub	sp, sp, #36
 	mov	r1, #0
-	ldr	r7, .L1407+4
-	ldr	r9, .L1407+8
+	ldr	r7, .L1398+4
+	ldr	r9, .L1398+8
 	ldr	r3, [r6]
 	mov	r4, r7
-	ldr	r0, .L1407+12
+	ldr	r0, .L1398+12
 	str	r3, [sp, #28]
 	bl	sftl_printk
-.L1398:
+.L1389:
 	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	bcc	.L1404
+	bcc	.L1395
 	ldr	r2, [sp, #28]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1405
+	beq	.L1396
 	bl	__stack_chk_fail
-.L1404:
+.L1395:
 	mov	r2, #0
 	add	r1, sp, #24
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
 	cmp	r3, #0
-	bne	.L1399
+	bne	.L1390
 	ldr	r2, [sp, #24]
 	mov	r1, r5
 	mov	r0, r9
 	bl	sftl_printk
-.L1399:
+.L1390:
 	ldr	r3, [sp, #24]
 	cmn	r3, #1
-	beq	.L1401
+	beq	.L1392
 	str	r3, [r4, #3460]
 	mov	r2, #0
 	ldr	r3, [r4, #3304]
 	mov	r1, #1
 	ldr	r8, [r4, #3336]
-	ldr	r0, .L1407+16
+	ldr	r0, .L1398+16
 	str	r3, [r4, #3464]
 	str	r5, [r4, #3472]
 	str	r8, [r4, #3468]
@@ -9068,14 +8979,14 @@ ftl_scan_all_data:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	cmpne	r3, #256
-	beq	.L1402
+	beq	.L1393
 	ldr	r3, [r8, #8]
 	cmp	r5, r3
-	beq	.L1401
-.L1402:
+	beq	.L1392
+.L1393:
 	ldr	r2, [r4, #3464]
 	ldr	r3, [r4, #3468]
-	ldr	r0, .L1407+20
+	ldr	r0, .L1398+20
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -9090,16 +9001,16 @@ ftl_scan_all_data:
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1401:
+.L1392:
 	add	r5, r5, #1
-	b	.L1398
-.L1405:
+	b	.L1389
+.L1396:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1408:
+.L1399:
 	.align	2
-.L1407:
+.L1398:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC115
@@ -9118,7 +9029,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1443
+	ldr	r3, .L1434
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #60
@@ -9127,38 +9038,38 @@ FtlGcScanTempBlk:
 	str	r1, [sp, #12]
 	ldr	r3, [r3]
 	str	r3, [sp, #52]
-	ldr	r3, .L1443+4
+	ldr	r3, .L1434+4
 	ldrh	r5, [r3, #4]
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1435
+	beq	.L1426
 	cmp	r5, #0
-	bne	.L1410
-.L1411:
+	bne	.L1401
+.L1402:
 	bl	FtlGcPageVarInit
-	b	.L1412
-.L1435:
+	b	.L1403
+.L1426:
 	mov	r5, #0
-.L1410:
-	ldr	r2, .L1443+8
-	movw	r3, #306
+.L1401:
+	ldr	r2, .L1434+8
+	movw	r3, #302
 	ldrh	r3, [r2, r3]
 	ldr	r2, [sp, #12]
 	cmp	r3, r2
-	beq	.L1411
-.L1412:
-	ldr	r6, .L1443+8
+	beq	.L1402
+.L1403:
+	ldr	r6, .L1434+8
 	mov	r3, #0
 	str	r3, [sp, #4]
-.L1428:
+.L1419:
 	ldrh	r2, [r4]
 	mov	r3, #0
 	strb	r3, [r4, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1413
-.L1431:
-	ldrh	r3, [r6, #236]
+	beq	.L1404
+.L1422:
+	ldrh	r3, [r6, #232]
 	mov	r2, #0
 	ldr	r0, [r6, #3292]
 	add	ip, r4, #16
@@ -9169,24 +9080,24 @@ FtlGcScanTempBlk:
 	ldr	r3, [r6, #3180]
 	mov	r9, #20
 	str	r3, [sp, #16]
-	ldr	r3, .L1443+12
+	ldr	r3, .L1434+12
 	ldrh	r3, [r3]
 	str	r3, [sp, #20]
-	ldr	r3, .L1443+16
+	ldr	r3, .L1434+16
 	ldrh	lr, [r3]
-.L1414:
+.L1405:
 	ldr	r1, [sp, #8]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L1416
+	bhi	.L1407
 	mov	r10, #0
 	mov	r2, #0
 	mov	r1, r8
 	bl	FlashReadPages
-.L1417:
+.L1408:
 	uxth	r3, r10
 	cmp	r8, r3
-	bhi	.L1429
+	bhi	.L1420
 	ldr	r3, [sp, #4]
 	add	r5, r5, #1
 	uxth	r5, r5
@@ -9195,14 +9106,14 @@ FtlGcScanTempBlk:
 	ldr	r2, [sp, #4]
 	ldr	r3, [sp, #12]
 	cmp	r3, r2
-	ldr	r2, .L1443+20
-	bls	.L1430
-.L1432:
+	ldr	r2, .L1434+20
+	bls	.L1421
+.L1423:
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bhi	.L1431
-.L1413:
-	ldr	r3, .L1443+4
+	bhi	.L1422
+.L1404:
+	ldr	r3, .L1434+4
 	mvn	r2, #0
 	strh	r5, [r4, #2]	@ movhi
 	mov	r1, r5
@@ -9211,11 +9122,11 @@ FtlGcScanTempBlk:
 	mov	r2, #0
 	strb	r2, [r4, #6]
 	bl	ftl_sb_update_avl_pages
-	b	.L1433
-.L1416:
+	b	.L1424
+.L1407:
 	ldrh	r3, [ip], #2
 	cmp	r3, r7
-	beq	.L1415
+	beq	.L1406
 	mla	r1, r9, r8, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -9237,10 +9148,10 @@ FtlGcScanTempBlk:
 	bic	r3, r3, #3
 	add	r3, fp, r3
 	str	r3, [r1, #12]
-.L1415:
+.L1406:
 	add	r2, r2, #1
-	b	.L1414
-.L1429:
+	b	.L1405
+.L1420:
 	mov	r3, #20
 	ldr	r2, [r6, #3292]
 	mul	fp, r3, r10
@@ -9250,15 +9161,15 @@ FtlGcScanTempBlk:
 	ldr	r9, [r1, #12]
 	cmp	r7, #0
 	str	r3, [sp, #8]
-	bne	.L1418
+	bne	.L1409
 	ldrh	r1, [r9]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1419
-.L1441:
+	bne	.L1410
+.L1432:
 	ldrh	r3, [r4]
 	mov	r1, #0
-	ldr	r2, [r6, #76]
+	ldr	r2, [r6, #72]
 	mov	r5, #0
 	lsl	r3, r3, #1
 	strh	r1, [r2, r3]	@ movhi
@@ -9266,14 +9177,14 @@ FtlGcScanTempBlk:
 	bl	INSERT_FREE_LIST
 	mvn	r3, #0
 	strh	r3, [r4]	@ movhi
-	strh	r3, [r6, #176]	@ movhi
+	strh	r3, [r6, #172]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1428
-.L1419:
+	b	.L1419
+.L1410:
 	ldr	r0, [r9, #8]
 	ldr	r2, [r6, #2556]
 	cmp	r0, r2
-	bhi	.L1441
+	bhi	.L1432
 	mov	r2, r7
 	add	r1, sp, #28
 	bl	log2phys
@@ -9285,16 +9196,16 @@ FtlGcScanTempBlk:
 	lsr	r0, r0, #5
 	moveq	r0, #0
 	cmp	r0, #0
-	bne	.L1422
-.L1427:
+	bne	.L1413
+.L1418:
 	ldr	r2, [r9, #8]
-.L1442:
+.L1433:
 	ldr	r1, [sp, #8]
 	add	r10, r10, #1
 	ldr	r0, [r9, #12]
 	bl	FtlGcUpdatePage
-	b	.L1417
-.L1422:
+	b	.L1408
+.L1413:
 	str	r2, [sp, #36]
 	mov	r1, #1
 	ldr	r2, [r6, #3320]
@@ -9304,65 +9215,65 @@ FtlGcScanTempBlk:
 	str	r2, [sp, #44]
 	mov	r2, r7
 	bl	FlashReadPages
-	ldr	r3, .L1443+24
+	ldr	r3, .L1434+24
 	ldr	r1, [r6, #3292]
 	ldrh	r2, [r3]
 	add	r3, r1, fp
 	ldr	r1, [sp, #40]
 	lsl	r2, r2, #7
-.L1424:
+.L1415:
 	cmp	r7, r2
-	beq	.L1427
+	beq	.L1418
 	ldr	r0, [r3, #8]
 	ldr	ip, [r0, r7, lsl #2]
 	ldr	r0, [r1, r7, lsl #2]
 	cmp	ip, r0
-	beq	.L1425
+	beq	.L1416
 	ldr	r2, [sp, #36]
 	ldrh	r1, [r4]
-	ldr	r0, .L1443+28
+	ldr	r0, .L1434+28
 	bl	sftl_printk
-	b	.L1441
-.L1425:
+	b	.L1432
+.L1416:
 	add	r7, r7, #1
-	b	.L1424
-.L1418:
+	b	.L1415
+.L1409:
 	mvn	r2, #0
-	b	.L1442
-.L1430:
-	ldr	r1, .L1443+4
+	b	.L1433
+.L1421:
+	ldr	r1, .L1434+4
 	movw	r0, #65535
 	ldrh	r3, [r1, #4]
 	cmp	r3, r0
-	beq	.L1432
+	beq	.L1423
 	ldr	r0, [sp, #4]
 	add	r3, r3, r0
 	strh	r3, [r1, #4]	@ movhi
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bls	.L1432
-.L1433:
-	ldr	r3, .L1443
+	bls	.L1423
+.L1424:
+	ldr	r3, .L1434
 	mvn	r0, #0
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1434
+	beq	.L1425
 	bl	__stack_chk_fail
-.L1434:
+.L1425:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1444:
+.L1435:
 	.align	2
-.L1443:
+.L1434:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR0+314
-	.word	.LANCHOR0+316
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+310
+	.word	.LANCHOR0+312
+	.word	.LANCHOR0+302
+	.word	.LANCHOR0+258
 	.word	.LC117
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
@@ -9380,33 +9291,33 @@ FtlReadRefresh:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #100
 	sub	sp, sp, #100
-	ldr	r6, .L1463
-	ldr	r7, .L1463+4
+	ldr	r6, .L1454
+	ldr	r7, .L1454+4
 	ldr	r10, [r6, #2724]
 	mov	r5, r6
 	ldr	r3, [r7]
 	cmp	r10, #0
 	str	r3, [sp, #92]
-	beq	.L1446
+	beq	.L1437
 	ldr	r2, [r6, #2728]
 	ldr	r3, [r6, #2556]
 	cmp	r2, r3
-	bcs	.L1447
+	bcs	.L1438
 	mov	r4, #2048
-.L1452:
+.L1443:
 	ldr	r0, [r5, #2728]
 	ldr	r3, [r5, #2556]
 	cmp	r0, r3
-	bcc	.L1448
-.L1451:
+	bcc	.L1439
+.L1442:
 	mvn	r0, #0
-.L1445:
+.L1436:
 	ldr	r2, [sp, #92]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1457
+	beq	.L1448
 	bl	__stack_chk_fail
-.L1448:
+.L1439:
 	mov	r2, #0
 	add	r1, sp, #4
 	bl	log2phys
@@ -9415,7 +9326,7 @@ FtlReadRefresh:
 	cmn	r2, #1
 	add	r3, r3, #1
 	str	r3, [r5, #2728]
-	beq	.L1450
+	beq	.L1441
 	str	r3, [sp, #24]
 	add	r0, sp, #96
 	ldr	r3, [r5, #3328]
@@ -9429,35 +9340,35 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #8]
 	cmp	r3, #256
-	bne	.L1451
+	bne	.L1442
 	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1451
-.L1450:
+	b	.L1442
+.L1441:
 	subs	r4, r4, #1
-	bne	.L1452
-	b	.L1451
-.L1447:
+	bne	.L1443
+	b	.L1442
+.L1438:
 	ldr	r3, [r6, #2560]
 	mov	r0, #0
 	str	r0, [r6, #2724]
 	str	r0, [r6, #2728]
 	str	r3, [r6, #2720]
-	b	.L1445
-.L1446:
+	b	.L1436
+.L1437:
 	ldr	r1, [r6, #2616]
 	movw	r4, #10000
 	ldr	r9, [r6, #2560]
 	ldr	r8, [r6, #2720]
 	cmp	r1, r4
-	ldr	fp, .L1463+8
+	ldr	fp, .L1454+8
 	add	r3, r9, #1048576
 	movhi	r4, #31
 	movls	r4, #63
 	cmp	r8, r3
-	bhi	.L1456
+	bhi	.L1447
 	ldr	r3, [r6, #2556]
 	lsr	r1, r1, #10
 	mov	r0, #1000
@@ -9466,15 +9377,15 @@ FtlReadRefresh:
 	bl	__aeabi_uidiv
 	add	r0, r0, r8
 	cmp	r9, r0
-	bhi	.L1456
+	bhi	.L1447
 	ldrh	r3, [fp, #28]
 	ands	r0, r4, r3
 	movne	r0, r10
-	bne	.L1445
+	bne	.L1436
 	ldr	r2, [r6, #2744]
 	cmp	r3, r2
-	beq	.L1445
-.L1456:
+	beq	.L1436
+.L1447:
 	ldrh	r3, [fp, #28]
 	mov	r0, #0
 	str	r0, [r5, #2728]
@@ -9482,17 +9393,17 @@ FtlReadRefresh:
 	str	r3, [r5, #2744]
 	mov	r3, #1
 	str	r3, [r5, #2724]
-	b	.L1445
-.L1457:
+	b	.L1436
+.L1448:
 	add	sp, sp, #100
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1464:
+.L1455:
 	.align	2
-.L1463:
+.L1454:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
-	.word	.LANCHOR0+2472
+	.word	.LANCHOR0+2468
 	.fnend
 	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
@@ -9508,33 +9419,33 @@ l2p_flush:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, #0
-	ldr	r6, .L1470
+	ldr	r6, .L1461
 	mov	r7, #12
-	ldr	r5, .L1470+4
+	ldr	r5, .L1461+4
 	bl	FtlWriteDump_data
-.L1466:
+.L1457:
 	ldrh	r3, [r5]
 	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1468
+	bhi	.L1459
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1468:
-	ldr	r2, [r6, #2544]
+.L1459:
+	ldr	r2, [r6, #2540]
 	uxth	r3, r4
 	mla	r3, r7, r3, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1467
+	bge	.L1458
 	bl	flush_l2p_region
-.L1467:
+.L1458:
 	add	r4, r4, #1
-	b	.L1466
-.L1471:
+	b	.L1457
+.L1462:
 	.align	2
-.L1470:
+.L1461:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+342
+	.word	.LANCHOR0+338
 	.fnend
 	.size	l2p_flush, .-l2p_flush
 	.align	2
@@ -9547,11 +9458,11 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1483
+	ldr	r3, .L1474
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1483+4
+	ldr	r4, .L1474+4
 	.pad #108
 	sub	sp, sp, #108
 	mov	r6, r1
@@ -9562,30 +9473,30 @@ FtlVendorPartWrite:
 	ldrh	r2, [r4]
 	cmp	r1, r2
 	mvnhi	r9, #0
-	bhi	.L1472
-	sub	r4, r4, #300
+	bhi	.L1463
+	sub	r4, r4, #296
 	mov	r8, r0
-	add	r3, r4, #312
+	add	r3, r4, #308
 	mov	r9, #0
 	ldrh	r7, [r3]
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1474:
+.L1465:
 	cmp	r6, #0
-	bne	.L1479
-.L1472:
+	bne	.L1470
+.L1463:
 	ldr	r3, [sp, #4]
 	mov	r0, r9
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1480
+	beq	.L1471
 	bl	__stack_chk_fail
-.L1479:
+.L1470:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
-	ldr	r3, .L1483+8
+	ldr	r3, .L1474+8
 	str	r2, [sp, #12]
 	ldrh	r3, [r3]
 	mov	r1, r3
@@ -9602,7 +9513,7 @@ FtlVendorPartWrite:
 	cmpne	r5, r3
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L1476
+	beq	.L1467
 	ldr	r3, [r4, #3312]
 	add	r0, sp, #16
 	str	r2, [sp, #20]
@@ -9612,7 +9523,7 @@ FtlVendorPartWrite:
 	add	r3, sp, #36
 	str	r3, [sp, #28]
 	bl	FlashReadPages
-.L1477:
+.L1468:
 	lsl	r3, r5, #9
 	ldr	r0, [r4, #3312]
 	mov	r1, r10
@@ -9626,32 +9537,32 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r7
 	ldr	r2, [r4, #3312]
-	ldr	r0, .L1483+12
+	ldr	r0, .L1474+12
 	add	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
 	cmn	r0, #1
 	mvneq	r9, #0
 	add	r10, r10, r3
-	b	.L1474
-.L1476:
-	ldr	r3, .L1483+16
+	b	.L1465
+.L1467:
+	ldr	r3, .L1474+16
 	ldr	r0, [r4, #3312]
 	ldrh	r2, [r3]
 	bl	ftl_memset
-	b	.L1477
-.L1480:
+	b	.L1468
+.L1471:
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1484:
+.L1475:
 	.align	2
-.L1483:
+.L1474:
 	.word	__stack_chk_guard
-	.word	.LANCHOR0+300
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+296
+	.word	.LANCHOR0+258
 	.word	.LANCHOR0+3612
-	.word	.LANCHOR0+314
+	.word	.LANCHOR0+310
 	.fnend
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
@@ -9665,12 +9576,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1487
-	ldr	r2, .L1487+4
+	ldr	r3, .L1478
+	ldr	r2, .L1478+4
 	ldr	r1, [r3, #2644]
 	cmp	r1, r2
 	bxne	lr
-	ldr	r2, .L1487+8
+	ldr	r2, .L1478+8
 	mov	r1, #1
 	mov	r0, #0
 	str	r2, [r3, #2648]
@@ -9698,14 +9609,14 @@ Ftl_save_ext_data:
 	str	r2, [r3, #2688]
 	ldr	r2, [r3, #2620]
 	str	r2, [r3, #2692]
-	ldr	r2, .L1487+12
+	ldr	r2, .L1478+12
 	b	FtlVendorPartWrite
-.L1488:
+.L1479:
 	.align	2
-.L1487:
+.L1478:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177363
+	.word	1342177365
 	.word	.LANCHOR0+2644
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
@@ -9719,7 +9630,7 @@ FtlEctTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1497
+	ldr	r3, .L1488
 	movw	r1, #3656
 	ldrh	r2, [r3, r1]
 	cmp	r2, #31
@@ -9728,24 +9639,24 @@ FtlEctTblFlush:
 	strhls	r2, [r3, r1]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	bne	.L1491
+	bne	.L1482
 	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1495
-.L1491:
+	bcc	.L1486
+.L1482:
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r0, #64
 	ldr	r2, [r3, #3352]
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1497+4
+	ldr	r1, .L1488+4
 	str	r1, [r2]
 	ldr	r2, [r3, #3352]
-	ldr	r3, .L1497+8
+	ldr	r3, .L1488+8
 	ldrh	r1, [r3]
 	lsl	r3, r1, #9
 	str	r3, [r2, #12]
@@ -9758,12 +9669,12 @@ FtlEctTblFlush:
 	bl	Ftl_save_ext_data
 	mov	r0, #0
 	pop	{r4, pc}
-.L1495:
+.L1486:
 	mov	r0, #0
 	bx	lr
-.L1498:
+.L1489:
 	.align	2
-.L1497:
+.L1488:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LANCHOR0+3344
@@ -9794,11 +9705,11 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1512
+	ldr	r3, .L1503
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r5, .L1512+4
+	ldr	r5, .L1503+4
 	.pad #108
 	sub	sp, sp, #108
 	mov	r7, r1
@@ -9809,31 +9720,31 @@ FtlVendorPartRead:
 	ldrh	r2, [r5]
 	cmp	r1, r2
 	mvnhi	r9, #0
-	bhi	.L1500
-	sub	r5, r5, #300
+	bhi	.L1491
+	sub	r5, r5, #296
 	mov	r8, r0
-	add	r3, r5, #312
+	add	r3, r5, #308
 	mov	r9, #0
 	ldrh	r6, [r3]
 	lsr	r6, r0, r6
 	lsl	fp, r6, #2
-.L1502:
+.L1493:
 	cmp	r7, #0
-	bne	.L1508
-.L1500:
+	bne	.L1499
+.L1491:
 	ldr	r3, [sp, #8]
 	mov	r0, r9
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1509
+	beq	.L1500
 	bl	__stack_chk_fail
-.L1508:
+.L1499:
 	ldr	r3, [r5, #3376]
 	mov	r0, r8
 	ldr	r3, [r3, fp]
 	str	r3, [sp, #12]
-	ldr	r3, .L1512+8
+	ldr	r3, .L1503+8
 	ldrh	r4, [r3]
 	mov	r1, r4
 	bl	__aeabi_uidivmod
@@ -9846,7 +9757,7 @@ FtlVendorPartRead:
 	cmp	r3, #0
 	lsl	r2, r4, #9
 	str	r2, [sp, #12]
-	beq	.L1504
+	beq	.L1495
 	ldr	r2, [r5, #3312]
 	add	r0, sp, #16
 	str	r3, [sp, #20]
@@ -9863,45 +9774,45 @@ FtlVendorPartRead:
 	ldr	r2, [r5, #3456]
 	mvneq	r9, #0
 	cmp	r2, #256
-	bne	.L1506
+	bne	.L1497
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1512+12
+	ldr	r0, .L1503+12
 	bl	sftl_printk
 	ldr	r2, [r5, #3312]
 	mov	r1, r6
-	ldr	r0, .L1512+16
+	ldr	r0, .L1503+16
 	bl	FtlMapWritePage
-.L1506:
+.L1497:
 	ldr	r1, [r5, #3312]
 	lsl	r2, r4, #9
 	ldr	r3, [sp, #4]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1507:
+.L1498:
 	add	r6, r6, #1
 	sub	r7, r7, r4
 	add	r8, r8, r4
 	add	r10, r10, r4, lsl #9
 	add	fp, fp, #4
-	b	.L1502
-.L1504:
+	b	.L1493
+.L1495:
 	lsl	r2, r4, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1507
-.L1509:
+	b	.L1498
+.L1500:
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1513:
+.L1504:
 	.align	2
-.L1512:
+.L1503:
 	.word	__stack_chk_guard
-	.word	.LANCHOR0+300
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+296
+	.word	.LANCHOR0+258
 	.word	.LC118
 	.word	.LANCHOR0+3612
 	.fnend
@@ -9919,30 +9830,30 @@ FtlLoadEctTbl:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r0, #64
-	ldr	r4, .L1517
+	ldr	r4, .L1508
 	add	r5, r4, #3344
 	ldr	r2, [r4, #3352]
 	ldrh	r1, [r5]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1517+4
+	ldr	r3, .L1508+4
 	cmp	r2, r3
-	beq	.L1515
-	ldr	r1, .L1517+8
-	ldr	r0, .L1517+12
+	beq	.L1506
+	ldr	r1, .L1508+8
+	ldr	r0, .L1508+12
 	bl	sftl_printk
 	ldrh	r2, [r5]
 	mov	r1, #0
 	ldr	r0, [r4, #3352]
 	lsl	r2, r2, #9
 	bl	ftl_memset
-.L1515:
+.L1506:
 	mov	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1518:
+.L1509:
 	.align	2
-.L1517:
+.L1508:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC119
@@ -9962,23 +9873,23 @@ Ftl_load_ext_data:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r1, #1
-	ldr	r4, .L1523
+	ldr	r4, .L1514
 	mov	r0, #0
-	ldr	r2, .L1523+4
+	ldr	r2, .L1514+4
 	bl	FtlVendorPartRead
-	ldr	r5, .L1523+8
+	ldr	r5, .L1514+8
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	beq	.L1520
+	beq	.L1511
 	mov	r2, #512
 	mov	r1, #0
-	ldr	r0, .L1523+4
+	ldr	r0, .L1514+4
 	bl	ftl_memset
 	str	r5, [r4, #2644]
-.L1520:
+.L1511:
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	bne	.L1521
+	bne	.L1512
 	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2584]
 	ldr	r3, [r4, #2736]
@@ -10003,23 +9914,23 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2616]
 	ldr	r3, [r4, #2692]
 	str	r3, [r4, #2620]
-.L1521:
-	ldr	r3, .L1523+12
+.L1512:
+	ldr	r3, .L1514+12
 	ldr	r0, [r4, #2600]
-	ldrh	r1, [r4, #244]
+	ldrh	r1, [r4, #240]
 	ldrh	r2, [r3]
 	ldr	r3, [r4, #2604]
 	mla	r0, r0, r2, r3
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2608]
 	pop	{r4, r5, r6, pc}
-.L1524:
+.L1515:
 	.align	2
-.L1523:
+.L1514:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2644
 	.word	1179929683
-	.word	.LANCHOR0+296
+	.word	.LANCHOR0+292
 	.fnend
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	2
@@ -10055,7 +9966,7 @@ FtlMapBlkWriteDump_data:
 	.save {r4, r5, r6, lr}
 	str	r3, [r0, #36]
 	mov	r5, r0
-	ldr	r3, .L1533
+	ldr	r3, .L1524
 	ldrh	r6, [r0, #6]
 	ldr	r2, [r0, #24]
 	ldr	r1, [r3, #3336]
@@ -10068,26 +9979,26 @@ FtlMapBlkWriteDump_data:
 	ldr	r2, [r2, r6, lsl #2]
 	cmp	r2, #0
 	str	r2, [r3, #3460]
-	beq	.L1528
+	beq	.L1519
 	mov	r2, #1
 	add	r0, r3, #3456
 	mov	r1, r2
 	bl	FlashReadPages
-.L1529:
+.L1520:
 	ldr	r2, [r4, #3464]
 	mov	r1, r6
 	mov	r0, r5
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1528:
-	movw	r3, #314
+.L1519:
+	movw	r3, #310
 	mov	r1, #255
 	ldrh	r2, [r4, r3]
 	bl	ftl_memset
-	b	.L1529
-.L1534:
+	b	.L1520
+.L1525:
 	.align	2
-.L1533:
+.L1524:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -10103,68 +10014,67 @@ FtlVpcTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r5, #0
-	ldr	r4, .L1545
+	mov	r6, #0
+	ldr	r4, .L1536
 	mov	r1, #255
-	ldr	r6, .L1545+4
+	ldr	r5, .L1536+4
 	ldr	r3, [r4, #3304]
-	add	r9, r4, #308
+	add	r9, r4, #304
 	ldr	r7, [r4, #3336]
 	mov	fp, r9
-	sub	r8, r6, #156
+	sub	r8, r5, #160
 	add	r10, r9, #6
 	str	r3, [r4, #3464]
 	movw	r3, #2628
 	ldrh	r3, [r4, r3]
 	str	r7, [r4, #3468]
-	str	r5, [r7, #12]
+	str	r6, [r7, #12]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, .L1545+8
+	ldr	r3, .L1536+8
 	strh	r3, [r7]	@ movhi
 	ldr	r3, [r4, #2636]
-	str	r5, [r7, #8]
-	ldrh	r2, [r4, #30]
+	str	r6, [r7, #8]
+	ldrh	r2, [r4, #26]
 	str	r3, [r7, #4]
-	ldr	r3, .L1545+12
+	ldr	r3, .L1536+12
+	str	r3, [r4, #2468]
+	ldr	r3, .L1536+16
 	str	r3, [r4, #2472]
-	ldr	r3, .L1545+16
-	str	r3, [r4, #2476]
-	ldrh	r3, [r6, #6]
-	strh	r3, [r6, #-148]	@ movhi
-	movw	r3, #258
-	ldrh	r3, [r4, r3]
-	strb	r3, [r4, #2482]
-	ldrh	r3, [r4, #28]
-	strh	r3, [r6, #-142]	@ movhi
-	ldrb	r3, [r4, #34]	@ zero_extendqisi2
+	ldrh	r3, [r5, #6]
+	strh	r3, [r5, #-152]	@ movhi
+	ldrh	r3, [r4, #254]
+	strb	r3, [r4, #2478]
+	ldrh	r3, [r4, #24]
+	strh	r3, [r5, #-146]	@ movhi
+	ldrb	r3, [r4, #30]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	ldrh	r2, [r4, #82]
-	strh	r3, [r6, #-140]	@ movhi
-	ldrb	r3, [r4, #36]	@ zero_extendqisi2
-	strb	r3, [r4, #2483]
-	ldrh	r3, [r4, #80]
-	strh	r3, [r6, #-138]	@ movhi
-	ldrb	r3, [r4, #86]	@ zero_extendqisi2
+	ldrh	r2, [r4, #78]
+	strh	r3, [r5, #-144]	@ movhi
+	ldrb	r3, [r4, #32]	@ zero_extendqisi2
+	strb	r3, [r4, #2479]
+	ldrh	r3, [r4, #76]
+	strh	r3, [r5, #-142]	@ movhi
+	ldrb	r3, [r4, #82]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	strh	r3, [r6, #-136]	@ movhi
-	ldrb	r3, [r4, #88]	@ zero_extendqisi2
-	strb	r3, [r4, #2484]
-	ldrh	r3, [r4, #128]
-	ldrh	r2, [r4, #130]
+	strh	r3, [r5, #-140]	@ movhi
+	ldrb	r3, [r4, #84]	@ zero_extendqisi2
+	strb	r3, [r4, #2480]
+	ldrh	r3, [r4, #124]
+	ldrh	r2, [r4, #126]
 	ldr	r0, [r4, #3464]
-	strh	r3, [r6, #-134]	@ movhi
-	ldrb	r3, [r4, #134]	@ zero_extendqisi2
+	strh	r3, [r5, #-138]	@ movhi
+	ldrb	r3, [r4, #130]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	strh	r3, [r6, #-132]	@ movhi
-	ldrb	r3, [r4, #136]	@ zero_extendqisi2
-	strb	r3, [r4, #2485]
+	strh	r3, [r5, #-136]	@ movhi
+	ldrb	r3, [r4, #132]	@ zero_extendqisi2
+	strb	r3, [r4, #2481]
 	ldr	r3, [r4, #2600]
-	str	r3, [r4, #2504]
+	str	r3, [r4, #2500]
 	ldr	r3, [r4, #2592]
-	str	r3, [r4, #2512]
-	ldr	r3, [r4, #2596]
 	str	r3, [r4, #2508]
-	movw	r3, #314
+	ldr	r3, [r4, #2596]
+	str	r3, [r4, #2504]
+	movw	r3, #310
 	ldrh	r2, [r4, r3]
 	bl	ftl_memset
 	mov	r1, r8
@@ -10172,28 +10082,18 @@ FtlVpcTblFlush:
 	ldr	r0, [r4, #3464]
 	movw	r8, #65535
 	bl	ftl_memcpy
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	ldr	r0, [r4, #3464]
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	lsl	r2, r2, #1
 	add	r0, r0, #48
 	bl	ftl_memcpy
-	ldrh	r0, [r4, #244]
-	ldr	r3, [r4, #3464]
-	ldr	r1, [r4, #24]
-	lsr	r2, r0, #3
-	add	r0, r0, #24
-	lsl	r0, r0, #1
-	add	r2, r2, #4
-	bic	r0, r0, #3
-	add	r0, r3, r0
-	bl	ftl_memcpy
-	mov	r0, r5
+	mov	r0, r6
 	bl	FtlUpdateVaildLpn
-.L1536:
+.L1527:
 	ldr	r3, [r4, #3304]
-	ldrh	r1, [r6, #2]
-	ldrh	r2, [r6]
+	ldrh	r1, [r5, #2]
+	ldrh	r2, [r5]
 	str	r3, [r4, #3464]
 	ldr	r3, [r4, #3336]
 	str	r3, [r4, #3468]
@@ -10202,14 +10102,14 @@ FtlVpcTblFlush:
 	ldrh	r3, [r9]
 	sub	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1537
+	blt	.L1528
 	mov	r3, #0
-	ldrh	r8, [r6, #4]
-	strh	r3, [r6, #2]	@ movhi
-	strh	r2, [r6, #4]	@ movhi
+	ldrh	r8, [r5, #4]
+	strh	r3, [r5, #2]	@ movhi
+	strh	r2, [r5, #4]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
 	ldr	r3, [r4, #2592]
-	strh	r0, [r6]	@ movhi
+	strh	r0, [r5]	@ movhi
 	add	r2, r3, #1
 	str	r3, [r4, #2636]
 	str	r2, [r4, #2592]
@@ -10217,7 +10117,7 @@ FtlVpcTblFlush:
 	str	r2, [r4, #3460]
 	str	r3, [r7, #4]
 	strh	r0, [r7, #2]	@ movhi
-.L1537:
+.L1528:
 	ldrh	r1, [r10]
 	ldr	r0, [r4, #3304]
 	bl	js_hash
@@ -10225,58 +10125,58 @@ FtlVpcTblFlush:
 	str	r0, [r7, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1545+20
+	ldr	r0, .L1536+20
 	bl	FlashProgPages
-	ldrh	r3, [r6, #2]
+	ldrh	r3, [r5, #2]
 	ldr	r2, [r4, #3456]
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmn	r2, #1
-	strh	r3, [r6, #2]	@ movhi
-	bne	.L1538
+	strh	r3, [r5, #2]	@ movhi
+	bne	.L1529
 	cmp	r3, #1
-	bne	.L1539
+	bne	.L1530
 	movw	r2, #1138
-	ldr	r1, .L1545+24
-	ldr	r0, .L1545+28
+	ldr	r1, .L1536+24
+	ldr	r0, .L1536+28
 	bl	sftl_printk
-.L1539:
-	ldrh	r3, [r6, #2]
-	add	r5, r5, #1
-	uxth	r5, r5
+.L1530:
+	ldrh	r3, [r5, #2]
+	add	r6, r6, #1
+	uxth	r6, r6
 	cmp	r3, #1
 	ldrheq	r3, [fp]
 	subeq	r3, r3, #1
-	strheq	r3, [r6, #2]	@ movhi
-	cmp	r5, #3
-	bls	.L1536
-	mov	r2, r5
+	strheq	r3, [r5, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1527
+	mov	r2, r6
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L1545+32
+	ldr	r0, .L1536+32
 	bl	sftl_printk
-.L1542:
-	b	.L1542
-.L1538:
+.L1533:
+	b	.L1533
+.L1529:
 	cmp	r2, #256
 	cmpne	r3, #1
-	beq	.L1536
+	beq	.L1527
 	movw	r3, #65535
 	cmp	r8, r3
-	beq	.L1543
+	beq	.L1534
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
-.L1543:
+.L1534:
 	mov	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1546:
+.L1537:
 	.align	2
-.L1545:
+.L1536:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2628
 	.word	-3932
 	.word	1179929683
-	.word	1342177363
+	.word	1342177365
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+471
 	.word	.LC8
@@ -10313,21 +10213,21 @@ sftl_deinit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1555
+	ldr	r3, .L1546
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1552
+	bne	.L1543
 	push	{r4, lr}
 	.save {r4, lr}
 	bl	FtlSysFlush
 	mov	r0, #0
 	pop	{r4, pc}
-.L1552:
+.L1543:
 	mov	r0, #0
 	bx	lr
-.L1556:
+.L1547:
 	.align	2
-.L1555:
+.L1546:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10345,31 +10245,31 @@ sftl_discard:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r8, .L1575
-	ldr	r4, .L1575+4
+	ldr	r8, .L1566
+	ldr	r4, .L1566+4
 	ldr	r3, [r8]
 	str	r3, [sp, #12]
-	ldr	r3, [r4, #344]
+	ldr	r3, [r4, #340]
 	cmp	r3, r1
 	cmpcs	r3, r0
-	bls	.L1567
+	bls	.L1558
 	add	r2, r0, r1
 	mov	r7, r0
 	cmp	r3, r2
 	mov	r5, r1
-	bcc	.L1567
+	bcc	.L1558
 	cmp	r1, #31
-	bhi	.L1559
-.L1564:
+	bhi	.L1550
+.L1555:
 	mov	r0, #0
-.L1557:
+.L1548:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r8]
 	cmp	r2, r3
-	beq	.L1565
+	beq	.L1556
 	bl	__stack_chk_fail
-.L1559:
-	movw	r3, #262
+.L1550:
+	movw	r3, #258
 	ldrh	r6, [r4, r3]
 	mov	r1, r6
 	bl	__aeabi_uidiv
@@ -10378,38 +10278,38 @@ sftl_discard:
 	sub	r7, r7, r3
 	uxth	r7, r7
 	cmp	r7, #0
-	beq	.L1560
+	beq	.L1551
 	sub	r6, r6, r7
 	add	r9, r0, #1
 	cmp	r6, r5
 	movcs	r6, r5
 	uxth	r6, r6
 	sub	r5, r5, r6
-.L1560:
-	ldr	r6, .L1575+8
+.L1551:
+	ldr	r6, .L1566+8
 	mvn	r3, #0
 	str	r3, [sp, #8]
 	mov	r7, r6
-.L1561:
+.L1552:
 	ldrh	r3, [r6]
 	cmp	r5, r3
-	bcs	.L1563
+	bcs	.L1554
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1564
+	bls	.L1555
 	mov	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1564
-.L1563:
+	b	.L1555
+.L1554:
 	mov	r2, #0
 	add	r1, sp, #4
 	mov	r0, r9
 	bl	log2phys
 	ldr	r3, [sp, #4]
 	cmn	r3, #1
-	beq	.L1562
+	beq	.L1553
 	ldr	r3, [r4, #3660]
 	mov	r2, #1
 	add	r1, sp, #8
@@ -10424,24 +10324,24 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1562:
+.L1553:
 	ldrh	r3, [r7]
 	add	r9, r9, #1
 	sub	r5, r5, r3
-	b	.L1561
-.L1567:
+	b	.L1552
+.L1558:
 	mvn	r0, #0
-	b	.L1557
-.L1565:
+	b	.L1548
+.L1556:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1576:
+.L1567:
 	.align	2
-.L1575:
+.L1566:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+258
 	.fnend
 	.size	sftl_discard, .-sftl_discard
 	.align	2
@@ -10454,49 +10354,50 @@ FtlVpcCheckAndModify:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #8
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
 	mov	r5, #0
-	ldr	r7, .L1592
-	ldr	r4, .L1592+4
+	ldr	r7, .L1584
+	ldr	r4, .L1584+4
 	ldr	r3, [r7]
-	ldr	r1, .L1592+8
-	ldr	r0, .L1592+12
+	ldr	r1, .L1584+8
+	ldr	r0, .L1584+12
 	str	r3, [sp, #4]
 	bl	sftl_printk
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, #0
 	ldr	r0, [r4, #3356]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-.L1578:
+.L1569:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1580
-	ldr	r10, .L1592+16
+	bcc	.L1571
+	ldr	r9, .L1584+16
 	mov	r8, #0
-	movw	r9, #65535
-.L1581:
-	ldrh	r3, [r4, #244]
-	uxth	r6, r8
-	cmp	r3, r6
-	bhi	.L1586
+	ldr	r10, .L1584+20
+	ldr	fp, .L1584+8
+.L1572:
+	ldrh	r3, [r4, #240]
+	uxth	r5, r8
+	cmp	r3, r5
+	bhi	.L1578
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	r2, [sp, #4]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1587
+	beq	.L1579
 	bl	__stack_chk_fail
-.L1580:
+.L1571:
 	mov	r2, #0
 	mov	r1, sp
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp]
 	cmn	r0, #1
-	beq	.L1579
+	beq	.L1570
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3356]
@@ -10504,56 +10405,75 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1579:
+.L1570:
 	add	r5, r5, #1
-	b	.L1578
-.L1586:
+	b	.L1569
+.L1578:
 	uxth	r1, r8
-	ldr	r3, [r4, #76]
-	lsl	r5, r1, #1
-	ldrh	r2, [r3, r5]
+	ldr	r3, [r4, #72]
+	movw	r0, #65535
+	lsl	r6, r1, #1
+	ldrh	r2, [r3, r6]
 	ldr	r3, [r4, #3356]
-	ldrh	r3, [r3, r5]
-	cmp	r2, r9
+	ldrh	r3, [r3, r6]
+	cmp	r2, r0
 	cmpne	r2, r3
-	beq	.L1583
-	mov	r0, r10
+	beq	.L1574
+	mov	r0, r9
 	bl	sftl_printk
-	ldrh	r3, [r4, #28]
-	cmp	r3, r6
-	beq	.L1583
-	ldrh	r3, [r4, #128]
-	cmp	r3, r6
-	beq	.L1583
-	ldrh	r3, [r4, #80]
-	cmp	r3, r6
-	beq	.L1583
-	ldr	r3, [r4, #76]
-	ldrh	r2, [r3, r5]
+	ldrh	r3, [r4, #24]
+	cmp	r3, r5
+	beq	.L1574
+	ldrh	r3, [r4, #124]
+	cmp	r3, r5
+	beq	.L1574
+	ldrh	r3, [r4, #76]
+	cmp	r3, r5
+	beq	.L1574
+	ldr	r3, [r4, #72]
+	ldrh	r2, [r3, r6]
 	cmp	r2, #0
 	ldr	r2, [r4, #3356]
-	ldrh	r2, [r2, r5]
-	strh	r2, [r3, r5]	@ movhi
-	bne	.L1585
-.L1583:
+	ldrh	r2, [r2, r6]
+	strh	r2, [r3, r6]	@ movhi
+	bne	.L1576
+	mov	r1, r5
+	mov	r0, r10
+	bl	List_remove_node
+	ldrh	r3, [r4, #224]
+	cmp	r3, #0
+	bne	.L1577
+	movw	r2, #2323
+	mov	r1, fp
+	ldr	r0, .L1584+24
+	bl	sftl_printk
+.L1577:
+	ldrh	r3, [r4, #224]
+	mov	r0, r5
+	sub	r3, r3, #1
+	strh	r3, [r4, #224]	@ movhi
+	bl	INSERT_DATA_LIST
+.L1574:
 	add	r8, r8, #1
-	b	.L1581
-.L1585:
-	mov	r0, r6
+	b	.L1572
+.L1576:
+	mov	r0, r5
 	bl	update_vpc_list
-	b	.L1583
-.L1587:
-	add	sp, sp, #8
+	b	.L1574
+.L1579:
+	add	sp, sp, #12
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1593:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1585:
 	.align	2
-.L1592:
+.L1584:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+486
 	.word	.LC111
 	.word	.LC121
+	.word	.LANCHOR0+2532
+	.word	.LC8
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
@@ -10569,48 +10489,48 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1605
+	ldr	r4, .L1597
 	ldrh	r5, [r0]
-	ldrh	r3, [r4, #244]
+	ldrh	r3, [r4, #240]
 	cmp	r3, r5
-	bcs	.L1595
-	movw	r2, #2755
-	ldr	r1, .L1605+4
-	ldr	r0, .L1605+8
+	bcs	.L1587
+	movw	r2, #2759
+	ldr	r1, .L1597+4
+	ldr	r0, .L1597+8
 	bl	sftl_printk
-.L1595:
+.L1587:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1596
-	ldr	r2, [r4, #76]
+	beq	.L1588
+	ldr	r2, [r4, #72]
 	lsl	r3, r5, #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1597
+	beq	.L1589
 	bl	INSERT_DATA_LIST
-.L1596:
+.L1588:
 	mov	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #3442
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1598
+	beq	.L1590
 	cmp	r5, r0
-	bne	.L1599
-	ldr	r2, [r4, #76]
+	bne	.L1591
+	ldr	r2, [r4, #72]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1600
-.L1599:
+	beq	.L1592
+.L1591:
 	bl	update_vpc_list
-.L1600:
+.L1592:
 	mvn	r2, #0
 	movw	r3, #3442
 	strh	r2, [r4, r3]	@ movhi
-.L1598:
+.L1590:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10619,12 +10539,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	mov	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1597:
+.L1589:
 	bl	INSERT_FREE_LIST
-	b	.L1596
-.L1606:
+	b	.L1588
+.L1598:
 	.align	2
-.L1605:
+.L1597:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+507
 	.word	.LC8
@@ -10643,38 +10563,38 @@ FtlProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r3
-	ldr	r6, .L1622
+	ldr	r6, .L1614
 	.pad #20
 	sub	sp, sp, #20
 	mov	r7, #0
 	mov	r2, #0
-	ldr	fp, .L1622+4
+	ldr	fp, .L1614+4
 	mov	r4, r0
 	ldr	r3, [r6]
 	mov	r10, r1
-	ldr	r9, .L1622+8
+	ldr	r9, .L1614+8
 	str	r3, [sp, #12]
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1608:
+.L1600:
 	cmp	r7, r10
-	bne	.L1615
-	ldr	r3, .L1622+8
+	bne	.L1607
+	ldr	r3, .L1614+8
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r3, #236]
+	ldrh	r3, [r3, #232]
 	cmp	r2, r3
-	bcc	.L1607
+	bcc	.L1599
 	mov	r2, #1000
-	ldr	r1, .L1622+12
-	ldr	r0, .L1622+16
+	ldr	r1, .L1614+12
+	ldr	r0, .L1614+16
 	bl	sftl_printk
-.L1607:
+.L1599:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1617
+	beq	.L1609
 	bl	__stack_chk_fail
-.L1610:
+.L1602:
 	ldr	r1, [r4, #4]
 	mov	r0, fp
 	bl	sftl_printk
@@ -10684,10 +10604,10 @@ FtlProgPages:
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	bne	.L1609
+	bne	.L1601
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1609:
+.L1601:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	mov	r2, #0
@@ -10697,20 +10617,20 @@ FtlProgPages:
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	FlashProgPages
-.L1615:
+.L1607:
 	ldr	r2, [r4]
 	cmn	r2, #1
 	cmpne	r2, #256
-	beq	.L1610
+	beq	.L1602
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #236]
+	ldrh	r3, [r9, #232]
 	cmp	r2, r3
-	bcc	.L1611
+	bcc	.L1603
 	movw	r2, #985
-	ldr	r1, .L1622+12
-	ldr	r0, .L1622+16
+	ldr	r1, .L1614+12
+	ldr	r0, .L1614+16
 	bl	sftl_printk
-.L1611:
+.L1603:
 	ldr	r3, [r4, #4]
 	add	r1, sp, #16
 	mov	r2, #1
@@ -10725,29 +10645,29 @@ FtlProgPages:
 	ldr	r3, [sp, #4]
 	mov	r8, r0
 	cmn	r3, #1
-	beq	.L1612
-	ldr	r2, [r9, #76]
+	beq	.L1604
+	ldr	r2, [r9, #72]
 	lsl	r3, r0, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L1613
+	bne	.L1605
 	mov	r1, r0
-	ldr	r0, .L1622+20
+	ldr	r0, .L1614+20
 	bl	sftl_printk
-.L1613:
+.L1605:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1612:
+.L1604:
 	add	r7, r7, #1
 	add	r4, r4, #20
-	b	.L1608
-.L1617:
+	b	.L1600
+.L1609:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1623:
+.L1615:
 	.align	2
-.L1622:
+.L1614:
 	.word	__stack_chk_guard
 	.word	.LC122
 	.word	.LANCHOR0
@@ -10769,79 +10689,79 @@ FtlGcFreeTempBlock:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r6, .L1650
-	ldr	r4, .L1650+4
+	ldr	r6, .L1642
+	ldr	r4, .L1642+4
 	ldr	r3, [r6]
-	ldrh	r2, [r4, #128]
+	ldrh	r2, [r4, #124]
 	str	r3, [sp, #4]
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r1, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1625
-.L1632:
-	ldrh	r2, [r4, #128]
+	bne	.L1617
+.L1624:
+	ldrh	r2, [r4, #124]
 	mov	r3, #0
 	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1646
-.L1626:
+	bne	.L1638
+.L1618:
 	mov	r0, #0
-	b	.L1624
-.L1625:
+	b	.L1616
+.L1617:
 	cmp	r0, #0
-	ldr	r5, .L1650+8
-	beq	.L1628
+	ldr	r5, .L1642+8
+	beq	.L1620
 	ldrh	r2, [r5, #4]
 	cmp	r2, r3
-	beq	.L1629
-.L1630:
+	beq	.L1621
+.L1622:
 	mov	r1, #2
-.L1628:
-	ldr	r0, .L1650+12
+.L1620:
+	ldr	r0, .L1642+12
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r5, #4]
 	movw	r3, #65535
 	str	r0, [sp]
 	cmp	r2, r3
 	movne	r0, #1
-	beq	.L1632
-.L1624:
+	beq	.L1624
+.L1616:
 	ldr	r2, [sp, #4]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1641
+	beq	.L1633
 	bl	__stack_chk_fail
-.L1629:
+.L1621:
 	mov	r3, #0
 	strh	r3, [r5, #4]	@ movhi
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #17
-	bhi	.L1630
-	b	.L1628
-.L1646:
+	bhi	.L1622
+	b	.L1620
+.L1638:
 	movw	r3, #3208
-	ldrb	r1, [r4, #135]	@ zero_extendqisi2
+	ldrb	r1, [r4, #131]	@ zero_extendqisi2
 	ldrh	r2, [r4, r3]
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r3, [r4, r3]
 	mul	r3, r3, r1
 	cmp	r2, r3
-	beq	.L1633
+	beq	.L1625
 	mov	r2, #164
-	ldr	r1, .L1650+16
-	ldr	r0, .L1650+20
+	ldr	r1, .L1642+16
+	ldr	r0, .L1642+20
 	bl	sftl_printk
-.L1633:
-	movw	r0, #306
-	ldrb	r2, [r4, #135]	@ zero_extendqisi2
+.L1625:
+	movw	r0, #302
+	ldrb	r2, [r4, #131]	@ zero_extendqisi2
 	ldrh	r0, [r4, r0]
 	mov	r5, #0
-	ldrh	r3, [r4, #128]
+	ldrh	r3, [r4, #124]
 	mov	r10, #12
-	ldr	r1, [r4, #76]
-	ldr	r9, .L1650+24
+	ldr	r1, [r4, #72]
+	ldr	r9, .L1642+24
 	smulbb	r2, r2, r0
 	lsl	r3, r3, #1
 	strh	r2, [r1, r3]	@ movhi
@@ -10850,41 +10770,41 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, r3]
 	add	r3, r3, r2
 	str	r3, [r4, #2580]
-.L1634:
+.L1626:
 	ldrh	r2, [r9]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1638
+	bhi	.L1630
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r0, [r4, #128]
-	ldr	r2, [r4, #76]
+	ldrh	r0, [r4, #124]
+	ldr	r2, [r4, #72]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1639
+	beq	.L1631
 	bl	INSERT_DATA_LIST
-.L1640:
-	ldr	r7, .L1650+28
+.L1632:
+	ldr	r7, .L1642+28
 	movw	r3, #3208
 	mvn	r8, #0
 	mov	r5, #0
 	strh	r5, [r4, r3]	@ movhi
 	strh	r5, [r7]	@ movhi
 	sub	r7, r7, #576
-	strh	r8, [r4, #128]	@ movhi
+	strh	r8, [r4, #124]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldrh	r3, [r7]
-	ldrh	r2, [r4, #228]
-	strh	r8, [r4, #176]	@ movhi
+	ldrh	r2, [r4, #224]
+	strh	r8, [r4, #172]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
 	movgt	r2, #20
 	movwgt	r3, #3156
 	strhgt	r2, [r4, r3]	@ movhi
-	b	.L1626
-.L1638:
+	b	.L1618
+.L1630:
 	uxth	r8, r5
 	ldr	fp, [r4, #3204]
 	ldr	r3, [r4, #2556]
@@ -10892,18 +10812,18 @@ FtlGcFreeTempBlock:
 	add	r7, fp, r8
 	ldr	r0, [r7, #8]
 	cmp	r0, r3
-	bcc	.L1635
-.L1648:
-	ldrh	r0, [r4, #128]
-	b	.L1649
-.L1635:
+	bcc	.L1627
+.L1640:
+	ldrh	r0, [r4, #124]
+	b	.L1641
+.L1627:
 	mov	r2, #0
 	mov	r1, sp
 	bl	log2phys
 	ldr	r0, [fp, r8]
 	ldr	r3, [sp]
 	cmp	r0, r3
-	bne	.L1637
+	bne	.L1629
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r2, #1
@@ -10912,30 +10832,30 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r7, #8]
 	bl	log2phys
 	mov	r0, r8
-.L1649:
+.L1641:
 	bl	decrement_vpc_count
-	b	.L1636
-.L1637:
+	b	.L1628
+.L1629:
 	ldr	r2, [r7, #4]
 	cmp	r3, r2
-	bne	.L1648
-.L1636:
+	bne	.L1640
+.L1628:
 	add	r5, r5, #1
-	b	.L1634
-.L1639:
+	b	.L1626
+.L1631:
 	bl	INSERT_FREE_LIST
-	b	.L1640
-.L1641:
+	b	.L1632
+.L1633:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1651:
+.L1643:
 	.align	2
-.L1650:
+.L1642:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR0+128
+	.word	.LANCHOR0+124
 	.word	.LANCHOR1+549
 	.word	.LC8
 	.word	.LANCHOR0+3208
@@ -10954,25 +10874,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r5, #306
-	ldr	r4, .L1655
+	movw	r5, #302
+	ldr	r4, .L1647
 	ldrh	r1, [r4, r5]
-	add	r0, r4, #128
+	add	r0, r4, #124
 	bl	FtlGcScanTempBlk
-	ldrh	r2, [r4, #130]
+	ldrh	r2, [r4, #126]
 	ldrh	r3, [r4, r5]
 	cmp	r2, r3
 	popcc	{r4, r5, r6, pc}
-	ldr	r0, .L1655+4
+	ldr	r0, .L1647+4
 	bl	FtlMapBlkWriteDump_data
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
 	str	r3, [r4, #3448]
 	pop	{r4, r5, r6, pc}
-.L1656:
+.L1648:
 	.align	2
-.L1655:
+.L1647:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3396
 	.fnend
@@ -10990,11 +10910,11 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, #0
-	ldr	r4, .L1659
-	add	r6, r4, #28
+	ldr	r4, .L1651
+	add	r6, r4, #24
 	str	r5, [r4, #3480]
 	mov	r0, r6
-	add	r4, r4, #80
+	add	r4, r4, #76
 	bl	FtlRecoverySuperblock
 	mov	r0, r6
 	bl	FtlSlcSuperblockCheck
@@ -11007,9 +10927,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1660:
+.L1652:
 	.align	2
-.L1659:
+.L1651:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -11026,21 +10946,21 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r3, #0
-	ldr	r4, .L1670
+	ldr	r4, .L1662
 	mov	r5, #0
 	mov	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3172]
 	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1662:
+.L1654:
 	ldr	r1, [r4, #3172]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1665
+	bhi	.L1657
 	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
-	ldrh	r3, [r4, #132]
+	ldrh	r3, [r4, #128]
 	mov	r0, #0
 	str	r0, [r4, #3172]
 	cmp	r3, r0
@@ -11049,7 +10969,7 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlGcFreeTempBlock
 	mov	r0, #1
 	pop	{r4, r5, r6, pc}
-.L1665:
+.L1657:
 	mul	r3, r6, r3
 	ldr	r2, [r4, #3296]
 	add	r5, r5, #1
@@ -11061,10 +10981,10 @@ Ftl_gc_temp_data_write_back:
 	ldrne	r2, [r0, #8]
 	ldr	r0, [r0, #12]
 	bl	FtlGcUpdatePage
-	b	.L1662
-.L1671:
+	b	.L1654
+.L1663:
 	.align	2
-.L1670:
+.L1662:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -11081,21 +11001,21 @@ Ftl_get_new_temp_ppa:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movw	r3, #65535
-	ldr	r4, .L1676
-	ldrh	r2, [r4, #128]
+	ldr	r4, .L1668
+	ldrh	r2, [r4, #124]
 	cmp	r2, r3
-	beq	.L1673
-	ldrh	r3, [r4, #132]
+	beq	.L1665
+	ldrh	r3, [r4, #128]
 	cmp	r3, #0
-	bne	.L1674
-.L1673:
+	bne	.L1666
+.L1665:
 	mov	r0, #0
 	mov	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1676+4
-	strb	r5, [r4, #136]
+	ldr	r0, .L1668+4
+	strb	r5, [r4, #132]
 	bl	allocate_data_superblock
-	ldr	r3, .L1676+8
+	ldr	r3, .L1668+8
 	strh	r5, [r3]	@ movhi
 	movw	r3, #3208
 	strh	r5, [r4, r3]	@ movhi
@@ -11103,15 +11023,15 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1674:
-	ldr	r0, .L1676+4
+.L1666:
+	ldr	r0, .L1668+4
 	pop	{r4, r5, r6, lr}
 	b	get_new_active_ppa
-.L1677:
+.L1669:
 	.align	2
-.L1676:
+.L1668:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+128
+	.word	.LANCHOR0+124
 	.word	.LANCHOR0+3200
 	.fnend
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
@@ -11125,7 +11045,7 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1808
+	ldr	r3, .L1800
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
@@ -11133,52 +11053,52 @@ rk_ftl_garbage_collect:
 	str	r0, [sp, #20]
 	ldr	r3, [r3]
 	str	r3, [sp, #44]
-	ldr	r3, .L1808+4
+	ldr	r3, .L1800+4
 	ldr	r0, [r3, #3276]
 	cmp	r0, #0
 	movne	r0, #0
-	bne	.L1678
-	movw	r2, #2532
-	ldrh	r2, [r3, r2]
+	bne	.L1670
+	add	r2, r3, #2528
+	ldrh	r2, [r2]
 	cmp	r2, #47
-	bls	.L1678
-	ldr	r2, .L1808+8
+	bls	.L1670
+	ldr	r2, .L1800+8
 	mov	r4, r3
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1680
-.L1683:
-	ldrh	r3, [r4, #224]
+	bne	.L1672
+.L1675:
+	ldrh	r3, [r4, #220]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1681
-.L1682:
+	bne	.L1673
+.L1674:
 	bl	FtlReadRefresh
 	ldr	r3, [r4, #3160]
 	movw	r6, #65535
 	ldr	r2, [sp, #20]
 	add	r3, r3, #1
 	add	r3, r3, r2, lsl #7
-	ldrh	r2, [r4, #176]
+	ldrh	r2, [r4, #172]
 	str	r3, [r4, #3160]
 	cmp	r2, r6
-	bne	.L1684
-	ldrh	r6, [r4, #128]
+	bne	.L1676
+	ldrh	r6, [r4, #124]
 	cmp	r6, r2
 	movne	r6, r2
-	bne	.L1684
-	ldrh	r5, [r4, #226]
+	bne	.L1676
+	ldrh	r5, [r4, #222]
 	cmp	r5, r6
-	bne	.L1684
-	ldrh	r2, [r4, #228]
+	bne	.L1676
+	ldrh	r2, [r4, #224]
 	cmp	r2, #24
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
 	movls	r6, r5
-	bls	.L1684
-	ldr	r3, .L1808+12
+	bls	.L1676
+	ldr	r3, .L1800+12
 	mov	r8, #0
 	str	r8, [r4, #3160]
 	strh	r8, [r3]	@ movhi
@@ -11186,33 +11106,33 @@ rk_ftl_garbage_collect:
 	cmp	r0, r5
 	mov	r6, r0
 	movne	r5, r0
-	bne	.L1686
+	bne	.L1678
 	movw	r7, #3158
-	ldrh	r2, [r4, #228]
+	ldrh	r2, [r4, #224]
 	ldrh	r3, [r4, r7]
 	cmp	r2, r3
-	bcs	.L1687
+	bcs	.L1679
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r6
-	beq	.L1689
+	beq	.L1681
 	mov	r0, r3
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #7
-	bhi	.L1690
+	bhi	.L1682
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	mov	r3, #128
 	strh	r3, [r4, r7]	@ movhi
 	cmp	r5, r6
-	bne	.L1686
-.L1689:
+	bne	.L1678
+.L1681:
 	bl	FtlGcReFreshBadBlk
-.L1684:
+.L1676:
 	movw	r1, #65535
 	ldr	r2, [sp, #20]
 	sub	r3, r6, r1
@@ -11222,296 +11142,296 @@ rk_ftl_garbage_collect:
 	movne	r2, #0
 	andeq	r2, r3, #1
 	cmp	r2, #0
-	beq	.L1692
-	ldrh	r3, [r4, #228]
+	beq	.L1684
+	ldrh	r3, [r4, #224]
 	cmp	r3, #24
 	movhi	r5, #1
-	bhi	.L1693
-	movw	r2, #306
+	bhi	.L1685
+	movw	r2, #302
 	cmp	r3, #16
 	ldrh	r5, [r4, r2]
 	lsrhi	r5, r5, #5
-	bhi	.L1693
+	bhi	.L1685
 	cmp	r3, #12
 	lsrhi	r5, r5, #4
-	bhi	.L1693
+	bhi	.L1685
 	cmp	r3, #8
 	lsrhi	r5, r5, #2
-.L1693:
+.L1685:
 	movw	r2, #3156
 	ldrh	r1, [r4, r2]
 	cmp	r1, r3
-	bcs	.L1697
-	ldrh	r3, [r4, #128]
+	bcs	.L1689
+	ldrh	r3, [r4, #124]
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L1698
-	ldrh	r1, [r4, #226]
+	bne	.L1690
+	ldrh	r1, [r4, #222]
 	cmp	r1, r3
-	bne	.L1698
-	ldr	r3, .L1808+12
+	bne	.L1690
+	ldr	r3, .L1800+12
 	ldrh	r0, [r3]
 	cmp	r0, #0
-	bne	.L1699
+	bne	.L1691
 	ldr	r3, [r4, #2556]
-	ldr	r1, [r4, #2552]
+	ldr	r1, [r4, #2548]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1802
-.L1699:
-	ldr	r3, .L1808+16
+	bcs	.L1794
+.L1691:
+	ldr	r3, .L1800+16
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1802:
+.L1794:
 	strh	r3, [r4, r2]	@ movhi
 	mov	r3, #0
 	str	r3, [r4, #3168]
-.L1678:
-	ldr	r3, .L1808
+.L1670:
+	ldr	r3, .L1800
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1756
+	beq	.L1748
 	bl	__stack_chk_fail
-.L1680:
-	ldrh	r3, [r3, #128]
+.L1672:
+	ldrh	r3, [r3, #124]
 	cmp	r3, r2
-	beq	.L1683
+	beq	.L1675
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1683
+	beq	.L1675
 	mov	r0, #1
-	b	.L1678
-.L1681:
-	ldrh	r1, [r4, #226]
+	b	.L1670
+.L1673:
+	ldrh	r1, [r4, #222]
 	cmp	r1, r2
-	strheq	r3, [r4, #226]	@ movhi
+	strheq	r3, [r4, #222]	@ movhi
 	mvneq	r3, #0
-	strheq	r3, [r4, #224]	@ movhi
-	b	.L1682
-.L1690:
+	strheq	r3, [r4, #220]	@ movhi
+	b	.L1674
+.L1682:
 	mov	r3, #64
-.L1801:
+.L1793:
 	strh	r3, [r4, r7]	@ movhi
-	b	.L1689
-.L1687:
+	b	.L1681
+.L1679:
 	mov	r3, #80
-	b	.L1801
-.L1686:
+	b	.L1793
+.L1678:
 	movw	r0, #3156
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r0, [r4, r0]
 	lsl	r1, r5, #1
-	ldrh	r2, [r4, #228]
+	ldrh	r2, [r4, #224]
 	mov	r6, r5
 	ldrh	r3, [r3, r1]
 	str	r0, [sp, #4]
-	ldr	r0, [r4, #2540]
+	ldr	r0, [r4, #2536]
 	ldrh	r1, [r0, r1]
-	ldr	r0, .L1808+20
+	ldr	r0, .L1800+20
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1689
-.L1698:
-	ldr	r3, .L1808+16
+	b	.L1681
+.L1690:
+	ldr	r3, .L1800+16
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
 	strh	r3, [r4, r2]	@ movhi
-.L1697:
+.L1689:
 	movw	r3, #3210
 	movw	r6, #65535
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
 	addne	r5, r5, #32
 	uxthne	r5, r5
-.L1703:
-	ldrh	r3, [r4, #176]
+.L1695:
+	ldrh	r3, [r4, #172]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1712
+	bne	.L1704
 	cmp	r6, r3
-	strhne	r6, [r4, #176]	@ movhi
-	bne	.L1714
-	ldrh	r3, [r4, #226]
+	strhne	r6, [r4, #172]	@ movhi
+	bne	.L1706
+	ldrh	r3, [r4, #222]
 	cmp	r3, r6
-	beq	.L1714
-	ldr	r2, [r4, #76]
+	beq	.L1706
+	ldr	r2, [r4, #72]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
 	mvneq	r3, #0
-	strheq	r3, [r4, #226]	@ movhi
-	ldrh	r3, [r4, #226]
-	strh	r3, [r4, #176]	@ movhi
+	strheq	r3, [r4, #222]	@ movhi
+	ldrh	r3, [r4, #222]
+	strh	r3, [r4, #172]	@ movhi
 	mvn	r3, #0
-	strh	r3, [r4, #226]	@ movhi
-.L1714:
-	ldrh	r0, [r4, #176]
+	strh	r3, [r4, #222]	@ movhi
+.L1706:
+	ldrh	r0, [r4, #172]
 	mov	r3, #0
-	strb	r3, [r4, #184]
+	strb	r3, [r4, #180]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1712
+	beq	.L1704
 	bl	IsBlkInGcList
 	cmp	r0, #0
 	mvnne	r3, #0
-	strhne	r3, [r4, #176]	@ movhi
+	strhne	r3, [r4, #172]	@ movhi
 	movw	r3, #65535
-	ldrh	r2, [r4, #176]
+	ldrh	r2, [r4, #172]
 	cmp	r2, r3
-	beq	.L1712
-	ldr	r0, .L1808+24
+	beq	.L1704
+	ldr	r0, .L1800+24
 	bl	make_superblock
 	mov	r3, #0
 	movw	r2, #3666
 	strh	r3, [r4, r2]	@ movhi
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
-	ldrh	r3, [r4, #176]
-	ldr	r2, [r4, #76]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
+	ldrh	r3, [r4, #172]
+	ldr	r2, [r4, #72]
 	lsl	r3, r3, #1
 	ldrh	r2, [r2, r3]
 	movw	r3, #3668
 	strh	r2, [r4, r3]	@ movhi
-.L1712:
-	ldrh	r3, [r4, #176]
-	ldrh	r2, [r4, #28]
+.L1704:
+	ldrh	r3, [r4, #172]
+	ldrh	r2, [r4, #24]
 	cmp	r2, r3
-	beq	.L1718
-	ldrh	r2, [r4, #80]
+	beq	.L1710
+	ldrh	r2, [r4, #76]
 	cmp	r2, r3
-	beq	.L1718
-	ldrh	r2, [r4, #128]
+	beq	.L1710
+	ldrh	r2, [r4, #124]
 	cmp	r2, r3
-	bne	.L1719
-.L1718:
+	bne	.L1711
+.L1710:
 	mvn	r3, #0
-	strh	r3, [r4, #176]	@ movhi
-.L1719:
-	ldr	r7, .L1808+4
+	strh	r3, [r4, #172]	@ movhi
+.L1711:
+	ldr	r7, .L1800+4
 	mov	r4, r7
-.L1754:
-	ldrh	r2, [r7, #176]
+.L1746:
+	ldrh	r2, [r7, #172]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1720
-	ldr	fp, .L1808+28
+	bne	.L1712
+	ldr	fp, .L1800+28
 	mov	r3, #0
-	ldr	r10, .L1808+32
+	ldr	r10, .L1800+32
 	str	r3, [r7, #3168]
 	mov	r9, fp
-.L1721:
+.L1713:
 	ldrh	r8, [fp]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	movw	r1, #65535
 	cmp	r2, r1
-	strh	r2, [r4, #176]	@ movhi
-	bne	.L1722
+	strh	r2, [r4, #172]	@ movhi
+	bne	.L1714
 	mov	r3, #0
 	mov	r0, #8
 	strh	r3, [fp]	@ movhi
-	b	.L1678
-.L1692:
-	ldrh	r7, [r4, #128]
+	b	.L1670
+.L1684:
+	ldrh	r7, [r4, #124]
 	cmp	r7, r1
-	bne	.L1769
-	ldrh	r1, [r4, #226]
+	bne	.L1761
+	ldrh	r1, [r4, #222]
 	cmp	r1, r7
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L1769
-	ldrh	r3, [r4, #176]
+	beq	.L1761
+	ldrh	r3, [r4, #172]
 	cmp	r3, r7
-	beq	.L1704
-.L1709:
+	beq	.L1696
+.L1701:
 	mov	r6, r7
-.L1769:
+.L1761:
 	mov	r5, #1
-	b	.L1703
-.L1704:
+	b	.L1695
+.L1696:
 	str	r2, [r4, #3168]
 	movw	r2, #3156
-	ldrh	r1, [r4, #228]
+	ldrh	r1, [r4, #224]
 	ldrh	r3, [r4, r2]
-	ldr	r5, .L1808+12
+	ldr	r5, .L1800+12
 	cmp	r1, r3
-	bls	.L1705
+	bls	.L1697
 	ldrh	r3, [r5]
 	cmp	r3, #0
-	bne	.L1706
+	bne	.L1698
 	ldr	r3, [r4, #2556]
-	ldr	r1, [r4, #2552]
+	ldr	r1, [r4, #2548]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1803
-.L1706:
-	ldr	r3, .L1808+16
+	bcs	.L1795
+.L1698:
+	ldr	r3, .L1800+16
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1803:
+.L1795:
 	strh	r3, [r4, r2]	@ movhi
 	bl	FtlReadRefresh
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #4
-	bls	.L1705
-.L1805:
+	bls	.L1697
+.L1797:
 	ldrh	r0, [r5]
-	b	.L1678
-.L1705:
+	b	.L1670
+.L1697:
 	ldrh	r0, [r5]
 	cmp	r0, #0
-	bne	.L1709
-	ldr	r3, .L1808+16
+	bne	.L1701
+	ldr	r8, .L1800+16
 	movw	r2, #3156
-	ldrh	r6, [r3]
+	ldrh	r6, [r8]
+	sub	r8, r8, #2320
 	add	r3, r6, r6, lsl #1
 	asr	r3, r3, #2
 	strh	r3, [r4, r2]	@ movhi
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
+	ldrh	r1, [r8]
 	lsl	r0, r0, #1
 	ldrh	r2, [r3, r0]
-	ldr	r3, .L1808+36
-	ldrh	r1, [r3]
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	mul	r3, r3, r1
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1710
-	ldrh	r3, [r4, #228]
+	ble	.L1702
+	ldrh	r3, [r4, #224]
 	sub	r6, r6, #1
 	cmp	r3, r6
-	blt	.L1710
+	blt	.L1702
 	bl	FtlReadRefresh
-	b	.L1805
-.L1710:
+	b	.L1797
+.L1702:
 	cmp	r2, #0
-	bne	.L1709
+	bne	.L1701
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r0, [r4, #228]
+	ldrh	r0, [r4, #224]
 	add	r0, r0, #1
-	b	.L1678
-.L1722:
+	b	.L1670
+.L1714:
 	str	r0, [sp, #16]
 	mov	r0, r2
 	str	r2, [sp, #12]
@@ -11521,10 +11441,10 @@ rk_ftl_garbage_collect:
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #16]
 	strhne	r8, [fp]	@ movhi
-	bne	.L1721
+	bne	.L1713
 	uxth	r3, r3
-	ldrh	lr, [r4, #236]
-	ldr	r0, [r4, #76]
+	ldrh	lr, [r4, #232]
+	ldr	r0, [r4, #72]
 	uxth	r8, r8
 	lsl	r1, r3, #1
 	ldrh	r3, [r10]
@@ -11533,97 +11453,97 @@ rk_ftl_garbage_collect:
 	mul	r3, lr, r3
 	add	lr, r3, r3, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1725
+	bgt	.L1717
 	cmp	r8, #48
 	cmphi	ip, #8
-	bls	.L1726
-	ldr	ip, .L1808+40
+	bls	.L1718
+	ldr	ip, .L1800+36
 	ldrh	ip, [ip]
 	cmp	ip, #35
-	bhi	.L1726
-.L1725:
+	bhi	.L1718
+.L1717:
 	mov	ip, #0
 	strh	ip, [r9]	@ movhi
-.L1726:
+.L1718:
 	ldrh	r1, [r0, r1]
 	movw	r0, #65535
 	cmp	r3, r1
 	cmple	r6, r0
-	bne	.L1727
+	bne	.L1719
 	ldrh	r3, [r9]
 	cmp	r3, #3
-	bhi	.L1727
+	bhi	.L1719
 	mvn	r3, #0
-	strh	r3, [r4, #176]	@ movhi
+	strh	r3, [r4, #172]	@ movhi
 	mov	r3, #0
 	strh	r3, [r9]	@ movhi
-.L1807:
-	ldr	r3, .L1808+12
-	b	.L1806
-.L1727:
+.L1799:
+	ldr	r3, .L1800+12
+	b	.L1798
+.L1719:
 	cmp	r1, #0
-	bne	.L1728
+	bne	.L1720
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r9]
 	add	r3, r3, #1
 	strh	r3, [r9]	@ movhi
-	b	.L1721
-.L1728:
+	b	.L1713
+.L1720:
 	mov	r3, #0
-	strb	r3, [r4, #184]
-	ldrh	r3, [r4, #28]
+	strb	r3, [r4, #180]
+	ldrh	r3, [r4, #24]
 	cmp	r3, r2
-	bne	.L1729
+	bne	.L1721
 	movw	r2, #717
-	ldr	r1, .L1808+44
-	ldr	r0, .L1808+48
+	ldr	r1, .L1800+40
+	ldr	r0, .L1800+44
 	bl	sftl_printk
-.L1729:
-	ldrh	r2, [r4, #176]
-	ldrh	r3, [r4, #80]
+.L1721:
+	ldrh	r2, [r4, #172]
+	ldrh	r3, [r4, #76]
 	cmp	r2, r3
-	bne	.L1730
+	bne	.L1722
 	movw	r2, #718
-	ldr	r1, .L1808+44
-	ldr	r0, .L1808+48
+	ldr	r1, .L1800+40
+	ldr	r0, .L1800+44
 	bl	sftl_printk
-.L1730:
-	ldrh	r2, [r4, #176]
-	ldrh	r3, [r4, #128]
+.L1722:
+	ldrh	r2, [r4, #172]
+	ldrh	r3, [r4, #124]
 	cmp	r2, r3
-	bne	.L1731
+	bne	.L1723
 	movw	r2, #719
-	ldr	r1, .L1808+44
-	ldr	r0, .L1808+48
+	ldr	r1, .L1800+40
+	ldr	r0, .L1800+44
 	bl	sftl_printk
-.L1731:
-	ldr	r0, .L1808+24
+.L1723:
+	ldr	r0, .L1800+24
 	bl	make_superblock
-	ldrh	r2, [r4, #176]
+	ldrh	r2, [r4, #172]
 	mov	r3, #0
-	ldr	r1, .L1808+52
-	ldr	r0, [r4, #76]
+	ldr	r1, .L1800+48
+	ldr	r0, [r4, #72]
 	lsl	r2, r2, #1
 	strh	r3, [r1]	@ movhi
 	ldrh	r2, [r0, r2]
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
 	strh	r2, [r1, #2]	@ movhi
-.L1720:
+.L1712:
 	mov	r3, #1
 	str	r3, [r4, #3276]
-	ldr	r3, .L1808+32
+	ldr	r3, .L1800+32
 	ldrh	r3, [r3]
 	str	r3, [sp, #12]
 	ldr	r3, [sp, #20]
 	cmp	r3, #0
-	beq	.L1732
+	beq	.L1724
 	ldr	r2, [sp, #12]
-	ldrh	r3, [r4, #236]
-	ldr	r1, [r4, #76]
+	ldrh	r3, [r4, #232]
+	ldr	r1, [r4, #72]
 	mul	r3, r2, r3
-	ldrh	r2, [r4, #176]
+	ldrh	r2, [r4, #172]
 	lsl	r2, r2, #1
 	ldrh	r2, [r1, r2]
 	sub	r3, r3, r2
@@ -11632,8 +11552,8 @@ rk_ftl_garbage_collect:
 	movlt	r3, r2
 	add	r5, r5, r3, asr #2
 	uxth	r5, r5
-.L1732:
-	ldrh	r3, [r4, #178]
+.L1724:
+	ldrh	r3, [r4, #174]
 	ldr	r1, [sp, #12]
 	add	r2, r3, r5
 	cmp	r2, r1
@@ -11641,23 +11561,23 @@ rk_ftl_garbage_collect:
 	subgt	r5, r2, r3
 	mov	r3, #0
 	uxthgt	r5, r5
-.L1804:
+.L1796:
 	str	r3, [sp, #16]
 	ldrh	r3, [sp, #16]
 	cmp	r5, r3
-	bls	.L1742
+	bls	.L1734
 	ldr	r3, [sp, #16]
 	movw	r9, #65535
-	ldrh	r8, [r7, #178]
+	ldrh	r8, [r7, #174]
 	mov	r10, #20
-	ldrh	ip, [r7, #236]
+	ldrh	ip, [r7, #232]
 	ldr	r0, [r7, #3188]
 	add	r8, r8, r3
 	mov	r3, #0
-	ldr	r1, .L1808+56
+	ldr	r1, .L1800+52
 	mov	fp, r3
-	b	.L1743
-.L1736:
+	b	.L1735
+.L1728:
 	ldrh	r2, [r1, #2]!
 	add	r3, r3, #1
 	cmp	r2, r9
@@ -11666,43 +11586,43 @@ rk_ftl_garbage_collect:
 	strne	r2, [lr, #4]
 	addne	r2, fp, #1
 	uxthne	fp, r2
-.L1743:
+.L1735:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1736
+	bhi	.L1728
 	mov	r10, #0
-	ldrb	r2, [r7, #184]	@ zero_extendqisi2
+	ldrb	r2, [r7, #180]	@ zero_extendqisi2
 	mov	r1, fp
 	bl	FlashReadPages
-.L1737:
+.L1729:
 	uxth	r3, r10
 	cmp	fp, r3
 	ldrls	r3, [sp, #16]
 	addls	r3, r3, #1
-	bls	.L1804
-.L1741:
+	bls	.L1796
+.L1733:
 	mov	r8, #20
 	ldr	r3, [r7, #3188]
 	mul	r8, r8, r10
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	beq	.L1738
+	beq	.L1730
 	ldr	r9, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	bne	.L1738
+	bne	.L1730
 	ldr	r3, [r9, #8]
 	cmn	r3, #1
-	bne	.L1739
+	bne	.L1731
 	movw	r2, #753
-	ldr	r1, .L1808+44
-	ldr	r0, .L1808+48
+	ldr	r1, .L1800+40
+	ldr	r0, .L1800+44
 	str	r3, [sp, #24]
 	bl	sftl_printk
 	ldr	r3, [sp, #24]
-.L1739:
+.L1731:
 	mov	r2, #0
 	add	r1, sp, #36
 	mov	r0, r3
@@ -11712,9 +11632,9 @@ rk_ftl_garbage_collect:
 	add	r1, r1, r8
 	ldr	r2, [r1, #4]
 	cmp	r2, r3
-	bne	.L1738
-	ldr	r3, .L1808+52
-	ldr	r2, .L1808+52
+	bne	.L1730
+	ldr	r3, .L1800+48
+	ldr	r2, .L1800+48
 	ldr	r0, [r4, #3172]
 	ldrh	r3, [r3]
 	ldr	r1, [r1, #16]
@@ -11742,7 +11662,7 @@ rk_ftl_garbage_collect:
 	str	r2, [r3, #12]
 	ldr	r3, [sp, #36]
 	str	r3, [r9, #12]
-	ldrh	r3, [r4, #128]
+	ldrh	r3, [r4, #124]
 	strh	r3, [r9, #2]	@ movhi
 	ldr	r3, [r4, #2596]
 	ldr	r0, [r4, #3188]
@@ -11752,129 +11672,128 @@ rk_ftl_garbage_collect:
 	add	r3, r3, #1
 	str	r3, [r4, #3172]
 	bl	FtlGcBufAlloc
-	ldrb	r2, [r4, #135]	@ zero_extendqisi2
+	ldrb	r2, [r4, #131]	@ zero_extendqisi2
 	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L1740
-	ldrh	r3, [r4, #132]
+	beq	.L1732
+	ldrh	r3, [r4, #128]
 	cmp	r3, #0
-	bne	.L1738
-.L1740:
+	bne	.L1730
+.L1732:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	beq	.L1738
-	ldr	r3, .L1808+4
+	beq	.L1730
+	ldr	r3, .L1800+4
 	mov	r2, #0
 	mvn	r1, #0
 	str	r2, [r3, #3276]
-	strh	r1, [r3, #176]	@ movhi
-	strh	r2, [r3, #178]	@ movhi
+	strh	r1, [r3, #172]	@ movhi
+	strh	r2, [r3, #174]	@ movhi
 	add	r3, r3, #3664
-.L1806:
+.L1798:
 	ldrh	r0, [r3]
-	b	.L1678
-.L1738:
+	b	.L1670
+.L1730:
 	add	r10, r10, #1
-	b	.L1737
-.L1742:
-	ldrh	r3, [r7, #178]
+	b	.L1729
+.L1734:
+	ldrh	r3, [r7, #174]
 	add	r5, r5, r3
 	ldr	r3, [sp, #12]
 	uxth	r5, r5
 	cmp	r3, r5
-	strh	r5, [r7, #178]	@ movhi
-	bhi	.L1744
+	strh	r5, [r7, #174]	@ movhi
+	bhi	.L1736
 	ldr	r3, [r7, #3172]
 	cmp	r3, #0
-	beq	.L1745
+	beq	.L1737
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	movne	r3, #0
 	strne	r3, [r7, #3276]
-	bne	.L1807
-.L1745:
-	ldr	r3, .L1808+52
+	bne	.L1799
+.L1737:
+	ldr	r3, .L1800+48
 	ldrh	r5, [r3]
 	cmp	r5, #0
-	bne	.L1746
-	ldrh	r3, [r7, #176]
-	ldr	r2, [r7, #76]
+	bne	.L1738
+	ldrh	r3, [r7, #172]
+	ldr	r2, [r7, #72]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1746
-.L1747:
+	beq	.L1738
+.L1739:
 	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	bcs	.L1752
+	bcs	.L1744
 	mov	r2, #0
 	add	r1, sp, #40
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp, #40]
 	cmn	r0, #1
-	beq	.L1748
+	beq	.L1740
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r7, #176]
+	ldrh	r3, [r7, #172]
 	cmp	r3, r0
-	bne	.L1748
-.L1752:
+	bne	.L1740
+.L1744:
 	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	bcc	.L1746
-	ldrh	r3, [r7, #176]
+	bcc	.L1738
+	ldrh	r3, [r7, #172]
 	mov	r1, #0
-	ldr	r2, [r7, #76]
+	ldr	r2, [r7, #72]
 	lsl	r3, r3, #1
 	strh	r1, [r2, r3]	@ movhi
-	ldrh	r0, [r7, #176]
+	ldrh	r0, [r7, #172]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1746:
+.L1738:
 	mvn	r3, #0
-	strh	r3, [r7, #176]	@ movhi
-.L1744:
+	strh	r3, [r7, #172]	@ movhi
+.L1736:
 	mov	r3, #0
 	str	r3, [r7, #3276]
-	ldrh	r3, [r7, #228]
+	ldrh	r3, [r7, #224]
 	cmp	r3, #2
-	bhi	.L1753
-	ldr	r3, .L1808+32
+	bhi	.L1745
+	ldr	r3, .L1800+32
 	ldrh	r5, [r3]
-	b	.L1754
-.L1748:
+	b	.L1746
+.L1740:
 	add	r5, r5, #1
-	b	.L1747
-.L1753:
-	ldr	r2, .L1808+12
+	b	.L1739
+.L1745:
+	ldr	r2, .L1800+12
 	ldrh	r0, [r2]
 	cmp	r0, #0
 	addeq	r0, r3, #1
-	b	.L1678
-.L1756:
+	b	.L1670
+.L1748:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1809:
+.L1801:
 	.align	2
-.L1808:
+.L1800:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+3664
 	.word	.LANCHOR0+2624
 	.word	.LC124
-	.word	.LANCHOR0+176
+	.word	.LANCHOR0+172
 	.word	.LANCHOR0+3164
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+308
+	.word	.LANCHOR0+302
 	.word	.LANCHOR0+3200
 	.word	.LANCHOR1+568
 	.word	.LC8
 	.word	.LANCHOR0+3666
-	.word	.LANCHOR0+190
+	.word	.LANCHOR0+186
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
@@ -11890,7 +11809,7 @@ FtlRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r3
-	ldr	r3, .L1849
+	ldr	r3, .L1841
 	cmp	r0, #16
 	.pad #60
 	sub	sp, sp, #60
@@ -11898,38 +11817,38 @@ FtlRead:
 	str	r2, [sp, #4]
 	ldr	r3, [r3]
 	str	r3, [sp, #52]
-	bne	.L1811
+	bne	.L1803
 	mov	r2, r10
 	ldr	r1, [sp, #4]
 	add	r0, r5, #256
 	bl	FtlVendorPartRead
 	mov	r6, r0
-.L1810:
-	ldr	r3, .L1849
+.L1802:
+	ldr	r3, .L1841
 	mov	r0, r6
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1832
+	beq	.L1824
 	bl	__stack_chk_fail
-.L1811:
-	ldr	r4, .L1849+4
+.L1803:
+	ldr	r4, .L1841+4
 	ldr	r2, [sp, #4]
-	ldr	r3, [r4, #344]
+	ldr	r3, [r4, #340]
 	cmp	r2, r3
 	cmpls	r1, r3
 	movcs	r9, #1
 	movcc	r9, #0
-	bcs	.L1834
+	bcs	.L1826
 	add	r2, r1, r2
 	cmp	r3, r2
 	str	r2, [sp, #12]
-	bcc	.L1834
-	ldr	r3, .L1849+8
+	bcc	.L1826
+	ldr	r3, .L1841+8
 	ldr	r6, [r3]
 	cmn	r6, #1
-	beq	.L1810
-	movw	r3, #262
+	beq	.L1802
+	movw	r3, #258
 	mov	r0, r5
 	ldrh	r6, [r4, r3]
 	mov	r8, r9
@@ -11957,24 +11876,24 @@ FtlRead:
 	ldr	r3, [r4, #2560]
 	add	r3, r3, r2
 	str	r3, [r4, #2560]
-.L1813:
+.L1805:
 	ldr	r3, [sp, #8]
 	cmp	r3, #0
-	bne	.L1830
-	ldr	r3, .L1849+4
+	bne	.L1822
+	ldr	r3, .L1841+4
 	movw	r2, #3210
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	bne	.L1831
-	ldrh	r3, [r3, #228]
+	bne	.L1823
+	ldrh	r3, [r3, #224]
 	cmp	r3, #31
-	bhi	.L1810
-.L1831:
+	bhi	.L1802
+.L1823:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1810
-.L1830:
+	b	.L1802
+.L1822:
 	mov	r2, #0
 	add	r1, sp, #48
 	mov	r0, r7
@@ -11982,18 +11901,18 @@ FtlRead:
 	ldr	r3, [sp, #48]
 	cmn	r3, #1
 	moveq	fp, #0
-	beq	.L1815
+	beq	.L1807
 	ldr	r2, [r4, #3292]
 	mov	fp, #20
 	mla	fp, fp, r8, r2
 	str	r3, [fp, #4]
 	ldr	r3, [sp, #16]
 	cmp	r7, r3
-	bne	.L1819
+	bne	.L1811
 	ldr	r3, [r4, #3316]
 	mov	r0, r5
 	str	r3, [fp, #8]
-	ldr	r3, .L1849+12
+	ldr	r3, .L1841+12
 	ldrh	r3, [r3]
 	mov	r1, r3
 	str	r3, [sp, #28]
@@ -12007,8 +11926,8 @@ FtlRead:
 	cmp	r2, r3
 	str	r2, [sp, #28]
 	streq	r10, [fp, #8]
-.L1820:
-	ldr	r3, .L1849+16
+.L1812:
+	ldr	r3, .L1841+16
 	ldr	r2, [r4, #3340]
 	str	r7, [fp, #16]
 	ldrh	r3, [r3]
@@ -12017,8 +11936,8 @@ FtlRead:
 	bic	r3, r3, #3
 	add	r3, r2, r3
 	str	r3, [fp, #12]
-	b	.L1818
-.L1817:
+	b	.L1810
+.L1809:
 	mla	r0, r0, r7, fp
 	ldr	r2, [sp, #12]
 	cmp	r5, r0
@@ -12027,31 +11946,31 @@ FtlRead:
 	cmp	r2, r0
 	movls	r3, #0
 	cmp	r3, #0
-	beq	.L1816
+	beq	.L1808
 	sub	r0, r0, r5
 	mov	r2, #512
 	mov	r1, #0
 	add	r0, r10, r0, lsl #9
 	bl	ftl_memset
-.L1816:
+.L1808:
 	add	fp, fp, #1
-.L1815:
-	ldr	r3, .L1849+12
+.L1807:
+	ldr	r3, .L1841+12
 	ldrh	r0, [r3]
 	cmp	fp, r0
-	bcc	.L1817
-.L1818:
+	bcc	.L1809
+.L1810:
 	ldr	r3, [sp, #8]
 	add	r7, r7, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #8]
-	beq	.L1822
-	ldrh	r3, [r4, #236]
+	beq	.L1814
+	ldrh	r3, [r4, #232]
 	cmp	r8, r3, lsl #2
-	bne	.L1813
-.L1822:
+	bne	.L1805
+.L1814:
 	cmp	r8, #0
-	beq	.L1813
+	beq	.L1805
 	mov	r2, #0
 	mov	r1, r8
 	ldr	r0, [r4, #3292]
@@ -12065,7 +11984,7 @@ FtlRead:
 	ldr	r3, [sp, #28]
 	lsl	r3, r3, #9
 	str	r3, [sp, #36]
-.L1829:
+.L1821:
 	mov	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, fp
@@ -12073,20 +11992,20 @@ FtlRead:
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1824
+	bne	.L1816
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3316]
 	cmp	r1, r2
-	bne	.L1825
+	bne	.L1817
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1848:
+.L1840:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1825:
+.L1817:
 	ldr	r1, [r4, #3292]
 	add	r2, r1, r3
 	ldr	r0, [r2, #12]
@@ -12104,72 +12023,72 @@ FtlRead:
 	streq	r0, [r4, #2716]
 	ldr	r3, [r1, r3]
 	cmp	r3, #256
-	bne	.L1828
+	bne	.L1820
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1828:
+.L1820:
 	add	fp, fp, #1
 	cmp	r8, fp
-	bne	.L1829
+	bne	.L1821
 	mov	r8, #0
-	b	.L1813
-.L1819:
+	b	.L1805
+.L1811:
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
-	bne	.L1821
+	bne	.L1813
 	ldr	r3, [r4, #3320]
 	ldr	r1, [sp, #12]
 	str	r3, [fp, #8]
-	ldr	r3, .L1849+12
+	ldr	r3, .L1841+12
 	ldrh	r2, [r3]
 	mul	r3, r2, r7
 	sub	r9, r1, r3
 	cmp	r2, r9
-	bne	.L1820
-.L1847:
+	bne	.L1812
+.L1839:
 	sub	r3, r3, r5
 	add	r3, r10, r3, lsl #9
 	str	r3, [fp, #8]
-	b	.L1820
-.L1821:
-	ldr	r3, .L1849+12
+	b	.L1812
+.L1813:
+	ldr	r3, .L1841+12
 	ldrh	r3, [r3]
 	mul	r3, r7, r3
-	b	.L1847
-.L1824:
+	b	.L1839
+.L1816:
 	ldr	r0, [sp, #20]
 	cmp	r0, r1
-	bne	.L1825
+	bne	.L1817
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3320]
 	cmp	r1, r2
-	bne	.L1825
+	bne	.L1817
 	str	r3, [sp, #44]
-	ldr	r3, .L1849+12
+	ldr	r3, .L1841+12
 	ldr	r2, [sp, #40]
 	ldrh	r0, [r3]
 	ldr	r3, [sp, #20]
 	mul	r0, r3, r0
 	sub	r0, r0, r5
 	add	r0, r10, r0, lsl #9
-	b	.L1848
-.L1834:
+	b	.L1840
+.L1826:
 	mvn	r6, #0
-	b	.L1810
-.L1832:
+	b	.L1802
+.L1824:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1850:
+.L1842:
 	.align	2
-.L1849:
+.L1841:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR0+262
-	.word	.LANCHOR0+316
+	.word	.LANCHOR0+258
+	.word	.LANCHOR0+312
 	.fnend
 	.size	FtlRead, .-FtlRead
 	.align	2
@@ -12207,40 +12126,40 @@ FtlWrite:
 	str	r3, [sp, #12]
 	cmp	r0, #16
 	mov	r10, r1
-	ldr	r3, .L1907
+	ldr	r3, .L1899
 	str	r2, [sp, #8]
 	ldr	r3, [r3]
 	str	r3, [sp, #68]
-	bne	.L1853
+	bne	.L1845
 	ldr	r2, [sp, #12]
 	add	r0, r10, #256
 	ldr	r1, [sp, #8]
 	bl	FtlVendorPartWrite
-.L1852:
-	ldr	r3, .L1907
+.L1844:
+	ldr	r3, .L1899
 	ldr	r2, [sp, #68]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1889
+	beq	.L1881
 	bl	__stack_chk_fail
-.L1853:
-	ldr	r4, .L1907+4
+.L1845:
+	ldr	r4, .L1899+4
 	ldr	r2, [sp, #8]
-	ldr	r3, [r4, #344]
+	ldr	r3, [r4, #340]
 	cmp	r2, r3
 	cmpls	r1, r3
-	bcs	.L1891
+	bcs	.L1883
 	add	r6, r1, r2
 	cmp	r3, r6
-	bcc	.L1891
-	ldr	r5, .L1907+8
+	bcc	.L1883
+	ldr	r5, .L1899+8
 	ldr	r0, [r5]
 	cmn	r0, #1
-	beq	.L1852
+	beq	.L1844
 	mov	r3, #2048
 	mov	r0, r10
 	str	r3, [r4, #3672]
-	movw	r3, #262
+	movw	r3, #258
 	ldrh	r7, [r4, r3]
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -12262,67 +12181,67 @@ FtlWrite:
 	str	r3, [r4, #2568]
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	addeq	r4, r4, #28
-	beq	.L1855
-	ldrh	r3, [r4, #32]
+	addeq	r4, r4, #24
+	beq	.L1847
+	ldrh	r3, [r4, #28]
 	cmp	r3, #0
-	addne	r4, r4, #28
-	addeq	r4, r4, #80
-.L1855:
+	addne	r4, r4, #24
+	addeq	r4, r4, #76
+.L1847:
 	ldr	r7, [sp, #4]
-	ldr	r5, .L1907+4
-.L1856:
+	ldr	r5, .L1899+4
+.L1848:
 	cmp	fp, #0
-	bne	.L1884
+	bne	.L1876
 	ldr	r1, [sp, #24]
 	mov	r0, fp
 	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r5, #228]
+	ldrh	r3, [r5, #224]
 	cmp	r3, #5
 	movls	r4, #256
-	ldrls	r6, .L1907+12
-	bls	.L1888
-.L1887:
+	ldrls	r6, .L1899+12
+	bls	.L1880
+.L1879:
 	mov	r0, #0
-	b	.L1852
-.L1884:
+	b	.L1844
+.L1876:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r5, #236]
+	ldrh	r3, [r5, #232]
 	cmp	r2, r3
-	bcc	.L1857
+	bcc	.L1849
 	movw	r2, #1041
-	ldr	r1, .L1907+16
-	ldr	r0, .L1907+20
+	ldr	r1, .L1899+16
+	ldr	r0, .L1899+20
 	bl	sftl_printk
-.L1857:
+.L1849:
 	ldrh	r2, [r4, #4]
 	cmp	r2, #0
-	bne	.L1858
-	ldr	r3, .L1907+24
-	ldr	r6, .L1907+8
+	bne	.L1850
+	ldr	r3, .L1899+24
+	ldr	r6, .L1899+8
 	cmp	r4, r3
-	bne	.L1859
-	ldrh	r8, [r5, #84]
+	bne	.L1851
+	ldrh	r8, [r5, #80]
 	cmp	r8, #0
-	bne	.L1860
+	bne	.L1852
 	add	r0, r4, #52
 	bl	allocate_new_data_superblock
 	str	r8, [r6, #8]
-.L1860:
-	ldr	r0, .L1907+24
+.L1852:
+	ldr	r0, .L1899+24
 	bl	allocate_new_data_superblock
-	ldr	r4, .L1907+24
+	ldr	r4, .L1899+24
 	ldr	r2, [r6, #8]
 	add	r3, r4, #52
 	cmp	r2, #0
 	movne	r4, r3
-.L1861:
+.L1853:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1858
+	bne	.L1850
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1858:
+.L1850:
 	ldrb	r2, [r4, #7]	@ zero_extendqisi2
 	ldrh	r3, [r4, #4]
 	lsl	r2, r2, #2
@@ -12332,22 +12251,22 @@ FtlWrite:
 	movcc	r3, r2
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	str	r3, [sp, #36]
-	ldrh	r3, [r5, #236]
+	ldrh	r3, [r5, #232]
 	cmp	r2, r3
-	bcc	.L1862
+	bcc	.L1854
 	movw	r2, #1074
-	ldr	r1, .L1907+16
-	ldr	r0, .L1907+20
+	ldr	r1, .L1899+16
+	ldr	r0, .L1899+20
 	bl	sftl_printk
-.L1862:
+.L1854:
 	mov	r3, #0
-.L1906:
+.L1898:
 	str	r3, [sp]
 	ldr	r3, [sp]
 	ldr	r2, [sp, #36]
 	cmp	r3, r2
-	bne	.L1882
-.L1864:
+	bne	.L1874
+.L1856:
 	mov	r3, r4
 	mov	r2, #0
 	ldr	r1, [sp]
@@ -12355,28 +12274,28 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [sp]
 	cmp	r3, fp
-	bls	.L1883
+	bls	.L1875
 	mov	r2, #1152
-	ldr	r1, .L1907+16
-	ldr	r0, .L1907+20
+	ldr	r1, .L1899+16
+	ldr	r0, .L1899+20
 	bl	sftl_printk
-.L1883:
+.L1875:
 	ldr	r3, [sp]
 	sub	fp, fp, r3
-	b	.L1856
-.L1859:
+	b	.L1848
+.L1851:
 	str	r2, [r6, #8]
-	ldrh	r2, [r5, #32]
+	ldrh	r2, [r5, #28]
 	cmp	r2, #0
 	movne	r4, r3
-	bne	.L1858
+	bne	.L1850
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-	b	.L1861
-.L1882:
+	b	.L1853
+.L1874:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1864
+	beq	.L1856
 	mov	r2, #0
 	add	r1, sp, #44
 	mov	r0, r7
@@ -12384,7 +12303,7 @@ FtlWrite:
 	bl	log2phys
 	mov	r0, r4
 	bl	get_new_active_ppa
-	ldr	r2, .L1907+28
+	ldr	r2, .L1899+28
 	ldr	r1, [sp]
 	ldr	r3, [sp]
 	ldrh	r2, [r2]
@@ -12408,10 +12327,10 @@ FtlWrite:
 	ldr	r2, [sp, #20]
 	cmp	r7, r2
 	cmpne	r7, r3
-	bne	.L1865
+	bne	.L1857
 	cmp	r7, r3
-	bne	.L1866
-	ldr	r3, .L1907+32
+	bne	.L1858
+	ldr	r3, .L1899+32
 	mov	r0, r10
 	ldrh	r6, [r3]
 	mov	r1, r6
@@ -12421,33 +12340,33 @@ FtlWrite:
 	str	r1, [sp, #16]
 	cmp	r6, r3
 	movcs	r6, r3
-.L1867:
-	ldr	r3, .L1907+32
+.L1859:
+	ldr	r3, .L1899+32
 	ldrh	r3, [r3]
 	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	bne	.L1868
+	bne	.L1860
 	cmp	r7, r3
 	ldr	r3, [r5, #3300]
 	add	r8, r3, r8
 	ldreq	r3, [sp, #12]
-	beq	.L1903
+	beq	.L1895
 	mul	r6, r6, r7
 	ldr	r3, [sp, #12]
 	sub	r6, r6, r10
 	add	r6, r3, r6, lsl #9
 	str	r6, [r8, #8]
-.L1870:
+.L1862:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r5, #236]
+	ldrh	r3, [r5, #232]
 	cmp	r2, r3
-	bcc	.L1879
+	bcc	.L1871
 	movw	r2, #1143
-	ldr	r1, .L1907+16
-	ldr	r0, .L1907+20
+	ldr	r1, .L1899+16
+	ldr	r0, .L1899+20
 	bl	sftl_printk
-.L1879:
-	ldr	r3, .L1907+36
+.L1871:
+	ldr	r3, .L1899+36
 	ldr	r2, [sp, #32]
 	ldr	r1, [sp, #28]
 	strh	r3, [r2, r1]	@ movhi
@@ -12465,19 +12384,19 @@ FtlWrite:
 	strh	r3, [r9, #2]	@ movhi
 	ldr	r3, [sp]
 	add	r3, r3, #1
-	b	.L1906
-.L1866:
+	b	.L1898
+.L1858:
 	ldr	r3, [sp, #8]
 	add	r6, r10, r3
-	ldr	r3, .L1907+32
+	ldr	r3, .L1899+32
 	ldrh	r2, [r3]
 	mov	r3, #0
 	str	r3, [sp, #16]
 	smulbb	r2, r2, r7
 	sub	r6, r6, r2
 	uxth	r6, r6
-	b	.L1867
-.L1868:
+	b	.L1859
+.L1860:
 	cmp	r7, r3
 	ldr	r3, [r5, #3300]
 	ldreq	r2, [r5, #3316]
@@ -12486,7 +12405,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #44]
 	cmn	r3, #1
-	beq	.L1873
+	beq	.L1865
 	str	r3, [sp, #52]
 	mov	r1, #1
 	ldr	r3, [r5, #3300]
@@ -12501,59 +12420,59 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #48]
 	cmn	r3, #1
-	bne	.L1874
+	bne	.L1866
 	ldr	r2, [r5, #2716]
-	ldr	r0, .L1907+40
+	ldr	r0, .L1899+40
 	add	r2, r2, #1
 	str	r2, [r5, #2716]
 	mov	r2, r7
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1877:
+.L1869:
 	ldr	r3, [sp, #4]
 	lsl	r2, r6, #9
 	cmp	r7, r3
-	bne	.L1878
+	bne	.L1870
 	ldr	r3, [r5, #3300]
 	ldr	r1, [sp, #12]
 	add	r8, r3, r8
 	ldr	r3, [sp, #16]
 	ldr	r0, [r8, #8]
 	add	r0, r0, r3, lsl #9
-.L1904:
+.L1896:
 	bl	ftl_memcpy
-	b	.L1870
-.L1874:
+	b	.L1862
+.L1866:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1876
+	beq	.L1868
 	ldr	r3, [r5, #2716]
 	mov	r2, r7
-	ldr	r0, .L1907+44
+	ldr	r0, .L1899+44
 	add	r3, r3, #1
 	str	r3, [r5, #2716]
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1876:
+.L1868:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1877
+	beq	.L1869
 	movw	r2, #1128
-	ldr	r1, .L1907+16
-	ldr	r0, .L1907+20
+	ldr	r1, .L1899+16
+	ldr	r0, .L1899+20
 	bl	sftl_printk
-	b	.L1877
-.L1873:
+	b	.L1869
+.L1865:
 	ldr	r3, [r5, #3300]
 	mov	r1, #0
-	ldr	r2, .L1907+48
+	ldr	r2, .L1899+48
 	add	r3, r3, r8
 	ldrh	r2, [r2]
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1877
-.L1878:
-	ldr	r3, .L1907+32
+	b	.L1869
+.L1870:
+	ldr	r3, .L1899+32
 	ldrh	r1, [r3]
 	ldr	r3, [r5, #3300]
 	mul	r1, r7, r1
@@ -12562,33 +12481,33 @@ FtlWrite:
 	ldr	r0, [r8, #8]
 	sub	r1, r1, r10
 	add	r1, r3, r1, lsl #9
-	b	.L1904
-.L1865:
+	b	.L1896
+.L1857:
 	ldr	r3, [r5, #3300]
 	ldr	r2, [sp, #12]
 	add	r8, r3, r8
-	ldr	r3, .L1907+32
+	ldr	r3, .L1899+32
 	ldrh	r3, [r3]
 	mul	r3, r7, r3
 	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
-.L1903:
+.L1895:
 	str	r3, [r8, #8]
-	b	.L1870
-.L1888:
-	ldrh	r3, [r5, #176]
+	b	.L1862
+.L1880:
+	ldrh	r3, [r5, #172]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1886
-	ldrh	r2, [r5, #226]
+	bne	.L1878
+	ldrh	r2, [r5, #222]
 	cmp	r2, r3
-	bne	.L1886
+	bne	.L1878
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1886:
-	ldr	r2, .L1907+52
+.L1878:
+	ldr	r2, .L1899+52
 	mov	r1, #1
 	mov	r3, #128
 	mov	r0, r1
@@ -12598,35 +12517,35 @@ FtlWrite:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r5, #228]
+	ldrh	r3, [r5, #224]
 	cmp	r3, #2
-	bhi	.L1887
+	bhi	.L1879
 	subs	r4, r4, #1
-	bne	.L1888
-	b	.L1887
-.L1891:
+	bne	.L1880
+	b	.L1879
+.L1883:
 	mvn	r0, #0
-	b	.L1852
-.L1889:
+	b	.L1844
+.L1881:
 	add	sp, sp, #76
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1908:
+.L1900:
 	.align	2
-.L1907:
+.L1899:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+3158
 	.word	.LANCHOR1+591
 	.word	.LC8
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+316
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+312
+	.word	.LANCHOR0+258
 	.word	-3947
 	.word	.LC125
 	.word	.LC126
-	.word	.LANCHOR0+314
+	.word	.LANCHOR0+310
 	.word	.LANCHOR0+3156
 	.fnend
 	.size	FtlWrite, .-FtlWrite
@@ -12659,49 +12578,49 @@ FtlLoadSysInfo:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r1, #0
-	ldr	r4, .L1941
+	ldr	r4, .L1933
 	.pad #20
 	sub	sp, sp, #20
-	movw	r7, #2628
+	movw	r6, #2628
 	ldr	r3, [r4, #3304]
-	ldrh	r2, [r4, #244]
-	ldr	r0, [r4, #76]
+	ldrh	r2, [r4, #240]
+	ldr	r0, [r4, #72]
 	str	r3, [r4, #3464]
 	ldr	r3, [r4, #3336]
 	lsl	r2, r2, #1
 	str	r3, [r4, #3468]
 	bl	ftl_memset
-	ldrh	r0, [r4, r7]
+	ldrh	r0, [r4, r6]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1911
-.L1922:
+	bne	.L1903
+.L1914:
 	mvn	r0, #0
-.L1910:
+.L1902:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1911:
+.L1903:
 	mov	r1, #1
-	ldr	r9, .L1941+4
+	ldr	r9, .L1933+4
 	bl	FtlGetLastWrittenPage
-	ldr	r10, .L1941+8
+	ldr	r10, .L1933+8
 	add	r8, r4, #3456
-	ldrsh	r7, [r4, r7]
+	ldrsh	r6, [r4, r6]
 	sxth	r5, r0
-	ldr	r6, .L1941+12
+	ldr	r7, .L1933+12
 	add	r0, r0, #1
-	strh	r0, [r6, #2]	@ movhi
-.L1913:
+	strh	r0, [r7, #2]	@ movhi
+.L1905:
 	cmp	r5, #0
-	bge	.L1919
-	movw	r2, #1465
-	ldr	r1, .L1941+16
-	ldr	r0, .L1941+20
+	bge	.L1911
+	movw	r2, #1467
+	ldr	r1, .L1933+16
+	ldr	r0, .L1933+20
 	bl	sftl_printk
-	b	.L1918
-.L1919:
-	orr	r3, r5, r7, lsl #10
+	b	.L1910
+.L1911:
+	orr	r3, r5, r6, lsl #10
 	mov	r2, #1
 	mov	r1, r2
 	str	r3, [r4, #3460]
@@ -12712,216 +12631,205 @@ FtlLoadSysInfo:
 	ldr	r3, [r4, #3468]
 	ldr	fp, [r3, #12]
 	cmp	fp, #0
-	beq	.L1914
+	beq	.L1906
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L1914
+	beq	.L1906
 	ldrh	r1, [r10]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	cmp	fp, r0
-	beq	.L1914
+	beq	.L1906
 	str	r0, [sp, #8]
-	mov	r2, r7
+	mov	r2, r6
 	str	fp, [sp, #4]
-	ldrh	r3, [r6, #4]
-	ldr	r1, .L1941+16
-	ldr	r0, .L1941+24
+	ldrh	r3, [r7, #4]
+	ldr	r1, .L1933+16
+	ldr	r0, .L1933+24
 	str	r3, [sp]
 	mov	r3, r5
 	bl	sftl_printk
 	cmp	r5, #0
-	bne	.L1915
-	ldrh	r3, [r6, #4]
-	cmp	r7, r3
-	beq	.L1915
-	sxth	r7, r3
-	ldr	r3, .L1941+28
+	bne	.L1907
+	ldrh	r3, [r7, #4]
+	cmp	r6, r3
+	beq	.L1907
+	sxth	r6, r3
+	ldr	r3, .L1933+28
 	ldrh	r5, [r3]
-.L1917:
+.L1909:
 	sub	r5, r5, #1
 	sxth	r5, r5
-	b	.L1913
-.L1915:
+	b	.L1905
+.L1907:
 	mvn	r3, #0
 	str	r3, [r4, #3456]
-.L1914:
+.L1906:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L1917
+	beq	.L1909
 	ldr	r3, [r4, #3304]
 	ldr	r3, [r3]
 	cmp	r3, r9
-	bne	.L1917
+	bne	.L1909
 	ldr	r3, [r4, #3336]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L1917
-.L1918:
-	movw	r2, #314
-	ldrh	r3, [r4, #244]
+	bne	.L1909
+.L1910:
+	movw	r2, #310
+	ldrh	r3, [r4, #240]
 	ldrh	r2, [r4, r2]
 	add	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1921
-	movw	r2, #1467
-	ldr	r1, .L1941+16
-	ldr	r0, .L1941+20
+	bcs	.L1913
+	movw	r2, #1469
+	ldr	r1, .L1933+16
+	ldr	r0, .L1933+20
 	bl	sftl_printk
-.L1921:
-	ldr	r5, .L1941+32
+.L1913:
+	ldr	r5, .L1933+32
 	mov	r2, #48
 	ldr	r1, [r4, #3464]
 	mov	r0, r5
 	bl	ftl_memcpy
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	ldr	r1, [r4, #3464]
-	ldr	r0, [r4, #76]
+	ldr	r0, [r4, #72]
 	lsl	r2, r2, #1
 	add	r1, r1, #48
 	bl	ftl_memcpy
-	ldrh	r1, [r4, #244]
-	ldr	r3, [r4, #3464]
-	ldr	r0, [r4, #24]
-	lsr	r2, r1, #3
-	add	r1, r1, #24
-	lsl	r1, r1, #1
-	add	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r3, r1
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2472]
-	ldr	r3, .L1941+4
+	ldr	r2, [r4, #2468]
+	ldr	r3, .L1933+4
 	cmp	r2, r3
-	bne	.L1922
-	movw	r3, #258
-	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
-	ldrh	r3, [r4, r3]
-	ldrh	r7, [r5, #8]
+	bne	.L1914
+	ldrb	r2, [r4, #2478]	@ zero_extendqisi2
+	ldrh	r3, [r4, #254]
+	ldrh	r6, [r5, #8]
 	cmp	r2, r3
-	strh	r7, [r6, #6]	@ movhi
-	bne	.L1922
-	movw	r3, #306
-	movw	r2, #262
+	strh	r6, [r7, #6]	@ movhi
+	bne	.L1914
+	movw	r3, #302
+	movw	r2, #258
 	ldrh	r3, [r4, r3]
+	add	r8, r5, #156
 	ldrh	r2, [r4, r2]
-	ldr	r6, [r4, #248]
-	str	r7, [r4, #3676]
-	mul	r3, r7, r3
-	ldrh	r1, [r4, #236]
+	ldr	r7, [r4, #244]
+	str	r6, [r4, #3676]
+	mul	r3, r6, r3
+	ldrh	r1, [r4, #232]
 	str	r3, [r4, #2556]
 	mul	r3, r3, r2
-	str	r3, [r4, #344]
-	ldr	r3, .L1941+36
+	str	r3, [r4, #340]
+	sub	r3, r8, #2272
 	ldrh	r0, [r3, #6]
-	sub	r0, r6, r0
-	sub	r0, r0, r7
+	sub	r0, r7, r0
+	sub	r0, r0, r6
 	bl	__aeabi_uidiv
-	cmp	r7, r6
-	strh	r0, [r5, #152]	@ movhi
-	bls	.L1923
-	movw	r2, #1489
-	ldr	r1, .L1941+16
-	ldr	r0, .L1941+20
+	cmp	r6, r7
+	strh	r0, [r5, #156]	@ movhi
+	bls	.L1915
+	movw	r2, #1491
+	ldr	r1, .L1933+16
+	ldr	r0, .L1933+20
 	bl	sftl_printk
-.L1923:
+.L1915:
 	ldrh	r3, [r5, #16]
 	ldrh	r1, [r5, #14]
 	lsr	r2, r3, #6
 	and	r3, r3, #63
-	strb	r3, [r4, #34]
-	strh	r2, [r4, #30]	@ movhi
+	strb	r3, [r4, #30]
+	strh	r2, [r4, #26]	@ movhi
 	ldrh	r2, [r5, #18]
-	ldrb	r3, [r4, #2483]	@ zero_extendqisi2
-	strh	r1, [r4, #28]	@ movhi
-	strh	r2, [r4, #80]	@ movhi
+	ldrb	r3, [r4, #2479]	@ zero_extendqisi2
+	strh	r1, [r4, #24]	@ movhi
+	strh	r2, [r4, #76]	@ movhi
 	ldrh	r2, [r5, #20]
-	strb	r3, [r4, #36]
+	strb	r3, [r4, #32]
 	mvn	r3, #0
-	strh	r3, [r4, #176]	@ movhi
+	strh	r3, [r4, #172]	@ movhi
 	mov	r3, #0
-	strh	r3, [r4, #178]	@ movhi
+	strh	r3, [r4, #174]	@ movhi
 	lsr	r0, r2, #6
 	and	r2, r2, #63
-	strb	r2, [r4, #86]
-	ldrb	r2, [r4, #2484]	@ zero_extendqisi2
-	strh	r0, [r4, #82]	@ movhi
-	strb	r3, [r4, #182]
-	strb	r2, [r4, #88]
+	strb	r2, [r4, #82]
+	ldrb	r2, [r4, #2480]	@ zero_extendqisi2
+	strh	r0, [r4, #78]	@ movhi
+	strb	r3, [r4, #178]
+	strb	r2, [r4, #84]
 	ldrh	r2, [r5, #22]
-	strb	r3, [r4, #184]
+	strb	r3, [r4, #180]
 	str	r3, [r4, #2580]
-	strh	r2, [r4, #128]	@ movhi
+	strh	r2, [r4, #124]	@ movhi
 	ldrh	r2, [r5, #24]
 	str	r3, [r4, #2568]
 	str	r3, [r4, #2560]
 	str	r3, [r4, #2576]
 	lsr	r0, r2, #6
 	and	r2, r2, #63
-	strb	r2, [r4, #134]
-	ldrb	r2, [r4, #2485]	@ zero_extendqisi2
+	strb	r2, [r4, #130]
+	ldrb	r2, [r4, #2481]	@ zero_extendqisi2
 	str	r3, [r4, #2604]
-	strh	r0, [r4, #130]	@ movhi
-	strb	r2, [r4, #136]
-	ldr	r2, [r4, #2504]
+	strh	r0, [r4, #126]	@ movhi
+	strb	r2, [r4, #132]
+	ldr	r2, [r4, #2500]
 	str	r2, [r4, #2600]
 	str	r3, [r4, #2616]
 	ldr	r2, [r4, #2592]
 	str	r3, [r4, #2572]
-	ldr	r3, [r4, #2512]
+	ldr	r3, [r4, #2508]
 	cmp	r3, r2
 	ldr	r2, [r4, #2596]
 	strhi	r3, [r4, #2592]
-	ldr	r3, [r4, #2508]
+	ldr	r3, [r4, #2504]
 	cmp	r3, r2
 	strhi	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1926
-	ldr	r0, .L1941+40
+	beq	.L1918
+	ldr	r0, .L1933+36
 	bl	make_superblock
-.L1926:
-	ldrh	r2, [r4, #80]
+.L1918:
+	ldrh	r2, [r4, #76]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1927
-	ldr	r0, .L1941+44
+	beq	.L1919
+	ldr	r0, .L1933+40
 	bl	make_superblock
-.L1927:
-	ldrh	r2, [r4, #128]
+.L1919:
+	ldrh	r2, [r4, #124]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1928
-	ldr	r0, .L1941+48
+	beq	.L1920
+	ldr	r0, .L1933+44
 	bl	make_superblock
-.L1928:
-	ldrh	r2, [r4, #176]
+.L1920:
+	ldrh	r2, [r4, #172]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1929
-	ldr	r0, .L1941+52
+	beq	.L1921
+	ldr	r0, .L1933+48
 	bl	make_superblock
-.L1929:
+.L1921:
 	mov	r0, #0
-	b	.L1910
-.L1942:
+	b	.L1902
+.L1934:
 	.align	2
-.L1941:
+.L1933:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	.LANCHOR0+314
+	.word	.LANCHOR0+310
 	.word	.LANCHOR0+2628
 	.word	.LANCHOR1+600
 	.word	.LC8
 	.word	.LC127
-	.word	.LANCHOR0+308
-	.word	.LANCHOR0+2472
-	.word	.LANCHOR0+356
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
-	.word	.LANCHOR0+128
-	.word	.LANCHOR0+176
+	.word	.LANCHOR0+304
+	.word	.LANCHOR0+2468
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
+	.word	.LANCHOR0+124
+	.word	.LANCHOR0+172
 	.fnend
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
@@ -12942,11 +12850,11 @@ FtlMapTblRecovery:
 	mov	r4, r0
 	mov	r1, #0
 	mov	r7, #0
-	ldr	r5, .L1985
+	ldr	r5, .L1977
 	str	r3, [sp, #12]
 	ldr	r3, [r0, #16]
 	ldr	r8, [r0, #12]
-	add	r10, r5, #308
+	add	r10, r5, #304
 	str	r3, [sp, #24]
 	ldrh	r3, [r0, #6]
 	str	r3, [sp, #16]
@@ -12967,20 +12875,20 @@ FtlMapTblRecovery:
 	mov	r3, #1
 	str	r7, [r4, #28]
 	str	r3, [r4, #36]
-.L1944:
+.L1936:
 	ldr	r3, [sp, #20]
 	sxth	r6, r7
 	cmp	r6, r3
-	bge	.L1963
+	bge	.L1955
 	ldr	r3, [sp, #20]
 	sub	r3, r3, #1
 	cmp	r6, r3
 	lsl	r3, r6, #1
-	bne	.L1945
+	bne	.L1937
 	ldrh	r0, [r8, r3]
 	mov	r1, #1
 	add	r9, r8, r3
-	ldr	r5, .L1985
+	ldr	r5, .L1977
 	bl	FtlGetLastWrittenPage
 	sxth	r3, r0
 	add	r0, r0, #1
@@ -12992,23 +12900,23 @@ FtlMapTblRecovery:
 	strh	r0, [r4, #2]	@ movhi
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r4, #28]
-.L1946:
+.L1938:
 	ldr	r3, [sp, #20]
 	sxth	r8, r7
 	add	r2, r3, #1
 	cmp	r8, r2
-	blt	.L1949
-.L1963:
+	blt	.L1941
+.L1955:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
-	ldr	r3, .L1985+4
+	ldr	r3, .L1977+4
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1951
+	bne	.L1943
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1951:
+.L1943:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -13017,7 +12925,7 @@ FtlMapTblRecovery:
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1949:
+.L1941:
 	ldrh	r2, [r9]
 	mov	r0, r10
 	orr	r2, r8, r2, lsl #10
@@ -13029,46 +12937,46 @@ FtlMapTblRecovery:
 	ldr	r2, [r2, #12]
 	cmp	r2, #0
 	str	r2, [sp, #24]
-	beq	.L1947
+	beq	.L1939
 	ldr	r1, [r5, #3456]
 	cmn	r1, #1
-	beq	.L1947
-	ldr	r3, .L1985+8
+	beq	.L1939
+	ldr	r3, .L1977+8
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r3]
 	bl	js_hash
 	ldr	r2, [sp, #24]
 	cmp	r2, r0
-	beq	.L1947
+	beq	.L1939
 	str	r0, [sp, #4]
 	mov	r3, r8
 	str	r2, [sp]
 	mov	r2, r6
-	ldr	r1, .L1985+12
-	ldr	r0, .L1985+16
+	ldr	r1, .L1977+12
+	ldr	r0, .L1977+16
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r5, #3456]
-.L1947:
+.L1939:
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	beq	.L1948
+	beq	.L1940
 	ldrh	r3, [fp, #8]
 	ldr	r2, [sp, #16]
 	cmp	r2, r3
-	bls	.L1948
+	bls	.L1940
 	ldrh	r1, [fp]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
 	ldreq	r2, [r5, #3460]
 	ldreq	r1, [sp, #12]
 	streq	r2, [r1, r3, lsl #2]
-.L1948:
+.L1940:
 	add	r7, r7, #1
-	b	.L1946
-.L1945:
+	b	.L1938
+.L1937:
 	ldr	r2, [r5, #3304]
-	ldr	r0, .L1985+20
+	ldr	r0, .L1977+20
 	str	r2, [r5, #3464]
 	add	r2, r8, r3
 	str	r2, [sp, #28]
@@ -13082,24 +12990,24 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	beq	.L1965
+	beq	.L1957
 	ldrh	r2, [fp]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1965
+	bne	.L1957
 	ldrh	r2, [fp, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	beq	.L1953
-.L1965:
+	beq	.L1945
+.L1957:
 	mov	r9, #0
-.L1954:
+.L1946:
 	ldrh	r2, [r10]
 	sxth	r3, r9
 	cmp	r3, r2
-	bge	.L1961
+	bge	.L1953
 	ldr	r2, [sp, #28]
-	ldr	r0, .L1985+20
+	ldr	r0, .L1977+20
 	str	r3, [sp, #36]
 	ldrh	r2, [r2]
 	orr	r2, r3, r2, lsl #10
@@ -13111,56 +13019,56 @@ FtlMapTblRecovery:
 	ldr	r2, [r2, #12]
 	cmp	r2, #0
 	str	r2, [sp, #32]
-	beq	.L1958
+	beq	.L1950
 	ldr	r1, [r5, #3456]
 	cmn	r1, #1
-	beq	.L1958
-	ldr	r1, .L1985+8
+	beq	.L1950
+	ldr	r1, .L1977+8
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r1]
 	bl	js_hash
 	ldr	r2, [sp, #32]
 	cmp	r2, r0
-	beq	.L1958
+	beq	.L1950
 	str	r0, [sp, #4]
 	str	r2, [sp]
 	mov	r2, r6
 	ldr	r3, [sp, #36]
-	ldr	r1, .L1985+12
-	ldr	r0, .L1985+24
+	ldr	r1, .L1977+12
+	ldr	r0, .L1977+24
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r5, #3456]
-.L1958:
+.L1950:
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	beq	.L1959
+	beq	.L1951
 	ldrh	r3, [fp, #8]
 	ldr	r2, [sp, #16]
 	cmp	r2, r3
-	bls	.L1959
+	bls	.L1951
 	ldrh	r1, [fp]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
 	ldreq	r2, [r5, #3460]
 	ldreq	r1, [sp, #12]
 	streq	r2, [r1, r3, lsl #2]
-.L1959:
+.L1951:
 	add	r9, r9, #1
-	b	.L1954
-.L1953:
+	b	.L1946
+.L1945:
 	mov	r1, #0
 	mov	r0, #4
-.L1955:
+.L1947:
 	ldrh	r2, [r10]
 	sxth	r3, r1
 	sub	r2, r2, #1
 	cmp	r3, r2
-	blt	.L1957
-.L1961:
+	blt	.L1949
+.L1953:
 	add	r7, r7, #1
-	b	.L1944
-.L1957:
+	b	.L1936
+.L1949:
 	ldr	ip, [r5, #3304]
 	add	r1, r1, #1
 	ldr	r6, [sp, #16]
@@ -13172,13 +13080,13 @@ FtlMapTblRecovery:
 	ldrhi	r3, [ip, r3]
 	ldrhi	ip, [sp, #12]
 	strhi	r3, [ip, r2, lsl #2]
-	b	.L1955
-.L1986:
+	b	.L1947
+.L1978:
 	.align	2
-.L1985:
+.L1977:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+308
-	.word	.LANCHOR0+314
+	.word	.LANCHOR0+304
+	.word	.LANCHOR0+310
 	.word	.LANCHOR1+615
 	.word	.LC128
 	.word	.LANCHOR0+3456
@@ -13195,23 +13103,23 @@ FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1989
+	ldr	r3, .L1981
 	push	{r4, lr}
 	.save {r4, lr}
-	add	r2, r3, #324
+	add	r2, r3, #320
 	add	r0, r3, #3600
 	ldrh	r2, [r2]
 	add	r0, r0, #12
 	strh	r2, [r0, #10]	@ movhi
-	ldr	r2, .L1989+4
+	ldr	r2, .L1981+4
 	strh	r2, [r0, #4]	@ movhi
-	add	r2, r3, #348
+	add	r2, r3, #344
 	ldrh	r2, [r2]
 	strh	r2, [r0, #8]	@ movhi
-	movw	r2, #326
+	movw	r2, #322
 	ldrh	r2, [r3, r2]
 	strh	r2, [r0, #6]	@ movhi
-	ldr	r2, [r3, #352]
+	ldr	r2, [r3, #348]
 	str	r2, [r3, #3624]
 	ldr	r2, [r3, #3372]
 	str	r2, [r3, #3628]
@@ -13222,9 +13130,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	pop	{r4, pc}
-.L1990:
+.L1982:
 	.align	2
-.L1989:
+.L1981:
 	.word	.LANCHOR0
 	.word	-3962
 	.fnend
@@ -13242,13 +13150,13 @@ FtlLoadMapInfo:
 	push	{r4, lr}
 	.save {r4, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L1993
+	ldr	r0, .L1985
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	pop	{r4, pc}
-.L1994:
+.L1986:
 	.align	2
-.L1993:
+.L1985:
 	.word	.LANCHOR0+3396
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -13265,9 +13173,9 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r2, #0
-	ldr	r4, .L2012
+	ldr	r4, .L2004
 	movw	r3, #3476
-	ldrh	r0, [r4, #240]
+	ldrh	r0, [r4, #236]
 	strh	r2, [r4, r3]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
@@ -13275,16 +13183,16 @@ FtlSysBlkInit:
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1996
-.L1998:
+	bne	.L1988
+.L1990:
 	mvn	r6, #0
-.L1995:
+.L1987:
 	mov	r0, r6
 	pop	{r4, r5, r6, pc}
-.L1996:
+.L1988:
 	bl	FtlLoadSysInfo
 	subs	r6, r0, #0
-	bne	.L1998
+	bne	.L1990
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -13294,98 +13202,98 @@ FtlSysBlkInit:
 	bl	FtlPowerLostRecovery
 	mov	r0, #1
 	bl	FtlUpdateVaildLpn
-	ldr	r2, [r4, #2544]
-	movw	r3, #342
+	ldr	r2, [r4, #2540]
+	movw	r3, #338
 	ldrh	r1, [r4, r3]
 	mov	r0, #12
 	mov	r3, r6
-.L1999:
+.L1991:
 	cmp	r3, r1
-	bge	.L2004
+	bge	.L1996
 	mla	ip, r0, r3, r2
 	ldr	ip, [ip, #4]
 	cmp	ip, #0
-	bge	.L2000
-.L2004:
-	ldr	r5, .L2012+4
+	bge	.L1992
+.L1996:
+	ldr	r5, .L2004+4
 	cmp	r3, r1
 	ldrh	r2, [r5, #28]
 	add	r2, r2, #1
 	strh	r2, [r5, #28]	@ movhi
-	bge	.L2010
-.L2001:
-	ldr	r0, .L2012+8
+	bge	.L2002
+.L1993:
+	ldr	r0, .L2004+8
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L2012+12
+	ldr	r0, .L2004+12
 	bl	FtlSuperblockPowerLostFix
-	ldrh	r3, [r4, #28]
-	ldr	r1, [r4, #76]
-	ldrh	r0, [r4, #32]
+	ldrh	r3, [r4, #24]
+	ldr	r1, [r4, #72]
+	ldrh	r0, [r4, #28]
 	lsl	r3, r3, #1
 	ldrh	r2, [r1, r3]
 	sub	r2, r2, r0
-	movw	r0, #306
+	movw	r0, #302
 	strh	r2, [r1, r3]	@ movhi
-	ldrh	r2, [r4, #80]
+	ldrh	r2, [r4, #76]
 	ldrh	r3, [r4, r0]
-	ldr	ip, [r4, #76]
-	ldrh	lr, [r4, #84]
+	ldr	ip, [r4, #72]
+	ldrh	lr, [r4, #80]
 	lsl	r2, r2, #1
-	strh	r3, [r4, #30]	@ movhi
+	strh	r3, [r4, #26]	@ movhi
 	mov	r3, #0
-	strb	r3, [r4, #34]
-	strh	r3, [r4, #32]	@ movhi
+	strb	r3, [r4, #30]
+	strh	r3, [r4, #28]	@ movhi
 	ldrh	r1, [ip, r2]
 	sub	r1, r1, lr
 	strh	r1, [ip, r2]	@ movhi
-	strb	r3, [r4, #86]
-	strh	r3, [r4, #84]	@ movhi
+	strb	r3, [r4, #82]
+	strh	r3, [r4, #80]	@ movhi
 	ldrh	r3, [r5, #30]
 	ldrh	r2, [r4, r0]
 	add	r3, r3, #1
-	strh	r2, [r4, #82]	@ movhi
+	strh	r2, [r4, #78]	@ movhi
 	strh	r3, [r5, #30]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L2005
-.L2000:
+	b	.L1997
+.L1992:
 	add	r3, r3, #1
-	b	.L1999
-.L2010:
+	b	.L1991
+.L2002:
 	movw	r3, #3476
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2001
-.L2005:
-	ldrh	r0, [r4, #28]
+	bne	.L1993
+.L1997:
+	ldrh	r0, [r4, #24]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L2006
-	ldrh	r3, [r4, #32]
+	beq	.L1998
+	ldrh	r3, [r4, #28]
 	cmp	r3, #0
-	bne	.L2006
-	ldrh	r3, [r4, #84]
+	bne	.L1998
+	ldrh	r3, [r4, #80]
 	cmp	r3, #0
-	bne	.L2006
+	bne	.L1998
 	bl	FtlGcRefreshBlock
-	ldrh	r0, [r4, #80]
+	ldrh	r0, [r4, #76]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-	ldr	r0, .L2012+8
+	ldr	r0, .L2004+8
 	bl	allocate_new_data_superblock
-	ldr	r0, .L2012+12
+	ldr	r0, .L2004+12
 	bl	allocate_new_data_superblock
-.L2006:
+.L1998:
 	bl	FtlVpcCheckAndModify
-	b	.L1995
-.L2013:
+	b	.L1987
+.L2005:
 	.align	2
-.L2012:
+.L2004:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2472
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
+	.word	.LANCHOR0+2468
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
 	.fnend
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
@@ -13401,51 +13309,51 @@ ftl_low_format:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r3, #0
-	ldr	r4, .L2039
-	ldrh	r0, [r4, #240]
+	ldr	r4, .L2031
+	ldrh	r0, [r4, #236]
 	str	r3, [r4, #2592]
 	str	r3, [r4, #2596]
 	str	r3, [r4, #2608]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L2015
+	beq	.L2007
 	bl	FtlMakeBbt
-.L2015:
-	ldr	r0, .L2039+4
+.L2007:
+	ldr	r0, .L2031+4
 	mov	r2, #0
-	ldr	ip, .L2039+8
-.L2016:
+	ldr	ip, .L2031+8
+.L2008:
 	ldrh	r1, [r0]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L2017
-	ldrh	r6, [r4, #244]
+	blt	.L2009
+	ldrh	r6, [r4, #240]
 	mov	r5, #0
-.L2018:
-	ldrh	r3, [r4, #246]
+.L2010:
+	ldrh	r3, [r4, #242]
 	cmp	r3, r6
-	bhi	.L2019
-	ldrh	r1, [r4, #236]
+	bhi	.L2011
+	ldrh	r1, [r4, #232]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L2020
-.L2024:
+	bge	.L2012
+.L2016:
 	mov	r5, #0
 	mov	r7, r5
-.L2021:
-	ldrh	r3, [r4, #244]
+.L2013:
+	ldrh	r3, [r4, #240]
 	uxth	r0, r5
 	add	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L2025
-	ldrh	r3, [r4, #246]
-	ldrh	r5, [r4, #236]
-	ldr	r10, [r4, #248]
+	bhi	.L2017
+	ldrh	r3, [r4, #242]
+	ldrh	r5, [r4, #232]
+	ldr	r10, [r4, #244]
 	str	r3, [r4, #3288]
 	mov	r1, r5
-	ldr	r6, .L2039+12
+	ldr	r6, .L2031+12
 	mov	r0, r10
 	bl	__aeabi_uidiv
 	ubfx	r8, r0, #5, #16
@@ -13456,7 +13364,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r7, r3
-	ble	.L2026
+	ble	.L2018
 	mov	r1, r5
 	sub	r0, r10, r7
 	bl	__aeabi_uidiv
@@ -13464,11 +13372,11 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r6]	@ movhi
-.L2026:
-	movw	r3, #298
+.L2018:
+	movw	r3, #294
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	beq	.L2028
+	beq	.L2020
 	ldrh	r2, [r6]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r6]	@ movhi
@@ -13478,67 +13386,63 @@ ftl_low_format:
 	strlt	r9, [r4, #2556]
 	addlt	r3, r8, r3
 	strhlt	r3, [r6]	@ movhi
-.L2028:
+.L2020:
 	ldrh	r2, [r6]
 	ldr	r3, [r4, #2556]
-	ldr	r6, .L2039+16
+	ldr	r6, .L2031+16
 	sub	r3, r3, r2
 	mul	r5, r5, r3
-	movw	r3, #306
+	movw	r3, #302
 	ldrh	r3, [r4, r3]
 	str	r5, [r4, #3676]
 	mul	r5, r5, r3
-	movw	r3, #262
+	movw	r3, #258
 	ldrh	r3, [r4, r3]
 	str	r5, [r4, #2556]
 	mul	r5, r5, r3
-	str	r5, [r4, #344]
-	mvn	r5, #0
+	str	r5, [r4, #340]
 	bl	FtlBbmTblFlush
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, #0
-	ldr	r0, [r4, #76]
+	ldr	r0, [r4, #72]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #244]
+	mvn	r2, #0
 	mov	r3, #0
-	str	r3, [r4, #2552]
-	mov	r1, #255
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
-	strb	r3, [r4, #184]
-	lsr	r2, r2, #3
-	strh	r3, [r4, #30]	@ movhi
-	strb	r3, [r4, #34]
-	strh	r3, [r4, #28]	@ movhi
+	mov	r5, r2
+	str	r3, [r4, #2548]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
+	strb	r3, [r4, #180]
+	strh	r3, [r4, #26]	@ movhi
+	strb	r3, [r4, #30]
+	strh	r3, [r4, #24]	@ movhi
 	mov	r3, #1
-	ldr	r0, [r4, #24]
-	strh	r5, [r4, #176]	@ movhi
-	strb	r3, [r4, #36]
-	bl	ftl_memset
-.L2030:
+	strh	r2, [r4, #172]	@ movhi
+	strb	r3, [r4, #32]
+.L2022:
 	mov	r0, r6
 	bl	make_superblock
-	ldrb	r3, [r4, #35]	@ zero_extendqisi2
+	ldrb	r3, [r4, #31]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldrh	r3, [r4, #28]
-	bne	.L2031
-	ldr	r2, [r4, #76]
+	ldrh	r3, [r4, #24]
+	bne	.L2023
+	ldr	r2, [r4, #72]
 	lsl	r3, r3, #1
 	strh	r5, [r2, r3]	@ movhi
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	add	r3, r3, #1
-	strh	r3, [r4, #28]	@ movhi
-	b	.L2030
-.L2017:
+	strh	r3, [r4, #24]	@ movhi
+	b	.L2022
+.L2009:
 	ldr	lr, [r4, #3316]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [lr, r3, lsl #2]
 	ldr	r1, [r4, #3320]
 	str	ip, [r1, r3, lsl #2]
-	b	.L2016
-.L2019:
+	b	.L2008
+.L2011:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13546,79 +13450,79 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L2018
-.L2020:
+	b	.L2010
+.L2012:
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r3, [r4, #336]
+	ldr	r3, [r4, #332]
 	add	r0, r0, r3
 	uxth	r0, r0
 	bl	FtlSysBlkNumInit
-	ldrh	r0, [r4, #240]
+	ldrh	r0, [r4, #236]
 	bl	FtlFreeSysBlkQueueInit
-	ldrh	r5, [r4, #244]
-.L2022:
-	ldrh	r3, [r4, #246]
+	ldrh	r5, [r4, #240]
+.L2014:
+	ldrh	r3, [r4, #242]
 	cmp	r3, r5
-	bls	.L2024
+	bls	.L2016
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L2022
-.L2025:
+	b	.L2014
+.L2017:
 	mov	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r7, r7, r0
 	uxth	r7, r7
-	b	.L2021
-.L2031:
+	b	.L2013
+.L2023:
 	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
-	ldrh	r1, [r4, #32]
+	ldrh	r1, [r4, #28]
 	mvn	r5, #0
-	ldr	r6, .L2039+20
-	str	r2, [r4, #40]
+	ldr	r6, .L2031+20
+	str	r2, [r4, #36]
 	add	r2, r2, #1
 	str	r2, [r4, #2592]
-	ldr	r2, [r4, #76]
+	ldr	r2, [r4, #72]
 	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #0
-	strh	r3, [r4, #82]	@ movhi
-	strb	r3, [r4, #86]
-	ldrh	r3, [r4, #28]
+	strh	r3, [r4, #78]	@ movhi
+	strb	r3, [r4, #82]
+	ldrh	r3, [r4, #24]
 	add	r3, r3, #1
-	strh	r3, [r4, #80]	@ movhi
+	strh	r3, [r4, #76]	@ movhi
 	mov	r3, #1
-	strb	r3, [r4, #88]
-.L2032:
+	strb	r3, [r4, #84]
+.L2024:
 	mov	r0, r6
 	bl	make_superblock
-	ldrb	r3, [r4, #87]	@ zero_extendqisi2
+	ldrb	r3, [r4, #83]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldrh	r3, [r4, #80]
-	bne	.L2033
-	ldr	r2, [r4, #76]
+	ldrh	r3, [r4, #76]
+	bne	.L2025
+	ldr	r2, [r4, #72]
 	lsl	r3, r3, #1
 	strh	r5, [r2, r3]	@ movhi
-	ldrh	r3, [r4, #80]
+	ldrh	r3, [r4, #76]
 	add	r3, r3, #1
-	strh	r3, [r4, #80]	@ movhi
-	b	.L2032
-.L2033:
+	strh	r3, [r4, #76]	@ movhi
+	b	.L2024
+.L2025:
 	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
-	ldrh	r1, [r4, #84]
+	ldrh	r1, [r4, #80]
 	mvn	r5, #0
-	str	r2, [r4, #92]
+	str	r2, [r4, #88]
 	add	r2, r2, #1
 	str	r2, [r4, #2592]
-	ldr	r2, [r4, #76]
+	ldr	r2, [r4, #72]
 	strh	r1, [r2, r3]	@ movhi
-	strh	r5, [r4, #128]	@ movhi
+	strh	r5, [r4, #124]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L2039+24
+	ldr	r3, .L2031+24
 	movw	r2, #2628
 	strh	r0, [r4, r2]	@ movhi
 	mov	r2, #0
@@ -13634,19 +13538,19 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L2039+28
+	ldreq	r3, .L2031+28
 	moveq	r2, #1
 	streq	r2, [r3]
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2040:
+.L2032:
 	.align	2
-.L2039:
+.L2031:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+262
+	.word	.LANCHOR0+258
 	.word	168778952
 	.word	.LANCHOR0+2624
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
 	.word	.LANCHOR0+2628
 	.word	.LANCHOR2
 	.fnend
@@ -13664,42 +13568,42 @@ sftl_init:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mvn	r3, #0
-	ldr	r4, .L2048
-	ldr	r5, .L2048+4
-	ldr	r1, .L2048+8
-	ldr	r0, .L2048+12
+	ldr	r4, .L2040
+	ldr	r5, .L2040+4
+	ldr	r1, .L2040+8
+	ldr	r0, .L2040+12
 	str	r3, [r5]
 	bl	sftl_printk
 	mov	r0, r4
 	bl	FtlConstantsInit
 	bl	FtlMemInit
 	bl	FtlVariablesInit
-	ldrh	r0, [r4, #240]
+	ldrh	r0, [r4, #236]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L2045
+	bne	.L2037
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L2045
+	bne	.L2037
 	mov	r3, #1
 	str	r3, [r5]
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #15
-	bhi	.L2045
+	bhi	.L2037
 	movw	r4, #8129
-.L2044:
+.L2036:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L2044
-.L2045:
+	bne	.L2036
+.L2037:
 	mov	r0, #0
 	pop	{r4, r5, r6, pc}
-.L2049:
+.L2041:
 	.align	2
-.L2048:
+.L2040:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC0
@@ -13719,7 +13623,7 @@ FtlWriteToIDB:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	add	r8, r1, r0
-	ldr	r3, .L2111
+	ldr	r3, .L2103
 	sub	r10, r8, #1
 	cmp	r10, #63
 	.pad #116
@@ -13730,29 +13634,29 @@ FtlWriteToIDB:
 	cmp	r0, #576
 	orrcs	r9, r9, #1
 	cmp	r9, #0
-	ldr	r5, .L2111+4
+	ldr	r5, .L2103+4
 	str	r3, [sp, #108]
-	beq	.L2051
+	beq	.L2043
 	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	bne	.L2052
-.L2110:
+	bne	.L2044
+.L2102:
 	mov	r4, #0
-	b	.L2050
-.L2052:
+	b	.L2042
+.L2044:
 	ldr	r7, [r5, #3684]
-	ldr	r3, .L2111+8
+	ldr	r3, .L2103+8
 	ldr	r2, [r7]
 	cmp	r2, r3
-	bne	.L2054
+	bne	.L2046
 	ldrh	r1, [r5, #10]
 	add	r0, r7, #260096
 	mov	r2, #0
 	movw	r3, #65023
-.L2058:
+.L2050:
 	ldr	ip, [r0, #-4]!
 	cmp	ip, #0
-	bne	.L2055
+	bne	.L2047
 	ldr	ip, [r7, r2, lsl #2]
 	add	r2, r2, #1
 	cmp	r2, #4096
@@ -13760,22 +13664,22 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	ip, [r0, #2048]
-	bne	.L2058
+	bne	.L2050
 	mov	fp, #512
-	b	.L2057
-.L2055:
+	b	.L2049
+.L2047:
 	add	r3, r3, #127
 	lsr	fp, r3, #7
-.L2057:
+.L2049:
 	lsl	r1, r1, #2
 	add	r0, fp, #4
-	ldr	r4, .L2111+4
+	ldr	r4, .L2103+4
 	uxth	r1, r1
 	bl	__aeabi_uidiv
 	add	r3, r0, #1
 	mov	r1, fp
 	mov	r2, r3
-	ldr	r0, .L2111+12
+	ldr	r0, .L2103+12
 	str	r3, [sp, #16]
 	bl	sftl_printk
 	lsl	r3, fp, #7
@@ -13783,20 +13687,20 @@ FtlWriteToIDB:
 	mov	r3, #0
 	str	r3, [sp, #20]
 	str	r3, [sp, #12]
-.L2059:
+.L2051:
 	ldr	r3, [sp, #16]
 	ldr	r2, [sp, #12]
 	add	r3, r3, r2
 	cmp	r3, #8
 	str	r3, [sp, #24]
-	bls	.L2081
+	bls	.L2073
 	ldr	r3, [sp, #20]
 	cmp	r3, #0
-	bne	.L2082
-.L2054:
+	bne	.L2074
+.L2046:
 	mvn	fp, #0
-.L2082:
-	ldr	r5, .L2111+4
+.L2074:
+	ldr	r5, .L2103+4
 	mov	r3, #0
 	mov	r4, fp
 	ldr	r0, [r5, #3684]
@@ -13804,15 +13708,15 @@ FtlWriteToIDB:
 	bl	kfree
 	ldr	r0, [r5, #3688]
 	bl	kfree
-.L2050:
-	ldr	r3, .L2111
+.L2042:
+	ldr	r3, .L2103
 	mov	r0, r4
 	ldr	r2, [sp, #108]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2089
+	beq	.L2081
 	bl	__stack_chk_fail
-.L2081:
+.L2073:
 	mov	r2, #512
 	mov	r1, #0
 	ldr	r0, [r4, #3688]
@@ -13823,15 +13727,15 @@ FtlWriteToIDB:
 	ldr	r3, [r4, #3264]
 	cmp	r3, #0
 	moveq	r8, #6
-	beq	.L2060
+	beq	.L2052
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	moveq	r8, #6
 	movne	r8, #9
-.L2060:
+.L2052:
 	mov	r10, r9
 	mov	r5, #0
-.L2061:
+.L2053:
 	ldr	r3, [r4, #3252]
 	mov	r1, r10
 	mov	r0, #0
@@ -13840,16 +13744,16 @@ FtlWriteToIDB:
 	ldr	r3, [sp, #16]
 	add	r10, r10, r6
 	cmp	r3, r5
-	bhi	.L2061
+	bhi	.L2053
 	cmp	r8, #9
 	movne	r5, #0
-	bne	.L2062
+	bne	.L2054
 	ldr	r5, [r4, #3688]
 	mov	r2, #1024
 	mov	r1, #0
 	mov	r0, r5
 	bl	ftl_memset
-	ldr	r3, .L2111+16
+	ldr	r3, .L2103+16
 	mov	r1, #12
 	mov	r2, #4
 	str	r1, [r5, #4]
@@ -13867,16 +13771,16 @@ FtlWriteToIDB:
 	strh	r3, [r5, #22]	@ movhi
 	bl	js_hash
 	str	r0, [r5, #8]
-.L2062:
+.L2054:
 	ldr	r3, [sp, #16]
 	mov	r10, r7
 	mul	r3, r6, r3
 	mov	r6, #0
 	str	r3, [sp, #32]
-.L2063:
+.L2055:
 	ldr	r3, [sp, #32]
 	cmp	r6, r3
-	beq	.L2070
+	beq	.L2062
 	cmp	r8, #9
 	lslne	r3, r6, #2
 	addeq	r3, r6, #1
@@ -13887,7 +13791,7 @@ FtlWriteToIDB:
 	str	r3, [sp, #48]
 	moveq	r0, #1
 	movne	r0, #0
-	bne	.L2066
+	bne	.L2058
 	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
@@ -13903,8 +13807,8 @@ FtlWriteToIDB:
 	blx	r3
 	ldr	r2, [sp, #36]
 	cmn	r2, #1
-	bne	.L2067
-.L2070:
+	bne	.L2059
+.L2062:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldr	r2, [sp, #12]
 	ldr	r6, [r4, #3688]
@@ -13914,23 +13818,23 @@ FtlWriteToIDB:
 	ldr	r2, [r4, #3264]
 	cmp	r2, #0
 	moveq	r8, #6
-	beq	.L2069
+	beq	.L2061
 	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	moveq	r8, #6
 	movne	r8, #9
-.L2069:
+.L2061:
 	ldr	r2, [sp, #16]
 	mov	r5, #0
 	mul	r10, r3, r2
-.L2072:
+.L2064:
 	cmp	r5, r10
-	beq	.L2076
+	beq	.L2068
 	cmp	r5, #0
 	cmpeq	r8, #9
 	moveq	r0, #1
 	movne	r0, #0
-	bne	.L2073
+	bne	.L2065
 	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
@@ -13950,15 +13854,15 @@ FtlWriteToIDB:
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r6]
-	ldr	r2, .L2111+16
+	ldr	r2, .L2103+16
 	cmp	r3, r2
-	beq	.L2074
-.L2076:
+	beq	.L2066
+.L2068:
 	ldr	r0, [r4, #3688]
 	mov	r3, r7
 	mov	r5, #0
 	mov	r2, r0
-.L2075:
+.L2067:
 	mov	r6, r2
 	mov	r8, r3
 	ldr	ip, [r6]
@@ -13966,11 +13870,11 @@ FtlWriteToIDB:
 	ldr	r1, [r8]
 	add	r3, r3, #4
 	cmp	ip, r1
-	beq	.L2078
+	beq	.L2070
 	mov	r2, #512
 	mov	r1, #0
 	bl	memset
-	ldr	r0, .L2111+20
+	ldr	r0, .L2103+20
 	str	r5, [sp]
 	ldr	r1, [sp, #12]
 	ldr	r3, [r8]
@@ -13982,55 +13886,55 @@ FtlWriteToIDB:
 	ldr	r3, [r4, #3252]
 	mul	r1, r2, r1
 	blx	r3
-.L2079:
+.L2071:
 	ldr	r3, [sp, #24]
 	str	r3, [sp, #12]
-	b	.L2059
-.L2066:
+	b	.L2051
+.L2058:
 	add	r3, sp, #44
 	mov	r2, r10
 	add	r1, r9, r6
 	ldr	ip, [r4, #3256]
 	blx	ip
 	cmn	r0, #1
-	beq	.L2070
+	beq	.L2062
 	add	r10, r10, #2048
-.L2067:
+.L2059:
 	add	r6, r6, #1
-	b	.L2063
-.L2073:
+	b	.L2055
+.L2065:
 	add	r3, sp, #44
 	mov	r2, r6
 	add	r1, r9, r5
 	ldr	ip, [r4, #3260]
 	blx	ip
 	cmn	r0, #1
-	beq	.L2076
+	beq	.L2068
 	ldr	r2, [sp, #48]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L2076
+	bne	.L2068
 	add	r6, r6, #2048
-.L2074:
+.L2066:
 	add	r5, r5, #1
-	b	.L2072
-.L2078:
+	b	.L2064
+.L2070:
 	ldr	r1, [sp, #28]
 	add	r5, r5, #1
 	cmp	r5, r1
-	bne	.L2075
+	bne	.L2067
 	ldr	r3, [sp, #20]
 	add	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #20]
-	bls	.L2079
-	b	.L2082
-.L2051:
+	bls	.L2071
+	b	.L2074
+.L2043:
 	cmp	r0, #64
 	mov	r4, r0
 	mov	r6, r1
 	mov	r7, r2
-	bne	.L2083
+	bne	.L2075
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r5, #3684]
@@ -14040,20 +13944,20 @@ FtlWriteToIDB:
 	str	r0, [r5, #3688]
 	cmp	r3, #0
 	cmpne	r0, #0
-	beq	.L2084
+	beq	.L2076
 	mov	r2, #1
 	mov	r1, r9
 	str	r2, [r5, #3680]
 	mov	r0, r3
 	mov	r2, #262144
 	bl	ftl_memset
-.L2083:
+.L2075:
 	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	beq	.L2110
+	beq	.L2102
 	cmp	r4, #63
 	ldr	r0, [r5, #3684]
-	ldrhi	r3, .L2111+24
+	ldrhi	r3, .L2103+24
 	rsbls	r1, r4, #64
 	subls	r6, r6, r1
 	movhi	r1, r7
@@ -14065,19 +13969,19 @@ FtlWriteToIDB:
 	addcs	r6, r6, r8
 	lsl	r2, r6, #9
 	bl	ftl_memcpy
-	b	.L2110
-.L2084:
-	ldr	r1, .L2111+28
-	ldr	r0, .L2111+32
+	b	.L2102
+.L2076:
+	ldr	r1, .L2103+28
+	ldr	r0, .L2103+32
 	bl	sftl_printk
-	b	.L2083
-.L2089:
+	b	.L2075
+.L2081:
 	add	sp, sp, #116
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2112:
+.L2104:
 	.align	2
-.L2111:
+.L2103:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	-52655045
@@ -14124,7 +14028,7 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L2118
+	ldr	r2, .L2110
 	ldr	r3, [r2, #3692]
 	cmp	r3, #0
 	streq	r0, [r2, #3692]
@@ -14132,9 +14036,9 @@ rk_sftl_vendor_dev_ops_register:
 	streq	r1, [r2, #3696]
 	mvnne	r0, #0
 	bx	lr
-.L2119:
+.L2111:
 	.align	2
-.L2118:
+.L2110:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -14151,28 +14055,28 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
-	ldr	r5, .L2130
+	ldr	r5, .L2122
 	bl	ftl_malloc
 	cmp	r0, #0
 	str	r0, [r5, #3700]
 	mvneq	r9, #11
-	beq	.L2120
-	ldr	r10, .L2130+4
+	beq	.L2112
+	ldr	r10, .L2122+4
 	mov	r7, #0
 	mov	r6, r7
 	mov	r8, r7
-.L2124:
+.L2116:
 	ldr	r3, [r5, #3692]
 	mov	r1, #128
 	ldr	r2, [r5, #3700]
 	lsl	r0, r8, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L2122
+	bne	.L2114
 	ldr	r4, [r5, #3700]
 	ldr	r3, [r4]
 	cmp	r3, r10
-	bne	.L2123
+	bne	.L2115
 	add	r2, r4, #61440
 	ldr	r3, [r4, #4]
 	ldr	r2, [r2, #4092]
@@ -14184,27 +14088,27 @@ rk_sftl_vendor_storage_init:
 	cmp	r2, #0
 	movne	r7, r8
 	movne	r6, r3
-.L2123:
+.L2115:
 	add	r8, r8, #1
 	cmp	r8, #2
-	bne	.L2124
+	bne	.L2116
 	cmp	r6, #0
-	beq	.L2125
+	beq	.L2117
 	ldr	r3, [r5, #3692]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L2120
-.L2122:
+	beq	.L2112
+.L2114:
 	ldr	r0, [r5, #3700]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
 	str	r3, [r5, #3700]
-	b	.L2120
-.L2125:
+	b	.L2112
+.L2117:
 	mov	r2, #65536
 	mov	r1, r6
 	mov	r0, r4
@@ -14214,15 +14118,15 @@ rk_sftl_vendor_storage_init:
 	str	r3, [r4, #4]
 	str	r10, [r4]
 	str	r3, [r2, #4092]
-	ldr	r3, .L2130+8
+	ldr	r3, .L2122+8
 	strh	r6, [r4, #12]	@ movhi
 	strh	r3, [r4, #14]	@ movhi
-.L2120:
+.L2112:
 	mov	r0, r9
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2131:
+.L2123:
 	.align	2
-.L2130:
+.L2122:
 	.word	.LANCHOR0
 	.word	1380668996
 	.word	-1032
@@ -14238,24 +14142,24 @@ rk_sftl_vendor_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2142
+	ldr	r3, .L2134
 	ldr	ip, [r3, #3700]
 	cmp	ip, #0
-	beq	.L2137
+	beq	.L2129
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r3, #0
 	ldrh	r4, [ip, #10]
-.L2134:
+.L2126:
 	cmp	r3, r4
-	bcc	.L2136
+	bcc	.L2128
 	mvn	r0, #0
 	pop	{r4, r5, r6, pc}
-.L2136:
+.L2128:
 	add	lr, ip, r3, lsl #3
 	ldrh	r5, [lr, #16]
 	cmp	r5, r0
-	bne	.L2135
+	bne	.L2127
 	ldrh	r4, [lr, #20]
 	mov	r0, r1
 	ldrh	r1, [lr, #18]
@@ -14267,15 +14171,15 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L2135:
+.L2127:
 	add	r3, r3, #1
-	b	.L2134
-.L2137:
+	b	.L2126
+.L2129:
 	mvn	r0, #0
 	bx	lr
-.L2143:
+.L2135:
 	.align	2
-.L2142:
+.L2134:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -14293,10 +14197,10 @@ rk_sftl_vendor_write:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r9, .L2164
+	ldr	r9, .L2156
 	ldr	r4, [r9, #3700]
 	cmp	r4, #0
-	beq	.L2159
+	beq	.L2151
 	mov	r8, r2
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
@@ -14305,12 +14209,12 @@ rk_sftl_vendor_write:
 	bic	r6, r6, #63
 	mov	r7, #0
 	str	r3, [sp, #4]
-.L2146:
+.L2138:
 	cmp	r7, r2
-	bcc	.L2154
+	bcc	.L2146
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2159
+	bhi	.L2151
 	add	r3, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r3, #16]	@ movhi
@@ -14342,30 +14246,30 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #3696]
-	b	.L2163
-.L2154:
+	b	.L2155
+.L2146:
 	add	r5, r4, r7, lsl #3
 	ldrh	r3, [r5, #16]
 	cmp	r3, r0
 	str	r3, [sp, #8]
-	bne	.L2147
+	bne	.L2139
 	ldrh	r1, [r5, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L2148
+	bls	.L2140
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
 	subls	r2, r2, #1
 	ldrhls	r10, [r5, #18]
 	strls	r2, [sp, #16]
-	bls	.L2149
-.L2159:
+	bls	.L2141
+.L2151:
 	mvn	r0, #0
-	b	.L2144
-.L2150:
+	b	.L2136
+.L2142:
 	ldrh	r9, [r5, #20]
 	add	r0, r3, r10
 	ldrh	r2, [r5, #16]
@@ -14382,11 +14286,11 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	r3, [sp, #20]
 	add	r10, r10, r9
-.L2149:
+.L2141:
 	ldr	r2, [sp, #16]
 	add	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L2150
+	bcc	.L2142
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -14405,7 +14309,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L2151:
+.L2143:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -14417,33 +14321,33 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L2164
+	ldr	r3, .L2156
 	ldr	r3, [r3, #3696]
-.L2163:
+.L2155:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L2144:
+.L2136:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2148:
+.L2140:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, fp
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L2151
-.L2147:
+	b	.L2143
+.L2139:
 	add	r7, r7, #1
-	b	.L2146
-.L2165:
+	b	.L2138
+.L2157:
 	.align	2
-.L2164:
+.L2156:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -14465,18 +14369,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L2166
-	ldr	r3, .L2191
+	beq	.L2158
+	ldr	r3, .L2183
 	cmp	r6, r3
-	beq	.L2169
+	beq	.L2161
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L2170
-.L2188:
+	beq	.L2162
+.L2180:
 	mvn	r5, #13
-	b	.L2168
-.L2169:
-	ldr	r6, .L2191+4
+	b	.L2160
+.L2161:
+	ldr	r6, .L2183+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #8]
@@ -14488,23 +14392,23 @@ rk_sftl_vendor_storage_ioctl:
 	.syntax unified
 	cmp	r3, #0
 	mov	r2, #8
-	bne	.L2171
+	bne	.L2163
 	mov	r1, r5
 	bl	arm_copy_from_user
 	subs	r2, r0, #0
-	beq	.L2172
-.L2171:
+	beq	.L2164
+.L2163:
 	rsb	r0, r2, #8
 	mov	r1, #0
 	add	r0, r4, r0
 	bl	memset
 	mov	r2, r5
 	mov	r1, #256
-.L2190:
-	ldr	r0, .L2191+8
+.L2182:
+	ldr	r0, .L2183+8
 	bl	sftl_printk
-	b	.L2188
-.L2173:
+	b	.L2180
+.L2165:
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
@@ -14518,15 +14422,15 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2188
+	bne	.L2180
 	mov	r0, r5
 	mov	r1, r4
 	bl	arm_copy_to_user
 	subs	r5, r0, #0
-	beq	.L2168
-	b	.L2188
-.L2170:
-	ldr	r7, .L2191+4
+	beq	.L2160
+	b	.L2180
+.L2162:
+	ldr	r7, .L2183+4
 	mov	r3, sp
 	and	r3, r3, r7
 	ldr	r3, [r3, #8]
@@ -14538,47 +14442,47 @@ rk_sftl_vendor_storage_ioctl:
 	.syntax unified
 	cmp	r3, #0
 	mov	r2, #8
-	bne	.L2175
+	bne	.L2167
 	mov	r1, r5
 	bl	arm_copy_from_user
 	subs	r2, r0, #0
-	beq	.L2176
-.L2175:
+	beq	.L2168
+.L2167:
 	rsb	r0, r2, #8
 	mov	r1, #0
 	add	r0, r4, r0
 	bl	memset
 	mov	r2, r5
 	mov	r1, #276
-	b	.L2190
-.L2172:
+	b	.L2182
+.L2164:
 	ldr	r2, [r4]
-	ldr	r3, .L2191+12
+	ldr	r3, .L2183+12
 	cmp	r2, r3
-	bne	.L2177
+	bne	.L2169
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	bne	.L2173
-.L2177:
+	bne	.L2165
+.L2169:
 	mvn	r5, #0
-.L2168:
+.L2160:
 	mov	r0, r4
 	bl	kfree
-.L2166:
+.L2158:
 	mov	r0, r5
 	pop	{r4, r5, r6, r7, r8, pc}
-.L2176:
+.L2168:
 	ldr	r2, [r4]
-	ldr	r3, .L2191+12
+	ldr	r3, .L2183+12
 	cmp	r2, r3
-	bne	.L2177
+	bne	.L2169
 	ldrh	r6, [r4, #6]
 	movw	r3, #4087
 	cmp	r6, r3
-	bhi	.L2177
+	bhi	.L2169
 	mov	r3, sp
 	add	r6, r6, #8
 	and	r7, r7, r3
@@ -14591,30 +14495,30 @@ rk_sftl_vendor_storage_ioctl:
 	.syntax unified
 	cmp	r3, #0
 	mov	r2, r6
-	bne	.L2178
+	bne	.L2170
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	subs	r2, r0, #0
-	beq	.L2179
-.L2178:
+	beq	.L2171
+.L2170:
 	sub	r6, r6, r2
 	mov	r1, #0
 	add	r0, r4, r6
 	bl	memset
 	mov	r2, r5
 	movw	r1, #283
-	b	.L2190
-.L2179:
+	b	.L2182
+.L2171:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
 	mov	r5, r0
-	b	.L2168
-.L2192:
+	b	.L2160
+.L2184:
 	.align	2
-.L2191:
+.L2183:
 	.word	1074034177
 	.word	-8192
 	.word	.LC133
@@ -14632,11 +14536,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2194
+	ldr	r0, .L2186
 	b	misc_register
-.L2195:
+.L2187:
 	.align	2
-.L2194:
+.L2186:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14790,103 +14694,103 @@ rk_sftl_vendor_register:
 	.global	c_ftl_nand_die_num
 	.global	c_ftl_nand_type
 	.section	.rodata
-	.align	2
+	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.7560, %object
-	.size	__func__.7560, 17
-__func__.7560:
+	.type	__func__.7564, %object
+	.size	__func__.7564, 17
+__func__.7564:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.7555, %object
-	.size	__func__.7555, 17
-__func__.7555:
+	.type	__func__.7559, %object
+	.size	__func__.7559, 17
+__func__.7559:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.7591, %object
-	.size	__func__.7591, 17
-__func__.7591:
+	.type	__func__.7595, %object
+	.size	__func__.7595, 17
+__func__.7595:
 	.ascii	"List_remove_node\000"
-	.type	__func__.7623, %object
-	.size	__func__.7623, 22
-__func__.7623:
+	.type	__func__.7627, %object
+	.size	__func__.7627, 22
+__func__.7627:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.7730, %object
-	.size	__func__.7730, 22
-__func__.7730:
+	.type	__func__.7734, %object
+	.size	__func__.7734, 22
+__func__.7734:
 	.ascii	"select_l2p_ram_region\000"
 	.type	__func__.8057, %object
 	.size	__func__.8057, 16
 __func__.8057:
 	.ascii	"make_superblock\000"
-	.type	__func__.8232, %object
-	.size	__func__.8232, 19
-__func__.8232:
+	.type	__func__.8233, %object
+	.size	__func__.8233, 19
+__func__.8233:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.13881, %object
-	.size	__func__.13881, 17
-__func__.13881:
+	.type	__func__.13957, %object
+	.size	__func__.13957, 17
+__func__.13957:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.7665, %object
-	.size	__func__.7665, 26
-__func__.7665:
+	.type	__func__.7669, %object
+	.size	__func__.7669, 26
+__func__.7669:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.7170, %object
-	.size	__func__.7170, 11
-__func__.7170:
+	.type	__func__.7174, %object
+	.size	__func__.7174, 11
+__func__.7174:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.7397, %object
-	.size	__func__.7397, 14
-__func__.7397:
+	.type	__func__.7401, %object
+	.size	__func__.7401, 14
+__func__.7401:
 	.ascii	"FtlBbt2Bitmap\000"
 	.type	__func__.8078, %object
 	.size	__func__.8078, 18
 __func__.8078:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.13838, %object
-	.size	__func__.13838, 15
-__func__.13838:
+	.type	__func__.13914, %object
+	.size	__func__.13914, 15
+__func__.13914:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.7842, %object
-	.size	__func__.7842, 14
-__func__.7842:
+	.type	__func__.7846, %object
+	.size	__func__.7846, 14
+__func__.7846:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.7440, %object
-	.size	__func__.7440, 11
-__func__.7440:
+	.type	__func__.7444, %object
+	.size	__func__.7444, 11
+__func__.7444:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.13857, %object
-	.size	__func__.13857, 15
-__func__.13857:
+	.type	__func__.13933, %object
+	.size	__func__.13933, 15
+__func__.13933:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.8204, %object
-	.size	__func__.8204, 25
-__func__.8204:
+	.type	__func__.8205, %object
+	.size	__func__.8205, 25
+__func__.8205:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.8245, %object
-	.size	__func__.8245, 16
-__func__.8245:
+	.type	__func__.8246, %object
+	.size	__func__.8246, 16
+__func__.8246:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.8252, %object
-	.size	__func__.8252, 20
-__func__.8252:
+	.type	__func__.8253, %object
+	.size	__func__.8253, 20
+__func__.8253:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7691, %object
-	.size	__func__.7691, 31
-__func__.7691:
+	.type	__func__.7695, %object
+	.size	__func__.7695, 31
+__func__.7695:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.7705, %object
-	.size	__func__.7705, 16
-__func__.7705:
+	.type	__func__.7709, %object
+	.size	__func__.7709, 16
+__func__.7709:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.7632, %object
-	.size	__func__.7632, 16
-__func__.7632:
+	.type	__func__.7636, %object
+	.size	__func__.7636, 16
+__func__.7636:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.7676, %object
-	.size	__func__.7676, 15
-__func__.7676:
+	.type	__func__.7680, %object
+	.size	__func__.7680, 15
+__func__.7680:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.7747, %object
-	.size	__func__.7747, 9
-__func__.7747:
+	.type	__func__.7751, %object
+	.size	__func__.7751, 9
+__func__.7751:
 	.ascii	"log2phys\000"
 	.type	__func__.7966, %object
 	.size	__func__.7966, 16
@@ -14896,37 +14800,37 @@ __func__.7966:
 	.size	__func__.8000, 22
 __func__.8000:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.8119, %object
-	.size	__func__.8119, 14
-__func__.8119:
+	.type	__func__.8120, %object
+	.size	__func__.8120, 14
+__func__.8120:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.7820, %object
-	.size	__func__.7820, 15
-__func__.7820:
+	.type	__func__.7824, %object
+	.size	__func__.7824, 15
+__func__.7824:
 	.ascii	"FtlVpcTblFlush\000"
 	.type	__func__.8103, %object
 	.size	__func__.8103, 21
 __func__.8103:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.8225, %object
-	.size	__func__.8225, 29
-__func__.8225:
+	.type	__func__.8226, %object
+	.size	__func__.8226, 29
+__func__.8226:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.7294, %object
-	.size	__func__.7294, 13
-__func__.7294:
+	.type	__func__.7298, %object
+	.size	__func__.7298, 13
+__func__.7298:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.8322, %object
-	.size	__func__.8322, 19
-__func__.8322:
+	.type	__func__.8323, %object
+	.size	__func__.8323, 19
+__func__.8323:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.8435, %object
-	.size	__func__.8435, 23
-__func__.8435:
+	.type	__func__.8436, %object
+	.size	__func__.8436, 23
+__func__.8436:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.7322, %object
-	.size	__func__.7322, 9
-__func__.7322:
+	.type	__func__.7326, %object
+	.size	__func__.7326, 9
+__func__.7326:
 	.ascii	"FtlWrite\000"
 	.type	__func__.7898, %object
 	.size	__func__.7898, 15
@@ -14936,18 +14840,18 @@ __func__.7898:
 	.size	__func__.7920, 18
 __func__.7920:
 	.ascii	"FtlMapTblRecovery\000"
-	.type	__func__.14000, %object
-	.size	__func__.14000, 14
-__func__.14000:
+	.type	__func__.14076, %object
+	.size	__func__.14076, 14
+__func__.14076:
 	.ascii	"FtlWriteToIDB\000"
 	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 128
+	.size	rk_sftl_vendor_storage_fops, 160
 rk_sftl_vendor_storage_fops:
 	.space	36
 	.word	rk_sftl_vendor_storage_ioctl
 	.word	rk_sftl_vendor_storage_ioctl
-	.space	84
+	.space	116
 	.data
 	.align	2
 	.set	.LANCHOR2,. + 0
@@ -14978,10 +14882,6 @@ rkflash_vender_storage_dev:
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
 	.space	24
-	.type	p_blk_mode_table, %object
-	.size	p_blk_mode_table, 4
-p_blk_mode_table:
-	.space	4
 	.type	g_active_superblock, %object
 	.size	g_active_superblock, 48
 g_active_superblock:
@@ -15210,6 +15110,10 @@ FtlUpdateVaildLpnCount:
 	.type	g_VaildLpn, %object
 	.size	g_VaildLpn, 4
 g_VaildLpn:
+	.space	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 4
+p_blk_mode_table:
 	.space	4
 	.type	g_MaxLpn, %object
 	.size	g_MaxLpn, 4
@@ -15605,7 +15509,7 @@ gp_last_act_superblock:
 	.space	4
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
-	.ascii	"SFTL version: 5.0.53 20200303\000"
+	.ascii	"SFTL version: 5.0.55 20200925\000"
 .LC1:
 	.ascii	"\012%s\012\000"
 .LC2:
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index 890d10a919b2..d4429f7f1db4 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2020-04-10
+ * date: 2020-09-25
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -65,33 +65,6 @@ l2p_addr_tran:
 	.fnend
 	.size	l2p_addr_tran, .-l2p_addr_tran
 	.align	1
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	ftl_set_blk_mode.part.6, %function
-ftl_set_blk_mode.part.6:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L6
-	lsrs	r1, r0, #5
-	and	r0, r0, #31
-	ldr	r2, [r3, #24]
-	movs	r3, #1
-	lsl	r0, r3, r0
-	ldr	r3, [r2, r1, lsl #2]
-	orrs	r3, r3, r0
-	str	r3, [r2, r1, lsl #2]
-	bx	lr
-.L7:
-	.align	2
-.L6:
-	.word	.LANCHOR0
-	.fnend
-	.size	ftl_set_blk_mode.part.6, .-ftl_set_blk_mode.part.6
-	.align	1
 	.global	ftl_print_sblk_info
 	.syntax unified
 	.thumb
@@ -105,69 +78,69 @@ ftl_print_sblk_info:
 	push	{r0, r1, r2, r3, r4, lr}
 	.save {r4, lr}
 	.pad #16
-	ldr	r4, .L9
-	ldr	r1, .L9+4
-	ldr	r0, .L9+8
+	ldr	r4, .L6
+	ldr	r1, .L6+4
+	ldr	r0, .L6+8
 	bl	sftl_printk
-	ldrh	r1, [r4, #28]
-	ldr	r0, [r4, #76]
-	ldrb	r3, [r4, #34]	@ zero_extendqisi2
-	ldrh	r2, [r4, #30]
+	ldrh	r1, [r4, #24]
+	ldr	r0, [r4, #72]
+	ldrb	r3, [r4, #30]	@ zero_extendqisi2
+	ldrh	r2, [r4, #26]
 	ldrh	r0, [r0, r1, lsl #1]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #32]
+	ldrh	r0, [r4, #28]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #36]	@ zero_extendqisi2
+	ldrb	r0, [r4, #32]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L9+12
+	ldr	r0, .L6+12
 	bl	sftl_printk
-	ldrh	r1, [r4, #80]
-	ldr	r0, [r4, #76]
-	ldrb	r3, [r4, #86]	@ zero_extendqisi2
-	ldrh	r2, [r4, #82]
+	ldrh	r1, [r4, #76]
+	ldr	r0, [r4, #72]
+	ldrb	r3, [r4, #82]	@ zero_extendqisi2
+	ldrh	r2, [r4, #78]
 	ldrh	r0, [r0, r1, lsl #1]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #84]
+	ldrh	r0, [r4, #80]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #88]	@ zero_extendqisi2
+	ldrb	r0, [r4, #84]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L9+16
+	ldr	r0, .L6+16
 	bl	sftl_printk
-	ldrh	r1, [r4, #128]
-	ldr	r0, [r4, #76]
-	ldrb	r3, [r4, #134]	@ zero_extendqisi2
-	ldrh	r2, [r4, #130]
+	ldrh	r1, [r4, #124]
+	ldr	r0, [r4, #72]
+	ldrb	r3, [r4, #130]	@ zero_extendqisi2
+	ldrh	r2, [r4, #126]
 	ldrh	r0, [r0, r1, lsl #1]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #132]
+	ldrh	r0, [r4, #128]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #136]	@ zero_extendqisi2
+	ldrb	r0, [r4, #132]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L9+20
+	ldr	r0, .L6+20
 	bl	sftl_printk
-	ldrh	r1, [r4, #176]
-	ldr	r0, [r4, #76]
-	ldrb	r3, [r4, #182]	@ zero_extendqisi2
-	ldrh	r2, [r4, #178]
+	ldrh	r1, [r4, #172]
+	ldr	r0, [r4, #72]
+	ldrb	r3, [r4, #178]	@ zero_extendqisi2
+	ldrh	r2, [r4, #174]
 	ldrh	r0, [r0, r1, lsl #1]
 	str	r0, [sp, #8]
-	ldrh	r0, [r4, #180]
+	ldrh	r0, [r4, #176]
 	str	r0, [sp, #4]
-	ldrb	r0, [r4, #184]	@ zero_extendqisi2
+	ldrb	r0, [r4, #180]	@ zero_extendqisi2
 	str	r0, [sp]
-	ldr	r0, .L9+24
+	ldr	r0, .L6+24
 	bl	sftl_printk
-	ldrh	r3, [r4, #224]
-	ldrh	r2, [r4, #226]
-	ldrh	r1, [r4, #228]
-	ldr	r0, .L9+28
+	ldrh	r3, [r4, #220]
+	ldrh	r2, [r4, #222]
+	ldrh	r1, [r4, #224]
+	ldr	r0, .L6+28
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, lr}
 	b	sftl_printk
-.L10:
+.L7:
 	.align	2
-.L9:
+.L6:
 	.word	.LANCHOR0
 	.word	.LC0
 	.word	.LC1
@@ -192,17 +165,17 @@ Ftl_log2:
 	@ link register save eliminated.
 	movs	r1, #0
 	movs	r2, #1
-.L12:
+.L9:
 	cmp	r2, r0
 	uxth	r3, r1
 	add	r1, r1, #1
-	bls	.L13
+	bls	.L10
 	subs	r0, r3, #1
 	uxth	r0, r0
 	bx	lr
-.L13:
+.L10:
 	lsls	r2, r2, #1
-	b	.L12
+	b	.L9
 	.fnend
 	.size	Ftl_log2, .-Ftl_log2
 	.align	1
@@ -232,25 +205,25 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L16
+	ldr	r3, .L13
 	cmp	r0, #24
 	it	cc
 	movcc	r0, #24
-	ldrh	r2, [r3, #236]
-	ldrh	r1, [r3, #246]
-	str	r0, [r3, #232]
+	ldrh	r2, [r3, #232]
+	ldrh	r1, [r3, #242]
+	str	r0, [r3, #228]
 	muls	r2, r0, r2
 	subs	r0, r1, r0
-	ldr	r1, [r3, #252]
-	strh	r0, [r3, #244]	@ movhi
+	ldr	r1, [r3, #248]
+	strh	r0, [r3, #240]	@ movhi
 	movs	r0, #0
-	str	r2, [r3, #240]
+	str	r2, [r3, #236]
 	subs	r2, r1, r2
-	str	r2, [r3, #248]
+	str	r2, [r3, #244]
 	bx	lr
-.L17:
+.L14:
 	.align	2
-.L16:
+.L13:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -271,138 +244,138 @@ FtlConstantsInit:
 	mov	fp, r0
 	ldrh	r1, [fp, #14]
 	ldrh	r2, [r0]
-	ldr	r4, .L29
+	ldr	r4, .L26
 	cmp	r1, #4
 	ldrh	r6, [r0, #2]
 	ldrh	r3, [fp, #6]
 	ldrh	r0, [r0, #4]
-	strh	r2, [r4, #256]	@ movhi
-	strh	r6, [r4, #258]	@ movhi
-	strh	r0, [r4, #260]	@ movhi
-	strh	r3, [r4, #246]	@ movhi
-	strh	r1, [r4, #262]	@ movhi
-	bne	.L19
+	strh	r2, [r4, #252]	@ movhi
+	strh	r6, [r4, #254]	@ movhi
+	strh	r0, [r4, #256]	@ movhi
+	strh	r3, [r4, #242]	@ movhi
+	strh	r1, [r4, #258]	@ movhi
+	bne	.L16
 	lsrs	r3, r3, #1
-	strh	r3, [r4, #246]	@ movhi
+	strh	r3, [r4, #242]	@ movhi
 	movs	r3, #8
-	strh	r3, [r4, #262]	@ movhi
-.L20:
-	ldr	r1, .L29+4
+	strh	r3, [r4, #258]	@ movhi
+.L17:
+	ldr	r1, .L26+4
 	movs	r3, #0
-.L21:
+.L18:
 	strb	r3, [r3, r1]
 	adds	r3, r3, #1
 	cmp	r3, #32
-	bne	.L21
-	ldrh	r5, [r4, #246]
+	bne	.L18
+	ldrh	r5, [r4, #242]
 	movs	r3, #5
-	ldrh	r0, [r4, #260]
+	ldrh	r0, [r4, #256]
 	cmp	r2, #1
-	strh	r3, [r4, #296]	@ movhi
+	strh	r3, [r4, #292]	@ movhi
 	mov	r7, #640
 	mov	r3, #0
 	it	eq
-	strheq	r2, [r4, #296]	@ movhi
-	strh	r3, [r4, #298]	@ movhi
+	strheq	r2, [r4, #292]	@ movhi
+	strh	r3, [r4, #294]	@ movhi
 	smulbb	r6, r6, r0
-	strh	r7, [r4, #300]	@ movhi
+	strh	r7, [r4, #296]	@ movhi
 	smulbb	r0, r0, r5
 	uxth	r6, r6
 	uxth	r0, r0
-	strh	r6, [r4, #236]	@ movhi
-	strh	r0, [r4, #302]	@ movhi
+	strh	r6, [r4, #232]	@ movhi
+	strh	r0, [r4, #298]	@ movhi
 	bl	Ftl_log2
 	ldrh	r9, [fp, #12]
-	ldrh	r10, [r4, #262]
-	strh	r0, [r4, #304]	@ movhi
-	strh	r9, [r4, #306]	@ movhi
+	ldrh	r10, [r4, #258]
+	strh	r0, [r4, #300]	@ movhi
+	strh	r9, [r4, #302]	@ movhi
 	smulbb	r3, r6, r9
 	mov	r0, r10
-	strh	r9, [r4, #308]	@ movhi
-	strh	r3, [r4, #310]	@ movhi
+	strh	r9, [r4, #304]	@ movhi
+	strh	r3, [r4, #306]	@ movhi
 	bl	Ftl_log2
 	lsl	r3, r10, #9
 	mov	r8, r0
-	strh	r0, [r4, #312]	@ movhi
+	strh	r0, [r4, #308]	@ movhi
 	mul	r1, r9, r10
 	uxth	r3, r3
 	mov	r0, #5120
 	asr	r7, r7, r8
-	strh	r3, [r4, #314]	@ movhi
+	strh	r3, [r4, #310]	@ movhi
 	lsrs	r3, r3, #8
 	add	r8, r8, #9
-	strh	r3, [r4, #316]	@ movhi
+	strh	r3, [r4, #312]	@ movhi
 	adds	r7, r7, #2
 	ldrh	r3, [fp, #20]
-	strh	r3, [r4, #318]	@ movhi
+	strh	r3, [r4, #314]	@ movhi
 	mul	r3, r5, r6
 	lsls	r5, r5, #6
 	asr	r5, r5, r8
-	str	r3, [r4, #252]
+	str	r3, [r4, #248]
 	mul	r3, r10, r3
 	mul	r3, r9, r3
 	asrs	r3, r3, #11
-	str	r3, [r4, #320]
+	str	r3, [r4, #316]
 	bl	__aeabi_idiv
 	uxth	r0, r0
-	strh	r5, [r4, #328]	@ movhi
+	strh	r5, [r4, #324]	@ movhi
 	uxth	r5, r5
 	mov	r1, r6
 	cmp	r0, #4
-	strh	r7, [r4, #326]	@ movhi
+	strh	r7, [r4, #322]	@ movhi
 	itet	ls
 	movls	r3, #4
-	strhhi	r0, [r4, #324]	@ movhi
-	strhls	r3, [r4, #324]	@ movhi
+	strhhi	r0, [r4, #320]	@ movhi
+	strhls	r3, [r4, #320]	@ movhi
 	mul	r3, r6, r5
-	ldrh	r0, [r4, #324]
+	ldrh	r0, [r4, #320]
 	adds	r5, r5, #8
-	str	r3, [r4, #332]
+	str	r3, [r4, #328]
 	bl	__aeabi_uidiv
 	uxtah	r0, r5, r0
 	cmp	r6, #1
 	it	eq
 	addeq	r0, r0, #4
-	str	r0, [r4, #232]
-	ldrh	r0, [r4, #232]
+	str	r0, [r4, #228]
+	ldrh	r0, [r4, #228]
 	bl	FtlSysBlkNumInit
-	ldr	r3, [r4, #232]
+	ldr	r3, [r4, #228]
 	movs	r0, #0
-	str	r0, [r4, #344]
-	str	r3, [r4, #336]
-	ldr	r3, [r4, #248]
+	str	r0, [r4, #340]
+	str	r3, [r4, #332]
+	ldr	r3, [r4, #244]
 	lsls	r2, r3, #2
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	muls	r3, r2, r3
-	ldrh	r2, [r4, #312]
+	ldrh	r2, [r4, #308]
 	adds	r2, r2, #9
 	lsrs	r3, r3, r2
 	adds	r3, r3, #2
-	strh	r3, [r4, #340]	@ movhi
+	strh	r3, [r4, #336]	@ movhi
 	movs	r3, #32
-	strh	r3, [r4, #342]	@ movhi
-	ldrh	r3, [r4, #324]
+	strh	r3, [r4, #338]	@ movhi
+	ldrh	r3, [r4, #320]
 	adds	r3, r3, #3
-	strh	r3, [r4, #324]	@ movhi
-	ldr	r3, [r4, #332]
+	strh	r3, [r4, #320]	@ movhi
+	ldr	r3, [r4, #328]
 	adds	r3, r3, #3
-	str	r3, [r4, #332]
+	str	r3, [r4, #328]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L19:
+.L16:
 	cmp	r1, #8
-	bne	.L20
+	bne	.L17
 	cmp	r0, #1
 	itttt	eq
 	lsreq	r3, r3, #1
-	strheq	r3, [r4, #246]	@ movhi
+	strheq	r3, [r4, #242]	@ movhi
 	moveq	r3, #2
-	strheq	r3, [r4, #260]	@ movhi
-	b	.L20
-.L30:
+	strheq	r3, [r4, #256]	@ movhi
+	b	.L17
+.L27:
 	.align	2
-.L29:
+.L26:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+264
+	.word	.LANCHOR0+260
 	.fnend
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	1
@@ -417,27 +390,27 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L38
-	ldrh	r3, [r2, #348]
-	cbz	r3, .L37
-	ldr	r3, [r2, #352]
-	ldrh	r2, [r2, #324]
+	ldr	r2, .L35
+	ldrh	r3, [r2, #344]
+	cbz	r3, .L34
+	ldr	r3, [r2, #348]
+	ldrh	r2, [r2, #320]
 	add	r2, r3, r2, lsl #1
-.L33:
+.L30:
 	cmp	r3, r2
-	bne	.L34
-.L37:
+	bne	.L31
+.L34:
 	movs	r0, #0
 	bx	lr
-.L34:
+.L31:
 	ldrh	r1, [r3], #2
 	cmp	r0, r1
-	bne	.L33
+	bne	.L30
 	movs	r0, #1
 	bx	lr
-.L39:
+.L36:
 	.align	2
-.L38:
+.L35:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -469,12 +442,12 @@ sftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L42
-	ldr	r0, [r3, #344]
+	ldr	r3, .L39
+	ldr	r0, [r3, #340]
 	bx	lr
-.L43:
+.L40:
 	.align	2
-.L42:
+.L39:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_get_density, .-sftl_get_density
@@ -494,8 +467,8 @@ FtlBbmMapBadBlock:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r5, r0
-	ldr	r4, .L45
-	ldrh	r7, [r4, #302]
+	ldr	r4, .L42
+	ldrh	r7, [r4, #298]
 	mov	r1, r7
 	bl	__aeabi_uidiv
 	uxth	r6, r0
@@ -504,7 +477,7 @@ FtlBbmMapBadBlock:
 	bl	__aeabi_uidivmod
 	add	r2, r4, r6, lsl #2
 	uxth	r3, r1
-	ldr	r2, [r2, #384]
+	ldr	r2, [r2, #380]
 	lsrs	r1, r3, #5
 	and	r7, r3, #31
 	movs	r0, #1
@@ -515,18 +488,18 @@ FtlBbmMapBadBlock:
 	mov	r2, r6
 	str	r0, [sp]
 	mov	r1, r5
-	ldr	r0, .L45+4
+	ldr	r0, .L42+4
 	bl	sftl_printk
-	ldrh	r3, [r4, #362]
+	ldrh	r3, [r4, #358]
 	movs	r0, #0
 	adds	r3, r3, #1
-	strh	r3, [r4, #362]	@ movhi
+	strh	r3, [r4, #358]	@ movhi
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L46:
+.L43:
 	.align	2
-.L45:
+.L42:
 	.word	.LANCHOR0
 	.word	.LC7
 	.fnend
@@ -545,8 +518,8 @@ FtlBbmIsBadBlock:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r5, .L48
-	ldrh	r6, [r5, #302]
+	ldr	r5, .L45
+	ldrh	r6, [r5, #298]
 	mov	r1, r6
 	bl	__aeabi_uidivmod
 	mov	r0, r7
@@ -557,14 +530,14 @@ FtlBbmIsBadBlock:
 	lsrs	r2, r4, #5
 	add	r5, r5, r0, lsl #2
 	and	r4, r4, #31
-	ldr	r3, [r5, #384]
+	ldr	r3, [r5, #380]
 	ldr	r0, [r3, r2, lsl #2]
 	lsrs	r0, r0, r4
 	and	r0, r0, #1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L49:
+.L46:
 	.align	2
-.L48:
+.L45:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -594,31 +567,31 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L58
+	ldr	r3, .L55
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
 	mov	r4, r5
-	ldrh	r2, [r3, #302]
-	ldrh	r6, [r3, #258]
+	ldrh	r2, [r3, #298]
+	ldrh	r6, [r3, #254]
 	muls	r6, r2, r6
-.L52:
+.L49:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L54
+	blt	.L51
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L54:
+.L51:
 	bl	FtlBbmIsBadBlock
-	cbz	r0, .L53
+	cbz	r0, .L50
 	adds	r4, r4, #1
 	uxth	r4, r4
-.L53:
+.L50:
 	adds	r5, r5, #1
-	b	.L52
-.L59:
+	b	.L49
+.L56:
 	.align	2
-.L58:
+.L55:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -636,12 +609,12 @@ V2P_block:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, r1
-	ldr	r4, .L61
+	ldr	r4, .L58
 	mov	r7, r0
-	ldrh	r6, [r4, #260]
+	ldrh	r6, [r4, #256]
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldrh	r4, [r4, #302]
+	ldrh	r4, [r4, #298]
 	smulbb	r5, r6, r5
 	mov	r1, r6
 	smulbb	r4, r4, r0
@@ -651,9 +624,9 @@ V2P_block:
 	add	r0, r0, r4
 	uxth	r0, r0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L62:
+.L59:
 	.align	2
-.L61:
+.L58:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -668,12 +641,12 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L64
+	ldr	r3, .L61
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldrh	r5, [r3, #260]
-	ldrh	r1, [r3, #302]
+	ldrh	r5, [r3, #256]
+	ldrh	r1, [r3, #298]
 	bl	__aeabi_uidiv
 	mov	r1, r5
 	smulbb	r4, r0, r5
@@ -682,9 +655,9 @@ P2V_plane:
 	add	r1, r1, r4
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L65:
+.L62:
 	.align	2
-.L64:
+.L61:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -701,17 +674,17 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L67
-	ldrh	r1, [r4, #302]
+	ldr	r4, .L64
+	ldrh	r1, [r4, #298]
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
-	ldrh	r1, [r4, #260]
+	ldrh	r1, [r4, #256]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L68:
+.L65:
 	.align	2
-.L67:
+.L64:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -728,14 +701,14 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L70
+	bls	.L67
 	subs	r0, r0, r1
 	cmp	r0, #-2147483648
 	ite	hi
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L70:
+.L67:
 	subs	r0, r1, r0
 	cmp	r0, #-2147483648
 	ite	ls
@@ -756,14 +729,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L73
-	ldrh	r0, [r3, #422]
+	ldr	r3, .L70
+	ldrh	r0, [r3, #418]
 	clz	r0, r0
 	lsrs	r0, r0, #5
 	bx	lr
-.L74:
+.L71:
 	.align	2
-.L73:
+.L70:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -779,15 +752,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L76
-	ldrh	r0, [r3, #422]
+	ldr	r3, .L73
+	ldrh	r0, [r3, #418]
 	sub	r3, r0, #1024
 	rsbs	r0, r3, #0
 	adcs	r0, r0, r3
 	bx	lr
-.L77:
+.L74:
 	.align	2
-.L76:
+.L73:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -802,41 +775,41 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L87
+	ldr	r3, .L84
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldrh	r2, [r3, #422]
-	cbz	r2, .L78
-	ldrh	r5, [r3, #2500]
+	ldrh	r2, [r3, #418]
+	cbz	r2, .L75
+	ldrh	r5, [r3, #2496]
 	movs	r0, #0
-	ldrh	r1, [r3, #418]
+	ldrh	r1, [r3, #414]
 	mov	r6, r0
-	ldrh	r2, [r3, #420]
+	ldrh	r2, [r3, #416]
 	and	r5, r5, #31
-.L80:
+.L77:
 	uxth	r4, r0
 	adds	r0, r0, #1
 	cmp	r5, r4
-	bgt	.L81
-	cbz	r6, .L78
-	strh	r1, [r3, #418]	@ movhi
-	strh	r2, [r3, #420]	@ movhi
-.L78:
+	bgt	.L78
+	cbz	r6, .L75
+	strh	r1, [r3, #414]	@ movhi
+	strh	r2, [r3, #416]	@ movhi
+.L75:
 	pop	{r4, r5, r6, pc}
-.L81:
+.L78:
 	add	r4, r3, r1, lsl #1
 	adds	r1, r1, #1
 	ubfx	r1, r1, #0, #10
-	ldrh	r6, [r4, #424]
+	ldrh	r6, [r4, #420]
 	add	r4, r3, r2, lsl #1
-	strh	r6, [r4, #424]	@ movhi
+	strh	r6, [r4, #420]	@ movhi
 	movs	r6, #1
 	add	r2, r2, r6
 	ubfx	r2, r2, #0, #10
-	b	.L80
-.L88:
+	b	.L77
+.L85:
 	.align	2
-.L87:
+.L84:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -851,35 +824,35 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L95
+	ldr	r3, .L92
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	ldrh	r4, [r3, #422]
+	ldrh	r4, [r3, #418]
 	cmp	r4, #1024
-	beq	.L93
-	ldrh	r5, [r3, #418]
+	beq	.L90
+	ldrh	r5, [r3, #414]
 	movs	r1, #0
-.L91:
+.L88:
 	cmp	r1, r4
-	bcc	.L92
-.L93:
+	bcc	.L89
+.L90:
 	movs	r0, #0
 	pop	{r4, r5, pc}
-.L92:
+.L89:
 	adds	r2, r1, r5
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
-	ldrh	r2, [r2, #424]
+	ldrh	r2, [r2, #420]
 	cmp	r2, r0
-	beq	.L94
+	beq	.L91
 	adds	r1, r1, #1
-	b	.L91
-.L94:
+	b	.L88
+.L91:
 	movs	r0, #1
 	pop	{r4, r5, pc}
-.L96:
+.L93:
 	.align	2
-.L95:
+.L92:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -897,95 +870,95 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r2, .L112
-	ldrh	r3, [r2, #244]
+	ldr	r2, .L109
+	ldrh	r3, [r2, #240]
 	mov	r1, r2
 	cmp	r3, r0
-	bls	.L99
+	bls	.L96
 	movs	r5, #6
-	ldr	lr, [r2, #2520]
+	ldr	lr, [r2, #2516]
 	muls	r5, r0, r5
 	movw	r3, #65535
 	add	r4, lr, r5
 	strh	r3, [r4, #2]	@ movhi
 	strh	r3, [lr, r5]	@ movhi
-	ldr	r3, [r2, #2524]
-	cbnz	r3, .L100
-	str	r4, [r2, #2524]
-.L99:
+	ldr	r3, [r2, #2520]
+	cbnz	r3, .L97
+	str	r4, [r2, #2520]
+.L96:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L100:
+.L97:
 	ldrh	r7, [r4, #4]
-	ldr	r9, [r2, #76]
+	ldr	r9, [r2, #72]
 	ldrh	r2, [r9, r0, lsl #1]
-	cbz	r7, .L107
+	cbz	r7, .L104
 	muls	r2, r7, r2
-.L111:
-	ldr	r8, [r1, #2520]
+.L108:
+	ldr	r8, [r1, #2516]
 	movw	r10, #65535
 	str	r2, [sp]
 	sub	r2, r3, r8
 	asrs	r6, r2, #1
-	ldr	r2, .L112+4
+	ldr	r2, .L109+4
 	muls	r2, r6, r2
-	ldrh	r6, [r1, #244]
+	ldrh	r6, [r1, #240]
 	str	r6, [sp, #4]
 	movs	r6, #0
 	uxth	r2, r2
-.L105:
+.L102:
 	adds	r6, r6, #1
 	ldr	r7, [sp, #4]
 	uxth	r6, r6
 	cmp	r6, r7
-	bhi	.L99
+	bhi	.L96
 	cmp	r0, r2
-	beq	.L99
+	beq	.L96
 	ldrh	ip, [r3, #4]
 	cmp	ip, #0
-	beq	.L103
+	beq	.L100
 	ldrh	fp, [r9, r2, lsl #1]
 	ldr	r7, [sp]
 	mul	ip, ip, fp
 	cmp	ip, r7
-	bcs	.L103
+	bcs	.L100
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L104
+	bne	.L101
 	strh	r2, [r4, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	str	r4, [r1, #2528]
-	b	.L99
-.L107:
-	mov	r2, #-1
-	b	.L111
+	str	r4, [r1, #2524]
+	b	.L96
 .L104:
+	mov	r2, #-1
+	b	.L108
+.L101:
 	movs	r3, #6
 	mov	r2, ip
 	mla	r3, r3, ip, r8
-	b	.L105
-.L103:
+	b	.L102
+.L100:
 	strh	r2, [lr, r5]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [r4, #2]	@ movhi
-	ldr	r2, [r1, #2524]
+	ldr	r2, [r1, #2520]
 	cmp	r3, r2
 	ittte	ne
 	ldrhne	r4, [r3, #2]
 	movne	r2, #6
-	ldrne	r1, [r1, #2520]
+	ldrne	r1, [r1, #2516]
 	strheq	r0, [r3, #2]	@ movhi
 	iteee	eq
-	streq	r4, [r1, #2524]
+	streq	r4, [r1, #2520]
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L99
-.L113:
+	b	.L96
+.L110:
 	.align	2
-.L112:
+.L109:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1004,24 +977,24 @@ INSERT_DATA_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L116
-	ldrh	r3, [r2, #2532]
+	ldr	r2, .L113
+	ldrh	r3, [r2, #2528]
 	adds	r3, r3, #1
 	uxth	r3, r3
-	strh	r3, [r2, #2532]	@ movhi
-	ldrh	r2, [r2, #244]
+	strh	r3, [r2, #2528]	@ movhi
+	ldrh	r2, [r2, #240]
 	cmp	r2, r3
-	bcs	.L114
+	bcs	.L111
 	movs	r2, #214
-	ldr	r1, .L116+4
-	ldr	r0, .L116+8
+	ldr	r1, .L113+4
+	ldr	r0, .L113+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L114:
+.L111:
 	pop	{r3, pc}
-.L117:
+.L114:
 	.align	2
-.L116:
+.L113:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC8
@@ -1042,65 +1015,65 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L119
-	ldr	r2, .L125
+	beq	.L116
+	ldr	r2, .L122
 	movs	r1, #6
 	mul	r7, r1, r0
-	ldr	ip, [r2, #2520]
+	ldr	ip, [r2, #2516]
 	mov	r5, r2
 	add	r6, ip, r7
 	strh	r4, [r6, #2]	@ movhi
 	strh	r4, [ip, r7]	@ movhi
-	ldr	r3, [r2, #2536]
-	cbnz	r3, .L120
-	str	r6, [r2, #2536]
-.L119:
+	ldr	r3, [r2, #2532]
+	cbnz	r3, .L117
+	str	r6, [r2, #2532]
+.L116:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L120:
-	ldr	lr, [r2, #2520]
-	ldr	r8, [r2, #2540]
+.L117:
+	ldr	lr, [r2, #2516]
+	ldr	r8, [r2, #2536]
 	sub	r2, r3, lr
 	asr	r10, r2, #1
-	ldr	r2, .L125+4
+	ldr	r2, .L122+4
 	ldrh	r9, [r8, r0, lsl #1]
 	mul	r2, r2, r10
 	mov	r10, r4
 	uxth	r2, r2
-.L123:
+.L120:
 	ldrh	r4, [r8, r2, lsl #1]
 	cmp	r4, r9
-	bcs	.L121
+	bcs	.L118
 	ldrh	r4, [r3]
 	cmp	r4, r10
-	bne	.L122
+	bne	.L119
 	strh	r2, [r6, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	b	.L119
-.L122:
+	b	.L116
+.L119:
 	mla	r3, r1, r4, lr
 	mov	r2, r4
-	b	.L123
-.L121:
+	b	.L120
+.L118:
 	ldrh	r1, [r3, #2]
 	strh	r1, [r6, #2]	@ movhi
 	strh	r2, [ip, r7]	@ movhi
-	ldr	r2, [r5, #2536]
+	ldr	r2, [r5, #2532]
 	cmp	r3, r2
 	ittte	ne
 	ldrhne	r4, [r3, #2]
 	movne	r2, #6
-	ldrne	r1, [r5, #2520]
+	ldrne	r1, [r5, #2516]
 	strheq	r0, [r3, #2]	@ movhi
 	iteee	eq
-	streq	r6, [r5, #2536]
+	streq	r6, [r5, #2532]
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L119
-.L126:
+	b	.L116
+.L123:
 	.align	2
-.L125:
+.L122:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1119,24 +1092,24 @@ INSERT_FREE_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L129
-	ldrh	r3, [r2, #228]
+	ldr	r2, .L126
+	ldrh	r3, [r2, #224]
 	adds	r3, r3, #1
 	uxth	r3, r3
-	strh	r3, [r2, #228]	@ movhi
-	ldrh	r2, [r2, #244]
+	strh	r3, [r2, #224]	@ movhi
+	ldrh	r2, [r2, #240]
 	cmp	r2, r3
-	bcs	.L127
+	bcs	.L124
 	movs	r2, #207
-	ldr	r1, .L129+4
-	ldr	r0, .L129+8
+	ldr	r1, .L126+4
+	ldr	r0, .L126+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L127:
+.L124:
 	pop	{r3, pc}
-.L130:
+.L127:
 	.align	2
-.L129:
+.L126:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC8
@@ -1156,31 +1129,31 @@ List_remove_node:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r6, #6
-	ldr	r4, .L137
+	ldr	r4, .L134
 	muls	r6, r1, r6
 	movw	r3, #65535
 	mov	r8, r0
-	ldr	r7, [r4, #2520]
+	ldr	r7, [r4, #2516]
 	adds	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L132
+	bne	.L129
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L132
+	beq	.L129
 	mov	r2, #372
-	ldr	r1, .L137+4
-	ldr	r0, .L137+8
+	ldr	r1, .L134+4
+	ldr	r0, .L134+8
 	bl	sftl_printk
-.L132:
+.L129:
 	ldr	r3, [r8]
 	movw	r1, #65535
 	cmp	r5, r3
 	ldrh	r3, [r7, r6]
-	bne	.L133
+	bne	.L130
 	cmp	r3, r1
 	ittee	ne
-	ldrne	r0, [r4, #2520]
+	ldrne	r0, [r4, #2516]
 	movne	r2, #6
 	moveq	r3, #0
 	streq	r3, [r8]
@@ -1188,37 +1161,37 @@ List_remove_node:
 	mlane	r3, r2, r3, r0
 	strne	r3, [r8]
 	strhne	r1, [r3, #2]	@ movhi
-.L135:
+.L132:
 	movw	r3, #65535
 	movs	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L133:
+.L130:
 	cmp	r3, r1
 	ldrh	r1, [r5, #2]
-	bne	.L136
+	bne	.L133
 	cmp	r1, r3
-	beq	.L135
+	beq	.L132
 	movs	r2, #6
-	ldr	r0, [r4, #2520]
+	ldr	r0, [r4, #2516]
 	muls	r1, r2, r1
 	strh	r3, [r0, r1]	@ movhi
-	b	.L135
-.L136:
-	ldr	r0, [r4, #2520]
+	b	.L132
+.L133:
+	ldr	r0, [r4, #2516]
 	movs	r2, #6
 	mla	r3, r2, r3, r0
 	strh	r1, [r3, #2]	@ movhi
 	ldrh	r0, [r5, #2]
 	ldrh	r1, [r7, r6]
-	ldr	r3, [r4, #2520]
+	ldr	r3, [r4, #2516]
 	muls	r2, r0, r2
 	strh	r1, [r3, r2]	@ movhi
-	b	.L135
-.L138:
+	b	.L132
+.L135:
 	.align	2
-.L137:
+.L134:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC8
@@ -1238,15 +1211,15 @@ List_pop_index_node:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldr	r3, [r0]
-	cbz	r3, .L145
-	ldr	r2, .L146
+	cbz	r3, .L142
+	ldr	r2, .L143
 	movw	r5, #65535
 	movs	r6, #6
-	ldr	r2, [r2, #2520]
+	ldr	r2, [r2, #2516]
+.L138:
+	cbnz	r1, .L139
 .L141:
-	cbnz	r1, .L142
-.L144:
-	ldr	r4, .L146+4
+	ldr	r4, .L143+4
 	subs	r3, r3, r2
 	asrs	r3, r3, #1
 	muls	r4, r3, r4
@@ -1254,20 +1227,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, r5, r6, pc}
-.L142:
+.L139:
 	ldrh	r4, [r3]
 	cmp	r4, r5
-	beq	.L144
+	beq	.L141
 	subs	r1, r1, #1
 	mla	r3, r6, r4, r2
 	uxth	r1, r1
-	b	.L141
-.L145:
+	b	.L138
+.L142:
 	movw	r0, #65535
 	pop	{r4, r5, r6, pc}
-.L147:
+.L144:
 	.align	2
-.L146:
+.L143:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1299,37 +1272,37 @@ List_get_gc_head_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L155
+	ldr	r2, .L152
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r3, [r2, #2524]
-	cbz	r3, .L154
-	ldr	r1, [r2, #2520]
+	ldr	r3, [r2, #2520]
+	cbz	r3, .L151
+	ldr	r1, [r2, #2516]
 	movs	r4, #6
 	movw	r2, #65535
-.L151:
-	cbz	r0, .L152
+.L148:
+	cbz	r0, .L149
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L153
-.L154:
+	bne	.L150
+.L151:
 	movw	r0, #65535
 	pop	{r4, pc}
-.L153:
+.L150:
 	subs	r0, r0, #1
 	mla	r3, r4, r3, r1
 	uxth	r0, r0
-	b	.L151
-.L152:
-	ldr	r0, .L155+4
+	b	.L148
+.L149:
+	ldr	r0, .L152+4
 	subs	r3, r3, r1
 	asrs	r3, r3, #1
 	muls	r3, r0, r3
 	uxth	r0, r3
 	pop	{r4, pc}
-.L156:
+.L153:
 	.align	2
-.L155:
+.L152:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1348,97 +1321,97 @@ List_update_data_list:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, r0
-	ldr	r4, .L168
-	ldrh	r3, [r4, #28]
+	ldr	r4, .L165
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L159
-	ldrh	r3, [r4, #80]
+	beq	.L156
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L159
-	ldrh	r3, [r4, #128]
+	beq	.L156
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	beq	.L159
+	beq	.L156
 	movs	r7, #6
-	ldr	r9, [r4, #2520]
+	ldr	r9, [r4, #2516]
 	muls	r7, r0, r7
-	ldr	r3, [r4, #2524]
+	ldr	r3, [r4, #2520]
 	add	r8, r9, r7
 	cmp	r8, r3
-	beq	.L159
+	beq	.L156
 	ldrh	r6, [r8, #4]
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r6, #0
-	beq	.L166
+	beq	.L163
 	muls	r6, r3, r6
-.L161:
+.L158:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L162
+	bne	.L159
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	bne	.L162
+	bne	.L159
 	movw	r2, #463
-	ldr	r1, .L168+4
-	ldr	r0, .L168+8
+	ldr	r1, .L165+4
+	ldr	r0, .L165+8
 	bl	sftl_printk
-.L162:
+.L159:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L163
+	bne	.L160
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	beq	.L159
-.L163:
+	beq	.L156
+.L160:
 	movs	r2, #6
 	muls	r2, r3, r2
-	ldr	r3, .L168+12
+	ldr	r3, .L165+12
 	asrs	r1, r2, #1
 	muls	r3, r1, r3
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	ldrh	r0, [r1, r3, lsl #1]
-	ldr	r1, [r4, #2520]
+	ldr	r1, [r4, #2516]
 	add	r2, r2, r1
 	ldrh	r3, [r2, #4]
-	cbz	r3, .L167
+	cbz	r3, .L164
 	muls	r3, r0, r3
-.L164:
+.L161:
 	cmp	r6, r3
-	bcs	.L159
+	bcs	.L156
 	mov	r1, r5
-	ldr	r0, .L168+16
+	ldr	r0, .L165+16
 	bl	List_remove_node
-	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L165
+	ldrh	r3, [r4, #2528]
+	cbnz	r3, .L162
 	mov	r2, #474
-	ldr	r1, .L168+4
-	ldr	r0, .L168+8
+	ldr	r1, .L165+4
+	ldr	r0, .L165+8
 	bl	sftl_printk
-.L165:
-	ldrh	r3, [r4, #2532]
+.L162:
+	ldrh	r3, [r4, #2528]
 	mov	r0, r5
 	subs	r3, r3, #1
-	strh	r3, [r4, #2532]	@ movhi
+	strh	r3, [r4, #2528]	@ movhi
 	bl	INSERT_DATA_LIST
-.L159:
+.L156:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L166:
+.L163:
 	mov	r6, #-1
-	b	.L161
-.L167:
+	b	.L158
+.L164:
 	mov	r3, #-1
-	b	.L164
-.L169:
+	b	.L161
+.L166:
 	.align	2
-.L168:
+.L165:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC8
 	.word	-1431655765
-	.word	.LANCHOR0+2524
+	.word	.LANCHOR0+2520
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	1
@@ -1455,77 +1428,77 @@ select_l2p_ram_region:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r5, .L180
+	ldr	r5, .L177
 	movs	r0, #12
 	movw	r6, #65535
-	ldrh	r2, [r5, #342]
-	ldr	r3, [r5, #2544]
-.L171:
+	ldrh	r2, [r5, #338]
+	ldr	r3, [r5, #2540]
+.L168:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L173
+	bcc	.L170
 	mov	r4, r2
 	movs	r1, #0
 	mov	r7, #-2147483648
 	mov	ip, #12
-.L174:
+.L171:
 	uxth	r6, r1
 	cmp	r6, r2
-	bcc	.L176
+	bcc	.L173
 	cmp	r4, r2
-	bcc	.L172
-	ldrh	r7, [r5, #2548]
+	bcc	.L169
+	ldrh	r7, [r5, #2544]
 	mov	r4, r2
 	movs	r1, #0
 	mov	r0, #-1
-.L177:
+.L174:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcc	.L179
+	bcc	.L176
 	cmp	r4, r2
-	bcc	.L172
+	bcc	.L169
 	movw	r2, #789
-	ldr	r1, .L180+4
-	ldr	r0, .L180+8
+	ldr	r1, .L177+4
+	ldr	r0, .L177+8
 	bl	sftl_printk
-	b	.L172
-.L173:
+	b	.L169
+.L170:
 	adds	r1, r1, #1
 	mla	r7, r0, r1, r3
 	ldrh	r7, [r7, #-12]
 	cmp	r7, r6
-	bne	.L171
-.L172:
+	bne	.L168
+.L169:
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L176:
+.L173:
 	mla	r0, ip, r1, r3
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L175
+	blt	.L172
 	cmp	r7, r0
 	itt	hi
 	movhi	r7, r0
 	movhi	r4, r6
-.L175:
+.L172:
 	adds	r1, r1, #1
-	b	.L174
-.L179:
+	b	.L171
+.L176:
 	ldr	r6, [r3, #4]
 	cmp	r0, r6
-	bls	.L178
+	bls	.L175
 	ldrh	ip, [r3]
 	cmp	ip, r7
 	itt	ne
 	movne	r0, r6
 	movne	r4, r5
-.L178:
+.L175:
 	adds	r1, r1, #1
 	adds	r3, r3, #12
-	b	.L177
-.L181:
+	b	.L174
+.L178:
 	.align	2
-.L180:
+.L177:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+73
 	.word	.LC8
@@ -1542,76 +1515,44 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L188
+	ldr	r1, .L185
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r3, r1
-	ldrh	r2, [r1, #2550]
+	ldrh	r2, [r1, #2546]
 	cmp	r2, #4
-	bhi	.L183
-	cbnz	r0, .L183
+	bhi	.L180
+	cbnz	r0, .L180
 	adds	r2, r2, #1
-	strh	r2, [r1, #2550]	@ movhi
+	strh	r2, [r1, #2546]	@ movhi
 	pop	{r4, r5, pc}
-.L183:
+.L180:
 	movs	r2, #0
-	ldrh	r1, [r3, #244]
-	strh	r2, [r3, #2550]	@ movhi
+	ldrh	r1, [r3, #240]
+	strh	r2, [r3, #2546]	@ movhi
 	movw	r5, #65535
-	str	r2, [r3, #2552]
-	ldr	r2, [r3, #76]
+	str	r2, [r3, #2548]
+	ldr	r2, [r3, #72]
 	add	r1, r2, r1, lsl #1
-.L184:
+.L181:
 	cmp	r2, r1
-	bne	.L186
+	bne	.L183
 	pop	{r4, r5, pc}
-.L186:
+.L183:
 	ldrh	r4, [r2], #2
 	cmp	r4, r5
 	ittt	ne
-	ldrne	r0, [r3, #2552]
+	ldrne	r0, [r3, #2548]
 	addne	r0, r0, r4
-	strne	r0, [r3, #2552]
-	b	.L184
-.L189:
+	strne	r0, [r3, #2548]
+	b	.L181
+.L186:
 	.align	2
-.L188:
+.L185:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	1
-	.global	ftl_set_blk_mode
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	ftl_set_blk_mode, %function
-ftl_set_blk_mode:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	mov	r3, r0
-	cbz	r1, .L191
-	b	ftl_set_blk_mode.part.6
-.L191:
-	ldr	r2, .L192
-	lsrs	r0, r0, #5
-	and	r3, r3, #31
-	ldr	r1, [r2, #24]
-	movs	r2, #1
-	lsl	r3, r2, r3
-	ldr	r2, [r1, r0, lsl #2]
-	bic	r2, r2, r3
-	str	r2, [r1, r0, lsl #2]
-	bx	lr
-.L193:
-	.align	2
-.L192:
-	.word	.LANCHOR0
-	.fnend
-	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
-	.align	1
 	.global	ftl_get_blk_mode
 	.syntax unified
 	.thumb
@@ -1623,17 +1564,17 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L195
+	ldr	r3, .L188
 	lsrs	r2, r0, #5
 	and	r0, r0, #31
-	ldr	r3, [r3, #24]
+	ldr	r3, [r3, #2552]
 	ldr	r3, [r3, r2, lsl #2]
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-.L196:
+.L189:
 	.align	2
-.L195:
+.L188:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -1654,25 +1595,25 @@ ftl_sb_update_avl_pages:
 	strh	r3, [r0, #4]	@ movhi
 	add	r4, r0, r2, lsl #1
 	movw	r7, #65535
-	ldr	r3, .L204
+	ldr	r3, .L197
 	adds	r4, r4, #14
-	ldrh	r5, [r3, #236]
-.L198:
+	ldrh	r5, [r3, #232]
+.L191:
 	cmp	r2, r5
-	bcc	.L200
-	ldrh	r3, [r3, #306]
+	bcc	.L193
+	ldrh	r3, [r3, #302]
 	add	r4, r0, #16
 	movw	r6, #65535
 	subs	r3, r3, #1
 	subs	r1, r3, r1
 	movs	r3, #0
 	uxth	r1, r1
-.L201:
+.L194:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L203
+	bhi	.L196
 	pop	{r4, r5, r6, r7, pc}
-.L200:
+.L193:
 	ldrh	r6, [r4, #2]!
 	adds	r2, r2, #1
 	uxth	r2, r2
@@ -1681,8 +1622,8 @@ ftl_sb_update_avl_pages:
 	ldrhne	r6, [r0, #4]
 	addne	r6, r6, #1
 	strhne	r6, [r0, #4]	@ movhi
-	b	.L198
-.L203:
+	b	.L191
+.L196:
 	ldrh	r2, [r4], #2
 	adds	r3, r3, #1
 	cmp	r2, r6
@@ -1690,10 +1631,10 @@ ftl_sb_update_avl_pages:
 	ldrhne	r2, [r0, #4]
 	addne	r2, r2, r1
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L201
-.L205:
+	b	.L194
+.L198:
 	.align	2
-.L204:
+.L197:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -1711,24 +1652,24 @@ FtlSlcSuperblockCheck:
 	ldrh	r3, [r0, #4]
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	cbz	r3, .L206
+	cbz	r3, .L199
 	ldrh	r2, [r0]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L206
+	beq	.L199
 	ldrb	r2, [r0, #6]	@ zero_extendqisi2
 	movs	r5, #0
 	adds	r2, r2, #8
 	ldrh	r1, [r0, r2, lsl #1]
-	ldr	r2, .L212
-	ldrh	r4, [r2, #236]
+	ldr	r2, .L205
+	ldrh	r4, [r2, #232]
 	mov	r2, r3
-.L209:
+.L202:
 	cmp	r1, r2
-	beq	.L211
-.L206:
+	beq	.L204
+.L199:
 	pop	{r4, r5, pc}
-.L211:
+.L204:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -1742,10 +1683,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r1, [r0, r3, lsl #1]
-	b	.L209
-.L213:
+	b	.L202
+.L206:
 	.align	2
-.L212:
+.L205:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
@@ -1763,36 +1704,36 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r6, .L220
+	ldr	r6, .L213
 	ldrh	r2, [r0]
-	ldrh	r3, [r6, #244]
+	ldrh	r3, [r6, #240]
 	cmp	r2, r3
-	bcc	.L215
-	movw	r2, #2148
-	ldr	r1, .L220+4
-	ldr	r0, .L220+8
+	bcc	.L208
+	movw	r2, #2150
+	ldr	r1, .L213+4
+	ldr	r0, .L213+8
 	bl	sftl_printk
-.L215:
-	ldrh	r9, [r6, #236]
+.L208:
+	ldrh	r9, [r6, #232]
 	add	r7, r4, #16
-	ldr	r10, .L220+12
+	ldr	r10, .L213+12
 	movw	r8, #65535
 	movs	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L216:
+.L209:
 	uxth	r3, r5
 	ldrh	r1, [r4]
 	cmp	r9, r3
-	bhi	.L218
-	ldrh	r2, [r6, #306]
+	bhi	.L211
+	ldrh	r2, [r6, #302]
 	movs	r0, #0
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	smulbb	r3, r3, r2
 	strh	r3, [r4, #4]	@ movhi
 	movs	r3, #0
 	strb	r3, [r4, #9]
-	ldr	r3, [r6, #2540]
+	ldr	r3, [r6, #2536]
 	ldrh	r2, [r3, r1, lsl #1]
 	movw	r3, #10000
 	cmp	r2, r3
@@ -1800,28 +1741,28 @@ make_superblock:
 	movhi	r3, #1
 	strbhi	r3, [r4, #9]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L218:
+.L211:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	strh	r8, [r7]	@ movhi
 	mov	fp, r0
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L217
+	cbnz	r0, .L210
 	strh	fp, [r7]	@ movhi
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	strb	r3, [r4, #7]
-.L217:
+.L210:
 	adds	r5, r5, #1
 	adds	r7, r7, #2
-	b	.L216
-.L221:
+	b	.L209
+.L214:
 	.align	2
-.L220:
+.L213:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC8
-	.word	.LANCHOR0+264
+	.word	.LANCHOR0+260
 	.fnend
 	.size	make_superblock, .-make_superblock
 	.align	1
@@ -1838,44 +1779,44 @@ update_multiplier_value:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r6, .L228
+	ldr	r6, .L221
 	mov	r7, r0
 	mov	r4, r5
-	ldrh	r8, [r6, #236]
-	add	r10, r6, #264
-	ldrh	r9, [r6, #306]
-.L223:
+	ldrh	r8, [r6, #232]
+	add	r10, r6, #260
+	ldrh	r9, [r6, #302]
+.L216:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L225
-	cbz	r4, .L227
+	bhi	.L218
+	cbz	r4, .L220
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L226:
-	ldr	r1, [r6, #2520]
+.L219:
+	ldr	r1, [r6, #2516]
 	movs	r3, #6
 	mla	r1, r3, r7, r1
 	strh	r0, [r1, #4]	@ movhi
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L225:
+.L218:
 	mov	r1, r7
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L224
+	cbnz	r0, .L217
 	add	r4, r4, r9
 	uxth	r4, r4
-.L224:
+.L217:
 	adds	r5, r5, #1
-	b	.L223
-.L227:
+	b	.L216
+.L220:
 	mov	r0, r4
-	b	.L226
-.L229:
+	b	.L219
+.L222:
 	.align	2
-.L228:
+.L221:
 	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
@@ -1891,22 +1832,22 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L233
-	ldr	r0, [r2, #2536]
-	cbz	r0, .L231
-	ldr	r3, [r2, #2520]
+	ldr	r2, .L226
+	ldr	r0, [r2, #2532]
+	cbz	r0, .L224
+	ldr	r3, [r2, #2516]
 	subs	r0, r0, r3
-	ldr	r3, .L233+4
+	ldr	r3, .L226+4
 	asrs	r0, r0, #1
 	muls	r0, r3, r0
-	ldr	r3, [r2, #2540]
+	ldr	r3, [r2, #2536]
 	uxth	r0, r0
 	ldrh	r0, [r3, r0, lsl #1]
-.L231:
+.L224:
 	bx	lr
-.L234:
+.L227:
 	.align	2
-.L233:
+.L226:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1922,14 +1863,14 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L243
+	ldr	r1, .L236
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
-	ldr	r3, [r1, #2536]
-	cbz	r3, .L241
-	ldrh	r2, [r1, #228]
+	ldr	r3, [r1, #2532]
+	cbz	r3, .L234
+	ldrh	r2, [r1, #224]
 	movs	r6, #6
-	ldr	r4, [r1, #2520]
+	ldr	r4, [r1, #2516]
 	movw	r7, #65535
 	rsb	r2, r2, r2, lsl #3
 	subs	r3, r3, r4
@@ -1938,32 +1879,32 @@ GetFreeBlockMaxEraseCount:
 	cmp	r0, r2
 	it	gt
 	uxthgt	r0, r2
-	ldr	r2, .L243+4
+	ldr	r2, .L236+4
 	muls	r3, r2, r3
 	movs	r2, #0
 	uxth	r3, r3
-.L238:
+.L231:
 	uxth	r5, r2
 	cmp	r0, r5
-	bls	.L240
+	bls	.L233
 	mul	r5, r6, r3
 	adds	r2, r2, #1
 	ldrh	r5, [r4, r5]
 	cmp	r5, r7
-	bne	.L242
-.L240:
-	ldr	r2, [r1, #2540]
+	bne	.L235
+.L233:
+	ldr	r2, [r1, #2536]
 	ldrh	r0, [r2, r3, lsl #1]
 	pop	{r4, r5, r6, r7, pc}
-.L242:
+.L235:
 	mov	r3, r5
-	b	.L238
-.L241:
+	b	.L231
+.L234:
 	mov	r0, r3
 	pop	{r4, r5, r6, r7, pc}
-.L244:
+.L237:
 	.align	2
-.L243:
+.L236:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1982,345 +1923,345 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r5, .L257
+	ldr	r5, .L250
 	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, .L257+4
+	ldr	r1, .L250+4
 	bl	strcpy
-	ldr	r3, [r5, #320]
+	ldr	r3, [r5, #316]
 	movs	r1, #64
-	ldr	r2, .L257+8
+	ldr	r2, .L250+8
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r1, .L257+12
+	ldr	r1, .L250+12
 	mov	r0, r4
 	adds	r4, r4, #10
 	bl	strcpy
 	ldr	r3, [r5, #2556]
 	movs	r1, #64
-	ldr	r2, .L257+16
+	ldr	r2, .L250+16
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2552]
-	ldr	r2, .L257+20
+	ldr	r3, [r5, #2548]
+	ldr	r2, .L250+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2560]
-	ldr	r2, .L257+24
+	ldr	r2, .L250+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2564]
-	ldr	r2, .L257+28
+	ldr	r2, .L250+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2568]
-	ldr	r2, .L257+32
+	ldr	r2, .L250+32
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2572]
-	ldr	r2, .L257+36
+	ldr	r2, .L250+36
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2576]
-	ldr	r2, .L257+40
+	ldr	r2, .L250+40
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2580]
-	ldr	r2, .L257+44
+	ldr	r2, .L250+44
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2584]
 	add	r4, r4, r0
-	ldr	r2, .L257+48
+	ldr	r2, .L250+48
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	ldr	r2, .L257+52
+	ldr	r2, .L250+52
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2592]
-	ldr	r2, .L257+56
+	ldr	r2, .L250+56
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2596]
-	ldr	r2, .L257+60
+	ldr	r2, .L250+60
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #362]
-	ldr	r2, .L257+64
+	ldrh	r3, [r5, #358]
+	ldr	r2, .L250+64
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #228]
-	ldr	r2, .L257+68
+	ldrh	r3, [r5, #224]
+	ldr	r2, .L250+68
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2600]
-	ldr	r2, .L257+72
+	ldr	r2, .L250+72
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2604]
-	ldr	r2, .L257+76
+	ldr	r2, .L250+76
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2608]
-	ldr	r2, .L257+80
+	ldr	r2, .L250+80
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2612]
-	ldr	r2, .L257+84
+	ldr	r2, .L250+84
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2616]
-	ldr	r2, .L257+88
+	ldr	r2, .L250+88
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2620]
-	ldr	r2, .L257+92
+	ldr	r2, .L250+92
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #2502]
-	ldr	r2, .L257+96
+	ldrh	r3, [r5, #2498]
+	ldr	r2, .L250+96
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #2500]
-	ldr	r2, .L257+100
+	ldrh	r3, [r5, #2496]
+	ldr	r2, .L250+100
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #344]
-	ldr	r2, .L257+104
+	ldr	r3, [r5, #340]
+	ldr	r2, .L250+104
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #336]
-	ldr	r2, .L257+108
+	ldr	r3, [r5, #332]
+	ldr	r2, .L250+108
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #232]
-	ldr	r2, .L257+112
+	ldr	r3, [r5, #228]
+	ldr	r2, .L250+112
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #422]
-	ldr	r2, .L257+116
+	ldrh	r3, [r5, #418]
+	ldr	r2, .L250+116
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #244]
-	ldr	r2, .L257+120
+	ldrh	r3, [r5, #240]
+	ldr	r2, .L250+120
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2624]
-	ldr	r2, .L257+124
+	ldr	r2, .L250+124
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #248]
-	ldr	r2, .L257+128
+	ldr	r3, [r5, #244]
+	ldr	r2, .L250+128
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2628]
-	ldr	r2, .L257+132
+	ldr	r2, .L250+132
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #356]
-	ldr	r2, .L257+136
+	ldrh	r3, [r5, #352]
+	ldr	r2, .L250+136
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #30]
-	ldr	r2, .L257+140
+	ldrh	r3, [r5, #26]
+	ldr	r2, .L250+140
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #34]	@ zero_extendqisi2
-	ldr	r2, .L257+144
+	ldrb	r3, [r5, #30]	@ zero_extendqisi2
+	ldr	r2, .L250+144
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #28]
-	ldr	r2, .L257+148
+	ldrh	r3, [r5, #24]
+	ldr	r2, .L250+148
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #36]	@ zero_extendqisi2
-	ldr	r2, .L257+152
+	ldrb	r3, [r5, #32]	@ zero_extendqisi2
+	ldr	r2, .L250+152
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #32]
-	ldr	r2, .L257+156
+	ldrh	r3, [r5, #28]
+	ldr	r2, .L250+156
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r2, [r5, #28]
+	ldrh	r2, [r5, #24]
 	add	r4, r4, r0
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L257+160
+	ldr	r2, .L250+160
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #82]
-	ldr	r2, .L257+164
+	ldrh	r3, [r5, #78]
+	ldr	r2, .L250+164
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #86]	@ zero_extendqisi2
-	ldr	r2, .L257+168
+	ldrb	r3, [r5, #82]	@ zero_extendqisi2
+	ldr	r2, .L250+168
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #80]
-	ldr	r2, .L257+172
+	ldrh	r3, [r5, #76]
+	ldr	r2, .L250+172
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #88]	@ zero_extendqisi2
-	ldr	r2, .L257+176
+	ldrb	r3, [r5, #84]	@ zero_extendqisi2
+	ldr	r2, .L250+176
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #84]
-	ldr	r2, .L257+180
+	ldrh	r3, [r5, #80]
+	ldr	r2, .L250+180
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r2, [r5, #80]
+	ldrh	r2, [r5, #76]
 	add	r4, r4, r0
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L257+184
+	ldr	r2, .L250+184
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #130]
-	ldr	r2, .L257+188
+	ldrh	r3, [r5, #126]
+	ldr	r2, .L250+188
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #134]	@ zero_extendqisi2
-	ldr	r2, .L257+192
+	ldrb	r3, [r5, #130]	@ zero_extendqisi2
+	ldr	r2, .L250+192
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #128]
-	ldr	r2, .L257+196
+	ldrh	r3, [r5, #124]
+	ldr	r2, .L250+196
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #136]	@ zero_extendqisi2
-	ldr	r2, .L257+200
+	ldrb	r3, [r5, #132]	@ zero_extendqisi2
+	ldr	r2, .L250+200
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #132]
-	ldr	r2, .L257+204
+	ldrh	r3, [r5, #128]
+	ldr	r2, .L250+204
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #178]
-	ldr	r2, .L257+208
+	ldrh	r3, [r5, #174]
+	ldr	r2, .L250+208
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #182]	@ zero_extendqisi2
-	ldr	r2, .L257+212
+	ldrb	r3, [r5, #178]	@ zero_extendqisi2
+	ldr	r2, .L250+212
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #176]
-	ldr	r2, .L257+216
+	ldrh	r3, [r5, #172]
+	ldr	r2, .L250+216
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #184]	@ zero_extendqisi2
-	ldr	r2, .L257+220
+	ldrb	r3, [r5, #180]	@ zero_extendqisi2
+	ldr	r2, .L250+220
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #180]
-	b	.L258
-.L259:
+	ldrh	r3, [r5, #176]
+	b	.L251
+.L252:
 	.align	2
-.L257:
+.L250:
 	.word	.LANCHOR0
 	.word	.LC9
 	.word	.LC10
@@ -2377,14 +2318,14 @@ FtlPrintInfo2buf:
 	.word	.LC61
 	.word	.LC62
 	.word	.LC63
-.L258:
-	ldr	r2, .L260
+.L251:
+	ldr	r2, .L253
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r2, .L260+4
+	ldr	r2, .L253+4
 	movs	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
@@ -2394,132 +2335,132 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2716]
-	ldr	r2, .L260+8
+	ldr	r2, .L253+8
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2740]
-	ldr	r2, .L260+12
+	ldr	r2, .L253+12
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3156]
-	ldr	r2, .L260+16
+	ldr	r2, .L253+16
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3158]
-	ldr	r2, .L260+20
+	ldr	r2, .L253+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #3160]
-	ldr	r2, .L260+24
+	ldr	r2, .L253+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3164]
-	ldr	r2, .L260+28
+	ldr	r2, .L253+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r2, .L260+32
+	ldr	r2, .L253+32
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r0, [r5, #228]
+	ldrh	r0, [r5, #224]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r2, .L260+36
+	ldr	r2, .L253+36
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, .L260+40
+	ldr	r3, .L253+40
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L246
-.L251:
+	beq	.L239
+.L244:
 	subs	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L246:
-	ldrh	r3, [r5, #176]
+.L239:
+	ldrh	r3, [r5, #172]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L248
-	ldr	r2, [r5, #76]
+	beq	.L241
+	ldr	r2, [r5, #72]
 	mov	r0, r4
 	movs	r1, #64
 	ldrh	r3, [r2, r3, lsl #1]
-	ldr	r2, .L260+44
+	ldr	r2, .L253+44
 	bl	snprintf
 	add	r4, r4, r0
-.L248:
+.L241:
 	movs	r0, #0
-	ldr	r9, .L260+52
+	ldr	r9, .L253+52
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	movs	r7, #0
 	movw	fp, #65535
 	mov	r10, #6
-.L250:
+.L243:
 	cmp	r0, fp
-	beq	.L249
-	ldr	r3, [r5, #2540]
+	beq	.L242
+	ldr	r3, [r5, #2536]
 	mul	r8, r10, r0
 	mov	r2, r9
 	movs	r1, #64
 	ldrh	r3, [r3, r0, lsl #1]
 	str	r3, [sp, #12]
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	add	r3, r3, r8
 	ldrh	r3, [r3, #4]
 	str	r3, [sp, #8]
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	ldrh	r3, [r3, r0, lsl #1]
 	stm	sp, {r0, r3}
 	mov	r3, r7
 	mov	r0, r4
 	adds	r7, r7, #1
 	bl	snprintf
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	cmp	r7, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
-	bne	.L250
-.L249:
-	ldr	r2, [r5, #2520]
+	bne	.L243
+.L242:
+	ldr	r2, [r5, #2516]
 	movs	r7, #0
-	ldr	r3, [r5, #2536]
+	ldr	r3, [r5, #2532]
 	movw	r9, #65535
-	ldr	fp, .L260+56
+	ldr	fp, .L253+56
 	mov	r10, #6
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L260+48
+	ldr	r3, .L253+48
 	muls	r3, r2, r3
 	uxth	r3, r3
-.L252:
+.L245:
 	cmp	r3, r9
-	beq	.L251
-	ldr	r2, [r5, #2540]
+	beq	.L244
+	ldr	r2, [r5, #2536]
 	mul	r8, r10, r3
 	mov	r0, r4
 	movs	r1, #64
 	ldrh	r2, [r2, r3, lsl #1]
 	str	r2, [sp, #8]
-	ldr	r2, [r5, #2520]
+	ldr	r2, [r5, #2516]
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
 	str	r3, [sp]
@@ -2530,13 +2471,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L251
-	ldr	r3, [r5, #2520]
+	beq	.L244
+	ldr	r3, [r5, #2516]
 	ldrh	r3, [r3, r8]
-	b	.L252
-.L261:
+	b	.L245
+.L254:
 	.align	2
-.L260:
+.L253:
 	.word	.LC64
 	.word	.LC65
 	.word	.LC66
@@ -2569,10 +2510,10 @@ rknand_proc_ftlread:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r1
-	blt	.L264
-	ldr	r3, .L265
+	blt	.L257
+	ldr	r3, .L258
 	movs	r1, #64
-	ldr	r2, .L265+4
+	ldr	r2, .L258+4
 	mov	r0, r5
 	bl	snprintf
 	adds	r4, r5, r0
@@ -2581,12 +2522,12 @@ rknand_proc_ftlread:
 	add	r0, r0, r4
 	subs	r0, r0, r5
 	pop	{r3, r4, r5, pc}
-.L264:
+.L257:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L266:
+.L259:
 	.align	2
-.L265:
+.L258:
 	.word	.LC0
 	.word	.LC77
 	.fnend
@@ -2606,160 +2547,160 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L291
+	ldr	r4, .L284
 	ldr	r2, [r4, #2608]
 	ldr	r3, [r4, #2620]
 	cmp	r2, r3
-	bcs	.L268
-	ldrh	r1, [r4, #244]
+	bcs	.L261
+	ldrh	r1, [r4, #240]
 	movs	r3, #0
-	ldr	r0, [r4, #2540]
+	ldr	r0, [r4, #2536]
 	str	r3, [r4, #2600]
-.L269:
+.L262:
 	cmp	r3, r1
-	bcc	.L270
+	bcc	.L263
 	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2608]
 	ldr	r0, [r4, #2604]
-	ldrh	r1, [r4, #296]
+	ldrh	r1, [r4, #292]
 	subs	r0, r5, r0
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2600]
-.L271:
+.L264:
 	ldr	r6, [r4, #2620]
 	ldr	r7, [r4, #2608]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L276
+	bls	.L269
 	ldr	r2, [r4, #2616]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L276
-.L278:
+	bls	.L269
+.L271:
 	movw	r5, #65535
-.L277:
+.L270:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L270:
+.L263:
 	ldrh	r2, [r0, r3, lsl #1]
 	adds	r3, r3, #1
 	ldr	r5, [r4, #2600]
 	add	r2, r2, r5
 	str	r2, [r4, #2600]
-	b	.L269
-.L268:
+	b	.L262
+.L261:
 	ldr	r3, [r4, #2616]
 	cmp	r2, r3
-	bls	.L271
+	bls	.L264
 	adds	r3, r3, #1
 	str	r3, [r4, #2616]
 	movs	r3, #0
-.L273:
-	ldrh	r2, [r4, #244]
+.L266:
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	bcs	.L271
-	ldr	r1, [r4, #2540]
+	bcs	.L264
+	ldr	r1, [r4, #2536]
 	ldrh	r2, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	strh	r2, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
-	b	.L273
-.L276:
-	ldrh	r0, [r4, #228]
+	b	.L266
+.L269:
+	ldrh	r0, [r4, #224]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
 	bl	GetFreeBlockMaxEraseCount
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L278
-	ldr	r3, [r4, #2524]
+	bcc	.L271
+	ldr	r3, [r4, #2520]
 	cmp	r3, #0
-	beq	.L278
-	ldrh	r2, [r4, #244]
+	beq	.L271
+	ldrh	r2, [r4, #240]
 	movw	r1, #65535
-	ldr	lr, [r4, #2520]
+	ldr	lr, [r4, #2516]
 	movs	r0, #0
-	ldr	r8, [r4, #2540]
+	ldr	r8, [r4, #2536]
 	mov	r10, r1
 	str	r2, [sp, #20]
 	mov	fp, #6
 	mov	r2, r1
-.L279:
+.L272:
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L282
+	bne	.L275
 	mov	r5, r2
-.L281:
+.L274:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L278
+	beq	.L271
 	ldrh	r10, [r8, r5, lsl #1]
 	lsl	fp, r5, #1
 	cmp	r6, r10
-	bcs	.L283
+	bcs	.L276
 	bl	GetFreeBlockMinEraseCount
 	cmp	r6, r0
 	it	cc
 	strcc	r1, [r4, #2620]
-.L283:
+.L276:
 	cmp	r7, r10
-	bls	.L278
+	bls	.L271
 	add	r3, r10, #128
 	cmp	r9, r3
-	ble	.L278
+	ble	.L271
 	add	r3, r10, #256
 	cmp	r7, r3
-	bhi	.L284
+	bhi	.L277
 	ldr	r3, [r4, #2616]
 	add	r10, r10, #768
 	cmp	r10, r3
-	bcs	.L278
-.L284:
+	bcs	.L271
+.L277:
 	str	r9, [sp, #8]
 	mov	r2, r7
 	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldr	r0, .L291+4
+	ldr	r0, .L284+4
 	str	r3, [sp, #4]
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, fp]
 	str	r3, [sp]
 	ldr	r3, [r4, #2616]
 	bl	sftl_printk
 	movs	r3, #1
 	str	r3, [r4, #3168]
-	b	.L277
-.L282:
+	b	.L270
+.L275:
 	adds	r0, r0, #1
 	ldr	r5, [sp, #20]
 	uxth	r0, r0
 	cmp	r0, r5
-	bhi	.L278
+	bhi	.L271
 	ldrh	r5, [r3, #4]
-	cbz	r5, .L280
-	ldr	r5, .L291+8
+	cbz	r5, .L273
+	ldr	r5, .L284+8
 	sub	r3, r3, lr
 	asrs	r3, r3, #1
 	muls	r3, r5, r3
 	uxth	r5, r3
 	ldrh	r3, [r8, r5, lsl #1]
 	cmp	r6, r3
-	bcs	.L281
+	bcs	.L274
 	cmp	r1, r3
 	itt	hi
 	movhi	r1, r3
 	movhi	r2, r5
-.L280:
+.L273:
 	mla	r3, fp, ip, lr
-	b	.L279
-.L292:
+	b	.L272
+.L285:
 	.align	2
-.L291:
+.L284:
 	.word	.LANCHOR0
 	.word	.LC78
 	.word	-1431655765
@@ -2780,18 +2721,18 @@ free_data_superblock:
 	push	{r3, lr}
 	.save {r3, lr}
 	cmp	r0, r2
-	beq	.L294
-	ldr	r2, .L295
+	beq	.L287
+	ldr	r2, .L288
 	movs	r1, #0
-	ldr	r2, [r2, #76]
+	ldr	r2, [r2, #72]
 	strh	r1, [r2, r0, lsl #1]	@ movhi
 	bl	INSERT_FREE_LIST
-.L294:
+.L287:
 	movs	r0, #0
 	pop	{r3, pc}
-.L296:
+.L289:
 	.align	2
-.L295:
+.L288:
 	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -2812,44 +2753,44 @@ get_new_active_ppa:
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L298
-	movw	r2, #2781
-	ldr	r1, .L312
-	ldr	r0, .L312+4
+	bne	.L291
+	movw	r2, #2785
+	ldr	r1, .L305
+	ldr	r0, .L305+4
 	bl	sftl_printk
-.L298:
-	ldr	r6, .L312+8
+.L291:
+	ldr	r6, .L305+8
 	ldrh	r2, [r4, #2]
-	ldrh	r3, [r6, #306]
+	ldrh	r3, [r6, #302]
 	cmp	r2, r3
-	bne	.L299
-	movw	r2, #2782
-	ldr	r1, .L312
-	ldr	r0, .L312+4
+	bne	.L292
+	movw	r2, #2786
+	ldr	r1, .L305
+	ldr	r0, .L305+4
 	bl	sftl_printk
-.L299:
+.L292:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L300
-	movw	r2, #2783
-	ldr	r1, .L312
-	ldr	r0, .L312+4
+	cbnz	r3, .L293
+	movw	r2, #2787
+	ldr	r1, .L305
+	ldr	r0, .L305+4
 	bl	sftl_printk
-.L300:
+.L293:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	movs	r3, #0
-	ldrh	r1, [r6, #236]
+	ldrh	r1, [r6, #232]
 	movw	r5, #65535
 	strb	r3, [r4, #10]
 	adds	r2, r2, #8
 	ldrh	r0, [r4, r2, lsl #1]
 	mov	r2, r3
-.L301:
+.L294:
 	cmp	r0, r5
-	beq	.L303
+	beq	.L296
 	ldrh	r5, [r4, #2]
-	ldrh	r6, [r6, #306]
+	ldrh	r6, [r6, #302]
 	cmp	r5, r6
-	bcs	.L307
+	bcs	.L300
 	ldrh	r2, [r4, #4]
 	orr	r5, r5, r0, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
@@ -2857,7 +2798,7 @@ get_new_active_ppa:
 	subs	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #4]	@ movhi
-.L306:
+.L299:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2869,20 +2810,20 @@ get_new_active_ppa:
 	add	r7, r3, #8
 	ldrh	r7, [r4, r7, lsl #1]
 	cmp	r7, r0
-	beq	.L306
+	beq	.L299
 	strb	r3, [r4, #6]
 	ldrh	r3, [r4, #2]
 	cmp	r3, r6
-	bne	.L297
-	cbz	r2, .L297
-	movw	r2, #2806
-	ldr	r1, .L312
-	ldr	r0, .L312+4
+	bne	.L290
+	cbz	r2, .L290
+	movw	r2, #2810
+	ldr	r1, .L305
+	ldr	r0, .L305+4
 	bl	sftl_printk
-.L297:
+.L290:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, pc}
-.L303:
+.L296:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -2896,13 +2837,13 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
-	b	.L301
-.L307:
+	b	.L294
+.L300:
 	movw	r5, #65535
-	b	.L297
-.L313:
+	b	.L290
+.L306:
 	.align	2
-.L312:
+.L305:
 	.word	.LANCHOR1+111
 	.word	.LC8
 	.word	.LANCHOR0
@@ -2919,7 +2860,7 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L323
+	ldr	r3, .L316
 	mov	ip, #20
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -2928,27 +2869,27 @@ FtlGcBufInit:
 	movs	r2, #0
 	mov	r7, r3
 	str	r2, [r3, #3172]
-.L315:
-	ldrh	r1, [r3, #236]
+.L308:
+	ldrh	r1, [r3, #232]
 	uxth	r0, r2
 	adds	r4, r2, #1
 	cmp	r0, r1
-	bcc	.L318
-	ldr	r7, .L323
+	bcc	.L311
+	ldr	r7, .L316
 	mov	ip, #12
 	movs	r6, #0
-.L319:
+.L312:
 	ldr	r2, [r3, #3192]
 	cmp	r1, r2
-	bcc	.L322
+	bcc	.L315
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L318:
+.L311:
 	uxth	r2, r2
 	ldr	r8, [r3, #3176]
 	mul	lr, r9, r2
 	add	r1, r8, lr
 	str	r6, [r1, #8]
-	ldrh	r1, [r3, #314]
+	ldrh	r1, [r3, #310]
 	muls	r1, r2, r1
 	it	mi
 	addmi	r1, r1, #3
@@ -2958,7 +2899,7 @@ FtlGcBufInit:
 	str	r1, [r8, lr]
 	ldr	r5, [r7, #3184]
 	ldr	r0, [r3, #3176]
-	ldrh	r1, [r3, #316]
+	ldrh	r1, [r3, #312]
 	muls	r1, r2, r1
 	it	mi
 	addmi	r1, r1, #3
@@ -2973,14 +2914,14 @@ FtlGcBufInit:
 	ldr	r1, [r8, #4]
 	str	r1, [r2, #12]
 	mov	r2, r4
-	b	.L315
-.L322:
+	b	.L308
+.L315:
 	mul	r0, ip, r1
 	ldr	r4, [r3, #3176]
 	ldr	r5, [r3, #3180]
 	adds	r2, r4, r0
 	str	r6, [r2, #8]
-	ldrh	r2, [r3, #314]
+	ldrh	r2, [r3, #310]
 	muls	r2, r1, r2
 	it	mi
 	addmi	r2, r2, #3
@@ -2990,7 +2931,7 @@ FtlGcBufInit:
 	ldr	r2, [r3, #3176]
 	ldr	r4, [r7, #3184]
 	add	r0, r0, r2
-	ldrh	r2, [r3, #316]
+	ldrh	r2, [r3, #312]
 	muls	r2, r1, r2
 	it	mi
 	addmi	r2, r2, #3
@@ -2999,10 +2940,10 @@ FtlGcBufInit:
 	add	r2, r2, r4
 	uxth	r1, r1
 	str	r2, [r0, #4]
-	b	.L319
-.L324:
+	b	.L312
+.L317:
 	.align	2
-.L323:
+.L316:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
@@ -3017,7 +2958,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L332
+	ldr	r3, .L325
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
@@ -3026,32 +2967,32 @@ FtlGcBufFree:
 	mov	r8, r5
 	ldr	ip, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L326:
+.L319:
 	uxth	r3, r5
 	cmp	r1, r3
-	bls	.L325
+	bls	.L318
 	mla	r4, r10, r3, r0
 	movs	r2, #0
-.L327:
+.L320:
 	uxth	r3, r2
 	cmp	ip, r3
-	bls	.L328
+	bls	.L321
 	mul	r3, lr, r3
 	ldr	r7, [r4, #8]
 	adds	r2, r2, #1
 	add	r9, r6, r3
 	ldr	r3, [r6, r3]
 	cmp	r3, r7
-	bne	.L327
+	bne	.L320
 	str	r8, [r9, #8]
-.L328:
+.L321:
 	adds	r5, r5, #1
-	b	.L326
-.L325:
+	b	.L319
+.L318:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L333:
+.L326:
 	.align	2
-.L332:
+.L325:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -3066,7 +3007,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L341
+	ldr	r3, .L334
 	mov	ip, #12
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -3075,34 +3016,34 @@ FtlGcBufAlloc:
 	mov	r8, #20
 	ldr	r5, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L335:
+.L328:
 	uxth	r2, r4
 	cmp	r1, r2
-	bhi	.L339
+	bhi	.L332
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L339:
+.L332:
 	mov	r9, #0
-.L336:
+.L329:
 	uxth	r3, r9
 	cmp	r5, r3
-	bls	.L337
+	bls	.L330
 	mla	r3, ip, r3, r6
 	add	r9, r9, #1
 	ldr	r7, [r3, #8]
 	cmp	r7, #0
-	bne	.L336
+	bne	.L329
 	mla	r2, r8, r2, r0
 	ldr	r7, [r3]
 	str	lr, [r3, #8]
 	str	r7, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L337:
+.L330:
 	adds	r4, r4, #1
-	b	.L335
-.L342:
+	b	.L328
+.L335:
 	.align	2
-.L341:
+.L334:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -3118,24 +3059,24 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L348
+	ldr	r2, .L341
 	ldr	r3, [r2, #3196]
 	ldrh	r2, [r2, #3200]
 	add	r2, r3, r2, lsl #1
-.L344:
+.L337:
 	cmp	r3, r2
-	bne	.L346
+	bne	.L339
 	movs	r0, #0
 	bx	lr
-.L346:
+.L339:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L344
+	bne	.L337
 	movs	r0, #1
 	bx	lr
-.L349:
+.L342:
 	.align	2
-.L348:
+.L341:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -3158,26 +3099,26 @@ FtlGcUpdatePage:
 	mov	r7, r2
 	movs	r4, #0
 	bl	P2V_block_in_plane
-	ldr	r3, .L354
+	ldr	r3, .L347
 	ldrh	r1, [r3, #3200]
 	ldr	r2, [r3, #3196]
-.L351:
+.L344:
 	uxth	ip, r4
 	cmp	ip, r1
-	bcc	.L353
-	bne	.L352
+	bcc	.L346
+	bne	.L345
 	strh	r0, [r2, ip, lsl #1]	@ movhi
 	ldrh	r0, [r3, #3200]
 	adds	r0, r0, #1
 	strh	r0, [r3, #3200]	@ movhi
-	b	.L352
-.L353:
+	b	.L345
+.L346:
 	adds	r4, r4, #1
 	add	ip, r2, r4, lsl #1
 	ldrh	ip, [ip, #-2]
 	cmp	ip, r0
-	bne	.L351
-.L352:
+	bne	.L344
+.L345:
 	ldrh	r2, [r3, #3208]
 	movs	r0, #12
 	muls	r0, r2, r0
@@ -3190,9 +3131,9 @@ FtlGcUpdatePage:
 	adds	r2, r2, #1
 	strh	r2, [r3, #3208]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
-.L355:
+.L348:
 	.align	2
-.L354:
+.L347:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -3211,30 +3152,30 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r1, r0
 	mov	r4, r0
-	ldr	r0, .L359
+	ldr	r0, .L352
 	bl	sftl_printk
-	ldr	r3, .L359+4
-	ldrh	r0, [r3, #226]
+	ldr	r3, .L352+4
+	ldrh	r0, [r3, #222]
 	cmp	r4, r0
-	beq	.L357
-	ldrh	r1, [r3, #224]
+	beq	.L350
+	ldrh	r1, [r3, #220]
 	cmp	r4, r1
-	beq	.L357
+	beq	.L350
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L358
-	strh	r4, [r3, #226]	@ movhi
-.L357:
+	bne	.L351
+	strh	r4, [r3, #222]	@ movhi
+.L350:
 	movs	r0, #0
 	pop	{r4, pc}
-.L358:
+.L351:
 	cmp	r1, r2
 	it	eq
-	strheq	r4, [r3, #224]	@ movhi
-	b	.L357
-.L360:
+	strheq	r4, [r3, #220]	@ movhi
+	b	.L350
+.L353:
 	.align	2
-.L359:
+.L352:
 	.word	.LC79
 	.word	.LANCHOR0
 	.fnend
@@ -3253,41 +3194,41 @@ FtlGcMarkBadPhyBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
-	ldr	r4, .L365
+	ldr	r4, .L358
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r6, r0
 	ldrh	r1, [r4, #3210]
-	ldr	r0, .L365+4
+	ldr	r0, .L358+4
 	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, #3210]
 	movs	r2, #0
 	addw	r0, r4, #3212
-.L362:
+.L355:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L364
+	bhi	.L357
 	cmp	r3, #15
 	itttt	ls
 	addls	r2, r3, #1
 	strhls	r2, [r4, #3210]	@ movhi
 	addls	r4, r4, r3, lsl #1
 	strhls	r5, [r4, #3212]	@ movhi
-	b	.L363
-.L364:
+	b	.L356
+.L357:
 	adds	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L362
-.L363:
+	bne	.L355
+.L356:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L366:
+.L359:
 	.align	2
-.L365:
+.L358:
 	.word	.LANCHOR0
 	.word	.LC80
 	.fnend
@@ -3305,13 +3246,13 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L373
+	ldr	r4, .L366
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L368
-	ldrh	r1, [r4, #226]
+	cbz	r3, .L361
+	ldrh	r1, [r4, #222]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L368
+	bne	.L361
 	ldrh	r2, [r4, #3246]
 	cmp	r2, r3
 	itt	cs
@@ -3325,12 +3266,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, #3246]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3246]	@ movhi
-.L368:
+.L361:
 	movs	r0, #0
 	pop	{r4, pc}
-.L374:
+.L367:
 	.align	2
-.L373:
+.L366:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3346,11 +3287,11 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r1, .L376
+	ldr	r1, .L369
 	b	__kmalloc
-.L377:
+.L370:
 	.align	2
-.L376:
+.L369:
 	.word	6291649
 	.fnend
 	.size	ftl_malloc, .-ftl_malloc
@@ -3383,54 +3324,54 @@ rknand_print_hex:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	fp, .L388+16
+	ldr	fp, .L381+16
 	mov	r10, r0
 	mov	r7, r1
 	mov	r8, r2
 	mov	r9, r3
 	mov	r5, r6
 	mov	r4, r6
-.L380:
+.L373:
 	cmp	r4, r9
-	bcc	.L386
-	ldr	r0, .L388
+	bcc	.L379
+	ldr	r0, .L381
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	sftl_printk
-.L386:
-	cbnz	r5, .L381
+.L379:
+	cbnz	r5, .L374
 	mov	r3, r6
 	mov	r2, r7
 	mov	r1, r10
-	ldr	r0, .L388+4
+	ldr	r0, .L381+4
 	bl	sftl_printk
-.L381:
+.L374:
 	cmp	r8, #4
-	bne	.L382
+	bne	.L375
 	ldr	r1, [r7, r4, lsl #2]
-	ldr	r0, .L388+8
-.L387:
+	ldr	r0, .L381+8
+.L380:
 	adds	r5, r5, #1
 	bl	sftl_printk
 	cmp	r5, #15
-	bls	.L385
+	bls	.L378
 	movs	r5, #0
-	ldr	r0, .L388
+	ldr	r0, .L381
 	bl	sftl_printk
-.L385:
+.L378:
 	adds	r4, r4, #1
 	add	r6, r6, r8
-	b	.L380
-.L382:
+	b	.L373
+.L375:
 	cmp	r8, #2
 	ittee	eq
 	ldrheq	r1, [r7, r4, lsl #1]
 	moveq	r0, fp
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
-	ldrne	r0, .L388+12
-	b	.L387
-.L389:
+	ldrne	r0, .L381+12
+	b	.L380
+.L382:
 	.align	2
-.L388:
+.L381:
 	.word	.LC85
 	.word	.LC81
 	.word	.LC82
@@ -3452,12 +3393,12 @@ FlashEraseBlocks:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r5, .L407
+	ldr	r5, .L400
 	.pad #28
 	sub	sp, sp, #28
 	mov	r4, r0
 	mov	fp, r0
-	ldr	r2, .L407+4
+	ldr	r2, .L400+4
 	movs	r7, #0
 	ldrh	r9, [r5, #12]
 	mov	r10, #-1
@@ -3466,24 +3407,24 @@ FlashEraseBlocks:
 	str	r3, [sp, #20]
 	lsl	r3, r9, #3
 	str	r3, [sp]
-.L391:
+.L384:
 	cmp	r7, r8
-	beq	.L395
+	beq	.L388
 	add	r2, sp, #12
 	add	r1, sp, #16
 	mov	r0, fp
 	bl	l2p_addr_tran
 	ldr	r6, [sp, #12]
-	cbnz	r6, .L392
+	cbnz	r6, .L385
 	ldr	r2, [sp, #16]
 	ldr	r3, [sp]
 	cmp	r3, r2
-	bls	.L392
-	ldr	r5, .L407+8
-	ldr	r7, .L407+12
-	ldr	r9, .L407+20
-	b	.L406
-.L394:
+	bls	.L385
+	ldr	r5, .L400+8
+	ldr	r7, .L400+12
+	ldr	r9, .L400+20
+	b	.L399
+.L387:
 	mov	r3, #-1
 	ldr	r2, [sp, #16]
 	str	r3, [r4, #-20]
@@ -3499,22 +3440,22 @@ FlashEraseBlocks:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L407+16
+	ldr	r0, .L400+16
 	bl	rknand_print_hex
-.L406:
+.L399:
 	cmp	r6, r8
 	add	r4, r4, #20
-	bne	.L394
+	bne	.L387
 	bl	dump_stack
-.L395:
+.L388:
 	ldr	r3, [sp, #4]
 	movs	r0, #0
 	ldr	r2, [sp, #20]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L402
+	beq	.L395
 	bl	__stack_chk_fail
-.L392:
+.L385:
 	ldr	r2, [r5, #3252]
 	uxtb	r0, r6
 	ldr	r1, [sp, #16]
@@ -3526,25 +3467,25 @@ FlashEraseBlocks:
 	str	r2, [fp]
 	ldrh	r2, [r5, #14]
 	cmp	r2, #4
-	bne	.L399
+	bne	.L392
 	ldr	r1, [sp, #16]
 	ldr	r2, [r5, #3252]
 	ldrb	r0, [sp, #12]	@ zero_extendqisi2
 	add	r1, r1, r9
 	blx	r2
-	cbz	r0, .L399
+	cbz	r0, .L392
 	str	r10, [fp]
-.L399:
+.L392:
 	adds	r7, r7, #1
 	add	fp, fp, #20
-	b	.L391
-.L402:
+	b	.L384
+.L395:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L408:
+.L401:
 	.align	2
-.L407:
+.L400:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1+130
@@ -3571,12 +3512,12 @@ FtlFreeSysBlkQueueIn:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	cmp	r3, r2
-	bhi	.L409
-	ldr	r4, .L418
-	ldrh	r3, [r4, #422]
+	bhi	.L402
+	ldr	r4, .L411
+	ldrh	r3, [r4, #418]
 	cmp	r3, #1024
-	beq	.L409
-	cbz	r1, .L411
+	beq	.L402
+	cbz	r1, .L404
 	bl	P2V_block_in_plane
 	mov	r6, r0
 	ldr	r0, [r4, #3272]
@@ -3585,28 +3526,28 @@ FtlFreeSysBlkQueueIn:
 	mov	r1, r2
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-	ldr	r2, [r4, #2540]
+	ldr	r2, [r4, #2536]
 	ldrh	r3, [r2, r6, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L411:
-	ldrh	r3, [r4, #422]
+.L404:
+	ldrh	r3, [r4, #418]
 	adds	r3, r3, #1
-	strh	r3, [r4, #422]	@ movhi
-	ldrh	r3, [r4, #420]
+	strh	r3, [r4, #418]	@ movhi
+	ldrh	r3, [r4, #416]
 	add	r2, r4, r3, lsl #1
 	adds	r3, r3, #1
 	ubfx	r3, r3, #0, #10
-	strh	r5, [r2, #424]	@ movhi
-	strh	r3, [r4, #420]	@ movhi
-.L409:
+	strh	r5, [r2, #420]	@ movhi
+	strh	r3, [r4, #416]	@ movhi
+.L402:
 	pop	{r4, r5, r6, pc}
-.L419:
+.L412:
 	.align	2
-.L418:
+.L411:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
@@ -3623,47 +3564,47 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r4, .L425
-	ldrh	r2, [r4, #422]
-	cbz	r2, .L424
-	ldrh	r3, [r4, #418]
+	ldr	r4, .L418
+	ldrh	r2, [r4, #418]
+	cbz	r2, .L417
+	ldrh	r3, [r4, #414]
 	subs	r2, r2, #1
 	ldr	r0, [r4, #3272]
-	strh	r2, [r4, #422]	@ movhi
+	strh	r2, [r4, #418]	@ movhi
 	movs	r2, #1
 	add	r1, r4, r3, lsl #1
 	adds	r3, r3, #1
 	ubfx	r3, r3, #0, #10
-	ldrh	r5, [r1, #424]
+	ldrh	r5, [r1, #420]
 	mov	r1, r2
-	strh	r3, [r4, #418]	@ movhi
+	strh	r3, [r4, #414]	@ movhi
 	lsls	r3, r5, #10
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L421:
+.L414:
 	subs	r3, r5, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L422
-	ldrh	r2, [r4, #422]
+	bls	.L415
+	ldrh	r2, [r4, #418]
 	mov	r1, r5
-	ldr	r0, .L425+4
+	ldr	r0, .L418+4
 	bl	sftl_printk
-.L423:
-	b	.L423
-.L424:
+.L416:
+	b	.L416
+.L417:
 	movw	r5, #65535
-	b	.L421
-.L422:
+	b	.L414
+.L415:
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L426:
+.L419:
 	.align	2
-.L425:
+.L418:
 	.word	.LANCHOR0
 	.word	.LC89
 	.fnend
@@ -3685,16 +3626,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	movs	r3, #0
 	ldr	r2, [r0, #12]
-.L428:
+.L421:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L431
+	bcs	.L424
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
 	adds	r2, r2, #2
 	cmp	r6, #0
-	bne	.L428
+	bne	.L421
 	bl	FtlFreeSysBlkQueueOut
 	subs	r3, r0, #1
 	movw	r2, #65533
@@ -3702,14 +3643,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L429
-	ldr	r3, .L435
-	ldr	r0, .L435+4
-	ldrh	r2, [r3, #422]
+	bls	.L422
+	ldr	r3, .L428
+	ldr	r0, .L428+4
+	ldrh	r2, [r3, #418]
 	bl	sftl_printk
-.L430:
-	b	.L430
-.L429:
+.L423:
+	b	.L423
+.L422:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -3718,20 +3659,20 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L431:
+.L424:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L433
+	bhi	.L426
 	movw	r2, #578
-	ldr	r1, .L435+8
-	ldr	r0, .L435+12
+	ldr	r1, .L428+8
+	ldr	r0, .L428+12
 	bl	sftl_printk
-.L433:
+.L426:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L436:
+.L429:
 	.align	2
-.L435:
+.L428:
 	.word	.LANCHOR0
 	.word	.LC90
 	.word	.LANCHOR1+147
@@ -3767,14 +3708,14 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r3, #65535
-	ldr	r4, .L539
+	ldr	r4, .L532
 	movs	r5, #0
 	movs	r7, #12
 	movs	r6, #20
-	ldrh	r0, [r4, #310]
+	ldrh	r0, [r4, #306]
 	str	r3, [r4, #3280]
-	strh	r3, [r4, #226]	@ movhi
-	strh	r3, [r4, #224]	@ movhi
+	strh	r3, [r4, #222]	@ movhi
+	strh	r3, [r4, #220]	@ movhi
 	movs	r3, #32
 	strh	r3, [r4, #3156]	@ movhi
 	lsls	r0, r0, #1
@@ -3803,10 +3744,10 @@ FtlMemInit:
 	strh	r5, [r4, #3246]	@ movhi
 	bl	ftl_malloc
 	str	r0, [r4, #3196]
-	ldrh	r0, [r4, #310]
+	ldrh	r0, [r4, #306]
 	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	str	r0, [r4, #3204]
 	muls	r6, r3, r6
 	lsl	r8, r6, #2
@@ -3824,8 +3765,8 @@ FtlMemInit:
 	str	r0, [r4, #3272]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldrh	r3, [r4, #236]
-	ldrh	r6, [r4, #314]
+	ldrh	r3, [r4, #232]
+	ldrh	r6, [r4, #310]
 	str	r0, [r4, #3188]
 	lsls	r3, r3, #1
 	mov	r0, r6
@@ -3859,11 +3800,11 @@ FtlMemInit:
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3328]
-	ldrh	r0, [r4, #262]
+	ldrh	r0, [r4, #258]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r3, [r4, #316]
-	ldrh	r6, [r4, #236]
+	ldrh	r3, [r4, #312]
+	ldrh	r6, [r4, #232]
 	str	r0, [r4, #3332]
 	muls	r6, r3, r6
 	mov	r0, r6
@@ -3871,37 +3812,37 @@ FtlMemInit:
 	str	r0, [r4, #3336]
 	lsls	r0, r6, #2
 	bl	ftl_malloc
-	ldrh	r3, [r4, #316]
+	ldrh	r3, [r4, #312]
 	str	r0, [r4, #3340]
 	ldr	r0, [r4, #3192]
 	muls	r0, r3, r0
 	bl	ftl_malloc
 	str	r0, [r4, #3184]
-	ldrh	r0, [r4, #246]
+	ldrh	r0, [r4, #242]
 	lsls	r0, r0, #1
 	uxth	r0, r0
 	strh	r0, [r4, #3344]	@ movhi
 	bl	ftl_malloc
 	ldrh	r3, [r4, #3344]
 	str	r0, [r4, #3348]
-	ldr	r0, .L539+4
+	ldr	r0, .L532+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
 	strh	r3, [r4, #3344]	@ movhi
 	bl	ftl_malloc
-	ldrh	r6, [r4, #246]
+	ldrh	r6, [r4, #242]
 	str	r0, [r4, #3352]
 	adds	r0, r0, #32
-	str	r0, [r4, #2540]
+	str	r0, [r4, #2536]
 	lsls	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3356]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r6, [r4, #332]
-	str	r0, [r4, #76]
+	ldr	r6, [r4, #328]
+	str	r0, [r4, #72]
 	lsls	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
@@ -3909,56 +3850,51 @@ FtlMemInit:
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3364]
-	ldrh	r0, [r4, #246]
-	lsrs	r0, r0, #3
-	adds	r0, r0, #4
-	bl	ftl_malloc
-	str	r0, [r4, #24]
-	ldrh	r0, [r4, #324]
+	ldrh	r0, [r4, #320]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #352]
-	ldrh	r0, [r4, #324]
+	str	r0, [r4, #348]
+	ldrh	r0, [r4, #320]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
 	str	r0, [r4, #3368]
-	ldrh	r0, [r4, #324]
+	ldrh	r0, [r4, #320]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3372]
-	ldrh	r0, [r4, #326]
+	ldrh	r0, [r4, #322]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r4, #326]
+	ldrh	r2, [r4, #322]
 	mov	r1, r5
 	str	r0, [r4, #3376]
-	add	r5, r4, #384
+	add	r5, r4, #380
 	lsls	r2, r2, #2
 	bl	ftl_memset
-	ldrh	r0, [r4, #340]
+	ldrh	r0, [r4, #336]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3380]
-	ldr	r0, [r4, #332]
+	ldr	r0, [r4, #328]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	str	r0, [r4, #3384]
-	ldrh	r0, [r4, #342]
+	ldrh	r0, [r4, #338]
 	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #342]
-	str	r0, [r4, #2544]
-	ldrh	r0, [r4, #314]
+	ldrh	r3, [r4, #338]
+	str	r0, [r4, #2540]
+	ldrh	r0, [r4, #310]
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #246]
+	ldrh	r3, [r4, #242]
 	str	r0, [r4, #3388]
 	movs	r0, #6
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	str	r0, [r4, #2520]
-	ldrh	r0, [r4, #302]
-	ldrh	r3, [r4, #258]
+	str	r0, [r4, #2516]
+	ldrh	r0, [r4, #298]
+	ldrh	r3, [r4, #254]
 	adds	r0, r0, #31
 	asrs	r0, r0, #5
 	strh	r0, [r4, #3392]	@ movhi
@@ -3967,147 +3903,147 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	r2, [r4, #3392]
 	movs	r3, #1
-	ldrh	r6, [r4, #258]
-	str	r0, [r4, #384]
+	ldrh	r6, [r4, #254]
+	str	r0, [r4, #380]
 	lsls	r2, r2, #2
 	mov	r1, r2
-.L439:
+.L432:
 	cmp	r3, r6
-	bcc	.L440
-	ldr	r2, .L539+8
+	bcc	.L433
+	ldr	r2, .L532+8
 	movs	r1, #0
 	add	r3, r2, r3, lsl #2
 	adds	r2, r2, #56
 	adds	r3, r3, #24
-.L441:
+.L434:
 	cmp	r2, r3
-	bne	.L442
+	bne	.L435
 	ldr	r3, [r4, #3360]
-	cbnz	r3, .L443
-.L445:
-	ldr	r1, .L539+12
-	ldr	r0, .L539+16
+	cbnz	r3, .L436
+.L438:
+	ldr	r1, .L532+12
+	ldr	r0, .L532+16
 	bl	sftl_printk
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L440:
-	ldr	r0, [r4, #384]
+.L433:
+	ldr	r0, [r4, #380]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r5, #4]!
-	b	.L439
-.L442:
+	b	.L432
+.L435:
 	str	r1, [r3, #4]!
-	b	.L441
-.L540:
+	b	.L434
+.L533:
 	.align	2
-.L539:
+.L532:
 	.word	.LANCHOR0
 	.word	33553920
-	.word	.LANCHOR0+356
+	.word	.LANCHOR0+352
 	.word	.LANCHOR1+173
 	.word	.LC91
-.L443:
+.L436:
 	ldr	r3, [r4, #3364]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3380]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3384]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #2544]
+	beq	.L438
+	ldr	r3, [r4, #2540]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3388]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #2520]
+	beq	.L438
+	ldr	r3, [r4, #2516]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #384]
+	beq	.L438
+	ldr	r3, [r4, #380]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #76]
+	beq	.L438
+	ldr	r3, [r4, #72]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3204]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3272]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3312]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3320]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3340]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3184]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #2540]
+	beq	.L438
+	ldr	r3, [r4, #2536]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, [r4, #352]
+	beq	.L438
+	ldr	r3, [r4, #348]
 	cmp	r3, #0
-	beq	.L445
-	ldr	r3, .L541
+	beq	.L438
+	ldr	r3, .L534
 	ldr	r2, [r3, #3368]
 	cmp	r2, #0
-	beq	.L445
+	beq	.L438
 	ldr	r2, [r3, #3372]
 	cmp	r2, #0
-	beq	.L445
+	beq	.L438
 	ldr	r3, [r3, #3376]
 	cmp	r3, #0
-	beq	.L445
+	beq	.L438
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L542:
+.L535:
 	.align	2
-.L541:
+.L534:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMemInit, .-FtlMemInit
@@ -4125,30 +4061,30 @@ FtlBbt2Bitmap:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, r0
-	ldr	r6, .L549
+	ldr	r6, .L542
 	mov	r7, r1
 	subs	r4, r5, #2
 	movw	r8, #65535
-	ldr	r9, .L549+4
+	ldr	r9, .L542+4
 	addw	r5, r5, #1022
 	ldrh	r2, [r6, #3392]
 	movs	r1, #0
-	ldr	r10, .L549+8
+	ldr	r10, .L542+8
 	mov	r0, r7
 	lsls	r2, r2, #2
 	bl	ftl_memset
-.L546:
+.L539:
 	ldrh	r3, [r4, #2]
 	cmp	r3, r8
-	beq	.L543
-	ldrh	r2, [r6, #302]
+	beq	.L536
+	ldrh	r2, [r6, #298]
 	cmp	r2, r3
-	bhi	.L545
+	bhi	.L538
 	movs	r2, #74
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L545:
+.L538:
 	ldrh	r3, [r4, #2]!
 	movs	r2, #1
 	cmp	r5, r4
@@ -4158,12 +4094,12 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r2, r2, r3
 	str	r2, [r7, r1, lsl #2]
-	bne	.L546
-.L543:
+	bne	.L539
+.L536:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L550:
+.L543:
 	.align	2
-.L549:
+.L542:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+184
 	.word	.LC8
@@ -4181,18 +4117,18 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L552
+	ldr	r0, .L545
 	movw	r3, #65535
 	movs	r2, #16
 	movs	r1, #255
-	strh	r3, [r0, #356]	@ movhi
+	strh	r3, [r0, #352]	@ movhi
 	movs	r3, #0
-	strh	r3, [r0, #362]	@ movhi
-	add	r0, r0, #368
+	strh	r3, [r0, #358]	@ movhi
+	add	r0, r0, #364
 	b	ftl_memset
-.L553:
+.L546:
 	.align	2
-.L552:
+.L545:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
@@ -4207,23 +4143,23 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L555
+	ldr	r3, .L548
 	mov	r2, #2048
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r4, #0
 	mov	r1, r4
-	strh	r0, [r3, #416]	@ movhi
-	add	r0, r3, #424
+	strh	r0, [r3, #412]	@ movhi
+	add	r0, r3, #420
+	strh	r4, [r3, #414]	@ movhi
+	strh	r4, [r3, #416]	@ movhi
 	strh	r4, [r3, #418]	@ movhi
-	strh	r4, [r3, #420]	@ movhi
-	strh	r4, [r3, #422]	@ movhi
 	bl	ftl_memset
 	mov	r0, r4
 	pop	{r4, pc}
-.L556:
+.L549:
 	.align	2
-.L555:
+.L548:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
@@ -4250,86 +4186,86 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	movs	r3, #0
-.L558:
+.L551:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r3
 	cmp	r1, r2
-	bhi	.L562
-	ldr	r3, .L577
+	bhi	.L555
+	ldr	r3, .L570
 	movs	r6, #0
 	mov	r9, r6
 	mov	fp, r6
-	ldrh	r2, [r3, #308]
+	ldrh	r2, [r3, #304]
 	ldrh	r3, [r4]
 	strh	r2, [r5, r3, lsl #1]	@ movhi
 	ldrh	r10, [r5]
-.L563:
+.L556:
 	ldrh	r3, [r4, #10]
 	uxth	r1, r6
 	cmp	r3, r1
-	bhi	.L567
+	bhi	.L560
 	mov	r0, r9
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L562:
+.L555:
 	uxth	r2, r3
 	ldr	r1, [r6, r2, lsl #2]
 	movs	r2, #0
 	ubfx	r1, r1, #10, #16
-.L559:
+.L552:
 	ldrh	ip, [r4, #10]
 	uxth	r0, r2
 	cmp	ip, r0
-	bhi	.L561
+	bhi	.L554
 	adds	r3, r3, #1
-	b	.L558
-.L561:
+	b	.L551
+.L554:
 	uxth	r0, r2
 	ldrh	ip, [r7, r0, lsl #1]
 	cmp	ip, r1
-	bne	.L560
-	cbz	r1, .L560
+	bne	.L553
+	cbz	r1, .L553
 	ldrh	ip, [r5, r0, lsl #1]
 	add	ip, ip, #1
 	strh	ip, [r5, r0, lsl #1]	@ movhi
-.L560:
+.L553:
 	adds	r2, r2, #1
-	b	.L559
-.L567:
+	b	.L552
+.L560:
 	uxth	r2, r6
 	ldrh	r3, [r5, r2, lsl #1]
 	lsl	r8, r2, #1
 	cmp	r10, r3
-	bls	.L564
+	bls	.L557
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
-	cbnz	r0, .L565
-.L566:
+	cbnz	r0, .L558
+.L559:
 	adds	r6, r6, #1
-	b	.L563
-.L564:
+	b	.L556
+.L557:
 	cmp	r3, #0
-	bne	.L566
+	bne	.L559
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
 	cmp	r0, #0
-	beq	.L566
-.L568:
+	beq	.L559
+.L561:
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	strh	fp, [r8]	@ movhi
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L566
-.L565:
+	b	.L559
+.L558:
 	mov	r9, r1
 	mov	r10, r3
 	cmp	r3, #0
-	beq	.L568
-	b	.L566
-.L578:
+	beq	.L561
+	b	.L559
+.L571:
 	.align	2
-.L577:
+.L570:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -4347,15 +4283,15 @@ FtlL2PDataInit:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L582
+	ldr	r4, .L575
 	movs	r6, #12
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	ldr	r0, [r4, #3364]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r3, [r4, #314]
+	ldrh	r3, [r4, #310]
 	movs	r1, #255
-	ldrh	r2, [r4, #342]
+	ldrh	r2, [r4, #338]
 	ldr	r0, [r4, #3388]
 	muls	r2, r3, r2
 	bl	ftl_memset
@@ -4363,13 +4299,13 @@ FtlL2PDataInit:
 	mov	r3, r4
 	movw	r1, #65535
 	mov	r7, r2
-.L580:
-	ldrh	r4, [r3, #342]
+.L573:
+	ldrh	r4, [r3, #338]
 	uxth	r0, r2
 	adds	r5, r2, #1
 	cmp	r4, r0
-	bhi	.L581
-	ldr	r2, [r3, #332]
+	bhi	.L574
+	ldr	r2, [r3, #328]
 	strh	r1, [r3, #3398]	@ movhi
 	strh	r1, [r3, #3396]	@ movhi
 	strh	r2, [r3, #3406]	@ movhi
@@ -4377,7 +4313,7 @@ FtlL2PDataInit:
 	strh	r2, [r3, #3400]	@ movhi
 	ldrh	r2, [r3, #3440]
 	strh	r2, [r3, #3404]	@ movhi
-	ldrh	r2, [r3, #340]
+	ldrh	r2, [r3, #336]
 	strh	r2, [r3, #3402]	@ movhi
 	ldr	r2, [r3, #3360]
 	str	r2, [r3, #3408]
@@ -4388,26 +4324,26 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3380]
 	str	r2, [r3, #3420]
 	pop	{r3, r4, r5, r6, r7, pc}
-.L581:
+.L574:
 	uxth	r2, r2
-	ldr	r0, [r3, #2544]
+	ldr	r0, [r3, #2540]
 	mul	r4, r6, r2
 	add	ip, r0, r4
 	str	r7, [ip, #4]
 	strh	r1, [r0, r4]	@ movhi
-	ldr	r0, [r3, #2544]
+	ldr	r0, [r3, #2540]
 	add	r0, r0, r4
-	ldrh	r4, [r3, #314]
+	ldrh	r4, [r3, #310]
 	muls	r2, r4, r2
 	ldr	r4, [r3, #3388]
 	bic	r2, r2, #3
 	add	r2, r2, r4
 	str	r2, [r0, #8]
 	mov	r2, r5
-	b	.L580
-.L583:
+	b	.L573
+.L576:
 	.align	2
-.L582:
+.L575:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
@@ -4425,32 +4361,32 @@ FtlVariablesInit:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r5, #0
-	ldr	r4, .L585
+	ldr	r4, .L578
 	movw	r3, #65535
 	mov	r1, r5
-	ldrh	r2, [r4, #324]
+	ldrh	r2, [r4, #320]
 	strh	r3, [r4, #3442]	@ movhi
 	mov	r3, #-1
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	str	r3, [r4, #3452]
 	lsls	r2, r2, #1
 	str	r5, [r4, #3444]
 	str	r5, [r4, #3448]
-	strh	r5, [r4, #348]	@ movhi
+	strh	r5, [r4, #344]	@ movhi
 	bl	ftl_memset
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, r5
-	ldr	r0, [r4, #2540]
+	ldr	r0, [r4, #2536]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	mov	r1, r5
 	ldr	r0, [r4, #3348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	mov	r1, r5
 	movs	r2, #48
-	addw	r0, r4, #2472
+	addw	r0, r4, #2468
 	bl	ftl_memset
 	mov	r2, #512
 	mov	r1, r5
@@ -4460,9 +4396,9 @@ FtlVariablesInit:
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L586:
+.L579:
 	.align	2
-.L585:
+.L578:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -4480,36 +4416,36 @@ SupperBlkListInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L598
+	ldr	r4, .L591
 	movs	r2, #6
 	mov	r9, r5
 	mov	r6, r5
 	movw	fp, #65535
 	.pad #20
 	sub	sp, sp, #20
-	ldrh	r3, [r4, #246]
-	add	r10, r4, #264
+	ldrh	r3, [r4, #242]
+	add	r10, r4, #260
 	movs	r1, #0
-	ldr	r0, [r4, #2520]
+	ldr	r0, [r4, #2516]
 	muls	r2, r3, r2
 	bl	ftl_memset
-	str	r5, [r4, #2536]
+	str	r5, [r4, #2532]
+	str	r5, [r4, #2520]
 	str	r5, [r4, #2524]
-	str	r5, [r4, #2528]
-	strh	r5, [r4, #2532]	@ movhi
-	strh	r5, [r4, #228]	@ movhi
-.L588:
-	ldrh	r3, [r4, #244]
+	strh	r5, [r4, #2528]	@ movhi
+	strh	r5, [r4, #224]	@ movhi
+.L581:
+	ldrh	r3, [r4, #240]
 	uxth	r8, r5
 	cmp	r8, r3
-	bcs	.L595
-	ldrh	r3, [r4, #306]
-	ldrh	r2, [r4, #236]
+	bcs	.L588
+	ldrh	r3, [r4, #302]
+	ldrh	r2, [r4, #232]
 	str	r3, [sp, #4]
 	movs	r3, #0
 	mov	r7, r3
-	b	.L596
-.L590:
+	b	.L589
+.L583:
 	ldrb	r0, [r10, r3]	@ zero_extendqisi2
 	mov	r1, r8
 	str	r2, [sp, #12]
@@ -4518,76 +4454,76 @@ SupperBlkListInit:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L589
+	cbnz	r0, .L582
 	ldr	r1, [sp, #4]
 	add	r7, r7, r1
 	uxth	r7, r7
-.L589:
+.L582:
 	adds	r3, r3, #1
-.L596:
+.L589:
 	uxth	r1, r3
 	cmp	r2, r1
-	bhi	.L590
+	bhi	.L583
 	uxth	r3, r5
-	cbz	r7, .L591
+	cbz	r7, .L584
 	mov	r1, r7
 	str	r3, [sp, #4]
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	ldr	r3, [sp, #4]
 	uxth	r7, r0
-.L592:
-	ldr	r1, [r4, #2520]
+.L585:
+	ldr	r1, [r4, #2516]
 	movs	r2, #6
 	mla	r2, r2, r3, r1
 	strh	r7, [r2, #4]	@ movhi
-	ldrh	r2, [r4, #28]
+	ldrh	r2, [r4, #24]
 	cmp	r2, r8
-	beq	.L593
-	ldrh	r2, [r4, #80]
+	beq	.L586
+	ldrh	r2, [r4, #76]
 	cmp	r2, r8
-	beq	.L593
-	ldrh	r2, [r4, #128]
+	beq	.L586
+	ldrh	r2, [r4, #124]
 	cmp	r2, r8
-	beq	.L593
-	ldr	r2, [r4, #76]
+	beq	.L586
+	ldr	r2, [r4, #72]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L594
+	cbnz	r3, .L587
 	add	r9, r9, #1
 	mov	r0, r8
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-.L593:
+.L586:
 	adds	r5, r5, #1
-	b	.L588
-.L591:
-	ldr	r2, [r4, #76]
+	b	.L581
+.L584:
+	ldr	r2, [r4, #72]
 	strh	fp, [r2, r3, lsl #1]	@ movhi
-	b	.L592
-.L594:
+	b	.L585
+.L587:
 	adds	r6, r6, #1
 	mov	r0, r8
 	uxth	r6, r6
 	bl	INSERT_DATA_LIST
-	b	.L593
-.L595:
-	strh	r6, [r4, #2532]	@ movhi
+	b	.L586
+.L588:
+	strh	r6, [r4, #2528]	@ movhi
 	add	r6, r6, r9
 	cmp	r6, r3
-	strh	r9, [r4, #228]	@ movhi
-	ble	.L597
-	movw	r2, #2210
-	ldr	r1, .L598+4
-	ldr	r0, .L598+8
+	strh	r9, [r4, #224]	@ movhi
+	ble	.L590
+	movw	r2, #2212
+	ldr	r1, .L591+4
+	ldr	r0, .L591+8
 	bl	sftl_printk
-.L597:
+.L590:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L599:
+.L592:
 	.align	2
-.L598:
+.L591:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+198
 	.word	.LC8
@@ -4607,15 +4543,15 @@ FtlGcPageVarInit:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r3, #0
-	ldr	r4, .L601
+	ldr	r4, .L594
 	movs	r1, #255
-	ldrh	r2, [r4, #310]
+	ldrh	r2, [r4, #306]
 	ldr	r0, [r4, #3196]
 	strh	r3, [r4, #3200]	@ movhi
 	strh	r3, [r4, #3208]	@ movhi
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r3, [r4, #310]
+	ldrh	r3, [r4, #306]
 	movs	r2, #12
 	ldr	r0, [r4, #3204]
 	movs	r1, #255
@@ -4623,9 +4559,9 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	pop	{r4, lr}
 	b	FtlGcBufInit
-.L602:
+.L595:
 	.align	2
-.L601:
+.L594:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
@@ -4643,7 +4579,7 @@ FlashGetBadBlockList:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r2, #256
-	ldr	r5, .L610
+	ldr	r5, .L603
 	mov	r4, r0
 	mov	r6, r1
 	movs	r1, #255
@@ -4654,31 +4590,31 @@ FlashGetBadBlockList:
 	blx	r3
 	uxth	r0, r0
 	cmp	r0, #50
-	bls	.L604
+	bls	.L597
 	mov	r2, #256
 	movs	r1, #255
 	mov	r0, r4
 	bl	ftl_memset
 	movs	r0, #0
-.L604:
+.L597:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L609
+	bne	.L602
 	add	r1, r4, r0, lsl #1
 	mov	r3, r4
-.L606:
+.L599:
 	cmp	r3, r1
-	bne	.L607
-.L609:
+	bne	.L600
+.L602:
 	pop	{r4, r5, r6, pc}
-.L607:
+.L600:
 	ldrh	r2, [r3]
 	lsrs	r2, r2, #1
 	strh	r2, [r3], #2	@ movhi
-	b	.L606
-.L611:
+	b	.L599
+.L604:
 	.align	2
-.L610:
+.L603:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
@@ -4711,52 +4647,52 @@ FlashReadPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r1
-	ldr	r5, .L654
+	ldr	r5, .L647
 	mov	r4, r0
 	mov	r8, #0
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L654+4
+	ldr	r7, .L647+4
 	ldrh	r10, [r5, #12]
-	ldr	fp, .L654+24
+	ldr	fp, .L647+24
 	ldr	r2, [r7]
 	str	r7, [sp, #4]
 	str	r2, [sp, #20]
-.L614:
+.L607:
 	cmp	r8, r9
-	bne	.L628
+	bne	.L621
 	ldr	r3, [sp, #4]
 	movs	r0, #0
 	ldr	r2, [sp, #20]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L629
+	beq	.L622
 	bl	__stack_chk_fail
-.L628:
+.L621:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L615
+	cbz	r3, .L608
 	ldr	r3, [r4, #12]
-	cbnz	r3, .L616
-.L615:
+	cbnz	r3, .L609
+.L608:
 	movs	r2, #96
-	ldr	r1, .L654+8
-	ldr	r0, .L654+12
+	ldr	r1, .L647+8
+	ldr	r0, .L647+12
 	bl	sftl_printk
-.L616:
+.L609:
 	add	r2, sp, #12
 	add	r1, sp, #16
 	mov	r0, r4
 	bl	l2p_addr_tran
 	ldr	r0, [sp, #12]
 	cmp	r0, #3
-	bls	.L617
+	bls	.L610
 	mov	r3, #-1
 	str	r3, [r4]
-.L618:
+.L611:
 	add	r8, r8, #1
 	adds	r4, r4, #20
-	b	.L614
-.L617:
+	b	.L607
+.L610:
 	ldr	r6, [r4, #8]
 	uxtb	r0, r0
 	ldr	r3, [r4, #12]
@@ -4770,7 +4706,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L621
+	bne	.L614
 	ldr	r3, [r4, #12]
 	add	r2, r6, #2048
 	ldr	r1, [sp, #16]
@@ -4780,70 +4716,70 @@ FlashReadPages:
 	add	r1, r1, r10
 	blx	r7
 	adds	r1, r0, #1
-	beq	.L622
+	beq	.L615
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	adds	r2, r2, #1
-	bne	.L623
+	bne	.L616
 	ldr	r2, [r3, #8]
 	adds	r2, r2, #1
-	bne	.L623
+	bne	.L616
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L623
-.L622:
+	beq	.L616
+.L615:
 	mov	r3, #-1
 	str	r3, [r4]
-.L623:
+.L616:
 	ldr	r3, [r4]
 	adds	r3, r3, #1
-	beq	.L624
+	beq	.L617
 	cmp	r0, #256
 	it	eq
 	streq	r0, [r4]
-.L624:
+.L617:
 	ldr	r3, [r4]
 	adds	r2, r3, #1
-	beq	.L625
+	beq	.L618
 	cmp	r3, #256
-	bne	.L621
-.L625:
+	bne	.L614
+.L618:
 	ldr	r1, [r4, #4]
 	mov	r0, fp
 	ldr	r2, [sp, #16]
 	bl	sftl_printk
 	ldr	r1, [r4, #8]
-	cbz	r1, .L627
+	cbz	r1, .L620
 	movs	r3, #4
-	ldr	r0, .L654+16
+	ldr	r0, .L647+16
 	mov	r2, r3
 	bl	rknand_print_hex
-.L627:
+.L620:
 	ldr	r1, [r4, #12]
-	cbz	r1, .L621
+	cbz	r1, .L614
 	movs	r3, #4
-	ldr	r0, .L654+20
+	ldr	r0, .L647+20
 	mov	r2, r3
 	bl	rknand_print_hex
-.L621:
+.L614:
 	ldr	r3, [r5, #3324]
 	cmp	r6, r3
-	bne	.L618
+	bne	.L611
 	ldr	r0, [r4, #8]
 	cmp	r6, r0
-	beq	.L618
-	ldrh	r2, [r5, #262]
+	beq	.L611
+	ldrh	r2, [r5, #258]
 	mov	r1, r6
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-	b	.L618
-.L629:
+	b	.L611
+.L622:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L655:
+.L648:
 	.align	2
-.L654:
+.L647:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.word	.LANCHOR1+216
@@ -4867,31 +4803,31 @@ FtlLoadFactoryBbt:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r6, #0
-	ldr	r4, .L666
+	ldr	r4, .L659
 	movw	r10, #61664
 	ldr	r3, [r4, #3304]
-	add	r7, r4, #366
+	add	r7, r4, #362
 	ldr	r8, [r4, #3336]
 	add	r9, r4, #3456
 	str	r3, [r4, #3464]
 	str	r8, [r4, #3468]
-.L657:
-	ldrh	r3, [r4, #258]
+.L650:
+	ldrh	r3, [r4, #254]
 	cmp	r6, r3
-	bcc	.L662
+	bcc	.L655
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L662:
-	ldrh	r5, [r4, #302]
+.L655:
+	ldrh	r5, [r4, #298]
 	movw	r3, #65535
 	strh	r3, [r7, #2]!	@ movhi
-.L659:
-	ldrh	r3, [r4, #302]
+.L652:
+	ldrh	r3, [r4, #298]
 	subs	r5, r5, #1
 	uxth	r5, r5
 	sub	r2, r3, #16
 	cmp	r5, r2
-	ble	.L660
+	ble	.L653
 	mla	r3, r6, r3, r5
 	movs	r2, #1
 	mov	r1, r2
@@ -4901,17 +4837,17 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L659
+	beq	.L652
 	ldrh	r3, [r8]
 	cmp	r3, r10
-	bne	.L659
+	bne	.L652
 	strh	r5, [r7]	@ movhi
-.L660:
+.L653:
 	adds	r6, r6, #1
-	b	.L657
-.L667:
+	b	.L650
+.L660:
 	.align	2
-.L666:
+.L659:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
@@ -4930,7 +4866,7 @@ FtlGetLastWrittenPage:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r6, .L680
+	ldr	r6, .L673
 	cmp	r1, #1
 	lsl	r8, r0, #10
 	mov	r2, r1
@@ -4939,10 +4875,10 @@ FtlGetLastWrittenPage:
 	mov	r1, #1
 	mov	r0, sp
 	str	r3, [sp, #84]
-	ldr	r3, .L680+4
+	ldr	r3, .L673+4
 	ite	eq
-	ldrheq	r5, [r3, #308]
-	ldrhne	r5, [r3, #306]
+	ldrheq	r5, [r3, #304]
+	ldrhne	r5, [r3, #302]
 	ldr	r3, [r3, #3328]
 	subs	r5, r5, #1
 	sxth	r5, r5
@@ -4954,19 +4890,19 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	bne	.L671
+	bne	.L664
 	mov	r9, #0
-.L672:
+.L665:
 	cmp	r9, r5
-	ble	.L675
-.L671:
+	ble	.L668
+.L664:
 	ldr	r2, [sp, #84]
 	mov	r0, r5
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L676
+	beq	.L669
 	bl	__stack_chk_fail
-.L675:
+.L668:
 	add	r3, r9, r5
 	mov	r2, r7
 	add	r3, r3, r3, lsr #31
@@ -4979,27 +4915,27 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	bne	.L673
+	bne	.L666
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L673
+	bne	.L666
 	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L673
+	beq	.L666
 	subs	r4, r4, #1
 	sxth	r5, r4
-	b	.L672
-.L673:
+	b	.L665
+.L666:
 	adds	r4, r4, #1
 	sxth	r9, r4
-	b	.L672
-.L676:
+	b	.L665
+.L669:
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L681:
+.L674:
 	.align	2
-.L680:
+.L673:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -5018,53 +4954,53 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L764
+	ldr	r4, .L757
 	mov	r1, r5
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	ldr	r0, [r4, #3384]
 	strh	r5, [r4, #3440]	@ movhi
-	strh	r5, [r4, #348]	@ movhi
+	strh	r5, [r4, #344]	@ movhi
 	lsls	r2, r2, #2
 	bl	ftl_memset
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	mov	r1, r5
 	ldr	r0, [r4, #3360]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #324]
+	ldrh	r2, [r4, #320]
 	mov	r1, r5
 	ldr	r0, [r4, #3372]
 	lsls	r2, r2, #2
 	bl	ftl_memset
-	ldrh	r2, [r4, #324]
+	ldrh	r2, [r4, #320]
 	mov	r1, r5
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	movs	r2, #16
 	movs	r1, #255
 	addw	r0, r4, #2628
 	bl	ftl_memset
-	ldrh	r8, [r4, #244]
-.L683:
-	ldrh	r3, [r4, #246]
+	ldrh	r8, [r4, #240]
+.L676:
+	ldrh	r3, [r4, #242]
 	cmp	r3, r8
-	bls	.L725
+	bls	.L718
 	movs	r5, #0
-	ldrh	fp, [r4, #236]
+	ldrh	fp, [r4, #232]
 	ldr	r9, [r4, #3292]
 	mov	r7, r5
 	ldr	r3, [r4, #3180]
 	mov	r10, #20
 	ldr	r2, [r4, #3184]
-	ldrh	r6, [r4, #316]
-	b	.L726
-.L686:
+	ldrh	r6, [r4, #312]
+	b	.L719
+.L679:
 	str	r3, [sp, #8]
 	mov	r1, r8
-	ldr	r3, .L764+4
+	ldr	r3, .L757+4
 	str	r2, [sp, #12]
 	ldrb	r0, [r3, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -5072,7 +5008,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L684
+	cbnz	r0, .L677
 	ldr	r1, [sp, #4]
 	mla	r0, r10, r7, r9
 	lsls	r1, r1, #10
@@ -5087,27 +5023,27 @@ FtlScanSysBlk:
 	bic	r1, r1, #3
 	add	r1, r1, r2
 	str	r1, [r0, #12]
-.L684:
+.L677:
 	adds	r5, r5, #1
-.L726:
+.L719:
 	uxth	r1, r5
 	cmp	fp, r1
-	bhi	.L686
-	cbnz	r7, .L687
-.L724:
+	bhi	.L679
+	cbnz	r7, .L680
+.L717:
 	add	r8, r8, #1
 	uxth	r8, r8
-	b	.L683
-.L687:
+	b	.L676
+.L680:
 	mov	r0, r9
 	mov	r9, #0
 	movs	r2, #1
 	mov	r1, r7
 	bl	FlashReadPages
-.L688:
+.L681:
 	uxth	r3, r9
 	cmp	r7, r3
-	bls	.L724
+	bls	.L717
 	movs	r3, #20
 	mul	r10, r3, r9
 	ldr	r3, [r4, #3292]
@@ -5117,10 +5053,10 @@ FtlScanSysBlk:
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #1
 	ubfx	r5, r5, #10, #16
-	bne	.L691
+	bne	.L684
 	mov	fp, #16
 	movw	r3, #65535
-.L693:
+.L686:
 	ldr	r0, [r4, #3292]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
@@ -5133,74 +5069,74 @@ FtlScanSysBlk:
 	ldrh	r2, [r6]
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
-	bne	.L690
+	bne	.L683
 	ldr	r3, [r4, #3292]
 	mov	r2, #-1
 	str	r2, [r3, r10]
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
-	bne	.L691
-.L692:
+	bne	.L684
+.L685:
 	movs	r1, #1
-	b	.L763
-.L690:
+	b	.L756
+.L683:
 	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L691
+	bne	.L684
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L693
-	b	.L692
-.L691:
+	bne	.L686
+	b	.L685
+.L684:
 	ldr	r2, [r4, #2592]
 	ldr	r3, [r6, #4]
 	adds	r1, r2, #1
-	beq	.L694
+	beq	.L687
 	cmp	r2, r3
-	bhi	.L695
-.L694:
+	bhi	.L688
+.L687:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
 	strne	r2, [r4, #2592]
-.L695:
+.L688:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L697
-	bhi	.L698
+	beq	.L690
+	bhi	.L691
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L699
-.L696:
+	beq	.L692
+.L689:
 	add	r9, r9, #1
-	b	.L688
-.L698:
+	b	.L681
+.L691:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L700
+	beq	.L693
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L696
+	bne	.L689
 	movs	r1, #0
-.L763:
+.L756:
 	mov	r0, r5
 	bl	FtlFreeSysBlkQueueIn
-	b	.L696
-.L700:
+	b	.L689
+.L693:
 	ldrh	r2, [r4, #3440]
-	ldr	r3, [r4, #332]
+	ldr	r3, [r4, #328]
 	cmp	r2, r3
-	bls	.L702
+	bls	.L695
 	movw	r2, #1225
-	ldr	r1, .L764+8
-	ldr	r0, .L764+12
+	ldr	r1, .L757+8
+	ldr	r0, .L757+12
 	bl	sftl_printk
-.L702:
-	ldr	r1, [r4, #332]
+.L695:
+	ldr	r1, [r4, #328]
 	ldrh	r0, [r4, #3440]
 	ldr	r10, [r4, #3384]
 	uxth	ip, r1
@@ -5209,58 +5145,58 @@ FtlScanSysBlk:
 	add	ip, ip, #-1
 	sxth	r3, r3
 	sxth	ip, ip
-.L703:
+.L696:
 	cmp	r3, ip
-	bgt	.L709
+	bgt	.L702
 	cmp	r3, #0
-	bge	.L741
-	b	.L696
-.L709:
+	bge	.L734
+	b	.L689
+.L702:
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	mov	lr, r2
 	ldr	r2, [r10, r3, lsl #2]
 	cmp	lr, r2
-	bls	.L704
+	bls	.L697
 	ldr	r2, [r10]
-	cbnz	r2, .L705
+	cbnz	r2, .L698
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #3440]	@ movhi
-.L705:
+.L698:
 	uxth	ip, r3
 	movs	r2, #0
-.L706:
+.L699:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L707
+	bhi	.L700
 	ldr	r2, [r4, #3384]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #3360]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	blt	.L696
+	blt	.L689
 	ldrh	r0, [r4, #3440]
-	ldr	r2, [r4, #332]
+	ldr	r2, [r4, #328]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L696
-.L741:
+	bgt	.L689
+.L734:
 	ldr	r2, [r4, #3384]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
 	strh	r0, [r4, #3440]	@ movhi
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #3360]
-.L761:
+.L754:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	b	.L696
-.L707:
+	b	.L689
+.L700:
 	ldr	r0, [r4, #3384]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -5270,163 +5206,163 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L706
-.L704:
+	b	.L699
+.L697:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L703
-.L765:
+	b	.L696
+.L758:
 	.align	2
-.L764:
+.L757:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+264
+	.word	.LANCHOR0+260
 	.word	.LANCHOR1+231
 	.word	.LC8
-.L699:
-	ldrh	r2, [r4, #348]
-	ldrh	r3, [r4, #324]
+.L692:
+	ldrh	r2, [r4, #344]
+	ldrh	r3, [r4, #320]
 	cmp	r2, r3
-	bls	.L712
+	bls	.L705
 	movw	r2, #1266
-	ldr	r1, .L766
-	ldr	r0, .L766+4
+	ldr	r1, .L759
+	ldr	r0, .L759+4
 	bl	sftl_printk
-.L712:
-	ldrh	lr, [r4, #324]
-	ldrh	r0, [r4, #348]
+.L705:
+	ldrh	lr, [r4, #320]
+	ldrh	r0, [r4, #344]
 	ldr	r10, [r4, #3372]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
-.L713:
+.L706:
 	cmp	r3, ip
-	ble	.L718
+	ble	.L711
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	ldr	r1, [r10, r3, lsl #2]
 	cmp	r2, r1
-	bls	.L714
+	bls	.L707
 	ldr	r2, [r10]
-	cbnz	r2, .L715
+	cbnz	r2, .L708
 	cmp	lr, r0
 	itt	ne
 	addne	r0, r0, #1
-	strhne	r0, [r4, #348]	@ movhi
-.L715:
+	strhne	r0, [r4, #344]	@ movhi
+.L708:
 	uxth	ip, r3
 	movs	r2, #0
-.L716:
+.L709:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L717
+	bhi	.L710
 	ldr	r2, [r4, #3372]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
-	ldr	r2, [r4, #352]
+	ldr	r2, [r4, #348]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-.L718:
+.L711:
 	cmp	r3, #0
-	blt	.L696
-	ldrh	r2, [r4, #324]
-	ldrh	r1, [r4, #348]
+	blt	.L689
+	ldrh	r2, [r4, #320]
+	ldrh	r1, [r4, #344]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L696
+	bgt	.L689
 	adds	r1, r1, #1
 	ldr	r2, [r4, #3372]
-	strh	r1, [r4, #348]	@ movhi
+	strh	r1, [r4, #344]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
-	ldr	r2, [r4, #352]
-	b	.L761
-.L717:
+	ldr	r2, [r4, #348]
+	b	.L754
+.L710:
 	ldr	r0, [r4, #3372]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
 	ldr	lr, [lr, #4]
 	str	lr, [r0, r1, lsl #2]
-	ldr	r0, [r4, #352]
+	ldr	r0, [r4, #348]
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L716
-.L714:
+	b	.L709
+.L707:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L713
-.L697:
+	b	.L706
+.L690:
 	ldrh	r1, [r4, #2628]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L720
+	bne	.L713
 	strh	r5, [r4, #2628]	@ movhi
-.L762:
+.L755:
 	str	r3, [r4, #2636]
-	b	.L696
-.L720:
+	b	.L689
+.L713:
 	ldrh	r0, [r4, #2632]
 	cmp	r0, r2
-	beq	.L721
+	beq	.L714
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L721:
+.L714:
 	ldr	r2, [r4, #2636]
 	ldr	r3, [r6, #4]
 	cmp	r2, r3
-	bcs	.L722
+	bcs	.L715
 	ldrh	r3, [r4, #2628]
 	strh	r5, [r4, #2628]	@ movhi
 	strh	r3, [r4, #2632]	@ movhi
 	ldr	r3, [r6, #4]
-	b	.L762
-.L722:
+	b	.L755
+.L715:
 	strh	r5, [r4, #2632]	@ movhi
-	b	.L696
-.L725:
+	b	.L689
+.L718:
 	ldr	r1, [r4, #3360]
 	ldrh	r3, [r1]
-	cbz	r3, .L727
-.L730:
-	ldr	r1, [r4, #352]
+	cbz	r3, .L720
+.L723:
+	ldr	r1, [r4, #348]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L728
-.L729:
+	beq	.L721
+.L722:
 	ldrh	r2, [r4, #3440]
-	ldr	r3, [r4, #332]
+	ldr	r3, [r4, #328]
 	cmp	r2, r3
-	bls	.L760
+	bls	.L753
 	movw	r2, #1391
-	ldr	r1, .L766
-	ldr	r0, .L766+4
+	ldr	r1, .L759
+	ldr	r0, .L759+4
 	bl	sftl_printk
-.L760:
+.L753:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L727:
+.L720:
 	ldrh	r2, [r4, #3440]
 	cmp	r2, #0
-	beq	.L730
-	ldr	r0, [r4, #332]
-.L731:
+	beq	.L723
+	ldr	r0, [r4, #328]
+.L724:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L730
+	bcs	.L723
 	ldrh	r5, [r1, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r5, #0
-	beq	.L731
+	beq	.L724
 	mov	r3, r2
 	movs	r5, #0
-.L732:
-	ldr	r1, [r4, #332]
+.L725:
+	ldr	r1, [r4, #328]
 	cmp	r3, r1
-	bcs	.L730
+	bcs	.L723
 	ldr	r1, [r4, #3360]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
@@ -5438,41 +5374,41 @@ FtlScanSysBlk:
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L732
-.L728:
-	ldrh	r3, [r4, #348]
+	b	.L725
+.L721:
+	ldrh	r3, [r4, #344]
 	cmp	r3, #0
-	beq	.L729
-	ldrh	r0, [r4, #324]
-.L737:
+	beq	.L722
+	ldrh	r0, [r4, #320]
+.L730:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	r5, r3
-	bge	.L729
+	bge	.L722
 	ldrh	r6, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	cmp	r6, #0
-	beq	.L737
+	beq	.L730
 	movs	r0, #0
-.L738:
-	ldrh	r2, [r4, #324]
+.L731:
+	ldrh	r2, [r4, #320]
 	cmp	r3, r2
-	bge	.L729
-	ldr	r2, [r4, #352]
+	bge	.L722
+	ldr	r2, [r4, #348]
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
 	strh	r6, [r2, r1, lsl #1]	@ movhi
 	ldr	r2, [r4, #3372]
 	ldr	r6, [r2, r3, lsl #2]
 	str	r6, [r2, r1, lsl #2]
-	ldr	r2, [r4, #352]
+	ldr	r2, [r4, #348]
 	strh	r0, [r2, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L738
-.L767:
+	b	.L731
+.L760:
 	.align	2
-.L766:
+.L759:
 	.word	.LANCHOR1+231
 	.word	.LC8
 	.fnend
@@ -5491,21 +5427,21 @@ FtlLoadBbt:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r8, #61649
-	ldr	r4, .L797
+	ldr	r4, .L790
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #3456
 	ldr	r6, [r4, #3336]
 	str	r3, [r4, #3464]
 	str	r6, [r4, #3468]
 	bl	FtlBbtMemInit
-	ldrh	r5, [r4, #302]
+	ldrh	r5, [r4, #298]
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L769:
-	ldrh	r3, [r4, #302]
+.L762:
+	ldrh	r3, [r4, #298]
 	subs	r3, r3, #16
 	cmp	r5, r3
-	ble	.L772
+	ble	.L765
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -5514,7 +5450,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L770
+	bne	.L763
 	ldr	r3, [r4, #3460]
 	movs	r2, #1
 	mov	r1, r2
@@ -5522,96 +5458,96 @@ FtlLoadBbt:
 	adds	r3, r3, #1
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
-.L770:
+.L763:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L771
+	beq	.L764
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L771
+	bne	.L764
 	ldr	r3, [r6, #4]
-	strh	r5, [r4, #356]	@ movhi
-	str	r3, [r4, #364]
+	strh	r5, [r4, #352]	@ movhi
+	str	r3, [r4, #360]
 	ldrh	r3, [r6, #8]
-	strh	r3, [r4, #360]	@ movhi
-.L772:
-	ldrh	r3, [r4, #356]
+	strh	r3, [r4, #356]	@ movhi
+.L765:
+	ldrh	r3, [r4, #352]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L786
-	ldrh	r3, [r4, #360]
+	beq	.L779
+	ldrh	r3, [r4, #356]
 	cmp	r3, r2
-	beq	.L776
+	beq	.L769
 	lsls	r3, r3, #10
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L797+4
+	ldr	r0, .L790+4
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L776
+	beq	.L769
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L776
+	bne	.L769
 	ldr	r3, [r6, #4]
-	ldr	r2, [r4, #364]
+	ldr	r2, [r4, #360]
 	cmp	r3, r2
-	bls	.L776
-	ldrh	r2, [r4, #360]
-	str	r3, [r4, #364]
+	bls	.L769
+	ldrh	r2, [r4, #356]
+	str	r3, [r4, #360]
 	ldrh	r3, [r6, #8]
-	strh	r2, [r4, #356]	@ movhi
-	strh	r3, [r4, #360]	@ movhi
-.L776:
-	ldr	r7, .L797+4
+	strh	r2, [r4, #352]	@ movhi
+	strh	r3, [r4, #356]	@ movhi
+.L769:
+	ldr	r7, .L790+4
 	movs	r1, #1
-	ldrh	r0, [r4, #356]
+	ldrh	r0, [r4, #352]
 	movw	r8, #61649
 	bl	FtlGetLastWrittenPage
 	sxth	r5, r0
 	adds	r0, r0, #1
-	strh	r0, [r4, #358]	@ movhi
-.L778:
+	strh	r0, [r4, #354]	@ movhi
+.L771:
 	cmp	r5, #0
-	bge	.L781
+	bge	.L774
 	movs	r2, #251
-	ldr	r1, .L797+8
-	ldr	r0, .L797+12
+	ldr	r1, .L790+8
+	ldr	r0, .L790+12
 	bl	sftl_printk
-.L780:
+.L773:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
-	strh	r3, [r4, #362]	@ movhi
+	strh	r3, [r4, #358]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L783
-	ldr	r2, [r4, #232]
+	beq	.L776
+	ldr	r2, [r4, #228]
 	cmp	r0, r2
-	beq	.L783
-	ldrh	r3, [r4, #246]
+	beq	.L776
+	ldrh	r3, [r4, #242]
 	lsrs	r3, r3, #2
 	cmp	r2, r3
-	bcs	.L783
+	bcs	.L776
 	cmp	r0, r3
-	bcs	.L783
+	bcs	.L776
 	bl	FtlSysBlkNumInit
-.L783:
-	ldr	r6, .L797+16
+.L776:
+	ldr	r6, .L790+16
 	movs	r5, #0
-.L784:
-	ldrh	r3, [r4, #258]
+.L777:
+	ldrh	r3, [r4, #254]
 	cmp	r5, r3
-	bcc	.L785
+	bcc	.L778
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L771:
+.L764:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L769
-.L781:
-	ldrh	r3, [r4, #356]
+	b	.L762
+.L774:
+	ldrh	r3, [r4, #352]
 	movs	r2, #1
 	mov	r1, r2
 	mov	r0, r7
@@ -5622,15 +5558,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L779
+	beq	.L772
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	beq	.L780
-.L779:
+	beq	.L773
+.L772:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L778
-.L785:
+	b	.L771
+.L778:
 	ldrh	r2, [r4, #3392]
 	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
@@ -5638,18 +5574,18 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	adds	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L784
-.L786:
+	b	.L777
+.L779:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L798:
+.L791:
 	.align	2
-.L797:
+.L790:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
 	.word	.LC8
-	.word	.LANCHOR0+380
+	.word	.LANCHOR0+376
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	1
@@ -5661,74 +5597,130 @@ FtlLoadBbt:
 	.type	FlashProgPages, %function
 FlashProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 56
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L830
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #60
-	sub	sp, sp, #60
-	str	r3, [sp, #16]
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r6, .L830+4
+	mov	fp, r1
 	mov	r4, r0
 	mov	r5, r0
-	mov	r9, #0
-	ldr	r3, .L839
-	ldr	r8, .L839+8
-	str	r2, [sp, #12]
+	str	r2, [sp, #8]
+	mov	r10, #0
 	ldr	r2, [r3]
-	mov	r10, r8
-	mov	fp, r8
-	str	r1, [sp, #4]
-	str	r2, [sp, #52]
-	ldrh	r2, [r8, #12]
-	str	r3, [sp, #20]
+	mov	r8, r6
+	str	r3, [sp, #12]
+	str	r2, [sp, #44]
+	ldrh	r2, [r6, #12]
 	str	r2, [sp]
 	lsls	r2, r2, #3
-	str	r2, [sp, #8]
-.L800:
-	ldr	r3, [sp, #4]
-	cmp	r9, r3
-	bne	.L814
-	ldr	r3, [sp, #16]
-	cmp	r3, #0
-	beq	.L808
+	str	r2, [sp, #4]
+.L793:
+	cmp	r10, fp
+	bne	.L807
+	ldr	r7, .L830+8
 	movs	r5, #0
-	ldr	r7, .L839+4
-	ldr	r8, .L839+36
-	ldr	r6, .L839+8
-	b	.L815
-.L814:
+	ldr	r8, .L830+32
+	ldr	r9, .L830+36
+.L808:
+	cmp	r10, r5
+	beq	.L801
+	ldr	r2, [r6, #3324]
+	movs	r3, #0
+	movs	r1, #1
+	add	r0, sp, #24
+	str	r3, [r2]
+	ldr	r2, [r6, #3332]
+	str	r3, [r2]
+	ldr	r3, [r4, #4]
+	ldr	r2, [sp, #8]
+	str	r3, [sp, #28]
+	ldr	r3, [r6, #3324]
+	str	r3, [sp, #32]
+	ldr	r3, [r6, #3332]
+	str	r3, [sp, #36]
+	bl	FlashReadPages
+	ldr	fp, [sp, #24]
+	cmp	fp, #-1
+	bne	.L809
+	ldr	r1, [r4, #4]
+	mov	r0, r7
+	bl	sftl_printk
+	str	fp, [r4]
+.L809:
+	ldr	fp, [sp, #24]
+	cmp	fp, #256
+	bne	.L810
+	ldr	r1, [r4, #4]
+	mov	r0, r8
+	bl	sftl_printk
+	str	fp, [r4]
+.L810:
+	ldr	r3, [r4, #12]
+	cbz	r3, .L811
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3332]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L811
+	ldr	r1, [r4, #4]
+	mov	r0, r9
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L811:
+	ldr	r3, [r4, #8]
+	cbz	r3, .L812
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3324]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L812
+	ldr	r1, [r4, #4]
+	ldr	r0, .L830+12
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L812:
+	adds	r5, r5, #1
+	adds	r4, r4, #20
+	b	.L808
+.L807:
 	ldr	r3, [r5, #8]
-	cbz	r3, .L801
+	cbz	r3, .L794
 	ldr	r3, [r5, #12]
-	cbnz	r3, .L802
-.L801:
+	cbnz	r3, .L795
+.L794:
 	movs	r2, #148
-	ldr	r1, .L839+12
-	ldr	r0, .L839+16
+	ldr	r1, .L830+16
+	ldr	r0, .L830+20
 	bl	sftl_printk
-.L802:
-	add	r2, sp, #24
-	add	r1, sp, #28
+.L795:
+	add	r2, sp, #16
+	add	r1, sp, #20
 	mov	r0, r5
 	bl	l2p_addr_tran
-	ldr	r7, [sp, #24]
+	ldr	r7, [sp, #16]
 	cmp	r7, #3
-	bls	.L803
-.L838:
+	bls	.L796
+.L829:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L804
-.L803:
-	cbnz	r7, .L805
-	ldr	r3, [sp, #28]
-	ldr	r2, [sp, #8]
+	b	.L797
+.L796:
+	cbnz	r7, .L798
+	ldr	r3, [sp, #20]
+	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bls	.L805
-	ldr	r5, .L839+12
-	ldr	r6, .L839+20
-	ldr	r8, .L839+40
-	b	.L837
-.L807:
+	bls	.L798
+	ldr	r5, .L830+16
+	ldr	r6, .L830+24
+	ldr	r8, .L830+40
+	b	.L828
+.L800:
 	mov	r3, #-1
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5744,149 +5736,84 @@ FlashProgPages:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L839+24
+	ldr	r0, .L830+28
 	bl	rknand_print_hex
-.L837:
-	ldr	r3, [sp, #4]
-	adds	r4, r4, #20
-	cmp	r7, r3
-	bne	.L807
+.L828:
+	cmp	r7, fp
+	add	r4, r4, #20
+	bne	.L800
 	bl	dump_stack
-.L808:
-	ldr	r3, [sp, #20]
+.L801:
+	ldr	r3, [sp, #12]
 	movs	r0, #0
-	ldr	r2, [sp, #52]
+	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L822
+	beq	.L814
 	bl	__stack_chk_fail
-.L805:
+.L798:
 	ldr	r1, [r5, #8]
 	lsls	r3, r1, #26
-	beq	.L823
-	ldr	r7, [fp, #3324]
-	cmp	r1, r7
-	beq	.L809
-	ldrh	r2, [fp, #262]
-	mov	r0, r7
+	beq	.L815
+	ldr	r9, [r8, #3324]
+	cmp	r1, r9
+	beq	.L802
+	ldrh	r2, [r8, #258]
+	mov	r0, r9
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-.L809:
+.L802:
 	ldr	r3, [r5, #12]
-	mov	r2, r7
-	ldr	r1, [sp, #28]
-	ldrb	r0, [sp, #24]	@ zero_extendqisi2
-	ldr	r6, [fp, #3256]
-	blx	r6
-	cbnz	r0, .L810
+	mov	r2, r9
+	ldr	r1, [sp, #20]
+	ldrb	r0, [sp, #16]	@ zero_extendqisi2
+	ldr	r7, [r8, #3256]
+	blx	r7
+	cbnz	r0, .L803
 	str	r0, [r5]
-.L811:
+.L804:
 	ldrh	r3, [r8, #14]
 	cmp	r3, #4
-	bne	.L804
+	bne	.L797
 	ldr	r0, [sp]
-	add	r2, r7, #2048
+	add	r2, r9, #2048
 	ldr	r3, [r5, #12]
-	ldr	r1, [sp, #28]
-	ldr	r6, [r8, #3256]
+	ldr	r1, [sp, #20]
+	ldr	r7, [r8, #3256]
 	adds	r3, r3, #8
 	add	r1, r1, r0
-	ldrb	r0, [sp, #24]	@ zero_extendqisi2
-	blx	r6
+	ldrb	r0, [sp, #16]	@ zero_extendqisi2
+	blx	r7
 	cmp	r0, #0
-	bne	.L838
-.L804:
-	add	r9, r9, #1
+	bne	.L829
+.L797:
+	add	r10, r10, #1
 	adds	r5, r5, #20
-	b	.L800
-.L823:
-	mov	r7, r1
-	b	.L809
-.L810:
+	b	.L793
+.L815:
+	mov	r9, r1
+	b	.L802
+.L803:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L811
-.L820:
-	ldr	r2, [r10, #3324]
-	movs	r3, #0
-	movs	r1, #1
-	add	r0, sp, #32
-	str	r3, [r2]
-	ldr	r2, [r10, #3332]
-	str	r3, [r2]
-	ldr	r3, [r4, #4]
-	ldr	r2, [sp, #12]
-	str	r3, [sp, #36]
-	ldr	r3, [r10, #3324]
-	str	r3, [sp, #40]
-	ldr	r3, [r10, #3332]
-	str	r3, [sp, #44]
-	bl	FlashReadPages
-	ldr	fp, [sp, #32]
-	cmp	fp, #-1
-	bne	.L816
-	ldr	r1, [r4, #4]
-	mov	r0, r7
-	bl	sftl_printk
-	str	fp, [r4]
-.L816:
-	ldr	fp, [sp, #32]
-	cmp	fp, #256
-	bne	.L817
-	ldr	r1, [r4, #4]
-	mov	r0, r8
-	bl	sftl_printk
-	str	fp, [r4]
-.L817:
-	ldr	r3, [r4, #12]
-	cbz	r3, .L818
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3332]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	beq	.L818
-	ldr	r1, [r4, #4]
-	ldr	r0, .L839+28
-	bl	sftl_printk
-	mov	r3, #-1
-	str	r3, [r4]
-.L818:
-	ldr	r3, [r4, #8]
-	cbz	r3, .L819
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3324]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	beq	.L819
-	ldr	r1, [r4, #4]
-	ldr	r0, .L839+32
-	bl	sftl_printk
-	mov	r3, #-1
-	str	r3, [r4]
-.L819:
-	adds	r5, r5, #1
-	adds	r4, r4, #20
-.L815:
-	cmp	r9, r5
-	bne	.L820
-	b	.L808
-.L822:
-	add	sp, sp, #60
+	b	.L804
+.L814:
+	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L840:
+.L831:
 	.align	2
-.L839:
+.L830:
 	.word	__stack_chk_guard
-	.word	.LC95
 	.word	.LANCHOR0
+	.word	.LC95
+	.word	.LC98
 	.word	.LANCHOR1+256
 	.word	.LC8
 	.word	.LC86
 	.word	.LC88
-	.word	.LC97
-	.word	.LC98
 	.word	.LC96
+	.word	.LC97
 	.word	.LC87
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
@@ -5904,7 +5831,7 @@ FtlLowFormatEraseBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, #0
-	ldr	r4, .L886
+	ldr	r4, .L877
 	mov	r7, r1
 	mov	r6, r10
 	mov	r5, r10
@@ -5914,76 +5841,76 @@ FtlLowFormatEraseBlock:
 	mov	fp, r4
 	str	r0, [sp, #4]
 	str	r0, [r4, #3288]
-.L842:
-	ldrh	r1, [r4, #236]
+.L833:
+	ldrh	r1, [r4, #232]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L847
+	bhi	.L838
 	cmp	r6, #0
-	beq	.L841
+	beq	.L832
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r6
 	movs	r1, #0
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L850:
+.L841:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L852
+	bhi	.L843
 	cmp	r7, #0
-	beq	.L869
-	ldrh	r3, [r4, #308]
+	beq	.L860
+	ldrh	r3, [r4, #304]
 	mov	r10, #1
 	str	r3, [sp, #8]
-.L853:
+.L844:
 	mov	r8, #0
 	mov	fp, #20
-.L863:
+.L854:
 	mov	r9, #0
 	mov	r6, r9
-.L854:
-	ldrh	r1, [r4, #236]
+.L845:
+	ldrh	r1, [r4, #232]
 	uxth	r3, r9
 	cmp	r1, r3
-	bhi	.L858
-	cbz	r6, .L841
+	bhi	.L849
+	cbz	r6, .L832
 	mov	r9, #0
 	movs	r3, #1
 	mov	r2, r10
 	mov	r1, r6
 	ldr	r0, [r4, #3272]
 	bl	FlashProgPages
-.L860:
+.L851:
 	uxth	r3, r9
 	cmp	r6, r3
-	bhi	.L862
+	bhi	.L853
 	add	r8, r8, #1
 	ldr	r2, [sp, #8]
 	uxth	r3, r8
 	cmp	r2, r3
-	bhi	.L863
+	bhi	.L854
 	mov	r8, #0
 	mov	r9, #20
-.L864:
+.L855:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L866
+	bhi	.L857
 	ldr	r3, [sp, #4]
 	cmp	r3, #63
-	bls	.L867
-	cbz	r7, .L841
-.L867:
+	bls	.L858
+	cbz	r7, .L832
+.L858:
 	mov	r2, r6
 	mov	r1, r10
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L841:
+.L832:
 	mov	r0, r5
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L847:
+.L838:
 	uxth	r3, r10
 	ldr	r0, [r4, #3272]
 	movs	r2, #0
@@ -5991,16 +5918,16 @@ FtlLowFormatEraseBlock:
 	add	r3, r3, r4
 	str	r2, [r0, r1]
 	ldr	r1, [sp, #4]
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	cbz	r7, .L843
+	cbz	r7, .L834
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L844
-.L843:
+	cbnz	r0, .L835
+.L834:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L845
+	cbnz	r0, .L836
 	ldr	r1, [r4, #3272]
 	lsl	r3, r8, #10
 	ldr	r0, [fp, #3340]
@@ -6008,7 +5935,7 @@ FtlLowFormatEraseBlock:
 	str	r3, [r1, #4]
 	ldr	r3, [r4, #3320]
 	str	r3, [r1, #8]
-	ldrh	r3, [r4, #316]
+	ldrh	r3, [r4, #312]
 	muls	r3, r6, r3
 	add	r6, r6, #1
 	it	mi
@@ -6017,34 +5944,34 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L844:
+.L835:
 	add	r10, r10, #1
-	b	.L842
-.L845:
+	b	.L833
+.L836:
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L844
-.L852:
+	b	.L835
+.L843:
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
 	adds	r3, r3, #1
-	bne	.L851
+	bne	.L842
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L851:
+.L842:
 	add	r8, r8, #1
-	b	.L850
-.L869:
+	b	.L841
+.L860:
 	movs	r3, #2
 	mov	r10, r7
 	str	r3, [sp, #8]
-	b	.L853
-.L858:
+	b	.L844
+.L849:
 	uxth	r3, r9
 	ldr	r0, [r4, #3272]
 	movs	r2, #0
@@ -6052,26 +5979,26 @@ FtlLowFormatEraseBlock:
 	add	r3, r3, r4
 	str	r2, [r0, r1]
 	ldr	r1, [sp, #4]
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	str	r0, [sp, #12]
-	cbz	r7, .L855
+	cbz	r7, .L846
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L856
-.L855:
+	cbnz	r0, .L847
+.L846:
 	ldr	r0, [sp, #12]
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L856
+	cbnz	r0, .L847
 	ldr	r1, [r4, #3272]
 	ldr	r3, [sp, #12]
-	ldr	r2, .L886
+	ldr	r2, .L877
 	mla	r1, fp, r6, r1
 	ldr	r0, [r2, #3320]
 	add	r3, r8, r3, lsl #10
 	str	r3, [r1, #4]
 	ldr	r3, [r4, #3316]
 	str	r3, [r1, #8]
-	ldrh	r3, [r4, #316]
+	ldrh	r3, [r4, #312]
 	muls	r3, r6, r3
 	add	r6, r6, #1
 	it	mi
@@ -6080,40 +6007,40 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L856:
+.L847:
 	add	r9, r9, #1
-	b	.L854
-.L862:
+	b	.L845
+.L853:
 	mul	r3, fp, r9
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbz	r3, .L861
+	cbz	r3, .L852
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L861:
+.L852:
 	add	r9, r9, #1
-	b	.L860
-.L866:
-	cbz	r7, .L865
+	b	.L851
+.L857:
+	cbz	r7, .L856
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbnz	r3, .L865
+	cbnz	r3, .L856
 	ldr	r0, [r1, #4]
 	movs	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L865:
+.L856:
 	add	r8, r8, #1
-	b	.L864
-.L887:
+	b	.L855
+.L878:
 	.align	2
-.L886:
+.L877:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
@@ -6131,14 +6058,14 @@ FlashTestBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	cmp	r0, #11
-	ldr	r6, .L894
+	ldr	r6, .L885
 	.pad #88
 	sub	sp, sp, #88
 	mov	r5, r0
 	ldr	r2, [r6]
 	str	r2, [sp, #84]
-	bls	.L892
-	ldr	r4, .L894+4
+	bls	.L883
+	ldr	r4, .L885+4
 	add	r0, sp, #20
 	movs	r2, #32
 	movs	r1, #165
@@ -6162,7 +6089,7 @@ FlashTestBlk:
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [sp]
-	cbnz	r3, .L893
+	cbnz	r3, .L884
 	adds	r3, r5, #1
 	mov	r0, sp
 	str	r3, [sp, #4]
@@ -6175,32 +6102,32 @@ FlashTestBlk:
 	it	ne
 	movne	r4, #1
 	negs	r4, r4
-.L890:
+.L881:
 	movs	r2, #1
 	movs	r1, #0
 	mov	r0, sp
 	str	r5, [sp, #4]
 	bl	FlashEraseBlocks
-.L888:
+.L879:
 	ldr	r2, [sp, #84]
 	mov	r0, r4
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L891
+	beq	.L882
 	bl	__stack_chk_fail
-.L893:
+.L884:
 	mov	r4, #-1
-	b	.L890
-.L892:
+	b	.L881
+.L883:
 	movs	r4, #0
-	b	.L888
-.L891:
+	b	.L879
+.L882:
 	add	sp, sp, #88
 	@ sp needed
 	pop	{r4, r5, r6, pc}
-.L895:
+.L886:
 	.align	2
-.L894:
+.L885:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -6220,47 +6147,47 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	movs	r5, #0
-	ldr	r4, .L908
+	ldr	r4, .L899
 	movs	r1, #0
 	ldr	r0, [r4, #3304]
-	add	r6, r4, #380
+	add	r6, r4, #376
 	ldr	r3, [r4, #3336]
-	ldrh	r2, [r4, #314]
+	ldrh	r2, [r4, #310]
 	str	r0, [r4, #3464]
 	str	r3, [r4, #3468]
 	bl	ftl_memset
-.L897:
-	ldrh	r3, [r4, #258]
+.L888:
+	ldrh	r3, [r4, #254]
 	cmp	r5, r3
-	blt	.L898
+	blt	.L889
 	ldr	r6, [r4, #3468]
 	movs	r2, #16
 	movs	r1, #255
-	ldr	r8, .L908+12
-	ldr	r9, .L908+16
+	ldr	r8, .L899+12
+	ldr	r9, .L899+16
 	movs	r5, #0
 	mov	r0, r6
 	mov	r7, r5
 	bl	ftl_memset
 	movw	r3, #61649
 	strh	r3, [r6]	@ movhi
-	ldr	r3, [r4, #364]
+	ldr	r3, [r4, #360]
 	str	r3, [r6, #4]
-	ldrh	r3, [r4, #356]
+	ldrh	r3, [r4, #352]
 	strh	r3, [r6, #2]	@ movhi
-	ldrh	r3, [r4, #360]
+	ldrh	r3, [r4, #356]
 	strh	r3, [r6, #8]	@ movhi
-	ldrh	r3, [r4, #362]
+	ldrh	r3, [r4, #358]
 	strh	r3, [r6, #10]	@ movhi
-	ldr	r3, [r4, #232]
+	ldr	r3, [r4, #228]
 	strh	r3, [r6, #12]	@ movhi
 	ldr	r3, [r4, #2608]
 	strh	r3, [r6, #14]	@ movhi
-.L899:
+.L890:
 	ldr	r3, [r4, #3304]
 	mov	r10, #0
-	ldrh	r2, [r4, #358]
-	ldrh	r1, [r4, #356]
+	ldrh	r2, [r4, #354]
+	ldrh	r1, [r4, #352]
 	str	r3, [r4, #3464]
 	ldr	r3, [r4, #3336]
 	str	r10, [r4, #3456]
@@ -6268,58 +6195,58 @@ FtlBbmTblFlush:
 	orr	r3, r2, r1, lsl #10
 	ldrh	r0, [r6, #10]
 	str	r3, [r4, #3460]
-	ldrh	r3, [r4, #360]
+	ldrh	r3, [r4, #356]
 	str	r0, [sp]
 	mov	r0, r8
 	bl	sftl_printk
-	ldrh	r3, [r4, #308]
-	ldrh	r2, [r4, #358]
+	ldrh	r3, [r4, #304]
+	ldrh	r2, [r4, #354]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L900
-	ldr	r3, [r4, #364]
-	ldrh	r2, [r4, #356]
+	blt	.L891
+	ldr	r3, [r4, #360]
+	ldrh	r2, [r4, #352]
 	ldr	r0, [r4, #3272]
 	adds	r3, r3, #1
-	strh	r10, [r4, #358]	@ movhi
-	str	r3, [r4, #364]
+	strh	r10, [r4, #354]	@ movhi
+	str	r3, [r4, #360]
 	str	r3, [r6, #4]
-	ldrh	r3, [r4, #360]
+	ldrh	r3, [r4, #356]
 	strh	r2, [r6, #8]	@ movhi
-	strh	r2, [r4, #360]	@ movhi
+	strh	r2, [r4, #356]	@ movhi
 	movs	r2, #1
-	strh	r3, [r4, #356]	@ movhi
+	strh	r3, [r4, #352]	@ movhi
 	mov	r1, r2
 	lsls	r3, r3, #10
 	str	r3, [r4, #3460]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-.L900:
+.L891:
 	movs	r3, #1
 	mov	r0, r9
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-	ldrh	r3, [r4, #358]
+	ldrh	r3, [r4, #354]
 	adds	r3, r3, #1
-	strh	r3, [r4, #358]	@ movhi
+	strh	r3, [r4, #354]	@ movhi
 	ldr	r3, [r4, #3456]
 	adds	r2, r3, #1
-	bne	.L901
+	bne	.L892
 	adds	r5, r5, #1
 	ldr	r1, [r4, #3460]
 	uxth	r5, r5
-	ldr	r0, .L908+4
+	ldr	r0, .L899+4
 	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L899
+	bls	.L890
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L908+8
+	ldr	r0, .L899+8
 	bl	sftl_printk
-.L903:
-	b	.L903
-.L898:
+.L894:
+	b	.L894
+.L889:
 	ldrh	r2, [r4, #3392]
 	ldr	r3, [r4, #3464]
 	ldr	r1, [r6, #4]!
@@ -6328,23 +6255,23 @@ FtlBbmTblFlush:
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L897
-.L904:
+	b	.L888
+.L895:
 	movs	r7, #1
-	b	.L899
-.L901:
+	b	.L890
+.L892:
 	adds	r7, r7, #1
 	cmp	r7, #1
-	ble	.L904
+	ble	.L895
 	cmp	r3, #256
-	beq	.L899
+	beq	.L890
 	movs	r0, #0
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L909:
+.L900:
 	.align	2
-.L908:
+.L899:
 	.word	.LANCHOR0
 	.word	.LC100
 	.word	.LC101
@@ -6366,147 +6293,144 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L946
+	ldr	r4, .L937
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L946+20
-.L911:
-	ldr	r3, .L946
-	ldr	r2, .L946
-	ldrh	r3, [r3, #228]
-	ldrh	r2, [r2, #2532]
+	ldr	r9, .L937+20
+.L902:
+	ldr	r3, .L937
+	ldr	r2, .L937
+	ldrh	r3, [r3, #224]
+	ldrh	r2, [r2, #2528]
 	add	r3, r3, r2
-	ldr	r2, .L946
-	ldrh	r2, [r2, #244]
+	ldr	r2, .L937
+	ldrh	r2, [r2, #240]
 	cmp	r3, r2
-	ble	.L912
-	mov	r2, #2656
+	ble	.L903
+	movw	r2, #2660
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L912:
-	ldr	r3, .L946+8
+.L903:
+	ldr	r3, .L937+8
 	cmp	r5, r3
-	bne	.L938
-	ldrh	r3, [r4, #228]
+	bne	.L929
+	ldrh	r3, [r4, #224]
 	ldr	r1, [r4, #3168]
 	mul	r2, r1, r3
 	lsrs	r1, r3, #1
 	adds	r1, r1, #1
 	add	r1, r1, r2, lsr #2
 	uxth	r1, r1
-	cbz	r1, .L913
+	cbz	r1, .L904
 	subs	r1, r1, #1
 	uxth	r1, r1
-.L913:
-	ldr	r0, .L946+12
+.L904:
+	ldr	r0, .L937+12
 	bl	List_pop_index_node
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	mov	r6, r0
 	uxth	r8, r0
-	cbnz	r3, .L914
-	movw	r2, #2665
+	cbnz	r3, .L905
+	movw	r2, #2669
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L914:
-	ldrh	r3, [r4, #228]
+.L905:
+	ldrh	r3, [r4, #224]
 	subs	r3, r3, #1
-	strh	r3, [r4, #228]	@ movhi
-	ldrh	r3, [r4, #244]
+	strh	r3, [r4, #224]	@ movhi
+	ldrh	r3, [r4, #240]
 	cmp	r3, r8
-	bls	.L911
-	ldr	r3, [r4, #76]
+	bls	.L902
+	ldr	r3, [r4, #72]
 	uxth	r6, r6
 	ldrh	r7, [r3, r6, lsl #1]
 	cmp	r7, #0
-	bne	.L911
+	bne	.L902
 	strh	r8, [r5]	@ movhi
 	mov	r0, r5
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L916
-	ldr	r3, [r4, #76]
+	cbnz	r3, .L907
+	ldr	r3, [r4, #72]
 	movw	r2, #65535
 	mov	r0, r8
 	strh	r2, [r3, r6, lsl #1]	@ movhi
 	bl	INSERT_DATA_LIST
-	ldrh	r2, [r4, #2532]
-	ldrh	r3, [r4, #228]
+	ldrh	r2, [r4, #2528]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L911
-	movw	r2, #2679
+	ble	.L902
+	movw	r2, #2683
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-	b	.L911
-.L938:
+	b	.L902
+.L929:
 	movs	r1, #0
-	b	.L913
-.L916:
-	ldrh	r2, [r4, #2532]
-	ldrh	r3, [r4, #228]
+	b	.L904
+.L907:
+	ldrh	r2, [r4, #2528]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L918
-	movw	r2, #2682
+	ble	.L909
+	movw	r2, #2686
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L918:
+.L909:
 	ldr	r1, [r4, #3272]
 	mov	r10, #20
-	ldrh	r2, [r4, #236]
+	ldrh	r2, [r4, #232]
 	add	fp, r5, #16
 	mov	r0, fp
 	mov	ip, #0
 	mov	r3, r1
 	mla	r2, r10, r2, r1
 	str	r2, [sp, #4]
-.L919:
+.L910:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L921
-	cbnz	r7, .L922
-	movw	r2, #2693
+	bne	.L912
+	cbnz	r7, .L913
+	movw	r2, #2697
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L922:
-	ldrh	r3, [r4, #176]
+.L913:
+	ldrh	r3, [r4, #172]
 	cmp	r3, r8
-	bne	.L923
-	movw	r2, #2695
+	bne	.L914
+	movw	r2, #2699
 	mov	r1, r9
-	ldr	r0, .L946+4
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L923:
+.L914:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #2540]
+	ldr	r2, [r4, #2536]
 	cmp	r3, #0
-	bne	.L924
+	bne	.L915
 	ldrh	r3, [r2, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L925
-	ldrh	r1, [r4, #296]
+	beq	.L916
+	ldrh	r1, [r4, #292]
 	add	r3, r3, r1
-.L945:
+.L936:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
-	movs	r1, #0
 	ldr	r3, [r4, #2600]
-	mov	r0, r8
 	adds	r3, r3, #1
 	str	r3, [r4, #2600]
-	bl	ftl_set_blk_mode
-.L927:
-	ldr	r3, [r4, #2540]
+.L918:
+	ldr	r3, [r4, #2536]
 	ldr	r2, [r4, #2616]
-	ldrh	r0, [r4, #296]
+	ldrh	r0, [r4, #292]
 	ldrh	r3, [r3, r6, lsl #1]
-	ldrh	r1, [r4, #244]
+	ldrh	r1, [r4, #240]
 	cmp	r3, r2
 	ldr	r2, [r4, #2600]
 	it	hi
@@ -6518,17 +6442,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3272]
 	str	r0, [r4, #2608]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L946+16
+	ldr	r0, .L937+16
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r2, #20
 	mla	r2, r2, r7, r1
 	adds	r3, r1, #4
 	adds	r2, r2, #24
-.L929:
+.L920:
 	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L930
+	bne	.L921
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3272]
@@ -6536,63 +6460,61 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r3, r10
 	movs	r1, #20
-.L931:
+.L922:
 	uxth	r2, r10
 	cmp	r7, r2
-	bhi	.L933
+	bhi	.L924
 	cmp	r3, #0
-	ble	.L934
+	ble	.L925
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L934:
+.L925:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L935
-	ldr	r3, [r4, #76]
+	bne	.L926
+	ldr	r3, [r4, #72]
 	movw	r2, #65535
 	strh	r2, [r3, r6, lsl #1]	@ movhi
-	b	.L911
-.L921:
+	b	.L902
+.L912:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
 	ldrh	r2, [r0], #2
 	cmp	r2, lr
-	beq	.L920
+	beq	.L911
 	mla	lr, r10, r7, r1
 	adds	r7, r7, #1
 	lsls	r2, r2, #10
 	uxth	r7, r7
 	str	r2, [lr, #4]
-.L920:
+.L911:
 	adds	r3, r3, #20
-	b	.L919
-.L925:
+	b	.L910
+.L916:
 	movs	r3, #2
-	b	.L945
-.L924:
+	b	.L936
+.L915:
 	ldrh	r3, [r2, r6, lsl #1]
-	mov	r0, r8
 	adds	r3, r3, #1
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	ldr	r3, [r4, #2604]
 	adds	r3, r3, #1
 	str	r3, [r4, #2604]
-	bl	ftl_set_blk_mode.part.6
-	b	.L927
-.L930:
+	b	.L918
+.L921:
 	ldr	r1, [r3, #-20]
 	ands	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L929
-.L933:
+	b	.L920
+.L924:
 	mul	r2, r1, r10
 	ldr	r0, [r4, #3272]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	adds	r0, r2, #1
-	bne	.L932
+	bne	.L923
 	ldr	r0, [ip, #4]
 	adds	r3, r3, #1
 	str	r1, [sp, #12]
@@ -6607,12 +6529,12 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
 	strb	r2, [r5, #7]
-.L932:
+.L923:
 	add	r10, r10, #1
 	add	fp, fp, #2
-	b	.L931
-.L935:
-	ldrh	r3, [r4, #306]
+	b	.L922
+.L926:
+	ldrh	r3, [r4, #302]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
 	movs	r2, #0
@@ -6624,30 +6546,30 @@ allocate_data_superblock:
 	str	r2, [r5, #12]
 	adds	r2, r2, #1
 	str	r2, [r4, #2592]
-	ldr	r2, [r4, #76]
+	ldr	r2, [r4, #72]
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #4]
-	cbz	r3, .L936
+	cbz	r3, .L927
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L937
-.L936:
-	movw	r2, #2748
-	ldr	r1, .L946+20
-	ldr	r0, .L946+4
+	cbnz	r3, .L928
+.L927:
+	mov	r2, #2752
+	ldr	r1, .L937+20
+	ldr	r0, .L937+4
 	bl	sftl_printk
-.L937:
+.L928:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L947:
+.L938:
 	.align	2
-.L946:
+.L937:
 	.word	.LANCHOR0
 	.word	.LC8
-	.word	.LANCHOR0+128
-	.word	.LANCHOR0+2536
+	.word	.LANCHOR0+124
+	.word	.LANCHOR0+2532
 	.word	-1024
 	.word	.LANCHOR1+271
 	.fnend
@@ -6666,65 +6588,65 @@ FtlGcFreeBadSuperBlk:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L960
+	ldr	r4, .L951
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L949
+	cbz	r3, .L940
 	movs	r7, #0
 	addw	r10, r4, #3212
-.L950:
-	ldrh	r2, [r4, #236]
+.L941:
+	ldrh	r2, [r4, #232]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L956
+	bhi	.L947
 	bl	FtlGcReFreshBadBlk
-.L949:
+.L940:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L956:
+.L947:
 	uxtah	r3, r4, r7
 	mov	r1, r8
 	mov	fp, #0
-	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	ldrb	r0, [r3, #260]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L951:
+.L942:
 	ldrh	r3, [r4, #3210]
 	uxth	r5, fp
 	cmp	r3, r5
-	bhi	.L955
+	bhi	.L946
 	adds	r7, r7, #1
-	b	.L950
-.L955:
+	b	.L941
+.L946:
 	uxth	r6, fp
 	add	r3, r4, r6, lsl #1
 	ldrh	r3, [r3, #3212]
 	cmp	r3, r9
-	bne	.L952
+	bne	.L943
 	mov	r1, r9
-	ldr	r0, .L960+4
+	ldr	r0, .L951+4
 	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [r4, #3210]
 	add	r3, r10, r6, lsl #1
-.L953:
+.L944:
 	cmp	r5, r1
-	bcc	.L954
+	bcc	.L945
 	subs	r1, r1, #1
 	strh	r1, [r4, #3210]	@ movhi
-.L952:
+.L943:
 	add	fp, fp, #1
-	b	.L951
-.L954:
+	b	.L942
+.L945:
 	ldrh	r0, [r3, #2]!
 	adds	r5, r5, #1
 	uxth	r5, r5
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L953
-.L961:
+	b	.L944
+.L952:
 	.align	2
-.L960:
+.L951:
 	.word	.LANCHOR0
 	.word	.LC102
 	.fnend
@@ -6743,78 +6665,78 @@ update_vpc_list:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L974
-	ldr	r3, [r4, #76]
+	ldr	r4, .L965
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	bne	.L963
-	ldrh	r3, [r4, #226]
+	bne	.L954
+	ldrh	r3, [r4, #222]
 	cmp	r3, r0
 	itt	eq
 	movweq	r3, #65535
-	strheq	r3, [r4, #226]	@ movhi
-	ldrh	r3, [r4, #224]
+	strheq	r3, [r4, #222]	@ movhi
+	ldrh	r3, [r4, #220]
 	cmp	r3, r0
 	itt	eq
 	movweq	r3, #65535
-	strheq	r3, [r4, #224]	@ movhi
-	ldrh	r3, [r4, #176]
+	strheq	r3, [r4, #220]	@ movhi
+	ldrh	r3, [r4, #172]
 	cmp	r3, r0
-	bne	.L966
+	bne	.L957
 	movw	r3, #65535
-	strh	r3, [r4, #176]	@ movhi
-.L967:
+	strh	r3, [r4, #172]	@ movhi
+.L958:
 	mov	r1, r5
-	ldr	r0, .L974+4
+	ldr	r0, .L965+4
 	bl	List_remove_node
-	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L969
-	movw	r2, #2824
-	ldr	r1, .L974+8
-	ldr	r0, .L974+12
+	ldrh	r3, [r4, #2528]
+	cbnz	r3, .L960
+	movw	r2, #2828
+	ldr	r1, .L965+8
+	ldr	r0, .L965+12
 	bl	sftl_printk
-.L969:
-	ldrh	r3, [r4, #2532]
+.L960:
+	ldrh	r3, [r4, #2528]
 	mov	r0, r5
 	subs	r3, r3, #1
-	strh	r3, [r4, #2532]	@ movhi
+	strh	r3, [r4, #2528]	@ movhi
 	bl	free_data_superblock
 	mov	r0, r5
 	bl	FtlGcFreeBadSuperBlk
-	ldrh	r2, [r4, #2532]
-	ldrh	r3, [r4, #228]
+	ldrh	r2, [r4, #2528]
+	ldrh	r3, [r4, #224]
 	add	r3, r3, r2
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	cmp	r3, r2
-	ble	.L973
-	movw	r2, #2827
-	ldr	r1, .L974+8
-	ldr	r0, .L974+12
+	ble	.L964
+	movw	r2, #2831
+	ldr	r1, .L965+8
+	ldr	r0, .L965+12
 	bl	sftl_printk
-.L973:
+.L964:
 	movs	r0, #1
 	pop	{r3, r4, r5, pc}
-.L966:
-	ldrh	r3, [r4, #28]
+.L957:
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L972
-	ldrh	r3, [r4, #80]
+	beq	.L963
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L972
-	ldrh	r3, [r4, #128]
+	beq	.L963
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	bne	.L967
-.L972:
+	bne	.L958
+.L963:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L963:
+.L954:
 	bl	List_update_data_list
-	b	.L972
-.L975:
+	b	.L963
+.L966:
 	.align	2
-.L974:
+.L965:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2524
+	.word	.LANCHOR0+2520
 	.word	.LANCHOR1+296
 	.word	.LC8
 	.fnend
@@ -6835,65 +6757,65 @@ decrement_vpc_count:
 	.save {r4, r5, r6, lr}
 	cmp	r0, r3
 	mov	r4, r0
-	ldr	r5, .L985
-	beq	.L977
-	ldr	r3, [r5, #76]
+	ldr	r5, .L976
+	beq	.L968
+	ldr	r3, [r5, #72]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L978
+	cbnz	r2, .L969
 	mov	r1, r0
-	ldr	r0, .L985+4
+	ldr	r0, .L976+4
 	bl	sftl_printk
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L979
-.L983:
+	cbz	r6, .L970
+.L974:
 	movs	r6, #0
-.L976:
+.L967:
 	mov	r0, r6
 	pop	{r4, r5, r6, pc}
-.L979:
-	movw	r2, #2842
-.L984:
-	ldr	r1, .L985+8
-	ldr	r0, .L985+12
+.L970:
+	movw	r2, #2846
+.L975:
+	ldr	r1, .L976+8
+	ldr	r0, .L976+12
 	bl	sftl_printk
-	b	.L976
-.L978:
+	b	.L967
+.L969:
 	subs	r2, r2, #1
 	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L977:
+.L968:
 	ldrh	r0, [r5, #3442]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L981
+	bne	.L972
 	strh	r4, [r5, #3442]	@ movhi
-	b	.L983
-.L981:
+	b	.L974
+.L972:
 	cmp	r4, r0
-	beq	.L983
+	beq	.L974
 	bl	update_vpc_list
-	ldr	r2, [r5, #2520]
+	ldr	r2, [r5, #2516]
 	adds	r6, r0, #0
-	ldr	r3, [r5, #2524]
+	ldr	r3, [r5, #2520]
 	it	ne
 	movne	r6, #1
 	strh	r4, [r5, #3442]	@ movhi
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L985+16
+	ldr	r3, .L976+16
 	muls	r3, r2, r3
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	uxth	r1, r3
 	ldrh	r2, [r2, r1, lsl #1]
 	cmp	r2, #0
-	bne	.L976
+	bne	.L967
 	cmp	r4, r1
-	beq	.L976
-	movw	r2, #2858
-	b	.L984
-.L986:
+	beq	.L967
+	movw	r2, #2862
+	b	.L975
+.L977:
 	.align	2
-.L985:
+.L976:
 	.word	.LANCHOR0
 	.word	.LC103
 	.word	.LANCHOR1+312
@@ -6916,11 +6838,11 @@ FtlSuperblockPowerLostFix:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L1001
+	ldr	r7, .L992
 	mov	r8, #0
 	movw	r2, #61589
 	mov	r4, r0
-	ldr	r5, .L1001+4
+	ldr	r5, .L992+4
 	ldr	r3, [r7]
 	ldr	r6, [r5, #3336]
 	str	r3, [sp, #20]
@@ -6948,17 +6870,17 @@ FtlSuperblockPowerLostFix:
 	ite	eq
 	moveq	r9, #6
 	movne	r9, #7
-.L993:
+.L984:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L989
-.L990:
-	ldr	r2, [r5, #76]
+	cbnz	r3, .L980
+.L981:
+	ldr	r2, [r5, #72]
 	ldrh	r1, [r4]
 	ldrh	r0, [r4, #4]
 	ldrh	r3, [r2, r1, lsl #1]
 	subs	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r5, #306]
+	ldrh	r3, [r5, #302]
 	ldr	r2, [sp, #20]
 	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #0
@@ -6966,14 +6888,14 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L994
+	beq	.L985
 	bl	__stack_chk_fail
-.L989:
+.L980:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L990
+	beq	.L981
 	ldr	r3, [r5, #2596]
 	movs	r1, #1
 	mov	r0, sp
@@ -6989,15 +6911,15 @@ FtlSuperblockPowerLostFix:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
 	subs	r9, r9, #1
-	bne	.L993
-	b	.L990
-.L994:
+	bne	.L984
+	b	.L981
+.L985:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1002:
+.L993:
 	.align	2
-.L1001:
+.L992:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -7016,47 +6938,47 @@ FtlMakeBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, #0
-	ldr	r9, .L1022+4
+	ldr	r9, .L1013+4
 	bl	FtlBbtMemInit
-	sub	r5, r9, #384
+	sub	r5, r9, #380
 	sub	r10, r9, #18
 	mov	r4, r5
 	bl	FtlLoadFactoryBbt
-.L1004:
-	ldrh	r3, [r5, #258]
+.L995:
+	ldrh	r3, [r5, #254]
 	cmp	r8, r3
-	bcc	.L1010
+	bcc	.L1001
 	movs	r5, #0
-.L1011:
-	ldrh	r3, [r4, #318]
+.L1002:
+	ldrh	r3, [r4, #314]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1012
-	ldrh	r5, [r4, #368]
+	bhi	.L1003
+	ldrh	r5, [r4, #364]
 	movw	r6, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1013:
-	ldrh	r3, [r4, #368]
+.L1004:
+	ldrh	r3, [r4, #364]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1017
+	ble	.L1008
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1014
+	beq	.L1005
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1015
+	beq	.L1006
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1014:
+.L1005:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1013
-.L1010:
+	b	.L1004
+.L1001:
 	ldrh	r3, [r10, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3304]
@@ -7064,44 +6986,44 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3464]
 	str	fp, [r5, #3468]
-	beq	.L1005
-	ldrh	r7, [r5, #302]
+	beq	.L996
+	ldrh	r7, [r5, #298]
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1022
+	ldr	r0, .L1013
 	mla	r7, r8, r7, r3
 	lsls	r3, r7, #10
 	str	r3, [r5, #3460]
 	bl	FlashReadPages
-	ldrh	r2, [r5, #302]
+	ldrh	r2, [r5, #298]
 	ldr	r1, [r5, #3464]
 	ldr	r0, [r9]
 	adds	r2, r2, #7
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
-.L1006:
+.L997:
 	uxth	r0, r7
 	add	r8, r8, #1
 	add	r9, r9, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1004
-.L1005:
+	b	.L995
+.L996:
 	mov	r1, r8
 	bl	FlashGetBadBlockList
 	ldr	r1, [r9]
 	ldr	r0, [r5, #3464]
 	bl	FtlBbt2Bitmap
-	ldrh	r6, [r5, #302]
-.L1008:
+	ldrh	r6, [r5, #298]
+.L999:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L1007:
-	ldrh	r0, [r4, #302]
+.L998:
+	ldrh	r0, [r4, #298]
 	smlabb	r0, r0, r8, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1008
+	beq	.L999
 	movs	r2, #16
 	movs	r1, #0
 	strh	r6, [r10]	@ movhi
@@ -7116,7 +7038,7 @@ FtlMakeBbt:
 	movs	r3, #0
 	str	r3, [fp, #4]
 	ldrh	r3, [r10]
-	ldrh	r7, [r4, #302]
+	ldrh	r7, [r4, #298]
 	ldrh	r2, [r4, #3392]
 	strh	r3, [fp, #2]	@ movhi
 	ldrh	r3, [r10]
@@ -7128,66 +7050,66 @@ FtlMakeBbt:
 	str	r3, [r4, #3460]
 	bl	ftl_memcpy
 	movs	r2, #1
-	ldr	r0, .L1022
+	ldr	r0, .L1013
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	ldr	r0, .L1022
+	ldr	r0, .L1013
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L1006
+	bne	.L997
 	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1007
-.L1012:
+	b	.L998
+.L1003:
 	bl	FtlBbmMapBadBlock
-	b	.L1011
-.L1015:
-	ldrh	r3, [r4, #356]
+	b	.L1002
+.L1006:
+	ldrh	r3, [r4, #352]
 	cmp	r3, r6
-	bne	.L1016
+	bne	.L1007
+	strh	r5, [r4, #352]	@ movhi
+	b	.L1005
+.L1007:
 	strh	r5, [r4, #356]	@ movhi
-	b	.L1014
-.L1016:
-	strh	r5, [r4, #360]	@ movhi
-.L1017:
-	ldrh	r3, [r4, #356]
+.L1008:
+	ldrh	r3, [r4, #352]
 	movs	r5, #0
 	ldr	r0, [r4, #3272]
 	movs	r1, #1
-	str	r5, [r4, #364]
+	str	r5, [r4, #360]
 	movs	r2, #2
-	strh	r5, [r4, #358]	@ movhi
+	strh	r5, [r4, #354]	@ movhi
 	lsls	r3, r3, #10
 	str	r3, [r0, #4]
-	ldrh	r3, [r4, #360]
+	ldrh	r3, [r4, #356]
 	lsls	r3, r3, #10
 	str	r3, [r0, #24]
 	bl	FlashEraseBlocks
-	ldrh	r0, [r4, #356]
+	ldrh	r0, [r4, #352]
 	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, #360]
+	ldrh	r0, [r4, #356]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #364]
-	ldrh	r2, [r4, #360]
-	strh	r5, [r4, #358]	@ movhi
+	ldr	r3, [r4, #360]
+	ldrh	r2, [r4, #356]
+	strh	r5, [r4, #354]	@ movhi
 	adds	r3, r3, #1
-	str	r3, [r4, #364]
-	ldrh	r3, [r4, #356]
-	strh	r2, [r4, #356]	@ movhi
-	strh	r3, [r4, #360]	@ movhi
+	str	r3, [r4, #360]
+	ldrh	r3, [r4, #352]
+	strh	r2, [r4, #352]	@ movhi
+	strh	r3, [r4, #356]	@ movhi
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1023:
+.L1014:
 	.align	2
-.L1022:
+.L1013:
 	.word	.LANCHOR0+3456
-	.word	.LANCHOR0+384
+	.word	.LANCHOR0+380
 	.fnend
 	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	1
@@ -7216,25 +7138,25 @@ js_hash:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1028
+	ldr	r3, .L1019
 	add	r1, r1, r0
 	push	{r4, lr}
 	.save {r4, lr}
-.L1026:
+.L1017:
 	cmp	r0, r1
-	bne	.L1027
+	bne	.L1018
 	mov	r0, r3
 	pop	{r4, pc}
-.L1027:
+.L1018:
 	lsrs	r2, r3, #2
 	ldrb	r4, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsl #5
 	add	r2, r2, r4
 	eors	r3, r3, r2
-	b	.L1026
-.L1029:
+	b	.L1017
+.L1020:
 	.align	2
-.L1028:
+.L1019:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -7256,14 +7178,14 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L1031
+	bne	.L1022
 	ldrh	r3, [r0, #8]
-	cbz	r3, .L1032
+	cbz	r3, .L1023
 	movw	r2, #641
-	ldr	r1, .L1040
-	ldr	r0, .L1040+4
+	ldr	r1, .L1031
+	ldr	r0, .L1031+4
 	bl	sftl_printk
-.L1032:
+.L1023:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -7275,14 +7197,14 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	adds	r3, r3, #1
 	str	r3, [r4, #28]
-.L1033:
+.L1024:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1031:
+.L1022:
 	ldrh	r7, [r5, r3, lsl #1]
 	movs	r1, #255
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1040+8
+	ldr	r5, .L1031+8
 	ldr	r8, [r0, #24]
 	orr	r3, r3, r7, lsl #10
 	ldr	r6, [r5, #3336]
@@ -7297,37 +7219,37 @@ Ftl_write_map_blk_to_last_page:
 	ldrh	r3, [r0, #4]
 	strh	r7, [r6, #2]	@ movhi
 	strh	r3, [r6]	@ movhi
-	ldrh	r2, [r5, #308]
+	ldrh	r2, [r5, #304]
 	ldr	r0, [r5, #3304]
 	lsls	r2, r2, #3
 	bl	ftl_memset
 	movs	r2, #0
 	mov	r3, r2
-.L1034:
+.L1025:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L1036
-	ldrh	r1, [r5, #314]
+	bhi	.L1027
+	ldrh	r1, [r5, #310]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
 	movs	r2, #1
 	str	r0, [r6, #12]
 	movs	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1040+12
+	ldr	r0, .L1031+12
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L1033
-.L1036:
+	b	.L1024
+.L1027:
 	uxth	r0, r2
 	ldr	r1, [r8, r0, lsl #2]
 	cmp	r7, r1, lsr #10
-	bne	.L1035
+	bne	.L1026
 	ldr	r1, [r5, #3304]
 	adds	r3, r3, #1
 	uxth	r3, r3
@@ -7336,12 +7258,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r0, [r8, r0, lsl #2]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L1035:
+.L1026:
 	adds	r2, r2, #1
-	b	.L1034
-.L1041:
+	b	.L1025
+.L1032:
 	.align	2
-.L1040:
+.L1031:
 	.word	.LANCHOR1+332
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7363,47 +7285,47 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r4, r0
-	ldr	r7, .L1066
+	ldr	r7, .L1057
 	mov	r8, r1
 	movs	r6, #0
-	ldr	r9, .L1066+20
+	ldr	r9, .L1057+20
 	mov	r5, r7
 	str	r2, [sp, #4]
-.L1043:
+.L1034:
 	ldr	r3, [r7, #2576]
 	adds	r3, r3, #1
 	str	r3, [r7, #2576]
-	ldrh	r3, [r7, #308]
+	ldrh	r3, [r7, #304]
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1044
+	bge	.L1035
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1045
-.L1044:
+	bne	.L1036
+.L1035:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1045:
+.L1036:
 	ldrh	r2, [r4]
 	ldr	r3, [r4, #12]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L1046
+	cbnz	r3, .L1037
 	mov	r2, #700
 	mov	r1, r9
-	ldr	r0, .L1066+4
+	ldr	r0, .L1057+4
 	bl	sftl_printk
-.L1046:
+.L1037:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L1047
+	bcc	.L1038
 	movw	r2, #701
 	mov	r1, r9
-	ldr	r0, .L1066+4
+	ldr	r0, .L1057+4
 	bl	sftl_printk
-.L1047:
+.L1038:
 	ldrh	r2, [r4]
 	movs	r1, #0
 	ldr	r3, [r4, #12]
@@ -7424,14 +7346,14 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #4]
 	strh	r10, [fp, #2]	@ movhi
 	strh	r2, [fp]	@ movhi
-	ldrh	r1, [r5, #314]
+	ldrh	r1, [r5, #310]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
 	movs	r3, #1
 	str	r0, [fp, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1066+8
+	ldr	r0, .L1057+8
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	adds	r3, r3, #1
@@ -7439,53 +7361,53 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3456]
 	adds	r1, r2, #1
-	bne	.L1048
+	bne	.L1039
 	ldr	r1, [r5, #3460]
 	adds	r6, r6, #1
-	ldr	r0, .L1066+12
+	ldr	r0, .L1057+12
 	uxth	r6, r6
 	bl	sftl_printk
 	ldrh	r3, [r4, #2]
 	cmp	r3, #2
 	ittt	ls
-	ldrhls	r3, [r5, #308]
+	ldrhls	r3, [r5, #304]
 	addls	r3, r3, #-1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1050
+	bls	.L1041
 	mov	r2, r6
 	ldr	r1, [r5, #3460]
-	ldr	r0, .L1066+16
+	ldr	r0, .L1057+16
 	bl	sftl_printk
-.L1051:
-	b	.L1051
-.L1050:
+.L1042:
+	b	.L1042
+.L1041:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1043
-.L1065:
-	b	.L1065
-.L1048:
+	beq	.L1034
+.L1056:
+	b	.L1056
+.L1039:
 	cmp	r3, #1
-	beq	.L1054
+	beq	.L1045
 	cmp	r2, #256
-	beq	.L1054
+	beq	.L1045
 	ldr	r0, [r4, #36]
-	cbz	r0, .L1055
-.L1054:
+	cbz	r0, .L1046
+.L1045:
 	movs	r3, #0
 	str	r3, [r4, #36]
-	b	.L1043
-.L1055:
+	b	.L1034
+.L1046:
 	ldr	r2, [r5, #3460]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r8, lsl #2]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1067:
+.L1058:
 	.align	2
-.L1066:
+.L1057:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LANCHOR0+3456
@@ -7508,40 +7430,40 @@ load_l2p_region:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, r0
-	ldr	r4, .L1075
+	ldr	r4, .L1066
 	mov	r8, r1
-	ldrh	r3, [r4, #340]
+	ldrh	r3, [r4, #336]
 	cmp	r3, r0
-	bcs	.L1069
+	bcs	.L1060
 	movw	r2, #485
-	ldr	r1, .L1075+4
-	ldr	r0, .L1075+8
+	ldr	r1, .L1066+4
+	ldr	r0, .L1066+8
 	bl	sftl_printk
-.L1069:
+.L1060:
 	ldr	r3, [r4, #3380]
 	movs	r5, #12
 	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L1070
+	cbnz	r7, .L1061
 	mul	r5, r5, r8
-	ldr	r3, [r4, #2544]
-	ldrh	r2, [r4, #314]
+	ldr	r3, [r4, #2540]
+	ldrh	r2, [r4, #310]
 	movs	r1, #255
 	add	r3, r3, r5
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	add	r5, r5, r3
 	str	r7, [r5, #4]
-.L1071:
+.L1062:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1070:
+.L1061:
 	mul	r5, r5, r8
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	movs	r2, #1
-	ldr	r0, .L1075+12
+	ldr	r0, .L1066+12
 	mov	r1, r2
 	str	r7, [r4, #3460]
 	add	r3, r3, r5
@@ -7553,54 +7475,54 @@ load_l2p_region:
 	ldr	r8, [r4, #3468]
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1072
+	beq	.L1063
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1075+16
+	ldr	r0, .L1066+16
 	bl	sftl_printk
 	movs	r3, #4
 	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	ldr	r0, .L1075+20
+	ldr	r0, .L1066+20
 	bl	rknand_print_hex
-	ldrh	r3, [r4, #340]
+	ldrh	r3, [r4, #336]
 	movs	r2, #4
 	ldr	r1, [r4, #3380]
-	ldr	r0, .L1075+24
+	ldr	r0, .L1066+24
 	bl	rknand_print_hex
-.L1073:
+.L1064:
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1074
+	beq	.L1065
 	mov	r2, #508
-	ldr	r1, .L1075+4
-	ldr	r0, .L1075+8
+	ldr	r1, .L1066+4
+	ldr	r0, .L1066+8
 	bl	sftl_printk
-.L1074:
-	ldr	r3, [r4, #2544]
+.L1065:
+	ldr	r3, [r4, #2540]
 	movs	r1, #0
 	adds	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L1071
-.L1072:
+	b	.L1062
+.L1063:
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	bne	.L1073
+	bne	.L1064
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1075+28
+	ldr	r0, .L1066+28
 	bl	sftl_printk
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	mov	r1, r6
-	ldr	r0, .L1075+32
+	ldr	r0, .L1066+32
 	add	r3, r3, r5
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	b	.L1073
-.L1076:
+	b	.L1064
+.L1067:
 	.align	2
-.L1075:
+.L1066:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+379
 	.word	.LC8
@@ -7632,16 +7554,16 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	ldr	r5, .L1093
+	ldr	r5, .L1084
 	subs	r3, r3, #5
 	cmp	r2, r3
-	blt	.L1078
+	blt	.L1069
 	uxth	r0, r0
 	ldrh	r9, [r6, r0, lsl #1]
 	cmp	r9, #0
-	beq	.L1078
+	beq	.L1069
 	ldr	r3, [r4, #32]
-	cbnz	r3, .L1078
+	cbnz	r3, .L1069
 	movs	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r6, r0, lsl #1]	@ movhi
@@ -7649,45 +7571,45 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r5, #308]
+	ldrh	r3, [r5, #304]
 	cmp	r2, r3
-	bcc	.L1079
+	bcc	.L1070
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1079:
+.L1070:
 	movs	r6, #0
-.L1080:
+.L1071:
 	ldrh	r2, [r4, #6]
 	uxth	fp, r6
 	cmp	r2, fp
-	bhi	.L1087
+	bhi	.L1078
 	movs	r1, #1
 	mov	r0, r9
 	bl	FtlFreeSysBlkQueueIn
 	movs	r3, #0
 	str	r3, [r4, #32]
-.L1078:
+.L1069:
 	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #308]
+	ldrh	r3, [r5, #304]
 	cmp	r2, r3
-	bcc	.L1088
+	bcc	.L1079
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1088:
+.L1079:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1087:
+.L1078:
 	uxth	r7, r6
 	ldr	r2, [r10, r7, lsl #2]
 	add	r3, r10, r7, lsl #2
 	str	r3, [sp, #4]
 	cmp	r9, r2, lsr #10
-	bne	.L1081
+	bne	.L1072
 	ldr	r2, [r5, #3308]
 	ldr	r8, [r5, #3336]
-	ldr	r0, .L1093+4
+	ldr	r0, .L1084+4
 	str	r2, [r5, #3464]
 	str	r8, [r5, #3468]
 	ldr	r2, [r10, r7, lsl #2]
@@ -7697,39 +7619,39 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	beq	.L1082
+	beq	.L1073
 	movw	r2, #611
-	ldr	r1, .L1093+8
-	ldr	r0, .L1093+12
+	ldr	r1, .L1084+8
+	ldr	r0, .L1084+12
 	bl	sftl_printk
-.L1082:
+.L1073:
 	ldr	r2, [r5, #3456]
 	adds	r2, r2, #1
-	bne	.L1083
-.L1085:
+	bne	.L1074
+.L1076:
 	ldr	r2, [sp, #4]
 	movs	r3, #0
 	str	r3, [r2]
-.L1084:
-	b	.L1084
-.L1083:
+.L1075:
+	b	.L1075
+.L1074:
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	bne	.L1085
+	bne	.L1076
 	ldrh	r2, [r8]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1085
+	bne	.L1076
 	ldr	r2, [r5, #3464]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L1081:
+.L1072:
 	adds	r6, r6, #1
-	b	.L1080
-.L1094:
+	b	.L1071
+.L1085:
 	.align	2
-.L1093:
+.L1084:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+395
@@ -7750,24 +7672,24 @@ flush_l2p_region:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r4, #12
-	ldr	r5, .L1096
+	ldr	r5, .L1087
 	muls	r4, r0, r4
-	ldr	r3, [r5, #2544]
+	ldr	r3, [r5, #2540]
 	addw	r0, r5, #3396
 	adds	r2, r3, r4
 	ldrh	r1, [r3, r4]
 	ldr	r2, [r2, #8]
 	bl	FtlMapWritePage
-	ldr	r3, [r5, #2544]
+	ldr	r3, [r5, #2540]
 	movs	r0, #0
 	add	r4, r4, r3
 	ldr	r3, [r4, #4]
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r3, r4, r5, pc}
-.L1097:
+.L1088:
 	.align	2
-.L1096:
+.L1087:
 	.word	.LANCHOR0
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -7785,104 +7707,104 @@ log2phys:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
-	ldr	r4, .L1111
+	ldr	r4, .L1102
 	mov	r5, r1
 	mov	r7, r2
 	ldr	r3, [r4, #2556]
-	ldrh	r10, [r4, #312]
+	ldrh	r10, [r4, #308]
 	cmp	r0, r3
-	bcc	.L1099
+	bcc	.L1090
 	movw	r2, #813
-	ldr	r1, .L1111+4
-	ldr	r0, .L1111+8
+	ldr	r1, .L1102+4
+	ldr	r0, .L1102+8
 	bl	sftl_printk
-.L1099:
+.L1090:
 	ldr	r3, [r4, #2556]
 	cmp	r9, r3
-	bcs	.L1100
+	bcs	.L1091
 	add	r10, r10, #7
-	ldrh	r2, [r4, #342]
+	ldrh	r2, [r4, #338]
 	lsr	r6, r9, r10
-	ldr	r1, [r4, #2544]
+	ldr	r1, [r4, #2540]
 	movs	r3, #0
 	uxth	r6, r6
 	mov	fp, #12
-.L1101:
+.L1092:
 	uxth	r8, r3
 	cmp	r8, r2
-	bcc	.L1106
+	bcc	.L1097
 	bl	select_l2p_ram_region
 	mul	fp, fp, r0
-	ldr	r3, [r4, #2544]
+	ldr	r3, [r4, #2540]
 	mov	r8, r0
 	ldrh	r1, [r3, fp]
 	add	r2, r3, fp
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1107
+	beq	.L1098
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L1107
+	bge	.L1098
 	bl	flush_l2p_region
-.L1107:
+.L1098:
 	mov	r1, r8
 	mov	r0, r6
 	bl	load_l2p_region
-	b	.L1103
-.L1100:
+	b	.L1094
+.L1091:
 	mov	r0, #-1
-	cbnz	r7, .L1098
+	cbnz	r7, .L1089
 	str	r0, [r5]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1106:
+.L1097:
 	adds	r3, r3, #1
 	mla	r0, fp, r3, r1
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r6
-	bne	.L1101
-.L1103:
+	bne	.L1092
+.L1094:
 	movs	r0, #1
 	movs	r3, #12
 	lsl	r0, r0, r10
 	subs	r0, r0, #1
 	and	r0, r0, r9
 	uxth	r0, r0
-	cbnz	r7, .L1104
-	ldr	r2, [r4, #2544]
+	cbnz	r7, .L1095
+	ldr	r2, [r4, #2540]
 	mla	r3, r3, r8, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r0, lsl #2]
 	str	r3, [r5]
-.L1105:
-	ldr	r2, [r4, #2544]
+.L1096:
+	ldr	r2, [r4, #2540]
 	movs	r3, #12
 	mla	r8, r3, r8, r2
 	ldr	r3, [r8, #4]
 	adds	r2, r3, #1
-	beq	.L1109
+	beq	.L1100
 	adds	r3, r3, #1
 	str	r3, [r8, #4]
-.L1109:
+.L1100:
 	movs	r0, #0
-.L1098:
+.L1089:
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1104:
+.L1095:
 	mul	r3, r3, r8
-	ldr	r2, [r4, #2544]
+	ldr	r2, [r4, #2540]
 	ldr	r1, [r5]
 	add	r2, r2, r3
 	ldr	r2, [r2, #8]
 	str	r1, [r2, r0, lsl #2]
-	ldr	r2, [r4, #2544]
-	strh	r6, [r4, #2548]	@ movhi
+	ldr	r2, [r4, #2540]
+	strh	r6, [r4, #2544]	@ movhi
 	add	r3, r3, r2
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	b	.L1105
-.L1112:
+	b	.L1096
+.L1103:
 	.align	2
-.L1111:
+.L1102:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+410
 	.word	.LC8
@@ -7903,28 +7825,28 @@ FtlWriteDump_data:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #36
 	sub	sp, sp, #36
-	ldr	r4, .L1132
-	ldr	r7, .L1132+4
-	ldrh	r2, [r4, #32]
+	ldr	r4, .L1123
+	ldr	r7, .L1123+4
+	ldrh	r2, [r4, #28]
 	ldr	r3, [r7]
 	str	r3, [sp, #28]
 	cmp	r2, #0
-	beq	.L1114
-	ldrb	r3, [r4, #36]	@ zero_extendqisi2
+	beq	.L1105
+	ldrb	r3, [r4, #32]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1114
-	ldrb	r1, [r4, #35]	@ zero_extendqisi2
-	ldrh	r3, [r4, #306]
+	bne	.L1105
+	ldrb	r1, [r4, #31]	@ zero_extendqisi2
+	ldrh	r3, [r4, #302]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1114
-	ldrb	r8, [r4, #38]	@ zero_extendqisi2
+	beq	.L1105
+	ldrb	r8, [r4, #34]	@ zero_extendqisi2
 	cmp	r8, #0
-	bne	.L1113
+	bne	.L1104
 	ldr	r6, [r4, #2556]
 	mov	r2, r8
 	add	r1, sp, #4
-	ldrh	r9, [r4, #236]
+	ldrh	r9, [r4, #232]
 	subs	r6, r6, #1
 	mov	r0, r6
 	bl	log2phys
@@ -7937,46 +7859,46 @@ FtlWriteDump_data:
 	str	r0, [sp, #16]
 	str	r5, [sp, #20]
 	str	r8, [r5, #4]
-	beq	.L1116
+	beq	.L1107
 	mov	r2, r8
 	movs	r1, #1
 	add	r0, sp, #8
 	bl	FlashReadPages
-.L1117:
-	ldr	r10, .L1132+8
+.L1108:
+	ldr	r10, .L1123+8
 	mov	r8, #0
 	lsl	r9, r9, #2
 	mov	fp, r8
 	movw	r3, #61589
 	strh	r3, [r5]	@ movhi
-.L1118:
+.L1109:
 	cmp	r9, r8
-	bne	.L1122
-.L1119:
+	bne	.L1113
+.L1110:
 	movs	r3, #1
-.L1131:
-	strb	r3, [r4, #38]
-.L1113:
+.L1122:
+	strb	r3, [r4, #34]
+.L1104:
 	ldr	r2, [sp, #28]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1124
+	beq	.L1115
 	bl	__stack_chk_fail
-.L1116:
-	ldrh	r2, [r4, #314]
+.L1107:
+	ldrh	r2, [r4, #310]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1117
-.L1122:
-	ldrh	r3, [r4, #32]
+	b	.L1108
+.L1113:
+	ldrh	r3, [r4, #28]
 	cmp	r3, #0
-	beq	.L1119
+	beq	.L1110
 	ldr	r3, [sp, #12]
 	mov	r0, r10
 	str	r6, [r5, #8]
 	add	r8, r8, #1
 	str	r3, [r5, #12]
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	strh	r3, [r5, #2]	@ movhi
 	bl	get_new_active_ppa
 	ldr	r3, [r4, #2596]
@@ -7992,22 +7914,22 @@ FtlWriteDump_data:
 	movs	r3, #0
 	mov	r2, r3
 	bl	FlashProgPages
-	ldrh	r0, [r4, #28]
+	ldrh	r0, [r4, #24]
 	bl	decrement_vpc_count
-	b	.L1118
-.L1114:
+	b	.L1109
+.L1105:
 	movs	r3, #0
-	b	.L1131
-.L1124:
+	b	.L1122
+.L1115:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1133:
+.L1124:
 	.align	2
-.L1132:
+.L1123:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
-	.word	.LANCHOR0+28
+	.word	.LANCHOR0+24
 	.fnend
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	1
@@ -8025,59 +7947,59 @@ FtlReUsePrevPpa:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r6, r0
-	ldr	r5, .L1144
+	ldr	r5, .L1135
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	mov	r7, r0
 	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L1135
-	ldr	r4, [r5, #2536]
-	cbz	r4, .L1136
-	ldr	r1, [r5, #2520]
+	cbnz	r3, .L1126
+	ldr	r4, [r5, #2532]
+	cbz	r4, .L1127
+	ldr	r1, [r5, #2516]
 	mov	ip, #6
-	ldr	r2, .L1144+4
+	ldr	r2, .L1135+4
 	movw	lr, #65535
-	ldrh	r0, [r5, #228]
+	ldrh	r0, [r5, #224]
 	subs	r4, r4, r1
 	asrs	r4, r4, #1
 	muls	r4, r2, r4
 	uxth	r4, r4
-.L1137:
+.L1128:
 	uxth	r2, r3
 	cmp	r0, r2
-	bls	.L1136
+	bls	.L1127
 	cmp	r4, r7
-	bne	.L1138
+	bne	.L1129
 	mov	r1, r4
-	ldr	r0, .L1144+8
+	ldr	r0, .L1135+8
 	bl	List_remove_node
-	ldrh	r3, [r5, #228]
-	cbnz	r3, .L1139
-	movw	r2, #1733
-	ldr	r1, .L1144+12
-	ldr	r0, .L1144+16
+	ldrh	r3, [r5, #224]
+	cbnz	r3, .L1130
+	movw	r2, #1735
+	ldr	r1, .L1135+12
+	ldr	r0, .L1135+16
 	bl	sftl_printk
-.L1139:
-	ldrh	r3, [r5, #228]
+.L1130:
+	ldrh	r3, [r5, #224]
 	mov	r0, r4
 	subs	r3, r3, #1
-	strh	r3, [r5, #228]	@ movhi
+	strh	r3, [r5, #224]	@ movhi
 	bl	INSERT_DATA_LIST
-	ldr	r2, [r5, #76]
+	ldr	r2, [r5, #72]
 	ldrh	r3, [r2, r7, lsl #1]
-.L1135:
+.L1126:
 	adds	r3, r3, #1
 	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L1136
-.L1138:
+	b	.L1127
+.L1129:
 	mul	r4, ip, r4
 	adds	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, lr
-	bne	.L1137
-.L1136:
+	bne	.L1128
+.L1127:
 	movs	r2, #1
 	add	r1, sp, #4
 	mov	r0, r6
@@ -8085,12 +8007,12 @@ FtlReUsePrevPpa:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L1145:
+.L1136:
 	.align	2
-.L1144:
+.L1135:
 	.word	.LANCHOR0
 	.word	-1431655765
-	.word	.LANCHOR0+2536
+	.word	.LANCHOR0+2532
 	.word	.LANCHOR1+419
 	.word	.LC8
 	.fnend
@@ -8106,7 +8028,7 @@ FtlRecoverySuperblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1283
+	ldr	r3, .L1274
 	movw	r2, #65535
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -8117,60 +8039,60 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #44]
 	ldrh	r3, [r0]
 	cmp	r3, r2
-	beq	.L1148
+	beq	.L1139
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1283+4
+	ldr	r4, .L1274+4
 	str	r3, [sp]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp]
 	str	r3, [sp, #20]
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1149
+	bne	.L1140
 	strh	r3, [r0, #4]	@ movhi
-.L1281:
+.L1272:
 	strb	r3, [r10, #6]
-.L1148:
-	ldr	r3, .L1283
+.L1139:
+	ldr	r3, .L1274
 	movs	r0, #0
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1220
+	beq	.L1211
 	bl	__stack_chk_fail
-.L1149:
+.L1140:
 	ldrh	r0, [r0, #16]
-.L1150:
+.L1141:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1151
+	beq	.L1142
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
 	mov	r5, r0
-	beq	.L1152
+	beq	.L1143
 	ldr	r3, [r4, #3180]
 	movs	r2, #0
-	ldrh	fp, [r4, #236]
+	ldrh	fp, [r4, #232]
 	movw	r9, #65535
 	ldr	r0, [r4, #3292]
 	mov	lr, #20
 	str	r3, [sp, #4]
-	ldrh	r3, [r4, #314]
+	ldrh	r3, [r4, #310]
 	ldr	r8, [r4, #3184]
-	ldrh	r7, [r4, #316]
+	ldrh	r7, [r4, #312]
 	mov	r4, r2
 	str	r3, [sp, #8]
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [sp, #16]
-.L1153:
+.L1144:
 	uxth	r3, r2
 	cmp	fp, r3
-	bhi	.L1159
-	ldr	r6, .L1283+4
+	bhi	.L1150
+	ldr	r6, .L1274+4
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
@@ -8182,72 +8104,72 @@ FtlRecoverySuperblock:
 	add	fp, r3, #-1
 	movs	r3, #0
 	mov	r7, r8
-.L1160:
+.L1151:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1165
-	bne	.L1163
+	bhi	.L1156
+	bne	.L1154
 	adds	r3, r5, #1
 	uxth	r3, r3
 	str	r3, [sp, #8]
-.L1276:
+.L1267:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
-	ldrh	r3, [r6, #306]
+	ldrh	r3, [r6, #302]
 	ldr	r2, [sp, #8]
 	str	r0, [sp, #4]
 	cmp	r3, r2
-	bne	.L1167
+	bne	.L1158
 	ldrh	r3, [sp, #8]
 	strh	r3, [r10, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [r10, #6]
 	strh	r3, [r10, #4]	@ movhi
-.L1167:
+.L1158:
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp]
 	cmp	r3, r2
-	bne	.L1168
+	bne	.L1159
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #20]
 	cmp	r3, r2
-	bne	.L1168
+	bne	.L1159
 	ldr	r1, [sp, #8]
 	mov	r2, r3
-.L1282:
+.L1273:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1148
-.L1151:
+	b	.L1139
+.L1142:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [r10, r1, lsl #1]
-	b	.L1150
-.L1152:
+	b	.L1141
+.L1143:
 	ldr	r3, [sp]
-	cbz	r3, .L1154
-	mov	r2, #1800
-	ldr	r1, .L1283+8
-	ldr	r0, .L1283+12
+	cbz	r3, .L1145
+	movw	r2, #1802
+	ldr	r1, .L1274+8
+	ldr	r0, .L1274+12
 	bl	sftl_printk
-.L1154:
+.L1145:
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1155
+	cbz	r3, .L1146
 	cmp	r6, r3
-	beq	.L1155
-	movw	r2, #1801
-	ldr	r1, .L1283+8
-	ldr	r0, .L1283+12
+	beq	.L1146
+	movw	r2, #1803
+	ldr	r1, .L1274+8
+	ldr	r0, .L1274+12
 	bl	sftl_printk
-.L1155:
+.L1146:
 	movs	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1281
-.L1159:
+	b	.L1272
+.L1150:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1156
+	beq	.L1147
 	mla	r1, lr, r4, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8269,49 +8191,49 @@ FtlRecoverySuperblock:
 	str	r6, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1156:
+.L1147:
 	adds	r2, r2, #1
-	b	.L1153
-.L1165:
+	b	.L1144
+.L1156:
 	ldr	r2, [r7]
-	cbnz	r2, .L1161
+	cbnz	r2, .L1152
 	ldr	r2, [r7, #12]
 	str	r2, [sp, #4]
 	ldr	r2, [r2, #4]
 	adds	r0, r2, #1
-	beq	.L1162
+	beq	.L1153
 	ldr	r1, [r6, #2596]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1162
+	cbz	r0, .L1153
 	adds	r2, r2, #1
 	str	r2, [r6, #2596]
-.L1162:
+.L1153:
 	ldr	r2, [sp, #4]
 	ldr	r2, [r2]
 	adds	r2, r2, #1
-	bne	.L1164
-.L1163:
+	bne	.L1155
+.L1154:
 	uxth	r2, r5
 	uxth	r3, r3
 	str	r2, [sp, #8]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1276
-.L1161:
+	b	.L1267
+.L1152:
 	ldr	r9, [sp, #8]
-.L1164:
+.L1155:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1160
-.L1168:
+	b	.L1151
+.L1159:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1169
+	bne	.L1160
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1170
-.L1169:
+	bne	.L1161
+.L1160:
 	ldr	r3, [r6, #3452]
 	uxth	r7, r5
 	uxth	r5, r5
@@ -8320,128 +8242,128 @@ FtlRecoverySuperblock:
 	ldr	r3, [sp]
 	it	eq
 	streq	fp, [r6, #3452]
-	ldr	r6, .L1283+4
+	ldr	r6, .L1274+4
 	adds	r3, r3, #7
 	cmp	r5, r3
 	itet	gt
 	subgt	r4, r7, #7
 	ldrle	r4, [sp]
 	uxthgt	r4, r4
-.L1173:
+.L1164:
 	cmp	r4, r7
-	bhi	.L1180
+	bhi	.L1171
 	movs	r3, #0
-	ldrh	lr, [r6, #236]
+	ldrh	lr, [r6, #232]
 	ldr	r0, [r6, #3292]
 	mov	r5, r3
 	ldr	r1, [sp, #16]
 	mov	ip, #20
-	b	.L1181
-.L1175:
+	b	.L1172
+.L1166:
 	ldrh	r2, [r1], #2
 	cmp	r2, r8
-	beq	.L1174
+	beq	.L1165
 	mla	r9, ip, r5, r0
 	adds	r5, r5, #1
 	orr	r2, r4, r2, lsl #10
 	uxth	r5, r5
 	str	r2, [r9, #4]
-.L1174:
+.L1165:
 	adds	r3, r3, #1
-.L1181:
+.L1172:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L1175
+	bhi	.L1166
 	movs	r2, #0
 	mov	r1, r5
 	bl	FlashReadPages
 	ldr	r3, [r6, #3292]
 	movs	r2, #20
 	mla	r5, r2, r5, r3
-.L1176:
+.L1167:
 	cmp	r5, r3
-	bne	.L1179
+	bne	.L1170
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1173
-.L1179:
+	b	.L1164
+.L1170:
 	ldr	r2, [r3]
-	cbnz	r2, .L1170
+	cbnz	r2, .L1161
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r8
-	beq	.L1178
+	beq	.L1169
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
 	strne	r2, [r6, #3452]
-.L1178:
+.L1169:
 	adds	r3, r3, #20
-	b	.L1176
-.L1284:
+	b	.L1167
+.L1275:
 	.align	2
-.L1283:
+.L1274:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+435
 	.word	.LC8
-.L1180:
+.L1171:
 	mov	r3, #-1
 	str	r3, [r6, #3452]
-.L1170:
-	ldr	r8, .L1285+16
+.L1161:
+	ldr	r8, .L1276+16
 	movs	r3, #1
 	ldr	r5, [sp]
 	mov	r4, r8
 	strh	r3, [r8, #3476]	@ movhi
-.L1182:
-	ldrh	r6, [r4, #236]
+.L1173:
+	ldrh	r6, [r4, #232]
 	movw	r9, #65535
 	ldr	r0, [r4, #3292]
 	mov	ip, #20
 	ldr	r1, [sp, #16]
 	movs	r3, #0
 	str	r3, [sp, #12]
-.L1183:
+.L1174:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1185
+	bhi	.L1176
 	movs	r2, #0
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
 	movs	r3, #0
-.L1280:
+.L1271:
 	str	r3, [sp, #24]
 	ldr	r2, [sp, #12]
 	ldrh	r3, [sp, #24]
 	cmp	r2, r3
-	bhi	.L1215
+	bhi	.L1206
 	adds	r5, r5, #1
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1182
-	ldrh	r2, [r4, #236]
+	bne	.L1173
+	ldrh	r2, [r4, #232]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1216:
+.L1207:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1148
+	bcs	.L1139
 	ldr	r1, [sp, #16]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
 	str	r1, [sp, #16]
 	add	r1, r3, #1
-	bne	.L1281
+	bne	.L1272
 	mov	r3, r1
-	b	.L1216
-.L1185:
+	b	.L1207
+.L1176:
 	ldrh	r2, [r1], #2
 	cmp	r2, r9
-	beq	.L1184
+	beq	.L1175
 	ldr	r7, [sp, #12]
 	orr	r2, r5, r2, lsl #10
 	mla	lr, ip, r7, r0
@@ -8450,10 +8372,10 @@ FtlRecoverySuperblock:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1184:
+.L1175:
 	adds	r3, r3, #1
-	b	.L1183
-.L1215:
+	b	.L1174
+.L1206:
 	ldr	r3, [sp, #24]
 	movs	r7, #20
 	muls	r7, r3, r7
@@ -8466,52 +8388,52 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp]
 	cmp	r5, r3
-	bcc	.L1187
+	bcc	.L1178
 	ldr	r3, [sp, #28]
-	bne	.L1188
+	bne	.L1179
 	ldr	r2, [sp, #20]
 	cmp	r2, r0
-	bhi	.L1187
-.L1188:
+	bhi	.L1178
+.L1179:
 	ldr	r2, [sp, #8]
 	cmp	r5, r2
-	bne	.L1189
+	bne	.L1180
 	ldr	r2, [sp, #4]
 	cmp	r2, r0
-	beq	.L1190
-.L1189:
+	beq	.L1181
+.L1180:
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1191
+	beq	.L1182
 	ldr	r9, [r9, #12]
 	movw	r3, #61589
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	beq	.L1192
+	beq	.L1183
 	ldrh	r0, [r10]
-.L1277:
+.L1268:
 	bl	decrement_vpc_count
-	b	.L1187
-.L1192:
+	b	.L1178
+.L1183:
 	ldr	fp, [r9, #4]
 	cmp	fp, #-1
-	beq	.L1193
+	beq	.L1184
 	ldr	r1, [r4, #2596]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1193
+	cbz	r0, .L1184
 	add	r3, fp, #1
 	str	r3, [r4, #2596]
-.L1193:
+.L1184:
 	ldrh	r2, [r9]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1194
-	mov	r2, #1952
-	ldr	r1, .L1285
-	ldr	r0, .L1285+4
+	beq	.L1185
+	movw	r2, #1954
+	ldr	r1, .L1276
+	ldr	r0, .L1276+4
 	bl	sftl_printk
-.L1194:
+.L1185:
 	ldr	r6, [r9, #8]
 	add	r1, sp, #36
 	ldr	r3, [r9, #12]
@@ -8521,14 +8443,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #3452]
 	adds	r0, r1, #1
-	beq	.L1195
+	beq	.L1186
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1195
+	beq	.L1186
 	ldr	r3, [sp, #32]
 	adds	r2, r3, #1
-	beq	.L1196
+	beq	.L1187
 	ldr	r0, [r4, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8540,134 +8462,134 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1197
-.L1198:
+	bne	.L1188
+.L1189:
 	mov	r3, #-1
 	str	r3, [sp, #32]
-.L1205:
+.L1196:
 	ldr	r0, [sp, #32]
 	adds	r1, r0, #1
-	beq	.L1187
-.L1219:
+	beq	.L1178
+.L1210:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #244]
+	ldrh	r3, [r4, #240]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1211
-	movw	r2, #2057
-	ldr	r1, .L1285
-	ldr	r0, .L1285+4
+	bhi	.L1202
+	movw	r2, #2059
+	ldr	r1, .L1276
+	ldr	r0, .L1276+4
 	bl	sftl_printk
-.L1211:
-	ldr	r3, [r8, #76]
+.L1202:
+	ldr	r3, [r8, #72]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1212
+	beq	.L1203
 	mov	r0, r6
-	b	.L1277
-.L1196:
+	b	.L1268
+.L1187:
 	ldr	r3, [sp, #40]
 	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	bne	.L1187
+	bne	.L1178
 	movs	r2, #1
 	add	r1, sp, #32
 	mov	r0, r6
 	bl	log2phys
-.L1187:
+.L1178:
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	b	.L1280
-.L1197:
+	b	.L1271
+.L1188:
 	ldr	r1, [r9, #8]
 	cmp	r6, r1
-	bne	.L1198
+	bne	.L1189
 	ldr	r1, [r9, #4]
 	ldr	r0, [r4, #3452]
 	str	r1, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1198
+	beq	.L1189
 	ldr	r1, [sp, #36]
 	ldr	r0, [sp, #40]
 	cmp	r1, r0
-	bne	.L1200
-.L1203:
+	bne	.L1191
+.L1194:
 	ldr	r1, [sp, #32]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1198
-.L1200:
+	b	.L1189
+.L1191:
 	ldr	r0, [sp, #32]
 	cmp	r1, r0
-	beq	.L1198
+	beq	.L1189
 	adds	r0, r1, #1
-	beq	.L1201
+	beq	.L1192
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r9, [r3, #12]
 	bl	FlashReadPages
-.L1202:
+.L1193:
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1203
+	beq	.L1194
 	ldr	r3, [r9, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1203
+	beq	.L1194
 	mov	r1, r3
 	ldr	r0, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1198
-	b	.L1203
-.L1201:
+	beq	.L1189
+	b	.L1194
+.L1192:
 	str	r1, [r2, r7]
-	b	.L1202
-.L1195:
+	b	.L1193
+.L1186:
 	ldr	r3, [sp, #40]
 	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	beq	.L1205
+	beq	.L1196
 	ldr	r1, [sp, #32]
 	adds	r0, r1, #1
-	beq	.L1207
-	ldr	r3, [r8, #252]
+	beq	.L1198
+	ldr	r3, [r8, #248]
 	cmp	r3, r1, lsr #10
-	bhi	.L1207
-	ldr	r0, .L1285+8
-.L1279:
+	bhi	.L1198
+	ldr	r0, .L1276+8
+.L1270:
 	bl	sftl_printk
-	b	.L1187
-.L1207:
+	b	.L1178
+.L1198:
 	movs	r2, #1
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
 	ldr	r9, [sp, #36]
 	cmp	r9, #-1
-	beq	.L1205
+	beq	.L1196
 	ldr	r3, [sp, #32]
 	cmp	r9, r3
-	beq	.L1209
+	beq	.L1200
 	ubfx	r0, r9, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	cmp	r3, r0
-	beq	.L1210
-	ldrh	r3, [r4, #80]
+	beq	.L1201
+	ldrh	r3, [r4, #76]
 	cmp	r3, r0
-	beq	.L1210
-	ldrh	r3, [r4, #128]
+	beq	.L1201
+	ldrh	r3, [r4, #124]
 	cmp	r3, r0
-	bne	.L1205
-.L1210:
+	bne	.L1196
+.L1201:
 	ldr	r0, [r8, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8677,22 +8599,22 @@ FtlRecoverySuperblock:
 	ldr	r3, [r8, #3292]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1205
+	beq	.L1196
 	ldr	r1, [r7, #4]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1205
+	bne	.L1196
 	movs	r2, #1
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-	b	.L1205
-.L1212:
+	b	.L1196
+.L1203:
 	mov	r1, r6
-	ldr	r0, .L1285+12
-	b	.L1279
-.L1191:
+	ldr	r0, .L1276+12
+	b	.L1270
+.L1182:
 	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	itttt	ls
@@ -8704,31 +8626,31 @@ FtlRecoverySuperblock:
 	bl	decrement_vpc_count
 	ldr	r3, [r4, #3452]
 	adds	r2, r3, #1
-	bne	.L1214
-.L1278:
+	bne	.L1205
+.L1269:
 	str	fp, [r4, #3452]
-	b	.L1187
-.L1214:
+	b	.L1178
+.L1205:
 	cmp	fp, r3
-	bcs	.L1187
-	b	.L1278
-.L1190:
+	bcs	.L1178
+	b	.L1269
+.L1181:
 	ldrb	r3, [sp, #4]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [r10, #2]	@ movhi
 	ldr	r2, [sp, #4]
 	strb	r3, [r10, #6]
-	b	.L1282
-.L1209:
+	b	.L1273
+.L1200:
 	mov	r0, r9
-	b	.L1219
-.L1220:
+	b	.L1210
+.L1211:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1286:
+.L1277:
 	.align	2
-.L1285:
+.L1276:
 	.word	.LANCHOR1+435
 	.word	.LC8
 	.word	.LC109
@@ -8751,125 +8673,125 @@ ftl_check_vpc:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r5, .L1312
+	ldr	r5, .L1303
 	movs	r4, #0
-	ldr	r6, .L1312+4
+	ldr	r6, .L1303+4
 	ldr	r3, [r5]
-	ldr	r1, .L1312+8
-	ldr	r0, .L1312+12
-	ldr	r7, .L1312+16
+	ldr	r1, .L1303+8
+	ldr	r0, .L1303+12
+	ldr	r7, .L1303+16
 	str	r3, [sp, #12]
 	bl	sftl_printk
 	mov	r2, #8192
 	movs	r1, #0
-	ldr	r0, .L1312+16
+	ldr	r0, .L1303+16
 	bl	ftl_memset
 	str	r5, [sp, #4]
 	mov	r5, r6
-.L1288:
+.L1279:
 	ldr	r3, [r6, #2556]
 	cmp	r4, r3
-	bcc	.L1290
-	ldr	r8, .L1312+16
+	bcc	.L1281
+	ldr	r8, .L1303+16
 	movs	r4, #0
-	ldr	r10, .L1312+28
+	ldr	r10, .L1303+28
 	mov	r6, r4
 	movw	r9, #65535
-.L1291:
-	ldrh	r2, [r5, #244]
+.L1282:
+	ldrh	r2, [r5, #240]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1293
-	ldr	r4, [r5, #2536]
-	cbz	r4, .L1294
-	ldr	r3, [r5, #2520]
+	bhi	.L1284
+	ldr	r4, [r5, #2532]
+	cbz	r4, .L1285
+	ldr	r3, [r5, #2516]
 	movs	r7, #0
-	ldrh	r8, [r5, #228]
+	ldrh	r8, [r5, #224]
 	mov	fp, #6
-	ldr	r9, .L1312+16
+	ldr	r9, .L1303+16
 	subs	r4, r4, r3
-	ldr	r3, .L1312+20
+	ldr	r3, .L1303+20
 	asrs	r4, r4, #1
-	ldr	r10, .L1312+32
+	ldr	r10, .L1303+32
 	muls	r4, r3, r4
 	uxth	r4, r4
-.L1295:
+.L1286:
 	uxth	r3, r7
 	cmp	r8, r3
-	bls	.L1294
-	ldr	r3, [r5, #76]
+	bls	.L1285
+	ldr	r3, [r5, #72]
 	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L1296
+	cbz	r2, .L1287
 	movs	r6, #1
 	ldrh	r3, [r9, r4, lsl #1]
 	mov	r1, r4
 	mov	r0, r10
 	bl	sftl_printk
-.L1296:
+.L1287:
 	mul	r4, fp, r4
-	ldr	r3, [r5, #2520]
+	ldr	r3, [r5, #2516]
 	adds	r7, r7, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L1295
-.L1294:
-	cbz	r6, .L1287
-	movw	r2, #2383
-	ldr	r1, .L1312+8
-	ldr	r0, .L1312+24
+	bne	.L1286
+.L1285:
+	cbz	r6, .L1278
+	movw	r2, #2387
+	ldr	r1, .L1303+8
+	ldr	r0, .L1303+24
 	bl	sftl_printk
-.L1287:
+.L1278:
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1299
+	beq	.L1290
 	bl	__stack_chk_fail
-.L1290:
+.L1281:
 	movs	r2, #0
 	add	r1, sp, #8
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [sp, #8]
 	adds	r3, r0, #1
-	beq	.L1289
+	beq	.L1280
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r7, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L1289:
+.L1280:
 	adds	r4, r4, #1
-	b	.L1288
-.L1293:
-	ldr	r3, [r5, #76]
+	b	.L1279
+.L1284:
+	ldr	r3, [r5, #72]
 	uxth	r7, r4
 	ldrh	r2, [r3, r7, lsl #1]
 	ldrh	r3, [r8, r7, lsl #1]
 	cmp	r2, r3
-	beq	.L1292
+	beq	.L1283
 	mov	r1, r7
 	mov	r0, r10
 	bl	sftl_printk
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	ldrh	r3, [r3, r7, lsl #1]
 	cmp	r3, r9
-	beq	.L1292
+	beq	.L1283
 	ldrh	r2, [r8, r7, lsl #1]
 	cmp	r2, r3
 	it	hi
 	movhi	r6, #1
-.L1292:
+.L1283:
 	adds	r4, r4, #1
-	b	.L1291
-.L1299:
+	b	.L1282
+.L1290:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1313:
+.L1304:
 	.align	2
-.L1312:
+.L1303:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+457
@@ -8895,47 +8817,47 @@ ftl_scan_all_data:
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	movs	r5, #0
-	ldr	r6, .L1329
+	ldr	r6, .L1320
 	.pad #36
 	sub	sp, sp, #36
 	movs	r1, #0
-	ldr	r7, .L1329+4
-	ldr	r9, .L1329+20
+	ldr	r7, .L1320+4
+	ldr	r9, .L1320+20
 	ldr	r3, [r6]
 	mov	r4, r7
-	ldr	r0, .L1329+8
+	ldr	r0, .L1320+8
 	str	r3, [sp, #28]
 	bl	sftl_printk
-.L1315:
+.L1306:
 	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	bcc	.L1321
+	bcc	.L1312
 	ldr	r2, [sp, #28]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1322
+	beq	.L1313
 	bl	__stack_chk_fail
-.L1321:
+.L1312:
 	movs	r2, #0
 	add	r1, sp, #24
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L1316
+	cbnz	r3, .L1307
 	ldr	r2, [sp, #24]
 	mov	r1, r5
 	mov	r0, r9
 	bl	sftl_printk
-.L1316:
+.L1307:
 	ldr	r3, [sp, #24]
 	adds	r2, r3, #1
-	beq	.L1318
+	beq	.L1309
 	str	r3, [r4, #3460]
 	movs	r2, #0
 	ldr	r3, [r4, #3304]
 	movs	r1, #1
 	ldr	r8, [r4, #3336]
-	ldr	r0, .L1329+12
+	ldr	r0, .L1320+12
 	str	r3, [r4, #3464]
 	str	r5, [r4, #3472]
 	str	r8, [r4, #3468]
@@ -8943,16 +8865,16 @@ ftl_scan_all_data:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	beq	.L1319
+	beq	.L1310
 	adds	r3, r3, #1
-	beq	.L1319
+	beq	.L1310
 	ldr	r3, [r8, #8]
 	cmp	r5, r3
-	beq	.L1318
-.L1319:
+	beq	.L1309
+.L1310:
 	ldr	r2, [r4, #3464]
 	ldr	r3, [r4, #3468]
-	ldr	r0, .L1329+16
+	ldr	r0, .L1320+16
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -8967,16 +8889,16 @@ ftl_scan_all_data:
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1318:
+.L1309:
 	adds	r5, r5, #1
-	b	.L1315
-.L1322:
+	b	.L1306
+.L1313:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1330:
+.L1321:
 	.align	2
-.L1329:
+.L1320:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC114
@@ -8996,7 +8918,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1369
+	ldr	r3, .L1360
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
@@ -9005,72 +8927,72 @@ FtlGcScanTempBlk:
 	str	r1, [sp, #4]
 	ldr	r3, [r3]
 	str	r3, [sp, #44]
-	ldr	r3, .L1369+4
+	ldr	r3, .L1360+4
 	ldrh	r6, [r3, #4]
 	movw	r3, #65535
 	cmp	r6, r3
-	beq	.L1359
-	cbnz	r6, .L1332
-.L1333:
+	beq	.L1350
+	cbnz	r6, .L1323
+.L1324:
 	bl	FtlGcPageVarInit
-	b	.L1334
-.L1359:
+	b	.L1325
+.L1350:
 	movs	r6, #0
-.L1332:
-	ldr	r3, .L1369+8
+.L1323:
+	ldr	r3, .L1360+8
 	ldr	r2, [sp, #4]
-	ldrh	r3, [r3, #306]
+	ldrh	r3, [r3, #302]
 	cmp	r3, r2
-	beq	.L1333
-.L1334:
+	beq	.L1324
+.L1325:
 	mov	fp, #0
-.L1352:
+.L1343:
 	ldrh	r2, [r5]
 	movs	r3, #0
 	strb	r3, [r5, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1335
-	ldr	r4, .L1369+8
-.L1355:
+	beq	.L1326
+	ldr	r4, .L1360+8
+.L1346:
 	ldr	r3, [r4, #3292]
 	movs	r2, #0
-	ldrh	ip, [r4, #236]
+	ldrh	ip, [r4, #232]
 	add	lr, r5, #16
-	ldrh	r10, [r4, #314]
+	ldrh	r10, [r4, #310]
 	mov	r7, r2
 	str	r3, [sp]
 	movw	r8, #65535
 	ldr	r3, [r4, #3180]
 	ldr	r9, [r4, #3184]
 	str	r3, [sp, #8]
-	ldrh	r3, [r4, #316]
+	ldrh	r3, [r4, #312]
 	str	r3, [sp, #12]
-.L1336:
+.L1327:
 	uxth	r3, r2
 	cmp	ip, r3
-	bhi	.L1340
+	bhi	.L1331
 	mov	r10, #0
 	movs	r2, #0
 	mov	r1, r7
 	ldr	r0, [sp]
 	bl	FlashReadPages
-.L1341:
+.L1332:
 	uxth	r3, r10
 	cmp	r7, r3
-	bhi	.L1353
+	bhi	.L1344
 	ldr	r3, [sp, #4]
 	add	fp, fp, #1
 	adds	r6, r6, #1
 	uxth	r6, r6
 	cmp	r3, fp
-	bls	.L1354
-.L1356:
-	ldrh	r3, [r4, #306]
+	bls	.L1345
+.L1347:
+	ldrh	r3, [r4, #302]
 	cmp	r3, r6
-	bhi	.L1355
-.L1335:
-	ldr	r3, .L1369+4
+	bhi	.L1346
+.L1326:
+	ldr	r3, .L1360+4
 	movw	r2, #65535
 	strh	r6, [r5, #2]	@ movhi
 	mov	r1, r6
@@ -9079,11 +9001,11 @@ FtlGcScanTempBlk:
 	movs	r2, #0
 	strb	r2, [r5, #6]
 	bl	ftl_sb_update_avl_pages
-	b	.L1357
-.L1340:
+	b	.L1348
+.L1331:
 	ldrh	r3, [lr], #2
 	cmp	r3, r8
-	beq	.L1337
+	beq	.L1328
 	ldr	r0, [sp]
 	movs	r1, #20
 	orr	r3, r6, r3, lsl #10
@@ -9107,10 +9029,10 @@ FtlGcScanTempBlk:
 	str	r0, [r1, #8]
 	add	r3, r3, r9
 	str	r3, [r1, #12]
-.L1337:
+.L1328:
 	adds	r2, r2, #1
-	b	.L1336
-.L1353:
+	b	.L1327
+.L1344:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, r10
@@ -9120,30 +9042,30 @@ FtlGcScanTempBlk:
 	ldr	r9, [r1, #12]
 	str	r0, [sp]
 	cmp	r8, #0
-	bne	.L1342
+	bne	.L1333
 	ldrh	r1, [r9]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1343
-.L1367:
+	bne	.L1334
+.L1358:
 	ldrh	r2, [r5]
 	movs	r1, #0
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	movs	r6, #0
 	strh	r1, [r3, r2, lsl #1]	@ movhi
 	ldrh	r0, [r5]
 	bl	INSERT_FREE_LIST
 	movw	r3, #65535
 	strh	r3, [r5]	@ movhi
-	strh	r3, [r4, #176]	@ movhi
+	strh	r3, [r4, #172]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1352
-.L1343:
+	b	.L1343
+.L1334:
 	ldr	r0, [r9, #8]
 	ldr	r2, [r4, #2556]
 	str	r3, [sp, #8]
 	cmp	r0, r2
-	bhi	.L1367
+	bhi	.L1358
 	mov	r2, r8
 	add	r1, sp, #20
 	bl	log2phys
@@ -9151,19 +9073,19 @@ FtlGcScanTempBlk:
 	ldr	r1, [sp, #20]
 	ldr	r3, [sp, #8]
 	cmp	r2, r1
-	beq	.L1346
-.L1348:
+	beq	.L1337
+.L1339:
 	ldr	r2, [r9, #8]
-.L1368:
+.L1359:
 	ldr	r1, [sp]
 	add	r10, r10, #1
 	ldr	r0, [r9, #12]
 	bl	FtlGcUpdatePage
-	b	.L1341
-.L1346:
+	b	.L1332
+.L1337:
 	str	r3, [sp, #8]
 	adds	r3, r2, #1
-	beq	.L1348
+	beq	.L1339
 	str	r2, [sp, #28]
 	movs	r1, #1
 	ldr	r2, [r4, #3320]
@@ -9173,57 +9095,57 @@ FtlGcScanTempBlk:
 	str	r2, [sp, #36]
 	mov	r2, r8
 	bl	FlashReadPages
-	ldrh	r2, [r4, #262]
+	ldrh	r2, [r4, #258]
 	ldr	r1, [r4, #3292]
 	ldr	r3, [sp, #8]
 	ldr	r0, [sp, #32]
 	lsls	r2, r2, #7
 	add	ip, r3, r1
-.L1349:
+.L1340:
 	cmp	r8, r2
-	beq	.L1348
+	beq	.L1339
 	ldr	r1, [ip, #8]
 	ldr	r3, [r0, r8, lsl #2]
 	ldr	r1, [r1, r8, lsl #2]
 	cmp	r1, r3
-	beq	.L1350
+	beq	.L1341
 	ldr	r2, [sp, #28]
 	ldrh	r1, [r5]
-	ldr	r0, .L1369+12
+	ldr	r0, .L1360+12
 	bl	sftl_printk
-	b	.L1367
-.L1350:
+	b	.L1358
+.L1341:
 	add	r8, r8, #1
-	b	.L1349
-.L1342:
+	b	.L1340
+.L1333:
 	mov	r2, #-1
-	b	.L1368
-.L1354:
-	ldr	r2, .L1369+4
+	b	.L1359
+.L1345:
+	ldr	r2, .L1360+4
 	movw	r1, #65535
 	ldrh	r3, [r2, #4]
 	cmp	r3, r1
-	beq	.L1356
+	beq	.L1347
 	add	r3, r3, fp
 	strh	r3, [r2, #4]	@ movhi
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	cmp	r3, r6
-	bls	.L1356
-.L1357:
-	ldr	r3, .L1369
+	bls	.L1347
+.L1348:
+	ldr	r3, .L1360
 	mov	r0, #-1
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1358
+	beq	.L1349
 	bl	__stack_chk_fail
-.L1358:
+.L1349:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1370:
+.L1361:
 	.align	2
-.L1369:
+.L1360:
 	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
@@ -9245,33 +9167,33 @@ FtlReadRefresh:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #96
 	sub	sp, sp, #96
-	ldr	r6, .L1388
-	ldr	r7, .L1388+4
+	ldr	r6, .L1379
+	ldr	r7, .L1379+4
 	ldr	r10, [r6, #2724]
 	mov	r5, r6
 	ldr	r3, [r7]
 	str	r3, [sp, #92]
 	cmp	r10, #0
-	beq	.L1372
+	beq	.L1363
 	ldr	r2, [r6, #2728]
 	ldr	r3, [r6, #2556]
 	cmp	r2, r3
-	bcs	.L1373
+	bcs	.L1364
 	mov	r4, #2048
-.L1378:
+.L1369:
 	ldr	r0, [r5, #2728]
 	ldr	r3, [r5, #2556]
 	cmp	r0, r3
-	bcc	.L1374
-.L1377:
+	bcc	.L1365
+.L1368:
 	mov	r0, #-1
-.L1371:
+.L1362:
 	ldr	r2, [sp, #92]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1383
+	beq	.L1374
 	bl	__stack_chk_fail
-.L1374:
+.L1365:
 	movs	r2, #0
 	add	r1, sp, #4
 	bl	log2phys
@@ -9280,7 +9202,7 @@ FtlReadRefresh:
 	adds	r1, r2, #1
 	add	r3, r3, #1
 	str	r3, [r5, #2728]
-	beq	.L1376
+	beq	.L1367
 	str	r3, [sp, #24]
 	add	r0, sp, #96
 	ldr	r3, [r5, #3328]
@@ -9294,24 +9216,24 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #8]
 	cmp	r3, #256
-	bne	.L1377
+	bne	.L1368
 	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1377
-.L1376:
+	b	.L1368
+.L1367:
 	subs	r4, r4, #1
-	bne	.L1378
-	b	.L1377
-.L1373:
+	bne	.L1369
+	b	.L1368
+.L1364:
 	ldr	r3, [r6, #2560]
 	movs	r0, #0
 	str	r0, [r6, #2724]
 	str	r0, [r6, #2728]
 	str	r3, [r6, #2720]
-	b	.L1371
-.L1372:
+	b	.L1362
+.L1363:
 	ldr	r9, [r6, #2560]
 	movw	r4, #10000
 	ldr	r1, [r6, #2616]
@@ -9322,7 +9244,7 @@ FtlReadRefresh:
 	movhi	r4, #31
 	movls	r4, #63
 	cmp	r8, r3
-	bhi	.L1382
+	bhi	.L1373
 	ldr	r3, [r6, #2556]
 	lsrs	r1, r1, #10
 	mov	r0, #1000
@@ -9331,32 +9253,32 @@ FtlReadRefresh:
 	bl	__aeabi_uidiv
 	add	r0, r0, r8
 	cmp	r9, r0
-	bhi	.L1382
-	ldrh	r3, [r6, #2500]
+	bhi	.L1373
+	ldrh	r3, [r6, #2496]
 	ands	r0, r4, r3
-	bne	.L1385
+	bne	.L1376
 	ldr	r2, [r6, #2744]
 	cmp	r3, r2
-	beq	.L1371
-.L1382:
-	ldrh	r3, [r5, #2500]
+	beq	.L1362
+.L1373:
+	ldrh	r3, [r5, #2496]
 	movs	r0, #0
 	str	r0, [r5, #2728]
 	str	r9, [r5, #2720]
 	str	r3, [r5, #2744]
 	movs	r3, #1
 	str	r3, [r5, #2724]
-	b	.L1371
-.L1385:
+	b	.L1362
+.L1376:
 	mov	r0, r10
-	b	.L1371
-.L1383:
+	b	.L1362
+.L1374:
 	add	sp, sp, #96
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1389:
+.L1380:
 	.align	2
-.L1388:
+.L1379:
 	.word	.LANCHOR0
 	.word	__stack_chk_guard
 	.fnend
@@ -9375,30 +9297,30 @@ l2p_flush:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r4, #0
-	ldr	r5, .L1394
+	ldr	r5, .L1385
 	movs	r6, #12
 	bl	FtlWriteDump_data
-.L1391:
-	ldrh	r3, [r5, #342]
+.L1382:
+	ldrh	r3, [r5, #338]
 	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1393
+	bhi	.L1384
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1393:
-	ldr	r2, [r5, #2544]
+.L1384:
+	ldr	r2, [r5, #2540]
 	uxth	r3, r4
 	mla	r3, r6, r3, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1392
+	bge	.L1383
 	bl	flush_l2p_region
-.L1392:
+.L1383:
 	adds	r4, r4, #1
-	b	.L1391
-.L1395:
+	b	.L1382
+.L1386:
 	.align	2
-.L1394:
+.L1385:
 	.word	.LANCHOR0
 	.fnend
 	.size	l2p_flush, .-l2p_flush
@@ -9413,11 +9335,11 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1409
+	ldr	r3, .L1400
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1409+4
+	ldr	r4, .L1400+4
 	.pad #108
 	sub	sp, sp, #108
 	mov	r6, r1
@@ -9426,28 +9348,28 @@ FtlVendorPartWrite:
 	mov	r8, r0
 	str	r3, [sp, #4]
 	str	r2, [sp, #100]
-	ldrh	r2, [r4, #300]
+	ldrh	r2, [r4, #296]
 	cmp	r1, r2
-	bhi	.L1405
-	ldrh	r7, [r4, #312]
+	bhi	.L1396
+	ldrh	r7, [r4, #308]
 	mov	r9, #0
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1398:
-	cbnz	r6, .L1403
-.L1396:
+.L1389:
+	cbnz	r6, .L1394
+.L1387:
 	ldr	r3, [sp, #4]
 	mov	r0, r9
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1404
+	beq	.L1395
 	bl	__stack_chk_fail
-.L1403:
+.L1394:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
-	ldrh	r3, [r4, #262]
+	ldrh	r3, [r4, #258]
 	str	r2, [sp, #12]
 	mov	r1, r3
 	str	r3, [sp, #8]
@@ -9460,9 +9382,9 @@ FtlVendorPartWrite:
 	cmp	r6, r5
 	it	cc
 	uxthcc	r5, r6
-	cbz	r2, .L1400
+	cbz	r2, .L1391
 	cmp	r5, r3
-	beq	.L1400
+	beq	.L1391
 	ldr	r3, [r4, #3312]
 	add	r0, sp, #16
 	str	r2, [sp, #20]
@@ -9472,7 +9394,7 @@ FtlVendorPartWrite:
 	add	r3, sp, #36
 	str	r3, [sp, #28]
 	bl	FlashReadPages
-.L1401:
+.L1392:
 	lsls	r3, r5, #9
 	ldr	r0, [r4, #3312]
 	mov	r1, r10
@@ -9486,7 +9408,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r7
 	ldr	r2, [r4, #3312]
-	ldr	r0, .L1409+8
+	ldr	r0, .L1400+8
 	adds	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
@@ -9494,23 +9416,23 @@ FtlVendorPartWrite:
 	it	eq
 	moveq	r9, #-1
 	add	r10, r10, r3
-	b	.L1398
-.L1400:
-	ldrh	r2, [r4, #314]
+	b	.L1389
+.L1391:
+	ldrh	r2, [r4, #310]
 	movs	r1, #0
 	ldr	r0, [r4, #3312]
 	bl	ftl_memset
-	b	.L1401
-.L1405:
+	b	.L1392
+.L1396:
 	mov	r9, #-1
-	b	.L1396
-.L1404:
+	b	.L1387
+.L1395:
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1410:
+.L1401:
 	.align	2
-.L1409:
+.L1400:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3612
@@ -9528,12 +9450,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1413
-	ldr	r3, .L1413+4
+	ldr	r2, .L1404
+	ldr	r3, .L1404+4
 	ldr	r1, [r2, #2644]
 	cmp	r1, r3
-	bne	.L1411
-	ldr	r3, .L1413+8
+	bne	.L1402
+	ldr	r3, .L1404+8
 	addw	r2, r2, #2644
 	movs	r1, #1
 	movs	r0, #0
@@ -9563,14 +9485,14 @@ Ftl_save_ext_data:
 	ldr	r3, [r2, #-24]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1411:
+.L1402:
 	bx	lr
-.L1414:
+.L1405:
 	.align	2
-.L1413:
+.L1404:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177363
+	.word	1342177365
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	1
@@ -9586,7 +9508,7 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1420
+	ldr	r3, .L1411
 	ldrh	r2, [r3, #3656]
 	cmp	r2, #31
 	itett	ls
@@ -9594,19 +9516,19 @@ FtlEctTblFlush:
 	movhi	r2, #32
 	strhls	r2, [r3, #3656]	@ movhi
 	movls	r2, #1
-	cbnz	r0, .L1417
+	cbnz	r0, .L1408
 	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1418
-.L1417:
+	bcc	.L1409
+.L1408:
 	ldr	r2, [r3, #3352]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1420+4
+	ldr	r1, .L1411+4
 	str	r1, [r2]
 	ldrh	r1, [r3, #3344]
 	ldr	r2, [r3, #3352]
@@ -9619,12 +9541,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1418:
+.L1409:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1421:
+.L1412:
 	.align	2
-.L1420:
+.L1411:
 	.word	.LANCHOR0
 	.word	1112818501
 	.fnend
@@ -9656,11 +9578,11 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1434
+	ldr	r3, .L1425
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1434+4
+	ldr	r4, .L1425+4
 	.pad #108
 	sub	sp, sp, #108
 	mov	r7, r1
@@ -9669,27 +9591,27 @@ FtlVendorPartRead:
 	mov	r8, r0
 	str	r3, [sp, #8]
 	str	r2, [sp, #100]
-	ldrh	r2, [r4, #300]
+	ldrh	r2, [r4, #296]
 	cmp	r1, r2
-	bhi	.L1433
-	ldrh	r6, [r4, #312]
+	bhi	.L1424
+	ldrh	r6, [r4, #308]
 	mov	r9, #0
 	lsr	r6, r0, r6
 	lsl	fp, r6, #2
-.L1425:
-	cbnz	r7, .L1431
-.L1423:
+.L1416:
+	cbnz	r7, .L1422
+.L1414:
 	ldr	r3, [sp, #8]
 	mov	r0, r9
 	ldr	r2, [sp, #100]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1432
+	beq	.L1423
 	bl	__stack_chk_fail
-.L1431:
+.L1422:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
-	ldrh	r5, [r4, #262]
+	ldrh	r5, [r4, #258]
 	ldr	r3, [r3, fp]
 	mov	r1, r5
 	str	r3, [sp, #12]
@@ -9703,7 +9625,7 @@ FtlVendorPartRead:
 	uxthcc	r5, r7
 	lsls	r2, r5, #9
 	str	r2, [sp, #12]
-	cbz	r3, .L1427
+	cbz	r3, .L1418
 	ldr	r2, [r4, #3312]
 	add	r0, sp, #16
 	str	r3, [sp, #20]
@@ -9721,45 +9643,45 @@ FtlVendorPartRead:
 	it	eq
 	moveq	r9, #-1
 	cmp	r2, #256
-	bne	.L1429
+	bne	.L1420
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1434+8
+	ldr	r0, .L1425+8
 	bl	sftl_printk
 	ldr	r2, [r4, #3312]
 	mov	r1, r6
-	ldr	r0, .L1434+12
+	ldr	r0, .L1425+12
 	bl	FtlMapWritePage
-.L1429:
+.L1420:
 	ldr	r1, [r4, #3312]
 	lsls	r2, r5, #9
 	ldr	r3, [sp, #4]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1430:
+.L1421:
 	adds	r6, r6, #1
 	subs	r7, r7, r5
 	add	r8, r8, r5
 	add	r10, r10, r5, lsl #9
 	add	fp, fp, #4
-	b	.L1425
-.L1427:
+	b	.L1416
+.L1418:
 	lsls	r2, r5, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1430
-.L1433:
+	b	.L1421
+.L1424:
 	mov	r9, #-1
-	b	.L1423
-.L1432:
+	b	.L1414
+.L1423:
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1435:
+.L1426:
 	.align	2
-.L1434:
+.L1425:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC118
@@ -9780,29 +9702,29 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1438
+	ldr	r4, .L1429
 	ldr	r2, [r4, #3352]
 	ldrh	r1, [r4, #3344]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1438+4
+	ldr	r3, .L1429+4
 	cmp	r2, r3
-	beq	.L1437
-	ldr	r1, .L1438+8
-	ldr	r0, .L1438+12
+	beq	.L1428
+	ldr	r1, .L1429+8
+	ldr	r0, .L1429+12
 	bl	sftl_printk
 	ldrh	r2, [r4, #3344]
 	movs	r1, #0
 	ldr	r0, [r4, #3352]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1437:
+.L1428:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1439:
+.L1430:
 	.align	2
-.L1438:
+.L1429:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC119
@@ -9823,23 +9745,23 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1443
+	ldr	r4, .L1434
 	movs	r0, #0
-	ldr	r5, .L1443+4
+	ldr	r5, .L1434+4
 	addw	r2, r4, #2644
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	beq	.L1441
+	beq	.L1432
 	mov	r2, #512
 	movs	r1, #0
 	addw	r0, r4, #2644
 	bl	ftl_memset
 	str	r5, [r4, #2644]
-.L1441:
+.L1432:
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	bne	.L1442
+	bne	.L1433
 	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2584]
 	ldr	r3, [r4, #2736]
@@ -9864,18 +9786,18 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2616]
 	ldr	r3, [r4, #2692]
 	str	r3, [r4, #2620]
-.L1442:
-	ldrh	r2, [r4, #296]
+.L1433:
+	ldrh	r2, [r4, #292]
 	ldr	r3, [r4, #2604]
 	ldr	r0, [r4, #2600]
-	ldrh	r1, [r4, #244]
+	ldrh	r1, [r4, #240]
 	mla	r0, r0, r2, r3
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2608]
 	pop	{r3, r4, r5, pc}
-.L1444:
+.L1435:
 	.align	2
-.L1443:
+.L1434:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9911,10 +9833,10 @@ FtlMapBlkWriteDump_data:
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
 	ldr	r3, [r0, #36]
-	cbz	r3, .L1446
+	cbz	r3, .L1437
 	ldrh	r5, [r0, #6]
 	movs	r3, #0
-	ldr	r4, .L1450
+	ldr	r4, .L1441
 	ldr	r2, [r0, #24]
 	str	r3, [r0, #36]
 	subs	r5, r5, #1
@@ -9925,27 +9847,27 @@ FtlMapBlkWriteDump_data:
 	str	r1, [r4, #3468]
 	ldr	r2, [r2, r5, lsl #2]
 	str	r2, [r4, #3460]
-	cbz	r2, .L1448
+	cbz	r2, .L1439
 	movs	r2, #1
 	add	r0, r4, #3456
 	mov	r1, r2
 	bl	FlashReadPages
-.L1449:
+.L1440:
 	ldr	r2, [r4, #3464]
 	mov	r1, r5
 	mov	r0, r6
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1448:
-	ldrh	r2, [r4, #314]
+.L1439:
+	ldrh	r2, [r4, #310]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1449
-.L1446:
+	b	.L1440
+.L1437:
 	pop	{r4, r5, r6, pc}
-.L1451:
+.L1442:
 	.align	2
-.L1450:
+.L1441:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -9963,14 +9885,14 @@ FtlVpcTblFlush:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r4, .L1467
+	ldr	r4, .L1458
 	movs	r1, #255
 	movw	r7, #65535
-	ldr	r9, .L1467+16
+	ldr	r9, .L1458+16
 	ldr	r3, [r4, #3304]
 	add	r8, r4, #3456
 	ldr	r6, [r4, #3336]
-	ldr	r10, .L1467+20
+	ldr	r10, .L1458+20
 	str	r3, [r4, #3464]
 	ldrh	r3, [r4, #2628]
 	str	r6, [r4, #3468]
@@ -9980,71 +9902,61 @@ FtlVpcTblFlush:
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #2636]
 	str	r5, [r6, #8]
-	ldrh	r2, [r4, #30]
+	ldrh	r2, [r4, #26]
 	str	r3, [r6, #4]
-	ldr	r3, .L1467+4
+	ldr	r3, .L1458+4
+	str	r3, [r4, #2468]
+	ldr	r3, .L1458+8
 	str	r3, [r4, #2472]
-	ldr	r3, .L1467+8
-	str	r3, [r4, #2476]
 	ldrh	r3, [r4, #2634]
-	strh	r3, [r4, #2480]	@ movhi
-	ldrh	r3, [r4, #258]
-	strb	r3, [r4, #2482]
-	ldrh	r3, [r4, #28]
+	strh	r3, [r4, #2476]	@ movhi
+	ldrh	r3, [r4, #254]
+	strb	r3, [r4, #2478]
+	ldrh	r3, [r4, #24]
+	strh	r3, [r4, #2482]	@ movhi
+	ldrb	r3, [r4, #30]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	ldrh	r2, [r4, #78]
+	strh	r3, [r4, #2484]	@ movhi
+	ldrb	r3, [r4, #32]	@ zero_extendqisi2
+	strb	r3, [r4, #2479]
+	ldrh	r3, [r4, #76]
 	strh	r3, [r4, #2486]	@ movhi
-	ldrb	r3, [r4, #34]	@ zero_extendqisi2
+	ldrb	r3, [r4, #82]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	ldrh	r2, [r4, #82]
 	strh	r3, [r4, #2488]	@ movhi
-	ldrb	r3, [r4, #36]	@ zero_extendqisi2
-	strb	r3, [r4, #2483]
-	ldrh	r3, [r4, #80]
+	ldrb	r3, [r4, #84]	@ zero_extendqisi2
+	strb	r3, [r4, #2480]
+	ldrh	r3, [r4, #124]
+	ldrh	r2, [r4, #126]
+	ldr	r0, [r4, #3464]
 	strh	r3, [r4, #2490]	@ movhi
-	ldrb	r3, [r4, #86]	@ zero_extendqisi2
+	ldrb	r3, [r4, #130]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
+	ldrh	r2, [r4, #310]
 	strh	r3, [r4, #2492]	@ movhi
-	ldrb	r3, [r4, #88]	@ zero_extendqisi2
-	strb	r3, [r4, #2484]
-	ldrh	r3, [r4, #128]
-	ldrh	r2, [r4, #130]
-	ldr	r0, [r4, #3464]
-	strh	r3, [r4, #2494]	@ movhi
-	ldrb	r3, [r4, #134]	@ zero_extendqisi2
-	orr	r3, r3, r2, lsl #6
-	ldrh	r2, [r4, #314]
-	strh	r3, [r4, #2496]	@ movhi
-	ldrb	r3, [r4, #136]	@ zero_extendqisi2
-	strb	r3, [r4, #2485]
+	ldrb	r3, [r4, #132]	@ zero_extendqisi2
+	strb	r3, [r4, #2481]
 	ldr	r3, [r4, #2600]
-	str	r3, [r4, #2504]
+	str	r3, [r4, #2500]
 	ldr	r3, [r4, #2592]
-	str	r3, [r4, #2512]
-	ldr	r3, [r4, #2596]
 	str	r3, [r4, #2508]
+	ldr	r3, [r4, #2596]
+	str	r3, [r4, #2504]
 	bl	ftl_memset
 	movs	r2, #48
-	addw	r1, r4, #2472
+	addw	r1, r4, #2468
 	ldr	r0, [r4, #3464]
 	bl	ftl_memcpy
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	ldr	r0, [r4, #3464]
-	ldr	r1, [r4, #76]
+	ldr	r1, [r4, #72]
 	lsls	r2, r2, #1
 	adds	r0, r0, #48
 	bl	ftl_memcpy
-	ldrh	r0, [r4, #244]
-	ldr	r3, [r4, #3464]
-	ldr	r1, [r4, #24]
-	lsrs	r2, r0, #3
-	adds	r0, r0, #24
-	lsls	r0, r0, #1
-	adds	r2, r2, #4
-	bic	r0, r0, #3
-	add	r0, r0, r3
-	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1453:
+.L1444:
 	ldr	r3, [r4, #3304]
 	ldrh	r1, [r4, #2630]
 	ldrh	r2, [r4, #2628]
@@ -10053,10 +9965,10 @@ FtlVpcTblFlush:
 	str	r3, [r4, #3468]
 	orr	r3, r1, r2, lsl #10
 	str	r3, [r4, #3460]
-	ldrh	r3, [r4, #308]
+	ldrh	r3, [r4, #304]
 	subs	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1454
+	blt	.L1445
 	movs	r3, #0
 	ldrh	r7, [r4, #2632]
 	strh	r3, [r4, #2630]	@ movhi
@@ -10071,8 +9983,8 @@ FtlVpcTblFlush:
 	str	r2, [r4, #3460]
 	str	r3, [r6, #4]
 	strh	r0, [r6, #2]	@ movhi
-.L1454:
-	ldrh	r1, [r4, #314]
+.L1445:
+	ldrh	r1, [r4, #310]
 	ldr	r0, [r4, #3304]
 	bl	js_hash
 	movs	r3, #1
@@ -10087,50 +9999,50 @@ FtlVpcTblFlush:
 	uxth	r3, r3
 	adds	r1, r2, #1
 	strh	r3, [r4, #2630]	@ movhi
-	bne	.L1455
+	bne	.L1446
 	cmp	r3, #1
-	bne	.L1456
+	bne	.L1447
 	movw	r2, #1138
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L1456:
+.L1447:
 	ldrh	r3, [r4, #2630]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	cmp	r3, #1
 	ittt	eq
-	ldrheq	r3, [r4, #308]
+	ldrheq	r3, [r4, #304]
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2630]	@ movhi
 	cmp	r5, #3
-	bls	.L1453
+	bls	.L1444
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L1467+12
+	ldr	r0, .L1458+12
 	bl	sftl_printk
-.L1459:
-	b	.L1459
-.L1455:
+.L1450:
+	b	.L1450
+.L1446:
 	cmp	r3, #1
-	beq	.L1453
+	beq	.L1444
 	cmp	r2, #256
-	beq	.L1453
+	beq	.L1444
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1460
+	beq	.L1451
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1460:
+.L1451:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1468:
+.L1459:
 	.align	2
-.L1467:
+.L1458:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177363
+	.word	1342177365
 	.word	.LC120
 	.word	.LANCHOR1+471
 	.word	.LC8
@@ -10170,17 +10082,17 @@ sftl_deinit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1472
+	ldr	r3, .L1463
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1471
+	bne	.L1462
 	bl	FtlSysFlush
-.L1471:
+.L1462:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1473:
+.L1464:
 	.align	2
-.L1472:
+.L1463:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10199,39 +10111,39 @@ sftl_discard:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r7, .L1492
+	ldr	r7, .L1483
 	mov	r8, r0
 	mov	r5, r1
-	ldr	r4, .L1492+4
+	ldr	r4, .L1483+4
 	ldr	r3, [r7]
 	str	r3, [sp, #12]
-	ldr	r3, [r4, #344]
+	ldr	r3, [r4, #340]
 	cmp	r3, r0
-	bls	.L1485
+	bls	.L1476
 	cmp	r3, r1
-	bcc	.L1485
+	bcc	.L1476
 	adds	r2, r0, r1
 	cmp	r3, r2
-	bcc	.L1485
+	bcc	.L1476
 	cmp	r1, #31
-	bhi	.L1476
-.L1481:
+	bhi	.L1467
+.L1472:
 	movs	r0, #0
-.L1474:
+.L1465:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1482
+	beq	.L1473
 	bl	__stack_chk_fail
-.L1476:
-	ldrh	r6, [r4, #262]
+.L1467:
+	ldrh	r6, [r4, #258]
 	mov	r1, r6
 	bl	__aeabi_uidiv
 	smulbb	r3, r0, r6
 	mov	r9, r0
 	sub	r8, r8, r3
 	uxth	r3, r8
-	cbz	r3, .L1477
+	cbz	r3, .L1468
 	subs	r6, r6, r3
 	add	r9, r0, #1
 	cmp	r6, r5
@@ -10239,29 +10151,29 @@ sftl_discard:
 	movcs	r6, r5
 	uxth	r6, r6
 	subs	r5, r5, r6
-.L1477:
+.L1468:
 	mov	r3, #-1
 	str	r3, [sp, #8]
-.L1478:
-	ldrh	r3, [r4, #262]
+.L1469:
+	ldrh	r3, [r4, #258]
 	cmp	r5, r3
-	bcs	.L1480
+	bcs	.L1471
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1481
+	bls	.L1472
 	movs	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1481
-.L1480:
+	b	.L1472
+.L1471:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r9
 	bl	log2phys
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L1479
+	beq	.L1470
 	ldr	r3, [r4, #3660]
 	movs	r2, #1
 	add	r1, sp, #8
@@ -10276,21 +10188,21 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1479:
-	ldrh	r3, [r4, #262]
+.L1470:
+	ldrh	r3, [r4, #258]
 	add	r9, r9, #1
 	subs	r5, r5, r3
-	b	.L1478
-.L1485:
+	b	.L1469
+.L1476:
 	mov	r0, #-1
-	b	.L1474
-.L1482:
+	b	.L1465
+.L1473:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1493:
+.L1484:
 	.align	2
-.L1492:
+.L1483:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
@@ -10306,108 +10218,127 @@ FtlVpcCheckAndModify:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #8
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
 	movs	r5, #0
-	ldr	r7, .L1508
-	ldr	r4, .L1508+4
+	ldr	r7, .L1500
+	ldr	r4, .L1500+4
 	ldr	r3, [r7]
-	ldr	r1, .L1508+8
-	ldr	r0, .L1508+12
+	ldr	r1, .L1500+8
+	ldr	r0, .L1500+12
 	str	r3, [sp, #4]
 	bl	sftl_printk
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	movs	r1, #0
 	ldr	r0, [r4, #3356]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1495:
+.L1486:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1497
-	ldr	r10, .L1508+16
+	bcc	.L1488
+	ldr	r9, .L1500+20
 	mov	r8, #0
-	movw	r9, #65535
-.L1498:
-	ldrh	r3, [r4, #244]
+	ldr	r10, .L1500+24
+	ldr	fp, .L1500+8
+.L1489:
+	ldrh	r3, [r4, #240]
 	uxth	r6, r8
 	cmp	r3, r6
-	bhi	.L1503
+	bhi	.L1495
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	r2, [sp, #4]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L1504
+	beq	.L1496
 	bl	__stack_chk_fail
-.L1497:
+.L1488:
 	movs	r2, #0
 	mov	r1, sp
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp]
 	adds	r3, r0, #1
-	beq	.L1496
+	beq	.L1487
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3356]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1496:
+.L1487:
 	adds	r5, r5, #1
-	b	.L1495
-.L1503:
-	ldr	r3, [r4, #76]
+	b	.L1486
+.L1495:
+	ldr	r3, [r4, #72]
 	uxth	r5, r8
 	ldrh	r2, [r3, r5, lsl #1]
 	ldr	r3, [r4, #3356]
 	ldrh	r3, [r3, r5, lsl #1]
 	cmp	r2, r3
-	beq	.L1500
-	cmp	r2, r9
-	beq	.L1500
+	beq	.L1491
+	movw	r1, #65535
+	cmp	r2, r1
+	beq	.L1491
 	mov	r1, r5
-	mov	r0, r10
+	mov	r0, r9
 	bl	sftl_printk
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	cmp	r3, r6
-	beq	.L1500
-	ldrh	r3, [r4, #128]
+	beq	.L1491
+	ldrh	r3, [r4, #124]
 	cmp	r3, r6
-	beq	.L1500
-	ldrh	r3, [r4, #80]
+	beq	.L1491
+	ldrh	r3, [r4, #76]
 	cmp	r3, r6
-	beq	.L1500
-	ldr	r3, [r4, #76]
+	beq	.L1491
+	ldr	r3, [r4, #72]
 	ldrh	r2, [r3, r5, lsl #1]
-	cbnz	r2, .L1502
+	cbnz	r2, .L1493
 	ldr	r2, [r4, #3356]
+	mov	r1, r6
+	mov	r0, r10
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
-.L1500:
+	bl	List_remove_node
+	ldrh	r3, [r4, #224]
+	cbnz	r3, .L1494
+	movw	r2, #2323
+	mov	r1, fp
+	ldr	r0, .L1500+16
+	bl	sftl_printk
+.L1494:
+	ldrh	r3, [r4, #224]
+	mov	r0, r6
+	subs	r3, r3, #1
+	strh	r3, [r4, #224]	@ movhi
+	bl	INSERT_DATA_LIST
+.L1491:
 	add	r8, r8, #1
-	b	.L1498
-.L1502:
+	b	.L1489
+.L1493:
 	ldr	r2, [r4, #3356]
 	mov	r0, r6
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
 	bl	update_vpc_list
-	b	.L1500
-.L1504:
-	add	sp, sp, #8
+	b	.L1491
+.L1496:
+	add	sp, sp, #12
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1509:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1501:
 	.align	2
-.L1508:
+.L1500:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+486
 	.word	.LC111
+	.word	.LC8
 	.word	.LC121
+	.word	.LANCHOR0+2532
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	1
@@ -10424,42 +10355,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1520
+	ldr	r4, .L1512
 	ldrh	r5, [r0]
-	ldrh	r3, [r4, #244]
+	ldrh	r3, [r4, #240]
 	cmp	r3, r5
-	bcs	.L1511
-	movw	r2, #2755
-	ldr	r1, .L1520+4
-	ldr	r0, .L1520+8
+	bcs	.L1503
+	movw	r2, #2759
+	ldr	r1, .L1512+4
+	ldr	r0, .L1512+8
 	bl	sftl_printk
-.L1511:
+.L1503:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1512
-	ldr	r3, [r4, #76]
+	beq	.L1504
+	ldr	r3, [r4, #72]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1513
+	cbz	r3, .L1505
 	bl	INSERT_DATA_LIST
-.L1512:
+.L1504:
 	ldrh	r0, [r4, #3442]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1514
+	beq	.L1506
 	cmp	r5, r0
-	bne	.L1515
-	ldr	r3, [r4, #76]
+	bne	.L1507
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1516
-.L1515:
+	cbz	r3, .L1508
+.L1507:
 	bl	update_vpc_list
-.L1516:
+.L1508:
 	movw	r3, #65535
 	strh	r3, [r4, #3442]	@ movhi
-.L1514:
+.L1506:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10468,12 +10399,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1513:
+.L1505:
 	bl	INSERT_FREE_LIST
-	b	.L1512
-.L1521:
+	b	.L1504
+.L1513:
 	.align	2
-.L1520:
+.L1512:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+507
 	.word	.LC8
@@ -10493,38 +10424,38 @@ FtlProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r3
-	ldr	r6, .L1542
+	ldr	r6, .L1534
 	.pad #20
 	sub	sp, sp, #20
 	movs	r7, #0
 	movs	r2, #0
-	ldr	fp, .L1542+20
+	ldr	fp, .L1534+20
 	mov	r4, r0
 	ldr	r3, [r6]
 	mov	r10, r1
-	ldr	r9, .L1542+4
+	ldr	r9, .L1534+4
 	str	r3, [sp, #12]
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1523:
+.L1515:
 	cmp	r7, r10
-	bne	.L1530
-	ldr	r3, .L1542+4
+	bne	.L1522
+	ldr	r3, .L1534+4
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r3, #236]
+	ldrh	r3, [r3, #232]
 	cmp	r2, r3
-	bcc	.L1522
+	bcc	.L1514
 	mov	r2, #1000
-	ldr	r1, .L1542+8
-	ldr	r0, .L1542+12
+	ldr	r1, .L1534+8
+	ldr	r0, .L1534+12
 	bl	sftl_printk
-.L1522:
+.L1514:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1532
+	beq	.L1524
 	bl	__stack_chk_fail
-.L1525:
+.L1517:
 	ldr	r1, [r4, #4]
 	mov	r0, fp
 	bl	sftl_printk
@@ -10533,10 +10464,10 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1524
+	cbnz	r3, .L1516
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1524:
+.L1516:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	movs	r2, #0
@@ -10546,21 +10477,21 @@ FtlProgPages:
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	FlashProgPages
-.L1530:
+.L1522:
 	ldr	r2, [r4]
 	adds	r3, r2, #1
-	beq	.L1525
+	beq	.L1517
 	cmp	r2, #256
-	beq	.L1525
+	beq	.L1517
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #236]
+	ldrh	r3, [r9, #232]
 	cmp	r2, r3
-	bcc	.L1526
+	bcc	.L1518
 	movw	r2, #985
-	ldr	r1, .L1542+8
-	ldr	r0, .L1542+12
+	ldr	r1, .L1534+8
+	ldr	r0, .L1534+12
 	bl	sftl_printk
-.L1526:
+.L1518:
 	ldr	r3, [r4, #4]
 	add	r1, sp, #16
 	movs	r2, #1
@@ -10575,27 +10506,27 @@ FtlProgPages:
 	ldr	r3, [sp, #4]
 	mov	r8, r0
 	adds	r3, r3, #1
-	beq	.L1527
-	ldr	r3, [r9, #76]
+	beq	.L1519
+	ldr	r3, [r9, #72]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1528
+	cbnz	r2, .L1520
 	mov	r1, r0
-	ldr	r0, .L1542+16
+	ldr	r0, .L1534+16
 	bl	sftl_printk
-.L1528:
+.L1520:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1527:
+.L1519:
 	adds	r7, r7, #1
 	adds	r4, r4, #20
-	b	.L1523
-.L1532:
+	b	.L1515
+.L1524:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1543:
+.L1535:
 	.align	2
-.L1542:
+.L1534:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+536
@@ -10618,110 +10549,110 @@ FtlGcFreeTempBlock:
 	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
-	ldr	r6, .L1569
-	ldr	r4, .L1569+4
+	ldr	r6, .L1561
+	ldr	r4, .L1561+4
 	ldr	r3, [r6]
-	ldrh	r2, [r4, #128]
+	ldrh	r2, [r4, #124]
 	str	r3, [sp, #4]
 	movw	r3, #65535
-	ldrh	r1, [r4, #306]
+	ldrh	r1, [r4, #302]
 	cmp	r2, r3
-	bne	.L1545
-.L1552:
-	ldrh	r2, [r4, #128]
+	bne	.L1537
+.L1544:
+	ldrh	r2, [r4, #124]
 	movs	r3, #0
 	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1566
-.L1546:
+	bne	.L1558
+.L1538:
 	movs	r0, #0
-.L1544:
+.L1536:
 	ldr	r2, [sp, #4]
 	ldr	r3, [r6]
 	cmp	r2, r3
-	beq	.L1561
+	beq	.L1553
 	bl	__stack_chk_fail
-.L1545:
-	ldr	r5, .L1569+8
-	cbz	r0, .L1548
+.L1537:
+	ldr	r5, .L1561+8
+	cbz	r0, .L1540
 	ldrh	r2, [r5, #4]
 	cmp	r2, r3
-	beq	.L1549
-.L1550:
+	beq	.L1541
+.L1542:
 	movs	r1, #2
-.L1548:
-	ldr	r0, .L1569+12
+.L1540:
+	ldr	r0, .L1561+12
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r5, #4]
 	movw	r3, #65535
 	str	r0, [sp]
 	cmp	r2, r3
-	beq	.L1552
+	beq	.L1544
 	movs	r0, #1
-	b	.L1544
-.L1549:
+	b	.L1536
+.L1541:
 	movs	r3, #0
 	strh	r3, [r5, #4]	@ movhi
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #17
-	bhi	.L1550
-	b	.L1548
-.L1566:
-	ldrb	r1, [r4, #135]	@ zero_extendqisi2
-	ldrh	r3, [r4, #306]
+	bhi	.L1542
+	b	.L1540
+.L1558:
+	ldrb	r1, [r4, #131]	@ zero_extendqisi2
+	ldrh	r3, [r4, #302]
 	ldrh	r2, [r4, #3208]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1553
+	beq	.L1545
 	movs	r2, #164
-	ldr	r1, .L1569+16
-	ldr	r0, .L1569+20
+	ldr	r1, .L1561+16
+	ldr	r0, .L1561+20
 	bl	sftl_printk
-.L1553:
-	ldrb	r3, [r4, #135]	@ zero_extendqisi2
+.L1545:
+	ldrb	r3, [r4, #131]	@ zero_extendqisi2
 	movs	r5, #0
-	ldrh	r0, [r4, #306]
+	ldrh	r0, [r4, #302]
 	mov	r9, #12
-	ldr	r2, [r4, #76]
-	ldrh	r1, [r4, #128]
+	ldr	r2, [r4, #72]
+	ldrh	r1, [r4, #124]
 	smulbb	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldr	r2, [r4, #2580]
 	ldrh	r3, [r4, #3208]
 	add	r3, r3, r2
 	str	r3, [r4, #2580]
-.L1554:
+.L1546:
 	ldrh	r2, [r4, #3208]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1558
+	bhi	.L1550
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r0, [r4, #128]
-	ldr	r3, [r4, #76]
+	ldrh	r0, [r4, #124]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1559
+	beq	.L1551
 	bl	INSERT_DATA_LIST
-.L1560:
+.L1552:
 	movw	r7, #65535
 	movs	r5, #0
-	strh	r7, [r4, #128]	@ movhi
+	strh	r7, [r4, #124]	@ movhi
 	strh	r5, [r4, #3208]	@ movhi
 	strh	r5, [r4, #3200]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldrh	r3, [r4, #2624]
-	ldrh	r2, [r4, #228]
-	strh	r7, [r4, #176]	@ movhi
+	ldrh	r2, [r4, #224]
+	strh	r7, [r4, #172]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1546
+	ble	.L1538
 	movs	r3, #20
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1546
-.L1558:
+	b	.L1538
+.L1550:
 	uxth	r8, r5
 	ldr	r10, [r4, #3204]
 	ldr	r3, [r4, #2556]
@@ -10729,18 +10660,18 @@ FtlGcFreeTempBlock:
 	add	r7, r10, r8
 	ldr	r0, [r7, #8]
 	cmp	r0, r3
-	bcc	.L1555
-.L1567:
-	ldrh	r0, [r4, #128]
-	b	.L1568
-.L1555:
+	bcc	.L1547
+.L1559:
+	ldrh	r0, [r4, #124]
+	b	.L1560
+.L1547:
 	movs	r2, #0
 	mov	r1, sp
 	bl	log2phys
 	ldr	r0, [r10, r8]
 	ldr	r3, [sp]
 	cmp	r0, r3
-	bne	.L1557
+	bne	.L1549
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
@@ -10749,30 +10680,30 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r7, #8]
 	bl	log2phys
 	mov	r0, r8
-.L1568:
+.L1560:
 	bl	decrement_vpc_count
-	b	.L1556
-.L1557:
+	b	.L1548
+.L1549:
 	ldr	r2, [r7, #4]
 	cmp	r3, r2
-	bne	.L1567
-.L1556:
+	bne	.L1559
+.L1548:
 	adds	r5, r5, #1
-	b	.L1554
-.L1559:
+	b	.L1546
+.L1551:
 	bl	INSERT_FREE_LIST
-	b	.L1560
-.L1561:
+	b	.L1552
+.L1553:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1570:
+.L1562:
 	.align	2
-.L1569:
+.L1561:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR0+128
+	.word	.LANCHOR0+124
 	.word	.LANCHOR1+549
 	.word	.LC8
 	.fnend
@@ -10790,25 +10721,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1573
-	ldrh	r1, [r4, #306]
-	add	r0, r4, #128
+	ldr	r4, .L1565
+	ldrh	r1, [r4, #302]
+	add	r0, r4, #124
 	bl	FtlGcScanTempBlk
-	ldrh	r2, [r4, #130]
-	ldrh	r3, [r4, #306]
+	ldrh	r2, [r4, #126]
+	ldrh	r3, [r4, #302]
 	cmp	r2, r3
-	bcc	.L1571
+	bcc	.L1563
 	addw	r0, r4, #3396
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
 	str	r3, [r4, #3448]
-.L1571:
+.L1563:
 	pop	{r4, pc}
-.L1574:
+.L1566:
 	.align	2
-.L1573:
+.L1565:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10826,11 +10757,11 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1576
-	add	r6, r4, #28
+	ldr	r4, .L1568
+	add	r6, r4, #24
 	str	r5, [r4, #3480]
 	mov	r0, r6
-	adds	r4, r4, #80
+	adds	r4, r4, #76
 	bl	FtlRecoverySuperblock
 	mov	r0, r6
 	bl	FtlSlcSuperblockCheck
@@ -10843,9 +10774,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1577:
+.L1569:
 	.align	2
-.L1576:
+.L1568:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10863,30 +10794,30 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1586
+	ldr	r4, .L1578
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3172]
 	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1579:
+.L1571:
 	ldr	r1, [r4, #3172]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1582
+	bhi	.L1574
 	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
-	ldrh	r3, [r4, #132]
+	ldrh	r3, [r4, #128]
 	movs	r0, #0
 	str	r0, [r4, #3172]
-	cbnz	r3, .L1578
+	cbnz	r3, .L1570
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	movs	r0, #1
-.L1578:
+.L1570:
 	pop	{r4, r5, r6, pc}
-.L1582:
+.L1574:
 	muls	r3, r6, r3
 	ldr	r2, [r4, #3296]
 	adds	r5, r5, #1
@@ -10899,10 +10830,10 @@ Ftl_gc_temp_data_write_back:
 	ldrne	r2, [r0, #8]
 	ldr	r0, [r0, #12]
 	bl	FtlGcUpdatePage
-	b	.L1579
-.L1587:
+	b	.L1571
+.L1579:
 	.align	2
-.L1586:
+.L1578:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10920,18 +10851,18 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1591
-	ldrh	r2, [r4, #128]
+	ldr	r4, .L1583
+	ldrh	r2, [r4, #124]
 	cmp	r2, r3
-	beq	.L1589
-	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1590
-.L1589:
+	beq	.L1581
+	ldrh	r3, [r4, #128]
+	cbnz	r3, .L1582
+.L1581:
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1591+4
-	strb	r5, [r4, #136]
+	ldr	r0, .L1583+4
+	strb	r5, [r4, #132]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #3200]	@ movhi
 	strh	r5, [r4, #3208]	@ movhi
@@ -10939,15 +10870,15 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1590:
-	ldr	r0, .L1591+4
+.L1582:
+	ldr	r0, .L1583+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L1592:
+.L1584:
 	.align	2
-.L1591:
+.L1583:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+128
+	.word	.LANCHOR0+124
 	.fnend
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	1
@@ -10961,7 +10892,7 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1725
+	ldr	r3, .L1717
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
@@ -10969,351 +10900,351 @@ rk_ftl_garbage_collect:
 	mov	r9, r0
 	ldr	r3, [r3]
 	str	r3, [sp, #44]
-	ldr	r3, .L1725+4
+	ldr	r3, .L1717+4
 	ldr	r0, [r3, #3276]
 	mov	r4, r3
 	cmp	r0, #0
-	bne	.L1677
-	ldrh	r2, [r3, #2532]
+	bne	.L1669
+	ldrh	r2, [r3, #2528]
 	cmp	r2, #47
-	bls	.L1593
-	ldr	r2, .L1725+8
+	bls	.L1585
+	ldr	r2, .L1717+8
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1595
-.L1598:
-	ldrh	r2, [r4, #224]
+	bne	.L1587
+.L1590:
+	ldrh	r2, [r4, #220]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1596
-.L1597:
+	bne	.L1588
+.L1589:
 	bl	FtlReadRefresh
 	ldr	r3, [r4, #3160]
 	movw	r7, #65535
-	ldrh	r1, [r4, #176]
+	ldrh	r1, [r4, #172]
 	adds	r3, r3, #1
 	add	r3, r3, r9, lsl #7
 	cmp	r1, r7
 	str	r3, [r4, #3160]
-	bne	.L1599
-	ldrh	r2, [r4, #128]
+	bne	.L1591
+	ldrh	r2, [r4, #124]
 	cmp	r2, r1
-	bne	.L1600
-	ldrh	r6, [r4, #226]
+	bne	.L1592
+	ldrh	r6, [r4, #222]
 	cmp	r6, r2
-	bne	.L1601
-	ldrh	r2, [r4, #228]
+	bne	.L1593
+	ldrh	r2, [r4, #224]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1601
+	bls	.L1593
 	movs	r5, #0
 	str	r5, [r4, #3160]
 	strh	r5, [r4, #3664]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r6
 	mov	r7, r0
-	bne	.L1681
-	ldrh	r2, [r4, #228]
+	bne	.L1673
+	ldrh	r2, [r4, #224]
 	ldrh	r3, [r4, #3158]
 	cmp	r2, r3
-	bcs	.L1604
+	bcs	.L1596
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r7
-	beq	.L1606
+	beq	.L1598
 	mov	r0, r3
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1607
+	bhi	.L1599
 	mov	r0, r5
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	movs	r3, #128
 	strh	r3, [r4, #3158]	@ movhi
 	cmp	r5, r7
-	bne	.L1603
-.L1606:
+	bne	.L1595
+.L1598:
 	bl	FtlGcReFreshBadBlk
 	cmp	r9, #0
-	bne	.L1609
+	bne	.L1601
 	movw	r3, #65535
 	cmp	r7, r3
-	bne	.L1609
-.L1674:
-	ldrh	r3, [r4, #228]
+	bne	.L1601
+.L1666:
+	ldrh	r3, [r4, #224]
 	cmp	r3, #24
-	bhi	.L1682
+	bhi	.L1674
 	cmp	r3, #16
-	ldrh	r6, [r4, #306]
-	bls	.L1611
+	ldrh	r6, [r4, #302]
+	bls	.L1603
 	lsrs	r6, r6, #5
-.L1610:
+.L1602:
 	ldrh	r2, [r4, #3156]
 	cmp	r2, r3
-	bcs	.L1614
-	ldrh	r3, [r4, #128]
+	bcs	.L1606
+	ldrh	r3, [r4, #124]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1615
-	ldrh	r2, [r4, #226]
+	bne	.L1607
+	ldrh	r2, [r4, #222]
 	cmp	r2, r3
-	bne	.L1615
+	bne	.L1607
 	ldrh	r0, [r4, #3664]
-	cbnz	r0, .L1616
+	cbnz	r0, .L1608
 	ldr	r3, [r4, #2556]
-	ldr	r2, [r4, #2552]
+	ldr	r2, [r4, #2548]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1617
-.L1616:
+	bcs	.L1609
+.L1608:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1721:
+.L1713:
 	strh	r3, [r4, #3156]	@ movhi
 	movs	r3, #0
 	str	r3, [r4, #3168]
-.L1593:
-	ldr	r3, .L1725
+.L1585:
+	ldr	r3, .L1717
 	ldr	r2, [sp, #44]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1676
+	beq	.L1668
 	bl	__stack_chk_fail
-.L1595:
-	ldrh	r3, [r3, #128]
+.L1587:
+	ldrh	r3, [r3, #124]
 	cmp	r3, r2
-	beq	.L1598
+	beq	.L1590
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1598
+	beq	.L1590
 	movs	r0, #1
-	b	.L1593
-.L1596:
-	ldrh	r3, [r4, #226]
+	b	.L1585
+.L1588:
+	ldrh	r3, [r4, #222]
 	cmp	r3, r1
 	itt	eq
-	strheq	r2, [r4, #226]	@ movhi
-	strheq	r3, [r4, #224]	@ movhi
-	b	.L1597
-.L1607:
+	strheq	r2, [r4, #222]	@ movhi
+	strheq	r3, [r4, #220]	@ movhi
+	b	.L1589
+.L1599:
 	movs	r3, #64
-.L1720:
+.L1712:
 	strh	r3, [r4, #3158]	@ movhi
-	b	.L1606
-.L1604:
+	b	.L1598
+.L1596:
 	movs	r3, #80
-	b	.L1720
-.L1681:
+	b	.L1712
+.L1673:
 	mov	r5, r0
-.L1603:
-	ldr	r3, [r4, #76]
+.L1595:
+	ldr	r3, [r4, #72]
 	mov	r7, r5
 	ldrh	r1, [r4, #3156]
-	ldrh	r2, [r4, #228]
+	ldrh	r2, [r4, #224]
 	ldrh	r3, [r3, r5, lsl #1]
 	str	r1, [sp, #4]
-	ldr	r1, [r4, #2540]
-	ldr	r0, .L1725+12
+	ldr	r1, [r4, #2536]
+	ldr	r0, .L1717+12
 	ldrh	r1, [r1, r5, lsl #1]
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1606
-.L1611:
+	b	.L1598
+.L1603:
 	cmp	r3, #12
-	bls	.L1612
+	bls	.L1604
 	lsrs	r6, r6, #4
-	b	.L1610
-.L1612:
+	b	.L1602
+.L1604:
 	cmp	r3, #8
-	bls	.L1610
+	bls	.L1602
 	lsrs	r6, r6, #2
-	b	.L1610
-.L1682:
+	b	.L1602
+.L1674:
 	movs	r6, #1
-	b	.L1610
-.L1617:
+	b	.L1602
+.L1609:
 	movs	r3, #18
-	b	.L1721
-.L1615:
+	b	.L1713
+.L1607:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3156]	@ movhi
-.L1614:
+.L1606:
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L1683
+	cbz	r3, .L1675
 	adds	r6, r6, #32
 	uxth	r6, r6
-.L1683:
+.L1675:
 	movw	r7, #65535
-.L1620:
-	ldrh	r3, [r4, #176]
+.L1612:
+	ldrh	r3, [r4, #172]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1629
+	bne	.L1621
 	cmp	r7, r3
-	beq	.L1630
-	strh	r7, [r4, #176]	@ movhi
-.L1631:
-	ldrh	r0, [r4, #176]
+	beq	.L1622
+	strh	r7, [r4, #172]	@ movhi
+.L1623:
+	ldrh	r0, [r4, #172]
 	movw	r5, #65535
 	movs	r3, #0
-	strb	r3, [r4, #184]
+	strb	r3, [r4, #180]
 	cmp	r0, r5
-	beq	.L1629
+	beq	.L1621
 	bl	IsBlkInGcList
-	cbz	r0, .L1634
-	strh	r5, [r4, #176]	@ movhi
-.L1634:
-	ldrh	r2, [r4, #176]
+	cbz	r0, .L1626
+	strh	r5, [r4, #172]	@ movhi
+.L1626:
+	ldrh	r2, [r4, #172]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1629
-	ldr	r0, .L1725+16
+	beq	.L1621
+	ldr	r0, .L1717+16
 	bl	make_superblock
 	movs	r3, #0
-	ldrh	r2, [r4, #176]
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
+	ldrh	r2, [r4, #172]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
 	strh	r3, [r4, #3666]	@ movhi
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	ldrh	r3, [r3, r2, lsl #1]
 	strh	r3, [r4, #3668]	@ movhi
-.L1629:
-	ldrh	r3, [r4, #176]
-	ldrh	r2, [r4, #28]
+.L1621:
+	ldrh	r3, [r4, #172]
+	ldrh	r2, [r4, #24]
 	cmp	r2, r3
-	beq	.L1635
-	ldrh	r2, [r4, #80]
+	beq	.L1627
+	ldrh	r2, [r4, #76]
 	cmp	r2, r3
-	beq	.L1635
-	ldrh	r2, [r4, #128]
+	beq	.L1627
+	ldrh	r2, [r4, #124]
 	cmp	r2, r3
-	bne	.L1636
-.L1635:
+	bne	.L1628
+.L1627:
 	movw	r3, #65535
-	strh	r3, [r4, #176]	@ movhi
-.L1636:
-	ldr	r5, .L1725+4
+	strh	r3, [r4, #172]	@ movhi
+.L1628:
+	ldr	r5, .L1717+4
 	mov	r4, r5
-.L1672:
-	ldrh	r10, [r5, #176]
+.L1664:
+	ldrh	r10, [r5, #172]
 	movw	r3, #65535
 	cmp	r10, r3
-	bne	.L1637
+	bne	.L1629
 	movs	r3, #0
 	mov	fp, r3
 	str	r3, [r5, #3168]
-.L1638:
+.L1630:
 	ldrh	r8, [r4, #3164]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	cmp	r2, r10
-	strh	r2, [r4, #176]	@ movhi
-	bne	.L1639
+	strh	r2, [r4, #172]	@ movhi
+	bne	.L1631
 	movs	r3, #0
 	movs	r0, #8
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1593
-.L1621:
+	b	.L1585
+.L1613:
 	movs	r3, #0
-	ldrh	r2, [r4, #228]
+	ldrh	r2, [r4, #224]
 	str	r3, [r4, #3168]
 	ldrh	r3, [r4, #3156]
 	cmp	r2, r3
-	bls	.L1622
+	bls	.L1614
 	ldrh	r3, [r4, #3664]
-	cbnz	r3, .L1623
+	cbnz	r3, .L1615
 	ldr	r3, [r4, #2556]
-	ldr	r2, [r4, #2552]
+	ldr	r2, [r4, #2548]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1624
-.L1623:
+	bcs	.L1616
+.L1615:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1722:
+.L1714:
 	strh	r3, [r4, #3156]	@ movhi
 	bl	FtlReadRefresh
 	movs	r0, #0
 	bl	List_get_gc_head_node
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #4
-	bls	.L1622
-.L1724:
+	bls	.L1614
+.L1716:
 	ldrh	r0, [r4, #3664]
-	b	.L1593
-.L1624:
+	b	.L1585
+.L1616:
 	movs	r3, #18
-	b	.L1722
-.L1622:
+	b	.L1714
+.L1614:
 	ldrh	r0, [r4, #3664]
 	cmp	r0, #0
-	bne	.L1626
+	bne	.L1618
 	ldrh	r5, [r4, #2624]
 	add	r3, r5, r5, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3156]	@ movhi
 	bl	List_get_gc_head_node
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	uxth	r0, r0
-	ldrh	r1, [r4, #308]
+	ldrh	r1, [r4, #304]
 	ldrh	r2, [r3, r0, lsl #1]
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1627
-	ldrh	r3, [r4, #228]
+	ble	.L1619
+	ldrh	r3, [r4, #224]
 	subs	r5, r5, #1
 	cmp	r3, r5
-	blt	.L1627
+	blt	.L1619
 	bl	FtlReadRefresh
-	b	.L1724
-.L1726:
+	b	.L1716
+.L1718:
 	.align	2
-.L1725:
+.L1717:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC124
-	.word	.LANCHOR0+176
-.L1627:
+	.word	.LANCHOR0+172
+.L1619:
 	cmp	r2, #0
-	bne	.L1626
+	bne	.L1618
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r0, [r4, #228]
+	ldrh	r0, [r4, #224]
 	adds	r0, r0, #1
-	b	.L1593
-.L1630:
-	ldrh	r3, [r4, #226]
+	b	.L1585
+.L1622:
+	ldrh	r3, [r4, #222]
 	cmp	r3, r7
-	beq	.L1631
-	ldr	r2, [r4, #76]
+	beq	.L1623
+	ldr	r2, [r4, #72]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1632
-	strh	r7, [r4, #226]	@ movhi
-.L1632:
-	ldrh	r3, [r4, #226]
-	strh	r3, [r4, #176]	@ movhi
+	cbnz	r3, .L1624
+	strh	r7, [r4, #222]	@ movhi
+.L1624:
+	ldrh	r3, [r4, #222]
+	strh	r3, [r4, #172]	@ movhi
 	movw	r3, #65535
-	strh	r3, [r4, #226]	@ movhi
-	b	.L1631
-.L1639:
+	strh	r3, [r4, #222]	@ movhi
+	b	.L1623
+.L1631:
 	str	r0, [sp, #16]
 	mov	r0, r2
 	str	r2, [sp, #12]
@@ -11321,110 +11252,110 @@ rk_ftl_garbage_collect:
 	bl	IsBlkInGcList
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #16]
-	cbz	r0, .L1640
+	cbz	r0, .L1632
 	strh	r8, [r4, #3164]	@ movhi
-	b	.L1638
-.L1640:
-	ldrh	lr, [r4, #236]
+	b	.L1630
+.L1632:
+	ldrh	lr, [r4, #232]
 	uxth	r8, r8
-	ldrh	r1, [r4, #306]
+	ldrh	r1, [r4, #302]
 	uxth	r3, r3
-	ldr	r0, [r4, #76]
+	ldr	r0, [r4, #72]
 	strh	r8, [r4, #3164]	@ movhi
 	mul	r1, lr, r1
 	ldrh	ip, [r0, r3, lsl #1]
 	add	lr, r1, r1, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1642
+	bgt	.L1634
 	cmp	r8, #48
-	bls	.L1643
+	bls	.L1635
 	cmp	ip, #8
-	bls	.L1643
+	bls	.L1635
 	ldrh	ip, [r4, #3200]
 	cmp	ip, #35
-	bhi	.L1643
-.L1642:
+	bhi	.L1635
+.L1634:
 	strh	fp, [r4, #3164]	@ movhi
-.L1643:
+.L1635:
 	ldrh	r3, [r0, r3, lsl #1]
 	cmp	r1, r3
-	bgt	.L1644
+	bgt	.L1636
 	cmp	r7, r10
-	bne	.L1644
+	bne	.L1636
 	ldrh	r1, [r4, #3164]
 	cmp	r1, #3
-	bhi	.L1644
+	bhi	.L1636
 	movs	r3, #0
-	strh	r7, [r4, #176]	@ movhi
+	strh	r7, [r4, #172]	@ movhi
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1724
-.L1644:
-	cbnz	r3, .L1645
+	b	.L1716
+.L1636:
+	cbnz	r3, .L1637
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #3164]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1638
-.L1645:
+	b	.L1630
+.L1637:
 	movs	r3, #0
-	strb	r3, [r4, #184]
-	ldrh	r3, [r4, #28]
+	strb	r3, [r4, #180]
+	ldrh	r3, [r4, #24]
 	cmp	r3, r2
-	bne	.L1646
+	bne	.L1638
 	movw	r2, #717
-	ldr	r1, .L1727
-	ldr	r0, .L1727+4
+	ldr	r1, .L1719
+	ldr	r0, .L1719+4
 	bl	sftl_printk
-.L1646:
-	ldrh	r2, [r4, #176]
-	ldrh	r3, [r4, #80]
+.L1638:
+	ldrh	r2, [r4, #172]
+	ldrh	r3, [r4, #76]
 	cmp	r2, r3
-	bne	.L1647
+	bne	.L1639
 	movw	r2, #718
-	ldr	r1, .L1727
-	ldr	r0, .L1727+4
+	ldr	r1, .L1719
+	ldr	r0, .L1719+4
 	bl	sftl_printk
-.L1647:
-	ldrh	r2, [r4, #176]
-	ldrh	r3, [r4, #128]
+.L1639:
+	ldrh	r2, [r4, #172]
+	ldrh	r3, [r4, #124]
 	cmp	r2, r3
-	bne	.L1648
+	bne	.L1640
 	movw	r2, #719
-	ldr	r1, .L1727
-	ldr	r0, .L1727+4
+	ldr	r1, .L1719
+	ldr	r0, .L1719+4
 	bl	sftl_printk
-.L1648:
-	ldr	r0, .L1727+8
+.L1640:
+	ldr	r0, .L1719+8
 	bl	make_superblock
-	ldrh	r1, [r4, #176]
+	ldrh	r1, [r4, #172]
 	movs	r3, #0
-	ldr	r2, [r4, #76]
+	ldr	r2, [r4, #72]
 	strh	r3, [r4, #3666]	@ movhi
 	ldrh	r2, [r2, r1, lsl #1]
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
 	strh	r2, [r4, #3668]	@ movhi
-.L1637:
+.L1629:
 	movs	r3, #1
 	str	r3, [r4, #3276]
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	str	r3, [sp, #16]
 	cmp	r9, #0
-	beq	.L1649
+	beq	.L1641
 	ldr	r2, [sp, #16]
-	ldrh	r3, [r4, #236]
-	ldrh	r1, [r4, #176]
+	ldrh	r3, [r4, #232]
+	ldrh	r1, [r4, #172]
 	muls	r3, r2, r3
-	ldr	r2, [r4, #76]
+	ldr	r2, [r4, #72]
 	ldrh	r2, [r2, r1, lsl #1]
 	subs	r3, r3, r2
 	it	mi
 	addmi	r3, r3, #3
 	add	r6, r6, r3, asr #2
 	uxth	r6, r6
-.L1649:
-	ldrh	r3, [r4, #178]
+.L1641:
+	ldrh	r3, [r4, #174]
 	ldr	r1, [sp, #16]
 	adds	r2, r3, r6
 	cmp	r2, r1
@@ -11434,29 +11365,29 @@ rk_ftl_garbage_collect:
 	mov	r3, #0
 	it	gt
 	uxthgt	r6, r6
-.L1723:
+.L1715:
 	str	r3, [sp, #20]
 	ldrh	r3, [sp, #20]
 	cmp	r6, r3
-	bls	.L1660
+	bls	.L1652
 	ldr	r3, [sp, #20]
 	movw	r10, #65535
-	ldrh	r8, [r5, #178]
+	ldrh	r8, [r5, #174]
 	mov	fp, #20
-	ldrh	ip, [r5, #236]
+	ldrh	ip, [r5, #232]
 	ldr	r0, [r5, #3188]
 	add	r8, r8, r3
-	ldr	r3, .L1727+12
+	ldr	r3, .L1719+12
 	str	r3, [sp, #24]
 	movs	r3, #0
 	str	r3, [sp, #12]
-	b	.L1661
-.L1654:
+	b	.L1653
+.L1646:
 	ldr	r1, [sp, #24]
 	ldrh	r2, [r1, #2]!
 	cmp	r2, r10
 	str	r1, [sp, #24]
-	beq	.L1653
+	beq	.L1645
 	ldr	r1, [sp, #12]
 	orr	r2, r8, r2, lsl #10
 	mla	lr, fp, r1, r0
@@ -11465,47 +11396,47 @@ rk_ftl_garbage_collect:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1653:
+.L1645:
 	adds	r3, r3, #1
-.L1661:
+.L1653:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1654
+	bhi	.L1646
 	mov	fp, #0
-	ldrb	r2, [r5, #184]	@ zero_extendqisi2
+	ldrb	r2, [r5, #180]	@ zero_extendqisi2
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
-.L1655:
+.L1647:
 	ldr	r2, [sp, #12]
 	uxth	r3, fp
 	cmp	r2, r3
-	bhi	.L1659
+	bhi	.L1651
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	b	.L1723
-.L1659:
+	b	.L1715
+.L1651:
 	mov	r8, #20
 	ldr	r3, [r5, #3188]
 	mul	r8, r8, fp
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L1656
+	beq	.L1648
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1656
+	bne	.L1648
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1657
+	bne	.L1649
 	movw	r2, #753
-	ldr	r1, .L1727
-	ldr	r0, .L1727+4
+	ldr	r1, .L1719
+	ldr	r0, .L1719+4
 	str	r3, [sp, #24]
 	bl	sftl_printk
 	ldr	r3, [sp, #24]
-.L1657:
+.L1649:
 	movs	r2, #0
 	mov	r0, r3
 	add	r1, sp, #36
@@ -11515,7 +11446,7 @@ rk_ftl_garbage_collect:
 	add	r0, r0, r8
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1656
+	bne	.L1648
 	ldrh	r3, [r4, #3666]
 	movs	r2, #20
 	ldr	r1, [r4, #3172]
@@ -11543,7 +11474,7 @@ rk_ftl_garbage_collect:
 	str	r2, [r3, #12]
 	ldr	r3, [sp, #36]
 	str	r3, [r10, #12]
-	ldrh	r3, [r4, #128]
+	ldrh	r3, [r4, #124]
 	strh	r3, [r10, #2]	@ movhi
 	ldr	r3, [r4, #2596]
 	ldr	r0, [r4, #3188]
@@ -11553,141 +11484,141 @@ rk_ftl_garbage_collect:
 	adds	r3, r3, #1
 	str	r3, [r4, #3172]
 	bl	FtlGcBufAlloc
-	ldrb	r2, [r4, #135]	@ zero_extendqisi2
+	ldrb	r2, [r4, #131]	@ zero_extendqisi2
 	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L1658
-	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1656
-.L1658:
+	beq	.L1650
+	ldrh	r3, [r4, #128]
+	cbnz	r3, .L1648
+.L1650:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1656
-	ldr	r3, .L1727+16
+	cbz	r0, .L1648
+	ldr	r3, .L1719+16
 	movs	r2, #0
 	movw	r1, #65535
 	str	r2, [r3, #3276]
-	strh	r1, [r3, #176]	@ movhi
-	strh	r2, [r3, #178]	@ movhi
+	strh	r1, [r3, #172]	@ movhi
+	strh	r2, [r3, #174]	@ movhi
 	ldrh	r0, [r3, #3664]
-	b	.L1593
-.L1656:
+	b	.L1585
+.L1648:
 	add	fp, fp, #1
-	b	.L1655
-.L1660:
-	ldrh	r3, [r5, #178]
+	b	.L1647
+.L1652:
+	ldrh	r3, [r5, #174]
 	add	r6, r6, r3
 	ldr	r3, [sp, #16]
 	uxth	r6, r6
 	cmp	r3, r6
-	strh	r6, [r5, #178]	@ movhi
-	bhi	.L1662
+	strh	r6, [r5, #174]	@ movhi
+	bhi	.L1654
 	ldr	r3, [r5, #3172]
-	cbz	r3, .L1663
+	cbz	r3, .L1655
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1663
+	cbz	r0, .L1655
 	movs	r3, #0
 	ldrh	r0, [r5, #3664]
 	str	r3, [r5, #3276]
-	b	.L1593
-.L1663:
+	b	.L1585
+.L1655:
 	ldrh	r6, [r5, #3666]
-	cbnz	r6, .L1664
-	ldrh	r2, [r5, #176]
-	ldr	r3, [r5, #76]
+	cbnz	r6, .L1656
+	ldrh	r2, [r5, #172]
+	ldr	r3, [r5, #72]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbz	r3, .L1664
-.L1665:
+	cbz	r3, .L1656
+.L1657:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcs	.L1670
+	bcs	.L1662
 	movs	r2, #0
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
 	ldr	r0, [sp, #40]
 	adds	r3, r0, #1
-	beq	.L1666
+	beq	.L1658
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r5, #176]
+	ldrh	r3, [r5, #172]
 	cmp	r3, r0
-	bne	.L1666
-.L1670:
+	bne	.L1658
+.L1662:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcc	.L1664
-	ldrh	r2, [r5, #176]
+	bcc	.L1656
+	ldrh	r2, [r5, #172]
 	movs	r1, #0
-	ldr	r3, [r5, #76]
+	ldr	r3, [r5, #72]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	ldrh	r0, [r5, #176]
+	ldrh	r0, [r5, #172]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1664:
+.L1656:
 	movw	r3, #65535
-	strh	r3, [r5, #176]	@ movhi
-.L1662:
+	strh	r3, [r5, #172]	@ movhi
+.L1654:
 	movs	r3, #0
 	str	r3, [r5, #3276]
-	ldrh	r3, [r5, #228]
+	ldrh	r3, [r5, #224]
 	cmp	r3, #2
-	bhi	.L1671
-	ldrh	r6, [r5, #306]
-	b	.L1672
-.L1666:
+	bhi	.L1663
+	ldrh	r6, [r5, #302]
+	b	.L1664
+.L1658:
 	adds	r6, r6, #1
-	b	.L1665
-.L1671:
+	b	.L1657
+.L1663:
 	ldrh	r0, [r5, #3664]
 	cmp	r0, #0
-	bne	.L1593
+	bne	.L1585
 	adds	r0, r3, #1
-	b	.L1593
-.L1677:
+	b	.L1585
+.L1669:
 	movs	r0, #0
-	b	.L1593
-.L1599:
+	b	.L1585
+.L1591:
 	cmp	r9, #0
-	beq	.L1674
-.L1609:
-	ldrh	r2, [r4, #128]
+	beq	.L1666
+.L1601:
+	ldrh	r2, [r4, #124]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1686
-.L1675:
-	ldrh	r3, [r4, #226]
+	bne	.L1678
+.L1667:
+	ldrh	r3, [r4, #222]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1686
+	bne	.L1678
 	cmp	r7, r3
-	bne	.L1686
-	ldrh	r3, [r4, #176]
+	bne	.L1678
+	ldrh	r3, [r4, #172]
 	cmp	r3, r7
-	beq	.L1621
-.L1626:
+	beq	.L1613
+.L1618:
 	movw	r7, #65535
-.L1686:
+.L1678:
 	movs	r6, #1
-	b	.L1620
-.L1601:
+	b	.L1612
+.L1593:
 	cmp	r9, #0
-	beq	.L1674
+	beq	.L1666
 	movw	r7, #65535
-	b	.L1675
-.L1728:
+	b	.L1667
+.L1720:
 	.align	2
-.L1727:
+.L1719:
 	.word	.LANCHOR1+568
 	.word	.LC8
-	.word	.LANCHOR0+176
-	.word	.LANCHOR0+190
+	.word	.LANCHOR0+172
+	.word	.LANCHOR0+186
 	.word	.LANCHOR0
-.L1600:
+.L1592:
 	cmp	r9, #0
-	bne	.L1626
-	b	.L1674
-.L1676:
+	bne	.L1618
+	b	.L1666
+.L1668:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
@@ -11707,7 +11638,7 @@ FtlRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r3
-	ldr	r3, .L1765
+	ldr	r3, .L1757
 	cmp	r0, #16
 	.pad #60
 	sub	sp, sp, #60
@@ -11715,37 +11646,37 @@ FtlRead:
 	str	r2, [sp, #4]
 	ldr	r3, [r3]
 	str	r3, [sp, #52]
-	bne	.L1730
+	bne	.L1722
 	mov	r2, r10
 	ldr	r1, [sp, #4]
 	add	r0, r6, #256
 	bl	FtlVendorPartRead
 	mov	r5, r0
-.L1729:
-	ldr	r3, .L1765
+.L1721:
+	ldr	r3, .L1757
 	mov	r0, r5
 	ldr	r2, [sp, #52]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1751
+	beq	.L1743
 	bl	__stack_chk_fail
-.L1730:
-	ldr	r4, .L1765+4
-	ldr	r3, [r4, #344]
+.L1722:
+	ldr	r4, .L1757+4
+	ldr	r3, [r4, #340]
 	cmp	r1, r3
-	bcs	.L1754
+	bcs	.L1746
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bhi	.L1754
+	bhi	.L1746
 	adds	r2, r1, r2
 	cmp	r3, r2
 	str	r2, [sp, #12]
-	bcc	.L1754
-	ldr	r3, .L1765+8
+	bcc	.L1746
+	ldr	r3, .L1757+8
 	ldr	r5, [r3]
 	adds	r7, r5, #1
-	beq	.L1729
-	ldrh	r5, [r4, #262]
+	beq	.L1721
+	ldrh	r5, [r4, #258]
 	mov	r0, r6
 	mov	r9, #0
 	mov	r8, r9
@@ -11773,45 +11704,45 @@ FtlRead:
 	ldr	r3, [r4, #2560]
 	add	r3, r3, r2
 	str	r3, [r4, #2560]
-.L1732:
+.L1724:
 	ldr	r3, [sp, #8]
-	cbnz	r3, .L1749
-	ldr	r3, .L1765+4
+	cbnz	r3, .L1741
+	ldr	r3, .L1757+4
 	ldrh	r2, [r3, #3210]
-	cbnz	r2, .L1750
-	ldrh	r3, [r3, #228]
+	cbnz	r2, .L1742
+	ldrh	r3, [r3, #224]
 	cmp	r3, #31
-	bhi	.L1729
-.L1750:
+	bhi	.L1721
+.L1742:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1729
-.L1749:
+	b	.L1721
+.L1741:
 	movs	r2, #0
 	add	r1, sp, #48
 	mov	r0, r7
 	bl	log2phys
 	ldr	r2, [sp, #48]
 	adds	r0, r2, #1
-	bne	.L1733
+	bne	.L1725
 	mov	fp, #0
-.L1734:
-	ldrh	r0, [r4, #262]
+.L1726:
+	ldrh	r0, [r4, #258]
 	cmp	fp, r0
-	bcc	.L1736
-.L1737:
+	bcc	.L1728
+.L1729:
 	ldr	r3, [sp, #8]
 	adds	r7, r7, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #8]
-	beq	.L1741
-	ldrh	r3, [r4, #236]
+	beq	.L1733
+	ldrh	r3, [r4, #232]
 	cmp	r8, r3, lsl #2
-	bne	.L1732
-.L1741:
+	bne	.L1724
+.L1733:
 	cmp	r8, #0
-	beq	.L1732
+	beq	.L1724
 	movs	r2, #0
 	mov	r1, r8
 	ldr	r0, [r4, #3292]
@@ -11825,7 +11756,7 @@ FtlRead:
 	ldr	r3, [sp, #28]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1748:
+.L1740:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, fp
@@ -11833,20 +11764,20 @@ FtlRead:
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1743
+	bne	.L1735
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3316]
 	cmp	r1, r2
-	bne	.L1744
+	bne	.L1736
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1764:
+.L1756:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1744:
+.L1736:
 	ldr	ip, [r4, #3292]
 	add	r2, ip, r3
 	ldr	r0, [r2, #12]
@@ -11866,41 +11797,41 @@ FtlRead:
 	streq	r1, [r4, #2716]
 	ldr	r3, [ip, r3]
 	cmp	r3, #256
-	bne	.L1747
+	bne	.L1739
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1747:
+.L1739:
 	add	fp, fp, #1
 	cmp	r8, fp
-	bne	.L1748
+	bne	.L1740
 	mov	r8, #0
-	b	.L1732
-.L1736:
+	b	.L1724
+.L1728:
 	mla	r0, r0, r7, fp
 	cmp	r6, r0
-	bhi	.L1735
+	bhi	.L1727
 	ldr	r3, [sp, #12]
 	cmp	r3, r0
-	bls	.L1735
+	bls	.L1727
 	subs	r0, r0, r6
 	mov	r2, #512
 	movs	r1, #0
 	add	r0, r10, r0, lsl #9
 	bl	ftl_memset
-.L1735:
+.L1727:
 	add	fp, fp, #1
-	b	.L1734
-.L1733:
+	b	.L1726
+.L1725:
 	ldr	r3, [r4, #3292]
 	movs	r1, #20
-	ldrh	fp, [r4, #262]
+	ldrh	fp, [r4, #258]
 	mla	r3, r1, r8, r3
 	str	r2, [r3, #4]
 	ldr	r2, [sp, #16]
 	cmp	r7, r2
-	bne	.L1738
+	bne	.L1730
 	ldr	r2, [r4, #3316]
 	mov	r1, fp
 	mov	r0, r6
@@ -11917,10 +11848,10 @@ FtlRead:
 	cmp	r3, fp
 	str	r3, [sp, #28]
 	ldr	r3, [sp, #32]
-	bne	.L1739
+	bne	.L1731
 	str	r10, [r3, #8]
-.L1739:
-	ldrh	r2, [r4, #316]
+.L1731:
+	ldrh	r2, [r4, #312]
 	ldr	r1, [r4, #3340]
 	str	r7, [r3, #16]
 	mul	r2, r8, r2
@@ -11928,52 +11859,52 @@ FtlRead:
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1737
-.L1738:
+	b	.L1729
+.L1730:
 	ldr	r2, [sp, #20]
 	cmp	r7, r2
-	bne	.L1740
+	bne	.L1732
 	ldr	r2, [r4, #3320]
 	ldr	r1, [sp, #12]
 	str	r2, [r3, #8]
 	mul	r2, fp, r7
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1739
-.L1763:
+	bne	.L1731
+.L1755:
 	subs	r2, r2, r6
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1739
-.L1740:
+	b	.L1731
+.L1732:
 	mul	r2, r7, fp
-	b	.L1763
-.L1743:
+	b	.L1755
+.L1735:
 	ldr	r0, [sp, #20]
 	cmp	r0, r1
-	bne	.L1744
+	bne	.L1736
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3320]
 	cmp	r1, r2
-	bne	.L1744
+	bne	.L1736
 	str	r3, [sp, #44]
-	ldrh	r0, [r4, #262]
+	ldrh	r0, [r4, #258]
 	ldr	r3, [sp, #20]
 	ldr	r2, [sp, #40]
 	muls	r0, r3, r0
 	subs	r0, r0, r6
 	add	r0, r10, r0, lsl #9
-	b	.L1764
-.L1754:
+	b	.L1756
+.L1746:
 	mov	r5, #-1
-	b	.L1729
-.L1751:
+	b	.L1721
+.L1743:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1766:
+.L1758:
 	.align	2
-.L1765:
+.L1757:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -12016,38 +11947,38 @@ FtlWrite:
 	str	r3, [sp, #12]
 	cmp	r0, #16
 	mov	r10, r1
-	ldr	r3, .L1823
+	ldr	r3, .L1815
 	str	r2, [sp, #8]
 	ldr	r3, [r3]
 	str	r3, [sp, #68]
-	bne	.L1769
+	bne	.L1761
 	ldr	r2, [sp, #12]
 	add	r0, r10, #256
 	ldr	r1, [sp, #8]
 	bl	FtlVendorPartWrite
-.L1768:
-	ldr	r3, .L1823
+.L1760:
+	ldr	r3, .L1815
 	ldr	r2, [sp, #68]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1806
+	beq	.L1798
 	bl	__stack_chk_fail
-.L1769:
-	ldr	r5, .L1823+4
-	ldr	r3, [r5, #344]
+.L1761:
+	ldr	r5, .L1815+4
+	ldr	r3, [r5, #340]
 	cmp	r1, r3
-	bcs	.L1809
+	bcs	.L1801
 	ldr	r2, [sp, #8]
 	cmp	r2, r3
-	bhi	.L1809
+	bhi	.L1801
 	adds	r6, r1, r2
 	cmp	r3, r6
-	bcc	.L1809
-	ldr	r4, .L1823+8
+	bcc	.L1801
+	ldr	r4, .L1815+8
 	ldr	r0, [r4]
 	adds	r7, r0, #1
-	beq	.L1768
-	ldrh	r7, [r5, #262]
+	beq	.L1760
+	ldrh	r7, [r5, #258]
 	mov	r3, #2048
 	str	r3, [r5, #3672]
 	mov	r0, r10
@@ -12072,68 +12003,68 @@ FtlWrite:
 	add	r3, r3, r2
 	str	r3, [r5, #2568]
 	ldr	r3, [r4, #8]
-	cbz	r3, .L1811
-	ldrh	r2, [r5, #32]
-	add	r3, r5, #28
-	adds	r5, r5, #80
+	cbz	r3, .L1803
+	ldrh	r2, [r5, #28]
+	add	r3, r5, #24
+	adds	r5, r5, #76
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1771:
+.L1763:
 	ldr	r7, [sp, #4]
-	ldr	r4, .L1823+4
-.L1772:
+	ldr	r4, .L1815+4
+.L1764:
 	ldr	r3, [sp]
-	cbnz	r3, .L1801
+	cbnz	r3, .L1793
 	mov	r0, r3
 	ldr	r1, [sp, #24]
 	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #5
-	bls	.L1802
-.L1804:
+	bls	.L1794
+.L1796:
 	movs	r0, #0
-	b	.L1768
-.L1811:
-	adds	r5, r5, #28
-	b	.L1771
-.L1801:
+	b	.L1760
+.L1803:
+	adds	r5, r5, #24
+	b	.L1763
+.L1793:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	cmp	r2, r3
-	bcc	.L1773
+	bcc	.L1765
 	movw	r2, #1041
-	ldr	r1, .L1823+12
-	ldr	r0, .L1823+16
+	ldr	r1, .L1815+12
+	ldr	r0, .L1815+16
 	bl	sftl_printk
-.L1773:
+.L1765:
 	ldrh	r2, [r5, #4]
-	cbnz	r2, .L1774
-	ldr	r3, .L1823+20
-	ldr	r6, .L1823+8
+	cbnz	r2, .L1766
+	ldr	r3, .L1815+20
+	ldr	r6, .L1815+8
 	cmp	r5, r3
-	bne	.L1775
-	ldrh	r8, [r4, #84]
+	bne	.L1767
+	ldrh	r8, [r4, #80]
 	cmp	r8, #0
-	bne	.L1776
+	bne	.L1768
 	add	r0, r5, #52
 	bl	allocate_new_data_superblock
 	str	r8, [r6, #8]
-.L1776:
-	ldr	r5, .L1823+20
-	ldr	r0, .L1823+20
+.L1768:
+	ldr	r5, .L1815+20
+	ldr	r0, .L1815+20
 	bl	allocate_new_data_superblock
 	ldr	r2, [r6, #8]
 	add	r3, r5, #52
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1777:
+.L1769:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1774
+	cbnz	r3, .L1766
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1774:
+.L1766:
 	ldrh	r2, [r5, #4]
 	ldr	r3, [sp]
 	cmp	r2, r3
@@ -12144,22 +12075,22 @@ FtlWrite:
 	cmp	r2, r3
 	it	cs
 	movcs	r2, r3
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1778
+	bcc	.L1770
 	movw	r2, #1074
-	ldr	r1, .L1823+12
-	ldr	r0, .L1823+16
+	ldr	r1, .L1815+12
+	ldr	r0, .L1815+16
 	bl	sftl_printk
-.L1778:
+.L1770:
 	mov	fp, #0
-.L1779:
+.L1771:
 	ldr	r3, [sp, #36]
 	cmp	fp, r3
-	bne	.L1799
-.L1780:
+	bne	.L1791
+.L1772:
 	mov	r3, r5
 	movs	r2, #0
 	mov	r1, fp
@@ -12167,30 +12098,30 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [sp]
 	cmp	fp, r3
-	bls	.L1800
+	bls	.L1792
 	mov	r2, #1152
-	ldr	r1, .L1823+12
-	ldr	r0, .L1823+16
+	ldr	r1, .L1815+12
+	ldr	r0, .L1815+16
 	bl	sftl_printk
-.L1800:
+.L1792:
 	ldr	r3, [sp]
 	sub	r3, r3, fp
 	str	r3, [sp]
-	b	.L1772
-.L1775:
+	b	.L1764
+.L1767:
 	str	r2, [r6, #8]
-	ldrh	r2, [r4, #32]
-	cbnz	r2, .L1814
+	ldrh	r2, [r4, #28]
+	cbnz	r2, .L1806
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1777
-.L1814:
+	b	.L1769
+.L1806:
 	mov	r5, r3
-	b	.L1774
-.L1799:
+	b	.L1766
+.L1791:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1780
+	beq	.L1772
 	movs	r2, #0
 	add	r1, sp, #44
 	mov	r0, r7
@@ -12199,7 +12130,7 @@ FtlWrite:
 	mov	r0, r5
 	mul	r8, r8, fp
 	bl	get_new_active_ppa
-	ldrh	r2, [r4, #316]
+	ldrh	r2, [r4, #312]
 	ldr	r3, [r4, #3300]
 	mul	r1, r2, fp
 	add	r3, r3, r8
@@ -12217,11 +12148,11 @@ FtlWrite:
 	bl	ftl_memset
 	ldr	r3, [sp, #4]
 	cmp	r7, r3
-	beq	.L1781
+	beq	.L1773
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
-	bne	.L1819
-	ldrh	r2, [r4, #262]
+	bne	.L1811
+	ldrh	r2, [r4, #258]
 	ldr	r3, [sp, #8]
 	smulbb	r2, r2, r7
 	add	r6, r10, r3
@@ -12229,9 +12160,9 @@ FtlWrite:
 	str	r3, [sp, #16]
 	subs	r6, r6, r2
 	uxth	r6, r6
-	b	.L1784
-.L1781:
-	ldrh	r6, [r4, #262]
+	b	.L1776
+.L1773:
+	ldrh	r6, [r4, #258]
 	mov	r0, r10
 	mov	r1, r6
 	bl	__aeabi_uidivmod
@@ -12241,11 +12172,11 @@ FtlWrite:
 	cmp	r6, r3
 	it	cs
 	movcs	r6, r3
-.L1784:
-	ldrh	r3, [r4, #262]
+.L1776:
+	ldrh	r3, [r4, #258]
 	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	bne	.L1785
+	bne	.L1777
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	itte	ne
@@ -12258,16 +12189,16 @@ FtlWrite:
 	streq	r2, [r3, #8]
 	addne	r6, r2, r6, lsl #9
 	strne	r6, [r3, #8]
-.L1787:
+.L1779:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r4, #236]
+	ldrh	r3, [r4, #232]
 	cmp	r2, r3
-	bcc	.L1796
+	bcc	.L1788
 	movw	r2, #1143
-	ldr	r1, .L1823+12
-	ldr	r0, .L1823+16
+	ldr	r1, .L1815+12
+	ldr	r0, .L1815+16
 	bl	sftl_printk
-.L1796:
+.L1788:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
@@ -12286,17 +12217,17 @@ FtlWrite:
 	str	r3, [r9, #12]
 	ldrh	r3, [r5]
 	strh	r3, [r9, #2]	@ movhi
-	b	.L1779
-.L1824:
+	b	.L1771
+.L1816:
 	.align	2
-.L1823:
+.L1815:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR1+591
 	.word	.LC8
-	.word	.LANCHOR0+28
-.L1785:
+	.word	.LANCHOR0+24
+.L1777:
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	ite	eq
@@ -12306,7 +12237,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #44]
 	adds	r0, r3, #1
-	beq	.L1790
+	beq	.L1782
 	str	r3, [sp, #52]
 	movs	r1, #1
 	ldr	r3, [r4, #3300]
@@ -12321,58 +12252,58 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #48]
 	adds	r1, r3, #1
-	bne	.L1791
+	bne	.L1783
 	ldr	r2, [r4, #2716]
-	ldr	r0, .L1825
+	ldr	r0, .L1817
 	adds	r2, r2, #1
 	str	r2, [r4, #2716]
 	mov	r2, r7
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1794:
+.L1786:
 	ldr	r3, [sp, #4]
 	lsls	r2, r6, #9
 	cmp	r7, r3
-	bne	.L1795
+	bne	.L1787
 	ldr	r3, [r4, #3300]
 	ldr	r1, [sp, #12]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #16]
 	add	r0, r0, r3, lsl #9
-.L1821:
+.L1813:
 	bl	ftl_memcpy
-	b	.L1787
-.L1791:
+	b	.L1779
+.L1783:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1793
+	beq	.L1785
 	ldr	r3, [r4, #2716]
 	mov	r2, r7
-	ldr	r0, .L1825+4
+	ldr	r0, .L1817+4
 	adds	r3, r3, #1
 	str	r3, [r4, #2716]
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1793:
+.L1785:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1794
+	beq	.L1786
 	mov	r2, #1128
-	ldr	r1, .L1825+8
-	ldr	r0, .L1825+12
+	ldr	r1, .L1817+8
+	ldr	r0, .L1817+12
 	bl	sftl_printk
-	b	.L1794
-.L1790:
+	b	.L1786
+.L1782:
 	ldr	r3, [r4, #3300]
 	movs	r1, #0
-	ldrh	r2, [r4, #314]
+	ldrh	r2, [r4, #310]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1794
-.L1795:
-	ldrh	r1, [r4, #262]
+	b	.L1786
+.L1787:
+	ldrh	r1, [r4, #258]
 	ldr	r0, [sp, #12]
 	ldr	r3, [r4, #3300]
 	muls	r1, r7, r1
@@ -12380,32 +12311,32 @@ FtlWrite:
 	sub	r1, r1, r10
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1821
-.L1819:
+	b	.L1813
+.L1811:
 	ldr	r3, [r4, #3300]
 	ldr	r2, [sp, #12]
 	add	r8, r8, r3
-	ldrh	r3, [r4, #262]
+	ldrh	r3, [r4, #258]
 	muls	r3, r7, r3
 	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
 	str	r3, [r8, #8]
-	b	.L1787
-.L1802:
+	b	.L1779
+.L1794:
 	mov	r5, #256
 	movw	r6, #65535
-.L1805:
-	ldrh	r3, [r4, #176]
+.L1797:
+	ldrh	r3, [r4, #172]
 	cmp	r3, r6
-	bne	.L1803
-	ldrh	r3, [r4, #226]
+	bne	.L1795
+	ldrh	r3, [r4, #222]
 	cmp	r3, r6
-	bne	.L1803
+	bne	.L1795
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1803:
+.L1795:
 	movs	r1, #1
 	movs	r3, #128
 	mov	r0, r1
@@ -12415,22 +12346,22 @@ FtlWrite:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #2
-	bhi	.L1804
+	bhi	.L1796
 	subs	r5, r5, #1
-	bne	.L1805
-	b	.L1804
-.L1809:
+	bne	.L1797
+	b	.L1796
+.L1801:
 	mov	r0, #-1
-	b	.L1768
-.L1806:
+	b	.L1760
+.L1798:
 	add	sp, sp, #76
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1826:
+.L1818:
 	.align	2
-.L1825:
+.L1817:
 	.word	.LC125
 	.word	.LC126
 	.word	.LANCHOR1+591
@@ -12469,10 +12400,10 @@ FtlLoadSysInfo:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #16
 	movs	r1, #0
-	ldr	r4, .L1858
+	ldr	r4, .L1850
 	ldr	r3, [r4, #3304]
-	ldrh	r2, [r4, #244]
-	ldr	r0, [r4, #76]
+	ldrh	r2, [r4, #240]
+	ldr	r0, [r4, #72]
 	str	r3, [r4, #3464]
 	ldr	r3, [r4, #3336]
 	lsls	r2, r2, #1
@@ -12481,32 +12412,32 @@ FtlLoadSysInfo:
 	ldrh	r0, [r4, #2628]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1829
-.L1840:
+	bne	.L1821
+.L1832:
 	mov	r0, #-1
-.L1828:
+.L1820:
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1829:
+.L1821:
 	movs	r1, #1
-	ldr	r8, .L1858+20
+	ldr	r8, .L1850+20
 	bl	FtlGetLastWrittenPage
-	ldr	r9, .L1858+4
+	ldr	r9, .L1850+4
 	add	r7, r4, #3456
 	ldrsh	r6, [r4, #2628]
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #2630]	@ movhi
-.L1831:
+.L1823:
 	cmp	r5, #0
-	bge	.L1837
-	movw	r2, #1465
-	ldr	r1, .L1858+4
-	ldr	r0, .L1858+8
+	bge	.L1829
+	movw	r2, #1467
+	ldr	r1, .L1850+4
+	ldr	r0, .L1850+8
 	bl	sftl_printk
-	b	.L1836
-.L1837:
+	b	.L1828
+.L1829:
 	orr	r3, r5, r6, lsl #10
 	movs	r2, #1
 	mov	r1, r2
@@ -12518,15 +12449,15 @@ FtlLoadSysInfo:
 	ldr	r3, [r4, #3468]
 	ldr	r10, [r3, #12]
 	cmp	r10, #0
-	beq	.L1832
+	beq	.L1824
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1832
-	ldrh	r1, [r4, #314]
+	beq	.L1824
+	ldrh	r1, [r4, #310]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	cmp	r10, r0
-	beq	.L1832
+	beq	.L1824
 	ldrh	r3, [r4, #2632]
 	mov	r2, r6
 	str	r0, [sp, #8]
@@ -12534,190 +12465,180 @@ FtlLoadSysInfo:
 	str	r10, [sp, #4]
 	str	r3, [sp]
 	mov	r3, r5
-	ldr	r0, .L1858+12
+	ldr	r0, .L1850+12
 	bl	sftl_printk
-	cbnz	r5, .L1833
+	cbnz	r5, .L1825
 	ldrh	r3, [r4, #2632]
 	cmp	r6, r3
-	beq	.L1833
-	ldrh	r5, [r4, #308]
+	beq	.L1825
+	ldrh	r5, [r4, #304]
 	sxth	r6, r3
-.L1835:
+.L1827:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L1831
-.L1833:
+	b	.L1823
+.L1825:
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1832:
+.L1824:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1835
+	beq	.L1827
 	ldr	r3, [r4, #3304]
 	ldr	r3, [r3]
 	cmp	r3, r8
-	bne	.L1835
+	bne	.L1827
 	ldr	r3, [r4, #3336]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L1835
-.L1836:
-	ldrh	r3, [r4, #244]
-	ldrh	r2, [r4, #314]
+	bne	.L1827
+.L1828:
+	ldrh	r3, [r4, #240]
+	ldrh	r2, [r4, #310]
 	adds	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1839
-	movw	r2, #1467
-	ldr	r1, .L1858+4
-	ldr	r0, .L1858+8
+	bcs	.L1831
+	movw	r2, #1469
+	ldr	r1, .L1850+4
+	ldr	r0, .L1850+8
 	bl	sftl_printk
-.L1839:
+.L1831:
 	movs	r2, #48
 	ldr	r1, [r4, #3464]
-	ldr	r0, .L1858+16
+	ldr	r0, .L1850+16
 	bl	ftl_memcpy
-	ldrh	r2, [r4, #244]
+	ldrh	r2, [r4, #240]
 	ldr	r1, [r4, #3464]
-	ldr	r0, [r4, #76]
+	ldr	r0, [r4, #72]
 	lsls	r2, r2, #1
 	adds	r1, r1, #48
 	bl	ftl_memcpy
-	ldrh	r1, [r4, #244]
-	ldr	r3, [r4, #3464]
-	ldr	r0, [r4, #24]
-	lsrs	r2, r1, #3
-	adds	r1, r1, #24
-	lsls	r1, r1, #1
-	adds	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r1, r3
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2472]
-	ldr	r3, .L1858+20
+	ldr	r2, [r4, #2468]
+	ldr	r3, .L1850+20
 	cmp	r2, r3
-	bne	.L1840
-	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
-	ldrh	r3, [r4, #258]
-	ldrh	r5, [r4, #2480]
+	bne	.L1832
+	ldrb	r2, [r4, #2478]	@ zero_extendqisi2
+	ldrh	r3, [r4, #254]
+	ldrh	r5, [r4, #2476]
 	cmp	r2, r3
 	strh	r5, [r4, #2634]	@ movhi
-	bne	.L1840
-	ldrh	r3, [r4, #306]
-	ldrh	r2, [r4, #262]
-	ldr	r6, [r4, #248]
-	ldrh	r0, [r4, #362]
+	bne	.L1832
+	ldrh	r3, [r4, #302]
+	ldrh	r2, [r4, #258]
+	ldr	r6, [r4, #244]
+	ldrh	r0, [r4, #358]
 	muls	r3, r5, r3
 	str	r5, [r4, #3676]
-	ldrh	r1, [r4, #236]
+	ldrh	r1, [r4, #232]
 	subs	r0, r6, r0
 	subs	r0, r0, r5
 	str	r3, [r4, #2556]
 	muls	r3, r2, r3
-	str	r3, [r4, #344]
+	str	r3, [r4, #340]
 	bl	__aeabi_uidiv
 	cmp	r5, r6
 	strh	r0, [r4, #2624]	@ movhi
-	bls	.L1841
-	movw	r2, #1489
-	ldr	r1, .L1858+4
-	ldr	r0, .L1858+8
+	bls	.L1833
+	movw	r2, #1491
+	ldr	r1, .L1850+4
+	ldr	r0, .L1850+8
 	bl	sftl_printk
-.L1841:
-	ldrh	r3, [r4, #2488]
-	ldrh	r1, [r4, #2486]
+.L1833:
+	ldrh	r3, [r4, #2484]
+	ldrh	r1, [r4, #2482]
 	lsrs	r2, r3, #6
 	and	r3, r3, #63
-	strb	r3, [r4, #34]
-	strh	r2, [r4, #30]	@ movhi
-	ldrh	r2, [r4, #2490]
-	ldrb	r3, [r4, #2483]	@ zero_extendqisi2
-	strh	r1, [r4, #28]	@ movhi
-	strh	r2, [r4, #80]	@ movhi
-	ldrh	r2, [r4, #2492]
-	strb	r3, [r4, #36]
+	strb	r3, [r4, #30]
+	strh	r2, [r4, #26]	@ movhi
+	ldrh	r2, [r4, #2486]
+	ldrb	r3, [r4, #2479]	@ zero_extendqisi2
+	strh	r1, [r4, #24]	@ movhi
+	strh	r2, [r4, #76]	@ movhi
+	ldrh	r2, [r4, #2488]
+	strb	r3, [r4, #32]
 	movw	r3, #65535
-	strh	r3, [r4, #176]	@ movhi
+	strh	r3, [r4, #172]	@ movhi
 	movs	r3, #0
-	strh	r3, [r4, #178]	@ movhi
+	strh	r3, [r4, #174]	@ movhi
 	lsrs	r0, r2, #6
 	and	r2, r2, #63
-	strb	r2, [r4, #86]
-	ldrb	r2, [r4, #2484]	@ zero_extendqisi2
-	strh	r0, [r4, #82]	@ movhi
-	strb	r3, [r4, #182]
-	strb	r2, [r4, #88]
-	ldrh	r2, [r4, #2494]
-	strb	r3, [r4, #184]
+	strb	r2, [r4, #82]
+	ldrb	r2, [r4, #2480]	@ zero_extendqisi2
+	strh	r0, [r4, #78]	@ movhi
+	strb	r3, [r4, #178]
+	strb	r2, [r4, #84]
+	ldrh	r2, [r4, #2490]
+	strb	r3, [r4, #180]
 	str	r3, [r4, #2580]
-	strh	r2, [r4, #128]	@ movhi
-	ldrh	r2, [r4, #2496]
+	strh	r2, [r4, #124]	@ movhi
+	ldrh	r2, [r4, #2492]
 	str	r3, [r4, #2568]
 	str	r3, [r4, #2560]
 	str	r3, [r4, #2576]
 	lsrs	r0, r2, #6
 	and	r2, r2, #63
-	strb	r2, [r4, #134]
-	ldrb	r2, [r4, #2485]	@ zero_extendqisi2
+	strb	r2, [r4, #130]
+	ldrb	r2, [r4, #2481]	@ zero_extendqisi2
 	str	r3, [r4, #2604]
-	strh	r0, [r4, #130]	@ movhi
-	strb	r2, [r4, #136]
-	ldr	r2, [r4, #2504]
+	strh	r0, [r4, #126]	@ movhi
+	strb	r2, [r4, #132]
+	ldr	r2, [r4, #2500]
 	str	r2, [r4, #2600]
 	str	r3, [r4, #2616]
 	ldr	r2, [r4, #2592]
 	str	r3, [r4, #2572]
-	ldr	r3, [r4, #2512]
+	ldr	r3, [r4, #2508]
 	cmp	r3, r2
 	ldr	r2, [r4, #2596]
 	it	hi
 	strhi	r3, [r4, #2592]
-	ldr	r3, [r4, #2508]
+	ldr	r3, [r4, #2504]
 	cmp	r3, r2
 	it	hi
 	strhi	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1844
-	ldr	r0, .L1858+24
+	beq	.L1836
+	ldr	r0, .L1850+24
 	bl	make_superblock
-.L1844:
-	ldrh	r2, [r4, #80]
+.L1836:
+	ldrh	r2, [r4, #76]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1845
-	ldr	r0, .L1858+28
+	beq	.L1837
+	ldr	r0, .L1850+28
 	bl	make_superblock
-.L1845:
-	ldrh	r2, [r4, #128]
+.L1837:
+	ldrh	r2, [r4, #124]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1846
-	ldr	r0, .L1858+32
+	beq	.L1838
+	ldr	r0, .L1850+32
 	bl	make_superblock
-.L1846:
-	ldrh	r2, [r4, #176]
+.L1838:
+	ldrh	r2, [r4, #172]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1847
-	ldr	r0, .L1858+36
+	beq	.L1839
+	ldr	r0, .L1850+36
 	bl	make_superblock
-.L1847:
+.L1839:
 	movs	r0, #0
-	b	.L1828
-.L1859:
+	b	.L1820
+.L1851:
 	.align	2
-.L1858:
+.L1850:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+600
 	.word	.LC8
 	.word	.LC127
-	.word	.LANCHOR0+2472
+	.word	.LANCHOR0+2468
 	.word	1179929683
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
-	.word	.LANCHOR0+128
-	.word	.LANCHOR0+176
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
+	.word	.LANCHOR0+124
+	.word	.LANCHOR0+172
 	.fnend
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	1
@@ -12741,7 +12662,7 @@ FtlMapTblRecovery:
 	ldrh	r10, [r0, #6]
 	str	r3, [sp, #8]
 	ldr	r3, [r0, #16]
-	ldr	r4, .L1901
+	ldr	r4, .L1893
 	ldr	r9, [r0, #12]
 	lsl	r2, r10, #2
 	str	r3, [sp, #16]
@@ -12762,16 +12683,16 @@ FtlMapTblRecovery:
 	mov	r8, r3
 	str	r3, [r5, #32]
 	str	r3, [r5, #28]
-.L1861:
+.L1853:
 	ldr	r3, [sp, #12]
 	sxth	r6, r8
 	cmp	r6, r3
-	bge	.L1880
+	bge	.L1872
 	ldr	r3, [sp, #12]
 	lsls	r7, r6, #1
 	subs	r3, r3, #1
 	cmp	r6, r3
-	bne	.L1862
+	bne	.L1854
 	movs	r1, #1
 	ldrh	r0, [r9, r6, lsl #1]
 	bl	FtlGetLastWrittenPage
@@ -12785,22 +12706,22 @@ FtlMapTblRecovery:
 	strh	r0, [r5, #2]	@ movhi
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r5, #28]
-.L1863:
+.L1855:
 	ldr	r3, [sp, #12]
 	sxth	r9, r8
 	adds	r2, r3, #1
 	cmp	r9, r2
-	blt	.L1866
-.L1880:
+	blt	.L1858
+.L1872:
 	mov	r0, r5
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r5, #2]
-	ldrh	r3, [r4, #308]
+	ldrh	r3, [r4, #304]
 	cmp	r2, r3
-	bne	.L1868
+	bne	.L1860
 	mov	r0, r5
 	bl	ftl_map_blk_alloc_new_blk
-.L1868:
+.L1860:
 	mov	r0, r5
 	bl	ftl_map_blk_gc
 	mov	r0, r5
@@ -12809,9 +12730,9 @@ FtlMapTblRecovery:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1866:
+.L1858:
 	ldrh	r2, [r7]
-	ldr	r0, .L1901+4
+	ldr	r0, .L1893+4
 	orr	r2, r9, r2, lsl #10
 	str	r2, [r4, #3460]
 	movs	r2, #1
@@ -12820,32 +12741,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #16]
-	cbz	r2, .L1864
+	cbz	r2, .L1856
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1864
-	ldrh	r1, [r4, #314]
+	beq	.L1856
+	ldrh	r1, [r4, #310]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #16]
 	cmp	r2, r0
-	beq	.L1864
+	beq	.L1856
 	str	r0, [sp, #4]
 	mov	r3, r9
 	str	r2, [sp]
 	mov	r2, r6
-	ldr	r1, .L1901+8
-	ldr	r0, .L1901+12
+	ldr	r1, .L1893+8
+	ldr	r0, .L1893+12
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1864:
+.L1856:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1865
+	beq	.L1857
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1865
+	bls	.L1857
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12853,17 +12774,17 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1865:
+.L1857:
 	add	r8, r8, #1
-	b	.L1863
-.L1862:
+	b	.L1855
+.L1854:
 	ldr	r3, [r4, #3304]
-	ldr	r0, .L1901+4
+	ldr	r0, .L1893+4
 	str	r3, [r4, #3464]
 	add	r3, r9, r7
 	ldrh	r2, [r9, r6, lsl #1]
 	str	r3, [sp, #20]
-	ldrh	r3, [r4, #308]
+	ldrh	r3, [r4, #304]
 	subs	r3, r3, #1
 	orr	r3, r3, r2, lsl #10
 	movs	r2, #1
@@ -12872,24 +12793,24 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1882
+	beq	.L1874
 	ldrh	r2, [fp]
 	ldrh	r3, [r5, #4]
 	cmp	r2, r3
-	bne	.L1882
+	bne	.L1874
 	ldrh	r2, [fp, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	beq	.L1870
-.L1882:
+	beq	.L1862
+.L1874:
 	movs	r7, #0
-.L1871:
-	ldrh	r2, [r4, #308]
+.L1863:
+	ldrh	r2, [r4, #304]
 	sxth	r3, r7
 	cmp	r3, r2
-	bge	.L1878
+	bge	.L1870
 	ldr	r2, [sp, #20]
-	ldr	r0, .L1901+4
+	ldr	r0, .L1893+4
 	str	r3, [sp, #28]
 	ldrh	r2, [r2]
 	orr	r2, r3, r2, lsl #10
@@ -12900,32 +12821,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #24]
-	cbz	r2, .L1875
+	cbz	r2, .L1867
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1875
-	ldrh	r1, [r4, #314]
+	beq	.L1867
+	ldrh	r1, [r4, #310]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #24]
 	cmp	r2, r0
-	beq	.L1875
+	beq	.L1867
 	str	r0, [sp, #4]
 	str	r2, [sp]
 	mov	r2, r6
 	ldr	r3, [sp, #28]
-	ldr	r1, .L1901+8
-	ldr	r0, .L1901+16
+	ldr	r1, .L1893+8
+	ldr	r0, .L1893+16
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1875:
+.L1867:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1876
+	beq	.L1868
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1876
+	bls	.L1868
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12933,37 +12854,37 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1876:
+.L1868:
 	adds	r7, r7, #1
-	b	.L1871
-.L1870:
+	b	.L1863
+.L1862:
 	movs	r1, #0
 	movs	r0, #4
-.L1872:
-	ldrh	r2, [r4, #308]
+.L1864:
+	ldrh	r2, [r4, #304]
 	sxth	r3, r1
 	subs	r2, r2, #1
 	cmp	r3, r2
-	blt	.L1874
-.L1878:
+	blt	.L1866
+.L1870:
 	add	r8, r8, #1
-	b	.L1861
-.L1874:
+	b	.L1853
+.L1866:
 	ldr	r6, [r4, #3304]
 	ldr	r2, [r6, r3, lsl #3]
 	uxth	r7, r2
 	cmp	r10, r7
-	bls	.L1873
+	bls	.L1865
 	add	r3, r0, r3, lsl #3
 	ldr	r3, [r6, r3]
 	ldr	r6, [sp, #8]
 	str	r3, [r6, r7, lsl #2]
-.L1873:
+.L1865:
 	adds	r1, r1, #1
-	b	.L1872
-.L1902:
+	b	.L1864
+.L1894:
 	.align	2
-.L1901:
+.L1893:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+615
@@ -12982,18 +12903,18 @@ FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L1904
+	ldr	r0, .L1896
 	push	{r3, lr}
 	.save {r3, lr}
-	ldrh	r3, [r0, #324]
+	ldrh	r3, [r0, #320]
 	strh	r3, [r0, #3622]	@ movhi
 	movw	r3, #61574
 	strh	r3, [r0, #3616]	@ movhi
-	ldrh	r3, [r0, #348]
+	ldrh	r3, [r0, #344]
 	strh	r3, [r0, #3620]	@ movhi
-	ldrh	r3, [r0, #326]
+	ldrh	r3, [r0, #322]
 	strh	r3, [r0, #3618]	@ movhi
-	ldr	r3, [r0, #352]
+	ldr	r3, [r0, #348]
 	addw	r0, r0, #3612
 	str	r3, [r0, #12]
 	ldr	r3, [r0, #-240]
@@ -13005,9 +12926,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1905:
+.L1897:
 	.align	2
-.L1904:
+.L1896:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -13025,13 +12946,13 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L1907
+	ldr	r0, .L1899
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1908:
+.L1900:
 	.align	2
-.L1907:
+.L1899:
 	.word	.LANCHOR0+3396
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -13049,25 +12970,25 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1925
-	ldrh	r0, [r4, #240]
+	ldr	r4, .L1917
+	ldrh	r0, [r4, #236]
 	strh	r3, [r4, #3476]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
 	ldrh	r2, [r4, #2628]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1910
-.L1912:
+	bne	.L1902
+.L1904:
 	mov	r5, #-1
-.L1909:
+.L1901:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1910:
+.L1902:
 	bl	FtlLoadSysInfo
 	mov	r5, r0
 	cmp	r0, #0
-	bne	.L1912
+	bne	.L1904
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -13077,89 +12998,89 @@ FtlSysBlkInit:
 	bl	FtlPowerLostRecovery
 	movs	r0, #1
 	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r4, #342]
+	ldrh	r1, [r4, #338]
 	mov	r3, r5
-	ldr	r2, [r4, #2544]
+	ldr	r2, [r4, #2540]
 	movs	r0, #12
-.L1913:
+.L1905:
 	cmp	r3, r1
-	bge	.L1918
+	bge	.L1910
 	mla	r6, r0, r3, r2
 	ldr	r6, [r6, #4]
 	cmp	r6, #0
-	bge	.L1914
-.L1918:
-	ldrh	r2, [r4, #2500]
+	bge	.L1906
+.L1910:
+	ldrh	r2, [r4, #2496]
 	cmp	r3, r1
 	add	r2, r2, #1
-	strh	r2, [r4, #2500]	@ movhi
-	bge	.L1924
-.L1915:
-	ldr	r0, .L1925+4
+	strh	r2, [r4, #2496]	@ movhi
+	bge	.L1916
+.L1907:
+	ldr	r0, .L1917+4
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1925+8
+	ldr	r0, .L1917+8
 	bl	FtlSuperblockPowerLostFix
-	ldrh	r1, [r4, #28]
-	ldr	r2, [r4, #76]
-	ldrh	r0, [r4, #32]
+	ldrh	r1, [r4, #24]
+	ldr	r2, [r4, #72]
+	ldrh	r0, [r4, #28]
 	ldrh	r3, [r2, r1, lsl #1]
 	subs	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r4, #306]
-	ldr	r1, [r4, #76]
-	ldrh	r0, [r4, #80]
-	strh	r3, [r4, #30]	@ movhi
+	ldrh	r3, [r4, #302]
+	ldr	r1, [r4, #72]
+	ldrh	r0, [r4, #76]
+	strh	r3, [r4, #26]	@ movhi
 	movs	r3, #0
-	strb	r3, [r4, #34]
-	strh	r3, [r4, #32]	@ movhi
-	ldrh	r6, [r4, #84]
+	strb	r3, [r4, #30]
+	strh	r3, [r4, #28]	@ movhi
+	ldrh	r6, [r4, #80]
 	ldrh	r2, [r1, r0, lsl #1]
 	subs	r2, r2, r6
 	strh	r2, [r1, r0, lsl #1]	@ movhi
-	strb	r3, [r4, #86]
-	strh	r3, [r4, #84]	@ movhi
-	ldrh	r3, [r4, #2502]
-	ldrh	r2, [r4, #306]
+	strb	r3, [r4, #82]
+	strh	r3, [r4, #80]	@ movhi
+	ldrh	r3, [r4, #2498]
+	ldrh	r2, [r4, #302]
 	adds	r3, r3, #1
-	strh	r2, [r4, #82]	@ movhi
-	strh	r3, [r4, #2502]	@ movhi
+	strh	r2, [r4, #78]	@ movhi
+	strh	r3, [r4, #2498]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1919
-.L1914:
+	b	.L1911
+.L1906:
 	adds	r3, r3, #1
-	b	.L1913
-.L1924:
+	b	.L1905
+.L1916:
 	ldrh	r3, [r4, #3476]
 	cmp	r3, #0
-	bne	.L1915
-.L1919:
-	ldrh	r0, [r4, #28]
+	bne	.L1907
+.L1911:
+	ldrh	r0, [r4, #24]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1920
-	ldrh	r3, [r4, #32]
-	cbnz	r3, .L1920
-	ldrh	r3, [r4, #84]
-	cbnz	r3, .L1920
+	beq	.L1912
+	ldrh	r3, [r4, #28]
+	cbnz	r3, .L1912
+	ldrh	r3, [r4, #80]
+	cbnz	r3, .L1912
 	bl	FtlGcRefreshBlock
-	ldrh	r0, [r4, #80]
+	ldrh	r0, [r4, #76]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-	ldr	r0, .L1925+4
+	ldr	r0, .L1917+4
 	bl	allocate_new_data_superblock
-	ldr	r0, .L1925+8
+	ldr	r0, .L1917+8
 	bl	allocate_new_data_superblock
-.L1920:
+.L1912:
 	bl	FtlVpcCheckAndModify
-	b	.L1909
-.L1926:
+	b	.L1901
+.L1918:
 	.align	2
-.L1925:
+.L1917:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
 	.fnend
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	1
@@ -13176,46 +13097,46 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1951
-	ldrh	r0, [r4, #240]
+	ldr	r4, .L1943
+	ldrh	r0, [r4, #236]
 	str	r3, [r4, #2592]
 	str	r3, [r4, #2596]
 	str	r3, [r4, #2608]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1928
+	cbz	r0, .L1920
 	bl	FtlMakeBbt
-.L1928:
-	ldr	r0, .L1951+4
+.L1920:
+	ldr	r0, .L1943+4
 	movs	r2, #0
-.L1929:
-	ldrh	r1, [r4, #262]
+.L1921:
+	ldrh	r1, [r4, #258]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1930
-	ldrh	r6, [r4, #244]
+	blt	.L1922
+	ldrh	r6, [r4, #240]
 	movs	r5, #0
-.L1931:
-	ldrh	r3, [r4, #246]
+.L1923:
+	ldrh	r3, [r4, #242]
 	cmp	r3, r6
-	bhi	.L1932
-	ldrh	r1, [r4, #236]
+	bhi	.L1924
+	ldrh	r1, [r4, #232]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1933
-.L1937:
+	bge	.L1925
+.L1929:
 	movs	r5, #0
 	mov	r6, r5
-.L1934:
-	ldrh	r3, [r4, #244]
+.L1926:
+	ldrh	r3, [r4, #240]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1938
-	ldrh	r3, [r4, #246]
-	ldrh	r5, [r4, #236]
-	ldr	r9, [r4, #248]
+	bhi	.L1930
+	ldrh	r3, [r4, #242]
+	ldrh	r5, [r4, #232]
+	ldr	r9, [r4, #244]
 	str	r3, [r4, #3288]
 	mov	r1, r5
 	mov	r0, r9
@@ -13228,7 +13149,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1939
+	ble	.L1931
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -13236,9 +13157,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2624]	@ movhi
-.L1939:
-	ldrh	r3, [r4, #298]
-	cbz	r3, .L1941
+.L1931:
+	ldrh	r3, [r4, #294]
+	cbz	r3, .L1933
 	ldrh	r2, [r4, #2624]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2624]	@ movhi
@@ -13249,64 +13170,60 @@ ftl_low_format:
 	strlt	r8, [r4, #2556]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2624]	@ movhi
-.L1941:
+.L1933:
 	ldrh	r2, [r4, #2624]
 	ldr	r3, [r4, #2556]
-	ldr	r6, .L1951+8
+	ldr	r6, .L1943+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
-	ldrh	r3, [r4, #306]
+	ldrh	r3, [r4, #302]
 	str	r5, [r4, #3676]
 	muls	r5, r3, r5
-	ldrh	r3, [r4, #262]
+	ldrh	r3, [r4, #258]
 	str	r5, [r4, #2556]
 	muls	r5, r3, r5
-	str	r5, [r4, #344]
-	movw	r5, #65535
+	str	r5, [r4, #340]
 	bl	FtlBbmTblFlush
-	ldrh	r2, [r4, #246]
+	ldrh	r2, [r4, #242]
 	movs	r1, #0
-	ldr	r0, [r4, #76]
+	ldr	r0, [r4, #72]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r4, #244]
+	movw	r2, #65535
 	movs	r3, #0
-	str	r3, [r4, #2552]
-	movs	r1, #255
-	strh	r3, [r4, #178]	@ movhi
-	strb	r3, [r4, #182]
-	strb	r3, [r4, #184]
-	lsrs	r2, r2, #3
-	strh	r3, [r4, #30]	@ movhi
-	strb	r3, [r4, #34]
-	strh	r3, [r4, #28]	@ movhi
+	mov	r5, r2
+	str	r3, [r4, #2548]
+	strh	r3, [r4, #174]	@ movhi
+	strb	r3, [r4, #178]
+	strb	r3, [r4, #180]
+	strh	r3, [r4, #26]	@ movhi
+	strb	r3, [r4, #30]
+	strh	r3, [r4, #24]	@ movhi
 	movs	r3, #1
-	ldr	r0, [r4, #24]
-	strh	r5, [r4, #176]	@ movhi
-	strb	r3, [r4, #36]
-	bl	ftl_memset
-.L1943:
+	strh	r2, [r4, #172]	@ movhi
+	strb	r3, [r4, #32]
+.L1935:
 	mov	r0, r6
 	bl	make_superblock
-	ldrb	r3, [r4, #35]	@ zero_extendqisi2
-	ldrh	r2, [r4, #28]
+	ldrb	r3, [r4, #31]	@ zero_extendqisi2
+	ldrh	r2, [r4, #24]
 	cmp	r3, #0
-	bne	.L1944
-	ldr	r3, [r4, #76]
+	bne	.L1936
+	ldr	r3, [r4, #72]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
-	ldrh	r3, [r4, #28]
+	ldrh	r3, [r4, #24]
 	adds	r3, r3, #1
-	strh	r3, [r4, #28]	@ movhi
-	b	.L1943
-.L1930:
+	strh	r3, [r4, #24]	@ movhi
+	b	.L1935
+.L1922:
 	ldr	r5, [r4, #3316]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
 	ldr	r1, [r4, #3320]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1929
-.L1932:
+	b	.L1921
+.L1924:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13314,73 +13231,73 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1931
-.L1933:
+	b	.L1923
+.L1925:
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r3, [r4, #336]
+	ldr	r3, [r4, #332]
 	add	r0, r0, r3
 	uxth	r0, r0
 	bl	FtlSysBlkNumInit
-	ldrh	r0, [r4, #240]
+	ldrh	r0, [r4, #236]
 	bl	FtlFreeSysBlkQueueInit
-	ldrh	r5, [r4, #244]
-.L1935:
-	ldrh	r3, [r4, #246]
+	ldrh	r5, [r4, #240]
+.L1927:
+	ldrh	r3, [r4, #242]
 	cmp	r3, r5
-	bls	.L1937
+	bls	.L1929
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1935
-.L1938:
+	b	.L1927
+.L1930:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1934
-.L1944:
+	b	.L1926
+.L1936:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
-	ldrh	r1, [r4, #32]
-	ldr	r6, .L1951+12
-	str	r3, [r4, #40]
+	ldrh	r1, [r4, #28]
+	ldr	r6, .L1943+12
+	str	r3, [r4, #36]
 	adds	r3, r3, #1
 	str	r3, [r4, #2592]
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
 	movs	r3, #0
-	strh	r3, [r4, #82]	@ movhi
-	strb	r3, [r4, #86]
-	ldrh	r3, [r4, #28]
+	strh	r3, [r4, #78]	@ movhi
+	strb	r3, [r4, #82]
+	ldrh	r3, [r4, #24]
 	adds	r3, r3, #1
-	strh	r3, [r4, #80]	@ movhi
+	strh	r3, [r4, #76]	@ movhi
 	movs	r3, #1
-	strb	r3, [r4, #88]
-.L1945:
+	strb	r3, [r4, #84]
+.L1937:
 	mov	r0, r6
 	bl	make_superblock
-	ldrb	r3, [r4, #87]	@ zero_extendqisi2
-	ldrh	r2, [r4, #80]
-	cbnz	r3, .L1946
-	ldr	r3, [r4, #76]
+	ldrb	r3, [r4, #83]	@ zero_extendqisi2
+	ldrh	r2, [r4, #76]
+	cbnz	r3, .L1938
+	ldr	r3, [r4, #72]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
-	ldrh	r3, [r4, #80]
+	ldrh	r3, [r4, #76]
 	adds	r3, r3, #1
-	strh	r3, [r4, #80]	@ movhi
-	b	.L1945
-.L1946:
+	strh	r3, [r4, #76]	@ movhi
+	b	.L1937
+.L1938:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
-	ldrh	r1, [r4, #84]
-	str	r3, [r4, #92]
+	ldrh	r1, [r4, #80]
+	str	r3, [r4, #88]
 	adds	r3, r3, #1
 	str	r3, [r4, #2592]
-	ldr	r3, [r4, #76]
+	ldr	r3, [r4, #72]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	strh	r5, [r4, #128]	@ movhi
+	strh	r5, [r4, #124]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
 	movs	r3, #0
 	strh	r0, [r4, #2628]	@ movhi
@@ -13394,20 +13311,20 @@ ftl_low_format:
 	str	r3, [r4, #2592]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1947
-	ldr	r3, .L1951+16
+	cbnz	r0, .L1939
+	ldr	r3, .L1943+16
 	movs	r2, #1
 	str	r2, [r3]
-.L1947:
+.L1939:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1952:
+.L1944:
 	.align	2
-.L1951:
+.L1943:
 	.word	.LANCHOR0
 	.word	168778952
-	.word	.LANCHOR0+28
-	.word	.LANCHOR0+80
+	.word	.LANCHOR0+24
+	.word	.LANCHOR0+76
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_low_format, .-ftl_low_format
@@ -13425,40 +13342,40 @@ sftl_init:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r3, #-1
-	ldr	r4, .L1959
-	ldr	r5, .L1959+4
-	ldr	r1, .L1959+8
-	ldr	r0, .L1959+12
+	ldr	r4, .L1951
+	ldr	r5, .L1951+4
+	ldr	r1, .L1951+8
+	ldr	r0, .L1951+12
 	str	r3, [r5]
 	bl	sftl_printk
 	mov	r0, r4
 	bl	FtlConstantsInit
 	bl	FtlMemInit
 	bl	FtlVariablesInit
-	ldrh	r0, [r4, #240]
+	ldrh	r0, [r4, #236]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	r0, .L1957
+	cbnz	r0, .L1949
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1957
+	cbnz	r0, .L1949
 	movs	r3, #1
 	str	r3, [r5]
-	ldrh	r3, [r4, #228]
+	ldrh	r3, [r4, #224]
 	cmp	r3, #15
-	bhi	.L1957
+	bhi	.L1949
 	movw	r4, #8129
-.L1956:
+.L1948:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1956
-.L1957:
+	bne	.L1948
+.L1949:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L1960:
+.L1952:
 	.align	2
-.L1959:
+.L1951:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC0
@@ -13476,7 +13393,7 @@ FtlWriteToIDB:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2028
+	ldr	r3, .L2020
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	add	r8, r1, r0
@@ -13488,30 +13405,30 @@ FtlWriteToIDB:
 	ldr	r3, [r3]
 	mov	r6, r1
 	mov	r7, r2
-	ldr	r5, .L2028+4
+	ldr	r5, .L2020+4
 	str	r3, [sp, #108]
-	bls	.L1962
+	bls	.L1954
 	cmp	r0, #576
-	bcc	.L1963
-.L1962:
+	bcc	.L1955
+.L1954:
 	ldr	r3, [r5, #3680]
-	cbnz	r3, .L1964
-.L2027:
+	cbnz	r3, .L1956
+.L2019:
 	movs	r4, #0
-	b	.L1961
-.L1964:
+	b	.L1953
+.L1956:
 	ldr	r8, [r5, #3684]
-	ldr	r3, .L2028+8
+	ldr	r3, .L2020+8
 	ldr	r2, [r8]
 	cmp	r2, r3
-	bne	.L1966
+	bne	.L1958
 	ldrh	r1, [r5, #10]
 	add	r0, r8, #260096
 	movs	r2, #0
 	movw	r3, #65023
-.L1970:
+.L1962:
 	ldr	r4, [r0, #-4]!
-	cbnz	r4, .L1967
+	cbnz	r4, .L1959
 	ldr	r4, [r8, r2, lsl #2]
 	adds	r2, r2, #1
 	cmp	r2, #4096
@@ -13520,22 +13437,22 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	r4, [r0, #2048]
-	bne	.L1970
+	bne	.L1962
 	mov	fp, #512
-	b	.L1969
-.L1967:
+	b	.L1961
+.L1959:
 	adds	r3, r3, #127
 	lsr	fp, r3, #7
-.L1969:
+.L1961:
 	lsls	r1, r1, #2
 	add	r0, fp, #4
-	ldr	r4, .L2028+4
+	ldr	r4, .L2020+4
 	uxth	r1, r1
 	bl	__aeabi_uidiv
 	adds	r3, r0, #1
 	mov	r1, fp
 	mov	r2, r3
-	ldr	r0, .L2028+12
+	ldr	r0, .L2020+12
 	str	r3, [sp, #16]
 	bl	sftl_printk
 	lsl	r3, fp, #7
@@ -13543,19 +13460,19 @@ FtlWriteToIDB:
 	movs	r3, #0
 	str	r3, [sp, #20]
 	str	r3, [sp, #12]
-.L1971:
+.L1963:
 	ldr	r3, [sp, #16]
 	ldr	r2, [sp, #12]
 	add	r3, r3, r2
 	cmp	r3, #8
 	str	r3, [sp, #28]
-	bls	.L1993
+	bls	.L1985
 	ldr	r3, [sp, #20]
-	cbnz	r3, .L1994
-.L1966:
+	cbnz	r3, .L1986
+.L1958:
 	mov	fp, #-1
-.L1994:
-	ldr	r5, .L2028+4
+.L1986:
+	ldr	r5, .L2020+4
 	movs	r3, #0
 	mov	r4, fp
 	ldr	r0, [r5, #3684]
@@ -13563,15 +13480,15 @@ FtlWriteToIDB:
 	bl	kfree
 	ldr	r0, [r5, #3688]
 	bl	kfree
-.L1961:
-	ldr	r3, .L2028
+.L1953:
+	ldr	r3, .L2020
 	mov	r0, r4
 	ldr	r2, [sp, #108]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2001
+	beq	.L1993
 	bl	__stack_chk_fail
-.L1993:
+.L1985:
 	mov	r2, #512
 	movs	r1, #0
 	ldr	r0, [r4, #3688]
@@ -13582,16 +13499,16 @@ FtlWriteToIDB:
 	str	r3, [sp, #24]
 	ldr	r3, [r4, #3264]
 	cmp	r3, #0
-	beq	.L2002
+	beq	.L1994
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	ite	eq
 	moveq	r9, #6
 	movne	r9, #9
-.L1972:
+.L1964:
 	ldr	r7, [sp, #24]
 	movs	r5, #0
-.L1973:
+.L1965:
 	ldr	r3, [r4, #3252]
 	mov	r1, r7
 	movs	r0, #0
@@ -13600,15 +13517,15 @@ FtlWriteToIDB:
 	ldr	r3, [sp, #16]
 	add	r7, r7, r6
 	cmp	r3, r5
-	bhi	.L1973
+	bhi	.L1965
 	cmp	r9, #9
-	bne	.L2004
+	bne	.L1996
 	ldr	r5, [r4, #3688]
 	mov	r2, #1024
 	movs	r1, #0
 	mov	r0, r5
 	bl	ftl_memset
-	ldr	r3, .L2028+16
+	ldr	r3, .L2020+16
 	movs	r1, #12
 	movs	r2, #4
 	str	r1, [r5, #4]
@@ -13626,16 +13543,16 @@ FtlWriteToIDB:
 	strh	r3, [r5, #22]	@ movhi
 	bl	js_hash
 	str	r0, [r5, #8]
-.L1974:
+.L1966:
 	ldr	r3, [sp, #16]
 	mov	r10, r8
 	muls	r3, r6, r3
 	movs	r6, #0
 	str	r3, [sp, #36]
-.L1975:
+.L1967:
 	ldr	r3, [sp, #36]
 	cmp	r6, r3
-	beq	.L1982
+	beq	.L1974
 	cmp	r9, #9
 	ite	ne
 	lslne	r3, r6, #2
@@ -13644,9 +13561,9 @@ FtlWriteToIDB:
 	movw	r3, #61424
 	str	r3, [sp, #48]
 	cmp	r6, #0
-	bne	.L1978
+	bne	.L1970
 	cmp	r9, #9
-	bne	.L1978
+	bne	.L1970
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
@@ -13661,8 +13578,8 @@ FtlWriteToIDB:
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	adds	r7, r7, #1
-	bne	.L1979
-.L1982:
+	bne	.L1971
+.L1974:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldr	r2, [sp, #12]
 	ldr	r7, [r4, #3688]
@@ -13671,21 +13588,21 @@ FtlWriteToIDB:
 	mul	r9, r3, r2
 	ldr	r2, [r4, #3264]
 	cmp	r2, #0
-	bne	.L1980
+	bne	.L1972
 	mov	r10, #6
-.L1981:
+.L1973:
 	ldr	r2, [sp, #16]
 	movs	r5, #0
 	muls	r3, r2, r3
 	str	r3, [sp, #36]
-.L1984:
+.L1976:
 	ldr	r3, [sp, #36]
 	cmp	r5, r3
-	beq	.L1988
+	beq	.L1980
 	cmp	r5, #0
-	bne	.L1985
+	bne	.L1977
 	cmp	r10, #9
-	bne	.L1985
+	bne	.L1977
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
@@ -13705,15 +13622,15 @@ FtlWriteToIDB:
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r7]
-	ldr	r2, .L2028+16
+	ldr	r2, .L2020+16
 	cmp	r3, r2
-	beq	.L1986
-.L1988:
+	beq	.L1978
+.L1980:
 	ldr	r0, [r4, #3688]
 	mov	r1, r8
 	movs	r5, #0
 	mov	ip, r0
-.L1987:
+.L1979:
 	mov	r6, ip
 	mov	r7, r1
 	ldr	r2, [r6]
@@ -13721,7 +13638,7 @@ FtlWriteToIDB:
 	ldr	r3, [r7]
 	adds	r1, r1, #4
 	cmp	r2, r3
-	beq	.L1990
+	beq	.L1982
 	mov	r2, #512
 	movs	r1, #0
 	bl	memset
@@ -13729,7 +13646,7 @@ FtlWriteToIDB:
 	ldr	r3, [r7]
 	ldr	r2, [r6]
 	ldr	r1, [sp, #12]
-	ldr	r0, .L2028+20
+	ldr	r0, .L2020+20
 	bl	sftl_printk
 	ldrh	r1, [r4, #10]
 	movs	r0, #0
@@ -13738,17 +13655,17 @@ FtlWriteToIDB:
 	muls	r2, r1, r2
 	mov	r1, r2
 	blx	r3
-.L1991:
+.L1983:
 	ldr	r3, [sp, #28]
 	str	r3, [sp, #12]
-	b	.L1971
-.L2002:
+	b	.L1963
+.L1994:
 	mov	r9, #6
-	b	.L1972
-.L2004:
+	b	.L1964
+.L1996:
 	movs	r5, #0
-	b	.L1974
-.L1978:
+	b	.L1966
+.L1970:
 	ldr	r1, [sp, #24]
 	add	r3, sp, #44
 	ldr	r7, [r4, #3256]
@@ -13757,19 +13674,19 @@ FtlWriteToIDB:
 	add	r1, r1, r6
 	blx	r7
 	adds	r0, r0, #1
-	beq	.L1982
+	beq	.L1974
 	add	r10, r10, #2048
-.L1979:
+.L1971:
 	adds	r6, r6, #1
-	b	.L1975
-.L1980:
+	b	.L1967
+.L1972:
 	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	ite	eq
 	moveq	r10, #6
 	movne	r10, #9
-	b	.L1981
-.L1985:
+	b	.L1973
+.L1977:
 	add	r3, sp, #44
 	mov	r2, r7
 	add	r1, r9, r5
@@ -13777,38 +13694,38 @@ FtlWriteToIDB:
 	ldr	r6, [r4, #3260]
 	blx	r6
 	adds	r0, r0, #1
-	beq	.L1988
+	beq	.L1980
 	ldr	r2, [sp, #48]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1988
+	bne	.L1980
 	add	r7, r7, #2048
-.L1986:
+.L1978:
 	adds	r5, r5, #1
-	b	.L1984
-.L1990:
+	b	.L1976
+.L1982:
 	ldr	r3, [sp, #32]
 	adds	r5, r5, #1
 	cmp	r5, r3
-	bne	.L1987
+	bne	.L1979
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #20]
-	bls	.L1991
-	b	.L1994
-.L2029:
+	bls	.L1983
+	b	.L1986
+.L2021:
 	.align	2
-.L2028:
+.L2020:
 	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	.LC130
 	.word	1179535694
 	.word	.LC131
-.L1963:
+.L1955:
 	cmp	r0, #64
-	bne	.L1995
+	bne	.L1987
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r5, #3684]
@@ -13816,22 +13733,22 @@ FtlWriteToIDB:
 	bl	ftl_malloc
 	ldr	r3, [r5, #3684]
 	str	r0, [r5, #3688]
-	cbz	r3, .L1996
-	cbz	r0, .L1996
+	cbz	r3, .L1988
+	cbz	r0, .L1988
 	movs	r2, #1
 	movs	r1, #0
 	str	r2, [r5, #3680]
 	mov	r0, r3
 	mov	r2, #262144
 	bl	ftl_memset
-.L1995:
+.L1987:
 	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	beq	.L2027
+	beq	.L2019
 	cmp	r4, #63
 	ldr	r0, [r5, #3684]
 	iteet	hi
-	ldrhi	r3, .L2030
+	ldrhi	r3, .L2022
 	rsbls	r1, r4, #64
 	subls	r6, r6, r1
 	movhi	r1, r7
@@ -13845,19 +13762,19 @@ FtlWriteToIDB:
 	addcs	r6, r6, r8
 	lsls	r2, r6, #9
 	bl	ftl_memcpy
-	b	.L2027
-.L1996:
-	ldr	r1, .L2030+4
-	ldr	r0, .L2030+8
+	b	.L2019
+.L1988:
+	ldr	r1, .L2022+4
+	ldr	r0, .L2022+8
 	bl	sftl_printk
-	b	.L1995
-.L2001:
+	b	.L1987
+.L1993:
 	add	sp, sp, #116
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2031:
+.L2023:
 	.align	2
-.L2030:
+.L2022:
 	.word	8388544
 	.word	.LANCHOR1+633
 	.word	.LC132
@@ -13900,19 +13817,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L2036
+	ldr	r2, .L2028
 	ldr	r3, [r2, #3692]
-	cbnz	r3, .L2035
+	cbnz	r3, .L2027
 	str	r0, [r2, #3692]
 	mov	r0, r3
 	str	r1, [r2, #3696]
 	bx	lr
-.L2035:
+.L2027:
 	mov	r0, #-1
 	bx	lr
-.L2037:
+.L2029:
 	.align	2
-.L2036:
+.L2028:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -13930,56 +13847,56 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
-	ldr	r5, .L2046
+	ldr	r5, .L2038
 	bl	ftl_malloc
 	str	r0, [r5, #3700]
 	cmp	r0, #0
-	beq	.L2044
-	ldr	r10, .L2046+4
+	beq	.L2036
+	ldr	r10, .L2038+4
 	mov	r9, #0
 	mov	r7, r9
 	mov	r8, r9
-.L2042:
+.L2034:
 	ldr	r3, [r5, #3692]
 	movs	r1, #128
 	ldr	r2, [r5, #3700]
 	lsl	r0, r8, #7
 	blx	r3
 	mov	r6, r0
-	cbnz	r0, .L2040
+	cbnz	r0, .L2032
 	ldr	r4, [r5, #3700]
 	ldr	r3, [r4]
 	cmp	r3, r10
-	bne	.L2041
+	bne	.L2033
 	movw	r3, #65532
 	ldr	r2, [r4, #4]
 	ldr	r3, [r4, r3]
 	cmp	r3, r2
-	bne	.L2041
+	bne	.L2033
 	cmp	r3, r7
 	itt	hi
 	movhi	r9, r8
 	movhi	r7, r3
-.L2041:
+.L2033:
 	add	r8, r8, #1
 	cmp	r8, #2
-	bne	.L2042
-	cbz	r7, .L2043
+	bne	.L2034
+	cbz	r7, .L2035
 	ldr	r3, [r5, #3692]
 	mov	r2, r4
 	movs	r1, #128
 	lsl	r0, r9, #7
 	blx	r3
 	mov	r6, r0
-	cbz	r0, .L2038
-.L2040:
+	cbz	r0, .L2030
+.L2032:
 	ldr	r0, [r5, #3700]
 	mov	r6, #-1
 	bl	kfree
 	movs	r3, #0
 	str	r3, [r5, #3700]
-	b	.L2038
-.L2043:
+	b	.L2030
+.L2035:
 	mov	r2, #65536
 	mov	r1, r7
 	mov	r0, r4
@@ -13992,15 +13909,15 @@ rk_sftl_vendor_storage_init:
 	movw	r3, #64504
 	strh	r7, [r4, #12]	@ movhi
 	strh	r3, [r4, #14]	@ movhi
-.L2038:
+.L2030:
 	mov	r0, r6
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2044:
+.L2036:
 	mvn	r6, #11
-	b	.L2038
-.L2047:
+	b	.L2030
+.L2039:
 	.align	2
-.L2046:
+.L2038:
 	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
@@ -14019,23 +13936,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L2054
+	ldr	r3, .L2046
 	mov	r0, r1
 	ldr	r5, [r3, #3700]
-	cbz	r5, .L2053
+	cbz	r5, .L2045
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L2050:
+.L2042:
 	cmp	r3, r6
-	bcc	.L2052
-.L2053:
+	bcc	.L2044
+.L2045:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2052:
+.L2044:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L2051
+	bne	.L2043
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -14047,12 +13964,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2051:
+.L2043:
 	adds	r3, r3, #1
-	b	.L2050
-.L2055:
+	b	.L2042
+.L2047:
 	.align	2
-.L2054:
+.L2046:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -14070,26 +13987,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L2075
+	ldr	r2, .L2067
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
 	ldr	r4, [r2, #3700]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L2071
+	beq	.L2063
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L2058:
+.L2050:
 	cmp	r7, r2
-	bcc	.L2066
+	bcc	.L2058
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2071
+	bhi	.L2063
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -14122,31 +14039,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #3696]
-	b	.L2074
-.L2066:
+	b	.L2066
+.L2058:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L2059
+	bne	.L2051
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L2060
+	bls	.L2052
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2071
+	bhi	.L2063
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L2061:
+.L2053:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L2062
+	bcc	.L2054
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -14165,7 +14082,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L2063:
+.L2055:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -14178,20 +14095,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L2075
+	ldr	r3, .L2067
 	ldr	r3, [r3, #3696]
-.L2074:
+.L2066:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L2056:
+.L2048:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2062:
+.L2054:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -14208,24 +14125,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L2061
-.L2060:
+	b	.L2053
+.L2052:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L2063
-.L2059:
+	b	.L2055
+.L2051:
 	adds	r7, r7, #1
-	b	.L2058
-.L2071:
+	b	.L2050
+.L2063:
 	mov	r0, #-1
-	b	.L2056
-.L2076:
+	b	.L2048
+.L2068:
 	.align	2
-.L2075:
+.L2067:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -14248,18 +14165,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L2093
-	ldr	r3, .L2101
+	beq	.L2085
+	ldr	r3, .L2093
 	cmp	r6, r3
-	beq	.L2080
+	beq	.L2072
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L2081
-.L2099:
+	beq	.L2073
+.L2091:
 	mvn	r5, #13
-	b	.L2079
-.L2080:
-	ldr	r6, .L2101+4
+	b	.L2071
+.L2072:
+	ldr	r6, .L2093+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #8]
@@ -14270,24 +14187,24 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	movs	r2, #8
-	cbnz	r3, .L2082
+	cbnz	r3, .L2074
 	mov	r1, r5
 	bl	arm_copy_from_user
 	mov	r2, r0
 	cmp	r0, #0
-	beq	.L2083
-.L2082:
+	beq	.L2075
+.L2074:
 	rsb	r0, r2, #8
 	movs	r1, #0
 	add	r0, r0, r4
 	bl	memset
 	mov	r2, r5
 	mov	r1, #256
-.L2100:
-	ldr	r0, .L2101+8
+.L2092:
+	ldr	r0, .L2093+8
 	bl	sftl_printk
-	b	.L2099
-.L2084:
+	b	.L2091
+.L2076:
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
@@ -14301,17 +14218,17 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2099
+	bne	.L2091
 	mov	r1, r4
 	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L2099
-.L2096:
+	bne	.L2091
+.L2088:
 	mov	r5, r0
-	b	.L2079
-.L2081:
-	ldr	r7, .L2101+4
+	b	.L2071
+.L2073:
+	ldr	r7, .L2093+4
 	mov	r3, sp
 	ands	r3, r3, r7
 	ldr	r3, [r3, #8]
@@ -14322,50 +14239,50 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	movs	r2, #8
-	cbnz	r3, .L2086
+	cbnz	r3, .L2078
 	mov	r1, r5
 	bl	arm_copy_from_user
 	mov	r2, r0
-	cbz	r0, .L2087
-.L2086:
+	cbz	r0, .L2079
+.L2078:
 	rsb	r0, r2, #8
 	movs	r1, #0
 	add	r0, r0, r4
 	bl	memset
 	mov	r2, r5
 	mov	r1, #276
-	b	.L2100
-.L2093:
+	b	.L2092
+.L2085:
 	mov	r5, #-1
-	b	.L2077
-.L2083:
+	b	.L2069
+.L2075:
 	ldr	r2, [r4]
-	ldr	r3, .L2101+12
+	ldr	r3, .L2093+12
 	cmp	r2, r3
-	bne	.L2088
+	bne	.L2080
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	adds	r3, r0, #1
-	bne	.L2084
-.L2088:
+	bne	.L2076
+.L2080:
 	mov	r5, #-1
-.L2079:
+.L2071:
 	mov	r0, r4
 	bl	kfree
-.L2077:
+.L2069:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2087:
+.L2079:
 	ldr	r2, [r4]
-	ldr	r3, .L2101+12
+	ldr	r3, .L2093+12
 	cmp	r2, r3
-	bne	.L2088
+	bne	.L2080
 	ldrh	r6, [r4, #6]
 	movw	r3, #4087
 	cmp	r6, r3
-	bhi	.L2088
+	bhi	.L2080
 	mov	r3, sp
 	adds	r6, r6, #8
 	ands	r7, r7, r3
@@ -14377,29 +14294,29 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	mov	r2, r6
-	cbnz	r3, .L2089
+	cbnz	r3, .L2081
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	mov	r2, r0
-	cbz	r0, .L2090
-.L2089:
+	cbz	r0, .L2082
+.L2081:
 	subs	r6, r6, r2
 	movs	r1, #0
 	adds	r0, r4, r6
 	bl	memset
 	mov	r2, r5
 	movw	r1, #283
-	b	.L2100
-.L2090:
+	b	.L2092
+.L2082:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L2096
-.L2102:
+	b	.L2088
+.L2094:
 	.align	2
-.L2101:
+.L2093:
 	.word	1074034177
 	.word	-8192
 	.word	.LC133
@@ -14418,11 +14335,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2104
+	ldr	r0, .L2096
 	b	misc_register
-.L2105:
+.L2097:
 	.align	2
-.L2104:
+.L2096:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14576,103 +14493,103 @@ rk_sftl_vendor_register:
 	.global	c_ftl_nand_die_num
 	.global	c_ftl_nand_type
 	.section	.rodata
-	.align	2
+	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.7560, %object
-	.size	__func__.7560, 17
-__func__.7560:
+	.type	__func__.7564, %object
+	.size	__func__.7564, 17
+__func__.7564:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.7555, %object
-	.size	__func__.7555, 17
-__func__.7555:
+	.type	__func__.7559, %object
+	.size	__func__.7559, 17
+__func__.7559:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.7591, %object
-	.size	__func__.7591, 17
-__func__.7591:
+	.type	__func__.7595, %object
+	.size	__func__.7595, 17
+__func__.7595:
 	.ascii	"List_remove_node\000"
-	.type	__func__.7623, %object
-	.size	__func__.7623, 22
-__func__.7623:
+	.type	__func__.7627, %object
+	.size	__func__.7627, 22
+__func__.7627:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.7730, %object
-	.size	__func__.7730, 22
-__func__.7730:
+	.type	__func__.7734, %object
+	.size	__func__.7734, 22
+__func__.7734:
 	.ascii	"select_l2p_ram_region\000"
 	.type	__func__.8057, %object
 	.size	__func__.8057, 16
 __func__.8057:
 	.ascii	"make_superblock\000"
-	.type	__func__.8232, %object
-	.size	__func__.8232, 19
-__func__.8232:
+	.type	__func__.8233, %object
+	.size	__func__.8233, 19
+__func__.8233:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.13881, %object
-	.size	__func__.13881, 17
-__func__.13881:
+	.type	__func__.13957, %object
+	.size	__func__.13957, 17
+__func__.13957:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.7665, %object
-	.size	__func__.7665, 26
-__func__.7665:
+	.type	__func__.7669, %object
+	.size	__func__.7669, 26
+__func__.7669:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.7170, %object
-	.size	__func__.7170, 11
-__func__.7170:
+	.type	__func__.7174, %object
+	.size	__func__.7174, 11
+__func__.7174:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.7397, %object
-	.size	__func__.7397, 14
-__func__.7397:
+	.type	__func__.7401, %object
+	.size	__func__.7401, 14
+__func__.7401:
 	.ascii	"FtlBbt2Bitmap\000"
 	.type	__func__.8078, %object
 	.size	__func__.8078, 18
 __func__.8078:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.13838, %object
-	.size	__func__.13838, 15
-__func__.13838:
+	.type	__func__.13914, %object
+	.size	__func__.13914, 15
+__func__.13914:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.7842, %object
-	.size	__func__.7842, 14
-__func__.7842:
+	.type	__func__.7846, %object
+	.size	__func__.7846, 14
+__func__.7846:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.7440, %object
-	.size	__func__.7440, 11
-__func__.7440:
+	.type	__func__.7444, %object
+	.size	__func__.7444, 11
+__func__.7444:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.13857, %object
-	.size	__func__.13857, 15
-__func__.13857:
+	.type	__func__.13933, %object
+	.size	__func__.13933, 15
+__func__.13933:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.8204, %object
-	.size	__func__.8204, 25
-__func__.8204:
+	.type	__func__.8205, %object
+	.size	__func__.8205, 25
+__func__.8205:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.8245, %object
-	.size	__func__.8245, 16
-__func__.8245:
+	.type	__func__.8246, %object
+	.size	__func__.8246, 16
+__func__.8246:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.8252, %object
-	.size	__func__.8252, 20
-__func__.8252:
+	.type	__func__.8253, %object
+	.size	__func__.8253, 20
+__func__.8253:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7691, %object
-	.size	__func__.7691, 31
-__func__.7691:
+	.type	__func__.7695, %object
+	.size	__func__.7695, 31
+__func__.7695:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.7705, %object
-	.size	__func__.7705, 16
-__func__.7705:
+	.type	__func__.7709, %object
+	.size	__func__.7709, 16
+__func__.7709:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.7632, %object
-	.size	__func__.7632, 16
-__func__.7632:
+	.type	__func__.7636, %object
+	.size	__func__.7636, 16
+__func__.7636:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.7676, %object
-	.size	__func__.7676, 15
-__func__.7676:
+	.type	__func__.7680, %object
+	.size	__func__.7680, 15
+__func__.7680:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.7747, %object
-	.size	__func__.7747, 9
-__func__.7747:
+	.type	__func__.7751, %object
+	.size	__func__.7751, 9
+__func__.7751:
 	.ascii	"log2phys\000"
 	.type	__func__.7966, %object
 	.size	__func__.7966, 16
@@ -14682,37 +14599,37 @@ __func__.7966:
 	.size	__func__.8000, 22
 __func__.8000:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.8119, %object
-	.size	__func__.8119, 14
-__func__.8119:
+	.type	__func__.8120, %object
+	.size	__func__.8120, 14
+__func__.8120:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.7820, %object
-	.size	__func__.7820, 15
-__func__.7820:
+	.type	__func__.7824, %object
+	.size	__func__.7824, 15
+__func__.7824:
 	.ascii	"FtlVpcTblFlush\000"
 	.type	__func__.8103, %object
 	.size	__func__.8103, 21
 __func__.8103:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.8225, %object
-	.size	__func__.8225, 29
-__func__.8225:
+	.type	__func__.8226, %object
+	.size	__func__.8226, 29
+__func__.8226:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.7294, %object
-	.size	__func__.7294, 13
-__func__.7294:
+	.type	__func__.7298, %object
+	.size	__func__.7298, 13
+__func__.7298:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.8322, %object
-	.size	__func__.8322, 19
-__func__.8322:
+	.type	__func__.8323, %object
+	.size	__func__.8323, 19
+__func__.8323:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.8435, %object
-	.size	__func__.8435, 23
-__func__.8435:
+	.type	__func__.8436, %object
+	.size	__func__.8436, 23
+__func__.8436:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.7322, %object
-	.size	__func__.7322, 9
-__func__.7322:
+	.type	__func__.7326, %object
+	.size	__func__.7326, 9
+__func__.7326:
 	.ascii	"FtlWrite\000"
 	.type	__func__.7898, %object
 	.size	__func__.7898, 15
@@ -14722,18 +14639,18 @@ __func__.7898:
 	.size	__func__.7920, 18
 __func__.7920:
 	.ascii	"FtlMapTblRecovery\000"
-	.type	__func__.14000, %object
-	.size	__func__.14000, 14
-__func__.14000:
+	.type	__func__.14076, %object
+	.size	__func__.14076, 14
+__func__.14076:
 	.ascii	"FtlWriteToIDB\000"
 	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 128
+	.size	rk_sftl_vendor_storage_fops, 160
 rk_sftl_vendor_storage_fops:
 	.space	36
 	.word	rk_sftl_vendor_storage_ioctl
 	.word	rk_sftl_vendor_storage_ioctl
-	.space	84
+	.space	116
 	.data
 	.align	2
 	.set	.LANCHOR2,. + 0
@@ -14764,10 +14681,6 @@ rkflash_vender_storage_dev:
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
 	.space	24
-	.type	p_blk_mode_table, %object
-	.size	p_blk_mode_table, 4
-p_blk_mode_table:
-	.space	4
 	.type	g_active_superblock, %object
 	.size	g_active_superblock, 48
 g_active_superblock:
@@ -14996,6 +14909,10 @@ FtlUpdateVaildLpnCount:
 	.type	g_VaildLpn, %object
 	.size	g_VaildLpn, 4
 g_VaildLpn:
+	.space	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 4
+p_blk_mode_table:
 	.space	4
 	.type	g_MaxLpn, %object
 	.size	g_MaxLpn, 4
@@ -15391,7 +15308,7 @@ gp_last_act_superblock:
 	.space	4
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
-	.ascii	"SFTL version: 5.0.53 20200303\000"
+	.ascii	"SFTL version: 5.0.55 20200925\000"
 .LC1:
 	.ascii	"\012%s\012\000"
 .LC2:
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index fbcc8de01a99..ca118c6048c3 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2020-04-10
+ * date: 2020-09-25
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
@@ -35,21 +35,6 @@ l2p_addr_tran.isra.0:
 	ret
 	.size	l2p_addr_tran.isra.0, .-l2p_addr_tran.isra.0
 	.align	2
-	.type	ftl_set_blk_mode.part.7, %function
-ftl_set_blk_mode.part.7:
-	and	w0, w0, 65535
-	adrp	x2, .LANCHOR0+24
-	ubfx	x1, x0, 5, 11
-	ldr	x3, [x2, #:lo12:.LANCHOR0+24]
-	lsl	x1, x1, 2
-	mov	w2, 1
-	lsl	w2, w2, w0
-	ldr	w0, [x3, x1]
-	orr	w0, w0, w2
-	str	w0, [x3, x1]
-	ret
-	.size	ftl_set_blk_mode.part.7, .-ftl_set_blk_mode.part.7
-	.align	2
 	.global	ftl_print_sblk_info
 	.type	ftl_print_sblk_info, %function
 ftl_print_sblk_info:
@@ -65,53 +50,53 @@ ftl_print_sblk_info:
 	bl	sftl_printk
 	adrp	x0, .LC2
 	add	x0, x0, :lo12:.LC2
-	ldrh	w1, [x19, 32]
-	ldr	x3, [x19, 80]
-	ldrh	w5, [x19, 36]
+	ldrh	w1, [x19, 24]
+	ldr	x3, [x19, 72]
+	ldrh	w5, [x19, 28]
 	ubfiz	x2, x1, 1, 16
-	ldrb	w4, [x19, 40]
+	ldrb	w4, [x19, 32]
 	ldrh	w6, [x3, x2]
-	ldrb	w3, [x19, 38]
-	ldrh	w2, [x19, 34]
+	ldrb	w3, [x19, 30]
+	ldrh	w2, [x19, 26]
 	bl	sftl_printk
-	ldrh	w1, [x19, 88]
+	ldrh	w1, [x19, 80]
 	adrp	x0, .LC3
-	ldr	x3, [x19, 80]
+	ldr	x3, [x19, 72]
 	add	x0, x0, :lo12:.LC3
-	ldrh	w5, [x19, 92]
+	ldrh	w5, [x19, 84]
 	ubfiz	x2, x1, 1, 16
-	ldrb	w4, [x19, 96]
+	ldrb	w4, [x19, 88]
 	ldrh	w6, [x3, x2]
-	ldrb	w3, [x19, 94]
-	ldrh	w2, [x19, 90]
+	ldrb	w3, [x19, 86]
+	ldrh	w2, [x19, 82]
 	bl	sftl_printk
-	ldrh	w1, [x19, 136]
+	ldrh	w1, [x19, 128]
 	adrp	x0, .LC4
-	ldr	x3, [x19, 80]
+	ldr	x3, [x19, 72]
 	add	x0, x0, :lo12:.LC4
-	ldrh	w5, [x19, 140]
+	ldrh	w5, [x19, 132]
 	ubfiz	x2, x1, 1, 16
-	ldrb	w4, [x19, 144]
+	ldrb	w4, [x19, 136]
 	ldrh	w6, [x3, x2]
-	ldrb	w3, [x19, 142]
-	ldrh	w2, [x19, 138]
+	ldrb	w3, [x19, 134]
+	ldrh	w2, [x19, 130]
 	bl	sftl_printk
-	ldrh	w1, [x19, 184]
+	ldrh	w1, [x19, 176]
 	adrp	x0, .LC5
-	ldr	x3, [x19, 80]
+	ldr	x3, [x19, 72]
 	add	x0, x0, :lo12:.LC5
-	ldrh	w5, [x19, 188]
+	ldrh	w5, [x19, 180]
 	ubfiz	x2, x1, 1, 16
-	ldrb	w4, [x19, 192]
+	ldrb	w4, [x19, 184]
 	ldrh	w6, [x3, x2]
-	ldrb	w3, [x19, 190]
-	ldrh	w2, [x19, 186]
+	ldrb	w3, [x19, 182]
+	ldrh	w2, [x19, 178]
 	bl	sftl_printk
-	ldrh	w3, [x19, 232]
+	ldrh	w3, [x19, 224]
 	adrp	x0, .LC6
-	ldrh	w2, [x19, 234]
+	ldrh	w2, [x19, 226]
 	add	x0, x0, :lo12:.LC6
-	ldrh	w1, [x19, 236]
+	ldrh	w1, [x19, 228]
 	bl	sftl_printk
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -123,16 +108,16 @@ ftl_print_sblk_info:
 Ftl_log2:
 	mov	w2, 1
 	mov	w1, 0
-.L7:
+.L6:
 	cmp	w2, w0
-	bls	.L8
+	bls	.L7
 	sub	w0, w1, #1
 	ret
-.L8:
+.L7:
 	add	w1, w1, 1
 	lsl	w2, w2, 1
 	and	w1, w1, 65535
-	b	.L7
+	b	.L6
 	.size	Ftl_log2, .-Ftl_log2
 	.align	2
 	.global	FtlPrintInfo
@@ -151,17 +136,17 @@ FtlSysBlkNumInit:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	and	w0, w0, 65535
-	ldrh	w2, [x1, 244]
-	ldrh	w3, [x1, 254]
-	str	w0, [x1, 240]
+	ldrh	w2, [x1, 236]
+	ldrh	w3, [x1, 246]
+	str	w0, [x1, 232]
 	mul	w2, w2, w0
 	sub	w0, w3, w0
-	strh	w0, [x1, 252]
-	ldr	w0, [x1, 260]
-	str	w2, [x1, 248]
+	strh	w0, [x1, 244]
+	ldr	w0, [x1, 252]
+	str	w2, [x1, 240]
 	sub	w2, w0, w2
 	mov	w0, 0
-	str	w2, [x1, 256]
+	str	w2, [x1, 248]
 	ret
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
 	.align	2
@@ -179,137 +164,137 @@ FtlConstantsInit:
 	ldrh	w5, [x7, 4]
 	cmp	w3, 4
 	ldrh	w1, [x7, 6]
-	strh	w2, [x0, 264]
-	strh	w6, [x0, 266]
-	strh	w5, [x0, 268]
-	strh	w1, [x0, 254]
-	strh	w3, [x0, 270]
-	bne	.L12
+	strh	w2, [x0, 256]
+	strh	w6, [x0, 258]
+	strh	w5, [x0, 260]
+	strh	w1, [x0, 246]
+	strh	w3, [x0, 262]
+	bne	.L11
 	lsr	w1, w1, 1
-	strh	w1, [x0, 254]
+	strh	w1, [x0, 246]
 	mov	w1, 8
-	strh	w1, [x0, 270]
-.L13:
+	strh	w1, [x0, 262]
+.L12:
 	add	x1, x4, :lo12:.LANCHOR0
 	mov	x0, 0
-	add	x3, x1, 272
-.L14:
+	add	x3, x1, 264
+.L13:
 	strb	w0, [x0, x3]
 	add	x0, x0, 1
 	cmp	x0, 32
-	bne	.L14
+	bne	.L13
 	mov	w0, 5
-	strh	wzr, [x1, 306]
-	strh	w0, [x1, 304]
+	strh	wzr, [x1, 298]
+	strh	w0, [x1, 296]
 	cmp	w2, 1
-	bne	.L15
-	strh	w2, [x1, 304]
-.L15:
+	bne	.L14
+	strh	w2, [x1, 296]
+.L14:
 	add	x3, x4, :lo12:.LANCHOR0
 	mov	w0, 640
-	strh	w0, [x3, 308]
-	ldrh	w0, [x3, 268]
-	ldrh	w5, [x3, 254]
+	strh	w0, [x3, 300]
+	ldrh	w0, [x3, 260]
+	ldrh	w5, [x3, 246]
 	mul	w6, w6, w0
 	mul	w0, w0, w5
 	and	w6, w6, 65535
-	strh	w6, [x3, 244]
+	strh	w6, [x3, 236]
 	and	w0, w0, 65535
-	strh	w0, [x3, 310]
+	strh	w0, [x3, 302]
 	bl	Ftl_log2
 	ldrh	w9, [x7, 12]
-	ldrh	w8, [x3, 270]
-	strh	w0, [x3, 312]
-	strh	w9, [x3, 314]
+	ldrh	w8, [x3, 262]
+	strh	w0, [x3, 304]
+	strh	w9, [x3, 306]
 	mul	w0, w6, w9
-	strh	w9, [x3, 316]
-	strh	w0, [x3, 318]
+	strh	w9, [x3, 308]
+	strh	w0, [x3, 310]
 	mov	w0, w8
 	bl	Ftl_log2
 	and	w2, w0, 65535
-	strh	w0, [x3, 320]
+	strh	w0, [x3, 312]
 	ubfiz	w0, w8, 9, 7
-	strh	w0, [x3, 322]
+	strh	w0, [x3, 314]
 	ubfx	w0, w0, 8, 8
-	strh	w0, [x3, 324]
+	strh	w0, [x3, 316]
 	ldrh	w0, [x7, 20]
-	strh	w0, [x3, 326]
+	strh	w0, [x3, 318]
 	mul	w0, w6, w5
-	str	w0, [x3, 260]
+	str	w0, [x3, 252]
 	mul	w0, w0, w8
 	mul	w8, w8, w9
 	mul	w0, w0, w9
 	asr	w0, w0, 11
-	str	w0, [x3, 328]
+	str	w0, [x3, 320]
 	mov	w0, 5120
 	sdiv	w0, w0, w8
 	and	w0, w0, 65535
 	cmp	w0, 4
-	bls	.L16
-.L22:
+	bls	.L15
+.L21:
 	add	x1, x4, :lo12:.LANCHOR0
-	strh	w0, [x3, 332]
+	strh	w0, [x3, 324]
 	mov	w0, 640
 	lsl	w5, w5, 6
 	asr	w0, w0, w2
 	add	w2, w2, 9
 	add	w0, w0, 2
-	strh	w0, [x1, 334]
+	strh	w0, [x1, 326]
 	asr	w5, w5, w2
-	strh	w5, [x1, 336]
+	strh	w5, [x1, 328]
 	and	w5, w5, 65535
 	cmp	w6, 1
 	mul	w0, w5, w6
 	add	w5, w5, 8
-	str	w0, [x1, 340]
-	ldrh	w0, [x1, 332]
+	str	w0, [x1, 332]
+	ldrh	w0, [x1, 324]
 	udiv	w0, w0, w6
 	add	w5, w0, w5
-	beq	.L18
-.L23:
+	beq	.L17
+.L22:
 	add	x4, x4, :lo12:.LANCHOR0
-	str	w5, [x1, 240]
-	ldrh	w0, [x4, 240]
+	str	w5, [x1, 232]
+	ldrh	w0, [x4, 232]
 	bl	FtlSysBlkNumInit
-	ldr	w0, [x4, 240]
-	str	w0, [x4, 344]
-	ldr	w0, [x4, 256]
-	ldrh	w1, [x4, 314]
-	str	wzr, [x4, 352]
+	ldr	w0, [x4, 232]
+	str	w0, [x4, 336]
+	ldr	w0, [x4, 248]
+	ldrh	w1, [x4, 306]
+	str	wzr, [x4, 344]
 	lsl	w0, w0, 2
 	mul	w0, w0, w1
-	ldrh	w1, [x4, 320]
+	ldrh	w1, [x4, 312]
 	add	w1, w1, 9
 	lsr	w0, w0, w1
 	add	w0, w0, 2
-	strh	w0, [x4, 348]
+	strh	w0, [x4, 340]
 	mov	w0, 32
-	strh	w0, [x4, 350]
-	ldrh	w0, [x4, 332]
+	strh	w0, [x4, 342]
+	ldrh	w0, [x4, 324]
 	add	w0, w0, 3
-	strh	w0, [x4, 332]
-	ldr	w0, [x4, 340]
+	strh	w0, [x4, 324]
+	ldr	w0, [x4, 332]
 	add	w0, w0, 3
-	str	w0, [x4, 340]
+	str	w0, [x4, 332]
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L12:
+.L11:
 	cmp	w3, 8
-	bne	.L13
+	bne	.L12
 	cmp	w5, 1
-	bne	.L13
+	bne	.L12
 	lsr	w1, w1, 1
-	strh	w1, [x0, 254]
+	strh	w1, [x0, 246]
 	mov	w1, 2
-	strh	w1, [x0, 268]
-	b	.L13
-.L16:
+	strh	w1, [x0, 260]
+	b	.L12
+.L15:
 	mov	w0, 4
-	b	.L22
-.L18:
+	b	.L21
+.L17:
 	add	w5, w5, 4
-	b	.L23
+	b	.L22
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
 	.global	IsBlkInVendorPart
@@ -318,23 +303,23 @@ IsBlkInVendorPart:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	and	w0, w0, 65535
-	ldrh	w2, [x1, 356]
-	cbz	w2, .L28
-	ldrh	w2, [x1, 332]
-	ldr	x3, [x1, 360]
+	ldrh	w2, [x1, 348]
+	cbz	w2, .L27
+	ldrh	w2, [x1, 324]
+	ldr	x3, [x1, 352]
 	mov	x1, 0
-.L26:
+.L25:
 	cmp	w2, w1, uxth
-	bhi	.L27
-.L28:
+	bhi	.L26
+.L27:
 	mov	w0, 0
 	ret
-.L27:
+.L26:
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4, -2]
 	cmp	w4, w0
-	bne	.L26
+	bne	.L25
 	mov	w0, 1
 	ret
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -349,8 +334,8 @@ FtlCacheWriteBack:
 	.global	sftl_get_density
 	.type	sftl_get_density, %function
 sftl_get_density:
-	adrp	x0, .LANCHOR0+352
-	ldr	w0, [x0, #:lo12:.LANCHOR0+352]
+	adrp	x0, .LANCHOR0+344
+	ldr	w0, [x0, #:lo12:.LANCHOR0+344]
 	ret
 	.size	sftl_get_density, .-sftl_get_density
 	.align	2
@@ -364,7 +349,7 @@ FtlBbmMapBadBlock:
 	str	x19, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x19, x19, 368
+	add	x19, x19, 360
 	ldrh	w0, [x19, -58]
 	udiv	w3, w1, w0
 	and	w2, w3, 65535
@@ -396,12 +381,12 @@ FtlBbmIsBadBlock:
 	adrp	x2, .LANCHOR0
 	add	x3, x2, :lo12:.LANCHOR0
 	and	w0, w0, 65535
-	ldrh	w1, [x3, 310]
+	ldrh	w1, [x3, 302]
 	udiv	w2, w0, w1
 	msub	w0, w2, w1, w0
 	add	x2, x3, x2, uxth 3
 	and	w0, w0, 65535
-	ldr	x1, [x2, 400]
+	ldr	x1, [x2, 392]
 	ubfx	x3, x0, 5, 11
 	ldr	w1, [x1, x3, lsl 2]
 	lsr	w0, w1, w0
@@ -422,27 +407,27 @@ FtlBbtCalcTotleCnt:
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w4, 0
 	mov	w5, 0
-	ldrh	w6, [x0, 310]
-	ldrh	w0, [x0, 266]
+	ldrh	w6, [x0, 302]
+	ldrh	w0, [x0, 258]
 	mul	w6, w6, w0
 	cmp	w4, w6
-	blt	.L46
+	blt	.L45
 	mov	w0, w5
 	ret
-.L46:
+.L45:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L39:
+.L38:
 	mov	w0, w4
 	bl	FtlBbmIsBadBlock
-	cbz	w0, .L38
+	cbz	w0, .L37
 	add	w5, w5, 1
 	and	w5, w5, 65535
-.L38:
+.L37:
 	add	w4, w4, 1
 	and	w4, w4, 65535
 	cmp	w4, w6
-	blt	.L39
+	blt	.L38
 	mov	w0, w5
 	ldp	x29, x30, [sp], 16
 	ret
@@ -455,8 +440,8 @@ V2P_block:
 	add	x4, x4, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	and	w1, w1, 65535
-	ldrh	w2, [x4, 268]
-	ldrh	w4, [x4, 310]
+	ldrh	w2, [x4, 260]
+	ldrh	w4, [x4, 302]
 	udiv	w3, w0, w2
 	msub	w0, w3, w2, w0
 	madd	w2, w2, w1, w0
@@ -470,8 +455,8 @@ P2V_plane:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	and	w3, w0, 65535
-	ldrh	w1, [x2, 268]
-	ldrh	w2, [x2, 310]
+	ldrh	w1, [x2, 260]
+	ldrh	w2, [x2, 302]
 	udiv	w0, w3, w1
 	udiv	w2, w3, w2
 	msub	w0, w0, w1, w3
@@ -485,8 +470,8 @@ P2V_block_in_plane:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	and	w3, w0, 65535
-	ldrh	w2, [x1, 310]
-	ldrh	w1, [x1, 268]
+	ldrh	w2, [x1, 302]
+	ldrh	w1, [x1, 260]
 	udiv	w0, w3, w2
 	msub	w0, w0, w2, w3
 	and	w0, w0, 65535
@@ -499,12 +484,12 @@ P2V_block_in_plane:
 ftl_cmp_data_ver:
 	cmp	w0, w1
 	mov	w2, -2147483648
-	bls	.L51
+	bls	.L50
 	sub	w1, w0, w1
 	cmp	w1, w2
 	cset	w0, ls
 	ret
-.L51:
+.L50:
 	sub	w1, w1, w0
 	cmp	w1, w2
 	cset	w0, hi
@@ -514,8 +499,8 @@ ftl_cmp_data_ver:
 	.global	FtlFreeSysBlkQueueEmpty
 	.type	FtlFreeSysBlkQueueEmpty, %function
 FtlFreeSysBlkQueueEmpty:
-	adrp	x0, .LANCHOR0+470
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+470]
+	adrp	x0, .LANCHOR0+462
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+462]
 	cmp	w0, 0
 	cset	w0, eq
 	ret
@@ -524,8 +509,8 @@ FtlFreeSysBlkQueueEmpty:
 	.global	FtlFreeSysBlkQueueFull
 	.type	FtlFreeSysBlkQueueFull, %function
 FtlFreeSysBlkQueueFull:
-	adrp	x0, .LANCHOR0+470
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+470]
+	adrp	x0, .LANCHOR0+462
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+462]
 	cmp	w0, 1024
 	cset	w0, eq
 	ret
@@ -536,25 +521,25 @@ FtlFreeSysBlkQueueFull:
 FtlFreeSysBLkSort:
 	adrp	x0, .LANCHOR0
 	add	x2, x0, :lo12:.LANCHOR0
-	add	x1, x2, 464
+	add	x1, x2, 456
 	ldrh	w3, [x1, 6]
-	cbz	w3, .L55
-	ldrh	w5, [x2, 2548]
+	cbz	w3, .L54
+	ldrh	w5, [x2, 2540]
 	mov	w6, 0
 	ldrh	w3, [x1, 2]
 	mov	w4, 0
 	ldrh	w2, [x1, 4]
 	and	w5, w5, 31
-.L57:
+.L56:
 	cmp	w5, w4
-	bgt	.L58
-	cbz	w6, .L55
+	bgt	.L57
+	cbz	w6, .L54
 	add	x0, x0, :lo12:.LANCHOR0
-	strh	w3, [x0, 466]
-	strh	w2, [x0, 468]
-.L55:
+	strh	w3, [x0, 458]
+	strh	w2, [x0, 460]
+.L54:
 	ret
-.L58:
+.L57:
 	add	x6, x1, x3, sxtw 1
 	add	w4, w4, 1
 	add	w3, w3, 1
@@ -566,7 +551,7 @@ FtlFreeSysBLkSort:
 	mov	w6, 1
 	add	w2, w2, w6
 	and	w2, w2, 1023
-	b	.L57
+	b	.L56
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	2
 	.global	IsInFreeQueue
@@ -574,29 +559,29 @@ FtlFreeSysBLkSort:
 IsInFreeQueue:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	add	x1, x1, 464
+	add	x1, x1, 456
 	and	w0, w0, 65535
 	ldrh	w4, [x1, 6]
 	cmp	w4, 1024
-	beq	.L68
+	beq	.L67
 	ldrh	w5, [x1, 2]
 	mov	w3, 0
-.L66:
+.L65:
 	cmp	w3, w4
-	bcc	.L67
-.L68:
+	bcc	.L66
+.L67:
 	mov	w0, 0
 	ret
-.L67:
+.L66:
 	add	w2, w3, w5
 	ubfiz	x2, x2, 1, 10
 	add	x2, x1, x2
 	ldrh	w2, [x2, 8]
 	cmp	w2, w0
-	beq	.L69
+	beq	.L68
 	add	w3, w3, 1
-	b	.L66
-.L69:
+	b	.L65
+.L68:
 	mov	w0, 1
 	ret
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -608,29 +593,29 @@ insert_data_list:
 	add	x3, x2, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	mov	x4, x2
-	ldrh	w1, [x3, 252]
+	ldrh	w1, [x3, 244]
 	cmp	w1, w0
-	bls	.L72
+	bls	.L71
 	mov	w6, 6
-	ldr	x8, [x3, 2568]
+	ldr	x8, [x3, 2560]
 	mov	w1, -1
 	umull	x7, w0, w6
 	add	x13, x8, x7
 	strh	w1, [x13, 2]
 	strh	w1, [x8, x7]
-	ldr	x1, [x3, 2576]
-	cbnz	x1, .L73
-	str	x13, [x3, 2576]
-.L72:
+	ldr	x1, [x3, 2568]
+	cbnz	x1, .L72
+	str	x13, [x3, 2568]
+.L71:
 	mov	w0, 0
 	ret
-.L73:
-	ldr	x11, [x3, 80]
+.L72:
+	ldr	x11, [x3, 72]
 	ubfiz	x2, x0, 1, 16
-	ldr	x10, [x3, 2568]
+	ldr	x10, [x3, 2560]
 	mov	x9, -6148914691236517206
 	movk	x9, 0xaaab, lsl 0
-	ldrh	w14, [x3, 252]
+	ldrh	w14, [x3, 244]
 	mov	w15, 65535
 	mov	w3, 0
 	ldrh	w5, [x11, x2]
@@ -642,51 +627,51 @@ insert_data_list:
 	csinv	w5, w5, wzr, ne
 	mul	x2, x2, x9
 	and	w2, w2, 65535
-.L78:
+.L77:
 	add	w3, w3, 1
 	and	w3, w3, 65535
 	cmp	w3, w14
-	bhi	.L72
+	bhi	.L71
 	cmp	w0, w2
-	beq	.L72
+	beq	.L71
 	ldrh	w12, [x1, 4]
-	cbz	w12, .L76
+	cbz	w12, .L75
 	ubfiz	x9, x2, 1, 16
 	ldrh	w9, [x11, x9]
 	mul	w9, w9, w12
 	cmp	w9, w5
-	bcs	.L76
+	bcs	.L75
 	ldrh	w9, [x1]
 	cmp	w9, w15
-	bne	.L77
+	bne	.L76
 	strh	w2, [x13, 2]
 	add	x2, x4, :lo12:.LANCHOR0
 	strh	w0, [x1]
-	str	x13, [x2, 2584]
-	b	.L72
-.L77:
+	str	x13, [x2, 2576]
+	b	.L71
+.L76:
 	umaddl	x1, w9, w6, x10
 	mov	w2, w9
-	b	.L78
-.L76:
+	b	.L77
+.L75:
 	strh	w2, [x8, x7]
 	ldrh	w2, [x1, 2]
 	strh	w2, [x13, 2]
 	add	x2, x4, :lo12:.LANCHOR0
-	ldr	x3, [x2, 2576]
+	ldr	x3, [x2, 2568]
 	cmp	x1, x3
-	bne	.L79
+	bne	.L78
 	strh	w0, [x1, 2]
-	str	x13, [x2, 2576]
-	b	.L72
-.L79:
+	str	x13, [x2, 2568]
+	b	.L71
+.L78:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
-	ldr	x2, [x2, 2568]
+	ldr	x2, [x2, 2560]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L72
+	b	.L71
 	.size	insert_data_list, .-insert_data_list
 	.align	2
 	.global	INSERT_DATA_LIST
@@ -697,20 +682,20 @@ INSERT_DATA_LIST:
 	bl	insert_data_list
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 2592]
+	ldrh	w0, [x1, 2584]
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	strh	w0, [x1, 2592]
-	ldrh	w1, [x1, 252]
+	strh	w0, [x1, 2584]
+	ldrh	w1, [x1, 244]
 	cmp	w1, w0
-	bcs	.L84
+	bcs	.L83
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC8
 	mov	w2, 214
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L84:
+.L83:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -721,27 +706,27 @@ insert_free_list:
 	and	w0, w0, 65535
 	mov	w7, 65535
 	cmp	w0, w7
-	beq	.L88
+	beq	.L87
 	adrp	x2, .LANCHOR0
 	add	x5, x2, :lo12:.LANCHOR0
 	mov	w6, 6
 	mov	w1, -1
 	mov	x3, x2
-	ldr	x9, [x5, 2568]
+	ldr	x9, [x5, 2560]
 	umull	x8, w0, w6
 	add	x4, x9, x8
 	strh	w1, [x4, 2]
 	strh	w1, [x9, x8]
-	ldr	x1, [x5, 2600]
-	cbnz	x1, .L89
-	str	x4, [x5, 2600]
-.L88:
+	ldr	x1, [x5, 2592]
+	cbnz	x1, .L88
+	str	x4, [x5, 2592]
+.L87:
 	mov	w0, 0
 	ret
-.L89:
-	ldr	x11, [x5, 2608]
+.L88:
+	ldr	x11, [x5, 2600]
 	ubfiz	x2, x0, 1, 16
-	ldr	x10, [x5, 2568]
+	ldr	x10, [x5, 2560]
 	mov	x5, -6148914691236517206
 	movk	x5, 0xaaab, lsl 0
 	ldrh	w12, [x11, x2]
@@ -749,40 +734,40 @@ insert_free_list:
 	asr	x2, x2, 1
 	mul	x2, x2, x5
 	and	w2, w2, 65535
-.L92:
+.L91:
 	ubfiz	x5, x2, 1, 16
 	ldrh	w5, [x11, x5]
 	cmp	w5, w12
-	bcs	.L90
+	bcs	.L89
 	ldrh	w5, [x1]
 	cmp	w5, w7
-	bne	.L91
+	bne	.L90
 	strh	w2, [x4, 2]
 	strh	w0, [x1]
-	b	.L88
-.L91:
+	b	.L87
+.L90:
 	umaddl	x1, w5, w6, x10
 	mov	w2, w5
-	b	.L92
-.L90:
+	b	.L91
+.L89:
 	ldrh	w5, [x1, 2]
 	strh	w5, [x4, 2]
 	strh	w2, [x9, x8]
 	add	x2, x3, :lo12:.LANCHOR0
-	ldr	x3, [x2, 2600]
+	ldr	x3, [x2, 2592]
 	cmp	x1, x3
-	bne	.L93
+	bne	.L92
 	strh	w0, [x1, 2]
-	str	x4, [x2, 2600]
-	b	.L88
-.L93:
+	str	x4, [x2, 2592]
+	b	.L87
+.L92:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
-	ldr	x2, [x2, 2568]
+	ldr	x2, [x2, 2560]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L88
+	b	.L87
 	.size	insert_free_list, .-insert_free_list
 	.align	2
 	.global	INSERT_FREE_LIST
@@ -793,13 +778,13 @@ INSERT_FREE_LIST:
 	bl	insert_free_list
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 236]
+	ldrh	w0, [x1, 228]
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	strh	w0, [x1, 236]
-	ldrh	w1, [x1, 252]
+	strh	w0, [x1, 228]
+	ldrh	w1, [x1, 244]
 	cmp	w1, w0
-	bcs	.L94
+	bcs	.L93
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -807,7 +792,7 @@ INSERT_FREE_LIST:
 	add	x1, x1, 24
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L94:
+.L93:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -826,15 +811,15 @@ List_remove_node:
 	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	umull	x21, w1, w2
-	ldr	x22, [x0, 2568]
+	ldr	x22, [x0, 2560]
 	mov	w0, 65535
 	add	x20, x22, x21
 	ldrh	w1, [x20, 2]
 	cmp	w1, w0
-	bne	.L98
+	bne	.L97
 	ldr	x0, [x23]
 	cmp	x20, x0
-	beq	.L98
+	beq	.L97
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -842,16 +827,16 @@ List_remove_node:
 	add	x1, x1, 48
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L98:
+.L97:
 	ldr	x0, [x23]
 	mov	w1, 65535
 	cmp	x20, x0
 	ldrh	w0, [x22, x21]
-	bne	.L99
+	bne	.L98
 	cmp	w0, w1
-	bne	.L100
+	bne	.L99
 	str	xzr, [x23]
-.L101:
+.L100:
 	mov	w0, -1
 	strh	w0, [x22, x21]
 	strh	w0, [x20, 2]
@@ -861,58 +846,58 @@ List_remove_node:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L100:
+.L99:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
-	ldr	x1, [x19, 2568]
+	ldr	x1, [x19, 2560]
 	umaddl	x0, w0, w2, x1
 	mov	w1, -1
 	str	x0, [x23]
 	strh	w1, [x0, 2]
-	b	.L101
-.L99:
+	b	.L100
+.L98:
 	cmp	w0, w1
 	ldrh	w1, [x20, 2]
-	bne	.L102
+	bne	.L101
 	cmp	w1, w0
-	beq	.L101
+	beq	.L100
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 6
 	mov	w2, -1
 	umull	x1, w1, w0
-	ldr	x0, [x19, 2568]
+	ldr	x0, [x19, 2560]
 	strh	w2, [x0, x1]
-	b	.L101
-.L102:
+	b	.L100
+.L101:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
-	ldr	x3, [x19, 2568]
+	ldr	x3, [x19, 2560]
 	umaddl	x0, w0, w2, x3
 	strh	w1, [x0, 2]
 	ldrh	w0, [x20, 2]
-	ldr	x1, [x19, 2568]
+	ldr	x1, [x19, 2560]
 	ldrh	w3, [x22, x21]
 	umull	x0, w0, w2
 	strh	w3, [x1, x0]
-	b	.L101
+	b	.L100
 	.size	List_remove_node, .-List_remove_node
 	.align	2
 	.global	List_pop_index_node
 	.type	List_pop_index_node, %function
 List_pop_index_node:
 	ldr	x2, [x0]
-	cbz	x2, .L110
+	cbz	x2, .L109
 	stp	x29, x30, [sp, -32]!
-	adrp	x3, .LANCHOR0+2568
+	adrp	x3, .LANCHOR0+2560
 	and	w1, w1, 65535
 	mov	w4, 65535
 	add	x29, sp, 0
 	str	x19, [sp, 16]
 	mov	w5, 6
-	ldr	x19, [x3, #:lo12:.LANCHOR0+2568]
-.L106:
-	cbnz	w1, .L107
-.L109:
+	ldr	x19, [x3, #:lo12:.LANCHOR0+2560]
+.L105:
+	cbnz	w1, .L106
+.L108:
 	sub	x19, x2, x19
 	mov	x2, -6148914691236517206
 	asr	x19, x19, 1
@@ -925,15 +910,15 @@ List_pop_index_node:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L107:
+.L106:
 	ldrh	w3, [x2]
 	cmp	w3, w4
-	beq	.L109
+	beq	.L108
 	sub	w1, w1, #1
 	umaddl	x2, w3, w5, x19
 	and	w1, w1, 65535
-	b	.L106
-.L110:
+	b	.L105
+.L109:
 	mov	w0, 65535
 	ret
 	.size	List_pop_index_node, .-List_pop_index_node
@@ -955,26 +940,26 @@ List_get_gc_head_node:
 	and	w2, w0, 65535
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldr	x1, [x0, 2576]
-	cbz	x1, .L122
-	ldr	x3, [x0, 2568]
+	ldr	x1, [x0, 2568]
+	cbz	x1, .L121
+	ldr	x3, [x0, 2560]
 	mov	w4, 6
 	mov	w0, 65535
-.L119:
-	cbz	w2, .L120
+.L118:
+	cbz	w2, .L119
 	ldrh	w1, [x1]
 	cmp	w1, w0
-	bne	.L121
+	bne	.L120
 	ret
-.L121:
+.L120:
 	sub	w2, w2, #1
 	umaddl	x1, w1, w4, x3
 	and	w2, w2, 65535
-	b	.L119
-.L122:
+	b	.L118
+.L121:
 	mov	w0, 65535
 	ret
-.L120:
+.L119:
 	sub	x0, x1, x3
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
@@ -995,23 +980,23 @@ List_update_data_list:
 	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	ldrh	w1, [x0, 32]
+	ldrh	w1, [x0, 24]
 	cmp	w1, w20
-	beq	.L125
-	ldrh	w1, [x0, 88]
+	beq	.L124
+	ldrh	w1, [x0, 80]
 	cmp	w1, w20
-	beq	.L125
-	ldrh	w1, [x0, 136]
+	beq	.L124
+	ldrh	w1, [x0, 128]
 	cmp	w1, w20
-	beq	.L125
+	beq	.L124
 	mov	w22, 6
-	ldr	x24, [x0, 2568]
-	ldr	x1, [x0, 2576]
+	ldr	x24, [x0, 2560]
+	ldr	x1, [x0, 2568]
 	umull	x22, w20, w22
 	add	x23, x24, x22
 	cmp	x23, x1
-	beq	.L125
-	ldr	x2, [x0, 80]
+	beq	.L124
+	ldr	x2, [x0, 72]
 	ubfiz	x1, x20, 1, 16
 	ldrh	w0, [x23, 4]
 	cmp	w0, 0
@@ -1021,10 +1006,10 @@ List_update_data_list:
 	ldrh	w0, [x23, 2]
 	csinv	w21, w21, wzr, ne
 	cmp	w0, w1
-	bne	.L128
+	bne	.L127
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	bne	.L128
+	bne	.L127
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -1032,15 +1017,15 @@ List_update_data_list:
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L128:
+.L127:
 	ldrh	w0, [x23, 2]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L129
+	bne	.L128
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	beq	.L125
-.L129:
+	beq	.L124
+.L128:
 	mov	w1, 6
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	x2, -6148914691236517206
@@ -1048,21 +1033,21 @@ List_update_data_list:
 	movk	x2, 0xaaab, lsl 0
 	asr	x1, x0, 1
 	mul	x1, x1, x2
-	ldr	x2, [x22, 80]
+	ldr	x2, [x22, 72]
 	ldrh	w1, [x2, x1, lsl 1]
-	ldr	x2, [x22, 2568]
+	ldr	x2, [x22, 2560]
 	add	x0, x2, x0
 	ldrh	w2, [x0, 4]
 	cmp	w2, 0
 	mul	w0, w1, w2
 	csinv	w0, w0, wzr, ne
 	cmp	w21, w0
-	bcs	.L125
+	bcs	.L124
 	mov	w1, w20
-	add	x0, x22, 2576
+	add	x0, x22, 2568
 	bl	List_remove_node
-	ldrh	w0, [x22, 2592]
-	cbnz	w0, .L131
+	ldrh	w0, [x22, 2584]
+	cbnz	w0, .L130
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -1070,14 +1055,14 @@ List_update_data_list:
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L131:
+.L130:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 2592]
+	ldrh	w0, [x19, 2584]
 	sub	w0, w0, #1
-	strh	w0, [x19, 2592]
+	strh	w0, [x19, 2584]
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L125:
+.L124:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -1096,31 +1081,31 @@ select_l2p_ram_region:
 	add	x29, sp, 0
 	str	x19, [sp, 16]
 	mov	w4, 65535
-	ldrh	w2, [x0, 350]
-	ldr	x0, [x0, 2616]
-.L136:
+	ldrh	w2, [x0, 342]
+	ldr	x0, [x0, 2608]
+.L135:
 	and	w19, w3, 65535
 	cmp	w19, w2
-	bcc	.L138
+	bcc	.L137
 	add	x4, x0, 4
 	mov	w19, w2
 	mov	w6, -2147483648
 	mov	w3, 0
-.L139:
+.L138:
 	cmp	w3, w2
-	bne	.L141
+	bne	.L140
 	cmp	w19, w2
-	bcc	.L137
+	bcc	.L136
 	add	x1, x1, :lo12:.LANCHOR0
 	mov	w19, w2
 	mov	w3, -1
-	ldrh	w4, [x1, 2624]
+	ldrh	w4, [x1, 2616]
 	mov	w1, 0
-.L142:
+.L141:
 	cmp	w1, w2
-	bne	.L144
+	bne	.L143
 	cmp	w19, w1
-	bcc	.L137
+	bcc	.L136
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 789
@@ -1128,43 +1113,43 @@ select_l2p_ram_region:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L137
-.L138:
+	b	.L136
+.L137:
 	add	x3, x3, 1
 	add	x5, x0, x3, lsl 4
 	ldrh	w5, [x5, -16]
 	cmp	w5, w4
-	bne	.L136
-.L137:
+	bne	.L135
+.L136:
 	mov	w0, w19
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L141:
+.L140:
 	ldr	w5, [x4]
-	tbnz	w5, #31, .L140
+	tbnz	w5, #31, .L139
 	cmp	w6, w5
-	bls	.L140
+	bls	.L139
 	mov	w6, w5
 	mov	w19, w3
-.L140:
+.L139:
 	add	w3, w3, 1
 	add	x4, x4, 16
 	and	w3, w3, 65535
-	b	.L139
-.L144:
+	b	.L138
+.L143:
 	ldr	w6, [x0, 4]
 	cmp	w3, w6
-	bls	.L143
+	bls	.L142
 	ldrh	w5, [x0]
 	cmp	w5, w4
 	csel	w3, w3, w6, eq
 	csel	w19, w19, w1, eq
-.L143:
+.L142:
 	add	w1, w1, 1
 	add	x0, x0, 16
 	and	w1, w1, 65535
-	b	.L142
+	b	.L141
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
 	.global	FtlUpdateVaildLpn
@@ -1172,66 +1157,43 @@ select_l2p_ram_region:
 FtlUpdateVaildLpn:
 	adrp	x1, .LANCHOR0
 	add	x3, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x3, 2626]
+	ldrh	w2, [x3, 2618]
 	cmp	w2, 4
-	bhi	.L147
-	cbnz	w0, .L147
+	bhi	.L146
+	cbnz	w0, .L146
 	add	w2, w2, 1
-	strh	w2, [x3, 2626]
+	strh	w2, [x3, 2618]
 	ret
-.L147:
+.L146:
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	w6, 65535
 	mov	x1, 0
-	ldrh	w4, [x0, 252]
-	ldr	x5, [x0, 80]
-	strh	wzr, [x0, 2626]
-	str	wzr, [x0, 2628]
-.L148:
+	ldrh	w4, [x0, 244]
+	ldr	x5, [x0, 72]
+	strh	wzr, [x0, 2618]
+	str	wzr, [x0, 2620]
+.L147:
 	cmp	w4, w1, uxth
-	bhi	.L150
+	bhi	.L149
 	ret
-.L150:
+.L149:
 	ldrh	w3, [x5, x1, lsl 1]
 	cmp	w3, w6
-	beq	.L149
-	ldr	w2, [x0, 2628]
+	beq	.L148
+	ldr	w2, [x0, 2620]
 	add	w2, w2, w3
-	str	w2, [x0, 2628]
-.L149:
+	str	w2, [x0, 2620]
+.L148:
 	add	x1, x1, 1
-	b	.L148
+	b	.L147
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
-	.global	ftl_set_blk_mode
-	.type	ftl_set_blk_mode, %function
-ftl_set_blk_mode:
-	and	w0, w0, 65535
-	cbz	w1, .L153
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	ftl_set_blk_mode.part.7
-	ldp	x29, x30, [sp], 16
-	ret
-.L153:
-	adrp	x1, .LANCHOR0+24
-	ubfx	x2, x0, 5, 11
-	lsl	x2, x2, 2
-	ldr	x3, [x1, #:lo12:.LANCHOR0+24]
-	mov	w1, 1
-	lsl	w0, w1, w0
-	ldr	w1, [x3, x2]
-	bic	w0, w1, w0
-	str	w0, [x3, x2]
-	ret
-	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
-	.align	2
 	.global	ftl_get_blk_mode
 	.type	ftl_get_blk_mode, %function
 ftl_get_blk_mode:
 	and	w1, w0, 65535
-	adrp	x0, .LANCHOR0+24
-	ldr	x0, [x0, #:lo12:.LANCHOR0+24]
+	adrp	x0, .LANCHOR0+2624
+	ldr	x0, [x0, #:lo12:.LANCHOR0+2624]
 	ubfx	x2, x1, 5, 11
 	ldr	w0, [x0, x2, lsl 2]
 	lsr	w0, w0, w1
@@ -1247,84 +1209,84 @@ ftl_sb_update_avl_pages:
 	add	x1, x4, :lo12:.LANCHOR0
 	and	w2, w2, 65535
 	strh	wzr, [x0, 4]
-	ldrh	w3, [x1, 244]
+	ldrh	w3, [x1, 236]
 	mov	w1, 65535
-.L161:
+.L153:
 	cmp	w3, w2, uxth
-	bhi	.L163
+	bhi	.L155
 	add	x4, x4, :lo12:.LANCHOR0
 	ubfiz	x3, x3, 1, 16
 	add	x3, x3, 16
 	add	x2, x0, 16
 	add	x3, x0, x3
 	mov	w5, 65535
-	ldrh	w1, [x4, 314]
+	ldrh	w1, [x4, 306]
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	sub	w1, w1, w6
-.L164:
+.L156:
 	cmp	x2, x3
-	bne	.L166
+	bne	.L158
 	ret
-.L163:
+.L155:
 	add	x5, x0, x2, sxtw 1
 	ldrh	w5, [x5, 16]
 	cmp	w5, w1
-	beq	.L162
+	beq	.L154
 	ldrh	w5, [x0, 4]
 	add	w5, w5, 1
 	strh	w5, [x0, 4]
-.L162:
+.L154:
 	add	w2, w2, 1
-	b	.L161
-.L166:
+	b	.L153
+.L158:
 	ldrh	w4, [x2]
 	cmp	w4, w5
-	beq	.L165
+	beq	.L157
 	ldrh	w4, [x0, 4]
 	add	w4, w1, w4
 	strh	w4, [x0, 4]
-.L165:
+.L157:
 	add	x2, x2, 2
-	b	.L164
+	b	.L156
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
 	.global	FtlSlcSuperblockCheck
 	.type	FtlSlcSuperblockCheck, %function
 FtlSlcSuperblockCheck:
 	ldrh	w1, [x0, 4]
-	cbz	w1, .L167
+	cbz	w1, .L159
 	ldrh	w2, [x0]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L167
+	beq	.L159
 	ldrb	w2, [x0, 6]
 	add	x2, x2, 8
 	ldrh	w3, [x0, x2, lsl 1]
-	adrp	x2, .LANCHOR0+244
-	ldrh	w4, [x2, #:lo12:.LANCHOR0+244]
+	adrp	x2, .LANCHOR0+236
+	ldrh	w4, [x2, #:lo12:.LANCHOR0+236]
 	mov	w2, w1
-.L170:
+.L162:
 	cmp	w3, w2
-	beq	.L172
-.L167:
+	beq	.L164
+.L159:
 	ret
-.L172:
+.L164:
 	ldrb	w1, [x0, 6]
 	add	w1, w1, 1
 	and	w1, w1, 255
 	strb	w1, [x0, 6]
 	cmp	w1, w4
-	bne	.L171
+	bne	.L163
 	ldrh	w1, [x0, 2]
 	strb	wzr, [x0, 6]
 	add	w1, w1, 1
 	strh	w1, [x0, 2]
-.L171:
+.L163:
 	ldrb	w1, [x0, 6]
 	add	x1, x1, 8
 	ldrh	w3, [x0, x1, lsl 1]
-	b	.L170
+	b	.L162
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
 	.global	make_superblock
@@ -1337,63 +1299,63 @@ make_superblock:
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19]
-	ldrh	w0, [x0, 252]
+	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L174
+	bcc	.L166
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2148
+	mov	w2, 2150
 	add	x1, x1, 120
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L174:
+.L166:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x6, x19, 16
-	add	x7, x0, 272
+	add	x7, x0, 264
 	strh	wzr, [x19, 4]
 	strb	wzr, [x19, 7]
 	mov	x5, 0
-	ldrh	w8, [x0, 244]
+	ldrh	w8, [x0, 236]
 	mov	w9, -1
-.L175:
+.L167:
 	cmp	w8, w5, uxth
-	bhi	.L177
+	bhi	.L169
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x19, 7]
 	strb	wzr, [x19, 9]
-	ldrh	w1, [x20, 314]
+	ldrh	w1, [x20, 306]
 	mul	w0, w0, w1
 	ldrh	w1, [x19]
 	strh	w0, [x19, 4]
-	ldr	x0, [x20, 2608]
+	ldr	x0, [x20, 2600]
 	ldrh	w1, [x0, x1, lsl 1]
 	mov	w0, 10000
 	cmp	w1, w0
-	bls	.L178
+	bls	.L170
 	mov	w0, 1
 	strb	w0, [x19, 9]
-.L178:
+.L170:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L177:
+.L169:
 	ldrh	w1, [x19]
 	ldrb	w0, [x7, x5]
 	bl	V2P_block
 	mov	w4, w0
 	strh	w9, [x6]
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L176
+	cbnz	w0, .L168
 	strh	w4, [x6]
 	ldrb	w0, [x19, 7]
 	add	w0, w0, 1
 	strb	w0, [x19, 7]
-.L176:
+.L168:
 	add	x5, x5, 1
 	add	x6, x6, 2
-	b	.L175
+	b	.L167
 	.size	make_superblock, .-make_superblock
 	.align	2
 	.global	update_multiplier_value
@@ -1405,50 +1367,50 @@ update_multiplier_value:
 	mov	x9, 0
 	mov	w6, 0
 	mov	x5, x0
-	add	x7, x1, 272
-	ldrh	w10, [x1, 244]
-	ldrh	w11, [x1, 314]
+	add	x7, x1, 264
+	ldrh	w10, [x1, 236]
+	ldrh	w11, [x1, 306]
 	cmp	w10, w9, uxth
-	bhi	.L192
-	cbz	w6, .L190
+	bhi	.L184
+	cbz	w6, .L182
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L191:
+.L183:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
-	ldr	x0, [x0, 2568]
+	ldr	x0, [x0, 2560]
 	umaddl	x8, w8, w1, x0
 	mov	w0, 0
 	strh	w6, [x8, 4]
 	ret
-.L185:
+.L177:
 	mov	w6, 0
-	b	.L184
-.L190:
+	b	.L176
+.L182:
 	mov	w6, 0
-	b	.L191
-.L192:
+	b	.L183
+.L184:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L183:
+.L175:
 	ldrb	w0, [x7, x9]
 	mov	w1, w8
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L182
+	cbnz	w0, .L174
 	add	w6, w6, w11
 	and	w6, w6, 65535
-.L182:
+.L174:
 	add	x9, x9, 1
 	cmp	w10, w9, uxth
-	bhi	.L183
-	cbz	w6, .L185
+	bhi	.L175
+	cbz	w6, .L177
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L184:
+.L176:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
-	ldr	x0, [x0, 2568]
+	ldr	x0, [x0, 2560]
 	umaddl	x8, w8, w1, x0
 	mov	w0, 0
 	strh	w6, [x8, 4]
@@ -1461,10 +1423,10 @@ update_multiplier_value:
 GetFreeBlockMinEraseCount:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
-	ldr	x0, [x1, 2600]
-	cbz	x0, .L195
-	ldr	x2, [x1, 2568]
-	ldr	x1, [x1, 2608]
+	ldr	x0, [x1, 2592]
+	cbz	x0, .L187
+	ldr	x2, [x1, 2560]
+	ldr	x1, [x1, 2600]
 	sub	x0, x0, x2
 	mov	x2, -6148914691236517206
 	asr	x0, x0, 1
@@ -1473,7 +1435,7 @@ GetFreeBlockMinEraseCount:
 	and	x0, x0, 65535
 	ldrh	w0, [x1, x0, lsl 1]
 	ret
-.L195:
+.L187:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
@@ -1484,11 +1446,11 @@ GetFreeBlockMaxEraseCount:
 	adrp	x2, .LANCHOR0
 	add	x4, x2, :lo12:.LANCHOR0
 	and	w0, w0, 65535
-	ldr	x1, [x4, 2600]
-	cbz	x1, .L203
-	ldrh	w3, [x4, 236]
+	ldr	x1, [x4, 2592]
+	cbz	x1, .L195
+	ldrh	w3, [x4, 228]
 	mov	w5, 7
-	ldr	x4, [x4, 2568]
+	ldr	x4, [x4, 2560]
 	mov	w6, 6
 	mov	w7, 65535
 	sub	x1, x1, x4
@@ -1502,25 +1464,25 @@ GetFreeBlockMaxEraseCount:
 	mul	x1, x1, x3
 	mov	w3, 0
 	and	w1, w1, 65535
-.L199:
+.L191:
 	cmp	w0, w3
-	beq	.L202
+	beq	.L194
 	umull	x5, w1, w6
 	ldrh	w5, [x4, x5]
 	cmp	w5, w7
-	bne	.L200
-.L202:
+	bne	.L192
+.L194:
 	add	x2, x2, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
-	ldr	x0, [x2, 2608]
+	ldr	x0, [x2, 2600]
 	ldrh	w0, [x0, x1]
 	ret
-.L200:
+.L192:
 	add	w3, w3, 1
 	mov	w1, w5
 	and	w3, w3, 65535
-	b	.L199
-.L203:
+	b	.L191
+.L195:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
@@ -1542,7 +1504,7 @@ FtlPrintInfo2buf:
 	add	x20, x0, 12
 	str	x27, [sp, 80]
 	bl	strcpy
-	ldr	w3, [x21, 328]
+	ldr	w3, [x21, 320]
 	adrp	x2, .LC10
 	add	x2, x2, :lo12:.LC10
 	mov	x1, 64
@@ -1561,7 +1523,7 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC12
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w3, [x21, 2628]
+	ldr	w3, [x21, 2620]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC13
@@ -1640,14 +1602,14 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC23
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 374]
+	ldrh	w3, [x21, 366]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC24
 	add	x2, x2, :lo12:.LC24
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 236]
+	ldrh	w3, [x21, 228]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC25
@@ -1696,49 +1658,49 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC31
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 2550]
+	ldrh	w3, [x21, 2542]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC32
 	add	x2, x2, :lo12:.LC32
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 2548]
+	ldrh	w3, [x21, 2540]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC33
 	add	x2, x2, :lo12:.LC33
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w3, [x21, 352]
+	ldr	w3, [x21, 344]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC34
 	add	x2, x2, :lo12:.LC34
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w3, [x21, 344]
+	ldr	w3, [x21, 336]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC35
 	add	x2, x2, :lo12:.LC35
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w3, [x21, 240]
+	ldr	w3, [x21, 232]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC36
 	add	x2, x2, :lo12:.LC36
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 470]
+	ldrh	w3, [x21, 462]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC37
 	add	x2, x2, :lo12:.LC37
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 252]
+	ldrh	w3, [x21, 244]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC38
@@ -1752,7 +1714,7 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC39
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w3, [x21, 256]
+	ldr	w3, [x21, 248]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC40
@@ -1766,165 +1728,165 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC41
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 368]
+	ldrh	w3, [x21, 360]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC42
 	add	x2, x2, :lo12:.LC42
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 34]
+	ldrh	w3, [x21, 26]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC43
 	add	x2, x2, :lo12:.LC43
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 38]
+	ldrb	w3, [x21, 30]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC44
 	add	x2, x2, :lo12:.LC44
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 32]
+	ldrh	w3, [x21, 24]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC45
 	add	x2, x2, :lo12:.LC45
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 40]
+	ldrb	w3, [x21, 32]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC46
 	add	x2, x2, :lo12:.LC46
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 36]
+	ldrh	w3, [x21, 28]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC47
 	add	x2, x2, :lo12:.LC47
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w1, [x21, 32]
+	ldrh	w1, [x21, 24]
 	adrp	x2, .LC48
-	ldr	x0, [x21, 80]
+	ldr	x0, [x21, 72]
 	add	x2, x2, :lo12:.LC48
 	ldrh	w3, [x0, x1, lsl 1]
 	mov	x1, 64
 	mov	x0, x20
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 90]
+	ldrh	w3, [x21, 82]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC49
 	add	x2, x2, :lo12:.LC49
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 94]
+	ldrb	w3, [x21, 86]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC50
 	add	x2, x2, :lo12:.LC50
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 88]
+	ldrh	w3, [x21, 80]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC51
 	add	x2, x2, :lo12:.LC51
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 96]
+	ldrb	w3, [x21, 88]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC52
 	add	x2, x2, :lo12:.LC52
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 92]
+	ldrh	w3, [x21, 84]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC53
 	add	x2, x2, :lo12:.LC53
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w1, [x21, 88]
+	ldrh	w1, [x21, 80]
 	adrp	x2, .LC54
-	ldr	x0, [x21, 80]
+	ldr	x0, [x21, 72]
 	add	x2, x2, :lo12:.LC54
 	ldrh	w3, [x0, x1, lsl 1]
 	mov	x1, 64
 	mov	x0, x20
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 138]
+	ldrh	w3, [x21, 130]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC55
 	add	x2, x2, :lo12:.LC55
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 142]
+	ldrb	w3, [x21, 134]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC56
 	add	x2, x2, :lo12:.LC56
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 136]
+	ldrh	w3, [x21, 128]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC57
 	add	x2, x2, :lo12:.LC57
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 144]
+	ldrb	w3, [x21, 136]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC58
 	add	x2, x2, :lo12:.LC58
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 140]
+	ldrh	w3, [x21, 132]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC59
 	add	x2, x2, :lo12:.LC59
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 186]
+	ldrh	w3, [x21, 178]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC60
 	add	x2, x2, :lo12:.LC60
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 190]
+	ldrb	w3, [x21, 182]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC61
 	add	x2, x2, :lo12:.LC61
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 184]
+	ldrh	w3, [x21, 176]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC62
 	add	x2, x2, :lo12:.LC62
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w3, [x21, 192]
+	ldrb	w3, [x21, 184]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC63
 	add	x2, x2, :lo12:.LC63
 	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w3, [x21, 188]
+	ldrh	w3, [x21, 180]
 	mov	x1, 64
 	mov	x0, x20
 	adrp	x2, .LC64
@@ -1990,7 +1952,7 @@ FtlPrintInfo2buf:
 	add	x2, x2, :lo12:.LC72
 	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w0, [x21, 236]
+	ldrh	w0, [x21, 228]
 	bl	GetFreeBlockMaxEraseCount
 	and	w3, w0, 65535
 	adrp	x2, .LC73
@@ -2002,8 +1964,8 @@ FtlPrintInfo2buf:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	beq	.L205
-.L210:
+	beq	.L197
+.L202:
 	sub	w0, w19, w22
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -2012,12 +1974,12 @@ FtlPrintInfo2buf:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L205:
-	ldrh	w0, [x21, 184]
+.L197:
+	ldrh	w0, [x21, 176]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L207
-	ldr	x1, [x21, 80]
+	beq	.L199
+	ldr	x1, [x21, 72]
 	ubfiz	x0, x0, 1, 16
 	adrp	x2, .LC74
 	add	x2, x2, :lo12:.LC74
@@ -2026,7 +1988,7 @@ FtlPrintInfo2buf:
 	mov	x1, 64
 	bl	snprintf
 	add	x19, x19, x0, sxtw
-.L207:
+.L199:
 	mov	w0, 0
 	adrp	x24, .LC75
 	bl	List_get_gc_head_node
@@ -2036,14 +1998,14 @@ FtlPrintInfo2buf:
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-.L209:
+.L201:
 	cmp	w4, w27
-	beq	.L208
+	beq	.L200
 	umull	x25, w4, w26
-	ldr	x0, [x21, 2568]
-	ldr	x2, [x21, 80]
+	ldr	x0, [x21, 2560]
+	ldr	x2, [x21, 72]
 	ubfiz	x1, x4, 1, 16
-	ldr	x3, [x21, 2608]
+	ldr	x3, [x21, 2600]
 	add	x0, x0, x25
 	ldrh	w5, [x2, x1]
 	mov	x2, x24
@@ -2055,31 +2017,31 @@ FtlPrintInfo2buf:
 	add	w20, w20, 1
 	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21, 2568]
+	ldr	x0, [x21, 2560]
 	cmp	w20, 16
 	ldrh	w4, [x0, x25]
-	bne	.L209
-.L208:
+	bne	.L201
+.L200:
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x21, .LC76
 	add	x21, x21, :lo12:.LC76
 	mov	w20, 0
 	mov	w25, 65535
 	mov	w26, 6
-	ldr	x0, [x23, 2568]
-	ldr	x4, [x23, 2600]
+	ldr	x0, [x23, 2560]
+	ldr	x4, [x23, 2592]
 	sub	x4, x4, x0
 	mov	x0, -6148914691236517206
 	asr	x4, x4, 1
 	movk	x0, 0xaaab, lsl 0
 	mul	x4, x4, x0
 	and	w4, w4, 65535
-.L211:
+.L203:
 	cmp	w4, w25
-	beq	.L210
+	beq	.L202
 	umull	x24, w4, w26
-	ldr	x0, [x23, 2568]
-	ldr	x2, [x23, 2608]
+	ldr	x0, [x23, 2560]
+	ldr	x2, [x23, 2600]
 	ubfiz	x1, x4, 1, 16
 	add	x0, x0, x24
 	mov	w3, w20
@@ -2092,17 +2054,17 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	x19, x19, x0, sxtw
 	cmp	w20, 4
-	beq	.L210
-	ldr	x0, [x23, 2568]
+	beq	.L202
+	ldr	x0, [x23, 2560]
 	ldrh	w4, [x0, x24]
-	b	.L211
+	b	.L203
 	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
 	.align	2
 	.global	rknand_proc_ftlread
 	.type	rknand_proc_ftlread, %function
 rknand_proc_ftlread:
 	cmp	w0, 2047
-	ble	.L219
+	ble	.L211
 	stp	x29, x30, [sp, -32]!
 	adrp	x3, .LC0
 	adrp	x2, .LC77
@@ -2122,7 +2084,7 @@ rknand_proc_ftlread:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L219:
+.L211:
 	mov	w0, 0
 	ret
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
@@ -2138,126 +2100,126 @@ GetSwlReplaceBlock:
 	ldr	w2, [x0, 2684]
 	ldr	w1, [x0, 2696]
 	cmp	w2, w1
-	bcs	.L225
-	ldrh	w2, [x0, 252]
+	bcs	.L217
+	ldrh	w2, [x0, 244]
 	mov	x1, 0
-	ldr	x4, [x0, 2608]
+	ldr	x4, [x0, 2600]
 	str	wzr, [x0, 2676]
-.L226:
+.L218:
 	cmp	w2, w1
-	bhi	.L227
+	bhi	.L219
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w0, [x1, 2676]
 	udiv	w2, w0, w2
 	str	w2, [x1, 2684]
 	ldr	w2, [x1, 2680]
 	sub	w0, w0, w2
-	ldrh	w2, [x1, 304]
+	ldrh	w2, [x1, 296]
 	udiv	w0, w0, w2
 	str	w0, [x1, 2676]
-.L228:
+.L220:
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w9, [x1, 2696]
 	ldr	w11, [x1, 2684]
 	add	w0, w9, 256
 	cmp	w0, w11
-	bls	.L233
+	bls	.L225
 	ldr	w1, [x1, 2692]
 	add	w0, w9, 768
 	cmp	w0, w1
-	bls	.L233
-.L235:
+	bls	.L225
+.L227:
 	mov	w20, 65535
-.L234:
+.L226:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L227:
+.L219:
 	ldrh	w3, [x4, x1, lsl 1]
 	add	x1, x1, 1
 	ldr	w5, [x0, 2676]
 	add	w3, w3, w5
 	str	w3, [x0, 2676]
-	b	.L226
-.L225:
+	b	.L218
+.L217:
 	ldr	w1, [x0, 2692]
 	cmp	w2, w1
-	bls	.L228
+	bls	.L220
 	add	w1, w1, 1
 	str	w1, [x0, 2692]
 	mov	w1, 0
-.L230:
-	ldrh	w2, [x0, 252]
+.L222:
+	ldrh	w2, [x0, 244]
 	cmp	w1, w2
-	bcs	.L228
-	ldr	x4, [x0, 2608]
+	bcs	.L220
+	ldr	x4, [x0, 2600]
 	ubfiz	x3, x1, 1, 32
 	add	w1, w1, 1
 	ldrh	w2, [x4, x3]
 	add	w2, w2, 1
 	strh	w2, [x4, x3]
-	b	.L230
-.L233:
+	b	.L222
+.L225:
 	add	x10, x8, :lo12:.LANCHOR0
-	ldrh	w0, [x10, 236]
+	ldrh	w0, [x10, 228]
 	add	w0, w0, w0, lsl 1
 	lsr	w0, w0, 2
 	bl	GetFreeBlockMaxEraseCount
 	and	w6, w0, 65535
 	add	w0, w9, 64
 	cmp	w6, w0
-	bcc	.L235
-	ldr	x0, [x10, 2576]
-	cbz	x0, .L235
+	bcc	.L227
+	ldr	x0, [x10, 2568]
+	cbz	x0, .L227
 	mov	w4, 65535
-	ldrh	w12, [x10, 252]
+	ldrh	w12, [x10, 244]
 	mov	x13, -6148914691236517206
-	ldr	x7, [x10, 2568]
-	ldr	x5, [x10, 2608]
+	ldr	x7, [x10, 2560]
+	ldr	x5, [x10, 2600]
 	mov	w2, w4
 	mov	w10, w4
 	mov	w1, 0
 	movk	x13, 0xaaab, lsl 0
 	mov	w14, 6
-.L236:
+.L228:
 	ldrh	w3, [x0]
 	cmp	w3, w10
-	bne	.L239
+	bne	.L231
 	mov	w20, w2
-.L238:
+.L230:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L235
+	beq	.L227
 	ubfiz	x7, x20, 1, 32
 	ldrh	w3, [x5, x7]
 	cmp	w9, w3
-	bcs	.L240
+	bcs	.L232
 	bl	GetFreeBlockMinEraseCount
 	cmp	w9, w0, uxth
-	bcs	.L240
+	bcs	.L232
 	add	x0, x8, :lo12:.LANCHOR0
 	str	w4, [x0, 2696]
-.L240:
+.L232:
 	cmp	w11, w3
-	bls	.L235
+	bls	.L227
 	add	w0, w3, 128
 	cmp	w6, w0
-	ble	.L235
+	ble	.L227
 	add	w0, w3, 256
 	cmp	w11, w0
-	bhi	.L241
+	bhi	.L233
 	add	x0, x8, :lo12:.LANCHOR0
 	add	w3, w3, 768
 	ldr	w0, [x0, 2692]
 	cmp	w3, w0
-	bcs	.L235
-.L241:
+	bcs	.L227
+.L233:
 	add	x19, x8, :lo12:.LANCHOR0
 	ldrh	w5, [x5, x7]
 	mov	w2, w11
 	mov	w1, w20
-	ldr	x0, [x19, 80]
+	ldr	x0, [x19, 72]
 	ldr	w3, [x19, 2692]
 	ldrh	w4, [x0, x7]
 	adrp	x0, .LC78
@@ -2265,14 +2227,14 @@ GetSwlReplaceBlock:
 	bl	sftl_printk
 	mov	w0, 1
 	str	w0, [x19, 3244]
-	b	.L234
-.L239:
+	b	.L226
+.L231:
 	add	w1, w1, 1
 	and	w1, w1, 65535
 	cmp	w1, w12
-	bhi	.L235
+	bhi	.L227
 	ldrh	w15, [x0, 4]
-	cbz	w15, .L237
+	cbz	w15, .L229
 	sub	x0, x0, x7
 	asr	x0, x0, 1
 	mul	x0, x0, x13
@@ -2280,14 +2242,14 @@ GetSwlReplaceBlock:
 	and	x0, x0, 65535
 	ldrh	w0, [x5, x0, lsl 1]
 	cmp	w9, w0
-	bcs	.L238
+	bcs	.L230
 	cmp	w4, w0
-	bls	.L237
+	bls	.L229
 	mov	w4, w0
 	mov	w2, w20
-.L237:
+.L229:
 	umaddl	x0, w3, w14, x7
-	b	.L236
+	b	.L228
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	2
 	.global	free_data_superblock
@@ -2296,18 +2258,18 @@ free_data_superblock:
 	and	w0, w0, 65535
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L252
+	beq	.L244
 	stp	x29, x30, [sp, -16]!
-	adrp	x2, .LANCHOR0+80
+	adrp	x2, .LANCHOR0+72
 	ubfiz	x1, x0, 1, 16
 	add	x29, sp, 0
-	ldr	x2, [x2, #:lo12:.LANCHOR0+80]
+	ldr	x2, [x2, #:lo12:.LANCHOR0+72]
 	strh	wzr, [x2, x1]
 	bl	INSERT_FREE_LIST
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L252:
+.L244:
 	mov	w0, 0
 	ret
 	.size	free_data_superblock, .-free_data_superblock
@@ -2322,54 +2284,54 @@ get_new_active_ppa:
 	ldrh	w1, [x0]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L256
+	bne	.L248
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2781
+	mov	w2, 2785
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L256:
+.L248:
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
-	ldrh	w0, [x0, 314]
+	ldrh	w0, [x0, 306]
 	cmp	w1, w0
-	bne	.L257
+	bne	.L249
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2782
+	mov	w2, 2786
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L257:
+.L249:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L258
+	cbnz	w0, .L250
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2783
+	mov	w2, 2787
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L258:
+.L250:
 	ldrb	w0, [x19, 6]
 	add	x1, x20, :lo12:.LANCHOR0
 	strb	wzr, [x19, 10]
 	add	x0, x0, 8
-	ldrh	w3, [x1, 244]
+	ldrh	w3, [x1, 236]
 	mov	w1, 65535
 	ldrh	w0, [x19, x0, lsl 1]
-.L259:
+.L251:
 	cmp	w0, w1
-	beq	.L261
+	beq	.L253
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
-	ldrh	w2, [x20, 314]
+	ldrh	w2, [x20, 306]
 	cmp	w1, w2
-	bcs	.L265
+	bcs	.L257
 	orr	w20, w1, w0, lsl 10
 	ldrh	w1, [x19, 4]
 	ldrb	w0, [x19, 6]
@@ -2377,56 +2339,56 @@ get_new_active_ppa:
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	strh	w1, [x19, 4]
-.L264:
+.L256:
 	add	w0, w0, 1
 	and	w0, w0, 255
 	cmp	w3, w0
-	bne	.L263
+	bne	.L255
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
 	mov	w0, 0
-.L263:
+.L255:
 	add	x5, x19, x0, sxtw 1
 	ldrh	w5, [x5, 16]
 	cmp	w5, w4
-	beq	.L264
+	beq	.L256
 	strb	w0, [x19, 6]
 	ldrh	w0, [x19, 2]
 	cmp	w0, w2
-	bne	.L255
-	cbz	w1, .L255
+	bne	.L247
+	cbz	w1, .L247
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2806
+	mov	w2, 2810
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L255:
+.L247:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L261:
+.L253:
 	ldrb	w0, [x19, 6]
 	add	w0, w0, 1
 	and	w0, w0, 255
 	strb	w0, [x19, 6]
 	cmp	w0, w3
-	bne	.L260
+	bne	.L252
 	ldrh	w0, [x19, 2]
 	strb	wzr, [x19, 6]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
-.L260:
+.L252:
 	ldrb	w0, [x19, 6]
 	add	x0, x0, 8
 	ldrh	w0, [x19, x0, lsl 1]
-	b	.L259
-.L265:
+	b	.L251
+.L257:
 	mov	w20, 65535
-	b	.L255
+	b	.L247
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
 	.global	FtlGcBufInit
@@ -2439,30 +2401,30 @@ FtlGcBufInit:
 	mov	w9, 1
 	mov	w5, 4
 	str	wzr, [x1, 3248]
-.L272:
-	ldrh	w2, [x1, 244]
+.L264:
+	ldrh	w2, [x1, 236]
 	cmp	w3, w2
-	bcc	.L273
+	bcc	.L265
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w6, 24
 	mov	w5, 4
-.L274:
+.L266:
 	ldr	w1, [x0, 3288]
 	cmp	w2, w1
-	bcc	.L275
+	bcc	.L267
 	ret
-.L273:
+.L265:
 	umull	x4, w3, w8
 	ldr	x6, [x1, 3256]
 	ldr	x7, [x1, 3264]
 	add	x2, x6, x4
 	str	w9, [x2, 16]
-	ldrh	w2, [x1, 322]
+	ldrh	w2, [x1, 314]
 	mul	w2, w2, w3
 	sdiv	w2, w2, w5
 	add	x2, x7, x2, sxtw 2
 	str	x2, [x6, x4]
-	ldrh	w2, [x1, 324]
+	ldrh	w2, [x1, 316]
 	ldr	x7, [x1, 3256]
 	ldr	x10, [x1, 3272]
 	add	x6, x7, x4
@@ -2479,19 +2441,19 @@ FtlGcBufInit:
 	str	x4, [x2, 8]
 	ldr	x4, [x6, 8]
 	str	x4, [x2, 16]
-	b	.L272
-.L275:
+	b	.L264
+.L267:
 	umull	x4, w2, w6
 	ldr	x3, [x0, 3256]
 	ldr	x7, [x0, 3264]
 	add	x1, x3, x4
 	str	wzr, [x1, 16]
-	ldrh	w1, [x0, 322]
+	ldrh	w1, [x0, 314]
 	mul	w1, w1, w2
 	sdiv	w1, w1, w5
 	add	x1, x7, x1, sxtw 2
 	str	x1, [x3, x4]
-	ldrh	w1, [x0, 324]
+	ldrh	w1, [x0, 316]
 	ldr	x3, [x0, 3256]
 	add	x3, x3, x4
 	ldr	x4, [x0, 3272]
@@ -2501,7 +2463,7 @@ FtlGcBufInit:
 	sdiv	w1, w1, w5
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x3, 8]
-	b	.L274
+	b	.L266
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
 	.global	FtlGcBufFree
@@ -2513,31 +2475,31 @@ FtlGcBufFree:
 	mov	w8, 24
 	ldr	w7, [x2, 3288]
 	ldr	x5, [x2, 3256]
-.L277:
+.L269:
 	cmp	w3, w1
-	bcs	.L276
+	bcs	.L268
 	ubfiz	x4, x3, 5, 16
 	mov	w2, 0
 	add	x4, x0, x4
-	b	.L282
-.L278:
+	b	.L274
+.L270:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L282:
+.L274:
 	cmp	w2, w7
-	bcs	.L279
+	bcs	.L271
 	umull	x6, w2, w8
 	add	x9, x5, x6
 	ldr	x10, [x5, x6]
 	ldr	x6, [x4, 8]
 	cmp	x10, x6
-	bne	.L278
+	bne	.L270
 	str	wzr, [x9, 16]
-.L279:
+.L271:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L277
-.L276:
+	b	.L269
+.L268:
 	ret
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -2551,20 +2513,20 @@ FtlGcBufAlloc:
 	mov	w8, 1
 	ldr	w5, [x2, 3288]
 	ldr	x6, [x2, 3256]
-.L284:
+.L276:
 	cmp	w3, w1
-	bcs	.L283
+	bcs	.L275
 	mov	w2, 0
-	b	.L289
-.L285:
+	b	.L281
+.L277:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L289:
+.L281:
 	cmp	w2, w5
-	bcs	.L286
+	bcs	.L278
 	umaddl	x4, w2, w7, x6
 	ldr	w9, [x4, 16]
-	cbnz	w9, .L285
+	cbnz	w9, .L277
 	ubfiz	x2, x3, 5, 16
 	ldr	x9, [x4]
 	add	x2, x0, x2
@@ -2572,11 +2534,11 @@ FtlGcBufAlloc:
 	str	x9, [x2, 8]
 	ldr	x4, [x4, 8]
 	str	x4, [x2, 16]
-.L286:
+.L278:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L284
-.L283:
+	b	.L276
+.L275:
 	ret
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -2589,17 +2551,17 @@ IsBlkInGcList:
 	ldrh	w2, [x1, 3292]
 	ldr	x3, [x1, 3296]
 	mov	x1, 0
-.L291:
+.L283:
 	cmp	w2, w1, uxth
-	bhi	.L293
+	bhi	.L285
 	mov	w0, 0
 	ret
-.L293:
+.L285:
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4, -2]
 	cmp	w4, w0
-	bne	.L291
+	bne	.L283
 	mov	w0, 1
 	ret
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -2620,25 +2582,25 @@ FtlGcUpdatePage:
 	ldrh	w1, [x4, 3292]
 	ldr	x6, [x4, 3296]
 	mov	x4, 0
-.L296:
+.L288:
 	and	w2, w4, 65535
 	cmp	w2, w1
-	bcc	.L298
-	bne	.L297
+	bcc	.L290
+	bne	.L289
 	and	x4, x4, 65535
 	strh	w0, [x6, x4, lsl 1]
 	add	x4, x3, :lo12:.LANCHOR0
 	ldrh	w0, [x4, 3292]
 	add	w0, w0, 1
 	strh	w0, [x4, 3292]
-	b	.L297
-.L298:
+	b	.L289
+.L290:
 	add	x4, x4, 1
 	add	x2, x6, x4, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w9
-	bne	.L296
-.L297:
+	bne	.L288
+.L289:
 	add	x0, x3, :lo12:.LANCHOR0
 	mov	w1, 12
 	ldrh	w3, [x0, 3304]
@@ -2670,26 +2632,26 @@ FtlGcRefreshBlock:
 	bl	sftl_printk
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrh	w3, [x0, 234]
+	ldrh	w3, [x0, 226]
 	cmp	w19, w3
-	beq	.L301
-	ldrh	w2, [x0, 232]
+	beq	.L293
+	ldrh	w2, [x0, 224]
 	cmp	w19, w2
-	beq	.L301
+	beq	.L293
 	mov	w1, 65535
 	cmp	w3, w1
-	bne	.L302
-	strh	w19, [x0, 234]
-.L301:
+	bne	.L294
+	strh	w19, [x0, 226]
+.L293:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L302:
+.L294:
 	cmp	w2, w1
-	bne	.L301
-	strh	w19, [x0, 232]
-	b	.L301
+	bne	.L293
+	strh	w19, [x0, 224]
+	b	.L293
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
 	.global	FtlGcMarkBadPhyBlk
@@ -2715,24 +2677,24 @@ FtlGcMarkBadPhyBlk:
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x20, -8]
 	mov	x1, 0
-.L305:
+.L297:
 	cmp	w0, w1, uxth
-	bhi	.L307
+	bhi	.L299
 	cmp	w0, 15
-	bhi	.L306
+	bhi	.L298
 	add	x19, x19, :lo12:.LANCHOR0
 	add	w1, w0, 1
 	add	x19, x19, 3328
 	strh	w1, [x19, -8]
 	strh	w21, [x19, w0, sxtw 1]
-	b	.L306
-.L307:
+	b	.L298
+.L299:
 	add	x1, x1, 1
 	add	x2, x20, x1, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w21
-	bne	.L305
-.L306:
+	bne	.L297
+.L298:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -2749,16 +2711,16 @@ FtlGcReFreshBadBlk:
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
-	cbz	w1, .L310
-	ldrh	w3, [x0, 234]
+	cbz	w1, .L302
+	ldrh	w3, [x0, 226]
 	mov	w2, 65535
 	cmp	w3, w2
-	bne	.L310
+	bne	.L302
 	ldrh	w2, [x0, 3362]
 	cmp	w2, w1
-	bcc	.L311
+	bcc	.L303
 	strh	wzr, [x0, 3362]
-.L311:
+.L303:
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x19, 3328
 	ldrh	w1, [x19, 3362]
@@ -2768,7 +2730,7 @@ FtlGcReFreshBadBlk:
 	ldrh	w0, [x19, 3362]
 	add	w0, w0, 1
 	strh	w0, [x19, 3362]
-.L310:
+.L302:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -2820,9 +2782,9 @@ rknand_print_hex:
 	mov	x19, 0
 	mov	w20, 0
 	adrp	x28, .LC83
-.L321:
+.L313:
 	cmp	w26, w19
-	bhi	.L327
+	bhi	.L319
 	adrp	x0, .LC85
 	add	x0, x0, :lo12:.LC85
 	bl	sftl_printk
@@ -2833,42 +2795,42 @@ rknand_print_hex:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L327:
-	cbnz	w20, .L322
+.L319:
+	cbnz	w20, .L314
 	mov	w3, w22
 	mov	x2, x21
 	mov	x1, x27
 	mov	x0, x24
 	bl	sftl_printk
-.L322:
+.L314:
 	cmp	w23, 4
-	bne	.L323
+	bne	.L315
 	ldr	w1, [x21, x19, lsl 2]
 	adrp	x0, .LC82
 	add	x0, x0, :lo12:.LC82
-.L329:
+.L321:
 	bl	sftl_printk
 	add	w20, w20, 1
 	cmp	w20, 15
-	bls	.L326
+	bls	.L318
 	mov	w20, 0
 	adrp	x0, .LC85
 	add	x0, x0, :lo12:.LC85
 	bl	sftl_printk
-.L326:
+.L318:
 	add	x19, x19, 1
 	add	w22, w22, w23
-	b	.L321
-.L323:
+	b	.L313
+.L315:
 	cmp	w23, 2
-	bne	.L325
+	bne	.L317
 	ldrh	w1, [x21, x19, lsl 1]
 	add	x0, x28, :lo12:.LC83
-	b	.L329
-.L325:
+	b	.L321
+.L317:
 	ldrb	w1, [x21, x19]
 	mov	x0, x25
-	b	.L329
+	b	.L321
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
 	.global	FlashEraseBlocks
@@ -2896,18 +2858,18 @@ FlashEraseBlocks:
 	mov	x1,0
 	mov	w26, -1
 	lsl	w27, w25, 3
-.L331:
+.L323:
 	cmp	x22, x24
-	beq	.L335
+	beq	.L327
 	ldr	w0, [x22]
 	add	x2, x29, 96
 	add	x1, x29, 100
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 96]
-	cbnz	w0, .L332
+	cbnz	w0, .L324
 	ldr	w1, [x29, 100]
 	cmp	w27, w1
-	bls	.L332
+	bls	.L324
 	mov	x19, x20
 	add	x23, x20, x23
 	adrp	x20, .LANCHOR1
@@ -2915,19 +2877,19 @@ FlashEraseBlocks:
 	adrp	x22, .LC86
 	add	x20, x20, 160
 	add	x22, x22, :lo12:.LC86
-.L333:
+.L325:
 	cmp	x19, x23
-	bne	.L334
+	bne	.L326
 	bl	dump_stack
-.L335:
+.L327:
 	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, 0
 	ldr	x2, [x29, 104]
 	ldr	x1, [x21]
 	eor	x1, x2, x1
-	cbz	x1, .L342
+	cbz	x1, .L334
 	bl	__stack_chk_fail
-.L334:
+.L326:
 	ldr	w2, [x29, 100]
 	mov	w0, -1
 	str	w0, [x19]
@@ -2947,8 +2909,8 @@ FlashEraseBlocks:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC88
 	bl	rknand_print_hex
-	b	.L333
-.L332:
+	b	.L325
+.L324:
 	ldr	w1, [x29, 100]
 	ldr	x2, [x19, 3376]
 	blr	x2
@@ -2957,18 +2919,18 @@ FlashEraseBlocks:
 	str	w0, [x22, -4]
 	ldrh	w0, [x19, 14]
 	cmp	w0, 4
-	bne	.L339
+	bne	.L331
 	ldrb	w0, [x29, 96]
 	ldr	x2, [x19, 3376]
 	ldr	w1, [x29, 100]
 	add	w1, w25, w1
 	blr	x2
-	cbz	w0, .L339
+	cbz	w0, .L331
 	str	w26, [x22, -4]
-.L339:
+.L331:
 	add	x22, x22, 32
-	b	.L331
-.L342:
+	b	.L323
+.L334:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -2989,15 +2951,15 @@ FtlFreeSysBlkQueueIn:
 	sub	w2, w21, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcc	.L347
+	bcc	.L339
 	adrp	x0, .LANCHOR0
 	add	x20, x0, :lo12:.LANCHOR0
 	mov	x19, x0
-	ldrh	w2, [x20, 470]
+	ldrh	w2, [x20, 462]
 	cmp	w2, 1024
-	beq	.L347
+	beq	.L339
 	and	w1, w1, 65535
-	cbz	w1, .L349
+	cbz	w1, .L341
 	mov	w0, w21
 	bl	P2V_block_in_plane
 	and	w22, w0, 65535
@@ -3008,7 +2970,7 @@ FtlFreeSysBlkQueueIn:
 	mov	w1, w2
 	ldr	x0, [x20, 3416]
 	bl	FlashEraseBlocks
-	ldr	x2, [x20, 2608]
+	ldr	x2, [x20, 2600]
 	ubfiz	x0, x22, 1, 16
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
@@ -3016,9 +2978,9 @@ FtlFreeSysBlkQueueIn:
 	ldr	w0, [x20, 2688]
 	add	w0, w0, 1
 	str	w0, [x20, 2688]
-.L349:
+.L341:
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 464
+	add	x0, x0, 456
 	ldrh	w1, [x0, 6]
 	add	w1, w1, 1
 	strh	w1, [x0, 6]
@@ -3028,7 +2990,7 @@ FtlFreeSysBlkQueueIn:
 	and	w1, w1, 1023
 	strh	w1, [x0, 4]
 	strh	w21, [x2, 8]
-.L347:
+.L339:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
@@ -3045,17 +3007,17 @@ FtlFreeSysBlkQueueOut:
 	add	x21, x0, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
-	ldrh	w2, [x21, 470]
-	cbz	w2, .L361
-	ldrh	w0, [x21, 466]
-	add	x1, x21, 464
+	ldrh	w2, [x21, 462]
+	cbz	w2, .L353
+	ldrh	w0, [x21, 458]
+	add	x1, x21, 456
 	sub	w2, w2, #1
-	strh	w2, [x21, 470]
+	strh	w2, [x21, 462]
 	mov	w2, 1
 	add	x3, x1, x0, sxtw 1
 	add	w0, w0, 1
 	and	w0, w0, 1023
-	strh	w0, [x21, 466]
+	strh	w0, [x21, 458]
 	ldr	x0, [x21, 3416]
 	ldrh	w20, [x3, 8]
 	lsl	w1, w20, 10
@@ -3066,23 +3028,23 @@ FtlFreeSysBlkQueueOut:
 	ldr	w0, [x21, 2688]
 	add	w0, w0, 1
 	str	w0, [x21, 2688]
-.L358:
+.L350:
 	sub	w0, w20, #1
 	mov	w1, 65533
 	cmp	w1, w0, uxth
-	bcs	.L359
+	bcs	.L351
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w20
-	ldrh	w2, [x0, 470]
+	ldrh	w2, [x0, 462]
 	adrp	x0, .LC89
 	add	x0, x0, :lo12:.LC89
 	bl	sftl_printk
-.L360:
-	b	.L360
-.L361:
+.L352:
+	b	.L352
+.L353:
 	mov	w20, 65535
-	b	.L358
-.L359:
+	b	.L350
+.L351:
 	mov	w0, w20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
@@ -3101,27 +3063,27 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w1, [x0, 10]
 	ldr	x0, [x0, 16]
-.L364:
+.L356:
 	cmp	w20, w1
-	beq	.L368
+	beq	.L360
 	mov	x21, x0
 	ldrh	w2, [x0], 2
-	cbnz	w2, .L365
+	cbnz	w2, .L357
 	bl	FtlFreeSysBlkQueueOut
 	and	w1, w0, 65535
 	strh	w0, [x21]
 	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcs	.L366
-	adrp	x0, .LANCHOR0+470
-	ldrh	w2, [x0, #:lo12:.LANCHOR0+470]
+	bcs	.L358
+	adrp	x0, .LANCHOR0+462
+	ldrh	w2, [x0, #:lo12:.LANCHOR0+462]
 	adrp	x0, .LC90
 	add	x0, x0, :lo12:.LC90
 	bl	sftl_printk
-.L367:
-	b	.L367
-.L366:
+.L359:
+	b	.L359
+.L358:
 	ldr	w0, [x19, 48]
 	strh	wzr, [x19, 2]
 	add	w0, w0, 1
@@ -3130,10 +3092,10 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
-.L368:
+.L360:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L370
+	bhi	.L362
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -3141,16 +3103,16 @@ ftl_map_blk_alloc_new_blk:
 	add	x1, x1, 184
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L370:
+.L362:
 	mov	w0, 0
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L365:
+.L357:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L364
+	b	.L356
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
 	.global	ftl_memset
@@ -3193,22 +3155,22 @@ FtlMemInit:
 	stp	wzr, w0, [x3, 96]
 	mov	w0, -1
 	stp	wzr, wzr, [x3, 104]
-	strh	w0, [x19, 234]
-	strh	w0, [x19, 232]
+	strh	w0, [x19, 226]
+	strh	w0, [x19, 224]
 	mov	w0, 32
 	strh	w0, [x19, 3232]
 	mov	w0, 128
 	strh	w0, [x19, 3234]
 	strh	wzr, [x19, 3362]
-	ldrh	w0, [x19, 318]
+	ldrh	w0, [x19, 310]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	ldrh	w1, [x19, 318]
+	ldrh	w1, [x19, 310]
 	str	x0, [x19, 3296]
 	mov	w0, 12
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	ldrh	w21, [x19, 244]
+	ldrh	w21, [x19, 236]
 	str	x0, [x19, 3312]
 	lsl	w22, w21, 5
 	lsl	w21, w21, 7
@@ -3227,8 +3189,8 @@ FtlMemInit:
 	mov	w0, w22
 	bl	ftl_malloc
 	str	x0, [x19, 3280]
-	ldrh	w0, [x19, 244]
-	ldrh	w21, [x19, 322]
+	ldrh	w0, [x19, 236]
+	ldrh	w21, [x19, 314]
 	lsl	w0, w0, 1
 	add	w0, w0, 1
 	str	w0, [x19, 3288]
@@ -3262,12 +3224,12 @@ FtlMemInit:
 	mov	w0, w21
 	bl	ftl_malloc
 	str	x0, [x19, 3512]
-	ldrh	w0, [x19, 270]
+	ldrh	w0, [x19, 262]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	ldrh	w21, [x19, 324]
+	ldrh	w21, [x19, 316]
 	str	x0, [x19, 3520]
-	ldrh	w0, [x19, 244]
+	ldrh	w0, [x19, 236]
 	mul	w21, w21, w0
 	mov	w0, w21
 	bl	ftl_malloc
@@ -3275,12 +3237,12 @@ FtlMemInit:
 	lsl	w0, w21, 2
 	bl	ftl_malloc
 	str	x0, [x19, 3536]
-	ldrh	w1, [x19, 324]
+	ldrh	w1, [x19, 316]
 	ldr	w0, [x19, 3288]
 	mul	w0, w1, w0
 	bl	ftl_malloc
 	str	x0, [x19, 3272]
-	ldrh	w0, [x19, 254]
+	ldrh	w0, [x19, 246]
 	ubfiz	w0, w0, 1, 15
 	strh	w0, [x19, 3544]
 	and	w0, w0, 65534
@@ -3292,18 +3254,18 @@ FtlMemInit:
 	strh	w0, [x19, 3544]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
-	ldrh	w21, [x19, 254]
+	ldrh	w21, [x19, 246]
 	str	x0, [x19, 3560]
 	add	x0, x0, 32
-	str	x0, [x19, 2608]
+	str	x0, [x19, 2600]
 	lsl	w21, w21, 1
 	mov	w0, w21
 	bl	ftl_malloc
 	str	x0, [x19, 3568]
 	mov	w0, w21
 	bl	ftl_malloc
-	ldr	w21, [x19, 340]
-	str	x0, [x19, 80]
+	ldr	w21, [x19, 332]
+	str	x0, [x19, 72]
 	lsl	w21, w21, 1
 	mov	w0, w21
 	bl	ftl_malloc
@@ -3311,55 +3273,50 @@ FtlMemInit:
 	mov	w0, w21
 	bl	ftl_malloc
 	str	x0, [x19, 3584]
-	ldrh	w0, [x19, 254]
-	lsr	w0, w0, 3
-	add	w0, w0, 4
-	bl	ftl_malloc
-	str	x0, [x19, 24]
-	ldrh	w0, [x19, 332]
+	ldrh	w0, [x19, 324]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	str	x0, [x19, 360]
-	ldrh	w0, [x19, 332]
+	str	x0, [x19, 352]
+	ldrh	w0, [x19, 324]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
 	str	x0, [x19, 3592]
-	ldrh	w0, [x19, 332]
+	ldrh	w0, [x19, 324]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
 	str	x0, [x19, 3600]
-	ldrh	w0, [x19, 334]
+	ldrh	w0, [x19, 326]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	ldrh	w2, [x19, 334]
+	ldrh	w2, [x19, 326]
 	mov	w1, 0
 	str	x0, [x19, 3608]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldrh	w0, [x19, 348]
+	ldrh	w0, [x19, 340]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
 	str	x0, [x19, 3616]
-	ldr	w0, [x19, 340]
+	ldr	w0, [x19, 332]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
 	str	x0, [x19, 3624]
-	ldrh	w0, [x19, 350]
+	ldrh	w0, [x19, 342]
 	lsl	w0, w0, 4
 	bl	ftl_malloc
-	ldrh	w1, [x19, 350]
-	str	x0, [x19, 2616]
-	ldrh	w0, [x19, 322]
+	ldrh	w1, [x19, 342]
+	str	x0, [x19, 2608]
+	ldrh	w0, [x19, 314]
 	mul	w0, w1, w0
 	bl	ftl_malloc
 	str	x0, [x19, 3632]
-	ldrh	w1, [x19, 254]
+	ldrh	w1, [x19, 246]
 	mov	w0, 6
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19, 2568]
-	ldrh	w0, [x19, 310]
-	ldrh	w1, [x19, 266]
+	str	x0, [x19, 2560]
+	ldrh	w0, [x19, 302]
+	ldrh	w1, [x19, 258]
 	add	w0, w0, 31
 	asr	w0, w0, 5
 	strh	w0, [x19, 3640]
@@ -3367,29 +3324,29 @@ FtlMemInit:
 	lsl	w0, w0, 2
 	bl	ftl_malloc
 	ldrh	w4, [x19, 3640]
-	add	x5, x19, 408
-	ldrh	w6, [x19, 266]
+	add	x5, x19, 400
+	ldrh	w6, [x19, 258]
 	mov	x1, 1
-	str	x0, [x19, 400]
+	str	x0, [x19, 392]
 	mov	w2, w4
 	mov	x0, x20
-.L375:
+.L367:
 	cmp	w1, w6
-	bcc	.L376
+	bcc	.L368
 	mov	w2, 8
 	add	x4, x0, :lo12:.LANCHOR0
 	sub	w2, w2, w1
-	add	x4, x4, 368
+	add	x4, x4, 360
 	add	x2, x2, 1
 	mov	x3, 0
-.L377:
+.L369:
 	add	x3, x3, 1
 	cmp	x3, x2
-	bne	.L378
+	bne	.L370
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3576]
-	cbnz	x2, .L379
-.L381:
+	cbnz	x2, .L371
+.L373:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 216
@@ -3397,92 +3354,92 @@ FtlMemInit:
 	add	x0, x0, :lo12:.LC91
 	bl	sftl_printk
 	mov	w0, -1
-.L374:
+.L366:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L376:
-	ldr	x3, [x19, 400]
+.L368:
+	ldr	x3, [x19, 392]
 	add	w1, w1, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x5], 8
-	b	.L375
-.L378:
+	b	.L367
+.L370:
 	add	x5, x1, x3
 	add	x5, x4, x5, lsl 3
 	str	xzr, [x5, 24]
-	b	.L377
-.L379:
+	b	.L369
+.L371:
 	ldr	x2, [x1, 3584]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3616]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3624]
-	cbz	x2, .L381
-	ldr	x2, [x1, 2616]
-	cbz	x2, .L381
+	cbz	x2, .L373
+	ldr	x2, [x1, 2608]
+	cbz	x2, .L373
 	ldr	x2, [x1, 3632]
-	cbz	x2, .L381
-	ldr	x2, [x1, 2568]
-	cbz	x2, .L381
-	ldr	x2, [x1, 400]
-	cbz	x2, .L381
-	ldr	x1, [x1, 80]
-	cbz	x1, .L381
+	cbz	x2, .L373
+	ldr	x2, [x1, 2560]
+	cbz	x2, .L373
+	ldr	x2, [x1, 392]
+	cbz	x2, .L373
+	ldr	x1, [x1, 72]
+	cbz	x1, .L373
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3296]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3312]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3440]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3456]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3416]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3280]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3448]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3464]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x2, [x1, 3472]
-	cbz	x2, .L381
+	cbz	x2, .L373
 	ldr	x1, [x1, 3480]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3264]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3488]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3496]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3256]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3528]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3536]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3272]
-	cbz	x1, .L381
-	ldr	x1, [x0, 2608]
-	cbz	x1, .L381
+	cbz	x1, .L373
+	ldr	x1, [x0, 2600]
+	cbz	x1, .L373
 	ldr	x1, [x0, 3552]
-	cbz	x1, .L381
-	ldr	x0, [x0, 360]
-	cbz	x0, .L381
+	cbz	x1, .L373
+	ldr	x0, [x0, 352]
+	cbz	x0, .L373
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3592]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x1, [x0, 3600]
-	cbz	x1, .L381
+	cbz	x1, .L373
 	ldr	x0, [x0, 3608]
-	cbz	x0, .L381
+	cbz	x0, .L373
 	mov	w0, 0
-	b	.L374
+	b	.L366
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -3508,20 +3465,20 @@ FtlBbt2Bitmap:
 	mov	w1, 0
 	lsl	w2, w2, 2
 	bl	ftl_memset
-.L479:
+.L471:
 	ldrh	w0, [x23, x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L476
+	beq	.L468
 	add	x1, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x1, 310]
+	ldrh	w1, [x1, 302]
 	cmp	w1, w0
-	bhi	.L478
+	bhi	.L470
 	mov	w2, 74
 	mov	x1, x20
 	mov	x0, x24
 	bl	sftl_printk
-.L478:
+.L470:
 	ldrh	w2, [x23, x19]
 	mov	w1, 1
 	add	x19, x19, 2
@@ -3532,8 +3489,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x22, x0]
 	orr	w1, w1, w2
 	str	w1, [x22, x0]
-	bne	.L479
-.L476:
+	bne	.L471
+.L468:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -3550,7 +3507,7 @@ FtlBbtMemInit:
 	mov	w1, -1
 	add	x29, sp, 0
 	mov	w2, 16
-	add	x0, x0, 380
+	add	x0, x0, 372
 	strh	w1, [x0, -12]
 	mov	w1, 255
 	strh	wzr, [x0, -6]
@@ -3568,11 +3525,11 @@ FtlFreeSysBlkQueueInit:
 	mov	w2, 2048
 	add	x29, sp, 0
 	mov	w1, 0
-	strh	w0, [x3, 464]
-	add	x0, x3, 472
-	strh	wzr, [x3, 466]
-	strh	wzr, [x3, 468]
-	strh	wzr, [x3, 470]
+	strh	w0, [x3, 456]
+	add	x0, x3, 464
+	strh	wzr, [x3, 458]
+	strh	wzr, [x3, 460]
+	strh	wzr, [x3, 462]
 	bl	ftl_memset
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
@@ -3597,21 +3554,21 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L488:
+.L480:
 	ldrh	w1, [x19, 6]
 	cmp	w1, w0
-	bhi	.L492
-	adrp	x0, .LANCHOR0+316
+	bhi	.L484
+	adrp	x0, .LANCHOR0+308
 	mov	w23, 0
 	mov	w20, 0
-	ldrh	w1, [x0, #:lo12:.LANCHOR0+316]
+	ldrh	w1, [x0, #:lo12:.LANCHOR0+308]
 	ldrh	w0, [x19]
 	strh	w1, [x21, x0, lsl 1]
 	ldrh	w24, [x21]
-.L493:
+.L485:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L497
+	bhi	.L489
 	mov	w0, w23
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -3619,64 +3576,64 @@ ftl_free_no_use_map_blk:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L492:
+.L484:
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20, x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L489:
+.L481:
 	ldrh	w3, [x19, 10]
 	cmp	w3, w1
-	bhi	.L491
+	bhi	.L483
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L488
-.L491:
+	b	.L480
+.L483:
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x22, x3]
 	cmp	w4, w2
-	bne	.L490
-	cbz	w2, .L490
+	bne	.L482
+	cbz	w2, .L482
 	ldrh	w4, [x21, x3]
 	add	w4, w4, 1
 	strh	w4, [x21, x3]
-.L490:
+.L482:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L489
-.L497:
+	b	.L481
+.L489:
 	ubfiz	x0, x20, 1, 16
 	ldrh	w1, [x21, x0]
 	cmp	w24, w1
-	bls	.L494
+	bls	.L486
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbnz	w0, .L495
-.L496:
+	cbnz	w0, .L487
+.L488:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L493
-.L494:
-	cbnz	w1, .L496
+	b	.L485
+.L486:
+	cbnz	w1, .L488
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbz	w0, .L496
-.L498:
+	cbz	w0, .L488
+.L490:
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	wzr, [x25]
 	ldrh	w0, [x19, 8]
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
-	b	.L496
-.L499:
+	b	.L488
+.L491:
 	mov	w24, 0
-	b	.L498
-.L495:
+	b	.L490
+.L487:
 	mov	w23, w20
-	cbz	w1, .L499
+	cbz	w1, .L491
 	mov	w24, w1
-	b	.L496
+	b	.L488
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
 	.global	FtlL2PDataInit
@@ -3689,33 +3646,33 @@ FtlL2PDataInit:
 	str	x19, [sp, 16]
 	add	x19, x0, :lo12:.LANCHOR0
 	ldr	x0, [x19, 3584]
-	ldr	w2, [x19, 340]
+	ldr	w2, [x19, 332]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w0, [x19, 350]
+	ldrh	w0, [x19, 342]
 	mov	w1, 255
-	ldrh	w2, [x19, 322]
+	ldrh	w2, [x19, 314]
 	mul	w2, w2, w0
 	ldr	x0, [x19, 3632]
 	bl	ftl_memset
 	mov	x0, x19
 	mov	w1, 0
 	mov	w5, -1
-.L509:
-	ldrh	w2, [x0, 350]
+.L501:
+	ldrh	w2, [x0, 342]
 	cmp	w2, w1
-	bhi	.L510
+	bhi	.L502
 	mov	w2, -1
 	strh	w2, [x0, 3650]
 	strh	w2, [x0, 3648]
 	add	x1, x0, 3648
-	ldr	w2, [x0, 340]
+	ldr	w2, [x0, 332]
 	strh	w2, [x0, 3658]
 	mov	w2, -3902
 	strh	w2, [x0, 3652]
 	ldrh	w2, [x0, 3712]
 	strh	w2, [x0, 3656]
-	ldrh	w2, [x0, 348]
+	ldrh	w2, [x0, 340]
 	strh	w2, [x0, 3654]
 	ldr	x2, [x0, 3576]
 	str	x2, [x0, 3664]
@@ -3728,17 +3685,17 @@ FtlL2PDataInit:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L510:
-	ldr	x3, [x0, 2616]
+.L502:
+	ldr	x3, [x0, 2608]
 	ubfiz	x2, x1, 4, 16
 	add	x3, x3, x2
 	str	wzr, [x3, 4]
-	ldr	x3, [x0, 2616]
+	ldr	x3, [x0, 2608]
 	strh	w5, [x3, x2]
-	ldr	x3, [x0, 2616]
+	ldr	x3, [x0, 2608]
 	ldr	x4, [x0, 3632]
 	add	x3, x3, x2
-	ldrh	w2, [x0, 322]
+	ldrh	w2, [x0, 314]
 	mul	w2, w2, w1
 	add	w1, w1, 1
 	and	w1, w1, 65535
@@ -3746,7 +3703,7 @@ FtlL2PDataInit:
 	and	x2, x2, -4
 	add	x2, x4, x2
 	str	x2, [x3, 8]
-	b	.L509
+	b	.L501
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
 	.global	FtlVariablesInit
@@ -3762,26 +3719,26 @@ FtlVariablesInit:
 	strh	w0, [x19, 3714]
 	mov	w0, -1
 	str	w0, [x19, 3724]
-	ldr	x0, [x19, 360]
-	ldrh	w2, [x19, 332]
-	strh	wzr, [x19, 356]
+	ldr	x0, [x19, 352]
+	ldrh	w2, [x19, 324]
+	strh	wzr, [x19, 348]
 	str	wzr, [x19, 3716]
 	lsl	w2, w2, 1
 	str	wzr, [x19, 3720]
 	bl	ftl_memset
-	ldr	x0, [x19, 2608]
+	ldr	x0, [x19, 2600]
 	mov	w1, 0
-	ldrh	w2, [x19, 254]
+	ldrh	w2, [x19, 246]
 	lsl	w2, w2, 1
 	bl	ftl_memset
 	ldr	x0, [x19, 3552]
 	mov	w1, 0
-	ldrh	w2, [x19, 254]
+	ldrh	w2, [x19, 246]
 	lsl	w2, w2, 1
 	bl	ftl_memset
 	mov	w2, 48
 	mov	w1, 0
-	add	x0, x19, 2520
+	add	x0, x19, 2512
 	bl	ftl_memset
 	mov	w2, 512
 	mov	w1, 0
@@ -3806,97 +3763,97 @@ SupperBlkListInit:
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
 	str	x23, [sp, 48]
-	add	x23, x19, 272
+	add	x23, x19, 264
 	stp	x21, x22, [sp, 32]
 	mov	w20, 0
 	mov	w22, 0
-	ldrh	w2, [x19, 254]
+	ldrh	w2, [x19, 246]
 	mov	w21, 0
 	mul	w2, w2, w0
-	ldr	x0, [x19, 2568]
+	ldr	x0, [x19, 2560]
 	bl	ftl_memset
-	strh	wzr, [x19, 2592]
-	strh	wzr, [x19, 236]
+	strh	wzr, [x19, 2584]
+	strh	wzr, [x19, 228]
+	str	xzr, [x19, 2568]
 	str	xzr, [x19, 2576]
-	str	xzr, [x19, 2584]
-	str	xzr, [x19, 2600]
-.L515:
-	ldrh	w0, [x19, 252]
+	str	xzr, [x19, 2592]
+.L507:
+	ldrh	w0, [x19, 244]
 	cmp	w20, w0
-	bcs	.L522
-	ldrh	w8, [x19, 244]
+	bcs	.L514
+	ldrh	w8, [x19, 236]
 	mov	x6, 0
-	ldrh	w7, [x19, 314]
+	ldrh	w7, [x19, 306]
 	mov	w5, 0
-	b	.L523
-.L517:
+	b	.L515
+.L509:
 	ldrb	w0, [x23, x6]
 	mov	w1, w20
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L516
+	cbnz	w0, .L508
 	add	w5, w5, w7
 	and	w5, w5, 65535
-.L516:
+.L508:
 	add	x6, x6, 1
-.L523:
+.L515:
 	cmp	w8, w6, uxth
-	bhi	.L517
-	cbz	w5, .L518
+	bhi	.L509
+	cbz	w5, .L510
 	mov	w0, 32768
 	sdiv	w5, w0, w5
-.L519:
-	ldr	x1, [x19, 2568]
+.L511:
+	ldr	x1, [x19, 2560]
 	mov	w0, 6
 	umaddl	x0, w20, w0, x1
 	strh	w5, [x0, 4]
-	ldrh	w0, [x19, 32]
+	ldrh	w0, [x19, 24]
 	cmp	w0, w20
-	beq	.L520
-	ldrh	w0, [x19, 88]
+	beq	.L512
+	ldrh	w0, [x19, 80]
 	cmp	w0, w20
-	beq	.L520
-	ldrh	w0, [x19, 136]
+	beq	.L512
+	ldrh	w0, [x19, 128]
 	cmp	w0, w20
-	beq	.L520
-	ldr	x1, [x19, 80]
+	beq	.L512
+	ldr	x1, [x19, 72]
 	ubfiz	x0, x20, 1, 16
 	ldrh	w0, [x1, x0]
-	cbnz	w0, .L521
+	cbnz	w0, .L513
 	add	w22, w22, 1
 	mov	w0, w20
 	and	w22, w22, 65535
 	bl	INSERT_FREE_LIST
-.L520:
+.L512:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L515
-.L518:
-	ldr	x1, [x19, 80]
+	b	.L507
+.L510:
+	ldr	x1, [x19, 72]
 	ubfiz	x0, x20, 1, 16
 	mov	w2, -1
 	strh	w2, [x1, x0]
-	b	.L519
-.L521:
+	b	.L511
+.L513:
 	add	w21, w21, 1
 	mov	w0, w20
 	and	w21, w21, 65535
 	bl	INSERT_DATA_LIST
-	b	.L520
-.L522:
-	strh	w21, [x19, 2592]
+	b	.L512
+.L514:
+	strh	w21, [x19, 2584]
 	add	w21, w21, w22
-	strh	w22, [x19, 236]
+	strh	w22, [x19, 228]
 	cmp	w21, w0
-	ble	.L524
+	ble	.L516
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2210
+	mov	w2, 2212
 	add	x1, x1, 248
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L524:
+.L516:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
@@ -3915,12 +3872,12 @@ FtlGcPageVarInit:
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
 	ldr	x0, [x19, 3296]
-	ldrh	w2, [x19, 318]
+	ldrh	w2, [x19, 310]
 	strh	wzr, [x19, 3292]
 	strh	wzr, [x19, 3304]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w2, [x19, 318]
+	ldrh	w2, [x19, 310]
 	mov	w0, 12
 	mov	w1, 255
 	mul	w2, w2, w0
@@ -3952,32 +3909,32 @@ FlashGetBadBlockList:
 	blr	x2
 	and	w0, w0, 65535
 	cmp	w0, 50
-	bls	.L529
+	bls	.L521
 	mov	w2, 256
 	mov	w1, 255
 	mov	x0, x20
 	bl	ftl_memset
 	mov	w0, 0
-.L529:
+.L521:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 14]
 	cmp	w1, 4
-	bne	.L533
+	bne	.L525
 	mov	x1, 0
-.L531:
+.L523:
 	cmp	w0, w1, uxth
-	bhi	.L532
-.L533:
+	bhi	.L524
+.L525:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L532:
+.L524:
 	ldrh	w2, [x20, x1, lsl 1]
 	lsr	w2, w2, 1
 	strh	w2, [x20, x1, lsl 1]
 	add	x1, x1, 1
-	b	.L531
+	b	.L523
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
 	.global	ftl_memcpy
@@ -4017,46 +3974,46 @@ FlashReadPages:
 	add	x23, x23, 272
 	add	x25, x25, :lo12:.LC8
 	ldrh	w26, [x2, 12]
-.L538:
+.L530:
 	cmp	x24, x19
-	bne	.L551
+	bne	.L543
 	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, 0
 	ldr	x2, [x29, 104]
 	ldr	x1, [x21]
 	eor	x1, x2, x1
-	cbz	x1, .L552
+	cbz	x1, .L544
 	bl	__stack_chk_fail
-.L551:
+.L543:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L539
+	cbz	x0, .L531
 	ldr	x0, [x19, 16]
-	cbnz	x0, .L540
-.L539:
+	cbnz	x0, .L532
+.L531:
 	mov	w2, 96
 	mov	x1, x23
 	mov	x0, x25
 	bl	sftl_printk
-.L540:
+.L532:
 	ldr	w0, [x19, 4]
 	add	x2, x29, 96
 	add	x1, x29, 100
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 96]
 	cmp	w0, 3
-	bls	.L541
+	bls	.L533
 	mov	w0, -1
 	str	w0, [x19]
-.L542:
+.L534:
 	add	x19, x19, 32
-	b	.L538
-.L541:
+	b	.L530
+.L533:
 	ldr	x20, [x19, 8]
 	tst	x20, 63
-	beq	.L543
+	beq	.L535
 	add	x1, x22, :lo12:.LANCHOR0
 	ldr	x20, [x1, 3504]
-.L543:
+.L535:
 	add	x28, x22, :lo12:.LANCHOR0
 	ldr	w1, [x29, 100]
 	ldr	x3, [x19, 16]
@@ -4066,7 +4023,7 @@ FlashReadPages:
 	str	w0, [x19]
 	ldrh	w0, [x28, 14]
 	cmp	w0, 4
-	bne	.L545
+	bne	.L537
 	ldrb	w0, [x29, 96]
 	add	x2, x20, 2048
 	ldr	x4, [x28, 3392]
@@ -4076,66 +4033,66 @@ FlashReadPages:
 	add	x3, x3, 8
 	blr	x4
 	cmn	w0, #1
-	beq	.L546
+	beq	.L538
 	ldr	x1, [x19, 16]
 	ldr	w2, [x1, 12]
 	cmn	w2, #1
-	bne	.L547
+	bne	.L539
 	ldr	w2, [x1, 8]
 	cmn	w2, #1
-	bne	.L547
+	bne	.L539
 	ldr	w1, [x1]
 	cmn	w1, #1
-	beq	.L547
-.L546:
+	beq	.L539
+.L538:
 	mov	w1, -1
 	str	w1, [x19]
-.L547:
+.L539:
 	ldr	w1, [x19]
 	cmn	w1, #1
-	beq	.L548
+	beq	.L540
 	cmp	w0, 256
-	bne	.L548
+	bne	.L540
 	str	w0, [x19]
-.L548:
+.L540:
 	ldr	w3, [x19]
 	cmp	w3, 256
 	ccmn	w3, #1, 4, ne
-	bne	.L545
+	bne	.L537
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC92
 	ldr	w2, [x29, 100]
 	add	x0, x0, :lo12:.LC92
 	bl	sftl_printk
 	ldr	x1, [x19, 8]
-	cbz	x1, .L550
+	cbz	x1, .L542
 	mov	w3, 4
 	adrp	x0, .LC93
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC93
 	bl	rknand_print_hex
-.L550:
+.L542:
 	ldr	x1, [x19, 16]
-	cbz	x1, .L545
+	cbz	x1, .L537
 	mov	w3, 4
 	adrp	x0, .LC94
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC94
 	bl	rknand_print_hex
-.L545:
+.L537:
 	add	x1, x22, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3504]
 	cmp	x20, x0
-	bne	.L542
+	bne	.L534
 	ldr	x0, [x19, 8]
 	cmp	x20, x0
-	beq	.L542
-	ldrh	w2, [x1, 270]
+	beq	.L534
+	ldrh	w2, [x1, 262]
 	mov	x1, x20
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-	b	.L542
-.L552:
+	b	.L534
+.L544:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -4153,7 +4110,7 @@ FtlLoadFactoryBbt:
 	add	x0, x0, :lo12:.LANCHOR0
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	add	x22, x0, 380
+	add	x22, x0, 372
 	stp	x25, x26, [sp, 64]
 	mov	w21, 0
 	stp	x19, x20, [sp, 16]
@@ -4165,10 +4122,10 @@ FtlLoadFactoryBbt:
 	ldr	x1, [x0, 3464]
 	ldr	x24, [x0, 3528]
 	stp	x1, x24, [x23, 8]
-.L579:
-	ldrh	w0, [x19, 266]
+.L571:
+	ldrh	w0, [x19, 258]
 	cmp	w21, w0
-	bcc	.L584
+	bcc	.L576
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -4176,17 +4133,17 @@ FtlLoadFactoryBbt:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L584:
-	ldrh	w20, [x19, 310]
+.L576:
+	ldrh	w20, [x19, 302]
 	mov	w0, -1
 	strh	w0, [x22]
-.L581:
-	ldrh	w0, [x19, 310]
+.L573:
+	ldrh	w0, [x19, 302]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L582
+	ble	.L574
 	madd	w0, w0, w21, w20
 	mov	w2, 1
 	mov	w1, w2
@@ -4196,15 +4153,15 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L581
+	beq	.L573
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L581
+	bne	.L573
 	strh	w20, [x22]
-.L582:
+.L574:
 	add	w21, w21, 1
 	add	x22, x22, 2
-	b	.L579
+	b	.L571
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
 	.global	FtlGetLastWrittenPage
@@ -4225,9 +4182,9 @@ FtlGetLastWrittenPage:
 	mov	x2,0
 	adrp	x1, .LANCHOR0
 	add	x2, x1, :lo12:.LANCHOR0
-	bne	.L590
-	ldrh	w19, [x2, 316]
-.L591:
+	bne	.L582
+	ldrh	w19, [x2, 308]
+.L583:
 	add	x1, x1, :lo12:.LANCHOR0
 	sub	w19, w19, #1
 	sxth	w19, w19
@@ -4244,24 +4201,24 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 120]
 	cmn	w0, #1
-	bne	.L592
+	bne	.L584
 	mov	w23, 0
 	mov	w25, 2
-.L593:
+.L585:
 	cmp	w23, w19
-	ble	.L596
-.L592:
+	ble	.L588
+.L584:
 	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, w19
 	ldr	x2, [x29, 184]
 	ldr	x1, [x21]
 	eor	x1, x2, x1
-	cbz	x1, .L597
+	cbz	x1, .L589
 	bl	__stack_chk_fail
-.L590:
-	ldrh	w19, [x2, 314]
-	b	.L591
-.L596:
+.L582:
+	ldrh	w19, [x2, 306]
+	b	.L583
+.L588:
 	add	w20, w23, w19
 	mov	w2, w24
 	mov	w1, 1
@@ -4273,21 +4230,21 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 120]
 	cmn	w0, #1
-	bne	.L594
+	bne	.L586
 	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	bne	.L594
+	bne	.L586
 	ldr	w0, [x29, 88]
 	cmn	w0, #1
-	beq	.L594
+	beq	.L586
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L593
-.L594:
+	b	.L585
+.L586:
 	add	w20, w20, 1
 	sxth	w23, w20
-	b	.L593
-.L597:
+	b	.L585
+.L589:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -4313,49 +4270,49 @@ FtlScanSysBlk:
 	add	x25, x25, :lo12:.LANCHOR1
 	ldr	x0, [x19, 3624]
 	add	x25, x25, 288
-	ldr	w2, [x19, 340]
+	ldr	w2, [x19, 332]
 	strh	wzr, [x19, 3712]
-	strh	wzr, [x19, 356]
+	strh	wzr, [x19, 348]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	ldr	x0, [x19, 3576]
 	mov	w1, 0
-	ldr	w2, [x19, 340]
+	ldr	w2, [x19, 332]
 	lsl	w2, w2, 1
 	bl	ftl_memset
 	ldr	x0, [x19, 3600]
 	mov	w1, 0
-	ldrh	w2, [x19, 332]
+	ldrh	w2, [x19, 324]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldr	x0, [x19, 360]
+	ldr	x0, [x19, 352]
 	mov	w1, 0
-	ldrh	w2, [x19, 332]
+	ldrh	w2, [x19, 324]
 	lsl	w2, w2, 1
 	bl	ftl_memset
 	mov	w2, 16
 	mov	w1, 255
 	add	x0, x19, 2704
 	bl	ftl_memset
-	ldrh	w24, [x19, 252]
-.L603:
-	ldrh	w0, [x19, 254]
+	ldrh	w24, [x19, 244]
+.L595:
+	ldrh	w0, [x19, 246]
 	cmp	w0, w24
-	bls	.L643
-	ldrh	w9, [x19, 244]
+	bls	.L635
+	ldrh	w9, [x19, 236]
 	mov	x5, 0
-	ldrh	w8, [x19, 324]
+	ldrh	w8, [x19, 316]
 	mov	w20, 0
-	add	x7, x19, 272
+	add	x7, x19, 264
 	mov	w6, 4
-	b	.L644
-.L605:
+	b	.L636
+.L597:
 	ldrb	w0, [x7, x5]
 	mov	w1, w24
 	bl	V2P_block
 	and	w4, w0, 65535
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L604
+	cbnz	w0, .L596
 	ldr	x0, [x19, 3440]
 	ubfiz	x2, x20, 5, 16
 	lsl	w4, w4, 10
@@ -4372,17 +4329,17 @@ FtlScanSysBlk:
 	sdiv	w0, w0, w6
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L604:
+.L596:
 	add	x5, x5, 1
-.L644:
+.L636:
 	cmp	w9, w5, uxth
-	bhi	.L605
-	cbnz	w20, .L606
-.L642:
+	bhi	.L597
+	cbnz	w20, .L598
+.L634:
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L603
-.L606:
+	b	.L595
+.L598:
 	ldr	x0, [x19, 3440]
 	mov	w1, w20
 	mov	w2, 1
@@ -4390,7 +4347,7 @@ FtlScanSysBlk:
 	mov	x23, 0
 	add	x27, x19, 2704
 	bl	FlashReadPages
-.L641:
+.L633:
 	ldr	x0, [x19, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
@@ -4398,10 +4355,10 @@ FtlScanSysBlk:
 	cmn	w0, #1
 	ldr	x26, [x1, 16]
 	ubfx	x22, x22, 10, 16
-	bne	.L609
+	bne	.L601
 	mov	w28, 16
 	mov	w3, 65535
-.L611:
+.L603:
 	ldr	x0, [x19, 3440]
 	mov	w2, 1
 	str	w3, [x29, 108]
@@ -4417,74 +4374,74 @@ FtlScanSysBlk:
 	ldr	w3, [x29, 108]
 	cmp	w0, w3
 	ldr	x0, [x19, 3440]
-	bne	.L608
+	bne	.L600
 	mov	w1, -1
 	str	w1, [x0, x23]
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0, x23]
 	cmp	w0, w1
-	bne	.L609
-.L610:
+	bne	.L601
+.L602:
 	mov	w1, 1
-	b	.L681
-.L608:
+	b	.L673
+.L600:
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L609
+	bne	.L601
 	sub	w28, w28, #1
 	ands	w28, w28, 65535
-	bne	.L611
-	b	.L610
-.L609:
+	bne	.L603
+	b	.L602
+.L601:
 	ldr	w1, [x19, 2668]
 	ldr	w0, [x26, 4]
 	cmn	w1, #1
-	beq	.L612
+	beq	.L604
 	cmp	w1, w0
-	bhi	.L613
-.L612:
+	bhi	.L605
+.L604:
 	cmn	w0, #1
-	beq	.L613
+	beq	.L605
 	add	w1, w0, 1
 	str	w1, [x19, 2668]
-.L613:
+.L605:
 	ldrh	w1, [x26]
 	mov	w2, 61604
 	cmp	w1, w2
-	beq	.L615
-	bhi	.L616
+	beq	.L607
+	bhi	.L608
 	mov	w0, 61574
 	cmp	w1, w0
-	beq	.L617
-.L614:
+	beq	.L609
+.L606:
 	add	x23, x23, 32
 	cmp	x20, x23
-	bne	.L641
-	b	.L642
-.L616:
+	bne	.L633
+	b	.L634
+.L608:
 	mov	w0, 61634
 	cmp	w1, w0
-	beq	.L618
+	beq	.L610
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L614
+	bne	.L606
 	mov	w1, 0
-.L681:
+.L673:
 	mov	w0, w22
 	bl	FtlFreeSysBlkQueueIn
-	b	.L614
-.L618:
+	b	.L606
+.L610:
 	ldrh	w1, [x19, 3712]
-	ldr	w0, [x19, 340]
+	ldr	w0, [x19, 332]
 	cmp	w1, w0
-	bls	.L620
+	bls	.L612
 	adrp	x0, .LC8
 	mov	w2, 1225
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L620:
-	ldr	w3, [x19, 340]
+.L612:
+	ldr	w3, [x19, 332]
 	ldrh	w1, [x19, 3712]
 	and	w2, w3, 65535
 	ldr	x4, [x19, 3624]
@@ -4493,52 +4450,52 @@ FtlScanSysBlk:
 	sub	w2, w2, #1
 	sxth	x0, w0
 	sxth	w2, w2
-.L621:
+.L613:
 	cmp	w0, w2
-	bgt	.L627
-	tbz	w0, #31, .L661
-	b	.L614
-.L627:
+	bgt	.L619
+	tbz	w0, #31, .L653
+	b	.L606
+.L619:
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L622
+	bls	.L614
 	ldr	w2, [x4]
-	cbnz	w2, .L623
+	cbnz	w2, .L615
 	cmp	w3, w1
-	beq	.L623
+	beq	.L615
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
-.L623:
+.L615:
 	mov	w1, 0
-.L624:
+.L616:
 	cmp	w1, w0
-	bne	.L625
+	bne	.L617
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 3576]
 	strh	w22, [x1, x5, lsl 1]
-	tbnz	w0, #31, .L614
+	tbnz	w0, #31, .L606
 	ldrh	w1, [x19, 3712]
-	ldr	w2, [x19, 340]
+	ldr	w2, [x19, 332]
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	cmp	w0, w2, sxth
-	bgt	.L614
-.L661:
+	bgt	.L606
+.L653:
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 3576]
-.L679:
+.L671:
 	strh	w22, [x1, x0, lsl 1]
-	b	.L614
-.L625:
+	b	.L606
+.L617:
 	ldr	x4, [x19, 3624]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4552,69 +4509,69 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L624
-.L622:
+	b	.L616
+.L614:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L621
-.L617:
-	ldrh	w1, [x19, 356]
-	ldrh	w0, [x19, 332]
+	b	.L613
+.L609:
+	ldrh	w1, [x19, 348]
+	ldrh	w0, [x19, 324]
 	cmp	w1, w0
-	bls	.L630
+	bls	.L622
 	adrp	x0, .LC8
 	mov	w2, 1266
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L630:
-	ldrh	w3, [x19, 332]
-	ldrh	w1, [x19, 356]
+.L622:
+	ldrh	w3, [x19, 324]
+	ldrh	w1, [x19, 348]
 	sub	w2, w3, #1
 	ldr	x4, [x19, 3600]
 	sxth	x0, w2
 	sub	w2, w2, w1
-.L631:
+.L623:
 	cmp	w0, w2
-	ble	.L636
+	ble	.L628
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L632
+	bls	.L624
 	ldr	w2, [x4]
-	cbnz	w2, .L633
+	cbnz	w2, .L625
 	cmp	w3, w1
-	beq	.L633
+	beq	.L625
 	add	w1, w1, 1
-	strh	w1, [x19, 356]
-.L633:
+	strh	w1, [x19, 348]
+.L625:
 	mov	w1, 0
-.L634:
+.L626:
 	cmp	w1, w0
-	bne	.L635
+	bne	.L627
 	ldr	x1, [x19, 3600]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
-	ldr	x1, [x19, 360]
+	ldr	x1, [x19, 352]
 	strh	w22, [x1, x5, lsl 1]
-.L636:
-	tbnz	w0, #31, .L614
-	ldrh	w1, [x19, 332]
-	ldrh	w2, [x19, 356]
+.L628:
+	tbnz	w0, #31, .L606
+	ldrh	w1, [x19, 324]
+	ldrh	w2, [x19, 348]
 	sub	w1, w1, #1
 	sub	w1, w1, w2
 	cmp	w0, w1, sxth
-	bgt	.L614
+	bgt	.L606
 	ldr	x1, [x19, 3600]
 	add	w2, w2, 1
-	strh	w2, [x19, 356]
+	strh	w2, [x19, 348]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
-	ldr	x1, [x19, 360]
-	b	.L679
-.L635:
+	ldr	x1, [x19, 352]
+	b	.L671
+.L627:
 	ldr	x4, [x19, 3600]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4624,58 +4581,58 @@ FtlScanSysBlk:
 	sxth	w1, w1
 	ldr	w7, [x7, 4]
 	str	w7, [x4, x3]
-	ldr	x3, [x19, 360]
+	ldr	x3, [x19, 352]
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L634
-.L632:
+	b	.L626
+.L624:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L631
-.L615:
+	b	.L623
+.L607:
 	ldrh	w2, [x27]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L638
+	bne	.L630
 	strh	w22, [x27]
-.L680:
+.L672:
 	str	w0, [x27, 8]
-	b	.L614
-.L638:
+	b	.L606
+.L630:
 	ldrh	w0, [x27, 4]
 	cmp	w0, w1
-	beq	.L639
+	beq	.L631
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L639:
+.L631:
 	ldr	w0, [x26, 4]
 	ldr	w1, [x27, 8]
 	cmp	w1, w0
-	bcs	.L640
+	bcs	.L632
 	ldrh	w0, [x27]
 	strh	w0, [x27, 4]
 	strh	w22, [x27]
 	ldr	w0, [x26, 4]
-	b	.L680
-.L640:
+	b	.L672
+.L632:
 	strh	w22, [x27, 4]
-	b	.L614
-.L643:
+	b	.L606
+.L635:
 	ldr	x1, [x19, 3576]
 	ldrh	w0, [x1]
-	cbz	w0, .L645
-.L648:
+	cbz	w0, .L637
+.L640:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x1, [x0, 360]
+	ldr	x1, [x0, 352]
 	ldrh	w2, [x1]
-	cbz	w2, .L646
-.L647:
+	cbz	w2, .L638
+.L639:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x21, 3712]
-	ldr	w0, [x21, 340]
+	ldr	w0, [x21, 332]
 	cmp	w1, w0
-	bls	.L677
+	bls	.L669
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4683,7 +4640,7 @@ FtlScanSysBlk:
 	add	x1, x1, 288
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L677:
+.L669:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -4692,22 +4649,22 @@ FtlScanSysBlk:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L645:
+.L637:
 	ldrh	w0, [x19, 3712]
-	cbz	w0, .L648
-	ldr	w2, [x19, 340]
+	cbz	w0, .L640
+	ldr	w2, [x19, 332]
 	mov	w0, 0
-.L649:
+.L641:
 	cmp	w0, w2
-	bcs	.L648
+	bcs	.L640
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L650
+	cbz	w3, .L642
 	mov	w1, w0
 	add	x2, x21, :lo12:.LANCHOR0
-.L651:
-	ldr	w3, [x2, 340]
+.L643:
+	ldr	w3, [x2, 332]
 	cmp	w1, w3
-	bcs	.L648
+	bcs	.L640
 	ldr	x5, [x2, 3576]
 	sxtw	x6, w1
 	lsl	x4, x6, 1
@@ -4722,28 +4679,28 @@ FtlScanSysBlk:
 	str	w6, [x5, x3, lsl 2]
 	ldr	x3, [x2, 3576]
 	strh	wzr, [x3, x4]
-	b	.L651
-.L650:
+	b	.L643
+.L642:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L649
-.L646:
-	ldrh	w2, [x0, 356]
-	cbz	w2, .L647
-	ldrh	w2, [x0, 332]
+	b	.L641
+.L638:
+	ldrh	w2, [x0, 348]
+	cbz	w2, .L639
+	ldrh	w2, [x0, 324]
 	mov	w0, 0
-.L656:
+.L648:
 	mov	w6, w0
 	cmp	w0, w2
-	bge	.L647
+	bge	.L639
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L657
+	cbz	w3, .L649
 	add	x1, x21, :lo12:.LANCHOR0
-.L658:
-	ldrh	w2, [x1, 332]
+.L650:
+	ldrh	w2, [x1, 324]
 	cmp	w0, w2
-	bge	.L647
-	ldr	x4, [x1, 360]
+	bge	.L639
+	ldr	x4, [x1, 352]
 	sxtw	x5, w0
 	lsl	x3, x5, 1
 	sub	w2, w0, w6
@@ -4755,13 +4712,13 @@ FtlScanSysBlk:
 	ldr	x4, [x1, 3600]
 	ldr	w5, [x4, x5, lsl 2]
 	str	w5, [x4, x2, lsl 2]
-	ldr	x2, [x1, 360]
+	ldr	x2, [x1, 352]
 	strh	wzr, [x2, x3]
-	b	.L658
-.L657:
+	b	.L650
+.L649:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L656
+	b	.L648
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
 	.global	FtlLoadBbt
@@ -4780,14 +4737,14 @@ FtlLoadBbt:
 	ldr	x22, [x23, 3528]
 	stp	x0, x22, [x21, 8]
 	bl	FtlBbtMemInit
-	ldrh	w20, [x23, 310]
+	ldrh	w20, [x23, 302]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-.L683:
-	ldrh	w0, [x23, 310]
+.L675:
+	ldrh	w0, [x23, 302]
 	sub	w0, w0, #16
 	cmp	w20, w0
-	ble	.L686
+	ble	.L678
 	lsl	w0, w20, 10
 	mov	w2, 1
 	str	w0, [x21, 4]
@@ -4796,7 +4753,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L684
+	bne	.L676
 	ldr	w0, [x21, 4]
 	mov	w2, 1
 	mov	w1, w2
@@ -4804,27 +4761,27 @@ FtlLoadBbt:
 	str	w0, [x21, 4]
 	mov	x0, x21
 	bl	FlashReadPages
-.L684:
+.L676:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L685
+	beq	.L677
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L685
+	bne	.L677
 	ldr	w1, [x22, 4]
-	str	w1, [x23, 376]
-	strh	w20, [x23, 368]
+	str	w1, [x23, 368]
+	strh	w20, [x23, 360]
 	ldrh	w1, [x22, 8]
-	strh	w1, [x23, 372]
-.L686:
+	strh	w1, [x23, 364]
+.L678:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w1, [x21, 368]
+	ldrh	w1, [x21, 360]
 	cmp	w1, w0
-	beq	.L700
-	ldrh	w1, [x21, 372]
+	beq	.L692
+	ldrh	w1, [x21, 364]
 	cmp	w1, w0
-	beq	.L690
+	beq	.L682
 	add	x0, x21, 3728
 	lsl	w1, w1, 10
 	mov	w2, 1
@@ -4833,32 +4790,32 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21, 3728]
 	cmn	w0, #1
-	beq	.L690
+	beq	.L682
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L690
-	ldr	w1, [x21, 376]
+	bne	.L682
+	ldr	w1, [x21, 368]
 	ldr	w0, [x22, 4]
 	cmp	w0, w1
-	bls	.L690
-	str	w0, [x21, 376]
-	ldrh	w1, [x21, 372]
+	bls	.L682
+	str	w0, [x21, 368]
+	ldrh	w1, [x21, 364]
 	ldrh	w0, [x22, 8]
-	strh	w1, [x21, 368]
-	strh	w0, [x21, 372]
-.L690:
+	strh	w1, [x21, 360]
+	strh	w0, [x21, 364]
+.L682:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	x23, x20, 3728
 	mov	w24, 61649
-	ldrh	w0, [x20, 368]
+	ldrh	w0, [x20, 360]
 	bl	FtlGetLastWrittenPage
 	sxth	w21, w0
 	add	w0, w0, 1
-	strh	w0, [x20, 370]
-.L692:
-	tbz	w21, #31, .L695
+	strh	w0, [x20, 362]
+.L684:
+	tbz	w21, #31, .L687
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4866,45 +4823,45 @@ FtlLoadBbt:
 	add	x1, x1, 304
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L694:
+.L686:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 10]
 	mov	w2, 65535
-	strh	w0, [x1, 374]
+	strh	w0, [x1, 366]
 	ldrh	w0, [x22, 12]
 	cmp	w0, w2
-	beq	.L697
-	ldr	w2, [x1, 240]
+	beq	.L689
+	ldr	w2, [x1, 232]
 	cmp	w0, w2
-	beq	.L697
-	ldrh	w1, [x1, 254]
+	beq	.L689
+	ldrh	w1, [x1, 246]
 	lsr	w1, w1, 2
 	cmp	w2, w1
-	bcs	.L697
+	bcs	.L689
 	cmp	w0, w1
-	bcs	.L697
+	bcs	.L689
 	bl	FtlSysBlkNumInit
-.L697:
+.L689:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, 0
-	add	x21, x19, 400
-.L698:
-	ldrh	w0, [x19, 266]
+	add	x21, x19, 392
+.L690:
+	ldrh	w0, [x19, 258]
 	cmp	w20, w0
-	bcc	.L699
+	bcc	.L691
 	mov	w0, 0
-.L682:
+.L674:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L685:
+.L677:
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-	b	.L683
-.L695:
-	ldrh	w0, [x20, 368]
+	b	.L675
+.L687:
+	ldrh	w0, [x20, 360]
 	mov	w2, 1
 	mov	w1, w2
 	orr	w0, w21, w0, lsl 10
@@ -4915,15 +4872,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x23]
 	cmn	w0, #1
-	beq	.L693
+	beq	.L685
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	beq	.L694
-.L693:
+	beq	.L686
+.L685:
 	sub	w21, w21, #1
 	sxth	w21, w21
-	b	.L692
-.L699:
+	b	.L684
+.L691:
 	ldrh	w2, [x19, 3640]
 	ldr	x0, [x19, 3736]
 	mul	w1, w2, w20
@@ -4932,10 +4889,10 @@ FtlLoadBbt:
 	add	x1, x0, x1, lsl 2
 	ldr	x0, [x21], 8
 	bl	ftl_memcpy
-	b	.L698
-.L700:
+	b	.L690
+.L692:
 	mov	w0, -1
-	b	.L682
+	b	.L674
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
 	.global	FlashProgPages
@@ -4945,151 +4902,39 @@ FlashProgPages:
 	ubfiz	x1, x1, 5, 32
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
+	mov	x19, x0
 	stp	x21, x22, [sp, 32]
-	adrp	x21, __stack_chk_guard
+	adrp	x22, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR1
+	adrp	x21, .LANCHOR0
 	stp	x25, x26, [sp, 64]
-	add	x23, x23, :lo12:.LANCHOR1
+	adrp	x24, .LANCHOR1
 	stp	x27, x28, [sp, 80]
-	adrp	x24, .LC8
-	stp	w3, w2, [x29, 104]
-	add	x2, x21, :lo12:__stack_chk_guard
+	add	x24, x24, :lo12:.LANCHOR1
+	str	w2, [x29, 108]
+	add	x2, x22, :lo12:__stack_chk_guard
 	ldr	x3, [x2]
 	str	x3, [x29, 152]
 	mov	x3,0
-	add	x2, x20, :lo12:.LANCHOR0
-	mov	x19, x0
-	add	x22, x0, x1
-	mov	x26, x0
-	add	x23, x23, 320
-	ldrh	w25, [x2, 12]
-	add	x24, x24, :lo12:.LC8
-	lsl	w28, w25, 3
-.L713:
-	cmp	x26, x22
-	bne	.L727
-	ldr	w0, [x29, 104]
-	cbz	w0, .L721
-	adrp	x23, .LC95
+	add	x2, x21, :lo12:.LANCHOR0
+	adrp	x25, .LC8
+	add	x23, x0, x1
+	mov	x20, x0
+	add	x24, x24, 320
+	ldrh	w26, [x2, 12]
+	add	x25, x25, :lo12:.LC8
+	lsl	w28, w26, 3
+.L705:
+	cmp	x20, x23
+	bne	.L719
+	adrp	x20, .LC95
 	adrp	x24, .LC96
-	add	x23, x23, :lo12:.LC95
+	add	x20, x20, :lo12:.LC95
 	add	x24, x24, :lo12:.LC96
-	b	.L750
-.L727:
-	ldr	x0, [x26, 8]
-	cbz	x0, .L714
-	ldr	x0, [x26, 16]
-	cbnz	x0, .L715
-.L714:
-	mov	w2, 148
-	mov	x1, x23
-	mov	x0, x24
-	bl	sftl_printk
-.L715:
-	ldr	w0, [x26, 4]
-	add	x2, x29, 112
-	add	x1, x29, 116
-	bl	l2p_addr_tran.isra.0
-	ldr	w0, [x29, 112]
-	cmp	w0, 3
-	bls	.L716
-.L752:
-	mov	w0, -1
-	str	w0, [x26]
-	b	.L717
-.L716:
-	cbnz	w0, .L718
-	ldr	w0, [x29, 116]
-	cmp	w28, w0
-	bls	.L718
-	adrp	x20, .LANCHOR1
-	add	x20, x20, :lo12:.LANCHOR1
-	adrp	x23, .LC86
-	add	x20, x20, 320
-	add	x23, x23, :lo12:.LC86
-	b	.L749
 .L720:
-	ldr	w2, [x19, 4]
-	mov	w0, -1
-	str	w0, [x19]
-	mov	x1, x20
-	mov	x0, x23
-	add	x19, x19, 32
-	bl	sftl_printk
-	ldr	x1, [x19, -24]
-	mov	w3, 16
-	mov	w2, 4
-	adrp	x0, .LC87
-	add	x0, x0, :lo12:.LC87
-	bl	rknand_print_hex
-	ldr	x1, [x19, -16]
-	mov	w3, 4
-	adrp	x0, .LC88
-	mov	w2, w3
-	add	x0, x0, :lo12:.LC88
-	bl	rknand_print_hex
-.L749:
-	cmp	x19, x22
-	bne	.L720
-	bl	dump_stack
-.L721:
-	add	x21, x21, :lo12:__stack_chk_guard
-	mov	w0, 0
-	ldr	x2, [x29, 152]
-	ldr	x1, [x21]
-	eor	x1, x2, x1
-	cbz	x1, .L735
-	bl	__stack_chk_fail
-.L718:
-	ldr	x1, [x26, 8]
-	tst	x1, 63
-	beq	.L736
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x27, [x0, 3504]
-	cmp	x1, x27
-	beq	.L722
-	ldrh	w2, [x0, 270]
-	mov	x0, x27
-	lsl	w2, w2, 9
-	bl	ftl_memcpy
-.L722:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w1, [x29, 116]
-	ldr	x3, [x26, 16]
-	mov	x2, x27
-	ldr	x6, [x0, 3384]
-	ldrb	w0, [x29, 112]
-	blr	x6
-	cbnz	w0, .L723
-	str	wzr, [x26]
-.L724:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 14]
-	cmp	w1, 4
-	bne	.L717
-	ldr	x6, [x0, 3384]
-	add	x2, x27, 2048
-	ldrb	w0, [x29, 112]
-	ldr	w1, [x29, 116]
-	ldr	x3, [x26, 16]
-	add	w1, w25, w1
-	add	x3, x3, 8
-	blr	x6
-	cbnz	w0, .L752
-.L717:
-	add	x26, x26, 32
-	b	.L713
-.L736:
-	mov	x27, x1
-	b	.L722
-.L723:
-	mov	w0, -1
-	str	w0, [x26]
-	b	.L724
-.L733:
-	add	x0, x20, :lo12:.LANCHOR0
+	cmp	x19, x23
+	beq	.L713
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29, 108]
 	ldr	x1, [x0, 3504]
 	str	wzr, [x1]
@@ -5105,56 +4950,164 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w25, [x29, 120]
 	cmn	w25, #1
-	bne	.L729
+	bne	.L721
 	ldr	w1, [x19, 4]
-	mov	x0, x23
+	mov	x0, x20
 	bl	sftl_printk
 	str	w25, [x19]
-.L729:
+.L721:
 	ldr	w25, [x29, 120]
 	cmp	w25, 256
-	bne	.L730
+	bne	.L722
 	ldr	w1, [x19, 4]
 	mov	x0, x24
 	bl	sftl_printk
 	str	w25, [x19]
-.L730:
+.L722:
 	ldr	x0, [x19, 16]
-	cbz	x0, .L731
+	cbz	x0, .L723
 	ldr	w2, [x0]
-	add	x0, x20, :lo12:.LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3520]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L731
+	beq	.L723
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC97
 	add	x0, x0, :lo12:.LC97
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L731:
+.L723:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L732
+	cbz	x0, .L724
 	ldr	w2, [x0]
-	add	x0, x20, :lo12:.LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3504]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L732
+	beq	.L724
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC98
 	add	x0, x0, :lo12:.LC98
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L732:
+.L724:
+	add	x19, x19, 32
+	b	.L720
+.L719:
+	ldr	x0, [x20, 8]
+	cbz	x0, .L706
+	ldr	x0, [x20, 16]
+	cbnz	x0, .L707
+.L706:
+	mov	w2, 148
+	mov	x1, x24
+	mov	x0, x25
+	bl	sftl_printk
+.L707:
+	ldr	w0, [x20, 4]
+	add	x2, x29, 112
+	add	x1, x29, 116
+	bl	l2p_addr_tran.isra.0
+	ldr	w0, [x29, 112]
+	cmp	w0, 3
+	bls	.L708
+.L742:
+	mov	w0, -1
+	str	w0, [x20]
+	b	.L709
+.L708:
+	cbnz	w0, .L710
+	ldr	w0, [x29, 116]
+	cmp	w28, w0
+	bls	.L710
+	adrp	x20, .LANCHOR1
+	add	x20, x20, :lo12:.LANCHOR1
+	adrp	x21, .LC86
+	add	x20, x20, 320
+	add	x21, x21, :lo12:.LC86
+	b	.L740
+.L712:
+	ldr	w2, [x19, 4]
+	mov	w0, -1
+	str	w0, [x19]
+	mov	x1, x20
+	mov	x0, x21
 	add	x19, x19, 32
-.L750:
-	cmp	x19, x22
-	bne	.L733
-	b	.L721
-.L735:
+	bl	sftl_printk
+	ldr	x1, [x19, -24]
+	mov	w3, 16
+	mov	w2, 4
+	adrp	x0, .LC87
+	add	x0, x0, :lo12:.LC87
+	bl	rknand_print_hex
+	ldr	x1, [x19, -16]
+	mov	w3, 4
+	adrp	x0, .LC88
+	mov	w2, w3
+	add	x0, x0, :lo12:.LC88
+	bl	rknand_print_hex
+.L740:
+	cmp	x19, x23
+	bne	.L712
+	bl	dump_stack
+.L713:
+	add	x22, x22, :lo12:__stack_chk_guard
+	mov	w0, 0
+	ldr	x2, [x29, 152]
+	ldr	x1, [x22]
+	eor	x1, x2, x1
+	cbz	x1, .L726
+	bl	__stack_chk_fail
+.L710:
+	ldr	x1, [x20, 8]
+	tst	x1, 63
+	beq	.L727
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x27, [x0, 3504]
+	cmp	x1, x27
+	beq	.L714
+	ldrh	w2, [x0, 262]
+	mov	x0, x27
+	lsl	w2, w2, 9
+	bl	ftl_memcpy
+.L714:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w1, [x29, 116]
+	ldr	x3, [x20, 16]
+	mov	x2, x27
+	ldr	x5, [x0, 3384]
+	ldrb	w0, [x29, 112]
+	blr	x5
+	cbnz	w0, .L715
+	str	wzr, [x20]
+.L716:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x0, 14]
+	cmp	w1, 4
+	bne	.L709
+	ldr	x5, [x0, 3384]
+	add	x2, x27, 2048
+	ldrb	w0, [x29, 112]
+	ldr	w1, [x29, 116]
+	ldr	x3, [x20, 16]
+	add	w1, w26, w1
+	add	x3, x3, 8
+	blr	x5
+	cbnz	w0, .L742
+.L709:
+	add	x20, x20, 32
+	b	.L705
+.L727:
+	mov	x27, x1
+	b	.L714
+.L715:
+	mov	w0, -1
+	str	w0, [x20]
+	b	.L716
+.L726:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -5178,17 +5131,17 @@ FtlLowFormatEraseBlock:
 	stp	x23, x24, [sp, 48]
 	and	w22, w1, 255
 	stp	x25, x26, [sp, 64]
-	add	x8, x5, 272
+	add	x8, x5, 264
 	stp	x27, x28, [sp, 80]
 	and	w23, w0, 65535
 	mov	w20, 0
 	mov	w19, 0
 	str	w23, [x5, 3436]
-.L754:
-	ldrh	w0, [x5, 244]
+.L744:
+	ldrh	w0, [x5, 236]
 	cmp	w0, w10
-	bhi	.L758
-	cbz	w20, .L753
+	bhi	.L748
+	cbz	w20, .L743
 	ldr	x0, [x5, 3416]
 	mov	w2, w20
 	mov	w1, 0
@@ -5196,38 +5149,38 @@ FtlLowFormatEraseBlock:
 	mov	x24, 0
 	add	x25, x21, :lo12:.LANCHOR0
 	bl	FlashEraseBlocks
-.L762:
+.L752:
 	ldr	x0, [x25, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	bne	.L761
+	bne	.L751
 	ldr	w0, [x1, 4]
 	add	w19, w19, 1
 	and	w19, w19, 65535
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
-.L761:
+.L751:
 	add	x24, x24, 32
 	cmp	x24, x20
-	bne	.L762
-	cbz	w22, .L775
+	bne	.L752
+	cbz	w22, .L765
 	add	x0, x21, :lo12:.LANCHOR0
 	mov	w25, 1
-	ldrh	w26, [x0, 316]
-.L763:
+	ldrh	w26, [x0, 308]
+.L753:
 	add	x28, x21, :lo12:.LANCHOR0
 	mov	w24, 0
-	add	x0, x28, 272
+	add	x0, x28, 264
 	str	x0, [x29, 104]
-.L771:
+.L761:
 	mov	w5, 0
 	mov	w20, 0
-.L764:
-	ldrh	w0, [x28, 244]
+.L754:
+	ldrh	w0, [x28, 236]
 	cmp	w0, w5
-	bhi	.L767
-	cbz	w20, .L753
+	bhi	.L757
+	cbz	w20, .L743
 	ldr	x0, [x28, 3416]
 	mov	w1, w20
 	mov	w3, 1
@@ -5235,11 +5188,11 @@ FtlLowFormatEraseBlock:
 	mov	x27, 0
 	bl	FlashProgPages
 	ubfiz	x1, x20, 5, 16
-.L770:
+.L760:
 	ldr	x0, [x28, 3416]
 	add	x3, x0, x27
 	ldr	w0, [x0, x27]
-	cbz	w0, .L769
+	cbz	w0, .L759
 	ldr	w0, [x3, 4]
 	add	w19, w19, 1
 	str	x1, [x29, 96]
@@ -5247,38 +5200,38 @@ FtlLowFormatEraseBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29, 96]
-.L769:
+.L759:
 	add	x27, x27, 32
 	cmp	x1, x27
-	bne	.L770
+	bne	.L760
 	add	w24, w24, 1
 	cmp	w26, w24, uxth
-	bhi	.L771
+	bhi	.L761
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	x24, 0
-.L773:
-	cbz	w22, .L772
+.L763:
+	cbz	w22, .L762
 	ldr	x0, [x26, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
-	cbnz	w0, .L772
+	cbnz	w0, .L762
 	ldr	w0, [x1, 4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L772:
+.L762:
 	add	x24, x24, 32
 	cmp	x24, x27
-	bne	.L773
+	bne	.L763
 	cmp	w23, 63
 	ccmp	w22, 0, 0, hi
-	beq	.L753
+	beq	.L743
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, w20
 	mov	w1, w25
 	ldr	x0, [x21, 3416]
 	bl	FlashEraseBlocks
-.L753:
+.L743:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5287,7 +5240,7 @@ FtlLowFormatEraseBlock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L758:
+.L748:
 	ldr	x1, [x5, 3416]
 	ubfiz	x0, x10, 5, 16
 	str	wzr, [x1, x0]
@@ -5296,13 +5249,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L755
+	cbz	w22, .L745
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L756
-.L755:
+	cbnz	w0, .L746
+.L745:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L757
+	cbnz	w0, .L747
 	ldr	x0, [x5, 3416]
 	ubfiz	x2, x20, 5, 16
 	lsl	w6, w6, 10
@@ -5313,26 +5266,26 @@ FtlLowFormatEraseBlock:
 	add	x1, x1, x2
 	ldr	x2, [x5, 3536]
 	str	x0, [x1, 8]
-	ldrh	w0, [x5, 324]
+	ldrh	w0, [x5, 316]
 	mul	w0, w0, w20
 	add	w20, w20, 1
 	and	w20, w20, 65535
 	sdiv	w0, w0, w9
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L756:
+.L746:
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L754
-.L757:
+	b	.L744
+.L747:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L756
-.L775:
+	b	.L746
+.L765:
 	mov	w25, 0
 	mov	w26, 2
-	b	.L763
-.L767:
+	b	.L753
+.L757:
 	ldr	x1, [x28, 3416]
 	ubfiz	x0, x5, 5, 16
 	str	wzr, [x1, x0]
@@ -5342,13 +5295,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L765
+	cbz	w22, .L755
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L766
-.L765:
+	cbnz	w0, .L756
+.L755:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L766
+	cbnz	w0, .L756
 	ldr	x0, [x28, 3416]
 	ubfiz	x2, x20, 5, 16
 	add	w6, w24, w6, lsl 10
@@ -5359,7 +5312,7 @@ FtlLowFormatEraseBlock:
 	add	x1, x1, x2
 	mov	w2, 4
 	str	x0, [x1, 8]
-	ldrh	w0, [x28, 324]
+	ldrh	w0, [x28, 316]
 	mul	w0, w0, w20
 	add	w20, w20, 1
 	and	w20, w20, 65535
@@ -5367,10 +5320,10 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x28, 3496]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L766:
+.L756:
 	add	w5, w5, 1
 	and	w5, w5, 65535
-	b	.L764
+	b	.L754
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
 	.global	FlashTestBlk
@@ -5388,7 +5341,7 @@ FlashTestBlk:
 	ldr	x2, [x0]
 	str	x2, [x29, 152]
 	mov	x2,0
-	bls	.L800
+	bls	.L790
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w2, 32
@@ -5414,7 +5367,7 @@ FlashTestBlk:
 	mov	w1, w3
 	bl	FlashProgPages
 	ldr	w0, [x29, 56]
-	cbnz	w0, .L801
+	cbnz	w0, .L791
 	add	w0, w19, 1
 	mov	w3, 1
 	str	w0, [x29, 60]
@@ -5425,27 +5378,27 @@ FlashTestBlk:
 	ldr	w0, [x29, 56]
 	cmp	w0, 0
 	csetm	w20, ne
-.L798:
+.L788:
 	mov	w2, 1
 	mov	w1, 0
 	add	x0, x29, 56
 	str	w19, [x29, 60]
 	bl	FlashEraseBlocks
-.L796:
+.L786:
 	add	x1, x21, :lo12:__stack_chk_guard
 	mov	w0, w20
 	ldr	x2, [x29, 152]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L799
+	cbz	x1, .L789
 	bl	__stack_chk_fail
-.L801:
+.L791:
 	mov	w20, -1
-	b	.L798
-.L800:
+	b	.L788
+.L790:
 	mov	w20, 0
-	b	.L796
-.L799:
+	b	.L786
+.L789:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 160
@@ -5465,20 +5418,20 @@ FtlBbmTblFlush:
 	add	x20, x25, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	add	x21, x20, 400
+	add	x21, x20, 392
 	ldr	x2, [x20, 3528]
 	ldr	x0, [x20, 3464]
 	str	x2, [x20, 3744]
-	ldrh	w2, [x20, 322]
+	ldrh	w2, [x20, 314]
 	str	x0, [x20, 3736]
 	bl	ftl_memset
-.L804:
-	ldrh	w0, [x20, 266]
+.L794:
+	ldrh	w0, [x20, 258]
 	add	x1, x20, 3728
 	cmp	w19, w0
-	blt	.L805
+	blt	.L795
 	ldr	x26, [x1, 16]
-	add	x19, x20, 368
+	add	x19, x20, 360
 	mov	w2, 16
 	mov	w1, 255
 	mov	x0, x26
@@ -5493,17 +5446,17 @@ FtlBbmTblFlush:
 	mov	w22, 0
 	str	w0, [x26, 4]
 	adrp	x24, .LC100
-	ldrh	w0, [x20, 368]
+	ldrh	w0, [x20, 360]
 	strh	w0, [x26, 2]
 	ldrh	w0, [x19, 4]
 	strh	w0, [x26, 8]
 	ldrh	w0, [x19, 6]
 	strh	w0, [x26, 10]
-	ldr	w0, [x20, 240]
+	ldr	w0, [x20, 232]
 	strh	w0, [x26, 12]
 	ldr	w0, [x20, 2684]
 	strh	w0, [x26, 14]
-.L806:
+.L796:
 	ldr	x0, [x25, 3464]
 	str	x0, [x25, 3736]
 	ldr	x0, [x25, 3528]
@@ -5517,11 +5470,11 @@ FtlBbmTblFlush:
 	str	w0, [x25, 3732]
 	mov	x0, x23
 	bl	sftl_printk
-	ldrh	w0, [x25, 316]
+	ldrh	w0, [x25, 308]
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L807
+	blt	.L797
 	ldr	w0, [x19, 8]
 	mov	w2, 1
 	ldrh	w1, [x19]
@@ -5540,7 +5493,7 @@ FtlBbmTblFlush:
 	mov	w1, w2
 	ldr	x0, [x25, 3416]
 	bl	FlashEraseBlocks
-.L807:
+.L797:
 	add	x20, x25, 3728
 	mov	w3, 1
 	mov	x0, x20
@@ -5552,22 +5505,22 @@ FtlBbmTblFlush:
 	strh	w0, [x19, 2]
 	ldr	w0, [x25, 3728]
 	cmn	w0, #1
-	bne	.L808
+	bne	.L798
 	ldr	w1, [x25, 3732]
 	add	w21, w21, 1
 	add	x0, x24, :lo12:.LC100
 	and	w21, w21, 65535
 	bl	sftl_printk
 	cmp	w21, 3
-	bls	.L806
+	bls	.L796
 	ldr	w1, [x25, 3732]
 	adrp	x0, .LC101
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC101
 	bl	sftl_printk
-.L810:
-	b	.L810
-.L805:
+.L800:
+	b	.L800
+.L795:
 	ldrh	w2, [x20, 3640]
 	ldr	x0, [x1, 8]
 	ldr	x1, [x21], 8
@@ -5576,16 +5529,16 @@ FtlBbmTblFlush:
 	add	w19, w19, 1
 	add	x0, x0, x3, sxtw 2
 	bl	ftl_memcpy
-	b	.L804
-.L811:
+	b	.L794
+.L801:
 	mov	w22, 1
-	b	.L806
-.L808:
+	b	.L796
+.L798:
 	add	w22, w22, 1
 	cmp	w22, 1
-	ble	.L811
+	ble	.L801
 	cmp	w0, 256
-	beq	.L806
+	beq	.L796
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5607,159 +5560,156 @@ allocate_data_superblock:
 	stp	x23, x24, [sp, 48]
 	mov	x20, x0
 	mov	x19, x22
-	add	x23, x22, 136
+	add	x23, x22, 128
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-.L817:
-	ldrh	w1, [x22, 2592]
-	ldrh	w0, [x22, 236]
+.L807:
+	ldrh	w1, [x22, 2584]
+	ldrh	w0, [x22, 228]
 	add	w0, w0, w1
-	ldrh	w1, [x22, 252]
+	ldrh	w1, [x22, 244]
 	cmp	w0, w1
-	ble	.L818
+	ble	.L808
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2656
+	mov	w2, 2660
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L818:
+.L808:
 	cmp	x20, x23
-	bne	.L844
-	ldrh	w0, [x19, 236]
+	bne	.L834
+	ldrh	w0, [x19, 228]
 	ldr	w1, [x19, 3244]
 	mul	w1, w0, w1
 	lsr	w0, w0, 1
 	add	w0, w0, 1
 	add	w1, w0, w1, lsr 2
 	ands	w1, w1, 65535
-	beq	.L819
+	beq	.L809
 	sub	w1, w1, #1
 	and	w1, w1, 65535
-.L819:
-	add	x0, x19, 2600
+.L809:
+	add	x0, x19, 2592
 	bl	List_pop_index_node
-	and	w25, w0, 65535
-	ldrh	w0, [x19, 236]
-	cbnz	w0, .L820
+	and	w26, w0, 65535
+	ldrh	w0, [x19, 228]
+	cbnz	w0, .L810
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2665
+	mov	w2, 2669
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L820:
-	ldrh	w0, [x19, 236]
+.L810:
+	ldrh	w0, [x19, 228]
 	sub	w0, w0, #1
-	strh	w0, [x19, 236]
-	ldrh	w0, [x19, 252]
-	cmp	w0, w25
-	bls	.L817
-	ldr	x0, [x19, 80]
-	ubfiz	x26, x25, 1, 16
-	ldrh	w24, [x0, x26]
-	cbnz	w24, .L817
-	strh	w25, [x20]
+	strh	w0, [x19, 228]
+	ldrh	w0, [x19, 244]
+	cmp	w0, w26
+	bls	.L807
+	ldr	x0, [x19, 72]
+	ubfiz	x25, x26, 1, 16
+	ldrh	w24, [x0, x25]
+	cbnz	w24, .L807
+	strh	w26, [x20]
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L822
-	ldr	x0, [x19, 80]
+	cbnz	w0, .L812
+	ldr	x0, [x19, 72]
 	mov	w1, -1
-	strh	w1, [x0, x26]
-	mov	w0, w25
+	strh	w1, [x0, x25]
+	mov	w0, w26
 	bl	INSERT_DATA_LIST
-	ldrh	w1, [x19, 2592]
-	ldrh	w0, [x19, 236]
+	ldrh	w1, [x19, 2584]
+	ldrh	w0, [x19, 228]
 	add	w0, w0, w1
-	ldrh	w1, [x19, 252]
+	ldrh	w1, [x19, 244]
 	cmp	w0, w1
-	ble	.L817
+	ble	.L807
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2679
+	mov	w2, 2683
 	add	x1, x1, 336
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L817
-.L844:
+	b	.L807
+.L834:
 	mov	w1, 0
-	b	.L819
-.L822:
-	ldrh	w1, [x19, 2592]
-	ldrh	w0, [x19, 236]
+	b	.L809
+.L812:
+	ldrh	w1, [x19, 2584]
+	ldrh	w0, [x19, 228]
 	add	w0, w0, w1
-	ldrh	w1, [x19, 252]
+	ldrh	w1, [x19, 244]
 	cmp	w0, w1
-	ble	.L824
+	ble	.L814
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2682
+	mov	w2, 2686
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L824:
+.L814:
 	add	x27, x20, 16
-	ldrh	w4, [x19, 244]
+	ldrh	w4, [x19, 236]
 	mov	x3, x27
 	mov	x0, 0
 	mov	w5, 65535
-.L825:
+.L815:
 	cmp	w4, w0, uxth
-	bhi	.L827
-	cbnz	w24, .L828
+	bhi	.L817
+	cbnz	w24, .L818
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2693
+	mov	w2, 2697
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L828:
-	ldrh	w0, [x19, 184]
-	cmp	w0, w25
-	bne	.L829
+.L818:
+	ldrh	w0, [x19, 176]
+	cmp	w0, w26
+	bne	.L819
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2695
+	mov	w2, 2699
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L829:
+.L819:
 	ldrb	w0, [x20, 8]
-	ldr	x1, [x19, 2608]
-	cbnz	w0, .L830
-	ldrh	w0, [x1, x26]
-	cbz	w0, .L831
-	ldrh	w2, [x19, 304]
+	ldr	x1, [x19, 2600]
+	cbnz	w0, .L820
+	ldrh	w0, [x1, x25]
+	cbz	w0, .L821
+	ldrh	w2, [x19, 296]
 	add	w0, w0, w2
-.L852:
-	strh	w0, [x1, x26]
-	mov	w1, 0
+.L842:
+	strh	w0, [x1, x25]
 	ldr	w0, [x19, 2676]
 	add	w0, w0, 1
 	str	w0, [x19, 2676]
-	mov	w0, w25
-	bl	ftl_set_blk_mode
-.L833:
-	ldr	x0, [x19, 2608]
+.L823:
+	ldr	x0, [x19, 2600]
 	ldr	w1, [x19, 2692]
-	ldrh	w0, [x0, x26]
+	ldrh	w0, [x0, x25]
 	cmp	w0, w1
-	bls	.L834
+	bls	.L824
 	str	w0, [x19, 2692]
-.L834:
+.L824:
 	ldr	w1, [x19, 2680]
 	ubfiz	x3, x24, 5, 16
-	ldrh	w0, [x19, 304]
+	ldrh	w0, [x19, 296]
 	ldr	w2, [x19, 2676]
 	madd	w0, w0, w2, w1
-	ldrh	w1, [x19, 252]
+	ldrh	w1, [x19, 244]
 	udiv	w0, w0, w1
 	ldr	x1, [x19, 3560]
 	str	w0, [x19, 2684]
@@ -5767,75 +5717,73 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	str	w0, [x1, 16]
 	mov	x0, 0
-.L835:
+.L825:
 	cmp	x3, x0
-	bne	.L836
+	bne	.L826
 	ldrb	w1, [x20, 8]
 	mov	w2, w24
 	ldr	x0, [x19, 3416]
 	mov	x28, 0
 	bl	FlashEraseBlocks
 	mov	w1, 0
-.L837:
+.L827:
 	cmp	w24, w28, uxth
-	bhi	.L839
+	bhi	.L829
 	cmp	w1, 0
-	ble	.L840
-	mov	w0, w25
+	ble	.L830
+	mov	w0, w26
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L840:
+.L830:
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L841
-	ldr	x0, [x19, 80]
+	cbnz	w0, .L831
+	ldr	x0, [x19, 72]
 	mov	w1, -1
-	strh	w1, [x0, x26]
-	b	.L817
-.L827:
+	strh	w1, [x0, x25]
+	b	.L807
+.L817:
 	ldr	x1, [x19, 3416]
 	add	x2, x1, x0, lsl 5
 	stp	xzr, xzr, [x2, 8]
 	ldrh	w2, [x3]
 	cmp	w2, w5
-	beq	.L826
+	beq	.L816
 	ubfiz	x6, x24, 5, 16
 	add	w24, w24, 1
 	add	x1, x1, x6
 	and	w24, w24, 65535
 	lsl	w2, w2, 10
 	str	w2, [x1, 4]
-.L826:
+.L816:
 	add	x0, x0, 1
 	add	x3, x3, 2
-	b	.L825
-.L831:
+	b	.L815
+.L821:
 	mov	w0, 2
-	b	.L852
-.L830:
-	ldrh	w0, [x1, x26]
+	b	.L842
+.L820:
+	ldrh	w0, [x1, x25]
 	add	w0, w0, 1
-	strh	w0, [x1, x26]
+	strh	w0, [x1, x25]
 	ldr	w0, [x19, 2680]
 	add	w0, w0, 1
 	str	w0, [x19, 2680]
-	mov	w0, w25
-	bl	ftl_set_blk_mode.part.7
-	b	.L833
-.L836:
+	b	.L823
+.L826:
 	ldr	x1, [x19, 3416]
 	add	x1, x1, x0
 	add	x0, x0, 32
 	ldr	w2, [x1, 4]
 	and	w2, w2, -1024
 	str	w2, [x1, 4]
-	b	.L835
-.L839:
+	b	.L825
+.L829:
 	ldr	x2, [x19, 3416]
 	lsl	x0, x28, 5
 	add	x3, x2, x0
 	ldr	w2, [x2, x0]
 	cmn	w2, #1
-	bne	.L838
+	bne	.L828
 	add	w1, w1, 1
 	ldr	w0, [x3, 4]
 	stp	w2, w1, [x29, 104]
@@ -5846,16 +5794,16 @@ allocate_data_superblock:
 	ldrb	w0, [x20, 7]
 	sub	w0, w0, #1
 	strb	w0, [x20, 7]
-.L838:
+.L828:
 	add	x28, x28, 1
 	add	x27, x27, 2
-	b	.L837
-.L841:
+	b	.L827
+.L831:
 	add	x21, x21, :lo12:.LANCHOR0
 	strh	wzr, [x20, 2]
 	strb	wzr, [x20, 6]
-	ldrh	w1, [x21, 314]
-	strh	w25, [x20]
+	ldrh	w1, [x21, 306]
+	strh	w26, [x20]
 	mul	w0, w0, w1
 	ldr	w1, [x21, 2668]
 	str	w1, [x20, 12]
@@ -5863,22 +5811,22 @@ allocate_data_superblock:
 	add	w1, w1, 1
 	strh	w0, [x20, 4]
 	str	w1, [x21, 2668]
-	ldr	x1, [x21, 80]
+	ldr	x1, [x21, 72]
 	ldrh	w2, [x20]
 	strh	w0, [x1, x2, lsl 1]
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L842
+	cbz	w0, .L832
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L843
-.L842:
+	cbnz	w0, .L833
+.L832:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2748
+	mov	w2, 2752
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L843:
+.L833:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5903,16 +5851,16 @@ FtlGcFreeBadSuperBlk:
 	stp	x25, x26, [sp, 64]
 	ldrh	w0, [x19, 3320]
 	str	x27, [sp, 80]
-	cbz	w0, .L854
-	add	x23, x19, 272
+	cbz	w0, .L844
+	add	x23, x19, 264
 	add	x24, x19, 3328
 	mov	w21, 0
-.L855:
-	ldrh	w0, [x19, 244]
+.L845:
+	ldrh	w0, [x19, 236]
 	cmp	w0, w21
-	bhi	.L861
+	bhi	.L851
 	bl	FtlGcReFreshBadBlk
-.L854:
+.L844:
 	mov	w0, 0
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -5921,7 +5869,7 @@ FtlGcFreeBadSuperBlk:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L861:
+.L851:
 	ldrb	w0, [x23, w21, sxtw]
 	mov	w1, w22
 	adrp	x26, .LC102
@@ -5929,18 +5877,18 @@ FtlGcFreeBadSuperBlk:
 	mov	w20, 0
 	bl	V2P_block
 	and	w25, w0, 65535
-.L856:
+.L846:
 	ldrh	w0, [x19, 3320]
 	cmp	w0, w20
-	bhi	.L860
+	bhi	.L850
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	b	.L855
-.L860:
+	b	.L845
+.L850:
 	ldrh	w0, [x24, w20, sxtw 1]
 	add	w27, w20, 1
 	cmp	w0, w25
-	bne	.L857
+	bne	.L847
 	mov	w1, w25
 	mov	x0, x26
 	bl	sftl_printk
@@ -5949,22 +5897,22 @@ FtlGcFreeBadSuperBlk:
 	bl	FtlBbmTblFlush
 	ldrh	w0, [x19, 3320]
 	mov	w1, w27
-.L858:
+.L848:
 	cmp	w20, w0
-	bcc	.L859
+	bcc	.L849
 	sub	w0, w0, #1
 	strh	w0, [x19, 3320]
-.L857:
+.L847:
 	and	w20, w27, 65535
-	b	.L856
-.L859:
+	b	.L846
+.L849:
 	sub	w2, w1, #1
 	ldrh	w3, [x24, w1, sxtw 1]
 	add	w20, w20, 1
 	add	w1, w1, 1
 	and	w20, w20, 65535
 	strh	w3, [x24, w2, sxtw 1]
-	b	.L858
+	b	.L848
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -5978,88 +5926,88 @@ update_vpc_list:
 	add	x0, x19, :lo12:.LANCHOR0
 	str	x21, [sp, 32]
 	ubfiz	x1, x20, 1, 16
-	ldr	x2, [x0, 80]
+	ldr	x2, [x0, 72]
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L867
-	ldrh	w1, [x0, 234]
+	cbnz	w1, .L857
+	ldrh	w1, [x0, 226]
 	cmp	w1, w20
-	bne	.L868
+	bne	.L858
 	mov	w1, -1
-	strh	w1, [x0, 234]
-.L868:
+	strh	w1, [x0, 226]
+.L858:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 232]
+	ldrh	w1, [x0, 224]
 	cmp	w1, w20
-	bne	.L869
+	bne	.L859
 	mov	w1, -1
-	strh	w1, [x0, 232]
-.L869:
+	strh	w1, [x0, 224]
+.L859:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 184]
+	ldrh	w1, [x0, 176]
 	cmp	w1, w20
-	bne	.L870
+	bne	.L860
 	mov	w1, -1
-	strh	w1, [x0, 184]
-.L871:
+	strh	w1, [x0, 176]
+.L861:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w1, w20
-	add	x0, x21, 2576
+	add	x0, x21, 2568
 	bl	List_remove_node
-	ldrh	w0, [x21, 2592]
-	cbnz	w0, .L873
+	ldrh	w0, [x21, 2584]
+	cbnz	w0, .L863
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2824
+	mov	w2, 2828
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L873:
+.L863:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 2592]
+	ldrh	w0, [x19, 2584]
 	sub	w0, w0, #1
-	strh	w0, [x19, 2592]
+	strh	w0, [x19, 2584]
 	mov	w0, w20
 	bl	free_data_superblock
 	mov	w0, w20
 	bl	FtlGcFreeBadSuperBlk
-	ldrh	w1, [x19, 2592]
-	ldrh	w0, [x19, 236]
+	ldrh	w1, [x19, 2584]
+	ldrh	w0, [x19, 228]
 	add	w0, w0, w1
-	ldrh	w1, [x19, 252]
+	ldrh	w1, [x19, 244]
 	cmp	w0, w1
-	ble	.L877
+	ble	.L867
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2827
+	mov	w2, 2831
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L877:
+.L867:
 	mov	w0, 1
-	b	.L866
-.L870:
-	ldrh	w1, [x0, 32]
+	b	.L856
+.L860:
+	ldrh	w1, [x0, 24]
 	cmp	w1, w20
-	beq	.L876
-	ldrh	w1, [x0, 88]
+	beq	.L866
+	ldrh	w1, [x0, 80]
 	cmp	w1, w20
-	beq	.L876
-	ldrh	w0, [x0, 136]
+	beq	.L866
+	ldrh	w0, [x0, 128]
 	cmp	w0, w20
-	bne	.L871
-.L876:
-	mov	w0, 0
+	bne	.L861
 .L866:
+	mov	w0, 0
+.L856:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L867:
+.L857:
 	mov	w0, w20
 	bl	List_update_data_list
-	b	.L876
+	b	.L866
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
 	.global	decrement_vpc_count
@@ -6073,76 +6021,76 @@ decrement_vpc_count:
 	mov	w0, 65535
 	adrp	x19, .LANCHOR0
 	cmp	w20, w0
-	beq	.L880
+	beq	.L870
 	add	x22, x19, :lo12:.LANCHOR0
 	ubfiz	x21, x20, 1, 16
-	ldr	x1, [x22, 80]
+	ldr	x1, [x22, 72]
 	ldrh	w0, [x1, x21]
-	cbnz	w0, .L881
+	cbnz	w0, .L871
 	mov	w2, 0
 	mov	w1, w20
 	adrp	x0, .LC103
 	add	x0, x0, :lo12:.LC103
 	bl	sftl_printk
-	ldr	x0, [x22, 80]
+	ldr	x0, [x22, 72]
 	ldrh	w0, [x0, x21]
-	cbz	w0, .L882
-.L887:
+	cbz	w0, .L872
+.L877:
 	mov	w21, 0
-.L879:
+.L869:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L882:
+.L872:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2842
+	mov	w2, 2846
 	add	x1, x1, 384
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L887
-.L881:
+	b	.L877
+.L871:
 	sub	w0, w0, #1
 	strh	w0, [x1, x21]
-.L880:
+.L870:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x19, 3714]
 	cmp	w0, w1
-	bne	.L884
+	bne	.L874
 	strh	w20, [x19, 3714]
-	b	.L887
-.L884:
+	b	.L877
+.L874:
 	cmp	w20, w0
-	beq	.L887
+	beq	.L877
 	bl	update_vpc_list
 	cmp	w0, 0
-	ldr	x1, [x19, 2568]
+	ldr	x1, [x19, 2560]
 	cset	w21, ne
-	ldr	x0, [x19, 2576]
+	ldr	x0, [x19, 2568]
 	strh	w20, [x19, 3714]
 	sub	x0, x0, x1
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
 	movk	x1, 0xaaab, lsl 0
 	mul	x0, x0, x1
-	ldr	x1, [x19, 80]
+	ldr	x1, [x19, 72]
 	and	x2, x0, 65535
 	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L879
+	cbnz	w1, .L869
 	cmp	w20, w0, uxth
-	beq	.L879
+	beq	.L869
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2858
+	mov	w2, 2862
 	add	x1, x1, 384
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L879
+	b	.L869
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
 	.global	FtlSuperblockPowerLostFix
@@ -6184,34 +6132,34 @@ FtlSuperblockPowerLostFix:
 	ldrh	w22, [x19, 4]
 	and	w22, w22, 1
 	add	w22, w22, 6
-.L894:
+.L884:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L890
-.L891:
+	cbnz	w0, .L880
+.L881:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x19]
 	ldrh	w3, [x19, 4]
 	add	x23, x23, :lo12:__stack_chk_guard
-	ldr	x2, [x21, 80]
+	ldr	x2, [x21, 72]
 	lsl	x0, x0, 1
 	ldrh	w1, [x2, x0]
 	sub	w1, w1, w3
 	strh	w1, [x2, x0]
 	strb	wzr, [x19, 6]
-	ldrh	w0, [x21, 314]
+	ldrh	w0, [x21, 306]
 	strh	w0, [x19, 2]
 	strh	wzr, [x19, 4]
 	ldr	x1, [x29, 104]
 	ldr	x0, [x23]
 	eor	x0, x1, x0
-	cbz	x0, .L895
+	cbz	x0, .L885
 	bl	__stack_chk_fail
-.L890:
+.L880:
 	mov	x0, x19
 	bl	get_new_active_ppa
 	str	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L891
+	beq	.L881
 	ldr	w0, [x20, 2672]
 	mov	w3, 0
 	str	w0, [x24, 4]
@@ -6226,9 +6174,9 @@ FtlSuperblockPowerLostFix:
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	subs	w22, w22, #1
-	bne	.L894
-	b	.L891
-.L895:
+	bne	.L884
+	b	.L881
+.L885:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -6253,52 +6201,52 @@ FtlMakeBbt:
 	bl	FtlLoadFactoryBbt
 	mov	w28, -3872
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x26, x0, 400
-	add	x25, x0, 380
+	add	x26, x0, 392
+	add	x25, x0, 372
 	mov	x19, x0
 	add	x20, x0, 3728
-.L904:
-	ldrh	w0, [x19, 266]
+.L894:
+	ldrh	w0, [x19, 258]
 	cmp	w24, w0
-	bcc	.L910
+	bcc	.L900
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-.L911:
-	ldrh	w0, [x20, 326]
+.L901:
+	ldrh	w0, [x20, 318]
 	cmp	w0, w19
-	bhi	.L912
-	add	x20, x20, 368
+	bhi	.L902
+	add	x20, x20, 360
 	ldrh	w19, [x20, 12]
 	mov	w22, 65535
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L913:
+.L903:
 	ldrh	w0, [x20, 12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L917
+	ble	.L907
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L914
+	beq	.L904
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L915
+	cbz	w0, .L905
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-.L914:
+.L904:
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-	b	.L913
-.L910:
+	b	.L903
+.L900:
 	ldr	x0, [x19, 3464]
 	mov	w2, 65535
 	ldr	x27, [x19, 3528]
 	ldrh	w1, [x25]
 	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	beq	.L905
-	ldrh	w23, [x19, 310]
+	beq	.L895
+	ldrh	w23, [x19, 302]
 	mov	w2, 1
 	madd	w23, w23, w24, w1
 	mov	w1, w2
@@ -6308,33 +6256,33 @@ FtlMakeBbt:
 	bl	FlashReadPages
 	ldr	x1, [x20, 8]
 	ldr	x0, [x26]
-	ldrh	w2, [x19, 310]
+	ldrh	w2, [x19, 302]
 	add	w2, w2, 7
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-.L906:
+.L896:
 	mov	w0, w23
 	add	w24, w24, 1
 	bl	FtlBbmMapBadBlock
 	add	x26, x26, 8
 	add	x25, x25, 2
-	b	.L904
-.L905:
+	b	.L894
+.L895:
 	mov	w1, w24
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20, 8]
 	ldr	x1, [x26]
 	bl	FtlBbt2Bitmap
-	ldrh	w22, [x19, 310]
-.L908:
+	ldrh	w22, [x19, 302]
+.L898:
 	sub	w22, w22, #1
 	and	w22, w22, 65535
-.L907:
-	ldrh	w0, [x19, 310]
+.L897:
+	ldrh	w0, [x19, 302]
 	madd	w0, w24, w0, w22
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L908
+	beq	.L898
 	ldr	x0, [x19, 3528]
 	mov	w2, 16
 	strh	w22, [x25]
@@ -6346,7 +6294,7 @@ FtlMakeBbt:
 	bl	ftl_memset
 	strh	w28, [x27]
 	str	wzr, [x27, 4]
-	ldrh	w23, [x19, 310]
+	ldrh	w23, [x19, 302]
 	ldrh	w0, [x25]
 	strh	w0, [x27, 2]
 	ldrh	w2, [x19, 3640]
@@ -6369,52 +6317,52 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L906
+	bne	.L896
 	mov	w0, w23
 	bl	FtlBbmMapBadBlock
-	b	.L907
-.L912:
+	b	.L897
+.L902:
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	and	w19, w19, 65535
-	b	.L911
-.L915:
+	b	.L901
+.L905:
 	ldrh	w0, [x20]
 	cmp	w0, w22
-	bne	.L916
+	bne	.L906
 	strh	w19, [x20]
-	b	.L914
-.L916:
+	b	.L904
+.L906:
 	strh	w19, [x20, 4]
-.L917:
+.L907:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, 2
 	ldr	x1, [x21, 3416]
-	ldrh	w0, [x21, 368]
-	str	wzr, [x21, 376]
-	strh	wzr, [x21, 370]
+	ldrh	w0, [x21, 360]
+	str	wzr, [x21, 368]
+	strh	wzr, [x21, 362]
 	lsl	w0, w0, 10
 	str	w0, [x1, 4]
 	ldr	x0, [x21, 3416]
-	ldrh	w1, [x21, 372]
+	ldrh	w1, [x21, 364]
 	lsl	w1, w1, 10
 	str	w1, [x0, 36]
 	mov	w1, 1
 	bl	FlashEraseBlocks
-	ldrh	w0, [x21, 368]
+	ldrh	w0, [x21, 360]
 	bl	FtlBbmMapBadBlock
-	ldrh	w0, [x21, 372]
+	ldrh	w0, [x21, 364]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	strh	wzr, [x21, 370]
-	ldr	w0, [x21, 376]
-	ldrh	w1, [x21, 372]
+	strh	wzr, [x21, 362]
+	ldr	w0, [x21, 368]
+	ldrh	w1, [x21, 364]
 	add	w0, w0, 1
-	str	w0, [x21, 376]
-	ldrh	w0, [x21, 368]
-	strh	w0, [x21, 372]
-	strh	w1, [x21, 368]
+	str	w0, [x21, 368]
+	ldrh	w0, [x21, 360]
+	strh	w0, [x21, 364]
+	strh	w1, [x21, 360]
 	bl	FtlBbmTblFlush
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
@@ -6444,18 +6392,18 @@ js_hash:
 	mov	w0, 42982
 	mov	x3, 0
 	movk	w0, 0x47c6, lsl 16
-.L926:
+.L916:
 	cmp	w1, w3
-	bhi	.L927
+	bhi	.L917
 	ret
-.L927:
+.L917:
 	lsr	w2, w0, 2
 	ldrb	w5, [x4, x3]
 	add	w2, w2, w0, lsl 5
 	add	x3, x3, 1
 	add	w2, w2, w5
 	eor	w0, w0, w2
-	b	.L926
+	b	.L916
 	.size	js_hash, .-js_hash
 	.align	2
 	.global	Ftl_write_map_blk_to_last_page
@@ -6471,9 +6419,9 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x20, [x0, 16]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	bne	.L929
+	bne	.L919
 	ldrh	w0, [x19, 8]
-	cbz	w0, .L930
+	cbz	w0, .L920
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6481,7 +6429,7 @@ Ftl_write_map_blk_to_last_page:
 	add	x1, x1, 408
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L930:
+.L920:
 	ldrh	w0, [x19, 8]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
@@ -6492,14 +6440,14 @@ Ftl_write_map_blk_to_last_page:
 	strh	wzr, [x19]
 	add	w0, w0, 1
 	str	w0, [x19, 48]
-.L931:
+.L921:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L929:
+.L919:
 	ubfiz	x0, x0, 1, 16
 	adrp	x21, .LANCHOR0
 	ldrh	w1, [x19, 2]
@@ -6520,19 +6468,19 @@ Ftl_write_map_blk_to_last_page:
 	ldrh	w0, [x19, 4]
 	strh	w0, [x22]
 	strh	w23, [x22, 2]
-	ldrh	w2, [x20, 316]
+	ldrh	w2, [x20, 308]
 	ldr	x0, [x20, 3464]
 	lsl	w2, w2, 3
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w0, 0
-.L932:
+.L922:
 	ldrh	w2, [x19, 6]
 	cmp	w2, w0
-	bhi	.L934
+	bhi	.L924
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x6, x21, 3728
-	ldrh	w1, [x21, 322]
+	ldrh	w1, [x21, 314]
 	ldr	x0, [x21, 3736]
 	bl	js_hash
 	str	w0, [x22, 12]
@@ -6546,12 +6494,12 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19, 2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-	b	.L931
-.L934:
+	b	.L921
+.L924:
 	ubfiz	x2, x0, 2, 16
 	ldr	w3, [x24, x2]
 	cmp	w23, w3, lsr 10
-	bne	.L933
+	bne	.L923
 	add	w1, w1, 1
 	ldr	x4, [x20, 3464]
 	and	w1, w1, 65535
@@ -6561,10 +6509,10 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x2, [x20, 3464]
 	add	x2, x2, x3
 	str	w4, [x2, 4]
-.L933:
+.L923:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L932
+	b	.L922
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
 	.global	FtlMapWritePage
@@ -6587,44 +6535,44 @@ FtlMapWritePage:
 	mov	x25, x24
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x20, x22, 3728
-.L940:
+.L930:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2652]
 	add	w1, w1, 1
 	str	w1, [x0, 2652]
-	ldrh	w0, [x0, 316]
+	ldrh	w0, [x0, 308]
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	bge	.L941
+	bge	.L931
 	ldrh	w1, [x19]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L942
-.L941:
+	bne	.L932
+.L931:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L942:
+.L932:
 	ldrh	w1, [x19]
 	ldr	x0, [x19, 16]
 	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L943
+	cbnz	w0, .L933
 	adrp	x0, .LC8
 	mov	w2, 700
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L943:
+.L933:
 	ldrh	w1, [x19]
 	ldrh	w0, [x19, 10]
 	cmp	w1, w0
-	bcc	.L944
+	bcc	.L934
 	adrp	x0, .LC8
 	mov	w2, 701
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L944:
+.L934:
 	ldrh	w1, [x19]
 	mov	w2, 16
 	ldr	x0, [x19, 16]
@@ -6644,7 +6592,7 @@ FtlMapWritePage:
 	ldrh	w0, [x19, 4]
 	strh	w0, [x6]
 	strh	w28, [x6, 2]
-	ldrh	w1, [x22, 322]
+	ldrh	w1, [x22, 314]
 	ldr	x0, [x20, 8]
 	bl	js_hash
 	str	w0, [x6, 12]
@@ -6659,7 +6607,7 @@ FtlMapWritePage:
 	strh	w0, [x19, 2]
 	ldr	w1, [x20]
 	cmn	w1, #1
-	bne	.L945
+	bne	.L935
 	ldr	w1, [x20, 4]
 	adrp	x0, .LC104
 	add	x0, x0, :lo12:.LC104
@@ -6668,37 +6616,37 @@ FtlMapWritePage:
 	bl	sftl_printk
 	ldrh	w0, [x19, 2]
 	cmp	w0, 2
-	bhi	.L946
-	ldrh	w0, [x22, 316]
+	bhi	.L936
+	ldrh	w0, [x22, 308]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2]
-.L946:
+.L936:
 	cmp	w21, 3
-	bls	.L947
+	bls	.L937
 	add	x25, x25, :lo12:.LANCHOR0
 	adrp	x0, .LC105
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC105
 	ldr	w1, [x25, 3732]
 	bl	sftl_printk
-.L948:
-	b	.L948
-.L947:
+.L938:
+	b	.L938
+.L937:
 	ldr	w0, [x19, 52]
-	cbz	w0, .L940
-.L962:
-	b	.L962
-.L945:
+	cbz	w0, .L930
+.L952:
+	b	.L952
+.L935:
 	cmp	w0, 1
-	beq	.L951
+	beq	.L941
 	cmp	w1, 256
-	beq	.L951
+	beq	.L941
 	ldr	w0, [x19, 56]
-	cbz	w0, .L952
-.L951:
+	cbz	w0, .L942
+.L941:
 	str	wzr, [x19, 56]
-	b	.L940
-.L952:
+	b	.L930
+.L942:
 	ldr	x0, [x19, 40]
 	ldr	w1, [x20, 4]
 	str	w1, [x0, w26, uxtw 2]
@@ -6725,9 +6673,9 @@ load_l2p_region:
 	and	x19, x1, 65535
 	stp	x23, x24, [sp, 48]
 	str	x25, [sp, 64]
-	ldrh	w0, [x0, 348]
+	ldrh	w0, [x0, 340]
 	cmp	w0, w22
-	bcs	.L965
+	bcs	.L955
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6735,25 +6683,25 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L965:
+.L955:
 	add	x20, x21, :lo12:.LANCHOR0
 	ubfiz	x0, x22, 2, 16
 	ldr	x1, [x20, 3616]
 	ldr	w24, [x1, x0]
-	cbnz	w24, .L966
-	ldr	x0, [x20, 2616]
+	cbnz	w24, .L956
+	ldr	x0, [x20, 2608]
 	lsl	x19, x19, 4
-	ldrh	w2, [x20, 322]
+	ldrh	w2, [x20, 314]
 	mov	w1, 255
 	add	x0, x0, x19
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	ldr	x0, [x20, 2616]
+	ldr	x0, [x20, 2608]
 	strh	w22, [x0, x19]
-	ldr	x0, [x20, 2616]
+	ldr	x0, [x20, 2608]
 	add	x19, x0, x19
 	str	wzr, [x19, 4]
-.L967:
+.L957:
 	mov	w0, 0
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -6761,8 +6709,8 @@ load_l2p_region:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L966:
-	ldr	x0, [x20, 2616]
+.L956:
+	ldr	x0, [x20, 2608]
 	lsl	x19, x19, 4
 	add	x23, x20, 3728
 	mov	w2, 1
@@ -6778,7 +6726,7 @@ load_l2p_region:
 	ldr	x25, [x20, 3744]
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L968
+	beq	.L958
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC106
@@ -6790,16 +6738,16 @@ load_l2p_region:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC94
 	bl	rknand_print_hex
-	ldrh	w3, [x20, 348]
+	ldrh	w3, [x20, 340]
 	adrp	x0, .LC107
 	ldr	x1, [x20, 3616]
 	mov	w2, 4
 	add	x0, x0, :lo12:.LC107
 	bl	rknand_print_hex
-.L969:
+.L959:
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L970
+	beq	.L960
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6807,30 +6755,30 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L970:
+.L960:
 	add	x21, x21, :lo12:.LANCHOR0
-	ldr	x0, [x21, 2616]
+	ldr	x0, [x21, 2608]
 	add	x0, x0, x19
 	str	wzr, [x0, 4]
-	ldr	x0, [x21, 2616]
+	ldr	x0, [x21, 2608]
 	strh	w22, [x0, x19]
-	b	.L967
-.L968:
+	b	.L957
+.L958:
 	ldr	w0, [x20, 3728]
 	cmp	w0, 256
-	bne	.L969
+	bne	.L959
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC108
 	add	x0, x0, :lo12:.LC108
 	bl	sftl_printk
-	ldr	x0, [x20, 2616]
+	ldr	x0, [x20, 2608]
 	mov	w1, w22
 	add	x0, x0, x19
 	ldr	x2, [x0, 8]
 	add	x0, x20, 3648
 	bl	FtlMapWritePage
-	b	.L969
+	b	.L959
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
 	.global	ftl_map_blk_gc
@@ -6852,12 +6800,12 @@ ftl_map_blk_gc:
 	ldrh	w2, [x19, 8]
 	sub	w1, w1, #5
 	cmp	w2, w1
-	blt	.L973
+	blt	.L963
 	ubfiz	x0, x0, 1, 16
 	ldrh	w26, [x20, x0]
-	cbz	w26, .L973
+	cbz	w26, .L963
 	ldr	w1, [x19, 52]
-	cbnz	w1, .L973
+	cbnz	w1, .L963
 	mov	w1, 1
 	str	w1, [x19, 52]
 	strh	wzr, [x20, x0]
@@ -6866,35 +6814,35 @@ ftl_map_blk_gc:
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
 	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 316]
+	ldrh	w0, [x0, 308]
 	cmp	w1, w0
-	bcc	.L974
+	bcc	.L964
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L974:
+.L964:
 	add	x27, x22, :lo12:.LANCHOR0
 	adrp	x23, .LANCHOR1
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x21, x27, 3728
 	add	x23, x23, 472
 	mov	w20, 0
-.L975:
+.L965:
 	ldrh	w0, [x19, 6]
 	cmp	w0, w20
-	bhi	.L982
+	bhi	.L972
 	mov	w1, 1
 	mov	w0, w26
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19, 52]
-.L973:
+.L963:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
-	ldrh	w0, [x22, 316]
+	ldrh	w0, [x22, 308]
 	cmp	w1, w0
-	bcc	.L983
+	bcc	.L973
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L983:
+.L973:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -6903,12 +6851,12 @@ ftl_map_blk_gc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L982:
+.L972:
 	ubfiz	x0, x20, 2, 16
 	add	x28, x25, x0
 	ldr	w1, [x25, x0]
 	cmp	w26, w1, lsr 10
-	bne	.L976
+	bne	.L966
 	ldr	x1, [x27, 3472]
 	mov	w2, 1
 	ldr	x24, [x27, 3528]
@@ -6920,36 +6868,36 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	beq	.L977
+	beq	.L967
 	adrp	x0, .LC8
 	mov	w2, 611
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L977:
+.L967:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L978
-.L980:
+	bne	.L968
+.L970:
 	str	wzr, [x28]
-.L979:
-	b	.L979
-.L978:
+.L969:
+	b	.L969
+.L968:
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	bne	.L980
+	bne	.L970
 	ldrh	w1, [x24]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L980
+	bne	.L970
 	ldr	x2, [x21, 8]
 	mov	w1, w20
 	mov	x0, x19
 	bl	FtlMapWritePage
-.L976:
+.L966:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L975
+	b	.L965
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
 	.global	flush_l2p_region
@@ -6961,13 +6909,13 @@ flush_l2p_region:
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfiz	x20, x0, 4, 16
-	ldr	x0, [x19, 2616]
+	ldr	x0, [x19, 2608]
 	add	x1, x0, x20
 	ldr	x2, [x1, 8]
 	ldrh	w1, [x0, x20]
 	add	x0, x19, 3648
 	bl	FtlMapWritePage
-	ldr	x0, [x19, 2616]
+	ldr	x0, [x19, 2608]
 	add	x0, x0, x20
 	ldr	w1, [x0, 4]
 	and	w1, w1, 2147483647
@@ -6992,10 +6940,10 @@ log2phys:
 	stp	x23, x24, [sp, 48]
 	mov	x22, x1
 	mov	w23, w2
-	ldrh	w24, [x0, 320]
+	ldrh	w24, [x0, 312]
 	ldr	w0, [x0, 2632]
 	cmp	w25, w0
-	bcc	.L992
+	bcc	.L982
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7003,97 +6951,97 @@ log2phys:
 	add	x1, x1, 488
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L992:
+.L982:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w25, w1
-	bcs	.L993
+	bcs	.L983
 	add	w24, w24, 7
-	ldrh	w1, [x0, 350]
-	ldr	x2, [x0, 2616]
+	ldrh	w1, [x0, 342]
+	ldr	x2, [x0, 2608]
 	mov	x0, 0
 	lsr	w21, w25, w24
 	and	w21, w21, 65535
-.L994:
+.L984:
 	and	x19, x0, 65535
 	cmp	w19, w1
-	bcc	.L999
+	bcc	.L989
 	bl	select_l2p_ram_region
 	and	x19, x0, 65535
 	add	x2, x20, :lo12:.LANCHOR0
 	ubfiz	x1, x19, 4, 16
 	mov	w26, w0
-	ldr	x2, [x2, 2616]
+	ldr	x2, [x2, 2608]
 	add	x3, x2, x1
 	ldrh	w2, [x2, x1]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1000
+	beq	.L990
 	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L1000
+	tbz	w1, #31, .L990
 	bl	flush_l2p_region
-.L1000:
+.L990:
 	mov	w1, w26
 	mov	w0, w21
 	bl	load_l2p_region
-	b	.L996
-.L993:
+	b	.L986
+.L983:
 	mov	w0, -1
-	cbnz	w23, .L991
+	cbnz	w23, .L981
 	str	w0, [x22]
-.L991:
+.L981:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L999:
+.L989:
 	add	x0, x0, 1
 	add	x3, x2, x0, lsl 4
 	ldrh	w3, [x3, -16]
 	cmp	w3, w21
-	bne	.L994
-.L996:
+	bne	.L984
+.L986:
 	mov	x0, 1
 	lsl	x0, x0, x24
 	sub	w0, w0, #1
 	and	w0, w0, w25
 	and	x0, x0, 65535
-	cbnz	w23, .L997
+	cbnz	w23, .L987
 	add	x1, x20, :lo12:.LANCHOR0
-	ldr	x1, [x1, 2616]
+	ldr	x1, [x1, 2608]
 	add	x1, x1, x19, lsl 4
 	ldr	x1, [x1, 8]
 	ldr	w0, [x1, x0, lsl 2]
 	str	w0, [x22]
-.L998:
+.L988:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x20, 2616]
+	ldr	x0, [x20, 2608]
 	add	x19, x0, x19, lsl 4
 	ldr	w0, [x19, 4]
 	cmn	w0, #1
-	beq	.L1002
+	beq	.L992
 	add	w0, w0, 1
 	str	w0, [x19, 4]
-.L1002:
+.L992:
 	mov	w0, 0
-	b	.L991
-.L997:
+	b	.L981
+.L987:
 	add	x2, x20, :lo12:.LANCHOR0
 	lsl	x1, x19, 4
 	ldr	w4, [x22]
-	ldr	x3, [x2, 2616]
+	ldr	x3, [x2, 2608]
 	add	x3, x3, x1
 	ldr	x3, [x3, 8]
 	str	w4, [x3, x0, lsl 2]
-	strh	w21, [x2, 2624]
-	ldr	x0, [x2, 2616]
+	strh	w21, [x2, 2616]
+	ldr	x0, [x2, 2608]
 	add	x0, x0, x1
 	ldr	w1, [x0, 4]
 	orr	w1, w1, -2147483648
 	str	w1, [x0, 4]
-	b	.L998
+	b	.L988
 	.size	log2phys, .-log2phys
 	.align	2
 	.global	FtlWriteDump_data
@@ -7109,23 +7057,23 @@ FtlWriteDump_data:
 	adrp	x22, __stack_chk_guard
 	stp	x25, x26, [sp, 64]
 	add	x0, x22, :lo12:__stack_chk_guard
-	ldrh	w2, [x20, 36]
+	ldrh	w2, [x20, 28]
 	ldr	x1, [x0]
 	str	x1, [x29, 120]
 	mov	x1,0
-	cbz	w2, .L1006
-	ldrb	w1, [x20, 40]
-	cbnz	w1, .L1006
-	ldrb	w1, [x20, 39]
-	ldrh	w3, [x20, 314]
+	cbz	w2, .L996
+	ldrb	w1, [x20, 32]
+	cbnz	w1, .L996
+	ldrb	w1, [x20, 31]
+	ldrh	w3, [x20, 306]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L1006
-	ldrb	w0, [x20, 42]
-	cbnz	w0, .L1005
+	beq	.L996
+	ldrb	w0, [x20, 34]
+	cbnz	w0, .L995
 	ldr	w23, [x20, 2632]
 	add	x1, x29, 84
-	ldrh	w25, [x20, 244]
+	ldrh	w25, [x20, 236]
 	mov	w2, 0
 	sub	w23, w23, #1
 	mov	w0, w23
@@ -7138,41 +7086,41 @@ FtlWriteDump_data:
 	stp	x1, x21, [x29, 96]
 	str	w23, [x29, 112]
 	str	wzr, [x21, 4]
-	beq	.L1008
+	beq	.L998
 	mov	w2, 0
 	mov	w1, 1
 	add	x0, x29, 88
 	bl	FlashReadPages
-.L1009:
+.L999:
 	add	x26, x19, :lo12:.LANCHOR0
 	lsl	w25, w25, 2
-	add	x20, x26, 32
+	add	x20, x26, 24
 	mov	w0, -3947
 	mov	w24, 0
 	strh	w0, [x21]
-.L1010:
+.L1000:
 	cmp	w25, w24
-	bne	.L1014
-.L1011:
+	bne	.L1004
+.L1001:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	strb	w0, [x19, 42]
-.L1005:
+	strb	w0, [x19, 34]
+.L995:
 	add	x22, x22, :lo12:__stack_chk_guard
 	ldr	x1, [x29, 120]
 	ldr	x0, [x22]
 	eor	x0, x1, x0
-	cbz	x0, .L1016
+	cbz	x0, .L1006
 	bl	__stack_chk_fail
-.L1008:
-	ldrh	w2, [x20, 322]
+.L998:
+	ldrh	w2, [x20, 314]
 	mov	w1, 255
 	ldr	x0, [x20, 3464]
 	bl	ftl_memset
-	b	.L1009
-.L1014:
+	b	.L999
+.L1004:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1011
+	cbz	w0, .L1001
 	ldr	w0, [x29, 92]
 	add	w24, w24, 1
 	stp	w23, w0, [x21, 8]
@@ -7194,12 +7142,12 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L1010
-.L1006:
+	b	.L1000
+.L996:
 	add	x19, x19, :lo12:.LANCHOR0
-	strb	wzr, [x19, 42]
-	b	.L1005
-.L1016:
+	strb	wzr, [x19, 34]
+	b	.L995
+.L1006:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -7224,14 +7172,14 @@ FtlReUsePrevPpa:
 	add	x2, x22, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	ubfiz	x20, x0, 1, 16
-	ldr	x3, [x2, 80]
+	ldr	x3, [x2, 72]
 	ldrh	w1, [x3, x20]
-	cbnz	w1, .L1025
-	ldr	x19, [x2, 2600]
-	cbz	x19, .L1026
-	ldrh	w3, [x2, 236]
+	cbnz	w1, .L1015
+	ldr	x19, [x2, 2592]
+	cbz	x19, .L1016
+	ldrh	w3, [x2, 228]
 	mov	x4, -6148914691236517206
-	ldr	x2, [x2, 2568]
+	ldr	x2, [x2, 2560]
 	movk	x4, 0xaaab, lsl 0
 	mov	w5, 65535
 	sub	x19, x19, x2
@@ -7239,36 +7187,36 @@ FtlReUsePrevPpa:
 	mul	x19, x19, x4
 	mov	w4, 6
 	and	w19, w19, 65535
-.L1027:
+.L1017:
 	cmp	w1, w3
-	beq	.L1026
+	beq	.L1016
 	cmp	w19, w0
-	bne	.L1028
+	bne	.L1018
 	add	x23, x22, :lo12:.LANCHOR0
 	mov	w1, w19
-	add	x0, x23, 2600
+	add	x0, x23, 2592
 	bl	List_remove_node
-	ldrh	w0, [x23, 236]
-	cbnz	w0, .L1029
+	ldrh	w0, [x23, 228]
+	cbnz	w0, .L1019
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 1733
+	mov	w2, 1735
 	add	x1, x1, 504
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1029:
+.L1019:
 	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x22, 236]
+	ldrh	w0, [x22, 228]
 	sub	w0, w0, #1
-	strh	w0, [x22, 236]
+	strh	w0, [x22, 228]
 	mov	w0, w19
 	bl	INSERT_DATA_LIST
-	ldr	x1, [x22, 80]
+	ldr	x1, [x22, 72]
 	ldrh	w0, [x1, x20]
 	add	w0, w0, 1
 	strh	w0, [x1, x20]
-.L1026:
+.L1016:
 	add	x1, x29, 76
 	mov	w2, 1
 	mov	w0, w21
@@ -7278,18 +7226,18 @@ FtlReUsePrevPpa:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1028:
+.L1018:
 	umull	x19, w19, w4
 	ldrh	w19, [x2, x19]
 	cmp	w19, w5
-	beq	.L1026
+	beq	.L1016
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L1027
-.L1025:
+	b	.L1017
+.L1015:
 	add	w1, w1, 1
 	strh	w1, [x3, x20]
-	b	.L1026
+	b	.L1016
 	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
 	.global	FtlRecoverySuperblock
@@ -7312,52 +7260,52 @@ FtlRecoverySuperblock:
 	mov	w1, 65535
 	ldrh	w2, [x20]
 	cmp	w2, w1
-	beq	.L1037
+	beq	.L1027
 	ldrb	w0, [x20, 6]
 	adrp	x19, .LANCHOR0
 	str	w0, [x29, 156]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w26, [x20, 2]
-	ldrh	w0, [x0, 314]
+	ldrh	w0, [x0, 306]
 	cmp	w0, w26
-	bne	.L1038
+	bne	.L1028
 	strh	wzr, [x20, 4]
-.L1164:
+.L1154:
 	strb	wzr, [x20, 6]
-.L1037:
+.L1027:
 	ldr	x1, [x29, 120]
 	mov	w0, 0
 	add	x1, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 184]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L1106
+	cbz	x1, .L1096
 	bl	__stack_chk_fail
-.L1038:
+.L1028:
 	ldrh	w0, [x20, 16]
 	mov	w21, 0
-.L1039:
+.L1029:
 	cmp	w0, w1
-	beq	.L1040
+	beq	.L1030
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	mov	w23, w0
 	cmn	w0, #1
-	beq	.L1041
+	beq	.L1031
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x28, x20, 16
 	mov	x4, x28
 	mov	w22, 0
 	mov	w10, 65535
 	mov	w6, 4
-	ldrh	w3, [x0, 244]
-	ldrh	w8, [x0, 322]
+	ldrh	w3, [x0, 236]
+	ldrh	w8, [x0, 314]
 	add	x3, x3, 8
-	ldrh	w9, [x0, 324]
+	ldrh	w9, [x0, 316]
 	add	x3, x20, x3, lsl 1
-.L1042:
+.L1032:
 	cmp	x3, x4
-	bne	.L1046
+	bne	.L1036
 	add	x24, x19, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w1, w22
@@ -7370,68 +7318,68 @@ FtlRecoverySuperblock:
 	mov	w7, 65535
 	mov	x6, x4
 	mov	w3, 0
-.L1047:
+.L1037:
 	cmp	w22, w3
-	bne	.L1052
+	bne	.L1042
 	add	w22, w23, 1
 	ldr	w0, [x4, 4]
 	and	w22, w22, 65535
-.L1159:
+.L1149:
 	lsr	w0, w0, 10
 	bl	P2V_plane
 	and	w27, w0, 65535
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 314]
+	ldrh	w0, [x0, 306]
 	cmp	w0, w22
-	bne	.L1054
+	bne	.L1044
 	strh	w22, [x20, 2]
 	strb	wzr, [x20, 6]
 	strh	wzr, [x20, 4]
-.L1054:
+.L1044:
 	ldr	w0, [x29, 156]
 	cmp	w22, w26
 	ccmp	w27, w0, 0, eq
-	bne	.L1055
-.L1165:
+	bne	.L1045
+.L1155:
 	mov	w2, w27
 	mov	w1, w22
 	mov	x0, x20
 	bl	ftl_sb_update_avl_pages
-	b	.L1037
-.L1040:
+	b	.L1027
+.L1030:
 	add	w21, w21, 1
 	and	w21, w21, 65535
 	add	x0, x20, x21, sxtw 1
 	ldrh	w0, [x0, 16]
-	b	.L1039
-.L1041:
-	cbz	w26, .L1043
+	b	.L1029
+.L1031:
+	cbz	w26, .L1033
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 1800
+	mov	w2, 1802
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1043:
+.L1033:
 	ldr	w0, [x29, 156]
 	cmp	w0, 0
 	ccmp	w21, w0, 4, ne
-	beq	.L1044
+	beq	.L1034
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 1801
+	mov	w2, 1803
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1044:
+.L1034:
 	strh	wzr, [x20, 2]
-	b	.L1164
-.L1046:
+	b	.L1154
+.L1036:
 	ldrh	w1, [x4]
 	cmp	w1, w10
-	beq	.L1045
+	beq	.L1035
 	ldr	x5, [x0, 3440]
 	ubfiz	x7, x22, 5, 16
 	orr	w1, w23, w1, lsl 10
@@ -7451,76 +7399,76 @@ FtlRecoverySuperblock:
 	sdiv	w1, w1, w6
 	add	x1, x5, x1, sxtw 2
 	str	x1, [x2, 16]
-.L1045:
+.L1035:
 	add	x4, x4, 2
-	b	.L1042
-.L1052:
+	b	.L1032
+.L1042:
 	ldr	w0, [x6]
-	cbnz	w0, .L1048
+	cbnz	w0, .L1038
 	ldr	x8, [x6, 16]
 	ldr	w5, [x8, 4]
 	cmn	w5, #1
-	beq	.L1049
+	beq	.L1039
 	ldr	w1, [x24, 2672]
 	mov	w0, w5
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1049
+	cbz	w0, .L1039
 	add	w5, w5, 1
 	str	w5, [x24, 2672]
-.L1049:
+.L1039:
 	ldr	w0, [x8]
 	cmn	w0, #1
-	bne	.L1051
+	bne	.L1041
 	ubfiz	x3, x3, 5, 16
 	and	w22, w23, 65535
 	add	x3, x4, x3
 	ldr	w0, [x3, 4]
-	b	.L1159
-.L1048:
+	b	.L1149
+.L1038:
 	mov	w7, w9
-.L1051:
+.L1041:
 	add	w3, w3, 1
 	add	x6, x6, 32
 	and	w3, w3, 65535
-	b	.L1047
-.L1055:
+	b	.L1037
+.L1045:
 	mov	w0, 65535
 	cmp	w7, w0
-	bne	.L1056
+	bne	.L1046
 	ldrb	w0, [x20, 8]
-	cbnz	w0, .L1057
-.L1056:
+	cbnz	w0, .L1047
+.L1046:
 	add	x0, x19, :lo12:.LANCHOR0
 	and	w3, w23, 65535
 	ldr	w1, [x0, 3724]
 	cmn	w1, #1
-	bne	.L1058
+	bne	.L1048
 	str	w21, [x0, 3724]
-.L1058:
+.L1048:
 	add	w0, w26, 7
 	cmp	w0, w23, uxth
-	bge	.L1107
+	bge	.L1097
 	sub	w24, w3, #7
 	and	w24, w24, 65535
-.L1059:
+.L1049:
 	add	x25, x19, :lo12:.LANCHOR0
 	mov	w4, 65535
-.L1060:
+.L1050:
 	cmp	w24, w3
-	bhi	.L1067
-	ldrh	w0, [x25, 244]
+	bhi	.L1057
+	ldrh	w0, [x25, 236]
 	mov	x1, x28
 	mov	w23, 0
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-	b	.L1068
-.L1107:
+	b	.L1058
+.L1097:
 	mov	w24, w26
-	b	.L1059
-.L1062:
+	b	.L1049
+.L1052:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1061
+	beq	.L1051
 	ldr	x5, [x25, 3440]
 	ubfiz	x6, x23, 5, 16
 	add	w23, w23, 1
@@ -7528,11 +7476,11 @@ FtlRecoverySuperblock:
 	add	x5, x5, x6
 	and	w23, w23, 65535
 	str	w2, [x5, 4]
-.L1061:
+.L1051:
 	add	x1, x1, 2
-.L1068:
+.L1058:
 	cmp	x0, x1
-	bne	.L1062
+	bne	.L1052
 	ldr	x0, [x25, 3440]
 	mov	w1, w23
 	str	w4, [x29, 136]
@@ -7546,47 +7494,47 @@ FtlRecoverySuperblock:
 	ldr	w3, [x29, 144]
 	add	x0, x1, 16
 	add	x23, x1, x23
-.L1063:
+.L1053:
 	cmp	x23, x0
-	bne	.L1066
+	bne	.L1056
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L1060
-.L1066:
+	b	.L1050
+.L1056:
 	ldr	w1, [x0, -16]
-	cbnz	w1, .L1057
+	cbnz	w1, .L1047
 	ldr	x1, [x0]
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1065
+	beq	.L1055
 	ldr	w1, [x1, 4]
 	cmn	w1, #1
-	beq	.L1065
+	beq	.L1055
 	str	w1, [x25, 3724]
-.L1065:
+.L1055:
 	add	x0, x0, 32
-	b	.L1063
-.L1067:
+	b	.L1053
+.L1057:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	str	w1, [x0, 3724]
-.L1057:
+.L1047:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	mov	w24, w26
 	strh	w0, [x19, 3760]
 	add	x0, x19, 3768
 	str	x0, [x29, 112]
-.L1069:
-	ldrh	w0, [x19, 244]
+.L1059:
+	ldrh	w0, [x19, 236]
 	mov	x1, x28
 	mov	w23, 0
 	mov	w4, 65535
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-.L1070:
+.L1060:
 	cmp	x0, x1
-	bne	.L1072
+	bne	.L1062
 	ldr	x0, [x19, 3440]
 	mov	w1, w23
 	mov	w2, 0
@@ -7598,32 +7546,32 @@ FtlRecoverySuperblock:
 	add	x0, x0, 520
 	mov	x23, 0
 	str	x0, [x29, 136]
-.L1073:
+.L1063:
 	ldr	x0, [x29, 128]
 	cmp	x0, x23
-	bne	.L1100
+	bne	.L1090
 	add	w24, w24, 1
-	ldrh	w0, [x19, 314]
+	ldrh	w0, [x19, 306]
 	and	w24, w24, 65535
 	cmp	w0, w24
-	bne	.L1069
-	ldrh	w1, [x19, 244]
+	bne	.L1059
+	ldrh	w1, [x19, 236]
 	mov	w0, 0
 	strh	w24, [x20, 2]
 	mov	w2, 65535
 	strh	wzr, [x20, 4]
-.L1101:
+.L1091:
 	cmp	w0, w1
-	beq	.L1037
+	beq	.L1027
 	ldrh	w3, [x28], 2
 	cmp	w3, w2
-	beq	.L1102
+	beq	.L1092
 	strb	w0, [x20, 6]
-	b	.L1037
-.L1072:
+	b	.L1027
+.L1062:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1071
+	beq	.L1061
 	ldr	x3, [x19, 3440]
 	ubfiz	x5, x23, 5, 16
 	add	w23, w23, 1
@@ -7631,10 +7579,10 @@ FtlRecoverySuperblock:
 	add	x3, x3, x5
 	and	w23, w23, 65535
 	str	w2, [x3, 4]
-.L1071:
+.L1061:
 	add	x1, x1, 2
-	b	.L1070
-.L1100:
+	b	.L1060
+.L1090:
 	ldr	x4, [x19, 3440]
 	add	x4, x4, x23
 	ldr	w5, [x4, 4]
@@ -7643,50 +7591,50 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	and	w0, w0, 65535
 	cmp	w24, w26
-	bcc	.L1074
+	bcc	.L1064
 	ldr	w1, [x29, 156]
 	ccmp	w1, w0, 0, eq
-	bhi	.L1074
+	bhi	.L1064
 	cmp	w24, w22
 	ccmp	w27, w0, 0, eq
-	beq	.L1075
+	beq	.L1065
 	ldr	w0, [x4]
 	cmn	w0, #1
-	beq	.L1076
+	beq	.L1066
 	ldr	x3, [x4, 16]
 	mov	w0, 61589
 	ldrh	w1, [x3]
 	cmp	w1, w0
-	beq	.L1077
+	beq	.L1067
 	ldrh	w0, [x20]
-.L1161:
+.L1151:
 	bl	decrement_vpc_count
-	b	.L1074
-.L1077:
+	b	.L1064
+.L1067:
 	ldr	w21, [x3, 4]
 	cmn	w21, #1
-	beq	.L1078
+	beq	.L1068
 	ldr	w1, [x19, 2672]
 	mov	w0, w21
 	str	x3, [x29, 144]
 	bl	ftl_cmp_data_ver
 	ldr	x3, [x29, 144]
-	cbz	w0, .L1078
+	cbz	w0, .L1068
 	add	w0, w21, 1
 	str	w0, [x19, 2672]
-.L1078:
+.L1068:
 	ldrh	w1, [x3]
 	mov	w0, 61589
 	cmp	w1, w0
-	beq	.L1079
+	beq	.L1069
 	ldr	x1, [x29, 136]
-	mov	w2, 1952
+	mov	w2, 1954
 	str	x3, [x29, 144]
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	x3, [x29, 144]
-.L1079:
+.L1069:
 	ldp	w25, w0, [x3, 8]
 	add	x1, x29, 176
 	str	w0, [x29, 172]
@@ -7696,12 +7644,12 @@ FtlRecoverySuperblock:
 	ldr	w1, [x19, 3724]
 	ldr	w3, [x29, 172]
 	cmn	w1, #1
-	beq	.L1080
+	beq	.L1070
 	mov	w0, w21
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1080
+	cbz	w0, .L1070
 	cmn	w3, #1
-	beq	.L1081
+	beq	.L1071
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
@@ -7717,72 +7665,72 @@ FtlRecoverySuperblock:
 	add	x3, x0, x23
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L1082
-.L1083:
+	bne	.L1072
+.L1073:
 	mov	w0, -1
 	str	w0, [x29, 172]
-.L1090:
+.L1080:
 	ldr	w4, [x29, 172]
 	cmn	w4, #1
-	beq	.L1074
-.L1105:
+	beq	.L1064
+.L1095:
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	and	w25, w0, 65535
-	ldrh	w0, [x19, 252]
+	ldrh	w0, [x19, 244]
 	mov	w3, w25
 	cmp	w0, w25
-	bhi	.L1096
+	bhi	.L1086
 	ldr	x1, [x29, 136]
-	mov	w2, 2057
+	mov	w2, 2059
 	adrp	x0, .LC8
 	str	w25, [x29, 144]
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	w3, [x29, 144]
-.L1096:
-	ldr	x1, [x19, 80]
+.L1086:
+	ldr	x1, [x19, 72]
 	ubfiz	x0, x25, 1, 16
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1097
+	cbz	w0, .L1087
 	mov	w0, w3
-	b	.L1161
-.L1081:
+	b	.L1151
+.L1071:
 	ldp	w1, w0, [x29, 176]
 	cmp	w1, w0
-	bne	.L1074
+	bne	.L1064
 	mov	w2, 1
 	add	x1, x29, 172
 	mov	w0, w25
 	bl	log2phys
-.L1074:
+.L1064:
 	add	x23, x23, 32
-	b	.L1073
-.L1082:
+	b	.L1063
+.L1072:
 	ldr	w0, [x4, 8]
 	cmp	w25, w0
-	bne	.L1083
+	bne	.L1073
 	ldr	w0, [x4, 4]
 	str	w0, [x29, 144]
 	str	x4, [x29, 104]
 	uxtw	x1, w0
 	ldr	w0, [x19, 3724]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1083
+	cbz	w0, .L1073
 	ldp	w0, w1, [x29, 176]
 	ldr	x4, [x29, 104]
 	cmp	w0, w1
 	ldr	w1, [x29, 172]
-	bne	.L1085
-.L1160:
+	bne	.L1075
+.L1150:
 	mov	w0, w25
 	bl	FtlReUsePrevPpa
-	b	.L1083
-.L1085:
+	b	.L1073
+.L1075:
 	cmp	w0, w1
-	beq	.L1083
+	beq	.L1073
 	cmn	w0, #1
-	beq	.L1086
+	beq	.L1076
 	ldr	x4, [x3, 16]
 	mov	w2, 0
 	str	w0, [x3, 4]
@@ -7792,67 +7740,67 @@ FtlRecoverySuperblock:
 	add	x0, x0, x23
 	bl	FlashReadPages
 	ldr	x4, [x29, 104]
-.L1087:
+.L1077:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3440]
 	ldr	w1, [x1, x23]
 	cmn	w1, #1
-	beq	.L1088
+	beq	.L1078
 	ldr	w3, [x4, 4]
 	ldr	w0, [x0, 3724]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1088
+	cbz	w0, .L1078
 	ldr	w0, [x29, 144]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1083
-.L1088:
+	cbz	w0, .L1073
+.L1078:
 	ldr	w1, [x29, 172]
-	b	.L1160
-.L1086:
+	b	.L1150
+.L1076:
 	str	w0, [x3]
-	b	.L1087
-.L1080:
+	b	.L1077
+.L1070:
 	ldp	w1, w0, [x29, 176]
 	cmp	w1, w0
-	beq	.L1090
+	beq	.L1080
 	cmn	w3, #1
-	beq	.L1092
-	ldr	w0, [x19, 260]
+	beq	.L1082
+	ldr	w0, [x19, 252]
 	cmp	w0, w3, lsr 10
-	bhi	.L1092
+	bhi	.L1082
 	adrp	x0, .LC109
 	mov	w1, w3
 	add	x0, x0, :lo12:.LC109
-.L1163:
+.L1153:
 	bl	sftl_printk
-	b	.L1074
-.L1092:
+	b	.L1064
+.L1082:
 	mov	w2, 1
 	add	x1, x29, 180
 	mov	w0, w25
 	bl	log2phys
 	ldr	w4, [x29, 176]
 	cmn	w4, #1
-	beq	.L1090
+	beq	.L1080
 	ldr	w0, [x29, 172]
 	cmp	w4, w0
-	beq	.L1105
+	beq	.L1095
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
-	ldrh	w1, [x19, 32]
+	ldrh	w1, [x19, 24]
 	and	w0, w0, 65535
 	cmp	w1, w0
-	beq	.L1095
-	ldrh	w1, [x19, 88]
+	beq	.L1085
+	ldrh	w1, [x19, 80]
 	cmp	w1, w0
-	beq	.L1095
-	ldrh	w1, [x19, 136]
+	beq	.L1085
+	ldrh	w1, [x19, 128]
 	cmp	w1, w0
-	bne	.L1090
-.L1095:
+	bne	.L1080
+.L1085:
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
@@ -7864,52 +7812,52 @@ FtlRecoverySuperblock:
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L1090
+	beq	.L1080
 	ldr	x3, [x29, 144]
 	mov	w0, w21
 	ldr	w1, [x3, 4]
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1090
+	cbnz	w0, .L1080
 	mov	w2, 1
 	add	x1, x29, 176
 	mov	w0, w25
 	bl	log2phys
-	b	.L1090
-.L1097:
+	b	.L1080
+.L1087:
 	adrp	x0, .LC110
 	mov	w1, w25
 	add	x0, x0, :lo12:.LC110
-	b	.L1163
-.L1076:
+	b	.L1153
+.L1066:
 	ldr	w0, [x19, 3764]
 	cmp	w0, 31
-	bhi	.L1098
+	bhi	.L1088
 	ldr	x1, [x29, 112]
 	str	w5, [x1, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w0, [x19, 3764]
-.L1098:
+.L1088:
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
 	ldr	w0, [x19, 3724]
 	cmn	w0, #1
-	bne	.L1099
-.L1162:
+	bne	.L1089
+.L1152:
 	str	w21, [x19, 3724]
-	b	.L1074
-.L1099:
+	b	.L1064
+.L1089:
 	cmp	w21, w0
-	bcs	.L1074
-	b	.L1162
-.L1102:
+	bcs	.L1064
+	b	.L1152
+.L1092:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L1101
-.L1075:
+	b	.L1091
+.L1065:
 	strb	w27, [x20, 6]
 	strh	w22, [x20, 2]
-	b	.L1165
-.L1106:
+	b	.L1155
+.L1096:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -7949,10 +7897,10 @@ ftl_check_vpc:
 	mov	w1, 0
 	mov	x0, x19
 	bl	ftl_memset
-.L1167:
+.L1157:
 	ldr	w0, [x25, 2632]
 	cmp	w24, w0
-	bcc	.L1169
+	bcc	.L1159
 	adrp	x26, .LC112
 	add	x24, x20, :lo12:.LANCHOR0
 	add	x27, x23, :lo12:check_vpc_table
@@ -7960,13 +7908,13 @@ ftl_check_vpc:
 	mov	w25, 0
 	mov	w19, 0
 	mov	w5, 65535
-.L1170:
-	ldrh	w0, [x24, 252]
+.L1160:
+	ldrh	w0, [x24, 244]
 	cmp	w0, w19
-	bhi	.L1172
-	ldr	x19, [x24, 2600]
-	cbz	x19, .L1173
-	ldr	x0, [x24, 2568]
+	bhi	.L1162
+	ldr	x19, [x24, 2592]
+	cbz	x19, .L1163
+	ldr	x0, [x24, 2560]
 	adrp	x26, .LC113
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x23, x23, :lo12:check_vpc_table
@@ -7975,93 +7923,93 @@ ftl_check_vpc:
 	asr	x19, x19, 1
 	movk	x0, 0xaaab, lsl 0
 	add	x26, x26, :lo12:.LC113
-	ldrh	w27, [x24, 236]
+	ldrh	w27, [x24, 228]
 	mov	w28, 6
 	mov	w24, 0
 	mul	x19, x19, x0
 	and	w19, w19, 65535
-.L1174:
+.L1164:
 	cmp	w24, w27
-	bne	.L1176
-.L1173:
-	cbz	w25, .L1166
+	bne	.L1166
+.L1163:
+	cbz	w25, .L1156
 	add	x1, x22, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2383
+	mov	w2, 2387
 	add	x1, x1, 544
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1166:
+.L1156:
 	add	x21, x21, :lo12:__stack_chk_guard
 	ldr	x1, [x29, 120]
 	ldr	x0, [x21]
 	eor	x0, x1, x0
-	cbz	x0, .L1178
+	cbz	x0, .L1168
 	bl	__stack_chk_fail
-.L1169:
+.L1159:
 	mov	w2, 0
 	add	x1, x29, 116
 	mov	w0, w24
 	bl	log2phys
 	ldr	w0, [x29, 116]
 	cmn	w0, #1
-	beq	.L1168
+	beq	.L1158
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	and	x0, x0, 65535
 	ldrh	w1, [x19, x0, lsl 1]
 	add	w1, w1, 1
 	strh	w1, [x19, x0, lsl 1]
-.L1168:
+.L1158:
 	add	w24, w24, 1
-	b	.L1167
-.L1172:
-	ldr	x0, [x24, 80]
+	b	.L1157
+.L1162:
+	ldr	x0, [x24, 72]
 	ubfiz	x4, x19, 1, 16
 	sxtw	x28, w19
 	str	x4, [x29, 96]
 	ldrh	w3, [x27, x28, lsl 1]
 	ldrh	w2, [x0, x4]
 	cmp	w2, w3
-	beq	.L1171
+	beq	.L1161
 	mov	x0, x26
 	str	w5, [x29, 108]
 	mov	w1, w19
 	bl	sftl_printk
-	ldr	x0, [x24, 80]
+	ldr	x0, [x24, 72]
 	ldr	x4, [x29, 96]
 	ldr	w5, [x29, 108]
 	ldrh	w0, [x0, x4]
 	cmp	w0, w5
-	beq	.L1171
+	beq	.L1161
 	ldrh	w1, [x27, x28, lsl 1]
 	cmp	w1, w0
 	csinc	w25, w25, wzr, ls
-.L1171:
+.L1161:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1170
-.L1176:
-	ldr	x1, [x20, 80]
+	b	.L1160
+.L1166:
+	ldr	x1, [x20, 72]
 	ubfiz	x0, x19, 1, 16
 	ldrh	w2, [x1, x0]
-	cbz	w2, .L1175
+	cbz	w2, .L1165
 	ldrh	w3, [x23, w19, sxtw 1]
 	mov	w25, 1
 	mov	w1, w19
 	mov	x0, x26
 	bl	sftl_printk
-.L1175:
-	ldr	x0, [x20, 2568]
+.L1165:
+	ldr	x0, [x20, 2560]
 	umull	x19, w19, w28
 	ldrh	w19, [x0, x19]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L1173
+	beq	.L1163
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L1174
-.L1178:
+	b	.L1164
+.L1168:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -8092,33 +8040,33 @@ ftl_scan_all_data:
 	adrp	x0, .LC114
 	add	x0, x0, :lo12:.LC114
 	bl	sftl_printk
-.L1193:
+.L1183:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	w0, [x0, 2632]
 	cmp	w20, w0
-	bcc	.L1199
+	bcc	.L1189
 	add	x0, x22, :lo12:__stack_chk_guard
 	ldr	x1, [x29, 72]
 	ldr	x0, [x0]
 	eor	x0, x1, x0
-	cbz	x0, .L1200
+	cbz	x0, .L1190
 	bl	__stack_chk_fail
-.L1199:
+.L1189:
 	mov	w2, 0
 	add	x1, x29, 68
 	mov	w0, w20
 	bl	log2phys
 	tst	x20, 2047
-	bne	.L1194
+	bne	.L1184
 	ldr	w2, [x29, 68]
 	adrp	x0, .LC115
 	mov	w1, w20
 	add	x0, x0, :lo12:.LC115
 	bl	sftl_printk
-.L1194:
+.L1184:
 	ldr	w1, [x29, 68]
 	cmn	w1, #1
-	beq	.L1196
+	beq	.L1186
 	ldr	x0, [x23, 3464]
 	mov	w2, 0
 	ldr	x21, [x23, 3528]
@@ -8131,11 +8079,11 @@ ftl_scan_all_data:
 	ldr	w1, [x19]
 	cmp	w1, 256
 	ccmn	w1, #1, 4, ne
-	beq	.L1197
+	beq	.L1187
 	ldr	w0, [x21, 8]
 	cmp	w20, w0
-	beq	.L1196
-.L1197:
+	beq	.L1186
+.L1187:
 	ldp	x1, x0, [x19, 8]
 	ldr	w2, [x1, 4]
 	str	w2, [sp]
@@ -8147,10 +8095,10 @@ ftl_scan_all_data:
 	ldr	w2, [x19, 4]
 	mov	w1, w20
 	bl	sftl_printk
-.L1196:
+.L1186:
 	add	w20, w20, 1
-	b	.L1193
-.L1200:
+	b	.L1183
+.L1190:
 	ldp	x19, x20, [sp, 32]
 	ldp	x21, x22, [sp, 48]
 	ldp	x23, x24, [sp, 64]
@@ -8182,42 +8130,42 @@ FtlGcScanTempBlk:
 	ldrh	w28, [x0, 4]
 	mov	w0, 65535
 	cmp	w28, w0
-	beq	.L1227
-	cbnz	w28, .L1203
-.L1204:
+	beq	.L1217
+	cbnz	w28, .L1193
+.L1194:
 	bl	FtlGcPageVarInit
-	b	.L1205
-.L1227:
+	b	.L1195
+.L1217:
 	mov	w28, 0
-.L1203:
-	adrp	x0, .LANCHOR0+314
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+314]
+.L1193:
+	adrp	x0, .LANCHOR0+306
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+306]
 	cmp	w0, w25
-	beq	.L1204
-.L1205:
+	beq	.L1194
+.L1195:
 	adrp	x26, .LANCHOR0
 	add	x22, x26, :lo12:.LANCHOR0
 	mov	w24, 0
-.L1220:
+.L1210:
 	ldrh	w1, [x19]
 	mov	w0, 65535
 	strb	wzr, [x19, 8]
 	cmp	w1, w0
-	beq	.L1206
-.L1223:
+	beq	.L1196
+.L1213:
 	add	x0, x26, :lo12:.LANCHOR0
 	add	x6, x19, 16
 	mov	w20, 0
 	mov	w11, 65535
 	mov	w7, 4
-	ldrh	w9, [x0, 322]
-	ldrh	w10, [x0, 324]
-	ldrh	w0, [x0, 244]
+	ldrh	w9, [x0, 314]
+	ldrh	w10, [x0, 316]
+	ldrh	w0, [x0, 236]
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 1
-.L1207:
+.L1197:
 	cmp	x0, x6
-	bne	.L1209
+	bne	.L1199
 	ldr	x0, [x22, 3440]
 	mov	w2, 0
 	mov	w1, w20
@@ -8225,20 +8173,20 @@ FtlGcScanTempBlk:
 	bl	FlashReadPages
 	ubfiz	x0, x20, 5, 16
 	str	x0, [x29, 104]
-.L1210:
+.L1200:
 	ldr	x0, [x29, 104]
 	cmp	x0, x23
-	bne	.L1221
+	bne	.L1211
 	add	w4, w28, 1
 	add	w24, w24, 1
 	and	w28, w4, 65535
 	cmp	w25, w24
-	bls	.L1222
-.L1224:
-	ldrh	w0, [x22, 314]
+	bls	.L1212
+.L1214:
+	ldrh	w0, [x22, 306]
 	cmp	w0, w28
-	bhi	.L1223
-.L1206:
+	bhi	.L1213
+.L1196:
 	add	x21, x21, :lo12:.LANCHOR2
 	strh	w28, [x19, 2]
 	strb	wzr, [x19, 6]
@@ -8248,11 +8196,11 @@ FtlGcScanTempBlk:
 	strh	w0, [x21, 4]
 	mov	x0, x19
 	bl	ftl_sb_update_avl_pages
-	b	.L1225
-.L1209:
+	b	.L1215
+.L1199:
 	ldrh	w1, [x6]
 	cmp	w1, w11
-	beq	.L1208
+	beq	.L1198
 	ldr	x5, [x22, 3440]
 	ubfiz	x8, x20, 5, 16
 	orr	w1, w28, w1, lsl 10
@@ -8272,55 +8220,55 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w7
 	add	x1, x5, x1, sxtw 2
 	str	x1, [x2, 16]
-.L1208:
+.L1198:
 	add	x6, x6, 2
-	b	.L1207
-.L1221:
+	b	.L1197
+.L1211:
 	ldr	x0, [x22, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
 	ldr	w27, [x1, 4]
 	ldr	x20, [x1, 16]
-	cbnz	w0, .L1211
+	cbnz	w0, .L1201
 	ldrh	w0, [x20]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1212
-.L1237:
+	bne	.L1202
+.L1227:
 	ldrh	w1, [x19]
 	mov	w28, 0
-	ldr	x0, [x22, 80]
+	ldr	x0, [x22, 72]
 	strh	wzr, [x0, x1, lsl 1]
 	ldrh	w0, [x19]
 	bl	INSERT_FREE_LIST
 	mov	w0, -1
 	strh	w0, [x19]
-	strh	w0, [x22, 184]
+	strh	w0, [x22, 176]
 	bl	FtlGcPageVarInit
-	b	.L1220
-.L1212:
+	b	.L1210
+.L1202:
 	ldr	w0, [x20, 8]
 	ldr	w1, [x22, 2632]
 	cmp	w0, w1
-	bhi	.L1237
+	bhi	.L1227
 	add	x1, x29, 116
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x20, 12]
 	ldr	w1, [x29, 116]
 	cmp	w0, w1
-	beq	.L1215
-.L1217:
+	beq	.L1205
+.L1207:
 	ldr	w2, [x20, 8]
-.L1238:
+.L1228:
 	ldr	w0, [x20, 12]
 	mov	w1, w27
 	add	x23, x23, 32
 	bl	FtlGcUpdatePage
-	b	.L1210
-.L1215:
+	b	.L1200
+.L1205:
 	cmn	w0, #1
-	beq	.L1217
+	beq	.L1207
 	str	w0, [x29, 124]
 	mov	w2, 0
 	ldr	x0, [x22, 3496]
@@ -8330,52 +8278,52 @@ FtlGcScanTempBlk:
 	str	x0, [x29, 136]
 	add	x0, x29, 120
 	bl	FlashReadPages
-	ldrh	w1, [x22, 270]
+	ldrh	w1, [x22, 262]
 	mov	x0, 0
 	ldr	x2, [x22, 3440]
 	ldr	x6, [x29, 128]
 	ubfiz	x1, x1, 9, 16
 	add	x2, x2, x23
-.L1218:
+.L1208:
 	cmp	x0, x1
-	beq	.L1217
+	beq	.L1207
 	ldr	x7, [x2, 8]
 	ldr	w8, [x7, x0]
 	add	x0, x0, 4
 	add	x7, x6, x0
 	ldr	w7, [x7, -4]
 	cmp	w8, w7
-	beq	.L1218
+	beq	.L1208
 	ldrh	w1, [x19]
 	adrp	x0, .LC117
 	ldr	w2, [x29, 124]
 	add	x0, x0, :lo12:.LC117
 	bl	sftl_printk
-	b	.L1237
-.L1211:
+	b	.L1227
+.L1201:
 	mov	w2, -1
-	b	.L1238
-.L1222:
+	b	.L1228
+.L1212:
 	add	x1, x21, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w0, [x1, 4]
 	cmp	w0, w2
-	beq	.L1224
+	beq	.L1214
 	add	w0, w0, w24
 	strh	w0, [x1, 4]
-	ldrh	w0, [x22, 314]
+	ldrh	w0, [x22, 306]
 	cmp	w0, w28
-	bls	.L1224
-.L1225:
+	bls	.L1214
+.L1215:
 	ldr	x1, [x29, 96]
 	mov	w0, -1
 	add	x22, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 152]
 	ldr	x1, [x22]
 	eor	x1, x2, x1
-	cbz	x1, .L1226
+	cbz	x1, .L1216
 	bl	__stack_chk_fail
-.L1226:
+.L1216:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -8401,29 +8349,29 @@ FtlReadRefresh:
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x2, x0, 2720
 	ldr	w3, [x2, 80]
-	cbz	w3, .L1240
+	cbz	w3, .L1230
 	ldr	w1, [x0, 2632]
 	ldr	w3, [x2, 84]
 	cmp	w3, w1
-	bcs	.L1241
+	bcs	.L1231
 	mov	x19, x0
 	mov	w21, 2048
-.L1246:
+.L1236:
 	add	x22, x19, 2720
 	ldr	w1, [x19, 2632]
 	ldr	w0, [x22, 84]
 	cmp	w0, w1
-	bcc	.L1242
-.L1245:
+	bcc	.L1232
+.L1235:
 	mov	w0, -1
-.L1239:
+.L1229:
 	add	x20, x20, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 152]
 	ldr	x1, [x20]
 	eor	x1, x2, x1
-	cbz	x1, .L1251
+	cbz	x1, .L1241
 	bl	__stack_chk_fail
-.L1242:
+.L1232:
 	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
@@ -8432,7 +8380,7 @@ FtlReadRefresh:
 	add	w0, w0, 1
 	str	w0, [x22, 84]
 	cmn	w1, #1
-	beq	.L1244
+	beq	.L1234
 	str	w0, [x29, 80]
 	mov	w2, 0
 	ldr	x0, [x19, 3512]
@@ -8446,24 +8394,24 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29, 56]
 	cmp	w0, 256
-	bne	.L1245
+	bne	.L1235
 	ldr	w0, [x29, 52]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1245
-.L1244:
+	b	.L1235
+.L1234:
 	subs	w21, w21, #1
-	bne	.L1246
-	b	.L1245
-.L1241:
+	bne	.L1236
+	b	.L1235
+.L1231:
 	ldr	w0, [x0, 2636]
 	stp	w0, wzr, [x2, 76]
 	str	wzr, [x2, 84]
-.L1254:
+.L1244:
 	mov	w0, 0
-	b	.L1239
-.L1240:
+	b	.L1229
+.L1230:
 	ldr	w4, [x0, 2692]
 	mov	w3, 10000
 	ldr	w5, [x0, 2636]
@@ -8474,7 +8422,7 @@ FtlReadRefresh:
 	csel	w6, w6, w3, hi
 	add	w3, w5, 1048576
 	cmp	w7, w3
-	bhi	.L1250
+	bhi	.L1240
 	ldr	w3, [x0, 2632]
 	mov	w8, 1000
 	lsr	w4, w4, 10
@@ -8483,24 +8431,24 @@ FtlReadRefresh:
 	udiv	w3, w3, w4
 	add	w3, w3, w7
 	cmp	w5, w3
-	bhi	.L1250
-	ldrh	w0, [x0, 2548]
+	bhi	.L1240
+	ldrh	w0, [x0, 2540]
 	tst	w6, w0
-	bne	.L1254
+	bne	.L1244
 	ldr	w2, [x2, 100]
 	cmp	w0, w2
-	beq	.L1254
-.L1250:
+	beq	.L1244
+.L1240:
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x1, x0, 2720
-	ldrh	w0, [x0, 2548]
+	ldrh	w0, [x0, 2540]
 	str	w0, [x1, 100]
 	str	w5, [x1, 76]
 	mov	w0, 1
 	str	wzr, [x1, 84]
 	str	w0, [x1, 80]
-	b	.L1254
-.L1251:
+	b	.L1244
+.L1241:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 160
@@ -8517,26 +8465,26 @@ l2p_flush:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
 	bl	FtlWriteDump_data
-.L1258:
-	ldrh	w0, [x20, 350]
+.L1248:
+	ldrh	w0, [x20, 342]
 	cmp	w0, w19
-	bhi	.L1260
+	bhi	.L1250
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1260:
-	ldr	x1, [x20, 2616]
+.L1250:
+	ldr	x1, [x20, 2608]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1259
+	tbz	w0, #31, .L1249
 	mov	w0, w19
 	bl	flush_l2p_region
-.L1259:
+.L1249:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1258
+	b	.L1248
 	.size	l2p_flush, .-l2p_flush
 	.align	2
 	.global	FtlVendorPartWrite
@@ -8558,27 +8506,27 @@ FtlVendorPartWrite:
 	ldr	x1, [x0]
 	str	x1, [x29, 216]
 	mov	x1,0
-	ldrh	w0, [x19, 308]
+	ldrh	w0, [x19, 300]
 	add	w1, w26, w28
 	cmp	w1, w0
-	bhi	.L1271
-	ldrh	w23, [x19, 320]
+	bhi	.L1261
+	ldrh	w23, [x19, 312]
 	mov	x25, x2
 	add	x27, x19, 3896
 	mov	w24, 0
 	lsr	w23, w26, w23
-.L1264:
-	cbnz	w28, .L1269
-.L1262:
+.L1254:
+	cbnz	w28, .L1259
+.L1252:
 	add	x22, x22, :lo12:__stack_chk_guard
 	mov	w0, w24
 	ldr	x2, [x29, 216]
 	ldr	x1, [x22]
 	eor	x1, x2, x1
-	cbz	x1, .L1270
+	cbz	x1, .L1260
 	bl	__stack_chk_fail
-.L1269:
-	ldrh	w1, [x19, 270]
+.L1259:
+	ldrh	w1, [x19, 262]
 	ldr	x0, [x19, 3608]
 	udiv	w21, w26, w1
 	ldr	w2, [x0, w23, uxtw 2]
@@ -8588,9 +8536,9 @@ FtlVendorPartWrite:
 	and	w20, w20, 65535
 	cmp	w28, w20
 	csel	w20, w0, w20, cc
-	cbz	w2, .L1266
+	cbz	w2, .L1256
 	cmp	w20, w1
-	beq	.L1266
+	beq	.L1256
 	ldr	x0, [x19, 3480]
 	str	x0, [x29, 128]
 	add	x0, x29, 152
@@ -8600,7 +8548,7 @@ FtlVendorPartWrite:
 	mov	w1, w2
 	add	x0, x29, 120
 	bl	FlashReadPages
-.L1267:
+.L1257:
 	lsl	w4, w20, 9
 	ldr	x0, [x19, 3480]
 	lsl	w21, w21, 9
@@ -8621,17 +8569,17 @@ FtlVendorPartWrite:
 	ldr	w4, [x29, 108]
 	csinv	w24, w24, wzr, ne
 	add	x25, x25, x4, sxtw
-	b	.L1264
-.L1266:
-	ldrh	w2, [x19, 322]
+	b	.L1254
+.L1256:
+	ldrh	w2, [x19, 314]
 	mov	w1, 0
 	ldr	x0, [x19, 3480]
 	bl	ftl_memset
-	b	.L1267
-.L1271:
+	b	.L1257
+.L1261:
 	mov	w24, -1
-	b	.L1262
-.L1270:
+	b	.L1252
+.L1260:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -8650,10 +8598,10 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1279
+	bne	.L1269
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
-	mov	w1, 83
+	mov	w1, 85
 	add	x29, sp, 0
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2, 4]
@@ -8685,7 +8633,7 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1279:
+.L1269:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -8696,20 +8644,20 @@ FtlEctTblFlush:
 	add	x3, x1, :lo12:.LANCHOR0
 	ldrh	w2, [x3, 3960]
 	cmp	w2, 31
-	bhi	.L1286
+	bhi	.L1276
 	add	w2, w2, 1
 	strh	w2, [x3, 3960]
 	mov	w2, 1
-.L1283:
-	cbnz	w0, .L1284
+.L1273:
+	cbnz	w0, .L1274
 	add	x0, x1, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3560]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1288
-.L1284:
+	bcc	.L1278
+.L1274:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
@@ -8734,10 +8682,10 @@ FtlEctTblFlush:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1286:
+.L1276:
 	mov	w2, 32
-	b	.L1283
-.L1288:
+	b	.L1273
+.L1278:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8774,29 +8722,29 @@ FtlVendorPartRead:
 	ldr	x2, [x1]
 	str	x2, [x29, 216]
 	mov	x2,0
-	ldrh	w1, [x3, 308]
+	ldrh	w1, [x3, 300]
 	add	w2, w23, w22
 	cmp	w2, w1
-	bhi	.L1302
-	ldrh	w21, [x3, 320]
+	bhi	.L1292
+	ldrh	w21, [x3, 312]
 	adrp	x26, .LC118
 	mov	x28, x3
 	add	x26, x26, :lo12:.LC118
 	mov	w24, 0
 	lsr	w21, w23, w21
-.L1294:
-	cbnz	w22, .L1300
-.L1292:
+.L1284:
+	cbnz	w22, .L1290
+.L1282:
 	ldr	x1, [x29, 104]
 	mov	w0, w24
 	add	x1, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 216]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L1301
+	cbz	x1, .L1291
 	bl	__stack_chk_fail
-.L1300:
-	ldrh	w19, [x28, 270]
+.L1290:
+	ldrh	w19, [x28, 262]
 	ldr	x0, [x28, 3608]
 	udiv	w20, w23, w19
 	ldr	w4, [x0, w21, uxtw 2]
@@ -8807,7 +8755,7 @@ FtlVendorPartRead:
 	cmp	w22, w19
 	csel	w19, w0, w19, cc
 	lsl	w27, w19, 9
-	cbz	w4, .L1296
+	cbz	w4, .L1286
 	ldr	x0, [x28, 3480]
 	mov	w2, 1
 	str	x0, [x29, 128]
@@ -8824,7 +8772,7 @@ FtlVendorPartRead:
 	ldr	w0, [x28, 3728]
 	csinv	w24, w24, wzr, ne
 	cmp	w0, 256
-	bne	.L1298
+	bne	.L1288
 	mov	w2, w4
 	mov	w1, w21
 	mov	x0, x26
@@ -8833,7 +8781,7 @@ FtlVendorPartRead:
 	mov	w1, w21
 	add	x0, x28, 3896
 	bl	FtlMapWritePage
-.L1298:
+.L1288:
 	ldr	x1, [x28, 3480]
 	lsl	w20, w20, 9
 	asr	w20, w20, 2
@@ -8841,22 +8789,22 @@ FtlVendorPartRead:
 	mov	x0, x25
 	add	x1, x1, x20, sxtw 2
 	bl	ftl_memcpy
-.L1299:
+.L1289:
 	add	w21, w21, 1
 	sub	w22, w22, w19
 	add	w23, w23, w19
 	add	x25, x25, x27, sxtw
-	b	.L1294
-.L1296:
+	b	.L1284
+.L1286:
 	mov	w2, w27
 	mov	w1, 0
 	mov	x0, x25
 	bl	ftl_memset
-	b	.L1299
-.L1302:
+	b	.L1289
+.L1292:
 	mov	w24, -1
-	b	.L1292
-.L1301:
+	b	.L1282
+.L1291:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -8883,7 +8831,7 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1305
+	beq	.L1295
 	adrp	x1, .LC119
 	adrp	x0, .LC77
 	add	x1, x1, :lo12:.LC119
@@ -8894,7 +8842,7 @@ FtlLoadEctTbl:
 	ldrh	w2, [x19, 3544]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1305:
+.L1295:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8919,19 +8867,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1308
+	beq	.L1298
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1308:
+.L1298:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1309
+	bne	.L1299
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2660]
 	ldr	w2, [x0, 2812]
@@ -8956,13 +8904,13 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2696]
 	str	w2, [x0, 2692]
-.L1309:
+.L1299:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2680]
-	ldrh	w1, [x0, 304]
+	ldrh	w1, [x0, 296]
 	ldr	w3, [x0, 2676]
 	madd	w1, w1, w3, w2
-	ldrh	w2, [x0, 252]
+	ldrh	w2, [x0, 244]
 	udiv	w1, w1, w2
 	str	w1, [x0, 2684]
 	ldp	x19, x20, [sp, 16]
@@ -8986,7 +8934,7 @@ sftl_vendor_read:
 	.type	FtlMapBlkWriteDump_data, %function
 FtlMapBlkWriteDump_data:
 	ldr	w1, [x0, 56]
-	cbz	w1, .L1321
+	cbz	w1, .L1311
 	stp	x29, x30, [sp, -48]!
 	adrp	x1, .LANCHOR0
 	add	x2, x1, :lo12:.LANCHOR0
@@ -9007,11 +8955,11 @@ FtlMapBlkWriteDump_data:
 	str	wzr, [x19, 56]
 	ldr	w4, [x5, x4]
 	str	w4, [x0, 4]
-	cbz	w4, .L1315
+	cbz	w4, .L1305
 	mov	w2, 1
 	mov	w1, w2
 	bl	FlashReadPages
-.L1316:
+.L1306:
 	add	x1, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	ldr	x2, [x1, 3736]
@@ -9021,13 +8969,13 @@ FtlMapBlkWriteDump_data:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1315:
-	ldrh	w2, [x2, 322]
+.L1305:
+	ldrh	w2, [x2, 314]
 	mov	w1, 255
 	mov	x0, x3
 	bl	ftl_memset
-	b	.L1316
-.L1321:
+	b	.L1306
+.L1311:
 	ret
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
@@ -9037,97 +8985,87 @@ FtlVpcTblFlush:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR0
-	add	x19, x23, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
+	adrp	x22, .LANCHOR0
+	add	x19, x22, :lo12:.LANCHOR0
 	stp	x25, x26, [sp, 64]
-	add	x20, x19, 2520
-	add	x25, x19, 2704
-	mov	w22, 0
-	ldr	x21, [x19, 3528]
+	stp	x23, x24, [sp, 48]
+	add	x20, x19, 2512
+	add	x23, x19, 2704
+	mov	w21, 0
+	ldr	x26, [x19, 3528]
 	mov	w24, 65535
 	ldr	x0, [x19, 3464]
 	str	x0, [x19, 3736]
 	ldrh	w0, [x19, 2704]
-	str	x21, [x19, 3744]
-	strh	w0, [x21, 2]
+	str	x26, [x19, 3744]
+	strh	w0, [x26, 2]
 	mov	w0, -3932
-	strh	w0, [x21]
-	str	wzr, [x21, 12]
+	strh	w0, [x26]
+	str	wzr, [x26, 12]
 	ldr	w0, [x19, 2712]
-	stp	w0, wzr, [x21, 4]
+	stp	w0, wzr, [x26, 4]
 	mov	w0, 19539
-	ldrh	w1, [x19, 32]
+	ldrh	w1, [x19, 24]
 	movk	w0, 0x4654, lsl 16
-	str	w0, [x19, 2520]
-	mov	w0, 83
-	ldrb	w2, [x19, 38]
-	strh	w1, [x19, 2534]
+	str	w0, [x19, 2512]
+	mov	w0, 85
+	ldrb	w2, [x19, 30]
+	strh	w1, [x19, 2526]
 	movk	w0, 0x5000, lsl 16
-	ldrh	w1, [x19, 34]
-	str	w0, [x19, 2524]
+	ldrh	w1, [x19, 26]
+	str	w0, [x19, 2516]
 	ldrh	w0, [x19, 2710]
-	strh	w0, [x19, 2528]
+	strh	w0, [x19, 2520]
 	orr	w1, w2, w1, lsl 6
-	ldrh	w0, [x19, 266]
-	strb	w0, [x19, 2530]
-	strh	w1, [x19, 2536]
-	ldrh	w1, [x19, 88]
-	ldrb	w2, [x19, 94]
-	strh	w1, [x19, 2538]
-	ldrh	w1, [x19, 90]
-	ldrb	w0, [x19, 40]
-	strb	w0, [x19, 2531]
+	ldrh	w0, [x19, 258]
+	strb	w0, [x19, 2522]
+	strh	w1, [x19, 2528]
+	ldrh	w1, [x19, 80]
+	ldrb	w2, [x19, 86]
+	strh	w1, [x19, 2530]
+	ldrh	w1, [x19, 82]
+	ldrb	w0, [x19, 32]
+	strb	w0, [x19, 2523]
 	orr	w1, w2, w1, lsl 6
-	ldrb	w0, [x19, 96]
-	strh	w1, [x19, 2540]
-	strb	w0, [x19, 2532]
-	ldrh	w1, [x19, 136]
-	ldrb	w0, [x19, 144]
-	ldrb	w2, [x19, 142]
-	strh	w1, [x19, 2542]
-	strb	w0, [x19, 2533]
-	ldrh	w1, [x19, 138]
+	ldrb	w0, [x19, 88]
+	strh	w1, [x19, 2532]
+	strb	w0, [x19, 2524]
+	ldrh	w1, [x19, 128]
+	ldrb	w0, [x19, 136]
+	ldrb	w2, [x19, 134]
+	strh	w1, [x19, 2534]
+	strb	w0, [x19, 2525]
+	ldrh	w1, [x19, 130]
 	ldr	w0, [x19, 2676]
-	str	w0, [x19, 2552]
+	str	w0, [x19, 2544]
 	ldr	w0, [x19, 2668]
 	orr	w1, w2, w1, lsl 6
-	str	w0, [x19, 2560]
+	str	w0, [x19, 2552]
 	ldr	w0, [x19, 2672]
-	ldrh	w2, [x19, 322]
-	str	w0, [x19, 2556]
+	ldrh	w2, [x19, 314]
+	str	w0, [x19, 2548]
 	ldr	x0, [x19, 3736]
-	strh	w1, [x19, 2544]
+	strh	w1, [x19, 2536]
 	mov	w1, 255
 	bl	ftl_memset
 	ldr	x0, [x19, 3736]
 	mov	x1, x20
 	mov	w2, 48
-	mov	x20, x25
-	adrp	x25, .LANCHOR1
-	add	x25, x25, :lo12:.LANCHOR1
-	add	x25, x25, 560
+	mov	x20, x23
+	adrp	x23, .LANCHOR1
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x23, x23, 560
 	bl	ftl_memcpy
-	ldr	x1, [x19, 80]
-	ldrh	w2, [x19, 252]
+	ldrh	w2, [x19, 244]
+	ldr	x1, [x19, 72]
 	ldr	x0, [x19, 3736]
 	lsl	w2, w2, 1
 	add	x0, x0, 48
 	bl	ftl_memcpy
-	ldrh	w0, [x19, 252]
-	ldr	x3, [x19, 3736]
-	ldr	x1, [x19, 24]
-	lsr	w2, w0, 3
-	ubfiz	x0, x0, 1, 16
-	add	x0, x0, 48
-	add	w2, w2, 4
-	and	x0, x0, -4
-	add	x0, x3, x0
-	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1325:
+.L1315:
 	ldrh	w2, [x20, 2]
 	ldrh	w1, [x20]
 	ldr	x0, [x19, 3464]
@@ -9136,10 +9074,10 @@ FtlVpcTblFlush:
 	str	x0, [x19, 3744]
 	orr	w0, w2, w1, lsl 10
 	str	w0, [x19, 3732]
-	ldrh	w0, [x19, 316]
+	ldrh	w0, [x19, 308]
 	sub	w0, w0, #1
 	cmp	w2, w0
-	blt	.L1326
+	blt	.L1316
 	ldrh	w24, [x20, 4]
 	strh	wzr, [x20, 2]
 	strh	w1, [x20, 4]
@@ -9151,13 +9089,13 @@ FtlVpcTblFlush:
 	ubfiz	w2, w0, 10, 16
 	str	w2, [x19, 3732]
 	strh	w0, [x20]
-	strh	w0, [x21, 2]
-	str	w1, [x21, 4]
-.L1326:
-	ldrh	w1, [x19, 322]
+	strh	w0, [x26, 2]
+	str	w1, [x26, 4]
+.L1316:
+	ldrh	w1, [x19, 314]
 	ldr	x0, [x19, 3464]
 	bl	js_hash
-	str	w0, [x21, 12]
+	str	w0, [x26, 12]
 	mov	w3, 1
 	add	x0, x19, 3728
 	mov	w1, w3
@@ -9169,46 +9107,46 @@ FtlVpcTblFlush:
 	and	w0, w0, 65535
 	strh	w0, [x20, 2]
 	cmn	w1, #1
-	bne	.L1327
+	bne	.L1317
 	cmp	w0, 1
-	bne	.L1328
+	bne	.L1318
 	adrp	x0, .LC8
 	mov	w2, 1138
-	mov	x1, x25
+	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1328:
+.L1318:
 	ldrh	w0, [x20, 2]
 	cmp	w0, 1
-	bne	.L1329
-	ldrh	w0, [x19, 316]
+	bne	.L1319
+	ldrh	w0, [x19, 308]
 	sub	w0, w0, #1
 	strh	w0, [x20, 2]
-.L1329:
-	add	w22, w22, 1
-	and	w22, w22, 65535
-	cmp	w22, 3
-	bls	.L1325
-	add	x23, x23, :lo12:.LANCHOR0
+.L1319:
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	cmp	w21, 3
+	bls	.L1315
+	add	x22, x22, :lo12:.LANCHOR0
 	adrp	x0, .LC120
-	mov	w2, w22
+	mov	w2, w21
 	add	x0, x0, :lo12:.LC120
-	ldr	w1, [x23, 3732]
+	ldr	w1, [x22, 3732]
 	bl	sftl_printk
-.L1331:
-	b	.L1331
-.L1327:
+.L1321:
+	b	.L1321
+.L1317:
 	cmp	w0, 1
-	beq	.L1325
+	beq	.L1315
 	cmp	w1, 256
-	beq	.L1325
+	beq	.L1315
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1332
+	beq	.L1322
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1332:
+.L1322:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -9238,14 +9176,14 @@ sftl_deinit:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	bne	.L1345
+	bne	.L1335
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	FtlSysFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1345:
+.L1335:
 	mov	w0, 0
 	ret
 	.size	sftl_deinit, .-sftl_deinit
@@ -9265,59 +9203,59 @@ sftl_discard:
 	str	x2, [x29, 56]
 	mov	x2,0
 	add	x2, x19, :lo12:.LANCHOR0
-	ldr	w1, [x2, 352]
+	ldr	w1, [x2, 344]
 	cmp	w1, w0
-	bls	.L1359
+	bls	.L1349
 	cmp	w1, w20
-	bcc	.L1359
+	bcc	.L1349
 	add	w3, w0, w20
 	cmp	w1, w3
-	bcc	.L1359
+	bcc	.L1349
 	cmp	w20, 31
-	bhi	.L1350
-.L1367:
+	bhi	.L1340
+.L1357:
 	mov	w0, 0
-.L1348:
+.L1338:
 	add	x21, x21, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 56]
 	ldr	x1, [x21]
 	eor	x1, x2, x1
-	cbz	x1, .L1356
+	cbz	x1, .L1346
 	bl	__stack_chk_fail
-.L1350:
-	ldrh	w1, [x2, 270]
+.L1340:
+	ldrh	w1, [x2, 262]
 	udiv	w22, w0, w1
 	msub	w0, w1, w22, w0
 	ands	w0, w0, 65535
-	beq	.L1351
+	beq	.L1341
 	sub	w0, w1, w0
 	add	w22, w22, 1
 	cmp	w0, w20
 	csel	w0, w0, w20, ls
 	sub	w20, w20, w0, uxth
-.L1351:
+.L1341:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	str	w0, [x29, 52]
-.L1352:
-	ldrh	w0, [x19, 270]
+.L1342:
+	ldrh	w0, [x19, 262]
 	cmp	w20, w0
-	bcs	.L1354
+	bcs	.L1344
 	ldr	w0, [x19, 3964]
 	cmp	w0, 32
-	bls	.L1367
+	bls	.L1357
 	str	wzr, [x19, 3964]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1367
-.L1354:
+	b	.L1357
+.L1344:
 	mov	w2, 0
 	add	x1, x29, 48
 	mov	w0, w22
 	bl	log2phys
 	ldr	w0, [x29, 48]
 	cmn	w0, #1
-	beq	.L1353
+	beq	.L1343
 	ldr	w0, [x19, 3964]
 	mov	w2, 1
 	add	x1, x29, 52
@@ -9332,15 +9270,15 @@ sftl_discard:
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1353:
-	ldrh	w0, [x19, 270]
+.L1343:
+	ldrh	w0, [x19, 262]
 	add	w22, w22, 1
 	sub	w20, w20, w0
-	b	.L1352
-.L1359:
+	b	.L1342
+.L1349:
 	mov	w0, -1
-	b	.L1348
-.L1356:
+	b	.L1338
+.L1346:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
@@ -9350,7 +9288,7 @@ sftl_discard:
 	.global	FtlVpcCheckAndModify
 	.type	FtlVpcCheckAndModify, %function
 FtlVpcCheckAndModify:
-	stp	x29, x30, [sp, -80]!
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
@@ -9358,51 +9296,53 @@ FtlVpcCheckAndModify:
 	adrp	x22, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
 	add	x0, x22, :lo12:__stack_chk_guard
+	stp	x25, x26, [sp, 64]
 	add	x19, x20, :lo12:.LANCHOR0
+	adrp	x23, .LANCHOR1
 	mov	w21, 0
 	ldr	x1, [x0]
-	str	x1, [x29, 72]
+	str	x1, [x29, 88]
 	mov	x1,0
 	adrp	x0, .LC111
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	add	x1, x1, 576
+	add	x1, x23, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC111
+	add	x1, x1, 576
 	bl	sftl_printk
 	ldr	x0, [x19, 3568]
 	mov	w1, 0
-	ldrh	w2, [x19, 254]
+	ldrh	w2, [x19, 246]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1369:
+.L1359:
 	ldr	w0, [x19, 2632]
 	cmp	w21, w0
-	bcc	.L1371
-	adrp	x23, .LC121
+	bcc	.L1361
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x23, x23, :lo12:.LC121
+	adrp	x24, .LC121
+	add	x26, x20, 2592
+	add	x24, x24, :lo12:.LC121
 	mov	w19, 0
-	mov	w24, 65535
-.L1372:
-	ldrh	w0, [x20, 252]
+	mov	w25, 65535
+.L1362:
+	ldrh	w0, [x20, 244]
 	cmp	w0, w19
-	bhi	.L1377
+	bhi	.L1368
 	bl	l2p_flush
 	add	x22, x22, :lo12:__stack_chk_guard
 	bl	FtlVpcTblFlush
-	ldr	x1, [x29, 72]
+	ldr	x1, [x29, 88]
 	ldr	x0, [x22]
 	eor	x0, x1, x0
-	cbz	x0, .L1378
+	cbz	x0, .L1369
 	bl	__stack_chk_fail
-.L1371:
+.L1361:
 	mov	w2, 0
-	add	x1, x29, 68
+	add	x1, x29, 84
 	mov	w0, w21
 	bl	log2phys
-	ldr	w0, [x29, 68]
+	ldr	w0, [x29, 84]
 	cmn	w0, #1
-	beq	.L1370
+	beq	.L1360
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldr	x2, [x19, 3568]
@@ -9410,53 +9350,71 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1370:
+.L1360:
 	add	w21, w21, 1
-	b	.L1369
-.L1377:
-	ldr	x0, [x20, 80]
+	b	.L1359
+.L1368:
+	ldr	x0, [x20, 72]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
 	ldr	x0, [x20, 3568]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1374
-	cmp	w2, w24
-	beq	.L1374
-	mov	x0, x23
+	beq	.L1364
+	cmp	w2, w25
+	beq	.L1364
+	mov	x0, x24
 	mov	w1, w19
 	bl	sftl_printk
-	ldrh	w0, [x20, 32]
+	ldrh	w0, [x20, 24]
 	cmp	w0, w19
-	beq	.L1374
-	ldrh	w0, [x20, 136]
+	beq	.L1364
+	ldrh	w0, [x20, 128]
 	cmp	w0, w19
-	beq	.L1374
-	ldrh	w0, [x20, 88]
+	beq	.L1364
+	ldrh	w0, [x20, 80]
 	cmp	w0, w19
-	beq	.L1374
-	ldr	x0, [x20, 80]
+	beq	.L1364
+	ldr	x0, [x20, 72]
 	ldrh	w1, [x0, x21]
-	cbnz	w1, .L1376
+	cbnz	w1, .L1366
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
-.L1374:
+	mov	w1, w19
+	mov	x0, x26
+	bl	List_remove_node
+	ldrh	w0, [x20, 228]
+	cbnz	w0, .L1367
+	add	x1, x23, :lo12:.LANCHOR1
+	adrp	x0, .LC8
+	mov	w2, 2323
+	add	x1, x1, 576
+	add	x0, x0, :lo12:.LC8
+	bl	sftl_printk
+.L1367:
+	ldrh	w0, [x20, 228]
+	sub	w0, w0, #1
+	strh	w0, [x20, 228]
+	mov	w0, w19
+	bl	INSERT_DATA_LIST
+.L1364:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1372
-.L1376:
+	b	.L1362
+.L1366:
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
 	mov	w0, w19
 	bl	update_vpc_list
-	b	.L1374
-.L1378:
+	b	.L1364
+.L1369:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 80
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
@@ -9471,48 +9429,48 @@ allocate_new_data_superblock:
 	mov	x21, x0
 	ldrh	w20, [x0]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 252]
+	ldrh	w0, [x0, 244]
 	cmp	w0, w20
-	bcs	.L1384
+	bcs	.L1375
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 2755
+	mov	w2, 2759
 	add	x1, x1, 600
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1384:
+.L1375:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L1385
+	beq	.L1376
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x20, 1, 16
-	ldr	x1, [x1, 80]
+	ldr	x1, [x1, 72]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1386
+	cbz	w0, .L1377
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1385:
+.L1376:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x21, 8]
 	mov	w1, 65535
 	ldrh	w0, [x2, 3714]
 	cmp	w0, w1
-	beq	.L1387
+	beq	.L1378
 	cmp	w20, w0
-	bne	.L1388
-	ldr	x2, [x2, 80]
+	bne	.L1379
+	ldr	x2, [x2, 72]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1389
-.L1388:
+	cbz	w1, .L1380
+.L1379:
 	bl	update_vpc_list
-.L1389:
+.L1380:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	w0, [x19, 3714]
-.L1387:
+.L1378:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9524,10 +9482,10 @@ allocate_new_data_superblock:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1386:
+.L1377:
 	mov	w0, w20
 	bl	INSERT_FREE_LIST
-	b	.L1385
+	b	.L1376
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
@@ -9558,12 +9516,12 @@ FtlProgPages:
 	add	x26, x25, :lo12:.LANCHOR0
 	mov	w2, 0
 	bl	FlashProgPages
-.L1395:
+.L1386:
 	cmp	x22, x19
-	beq	.L1401
+	beq	.L1392
 	sub	x23, x19, #4
-	b	.L1402
-.L1397:
+	b	.L1393
+.L1388:
 	ldr	w1, [x19]
 	mov	x0, x24
 	bl	sftl_printk
@@ -9572,10 +9530,10 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1396
+	cbnz	w0, .L1387
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1396:
+.L1387:
 	mov	x0, x20
 	bl	get_new_active_ppa
 	str	w0, [x19]
@@ -9585,15 +9543,15 @@ FtlProgPages:
 	ldrb	w3, [x20, 9]
 	mov	x0, x23
 	bl	FlashProgPages
-.L1402:
+.L1393:
 	ldr	w2, [x19, -4]
 	cmp	w2, 256
 	ccmn	w2, #1, 4, ne
-	beq	.L1397
+	beq	.L1388
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x26, 244]
+	ldrh	w0, [x26, 236]
 	cmp	w1, w0
-	bcc	.L1398
+	bcc	.L1389
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9601,7 +9559,7 @@ FtlProgPages:
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1398:
+.L1389:
 	add	x1, x29, 96
 	ldr	w0, [x23, 4]
 	mov	w2, 1
@@ -9615,28 +9573,28 @@ FtlProgPages:
 	and	w1, w0, 65535
 	mov	w23, w1
 	cmn	w4, #1
-	beq	.L1399
+	beq	.L1390
 	add	x2, x25, :lo12:.LANCHOR0
 	ubfiz	x0, x1, 1, 16
-	ldr	x2, [x2, 80]
+	ldr	x2, [x2, 72]
 	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1400
+	cbnz	w0, .L1391
 	adrp	x0, .LC123
 	mov	w2, 0
 	add	x0, x0, :lo12:.LC123
 	bl	sftl_printk
-.L1400:
+.L1391:
 	mov	w0, w23
 	bl	decrement_vpc_count
-.L1399:
+.L1390:
 	add	x19, x19, 32
-	b	.L1395
-.L1401:
-	adrp	x0, .LANCHOR0+244
+	b	.L1386
+.L1392:
+	adrp	x0, .LANCHOR0+236
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+244]
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+236]
 	cmp	w1, w0
-	bcc	.L1394
+	bcc	.L1385
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9644,14 +9602,14 @@ FtlProgPages:
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1394:
+.L1385:
 	add	x21, x21, :lo12:__stack_chk_guard
 	ldr	x1, [x29, 88]
 	ldr	x0, [x21]
 	eor	x0, x1, x0
-	cbz	x0, .L1404
+	cbz	x0, .L1395
 	bl	__stack_chk_fail
-.L1404:
+.L1395:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9677,61 +9635,61 @@ FtlGcFreeTempBlock:
 	str	x2, [x29, 88]
 	mov	x2,0
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w4, [x2, 136]
-	ldrh	w1, [x2, 314]
+	ldrh	w4, [x2, 128]
+	ldrh	w1, [x2, 306]
 	cmp	w4, w3
-	bne	.L1410
-.L1417:
+	bne	.L1401
+.L1408:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
-	add	x1, x0, 136
-	ldrh	w3, [x0, 136]
+	add	x1, x0, 128
+	ldrh	w3, [x0, 128]
 	str	wzr, [x0, 3720]
 	cmp	w3, w2
-	bne	.L1431
-.L1435:
+	bne	.L1422
+.L1426:
 	mov	w0, 0
-.L1409:
+.L1400:
 	add	x21, x21, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 88]
 	ldr	x1, [x21]
 	eor	x1, x2, x1
-	cbz	x1, .L1426
+	cbz	x1, .L1417
 	bl	__stack_chk_fail
-.L1410:
+.L1401:
 	adrp	x20, .LANCHOR2
-	cbz	w0, .L1413
+	cbz	w0, .L1404
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1414
-.L1415:
+	beq	.L1405
+.L1406:
 	mov	w1, 2
-.L1413:
+.L1404:
 	add	x20, x20, :lo12:.LANCHOR2
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 136
+	add	x0, x0, 128
 	bl	FtlGcScanTempBlk
 	str	w0, [x29, 84]
 	mov	w0, 65535
 	ldrh	w1, [x20, 4]
 	cmp	w1, w0
-	beq	.L1417
+	beq	.L1408
 	mov	w0, 1
-	b	.L1409
-.L1414:
+	b	.L1400
+.L1405:
 	strh	wzr, [x0, 4]
-	ldrh	w0, [x2, 236]
+	ldrh	w0, [x2, 228]
 	cmp	w0, 17
-	bhi	.L1415
-	b	.L1413
-.L1431:
+	bhi	.L1406
+	b	.L1404
+.L1422:
 	ldrh	w2, [x0, 3304]
 	ldrb	w1, [x1, 7]
-	ldrh	w0, [x0, 314]
+	ldrh	w0, [x0, 306]
 	mul	w0, w1, w0
 	cmp	w2, w0
-	beq	.L1418
+	beq	.L1409
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9739,69 +9697,69 @@ FtlGcFreeTempBlock:
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1418:
+.L1409:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w22, 0
 	mov	x20, x0
 	mov	w26, 12
-	ldrb	w1, [x0, 143]
-	ldrh	w4, [x0, 314]
-	ldr	x2, [x0, 80]
-	ldrh	w3, [x0, 136]
+	ldrb	w1, [x0, 135]
+	ldrh	w4, [x0, 306]
+	ldr	x2, [x0, 72]
+	ldrh	w3, [x0, 128]
 	mul	w1, w1, w4
 	strh	w1, [x2, x3, lsl 1]
 	ldr	w2, [x0, 2656]
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2656]
-.L1419:
+.L1410:
 	ldrh	w0, [x20, 3304]
 	cmp	w0, w22
-	bhi	.L1423
+	bhi	.L1414
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldrh	w0, [x20, 136]
-	ldr	x2, [x20, 80]
+	ldrh	w0, [x20, 128]
+	ldr	x2, [x20, 72]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1424
+	cbz	w1, .L1415
 	bl	INSERT_DATA_LIST
-.L1425:
+.L1416:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
-	strh	w20, [x19, 136]
+	strh	w20, [x19, 128]
 	strh	wzr, [x19, 3292]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	strh	w20, [x19, 184]
+	strh	w20, [x19, 176]
 	ldrh	w0, [x19, 2700]
-	ldrh	w1, [x19, 236]
+	ldrh	w1, [x19, 228]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1435
+	ble	.L1426
 	mov	w0, 20
 	strh	w0, [x19, 3232]
-	b	.L1435
-.L1423:
+	b	.L1426
+.L1414:
 	umull	x24, w22, w26
 	ldr	x25, [x20, 3312]
 	ldr	w1, [x20, 2632]
 	add	x23, x25, x24
 	ldr	w0, [x23, 8]
 	cmp	w0, w1
-	bcc	.L1420
-.L1433:
-	ldrh	w0, [x20, 136]
-	b	.L1434
-.L1420:
+	bcc	.L1411
+.L1424:
+	ldrh	w0, [x20, 128]
+	b	.L1425
+.L1411:
 	add	x1, x29, 84
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x25, x24]
 	ldr	w1, [x29, 84]
 	cmp	w0, w1
-	bne	.L1422
+	bne	.L1413
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	mov	w24, w0
@@ -9810,21 +9768,21 @@ FtlGcFreeTempBlock:
 	add	x1, x23, 4
 	bl	log2phys
 	mov	w0, w24
-.L1434:
+.L1425:
 	bl	decrement_vpc_count
-	b	.L1421
-.L1422:
+	b	.L1412
+.L1413:
 	ldr	w0, [x23, 4]
 	cmp	w1, w0
-	bne	.L1433
-.L1421:
+	bne	.L1424
+.L1412:
 	add	w22, w22, 1
 	and	w22, w22, 65535
-	b	.L1419
-.L1424:
+	b	.L1410
+.L1415:
 	bl	INSERT_FREE_LIST
-	b	.L1425
-.L1426:
+	b	.L1416
+.L1417:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9841,20 +9799,20 @@ FtlGcPageRecovery:
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, 136
+	add	x20, x19, 128
 	mov	x0, x20
-	ldrh	w1, [x19, 314]
+	ldrh	w1, [x19, 306]
 	bl	FtlGcScanTempBlk
-	ldrh	w1, [x19, 138]
-	ldrh	w0, [x19, 314]
+	ldrh	w1, [x19, 130]
+	ldrh	w0, [x19, 306]
 	cmp	w1, w0
-	bcc	.L1436
+	bcc	.L1427
 	add	x0, x19, 3648
 	bl	FtlMapBlkWriteDump_data
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19, 3720]
-.L1436:
+.L1427:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9868,10 +9826,10 @@ FtlPowerLostRecovery:
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, 32
-	add	x19, x19, 88
+	add	x20, x19, 24
+	add	x19, x19, 80
 	mov	x0, x20
-	str	wzr, [x19, 3676]
+	str	wzr, [x19, 3684]
 	bl	FtlRecoverySuperblock
 	mov	x0, x20
 	bl	FtlSlcSuperblockCheck
@@ -9902,43 +9860,43 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x19, 3448]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1442:
+.L1433:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1445
+	bcc	.L1436
 	ldr	x0, [x19, 3448]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
-	ldrh	w0, [x19, 140]
-	cbnz	w0, .L1447
+	ldrh	w0, [x19, 132]
+	cbnz	w0, .L1438
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w0, 1
-.L1441:
+.L1432:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1445:
+.L1436:
 	ldr	x2, [x19, 3448]
 	ubfiz	x0, x10, 5, 16
 	add	x1, x2, x0
 	ldr	w2, [x2, x0]
 	ldr	x3, [x1, 16]
 	cmn	w2, #1
-	bne	.L1443
-.L1449:
+	bne	.L1434
+.L1440:
 	ldr	w1, [x1, 4]
 	ldr	w0, [x3, 12]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1442
-.L1443:
+	b	.L1433
+.L1434:
 	ldr	w2, [x3, 8]
-	b	.L1449
-.L1447:
+	b	.L1440
+.L1438:
 	mov	w0, 0
-	b	.L1441
+	b	.L1432
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9949,18 +9907,18 @@ Ftl_get_new_temp_ppa:
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x0, 136
-	ldrh	w2, [x0, 136]
+	add	x1, x0, 128
+	ldrh	w2, [x0, 128]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1451
+	beq	.L1442
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1452
-.L1451:
+	cbnz	w0, .L1443
+.L1442:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
-	add	x0, x20, 136
+	add	x0, x20, 128
 	strb	wzr, [x0, 8]
 	bl	allocate_data_superblock
 	strh	wzr, [x20, 3292]
@@ -9969,9 +9927,9 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1452:
+.L1443:
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 136
+	add	x0, x0, 128
 	bl	get_new_active_ppa
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -9998,486 +9956,486 @@ rk_ftl_garbage_collect:
 	mov	x1,0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3424]
-	cbnz	w1, .L1534
-	ldrh	w1, [x0, 2592]
+	cbnz	w1, .L1525
+	ldrh	w1, [x0, 2584]
 	cmp	w1, 47
-	bls	.L1534
+	bls	.L1525
 	adrp	x1, .LANCHOR2+4
 	ldrh	w2, [x1, #:lo12:.LANCHOR2+4]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L1456
-.L1459:
+	bne	.L1447
+.L1450:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
-	ldrh	w1, [x0, 232]
+	ldrh	w1, [x0, 224]
 	cmp	w1, w2
-	bne	.L1457
-.L1458:
+	bne	.L1448
+.L1449:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	FtlReadRefresh
 	mov	w21, 65535
 	ldr	w0, [x20, 3236]
-	ldrh	w1, [x20, 184]
+	ldrh	w1, [x20, 176]
 	add	w0, w0, 1
 	add	w0, w0, w27, lsl 7
 	str	w0, [x20, 3236]
 	cmp	w1, w21
-	bne	.L1460
-	ldrh	w21, [x20, 136]
+	bne	.L1451
+	ldrh	w21, [x20, 128]
 	cmp	w21, w1
-	bne	.L1537
-	ldrh	w22, [x20, 234]
+	bne	.L1528
+	ldrh	w22, [x20, 226]
 	cmp	w22, w21
-	bne	.L1460
-	ldrh	w1, [x20, 236]
+	bne	.L1451
+	ldrh	w1, [x20, 228]
 	mov	w2, 1024
 	cmp	w1, 24
 	mov	w1, 5120
 	csel	w1, w1, w2, cc
 	cmp	w0, w1
-	bls	.L1540
+	bls	.L1531
 	strh	wzr, [x20, 3968]
 	str	wzr, [x20, 3236]
 	bl	GetSwlReplaceBlock
 	and	w21, w0, 65535
 	cmp	w21, w22
-	bne	.L1541
-	ldrh	w1, [x20, 236]
+	bne	.L1532
+	ldrh	w1, [x20, 228]
 	ldrh	w0, [x20, 3234]
 	cmp	w1, w0
-	bcs	.L1463
+	bcs	.L1454
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
 	cmp	w0, w21
-	beq	.L1465
-	ldr	x1, [x20, 80]
+	beq	.L1456
+	ldr	x1, [x20, 72]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1466
+	bhi	.L1457
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
 	strh	w0, [x20, 3234]
 	cmp	w22, w21
-	bne	.L1462
-.L1465:
+	bne	.L1453
+.L1456:
 	bl	FtlGcReFreshBadBlk
-.L1460:
+.L1451:
 	cmp	w27, 0
 	mov	w1, 65535
 	ccmp	w21, w1, 0, eq
-	bne	.L1468
+	bne	.L1459
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 236]
+	ldrh	w0, [x1, 228]
 	cmp	w0, 24
-	bhi	.L1542
+	bhi	.L1533
 	cmp	w0, 16
-	ldrh	w20, [x1, 314]
-	bls	.L1470
+	ldrh	w20, [x1, 306]
+	bls	.L1461
 	lsr	w20, w20, 5
-.L1469:
+.L1460:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1473
-	ldrh	w0, [x1, 136]
+	bcs	.L1464
+	ldrh	w0, [x1, 128]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1474
-	ldrh	w2, [x1, 234]
+	bne	.L1465
+	ldrh	w2, [x1, 226]
 	cmp	w2, w0
-	bne	.L1474
+	bne	.L1465
 	ldrh	w0, [x1, 3968]
-	cbnz	w0, .L1475
+	cbnz	w0, .L1466
 	ldr	w2, [x1, 2632]
-	ldr	w3, [x1, 2628]
+	ldr	w3, [x1, 2620]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1476
-.L1475:
+	bcs	.L1467
+.L1466:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2700]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1477:
+.L1468:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1454:
+.L1445:
 	ldr	x1, [x29, 112]
 	add	x24, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 136]
 	ldr	x1, [x24]
 	eor	x1, x2, x1
-	cbz	x1, .L1532
+	cbz	x1, .L1523
 	bl	__stack_chk_fail
-.L1456:
-	ldrh	w0, [x0, 136]
+.L1447:
+	ldrh	w0, [x0, 128]
 	cmp	w0, w1
-	beq	.L1459
+	beq	.L1450
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1459
+	cbz	w0, .L1450
 	mov	w0, 1
-	b	.L1454
-.L1457:
-	ldrh	w3, [x0, 234]
+	b	.L1445
+.L1448:
+	ldrh	w3, [x0, 226]
 	cmp	w3, w2
-	bne	.L1458
-	strh	w1, [x0, 234]
+	bne	.L1449
+	strh	w1, [x0, 226]
 	mov	w1, -1
-	strh	w1, [x0, 232]
-	b	.L1458
-.L1466:
+	strh	w1, [x0, 224]
+	b	.L1449
+.L1457:
 	mov	w0, 64
-.L1572:
+.L1563:
 	strh	w0, [x20, 3234]
-	b	.L1465
-.L1463:
+	b	.L1456
+.L1454:
 	mov	w0, 80
-	b	.L1572
-.L1541:
+	b	.L1563
+.L1532:
 	mov	w22, w21
-.L1462:
+.L1453:
 	add	x0, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x22, 1, 32
 	mov	w21, w22
-	ldr	x2, [x0, 80]
-	ldr	x3, [x0, 2608]
+	ldr	x2, [x0, 72]
+	ldr	x3, [x0, 2600]
 	ldrh	w5, [x0, 3232]
 	ldrh	w4, [x3, x1]
 	ldrh	w3, [x2, x1]
 	mov	w1, w22
-	ldrh	w2, [x0, 236]
+	ldrh	w2, [x0, 228]
 	adrp	x0, .LC124
 	add	x0, x0, :lo12:.LC124
 	bl	sftl_printk
-	b	.L1465
-.L1537:
+	b	.L1456
+.L1528:
 	mov	w21, w1
-	b	.L1460
-.L1540:
+	b	.L1451
+.L1531:
 	mov	w21, w22
-	b	.L1460
-.L1470:
+	b	.L1451
+.L1461:
 	cmp	w0, 12
-	bls	.L1471
+	bls	.L1462
 	lsr	w20, w20, 4
-	b	.L1469
-.L1471:
+	b	.L1460
+.L1462:
 	mov	w1, w20
 	cmp	w0, 9
 	lsr	w20, w20, 2
 	csel	w20, w20, w1, cs
-	b	.L1469
-.L1542:
+	b	.L1460
+.L1533:
 	mov	w20, 1
-	b	.L1469
-.L1476:
+	b	.L1460
+.L1467:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1477
-.L1474:
+	b	.L1468
+.L1465:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1473:
+.L1464:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3320]
-	cbz	w0, .L1543
+	cbz	w0, .L1534
 	add	w20, w20, 32
 	and	w20, w20, 65535
-.L1543:
+.L1534:
 	mov	w21, 65535
-.L1479:
+.L1470:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
-	ldrh	w1, [x0, 184]
+	ldrh	w1, [x0, 176]
 	cmp	w1, w2
-	bne	.L1488
+	bne	.L1479
 	cmp	w21, w1
-	beq	.L1489
-	strh	w21, [x0, 184]
-.L1490:
+	beq	.L1480
+	strh	w21, [x0, 176]
+.L1481:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
-	ldrh	w0, [x5, 184]
-	strb	wzr, [x5, 192]
+	ldrh	w0, [x5, 176]
+	strb	wzr, [x5, 184]
 	cmp	w0, w1
-	beq	.L1488
+	beq	.L1479
 	bl	IsBlkInGcList
-	cbz	w0, .L1493
+	cbz	w0, .L1484
 	mov	w0, -1
-	strh	w0, [x5, 184]
-.L1493:
+	strh	w0, [x5, 176]
+.L1484:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	add	x23, x22, 184
-	ldrh	w1, [x22, 184]
+	add	x23, x22, 176
+	ldrh	w1, [x22, 176]
 	cmp	w1, w0
-	beq	.L1488
+	beq	.L1479
 	mov	x0, x23
 	bl	make_superblock
-	ldrh	w1, [x22, 184]
-	ldr	x0, [x22, 80]
-	strh	wzr, [x22, 186]
-	strb	wzr, [x22, 190]
+	ldrh	w1, [x22, 176]
+	ldr	x0, [x22, 72]
+	strh	wzr, [x22, 178]
+	strb	wzr, [x22, 182]
 	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
 	strh	w0, [x22, 3972]
-.L1488:
+.L1479:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 184]
-	ldrh	w2, [x0, 32]
+	ldrh	w1, [x0, 176]
+	ldrh	w2, [x0, 24]
 	cmp	w2, w1
-	beq	.L1494
-	ldrh	w2, [x0, 88]
+	beq	.L1485
+	ldrh	w2, [x0, 80]
 	cmp	w2, w1
-	beq	.L1494
-	ldrh	w0, [x0, 136]
+	beq	.L1485
+	ldrh	w0, [x0, 128]
 	cmp	w0, w1
-	bne	.L1495
-.L1494:
+	bne	.L1486
+.L1485:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
-	strh	w1, [x0, 184]
-.L1495:
+	strh	w1, [x0, 176]
+.L1486:
 	adrp	x23, .LANCHOR1
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x23, x23, 672
-.L1530:
+.L1521:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w25, [x22, 184]
+	ldrh	w25, [x22, 176]
 	cmp	w25, w0
-	bne	.L1496
+	bne	.L1487
 	mov	w26, 2
 	str	wzr, [x22, 3244]
-.L1497:
+.L1488:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
-	strh	w6, [x22, 184]
+	strh	w6, [x22, 176]
 	cmp	w6, w25
-	bne	.L1498
+	bne	.L1489
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1454
-.L1468:
+	b	.L1445
+.L1459:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0, 136]
+	ldrh	w2, [x0, 128]
 	cmp	w2, w1
-	bne	.L1546
-	ldrh	w1, [x0, 234]
+	bne	.L1537
+	ldrh	w1, [x0, 226]
 	cmp	w1, w2
-	bne	.L1546
+	bne	.L1537
 	cmp	w21, w1
-	bne	.L1546
-	ldrh	w1, [x0, 184]
+	bne	.L1537
+	ldrh	w1, [x0, 176]
 	cmp	w1, w21
-	beq	.L1480
-.L1546:
+	beq	.L1471
+.L1537:
 	mov	w20, 1
-	b	.L1479
-.L1480:
-	ldrh	w2, [x0, 236]
+	b	.L1470
+.L1471:
+	ldrh	w2, [x0, 228]
 	ldrh	w1, [x0, 3232]
 	str	wzr, [x0, 3244]
 	cmp	w2, w1
-	bls	.L1481
+	bls	.L1472
 	ldrh	w1, [x0, 3968]
-	cbnz	w1, .L1482
+	cbnz	w1, .L1473
 	ldr	w1, [x0, 2632]
-	ldr	w2, [x0, 2628]
+	ldr	w2, [x0, 2620]
 	add	w1, w1, w1, lsl 1
 	cmp	w2, w1, lsr 2
-	bcs	.L1483
-.L1482:
+	bcs	.L1474
+.L1473:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1484:
+.L1475:
 	bl	FtlReadRefresh
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x0, 1, 16
-	ldr	x2, [x1, 80]
+	ldr	x2, [x1, 72]
 	ldrh	w0, [x2, x0]
 	cmp	w0, 4
-	bls	.L1481
+	bls	.L1472
 	ldrh	w0, [x1, 3968]
-	b	.L1454
-.L1483:
+	b	.L1445
+.L1474:
 	mov	w1, 18
 	strh	w1, [x0, 3232]
-	b	.L1484
-.L1481:
+	b	.L1475
+.L1472:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x20, 3968]
-	cbnz	w0, .L1546
+	cbnz	w0, .L1537
 	ldrh	w5, [x20, 2700]
 	add	w0, w5, w5, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x20, 3232]
 	mov	w0, 0
 	bl	List_get_gc_head_node
-	ldr	x1, [x20, 80]
+	ldr	x1, [x20, 72]
 	ubfiz	x0, x0, 1, 16
-	ldrh	w2, [x20, 244]
+	ldrh	w2, [x20, 236]
 	ldrh	w1, [x1, x0]
-	ldrh	w0, [x20, 316]
+	ldrh	w0, [x20, 308]
 	mul	w0, w0, w2
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1486
-	ldrh	w0, [x20, 236]
+	ble	.L1477
+	ldrh	w0, [x20, 228]
 	sub	w5, w5, #1
 	cmp	w0, w5
-	blt	.L1486
+	blt	.L1477
 	bl	FtlReadRefresh
 	ldrh	w0, [x20, 3968]
-	b	.L1454
-.L1486:
-	cbnz	w1, .L1546
+	b	.L1445
+.L1477:
+	cbnz	w1, .L1537
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldrh	w0, [x19, 236]
+	ldrh	w0, [x19, 228]
 	add	w0, w0, 1
-	b	.L1454
-.L1489:
-	ldrh	w1, [x0, 234]
+	b	.L1445
+.L1480:
+	ldrh	w1, [x0, 226]
 	cmp	w1, w21
-	beq	.L1490
-	ldr	x2, [x0, 80]
+	beq	.L1481
+	ldr	x2, [x0, 72]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1491
+	cbnz	w1, .L1482
 	mov	w1, -1
-	strh	w1, [x0, 234]
-.L1491:
+	strh	w1, [x0, 226]
+.L1482:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 234]
-	strh	w1, [x0, 184]
+	ldrh	w1, [x0, 226]
+	strh	w1, [x0, 176]
 	mov	w1, -1
-	strh	w1, [x0, 234]
-	b	.L1490
-.L1498:
+	strh	w1, [x0, 226]
+	b	.L1481
+.L1489:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1499
+	cbz	w0, .L1490
 	strh	w5, [x22, 3240]
-	b	.L1497
-.L1499:
-	ldrh	w4, [x22, 244]
+	b	.L1488
+.L1490:
+	ldrh	w4, [x22, 236]
 	ubfiz	x1, x6, 1, 16
-	ldrh	w0, [x22, 314]
+	ldrh	w0, [x22, 306]
 	and	w5, w5, 65535
-	ldr	x2, [x22, 80]
+	ldr	x2, [x22, 72]
 	strh	w5, [x22, 3240]
 	mul	w0, w0, w4
 	ldrh	w3, [x2, x1]
 	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L1501
+	bgt	.L1492
 	cmp	w5, 48
-	bls	.L1502
+	bls	.L1493
 	cmp	w3, 8
-	bls	.L1502
+	bls	.L1493
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1502
-.L1501:
+	bhi	.L1493
+.L1492:
 	strh	wzr, [x22, 3240]
-.L1502:
+.L1493:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1503
+	bgt	.L1494
 	cmp	w21, w25
-	bne	.L1503
+	bne	.L1494
 	ldrh	w0, [x22, 3240]
 	cmp	w0, 3
-	bhi	.L1503
+	bhi	.L1494
 	mov	w0, -1
 	strh	wzr, [x22, 3240]
-	strh	w0, [x22, 184]
-.L1573:
+	strh	w0, [x22, 176]
+.L1564:
 	ldrh	w0, [x22, 3968]
-	b	.L1454
-.L1503:
-	cbnz	w1, .L1504
+	b	.L1445
+.L1494:
+	cbnz	w1, .L1495
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1497
-.L1504:
+	b	.L1488
+.L1495:
 	add	x0, x19, :lo12:.LANCHOR0
-	strb	wzr, [x0, 192]
-	ldrh	w0, [x0, 32]
+	strb	wzr, [x0, 184]
+	ldrh	w0, [x0, 24]
 	cmp	w0, w6
-	bne	.L1505
+	bne	.L1496
 	adrp	x0, .LC8
 	mov	w2, 717
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1505:
+.L1496:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 184]
-	ldrh	w0, [x0, 88]
+	ldrh	w1, [x0, 176]
+	ldrh	w0, [x0, 80]
 	cmp	w1, w0
-	bne	.L1506
+	bne	.L1497
 	adrp	x0, .LC8
 	mov	w2, 718
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1506:
+.L1497:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 184]
-	ldrh	w0, [x0, 136]
+	ldrh	w1, [x0, 176]
+	ldrh	w0, [x0, 128]
 	cmp	w1, w0
-	bne	.L1507
+	bne	.L1498
 	adrp	x0, .LC8
 	mov	w2, 719
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1507:
+.L1498:
 	add	x22, x19, :lo12:.LANCHOR0
-	add	x25, x22, 184
+	add	x25, x22, 176
 	mov	x0, x25
 	bl	make_superblock
-	ldrh	w1, [x22, 184]
-	ldr	x0, [x22, 80]
+	ldrh	w1, [x22, 176]
+	ldr	x0, [x22, 72]
 	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
 	strh	w0, [x22, 3972]
-	strh	wzr, [x22, 186]
-	strb	wzr, [x22, 190]
-.L1496:
+	strh	wzr, [x22, 178]
+	strb	wzr, [x22, 182]
+.L1487:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	str	w0, [x1, 3424]
-	ldrh	w26, [x1, 314]
-	cbz	w27, .L1508
-	ldrh	w0, [x1, 244]
-	ldrh	w2, [x1, 184]
-	ldr	x1, [x1, 80]
+	ldrh	w26, [x1, 306]
+	cbz	w27, .L1499
+	ldrh	w0, [x1, 236]
+	ldrh	w2, [x1, 176]
+	ldr	x1, [x1, 72]
 	mul	w0, w0, w26
 	ldrh	w1, [x1, x2, lsl 1]
 	sub	w0, w0, w1
@@ -10485,32 +10443,32 @@ rk_ftl_garbage_collect:
 	sdiv	w0, w0, w1
 	add	w20, w20, w0
 	and	w20, w20, 65535
-.L1508:
+.L1499:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 186]
+	ldrh	w0, [x0, 178]
 	add	w1, w0, w20
 	cmp	w1, w26
-	ble	.L1509
+	ble	.L1500
 	sub	w20, w26, w0
 	and	w20, w20, 65535
-.L1509:
+.L1500:
 	mov	w28, 0
-.L1510:
+.L1501:
 	cmp	w20, w28, uxth
-	bls	.L1518
+	bls	.L1509
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w22, 0
-	add	x3, x0, 200
+	add	x3, x0, 192
 	mov	w1, 0
 	mov	w6, 65535
-	ldrh	w4, [x0, 186]
-	ldrh	w7, [x0, 244]
+	ldrh	w4, [x0, 178]
+	ldrh	w7, [x0, 236]
 	add	w4, w4, w28
-	b	.L1519
-.L1512:
+	b	.L1510
+.L1503:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1511
+	beq	.L1502
 	ldr	x5, [x0, 3280]
 	ubfiz	x8, x22, 5, 16
 	add	w22, w22, 1
@@ -10518,42 +10476,42 @@ rk_ftl_garbage_collect:
 	add	x5, x5, x8
 	and	w22, w22, 65535
 	str	w2, [x5, 4]
-.L1511:
+.L1502:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1519:
+.L1510:
 	cmp	w1, w7
-	bne	.L1512
+	bne	.L1503
 	add	x24, x19, :lo12:.LANCHOR0
 	mov	w1, w22
 	mov	x25, 0
-	ldrb	w2, [x24, 192]
+	ldrb	w2, [x24, 184]
 	ldr	x0, [x24, 3280]
 	bl	FlashReadPages
 	ubfiz	x0, x22, 5, 16
 	mov	x22, x24
 	str	x0, [x29, 120]
-.L1513:
+.L1504:
 	ldr	x0, [x29, 120]
 	cmp	x0, x25
-	bne	.L1517
+	bne	.L1508
 	add	w28, w28, 1
-	b	.L1510
-.L1517:
+	b	.L1501
+.L1508:
 	ldr	x0, [x22, 3280]
 	add	x1, x0, x25
 	ldr	w0, [x0, x25]
 	cmn	w0, #1
-	beq	.L1514
+	beq	.L1505
 	ldr	x24, [x1, 16]
 	mov	w0, 61589
 	ldrh	w1, [x24]
 	cmp	w1, w0
-	bne	.L1514
+	bne	.L1505
 	ldr	w5, [x24, 8]
 	cmn	w5, #1
-	bne	.L1515
+	bne	.L1506
 	str	w5, [x29, 104]
 	mov	w2, 753
 	mov	x1, x23
@@ -10561,7 +10519,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	w5, [x29, 104]
-.L1515:
+.L1506:
 	mov	w2, 0
 	add	x1, x29, 128
 	mov	w0, w5
@@ -10571,7 +10529,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, x25
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1514
+	bne	.L1505
 	ldrh	w1, [x22, 3970]
 	ldr	x2, [x22, 3448]
 	add	w1, w1, 1
@@ -10596,7 +10554,7 @@ rk_ftl_garbage_collect:
 	ldr	w0, [x29, 128]
 	mov	w1, 1
 	str	w0, [x24, 12]
-	ldrh	w0, [x22, 136]
+	ldrh	w0, [x22, 128]
 	strh	w0, [x24, 2]
 	ldr	w0, [x22, 2672]
 	str	w0, [x24, 4]
@@ -10606,101 +10564,101 @@ rk_ftl_garbage_collect:
 	ldr	x0, [x22, 3280]
 	add	x0, x0, x25
 	bl	FtlGcBufAlloc
-	ldrb	w1, [x22, 143]
+	ldrb	w1, [x22, 135]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1516
-	ldrh	w0, [x22, 140]
-	cbnz	w0, .L1514
-.L1516:
+	beq	.L1507
+	ldrh	w0, [x22, 132]
+	cbnz	w0, .L1505
+.L1507:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1514
+	cbz	w0, .L1505
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	wzr, [x19, 186]
-	strh	w0, [x19, 184]
+	strh	wzr, [x19, 178]
+	strh	w0, [x19, 176]
 	str	wzr, [x19, 3424]
 	ldrh	w0, [x19, 3968]
-	b	.L1454
-.L1514:
+	b	.L1445
+.L1505:
 	add	x25, x25, 32
-	b	.L1513
-.L1518:
+	b	.L1504
+.L1509:
 	add	x22, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x22, 186]
+	ldrh	w0, [x22, 178]
 	add	w20, w20, w0
 	and	w20, w20, 65535
-	strh	w20, [x22, 186]
+	strh	w20, [x22, 178]
 	cmp	w26, w20
-	bhi	.L1520
+	bhi	.L1511
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1521
+	cbz	w0, .L1512
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1521
+	cbz	w0, .L1512
 	str	wzr, [x22, 3424]
-	b	.L1573
-.L1521:
+	b	.L1564
+.L1512:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3970]
-	cbnz	w1, .L1522
-	ldrh	w2, [x0, 184]
-	ldr	x1, [x0, 80]
+	cbnz	w1, .L1513
+	ldrh	w2, [x0, 176]
+	ldr	x1, [x0, 72]
 	ldrh	w1, [x1, x2, lsl 1]
-	cbz	w1, .L1522
+	cbz	w1, .L1513
 	mov	x20, x0
 	mov	w22, 0
-.L1523:
+.L1514:
 	ldr	w0, [x20, 2632]
 	cmp	w22, w0
-	bcs	.L1528
+	bcs	.L1519
 	mov	w2, 0
 	add	x1, x29, 132
 	mov	w0, w22
 	bl	log2phys
 	ldr	w0, [x29, 132]
 	cmn	w0, #1
-	beq	.L1524
+	beq	.L1515
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
-	ldrh	w1, [x20, 184]
+	ldrh	w1, [x20, 176]
 	cmp	w1, w0, uxth
-	bne	.L1524
-.L1528:
+	bne	.L1515
+.L1519:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w22, w1
-	bcc	.L1522
-	ldrh	w2, [x0, 184]
-	ldr	x1, [x0, 80]
+	bcc	.L1513
+	ldrh	w2, [x0, 176]
+	ldr	x1, [x0, 72]
 	strh	wzr, [x1, x2, lsl 1]
-	ldrh	w0, [x0, 184]
+	ldrh	w0, [x0, 176]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1522:
+.L1513:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
-	strh	w1, [x0, 184]
-.L1520:
+	strh	w1, [x0, 176]
+.L1511:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 236]
+	ldrh	w0, [x1, 228]
 	str	wzr, [x1, 3424]
 	cmp	w0, 2
-	bhi	.L1529
-	ldrh	w20, [x1, 314]
-	b	.L1530
-.L1524:
+	bhi	.L1520
+	ldrh	w20, [x1, 306]
+	b	.L1521
+.L1515:
 	add	w22, w22, 1
-	b	.L1523
-.L1529:
+	b	.L1514
+.L1520:
 	ldrh	w1, [x1, 3968]
 	cmp	w1, 0
 	csinc	w0, w1, w0, ne
-	b	.L1454
-.L1534:
+	b	.L1445
+.L1525:
 	mov	w0, 0
-	b	.L1454
-.L1532:
+	b	.L1445
+.L1523:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -10731,39 +10689,39 @@ FtlRead:
 	ldr	x3, [x2]
 	str	x3, [x29, 168]
 	mov	x3,0
-	bne	.L1575
+	bne	.L1566
 	mov	x2, x22
 	mov	w1, w25
 	add	w0, w26, 256
 	bl	FtlVendorPartRead
 	mov	w19, w0
-.L1574:
+.L1565:
 	ldr	x1, [x29, 112]
 	mov	w0, w19
 	add	x1, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 168]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L1596
+	cbz	x1, .L1587
 	bl	__stack_chk_fail
-.L1575:
+.L1566:
 	adrp	x1, .LANCHOR0
 	add	x3, x1, :lo12:.LANCHOR0
 	str	x1, [x29, 104]
-	ldr	w0, [x3, 352]
+	ldr	w0, [x3, 344]
 	cmp	w26, w0
-	bcs	.L1599
+	bcs	.L1590
 	cmp	w25, w0
-	bhi	.L1599
+	bhi	.L1590
 	add	w1, w26, w25
 	str	w1, [x29, 144]
 	cmp	w0, w1
-	bcc	.L1599
+	bcc	.L1590
 	adrp	x0, .LANCHOR2
 	ldr	w19, [x0, #:lo12:.LANCHOR2]
 	cmn	w19, #1
-	beq	.L1574
-	ldrh	w0, [x3, 270]
+	beq	.L1565
+	ldrh	w0, [x3, 262]
 	mov	x27, x3
 	mov	w23, 0
 	mov	w28, 0
@@ -10784,42 +10742,42 @@ FtlRead:
 	ldr	w0, [x3, 2636]
 	add	w0, w0, w21
 	str	w0, [x3, 2636]
-.L1577:
-	cbnz	w21, .L1594
+.L1568:
+	cbnz	w21, .L1585
 	ldr	x0, [x29, 104]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
-	cbnz	w1, .L1595
-	ldrh	w0, [x0, 236]
+	cbnz	w1, .L1586
+	ldrh	w0, [x0, 228]
 	cmp	w0, 31
-	bhi	.L1574
-.L1595:
+	bhi	.L1565
+.L1586:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1574
-.L1594:
+	b	.L1565
+.L1585:
 	add	x1, x29, 164
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
 	ldr	w1, [x29, 164]
 	cmn	w1, #1
-	bne	.L1578
+	bne	.L1569
 	mov	w6, 0
-.L1579:
-	ldrh	w0, [x27, 270]
+.L1570:
+	ldrh	w0, [x27, 262]
 	cmp	w6, w0
-	bcc	.L1581
-.L1582:
+	bcc	.L1572
+.L1573:
 	add	w20, w20, 1
 	subs	w21, w21, #1
-	beq	.L1586
-	ldrh	w0, [x27, 244]
+	beq	.L1577
+	ldrh	w0, [x27, 236]
 	cmp	w28, w0, lsl 2
-	bne	.L1577
-.L1586:
-	cbz	w28, .L1577
+	bne	.L1568
+.L1577:
+	cbz	w28, .L1568
 	ldr	x0, [x27, 3440]
 	mov	w1, w28
 	mov	w2, 0
@@ -10835,64 +10793,64 @@ FtlRead:
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
 	str	x0, [x29, 120]
-.L1593:
+.L1584:
 	ldr	x0, [x27, 3440]
 	ldr	w2, [x29, 156]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
 	cmp	w2, w1
-	bne	.L1588
+	bne	.L1579
 	ldr	x1, [x0, 8]
 	ldr	x0, [x27, 3488]
 	cmp	x1, x0
-	bne	.L1589
+	bne	.L1580
 	ldr	x0, [x29, 136]
 	ldr	w2, [x29, 132]
 	add	x1, x1, x0
 	mov	x0, x22
-.L1609:
+.L1600:
 	bl	ftl_memcpy
-.L1589:
+.L1580:
 	ldr	x0, [x27, 3440]
 	add	x0, x0, x28
 	ldr	x1, [x0, 16]
 	ldr	w2, [x0, 24]
 	ldr	w1, [x1, 8]
 	cmp	w2, w1
-	beq	.L1590
+	beq	.L1581
 	ldr	w1, [x27, 2792]
 	add	w1, w1, 1
 	str	w1, [x27, 2792]
-.L1590:
+.L1581:
 	ldr	w2, [x0]
 	cmn	w2, #1
-	bne	.L1591
+	bne	.L1582
 	ldr	w1, [x27, 2792]
 	mov	w19, w2
 	add	w1, w1, 1
 	str	w1, [x27, 2792]
-.L1591:
+.L1582:
 	ldr	w1, [x0]
 	cmp	w1, 256
-	bne	.L1592
+	bne	.L1583
 	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1592:
+.L1583:
 	ldr	x0, [x29, 120]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1593
+	bne	.L1584
 	mov	w28, 0
-	b	.L1577
-.L1581:
+	b	.L1568
+.L1572:
 	madd	w0, w20, w0, w6
 	cmp	w26, w0
-	bhi	.L1580
+	bhi	.L1571
 	ldr	w1, [x29, 144]
 	cmp	w1, w0
-	bls	.L1580
+	bls	.L1571
 	sub	w0, w0, w26
 	str	w6, [x29, 136]
 	lsl	w0, w0, 9
@@ -10901,18 +10859,18 @@ FtlRead:
 	add	x0, x22, x0
 	bl	ftl_memset
 	ldr	w6, [x29, 136]
-.L1580:
+.L1571:
 	add	w6, w6, 1
-	b	.L1579
-.L1578:
+	b	.L1570
+.L1569:
 	ldr	x0, [x27, 3440]
 	ubfiz	x2, x28, 5, 32
 	add	x0, x0, x2
 	str	w1, [x0, 4]
 	ldr	w0, [x29, 156]
 	cmp	w20, w0
-	ldrh	w0, [x27, 270]
-	bne	.L1583
+	ldrh	w0, [x27, 262]
+	bne	.L1574
 	ldr	x1, [x27, 3440]
 	ldr	x6, [x27, 3488]
 	add	x1, x1, x2
@@ -10924,23 +10882,23 @@ FtlRead:
 	cmp	w25, w23
 	csel	w23, w25, w23, ls
 	cmp	w23, w0
-	bne	.L1584
+	bne	.L1575
 	str	x22, [x1, 8]
-.L1584:
+.L1575:
 	ldr	x0, [x27, 3440]
 	ldr	x1, [x27, 3536]
 	add	x2, x0, x2
-	ldrh	w0, [x27, 324]
+	ldrh	w0, [x27, 316]
 	str	w20, [x2, 24]
 	mul	w0, w0, w28
 	add	w28, w28, 1
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1582
-.L1583:
+	b	.L1573
+.L1574:
 	cmp	w20, w24
-	bne	.L1585
+	bne	.L1576
 	ldr	x6, [x27, 3440]
 	ldr	x1, [x27, 3496]
 	add	x6, x6, x2
@@ -10950,13 +10908,13 @@ FtlRead:
 	sub	w3, w3, w1
 	str	w3, [x29, 148]
 	cmp	w0, w3
-	bne	.L1584
+	bne	.L1575
 	sub	w1, w1, w26
 	lsl	w1, w1, 9
 	add	x1, x22, x1
 	str	x1, [x6, 8]
-	b	.L1584
-.L1585:
+	b	.L1575
+.L1576:
 	ldr	x1, [x27, 3440]
 	mul	w0, w0, w20
 	add	x1, x1, x2
@@ -10964,25 +10922,25 @@ FtlRead:
 	lsl	w0, w0, 9
 	add	x0, x22, x0
 	str	x0, [x1, 8]
-	b	.L1584
-.L1588:
+	b	.L1575
+.L1579:
 	cmp	w24, w1
-	bne	.L1589
+	bne	.L1580
 	ldr	x1, [x0, 8]
 	ldr	x0, [x27, 3496]
 	cmp	x1, x0
-	bne	.L1589
-	ldrh	w0, [x27, 270]
+	bne	.L1580
+	ldrh	w0, [x27, 262]
 	ldr	w2, [x29, 128]
 	mul	w0, w0, w24
 	sub	w0, w0, w26
 	lsl	w0, w0, 9
 	add	x0, x22, x0
-	b	.L1609
-.L1599:
+	b	.L1600
+.L1590:
 	mov	w19, -1
-	b	.L1574
-.L1596:
+	b	.L1565
+.L1587:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -11027,43 +10985,43 @@ FtlWrite:
 	ldr	x3, [x2]
 	str	x3, [x29, 232]
 	mov	x3,0
-	bne	.L1613
+	bne	.L1604
 	mov	x2, x27
 	mov	w1, w26
 	add	w0, w23, 256
 	bl	FtlVendorPartWrite
-.L1612:
+.L1603:
 	ldr	x1, [x29, 112]
 	add	x1, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 232]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L1649
+	cbz	x1, .L1640
 	bl	__stack_chk_fail
-.L1613:
+.L1604:
 	adrp	x19, .LANCHOR0
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	w0, [x1, 352]
+	ldr	w0, [x1, 344]
 	cmp	w23, w0
-	bcs	.L1652
+	bcs	.L1643
 	cmp	w26, w0
-	bhi	.L1652
+	bhi	.L1643
 	add	w2, w23, w26
 	str	w2, [x29, 124]
 	cmp	w0, w2
-	bcc	.L1652
+	bcc	.L1643
 	adrp	x2, .LANCHOR2
 	str	x2, [x29, 152]
 	add	x3, x2, :lo12:.LANCHOR2
 	ldr	w0, [x2, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1612
+	beq	.L1603
 	mov	w0, 2048
 	add	w2, w23, w26
 	str	w0, [x1, 3976]
 	sub	w2, w2, #1
-	ldrh	w0, [x1, 270]
-	add	x20, x1, 32
+	ldrh	w0, [x1, 262]
+	add	x20, x1, 24
 	udiv	w25, w23, w0
 	udiv	w0, w2, w0
 	str	w0, [x29, 160]
@@ -11077,58 +11035,58 @@ FtlWrite:
 	add	w0, w0, w24
 	str	w0, [x1, 2644]
 	ldr	w0, [x3, 8]
-	cbz	w0, .L1615
+	cbz	w0, .L1606
 	ldrh	w0, [x20, 4]
-	add	x1, x1, 88
+	add	x1, x1, 80
 	cmp	w0, 0
 	csel	x20, x1, x20, eq
-.L1615:
+.L1606:
 	adrp	x0, .LANCHOR1
 	mov	w21, w25
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 696
 	str	x0, [x29, 176]
-.L1616:
-	cbnz	w24, .L1644
+.L1607:
+	cbnz	w24, .L1635
 	ldr	w1, [x29, 148]
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	ldrh	w0, [x19, 236]
+	ldrh	w0, [x19, 228]
 	cmp	w0, 5
-	bls	.L1645
-.L1647:
+	bls	.L1636
+.L1638:
 	mov	w0, 0
-	b	.L1612
-.L1644:
+	b	.L1603
+.L1635:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x0, 244]
+	ldrh	w0, [x0, 236]
 	cmp	w1, w0
-	bcc	.L1617
+	bcc	.L1608
 	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1041
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1617:
+.L1608:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1618
+	cbnz	w0, .L1609
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x0, 32
+	add	x1, x0, 24
 	cmp	x20, x1
-	bne	.L1619
-	add	x0, x0, 88
+	bne	.L1610
+	add	x0, x0, 80
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1620
+	cbnz	w1, .L1611
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 152]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1620:
+.L1611:
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x22, x20, 32
-	add	x20, x20, 88
+	add	x22, x20, 24
+	add	x20, x20, 80
 	mov	x0, x22
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 152]
@@ -11136,12 +11094,12 @@ FtlWrite:
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
 	csel	x20, x20, x22, ne
-.L1621:
+.L1612:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1618
+	cbnz	w0, .L1609
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1618:
+.L1609:
 	ldrh	w0, [x20, 4]
 	ldrb	w1, [x20, 7]
 	cmp	w0, w24
@@ -11152,23 +11110,23 @@ FtlWrite:
 	str	w0, [x29, 144]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x0, 244]
+	ldrh	w0, [x0, 236]
 	cmp	w1, w0
-	bcc	.L1622
+	bcc	.L1613
 	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1074
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1622:
+.L1613:
 	str	xzr, [x29, 184]
-.L1623:
+.L1614:
 	ldr	w1, [x29, 144]
 	ldr	w22, [x29, 184]
 	cmp	w22, w1
-	bcc	.L1642
+	bcc	.L1633
 	mov	x22, x1
-.L1624:
+.L1615:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	x3, x20
 	mov	w2, 0
@@ -11176,30 +11134,30 @@ FtlWrite:
 	ldr	x0, [x0, 3456]
 	bl	FtlProgPages
 	cmp	w24, w22
-	bcs	.L1643
+	bcs	.L1634
 	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1152
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1643:
+.L1634:
 	sub	w24, w24, w22
-	b	.L1616
-.L1619:
+	b	.L1607
+.L1610:
 	ldr	x0, [x29, 152]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1657
+	cbnz	w0, .L1648
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-	b	.L1621
-.L1657:
+	b	.L1612
+.L1648:
 	mov	x20, x1
-	b	.L1618
-.L1642:
+	b	.L1609
+.L1633:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1624
+	cbz	w0, .L1615
 	add	x1, x29, 196
 	mov	w2, 0
 	mov	w0, w21
@@ -11211,7 +11169,7 @@ FtlWrite:
 	str	x3, [x29, 168]
 	lsl	x28, x1, 5
 	ldr	x1, [x3, 3456]
-	ldrh	w2, [x3, 324]
+	ldrh	w2, [x3, 316]
 	add	x1, x1, x28
 	str	w0, [x1, 4]
 	mul	w22, w22, w2
@@ -11232,10 +11190,10 @@ FtlWrite:
 	cmp	w21, w25
 	ldr	x3, [x29, 168]
 	ccmp	w21, w0, 4, ne
-	bne	.L1625
+	bne	.L1616
 	cmp	w21, w25
-	bne	.L1626
-	ldrh	w2, [x3, 270]
+	bne	.L1617
+	ldrh	w2, [x3, 262]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
 	str	w0, [x29, 164]
@@ -11243,29 +11201,29 @@ FtlWrite:
 	cmp	w2, w26
 	csel	w0, w2, w26, ls
 	str	w0, [x29, 168]
-.L1627:
+.L1618:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x29, 168]
-	ldrh	w1, [x0, 270]
+	ldrh	w1, [x0, 262]
 	cmp	w2, w1
-	bne	.L1628
+	bne	.L1619
 	ldr	x0, [x0, 3456]
 	cmp	w21, w25
 	add	x4, x0, x28
-	bne	.L1629
+	bne	.L1620
 	str	x27, [x4, 8]
-.L1630:
+.L1621:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x0, 244]
+	ldrh	w0, [x0, 236]
 	cmp	w1, w0
-	bcc	.L1639
+	bcc	.L1630
 	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1143
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1639:
+.L1630:
 	ldp	x1, x2, [x29, 128]
 	mov	w0, -3947
 	strh	w0, [x1, x2]
@@ -11284,34 +11242,34 @@ FtlWrite:
 	ldr	x0, [x29, 184]
 	add	x0, x0, 1
 	str	x0, [x29, 184]
-	b	.L1623
-.L1626:
+	b	.L1614
+.L1617:
 	ldr	w0, [x29, 124]
-	ldrh	w2, [x3, 270]
+	ldrh	w2, [x3, 262]
 	msub	w2, w21, w2, w0
 	and	w0, w2, 65535
 	stp	wzr, w0, [x29, 164]
-	b	.L1627
-.L1629:
+	b	.L1618
+.L1620:
 	ldr	w0, [x29, 168]
-.L1664:
+.L1655:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
 	add	x0, x27, x0
 	str	x0, [x4, 8]
-	b	.L1630
-.L1628:
+	b	.L1621
+.L1619:
 	ldr	x1, [x0, 3456]
 	cmp	w21, w25
 	add	x1, x1, x28
-	bne	.L1631
+	bne	.L1622
 	ldr	x0, [x0, 3488]
-.L1663:
+.L1654:
 	str	x0, [x1, 8]
 	ldr	w0, [x29, 196]
 	cmn	w0, #1
-	beq	.L1633
+	beq	.L1624
 	add	x5, x19, :lo12:.LANCHOR0
 	str	w0, [x29, 204]
 	str	w21, [x29, 224]
@@ -11327,7 +11285,7 @@ FtlWrite:
 	ldr	w3, [x29, 200]
 	ldr	x5, [x29, 104]
 	cmn	w3, #1
-	bne	.L1634
+	bne	.L1625
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11336,12 +11294,12 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC125
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1637:
+.L1628:
 	ldr	w0, [x29, 168]
 	cmp	w21, w25
 	lsl	w2, w0, 9
 	add	x0, x19, :lo12:.LANCHOR0
-	bne	.L1638
+	bne	.L1629
 	ldr	x0, [x0, 3456]
 	mov	x1, x27
 	add	x4, x0, x28
@@ -11349,16 +11307,16 @@ FtlWrite:
 	ldr	x3, [x4, 8]
 	lsl	w0, w0, 9
 	add	x0, x3, x0
-.L1665:
+.L1656:
 	bl	ftl_memcpy
-	b	.L1630
-.L1631:
+	b	.L1621
+.L1622:
 	ldr	x0, [x0, 3496]
-	b	.L1663
-.L1634:
+	b	.L1654
+.L1625:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1636
+	beq	.L1627
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11367,27 +11325,27 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC126
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1636:
+.L1627:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1637
+	beq	.L1628
 	ldr	x1, [x29, 176]
 	mov	w2, 1128
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1637
-.L1633:
+	b	.L1628
+.L1624:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3456]
-	ldrh	w2, [x1, 322]
+	ldrh	w2, [x1, 314]
 	mov	w1, 0
 	add	x0, x0, x28
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1637
-.L1638:
-	ldrh	w1, [x0, 270]
+	b	.L1628
+.L1629:
+	ldrh	w1, [x0, 262]
 	ldr	x0, [x0, 3456]
 	add	x4, x0, x28
 	mul	w1, w1, w21
@@ -11395,27 +11353,27 @@ FtlWrite:
 	ldr	x0, [x4, 8]
 	lsl	w1, w1, 9
 	add	x1, x27, x1
-	b	.L1665
-.L1625:
+	b	.L1656
+.L1616:
 	ldr	x0, [x3, 3456]
 	add	x4, x0, x28
-	ldrh	w0, [x3, 270]
-	b	.L1664
-.L1645:
+	ldrh	w0, [x3, 262]
+	b	.L1655
+.L1636:
 	mov	w20, 256
 	mov	w21, 65535
 	mov	w22, 128
-.L1648:
-	ldrh	w0, [x19, 184]
+.L1639:
+	ldrh	w0, [x19, 176]
 	cmp	w0, w21
-	bne	.L1646
-	ldrh	w0, [x19, 234]
+	bne	.L1637
+	ldrh	w0, [x19, 226]
 	cmp	w0, w21
-	bne	.L1646
+	bne	.L1637
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L1646:
+.L1637:
 	mov	w1, 1
 	strh	w22, [x19, 3234]
 	mov	w0, w1
@@ -11424,16 +11382,16 @@ FtlWrite:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	ldrh	w0, [x19, 236]
+	ldrh	w0, [x19, 228]
 	cmp	w0, 2
-	bhi	.L1647
+	bhi	.L1638
 	subs	w20, w20, #1
-	bne	.L1648
-	b	.L1647
-.L1652:
+	bne	.L1639
+	b	.L1638
+.L1643:
 	mov	w0, -1
-	b	.L1612
-.L1649:
+	b	.L1603
+.L1640:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -11472,24 +11430,24 @@ FtlLoadSysInfo:
 	str	x0, [x20, 8]
 	ldr	x0, [x21, 3528]
 	str	x0, [x20, 16]
-	ldr	x0, [x21, 80]
-	ldrh	w2, [x21, 252]
+	ldr	x0, [x21, 72]
+	ldrh	w2, [x21, 244]
 	lsl	w2, w2, 1
 	bl	ftl_memset
 	ldrh	w0, [x21, 2704]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1669
-.L1680:
+	bne	.L1660
+.L1671:
 	mov	w0, -1
-.L1668:
+.L1659:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1669:
+.L1660:
 	add	x23, x21, 2704
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
@@ -11500,17 +11458,17 @@ FtlLoadSysInfo:
 	strh	w0, [x23, 2]
 	ldrsh	w23, [x21, 2704]
 	add	x24, x1, 712
-.L1671:
-	tbz	w19, #31, .L1677
+.L1662:
+	tbz	w19, #31, .L1668
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 1465
+	mov	w2, 1467
 	add	x1, x1, 712
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1676
-.L1677:
+	b	.L1667
+.L1668:
 	orr	w0, w19, w23, lsl 10
 	str	w0, [x20, 4]
 	ldr	x0, [x21, 3464]
@@ -11521,15 +11479,15 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	x0, [x20, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1672
+	cbz	w7, .L1663
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1672
-	ldrh	w1, [x21, 322]
+	beq	.L1663
+	ldrh	w1, [x21, 314]
 	ldr	x0, [x20, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1672
+	beq	.L1663
 	ldrh	w4, [x21, 2708]
 	mov	w6, w0
 	mov	w5, w7
@@ -11539,194 +11497,184 @@ FtlLoadSysInfo:
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC127
 	bl	sftl_printk
-	cbnz	w19, .L1673
+	cbnz	w19, .L1664
 	ldrh	w0, [x21, 2708]
 	cmp	w23, w0
-	beq	.L1673
-	ldrh	w19, [x21, 316]
+	beq	.L1664
+	ldrh	w19, [x21, 308]
 	sxth	w23, w0
-.L1675:
+.L1666:
 	sub	w19, w19, #1
 	sxth	w19, w19
-	b	.L1671
-.L1673:
+	b	.L1662
+.L1664:
 	mov	w0, -1
 	str	w0, [x20]
-.L1672:
+.L1663:
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1675
+	beq	.L1666
 	ldr	x0, [x21, 3464]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1675
+	bne	.L1666
 	ldr	x0, [x21, 3528]
 	ldrh	w1, [x0]
 	mov	w0, 61604
 	cmp	w1, w0
-	bne	.L1675
-.L1676:
+	bne	.L1666
+.L1667:
 	add	x1, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 252]
-	ldrh	w1, [x1, 322]
+	ldrh	w0, [x1, 244]
+	ldrh	w1, [x1, 314]
 	add	x0, x0, 24
 	cmp	x1, x0, lsl 1
-	bcs	.L1679
+	bcs	.L1670
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 1467
+	mov	w2, 1469
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1679:
+.L1670:
 	add	x19, x22, :lo12:.LANCHOR0
 	mov	w2, 48
-	add	x20, x19, 2520
+	add	x20, x19, 2512
 	mov	x0, x20
 	ldr	x1, [x19, 3736]
 	bl	ftl_memcpy
-	ldr	x0, [x19, 80]
-	ldrh	w2, [x19, 252]
+	ldr	x0, [x19, 72]
+	ldrh	w2, [x19, 244]
 	ldr	x1, [x19, 3736]
 	lsl	w2, w2, 1
 	add	x1, x1, 48
 	bl	ftl_memcpy
-	ldrh	w1, [x19, 252]
-	ldr	x0, [x19, 3736]
-	lsr	w2, w1, 3
-	ubfiz	x1, x1, 1, 16
-	add	x1, x1, 48
-	add	w2, w2, 4
-	and	x1, x1, -4
-	add	x1, x0, x1
-	ldr	x0, [x19, 24]
-	bl	ftl_memcpy
-	ldr	w1, [x19, 2520]
+	ldr	w1, [x19, 2512]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1680
-	ldrh	w1, [x19, 2528]
-	ldrb	w2, [x19, 2530]
-	ldrh	w0, [x19, 266]
+	bne	.L1671
+	ldrh	w1, [x19, 2520]
+	ldrb	w2, [x19, 2522]
+	ldrh	w0, [x19, 258]
 	strh	w1, [x19, 2710]
 	cmp	w2, w0
-	bne	.L1680
-	ldrh	w0, [x19, 314]
-	ldrh	w2, [x19, 270]
-	ldrh	w3, [x19, 244]
+	bne	.L1671
+	ldrh	w0, [x19, 306]
+	ldrh	w2, [x19, 262]
+	ldrh	w3, [x19, 236]
 	str	w1, [x19, 3980]
 	mul	w0, w0, w1
 	str	w0, [x19, 2632]
 	mul	w0, w2, w0
-	ldr	w2, [x19, 256]
-	str	w0, [x19, 352]
-	ldrh	w0, [x19, 374]
+	ldr	w2, [x19, 248]
+	str	w0, [x19, 344]
+	ldrh	w0, [x19, 366]
 	cmp	w1, w2
 	sub	w0, w2, w0
 	sub	w0, w0, w1
 	udiv	w0, w0, w3
 	strh	w0, [x19, 2700]
-	bls	.L1681
+	bls	.L1672
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 1489
+	mov	w2, 1491
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1681:
+.L1672:
 	add	x0, x22, :lo12:.LANCHOR0
 	mov	w3, -1
-	ldrh	w2, [x0, 2536]
-	ldrh	w4, [x0, 2534]
-	strh	w4, [x0, 32]
+	ldrh	w2, [x0, 2528]
+	ldrh	w4, [x0, 2526]
+	strh	w4, [x0, 24]
 	lsr	w5, w2, 6
 	and	w2, w2, 63
-	strb	w2, [x0, 38]
-	ldrb	w2, [x0, 2531]
-	strb	w2, [x0, 40]
-	ldrh	w2, [x0, 2538]
-	strh	w2, [x0, 88]
-	ldrh	w2, [x0, 2540]
-	strh	w5, [x0, 34]
-	strh	w3, [x0, 184]
+	strb	w2, [x0, 30]
+	ldrb	w2, [x0, 2523]
+	strb	w2, [x0, 32]
+	ldrh	w2, [x0, 2530]
+	strh	w2, [x0, 80]
+	ldrh	w2, [x0, 2532]
+	strh	w5, [x0, 26]
+	strh	w3, [x0, 176]
 	lsr	w5, w2, 6
 	and	w2, w2, 63
-	strb	w2, [x0, 94]
-	ldrb	w2, [x0, 2532]
-	strb	w2, [x0, 96]
-	ldrh	w2, [x0, 2542]
-	strh	w2, [x0, 136]
-	ldrh	w2, [x0, 2544]
-	strh	w5, [x0, 90]
-	strh	wzr, [x0, 186]
+	strb	w2, [x0, 86]
+	ldrb	w2, [x0, 2524]
+	strb	w2, [x0, 88]
+	ldrh	w2, [x0, 2534]
+	strh	w2, [x0, 128]
+	ldrh	w2, [x0, 2536]
+	strh	w5, [x0, 82]
+	strh	wzr, [x0, 178]
 	lsr	w5, w2, 6
 	and	w2, w2, 63
-	strb	w2, [x0, 142]
-	ldrb	w2, [x0, 2533]
-	strb	w2, [x0, 144]
-	ldr	w2, [x0, 2552]
+	strb	w2, [x0, 134]
+	ldrb	w2, [x0, 2525]
+	strb	w2, [x0, 136]
+	ldr	w2, [x0, 2544]
 	str	w2, [x0, 2676]
-	strb	wzr, [x0, 190]
-	strb	wzr, [x0, 192]
-	strh	w5, [x0, 138]
+	strb	wzr, [x0, 182]
+	strb	wzr, [x0, 184]
+	strh	w5, [x0, 130]
 	str	wzr, [x0, 2636]
 	str	wzr, [x0, 2644]
 	str	wzr, [x0, 2652]
 	str	wzr, [x0, 2656]
 	str	wzr, [x0, 2680]
 	str	wzr, [x0, 2692]
-	ldr	w1, [x0, 2560]
+	ldr	w1, [x0, 2552]
 	ldr	w2, [x0, 2668]
 	str	wzr, [x0, 2648]
 	cmp	w1, w2
-	bls	.L1682
+	bls	.L1673
 	str	w1, [x0, 2668]
-.L1682:
+.L1673:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2556]
+	ldr	w1, [x0, 2548]
 	ldr	w2, [x0, 2672]
 	cmp	w1, w2
-	bls	.L1683
+	bls	.L1674
 	str	w1, [x0, 2672]
-.L1683:
+.L1674:
 	mov	w0, 65535
 	cmp	w4, w0
-	beq	.L1684
+	beq	.L1675
 	add	x0, x22, :lo12:.LANCHOR0
-	add	x0, x0, 32
+	add	x0, x0, 24
 	bl	make_superblock
-.L1684:
+.L1675:
 	add	x1, x22, :lo12:.LANCHOR0
-	add	x0, x1, 88
-	ldrh	w2, [x1, 88]
+	add	x0, x1, 80
+	ldrh	w2, [x1, 80]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1685
+	beq	.L1676
 	bl	make_superblock
-.L1685:
+.L1676:
 	add	x1, x22, :lo12:.LANCHOR0
-	add	x0, x1, 136
-	ldrh	w2, [x1, 136]
+	add	x0, x1, 128
+	ldrh	w2, [x1, 128]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1686
+	beq	.L1677
 	bl	make_superblock
-.L1686:
+.L1677:
 	add	x22, x22, :lo12:.LANCHOR0
 	mov	w1, 65535
-	add	x0, x22, 184
-	ldrh	w2, [x22, 184]
+	add	x0, x22, 176
+	ldrh	w2, [x22, 176]
 	cmp	w2, w1
-	beq	.L1687
+	beq	.L1678
 	bl	make_superblock
-.L1687:
+.L1678:
 	mov	w0, 0
-	b	.L1668
+	b	.L1659
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
 	.global	FtlMapTblRecovery
@@ -11771,14 +11719,14 @@ FtlMapTblRecovery:
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 728
 	str	x0, [x29, 104]
-.L1700:
+.L1691:
 	ldr	w0, [x29, 136]
 	cmp	w20, w0
-	bge	.L1719
+	bge	.L1710
 	ldr	w0, [x29, 116]
 	sxtw	x28, w20
 	cmp	w20, w0
-	bne	.L1701
+	bne	.L1692
 	lsl	x0, x28, 1
 	mov	w26, 0
 	add	x1, x24, x0
@@ -11799,22 +11747,22 @@ FtlMapTblRecovery:
 	add	x28, x21, :lo12:.LANCHOR0
 	add	x27, x28, 3728
 	str	w0, [x19, 48]
-.L1702:
+.L1693:
 	ldr	w0, [x29, 120]
 	add	w0, w0, 1
 	cmp	w26, w0
-	blt	.L1705
-.L1719:
+	blt	.L1696
+.L1710:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	bl	ftl_free_no_use_map_blk
 	ldrh	w1, [x19, 2]
-	ldrh	w0, [x21, 316]
+	ldrh	w0, [x21, 308]
 	cmp	w1, w0
-	bne	.L1707
+	bne	.L1698
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L1707:
+.L1698:
 	mov	x0, x19
 	bl	ftl_map_blk_gc
 	mov	x0, x19
@@ -11827,7 +11775,7 @@ FtlMapTblRecovery:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L1705:
+.L1696:
 	ldr	x0, [x29, 136]
 	mov	w2, 1
 	mov	w1, w2
@@ -11838,15 +11786,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x27, 16]
 	ldr	w8, [x0, 12]
-	cbz	w8, .L1703
+	cbz	w8, .L1694
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1703
-	ldrh	w1, [x28, 322]
+	beq	.L1694
+	ldrh	w1, [x28, 314]
 	ldr	x0, [x27, 8]
 	bl	js_hash
 	cmp	w8, w0
-	beq	.L1703
+	beq	.L1694
 	mov	w5, w0
 	mov	w4, w8
 	mov	w3, w26
@@ -11857,25 +11805,25 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x27]
-.L1703:
+.L1694:
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1704
+	beq	.L1695
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1704
+	bls	.L1695
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1704
+	bne	.L1695
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x27, 4]
 	str	w1, [x23, x0]
-.L1704:
+.L1695:
 	add	w7, w26, 1
 	sxth	w26, w7
-	b	.L1702
-.L1701:
+	b	.L1693
+.L1692:
 	add	x26, x21, :lo12:.LANCHOR0
 	lsl	x2, x28, 1
 	add	x0, x26, 3728
@@ -11884,7 +11832,7 @@ FtlMapTblRecovery:
 	add	x1, x24, x2
 	str	x1, [x29, 120]
 	ldrh	w1, [x24, x2]
-	ldrh	w2, [x26, 316]
+	ldrh	w2, [x26, 308]
 	sub	w2, w2, #1
 	orr	w1, w2, w1, lsl 10
 	mov	w2, 1
@@ -11893,23 +11841,23 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x26, 3728]
 	cmn	w0, #1
-	beq	.L1721
+	beq	.L1712
 	ldrh	w1, [x22]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L1721
+	bne	.L1712
 	ldrh	w1, [x22, 8]
 	mov	w0, 64245
 	cmp	w1, w0
-	beq	.L1709
-.L1721:
+	beq	.L1700
+.L1712:
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	w27, 0
 	add	x28, x26, 3728
-.L1710:
-	ldrh	w0, [x26, 316]
+.L1701:
+	ldrh	w0, [x26, 308]
 	cmp	w27, w0
-	bge	.L1717
+	bge	.L1708
 	ldr	x0, [x29, 120]
 	mov	w2, 1
 	mov	w1, w2
@@ -11920,15 +11868,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x28, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1714
+	cbz	w7, .L1705
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1714
-	ldrh	w1, [x26, 322]
+	beq	.L1705
+	ldrh	w1, [x26, 314]
 	ldr	x0, [x28, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1714
+	beq	.L1705
 	ldr	x1, [x29, 104]
 	mov	w5, w0
 	mov	w4, w7
@@ -11939,49 +11887,49 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x28]
-.L1714:
+.L1705:
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1715
+	beq	.L1706
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1715
+	bls	.L1706
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1715
+	bne	.L1706
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x28, 4]
 	str	w1, [x23, x0]
-.L1715:
+.L1706:
 	add	w6, w27, 1
 	sxth	w27, w6
-	b	.L1710
-.L1709:
+	b	.L1701
+.L1700:
 	mov	w0, 0
-.L1711:
-	ldrh	w1, [x26, 316]
+.L1702:
+	ldrh	w1, [x26, 308]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L1713
-.L1717:
+	blt	.L1704
+.L1708:
 	add	w20, w20, 1
 	sxth	w20, w20
-	b	.L1700
-.L1713:
+	b	.L1691
+.L1704:
 	ldr	x2, [x26, 3464]
 	sbfiz	x3, x0, 3, 32
 	ldrh	w1, [x2, x3]
 	cmp	w25, w1
-	bls	.L1712
+	bls	.L1703
 	add	x2, x2, x3
 	ubfiz	x1, x1, 2, 16
 	ldr	w2, [x2, 4]
 	str	w2, [x23, x1]
-.L1712:
+.L1703:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1711
+	b	.L1702
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
 	.global	FtlLoadVonderInfo
@@ -11992,15 +11940,15 @@ FtlLoadVonderInfo:
 	stp	x29, x30, [sp, -16]!
 	add	x0, x1, 3896
 	add	x29, sp, 0
-	ldrh	w2, [x1, 332]
+	ldrh	w2, [x1, 324]
 	strh	w2, [x0, 10]
 	mov	w2, -3962
 	strh	w2, [x0, 4]
-	ldrh	w2, [x1, 356]
+	ldrh	w2, [x1, 348]
 	strh	w2, [x0, 8]
-	ldrh	w2, [x1, 334]
+	ldrh	w2, [x1, 326]
 	strh	w2, [x0, 6]
-	ldr	x2, [x1, 360]
+	ldr	x2, [x1, 352]
 	str	x2, [x0, 16]
 	ldr	x2, [x1, 3600]
 	str	x2, [x0, 24]
@@ -12038,27 +11986,27 @@ FtlSysBlkInit:
 	stp	x21, x22, [sp, 32]
 	add	x21, x20, :lo12:.LANCHOR0
 	str	x23, [sp, 48]
-	ldrh	w0, [x21, 248]
+	ldrh	w0, [x21, 240]
 	strh	wzr, [x21, 3760]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
 	ldrh	w1, [x21, 2704]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1746
-.L1748:
+	bne	.L1737
+.L1739:
 	mov	w23, -1
-.L1745:
+.L1736:
 	mov	w0, w23
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1746:
+.L1737:
 	bl	FtlLoadSysInfo
 	mov	w23, w0
-	cbnz	w0, .L1748
+	cbnz	w0, .L1739
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12068,88 +12016,88 @@ FtlSysBlkInit:
 	bl	FtlPowerLostRecovery
 	mov	w0, 1
 	bl	FtlUpdateVaildLpn
-	ldr	x1, [x21, 2616]
+	ldr	x1, [x21, 2608]
 	mov	w0, 0
-	ldrh	w3, [x21, 350]
+	ldrh	w3, [x21, 342]
 	add	x1, x1, 4
-.L1749:
+.L1740:
 	cmp	w0, w3
-	bge	.L1754
+	bge	.L1745
 	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1750
-.L1754:
+	tbz	w2, #31, .L1741
+.L1745:
 	add	x2, x20, :lo12:.LANCHOR0
 	cmp	w0, w3
-	ldrh	w1, [x2, 2548]
+	ldrh	w1, [x2, 2540]
 	add	w1, w1, 1
-	strh	w1, [x2, 2548]
-	bge	.L1760
-.L1751:
+	strh	w1, [x2, 2540]
+	bge	.L1751
+.L1742:
 	add	x19, x20, :lo12:.LANCHOR0
-	add	x22, x19, 32
-	add	x21, x19, 88
+	add	x22, x19, 24
+	add	x21, x19, 80
 	mov	x0, x22
 	bl	FtlSuperblockPowerLostFix
 	mov	x0, x21
 	bl	FtlSuperblockPowerLostFix
-	ldrh	w0, [x19, 32]
-	ldr	x2, [x19, 80]
-	ldrh	w3, [x19, 36]
+	ldrh	w0, [x19, 24]
+	ldr	x2, [x19, 72]
+	ldrh	w3, [x19, 28]
 	lsl	x0, x0, 1
 	ldrh	w1, [x2, x0]
 	sub	w1, w1, w3
 	strh	w1, [x2, x0]
-	strb	wzr, [x19, 38]
-	ldrh	w0, [x19, 314]
-	strh	w0, [x19, 34]
-	ldrh	w0, [x19, 88]
-	ldr	x2, [x19, 80]
-	strh	wzr, [x19, 36]
+	strb	wzr, [x19, 30]
+	ldrh	w0, [x19, 306]
+	strh	w0, [x19, 26]
+	ldrh	w0, [x19, 80]
+	ldr	x2, [x19, 72]
+	strh	wzr, [x19, 28]
 	lsl	x0, x0, 1
-	ldrh	w3, [x19, 92]
+	ldrh	w3, [x19, 84]
 	ldrh	w1, [x2, x0]
 	sub	w1, w1, w3
 	strh	w1, [x2, x0]
-	strb	wzr, [x19, 94]
-	ldrh	w0, [x19, 314]
-	strh	w0, [x19, 90]
-	ldrh	w0, [x19, 2550]
-	strh	wzr, [x19, 92]
+	strb	wzr, [x19, 86]
+	ldrh	w0, [x19, 306]
+	strh	w0, [x19, 82]
+	ldrh	w0, [x19, 2542]
+	strh	wzr, [x19, 84]
 	add	w0, w0, 1
-	strh	w0, [x19, 2550]
+	strh	w0, [x19, 2542]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1755
-.L1750:
+	b	.L1746
+.L1741:
 	add	w0, w0, 1
-	b	.L1749
-.L1760:
+	b	.L1740
+.L1751:
 	ldrh	w0, [x2, 3760]
-	cbnz	w0, .L1751
-.L1755:
+	cbnz	w0, .L1742
+.L1746:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w1, 65535
-	add	x21, x19, 32
-	ldrh	w0, [x19, 32]
+	add	x21, x19, 24
+	ldrh	w0, [x19, 24]
 	cmp	w0, w1
-	beq	.L1756
-	ldrh	w1, [x19, 36]
-	cbnz	w1, .L1756
-	ldrh	w1, [x19, 92]
-	add	x20, x19, 88
-	cbnz	w1, .L1756
+	beq	.L1747
+	ldrh	w1, [x19, 28]
+	cbnz	w1, .L1747
+	ldrh	w1, [x19, 84]
+	add	x20, x19, 80
+	cbnz	w1, .L1747
 	bl	FtlGcRefreshBlock
-	ldrh	w0, [x19, 88]
+	ldrh	w0, [x19, 80]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
 	mov	x0, x21
 	bl	allocate_new_data_superblock
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1756:
+.L1747:
 	bl	FtlVpcCheckAndModify
-	b	.L1745
+	b	.L1736
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
@@ -12164,42 +12112,42 @@ ftl_low_format:
 	str	wzr, [x0, 2668]
 	str	wzr, [x0, 2672]
 	str	wzr, [x0, 2684]
-	ldrh	w0, [x0, 248]
+	ldrh	w0, [x0, 240]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1763
+	cbz	w0, .L1754
 	bl	FtlMakeBbt
-.L1763:
+.L1754:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1764:
-	ldrh	w2, [x1, 270]
+.L1755:
+	ldrh	w2, [x1, 262]
 	cmp	w0, w2, lsl 7
-	blt	.L1765
-	ldrh	w21, [x1, 252]
+	blt	.L1756
+	ldrh	w21, [x1, 244]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1766:
-	ldrh	w0, [x22, 254]
+.L1757:
+	ldrh	w0, [x22, 246]
 	cmp	w0, w21
-	bhi	.L1767
-	ldrh	w0, [x22, 244]
+	bhi	.L1758
+	ldrh	w0, [x22, 236]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1768
-.L1772:
+	bge	.L1759
+.L1763:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1769:
-	ldrh	w0, [x19, 252]
+.L1760:
+	ldrh	w0, [x19, 244]
 	cmp	w0, w22
-	bhi	.L1773
-	ldrh	w2, [x19, 244]
-	ldr	w1, [x19, 256]
-	ldrh	w0, [x19, 254]
+	bhi	.L1764
+	ldrh	w2, [x19, 236]
+	ldr	w1, [x19, 248]
+	ldrh	w0, [x19, 246]
 	str	w0, [x19, 3436]
 	udiv	w4, w1, w2
 	ubfx	x3, x4, 5, 16
@@ -12209,77 +12157,73 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1774
+	ble	.L1765
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2632]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2700]
-.L1774:
+.L1765:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 306]
-	cbz	w1, .L1776
+	ldrh	w1, [x0, 298]
+	cbz	w1, .L1767
 	ldrh	w5, [x0, 2700]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2700]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1776
+	bge	.L1767
 	add	w1, w1, 32
 	str	w4, [x0, 2632]
 	add	w1, w3, w1
 	strh	w1, [x0, 2700]
-.L1776:
+.L1767:
 	add	x19, x20, :lo12:.LANCHOR0
-	mov	w22, -1
-	add	x21, x19, 32
+	add	x21, x19, 24
 	ldrh	w1, [x19, 2700]
 	ldr	w0, [x19, 2632]
 	sub	w0, w0, w1
-	ldrh	w1, [x19, 314]
+	ldrh	w1, [x19, 306]
 	mul	w0, w0, w2
 	str	w0, [x19, 3980]
 	mul	w0, w1, w0
-	ldrh	w1, [x19, 270]
+	ldrh	w1, [x19, 262]
 	str	w0, [x19, 2632]
 	mul	w0, w1, w0
-	str	w0, [x19, 352]
+	str	w0, [x19, 344]
 	bl	FtlBbmTblFlush
-	ldr	x0, [x19, 80]
+	ldr	x0, [x19, 72]
 	mov	w1, 0
-	ldrh	w2, [x19, 254]
+	ldrh	w2, [x19, 246]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	mov	w0, 1
-	strb	w0, [x21, 8]
-	ldr	x0, [x19, 24]
-	mov	w1, 255
-	ldrh	w2, [x19, 252]
-	strh	w22, [x19, 184]
-	strh	wzr, [x19, 186]
-	strb	wzr, [x19, 190]
-	lsr	w2, w2, 3
-	strb	wzr, [x19, 192]
+	mov	w0, -1
+	mov	w22, w0
+	mov	w1, 1
+	strh	w0, [x19, 176]
+	strh	wzr, [x19, 178]
+	strb	wzr, [x19, 182]
+	strb	wzr, [x19, 184]
 	strh	wzr, [x21, 2]
 	strb	wzr, [x21, 6]
-	strh	wzr, [x19, 32]
-	str	wzr, [x19, 2628]
-	bl	ftl_memset
-.L1778:
+	strh	wzr, [x19, 24]
+	strb	w1, [x21, 8]
+	str	wzr, [x19, 2620]
+.L1769:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1779
-	ldr	x1, [x19, 80]
+	cbnz	w1, .L1770
+	ldr	x1, [x19, 72]
 	ubfiz	x0, x0, 1, 16
 	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1778
-.L1765:
+	b	.L1769
+.L1756:
 	ldr	x5, [x1, 3488]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -12289,8 +12233,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3496]
 	str	w4, [x2, x3]
-	b	.L1764
-.L1767:
+	b	.L1755
+.L1758:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -12298,27 +12242,27 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1766
-.L1768:
+	b	.L1757
+.L1759:
 	udiv	w0, w19, w0
-	ldr	w19, [x22, 344]
+	ldr	w19, [x22, 336]
 	add	x21, x20, :lo12:.LANCHOR0
 	add	w0, w0, w19
 	bl	FtlSysBlkNumInit
-	ldrh	w0, [x22, 248]
+	ldrh	w0, [x22, 240]
 	bl	FtlFreeSysBlkQueueInit
-	ldrh	w19, [x22, 252]
-.L1770:
-	ldrh	w0, [x21, 254]
+	ldrh	w19, [x22, 244]
+.L1761:
+	ldrh	w0, [x21, 246]
 	cmp	w0, w19
-	bls	.L1772
+	bls	.L1763
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1770
-.L1773:
+	b	.L1761
+.L1764:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -12326,51 +12270,51 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1769
-.L1779:
+	b	.L1760
+.L1770:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
 	add	w1, w1, 1
 	str	w1, [x19, 2668]
-	ldr	x1, [x19, 80]
+	ldr	x1, [x19, 72]
 	ldrh	w2, [x21, 4]
 	strh	w2, [x1, x0]
-	add	x0, x19, 88
-	strh	wzr, [x19, 90]
+	add	x0, x19, 80
+	strh	wzr, [x19, 82]
 	ldrh	w1, [x21]
 	mov	w21, -1
-	strb	wzr, [x19, 94]
+	strb	wzr, [x19, 86]
 	add	w1, w1, 1
-	strh	w1, [x19, 88]
+	strh	w1, [x19, 80]
 	mov	w1, 1
-	strb	w1, [x19, 96]
+	strb	w1, [x19, 88]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1780:
+.L1771:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1781
-	ldr	x1, [x19, 80]
+	cbnz	w1, .L1772
+	ldr	x1, [x19, 72]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1780
-.L1781:
+	b	.L1771
+.L1772:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
 	add	w1, w1, 1
 	str	w1, [x19, 2668]
-	ldr	x1, [x19, 80]
+	ldr	x1, [x19, 72]
 	ldrh	w2, [x20, 4]
 	mov	w20, -1
 	strh	w2, [x1, x0]
-	strh	w20, [x19, 136]
+	strh	w20, [x19, 128]
 	bl	FtlFreeSysBlkQueueOut
 	strh	w0, [x19, 2704]
 	ldr	w0, [x19, 3980]
@@ -12383,11 +12327,11 @@ ftl_low_format:
 	str	w0, [x19, 2668]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1782
+	cbnz	w0, .L1773
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1782:
+.L1773:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12415,25 +12359,25 @@ sftl_init:
 	bl	FtlConstantsInit
 	bl	FtlMemInit
 	bl	FtlVariablesInit
-	ldrh	w0, [x19, 248]
+	ldrh	w0, [x19, 240]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	w0, .L1791
+	cbnz	w0, .L1782
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1791
+	cbnz	w0, .L1782
 	mov	w0, 1
 	str	w0, [x20, #:lo12:.LANCHOR2]
-	ldrh	w0, [x19, 236]
+	ldrh	w0, [x19, 228]
 	cmp	w0, 15
-	bhi	.L1791
+	bhi	.L1782
 	mov	w19, 8129
-.L1790:
+.L1781:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	subs	w19, w19, #1
-	bne	.L1790
-.L1791:
+	bne	.L1781
+.L1782:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -12463,32 +12407,32 @@ FtlWriteToIDB:
 	sub	w24, w23, #1
 	cmp	w24, 63
 	adrp	x20, .LANCHOR0
-	bls	.L1795
+	bls	.L1786
 	cmp	w19, 575
-	bls	.L1796
-.L1795:
+	bls	.L1787
+.L1786:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3984]
-	cbnz	w1, .L1797
-.L1862:
+	cbnz	w1, .L1788
+.L1853:
 	mov	w19, 0
-	b	.L1794
-.L1797:
+	b	.L1785
+.L1788:
 	ldr	x24, [x0, 3992]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
 	ldr	w2, [x24]
 	cmp	w2, w1
-	bne	.L1799
+	bne	.L1790
 	add	x1, x24, 258048
 	ldrh	w2, [x0, 10]
 	add	x1, x1, 2044
 	mov	w0, 0
 	mov	w19, 65023
 	mov	w3, 4097
-.L1803:
+.L1794:
 	ldr	w4, [x1]
-	cbnz	w4, .L1800
+	cbnz	w4, .L1791
 	ldr	w4, [x24, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w4, [x1, 2048]
@@ -12497,13 +12441,13 @@ FtlWriteToIDB:
 	csel	w0, w0, wzr, cc
 	sub	x1, x1, #4
 	cmp	w19, 4096
-	bne	.L1803
+	bne	.L1794
 	mov	w19, 512
-	b	.L1802
-.L1800:
+	b	.L1793
+.L1791:
 	add	w19, w19, 127
 	lsr	w19, w19, 7
-.L1802:
+.L1793:
 	ubfiz	w0, w2, 2, 14
 	add	w21, w19, 4
 	mov	w1, w19
@@ -12518,31 +12462,31 @@ FtlWriteToIDB:
 	bl	sftl_printk
 	lsl	w0, w19, 7
 	str	w0, [x29, 140]
-.L1804:
+.L1795:
 	add	w0, w21, w22
 	str	w0, [x29, 144]
 	cmp	w0, 8
-	bls	.L1826
-	cbnz	w25, .L1827
-.L1799:
+	bls	.L1817
+	cbnz	w25, .L1818
+.L1790:
 	mov	w19, -1
-.L1827:
+.L1818:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	x0, [x20, 3992]
 	str	wzr, [x20, 3984]
 	bl	kfree
 	ldr	x0, [x20, 4000]
 	bl	kfree
-.L1794:
+.L1785:
 	ldr	x1, [x29, 112]
 	mov	w0, w19
 	add	x1, x1, :lo12:__stack_chk_guard
 	ldr	x2, [x29, 232]
 	ldr	x1, [x1]
 	eor	x1, x2, x1
-	cbz	x1, .L1834
+	cbz	x1, .L1825
 	bl	__stack_chk_fail
-.L1826:
+.L1817:
 	ldr	x0, [x27, 4000]
 	mov	w1, 0
 	mov	x2, 512
@@ -12551,16 +12495,16 @@ FtlWriteToIDB:
 	ldr	x1, [x27, 3400]
 	mul	w0, w22, w28
 	str	w0, [x29, 152]
-	cbz	x1, .L1835
+	cbz	x1, .L1826
 	ldr	x0, [x27, 3408]
 	mov	w23, 6
 	cmp	x0, 0
 	mov	w0, 9
 	csel	w23, w23, w0, eq
-.L1805:
+.L1796:
 	mul	w4, w22, w28
 	mov	w26, 0
-.L1806:
+.L1797:
 	ldr	x6, [x27, 3376]
 	mov	w1, w4
 	str	w4, [x29, 148]
@@ -12570,9 +12514,9 @@ FtlWriteToIDB:
 	ldr	w4, [x29, 148]
 	cmp	w21, w26
 	add	w4, w4, w28
-	bhi	.L1806
+	bhi	.L1797
 	cmp	w23, 9
-	bne	.L1837
+	bne	.L1828
 	ldr	x26, [x27, 4000]
 	mov	w2, 1024
 	mov	w1, 0
@@ -12595,26 +12539,26 @@ FtlWriteToIDB:
 	str	wzr, [x26, 12]
 	bl	js_hash
 	str	w0, [x26, 8]
-.L1807:
+.L1798:
 	mul	w0, w21, w28
 	mov	x7, x24
 	mov	x28, 0
 	str	w0, [x29, 148]
-.L1808:
+.L1799:
 	ldr	w0, [x29, 148]
 	mov	w1, w28
 	cmp	w28, w0
-	bcs	.L1815
+	bcs	.L1806
 	cmp	w23, 9
-	bne	.L1809
+	bne	.L1800
 	add	w0, w1, 1
-.L1860:
+.L1851:
 	str	w0, [x29, 168]
 	mov	w0, 61424
 	str	w0, [x29, 172]
 	cmp	w1, 0
 	ccmp	w23, 9, 0, eq
-	bne	.L1811
+	bne	.L1802
 	ldr	x1, [x27, 3400]
 	add	x8, x27, 3368
 	str	x7, [x29, 104]
@@ -12638,8 +12582,8 @@ FtlWriteToIDB:
 	ldr	w1, [x29, 128]
 	ldr	x7, [x29, 104]
 	cmn	w1, #1
-	bne	.L1812
-.L1815:
+	bne	.L1803
+.L1806:
 	ldrb	w0, [x27, 14]
 	str	w0, [x29, 128]
 	ldrh	w0, [x27, 10]
@@ -12648,22 +12592,22 @@ FtlWriteToIDB:
 	str	w1, [x29, 152]
 	add	x1, x27, 3368
 	ldr	x2, [x1, 32]
-	cbnz	x2, .L1813
+	cbnz	x2, .L1804
 	mov	w1, 6
-.L1861:
+.L1852:
 	mul	w0, w21, w0
 	mov	x26, 0
 	str	w0, [x29, 120]
 	str	w1, [x29, 148]
-.L1817:
+.L1808:
 	ldr	w0, [x29, 120]
 	mov	w1, w26
 	cmp	w0, w26
-	bls	.L1821
+	bls	.L1812
 	ldr	w0, [x29, 148]
 	cmp	w26, 0
 	ccmp	w0, 9, 0, eq
-	bne	.L1818
+	bne	.L1809
 	ldr	x1, [x27, 3400]
 	mov	w0, 70
 	blr	x1
@@ -12686,13 +12630,13 @@ FtlWriteToIDB:
 	mov	w1, 18766
 	movk	w1, 0x464e, lsl 16
 	cmp	w0, w1
-	beq	.L1819
-.L1821:
+	beq	.L1810
+.L1812:
 	ldr	x0, [x27, 4000]
 	mov	x1, x24
 	mov	w23, 0
 	mov	x2, x0
-.L1820:
+.L1811:
 	mov	x26, x2
 	mov	x3, x1
 	add	x2, x2, 4
@@ -12700,7 +12644,7 @@ FtlWriteToIDB:
 	ldr	w4, [x3]
 	ldr	w6, [x26]
 	cmp	w6, w4
-	beq	.L1823
+	beq	.L1814
 	mov	x2, 512
 	mov	w1, 0
 	str	x3, [x29, 152]
@@ -12718,19 +12662,19 @@ FtlWriteToIDB:
 	ldr	x2, [x27, 3376]
 	mul	w1, w1, w22
 	blr	x2
-.L1824:
+.L1815:
 	ldr	w22, [x29, 144]
-	b	.L1804
-.L1835:
+	b	.L1795
+.L1826:
 	mov	w23, 6
-	b	.L1805
-.L1837:
+	b	.L1796
+.L1828:
 	mov	x26, 0
-	b	.L1807
-.L1809:
+	b	.L1798
+.L1800:
 	lsl	w0, w1, 2
-	b	.L1860
-.L1811:
+	b	.L1851
+.L1802:
 	ldr	x8, [x27, 3384]
 	add	x3, x29, 168
 	ldr	w0, [x29, 152]
@@ -12740,20 +12684,20 @@ FtlWriteToIDB:
 	mov	w0, 0
 	blr	x8
 	cmn	w0, #1
-	beq	.L1815
+	beq	.L1806
 	ldr	x7, [x29, 128]
 	add	x7, x7, 2048
-.L1812:
+.L1803:
 	add	x28, x28, 1
-	b	.L1808
-.L1813:
+	b	.L1799
+.L1804:
 	ldr	x1, [x1, 40]
 	mov	w23, 6
 	cmp	x1, 0
 	mov	w1, 9
 	csel	w1, w23, w1, eq
-	b	.L1861
-.L1818:
+	b	.L1852
+.L1809:
 	ldr	x7, [x27, 3392]
 	add	x3, x29, 168
 	ldr	w0, [x29, 152]
@@ -12762,27 +12706,27 @@ FtlWriteToIDB:
 	mov	w0, 0
 	blr	x7
 	cmn	w0, #1
-	beq	.L1821
+	beq	.L1812
 	ldr	w0, [x29, 172]
 	mov	w1, 61424
 	cmp	w0, w1
-	bne	.L1821
+	bne	.L1812
 	add	x28, x28, 2048
-.L1819:
+.L1810:
 	add	x26, x26, 1
-	b	.L1817
-.L1823:
+	b	.L1808
+.L1814:
 	ldr	w3, [x29, 140]
 	add	w23, w23, 1
 	cmp	w23, w3
-	bne	.L1820
+	bne	.L1811
 	add	w25, w25, 1
 	cmp	w25, 5
-	bls	.L1824
-	b	.L1827
-.L1796:
+	bls	.L1815
+	b	.L1818
+.L1787:
 	cmp	w19, 64
-	bne	.L1828
+	bne	.L1819
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w0, 262144
 	bl	ftl_malloc
@@ -12792,49 +12736,49 @@ FtlWriteToIDB:
 	mov	x1, x0
 	ldr	x0, [x25, 3992]
 	str	x1, [x25, 4000]
-	cbz	x0, .L1829
-	cbz	x1, .L1829
+	cbz	x0, .L1820
+	cbz	x1, .L1820
 	mov	w1, 1
 	mov	w2, 262144
 	str	w1, [x25, 3984]
 	mov	w1, 0
 	bl	ftl_memset
-.L1828:
+.L1819:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	w0, [x20, 3984]
-	cbz	w0, .L1862
+	cbz	w0, .L1853
 	cmp	w19, 63
 	ldr	x0, [x20, 3992]
-	bhi	.L1831
+	bhi	.L1822
 	mov	w1, 64
 	sub	w19, w1, w19
 	sub	w21, w21, w19
 	ubfiz	x19, x19, 9, 25
 	add	x1, x22, x19
-.L1832:
+.L1823:
 	cmp	w24, 575
-	bls	.L1833
+	bls	.L1824
 	sub	w21, w21, w23
 	add	w21, w21, 576
-.L1833:
+.L1824:
 	lsl	w2, w21, 9
 	bl	ftl_memcpy
-	b	.L1862
-.L1829:
+	b	.L1853
+.L1820:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 752
 	adrp	x0, .LC132
 	add	x0, x0, :lo12:.LC132
 	bl	sftl_printk
-	b	.L1828
-.L1831:
+	b	.L1819
+.L1822:
 	lsl	w2, w19, 7
 	mov	x1, x22
 	sub	w2, w2, #8192
 	add	x0, x0, x2, lsl 2
-	b	.L1832
-.L1834:
+	b	.L1823
+.L1825:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12872,12 +12816,12 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x3, [x2, 4008]
-	cbnz	x3, .L1867
+	cbnz	x3, .L1858
 	str	x0, [x2, 4008]
 	mov	w0, 0
 	str	x1, [x2, 4016]
 	ret
-.L1867:
+.L1858:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12896,38 +12840,38 @@ rk_sftl_vendor_storage_init:
 	stp	x25, x26, [sp, 64]
 	bl	ftl_malloc
 	str	x0, [x22, 4024]
-	cbz	x0, .L1874
+	cbz	x0, .L1865
 	mov	w26, 22084
 	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
 	movk	w26, 0x524b, lsl 16
-.L1872:
+.L1863:
 	ldr	x3, [x22, 4008]
 	mov	w1, 128
 	ldr	x2, [x22, 4024]
 	lsl	w0, w23, 7
 	blr	x3
 	mov	w21, w0
-	cbnz	w0, .L1870
+	cbnz	w0, .L1861
 	ldr	x19, [x22, 4024]
 	ldr	w0, [x19]
 	cmp	w0, w26
-	bne	.L1871
+	bne	.L1862
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1871
+	bne	.L1862
 	cmp	w0, w24
-	bls	.L1871
+	bls	.L1862
 	mov	w25, w23
 	mov	w24, w0
-.L1871:
+.L1862:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1872
-	cbz	w24, .L1873
+	bne	.L1863
+	cbz	w24, .L1864
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
@@ -12935,15 +12879,15 @@ rk_sftl_vendor_storage_init:
 	lsl	w0, w25, 7
 	blr	x3
 	mov	w21, w0
-	cbz	w0, .L1868
-.L1870:
+	cbz	w0, .L1859
+.L1861:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, -1
 	ldr	x0, [x20, 4024]
 	bl	kfree
 	str	xzr, [x20, 4024]
-	b	.L1868
-.L1873:
+	b	.L1859
+.L1864:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -12956,7 +12900,7 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1868:
+.L1859:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12964,9 +12908,9 @@ rk_sftl_vendor_storage_init:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1874:
+.L1865:
 	mov	w21, -12
-	b	.L1868
+	b	.L1859
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -12974,20 +12918,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR0+4024
 	ldr	x4, [x3, #:lo12:.LANCHOR0+4024]
-	cbz	x4, .L1882
+	cbz	x4, .L1873
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1879:
+.L1870:
 	cmp	w3, w6
-	bcc	.L1881
-.L1882:
+	bcc	.L1872
+.L1873:
 	mov	w0, -1
 	ret
-.L1881:
+.L1872:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1880
+	bne	.L1871
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -13005,9 +12949,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1880:
+.L1871:
 	add	w3, w3, 1
-	b	.L1879
+	b	.L1870
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -13023,7 +12967,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 4024]
-	cbz	x19, .L1902
+	cbz	x19, .L1893
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -13032,12 +12976,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1889:
+.L1880:
 	cmp	w20, w3
-	bcc	.L1897
+	bcc	.L1888
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1902
+	bhi	.L1893
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -13057,11 +13001,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1904
-.L1897:
+	b	.L1895
+.L1888:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1890
+	bne	.L1881
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -13069,17 +13013,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1891
+	bls	.L1882
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1902
+	bhi	.L1893
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1892:
+.L1883:
 	cmp	w20, w26
-	bcc	.L1893
+	bcc	.L1884
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -13096,7 +13040,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1904:
+.L1895:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR0
@@ -13115,7 +13059,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1887:
+.L1878:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -13123,7 +13067,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1893:
+.L1884:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -13147,21 +13091,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1892
-.L1891:
+	b	.L1883
+.L1882:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1904
-.L1890:
+	b	.L1895
+.L1881:
 	add	w20, w20, 1
-	b	.L1889
-.L1902:
+	b	.L1880
+.L1893:
 	mov	w0, -1
-	b	.L1887
+	b	.L1878
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -13176,19 +13120,19 @@ rk_sftl_vendor_storage_ioctl:
 	mov	w21, w1
 	str	x23, [sp, 48]
 	bl	ftl_malloc
-	cbz	x0, .L1927
+	cbz	x0, .L1918
 	mov	x19, x0
 	mov	w0, 30209
 	movk	w0, 0x4004, lsl 16
 	cmp	w21, w0
-	beq	.L1908
+	beq	.L1899
 	add	w0, w0, 1
 	cmp	w21, w0
-	beq	.L1909
-.L1943:
+	beq	.L1900
+.L1934:
 	mov	x20, -14
-	b	.L1907
-.L1908:
+	b	.L1898
+.L1899:
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
 	mrs x0, sp_el0
@@ -13196,13 +13140,13 @@ rk_sftl_vendor_storage_ioctl:
 #NO_APP
 	ldr	w2, [x0, 44]
 	ldr	x1, [x0, 8]
-	tbnz	x2, 21, .L1910
+	tbnz	x2, 21, .L1901
 	ldr	x0, [x0]
-	tbz	x0, 26, .L1929
-.L1910:
+	tbz	x0, 26, .L1920
+.L1901:
 	sbfx	x0, x20, 0, 56
 	and	x0, x0, x20
-.L1911:
+.L1902:
 #APP
 // 89 "./arch/arm64/include/asm/uaccess.h" 1
 		adds	x0, x0, 8
@@ -13213,7 +13157,7 @@ rk_sftl_vendor_storage_ioctl:
 
 // 0 "" 2
 #NO_APP
-	cbz	x0, .L1930
+	cbz	x0, .L1921
 	sbfx	x21, x20, 0, 56
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
@@ -13236,36 +13180,36 @@ rk_sftl_vendor_storage_ioctl:
 	mov	x0, x19
 	bl	__arch_copy_from_user
 	mov	x2, x0
-	cbz	x0, .L1913
-.L1912:
+	cbz	x0, .L1904
+.L1903:
 	sub	x0, x19, x2
 	mov	w1, 0
 	add	x0, x0, 8
 	bl	memset
 	mov	x2, x20
 	mov	w1, 256
-.L1945:
+.L1936:
 	adrp	x0, .LC133
 	add	x0, x0, :lo12:.LC133
 	bl	sftl_printk
-	b	.L1943
-.L1929:
+	b	.L1934
+.L1920:
 	mov	x0, x20
-	b	.L1911
-.L1930:
+	b	.L1902
+.L1921:
 	mov	x2, 8
-	b	.L1912
-.L1914:
+	b	.L1903
+.L1905:
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
 	ldr	w0, [x22, 44]
 	ldr	x1, [x22, 8]
-	tbnz	x0, 21, .L1931
+	tbnz	x0, 21, .L1922
 	ldr	x0, [x22]
 	tst	x0, 67108864
 	csel	x0, x21, x20, ne
-.L1915:
+.L1906:
 #APP
 // 89 "./arch/arm64/include/asm/uaccess.h" 1
 		adds	x0, x0, x2
@@ -13276,7 +13220,7 @@ rk_sftl_vendor_storage_ioctl:
 
 // 0 "" 2
 #NO_APP
-	cbz	x0, .L1943
+	cbz	x0, .L1934
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
 	mrs x0, sp_el0
@@ -13296,12 +13240,12 @@ rk_sftl_vendor_storage_ioctl:
 	mov	x20, 0
 	mov	x1, x19
 	bl	__arch_copy_to_user
-	cbz	x0, .L1907
-	b	.L1943
-.L1931:
+	cbz	x0, .L1898
+	b	.L1934
+.L1922:
 	mov	x0, x21
-	b	.L1915
-.L1909:
+	b	.L1906
+.L1900:
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
 	mrs x0, sp_el0
@@ -13309,13 +13253,13 @@ rk_sftl_vendor_storage_ioctl:
 #NO_APP
 	ldr	w2, [x0, 44]
 	ldr	x1, [x0, 8]
-	tbnz	x2, 21, .L1917
+	tbnz	x2, 21, .L1908
 	ldr	x0, [x0]
-	tbz	x0, 26, .L1934
-.L1917:
+	tbz	x0, 26, .L1925
+.L1908:
 	sbfx	x0, x20, 0, 56
 	and	x0, x0, x20
-.L1918:
+.L1909:
 #APP
 // 89 "./arch/arm64/include/asm/uaccess.h" 1
 		adds	x0, x0, 8
@@ -13326,7 +13270,7 @@ rk_sftl_vendor_storage_ioctl:
 
 // 0 "" 2
 #NO_APP
-	cbz	x0, .L1935
+	cbz	x0, .L1926
 	sbfx	x22, x20, 0, 56
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
@@ -13349,72 +13293,72 @@ rk_sftl_vendor_storage_ioctl:
 	mov	x0, x19
 	bl	__arch_copy_from_user
 	mov	x2, x0
-	cbz	x0, .L1920
-.L1919:
+	cbz	x0, .L1911
+.L1910:
 	sub	x0, x19, x2
 	mov	w1, 0
 	add	x0, x0, 8
 	bl	memset
 	mov	x2, x20
 	mov	w1, 276
-	b	.L1945
-.L1934:
+	b	.L1936
+.L1925:
 	mov	x0, x20
-	b	.L1918
-.L1935:
+	b	.L1909
+.L1926:
 	mov	x2, 8
-	b	.L1919
-.L1936:
+	b	.L1910
+.L1927:
 	mov	x0, x22
-	b	.L1922
-.L1938:
+	b	.L1913
+.L1929:
 	mov	x0, x21
-	b	.L1923
-.L1927:
+	b	.L1914
+.L1918:
 	mov	x20, -1
-	b	.L1905
-.L1913:
+	b	.L1896
+.L1904:
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1921
+	bne	.L1912
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_read
 	cmn	w0, #1
-	bne	.L1914
-.L1921:
+	bne	.L1905
+.L1912:
 	mov	x20, -1
-.L1907:
+.L1898:
 	mov	x0, x19
 	bl	kfree
-.L1905:
+.L1896:
 	mov	x0, x20
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1920:
+.L1911:
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1921
+	bne	.L1912
 	ldrh	w21, [x19, 6]
 	cmp	w21, 4087
-	bhi	.L1921
+	bhi	.L1912
 	ldr	w0, [x23, 44]
 	add	w21, w21, 8
 	sxtw	x21, w21
 	ldr	x1, [x23, 8]
-	tbnz	x0, 21, .L1936
+	tbnz	x0, 21, .L1927
 	ldr	x0, [x23]
 	tst	x0, 67108864
 	csel	x0, x22, x20, ne
-.L1922:
+.L1913:
 #APP
 // 89 "./arch/arm64/include/asm/uaccess.h" 1
 		adds	x0, x0, x21
@@ -13425,7 +13369,7 @@ rk_sftl_vendor_storage_ioctl:
 
 // 0 "" 2
 #NO_APP
-	cbz	x0, .L1938
+	cbz	x0, .L1929
 #APP
 // 19 "./arch/arm64/include/asm/current.h" 1
 	mrs x0, sp_el0
@@ -13445,8 +13389,8 @@ rk_sftl_vendor_storage_ioctl:
 	mov	x2, x21
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbz	x0, .L1924
-.L1923:
+	cbz	x0, .L1915
+.L1914:
 	sub	x21, x21, x0
 	mov	x2, x0
 	mov	w1, 0
@@ -13454,14 +13398,14 @@ rk_sftl_vendor_storage_ioctl:
 	bl	memset
 	mov	x2, x20
 	mov	w1, 283
-	b	.L1945
-.L1924:
+	b	.L1936
+.L1915:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1907
+	b	.L1898
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -13628,58 +13572,58 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.5951, %object
-	.size	__func__.5951, 17
-__func__.5951:
+	.type	__func__.5955, %object
+	.size	__func__.5955, 17
+__func__.5955:
 	.string	"INSERT_DATA_LIST"
 	.zero	7
-	.type	__func__.5946, %object
-	.size	__func__.5946, 17
-__func__.5946:
+	.type	__func__.5950, %object
+	.size	__func__.5950, 17
+__func__.5950:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.5982, %object
-	.size	__func__.5982, 17
-__func__.5982:
+	.type	__func__.5986, %object
+	.size	__func__.5986, 17
+__func__.5986:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.6014, %object
-	.size	__func__.6014, 22
-__func__.6014:
+	.type	__func__.6018, %object
+	.size	__func__.6018, 22
+__func__.6018:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.6121, %object
-	.size	__func__.6121, 22
-__func__.6121:
+	.type	__func__.6125, %object
+	.size	__func__.6125, 22
+__func__.6125:
 	.string	"select_l2p_ram_region"
 	.zero	2
 	.type	__func__.6448, %object
 	.size	__func__.6448, 16
 __func__.6448:
 	.string	"make_superblock"
-	.type	__func__.6623, %object
-	.size	__func__.6623, 19
-__func__.6623:
+	.type	__func__.6624, %object
+	.size	__func__.6624, 19
+__func__.6624:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.13467, %object
-	.size	__func__.13467, 17
-__func__.13467:
+	.type	__func__.13501, %object
+	.size	__func__.13501, 17
+__func__.13501:
 	.string	"FlashEraseBlocks"
 	.zero	7
-	.type	__func__.6056, %object
-	.size	__func__.6056, 26
-__func__.6056:
+	.type	__func__.6060, %object
+	.size	__func__.6060, 26
+__func__.6060:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.5561, %object
-	.size	__func__.5561, 11
-__func__.5561:
+	.type	__func__.5565, %object
+	.size	__func__.5565, 11
+__func__.5565:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.5788, %object
-	.size	__func__.5788, 14
-__func__.5788:
+	.type	__func__.5792, %object
+	.size	__func__.5792, 14
+__func__.5792:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
 	.type	__func__.6469, %object
@@ -13687,61 +13631,61 @@ __func__.5788:
 __func__.6469:
 	.string	"SupperBlkListInit"
 	.zero	6
-	.type	__func__.13424, %object
-	.size	__func__.13424, 15
-__func__.13424:
+	.type	__func__.13458, %object
+	.size	__func__.13458, 15
+__func__.13458:
 	.string	"FlashReadPages"
 	.zero	1
-	.type	__func__.6233, %object
-	.size	__func__.6233, 14
-__func__.6233:
+	.type	__func__.6237, %object
+	.size	__func__.6237, 14
+__func__.6237:
 	.string	"FtlScanSysBlk"
 	.zero	2
-	.type	__func__.5831, %object
-	.size	__func__.5831, 11
-__func__.5831:
+	.type	__func__.5835, %object
+	.size	__func__.5835, 11
+__func__.5835:
 	.string	"FtlLoadBbt"
 	.zero	5
-	.type	__func__.13443, %object
-	.size	__func__.13443, 15
-__func__.13443:
+	.type	__func__.13477, %object
+	.size	__func__.13477, 15
+__func__.13477:
 	.string	"FlashProgPages"
 	.zero	1
-	.type	__func__.6595, %object
-	.size	__func__.6595, 25
-__func__.6595:
+	.type	__func__.6596, %object
+	.size	__func__.6596, 25
+__func__.6596:
 	.string	"allocate_data_superblock"
 	.zero	7
-	.type	__func__.6636, %object
-	.size	__func__.6636, 16
-__func__.6636:
+	.type	__func__.6637, %object
+	.size	__func__.6637, 16
+__func__.6637:
 	.string	"update_vpc_list"
-	.type	__func__.6643, %object
-	.size	__func__.6643, 20
-__func__.6643:
+	.type	__func__.6644, %object
+	.size	__func__.6644, 20
+__func__.6644:
 	.string	"decrement_vpc_count"
 	.zero	4
-	.type	__func__.6082, %object
-	.size	__func__.6082, 31
-__func__.6082:
+	.type	__func__.6086, %object
+	.size	__func__.6086, 31
+__func__.6086:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.6096, %object
-	.size	__func__.6096, 16
-__func__.6096:
+	.type	__func__.6100, %object
+	.size	__func__.6100, 16
+__func__.6100:
 	.string	"FtlMapWritePage"
-	.type	__func__.6023, %object
-	.size	__func__.6023, 16
-__func__.6023:
+	.type	__func__.6027, %object
+	.size	__func__.6027, 16
+__func__.6027:
 	.string	"load_l2p_region"
-	.type	__func__.6067, %object
-	.size	__func__.6067, 15
-__func__.6067:
+	.type	__func__.6071, %object
+	.size	__func__.6071, 15
+__func__.6071:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.6138, %object
-	.size	__func__.6138, 9
-__func__.6138:
+	.type	__func__.6142, %object
+	.size	__func__.6142, 9
+__func__.6142:
 	.string	"log2phys"
 	.zero	7
 	.type	__func__.6357, %object
@@ -13753,14 +13697,14 @@ __func__.6357:
 __func__.6391:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.6510, %object
-	.size	__func__.6510, 14
-__func__.6510:
+	.type	__func__.6511, %object
+	.size	__func__.6511, 14
+__func__.6511:
 	.string	"ftl_check_vpc"
 	.zero	2
-	.type	__func__.6211, %object
-	.size	__func__.6211, 15
-__func__.6211:
+	.type	__func__.6215, %object
+	.size	__func__.6215, 15
+__func__.6215:
 	.string	"FtlVpcTblFlush"
 	.zero	1
 	.type	__func__.6494, %object
@@ -13768,29 +13712,29 @@ __func__.6211:
 __func__.6494:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.6616, %object
-	.size	__func__.6616, 29
-__func__.6616:
+	.type	__func__.6617, %object
+	.size	__func__.6617, 29
+__func__.6617:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.5685, %object
-	.size	__func__.5685, 13
-__func__.5685:
+	.type	__func__.5689, %object
+	.size	__func__.5689, 13
+__func__.5689:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.6713, %object
-	.size	__func__.6713, 19
-__func__.6713:
+	.type	__func__.6714, %object
+	.size	__func__.6714, 19
+__func__.6714:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.6826, %object
-	.size	__func__.6826, 23
-__func__.6826:
+	.type	__func__.6827, %object
+	.size	__func__.6827, 23
+__func__.6827:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.5713, %object
-	.size	__func__.5713, 9
-__func__.5713:
+	.type	__func__.5717, %object
+	.size	__func__.5717, 9
+__func__.5717:
 	.string	"FtlWrite"
 	.zero	7
 	.type	__func__.6289, %object
@@ -13803,18 +13747,18 @@ __func__.6289:
 __func__.6311:
 	.string	"FtlMapTblRecovery"
 	.zero	6
-	.type	__func__.13586, %object
-	.size	__func__.13586, 14
-__func__.13586:
+	.type	__func__.13620, %object
+	.size	__func__.13620, 14
+__func__.13620:
 	.string	"FtlWriteToIDB"
 	.zero	2
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 256
+	.size	rk_sftl_vendor_storage_fops, 288
 rk_sftl_vendor_storage_fops:
 	.zero	72
 	.xword	rk_sftl_vendor_storage_ioctl
 	.xword	rk_sftl_vendor_storage_ioctl
-	.zero	168
+	.zero	200
 	.data
 	.align	3
 	.set	.LANCHOR2,. + 0
@@ -13847,10 +13791,6 @@ rkflash_vender_storage_dev:
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
 	.zero	24
-	.type	p_blk_mode_table, %object
-	.size	p_blk_mode_table, 8
-p_blk_mode_table:
-	.zero	8
 	.type	g_active_superblock, %object
 	.size	g_active_superblock, 48
 g_active_superblock:
@@ -14080,6 +14020,10 @@ FtlUpdateVaildLpnCount:
 	.size	g_VaildLpn, 4
 g_VaildLpn:
 	.zero	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 8
+p_blk_mode_table:
+	.zero	8
 	.type	g_MaxLpn, %object
 	.size	g_MaxLpn, 4
 g_MaxLpn:
@@ -14479,7 +14423,7 @@ gp_last_act_superblock:
 	.zero	8
 	.section	.rodata.str1.1,"aMS",@progbits,1
 .LC0:
-	.string	"SFTL version: 5.0.53 20200303"
+	.string	"SFTL version: 5.0.55 20200925"
 .LC1:
 	.string	"\n%s\n"
 .LC2:
-- 
2.35.3

