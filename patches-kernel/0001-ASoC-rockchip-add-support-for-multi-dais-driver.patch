From 8dc69247be6bb3c0715ba97942050eaf0d2546dc Mon Sep 17 00:00:00 2001
From: Sugar Zhang <sugar.zhang@rock-chips.com>
Date: Tue, 29 May 2018 17:41:43 +0800
Subject: [PATCH] ASoC: rockchip: add support for multi-dais driver

This patch add support for combine several audio digital interface
into a mix-dai, for example, we can combine two 8ch i2s into a 16ch dai.
or combine 6ch pdm and 2ch i2s into a 8ch dai.

Change-Id: I4e920c0cdf9c8d954c12b48938a48926cfe403b0
Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
---
 .../bindings/sound/rockchip,multidais.txt     |  39 ++
 sound/soc/rockchip/Kconfig                    |   7 +
 sound/soc/rockchip/Makefile                   |   2 +
 sound/soc/rockchip/rockchip_multi_dais.c      | 361 ++++++++++++
 sound/soc/rockchip/rockchip_multi_dais.h      |  31 +
 sound/soc/rockchip/rockchip_multi_dais_pcm.c  | 537 ++++++++++++++++++
 6 files changed, 977 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/sound/rockchip,multidais.txt
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais.c
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais.h
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais_pcm.c

diff --git a/Documentation/devicetree/bindings/sound/rockchip,multidais.txt b/Documentation/devicetree/bindings/sound/rockchip,multidais.txt
new file mode 100644
index 000000000000..6085aafd8e42
--- /dev/null
+++ b/Documentation/devicetree/bindings/sound/rockchip,multidais.txt
@@ -0,0 +1,39 @@
+ROCKCHIP multi dais driver
+
+Required properties:
+- compatible: "rockchip,multi-dais"
+- dais: The phandle of sub dais, such i2s, pdm etc.
+- capture,channel-mapping: map channels, one for each in dais,
+  capture,channel-mapping = <2 6> means:
+  i2s 2ch + pdm 6ch --> total 8ch capture.
+- playback,channel-mapping: map channels, one for each in dais.
+  playback,channel-mapping = <4 4> means:
+  i2s 4ch + pdm 4ch --> total 8ch playback.
+
+Example:
+
+multi_dais: multi-dais {
+	status = "okay";
+	compatible = "rockchip,multi-dais";
+	dais = <&i2s_8ch_2>, <&pdm_8ch>;
+	capture,channel-mapping = <2 6>;
+	playback,channel-mapping = <4 4>;
+};
+
+&i2s_8ch_2 {
+	status = "okay";
+	rockchip,no-dmaengine;
+};
+
+&pdm_8ch {
+	status = "okay";
+	rockchip,no-dmaengine;
+};
+
+vad-sound {
+	status = "okay";
+	compatible = "rockchip,multicodecs-card";
+	rockchip,card-name = "rockchip,rk3308-vad";
+	rockchip,cpu = <&multi_dais>;
+	rockchip,codec = <&acodec>, <&vad>;
+};
diff --git a/sound/soc/rockchip/Kconfig b/sound/soc/rockchip/Kconfig
index 3d4ba424734a..e9a97eea68a6 100644
--- a/sound/soc/rockchip/Kconfig
+++ b/sound/soc/rockchip/Kconfig
@@ -31,6 +31,13 @@ config SND_SOC_ROCKCHIP_I2S_TDM
 	  Rockchip I2S/TDM device. The device supports up to maximum of
 	  8 channels each for play and record.
 
+config SND_SOC_ROCKCHIP_MULTI_DAIS
+	tristate "Rockchip Multi-DAIS Device Driver"
+	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
+	help
+	  Say Y or M if you want to add support for Multi-dais driver for
+	  Rockchip.
+
 config SND_SOC_ROCKCHIP_PDM
 	tristate "Rockchip PDM Controller Driver"
 	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
diff --git a/sound/soc/rockchip/Makefile b/sound/soc/rockchip/Makefile
index d7e5a59b6dd8..8ddf51a1fb15 100644
--- a/sound/soc/rockchip/Makefile
+++ b/sound/soc/rockchip/Makefile
@@ -1,12 +1,14 @@
 # ROCKCHIP Platform Support
 snd-soc-rockchip-i2s-objs := rockchip_i2s.o
 snd-soc-rockchip-i2s-tdm-objs := rockchip_i2s_tdm.o
+snd-soc-rockchip-multi-dais-objs := rockchip_multi_dais.o rockchip_multi_dais_pcm.o
 snd-soc-rockchip-pdm-objs := rockchip_pdm.o
 snd-soc-rockchip-spdif-objs := rockchip_spdif.o
 snd-soc-rockchip-vad-objs := rockchip_vad.o
 
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S) += snd-soc-rockchip-i2s.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S_TDM) += snd-soc-rockchip-i2s-tdm.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_MULTI_DAIS) += snd-soc-rockchip-multi-dais.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_PDM) += snd-soc-rockchip-pdm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_SPDIF) += snd-soc-rockchip-spdif.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_VAD) += snd-soc-rockchip-vad.o
diff --git a/sound/soc/rockchip/rockchip_multi_dais.c b/sound/soc/rockchip/rockchip_multi_dais.c
new file mode 100644
index 000000000000..f0de141ad3a4
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais.c
@@ -0,0 +1,361 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ALSA SoC Audio Layer - Rockchip Multi-DAIS  driver
+ *
+ * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
+ * Author: Sugar Zhang <sugar.zhang@rock-chips.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/pm_runtime.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "rockchip_multi_dais.h"
+
+#define DAIS_DRV_NAME "rockchip-mdais"
+
+static inline struct rk_mdais_dev *to_info(struct snd_soc_dai *dai)
+{
+	return snd_soc_dai_get_drvdata(dai);
+}
+
+static void hw_refine_channels(struct snd_pcm_hw_params *params,
+			       unsigned int channel)
+{
+	struct snd_interval *c =
+		hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	c->min = channel;
+	c->max = channel;
+}
+
+static int rockchip_mdais_hw_params(struct snd_pcm_substream *substream,
+				    struct snd_pcm_hw_params *params,
+				    struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_pcm_hw_params *cparams;
+	struct snd_soc_dai *child;
+	unsigned int *channel_maps;
+	int ret = 0, i = 0;
+
+	cparams = kmemdup(params, sizeof(*params), GFP_KERNEL);
+	if (IS_ERR(cparams))
+		return PTR_ERR(cparams);
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		channel_maps = mdais->playback_channel_maps;
+	else
+		channel_maps = mdais->capture_channel_maps;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (channel_maps[i])
+			hw_refine_channels(cparams, channel_maps[i]);
+		if (child->driver->ops && child->driver->ops->hw_params) {
+			ret = child->driver->ops->hw_params(substream, cparams, child);
+			if (ret < 0) {
+				dev_err(dai->dev, "ASoC: can't set %s hw params: %d\n",
+					dai->name, ret);
+				return ret;
+			}
+		}
+	}
+
+	kfree(cparams);
+	return 0;
+}
+
+static int rockchip_mdais_trigger(struct snd_pcm_substream *substream,
+				  int cmd, struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_soc_dai *child;
+	int ret = 0, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (child->driver->ops && child->driver->ops->trigger) {
+			ret = child->driver->ops->trigger(substream,
+							  cmd, child);
+			if (ret < 0)
+				return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_set_sysclk(struct snd_soc_dai *cpu_dai, int clk_id,
+				     unsigned int freq, int dir)
+{
+	struct rk_mdais_dev *mdais = to_info(cpu_dai);
+	struct snd_soc_dai *child;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		ret = snd_soc_dai_set_sysclk(child, clk_id, freq, dir);
+		if (ret && ret != -ENOTSUPP)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_set_fmt(struct snd_soc_dai *cpu_dai,
+				  unsigned int fmt)
+{
+	struct rk_mdais_dev *mdais = to_info(cpu_dai);
+	struct snd_soc_dai *child;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		ret = snd_soc_dai_set_fmt(child, fmt);
+		if (ret && ret != -ENOTSUPP)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_dai_probe(struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_soc_dai *child;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (!child->probed && child->driver->probe) {
+			ret = child->driver->probe(child);
+			if (ret < 0) {
+				dev_err(child->dev,
+					"ASoC: failed to probe DAI %s: %d\n",
+					child->name, ret);
+				return ret;
+			}
+			dai->probed = 1;
+		}
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops rockchip_mdais_dai_ops = {
+	.hw_params = rockchip_mdais_hw_params,
+	.set_sysclk = rockchip_mdais_set_sysclk,
+	.set_fmt = rockchip_mdais_set_fmt,
+	.trigger = rockchip_mdais_trigger,
+};
+
+static struct snd_soc_dai_driver rockchip_mdais_dai = {
+	.probe = rockchip_mdais_dai_probe,
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 2,
+		.channels_max = 32,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = (SNDRV_PCM_FMTBIT_S8 |
+			    SNDRV_PCM_FMTBIT_S16_LE |
+			    SNDRV_PCM_FMTBIT_S20_3LE |
+			    SNDRV_PCM_FMTBIT_S24_LE |
+			    SNDRV_PCM_FMTBIT_S32_LE),
+	},
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 2,
+		.channels_max = 32,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = (SNDRV_PCM_FMTBIT_S8 |
+			    SNDRV_PCM_FMTBIT_S16_LE |
+			    SNDRV_PCM_FMTBIT_S20_3LE |
+			    SNDRV_PCM_FMTBIT_S24_LE |
+			    SNDRV_PCM_FMTBIT_S32_LE),
+	},
+	.ops = &rockchip_mdais_dai_ops,
+};
+
+static const struct snd_soc_component_driver rockchip_mdais_component = {
+	.name = DAIS_DRV_NAME,
+};
+
+static const struct of_device_id rockchip_mdais_match[] = {
+	{ .compatible = "rockchip,multi-dais", },
+	{},
+};
+
+static struct snd_soc_dai *rockchip_mdais_find_dai(struct device_node *np)
+{
+	struct snd_soc_dai_link_component dai_component = { 0 };
+
+	dai_component.of_node = np;
+
+	return snd_soc_find_dai(&dai_component);
+}
+
+static int mdais_runtime_suspend(struct device *dev)
+{
+	struct rk_mdais_dev *mdais = dev_get_drvdata(dev);
+	struct snd_soc_dai *child;
+	int i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		pm_runtime_put(child->dev);
+	}
+
+	return 0;
+}
+
+static int mdais_runtime_resume(struct device *dev)
+{
+	struct rk_mdais_dev *mdais = dev_get_drvdata(dev);
+	struct snd_soc_dai *child;
+	int i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		pm_runtime_get_sync(child->dev);
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct platform_device  *sub_pdev;
+	struct rk_mdais_dev *mdais;
+	struct device_node *node;
+	struct rk_dai *dais;
+	unsigned int *map;
+	int count, mp_count;
+	int ret = 0, i = 0;
+
+	mdais = devm_kzalloc(&pdev->dev, sizeof(*mdais), GFP_KERNEL);
+	if (!mdais)
+		return -ENOMEM;
+
+	count = of_count_phandle_with_args(np, "dais", NULL);
+	if (count < 0 || count > MAX_DAIS)
+		return -EINVAL;
+
+	mp_count = of_property_count_u32_elems(np, "capture,channel-mapping");
+	if (mp_count != count)
+		return -EINVAL;
+	mp_count = of_property_count_u32_elems(np, "playback,channel-mapping");
+	if (mp_count != count)
+		return -EINVAL;
+
+	mdais->num_dais = count;
+	dais = devm_kcalloc(&pdev->dev, count,
+			    sizeof(*dais), GFP_KERNEL);
+	if (!dais)
+		return -ENOMEM;
+
+	map = devm_kcalloc(&pdev->dev, count,
+			   sizeof(*map), GFP_KERNEL);
+	if (!map)
+		return -ENOMEM;
+	ret = of_property_read_u32_array(np, "capture,channel-mapping",
+					 map, count);
+	if (ret)
+		return -EINVAL;
+	mdais->capture_channel_maps = map;
+	map = devm_kcalloc(&pdev->dev, count,
+			   sizeof(*map), GFP_KERNEL);
+	if (!map)
+		return -ENOMEM;
+	ret = of_property_read_u32_array(np, "playback,channel-mapping",
+					 map, count);
+	if (ret)
+		return -EINVAL;
+	mdais->playback_channel_maps = map;
+
+	for (i = 0; i < count; i++) {
+		node = of_parse_phandle(np, "dais", i);
+		sub_pdev = of_find_device_by_node(node);
+		if (!sub_pdev) {
+			dev_err(&pdev->dev, "fail to find subnode dev\n");
+			return -ENODEV;
+		}
+		dais[i].of_node = node;
+		dais[i].dev = &sub_pdev->dev;
+		dais[i].dai = rockchip_mdais_find_dai(node);
+		if (!dais[i].dai)
+			return -EPROBE_DEFER;
+	}
+
+	mdais->dais = dais;
+	mdais->dev = &pdev->dev;
+	dev_set_drvdata(&pdev->dev, mdais);
+
+	pm_runtime_enable(&pdev->dev);
+	if (!pm_runtime_enabled(&pdev->dev)) {
+		ret = mdais_runtime_resume(&pdev->dev);
+		if (ret)
+			goto err_pm_disable;
+	}
+
+	ret = devm_snd_soc_register_component(&pdev->dev,
+					      &rockchip_mdais_component,
+					      &rockchip_mdais_dai, 1);
+
+	if (ret) {
+		dev_err(&pdev->dev, "could not register dai: %d\n", ret);
+		goto err_suspend;
+	}
+
+	ret = snd_dmaengine_mpcm_register(mdais);
+	if (ret) {
+		dev_err(&pdev->dev, "Could not register PCM\n");
+		return ret;
+	}
+
+	return 0;
+
+err_suspend:
+	if (!pm_runtime_status_suspended(&pdev->dev))
+		mdais_runtime_resume(&pdev->dev);
+err_pm_disable:
+	pm_runtime_disable(&pdev->dev);
+
+	return ret;
+}
+
+static int rockchip_mdais_remove(struct platform_device *pdev)
+{
+	snd_dmaengine_mpcm_unregister(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+	if (!pm_runtime_status_suspended(&pdev->dev))
+		mdais_runtime_suspend(&pdev->dev);
+
+	return 0;
+}
+
+static const struct dev_pm_ops rockchip_mdais_pm_ops = {
+	SET_RUNTIME_PM_OPS(mdais_runtime_suspend, mdais_runtime_resume,
+			   NULL)
+};
+
+static struct platform_driver rockchip_mdais_driver = {
+	.probe = rockchip_mdais_probe,
+	.remove = rockchip_mdais_remove,
+	.driver = {
+		.name = DAIS_DRV_NAME,
+		.of_match_table = of_match_ptr(rockchip_mdais_match),
+		.pm = &rockchip_mdais_pm_ops,
+	},
+};
+module_platform_driver(rockchip_mdais_driver);
+
+MODULE_DESCRIPTION("ROCKCHIP MULTI-DAIS ASoC Interface");
+MODULE_AUTHOR("Sugar Zhang <sugar.zhang@rock-chips.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DAIS_DRV_NAME);
+MODULE_DEVICE_TABLE(of, rockchip_mdais_match);
diff --git a/sound/soc/rockchip/rockchip_multi_dais.h b/sound/soc/rockchip/rockchip_multi_dais.h
new file mode 100644
index 000000000000..4074b1a36a41
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais.h
@@ -0,0 +1,31 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip MULTI DAIS driver
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+#ifndef _ROCKCHIP_MULTI_DAIS_H
+#define _ROCKCHIP_MULTI_DAIS_H
+
+#define MAX_DAIS 4
+
+struct rk_dai {
+	struct device *dev;
+	struct device_node *of_node;
+	struct snd_soc_dai *dai;
+};
+
+struct rk_mdais_dev {
+	struct device *dev;
+	struct rk_dai *dais;
+	unsigned int *playback_channel_maps;
+	unsigned int *capture_channel_maps;
+	int num_dais;
+};
+
+int snd_dmaengine_mpcm_register(struct rk_mdais_dev *mdais);
+void snd_dmaengine_mpcm_unregister(struct device *dev);
+
+#endif
diff --git a/sound/soc/rockchip/rockchip_multi_dais_pcm.c b/sound/soc/rockchip/rockchip_multi_dais_pcm.c
new file mode 100644
index 000000000000..959756a12b19
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais_pcm.c
@@ -0,0 +1,537 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ALSA SoC Audio Layer - Rockchip Multi-DAIS-PCM driver
+ *
+ * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
+ * Author: Sugar Zhang <sugar.zhang@rock-chips.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/dmaengine.h>
+#include <linux/dma-mapping.h>
+#include <sound/dmaengine_pcm.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "rockchip_multi_dais.h"
+
+struct dmaengine_mpcm {
+	struct rk_mdais_dev *mdais;
+	struct dma_chan *tx_chans[MAX_DAIS];
+	struct dma_chan *rx_chans[MAX_DAIS];
+	struct snd_soc_platform platform;
+};
+
+struct dmaengine_mpcm_runtime_data {
+	struct dma_chan *chans[MAX_DAIS];
+	dma_cookie_t cookies[MAX_DAIS];
+	unsigned int *channel_maps;
+	int num_chans;
+};
+
+static inline struct dmaengine_mpcm_runtime_data *substream_to_prtd(
+	const struct snd_pcm_substream *substream)
+{
+	return substream->runtime->private_data;
+}
+
+static struct dmaengine_mpcm *soc_platform_to_pcm(struct snd_soc_platform *p)
+{
+	return container_of(p, struct dmaengine_mpcm, platform);
+}
+
+static struct dma_chan *to_chan(struct dmaengine_mpcm *pcm,
+				struct snd_pcm_substream *substream)
+{
+	struct dma_chan *chan = NULL;
+	int i;
+
+	for (i = 0; i < pcm->mdais->num_dais; i++) {
+		chan = substream->stream ? pcm->rx_chans[i] : pcm->tx_chans[i];
+		if (chan)
+			break;
+	}
+
+	return chan;
+}
+
+static struct device *dmaengine_dma_dev(struct dmaengine_mpcm *pcm,
+					struct snd_pcm_substream *substream)
+{
+	struct dma_chan *chan;
+
+	chan = to_chan(pcm, substream);
+	if (!chan)
+		return NULL;
+
+	return chan->device->dev;
+}
+
+static void snd_dmaengine_mpcm_set_config_from_dai_data(
+	const struct snd_pcm_substream *substream,
+	const struct snd_dmaengine_dai_dma_data *dma_data,
+	struct dma_slave_config *slave_config)
+{
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		slave_config->dst_addr = dma_data->addr;
+		if (dma_data->addr_width != DMA_SLAVE_BUSWIDTH_UNDEFINED)
+			slave_config->dst_addr_width = dma_data->addr_width;
+	} else {
+		slave_config->src_addr = dma_data->addr;
+		if (dma_data->addr_width != DMA_SLAVE_BUSWIDTH_UNDEFINED)
+			slave_config->src_addr_width = dma_data->addr_width;
+	}
+
+	slave_config->slave_id = dma_data->slave_id;
+}
+
+static void dmaengine_mpcm_dma_complete(void *arg)
+{
+	struct snd_pcm_substream *substream = arg;
+
+	snd_pcm_period_elapsed(substream);
+}
+
+static int dmaengine_mpcm_prepare_and_submit(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct dma_async_tx_descriptor *desc;
+	enum dma_transfer_direction direction;
+	unsigned long flags = DMA_CTRL_ACK;
+	unsigned int *maps = prtd->channel_maps;
+	unsigned int channels = runtime->channels;
+	int offset, buffer_bytes, period_bytes;
+	int i, pb, bb;
+	bool callback = false;
+
+	direction = snd_pcm_substream_to_dma_direction(substream);
+
+	if (!substream->runtime->no_period_wakeup)
+		flags |= DMA_PREP_INTERRUPT;
+
+	offset = 0;
+	period_bytes = snd_pcm_lib_period_bytes(substream);
+	buffer_bytes = snd_pcm_lib_buffer_bytes(substream);
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (!prtd->chans[i])
+			continue;
+		pb = period_bytes;
+		bb = buffer_bytes;
+		if (maps[i]) {
+			pb = pb * maps[i] / channels;
+			bb = bb * maps[i] / channels;
+		}
+		pr_debug("offset: %d, pb: %d, bb: %d\n", offset, pb, bb);
+		desc = dmaengine_prep_dma_cyclic(prtd->chans[i],
+						 runtime->dma_addr + offset,
+						 bb, pb, direction, flags);
+
+		if (!desc)
+			return -ENOMEM;
+		if (!callback) {
+			desc->callback = dmaengine_mpcm_dma_complete;
+			desc->callback_param = substream;
+			callback = true;
+		}
+		prtd->cookies[i] = dmaengine_submit(desc);
+		offset += samples_to_bytes(runtime, maps[i]);
+	}
+
+	return 0;
+}
+
+static void mpcm_dma_async_issue_pending(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dma_async_issue_pending(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_resume(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_resume(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_pause(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_pause(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_terminate_all(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_terminate_all(prtd->chans[i]);
+	}
+}
+
+static int snd_dmaengine_mpcm_trigger(struct snd_pcm_substream *substream, int cmd)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	int ret;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+		ret = dmaengine_mpcm_prepare_and_submit(substream);
+		if (ret)
+			return ret;
+		mpcm_dma_async_issue_pending(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		mpcm_dmaengine_resume(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+		if (runtime->info & SNDRV_PCM_INFO_PAUSE)
+			mpcm_dmaengine_pause(prtd);
+		else
+			mpcm_dmaengine_terminate_all(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		mpcm_dmaengine_pause(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+		mpcm_dmaengine_terminate_all(prtd);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int dmaengine_mpcm_hw_params(struct snd_pcm_substream *substream,
+				    struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct dma_chan *chan;
+	struct snd_dmaengine_dai_dma_data *dma_data;
+	struct dma_slave_config slave_config;
+	snd_pcm_format_t format;
+	unsigned int *maps;
+	int frame_bytes;
+	int ret, num, i, sz;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		maps = pcm->mdais->playback_channel_maps;
+	else
+		maps = pcm->mdais->capture_channel_maps;
+	format = params_format(params);
+	frame_bytes = snd_pcm_format_size(format, params_channels(params));
+	num = pcm->mdais->num_dais;
+
+	for (i = 0; i < num; i++) {
+		memset(&slave_config, 0, sizeof(slave_config));
+		ret = snd_hwparams_to_dma_slave_config(substream, params,
+						       &slave_config);
+		if (ret)
+			return ret;
+
+		dma_data = snd_soc_dai_get_dma_data(pcm->mdais->dais[i].dai,
+						    substream);
+		if (!dma_data)
+			continue;
+
+		snd_dmaengine_mpcm_set_config_from_dai_data(substream,
+							    dma_data,
+							    &slave_config);
+
+		/* refine params for interlace access */
+		sz = snd_pcm_format_size(format, maps[i]);
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			chan = pcm->tx_chans[i];
+			if (sz) {
+				slave_config.dst_maxburst = sz / slave_config.dst_addr_width;
+				slave_config.src_interlace_size = frame_bytes - sz;
+			}
+		} else {
+			chan = pcm->rx_chans[i];
+			if (sz) {
+				slave_config.src_maxburst = sz / slave_config.src_addr_width;
+				slave_config.dst_interlace_size = frame_bytes - sz;
+			}
+		}
+		if (!chan)
+			continue;
+
+		ret = dmaengine_slave_config(chan, &slave_config);
+		if (ret)
+			return ret;
+	}
+	return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(params));
+}
+
+static int dmaengine_mpcm_set_runtime_hwparams(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct device *dma_dev = dmaengine_dma_dev(pcm, substream);
+	struct dma_chan *chan;
+	struct dma_slave_caps dma_caps;
+	struct snd_pcm_hardware hw;
+	u32 addr_widths = BIT(DMA_SLAVE_BUSWIDTH_1_BYTE) |
+			  BIT(DMA_SLAVE_BUSWIDTH_2_BYTES) |
+			  BIT(DMA_SLAVE_BUSWIDTH_4_BYTES);
+	int i, ret;
+
+	chan = to_chan(pcm, substream);
+	if (!chan)
+		return -EINVAL;
+
+	memset(&hw, 0, sizeof(hw));
+	hw.info = SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_MMAP_VALID |
+			SNDRV_PCM_INFO_INTERLEAVED;
+	hw.periods_min = 2;
+	hw.periods_max = UINT_MAX;
+	hw.period_bytes_min = 256;
+	hw.period_bytes_max = dma_get_max_seg_size(dma_dev);
+	hw.buffer_bytes_max = SIZE_MAX;
+
+	ret = dma_get_slave_caps(chan, &dma_caps);
+	if (ret == 0) {
+		if (dma_caps.cmd_pause)
+			hw.info |= SNDRV_PCM_INFO_PAUSE | SNDRV_PCM_INFO_RESUME;
+		if (dma_caps.residue_granularity <= DMA_RESIDUE_GRANULARITY_SEGMENT)
+			hw.info |= SNDRV_PCM_INFO_BATCH;
+
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			addr_widths = dma_caps.dst_addr_widths;
+		else
+			addr_widths = dma_caps.src_addr_widths;
+	}
+
+	/*
+	 * Prepare formats mask for valid/allowed sample types. If the dma does
+	 * not have support for the given physical word size, it needs to be
+	 * masked out so user space can not use the format which produces
+	 * corrupted audio.
+	 * In case the dma driver does not implement the slave_caps the default
+	 * assumption is that it supports 1, 2 and 4 bytes widths.
+	 */
+	for (i = 0; i <= SNDRV_PCM_FORMAT_LAST; i++) {
+		int bits = snd_pcm_format_physical_width(i);
+
+		/* Enable only samples with DMA supported physical widths */
+		switch (bits) {
+		case 8:
+		case 16:
+		case 24:
+		case 32:
+		case 64:
+			if (addr_widths & (1 << (bits / 8)))
+				hw.formats |= (1LL << i);
+			break;
+		default:
+			/* Unsupported types */
+			break;
+		}
+	}
+
+	return snd_soc_set_runtime_hwparams(substream, &hw);
+}
+
+static int dmaengine_mpcm_open(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct dmaengine_mpcm_runtime_data *prtd;
+	int ret, i;
+
+	ret = dmaengine_mpcm_set_runtime_hwparams(substream);
+	if (ret)
+		return ret;
+
+	ret = snd_pcm_hw_constraint_integer(substream->runtime,
+					    SNDRV_PCM_HW_PARAM_PERIODS);
+	if (ret < 0)
+		return ret;
+
+	prtd = kzalloc(sizeof(*prtd), GFP_KERNEL);
+	if (!prtd)
+		return -ENOMEM;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		prtd->channel_maps = pcm->mdais->playback_channel_maps;
+		for (i = 0; i < pcm->mdais->num_dais; i++)
+			prtd->chans[i] = pcm->tx_chans[i];
+	} else {
+		prtd->channel_maps = pcm->mdais->capture_channel_maps;
+		for (i = 0; i < pcm->mdais->num_dais; i++)
+			prtd->chans[i] = pcm->rx_chans[i];
+	}
+
+	prtd->num_chans = pcm->mdais->num_dais;
+	substream->runtime->private_data = prtd;
+
+	return 0;
+}
+
+static int dmaengine_mpcm_new(struct snd_soc_pcm_runtime *rtd)
+{
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct snd_pcm_substream *substream;
+	size_t prealloc_buffer_size;
+	size_t max_buffer_size;
+	unsigned int i;
+	int ret;
+
+	prealloc_buffer_size = 512 * 1024;
+	max_buffer_size = SIZE_MAX;
+
+	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_CAPTURE; i++) {
+		substream = rtd->pcm->streams[i].substream;
+		if (!substream)
+			continue;
+
+		ret = snd_pcm_lib_preallocate_pages(substream,
+						    SNDRV_DMA_TYPE_DEV_IRAM,
+						    dmaengine_dma_dev(pcm, substream),
+						    prealloc_buffer_size,
+						    max_buffer_size);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static snd_pcm_uframes_t dmaengine_mpcm_pointer(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct dma_tx_state state;
+	unsigned int buf_size;
+	unsigned int pos = 0;
+	int i = 0;
+
+	buf_size = snd_pcm_lib_buffer_bytes(substream);
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (!prtd->chans[i])
+			continue;
+		dmaengine_tx_status(prtd->chans[i], prtd->cookies[i], &state);
+		if (state.residue > 0 && state.residue <= buf_size)
+			pos = buf_size - state.residue;
+		break;
+	}
+
+	return bytes_to_frames(substream->runtime, pos);
+}
+
+static int dmaengine_mpcm_close(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+
+	kfree(prtd);
+
+	return 0;
+}
+
+static const struct snd_pcm_ops dmaengine_mpcm_ops = {
+	.open		= dmaengine_mpcm_open,
+	.close		= dmaengine_mpcm_close,
+	.ioctl		= snd_pcm_lib_ioctl,
+	.hw_params	= dmaengine_mpcm_hw_params,
+	.hw_free	= snd_pcm_lib_free_pages,
+	.trigger	= snd_dmaengine_mpcm_trigger,
+	.pointer	= dmaengine_mpcm_pointer,
+};
+
+static const struct snd_soc_platform_driver dmaengine_mpcm_platform = {
+	.component_driver = {
+		.probe_order = SND_SOC_COMP_ORDER_LATE,
+	},
+	.ops		= &dmaengine_mpcm_ops,
+	.pcm_new	= dmaengine_mpcm_new,
+};
+
+static void dmaengine_mpcm_release_chan(struct dmaengine_mpcm *pcm)
+{
+	int i;
+
+	for (i = 0; i < pcm->mdais->num_dais; i++) {
+		if (pcm->tx_chans[i])
+			dma_release_channel(pcm->tx_chans[i]);
+		if (pcm->rx_chans[i])
+			dma_release_channel(pcm->rx_chans[i]);
+	}
+}
+
+int snd_dmaengine_mpcm_register(struct rk_mdais_dev *mdais)
+{
+	struct device *dev;
+	struct device *child;
+	struct dmaengine_mpcm *pcm;
+	struct dma_chan *chan;
+	int ret, i, num;
+
+	dev = mdais->dev;
+	num = mdais->num_dais;
+	pcm = kzalloc(sizeof(*pcm), GFP_KERNEL);
+	if (!pcm)
+		return -ENOMEM;
+
+	pcm->mdais = mdais;
+	for (i = 0; i < num; i++) {
+		child = mdais->dais[i].dev;
+		chan = dma_request_slave_channel_reason(child, "tx");
+		if (IS_ERR(chan))
+			chan = NULL;
+		pcm->tx_chans[i] = chan;
+
+		chan = dma_request_slave_channel_reason(child, "rx");
+		if (IS_ERR(chan))
+			chan = NULL;
+		pcm->rx_chans[i] = chan;
+	}
+
+	ret = snd_soc_add_platform(dev, &pcm->platform,
+				   &dmaengine_mpcm_platform);
+	if (ret)
+		goto err_free_dma;
+
+	return 0;
+
+err_free_dma:
+	dmaengine_mpcm_release_chan(pcm);
+	kfree(pcm);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(snd_dmaengine_mpcm_register);
+
+void snd_dmaengine_mpcm_unregister(struct device *dev)
+{
+	struct snd_soc_platform *platform;
+	struct dmaengine_mpcm *pcm;
+
+	platform = snd_soc_lookup_platform(dev);
+	if (!platform)
+		return;
+
+	pcm = soc_platform_to_pcm(platform);
+
+	snd_soc_remove_platform(platform);
+	dmaengine_mpcm_release_chan(pcm);
+	kfree(pcm);
+}
+EXPORT_SYMBOL_GPL(snd_dmaengine_mpcm_unregister);
+
+MODULE_LICENSE("GPL");
-- 
2.35.3

