From d3887a3c7c043ccd6d3bfd618fb64dd82424626b Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Fri, 18 Aug 2017 11:42:57 +0800
Subject: [PATCH] soc: rockchip: pvtm: reset before get value

Change-Id: I3fd177f267acebb53cebc2516a423f0e9ebbee5e
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/soc/rockchip/rockchip_pvtm.c | 39 ++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/soc/rockchip/rockchip_pvtm.c b/drivers/soc/rockchip/rockchip_pvtm.c
index c7ff7394f945..5d3008ec2d4e 100644
--- a/drivers/soc/rockchip/rockchip_pvtm.c
+++ b/drivers/soc/rockchip/rockchip_pvtm.c
@@ -25,6 +25,7 @@
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
+#include <linux/reset.h>
 #include <linux/slab.h>
 #include <linux/soc/rockchip/pvtm.h>
 
@@ -82,6 +83,7 @@ struct rockchip_pvtm {
 	struct device *dev;
 	struct regmap *grf;
 	struct clk *clk;
+	struct reset_control *rst;
 	const struct rockchip_pvtm_channel *channel;
 	u32 (*get_value)(struct rockchip_pvtm *pvtm, unsigned int sub_ch,
 			 unsigned int time_us);
@@ -166,6 +168,27 @@ late_initcall(pvtm_debug_init);
 
 #endif
 
+static int rockchip_pvtm_reset(struct rockchip_pvtm *pvtm)
+{
+	int ret;
+
+	ret = reset_control_assert(pvtm->rst);
+	if (ret) {
+		dev_err(pvtm->dev, "failed to assert pvtm %d\n", ret);
+		return ret;
+	}
+
+	udelay(2);
+
+	ret = reset_control_deassert(pvtm->rst);
+	if (ret) {
+		dev_err(pvtm->dev, "failed to deassert pvtm %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
 u32 rockchip_get_pvtm_value(unsigned int ch, unsigned int sub_ch,
 			    unsigned int time_us)
 {
@@ -238,6 +261,14 @@ static u32 rockchip_pvtm_get_value(struct rockchip_pvtm *pvtm,
 		return 0;
 	}
 
+	if (pvtm->rst) {
+		ret = rockchip_pvtm_reset(pvtm);
+		if (ret) {
+			clk_disable_unprepare(pvtm->clk);
+			return 0;
+		}
+	}
+
 	regmap_write(pvtm->grf, pvtm->con,
 		     wr_mask_bit(0x1, channel->bit_en, 0x1));
 
@@ -398,6 +429,14 @@ static int rockchip_pvtm_probe(struct platform_device *pdev)
 			return PTR_ERR(pvtm[i].clk);
 		}
 
+		pvtm[i].rst =
+			devm_reset_control_get(dev, info->channels[i].clk_name);
+		if (IS_ERR_OR_NULL(pvtm[i].rst)) {
+			dev_info(dev, "failed to get rst %d %s\n", i,
+				 info->channels[i].clk_name);
+			pvtm[i].rst = NULL;
+		}
+
 		list_add(&pvtm[i].node, &pvtm_list);
 	}
 
-- 
2.35.3

