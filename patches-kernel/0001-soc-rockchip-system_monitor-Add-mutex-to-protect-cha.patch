From 3390f8aa546ed8bccf3115468adb2c825e8fe1c6 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Mon, 13 Jan 2020 22:18:36 +0800
Subject: [PATCH] soc: rockchip: system_monitor: Add mutex to protect changing
 voltage

After change OPP Table according to temperature, the system monitor will
update current voltage, but the cpufreq also will change frequency and
voltage, so a lock should be add between system monitor and cpufreq.
If use interactive governor, policy->rwsem can be used. but if use
ondemand or conservative governor, there isn't a ready-made lock,
so this patch adds a new mutex lock to protect changing voltage.

Change-Id: I5fdad482261ac5c3624048d06b3e761f5abdc6c1
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/cpufreq/cpufreq-dt.c                  |  8 +++++++
 .../soc/rockchip/rockchip_system_monitor.c    | 23 +++++++++++++------
 .../soc/rockchip/rockchip_system_monitor.h    |  9 ++++++++
 3 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/drivers/cpufreq/cpufreq-dt.c b/drivers/cpufreq/cpufreq-dt.c
index 1094b3d8865b..d7e9331a7c8c 100644
--- a/drivers/cpufreq/cpufreq-dt.c
+++ b/drivers/cpufreq/cpufreq-dt.c
@@ -55,7 +55,15 @@ static int set_target(struct cpufreq_policy *policy, unsigned int index)
 	unsigned long freq = policy->freq_table[index].frequency;
 	int ret;
 
+#ifdef CONFIG_ROCKCHIP_SYSTEM_MONITOR
+	if (priv->mdev_info)
+		ret = rockchip_monitor_opp_set_rate(priv->mdev_info,
+						    freq * 1000);
+	else
+		ret = dev_pm_opp_set_rate(priv->cpu_dev, freq * 1000);
+#else
 	ret = dev_pm_opp_set_rate(priv->cpu_dev, freq * 1000);
+#endif
 
 	if (!ret) {
 		arch_set_freq_scale(policy->related_cpus, freq,
diff --git a/drivers/soc/rockchip/rockchip_system_monitor.c b/drivers/soc/rockchip/rockchip_system_monitor.c
index 45d35e386e64..5cd2c3a17c4d 100644
--- a/drivers/soc/rockchip/rockchip_system_monitor.c
+++ b/drivers/soc/rockchip/rockchip_system_monitor.c
@@ -670,11 +670,23 @@ static int monitor_device_parse_dt(struct device *dev,
 	return ret;
 }
 
+int rockchip_monitor_opp_set_rate(struct monitor_dev_info *info,
+				  unsigned long target_freq)
+{
+	int ret = 0;
+
+	mutex_lock(&info->volt_adjust_mutex);
+	ret = dev_pm_opp_set_rate(info->dev, target_freq);
+	mutex_unlock(&info->volt_adjust_mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL(rockchip_monitor_opp_set_rate);
+
 int rockchip_monitor_cpu_low_temp_adjust(struct monitor_dev_info *info,
 					 bool is_low)
 {
 	struct device *dev = info->dev;
-	struct cpufreq_policy *policy;
 	unsigned int cpu = cpumask_any(&info->devp->allowed_cpus);
 
 	if (info->low_limit) {
@@ -685,13 +697,9 @@ int rockchip_monitor_cpu_low_temp_adjust(struct monitor_dev_info *info,
 		cpufreq_update_policy(cpu);
 	}
 
-	policy = cpufreq_cpu_get(cpu);
-	if (!policy)
-		return -ENODEV;
-	down_write(&policy->rwsem);
+	mutex_lock(&info->volt_adjust_mutex);
 	dev_pm_opp_check_rate_volt(dev, false);
-	up_write(&policy->rwsem);
-	cpufreq_cpu_put(policy);
+	mutex_unlock(&info->volt_adjust_mutex);
 
 	return 0;
 }
@@ -1062,6 +1070,7 @@ rockchip_system_monitor_register(struct device *dev,
 	}
 
 	rockchip_system_monitor_wide_temp_init(info);
+	mutex_init(&info->volt_adjust_mutex);
 
 	down_write(&mdev_list_sem);
 	list_add(&info->node, &monitor_dev_list);
diff --git a/include/soc/rockchip/rockchip_system_monitor.h b/include/soc/rockchip/rockchip_system_monitor.h
index f60c07955580..8bc2d2ceaa9c 100644
--- a/include/soc/rockchip/rockchip_system_monitor.h
+++ b/include/soc/rockchip/rockchip_system_monitor.h
@@ -47,6 +47,7 @@ struct temp_opp_table {
  * @devp:		Device-specific system monitor profile
  * @node:		Node in monitor_dev_list
  * @temp_freq_table:	Maximum frequency at different temperature
+ * @volt_adjust_mutex:	A mutex to protect changing voltage.
  * @low_limit:		Limit maximum frequency when low temperature, in Hz
  * @high_limit:		Limit maximum frequency when high temperature, in Hz
  * @max_volt:		Maximum voltage in microvolt
@@ -78,6 +79,7 @@ struct monitor_dev_info {
 	struct monitor_dev_profile *devp;
 	struct list_head node;
 	struct temp_freq_table *temp_freq_table;
+	struct mutex volt_adjust_mutex;
 	unsigned long low_limit;
 	unsigned long high_limit;
 	unsigned long max_volt;
@@ -124,6 +126,8 @@ int rockchip_monitor_suspend_low_temp_adjust(int cpu);
 int
 rockchip_system_monitor_adjust_cdev_state(struct thermal_cooling_device *cdev,
 					  int temp, unsigned long *state);
+int rockchip_monitor_opp_set_rate(struct monitor_dev_info *info,
+				  unsigned long target_freq);
 #else
 static inline struct monitor_dev_info *
 rockchip_system_monitor_register(struct device *dev,
@@ -175,6 +179,11 @@ rockchip_system_monitor_adjust_cdev_state(struct thermal_cooling_device *cdev,
 	return 0;
 }
 
+static inline int rockchip_monitor_opp_set_rate(struct monitor_dev_info *info,
+						unsigned long target_freq)
+{
+	return 0;
+}
 #endif /* CONFIG_ROCKCHIP_SYSTEM_MONITOR */
 
 #endif
-- 
2.35.3

