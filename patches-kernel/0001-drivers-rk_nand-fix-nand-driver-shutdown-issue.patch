From 1fa81ca9bf61b6201a872ff7a65075e40f6ec6b1 Mon Sep 17 00:00:00 2001
From: Zhaoyifeng <zyf@rock-chips.com>
Date: Tue, 6 Feb 2018 10:24:51 +0800
Subject: [PATCH] drivers: rk_nand: fix nand driver shutdown issue

bug: if nand driver initialize fail, shutdown function will
will access undefined address and kernel will abnormal reset.
[    2.793278] [<ffffff80080e738c>] __wake_up_common+0x28/0x90
[    2.793775] [<ffffff80080e761c>] __wake_up+0x3c/0x54
[    2.794231] [<ffffff8008884a88>] rknand_dev_shutdown+0x40/0x64
[    2.794753] [<ffffff8008882ed8>] rknand_shutdown+0x24/0x2c
[    2.795252] [<ffffff800851e0a8>] platform_drv_shutdown+0x20/0x28
[    2.795796] [<ffffff800851a970>] device_shutdown+0x15c/0x1b0
[    2.796308] [<ffffff80080c1ed4>] kernel_restart_prepare+0x34/0x3c
[    2.796850] [<ffffff80080c1fc0>] kernel_restart+0x14/0x5c
[    2.797337] [<ffffff80080c2300>] SyS_reboot+0x198/0x1f0
[    2.797812] [<ffffff80080832f0>] el0_svc_naked+0x24/0x28
[    2.798290] Code: 2a0103f6 2a0203f5 f8408e80 2a0303f7 (f85e8413)
[    2.798856] ---[ end trace dac58c6cbecdc881 ]---
[    2.645282] init: Reboot ending, jumping to kernel
[    2.647526] rknand_shutdown...

Change-Id: I21b946f9ed790170be8024c2d39ed18bc2835994
Signed-off-by: Zhaoyifeng <zyf@rock-chips.com>
---
 drivers/rk_nand/rk_nand_blk.c | 29 +++++++++++++++++++----------
 1 file changed, 19 insertions(+), 10 deletions(-)

diff --git a/drivers/rk_nand/rk_nand_blk.c b/drivers/rk_nand/rk_nand_blk.c
index b4bd08f39d7c..df0d6f0e2d34 100644
--- a/drivers/rk_nand/rk_nand_blk.c
+++ b/drivers/rk_nand/rk_nand_blk.c
@@ -729,6 +729,8 @@ static void nand_blk_unregister(struct nand_blk_ops *nandr)
 {
 	struct list_head *this, *next;
 
+	if (!rk_nand_dev_initialised)
+		return;
 	nandr->quit = 1;
 	wake_up(&nandr->thread_wq);
 	wait_for_completion(&nandr->thread_exit);
@@ -744,6 +746,8 @@ static void nand_blk_unregister(struct nand_blk_ops *nandr)
 
 void rknand_dev_flush(void)
 {
+	if (!rk_nand_dev_initialised)
+		return;
 	rknand_device_lock();
 	rk_ftl_cache_write_back();
 	rknand_device_unlock();
@@ -778,21 +782,23 @@ int __init rknand_dev_init(void)
 
 int rknand_dev_exit(void)
 {
-	if (rk_nand_dev_initialised) {
-		rk_nand_dev_initialised = 0;
-		if (rknand_device_trylock()) {
-			rk_ftl_cache_write_back();
-			rknand_device_unlock();
-		}
-		nand_blk_unregister(&mytr);
-		rk_ftl_de_init();
-		pr_info("nand_blk_dev_exit:OK\n");
+	if (!rk_nand_dev_initialised)
+		return -1;
+	rk_nand_dev_initialised = 0;
+	if (rknand_device_trylock()) {
+		rk_ftl_cache_write_back();
+		rknand_device_unlock();
 	}
+	nand_blk_unregister(&mytr);
+	rk_ftl_de_init();
+	pr_info("nand_blk_dev_exit:OK\n");
 	return 0;
 }
 
 void rknand_dev_suspend(void)
 {
+	if (!rk_nand_dev_initialised)
+		return;
 	pr_info("rk_nand_suspend\n");
 	rk_nand_schedule_enable_config(0);
 	rknand_device_lock();
@@ -801,6 +807,8 @@ void rknand_dev_suspend(void)
 
 void rknand_dev_resume(void)
 {
+	if (!rk_nand_dev_initialised)
+		return;
 	pr_info("rk_nand_resume\n");
 	rk_nand_resume();
 	rknand_device_unlock();
@@ -810,6 +818,8 @@ void rknand_dev_resume(void)
 void rknand_dev_shutdown(void)
 {
 	pr_info("rknand_shutdown...\n");
+	if (!rk_nand_dev_initialised)
+		return;
 	if (mytr.quit == 0) {
 		mytr.quit = 1;
 		wake_up(&mytr.thread_wq);
@@ -818,4 +828,3 @@ void rknand_dev_shutdown(void)
 	}
 	pr_info("rknand_shutdown:OK\n");
 }
-
-- 
2.35.3

