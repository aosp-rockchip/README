From 82dc113a06a029c0f59478d5b196a93db57e6988 Mon Sep 17 00:00:00 2001
From: Liang Chen <cl@rock-chips.com>
Date: Mon, 13 Jan 2020 11:38:18 +0800
Subject: [PATCH] cpufreq: interactive: support touch boost and adjust param

Change-Id: I364f16e9cba19ab8617626d4d96d1c8021dd36a3
Signed-off-by: Liang Chen <cl@rock-chips.com>
---
 drivers/cpufreq/cpufreq_interactive.c | 215 +++++++++++++++++++++++++-
 1 file changed, 214 insertions(+), 1 deletion(-)

diff --git a/drivers/cpufreq/cpufreq_interactive.c b/drivers/cpufreq/cpufreq_interactive.c
index 1ad262ef3de9..1109f87f537d 100644
--- a/drivers/cpufreq/cpufreq_interactive.c
+++ b/drivers/cpufreq/cpufreq_interactive.c
@@ -20,6 +20,9 @@
 #include <linux/cpu.h>
 #include <linux/cpumask.h>
 #include <linux/cpufreq.h>
+#ifdef CONFIG_ARCH_ROCKCHIP
+#include <linux/input.h>
+#endif
 #include <linux/irq_work.h>
 #include <linux/module.h>
 #include <linux/moduleparam.h>
@@ -90,6 +93,14 @@ struct interactive_tunables {
 	int boostpulse_duration;
 	/* End time of boost pulse in ktime converted to usecs */
 	u64 boostpulse_endtime;
+#ifdef CONFIG_ARCH_ROCKCHIP
+	/* Frequency to which a touch boost takes the cpus to */
+	unsigned long touchboost_freq;
+	/* Duration of a touchboost pulse in usecs */
+	int touchboostpulse_duration_val;
+	/* End time of touchboost pulse in ktime converted to usecs */
+	u64 touchboostpulse_endtime;
+#endif
 	bool boosted;
 
 	/*
@@ -162,6 +173,9 @@ static unsigned int default_above_hispeed_delay[] = {
 
 static struct interactive_tunables *global_tunables;
 static DEFINE_MUTEX(global_tunables_lock);
+#ifdef CONFIG_ARCH_ROCKCHIP
+static struct interactive_tunables backup_tunables[2];
+#endif
 
 static inline void update_slack_delay(struct interactive_tunables *tunables)
 {
@@ -404,6 +418,12 @@ static void eval_target_freq(struct interactive_cpu *icpu)
 			new_freq = tunables->hispeed_freq;
 	}
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+	if (now < tunables->touchboostpulse_endtime &&
+	    new_freq < tunables->touchboost_freq) {
+		new_freq = tunables->touchboost_freq;
+	}
+#endif
 	if (policy->cur >= tunables->hispeed_freq &&
 	    new_freq > policy->cur &&
 	    now - icpu->pol_hispeed_val_time < freq_to_above_hispeed_delay(tunables, policy->cur)) {
@@ -1160,6 +1180,183 @@ static void interactive_tunables_free(struct interactive_tunables *tunables)
 	kfree(tunables);
 }
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+static void cpufreq_interactive_input_event(struct input_handle *handle,
+					    unsigned int type,
+					    unsigned int code,
+					    int value)
+{
+	u64 now, endtime;
+	int i;
+	int anyboost = 0;
+	unsigned long flags[2];
+	struct interactive_cpu *pcpu;
+	struct interactive_tunables *tunables;
+
+	if (type != EV_ABS && type != EV_KEY && type != EV_REL)
+		return;
+
+	trace_cpufreq_interactive_boost("touch");
+	spin_lock_irqsave(&speedchange_cpumask_lock, flags[0]);
+
+	now = ktime_to_us(ktime_get());
+	for_each_online_cpu(i) {
+		pcpu = &per_cpu(interactive_cpu, i);
+		if (!down_read_trylock(&pcpu->enable_sem))
+			continue;
+
+		if (!pcpu->ipolicy) {
+			up_read(&pcpu->enable_sem);
+			continue;
+		}
+
+		tunables = pcpu->ipolicy->tunables;
+		if (!tunables) {
+			up_read(&pcpu->enable_sem);
+			continue;
+		}
+
+		endtime = now + tunables->touchboostpulse_duration_val;
+		if (endtime < (tunables->touchboostpulse_endtime +
+			       10 * USEC_PER_MSEC)) {
+			up_read(&pcpu->enable_sem);
+			continue;
+		}
+		tunables->touchboostpulse_endtime = endtime;
+
+		spin_lock_irqsave(&pcpu->target_freq_lock, flags[1]);
+		if (pcpu->target_freq < tunables->touchboost_freq) {
+			pcpu->target_freq = tunables->touchboost_freq;
+			cpumask_set_cpu(i, &speedchange_cpumask);
+			pcpu->loc_hispeed_val_time =
+					ktime_to_us(ktime_get());
+			anyboost = 1;
+		}
+
+		pcpu->floor_freq = tunables->touchboost_freq;
+		pcpu->loc_floor_val_time = ktime_to_us(ktime_get());
+
+		spin_unlock_irqrestore(&pcpu->target_freq_lock, flags[1]);
+
+		up_read(&pcpu->enable_sem);
+	}
+
+	spin_unlock_irqrestore(&speedchange_cpumask_lock, flags[0]);
+
+	if (anyboost)
+		wake_up_process(speedchange_task);
+}
+
+static int cpufreq_interactive_input_connect(struct input_handler *handler,
+					     struct input_dev *dev,
+					     const struct input_device_id *id)
+{
+	struct input_handle *handle;
+	int error;
+
+	handle = kzalloc(sizeof(*handle), GFP_KERNEL);
+	if (!handle)
+		return -ENOMEM;
+
+	handle->dev = dev;
+	handle->handler = handler;
+	handle->name = "cpufreq";
+
+	error = input_register_handle(handle);
+	if (error)
+		goto err2;
+
+	error = input_open_device(handle);
+	if (error)
+		goto err1;
+
+	return 0;
+err1:
+	input_unregister_handle(handle);
+err2:
+	kfree(handle);
+	return error;
+}
+
+static void cpufreq_interactive_input_disconnect(struct input_handle *handle)
+{
+	input_close_device(handle);
+	input_unregister_handle(handle);
+	kfree(handle);
+}
+
+static const struct input_device_id cpufreq_interactive_ids[] = {
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.evbit = { BIT_MASK(EV_ABS) },
+		.absbit = { [BIT_WORD(ABS_MT_POSITION_X)] =
+			BIT_MASK(ABS_MT_POSITION_X) |
+			BIT_MASK(ABS_MT_POSITION_Y) },
+	},
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_KEYBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.keybit = { [BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH) },
+		.absbit = { [BIT_WORD(ABS_X)] =
+			BIT_MASK(ABS_X) | BIT_MASK(ABS_Y) },
+	},
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,
+		.evbit = { BIT_MASK(EV_KEY) },
+	},
+	{/* A mouse like device, at least one button,two relative axes */
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT |
+				INPUT_DEVICE_ID_MATCH_KEYBIT |
+				INPUT_DEVICE_ID_MATCH_RELBIT,
+		.evbit = { BIT_MASK(EV_KEY) | BIT_MASK(EV_REL) },
+		.keybit = { [BIT_WORD(BTN_LEFT)] = BIT_MASK(BTN_LEFT) },
+		.relbit = { BIT_MASK(REL_X) | BIT_MASK(REL_Y) },
+	},
+	{/* A separate scrollwheel */
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT |
+				INPUT_DEVICE_ID_MATCH_RELBIT,
+		.evbit = { BIT_MASK(EV_KEY) | BIT_MASK(EV_REL) },
+		.relbit = { BIT_MASK(REL_WHEEL) },
+	},
+	{ },
+};
+
+static struct input_handler cpufreq_interactive_input_handler = {
+	.event		= cpufreq_interactive_input_event,
+	.connect	= cpufreq_interactive_input_connect,
+	.disconnect	= cpufreq_interactive_input_disconnect,
+	.name		= "cpufreq_interactive",
+	.id_table	= cpufreq_interactive_ids,
+};
+
+static void rockchip_cpufreq_policy_init(struct interactive_policy *ipolicy)
+{
+	struct interactive_tunables *tunables = ipolicy->tunables;
+	struct gov_attr_set attr_set;
+	int index;
+
+	tunables->min_sample_time = 40 * USEC_PER_MSEC;
+	tunables->boostpulse_duration = 40 * USEC_PER_MSEC;
+	if (ipolicy->policy->cpu == 0) {
+		tunables->hispeed_freq = 1008000;
+		tunables->touchboostpulse_duration_val = 500 * USEC_PER_MSEC;
+		tunables->touchboost_freq = 1200000;
+	} else {
+		tunables->hispeed_freq = 816000;
+	}
+
+	index = (ipolicy->policy->cpu == 0) ? 0 : 1;
+	if (!backup_tunables[index].sampling_rate) {
+		backup_tunables[index] = *tunables;
+	} else {
+		attr_set = tunables->attr_set;
+		*tunables = backup_tunables[index];
+		tunables->attr_set = attr_set;
+	}
+}
+#endif
+
 int cpufreq_interactive_init(struct cpufreq_policy *policy)
 {
 	struct interactive_policy *ipolicy;
@@ -1214,6 +1411,9 @@ int cpufreq_interactive_init(struct cpufreq_policy *policy)
 
 	policy->governor_data = ipolicy;
 
+#ifdef CONFIG_ARCH_ROCKCHIP
+	rockchip_cpufreq_policy_init(ipolicy);
+#endif
 	ret = kobject_init_and_add(&tunables->attr_set.kobj,
 				   &interactive_tunables_ktype,
 				   get_governor_parent_kobj(policy), "%s",
@@ -1226,6 +1426,9 @@ int cpufreq_interactive_init(struct cpufreq_policy *policy)
 		idle_notifier_register(&cpufreq_interactive_idle_nb);
 		cpufreq_register_notifier(&cpufreq_notifier_block,
 					  CPUFREQ_TRANSITION_NOTIFIER);
+#ifdef CONFIG_ARCH_ROCKCHIP
+		ret = input_register_handler(&cpufreq_interactive_input_handler);
+#endif
 	}
 
  out:
@@ -1258,12 +1461,22 @@ void cpufreq_interactive_exit(struct cpufreq_policy *policy)
 		cpufreq_unregister_notifier(&cpufreq_notifier_block,
 					    CPUFREQ_TRANSITION_NOTIFIER);
 		idle_notifier_unregister(&cpufreq_interactive_idle_nb);
+#ifdef CONFIG_ARCH_ROCKCHIP
+		input_unregister_handler(&cpufreq_interactive_input_handler);
+#endif
 	}
 
 	count = gov_attr_set_put(&tunables->attr_set, &ipolicy->tunables_hook);
 	policy->governor_data = NULL;
-	if (!count)
+	if (!count) {
+#ifdef CONFIG_ARCH_ROCKCHIP
+		if (policy->cpu == 0)
+			backup_tunables[0] = *tunables;
+		else
+			backup_tunables[1] = *tunables;
+#endif
 		interactive_tunables_free(tunables);
+	}
 
 	mutex_unlock(&global_tunables_lock);
 
-- 
2.35.3

