From 22b9a07e7d26dcadedea72430baddc760f17e68e Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Fri, 28 Jul 2017 15:37:11 +0800
Subject: [PATCH] cpufreq: rockchip: Add support to select voltage according to
 pvtm value

At same voltage and frequency, the greater the PVTM value, the lower
the OPP's voltage. In order to reduce power consumption, it is necessary
to adjust OPP's voltage according to PVTM value.

Change-Id: Ic1d2a74048f6c7d97d92868292f14776ea380d99
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 .../bindings/cpufreq/cpufreq-rockchip.txt     |  63 +++-
 drivers/cpufreq/rockchip-cpufreq.c            | 326 +++++++++++++-----
 2 files changed, 290 insertions(+), 99 deletions(-)

diff --git a/Documentation/devicetree/bindings/cpufreq/cpufreq-rockchip.txt b/Documentation/devicetree/bindings/cpufreq/cpufreq-rockchip.txt
index a2b6cacca92c..de5950fceaa0 100644
--- a/Documentation/devicetree/bindings/cpufreq/cpufreq-rockchip.txt
+++ b/Documentation/devicetree/bindings/cpufreq/cpufreq-rockchip.txt
@@ -1,26 +1,57 @@
 Binding for Rockchip's CPUFreq driver
 ===============================
 
-Rockchip's CPUFreq driver attempts to read SoC version and leakage values
-from eFuse, then supplies the OPP framework with 'prop' and 'supported
-hardware' information respectively. This is based on operating-points-v2,
-but the driver can also create the "cpufreq-dt" platform_device to
-compatibility with operating-points.
+Rockchip's CPUFreq driver attempts to read leakage value from eFuse
+and get frequency count from pvtm, then supplies the OPP framework
+with 'prop' information which is used to determine opp-microvolt-<name>
+property of OPPS when it is parsed by the OPP framework. This is based
+on operating-points-v2, but the driver can also create the "cpufreq-dt"
+platform_device to compatibility with operating-points.
 
 For more information about the expected DT format [See: ../opp/opp.txt].
 
 Optional properties:
 In 'operating-points-v2' table:
-- leakage-voltage-sel: The property is an array of 3-tuples items, and
-               each item consists of leakage and voltage selector like
-               <min-leakage max-leakage volt-selector>.
-               min-leakage: minimum leakage in mA, ranges from 1 to 254
-               max-leakage: maximum leakage in mA, ranges from 1 to 254
-               voltage-selector: a sequence number which is used to math
-               opp-microvolt-L<number> roperty in OPP node
-- nvmem-cells: A phandle to the soc_version and cpu_leakage data provided
-               by a nvmem device.
-- nvmem-cell-names: Should be "soc_version" and "cpu_leakage"
+- rockchip,leakage-voltage-sel: The property is an array of 3-tuples items, and
+                       each item consists of leakage and voltage selector like
+                       <min-leakage max-leakage volt-selector>.
+                       min-leakage: minimum leakage in mA, ranges from 1 to 254.
+                       max-leakage: maximum leakage in mA, ranges from 1 to 254.
+                       voltage-selector: a sequence number which is used to math
+                       opp-microvolt-L<number> roperty in OPP node.
+
+- rockchip,pvtm-voltage-sel: The property is an array of 3-tuples items, and
+                       each item consists of pvtm and voltage selector like
+                       <min-pvtm max-pvtm volt-selector>.
+                       min-pvtm: minimum frequency count in KHz.
+                       max-pvtm: maximum frequency count in KHz.
+                       voltage-selector: a sequence number which is used to math
+                       opp-microvolt-L<number> roperty in OPP node.
+- rockchip,pvtm-freq: Clock frequency in KHz, which is used to set the cpu clock
+                       frequency before get frequency count of pvtm.
+- rockchip,pvtm-volt: Voltage in uV, which is used to set the cpu voltage before
+                       get frequency count of pvtm.
+- rockchip,pvtm-ch: An array of two integers containing pvtm channel and clock
+                       oscillation ring.
+- rockchip,pvtm-sample-time: The number of milliseconds to wait for pvtm to
+                       finish counting.
+- rockchip,pvtm-number: An integer indicating the number of sampling points.
+- rockchip,pvtm-error: An integer indicating the error between the sample
+                       results.
+- rockchip,pvtm-ref-temp: The SoC internal temperature in degree centigrade, the
+                       min-pvtm and max-pvtm in 'leakage-voltage-sel' are
+                       measured at reference temperature.
+- rockchip,pvtm-temp-prop: An array of two integers containing proportional
+                       constants which is used to convert the value at current
+                       temperature to reference temperature. The first one is
+                       used when current temperature is below reference
+                       temperature. Conversely, The second one is used when
+                       current temperature is above reference temperature.
+- rockchip,pvtm-thermal-zone: A thermal zone node containing thermal sensor,
+                       it's used to get the current temperature.
+
+- nvmem-cells: A phandle to cpu_leakage data provided by a nvmem device.
+- nvmem-cell-names: Should be "cpu_leakage"
 
 Examples:
 
@@ -33,7 +64,7 @@ cpus {
 cluster0_opp: opp_table0 {
 	compatible = "operating-points-v2";
 	opp-shared;
-	leakage-voltage-sel = <
+	rockchip,leakage-voltage-sel = <
 		1   24   0
 		25  254  1
 	>;
diff --git a/drivers/cpufreq/rockchip-cpufreq.c b/drivers/cpufreq/rockchip-cpufreq.c
index d4e41ee99670..ce4aca66dbe1 100644
--- a/drivers/cpufreq/rockchip-cpufreq.c
+++ b/drivers/cpufreq/rockchip-cpufreq.c
@@ -25,33 +25,50 @@
 #include <linux/platform_device.h>
 #include <linux/pm_opp.h>
 #include <linux/reboot.h>
+#include <linux/regulator/consumer.h>
 #include <linux/slab.h>
+#include <linux/soc/rockchip/pvtm.h>
+#include <linux/thermal.h>
 
 #include "../clk/rockchip/clk.h"
 
 #define MAX_PROP_NAME_LEN	3
 #define LEAKAGE_TABLE_END	~1
-#define INVALID_VALUE		0xff
+#define LEAKAGE_INVALID		0xff
 
 #define REBOOT_FREQ		816000 /* kHz */
 
-struct leakage_table {
+struct volt_sel_table {
 	int min;
 	int max;
-	int value;
+	int sel;
 };
 
 struct cluster_info {
 	struct list_head list_head;
 	cpumask_t cpus;
 	int leakage;
-	int lkg_volt_sel;
+	int pvtm;
+	int volt_sel;
 	int soc_version;
 	bool set_opp;
 	unsigned int reboot_freq;
 	bool rebooting;
 };
 
+struct pvtm_config {
+	unsigned int freq;
+	unsigned int volt;
+	unsigned int ch[2];
+	unsigned int sample_time;
+	unsigned int num;
+	unsigned int err;
+	unsigned int ref_temp;
+	int temp_prop[2];
+	const char *tz_name;
+	struct thermal_zone_device *tz;
+};
+
 static LIST_HEAD(cluster_info_list);
 
 static struct cluster_info *rockchip_cluster_info_lookup(int cpu)
@@ -66,8 +83,8 @@ static struct cluster_info *rockchip_cluster_info_lookup(int cpu)
 	return NULL;
 }
 
-static int rockchip_efuse_get_one_byte(struct device_node *np, char *porp_name,
-				       int *value)
+static int rockchip_get_efuse_value(struct device_node *np, char *porp_name,
+				    int *value)
 {
 	struct nvmem_cell *cell;
 	unsigned char *buf;
@@ -84,7 +101,7 @@ static int rockchip_efuse_get_one_byte(struct device_node *np, char *porp_name,
 	if (IS_ERR(buf))
 		return PTR_ERR(buf);
 
-	if (buf[0] == INVALID_VALUE)
+	if (buf[0] == LEAKAGE_INVALID)
 		return -EINVAL;
 
 	*value = buf[0];
@@ -102,8 +119,7 @@ static int rk3399_get_soc_version(struct device_node *np, int *soc_version)
 				     "soc_version") < 0)
 		return 0;
 
-	ret = rockchip_efuse_get_one_byte(np, "soc_version",
-					  &version);
+	ret = rockchip_get_efuse_value(np, "soc_version", &version);
 	if (ret)
 		return ret;
 
@@ -120,10 +136,10 @@ static const struct of_device_id rockchip_cpufreq_of_match[] = {
 	{},
 };
 
-static int rockchip_get_leakage_table(struct device_node *np, char *porp_name,
-				      struct leakage_table **table)
+static int rockchip_get_volt_sel_table(struct device_node *np, char *porp_name,
+				       struct volt_sel_table **table)
 {
-	struct leakage_table *lkg_table;
+	struct volt_sel_table *sel_table;
 	const struct property *prop;
 	int count, i;
 
@@ -141,51 +157,43 @@ static int rockchip_get_leakage_table(struct device_node *np, char *porp_name,
 	if (count % 3)
 		return -EINVAL;
 
-	lkg_table = kzalloc(sizeof(*lkg_table) * (count / 3 + 1), GFP_KERNEL);
-	if (!lkg_table)
+	sel_table = kzalloc(sizeof(*sel_table) * (count / 3 + 1), GFP_KERNEL);
+	if (!sel_table)
 		return -ENOMEM;
 
 	for (i = 0; i < count / 3; i++) {
 		of_property_read_u32_index(np, porp_name, 3 * i,
-					   &lkg_table[i].min);
+					   &sel_table[i].min);
 		of_property_read_u32_index(np, porp_name, 3 * i + 1,
-					   &lkg_table[i].max);
+					   &sel_table[i].max);
 		of_property_read_u32_index(np, porp_name, 3 * i + 2,
-					   &lkg_table[i].value);
+					   &sel_table[i].sel);
 	}
-	lkg_table[i].min = 0;
-	lkg_table[i].max = 0;
-	lkg_table[i].value = LEAKAGE_TABLE_END;
+	sel_table[i].min = 0;
+	sel_table[i].max = 0;
+	sel_table[i].sel = LEAKAGE_TABLE_END;
 
-	*table = lkg_table;
+	*table = sel_table;
 
 	return 0;
 }
 
-static int rockchip_get_leakage_sel(struct device_node *np, char *name,
-				    int leakage, int *value)
+static int rockchip_get_volt_sel(struct device_node *np, char *name,
+				 int value, int *sel)
 {
-	struct leakage_table *table;
-	struct property *prop;
+	struct volt_sel_table *table;
 	int i, j = -1, ret;
 
-	if (of_property_match_string(np, "nvmem-cell-names", "cpu_leakage") < 0)
-		return 0;
-
-	prop = of_find_property(np, name, NULL);
-	if (!prop)
-		return 0;
-
-	ret = rockchip_get_leakage_table(np, name, &table);
+	ret = rockchip_get_volt_sel_table(np, name, &table);
 	if (ret)
 		return -EINVAL;
 
-	for (i = 0; table[i].value != LEAKAGE_TABLE_END; i++) {
-		if (leakage >= table[i].min)
+	for (i = 0; table[i].sel != LEAKAGE_TABLE_END; i++) {
+		if (value >= table[i].min)
 			j = i;
 	}
 	if (j != -1)
-		*value = table[j].value;
+		*sel = table[j].sel;
 	else
 		ret = -EINVAL;
 
@@ -194,29 +202,154 @@ static int rockchip_get_leakage_sel(struct device_node *np, char *name,
 	return ret;
 }
 
-static int rockchip_cpufreq_of_parse_dt(int cpu, struct cluster_info *cluster)
+static int rockchip_parse_pvtm_config(struct device_node *np,
+				      struct pvtm_config *pvtm)
+{
+	if (!of_find_property(np, "rockchip,pvtm-voltage-sel", NULL))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-freq", &pvtm->freq))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-volt", &pvtm->volt))
+		return -EINVAL;
+	if (of_property_read_u32_array(np, "rockchip,pvtm-ch", pvtm->ch, 2))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-sample-time",
+				 &pvtm->sample_time))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-number", &pvtm->num))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-error", &pvtm->err))
+		return -EINVAL;
+	if (of_property_read_u32(np, "rockchip,pvtm-ref-temp", &pvtm->ref_temp))
+		return -EINVAL;
+	if (of_property_read_u32_array(np, "rockchip,pvtm-temp-prop",
+				       pvtm->temp_prop, 2))
+		return -EINVAL;
+	if (of_property_read_string(np, "rockchip,pvtm-thermal-zone",
+				    &pvtm->tz_name))
+		return -EINVAL;
+	pvtm->tz = thermal_zone_get_zone_by_name(pvtm->tz_name);
+	if (IS_ERR(pvtm->tz))
+		return -EINVAL;
+	if (!pvtm->tz->ops->get_temp)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int rockchip_get_pvtm_specific_value(struct device *dev,
+					    struct device_node *np,
+					    struct clk *clk,
+					    struct regulator *reg,
+					    int *target_value)
+{
+	struct pvtm_config *pvtm;
+	unsigned long old_freq;
+	unsigned int old_volt;
+	int cur_temp, diff_temp;
+	int cur_value, total_value, avg_value, diff_value;
+	int min_value, max_value;
+	int ret = 0, i = 0, retry = 2;
+
+	pvtm = kzalloc(sizeof(*pvtm), GFP_KERNEL);
+	if (!pvtm)
+		return -ENOMEM;
+
+	ret = rockchip_parse_pvtm_config(np, pvtm);
+	if (ret)
+		goto pvtm_value_out;
+
+	old_freq = clk_get_rate(clk);
+	old_volt = regulator_get_voltage(reg);
+
+	/*
+	 * Set pvtm_freq to the lowest frequency in dts,
+	 * so change frequency first.
+	 */
+	ret = clk_set_rate(clk, pvtm->freq * 1000);
+	if (ret) {
+		dev_err(dev, "Failed to set pvtm freq\n");
+		goto pvtm_value_out;
+	}
+
+	ret = regulator_set_voltage(reg, pvtm->volt, pvtm->volt);
+	if (ret) {
+		dev_err(dev, "Failed to set pvtm_volt\n");
+		goto restore_clk;
+	}
+
+	/* The first few values may be fluctuant, if error is too big, retry*/
+	while (retry--) {
+		total_value = 0;
+		min_value = INT_MAX;
+		max_value = 0;
+
+		for (i = 0; i < pvtm->num; i++) {
+			cur_value = rockchip_get_pvtm_value(pvtm->ch[0],
+							    pvtm->ch[1],
+							    pvtm->sample_time);
+			if (!cur_value)
+				goto resetore_volt;
+			if (cur_value < min_value)
+				min_value = cur_value;
+			if (cur_value > max_value)
+				max_value = cur_value;
+			total_value += cur_value;
+		}
+		if (max_value - min_value < pvtm->err)
+			break;
+	}
+	avg_value = total_value / pvtm->num;
+
+	/*
+	 * As pvtm is influenced by temperature, compute difference between
+	 * current temperature and reference temperature
+	 */
+	pvtm->tz->ops->get_temp(pvtm->tz, &cur_temp);
+	diff_temp = (cur_temp / 1000 - pvtm->ref_temp);
+	diff_value = diff_temp *
+		(diff_temp < 0 ? pvtm->temp_prop[0] : pvtm->temp_prop[1]);
+	*target_value = avg_value + diff_value;
+
+	dev_info(dev, "temp=%d, pvtm=%d (%d + %d)\n",
+		 cur_temp, *target_value, avg_value, diff_value);
+
+resetore_volt:
+	regulator_set_voltage(reg, old_volt, old_volt);
+restore_clk:
+	clk_set_rate(clk, old_freq);
+pvtm_value_out:
+	kfree(pvtm);
+
+	return ret;
+}
+
+static int rockchip_cpufreq_cluster_init(int cpu, struct cluster_info *cluster)
 {
 	int (*get_soc_version)(struct device_node *np, int *soc_version);
 	const struct of_device_id *match;
 	struct device_node *node, *np;
 	struct clk *clk;
+	struct clk *cpu_clk;
+	struct regulator *cpu_reg;
 	struct device *dev;
-	int ret, lkg_scaling_sel = -1;
+	int lkg_volt_sel = -1, pvtm_volt_sel = -1, lkg_scale_sel = -1;
+	int ret;
 
 	dev = get_cpu_device(cpu);
 	if (!dev)
 		return -ENODEV;
 
-	ret = dev_pm_opp_of_get_sharing_cpus(dev, &cluster->cpus);
-	if (ret)
-		return ret;
-
 	np = of_parse_phandle(dev->of_node, "operating-points-v2", 0);
 	if (!np) {
-		dev_info(dev, "OPP-v2 not supported\n");
-		return -EINVAL;
+		dev_warn(dev, "OPP-v2 not supported\n");
+		return -ENOENT;
 	}
 
+	ret = dev_pm_opp_of_get_sharing_cpus(dev, &cluster->cpus);
+	if (ret)
+		return ret;
+
 	cluster->soc_version = -1;
 	node = of_find_node_by_path("/");
 	match = of_match_node(rockchip_cpufreq_of_match, node);
@@ -229,43 +362,68 @@ static int rockchip_cpufreq_of_parse_dt(int cpu, struct cluster_info *cluster)
 		}
 	}
 
-	if (of_property_read_u32(np, "reboot-freq", &cluster->reboot_freq))
+	if (of_property_read_u32(np, "rockchip,reboot-freq",
+				 &cluster->reboot_freq))
 		cluster->reboot_freq = REBOOT_FREQ;
 
-	ret = rockchip_efuse_get_one_byte(np, "cpu_leakage", &cluster->leakage);
-	if (ret)
-		dev_err(dev, "Failed to get cpu_leakage\n");
-	else
+	cluster->volt_sel = -1;
+	ret = rockchip_get_efuse_value(np, "cpu_leakage", &cluster->leakage);
+	if (!ret) {
 		dev_info(dev, "leakage=%d\n", cluster->leakage);
+		ret = rockchip_get_volt_sel(np, "rockchip,leakage-voltage-sel",
+					    cluster->leakage, &lkg_volt_sel);
+		if (!ret) {
+			dev_info(dev, "leakage-sel=%d\n", lkg_volt_sel);
+			cluster->volt_sel = lkg_volt_sel;
+		}
 
-	cluster->lkg_volt_sel = -1;
-	ret = rockchip_get_leakage_sel(np, "leakage-voltage-sel",
-				       cluster->leakage,
-				       &cluster->lkg_volt_sel);
-	if (ret) {
-		dev_err(dev, "Failed to get voltage-sel\n");
-		return ret;
+		ret = rockchip_get_volt_sel(np, "rockchip,leakage-scaling-sel",
+					    cluster->leakage,
+					    &lkg_scale_sel);
+		if (!ret) {
+			dev_info(dev, "scale-sel=%d\n", lkg_scale_sel);
+			clk = of_clk_get_by_name(np, NULL);
+			if (IS_ERR(clk)) {
+				dev_err(dev, "Failed to get opp clk");
+				return PTR_ERR(clk);
+			}
+			ret = rockchip_pll_clk_adaptive_scaling(clk,
+								lkg_scale_sel);
+			if (ret) {
+				dev_err(dev, "Failed to adaptive scaling\n");
+				return ret;
+			}
+		}
 	}
 
-	ret = rockchip_get_leakage_sel(np, "leakage-scaling-sel",
-				       cluster->leakage,
-				       &lkg_scaling_sel);
-	if (ret) {
-		dev_err(dev, "Failed to get scaling-sel\n");
-		return ret;
-	} else if (lkg_scaling_sel >= 0) {
-		clk = of_clk_get_by_name(np, NULL);
-		if (IS_ERR(clk)) {
-			dev_err(dev, "Failed to get opp clk");
-			return PTR_ERR(clk);
-		}
-		ret = rockchip_pll_clk_adaptive_scaling(clk, lkg_scaling_sel);
-		if (ret) {
-			dev_err(dev, "Failed to adaptive scaling\n");
-			return ret;
+	cpu_clk = clk_get(dev, NULL);
+	if (IS_ERR_OR_NULL(cpu_clk)) {
+		dev_err(dev, "Failed to get clk\n");
+		goto parse_dt_out;
+	}
+	cpu_reg = regulator_get_optional(dev, "cpu");
+	if (IS_ERR_OR_NULL(cpu_reg)) {
+		dev_err(dev, "Failed to get cpu_reg\n");
+		goto put_clk;
+	}
+	ret = rockchip_get_pvtm_specific_value(dev, np, cpu_clk, cpu_reg,
+					       &cluster->pvtm);
+	if (!ret) {
+		ret = rockchip_get_volt_sel(np, "rockchip,pvtm-voltage-sel",
+					    cluster->pvtm, &pvtm_volt_sel);
+		if (!ret) {
+			dev_info(dev, "pvtm-sel=%d\n", pvtm_volt_sel);
+			if (cluster->volt_sel < 0 ||
+			    cluster->volt_sel > pvtm_volt_sel)
+				cluster->volt_sel = pvtm_volt_sel;
 		}
 	}
 
+	regulator_put(cpu_reg);
+put_clk:
+	clk_put(cpu_clk);
+parse_dt_out:
+
 	return 0;
 }
 
@@ -279,16 +437,18 @@ static int rockchip_cpufreq_set_opp_info(int cpu, struct cluster_info *cluster)
 	if (!dev)
 		return -ENODEV;
 
-	if (cluster->soc_version != -1 && cluster->lkg_volt_sel != -1)
-		snprintf(name, MAX_PROP_NAME_LEN, "S%d-L%d",
-			 cluster->soc_version,
-			 cluster->lkg_volt_sel);
-	else if (cluster->soc_version != -1 && cluster->lkg_volt_sel == -1)
-		snprintf(name, MAX_PROP_NAME_LEN, "S%d", cluster->soc_version);
-	else if (cluster->soc_version == -1 && cluster->lkg_volt_sel != -1)
-		snprintf(name, MAX_PROP_NAME_LEN, "L%d", cluster->lkg_volt_sel);
-	else
+	if (cluster->soc_version >= 0) {
+		if (cluster->volt_sel >= 0)
+			snprintf(name, MAX_PROP_NAME_LEN, "S%d-L%d",
+				 cluster->soc_version, cluster->volt_sel);
+		else
+			snprintf(name, MAX_PROP_NAME_LEN, "S%d",
+				 cluster->soc_version);
+	} else if (cluster->volt_sel >= 0) {
+		snprintf(name, MAX_PROP_NAME_LEN, "L%d", cluster->volt_sel);
+	} else {
 		return 0;
+	}
 
 	ret = dev_pm_opp_set_prop_name(dev, name);
 	if (ret) {
@@ -296,7 +456,7 @@ static int rockchip_cpufreq_set_opp_info(int cpu, struct cluster_info *cluster)
 		return ret;
 	}
 
-	if (cluster->soc_version != -1) {
+	if (cluster->soc_version >= 0) {
 		version = BIT(cluster->soc_version);
 		ret = dev_pm_opp_set_supported_hw(dev, &version, 1);
 		if (ret) {
@@ -409,7 +569,7 @@ static int __init rockchip_cpufreq_driver_init(void)
 		if (!cluster)
 			return -ENOMEM;
 
-		ret = rockchip_cpufreq_of_parse_dt(cpu, cluster);
+		ret = rockchip_cpufreq_cluster_init(cpu, cluster);
 		if (ret) {
 			if (ret != -ENOENT) {
 				pr_err("Failed to cpu%d parse_dt\n", cpu);
-- 
2.35.3

