From 6ee9b2276fc28abea924a6b11a0a6de957503467 Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Tue, 15 Sep 2020 11:12:30 +0800
Subject: [PATCH] drivers: rkflash: Simplify SPI Nand flash table

1.Simplify SPI Nand flash table
2.Support new SPI Nand devices
3.Format coding styles

Change-Id: Iae7b4c65e646aca5122d47dd9aecad67dbf83f7e
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/sfc_nand.c | 382 ++++++++++++++++++++++++-------------
 drivers/rkflash/sfc_nand.h |  16 +-
 drivers/rkflash/sfc_nor.c  |   6 +-
 3 files changed, 260 insertions(+), 144 deletions(-)

diff --git a/drivers/rkflash/sfc_nand.c b/drivers/rkflash/sfc_nand.c
index 3bd12e6f4532..96d234dbfb2a 100644
--- a/drivers/rkflash/sfc_nand.c
+++ b/drivers/rkflash/sfc_nand.c
@@ -8,85 +8,117 @@
 #include <linux/slab.h>
 
 #include "rkflash_debug.h"
+#include "rk_sftl.h"
 #include "sfc_nand.h"
 
+static u32 sfc_nand_get_ecc_status0(void);
+static u32 sfc_nand_get_ecc_status1(void);
+static u32 sfc_nand_get_ecc_status2(void);
+static u32 sfc_nand_get_ecc_status3(void);
+static u32 sfc_nand_get_ecc_status4(void);
+static u32 sfc_nand_get_ecc_status5(void);
+static u32 sfc_nand_get_ecc_status6(void);
+
 static struct nand_info spi_nand_tbl[] = {
 	/* TC58CVG0S0HxAIx */
-	{0x98C2, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x02, 0xD8, 0x00, 18, 8, 0xFF, 0xFF, {4, 8, 0xff, 0xff}, NULL},
+	{ 0x98C2, 4, 0x40, 1, 1024, 0x00, 18, 0x8, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
 	/* TC58CVG1S0HxAIx */
-	{0x98CB, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x02, 0xD8, 0x00, 19, 8, 0xFF, 0xFF, {4, 8, 0xff, 0xff}, NULL},
+	{ 0x98CB, 4, 0x40, 2, 1024, 0x00, 19, 0x8, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* TC58CVG2S0HRAIJ */
+	{ 0x98ED, 8, 0x40, 1, 2048, 0x0C, 20, 0x8, 0, { 0x04, 0x0C, 0x08, 0x10 }, &sfc_nand_get_ecc_status0 },
+	/* TC58CVG1S3HRAIJ */
+	{ 0x98EB, 4, 0x40, 1, 2048, 0x0C, 19, 0x8, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* TC58CVG0S3HRAIJ */
+	{ 0x98E2, 4, 0x40, 1, 1024, 0x0C, 18, 0x8, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+
 	/* MX35LF1GE4AB */
-	{0xC212, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0, {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
+	{ 0xC212, 4, 0x40, 1, 1024, 0x0C, 18, 0x4, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
 	/* MX35LF2GE4AB */
-	{0xC222, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 4, 0xB0, 0, {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* GD5F1GQ4UAYIG */
-	{0xC8F1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0, {4, 8, 0xff, 0xff}, NULL},
+	{ 0xC222, 4, 0x40, 2, 1024, 0x0C, 19, 0x4, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* MX35LF2GE4AD */
+	{ 0xC226, 4, 0x40, 1, 2048, 0x0C, 19, 0x8, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* MX35LF4GE4AD */
+	{ 0xC237, 8, 0x40, 1, 2048, 0x0C, 19, 0x8, 1, { 0x04, 0x08, 0x14, 0x18 }, &sfc_nand_get_ecc_status0 },
 	/* MT29F1G01ZAC */
-	{0x2C12, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x00, 18, 1, 0xB0, 0, {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* GD5F2GQ40BY2GR */
-	{0xC8D2, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 8, 0xB0, 0, {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp3},
+	{ 0x2C12, 4, 0x40, 1, 1024, 0x00, 18, 0x1, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+
+	/* GD5F1GQ4UAYIG */
+	{ 0xC8F1, 4, 0x40, 1, 1024, 0x0C, 18, 0x8, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
 	/* GD5F1GQ4RB9IGR */
-	{0xC8D1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0, {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp3},
-	/* IS37SML01G1 */
-	{0xC821, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x00, 18, 1, 0xFF, 0xFF, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
+	{ 0xC8D1, 4, 0x40, 1, 1024, 0x0C, 18, 0x8, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status3 },
+	/* GD5F2GQ40BY2GR */
+	{ 0xC8D2, 4, 0x40, 2, 1024, 0x0C, 19, 0x8, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status3 },
+	/* GD5F1GQ5UEYIG */
+	{ 0xC851, 4, 0x40, 1, 1024, 0x4C, 18, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status2 },
+	/* GD5F2GQ5UEYIG */
+	{ 0xC852, 4, 0x40, 1, 2048, 0x4C, 19, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status2 },
+	/* GD5F1GQ4R */
+	{ 0xC8C1, 4, 0x40, 1, 1024, 0x0C, 18, 0x8, 1, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status3 },
+
 	/* W25N01GV */
-	{0xEFAA, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xFF, 0xFF, {4, 20, 36, 0xff}, &sfc_nand_ecc_status_sp1},
+	{ 0xEFAA, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 0, { 0x04, 0x14, 0x24, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* W25N01GW */
+	{ 0xEFBA, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 0, { 0x04, 0x14, 0x24, 0xFF }, &sfc_nand_get_ecc_status1 },
+
 	/* HYF2GQ4UAACAE */
-	{0xC952, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 14, 0xB0, 0, {4, 36, 0xff, 0xff}, NULL},
+	{ 0xC952, 4, 0x40, 1, 2048, 0x4C, 19, 0xE, 1, { 0x04, 0x24, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* HYF1GQ4UDACAE */
+	{ 0xC921, 4, 0x40, 1, 1024, 0x4C, 18, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* HYF1GQ4UPACAE */
+	{ 0xC9A1, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
 	/* HYF2GQ4UDACAE */
-	{0xC922, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 4, 0xB0, 0, {4, 20, 0xff, 0xff}, NULL},
+	{ 0xC922, 4, 0x40, 1, 2048, 0x4C, 19, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
 	/* HYF2GQ4UHCCAE */
-	{0xC95A, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 14, 0xB0, 0, {4, 36, 0xff, 0xff}, NULL},
-	/* HYF1GQ4UDACAE */
-	{0xC921, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 4, 0xB0, 0, {4, 20, 0xff, 0xff}, NULL},
-	/* F50L1G41LB */
-	{0xC801, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xFF, 0xFF, {20, 36, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* XT26G02A */
-	{0x0BE2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 1, 0xB0, 0x0, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp4},
-	/* XT26G01A */
-	{0x0BE1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xB0, 0x0, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp4},
+	{ 0xC95A, 4, 0x40, 1, 2048, 0x4C, 19, 0xE, 1, { 0x04, 0x24, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* HYF4GQ4UAACBE */
+	{ 0xC9D4, 8, 0x40, 1, 2048, 0x4C, 20, 0x4, 1, { 0x20, 0x40, 0x24, 0x44 }, &sfc_nand_get_ecc_status0 },
+
 	/* FS35ND01G-S1 */
-	{0xCDB1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0x0, {16, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp5},
+	{ 0xCDB1, 4, 0x40, 1, 1024, 0x0C, 18, 0x4, 1, { 0x10, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status5 },
 	/* FS35ND02G-S2 */
-	{0xCDA2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x03, 0x02, 0xD8, 0x00, 19, 4, 0xFF, 0xFF, {16, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp5},
-	/* DS35Q1GA-1B */
-	{0xE571, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0x0, {4, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* DS35Q2GA-1B */
-	{0xE572, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 4, 0xB0, 0x0, {4, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* EM73C044SNC-G */
-	{0xD522, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0x0, {4, 20, 0xff, 0xff}, NULL},
-	/* EM73D044SNB-G */
-	{0xD520, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 8, 0xB0, 0x0, {4, 20, 0xff, 0xff}, NULL},
-	/* ATO25D1GA */
-	{0x9B12, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x40, 18, 1, 0xB0, 0x0, {20, 36, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* XT26G02B */
-	{0x0BF2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 1, 0xB0, 0x0, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp5},
-	/* XT26G01B */
-	{0x0BF1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xB0, 0x0, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp4},
-	/* HYF4GQ4UAACBE */
-	{0xC9D4, 8, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 20, 4, 0xB0, 0, {32, 64, 36, 68}, NULL},
-	/* FM25S01 */
-	{0xA1A1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xB0, 0, {0, 4, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
-	/* HYF1GQ4UPACAE */
-	{0xC9A1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 4, 0xB0, 0, {4, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp1},
+	{ 0xCDA2, 4, 0x40, 1, 2048, 0x00, 19, 0x4, 0, { 0x10, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status5 },
+	/* FS35ND01G-S1Y2 */
+	{ 0xCDEA, 4, 0x40, 1, 1024, 0x4C, 18, 0x4, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* FS35ND02G-S3Y2 */
+	{ 0xCDEB, 4, 0x40, 1, 2048, 0x4C, 19, 0x4, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* FS35ND04G-S2Y2 1*4096 */
+	{ 0xCDEC, 4, 0x40, 2, 2048, 0x4C, 20, 0x4, 0, { 0x04, 0x08, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+
+	/* DS35Q1GA-IB */
+	{ 0xE571, 4, 0x40, 1, 1024, 0x0C, 18, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* DS35Q2GA-IB */
+	{ 0xE572, 4, 0x40, 2, 1024, 0x0C, 19, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* DS35M1GA-1B */
+	{ 0xE521, 4, 0x40, 1, 1024, 0x0C, 18, 0x4, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+
+	/* EM73C044VCC-H */
+	{ 0xD522, 4, 0x40, 1, 1024, 0x0C, 18, 0x8, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
+	/* EM73D044VCE-H */
+	{ 0xD520, 4, 0x40, 1, 2048, 0x0C, 19, 0x8, 1, { 0x04, 0x14, 0xFF, 0xFF }, &sfc_nand_get_ecc_status0 },
 	/* EM73E044SNA-G */
-	{0xD503, 8, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 20, 8, 0xB0, 0, {4, 40, 8, 44}, NULL},
-	/* GD5F1GQ5UEYIG */
-	{0xC851, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 4, 0xB0, 0, {4, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp2},
-	/* GD5F2GQ5UEYIG */
-	{0xC852, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 4, 0xB0, 0, {4, 20, 0xff, 0xff}, &sfc_nand_ecc_status_sp2},
-	/* GD5F1GQ4R */
-	{0xC8C1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0,  {4, 8, 0xff, 0xff}, &sfc_nand_ecc_status_sp3},
-	/* TC58CVG2S0HRAIJ */
-	{0x98ED, 8, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 20, 8, 0xFF, 0xFF, {4, 12, 8, 16}, NULL},
-	/* TC58CVG1S3HRAIJ */
-	{0x98EB, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 8, 0xFF, 0xFF, {4, 8, 0xff, 0xff}, NULL},
-	/* TC58CVG0S3HRAIJ */
-	{0x98E2, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xFF, 0xFF, {4, 8, 0xff, 0xff}, NULL},
+	{ 0xD503, 8, 0x40, 1, 2048, 0x4C, 20, 0x8, 1, { 0x04, 0x28, 0x08, 0x2C }, &sfc_nand_get_ecc_status0 },
+
+	/* XT26G02A */
+	{ 0x0BE2, 4, 0x40, 1, 2048, 0x4C, 19, 0x1, 1, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status4 },
+	/* XT26G01A */
+	{ 0x0BE1, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 1, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status4 },
 	/* XT26G04A */
-	{0x0BE3, 4, 128, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 20, 1, 0xB0, 0x0, {8, 12, 0xff, 0xff}, &sfc_nand_ecc_status_sp4},
-	/* FS35ND01G-S1Y2 */
-	{0xCDEA, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 4, 0xFF, 0xFF, {4, 8, 12, 16}, &sfc_nand_ecc_status_sp1},
+	{ 0x0BE3, 4, 0x80, 1, 2048, 0x4C, 20, 0x1, 1, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status4 },
+	/* XT26G01B */
+	{ 0x0BF1, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 1, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status4 },
+	/* XT26G02B */
+	{ 0x0BF2, 4, 0x40, 1, 2048, 0x4C, 19, 0x1, 1, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status5 },
+	/* XT26G02E */
+	{ 0x2C24, 4, 0x40, 1, 2048, 0x4C, 19, 0x1, 1, { 0x20, 0x24, 0xFF, 0xFF }, &sfc_nand_get_ecc_status6 },
+
+	/* IS37SML01G1 */
+	{ 0xC821, 4, 0x40, 1, 1024, 0x00, 18, 0x1, 0, { 0x08, 0x0C, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* F50L1G41LB */
+	{ 0xC801, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 0, { 0x14, 0x24, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* ATO25D1GA */
+	{ 0x9B12, 4, 0x40, 1, 1024, 0x40, 18, 0x1, 1, { 0x14, 0x24, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
+	/* FM25S01 */
+	{ 0xA1A1, 4, 0x40, 1, 1024, 0x4C, 18, 0x1, 1, { 0x00, 0x04, 0xFF, 0xFF }, &sfc_nand_get_ecc_status1 },
 };
 
 static struct nand_info *p_nand_info;
@@ -102,6 +134,7 @@ static struct nand_info *sfc_nand_get_info(u8 *nand_id)
 		if (spi_nand_tbl[i].id == id)
 			return &spi_nand_tbl[i];
 	}
+
 	return NULL;
 }
 
@@ -152,8 +185,10 @@ static int sfc_nand_read_feature(u8 addr, u8 *data)
 	*data = 0;
 
 	ret = sfc_request(&op, addr, data, 1);
+
 	if (ret != SFC_OK)
 		return ret;
+
 	return SFC_OK;
 }
 
@@ -173,8 +208,10 @@ static int sfc_nand_write_feature(u32 addr, u8 status)
 	op.sfctrl.b.addrbits = 8;
 
 	ret = sfc_request(&op, addr, &status, 1);
+
 	if (ret != SFC_OK)
 		return ret;
+
 	return ret;
 }
 
@@ -185,28 +222,34 @@ static int sfc_nand_wait_busy(u8 *data, int timeout)
 	u8 status;
 
 	*data = 0;
+
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return ret;
+
 		*data = status;
+
 		if (!(status & (1 << 0)))
 			return SFC_OK;
+
 		sfc_delay(1);
 	}
+
 	return SFC_NAND_WAIT_TIME_OUT;
 }
 
 /*
  * ecc default:
  * ecc bits: 0xC0[4,5]
- * 0x00, No bit errors were detected
- * 0x01, Bit errors were detected and corrected.
- * 0x10, Multiple bit errors were detected and not corrected.
- * 0x11, Bits errors were detected and corrected, bit error count
+ * 0b00, No bit errors were detected
+ * 0b01, Bit errors were detected and corrected.
+ * 0b10, Multiple bit errors were detected and not corrected.
+ * 0b11, Bits errors were detected and corrected, bit error count
  *	exceed the bit flip detection threshold
  */
-static u32 sfc_nand_ecc_status(void)
+static u32 sfc_nand_get_ecc_status0(void)
 {
 	u32 ret;
 	u32 i;
@@ -216,10 +259,13 @@ static u32 sfc_nand_ecc_status(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
@@ -238,13 +284,13 @@ static u32 sfc_nand_ecc_status(void)
 /*
  * ecc spectial type1:
  * ecc bits: 0xC0[4,5]
- * 0x00, No bit errors were detected;
- * 0x01, Bits errors were detected and corrected, bit error count
+ * 0b00, No bit errors were detected;
+ * 0b01, Bits errors were detected and corrected, bit error count
  *	may reach the bit flip detection threshold;
- * 0x10, Multiple bit errors were detected and not corrected;
- * 0x11, Reserved.
+ * 0b10, Multiple bit errors were detected and not corrected;
+ * 0b11, Reserved.
  */
-u32 sfc_nand_ecc_status_sp1(void)
+static u32 sfc_nand_get_ecc_status1(void)
 {
 	u32 ret;
 	u32 i;
@@ -254,10 +300,13 @@ u32 sfc_nand_ecc_status_sp1(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
@@ -276,14 +325,14 @@ u32 sfc_nand_ecc_status_sp1(void)
 /*
  * ecc spectial type2:
  * ecc bits: 0xC0[4,5] 0xF0[4,5]
- * [0x0000, 0x0011], No bit errors were detected;
- * [0x0100, 0x0111], Bit errors were detected and corrected. Not
+ * [0b0000, 0b0011], No bit errors were detected;
+ * [0b0100, 0b0111], Bit errors were detected and corrected. Not
  *	reach Flipping Bits;
- * [0x1000, 0x1011], Multiple bit errors were detected and
+ * [0b1000, 0b1011], Multiple bit errors were detected and
  *	not corrected.
- * [0x1100, 0x1111], reserved.
+ * [0b1100, 0b1111], reserved.
  */
-u32 sfc_nand_ecc_status_sp2(void)
+static u32 sfc_nand_get_ecc_status2(void)
 {
 	u32 ret;
 	u32 i;
@@ -293,18 +342,24 @@ u32 sfc_nand_ecc_status_sp2(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		ret = sfc_nand_read_feature(0xF0, &status1);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
 	ecc = (status >> 4) & 0x03;
 	ecc = (ecc << 2) | ((status1 >> 4) & 0x03);
+
 	if (ecc < 7)
 		ret = SFC_NAND_ECC_OK;
 	else if (ecc == 7)
@@ -318,15 +373,15 @@ u32 sfc_nand_ecc_status_sp2(void)
 /*
  * ecc spectial type3:
  * ecc bits: 0xC0[4,5] 0xF0[4,5]
- * [0x0000, 0x0011], No bit errors were detected;
- * [0x0100, 0x0111], Bit errors were detected and corrected. Not
+ * [0b0000, 0b0011], No bit errors were detected;
+ * [0b0100, 0b0111], Bit errors were detected and corrected. Not
  *	reach Flipping Bits;
- * [0x1000, 0x1011], Multiple bit errors were detected and
+ * [0b1000, 0b1011], Multiple bit errors were detected and
  *	not corrected.
- * [0x1100, 0x1111], Bit error count equals the bit flip
+ * [0b1100, 0b1111], Bit error count equals the bit flip
  *	detectio nthreshold
  */
-u32 sfc_nand_ecc_status_sp3(void)
+static u32 sfc_nand_get_ecc_status3(void)
 {
 	u32 ret;
 	u32 i;
@@ -336,18 +391,24 @@ u32 sfc_nand_ecc_status_sp3(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		ret = sfc_nand_read_feature(0xF0, &status1);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
 	ecc = (status >> 4) & 0x03;
 	ecc = (ecc << 2) | ((status1 >> 4) & 0x03);
+
 	if (ecc < 7)
 		ret = SFC_NAND_ECC_OK;
 	else if (ecc == 7 || ecc >= 12)
@@ -361,16 +422,16 @@ u32 sfc_nand_ecc_status_sp3(void)
 /*
  * ecc spectial type4:
  * ecc bits: 0xC0[2,5]
- * [0x0000], No bit errors were detected;
- * [0x0001, 0x0111], Bit errors were detected and corrected. Not
+ * [0b0000], No bit errors were detected;
+ * [0b0001, 0b0111], Bit errors were detected and corrected. Not
  *	reach Flipping Bits;
- * [0x1000], Multiple bit errors were detected and
+ * [0b1000], Multiple bit errors were detected and
  *	not corrected.
- * [0x1100], Bit error count equals the bit flip
+ * [0b1100], Bit error count equals the bit flip
  *	detectionthreshold
  * else, reserved
  */
-u32 sfc_nand_ecc_status_sp4(void)
+static u32 sfc_nand_get_ecc_status4(void)
 {
 	u32 ret;
 	u32 i;
@@ -380,14 +441,18 @@ u32 sfc_nand_ecc_status_sp4(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
 	ecc = (status >> 2) & 0x0f;
+
 	if (ecc < 7)
 		ret = SFC_NAND_ECC_OK;
 	else if (ecc == 7 || ecc == 12)
@@ -401,16 +466,16 @@ u32 sfc_nand_ecc_status_sp4(void)
 /*
  * ecc spectial type5:
  * ecc bits: 0xC0[4,6]
- * [0x0], No bit errors were detected;
- * [0x001, 0x011], Bit errors were detected and corrected. Not
+ * [0b000], No bit errors were detected;
+ * [0b001, 0b011], Bit errors were detected and corrected. Not
  *	reach Flipping Bits;
- * [0x100], Bit error count equals the bit flip
+ * [0b100], Bit error count equals the bit flip
  *	detectionthreshold
- * [0x101, 0x110], Reserved;
- * [0x111], Multiple bit errors were detected and
+ * [0b101, 0b110], Reserved;
+ * [0b111], Multiple bit errors were detected and
  *	not corrected.
  */
-u32 sfc_nand_ecc_status_sp5(void)
+static u32 sfc_nand_get_ecc_status5(void)
 {
 	u32 ret;
 	u32 i;
@@ -420,14 +485,18 @@ u32 sfc_nand_ecc_status_sp5(void)
 
 	for (i = 0; i < timeout; i++) {
 		ret = sfc_nand_read_feature(0xC0, &status);
+
 		if (ret != SFC_OK)
 			return SFC_NAND_ECC_ERROR;
+
 		if (!(status & (1 << 0)))
 			break;
+
 		sfc_delay(1);
 	}
 
 	ecc = (status >> 4) & 0x07;
+
 	if (ecc < 4)
 		ret = SFC_NAND_ECC_OK;
 	else if (ecc == 4)
@@ -438,6 +507,52 @@ u32 sfc_nand_ecc_status_sp5(void)
 	return ret;
 }
 
+/*
+ * ecc spectial type6:
+ * ecc bits: 0xC0[4,6]
+ * [0b000], No bit errors were detected;
+ * [0b001], 1-3 Bit errors were detected and corrected. Not
+ *	reach Flipping Bits;
+ * [0b010], Multiple bit errors were detected and
+ *	not corrected.
+ * [0b011], 4-6 Bit errors were detected and corrected. Not
+ *	reach Flipping Bits;
+ * [0b101], Bit error count equals the bit flip
+ *	detectionthreshold
+ * others, Reserved.
+ */
+static u32 sfc_nand_get_ecc_status6(void)
+{
+	u32 ret;
+	u32 i;
+	u8 ecc;
+	u8 status;
+	u32 timeout = 1000 * 1000;
+
+	for (i = 0; i < timeout; i++) {
+		ret = sfc_nand_read_feature(0xC0, &status);
+
+		if (ret != SFC_OK)
+			return SFC_NAND_ECC_ERROR;
+
+		if (!(status & (1 << 0)))
+			break;
+
+		sfc_delay(1);
+	}
+
+	ecc = (status >> 4) & 0x07;
+
+	if (ecc == 0 || ecc == 1 || ecc == 3)
+		ret = SFC_NAND_ECC_OK;
+	else if (ecc == 5)
+		ret = SFC_NAND_ECC_REFRESH;
+	else
+		ret = (u32)SFC_NAND_ECC_ERROR;
+
+	return ret;
+}
+
 u32 sfc_nand_erase_block(u8 cs, u32 addr)
 {
 	int ret;
@@ -446,7 +561,7 @@ u32 sfc_nand_erase_block(u8 cs, u32 addr)
 
 	rkflash_print_dio("%s %x\n", __func__, addr);
 	op.sfcmd.d32 = 0;
-	op.sfcmd.b.cmd = p_nand_info->block_erase_cmd;
+	op.sfcmd.b.cmd = 0xd8;
 	op.sfcmd.b.addrbits = SFC_ADDR_24BITS;
 	op.sfcmd.b.rw = SFC_WRITE;
 
@@ -454,9 +569,12 @@ u32 sfc_nand_erase_block(u8 cs, u32 addr)
 
 	sfc_nand_write_en();
 	ret = sfc_request(&op, addr, NULL, 0);
+
 	if (ret != SFC_OK)
 		return ret;
+
 	ret = sfc_nand_wait_busy(&status, 1000 * 1000);
+
 	if (status & (1 << 2))
 		return SFC_NAND_PROG_ERASE_ERROR;
 
@@ -473,6 +591,7 @@ u32 sfc_nand_prog_page_raw(u8 cs, u32 addr, u32 *p_page_buf)
 
 	rkflash_print_dio("%s %x %x\n", __func__, addr, p_page_buf[0]);
 	sfc_nand_write_en();
+
 	if (sfc_nand_dev.prog_lines == DATA_LINES_X4 &&
 	    p_nand_info->feature & FEA_SOFT_QOP_BIT &&
 	    sfc_get_version() < SFC_VER_3)
@@ -490,15 +609,18 @@ u32 sfc_nand_prog_page_raw(u8 cs, u32 addr, u32 *p_page_buf)
 	sfc_request(&op, plane, p_page_buf, page_size);
 
 	op.sfcmd.d32 = 0;
-	op.sfcmd.b.cmd = p_nand_info->page_prog_cmd;
+	op.sfcmd.b.cmd = 0x10;
 	op.sfcmd.b.addrbits = SFC_ADDR_24BITS;
 	op.sfcmd.b.rw = SFC_WRITE;
 
 	op.sfctrl.d32 = 0;
 	ret = sfc_request(&op, addr, p_page_buf, 0);
+
 	if (ret != SFC_OK)
 		return ret;
+
 	ret = sfc_nand_wait_busy(&status, 1000 * 1000);
+
 	if (status & (1 << 3))
 		return SFC_NAND_PROG_ERASE_ERROR;
 
@@ -516,10 +638,12 @@ u32 sfc_nand_prog_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 	memset(&gp_page_buf[data_size / 4], 0xff, sec_per_page * 16);
 	gp_page_buf[(data_size + meta->off0) / 4] = p_spare[0];
 	gp_page_buf[(data_size + meta->off1) / 4] = p_spare[1];
+
 	if (sec_per_page == 8) {
 		gp_page_buf[(data_size + meta->off2) / 4] = p_spare[2];
 		gp_page_buf[(data_size + meta->off3) / 4] = p_spare[3];
 	}
+
 	ret = sfc_nand_prog_page_raw(cs, addr, gp_page_buf);
 
 	return ret;
@@ -535,23 +659,21 @@ u32 sfc_nand_read_page_raw(u8 cs, u32 addr, u32 *p_page_buf)
 	u8 status;
 
 	op.sfcmd.d32 = 0;
-	op.sfcmd.b.cmd = p_nand_info->page_read_cmd;
+	op.sfcmd.b.cmd = 0x13;
 	op.sfcmd.b.rw = SFC_WRITE;
 	op.sfcmd.b.addrbits = SFC_ADDR_24BITS;
 
 	op.sfctrl.d32 = 0;
 
 	sfc_request(&op, addr, p_page_buf, 0);
+
 	if (sfc_nand_dev.read_lines == DATA_LINES_X4 &&
 	    p_nand_info->feature & FEA_SOFT_QOP_BIT &&
 	    sfc_get_version() < SFC_VER_3)
 		sfc_nand_rw_preset();
 
 	sfc_nand_wait_busy(&status, 1000 * 1000);
-	if (p_nand_info->ecc_status)
-		ecc_result = p_nand_info->ecc_status();
-	else
-		ecc_result = sfc_nand_ecc_status();
+	ecc_result = p_nand_info->ecc_status();
 
 	op.sfcmd.d32 = 0;
 	op.sfcmd.b.cmd = sfc_nand_dev.page_read_cmd;
@@ -581,6 +703,7 @@ u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 	memcpy(p_data, gp_page_buf, data_size);
 	p_spare[0] = gp_page_buf[(data_size + meta->off0) / 4];
 	p_spare[1] = gp_page_buf[(data_size + meta->off1) / 4];
+
 	if (p_nand_info->sec_per_page == 8) {
 		p_spare[2] = gp_page_buf[(data_size + meta->off2) / 4];
 		p_spare[3] = gp_page_buf[(data_size + meta->off3) / 4];
@@ -591,8 +714,10 @@ u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 
 	if (ret != SFC_NAND_ECC_OK) {
 		rkflash_print_error("%s[0x%x], ret=0x%x\n", __func__, addr, ret);
+
 		if (p_data)
 			rkflash_print_hex("data:", p_data, 4, 8);
+
 		if (p_spare)
 			rkflash_print_hex("spare:", p_spare, 4, 2);
 	}
@@ -606,6 +731,7 @@ u32 sfc_nand_check_bad_block(u8 cs, u32 addr)
 	u32 data_size = p_nand_info->sec_per_page * SFC_NAND_SECTOR_SIZE;
 
 	ret = sfc_nand_read_page_raw(cs, addr, gp_page_buf);
+
 	/* unify with mtd framework */
 	if (ret == SFC_NAND_ECC_ERROR)
 		rkflash_print_error("%s page= %x ret= %x data0= %x, spare0= %x\n",
@@ -625,10 +751,13 @@ u32 sfc_nand_mark_bad_block(u8 cs, u32 addr)
 	u32 data_size = p_nand_info->sec_per_page * SFC_NAND_SECTOR_SIZE;
 
 	ret = sfc_nand_read_page_raw(cs, addr, gp_page_buf);
+
 	if (ret)
 		return SFC_NAND_HW_ERROR;
+
 	gp_page_buf[data_size / 4] = 0x0;
 	ret = sfc_nand_prog_page_raw(cs, addr, gp_page_buf);
+
 	if (ret)
 		return SFC_NAND_HW_ERROR;
 
@@ -658,37 +787,35 @@ int sfc_nand_read_id(u8 *data)
  */
 static int sfc_nand_get_bad_block_list(u16 *table, u32 die)
 {
+	u32 sec_per_page = p_nand_info->sec_per_page;
 	u16 blk;
 	u32 bad_cnt, page;
 	u32 blk_per_die;
 	u32 *pread;
-	u32 *pspare_read;
 
 	rkflash_print_info("%s\n", __func__);
-	pread = kmalloc(SFC_NAND_PAGE_MAX_SIZE, GFP_KERNEL);
-	pspare_read = kmalloc(8, GFP_KERNEL);
-	if (!pread || !pspare_read) {
-		kfree(pread);
-		kfree(pspare_read);
+	pread = ftl_malloc(SFC_NAND_PAGE_MAX_SIZE);
+
+	if (!pread)
 		return -1;
-	}
 
 	bad_cnt = 0;
 	blk_per_die = p_nand_info->plane_per_die *
-			p_nand_info->blk_per_plane;
+		      p_nand_info->blk_per_plane;
+
 	for (blk = 0; blk < blk_per_die; blk++) {
 		page = (blk + blk_per_die * die) *
-			p_nand_info->page_per_blk;
-		sfc_nand_read_page(0, page, pread, pspare_read);
+		       p_nand_info->page_per_blk;
+		sfc_nand_read_page_raw(0, page, (u32 *)pread);
 
-		if (pread[0] != 0xFFFFFFFF ||
-		    pspare_read[0] != 0xFFFFFFFF) {
+		if (pread[0] != 0xff ||
+		    pread[SFC_NAND_SECTOR_SIZE * sec_per_page] != 0xFF) {
 			table[bad_cnt++] = blk;
 			rkflash_print_error("die[%d], bad_blk[%d]\n", die, blk);
 		}
 	}
-	kfree(pread);
-	kfree(pspare_read);
+
+	ftl_free(pread);
 
 	return (int)bad_cnt;
 }
@@ -723,22 +850,18 @@ static int sfc_nand_enable_QE(void)
 {
 	int ret = SFC_OK;
 	u8 status;
-	int bit_offset = p_nand_info->QE_bits;
 
-	if (bit_offset == 0xFF)
-		return SFC_OK;
+	ret = sfc_nand_read_feature(0xB0, &status);
 
-	ret = sfc_nand_read_feature(p_nand_info->QE_address, &status);
 	if (ret != SFC_OK)
 		return ret;
 
-	if (status & (1 << bit_offset))   /* is QE bit set */
+	if (status & 1)   /* is QE bit set */
 		return SFC_OK;
 
-	status |= (1 << bit_offset);
-		return sfc_nand_write_feature(p_nand_info->QE_address, status);
+	status |= 1;
 
-	return ret;
+	return sfc_nand_write_feature(0xB0, status);
 }
 
 u32 sfc_nand_init(void)
@@ -748,10 +871,12 @@ u32 sfc_nand_init(void)
 	sfc_nand_read_id(id_byte);
 	rkflash_print_error("sfc_nand id: %x %x %x\n",
 			    id_byte[0], id_byte[1], id_byte[2]);
+
 	if (id_byte[0] == 0xFF || id_byte[0] == 0x00)
 		return (u32)FTL_NO_FLASH;
 
 	p_nand_info = sfc_nand_get_info(id_byte);
+
 	if (!p_nand_info)
 		return (u32)FTL_UNSUPPORTED_FLASH;
 
@@ -765,20 +890,21 @@ u32 sfc_nand_init(void)
 	sfc_nand_write_feature(0xA0, 0);
 	sfc_nand_dev.read_lines = DATA_LINES_X1;
 	sfc_nand_dev.prog_lines = DATA_LINES_X1;
-	sfc_nand_dev.page_read_cmd = p_nand_info->read_cache_cmd_1;
-	sfc_nand_dev.page_prog_cmd = p_nand_info->prog_cache_cmd_1;
+	sfc_nand_dev.page_read_cmd = 0x03;
+	sfc_nand_dev.page_prog_cmd = 0x02;
+
 	if (p_nand_info->feature & FEA_4BIT_READ) {
-		if (sfc_nand_enable_QE() == SFC_OK) {
+		if ((p_nand_info->has_qe_bits && sfc_nand_enable_QE() == SFC_OK) ||
+		    !p_nand_info->has_qe_bits) {
 			sfc_nand_dev.read_lines = DATA_LINES_X4;
-			sfc_nand_dev.page_read_cmd =
-				p_nand_info->read_cache_cmd_4;
+			sfc_nand_dev.page_read_cmd = 0x6b;
 		}
 	}
 
 	if (p_nand_info->feature & FEA_4BIT_PROG &&
 	    sfc_nand_dev.read_lines == DATA_LINES_X4) {
 		sfc_nand_dev.prog_lines = DATA_LINES_X4;
-		sfc_nand_dev.page_prog_cmd = p_nand_info->prog_cache_cmd_4;
+		sfc_nand_dev.page_prog_cmd = 0x32;
 	}
 
 	sfc_nand_read_feature(0xA0, &status);
diff --git a/drivers/rkflash/sfc_nand.h b/drivers/rkflash/sfc_nand.h
index e382c7947605..b9d25db43d92 100644
--- a/drivers/rkflash/sfc_nand.h
+++ b/drivers/rkflash/sfc_nand.h
@@ -99,20 +99,11 @@ struct nand_info {
 	u16 plane_per_die;
 	u16 blk_per_plane;
 
-	u8 page_read_cmd;
-	u8 page_prog_cmd;
-	u8 read_cache_cmd_1;
-	u8 prog_cache_cmd_1;
-
-	u8 read_cache_cmd_4;
-	u8 prog_cache_cmd_4;
-	u8 block_erase_cmd;
 	u8 feature;
 
 	u8 density;  /* (1 << density) sectors*/
 	u8 max_ecc_bits;
-	u8 QE_address;
-	u8 QE_bits;
+	u8 has_qe_bits;
 
 	struct nand_mega_area meta;
 	u32 (*ecc_status)(void);
@@ -124,11 +115,6 @@ extern struct nand_ops		g_nand_ops;
 u32 sfc_nand_init(void);
 void sfc_nand_deinit(void);
 int sfc_nand_read_id(u8 *buf);
-u32 sfc_nand_ecc_status_sp1(void);
-u32 sfc_nand_ecc_status_sp2(void);
-u32 sfc_nand_ecc_status_sp3(void);
-u32 sfc_nand_ecc_status_sp4(void);
-u32 sfc_nand_ecc_status_sp5(void);
 u32 sfc_nand_erase_block(u8 cs, u32 addr);
 u32 sfc_nand_prog_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare);
 u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare);
diff --git a/drivers/rkflash/sfc_nor.c b/drivers/rkflash/sfc_nor.c
index dc79872de66b..6511ca7f476b 100644
--- a/drivers/rkflash/sfc_nor.c
+++ b/drivers/rkflash/sfc_nor.c
@@ -31,6 +31,8 @@ static struct flash_info spi_flash_tbl[] = {
 	{ 0xef6019, 128, 8, 0x13, 0x02, 0x6C, 0x32, 0x20, 0xD8, 0x3C, 16, 9, 0 },
 	/* 25Q64FWSSIG */
 	{ 0xef6017, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 14, 9, 0 },
+	/* MX25L3233FM2I-08G */
+	{ 0xc22016, 128, 8, 0x03, 0x02, 0x6B, 0x38, 0x20, 0xD8, 0x0E, 13, 6, 0 },
 	/* MX25L6433F */
 	{ 0xc22017, 128, 8, 0x03, 0x02, 0x6B, 0x38, 0x20, 0xD8, 0x0E, 14, 6, 0 },
 	/* MX25L12835E/F MX25L12833FMI-10G */
@@ -50,7 +52,7 @@ static struct flash_info spi_flash_tbl[] = {
 	/* XM25QH64A */
 	{ 0x207017, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 14, 0, 0 },
 	/* XT25F128A XM25QH128A */
-	{ 0x207018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x00, 15, 0, 0 },
+	{ 0x207018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 15, 0, 0 },
 	/* XT25F64BSSIGU-5 */
 	{ 0x0b4017, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0D, 14, 9, 0 },
 	/* XT25F128BSSIGU */
@@ -81,6 +83,8 @@ static struct flash_info spi_flash_tbl[] = {
 	{ 0x684018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x04, 15, 9, 0 },
 	/* BH25Q64BS */
 	{ 0x684017, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x04, 14, 9, 0 },
+	/* FM25Q128A */
+	{ 0xA14018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 15, 9, 0 },
 };
 
 static int snor_write_en(void)
-- 
2.35.3

