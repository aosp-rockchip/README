From 87d2c3dbf17dab92f3305ec22a821bf3685d8ecf Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Fri, 10 Apr 2020 20:02:14 +0800
Subject: [PATCH] drivers: rkflash: update sftl to version SFTL version: 5.0.53
 20200303

1.Add more varification for ftl read/write input param
2.dump stack in FtlMemInit

Change-Id: I7a09f54c217d9da8e656cb91fe18ca83a882cff6
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl_arm_v7.S       | 27059 +++++++++++------------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S |  7936 +++----
 drivers/rkflash/rk_sftl_arm_v8.S       |  6546 +++---
 3 files changed, 19913 insertions(+), 21628 deletions(-)

diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index f38561d08db6..da0bf173c0cc 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2020-03-30
+ * date: 2020-04-10
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -10,12 +10,13 @@
 	.eabi_attribute 24, 1
 	.eabi_attribute 25, 1
 	.eabi_attribute 26, 2
-	.eabi_attribute 30, 2
+	.eabi_attribute 30, 4
 	.eabi_attribute 34, 1
 	.eabi_attribute 18, 2
 	.file	"rk_sftl.c"
 	.syntax divided
 	.syntax unified
+	.global	__aeabi_uidiv
 	.arm
 	.syntax unified
 	.text
@@ -23,178 +24,43 @@
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	IsBlkInVendorPart.part.0, %function
-IsBlkInVendorPart.part.0:
+	.type	l2p_addr_tran, %function
+l2p_addr_tran:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r2, [r3]
-	cmp	r2, #0
-	beq	.L8
-	ldr	r3, [r3, #4]
-	ldrh	r1, [r3]
-	cmp	r1, r0
-	beq	.L7
-	sub	r2, r2, #1
-	uxth	r2, r2
-	add	r2, r3, r2, lsl #1
-	b	.L3
-.L4:
-	ldrh	r1, [r3, #2]!
-	cmp	r1, r0
-	beq	.L7
-.L3:
-	cmp	r3, r2
-	bne	.L4
-.L8:
+	ldr	r3, .L4
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r8, r1
+	ldr	r6, [r0, #4]
+	mov	r9, r2
+	ldrh	r4, [r3, #8]
+	ldrh	r5, [r3, #10]
+	ldrh	r3, [r3, #14]
+	lsr	r7, r6, #10
+	ubfx	r6, r6, #0, #10
+	uxth	r0, r7
+	uxth	r7, r7
+	cmp	r3, #4
+	lsreq	r4, r4, #1
+	lsleq	r5, r5, #1
+	mov	r1, r4
+	uxtheq	r5, r5
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	mls	r4, r0, r4, r7
+	mla	r4, r5, r4, r6
+	str	r4, [r8]
+	str	r0, [r9]
 	mov	r0, #0
-	bx	lr
-.L7:
-	mov	r0, #1
-	bx	lr
-	.fnend
-	.size	IsBlkInVendorPart.part.0, .-IsBlkInVendorPart.part.0
-	.align	2
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	insert_data_list.part.1, %function
-insert_data_list.part.1:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	lsl	r2, r0, #1
-	movw	lr, #:lower16:.LANCHOR0
-	movt	lr, #:upper16:.LANCHOR0
-	add	r7, r2, r0
-	ldr	r9, [lr, #8]
-	lsl	r7, r7, #1
-	mvn	r3, #0
-	.pad #12
-	sub	sp, sp, #12
-	add	r8, r9, r7
-	strh	r3, [r8, #2]	@ movhi
-	strh	r3, [r9, r7]	@ movhi
-	ldr	r1, [lr, #12]
-	cmp	r1, #0
-	beq	.L23
-	ldr	r10, [lr, #16]
-	ldrh	ip, [r8, #4]
-	ldr	r4, [lr, #8]
-	ldrh	r2, [r10, r2]
-	cmp	ip, #0
-	ldrh	r5, [lr, #20]
-	mulne	r3, ip, r2
-	movw	ip, #43691
-	movt	ip, 43690
-	str	r3, [sp, #4]
-	sub	r3, r1, r4
-	asr	r3, r3, #1
-	mul	ip, ip, r3
-	uxth	ip, ip
-	cmp	r5, #0
-	cmpne	r0, ip
-	beq	.L10
-	mov	r3, #1
-	movw	r6, #65535
-	b	.L16
-.L25:
-	ldrh	fp, [r10, fp]
-	mul	r2, r2, fp
-	ldr	fp, [sp, #4]
-	cmp	r2, fp
-	bcs	.L14
-	ldrh	r2, [r1]
-	cmp	r2, r6
-	add	fp, r2, r2, lsl #1
-	beq	.L24
-	cmp	r3, r5
-	mov	ip, r2
-	movls	r2, #0
-	movhi	r2, #1
-	cmp	r0, ip
-	orreq	r2, r2, #1
-	add	r1, r4, fp, lsl #1
-	cmp	r2, #0
-	bne	.L10
-.L16:
-	ldrh	r2, [r1, #4]
-	add	r3, r3, #1
-	lsl	fp, ip, #1
-	uxth	r3, r3
-	cmp	r2, #0
-	bne	.L25
-.L14:
-	strh	ip, [r9, r7]	@ movhi
-	ldrh	r3, [r1, #2]
-	strh	r3, [r8, #2]	@ movhi
-	ldr	r3, [lr, #12]
-	cmp	r3, r1
-	beq	.L26
-	ldrh	r3, [r1, #2]
-	ldr	r2, [lr, #8]
-	add	r3, r3, r3, lsl #1
-	lsl	r3, r3, #1
-	strh	r0, [r2, r3]	@ movhi
-	strh	r0, [r1, #2]	@ movhi
-.L10:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L24:
-	strh	ip, [r8, #2]	@ movhi
-	strh	r0, [r1]	@ movhi
-	str	r8, [lr, #24]
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L26:
-	strh	r0, [r1, #2]	@ movhi
-.L23:
-	str	r8, [lr, #12]
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-	.fnend
-	.size	insert_data_list.part.1, .-insert_data_list.part.1
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L5:
 	.align	2
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlUpdateVaildLpn.part.5, %function
-FtlUpdateVaildLpn.part.5:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r0, #:lower16:.LANCHOR0
-	movt	r0, #:upper16:.LANCHOR0
-	ldrh	r3, [r0, #20]
-	cmp	r3, #0
-	bxeq	lr
-	str	lr, [sp, #-4]!
-	.save {lr}
-	sub	r3, r3, #1
-	ldr	ip, [r0, #16]
-	uxth	r2, r3
-	movw	lr, #65535
-	sub	r3, ip, #2
-	add	ip, ip, r2, lsl #1
-.L30:
-	ldrh	r1, [r3, #2]!
-	cmp	r1, lr
-	ldrne	r2, [r0, #28]
-	addne	r2, r2, r1
-	strne	r2, [r0, #28]
-	cmp	ip, r3
-	bne	.L30
-	ldr	pc, [sp], #4
+.L4:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlUpdateVaildLpn.part.5, .-FtlUpdateVaildLpn.part.5
+	.size	l2p_addr_tran, .-l2p_addr_tran
 	.align	2
 	.syntax unified
 	.arm
@@ -205,56 +71,21 @@ ftl_set_blk_mode.part.6:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
+	ldr	r3, .L7
 	lsr	r1, r0, #5
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r2, [r3, #32]
-	and	r0, r0, #31
 	mov	ip, #1
+	and	r0, r0, #31
+	ldr	r2, [r3, #24]
 	ldr	r3, [r2, r1, lsl #2]
 	orr	r0, r3, ip, lsl r0
 	str	r0, [r2, r1, lsl #2]
 	bx	lr
-	.fnend
-	.size	ftl_set_blk_mode.part.6, .-ftl_set_blk_mode.part.6
+.L8:
 	.align	2
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSlcSuperblockCheck.part.7, %function
-FtlSlcSuperblockCheck.part.7:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldrb	r3, [r0, #6]	@ zero_extendqisi2
-	movw	r2, #65535
-	add	r1, r0, r3, lsl #1
-	ldrh	r1, [r1, #16]
-	cmp	r1, r2
-	bxne	lr
-	movw	r2, #:lower16:.LANCHOR0
-	str	lr, [sp, #-4]!
-	.save {lr}
-	movt	r2, #:upper16:.LANCHOR0
-	ldrh	lr, [r2, #36]
-.L42:
-	add	r3, r3, #1
-	uxtb	r3, r3
-	cmp	r3, lr
-	mov	r2, r3
-	ldrheq	ip, [r0, #2]
-	moveq	r3, #0
-	moveq	r2, r3
-	add	r2, r0, r2, lsl #1
-	addeq	ip, ip, #1
-	strheq	ip, [r0, #2]	@ movhi
-	ldrh	r2, [r2, #16]
-	cmp	r2, r1
-	beq	.L42
-	strb	r3, [r0, #6]
-	ldr	pc, [sp], #4
+.L7:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlSlcSuperblockCheck.part.7, .-FtlSlcSuperblockCheck.part.7
+	.size	ftl_set_blk_mode.part.6, .-ftl_set_blk_mode.part.6
 	.align	2
 	.global	ftl_print_sblk_info
 	.syntax unified
@@ -265,82 +96,84 @@ ftl_print_sblk_info:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, lr}
-	.save {r4, r5, lr}
-	movw	r1, #:lower16:.LC0
-	movw	r0, #:lower16:.LC1
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movt	r1, #:upper16:.LC0
-	movt	r0, #:upper16:.LC1
-	.pad #20
-	sub	sp, sp, #20
+	push	{r0, r1, r2, r3, r4, lr}
+	.save {r4, lr}
+	.pad #16
+	ldr	r4, .L11
+	ldr	r1, .L11+4
+	ldr	r0, .L11+8
 	bl	sftl_printk
-	ldrh	r2, [r4, #40]
-	movw	r0, #:lower16:.LC2
-	ldr	lr, [r4, #16]
-	movt	r0, #:upper16:.LC2
-	ldrh	r5, [r4, #44]
-	mov	r1, r2
-	ldrb	ip, [r4, #48]	@ zero_extendqisi2
-	lsl	r2, r2, #1
-	ldrb	r3, [r4, #46]	@ zero_extendqisi2
-	ldrh	lr, [lr, r2]
-	ldrh	r2, [r4, #42]
-	str	ip, [sp]
-	stmib	sp, {r5, lr}
+	ldrh	r1, [r4, #28]
+	ldr	ip, [r4, #76]
+	ldrb	r3, [r4, #34]	@ zero_extendqisi2
+	ldrh	r2, [r4, #30]
+	lsl	r0, r1, #1
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #8]
+	ldrh	r0, [r4, #32]
+	str	r0, [sp, #4]
+	ldrb	r0, [r4, #36]	@ zero_extendqisi2
+	str	r0, [sp]
+	ldr	r0, .L11+12
 	bl	sftl_printk
-	ldrh	r2, [r4, #88]
-	movw	r0, #:lower16:.LC3
-	ldr	lr, [r4, #16]
-	movt	r0, #:upper16:.LC3
-	ldrh	r5, [r4, #92]
-	mov	r1, r2
-	ldrb	ip, [r4, #96]	@ zero_extendqisi2
-	lsl	r2, r2, #1
-	ldrb	r3, [r4, #94]	@ zero_extendqisi2
-	ldrh	lr, [lr, r2]
-	ldrh	r2, [r4, #90]
-	str	ip, [sp]
-	stmib	sp, {r5, lr}
+	ldrh	r1, [r4, #80]
+	ldr	ip, [r4, #76]
+	ldrb	r3, [r4, #86]	@ zero_extendqisi2
+	ldrh	r2, [r4, #82]
+	lsl	r0, r1, #1
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #8]
+	ldrh	r0, [r4, #84]
+	str	r0, [sp, #4]
+	ldrb	r0, [r4, #88]	@ zero_extendqisi2
+	str	r0, [sp]
+	ldr	r0, .L11+16
 	bl	sftl_printk
-	ldrh	r2, [r4, #136]
-	movw	r0, #:lower16:.LC4
-	ldr	lr, [r4, #16]
-	movt	r0, #:upper16:.LC4
-	ldrh	r5, [r4, #140]
-	mov	r1, r2
-	ldrb	ip, [r4, #144]	@ zero_extendqisi2
-	lsl	r2, r2, #1
-	ldrb	r3, [r4, #142]	@ zero_extendqisi2
-	ldrh	lr, [lr, r2]
-	ldrh	r2, [r4, #138]
-	str	ip, [sp]
-	stmib	sp, {r5, lr}
+	ldrh	r1, [r4, #128]
+	ldr	ip, [r4, #76]
+	ldrb	r3, [r4, #134]	@ zero_extendqisi2
+	ldrh	r2, [r4, #130]
+	lsl	r0, r1, #1
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #8]
+	ldrh	r0, [r4, #132]
+	str	r0, [sp, #4]
+	ldrb	r0, [r4, #136]	@ zero_extendqisi2
+	str	r0, [sp]
+	ldr	r0, .L11+20
 	bl	sftl_printk
-	ldrh	r2, [r4, #184]
-	movw	r0, #:lower16:.LC5
-	ldr	lr, [r4, #16]
-	movt	r0, #:upper16:.LC5
-	ldrh	r5, [r4, #188]
-	mov	r1, r2
-	ldrb	ip, [r4, #192]	@ zero_extendqisi2
-	lsl	r2, r2, #1
-	ldrb	r3, [r4, #190]	@ zero_extendqisi2
-	ldrh	lr, [lr, r2]
-	ldrh	r2, [r4, #186]
-	str	ip, [sp]
-	stmib	sp, {r5, lr}
+	ldrh	r1, [r4, #176]
+	ldr	ip, [r4, #76]
+	ldrb	r3, [r4, #182]	@ zero_extendqisi2
+	ldrh	r2, [r4, #178]
+	lsl	r0, r1, #1
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #8]
+	ldrh	r0, [r4, #180]
+	str	r0, [sp, #4]
+	ldrb	r0, [r4, #184]	@ zero_extendqisi2
+	str	r0, [sp]
+	ldr	r0, .L11+24
 	bl	sftl_printk
-	movw	r0, #:lower16:.LC6
-	ldrh	r3, [r4, #232]
-	ldrh	r2, [r4, #234]
-	movt	r0, #:upper16:.LC6
-	ldrh	r1, [r4, #236]
-	add	sp, sp, #20
+	ldrh	r3, [r4, #224]
+	ldrh	r2, [r4, #226]
+	ldrh	r1, [r4, #228]
+	ldr	r0, .L11+28
+	add	sp, sp, #16
 	@ sp needed
-	pop	{r4, r5, lr}
+	pop	{r4, lr}
 	b	sftl_printk
+.L12:
+	.align	2
+.L11:
+	.word	.LANCHOR0
+	.word	.LC0
+	.word	.LC1
+	.word	.LC2
+	.word	.LC3
+	.word	.LC4
+	.word	.LC5
+	.word	.LC6
 	.fnend
 	.size	ftl_print_sblk_info, .-ftl_print_sblk_info
 	.align	2
@@ -354,23 +187,19 @@ Ftl_log2:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	subs	r1, r0, #0
-	beq	.L54
+	mov	r1, #0
 	mov	r2, #1
-	mov	r0, #0
-	b	.L53
-.L55:
-	mov	r0, r3
-.L53:
-	lsl	r2, r2, #1
-	add	r3, r0, #1
-	uxth	r3, r3
-	cmp	r1, r2
-	bcs	.L55
-	bx	lr
-.L54:
-	movw	r0, #65535
+.L14:
+	cmp	r2, r0
+	uxth	r3, r1
+	add	r1, r1, #1
+	bls	.L15
+	sub	r0, r3, #1
+	uxth	r0, r0
 	bx	lr
+.L15:
+	lsl	r2, r2, #1
+	b	.L14
 	.fnend
 	.size	Ftl_log2, .-Ftl_log2
 	.align	2
@@ -397,29 +226,29 @@ FtlSysBlkNumInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
-	str	lr, [sp, #-4]!
-	.save {lr}
-	movt	r3, #:upper16:.LANCHOR0
+	@ link register save eliminated.
+	ldr	r3, .L18
 	cmp	r0, #24
-	movcs	lr, r0
-	movcc	lr, #24
-	ldrh	r2, [r3, #36]
+	movcc	r0, #24
+	ldrh	r2, [r3, #236]
+	ldrh	r1, [r3, #246]
+	str	r0, [r3, #232]
+	mul	r2, r0, r2
+	sub	r0, r1, r0
+	ldr	r1, [r3, #252]
+	strh	r0, [r3, #244]	@ movhi
 	mov	r0, #0
-	ldrh	ip, [r3, #248]
-	ldr	r1, [r3, #256]
-	str	lr, [r3, #240]
-	mul	r2, lr, r2
-	sub	ip, ip, lr
-	strh	ip, [r3, #20]	@ movhi
-	sub	r1, r1, r2
-	str	r2, [r3, #244]
-	str	r1, [r3, #252]
-	ldr	pc, [sp], #4
+	str	r2, [r3, #240]
+	sub	r2, r1, r2
+	str	r2, [r3, #248]
+	bx	lr
+.L19:
+	.align	2
+.L18:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
 	.global	__aeabi_idiv
-	.global	__aeabi_uidiv
 	.align	2
 	.global	FtlConstantsInit
 	.syntax unified
@@ -430,209 +259,168 @@ FtlConstantsInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	ldrh	r8, [r0, #14]
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r3, #262
-	add	r1, r4, #260
-	ldrh	r5, [r0, #2]
-	add	r2, r4, #264
-	ldrh	r6, [r0]
-	cmp	r8, #4
-	ldrh	r9, [r0, #4]
 	.pad #12
-	sub	sp, sp, #12
-	ldrh	r7, [r0, #6]
-	strh	r5, [r4, r3]	@ movhi
-	movw	r3, #266
-	strh	r6, [r1]	@ movhi
-	strh	r9, [r2]	@ movhi
-	strh	r7, [r4, #248]	@ movhi
-	strh	r8, [r4, r3]	@ movhi
-	beq	.L78
-	cmp	r8, #8
-	cmpeq	r9, #1
-	beq	.L62
-	lsl	ip, r8, #9
-	mov	r1, r8
-	uxth	ip, ip
-	lsr	lr, ip, #8
-	b	.L61
-.L78:
+	mov	r3, r0
+	ldr	r4, .L35
+	movw	r5, #262
+	ldrh	r0, [r0]
+	ldrh	r7, [r3, #2]
+	add	r2, r4, #256
+	ldrh	ip, [r3, #14]
+	add	r1, r4, #260
+	strh	r0, [r2]	@ movhi
+	movw	r2, #258
+	strh	r7, [r4, r2]	@ movhi
+	ldrh	lr, [r3, #4]
+	cmp	ip, #4
+	ldrh	r2, [r3, #6]
+	strh	ip, [r4, r5]	@ movhi
+	strh	lr, [r1]	@ movhi
+	strh	r2, [r4, #246]	@ movhi
+	bne	.L21
+	lsr	r2, r2, #1
+	strh	r2, [r4, #246]	@ movhi
 	mov	r2, #8
-	lsr	r7, r7, #1
-	mov	r1, r2
-	strh	r2, [r4, r3]	@ movhi
-	mov	r8, r2
-	mov	lr, #16
-	mov	ip, #4096
-	strh	r7, [r4, #248]	@ movhi
-.L61:
-	ldr	r2, .L79
-	mov	r3, #0
-.L63:
-	strb	r3, [r2, #1]!
-	add	r3, r3, #1
-	cmp	r3, #32
-	bne	.L63
-	ldr	r3, .L79+4
-	cmp	r6, #1
-	mov	fp, #5
-	smulbb	r5, r5, r9
+	strh	r2, [r4, r5]	@ movhi
+.L22:
+	ldr	ip, .L35+4
+	mov	r2, #0
+.L23:
+	strb	r2, [r2, ip]
+	add	r2, r2, #1
+	cmp	r2, #32
+	bne	.L23
+	ldr	r2, .L35+8
+	cmp	r0, #1
+	mov	ip, #5
+	ldrh	r5, [r4, #246]
+	ldr	r8, .L35+12
+	mov	lr, #0
+	strh	ip, [r2]	@ movhi
+	movw	ip, #298
+	strheq	r0, [r2]	@ movhi
+	mov	r2, #640
+	ldrh	r0, [r1]
+	mov	r6, r8
+	strh	r2, [r6], #4	@ movhi
 	movw	r2, #302
-	strh	fp, [r3]	@ movhi
-	mov	r10, #0
-	strheq	r6, [r3]	@ movhi
-	smulbb	r6, r9, r7
-	strh	r10, [r4, r2]	@ movhi
-	uxth	r5, r5
-	ldr	r2, .L79+8
-	movw	r3, #306
-	uxth	r6, r6
-	mov	r9, #640
-	strh	r5, [r4, #36]	@ movhi
-	cmp	r6, #0
-	strh	r9, [r2]	@ movhi
-	strh	r6, [r4, r3]	@ movhi
-	beq	.L72
-	mov	r9, #0
-	mov	r2, #1
-	b	.L66
-.L73:
-	mov	r9, r3
-.L66:
-	lsl	r2, r2, #1
-	add	r3, r9, #1
-	uxth	r3, r3
-	cmp	r6, r2
-	bcs	.L73
-.L65:
-	ldrh	r6, [r0, #12]
-	movw	r10, #310
-	ldr	r3, .L79+12
-	cmp	r8, #0
-	movw	r2, #314
-	strh	r6, [r4, r10]	@ movhi
-	smulbb	r10, r5, r6
-	strh	r9, [r3], #4	@ movhi
-	strh	r6, [r3]	@ movhi
+	strh	lr, [r4, ip]	@ movhi
+	str	r3, [sp, #4]
+	smulbb	r7, r7, r0
+	smulbb	r0, r0, r5
+	uxth	r7, r7
+	uxth	r0, r0
+	strh	r7, [r4, #236]	@ movhi
+	strh	r0, [r4, r2]	@ movhi
+	bl	Ftl_log2
+	ldr	r3, [sp, #4]
+	movw	r2, #306
+	strh	r0, [r6]	@ movhi
+	mov	r6, r8
+	add	r8, r8, #24
+	ldrh	r10, [r3, #12]
 	strh	r10, [r4, r2]	@ movhi
-	beq	.L74
-	mov	r2, #0
-	mov	r9, #1
-	b	.L68
-.L75:
-	mov	r2, r3
-.L68:
-	lsl	r9, r9, #1
-	add	r3, r2, #1
-	uxth	r3, r3
-	cmp	r9, r8
-	bls	.L75
-	mov	r8, #640
-	add	r10, r2, #9
-	asr	r8, r8, r2
-	add	r8, r8, #2
-	uxth	r8, r8
-.L67:
-	mul	r9, r7, r5
-	ldrh	fp, [r0, #20]
-	movw	r3, #322
-	ldr	r0, .L79+16
-	strh	fp, [r4, r3]	@ movhi
-	mul	r3, r1, r9
-	strh	r2, [r0], #4	@ movhi
-	movw	r2, #318
-	strh	lr, [r0]	@ movhi
-	strh	ip, [r4, r2]	@ movhi
-	mul	r1, r1, r6
-	str	r9, [r4, #256]
+	movw	r2, #310
+	smulbb	r1, r7, r10
+	strh	r10, [r8, #-16]	@ movhi
+	strh	r1, [r4, r2]	@ movhi
+	movw	r2, #262
+	ldrh	fp, [r4, r2]
+	mov	r0, fp
+	bl	Ftl_log2
+	lsl	r2, fp, #9
+	ldr	r3, [sp, #4]
+	movw	r1, #314
+	strh	r0, [r6, #12]!	@ movhi
+	uxth	r2, r2
+	mov	r9, r0
 	mov	r0, #5120
-	mul	r3, r6, r3
-	lsl	r6, r6, #2
+	strh	r2, [r4, r1]	@ movhi
+	lsr	r2, r2, #8
+	mul	r1, r10, fp
+	strh	r2, [r8, #-8]	@ movhi
+	ldrh	r2, [r3, #20]
+	movw	r3, #318
+	strh	r2, [r4, r3]	@ movhi
+	mul	r3, r5, r7
+	lsl	r5, r5, #6
+	str	r3, [r4, #252]
+	mul	r3, fp, r3
+	mul	r3, r10, r3
 	asr	r3, r3, #11
-	str	r3, [r4, #324]
+	str	r3, [r4, #320]
 	bl	__aeabi_idiv
-	lsl	r2, r7, #6
-	ldr	r3, .L79+20
 	uxth	r0, r0
-	movw	ip, #330
-	asr	r2, r2, r10
-	mov	r1, r5
-	strh	r8, [r3]	@ movhi
+	movw	r2, #326
+	mov	r1, r7
 	cmp	r0, #4
-	uxth	r3, r2
-	addhi	fp, r0, #3
-	strh	r2, [r4, ip]	@ movhi
-	movls	r0, #4
-	mul	r8, r5, r3
-	add	r3, r3, #8
-	uxthhi	fp, fp
-	movls	fp, #7
-	str	r3, [sp, #4]
+	movls	r3, #4
+	strhhi	r0, [r8]	@ movhi
+	strhls	r3, [r8]	@ movhi
+	mov	r3, #640
+	asr	r3, r3, r9
+	add	r9, r9, #9
+	asr	r5, r5, r9
+	ldrh	r0, [r8]
+	add	r3, r3, #2
+	strh	r3, [r4, r2]	@ movhi
+	ldr	r3, .L35+16
+	strh	r5, [r3]	@ movhi
+	uxth	r5, r5
+	mul	r3, r7, r5
+	add	r5, r5, #8
+	str	r3, [r4, #332]
 	bl	__aeabi_uidiv
-	ldr	r3, [sp, #4]
-	cmp	r5, #1
-	ldr	r2, .L79+24
-	add	r8, r8, #3
-	movw	r1, #342
-	mov	ip, #32
-	strh	fp, [r4]	@ movhi
-	uxtah	r3, r3, r0
-	str	r8, [r4, #332]
-	strh	ip, [r4, r1]	@ movhi
-	addeq	r3, r3, #4
-	uxth	r3, r3
-	cmp	r3, #24
-	movcc	r3, #24
-	mul	r5, r3, r5
-	sub	r7, r7, r3
-	str	r3, [r4, #240]
+	uxtah	r0, r5, r0
+	cmp	r7, #1
+	addeq	r0, r0, #4
+	str	r0, [r4, #232]
+	ldrh	r0, [r4, #232]
+	bl	FtlSysBlkNumInit
+	ldr	r3, [r4, #232]
+	mov	r0, #0
+	str	r0, [r4, #344]
 	str	r3, [r4, #336]
-	mov	r3, #0
-	mov	r0, r3
-	strh	r7, [r4, #20]	@ movhi
-	sub	r9, r9, r5
-	str	r5, [r4, #244]
-	mul	r6, r9, r6
-	str	r9, [r4, #252]
-	str	r3, [r4, #344]
-	lsr	r10, r6, r10
-	add	r10, r10, #2
-	strh	r10, [r2]	@ movhi
+	ldr	r3, [r4, #248]
+	lsl	r2, r3, #2
+	movw	r3, #306
+	ldrh	r3, [r4, r3]
+	mul	r3, r3, r2
+	ldrh	r2, [r6]
+	add	r2, r2, #9
+	lsr	r3, r3, r2
+	ldr	r2, .L35+20
+	add	r3, r3, #2
+	strh	r3, [r2]	@ movhi
+	mov	r2, #32
+	movw	r3, #342
+	strh	r2, [r4, r3]	@ movhi
+	ldrh	r3, [r8]
+	add	r3, r3, #3
+	strh	r3, [r8]	@ movhi
+	ldr	r3, [r4, #332]
+	add	r3, r3, #3
+	str	r3, [r4, #332]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L62:
-	lsr	r7, r7, #1
-	mov	r3, #2
-	mov	r1, #8
-	strh	r3, [r2]	@ movhi
-	mov	r9, r3
-	mov	r8, r1
-	mov	lr, #16
-	mov	ip, #4096
-	strh	r7, [r4, #248]	@ movhi
-	b	.L61
-.L74:
-	mov	r10, #8
-	movw	r2, #65535
-	movt	r10, 1
-	mov	r8, #2
-	b	.L67
-.L72:
-	movw	r9, #65535
-	b	.L65
-.L80:
-	.align	2
-.L79:
-	.word	.LANCHOR0+267
+.L21:
+	cmp	lr, #1
+	cmpeq	ip, #8
+	lsreq	r2, r2, #1
+	strheq	r2, [r4, #246]	@ movhi
+	moveq	r2, #2
+	strheq	r2, [r1]	@ movhi
+	b	.L22
+.L36:
+	.align	2
+.L35:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+264
+	.word	.LANCHOR0+296
 	.word	.LANCHOR0+300
-	.word	.LANCHOR0+304
-	.word	.LANCHOR0+308
-	.word	.LANCHOR0+316
 	.word	.LANCHOR0+328
 	.word	.LANCHOR0+340
 	.fnend
@@ -648,18 +436,31 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L83
+	ldr	r2, .L44
+	add	r3, r2, #348
 	ldrh	r3, [r3]
 	cmp	r3, #0
-	beq	.L82
-	b	IsBlkInVendorPart.part.0
-.L82:
-	mov	r0, r3
+	beq	.L43
+	ldr	r3, [r2, #352]
+	add	r2, r2, #324
+	ldrh	r2, [r2]
+	add	r2, r3, r2, lsl #1
+.L39:
+	cmp	r3, r2
+	bne	.L40
+.L43:
+	mov	r0, #0
+	bx	lr
+.L40:
+	ldrh	r1, [r3], #2
+	cmp	r0, r1
+	bne	.L39
+	mov	r0, #1
 	bx	lr
-.L84:
+.L45:
 	.align	2
-.L83:
-	.word	.LANCHOR0+348
+.L44:
+	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
@@ -688,10 +489,13 @@ sftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
+	ldr	r3, .L48
 	ldr	r0, [r3, #344]
 	bx	lr
+.L49:
+	.align	2
+.L48:
+	.word	.LANCHOR0
 	.fnend
 	.size	sftl_get_density, .-sftl_get_density
 	.global	__aeabi_uidivmod
@@ -705,44 +509,46 @@ FtlBbmMapBadBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r3, #306
-	movt	r4, #:upper16:.LANCHOR0
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
 	.pad #12
-	sub	sp, sp, #12
-	mov	r7, r0
-	ldrh	r5, [r4, r3]
-	mov	r9, #1
-	mov	r1, r5
+	movw	r3, #302
+	ldr	r4, .L52
+	mov	r5, r0
+	ldrh	r7, [r4, r3]
+	mov	r1, r7
 	bl	__aeabi_uidiv
 	uxth	r6, r0
-	mov	r1, r5
-	mov	r0, r7
+	mov	r1, r7
+	mov	r0, r5
 	bl	__aeabi_uidivmod
 	add	r2, r4, r6, lsl #2
 	uxth	r3, r1
-	ldr	lr, [r2, #380]
-	lsr	r5, r3, #5
-	and	r8, r3, #31
-	movw	r0, #:lower16:.LC7
-	add	r4, r4, #352
-	ldr	ip, [lr, r5, lsl #2]
-	mov	r1, r7
+	ldr	r2, [r2, #384]
+	lsr	r1, r3, #5
+	and	ip, r3, #31
+	mov	lr, #1
+	add	r4, r4, #356
+	ldr	r0, [r2, r1, lsl #2]
+	orr	r0, r0, lr, lsl ip
+	str	r0, [r2, r1, lsl #2]
 	mov	r2, r6
-	movt	r0, #:upper16:.LC7
-	orr	ip, ip, r9, lsl r8
-	str	ip, [lr, r5, lsl #2]
-	str	ip, [sp]
+	str	r0, [sp]
+	mov	r1, r5
+	ldr	r0, .L52+4
 	bl	sftl_printk
 	ldrh	r3, [r4, #6]
 	mov	r0, #0
-	add	r3, r3, r9
+	add	r3, r3, #1
 	strh	r3, [r4, #6]	@ movhi
 	add	sp, sp, #12
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
+	pop	{r4, r5, r6, r7, pc}
+.L53:
+	.align	2
+.L52:
+	.word	.LANCHOR0
+	.word	.LC7
 	.fnend
 	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
 	.align	2
@@ -755,28 +561,31 @@ FtlBbmIsBadBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r3, #306
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r5, r0
-	ldrh	r6, [r4, r3]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r3, #302
+	ldr	r5, .L56
+	mov	r7, r0
+	ldrh	r6, [r5, r3]
 	mov	r1, r6
 	bl	__aeabi_uidivmod
-	mov	r0, r5
-	uxth	r5, r1
+	mov	r0, r7
+	uxth	r4, r1
 	mov	r1, r6
 	bl	__aeabi_uidiv
 	uxth	r0, r0
-	lsr	r2, r5, #5
-	add	r4, r4, r0, lsl #2
-	and	r5, r5, #31
-	ldr	r3, [r4, #380]
+	lsr	r2, r4, #5
+	add	r5, r5, r0, lsl #2
+	and	r4, r4, #31
+	ldr	r3, [r5, #384]
 	ldr	r0, [r3, r2, lsl #2]
-	lsr	r0, r0, r5
+	lsr	r0, r0, r4
 	and	r0, r0, #1
-	pop	{r4, r5, r6, pc}
+	pop	{r4, r5, r6, r7, r8, pc}
+.L57:
+	.align	2
+.L56:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
 	.align	2
@@ -794,89 +603,6 @@ FtlBbtInfoPrint:
 	.fnend
 	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
 	.align	2
-	.global	FtlBbt2Bitmap
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlBbt2Bitmap, %function
-FtlBbt2Bitmap:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	mov	r4, r0
-	ldr	r6, .L100
-	mov	r5, r1
-	movw	r8, #:lower16:.LANCHOR1
-	movw	r7, #:lower16:.LC8
-	mov	r0, r1
-	mov	r1, #0
-	ldrh	r2, [r6], #-106
-	movt	r8, #:upper16:.LANCHOR1
-	movt	r7, #:upper16:.LC8
-	add	r9, r4, #1024
-	lsl	r2, r2, #2
-	bl	memset
-	b	.L95
-.L94:
-	and	r1, r3, #31
-	lsr	r3, r3, #5
-	add	r4, r4, #2
-	ldr	r2, [r5, r3, lsl #2]
-	mov	r0, #1
-	cmp	r9, r4
-	orr	r2, r2, r0, lsl r1
-	str	r2, [r5, r3, lsl #2]
-	beq	.L99
-.L95:
-	ldrh	r3, [r4]
-	movw	r2, #65535
-	cmp	r3, r2
-	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
-	ldrh	r2, [r6]
-	cmp	r2, r3
-	bhi	.L94
-	mov	r2, #74
-	mov	r1, r8
-	mov	r0, r7
-	bl	sftl_printk
-	ldrh	r3, [r4]
-	b	.L94
-.L99:
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L101:
-	.align	2
-.L100:
-	.word	.LANCHOR0+412
-	.fnend
-	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
-	.align	2
-	.global	FtlBbtMemInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlBbtMemInit, %function
-FtlBbtMemInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movw	r2, #:lower16:.LANCHOR0
-	mvn	r3, #0
-	movt	r2, #:upper16:.LANCHOR0
-	mov	ip, #0
-	add	r0, r2, #352
-	str	r3, [r2, #364]
-	strh	ip, [r0, #6]	@ movhi
-	strh	r3, [r0]	@ movhi
-	str	r3, [r2, #368]
-	str	r3, [r2, #372]
-	str	r3, [r2, #376]
-	bx	lr
-	.fnend
-	.size	FtlBbtMemInit, .-FtlBbtMemInit
-	.align	2
 	.global	FtlBbtCalcTotleCnt
 	.syntax unified
 	.arm
@@ -886,44 +612,33 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r8, #:lower16:.LANCHOR0
-	movt	r8, #:upper16:.LANCHOR0
-	movw	r2, #306
-	movw	r3, #262
-	mov	r7, #0
-	ldrh	r6, [r8, r2]
-	ldrh	r9, [r8, r3]
-	mul	r9, r6, r9
-	cmp	r9, #0
-	ble	.L104
-	mov	r4, r7
-.L106:
-	mov	r0, r4
-	mov	r1, r6
-	bl	__aeabi_uidivmod
+	ldr	r3, .L67
+	movw	r2, #302
+	movw	r1, #258
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	mov	r4, r5
+	ldrh	r2, [r3, r2]
+	ldrh	r6, [r3, r1]
+	mul	r6, r6, r2
+.L60:
+	uxth	r0, r5
+	cmp	r0, r6
+	blt	.L62
 	mov	r0, r4
-	uxth	r5, r1
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	r2, r5, #5
-	add	r0, r8, r0, lsl #2
-	and	r5, r5, #31
-	add	r4, r4, #1
-	ldr	r3, [r0, #380]
-	uxth	r4, r4
-	add	r1, r7, #1
-	ldr	r3, [r3, r2, lsl #2]
-	lsr	r5, r3, r5
-	tst	r5, #1
-	uxthne	r7, r1
-	cmp	r4, r9
-	blt	.L106
-.L104:
-	mov	r0, r7
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+	pop	{r4, r5, r6, pc}
+.L62:
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	add	r5, r5, #1
+	addne	r4, r4, #1
+	uxthne	r4, r4
+	b	.L60
+.L68:
+	.align	2
+.L67:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
 	.align	2
@@ -938,15 +653,14 @@ V2P_block:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
 	mov	r5, r1
-	add	r3, r4, #264
+	ldr	r4, .L71
 	mov	r7, r0
+	add	r3, r4, #260
 	ldrh	r6, [r3]
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	movw	r3, #306
+	movw	r3, #302
 	smulbb	r5, r6, r5
 	ldrh	r4, [r4, r3]
 	mov	r1, r6
@@ -957,6 +671,10 @@ V2P_block:
 	add	r0, r4, r0
 	uxth	r0, r0
 	pop	{r4, r5, r6, r7, r8, pc}
+.L72:
+	.align	2
+.L71:
+	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
 	.align	2
@@ -969,23 +687,26 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
+	ldr	r3, .L75
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movt	r3, #:upper16:.LANCHOR0
-	movw	r1, #306
-	add	r2, r3, #264
-	mov	r5, r0
-	ldrh	r4, [r2]
-	ldrh	r1, [r3, r1]
+	mov	r6, r0
+	add	r2, r3, #260
+	ldrh	r5, [r2]
+	movw	r2, #302
+	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
-	mov	r1, r4
-	smulbb	r4, r0, r4
-	mov	r0, r5
+	mov	r1, r5
+	smulbb	r4, r0, r5
+	mov	r0, r6
 	bl	__aeabi_uidivmod
-	add	r4, r4, r1
-	uxth	r0, r4
+	add	r1, r4, r1
+	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
+.L76:
+	.align	2
+.L75:
+	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
 	.align	2
@@ -1000,17 +721,20 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r3, #306
-	movt	r4, #:upper16:.LANCHOR0
+	movw	r3, #302
+	ldr	r4, .L79
 	ldrh	r1, [r4, r3]
-	add	r4, r4, #264
+	add	r4, r4, #260
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
 	ldrh	r1, [r4]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
+.L80:
+	.align	2
+.L79:
+	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
 	.align	2
@@ -1025,13 +749,13 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L120
+	bls	.L82
 	sub	r0, r0, r1
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L120:
+.L82:
 	sub	r0, r1, r0
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -1040,34 +764,6 @@ ftl_cmp_data_ver:
 	.fnend
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	2
-	.global	FtlFreeSysBlkQueueInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlFreeSysBlkQueueInit, %function
-FtlFreeSysBlkQueueInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	ip, #:lower16:.LANCHOR0
-	push	{r4, lr}
-	.save {r4, lr}
-	movt	ip, #:upper16:.LANCHOR0
-	mov	r4, #0
-	add	r3, ip, #416
-	mov	r1, r4
-	strh	r0, [r3]	@ movhi
-	mov	r2, #2048
-	add	r0, ip, #424
-	strh	r4, [r3, #2]	@ movhi
-	strh	r4, [r3, #4]	@ movhi
-	strh	r4, [r3, #6]	@ movhi
-	bl	memset
-	mov	r0, r4
-	pop	{r4, pc}
-	.fnend
-	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
-	.align	2
 	.global	FtlFreeSysBlkQueueEmpty
 	.syntax unified
 	.arm
@@ -1078,14 +774,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L125
+	ldr	r3, .L85
 	ldrh	r0, [r3, #6]
 	clz	r0, r0
 	lsr	r0, r0, #5
 	bx	lr
-.L126:
+.L86:
 	.align	2
-.L125:
+.L85:
 	.word	.LANCHOR0+416
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -1100,15 +796,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L128
+	ldr	r3, .L88
 	ldrh	r0, [r3, #6]
 	sub	r0, r0, #1024
 	clz	r0, r0
 	lsr	r0, r0, #5
 	bx	lr
-.L129:
+.L89:
 	.align	2
-.L128:
+.L88:
 	.word	.LANCHOR0+416
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -1122,38 +818,42 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L142
-	ldrh	r3, [r0, #6]
-	cmp	r3, #0
+	ldr	r3, .L103
+	ldrh	r2, [r3, #6]
+	cmp	r2, #0
 	bxeq	lr
-	ldr	r3, .L142+4
+	ldr	r2, .L103+4
+	mov	r0, #0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldrh	r4, [r3, #28]
-	ands	r4, r4, #31
-	popeq	{r4, pc}
-	ldrh	r2, [r0, #2]
-	mov	r1, #0
-	ldrh	r3, [r0, #4]
-.L133:
-	add	lr, r0, r2, lsl #1
+	mov	r4, r0
+	ldrh	r1, [r3, #2]
+	ldrh	lr, [r2, #28]
+	ldrh	r2, [r3, #4]
+	and	lr, lr, #31
+.L92:
+	uxth	ip, r0
+	add	r0, r0, #1
+	cmp	lr, ip
+	bgt	.L93
+	cmp	r4, #0
+	strhne	r1, [r3, #2]	@ movhi
+	strhne	r2, [r3, #4]	@ movhi
+	pop	{r4, pc}
+.L93:
+	add	ip, r3, r1, lsl #1
 	add	r1, r1, #1
-	uxth	r1, r1
-	add	ip, r0, r3, lsl #1
-	ldrh	lr, [lr, #8]
-	cmp	r4, r1
-	add	r2, r2, #1
-	add	r3, r3, #1
+	ubfx	r1, r1, #0, #10
+	ldrh	r4, [ip, #8]
+	add	ip, r3, r2, lsl #1
+	strh	r4, [ip, #8]	@ movhi
+	mov	r4, #1
+	add	r2, r2, r4
 	ubfx	r2, r2, #0, #10
-	strh	lr, [ip, #8]	@ movhi
-	ubfx	r3, r3, #0, #10
-	bgt	.L133
-	strh	r2, [r0, #2]	@ movhi
-	strh	r3, [r0, #4]	@ movhi
-	pop	{r4, pc}
-.L143:
+	b	.L92
+.L104:
 	.align	2
-.L142:
+.L103:
 	.word	.LANCHOR0+416
 	.word	.LANCHOR0+2472
 	.fnend
@@ -1168,113 +868,177 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L157
-	ldrh	r1, [ip, #6]
-	cmp	r1, #1024
-	beq	.L149
-	cmp	r1, #0
-	beq	.L149
+	ldr	r3, .L115
+	ldrh	ip, [r3, #6]
+	cmp	ip, #1024
+	beq	.L109
 	str	lr, [sp, #-4]!
 	.save {lr}
-	ldrh	lr, [ip, #2]
-	ubfx	r3, lr, #0, #10
-	add	r3, ip, r3, lsl #1
-	ldrh	r3, [r3, #8]
-	cmp	r3, r0
-	beq	.L152
-	mov	r2, #0
-	b	.L147
-.L148:
-	ldrh	r3, [r3, #8]
-	cmp	r3, r0
-	beq	.L152
-.L147:
-	add	r2, r2, #1
-	add	r3, r2, lr
-	cmp	r2, r1
-	ubfx	r3, r3, #0, #10
-	add	r3, ip, r3, lsl #1
-	bcc	.L148
+	mov	r1, #0
+	ldrh	lr, [r3, #2]
+.L107:
+	cmp	r1, ip
+	bcc	.L108
 	mov	r0, #0
 	ldr	pc, [sp], #4
-.L152:
-	mov	r0, #1
-	ldr	pc, [sp], #4
-.L149:
+.L108:
+	add	r2, r1, lr
+	ubfx	r2, r2, #0, #10
+	add	r2, r3, r2, lsl #1
+	ldrh	r2, [r2, #8]
+	cmp	r2, r0
+	beq	.L110
+	add	r1, r1, #1
+	b	.L107
+.L109:
 	mov	r0, #0
 	bx	lr
-.L158:
+.L110:
+	mov	r0, #1
+	ldr	pc, [sp], #4
+.L116:
 	.align	2
-.L157:
+.L115:
 	.word	.LANCHOR0+416
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
 	.align	2
-	.global	INSERT_DATA_LIST
+	.global	insert_data_list
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	INSERT_DATA_LIST, %function
-INSERT_DATA_LIST:
+	.type	insert_data_list, %function
+insert_data_list:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r2, [r4, #20]
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r2, .L132
+	ldrh	r3, [r2, #244]
+	cmp	r3, r0
+	bls	.L119
+	mov	r4, #6
+	ldr	r7, [r2, #2520]
+	mul	r4, r4, r0
+	mvn	lr, #0
+	add	ip, r7, r4
+	strh	lr, [ip, #2]	@ movhi
+	strh	lr, [r7, r4]	@ movhi
+	ldr	r3, [r2, #2524]
+	cmp	r3, #0
+	streq	ip, [r2, #2524]
+	beq	.L119
+	ldr	r9, [r2, #76]
+	mov	r1, r2
+	lsl	r2, r0, #1
+	ldr	r8, [r1, #2520]
+	movw	r10, #65535
+	ldrh	r5, [r9, r2]
+	ldrh	r2, [ip, #4]
+	cmp	r2, #0
+	mulne	lr, r2, r5
+	sub	r2, r3, r8
+	asr	r5, r2, #1
+	ldr	r2, .L132+4
+	mul	r2, r2, r5
+	ldrh	r5, [r1, #244]
+	str	r5, [sp, #4]
+	mov	r5, #0
+	uxth	r2, r2
+.L125:
+	ldr	r6, [sp, #4]
+	add	r5, r5, #1
+	uxth	r5, r5
+	cmp	r5, r6
+	movls	r6, #0
+	movhi	r6, #1
 	cmp	r0, r2
-	bcc	.L163
-.L160:
-	movw	r1, #2520
-	ldrh	r3, [r4, r1]
-	add	r3, r3, #1
-	uxth	r3, r3
+	orreq	r6, r6, #1
+	cmp	r6, #0
+	bne	.L119
+	ldrh	r6, [r3, #4]
+	cmp	r6, #0
+	beq	.L123
+	lsl	fp, r2, #1
+	ldrh	fp, [r9, fp]
+	mul	r6, r6, fp
+	cmp	r6, lr
+	bcs	.L123
+	ldrh	r6, [r3]
+	cmp	r6, r10
+	bne	.L124
+	strh	r2, [ip, #2]	@ movhi
+	strh	r0, [r3]	@ movhi
+	str	ip, [r1, #2528]
+.L119:
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L124:
+	mov	r3, #6
+	mov	r2, r6
+	mla	r3, r3, r6, r8
+	b	.L125
+.L123:
+	strh	r2, [r7, r4]	@ movhi
+	ldrh	r2, [r3, #2]
+	strh	r2, [ip, #2]	@ movhi
+	ldr	r2, [r1, #2524]
 	cmp	r3, r2
-	strh	r3, [r4, r1]	@ movhi
-	popls	{r4, pc}
-	movw	r0, #:lower16:.LC8
-	mov	r2, #214
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L164
-	pop	{r4, lr}
-	b	sftl_printk
-.L163:
-	bl	insert_data_list.part.1
-	ldrh	r2, [r4, #20]
-	b	.L160
-.L165:
+	ldrhne	ip, [r3, #2]
+	movne	r2, #6
+	ldrne	r1, [r1, #2520]
+	strheq	r0, [r3, #2]	@ movhi
+	streq	ip, [r1, #2524]
+	mulne	r2, r2, ip
+	strhne	r0, [r1, r2]	@ movhi
+	strhne	r0, [r3, #2]	@ movhi
+	b	.L119
+.L133:
 	.align	2
-.L164:
-	.word	.LANCHOR1+16
+.L132:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
-	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.size	insert_data_list, .-insert_data_list
 	.align	2
-	.global	insert_data_list
+	.global	INSERT_DATA_LIST
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	insert_data_list, %function
-insert_data_list:
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r3, [r3, #20]
-	cmp	r3, r0
-	bls	.L169
 	push	{r4, lr}
 	.save {r4, lr}
-	bl	insert_data_list.part.1
-	mov	r0, #0
-	pop	{r4, pc}
-.L169:
-	mov	r0, #0
-	bx	lr
+	bl	insert_data_list
+	movw	r1, #2532
+	ldr	r2, .L137
+	ldrh	r3, [r2, r1]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r2, r1]	@ movhi
+	ldrh	r2, [r2, #244]
+	cmp	r2, r3
+	popcs	{r4, pc}
+	mov	r2, #214
+	ldr	r1, .L137+4
+	ldr	r0, .L137+8
+	pop	{r4, lr}
+	b	sftl_printk
+.L138:
+	.align	2
+.L137:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LC8
 	.fnend
-	.size	insert_data_list, .-insert_data_list
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
 	.align	2
 	.global	insert_free_list
 	.syntax unified
@@ -1285,89 +1049,71 @@ insert_free_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	ip, #65535
-	cmp	r0, ip
-	beq	.L186
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	lsl	r4, r0, #1
-	movt	r5, #:upper16:.LANCHOR0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movw	r4, #65535
+	cmp	r0, r4
+	beq	.L140
+	ldr	r2, .L147
+	mov	r1, #6
+	mul	r5, r1, r0
 	mvn	r3, #0
-	ldr	r7, [r5, #8]
-	add	r6, r4, r0
-	lsl	r6, r6, #1
-	add	r8, r7, r6
-	strh	r3, [r8, #2]	@ movhi
-	strh	r3, [r7, r6]	@ movhi
-	ldr	r9, [r5, #2524]
-	cmp	r9, #0
-	beq	.L189
-	ldr	r1, [r5, #8]
-	movw	r3, #43691
-	movt	r3, 43690
-	ldr	lr, [r5, #2528]
-	sub	r2, r9, r1
-	asr	r2, r2, #1
-	ldrh	r4, [lr, r4]
-	mul	r3, r3, r2
-	uxth	r2, r3
-	mov	r3, r2
-	lsl	r2, r2, #1
-	ldrh	r2, [lr, r2]
-	cmp	r2, r4
-	bcs	.L181
-	ldrh	r2, [r9]
-	cmp	r2, ip
-	bne	.L178
-	b	.L191
-.L179:
-	ldrh	r3, [r1, r3]
-	cmp	r3, ip
-	beq	.L176
-	mov	r2, r3
-.L178:
-	lsl	r3, r2, #1
-	ldrh	r9, [lr, r3]
-	add	r3, r3, r2
-	lsl	r3, r3, #1
-	cmp	r9, r4
-	add	r9, r1, r3
-	bcc	.L179
-.L175:
-	ldrh	r3, [r9, #2]
-	strh	r3, [r8, #2]	@ movhi
-	strh	r2, [r7, r6]	@ movhi
-	ldr	r3, [r5, #2524]
-	cmp	r3, r9
-	beq	.L192
-	ldrh	r3, [r9, #2]
-	ldr	r2, [r5, #8]
-	add	r3, r3, r3, lsl #1
-	lsl	r3, r3, #1
-	strh	r0, [r2, r3]	@ movhi
-	strh	r0, [r9, #2]	@ movhi
-	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L191:
-	mov	r2, r3
-.L176:
-	strh	r2, [r8, #2]	@ movhi
-	strh	r0, [r9]	@ movhi
-	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L186:
-	mov	r0, #0
-	bx	lr
-.L192:
-	strh	r0, [r9, #2]	@ movhi
-.L189:
-	str	r8, [r5, #2524]
+	ldr	r6, [r2, #2520]
+	mov	ip, r2
+	add	lr, r6, r5
+	strh	r3, [lr, #2]	@ movhi
+	strh	r3, [r6, r5]	@ movhi
+	ldr	r3, [r2, #2536]
+	cmp	r3, #0
+	streq	lr, [r2, #2536]
+	beq	.L140
+	ldr	r8, [r2, #2540]
+	lsl	r2, r0, #1
+	ldr	r7, [ip, #2520]
+	ldrh	r9, [r8, r2]
+	sub	r2, r3, r7
+	asr	r10, r2, #1
+	ldr	r2, .L147+4
+	mul	r2, r2, r10
+	mov	r10, r1
+	uxth	r2, r2
+.L144:
+	lsl	r1, r2, #1
+	ldrh	r1, [r8, r1]
+	cmp	r1, r9
+	bcs	.L142
+	ldrh	r1, [r3]
+	cmp	r1, r4
+	bne	.L143
+	strh	r2, [lr, #2]	@ movhi
+	strh	r0, [r3]	@ movhi
+.L140:
 	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L181:
-	mov	r2, r3
-	b	.L175
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L143:
+	mla	r3, r10, r1, r7
+	mov	r2, r1
+	b	.L144
+.L142:
+	ldrh	r1, [r3, #2]
+	strh	r1, [lr, #2]	@ movhi
+	strh	r2, [r6, r5]	@ movhi
+	ldr	r2, [ip, #2536]
+	cmp	r3, r2
+	ldrhne	lr, [r3, #2]
+	movne	r2, #6
+	ldrne	r1, [ip, #2520]
+	strheq	r0, [r3, #2]	@ movhi
+	streq	lr, [ip, #2536]
+	mulne	r2, r2, lr
+	strhne	r0, [r1, r2]	@ movhi
+	strhne	r0, [r3, #2]	@ movhi
+	b	.L140
+.L148:
+	.align	2
+.L147:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
 	.size	insert_free_list, .-insert_free_list
 	.align	2
@@ -1383,25 +1129,25 @@ INSERT_FREE_LIST:
 	push	{r4, lr}
 	.save {r4, lr}
 	bl	insert_free_list
-	movw	r2, #:lower16:.LANCHOR0
-	movt	r2, #:upper16:.LANCHOR0
-	ldrh	r3, [r2, #236]
-	ldrh	r1, [r2, #20]
+	ldr	r2, .L152
+	ldrh	r3, [r2, #228]
 	add	r3, r3, #1
 	uxth	r3, r3
-	cmp	r1, r3
-	strh	r3, [r2, #236]	@ movhi
+	strh	r3, [r2, #228]	@ movhi
+	ldrh	r2, [r2, #244]
+	cmp	r2, r3
 	popcs	{r4, pc}
-	movw	r0, #:lower16:.LC8
 	mov	r2, #207
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L196
+	ldr	r1, .L152+4
+	ldr	r0, .L152+8
 	pop	{r4, lr}
 	b	sftl_printk
-.L197:
+.L153:
 	.align	2
-.L196:
-	.word	.LANCHOR1+36
+.L152:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+17
+	.word	.LC8
 	.fnend
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
 	.align	2
@@ -1416,82 +1162,72 @@ List_remove_node:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	add	r1, r1, r1, lsl #1
-	movt	r6, #:upper16:.LANCHOR0
+	mov	r6, #6
+	ldr	r4, .L161
+	mul	r6, r6, r1
 	movw	r3, #65535
-	ldr	r7, [r6, #8]
-	lsl	r4, r1, #1
 	mov	r8, r0
-	add	r5, r7, r4
+	ldr	r7, [r4, #2520]
+	add	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	beq	.L211
-.L199:
-	ldr	r3, [r8]
+	bne	.L155
+	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L203
-	ldrh	r3, [r7, r4]
+	beq	.L155
+	mov	r2, #372
+	ldr	r1, .L161+4
+	ldr	r0, .L161+8
+	bl	sftl_printk
+.L155:
+	ldr	r3, [r8]
 	movw	r2, #65535
+	cmp	r5, r3
+	ldrh	r3, [r7, r6]
+	bne	.L156
 	cmp	r3, r2
-	beq	.L212
-	ldr	r2, [r6, #8]
-	add	r3, r3, r3, lsl #1
-	ldrh	r1, [r5, #2]
-	add	r3, r2, r3, lsl #1
-	strh	r1, [r3, #2]	@ movhi
-	ldrh	r3, [r5, #2]
-	ldr	r2, [r6, #8]
-	ldrh	r1, [r7, r4]
-	add	r3, r3, r3, lsl #1
-	lsl	r3, r3, #1
-	strh	r1, [r2, r3]	@ movhi
-.L205:
+	ldrne	r2, [r4, #2520]
+	movne	r1, #6
+	moveq	r3, #0
+	streq	r3, [r8]
+	mlane	r3, r1, r3, r2
+	mvnne	r2, #0
+	strne	r3, [r8]
+	strhne	r2, [r3, #2]	@ movhi
+.L158:
 	mvn	r3, #0
 	mov	r0, #0
-	strh	r3, [r7, r4]	@ movhi
+	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L211:
-	ldr	r3, [r0]
-	cmp	r5, r3
-	beq	.L203
-	movw	r0, #:lower16:.LC8
-	mov	r2, #372
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L214
-	bl	sftl_printk
-	b	.L199
-.L212:
-	ldrh	r2, [r5, #2]
-	cmp	r2, r3
-	beq	.L205
-	add	r2, r2, r2, lsl #1
-	ldr	r3, [r6, #8]
-	mvn	r1, #0
-	lsl	r2, r2, #1
-	strh	r1, [r3, r2]	@ movhi
-	b	.L205
-.L203:
-	ldrh	r3, [r7, r4]
-	movw	r2, #65535
+.L156:
 	cmp	r3, r2
-	beq	.L213
-	ldr	r2, [r6, #8]
-	add	r3, r3, r3, lsl #1
-	mvn	r1, #0
-	add	r3, r2, r3, lsl #1
-	str	r3, [r8]
+	ldrh	r1, [r5, #2]
+	bne	.L159
+	cmp	r1, r3
+	movne	r3, #6
+	ldrne	r2, [r4, #2520]
+	mulne	r1, r3, r1
+	mvnne	r3, #0
+	strhne	r3, [r2, r1]	@ movhi
+	b	.L158
+.L159:
+	ldr	r0, [r4, #2520]
+	mov	r2, #6
+	mla	r3, r2, r3, r0
 	strh	r1, [r3, #2]	@ movhi
-	b	.L205
-.L213:
-	mov	r3, #0
-	str	r3, [r8]
-	b	.L205
-.L215:
+	ldrh	r0, [r5, #2]
+	ldrh	r1, [r7, r6]
+	ldr	r3, [r4, #2520]
+	mul	r2, r2, r0
+	strh	r1, [r3, r2]	@ movhi
+	b	.L158
+.L162:
 	.align	2
-.L214:
-	.word	.LANCHOR1+56
+.L161:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+34
+	.word	.LC8
 	.fnend
 	.size	List_remove_node, .-List_remove_node
 	.align	2
@@ -1504,51 +1240,43 @@ List_pop_index_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, [r0]
-	cmp	ip, #0
-	beq	.L222
-	cmp	r1, #0
+	ldr	r3, [r0]
+	cmp	r3, #0
+	beq	.L169
+	ldr	r2, .L174
 	push	{r4, lr}
 	.save {r4, lr}
-	beq	.L232
-	ldrh	r3, [ip]
 	movw	lr, #65535
-	cmp	r3, lr
-	beq	.L232
-	movw	r2, #:lower16:.LANCHOR0
-	movt	r2, #:upper16:.LANCHOR0
-	ldr	r2, [r2, #8]
-	b	.L221
-.L233:
-	ldrh	r3, [r2, r3]
-	cmp	r3, lr
-	beq	.L219
-.L221:
-	sub	r1, r1, #1
-	add	r3, r3, r3, lsl #1
-	uxth	r1, r1
-	lsl	r3, r3, #1
+	mov	r4, #6
+	ldr	r2, [r2, #2520]
+.L165:
 	cmp	r1, #0
-	add	ip, r2, r3
-	bne	.L233
-.L219:
-	sub	r2, ip, r2
-	movw	r4, #43691
-	asr	r2, r2, #1
-	movt	r4, 43690
-	mul	r4, r4, r2
+	bne	.L166
+.L168:
+	ldr	r4, .L174+4
+	sub	r3, r3, r2
+	asr	r3, r3, #1
+	mul	r4, r4, r3
 	uxth	r1, r4
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, pc}
-.L222:
+.L166:
+	ldrh	ip, [r3]
+	cmp	ip, lr
+	beq	.L168
+	sub	r1, r1, #1
+	mla	r3, r4, ip, r2
+	uxth	r1, r1
+	b	.L165
+.L169:
 	movw	r0, #65535
 	bx	lr
-.L232:
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r2, [r3, #8]
-	b	.L219
+.L175:
+	.align	2
+.L174:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
 	.size	List_pop_index_node, .-List_pop_index_node
 	.align	2
@@ -1577,45 +1305,39 @@ List_get_gc_head_node:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r2, #:lower16:.LANCHOR0
-	movt	r2, #:upper16:.LANCHOR0
-	ldr	r1, [r2, #12]
-	cmp	r1, #0
-	beq	.L240
-	cmp	r0, #0
-	beq	.L237
-	ldrh	r3, [r1]
-	movw	ip, #65535
-	cmp	r3, ip
-	beq	.L240
-	ldr	r2, [r2, #8]
-	b	.L239
-.L247:
-	ldrh	r3, [r2, r3]
-	cmp	r3, ip
-	beq	.L240
-.L239:
+	ldr	r2, .L183
+	ldr	r3, [r2, #2524]
+	cmp	r3, #0
+	ldrne	r1, [r2, #2520]
+	movne	ip, #6
+	movwne	r2, #65535
+	bne	.L179
+.L182:
+	movw	r0, #65535
+	bx	lr
+.L181:
 	sub	r0, r0, #1
-	add	r3, r3, r3, lsl #1
+	mla	r3, ip, r3, r1
 	uxth	r0, r0
-	lsl	r3, r3, #1
+.L179:
 	cmp	r0, #0
-	add	r1, r2, r3
-	bne	.L247
-.L238:
-	sub	r2, r1, r2
-	movw	r3, #43691
-	asr	r0, r2, #1
-	movt	r3, 43690
-	mul	r3, r3, r0
+	beq	.L180
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	bne	.L181
+	b	.L182
+.L180:
+	ldr	r0, .L183+4
+	sub	r3, r3, r1
+	asr	r3, r3, #1
+	mul	r3, r0, r3
 	uxth	r0, r3
 	bx	lr
-.L240:
-	movw	r0, #65535
-	bx	lr
-.L237:
-	ldr	r2, [r2, #8]
-	b	.L238
+.L184:
+	.align	2
+.L183:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
 	.size	List_get_gc_head_node, .-List_get_gc_head_node
 	.align	2
@@ -1628,111 +1350,98 @@ List_update_data_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r3, [r4, #40]
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	ldr	r4, .L197
+	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L250
-	ldrh	r3, [r4, #88]
+	beq	.L187
+	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L250
-	ldrh	r3, [r4, #136]
+	beq	.L187
+	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	beq	.L250
-	ldr	r2, [r4, #8]
+	beq	.L187
+	mov	r7, #6
+	ldr	r9, [r4, #2520]
+	mul	r7, r7, r0
+	ldr	r3, [r4, #2524]
+	add	r8, r9, r7
+	cmp	r8, r3
+	beq	.L187
+	ldr	r2, [r4, #76]
 	lsl	r3, r0, #1
-	ldr	r1, [r4, #12]
-	add	r7, r3, r0
-	add	r7, r2, r7, lsl #1
-	cmp	r7, r1
-	beq	.L250
-	ldr	r1, [r4, #16]
+	ldrh	r6, [r8, #4]
 	mov	r5, r0
-	ldrh	r8, [r7, #4]
-	ldrh	r6, [r7, #2]
-	ldrh	r3, [r1, r3]
-	cmp	r8, #0
-	mvneq	r8, #0
-	mulne	r8, r8, r3
-	movw	r3, #65535
-	cmp	r6, r3
-	beq	.L261
-.L253:
-	add	r6, r6, r6, lsl #1
-	movw	r3, #43691
-	movt	r3, 43690
-	lsl	r6, r6, #1
-	asr	r0, r6, #1
-	add	r6, r2, r6
-	ldrh	r2, [r6, #4]
-	mul	r3, r3, r0
-	cmp	r2, #0
-	mvneq	r2, #0
-	lsl	r3, r3, #1
-	ldrh	r3, [r1, r3]
-	mulne	r2, r2, r3
-	cmp	r8, r2
-	bcc	.L262
-.L250:
-	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L262:
-	mov	r1, r5
-	ldr	r0, .L266
-	movw	r6, #2520
-	bl	List_remove_node
-	ldrh	r3, [r4, r6]
-	cmp	r3, #0
-	beq	.L263
-.L257:
-	sub	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	movw	r2, #65535
+	cmp	r6, #0
+	mvneq	r6, #0
+	mulne	r6, r6, r3
+	ldrh	r3, [r8, #2]
+	cmp	r3, r2
+	bne	.L190
+	ldrh	r2, [r9, r7]
+	cmp	r2, r3
+	bne	.L190
+	movw	r2, #463
+	ldr	r1, .L197+4
+	ldr	r0, .L197+8
+	bl	sftl_printk
+.L190:
+	ldrh	r3, [r8, #2]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L191
+	ldrh	r2, [r9, r7]
+	cmp	r2, r3
+	beq	.L187
+.L191:
+	mov	r2, #6
+	mul	r2, r2, r3
+	ldr	r3, .L197+12
+	asr	r1, r2, #1
+	mul	r3, r3, r1
+	ldr	r1, [r4, #76]
+	lsl	r3, r3, #1
+	ldrh	r0, [r1, r3]
+	ldr	r1, [r4, #2520]
+	add	r2, r1, r2
+	ldrh	r3, [r2, #4]
+	cmp	r3, #0
+	mulne	r3, r3, r0
+	mvneq	r3, #0
+	cmp	r6, r3
+	bcs	.L187
+	mov	r1, r5
+	ldr	r0, .L197+16
+	bl	List_remove_node
+	movw	r3, #2532
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L193
+	movw	r2, #474
+	ldr	r1, .L197+4
+	ldr	r0, .L197+8
+	bl	sftl_printk
+.L193:
+	movw	r2, #2532
 	mov	r0, r5
-	movw	r2, #2520
+	ldrh	r3, [r4, r2]
+	sub	r3, r3, #1
 	strh	r3, [r4, r2]	@ movhi
 	bl	INSERT_DATA_LIST
+.L187:
 	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L261:
-	ldrh	r3, [r7]
-	cmp	r3, r6
-	beq	.L264
-.L254:
-	ldr	r2, [r4, #8]
-	ldr	r1, [r4, #16]
-	b	.L253
-.L263:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #474
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L266+4
-	bl	sftl_printk
-	ldrh	r3, [r4, r6]
-	b	.L257
-.L264:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #463
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L266+4
-	bl	sftl_printk
-	ldrh	r3, [r7, #2]
-	cmp	r3, r6
-	bne	.L265
-	ldrh	r3, [r7]
-	cmp	r3, r6
-	beq	.L250
-	b	.L254
-.L265:
-	mov	r6, r3
-	ldr	r2, [r4, #8]
-	ldr	r1, [r4, #16]
-	b	.L253
-.L267:
-	.align	2
-.L266:
-	.word	.LANCHOR0+12
-	.word	.LANCHOR1+76
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L198:
+	.align	2
+.L197:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+51
+	.word	.LC8
+	.word	-1431655765
+	.word	.LANCHOR0+2524
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	2
@@ -1745,95 +1454,86 @@ select_l2p_ram_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r5, #:lower16:.LANCHOR0
+	ldr	r0, .L210
 	movw	r3, #342
-	movt	r5, #:upper16:.LANCHOR0
-	ldrh	r4, [r5, r3]
-	cmp	r4, #0
-	beq	.L269
-	ldr	r2, [r5, #2532]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r1, #0
 	movw	ip, #65535
-	ldrh	r3, [r2]
-	cmp	r3, ip
-	movne	r3, r2
-	movne	r0, #0
-	bne	.L272
-	b	.L291
-.L273:
-	ldrh	r1, [r3, #12]!
-	cmp	r1, ip
-	beq	.L292
-.L272:
-	add	r0, r0, #1
-	uxth	r0, r0
-	cmp	r0, r4
-	bne	.L273
+	mov	lr, r0
+	ldrh	r2, [r0, r3]
+	ldr	r3, [r0, #2544]
+	mov	r0, #12
+.L200:
+	uxth	r4, r1
+	cmp	r4, r2
+	bcc	.L202
+	mov	r4, r2
 	mov	r1, #0
-	mov	r4, r0
-	mov	lr, r1
-	mov	ip, #-2147483648
-.L275:
-	ldr	r3, [r2, #4]
-	add	r1, r1, #1
-	add	r2, r2, #12
-	cmp	r3, ip
-	movcs	r6, #0
-	movcc	r6, #1
-	cmp	r3, #0
-	movlt	r6, #0
-	cmp	r6, #0
-	movne	r4, lr
-	uxth	lr, r1
-	movne	ip, r3
-	cmp	r0, lr
-	bhi	.L275
-	cmp	r4, r0
-	bcc	.L282
-	movw	r2, #2536
-	ldr	r3, [r5, #2532]
-	ldrh	r6, [r5, r2]
-	mov	r2, #0
-	mov	r1, r2
-	mov	r4, r0
-	mvn	lr, #0
-.L277:
-	ldr	ip, [r3, #4]
-	add	r2, r2, #1
-	cmp	ip, lr
-	bcs	.L276
-	ldrh	r5, [r3]
-	cmp	r5, r6
-	movne	lr, ip
-	movne	r4, r1
-.L276:
-	uxth	r1, r2
-	add	r3, r3, #12
-	cmp	r1, r0
-	bcc	.L277
-	cmp	r4, r0
-	bcs	.L269
-.L282:
-	mov	r0, r4
-	pop	{r4, r5, r6, pc}
-.L292:
-	pop	{r4, r5, r6, pc}
-.L269:
-	movw	r0, #:lower16:.LC8
+	mov	r0, #-2147483648
+	mov	r6, #12
+.L203:
+	uxth	r5, r1
+	cmp	r5, r2
+	bcc	.L205
+	cmp	r4, r2
+	bcc	.L201
+	movw	r1, #2548
+	mov	r4, r2
+	ldrh	r5, [lr, r1]
+	mvn	r0, #0
+	mov	r1, #0
+.L206:
+	uxth	ip, r1
+	cmp	ip, r2
+	bcc	.L208
+	cmp	r4, r2
+	bcc	.L201
 	movw	r2, #789
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L293
+	ldr	r1, .L210+4
+	ldr	r0, .L210+8
 	bl	sftl_printk
+	b	.L201
+.L202:
+	add	r1, r1, #1
+	mla	r5, r0, r1, r3
+	ldrh	r5, [r5, #-12]
+	cmp	r5, ip
+	bne	.L200
+.L201:
 	mov	r0, r4
-	pop	{r4, r5, r6, pc}
-.L291:
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L294:
+	pop	{r4, r5, r6, r7, r8, pc}
+.L205:
+	mla	ip, r6, r1, r3
+	add	r1, r1, #1
+	ldr	ip, [ip, #4]
+	cmp	r0, ip
+	movls	r7, #0
+	movhi	r7, #1
+	cmp	ip, #0
+	movlt	r7, #0
+	cmp	r7, #0
+	movne	r0, ip
+	movne	r4, r5
+	b	.L203
+.L208:
+	ldr	lr, [r3, #4]
+	cmp	r0, lr
+	bls	.L207
+	ldrh	r6, [r3]
+	cmp	r6, r5
+	movne	r0, lr
+	movne	r4, ip
+.L207:
+	add	r1, r1, #1
+	add	r3, r3, #12
+	b	.L206
+.L211:
 	.align	2
-.L293:
-	.word	.LANCHOR1+100
+.L210:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+73
+	.word	.LC8
 	.fnend
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
@@ -1846,22 +1546,41 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movw	r2, #2538
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r1, [r3, r2]
-	cmp	r1, #4
+	ldr	ip, .L221
+	movw	r1, #2550
+	ldrh	r2, [ip, r1]
+	cmp	r2, #4
 	cmpls	r0, #0
-	beq	.L299
-	mov	r1, #0
-	strh	r1, [r3, r2]	@ movhi
-	str	r1, [r3, #28]
-	b	FtlUpdateVaildLpn.part.5
-.L299:
-	add	r1, r1, #1
-	strh	r1, [r3, r2]	@ movhi
+	bne	.L213
+	add	r2, r2, #1
+	strh	r2, [ip, r1]	@ movhi
 	bx	lr
+.L213:
+	mov	r2, #0
+	str	lr, [sp, #-4]!
+	.save {lr}
+	strh	r2, [ip, r1]	@ movhi
+	mov	r3, ip
+	movw	lr, #65535
+	str	r2, [ip, #2552]
+	ldrh	r1, [ip, #244]
+	ldr	r2, [ip, #76]
+	add	r1, r2, r1, lsl #1
+.L214:
+	cmp	r2, r1
+	bne	.L216
+	ldr	pc, [sp], #4
+.L216:
+	ldrh	ip, [r2], #2
+	cmp	ip, lr
+	ldrne	r0, [r3, #2552]
+	addne	r0, r0, ip
+	strne	r0, [r3, #2552]
+	b	.L214
+.L222:
+	.align	2
+.L221:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
@@ -1877,19 +1596,22 @@ ftl_set_blk_mode:
 	@ link register save eliminated.
 	cmp	r1, #0
 	mov	r3, r0
-	bne	.L302
-	movw	r2, #:lower16:.LANCHOR0
+	beq	.L224
+	b	ftl_set_blk_mode.part.6
+.L224:
+	ldr	r2, .L225
 	lsr	r0, r0, #5
-	movt	r2, #:upper16:.LANCHOR0
-	ldr	r1, [r2, #32]
 	and	r3, r3, #31
 	mov	ip, #1
+	ldr	r1, [r2, #24]
 	ldr	r2, [r1, r0, lsl #2]
 	bic	r3, r2, ip, lsl r3
 	str	r3, [r1, r0, lsl #2]
 	bx	lr
-.L302:
-	b	ftl_set_blk_mode.part.6
+.L226:
+	.align	2
+.L225:
+	.word	.LANCHOR0
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
 	.align	2
@@ -1903,104 +1625,20 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
+	ldr	r3, .L228
 	lsr	r2, r0, #5
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r3, [r3, #32]
 	and	r0, r0, #31
+	ldr	r3, [r3, #24]
 	ldr	r3, [r3, r2, lsl #2]
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-	.fnend
-	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
-	.align	2
-	.global	FtlL2PDataInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlL2PDataInit, %function
-FtlL2PDataInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r1, #0
-	movw	r5, #342
-	ldr	r2, [r4, #332]
-	ldr	r0, [r4, #2540]
-	lsl	r2, r2, #1
-	bl	memset
-	movw	r3, #318
-	ldrh	r2, [r4, r5]
-	ldrh	r3, [r4, r3]
-	mov	r1, #255
-	ldr	r0, [r4, #2544]
-	mul	r2, r2, r3
-	bl	memset
-	ldrh	r3, [r4, r5]
-	cmp	r3, #0
-	beq	.L307
-	ldr	r6, .L311
-	mov	r2, #0
-	ldr	r0, [r4, #2532]
-	mov	r5, r2
-	mvn	ip, #0
-	add	lr, r6, #24
-.L306:
-	add	r3, r2, r2, lsl #1
-	add	r9, r2, #1
-	lsl	r3, r3, #2
-	add	r1, r0, r3
-	str	r5, [r1, #4]
-	strh	ip, [r0, r3]	@ movhi
-	ldrh	r1, [r6]
-	ldrh	r8, [lr]
-	ldr	r7, [r4, #2544]
-	ldr	r0, [r4, #2532]
-	mul	r1, r2, r1
-	uxth	r2, r9
-	cmp	r8, r2
-	add	r3, r0, r3
-	bic	r1, r1, #3
-	add	r1, r7, r1
-	str	r1, [r3, #8]
-	bhi	.L306
-.L307:
-	ldr	r3, .L311+4
-	movw	r1, #61634
-	ldr	r0, [r4, #332]
-	movt	r1, 65535
-	ldr	lr, [r4, #2596]
-	mvn	r2, #0
-	sub	ip, r3, #2208
-	ldrh	r7, [r3, #44]
-	ldrh	r6, [ip]
-	movw	r5, #2548
-	strh	r0, [r3, #10]	@ movhi
-	ldr	ip, [r4, #2600]
-	strh	r1, [r3, #4]	@ movhi
-	ldr	r0, [r4, #2540]
-	ldr	r1, [r4, #2604]
-	strh	r7, [r3, #8]	@ movhi
-	strh	r6, [r3, #6]	@ movhi
-	strh	r2, [r3, #2]	@ movhi
-	strh	r2, [r4, r5]	@ movhi
-	str	lr, [r4, #2560]
-	str	ip, [r4, #2564]
-	str	r0, [r4, #2568]
-	str	r1, [r4, #2572]
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L312:
+.L229:
 	.align	2
-.L311:
-	.word	.LANCHOR0+318
-	.word	.LANCHOR0+2548
+.L228:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
 	.align	2
 	.global	ftl_sb_update_avl_pages
 	.syntax unified
@@ -2011,56 +1649,52 @@ ftl_sb_update_avl_pages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, #0
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r3, #0
-	ldrh	ip, [r4, #36]
 	strh	r3, [r0, #4]	@ movhi
-	cmp	r2, ip
-	bcs	.L319
-	sub	lr, ip, #1
-	add	r5, r2, #8
-	sub	lr, lr, r2
-	add	r3, r0, r5, lsl #1
-	uxtah	lr, r5, lr
+	add	ip, r0, r2, lsl #1
 	movw	r5, #65535
-	sub	r3, r3, #2
-	add	lr, r0, lr, lsl #1
-.L318:
-	ldrh	r2, [r3, #2]!
-	cmp	r2, r5
-	ldrhne	r2, [r0, #4]
-	addne	r2, r2, #1
-	strhne	r2, [r0, #4]	@ movhi
-	cmp	r3, lr
-	bne	.L318
-.L319:
-	cmp	ip, #0
-	beq	.L325
-	movw	r3, #310
-	sub	ip, ip, #1
-	ldrh	r2, [r4, r3]
-	uxth	ip, ip
-	add	r3, r0, #14
-	add	ip, ip, #8
-	movw	lr, #65535
-	sub	r2, r2, #1
-	add	ip, r0, ip, lsl #1
-	sub	r1, r2, r1
-	uxth	r1, r1
-.L321:
-	ldrh	r2, [r3, #2]!
+	ldr	r3, .L238
+	add	ip, ip, #14
+	ldrh	lr, [r3, #236]
+.L231:
 	cmp	r2, lr
+	bcc	.L233
+	movw	r2, #306
+	add	ip, r0, #16
+	ldrh	r3, [r3, r2]
+	movw	r4, #65535
+	sub	r3, r3, #1
+	sub	r1, r3, r1
+	mov	r3, #0
+	uxth	r1, r1
+.L234:
+	uxth	r2, r3
+	cmp	lr, r2
+	bhi	.L236
+	pop	{r4, r5, pc}
+.L233:
+	ldrh	r4, [ip, #2]!
+	add	r2, r2, #1
+	uxth	r2, r2
+	cmp	r4, r5
+	ldrhne	r4, [r0, #4]
+	addne	r4, r4, #1
+	strhne	r4, [r0, #4]	@ movhi
+	b	.L231
+.L236:
+	ldrh	r2, [ip], #2
+	add	r3, r3, #1
+	cmp	r2, r4
 	ldrhne	r2, [r0, #4]
 	addne	r2, r1, r2
 	strhne	r2, [r0, #4]	@ movhi
-	cmp	r3, ip
-	bne	.L321
-	pop	{r4, r5, pc}
-.L325:
-	pop	{r4, r5, pc}
+	b	.L234
+.L239:
+	.align	2
+.L238:
+	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
@@ -2073,15 +1707,44 @@ FtlSlcSuperblockCheck:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldrh	r2, [r0, #4]
-	cmp	r2, #0
+	ldrh	r3, [r0, #4]
+	cmp	r3, #0
 	bxeq	lr
 	ldrh	r2, [r0]
 	movw	r3, #65535
 	cmp	r2, r3
 	bxeq	lr
-	b	FtlSlcSuperblockCheck.part.7
+	ldrb	r2, [r0, #6]	@ zero_extendqisi2
+	str	lr, [sp, #-4]!
+	.save {lr}
+	mov	lr, #0
+	add	r2, r0, r2, lsl #1
+	ldrh	r1, [r2, #16]
+	ldr	r2, .L250
+	ldrh	ip, [r2, #236]
+	mov	r2, r3
+.L243:
+	cmp	r1, r2
+	beq	.L245
+	ldr	pc, [sp], #4
+.L245:
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, ip
+	strb	r3, [r0, #6]
+	ldrheq	r3, [r0, #2]
+	strbeq	lr, [r0, #6]
+	addeq	r3, r3, #1
+	strheq	r3, [r0, #2]	@ movhi
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	add	r3, r0, r3, lsl #1
+	ldrh	r1, [r3, #16]
+	b	.L243
+.L251:
+	.align	2
+.L250:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
@@ -2092,296 +1755,72 @@ FtlSlcSuperblockCheck:
 	.type	make_superblock, %function
 make_superblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r9, #:lower16:.LANCHOR0
-	ldrh	r3, [r0]
-	.pad #20
-	sub	sp, sp, #20
-	movt	r9, #:upper16:.LANCHOR0
-	str	r0, [sp, #8]
-	mov	r2, r3
-	str	r3, [sp, #12]
-	ldrh	r3, [r9, #20]
-	cmp	r3, r2
-	bls	.L340
-.L332:
-	ldrh	r3, [r9, #36]
-	mov	r2, #0
-	ldr	lr, [sp, #8]
-	cmp	r3, r2
-	strh	r2, [lr, #4]	@ movhi
-	strb	r2, [lr, #7]
-	beq	.L337
-	ldr	r1, .L341
-	sub	r0, r3, #1
-	ldrh	r3, [sp, #12]
-	movw	ip, #306
-	ldrh	r7, [r9, ip]
-	add	r6, lr, #16
-	add	r10, r1, #3
-	ldrh	r8, [r1], #4
-	mov	r5, r2
-	mov	fp, r10
-	smulbb	ip, r3, r8
-	uxtah	r3, r1, r0
-	str	r3, [sp]
-	uxth	r3, ip
-	str	r3, [sp, #4]
-.L335:
-	ldrb	r10, [fp, #1]!	@ zero_extendqisi2
-	mov	r1, r8
-	add	r6, r6, #2
-	mov	r0, r10
-	bl	__aeabi_uidiv
-	mov	r1, r8
-	smulbb	r4, r0, r7
-	mov	r0, r10
-	bl	__aeabi_uidivmod
-	mvn	r3, #0	@ movhi
-	add	r4, r4, r1
-	strh	r3, [r6, #-2]	@ movhi
-	mov	r1, r7
-	ldr	r3, [sp, #4]
-	add	r4, r3, r4
-	uxth	r4, r4
-	mov	r0, r4
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r10, r1
-	mov	r1, r7
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	lr, r10, #5
-	add	r0, r9, r0, lsl #2
-	and	ip, r10, #31
-	add	r1, r5, #1
-	ldr	r2, [r0, #380]
-	ldr	r2, [r2, lr, lsl #2]
-	lsr	r2, r2, ip
-	tst	r2, #1
-	ldreq	r3, [sp, #8]
-	uxtbeq	r5, r1
-	strheq	r4, [r6, #-2]	@ movhi
-	strbeq	r5, [r3, #7]
-	ldr	r3, [sp]
-	cmp	r3, fp
-	bne	.L335
-	uxth	r2, r5
-.L333:
-	movw	r3, #310
-	ldr	lr, [sp, #8]
-	ldrh	r1, [r9, r3]
-	mov	r0, #0
-	ldr	r3, [sp, #12]
-	ldr	ip, [r9, #2528]
-	strb	r0, [lr, #9]
-	movw	r0, #10000
-	smulbb	r2, r1, r2
-	lsl	r3, r3, #1
-	strh	r2, [lr, #4]	@ movhi
-	ldrh	r3, [ip, r3]
-	cmp	r3, r0
-	mov	r0, #0
-	movhi	r3, #1
-	strbhi	r3, [lr, #9]
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L340:
-	movw	r0, #:lower16:.LC8
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	ldr	r6, .L259
+	ldrh	r2, [r0]
+	ldrh	r3, [r6, #244]
+	cmp	r2, r3
+	bcc	.L253
 	movw	r2, #2148
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L341+4
-	bl	sftl_printk
-	ldr	r3, [sp, #8]
-	ldrh	r3, [r3]
-	str	r3, [sp, #12]
-	b	.L332
-.L337:
-	mov	r2, r3
-	b	.L333
-.L342:
-	.align	2
-.L341:
-	.word	.LANCHOR0+264
-	.word	.LANCHOR1+124
-	.fnend
-	.size	make_superblock, .-make_superblock
-	.align	2
-	.global	SupperBlkListInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	SupperBlkListInit, %function
-SupperBlkListInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 24
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r7, #:lower16:.LANCHOR0
-	movt	r7, #:upper16:.LANCHOR0
-	mov	r1, #0
-	.pad #28
-	sub	sp, sp, #28
-	ldrh	r2, [r7, #248]
-	ldr	r0, [r7, #8]
-	add	r2, r2, r2, lsl #1
-	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r1, [r7, #20]
-	mov	r3, #0
-	movw	r2, #2520
-	str	r3, [r7, #2524]
-	str	r3, [r7, #12]
-	cmp	r1, r3
-	str	r3, [r7, #24]
-	strh	r3, [r7, #236]	@ movhi
-	strh	r3, [r7, r2]	@ movhi
-	beq	.L354
-	str	r3, [sp, #20]
-	str	r3, [sp, #16]
-	str	r3, [sp, #8]
-	add	r3, r7, #268
-	str	r3, [sp, #12]
-.L352:
-	ldrh	r9, [r7, #36]
-	cmp	r9, #0
-	beq	.L348
-	ldr	r3, [sp, #12]
-	sub	r9, r9, #1
-	ldr	fp, .L366
-	mov	r8, #0
-	uxtah	r3, r3, r9
-	add	r2, fp, #42
-	ldrh	r6, [fp], #3
-	str	r3, [sp, #4]
-	ldrh	r3, [r2, #4]
-	ldrh	r5, [r2]
-	mov	r9, fp
-	str	r3, [sp]
-	ldrh	r3, [sp, #8]
-	smulbb	r10, r3, r6
-	uxth	r10, r10
-	mov	fp, r10
-.L347:
-	ldrb	r10, [r9, #1]!	@ zero_extendqisi2
-	mov	r1, r6
-	mov	r0, r10
-	bl	__aeabi_uidiv
-	smulbb	r4, r0, r5
-	mov	r1, r6
-	mov	r0, r10
-	bl	__aeabi_uidivmod
-	add	r4, r4, r1
-	mov	r1, r5
-	add	r4, fp, r4
-	uxth	r4, r4
-	mov	r0, r4
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r4, r1
-	mov	r1, r5
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	r2, r4, #5
-	ldr	r3, [sp]
-	add	r0, r7, r0, lsl #2
-	and	r4, r4, #31
-	ldr	r0, [r0, #380]
-	add	r1, r3, r8
-	ldr	r3, [sp, #4]
-	ldr	r2, [r0, r2, lsl #2]
-	lsr	r4, r2, r4
-	tst	r4, #1
-	uxtheq	r8, r1
-	cmp	r3, r9
-	bne	.L347
-	cmp	r8, #0
-	beq	.L348
-	mov	r1, r8
-	mov	r0, #32768
-	bl	__aeabi_idiv
-	ldr	r3, [sp, #8]
-	uxth	r0, r0
-	lsl	r1, r3, #1
-.L349:
-	ldr	lr, [sp, #8]
-	ldr	r2, [r7, #8]
-	ldrh	ip, [r7, #40]
-	add	r3, r1, lr
-	add	r3, r2, r3, lsl #1
-	cmp	ip, lr
-	strh	r0, [r3, #4]	@ movhi
-	beq	.L350
-	ldrh	r3, [r7, #88]
-	cmp	r3, lr
-	beq	.L350
-	ldrh	r3, [r7, #136]
-	cmp	r3, lr
-	beq	.L350
-	ldr	r3, [r7, #16]
-	ldrh	r3, [r3, r1]
-	cmp	r3, #0
-	bne	.L351
-	ldr	r3, [sp, #20]
-	mov	r0, lr
-	add	r3, r3, #1
-	uxth	r3, r3
-	str	r3, [sp, #20]
-	bl	INSERT_FREE_LIST
-.L350:
-	ldr	r3, [sp, #8]
-	add	r2, r3, #1
-	ldrh	r3, [r7, #20]
-	uxth	r2, r2
-	cmp	r3, r2
-	str	r2, [sp, #8]
-	bhi	.L352
-	ldr	r0, [sp, #16]
-	movw	r2, #2520
-	ldr	ip, [sp, #20]
-	strh	r0, [r7, r2]	@ movhi
-	add	r1, r0, ip
-	strh	ip, [r7, #236]	@ movhi
-	cmp	r1, r3
-	ble	.L354
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2210
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L366+4
+	ldr	r1, .L259+4
+	ldr	r0, .L259+8
 	bl	sftl_printk
-.L354:
-	mov	r0, #0
-	add	sp, sp, #28
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L348:
-	ldr	r2, [sp, #8]
+.L253:
+	ldrh	r9, [r6, #236]
+	add	r7, r4, #16
+	ldr	r10, .L259+12
+	mvn	r8, #0
+	mov	r5, #0
+	strh	r5, [r4, #4]	@ movhi
+	strb	r5, [r4, #7]
+.L254:
+	uxth	r3, r5
+	ldrh	r1, [r4]
+	cmp	r9, r3
+	bhi	.L256
+	movw	r2, #306
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
+	ldrh	r2, [r6, r2]
+	lsl	r1, r1, #1
 	mov	r0, #0
-	ldr	r3, [r7, #16]
-	lsl	r1, r2, #1
-	mvn	r2, #0
-	strh	r2, [r3, r1]	@ movhi
-	b	.L349
-.L351:
-	ldr	r3, [sp, #16]
-	ldr	r0, [sp, #8]
-	add	r3, r3, #1
-	uxth	r3, r3
-	str	r3, [sp, #16]
-	bl	INSERT_DATA_LIST
-	b	.L350
-.L367:
+	smulbb	r3, r3, r2
+	strh	r3, [r4, #4]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #9]
+	ldr	r3, [r6, #2540]
+	ldrh	r2, [r3, r1]
+	movw	r3, #10000
+	cmp	r2, r3
+	movhi	r3, #1
+	strbhi	r3, [r4, #9]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L256:
+	ldrb	r0, [r10, r5]	@ zero_extendqisi2
+	add	r7, r7, #2
+	bl	V2P_block
+	strh	r8, [r7, #-2]	@ movhi
+	mov	fp, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	add	r5, r5, #1
+	strheq	fp, [r7, #-2]	@ movhi
+	ldrbeq	r3, [r4, #7]	@ zero_extendqisi2
+	addeq	r3, r3, #1
+	strbeq	r3, [r4, #7]
+	b	.L254
+.L260:
 	.align	2
-.L366:
+.L259:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+95
+	.word	.LC8
 	.word	.LANCHOR0+264
-	.word	.LANCHOR1+140
 	.fnend
-	.size	SupperBlkListInit, .-SupperBlkListInit
+	.size	make_superblock, .-make_superblock
 	.align	2
 	.global	update_multiplier_value
 	.syntax unified
@@ -2390,81 +1829,50 @@ SupperBlkListInit:
 	.type	update_multiplier_value, %function
 update_multiplier_value:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r8, #:lower16:.LANCHOR0
-	movt	r8, #:upper16:.LANCHOR0
-	.pad #20
-	sub	sp, sp, #20
-	ldrh	fp, [r8, #36]
-	str	r0, [sp, #12]
-	cmp	fp, #0
-	beq	.L369
-	add	r5, r8, #264
-	movw	r3, #310
-	ldrh	r7, [r5], #3
-	movw	r1, #306
-	ldrh	r3, [r8, r3]
-	sub	r2, fp, #1
-	add	r10, r8, #268
-	ldrh	r6, [r8, r1]
-	uxtah	r10, r10, r2
-	mov	fp, #0
-	smulbb	r9, r0, r7
-	str	r3, [sp, #4]
-	uxth	r3, r9
-	str	r3, [sp, #8]
-.L371:
-	ldrb	r9, [r5, #1]!	@ zero_extendqisi2
-	mov	r1, r7
-	mov	r0, r9
-	bl	__aeabi_uidiv
-	mov	r1, r7
-	smulbb	r4, r0, r6
-	mov	r0, r9
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #8]
-	add	r3, r3, r1
-	mov	r1, r6
-	add	r4, r4, r3
-	uxth	r4, r4
-	mov	r0, r4
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r4, r1
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	r3, r4, #5
-	ldr	r2, [sp, #4]
-	add	r0, r8, r0, lsl #2
-	and	r4, r4, #31
-	ldr	r0, [r0, #380]
-	add	r1, r2, fp
-	ldr	r3, [r0, r3, lsl #2]
-	lsr	r4, r3, r4
-	tst	r4, #1
-	uxtheq	fp, r1
-	cmp	r10, r5
-	bne	.L371
-	cmp	fp, #0
-	beq	.L369
-	mov	r1, fp
+	ldr	r3, .L268
+	movw	r2, #306
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r5, #0
+	mov	r7, r0
+	mov	r4, r5
+	mov	r6, r3
+	add	r10, r3, #264
+	ldrh	r8, [r3, #236]
+	ldrh	r9, [r3, r2]
+.L262:
+	uxth	r3, r5
+	cmp	r8, r3
+	bhi	.L264
+	cmp	r4, #0
+	moveq	r0, r4
+	beq	.L265
+	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-	uxth	fp, r0
-.L369:
-	ldr	r3, [sp, #12]
+.L265:
+	ldr	r1, [r6, #2520]
+	mov	r3, #6
+	mla	r1, r3, r7, r1
+	strh	r0, [r1, #4]	@ movhi
 	mov	r0, #0
-	ldr	r1, [r8, #8]
-	add	r3, r3, r3, lsl #1
-	add	r3, r1, r3, lsl #1
-	strh	fp, [r3, #4]	@ movhi
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L264:
+	mov	r1, r7
+	ldrb	r0, [r10, r5]	@ zero_extendqisi2
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	add	r5, r5, #1
+	addeq	r4, r4, r9
+	uxtheq	r4, r4
+	b	.L262
+.L269:
+	.align	2
+.L268:
+	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
 	.align	2
@@ -2478,22 +1886,25 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r2, #:lower16:.LANCHOR0
-	movt	r2, #:upper16:.LANCHOR0
-	ldr	r0, [r2, #2524]
+	ldr	r2, .L273
+	ldr	r0, [r2, #2536]
 	cmp	r0, #0
 	bxeq	lr
-	ldr	r1, [r2, #8]
-	movw	r3, #43691
-	movt	r3, 43690
-	ldr	r2, [r2, #2528]
-	sub	r0, r0, r1
+	ldr	r3, [r2, #2520]
+	sub	r0, r0, r3
+	ldr	r3, .L273+4
 	asr	r0, r0, #1
 	mul	r0, r3, r0
+	ldr	r3, [r2, #2540]
 	uxth	r0, r0
 	lsl	r0, r0, #1
-	ldrh	r0, [r2, r0]
+	ldrh	r0, [r3, r0]
 	bx	lr
+.L274:
+	.align	2
+.L273:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
 	.align	2
@@ -2506,55 +1917,51 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r1, .L287
+	ldr	r3, [r1, #2536]
+	cmp	r3, #0
+	beq	.L281
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	ldr	r3, [r4, #2524]
-	cmp	r3, #0
-	beq	.L391
-	ldrh	r2, [r4, #236]
-	movw	ip, #43691
-	ldr	r5, [r4, #8]
-	movt	ip, 43690
+	mov	r4, #6
+	ldrh	r2, [r1, #228]
+	movw	r5, #65535
+	ldr	ip, [r1, #2520]
 	rsb	r2, r2, r2, lsl #3
-	sub	r3, r3, r5
-	asr	r3, r3, #1
+	sub	r3, r3, ip
 	asr	r2, r2, #3
-	mul	ip, ip, r3
+	asr	r3, r3, #1
 	cmp	r0, r2
 	uxthgt	r0, r2
-	cmp	r0, #0
-	uxth	ip, ip
-	beq	.L387
-	add	r3, ip, ip, lsl #1
-	movw	lr, #65535
-	lsl	r3, r3, #1
-	ldrh	r2, [r5, r3]
-	cmp	r2, lr
-	movne	r1, #0
-	bne	.L389
-	b	.L387
-.L390:
-	ldrh	r2, [r5, r3]
-	cmp	r2, lr
-	beq	.L387
-.L389:
-	add	r1, r1, #1
-	add	r3, r2, r2, lsl #1
-	uxth	r1, r1
-	mov	ip, r2
+	ldr	r2, .L287+4
+	mul	r3, r2, r3
+	mov	r2, #0
+	uxth	r3, r3
+.L278:
+	uxth	lr, r2
+	cmp	r0, lr
+	bls	.L280
+	mul	lr, r4, r3
+	add	r2, r2, #1
+	ldrh	lr, [ip, lr]
+	cmp	lr, r5
+	bne	.L282
+.L280:
+	ldr	r2, [r1, #2540]
 	lsl	r3, r3, #1
-	cmp	r0, r1
-	bne	.L390
-.L387:
-	ldr	r3, [r4, #2528]
-	lsl	ip, ip, #1
-	ldrh	r0, [r3, ip]
+	ldrh	r0, [r2, r3]
 	pop	{r4, r5, pc}
-.L391:
+.L282:
+	mov	r3, lr
+	b	.L278
+.L281:
 	mov	r0, r3
-	pop	{r4, r5, pc}
+	bx	lr
+.L288:
+	.align	2
+.L287:
+	.word	.LANCHOR0
+	.word	-1431655765
 	.fnend
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -2567,618 +1974,588 @@ FtlPrintInfo2buf:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LC9
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	r3, #:upper16:.LC9
-	mov	r7, r0
-	movw	r6, #:lower16:.LANCHOR0
-	mov	r4, r7
-	ldmia	r3!, {r0, r1, r2}
-	movt	r6, #:upper16:.LANCHOR0
+	mov	r6, r0
+	ldr	r5, .L302
+	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	add	r8, r6, #352
-	ldr	r9, .L409
-	ldrb	r3, [r3]	@ zero_extendqisi2
-	str	r2, [r7, #8]	@ unaligned
-	movw	r2, #:lower16:.LC10
-	str	r0, [r7]	@ unaligned
-	movt	r2, #:upper16:.LC10
-	str	r1, [r7, #4]	@ unaligned
+	ldr	r1, .L302+4
+	bl	strcpy
+	ldr	r3, [r5, #320]
 	mov	r1, #64
-	strb	r3, [r4, #12]!
+	ldr	r2, .L302+8
 	mov	r0, r4
-	ldr	r3, [r6, #324]
-	bl	snprintf
-	movw	r3, #:lower16:.LC11
-	add	ip, r4, r0
-	movt	r3, #:upper16:.LC11
-	mov	lr, r0
-	ldmia	r3!, {r0, r1}
-	mov	r5, ip
-	movw	r2, #:lower16:.LC12
-	movt	r2, #:upper16:.LC12
-	str	r0, [r4, lr]	@ unaligned
-	ldrh	lr, [r3]	@ unaligned
-	ldrb	r0, [r3, #2]	@ zero_extendqisi2
-	str	r1, [ip, #4]	@ unaligned
-	mov	r1, #64
-	strh	lr, [ip, #8]	@ unaligned
-	ldr	r3, [r6, #2608]
-	strb	r0, [r5, #10]!
-	mov	r0, r5
 	bl	snprintf
-	movw	r2, #:lower16:.LC13
-	add	r4, r5, r0
+	add	r4, r4, r0
+	ldr	r1, .L302+12
 	mov	r0, r4
-	ldr	r3, [r6, #28]
-	movt	r2, #:upper16:.LC13
+	add	r4, r4, #10
+	bl	strcpy
+	ldr	r3, [r5, #2556]
 	mov	r1, #64
+	ldr	r2, .L302+16
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC14
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2612]
-	movt	r2, #:upper16:.LC14
+	ldr	r3, [r5, #2552]
+	ldr	r2, .L302+20
 	mov	r1, #64
+	mov	r0, r4
+	add	r7, r5, #356
 	bl	snprintf
-	movw	r2, #:lower16:.LC15
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2616]
-	movt	r2, #:upper16:.LC15
+	ldr	r3, [r5, #2560]
+	ldr	r2, .L302+24
 	mov	r1, #64
+	mov	r0, r4
+	ldr	r8, .L302+28
 	bl	snprintf
-	movw	r2, #:lower16:.LC16
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2620]
-	movt	r2, #:upper16:.LC16
+	ldr	r3, [r5, #2564]
+	ldr	r2, .L302+32
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC17
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2624]
-	movt	r2, #:upper16:.LC17
+	ldr	r3, [r5, #2568]
+	ldr	r2, .L302+36
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC18
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2628]
-	movt	r2, #:upper16:.LC18
+	ldr	r3, [r5, #2572]
+	ldr	r2, .L302+40
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC19
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2632]
-	movt	r2, #:upper16:.LC19
+	ldr	r3, [r5, #2576]
+	ldr	r2, .L302+44
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	ldr	r3, [r6, #2636]
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC20
+	ldr	r3, [r5, #2580]
+	ldr	r2, .L302+48
+	mov	r1, #64
 	mov	r0, r4
-	movt	r2, #:upper16:.LC20
+	bl	snprintf
+	ldr	r3, [r5, #2584]
+	add	r4, r4, r0
+	ldr	r2, .L302+52
 	mov	r1, #64
+	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
-	ldr	r3, [r6, #2640]
+	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC21
-	mov	r0, r4
-	movt	r2, #:upper16:.LC21
+	ldr	r2, .L302+56
 	mov	r1, #64
+	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
-	movw	r2, #:lower16:.LC22
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2644]
-	movt	r2, #:upper16:.LC22
+	ldr	r3, [r5, #2592]
+	ldr	r2, .L302+60
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC23
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2648]
-	movt	r2, #:upper16:.LC23
+	ldr	r3, [r5, #2596]
+	ldr	r2, .L302+64
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC24
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r8, #6]
-	movt	r2, #:upper16:.LC24
+	ldrh	r3, [r7, #6]
+	ldr	r2, .L302+68
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC25
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #236]
-	movt	r2, #:upper16:.LC25
+	ldrh	r3, [r5, #228]
+	ldr	r2, .L302+72
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC26
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2652]
-	movt	r2, #:upper16:.LC26
+	ldr	r3, [r5, #2600]
+	ldr	r2, .L302+76
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC27
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2656]
-	movt	r2, #:upper16:.LC27
+	ldr	r3, [r5, #2604]
+	ldr	r2, .L302+80
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC28
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2660]
-	movt	r2, #:upper16:.LC28
+	ldr	r3, [r5, #2608]
+	ldr	r2, .L302+84
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC29
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2664]
-	movt	r2, #:upper16:.LC29
+	ldr	r3, [r5, #2612]
+	ldr	r2, .L302+88
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC30
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2668]
-	movt	r2, #:upper16:.LC30
+	ldr	r3, [r5, #2616]
+	ldr	r2, .L302+92
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC31
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2672]
-	movt	r2, #:upper16:.LC31
+	ldr	r3, [r5, #2620]
+	ldr	r2, .L302+96
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC32
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r9, #30]
-	movt	r2, #:upper16:.LC32
+	ldrh	r3, [r8, #30]
+	ldr	r2, .L302+100
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC33
 	add	r4, r4, r0
-	ldrh	r3, [r9, #28]
-	mov	r0, r4
-	movt	r2, #:upper16:.LC33
+	ldrh	r3, [r8, #28]
+	ldr	r2, .L302+104
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC34
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #344]
-	movt	r2, #:upper16:.LC34
+	ldr	r3, [r5, #344]
+	ldr	r2, .L302+108
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC35
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #336]
-	movt	r2, #:upper16:.LC35
+	ldr	r3, [r5, #336]
+	ldr	r2, .L302+112
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC36
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #240]
-	movt	r2, #:upper16:.LC36
+	ldr	r3, [r5, #232]
+	ldr	r2, .L302+116
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	add	r3, r6, #416
+	add	r3, r5, #416
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC37
-	mov	r0, r4
 	ldrh	r3, [r3, #6]
-	movt	r2, #:upper16:.LC37
 	mov	r1, #64
+	ldr	r2, .L302+120
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC38
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #20]
-	movt	r2, #:upper16:.LC38
+	ldrh	r3, [r5, #244]
+	ldr	r2, .L302+124
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r3, #2676
+	add	r3, r5, #2624
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC39
-	mov	r0, r4
-	ldrh	r3, [r6, r3]
-	movt	r2, #:upper16:.LC39
+	ldrh	r3, [r3]
 	mov	r1, #64
+	ldr	r2, .L302+128
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC40
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #252]
-	movt	r2, #:upper16:.LC40
+	ldr	r3, [r5, #248]
+	ldr	r2, .L302+132
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r3, #2680
+	movw	r3, #2628
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC41
-	mov	r0, r4
-	ldrh	r3, [r6, r3]
-	movt	r2, #:upper16:.LC41
+	ldrh	r3, [r5, r3]
 	mov	r1, #64
+	ldr	r2, .L302+136
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC42
 	add	r4, r4, r0
-	ldrh	r3, [r8]
-	mov	r0, r4
-	movt	r2, #:upper16:.LC42
+	ldrh	r3, [r7]
+	ldr	r2, .L302+140
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC43
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #42]
-	movt	r2, #:upper16:.LC43
+	ldrh	r3, [r5, #30]
+	ldr	r2, .L302+144
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC44
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #46]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC44
+	ldrb	r3, [r5, #34]	@ zero_extendqisi2
+	ldr	r2, .L302+148
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC45
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #40]
-	movt	r2, #:upper16:.LC45
+	ldrh	r3, [r5, #28]
+	ldr	r2, .L302+152
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC46
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #48]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC46
+	ldrb	r3, [r5, #36]	@ zero_extendqisi2
+	ldr	r2, .L302+156
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC47
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #44]
-	movt	r2, #:upper16:.LC47
+	ldrh	r3, [r5, #32]
+	ldr	r2, .L302+160
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r6, #40]
+	ldrh	r3, [r5, #28]
 	add	r4, r4, r0
-	ldr	ip, [r6, #16]
-	movw	r2, #:lower16:.LC48
-	mov	r0, r4
-	movt	r2, #:upper16:.LC48
+	ldr	r2, [r5, #76]
 	mov	r1, #64
+	mov	r0, r4
 	lsl	r3, r3, #1
-	ldrh	r3, [ip, r3]
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L302+164
 	bl	snprintf
-	movw	r2, #:lower16:.LC49
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #90]
-	movt	r2, #:upper16:.LC49
+	ldrh	r3, [r5, #82]
+	ldr	r2, .L302+168
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC50
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #94]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC50
+	ldrb	r3, [r5, #86]	@ zero_extendqisi2
+	ldr	r2, .L302+172
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC51
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #88]
-	movt	r2, #:upper16:.LC51
+	ldrh	r3, [r5, #80]
+	ldr	r2, .L302+176
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC52
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #96]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC52
+	ldrb	r3, [r5, #88]	@ zero_extendqisi2
+	ldr	r2, .L302+180
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC53
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #92]
-	movt	r2, #:upper16:.LC53
+	ldrh	r3, [r5, #84]
+	ldr	r2, .L302+184
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r6, #88]
+	ldrh	r3, [r5, #80]
 	add	r4, r4, r0
-	ldr	ip, [r6, #16]
-	movw	r2, #:lower16:.LC54
-	mov	r0, r4
-	movt	r2, #:upper16:.LC54
+	ldr	r2, [r5, #76]
 	mov	r1, #64
+	mov	r0, r4
 	lsl	r3, r3, #1
-	ldrh	r3, [ip, r3]
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L302+188
 	bl	snprintf
-	movw	r2, #:lower16:.LC55
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #138]
-	movt	r2, #:upper16:.LC55
+	ldrh	r3, [r5, #130]
+	ldr	r2, .L302+192
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC56
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #142]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC56
+	ldrb	r3, [r5, #134]	@ zero_extendqisi2
+	ldr	r2, .L302+196
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC57
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #136]
-	movt	r2, #:upper16:.LC57
+	ldrh	r3, [r5, #128]
+	ldr	r2, .L302+200
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC58
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #144]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC58
+	ldrb	r3, [r5, #136]	@ zero_extendqisi2
+	ldr	r2, .L302+204
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC59
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #140]
-	movt	r2, #:upper16:.LC59
+	ldrh	r3, [r5, #132]
+	ldr	r2, .L302+208
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC60
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #186]
-	movt	r2, #:upper16:.LC60
+	ldrh	r3, [r5, #178]
+	ldr	r2, .L302+212
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC61
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #190]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC61
+	ldrb	r3, [r5, #182]	@ zero_extendqisi2
+	ldr	r2, .L302+216
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC62
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #184]
-	movt	r2, #:upper16:.LC62
+	ldrh	r3, [r5, #176]
+	ldr	r2, .L302+220
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC63
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrb	r3, [r6, #192]	@ zero_extendqisi2
-	movt	r2, #:upper16:.LC63
+	ldrb	r3, [r5, #184]	@ zero_extendqisi2
+	ldr	r2, .L302+224
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC64
 	add	r4, r4, r0
-	mov	r0, r4
-	ldrh	r3, [r6, #188]
-	movt	r2, #:upper16:.LC64
+	ldrh	r3, [r5, #180]
+	ldr	r2, .L302+228
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	ldr	ip, [r6, #2772]
+	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r1, [r6, #2780]
-	movw	r2, #:lower16:.LC65
-	ldr	r3, [r6, #2776]
-	mov	r0, r4
-	str	ip, [sp, #4]
-	movt	r2, #:upper16:.LC65
-	str	r1, [sp]
+	ldr	r2, .L302+232
 	mov	r1, #64
+	mov	r0, r4
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #2728]
+	str	r3, [sp]
+	ldr	r3, [r5, #2724]
 	bl	snprintf
-	movw	r2, #:lower16:.LC66
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2768]
-	movt	r2, #:upper16:.LC66
+	ldr	r3, [r5, #2716]
+	ldr	r2, .L302+236
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC67
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #2792]
-	movt	r2, #:upper16:.LC67
+	ldr	r3, [r5, #2740]
+	ldr	r2, .L302+240
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	movw	r3, #3208
+	movw	r3, #3156
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC68
-	mov	r0, r4
-	ldrh	r3, [r6, r3]
-	movt	r2, #:upper16:.LC68
+	ldrh	r3, [r5, r3]
 	mov	r1, #64
+	ldr	r2, .L302+244
+	mov	r0, r4
 	bl	snprintf
-	movw	r3, #3210
+	movw	r3, #3158
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC69
-	mov	r0, r4
-	ldrh	r3, [r6, r3]
-	movt	r2, #:upper16:.LC69
+	ldrh	r3, [r5, r3]
 	mov	r1, #64
+	ldr	r2, .L302+248
+	mov	r0, r4
 	bl	snprintf
-	movw	r2, #:lower16:.LC70
 	add	r4, r4, r0
-	mov	r0, r4
-	ldr	r3, [r6, #3212]
-	movt	r2, #:upper16:.LC70
+	ldr	r3, [r5, #3160]
+	ldr	r2, .L302+252
 	mov	r1, #64
+	mov	r0, r4
 	bl	snprintf
-	add	r3, r6, #3216
+	movw	r3, #3164
 	add	r4, r4, r0
-	movw	r2, #:lower16:.LC71
-	mov	r0, r4
-	ldrh	r3, [r3]
-	movt	r2, #:upper16:.LC71
+	ldrh	r3, [r5, r3]
 	mov	r1, #64
+	ldr	r2, .L302+256
+	mov	r0, r4
 	bl	snprintf
-	ldr	r3, [r6, #2524]
 	add	r4, r4, r0
-	cmp	r3, #0
-	beq	.L394
-	ldr	r0, [r6, #8]
-	movw	r2, #43691
-	movt	r2, 43690
-	ldr	r1, [r6, #2528]
-	sub	r3, r3, r0
-	asr	r3, r3, #1
-	mul	r3, r2, r3
-	uxth	r3, r3
-	lsl	r3, r3, #1
-	ldrh	r3, [r1, r3]
-.L394:
-	movw	r2, #:lower16:.LC72
+	bl	GetFreeBlockMinEraseCount
+	ldr	r2, .L302+260
+	mov	r3, r0
 	mov	r1, #64
-	movt	r2, #:upper16:.LC72
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r0, [r6, #236]
+	ldrh	r0, [r5, #228]
 	bl	GetFreeBlockMaxEraseCount
-	movw	r2, #:lower16:.LC73
+	ldr	r2, .L302+264
 	mov	r3, r0
 	mov	r1, #64
 	mov	r0, r4
-	movt	r2, #:upper16:.LC73
 	bl	snprintf
-	movw	r3, #:lower16:.LANCHOR2
+	ldr	r3, .L302+268
 	add	r4, r4, r0
-	movt	r3, #:upper16:.LANCHOR2
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L408
-.L402:
-	sub	r0, r4, r7
+	beq	.L290
+.L295:
+	sub	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L408:
-	ldrh	r3, [r6, #184]
+.L290:
+	ldrh	r3, [r5, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L397
-	ldr	r0, [r6, #16]
+	beq	.L292
+	ldr	r2, [r5, #76]
 	lsl	r3, r3, #1
-	movw	r2, #:lower16:.LC74
-	movt	r2, #:upper16:.LC74
-	mov	r1, #64
-	ldrh	r3, [r0, r3]
 	mov	r0, r4
+	mov	r1, #64
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L302+272
 	bl	snprintf
 	add	r4, r4, r0
-.L397:
+.L292:
 	mov	r0, #0
-	movw	r9, #65535
+	ldr	r9, .L302+276
 	bl	List_get_gc_head_node
-	uxth	ip, r0
-	cmp	ip, r9
-	beq	.L398
-	movw	r10, #:lower16:.LC75
-	ldr	r1, [r6, #8]
-	movt	r10, #:upper16:.LC75
-	mov	r8, #0
-	b	.L399
-.L401:
-	cmp	ip, r9
-	beq	.L400
-.L399:
-	lsl	r0, ip, #1
-	ldr	r2, [r6, #2528]
-	ldr	lr, [r6, #16]
-	mov	r3, r8
-	add	r5, r0, ip
-	add	r8, r8, #1
-	ldrh	r2, [r2, r0]
-	lsl	r5, r5, #1
-	add	r1, r1, r5
-	str	r2, [sp, #12]
-	mov	r2, r10
-	ldrh	fp, [r1, #4]
+	uxth	r0, r0
+	mov	r7, #0
+	movw	fp, #65535
+	mov	r10, #6
+.L294:
+	cmp	r0, fp
+	beq	.L293
+	ldr	r3, [r5, #2540]
+	lsl	r2, r0, #1
+	mul	r8, r10, r0
 	mov	r1, #64
-	str	fp, [sp, #8]
-	ldrh	lr, [lr, r0]
+	ldrh	r3, [r3, r2]
+	str	r3, [sp, #12]
+	ldr	r3, [r5, #2520]
+	add	r3, r3, r8
+	ldrh	r3, [r3, #4]
+	str	r3, [sp, #8]
+	ldr	r3, [r5, #76]
+	ldrh	r3, [r3, r2]
+	mov	r2, r9
+	stm	sp, {r0, r3}
+	mov	r3, r7
 	mov	r0, r4
-	stm	sp, {ip, lr}
+	add	r7, r7, #1
 	bl	snprintf
-	ldr	r1, [r6, #8]
-	cmp	r8, #16
+	ldr	r3, [r5, #2520]
+	cmp	r7, #16
 	add	r4, r4, r0
-	ldrh	ip, [r1, r5]
-	bne	.L401
-.L400:
-	ldr	r3, [r6, #2524]
-	movw	r0, #43691
-	movt	r0, 43690
+	ldrh	r0, [r3, r8]
+	bne	.L294
+.L293:
+	ldr	r2, [r5, #2520]
+	mov	r7, #0
+	ldr	r3, [r5, #2536]
 	movw	r9, #65535
-	sub	r3, r3, r1
+	ldr	fp, .L302+280
+	mov	r10, #6
+	sub	r3, r3, r2
+	ldr	r2, .L302+284
 	asr	r3, r3, #1
-	mul	r0, r0, r3
-	uxth	r0, r0
-	cmp	r0, r9
-	beq	.L402
-	movw	r10, #:lower16:.LC76
-	mov	r8, #0
-	movt	r10, #:upper16:.LC76
-.L404:
-	lsl	r2, r0, #1
-	ldr	ip, [r6, #2528]
-	mov	r3, r8
-	add	r5, r2, r0
-	add	r8, r8, #1
-	ldrh	lr, [ip, r2]
-	lsl	r5, r5, #1
-	mov	r2, r10
-	add	ip, r1, r5
-	mov	r1, #64
-	str	lr, [sp, #8]
-	ldrh	ip, [ip, #4]
-	str	r0, [sp]
+	mul	r3, r2, r3
+	uxth	r3, r3
+.L296:
+	cmp	r3, r9
+	beq	.L295
+	ldr	r1, [r5, #2540]
+	lsl	r2, r3, #1
+	mul	r8, r10, r3
 	mov	r0, r4
-	str	ip, [sp, #4]
+	ldrh	r2, [r1, r2]
+	mov	r1, #64
+	str	r2, [sp, #8]
+	ldr	r2, [r5, #2520]
+	add	r2, r2, r8
+	ldrh	r2, [r2, #4]
+	str	r3, [sp]
+	mov	r3, r7
+	add	r7, r7, #1
+	str	r2, [sp, #4]
+	mov	r2, fp
 	bl	snprintf
-	cmp	r8, #4
+	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L402
-	ldr	r1, [r6, #8]
-	ldrh	r0, [r1, r5]
-	cmp	r0, r9
-	bne	.L404
-	b	.L402
-.L398:
-	ldr	r1, [r6, #8]
-	b	.L400
-.L410:
+	beq	.L295
+	ldr	r3, [r5, #2520]
+	ldrh	r3, [r3, r8]
+	b	.L296
+.L303:
 	.align	2
-.L409:
+.L302:
+	.word	.LANCHOR0
+	.word	.LC9
+	.word	.LC10
+	.word	.LC11
+	.word	.LC12
+	.word	.LC13
+	.word	.LC14
 	.word	.LANCHOR0+2472
+	.word	.LC15
+	.word	.LC16
+	.word	.LC17
+	.word	.LC18
+	.word	.LC19
+	.word	.LC20
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.word	.LC25
+	.word	.LC26
+	.word	.LC27
+	.word	.LC28
+	.word	.LC29
+	.word	.LC30
+	.word	.LC31
+	.word	.LC32
+	.word	.LC33
+	.word	.LC34
+	.word	.LC35
+	.word	.LC36
+	.word	.LC37
+	.word	.LC38
+	.word	.LC39
+	.word	.LC40
+	.word	.LC41
+	.word	.LC42
+	.word	.LC43
+	.word	.LC44
+	.word	.LC45
+	.word	.LC46
+	.word	.LC47
+	.word	.LC48
+	.word	.LC49
+	.word	.LC50
+	.word	.LC51
+	.word	.LC52
+	.word	.LC53
+	.word	.LC54
+	.word	.LC55
+	.word	.LC56
+	.word	.LC57
+	.word	.LC58
+	.word	.LC59
+	.word	.LC60
+	.word	.LC61
+	.word	.LC62
+	.word	.LC63
+	.word	.LC64
+	.word	.LC65
+	.word	.LC66
+	.word	.LC67
+	.word	.LC68
+	.word	.LC69
+	.word	.LC70
+	.word	.LC71
+	.word	.LC72
+	.word	.LC73
+	.word	.LANCHOR2
+	.word	.LC74
+	.word	.LC75
+	.word	.LC76
+	.word	-1431655765
 	.fnend
 	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
 	.align	2
@@ -3192,19 +2569,14 @@ rknand_proc_ftlread:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	cmp	r0, #2048
-	bge	.L418
-	mov	r0, #0
-	bx	lr
-.L418:
+	blt	.L306
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r3, #:lower16:.LC0
 	mov	r5, r1
-	movw	r2, #:lower16:.LC77
-	movt	r3, #:upper16:.LC0
-	movt	r2, #:upper16:.LC77
+	ldr	r3, .L311
 	mov	r1, #64
 	mov	r0, r5
+	ldr	r2, .L311+4
 	bl	snprintf
 	add	r4, r5, r0
 	mov	r0, r4
@@ -3212,6 +2584,14 @@ rknand_proc_ftlread:
 	add	r0, r4, r0
 	sub	r0, r0, r5
 	pop	{r4, r5, r6, pc}
+.L306:
+	mov	r0, #0
+	bx	lr
+.L312:
+	.align	2
+.L311:
+	.word	.LC0
+	.word	.LC77
 	.fnend
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
 	.align	2
@@ -3222,206 +2602,173 @@ rknand_proc_ftlread:
 	.type	GetSwlReplaceBlock, %function
 GetSwlReplaceBlock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	.pad #36
-	sub	sp, sp, #36
-	ldr	r6, [r4, #2660]
-	ldr	r7, [r4, #2672]
-	cmp	r6, r7
-	bcs	.L420
-	ldrh	r1, [r4, #20]
-	mov	r5, #0
-	str	r5, [r4, #2652]
-	cmp	r1, r5
-	beq	.L435
-	ldr	r3, [r4, #2528]
-	add	r0, r3, r1, lsl #1
-.L422:
-	ldrh	r2, [r3], #2
-	cmp	r0, r3
-	add	r5, r5, r2
-	str	r5, [r4, #2652]
-	bne	.L422
-.L421:
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L338
+	ldr	r2, [r4, #2608]
+	ldr	r3, [r4, #2620]
+	cmp	r2, r3
+	bcs	.L314
+	ldr	r2, [r4, #2540]
+	mov	r3, #0
+	ldrh	r1, [r4, #244]
+	str	r3, [r4, #2600]
+	sub	r2, r2, #2
+.L315:
+	cmp	r3, r1
+	bcc	.L316
+	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r3, .L457
-	mov	r6, r0
-	ldr	r0, [r4, #2656]
-	str	r6, [r4, #2660]
+	ldr	r3, .L338+4
+	str	r0, [r4, #2608]
+	ldr	r0, [r4, #2604]
 	ldrh	r1, [r3]
 	sub	r0, r5, r0
 	bl	__aeabi_uidiv
-	str	r0, [r4, #2652]
-.L423:
-	add	r3, r7, #256
-	cmp	r3, r6
-	bls	.L425
-.L456:
-	ldr	r3, [r4, #2668]
-	add	r2, r7, #768
-	cmp	r2, r3
-	bls	.L425
-.L427:
+	str	r0, [r4, #2600]
+.L317:
+	ldr	r6, [r4, #2620]
+	ldr	r7, [r4, #2608]
+	add	r3, r6, #256
+	cmp	r3, r7
+	bls	.L322
+	ldr	r2, [r4, #2616]
+	add	r3, r6, #768
+	cmp	r3, r2
+	bls	.L322
+.L324:
 	movw	r5, #65535
-.L426:
+.L323:
 	mov	r0, r5
-	add	sp, sp, #36
+	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L420:
-	ldr	r3, [r4, #2668]
-	cmp	r6, r3
-	bls	.L423
-	ldrh	r2, [r4, #20]
+.L316:
+	ldrh	r0, [r2, #2]!
 	add	r3, r3, #1
-	str	r3, [r4, #2668]
-	cmp	r2, #0
-	beq	.L423
-	mov	r3, #0
-.L424:
-	ldr	r0, [r4, #2528]
+	ldr	ip, [r4, #2600]
+	add	r0, r0, ip
+	str	r0, [r4, #2600]
+	b	.L315
+.L314:
+	ldr	r3, [r4, #2616]
+	cmp	r2, r3
+	addhi	r3, r3, #1
+	strhi	r3, [r4, #2616]
+	movhi	r3, #0
+	bls	.L317
+.L319:
+	ldrh	r2, [r4, #244]
+	cmp	r3, r2
+	bcs	.L317
+	ldr	r0, [r4, #2540]
 	lsl	r1, r3, #1
 	add	r3, r3, #1
 	ldrh	r2, [r0, r1]
 	add	r2, r2, #1
 	strh	r2, [r0, r1]	@ movhi
-	ldrh	r2, [r4, #20]
-	cmp	r2, r3
-	bhi	.L424
-	ldr	r7, [r4, #2672]
-	ldr	r6, [r4, #2660]
-	add	r3, r7, #256
-	cmp	r3, r6
-	bhi	.L456
-.L425:
-	ldrh	r0, [r4, #236]
+	b	.L319
+.L322:
+	ldrh	r0, [r4, #228]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
 	bl	GetFreeBlockMaxEraseCount
-	add	r3, r7, #64
-	str	r0, [sp, #20]
+	add	r3, r6, #64
+	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L427
-	ldr	ip, [r4, #12]
-	cmp	ip, #0
-	beq	.L427
-	ldrh	r3, [ip]
-	movw	r2, #65535
-	cmp	r3, r2
-	beq	.L427
-	ldrh	r9, [r4, #20]
-	cmp	r9, #0
-	beq	.L427
-	ldr	r1, [r4, #2528]
-	movw	r8, #43691
-	str	r6, [sp, #24]
+	bcc	.L324
+	ldr	r3, [r4, #2524]
+	cmp	r3, #0
+	beq	.L324
+	ldrh	r2, [r4, #244]
+	movw	r1, #65535
+	ldr	lr, [r4, #2520]
+	mov	r0, #0
+	ldr	r8, [r4, #2540]
+	mov	fp, #6
+	ldr	r10, .L338+8
+	str	r2, [sp, #20]
+	mov	r2, r1
+.L325:
+	ldrh	ip, [r3]
+	movw	r5, #65535
+	cmp	ip, r5
+	bne	.L328
 	mov	r5, r2
-	mov	r10, r2
-	movt	r8, 43690
-	ldr	lr, [r4, #8]
-	mov	r0, #1
-	str	r1, [sp, #28]
-	mov	r6, r1
-	b	.L428
-.L431:
-	cmp	r0, r9
-	bhi	.L427
-.L428:
-	sub	r1, ip, lr
-	ldrh	ip, [ip, #4]
-	add	r3, r3, r3, lsl #1
-	asr	r1, r1, #1
-	lsl	r3, r3, #1
-	cmp	ip, #0
-	add	r0, r0, #1
-	mul	r1, r8, r1
-	uxth	r0, r0
-	add	ip, lr, r3
-	beq	.L429
-	uxth	fp, r1
-	mov	r1, fp
-	lsl	fp, fp, #1
-	ldrh	fp, [r6, fp]
-	cmp	r7, fp
-	bcs	.L436
-	cmp	fp, r2
-	movcc	r2, fp
-	movcc	r5, r1
-.L429:
-	ldrh	r3, [lr, r3]
-	cmp	r3, r10
-	bne	.L431
-	ldr	r6, [sp, #24]
-.L430:
+.L327:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L427
-	ldr	r8, [sp, #28]
-	lsl	ip, r5, #1
-	ldrh	r1, [r8, ip]
-	cmp	r7, r1
-	bcs	.L432
-	ldr	r3, [r4, #2524]
-	cmp	r3, #0
-	beq	.L432
-	sub	r0, r3, lr
-	movw	r3, #43691
-	asr	r0, r0, #1
-	movt	r3, 43690
-	mul	r3, r3, r0
-	uxth	r3, r3
-	lsl	r3, r3, #1
-	ldrh	r3, [r8, r3]
+	beq	.L324
+	lsl	fp, r5, #1
+	ldrh	r10, [r8, fp]
+	cmp	r6, r10
+	bcs	.L329
+	bl	GetFreeBlockMinEraseCount
+	cmp	r6, r0
+	strcc	r1, [r4, #2620]
+.L329:
+	cmp	r7, r10
+	bls	.L324
+	add	r3, r10, #128
+	cmp	r9, r3
+	ble	.L324
+	add	r3, r10, #256
 	cmp	r7, r3
-	strcc	r2, [r4, #2672]
-.L432:
-	cmp	r1, r6
-	bcs	.L427
-	ldr	r2, [sp, #20]
-	add	r3, r1, #128
-	cmp	r2, r3
-	ble	.L427
-	add	r3, r1, #256
-	cmp	r3, r6
-	ldr	r3, [r4, #2668]
-	bcc	.L434
-	add	r1, r1, #768
-	cmp	r1, r3
-	bcs	.L427
-.L434:
-	ldr	r2, [sp, #20]
-	movw	r0, #:lower16:.LC78
-	ldr	lr, [r4, #16]
-	movt	r0, #:upper16:.LC78
-	str	r2, [sp, #8]
-	ldr	r2, [sp, #28]
-	ldrh	r1, [r2, ip]
-	mov	r2, r6
-	str	r1, [sp, #4]
+	bhi	.L330
+	ldr	r3, [r4, #2616]
+	add	r10, r10, #768
+	cmp	r10, r3
+	bcs	.L324
+.L330:
+	str	r9, [sp, #8]
+	mov	r2, r7
+	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldrh	ip, [lr, ip]
-	str	ip, [sp]
+	ldr	r0, .L338+12
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #76]
+	ldrh	r3, [r3, fp]
+	str	r3, [sp]
+	ldr	r3, [r4, #2616]
 	bl	sftl_printk
 	mov	r3, #1
-	str	r3, [r4, #3220]
-	b	.L426
-.L435:
-	mov	r5, r1
-	b	.L421
-.L436:
-	ldr	r6, [sp, #24]
-	mov	r5, r1
-	b	.L430
-.L458:
-	.align	2
-.L457:
-	.word	.LANCHOR0+300
+	str	r3, [r4, #3168]
+	b	.L323
+.L328:
+	add	r0, r0, #1
+	ldr	r5, [sp, #20]
+	uxth	r0, r0
+	cmp	r0, r5
+	bhi	.L324
+	ldrh	r5, [r3, #4]
+	cmp	r5, #0
+	beq	.L326
+	sub	r3, r3, lr
+	asr	r3, r3, #1
+	mul	r3, r10, r3
+	uxth	r5, r3
+	lsl	r3, r5, #1
+	ldrh	r3, [r8, r3]
+	cmp	r6, r3
+	bcs	.L327
+	cmp	r1, r3
+	movhi	r1, r3
+	movhi	r2, r5
+.L326:
+	mla	r3, fp, ip, lr
+	b	.L325
+.L339:
+	.align	2
+.L338:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+296
+	.word	-1431655765
+	.word	.LC78
 	.fnend
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	2
@@ -3436,21 +2783,24 @@ free_data_superblock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	movw	r2, #65535
 	cmp	r0, r2
-	beq	.L462
-	movw	r2, #:lower16:.LANCHOR0
+	beq	.L343
+	ldr	r2, .L346
+	lsl	r3, r0, #1
 	push	{r4, lr}
 	.save {r4, lr}
-	movt	r2, #:upper16:.LANCHOR0
-	lsl	r3, r0, #1
 	mov	r1, #0
-	ldr	r2, [r2, #16]
+	ldr	r2, [r2, #76]
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
 	mov	r0, #0
 	pop	{r4, pc}
-.L462:
+.L343:
 	mov	r0, #0
 	bx	lr
+.L347:
+	.align	2
+.L346:
+	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
 	.align	2
@@ -3463,123 +2813,109 @@ get_new_active_ppa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	movw	r3, #65535
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	beq	.L485
-.L466:
-	movw	r6, #:lower16:.LANCHOR0
-	movw	r3, #310
-	movt	r6, #:upper16:.LANCHOR0
+	bne	.L349
+	movw	r2, #2781
+	ldr	r1, .L364
+	ldr	r0, .L364+4
+	bl	sftl_printk
+.L349:
+	ldr	r6, .L364+8
+	movw	r3, #306
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r6, r3]
 	cmp	r2, r3
-	beq	.L486
-.L467:
+	bne	.L350
+	movw	r2, #2782
+	ldr	r1, .L364
+	ldr	r0, .L364+4
+	bl	sftl_printk
+.L350:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L487
-.L468:
-	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	mov	r2, #0
-	strb	r2, [r4, #10]
-	movw	r2, #65535
-	add	r1, r4, r3, lsl #1
-	ldrh	r0, [r1, #16]
-	cmp	r0, r2
-	ldrhne	r1, [r4, #2]
-	bne	.L470
-	ldrh	lr, [r6, #36]
-	mov	ip, r0
-	ldrh	r1, [r4, #2]
-.L473:
-	add	r3, r3, #1
-	uxtb	r3, r3
-	cmp	r3, lr
-	mov	r2, r3
-	moveq	r3, #0
-	addeq	r1, r1, #1
-	moveq	r2, r3
-	uxtheq	r1, r1
+	bne	.L351
+	movw	r2, #2783
+	ldr	r1, .L364
+	ldr	r0, .L364+4
+	bl	sftl_printk
+.L351:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	mov	r3, #0
+	ldrh	r1, [r6, #236]
+	movw	ip, #65535
+	strb	r3, [r4, #10]
 	add	r2, r4, r2, lsl #1
-	strheq	r1, [r4, #2]	@ movhi
 	ldrh	r0, [r2, #16]
+	mov	r2, r3
+.L352:
 	cmp	r0, ip
-	beq	.L473
-	strb	r3, [r4, #6]
-.L470:
-	movw	r3, #310
-	ldrh	r7, [r6, r3]
-	cmp	r7, r1
-	movwls	r5, #65535
-	bhi	.L488
-.L465:
-	mov	r0, r5
-	pop	{r4, r5, r6, r7, r8, pc}
-.L488:
-	ldrh	lr, [r4, #4]
-	orr	r5, r1, r0, lsl #10
-	ldrh	ip, [r6, #36]
-	movw	r0, #65535
+	beq	.L354
+	movw	r3, #306
+	ldrh	r5, [r4, #2]
+	ldrh	ip, [r6, r3]
+	cmp	r5, ip
+	movwcs	r5, #65535
+	bcs	.L348
+	ldrh	r2, [r4, #4]
+	orr	r5, r5, r0, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	sub	lr, lr, #1
-	uxth	lr, lr
-	strh	lr, [r4, #4]	@ movhi
-.L477:
+	movw	lr, #65535
+	sub	r2, r2, #1
+	uxth	r2, r2
+	strh	r2, [r4, #4]	@ movhi
+.L357:
 	add	r3, r3, #1
 	uxtb	r3, r3
-	cmp	r3, ip
-	mov	r2, r3
+	cmp	r1, r3
+	ldrheq	r0, [r4, #2]
 	moveq	r3, #0
-	addeq	r1, r1, #1
-	moveq	r2, r3
-	uxtheq	r1, r1
-	add	r2, r4, r2, lsl #1
-	strheq	r1, [r4, #2]	@ movhi
-	ldrh	r2, [r2, #16]
-	cmp	r2, r0
-	beq	.L477
-	adds	lr, lr, #0
+	addeq	r0, r0, #1
+	strheq	r0, [r4, #2]	@ movhi
+	add	r0, r4, r3, lsl #1
+	ldrh	r0, [r0, #16]
+	cmp	r0, lr
+	beq	.L357
 	strb	r3, [r4, #6]
-	movne	lr, #1
-	cmp	r7, r1
-	movne	lr, #0
-	cmp	lr, #0
-	beq	.L465
-	movw	r0, #:lower16:.LC8
+	cmp	r2, #0
+	ldrh	r3, [r4, #2]
+	sub	r3, r3, ip
+	clz	r3, r3
+	lsr	r3, r3, #5
+	moveq	r3, #0
+	cmp	r3, #0
+	beq	.L348
 	movw	r2, #2806
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L489
-	bl	sftl_printk
-	b	.L465
-.L487:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2783
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L489
-	bl	sftl_printk
-	b	.L468
-.L485:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2781
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L489
-	bl	sftl_printk
-	b	.L466
-.L486:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2782
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L489
+	ldr	r1, .L364
+	ldr	r0, .L364+4
 	bl	sftl_printk
-	b	.L467
-.L490:
+.L348:
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L354:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, r1
+	strb	r3, [r4, #6]
+	ldrheq	r3, [r4, #2]
+	strbeq	r2, [r4, #6]
+	addeq	r3, r3, #1
+	strheq	r3, [r4, #2]	@ movhi
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r4, r3, lsl #1
+	ldrh	r0, [r3, #16]
+	b	.L352
+.L365:
 	.align	2
-.L489:
-	.word	.LANCHOR1+160
+.L364:
+	.word	.LANCHOR1+111
+	.word	.LC8
+	.word	.LANCHOR0
 	.fnend
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
@@ -3592,156 +2928,102 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r2, #:lower16:.LANCHOR0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movt	r2, #:upper16:.LANCHOR0
-	mov	ip, #0
-	ldrh	lr, [r2, #36]
-	str	ip, [r2, #3224]
-	cmp	lr, ip
-	beq	.L492
-	ldr	r4, [r2, #3228]
-	add	r0, r2, #320
-	ldr	r1, .L502
-	mov	r7, #1
-.L493:
-	ldrh	r3, [r1]
-	add	r5, ip, ip, lsl #1
-	ldr	r9, [r2, #3232]
-	add	r6, ip, ip, lsl #2
-	lsl	lr, r5, #2
-	add	r8, ip, #1
-	mul	r3, ip, r3
-	add	r10, r4, lr
-	str	r7, [r10, #8]
-	cmp	r3, #0
-	add	r10, r3, #3
-	movlt	r3, r10
-	bic	r3, r3, #3
-	add	r3, r9, r3
-	str	r3, [r4, r5, lsl #2]
-	ldrh	r3, [r0]
-	ldr	r10, [r2, #3240]
-	ldr	r4, [r2, #3228]
-	ldr	r9, [r2, #3236]
-	mul	r3, ip, r3
-	uxth	ip, r8
-	add	r6, r10, r6, lsl #2
-	add	r8, r4, lr
-	ldrh	lr, [r2, #36]
-	cmp	r3, #0
-	add	r10, r3, #3
-	movlt	r3, r10
-	cmp	lr, ip
-	bic	r3, r3, #3
-	add	r3, r9, r3
-	str	r3, [r8, #4]
-	ldr	r3, [r4, r5, lsl #2]
-	str	r3, [r6, #8]
-	ldr	r3, [r8, #4]
-	str	r3, [r6, #12]
-	bhi	.L493
-.L492:
-	ldr	r3, [r2, #3244]
-	cmp	r3, lr
-	popls	{r4, r5, r6, r7, r8, r9, r10, pc}
-	ldr	r1, .L502
-	mov	r4, #0
-	ldr	ip, [r2, #3228]
-	add	r0, r1, #2
-.L495:
-	ldrh	r3, [r1]
-	add	r7, lr, lr, lsl #1
-	ldr	r8, [r2, #3232]
-	add	r6, lr, #1
-	lsl	r5, r7, #2
-	mul	r3, lr, r3
-	add	r9, ip, r5
-	str	r4, [r9, #8]
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	mov	lr, #12
+	ldr	r5, .L372
+	mov	r4, #1
+	mov	r6, #20
+	mov	r3, #0
+	ldr	r2, .L372+4
+	str	r3, [r2, #3172]
+.L367:
+	ldrh	r1, [r2, #236]
+	uxth	r0, r3
+	add	ip, r3, #1
+	cmp	r0, r1
+	bcc	.L368
+	ldr	r4, .L372
+	mov	ip, #12
+	mov	lr, #0
+.L369:
+	ldr	r3, [r2, #3192]
+	cmp	r1, r3
+	bcc	.L370
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L368:
+	uxth	r3, r3
+	ldr	r7, [r2, #3176]
+	mul	r0, lr, r3
+	add	r1, r7, r0
+	str	r4, [r1, #8]
+	ldrh	r1, [r5]
+	mul	r1, r3, r1
+	add	r8, r1, #3
+	cmp	r1, #0
+	movlt	r1, r8
+	ldr	r8, [r2, #3180]
+	bic	r1, r1, #3
+	add	r1, r8, r1
+	str	r1, [r7, r0]
+	ldr	r1, .L372+8
+	ldr	r8, [r2, #3176]
+	ldrh	r1, [r1]
+	add	r7, r8, r0
+	mul	r1, r3, r1
+	add	r9, r1, #3
+	cmp	r1, #0
+	movlt	r1, r9
+	ldr	r9, [r2, #3184]
+	bic	r1, r1, #3
+	add	r1, r9, r1
+	str	r1, [r7, #4]
+	ldr	r1, [r2, #3188]
+	mla	r3, r6, r3, r1
+	ldr	r1, [r8, r0]
+	str	r1, [r3, #8]
+	ldr	r1, [r7, #4]
+	str	r1, [r3, #12]
+	mov	r3, ip
+	b	.L367
+.L370:
+	mul	r5, ip, r1
+	ldr	r6, [r2, #3176]
+	add	r3, r6, r5
+	str	lr, [r3, #8]
+	ldrh	r3, [r4]
+	mul	r3, r1, r3
+	add	r0, r3, #3
 	cmp	r3, #0
-	add	r9, r3, #3
-	movlt	r3, r9
+	movlt	r3, r0
+	ldr	r0, [r2, #3180]
 	bic	r3, r3, #3
-	add	r3, r8, r3
-	str	r3, [ip, r7, lsl #2]
-	ldrh	r3, [r0]
-	ldr	r8, [r2, #3244]
-	ldr	r7, [r2, #3236]
-	ldr	ip, [r2, #3228]
-	mul	r3, lr, r3
-	uxth	lr, r6
-	add	r5, ip, r5
+	add	r3, r0, r3
+	str	r3, [r6, r5]
+	ldr	r3, .L372+8
+	ldr	r0, [r2, #3176]
+	ldrh	r3, [r3]
+	add	r0, r0, r5
+	mul	r3, r1, r3
+	add	r1, r1, #1
+	uxth	r1, r1
+	add	r5, r3, #3
 	cmp	r3, #0
-	add	r6, r3, #3
-	movlt	r3, r6
-	cmp	lr, r8
+	movlt	r3, r5
+	ldr	r5, [r2, #3184]
 	bic	r3, r3, #3
-	add	r3, r7, r3
-	str	r3, [r5, #4]
-	bcc	.L495
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L503:
+	add	r3, r5, r3
+	str	r3, [r0, #4]
+	b	.L369
+.L373:
 	.align	2
-.L502:
-	.word	.LANCHOR0+318
+.L372:
+	.word	.LANCHOR0+314
+	.word	.LANCHOR0
+	.word	.LANCHOR0+316
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
-	.global	FtlVariablesInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlVariablesInit, %function
-FtlVariablesInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r5, #0
-	mvn	r3, #0
-	add	lr, r4, #3248
-	ldrh	r2, [r4]
-	add	ip, r4, #348
-	mov	r1, r5
-	ldr	r0, [r4, #4]
-	strh	r3, [lr]	@ movhi
-	str	r3, [r4, #3260]
-	lsl	r2, r2, #1
-	strh	r5, [ip]	@ movhi
-	str	r5, [r4, #3252]
-	str	r5, [r4, #3256]
-	bl	memset
-	ldrh	r2, [r4, #248]
-	mov	r1, r5
-	ldr	r0, [r4, #2528]
-	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r2, [r4, #248]
-	mov	r1, r5
-	ldr	r0, [r4, #3264]
-	lsl	r2, r2, #1
-	bl	memset
-	add	r0, r4, #2464
-	mov	r1, r5
-	mov	r2, #48
-	add	r0, r0, #8
-	bl	memset
-	add	r0, r4, #2688
-	mov	r1, r5
-	mov	r2, #512
-	add	r0, r0, #8
-	bl	memset
-	bl	FtlGcBufInit
-	bl	FtlL2PDataInit
-	mov	r0, r5
-	pop	{r4, r5, r6, pc}
-	.fnend
-	.size	FtlVariablesInit, .-FtlVariablesInit
-	.align	2
 	.global	FtlGcBufFree
 	.syntax unified
 	.arm
@@ -3751,51 +3033,40 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r1, #0
-	bxeq	lr
-	movw	r2, #:lower16:.LANCHOR0
-	push	{r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	movt	r2, #:upper16:.LANCHOR0
-	mov	r3, #0
-	mov	r6, r3
-	mov	r7, r3
-	ldr	r5, [r2, #3244]
-	ldr	ip, [r2, #3228]
-.L508:
-	cmp	r5, #0
-	beq	.L510
-	add	r3, r3, r3, lsl #2
-	ldr	r2, [ip]
-	add	r3, r0, r3, lsl #2
-	ldr	r4, [r3, #8]
-	cmp	r2, r4
-	beq	.L514
-	mov	r3, #0
-	b	.L509
-.L511:
-	ldr	lr, [ip, r2, lsl #2]
-	add	r2, ip, r2, lsl #2
-	cmp	lr, r4
-	beq	.L512
-.L509:
-	add	r3, r3, #1
-	uxth	r3, r3
-	cmp	r3, r5
-	add	r2, r3, r3, lsl #1
-	bcc	.L511
-.L510:
-	add	r6, r6, #1
-	uxth	r6, r6
-	cmp	r6, r1
-	mov	r3, r6
-	bcc	.L508
-	pop	{r4, r5, r6, r7, pc}
-.L514:
-	mov	r2, ip
-.L512:
-	str	r7, [r2, #8]
-	b	.L510
+	ldr	r3, .L382
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	lr, #0
+	mov	r5, #20
+	mov	r7, #12
+	mov	r8, lr
+	ldr	r6, [r3, #3192]
+	ldr	r4, [r3, #3176]
+.L375:
+	uxth	r3, lr
+	cmp	r1, r3
+	popls	{r4, r5, r6, r7, r8, r9, r10, pc}
+	mla	ip, r5, r3, r0
+	mov	r2, #0
+.L376:
+	uxth	r3, r2
+	cmp	r6, r3
+	bls	.L377
+	mul	r3, r7, r3
+	add	r2, r2, #1
+	ldr	r10, [r4, r3]
+	add	r9, r4, r3
+	ldr	r3, [ip, #8]
+	cmp	r10, r3
+	bne	.L376
+	str	r8, [r9, #8]
+.L377:
+	add	lr, lr, #1
+	b	.L375
+.L383:
+	.align	2
+.L382:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -3808,54 +3079,44 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r1, #0
-	bxeq	lr
-	movw	r3, #:lower16:.LANCHOR0
-	push	{r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	movt	r3, #:upper16:.LANCHOR0
-	mov	r6, #0
-	mov	r5, r6
+	ldr	r3, .L392
+	mov	ip, #0
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	mov	r6, #12
 	mov	r7, #1
-	ldr	lr, [r3, #3244]
-	ldr	r4, [r3, #3228]
-.L528:
-	cmp	lr, #0
-	beq	.L530
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L534
-	mov	r3, #0
-	b	.L529
-.L531:
-	ldr	ip, [r2, #8]
-	cmp	ip, #0
-	beq	.L532
-.L529:
-	add	r3, r3, #1
-	uxth	r3, r3
-	add	r2, r3, r3, lsl #1
-	cmp	r3, lr
-	add	r2, r4, r2, lsl #2
-	bcc	.L531
-.L530:
-	add	r5, r5, #1
-	uxth	r5, r5
-	cmp	r5, r1
-	mov	r6, r5
-	bcc	.L528
-	pop	{r4, r5, r6, r7, pc}
-.L534:
-	mov	r2, r4
-.L532:
-	add	r6, r6, r6, lsl #2
-	ldr	r3, [r2]
-	str	r7, [r2, #8]
-	add	r6, r0, r6, lsl #2
-	str	r3, [r6, #8]
-	ldr	r3, [r2, #4]
-	str	r3, [r6, #12]
-	b	.L530
+	mov	r8, #20
+	ldr	r4, [r3, #3192]
+	ldr	r5, [r3, #3176]
+.L385:
+	uxth	r2, ip
+	cmp	r1, r2
+	bhi	.L389
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L389:
+	mov	lr, #0
+.L386:
+	uxth	r3, lr
+	cmp	r4, r3
+	bls	.L387
+	mla	r3, r6, r3, r5
+	add	lr, lr, #1
+	ldr	r9, [r3, #8]
+	cmp	r9, #0
+	bne	.L386
+	mla	r2, r8, r2, r0
+	ldr	lr, [r3]
+	str	r7, [r3, #8]
+	str	lr, [r2, #8]
+	ldr	r3, [r3, #4]
+	str	r3, [r2, #12]
+.L387:
+	add	ip, ip, #1
+	b	.L385
+.L393:
+	.align	2
+.L392:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -3869,33 +3130,26 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movw	r2, #3268
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r2, [r3, r2]
-	cmp	r2, #0
-	beq	.L553
-	ldr	r3, [r3, #3272]
-	ldrh	r1, [r3]
-	cmp	r1, r0
-	beq	.L552
-	sub	r2, r2, #1
-	uxth	r2, r2
+	ldr	r2, .L399
+	ldr	r3, [r2, #3196]
+	add	r2, r2, #3200
+	ldrh	r2, [r2]
 	add	r2, r3, r2, lsl #1
-	b	.L548
-.L549:
-	ldrh	r1, [r3, #2]!
-	cmp	r1, r0
-	beq	.L552
-.L548:
+.L395:
 	cmp	r3, r2
-	bne	.L549
-.L553:
+	bne	.L397
 	mov	r0, #0
 	bx	lr
-.L552:
+.L397:
+	ldrh	r1, [r3], #2
+	cmp	r1, r0
+	bne	.L395
 	mov	r0, #1
 	bx	lr
+.L400:
+	.align	2
+.L399:
+	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -3910,104 +3164,53 @@ FtlGcUpdatePage:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r3, #306
-	mov	r5, r0
-	mov	r6, r1
+	mov	r4, r0
 	ubfx	r0, r0, #10, #16
-	ldrh	r1, [r4, r3]
-	mov	r7, r2
-	bl	__aeabi_uidivmod
-	add	r3, r4, #264
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	movw	r3, #3268
-	uxth	r0, r0
-	ldrh	lr, [r4, r3]
-	cmp	lr, #0
-	moveq	r3, lr
-	ldreq	r2, [r4, #3272]
-	beq	.L556
-	ldr	r2, [r4, #3272]
-	ldrh	r3, [r2]
-	cmp	r3, r0
-	movne	r1, r2
-	movne	r3, #0
-	bne	.L559
-	b	.L557
-.L560:
-	ldrh	ip, [r1, #2]!
-	cmp	ip, r0
-	beq	.L557
-.L559:
-	add	r3, r3, #1
-	uxth	r3, r3
-	cmp	r3, lr
-	bne	.L560
-	lsl	r3, r3, #1
-.L556:
-	movw	r1, #3268
-	strh	r0, [r2, r3]	@ movhi
-	ldrh	r3, [r4, r1]
-	add	r3, r3, #1
-	strh	r3, [r4, r1]	@ movhi
-.L557:
-	ldr	r2, .L563
-	ldr	r1, [r4, #3276]
-	ldrh	r3, [r2]
-	add	r3, r3, r3, lsl #1
-	lsl	r3, r3, #2
-	add	r0, r1, r3
-	stmib	r0, {r6, r7}
-	str	r5, [r1, r3]
-	ldrh	r3, [r2]
-	add	r3, r3, #1
-	strh	r3, [r2]	@ movhi
+	mov	r5, r1
+	mov	r6, r2
+	bl	P2V_block_in_plane
+	ldr	r3, .L406
+	mov	ip, #0
+	add	lr, r3, #3200
+	ldr	r1, [r3, #3196]
+	ldrh	r7, [lr]
+	sub	r2, r1, #2
+.L402:
+	uxth	r8, ip
+	cmp	r8, r7
+	bcc	.L404
+	moveq	ip, r8
+	lsleq	ip, ip, #1
+	strheq	r0, [r1, ip]	@ movhi
+	ldrheq	r2, [lr]
+	addeq	r2, r2, #1
+	strheq	r2, [lr]	@ movhi
+	b	.L403
+.L404:
+	ldrh	r8, [r2, #2]!
+	add	ip, ip, #1
+	cmp	r8, r0
+	bne	.L402
+.L403:
+	movw	ip, #3208
+	mov	r0, #12
+	ldrh	r2, [r3, ip]
+	mul	r0, r0, r2
+	ldr	r2, [r3, #3204]
+	add	r1, r2, r0
+	stmib	r1, {r5, r6}
+	str	r4, [r2, r0]
+	ldrh	r2, [r3, ip]
+	add	r2, r2, #1
+	strh	r2, [r3, ip]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L564:
+.L407:
 	.align	2
-.L563:
-	.word	.LANCHOR0+3280
+.L406:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
 	.align	2
-	.global	FtlGcPageVarInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlGcPageVarInit, %function
-FtlGcPageVarInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r5, #314
-	movw	lr, #3268
-	mov	r3, #0
-	ldrh	r2, [r4, r5]
-	add	ip, r4, #3280
-	ldr	r0, [r4, #3272]
-	mov	r1, #255
-	strh	r3, [r4, lr]	@ movhi
-	strh	r3, [ip]	@ movhi
-	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r2, [r4, r5]
-	mov	r1, #255
-	ldr	r0, [r4, #3276]
-	add	r2, r2, r2, lsl #1
-	lsl	r2, r2, #2
-	bl	memset
-	pop	{r4, r5, r6, lr}
-	b	FtlGcBufInit
-	.fnend
-	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
-	.align	2
 	.global	FtlGcRefreshBlock
 	.syntax unified
 	.arm
@@ -4019,28 +3222,31 @@ FtlGcRefreshBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
+	mov	r1, r0
 	mov	r4, r0
-	movw	r0, #:lower16:.LC79
-	mov	r1, r4
-	movt	r0, #:upper16:.LC79
+	ldr	r0, .L412
 	bl	sftl_printk
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r2, [r3, #234]
-	cmp	r4, r2
-	beq	.L568
-	ldrh	r1, [r3, #232]
+	ldr	r3, .L412+4
+	ldrh	r0, [r3, #226]
+	cmp	r4, r0
+	beq	.L409
+	ldrh	r1, [r3, #224]
 	cmp	r4, r1
-	beq	.L568
-	movw	r0, #65535
-	cmp	r2, r0
-	strheq	r4, [r3, #234]	@ movhi
-	beq	.L568
-	cmp	r1, r0
-	strheq	r4, [r3, #232]	@ movhi
-.L568:
+	beq	.L409
+	movw	r2, #65535
+	cmp	r0, r2
+	strheq	r4, [r3, #226]	@ movhi
+	beq	.L409
+	cmp	r1, r2
+	strheq	r4, [r3, #224]	@ movhi
+.L409:
 	mov	r0, #0
 	pop	{r4, pc}
+.L413:
+	.align	2
+.L412:
+	.word	.LC79
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
@@ -4055,65 +3261,47 @@ FtlGcMarkBadPhyBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	movw	r3, #306
-	mov	r4, r0
-	movw	r6, #3282
-	ldrh	r1, [r5, r3]
-	bl	__aeabi_uidivmod
-	add	r3, r5, #264
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r7, r0
-	movw	r0, #:lower16:.LC80
-	ldrh	r1, [r5, r6]
-	mov	r2, r4
-	movt	r0, #:upper16:.LC80
+	mov	r5, r0
+	ldr	r4, .L419
+	movw	r6, #3210
+	bl	P2V_block_in_plane
+	mov	r2, r5
+	mov	r7, r0
+	ldrh	r1, [r4, r6]
+	ldr	r0, .L419+4
 	bl	sftl_printk
 	mov	r0, r7
 	bl	FtlGcRefreshBlock
-	ldrh	r0, [r5, r6]
-	cmp	r0, #0
-	beq	.L577
-	movw	r3, #3284
-	ldr	ip, .L580
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L573
-	sub	r1, r0, #1
-	mov	r3, ip
-	uxth	r1, r1
-	add	r1, ip, r1, lsl #1
-	b	.L575
-.L576:
-	ldrh	r2, [r3, #2]!
-	cmp	r2, r4
-	beq	.L573
-.L575:
+	ldrh	r3, [r4, r6]
+	mov	r2, #0
+	ldr	r0, .L419+8
+.L415:
+	uxth	r1, r2
 	cmp	r3, r1
-	bne	.L576
-	cmp	r0, #15
-	bhi	.L573
-	add	r3, r0, #1
-	uxth	r3, r3
-.L572:
-	lsl	r0, r0, #1
-	movw	r2, #3282
-	strh	r3, [r5, r2]	@ movhi
-	strh	r4, [ip, r0]	@ movhi
-.L573:
+	bhi	.L417
+	cmp	r3, #15
+	movwls	r2, #3210
+	addls	r1, r3, #1
+	strhls	r1, [r4, r2]	@ movhi
+	lslls	r3, r3, #1
+	ldrls	r2, .L419+8
+	strhls	r5, [r2, r3]	@ movhi
+	b	.L416
+.L417:
+	add	r2, r2, #1
+	add	r1, r0, r2, lsl #1
+	ldrh	r1, [r1, #-2]
+	cmp	r1, r5
+	bne	.L415
+.L416:
 	mov	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L577:
-	ldr	ip, .L580
-	mov	r3, #1
-	b	.L572
-.L581:
+.L420:
 	.align	2
-.L580:
-	.word	.LANCHOR0+3284
+.L419:
+	.word	.LANCHOR0
+	.word	.LC80
+	.word	.LANCHOR0+3212
 	.fnend
 	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
 	.align	2
@@ -4126,51 +3314,40 @@ FtlGcReFreshBadBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r3, #3282
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	beq	.L583
-	ldrh	r1, [r4, #234]
-	movw	r2, #65535
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movw	r3, #3210
+	ldr	r4, .L428
+	ldrh	r2, [r4, r3]
+	cmp	r2, #0
+	beq	.L422
+	ldrh	r1, [r4, #226]
+	movw	r3, #65535
+	cmp	r1, r3
+	bne	.L422
+	movw	r3, #3246
+	movw	r5, #3246
+	ldrh	r1, [r4, r3]
 	cmp	r1, r2
-	beq	.L590
-.L583:
-	mov	r0, #0
-	pop	{r4, pc}
-.L590:
-	movw	r1, #3318
-	ldrh	r2, [r4, r1]
-	cmp	r3, r2
-	movls	r3, #0
-	strhls	r3, [r4, r1]	@ movhi
-	movls	r2, r3
-	ldr	r3, .L591
-	lsl	r2, r2, #1
-	movw	r1, #306
-	ldrh	r1, [r4, r1]
-	ldrh	r0, [r3, r2]
-	bl	__aeabi_uidivmod
-	ldr	r3, .L591+4
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
+	movcs	r2, #0
+	strhcs	r2, [r4, r3]	@ movhi
+	ldrh	r3, [r4, r5]
+	ldr	r2, .L428+4
+	lsl	r3, r3, #1
+	ldrh	r0, [r2, r3]
+	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	movw	r2, #3318
-	mov	r0, #0
-	ldrh	r3, [r4, r2]
+	ldrh	r3, [r4, r5]
 	add	r3, r3, #1
-	strh	r3, [r4, r2]	@ movhi
-	pop	{r4, pc}
-.L592:
+	strh	r3, [r4, r5]	@ movhi
+.L422:
+	mov	r0, #0
+	pop	{r4, r5, r6, pc}
+.L429:
 	.align	2
-.L591:
-	.word	.LANCHOR0+3284
-	.word	.LANCHOR0+264
+.L428:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3212
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
 	.align	2
@@ -4184,401 +3361,14 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	mov	r1, #193
-	movt	r1, 96
+	ldr	r1, .L431
 	b	__kmalloc
-	.fnend
-	.size	ftl_malloc, .-ftl_malloc
-	.align	2
-	.global	FtlMemInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlMemInit, %function
-FtlMemInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r6, #314
-	movw	r1, #3208
-	mov	ip, #32
-	ldrh	r0, [r4, r6]
-	movw	r3, #3210
-	mov	r2, #128
-	movw	lr, #65535
-	mov	r5, #0
-	strh	ip, [r4, r1]	@ movhi
-	strh	r2, [r4, r3]	@ movhi
-	movw	ip, #3282
-	movw	r1, #3318
-	add	r3, r4, #3216
-	mvn	r2, #0
-	.pad #12
-	sub	sp, sp, #12
-	lsl	r0, r0, #1
-	str	lr, [r4, #3324]
-	strh	r5, [r4, ip]	@ movhi
-	add	fp, r4, #320
-	strh	r5, [r4, r1]	@ movhi
-	add	r7, r4, #3392
-	strh	r5, [r3]	@ movhi
-	add	r10, r4, #328
-	strh	r2, [r4, #234]	@ movhi
-	movw	r8, #342
-	strh	r2, [r4, #232]	@ movhi
-	str	r5, [r4, #2644]
-	str	r5, [r4, #2648]
-	str	r5, [r4, #2632]
-	str	r5, [r4, #2620]
-	str	r5, [r4, #2616]
-	str	r5, [r4, #2624]
-	str	r5, [r4, #2628]
-	str	r5, [r4, #2612]
-	str	r5, [r4, #2652]
-	str	r5, [r4, #2656]
-	str	r5, [r4, #2664]
-	str	r5, [r4, #2668]
-	str	r5, [r4, #2672]
-	str	r5, [r4, #3320]
-	str	r5, [r4, #3220]
-	str	r5, [r4, #3328]
-	str	r5, [r4, #3212]
-	str	r5, [r4, #3332]
-	bl	ftl_malloc
-	ldrh	r2, [r4, r6]
-	str	r0, [r4, #3272]
-	add	r2, r2, r2, lsl #1
-	lsl	r0, r2, #2
-	bl	ftl_malloc
-	ldrh	r6, [r4, #36]
-	str	r0, [r4, #3276]
-	add	r6, r6, r6, lsl #2
-	lsl	r9, r6, #4
-	lsl	r6, r6, #2
-	mov	r0, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3336]
-	mov	r0, r6
-	bl	ftl_malloc
-	str	r0, [r4, #3340]
-	mov	r0, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3344]
-	mov	r0, r6
-	bl	ftl_malloc
-	str	r0, [r4, #3348]
-	mov	r0, r6
-	bl	ftl_malloc
-	ldrh	r2, [r4, #36]
-	movw	r3, #318
-	ldrh	r9, [r4, r3]
-	movw	r6, #262
-	str	r0, [r4, #3240]
-	lsl	r2, r2, #1
-	mov	r0, r9
-	add	r2, r2, #1
-	str	r2, [r4, #3244]
-	bl	ftl_malloc
-	str	r0, [r4, #3352]
-	mov	r0, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3356]
-	mov	r0, r9
-	bl	ftl_malloc
-	ldr	r2, [r4, #3244]
-	str	r0, [r4, #3360]
-	mul	r0, r2, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3232]
-	mov	r0, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3364]
-	mov	r0, r9
-	bl	ftl_malloc
-	ldr	r2, [r4, #3244]
-	str	r0, [r4, #3368]
-	add	r2, r2, r2, lsl #1
-	lsl	r0, r2, #2
-	bl	ftl_malloc
-	str	r0, [r4, #3228]
-	mov	r0, r9
-	bl	ftl_malloc
-	str	r0, [r4, #3372]
-	mov	r0, r9
-	bl	ftl_malloc
-	movw	r2, #266
-	str	r0, [r4, #3376]
-	ldrh	r0, [r4, r2]
-	add	r9, r4, #412
-	lsl	r0, r0, #2
-	bl	ftl_malloc
-	ldrh	r1, [fp]
-	ldrh	r2, [r4, #36]
-	str	r0, [r4, #3380]
-	mul	r2, r2, r1
-	mov	r0, r2
-	str	r2, [sp, #4]
-	bl	ftl_malloc
-	ldr	r2, [sp, #4]
-	str	r0, [r4, #3384]
-	lsl	r0, r2, #2
-	bl	ftl_malloc
-	ldrh	r2, [fp]
-	str	r0, [r4, #3388]
-	ldr	r0, [r4, #3244]
-	mul	r0, r0, r2
-	bl	ftl_malloc
-	ldrh	r2, [r4, #248]
-	str	r0, [r4, #3236]
-	lsl	r2, r2, #1
-	uxth	r2, r2
-	mov	r0, r2
-	strh	r2, [r7]	@ movhi
-	bl	ftl_malloc
-	ldrh	r2, [r7]
-	str	r0, [r4, #3264]
-	mov	r0, #65024
-	movt	r0, 511
-	add	r2, r2, #544
-	add	r2, r2, #3
-	lsr	r2, r2, #9
-	and	r0, r0, r2, lsl #9
-	strh	r2, [r7]	@ movhi
-	bl	ftl_malloc
-	ldrh	fp, [r4, #248]
-	add	r3, r0, #32
-	str	r0, [r4, #3396]
-	str	r3, [r4, #2528]
-	lsl	fp, fp, #1
-	mov	r0, fp
-	bl	ftl_malloc
-	str	r0, [r4, #3400]
-	mov	r0, fp
-	bl	ftl_malloc
-	ldr	fp, [r4, #332]
-	str	r0, [r4, #16]
-	lsl	fp, fp, #1
-	mov	r0, fp
-	bl	ftl_malloc
-	str	r0, [r4, #2596]
-	mov	r0, fp
-	bl	ftl_malloc
-	ldrh	r3, [r4, #248]
-	str	r0, [r4, #2540]
-	lsr	r0, r3, #3
-	add	r0, r0, #4
-	bl	ftl_malloc
-	ldrh	r3, [r4]
-	str	r0, [r4, #32]
-	lsl	r0, r3, #1
-	bl	ftl_malloc
-	ldrh	r3, [r4]
-	str	r0, [r4, #4]
-	lsl	r0, r3, #1
-	bl	ftl_malloc
-	ldrh	r3, [r4]
-	str	r0, [r4, #3404]
-	lsl	r0, r3, #2
-	bl	ftl_malloc
-	ldrh	r3, [r10]
-	str	r0, [r4, #3408]
-	lsl	r0, r3, #2
-	bl	ftl_malloc
-	ldrh	r2, [r10]
-	mov	r1, r5
-	str	r0, [r4, #3412]
-	lsl	r2, r2, #2
-	bl	memset
-	add	r3, r4, #340
-	ldrh	r0, [r3]
-	lsl	r0, r0, #2
-	bl	ftl_malloc
-	ldr	r3, [r4, #332]
-	str	r0, [r4, #2604]
-	lsl	r0, r3, #2
-	bl	ftl_malloc
-	ldrh	r3, [r4, r8]
-	str	r0, [r4, #2600]
-	add	r3, r3, r3, lsl #1
-	lsl	r0, r3, #2
-	bl	ftl_malloc
-	movw	r2, #318
-	ldrh	r3, [r4, r8]
-	ldrh	r2, [r4, r2]
-	str	r0, [r4, #2532]
-	mul	r0, r2, r3
-	bl	ftl_malloc
-	ldrh	r3, [r4, #248]
-	str	r0, [r4, #2544]
-	add	r3, r3, r3, lsl #1
-	lsl	r0, r3, #1
-	bl	ftl_malloc
-	movw	r3, #306
-	ldrh	r2, [r4, r6]
-	ldrh	r3, [r4, r3]
-	str	r0, [r4, #8]
-	add	r3, r3, #31
-	asr	r3, r3, #5
-	mul	r0, r3, r2
-	strh	r3, [r9]	@ movhi
-	lsl	r0, r0, #2
-	bl	ftl_malloc
-	ldrh	r3, [r4, r6]
-	str	r0, [r4, #380]
-	cmp	r3, #1
-	bls	.L603
-	ldrh	lr, [r9]
-	add	ip, r4, #352
-	add	r6, r3, #7
-	add	r1, r4, #384
-	add	r5, ip, r6, lsl #2
-	lsl	lr, lr, #2
-	mov	r2, lr
-	b	.L597
-.L704:
-	ldr	r0, [r4, #380]
-.L597:
-	add	r0, r0, r2
-	add	r2, r2, lr
-	str	r0, [r1], #4
-	cmp	r5, r1
-	bne	.L704
-	cmp	r3, #7
-	bhi	.L601
-.L595:
-	add	r2, ip, r6, lsl #2
-	mov	r1, #0
-	sub	r2, r2, #4
-.L600:
-	add	r3, r3, #1
-	str	r1, [r2, #4]!
-	cmp	r3, #8
-	bne	.L600
-.L601:
-	ldr	r3, [r4, #2596]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2540]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2604]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2600]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2532]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2544]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #380]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #16]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3272]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3276]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3336]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3344]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3348]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3240]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3340]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3352]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3356]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3360]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3232]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3364]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3368]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3228]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3384]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3388]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3236]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #2528]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3264]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #4]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3404]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3408]
-	cmp	r3, #0
-	beq	.L598
-	ldr	r3, [r4, #3412]
-	cmp	r3, #0
-	beq	.L598
-	mov	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L598:
-	movw	r0, #:lower16:.LC81
-	ldr	r1, .L705
-	movt	r0, #:upper16:.LC81
-	bl	sftl_printk
-	mvn	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L603:
-	mov	r3, #1
-	add	ip, r4, #352
-	mov	r6, #8
-	b	.L595
-.L706:
+.L432:
 	.align	2
-.L705:
-	.word	.LANCHOR1+180
+.L431:
+	.word	6291649
 	.fnend
-	.size	FtlMemInit, .-FtlMemInit
+	.size	ftl_malloc, .-ftl_malloc
 	.align	2
 	.global	ftl_free
 	.syntax unified
@@ -4601,8146 +3391,7171 @@ ftl_free:
 	.type	rknand_print_hex, %function
 rknand_print_hex:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	subs	r8, r3, #0
-	.pad #12
-	sub	sp, sp, #12
-	beq	.L716
-	mov	r5, #0
-	movw	r10, #:lower16:.LC83
-	movw	r9, #:lower16:.LC86
-	movw	fp, #:lower16:.LC85
-	mov	r6, r2
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, #0
+	ldr	fp, .L444
+	mov	r10, r0
 	mov	r7, r1
-	str	r0, [sp, #4]
-	mov	r4, r5
-	movt	r10, #:upper16:.LC83
-	movt	r9, #:upper16:.LC86
-	movt	fp, #:upper16:.LC85
-	b	.L717
-.L715:
-	add	r4, r4, #1
-	cmp	r4, r8
-	bcs	.L716
-.L717:
+	mov	r8, r2
+	mov	r9, r3
+	mov	r5, r6
+	mov	r4, r6
+.L435:
+	cmp	r4, r9
+	bcc	.L441
+	ldr	r0, .L444+4
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	sftl_printk
+.L441:
 	cmp	r5, #0
-	addne	r5, r5, #1
-	beq	.L710
-	cmp	r6, #4
-	beq	.L723
-.L712:
-	cmp	r6, #2
+	bne	.L436
+	mov	r3, r6
+	mov	r2, r7
+	mov	r1, r10
+	ldr	r0, .L444+8
+	bl	sftl_printk
+.L436:
+	cmp	r8, #4
+	ldreq	r1, [r7, r4, lsl #2]
+	ldreq	r0, .L444+12
+	beq	.L443
+	cmp	r8, #2
 	lsleq	r3, r4, #1
-	moveq	r0, fp
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
-	movne	r0, r9
+	ldrne	r0, .L444+16
+	moveq	r0, fp
 	ldrheq	r1, [r7, r3]
+.L443:
+	add	r5, r5, #1
 	bl	sftl_printk
-.L713:
 	cmp	r5, #15
-	bls	.L715
-	movw	r0, #:lower16:.LC82
-	add	r4, r4, #1
-	movt	r0, #:upper16:.LC82
-	bl	sftl_printk
-	cmp	r8, r4
-	bls	.L716
-.L710:
-	mul	r3, r4, r6
-	mov	r2, r7
-	ldr	r1, [sp, #4]
-	mov	r0, r10
-	mov	r5, #1
-	bl	sftl_printk
-	cmp	r6, #4
-	bne	.L712
-.L723:
-	movw	r0, #:lower16:.LC84
-	ldr	r1, [r7, r4, lsl #2]
-	movt	r0, #:upper16:.LC84
+	bls	.L440
+	mov	r5, #0
+	ldr	r0, .L444+4
 	bl	sftl_printk
-	b	.L713
-.L716:
-	movw	r0, #:lower16:.LC82
-	movt	r0, #:upper16:.LC82
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	b	sftl_printk
+.L440:
+	add	r4, r4, #1
+	add	r6, r6, r8
+	b	.L435
+.L445:
+	.align	2
+.L444:
+	.word	.LC83
+	.word	.LC85
+	.word	.LC81
+	.word	.LC82
+	.word	.LC84
 	.fnend
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
-	.global	FlashReadPages
+	.global	FlashEraseBlocks
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashReadPages, %function
-FlashReadPages:
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	subs	r10, r1, #0
-	ldr	r6, .L769
-	.pad #20
-	sub	sp, sp, #20
-	ldrh	r3, [r6, #12]
-	str	r3, [sp, #12]
-	beq	.L763
-	movw	r3, #:lower16:.LC8
-	str	r10, [sp, #4]
-	movt	r3, #:upper16:.LC8
-	mov	r5, r0
-	str	r3, [sp, #8]
+	mov	r8, r2
+	ldr	r5, .L464
+	.pad #28
+	sub	sp, sp, #28
+	mov	r4, r0
+	mov	fp, r0
+	ldr	r2, .L464+4
 	mov	r7, #0
-	b	.L740
-.L727:
-	ldrh	r3, [r6, #14]
-	ldrh	fp, [r6, #8]
-	ldr	r10, [r5, #4]
-	ldrh	r4, [r6, #10]
-	cmp	r3, #4
-	lsreq	fp, fp, #1
-	lsr	r3, r10, #10
-	lsleq	r4, r4, #1
-	mov	r1, fp
-	uxth	r0, r3
+	ldrh	r9, [r5, #12]
+	mvn	r10, #0
+	ldr	r3, [r2]
+	str	r2, [sp, #4]
+	str	r3, [sp, #20]
+	lsl	r3, r9, #3
 	str	r3, [sp]
-	uxtheq	r4, r4
-	bl	__aeabi_uidiv
-	uxth	r0, r0
+.L447:
+	cmp	r7, r8
+	beq	.L451
+	add	r2, sp, #12
+	add	r1, sp, #16
+	mov	r0, fp
+	bl	l2p_addr_tran
+	ldr	r6, [sp, #12]
+	cmp	r6, #0
+	bne	.L448
+	ldr	r2, [sp, #16]
 	ldr	r3, [sp]
-	cmp	r0, #3
-	mvnhi	r3, #0
-	strhi	r3, [r5]
-	bhi	.L730
-	uxth	r1, r3
-	ldr	r9, [r5, #8]
-	ubfx	ip, r10, #0, #10
-	uxtb	r10, r0
-	movw	r8, #:lower16:.LANCHOR0
-	ldr	r3, [r5, #12]
-	mls	r1, fp, r0, r1
-	tst	r9, #63
-	movt	r8, #:upper16:.LANCHOR0
-	mov	r0, r10
-	mla	r4, r4, r1, ip
-	ldrne	r9, [r8, #3372]
-	ldr	ip, [r8, #3452]
-	mov	r2, r9
-	mov	r1, r4
-	blx	ip
-	str	r0, [r5]
-	ldrh	r3, [r6, #14]
-	cmp	r3, #4
-	beq	.L766
-.L733:
-	ldr	r3, [r8, #3372]
-	cmp	r9, r3
-	beq	.L767
-.L730:
-	ldr	r3, [sp, #4]
-	add	r7, r7, #1
-	add	r5, r5, #20
-	cmp	r3, r7
-	beq	.L763
-.L740:
-	ldr	r3, [r5, #8]
-	cmp	r3, #0
-	beq	.L726
-	ldr	r3, [r5, #12]
-	cmp	r3, #0
-	bne	.L727
-.L726:
-	mov	r2, #96
-	ldr	r1, .L769+4
-	ldr	r0, [sp, #8]
-	bl	sftl_printk
-	b	.L727
-.L763:
-	mov	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L767:
-	ldr	r0, [r5, #8]
-	cmp	r9, r0
-	beq	.L730
-	ldr	r3, .L769+8
-	mov	r1, r9
-	ldrh	r2, [r3]
-	lsl	r2, r2, #9
-	bl	memcpy
-	b	.L730
-.L766:
-	ldr	r3, [r5, #12]
-	mov	r0, r10
-	ldr	r1, [sp, #12]
-	add	r2, r9, #2048
-	ldr	r10, [r8, #3452]
-	add	r3, r3, #8
-	add	r1, r1, r4
-	blx	r10
-	cmn	r0, #1
-	mov	r1, r0
-	beq	.L734
-	ldr	r3, [r5, #12]
-	ldr	r2, [r3, #12]
-	cmn	r2, #1
-	beq	.L768
-.L735:
-	ldr	r3, [r5]
-	sub	r0, r1, #256
-	clz	r0, r0
-	lsr	r0, r0, #5
-	cmn	r3, #1
-	moveq	r0, #0
-	cmp	r0, #0
-	movne	r3, #256
-	strne	r3, [r5]
-	bne	.L736
-	cmn	r3, #1
-	cmpne	r3, #256
-	bne	.L733
-	b	.L736
-.L768:
-	ldr	r2, [r3, #8]
-	cmn	r2, #1
-	bne	.L735
-	ldr	r3, [r3]
-	cmn	r3, #1
-	beq	.L735
-.L734:
+	cmp	r3, r2
+	bls	.L448
+	ldr	r5, .L464+8
+	ldr	r7, .L464+12
+	ldr	r9, .L464+16
+	b	.L462
+.L450:
 	mvn	r3, #0
-	str	r3, [r5]
-.L736:
-	movw	r0, #:lower16:.LC87
-	ldr	r1, [r5, #4]
-	mov	r2, r4
-	movt	r0, #:upper16:.LC87
+	ldr	r2, [sp, #16]
+	str	r3, [r4, #-20]
+	mov	r1, r5
+	mov	r0, r7
+	add	r6, r6, #1
 	bl	sftl_printk
-	ldr	r1, [r5, #8]
-	cmp	r1, #0
-	beq	.L739
-	mov	r3, #4
-	movw	r0, #:lower16:.LC88
-	mov	r2, r3
-	movt	r0, #:upper16:.LC88
+	mov	r3, #16
+	mov	r2, #4
+	ldr	r1, [r4, #-12]
+	mov	r0, r9
 	bl	rknand_print_hex
-.L739:
-	ldr	r1, [r5, #12]
-	cmp	r1, #0
-	beq	.L733
 	mov	r3, #4
-	movw	r0, #:lower16:.LC89
+	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	movt	r0, #:upper16:.LC89
+	ldr	r0, .L464+20
 	bl	rknand_print_hex
-	b	.L733
-.L770:
+.L462:
+	cmp	r6, r8
+	add	r4, r4, #20
+	bne	.L450
+	bl	dump_stack
+.L451:
+	ldr	r3, [sp, #4]
+	mov	r0, #0
+	ldr	r2, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L458
+	bl	__stack_chk_fail
+.L448:
+	ldr	r2, [r5, #3252]
+	uxtb	r0, r6
+	ldr	r1, [sp, #16]
+	blx	r2
+	subs	r2, r0, #0
+	movne	r2, r10
+	str	r2, [fp]
+	ldrh	r2, [r5, #14]
+	cmp	r2, #4
+	bne	.L455
+	ldr	r1, [sp, #16]
+	ldr	r2, [r5, #3252]
+	ldrb	r0, [sp, #12]	@ zero_extendqisi2
+	add	r1, r9, r1
+	blx	r2
+	cmp	r0, #0
+	strne	r10, [fp]
+.L455:
+	add	r7, r7, #1
+	add	fp, fp, #20
+	b	.L447
+.L458:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L465:
 	.align	2
-.L769:
-	.word	.LANCHOR0+3416
-	.word	.LANCHOR1+192
-	.word	.LANCHOR0+266
+.L464:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR1+130
+	.word	.LC86
+	.word	.LC87
+	.word	.LC88
 	.fnend
-	.size	FlashReadPages, .-FlashReadPages
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
-	.global	FtlLoadFactoryBbt
+	.global	FtlFreeSysBlkQueueIn
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadFactoryBbt, %function
-FtlLoadFactoryBbt:
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	fp, #:lower16:.LANCHOR0
-	movt	fp, #:upper16:.LANCHOR0
-	movw	r2, #262
-	ldrh	r1, [fp, r2]
-	ldr	r8, [fp, #3384]
-	ldr	r2, [fp, #3352]
+	sub	r3, r0, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	cmp	r3, r2
+	bxhi	lr
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r6, .L479
+	add	r4, r6, #416
+	ldrh	r3, [r4, #6]
+	cmp	r3, #1024
+	popeq	{r4, r5, r6, r7, r8, pc}
 	cmp	r1, #0
-	str	r8, [fp, #3476]
-	str	r2, [fp, #3472]
-	beq	.L785
-	ldr	r6, .L788
-	add	r10, fp, #364
-	ldr	r7, .L788+4
-	mov	r5, #0
-	movw	r9, #61664
-.L778:
-	ldrh	r2, [r6]
-	mvn	r1, #0
-	strh	r1, [r10]	@ movhi
-	add	r4, r2, r1
-	sub	r1, r2, #16
-	uxth	r4, r4
-	cmp	r4, r1
-	ble	.L774
-.L776:
-	mla	ip, r5, r2, r4
+	mov	r5, r0
+	beq	.L468
+	bl	P2V_block_in_plane
+	mov	r7, r0
+	ldr	r0, [r6, #3272]
+	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
-	mov	r0, r7
-	lsl	ip, ip, #10
-	str	ip, [fp, #3468]
-	bl	FlashReadPages
-	ldr	r2, [fp, #3464]
-	sub	r1, r4, #1
-	cmn	r2, #1
-	beq	.L775
-	ldrh	r2, [r8]
-	cmp	r2, r9
-	beq	.L787
-.L775:
-	ldrh	r2, [r6]
-	uxth	r4, r1
-	sub	r1, r2, #16
-	cmp	r4, r1
-	bgt	.L776
-.L774:
-	ldr	r3, .L788+8
-	add	r5, r5, #1
-	add	r10, r10, #2
-	ldrh	r2, [r3]
-	cmp	r2, r5
-	bhi	.L778
-.L785:
-	mov	r0, #0
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L787:
-	strh	r4, [r10]	@ movhi
-	b	.L774
-.L789:
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r2, [r6, #2540]
+	lsl	r0, r7, #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+	ldr	r3, [r6, #2612]
+	add	r3, r3, #1
+	str	r3, [r6, #2612]
+.L468:
+	ldrh	r3, [r4, #6]
+	add	r3, r3, #1
+	strh	r3, [r4, #6]	@ movhi
+	ldrh	r3, [r4, #4]
+	add	r2, r4, r3, lsl #1
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	strh	r5, [r2, #8]	@ movhi
+	strh	r3, [r4, #4]	@ movhi
+	pop	{r4, r5, r6, r7, r8, pc}
+.L480:
 	.align	2
-.L788:
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR0+262
+.L479:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
-	.global	FtlGetLastWrittenPage
+	.global	FtlFreeSysBlkQueueOut
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGetLastWrittenPage, %function
-FtlGetLastWrittenPage:
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 88
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r7, #:lower16:__stack_chk_guard
-	movt	r7, #:upper16:__stack_chk_guard
-	cmp	r1, #1
-	.pad #92
-	sub	sp, sp, #92
-	movwne	r2, #310
-	ldr	r3, [r7]
-	lsl	r5, r0, #10
-	mov	r6, r1
-	mov	r0, sp
-	str	r3, [sp, #84]
-	movwne	r3, #:lower16:.LANCHOR0
-	ldreq	r3, .L807
-	movtne	r3, #:upper16:.LANCHOR0
-	ldrhne	r8, [r3, r2]
-	ldrheq	r8, [r3]
-	subeq	r3, r3, #312
-	ldr	r2, [r3, #3376]
-	add	r3, sp, #20
-	str	r3, [sp, #12]
-	sub	r8, r8, #1
-	sxth	r8, r8
-	str	r2, [sp, #8]
-	mov	r2, r6
-	orr	r1, r8, r5
-	str	r1, [sp, #4]
-	mov	r1, #1
-	bl	FlashReadPages
-	ldr	r3, [sp, #20]
-	cmn	r3, #1
-	beq	.L805
-.L790:
-	ldr	r2, [sp, #84]
-	mov	r0, r8
-	ldr	r3, [r7]
-	cmp	r2, r3
-	bne	.L806
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L805:
-	cmp	r8, #0
-	blt	.L790
-	mov	r9, #0
-	b	.L798
-.L796:
-	add	r4, r4, #1
-	sxth	r9, r4
-.L797:
-	cmp	r9, r8
-	bgt	.L790
-.L798:
-	add	r3, r9, r8
-	mov	r1, #1
-	add	r3, r3, r3, lsr #31
-	mov	r2, r6
-	mov	r0, sp
-	asr	r4, r3, r1
-	orr	r3, r4, r5
-	str	r3, [sp, #4]
-	bl	FlashReadPages
-	ldr	r3, [sp, #20]
-	cmn	r3, #1
-	bne	.L796
-	ldr	r3, [sp, #24]
-	cmn	r3, #1
-	bne	.L796
-	ldr	r3, [sp]
-	cmn	r3, #1
-	beq	.L796
-	sub	r4, r4, #1
-	sxth	r8, r4
-	b	.L797
-.L806:
-	bl	__stack_chk_fail
-.L808:
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r6, .L487
+	add	r4, r6, #416
+	ldrh	r2, [r4, #6]
+	cmp	r2, #0
+	movweq	r5, #65535
+	beq	.L482
+	ldrh	r3, [r4, #2]
+	sub	r2, r2, #1
+	ldr	r0, [r6, #3272]
+	strh	r2, [r4, #6]	@ movhi
+	mov	r2, #1
+	add	r1, r4, r3, lsl #1
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	ldrh	r5, [r1, #8]
+	mov	r1, r2
+	strh	r3, [r4, #2]	@ movhi
+	lsl	r3, r5, #10
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r3, [r6, #2612]
+	add	r3, r3, #1
+	str	r3, [r6, #2612]
+.L482:
+	sub	r3, r5, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L483
+	ldrh	r2, [r4, #6]
+	mov	r1, r5
+	ldr	r0, .L487+4
+	bl	sftl_printk
+.L484:
+	b	.L484
+.L483:
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L488:
 	.align	2
-.L807:
-	.word	.LANCHOR0+312
+.L487:
+	.word	.LANCHOR0
+	.word	.LC89
 	.fnend
-	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
-	.global	FtlLoadBbt
+	.global	ftl_map_blk_alloc_new_blk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadBbt, %function
-FtlLoadBbt:
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r3, #306
-	add	r7, r4, #352
-	mov	r0, #0
-	ldrh	r2, [r4, r3]
-	mvn	r3, #0
-	ldr	ip, [r4, #3352]
-	ldr	r6, [r4, #3384]
-	add	r5, r2, r3
-	sub	r2, r2, #16
-	uxth	r5, r5
-	str	ip, [r4, #3472]
-	str	r6, [r4, #3476]
-	cmp	r2, r5
-	strh	r0, [r7, #6]	@ movhi
-	strh	r3, [r7]	@ movhi
-	str	r3, [r4, #364]
-	str	r3, [r4, #368]
-	str	r3, [r4, #372]
-	str	r3, [r4, #376]
-	ldrlt	r8, .L848
-	ldrlt	r9, .L848+4
-	blt	.L817
-	b	.L818
-.L815:
-	ldrh	r2, [r6]
-	movw	r3, #61649
-	cmp	r2, r3
-	beq	.L844
-.L814:
-	ldrh	r3, [r9]
-	sub	r5, r5, #1
-	uxth	r5, r5
-	sub	r3, r3, #16
-	cmp	r5, r3
-	ble	.L845
-.L817:
-	lsl	r3, r5, #10
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r8
-	str	r3, [r4, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3464]
-	cmn	r3, #1
-	bne	.L815
-	ldr	r3, [r4, #3468]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r8
-	add	r3, r3, r2
-	str	r3, [r4, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3464]
-	cmn	r3, #1
-	beq	.L814
-	b	.L815
-.L845:
-	ldrh	r5, [r7]
-.L816:
-	movw	r2, #65535
-	cmp	r5, r2
-	beq	.L818
-	ldrh	r3, [r7, #4]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r3, #0
+	ldrh	r1, [r0, #10]
+	mov	r4, r0
+	ldr	r2, [r0, #12]
+.L490:
+	uxth	r5, r3
+	cmp	r5, r1
+	bcs	.L493
+	mov	r7, r2
+	add	r3, r3, #1
+	ldrh	r6, [r7]
+	add	r2, r2, #2
+	cmp	r6, #0
+	bne	.L490
+	bl	FtlFreeSysBlkQueueOut
+	sub	r3, r0, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	mov	r1, r0
+	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	beq	.L819
-	lsl	r3, r3, #10
-	mov	r2, #1
-	mov	r1, r2
-	ldr	r0, .L848
-	str	r3, [r4, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3464]
-	cmn	r3, #1
-	beq	.L821
-	ldrh	r2, [r6]
-	movw	r3, #61649
-	cmp	r2, r3
-	beq	.L846
-.L821:
-	ldrh	r5, [r7]
-.L819:
-	mov	r0, r5
-	mov	r1, #1
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	add	r0, r0, #1
-	strh	r0, [r7, #2]	@ movhi
-	cmp	r5, #0
-	blt	.L822
-	ldr	r8, .L848
-	movw	r9, #61649
-.L825:
-	ldrh	r3, [r7]
-	mov	r2, #1
-	ldr	ip, [r4, #3352]
-	mov	r1, r2
-	mov	r0, r8
-	orr	r3, r5, r3, lsl #10
-	str	ip, [r4, #3472]
-	sub	r5, r5, #1
-	str	r3, [r4, #3468]
-	sxth	r5, r5
-	bl	FlashReadPages
-	ldr	r3, [r4, #3464]
-	cmn	r3, #1
-	beq	.L823
-	ldrh	r3, [r6]
-	cmp	r3, r9
-	beq	.L824
-.L823:
-	cmn	r5, #1
-	bne	.L825
-.L822:
-	movw	r0, #:lower16:.LC8
-	mov	r2, #251
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L848+8
+	bls	.L491
+	ldr	r3, .L498
+	ldr	r0, .L498+4
+	ldrh	r2, [r3, #6]
 	bl	sftl_printk
-.L824:
-	ldrh	r3, [r6, #12]
-	movw	r1, #65535
-	ldrh	r2, [r6, #10]
-	cmp	r3, r1
-	strh	r2, [r7, #6]	@ movhi
-	beq	.L826
-	ldr	r2, [r4, #240]
-	cmp	r3, r2
-	beq	.L826
-	ldrh	r0, [r4, #248]
-	lsr	r1, r0, #2
-	cmp	r3, r1
-	cmpcc	r2, r1
-	bcc	.L847
-.L826:
-	movw	r3, #262
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	beq	.L829
-	ldr	r6, .L848+12
-	mov	r5, #0
-	add	r8, r6, #32
-	sub	r7, r6, #118
-.L828:
-	ldrh	r2, [r8]
-	ldr	r1, [r4, #3472]
-	ldr	r0, [r6], #4
-	lsl	r2, r2, #2
-	mla	r1, r5, r2, r1
-	add	r5, r5, #1
-	bl	memcpy
-	ldrh	r3, [r7]
+.L492:
+	b	.L492
+.L491:
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	strh	r5, [r4]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r4, #28]
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+.L493:
+	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L828
-.L829:
+	bhi	.L495
+	movw	r2, #578
+	ldr	r1, .L498+8
+	ldr	r0, .L498+12
+	bl	sftl_printk
+.L495:
 	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L844:
-	ldr	r3, [r6, #4]
-	strh	r5, [r7]	@ movhi
-	str	r3, [r4, #360]
-	ldrh	r3, [r6, #8]
-	strh	r3, [r7, #4]	@ movhi
-	b	.L816
-.L847:
-	ldrh	r1, [r4, #36]
-	cmp	r3, #24
-	movcc	r3, #24
-	ldr	r2, [r4, #256]
-	sub	r0, r0, r3
-	str	r3, [r4, #240]
-	strh	r0, [r4, #20]	@ movhi
-	mul	r3, r3, r1
-	sub	r2, r2, r3
-	str	r3, [r4, #244]
-	str	r2, [r4, #252]
-	b	.L826
-.L846:
-	ldr	r3, [r6, #4]
-	ldr	r2, [r4, #360]
-	cmp	r3, r2
-	bls	.L821
-	ldrh	r5, [r7, #4]
-	str	r3, [r4, #360]
-	ldrh	r3, [r6, #8]
-	strh	r5, [r7]	@ movhi
-	strh	r3, [r7, #4]	@ movhi
-	b	.L819
-.L818:
-	mvn	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L849:
+	pop	{r4, r5, r6, r7, r8, pc}
+.L499:
 	.align	2
-.L848:
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR0+306
-	.word	.LANCHOR1+208
-	.word	.LANCHOR0+380
+.L498:
+	.word	.LANCHOR0+416
+	.word	.LC90
+	.word	.LANCHOR1+147
+	.word	.LC8
 	.fnend
-	.size	FtlLoadBbt, .-FtlLoadBbt
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
-	.global	FtlLoadSysInfo
+	.global	ftl_memset
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
+	.type	ftl_memset, %function
+ftl_memset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memset
+	.fnend
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	FtlMemInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlMemInit, %function
+FtlMemInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	.pad #16
-	sub	sp, sp, #16
-	mov	r1, #0
-	movw	r6, #2680
-	ldrh	r2, [r4, #20]
-	ldr	r3, [r4, #3384]
-	ldr	ip, [r4, #3352]
-	ldr	r0, [r4, #16]
-	lsl	r2, r2, #1
-	str	r3, [r4, #3476]
-	str	ip, [r4, #3472]
-	bl	memset
-	ldrh	r0, [r4, r6]
 	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L865
-	mov	r1, #1
-	ldr	r9, .L887
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	add	r0, r0, #1
-	ldrsh	r6, [r4, r6]
-	cmp	r5, #0
-	strh	r0, [r9, #2]	@ movhi
-	blt	.L853
-	ldr	r7, .L887+4
-	movw	r8, #19539
-	ldr	r10, .L887+8
-	movt	r8, 18004
-.L862:
-	ldr	ip, [r4, #3352]
-	orr	r3, r5, r6, lsl #10
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	str	ip, [r4, #3472]
-	str	r3, [r4, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3476]
-	ldr	ip, [r3, #12]
-	ldr	r3, [r4, #3464]
-	cmp	ip, #0
-	beq	.L854
-	cmn	r3, #1
-	beq	.L855
-	ldrh	r0, [r10]
-	movw	r2, #42982
-	ldr	r1, [r4, #3472]
-	cmp	r0, #0
-	beq	.L872
-	add	r0, r1, r0
-	movt	r2, 18374
-.L857:
-	lsr	r3, r2, #2
-	ldrb	lr, [r1], #1	@ zero_extendqisi2
-	add	r3, r3, r2, lsl #5
-	cmp	r1, r0
-	add	r3, r3, lr
-	eor	r2, r2, r3
-	bne	.L857
-.L856:
-	cmp	ip, r2
-	beq	.L858
-	ldrh	r1, [r9, #4]
-	movw	r0, #:lower16:.LC90
-	str	r2, [sp, #8]
-	movt	r0, #:upper16:.LC90
-	str	ip, [sp, #4]
-	mov	r3, r5
-	str	r1, [sp]
-	mov	r2, r6
-	ldr	r1, .L887+12
-	bl	sftl_printk
-	cmp	r5, #0
-	bne	.L859
-	ldrh	r3, [r9, #4]
-	cmp	r6, r3
-	beq	.L859
-	ldr	r2, .L887+16
-	sxth	r6, r3
-	ldrh	r5, [r2]
-	sub	r5, r5, #1
-	sxth	r5, r5
-.L860:
-	cmp	r5, #0
-	bge	.L862
-.L853:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1465
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L887+12
-	bl	sftl_printk
-.L861:
-	movw	r3, #318
-	ldrh	r7, [r4, #20]
-	ldrh	r3, [r4, r3]
-	add	r2, r7, #24
-	cmp	r3, r2, lsl #1
-	bcc	.L885
-.L863:
-	ldr	ip, [r4, #3472]
-	ldr	r5, .L887+20
-	add	r8, ip, #48
-	mov	r6, r5
-.L864:
-	ldr	r0, [ip]	@ unaligned
-	add	ip, ip, #16
-	ldr	r1, [ip, #-12]	@ unaligned
-	mov	lr, r6
-	ldr	r2, [ip, #-8]	@ unaligned
-	add	r6, r6, #16
-	ldr	r3, [ip, #-4]	@ unaligned
-	cmp	ip, r8
-	stmia	lr!, {r0, r1, r2, r3}
-	bne	.L864
-	mov	r1, ip
-	lsl	r2, r7, #1
-	ldr	r0, [r4, #16]
-	bl	memcpy
-	ldrh	r2, [r4, #20]
-	ldr	r1, [r4, #3472]
-	ldr	r0, [r4, #32]
-	add	r3, r2, #24
-	lsl	r3, r3, #1
-	lsr	r2, r2, #3
-	bic	r3, r3, #3
-	add	r2, r2, #4
-	add	r1, r1, r3
-	bl	memcpy
-	ldr	r2, [r4, #2472]
-	movw	r3, #19539
-	movt	r3, 18004
-	cmp	r2, r3
-	bne	.L865
-	movw	r3, #262
-	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
-	ldrh	r3, [r4, r3]
-	ldrh	r6, [r5, #8]
-	cmp	r2, r3
-	strh	r6, [r9, #6]	@ movhi
-	bne	.L865
-	movw	r3, #310
-	movw	r2, #266
-	ldrh	r3, [r4, r3]
-	movw	r7, #2676
-	ldrh	r2, [r4, r2]
-	ldr	r1, .L887+24
-	ldr	r8, [r4, #252]
-	mul	r3, r6, r3
-	str	r6, [r4, #3484]
-	ldrh	r0, [r1, #6]
-	ldrh	r1, [r4, #36]
-	mul	r2, r3, r2
-	sub	r0, r8, r0
-	str	r3, [r4, #2608]
-	sub	r0, r0, r6
-	str	r2, [r4, #344]
-	bl	__aeabi_uidiv
-	cmp	r6, r8
-	strh	r0, [r4, r7]	@ movhi
-	bhi	.L886
-.L866:
-	ldrh	r0, [r5, #16]
-	mov	r3, #0
-	ldrh	r1, [r5, #20]
-	mvn	lr, #0
-	ldrh	r2, [r5, #24]
-	ldrh	ip, [r5, #14]
-	lsr	r7, r0, #6
-	and	r0, r0, #63
-	lsr	r6, r1, #6
-	strb	r0, [r4, #46]
-	lsr	r0, r2, #6
-	and	r1, r1, #63
-	and	r2, r2, #63
-	strh	r7, [r4, #42]	@ movhi
-	strh	r6, [r4, #90]	@ movhi
-	ldrb	r7, [r4, #2483]	@ zero_extendqisi2
-	ldrh	r6, [r5, #22]
-	strb	r1, [r4, #94]
-	strh	r0, [r4, #138]	@ movhi
-	ldrh	r1, [r5, #18]
-	ldrb	r0, [r4, #2485]	@ zero_extendqisi2
-	ldrb	r5, [r4, #2484]	@ zero_extendqisi2
-	strb	r2, [r4, #142]
-	ldr	r2, [r4, #2504]
-	strb	r0, [r4, #144]
-	strh	r3, [r4, #186]	@ movhi
-	str	r2, [r4, #2652]
-	strb	r3, [r4, #190]
-	strb	r3, [r4, #192]
-	str	r3, [r4, #2632]
-	str	r3, [r4, #2620]
-	str	r3, [r4, #2612]
-	str	r3, [r4, #2628]
-	str	r3, [r4, #2656]
-	strh	ip, [r4, #40]	@ movhi
-	strb	r7, [r4, #48]
-	strh	r1, [r4, #88]	@ movhi
-	strh	r6, [r4, #136]	@ movhi
-	strb	r5, [r4, #96]
-	strh	lr, [r4, #184]	@ movhi
-	str	r3, [r4, #2668]
-	ldr	r2, [r4, #2512]
-	ldr	r0, [r4, #2644]
-	str	r3, [r4, #2624]
-	ldr	r3, [r4, #2508]
-	cmp	r2, r0
-	strhi	r2, [r4, #2644]
-	ldr	r2, [r4, #2648]
-	cmp	r3, r2
-	strhi	r3, [r4, #2648]
-	movw	r3, #65535
-	cmp	ip, r3
-	beq	.L869
-	ldr	r0, .L887+28
-	bl	make_superblock
-	ldrh	r1, [r4, #88]
-.L869:
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L870
-	ldr	r0, .L887+32
-	bl	make_superblock
-.L870:
-	ldrh	r2, [r4, #136]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L871
-	ldr	r0, .L887+36
-	bl	make_superblock
-.L871:
-	ldrh	r2, [r4, #184]
-	movw	r3, #65535
-	cmp	r2, r3
-	moveq	r0, #0
-	beq	.L850
-	ldr	r0, .L887+40
-	bl	make_superblock
-	mov	r0, #0
-.L850:
-	add	sp, sp, #16
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L859:
+	ldr	r4, .L603
+	movw	r6, #310
+	mov	r2, #32
+	mov	r5, #0
+	mov	r7, #12
+	str	r3, [r4, #3280]
 	mvn	r3, #0
-	str	r3, [r4, #3464]
-.L855:
-	sub	r5, r5, #1
-	sxth	r5, r5
-	b	.L860
-.L854:
-	cmn	r3, #1
-	beq	.L855
-.L858:
-	ldr	r3, [r4, #3352]
-	ldr	r3, [r3]
-	cmp	r3, r8
-	bne	.L855
-	ldr	r2, [r4, #3384]
-	movw	r3, #61604
-	ldrh	r2, [r2]
+	ldrh	r0, [r4, r6]
+	add	r9, r4, #316
+	strh	r3, [r4, #226]	@ movhi
+	strh	r3, [r4, #224]	@ movhi
+	movw	r3, #3156
+	strh	r2, [r4, r3]	@ movhi
+	mov	r2, #128
+	movw	r3, #3158
+	lsl	r0, r0, #1
+	strh	r2, [r4, r3]	@ movhi
+	movw	r3, #3164
+	strh	r5, [r4, r3]	@ movhi
+	movw	r3, #3210
+	strh	r5, [r4, r3]	@ movhi
+	movw	r3, #3246
+	strh	r5, [r4, r3]	@ movhi
+	str	r5, [r4, #2592]
+	str	r5, [r4, #2596]
+	str	r5, [r4, #2580]
+	str	r5, [r4, #2568]
+	str	r5, [r4, #2564]
+	str	r5, [r4, #2572]
+	str	r5, [r4, #2576]
+	str	r5, [r4, #2560]
+	str	r5, [r4, #2600]
+	str	r5, [r4, #2604]
+	str	r5, [r4, #2612]
+	str	r5, [r4, #2616]
+	str	r5, [r4, #2620]
+	str	r5, [r4, #3276]
+	str	r5, [r4, #3168]
+	str	r5, [r4, #3284]
+	str	r5, [r4, #3160]
+	str	r5, [r4, #3288]
+	bl	ftl_malloc
+	str	r0, [r4, #3196]
+	ldrh	r0, [r4, r6]
+	mov	r6, #20
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r4, #236]
+	str	r0, [r4, #3204]
+	mul	r6, r6, r3
+	lsl	r8, r6, #2
+	mov	r0, r8
+	bl	ftl_malloc
+	str	r0, [r4, #3292]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3296]
+	mov	r0, r8
+	bl	ftl_malloc
+	str	r0, [r4, #3300]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3272]
+	mov	r0, r6
+	bl	ftl_malloc
+	ldrh	r3, [r4, #236]
+	movw	r8, #314
+	ldrh	r6, [r4, r8]
+	str	r0, [r4, #3188]
+	lsl	r3, r3, #1
+	mov	r0, r6
+	add	r3, r3, #1
+	str	r3, [r4, #3192]
+	bl	ftl_malloc
+	str	r0, [r4, #3304]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3308]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3312]
+	ldr	r0, [r4, #3192]
+	mul	r0, r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3180]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3316]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3320]
+	ldr	r0, [r4, #3192]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	str	r0, [r4, #3176]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3324]
+	mov	r0, r6
+	bl	ftl_malloc
+	movw	r3, #262
+	str	r0, [r4, #3328]
+	ldrh	r0, [r4, r3]
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r3, [r9]
+	ldrh	r6, [r4, #236]
+	str	r0, [r4, #3332]
+	mul	r6, r6, r3
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3336]
+	lsl	r0, r6, #2
+	add	r6, r4, #3344
+	bl	ftl_malloc
+	ldrh	r3, [r9]
+	str	r0, [r4, #3340]
+	ldr	r0, [r4, #3192]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	str	r0, [r4, #3184]
+	ldrh	r0, [r4, #246]
+	lsl	r0, r0, #1
+	uxth	r0, r0
+	strh	r0, [r6]	@ movhi
+	bl	ftl_malloc
+	str	r0, [r4, #3348]
+	ldrh	r0, [r6]
+	ldr	r3, .L603+4
+	add	r0, r0, #544
+	add	r0, r0, #3
+	lsr	r0, r0, #9
+	strh	r0, [r6]	@ movhi
+	and	r0, r3, r0, lsl #9
+	bl	ftl_malloc
+	ldrh	r6, [r4, #246]
+	str	r0, [r4, #3352]
+	add	r0, r0, #32
+	str	r0, [r4, #2540]
+	lsl	r6, r6, #1
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3356]
+	mov	r0, r6
+	bl	ftl_malloc
+	ldr	r6, [r4, #332]
+	str	r0, [r4, #76]
+	lsl	r6, r6, #1
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3360]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3364]
+	add	r6, r4, #324
+	ldrh	r0, [r4, #246]
+	lsr	r0, r0, #3
+	add	r0, r0, #4
+	bl	ftl_malloc
+	str	r0, [r4, #24]
+	ldrh	r0, [r6]
+	lsl	r0, r0, #1
+	bl	ftl_malloc
+	str	r0, [r4, #352]
+	ldrh	r0, [r6]
+	lsl	r0, r0, #1
+	bl	ftl_malloc
+	str	r0, [r4, #3368]
+	ldrh	r0, [r6]
+	movw	r6, #326
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	str	r0, [r4, #3372]
+	ldrh	r0, [r4, r6]
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r2, [r4, r6]
+	mov	r1, r5
+	str	r0, [r4, #3376]
+	movw	r5, #342
+	movw	r6, #258
+	lsl	r2, r2, #2
+	bl	ftl_memset
+	add	r3, r4, #340
+	ldrh	r0, [r3]
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	str	r0, [r4, #3380]
+	ldr	r0, [r4, #332]
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	str	r0, [r4, #3384]
+	ldrh	r0, [r4, r5]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r4, r5]
+	add	r5, r4, #3392
+	str	r0, [r4, #2544]
+	ldrh	r0, [r4, r8]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r4, #246]
+	str	r0, [r4, #3388]
+	mov	r0, #6
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	movw	r3, #302
+	str	r0, [r4, #2520]
+	ldrh	r0, [r4, r3]
+	ldrh	r3, [r4, r6]
+	add	r0, r0, #31
+	asr	r0, r0, #5
+	strh	r0, [r5]	@ movhi
+	mul	r0, r0, r3
+	lsl	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r2, [r5]
+	add	ip, r4, #384
+	ldrh	lr, [r4, r6]
+	mov	r3, #1
+	str	r0, [r4, #384]
+	lsl	r2, r2, #2
+	mov	r1, r2
+.L502:
+	cmp	r3, lr
+	bcc	.L503
+	ldr	r2, .L603+8
+	mov	r1, #0
+	add	r3, r2, r3, lsl #2
+	add	r2, r2, #56
+	add	r3, r3, #24
+.L504:
 	cmp	r2, r3
-	beq	.L861
-	sub	r5, r5, #1
-	sxth	r5, r5
-	b	.L860
-.L885:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1467
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L887+12
-	bl	sftl_printk
-	ldrh	r7, [r4, #20]
-	b	.L863
-.L872:
-	movt	r2, 18374
-	b	.L856
-.L886:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1489
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L887+12
+	bne	.L505
+	ldr	r3, [r4, #3360]
+	cmp	r3, #0
+	bne	.L506
+.L508:
+	ldr	r1, .L603+12
+	ldr	r0, .L603+16
 	bl	sftl_printk
-	b	.L866
-.L865:
 	mvn	r0, #0
-	add	sp, sp, #16
-	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L888:
+.L503:
+	ldr	r0, [r4, #384]
+	add	r3, r3, #1
+	add	r0, r0, r1
+	add	r1, r1, r2
+	str	r0, [ip, #4]!
+	b	.L502
+.L505:
+	str	r1, [r3, #4]!
+	b	.L504
+.L506:
+	ldr	r3, [r4, #3364]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3380]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3384]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #2544]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3388]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #2520]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #384]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #76]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3196]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3204]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3292]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3300]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3272]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3188]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3296]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3304]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3308]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3312]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3180]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3316]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3320]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3176]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3336]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3340]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3184]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #2540]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #3348]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, [r4, #352]
+	cmp	r3, #0
+	beq	.L508
+	ldr	r3, .L603
+	ldr	r2, [r3, #3368]
+	cmp	r2, #0
+	beq	.L508
+	ldr	r2, [r3, #3372]
+	cmp	r2, #0
+	beq	.L508
+	ldr	r3, [r3, #3376]
+	cmp	r3, #0
+	beq	.L508
+	mov	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L604:
 	.align	2
-.L887:
-	.word	.LANCHOR0+2680
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR0+318
-	.word	.LANCHOR1+220
-	.word	.LANCHOR0+312
-	.word	.LANCHOR0+2472
-	.word	.LANCHOR0+352
-	.word	.LANCHOR0+40
-	.word	.LANCHOR0+88
-	.word	.LANCHOR0+136
-	.word	.LANCHOR0+184
+.L603:
+	.word	.LANCHOR0
+	.word	33553920
+	.word	.LANCHOR0+356
+	.word	.LANCHOR1+173
+	.word	.LC91
 	.fnend
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.size	FtlMemInit, .-FtlMemInit
 	.align	2
-	.global	FlashProgPages
+	.global	FtlBbt2Bitmap
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashProgPages, %function
-FlashProgPages:
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	ip, #:lower16:__stack_chk_guard
-	ldr	r7, .L946
-	.pad #68
-	sub	sp, sp, #68
-	movt	ip, #:upper16:__stack_chk_guard
-	cmp	r1, #0
-	str	r1, [sp]
-	str	r3, [sp, #28]
-	ldr	r1, [ip]
-	ldrh	r3, [r7, #12]
-	str	ip, [sp, #24]
-	str	r0, [sp, #20]
-	str	r2, [sp, #32]
-	str	r3, [sp, #16]
-	str	r1, [sp, #60]
-	beq	.L900
-	ldr	r1, [sp, #16]
-	movw	r3, #:lower16:.LC8
-	movt	r3, #:upper16:.LC8
-	movw	r2, #:lower16:.LANCHOR0
-	str	r3, [sp, #12]
-	movt	r2, #:upper16:.LANCHOR0
-	ldr	r3, [sp, #20]
-	mov	r8, #0
-	lsl	r1, r1, #3
-	str	r2, [sp, #4]
-	str	r1, [sp, #8]
-	mov	r5, r3
-	str	r3, [sp, #36]
-	b	.L906
-.L943:
-	uxth	r4, r4
-	cmp	r6, #0
-	ubfx	r10, r10, #0, #10
-	mls	r4, r9, r6, r4
-	mla	r4, fp, r4, r10
-	bne	.L898
-	ldr	r3, [sp, #8]
-	cmp	r3, r4
-	bhi	.L940
-.L898:
-	ldr	r9, [r5, #8]
-	tst	r9, #63
-	beq	.L901
-	ldr	r3, [sp, #4]
-	ldr	r0, [r3, #3372]
-	cmp	r9, r0
-	beq	.L901
-	ldr	r3, .L946+4
-	mov	r1, r9
-	mov	r9, r0
+	ldr	r3, .L612
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r4, r0
+	ldr	r7, .L612+4
+	sub	r5, r4, #2
+	add	r4, r4, #1020
+	mov	r6, r1
 	ldrh	r2, [r3]
-	lsl	r2, r2, #9
-	bl	memcpy
-.L901:
-	ldr	r3, [sp, #4]
-	uxtb	r6, r6
-	mov	r2, r9
-	mov	r0, r6
-	mov	r1, r4
-	ldr	r10, [r3, #3448]
-	ldr	r3, [r5, #12]
-	blx	r10
-	cmp	r0, #0
-	mvnne	r3, #0
-	streq	r0, [r5]
-	strne	r3, [r5]
-	ldrh	r3, [r7, #14]
-	cmp	r3, #4
-	beq	.L941
-.L897:
-	ldr	r3, [sp]
-	add	r8, r8, #1
-	add	r5, r5, #20
-	cmp	r3, r8
-	beq	.L942
-.L906:
-	ldr	r3, [r5, #8]
-	cmp	r3, #0
-	beq	.L893
-	ldr	r3, [r5, #12]
-	cmp	r3, #0
-	beq	.L893
-.L894:
-	ldrh	r2, [r7, #14]
-	ldrh	fp, [r7, #10]
-	ldrh	r9, [r7, #8]
-	ldr	r10, [r5, #4]
-	cmp	r2, #4
-	lsleq	r4, fp, #1
-	lsreq	r9, r9, #1
-	uxtheq	fp, r4
-	lsr	r4, r10, #10
-	mov	r1, r9
-	uxth	r0, r4
-	bl	__aeabi_uidiv
-	uxth	r6, r0
-	cmp	r6, #3
-	bls	.L943
-	mvn	r3, #0
-	str	r3, [r5]
-	b	.L897
-.L893:
-	mov	r2, #148
-	ldr	r1, .L946+8
-	ldr	r0, [sp, #12]
-	bl	sftl_printk
-	b	.L894
-.L941:
-	ldr	r3, [r5, #12]
-	add	r2, r9, #2048
-	ldr	r1, [sp, #16]
+	add	r4, r4, #2
+	ldr	r8, .L612+8
+	mov	r1, #0
+	ldr	r9, .L612+12
 	mov	r0, r6
-	ldr	ip, [sp, #4]
-	add	r3, r3, #8
-	add	r1, r1, r4
-	ldr	r4, [ip, #3448]
-	blx	r4
-	cmp	r0, #0
-	mvnne	r3, #0
-	strne	r3, [r5]
-	b	.L897
-.L940:
-	ldr	r5, .L946+8
-	movw	r4, #:lower16:.LC91
-	ldr	r7, [sp, #36]
-	movt	r4, #:upper16:.LC91
-.L899:
-	mvn	r3, #0
-	ldr	r2, [r7, #4]
-	str	r3, [r7]
-	mov	r1, r5
-	mov	r0, r4
-	add	r6, r6, #1
-	bl	sftl_printk
-	movw	r0, #:lower16:.LC92
-	ldr	r1, [r7, #8]
-	mov	r3, #16
-	movt	r0, #:upper16:.LC92
-	mov	r2, #4
-	add	r7, r7, #20
-	bl	rknand_print_hex
-	mov	r3, #4
-	movw	r0, #:lower16:.LC93
-	mov	r2, r3
-	ldr	r1, [r7, #-8]
-	movt	r0, #:upper16:.LC93
-	bl	rknand_print_hex
-	ldr	r3, [sp]
-	cmp	r3, r6
-	bne	.L899
-	bl	dump_stack
-.L900:
-	ldr	r3, [sp, #24]
-	mov	r0, #0
-	ldr	r2, [sp, #60]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L944
-	add	sp, sp, #68
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L942:
-	ldr	r3, [sp, #28]
-	cmp	r3, #0
-	beq	.L900
-	movw	r8, #:lower16:.LC95
-	movw	r5, #:lower16:.LANCHOR0
-	movw	r9, #:lower16:.LC94
-	movw	r7, #:lower16:.LC96
-	movt	r8, #:upper16:.LC95
-	ldr	r10, [sp]
-	ldr	r4, [sp, #20]
-	movt	r5, #:upper16:.LANCHOR0
-	movt	r9, #:upper16:.LC94
-	movt	r7, #:upper16:.LC96
-	mov	r6, #0
-	ldr	fp, [sp, #32]
-	str	r8, [sp]
-	b	.L912
-.L908:
-	cmp	r8, #256
-	beq	.L945
-.L909:
-	ldr	r3, [r4, #12]
-	cmp	r3, #0
-	beq	.L910
-	ldr	r1, [r5, #3380]
-	ldr	r2, [r3]
-	ldr	r3, [r1]
-	cmp	r2, r3
-	beq	.L910
-	ldr	r1, [r4, #4]
-	mov	r0, r7
-	bl	sftl_printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L910:
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L911
-	ldr	r1, [r5, #3372]
-	ldr	r2, [r3]
-	ldr	r3, [r1]
+	lsl	r2, r2, #2
+	bl	ftl_memset
+.L608:
+	ldrh	r3, [r5, #2]
+	movw	r2, #65535
+	cmp	r3, r2
+	popeq	{r4, r5, r6, r7, r8, r9, r10, pc}
+	ldrh	r2, [r7]
 	cmp	r2, r3
-	beq	.L911
-	movw	r0, #:lower16:.LC97
-	ldr	r1, [r4, #4]
-	movt	r0, #:upper16:.LC97
-	bl	sftl_printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L911:
-	add	r6, r6, #1
-	add	r4, r4, #20
-	cmp	r10, r6
-	beq	.L900
-.L912:
-	ldr	r0, [r5, #3372]
-	mov	r3, #0
-	mov	r2, fp
-	mov	r1, #1
-	str	r3, [r0]
-	add	r0, sp, #40
-	ldr	ip, [r5, #3380]
-	str	r3, [ip]
-	ldr	lr, [r4, #4]
-	ldr	ip, [r5, #3372]
-	ldr	r3, [r5, #3380]
-	str	lr, [sp, #44]
-	str	ip, [sp, #48]
-	str	r3, [sp, #52]
-	bl	FlashReadPages
-	ldr	r8, [sp, #40]
-	cmn	r8, #1
-	bne	.L908
-	ldr	r1, [r4, #4]
+	bhi	.L607
+	mov	r2, #74
+	mov	r1, r8
 	mov	r0, r9
 	bl	sftl_printk
-	str	r8, [r4]
-	ldr	r8, [sp, #40]
-	cmp	r8, #256
-	bne	.L909
-.L945:
-	ldr	r1, [r4, #4]
-	ldr	r0, [sp]
-	bl	sftl_printk
-	str	r8, [r4]
-	b	.L909
-.L944:
-	bl	__stack_chk_fail
-.L947:
+.L607:
+	ldrh	r3, [r5, #2]!
+	mov	r0, #1
+	cmp	r4, r5
+	lsr	r1, r3, #5
+	and	r3, r3, #31
+	ldr	r2, [r6, r1, lsl #2]
+	orr	r3, r2, r0, lsl r3
+	str	r3, [r6, r1, lsl #2]
+	bne	.L608
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L613:
 	.align	2
-.L946:
-	.word	.LANCHOR0+3416
-	.word	.LANCHOR0+266
-	.word	.LANCHOR1+236
+.L612:
+	.word	.LANCHOR0+3392
+	.word	.LANCHOR0+302
+	.word	.LANCHOR1+184
+	.word	.LC8
 	.fnend
-	.size	FlashProgPages, .-FlashProgPages
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	2
-	.global	FlashEraseBlocks
+	.global	FtlBbtMemInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashEraseBlocks, %function
-FlashEraseBlocks:
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	subs	r10, r2, #0
-	ldr	r7, .L968
-	.pad #20
-	sub	sp, sp, #20
-	ldrh	r3, [r7, #12]
-	str	r3, [sp, #8]
-	beq	.L950
-	lsl	r3, r3, #3
-	movw	r9, #:lower16:.LANCHOR0
-	str	r0, [sp, #12]
-	movt	r9, #:upper16:.LANCHOR0
-	str	r10, [sp]
-	add	r6, r0, #4
-	str	r3, [sp, #4]
-	mov	r8, #0
-	b	.L959
-.L957:
-	ldr	r3, [sp]
-	add	r6, r6, #20
-	cmp	r3, r8
-	beq	.L950
-.L959:
-	ldrh	r4, [r7, #8]
-	add	r8, r8, #1
-	ldrh	r3, [r7, #14]
-	ldr	r5, [r6]
-	ldrh	r10, [r7, #10]
-	cmp	r3, #4
-	lsreq	r4, r4, #1
-	lsr	fp, r5, #10
-	ubfx	r5, r5, #0, #10
-	lsleq	r2, r10, #1
-	mov	r1, r4
-	uxth	r0, fp
-	uxtheq	r10, r2
-	bl	__aeabi_uidiv
-	uxth	ip, fp
-	uxth	r1, r0
-	mls	r4, r4, r1, ip
-	uxtb	fp, r1
-	cmp	r1, #0
-	mov	r0, fp
-	mla	r4, r10, r4, r5
-	bne	.L952
-	ldr	r3, [sp, #4]
-	cmp	r3, r4
-	bhi	.L967
-.L952:
-	ldr	r2, [r9, #3444]
+	@ link register save eliminated.
+	ldr	r0, .L615
+	mvn	r2, #0
+	mov	r1, #255
+	add	r3, r0, #356
+	add	r0, r0, #368
+	strh	r2, [r3]	@ movhi
+	mov	r2, #0
+	strh	r2, [r3, #6]	@ movhi
+	mov	r2, #16
+	b	ftl_memset
+.L616:
+	.align	2
+.L615:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L619
+	mov	r2, #2048
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, #0
 	mov	r1, r4
-	blx	r2
-	cmp	r0, #0
-	mvnne	r0, #0
-	str	r0, [r6, #-4]
-	ldrh	r2, [r7, #14]
-	cmp	r2, #4
-	bne	.L957
-	ldr	r2, [sp, #8]
-	mov	r0, fp
-	ldr	r3, [r9, #3444]
-	add	r6, r6, #20
-	add	r1, r2, r4
-	blx	r3
-	cmp	r0, #0
-	mvnne	r3, #0
-	strne	r3, [r6, #-24]
-	ldr	r3, [sp]
-	cmp	r3, r8
-	bne	.L959
-.L950:
-	mov	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L967:
-	ldr	r8, .L968+4
-	movw	r7, #:lower16:.LC91
-	ldr	r6, [sp, #12]
-	mov	r5, r1
-	ldr	r9, [sp]
-	movt	r7, #:upper16:.LC91
-.L953:
-	mvn	r3, #0
-	mov	r2, r4
-	str	r3, [r6]
-	mov	r1, r8
-	mov	r0, r7
-	add	r5, r5, #1
-	bl	sftl_printk
-	movw	r0, #:lower16:.LC92
-	ldr	r1, [r6, #8]
-	mov	r3, #16
-	movt	r0, #:upper16:.LC92
-	mov	r2, #4
-	add	r6, r6, #20
-	bl	rknand_print_hex
-	mov	r3, #4
-	movw	r0, #:lower16:.LC93
-	ldr	r1, [r6, #-8]
-	mov	r2, r3
-	movt	r0, #:upper16:.LC93
-	bl	rknand_print_hex
-	cmp	r9, r5
-	bne	.L953
-	bl	dump_stack
-	b	.L950
-.L969:
+	add	r3, ip, #416
+	strh	r0, [r3]	@ movhi
+	add	r0, ip, #424
+	strh	r4, [r3, #2]	@ movhi
+	strh	r4, [r3, #4]	@ movhi
+	strh	r4, [r3, #6]	@ movhi
+	bl	ftl_memset
+	mov	r0, r4
+	pop	{r4, pc}
+.L620:
 	.align	2
-.L968:
-	.word	.LANCHOR0+3416
-	.word	.LANCHOR1+252
+.L619:
+	.word	.LANCHOR0
 	.fnend
-	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
 	.align	2
+	.global	ftl_free_no_use_map_blk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlFreeSysBlkQueueIn.part.10, %function
-FtlFreeSysBlkQueueIn.part.10:
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r1, #0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r5, r0
-	bne	.L976
-.L971:
-	ldr	r3, .L977
-	ldrh	r2, [r3, #4]
-	ldrh	r0, [r3, #6]
-	add	r1, r2, #1
-	add	r2, r3, r2, lsl #1
-	add	r0, r0, #1
-	ubfx	r1, r1, #0, #10
-	strh	r0, [r3, #6]	@ movhi
-	strh	r1, [r3, #4]	@ movhi
-	strh	r5, [r2, #8]	@ movhi
-	pop	{r4, r5, r6, pc}
-.L976:
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r3, #306
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r1, [r4, r3]
-	bl	__aeabi_uidivmod
-	add	r3, r4, #264
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	ldr	r3, [r4, #3348]
-	lsl	ip, r5, #10
-	mov	r2, #1
-	uxth	r6, r0
-	mov	r1, r2
-	str	ip, [r3, #4]
-	mov	r0, r3
-	bl	FlashEraseBlocks
-	ldr	r2, [r4, #2528]
-	lsl	r0, r6, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-	ldr	r3, [r4, #2664]
-	add	r3, r3, #1
-	str	r3, [r4, #2664]
-	b	.L971
-.L978:
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r1, #0
+	ldrh	r2, [r0, #10]
+	mov	r4, r0
+	ldr	r5, [r0, #20]
+	ldr	r7, [r0, #12]
+	ldr	r6, [r0, #24]
+	lsl	r2, r2, #1
+	mov	r0, r5
+	bl	ftl_memset
+	mov	r2, #0
+.L622:
+	ldrh	r1, [r4, #6]
+	uxth	r3, r2
+	cmp	r1, r3
+	bhi	.L626
+	ldr	r3, .L642
+	mov	r6, #0
+	mov	r8, r6
+	mov	r10, r6
+	ldrh	r2, [r3]
+	ldrh	r3, [r4]
+	lsl	r3, r3, #1
+	strh	r2, [r5, r3]	@ movhi
+	ldrh	r9, [r5]
+.L627:
+	ldrh	r3, [r4, #10]
+	uxth	r1, r6
+	cmp	r3, r1
+	bhi	.L631
+	mov	r0, r8
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L626:
+	uxth	r3, r2
+	mov	r1, #0
+	ldr	r0, [r6, r3, lsl #2]
+	ubfx	r0, r0, #10, #16
+.L623:
+	ldrh	ip, [r4, #10]
+	uxth	r3, r1
+	cmp	ip, r3
+	addls	r2, r2, #1
+	bls	.L622
+.L625:
+	uxth	r3, r1
+	add	r1, r1, #1
+	lsl	r3, r3, #1
+	ldrh	ip, [r7, r3]
+	adds	lr, ip, #0
+	movne	lr, #1
+	cmp	r0, ip
+	movne	lr, #0
+	cmp	lr, #0
+	ldrhne	ip, [r5, r3]
+	addne	ip, ip, #1
+	strhne	ip, [r5, r3]	@ movhi
+	b	.L623
+.L631:
+	uxth	r3, r6
+	lsl	r3, r3, #1
+	ldrh	r2, [r5, r3]
+	cmp	r9, r2
+	bls	.L628
+	ldrh	r0, [r7, r3]
+	add	fp, r7, r3
+	cmp	r0, #0
+	bne	.L629
+.L630:
+	add	r6, r6, #1
+	b	.L627
+.L628:
+	cmp	r2, #0
+	bne	.L630
+	ldrh	r0, [r7, r3]
+	add	fp, r7, r3
+	cmp	r0, #0
+	beq	.L630
+.L632:
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	strh	r10, [fp]	@ movhi
+	ldrh	r3, [r4, #8]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	b	.L630
+.L629:
+	subs	r9, r2, #0
+	mov	r8, r1
+	beq	.L632
+	b	.L630
+.L643:
 	.align	2
-.L977:
-	.word	.LANCHOR0+416
+.L642:
+	.word	.LANCHOR0+308
 	.fnend
-	.size	FtlFreeSysBlkQueueIn.part.10, .-FtlFreeSysBlkQueueIn.part.10
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
-	.global	FtlFreeSysBlkQueueIn
+	.global	FtlL2PDataInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlFreeSysBlkQueueIn, %function
-FtlFreeSysBlkQueueIn:
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	sub	r3, r0, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	cmp	r3, r2
-	bxhi	lr
-	ldr	r3, .L984
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	bxeq	lr
-	b	FtlFreeSysBlkQueueIn.part.10
-.L985:
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r1, #0
+	ldr	r4, .L648
+	mvn	r5, #0
+	ldr	r2, [r4, #332]
+	ldr	r0, [r4, #3364]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	movw	r3, #314
+	movw	r2, #342
+	ldrh	r3, [r4, r3]
+	mov	r1, #255
+	ldrh	r2, [r4, r2]
+	ldr	r0, [r4, #3388]
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldr	r0, .L648+4
+	mov	r2, #0
+	mov	r3, r4
+	mov	lr, #12
+	mov	r4, r2
+	sub	r6, r0, #28
+.L645:
+	ldrh	r7, [r0]
+	uxth	r1, r2
+	add	ip, r2, #1
+	cmp	r7, r1
+	bhi	.L646
+	ldr	r2, .L648+8
+	mvn	r1, #0
+	movw	r0, #3396
+	strh	r1, [r3, r0]	@ movhi
+	strh	r1, [r2, #2]	@ movhi
+	ldr	r1, [r3, #332]
+	strh	r1, [r2, #10]	@ movhi
+	ldr	r1, .L648+12
+	strh	r1, [r2, #4]	@ movhi
+	ldrh	r1, [r2, #44]
+	strh	r1, [r2, #8]	@ movhi
+	sub	r1, r2, #3056
+	ldrh	r1, [r1]
+	strh	r1, [r2, #6]	@ movhi
+	ldr	r2, [r3, #3360]
+	str	r2, [r3, #3408]
+	ldr	r2, [r3, #3384]
+	str	r2, [r3, #3412]
+	ldr	r2, [r3, #3364]
+	str	r2, [r3, #3416]
+	ldr	r2, [r3, #3380]
+	str	r2, [r3, #3420]
+	pop	{r4, r5, r6, r7, r8, pc}
+.L646:
+	uxth	r2, r2
+	ldr	r1, [r3, #2544]
+	mul	r7, lr, r2
+	add	r8, r1, r7
+	str	r4, [r8, #4]
+	strh	r5, [r1, r7]	@ movhi
+	ldr	r1, [r3, #2544]
+	add	r1, r1, r7
+	ldrh	r7, [r6]
+	mul	r2, r2, r7
+	ldr	r7, [r3, #3388]
+	bic	r2, r2, #3
+	add	r2, r7, r2
+	str	r2, [r1, #8]
+	mov	r2, ip
+	b	.L645
+.L649:
 	.align	2
-.L984:
-	.word	.LANCHOR0+416
+.L648:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+342
+	.word	.LANCHOR0+3396
+	.word	-3902
 	.fnend
-	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
-	.global	ftl_free_no_use_map_blk
+	.global	FtlVariablesInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_free_no_use_map_blk, %function
-ftl_free_no_use_map_blk:
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r1, #0
-	ldrh	r2, [r0, #10]
-	mov	r8, r0
-	.pad #12
-	sub	sp, sp, #12
-	ldr	r7, [r0, #20]
-	ldr	r4, [r0, #12]
-	ldr	r5, [r0, #24]
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r4, .L652
+	movw	r2, #3442
+	mov	r5, #0
+	mov	r1, r5
+	strh	r3, [r4, r2]	@ movhi
+	str	r3, [r4, #3452]
+	add	r3, r4, #348
+	strh	r5, [r3]	@ movhi
+	add	r3, r4, #324
+	ldrh	r2, [r3]
+	ldr	r0, [r4, #352]
+	str	r5, [r4, #3444]
+	str	r5, [r4, #3448]
 	lsl	r2, r2, #1
-	mov	r0, r7
-	bl	memset
-	ldrh	r3, [r8, #6]
-	cmp	r3, #0
-	ldrhne	r1, [r8, #10]
-	movne	r6, #0
-	beq	.L992
-.L991:
-	ldr	lr, [r5, r6, lsl #2]
-	cmp	r1, #0
-	movne	r3, #0
-	ubfx	lr, lr, #10, #16
-	beq	.L995
-.L994:
-	lsl	r0, r3, #1
-	add	r3, r3, #1
-	uxth	r3, r3
-	ldrh	r2, [r4, r0]
-	adds	ip, r2, #0
-	movne	ip, #1
-	cmp	lr, r2
-	movne	ip, #0
-	cmp	ip, #0
-	ldrhne	r2, [r7, r0]
-	addne	r2, r2, #1
-	strhne	r2, [r7, r0]	@ movhi
-	ldrhne	r1, [r8, #10]
-	cmp	r1, r3
-	bhi	.L994
-	ldrh	r3, [r8, #6]
-.L995:
-	add	r6, r6, #1
-	uxth	r6, r6
-	cmp	r3, r6
-	bhi	.L991
-.L992:
-	ldrh	r3, [r8]
-	ldr	fp, .L1018
-	ldrh	r2, [fp]
-	lsl	r3, r3, #1
-	strh	r2, [r7, r3]	@ movhi
-	ldrh	r1, [r8, #10]
-	ldrh	ip, [r7]
-	cmp	r1, #0
-	moveq	r0, r1
-	beq	.L986
-	mov	r10, #0
-	add	fp, fp, #104
-	mov	r5, r10
-	mov	r2, r10
-	movw	r3, #65535
-	b	.L1000
-.L1017:
-	ldrh	r0, [r4, r6]
-	add	r6, r4, r6
-	cmp	r0, #0
-	beq	.L998
-	cmp	r9, #0
-	movne	ip, r9
-	movne	r10, r5
-	bne	.L998
-	mov	r10, r5
-.L1001:
-	cmp	r0, r3
-	beq	.L999
-	ldrh	r1, [fp, #6]
-	cmp	r1, #1024
-	beq	.L999
-	mov	r1, #1
-	str	r2, [sp, #4]
-	str	r3, [sp]
-	bl	FtlFreeSysBlkQueueIn.part.10
-	ldr	r2, [sp, #4]
-	ldr	r3, [sp]
-.L999:
-	strh	r2, [r6]	@ movhi
-	mov	ip, r9
-	ldrh	r0, [r8, #8]
-	ldrh	r1, [r8, #10]
-	sub	r0, r0, #1
-	strh	r0, [r8, #8]	@ movhi
-.L998:
-	add	r5, r5, #1
-	uxth	r5, r5
-	cmp	r1, r5
-	bls	.L1016
-.L1000:
-	lsl	r6, r5, #1
-	ldrh	r9, [r7, r6]
-	cmp	r9, ip
-	bcc	.L1017
-	cmp	r9, #0
-	bne	.L998
-	ldrh	r0, [r4, r6]
-	add	r6, r4, r6
-	cmp	r0, #0
-	movne	r9, ip
-	bne	.L1001
-	add	r5, r5, #1
-	uxth	r5, r5
-	cmp	r1, r5
-	bhi	.L1000
-.L1016:
-	mov	r0, r10
-.L986:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1019:
+	bl	ftl_memset
+	ldrh	r2, [r4, #246]
+	mov	r1, r5
+	ldr	r0, [r4, #2540]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r4, #246]
+	mov	r1, r5
+	ldr	r0, [r4, #3348]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	add	r0, r4, #2464
+	mov	r1, r5
+	mov	r2, #48
+	add	r0, r0, #8
+	bl	ftl_memset
+	add	r0, r4, #2640
+	mov	r2, #512
+	mov	r1, r5
+	add	r0, r0, #4
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L653:
 	.align	2
-.L1018:
-	.word	.LANCHOR0+312
+.L652:
+	.word	.LANCHOR0
 	.fnend
-	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
-	.global	FtlScanSysBlk
+	.global	SupperBlkListInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlScanSysBlk, %function
-FtlScanSysBlk:
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 32
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r9, #:lower16:.LANCHOR0
-	movt	r9, #:upper16:.LANCHOR0
-	mov	r4, #0
-	add	r3, r9, #2592
-	mov	r1, r4
-	ldr	r2, [r9, #332]
-	.pad #36
-	sub	sp, sp, #36
-	strh	r4, [r3]	@ movhi
-	ldr	r3, .L1143
-	ldr	r0, [r9, #2600]
-	lsl	r2, r2, #2
-	strh	r4, [r3]	@ movhi
-	bl	memset
-	ldr	r2, [r9, #332]
-	mov	r1, r4
-	ldr	r0, [r9, #2596]
-	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r2, [r9]
-	mov	r1, r4
-	ldr	r0, [r9, #3408]
-	lsl	r2, r2, #2
-	bl	memset
-	ldrh	r2, [r9]
-	mov	r1, r4
-	ldr	r0, [r9, #4]
-	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r3, [r9, #20]
-	ldrh	r2, [r9, #248]
-	ldr	r0, .L1143+4
-	mov	r1, r3
-	str	r3, [sp, #24]
-	cmp	r2, r1
-	mvn	r3, #0
-	str	r3, [r9, #2680]
-	movhi	r8, r9
-	str	r3, [r0, #4]
-	str	r3, [r0, #8]
-	str	r3, [r0, #12]
-	addhi	r3, r9, #268
-	strhi	r3, [sp, #28]
-	bls	.L1022
-.L1026:
-	ldrh	r3, [r8, #36]
-	cmp	r3, #0
-	beq	.L1066
-	ldr	r1, [sp, #28]
-	sub	r3, r3, #1
-	ldr	fp, .L1143+8
-	mov	r10, #0
-	ldr	r9, [r8, #3336]
-	uxtah	r3, r1, r3
-	add	r2, fp, #42
-	ldrh	r7, [fp], #3
-	str	r3, [sp, #8]
-	ldrh	r3, [r2, #14]
-	ldrh	r6, [r2]
-	ldr	r2, [r8, #3232]
+	mov	r2, #6
+	ldr	r4, .L666
+	mov	r5, #0
+	.pad #20
+	sub	sp, sp, #20
+	mov	r1, #0
+	ldr	r10, .L666+4
+	mov	r9, r5
+	ldrh	r3, [r4, #246]
+	mov	r6, r5
+	ldr	r0, [r4, #2520]
+	add	fp, r4, #264
+	mul	r2, r2, r3
+	bl	ftl_memset
+	movw	r3, #2532
+	str	r5, [r4, #2536]
+	str	r5, [r4, #2524]
+	str	r5, [r4, #2528]
+	strh	r5, [r4, r3]	@ movhi
+	strh	r5, [r4, #228]	@ movhi
+.L655:
+	ldrh	r3, [r4, #244]
+	uxth	r8, r5
+	cmp	r8, r3
+	bcs	.L662
+	ldrh	r3, [r10]
+	ldrh	r2, [r4, #236]
 	str	r3, [sp, #4]
-	ldrh	r3, [sp, #24]
-	str	r2, [sp, #16]
-	ldr	r2, [r8, #3236]
-	smulbb	r3, r3, r7
-	str	r2, [sp, #20]
-	uxth	r3, r3
-	str	r3, [sp, #12]
-.L1024:
-	ldrb	r5, [fp, #1]!	@ zero_extendqisi2
-	mov	r1, r7
-	mov	r0, r5
-	bl	__aeabi_uidiv
-	mov	r1, r7
-	smulbb	r4, r0, r6
-	mov	r0, r5
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #12]
-	add	r4, r4, r1
-	mov	r1, r6
-	add	r4, r3, r4
-	uxth	r4, r4
-	mov	r0, r4
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r5, r1
-	mov	r1, r6
-	lsl	r4, r4, #10
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	ip, r5, #5
-	ldr	r3, [sp, #4]
-	add	r0, r8, r0, lsl #2
-	and	r5, r5, #31
-	ldr	r1, [r0, #380]
-	add	r0, r10, #1
-	mul	r2, r3, r10
-	add	r3, r10, r10, lsl #2
-	ldr	r1, [r1, ip, lsl #2]
-	add	r3, r9, r3, lsl #2
-	add	lr, r2, #3
-	lsr	r5, r1, r5
-	tst	r5, #1
-	bne	.L1023
-	cmp	r2, #0
-	ldr	r1, [sp, #20]
-	movlt	r2, lr
-	uxth	r10, r0
-	bic	r2, r2, #3
-	str	r4, [r3, #4]
-	add	r2, r1, r2
-	ldr	r1, [sp, #16]
-	str	r2, [r3, #12]
-	str	r1, [r3, #8]
-.L1023:
-	ldr	r3, [sp, #8]
-	cmp	r3, fp
-	bne	.L1024
-	cmp	r10, #0
-	bne	.L1025
-.L1066:
-	ldr	r3, [sp, #24]
-	add	r2, r3, #1
-	ldrh	r3, [r8, #248]
-	uxth	r2, r2
-	cmp	r3, r2
-	str	r2, [sp, #24]
-	bhi	.L1026
-	mov	r9, r8
-.L1022:
-	ldr	r1, [r9, #2596]
-	ldrh	r3, [r1]
-	cmp	r3, #0
-	bne	.L1072
-	ldr	r2, .L1143+12
-	ldrh	r2, [r2]
-	cmp	r2, #0
-	beq	.L1070
-	ldr	ip, [r9, #332]
-	cmp	ip, #0
-	bne	.L1074
-	b	.L1072
-.L1076:
-	ldrh	r0, [r1, r2]
+	mov	r3, #0
+	mov	r7, r3
+	b	.L663
+.L657:
+	mov	r1, r8
+	ldrb	r0, [fp, r3]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	str	r3, [sp, #8]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L1134
-.L1074:
+	ldr	r3, [sp, #8]
+	ldreq	r1, [sp, #4]
+	ldr	r2, [sp, #12]
 	add	r3, r3, #1
-	sxth	r3, r3
-	cmp	r3, ip
-	lsl	r2, r3, #1
-	bcc	.L1076
-.L1072:
-	ldr	r0, [r9, #4]
-	ldrh	r3, [r0]
-	cmp	r3, #0
-	bne	.L1069
-.L1068:
-	ldr	r3, .L1143
-	ldrh	r3, [r3]
+	addeq	r7, r7, r1
+	uxtheq	r7, r7
+.L663:
+	uxth	r1, r3
+	cmp	r2, r1
+	bhi	.L657
+	cmp	r7, #0
+	uxth	r3, r5
+	beq	.L658
+	mov	r1, r7
+	mov	r0, #32768
+	str	r3, [sp, #4]
+	bl	__aeabi_idiv
+	ldr	r3, [sp, #4]
+	uxth	r7, r0
+.L659:
+	ldr	r1, [r4, #2520]
+	mov	r2, #6
+	mla	r2, r2, r3, r1
+	strh	r7, [r2, #4]	@ movhi
+	ldrh	r2, [r4, #28]
+	cmp	r2, r8
+	beq	.L660
+	ldrh	r2, [r4, #80]
+	cmp	r2, r8
+	beq	.L660
+	ldrh	r2, [r4, #128]
+	cmp	r2, r8
+	beq	.L660
+	ldr	r2, [r4, #76]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1069
-.L1088:
-	ldrh	lr, [r9]
-	cmp	lr, #0
-	movne	r3, #0
-	bne	.L1080
-	b	.L1069
-.L1082:
-	ldrh	r1, [r0, r2]
-	cmp	r1, #0
-	bne	.L1135
-.L1080:
-	add	r3, r3, #1
-	sxth	r3, r3
-	cmp	r3, lr
+	bne	.L661
+	add	r9, r9, #1
+	mov	r0, r8
+	uxth	r9, r9
+	bl	INSERT_FREE_LIST
+.L660:
+	add	r5, r5, #1
+	b	.L655
+.L658:
+	ldr	r1, [r4, #76]
 	lsl	r2, r3, #1
-	mov	ip, r3
-	blt	.L1082
-.L1069:
-	ldr	r3, .L1143+12
-	ldrh	r2, [r3]
-	ldr	r3, [r9, #332]
-	cmp	r2, r3
-	bhi	.L1136
-.L1109:
+	mvn	r0, #0
+	strh	r0, [r1, r2]	@ movhi
+	b	.L659
+.L661:
+	add	r6, r6, #1
+	mov	r0, r8
+	uxth	r6, r6
+	bl	INSERT_DATA_LIST
+	b	.L660
+.L662:
+	movw	r2, #2532
+	strh	r9, [r4, #228]	@ movhi
+	strh	r6, [r4, r2]	@ movhi
+	add	r6, r6, r9
+	cmp	r6, r3
+	ble	.L664
+	movw	r2, #2210
+	ldr	r1, .L666+8
+	ldr	r0, .L666+12
+	bl	sftl_printk
+.L664:
 	mov	r0, #0
-	add	sp, sp, #36
+	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1025:
-	sub	r6, r10, #1
-	mov	r0, r9
-	uxth	r6, r6
-	mov	r2, #1
-	mov	r1, r10
-	add	r6, r6, #1
-	movw	fp, #:lower16:.LC8
-	add	r6, r6, r6, lsl #2
-	movt	fp, #:upper16:.LC8
-	mov	r4, #0
-	bl	FlashReadPages
-	lsl	r6, r6, #2
-	b	.L1065
-.L1029:
-	ldr	r3, [r8, #2644]
-	cmn	r3, #1
-	beq	.L1137
-	ldr	r2, [r10, #4]
-	cmp	r3, r2
-	bhi	.L1033
-.L1032:
-	cmn	r2, #1
-	addne	r3, r2, #1
-	strne	r3, [r8, #2644]
-.L1033:
-	ldrh	r3, [r10]
-	movw	r1, #61604
+.L667:
+	.align	2
+.L666:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+306
+	.word	.LANCHOR1+198
+	.word	.LC8
+	.fnend
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	2
+	.global	FtlGcPageVarInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r3, #0
+	ldr	r4, .L670
+	movw	r5, #310
+	mov	r1, #255
+	add	r2, r4, #3200
+	ldr	r0, [r4, #3196]
+	strh	r3, [r2]	@ movhi
+	movw	r2, #3208
+	strh	r3, [r4, r2]	@ movhi
+	ldrh	r2, [r4, r5]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, r5]
+	mov	r2, #12
+	ldr	r0, [r4, #3204]
+	mov	r1, #255
+	mul	r2, r2, r3
+	bl	ftl_memset
+	pop	{r4, r5, r6, lr}
+	b	FtlGcBufInit
+.L671:
+	.align	2
+.L670:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	FlashGetBadBlockList
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r2, #256
+	ldr	r5, .L680
+	mov	r4, r0
+	mov	r6, r1
+	mov	r1, #255
+	bl	ftl_memset
+	ldr	r3, [r5, #3248]
+	mov	r1, r6
+	mov	r0, r4
+	blx	r3
+	uxth	r0, r0
+	cmp	r0, #50
+	bls	.L673
+	mov	r2, #256
+	mov	r1, #255
+	mov	r0, r4
+	bl	ftl_memset
+	mov	r0, #0
+.L673:
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	moveq	r3, r4
+	addeq	r1, r3, r0, lsl #1
+	beq	.L675
+	pop	{r4, r5, r6, pc}
+.L676:
+	ldrh	r2, [r3]
+	lsr	r2, r2, #1
+	strh	r2, [r3], #2	@ movhi
+.L675:
 	cmp	r3, r1
-	beq	.L1035
-	bls	.L1138
-	movw	r2, #61634
-	cmp	r3, r2
-	beq	.L1038
-	movw	r2, #65535
-	cmp	r3, r2
-	bne	.L1034
-	sub	r3, r9, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	cmp	r3, r2
-	bhi	.L1034
-	ldr	r3, .L1143+16
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	beq	.L1034
+	bne	.L676
+	pop	{r4, r5, r6, pc}
+.L681:
+	.align	2
+.L680:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	ftl_memcpy
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcpy
+	.fnend
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	FlashReadPages
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FlashReadPages, %function
+FlashReadPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L724
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L724+4
+	mov	r8, r1
+	mov	r4, r0
+	mov	r7, #0
+	ldr	r2, [r3]
+	mov	fp, r3
+	ldr	r9, .L724+8
+	ldr	r10, .L724+12
+	str	r2, [sp, #20]
+	ldrh	r2, [r5, #12]
+	str	r2, [sp, #4]
+.L684:
+	cmp	r7, r8
+	bne	.L697
+	ldr	r2, [sp, #20]
+	mov	r0, #0
+	ldr	r3, [fp]
+	cmp	r2, r3
+	beq	.L698
+	bl	__stack_chk_fail
+.L697:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L685
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	bne	.L686
+.L685:
+	mov	r2, #96
+	ldr	r1, .L724+16
 	mov	r0, r9
-	mov	r1, #0
-	bl	FtlFreeSysBlkQueueIn.part.10
-.L1034:
-	add	r4, r4, #20
-	cmp	r6, r4
-	beq	.L1066
-.L1065:
-	ldr	r0, [r8, #3336]
-	ldr	r2, [r0, r4]
-	add	r0, r0, r4
-	ldr	r3, [r0, #4]
-	ldr	r10, [r0, #12]
+	bl	sftl_printk
+.L686:
+	add	r2, sp, #12
+	add	r1, sp, #16
+	mov	r0, r4
+	bl	l2p_addr_tran
+	ldr	r0, [sp, #12]
+	cmp	r0, #3
+	mvnhi	r3, #0
+	strhi	r3, [r4]
+	bhi	.L688
+	ldr	r6, [r4, #8]
+	uxtb	r0, r0
+	ldr	r3, [r4, #12]
+	ldr	r1, [sp, #16]
+	tst	r6, #63
+	ldr	ip, [r5, #3260]
+	ldrne	r6, [r5, #3324]
+	mov	r2, r6
+	blx	ip
+	str	r0, [r4]
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	bne	.L691
+	ldr	r0, [sp, #4]
+	add	r2, r6, #2048
+	ldr	r3, [r4, #12]
+	ldr	r1, [sp, #16]
+	ldr	ip, [r5, #3260]
+	add	r3, r3, #8
+	add	r1, r0, r1
+	ldrb	r0, [sp, #12]	@ zero_extendqisi2
+	blx	ip
+	cmn	r0, #1
+	mov	r1, r0
+	beq	.L692
+	ldr	r3, [r4, #12]
+	ldr	r2, [r3, #12]
 	cmn	r2, #1
-	ubfx	r9, r3, #10, #16
-	bne	.L1029
-	mov	r5, #16
-	movw	r7, #65535
-	b	.L1031
-.L1140:
-	ldr	r3, [r0, #4]
-.L1031:
-	add	r3, r3, #1
-	mov	r2, #1
-	str	r3, [r0, #4]
-	mov	r1, r2
-	bl	FlashReadPages
-	ldrh	r3, [r10]
-	sub	r5, r5, #1
-	uxth	r5, r5
-	cmp	r3, r7
-	beq	.L1139
-	ldr	r0, [r8, #3336]
-	ldr	r3, [r0, r4]
-	add	r0, r0, r4
+	bne	.L693
+	ldr	r2, [r3, #8]
+	cmn	r2, #1
+	bne	.L693
+	ldr	r3, [r3]
 	cmn	r3, #1
-	bne	.L1029
-	cmp	r5, #0
-	bne	.L1140
-.L1030:
-	sub	r3, r9, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	cmp	r3, r2
-	bhi	.L1034
-	ldr	r3, .L1143+16
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	beq	.L1034
-	mov	r0, r9
-	mov	r1, #1
-	bl	FtlFreeSysBlkQueueIn.part.10
-	b	.L1034
-.L1138:
-	movw	r2, #61574
-	cmp	r3, r2
-	bne	.L1034
-	ldr	r3, .L1143
-	ldrh	r5, [r8]
-	ldrh	r7, [r3]
-	cmp	r7, r5
-	bhi	.L1141
-.L1052:
-	sub	r0, r5, #1
-	sxth	r2, r0
-	sub	r0, r0, r7
-	cmp	r0, r2
-	bge	.L1053
-	ldr	r1, [r8, #3408]
-	lsl	lr, r2, #2
-	ldr	ip, [r10, #4]
-	ldr	r3, [r1, r2, lsl #2]
-	cmp	ip, r3
-	bls	.L1056
-	b	.L1054
-.L1061:
-	ldr	r3, [r1, r2, lsl #2]
-	cmp	r3, ip
-	bcc	.L1054
-.L1056:
-	sub	r2, r2, #1
-	sxth	r2, r2
-	cmp	r2, r0
-	lsl	lr, r2, #2
-	bgt	.L1061
-.L1053:
-	cmp	r2, #0
-	blt	.L1034
-	ldr	r1, .L1143
-	ldrh	r3, [r8]
-	ldrh	r1, [r1]
-	sub	r3, r3, #1
-	sub	r3, r3, r1
-	sxth	r3, r3
-	cmp	r3, r2
-	blt	.L1034
-	ldr	ip, [r10, #4]
-	add	r1, r1, #1
-	ldr	r0, [r8, #3408]
-	ldr	r3, .L1143
-	strh	r1, [r3]	@ movhi
-	lsl	r3, r2, #1
-	str	ip, [r0, r2, lsl #2]
-	ldr	r2, [r8, #4]
-	strh	r9, [r2, r3]	@ movhi
-	b	.L1034
-.L1137:
-	ldr	r2, [r10, #4]
-	b	.L1032
-.L1038:
-	ldr	r3, .L1143+12
-	ldr	r5, [r8, #332]
-	ldrh	lr, [r3]
-	cmp	lr, r5
-	bhi	.L1142
-.L1040:
-	uxth	r3, r5
-	sub	r2, r3, lr
-	sub	r3, r3, #1
-	sub	r2, r2, #1
-	sxth	r3, r3
-	sxth	r2, r2
-	cmp	r3, r2
-	ble	.L1041
-	ldr	r1, [r8, #2600]
-	lsl	ip, r3, #2
-	ldr	r0, [r10, #4]
-	ldr	r7, [r1, r3, lsl #2]
-	cmp	r0, r7
-	bls	.L1044
-	b	.L1042
-.L1050:
-	ldr	r7, [r1, r3, lsl #2]
-	cmp	r7, r0
-	bcc	.L1042
-.L1044:
-	sub	r3, r3, #1
-	sxth	r3, r3
-	cmp	r2, r3
-	lsl	ip, r3, #2
-	blt	.L1050
-.L1041:
-	cmp	r3, #0
-	blt	.L1034
-	lsl	ip, r3, #2
-	lsl	r1, r3, #1
-.L1086:
-	ldr	r3, [r8, #2600]
-	ldr	r2, [r10, #4]
-	add	lr, lr, #1
-	ldr	r0, .L1143+12
-	strh	lr, [r0]	@ movhi
-	str	r2, [r3, ip]
-	ldr	r3, [r8, #2596]
-	strh	r9, [r3, r1]	@ movhi
-	b	.L1034
-.L1035:
-	ldr	r3, .L1143+4
-	ldrh	r1, [r3]
-	movw	r3, #65535
-	cmp	r1, r3
-	ldr	r3, .L1143+4
-	streq	r2, [r8, #2688]
-	strheq	r9, [r3]	@ movhi
-	beq	.L1034
-	ldrh	r0, [r3, #4]
-	movw	r1, #65533
-	sub	r3, r0, #1
-	uxth	r3, r3
-	cmp	r3, r1
-	bhi	.L1063
-	ldr	r3, .L1143+16
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	beq	.L1063
-	mov	r1, #1
-	bl	FtlFreeSysBlkQueueIn.part.10
-	ldr	r2, [r10, #4]
-.L1063:
-	ldr	r3, [r8, #2688]
-	cmp	r3, r2
-	ldr	r3, .L1143+4
-	ldrcc	r2, .L1143+4
-	ldrhcc	r3, [r3]
-	strhcs	r9, [r3, #4]	@ movhi
-	strhcc	r9, [r2]	@ movhi
-	strhcc	r3, [r2, #4]	@ movhi
-	ldrcc	r3, [r10, #4]
-	strcc	r3, [r8, #2688]
-	b	.L1034
-.L1054:
-	sub	r5, r5, r7
-	ldr	r3, [r1]
-	clz	r5, r5
-	lsr	r5, r5, #5
-	cmp	r3, #0
-	orrne	r5, r5, #1
-	cmp	r5, #0
-	ldreq	r3, .L1143
-	addeq	r7, r7, #1
-	strheq	r7, [r3]	@ movhi
-	cmp	r2, #0
-	beq	.L1058
-	mov	r3, #0
-.L1060:
-	add	ip, r1, r3, lsl #2
-	lsl	r0, r3, #1
-	ldr	r5, [ip, #4]
-	add	ip, r3, #1
-	str	r5, [r1, r3, lsl #2]
-	sxth	r3, ip
-	ldr	r1, [r8, #4]
-	cmp	r2, r3
-	add	ip, r1, r0
-	ldrh	ip, [ip, #2]
-	strh	ip, [r1, r0]	@ movhi
-	ldr	r1, [r8, #3408]
-	bne	.L1060
-	ldr	ip, [r10, #4]
-.L1058:
-	str	ip, [r1, lr]
-	lsl	r3, r2, #1
-	ldr	r1, [r8, #4]
-	strh	r9, [r1, r3]	@ movhi
-	b	.L1053
-.L1042:
-	ldr	r2, [r1]
-	cmp	r2, #0
-	bne	.L1045
-	cmp	lr, r5
-	ldrne	r2, .L1143+12
-	addne	lr, lr, #1
-	strhne	lr, [r2]	@ movhi
-.L1045:
-	cmp	r3, #0
-	beq	.L1046
-	mov	r2, #0
-.L1048:
-	add	lr, r1, r2, lsl #2
-	lsl	r0, r2, #1
-	ldr	r5, [lr, #4]
-	add	lr, r2, #1
-	str	r5, [r1, r2, lsl #2]
-	sxth	r2, lr
-	ldr	r1, [r8, #2596]
-	cmp	r3, r2
-	add	lr, r1, r0
-	ldrh	lr, [lr, #2]
-	strh	lr, [r1, r0]	@ movhi
-	ldr	r1, [r8, #2600]
-	bne	.L1048
-	ldr	r0, [r10, #4]
-.L1046:
-	str	r0, [r1, ip]
-	cmp	r3, #0
-	ldr	r2, [r8, #2596]
-	lsl	r1, r3, #1
-	strh	r9, [r2, r1]	@ movhi
-	blt	.L1034
-	ldr	r2, .L1143+12
-	ldrh	lr, [r2]
-	ldr	r2, [r8, #332]
-	sub	r2, r2, lr
-	sub	r2, r2, #1
-	sxth	r2, r2
-	cmp	r2, r3
-	blt	.L1034
-	b	.L1086
-.L1139:
-	ldr	r3, [r8, #3336]
-	mvn	r2, #0
-	str	r2, [r3, r4]
-	ldr	r3, [r8, #3336]
-	ldr	r3, [r3, r4]
-	cmp	r3, r2
-	beq	.L1030
-	b	.L1029
-.L1142:
-	movw	r2, #1225
-	ldr	r1, .L1143+20
-	mov	r0, fp
-	bl	sftl_printk
-	ldr	r3, .L1143+12
-	ldr	r5, [r8, #332]
-	ldrh	lr, [r3]
-	b	.L1040
-.L1141:
-	movw	r2, #1266
-	ldr	r1, .L1143+20
-	mov	r0, fp
-	bl	sftl_printk
-	ldr	r3, .L1143
-	ldrh	r5, [r8]
-	ldrh	r7, [r3]
-	b	.L1052
-.L1136:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1391
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1143+20
+	beq	.L693
+.L692:
+	mvn	r3, #0
+	str	r3, [r4]
+.L693:
+	ldr	r3, [r4]
+	sub	r0, r1, #256
+	clz	r0, r0
+	lsr	r0, r0, #5
+	cmn	r3, #1
+	moveq	r0, #0
+	cmp	r0, #0
+	movne	r3, #256
+	strne	r3, [r4]
+	ldr	r3, [r4]
+	cmn	r3, #1
+	cmpne	r3, #256
+	bne	.L691
+	ldr	r1, [r4, #4]
+	ldr	r2, [sp, #16]
+	ldr	r0, .L724+20
 	bl	sftl_printk
-	mov	r0, #0
-	add	sp, sp, #36
+	ldr	r1, [r4, #8]
+	cmp	r1, #0
+	beq	.L696
+	mov	r3, #4
+	ldr	r0, .L724+24
+	mov	r2, r3
+	bl	rknand_print_hex
+.L696:
+	ldr	r1, [r4, #12]
+	cmp	r1, #0
+	beq	.L691
+	mov	r3, #4
+	ldr	r0, .L724+28
+	mov	r2, r3
+	bl	rknand_print_hex
+.L691:
+	ldr	r3, [r5, #3324]
+	cmp	r6, r3
+	bne	.L688
+	ldr	r0, [r4, #8]
+	cmp	r6, r0
+	beq	.L688
+	ldrh	r2, [r10]
+	mov	r1, r6
+	lsl	r2, r2, #9
+	bl	ftl_memcpy
+.L688:
+	add	r7, r7, #1
+	add	r4, r4, #20
+	b	.L684
+.L698:
+	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1070:
-	ldr	r0, [r9, #4]
-	ldrh	r3, [r0]
-	cmp	r3, #0
-	bne	.L1109
-	ldr	r3, .L1143
-	ldrh	r3, [r3]
-	cmp	r3, #0
-	beq	.L1109
-	b	.L1088
-.L1135:
-	mov	r5, #0
-.L1081:
-	ldr	r1, [r9, #4]
-	sub	r0, r3, ip
-	lsl	lr, r0, #1
-	add	r4, r3, #1
-	ldrh	r6, [r1, r2]
-	strh	r6, [r1, lr]	@ movhi
-	ldr	r1, [r9, #3408]
-	ldr	lr, [r1, r3, lsl #2]
-	sxth	r3, r4
-	str	lr, [r1, r0, lsl #2]
-	ldr	r1, [r9, #4]
-	strh	r5, [r1, r2]	@ movhi
-	lsl	r2, r3, #1
-	ldrh	r1, [r9]
-	cmp	r3, r1
-	blt	.L1081
-	b	.L1069
-.L1134:
-	mov	r4, r3
-	mov	lr, #0
-	b	.L1087
-.L1075:
-	ldr	r1, [r9, #2596]
-	ldrh	r0, [r1, r2]
-.L1087:
-	sub	ip, r3, r4
-	add	r5, r3, #1
-	lsl	r6, ip, #1
-	strh	r0, [r1, r6]	@ movhi
-	ldr	r1, [r9, #2600]
-	ldr	r0, [r1, r3, lsl #2]
-	sxth	r3, r5
-	str	r0, [r1, ip, lsl #2]
-	ldr	r1, [r9, #2596]
-	strh	lr, [r1, r2]	@ movhi
-	lsl	r2, r3, #1
-	ldr	r1, [r9, #332]
-	cmp	r3, r1
-	bcc	.L1075
-	ldr	r0, [r9, #4]
-	ldrh	r3, [r0]
-	cmp	r3, #0
-	beq	.L1068
-	b	.L1069
-.L1144:
+.L725:
 	.align	2
-.L1143:
-	.word	.LANCHOR0+348
-	.word	.LANCHOR0+2680
-	.word	.LANCHOR0+264
-	.word	.LANCHOR0+2592
-	.word	.LANCHOR0+416
-	.word	.LANCHOR1+272
+.L724:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC8
+	.word	.LANCHOR0+262
+	.word	.LANCHOR1+216
+	.word	.LC92
+	.word	.LC93
+	.word	.LC94
 	.fnend
-	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.size	FlashReadPages, .-FlashReadPages
 	.align	2
-	.global	FtlFreeSysBlkQueueOut
+	.global	FtlLoadFactoryBbt
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlFreeSysBlkQueueOut, %function
-FtlFreeSysBlkQueueOut:
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	add	r4, r5, #416
-	ldrh	r2, [r4, #6]
-	cmp	r2, #0
-	movweq	r6, #65535
-	bne	.L1151
-.L1146:
-	movw	r0, #:lower16:.LC98
-	mov	r1, r6
-	movt	r0, #:upper16:.LC98
-	bl	sftl_printk
-.L1148:
-	b	.L1148
-.L1151:
-	ldrh	r0, [r4, #2]
-	sub	r3, r2, #1
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r7, #0
+	ldr	r5, .L737
+	add	r6, r5, #364
+	ldr	r3, [r5, #3304]
+	add	r6, r6, #2
+	ldr	r8, [r5, #3336]
+	sub	r10, r6, #108
+	sub	r9, r6, #64
+	str	r3, [r5, #3464]
+	str	r8, [r5, #3468]
+.L727:
+	ldrh	r3, [r10]
+	cmp	r7, r3
+	bcc	.L732
+	mov	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L732:
+	ldrh	r4, [r9]
+	mvn	r3, #0
+	ldr	fp, .L737+4
+	strh	r3, [r6, #2]!	@ movhi
+	add	r4, r4, r3
+	movw	r3, #61664
+	uxth	r4, r4
+.L728:
+	ldrh	r2, [r9]
+	sub	r1, r2, #16
+	cmp	r4, r1
+	ble	.L730
+	mla	r2, r7, r2, r4
+	str	r3, [sp, #4]
+	mov	r0, fp
+	lsl	r2, r2, #10
+	str	r2, [r5, #3460]
 	mov	r2, #1
-	strh	r3, [r4, #6]	@ movhi
-	ldr	ip, [r5, #3348]
 	mov	r1, r2
-	add	r3, r0, r2
-	add	r0, r4, r0, lsl r2
-	ubfx	r3, r3, #0, #10
-	strh	r3, [r4, #2]	@ movhi
-	ldrh	r7, [r0, #8]
-	mov	r0, ip
-	mov	r6, r7
-	lsl	r3, r7, #10
-	str	r3, [ip, #4]
-	bl	FlashEraseBlocks
-	sub	r2, r7, #1
-	ldr	r3, [r5, #2664]
-	uxth	r2, r2
-	movw	r1, #65533
-	cmp	r2, r1
-	add	r3, r3, #1
-	str	r3, [r5, #2664]
-	bhi	.L1152
-	mov	r0, r7
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1152:
-	ldrh	r2, [r4, #6]
-	b	.L1146
+	bl	FlashReadPages
+	ldr	r2, [r5, #3456]
+	ldr	r3, [sp, #4]
+	cmn	r2, #1
+	beq	.L729
+	ldrh	r2, [r8]
+	cmp	r2, r3
+	bne	.L729
+	strh	r4, [r6]	@ movhi
+.L730:
+	add	r7, r7, #1
+	b	.L727
+.L729:
+	sub	r4, r4, #1
+	uxth	r4, r4
+	b	.L728
+.L738:
+	.align	2
+.L737:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3456
 	.fnend
-	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
-	.global	ftl_map_blk_alloc_new_blk
+	.global	FtlGetLastWrittenPage
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_map_blk_alloc_new_blk, %function
-ftl_map_blk_alloc_new_blk:
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	ldrh	r1, [r0, #10]
-	ldr	r5, [r0, #12]
-	cmp	r1, #0
-	beq	.L1161
-	ldrh	r4, [r5]
-	mov	r6, r0
-	cmp	r4, #0
-	addne	r3, r5, #2
-	movne	r4, #0
-	bne	.L1158
-	b	.L1156
-.L1162:
-	ldrh	r2, [r5]
-	cmp	r2, #0
-	beq	.L1156
-.L1158:
-	add	r4, r4, #1
-	mov	r5, r3
-	uxth	r4, r4
-	add	r3, r3, #2
-	cmp	r4, r1
-	bne	.L1162
-.L1161:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #578
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1171
-	bl	sftl_printk
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L1156:
-	bl	FtlFreeSysBlkQueueOut
-	sub	r3, r0, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	mov	r1, r0
-	strh	r0, [r5]	@ movhi
-	cmp	r3, r2
-	bhi	.L1170
-	ldrh	r0, [r6, #10]
-	mov	r1, #0
-	ldr	r2, [r6, #28]
-	ldrh	r3, [r6, #8]
-	cmp	r0, r4
-	strh	r4, [r6]	@ movhi
-	add	r2, r2, #1
-	strh	r1, [r6, #2]	@ movhi
-	add	r3, r3, #1
-	str	r2, [r6, #28]
-	strh	r3, [r6, #8]	@ movhi
-	bls	.L1161
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L1170:
-	ldr	r3, .L1171+4
-	movw	r0, #:lower16:.LC99
-	movt	r0, #:upper16:.LC99
-	ldrh	r2, [r3, #6]
-	bl	sftl_printk
-.L1160:
-	b	.L1160
-.L1172:
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r6, .L752
+	cmp	r1, #1
+	movwne	r2, #306
+	lsl	r8, r0, #10
+	mov	r7, r1
+	ldr	r3, [r6]
+	mov	r0, sp
+	str	r3, [sp, #84]
+	ldr	r3, .L752+4
+	addeq	r2, r3, #308
+	ldrhne	r5, [r3, r2]
+	ldrheq	r5, [r2]
+	mov	r2, r1
+	ldr	r3, [r3, #3328]
+	mov	r1, #1
+	sub	r5, r5, #1
+	sxth	r5, r5
+	str	r3, [sp, #8]
+	add	r3, sp, #20
+	str	r3, [sp, #12]
+	orr	r3, r5, r8
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [sp, #20]
+	cmn	r3, #1
+	moveq	r9, #0
+	beq	.L743
+.L742:
+	ldr	r2, [sp, #84]
+	mov	r0, r5
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L747
+	bl	__stack_chk_fail
+.L746:
+	add	r3, r9, r5
+	mov	r2, r7
+	add	r3, r3, r3, lsr #31
+	mov	r1, #1
+	mov	r0, sp
+	asr	r4, r3, #1
+	sxth	r3, r4
+	orr	r3, r3, r8
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [sp, #20]
+	cmn	r3, #1
+	bne	.L744
+	ldr	r3, [sp, #24]
+	cmn	r3, #1
+	bne	.L744
+	ldr	r3, [sp]
+	cmn	r3, #1
+	subne	r4, r4, #1
+	sxthne	r5, r4
+	bne	.L743
+.L744:
+	add	r4, r4, #1
+	sxth	r9, r4
+.L743:
+	cmp	r9, r5
+	ble	.L746
+	b	.L742
+.L747:
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L753:
 	.align	2
-.L1171:
-	.word	.LANCHOR1+288
-	.word	.LANCHOR0+416
+.L752:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
 	.fnend
-	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
-	.global	Ftl_write_map_blk_to_last_page
+	.global	FtlScanSysBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r2, #65535
-	ldrh	r3, [r0]
-	mov	r4, r0
-	ldr	r5, [r0, #12]
-	cmp	r3, r2
-	beq	.L1190
-	lsl	r3, r3, #1
-	ldrh	r2, [r0, #2]
-	movw	r6, #:lower16:.LANCHOR0
-	ldr	ip, [r0, #28]
-	ldrh	r8, [r5, r3]
-	movt	r6, #:upper16:.LANCHOR0
-	ldr	r5, [r6, #3384]
-	movw	r0, #64245
-	ldr	r1, [r6, #3352]
-	movt	r0, 65535
-	ldr	r7, [r4, #24]
-	orr	r3, r2, r8, lsl #10
-	str	r5, [r6, #3476]
-	str	r1, [r6, #3472]
-	add	r2, r6, #312
-	str	r3, [r6, #3468]
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, #0
+	ldr	r4, .L836
+	mov	r1, r5
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r2, [r4, #332]
+	add	r7, r4, #3440
+	add	r6, r4, #348
+	ldr	r0, [r4, #3384]
+	strh	r5, [r7]	@ movhi
+	add	r8, r4, #324
+	strh	r5, [r6]	@ movhi
+	lsl	r2, r2, #2
+	bl	ftl_memset
+	ldr	r2, [r4, #332]
+	mov	r1, r5
+	ldr	r0, [r4, #3360]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r8]
+	mov	r1, r5
+	ldr	r0, [r4, #3372]
+	lsl	r2, r2, #2
+	bl	ftl_memset
+	ldrh	r2, [r8]
+	mov	r1, r5
+	ldr	r0, [r4, #352]
+	sub	r5, r7, #812
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	mov	r2, #16
 	mov	r1, #255
-	str	ip, [r5, #4]
-	strh	r0, [r5, #8]	@ movhi
-	ldrh	r3, [r4, #4]
-	strh	r8, [r5, #2]	@ movhi
-	strh	r3, [r5]	@ movhi
-	ldrh	r2, [r2]
-	ldr	r0, [r6, #3352]
-	lsl	r2, r2, #3
-	bl	memset
-	ldrh	ip, [r4, #6]
-	cmp	ip, #0
-	movne	r0, #0
-	movne	r3, r0
-	bne	.L1181
-.L1182:
-	movw	r3, #318
-	movw	r1, #42982
-	ldrh	ip, [r6, r3]
-	ldr	r2, [r6, #3472]
-	cmp	ip, #0
-	movteq	r1, 18374
-	beq	.L1179
-	add	ip, r2, ip
-	movt	r1, 18374
-.L1183:
-	lsr	r3, r1, #2
-	ldrb	r0, [r2], #1	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	ip, r2
-	add	r3, r3, r0
-	eor	r1, r1, r3
-	bne	.L1183
-.L1179:
+	sub	r0, r7, #812
+	bl	ftl_memset
+	ldrh	r3, [r4, #244]
+	str	r6, [sp, #16]
+	stmib	sp, {r3, r7}
+.L755:
+	ldrh	r3, [r4, #246]
+	ldr	r2, [sp, #4]
+	cmp	r3, r2
+	bls	.L796
+	ldr	r7, .L836+4
+	mov	r6, #0
+	ldrh	r2, [r4, #236]
+	mov	r10, r6
+	ldr	r8, [r4, #3292]
+	mov	r9, #20
+	ldrh	r1, [r7], #-52
+	ldr	r3, [r4, #3180]
+	ldr	fp, [r4, #3184]
+	str	r1, [sp, #12]
+	b	.L797
+.L757:
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r7, r6]	@ zero_extendqisi2
+	str	r3, [sp, #28]
+	str	r2, [sp, #24]
+	bl	V2P_block
+	str	r0, [sp, #20]
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldr	r2, [sp, #24]
+	ldr	r3, [sp, #28]
+	bne	.L756
+	ldr	r1, [sp, #20]
+	mla	r0, r9, r10, r8
+	lsl	r1, r1, #10
+	stmib	r0, {r1, r3}
+	ldr	r1, [sp, #12]
+	mul	r1, r1, r10
+	add	ip, r1, #3
+	cmp	r1, #0
+	movlt	r1, ip
+	bic	r1, r1, #3
+	add	r1, fp, r1
+	str	r1, [r0, #12]
+	add	r1, r10, #1
+	uxth	r10, r1
+.L756:
+	add	r6, r6, #1
+.L797:
+	uxth	r1, r6
+	cmp	r2, r1
+	bhi	.L757
+	cmp	r10, #0
+	bne	.L758
+.L795:
+	ldr	r3, [sp, #4]
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r3, [sp, #4]
+	b	.L755
+.L758:
+	mov	fp, #0
+	mov	r2, #1
+	mov	r1, r10
+	mov	r0, r8
+	bl	FlashReadPages
+.L759:
+	uxth	r3, fp
+	cmp	r10, r3
+	bls	.L795
+	mov	r8, #20
+	ldr	r3, [r4, #3292]
+	mul	r8, r8, fp
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	ldr	r6, [r2, #4]
+	ldr	r7, [r2, #12]
+	cmn	r3, #1
+	ubfx	r6, r6, #10, #16
+	bne	.L762
+	mov	r9, #16
+.L764:
+	ldr	r0, [r4, #3292]
 	mov	r2, #1
-	str	r1, [r5, #12]
-	mov	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1192
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	mov	r0, r4
-	add	r3, r3, #1
-	strh	r3, [r4, #2]	@ movhi
-	bl	ftl_map_blk_gc
-	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1191:
-	ldr	r1, [r6, #3352]
-	add	r0, r0, #1
-	uxth	r0, r0
-	str	r3, [r1, r0, lsl #3]
-	ldr	r1, [r6, #3352]
-	ldr	ip, [r7, r3, lsl #2]
-	add	r3, r1, r0, lsl #3
-	str	ip, [r3, #4]
-	ldrh	ip, [r4, #6]
-.L1180:
-	uxth	r3, r2
-	cmp	ip, r3
-	bls	.L1182
-.L1181:
-	ldr	r1, [r7, r3, lsl #2]
-	add	r2, r3, #1
-	cmp	r8, r1, lsr #10
-	bne	.L1180
-	b	.L1191
-.L1190:
-	ldrh	r3, [r0, #8]
-	cmp	r3, #0
-	beq	.L1175
-	movw	r0, #:lower16:.LC8
-	movw	r2, #641
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1192+4
-	bl	sftl_printk
-	ldrh	r3, [r4, #8]
-.L1175:
-	add	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	strh	r0, [r5]	@ movhi
-	mov	r2, #0
-	ldr	r3, [r4, #28]
-	mov	r0, #0
-	strh	r2, [r4, #2]	@ movhi
-	strh	r2, [r4]	@ movhi
+	add	r0, r0, r8
+	ldr	r3, [r0, #4]
 	add	r3, r3, #1
-	str	r3, [r4, #28]
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1193:
-	.align	2
-.L1192:
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR1+316
-	.fnend
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
-	.align	2
-	.global	FtlMapWritePage
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	ldr	r10, .L1221
-	movt	r5, #:upper16:.LANCHOR0
-	movw	fp, #:lower16:.LC8
-	uxth	r9, r1
-	ldr	r8, .L1221+4
-	mov	r4, r0
-	mov	r7, r2
-	add	r6, r5, #312
-	movt	fp, #:upper16:.LC8
-	.pad #12
-	sub	sp, sp, #12
-	mov	r3, #0
-	str	r1, [sp, #4]
-	str	r3, [sp]
-.L1195:
-	ldr	r2, [r5, #2628]
-	ldrh	r3, [r6]
-	add	r2, r2, #1
-	str	r2, [r5, #2628]
-	sub	r3, r3, #1
-	ldrh	r2, [r4, #2]
-	cmp	r2, r3
-	bge	.L1196
-	ldrh	r3, [r4]
+	str	r3, [r0, #4]
+	bl	FlashReadPages
+	ldrh	r3, [r7]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L1196
-.L1197:
-	ldr	r1, [r4, #12]
-	lsl	r2, r3, #1
-	ldrh	r2, [r1, r2]
-	cmp	r2, #0
-	beq	.L1217
-	ldrh	r2, [r4, #10]
+	ldr	r3, [r4, #3292]
+	bne	.L761
+	mvn	r2, #0
+	str	r2, [r3, r8]
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3, r8]
+	cmp	r3, r2
+	bne	.L762
+.L763:
+	mov	r1, #1
+	b	.L835
+.L761:
+	ldr	r3, [r3, r8]
+	cmn	r3, #1
+	bne	.L762
+	sub	r9, r9, #1
+	uxth	r9, r9
+	cmp	r9, #0
+	bne	.L764
+	b	.L763
+.L762:
+	ldr	r2, [r4, #2592]
+	ldr	r3, [r7, #4]
+	cmn	r2, #1
+	beq	.L765
 	cmp	r2, r3
-	bls	.L1218
-.L1199:
-	ldr	r0, [r4, #12]
-	lsl	r3, r3, #1
-	ldrh	r1, [r4, #2]
-	mov	r2, #0
-	ldrh	r0, [r0, r3]
-	ldr	r3, [r5, #3384]
-	str	r7, [r5, #3472]
-	orr	r1, r1, r0, lsl #10
-	str	r3, [r5, #3476]
-	str	r2, [r3, #8]	@ unaligned
-	str	r1, [r5, #3468]
-	movw	r1, #42982
-	str	r2, [r3]	@ unaligned
-	str	r2, [r3, #4]	@ unaligned
-	str	r2, [r3, #12]	@ unaligned
-	ldr	r3, [r4, #28]
-	ldr	ip, [r5, #3476]
-	strh	r9, [ip, #8]	@ movhi
-	str	r3, [ip, #4]
-	ldrh	r3, [r4, #4]
-	strh	r0, [ip, #2]	@ movhi
-	strh	r3, [ip]	@ movhi
-	ldrh	lr, [r10]
-	ldr	r0, [r5, #3472]
-	cmp	lr, r2
-	beq	.L1210
-	add	lr, r0, lr
-	movt	r1, 18374
-.L1201:
-	lsr	r3, r1, #2
-	ldrb	r2, [r0], #1	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	lr, r0
-	add	r3, r3, r2
-	eor	r1, r1, r3
-	bne	.L1201
-.L1200:
-	mov	r3, #1
-	str	r1, [ip, #12]
-	mov	r2, r3
-	mov	r1, r3
-	mov	r0, r8
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	add	r3, r3, #1
-	uxth	r3, r3
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r2, [r5, #3464]
-	cmn	r2, #1
-	beq	.L1219
-	cmp	r2, #256
-	cmpne	r3, #1
-	beq	.L1208
-	ldr	r0, [r4, #36]
-	cmp	r0, #0
-	beq	.L1209
-.L1208:
-	mov	r3, #0
-	str	r3, [r4, #36]
-	b	.L1195
-.L1196:
-	mov	r0, r4
-	bl	Ftl_write_map_blk_to_last_page
-	ldrh	r3, [r4]
-	b	.L1197
-.L1217:
-	mov	r2, #700
-	ldr	r1, .L1221+8
-	mov	r0, fp
-	bl	sftl_printk
-	ldrh	r3, [r4]
-	ldrh	r2, [r4, #10]
+	bhi	.L766
+.L765:
+	cmn	r3, #1
+	addne	r2, r3, #1
+	strne	r2, [r4, #2592]
+.L766:
+	ldrh	r2, [r7]
+	movw	r1, #61604
+	cmp	r2, r1
+	beq	.L768
+	bhi	.L769
+	movw	r3, #61574
 	cmp	r2, r3
-	bhi	.L1199
-.L1218:
-	movw	r2, #701
-	ldr	r1, .L1221+8
-	mov	r0, fp
-	bl	sftl_printk
-	ldrh	r3, [r4]
-	b	.L1199
-.L1219:
-	movw	r0, #:lower16:.LC100
-	ldr	r1, [r5, #3468]
-	movt	r0, #:upper16:.LC100
+	beq	.L770
+.L767:
+	add	fp, fp, #1
+	b	.L759
+.L769:
+	movw	r3, #61634
+	cmp	r2, r3
+	beq	.L771
+	movw	r3, #65535
+	cmp	r2, r3
+	moveq	r1, #0
+	bne	.L767
+.L835:
+	mov	r0, r6
+	bl	FtlFreeSysBlkQueueIn
+	b	.L767
+.L771:
+	ldr	r3, [sp, #8]
+	ldrh	r2, [r3]
+	ldr	r3, [r4, #332]
+	cmp	r2, r3
+	bls	.L773
+	movw	r2, #1225
+	ldr	r1, .L836+8
+	ldr	r0, .L836+12
 	bl	sftl_printk
-	ldrh	r3, [r4, #2]
-	ldr	r2, [sp]
-	cmp	r3, #2
-	ldrhls	r3, [r6]
+.L773:
+	ldr	r0, [r4, #332]
+	ldr	r2, [sp, #8]
+	ldr	ip, [r4, #3384]
+	ldrh	r2, [r2]
+	uxth	r1, r0
+	sub	r3, r1, #1
+	sub	r1, r1, r2
+	sxth	r3, r3
+	sub	r1, r1, #1
+	sxth	r1, r1
+.L774:
+	cmp	r3, r1
+	bgt	.L780
+	cmp	r3, #0
+	bge	.L812
+	b	.L767
+.L780:
+	ldr	r9, [r7, #4]
+	lsl	lr, r3, #2
+	ldr	r8, [ip, r3, lsl #2]
+	cmp	r9, r8
+	bls	.L775
+	ldr	r1, [ip]
+	cmp	r1, #0
+	bne	.L776
+	cmp	r0, r2
+	ldrne	r1, .L836+16
+	addne	r2, r2, #1
+	strhne	r2, [r1]	@ movhi
+.L776:
+	uxth	ip, r3
+	mov	r1, #0
+.L777:
+	uxth	r0, r1
+	sxth	r2, r1
+	cmp	ip, r0
+	bhi	.L778
+	ldr	r1, [r7, #4]
+	cmp	r3, #0
+	ldr	r2, [r4, #3384]
+	str	r1, [r2, lr]
+	lsl	r2, r3, #1
+	ldr	r1, [r4, #3360]
+	strh	r6, [r1, r2]	@ movhi
+	blt	.L767
+	ldr	r2, .L836+16
+	ldr	r1, [r4, #332]
+	ldrh	r2, [r2]
+	sub	r1, r1, r2
+	sub	r1, r1, #1
+	sxth	r1, r1
+	cmp	r3, r1
+	bgt	.L767
+.L812:
+	ldr	r1, [sp, #8]
 	add	r2, r2, #1
-	uxth	r2, r2
-	subls	r3, r3, #1
-	str	r2, [sp]
-	strhls	r3, [r4, #2]	@ movhi
-	ldr	r3, [sp]
-	cmp	r3, #3
-	bhi	.L1220
-	ldr	r3, [r4, #32]
+	strh	r2, [r1]	@ movhi
+	ldr	r2, [r4, #3384]
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, lsl #2]
+	lsl	r3, r3, #1
+	ldr	r2, [r4, #3360]
+.L833:
+	strh	r6, [r2, r3]	@ movhi
+	b	.L767
+.L778:
+	ldr	r0, [r4, #3384]
+	add	r1, r1, #1
+	add	r8, r0, r2, lsl #2
+	ldr	r8, [r8, #4]
+	str	r8, [r0, r2, lsl #2]
+	lsl	r2, r2, #1
+	ldr	r0, [r4, #3360]
+	add	r8, r0, r2
+	ldrh	r8, [r8, #2]
+	strh	r8, [r0, r2]	@ movhi
+	b	.L777
+.L775:
+	sub	r3, r3, #1
+	sxth	r3, r3
+	b	.L774
+.L770:
+	ldr	r3, [sp, #16]
+	ldr	r8, .L836+20
+	ldrh	r2, [r3]
+	ldrh	r3, [r8]
+	cmp	r2, r3
+	bls	.L783
+	movw	r2, #1266
+	ldr	r1, .L836+8
+	ldr	r0, .L836+12
+	bl	sftl_printk
+.L783:
+	ldr	lr, .L836+24
+	ldrh	r2, [r8]
+	ldr	ip, [r4, #3372]
+	ldrh	r1, [lr]
+	sub	r0, r2, #1
+	sxth	r3, r0
+	sub	r0, r0, r1
+	str	r0, [sp, #12]
+.L784:
+	ldr	r0, [sp, #12]
+	cmp	r3, r0
+	ble	.L789
+	ldr	r9, [ip, r3, lsl #2]
+	lsl	r8, r3, #2
+	ldr	r0, [r7, #4]
+	cmp	r0, r9
+	bls	.L785
+	sub	r2, r2, r1
+	ldr	r0, [ip]
+	clz	r2, r2
+	uxth	ip, r3
+	lsr	r2, r2, #5
+	cmp	r0, #0
+	orrne	r2, r2, #1
+	cmp	r2, #0
+	addeq	r1, r1, #1
+	strheq	r1, [lr]	@ movhi
+	mov	r1, #0
+.L787:
+	uxth	r0, r1
+	sxth	r2, r1
+	cmp	ip, r0
+	bhi	.L788
+	ldr	r1, [r7, #4]
+	ldr	r2, [r4, #3372]
+	str	r1, [r2, r8]
+	lsl	r2, r3, #1
+	ldr	r1, [r4, #352]
+	strh	r6, [r1, r2]	@ movhi
+.L789:
 	cmp	r3, #0
-	beq	.L1195
-.L1215:
-	b	.L1215
-.L1210:
-	movt	r1, 18374
-	b	.L1200
-.L1209:
-	ldr	r2, [r5, #3468]
-	ldr	r3, [r4, #24]
-	ldr	r1, [sp, #4]
-	str	r2, [r3, r1, lsl #2]
-	add	sp, sp, #12
+	blt	.L767
+	ldr	r0, .L836+24
+	ldrh	r2, [r0, #-24]
+	ldrh	r1, [r0]
+	sub	r2, r2, #1
+	sub	r2, r2, r1
+	sxth	r2, r2
+	cmp	r3, r2
+	bgt	.L767
+	add	r1, r1, #1
+	ldr	r2, [r4, #3372]
+	strh	r1, [r0]	@ movhi
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, lsl #2]
+	lsl	r3, r3, #1
+	ldr	r2, [r4, #352]
+	b	.L833
+.L788:
+	ldr	r0, [r4, #3372]
+	add	r1, r1, #1
+	add	lr, r0, r2, lsl #2
+	ldr	lr, [lr, #4]
+	str	lr, [r0, r2, lsl #2]
+	lsl	r2, r2, #1
+	ldr	r0, [r4, #352]
+	add	lr, r0, r2
+	ldrh	lr, [lr, #2]
+	strh	lr, [r0, r2]	@ movhi
+	b	.L787
+.L785:
+	sub	r3, r3, #1
+	sxth	r3, r3
+	b	.L784
+.L768:
+	ldrh	r1, [r5]
+	movw	r2, #65535
+	cmp	r1, r2
+	strheq	r6, [r5]	@ movhi
+	beq	.L834
+	ldrh	r0, [r5, #4]
+	cmp	r0, r2
+	beq	.L792
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L792:
+	ldr	r3, [r7, #4]
+	ldr	r2, [r4, #2636]
+	cmp	r2, r3
+	strhcs	r6, [r5, #4]	@ movhi
+	bcs	.L767
+	ldrh	r3, [r5]
+	strh	r6, [r5]	@ movhi
+	strh	r3, [r5, #4]	@ movhi
+	ldr	r3, [r7, #4]
+.L834:
+	str	r3, [r4, #2636]
+	b	.L767
+.L796:
+	ldr	r1, [r4, #3360]
+	ldrh	r3, [r1]
+	cmp	r3, #0
+	beq	.L798
+.L801:
+	ldr	r0, [r4, #352]
+	ldrh	r2, [r0]
+	cmp	r2, #0
+	beq	.L799
+.L800:
+	ldr	r3, [sp, #8]
+	ldrh	r2, [r3]
+	ldr	r3, [r4, #332]
+	cmp	r2, r3
+	bls	.L831
+	movw	r2, #1391
+	ldr	r1, .L836+8
+	ldr	r0, .L836+12
+	bl	sftl_printk
+.L831:
+	mov	r0, #0
+	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1220:
-	movw	r0, #:lower16:.LC101
-	mov	r2, r3
-	ldr	r1, [r5, #3468]
-	movt	r0, #:upper16:.LC101
-	bl	sftl_printk
-.L1205:
-	b	.L1205
-.L1222:
-	.align	2
-.L1221:
-	.word	.LANCHOR0+318
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR1+348
+.L798:
+	ldr	r2, .L836+16
+	ldrh	r2, [r2]
+	cmp	r2, #0
+	ldrne	r0, [r4, #332]
+	beq	.L801
+.L802:
+	sxth	r2, r3
+	cmp	r2, r0
+	bcs	.L801
+	lsl	ip, r2, #1
+	add	r3, r3, #1
+	ldrh	ip, [r1, ip]
+	cmp	ip, #0
+	beq	.L802
+	mov	r3, r2
+	mov	lr, #0
+.L803:
+	ldr	r1, [r4, #332]
+	cmp	r3, r1
+	bcs	.L801
+	ldr	r0, [r4, #3360]
+	lsl	r1, r3, #1
+	sub	ip, r3, r2
+	lsl	r5, ip, #1
+	ldrh	r6, [r0, r1]
+	strh	r6, [r0, r5]	@ movhi
+	ldr	r0, [r4, #3384]
+	ldr	r5, [r0, r3, lsl #2]
+	add	r3, r3, #1
+	sxth	r3, r3
+	str	r5, [r0, ip, lsl #2]
+	ldr	r0, [r4, #3360]
+	strh	lr, [r0, r1]	@ movhi
+	b	.L803
+.L799:
+	ldr	r3, .L836+24
+	ldrh	r1, [r3]
+	cmp	r1, #0
+	ldrhne	ip, [r3, #-24]!
+	movne	r1, r3
+	beq	.L800
+.L808:
+	sxth	r3, r2
+	cmp	r3, ip
+	mov	lr, r3
+	bge	.L800
+	lsl	r5, r3, #1
+	add	r2, r2, #1
+	ldrh	r5, [r0, r5]
+	cmp	r5, #0
+	beq	.L808
+	mov	r5, #0
+.L809:
+	ldrh	r2, [r1]
+	cmp	r3, r2
+	bge	.L800
+	ldr	r0, [r4, #352]
+	lsl	r2, r3, #1
+	sub	ip, r3, lr
+	lsl	r6, ip, #1
+	ldrh	r7, [r0, r2]
+	strh	r7, [r0, r6]	@ movhi
+	ldr	r0, [r4, #3372]
+	ldr	r6, [r0, r3, lsl #2]
+	add	r3, r3, #1
+	sxth	r3, r3
+	str	r6, [r0, ip, lsl #2]
+	ldr	r0, [r4, #352]
+	strh	r5, [r0, r2]	@ movhi
+	b	.L809
+.L837:
+	.align	2
+.L836:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+316
+	.word	.LANCHOR1+231
+	.word	.LC8
+	.word	.LANCHOR0+3440
+	.word	.LANCHOR0+324
+	.word	.LANCHOR0+348
 	.fnend
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
-	.global	load_l2p_region
+	.global	FtlLoadBbt
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	load_l2p_region, %function
-load_l2p_region:
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	mov	r6, r0
-	ldr	r8, .L1235
-	mov	r5, r1
+	ldr	r4, .L871
+	ldr	r8, .L871+4
+	ldr	r3, [r4, #3304]
+	add	r7, r4, #3456
+	ldr	r6, [r4, #3336]
+	str	r3, [r4, #3464]
+	str	r6, [r4, #3468]
+	bl	FtlBbtMemInit
+	movw	r3, #302
+	ldrh	r5, [r4, r3]
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L839:
 	ldrh	r3, [r8]
-	cmp	r3, r0
-	bcc	.L1233
-.L1224:
-	movw	r4, #:lower16:.LANCHOR0
-	add	r5, r5, r5, lsl #1
-	movt	r4, #:upper16:.LANCHOR0
-	ldr	r3, [r4, #2604]
-	ldr	r7, [r3, r6, lsl #2]
-	ldr	r3, [r4, #2532]
-	cmp	r7, #0
-	beq	.L1234
-	lsl	r5, r5, #2
-	ldr	r0, [r4, #3384]
+	sub	r3, r3, #16
+	cmp	r5, r3
+	ble	.L842
+	lsl	r3, r5, #10
 	mov	r2, #1
-	str	r7, [r4, #3468]
-	add	r3, r3, r5
 	mov	r1, r2
-	ldr	r3, [r3, #8]
-	str	r0, [r4, #3476]
-	ldr	r0, .L1235+4
-	str	r3, [r4, #3472]
+	mov	r0, r7
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r9, [r4, #3476]
-	ldrh	r3, [r9, #8]
-	cmp	r3, r6
-	beq	.L1227
-	movw	r0, #:lower16:.LC102
-	mov	r2, r7
-	movt	r0, #:upper16:.LC102
-	mov	r1, r6
-	bl	sftl_printk
-	mov	r3, #4
-	movw	r0, #:lower16:.LC89
-	mov	r2, r3
-	movt	r0, #:upper16:.LC89
-	ldr	r1, [r4, #3476]
-	bl	rknand_print_hex
-	movw	r0, #:lower16:.LC103
-	ldrh	r3, [r8]
-	movt	r0, #:upper16:.LC103
-	mov	r2, #4
-	ldr	r1, [r4, #2604]
-	bl	rknand_print_hex
-.L1228:
-	ldrh	r3, [r9, #8]
-	cmp	r3, r6
-	beq	.L1230
-	movw	r0, #:lower16:.LC8
-	mov	r2, #508
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1235+8
-	bl	sftl_printk
-.L1230:
-	ldr	r3, [r4, #2532]
-	mov	r1, #0
-	mov	r0, #0
-	add	r2, r3, r5
-	str	r1, [r2, #4]
-	strh	r6, [r3, r5]	@ movhi
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1227:
-	ldr	r3, [r4, #3464]
-	cmp	r3, #256
-	bne	.L1230
-	movw	r0, #:lower16:.LC104
-	mov	r2, r7
-	mov	r1, r6
-	movt	r0, #:upper16:.LC104
-	bl	sftl_printk
-	ldr	r3, [r4, #2532]
-	mov	r1, r6
-	ldr	r0, .L1235+12
-	add	r3, r3, r5
-	ldr	r2, [r3, #8]
-	bl	FtlMapWritePage
-	b	.L1228
-.L1234:
-	lsl	r5, r5, #2
-	movw	r2, #318
-	ldrh	r2, [r4, r2]
-	mov	r1, #255
-	add	r3, r3, r5
-	ldr	r0, [r3, #8]
-	bl	memset
-	ldr	r3, [r4, #2532]
-	mov	r0, #0
-	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2532]
-	add	r5, r3, r5
-	str	r7, [r5, #4]
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1233:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #485
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1235+8
-	bl	sftl_printk
-	b	.L1224
-.L1236:
-	.align	2
-.L1235:
-	.word	.LANCHOR0+340
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR1+364
-	.word	.LANCHOR0+2548
-	.fnend
-	.size	load_l2p_region, .-load_l2p_region
-	.align	2
-	.global	ftl_map_blk_gc
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r6, r0
-	ldr	r4, [r0, #12]
-	ldr	r5, [r0, #24]
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r6, #10]
-	ldrh	r2, [r6, #8]
-	sub	r3, r3, #5
-	cmp	r2, r3
-	blt	.L1272
-	uxth	r3, r0
-	lsl	r3, r3, #1
-	ldrh	r7, [r4, r3]
-	cmp	r7, #0
-	bne	.L1266
-.L1272:
-	ldr	r10, .L1276
-.L1238:
-	ldrh	r3, [r10]
-	ldrh	r2, [r6, #2]
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	bne	.L840
+	ldr	r3, [r4, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	mov	r0, r7
+	add	r3, r3, #1
+	str	r3, [r4, #3460]
+	bl	FlashReadPages
+.L840:
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	beq	.L841
+	ldrh	r2, [r6]
+	movw	r3, #61649
 	cmp	r2, r3
-	bcc	.L1261
-	mov	r0, r6
-	bl	ftl_map_blk_alloc_new_blk
-.L1261:
-	mov	r0, #0
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1266:
-	ldr	r2, [r6, #32]
-	ldr	r10, .L1276
-	cmp	r2, #0
-	bne	.L1238
-	mov	r1, #1
-	str	r1, [r6, #32]
-	strh	r2, [r4, r3]	@ movhi
-	ldrh	r1, [r6, #2]
-	ldrh	r2, [r10]
-	ldrh	r3, [r6, #8]
-	cmp	r1, r2
-	sub	r3, r3, #1
-	strh	r3, [r6, #8]	@ movhi
-	bcs	.L1274
-.L1239:
-	ldrh	r2, [r6, #6]
-	cmp	r2, #0
-	movwne	r9, #:lower16:.LANCHOR0
-	movne	r4, #0
-	movtne	r9, #:upper16:.LANCHOR0
-	bne	.L1249
-	b	.L1250
-.L1243:
-	add	r4, r4, #1
-	uxth	r4, r4
-	cmp	r2, r4
-	bls	.L1250
-.L1249:
-	ldr	r3, [r5, r4, lsl #2]
-	add	r8, r5, r4, lsl #2
-	cmp	r7, r3, lsr #10
-	bne	.L1243
-	ldr	r3, [r9, #3356]
+	bne	.L841
+	ldr	r2, [r6, #4]
+	ldr	r3, .L871+8
+	str	r2, [r4, #364]
+	ldrh	r2, [r6, #8]
+	strh	r5, [r3]	@ movhi
+	strh	r2, [r3, #4]	@ movhi
+.L842:
+	ldr	r5, .L871+8
+	movw	r2, #65535
+	ldrh	r3, [r5]
+	cmp	r3, r2
+	beq	.L856
+	ldrh	r3, [r5, #4]
+	cmp	r3, r2
+	beq	.L846
+	lsl	r3, r3, #10
 	mov	r2, #1
-	ldr	fp, [r9, #3384]
 	mov	r1, r2
-	ldr	r0, .L1276+4
-	str	r3, [r9, #3472]
-	str	fp, [r9, #3476]
-	ldr	r3, [r5, r4, lsl #2]
-	str	r3, [r9, #3468]
+	ldr	r0, .L871+12
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldrh	r3, [fp, #8]
-	movw	r0, #:lower16:.LC8
-	movw	r2, #611
-	ldr	r1, .L1276+8
-	movt	r0, #:upper16:.LC8
-	cmp	r3, r4
-	bne	.L1275
-	ldr	r3, [r9, #3464]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L1247
-.L1252:
-	ldrh	r2, [fp]
-	mov	r1, r4
-	ldrh	r3, [r6, #4]
-	mov	r0, r6
+	beq	.L846
+	ldrh	r2, [r6]
+	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1247
-	ldr	r2, [r9, #3472]
-	add	r4, r4, #1
-	bl	FtlMapWritePage
-	ldrh	r2, [r6, #6]
-	uxth	r4, r4
-	cmp	r2, r4
-	bhi	.L1249
-.L1250:
-	movw	r3, #65535
-	cmp	r7, r3
-	beq	.L1241
-	ldr	r3, .L1276+12
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	beq	.L1241
-	mov	r0, r7
+	bne	.L846
+	ldr	r3, [r6, #4]
+	ldr	r2, [r4, #364]
+	cmp	r3, r2
+	ldrhhi	r2, [r5, #4]
+	strhi	r3, [r4, #364]
+	ldrhhi	r3, [r6, #8]
+	strhhi	r2, [r5]	@ movhi
+	strhhi	r3, [r5, #4]	@ movhi
+.L846:
+	ldr	r8, .L871+12
 	mov	r1, #1
-	bl	FtlFreeSysBlkQueueIn.part.10
-.L1241:
-	mov	r3, #0
-	str	r3, [r6, #32]
-	b	.L1238
-.L1275:
+	ldrh	r0, [r5]
+	movw	r9, #61649
+	bl	FtlGetLastWrittenPage
+	sxth	r7, r0
+	add	r0, r0, #1
+	strh	r0, [r5, #2]	@ movhi
+.L848:
+	cmp	r7, #0
+	bge	.L851
+	mov	r2, #251
+	ldr	r1, .L871+16
+	ldr	r0, .L871+20
 	bl	sftl_printk
-	ldr	r3, [r9, #3464]
+.L850:
+	ldrh	r3, [r6, #10]
+	ldrh	r0, [r6, #12]
+	strh	r3, [r5, #6]	@ movhi
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L853
+	ldr	r2, [r4, #232]
+	cmp	r0, r2
+	beq	.L853
+	ldrh	r3, [r4, #246]
+	lsr	r3, r3, #2
+	cmp	r0, r3
+	cmpcc	r2, r3
+	bcs	.L853
+	bl	FtlSysBlkNumInit
+.L853:
+	ldr	r6, .L871+24
+	mov	r5, #0
+	ldr	r8, .L871+28
+	sub	r7, r6, #122
+.L854:
+	ldrh	r3, [r7]
+	cmp	r5, r3
+	bcc	.L855
+	mov	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L841:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L839
+.L851:
+	ldrh	r3, [r5]
+	mov	r2, #1
+	mov	r1, r2
+	mov	r0, r8
+	orr	r3, r7, r3, lsl #10
+	str	r3, [r4, #3460]
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L1247
-	ldrh	r3, [fp, #8]
-	cmp	r3, r4
-	beq	.L1252
-.L1247:
-	mov	r3, #0
-	str	r3, [r8]
-.L1246:
-	b	.L1246
-.L1274:
-	mov	r0, r6
-	bl	ftl_map_blk_alloc_new_blk
-	b	.L1239
-.L1277:
+	beq	.L849
+	ldrh	r3, [r6]
+	cmp	r3, r9
+	beq	.L850
+.L849:
+	sub	r7, r7, #1
+	sxth	r7, r7
+	b	.L848
+.L855:
+	ldrh	r2, [r8]
+	ldr	r1, [r4, #3464]
+	ldr	r0, [r6, #4]!
+	lsl	r2, r2, #2
+	mla	r1, r5, r2, r1
+	add	r5, r5, #1
+	bl	ftl_memcpy
+	b	.L854
+.L856:
+	mvn	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L872:
 	.align	2
-.L1276:
-	.word	.LANCHOR0+312
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR1+380
-	.word	.LANCHOR0+416
+.L871:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+302
+	.word	.LANCHOR0+356
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+245
+	.word	.LC8
+	.word	.LANCHOR0+380
+	.word	.LANCHOR0+3392
 	.fnend
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
-	.global	FtlMapTblRecovery
+	.global	FlashProgPages
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
+	.type	FlashProgPages, %function
+FlashProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 32
+	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r4, r0
-	ldr	r2, [r0, #24]
-	.pad #44
-	sub	sp, sp, #44
-	movw	r5, #:lower16:.LANCHOR0
-	mov	r1, #0
-	ldrh	r10, [r0, #6]
-	movt	r5, #:upper16:.LANCHOR0
-	str	r0, [sp, #8]
-	mov	r0, r2
-	str	r2, [sp, #24]
-	ldrh	r2, [r4, #8]
-	ldr	r3, [r4, #16]
-	mov	r6, r2
-	str	r2, [sp, #20]
-	ldr	r2, [r4, #12]
-	str	r3, [sp, #36]
-	str	r2, [sp, #28]
-	lsl	r2, r10, #2
-	bl	memset
-	ldr	r3, [r5, #3352]
-	mov	r2, #1
-	ldr	r7, [r5, #3384]
-	cmp	r6, #0
-	str	r2, [r4, #36]
-	mvn	r2, #0
-	str	r3, [r5, #3472]
-	mov	r3, #0
-	str	r7, [r5, #3476]
-	str	r3, [r4, #32]
-	strh	r2, [r4]	@ movhi
-	strh	r2, [r4, #2]	@ movhi
-	str	r3, [r4, #28]
-	beq	.L1333
-	ldr	r2, [sp, #20]
-	subs	r2, r2, #1
-	str	r2, [sp, #32]
-	beq	.L1307
-	add	r6, r5, #312
-	str	r3, [sp, #12]
-	add	r8, r6, #3152
+	.pad #60
+	sub	sp, sp, #60
 	str	r3, [sp, #16]
-.L1284:
-	ldr	ip, [r5, #3352]
-	mov	r2, #1
+	mov	fp, r1
+	mov	r4, r0
+	mov	r5, r0
+	ldr	r3, .L914
+	mov	r8, #0
+	ldr	r6, .L914+4
+	str	r2, [sp, #12]
+	ldr	r2, [r3]
+	mov	r9, r6
+	mov	r10, r6
+	str	r3, [sp, #20]
+	str	r2, [sp, #52]
+	ldrh	r2, [r6, #12]
+	str	r2, [sp, #4]
+	lsl	r2, r2, #3
+	str	r2, [sp, #8]
+.L874:
+	cmp	r8, fp
+	bne	.L888
 	ldr	r3, [sp, #16]
-	mov	r1, r2
-	str	ip, [r5, #3472]
-	ldr	ip, [sp, #28]
-	lsl	r0, r3, #1
-	ldrh	r3, [r6]
-	add	r9, ip, r0
-	ldrh	ip, [ip, r0]
-	sub	r3, r3, #1
-	mov	r0, r8
-	orr	r3, r3, ip, lsl #10
-	str	r3, [r5, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r5, #3464]
-	cmn	r3, #1
-	beq	.L1292
-	ldr	r3, [sp, #8]
-	ldrh	r2, [r7]
-	ldrh	r3, [r3, #4]
-	cmp	r2, r3
-	beq	.L1334
-.L1292:
-	ldrh	r3, [r6]
 	cmp	r3, #0
-	movne	fp, #0
-	movne	r4, fp
-	beq	.L1296
-.L1304:
-	ldrh	r3, [r9]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r8
-	orr	r3, fp, r3, lsl #10
-	str	r3, [r5, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r5, #3476]
-	ldr	ip, [r3, #12]
-	ldr	r3, [r5, #3464]
-	cmp	ip, #0
-	beq	.L1299
-	cmn	r3, #1
-	beq	.L1306
-	ldr	r3, .L1336
-	movw	r1, #42982
-	ldr	r0, [r5, #3472]
-	ldrh	lr, [r3]
-	cmp	lr, #0
-	beq	.L1309
-	add	lr, r0, lr
-	movt	r1, 18374
-.L1302:
-	lsr	r3, r1, #2
-	ldrb	r2, [r0], #1	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	lr, r0
-	add	r3, r3, r2
-	eor	r1, r1, r3
-	bne	.L1302
-.L1301:
-	cmp	ip, r1
-	beq	.L1303
-	movw	r0, #:lower16:.LC106
-	str	r1, [sp, #4]
-	mov	r3, fp
-	str	ip, [sp]
-	movt	r0, #:upper16:.LC106
-	ldr	r2, [sp, #12]
-	ldr	r1, .L1336+4
+	beq	.L882
+	mov	r5, #0
+	ldr	r7, .L914+8
+	ldr	r10, .L914+12
+	ldr	r6, .L914+4
+	b	.L889
+.L888:
+	ldr	r3, [r5, #8]
+	cmp	r3, #0
+	beq	.L875
+	ldr	r3, [r5, #12]
+	cmp	r3, #0
+	bne	.L876
+.L875:
+	mov	r2, #148
+	ldr	r1, .L914+16
+	ldr	r0, .L914+20
 	bl	sftl_printk
+.L876:
+	add	r2, sp, #24
+	add	r1, sp, #28
+	mov	r0, r5
+	bl	l2p_addr_tran
+	ldr	r7, [sp, #24]
+	cmp	r7, #3
+	bls	.L877
+.L913:
 	mvn	r3, #0
-	str	r3, [r5, #3464]
-.L1306:
-	add	r4, r4, #1
-	ldrh	r3, [r6]
-	sxth	r4, r4
-	cmp	r4, r3
-	mov	fp, r4
-	blt	.L1304
-.L1296:
-	ldr	r3, [sp, #16]
-	ldr	r1, [sp, #20]
-	add	r3, r3, #1
-	uxth	r3, r3
-	sxth	r2, r3
-	cmp	r2, r1
-	str	r2, [sp, #12]
-	str	r2, [sp, #16]
-	bge	.L1285
-	ldr	r2, [sp, #12]
-	ldr	r1, [sp, #32]
-	cmp	r2, r1
-	bne	.L1284
-	mov	r4, r3
-	lsl	r8, r1, #2
-	lsl	r3, r1, #1
-.L1282:
-	ldr	r2, [sp, #28]
-	mov	r1, #1
-	ldrh	r0, [r2, r3]
-	add	r3, r2, r3
-	str	r3, [sp, #16]
-	bl	FtlGetLastWrittenPage
+	str	r3, [r5]
+	b	.L878
+.L877:
+	cmp	r7, #0
+	bne	.L879
+	ldr	r3, [sp, #28]
 	ldr	r2, [sp, #8]
-	sxth	r9, r0
-	ldr	r1, [sp, #36]
-	add	r0, r0, #1
-	add	r9, r9, #1
-	strh	r4, [r2]	@ movhi
-	cmp	r9, #0
-	strh	r0, [r2, #2]	@ movhi
-	ldr	r3, [r1, r8]
-	str	r3, [r2, #28]
-	ble	.L1285
-	str	r6, [sp, #20]
-	mov	r8, #0
-	ldr	fp, .L1336+8
-	mov	r4, r8
-	ldr	r6, [sp, #16]
-.L1291:
-	ldrh	r3, [r6]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, fp
-	orr	r3, r8, r3, lsl #10
-	str	r3, [r5, #3468]
-	bl	FlashReadPages
-	ldr	r3, [r5, #3476]
-	ldr	ip, [r3, #12]
-	ldr	r3, [r5, #3464]
-	cmp	ip, #0
-	beq	.L1286
-	cmn	r3, #1
-	beq	.L1305
-	ldr	r3, .L1336
-	movw	r1, #42982
-	ldr	r0, [r5, #3472]
-	ldrh	lr, [r3]
-	cmp	lr, #0
-	beq	.L1308
-	add	lr, r0, lr
-	movt	r1, 18374
-.L1289:
-	lsr	r3, r1, #2
-	ldrb	r2, [r0], #1	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	r0, lr
-	add	r3, r3, r2
-	eor	r1, r1, r3
-	bne	.L1289
-.L1288:
-	cmp	ip, r1
-	beq	.L1290
-	movw	r0, #:lower16:.LC105
-	str	r1, [sp, #4]
-	mov	r3, r8
-	str	ip, [sp]
-	movt	r0, #:upper16:.LC105
+	cmp	r2, r3
+	bls	.L879
+	ldr	r5, .L914+16
+	ldr	r6, .L914+24
+	ldr	r8, .L914+28
+	b	.L911
+.L881:
+	mvn	r3, #0
+	ldr	r2, [r4, #-16]
+	str	r3, [r4, #-20]
+	mov	r1, r5
+	mov	r0, r6
+	add	r7, r7, #1
+	bl	sftl_printk
+	mov	r3, #16
+	mov	r2, #4
+	ldr	r1, [r4, #-12]
+	mov	r0, r8
+	bl	rknand_print_hex
+	mov	r3, #4
+	ldr	r1, [r4, #-8]
+	mov	r2, r3
+	ldr	r0, .L914+32
+	bl	rknand_print_hex
+.L911:
+	cmp	r7, fp
+	add	r4, r4, #20
+	bne	.L881
+	bl	dump_stack
+.L882:
+	ldr	r3, [sp, #20]
+	mov	r0, #0
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L896
+	bl	__stack_chk_fail
+.L879:
+	ldr	r1, [r5, #8]
+	tst	r1, #63
+	moveq	r7, r1
+	beq	.L883
+	ldr	r7, [r10, #3324]
+	cmp	r1, r7
+	beq	.L883
+	ldr	r3, .L914+36
+	mov	r0, r7
+	ldrh	r2, [r3]
+	lsl	r2, r2, #9
+	bl	ftl_memcpy
+.L883:
+	ldr	r3, [r5, #12]
+	mov	r2, r7
+	ldr	r1, [sp, #28]
+	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+	ldr	ip, [r10, #3256]
+	blx	ip
+	cmp	r0, #0
+	mvnne	r3, #0
+	streq	r0, [r5]
+	strne	r3, [r5]
+	ldrh	r3, [r6, #14]
+	cmp	r3, #4
+	bne	.L878
+	ldr	r0, [sp, #4]
+	add	r2, r7, #2048
+	ldr	r3, [r5, #12]
+	ldr	r1, [sp, #28]
+	ldr	ip, [r6, #3256]
+	add	r3, r3, #8
+	add	r1, r0, r1
+	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+	blx	ip
+	cmp	r0, #0
+	bne	.L913
+.L878:
+	add	r8, r8, #1
+	add	r5, r5, #20
+	b	.L874
+.L894:
+	ldr	r2, [r9, #3324]
+	mov	r3, #0
+	mov	r1, #1
+	add	r0, sp, #32
+	str	r3, [r2]
+	ldr	r2, [r9, #3332]
+	str	r3, [r2]
+	ldr	r3, [r4, #4]
 	ldr	r2, [sp, #12]
-	ldr	r1, .L1336+4
+	str	r3, [sp, #36]
+	ldr	r3, [r9, #3324]
+	str	r3, [sp, #40]
+	ldr	r3, [r9, #3332]
+	str	r3, [sp, #44]
+	bl	FlashReadPages
+	ldr	fp, [sp, #32]
+	cmn	fp, #1
+	bne	.L890
+	ldr	r1, [r4, #4]
+	mov	r0, r7
+	bl	sftl_printk
+	str	fp, [r4]
+.L890:
+	ldr	fp, [sp, #32]
+	cmp	fp, #256
+	bne	.L891
+	ldr	r1, [r4, #4]
+	mov	r0, r10
+	bl	sftl_printk
+	str	fp, [r4]
+.L891:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L892
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3332]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L892
+	ldr	r1, [r4, #4]
+	ldr	r0, .L914+40
 	bl	sftl_printk
 	mvn	r3, #0
-	str	r3, [r5, #3464]
-.L1305:
-	add	r4, r4, #1
-	sxth	r4, r4
-	cmp	r4, r9
-	mov	r8, r4
-	blt	.L1291
-	ldr	r6, [sp, #20]
-.L1285:
-	ldr	r4, [sp, #8]
-	mov	r0, r4
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r6]
-	ldrh	r2, [r4, #2]
+	str	r3, [r4]
+.L892:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L893
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3324]
+	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1335
-.L1281:
-	ldr	r4, [sp, #8]
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, #0
-	add	sp, sp, #44
+	beq	.L893
+	ldr	r1, [r4, #4]
+	ldr	r0, .L914+44
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L893:
+	add	r5, r5, #1
+	add	r4, r4, #20
+.L889:
+	cmp	r8, r5
+	bne	.L894
+	b	.L882
+.L896:
+	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1299:
-	cmn	r3, #1
-	beq	.L1306
-.L1303:
-	ldrh	r3, [r7, #8]
-	cmp	r10, r3
-	bls	.L1306
-	ldr	r2, [sp, #8]
-	ldrh	r1, [r7]
-	ldrh	r2, [r2, #4]
-	cmp	r1, r2
-	ldreq	r2, [r5, #3468]
-	ldreq	r1, [sp, #24]
-	streq	r2, [r1, r3, lsl #2]
-	b	.L1306
-.L1309:
-	movt	r1, 18374
-	b	.L1301
-.L1334:
-	ldrh	r2, [r7, #8]
-	movw	r3, #64245
-	cmp	r2, r3
-	bne	.L1292
-	ldrh	r3, [r6]
-	sub	r3, r3, #1
-	cmp	r3, #0
-	ble	.L1296
-	ldr	r0, [sp, #24]
-	mov	ip, #0
-	mov	r1, ip
-.L1298:
-	ldr	r2, [r5, #3352]
-	lsl	lr, ip, #3
-	add	r1, r1, #1
-	sxth	r1, r1
-	ldr	r3, [r2, ip, lsl #3]
-	add	r2, r2, lr
-	mov	ip, r1
-	uxth	lr, r3
-	cmp	r10, lr
-	ldrhi	r2, [r2, #4]
-	strhi	r2, [r0, lr, lsl #2]
-	ldrh	r3, [r6]
-	sub	r3, r3, #1
-	cmp	r1, r3
-	blt	.L1298
-	b	.L1296
-.L1286:
-	cmn	r3, #1
-	beq	.L1305
-.L1290:
-	ldrh	r3, [r7, #8]
-	cmp	r10, r3
-	bls	.L1305
-	ldr	r2, [sp, #8]
-	ldrh	r1, [r7]
-	ldrh	r2, [r2, #4]
-	cmp	r1, r2
-	ldreq	r2, [r5, #3468]
-	ldreq	r1, [sp, #24]
-	streq	r2, [r1, r3, lsl #2]
-	b	.L1305
-.L1335:
-	ldr	r0, [sp, #8]
-	bl	ftl_map_blk_alloc_new_blk
-	b	.L1281
-.L1308:
-	movt	r1, 18374
-	b	.L1288
-.L1333:
-	add	r6, r5, #312
-	b	.L1285
-.L1307:
-	ldr	r3, [sp, #32]
-	add	r6, r5, #312
-	str	r3, [sp, #12]
-	mov	r8, r3
-	mov	r4, r3
-	b	.L1282
-.L1337:
-	.align	2
-.L1336:
-	.word	.LANCHOR0+318
-	.word	.LANCHOR1+396
-	.word	.LANCHOR0+3464
-	.fnend
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
-	.align	2
-	.global	FtlLoadVonderInfo
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movt	r3, #:upper16:.LANCHOR0
-	movw	r1, #61574
-	add	r4, r3, #348
-	add	ip, r3, #328
-	ldr	r5, [r3, #4]
-	add	r2, r3, #3488
-	ldr	lr, [r3, #3408]
-	movt	r1, 65535
-	ldrh	r4, [r4]
-	mov	r0, r2
-	ldrh	ip, [ip]
-	ldr	r6, [r3, #3404]
-	str	r5, [r3, #3500]
-	str	lr, [r3, #3504]
-	ldr	r5, [r3, #3412]
-	ldrh	lr, [r3]
-	str	r6, [r3, #3508]
-	str	r5, [r3, #3512]
-	strh	r4, [r2, #8]	@ movhi
-	strh	lr, [r2, #10]	@ movhi
-	strh	ip, [r2, #6]	@ movhi
-	strh	r1, [r2, #4]	@ movhi
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-	.fnend
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
-	.align	2
-	.global	FtlLoadMapInfo
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	bl	FtlL2PDataInit
-	ldr	r0, .L1342
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	pop	{r4, pc}
-.L1343:
-	.align	2
-.L1342:
-	.word	.LANCHOR0+2548
-	.fnend
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
-	.align	2
-	.global	flush_l2p_region
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	flush_l2p_region, %function
-flush_l2p_region:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	add	r0, r0, r0, lsl #1
-	ldr	r3, [r5, #2532]
-	lsl	r4, r0, #2
-	add	r0, r5, #2544
-	add	r0, r0, #4
-	add	r2, r3, r4
-	ldrh	r1, [r3, r4]
-	ldr	r2, [r2, #8]
-	bl	FtlMapWritePage
-	ldr	r3, [r5, #2532]
-	mov	r0, #0
-	add	r4, r3, r4
-	ldr	r3, [r4, #4]
-	bic	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	pop	{r4, r5, r6, pc}
+.L915:
+	.align	2
+.L914:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC95
+	.word	.LC96
+	.word	.LANCHOR1+256
+	.word	.LC8
+	.word	.LC86
+	.word	.LC87
+	.word	.LC88
+	.word	.LANCHOR0+262
+	.word	.LC97
+	.word	.LC98
 	.fnend
-	.size	flush_l2p_region, .-flush_l2p_region
+	.size	FlashProgPages, .-FlashProgPages
 	.align	2
-	.global	log2phys
+	.global	FtlLowFormatEraseBlock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	log2phys, %function
-log2phys:
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	movt	r6, #:upper16:.LANCHOR0
-	mov	r9, r1
-	add	r1, r6, #316
-	.pad #12
-	sub	sp, sp, #12
-	ldr	r3, [r6, #2608]
-	mov	r7, r0
-	mov	r8, r2
-	ldrh	r10, [r1]
-	cmp	r0, r3
-	bcs	.L1347
-.L1351:
-	movw	r3, #342
-	add	r10, r10, #7
-	ldrh	r3, [r6, r3]
-	lsr	r5, r7, r10
-	uxth	r5, r5
-	cmp	r3, #0
-	beq	.L1349
-	ldr	r2, [r6, #2532]
-	ldrh	r1, [r2]
-	cmp	r1, r5
-	beq	.L1367
-	sub	r3, r3, #1
-	mov	r4, #12
-	uxth	r3, r3
-	add	r3, r3, #1
-	add	r3, r3, r3, lsl #1
-	lsl	r3, r3, #2
-	b	.L1355
-.L1358:
-	ldrh	r0, [r2, r4]
-	cmp	r0, r5
-	beq	.L1352
-	mov	r4, r1
-.L1355:
-	cmp	r4, r3
-	add	ip, r2, r4
-	add	r1, r4, #12
-	bne	.L1358
-.L1349:
-	bl	select_l2p_ram_region
-	add	ip, r0, r0, lsl #1
-	ldr	r3, [r6, #2532]
-	movw	r2, #65535
-	lsl	fp, ip, #2
-	mov	r1, r0
-	ldrh	ip, [r3, fp]
-	mov	r4, fp
-	add	r3, r3, fp
-	cmp	ip, r2
-	beq	.L1359
-	ldr	r3, [r3, #4]
-	cmp	r3, #0
-	blt	.L1368
-.L1359:
-	mov	r0, r5
-	bl	load_l2p_region
-	ldr	ip, [r6, #2532]
-	add	ip, ip, fp
-.L1352:
-	mvn	r3, #0
-	cmp	r8, #0
-	bic	r7, r7, r3, lsl r10
-	uxth	r7, r7
-	bne	.L1356
-	ldr	r3, [ip, #8]
-	ldr	r3, [r3, r7, lsl #2]
-	str	r3, [r9]
-	ldr	r3, [r6, #2532]
-	add	r4, r3, r4
-	ldr	r3, [r4, #4]
-.L1357:
-	cmn	r3, #1
-	moveq	r0, #0
-	movne	r0, #0
-	addne	r3, r3, #1
-	strne	r3, [r4, #4]
-.L1346:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1347:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #813
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1369
-	bl	sftl_printk
-	ldr	r3, [r6, #2608]
+	mov	r10, #0
+	ldr	r4, .L959
+	mov	r6, r1
+	mov	r7, r10
+	mov	r5, r10
+	mov	r9, #20
+	.pad #20
+	sub	sp, sp, #20
+	add	fp, r4, #316
+	str	r0, [sp, #4]
+	str	r0, [r4, #3288]
+.L917:
+	ldrh	r1, [r4, #236]
+	uxth	r3, r10
+	cmp	r1, r3
+	bhi	.L921
+	cmp	r7, #0
+	beq	.L916
+	mov	r8, #0
+	mov	r9, #20
+	mov	r2, r7
+	mov	r1, #0
+	ldr	r0, [r4, #3272]
+	bl	FlashEraseBlocks
+.L924:
+	uxth	r3, r8
 	cmp	r7, r3
-	bcc	.L1351
-	mvn	r0, #0
-	cmp	r8, #0
-	streq	r0, [r9]
-	add	sp, sp, #12
+	bhi	.L926
+.L927:
+	cmp	r6, #0
+	mov	r8, #0
+	ldrne	r3, .L959+4
+	mov	fp, #20
+	moveq	r3, #2
+	streq	r6, [sp, #8]
+	streq	r3, [sp, #12]
+	ldrhne	r3, [r3]
+	strne	r3, [sp, #12]
+	movne	r3, #1
+	strne	r3, [sp, #8]
+.L936:
+	mov	r10, #0
+	mov	r7, r10
+.L928:
+	ldrh	r1, [r4, #236]
+	uxth	r3, r10
+	cmp	r1, r3
+	bhi	.L931
+	cmp	r7, #0
+	beq	.L916
+	mov	r9, #0
+	mov	r3, #1
+	ldr	r2, [sp, #8]
+	mov	r1, r7
+	ldr	r0, [r4, #3272]
+	bl	FlashProgPages
+.L933:
+	uxth	r3, r9
+	cmp	r7, r3
+	bhi	.L935
+	add	r8, r8, #1
+	ldr	r2, [sp, #12]
+	uxth	r3, r8
+	cmp	r2, r3
+	bhi	.L936
+	mov	r8, #0
+	mov	r9, #20
+.L937:
+	uxth	r3, r8
+	cmp	r7, r3
+	bhi	.L939
+	ldr	r3, [sp, #4]
+	adds	r6, r6, #0
+	movne	r6, #1
+	cmp	r3, #63
+	orrls	r6, r6, #1
+	cmp	r6, #0
+	beq	.L916
+	mov	r2, r7
+	ldr	r1, [sp, #8]
+	ldr	r0, [r4, #3272]
+	bl	FlashEraseBlocks
+.L916:
+	mov	r0, r5
+	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1356:
-	ldr	r1, [r9]
-	movw	r2, #2536
-	ldr	r3, [ip, #8]
-	str	r1, [r3, r7, lsl #2]
-	ldr	r3, [r6, #2532]
-	strh	r5, [r6, r2]	@ movhi
-	add	r4, r3, r4
-	ldr	r3, [r4, #4]
-	orr	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	b	.L1357
-.L1368:
-	str	r0, [sp, #4]
-	bl	flush_l2p_region
+.L921:
+	uxth	r3, r10
+	ldr	r0, [r4, #3272]
+	mov	r2, #0
+	mul	r1, r9, r3
+	add	r3, r4, r3
+	str	r2, [r0, r1]
 	ldr	r1, [sp, #4]
-	b	.L1359
-.L1367:
-	mov	ip, r2
-	mov	r4, #0
-	b	.L1352
-.L1370:
+	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r6, #0
+	mov	r8, r0
+	beq	.L918
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L919
+.L918:
+	mov	r0, r8
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	addne	r5, r5, #1
+	uxthne	r5, r5
+	bne	.L919
+	ldr	r1, [r4, #3272]
+	lsl	r8, r8, #10
+	ldr	r3, [r4, #3320]
+	mla	r1, r9, r7, r1
+	str	r3, [r1, #8]
+	ldrh	r3, [fp]
+	str	r8, [r1, #4]
+	mul	r3, r7, r3
+	add	r7, r7, #1
+	uxth	r7, r7
+	add	r0, r3, #3
+	cmp	r3, #0
+	movlt	r3, r0
+	ldr	r0, [r4, #3340]
+	bic	r3, r3, #3
+	add	r3, r0, r3
+	str	r3, [r1, #12]
+.L919:
+	add	r10, r10, #1
+	b	.L917
+.L926:
+	mul	r3, r9, r8
+	ldr	r2, [r4, #3272]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmn	r3, #1
+	bne	.L925
+	ldr	r0, [r1, #4]
+	add	r5, r5, #1
+	uxth	r5, r5
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L925:
+	add	r8, r8, #1
+	b	.L924
+.L931:
+	uxth	r3, r10
+	ldr	r0, [r4, #3272]
+	mov	r2, #0
+	mul	r1, fp, r3
+	add	r3, r4, r3
+	str	r2, [r0, r1]
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r6, #0
+	mov	r9, r0
+	beq	.L929
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L930
+.L929:
+	mov	r0, r9
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	bne	.L930
+	ldr	r1, [r4, #3272]
+	add	r9, r8, r9, lsl #10
+	ldr	r3, [r4, #3316]
+	mla	r1, fp, r7, r1
+	str	r3, [r1, #8]
+	ldr	r3, .L959+8
+	str	r9, [r1, #4]
+	ldrh	r3, [r3]
+	mul	r3, r7, r3
+	add	r7, r7, #1
+	uxth	r7, r7
+	add	r0, r3, #3
+	cmp	r3, #0
+	movlt	r3, r0
+	ldr	r0, [r4, #3320]
+	bic	r3, r3, #3
+	add	r3, r0, r3
+	str	r3, [r1, #12]
+.L930:
+	add	r10, r10, #1
+	b	.L928
+.L935:
+	mul	r3, fp, r9
+	ldr	r2, [r4, #3272]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L934
+	ldr	r0, [r1, #4]
+	add	r5, r5, #1
+	uxth	r5, r5
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L934:
+	add	r9, r9, #1
+	b	.L933
+.L939:
+	cmp	r6, #0
+	beq	.L938
+	mul	r3, r9, r8
+	ldr	r2, [r4, #3272]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L938
+	ldr	r0, [r1, #4]
+	mov	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L938:
+	add	r8, r8, #1
+	b	.L937
+.L960:
 	.align	2
-.L1369:
-	.word	.LANCHOR1+416
+.L959:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+308
+	.word	.LANCHOR0+316
 	.fnend
-	.size	log2phys, .-log2phys
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.global	FtlReUsePrevPpa
+	.global	FlashTestBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
+	.type	FlashTestBlk, %function
+FlashTestBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	ubfx	r2, r1, #10, #16
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r3, #306
-	.pad #12
-	sub	sp, sp, #12
-	str	r1, [sp, #4]
+	ldr	r3, .L968
+	cmp	r0, #11
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #88
+	sub	sp, sp, #88
+	movls	r4, #0
+	mov	r6, r3
+	ldr	r2, [r3]
+	str	r2, [sp, #84]
+	bls	.L961
+	ldr	r4, .L968+4
 	mov	r5, r0
-	ldrh	r1, [r4, r3]
-	mov	r0, r2
-	bl	__aeabi_uidivmod
-	add	r3, r4, #264
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r7, r0
-	ldr	r3, [r4, #16]
-	lsl	r6, r7, #1
-	ldrh	r2, [r3, r6]
-	cmp	r2, #0
-	addne	r2, r2, #1
-	strhne	r2, [r3, r6]	@ movhi
-	bne	.L1373
-	ldr	r1, [r4, #2524]
-	cmp	r1, #0
-	beq	.L1373
-	ldr	ip, [r4, #8]
-	movw	r3, #43691
-	movt	r3, 43690
-	ldrh	lr, [r4, #236]
-	sub	r1, r1, ip
-	asr	r1, r1, #1
-	cmp	lr, #0
-	mul	r3, r3, r1
-	uxth	r1, r3
-	beq	.L1373
-	cmp	r1, r7
-	beq	.L1374
-	add	r3, r1, r1, lsl #1
-	movw	r0, #65535
-	lsl	r3, r3, #1
-	ldrh	r1, [ip, r3]
-	cmp	r1, r0
-	bne	.L1378
-	b	.L1373
-.L1379:
-	cmp	r7, r1
-	beq	.L1374
-	ldrh	r1, [ip, r3]
-	cmp	r1, r0
-	beq	.L1373
-.L1378:
-	add	r2, r2, #1
-	add	r3, r1, r1, lsl #1
-	uxth	r2, r2
-	lsl	r3, r3, #1
-	cmp	lr, r2
-	bne	.L1379
-.L1373:
-	mov	r0, r5
+	mov	r2, #32
+	add	r0, sp, #20
+	mov	r1, #165
+	str	r0, [sp, #12]
+	ldr	r3, [r4, #3328]
+	lsl	r5, r5, #10
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	mov	r2, #8
+	mov	r1, #90
+	ldr	r0, [r4, #3328]
+	bl	ftl_memset
 	mov	r2, #1
-	add	r1, sp, #4
-	bl	log2phys
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, pc}
-.L1374:
-	mov	r1, r7
-	ldr	r0, .L1388
-	bl	List_remove_node
-	ldrh	r3, [r4, #236]
+	mov	r0, sp
+	mov	r1, r2
+	str	r5, [sp, #4]
+	bl	FlashEraseBlocks
+	mov	r3, #1
+	mov	r0, sp
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [sp]
 	cmp	r3, #0
-	bne	.L1377
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1733
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1388+4
-	bl	sftl_printk
-	ldrh	r3, [r4, #236]
-.L1377:
-	sub	r3, r3, #1
-	mov	r0, r7
-	strh	r3, [r4, #236]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r4, #16]
-	ldrh	r3, [r2, r6]
-	add	r3, r3, #1
-	strh	r3, [r2, r6]	@ movhi
-	b	.L1373
-.L1389:
-	.align	2
-.L1388:
-	.word	.LANCHOR0+2524
-	.word	.LANCHOR1+428
-	.fnend
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	2
-	.global	ftl_check_vpc
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 16
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:__stack_chk_guard
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	r3, #:upper16:__stack_chk_guard
-	.pad #20
-	sub	sp, sp, #20
-	movw	r0, #:lower16:.LC107
-	movw	r6, #:lower16:.LANCHOR0
+	mvnne	r4, #0
+	bne	.L963
+	add	r3, r5, #1
+	mov	r0, sp
 	str	r3, [sp, #4]
-	movt	r0, #:upper16:.LC107
-	ldr	r3, [r3]
-	movt	r6, #:upper16:.LANCHOR0
-	ldr	r1, .L1431
-	str	r3, [sp, #12]
-	bl	sftl_printk
-	movw	r0, #:lower16:check_vpc_table
-	mov	r2, #8192
-	movt	r0, #:upper16:check_vpc_table
+	mov	r3, #1
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r4, [sp]
+	adds	r4, r4, #0
+	movne	r4, #1
+	rsb	r4, r4, #0
+.L963:
+	mov	r2, #1
 	mov	r1, #0
-	bl	memset
-	ldr	r3, [r6, #2608]
-	cmp	r3, #0
-	beq	.L1396
-	ldr	r7, .L1431+4
-	movw	r5, #:lower16:check_vpc_table
-	movt	r5, #:upper16:check_vpc_table
-	mov	r4, #0
-.L1395:
-	mov	r2, #0
-	add	r1, sp, #8
+	mov	r0, sp
+	str	r5, [sp, #4]
+	bl	FlashEraseBlocks
+.L961:
+	ldr	r2, [sp, #84]
 	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [sp, #8]
-	cmn	r0, #1
-	beq	.L1394
-	ubfx	r0, r0, #10, #16
-	ldrh	r1, [r7]
-	bl	__aeabi_uidivmod
-	ldr	r3, .L1431+8
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsl	r0, r0, #1
-	ldrh	r3, [r5, r0]
-	add	r3, r3, #1
-	strh	r3, [r5, r0]	@ movhi
-.L1394:
-	ldr	r3, [r6, #2608]
-	add	r4, r4, #1
-	cmp	r3, r4
-	bhi	.L1395
-.L1396:
-	ldrh	r8, [r6, #20]
-	cmp	r8, #0
-	beq	.L1429
-	mov	r8, #0
-	movw	r7, #:lower16:check_vpc_table
-	movw	r9, #:lower16:.LC108
-	mov	r4, r8
-	movt	r7, #:upper16:check_vpc_table
-	movt	r9, #:upper16:.LC108
-	movw	r10, #65535
-.L1398:
-	ldr	r2, [r6, #16]
-	lsl	r5, r4, #1
-	ldrh	r3, [r7, r5]
-	ldrh	r2, [r2, r5]
-	cmp	r2, r3
-	beq	.L1397
-	mov	r1, r4
-	mov	r0, r9
-	bl	sftl_printk
-	ldr	r3, [r6, #16]
-	ldrh	r3, [r3, r5]
-	cmp	r3, r10
-	beq	.L1397
-	ldrh	r2, [r7, r5]
-	cmp	r2, r3
-	movhi	r8, #1
-.L1397:
-	add	r4, r4, #1
-	ldrh	r3, [r6, #20]
-	uxth	r4, r4
-	cmp	r3, r4
-	bhi	.L1398
-	ldr	r3, [r6, #2524]
-	cmp	r3, #0
-	beq	.L1399
-	ldr	r2, [r6, #8]
-	movw	r4, #43691
-	movt	r4, 43690
-	ldrh	r9, [r6, #236]
-	sub	r3, r3, r2
-	asr	r3, r3, #1
-	cmp	r9, #0
-	mul	r4, r4, r3
-	uxth	r4, r4
-	beq	.L1399
-.L1405:
-	movw	r3, #:lower16:.LC109
-	movw	fp, #:lower16:check_vpc_table
-	movt	r3, #:upper16:.LC109
-	movt	fp, #:upper16:check_vpc_table
-	str	r3, [sp]
-	mov	r7, #0
-	movw	r10, #65535
-	b	.L1401
-.L1400:
-	add	r5, r5, r4
-	ldr	r3, [r6, #8]
-	lsl	r5, r5, #1
-	ldrh	r4, [r3, r5]
-	cmp	r4, r10
-	beq	.L1399
-	add	r7, r7, #1
-	uxth	r3, r7
-	cmp	r9, r3
-	bls	.L1399
-.L1401:
-	ldr	r3, [r6, #16]
-	lsl	r5, r4, #1
-	ldrh	r2, [r3, r5]
-	cmp	r2, #0
-	beq	.L1400
-	ldrh	r3, [fp, r5]
-	mov	r1, r4
-	ldr	r0, [sp]
-	mov	r8, #1
-	bl	sftl_printk
-	b	.L1400
-.L1399:
-	cmp	r8, #0
-	beq	.L1390
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2383
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1431
-	bl	sftl_printk
-.L1390:
-	ldr	r3, [sp, #4]
-	ldr	r2, [sp, #12]
-	ldr	r3, [r3]
+	ldr	r3, [r6]
 	cmp	r2, r3
-	bne	.L1430
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1429:
-	ldr	r3, [r6, #2524]
-	cmp	r3, #0
-	beq	.L1390
-	ldr	r1, [r6, #8]
-	movw	r2, #43691
-	movt	r2, 43690
-	ldrh	r9, [r6, #236]
-	sub	r3, r3, r1
-	asr	r3, r3, #1
-	cmp	r9, #0
-	mul	r3, r2, r3
-	uxth	r4, r3
-	bne	.L1405
-	b	.L1390
-.L1430:
+	beq	.L964
 	bl	__stack_chk_fail
-.L1432:
+.L964:
+	add	sp, sp, #88
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L969:
 	.align	2
-.L1431:
-	.word	.LANCHOR1+444
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
+.L968:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
 	.fnend
-	.size	ftl_check_vpc, .-ftl_check_vpc
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
-	.global	ftl_scan_all_data
+	.global	FtlBbmTblFlush
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r9, #:lower16:__stack_chk_guard
-	movt	r9, #:upper16:__stack_chk_guard
-	movw	r0, #:lower16:.LC110
-	movw	r4, #:lower16:.LANCHOR0
-	.pad #32
-	sub	sp, sp, #32
-	ldr	r3, [r9]
-	movt	r0, #:upper16:.LC110
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r5, #0
+	ldr	r4, .L983
 	mov	r1, #0
-	movt	r4, #:upper16:.LANCHOR0
-	str	r3, [sp, #28]
-	bl	sftl_printk
-	ldr	r3, [r4, #2608]
-	cmp	r3, #0
-	beq	.L1433
-	movw	r8, #:lower16:.LC111
-	movw	r6, #:lower16:.LC112
-	ldr	r7, .L1446
-	movt	r8, #:upper16:.LC111
-	movt	r6, #:upper16:.LC112
+	ldr	r3, [r4, #3336]
+	add	r6, r4, #380
+	ldr	r0, [r4, #3304]
+	sub	r7, r6, #122
+	add	r8, r4, #3392
+	str	r3, [r4, #3468]
+	movw	r3, #314
+	ldrh	r2, [r4, r3]
+	str	r0, [r4, #3464]
+	bl	ftl_memset
+.L971:
+	ldrh	r3, [r7]
+	cmp	r5, r3
+	blt	.L972
+	ldr	r7, [r4, #3468]
+	mov	r2, #16
+	mov	r1, #255
+	ldr	r6, .L983+4
+	ldr	r10, .L983+8
 	mov	r5, #0
-	b	.L1440
-.L1435:
-	ldr	r3, [sp, #24]
-	cmn	r3, #1
-	beq	.L1437
-	ldr	lr, [r4, #3352]
-	mov	ip, #0
-	ldr	r10, [r4, #3384]
-	mov	r2, ip
-	mov	r1, #1
 	mov	r0, r7
+	mov	r8, r5
+	bl	ftl_memset
+	ldr	r3, .L983+12
+	sub	r9, r6, #48
+	strh	r3, [r7]	@ movhi
+	ldr	r3, [r4, #364]
+	str	r3, [r7, #4]
+	ldrh	r3, [r6]
+	strh	r3, [r7, #2]	@ movhi
+	ldrh	r3, [r6, #4]
+	strh	r3, [r7, #8]	@ movhi
+	ldrh	r3, [r6, #6]
+	strh	r3, [r7, #10]	@ movhi
+	ldr	r3, [r4, #232]
+	strh	r3, [r7, #12]	@ movhi
+	ldr	r3, [r4, #2608]
+	strh	r3, [r7, #14]	@ movhi
+.L973:
+	ldr	r3, [r4, #3304]
+	mov	fp, #0
+	ldrh	r2, [r6, #2]
+	ldrh	r1, [r6]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	fp, [r4, #3456]
 	str	r3, [r4, #3468]
-	str	r5, [r4, #3480]
-	str	lr, [r4, #3472]
-	str	r10, [r4, #3476]
-	str	ip, [r4, #3464]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3464]
-	cmn	r3, #1
-	cmpne	r3, #256
-	beq	.L1438
-	ldr	r3, [r10, #8]
-	cmp	r3, r5
-	beq	.L1437
-.L1438:
-	ldr	r2, [r4, #3472]
-	mov	r1, r5
-	ldr	ip, [r4, #3476]
-	mov	r0, r6
-	ldr	lr, [r2, #4]
-	ldr	r3, [ip]
-	str	lr, [sp, #16]
-	ldr	lr, [r2]
-	ldr	r2, [r4, #3468]
-	str	lr, [sp, #12]
-	ldr	lr, [ip, #12]
-	str	lr, [sp, #8]
-	ldr	lr, [ip, #8]
-	str	lr, [sp, #4]
-	ldr	ip, [ip, #4]
-	str	ip, [sp]
+	orr	r3, r2, r1, lsl #10
+	ldrh	r0, [r7, #10]
+	str	r3, [r4, #3460]
+	ldrh	r3, [r6, #4]
+	str	r0, [sp]
+	mov	r0, r10
 	bl	sftl_printk
-.L1437:
-	ldr	r3, [r4, #2608]
+	ldrh	r3, [r9]
+	ldrh	r2, [r6, #2]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	blt	.L974
+	ldr	r3, [r4, #364]
+	ldrh	r2, [r6]
+	ldr	r0, [r4, #3272]
+	add	r3, r3, #1
+	strh	fp, [r6, #2]	@ movhi
+	str	r3, [r4, #364]
+	str	r3, [r7, #4]
+	ldrh	r3, [r6, #4]
+	strh	r2, [r7, #8]	@ movhi
+	strh	r2, [r6, #4]	@ movhi
+	mov	r2, #1
+	strh	r3, [r6]	@ movhi
+	mov	r1, r2
+	lsl	r3, r3, #10
+	str	r3, [r4, #3460]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+.L974:
+	mov	r3, #1
+	ldr	r0, .L983+16
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldrh	r3, [r6, #2]
+	add	r3, r3, #1
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	bne	.L975
 	add	r5, r5, #1
-	cmp	r5, r3
-	bcs	.L1433
-.L1440:
-	mov	r2, #0
-	add	r1, sp, #24
-	mov	r0, r5
-	bl	log2phys
-	ubfx	r3, r5, #0, #11
-	cmp	r3, #0
-	bne	.L1435
-	ldr	r2, [sp, #24]
-	mov	r1, r5
-	mov	r0, r8
+	ldr	r1, [r4, #3460]
+	uxth	r5, r5
+	ldr	r0, .L983+20
 	bl	sftl_printk
-	b	.L1435
-.L1433:
-	ldr	r2, [sp, #28]
-	ldr	r3, [r9]
-	cmp	r2, r3
-	bne	.L1445
-	add	sp, sp, #32
+	cmp	r5, #3
+	bls	.L973
+	mov	r2, r5
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L983+24
+	bl	sftl_printk
+.L977:
+	b	.L977
+.L972:
+	ldrh	r2, [r8]
+	ldr	r3, [r4, #3464]
+	ldr	r1, [r6, #4]!
+	mul	r0, r2, r5
+	lsl	r2, r2, #2
+	add	r5, r5, #1
+	add	r0, r3, r0, lsl #2
+	bl	ftl_memcpy
+	b	.L971
+.L978:
+	mov	r8, #1
+	b	.L973
+.L975:
+	add	r8, r8, #1
+	cmp	r8, #1
+	ble	.L978
+	cmp	r3, #256
+	beq	.L973
+	mov	r0, #0
+	add	sp, sp, #12
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1445:
-	bl	__stack_chk_fail
-.L1447:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L984:
 	.align	2
-.L1446:
-	.word	.LANCHOR0+3464
+.L983:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+356
+	.word	.LC99
+	.word	-3887
+	.word	.LANCHOR0+3456
+	.word	.LC100
+	.word	.LC101
 	.fnend
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
-	.global	FtlGcScanTempBlk
+	.global	allocate_data_superblock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR2
-	movw	r2, #:lower16:__stack_chk_guard
-	movt	r3, #:upper16:.LANCHOR2
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	r2, #:upper16:__stack_chk_guard
-	ldrh	r10, [r3, #4]
-	.pad #68
-	sub	sp, sp, #68
-	mov	ip, r2
-	str	r3, [sp, #24]
-	str	r2, [sp, #28]
-	movw	r2, #65535
-	ldr	r3, [ip]
-	cmp	r10, r2
-	str	r0, [sp, #8]
-	str	r1, [sp, #20]
-	str	r3, [sp, #60]
-	beq	.L1477
-	cmp	r10, #0
-	beq	.L1450
-.L1449:
-	movw	fp, #:lower16:.LANCHOR0
-	movw	r3, #310
-	movt	fp, #:upper16:.LANCHOR0
-	ldr	r2, [sp, #20]
-	ldrh	r3, [fp, r3]
+	mov	r5, r0
+	ldr	fp, .L1022
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L1022+4
+.L986:
+	ldr	r3, .L1022+4
+	ldrh	r2, [fp]
+	ldrh	r3, [r3, #228]
+	add	r3, r3, r2
+	ldr	r2, .L1022+4
+	ldrh	r2, [r2, #244]
 	cmp	r3, r2
-	beq	.L1450
-.L1451:
-	ldr	r0, [sp, #8]
-	movw	r2, #65535
-	mov	r3, #0
-	ldrh	r1, [r0]
-	strb	r3, [r0, #8]
-	cmp	r1, r2
-	beq	.L1452
-	movw	fp, #:lower16:.LANCHOR0
-	str	r3, [sp, #16]
-	movt	fp, #:upper16:.LANCHOR0
-.L1475:
-	ldrh	r2, [fp, #36]
-	cmp	r2, #0
-	beq	.L1453
-.L1498:
-	sub	r6, r2, #1
-	ldr	r2, [fp, #3232]
-	ldr	r3, .L1499
+	ble	.L987
+	mov	r2, #2656
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+.L987:
+	ldr	r3, .L1022+16
+	cmp	r5, r3
+	movne	r1, #0
+	bne	.L988
+	ldrh	r3, [r4, #228]
+	ldr	r1, [r4, #3168]
+	mul	r2, r1, r3
+	lsr	r1, r3, #1
+	add	r1, r1, #1
+	add	r1, r1, r2, lsr #2
+	uxth	r1, r1
+	cmp	r1, #0
+	subne	r1, r1, #1
+	uxthne	r1, r1
+.L988:
+	ldr	r0, .L1022+20
+	bl	List_pop_index_node
+	ldrh	r3, [r4, #228]
+	mov	r6, r0
+	uxth	r8, r0
+	cmp	r3, #0
+	bne	.L989
+	movw	r2, #2665
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+.L989:
+	ldrh	r3, [r4, #228]
+	sub	r3, r3, #1
+	strh	r3, [r4, #228]	@ movhi
+	ldrh	r3, [r4, #244]
+	cmp	r3, r8
+	bls	.L986
 	uxth	r6, r6
-	ldr	r0, [fp, #3336]
-	mov	r4, #0
-	str	r2, [sp, #4]
-	add	r6, r6, #8
-	ldr	r2, [sp, #8]
-	sub	r3, r3, #2
-	ldrh	r9, [r3, #2]
-	movw	r7, #65535
-	ldrh	r3, [r3]
-	ldr	r8, [fp, #3236]
-	add	r5, r2, #14
-	add	r6, r2, r6, lsl #1
-	str	fp, [sp, #12]
-	mov	lr, r3
-.L1455:
-	ldrh	r1, [r5, #2]!
-	cmp	r1, r7
-	beq	.L1454
-	mul	r3, lr, r4
-	add	r2, r4, r4, lsl #2
-	add	fp, r4, #1
-	orr	r1, r10, r1, lsl #10
-	mul	ip, r9, r4
-	add	r2, r0, r2, lsl #2
-	uxth	r4, fp
-	str	r1, [r2, #4]
+	ldr	r3, [r4, #76]
+	lsl	r6, r6, #1
+	ldrh	r7, [r3, r6]
+	cmp	r7, #0
+	bne	.L986
+	strh	r8, [r5]	@ movhi
+	mov	r0, r5
+	bl	make_superblock
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	add	fp, r3, #3
-	add	r1, ip, #3
-	movlt	r3, fp
-	cmp	ip, #0
-	bic	r3, r3, #3
-	movlt	ip, r1
-	ldr	r1, [sp, #4]
-	bic	ip, ip, #3
-	add	ip, r8, ip
-	add	r3, r1, r3
-	str	ip, [r2, #12]
-	str	r3, [r2, #8]
-.L1454:
-	cmp	r5, r6
-	bne	.L1455
-	mov	r2, #0
-	mov	r1, r4
-	ldr	fp, [sp, #12]
-	bl	FlashReadPages
-	cmp	r4, #0
-	beq	.L1457
-	sub	r4, r4, #1
-	mov	r5, #0
-	uxth	r4, r4
-	movw	r7, #65535
-	add	r4, r4, #1
-	add	r4, r4, r4, lsl #2
-	lsl	r4, r4, #2
-.L1471:
-	ldr	r3, [fp, #3336]
-	ldr	r6, [r3, r5]
-	add	r3, r3, r5
-	ldr	r8, [r3, #4]
-	ldr	r9, [r3, #12]
-	cmp	r6, #0
-	bne	.L1459
-	ldrh	r3, [r9]
-	cmp	r3, r7
-	beq	.L1460
-	ldr	r0, [r9, #8]
-	ldr	r3, [fp, #2608]
-	cmp	r0, r3
-	bhi	.L1460
-	mov	r2, r6
-	add	r1, sp, #36
-	bl	log2phys
-	ldr	r0, [r9, #12]
-	ldr	r3, [sp, #36]
-	sub	r2, r0, r3
-	cmn	r3, #1
-	clz	r2, r2
-	lsr	r2, r2, #5
-	moveq	r2, #0
-	cmp	r2, #0
-	beq	.L1463
-	ldr	ip, [fp, #3368]
-	mov	r2, r6
-	ldr	r3, [fp, #3388]
-	mov	r1, #1
-	str	r0, [sp, #44]
-	add	r0, sp, #40
-	str	ip, [sp, #48]
-	str	r3, [sp, #52]
-	bl	FlashReadPages
-	ldr	r3, .L1499+4
-	ldrh	ip, [r3]
-	lsls	ip, ip, #7
-	beq	.L1493
-	ldr	r2, [fp, #3336]
-	ldr	r3, [sp, #48]
-	add	r2, r2, r5
-	ldr	r1, [r2, #8]
-	ldr	r2, [r3]
-	ldr	r0, [r1]
-	cmp	r0, r2
-	bne	.L1465
-	mov	r2, r6
-	b	.L1467
-.L1468:
-	ldr	lr, [r1, #4]!
-	ldr	r0, [r3, #4]!
-	cmp	lr, r0
-	bne	.L1465
-.L1467:
-	add	r2, r2, #1
-	cmp	r2, ip
-	bne	.L1468
-.L1493:
-	ldr	r0, [r9, #12]
-.L1463:
-	ldr	r2, [r9, #8]
-	mov	r1, r8
-	bl	FtlGcUpdatePage
-.L1469:
-	add	r5, r5, #20
-	cmp	r4, r5
-	bne	.L1471
-.L1457:
-	ldr	r3, [sp, #16]
-	ldr	r0, [sp, #20]
-	add	r3, r3, #1
-	mov	r1, r3
-	str	r3, [sp, #16]
-	cmp	r0, r1
-	add	r3, r10, #1
-	uxth	r10, r3
-	bhi	.L1473
-	ldr	r0, [sp, #24]
-	movw	r2, #65535
-	ldrh	r3, [r0, #4]
+	bne	.L991
+	ldr	r3, [r4, #76]
+	mvn	r2, #0
+	mov	r0, r8
+	strh	r2, [r3, r6]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldrh	r2, [fp]
+	ldrh	r3, [r4, #228]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	beq	.L1473
-	movw	r2, #310
-	add	r3, r3, r1
-	ldrh	r2, [fp, r2]
-	strh	r3, [r0, #4]	@ movhi
-	cmp	r2, r10
-	bhi	.L1474
-.L1452:
-	ldr	r3, [sp, #8]
-	mov	r2, #0
-	ldr	ip, [sp, #24]
-	mov	r1, r10
-	strh	r10, [r3, #2]	@ movhi
-	mov	r0, r3
-	strb	r2, [r3, #6]
-	mvn	r3, #0
-	strh	r3, [ip, #4]	@ movhi
-	bl	ftl_sb_update_avl_pages
-.L1474:
-	ldr	r3, [sp, #28]
-	mvn	r0, #0
-	ldr	r2, [sp, #60]
-	ldr	r3, [r3]
+	ble	.L986
+	movw	r2, #2679
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+	b	.L986
+.L991:
+	ldrh	r2, [fp]
+	ldrh	r3, [r4, #228]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #244]
+	cmp	r3, r2
+	ble	.L993
+	movw	r2, #2682
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+.L993:
+	ldr	r1, [r4, #3272]
+	mov	r9, #20
+	ldrh	r2, [r4, #236]
+	add	r10, r5, #16
+	mov	r0, r10
+	mov	ip, #0
+	mov	r3, r1
+	mla	r2, r9, r2, r1
+	str	r2, [sp, #4]
+.L994:
+	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L1497
-	add	sp, sp, #68
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1450:
-	bl	FtlGcPageVarInit
-	b	.L1451
-.L1459:
-	mov	r1, r8
-	ldr	r0, [r9, #12]
-	mvn	r2, #0
-	bl	FtlGcUpdatePage
-	b	.L1469
-.L1465:
-	ldr	r4, [sp, #8]
-	movw	r0, #:lower16:.LC113
-	ldr	r2, [sp, #44]
-	movt	r0, #:upper16:.LC113
-	ldrh	r1, [r4]
+	bne	.L996
+	cmp	r7, #0
+	bne	.L997
+	movw	r2, #2693
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
 	bl	sftl_printk
-.L1494:
-	ldrh	r3, [r4]
+.L997:
+	ldrh	r3, [r4, #176]
+	cmp	r3, r8
+	bne	.L998
+	movw	r2, #2695
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+.L998:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	ldr	r2, [r4, #2540]
+	ldr	r9, .L1022+24
+	cmp	r3, #0
+	ldrh	r3, [r2, r6]
+	bne	.L999
+	cmp	r3, #0
+	mov	r0, r8
+	ldrhne	r1, [r9]
+	moveq	r3, #2
+	addne	r3, r3, r1
 	mov	r1, #0
-	ldr	r2, [fp, #16]
-	lsl	r3, r3, #1
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r0, [r4]
-	bl	INSERT_FREE_LIST
-	mvn	r3, #0
-	strh	r3, [r4]	@ movhi
-	strh	r3, [fp, #184]	@ movhi
-	bl	FtlGcPageVarInit
-	ldr	r0, [sp, #8]
-	movw	r2, #65535
-	mov	r3, #0
-	mov	r10, r3
-	ldrh	r1, [r0]
-	strb	r3, [r0, #8]
-	cmp	r1, r2
-	beq	.L1452
-	ldrh	r2, [fp, #36]
-	cmp	r2, #0
-	bne	.L1498
-.L1453:
-	mov	r1, r2
-	ldr	r0, [fp, #3336]
-	bl	FlashReadPages
-	b	.L1457
-.L1460:
-	ldr	r4, [sp, #8]
-	b	.L1494
-.L1473:
-	ldr	r3, .L1499+8
-	ldrh	r3, [r3]
-	cmp	r3, r10
-	bhi	.L1475
-	b	.L1452
-.L1477:
-	mov	r10, #0
-	b	.L1449
-.L1497:
-	bl	__stack_chk_fail
-.L1500:
-	.align	2
-.L1499:
-	.word	.LANCHOR0+320
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+310
-	.fnend
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
-	.align	2
-	.global	FtlReadRefresh
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 96
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r6, #:lower16:__stack_chk_guard
-	movt	r6, #:upper16:__stack_chk_guard
-	.pad #100
-	sub	sp, sp, #100
-	ldr	r5, [r4, #2776]
-	ldr	r3, [r6]
-	cmp	r5, #0
-	str	r3, [sp, #92]
-	beq	.L1502
-	ldr	r3, [r4, #2780]
-	ldr	r2, [r4, #2608]
+	strh	r3, [r2, r6]	@ movhi
+	ldr	r3, [r4, #2600]
+	add	r3, r3, #1
+	str	r3, [r4, #2600]
+	bl	ftl_set_blk_mode
+.L1002:
+	ldr	r3, [r4, #2540]
+	ldr	r2, [r4, #2616]
+	ldr	r0, [r4, #2600]
+	ldrh	r3, [r3, r6]
+	ldrh	r1, [r4, #244]
 	cmp	r3, r2
-	movcc	r5, #2048
-	bcs	.L1523
-.L1506:
-	mov	r0, r3
-	add	r1, sp, #4
-	mov	r2, #0
-	bl	log2phys
-	ldr	r1, [sp, #4]
-	ldr	r3, [r4, #2780]
-	cmn	r1, #1
+	ldrh	r2, [r9]
+	strhi	r3, [r4, #2616]
+	ldr	r3, [r4, #2604]
+	mla	r0, r0, r2, r3
+	bl	__aeabi_uidiv
+	ldr	r2, [r4, #3352]
+	ldr	r1, [r4, #3272]
+	str	r0, [r4, #2608]
+	ldr	r3, [r2, #16]
+	ldr	r0, .L1022+28
 	add	r3, r3, #1
-	str	r3, [r4, #2780]
-	bne	.L1524
-	subs	r5, r5, #1
-	beq	.L1508
-	ldr	r2, [r4, #2608]
-	cmp	r2, r3
-	bhi	.L1506
-.L1508:
-	mvn	r0, #0
-	b	.L1501
-.L1502:
-	ldr	r9, [r4, #2612]
-	movw	r7, #10000
-	ldr	r1, [r4, #2668]
-	ldr	r8, [r4, #2772]
-	add	r3, r9, #1048576
-	cmp	r1, r7
-	movls	r7, #63
-	movhi	r7, #31
-	cmp	r8, r3
-	bls	.L1512
-.L1514:
-	ldr	r3, .L1526
-	ldrh	r2, [r3, #28]
-.L1513:
-	mov	r3, #0
-	mov	r1, #1
-	mov	r0, r3
-	str	r2, [r4, #2796]
-	str	r9, [r4, #2772]
-	str	r1, [r4, #2776]
-	str	r3, [r4, #2780]
-.L1501:
-	ldr	r2, [sp, #92]
-	ldr	r3, [r6]
+	str	r3, [r2, #16]
+	mov	r2, #20
+	mla	r2, r2, r7, r1
+	add	r3, r1, #4
+	add	r2, r2, #24
+.L1004:
+	add	r3, r3, #20
 	cmp	r2, r3
-	bne	.L1525
-	add	sp, sp, #100
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1512:
-	ldr	r3, [r4, #2608]
-	lsr	r1, r1, #10
-	mov	r0, #1000
-	add	r1, r1, #1
-	mul	r0, r0, r3
-	bl	__aeabi_uidiv
-	add	r0, r0, r8
-	cmp	r9, r0
-	bhi	.L1514
-	ldr	r3, .L1526
-	ldrh	r2, [r3, #28]
-	ands	r1, r7, r2
-	movne	r0, r5
-	bne	.L1501
-	ldr	r3, [r4, #2796]
-	cmp	r2, r3
-	moveq	r0, r1
-	bne	.L1513
-	b	.L1501
-.L1523:
-	ldr	r2, [r4, #2612]
-	mov	r3, #0
-	str	r3, [r4, #2776]
-	mov	r0, r3
-	str	r3, [r4, #2780]
-	str	r2, [r4, #2772]
-	b	.L1501
-.L1524:
-	ldr	lr, [r4, #3376]
-	mov	ip, #0
-	add	r0, sp, #96
-	mov	r2, ip
-	str	ip, [r0, #-88]!
-	add	ip, sp, #28
+	bne	.L1005
+	ldrb	r1, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r7
+	ldr	r0, [r4, #3272]
+	mov	r9, #0
+	bl	FlashEraseBlocks
+	mov	r3, r9
+	mov	r1, #20
+.L1006:
+	uxth	r2, r9
+	cmp	r7, r2
+	bhi	.L1008
+	cmp	r3, #0
+	ble	.L1009
+	mov	r0, r8
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L1009:
+	ldrb	r2, [r5, #7]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1010
+	ldr	r3, [r4, #76]
+	mvn	r2, #0
+	strh	r2, [r3, r6]	@ movhi
+	b	.L986
+.L996:
+	str	ip, [r3, #8]
+	movw	lr, #65535
+	str	ip, [r3, #12]
+	add	r3, r3, #20
+	ldrh	r2, [r0], #2
+	cmp	r2, lr
+	mlane	lr, r9, r7, r1
+	lslne	r2, r2, #10
+	addne	r7, r7, #1
+	uxthne	r7, r7
+	strne	r2, [lr, #4]
+	b	.L994
+.L999:
+	add	r3, r3, #1
+	mov	r0, r8
+	strh	r3, [r2, r6]	@ movhi
+	ldr	r3, [r4, #2604]
+	add	r3, r3, #1
+	str	r3, [r4, #2604]
+	bl	ftl_set_blk_mode.part.6
+	b	.L1002
+.L1005:
+	ldr	r1, [r3, #-20]
+	and	r1, r1, r0
+	str	r1, [r3, #-20]
+	b	.L1004
+.L1008:
+	mul	r2, r1, r9
+	ldr	r0, [r4, #3272]
+	add	ip, r0, r2
+	ldr	r2, [r0, r2]
+	cmn	r2, #1
+	bne	.L1007
+	ldr	r0, [ip, #4]
+	add	r3, r3, #1
 	str	r1, [sp, #12]
-	mov	r1, #1
-	str	r3, [sp, #24]
-	str	lr, [sp, #16]
-	str	ip, [sp, #20]
-	bl	FlashReadPages
-	ldr	r3, [sp, #8]
-	cmp	r3, #256
-	bne	.L1508
-	ldr	r0, [sp, #4]
-	movw	r3, #306
-	ldrh	r1, [r4, r3]
+	str	r2, [sp, #8]
 	ubfx	r0, r0, #10, #16
-	bl	__aeabi_uidivmod
-	ldr	r3, .L1526+4
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	bl	FtlGcRefreshBlock
-	b	.L1508
-.L1525:
-	bl	__stack_chk_fail
-.L1527:
+	str	r3, [sp, #4]
+	bl	FtlBbmMapBadBlock
+	ldr	r2, [sp, #8]
+	ldr	r1, [sp, #12]
+	ldr	r3, [sp, #4]
+	strh	r2, [r10]	@ movhi
+	ldrb	r2, [r5, #7]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	strb	r2, [r5, #7]
+.L1007:
+	add	r9, r9, #1
+	add	r10, r10, #2
+	b	.L1006
+.L1010:
+	movw	r3, #306
+	ldrh	r3, [r4, r3]
+	strh	r8, [r5]	@ movhi
+	smulbb	r3, r3, r2
+	mov	r2, #0
+	strh	r2, [r5, #2]	@ movhi
+	strb	r2, [r5, #6]
+	ldr	r2, [r4, #2592]
+	uxth	r3, r3
+	ldr	r1, [r4, #76]
+	strh	r3, [r5, #4]	@ movhi
+	str	r2, [r5, #12]
+	add	r2, r2, #1
+	str	r2, [r4, #2592]
+	ldrh	r2, [r5]
+	lsl	r2, r2, #1
+	strh	r3, [r1, r2]	@ movhi
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	beq	.L1011
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1012
+.L1011:
+	movw	r2, #2748
+	ldr	r1, .L1022+8
+	ldr	r0, .L1022+12
+	bl	sftl_printk
+.L1012:
+	mov	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1023:
 	.align	2
-.L1526:
-	.word	.LANCHOR0+2472
-	.word	.LANCHOR0+264
+.L1022:
+	.word	.LANCHOR0+2532
+	.word	.LANCHOR0
+	.word	.LANCHOR1+271
+	.word	.LC8
+	.word	.LANCHOR0+128
+	.word	.LANCHOR0+2536
+	.word	.LANCHOR0+296
+	.word	-1024
 	.fnend
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	2
-	.global	FtlVendorPartWrite
+	.global	FtlGcFreeBadSuperBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlVendorPartWrite, %function
-FtlVendorPartWrite:
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 104
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	movw	r3, #:lower16:__stack_chk_guard
-	movt	r6, #:upper16:.LANCHOR0
-	mov	ip, r3
-	add	r3, r6, #304
-	mov	r5, r1
-	ldrh	r1, [r3]
-	mov	r3, ip
-	.pad #108
-	sub	sp, sp, #108
-	movt	r3, #:upper16:__stack_chk_guard
-	mov	r8, r0
-	str	r3, [sp, #12]
-	add	r0, r0, r5
-	ldr	r3, [r3]
-	cmp	r0, r1
-	str	r3, [sp, #100]
-	mvnhi	r3, #0
-	strhi	r3, [sp]
-	bls	.L1541
-.L1528:
-	ldr	r3, [sp, #12]
-	ldr	r2, [sp, #100]
-	ldr	r0, [sp]
-	ldr	r3, [r3]
+	.pad #12
+	movw	r3, #3210
+	ldr	r6, .L1037
+	ldrh	r3, [r6, r3]
+	cmp	r3, #0
+	beq	.L1025
+	ldr	fp, .L1037+4
+	mov	r7, #0
+	str	r0, [sp, #4]
+	add	r10, fp, #2
+.L1026:
+	ldrh	r2, [r6, #236]
+	uxth	r3, r7
 	cmp	r2, r3
-	bne	.L1542
-	add	sp, sp, #108
+	bhi	.L1032
+	bl	FtlGcReFreshBadBlk
+.L1025:
+	mov	r0, #0
+	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1541:
-	cmp	r5, #0
-	beq	.L1537
-	add	r3, r6, #316
-	mov	fp, r2
-	ldrh	r10, [r3]
-	mov	r3, #0
-	str	r3, [sp]
-	lsr	r10, r8, r10
-	lsl	r9, r10, #2
-	b	.L1534
-.L1543:
-	ldr	lr, [r6, #3360]
-	mov	r2, #1
-	str	r0, [sp, #20]
-	add	ip, sp, #36
-	mov	r1, r2
-	add	r0, sp, #16
-	str	lr, [sp, #24]
-	str	ip, [sp, #28]
-	bl	FlashReadPages
-	ldr	r3, [sp, #4]
-.L1532:
-	ldr	r0, [r6, #3360]
-	lsl	r2, r4, #9
-	mov	r1, fp
-	add	fp, fp, r2
-	add	r8, r8, r7
-	add	r9, r9, #4
-	add	r0, r0, r3, lsl #9
-	bl	memcpy
-	mov	r1, r10
-	ldr	r2, [r6, #3360]
-	ldr	r0, .L1544
-	add	r10, r10, #1
-	bl	FtlMapWritePage
-	cmn	r0, #1
-	ldr	r3, [sp]
-	mvneq	r3, #0
-	subs	r5, r5, r7
-	str	r3, [sp]
-	beq	.L1528
-.L1534:
-	ldr	r3, .L1544+4
-	mov	r0, r8
-	ldrh	r2, [r3]
-	ldr	r3, [r6, #3412]
-	mov	r1, r2
-	str	r2, [sp, #8]
-	ldr	r3, [r3, r9]
-	str	r3, [sp, #4]
-	bl	__aeabi_uidivmod
-	ldr	r2, [sp, #8]
-	mov	r3, r1
-	ldr	r0, [sp, #4]
-	str	r3, [sp, #4]
-	sub	r4, r2, r1
+.L1032:
+	uxtah	r3, r6, r7
+	ldr	r1, [sp, #4]
+	mov	r8, #0
+	ldrb	r0, [r3, #264]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r9, r0
+.L1027:
+	ldrh	r3, [fp]
+	uxth	r4, r8
+	cmp	r3, r4
+	addls	r7, r7, #1
+	bls	.L1026
+.L1031:
+	uxth	r5, r8
+	lsl	r3, r5, #1
+	ldrh	r3, [r10, r3]
+	cmp	r3, r9
+	bne	.L1028
+	mov	r1, r9
+	ldr	r0, .L1037+8
+	bl	sftl_printk
+	mov	r0, r9
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	r1, [fp]
+	add	r3, r10, r5, lsl #1
+.L1029:
+	cmp	r4, r1
+	bcc	.L1030
+	sub	r1, r1, #1
+	strh	r1, [fp]	@ movhi
+.L1028:
+	add	r8, r8, #1
+	b	.L1027
+.L1030:
+	ldrh	r0, [r3, #2]!
+	add	r4, r4, #1
 	uxth	r4, r4
-	mov	r1, r0
-	cmp	r4, r5
-	mov	r7, r4
-	uxthhi	r4, r5
-	movhi	r7, r4
-	cmp	r0, #0
-	cmpne	r4, r2
-	movne	r1, #1
-	moveq	r1, #0
-	bne	.L1543
-	ldr	r3, .L1544+8
-	ldr	r0, [r6, #3360]
-	ldrh	r2, [r3]
-	bl	memset
-	ldr	r3, [sp, #4]
-	b	.L1532
-.L1537:
-	str	r5, [sp]
-	b	.L1528
-.L1542:
-	bl	__stack_chk_fail
-.L1545:
+	strh	r0, [r3, #-2]	@ movhi
+	b	.L1029
+.L1038:
 	.align	2
-.L1544:
-	.word	.LANCHOR0+3488
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+318
+.L1037:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3210
+	.word	.LC102
 	.fnend
-	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
+	.global	update_vpc_list
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_save_ext_data.part.17, %function
-Ftl_save_ext_data.part.17:
+	.type	update_vpc_list, %function
+update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
-	push	{r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	movt	r3, #:upper16:.LANCHOR0
-	mov	ip, #83
-	movt	ip, 20480
-	add	r2, r3, #2688
-	ldr	lr, [r3, #2636]
-	add	r2, r2, #8
-	ldr	r6, [r3, #2632]
-	mov	r1, #1
-	ldr	r5, [r3, #2620]
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	lsl	r3, r0, #1
+	ldr	r4, .L1052
+	ldr	r2, [r4, #76]
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L1040
+	ldrh	r3, [r4, #226]
+	mov	r5, r0
+	cmp	r3, r0
+	mvneq	r3, #0
+	strheq	r3, [r4, #226]	@ movhi
+	ldrh	r3, [r4, #224]
+	cmp	r3, r0
+	mvneq	r3, #0
+	strheq	r3, [r4, #224]	@ movhi
+	ldrh	r3, [r4, #176]
+	cmp	r3, r0
+	mvneq	r3, #0
+	strheq	r3, [r4, #176]	@ movhi
+	beq	.L1044
+	ldrh	r3, [r4, #28]
+	cmp	r3, r0
+	beq	.L1049
+	ldrh	r3, [r4, #80]
+	cmp	r3, r0
+	beq	.L1049
+	ldrh	r3, [r4, #128]
+	cmp	r3, r0
+	beq	.L1049
+.L1044:
+	mov	r1, r5
+	ldr	r0, .L1052+4
+	bl	List_remove_node
+	movw	r3, #2532
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L1046
+	movw	r2, #2824
+	ldr	r1, .L1052+8
+	ldr	r0, .L1052+12
+	bl	sftl_printk
+.L1046:
+	movw	r6, #2532
+	mov	r0, r5
+	ldrh	r3, [r4, r6]
+	sub	r3, r3, #1
+	strh	r3, [r4, r6]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r5
+	bl	FtlGcFreeBadSuperBlk
+	ldrh	r2, [r4, r6]
+	ldrh	r3, [r4, #228]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #244]
+	cmp	r3, r2
+	ble	.L1050
+	movw	r2, #2827
+	ldr	r1, .L1052+8
+	ldr	r0, .L1052+12
+	bl	sftl_printk
+.L1050:
+	mov	r0, #1
+	pop	{r4, r5, r6, pc}
+.L1040:
+	bl	List_update_data_list
+.L1049:
 	mov	r0, #0
-	str	ip, [r3, #2700]
-	ldr	r4, [r3, #2612]
-	str	lr, [r3, #2784]
-	ldr	ip, [r3, #2656]
-	ldr	lr, [r3, #2628]
-	ldr	r7, [r3, #2640]
-	str	r6, [r3, #2704]
-	str	r5, [r3, #2708]
-	ldr	r6, [r3, #2664]
-	ldr	r5, [r3, #2616]
-	str	r4, [r3, #2712]
-	str	lr, [r3, #2716]
-	ldr	r4, [r3, #2624]
-	ldr	lr, [r3, #2668]
-	str	ip, [r3, #2724]
-	ldr	ip, [r3, #2672]
-	str	r7, [r3, #2788]
-	str	r6, [r3, #2728]
-	str	r5, [r3, #2732]
-	str	r4, [r3, #2736]
-	str	lr, [r3, #2740]
-	str	ip, [r3, #2744]
-	pop	{r4, r5, r6, r7, lr}
-	b	FtlVendorPartWrite
+	pop	{r4, r5, r6, pc}
+.L1053:
+	.align	2
+.L1052:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2524
+	.word	.LANCHOR1+296
+	.word	.LC8
 	.fnend
-	.size	Ftl_save_ext_data.part.17, .-Ftl_save_ext_data.part.17
+	.size	update_vpc_list, .-update_vpc_list
 	.align	2
-	.global	Ftl_save_ext_data
+	.global	decrement_vpc_count
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_save_ext_data, %function
-Ftl_save_ext_data:
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movw	r2, #19539
-	movt	r3, #:upper16:.LANCHOR0
-	movt	r2, 18004
-	ldr	r3, [r3, #2696]
-	cmp	r3, r2
-	bxne	lr
-	b	Ftl_save_ext_data.part.17
+	movw	r3, #65535
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	cmp	r0, r3
+	mov	r6, r0
+	ldr	r4, .L1067
+	beq	.L1055
+	ldr	r3, [r4, #76]
+	lsl	r5, r0, #1
+	ldrh	r2, [r3, r5]
+	cmp	r2, #0
+	subne	r2, r2, #1
+	strhne	r2, [r3, r5]	@ movhi
+	bne	.L1055
+	mov	r1, r0
+	ldr	r0, .L1067+4
+	bl	sftl_printk
+	ldr	r3, [r4, #76]
+	ldrh	r5, [r3, r5]
+	cmp	r5, #0
+	beq	.L1057
+.L1065:
+	mov	r5, #0
+.L1054:
+	mov	r0, r5
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1057:
+	movw	r2, #2842
+.L1066:
+	ldr	r1, .L1067+8
+	ldr	r0, .L1067+12
+	bl	sftl_printk
+	b	.L1054
+.L1055:
+	movw	r7, #3442
+	movw	r3, #65535
+	ldrh	r0, [r4, r7]
+	cmp	r0, r3
+	strheq	r6, [r4, r7]	@ movhi
+	beq	.L1065
+.L1059:
+	cmp	r6, r0
+	beq	.L1065
+	bl	update_vpc_list
+	ldr	r2, [r4, #2520]
+	adds	r5, r0, #0
+	ldr	r3, [r4, #2524]
+	movne	r5, #1
+	ldr	r1, [r4, #76]
+	strh	r6, [r4, r7]	@ movhi
+	sub	r3, r3, r2
+	asr	r2, r3, #1
+	ldr	r3, .L1067+16
+	mul	r3, r3, r2
+	uxth	r2, r3
+	uxth	r3, r3
+	lsl	r2, r2, #1
+	cmp	r3, r6
+	ldrh	r2, [r1, r2]
+	clz	r2, r2
+	lsr	r2, r2, #5
+	moveq	r2, #0
+	cmp	r2, #0
+	beq	.L1054
+	movw	r2, #2858
+	b	.L1066
+.L1068:
+	.align	2
+.L1067:
+	.word	.LANCHOR0
+	.word	.LC103
+	.word	.LANCHOR1+312
+	.word	.LC8
+	.word	-1431655765
 	.fnend
-	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
-	.global	FtlEctTblFlush
+	.global	FtlSuperblockPowerLostFix
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlEctTblFlush, %function
-FtlEctTblFlush:
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r1, #3532
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r3, [r4, r1]
-	cmp	r3, #31
-	addls	r3, r3, #1
-	movls	r2, #1
-	strhls	r3, [r4, r1]	@ movhi
-	movhi	r2, #32
-	ldr	r3, [r4, #3396]
-	cmp	r0, #0
-	ldrne	r1, [r3, #16]
-	bne	.L1553
-	ldr	r0, [r3, #20]
-	ldr	r1, [r3, #16]
-	add	r2, r2, r0
-	cmp	r1, r2
-	bcc	.L1554
-.L1553:
-	movw	r2, #17221
-	ldr	ip, .L1559
-	movt	r2, 16980
-	str	r1, [r3, #20]
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r7, .L1084
+	mov	r8, #0
+	movw	r2, #61589
+	mov	r4, r0
+	ldr	r5, .L1084+4
+	ldr	r3, [r7]
+	ldr	r6, [r5, #3336]
+	str	r3, [sp, #20]
+	mvn	r3, #0
+	str	r3, [sp, #16]
+	ldr	r3, [r5, #3304]
+	str	r6, [sp, #12]
+	str	r3, [sp, #8]
+	mvn	r3, #2
+	str	r3, [r6, #8]
+	mvn	r3, #1
+	str	r3, [r6, #12]
+	ldrh	r3, [r0]
+	strh	r8, [r6]	@ movhi
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r5, #3304]
 	str	r2, [r3]
+	ldr	r2, .L1084+8
+	ldr	r3, [r5, #3304]
+	str	r2, [r3, #4]
+	ldrh	r3, [r0, #4]
+	tst	r3, #1
+	moveq	r9, #6
+	movne	r9, #7
+.L1075:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L1071
+.L1072:
+	ldrh	r3, [r4]
+	ldr	r1, [r5, #76]
+	ldrh	r0, [r4, #4]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	movw	r3, #306
+	ldrh	r3, [r5, r3]
+	ldr	r2, [sp, #20]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1076
+	bl	__stack_chk_fail
+.L1071:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	cmn	r0, #1
+	str	r0, [sp, #4]
+	beq	.L1072
+	ldr	r3, [r5, #2596]
+	mov	r1, #1
+	mov	r0, sp
+	str	r3, [r6, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, r8
+	str	r3, [r5, #2596]
+	mov	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	subs	r9, r9, #1
+	bne	.L1075
+	b	.L1072
+.L1076:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1085:
+	.align	2
+.L1084:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	305419896
+	.fnend
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	FtlMakeBbt
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r9, #0
+	ldr	r7, .L1107
+	bl	FtlBbtMemInit
+	sub	r8, r7, #384
+	sub	r10, r7, #18
+	sub	r4, r7, #28
+	mov	r5, r8
+	bl	FtlLoadFactoryBbt
+.L1087:
+	ldr	r3, .L1107+4
+	ldrh	r3, [r3]
+	cmp	r9, r3
+	bcc	.L1093
+	ldr	r7, .L1107+8
+	mov	r6, #0
+.L1094:
+	ldrh	r3, [r7]
+	uxth	r0, r6
+	add	r6, r6, #1
+	cmp	r3, r0
+	bhi	.L1095
+	ldrh	r6, [r4, #12]
+	movw	r7, #65535
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1096:
+	ldrh	r3, [r4, #12]
+	sub	r3, r3, #48
+	cmp	r6, r3
+	ble	.L1100
+	mov	r0, r6
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1097
+	mov	r0, r6
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1098
+	mov	r0, r6
+	bl	FtlBbmMapBadBlock
+.L1097:
+	sub	r6, r6, #1
+	uxth	r6, r6
+	b	.L1096
+.L1093:
+	ldr	r3, [r8, #3336]
+	movw	r2, #65535
+	ldr	r0, [r8, #3304]
+	ldr	fp, .L1107+12
+	str	r3, [sp, #4]
+	str	r3, [r8, #3468]
+	ldrh	r3, [r10, #2]!
+	str	r0, [r8, #3464]
+	cmp	r3, r2
+	beq	.L1088
+	ldrh	r6, [fp]
+	mov	r2, #1
+	mov	r1, r2
+	ldr	r0, .L1107+16
+	mla	r6, r9, r6, r3
+	lsl	r3, r6, #10
+	str	r3, [r8, #3460]
+	bl	FlashReadPages
+	ldrh	r2, [fp]
+	ldr	r1, [r8, #3464]
+	ldr	r0, [r7]
+	add	r2, r2, #7
+	asr	r2, r2, #3
+	bl	ftl_memcpy
+.L1089:
+	uxth	r0, r6
+	add	r9, r9, #1
+	add	r7, r7, #4
+	bl	FtlBbmMapBadBlock
+	b	.L1087
+.L1088:
+	mov	r1, r9
+	bl	FlashGetBadBlockList
+	ldr	r1, [r7]
+	ldr	r0, [r8, #3464]
+	bl	FtlBbt2Bitmap
+	ldrh	r3, [fp]
+.L1106:
+	sub	r3, r3, #1
+	uxth	r3, r3
+	str	r3, [sp]
+.L1090:
+	ldr	r3, [sp]
+	ldrh	r0, [fp]
+	smlabb	r0, r0, r9, r3
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1091
+	ldrh	r3, [sp]
+	mov	r2, #16
 	mov	r1, #0
-	ldr	r3, [r4, #3396]
-	mov	r0, #64
-	ldrh	ip, [ip]
-	ldr	lr, [r3, #8]
+	ldr	r0, [r5, #3336]
+	strh	r3, [r10]	@ movhi
+	bl	ftl_memset
+	mov	r2, #4096
+	mov	r1, #0
+	ldr	r0, [r5, #3304]
+	bl	ftl_memset
+	ldr	r3, [sp, #4]
+	movw	r2, 61664	@ movhi
+	strh	r2, [r3]	@ movhi
+	mov	r3, #0
+	ldr	r2, [sp, #4]
+	ldrh	r6, [fp]
+	str	r3, [r2, #4]
+	ldrh	r3, [r10]
+	strh	r3, [r2, #2]	@ movhi
+	ldrh	r3, [r10]
+	ldr	r1, [r7]
+	ldr	r0, [r5, #3464]
+	mla	r6, r9, r6, r3
+	lsl	r3, r6, #10
+	str	r3, [r5, #3460]
+	ldr	r3, .L1107+20
+	ldrh	r2, [r3]
+	lsl	r2, r2, #2
+	bl	ftl_memcpy
+	mov	r2, #1
+	ldr	r0, .L1107+16
+	mov	r1, r2
+	bl	FlashEraseBlocks
+	mov	r3, #1
+	ldr	r0, .L1107+16
 	mov	r2, r3
-	str	r1, [r3, #4]
-	mov	r1, ip
-	lsl	ip, ip, #9
-	add	lr, lr, #1
-	str	ip, [r3, #12]
-	str	lr, [r3, #8]
-	bl	FtlVendorPartWrite
-	ldr	r2, [r4, #2696]
-	movw	r3, #19539
-	movt	r3, 18004
-	cmp	r2, r3
-	beq	.L1558
-.L1554:
-	mov	r0, #0
-	pop	{r4, pc}
-.L1558:
-	bl	Ftl_save_ext_data.part.17
-	mov	r0, #0
-	pop	{r4, pc}
-.L1560:
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [r5, #3456]
+	cmn	r3, #1
+	bne	.L1089
+	uxth	r0, r6
+	bl	FtlBbmMapBadBlock
+	b	.L1090
+.L1091:
+	ldr	r3, [sp]
+	b	.L1106
+.L1095:
+	bl	FtlBbmMapBadBlock
+	b	.L1094
+.L1098:
+	ldrh	r3, [r4]
+	cmp	r3, r7
+	strheq	r6, [r4]	@ movhi
+	beq	.L1097
+.L1099:
+	strh	r6, [r4, #4]	@ movhi
+.L1100:
+	ldrh	r3, [r4]
+	mov	r6, #0
+	ldr	r0, [r5, #3272]
+	mov	r1, #1
+	str	r6, [r5, #364]
+	mov	r2, #2
+	strh	r6, [r4, #2]	@ movhi
+	lsl	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #4]
+	lsl	r3, r3, #10
+	str	r3, [r0, #24]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #4]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r5, #364]
+	ldrh	r2, [r4, #4]
+	strh	r6, [r4, #2]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r5, #364]
+	ldrh	r3, [r4]
+	strh	r2, [r4]	@ movhi
+	strh	r3, [r4, #4]	@ movhi
+	bl	FtlBbmTblFlush
+	mov	r0, r6
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1108:
 	.align	2
-.L1559:
+.L1107:
+	.word	.LANCHOR0+384
+	.word	.LANCHOR0+258
+	.word	.LANCHOR0+318
+	.word	.LANCHOR0+302
+	.word	.LANCHOR0+3456
 	.word	.LANCHOR0+3392
 	.fnend
-	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	2
-	.global	sftl_vendor_write
+	.global	ftl_memcmp
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_vendor_write, %function
-sftl_vendor_write:
+	.type	ftl_memcmp, %function
+ftl_memcmp:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	add	r0, r0, #256
-	b	FtlVendorPartWrite
+	b	memcmp
 	.fnend
-	.size	sftl_vendor_write, .-sftl_vendor_write
+	.size	ftl_memcmp, .-ftl_memcmp
 	.align	2
-	.global	FtlVendorPartRead
+	.global	js_hash
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlVendorPartRead, %function
-FtlVendorPartRead:
+	.type	js_hash, %function
+js_hash:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 112
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r7, #:lower16:.LANCHOR0
-	movw	r3, #:lower16:__stack_chk_guard
-	movt	r7, #:upper16:.LANCHOR0
-	mov	ip, r3
-	add	r3, r7, #304
-	mov	r5, r1
-	ldrh	r1, [r3]
-	mov	r3, ip
-	.pad #116
-	sub	sp, sp, #116
-	movt	r3, #:upper16:__stack_chk_guard
-	mov	r8, r0
-	str	r3, [sp, #16]
-	add	r0, r0, r5
-	ldr	r3, [r3]
+	@ link register save eliminated.
+	ldr	r3, .L1113
+	add	r1, r0, r1
+.L1111:
 	cmp	r0, r1
-	str	r3, [sp, #108]
-	mvnhi	r3, #0
-	strhi	r3, [sp, #8]
-	bls	.L1576
-.L1562:
-	ldr	r3, [sp, #16]
-	ldr	r2, [sp, #108]
-	ldr	r0, [sp, #8]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L1577
-	add	sp, sp, #116
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1576:
-	cmp	r5, #0
-	beq	.L1572
-	add	r3, r7, #316
-	mov	r9, r2
-	ldrh	r3, [r3]
-	movw	r2, #:lower16:.LC114
-	movt	r2, #:upper16:.LC114
-	str	r2, [sp, #20]
-	mov	r2, #0
-	str	r2, [sp, #8]
-	lsr	r3, r8, r3
-	str	r3, [sp, #4]
-	lsl	r10, r3, #2
-	b	.L1569
-.L1579:
-	ldr	lr, [r7, #3360]
-	mov	r2, #1
-	mov	r1, r2
-	add	ip, sp, #44
-	add	r0, sp, #24
-	str	fp, [sp, #28]
-	str	lr, [sp, #32]
-	str	ip, [sp, #36]
-	bl	FlashReadPages
-	ldr	r1, [sp, #24]
-	ldr	r2, [r7, #3464]
-	ldr	r3, [sp, #8]
-	cmn	r1, #1
-	mvneq	r3, #0
-	cmp	r2, #256
-	str	r3, [sp, #8]
-	ldr	r3, [sp, #12]
-	beq	.L1578
-.L1567:
-	ldr	r1, [r7, #3360]
-	lsl	r4, r4, #9
-	mov	r0, r9
-	mov	r2, r4
-	add	r1, r1, r3, lsl #9
-	bl	memcpy
-.L1568:
-	ldr	r3, [sp, #4]
-	subs	r5, r5, r6
-	add	r8, r8, r6
-	add	r9, r9, r4
-	add	r10, r10, #4
-	add	r3, r3, #1
-	str	r3, [sp, #4]
-	beq	.L1562
-.L1569:
-	ldr	r3, .L1580
-	mov	r0, r8
-	ldrh	r4, [r3]
-	ldr	r3, [r7, #3412]
-	mov	r1, r4
-	ldr	fp, [r3, r10]
-	bl	__aeabi_uidivmod
-	sub	r4, r4, r1
-	str	r1, [sp, #12]
-	uxth	r4, r4
-	cmp	r4, r5
-	mov	r6, r4
-	uxthhi	r4, r5
-	movhi	r6, r4
-	cmp	fp, #0
-	bne	.L1579
-	lsl	r4, r4, #9
-	mov	r1, fp
-	mov	r0, r9
-	mov	r2, r4
-	bl	memset
-	b	.L1568
-.L1578:
-	mov	r2, fp
-	ldr	fp, [sp, #4]
-	ldr	r0, [sp, #20]
-	mov	r1, fp
-	bl	sftl_printk
-	ldr	r2, [r7, #3360]
-	mov	r1, fp
-	ldr	r0, .L1580+4
-	bl	FtlMapWritePage
-	ldr	r3, [sp, #12]
-	b	.L1567
-.L1572:
-	str	r5, [sp, #8]
-	b	.L1562
-.L1577:
-	bl	__stack_chk_fail
-.L1581:
-	.align	2
-.L1580:
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+3488
-	.fnend
-	.size	FtlVendorPartRead, .-FtlVendorPartRead
-	.align	2
-	.global	FtlLoadEctTbl
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadEctTbl, %function
-FtlLoadEctTbl:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r0, #64
-	add	r5, r4, #3392
-	ldr	r2, [r4, #3396]
-	ldrh	r1, [r5]
-	bl	FtlVendorPartRead
-	ldr	r2, [r4, #3396]
-	movw	r3, #17221
-	movt	r3, 16980
-	ldr	r2, [r2]
-	cmp	r2, r3
-	beq	.L1583
-	movw	r1, #:lower16:.LC115
-	movw	r0, #:lower16:.LC77
-	movt	r1, #:upper16:.LC115
-	movt	r0, #:upper16:.LC77
-	bl	sftl_printk
-	ldrh	r2, [r5]
-	mov	r1, #0
-	ldr	r0, [r4, #3396]
-	lsl	r2, r2, #9
-	bl	memset
-.L1583:
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-	.fnend
-	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
-	.align	2
-	.global	Ftl_load_ext_data
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	Ftl_load_ext_data, %function
-Ftl_load_ext_data:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	ldr	r2, .L1590
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r1, #1
-	mov	r0, #0
-	bl	FtlVendorPartRead
-	ldr	r3, [r4, #2696]
-	movw	r5, #19539
-	movt	r5, 18004
-	cmp	r3, r5
-	beq	.L1589
-	mov	r2, #512
-	mov	r1, #0
-	ldr	r0, .L1590
-	bl	memset
-	mov	r3, #0
-	str	r5, [r4, #2696]
-	mov	ip, r3
-	mov	lr, r3
-	mov	r5, r3
-	mov	r6, r3
-	mov	r2, r3
-	mov	r7, r3
-	mov	r8, r3
-	mov	r9, r3
-	mov	r10, r3
-	mov	fp, r3
+	bne	.L1112
 	mov	r0, r3
-.L1587:
-	ldr	r1, .L1590+4
-	str	r0, [r4, #2636]
-	str	fp, [r4, #2640]
-	ldrh	r0, [r1]
-	ldr	r1, [r4, #2652]
-	str	r10, [r4, #2632]
-	str	r9, [r4, #2620]
-	str	r8, [r4, #2612]
-	mla	r0, r1, r0, r2
-	str	r7, [r4, #2628]
-	str	r2, [r4, #2656]
-	str	r6, [r4, #2664]
-	str	r5, [r4, #2616]
-	str	lr, [r4, #2624]
-	str	ip, [r4, #2668]
-	str	r3, [r4, #2672]
-	ldrh	r1, [r4, #20]
-	bl	__aeabi_uidiv
-	str	r0, [r4, #2660]
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1589:
-	ldr	r0, [r4, #2784]
-	ldr	fp, [r4, #2788]
-	ldr	r10, [r4, #2704]
-	ldr	r9, [r4, #2708]
-	ldr	r8, [r4, #2712]
-	ldr	r7, [r4, #2716]
-	ldr	r2, [r4, #2724]
-	ldr	r6, [r4, #2728]
-	ldr	r5, [r4, #2732]
-	ldr	lr, [r4, #2736]
-	ldr	ip, [r4, #2740]
-	ldr	r3, [r4, #2744]
-	b	.L1587
-.L1591:
-	.align	2
-.L1590:
-	.word	.LANCHOR0+2696
-	.word	.LANCHOR0+300
-	.fnend
-	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	bx	lr
+.L1112:
+	lsr	r2, r3, #2
+	ldrb	ip, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsl #5
+	add	r2, r2, ip
+	eor	r3, r3, r2
+	b	.L1111
+.L1114:
 	.align	2
-	.global	sftl_vendor_read
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	sftl_vendor_read, %function
-sftl_vendor_read:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	add	r0, r0, #256
-	b	FtlVendorPartRead
+.L1113:
+	.word	1204201446
 	.fnend
-	.size	sftl_vendor_read, .-sftl_vendor_read
+	.size	js_hash, .-js_hash
 	.align	2
-	.global	FtlMapBlkWriteDump_data
+	.global	Ftl_write_map_blk_to_last_page
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, [r0, #36]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r2, #65535
+	ldrh	r3, [r0]
+	mov	r4, r0
+	ldr	r5, [r0, #12]
+	cmp	r3, r2
+	bne	.L1116
+	ldrh	r3, [r0, #8]
 	cmp	r3, #0
-	bxeq	lr
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	ldrh	r6, [r0, #6]
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r5, r0
-	mov	r1, #0
-	ldr	r3, [r0, #24]
-	ldr	r2, [r4, #3384]
-	sub	r6, r6, #1
-	ldr	r0, [r4, #3356]
-	uxth	r6, r6
-	str	r1, [r5, #36]
-	str	r2, [r4, #3476]
-	str	r0, [r4, #3472]
-	ldr	r3, [r3, r6, lsl #2]
-	cmp	r3, r1
-	str	r3, [r4, #3468]
-	bne	.L1600
-	movw	r3, #318
+	beq	.L1117
+	movw	r2, #641
+	ldr	r1, .L1126
+	ldr	r0, .L1126+4
+	bl	sftl_printk
+.L1117:
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	mov	r3, #0
+	strh	r0, [r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r4, #28]
+	add	r3, r3, #1
+	str	r3, [r4, #28]
+.L1118:
+	mov	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1116:
+	lsl	r3, r3, #1
+	ldr	r7, [r0, #24]
 	mov	r1, #255
-	ldrh	r2, [r4, r3]
-	bl	memset
-.L1596:
-	ldr	r2, [r4, #3472]
-	mov	r1, r6
-	mov	r0, r5
-	pop	{r4, r5, r6, lr}
-	b	FtlMapWritePage
-.L1600:
+	ldrh	r8, [r5, r3]
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L1126+8
+	orr	r3, r3, r8, lsl #10
+	ldr	r6, [r5, #3336]
+	str	r3, [r5, #3460]
+	ldr	r3, [r5, #3304]
+	str	r6, [r5, #3468]
+	str	r3, [r5, #3464]
+	ldr	r3, [r0, #28]
+	str	r3, [r6, #4]
+	ldr	r3, .L1126+12
+	strh	r3, [r6, #8]	@ movhi
+	ldrh	r3, [r0, #4]
+	strh	r8, [r6, #2]	@ movhi
+	strh	r3, [r6]	@ movhi
+	add	r3, r5, #308
+	ldrh	r2, [r3]
+	ldr	r0, [r5, #3304]
+	lsl	r2, r2, #3
+	bl	ftl_memset
+	mov	r2, #0
+	mov	r3, r2
+.L1119:
+	ldrh	r0, [r4, #6]
+	uxth	r1, r2
+	cmp	r0, r1
+	bhi	.L1121
+	movw	r3, #314
+	ldr	r0, [r5, #3464]
+	ldrh	r1, [r5, r3]
+	bl	js_hash
 	mov	r2, #1
-	ldr	r0, .L1601
+	str	r0, [r6, #12]
+	mov	r3, #0
 	mov	r1, r2
-	bl	FlashReadPages
-	b	.L1596
-.L1602:
+	ldr	r0, .L1126+16
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	add	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+	b	.L1118
+.L1121:
+	uxth	r1, r2
+	ldr	r0, [r7, r1, lsl #2]
+	cmp	r8, r0, lsr #10
+	bne	.L1120
+	ldr	r0, [r5, #3304]
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r1, [r0, r3, lsl #3]
+	ldr	r0, [r7, r1, lsl #2]
+	ldr	r1, [r5, #3304]
+	add	r1, r1, r3, lsl #3
+	str	r0, [r1, #4]
+.L1120:
+	add	r2, r2, #1
+	b	.L1119
+.L1127:
 	.align	2
-.L1601:
-	.word	.LANCHOR0+3464
+.L1126:
+	.word	.LANCHOR1+332
+	.word	.LC8
+	.word	.LANCHOR0
+	.word	-1291
+	.word	.LANCHOR0+3456
 	.fnend
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
-	.global	FtlVpcTblFlush
+	.global	FtlMapWritePage
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlVpcTblFlush, %function
-FtlVpcTblFlush:
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r1, #2680
-	movw	r3, #61604
-	mov	r0, #0
-	ldr	r6, [r4, #3384]
-	movt	r3, 65535
-	ldr	ip, [r4, #3352]
-	movw	r2, #262
-	ldrh	r1, [r4, r1]
-	movw	lr, #19539
-	str	r6, [r4, #3476]
-	movt	lr, 18004
-	str	ip, [r4, #3472]
-	mov	ip, #83
-	strh	r3, [r6]	@ movhi
-	movt	ip, 20480
-	strh	r1, [r6, #2]	@ movhi
-	movw	r8, #318
-	ldr	r3, [r4, #2688]
 	.pad #12
-	sub	sp, sp, #12
-	str	r0, [r6, #8]
-	mov	r1, #255
-	ldr	r5, .L1631
-	str	r3, [r6, #4]
-	str	r0, [r6, #12]
-	ldrh	r7, [r4, r2]
-	ldrb	r0, [r4, #96]	@ zero_extendqisi2
-	ldrb	r2, [r4, #46]	@ zero_extendqisi2
-	ldrh	r9, [r4, #42]
-	ldrb	r3, [r4, #94]	@ zero_extendqisi2
-	str	lr, [r4, #2472]
-	strb	r0, [r4, #2484]
-	ldrh	lr, [r4, #90]
-	orr	r2, r2, r9, lsl #6
-	ldrh	r0, [r5, #6]
-	str	ip, [r4, #2476]
-	strh	r2, [r5, #-192]	@ movhi
-	ldrb	ip, [r4, #48]	@ zero_extendqisi2
-	orr	r3, r3, lr, lsl #6
-	ldrh	r2, [r4, #40]
-	strh	r0, [r5, #-200]	@ movhi
-	ldrh	r0, [r4, #88]
-	strb	r7, [r4, #2482]
-	sub	r7, r5, #208
-	strb	ip, [r4, #2483]
-	strh	r2, [r5, #-194]	@ movhi
-	strh	r0, [r5, #-190]	@ movhi
-	ldrh	r2, [r4, #136]
-	strh	r3, [r5, #-188]	@ movhi
-	ldrh	ip, [r4, #138]
-	ldrb	r3, [r4, #142]	@ zero_extendqisi2
-	ldrb	r0, [r4, #144]	@ zero_extendqisi2
-	strh	r2, [r5, #-186]	@ movhi
-	ldrh	r2, [r4, r8]
-	sub	r8, r5, #160
-	orr	r3, r3, ip, lsl #6
-	ldr	ip, [r4, #2652]
-	strb	r0, [r4, #2485]
-	ldr	r0, [r4, #2644]
-	str	ip, [r4, #2504]
-	ldr	ip, [r4, #2648]
-	str	r0, [r4, #2512]
-	ldr	r0, [r4, #3472]
-	strh	r3, [r5, #-184]	@ movhi
-	str	ip, [r4, #2508]
-	bl	memset
-	ldr	lr, [r4, #3472]
-.L1604:
-	mov	ip, r7
-	add	lr, lr, #16
-	ldmia	ip!, {r0, r1, r2, r3}
-	add	r7, r7, #16
-	cmp	ip, r8
-	str	r0, [lr, #-16]	@ unaligned
-	str	r1, [lr, #-12]	@ unaligned
-	str	r2, [lr, #-8]	@ unaligned
-	str	r3, [lr, #-4]	@ unaligned
-	bne	.L1604
-	ldrh	r8, [r4, #20]
-	ldr	r9, [r4, #3472]
-	ldr	r1, [r4, #16]
-	lsl	r7, r8, #1
-	add	r0, r9, #48
-	mov	r2, r7
-	bl	memcpy
-	add	r0, r7, #48
-	lsr	r2, r8, #3
-	bic	r0, r0, #3
-	ldr	r1, [r4, #32]
-	add	r2, r2, #4
-	add	r0, r9, r0
-	bl	memcpy
-	movw	r2, #2538
-	ldrh	r3, [r4, r2]
-	cmp	r3, #4
-	bhi	.L1605
+	mov	r4, r0
+	ldr	r5, .L1147
+	mov	r7, r1
+	mov	r9, r2
+	mov	r6, #0
+	add	r8, r5, #308
+	mov	r10, r8
+.L1129:
+	ldr	r3, [r5, #2576]
 	add	r3, r3, #1
-	strh	r3, [r4, r2]	@ movhi
-.L1606:
-	movw	r3, #:lower16:.LC8
-	ldr	r8, .L1631+4
-	movt	r3, #:upper16:.LC8
-	mov	r7, #0
+	str	r3, [r5, #2576]
+	ldrh	r3, [r8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	bge	.L1130
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1131
+.L1130:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L1131:
+	ldrh	r3, [r4]
+	ldr	r2, [r4, #12]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L1132
+	mov	r2, #700
+	ldr	r1, .L1147+4
+	ldr	r0, .L1147+8
+	bl	sftl_printk
+.L1132:
+	ldrh	r2, [r4]
+	ldrh	r3, [r4, #10]
+	cmp	r2, r3
+	bcc	.L1133
+	movw	r2, #701
+	ldr	r1, .L1147+4
+	ldr	r0, .L1147+8
+	bl	sftl_printk
+.L1133:
+	ldrh	r3, [r4]
+	mov	r1, #0
+	ldr	r2, [r4, #12]
+	ldr	r0, [r5, #3336]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	ldrh	r2, [r4, #2]
+	str	r9, [r5, #3464]
 	str	r3, [sp, #4]
-	movw	fp, #65535
-	ldrh	r3, [r5, #2]
-	add	r10, r8, #6
-	add	r9, r8, #3152
-.L1607:
-	ldrh	r1, [r5]
-	ldrh	r2, [r8]
-	ldr	r0, [r4, #3352]
-	sub	r2, r2, #1
-	orr	ip, r3, r1, lsl #10
-	cmp	r3, r2
-	ldr	r3, [r4, #3384]
-	str	ip, [r4, #3468]
-	str	r0, [r4, #3472]
-	str	r3, [r4, #3476]
-	bge	.L1626
-	ldrh	ip, [r10]
-	movw	r1, #42982
-	cmp	ip, #0
-	beq	.L1619
-.L1628:
-	add	ip, r0, ip
-	movt	r1, 18374
-.L1610:
-	lsr	r3, r1, #2
-	ldrb	r2, [r0], #1	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	ip, r0
-	add	r3, r3, r2
-	eor	r1, r1, r3
-	bne	.L1610
-.L1609:
+	str	r0, [r5, #3468]
+	orr	r2, r2, r3, lsl #10
+	str	r2, [r5, #3460]
+	mov	r2, #16
+	bl	ftl_memset
+	ldr	r2, [r4, #28]
+	ldr	fp, [r5, #3468]
+	ldr	r3, [sp, #4]
+	str	r2, [fp, #4]
+	strh	r7, [fp, #8]	@ movhi
+	ldrh	r2, [r4, #4]
+	strh	r3, [fp, #2]	@ movhi
+	ldr	r3, .L1147+12
+	strh	r2, [fp]	@ movhi
+	ldr	r0, [r5, #3464]
+	ldrh	r1, [r3]
+	bl	js_hash
 	mov	r3, #1
-	str	r1, [r6, #12]
+	str	r0, [fp, #12]
 	mov	r2, r3
 	mov	r1, r3
-	mov	r0, r9
+	ldr	r0, .L1147+16
 	bl	FlashProgPages
-	ldrh	r3, [r5, #2]
-	ldr	r2, [r4, #3464]
+	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
 	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	strh	r3, [r5, #2]	@ movhi
-	beq	.L1627
-	cmp	r2, #256
-	cmpne	r3, #1
-	beq	.L1607
-	sub	r3, fp, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	cmp	r3, r2
-	bhi	.L1618
-	ldr	r3, .L1631+8
-	ldrh	r3, [r3, #6]
-	cmp	r3, #1024
-	beq	.L1618
-	mov	r0, fp
-	mov	r1, #1
-	bl	FtlFreeSysBlkQueueIn.part.10
-.L1618:
-	mov	r0, #0
+	bne	.L1134
+	ldr	r1, [r5, #3460]
+	add	r6, r6, #1
+	ldr	r0, .L1147+20
+	uxth	r6, r6
+	bl	sftl_printk
+	ldrh	r3, [r4, #2]
+	cmp	r3, #2
+	ldrhls	r3, [r10]
+	subls	r3, r3, #1
+	strhls	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1136
+	mov	r2, r6
+	ldr	r1, [r5, #3460]
+	ldr	r0, .L1147+24
+	bl	sftl_printk
+.L1137:
+	b	.L1137
+.L1136:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1129
+.L1145:
+	b	.L1145
+.L1134:
+	cmp	r3, #1
+	cmpne	r2, #256
+	beq	.L1140
+	ldr	r0, [r4, #36]
+	cmp	r0, #0
+	beq	.L1141
+.L1140:
+	mov	r3, #0
+	str	r3, [r4, #36]
+	b	.L1129
+.L1141:
+	ldr	r2, [r5, #3460]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r7, lsl #2]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1626:
-	mov	r3, #0
-	ldrh	fp, [r5, #4]
-	strh	r3, [r5, #2]	@ movhi
-	strh	r1, [r5, #4]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	ldrh	ip, [r10]
-	lsl	r2, r0, #10
-	ldr	r3, [r4, #2644]
-	movw	r1, #42982
-	str	r2, [r4, #3468]
-	cmp	ip, #0
-	strh	r0, [r5]	@ movhi
-	add	r2, r3, #1
-	str	r3, [r4, #2688]
-	str	r2, [r4, #2644]
-	str	r3, [r6, #4]
-	strh	r0, [r6, #2]	@ movhi
-	ldr	r0, [r4, #3352]
-	bne	.L1628
-.L1619:
-	movt	r1, 18374
-	b	.L1609
-.L1627:
-	cmp	r3, #1
-	beq	.L1629
-	add	r7, r7, #1
-	uxth	r7, r7
-	cmp	r7, #3
-	bhi	.L1630
-.L1615:
-	ldrh	r3, [r5, #2]
-	b	.L1607
-.L1629:
-	movw	r2, #1138
-	ldr	r1, .L1631+12
-	ldr	r0, [sp, #4]
-	add	r7, r7, #1
+.L1148:
+	.align	2
+.L1147:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+363
+	.word	.LC8
+	.word	.LANCHOR0+314
+	.word	.LANCHOR0+3456
+	.word	.LC104
+	.word	.LC105
+	.fnend
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	load_l2p_region
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	load_l2p_region, %function
+load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r6, r0
+	ldr	r9, .L1157
+	mov	r10, r1
+	ldrh	r3, [r9]
+	cmp	r3, r0
+	bcs	.L1150
+	movw	r2, #485
+	ldr	r1, .L1157+4
+	ldr	r0, .L1157+8
 	bl	sftl_printk
-	ldrh	r3, [r5, #2]
-	uxth	r7, r7
-	cmp	r3, #1
-	ldrheq	r3, [r8]
-	subeq	r3, r3, #1
-	strheq	r3, [r5, #2]	@ movhi
-	cmp	r7, #3
-	bls	.L1615
-.L1630:
-	movw	r0, #:lower16:.LC116
-	mov	r2, r7
+.L1150:
+	ldr	r7, .L1157+12
+	mov	r5, #12
+	ldr	r3, [r7, #3380]
+	mov	r4, r7
+	ldr	r8, [r3, r6, lsl #2]
+	cmp	r8, #0
+	bne	.L1151
+	mul	r5, r5, r10
+	ldr	r3, [r7, #2544]
+	movw	r2, #314
+	mov	r1, #255
+	ldrh	r2, [r7, r2]
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
+	bl	ftl_memset
+	ldr	r3, [r7, #2544]
+	strh	r6, [r3, r5]	@ movhi
+	ldr	r3, [r7, #2544]
+	add	r5, r3, r5
+	str	r8, [r5, #4]
+.L1152:
+	mov	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1151:
+	mul	r5, r5, r10
+	ldr	r3, [r7, #2544]
+	mov	r2, #1
+	add	r0, r7, #3456
+	mov	r1, r2
+	str	r8, [r7, #3460]
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r7, #3464]
+	ldr	r3, [r7, #3336]
+	str	r3, [r7, #3468]
+	bl	FlashReadPages
+	ldr	r7, [r7, #3468]
+	ldrh	r3, [r7, #8]
+	cmp	r3, r6
+	beq	.L1153
+	mov	r2, r8
+	mov	r1, r6
+	ldr	r0, .L1157+16
+	bl	sftl_printk
+	mov	r3, #4
 	ldr	r1, [r4, #3468]
-	movt	r0, #:upper16:.LC116
+	mov	r2, r3
+	ldr	r0, .L1157+20
+	bl	rknand_print_hex
+	ldrh	r3, [r9]
+	mov	r2, #4
+	ldr	r1, [r4, #3380]
+	ldr	r0, .L1157+24
+	bl	rknand_print_hex
+.L1154:
+	ldrh	r3, [r7, #8]
+	cmp	r3, r6
+	beq	.L1155
+	mov	r2, #508
+	ldr	r1, .L1157+4
+	ldr	r0, .L1157+8
 	bl	sftl_printk
-.L1616:
-	b	.L1616
-.L1605:
-	mov	r3, #0
-	strh	r3, [r4, r2]	@ movhi
-	str	r3, [r4, #28]
-	bl	FtlUpdateVaildLpn.part.5
-	b	.L1606
-.L1632:
+.L1155:
+	ldr	r3, [r4, #2544]
+	mov	r1, #0
+	add	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L1152
+.L1153:
+	ldr	r3, [r4, #3456]
+	cmp	r3, #256
+	bne	.L1154
+	mov	r2, r8
+	mov	r1, r6
+	ldr	r0, .L1157+28
+	bl	sftl_printk
+	ldr	r3, [r4, #2544]
+	mov	r1, r6
+	ldr	r0, .L1157+32
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+	b	.L1154
+.L1158:
 	.align	2
-.L1631:
-	.word	.LANCHOR0+2680
-	.word	.LANCHOR0+312
-	.word	.LANCHOR0+416
-	.word	.LANCHOR1+460
+.L1157:
+	.word	.LANCHOR0+340
+	.word	.LANCHOR1+379
+	.word	.LC8
+	.word	.LANCHOR0
+	.word	.LC106
+	.word	.LC94
+	.word	.LC107
+	.word	.LC108
+	.word	.LANCHOR0+3396
 	.fnend
-	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.size	load_l2p_region, .-load_l2p_region
 	.align	2
-	.global	FtlLowFormatEraseBlock
+	.global	ftl_map_blk_gc
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLowFormatEraseBlock, %function
-FtlLowFormatEraseBlock:
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	movt	r6, #:upper16:.LANCHOR0
-	.pad #28
-	sub	sp, sp, #28
-	ldrh	r3, [r6, #36]
-	str	r0, [r6, #3332]
+	.pad #12
+	mov	r4, r0
+	ldr	r5, [r0, #12]
+	ldr	r10, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	sub	r3, r3, #5
+	cmp	r2, r3
+	blt	.L1160
+	uxth	r0, r0
+	lsl	r0, r0, #1
+	ldrh	r9, [r5, r0]
+	cmp	r9, #0
+	beq	.L1160
+	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1655
-	mov	r5, #0
-	str	r1, [sp]
-	str	r0, [sp, #4]
-	mov	r8, r5
-	mov	r10, r5
-	b	.L1638
-.L1635:
-	mov	r0, r4
-	mov	r1, r7
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r9, r1
-	mov	r1, r7
-	lsl	r4, r4, #10
-	bl	__aeabi_uidiv
-	uxth	r2, r0
-	lsr	r0, r9, #5
-	add	r1, r8, r8, lsl #2
-	add	r2, r6, r2, lsl #2
-	and	lr, r9, #31
-	add	ip, r8, #1
-	ldr	r3, [r2, #380]
-	add	r2, r10, #1
-	ldr	r3, [r3, r0, lsl #2]
-	lsr	r3, r3, lr
-	tst	r3, #1
-	uxthne	r10, r2
-	bne	.L1636
-	ldr	r3, .L1696
-	ldr	r0, [r6, #3348]
-	ldr	r2, [r6, #3388]
+	bne	.L1160
+	mov	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r5, r0]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldr	r3, .L1176
 	ldrh	r3, [r3]
-	add	r1, r0, r1, lsl #2
-	mul	r3, r8, r3
-	uxth	r8, ip
-	ldr	ip, [r6, #3368]
-	str	r4, [r1, #4]
-	add	r0, r3, #3
-	cmp	r3, #0
-	movlt	r3, r0
-	str	ip, [r1, #8]
-	bic	r3, r3, #3
-	add	r3, r2, r3
-	str	r3, [r1, #12]
-.L1636:
-	add	r5, r5, #1
-	ldrh	r3, [r6, #36]
-	uxth	r5, r5
-	cmp	r3, r5
-	bls	.L1691
-.L1638:
-	ldr	r1, [r6, #3348]
-	add	r3, r5, r5, lsl #2
-	mov	r0, #0
-	add	r2, r6, r5
-	str	r0, [r1, r3, lsl #2]
-	ldr	r3, .L1696+4
-	ldrb	fp, [r2, #268]	@ zero_extendqisi2
-	ldrh	r9, [r3]
-	ldrh	r7, [r3, #42]
-	mov	r0, fp
-	ldrh	r3, [sp, #4]
-	mov	r1, r9
-	smulbb	r4, r3, r9
-	bl	__aeabi_uidivmod
-	mov	r0, fp
-	add	r4, r4, r1
-	mov	r1, r9
-	bl	__aeabi_uidiv
-	ldr	r3, [sp]
-	smlabb	r4, r0, r7, r4
-	cmp	r3, #0
-	uxth	r4, r4
-	beq	.L1635
-	ldr	r3, .L1696+8
+	cmp	r2, r3
+	bcc	.L1161
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1161:
+	ldr	r5, .L1176+4
+	mov	r6, #0
+.L1162:
+	ldrh	r2, [r4, #6]
+	uxth	fp, r6
+	cmp	r2, fp
+	bhi	.L1169
+	mov	r1, #1
+	mov	r0, r9
+	bl	FtlFreeSysBlkQueueIn
+	mov	r3, #0
+	str	r3, [r4, #32]
+.L1160:
+	ldr	r3, .L1176
+	ldrh	r2, [r4, #2]
 	ldrh	r3, [r3]
-	cmp	r3, #0
-	beq	.L1635
+	cmp	r2, r3
+	bcc	.L1170
 	mov	r0, r4
-	bl	IsBlkInVendorPart.part.0
-	cmp	r0, #0
-	bne	.L1636
-	b	.L1635
-.L1691:
-	cmp	r8, #0
-	bne	.L1692
-.L1654:
-	mov	r0, r10
-.L1633:
-	add	sp, sp, #28
+	bl	ftl_map_blk_alloc_new_blk
+.L1170:
+	mov	r0, #0
+	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1655:
-	mov	r0, r3
-	b	.L1633
-.L1692:
-	sub	r4, r8, #1
-	mov	r1, #0
-	uxth	r4, r4
-	mov	r2, r8
-	ldr	r0, [r6, #3348]
-	mov	r5, r1
-	add	r4, r4, #1
-	add	r4, r4, r4, lsl #2
-	bl	FlashEraseBlocks
-	lsl	r4, r4, #2
-	b	.L1642
-.L1641:
-	cmp	r4, r5
-	beq	.L1693
-.L1642:
-	ldr	r3, [r6, #3348]
-	ldr	r2, [r3, r5]
-	add	r3, r3, r5
-	add	r5, r5, #20
+.L1169:
+	uxth	r7, r6
+	ldr	r2, [r10, r7, lsl #2]
+	add	r3, r10, r7, lsl #2
+	str	r3, [sp, #4]
+	cmp	r9, r2, lsr #10
+	bne	.L1163
+	ldr	r2, [r5, #3308]
+	ldr	r8, [r5, #3336]
+	ldr	r0, .L1176+8
+	str	r2, [r5, #3464]
+	str	r8, [r5, #3468]
+	ldr	r2, [r10, r7, lsl #2]
+	str	r2, [r5, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	beq	.L1164
+	movw	r2, #611
+	ldr	r1, .L1176+12
+	ldr	r0, .L1176+16
+	bl	sftl_printk
+.L1164:
+	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	bne	.L1641
-	ldr	r0, [r3, #4]
-	add	r10, r10, #1
-	uxth	r10, r10
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-	b	.L1641
-.L1693:
-.L1643:
-	ldr	r3, [sp]
-	str	r10, [sp, #12]
-	cmp	r3, #0
-	ldrne	r3, .L1696+12
-	movne	r2, #1
-	ldreq	r3, [sp]
-	strne	r2, [sp, #16]
-	ldrhne	r3, [r3]
-	streq	r3, [sp, #16]
-	moveq	r3, #2
-	str	r3, [sp, #20]
+	bne	.L1165
+.L1167:
+	ldr	r2, [sp, #4]
 	mov	r3, #0
-	str	r3, [sp, #8]
-.L1651:
-	ldrh	r3, [r6, #36]
-	cmp	r3, #0
-	beq	.L1648
-	mov	r5, #0
-	mov	r8, r5
-	mov	r9, r5
-	b	.L1647
-.L1645:
-	mov	r0, r4
-	mov	r1, r7
-	bl	__aeabi_uidivmod
-	mov	r0, r4
-	uxth	r10, r1
+	str	r3, [r2]
+.L1166:
+	b	.L1166
+.L1165:
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	bne	.L1167
+	ldrh	r2, [r8]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L1167
+	ldr	r2, [r5, #3464]
 	mov	r1, r7
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	ldr	r3, [sp, #8]
-	lsr	ip, r10, #5
-	add	r1, r8, r8, lsl #2
-	add	r2, r6, r0, lsl #2
-	and	r0, r10, #31
-	add	r4, r3, r4, lsl #10
-	ldr	r3, [r2, #380]
-	add	r2, r8, #1
-	ldr	r3, [r3, ip, lsl #2]
-	lsr	r3, r3, r0
-	tst	r3, #1
-	bne	.L1646
-	ldr	r3, .L1696
-	ldr	ip, [r6, #3348]
-	ldr	r0, [r6, #3368]
-	ldrh	r3, [r3]
-	add	r1, ip, r1, lsl #2
-	ldr	ip, [r6, #3364]
-	mul	r3, r8, r3
-	uxth	r8, r2
-	str	r4, [r1, #4]
-	str	ip, [r1, #8]
-	add	r2, r3, #3
-	cmp	r3, #0
-	movlt	r3, r2
-	bic	r3, r3, #3
-	add	r3, r0, r3
-	str	r3, [r1, #12]
-.L1646:
-	add	r5, r5, #1
-	ldrh	r3, [r6, #36]
-	uxth	r5, r5
-	cmp	r3, r5
-	bls	.L1694
-.L1647:
-	ldr	r1, [r6, #3348]
-	add	r3, r5, r5, lsl #2
-	add	r2, r6, r5
-	str	r9, [r1, r3, lsl #2]
-	ldr	r3, .L1696+4
-	ldrb	fp, [r2, #268]	@ zero_extendqisi2
-	ldrh	r10, [r3]
-	ldrh	r7, [r3, #42]
-	mov	r0, fp
-	ldrh	r3, [sp, #4]
-	mov	r1, r10
-	smulbb	r4, r3, r10
-	bl	__aeabi_uidivmod
-	mov	r0, fp
-	add	r4, r4, r1
-	mov	r1, r10
-	bl	__aeabi_uidiv
-	ldr	r3, [sp]
-	smlabb	r4, r0, r7, r4
-	cmp	r3, #0
-	uxth	r4, r4
-	beq	.L1645
-	ldr	r3, .L1696+8
-	ldrh	r3, [r3]
-	cmp	r3, #0
-	beq	.L1645
 	mov	r0, r4
-	bl	IsBlkInVendorPart.part.0
-	cmp	r0, #0
-	bne	.L1646
-	b	.L1645
-.L1694:
-	cmp	r8, #0
-	beq	.L1648
-	sub	r5, r8, #1
-	mov	r3, #1
-	uxth	r5, r5
-	ldr	r2, [sp, #16]
-	mov	r1, r8
-	ldr	r0, [r6, #3348]
-	add	r5, r5, #1
-	mov	r4, #0
-	add	r5, r5, r5, lsl #2
-	bl	FlashProgPages
-	lsl	r5, r5, #2
-	ldr	r7, [sp, #12]
-	b	.L1650
-.L1649:
-	cmp	r5, r4
-	beq	.L1695
-.L1650:
-	ldr	r3, [r6, #3348]
-	ldr	r2, [r3, r4]
-	add	r3, r3, r4
-	add	r4, r4, #20
-	cmp	r2, #0
-	beq	.L1649
-	ldr	r0, [r3, #4]
-	add	r7, r7, #1
-	uxth	r7, r7
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-	cmp	r5, r4
-	bne	.L1650
-.L1695:
-	ldr	r3, [sp, #8]
-	ldr	r2, [sp, #20]
-	str	r7, [sp, #12]
-	add	r3, r3, #1
-	str	r3, [sp, #8]
-	uxth	r3, r3
-	cmp	r3, r2
-	bcc	.L1651
-	mov	r9, r8
-	str	r8, [sp, #8]
-	ldr	fp, [sp]
-	mov	r4, #0
-	ldr	r8, .L1696+16
-	mov	r10, r7
-	mov	r5, r4
-	movw	r7, #65533
-.L1653:
-	cmp	fp, #0
-	add	r5, r5, #1
-	beq	.L1652
-	ldr	r3, [r6, #3348]
-	ldr	r2, [r3, r4]
-	add	r3, r3, r4
-	cmp	r2, #0
-	bne	.L1652
-	ldr	r0, [r3, #4]
-	ubfx	r0, r0, #10, #16
-	sub	r3, r0, #1
-	uxth	r3, r3
-	cmp	r3, r7
-	bhi	.L1652
-	ldrh	r3, [r8, #6]
-	mov	r1, #1
-	cmp	r3, #1024
-	beq	.L1652
-	bl	FtlFreeSysBlkQueueIn.part.10
-.L1652:
-	uxth	r3, r5
-	add	r4, r4, #20
-	cmp	r9, r3
-	bhi	.L1653
-	ldr	r3, [sp]
-	ldr	r2, [sp, #4]
-	adds	r3, r3, #0
-	movne	r3, #1
-	cmp	r2, #63
-	orrls	r3, r3, #1
-	cmp	r3, #0
-	beq	.L1654
-	ldr	r2, [sp, #8]
-	ldr	r1, [sp, #16]
-	ldr	r0, [r6, #3348]
-	bl	FlashEraseBlocks
-	b	.L1654
-.L1648:
-	ldr	r10, [sp, #12]
-	mov	r0, r10
-	b	.L1633
-.L1697:
+	bl	FtlMapWritePage
+.L1163:
+	add	r6, r6, #1
+	b	.L1162
+.L1177:
 	.align	2
-.L1696:
-	.word	.LANCHOR0+320
-	.word	.LANCHOR0+264
-	.word	.LANCHOR0+348
-	.word	.LANCHOR0+312
-	.word	.LANCHOR0+416
+.L1176:
+	.word	.LANCHOR0+308
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+395
+	.word	.LC8
 	.fnend
-	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
-	.global	FtlBbmTblFlush
+	.global	flush_l2p_region
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlBbmTblFlush, %function
-FtlBbmTblFlush:
+	.type	flush_l2p_region, %function
+flush_l2p_region:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r2, #318
-	.pad #20
-	sub	sp, sp, #20
-	mov	r1, #0
-	ldr	r3, [r4, #3352]
-	ldr	ip, [r4, #3384]
-	ldrh	r2, [r4, r2]
-	mov	r0, r3
-	str	r3, [r4, #3472]
-	str	ip, [r4, #3476]
-	bl	memset
-	movw	r3, #262
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	beq	.L1702
-	ldr	r8, .L1717
-	add	r6, r4, #380
-	mov	r5, #0
-	add	r7, r4, #412
-.L1701:
-	ldrh	r2, [r7]
-	ldr	r3, [r4, #3472]
-	ldr	r1, [r6], #4
-	mul	r0, r5, r2
-	lsl	r2, r2, #2
-	add	r5, r5, #1
-	add	r0, r3, r0, lsl #2
-	bl	memcpy
-	ldrh	r3, [r8]
-	cmp	r3, r5
-	bgt	.L1701
-.L1702:
-	ldr	r8, [r4, #3476]
-	movw	r2, #61649
-	ldr	r5, .L1717+4
-	mvn	r3, #0
-	mov	r1, #0
-	movt	r2, 65535
-	str	r3, [r8]	@ unaligned
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, #12
+	ldr	r5, .L1180
+	mul	r4, r4, r0
+	ldr	r3, [r5, #2544]
+	add	r0, r5, #3392
+	add	r0, r0, #4
+	add	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #2544]
+	mov	r0, #0
+	add	r4, r3, r4
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	pop	{r4, r5, r6, pc}
+.L1181:
+	.align	2
+.L1180:
+	.word	.LANCHOR0
+	.fnend
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	log2phys
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r0
+	ldr	r4, .L1196
 	mov	r6, r1
-	strh	r2, [r8]	@ movhi
-	movw	r9, #:lower16:.LC117
-	str	r3, [r8, #4]	@ unaligned
-	sub	fp, r5, #40
-	str	r3, [r8, #8]	@ unaligned
-	movt	r9, #:upper16:.LC117
-	ldr	r3, [r4, #360]
-	add	r10, fp, #3152
-	str	r1, [sp, #12]
-	ldrh	r1, [r5]
-	str	r3, [r8, #4]
-	strh	r1, [r8, #2]	@ movhi
-	ldr	r2, [r4, #2660]
-	ldrh	ip, [r5, #6]
-	ldr	r0, [r4, #240]
-	ldrh	r3, [r5, #4]
-	strh	r2, [r8, #14]	@ movhi
-	strh	ip, [r8, #10]	@ movhi
-	strh	r0, [r8, #12]	@ movhi
-	strh	r3, [r8, #8]	@ movhi
-	ldrh	r2, [r5, #2]
-	b	.L1700
-.L1703:
-	mov	r3, #1
-	mov	r0, r10
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldrh	r2, [r5, #2]
-	ldr	r3, [r4, #3464]
-	add	r2, r2, #1
-	uxth	r2, r2
-	cmn	r3, #1
-	strh	r2, [r5, #2]	@ movhi
-	beq	.L1714
-	add	r6, r6, #1
-	cmp	r6, #1
-	ble	.L1708
-	cmp	r3, #256
-	bne	.L1715
-.L1707:
-	ldrh	r1, [r5]
-	ldrh	r3, [r5, #4]
-.L1700:
-	ldr	lr, [r4, #3352]
-	orr	ip, r2, r1, lsl #10
-	ldr	r0, [r4, #3384]
-	mov	r7, #0
-	str	ip, [r4, #3468]
-	str	lr, [r4, #3472]
-	str	r0, [r4, #3476]
-	mov	r0, r9
-	ldrh	lr, [r8, #10]
-	str	r7, [r4, #3464]
-	str	lr, [sp]
-	bl	sftl_printk
-	ldrh	r3, [fp]
-	ldrh	r2, [r5, #2]
-	sub	r3, r3, #1
-	cmp	r2, r3
-	blt	.L1703
-	ldr	r3, [r4, #360]
-	mov	r2, #1
-	ldrh	lr, [r5]
-	mov	r1, r2
-	ldr	ip, [r4, #3348]
-	add	r3, r3, r2
-	strh	r7, [r5, #2]	@ movhi
-	str	r3, [r4, #360]
-	str	r3, [r8, #4]
-	mov	r0, ip
-	ldrh	r3, [r5, #4]
-	strh	lr, [r8, #8]	@ movhi
-	strh	lr, [r5, #4]	@ movhi
-	strh	r3, [r5]	@ movhi
-	lsl	r3, r3, #10
-	str	r3, [r4, #3468]
-	str	r3, [ip, #4]
-	bl	FlashEraseBlocks
-	b	.L1703
-.L1708:
-	mov	r6, #1
-	b	.L1707
-.L1714:
-	movw	r0, #:lower16:.LC118
-	ldr	r1, [r4, #3468]
-	movt	r0, #:upper16:.LC118
+	mov	r10, r2
+	add	r3, r4, #312
+	ldrh	r9, [r3]
+	ldr	r3, [r4, #2556]
+	cmp	r0, r3
+	bcc	.L1183
+	movw	r2, #813
+	ldr	r1, .L1196+4
+	ldr	r0, .L1196+8
 	bl	sftl_printk
-	ldr	r3, [sp, #12]
+.L1183:
+	ldr	r3, [r4, #2556]
+	cmp	fp, r3
+	bcs	.L1184
+	add	r9, r9, #7
+	ldr	r1, [r4, #2544]
+	lsr	r7, fp, r9
+	movw	r3, #342
+	ldrh	r2, [r4, r3]
+	mov	r8, #12
+	uxth	r7, r7
+	mov	r3, #0
+.L1185:
+	uxth	r5, r3
+	cmp	r5, r2
+	bcc	.L1190
+	bl	select_l2p_ram_region
+	mul	r8, r8, r0
+	ldr	r3, [r4, #2544]
+	mov	r5, r0
+	ldrh	r1, [r3, r8]
+	add	r2, r3, r8
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1191
+	ldr	r3, [r2, #4]
+	cmp	r3, #0
+	bge	.L1191
+	bl	flush_l2p_region
+.L1191:
+	mov	r1, r5
+	mov	r0, r7
+	bl	load_l2p_region
+	b	.L1187
+.L1184:
+	mvn	r0, #0
+	cmp	r10, #0
+	streq	r0, [r6]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1190:
 	add	r3, r3, #1
-	uxth	r3, r3
-	cmp	r3, #3
-	str	r3, [sp, #12]
-	bhi	.L1716
-	ldrh	r2, [r5, #2]
-	b	.L1707
-.L1715:
+	mla	r0, r8, r3, r1
+	ldrh	r0, [r0, #-12]
+	cmp	r0, r7
+	bne	.L1185
+.L1187:
+	mvn	r0, #0
+	cmp	r10, #0
+	bic	r0, fp, r0, lsl r9
+	mov	r3, #12
+	uxth	r0, r0
+	bne	.L1188
+	ldr	r2, [r4, #2544]
+	mla	r3, r3, r5, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r0, lsl #2]
+	str	r3, [r6]
+.L1189:
+	ldr	r2, [r4, #2544]
+	mov	r3, #12
 	mov	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1716:
-	movw	r0, #:lower16:.LC119
-	mov	r2, r3
-	ldr	r1, [r4, #3468]
-	movt	r0, #:upper16:.LC119
-	bl	sftl_printk
-.L1706:
-	b	.L1706
-.L1718:
+	mla	r5, r3, r5, r2
+	ldr	r3, [r5, #4]
+	cmn	r3, #1
+	addne	r3, r3, #1
+	strne	r3, [r5, #4]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1188:
+	mul	r3, r3, r5
+	ldr	r2, [r4, #2544]
+	ldr	r1, [r6]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r0, lsl #2]
+	ldr	r2, [r4, #2544]
+	add	r3, r2, r3
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+	movw	r3, #2548
+	strh	r7, [r4, r3]	@ movhi
+	b	.L1189
+.L1197:
 	.align	2
-.L1717:
-	.word	.LANCHOR0+262
-	.word	.LANCHOR0+352
+.L1196:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+410
+	.word	.LC8
 	.fnend
-	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.size	log2phys, .-log2phys
 	.align	2
+	.global	FtlWriteDump_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcFreeBadSuperBlk.part.12, %function
-FtlGcFreeBadSuperBlk.part.12:
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r8, #:lower16:.LANCHOR0
-	movt	r8, #:upper16:.LANCHOR0
-	.pad #12
-	sub	sp, sp, #12
-	ldrh	r3, [r8, #36]
-	cmp	r3, #0
-	beq	.L1723
-	ldr	fp, .L1736
-	movw	r9, #:lower16:.LC120
-	movt	r9, #:upper16:.LC120
-	mov	r7, #0
-	str	r0, [sp, #4]
-	add	r10, fp, #2
-.L1722:
-	ldr	r2, .L1736+4
-	add	r3, r8, r7
-	ldrb	r4, [r3, #268]	@ zero_extendqisi2
-	ldrh	r3, [sp, #4]
-	ldrh	r6, [r2]
-	mov	r0, r4
-	mov	r1, r6
-	smulbb	r5, r6, r3
-	bl	__aeabi_uidiv
-	ldr	r3, .L1736+8
-	mov	r1, r6
-	ldrh	r2, [r3]
-	smulbb	r6, r2, r0
-	mov	r0, r4
-	bl	__aeabi_uidivmod
-	ldrh	r3, [fp]
-	add	r1, r5, r1
-	add	r6, r6, r1
-	uxth	r6, r6
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L1218
+	ldr	r7, .L1218+4
+	ldrh	r2, [r4, #32]
+	ldr	r3, [r7]
+	cmp	r2, #0
+	str	r3, [sp, #28]
+	beq	.L1199
+	ldrb	r3, [r4, #36]	@ zero_extendqisi2
 	cmp	r3, #0
-	movne	r4, #0
-	bne	.L1729
-	b	.L1730
-.L1735:
-	add	r0, r4, #1
-	ldrh	r3, [fp]
-	uxth	r4, r0
-	cmp	r4, r3
-	bcs	.L1730
-.L1729:
-	lsl	r3, r4, #1
-	ldrh	r2, [r10, r3]
-	add	r5, r10, r3
-	cmp	r2, r6
-	bne	.L1735
-	mov	r1, r6
-	mov	r0, r9
-	bl	sftl_printk
+	bne	.L1199
+	movw	r3, #306
+	ldrb	r1, [r4, #35]	@ zero_extendqisi2
+	ldrh	r3, [r4, r3]
+	mul	r3, r3, r1
+	cmp	r2, r3
+	beq	.L1199
+	ldrb	r8, [r4, #38]	@ zero_extendqisi2
+	cmp	r8, #0
+	bne	.L1198
+	ldr	r6, [r4, #2556]
+	mov	r2, r8
+	add	r1, sp, #4
+	ldrh	r9, [r4, #236]
+	sub	r6, r6, #1
 	mov	r0, r6
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldrh	r3, [fp]
-	add	r0, r4, #1
-	cmp	r3, r4
-	sub	r1, r3, #1
-	bls	.L1728
-	sub	r4, r1, r4
-	mov	r3, r5
-	uxtah	r4, r0, r4
-	add	r4, r10, r4, lsl #1
-.L1727:
-	ldrh	r2, [r3, #2]
-	strh	r2, [r3], #2	@ movhi
-	cmp	r4, r3
-	bne	.L1727
-.L1728:
-	uxth	r3, r1
-	uxth	r4, r0
-	cmp	r4, r3
-	strh	r3, [fp]	@ movhi
-	bcc	.L1729
-.L1730:
-	add	r7, r7, #1
-	ldrh	r3, [r8, #36]
-	uxth	r7, r7
-	cmp	r3, r7
-	bhi	.L1722
-.L1723:
-	add	sp, sp, #12
+	bl	log2phys
+	ldr	r3, [sp, #4]
+	ldr	r5, [r4, #3336]
+	ldr	r0, [r4, #3304]
+	cmn	r3, #1
+	str	r3, [sp, #12]
+	str	r6, [sp, #24]
+	str	r0, [sp, #16]
+	str	r5, [sp, #20]
+	str	r8, [r5, #4]
+	beq	.L1201
+	mov	r2, r8
+	mov	r1, #1
+	add	r0, sp, #8
+	bl	FlashReadPages
+.L1202:
+	ldr	r10, .L1218+8
+	mov	r8, #0
+	ldr	r3, .L1218+12
+	lsl	r9, r9, #2
+	mov	fp, r8
+	strh	r3, [r5]	@ movhi
+.L1203:
+	cmp	r9, r8
+	bne	.L1207
+.L1204:
+	mov	r3, #1
+.L1217:
+	strb	r3, [r4, #38]
+.L1198:
+	ldr	r2, [sp, #28]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1209
+	bl	__stack_chk_fail
+.L1201:
+	movw	r3, #314
+	mov	r1, #255
+	ldrh	r2, [r4, r3]
+	bl	ftl_memset
+	b	.L1202
+.L1207:
+	ldrh	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1204
+	ldr	r3, [sp, #12]
+	mov	r0, r10
+	str	r6, [r5, #8]
+	add	r8, r8, #1
+	str	r3, [r5, #12]
+	ldrh	r3, [r4, #28]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2596]
+	mov	r1, #1
+	str	r0, [sp, #12]
+	add	r0, sp, #8
+	str	r3, [r5, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, fp
+	str	r3, [r4, #2596]
+	mov	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4, #28]
+	bl	decrement_vpc_count
+	b	.L1203
+.L1199:
+	mov	r3, #0
+	b	.L1217
+.L1209:
+	add	sp, sp, #36
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	b	FtlGcReFreshBadBlk
-.L1737:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1219:
 	.align	2
-.L1736:
-	.word	.LANCHOR0+3282
-	.word	.LANCHOR0+264
-	.word	.LANCHOR0+306
+.L1218:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR0+28
+	.word	-3947
 	.fnend
-	.size	FtlGcFreeBadSuperBlk.part.12, .-FtlGcFreeBadSuperBlk.part.12
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
-	.global	FtlGcFreeBadSuperBlk
+	.global	FtlReUsePrevPpa
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcFreeBadSuperBlk, %function
-FtlGcFreeBadSuperBlk:
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
-	movw	r2, #3282
-	movt	r3, #:upper16:.LANCHOR0
-	ldrh	r3, [r3, r2]
+	push	{r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r7, r0
+	ldr	r5, .L1231
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #76]
+	lsl	r6, r0, #1
+	ldrh	r3, [r2, r6]
 	cmp	r3, #0
-	beq	.L1744
-	push	{r4, lr}
-	.save {r4, lr}
-	bl	FtlGcFreeBadSuperBlk.part.12
-	mov	r0, #0
-	pop	{r4, pc}
-.L1744:
-	mov	r0, #0
-	bx	lr
+	bne	.L1221
+	ldr	r4, [r5, #2536]
+	cmp	r4, #0
+	beq	.L1222
+	ldr	r1, [r5, #2520]
+	mov	lr, #6
+	ldr	r2, .L1231+4
+	movw	r8, #65535
+	ldrh	ip, [r5, #228]
+	sub	r4, r4, r1
+	asr	r4, r4, #1
+	mul	r4, r2, r4
+	uxth	r4, r4
+.L1223:
+	uxth	r2, r3
+	cmp	ip, r2
+	bls	.L1222
+	cmp	r4, r0
+	bne	.L1224
+	mov	r1, r4
+	ldr	r0, .L1231+8
+	bl	List_remove_node
+	ldrh	r3, [r5, #228]
+	cmp	r3, #0
+	bne	.L1225
+	movw	r2, #1733
+	ldr	r1, .L1231+12
+	ldr	r0, .L1231+16
+	bl	sftl_printk
+.L1225:
+	ldrh	r3, [r5, #228]
+	mov	r0, r4
+	sub	r3, r3, #1
+	strh	r3, [r5, #228]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r5, #76]
+	ldrh	r3, [r2, r6]
+.L1221:
+	add	r3, r3, #1
+	strh	r3, [r2, r6]	@ movhi
+	b	.L1222
+.L1224:
+	mul	r4, lr, r4
+	add	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, r8
+	bne	.L1223
+.L1222:
+	mov	r2, #1
+	add	r1, sp, #4
+	mov	r0, r7
+	bl	log2phys
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1232:
+	.align	2
+.L1231:
+	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LANCHOR0+2536
+	.word	.LANCHOR1+419
+	.word	.LC8
 	.fnend
-	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
-	.global	update_vpc_list
+	.global	FtlRecoverySuperblock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	update_vpc_list, %function
-update_vpc_list:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	lsl	r6, r0, #1
-	ldr	r3, [r4, #16]
-	ldrh	r3, [r3, r6]
-	cmp	r3, #0
-	bne	.L1748
-	ldrh	r3, [r4, #234]
-	mov	r5, r0
-	cmp	r3, r0
-	mvneq	r3, #0
-	strheq	r3, [r4, #234]	@ movhi
-	ldrh	r3, [r4, #232]
-	cmp	r3, r0
-	mvneq	r3, #0
-	strheq	r3, [r4, #232]	@ movhi
-	ldrh	r3, [r4, #184]
-	cmp	r3, r0
-	mvneq	r3, #0
-	strheq	r3, [r4, #184]	@ movhi
-	beq	.L1752
-	ldrh	r3, [r4, #40]
-	cmp	r3, r0
-	beq	.L1759
-	ldrh	r3, [r4, #88]
-	cmp	r3, r0
-	beq	.L1759
-	ldrh	r3, [r4, #136]
-	cmp	r3, r0
-	beq	.L1759
-.L1752:
-	mov	r1, r5
-	ldr	r0, .L1768
-	movw	r7, #2520
-	bl	List_remove_node
-	ldrh	r3, [r4, r7]
-	cmp	r3, #0
-	beq	.L1765
-.L1754:
+	ldr	r3, .L1367
 	movw	r2, #65535
-	sub	r3, r3, #1
-	cmp	r5, r2
-	movw	r2, #2520
-	strh	r3, [r4, r2]	@ movhi
-	beq	.L1755
-	ldr	r3, [r4, #16]
-	mov	r2, #0
-	mov	r0, r5
-	strh	r2, [r3, r6]	@ movhi
-	bl	INSERT_FREE_LIST
-.L1755:
-	movw	r3, #3282
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	bne	.L1766
-.L1756:
-	movw	r2, #2520
-	ldrh	r3, [r4, #236]
-	ldrh	r1, [r4, r2]
-	ldrh	r2, [r4, #20]
-	add	r3, r3, r1
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r3, [r3]
+	str	r3, [sp, #44]
+	ldrh	r3, [r0]
 	cmp	r3, r2
-	bgt	.L1767
-	mov	r0, #1
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1759:
-	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1748:
-	bl	List_update_data_list
+	beq	.L1235
+	ldrh	r3, [r0, #2]
+	mov	fp, r0
+	ldr	r4, .L1367+4
+	str	r3, [sp, #12]
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	ldr	r1, [sp, #12]
+	str	r3, [sp, #28]
+	movw	r3, #306
+	ldrh	r3, [r4, r3]
+	cmp	r3, r1
+	mov	r3, #0
+	strheq	r3, [r0, #4]	@ movhi
+	ldrhne	r0, [r0, #16]
+	bne	.L1237
+.L1365:
+	strb	r3, [fp, #6]
+.L1235:
+	ldr	r3, .L1367
 	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1765:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2824
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1768+4
-	bl	sftl_printk
-	ldrh	r3, [r4, r7]
-	b	.L1754
-.L1767:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2827
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1768+4
-	bl	sftl_printk
-	mov	r0, #1
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1766:
-	mov	r0, r5
-	bl	FtlGcFreeBadSuperBlk.part.12
-	b	.L1756
-.L1769:
-	.align	2
-.L1768:
-	.word	.LANCHOR0+12
-	.word	.LANCHOR1+476
-	.fnend
-	.size	update_vpc_list, .-update_vpc_list
-	.align	2
-	.global	decrement_vpc_count
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	decrement_vpc_count, %function
-decrement_vpc_count:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #65535
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	cmp	r0, r3
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1303
+	bl	__stack_chk_fail
+.L1238:
+	uxth	r1, r3
+	add	r1, fp, r1, lsl #1
+	ldrh	r0, [r1, #16]
+.L1237:
+	cmp	r0, r2
+	uxth	r6, r3
+	add	r3, r3, #1
+	beq	.L1238
+	mov	r1, #1
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
 	mov	r5, r0
-	beq	.L1771
-	movw	r4, #:lower16:.LANCHOR0
-	lsl	r7, r0, #1
-	movt	r4, #:upper16:.LANCHOR0
-	ldr	r1, [r4, #16]
-	ldrh	r2, [r1, r7]
-	cmp	r2, #0
-	beq	.L1784
-	sub	r2, r2, #1
-	add	r6, r4, #3248
-	strh	r2, [r1, r7]	@ movhi
-	ldrh	r0, [r6]
-	cmp	r0, r3
-	beq	.L1777
-	cmp	r5, r0
-	bne	.L1778
-.L1783:
-	mov	r4, #0
-.L1770:
-	mov	r0, r4
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1771:
-	ldr	r6, .L1785
-	ldrh	r0, [r6]
-	cmp	r0, r5
-	subne	r4, r6, #3248
-	beq	.L1777
-.L1778:
-	bl	update_vpc_list
-	ldr	r2, [r4, #12]
-	movw	r3, #43691
-	ldr	ip, [r4, #8]
-	movt	r3, 43690
-	ldr	r1, [r4, #16]
-	adds	r4, r0, #0
-	strh	r5, [r6]	@ movhi
-	movne	r4, #1
-	sub	r2, r2, ip
-	asr	r2, r2, #1
-	mul	r3, r3, r2
-	uxth	r2, r3
-	mov	r3, r2
-	lsl	r2, r2, #1
-	cmp	r3, r5
-	ldrh	r2, [r1, r2]
-	clz	r2, r2
-	lsr	r2, r2, #5
-	moveq	r2, #0
-	cmp	r2, #0
-	beq	.L1770
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2858
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1785+4
-	bl	sftl_printk
-	mov	r0, r4
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1784:
-	movw	r0, #:lower16:.LC121
-	mov	r1, r5
-	movt	r0, #:upper16:.LC121
-	bl	sftl_printk
-	ldr	r3, [r4, #16]
-	ldrh	r4, [r3, r7]
-	cmp	r4, #0
-	bne	.L1783
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2842
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L1785+4
-	bl	sftl_printk
-	b	.L1770
-.L1777:
-	strh	r5, [r6]	@ movhi
-	b	.L1783
-.L1786:
-	.align	2
-.L1785:
-	.word	.LANCHOR0+3248
-	.word	.LANCHOR1+492
-	.fnend
-	.size	decrement_vpc_count, .-decrement_vpc_count
-	.align	2
-	.global	FtlSuperblockPowerLostFix
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 24
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	movt	r6, #:upper16:.LANCHOR0
-	.pad #28
-	sub	sp, sp, #28
-	mov	r4, r0
-	mvn	r1, #2
-	ldr	r7, [r6, #3384]
-	mvn	r0, #0
-	ldr	r3, [r6, #3352]
-	mvn	r2, #1
-	str	r0, [sp, #16]
-	movw	r8, #:lower16:__stack_chk_guard
-	str	r7, [sp, #12]
-	movt	r8, #:upper16:__stack_chk_guard
+	beq	.L1239
+	ldrh	r3, [r4, #236]
+	mov	r2, #0
+	ldr	r0, [r4, #3292]
+	mov	r6, r2
+	movw	r8, #65535
+	mov	r9, #20
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #3180]
 	str	r3, [sp, #8]
+	movw	r3, #314
+	ldrh	lr, [r4, r3]
+	ldr	r3, .L1367+8
+	ldr	r4, [r4, #3184]
+	ldrh	r7, [r3]
+	add	r3, fp, #16
+	mov	ip, r3
+	str	r3, [sp, #24]
+.L1240:
+	ldr	r1, [sp, #4]
+	uxth	r3, r2
+	cmp	r3, r1
+	bcc	.L1244
+	ldr	r4, .L1367+4
+	mov	r2, #0
+	mov	r1, r6
+	movw	r9, #65535
+	bl	FlashReadPages
+	ldr	r3, [r4, #2596]
+	uxth	r2, r5
+	ldr	r8, [r4, #3292]
+	str	r2, [sp, #8]
+	sub	r3, r3, #1
+	str	r3, [sp, #4]
+	mov	r7, r8
 	mov	r3, #0
-	str	r1, [r7, #8]
-	movw	r1, #61589
-	str	r2, [r7, #12]
-	ldrh	r2, [r4]
-	ldr	r0, [r8]
-	strh	r3, [r7]	@ movhi
-	movw	r3, #22136
-	strh	r2, [r7, #2]	@ movhi
-	movt	r3, 4660
-	ldr	r2, [r6, #3352]
-	str	r0, [sp, #20]
-	str	r1, [r2]
-	ldr	r2, [r6, #3352]
-	str	r3, [r2, #4]
-	ldrh	r3, [r4, #4]
-	tst	r3, #1
-	beq	.L1809
-	mov	r5, #6
-.L1788:
-	sub	r5, r5, #1
-	mov	r9, #0
-	b	.L1791
-.L1792:
-	ldr	lr, [r6, #2648]
-	mov	r1, #1
+.L1245:
+	uxth	r2, r3
+	cmp	r6, r2
+	bhi	.L1250
+	addeq	r3, r5, #1
+	uxtheq	r3, r3
+	streq	r3, [sp, #8]
+	bne	.L1248
+.L1360:
+	ldr	r0, [r8, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	movw	r3, #306
+	ldr	r2, [sp, #8]
+	ldrh	r3, [r4, r3]
+	str	r0, [sp, #16]
+	ldr	r1, [sp, #16]
+	cmp	r3, r2
+	ldr	r0, [sp, #28]
+	ldrheq	r3, [sp, #8]
+	ldr	r2, [sp, #12]
+	strheq	r3, [fp, #2]	@ movhi
+	moveq	r3, #0
+	strbeq	r3, [fp, #6]
+	strheq	r3, [fp, #4]	@ movhi
+	ldr	r3, [sp, #8]
+	cmp	r3, r2
+	cmpeq	r1, r0
+	moveq	r2, r1
+	moveq	r1, r3
+	beq	.L1366
+	movw	r3, #65535
+	cmp	r9, r3
+	bne	.L1254
+	ldrb	r3, [fp, #8]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1255
+.L1254:
+	ldr	r3, [r4, #3452]
+	uxth	r8, r5
+	uxth	r5, r5
+	ldr	r7, .L1367+4
+	movw	r9, #65535
+	cmn	r3, #1
+	ldreq	r3, [sp, #4]
+	streq	r3, [r4, #3452]
+	ldr	r3, [sp, #12]
+	add	r3, r3, #7
+	cmp	r5, r3
+	subgt	r5, r8, #7
+	ldrle	r5, [sp, #12]
+	uxthgt	r5, r5
+.L1258:
+	cmp	r5, r8
+	bhi	.L1265
 	mov	r3, #0
-	mov	r0, sp
-	mov	r2, r3
-	add	ip, lr, r1
-	str	lr, [r7, #4]
-	cmn	ip, #1
-	moveq	ip, r9
-	str	ip, [r6, #2648]
-	bl	FlashProgPages
-	ldrh	r0, [r4]
-	bl	decrement_vpc_count
-	cmn	r5, #1
-	ldrh	r3, [r4, #4]
-	beq	.L1790
+	ldrh	lr, [r7, #236]
+	ldr	r0, [r7, #3292]
+	mov	r6, r3
+	ldr	r1, [sp, #24]
+	mov	ip, #20
+	b	.L1266
+.L1239:
+	ldr	r3, [sp, #12]
 	cmp	r3, #0
-	sub	r5, r5, #1
-	beq	.L1790
-.L1791:
-	mov	r0, r4
-	bl	get_new_active_ppa
-	cmn	r0, #1
-	str	r0, [sp, #4]
-	bne	.L1792
-	ldrh	r3, [r4, #4]
-.L1790:
-	ldrh	r2, [r4]
-	movw	lr, #310
-	ldr	ip, [r6, #16]
-	mov	r0, #0
-	lsl	r2, r2, #1
-	ldrh	r1, [ip, r2]
-	sub	r3, r1, r3
-	strh	r3, [ip, r2]	@ movhi
-	ldrh	r3, [r6, lr]
-	ldr	r2, [sp, #20]
-	strb	r0, [r4, #6]
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r3, [r8]
-	strh	r0, [r4, #4]	@ movhi
-	cmp	r2, r3
-	bne	.L1810
-	add	sp, sp, #28
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1809:
+	beq	.L1241
+	movw	r2, #1800
+	ldr	r1, .L1367+12
+	ldr	r0, .L1367+16
+	bl	sftl_printk
+.L1241:
+	ldr	r3, [sp, #28]
 	cmp	r3, #0
-	beq	.L1790
-	mov	r5, #5
-	b	.L1788
-.L1810:
-	bl	__stack_chk_fail
-	.fnend
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
-	.align	2
-	.global	FtlWriteDump_data
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 32
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r5, #:lower16:__stack_chk_guard
-	movt	r5, #:upper16:__stack_chk_guard
-	.pad #36
-	sub	sp, sp, #36
-	ldrh	r3, [r4, #44]
-	ldr	r2, [r5]
+	cmpne	r6, r3
+	beq	.L1242
+	movw	r2, #1801
+	ldr	r1, .L1367+12
+	ldr	r0, .L1367+16
+	bl	sftl_printk
+.L1242:
+	mov	r3, #0
+	strh	r3, [fp, #2]	@ movhi
+	b	.L1365
+.L1244:
+	ldrh	r3, [ip], #2
+	cmp	r3, r8
+	beq	.L1243
+	mla	r1, r9, r6, r0
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r1, #4]
+	mul	r3, lr, r6
+	add	r10, r3, #3
 	cmp	r3, #0
-	str	r2, [sp, #28]
-	beq	.L1812
-	ldrb	r2, [r4, #48]	@ zero_extendqisi2
+	movlt	r3, r10
+	ldr	r10, [sp, #8]
+	bic	r3, r3, #3
+	add	r3, r10, r3
+	str	r3, [r1, #8]
+	mul	r3, r7, r6
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r10, r3, #3
+	cmp	r3, #0
+	movlt	r3, r10
+	bic	r3, r3, #3
+	add	r3, r4, r3
+	str	r3, [r1, #12]
+.L1243:
+	add	r2, r2, #1
+	b	.L1240
+.L1250:
+	ldr	r2, [r7]
+	cmp	r2, #0
+	bne	.L1246
+	ldr	r10, [r7, #12]
+	ldr	r2, [r10, #4]
+	cmn	r2, #1
+	beq	.L1247
+	ldr	r1, [r4, #2596]
+	mov	r0, r2
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	addne	r2, r2, #1
+	strne	r2, [r4, #2596]
+.L1247:
+	ldr	r2, [r10]
+	cmn	r2, #1
+	bne	.L1249
+.L1248:
+	uxth	r2, r5
+	uxth	r3, r3
+	str	r2, [sp, #8]
+	mov	r2, #20
+	mla	r8, r2, r3, r8
+	b	.L1360
+.L1246:
+	ldr	r9, [sp, #8]
+.L1249:
+	add	r3, r3, #1
+	add	r7, r7, #20
+	b	.L1245
+.L1260:
+	ldrh	r2, [r1], #2
+	add	r3, r3, #1
+	cmp	r2, r9
+	mlane	r10, ip, r6, r0
+	addne	r6, r6, #1
+	orrne	r2, r5, r2, lsl #10
+	uxthne	r6, r6
+	strne	r2, [r10, #4]
+.L1266:
+	uxth	r2, r3
+	cmp	lr, r2
+	bhi	.L1260
+	mov	r2, #0
+	mov	r1, r6
+	bl	FlashReadPages
+	ldr	r3, [r7, #3292]
+	mov	r2, #20
+	mla	r6, r2, r6, r3
+.L1261:
+	cmp	r6, r3
+	addeq	r5, r5, #1
+	uxtheq	r5, r5
+	beq	.L1258
+.L1264:
+	ldr	r2, [r3]
 	cmp	r2, #0
-	beq	.L1834
-.L1812:
+	bne	.L1255
+	ldr	r2, [r3, #12]
+	ldrh	r1, [r2]
+	cmp	r1, r9
+	beq	.L1263
+	ldr	r2, [r2, #4]
+	cmn	r2, #1
+	strne	r2, [r7, #3452]
+.L1263:
+	add	r3, r3, #20
+	b	.L1261
+.L1265:
+	mvn	r3, #0
+	str	r3, [r7, #3452]
+.L1255:
+	mov	r2, #1
+	movw	r3, #3476
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r9, [sp, #12]
+	ldr	r4, .L1367+4
+.L1267:
+	ldrh	ip, [r4, #236]
 	mov	r3, #0
-	strb	r3, [r4, #50]
-.L1811:
+	ldr	r0, [r4, #3292]
+	mov	r10, r3
+	ldr	r1, [sp, #24]
+	movw	lr, #65535
+	mov	r5, #20
+.L1268:
+	uxth	r2, r3
+	cmp	ip, r2
+	bhi	.L1270
+	mov	r2, #0
+	mov	r1, r10
+	bl	FlashReadPages
+	mov	r3, #0
+.L1364:
+	str	r3, [sp, #20]
+	ldrh	r3, [sp, #20]
+	cmp	r10, r3
+	bhi	.L1298
+	ldr	r3, .L1367+20
+	add	r9, r9, #1
+	uxth	r9, r9
+	ldrh	r3, [r3]
+	cmp	r3, r9
+	bne	.L1267
+	ldrh	r2, [r4, #236]
+	movw	r0, #65535
+	mov	r3, #0
+	strh	r9, [fp, #2]	@ movhi
+	strh	r3, [fp, #4]	@ movhi
+.L1299:
+	uxth	r1, r3
+	cmp	r1, r2
+	bcs	.L1235
+	ldr	r1, [sp, #24]
+	ldrh	ip, [r1], #2
+	cmp	ip, r0
+	str	r1, [sp, #24]
+	add	r1, r3, #1
+	bne	.L1365
+	mov	r3, r1
+	b	.L1299
+.L1270:
+	ldrh	r2, [r1], #2
+	add	r3, r3, #1
+	cmp	r2, lr
+	mlane	r6, r5, r10, r0
+	orrne	r2, r9, r2, lsl #10
+	addne	r10, r10, #1
+	uxthne	r10, r10
+	strne	r2, [r6, #4]
+	b	.L1268
+.L1298:
+	ldr	r3, [sp, #20]
+	mov	r6, #20
+	ldr	r8, [r4, #3292]
+	mul	r6, r6, r3
+	add	r7, r8, r6
+	ldr	r5, [r7, #4]
+	ubfx	r0, r5, #10, #16
+	str	r5, [sp, #40]
+	bl	P2V_plane
+	ldr	r3, [sp, #12]
+	cmp	r9, r3
+	bcc	.L1272
 	ldr	r2, [sp, #28]
-	ldr	r3, [r5]
+	moveq	r3, #1
+	movne	r3, #0
+	cmp	r2, r0
+	movls	r3, #0
+	andhi	r3, r3, #1
+	cmp	r3, #0
+	bne	.L1272
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #16]
+	cmp	r9, r3
+	cmpeq	r2, r0
+	beq	.L1273
+	ldr	r3, [r8, r6]
+	cmn	r3, #1
+	beq	.L1274
+	ldr	r7, [r7, #12]
+	movw	r3, #61589
+	ldrh	r2, [r7]
 	cmp	r2, r3
-	bne	.L1835
-	add	sp, sp, #36
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1834:
-	movw	r2, #310
-	ldrb	r1, [r4, #47]	@ zero_extendqisi2
-	ldrh	r2, [r4, r2]
-	mul	r2, r2, r1
-	cmp	r3, r2
-	beq	.L1812
-	ldrb	r7, [r4, #50]	@ zero_extendqisi2
-	cmp	r7, #0
-	bne	.L1811
-	ldr	r9, [r4, #2608]
-	mov	r2, r7
-	add	r1, sp, #4
-	ldrh	r8, [r4, #36]
-	sub	r9, r9, #1
-	mov	r0, r9
+	ldrhne	r0, [fp]
+	bne	.L1361
+	ldr	r3, [r7, #4]
+	cmn	r3, #1
+	str	r3, [sp, #4]
+	beq	.L1276
+	mov	r0, r3
+	ldr	r1, [r4, #2596]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	ldrne	r3, [sp, #4]
+	addne	r3, r3, #1
+	strne	r3, [r4, #2596]
+.L1276:
+	ldrh	r2, [r7]
+	movw	r3, #61589
+	cmp	r2, r3
+	beq	.L1277
+	mov	r2, #1952
+	ldr	r1, .L1367+12
+	ldr	r0, .L1367+16
+	bl	sftl_printk
+.L1277:
+	ldr	r5, [r7, #8]
+	add	r1, sp, #36
+	ldr	r3, [r7, #12]
+	mov	r2, #0
+	mov	r0, r5
+	str	r3, [sp, #32]
 	bl	log2phys
-	ldr	r3, [sp, #4]
-	ldr	r6, [r4, #3384]
-	ldr	r0, [r4, #3352]
+	ldr	r1, [r4, #3452]
+	cmn	r1, #1
+	beq	.L1278
+	ldr	r0, [sp, #4]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1278
+	ldr	r3, [sp, #32]
 	cmn	r3, #1
-	str	r9, [sp, #24]
-	str	r3, [sp, #12]
-	str	r0, [sp, #16]
-	str	r6, [sp, #20]
-	str	r7, [r6, #4]
-	beq	.L1814
-	mov	r2, r7
+	beq	.L1279
+	ldr	r0, [r4, #3292]
+	mov	r2, #0
 	mov	r1, #1
-	add	r0, sp, #8
+	add	r0, r0, r6
+	str	r3, [r0, #4]
+	ldr	r7, [r0, #12]
 	bl	FlashReadPages
-.L1815:
-	lsl	r8, r8, #2
-	movw	r3, #61589
-	movt	r3, 65535
-	cmp	r8, #0
-	strh	r3, [r6]	@ movhi
-	sub	r8, r8, #1
-	beq	.L1817
-	ldrh	r3, [r4, #44]
-	cmp	r3, #0
-	beq	.L1817
-	mov	r7, #0
-	ldr	r10, .L1836
-	mov	fp, r7
-	b	.L1818
-.L1821:
-	ldrh	r3, [r4, #44]
-	add	r7, r7, #1
+	ldr	r2, [r4, #3292]
+	ldr	r1, [r2, r6]
+	add	r3, r2, r6
+	cmn	r1, #1
+	bne	.L1280
+.L1281:
+	mvn	r3, #0
+	str	r3, [sp, #32]
+.L1288:
+	ldr	r7, [sp, #32]
+	cmn	r7, #1
+	beq	.L1272
+.L1302:
+	ubfx	r0, r7, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4, #244]
+	mov	r5, r0
+	cmp	r3, r0
+	bhi	.L1294
+	movw	r2, #2057
+	ldr	r1, .L1367+12
+	ldr	r0, .L1367+16
+	bl	sftl_printk
+.L1294:
+	ldr	r2, [r4, #76]
+	lsl	r3, r5, #1
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1817
-.L1818:
-	ldr	r2, [sp, #12]
-	mov	r0, r10
-	ldrh	r3, [r4, #40]
-	str	r9, [r6, #8]
-	str	r2, [r6, #12]
-	strh	r3, [r6, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	lr, [r4, #2648]
-	mov	r1, #1
-	mov	r3, #0
-	str	r0, [sp, #12]
-	mov	r2, r3
-	add	r0, sp, #8
-	add	ip, lr, r1
-	str	lr, [r6, #4]
-	cmn	ip, #1
-	moveq	ip, fp
-	str	ip, [r4, #2648]
-	bl	FlashProgPages
-	ldrh	r0, [r4, #40]
+	beq	.L1295
+	mov	r0, r5
+.L1361:
 	bl	decrement_vpc_count
-	cmp	r8, r7
-	bne	.L1821
-.L1817:
-	mov	r3, #1
-	strb	r3, [r4, #50]
-	b	.L1811
-.L1814:
-	movw	r3, #318
-	mov	r1, #255
-	ldrh	r2, [r4, r3]
-	bl	memset
-	b	.L1815
-.L1835:
-	bl	__stack_chk_fail
-.L1837:
-	.align	2
-.L1836:
-	.word	.LANCHOR0+40
-	.fnend
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
-	.align	2
-	.global	l2p_flush
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	l2p_flush, %function
-l2p_flush:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	bl	FtlWriteDump_data
-	movt	r5, #:upper16:.LANCHOR0
-	movw	r3, #342
-	ldrh	r3, [r5, r3]
-	cmp	r3, #0
-	beq	.L1844
-	ldr	r6, .L1846
-	mov	r4, #0
-	b	.L1841
-.L1840:
-	add	r4, r4, #1
-	ldrh	r3, [r6]
-	uxth	r4, r4
-	cmp	r3, r4
-	bls	.L1844
-.L1841:
-	ldr	r3, [r5, #2532]
-	add	r2, r4, r4, lsl #1
-	add	r3, r3, r2, lsl #2
-	ldr	r3, [r3, #4]
-	cmp	r3, #0
-	bge	.L1840
-	mov	r0, r4
-	bl	flush_l2p_region
-	b	.L1840
-.L1844:
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L1847:
-	.align	2
-.L1846:
-	.word	.LANCHOR0+342
-	.fnend
-	.size	l2p_flush, .-l2p_flush
-	.align	2
-	.global	FtlSysFlush
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSysFlush, %function
-FtlSysFlush:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	bl	l2p_flush
-	mov	r0, #1
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-	mov	r0, #0
-	pop	{r4, pc}
-	.fnend
-	.size	FtlSysFlush, .-FtlSysFlush
-	.align	2
-	.global	sftl_deinit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	sftl_deinit, %function
-sftl_deinit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR2
-	push	{r4, lr}
-	.save {r4, lr}
-	movt	r3, #:upper16:.LANCHOR2
-	ldr	r4, [r3]
-	cmp	r4, #1
-	beq	.L1853
-	mov	r0, #0
-	pop	{r4, pc}
-.L1853:
-	bl	l2p_flush
-	mov	r0, r4
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-	mov	r0, #0
-	pop	{r4, pc}
+	b	.L1272
+.L1279:
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #36]
+	cmp	r2, r3
+	bne	.L1272
+	mov	r2, #1
+	add	r1, sp, #32
+	mov	r0, r5
+	bl	log2phys
+.L1272:
+	ldr	r3, [sp, #20]
+	add	r3, r3, #1
+	b	.L1364
+.L1280:
+	ldr	r1, [r7, #8]
+	cmp	r5, r1
+	bne	.L1281
+	ldr	r8, [r7, #4]
+	ldr	r0, [r4, #3452]
+	mov	r1, r8
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1281
+	ldr	r1, [sp, #36]
+	ldr	r0, [sp, #40]
+	cmp	r1, r0
+	bne	.L1283
+.L1286:
+	ldr	r1, [sp, #32]
+	mov	r0, r5
+	bl	FtlReUsePrevPpa
+	b	.L1281
+.L1283:
+	ldr	r0, [sp, #32]
+	cmp	r1, r0
+	beq	.L1281
+	cmn	r1, #1
+	streq	r1, [r2, r6]
+	beq	.L1285
+	str	r1, [r3, #4]
+	mov	r2, #0
+	mov	r1, #1
+	mov	r0, r3
+	ldr	r7, [r3, #12]
+	bl	FlashReadPages
+.L1285:
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3, r6]
+	cmn	r3, #1
+	beq	.L1286
+	ldr	r3, [r7, #4]
+	ldr	r0, [r4, #3452]
+	mov	r1, r3
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1286
+	mov	r1, r3
+	mov	r0, r8
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1281
+	b	.L1286
+.L1278:
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #36]
+	cmp	r2, r3
+	beq	.L1288
+	ldr	r1, [sp, #32]
+	cmn	r1, #1
+	beq	.L1290
+	ldr	r3, [r4, #252]
+	cmp	r3, r1, lsr #10
+	ldrls	r0, .L1367+24
+	bls	.L1363
+.L1290:
+	mov	r2, #1
+	add	r1, sp, #40
+	mov	r0, r5
+	bl	log2phys
+	ldr	r7, [sp, #36]
+	cmn	r7, #1
+	beq	.L1288
+	ldr	r3, [sp, #32]
+	cmp	r7, r3
+	beq	.L1302
+	ubfx	r0, r7, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4, #28]
+	cmp	r3, r0
+	beq	.L1293
+	ldrh	r3, [r4, #80]
+	cmp	r3, r0
+	beq	.L1293
+	ldrh	r3, [r4, #128]
+	cmp	r3, r0
+	bne	.L1288
+.L1293:
+	ldr	r0, [r4, #3292]
+	mov	r2, #0
+	mov	r1, #1
+	str	r7, [r0, #4]
+	ldr	r6, [r0, #12]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L1288
+	ldr	r1, [r6, #4]
+	ldr	r0, [sp, #4]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	bne	.L1288
+	mov	r2, #1
+	add	r1, sp, #36
+	mov	r0, r5
+	bl	log2phys
+	b	.L1288
+.L1295:
+	ldr	r0, .L1367+28
+	mov	r1, r5
+.L1363:
+	bl	sftl_printk
+	b	.L1272
+.L1274:
+	ldr	r3, [r4, #3480]
+	cmp	r3, #31
+	addls	r2, r4, r3, lsl #2
+	addls	r3, r3, #1
+	strls	r3, [r4, #3480]
+	strls	r5, [r2, #3484]
+	ldrh	r0, [fp]
+	bl	decrement_vpc_count
+	ldr	r3, [r4, #3452]
+	cmn	r3, #1
+	ldreq	r3, [sp, #4]
+	beq	.L1362
+	ldr	r2, [sp, #4]
+	cmp	r2, r3
+	bcs	.L1272
+	mov	r3, r2
+.L1362:
+	str	r3, [r4, #3452]
+	b	.L1272
+.L1273:
+	ldrb	r3, [sp, #16]	@ zero_extendqisi2
+	ldr	r2, [sp, #16]
+	ldr	r1, [sp, #8]
+	strb	r3, [fp, #6]
+	ldrh	r3, [sp, #8]
+	strh	r3, [fp, #2]	@ movhi
+.L1366:
+	mov	r0, fp
+	bl	ftl_sb_update_avl_pages
+	b	.L1235
+.L1303:
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1368:
+	.align	2
+.L1367:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+316
+	.word	.LANCHOR1+435
+	.word	.LC8
+	.word	.LANCHOR0+306
+	.word	.LC109
+	.word	.LC110
 	.fnend
-	.size	sftl_deinit, .-sftl_deinit
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
-	.global	FtlRecoverySuperblock
+	.global	ftl_check_vpc
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 56
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r3, #:lower16:__stack_chk_guard
-	ldrh	r1, [r0]
-	.pad #60
-	sub	sp, sp, #60
-	movt	r3, #:upper16:__stack_chk_guard
-	ldr	r2, [r3]
-	str	r3, [sp, #32]
-	movw	r3, #65535
-	cmp	r1, r3
-	str	r0, [sp, #16]
-	str	r2, [sp, #52]
-	beq	.L1856
-	movw	r4, #:lower16:.LANCHOR0
-	movw	r2, #310
-	movt	r4, #:upper16:.LANCHOR0
-	ldrh	r10, [r0, #2]
-	ldrh	r2, [r4, r2]
-	ldrb	r1, [r0, #6]	@ zero_extendqisi2
-	cmp	r2, r10
-	str	r1, [sp, #12]
-	beq	.L2024
-	ldr	r1, [sp, #16]
-	ldrh	r0, [r1, #16]
-	cmp	r0, r3
-	bne	.L1957
-	mov	r2, r0
-	mov	r5, #0
-.L1859:
-	add	r5, r5, #1
-	uxth	r5, r5
-	add	r3, r1, r5, lsl #1
-	ldrh	r0, [r3, #16]
-	cmp	r0, r2
-	beq	.L1859
-.L1858:
-	mov	r1, #1
-	bl	FtlGetLastWrittenPage
-	cmn	r0, #1
-	mov	fp, r0
-	beq	.L1860
-	ldrh	r2, [r4, #36]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r5, .L1395
+	mov	r4, #0
+	ldr	r6, .L1395+4
+	ldr	r3, [r5]
+	ldr	r1, .L1395+8
+	ldr	r0, .L1395+12
+	ldr	r7, .L1395+16
+	str	r3, [sp, #12]
+	bl	sftl_printk
+	mov	r2, #8192
+	mov	r1, #0
+	ldr	r0, .L1395+16
+	bl	ftl_memset
+	str	r5, [sp, #4]
+	mov	r5, r6
+.L1370:
+	ldr	r3, [r6, #2556]
+	cmp	r4, r3
+	bcc	.L1372
+	ldr	r8, .L1395+16
+	mov	r4, #0
+	ldr	r10, .L1395+20
+	mov	r6, r4
+	movw	r9, #65535
+.L1373:
+	ldrh	r2, [r5, #244]
+	uxth	r3, r4
+	cmp	r2, r3
+	bhi	.L1375
+	ldr	r4, [r5, #2536]
+	cmp	r4, #0
+	beq	.L1376
+	ldr	r3, [r5, #2520]
+	mov	r7, #0
+	ldrh	r8, [r5, #228]
+	mov	fp, #6
+	ldr	r9, .L1395+16
+	sub	r4, r4, r3
+	ldr	r3, .L1395+24
+	asr	r4, r4, #1
+	ldr	r10, .L1395+28
+	mul	r4, r3, r4
+	uxth	r4, r4
+.L1377:
+	uxth	r3, r7
+	cmp	r8, r3
+	bls	.L1376
+	ldr	r2, [r5, #76]
+	lsl	r3, r4, #1
+	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L2025
-	sub	r7, r2, #1
-	movw	r2, #318
-	ldrh	r2, [r4, r2]
-	uxth	r7, r7
-	ldr	r3, .L2044
-	mov	r5, #0
-	add	r7, r7, #8
-	ldr	r0, [r4, #3336]
-	str	r2, [sp, #4]
-	movw	r8, #65535
-	ldr	r2, [sp, #16]
-	ldrh	r3, [r3]
-	ldr	r9, [r4, #3232]
-	add	r6, r2, #14
-	str	r4, [sp, #20]
-	add	r7, r2, r7, lsl #1
-	ldr	r2, [r4, #3236]
-	mov	r4, r3
-	str	r10, [sp, #8]
-	mov	lr, r2
-.L1866:
-	ldrh	r1, [r6, #2]!
-	cmp	r1, r8
-	beq	.L1865
+	beq	.L1378
+	mov	r6, #1
+	ldrh	r3, [r9, r3]
+	mov	r1, r4
+	mov	r0, r10
+	bl	sftl_printk
+.L1378:
+	mul	r4, fp, r4
+	ldr	r3, [r5, #2520]
+	add	r7, r7, #1
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L1377
+.L1376:
+	cmp	r6, #0
+	beq	.L1369
+	movw	r2, #2383
+	ldr	r1, .L1395+8
+	ldr	r0, .L1395+32
+	bl	sftl_printk
+.L1369:
 	ldr	r3, [sp, #4]
-	mul	ip, r4, r5
-	add	r2, r5, r5, lsl #2
-	add	r10, r5, #1
-	orr	r1, fp, r1, lsl #10
-	add	r2, r0, r2, lsl #2
-	mul	r3, r3, r5
-	uxth	r5, r10
-	str	r1, [r2, #4]
-	add	r1, ip, #3
-	cmp	r3, #0
-	add	r10, r3, #3
-	movlt	r3, r10
-	cmp	ip, #0
-	movlt	ip, r1
-	bic	r3, r3, #3
-	bic	ip, ip, #3
-	add	r3, r9, r3
-	add	ip, lr, ip
-	str	r3, [r2, #8]
-	str	ip, [r2, #12]
-.L1865:
-	cmp	r7, r6
-	bne	.L1866
-	ldr	r4, [sp, #20]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1381
+	bl	__stack_chk_fail
+.L1372:
 	mov	r2, #0
-	mov	r1, r5
-	ldr	r10, [sp, #8]
-	bl	FlashReadPages
-	ldr	r3, [r4, #2648]
-	cmp	r5, #0
-	sub	r3, r3, #1
-	str	r3, [sp, #20]
-	beq	.L2026
-	ldr	ip, [r4, #3336]
-	uxth	r6, fp
-	movw	r7, #65535
-	str	r6, [sp, #24]
-	mov	r3, #0
-	mov	r2, ip
-	b	.L1874
-.L2028:
-	ldr	lr, [r2, #12]
-	ldr	r1, [lr, #4]
-	cmn	r1, #1
-	beq	.L1870
-	ldr	r0, [r4, #2648]
-	cmp	r1, r0
-	bls	.L1871
-	sub	r0, r1, r0
-	cmp	r0, #-2147483648
-	bhi	.L1870
-.L1872:
-	add	r1, r1, #1
-	str	r1, [r4, #2648]
-.L1870:
-	ldr	r1, [lr]
-	cmn	r1, #1
-	beq	.L2027
-.L1869:
+	add	r1, sp, #8
+	mov	r0, r4
+	bl	log2phys
+	ldr	r0, [sp, #8]
+	cmn	r0, #1
+	beq	.L1371
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	lsl	r0, r0, #1
+	ldrh	r3, [r7, r0]
 	add	r3, r3, #1
-	add	r2, r2, #20
-	uxth	r3, r3
-	cmp	r5, r3
-	beq	.L1868
-.L1874:
-	ldr	r1, [r2]
-	cmp	r1, #0
-	beq	.L2028
-	mov	r7, r6
-	b	.L1869
-.L1860:
-	cmp	r10, #0
-	bne	.L2029
-.L1863:
-	ldr	r3, [sp, #12]
-	cmp	r3, #0
-	cmpne	r3, r5
-	beq	.L1864
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1801
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2044+4
-	bl	sftl_printk
-.L1864:
-	ldr	r2, [sp, #16]
-	mov	r3, #0
-	strh	r3, [r2, #2]	@ movhi
-	strb	r3, [r2, #6]
-.L1856:
-	ldr	r3, [sp, #32]
-	mov	r0, #0
-	ldr	r2, [sp, #52]
-	ldr	r3, [r3]
+	strh	r3, [r7, r0]	@ movhi
+.L1371:
+	add	r4, r4, #1
+	b	.L1370
+.L1375:
+	uxth	r1, r4
+	ldr	r3, [r5, #76]
+	lsl	r7, r1, #1
+	ldrh	r2, [r3, r7]
+	ldrh	r3, [r8, r7]
 	cmp	r2, r3
-	bne	.L2030
-	add	sp, sp, #60
+	beq	.L1374
+	mov	r0, r10
+	bl	sftl_printk
+	ldr	r3, [r5, #76]
+	ldrh	r3, [r3, r7]
+	cmp	r3, r9
+	beq	.L1374
+	ldrh	r2, [r8, r7]
+	cmp	r2, r3
+	movhi	r6, #1
+.L1374:
+	add	r4, r4, #1
+	b	.L1373
+.L1381:
+	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1871:
-	sub	r0, r0, r1
-	cmp	r0, #-2147483648
-	bhi	.L1872
-	ldr	r1, [lr]
-	cmn	r1, #1
-	bne	.L1869
-.L2027:
+.L1396:
+	.align	2
+.L1395:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+457
+	.word	.LC111
+	.word	check_vpc_table
+	.word	.LC112
+	.word	-1431655765
+	.word	.LC113
+	.word	.LC8
+	.fnend
+	.size	ftl_check_vpc, .-ftl_check_vpc
+	.align	2
+	.global	ftl_scan_all_data
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	mov	r5, #0
+	ldr	r6, .L1407
+	.pad #36
+	sub	sp, sp, #36
+	mov	r1, #0
+	ldr	r7, .L1407+4
+	ldr	r9, .L1407+8
+	ldr	r3, [r6]
+	mov	r4, r7
+	ldr	r0, .L1407+12
+	str	r3, [sp, #28]
+	bl	sftl_printk
+.L1398:
+	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	beq	.L1868
-	ldr	r2, .L2044+8
-	add	r3, r3, r3, lsl #2
-	add	ip, ip, r3, lsl #2
-	mov	r0, r2
-	str	r2, [sp, #8]
-	movw	r2, #306
-	ldrh	r9, [r0]
-	ldrh	r1, [r4, r2]
-	ldr	r5, [ip, #4]
-.L2013:
-	ubfx	r5, r5, #10, #16
-	mov	r0, r5
-	bl	__aeabi_uidiv
-	smulbb	r8, r0, r9
-	mov	r1, r9
+	bcc	.L1404
+	ldr	r2, [sp, #28]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1405
+	bl	__stack_chk_fail
+.L1404:
+	mov	r2, #0
+	add	r1, sp, #24
 	mov	r0, r5
-	bl	__aeabi_uidivmod
-	add	r1, r8, r1
+	bl	log2phys
+	ubfx	r3, r5, #0, #11
+	cmp	r3, #0
+	bne	.L1399
 	ldr	r2, [sp, #24]
-	uxth	r3, r1
-	str	r3, [sp, #28]
-	movw	r3, #310
-	ldrh	r3, [r4, r3]
-	cmp	r3, r2
-	beq	.L2031
-.L1878:
+	mov	r1, r5
+	mov	r0, r9
+	bl	sftl_printk
+.L1399:
 	ldr	r3, [sp, #24]
-	ldr	r2, [sp, #28]
-	ldr	r1, [sp, #12]
-	cmp	r3, r10
-	cmpeq	r2, r1
-	beq	.L2032
-	movw	r3, #65535
-	cmp	r7, r3
-	beq	.L2033
-.L1880:
-	ldr	r3, [r4, #3260]
-	uxth	r2, fp
-	ldr	r0, [r4, #3336]
 	cmn	r3, #1
-	ldreq	r3, [sp, #20]
-	streq	r3, [r4, #3260]
-	add	r3, r10, #7
-	cmp	r2, r3
-	subgt	r8, r6, #7
-	movle	r8, r10
-	uxthgt	r8, r8
-	cmp	r6, r8
-	bcc	.L1895
-	ldr	r9, [sp, #16]
-	movw	r7, #65535
-.L1885:
-	ldrh	r2, [r4, #36]
-	cmp	r2, #0
-	beq	.L2034
-	sub	ip, r2, #1
-	mov	r5, #0
-	uxth	ip, ip
-	add	r2, r9, #14
-	add	ip, ip, #8
-	add	ip, r9, ip, lsl #1
-.L1887:
-	ldrh	r3, [r2, #2]!
-	cmp	r3, r7
-	beq	.L1886
-	add	r1, r5, r5, lsl #2
-	add	r5, r5, #1
-	uxth	r5, r5
-	orr	r3, r8, r3, lsl #10
-	add	r1, r0, r1, lsl #2
-	str	r3, [r1, #4]
-.L1886:
-	cmp	ip, r2
-	bne	.L1887
+	beq	.L1401
+	str	r3, [r4, #3460]
 	mov	r2, #0
-	mov	r1, r5
+	ldr	r3, [r4, #3304]
+	mov	r1, #1
+	ldr	r8, [r4, #3336]
+	ldr	r0, .L1407+16
+	str	r3, [r4, #3464]
+	str	r5, [r4, #3472]
+	str	r8, [r4, #3468]
+	str	r2, [r4, #3456]
 	bl	FlashReadPages
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	cmpne	r3, #256
+	beq	.L1402
+	ldr	r3, [r8, #8]
+	cmp	r5, r3
+	beq	.L1401
+.L1402:
+	ldr	r2, [r4, #3464]
+	ldr	r3, [r4, #3468]
+	ldr	r0, .L1407+20
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	mov	r1, r5
+	ldr	r2, [r2]
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp]
+	ldr	r3, [r3]
+	ldr	r2, [r4, #3460]
+	bl	sftl_printk
+.L1401:
+	add	r5, r5, #1
+	b	.L1398
+.L1405:
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1408:
+	.align	2
+.L1407:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LC115
+	.word	.LC114
+	.word	.LANCHOR0+3456
+	.word	.LC116
+	.fnend
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.align	2
+	.global	FtlGcScanTempBlk
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1443
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #60
+	sub	sp, sp, #60
+	mov	r4, r0
+	str	r1, [sp, #12]
+	ldr	r3, [r3]
+	str	r3, [sp, #52]
+	ldr	r3, .L1443+4
+	ldrh	r5, [r3, #4]
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L1435
 	cmp	r5, #0
-	ldr	r0, [r4, #3336]
-	beq	.L1889
-	ldr	r3, [r0]
-	cmp	r3, #0
-	bne	.L1881
-	sub	r3, r5, #1
-	mov	r2, r0
-	uxth	r3, r3
-	add	r3, r3, r3, lsl #2
-	add	r3, r0, r3, lsl #2
-	b	.L1892
-.L1894:
-	ldr	r1, [r2, #20]!
-	cmp	r1, #0
-	bne	.L1881
-.L1892:
-	ldr	r1, [r2, #12]
-	ldrh	ip, [r1]
-	cmp	ip, r7
-	beq	.L1893
-	ldr	r1, [r1, #4]
-	cmn	r1, #1
-	strne	r1, [r4, #3260]
-.L1893:
-	cmp	r3, r2
-	bne	.L1894
-.L1889:
-	add	r8, r8, #1
-	uxth	r8, r8
-	cmp	r6, r8
-	bcs	.L1885
-.L1895:
-	mvn	r3, #0
-	str	r3, [r4, #3260]
-.L1881:
-.L1898:
-	movw	r3, #:lower16:.LC123
-	mov	r2, #1
-	movt	r3, #:upper16:.LC123
-	mov	fp, r10
-	str	r3, [sp, #36]
-	movw	r3, #3534
-	strh	r2, [r4, r3]	@ movhi
-	ldrh	r2, [r4, #36]
-	cmp	r2, #0
-	beq	.L1899
-.L2038:
-	ldr	r3, [sp, #16]
-	sub	lr, r2, #1
-	uxth	lr, lr
+	bne	.L1410
+.L1411:
+	bl	FtlGcPageVarInit
+	b	.L1412
+.L1435:
 	mov	r5, #0
-	movw	r6, #65535
-	add	lr, lr, #8
-	add	r1, r3, #14
-	add	lr, r3, lr, lsl #1
-.L1901:
-	ldrh	r3, [r1, #2]!
-	cmp	r3, r6
-	beq	.L1900
-	add	r2, r5, r5, lsl #2
-	add	r5, r5, #1
-	uxth	r5, r5
-	orr	r3, fp, r3, lsl #10
-	add	r2, r0, r2, lsl #2
-	str	r3, [r2, #4]
-.L1900:
-	cmp	lr, r1
-	bne	.L1901
+.L1410:
+	ldr	r2, .L1443+8
+	movw	r3, #306
+	ldrh	r3, [r2, r3]
+	ldr	r2, [sp, #12]
+	cmp	r3, r2
+	beq	.L1411
+.L1412:
+	ldr	r6, .L1443+8
+	mov	r3, #0
+	str	r3, [sp, #4]
+.L1428:
+	ldrh	r2, [r4]
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1413
+.L1431:
+	ldrh	r3, [r6, #236]
 	mov	r2, #0
-	mov	r1, r5
+	ldr	r0, [r6, #3292]
+	add	ip, r4, #16
+	ldr	fp, [r6, #3184]
+	mov	r8, r2
+	str	r3, [sp, #8]
+	movw	r7, #65535
+	ldr	r3, [r6, #3180]
+	mov	r9, #20
+	str	r3, [sp, #16]
+	ldr	r3, .L1443+12
+	ldrh	r3, [r3]
+	str	r3, [sp, #20]
+	ldr	r3, .L1443+16
+	ldrh	lr, [r3]
+.L1414:
+	ldr	r1, [sp, #8]
+	uxth	r3, r2
+	cmp	r1, r3
+	bhi	.L1416
+	mov	r10, #0
+	mov	r2, #0
+	mov	r1, r8
 	bl	FlashReadPages
-	cmp	r5, #0
-	beq	.L1903
-	sub	r7, r5, #1
-	mov	r8, #0
-	uxth	r7, r7
-	add	r7, r7, #1
-	add	r7, r7, r7, lsl #2
-	lsl	r7, r7, #2
-	b	.L1942
-.L2035:
-	ldr	r3, [sp, #16]
-	ldrh	r0, [r3]
-	bl	decrement_vpc_count
-.L1904:
-	add	r8, r8, #20
-	cmp	r8, r7
-	beq	.L1903
-.L1942:
-	ldr	r6, [r4, #3336]
-	cmp	fp, r10
-	add	r6, r6, r8
-	ldr	r9, [r6, #4]
-	str	r9, [sp, #48]
-	bcc	.L1904
-	ldr	r3, [sp, #8]
-	ubfx	r2, r9, #10, #16
-	mov	r0, r2
-	str	r2, [sp, #4]
-	ldrh	r5, [r3]
-	ldr	r3, .L2044+12
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
+.L1417:
+	uxth	r3, r10
+	cmp	r8, r3
+	bhi	.L1429
+	ldr	r3, [sp, #4]
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r3, r3, #1
+	str	r3, [sp, #4]
 	ldr	r2, [sp, #4]
-	mov	r1, r5
-	smulbb	r5, r0, r5
-	mov	r0, r2
-	bl	__aeabi_uidivmod
-	add	r5, r5, r1
 	ldr	r3, [sp, #12]
-	uxth	r5, r5
-	sub	r2, fp, r10
-	clz	r2, r2
-	lsr	r2, r2, #5
-	cmp	r3, r5
-	movls	r2, #0
-	cmp	r2, #0
-	bne	.L1904
-	ldr	r3, [sp, #24]
-	ldr	r2, [sp, #28]
-	cmp	fp, r3
-	cmpeq	r2, r5
-	beq	.L1905
-	ldr	r2, [r6]
-	cmn	r2, #1
-	beq	.L1906
-	ldr	r6, [r6, #12]
-	movw	r2, #61589
-	ldrh	r1, [r6]
-	cmp	r1, r2
-	bne	.L2035
-	ldr	r3, [r6, #4]
-	cmn	r3, #1
-	str	r3, [sp, #20]
-	beq	.L1909
-	ldr	r2, [r4, #2648]
 	cmp	r3, r2
-	bls	.L1910
-	sub	r2, r3, r2
-	cmp	r2, #-2147483648
-	bhi	.L1909
-.L1912:
-	ldr	r3, [sp, #20]
-	movw	r2, #61589
-	add	r1, r3, #1
-	str	r1, [r4, #2648]
-	ldrh	r1, [r6]
-	cmp	r1, r2
-	beq	.L1909
-	movw	r0, #:lower16:.LC8
-	mov	r2, #1952
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2044+4
-	bl	sftl_printk
-.L1909:
-	ldr	r5, [r6, #8]
+	ldr	r2, .L1443+20
+	bls	.L1430
+.L1432:
+	ldrh	r3, [r2]
+	cmp	r3, r5
+	bhi	.L1431
+.L1413:
+	ldr	r3, .L1443+4
+	mvn	r2, #0
+	strh	r5, [r4, #2]	@ movhi
+	mov	r1, r5
+	mov	r0, r4
+	strh	r2, [r3, #4]	@ movhi
 	mov	r2, #0
-	ldr	ip, [r6, #12]
-	add	r1, sp, #44
-	mov	r0, r5
-	str	ip, [sp, #40]
-	bl	log2phys
-	ldr	r2, [r4, #3260]
-	cmn	r2, #1
-	beq	.L1913
+	strb	r2, [r4, #6]
+	bl	ftl_sb_update_avl_pages
+	b	.L1433
+.L1416:
+	ldrh	r3, [ip], #2
+	cmp	r3, r7
+	beq	.L1415
+	mla	r1, r9, r8, r0
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r1, #4]
 	ldr	r3, [sp, #20]
-	cmp	r3, r2
-	bls	.L1914
-	sub	r2, r3, r2
-	cmp	r2, #-2147483648
-	bhi	.L1913
-.L1915:
-	ldr	r0, [sp, #40]
-	cmn	r0, #1
-	beq	.L2036
-	ldr	ip, [r4, #3336]
-	mov	r2, #0
-	mov	r1, #1
-	add	ip, ip, r8
-	str	r0, [ip, #4]
-	mov	r0, ip
-	ldr	r6, [ip, #12]
-	bl	FlashReadPages
-	ldr	r2, [r4, #3336]
-	ldr	r1, [r2, r8]
-	add	ip, r2, r8
-	cmn	r1, #1
-	beq	.L1917
-	ldr	r2, [r6, #8]
-	cmp	r5, r2
-	beq	.L2037
-.L1917:
-	add	r8, r8, #20
-	mvn	r2, #0
-	cmp	r8, r7
-	str	r2, [sp, #40]
-	bne	.L1942
-.L1903:
-	ldr	r2, .L2044+16
-	add	fp, fp, #1
-	uxth	fp, fp
-	ldrh	r2, [r2]
-	cmp	r2, fp
-	beq	.L1943
-	ldrh	r2, [r4, #36]
-	ldr	r0, [r4, #3336]
-	cmp	r2, #0
-	bne	.L2038
-.L1899:
-	mov	r1, r2
-	bl	FlashReadPages
-	b	.L1903
-.L2024:
-	mov	r3, #0
-	strh	r3, [r0, #4]	@ movhi
-	strb	r3, [r0, #6]
-	b	.L1856
-.L1906:
-	ldr	r2, [r4, #3536]
-	ldr	r3, [sp, #16]
-	cmp	r2, #31
-	addls	r1, r4, r2, lsl #2
-	addls	r2, r2, #1
-	strls	r2, [r4, #3536]
-	strls	r9, [r1, #3540]
-	ldrh	r0, [r3]
-	bl	decrement_vpc_count
-	ldr	r2, [r4, #3260]
-	ldr	r3, [sp, #20]
-	cmn	r2, #1
-	beq	.L2015
-	cmp	r2, r3
-	bls	.L1904
-.L2015:
-	str	r3, [r4, #3260]
-	b	.L1904
-.L1914:
-	ldr	r3, [sp, #20]
-	sub	r2, r2, r3
-	cmp	r2, #-2147483648
-	bhi	.L1915
-.L1913:
-	ldr	r1, [sp, #44]
-	ldr	r2, [sp, #48]
+	mul	r3, r3, r8
+	add	r10, r3, #3
+	cmp	r3, #0
+	movlt	r3, r10
+	ldr	r10, [sp, #16]
+	bic	r3, r3, #3
+	add	r3, r10, r3
+	str	r3, [r1, #8]
+	mul	r3, lr, r8
+	add	r8, r8, #1
+	uxth	r8, r8
+	add	r10, r3, #3
+	cmp	r3, #0
+	movlt	r3, r10
+	bic	r3, r3, #3
+	add	r3, fp, r3
+	str	r3, [r1, #12]
+.L1415:
+	add	r2, r2, #1
+	b	.L1414
+.L1429:
+	mov	r3, #20
+	ldr	r2, [r6, #3292]
+	mul	fp, r3, r10
+	ldr	r7, [r2, fp]
+	add	r1, r2, fp
+	ldr	r3, [r1, #4]
+	ldr	r9, [r1, #12]
+	cmp	r7, #0
+	str	r3, [sp, #8]
+	bne	.L1418
+	ldrh	r1, [r9]
+	movw	r2, #65535
 	cmp	r1, r2
-	beq	.L2014
-	ldr	r1, [sp, #40]
-	cmn	r1, #1
-	beq	.L1930
-	ldr	r2, [r4, #256]
-	cmp	r2, r1, lsr #10
-	bls	.L2039
-.L1930:
-	mov	r2, #1
-	add	r1, sp, #48
-	mov	r0, r5
+	bne	.L1419
+.L1441:
+	ldrh	r3, [r4]
+	mov	r1, #0
+	ldr	r2, [r6, #76]
+	mov	r5, #0
+	lsl	r3, r3, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r4]
+	bl	INSERT_FREE_LIST
+	mvn	r3, #0
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r6, #176]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1428
+.L1419:
+	ldr	r0, [r9, #8]
+	ldr	r2, [r6, #2556]
+	cmp	r0, r2
+	bhi	.L1441
+	mov	r2, r7
+	add	r1, sp, #28
 	bl	log2phys
-	ldr	r6, [sp, #44]
-	ldr	r9, [sp, #40]
-	cmn	r6, #1
-	beq	.L1929
-	cmp	r6, r9
-	beq	.L1932
-	ldr	r3, .L2044+12
-	ubfx	r0, r6, #10, #16
-	ldrh	r1, [r3]
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #8]
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	ldrh	r2, [r4, #40]
-	uxth	r0, r0
-	cmp	r2, r0
-	beq	.L1933
-	ldrh	r2, [r4, #88]
-	cmp	r2, r0
-	beq	.L1933
-	ldrh	r2, [r4, #136]
-	cmp	r2, r0
-	beq	.L1933
-.L1929:
-	cmn	r9, #1
-	beq	.L1904
-.L1932:
-	ldr	r3, .L2044+12
-	ubfx	r0, r9, #10, #16
-	ldrh	r1, [r3]
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #8]
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	ldrh	r2, [r4, #20]
-	uxth	r5, r0
-	cmp	r2, r5
-	bls	.L2040
-.L1938:
-	ldr	r1, [r4, #16]
-	lsl	r2, r5, #1
-	ldrh	r2, [r1, r2]
-	cmp	r2, #0
-	beq	.L1939
-	mov	r0, r5
-	bl	decrement_vpc_count
-	b	.L1904
-.L1910:
-	ldr	r3, [sp, #20]
-	sub	r2, r2, r3
-	cmp	r2, #-2147483648
-	bhi	.L1912
-	b	.L1909
-.L1933:
-	ldr	ip, [r4, #3336]
-	mov	r2, #0
+	ldr	r2, [r9, #12]
+	ldr	r1, [sp, #28]
+	sub	r0, r2, r1
+	cmn	r1, #1
+	clz	r0, r0
+	lsr	r0, r0, #5
+	moveq	r0, #0
+	cmp	r0, #0
+	bne	.L1422
+.L1427:
+	ldr	r2, [r9, #8]
+.L1442:
+	ldr	r1, [sp, #8]
+	add	r10, r10, #1
+	ldr	r0, [r9, #12]
+	bl	FtlGcUpdatePage
+	b	.L1417
+.L1422:
+	str	r2, [sp, #36]
 	mov	r1, #1
-	str	r6, [ip, #4]
-	mov	r0, ip
-	ldr	r6, [ip, #12]
+	ldr	r2, [r6, #3320]
+	add	r0, sp, #32
+	str	r2, [sp, #40]
+	ldr	r2, [r6, #3340]
+	str	r2, [sp, #44]
+	mov	r2, r7
 	bl	FlashReadPages
-	ldr	r2, [r4, #3336]
-	ldr	r2, [r2]
-	cmn	r2, #1
-	beq	.L2014
-	ldr	r2, [r6, #4]
-	ldr	r3, [sp, #20]
-	cmp	r3, r2
-	bls	.L1935
-	sub	r2, r3, r2
-	cmp	r2, #-2147483648
-	bls	.L2014
-.L1936:
-	add	r1, sp, #44
-	mov	r0, r5
-	mov	r2, #1
-	bl	log2phys
-.L2014:
-	ldr	r9, [sp, #40]
-	b	.L1929
-.L1939:
-	mov	r1, r5
-	ldr	r0, [sp, #36]
+	ldr	r3, .L1443+24
+	ldr	r1, [r6, #3292]
+	ldrh	r2, [r3]
+	add	r3, r1, fp
+	ldr	r1, [sp, #40]
+	lsl	r2, r2, #7
+.L1424:
+	cmp	r7, r2
+	beq	.L1427
+	ldr	r0, [r3, #8]
+	ldr	ip, [r0, r7, lsl #2]
+	ldr	r0, [r1, r7, lsl #2]
+	cmp	ip, r0
+	beq	.L1425
+	ldr	r2, [sp, #36]
+	ldrh	r1, [r4]
+	ldr	r0, .L1443+28
 	bl	sftl_printk
-	b	.L1904
-.L2036:
-	ldr	r1, [sp, #44]
-	ldr	r2, [sp, #48]
-	cmp	r1, r2
-	bne	.L1904
-	mov	r0, r5
-	mov	r2, #1
-	add	r1, sp, #40
+	b	.L1441
+.L1425:
+	add	r7, r7, #1
+	b	.L1424
+.L1418:
+	mvn	r2, #0
+	b	.L1442
+.L1430:
+	ldr	r1, .L1443+4
+	movw	r0, #65535
+	ldrh	r3, [r1, #4]
+	cmp	r3, r0
+	beq	.L1432
+	ldr	r0, [sp, #4]
+	add	r3, r3, r0
+	strh	r3, [r1, #4]	@ movhi
+	ldrh	r3, [r2]
+	cmp	r3, r5
+	bls	.L1432
+.L1433:
+	ldr	r3, .L1443
+	mvn	r0, #0
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1434
+	bl	__stack_chk_fail
+.L1434:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1444:
+	.align	2
+.L1443:
+	.word	__stack_chk_guard
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR0+314
+	.word	.LANCHOR0+316
+	.word	.LANCHOR0+306
+	.word	.LANCHOR0+262
+	.word	.LC117
+	.fnend
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlReadRefresh
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 96
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #100
+	sub	sp, sp, #100
+	ldr	r6, .L1463
+	ldr	r7, .L1463+4
+	ldr	r10, [r6, #2724]
+	mov	r5, r6
+	ldr	r3, [r7]
+	cmp	r10, #0
+	str	r3, [sp, #92]
+	beq	.L1446
+	ldr	r2, [r6, #2728]
+	ldr	r3, [r6, #2556]
+	cmp	r2, r3
+	bcs	.L1447
+	mov	r4, #2048
+.L1452:
+	ldr	r0, [r5, #2728]
+	ldr	r3, [r5, #2556]
+	cmp	r0, r3
+	bcc	.L1448
+.L1451:
+	mvn	r0, #0
+.L1445:
+	ldr	r2, [sp, #92]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1457
+	bl	__stack_chk_fail
+.L1448:
+	mov	r2, #0
+	add	r1, sp, #4
 	bl	log2phys
-	b	.L1904
-.L2040:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2057
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2044+4
-	bl	sftl_printk
-	b	.L1938
-.L1905:
-	ldr	r3, [sp, #16]
-	ldr	r2, [sp, #28]
-	ldr	r1, [sp, #24]
-	mov	r0, r3
-	strb	r2, [r3, #6]
-	strh	r1, [r3, #2]	@ movhi
-	bl	ftl_sb_update_avl_pages
-	b	.L1856
-.L2039:
-	movw	r0, #:lower16:.LC122
-	movt	r0, #:upper16:.LC122
-	bl	sftl_printk
-	b	.L1904
-.L2031:
-	ldr	r2, [sp, #16]
-	mov	r3, #0
-	ldrh	r1, [sp, #24]
-	strb	r3, [r2, #6]
-	strh	r1, [r2, #2]	@ movhi
-	strh	r3, [r2, #4]	@ movhi
-	b	.L1878
-.L2026:
-	ldr	ip, [r4, #3336]
-	uxth	r6, fp
-	movw	r7, #65535
-.L1868:
-	ldr	r3, .L2044+8
-	movw	r2, #306
-	ldr	r5, [ip, #4]
-	ldrh	r1, [r4, r2]
-	mov	r0, r3
-	str	r3, [sp, #8]
-	add	r3, r6, #1
-	ldrh	r9, [r0]
-	uxth	r3, r3
-	str	r3, [sp, #24]
-	b	.L2013
-.L2033:
-	ldr	r3, [sp, #16]
-	ldrb	r3, [r3, #8]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1880
-	ldr	r0, [r4, #3336]
-	b	.L1881
-.L2032:
-	mov	r1, r3
-	ldr	r0, [sp, #16]
-	bl	ftl_sb_update_avl_pages
-	b	.L1856
-.L2037:
-	ldr	r9, [r6, #4]
-	ldr	r2, [r4, #3260]
-	cmp	r9, r2
-	bcc	.L2041
-	sub	r2, r9, r2
-	cmp	r2, #-2147483648
-	bls	.L1917
-.L1920:
-	ldr	r2, [sp, #44]
-	ldr	r1, [sp, #48]
-	cmp	r2, r1
-	beq	.L1923
-	ldr	r1, [sp, #40]
-	cmp	r2, r1
-	beq	.L1917
+	ldr	r2, [sp, #4]
+	ldr	r3, [r5, #2728]
 	cmn	r2, #1
-	streq	r2, [ip]
-	beq	.L1922
-	str	r2, [ip, #4]
+	add	r3, r3, #1
+	str	r3, [r5, #2728]
+	beq	.L1450
+	str	r3, [sp, #24]
+	add	r0, sp, #96
+	ldr	r3, [r5, #3328]
 	mov	r1, #1
+	str	r2, [sp, #12]
 	mov	r2, #0
-	mov	r0, ip
-	ldr	r6, [ip, #12]
+	str	r2, [r0, #-88]!
+	str	r3, [sp, #16]
+	add	r3, sp, #28
+	str	r3, [sp, #20]
 	bl	FlashReadPages
-.L1922:
-	ldr	r2, [r4, #3336]
-	ldr	r2, [r2, r8]
-	cmn	r2, #1
-	beq	.L1923
-	ldr	r2, [r6, #4]
-	ldr	r1, [r4, #3260]
-	cmp	r2, r1
-	bcs	.L1924
-	sub	r1, r1, r2
-	cmp	r1, #-2147483648
-	bhi	.L1923
-.L1926:
-	cmp	r9, r2
-	bls	.L2042
-	sub	r2, r9, r2
-	cmp	r2, #-2147483648
-	bhi	.L1917
-.L1923:
-	mov	r0, r5
-	ldr	r1, [sp, #40]
-	bl	FtlReUsePrevPpa
-	b	.L1917
-.L1935:
-	ldr	r3, [sp, #20]
-	sub	r2, r2, r3
-	cmp	r2, #-2147483648
-	bhi	.L2014
-	b	.L1936
-.L1943:
-	ldrh	r0, [r4, #36]
-	mov	r3, #0
-	ldr	r2, [sp, #16]
-	cmp	r0, r3
-	strh	fp, [r2, #2]	@ movhi
-	strh	r3, [r2, #4]	@ movhi
-	beq	.L1856
-	ldrh	ip, [r2, #16]
-	movw	r2, #65535
-	cmp	ip, r2
-	ldreq	r2, [sp, #16]
-	addeq	r2, r2, #16
-	beq	.L1947
-	b	.L1945
-.L1948:
-	ldrh	r1, [r2, #2]!
-	cmp	r1, ip
-	bne	.L2043
-.L1947:
-	add	r3, r3, #1
-	uxth	r3, r3
+	ldr	r3, [sp, #8]
+	cmp	r3, #256
+	bne	.L1451
+	ldr	r0, [sp, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L1451
+.L1450:
+	subs	r4, r4, #1
+	bne	.L1452
+	b	.L1451
+.L1447:
+	ldr	r3, [r6, #2560]
+	mov	r0, #0
+	str	r0, [r6, #2724]
+	str	r0, [r6, #2728]
+	str	r3, [r6, #2720]
+	b	.L1445
+.L1446:
+	ldr	r1, [r6, #2616]
+	movw	r4, #10000
+	ldr	r9, [r6, #2560]
+	ldr	r8, [r6, #2720]
+	cmp	r1, r4
+	ldr	fp, .L1463+8
+	add	r3, r9, #1048576
+	movhi	r4, #31
+	movls	r4, #63
+	cmp	r8, r3
+	bhi	.L1456
+	ldr	r3, [r6, #2556]
+	lsr	r1, r1, #10
+	mov	r0, #1000
+	add	r1, r1, #1
+	mul	r0, r0, r3
+	bl	__aeabi_uidiv
+	add	r0, r0, r8
+	cmp	r9, r0
+	bhi	.L1456
+	ldrh	r3, [fp, #28]
+	ands	r0, r4, r3
+	movne	r0, r10
+	bne	.L1445
+	ldr	r2, [r6, #2744]
+	cmp	r3, r2
+	beq	.L1445
+.L1456:
+	ldrh	r3, [fp, #28]
+	mov	r0, #0
+	str	r0, [r5, #2728]
+	str	r9, [r5, #2720]
+	str	r3, [r5, #2744]
+	mov	r3, #1
+	str	r3, [r5, #2724]
+	b	.L1445
+.L1457:
+	add	sp, sp, #100
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1464:
+	.align	2
+.L1463:
+	.word	.LANCHOR0
+	.word	__stack_chk_guard
+	.word	.LANCHOR0+2472
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	2
+	.global	l2p_flush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	l2p_flush, %function
+l2p_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, #0
+	ldr	r6, .L1470
+	mov	r7, #12
+	ldr	r5, .L1470+4
+	bl	FtlWriteDump_data
+.L1466:
+	ldrh	r3, [r5]
+	uxth	r0, r4
 	cmp	r3, r0
-	bne	.L1948
-	b	.L1856
-.L1957:
-	mov	r5, #0
-	b	.L1858
-.L2029:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1800
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2044+4
-	bl	sftl_printk
-	b	.L1863
-.L2034:
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r0, [r4, #3336]
-	b	.L1889
-.L2041:
-	sub	r2, r2, r9
-	cmp	r2, #-2147483648
-	bhi	.L1917
-	b	.L1920
-.L2025:
-	mov	r1, r2
-	ldr	r0, [r4, #3336]
-	bl	FlashReadPages
-	ldr	r3, [r4, #2648]
-	uxth	r6, fp
-	movw	r7, #65535
-	ldr	ip, [r4, #3336]
-	sub	r3, r3, #1
-	str	r3, [sp, #20]
-	b	.L1868
-.L2043:
-	uxtb	r3, r3
-.L1945:
-	ldr	r2, [sp, #16]
-	strb	r3, [r2, #6]
-	b	.L1856
-.L1924:
-	sub	r1, r2, r1
-	cmp	r1, #-2147483648
-	bhi	.L1926
-	b	.L1923
-.L2042:
-	sub	r2, r2, r9
-	cmp	r2, #-2147483648
-	bls	.L1917
-	b	.L1923
-.L2030:
+	bhi	.L1468
+	mov	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1468:
+	ldr	r2, [r6, #2544]
+	uxth	r3, r4
+	mla	r3, r7, r3, r2
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1467
+	bl	flush_l2p_region
+.L1467:
+	add	r4, r4, #1
+	b	.L1466
+.L1471:
+	.align	2
+.L1470:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+342
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlVendorPartWrite
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1483
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r10, r2
+	ldr	r4, .L1483+4
+	.pad #108
+	sub	sp, sp, #108
+	mov	r6, r1
+	add	r1, r0, r1
+	ldr	r2, [r3]
+	str	r3, [sp, #4]
+	str	r2, [sp, #100]
+	ldrh	r2, [r4]
+	cmp	r1, r2
+	mvnhi	r9, #0
+	bhi	.L1472
+	sub	r4, r4, #300
+	mov	r8, r0
+	add	r3, r4, #312
+	mov	r9, #0
+	ldrh	r7, [r3]
+	lsr	r7, r0, r7
+	lsl	fp, r7, #2
+.L1474:
+	cmp	r6, #0
+	bne	.L1479
+.L1472:
+	ldr	r3, [sp, #4]
+	mov	r0, r9
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1480
 	bl	__stack_chk_fail
-.L2045:
+.L1479:
+	ldr	r3, [r4, #3376]
+	mov	r0, r8
+	ldr	r2, [r3, fp]
+	ldr	r3, .L1483+8
+	str	r2, [sp, #12]
+	ldrh	r3, [r3]
+	mov	r1, r3
+	str	r3, [sp, #8]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #12]
+	str	r1, [sp]
+	sub	r5, r3, r1
+	uxth	r5, r5
+	cmp	r6, r5
+	uxthcc	r5, r6
+	cmp	r2, #0
+	cmpne	r5, r3
+	movne	r1, #1
+	moveq	r1, #0
+	beq	.L1476
+	ldr	r3, [r4, #3312]
+	add	r0, sp, #16
+	str	r2, [sp, #20]
+	mov	r2, #1
+	mov	r1, r2
+	str	r3, [sp, #24]
+	add	r3, sp, #36
+	str	r3, [sp, #28]
+	bl	FlashReadPages
+.L1477:
+	lsl	r3, r5, #9
+	ldr	r0, [r4, #3312]
+	mov	r1, r10
+	mov	r2, r3
+	str	r3, [sp, #8]
+	ldr	r3, [sp]
+	sub	r6, r6, r5
+	add	r8, r8, r5
+	add	fp, fp, #4
+	add	r0, r0, r3, lsl #9
+	bl	ftl_memcpy
+	mov	r1, r7
+	ldr	r2, [r4, #3312]
+	ldr	r0, .L1483+12
+	add	r7, r7, #1
+	bl	FtlMapWritePage
+	ldr	r3, [sp, #8]
+	cmn	r0, #1
+	mvneq	r9, #0
+	add	r10, r10, r3
+	b	.L1474
+.L1476:
+	ldr	r3, .L1483+16
+	ldr	r0, [r4, #3312]
+	ldrh	r2, [r3]
+	bl	ftl_memset
+	b	.L1477
+.L1480:
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1484:
 	.align	2
-.L2044:
-	.word	.LANCHOR0+320
-	.word	.LANCHOR1+512
-	.word	.LANCHOR0+264
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+310
+.L1483:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0+300
+	.word	.LANCHOR0+262
+	.word	.LANCHOR0+3612
+	.word	.LANCHOR0+314
 	.fnend
-	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
-	.global	sftl_discard
+	.global	Ftl_save_ext_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_discard, %function
-sftl_discard:
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r6, #:lower16:.LANCHOR0
-	movt	r6, #:upper16:.LANCHOR0
-	movw	r8, #:lower16:__stack_chk_guard
-	movt	r8, #:upper16:__stack_chk_guard
-	.pad #20
-	sub	sp, sp, #20
-	ldr	r3, [r6, #344]
-	ldr	r2, [r8]
-	cmp	r3, r1
-	cmpcs	r3, r0
-	str	r2, [sp, #12]
-	bls	.L2058
-	add	r2, r0, r1
-	mov	r4, r1
-	cmp	r3, r2
-	mov	r7, r0
-	bcc	.L2058
-	cmp	r1, #31
-	bls	.L2052
-	movw	r3, #266
-	ldrh	r9, [r6, r3]
-	mov	r1, r9
-	bl	__aeabi_uidiv
-	smulbb	r3, r0, r9
-	mov	r5, r0
-	sub	r7, r7, r3
-	uxth	r7, r7
-	cmp	r7, #0
-	beq	.L2049
-	sub	r7, r9, r7
-	add	r5, r0, #1
-	cmp	r7, r4
-	movcs	r7, r4
-	uxth	r7, r7
-	sub	r4, r4, r7
-.L2049:
-	cmp	r4, r9
-	mvn	r3, #0
-	ldrcs	r7, .L2070
-	str	r3, [sp, #8]
-	addcs	r9, r7, #40
-	bcc	.L2055
-.L2054:
-	mov	r2, #0
-	add	r1, sp, #4
-	mov	r0, r5
-	bl	log2phys
-	ldr	r3, [sp, #4]
-	cmn	r3, #1
-	beq	.L2053
-	ldr	ip, [r6, #3668]
-	mov	r2, #1
-	ldr	r3, [r6, #2616]
-	add	r1, sp, #8
-	mov	r0, r5
-	add	ip, ip, r2
-	add	r3, r3, r2
-	str	ip, [r6, #3668]
-	str	r3, [r6, #2616]
-	bl	log2phys
-	ldr	r0, [sp, #4]
-	ldrh	r1, [r9]
-	ubfx	r0, r0, #10, #16
-	bl	__aeabi_uidivmod
-	ldr	r3, .L2070+4
-	uxth	r0, r1
+	@ link register save eliminated.
+	ldr	r3, .L1487
+	ldr	r2, .L1487+4
+	ldr	r1, [r3, #2644]
+	cmp	r1, r2
+	bxne	lr
+	ldr	r2, .L1487+8
+	mov	r1, #1
+	mov	r0, #0
+	str	r2, [r3, #2648]
+	ldr	r2, [r3, #2584]
+	str	r2, [r3, #2732]
+	ldr	r2, [r3, #2588]
+	str	r2, [r3, #2736]
+	ldr	r2, [r3, #2580]
+	str	r2, [r3, #2652]
+	ldr	r2, [r3, #2568]
+	str	r2, [r3, #2656]
+	ldr	r2, [r3, #2560]
+	str	r2, [r3, #2660]
+	ldr	r2, [r3, #2576]
+	str	r2, [r3, #2664]
+	ldr	r2, [r3, #2604]
+	str	r2, [r3, #2672]
+	ldr	r2, [r3, #2612]
+	str	r2, [r3, #2676]
+	ldr	r2, [r3, #2564]
+	str	r2, [r3, #2680]
+	ldr	r2, [r3, #2572]
+	str	r2, [r3, #2684]
+	ldr	r2, [r3, #2616]
+	str	r2, [r3, #2688]
+	ldr	r2, [r3, #2620]
+	str	r2, [r3, #2692]
+	ldr	r2, .L1487+12
+	b	FtlVendorPartWrite
+.L1488:
+	.align	2
+.L1487:
+	.word	.LANCHOR0
+	.word	1179929683
+	.word	1342177363
+	.word	.LANCHOR0+2644
+	.fnend
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	2
+	.global	FtlEctTblFlush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1497
+	movw	r1, #3656
+	ldrh	r2, [r3, r1]
+	cmp	r2, #31
+	addls	r2, r2, #1
+	movhi	r2, #32
+	strhls	r2, [r3, r1]	@ movhi
+	movls	r2, #1
+	cmp	r0, #0
+	bne	.L1491
+	ldr	r1, [r3, #3352]
+	ldr	r0, [r1, #20]
+	ldr	r1, [r1, #16]
+	add	r2, r2, r0
+	cmp	r1, r2
+	bcc	.L1495
+.L1491:
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r0, #64
+	ldr	r2, [r3, #3352]
+	ldr	r1, [r2, #16]
+	str	r1, [r2, #20]
+	ldr	r1, .L1497+4
+	str	r1, [r2]
+	ldr	r2, [r3, #3352]
+	ldr	r3, .L1497+8
 	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	bl	decrement_vpc_count
-.L2053:
-	ldrh	r3, [r7]
-	add	r5, r5, #1
-	sub	r4, r4, r3
-	cmp	r3, r4
-	bls	.L2054
-.L2055:
-	ldr	r3, [r6, #3668]
-	cmp	r3, #32
-	bhi	.L2068
-.L2052:
+	lsl	r3, r1, #9
+	str	r3, [r2, #12]
+	ldr	r3, [r2, #8]
+	add	r3, r3, #1
+	str	r3, [r2, #8]
+	mov	r3, #0
+	str	r3, [r2, #4]
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
 	mov	r0, #0
-.L2046:
-	ldr	r2, [sp, #12]
-	ldr	r3, [r8]
-	cmp	r2, r3
-	bne	.L2069
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L2068:
-	mov	r4, #0
-	str	r4, [r6, #3668]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	mov	r0, r4
-	b	.L2046
-.L2058:
-	mvn	r0, #0
-	b	.L2046
-.L2069:
-	bl	__stack_chk_fail
-.L2071:
+	pop	{r4, pc}
+.L1495:
+	mov	r0, #0
+	bx	lr
+.L1498:
 	.align	2
-.L2070:
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+264
+.L1497:
+	.word	.LANCHOR0
+	.word	1112818501
+	.word	.LANCHOR0+3344
 	.fnend
-	.size	sftl_discard, .-sftl_discard
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
 	.align	2
-	.global	FtlGcFreeTempBlock
+	.global	sftl_vendor_write
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcFreeTempBlock, %function
-FtlGcFreeTempBlock:
+	.type	sftl_vendor_write, %function
+sftl_vendor_write:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	add	r0, r0, #256
+	b	FtlVendorPartWrite
+	.fnend
+	.size	sftl_vendor_write, .-sftl_vendor_write
+	.align	2
+	.global	FtlVendorPartRead
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1512
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	movw	r10, #:lower16:__stack_chk_guard
-	movt	r10, #:upper16:__stack_chk_guard
-	movw	r3, #65535
-	ldrh	ip, [r5, #136]
-	.pad #12
-	sub	sp, sp, #12
-	ldr	r2, [r10]
-	movw	r1, #310
-	ldrh	r1, [r5, r1]
-	cmp	ip, r3
-	str	r2, [sp, #4]
-	beq	.L2073
-	cmp	r0, #0
-	movw	r4, #:lower16:.LANCHOR2
-	movt	r4, #:upper16:.LANCHOR2
-	beq	.L2074
-	ldrh	r2, [r4, #4]
-	cmp	r2, r3
-	beq	.L2075
-.L2076:
-	mov	r1, #2
-.L2074:
-	ldr	r0, .L2104
-	bl	FtlGcScanTempBlk
-	ldrh	r3, [r4, #4]
-	movw	r2, #65535
-	str	r0, [sp]
-	cmp	r3, r2
-	movne	r0, #1
-	beq	.L2100
-.L2072:
-	ldr	r2, [sp, #4]
-	ldr	r3, [r10]
-	cmp	r2, r3
-	bne	.L2101
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2100:
-	ldrh	r2, [r5, #136]
-	mov	r1, #0
-	str	r1, [r5, #3256]
-	cmp	r2, r3
-	beq	.L2089
-	movw	r4, #310
-	ldrb	r3, [r5, #143]	@ zero_extendqisi2
-	ldrh	r1, [r5, r4]
-	ldr	r9, .L2104+4
-	mul	r0, r1, r3
-	ldrh	ip, [r9]
-	cmp	ip, r0
-	beq	.L2079
-	movw	r0, #:lower16:.LC8
-	mov	r2, #164
-	ldr	r1, .L2104+8
-	movt	r0, #:upper16:.LC8
-	bl	sftl_printk
-	ldrh	r1, [r5, r4]
-	ldrh	r2, [r5, #136]
-	ldrb	r3, [r5, #143]	@ zero_extendqisi2
-.L2079:
-	smulbb	r3, r3, r1
-	ldr	r1, [r5, #16]
-	lsl	r2, r2, #1
-	strh	r3, [r1, r2]	@ movhi
-	ldrh	r2, [r9]
-	ldr	r3, [r5, #2632]
-	cmp	r2, #0
-	add	r3, r3, r2
-	ldrne	fp, .L2104+12
-	str	r3, [r5, #2632]
-	movne	r4, #0
-	beq	.L2087
-.L2086:
-	ldr	r7, [r5, #3276]
-	add	r8, r4, r4, lsl #1
-	ldr	r3, [r5, #2608]
-	add	r6, r7, r8, lsl #2
-	ldr	r0, [r6, #8]
-	cmp	r0, r3
-	bcs	.L2098
-	mov	r2, #0
-	mov	r1, sp
-	bl	log2phys
-	ldr	r0, [r7, r8, lsl #2]
-	ldr	r3, [sp]
-	cmp	r0, r3
-	beq	.L2102
-	ldr	r2, [r6, #4]
-	cmp	r3, r2
-	beq	.L2084
-.L2098:
-	ldrh	r0, [r5, #136]
-	bl	decrement_vpc_count
-.L2084:
-	add	r4, r4, #1
-	ldrh	r3, [r9]
-	uxth	r4, r4
-	cmp	r3, r4
-	bhi	.L2086
-.L2087:
-	movw	r0, #65535
-	bl	decrement_vpc_count
-	ldrh	r0, [r5, #136]
-	ldr	r2, [r5, #16]
-	lsl	r3, r0, #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	beq	.L2103
-	bl	INSERT_DATA_LIST
-.L2088:
-	movw	r3, #3268
-	mvn	r6, #0
-	mov	r4, #0
-	strh	r6, [r5, #136]	@ movhi
-	strh	r4, [r5, r3]	@ movhi
-	strh	r4, [r9]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	movw	r3, #2676
-	ldrh	r2, [r5, #236]
-	ldrh	r3, [r5, r3]
-	strh	r6, [r5, #184]	@ movhi
-	add	r3, r3, r3, lsl #1
-	cmp	r2, r3, asr #2
-	ble	.L2089
-	movw	r3, #3208
-	mov	r2, #20
-	mov	r0, r4
-	strh	r2, [r5, r3]	@ movhi
-	b	.L2072
-.L2102:
-	ldrh	r1, [fp]
-	ubfx	r0, r0, #10, #16
+	mov	r10, r2
+	ldr	r5, .L1512+4
+	.pad #108
+	sub	sp, sp, #108
+	mov	r7, r1
+	add	r1, r0, r1
+	ldr	r2, [r3]
+	str	r3, [sp, #8]
+	str	r2, [sp, #100]
+	ldrh	r2, [r5]
+	cmp	r1, r2
+	mvnhi	r9, #0
+	bhi	.L1500
+	sub	r5, r5, #300
+	mov	r8, r0
+	add	r3, r5, #312
+	mov	r9, #0
+	ldrh	r6, [r3]
+	lsr	r6, r0, r6
+	lsl	fp, r6, #2
+.L1502:
+	cmp	r7, #0
+	bne	.L1508
+.L1500:
+	ldr	r3, [sp, #8]
+	mov	r0, r9
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1509
+	bl	__stack_chk_fail
+.L1508:
+	ldr	r3, [r5, #3376]
+	mov	r0, r8
+	ldr	r3, [r3, fp]
+	str	r3, [sp, #12]
+	ldr	r3, .L1512+8
+	ldrh	r4, [r3]
+	mov	r1, r4
 	bl	__aeabi_uidivmod
-	ldr	r3, .L2104+16
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r7, r0
+	sub	r4, r4, r1
+	ldr	r3, [sp, #12]
+	uxth	r4, r4
+	str	r1, [sp, #4]
+	cmp	r7, r4
+	uxthcc	r4, r7
+	cmp	r3, #0
+	lsl	r2, r4, #9
+	str	r2, [sp, #12]
+	beq	.L1504
+	ldr	r2, [r5, #3312]
+	add	r0, sp, #16
+	str	r3, [sp, #20]
+	str	r3, [sp, #12]
+	str	r2, [sp, #24]
+	add	r2, sp, #36
+	str	r2, [sp, #28]
 	mov	r2, #1
-	add	r1, r6, #4
-	ldr	r0, [r6, #8]
-	bl	log2phys
-	mov	r0, r7
-	bl	decrement_vpc_count
-	b	.L2084
-.L2073:
-	mov	r3, #0
-	str	r3, [r5, #3256]
-.L2089:
-	mov	r0, #0
-	b	.L2072
-.L2103:
-	bl	INSERT_FREE_LIST
-	b	.L2088
-.L2075:
-	ldrh	r3, [r5, #236]
-	mov	r2, #0
-	strh	r2, [r4, #4]	@ movhi
-	cmp	r3, #17
-	bhi	.L2076
-	b	.L2074
-.L2101:
-	bl	__stack_chk_fail
-.L2105:
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [sp, #16]
+	ldr	r3, [sp, #12]
+	cmn	r2, #1
+	ldr	r2, [r5, #3456]
+	mvneq	r9, #0
+	cmp	r2, #256
+	bne	.L1506
+	mov	r2, r3
+	mov	r1, r6
+	ldr	r0, .L1512+12
+	bl	sftl_printk
+	ldr	r2, [r5, #3312]
+	mov	r1, r6
+	ldr	r0, .L1512+16
+	bl	FtlMapWritePage
+.L1506:
+	ldr	r1, [r5, #3312]
+	lsl	r2, r4, #9
+	ldr	r3, [sp, #4]
+	mov	r0, r10
+	add	r1, r1, r3, lsl #9
+	bl	ftl_memcpy
+.L1507:
+	add	r6, r6, #1
+	sub	r7, r7, r4
+	add	r8, r8, r4
+	add	r10, r10, r4, lsl #9
+	add	fp, fp, #4
+	b	.L1502
+.L1504:
+	lsl	r2, r4, #9
+	mov	r1, r3
+	mov	r0, r10
+	bl	ftl_memset
+	b	.L1507
+.L1509:
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1513:
 	.align	2
-.L2104:
-	.word	.LANCHOR0+136
-	.word	.LANCHOR0+3280
-	.word	.LANCHOR1+536
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
+.L1512:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0+300
+	.word	.LANCHOR0+262
+	.word	.LC118
+	.word	.LANCHOR0+3612
 	.fnend
-	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
-	.global	FtlGcPageRecovery
+	.global	FtlLoadEctTbl
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcPageRecovery, %function
-FtlGcPageRecovery:
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	movw	r5, #310
-	add	r0, r4, #136
-	ldrh	r1, [r4, r5]
-	bl	FtlGcScanTempBlk
-	ldrh	r3, [r4, r5]
-	ldrh	r2, [r4, #138]
+	mov	r0, #64
+	ldr	r4, .L1517
+	add	r5, r4, #3344
+	ldr	r2, [r4, #3352]
+	ldrh	r1, [r5]
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #3352]
+	ldr	r2, [r3]
+	ldr	r3, .L1517+4
 	cmp	r2, r3
-	popcc	{r4, r5, r6, pc}
-	ldr	r0, .L2109
-	bl	FtlMapBlkWriteDump_data
+	beq	.L1515
+	ldr	r1, .L1517+8
+	ldr	r0, .L1517+12
+	bl	sftl_printk
+	ldrh	r2, [r5]
+	mov	r1, #0
+	ldr	r0, [r4, #3352]
+	lsl	r2, r2, #9
+	bl	ftl_memset
+.L1515:
 	mov	r0, #0
-	bl	FtlGcFreeTempBlock
-	mov	r3, #0
-	str	r3, [r4, #3256]
 	pop	{r4, r5, r6, pc}
-.L2110:
+.L1518:
 	.align	2
-.L2109:
-	.word	.LANCHOR0+2548
+.L1517:
+	.word	.LANCHOR0
+	.word	1112818501
+	.word	.LC119
+	.word	.LC77
 	.fnend
-	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
 	.align	2
-	.global	Ftl_gc_temp_data_write_back
+	.global	Ftl_load_ext_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_gc_temp_data_write_back, %function
-Ftl_gc_temp_data_write_back:
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	mov	r3, #0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r2, r3
-	ldr	r1, [r4, #3224]
-	ldr	r0, [r4, #3340]
-	bl	FlashProgPages
-	ldr	r3, [r4, #3224]
-	cmp	r3, #0
-	beq	.L2112
-	mov	r3, #0
-	mov	r5, r3
-.L2115:
-	ldr	r1, [r4, #3340]
-	add	r3, r3, r3, lsl #2
-	add	r5, r5, #1
-	uxth	r5, r5
-	ldr	r2, [r1, r3, lsl #2]
-	add	r3, r1, r3, lsl #2
-	ldr	r0, [r3, #12]
-	cmn	r2, #1
-	ldr	r1, [r3, #4]
-	ldrne	r2, [r0, #8]
-	ldr	r0, [r0, #12]
-	bl	FtlGcUpdatePage
-	ldr	r6, [r4, #3224]
-	mov	r3, r5
-	cmp	r5, r6
-	bcc	.L2115
-	cmp	r6, #0
-	ldr	r7, [r4, #3340]
-	beq	.L2112
-	ldr	lr, [r4, #3244]
-	mov	r5, #0
-	ldr	r1, [r4, #3228]
-	mov	r3, r5
-	mov	r8, r5
-.L2116:
-	cmp	lr, #0
-	beq	.L2118
-	add	r3, r3, r3, lsl #2
-	ldr	r2, [r1]
-	add	r3, r7, r3, lsl #2
-	ldr	ip, [r3, #8]
-	cmp	r2, ip
-	beq	.L2123
-	mov	r3, #0
-	b	.L2117
-.L2119:
-	ldr	r0, [r1, r2, lsl #2]
-	add	r2, r1, r2, lsl #2
-	cmp	r0, ip
-	beq	.L2120
-.L2117:
-	add	r3, r3, #1
-	uxth	r3, r3
-	cmp	r3, lr
-	add	r2, r3, r3, lsl #1
-	bcc	.L2119
-.L2118:
-	add	r5, r5, #1
-	uxth	r5, r5
-	cmp	r6, r5
-	mov	r3, r5
-	bhi	.L2116
-.L2112:
-	ldrh	r3, [r4, #140]
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r1, #1
+	ldr	r4, .L1523
 	mov	r0, #0
-	str	r0, [r4, #3224]
-	cmp	r3, r0
-	popne	{r4, r5, r6, r7, r8, pc}
-	mov	r0, #1
-	bl	FtlGcFreeTempBlock
-	mov	r0, #1
-	pop	{r4, r5, r6, r7, r8, pc}
-.L2123:
-	mov	r2, r1
-.L2120:
-	str	r8, [r2, #8]
-	b	.L2118
+	ldr	r2, .L1523+4
+	bl	FtlVendorPartRead
+	ldr	r5, .L1523+8
+	ldr	r3, [r4, #2644]
+	cmp	r3, r5
+	beq	.L1520
+	mov	r2, #512
+	mov	r1, #0
+	ldr	r0, .L1523+4
+	bl	ftl_memset
+	str	r5, [r4, #2644]
+.L1520:
+	ldr	r3, [r4, #2644]
+	cmp	r3, r5
+	bne	.L1521
+	ldr	r3, [r4, #2732]
+	str	r3, [r4, #2584]
+	ldr	r3, [r4, #2736]
+	str	r3, [r4, #2588]
+	ldr	r3, [r4, #2652]
+	str	r3, [r4, #2580]
+	ldr	r3, [r4, #2656]
+	str	r3, [r4, #2568]
+	ldr	r3, [r4, #2660]
+	str	r3, [r4, #2560]
+	ldr	r3, [r4, #2664]
+	str	r3, [r4, #2576]
+	ldr	r3, [r4, #2672]
+	str	r3, [r4, #2604]
+	ldr	r3, [r4, #2676]
+	str	r3, [r4, #2612]
+	ldr	r3, [r4, #2680]
+	str	r3, [r4, #2564]
+	ldr	r3, [r4, #2684]
+	str	r3, [r4, #2572]
+	ldr	r3, [r4, #2688]
+	str	r3, [r4, #2616]
+	ldr	r3, [r4, #2692]
+	str	r3, [r4, #2620]
+.L1521:
+	ldr	r3, .L1523+12
+	ldr	r0, [r4, #2600]
+	ldrh	r1, [r4, #244]
+	ldrh	r2, [r3]
+	ldr	r3, [r4, #2604]
+	mla	r0, r0, r2, r3
+	bl	__aeabi_uidiv
+	str	r0, [r4, #2608]
+	pop	{r4, r5, r6, pc}
+.L1524:
+	.align	2
+.L1523:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2644
+	.word	1179929683
+	.word	.LANCHOR0+296
 	.fnend
-	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	2
-	.global	FtlPowerLostRecovery
+	.global	sftl_vendor_read
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlPowerLostRecovery, %function
-FtlPowerLostRecovery:
+	.type	sftl_vendor_read, %function
+sftl_vendor_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r3, #0
-	add	r0, r4, #40
-	str	r3, [r4, #3536]
-	bl	FtlRecoverySuperblock
-	ldrh	r3, [r4, #44]
-	cmp	r3, #0
-	beq	.L2139
-	ldrh	r2, [r4, #40]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L2139
-	add	r0, r4, #40
-	bl	FtlSlcSuperblockCheck.part.7
-.L2139:
-	ldr	r0, .L2148
-	bl	FtlRecoverySuperblock
-	ldrh	r3, [r4, #92]
-	cmp	r3, #0
-	beq	.L2140
-	ldrh	r2, [r4, #88]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L2140
-	ldr	r0, .L2148
-	bl	FtlSlcSuperblockCheck.part.7
-.L2140:
-	bl	FtlGcPageRecovery
-	movw	r0, #65535
-	bl	decrement_vpc_count
-	mov	r0, #0
-	pop	{r4, pc}
-.L2149:
-	.align	2
-.L2148:
-	.word	.LANCHOR0+88
+	@ link register save eliminated.
+	add	r0, r0, #256
+	b	FtlVendorPartRead
 	.fnend
-	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.size	sftl_vendor_read, .-sftl_vendor_read
 	.align	2
-	.global	FtlVpcCheckAndModify
+	.global	FtlMapBlkWriteDump_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlVpcCheckAndModify, %function
-FtlVpcCheckAndModify:
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	movw	r7, #:lower16:__stack_chk_guard
-	movt	r7, #:upper16:__stack_chk_guard
-	movw	r0, #:lower16:.LC107
-	movw	r5, #:lower16:.LANCHOR0
-	.pad #12
-	sub	sp, sp, #12
-	ldr	r3, [r7]
-	movt	r5, #:upper16:.LANCHOR0
-	movt	r0, #:upper16:.LC107
-	ldr	r1, .L2172
-	str	r3, [sp, #4]
-	bl	sftl_printk
-	ldrh	r2, [r5, #248]
-	mov	r1, #0
-	ldr	r0, [r5, #3400]
-	lsl	r2, r2, #1
-	bl	memset
-	ldr	r3, [r5, #2608]
-	cmp	r3, #0
-	ldrne	r6, .L2172+4
-	movne	r4, #0
-	beq	.L2156
-.L2155:
-	mov	r2, #0
-	mov	r1, sp
-	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [sp]
-	cmn	r0, #1
-	beq	.L2154
-	ldrh	r1, [r6]
-	ubfx	r0, r0, #10, #16
-	bl	__aeabi_uidivmod
-	ldr	r3, .L2172+8
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	ldr	r2, [r5, #3400]
-	lsl	r0, r0, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-.L2154:
-	ldr	r3, [r5, #2608]
-	add	r4, r4, #1
-	cmp	r3, r4
-	bhi	.L2155
-.L2156:
-	ldrh	r3, [r5, #20]
-	cmp	r3, #0
-	movwne	r9, #:lower16:.LC124
-	movne	r4, #0
-	movtne	r9, #:upper16:.LC124
-	movwne	r8, #65535
-	beq	.L2153
-.L2161:
-	ldr	r2, [r5, #16]
-	lsl	r6, r4, #1
-	ldr	r3, [r5, #3400]
-	ldrh	r2, [r2, r6]
-	ldrh	r3, [r3, r6]
-	cmp	r2, r8
-	cmpne	r2, r3
-	beq	.L2158
-	mov	r1, r4
-	mov	r0, r9
-	bl	sftl_printk
-	ldrh	r3, [r5, #40]
-	cmp	r3, r4
-	beq	.L2158
-	ldrh	r3, [r5, #136]
-	cmp	r3, r4
-	beq	.L2158
-	ldrh	r3, [r5, #88]
-	cmp	r3, r4
-	beq	.L2158
-	ldr	r3, [r5, #16]
-	ldrh	r2, [r3, r6]
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, [r0, #36]
+	cmp	r3, #0
+	bxeq	lr
+	mov	r3, #0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	str	r3, [r0, #36]
+	mov	r5, r0
+	ldr	r3, .L1533
+	ldrh	r6, [r0, #6]
+	ldr	r2, [r0, #24]
+	ldr	r1, [r3, #3336]
+	mov	r4, r3
+	ldr	r0, [r3, #3308]
+	sub	r6, r6, #1
+	uxth	r6, r6
+	str	r1, [r3, #3468]
+	str	r0, [r3, #3464]
+	ldr	r2, [r2, r6, lsl #2]
 	cmp	r2, #0
-	ldr	r2, [r5, #3400]
-	bne	.L2160
-	ldrh	r2, [r2, r6]
-	strh	r2, [r3, r6]	@ movhi
-.L2158:
-	add	r4, r4, #1
-	ldrh	r3, [r5, #20]
-	uxth	r4, r4
-	cmp	r3, r4
-	bhi	.L2161
-.L2153:
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	ldr	r2, [sp, #4]
-	ldr	r3, [r7]
-	cmp	r2, r3
-	bne	.L2171
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L2160:
-	ldrh	r2, [r2, r6]
-	mov	r0, r4
-	strh	r2, [r3, r6]	@ movhi
-	bl	update_vpc_list
-	b	.L2158
-.L2171:
-	bl	__stack_chk_fail
-.L2173:
+	str	r2, [r3, #3460]
+	beq	.L1528
+	mov	r2, #1
+	add	r0, r3, #3456
+	mov	r1, r2
+	bl	FlashReadPages
+.L1529:
+	ldr	r2, [r4, #3464]
+	mov	r1, r6
+	mov	r0, r5
+	pop	{r4, r5, r6, lr}
+	b	FtlMapWritePage
+.L1528:
+	movw	r3, #314
+	mov	r1, #255
+	ldrh	r2, [r4, r3]
+	bl	ftl_memset
+	b	.L1529
+.L1534:
 	.align	2
-.L2172:
-	.word	.LANCHOR1+556
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
+.L1533:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
-	.global	allocate_data_superblock
+	.global	FtlVpcTblFlush
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	allocate_data_superblock, %function
-allocate_data_superblock:
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	movw	r2, #2520
-	movw	r3, #:lower16:.LC8
-	mov	r7, r0
-	mov	ip, r3
-	ldrh	r1, [r5, r2]
-	ldrh	r3, [r5, #236]
-	mov	r0, ip
-	ldrh	r2, [r5, #20]
-	.pad #12
-	sub	sp, sp, #12
-	movt	r0, #:upper16:.LC8
-	add	r3, r3, r1
-	str	r0, [sp]
-.L2175:
-	cmp	r3, r2
-	bgt	.L2223
-.L2176:
-	ldr	r3, .L2232
-	cmp	r7, r3
-	movne	r1, #0
-	beq	.L2224
-.L2177:
-	ldr	r0, .L2232+4
-	bl	List_pop_index_node
-	ldrh	r3, [r5, #236]
-	mov	r9, r0
-	uxth	r8, r0
-	cmp	r3, #0
-	beq	.L2225
-.L2178:
-	ldrh	r2, [r5, #20]
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, #0
+	ldr	r4, .L1545
+	mov	r1, #255
+	ldr	r6, .L1545+4
+	ldr	r3, [r4, #3304]
+	add	r9, r4, #308
+	ldr	r7, [r4, #3336]
+	mov	fp, r9
+	sub	r8, r6, #156
+	add	r10, r9, #6
+	str	r3, [r4, #3464]
+	movw	r3, #2628
+	ldrh	r3, [r4, r3]
+	str	r7, [r4, #3468]
+	str	r5, [r7, #12]
+	strh	r3, [r7, #2]	@ movhi
+	ldr	r3, .L1545+8
+	strh	r3, [r7]	@ movhi
+	ldr	r3, [r4, #2636]
+	str	r5, [r7, #8]
+	ldrh	r2, [r4, #30]
+	str	r3, [r7, #4]
+	ldr	r3, .L1545+12
+	str	r3, [r4, #2472]
+	ldr	r3, .L1545+16
+	str	r3, [r4, #2476]
+	ldrh	r3, [r6, #6]
+	strh	r3, [r6, #-148]	@ movhi
+	movw	r3, #258
+	ldrh	r3, [r4, r3]
+	strb	r3, [r4, #2482]
+	ldrh	r3, [r4, #28]
+	strh	r3, [r6, #-142]	@ movhi
+	ldrb	r3, [r4, #34]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	ldrh	r2, [r4, #82]
+	strh	r3, [r6, #-140]	@ movhi
+	ldrb	r3, [r4, #36]	@ zero_extendqisi2
+	strb	r3, [r4, #2483]
+	ldrh	r3, [r4, #80]
+	strh	r3, [r6, #-138]	@ movhi
+	ldrb	r3, [r4, #86]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r6, #-136]	@ movhi
+	ldrb	r3, [r4, #88]	@ zero_extendqisi2
+	strb	r3, [r4, #2484]
+	ldrh	r3, [r4, #128]
+	ldrh	r2, [r4, #130]
+	ldr	r0, [r4, #3464]
+	strh	r3, [r6, #-134]	@ movhi
+	ldrb	r3, [r4, #134]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r6, #-132]	@ movhi
+	ldrb	r3, [r4, #136]	@ zero_extendqisi2
+	strb	r3, [r4, #2485]
+	ldr	r3, [r4, #2600]
+	str	r3, [r4, #2504]
+	ldr	r3, [r4, #2592]
+	str	r3, [r4, #2512]
+	ldr	r3, [r4, #2596]
+	str	r3, [r4, #2508]
+	movw	r3, #314
+	ldrh	r2, [r4, r3]
+	bl	ftl_memset
+	mov	r1, r8
+	mov	r2, #48
+	ldr	r0, [r4, #3464]
+	movw	r8, #65535
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #244]
+	ldr	r0, [r4, #3464]
+	ldr	r1, [r4, #76]
+	lsl	r2, r2, #1
+	add	r0, r0, #48
+	bl	ftl_memcpy
+	ldrh	r0, [r4, #244]
+	ldr	r3, [r4, #3464]
+	ldr	r1, [r4, #24]
+	lsr	r2, r0, #3
+	add	r0, r0, #24
+	lsl	r0, r0, #1
+	add	r2, r2, #4
+	bic	r0, r0, #3
+	add	r0, r3, r0
+	bl	ftl_memcpy
+	mov	r0, r5
+	bl	FtlUpdateVaildLpn
+.L1536:
+	ldr	r3, [r4, #3304]
+	ldrh	r1, [r6, #2]
+	ldrh	r2, [r6]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r3, [r4, #3468]
+	orr	r3, r1, r2, lsl #10
+	str	r3, [r4, #3460]
+	ldrh	r3, [r9]
 	sub	r3, r3, #1
-	uxth	r3, r3
-	cmp	r8, r2
-	strh	r3, [r5, #236]	@ movhi
-	bcs	.L2179
-	uxth	r9, r9
-	ldr	r1, [r5, #16]
-	lsl	r9, r9, #1
-	ldrh	r1, [r1, r9]
-	cmp	r1, #0
-	bne	.L2179
-	strh	r8, [r7]	@ movhi
-	mov	r0, r7
-	bl	make_superblock
-	ldrb	r3, [r7, #7]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L2226
-	ldr	r2, .L2232+8
-	ldrh	r3, [r5, #236]
-	ldrh	r1, [r2]
-	ldrh	r2, [r5, #20]
-	add	r3, r3, r1
-	cmp	r3, r2
-	bgt	.L2227
-	ldrh	r3, [r5, #36]
-	cmp	r3, #0
-	beq	.L2184
-.L2230:
-	sub	r0, r3, #1
-	ldr	r10, [r5, #3348]
-	uxth	r0, r0
-	mov	r4, #0
-	mov	lr, r4
-	add	r0, r0, #1
-	mov	r2, r10
-	add	r0, r0, r0, lsl #2
-	add	ip, r7, #14
-	movw	fp, #65535
-	add	r0, r10, r0, lsl #2
-.L2186:
-	str	lr, [r2, #8]
-	add	r3, r4, r4, lsl #2
-	str	lr, [r2, #12]
-	add	r6, r4, #1
-	ldrh	r1, [ip, #2]!
-	add	r3, r10, r3, lsl #2
-	add	r2, r2, #20
-	cmp	r1, fp
-	lsl	r1, r1, #10
-	uxthne	r4, r6
-	strne	r1, [r3, #4]
-	cmp	r0, r2
-	bne	.L2186
-	cmp	r4, #0
-	movne	r6, r4
-	beq	.L2184
-	ldrh	r3, [r5, #184]
-	cmp	r3, r8
-	beq	.L2228
-.L2188:
-	ldrb	r3, [r7, #8]	@ zero_extendqisi2
-	ldr	r2, [r5, #2528]
-	cmp	r3, #0
-	bne	.L2189
-	ldrh	r3, [r2, r9]
-	lsr	r0, r8, #5
-	mov	ip, #1
-	cmp	r3, #0
-	ldrne	r1, .L2232+12
-	moveq	r3, #2
-	ldrhne	r1, [r1]
-	addne	r3, r3, r1
-	strh	r3, [r2, r9]	@ movhi
-	and	r3, r8, #31
-	ldr	r2, [r5, #2652]
-	ldr	r1, [r5, #32]
-	add	r2, r2, ip
-	str	r2, [r5, #2652]
-	ldr	r2, [r1, r0, lsl #2]
-	bic	r3, r2, ip, lsl r3
-	str	r3, [r1, r0, lsl #2]
-.L2192:
-	ldr	r3, [r5, #2528]
-	ldr	r2, [r5, #2668]
-	ldr	r0, [r5, #2652]
-	ldrh	r3, [r3, r9]
-	ldrh	r1, [r5, #20]
-	cmp	r3, r2
-	strhi	r3, [r5, #2668]
-	ldr	r3, .L2232+12
-	ldrh	r2, [r3]
-	ldr	r3, [r5, #2656]
-	mla	r0, r0, r2, r3
-	bl	__aeabi_uidiv
-	ldr	r2, [r5, #3396]
-	cmp	r4, #0
-	str	r0, [r5, #2660]
-	ldr	r3, [r2, #16]
+	cmp	r1, r3
+	blt	.L1537
+	mov	r3, #0
+	ldrh	r8, [r6, #4]
+	strh	r3, [r6, #2]	@ movhi
+	strh	r2, [r6, #4]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, [r4, #2592]
+	strh	r0, [r6]	@ movhi
+	add	r2, r3, #1
+	str	r3, [r4, #2636]
+	str	r2, [r4, #2592]
+	lsl	r2, r0, #10
+	str	r2, [r4, #3460]
+	str	r3, [r7, #4]
+	strh	r0, [r7, #2]	@ movhi
+.L1537:
+	ldrh	r1, [r10]
+	ldr	r0, [r4, #3304]
+	bl	js_hash
+	mov	r3, #1
+	str	r0, [r7, #12]
+	mov	r2, r3
+	mov	r1, r3
+	ldr	r0, .L1545+20
+	bl	FlashProgPages
+	ldrh	r3, [r6, #2]
+	ldr	r2, [r4, #3456]
 	add	r3, r3, #1
-	str	r3, [r2, #16]
-	beq	.L2194
-	sub	r4, r4, #1
-	ldr	r0, [r5, #3348]
-	uxth	r4, r4
-	mov	r1, #64512
-	movt	r1, 65535
-	add	r4, r4, #1
-	mov	r3, r0
-	add	r4, r4, r4, lsl #2
-	lsl	r4, r4, #2
-	add	ip, r0, r4
-.L2195:
-	ldr	r2, [r3, #4]
-	add	r3, r3, #20
-	and	r2, r2, r1
-	str	r2, [r3, #-16]
-	cmp	ip, r3
-	bne	.L2195
-	mov	r2, r6
-	ldrb	r1, [r7, #8]	@ zero_extendqisi2
-	mov	r6, #0
-	add	r10, r7, #16
-	bl	FlashEraseBlocks
-	str	r8, [sp, #4]
-	mov	r8, r7
-	mov	r7, r6
-	b	.L2198
-.L2197:
-	cmp	r4, r6
-	add	r10, r10, #2
-	beq	.L2229
-.L2198:
-	ldr	r3, [r5, #3348]
-	ldr	fp, [r3, r6]
-	add	r3, r3, r6
-	add	r6, r6, #20
-	cmn	fp, #1
-	bne	.L2197
-	ldr	r0, [r3, #4]
-	add	r7, r7, #1
-	add	r10, r10, #2
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-	strh	fp, [r10, #-2]	@ movhi
-	cmp	r4, r6
-	ldrb	r3, [r8, #7]	@ zero_extendqisi2
-	sub	r3, r3, #1
-	strb	r3, [r8, #7]
-	bne	.L2198
-.L2229:
-	mov	r2, r7
-	mov	r7, r8
-	cmp	r2, #0
-	ldr	r8, [sp, #4]
-	ble	.L2199
-	mov	r0, r8
-	bl	update_multiplier_value
-	bl	FtlBbmTblFlush
-.L2199:
-	ldrb	r3, [r7, #7]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L2200
-.L2231:
-	ldr	r3, [r5, #16]
-	mvn	r2, #0
-	strh	r2, [r3, r9]	@ movhi
-.L2222:
-	ldr	r2, .L2232+8
-	ldrh	r3, [r5, #236]
-	ldrh	r1, [r2]
-	ldrh	r2, [r5, #20]
-	add	r3, r3, r1
-	cmp	r3, r2
-	ble	.L2176
-.L2223:
-	ldr	r1, .L2232+16
-	mov	r2, #2656
-	ldr	r0, [sp]
+	uxth	r3, r3
+	cmn	r2, #1
+	strh	r3, [r6, #2]	@ movhi
+	bne	.L1538
+	cmp	r3, #1
+	bne	.L1539
+	movw	r2, #1138
+	ldr	r1, .L1545+24
+	ldr	r0, .L1545+28
 	bl	sftl_printk
-	ldr	r3, .L2232
-	cmp	r7, r3
-	movne	r1, #0
-	bne	.L2177
-.L2224:
-	ldrh	r2, [r5, #236]
-	ldr	r3, [r5, #3220]
-	lsr	r1, r2, #1
-	mul	r3, r3, r2
-	add	r1, r1, #1
-	add	r1, r1, r3, lsr #2
-	uxth	r1, r1
-	cmp	r1, #0
-	subne	r1, r1, #1
-	uxthne	r1, r1
-	b	.L2177
-.L2179:
-	ldr	r1, .L2232+8
-	ldrh	r1, [r1]
-	add	r3, r3, r1
-	b	.L2175
-.L2225:
-	movw	r2, #2665
-	ldr	r1, .L2232+16
-	ldr	r0, [sp]
+.L1539:
+	ldrh	r3, [r6, #2]
+	add	r5, r5, #1
+	uxth	r5, r5
+	cmp	r3, #1
+	ldrheq	r3, [fp]
+	subeq	r3, r3, #1
+	strheq	r3, [r6, #2]	@ movhi
+	cmp	r5, #3
+	bls	.L1536
+	mov	r2, r5
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L1545+32
 	bl	sftl_printk
-	ldrh	r3, [r5, #236]
-	b	.L2178
-.L2226:
-	ldr	r3, [r5, #16]
-	mvn	r2, #0
+.L1542:
+	b	.L1542
+.L1538:
+	cmp	r2, #256
+	cmpne	r3, #1
+	beq	.L1536
+	movw	r3, #65535
+	cmp	r8, r3
+	beq	.L1543
+	mov	r1, #1
 	mov	r0, r8
-	strh	r2, [r3, r9]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, .L2232+8
-	ldrh	r3, [r5, #236]
-	ldrh	r1, [r2]
-	ldrh	r2, [r5, #20]
-	add	r3, r3, r1
+	bl	FtlFreeSysBlkQueueIn
+.L1543:
+	mov	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1546:
+	.align	2
+.L1545:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2628
+	.word	-3932
+	.word	1179929683
+	.word	1342177363
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+471
+	.word	.LC8
+	.word	.LC120
+	.fnend
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.align	2
+	.global	FtlSysFlush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	bl	l2p_flush
+	mov	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+	mov	r0, #0
+	pop	{r4, pc}
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	sftl_deinit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	sftl_deinit, %function
+sftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1555
+	ldr	r3, [r3]
+	cmp	r3, #1
+	bne	.L1552
+	push	{r4, lr}
+	.save {r4, lr}
+	bl	FtlSysFlush
+	mov	r0, #0
+	pop	{r4, pc}
+.L1552:
+	mov	r0, #0
+	bx	lr
+.L1556:
+	.align	2
+.L1555:
+	.word	.LANCHOR2
+	.fnend
+	.size	sftl_deinit, .-sftl_deinit
+	.align	2
+	.global	sftl_discard
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	sftl_discard, %function
+sftl_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r8, .L1575
+	ldr	r4, .L1575+4
+	ldr	r3, [r8]
+	str	r3, [sp, #12]
+	ldr	r3, [r4, #344]
+	cmp	r3, r1
+	cmpcs	r3, r0
+	bls	.L1567
+	add	r2, r0, r1
+	mov	r7, r0
 	cmp	r3, r2
-	ble	.L2175
-	movw	r2, #2679
-	ldr	r1, .L2232+16
-	ldr	r0, [sp]
-	bl	sftl_printk
-	b	.L2222
-.L2189:
-	ldrh	r3, [r2, r9]
-	mov	r0, r8
+	mov	r5, r1
+	bcc	.L1567
+	cmp	r1, #31
+	bhi	.L1559
+.L1564:
+	mov	r0, #0
+.L1557:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r8]
+	cmp	r2, r3
+	beq	.L1565
+	bl	__stack_chk_fail
+.L1559:
+	movw	r3, #262
+	ldrh	r6, [r4, r3]
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	smulbb	r3, r0, r6
+	mov	r9, r0
+	sub	r7, r7, r3
+	uxth	r7, r7
+	cmp	r7, #0
+	beq	.L1560
+	sub	r6, r6, r7
+	add	r9, r0, #1
+	cmp	r6, r5
+	movcs	r6, r5
+	uxth	r6, r6
+	sub	r5, r5, r6
+.L1560:
+	ldr	r6, .L1575+8
+	mvn	r3, #0
+	str	r3, [sp, #8]
+	mov	r7, r6
+.L1561:
+	ldrh	r3, [r6]
+	cmp	r5, r3
+	bcs	.L1563
+	ldr	r3, [r4, #3660]
+	cmp	r3, #32
+	bls	.L1564
+	mov	r5, #0
+	str	r5, [r4, #3660]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L1564
+.L1563:
+	mov	r2, #0
+	add	r1, sp, #4
+	mov	r0, r9
+	bl	log2phys
+	ldr	r3, [sp, #4]
+	cmn	r3, #1
+	beq	.L1562
+	ldr	r3, [r4, #3660]
+	mov	r2, #1
+	add	r1, sp, #8
+	mov	r0, r9
 	add	r3, r3, #1
-	strh	r3, [r2, r9]	@ movhi
-	ldr	r3, [r5, #2656]
+	str	r3, [r4, #3660]
+	ldr	r3, [r4, #2564]
 	add	r3, r3, #1
-	str	r3, [r5, #2656]
-	bl	ftl_set_blk_mode.part.6
-	b	.L2192
-.L2227:
-	movw	r2, #2682
-	ldr	r1, .L2232+16
-	ldr	r0, [sp]
-	bl	sftl_printk
-	ldrh	r3, [r5, #36]
-	cmp	r3, #0
-	bne	.L2230
-.L2184:
-	movw	r2, #2693
-	ldr	r1, .L2232+16
-	ldr	r0, [sp]
-	mov	r4, #0
-	bl	sftl_printk
-	ldrh	r3, [r5, #184]
-	mov	r6, r4
-	cmp	r3, r8
-	bne	.L2188
-.L2228:
-	movw	r2, #2695
-	ldr	r1, .L2232+16
-	ldr	r0, [sp]
+	str	r3, [r4, #2564]
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L1562:
+	ldrh	r3, [r7]
+	add	r9, r9, #1
+	sub	r5, r5, r3
+	b	.L1561
+.L1567:
+	mvn	r0, #0
+	b	.L1557
+.L1565:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1576:
+	.align	2
+.L1575:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR0+262
+	.fnend
+	.size	sftl_discard, .-sftl_discard
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	mov	r5, #0
+	ldr	r7, .L1592
+	ldr	r4, .L1592+4
+	ldr	r3, [r7]
+	ldr	r1, .L1592+8
+	ldr	r0, .L1592+12
+	str	r3, [sp, #4]
 	bl	sftl_printk
-	b	.L2188
-.L2194:
-	mov	r2, r6
-	ldrb	r1, [r7, #8]	@ zero_extendqisi2
-	ldr	r0, [r5, #3348]
-	bl	FlashEraseBlocks
-	ldrb	r3, [r7, #7]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L2231
-.L2200:
-	movw	r2, #310
-	mov	r0, #0
-	ldrh	r2, [r5, r2]
-	strh	r0, [r7, #2]	@ movhi
-	strh	r8, [r7]	@ movhi
-	ldr	r1, [r5, #2644]
-	smulbb	r3, r2, r3
-	ldr	ip, [r5, #16]
-	strb	r0, [r7, #6]
-	add	r2, r1, #1
-	str	r1, [r7, #12]
-	str	r2, [r5, #2644]
-	uxth	r3, r3
-	ldrh	r2, [r7]
-	strh	r3, [r7, #4]	@ movhi
+	ldrh	r2, [r4, #246]
+	mov	r1, #0
+	ldr	r0, [r4, #3356]
 	lsl	r2, r2, #1
-	strh	r3, [ip, r2]	@ movhi
-	ldrh	r3, [r7, #4]
-	cmp	r3, r0
-	beq	.L2201
-	ldrb	r3, [r7, #7]	@ zero_extendqisi2
-	cmp	r3, r0
-	bne	.L2212
-.L2201:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2748
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2232+16
+	bl	ftl_memset
+.L1578:
+	ldr	r3, [r4, #2556]
+	cmp	r5, r3
+	bcc	.L1580
+	ldr	r10, .L1592+16
+	mov	r8, #0
+	movw	r9, #65535
+.L1581:
+	ldrh	r3, [r4, #244]
+	uxth	r6, r8
+	cmp	r3, r6
+	bhi	.L1586
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	r2, [sp, #4]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1587
+	bl	__stack_chk_fail
+.L1580:
+	mov	r2, #0
+	mov	r1, sp
+	mov	r0, r5
+	bl	log2phys
+	ldr	r0, [sp]
+	cmn	r0, #1
+	beq	.L1579
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r4, #3356]
+	lsl	r0, r0, #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+.L1579:
+	add	r5, r5, #1
+	b	.L1578
+.L1586:
+	uxth	r1, r8
+	ldr	r3, [r4, #76]
+	lsl	r5, r1, #1
+	ldrh	r2, [r3, r5]
+	ldr	r3, [r4, #3356]
+	ldrh	r3, [r3, r5]
+	cmp	r2, r9
+	cmpne	r2, r3
+	beq	.L1583
+	mov	r0, r10
 	bl	sftl_printk
-.L2212:
-	mov	r0, #0
-	add	sp, sp, #12
+	ldrh	r3, [r4, #28]
+	cmp	r3, r6
+	beq	.L1583
+	ldrh	r3, [r4, #128]
+	cmp	r3, r6
+	beq	.L1583
+	ldrh	r3, [r4, #80]
+	cmp	r3, r6
+	beq	.L1583
+	ldr	r3, [r4, #76]
+	ldrh	r2, [r3, r5]
+	cmp	r2, #0
+	ldr	r2, [r4, #3356]
+	ldrh	r2, [r2, r5]
+	strh	r2, [r3, r5]	@ movhi
+	bne	.L1585
+.L1583:
+	add	r8, r8, #1
+	b	.L1581
+.L1585:
+	mov	r0, r6
+	bl	update_vpc_list
+	b	.L1583
+.L1587:
+	add	sp, sp, #8
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2233:
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1593:
 	.align	2
-.L2232:
-	.word	.LANCHOR0+136
-	.word	.LANCHOR0+2524
-	.word	.LANCHOR0+2520
-	.word	.LANCHOR0+300
-	.word	.LANCHOR1+580
+.L1592:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+486
+	.word	.LC111
+	.word	.LC121
 	.fnend
-	.size	allocate_data_superblock, .-allocate_data_superblock
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
 	.syntax unified
@@ -12751,44 +10566,51 @@ allocate_new_data_superblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r5, #:lower16:.LANCHOR0
-	movt	r5, #:upper16:.LANCHOR0
-	ldrh	r4, [r0]
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldrh	r3, [r5, #20]
-	cmp	r3, r4
-	bcc	.L2251
+	ldr	r4, .L1605
+	ldrh	r5, [r0]
+	ldrh	r3, [r4, #244]
+	cmp	r3, r5
+	bcs	.L1595
+	movw	r2, #2755
+	ldr	r1, .L1605+4
+	ldr	r0, .L1605+8
+	bl	sftl_printk
+.L1595:
 	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L2236
-.L2253:
-	ldr	r3, [r5, #16]
-	lsl	r8, r4, #1
-	mov	r0, r4
-	ldrh	r3, [r3, r8]
+	cmp	r5, r3
+	beq	.L1596
+	ldr	r2, [r4, #76]
+	lsl	r3, r5, #1
+	mov	r0, r5
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L2252
-	bl	INSERT_FREE_LIST
-.L2238:
-	ldr	r7, .L2254
+	beq	.L1597
+	bl	INSERT_DATA_LIST
+.L1596:
 	mov	r3, #1
 	strb	r3, [r6, #8]
-	movw	r2, #65535
-	ldrh	r3, [r7]
-	cmp	r3, r2
-	beq	.L2240
-	cmp	r4, r3
-	bne	.L2244
-	ldr	r3, [r5, #16]
-	ldrh	r3, [r3, r8]
+	movw	r3, #3442
+	ldrh	r0, [r4, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1598
+	cmp	r5, r0
+	bne	.L1599
+	ldr	r2, [r4, #76]
+	lsl	r3, r0, #1
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L2241
-.L2242:
-	mvn	r3, #0
-	strh	r3, [r7]	@ movhi
-.L2240:
+	beq	.L1600
+.L1599:
+	bl	update_vpc_list
+.L1600:
+	mvn	r2, #0
+	movw	r3, #3442
+	strh	r2, [r4, r3]	@ movhi
+.L1598:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -12796,40 +10618,16 @@ allocate_new_data_superblock:
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
 	mov	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L2252:
-	bl	INSERT_DATA_LIST
-	b	.L2238
-.L2244:
-	mov	r4, r3
-.L2241:
-	mov	r0, r4
-	bl	update_vpc_list
-	b	.L2242
-.L2251:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #2755
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2254+4
-	bl	sftl_printk
-	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L2253
-.L2236:
-	ldr	r7, .L2254
-	mov	r2, #1
-	strb	r2, [r6, #8]
-	ldrh	r4, [r7]
-	cmp	r4, r3
-	beq	.L2240
-	mov	r0, r4
-	bl	update_vpc_list
-	b	.L2242
-.L2255:
+	pop	{r4, r5, r6, pc}
+.L1597:
+	bl	INSERT_FREE_LIST
+	b	.L1596
+.L1606:
 	.align	2
-.L2254:
-	.word	.LANCHOR0+3248
-	.word	.LANCHOR1+608
+.L1605:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+507
+	.word	.LC8
 	.fnend
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
@@ -12842,306 +10640,434 @@ FtlProgPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r2, #:lower16:__stack_chk_guard
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	r2, #:upper16:__stack_chk_guard
+	mov	r5, r3
+	ldr	r6, .L1622
 	.pad #20
 	sub	sp, sp, #20
-	mov	fp, r1
-	mov	r5, r3
-	ldr	ip, [r2]
-	mov	r4, r0
-	str	r2, [sp, #4]
-	mov	r2, #0
-	ldrb	r3, [r3, #9]	@ zero_extendqisi2
-	movw	r10, #:lower16:.LANCHOR0
-	str	ip, [sp, #12]
-	bl	FlashProgPages
-	cmp	fp, #0
-	movteq	r10, #:upper16:.LANCHOR0
-	beq	.L2257
-	ldr	r7, .L2280
-	movw	r8, #:lower16:.LC125
-	movt	r10, #:upper16:.LANCHOR0
-	movt	r8, #:upper16:.LC125
-	mov	r9, #0
-.L2258:
-	ldr	r2, [r4]
-	cmn	r2, #1
-	cmpne	r2, #256
-	ldreq	r6, .L2280+4
-	beq	.L2260
-	b	.L2265
-.L2259:
-	mov	r0, r5
-	bl	get_new_active_ppa
-	mov	ip, r0
+	mov	r7, #0
 	mov	r2, #0
-	str	ip, [r4, #4]
-	mov	r0, r4
+	ldr	fp, .L1622+4
+	mov	r4, r0
+	ldr	r3, [r6]
+	mov	r10, r1
+	ldr	r9, .L1622+8
+	str	r3, [sp, #12]
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
-	mov	r1, #1
-	str	ip, [sp, #8]
 	bl	FlashProgPages
-	ldr	r2, [r4]
-	cmn	r2, #1
-	cmpne	r2, #256
-	bne	.L2265
-.L2260:
+.L1608:
+	cmp	r7, r10
+	bne	.L1615
+	ldr	r3, .L1622+8
+	ldrb	r2, [r5, #6]	@ zero_extendqisi2
+	ldrh	r3, [r3, #236]
+	cmp	r2, r3
+	bcc	.L1607
+	mov	r2, #1000
+	ldr	r1, .L1622+12
+	ldr	r0, .L1622+16
+	bl	sftl_printk
+.L1607:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1617
+	bl	__stack_chk_fail
+.L1610:
 	ldr	r1, [r4, #4]
-	mov	r0, r8
+	mov	r0, fp
 	bl	sftl_printk
 	ldr	r0, [r4, #4]
-	ldrh	r1, [r7]
 	ubfx	r0, r0, #10, #16
-	bl	__aeabi_uidivmod
-	uxth	r0, r1
-	ldrh	r1, [r6]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
+	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	bne	.L2259
+	bne	.L1609
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L2259
-.L2265:
+.L1609:
+	mov	r0, r5
+	bl	get_new_active_ppa
+	mov	r2, #0
+	str	r0, [r4, #4]
+	str	r0, [sp, #8]
+	mov	r1, #1
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	mov	r0, r4
+	bl	FlashProgPages
+.L1615:
+	ldr	r2, [r4]
+	cmn	r2, #1
+	cmpne	r2, #256
+	beq	.L1610
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r10, #36]
+	ldrh	r3, [r9, #236]
 	cmp	r2, r3
-	bcs	.L2277
-.L2261:
+	bcc	.L1611
+	movw	r2, #985
+	ldr	r1, .L1622+12
+	ldr	r0, .L1622+16
+	bl	sftl_printk
+.L1611:
 	ldr	r3, [r4, #4]
+	add	r1, sp, #16
 	mov	r2, #1
-	add	r1, sp, #8
 	ldr	r0, [r4, #16]
-	str	r3, [sp, #8]
+	str	r3, [r1, #-8]!
 	bl	log2phys
 	ldr	r3, [r4, #12]
-	ldr	r0, [r3, #12]
-	cmn	r0, #1
-	beq	.L2262
-	ldr	r6, .L2280+4
-	ubfx	r0, r0, #10, #16
-	ldrh	r1, [r7]
-	bl	__aeabi_uidivmod
-	uxth	r0, r1
-	ldrh	r1, [r6]
-	bl	__aeabi_uidiv
-	uxth	r6, r0
-	ldr	r2, [r10, #16]
-	lsl	r3, r6, #1
+	ldr	r3, [r3, #12]
+	ubfx	r0, r3, #10, #16
+	str	r3, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r3, [sp, #4]
+	mov	r8, r0
+	cmn	r3, #1
+	beq	.L1612
+	ldr	r2, [r9, #76]
+	lsl	r3, r0, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L2278
-.L2263:
-	mov	r0, r6
+	bne	.L1613
+	mov	r1, r0
+	ldr	r0, .L1622+20
+	bl	sftl_printk
+.L1613:
+	mov	r0, r8
 	bl	decrement_vpc_count
-.L2262:
-	add	r9, r9, #1
+.L1612:
+	add	r7, r7, #1
 	add	r4, r4, #20
-	cmp	fp, r9
-	bne	.L2258
-.L2257:
-	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r10, #36]
+	b	.L1608
+.L1617:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1623:
+	.align	2
+.L1622:
+	.word	__stack_chk_guard
+	.word	.LC122
+	.word	.LANCHOR0
+	.word	.LANCHOR1+536
+	.word	.LC8
+	.word	.LC123
+	.fnend
+	.size	FtlProgPages, .-FtlProgPages
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r6, .L1650
+	ldr	r4, .L1650+4
+	ldr	r3, [r6]
+	ldrh	r2, [r4, #128]
+	str	r3, [sp, #4]
+	movw	r3, #306
+	ldrh	r1, [r4, r3]
+	movw	r3, #65535
 	cmp	r2, r3
-	bcc	.L2256
-	movw	r0, #:lower16:.LC8
-	mov	r2, #1000
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2280+8
+	bne	.L1625
+.L1632:
+	ldrh	r2, [r4, #128]
+	mov	r3, #0
+	str	r3, [r4, #3448]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1646
+.L1626:
+	mov	r0, #0
+	b	.L1624
+.L1625:
+	cmp	r0, #0
+	ldr	r5, .L1650+8
+	beq	.L1628
+	ldrh	r2, [r5, #4]
+	cmp	r2, r3
+	beq	.L1629
+.L1630:
+	mov	r1, #2
+.L1628:
+	ldr	r0, .L1650+12
+	bl	FtlGcScanTempBlk
+	ldrh	r2, [r5, #4]
+	movw	r3, #65535
+	str	r0, [sp]
+	cmp	r2, r3
+	movne	r0, #1
+	beq	.L1632
+.L1624:
+	ldr	r2, [sp, #4]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1641
+	bl	__stack_chk_fail
+.L1629:
+	mov	r3, #0
+	strh	r3, [r5, #4]	@ movhi
+	ldrh	r3, [r4, #228]
+	cmp	r3, #17
+	bhi	.L1630
+	b	.L1628
+.L1646:
+	movw	r3, #3208
+	ldrb	r1, [r4, #135]	@ zero_extendqisi2
+	ldrh	r2, [r4, r3]
+	movw	r3, #306
+	ldrh	r3, [r4, r3]
+	mul	r3, r3, r1
+	cmp	r2, r3
+	beq	.L1633
+	mov	r2, #164
+	ldr	r1, .L1650+16
+	ldr	r0, .L1650+20
 	bl	sftl_printk
-.L2256:
-	ldr	r3, [sp, #4]
-	ldr	r2, [sp, #12]
-	ldr	r3, [r3]
+.L1633:
+	movw	r0, #306
+	ldrb	r2, [r4, #135]	@ zero_extendqisi2
+	ldrh	r0, [r4, r0]
+	mov	r5, #0
+	ldrh	r3, [r4, #128]
+	mov	r10, #12
+	ldr	r1, [r4, #76]
+	ldr	r9, .L1650+24
+	smulbb	r2, r2, r0
+	lsl	r3, r3, #1
+	strh	r2, [r1, r3]	@ movhi
+	movw	r3, #3208
+	ldr	r2, [r4, #2580]
+	ldrh	r3, [r4, r3]
+	add	r3, r3, r2
+	str	r3, [r4, #2580]
+.L1634:
+	ldrh	r2, [r9]
+	uxth	r3, r5
 	cmp	r2, r3
-	bne	.L2279
-	add	sp, sp, #20
+	bhi	.L1638
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r0, [r4, #128]
+	ldr	r2, [r4, #76]
+	lsl	r3, r0, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1639
+	bl	INSERT_DATA_LIST
+.L1640:
+	ldr	r7, .L1650+28
+	movw	r3, #3208
+	mvn	r8, #0
+	mov	r5, #0
+	strh	r5, [r4, r3]	@ movhi
+	strh	r5, [r7]	@ movhi
+	sub	r7, r7, #576
+	strh	r8, [r4, #128]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldrh	r3, [r7]
+	ldrh	r2, [r4, #228]
+	strh	r8, [r4, #176]	@ movhi
+	add	r3, r3, r3, lsl #1
+	cmp	r2, r3, asr #2
+	movgt	r2, #20
+	movwgt	r3, #3156
+	strhgt	r2, [r4, r3]	@ movhi
+	b	.L1626
+.L1638:
+	uxth	r8, r5
+	ldr	fp, [r4, #3204]
+	ldr	r3, [r4, #2556]
+	mul	r8, r10, r8
+	add	r7, fp, r8
+	ldr	r0, [r7, #8]
+	cmp	r0, r3
+	bcc	.L1635
+.L1648:
+	ldrh	r0, [r4, #128]
+	b	.L1649
+.L1635:
+	mov	r2, #0
+	mov	r1, sp
+	bl	log2phys
+	ldr	r0, [fp, r8]
+	ldr	r3, [sp]
+	cmp	r0, r3
+	bne	.L1637
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	mov	r2, #1
+	mov	r8, r0
+	add	r1, r7, #4
+	ldr	r0, [r7, #8]
+	bl	log2phys
+	mov	r0, r8
+.L1649:
+	bl	decrement_vpc_count
+	b	.L1636
+.L1637:
+	ldr	r2, [r7, #4]
+	cmp	r3, r2
+	bne	.L1648
+.L1636:
+	add	r5, r5, #1
+	b	.L1634
+.L1639:
+	bl	INSERT_FREE_LIST
+	b	.L1640
+.L1641:
+	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2277:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #985
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2280+8
-	bl	sftl_printk
-	b	.L2261
-.L2278:
-	movw	r0, #:lower16:.LC126
-	mov	r1, r6
-	movt	r0, #:upper16:.LC126
-	bl	sftl_printk
-	b	.L2263
-.L2279:
-	bl	__stack_chk_fail
-.L2281:
+.L1651:
 	.align	2
-.L2280:
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
-	.word	.LANCHOR1+640
+.L1650:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+128
+	.word	.LANCHOR1+549
+	.word	.LC8
+	.word	.LANCHOR0+3208
+	.word	.LANCHOR0+3200
 	.fnend
-	.size	FtlProgPages, .-FtlProgPages
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	2
+	.global	FtlGcPageRecovery
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movw	r5, #306
+	ldr	r4, .L1655
+	ldrh	r1, [r4, r5]
+	add	r0, r4, #128
+	bl	FtlGcScanTempBlk
+	ldrh	r2, [r4, #130]
+	ldrh	r3, [r4, r5]
+	cmp	r2, r3
+	popcc	{r4, r5, r6, pc}
+	ldr	r0, .L1655+4
+	bl	FtlMapBlkWriteDump_data
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	mov	r3, #0
+	str	r3, [r4, #3448]
+	pop	{r4, r5, r6, pc}
+.L1656:
+	.align	2
+.L1655:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3396
+	.fnend
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	2
+	.global	FtlPowerLostRecovery
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r4, .L1659
+	add	r6, r4, #28
+	str	r5, [r4, #3480]
+	mov	r0, r6
+	add	r4, r4, #80
+	bl	FtlRecoverySuperblock
+	mov	r0, r6
+	bl	FtlSlcSuperblockCheck
+	mov	r0, r4
+	bl	FtlRecoverySuperblock
+	mov	r0, r4
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L1660:
+	.align	2
+.L1659:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
-	.global	FtlSysBlkInit
+	.global	Ftl_gc_temp_data_write_back
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mov	r3, #0
-	add	ip, r4, #416
-	mov	r1, r3
-	ldrh	lr, [r4, #244]
-	mov	r2, #2048
-	movw	r5, #3534
-	add	r0, r4, #424
-	strh	r3, [r4, r5]	@ movhi
-	strh	r3, [ip, #2]	@ movhi
-	strh	r3, [ip, #4]	@ movhi
-	strh	r3, [ip, #6]	@ movhi
-	strh	lr, [ip]	@ movhi
-	bl	memset
-	bl	FtlScanSysBlk
-	movw	r2, #2680
-	movw	r3, #65535
-	ldrh	r2, [r4, r2]
-	cmp	r2, r3
-	beq	.L2285
-	bl	FtlLoadSysInfo
-	subs	r5, r0, #0
-	bne	.L2285
-	bl	FtlL2PDataInit
-	ldr	r0, .L2298
-	bl	FtlMapTblRecovery
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	movw	r3, #2538
-	str	r5, [r4, #28]
-	strh	r5, [r4, r3]	@ movhi
-	bl	FtlUpdateVaildLpn.part.5
-	movw	r3, #342
-	ldrh	r0, [r4, r3]
-	cmp	r0, #0
-	beq	.L2286
-	ldr	r3, [r4, #2532]
-	ldr	r2, [r3, #4]
-	cmp	r2, #0
-	blt	.L2287
-	mov	r2, r5
-	b	.L2288
-.L2289:
-	ldr	r1, [r3, #16]
-	add	r3, r3, #12
-	cmp	r1, #0
-	blt	.L2287
-.L2288:
-	add	r2, r2, #1
-	cmp	r2, r0
-	blt	.L2289
-.L2286:
-	ldr	r6, .L2298+4
-	movw	r3, #3534
-	ldrh	r2, [r4, r3]
-	ldrh	r3, [r6, #28]
-	cmp	r2, #0
-	add	r3, r3, #1
-	strh	r3, [r6, #28]	@ movhi
-	bne	.L2291
-.L2292:
-	ldrh	r0, [r4, #40]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L2290
-	ldrh	r3, [r4, #44]
-	cmp	r3, #0
-	beq	.L2297
-.L2290:
-	bl	FtlVpcCheckAndModify
-	mov	r0, r5
-	pop	{r4, r5, r6, pc}
-.L2287:
-	ldr	r6, .L2298+4
-	ldrh	r3, [r6, #28]
-	add	r3, r3, #1
-	strh	r3, [r6, #28]	@ movhi
-.L2291:
-	ldr	r0, .L2298+8
-	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L2298+12
-	bl	FtlSuperblockPowerLostFix
-	ldrh	r2, [r4, #40]
-	movw	r0, #310
-	ldr	ip, [r4, #16]
 	mov	r3, #0
-	ldrh	lr, [r4, #44]
-	lsl	r2, r2, #1
-	ldrh	r1, [ip, r2]
-	sub	r1, r1, lr
-	strh	r1, [ip, r2]	@ movhi
-	ldrh	r2, [r4, #88]
-	ldr	ip, [r4, #16]
-	ldrh	r1, [r4, r0]
-	ldrh	lr, [r4, #92]
-	lsl	r2, r2, #1
-	strb	r3, [r4, #46]
-	strh	r3, [r4, #44]	@ movhi
-	strh	r1, [r4, #42]	@ movhi
-	ldrh	r1, [ip, r2]
-	sub	r1, r1, lr
-	strh	r1, [ip, r2]	@ movhi
-	ldrh	r2, [r6, #30]
-	ldrh	r1, [r4, r0]
-	strb	r3, [r4, #94]
-	add	r2, r2, #1
-	strh	r3, [r4, #92]	@ movhi
-	strh	r1, [r4, #90]	@ movhi
-	strh	r2, [r6, #30]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L2292
-.L2297:
-	ldrh	r3, [r4, #92]
-	cmp	r3, #0
-	bne	.L2290
-	bl	FtlGcRefreshBlock
-	ldrh	r0, [r4, #88]
-	bl	FtlGcRefreshBlock
-	bl	FtlVpcTblFlush
-	ldr	r0, .L2298+8
-	bl	allocate_new_data_superblock
-	ldr	r0, .L2298+12
-	bl	allocate_new_data_superblock
-	b	.L2290
-.L2285:
-	mvn	r5, #0
-	mov	r0, r5
+	ldr	r4, .L1670
+	mov	r5, #0
+	mov	r6, #20
+	mov	r2, r3
+	ldr	r1, [r4, #3172]
+	ldr	r0, [r4, #3296]
+	bl	FlashProgPages
+.L1662:
+	ldr	r1, [r4, #3172]
+	uxth	r3, r5
+	cmp	r1, r3
+	bhi	.L1665
+	ldr	r0, [r4, #3296]
+	bl	FtlGcBufFree
+	ldrh	r3, [r4, #132]
+	mov	r0, #0
+	str	r0, [r4, #3172]
+	cmp	r3, r0
+	popne	{r4, r5, r6, pc}
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	mov	r0, #1
 	pop	{r4, r5, r6, pc}
-.L2299:
+.L1665:
+	mul	r3, r6, r3
+	ldr	r2, [r4, #3296]
+	add	r5, r5, #1
+	add	r1, r2, r3
+	ldr	r2, [r2, r3]
+	ldr	r0, [r1, #12]
+	ldr	r1, [r1, #4]
+	cmn	r2, #1
+	ldrne	r2, [r0, #8]
+	ldr	r0, [r0, #12]
+	bl	FtlGcUpdatePage
+	b	.L1662
+.L1671:
 	.align	2
-.L2298:
-	.word	.LANCHOR0+2548
-	.word	.LANCHOR0+2472
-	.word	.LANCHOR0+40
-	.word	.LANCHOR0+88
+.L1670:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
 	.syntax unified
@@ -13154,39 +11080,39 @@ Ftl_get_new_temp_ppa:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
 	movw	r3, #65535
-	ldrh	r2, [r4, #136]
+	ldr	r4, .L1676
+	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	beq	.L2301
-	ldrh	r3, [r4, #140]
+	beq	.L1673
+	ldrh	r3, [r4, #132]
 	cmp	r3, #0
-	bne	.L2302
-.L2301:
+	bne	.L1674
+.L1673:
 	mov	r0, #0
-	mov	r5, r0
+	mov	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L2304
-	strb	r5, [r4, #144]
+	ldr	r0, .L1676+4
+	strb	r5, [r4, #136]
 	bl	allocate_data_superblock
-	ldr	r3, .L2304+4
-	movw	r2, #3268
-	strh	r5, [r4, r2]	@ movhi
+	ldr	r3, .L1676+8
 	strh	r5, [r3]	@ movhi
+	movw	r3, #3208
+	strh	r5, [r4, r3]	@ movhi
 	bl	l2p_flush
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2302:
-	ldr	r0, .L2304
+.L1674:
+	ldr	r0, .L1676+4
 	pop	{r4, r5, r6, lr}
 	b	get_new_active_ppa
-.L2305:
+.L1677:
 	.align	2
-.L2304:
-	.word	.LANCHOR0+136
-	.word	.LANCHOR0+3280
+.L1676:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+128
+	.word	.LANCHOR0+3200
 	.fnend
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
@@ -13199,919 +11125,756 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1808
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r3, #:lower16:__stack_chk_guard
-	movw	fp, #:lower16:.LANCHOR0
 	.pad #52
 	sub	sp, sp, #52
-	movt	r3, #:upper16:__stack_chk_guard
-	movt	fp, #:upper16:.LANCHOR0
-	mov	r2, r3
-	str	r3, [sp, #20]
-	ldr	r3, [fp, #3320]
-	ldr	r2, [r2]
-	str	r0, [sp, #16]
-	cmp	r3, #0
-	str	r2, [sp, #44]
-	bne	.L2411
-	movw	r2, #2520
-	ldrh	r2, [fp, r2]
+	str	r0, [sp, #20]
+	ldr	r3, [r3]
+	str	r3, [sp, #44]
+	ldr	r3, .L1808+4
+	ldr	r0, [r3, #3276]
+	cmp	r0, #0
+	movne	r0, #0
+	bne	.L1678
+	movw	r2, #2532
+	ldrh	r2, [r3, r2]
 	cmp	r2, #47
-	bls	.L2411
-	movw	r3, #:lower16:.LANCHOR2
+	bls	.L1678
+	ldr	r2, .L1808+8
+	mov	r4, r3
+	ldrh	r1, [r2, #4]
 	movw	r2, #65535
-	movt	r3, #:upper16:.LANCHOR2
-	ldrh	r3, [r3, #4]
-	cmp	r3, r2
-	beq	.L2311
-	ldrh	r3, [fp, #136]
-	cmp	r3, r2
-	beq	.L2311
-	mov	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	beq	.L2311
-	mov	r0, #1
-	b	.L2306
-.L2411:
-	mov	r0, #0
-.L2306:
-	ldr	r3, [sp, #20]
-	ldr	r2, [sp, #44]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L2478
-	add	sp, sp, #52
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2311:
-	ldrh	r3, [fp, #232]
+	cmp	r1, r2
+	bne	.L1680
+.L1683:
+	ldrh	r3, [r4, #224]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L2310
-	ldrh	r1, [fp, #234]
-	cmp	r1, r2
-	mvneq	r2, #0
-	strheq	r3, [fp, #234]	@ movhi
-	strheq	r2, [fp, #232]	@ movhi
-.L2310:
+	bne	.L1681
+.L1682:
 	bl	FtlReadRefresh
-	ldr	r3, [fp, #3212]
-	movw	r2, #65535
-	ldr	r0, [sp, #16]
-	ldrh	r1, [fp, #184]
+	ldr	r3, [r4, #3160]
+	movw	r6, #65535
+	ldr	r2, [sp, #20]
 	add	r3, r3, #1
-	cmp	r1, r2
-	add	r3, r3, r0, lsl #7
-	strne	r2, [sp, #12]
-	movne	r5, #1
-	str	r3, [fp, #3212]
-	beq	.L2479
-.L2312:
-	ldr	r3, [sp, #16]
-	cmp	r3, #0
-	movne	r3, #0
-	andeq	r3, r5, #1
-	cmp	r3, #0
-	beq	.L2323
-.L2405:
-	ldrh	r3, [fp, #236]
+	add	r3, r3, r2, lsl #7
+	ldrh	r2, [r4, #176]
+	str	r3, [r4, #3160]
+	cmp	r2, r6
+	bne	.L1684
+	ldrh	r6, [r4, #128]
+	cmp	r6, r2
+	movne	r6, r2
+	bne	.L1684
+	ldrh	r5, [r4, #226]
+	cmp	r5, r6
+	bne	.L1684
+	ldrh	r2, [r4, #228]
+	cmp	r2, #24
+	movcc	r2, #5120
+	movcs	r2, #1024
+	cmp	r3, r2
+	movls	r6, r5
+	bls	.L1684
+	ldr	r3, .L1808+12
+	mov	r8, #0
+	str	r8, [r4, #3160]
+	strh	r8, [r3]	@ movhi
+	bl	GetSwlReplaceBlock
+	cmp	r0, r5
+	mov	r6, r0
+	movne	r5, r0
+	bne	.L1686
+	movw	r7, #3158
+	ldrh	r2, [r4, #228]
+	ldrh	r3, [r4, r7]
+	cmp	r2, r3
+	bcs	.L1687
+	mov	r0, #64
+	bl	List_get_gc_head_node
+	uxth	r3, r0
+	cmp	r3, r6
+	beq	.L1689
+	mov	r0, r3
+	ldr	r3, [r4, #76]
+	lsl	r0, r0, #1
+	ldrh	r3, [r3, r0]
+	cmp	r3, #7
+	bhi	.L1690
+	mov	r0, r8
+	bl	List_get_gc_head_node
+	uxth	r5, r0
+	mov	r3, #128
+	strh	r3, [r4, r7]	@ movhi
+	cmp	r5, r6
+	bne	.L1686
+.L1689:
+	bl	FtlGcReFreshBadBlk
+.L1684:
+	movw	r1, #65535
+	ldr	r2, [sp, #20]
+	sub	r3, r6, r1
+	clz	r3, r3
+	lsr	r3, r3, #5
+	cmp	r2, #0
+	movne	r2, #0
+	andeq	r2, r3, #1
+	cmp	r2, #0
+	beq	.L1692
+	ldrh	r3, [r4, #228]
 	cmp	r3, #24
-	movhi	r10, #1
-	bhi	.L2324
+	movhi	r5, #1
+	bhi	.L1693
+	movw	r2, #306
 	cmp	r3, #16
-	movw	r2, #310
-	bls	.L2325
-	ldrh	r2, [fp, r2]
-	lsr	r10, r2, #5
-.L2324:
-	movw	r2, #3208
-	ldrh	r1, [fp, r2]
+	ldrh	r5, [r4, r2]
+	lsrhi	r5, r5, #5
+	bhi	.L1693
+	cmp	r3, #12
+	lsrhi	r5, r5, #4
+	bhi	.L1693
+	cmp	r3, #8
+	lsrhi	r5, r5, #2
+.L1693:
+	movw	r2, #3156
+	ldrh	r1, [r4, r2]
 	cmp	r1, r3
-	bcs	.L2328
-	ldrh	r3, [fp, #136]
+	bcs	.L1697
+	ldrh	r3, [r4, #128]
 	movw	r1, #65535
 	cmp	r3, r1
-	beq	.L2480
-.L2329:
-	movw	r3, #2676
-	movw	r2, #3208
-	ldrh	r3, [fp, r3]
+	bne	.L1698
+	ldrh	r1, [r4, #226]
+	cmp	r1, r3
+	bne	.L1698
+	ldr	r3, .L1808+12
+	ldrh	r0, [r3]
+	cmp	r0, #0
+	bne	.L1699
+	ldr	r3, [r4, #2556]
+	ldr	r1, [r4, #2552]
+	add	r3, r3, r3, lsl #1
+	cmp	r1, r3, lsr #2
+	movcs	r3, #18
+	bcs	.L1802
+.L1699:
+	ldr	r3, .L1808+16
+	movw	r2, #3156
+	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-	strh	r3, [fp, r2]	@ movhi
-.L2328:
-	movw	r3, #3282
-	ldrh	r3, [fp, r3]
-	cmp	r3, #0
-	addne	r3, r10, #32
-	uxthne	r10, r3
-.L2334:
-	ldrh	r4, [fp, #184]
-	movw	r3, #65535
-	cmp	r4, r3
-	strne	r3, [sp, #12]
-	beq	.L2346
-.L2338:
-	ldrh	r3, [fp, #40]
-	cmp	r3, r4
-	beq	.L2355
-.L2484:
-	ldrh	r3, [fp, #88]
-	cmp	r3, r4
-	beq	.L2355
-	ldrh	r3, [fp, #136]
-	cmp	r3, r4
-	beq	.L2355
-.L2400:
-	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L2357
-.L2485:
-	ldrh	r3, [fp, #186]
-	ldr	r2, .L2499
-	mov	r1, r3
-	str	r2, [sp, #24]
-.L2358:
-	ldr	r2, [sp, #16]
-	cmp	r2, #0
-	mov	r2, #1
-	str	r2, [fp, #3320]
-	ldr	r2, [sp, #24]
-	ldrh	r2, [r2]
-	mov	lr, r2
-	str	r2, [sp, #28]
-	beq	.L2375
-	ldrh	r0, [fp, #184]
-	ldrh	r2, [fp, #36]
-	ldr	ip, [fp, #16]
-	lsl	r0, r0, #1
-	mul	r2, lr, r2
-	ldrh	r0, [ip, r0]
-	sub	r2, r2, r0
-	add	r0, r2, #3
-	cmp	r2, #0
-	movlt	r2, r0
-	add	r10, r10, r2, asr #2
-	uxth	r10, r10
-.L2375:
-	ldr	r2, [sp, #28]
-	add	r1, r10, r1
-	cmp	r1, r2
-	subgt	r10, r2, r3
-	uxthgt	r10, r10
-	cmp	r10, #0
-	movne	r7, #0
-	strne	r10, [sp, #8]
-	beq	.L2378
-.L2389:
-	ldrh	r1, [fp, #36]
-	cmp	r1, #0
-	beq	.L2390
-	sub	ip, r1, #1
-	ldr	r2, .L2499+4
-	uxth	ip, ip
-	ldrh	lr, [fp, #186]
-	ldr	r0, [fp, #3240]
-	mov	r4, #0
-	add	ip, ip, #9
-	sub	r3, r2, #16
-	add	ip, r3, ip, lsl #1
-	add	lr, lr, r7
-	movw	r5, #65535
-.L2380:
-	ldrh	r3, [r2], #2
-	cmp	r3, r5
-	beq	.L2379
-	add	r1, r4, r4, lsl #2
-	add	r4, r4, #1
-	uxth	r4, r4
-	orr	r3, lr, r3, lsl #10
-	add	r1, r0, r1, lsl #2
-	str	r3, [r1, #4]
-.L2379:
-	cmp	ip, r2
-	bne	.L2380
-	ldrb	r2, [fp, #192]	@ zero_extendqisi2
-	mov	r1, r4
-	bl	FlashReadPages
-	cmp	r4, #0
-	beq	.L2382
-	sub	r8, r4, #1
-	movw	r5, #:lower16:.LC8
-	uxth	r8, r8
-	ldr	r6, .L2499+8
-	movt	r5, #:upper16:.LC8
-	add	r8, r8, #1
-	mov	r4, #0
-	add	r8, r8, r8, lsl #2
-	lsl	r8, r8, #2
-	b	.L2387
-.L2384:
-	add	r4, r4, #20
-	cmp	r8, r4
-	beq	.L2382
-.L2387:
-	ldr	r3, [fp, #3240]
-	ldr	r2, [r3, r4]
-	add	r3, r3, r4
-	cmn	r2, #1
-	beq	.L2384
-	ldr	r9, [r3, #12]
-	movw	r3, #61589
-	ldrh	r2, [r9]
+.L1802:
+	strh	r3, [r4, r2]	@ movhi
+	mov	r3, #0
+	str	r3, [r4, #3168]
+.L1678:
+	ldr	r3, .L1808
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
 	cmp	r2, r3
-	bne	.L2384
-	ldr	r10, [r9, #8]
-	cmn	r10, #1
-	beq	.L2481
-.L2385:
-	mov	r2, #0
-	add	r1, sp, #36
-	mov	r0, r10
-	bl	log2phys
-	ldr	r3, [fp, #3240]
-	ldr	r2, [sp, #36]
-	add	r3, r3, r4
-	ldr	r1, [r3, #4]
+	beq	.L1756
+	bl	__stack_chk_fail
+.L1680:
+	ldrh	r3, [r3, #128]
+	cmp	r3, r2
+	beq	.L1683
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L1683
+	mov	r0, #1
+	b	.L1678
+.L1681:
+	ldrh	r1, [r4, #226]
 	cmp	r1, r2
-	bne	.L2384
-	ldr	r2, [fp, #3224]
-	ldr	r1, [r3, #16]
-	ldr	r10, [fp, #3340]
-	ldr	r3, .L2499+12
-	add	r2, r2, r2, lsl #2
+	strheq	r3, [r4, #226]	@ movhi
+	mvneq	r3, #0
+	strheq	r3, [r4, #224]	@ movhi
+	b	.L1682
+.L1690:
+	mov	r3, #64
+.L1801:
+	strh	r3, [r4, r7]	@ movhi
+	b	.L1689
+.L1687:
+	mov	r3, #80
+	b	.L1801
+.L1686:
+	movw	r0, #3156
+	ldr	r3, [r4, #76]
+	ldrh	r0, [r4, r0]
+	lsl	r1, r5, #1
+	ldrh	r2, [r4, #228]
+	mov	r6, r5
+	ldrh	r3, [r3, r1]
+	str	r0, [sp, #4]
+	ldr	r0, [r4, #2540]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1808+20
+	str	r1, [sp]
+	mov	r1, r5
+	bl	sftl_printk
+	b	.L1689
+.L1698:
+	ldr	r3, .L1808+16
+	movw	r2, #3156
 	ldrh	r3, [r3]
-	add	r10, r10, r2, lsl #2
-	ldr	r2, .L2499+12
-	str	r1, [r10, #16]
-	add	r3, r3, #1
-	strh	r3, [r2]	@ movhi
-	bl	Ftl_get_new_temp_ppa
-	ldr	ip, [fp, #3224]
-	mov	r1, #1
-	ldr	r2, [fp, #3240]
-	ldr	r3, [fp, #3340]
-	str	r0, [r10, #4]
-	add	r2, r2, r4
-	add	ip, ip, ip, lsl #2
-	ldr	lr, [r2, #8]
-	add	r3, r3, ip, lsl #2
-	ldrh	r0, [fp, #136]
-	ldr	ip, [sp, #36]
-	str	lr, [r3, #8]
-	ldr	r2, [r2, #12]
-	str	r2, [r3, #12]
-	strh	r0, [r9, #2]	@ movhi
-	ldr	r3, [fp, #3224]
-	ldr	r2, [fp, #2648]
-	ldr	r0, [fp, #3240]
-	add	r3, r3, r1
-	str	ip, [r9, #12]
-	str	r2, [r9, #4]
-	add	r0, r0, r4
-	str	r3, [fp, #3224]
-	bl	FtlGcBufAlloc
-	ldrb	r2, [fp, #143]	@ zero_extendqisi2
-	ldr	r3, [fp, #3224]
-	cmp	r2, r3
-	beq	.L2386
-	ldrh	r3, [fp, #140]
+	add	r3, r3, r3, lsl #1
+	asr	r3, r3, #2
+	strh	r3, [r4, r2]	@ movhi
+.L1697:
+	movw	r3, #3210
+	movw	r6, #65535
+	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2384
-.L2386:
-	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	beq	.L2384
+	addne	r5, r5, #32
+	uxthne	r5, r5
+.L1703:
+	ldrh	r3, [r4, #176]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1712
+	cmp	r6, r3
+	strhne	r6, [r4, #176]	@ movhi
+	bne	.L1714
+	ldrh	r3, [r4, #226]
+	cmp	r3, r6
+	beq	.L1714
+	ldr	r2, [r4, #76]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	mvneq	r3, #0
+	strheq	r3, [r4, #226]	@ movhi
+	ldrh	r3, [r4, #226]
+	strh	r3, [r4, #176]	@ movhi
+	mvn	r3, #0
+	strh	r3, [r4, #226]	@ movhi
+.L1714:
+	ldrh	r0, [r4, #176]
 	mov	r3, #0
-	mvn	r1, #0
-	movw	r2, #3672
-	str	r3, [fp, #3320]
-	strh	r3, [fp, #186]	@ movhi
-	strh	r1, [fp, #184]	@ movhi
-	ldrh	r0, [fp, r2]
-	b	.L2306
-.L2323:
-	ldrh	r2, [fp, #136]
+	strb	r3, [r4, #184]
 	movw	r3, #65535
-	cmp	r2, r3
-	ldrhne	r4, [fp, #184]
-	beq	.L2482
-.L2336:
+	cmp	r0, r3
+	beq	.L1712
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	mvnne	r3, #0
+	strhne	r3, [r4, #176]	@ movhi
 	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L2483
-.L2418:
-	ldrh	r3, [fp, #40]
-	mov	r10, #1
-	cmp	r3, r4
-	bne	.L2484
-.L2355:
+	ldrh	r2, [r4, #176]
+	cmp	r2, r3
+	beq	.L1712
+	ldr	r0, .L1808+24
+	bl	make_superblock
+	mov	r3, #0
+	movw	r2, #3666
+	strh	r3, [r4, r2]	@ movhi
+	strh	r3, [r4, #178]	@ movhi
+	strb	r3, [r4, #182]
+	ldrh	r3, [r4, #176]
+	ldr	r2, [r4, #76]
+	lsl	r3, r3, #1
+	ldrh	r2, [r2, r3]
+	movw	r3, #3668
+	strh	r2, [r4, r3]	@ movhi
+.L1712:
+	ldrh	r3, [r4, #176]
+	ldrh	r2, [r4, #28]
+	cmp	r2, r3
+	beq	.L1718
+	ldrh	r2, [r4, #80]
+	cmp	r2, r3
+	beq	.L1718
+	ldrh	r2, [r4, #128]
+	cmp	r2, r3
+	bne	.L1719
+.L1718:
 	mvn	r3, #0
-	movw	r4, #65535
-	strh	r3, [fp, #184]	@ movhi
+	strh	r3, [r4, #176]	@ movhi
+.L1719:
+	ldr	r7, .L1808+4
+	mov	r4, r7
+.L1754:
+	ldrh	r2, [r7, #176]
 	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L2485
-.L2357:
-	ldr	r3, .L2499+16
-	ldr	r5, .L2499
-	ldrh	r6, [r3]
+	cmp	r2, r3
+	bne	.L1720
+	ldr	fp, .L1808+28
 	mov	r3, #0
-	str	r3, [fp, #3220]
-.L2359:
-	mov	r0, r6
+	ldr	r10, .L1808+32
+	str	r3, [r7, #3168]
+	mov	r9, fp
+.L1721:
+	ldrh	r8, [fp]
+	mov	r0, r8
 	bl	List_get_gc_head_node
-	uxth	r3, r0
-	cmp	r3, r4
-	strh	r3, [fp, #184]	@ movhi
-	beq	.L2360
-	ldr	r2, .L2499+20
-	ldrh	lr, [r2]
-	cmp	lr, #0
-	beq	.L2361
-	ldr	r2, [fp, #3272]
-	ldrh	r1, [r2]
-	cmp	r1, r3
-	beq	.L2362
-	sub	ip, lr, #1
-	uxth	ip, ip
-	add	ip, r2, ip, lsl #1
-	b	.L2364
-.L2365:
-	ldrh	r1, [r2, #2]!
-	cmp	r1, r3
-	beq	.L2362
-.L2364:
-	cmp	ip, r2
-	bne	.L2365
-.L2361:
-	ldrh	r1, [r5]
 	uxth	r2, r0
-	ldrh	r0, [fp, #36]
-	add	ip, r6, #1
-	ldr	r8, .L2499+16
-	uxth	ip, ip
-	ldr	r7, [fp, #16]
-	lsl	r2, r2, #1
-	mov	r6, r5
-	mul	r0, r0, r1
-	strh	ip, [r8]	@ movhi
-	ldrh	r1, [r7, r2]
-	add	r8, r0, r0, lsr #31
-	cmp	r1, r8, asr #1
-	bgt	.L2403
-	cmp	r1, #8
-	cmphi	ip, #48
-	movhi	r8, #1
-	movls	r8, #0
-	cmp	lr, #35
-	movhi	lr, #0
-	andls	lr, r8, #1
-	cmp	lr, #0
-	bne	.L2403
+	movw	r1, #65535
+	cmp	r2, r1
+	strh	r2, [r4, #176]	@ movhi
+	bne	.L1722
+	mov	r3, #0
+	mov	r0, #8
+	strh	r3, [fp]	@ movhi
+	b	.L1678
+.L1692:
+	ldrh	r7, [r4, #128]
+	cmp	r7, r1
+	bne	.L1769
+	ldrh	r1, [r4, #226]
+	cmp	r1, r7
+	movne	r3, #0
+	andeq	r3, r3, #1
+	cmp	r3, #0
+	beq	.L1769
+	ldrh	r3, [r4, #176]
+	cmp	r3, r7
+	beq	.L1704
+.L1709:
+	mov	r6, r7
+.L1769:
+	mov	r5, #1
+	b	.L1703
+.L1704:
+	str	r2, [r4, #3168]
+	movw	r2, #3156
+	ldrh	r1, [r4, #228]
+	ldrh	r3, [r4, r2]
+	ldr	r5, .L1808+12
+	cmp	r1, r3
+	bls	.L1705
+	ldrh	r3, [r5]
+	cmp	r3, #0
+	bne	.L1706
+	ldr	r3, [r4, #2556]
+	ldr	r1, [r4, #2552]
+	add	r3, r3, r3, lsl #1
+	cmp	r1, r3, lsr #2
+	movcs	r3, #18
+	bcs	.L1803
+.L1706:
+	ldr	r3, .L1808+16
+	movw	r2, #3156
+	ldrh	r3, [r3]
+	add	r3, r3, r3, lsl #1
+	asr	r3, r3, #2
+.L1803:
+	strh	r3, [r4, r2]	@ movhi
+	bl	FtlReadRefresh
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	ldr	r3, [r4, #76]
+	lsl	r0, r0, #1
+	ldrh	r3, [r3, r0]
+	cmp	r3, #4
+	bls	.L1705
+.L1805:
+	ldrh	r0, [r5]
+	b	.L1678
+.L1705:
+	ldrh	r0, [r5]
+	cmp	r0, #0
+	bne	.L1709
+	ldr	r3, .L1808+16
+	movw	r2, #3156
+	ldrh	r6, [r3]
+	add	r3, r6, r6, lsl #1
+	asr	r3, r3, #2
+	strh	r3, [r4, r2]	@ movhi
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	ldr	r3, [r4, #76]
+	lsl	r0, r0, #1
+	ldrh	r2, [r3, r0]
+	ldr	r3, .L1808+36
+	ldrh	r1, [r3]
+	ldrh	r3, [r4, #236]
+	mul	r3, r3, r1
+	add	r3, r3, r3, lsr #31
+	cmp	r2, r3, asr #1
+	ble	.L1710
+	ldrh	r3, [r4, #228]
+	sub	r6, r6, #1
+	cmp	r3, r6
+	blt	.L1710
+	bl	FtlReadRefresh
+	b	.L1805
+.L1710:
+	cmp	r2, #0
+	bne	.L1709
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r0, [r4, #228]
+	add	r0, r0, #1
+	b	.L1678
+.L1722:
+	str	r0, [sp, #16]
+	mov	r0, r2
+	str	r2, [sp, #12]
+	add	r8, r8, #1
+	bl	IsBlkInGcList
+	cmp	r0, #0
 	ldr	r2, [sp, #12]
-	cmp	r1, r0
-	cmpge	r2, r4
-	bne	.L2367
-	cmp	ip, #3
-	bls	.L2368
-.L2367:
+	ldr	r3, [sp, #16]
+	strhne	r8, [fp]	@ movhi
+	bne	.L1721
+	uxth	r3, r3
+	ldrh	lr, [r4, #236]
+	ldr	r0, [r4, #76]
+	uxth	r8, r8
+	lsl	r1, r3, #1
+	ldrh	r3, [r10]
+	strh	r8, [fp]	@ movhi
+	ldrh	ip, [r0, r1]
+	mul	r3, lr, r3
+	add	lr, r3, r3, lsr #31
+	cmp	ip, lr, asr #1
+	bgt	.L1725
+	cmp	r8, #48
+	cmphi	ip, #8
+	bls	.L1726
+	ldr	ip, .L1808+40
+	ldrh	ip, [ip]
+	cmp	ip, #35
+	bhi	.L1726
+.L1725:
+	mov	ip, #0
+	strh	ip, [r9]	@ movhi
+.L1726:
+	ldrh	r1, [r0, r1]
+	movw	r0, #65535
+	cmp	r3, r1
+	cmple	r6, r0
+	bne	.L1727
+	ldrh	r3, [r9]
+	cmp	r3, #3
+	bhi	.L1727
+	mvn	r3, #0
+	strh	r3, [r4, #176]	@ movhi
+	mov	r3, #0
+	strh	r3, [r9]	@ movhi
+.L1807:
+	ldr	r3, .L1808+12
+	b	.L1806
+.L1727:
 	cmp	r1, #0
-	bne	.L2369
+	bne	.L1728
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L2499+16
-	ldrh	r6, [r3]
-	add	r6, r6, #1
-	uxth	r6, r6
-	strh	r6, [r3]	@ movhi
-	b	.L2359
-.L2390:
-	ldrb	r2, [fp, #192]	@ zero_extendqisi2
-	ldr	r0, [fp, #3240]
-	bl	FlashReadPages
-.L2382:
-	add	r7, r7, #1
-	ldr	r2, [sp, #8]
-	uxth	r3, r7
+	ldrh	r3, [r9]
+	add	r3, r3, #1
+	strh	r3, [r9]	@ movhi
+	b	.L1721
+.L1728:
+	mov	r3, #0
+	strb	r3, [r4, #184]
+	ldrh	r3, [r4, #28]
+	cmp	r3, r2
+	bne	.L1729
+	movw	r2, #717
+	ldr	r1, .L1808+44
+	ldr	r0, .L1808+48
+	bl	sftl_printk
+.L1729:
+	ldrh	r2, [r4, #176]
+	ldrh	r3, [r4, #80]
 	cmp	r2, r3
-	bhi	.L2389
-	ldrh	r3, [fp, #186]
-	mov	r10, r2
-.L2378:
-	add	r3, r10, r3
-	ldr	r2, [sp, #28]
-	uxth	r3, r3
+	bne	.L1730
+	movw	r2, #718
+	ldr	r1, .L1808+44
+	ldr	r0, .L1808+48
+	bl	sftl_printk
+.L1730:
+	ldrh	r2, [r4, #176]
+	ldrh	r3, [r4, #128]
 	cmp	r2, r3
-	strh	r3, [fp, #186]	@ movhi
-	bhi	.L2391
-	ldr	r3, [fp, #3224]
-	cmp	r3, #0
-	bne	.L2486
-.L2392:
-	ldr	r3, .L2499+12
-	ldrh	r4, [r3]
-	cmp	r4, #0
-	bne	.L2393
-	ldrh	r2, [fp, #184]
-	ldr	r3, [fp, #16]
-	lsl	r2, r2, #1
-	ldrh	r1, [r3, r2]
-	add	r3, r3, r2
-	cmp	r1, #0
-	beq	.L2393
-	ldr	r2, [fp, #2608]
-	cmp	r2, #0
-	beq	.L2407
-	ldr	r5, .L2499+24
-	b	.L2397
-.L2395:
-	ldr	r3, [fp, #2608]
-	add	r4, r4, #1
-	cmp	r4, r3
-	bcs	.L2487
-.L2397:
-	mov	r2, #0
-	add	r1, sp, #40
-	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [sp, #40]
-	cmn	r0, #1
-	beq	.L2395
-	ubfx	r0, r0, #10, #16
-	ldrh	r1, [r5]
-	bl	__aeabi_uidivmod
-	ldr	r3, .L2499+28
-	uxth	r0, r1
-	ldrh	r1, [r3]
-	bl	__aeabi_uidiv
-	ldrh	r2, [fp, #184]
-	uxth	r0, r0
-	cmp	r2, r0
-	bne	.L2395
-	ldr	r3, [fp, #2608]
-	cmp	r3, r4
-	bls	.L2488
-.L2393:
-	mvn	r3, #0
-	strh	r3, [fp, #184]	@ movhi
-.L2391:
-	ldrh	r0, [fp, #236]
-	mov	r3, #0
-	str	r3, [fp, #3320]
-	cmp	r0, #2
-	bhi	.L2399
-	ldr	r3, [sp, #24]
-	ldrh	r4, [fp, #184]
-	ldrh	r10, [r3]
-	b	.L2400
-.L2481:
-	movw	r2, #753
-	mov	r1, r6
-	mov	r0, r5
+	bne	.L1731
+	movw	r2, #719
+	ldr	r1, .L1808+44
+	ldr	r0, .L1808+48
 	bl	sftl_printk
-	b	.L2385
-.L2362:
-	add	r6, r6, #1
-	ldr	r3, .L2499+16
-	uxth	r6, r6
-	strh	r6, [r3]	@ movhi
-	b	.L2359
-.L2403:
-	ldr	ip, .L2499+16
-	mov	r1, #0
-	strh	r1, [ip]	@ movhi
-	ldrh	r1, [r7, r2]
-	ldr	r2, [sp, #12]
-	cmp	r0, r1
-	cmple	r2, r4
-	bne	.L2367
-.L2368:
-	mvn	r1, #0
-	mov	r2, #0
-	strh	r1, [fp, #184]	@ movhi
-	movw	r3, #3672
-	ldr	r1, .L2499+16
-	ldrh	r0, [fp, r3]
-	strh	r2, [r1]	@ movhi
-	b	.L2306
-.L2360:
-	ldr	r2, .L2499+16
+.L1731:
+	ldr	r0, .L1808+24
+	bl	make_superblock
+	ldrh	r2, [r4, #176]
 	mov	r3, #0
-	mov	r0, #8
-	strh	r3, [r2]	@ movhi
-	b	.L2306
-.L2479:
-	ldrh	r2, [fp, #136]
-	cmp	r2, r1
-	beq	.L2489
-	ldr	r3, [sp, #16]
-	cmp	r3, #0
-	beq	.L2405
-.L2419:
-	mov	r10, #1
-.L2346:
-	ldrh	r4, [fp, #234]
-	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L2490
-	ldr	r1, [fp, #16]
-	lsl	r2, r4, #1
+	ldr	r1, .L1808+52
+	ldr	r0, [r4, #76]
+	lsl	r2, r2, #1
+	strh	r3, [r1]	@ movhi
+	ldrh	r2, [r0, r2]
+	strh	r3, [r4, #178]	@ movhi
+	strb	r3, [r4, #182]
+	strh	r2, [r1, #2]	@ movhi
+.L1720:
+	mov	r3, #1
+	str	r3, [r4, #3276]
+	ldr	r3, .L1808+32
+	ldrh	r3, [r3]
 	str	r3, [sp, #12]
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	beq	.L1732
+	ldr	r2, [sp, #12]
+	ldrh	r3, [r4, #236]
+	ldr	r1, [r4, #76]
+	mul	r3, r2, r3
+	ldrh	r2, [r4, #176]
+	lsl	r2, r2, #1
 	ldrh	r2, [r1, r2]
-	mvn	r1, #0
-	strh	r1, [fp, #234]	@ movhi
-	cmp	r2, #0
-	moveq	r4, r3
-	strh	r4, [fp, #184]	@ movhi
-.L2347:
-	movw	r2, #65535
+	sub	r3, r3, r2
+	add	r2, r3, #3
+	cmp	r3, #0
+	movlt	r3, r2
+	add	r5, r5, r3, asr #2
+	uxth	r5, r5
+.L1732:
+	ldrh	r3, [r4, #178]
+	ldr	r1, [sp, #12]
+	add	r2, r3, r5
+	cmp	r2, r1
+	movgt	r2, r1
+	subgt	r5, r2, r3
 	mov	r3, #0
-	cmp	r4, r2
-	strb	r3, [fp, #192]
-	beq	.L2338
-	movw	r3, #3268
-	ldrh	r2, [fp, r3]
-	cmp	r2, #0
-	beq	.L2350
-	ldr	r3, [fp, #3272]
-	ldrh	r1, [r3]
-	cmp	r1, r4
-	beq	.L2351
-	sub	r2, r2, #1
-	uxth	r2, r2
-	add	r2, r3, r2, lsl #1
-	b	.L2353
-.L2354:
-	ldrh	r1, [r3, #2]!
-	cmp	r1, r4
-	beq	.L2351
-.L2353:
-	cmp	r2, r3
-	bne	.L2354
-.L2350:
-	ldr	r0, .L2499+32
-	bl	make_superblock
-	ldrh	r4, [fp, #184]
+	uxthgt	r5, r5
+.L1804:
+	str	r3, [sp, #16]
+	ldrh	r3, [sp, #16]
+	cmp	r5, r3
+	bls	.L1742
+	ldr	r3, [sp, #16]
+	movw	r9, #65535
+	ldrh	r8, [r7, #178]
+	mov	r10, #20
+	ldrh	ip, [r7, #236]
+	ldr	r0, [r7, #3188]
+	add	r8, r8, r3
 	mov	r3, #0
-	ldr	r1, [fp, #16]
-	movw	r0, #3674
-	strh	r3, [fp, #186]	@ movhi
-	strb	r3, [fp, #190]
-	lsl	r2, r4, #1
-	strh	r3, [fp, r0]	@ movhi
-	movw	r3, #3676
-	ldrh	r2, [r1, r2]
-	strh	r2, [fp, r3]	@ movhi
-	b	.L2338
-.L2369:
-	ldrh	r2, [fp, #40]
-	mov	r1, #0
-	str	r6, [sp, #24]
-	strb	r1, [fp, #192]
+	ldr	r1, .L1808+56
+	mov	fp, r3
+	b	.L1743
+.L1736:
+	ldrh	r2, [r1, #2]!
+	add	r3, r3, #1
+	cmp	r2, r9
+	mlane	lr, r10, fp, r0
+	orrne	r2, r8, r2, lsl #10
+	strne	r2, [lr, #4]
+	addne	r2, fp, #1
+	uxthne	fp, r2
+.L1743:
+	uxth	r2, r3
+	cmp	ip, r2
+	bhi	.L1736
+	mov	r10, #0
+	ldrb	r2, [r7, #184]	@ zero_extendqisi2
+	mov	r1, fp
+	bl	FlashReadPages
+.L1737:
+	uxth	r3, r10
+	cmp	fp, r3
+	ldrls	r3, [sp, #16]
+	addls	r3, r3, #1
+	bls	.L1804
+.L1741:
+	mov	r8, #20
+	ldr	r3, [r7, #3188]
+	mul	r8, r8, r10
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	cmn	r3, #1
+	beq	.L1738
+	ldr	r9, [r2, #12]
+	movw	r3, #61589
+	ldrh	r2, [r9]
 	cmp	r2, r3
-	beq	.L2491
-.L2371:
-	ldrh	r2, [fp, #88]
+	bne	.L1738
+	ldr	r3, [r9, #8]
+	cmn	r3, #1
+	bne	.L1739
+	movw	r2, #753
+	ldr	r1, .L1808+44
+	ldr	r0, .L1808+48
+	str	r3, [sp, #24]
+	bl	sftl_printk
+	ldr	r3, [sp, #24]
+.L1739:
+	mov	r2, #0
+	add	r1, sp, #36
+	mov	r0, r3
+	bl	log2phys
+	ldr	r1, [r4, #3188]
+	ldr	r3, [sp, #36]
+	add	r1, r1, r8
+	ldr	r2, [r1, #4]
 	cmp	r2, r3
-	beq	.L2492
-.L2372:
-	ldrh	r2, [fp, #136]
+	bne	.L1738
+	ldr	r3, .L1808+52
+	ldr	r2, .L1808+52
+	ldr	r0, [r4, #3172]
+	ldrh	r3, [r3]
+	ldr	r1, [r1, #16]
+	add	r3, r3, #1
+	strh	r3, [r2]	@ movhi
+	mov	r2, #20
+	ldr	r3, [r4, #3296]
+	str	r2, [sp, #28]
+	mla	r3, r2, r0, r3
+	str	r1, [r3, #16]
+	str	r3, [sp, #24]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r3, [sp, #24]
+	ldr	r1, [r4, #3296]
+	ldr	r2, [sp, #28]
+	str	r0, [r3, #4]
+	ldr	r3, [r4, #3172]
+	mla	r3, r2, r3, r1
+	ldr	r2, [r4, #3188]
+	add	r2, r2, r8
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #8]
+	mov	r1, #1
+	ldr	r2, [r2, #12]
+	str	r2, [r3, #12]
+	ldr	r3, [sp, #36]
+	str	r3, [r9, #12]
+	ldrh	r3, [r4, #128]
+	strh	r3, [r9, #2]	@ movhi
+	ldr	r3, [r4, #2596]
+	ldr	r0, [r4, #3188]
+	str	r3, [r9, #4]
+	ldr	r3, [r4, #3172]
+	add	r0, r0, r8
+	add	r3, r3, #1
+	str	r3, [r4, #3172]
+	bl	FtlGcBufAlloc
+	ldrb	r2, [r4, #135]	@ zero_extendqisi2
+	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L2493
-.L2373:
-	ldr	r0, .L2499+32
-	bl	make_superblock
-	ldrh	r0, [fp, #184]
-	mov	r2, #0
-	ldr	r3, .L2499+12
-	mov	r1, r2
-	ldr	lr, [fp, #16]
-	ldr	ip, .L2499+36
-	lsl	r0, r0, #1
-	strh	r2, [r3]	@ movhi
-	mov	r3, r2
-	ldrh	r0, [lr, r0]
-	strh	r2, [fp, #186]	@ movhi
-	strb	r2, [fp, #190]
-	strh	r0, [ip]	@ movhi
-	b	.L2358
-.L2486:
+	beq	.L1740
+	ldrh	r3, [r4, #132]
+	cmp	r3, #0
+	bne	.L1738
+.L1740:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	beq	.L2392
+	beq	.L1738
+	ldr	r3, .L1808+4
 	mov	r2, #0
-	movw	r3, #3672
-	str	r2, [fp, #3320]
-	ldrh	r0, [fp, r3]
-	b	.L2306
-.L2325:
-	cmp	r3, #12
-	ldrhhi	r2, [fp, r2]
-	lsrhi	r10, r2, #4
-	bhi	.L2324
-.L2326:
-	cmp	r3, #8
-	ldrhhi	r2, [fp, r2]
-	ldrhls	r10, [fp, r2]
-	lsrhi	r10, r2, #2
-	b	.L2324
-.L2489:
-	ldrh	r5, [fp, #234]
-	cmp	r5, r2
-	beq	.L2494
-.L2314:
-	ldr	r3, [sp, #16]
+	mvn	r1, #0
+	str	r2, [r3, #3276]
+	strh	r1, [r3, #176]	@ movhi
+	strh	r2, [r3, #178]	@ movhi
+	add	r3, r3, #3664
+.L1806:
+	ldrh	r0, [r3]
+	b	.L1678
+.L1738:
+	add	r10, r10, #1
+	b	.L1737
+.L1742:
+	ldrh	r3, [r7, #178]
+	add	r5, r5, r3
+	ldr	r3, [sp, #12]
+	uxth	r5, r5
+	cmp	r3, r5
+	strh	r5, [r7, #178]	@ movhi
+	bhi	.L1744
+	ldr	r3, [r7, #3172]
 	cmp	r3, #0
-	beq	.L2405
-	movw	r4, #65535
-	cmp	r5, r4
-	beq	.L2408
-.L2409:
-	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L2419
-.L2402:
-	strh	r4, [fp, #184]	@ movhi
-	mov	r10, #1
-	str	r4, [sp, #12]
-	b	.L2347
-.L2487:
-	ldrh	r2, [fp, #184]
-	ldr	r3, [fp, #16]
-	add	r3, r3, r2, lsl #1
-.L2407:
+	beq	.L1745
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	movne	r3, #0
+	strne	r3, [r7, #3276]
+	bne	.L1807
+.L1745:
+	ldr	r3, .L1808+52
+	ldrh	r5, [r3]
+	cmp	r5, #0
+	bne	.L1746
+	ldrh	r3, [r7, #176]
+	ldr	r2, [r7, #76]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1746
+.L1747:
+	ldr	r3, [r7, #2556]
+	cmp	r5, r3
+	bcs	.L1752
 	mov	r2, #0
-	strh	r2, [r3]	@ movhi
-	ldrh	r0, [fp, #184]
+	add	r1, sp, #40
+	mov	r0, r5
+	bl	log2phys
+	ldr	r0, [sp, #40]
+	cmn	r0, #1
+	beq	.L1748
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r7, #176]
+	cmp	r3, r0
+	bne	.L1748
+.L1752:
+	ldr	r3, [r7, #2556]
+	cmp	r5, r3
+	bcc	.L1746
+	ldrh	r3, [r7, #176]
+	mov	r1, #0
+	ldr	r2, [r7, #76]
+	lsl	r3, r3, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r7, #176]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L2393
-.L2482:
-	ldrh	r3, [fp, #234]
-	ldrh	r4, [fp, #184]
-	cmp	r3, r2
-	bne	.L2336
-	cmp	r5, #0
-	bne	.L2495
-	cmp	r4, r3
-	bne	.L2418
-	ldr	r4, [sp, #12]
-	b	.L2402
-.L2480:
-	ldrh	r1, [fp, #234]
-	cmp	r1, r3
-	bne	.L2329
-	movw	r3, #3672
-	ldrh	r0, [fp, r3]
-	cmp	r0, #0
-	bne	.L2330
-	ldr	r3, [fp, #2608]
-	ldr	r1, [fp, #28]
-	add	r3, r3, r3, lsl #1
-	cmp	r1, r3, lsr #2
-	movcs	r3, #18
-	strhcs	r3, [fp, r2]	@ movhi
-	bcs	.L2332
-.L2330:
-	movw	r3, #2676
-	movw	r2, #3208
-	ldrh	r3, [fp, r3]
-	add	r3, r3, r3, lsl #1
-	asr	r3, r3, #2
-	strh	r3, [fp, r2]	@ movhi
-.L2332:
-	mov	r3, #0
-	str	r3, [fp, #3220]
-	b	.L2306
-.L2351:
+.L1746:
 	mvn	r3, #0
-	movw	r4, #65535
-	strh	r3, [fp, #184]	@ movhi
-	b	.L2338
-.L2490:
-	str	r4, [sp, #12]
-	ldrh	r4, [fp, #184]
-	b	.L2347
-.L2483:
-	ldr	r4, [sp, #12]
-	b	.L2409
-.L2495:
-	cmp	r4, r3
-	strne	r3, [sp, #12]
-	movne	r10, #1
-	bne	.L2338
-.L2408:
-	movw	r2, #3208
-	ldrh	r1, [fp, #236]
-	ldrh	r3, [fp, r2]
-	mov	r0, #0
-	str	r0, [fp, #3220]
-	cmp	r1, r3
-	bls	.L2339
-	movw	r3, #3672
-	ldrh	r3, [fp, r3]
-	cmp	r3, r0
-	bne	.L2340
-	ldr	r3, [fp, #2608]
-	ldr	r1, [fp, #28]
-	add	r3, r3, r3, lsl #1
-	cmp	r1, r3, lsr #2
-	movcs	r3, #18
-	strhcs	r3, [fp, r2]	@ movhi
-	bcs	.L2342
-.L2340:
-	movw	r3, #2676
-	movw	r2, #3208
-	ldrh	r3, [fp, r3]
-	add	r3, r3, r3, lsl #1
-	asr	r3, r3, #2
-	strh	r3, [fp, r2]	@ movhi
-.L2342:
-	bl	FtlReadRefresh
-	mov	r0, #0
-	bl	List_get_gc_head_node
-	uxth	r3, r0
-	ldr	r2, [fp, #16]
-	lsl	r3, r3, #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #4
-	bhi	.L2496
-.L2339:
-	movw	r5, #3672
-	ldrh	r0, [fp, r5]
+	strh	r3, [r7, #176]	@ movhi
+.L1744:
+	mov	r3, #0
+	str	r3, [r7, #3276]
+	ldrh	r3, [r7, #228]
+	cmp	r3, #2
+	bhi	.L1753
+	ldr	r3, .L1808+32
+	ldrh	r5, [r3]
+	b	.L1754
+.L1748:
+	add	r5, r5, #1
+	b	.L1747
+.L1753:
+	ldr	r2, .L1808+12
+	ldrh	r0, [r2]
 	cmp	r0, #0
-	beq	.L2343
-.L2345:
-	mov	r10, #1
-	b	.L2334
-.L2496:
-	movw	r3, #3672
-	ldrh	r0, [fp, r3]
-	b	.L2306
-.L2494:
-	ldrh	r2, [fp, #236]
-	cmp	r2, #23
-	movhi	r2, #1024
-	movls	r2, #5120
-	cmp	r3, r2
-	bls	.L2314
-	mov	r7, #0
-	movw	r3, #3672
-	str	r7, [fp, #3212]
-	strh	r7, [fp, r3]	@ movhi
-	bl	GetSwlReplaceBlock
-	cmp	r0, r5
-	str	r0, [sp, #12]
-	beq	.L2497
-	ldrh	r6, [fp, #236]
-	ldr	r1, [sp, #12]
-	ldr	r5, [fp, #16]
-.L2321:
-	movw	r3, #3208
-	ldr	lr, [fp, #2528]
-	ldrh	r0, [fp, r3]
-	lsl	ip, r1, #1
-	mov	r2, r6
-	str	r1, [sp, #12]
-	ldrh	r3, [r5, ip]
-	mov	r5, #0
-	str	r0, [sp, #4]
-	movw	r0, #:lower16:.LC127
-	ldrh	ip, [lr, ip]
-	movt	r0, #:upper16:.LC127
-	str	ip, [sp]
-	bl	sftl_printk
-.L2319:
-	bl	FtlGcReFreshBadBlk
-	b	.L2312
-.L2343:
-	movw	r3, #2676
-	movw	r2, #3208
-	ldrh	r4, [fp, r3]
-	add	r3, r4, r4, lsl #1
-	asr	r3, r3, #2
-	strh	r3, [fp, r2]	@ movhi
-	bl	List_get_gc_head_node
-	ldr	r1, .L2499+40
-	uxth	r2, r0
-	ldrh	r3, [fp, #36]
-	ldr	r0, [fp, #16]
-	lsl	r2, r2, #1
-	ldrh	r1, [r1]
-	ldrh	r2, [r0, r2]
-	mul	r3, r3, r1
-	add	r3, r3, r3, lsr #31
-	cmp	r2, r3, asr #1
-	ble	.L2344
-	ldrh	r3, [fp, #236]
-	sub	r4, r4, #1
-	cmp	r3, r4
-	bge	.L2498
-.L2344:
-	cmp	r2, #0
-	bne	.L2345
-	movw	r0, #65535
-	bl	decrement_vpc_count
-	ldrh	r0, [fp, #236]
-	add	r0, r0, #1
-	b	.L2306
-.L2497:
-	movw	r4, #3210
-	ldrh	r6, [fp, #236]
-	ldrh	r3, [fp, r4]
-	cmp	r3, r6
-	bls	.L2317
-	mov	r0, #64
-	bl	List_get_gc_head_node
-	ldr	r2, [sp, #12]
-	uxth	r3, r0
-	cmp	r3, r2
-	beq	.L2322
-	uxth	r3, r0
-	ldr	r5, [fp, #16]
-	lsl	r3, r3, #1
-	ldrh	r3, [r5, r3]
-	cmp	r3, #7
-	bhi	.L2320
-	mov	r0, r7
-	bl	List_get_gc_head_node
-	mov	r3, #128
-	uxth	r1, r0
-	strh	r3, [fp, r4]	@ movhi
-	ldr	r3, [sp, #12]
-	cmp	r1, r3
-	bne	.L2321
-.L2322:
-	mov	r5, #1
-	b	.L2319
-.L2317:
-	mov	r3, #80
-	mov	r5, #1
-	strh	r3, [fp, r4]	@ movhi
-	b	.L2319
-.L2498:
-	bl	FtlReadRefresh
-	ldrh	r0, [fp, r5]
-	b	.L2306
-.L2320:
-	mov	r3, #64
-	mov	r5, #1
-	strh	r3, [fp, r4]	@ movhi
-	b	.L2319
-.L2399:
-	movw	r3, #3672
-	ldrh	r3, [fp, r3]
-	cmp	r3, #0
-	movne	r0, r3
-	addeq	r0, r0, #1
-	b	.L2306
-.L2488:
-	ldr	r3, [fp, #16]
-	add	r3, r3, r2, lsl #1
-	b	.L2407
-.L2478:
-	bl	__stack_chk_fail
-.L2493:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #719
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2499+8
-	bl	sftl_printk
-	b	.L2373
-.L2492:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #718
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2499+8
-	bl	sftl_printk
-	ldrh	r3, [fp, #184]
-	b	.L2372
-.L2491:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #717
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2499+8
-	bl	sftl_printk
-	ldrh	r3, [fp, #184]
-	b	.L2371
-.L2500:
-	.align	2
-.L2499:
-	.word	.LANCHOR0+310
-	.word	.LANCHOR0+200
-	.word	.LANCHOR1+656
-	.word	.LANCHOR0+3674
-	.word	.LANCHOR0+3216
-	.word	.LANCHOR0+3268
+	addeq	r0, r3, #1
+	b	.L1678
+.L1756:
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1809:
+	.align	2
+.L1808:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3664
+	.word	.LANCHOR0+2624
+	.word	.LC124
+	.word	.LANCHOR0+176
+	.word	.LANCHOR0+3164
 	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
-	.word	.LANCHOR0+184
-	.word	.LANCHOR0+3676
-	.word	.LANCHOR0+312
+	.word	.LANCHOR0+308
+	.word	.LANCHOR0+3200
+	.word	.LANCHOR1+568
+	.word	.LC8
+	.word	.LANCHOR0+3666
+	.word	.LANCHOR0+190
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
@@ -14122,334 +11885,291 @@ rk_ftl_garbage_collect:
 	.type	FtlRead, %function
 FtlRead:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 72
+	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	ip, #:lower16:__stack_chk_guard
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	ip, #:upper16:__stack_chk_guard
-	mov	r8, r1
+	mov	r10, r3
+	ldr	r3, .L1849
 	cmp	r0, #16
-	.pad #76
-	sub	sp, sp, #76
-	ldr	r1, [ip]
-	str	ip, [sp, #28]
-	str	r2, [sp, #24]
-	str	r3, [sp, #8]
-	str	r1, [sp, #68]
-	beq	.L2545
-	movw	r5, #:lower16:.LANCHOR0
-	ldr	r7, [sp, #24]
-	movt	r5, #:upper16:.LANCHOR0
-	ldr	r3, [r5, #344]
-	cmp	r7, r3
-	cmpls	r8, r3
-	movcs	r4, #1
-	movcc	r4, #0
-	bcs	.L2526
-	add	r10, r8, r7
-	cmp	r3, r10
-	bcc	.L2526
-	movw	r3, #:lower16:.LANCHOR2
-	movt	r3, #:upper16:.LANCHOR2
+	.pad #60
+	sub	sp, sp, #60
+	mov	r5, r1
+	str	r2, [sp, #4]
 	ldr	r3, [r3]
-	cmn	r3, #1
-	beq	.L2527
-	movw	r3, #266
-	mov	r0, r8
-	ldrh	r6, [r5, r3]
+	str	r3, [sp, #52]
+	bne	.L1811
+	mov	r2, r10
+	ldr	r1, [sp, #4]
+	add	r0, r5, #256
+	bl	FtlVendorPartRead
+	mov	r6, r0
+.L1810:
+	ldr	r3, .L1849
+	mov	r0, r6
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1832
+	bl	__stack_chk_fail
+.L1811:
+	ldr	r4, .L1849+4
+	ldr	r2, [sp, #4]
+	ldr	r3, [r4, #344]
+	cmp	r2, r3
+	cmpls	r1, r3
+	movcs	r9, #1
+	movcc	r9, #0
+	bcs	.L1834
+	add	r2, r1, r2
+	cmp	r3, r2
+	str	r2, [sp, #12]
+	bcc	.L1834
+	ldr	r3, .L1849+8
+	ldr	r6, [r3]
+	cmn	r6, #1
+	beq	.L1810
+	movw	r3, #262
+	mov	r0, r5
+	ldrh	r6, [r4, r3]
+	mov	r8, r9
 	mov	r1, r6
 	bl	__aeabi_uidiv
+	ldr	r3, [sp, #12]
 	mov	r1, r6
-	mov	r9, r0
 	str	r0, [sp, #16]
-	sub	r0, r10, #1
+	mov	r6, r9
+	sub	r0, r3, #1
 	bl	__aeabi_uidiv
-	ldr	r2, [r5, #2612]
-	rsb	r1, r9, #1
-	ldr	r3, [r5, #2640]
-	mov	ip, r9
-	add	r9, r1, r0
-	str	r0, [sp, #12]
-	cmp	r9, #0
-	add	r2, r2, r9
-	add	r3, r3, r7
-	str	r2, [r5, #2612]
-	str	r3, [r5, #2640]
-	beq	.L2528
-	ldr	fp, .L2555
-	mov	r3, r4
-	str	r4, [sp, #40]
-	mov	r6, r3
-	str	r9, [sp, #4]
-	mov	r4, ip
-	mov	r9, r8
-	str	r3, [sp, #36]
-	str	r3, [sp, #32]
-	str	r3, [sp, #20]
-.L2505:
+	ldr	r3, [sp, #16]
+	ldr	r2, [sp, #4]
+	ldr	r7, [sp, #16]
+	rsb	r3, r3, #1
+	str	r0, [sp, #20]
+	add	r3, r3, r0
+	str	r9, [sp, #28]
+	str	r3, [sp, #8]
+	ldr	r3, [r4, #2588]
+	str	r9, [sp, #24]
+	add	r3, r3, r2
+	ldr	r2, [sp, #8]
+	str	r3, [r4, #2588]
+	ldr	r3, [r4, #2560]
+	add	r3, r3, r2
+	str	r3, [r4, #2560]
+.L1813:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	bne	.L1830
+	ldr	r3, .L1849+4
+	movw	r2, #3210
+	ldrh	r2, [r3, r2]
+	cmp	r2, #0
+	bne	.L1831
+	ldrh	r3, [r3, #228]
+	cmp	r3, #31
+	bhi	.L1810
+.L1831:
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	b	.L1810
+.L1830:
 	mov	r2, #0
-	add	r1, sp, #64
-	mov	r0, r4
+	add	r1, sp, #48
+	mov	r0, r7
 	bl	log2phys
-	ldr	r2, [sp, #64]
-	cmn	r2, #1
-	beq	.L2546
-	ldr	r1, [r5, #3336]
-	add	r7, r6, r6, lsl #2
+	ldr	r3, [sp, #48]
+	cmn	r3, #1
+	moveq	fp, #0
+	beq	.L1815
+	ldr	r2, [r4, #3292]
+	mov	fp, #20
+	mla	fp, fp, r8, r2
+	str	r3, [fp, #4]
 	ldr	r3, [sp, #16]
-	add	r7, r1, r7, lsl #2
-	cmp	r3, r4
-	str	r2, [r7, #4]
-	beq	.L2547
-	ldr	r3, [sp, #12]
-	cmp	r3, r4
-	beq	.L2548
-	ldrh	r2, [fp]
-	mul	r2, r4, r2
-.L2542:
+	cmp	r7, r3
+	bne	.L1819
+	ldr	r3, [r4, #3316]
+	mov	r0, r5
+	str	r3, [fp, #8]
+	ldr	r3, .L1849+12
+	ldrh	r3, [r3]
+	mov	r1, r3
+	str	r3, [sp, #28]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #28]
+	str	r1, [sp, #24]
+	sub	r2, r3, r1
+	ldr	r1, [sp, #4]
+	cmp	r1, r2
+	movcc	r2, r1
+	cmp	r2, r3
+	str	r2, [sp, #28]
+	streq	r10, [fp, #8]
+.L1820:
+	ldr	r3, .L1849+16
+	ldr	r2, [r4, #3340]
+	str	r7, [fp, #16]
+	ldrh	r3, [r3]
+	mul	r3, r8, r3
+	add	r8, r8, #1
+	bic	r3, r3, #3
+	add	r3, r2, r3
+	str	r3, [fp, #12]
+	b	.L1818
+.L1817:
+	mla	r0, r0, r7, fp
+	ldr	r2, [sp, #12]
+	cmp	r5, r0
+	movls	r3, #1
+	movhi	r3, #0
+	cmp	r2, r0
+	movls	r3, #0
+	cmp	r3, #0
+	beq	.L1816
+	sub	r0, r0, r5
+	mov	r2, #512
+	mov	r1, #0
+	add	r0, r10, r0, lsl #9
+	bl	ftl_memset
+.L1816:
+	add	fp, fp, #1
+.L1815:
+	ldr	r3, .L1849+12
+	ldrh	r0, [r3]
+	cmp	fp, r0
+	bcc	.L1817
+.L1818:
 	ldr	r3, [sp, #8]
-	sub	r2, r2, r9
-	add	r2, r3, r2, lsl #9
-	str	r2, [r7, #8]
-.L2511:
-	ldr	r3, .L2555+4
-	ldr	r1, [r5, #3388]
-	str	r4, [r7, #16]
-	ldrh	r2, [r3]
-	mul	r2, r6, r2
-	add	r6, r6, #1
-	bic	r2, r2, #3
-	add	r2, r1, r2
-	str	r2, [r7, #12]
-.L2507:
-	ldr	r3, [sp, #4]
-	add	r4, r4, #1
+	add	r7, r7, #1
 	subs	r3, r3, #1
-	str	r3, [sp, #4]
-	beq	.L2513
-	ldrh	r2, [r5, #36]
-	cmp	r6, r2, lsl #2
-	bne	.L2505
-	cmp	r6, #0
-	beq	.L2505
-.L2523:
-	ldr	r3, [sp, #40]
+	str	r3, [sp, #8]
+	beq	.L1822
+	ldrh	r3, [r4, #236]
+	cmp	r8, r3, lsl #2
+	bne	.L1813
+.L1822:
+	cmp	r8, #0
+	beq	.L1813
 	mov	r2, #0
-	ldr	r0, [r5, #3336]
-	mov	r1, r6
-	mov	r8, #0
-	lsl	r3, r3, #9
-	str	r3, [sp, #60]
-	ldr	r3, [sp, #32]
+	mov	r1, r8
+	ldr	r0, [r4, #3292]
+	mov	fp, #0
+	bl	FlashReadPages
+	lsl	r3, r9, #9
+	str	r3, [sp, #40]
+	ldr	r3, [sp, #24]
 	lsl	r3, r3, #9
-	str	r3, [sp, #52]
-	ldr	r3, [sp, #36]
+	str	r3, [sp, #32]
+	ldr	r3, [sp, #28]
 	lsl	r3, r3, #9
-	str	r3, [sp, #56]
-	bl	FlashReadPages
-	str	r10, [sp, #44]
-	str	r4, [sp, #48]
-	ldr	r10, [sp, #16]
-	ldr	r4, [sp, #12]
-	b	.L2521
-.L2516:
-	cmp	r4, r1
-	beq	.L2549
-.L2517:
-	ldr	r0, [r2, #12]
-	ldr	r0, [r0, #8]
-	cmp	r0, r1
-	ldrne	r1, [r5, #2768]
-	addne	r1, r1, #1
-	strne	r1, [r5, #2768]
-	ldr	r1, [r2]
-	cmn	r1, #1
-	beq	.L2550
-	cmp	r1, #256
-	beq	.L2551
-.L2520:
-	add	r8, r8, #1
-	cmp	r6, r8
-	bls	.L2552
-.L2521:
-	add	r7, r8, r8, lsl #2
-	ldr	r2, [r5, #3336]
-	lsl	r7, r7, #2
-	add	r2, r2, r7
+	str	r3, [sp, #36]
+.L1829:
+	mov	r3, #20
+	ldr	r2, [r4, #3292]
+	mul	r3, r3, fp
+	ldr	r0, [sp, #16]
+	add	r2, r2, r3
 	ldr	r1, [r2, #16]
-	cmp	r10, r1
-	bne	.L2516
+	cmp	r0, r1
+	bne	.L1824
 	ldr	r1, [r2, #8]
-	ldr	r0, [r5, #3364]
-	cmp	r1, r0
-	movne	r1, r10
-	bne	.L2517
-	ldr	r3, [sp, #52]
-	ldr	r2, [sp, #56]
-	ldr	r0, [sp, #8]
+	ldr	r2, [r4, #3316]
+	cmp	r1, r2
+	bne	.L1825
+	str	r3, [sp, #44]
+	mov	r0, r10
+	ldr	r3, [sp, #32]
+	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-	bl	memcpy
-	ldr	r2, [r5, #3336]
-	add	r2, r2, r7
-	ldr	r1, [r2, #16]
-	b	.L2517
-.L2546:
-	ldrh	r0, [fp]
-	cmp	r0, #0
-	beq	.L2507
-	mov	r7, #0
-	b	.L2509
-.L2508:
-	ldrh	r0, [fp]
-	add	r7, r7, #1
-	cmp	r0, r7
-	bls	.L2507
-.L2509:
-	mla	r0, r0, r4, r7
-	cmp	r9, r0
-	movls	r3, #1
-	movhi	r3, #0
-	cmp	r10, r0
-	movls	r3, #0
-	cmp	r3, #0
-	beq	.L2508
-	ldr	r3, [sp, #8]
-	sub	r0, r0, r9
-	mov	r2, #512
-	mov	r1, #0
-	add	r0, r3, r0, lsl #9
-	bl	memset
-	b	.L2508
-.L2550:
-	ldr	r1, [r5, #2768]
-	mvn	r3, #0
-	str	r3, [sp, #20]
-	add	r1, r1, #1
-	str	r1, [r5, #2768]
-	ldr	r1, [r2]
-	cmp	r1, #256
-	bne	.L2520
-.L2551:
+.L1848:
+	bl	ftl_memcpy
+	ldr	r3, [sp, #44]
+.L1825:
+	ldr	r1, [r4, #3292]
+	add	r2, r1, r3
+	ldr	r0, [r2, #12]
+	ldr	ip, [r2, #16]
+	ldr	r0, [r0, #8]
+	cmp	ip, r0
+	ldrne	r0, [r4, #2716]
+	addne	r0, r0, #1
+	strne	r0, [r4, #2716]
+	ldr	ip, [r1, r3]
+	cmn	ip, #1
+	ldreq	r0, [r4, #2716]
+	moveq	r6, ip
+	addeq	r0, r0, #1
+	streq	r0, [r4, #2716]
+	ldr	r3, [r1, r3]
+	cmp	r3, #256
+	bne	.L1828
 	ldr	r0, [r2, #4]
-	add	r8, r8, #1
-	ldr	r3, .L2555+8
 	ubfx	r0, r0, #10, #16
-	ldrh	r1, [r3]
-	bl	__aeabi_uidivmod
-	ldr	r2, .L2555+12
-	uxth	r0, r1
-	ldrh	r1, [r2]
-	bl	__aeabi_uidiv
-	uxth	r0, r0
+	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	cmp	r6, r8
-	bhi	.L2521
-.L2552:
-	ldr	r3, [sp, #4]
-	ldr	r10, [sp, #44]
-	ldr	r4, [sp, #48]
-	cmp	r3, #0
-	bne	.L2553
-.L2504:
-	movw	r3, #3282
-	ldrh	r3, [r5, r3]
-	cmp	r3, #0
-	bne	.L2522
-	ldrh	r3, [r5, #236]
-	cmp	r3, #31
-	bhi	.L2501
-.L2522:
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-.L2501:
-	ldr	r3, [sp, #28]
-	ldr	r2, [sp, #68]
+.L1828:
+	add	fp, fp, #1
+	cmp	r8, fp
+	bne	.L1829
+	mov	r8, #0
+	b	.L1813
+.L1819:
+	ldr	r3, [sp, #20]
+	cmp	r7, r3
+	bne	.L1821
+	ldr	r3, [r4, #3320]
+	ldr	r1, [sp, #12]
+	str	r3, [fp, #8]
+	ldr	r3, .L1849+12
+	ldrh	r2, [r3]
+	mul	r3, r2, r7
+	sub	r9, r1, r3
+	cmp	r2, r9
+	bne	.L1820
+.L1847:
+	sub	r3, r3, r5
+	add	r3, r10, r3, lsl #9
+	str	r3, [fp, #8]
+	b	.L1820
+.L1821:
+	ldr	r3, .L1849+12
+	ldrh	r3, [r3]
+	mul	r3, r7, r3
+	b	.L1847
+.L1824:
 	ldr	r0, [sp, #20]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L2554
-	add	sp, sp, #76
+	cmp	r0, r1
+	bne	.L1825
+	ldr	r1, [r2, #8]
+	ldr	r2, [r4, #3320]
+	cmp	r1, r2
+	bne	.L1825
+	str	r3, [sp, #44]
+	ldr	r3, .L1849+12
+	ldr	r2, [sp, #40]
+	ldrh	r0, [r3]
+	ldr	r3, [sp, #20]
+	mul	r0, r3, r0
+	sub	r0, r0, r5
+	add	r0, r10, r0, lsl #9
+	b	.L1848
+.L1834:
+	mvn	r6, #0
+	b	.L1810
+.L1832:
+	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2549:
-	ldr	r1, [r2, #8]
-	ldr	r0, [r5, #3368]
-	cmp	r1, r0
-	movne	r1, r4
-	bne	.L2517
-	ldrh	r0, [fp]
-	ldr	r3, [sp, #8]
-	ldr	r2, [sp, #60]
-	mul	r0, r4, r0
-	sub	r0, r0, r9
-	add	r0, r3, r0, lsl #9
-	bl	memcpy
-	ldr	r2, [r5, #3336]
-	add	r2, r2, r7
-	ldr	r1, [r2, #16]
-	b	.L2517
-.L2545:
-	mov	r2, r3
-	ldr	r1, [sp, #24]
-	add	r0, r8, #256
-	bl	FtlVendorPartRead
-	str	r0, [sp, #20]
-	b	.L2501
-.L2528:
-	str	r9, [sp, #20]
-	b	.L2504
-.L2526:
-	mvn	r3, #0
-	str	r3, [sp, #20]
-	b	.L2501
-.L2527:
-	str	r3, [sp, #20]
-	b	.L2501
-.L2513:
-	cmp	r6, #0
-	bne	.L2523
-	b	.L2504
-.L2547:
-	ldr	r2, [r5, #3364]
-	mov	r0, r9
-	ldrh	r8, [fp]
-	str	r2, [r7, #8]
-	mov	r1, r8
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #24]
-	sub	r2, r8, r1
-	str	r1, [sp, #32]
-	cmp	r3, r2
-	movcs	r3, r2
-	cmp	r3, r8
-	str	r3, [sp, #36]
-	ldreq	r3, [sp, #8]
-	streq	r3, [r7, #8]
-	b	.L2511
-.L2554:
-	bl	__stack_chk_fail
-.L2548:
-	ldrh	r1, [fp]
-	ldr	r0, [r5, #3368]
-	mul	r2, r3, r1
-	str	r0, [r7, #8]
-	sub	r3, r10, r2
-	cmp	r1, r3
-	str	r3, [sp, #40]
-	bne	.L2511
-	b	.L2542
-.L2553:
-	mov	r6, #0
-	b	.L2505
-.L2556:
+.L1850:
 	.align	2
-.L2555:
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+320
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+264
+.L1849:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+262
+	.word	.LANCHOR0+316
 	.fnend
 	.size	FtlRead, .-FtlRead
 	.align	2
@@ -14478,487 +12198,436 @@ sftl_read:
 	.type	FtlWrite, %function
 FtlWrite:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 96
+	@ args = 0, pretend = 0, frame = 72
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	ip, #:lower16:__stack_chk_guard
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	ip, #:upper16:__stack_chk_guard
-	.pad #100
-	sub	sp, sp, #100
+	.pad #76
+	sub	sp, sp, #76
+	str	r3, [sp, #12]
 	cmp	r0, #16
-	str	r1, [sp, #12]
-	ldr	r1, [ip]
-	str	ip, [sp, #52]
-	str	r2, [sp, #48]
-	str	r3, [sp, #16]
-	str	r1, [sp, #92]
-	beq	.L2626
-	movw	r9, #:lower16:.LANCHOR0
+	mov	r10, r1
+	ldr	r3, .L1907
+	str	r2, [sp, #8]
+	ldr	r3, [r3]
+	str	r3, [sp, #68]
+	bne	.L1853
 	ldr	r2, [sp, #12]
-	movt	r9, #:upper16:.LANCHOR0
-	ldr	r6, [sp, #48]
-	ldr	r3, [r9, #344]
-	cmp	r6, r3
-	cmpls	r2, r3
-	bcs	.L2601
-	mov	r1, r2
-	add	r2, r2, r6
-	cmp	r3, r2
-	mov	r7, r2
-	str	r2, [sp, #60]
-	bcc	.L2601
-	movw	r3, #:lower16:.LANCHOR2
-	movt	r3, #:upper16:.LANCHOR2
-	ldr	r0, [r3]
-	mov	r5, r3
-	str	r3, [sp, #44]
+	add	r0, r10, #256
+	ldr	r1, [sp, #8]
+	bl	FtlVendorPartWrite
+.L1852:
+	ldr	r3, .L1907
+	ldr	r2, [sp, #68]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1889
+	bl	__stack_chk_fail
+.L1853:
+	ldr	r4, .L1907+4
+	ldr	r2, [sp, #8]
+	ldr	r3, [r4, #344]
+	cmp	r2, r3
+	cmpls	r1, r3
+	bcs	.L1891
+	add	r6, r1, r2
+	cmp	r3, r6
+	bcc	.L1891
+	ldr	r5, .L1907+8
+	ldr	r0, [r5]
 	cmn	r0, #1
-	beq	.L2558
-	movw	r2, #266
+	beq	.L1852
 	mov	r3, #2048
-	ldrh	r4, [r9, r2]
-	mov	r0, r1
-	str	r3, [r9, #3680]
-	mov	r1, r4
+	mov	r0, r10
+	str	r3, [r4, #3672]
+	movw	r3, #262
+	ldrh	r7, [r4, r3]
+	mov	r1, r7
 	bl	__aeabi_uidiv
-	mov	r1, r4
-	mov	r8, r0
+	mov	r1, r7
 	str	r0, [sp, #4]
-	sub	r0, r7, #1
+	sub	r0, r6, #1
 	bl	__aeabi_uidiv
-	sub	r3, r0, r8
-	ldr	r1, [r5, #8]
-	str	r3, [sp, #56]
-	add	r3, r3, #1
-	ldr	r2, [r9, #2620]
+	ldr	r2, [sp, #4]
 	str	r0, [sp, #20]
-	mov	r0, r3
-	str	r3, [sp, #28]
-	cmp	r1, #0
-	ldr	r3, [r9, #2636]
-	add	r2, r2, r0
-	str	r2, [r9, #2620]
-	addeq	fp, r9, #40
-	add	r3, r3, r6
-	str	r3, [r9, #2636]
-	bne	.L2627
-.L2561:
-	ldr	r3, [sp, #28]
+	sub	r3, r0, r2
+	ldr	r2, [sp, #8]
+	add	fp, r3, #1
+	str	r3, [sp, #24]
+	ldr	r3, [r4, #2584]
+	add	r3, r3, r2
+	str	r3, [r4, #2584]
+	ldr	r3, [r4, #2568]
+	add	r3, r3, fp
+	str	r3, [r4, #2568]
+	ldr	r3, [r5, #8]
+	cmp	r3, #0
+	addeq	r4, r4, #28
+	beq	.L1855
+	ldrh	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L2562
-	ldr	r10, [sp, #4]
-.L2563:
-	ldrb	r2, [fp, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #36]
+	addne	r4, r4, #28
+	addeq	r4, r4, #80
+.L1855:
+	ldr	r7, [sp, #4]
+	ldr	r5, .L1907+4
+.L1856:
+	cmp	fp, #0
+	bne	.L1884
+	ldr	r1, [sp, #24]
+	mov	r0, fp
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r5, #228]
+	cmp	r3, #5
+	movls	r4, #256
+	ldrls	r6, .L1907+12
+	bls	.L1888
+.L1887:
+	mov	r0, #0
+	b	.L1852
+.L1884:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r5, #236]
 	cmp	r2, r3
-	bcs	.L2628
-.L2566:
-	ldrh	r3, [fp, #4]
-	cmp	r3, #0
-	bne	.L2567
-	ldr	r2, .L2642
-	cmp	fp, r2
-	beq	.L2629
-	ldr	r1, [sp, #44]
-	str	r3, [r1, #8]
-	ldrh	r3, [r9, #44]
+	bcc	.L1857
+	movw	r2, #1041
+	ldr	r1, .L1907+16
+	ldr	r0, .L1907+20
+	bl	sftl_printk
+.L1857:
+	ldrh	r2, [r4, #4]
+	cmp	r2, #0
+	bne	.L1858
+	ldr	r3, .L1907+24
+	ldr	r6, .L1907+8
+	cmp	r4, r3
+	bne	.L1859
+	ldrh	r8, [r5, #84]
+	cmp	r8, #0
+	bne	.L1860
+	add	r0, r4, #52
+	bl	allocate_new_data_superblock
+	str	r8, [r6, #8]
+.L1860:
+	ldr	r0, .L1907+24
+	bl	allocate_new_data_superblock
+	ldr	r4, .L1907+24
+	ldr	r2, [r6, #8]
+	add	r3, r4, #52
+	cmp	r2, #0
+	movne	r4, r3
+.L1861:
+	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	movne	fp, r2
-	beq	.L2630
-.L2567:
-	ldr	r1, [sp, #28]
-	ldrb	r2, [fp, #7]	@ zero_extendqisi2
-	ldrb	r0, [fp, #6]	@ zero_extendqisi2
-	cmp	r3, r1
-	movcs	r3, r1
-	ldrh	r1, [r9, #36]
+	bne	.L1858
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L1858:
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	ldrh	r3, [r4, #4]
 	lsl	r2, r2, #2
+	cmp	r3, fp
+	movcs	r3, fp
 	cmp	r2, r3
 	movcc	r3, r2
-	cmp	r0, r1
-	str	r3, [sp, #24]
-	bcs	.L2631
-	ldr	r3, [sp, #24]
-	cmp	r3, #0
-	beq	.L2572
-.L2639:
-	ldrh	r3, [fp, #4]
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	str	r3, [sp, #36]
+	ldrh	r3, [r5, #236]
+	cmp	r2, r3
+	bcc	.L1862
+	movw	r2, #1074
+	ldr	r1, .L1907+16
+	ldr	r0, .L1907+20
+	bl	sftl_printk
+.L1862:
+	mov	r3, #0
+.L1906:
+	str	r3, [sp]
+	ldr	r3, [sp]
+	ldr	r2, [sp, #36]
+	cmp	r3, r2
+	bne	.L1882
+.L1864:
+	mov	r3, r4
+	mov	r2, #0
+	ldr	r1, [sp]
+	ldr	r0, [r5, #3300]
+	bl	FtlProgPages
+	ldr	r3, [sp]
+	cmp	r3, fp
+	bls	.L1883
+	mov	r2, #1152
+	ldr	r1, .L1907+16
+	ldr	r0, .L1907+20
+	bl	sftl_printk
+.L1883:
+	ldr	r3, [sp]
+	sub	fp, fp, r3
+	b	.L1856
+.L1859:
+	str	r2, [r6, #8]
+	ldrh	r2, [r5, #32]
+	cmp	r2, #0
+	movne	r4, r3
+	bne	.L1858
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+	b	.L1861
+.L1882:
+	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L2572
-	movw	r3, #:lower16:.LC129
-	mov	r8, #0
-	movt	r3, #:upper16:.LC129
-	str	r3, [sp, #40]
-	ldr	r3, [sp, #24]
-	add	r3, r3, r10
-	str	r3, [sp, #8]
-.L2575:
+	beq	.L1864
 	mov	r2, #0
-	add	r1, sp, #68
-	mov	r0, r10
-	add	r6, r8, r8, lsl #2
+	add	r1, sp, #44
+	mov	r0, r7
+	mov	r8, #20
 	bl	log2phys
-	mov	r0, fp
-	lsl	r6, r6, #2
+	mov	r0, r4
 	bl	get_new_active_ppa
-	ldr	r3, .L2642+4
-	mov	r1, #0
-	ldr	r7, [r9, #3388]
-	ldrh	r4, [r3]
-	ldr	r3, [r9, #3344]
-	mov	r2, r4
-	mul	r4, r8, r4
-	add	r3, r3, r6
+	ldr	r2, .L1907+28
+	ldr	r1, [sp]
+	ldr	r3, [sp]
+	ldrh	r2, [r2]
+	mul	r8, r8, r3
+	ldr	r3, [r5, #3300]
+	mul	r1, r2, r1
+	add	r3, r3, r8
 	str	r0, [r3, #4]
-	str	r10, [r3, #16]
-	bic	r4, r4, #3
-	add	r5, r7, r4
-	str	r5, [r3, #12]
-	mov	r0, r5
-	bl	memset
+	bic	r1, r1, #3
+	str	r7, [r3, #16]
+	str	r1, [sp, #28]
+	ldr	r0, [sp, #28]
+	ldr	r1, [r5, #3340]
+	add	r9, r1, r0
+	str	r1, [sp, #32]
+	str	r9, [r3, #12]
+	mov	r1, #0
+	mov	r0, r9
+	bl	ftl_memset
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #20]
-	cmp	r2, r10
-	cmpne	r3, r10
-	bne	.L2576
-	cmp	r3, r10
-	ldr	r3, .L2642+8
+	cmp	r7, r2
+	cmpne	r7, r3
+	bne	.L1865
+	cmp	r7, r3
+	bne	.L1866
+	ldr	r3, .L1907+32
+	mov	r0, r10
+	ldrh	r6, [r3]
+	mov	r1, r6
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #8]
+	sub	r6, r6, r1
+	str	r1, [sp, #16]
+	cmp	r6, r3
+	movcs	r6, r3
+.L1867:
+	ldr	r3, .L1907+32
 	ldrh	r3, [r3]
-	beq	.L2632
-	smulbb	r2, r10, r3
-	ldr	r1, [sp, #60]
-	sub	r2, r1, r2
-	uxth	r2, r2
-	cmp	r3, r2
-	str	r2, [sp, #32]
-	beq	.L2633
-	ldr	r3, [r9, #3344]
-	mov	r2, #0
-	str	r2, [sp, #36]
-	ldr	r2, [r9, #3368]
-	add	r3, r3, r6
+	cmp	r6, r3
+	ldr	r3, [sp, #4]
+	bne	.L1868
+	cmp	r7, r3
+	ldr	r3, [r5, #3300]
+	add	r8, r3, r8
+	ldreq	r3, [sp, #12]
+	beq	.L1903
+	mul	r6, r6, r7
+	ldr	r3, [sp, #12]
+	sub	r6, r6, r10
+	add	r6, r3, r6, lsl #9
+	str	r6, [r8, #8]
+.L1870:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r5, #236]
+	cmp	r2, r3
+	bcc	.L1879
+	movw	r2, #1143
+	ldr	r1, .L1907+16
+	ldr	r0, .L1907+20
+	bl	sftl_printk
+.L1879:
+	ldr	r3, .L1907+36
+	ldr	r2, [sp, #32]
+	ldr	r1, [sp, #28]
+	strh	r3, [r2, r1]	@ movhi
+	ldr	r3, [r5, #2596]
+	str	r7, [r9, #8]
+	add	r7, r7, #1
+	str	r3, [r9, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, #0
+	str	r3, [r5, #2596]
+	ldr	r3, [sp, #44]
+	str	r3, [r9, #12]
+	ldrh	r3, [r4]
+	strh	r3, [r9, #2]	@ movhi
+	ldr	r3, [sp]
+	add	r3, r3, #1
+	b	.L1906
+.L1866:
+	ldr	r3, [sp, #8]
+	add	r6, r10, r3
+	ldr	r3, .L1907+32
+	ldrh	r2, [r3]
+	mov	r3, #0
+	str	r3, [sp, #16]
+	smulbb	r2, r2, r7
+	sub	r6, r6, r2
+	uxth	r6, r6
+	b	.L1867
+.L1868:
+	cmp	r7, r3
+	ldr	r3, [r5, #3300]
+	ldreq	r2, [r5, #3316]
+	ldrne	r2, [r5, #3320]
+	add	r3, r3, r8
 	str	r2, [r3, #8]
-.L2598:
-	ldr	r0, [sp, #68]
-	cmn	r0, #1
-	beq	.L2583
-	str	r10, [sp, #88]
-	mov	r2, #0
-	ldr	ip, [r3, #8]
+	ldr	r3, [sp, #44]
+	cmn	r3, #1
+	beq	.L1873
+	str	r3, [sp, #52]
 	mov	r1, #1
+	ldr	r3, [r5, #3300]
+	add	r0, sp, #48
+	str	r7, [sp, #64]
+	add	r3, r3, r8
+	ldr	r2, [r3, #8]
 	ldr	r3, [r3, #12]
-	str	r0, [sp, #76]
-	add	r0, sp, #72
-	str	ip, [sp, #80]
-	str	r3, [sp, #84]
+	str	r2, [sp, #56]
+	mov	r2, #0
+	str	r3, [sp, #60]
 	bl	FlashReadPages
-	ldr	r3, [sp, #72]
+	ldr	r3, [sp, #48]
 	cmn	r3, #1
-	beq	.L2634
-	ldr	r3, [r5, #8]
-	cmp	r3, r10
-	beq	.L2588
-	ldr	r3, [r9, #2768]
-	mov	r2, r10
-	ldr	r0, [sp, #40]
-	add	r3, r3, #1
-	str	r3, [r9, #2768]
-	ldr	r1, [r5, #8]
-	bl	sftl_printk
-	ldr	r3, [r5, #8]
-	cmp	r3, r10
-	beq	.L2588
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1128
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2642+12
+	bne	.L1874
+	ldr	r2, [r5, #2716]
+	ldr	r0, .L1907+40
+	add	r2, r2, #1
+	str	r2, [r5, #2716]
+	mov	r2, r7
+	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L2588:
+.L1877:
 	ldr	r3, [sp, #4]
-	cmp	r3, r10
-	beq	.L2635
-	ldr	r3, .L2642+8
-	ldrh	r1, [r3]
-	ldr	r3, [sp, #32]
-	mul	r1, r10, r1
-	lsl	r2, r3, #9
-	ldr	r3, [r9, #3344]
-	add	r6, r3, r6
-	ldr	r3, [sp, #12]
-	ldr	r0, [r6, #8]
-	sub	r1, r1, r3
+	lsl	r2, r6, #9
+	cmp	r7, r3
+	bne	.L1878
+	ldr	r3, [r5, #3300]
+	ldr	r1, [sp, #12]
+	add	r8, r3, r8
 	ldr	r3, [sp, #16]
-	add	r1, r3, r1, lsl #9
-	bl	memcpy
-.L2582:
-	ldrb	r2, [fp, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #36]
-	cmp	r2, r3
-	bcs	.L2636
-.L2590:
-	movw	r3, #61589
-	add	r8, r8, #1
-	movt	r3, 65535
-	strh	r3, [r7, r4]	@ movhi
-	ldr	r1, [sp, #68]
-	ldr	r2, [r9, #2648]
-	str	r10, [r5, #8]
-	add	r10, r10, #1
-	str	r1, [r5, #12]
-	ldr	r1, [sp, #8]
-	add	r3, r2, #1
-	cmn	r3, #1
-	str	r2, [r5, #4]
-	ldrh	r2, [fp]
-	moveq	r3, #0
-	cmp	r1, r10
-	str	r3, [r9, #2648]
-	strh	r2, [r5, #2]	@ movhi
-	beq	.L2574
-	ldrh	r3, [fp, #4]
-	cmp	r3, #0
-	bne	.L2575
-	str	r8, [sp, #24]
-.L2574:
-	ldr	r4, [sp, #24]
-	mov	r2, #0
-	mov	r3, fp
-	ldr	r0, [r9, #3344]
-	mov	r1, r4
-	bl	FtlProgPages
-	ldr	r2, [sp, #28]
-	cmp	r4, r2
-	bhi	.L2637
-.L2594:
-	ldr	r3, [sp, #28]
-	ldr	r2, [sp, #24]
-	subs	r3, r3, r2
-	str	r3, [sp, #28]
-	bne	.L2563
-.L2562:
-	ldr	r1, [sp, #56]
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r9, #236]
-	cmp	r3, #5
-	bhi	.L2565
-	ldr	r6, .L2642+16
-	mov	r4, #256
-	movw	r5, #65535
-	sub	r7, r6, #2
-	b	.L2597
-.L2596:
-	mov	r1, #1
-	mov	r3, #128
-	mov	r0, r1
-	strh	r3, [r6]	@ movhi
-	strh	r3, [r7]	@ movhi
-	bl	rk_ftl_garbage_collect
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r9, #236]
-	cmp	r3, #2
-	bhi	.L2565
-	subs	r4, r4, #1
-	beq	.L2565
-.L2597:
-	ldrh	r3, [r9, #184]
-	cmp	r3, r5
-	bne	.L2596
-	ldrh	r3, [r9, #234]
-	cmp	r3, r5
-	bne	.L2596
-	mov	r0, #0
-	bl	List_get_gc_head_node
-	uxth	r0, r0
-	bl	FtlGcRefreshBlock
-	b	.L2596
-.L2565:
-	mov	r0, #0
-.L2558:
-	ldr	r3, [sp, #52]
-	ldr	r2, [sp, #92]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L2638
-	add	sp, sp, #100
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2576:
-	ldr	r3, .L2642+8
-	ldr	r2, [r9, #3344]
-	ldrh	r3, [r3]
-	mul	r3, r10, r3
-.L2622:
-	add	r6, r2, r6
-	ldr	r2, [sp, #12]
-	sub	r3, r3, r2
-	ldr	r2, [sp, #16]
-	add	r3, r2, r3, lsl #9
-	str	r3, [r6, #8]
-	ldrb	r2, [fp, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #36]
-	cmp	r2, r3
-	bcc	.L2590
-.L2636:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1143
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2642+12
-	bl	sftl_printk
-	b	.L2590
-.L2633:
-	mul	r3, r10, r3
-	ldr	r2, [r9, #3344]
-	b	.L2622
-.L2583:
-	ldr	r0, [r3, #8]
-	mov	r1, #0
-	ldr	r3, .L2642+20
-	ldrh	r2, [r3]
-	bl	memset
-	b	.L2588
-.L2634:
-	ldr	r1, [r9, #2768]
-	movw	r0, #:lower16:.LC128
-	movt	r0, #:upper16:.LC128
-	mov	r2, r10
-	add	r1, r1, #1
-	str	r1, [r9, #2768]
-	ldr	r1, [r5, #8]
-	bl	sftl_printk
-	b	.L2588
-.L2637:
-	movw	r0, #:lower16:.LC8
-	mov	r2, #1152
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2642+12
-	bl	sftl_printk
-	b	.L2594
-.L2631:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1074
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2642+12
+	ldr	r0, [r8, #8]
+	add	r0, r0, r3, lsl #9
+.L1904:
+	bl	ftl_memcpy
+	b	.L1870
+.L1874:
+	ldr	r3, [r9, #8]
+	cmp	r7, r3
+	beq	.L1876
+	ldr	r3, [r5, #2716]
+	mov	r2, r7
+	ldr	r0, .L1907+44
+	add	r3, r3, #1
+	str	r3, [r5, #2716]
+	ldr	r1, [r9, #8]
 	bl	sftl_printk
-	ldr	r3, [sp, #24]
-	cmp	r3, #0
-	bne	.L2639
-.L2572:
-	mov	r2, #0
-	mov	r3, fp
-	mov	r1, r2
-	ldr	r0, [r9, #3344]
-	bl	FtlProgPages
-	ldrb	r2, [fp, #6]	@ zero_extendqisi2
-	ldrh	r3, [r9, #36]
-	cmp	r2, r3
-	bcc	.L2566
-.L2628:
-	movw	r0, #:lower16:.LC8
-	movw	r2, #1041
-	movt	r0, #:upper16:.LC8
-	ldr	r1, .L2642+12
+.L1876:
+	ldr	r3, [r9, #8]
+	cmp	r7, r3
+	beq	.L1877
+	movw	r2, #1128
+	ldr	r1, .L1907+16
+	ldr	r0, .L1907+20
 	bl	sftl_printk
-	b	.L2566
-.L2630:
-	mov	r0, fp
-	bl	allocate_new_data_superblock
-.L2570:
-	ldrh	r3, [fp, #4]
-	cmp	r3, #0
-	bne	.L2567
-	mov	r0, fp
-	bl	allocate_new_data_superblock
-	ldrh	r3, [fp, #4]
-	b	.L2567
-.L2629:
-	ldrh	r4, [r9, #92]
-	cmp	r4, #0
-	beq	.L2640
-.L2569:
-	ldr	r0, .L2642
-	bl	allocate_new_data_superblock
-	ldr	r2, [sp, #44]
-	ldr	r3, .L2642+24
-	ldr	r1, [r2, #8]
-	sub	r2, r3, #48
-	cmp	r1, #0
-	movne	fp, r3
-	moveq	fp, r2
-	b	.L2570
-.L2627:
-	ldrh	r3, [r9, #44]
-	cmp	r3, #0
-	addne	fp, r9, #40
-	addeq	fp, r9, #88
-	b	.L2561
-.L2640:
-	add	r0, fp, #48
-	bl	allocate_new_data_superblock
-	ldr	r3, [sp, #44]
-	str	r4, [r3, #8]
-	b	.L2569
-.L2626:
-	mov	r2, r3
+	b	.L1877
+.L1873:
+	ldr	r3, [r5, #3300]
+	mov	r1, #0
+	ldr	r2, .L1907+48
+	add	r3, r3, r8
+	ldrh	r2, [r2]
+	ldr	r0, [r3, #8]
+	bl	ftl_memset
+	b	.L1877
+.L1878:
+	ldr	r3, .L1907+32
+	ldrh	r1, [r3]
+	ldr	r3, [r5, #3300]
+	mul	r1, r7, r1
+	add	r8, r3, r8
 	ldr	r3, [sp, #12]
-	ldr	r1, [sp, #48]
-	add	r0, r3, #256
-	bl	FtlVendorPartWrite
-	b	.L2558
-.L2601:
-	mvn	r0, #0
-	b	.L2558
-.L2632:
-	mov	r1, r3
-	ldr	r0, [sp, #12]
-	str	r3, [sp, #32]
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #32]
-	str	r1, [sp, #36]
-	sub	r2, r3, r1
-	ldr	r1, [sp, #48]
-	cmp	r2, r1
-	movcs	r2, r1
+	ldr	r0, [r8, #8]
+	sub	r1, r1, r10
+	add	r1, r3, r1, lsl #9
+	b	.L1904
+.L1865:
+	ldr	r3, [r5, #3300]
+	ldr	r2, [sp, #12]
+	add	r8, r3, r8
+	ldr	r3, .L1907+32
+	ldrh	r3, [r3]
+	mul	r3, r7, r3
+	sub	r3, r3, r10
+	add	r3, r2, r3, lsl #9
+.L1903:
+	str	r3, [r8, #8]
+	b	.L1870
+.L1888:
+	ldrh	r3, [r5, #176]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1886
+	ldrh	r2, [r5, #226]
 	cmp	r2, r3
-	str	r2, [sp, #32]
-	beq	.L2641
-	ldr	r3, [r9, #3344]
-	ldr	r2, [r9, #3364]
-	add	r3, r3, r6
-	str	r2, [r3, #8]
-	b	.L2598
-.L2635:
-	ldr	r3, [r9, #3344]
-	ldr	r2, [sp, #32]
-	ldr	r1, [sp, #16]
-	add	r6, r3, r6
-	ldr	r3, [sp, #36]
-	ldr	r0, [r6, #8]
-	lsl	r2, r2, #9
-	add	r0, r0, r3, lsl #9
-	bl	memcpy
-	b	.L2582
-.L2638:
-	bl	__stack_chk_fail
-.L2641:
-	ldr	r3, [r9, #3344]
-	add	r6, r3, r6
-	ldr	r3, [sp, #16]
-	str	r3, [r6, #8]
-	b	.L2582
-.L2643:
-	.align	2
-.L2642:
-	.word	.LANCHOR0+40
-	.word	.LANCHOR0+320
-	.word	.LANCHOR0+266
-	.word	.LANCHOR1+680
-	.word	.LANCHOR0+3210
-	.word	.LANCHOR0+318
-	.word	.LANCHOR0+88
+	bne	.L1886
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L1886:
+	ldr	r2, .L1907+52
+	mov	r1, #1
+	mov	r3, #128
+	mov	r0, r1
+	strh	r3, [r6]	@ movhi
+	strh	r3, [r2]	@ movhi
+	bl	rk_ftl_garbage_collect
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r5, #228]
+	cmp	r3, #2
+	bhi	.L1887
+	subs	r4, r4, #1
+	bne	.L1888
+	b	.L1887
+.L1891:
+	mvn	r0, #0
+	b	.L1852
+.L1889:
+	add	sp, sp, #76
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1908:
+	.align	2
+.L1907:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3158
+	.word	.LANCHOR1+591
+	.word	.LC8
+	.word	.LANCHOR0+28
+	.word	.LANCHOR0+316
+	.word	.LANCHOR0+262
+	.word	-3947
+	.word	.LC125
+	.word	.LC126
+	.word	.LANCHOR0+314
+	.word	.LANCHOR0+3156
 	.fnend
 	.size	FtlWrite, .-FtlWrite
 	.align	2
@@ -14978,510 +12647,747 @@ sftl_gc:
 	.fnend
 	.size	sftl_gc, .-sftl_gc
 	.align	2
-	.global	sftl_init
+	.global	FtlLoadSysInfo
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_init, %function
-sftl_init:
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r1, #:lower16:.LC0
-	movw	r5, #:lower16:.LANCHOR2
-	movw	r0, #:lower16:.LC77
-	mvn	r3, #0
-	movt	r1, #:upper16:.LC0
-	movt	r0, #:upper16:.LC77
-	movt	r5, #:upper16:.LANCHOR2
-	str	r3, [r5]
-	movw	r4, #:lower16:.LANCHOR0
-	bl	sftl_printk
-	ldr	r0, .L2653
-	movt	r4, #:upper16:.LANCHOR0
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	lr, [r4, #244]
-	mov	ip, #0
-	add	r3, r4, #416
-	mov	r1, ip
-	mov	r2, #2048
-	add	r0, r4, #424
-	strh	lr, [r3]	@ movhi
-	strh	ip, [r3, #2]	@ movhi
-	strh	ip, [r3, #4]	@ movhi
-	strh	ip, [r3, #6]	@ movhi
-	bl	memset
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	beq	.L2652
-.L2649:
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L2652:
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	bne	.L2649
-	ldrh	r3, [r4, #236]
-	mov	r2, #1
-	str	r2, [r5]
-	cmp	r3, #15
-	bhi	.L2649
-	movw	r4, #8129
-.L2648:
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r1, #0
+	ldr	r4, .L1941
+	.pad #20
+	sub	sp, sp, #20
+	movw	r7, #2628
+	ldr	r3, [r4, #3304]
+	ldrh	r2, [r4, #244]
+	ldr	r0, [r4, #76]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	lsl	r2, r2, #1
+	str	r3, [r4, #3468]
+	bl	ftl_memset
+	ldrh	r0, [r4, r7]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L1911
+.L1922:
+	mvn	r0, #0
+.L1910:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1911:
 	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	subs	r4, r4, #1
-	bne	.L2648
-	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L2654:
-	.align	2
-.L2653:
-	.word	.LANCHOR0+3416
-	.fnend
-	.size	sftl_init, .-sftl_init
-	.align	2
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashTestBlk.part.14, %function
-FlashTestBlk.part.14:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 88
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movw	r3, #:lower16:.LANCHOR0
-	movw	r5, #:lower16:__stack_chk_guard
-	movt	r3, #:upper16:.LANCHOR0
-	movt	r5, #:upper16:__stack_chk_guard
-	.pad #88
-	sub	sp, sp, #88
-	ldr	r6, [r3, #3376]
-	add	ip, sp, #20
-	ldr	lr, [r5]
-	mov	r4, r0
-	mov	r2, #32
-	mov	r0, ip
-	mov	r1, #165
-	str	ip, [sp, #12]
-	str	lr, [sp, #84]
-	lsl	r4, r4, #10
-	str	r6, [sp, #8]
-	bl	memset
-	movw	r3, #23130
+	ldr	r9, .L1941+4
+	bl	FtlGetLastWrittenPage
+	ldr	r10, .L1941+8
+	add	r8, r4, #3456
+	ldrsh	r7, [r4, r7]
+	sxth	r5, r0
+	ldr	r6, .L1941+12
+	add	r0, r0, #1
+	strh	r0, [r6, #2]	@ movhi
+.L1913:
+	cmp	r5, #0
+	bge	.L1919
+	movw	r2, #1465
+	ldr	r1, .L1941+16
+	ldr	r0, .L1941+20
+	bl	sftl_printk
+	b	.L1918
+.L1919:
+	orr	r3, r5, r7, lsl #10
 	mov	r2, #1
-	movt	r3, 23130
 	mov	r1, r2
-	str	r3, [r6]	@ unaligned
-	mov	r0, sp
-	str	r3, [r6, #4]	@ unaligned
-	str	r4, [sp, #4]
-	bl	FlashEraseBlocks
-	mov	r3, #1
-	mov	r0, sp
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [sp]
-	cmp	r3, #0
-	mvnne	r6, #0
-	beq	.L2660
-.L2656:
-	mov	r2, #1
-	mov	r0, sp
-	mov	r1, #0
-	str	r4, [sp, #4]
-	bl	FlashEraseBlocks
-	ldr	r2, [sp, #84]
-	mov	r0, r6
-	ldr	r3, [r5]
+	str	r3, [r4, #3460]
+	mov	r0, r8
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3468]
+	ldr	fp, [r3, #12]
+	cmp	fp, #0
+	beq	.L1914
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	beq	.L1914
+	ldrh	r1, [r10]
+	ldr	r0, [r4, #3464]
+	bl	js_hash
+	cmp	fp, r0
+	beq	.L1914
+	str	r0, [sp, #8]
+	mov	r2, r7
+	str	fp, [sp, #4]
+	ldrh	r3, [r6, #4]
+	ldr	r1, .L1941+16
+	ldr	r0, .L1941+24
+	str	r3, [sp]
+	mov	r3, r5
+	bl	sftl_printk
+	cmp	r5, #0
+	bne	.L1915
+	ldrh	r3, [r6, #4]
+	cmp	r7, r3
+	beq	.L1915
+	sxth	r7, r3
+	ldr	r3, .L1941+28
+	ldrh	r5, [r3]
+.L1917:
+	sub	r5, r5, #1
+	sxth	r5, r5
+	b	.L1913
+.L1915:
+	mvn	r3, #0
+	str	r3, [r4, #3456]
+.L1914:
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	beq	.L1917
+	ldr	r3, [r4, #3304]
+	ldr	r3, [r3]
+	cmp	r3, r9
+	bne	.L1917
+	ldr	r3, [r4, #3336]
+	ldrh	r2, [r3]
+	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L2661
-	add	sp, sp, #88
-	@ sp needed
-	pop	{r4, r5, r6, pc}
-.L2660:
-	mov	r3, #1
-	mov	r0, sp
-	add	ip, r4, r3
-	mov	r2, r3
-	mov	r1, r3
-	str	ip, [sp, #4]
-	bl	FlashProgPages
-	ldr	r6, [sp]
-	adds	r6, r6, #0
-	movne	r6, #1
-	rsb	r6, r6, #0
-	b	.L2656
-.L2661:
-	bl	__stack_chk_fail
-	.fnend
-	.size	FlashTestBlk.part.14, .-FlashTestBlk.part.14
-	.align	2
-	.global	FlashTestBlk
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	cmp	r0, #11
-	bhi	.L2664
+	bne	.L1917
+.L1918:
+	movw	r2, #314
+	ldrh	r3, [r4, #244]
+	ldrh	r2, [r4, r2]
+	add	r3, r3, #24
+	cmp	r2, r3, lsl #1
+	bcs	.L1921
+	movw	r2, #1467
+	ldr	r1, .L1941+16
+	ldr	r0, .L1941+20
+	bl	sftl_printk
+.L1921:
+	ldr	r5, .L1941+32
+	mov	r2, #48
+	ldr	r1, [r4, #3464]
+	mov	r0, r5
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #244]
+	ldr	r1, [r4, #3464]
+	ldr	r0, [r4, #76]
+	lsl	r2, r2, #1
+	add	r1, r1, #48
+	bl	ftl_memcpy
+	ldrh	r1, [r4, #244]
+	ldr	r3, [r4, #3464]
+	ldr	r0, [r4, #24]
+	lsr	r2, r1, #3
+	add	r1, r1, #24
+	lsl	r1, r1, #1
+	add	r2, r2, #4
+	bic	r1, r1, #3
+	add	r1, r3, r1
+	bl	ftl_memcpy
+	ldr	r2, [r4, #2472]
+	ldr	r3, .L1941+4
+	cmp	r2, r3
+	bne	.L1922
+	movw	r3, #258
+	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
+	ldrh	r3, [r4, r3]
+	ldrh	r7, [r5, #8]
+	cmp	r2, r3
+	strh	r7, [r6, #6]	@ movhi
+	bne	.L1922
+	movw	r3, #306
+	movw	r2, #262
+	ldrh	r3, [r4, r3]
+	ldrh	r2, [r4, r2]
+	ldr	r6, [r4, #248]
+	str	r7, [r4, #3676]
+	mul	r3, r7, r3
+	ldrh	r1, [r4, #236]
+	str	r3, [r4, #2556]
+	mul	r3, r3, r2
+	str	r3, [r4, #344]
+	ldr	r3, .L1941+36
+	ldrh	r0, [r3, #6]
+	sub	r0, r6, r0
+	sub	r0, r0, r7
+	bl	__aeabi_uidiv
+	cmp	r7, r6
+	strh	r0, [r5, #152]	@ movhi
+	bls	.L1923
+	movw	r2, #1489
+	ldr	r1, .L1941+16
+	ldr	r0, .L1941+20
+	bl	sftl_printk
+.L1923:
+	ldrh	r3, [r5, #16]
+	ldrh	r1, [r5, #14]
+	lsr	r2, r3, #6
+	and	r3, r3, #63
+	strb	r3, [r4, #34]
+	strh	r2, [r4, #30]	@ movhi
+	ldrh	r2, [r5, #18]
+	ldrb	r3, [r4, #2483]	@ zero_extendqisi2
+	strh	r1, [r4, #28]	@ movhi
+	strh	r2, [r4, #80]	@ movhi
+	ldrh	r2, [r5, #20]
+	strb	r3, [r4, #36]
+	mvn	r3, #0
+	strh	r3, [r4, #176]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, #178]	@ movhi
+	lsr	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #86]
+	ldrb	r2, [r4, #2484]	@ zero_extendqisi2
+	strh	r0, [r4, #82]	@ movhi
+	strb	r3, [r4, #182]
+	strb	r2, [r4, #88]
+	ldrh	r2, [r5, #22]
+	strb	r3, [r4, #184]
+	str	r3, [r4, #2580]
+	strh	r2, [r4, #128]	@ movhi
+	ldrh	r2, [r5, #24]
+	str	r3, [r4, #2568]
+	str	r3, [r4, #2560]
+	str	r3, [r4, #2576]
+	lsr	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #134]
+	ldrb	r2, [r4, #2485]	@ zero_extendqisi2
+	str	r3, [r4, #2604]
+	strh	r0, [r4, #130]	@ movhi
+	strb	r2, [r4, #136]
+	ldr	r2, [r4, #2504]
+	str	r2, [r4, #2600]
+	str	r3, [r4, #2616]
+	ldr	r2, [r4, #2592]
+	str	r3, [r4, #2572]
+	ldr	r3, [r4, #2512]
+	cmp	r3, r2
+	ldr	r2, [r4, #2596]
+	strhi	r3, [r4, #2592]
+	ldr	r3, [r4, #2508]
+	cmp	r3, r2
+	strhi	r3, [r4, #2596]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1926
+	ldr	r0, .L1941+40
+	bl	make_superblock
+.L1926:
+	ldrh	r2, [r4, #80]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1927
+	ldr	r0, .L1941+44
+	bl	make_superblock
+.L1927:
+	ldrh	r2, [r4, #128]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1928
+	ldr	r0, .L1941+48
+	bl	make_superblock
+.L1928:
+	ldrh	r2, [r4, #176]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1929
+	ldr	r0, .L1941+52
+	bl	make_superblock
+.L1929:
 	mov	r0, #0
-	bx	lr
-.L2664:
-	b	FlashTestBlk.part.14
+	b	.L1910
+.L1942:
+	.align	2
+.L1941:
+	.word	.LANCHOR0
+	.word	1179929683
+	.word	.LANCHOR0+314
+	.word	.LANCHOR0+2628
+	.word	.LANCHOR1+600
+	.word	.LC8
+	.word	.LC127
+	.word	.LANCHOR0+308
+	.word	.LANCHOR0+2472
+	.word	.LANCHOR0+356
+	.word	.LANCHOR0+28
+	.word	.LANCHOR0+80
+	.word	.LANCHOR0+128
+	.word	.LANCHOR0+176
 	.fnend
-	.size	FlashTestBlk, .-FlashTestBlk
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
-	.global	FlashGetBadBlockList
+	.global	FtlMapTblRecovery
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r2, #256
-	mov	r5, r1
-	mov	r1, #255
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r3, [r0, #24]
 	mov	r4, r0
-	bl	memset
-	movw	r3, #:lower16:.LANCHOR0
-	mov	r1, r5
-	movt	r3, #:upper16:.LANCHOR0
+	mov	r1, #0
+	mov	r7, #0
+	ldr	r5, .L1985
+	str	r3, [sp, #12]
+	ldr	r3, [r0, #16]
+	ldr	r8, [r0, #12]
+	add	r10, r5, #308
+	str	r3, [sp, #24]
+	ldrh	r3, [r0, #6]
+	str	r3, [sp, #16]
+	ldrh	r3, [r0, #8]
+	ldr	r0, [sp, #12]
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #16]
+	lsl	r2, r3, #2
+	bl	ftl_memset
+	ldr	r3, [r5, #3304]
+	ldr	fp, [r5, #3336]
+	str	r7, [r4, #32]
+	str	r3, [r5, #3464]
+	mvn	r3, #0
+	str	fp, [r5, #3468]
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #1
+	str	r7, [r4, #28]
+	str	r3, [r4, #36]
+.L1944:
+	ldr	r3, [sp, #20]
+	sxth	r6, r7
+	cmp	r6, r3
+	bge	.L1963
+	ldr	r3, [sp, #20]
+	sub	r3, r3, #1
+	cmp	r6, r3
+	lsl	r3, r6, #1
+	bne	.L1945
+	ldrh	r0, [r8, r3]
+	mov	r1, #1
+	add	r9, r8, r3
+	ldr	r5, .L1985
+	bl	FtlGetLastWrittenPage
+	sxth	r3, r0
+	add	r0, r0, #1
+	strh	r7, [r4]	@ movhi
+	add	r10, r5, #3456
+	str	r3, [sp, #20]
+	mov	r7, #0
+	ldr	r3, [sp, #24]
+	strh	r0, [r4, #2]	@ movhi
+	ldr	r3, [r3, r6, lsl #2]
+	str	r3, [r4, #28]
+.L1946:
+	ldr	r3, [sp, #20]
+	sxth	r8, r7
+	add	r2, r3, #1
+	cmp	r8, r2
+	blt	.L1949
+.L1963:
 	mov	r0, r4
-	ldr	r3, [r3, #3440]
-	blx	r3
-	uxth	r1, r0
-	cmp	r1, #50
-	bhi	.L2666
-	ldr	r3, .L2676
-	mov	r0, r1
-	ldrh	r3, [r3, #14]
-	cmp	r3, #4
-	popne	{r4, r5, r6, pc}
-	cmp	r1, #0
-	popeq	{r4, r5, r6, pc}
-	sub	r1, r1, #1
-	sub	r3, r4, #2
-	uxth	r1, r1
-	add	r1, r4, r1, lsl #1
-.L2669:
-	ldrh	r2, [r3, #2]
-	lsr	r2, r2, #1
-	strh	r2, [r3, #2]!	@ movhi
-	cmp	r3, r1
-	bne	.L2669
-	pop	{r4, r5, r6, pc}
-.L2666:
+	bl	ftl_free_no_use_map_blk
+	ldr	r3, .L1985+4
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bne	.L1951
 	mov	r0, r4
-	mov	r2, #256
-	mov	r1, #255
-	bl	memset
+	bl	ftl_map_blk_alloc_new_blk
+.L1951:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
 	mov	r0, #0
-	pop	{r4, r5, r6, pc}
-.L2677:
-	.align	2
-.L2676:
-	.word	.LANCHOR0+3416
+	add	sp, sp, #44
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1949:
+	ldrh	r2, [r9]
+	mov	r0, r10
+	orr	r2, r8, r2, lsl #10
+	str	r2, [r5, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r5, #3468]
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	str	r2, [sp, #24]
+	beq	.L1947
+	ldr	r1, [r5, #3456]
+	cmn	r1, #1
+	beq	.L1947
+	ldr	r3, .L1985+8
+	ldr	r0, [r5, #3464]
+	ldrh	r1, [r3]
+	bl	js_hash
+	ldr	r2, [sp, #24]
+	cmp	r2, r0
+	beq	.L1947
+	str	r0, [sp, #4]
+	mov	r3, r8
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r1, .L1985+12
+	ldr	r0, .L1985+16
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r5, #3456]
+.L1947:
+	ldr	r3, [r5, #3456]
+	cmn	r3, #1
+	beq	.L1948
+	ldrh	r3, [fp, #8]
+	ldr	r2, [sp, #16]
+	cmp	r2, r3
+	bls	.L1948
+	ldrh	r1, [fp]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	ldreq	r2, [r5, #3460]
+	ldreq	r1, [sp, #12]
+	streq	r2, [r1, r3, lsl #2]
+.L1948:
+	add	r7, r7, #1
+	b	.L1946
+.L1945:
+	ldr	r2, [r5, #3304]
+	ldr	r0, .L1985+20
+	str	r2, [r5, #3464]
+	add	r2, r8, r3
+	str	r2, [sp, #28]
+	ldrh	r2, [r8, r3]
+	ldrh	r3, [r10]
+	sub	r3, r3, #1
+	orr	r3, r3, r2, lsl #10
+	mov	r2, #1
+	mov	r1, r2
+	str	r3, [r5, #3460]
+	bl	FlashReadPages
+	ldr	r3, [r5, #3456]
+	cmn	r3, #1
+	beq	.L1965
+	ldrh	r2, [fp]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L1965
+	ldrh	r2, [fp, #8]
+	movw	r3, #64245
+	cmp	r2, r3
+	beq	.L1953
+.L1965:
+	mov	r9, #0
+.L1954:
+	ldrh	r2, [r10]
+	sxth	r3, r9
+	cmp	r3, r2
+	bge	.L1961
+	ldr	r2, [sp, #28]
+	ldr	r0, .L1985+20
+	str	r3, [sp, #36]
+	ldrh	r2, [r2]
+	orr	r2, r3, r2, lsl #10
+	str	r2, [r5, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r5, #3468]
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	str	r2, [sp, #32]
+	beq	.L1958
+	ldr	r1, [r5, #3456]
+	cmn	r1, #1
+	beq	.L1958
+	ldr	r1, .L1985+8
+	ldr	r0, [r5, #3464]
+	ldrh	r1, [r1]
+	bl	js_hash
+	ldr	r2, [sp, #32]
+	cmp	r2, r0
+	beq	.L1958
+	str	r0, [sp, #4]
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r3, [sp, #36]
+	ldr	r1, .L1985+12
+	ldr	r0, .L1985+24
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r5, #3456]
+.L1958:
+	ldr	r3, [r5, #3456]
+	cmn	r3, #1
+	beq	.L1959
+	ldrh	r3, [fp, #8]
+	ldr	r2, [sp, #16]
+	cmp	r2, r3
+	bls	.L1959
+	ldrh	r1, [fp]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	ldreq	r2, [r5, #3460]
+	ldreq	r1, [sp, #12]
+	streq	r2, [r1, r3, lsl #2]
+.L1959:
+	add	r9, r9, #1
+	b	.L1954
+.L1953:
+	mov	r1, #0
+	mov	r0, #4
+.L1955:
+	ldrh	r2, [r10]
+	sxth	r3, r1
+	sub	r2, r2, #1
+	cmp	r3, r2
+	blt	.L1957
+.L1961:
+	add	r7, r7, #1
+	b	.L1944
+.L1957:
+	ldr	ip, [r5, #3304]
+	add	r1, r1, #1
+	ldr	r6, [sp, #16]
+	ldr	r2, [ip, r3, lsl #3]
+	uxth	lr, r2
+	cmp	r6, lr
+	addhi	r3, r0, r3, lsl #3
+	movhi	r2, lr
+	ldrhi	r3, [ip, r3]
+	ldrhi	ip, [sp, #12]
+	strhi	r3, [ip, r2, lsl #2]
+	b	.L1955
+.L1986:
+	.align	2
+.L1985:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+308
+	.word	.LANCHOR0+314
+	.word	.LANCHOR1+615
+	.word	.LC128
+	.word	.LANCHOR0+3456
+	.word	.LC129
 	.fnend
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
-	.global	FtlMakeBbt
+	.global	FtlLoadVonderInfo
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
-	mvn	r3, #0
-	add	r7, r4, #364
-	add	r2, r4, #352
-	str	r3, [r4, #364]
-	mov	r10, #0
-	str	r3, [r7, #4]
-	.pad #20
-	sub	sp, sp, #20
-	str	r3, [r7, #8]
-	str	r3, [r7, #12]
-	strh	r3, [r2]	@ movhi
-	strh	r10, [r2, #6]	@ movhi
-	bl	FtlLoadFactoryBbt
-	movw	r3, #262
-	ldrh	r3, [r4, r3]
-	cmp	r3, r10
-	beq	.L2688
-	movw	r3, #61664
-	ldr	fp, .L2708
-	movt	r3, 65535
-	str	r3, [sp, #8]
-	add	r3, r4, #380
-	str	r3, [sp, #4]
-	b	.L2687
-.L2707:
-	ldrh	r5, [fp]
-	mov	r2, #1
-	mov	r1, r2
-	ldr	r0, .L2708+4
-	mla	r5, r10, r5, r3
-	lsl	r3, r5, #10
-	str	r3, [r4, #3468]
-	bl	FlashReadPages
-	ldrh	r2, [fp]
-	ldr	r3, [sp, #4]
-	ldr	r1, [r4, #3472]
-	add	r2, r2, #7
-	ldr	r0, [r3]
-	asr	r2, r2, #3
-	bl	memcpy
-.L2683:
-	uxth	r0, r5
-	add	r10, r10, #1
-	add	r7, r7, #2
-	bl	FtlBbmMapBadBlock
-	ldr	r3, .L2708+8
-	ldr	r2, [sp, #4]
-	ldrh	r3, [r3]
-	add	r2, r2, #4
-	str	r2, [sp, #4]
-	cmp	r3, r10
-	bls	.L2688
-.L2687:
-	ldrh	r3, [r7]
-	movw	r2, #65535
-	ldr	r0, [r4, #3352]
-	ldr	r8, [r4, #3384]
-	cmp	r3, r2
-	str	r0, [r4, #3472]
-	str	r8, [r4, #3476]
-	bne	.L2707
-	mov	r1, r10
-	bl	FlashGetBadBlockList
-	ldr	r3, [sp, #4]
-	ldr	r0, [r4, #3472]
-	ldr	r1, [r3]
-	uxth	r3, r10
-	mov	r9, r3
-	str	r3, [sp, #12]
-	bl	FtlBbt2Bitmap
-	ldrh	r5, [fp]
-	sub	r6, r5, #1
-	smulbb	r3, r9, r5
-	uxth	r6, r6
-	str	r3, [sp]
-.L2684:
-	ldr	r3, [sp]
-	mov	r1, r5
-	add	r9, r6, r3
-	uxth	r9, r9
-	mov	r0, r9
-	bl	__aeabi_uidivmod
-	mov	r0, r9
-	uxth	r9, r1
-	mov	r1, r5
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	ip, r9, #5
-	add	r0, r4, r0, lsl #2
-	and	r1, r9, #31
-	mov	r2, #4096
-	ldr	r0, [r0, #380]
-	ldr	r9, [r0, ip, lsl #2]
-	lsr	r9, r9, r1
-	ands	r9, r9, #1
-	mov	r1, r9
-	bne	.L2685
-	ldr	r3, [r4, #3384]
-	strh	r6, [r7]	@ movhi
-	str	r9, [r3]	@ unaligned
-	str	r9, [r3, #4]	@ unaligned
-	str	r9, [r3, #8]	@ unaligned
-	str	r9, [r3, #12]	@ unaligned
-	ldr	r0, [r4, #3352]
-	bl	memset
-	ldrh	r3, [sp, #8]
-	str	r9, [r8, #4]
-	ldr	r2, .L2708+12
-	strh	r3, [r8]	@ movhi
-	ldrh	r3, [r7]
-	ldrh	r5, [fp]
+	ldr	r3, .L1989
+	push	{r4, lr}
+	.save {r4, lr}
+	add	r2, r3, #324
+	add	r0, r3, #3600
 	ldrh	r2, [r2]
-	strh	r3, [r8, #2]	@ movhi
-	ldrh	r3, [r7]
-	ldr	r1, [sp, #4]
-	lsl	r2, r2, #2
-	ldr	r0, [r4, #3472]
-	mla	r5, r10, r5, r3
-	ldr	r1, [r1]
-	lsl	r3, r5, #10
-	str	r3, [r4, #3468]
-	bl	memcpy
-	mov	r2, #1
-	ldr	r0, .L2708+4
-	mov	r1, r2
-	bl	FlashEraseBlocks
-	mov	r3, #1
-	ldr	r0, .L2708+4
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [r4, #3464]
-	uxth	r0, r5
-	cmn	r3, #1
-	bne	.L2683
-	bl	FtlBbmMapBadBlock
-	ldrh	r5, [fp]
-	ldrh	r3, [sp, #12]
-	smulbb	r3, r3, r5
-	str	r3, [sp]
-	b	.L2684
-.L2685:
-	sub	r6, r6, #1
-	uxth	r6, r6
-	b	.L2684
-.L2688:
-	movw	r3, #322
+	add	r0, r0, #12
+	strh	r2, [r0, #10]	@ movhi
+	ldr	r2, .L1989+4
+	strh	r2, [r0, #4]	@ movhi
+	add	r2, r3, #348
+	ldrh	r2, [r2]
+	strh	r2, [r0, #8]	@ movhi
+	movw	r2, #326
+	ldrh	r2, [r3, r2]
+	strh	r2, [r0, #6]	@ movhi
+	ldr	r2, [r3, #352]
+	str	r2, [r3, #3624]
+	ldr	r2, [r3, #3372]
+	str	r2, [r3, #3628]
+	ldr	r2, [r3, #3368]
+	str	r2, [r3, #3632]
+	ldr	r2, [r3, #3376]
+	str	r2, [r3, #3636]
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	pop	{r4, pc}
+.L1990:
+	.align	2
+.L1989:
+	.word	.LANCHOR0
+	.word	-3962
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlLoadMapInfo
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L1993
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	pop	{r4, pc}
+.L1994:
+	.align	2
+.L1993:
+	.word	.LANCHOR0+3396
+	.fnend
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	FtlSysBlkInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r2, #0
+	ldr	r4, .L2012
+	movw	r3, #3476
+	ldrh	r0, [r4, #240]
+	strh	r2, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	movw	r3, #2628
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1996
+.L1998:
+	mvn	r6, #0
+.L1995:
+	mov	r0, r6
+	pop	{r4, r5, r6, pc}
+.L1996:
+	bl	FtlLoadSysInfo
+	subs	r6, r0, #0
+	bne	.L1998
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldr	r2, [r4, #2544]
+	movw	r3, #342
+	ldrh	r1, [r4, r3]
+	mov	r0, #12
+	mov	r3, r6
+.L1999:
+	cmp	r3, r1
+	bge	.L2004
+	mla	ip, r0, r3, r2
+	ldr	ip, [ip, #4]
+	cmp	ip, #0
+	bge	.L2000
+.L2004:
+	ldr	r5, .L2012+4
+	cmp	r3, r1
+	ldrh	r2, [r5, #28]
+	add	r2, r2, #1
+	strh	r2, [r5, #28]	@ movhi
+	bge	.L2010
+.L2001:
+	ldr	r0, .L2012+8
+	bl	FtlSuperblockPowerLostFix
+	ldr	r0, .L2012+12
+	bl	FtlSuperblockPowerLostFix
+	ldrh	r3, [r4, #28]
+	ldr	r1, [r4, #76]
+	ldrh	r0, [r4, #32]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	movw	r0, #306
+	strh	r2, [r1, r3]	@ movhi
+	ldrh	r2, [r4, #80]
+	ldrh	r3, [r4, r0]
+	ldr	ip, [r4, #76]
+	ldrh	lr, [r4, #84]
+	lsl	r2, r2, #1
+	strh	r3, [r4, #30]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #34]
+	strh	r3, [r4, #32]	@ movhi
+	ldrh	r1, [ip, r2]
+	sub	r1, r1, lr
+	strh	r1, [ip, r2]	@ movhi
+	strb	r3, [r4, #86]
+	strh	r3, [r4, #84]	@ movhi
+	ldrh	r3, [r5, #30]
+	ldrh	r2, [r4, r0]
+	add	r3, r3, #1
+	strh	r2, [r4, #82]	@ movhi
+	strh	r3, [r5, #30]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L2005
+.L2000:
+	add	r3, r3, #1
+	b	.L1999
+.L2010:
+	movw	r3, #3476
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	ldrne	r6, .L2708+16
-	movne	r5, #0
-	beq	.L2681
-.L2691:
-	mov	r0, r5
-	add	r5, r5, #1
-	bl	FtlBbmMapBadBlock
-	ldrh	r3, [r6]
-	uxth	r5, r5
-	cmp	r3, r5
-	bhi	.L2691
-.L2681:
-	ldr	r3, .L2708+20
-	ldrh	r3, [r3, #12]
-	sub	r7, r3, #1
-	sub	r3, r3, #48
-	uxth	r7, r7
-	cmp	r3, r7
-	ldrlt	fp, .L2708
-	movwlt	r6, #65535
-	blt	.L2696
-	b	.L2706
-.L2694:
-	ldr	r3, .L2708+20
-	ldrh	r3, [r3]
-	cmp	r3, r6
-	bne	.L2695
-	ldr	r3, .L2708+20
-	strh	r7, [r3]	@ movhi
-.L2693:
-	ldr	r3, .L2708+20
-	sub	r7, r7, #1
-	uxth	r7, r7
-	ldrh	r3, [r3, #12]
-	sub	r3, r3, #48
-	cmp	r7, r3
-	ble	.L2706
-.L2696:
-	ldrh	r8, [fp]
-	mov	r0, r7
-	mov	r1, r8
-	bl	__aeabi_uidivmod
-	mov	r0, r7
-	uxth	r5, r1
-	mov	r1, r8
-	bl	__aeabi_uidiv
-	uxth	r0, r0
-	lsr	r2, r5, #5
-	add	r0, r4, r0, lsl #2
-	and	r5, r5, #31
-	ldr	r3, [r0, #380]
-	ldr	r3, [r3, r2, lsl #2]
-	lsr	r5, r3, r5
-	tst	r5, #1
-	bne	.L2693
-	cmp	r7, #11
-	bls	.L2694
-	mov	r0, r7
-	bl	FlashTestBlk.part.14
-	cmp	r0, #0
-	beq	.L2694
-	mov	r0, r7
-	bl	FtlBbmMapBadBlock
-	b	.L2693
-.L2706:
-	ldr	r3, .L2708+20
-	ldrh	r3, [r3]
-.L2692:
-	ldr	ip, [r4, #3348]
-	lsl	r3, r3, #10
-	mov	r5, #0
-	ldr	lr, .L2708+20
-	str	r5, [r4, #360]
-	mov	r2, #2
-	str	r3, [ip, #4]
-	mov	r0, ip
-	ldr	r3, .L2708+20
-	mov	r1, #1
-	strh	r5, [lr, #2]	@ movhi
-	ldrh	r3, [r3, #4]
-	lsl	r3, r3, #10
-	str	r3, [ip, #24]
-	bl	FlashEraseBlocks
-	ldr	r3, .L2708+20
-	ldrh	r0, [r3]
-	bl	FtlBbmMapBadBlock
-	ldr	r3, .L2708+20
-	ldrh	r0, [r3, #4]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r2, .L2708+20
-	ldr	r3, [r4, #360]
-	ldr	r0, .L2708+20
-	ldrh	r1, [r2]
-	ldrh	r2, [r2, #4]
-	add	r3, r3, #1
-	strh	r5, [r0, #2]	@ movhi
-	str	r3, [r4, #360]
-	strh	r1, [r0, #4]	@ movhi
-	strh	r2, [r0]	@ movhi
-	bl	FtlBbmTblFlush
-	mov	r0, r5
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2695:
-	ldr	r2, .L2708+20
-	strh	r7, [r2, #4]	@ movhi
-	b	.L2692
-.L2709:
+	bne	.L2001
+.L2005:
+	ldrh	r0, [r4, #28]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L2006
+	ldrh	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L2006
+	ldrh	r3, [r4, #84]
+	cmp	r3, #0
+	bne	.L2006
+	bl	FtlGcRefreshBlock
+	ldrh	r0, [r4, #80]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	ldr	r0, .L2012+8
+	bl	allocate_new_data_superblock
+	ldr	r0, .L2012+12
+	bl	allocate_new_data_superblock
+.L2006:
+	bl	FtlVpcCheckAndModify
+	b	.L1995
+.L2013:
 	.align	2
-.L2708:
-	.word	.LANCHOR0+306
-	.word	.LANCHOR0+3464
-	.word	.LANCHOR0+262
-	.word	.LANCHOR0+412
-	.word	.LANCHOR0+322
-	.word	.LANCHOR0+352
+.L2012:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2472
+	.word	.LANCHOR0+28
+	.word	.LANCHOR0+80
 	.fnend
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
 	.syntax unified
@@ -15494,375 +13400,312 @@ ftl_low_format:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movw	r4, #:lower16:.LANCHOR0
-	movt	r4, #:upper16:.LANCHOR0
 	mov	r3, #0
-	add	r7, r4, #416
-	mov	r1, r3
-	ldrh	ip, [r4, #244]
-	mov	r2, #2048
-	add	r0, r4, #424
-	strh	r3, [r7, #2]	@ movhi
-	strh	r3, [r7, #4]	@ movhi
-	strh	ip, [r7]	@ movhi
-	strh	r3, [r7, #6]	@ movhi
-	str	r3, [r4, #2644]
-	str	r3, [r4, #2648]
-	str	r3, [r4, #2660]
-	bl	memset
+	ldr	r4, .L2039
+	ldrh	r0, [r4, #240]
+	str	r3, [r4, #2592]
+	str	r3, [r4, #2596]
+	str	r3, [r4, #2608]
+	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L2744
-.L2711:
-	movw	r3, #266
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	beq	.L2716
-	ldr	lr, .L2747
+	beq	.L2015
+	bl	FtlMakeBbt
+.L2015:
+	ldr	r0, .L2039+4
 	mov	r2, #0
-	movw	ip, #23752
-	mov	r3, r2
-	movt	ip, 2575
-.L2715:
-	ldr	r0, [r4, #3364]
-	mvn	r2, r2
-	orr	r2, r3, r2, lsl #16
-	add	r1, r3, #1
-	str	r2, [r0, r3, lsl #2]
-	ldr	r2, [r4, #3368]
-	str	ip, [r2, r3, lsl #2]
-	uxth	r3, r1
-	ldrh	r1, [lr]
-	mov	r2, r3
+	ldr	ip, .L2039+8
+.L2016:
+	ldrh	r1, [r0]
+	uxth	r3, r2
+	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L2715
-.L2716:
-	ldrh	r6, [r4, #20]
-	ldrh	r3, [r4, #248]
-	cmp	r3, r6
-	movhi	r8, #0
-	bls	.L2742
-.L2717:
-	mov	r0, r6
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	ldrh	r5, [r4, #248]
-	uxth	r6, r6
-	add	r8, r8, r0
-	uxth	r8, r8
-	cmp	r5, r6
-	bhi	.L2717
-	ldrh	r6, [r4, #36]
-	sub	r3, r8, #3
-	cmp	r3, r6, lsl #1
-	blt	.L2742
-	mov	r1, r6
-	mov	r0, r8
-	bl	__aeabi_uidiv
-	ldr	r3, [r4, #336]
-	mov	r2, #0
-	ldr	ip, [r4, #256]
-	mov	r1, r2
-	strh	r2, [r7, #2]	@ movhi
-	add	r3, r0, r3
-	strh	r2, [r7, #4]	@ movhi
-	uxth	r3, r3
-	strh	r2, [r7, #6]	@ movhi
-	add	r0, r4, #424
-	cmp	r3, #24
-	mov	r2, #2048
-	movcc	r3, #24
-	mul	r6, r3, r6
-	sub	r5, r5, r3
-	uxth	r5, r5
-	str	r3, [r4, #240]
-	strh	r5, [r4, #20]	@ movhi
-	sub	r3, ip, r6
-	str	r6, [r4, #244]
-	str	r3, [r4, #252]
-	strh	r6, [r7]	@ movhi
-	bl	memset
-	ldrh	r3, [r4, #248]
-	cmp	r3, r5
-	bls	.L2719
-.L2720:
-	mov	r0, r5
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r5, r5, #1
-	ldrh	r3, [r4, #248]
-	uxth	r5, r5
-	cmp	r3, r5
-	bhi	.L2720
-.L2742:
-	ldrh	r5, [r4, #20]
-.L2719:
-	cmp	r5, #0
-	beq	.L2721
+	blt	.L2017
+	ldrh	r6, [r4, #244]
 	mov	r5, #0
-	mov	r6, r5
-.L2722:
-	mov	r0, r6
-	mov	r1, #0
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	ldrh	r3, [r4, #20]
-	uxth	r6, r6
-	add	r5, r5, r0
-	uxth	r5, r5
+.L2018:
+	ldrh	r3, [r4, #246]
 	cmp	r3, r6
-	bhi	.L2722
-.L2721:
-	ldrh	r3, [r4, #248]
-	movw	r8, #2676
-	ldrh	r6, [r4, #36]
-	ldr	r10, [r4, #252]
-	str	r3, [r4, #3332]
-	mov	r1, r6
+	bhi	.L2019
+	ldrh	r1, [r4, #236]
+	sub	r3, r5, #3
+	cmp	r3, r1, lsl #1
+	bge	.L2020
+.L2024:
+	mov	r5, #0
+	mov	r7, r5
+.L2021:
+	ldrh	r3, [r4, #244]
+	uxth	r0, r5
+	add	r5, r5, #1
+	cmp	r3, r0
+	bhi	.L2025
+	ldrh	r3, [r4, #246]
+	ldrh	r5, [r4, #236]
+	ldr	r10, [r4, #248]
+	str	r3, [r4, #3288]
+	mov	r1, r5
+	ldr	r6, .L2039+12
 	mov	r0, r10
 	bl	__aeabi_uidiv
-	add	r2, r6, r6, lsl #1
-	ubfx	r9, r0, #5, #16
-	add	r3, r9, #36
-	str	r0, [r4, #2608]
-	cmp	r5, r2, lsl #3
-	uxth	r3, r3
-	mov	r7, r0
-	strh	r3, [r4, r8]	@ movhi
-	ble	.L2723
-	sub	r0, r10, r5
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	lsr	r3, r0, #5
-	str	r0, [r4, #2608]
-	add	r3, r3, #24
-	uxth	r3, r3
-	strh	r3, [r4, r8]	@ movhi
-.L2723:
-	movw	r2, #302
-	ldrh	r2, [r4, r2]
-	cmp	r2, #0
-	beq	.L2743
-	mul	r1, r6, r2
-	add	r3, r3, r2, lsr #1
-	movw	r0, #2676
-	uxth	r3, r3
-	cmp	r1, r5
-	strh	r3, [r4, r0]	@ movhi
-	bgt	.L2726
-.L2743:
-	ldr	r7, [r4, #2608]
-.L2725:
-	sub	r3, r7, r3
-	movw	r2, #310
-	mul	r3, r6, r3
-	ldrh	r2, [r4, r2]
-	movw	r1, #266
-	mvn	r7, #0
-	ldrh	r1, [r4, r1]
-	mov	r6, r7
-	ldr	r5, .L2747+4
-	mul	r2, r3, r2
-	str	r3, [r4, #3484]
-	mul	r3, r2, r1
-	str	r2, [r4, #2608]
-	str	r3, [r4, #344]
+	ubfx	r8, r0, #5, #16
+	mov	r9, r0
+	add	r3, r8, #36
+	str	r0, [r4, #2556]
+	strh	r3, [r6]	@ movhi
+	mov	r3, #24
+	mul	r3, r3, r5
+	cmp	r7, r3
+	ble	.L2026
+	mov	r1, r5
+	sub	r0, r10, r7
+	bl	__aeabi_uidiv
+	str	r0, [r4, #2556]
+	lsr	r0, r0, #5
+	add	r0, r0, #24
+	strh	r0, [r6]	@ movhi
+.L2026:
+	movw	r3, #298
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	beq	.L2028
+	ldrh	r2, [r6]
+	add	r2, r2, r3, lsr #1
+	strh	r2, [r6]	@ movhi
+	mul	r2, r5, r3
+	cmp	r7, r2
+	addlt	r3, r3, #32
+	strlt	r9, [r4, #2556]
+	addlt	r3, r8, r3
+	strhlt	r3, [r6]	@ movhi
+.L2028:
+	ldrh	r2, [r6]
+	ldr	r3, [r4, #2556]
+	ldr	r6, .L2039+16
+	sub	r3, r3, r2
+	mul	r5, r5, r3
+	movw	r3, #306
+	ldrh	r3, [r4, r3]
+	str	r5, [r4, #3676]
+	mul	r5, r5, r3
+	movw	r3, #262
+	ldrh	r3, [r4, r3]
+	str	r5, [r4, #2556]
+	mul	r5, r5, r3
+	str	r5, [r4, #344]
+	mvn	r5, #0
 	bl	FtlBbmTblFlush
-	ldrh	r2, [r4, #248]
+	ldrh	r2, [r4, #246]
 	mov	r1, #0
-	ldr	r0, [r4, #16]
+	ldr	r0, [r4, #76]
 	lsl	r2, r2, #1
-	bl	memset
-	ldrh	r2, [r4, #20]
+	bl	ftl_memset
+	ldrh	r2, [r4, #244]
 	mov	r3, #0
-	mov	ip, #1
+	str	r3, [r4, #2552]
 	mov	r1, #255
-	ldr	r0, [r4, #32]
-	strh	r7, [r4, #184]	@ movhi
+	strh	r3, [r4, #178]	@ movhi
+	strb	r3, [r4, #182]
+	strb	r3, [r4, #184]
 	lsr	r2, r2, #3
-	str	r3, [r4, #28]
-	strh	r3, [r4, #186]	@ movhi
-	strb	r3, [r4, #190]
-	strb	r3, [r4, #192]
-	strh	r3, [r4, #42]	@ movhi
-	strb	r3, [r4, #46]
-	strh	r3, [r4, #40]	@ movhi
-	strb	ip, [r4, #48]
-	bl	memset
-	b	.L2727
-.L2745:
-	ldrh	r3, [r4, #40]
-	ldr	r2, [r4, #16]
+	strh	r3, [r4, #30]	@ movhi
+	strb	r3, [r4, #34]
+	strh	r3, [r4, #28]	@ movhi
+	mov	r3, #1
+	ldr	r0, [r4, #24]
+	strh	r5, [r4, #176]	@ movhi
+	strb	r3, [r4, #36]
+	bl	ftl_memset
+.L2030:
+	mov	r0, r6
+	bl	make_superblock
+	ldrb	r3, [r4, #35]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrh	r3, [r4, #28]
+	bne	.L2031
+	ldr	r2, [r4, #76]
 	lsl	r3, r3, #1
-	strh	r6, [r2, r3]	@ movhi
-	ldrh	r3, [r4, #40]
+	strh	r5, [r2, r3]	@ movhi
+	ldrh	r3, [r4, #28]
 	add	r3, r3, #1
-	strh	r3, [r4, #40]	@ movhi
-.L2727:
+	strh	r3, [r4, #28]	@ movhi
+	b	.L2030
+.L2017:
+	ldr	lr, [r4, #3316]
+	mvn	r1, r3
+	orr	r1, r3, r1, lsl #16
+	str	r1, [lr, r3, lsl #2]
+	ldr	r1, [r4, #3320]
+	str	ip, [r1, r3, lsl #2]
+	b	.L2016
+.L2019:
+	mov	r0, r6
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	add	r5, r5, r0
+	uxth	r5, r5
+	uxth	r6, r6
+	b	.L2018
+.L2020:
 	mov	r0, r5
-	bl	make_superblock
-	ldrb	r3, [r4, #47]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L2745
-	ldrh	r2, [r4, #40]
-	mov	r0, #1
-	ldr	r3, [r4, #2644]
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #336]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldrh	r0, [r4, #240]
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	r5, [r4, #244]
+.L2022:
+	ldrh	r3, [r4, #246]
+	cmp	r3, r5
+	bls	.L2024
+	mov	r0, r5
+	mov	r1, #1
+	add	r5, r5, #1
+	bl	FtlLowFormatEraseBlock
+	uxth	r5, r5
+	b	.L2022
+.L2025:
 	mov	r1, #0
-	ldrh	lr, [r4, #44]
-	mvn	r6, #0
-	ldr	ip, [r4, #16]
-	lsl	r2, r2, r0
-	str	r3, [r4, #52]
-	add	r3, r3, r0
-	ldr	r5, .L2747+8
-	str	r3, [r4, #2644]
-	strh	lr, [ip, r2]	@ movhi
-	ldrh	r3, [r4, #40]
-	strh	r1, [r4, #90]	@ movhi
-	strb	r1, [r4, #94]
-	add	r3, r3, r0
-	strb	r0, [r4, #96]
-	strh	r3, [r4, #88]	@ movhi
-	b	.L2729
-.L2746:
-	ldr	r2, [r4, #16]
+	bl	FtlLowFormatEraseBlock
+	add	r7, r7, r0
+	uxth	r7, r7
+	b	.L2021
+.L2031:
+	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
-	strh	r6, [r2, r3]	@ movhi
-	ldrh	r3, [r4, #88]
+	ldrh	r1, [r4, #32]
+	mvn	r5, #0
+	ldr	r6, .L2039+20
+	str	r2, [r4, #40]
+	add	r2, r2, #1
+	str	r2, [r4, #2592]
+	ldr	r2, [r4, #76]
+	strh	r1, [r2, r3]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, #82]	@ movhi
+	strb	r3, [r4, #86]
+	ldrh	r3, [r4, #28]
 	add	r3, r3, #1
-	strh	r3, [r4, #88]	@ movhi
-.L2729:
-	mov	r0, r5
+	strh	r3, [r4, #80]	@ movhi
+	mov	r3, #1
+	strb	r3, [r4, #88]
+.L2032:
+	mov	r0, r6
 	bl	make_superblock
-	ldrb	r3, [r4, #95]	@ zero_extendqisi2
+	ldrb	r3, [r4, #87]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldrh	r3, [r4, #88]
-	beq	.L2746
-	ldr	r2, [r4, #2644]
+	ldrh	r3, [r4, #80]
+	bne	.L2033
+	ldr	r2, [r4, #76]
+	lsl	r3, r3, #1
+	strh	r5, [r2, r3]	@ movhi
+	ldrh	r3, [r4, #80]
+	add	r3, r3, #1
+	strh	r3, [r4, #80]	@ movhi
+	b	.L2032
+.L2033:
+	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
-	ldr	r1, [r4, #16]
+	ldrh	r1, [r4, #84]
 	mvn	r5, #0
-	ldrh	r0, [r4, #92]
-	add	ip, r2, #1
-	str	r2, [r4, #100]
-	str	ip, [r4, #2644]
-	strh	r0, [r1, r3]	@ movhi
-	strh	r5, [r4, #136]	@ movhi
+	str	r2, [r4, #92]
+	add	r2, r2, #1
+	str	r2, [r4, #2592]
+	ldr	r2, [r4, #76]
+	strh	r1, [r2, r3]	@ movhi
+	strh	r5, [r4, #128]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r2, [r4, #2644]
-	movw	r1, #2680
-	ldr	r3, .L2747+12
-	mov	lr, #0
-	ldr	ip, [r4, #3484]
-	strh	r0, [r4, r1]	@ movhi
-	add	r1, r2, #1
+	ldr	r3, .L2039+24
+	movw	r2, #2628
+	strh	r0, [r4, r2]	@ movhi
+	mov	r2, #0
+	strh	r2, [r3, #2]	@ movhi
+	ldr	r2, [r4, #3676]
 	strh	r5, [r3, #4]	@ movhi
-	strh	lr, [r3, #2]	@ movhi
-	strh	ip, [r3, #6]	@ movhi
-	str	r2, [r4, #2688]
-	str	r1, [r4, #2644]
+	strh	r2, [r3, #6]	@ movhi
+	ldr	r3, [r4, #2592]
+	str	r3, [r4, #2636]
+	add	r3, r3, #1
+	str	r3, [r4, #2592]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	movweq	r3, #:lower16:.LANCHOR2
+	ldreq	r3, .L2039+28
 	moveq	r2, #1
-	movteq	r3, #:upper16:.LANCHOR2
 	streq	r2, [r3]
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2726:
-	add	r2, r2, #32
-	add	r2, r9, r2
-	uxth	r3, r2
-	strh	r3, [r4, r0]	@ movhi
-	b	.L2725
-.L2744:
-	bl	FtlMakeBbt
-	b	.L2711
-.L2748:
-	.align	2
-.L2747:
-	.word	.LANCHOR0+266
-	.word	.LANCHOR0+40
-	.word	.LANCHOR0+88
-	.word	.LANCHOR0+2680
-	.fnend
-	.size	ftl_low_format, .-ftl_low_format
-	.align	2
-	.global	ftl_memset
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_memset, %function
-ftl_memset:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memset
-	.fnend
-	.size	ftl_memset, .-ftl_memset
+.L2040:
 	.align	2
-	.global	ftl_memcpy
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_memcpy, %function
-ftl_memcpy:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memcpy
+.L2039:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+262
+	.word	168778952
+	.word	.LANCHOR0+2624
+	.word	.LANCHOR0+28
+	.word	.LANCHOR0+80
+	.word	.LANCHOR0+2628
+	.word	.LANCHOR2
 	.fnend
-	.size	ftl_memcpy, .-ftl_memcpy
+	.size	ftl_low_format, .-ftl_low_format
 	.align	2
-	.global	ftl_memcmp
+	.global	sftl_init
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_memcmp, %function
-ftl_memcmp:
+	.type	sftl_init, %function
+sftl_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memcmp
-	.fnend
-	.size	ftl_memcmp, .-ftl_memcmp
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r4, .L2048
+	ldr	r5, .L2048+4
+	ldr	r1, .L2048+8
+	ldr	r0, .L2048+12
+	str	r3, [r5]
+	bl	sftl_printk
+	mov	r0, r4
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #240]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	bne	.L2045
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L2045
+	mov	r3, #1
+	str	r3, [r5]
+	ldrh	r3, [r4, #228]
+	cmp	r3, #15
+	bhi	.L2045
+	movw	r4, #8129
+.L2044:
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L2044
+.L2045:
+	mov	r0, #0
+	pop	{r4, r5, r6, pc}
+.L2049:
 	.align	2
-	.global	js_hash
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	js_hash, %function
-js_hash:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	cmp	r1, #0
-	beq	.L2755
-	mov	r2, r0
-	movw	r0, #42982
-	add	r1, r2, r1
-	movt	r0, 18374
-.L2754:
-	lsr	r3, r0, #2
-	ldrb	ip, [r2], #1	@ zero_extendqisi2
-	add	r3, r3, r0, lsl #5
-	cmp	r1, r2
-	add	r3, r3, ip
-	eor	r0, r0, r3
-	bne	.L2754
-	bx	lr
-.L2755:
-	movw	r0, #42982
-	movt	r0, 18374
-	bx	lr
+.L2048:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC0
+	.word	.LC77
 	.fnend
-	.size	js_hash, .-js_hash
+	.size	sftl_init, .-sftl_init
 	.align	2
 	.global	FtlWriteToIDB
 	.syntax unified
@@ -15871,494 +13714,379 @@ js_hash:
 	.type	FtlWriteToIDB, %function
 FtlWriteToIDB:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 128
+	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	add	r8, r1, r0
-	sub	r7, r8, #1
-	movw	r3, #:lower16:__stack_chk_guard
-	cmp	r7, #63
-	.pad #140
-	sub	sp, sp, #140
-	movt	r3, #:upper16:__stack_chk_guard
-	movhi	r4, #0
-	movls	r4, #1
-	str	r3, [sp, #16]
-	cmp	r0, #576
-	orrcs	r4, r4, #1
+	ldr	r3, .L2111
+	sub	r10, r8, #1
+	cmp	r10, #63
+	.pad #116
+	sub	sp, sp, #116
+	movhi	r9, #0
+	movls	r9, #1
 	ldr	r3, [r3]
-	cmp	r4, #0
-	str	r3, [sp, #132]
-	bne	.L2839
-	cmp	r0, #64
-	mov	r5, r0
-	mov	r6, r1
-	mov	r9, r2
-	beq	.L2840
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r2, [r3, #3684]
-	cmp	r2, #0
-	beq	.L2836
-	cmp	r0, #63
-	ldr	fp, [r3, #3688]
-	bhi	.L2797
-	rsb	r1, r0, #64
-	sub	r6, r6, r1
-	add	r1, r9, r1, lsl #9
-.L2800:
-	cmp	r7, #576
-	subcs	r6, r6, r8
-	mov	r0, fp
-	subcs	r6, r6, #444
-	subcs	r6, r6, #2
-	lsl	r2, r6, #9
-	bl	memcpy
-	b	.L2836
-.L2839:
-	movw	fp, #:lower16:.LANCHOR0
-	movt	fp, #:upper16:.LANCHOR0
-	ldr	r3, [fp, #3684]
+	cmp	r0, #576
+	orrcs	r9, r9, #1
+	cmp	r9, #0
+	ldr	r5, .L2111+4
+	str	r3, [sp, #108]
+	beq	.L2051
+	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	bne	.L2841
-.L2836:
+	bne	.L2052
+.L2110:
 	mov	r4, #0
-.L2757:
-	ldr	r3, [sp, #16]
-	mov	r0, r4
-	ldr	r2, [sp, #132]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L2842
-	add	sp, sp, #140
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2841:
-	ldr	r3, [fp, #3688]
-	mov	r2, r3
-	str	r3, [sp, #20]
-	ldr	r2, [r2]
-	movw	r3, #35899
-	movt	r3, 64732
+	b	.L2050
+.L2052:
+	ldr	r7, [r5, #3684]
+	ldr	r3, .L2111+8
+	ldr	r2, [r7]
 	cmp	r2, r3
-	mvnne	r4, #0
-	beq	.L2843
-.L2761:
-	mov	r3, #0
-	ldr	r0, [sp, #20]
-	str	r3, [fp, #3684]
-	bl	kfree
-	ldr	r0, [fp, #3692]
-	bl	kfree
-	b	.L2757
-.L2840:
-	movw	r10, #:lower16:.LANCHOR0
-	mov	r0, #262144
-	movt	r10, #:upper16:.LANCHOR0
-	bl	ftl_malloc
-	str	r0, [r10, #3688]
-	mov	r0, #262144
-	bl	ftl_malloc
-	ldr	fp, [r10, #3688]
-	str	r0, [r10, #3692]
-	cmp	fp, #0
-	cmpne	r0, #0
-	beq	.L2796
-	mov	r0, #1
-	mov	r1, r4
-	str	r0, [r10, #3684]
-	mov	r2, #262144
-	mov	r0, fp
-	bl	memset
-.L2797:
-	movw	r3, #65472
-	mov	r1, r9
-	movt	r3, 127
-	add	r3, r5, r3
-	add	fp, fp, r3, lsl #9
-	b	.L2800
-.L2843:
-	ldr	r4, [sp, #20]
-	mov	r3, #0
-	ldr	r0, .L2851
-	movw	r2, #65023
-	add	r1, r4, #260096
-	add	ip, r4, #262144
-	ldrh	lr, [r0, #10]
-	b	.L2766
-.L2845:
-	ldr	r0, [r4, r3, lsl #2]
-	add	r3, r3, #1
-	cmp	r3, #4096
-	sub	r2, r2, #1
-	movhi	r3, #0
+	bne	.L2054
+	ldrh	r1, [r5, #10]
+	add	r0, r7, #260096
+	mov	r2, #0
+	movw	r3, #65023
+.L2058:
+	ldr	ip, [r0, #-4]!
+	cmp	ip, #0
+	bne	.L2055
+	ldr	ip, [r7, r2, lsl #2]
+	add	r2, r2, #1
 	cmp	r2, #4096
-	str	r0, [ip, #-4]!
-	beq	.L2844
-.L2766:
-	ldr	r0, [r1, #-4]!
-	cmp	r0, #0
-	beq	.L2845
-	add	r2, r2, #127
-	lsr	r3, r2, #7
-	add	r0, r3, #4
-	str	r3, [sp, #60]
-.L2765:
-	ldr	r4, [sp, #60]
-	lsl	lr, lr, #2
-	movw	r1, #65532
-	and	r1, r1, lr
-	lsl	r3, r4, #7
-	str	r3, [sp, #48]
+	sub	r3, r3, #1
+	movhi	r2, #0
+	cmp	r3, #4096
+	str	ip, [r0, #2048]
+	bne	.L2058
+	mov	fp, #512
+	b	.L2057
+.L2055:
+	add	r3, r3, #127
+	lsr	fp, r3, #7
+.L2057:
+	lsl	r1, r1, #2
+	add	r0, fp, #4
+	ldr	r4, .L2111+4
+	uxth	r1, r1
 	bl	__aeabi_uidiv
-	mov	r3, #0
-	add	r10, r0, #1
-	mov	r1, r4
-	str	r3, [sp, #52]
-	mov	r4, r3
-	movw	r0, #:lower16:.LC130
-	movw	r3, #18766
-	mov	r2, r10
-	mov	r5, r3
-	movt	r0, #:upper16:.LC130
-	movw	r3, #:lower16:.LC131
-	mov	r6, r3
+	add	r3, r0, #1
+	mov	r1, fp
+	mov	r2, r3
+	ldr	r0, .L2111+12
+	str	r3, [sp, #16]
 	bl	sftl_printk
-	mov	r3, r5
-	str	r4, [sp, #12]
-	movt	r3, 17998
-	str	r3, [sp, #32]
-	mov	r3, r6
-	movt	r3, #:upper16:.LC131
-	str	r3, [sp, #56]
-.L2767:
-	ldr	r3, [sp, #12]
-	add	r3, r10, r3
+	lsl	r3, fp, #7
+	str	r3, [sp, #28]
+	mov	r3, #0
+	str	r3, [sp, #20]
+	str	r3, [sp, #12]
+.L2059:
+	ldr	r3, [sp, #16]
+	ldr	r2, [sp, #12]
+	add	r3, r3, r2
 	cmp	r3, #8
-	str	r3, [sp, #36]
-	bhi	.L2846
+	str	r3, [sp, #24]
+	bls	.L2081
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	bne	.L2082
+.L2054:
+	mvn	fp, #0
+.L2082:
+	ldr	r5, .L2111+4
+	mov	r3, #0
+	mov	r4, fp
+	ldr	r0, [r5, #3684]
+	str	r3, [r5, #3680]
+	bl	kfree
+	ldr	r0, [r5, #3688]
+	bl	kfree
+.L2050:
+	ldr	r3, .L2111
+	mov	r0, r4
+	ldr	r2, [sp, #108]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2089
+	bl	__stack_chk_fail
+.L2081:
 	mov	r2, #512
 	mov	r1, #0
-	ldr	r0, [fp, #3692]
+	ldr	r0, [r4, #3688]
 	bl	memset
-	ldr	r3, [fp, #3456]
-	ldr	r2, .L2851
-	cmp	r3, #0
+	ldrh	r6, [r4, #10]
 	ldr	r3, [sp, #12]
-	ldrh	r5, [r2, #10]
-	mul	r3, r5, r3
-	mov	r8, r3
-	beq	.L2807
-	ldr	r3, [fp, #3460]
+	mul	r9, r6, r3
+	ldr	r3, [r4, #3264]
 	cmp	r3, #0
-	moveq	r3, #6
-	movne	r3, #9
-	str	r3, [sp, #28]
-.L2768:
-	mov	r6, r8
-	mov	r4, #0
-.L2769:
-	mov	r1, r6
-	add	r4, r4, #1
-	ldr	r3, [fp, #3444]
+	moveq	r8, #6
+	beq	.L2060
+	ldr	r3, [r4, #3268]
+	cmp	r3, #0
+	moveq	r8, #6
+	movne	r8, #9
+.L2060:
+	mov	r10, r9
+	mov	r5, #0
+.L2061:
+	ldr	r3, [r4, #3252]
+	mov	r1, r10
 	mov	r0, #0
+	add	r5, r5, #1
 	blx	r3
-	cmp	r10, r4
-	add	r6, r6, r5
-	bne	.L2769
-	ldr	r3, [sp, #28]
-	cmp	r3, #9
-	movne	r3, #0
-	strne	r3, [sp, #24]
-	beq	.L2847
-.L2770:
-	mul	r5, r4, r5
-	cmp	r5, #0
-	beq	.L2778
-	str	r10, [sp, #40]
+	ldr	r3, [sp, #16]
+	add	r10, r10, r6
+	cmp	r3, r5
+	bhi	.L2061
+	cmp	r8, #9
+	movne	r5, #0
+	bne	.L2062
+	ldr	r5, [r4, #3688]
+	mov	r2, #1024
+	mov	r1, #0
+	mov	r0, r5
+	bl	ftl_memset
+	ldr	r3, .L2111+16
+	mov	r1, #12
+	mov	r2, #4
+	str	r1, [r5, #4]
+	strb	r2, [r5, #17]
+	add	r0, r5, r1
+	str	r3, [r5]
+	mov	r3, #0
+	ldrh	r2, [r4, #10]
+	str	r3, [r5, #12]
+	strb	r3, [r5, #16]
+	strh	r2, [r5, #18]	@ movhi
+	mov	r2, #16
+	strb	r3, [r5, #20]
+	strb	r2, [r5, #21]
+	strh	r3, [r5, #22]	@ movhi
+	bl	js_hash
+	str	r0, [r5, #8]
+.L2062:
+	ldr	r3, [sp, #16]
+	mov	r10, r7
+	mul	r3, r6, r3
 	mov	r6, #0
-	ldr	r9, [sp, #20]
-	add	r7, sp, #68
-	ldr	r10, [sp, #28]
-	str	r4, [sp, #44]
-	mov	r4, r8
-.L2780:
-	cmp	r10, #9
-	beq	.L2848
-	lsl	r3, r6, #2
-	movw	r2, #61424
-	str	r2, [sp, #72]
-	str	r3, [sp, #68]
-.L2777:
-	ldr	r8, [fp, #3448]
-	mov	r3, r7
-	mov	r2, r9
-	add	r1, r4, r6
+	str	r3, [sp, #32]
+.L2063:
+	ldr	r3, [sp, #32]
+	cmp	r6, r3
+	beq	.L2070
+	cmp	r8, #9
+	lslne	r3, r6, #2
+	addeq	r3, r6, #1
+	cmp	r6, #0
+	cmpeq	r8, #9
+	str	r3, [sp, #44]
+	movw	r3, #61424
+	str	r3, [sp, #48]
+	moveq	r0, #1
+	movne	r0, #0
+	bne	.L2066
+	ldr	r3, [r4, #3264]
+	mov	r0, #70
+	blx	r3
+	mov	r2, r5
+	add	r3, sp, #44
+	mov	r1, r9
+	ldr	ip, [r4, #3256]
 	mov	r0, #0
-	blx	r8
-	cmn	r0, #1
-	beq	.L2831
-	add	r9, r9, #2048
-	add	r8, r6, #1
-.L2779:
-	cmp	r8, r5
-	mov	r6, r8
-	bcc	.L2780
-.L2831:
-	ldr	r10, [sp, #40]
-	ldr	r4, [sp, #44]
-.L2778:
-	ldr	r2, [fp, #3456]
-	ldr	r3, .L2851
-	ldr	r6, [fp, #3692]
-	cmp	r2, #0
-	ldr	r2, .L2851
-	ldrh	r3, [r3, #10]
-	moveq	r8, #6
-	ldrb	r2, [r2, #14]	@ zero_extendqisi2
-	str	r2, [sp, #24]
+	blx	ip
+	ldr	r3, [r4, #3264]
+	str	r0, [sp, #36]
+	ldrb	r0, [r4, #22]	@ zero_extendqisi2
+	blx	r3
+	ldr	r2, [sp, #36]
+	cmn	r2, #1
+	bne	.L2067
+.L2070:
+	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldr	r2, [sp, #12]
+	ldr	r6, [r4, #3688]
+	str	r3, [sp, #32]
+	ldrh	r3, [r4, #10]
 	mul	r9, r3, r2
-	beq	.L2774
-	ldr	r2, [fp, #3460]
+	ldr	r2, [r4, #3264]
+	cmp	r2, #0
+	moveq	r8, #6
+	beq	.L2069
+	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	moveq	r8, #6
 	movne	r8, #9
-.L2774:
-	mul	r4, r4, r3
-	cmp	r4, #0
-	beq	.L2781
-	sub	r8, r8, #9
+.L2069:
+	ldr	r2, [sp, #16]
 	mov	r5, #0
-	clz	r8, r8
-	add	r7, sp, #68
-	lsr	r8, r8, #5
-.L2785:
+	mul	r10, r3, r2
+.L2072:
+	cmp	r5, r10
+	beq	.L2076
 	cmp	r5, #0
+	cmpeq	r8, #9
+	moveq	r0, #1
 	movne	r0, #0
-	andeq	r0, r8, #1
-	cmp	r0, #0
-	beq	.L2782
-	ldr	r3, [fp, #3456]
+	bne	.L2073
+	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
-	ldr	r3, [fp, #3460]
+	ldr	r3, [r4, #3268]
 	mov	r0, #2
 	blx	r3
 	mov	r2, r6
 	mov	r1, r9
-	ldr	ip, [fp, #3452]
-	mov	r3, r7
+	ldr	ip, [r4, #3260]
+	add	r3, sp, #44
 	mov	r0, #0
 	blx	ip
-	ldr	r3, [fp, #3460]
-	ldr	r0, [sp, #24]
+	ldr	r3, [r4, #3268]
+	ldr	r0, [sp, #32]
 	blx	r3
-	ldr	r3, [fp, #3456]
-	ldrb	r0, [fp, #3438]	@ zero_extendqisi2
+	ldr	r3, [r4, #3264]
+	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r6]
-	ldr	r2, [sp, #32]
+	ldr	r2, .L2111+16
 	cmp	r3, r2
-	bne	.L2781
-.L2784:
-	add	r5, r5, #1
-	cmp	r5, r4
-	bne	.L2785
-.L2781:
-	ldr	r7, [fp, #3692]
-	ldr	r3, [sp, #20]
-	ldr	r2, [r7]
-	ldr	r3, [r3]
-	cmp	r2, r3
-	bne	.L2849
-	ldr	r3, [sp, #20]
-	add	r2, r7, #4
-	mov	r4, #0
-	ldr	ip, [sp, #48]
-	add	r3, r3, #4
-	b	.L2790
-.L2792:
-	ldr	r0, [r2]
-	mov	r5, r2
-	ldr	r1, [r3]
-	mov	r6, r3
+	beq	.L2074
+.L2076:
+	ldr	r0, [r4, #3688]
+	mov	r3, r7
+	mov	r5, #0
+	mov	r2, r0
+.L2075:
+	mov	r6, r2
+	mov	r8, r3
+	ldr	ip, [r6]
 	add	r2, r2, #4
+	ldr	r1, [r8]
 	add	r3, r3, #4
-	cmp	r0, r1
-	bne	.L2850
-.L2790:
-	add	r4, r4, #1
-	cmp	r4, ip
-	bne	.L2792
-.L2791:
-	ldr	r3, [sp, #52]
-	add	r3, r3, #1
-	cmp	r3, #5
-	str	r3, [sp, #52]
-	bhi	.L2835
-.L2787:
-	ldr	r3, [sp, #36]
-	str	r3, [sp, #12]
-	b	.L2767
-.L2782:
-	mov	r3, r7
-	mov	r2, r6
-	add	r1, r9, r5
-	ldr	ip, [fp, #3452]
-	blx	ip
-	cmn	r0, #1
-	beq	.L2781
-	ldr	r3, [sp, #72]
-	movw	r2, #61424
-	cmp	r3, r2
-	bne	.L2781
-	add	r6, r6, #2048
-	b	.L2784
-.L2848:
-	cmp	r6, #0
-	add	r8, r6, #1
-	movw	r3, #61424
-	str	r8, [sp, #68]
-	str	r3, [sp, #72]
-	bne	.L2777
-	ldr	r3, [fp, #3456]
-	mov	r0, #70
-	blx	r3
-	mov	r0, r6
-	mov	r3, r7
-	ldr	r6, [fp, #3448]
-	mov	r1, r4
-	ldr	r2, [sp, #24]
-	blx	r6
-	ldr	r3, [fp, #3456]
-	mov	r6, r0
-	ldrb	r0, [fp, #3438]	@ zero_extendqisi2
-	blx	r3
-	cmn	r6, #1
-	bne	.L2779
-	b	.L2831
-.L2850:
+	cmp	ip, r1
+	beq	.L2078
 	mov	r2, #512
 	mov	r1, #0
-	mov	r0, r7
 	bl	memset
-	ldr	r3, [r6]
-	ldr	r6, [sp, #12]
-	ldr	r2, [r5]
-	ldr	r0, [sp, #56]
-	mov	r1, r6
-	str	r4, [sp]
+	ldr	r0, .L2111+20
+	str	r5, [sp]
+	ldr	r1, [sp, #12]
+	ldr	r3, [r8]
+	ldr	r2, [r6]
 	bl	sftl_printk
-	ldr	r3, .L2851
+	ldrh	r1, [r4, #10]
 	mov	r0, #0
-	ldrh	r1, [r3, #10]
-	ldr	r3, [fp, #3444]
-	mul	r1, r6, r1
+	ldr	r2, [sp, #12]
+	ldr	r3, [r4, #3252]
+	mul	r1, r2, r1
 	blx	r3
-	ldr	r3, [sp, #48]
-	cmp	r4, r3
-	bcc	.L2787
-	b	.L2791
-.L2807:
-	mov	r3, #6
-	str	r3, [sp, #28]
-	b	.L2768
-.L2847:
-	ldr	r3, [fp, #3692]
-	mov	r2, #1024
-	mov	r1, #0
-	mov	r0, r3
-	mov	r6, r3
-	str	r3, [sp, #24]
-	bl	memset
-	mov	r3, #12
-	ldr	r1, [sp, #32]
-	str	r3, [r6, #4]
-	add	r0, r6, #11
-	ldr	r3, .L2851
-	add	ip, r6, #23
-	str	r1, [r6]
-	movw	r1, #42982
-	movt	r1, 18374
-	mov	r2, #4
-	ldrh	r3, [r3, #10]
-	strb	r2, [r6, #17]
-	strh	r3, [r6, #18]	@ movhi
-	mov	r3, #16
-	strb	r3, [r6, #21]
-	mov	r3, #0
-	strb	r3, [r6, #16]
-	strb	r3, [r6, #20]
-	strh	r3, [r6, #22]	@ movhi
-.L2771:
-	lsr	r3, r1, #2
-	ldrb	r2, [r0, #1]!	@ zero_extendqisi2
-	add	r3, r3, r1, lsl #5
-	cmp	ip, r0
-	add	r3, r3, r2
-	eor	r1, r1, r3
-	bne	.L2771
+.L2079:
 	ldr	r3, [sp, #24]
-	str	r1, [r3, #8]
-	b	.L2770
-.L2846:
-	ldr	r3, [sp, #52]
-	cmp	r3, #0
-	bne	.L2835
-	ldr	r3, [fp, #3688]
-	mvn	r4, #0
-	str	r3, [sp, #20]
-	b	.L2761
-.L2849:
-	mov	r1, #0
-	mov	r2, #512
-	mov	r0, r7
-	mov	r4, r1
-	bl	memset
-	ldr	r5, [sp, #12]
+	str	r3, [sp, #12]
+	b	.L2059
+.L2066:
+	add	r3, sp, #44
+	mov	r2, r10
+	add	r1, r9, r6
+	ldr	ip, [r4, #3256]
+	blx	ip
+	cmn	r0, #1
+	beq	.L2070
+	add	r10, r10, #2048
+.L2067:
+	add	r6, r6, #1
+	b	.L2063
+.L2073:
+	add	r3, sp, #44
+	mov	r2, r6
+	add	r1, r9, r5
+	ldr	ip, [r4, #3260]
+	blx	ip
+	cmn	r0, #1
+	beq	.L2076
+	ldr	r2, [sp, #48]
+	movw	r3, #61424
+	cmp	r2, r3
+	bne	.L2076
+	add	r6, r6, #2048
+.L2074:
+	add	r5, r5, #1
+	b	.L2072
+.L2078:
+	ldr	r1, [sp, #28]
+	add	r5, r5, #1
+	cmp	r5, r1
+	bne	.L2075
 	ldr	r3, [sp, #20]
-	ldr	r2, [r7]
-	mov	r1, r5
-	ldr	r0, [sp, #56]
-	ldr	r3, [r3]
-	str	r4, [sp]
-	bl	sftl_printk
-	ldr	r3, .L2851
-	mov	r0, r4
-	ldrh	r1, [r3, #10]
-	ldr	r3, [fp, #3444]
-	mul	r1, r5, r1
-	blx	r3
-	b	.L2787
-.L2796:
-	movw	r0, #:lower16:.LC132
-	ldr	r1, .L2851+4
-	movt	r0, #:upper16:.LC132
-	bl	sftl_printk
-	ldr	r2, [r10, #3684]
-	cmp	r2, #0
-	beq	.L2836
-	ldr	fp, [r10, #3688]
-	b	.L2797
-.L2835:
-	ldr	r3, [fp, #3688]
-	ldr	r4, [sp, #60]
+	add	r3, r3, #1
+	cmp	r3, #5
 	str	r3, [sp, #20]
-	b	.L2761
-.L2844:
-	mov	r3, #512
-	mov	r0, #516
-	str	r3, [sp, #60]
-	b	.L2765
-.L2842:
-	bl	__stack_chk_fail
-.L2852:
+	bls	.L2079
+	b	.L2082
+.L2051:
+	cmp	r0, #64
+	mov	r4, r0
+	mov	r6, r1
+	mov	r7, r2
+	bne	.L2083
+	mov	r0, #262144
+	bl	ftl_malloc
+	str	r0, [r5, #3684]
+	mov	r0, #262144
+	bl	ftl_malloc
+	ldr	r3, [r5, #3684]
+	str	r0, [r5, #3688]
+	cmp	r3, #0
+	cmpne	r0, #0
+	beq	.L2084
+	mov	r2, #1
+	mov	r1, r9
+	str	r2, [r5, #3680]
+	mov	r0, r3
+	mov	r2, #262144
+	bl	ftl_memset
+.L2083:
+	ldr	r3, [r5, #3680]
+	cmp	r3, #0
+	beq	.L2110
+	cmp	r4, #63
+	ldr	r0, [r5, #3684]
+	ldrhi	r3, .L2111+24
+	rsbls	r1, r4, #64
+	subls	r6, r6, r1
+	movhi	r1, r7
+	addls	r1, r7, r1, lsl #9
+	addhi	r3, r4, r3
+	addhi	r0, r0, r3, lsl #9
+	cmp	r10, #576
+	rsbcs	r8, r8, #576
+	addcs	r6, r6, r8
+	lsl	r2, r6, #9
+	bl	ftl_memcpy
+	b	.L2110
+.L2084:
+	ldr	r1, .L2111+28
+	ldr	r0, .L2111+32
+	bl	sftl_printk
+	b	.L2083
+.L2089:
+	add	sp, sp, #116
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2112:
 	.align	2
-.L2851:
-	.word	.LANCHOR0+3416
-	.word	.LANCHOR1+692
+.L2111:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	-52655045
+	.word	.LC130
+	.word	1179535694
+	.word	.LC131
+	.word	8388544
+	.word	.LANCHOR1+633
+	.word	.LC132
 	.fnend
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	2
@@ -16396,15 +14124,18 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movw	r3, #:lower16:.LANCHOR0
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r2, [r3, #3696]
-	cmp	r2, #0
-	streq	r0, [r3, #3696]
-	moveq	r0, r2
-	streq	r1, [r3, #3700]
+	ldr	r2, .L2118
+	ldr	r3, [r2, #3692]
+	cmp	r3, #0
+	streq	r0, [r2, #3692]
+	moveq	r0, r3
+	streq	r1, [r2, #3696]
 	mvnne	r0, #0
 	bx	lr
+.L2119:
+	.align	2
+.L2118:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
@@ -16420,87 +14151,81 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
+	ldr	r5, .L2130
 	bl	ftl_malloc
-	movw	r6, #:lower16:.LANCHOR0
 	cmp	r0, #0
-	movt	r6, #:upper16:.LANCHOR0
-	str	r0, [r6, #3704]
-	beq	.L2864
+	str	r0, [r5, #3700]
+	mvneq	r9, #11
+	beq	.L2120
+	ldr	r10, .L2130+4
 	mov	r7, #0
-	movw	r9, #22084
-	mov	r4, r0
+	mov	r6, r7
 	mov	r8, r7
-	mov	r5, r7
-	movt	r9, 21067
-.L2862:
-	mov	r2, r4
-	ldr	r3, [r6, #3696]
+.L2124:
+	ldr	r3, [r5, #3692]
 	mov	r1, #128
-	lsl	r0, r5, #7
+	ldr	r2, [r5, #3700]
+	lsl	r0, r8, #7
 	blx	r3
-	subs	r10, r0, #0
-	bne	.L2860
-	ldr	r4, [r6, #3704]
+	subs	r9, r0, #0
+	bne	.L2122
+	ldr	r4, [r5, #3700]
 	ldr	r3, [r4]
-	cmp	r3, r9
-	beq	.L2868
-.L2861:
-	add	r5, r5, #1
-	cmp	r5, #2
-	bne	.L2862
-	cmp	r8, #0
-	beq	.L2863
-	mov	r2, r4
-	lsl	r0, r7, #7
-	ldr	r3, [r6, #3696]
-	mov	r1, #128
-	blx	r3
-	subs	r10, r0, #0
-	bne	.L2860
-.L2858:
-	mov	r0, r10
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2868:
+	cmp	r3, r10
+	bne	.L2123
 	add	r2, r4, #61440
 	ldr	r3, [r4, #4]
 	ldr	r2, [r2, #4092]
-	cmp	r3, r8
+	cmp	r3, r6
 	sub	r2, r2, r3
 	clz	r2, r2
 	lsr	r2, r2, #5
 	movls	r2, #0
 	cmp	r2, #0
-	movne	r7, r5
-	movne	r8, r3
-	b	.L2861
-.L2863:
-	mov	r1, r8
+	movne	r7, r8
+	movne	r6, r3
+.L2123:
+	add	r8, r8, #1
+	cmp	r8, #2
+	bne	.L2124
+	cmp	r6, #0
+	beq	.L2125
+	ldr	r3, [r5, #3692]
+	mov	r2, r4
+	mov	r1, #128
+	lsl	r0, r7, #7
+	blx	r3
+	subs	r9, r0, #0
+	beq	.L2120
+.L2122:
+	ldr	r0, [r5, #3700]
+	mvn	r9, #0
+	bl	kfree
+	mov	r3, #0
+	str	r3, [r5, #3700]
+	b	.L2120
+.L2125:
 	mov	r2, #65536
+	mov	r1, r6
 	mov	r0, r4
 	bl	memset
-	movw	r1, #22084
-	movw	r3, #64504
-	mov	r2, #1
-	add	r0, r4, #61440
-	movt	r1, 21067
-	movt	r3, 65535
-	stm	r4, {r1, r2}
-	str	r2, [r0, #4092]
-	mov	r0, r10
-	strh	r8, [r4, #12]	@ movhi
+	mov	r3, #1
+	add	r2, r4, #61440
+	str	r3, [r4, #4]
+	str	r10, [r4]
+	str	r3, [r2, #4092]
+	ldr	r3, .L2130+8
+	strh	r6, [r4, #12]	@ movhi
 	strh	r3, [r4, #14]	@ movhi
+.L2120:
+	mov	r0, r9
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2860:
-	ldr	r0, [r6, #3704]
-	mvn	r10, #0
-	bl	kfree
-	mov	r3, #0
-	mov	r0, r10
-	str	r3, [r6, #3704]
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2864:
-	mvn	r10, #11
-	b	.L2858
+.L2131:
+	.align	2
+.L2130:
+	.word	.LANCHOR0
+	.word	1380668996
+	.word	-1032
 	.fnend
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
@@ -16513,49 +14238,45 @@ rk_sftl_vendor_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
+	ldr	r3, .L2142
+	ldr	ip, [r3, #3700]
+	cmp	ip, #0
+	beq	.L2137
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movt	r3, #:upper16:.LANCHOR0
-	ldr	r5, [r3, #3704]
-	cmp	r5, #0
-	beq	.L2876
-	ldrh	r4, [r5, #10]
-	cmp	r4, #0
-	beq	.L2876
-	ldrh	r3, [r5, #16]
-	cmp	r0, r3
-	movne	ip, r5
-	movne	r3, #0
-	bne	.L2873
-	b	.L2882
-.L2874:
-	ldrh	lr, [ip, #24]
-	add	ip, ip, #8
-	cmp	lr, r0
-	beq	.L2871
-.L2873:
-	add	r3, r3, #1
+	mov	r3, #0
+	ldrh	r4, [ip, #10]
+.L2134:
 	cmp	r3, r4
-	bne	.L2874
-.L2876:
+	bcc	.L2136
 	mvn	r0, #0
 	pop	{r4, r5, r6, pc}
-.L2882:
-	mov	r3, #0
-.L2871:
-	add	r3, r5, r3, lsl #3
+.L2136:
+	add	lr, ip, r3, lsl #3
+	ldrh	r5, [lr, #16]
+	cmp	r5, r0
+	bne	.L2135
+	ldrh	r4, [lr, #20]
 	mov	r0, r1
-	ldrh	r4, [r3, #20]
-	ldrh	r1, [r3, #18]
+	ldrh	r1, [lr, #18]
 	cmp	r4, r2
 	movcs	r4, r2
 	add	r1, r1, #1024
-	add	r1, r5, r1
 	mov	r2, r4
+	add	r1, ip, r1
 	bl	memcpy
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
+.L2135:
+	add	r3, r3, #1
+	b	.L2134
+.L2137:
+	mvn	r0, #0
+	bx	lr
+.L2143:
+	.align	2
+.L2142:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
@@ -16568,166 +14289,162 @@ rk_sftl_vendor_write:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #:lower16:.LANCHOR0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movt	r3, #:upper16:.LANCHOR0
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r9, [r3, #3704]
-	str	r3, [sp, #12]
-	cmp	r9, #0
-	beq	.L2902
-	ldrh	r8, [r9, #10]
-	add	r3, r2, #63
-	bic	r3, r3, #63
-	str	r2, [sp]
+	ldr	r9, .L2164
+	ldr	r4, [r9, #3700]
+	cmp	r4, #0
+	beq	.L2159
+	mov	r8, r2
+	ldrh	r2, [r4, #10]
+	add	r6, r8, #63
+	ldrh	r3, [r4, #8]
+	mov	fp, r1
+	bic	r6, r6, #63
+	mov	r7, #0
 	str	r3, [sp, #4]
-	mov	r10, r0
-	ldrh	r3, [r9, #8]
-	cmp	r8, #0
-	str	r1, [sp, #16]
-	str	r3, [sp, #8]
-	beq	.L2885
-	ldrh	r3, [r9, #16]
-	cmp	r0, r3
-	movne	r3, r9
-	movne	r7, #0
-	bne	.L2888
-	b	.L2915
-.L2895:
-	ldrh	r2, [r3, #24]
-	add	r3, r3, #8
-	cmp	r2, r10
-	beq	.L2886
-.L2888:
-	add	r7, r7, #1
-	cmp	r8, r7
-	bne	.L2895
-.L2885:
-	ldrh	r2, [r9, #14]
-	ldr	r3, [sp, #4]
-	cmp	r3, r2
-	bhi	.L2902
-	add	r8, r9, r8, lsl #3
-	uxth	r3, r3
-	ldr	r1, [sp, #16]
-	strh	r10, [r8, #16]	@ movhi
-	sub	r0, r2, r3
-	ldrh	ip, [r9, #12]
-	ldr	r2, [sp]
-	add	r3, ip, r3
-	strh	ip, [r8, #18]	@ movhi
-	strh	r2, [r8, #20]	@ movhi
-	strh	r3, [r9, #12]	@ movhi
-	strh	r0, [r9, #14]	@ movhi
-	ldrh	r0, [r8, #18]
+.L2146:
+	cmp	r7, r2
+	bcc	.L2154
+	ldrh	r1, [r4, #14]
+	cmp	r6, r1
+	bhi	.L2159
+	add	r3, r4, r2, lsl #3
+	uxth	r6, r6
+	strh	r0, [r3, #16]	@ movhi
+	ldrh	r2, [r4, #12]
+	strh	r8, [r3, #20]	@ movhi
+	strh	r2, [r3, #18]	@ movhi
+	add	r2, r2, r6
+	sub	r6, r1, r6
+	strh	r2, [r4, #12]	@ movhi
+	strh	r6, [r4, #14]	@ movhi
+	mov	r2, r8
+	ldrh	r0, [r3, #18]
+	mov	r1, fp
 	add	r0, r0, #1024
-	add	r0, r9, r0
+	add	r0, r4, r0
 	bl	memcpy
-	ldr	r3, [r9, #4]
-	add	r2, r9, #61440
-	ldrh	r1, [r9, #10]
+	ldrh	r3, [r4, #10]
+	add	r2, r4, #61440
 	add	r3, r3, #1
-	add	r1, r1, #1
-	strh	r1, [r9, #10]	@ movhi
-.L2913:
-	str	r3, [r9, #4]
+	strh	r3, [r4, #10]	@ movhi
+	ldr	r3, [r4, #4]
+	add	r3, r3, #1
+	str	r3, [r4, #4]
 	str	r3, [r2, #4092]
-	mov	r2, r9
-	ldrh	r3, [r9, #8]
-	ldr	r1, [sp, #8]
+	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	uxth	r3, r3
-	lsl	r0, r1, #7
-	mov	r1, #128
 	cmp	r3, #1
 	movhi	r3, #0
-	strh	r3, [r9, #8]	@ movhi
+	strh	r3, [r4, #8]	@ movhi
+	ldr	r3, [r9, #3696]
+	b	.L2163
+.L2154:
+	add	r5, r4, r7, lsl #3
+	ldrh	r3, [r5, #16]
+	cmp	r3, r0
+	str	r3, [sp, #8]
+	bne	.L2147
+	ldrh	r1, [r5, #20]
+	add	r3, r4, #1024
+	add	r1, r1, #63
+	bic	r1, r1, #63
+	cmp	r8, r1
+	str	r1, [sp, #12]
+	bls	.L2148
+	ldrh	r1, [r4, #14]
+	cmp	r6, r1
+	subls	r2, r2, #1
+	ldrhls	r10, [r5, #18]
+	strls	r2, [sp, #16]
+	bls	.L2149
+.L2159:
+	mvn	r0, #0
+	b	.L2144
+.L2150:
+	ldrh	r9, [r5, #20]
+	add	r0, r3, r10
+	ldrh	r2, [r5, #16]
+	add	r7, r7, #1
+	ldrh	r1, [r5, #18]
+	strh	r9, [r5, #12]	@ movhi
+	add	r9, r9, #63
+	bic	r9, r9, #63
+	strh	r2, [r5, #8]	@ movhi
+	strh	r10, [r5, #10]	@ movhi
+	add	r1, r3, r1
+	mov	r2, r9
+	str	r3, [sp, #20]
+	bl	memcpy
+	ldr	r3, [sp, #20]
+	add	r10, r10, r9
+.L2149:
+	ldr	r2, [sp, #16]
+	add	r5, r5, #8
+	cmp	r7, r2
+	bcc	.L2150
+	ldrh	r2, [sp, #8]
+	add	r7, r4, r7, lsl #3
+	uxth	r5, r10
+	uxtah	r0, r3, r10
+	strh	r8, [r7, #20]	@ movhi
+	strh	r2, [r7, #16]	@ movhi
+	mov	r1, fp
+	strh	r5, [r7, #18]	@ movhi
+	mov	r2, r8
+	bl	memcpy
+	uxth	r3, r6
+	ldrh	r6, [r4, #14]
+	add	r5, r5, r3
+	sub	r6, r6, r3
 	ldr	r3, [sp, #12]
-	ldr	r3, [r3, #3700]
+	strh	r5, [r4, #12]	@ movhi
+	add	r6, r6, r3
+	strh	r6, [r4, #14]	@ movhi
+.L2151:
+	ldr	r3, [r4, #4]
+	add	r2, r4, #61440
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	str	r3, [r2, #4092]
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #1
+	movhi	r3, #0
+	strh	r3, [r4, #8]	@ movhi
+	ldr	r3, .L2164
+	ldr	r3, [r3, #3696]
+.L2163:
+	ldr	r0, [sp, #4]
+	mov	r2, r4
+	mov	r1, #128
+	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L2883:
+.L2144:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2915:
-	mov	r7, #0
-.L2886:
-	add	r4, r9, r7, lsl #3
-	add	fp, r9, #1024
-	ldrh	r2, [r4, #20]
-	add	r2, r2, #63
-	bic	r3, r2, #63
-	ldr	r2, [sp]
-	str	r3, [sp, #20]
-	cmp	r2, r3
-	bls	.L2889
-	ldrh	r2, [r9, #14]
-	ldr	r3, [sp, #4]
-	cmp	r3, r2
-	bhi	.L2902
-	sub	r8, r8, #1
-	ldrh	r6, [r4, #18]
-	cmp	r7, r8
-	bcs	.L2901
-.L2891:
-	ldrh	r3, [r4, #28]
-	add	r0, fp, r6
-	ldrh	ip, [r4, #24]
-	add	r7, r7, #1
-	ldrh	r1, [r4, #26]
-	add	r4, r4, #8
-	add	r5, r3, #63
-	strh	r6, [r4, #10]	@ movhi
-	bic	r5, r5, #63
-	strh	r3, [r4, #12]	@ movhi
-	strh	ip, [r4, #8]	@ movhi
-	mov	r2, r5
-	add	r1, fp, r1
-	add	r6, r6, r5
-	bl	memcpy
-	cmp	r7, r8
-	bcc	.L2891
-.L2890:
-	ldr	r2, [sp]
-	add	r8, r9, r8, lsl #3
-	uxth	r4, r6
-	ldr	r1, [sp, #16]
-	strh	r10, [r8, #16]	@ movhi
-	strh	r2, [r8, #20]	@ movhi
-	add	r0, fp, r4
-	strh	r4, [r8, #18]	@ movhi
-	bl	memcpy
-	ldrh	r3, [r9, #14]
-	ldrh	r2, [sp, #4]
-	add	r4, r4, r2
-	sub	r3, r3, r2
-	ldr	r2, [sp, #20]
-	strh	r4, [r9, #12]	@ movhi
-	add	r3, r3, r2
-	strh	r3, [r9, #14]	@ movhi
-.L2892:
-	ldr	r3, [r9, #4]
-	add	r2, r9, #61440
-	add	r3, r3, #1
-	b	.L2913
-.L2902:
-	mvn	r0, #0
-	b	.L2883
-.L2889:
-	ldr	r5, [sp]
-	ldrh	r0, [r4, #18]
-	ldr	r1, [sp, #16]
-	mov	r2, r5
-	add	r0, fp, r0
+.L2148:
+	ldrh	r0, [r5, #18]
+	mov	r2, r8
+	mov	r1, fp
+	add	r0, r3, r0
 	bl	memcpy
-	strh	r5, [r4, #20]	@ movhi
-	b	.L2892
-.L2901:
-	mov	r8, r7
-	b	.L2890
+	strh	r8, [r5, #20]	@ movhi
+	b	.L2151
+.L2147:
+	add	r7, r7, #1
+	b	.L2146
+.L2165:
+	.align	2
+.L2164:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
@@ -16743,180 +14460,165 @@ rk_sftl_vendor_storage_ioctl:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r0, #4096
+	mov	r5, r2
 	mov	r6, r1
-	mov	r4, r2
 	bl	ftl_malloc
-	subs	r5, r0, #0
-	beq	.L2932
-	movw	r3, #30209
-	movt	r3, 16388
+	subs	r4, r0, #0
+	mvneq	r5, #0
+	beq	.L2166
+	ldr	r3, .L2191
 	cmp	r6, r3
-	beq	.L2919
-	movw	r3, #30210
-	movt	r3, 16388
+	beq	.L2169
+	add	r3, r3, #1
 	cmp	r6, r3
-	bne	.L2937
-	mov	r6, #57344
+	beq	.L2170
+.L2188:
+	mvn	r5, #13
+	b	.L2168
+.L2169:
+	ldr	r6, .L2191+4
 	mov	r3, sp
-	movt	r6, 65535
 	and	r3, r3, r6
 	ldr	r3, [r3, #8]
 	.syntax divided
 @ 114 "./include/linux/uaccess.h" 1
-	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
+	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2936
 	mov	r2, #8
-	mov	r1, r4
+	bne	.L2171
+	mov	r1, r5
 	bl	arm_copy_from_user
-	cmp	r0, #0
-	rsbne	r3, r0, #8
-	bne	.L2925
-	ldr	r2, [r5]
-	movw	r3, #17745
-	movt	r3, 22098
-	cmp	r2, r3
-	beq	.L2941
-.L2927:
-	mvn	r6, #0
-	b	.L2918
-.L2919:
-	mov	r6, #57344
+	subs	r2, r0, #0
+	beq	.L2172
+.L2171:
+	rsb	r0, r2, #8
+	mov	r1, #0
+	add	r0, r4, r0
+	bl	memset
+	mov	r2, r5
+	mov	r1, #256
+.L2190:
+	ldr	r0, .L2191+8
+	bl	sftl_printk
+	b	.L2188
+.L2173:
 	mov	r3, sp
-	movt	r6, 65535
-	and	r3, r3, r6
+	uxth	r2, r0
+	and	r6, r6, r3
+	strh	r0, [r4, #6]	@ movhi
+	add	r2, r2, #8
+	ldr	r3, [r6, #8]
+	.syntax divided
+@ 132 "./include/linux/uaccess.h" 1
+	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
+@ 0 "" 2
+	.arm
+	.syntax unified
+	cmp	r3, #0
+	bne	.L2188
+	mov	r0, r5
+	mov	r1, r4
+	bl	arm_copy_to_user
+	subs	r5, r0, #0
+	beq	.L2168
+	b	.L2188
+.L2170:
+	ldr	r7, .L2191+4
+	mov	r3, sp
+	and	r3, r3, r7
 	ldr	r3, [r3, #8]
 	.syntax divided
 @ 114 "./include/linux/uaccess.h" 1
-	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
+	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2934
 	mov	r2, #8
-	mov	r1, r4
+	bne	.L2175
+	mov	r1, r5
 	bl	arm_copy_from_user
 	subs	r2, r0, #0
-	rsbne	r0, r2, #8
-	bne	.L2921
-	ldr	r2, [r5]
-	movw	r3, #17745
-	movt	r3, 22098
+	beq	.L2176
+.L2175:
+	rsb	r0, r2, #8
+	mov	r1, #0
+	add	r0, r4, r0
+	bl	memset
+	mov	r2, r5
+	mov	r1, #276
+	b	.L2190
+.L2172:
+	ldr	r2, [r4]
+	ldr	r3, .L2191+12
 	cmp	r2, r3
-	bne	.L2927
-	ldrh	r2, [r5, #6]
-	add	r1, r5, #8
-	ldrh	r0, [r5, #4]
+	bne	.L2177
+	ldrh	r2, [r4, #6]
+	add	r1, r4, #8
+	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	beq	.L2927
-	mov	r3, sp
-	strh	r0, [r5, #6]	@ movhi
-	uxth	r0, r0
-	and	r6, r6, r3
-	ldr	r3, [r6, #8]
-	add	r2, r0, #8
-	.syntax divided
-@ 132 "./include/linux/uaccess.h" 1
-	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
-@ 0 "" 2
-	.arm
-	.syntax unified
-	cmp	r3, #0
-	bne	.L2937
+	bne	.L2173
+.L2177:
+	mvn	r5, #0
+.L2168:
 	mov	r0, r4
-	mov	r1, r5
-	bl	arm_copy_to_user
-	subs	r6, r0, #0
-	beq	.L2918
-.L2937:
-	mvn	r6, #13
-.L2918:
-	mov	r0, r5
 	bl	kfree
-.L2916:
-	mov	r0, r6
+.L2166:
+	mov	r0, r5
 	pop	{r4, r5, r6, r7, r8, pc}
-.L2941:
-	ldrh	r3, [r5, #6]
-	movw	r2, #4087
-	cmp	r3, r2
-	bhi	.L2927
-	mov	r2, sp
-	add	r7, r3, #8
-	and	r6, r6, r2
-	ldr	r3, [r6, #8]
+.L2176:
+	ldr	r2, [r4]
+	ldr	r3, .L2191+12
+	cmp	r2, r3
+	bne	.L2177
+	ldrh	r6, [r4, #6]
+	movw	r3, #4087
+	cmp	r6, r3
+	bhi	.L2177
+	mov	r3, sp
+	add	r6, r6, #8
+	and	r7, r7, r3
+	ldr	r3, [r7, #8]
 	.syntax divided
 @ 114 "./include/linux/uaccess.h" 1
-	adds r2, r4, r7; sbcccs r2, r2, r3; movcc r3, #0
+	adds r2, r5, r6; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2928
-	mov	r2, r7
-	mov	r1, r4
-	mov	r0, r5
+	mov	r2, r6
+	bne	.L2178
+	mov	r1, r5
+	mov	r0, r4
 	bl	arm_copy_from_user
-	subs	r3, r0, #0
-	bne	.L2942
-	ldrh	r2, [r5, #6]
-	add	r1, r5, #8
-	ldrh	r0, [r5, #4]
-	bl	rk_sftl_vendor_write
-	mov	r6, r0
-	b	.L2918
-.L2936:
-	mov	r3, #0
-	mov	r0, #8
-.L2925:
-	mov	r2, r0
-	mov	r1, #0
-	add	r0, r5, r3
-	mvn	r6, #13
-	bl	memset
-	movw	r0, #:lower16:.LC133
-	mov	r2, r4
-	mov	r1, #276
-	movt	r0, #:upper16:.LC133
-	bl	sftl_printk
-	b	.L2918
-.L2934:
-	mov	r0, #0
-	mov	r2, #8
-.L2921:
-	add	r0, r5, r0
-	mov	r1, #0
-	bl	memset
-	movw	r0, #:lower16:.LC133
-	mov	r2, r4
-	mov	r1, #256
-	movt	r0, #:upper16:.LC133
-	mvn	r6, #13
-	bl	sftl_printk
-	b	.L2918
-.L2942:
-	sub	r0, r7, r3
-	mov	r7, r3
-.L2928:
-	mov	r2, r7
-	add	r0, r5, r0
+	subs	r2, r0, #0
+	beq	.L2179
+.L2178:
+	sub	r6, r6, r2
 	mov	r1, #0
-	mvn	r6, #13
+	add	r0, r4, r6
 	bl	memset
-	movw	r0, #:lower16:.LC133
-	mov	r2, r4
+	mov	r2, r5
 	movw	r1, #283
-	movt	r0, #:upper16:.LC133
-	bl	sftl_printk
-	b	.L2918
-.L2932:
-	mvn	r6, #0
-	b	.L2916
+	b	.L2190
+.L2179:
+	ldrh	r2, [r4, #6]
+	add	r1, r4, #8
+	ldrh	r0, [r4, #4]
+	bl	rk_sftl_vendor_write
+	mov	r5, r0
+	b	.L2168
+.L2192:
+	.align	2
+.L2191:
+	.word	1074034177
+	.word	-8192
+	.word	.LC133
+	.word	1448232273
 	.fnend
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
@@ -16930,11 +14632,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2944
+	ldr	r0, .L2194
 	b	misc_register
-.L2945:
+.L2195:
 	.align	2
-.L2944:
+.L2194:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -17090,95 +14792,86 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.7397, %object
-	.size	__func__.7397, 14
-__func__.7397:
-	.ascii	"FtlBbt2Bitmap\000"
-	.space	2
 	.type	__func__.7560, %object
 	.size	__func__.7560, 17
 __func__.7560:
 	.ascii	"INSERT_DATA_LIST\000"
-	.space	3
 	.type	__func__.7555, %object
 	.size	__func__.7555, 17
 __func__.7555:
 	.ascii	"INSERT_FREE_LIST\000"
-	.space	3
 	.type	__func__.7591, %object
 	.size	__func__.7591, 17
 __func__.7591:
 	.ascii	"List_remove_node\000"
-	.space	3
 	.type	__func__.7623, %object
 	.size	__func__.7623, 22
 __func__.7623:
 	.ascii	"List_update_data_list\000"
-	.space	2
 	.type	__func__.7730, %object
 	.size	__func__.7730, 22
 __func__.7730:
 	.ascii	"select_l2p_ram_region\000"
-	.space	2
 	.type	__func__.8057, %object
 	.size	__func__.8057, 16
 __func__.8057:
-	.ascii	"make_superblock\000"
-	.type	__func__.8078, %object
-	.size	__func__.8078, 18
-__func__.8078:
-	.ascii	"SupperBlkListInit\000"
-	.space	2
+	.ascii	"make_superblock\000"
 	.type	__func__.8232, %object
 	.size	__func__.8232, 19
 __func__.8232:
 	.ascii	"get_new_active_ppa\000"
-	.space	1
+	.type	__func__.13881, %object
+	.size	__func__.13881, 17
+__func__.13881:
+	.ascii	"FlashEraseBlocks\000"
+	.type	__func__.7665, %object
+	.size	__func__.7665, 26
+__func__.7665:
+	.ascii	"ftl_map_blk_alloc_new_blk\000"
 	.type	__func__.7170, %object
 	.size	__func__.7170, 11
 __func__.7170:
 	.ascii	"FtlMemInit\000"
-	.space	1
-	.type	__func__.13900, %object
-	.size	__func__.13900, 15
-__func__.13900:
+	.type	__func__.7397, %object
+	.size	__func__.7397, 14
+__func__.7397:
+	.ascii	"FtlBbt2Bitmap\000"
+	.type	__func__.8078, %object
+	.size	__func__.8078, 18
+__func__.8078:
+	.ascii	"SupperBlkListInit\000"
+	.type	__func__.13838, %object
+	.size	__func__.13838, 15
+__func__.13838:
 	.ascii	"FlashReadPages\000"
-	.space	1
+	.type	__func__.7842, %object
+	.size	__func__.7842, 14
+__func__.7842:
+	.ascii	"FtlScanSysBlk\000"
 	.type	__func__.7440, %object
 	.size	__func__.7440, 11
 __func__.7440:
 	.ascii	"FtlLoadBbt\000"
-	.space	1
-	.type	__func__.7898, %object
-	.size	__func__.7898, 15
-__func__.7898:
-	.ascii	"FtlLoadSysInfo\000"
-	.space	1
-	.type	__func__.13919, %object
-	.size	__func__.13919, 15
-__func__.13919:
+	.type	__func__.13857, %object
+	.size	__func__.13857, 15
+__func__.13857:
 	.ascii	"FlashProgPages\000"
-	.space	1
-	.type	__func__.13943, %object
-	.size	__func__.13943, 17
-__func__.13943:
-	.ascii	"FlashEraseBlocks\000"
-	.space	3
-	.type	__func__.7842, %object
-	.size	__func__.7842, 14
-__func__.7842:
-	.ascii	"FtlScanSysBlk\000"
-	.space	2
-	.type	__func__.7665, %object
-	.size	__func__.7665, 26
-__func__.7665:
-	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.space	2
+	.type	__func__.8204, %object
+	.size	__func__.8204, 25
+__func__.8204:
+	.ascii	"allocate_data_superblock\000"
+	.type	__func__.8245, %object
+	.size	__func__.8245, 16
+__func__.8245:
+	.ascii	"update_vpc_list\000"
+	.type	__func__.8252, %object
+	.size	__func__.8252, 20
+__func__.8252:
+	.ascii	"decrement_vpc_count\000"
 	.type	__func__.7691, %object
 	.size	__func__.7691, 31
 __func__.7691:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.space	1
 	.type	__func__.7705, %object
 	.size	__func__.7705, 16
 __func__.7705:
@@ -17191,84 +14884,63 @@ __func__.7632:
 	.size	__func__.7676, 15
 __func__.7676:
 	.ascii	"ftl_map_blk_gc\000"
-	.space	1
-	.type	__func__.7920, %object
-	.size	__func__.7920, 18
-__func__.7920:
-	.ascii	"FtlMapTblRecovery\000"
-	.space	2
 	.type	__func__.7747, %object
 	.size	__func__.7747, 9
 __func__.7747:
 	.ascii	"log2phys\000"
-	.space	3
 	.type	__func__.7966, %object
 	.size	__func__.7966, 16
 __func__.7966:
 	.ascii	"FtlReUsePrevPpa\000"
+	.type	__func__.8000, %object
+	.size	__func__.8000, 22
+__func__.8000:
+	.ascii	"FtlRecoverySuperblock\000"
 	.type	__func__.8119, %object
 	.size	__func__.8119, 14
 __func__.8119:
 	.ascii	"ftl_check_vpc\000"
-	.space	2
 	.type	__func__.7820, %object
 	.size	__func__.7820, 15
 __func__.7820:
 	.ascii	"FtlVpcTblFlush\000"
-	.space	1
-	.type	__func__.8245, %object
-	.size	__func__.8245, 16
-__func__.8245:
-	.ascii	"update_vpc_list\000"
-	.type	__func__.8252, %object
-	.size	__func__.8252, 20
-__func__.8252:
-	.ascii	"decrement_vpc_count\000"
-	.type	__func__.8000, %object
-	.size	__func__.8000, 22
-__func__.8000:
-	.ascii	"FtlRecoverySuperblock\000"
-	.space	2
-	.type	__func__.8322, %object
-	.size	__func__.8322, 19
-__func__.8322:
-	.ascii	"FtlGcFreeTempBlock\000"
-	.space	1
 	.type	__func__.8103, %object
 	.size	__func__.8103, 21
 __func__.8103:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.space	3
-	.type	__func__.8204, %object
-	.size	__func__.8204, 25
-__func__.8204:
-	.ascii	"allocate_data_superblock\000"
-	.space	3
 	.type	__func__.8225, %object
 	.size	__func__.8225, 29
 __func__.8225:
 	.ascii	"allocate_new_data_superblock\000"
-	.space	3
 	.type	__func__.7294, %object
 	.size	__func__.7294, 13
 __func__.7294:
 	.ascii	"FtlProgPages\000"
-	.space	3
+	.type	__func__.8322, %object
+	.size	__func__.8322, 19
+__func__.8322:
+	.ascii	"FtlGcFreeTempBlock\000"
 	.type	__func__.8435, %object
 	.size	__func__.8435, 23
 __func__.8435:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.space	1
 	.type	__func__.7322, %object
 	.size	__func__.7322, 9
 __func__.7322:
 	.ascii	"FtlWrite\000"
-	.space	3
-	.type	__func__.14062, %object
-	.size	__func__.14062, 14
-__func__.14062:
+	.type	__func__.7898, %object
+	.size	__func__.7898, 15
+__func__.7898:
+	.ascii	"FtlLoadSysInfo\000"
+	.type	__func__.7920, %object
+	.size	__func__.7920, 18
+__func__.7920:
+	.ascii	"FtlMapTblRecovery\000"
+	.type	__func__.14000, %object
+	.size	__func__.14000, 14
+__func__.14000:
 	.ascii	"FtlWriteToIDB\000"
-	.space	2
+	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 128
 rk_sftl_vendor_storage_fops:
@@ -17302,53 +14974,22 @@ rkflash_vender_storage_dev:
 	.bss
 	.align	2
 	.set	.LANCHOR0,. + 0
-	.type	c_ftl_nand_max_vendor_blks, %object
-	.size	c_ftl_nand_max_vendor_blks, 2
-c_ftl_nand_max_vendor_blks:
-	.space	2
-	.space	2
-	.type	p_vendor_block_table, %object
-	.size	p_vendor_block_table, 4
-p_vendor_block_table:
-	.space	4
-	.type	p_data_block_list_table, %object
-	.size	p_data_block_list_table, 4
-p_data_block_list_table:
-	.space	4
-	.type	p_data_block_list_head, %object
-	.size	p_data_block_list_head, 4
-p_data_block_list_head:
-	.space	4
-	.type	p_valid_page_count_table, %object
-	.size	p_valid_page_count_table, 4
-p_valid_page_count_table:
-	.space	4
-	.type	c_ftl_nand_data_blks_per_plane, %object
-	.size	c_ftl_nand_data_blks_per_plane, 2
-c_ftl_nand_data_blks_per_plane:
-	.space	2
-	.space	2
-	.type	p_data_block_list_tail, %object
-	.size	p_data_block_list_tail, 4
-p_data_block_list_tail:
-	.space	4
-	.type	g_VaildLpn, %object
-	.size	g_VaildLpn, 4
-g_VaildLpn:
-	.space	4
+	.type	g_nand_phy_info, %object
+	.size	g_nand_phy_info, 24
+g_nand_phy_info:
+	.space	24
 	.type	p_blk_mode_table, %object
 	.size	p_blk_mode_table, 4
 p_blk_mode_table:
 	.space	4
-	.type	c_ftl_nand_planes_num, %object
-	.size	c_ftl_nand_planes_num, 2
-c_ftl_nand_planes_num:
-	.space	2
-	.space	2
 	.type	g_active_superblock, %object
 	.size	g_active_superblock, 48
 g_active_superblock:
 	.space	48
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 4
+p_valid_page_count_table:
+	.space	4
 	.type	g_buffer_superblock, %object
 	.size	g_buffer_superblock, 48
 g_buffer_superblock:
@@ -17378,14 +15019,22 @@ g_num_free_superblocks:
 	.size	c_ftl_nand_sys_blks_per_plane, 4
 c_ftl_nand_sys_blks_per_plane:
 	.space	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.space	2
+	.space	2
 	.type	c_ftl_nand_max_sys_blks, %object
 	.size	c_ftl_nand_max_sys_blks, 4
 c_ftl_nand_max_sys_blks:
 	.space	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.space	2
 	.type	c_ftl_nand_blk_pre_plane, %object
 	.size	c_ftl_nand_blk_pre_plane, 2
 c_ftl_nand_blk_pre_plane:
-	.space	2
 	.space	2
 	.type	c_ftl_nand_max_data_blks, %object
 	.size	c_ftl_nand_max_data_blks, 4
@@ -17467,6 +15116,10 @@ c_ftl_nand_reserved_blks:
 	.size	DeviceCapacity, 4
 DeviceCapacity:
 	.space	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.space	2
 	.type	c_ftl_nand_vendor_region_num, %object
 	.size	c_ftl_nand_vendor_region_num, 2
 c_ftl_nand_vendor_region_num:
@@ -17474,6 +15127,7 @@ c_ftl_nand_vendor_region_num:
 	.type	c_ftl_nand_map_blks_per_plane, %object
 	.size	c_ftl_nand_map_blks_per_plane, 2
 c_ftl_nand_map_blks_per_plane:
+	.space	2
 	.space	2
 	.type	c_ftl_nand_max_map_blks, %object
 	.size	c_ftl_nand_max_map_blks, 4
@@ -17500,15 +15154,14 @@ g_MaxLbaSector:
 g_totle_vendor_block:
 	.space	2
 	.space	2
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 4
+p_vendor_block_table:
+	.space	4
 	.type	gBbtInfo, %object
 	.size	gBbtInfo, 60
 gBbtInfo:
 	.space	60
-	.type	c_ftl_nand_bbm_buf_size, %object
-	.size	c_ftl_nand_bbm_buf_size, 2
-c_ftl_nand_bbm_buf_size:
-	.space	2
-	.space	2
 	.type	gSysFreeQueue, %object
 	.size	gSysFreeQueue, 2056
 gSysFreeQueue:
@@ -17517,6 +15170,18 @@ gSysFreeQueue:
 	.size	g_sys_save_data, 48
 g_sys_save_data:
 	.space	48
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 4
+p_data_block_list_table:
+	.space	4
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 4
+p_data_block_list_head:
+	.space	4
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 4
+p_data_block_list_tail:
+	.space	4
 	.type	g_num_data_superblocks, %object
 	.size	g_num_data_superblocks, 2
 g_num_data_superblocks:
@@ -17542,34 +15207,9 @@ g_l2p_last_update_region_id:
 	.size	FtlUpdateVaildLpnCount, 2
 FtlUpdateVaildLpnCount:
 	.space	2
-	.type	p_map_block_valid_page_count, %object
-	.size	p_map_block_valid_page_count, 4
-p_map_block_valid_page_count:
-	.space	4
-	.type	p_l2p_map_buf, %object
-	.size	p_l2p_map_buf, 4
-p_l2p_map_buf:
-	.space	4
-	.type	gL2pMapInfo, %object
-	.size	gL2pMapInfo, 44
-gL2pMapInfo:
-	.space	44
-	.type	g_totle_map_block, %object
-	.size	g_totle_map_block, 2
-g_totle_map_block:
-	.space	2
-	.space	2
-	.type	p_map_block_table, %object
-	.size	p_map_block_table, 4
-p_map_block_table:
-	.space	4
-	.type	p_map_block_ver_table, %object
-	.size	p_map_block_ver_table, 4
-p_map_block_ver_table:
-	.space	4
-	.type	p_map_region_ppn_table, %object
-	.size	p_map_region_ppn_table, 4
-p_map_region_ppn_table:
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
 	.space	4
 	.type	g_MaxLpn, %object
 	.size	g_MaxLpn, 4
@@ -17697,36 +15337,15 @@ req_gc:
 	.size	c_gc_page_buf_num, 4
 c_gc_page_buf_num:
 	.space	4
-	.type	g_tmp_data_superblock_id, %object
-	.size	g_tmp_data_superblock_id, 2
-g_tmp_data_superblock_id:
-	.space	2
-	.space	2
-	.type	g_totle_swl_count, %object
-	.size	g_totle_swl_count, 4
-g_totle_swl_count:
-	.space	4
-	.type	ftl_gc_temp_power_lost_recovery_flag, %object
-	.size	ftl_gc_temp_power_lost_recovery_flag, 4
-ftl_gc_temp_power_lost_recovery_flag:
-	.space	4
-	.type	g_recovery_page_min_ver, %object
-	.size	g_recovery_page_min_ver, 4
-g_recovery_page_min_ver:
-	.space	4
-	.type	p_swl_mul_table, %object
-	.size	p_swl_mul_table, 4
-p_swl_mul_table:
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 4
+p_gc_blk_tbl:
 	.space	4
 	.type	g_gc_blk_num, %object
 	.size	g_gc_blk_num, 2
 g_gc_blk_num:
 	.space	2
 	.space	2
-	.type	p_gc_blk_tbl, %object
-	.size	p_gc_blk_tbl, 4
-p_gc_blk_tbl:
-	.space	4
 	.type	p_gc_page_info, %object
 	.size	p_gc_page_info, 4
 p_gc_page_info:
@@ -17747,6 +15366,14 @@ g_gc_bad_block_temp_tbl:
 	.size	g_gc_bad_block_gc_index, 2
 g_gc_bad_block_gc_index:
 	.space	2
+	.type	g_nand_ops, %object
+	.size	g_nand_ops, 24
+g_nand_ops:
+	.space	24
+	.type	req_erase, %object
+	.size	req_erase, 4
+req_erase:
+	.space	4
 	.type	g_in_gc_progress, %object
 	.size	g_in_gc_progress, 4
 g_in_gc_progress:
@@ -17772,12 +15399,8 @@ req_read:
 req_gc_dst:
 	.space	4
 	.type	req_prgm, %object
-	.size	req_prgm, 4
-req_prgm:
-	.space	4
-	.type	req_erase, %object
-	.size	req_erase, 4
-req_erase:
+	.size	req_prgm, 4
+req_prgm:
 	.space	4
 	.type	p_sys_data_buf, %object
 	.size	p_sys_data_buf, 4
@@ -17824,6 +15447,10 @@ p_io_spare_buf:
 g_ect_tbl_info_size:
 	.space	2
 	.space	2
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 4
+p_swl_mul_table:
+	.space	4
 	.type	gp_ect_tbl_info, %object
 	.size	gp_ect_tbl_info, 4
 gp_ect_tbl_info:
@@ -17831,6 +15458,14 @@ gp_ect_tbl_info:
 	.type	p_valid_page_count_check_table, %object
 	.size	p_valid_page_count_check_table, 4
 p_valid_page_count_check_table:
+	.space	4
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 4
+p_map_block_table:
+	.space	4
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 4
+p_map_block_valid_page_count:
 	.space	4
 	.type	p_vendor_block_valid_page_count, %object
 	.size	p_vendor_block_valid_page_count, 4
@@ -17844,33 +15479,55 @@ p_vendor_block_ver_table:
 	.size	p_vendor_region_ppn_table, 4
 p_vendor_region_ppn_table:
 	.space	4
-	.type	g_nand_phy_info, %object
-	.size	g_nand_phy_info, 24
-g_nand_phy_info:
-	.space	24
-	.type	g_nand_ops, %object
-	.size	g_nand_ops, 24
-g_nand_ops:
-	.space	24
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 4
+p_map_region_ppn_table:
+	.space	4
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 4
+p_map_block_ver_table:
+	.space	4
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 4
+p_l2p_map_buf:
+	.space	4
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.space	2
+	.space	2
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 44
+gL2pMapInfo:
+	.space	44
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.space	2
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.space	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.space	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.space	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.space	4
 	.type	req_sys, %object
 	.size	req_sys, 20
 req_sys:
 	.space	20
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
-	.space	4
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 44
-gVendorBlkInfo:
-	.space	44
-	.type	g_ect_tbl_power_up_flush, %object
-	.size	g_ect_tbl_power_up_flush, 2
-g_ect_tbl_power_up_flush:
-	.space	2
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
+	.space	2
 	.space	2
 	.type	g_recovery_page_num, %object
 	.size	g_recovery_page_num, 4
@@ -17880,6 +15537,15 @@ g_recovery_page_num:
 	.size	g_recovery_ppa_tbl, 128
 g_recovery_ppa_tbl:
 	.space	128
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.space	2
+	.space	2
 	.type	gc_discard_updated, %object
 	.size	gc_discard_updated, 4
 gc_discard_updated:
@@ -17900,6 +15566,10 @@ g_gc_cur_blk_max_valid_pages:
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
+	.space	4
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
 	.space	4
 	.type	idb_need_write_back, %object
 	.size	idb_need_write_back, 4
@@ -17933,14 +15603,11 @@ check_vpc_table:
 	.size	gp_last_act_superblock, 4
 gp_last_act_superblock:
 	.space	4
-	.section	.rodata.str1.4,"aMS",%progbits,1
-	.align	2
+	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
 	.ascii	"SFTL version: 5.0.53 20200303\000"
-	.space	2
 .LC1:
 	.ascii	"\012%s\012\000"
-	.space	3
 .LC2:
 	.ascii	"act blk: %x %x %x %x %x %x\012\000"
 .LC3:
@@ -17949,49 +15616,37 @@ gp_last_act_superblock:
 	.ascii	"tmp blk: %x %x %x %x %x %x\012\000"
 .LC5:
 	.ascii	"gc blk: %x %x %x %x %x %x\012\000"
-	.space	1
 .LC6:
 	.ascii	"free blk: %x %x %x\012\000"
 .LC7:
 	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
 	.ascii	"\000"
-	.space	2
 .LC8:
 	.ascii	"\012!!!!! error @ func:%s - line:%d\012\000"
-	.space	2
 .LC9:
 	.ascii	"FLASH INFO:\012\000"
-	.space	3
 .LC10:
 	.ascii	"Device Capacity: %d MB\012\000"
 .LC11:
 	.ascii	"FTL INFO:\012\000"
-	.space	1
 .LC12:
 	.ascii	"g_MaxLpn = 0x%x\012\000"
-	.space	3
 .LC13:
 	.ascii	"g_VaildLpn = 0x%x\012\000"
-	.space	1
 .LC14:
 	.ascii	"read_page_count = 0x%x\012\000"
 .LC15:
 	.ascii	"discard_page_count = 0x%x\012\000"
-	.space	1
 .LC16:
 	.ascii	"write_page_count = 0x%x\012\000"
-	.space	3
 .LC17:
 	.ascii	"cache_write_count = 0x%x\012\000"
-	.space	2
 .LC18:
 	.ascii	"l2p_write_count = 0x%x\012\000"
 .LC19:
 	.ascii	"gc_page_count = 0x%x\012\000"
-	.space	2
 .LC20:
 	.ascii	"totle_write = %d MB\012\000"
-	.space	3
 .LC21:
 	.ascii	"totle_read = %d MB\012\000"
 .LC22:
@@ -18000,144 +15655,106 @@ gp_last_act_superblock:
 	.ascii	"GDV = 0x%x\012\000"
 .LC24:
 	.ascii	"bad blk num = %d\012\000"
-	.space	2
 .LC25:
 	.ascii	"free_superblocks = 0x%x\012\000"
-	.space	3
 .LC26:
 	.ascii	"mlc_EC = 0x%x\012\000"
-	.space	1
 .LC27:
 	.ascii	"slc_EC = 0x%x\012\000"
-	.space	1
 .LC28:
 	.ascii	"avg_EC = 0x%x\012\000"
-	.space	1
 .LC29:
 	.ascii	"sys_EC = 0x%x\012\000"
-	.space	1
 .LC30:
 	.ascii	"max_EC = 0x%x\012\000"
-	.space	1
 .LC31:
 	.ascii	"min_EC = 0x%x\012\000"
-	.space	1
 .LC32:
 	.ascii	"PLT = 0x%x\012\000"
 .LC33:
 	.ascii	"POT = 0x%x\012\000"
 .LC34:
 	.ascii	"MaxSector = 0x%x\012\000"
-	.space	2
 .LC35:
 	.ascii	"init_sys_blks_pp = 0x%x\012\000"
-	.space	3
 .LC36:
 	.ascii	"sys_blks_pp = 0x%x\012\000"
 .LC37:
 	.ascii	"free sysblock = 0x%x\012\000"
-	.space	2
 .LC38:
 	.ascii	"data_blks_pp = 0x%x\012\000"
-	.space	3
 .LC39:
 	.ascii	"data_op_blks_pp = 0x%x\012\000"
 .LC40:
 	.ascii	"max_data_blks = 0x%x\012\000"
-	.space	2
 .LC41:
 	.ascii	"Sys.id = 0x%x\012\000"
-	.space	1
 .LC42:
 	.ascii	"Bbt.id = 0x%x\012\000"
-	.space	1
 .LC43:
 	.ascii	"ACT.page = 0x%x\012\000"
-	.space	3
 .LC44:
 	.ascii	"ACT.plane = 0x%x\012\000"
-	.space	2
 .LC45:
 	.ascii	"ACT.id = 0x%x\012\000"
-	.space	1
 .LC46:
 	.ascii	"ACT.mode = 0x%x\012\000"
-	.space	3
 .LC47:
 	.ascii	"ACT.a_pages = 0x%x\012\000"
 .LC48:
 	.ascii	"ACT VPC = 0x%x\012\000"
 .LC49:
 	.ascii	"BUF.page = 0x%x\012\000"
-	.space	3
 .LC50:
 	.ascii	"BUF.plane = 0x%x\012\000"
-	.space	2
 .LC51:
 	.ascii	"BUF.id = 0x%x\012\000"
-	.space	1
 .LC52:
 	.ascii	"BUF.mode = 0x%x\012\000"
-	.space	3
 .LC53:
 	.ascii	"BUF.a_pages = 0x%x\012\000"
 .LC54:
 	.ascii	"BUF VPC = 0x%x\012\000"
 .LC55:
 	.ascii	"TMP.page = 0x%x\012\000"
-	.space	3
 .LC56:
 	.ascii	"TMP.plane = 0x%x\012\000"
-	.space	2
 .LC57:
 	.ascii	"TMP.id = 0x%x\012\000"
-	.space	1
 .LC58:
 	.ascii	"TMP.mode = 0x%x\012\000"
-	.space	3
 .LC59:
 	.ascii	"TMP.a_pages = 0x%x\012\000"
 .LC60:
 	.ascii	"GC.page = 0x%x\012\000"
 .LC61:
 	.ascii	"GC.plane = 0x%x\012\000"
-	.space	3
 .LC62:
 	.ascii	"GC.id = 0x%x\012\000"
-	.space	2
 .LC63:
 	.ascii	"GC.mode = 0x%x\012\000"
 .LC64:
 	.ascii	"GC.a_pages = 0x%x\012\000"
-	.space	1
 .LC65:
 	.ascii	"WR_CHK = %x %x %x\012\000"
-	.space	1
 .LC66:
 	.ascii	"Read Err Cnt = 0x%x\012\000"
-	.space	3
 .LC67:
 	.ascii	"Prog Err Cnt = 0x%x\012\000"
-	.space	3
 .LC68:
 	.ascii	"gc_free_blk_th= 0x%x\012\000"
-	.space	2
 .LC69:
 	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
 .LC70:
 	.ascii	"gc_skip_write_count= 0x%x\012\000"
-	.space	1
 .LC71:
 	.ascii	"gc_blk_index= 0x%x\012\000"
 .LC72:
 	.ascii	"free min EC= 0x%x\012\000"
-	.space	1
 .LC73:
 	.ascii	"free max EC= 0x%x\012\000"
-	.space	1
 .LC74:
 	.ascii	"GC__SB VPC = 0x%x\012\000"
-	.space	1
 .LC75:
 	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
 .LC76:
@@ -18147,162 +15764,120 @@ gp_last_act_superblock:
 .LC78:
 	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
 	.ascii	"\012\000"
-	.space	3
 .LC79:
 	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
-	.space	3
 .LC80:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC81:
-	.ascii	"%s error allocating memory. return -1\012\000"
-	.space	1
+	.ascii	"%s %p + 0x%x:\000"
 .LC82:
-	.ascii	"\012\000"
-	.space	2
+	.ascii	"0x%08x,\000"
 .LC83:
-	.ascii	"%s %p + 0x%x:\000"
-	.space	2
+	.ascii	"0x%04x,\000"
 .LC84:
-	.ascii	"0x%08x,\000"
+	.ascii	"0x%02x,\000"
 .LC85:
-	.ascii	"0x%04x,\000"
+	.ascii	"\012\000"
 .LC86:
-	.ascii	"0x%02x,\000"
+	.ascii	"%s: addr: %x is in id block!!!!!!!!!!\012\000"
 .LC87:
-	.ascii	"FlashReadPages %x %x error_ecc_bits %d\012\000"
+	.ascii	"not free: w: d:\000"
 .LC88:
-	.ascii	"data:\000"
-	.space	2
+	.ascii	"not free: w: s:\000"
 .LC89:
-	.ascii	"spare:\000"
-	.space	1
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
 .LC90:
-	.ascii	"%s hash error this.id =%x page =%x pre_id =%x hash "
-	.ascii	"=%x hash_r =%x\012\000"
-	.space	1
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
 .LC91:
-	.ascii	"%s: addr: %x is in id block!!!!!!!!!!\012\000"
-	.space	1
+	.ascii	"%s error allocating memory. return -1\012\000"
 .LC92:
-	.ascii	"not free: w: d:\000"
+	.ascii	"FlashReadPages %x %x error_ecc_bits %d\012\000"
 .LC93:
-	.ascii	"not free: w: s:\000"
+	.ascii	"data:\000"
 .LC94:
-	.ascii	"prog read error: = %x\012\000"
-	.space	1
+	.ascii	"spare:\000"
 .LC95:
-	.ascii	"prog read REFRESH: = %x\012\000"
-	.space	3
+	.ascii	"prog read error: = %x\012\000"
 .LC96:
-	.ascii	"prog read s error: = %x %x %x\012\000"
-	.space	1
+	.ascii	"prog read REFRESH: = %x\012\000"
 .LC97:
-	.ascii	"prog read d error: = %x %x %x\012\000"
-	.space	1
+	.ascii	"prog read s error: = %x %x %x\012\000"
 .LC98:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
-	.ascii	"\000"
+	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC99:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
-	.space	3
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC100:
-	.ascii	"FtlMapWritePage error = %x \012\000"
-	.space	3
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC101:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
-	.space	3
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC102:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
-	.space	3
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC103:
-	.ascii	"map_ppn:\000"
-	.space	3
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC104:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
-	.space	1
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC105:
-	.ascii	"%s last blk_id =%x page =%x hash error hash =%x has"
-	.ascii	"h_r =%x\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC106:
-	.ascii	"%s scan blk_id =%x page =%x hash error hash =%x has"
-	.ascii	"h_r =%x\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC107:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"map_ppn:\000"
 .LC108:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
-	.space	2
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC109:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"data prev_ppa = %x error...................\012\000"
 .LC110:
-	.ascii	"ftl_scan_all_data = %x\012\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC111:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
-	.space	1
+	.ascii	"...%s enter...\012\000"
 .LC112:
-	.ascii	"lpa = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
-	.ascii	"\000"
-	.space	3
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC113:
-	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
-	.space	3
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC114:
-	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
-	.space	3
+	.ascii	"ftl_scan_all_data = %x\012\000"
 .LC115:
-	.ascii	"no ect\000"
-	.space	1
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC116:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"lpa = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC117:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
-	.space	1
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC118:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
-	.space	3
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC119:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"no ect\000"
 .LC120:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
-	.space	1
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC121:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
-	.space	3
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC122:
-	.ascii	"data prev_ppa = %x error...................\012\000"
-	.space	3
+	.ascii	"FtlProgPages error %x = %d\012\000"
 .LC123:
-	.ascii	"spuer block %x vpn is 0\012 \000"
-	.space	2
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC124:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
-	.space	3
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC125:
-	.ascii	"FtlProgPages error %x = %d\012\000"
+	.ascii	"FtlWrite: ecc error:%x %x %x\012\000"
 .LC126:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
-	.space	2
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC127:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
-	.space	2
+	.ascii	"%s hash error this.id =%x page =%x pre_id =%x hash "
+	.ascii	"=%x hash_r =%x\012\000"
 .LC128:
-	.ascii	"FtlWrite: ecc error:%x %x %x\012\000"
-	.space	2
+	.ascii	"%s last blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC129:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
-	.space	1
+	.ascii	"%s scan blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC130:
 	.ascii	"write_idblock %x %x\012\000"
-	.space	3
 .LC131:
 	.ascii	"write_idblock fail! %x %x %x %x\012\000"
-	.space	3
 .LC132:
 	.ascii	"%s idb buffer alloc fail\012\000"
-	.space	2
 .LC133:
 	.ascii	"copy_from_user error %d %p %p\012\000"
-	.space	1
 .LC134:
 	.ascii	"vendor_storage\000"
-	.ident	"GCC: (Linaro GCC 6.3-2017.05) 6.3.1 20170404"
-	.section	.note.GNU-stack,"",%progbits
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index e142b1ebe9d9..890d10a919b2 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2019-11-25
+ * date: 2020-04-10
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -12,9 +12,13 @@
 	.eabi_attribute 26, 2
 	.eabi_attribute 30, 4
 	.eabi_attribute 34, 1
-	.eabi_attribute 18, 4
+	.eabi_attribute 18, 2
 	.file	"rk_sftl.c"
+	.syntax unified
+	.syntax unified
 	.global	__aeabi_uidiv
+	.thumb
+	.syntax unified
 	.text
 	.align	1
 	.syntax unified
@@ -580,33 +584,6 @@ FtlBbtInfoPrint:
 	.fnend
 	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
 	.align	1
-	.global	FtlBbtMemInit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlBbtMemInit, %function
-FtlBbtMemInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r0, .L52
-	movw	r3, #65535
-	movs	r2, #16
-	movs	r1, #255
-	strh	r3, [r0, #356]	@ movhi
-	movs	r3, #0
-	strh	r3, [r0, #362]	@ movhi
-	add	r0, r0, #368
-	b	memset
-.L53:
-	.align	2
-.L52:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlBbtMemInit, .-FtlBbtMemInit
-	.align	1
 	.global	FtlBbtCalcTotleCnt
 	.syntax unified
 	.thumb
@@ -617,7 +594,7 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L61
+	ldr	r3, .L58
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
@@ -625,23 +602,23 @@ FtlBbtCalcTotleCnt:
 	ldrh	r2, [r3, #302]
 	ldrh	r6, [r3, #258]
 	muls	r6, r2, r6
-.L55:
+.L52:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L57
+	blt	.L54
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L57:
+.L54:
 	bl	FtlBbmIsBadBlock
-	cbz	r0, .L56
+	cbz	r0, .L53
 	adds	r4, r4, #1
 	uxth	r4, r4
-.L56:
+.L53:
 	adds	r5, r5, #1
-	b	.L55
-.L62:
+	b	.L52
+.L59:
 	.align	2
-.L61:
+.L58:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -659,7 +636,7 @@ V2P_block:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, r1
-	ldr	r4, .L64
+	ldr	r4, .L61
 	mov	r7, r0
 	ldrh	r6, [r4, #260]
 	mov	r1, r6
@@ -674,9 +651,9 @@ V2P_block:
 	add	r0, r0, r4
 	uxth	r0, r0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L65:
+.L62:
 	.align	2
-.L64:
+.L61:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -691,7 +668,7 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L67
+	ldr	r3, .L64
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
@@ -705,9 +682,9 @@ P2V_plane:
 	add	r1, r1, r4
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L68:
+.L65:
 	.align	2
-.L67:
+.L64:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -724,7 +701,7 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L70
+	ldr	r4, .L67
 	ldrh	r1, [r4, #302]
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
@@ -732,9 +709,9 @@ P2V_block_in_plane:
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L71:
+.L68:
 	.align	2
-.L70:
+.L67:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -751,14 +728,14 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L73
+	bls	.L70
 	subs	r0, r0, r1
 	cmp	r0, #-2147483648
 	ite	hi
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L73:
+.L70:
 	subs	r0, r1, r0
 	cmp	r0, #-2147483648
 	ite	ls
@@ -768,36 +745,6 @@ ftl_cmp_data_ver:
 	.fnend
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	1
-	.global	FtlFreeSysBlkQueueInit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlFreeSysBlkQueueInit, %function
-FtlFreeSysBlkQueueInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L76
-	mov	r1, #2048
-	push	{r4, lr}
-	.save {r4, lr}
-	movs	r4, #0
-	strh	r0, [r3, #416]	@ movhi
-	add	r0, r3, #424
-	strh	r4, [r3, #418]	@ movhi
-	strh	r4, [r3, #420]	@ movhi
-	strh	r4, [r3, #422]	@ movhi
-	bl	__memzero
-	mov	r0, r4
-	pop	{r4, pc}
-.L77:
-	.align	2
-.L76:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
-	.align	1
 	.global	FtlFreeSysBlkQueueEmpty
 	.syntax unified
 	.thumb
@@ -809,14 +756,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L79
+	ldr	r3, .L73
 	ldrh	r0, [r3, #422]
 	clz	r0, r0
 	lsrs	r0, r0, #5
 	bx	lr
-.L80:
+.L74:
 	.align	2
-.L79:
+.L73:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -832,15 +779,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L82
+	ldr	r3, .L76
 	ldrh	r0, [r3, #422]
 	sub	r3, r0, #1024
 	rsbs	r0, r3, #0
 	adcs	r0, r0, r3
 	bx	lr
-.L83:
+.L77:
 	.align	2
-.L82:
+.L76:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -855,28 +802,28 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L93
+	ldr	r3, .L87
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldrh	r2, [r3, #422]
-	cbz	r2, .L84
+	cbz	r2, .L78
 	ldrh	r5, [r3, #2500]
 	movs	r0, #0
 	ldrh	r1, [r3, #418]
 	mov	r6, r0
 	ldrh	r2, [r3, #420]
 	and	r5, r5, #31
-.L86:
+.L80:
 	uxth	r4, r0
 	adds	r0, r0, #1
 	cmp	r5, r4
-	bgt	.L87
-	cbz	r6, .L84
+	bgt	.L81
+	cbz	r6, .L78
 	strh	r1, [r3, #418]	@ movhi
 	strh	r2, [r3, #420]	@ movhi
-.L84:
+.L78:
 	pop	{r4, r5, r6, pc}
-.L87:
+.L81:
 	add	r4, r3, r1, lsl #1
 	adds	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -886,10 +833,10 @@ FtlFreeSysBLkSort:
 	movs	r6, #1
 	add	r2, r2, r6
 	ubfx	r2, r2, #0, #10
-	b	.L86
-.L94:
+	b	.L80
+.L88:
 	.align	2
-.L93:
+.L87:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -904,35 +851,35 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L101
+	ldr	r3, .L95
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r4, [r3, #422]
 	cmp	r4, #1024
-	beq	.L99
+	beq	.L93
 	ldrh	r5, [r3, #418]
 	movs	r1, #0
-.L97:
+.L91:
 	cmp	r1, r4
-	bcc	.L98
-.L99:
+	bcc	.L92
+.L93:
 	movs	r0, #0
 	pop	{r4, r5, pc}
-.L98:
+.L92:
 	adds	r2, r1, r5
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #424]
 	cmp	r2, r0
-	beq	.L100
+	beq	.L94
 	adds	r1, r1, #1
-	b	.L97
-.L100:
+	b	.L91
+.L94:
 	movs	r0, #1
 	pop	{r4, r5, pc}
-.L102:
+.L96:
 	.align	2
-.L101:
+.L95:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -950,11 +897,11 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r2, .L118
+	ldr	r2, .L112
 	ldrh	r3, [r2, #244]
 	mov	r1, r2
 	cmp	r3, r0
-	bls	.L105
+	bls	.L99
 	movs	r5, #6
 	ldr	lr, [r2, #2520]
 	muls	r5, r0, r5
@@ -963,63 +910,63 @@ insert_data_list:
 	strh	r3, [r4, #2]	@ movhi
 	strh	r3, [lr, r5]	@ movhi
 	ldr	r3, [r2, #2524]
-	cbnz	r3, .L106
+	cbnz	r3, .L100
 	str	r4, [r2, #2524]
-.L105:
+.L99:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L106:
+.L100:
 	ldrh	r7, [r4, #4]
 	ldr	r9, [r2, #76]
 	ldrh	r2, [r9, r0, lsl #1]
-	cbz	r7, .L113
+	cbz	r7, .L107
 	muls	r2, r7, r2
-.L117:
+.L111:
 	ldr	r8, [r1, #2520]
 	movw	r10, #65535
 	str	r2, [sp]
 	sub	r2, r3, r8
 	asrs	r6, r2, #1
-	ldr	r2, .L118+4
+	ldr	r2, .L112+4
 	muls	r2, r6, r2
 	ldrh	r6, [r1, #244]
 	str	r6, [sp, #4]
 	movs	r6, #0
 	uxth	r2, r2
-.L111:
+.L105:
 	adds	r6, r6, #1
 	ldr	r7, [sp, #4]
 	uxth	r6, r6
 	cmp	r6, r7
-	bhi	.L105
+	bhi	.L99
 	cmp	r0, r2
-	beq	.L105
+	beq	.L99
 	ldrh	ip, [r3, #4]
 	cmp	ip, #0
-	beq	.L109
+	beq	.L103
 	ldrh	fp, [r9, r2, lsl #1]
 	ldr	r7, [sp]
 	mul	ip, ip, fp
 	cmp	ip, r7
-	bcs	.L109
+	bcs	.L103
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L110
+	bne	.L104
 	strh	r2, [r4, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
 	str	r4, [r1, #2528]
-	b	.L105
-.L113:
+	b	.L99
+.L107:
 	mov	r2, #-1
-	b	.L117
-.L110:
+	b	.L111
+.L104:
 	movs	r3, #6
 	mov	r2, ip
 	mla	r3, r3, ip, r8
-	b	.L111
-.L109:
+	b	.L105
+.L103:
 	strh	r2, [lr, r5]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [r4, #2]	@ movhi
@@ -1035,10 +982,10 @@ insert_data_list:
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L105
-.L119:
+	b	.L99
+.L113:
 	.align	2
-.L118:
+.L112:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1057,24 +1004,24 @@ INSERT_DATA_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L122
+	ldr	r2, .L116
 	ldrh	r3, [r2, #2532]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #2532]	@ movhi
 	ldrh	r2, [r2, #244]
 	cmp	r2, r3
-	bcs	.L120
+	bcs	.L114
 	movs	r2, #214
-	ldr	r1, .L122+4
-	ldr	r0, .L122+8
+	ldr	r1, .L116+4
+	ldr	r0, .L116+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L120:
+.L114:
 	pop	{r3, pc}
-.L123:
+.L117:
 	.align	2
-.L122:
+.L116:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC8
@@ -1095,8 +1042,8 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L125
-	ldr	r2, .L131
+	beq	.L119
+	ldr	r2, .L125
 	movs	r1, #6
 	mul	r7, r1, r0
 	ldr	ip, [r2, #2520]
@@ -1105,36 +1052,36 @@ insert_free_list:
 	strh	r4, [r6, #2]	@ movhi
 	strh	r4, [ip, r7]	@ movhi
 	ldr	r3, [r2, #2536]
-	cbnz	r3, .L126
+	cbnz	r3, .L120
 	str	r6, [r2, #2536]
-.L125:
+.L119:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L126:
+.L120:
 	ldr	lr, [r2, #2520]
 	ldr	r8, [r2, #2540]
 	sub	r2, r3, lr
 	asr	r10, r2, #1
-	ldr	r2, .L131+4
+	ldr	r2, .L125+4
 	ldrh	r9, [r8, r0, lsl #1]
 	mul	r2, r2, r10
 	mov	r10, r4
 	uxth	r2, r2
-.L129:
+.L123:
 	ldrh	r4, [r8, r2, lsl #1]
 	cmp	r4, r9
-	bcs	.L127
+	bcs	.L121
 	ldrh	r4, [r3]
 	cmp	r4, r10
-	bne	.L128
+	bne	.L122
 	strh	r2, [r6, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	b	.L125
-.L128:
+	b	.L119
+.L122:
 	mla	r3, r1, r4, lr
 	mov	r2, r4
-	b	.L129
-.L127:
+	b	.L123
+.L121:
 	ldrh	r1, [r3, #2]
 	strh	r1, [r6, #2]	@ movhi
 	strh	r2, [ip, r7]	@ movhi
@@ -1150,10 +1097,10 @@ insert_free_list:
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L125
-.L132:
+	b	.L119
+.L126:
 	.align	2
-.L131:
+.L125:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1172,24 +1119,24 @@ INSERT_FREE_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L135
+	ldr	r2, .L129
 	ldrh	r3, [r2, #228]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #228]	@ movhi
 	ldrh	r2, [r2, #244]
 	cmp	r2, r3
-	bcs	.L133
+	bcs	.L127
 	movs	r2, #207
-	ldr	r1, .L135+4
-	ldr	r0, .L135+8
+	ldr	r1, .L129+4
+	ldr	r0, .L129+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L133:
+.L127:
 	pop	{r3, pc}
-.L136:
+.L130:
 	.align	2
-.L135:
+.L129:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC8
@@ -1209,7 +1156,7 @@ List_remove_node:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r6, #6
-	ldr	r4, .L143
+	ldr	r4, .L137
 	muls	r6, r1, r6
 	movw	r3, #65535
 	mov	r8, r0
@@ -1217,20 +1164,20 @@ List_remove_node:
 	adds	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L138
+	bne	.L132
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L138
+	beq	.L132
 	mov	r2, #372
-	ldr	r1, .L143+4
-	ldr	r0, .L143+8
+	ldr	r1, .L137+4
+	ldr	r0, .L137+8
 	bl	sftl_printk
-.L138:
+.L132:
 	ldr	r3, [r8]
 	movw	r1, #65535
 	cmp	r5, r3
 	ldrh	r3, [r7, r6]
-	bne	.L139
+	bne	.L133
 	cmp	r3, r1
 	ittee	ne
 	ldrne	r0, [r4, #2520]
@@ -1241,24 +1188,24 @@ List_remove_node:
 	mlane	r3, r2, r3, r0
 	strne	r3, [r8]
 	strhne	r1, [r3, #2]	@ movhi
-.L141:
+.L135:
 	movw	r3, #65535
 	movs	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L139:
+.L133:
 	cmp	r3, r1
 	ldrh	r1, [r5, #2]
-	bne	.L142
+	bne	.L136
 	cmp	r1, r3
-	beq	.L141
+	beq	.L135
 	movs	r2, #6
 	ldr	r0, [r4, #2520]
 	muls	r1, r2, r1
 	strh	r3, [r0, r1]	@ movhi
-	b	.L141
-.L142:
+	b	.L135
+.L136:
 	ldr	r0, [r4, #2520]
 	movs	r2, #6
 	mla	r3, r2, r3, r0
@@ -1268,10 +1215,10 @@ List_remove_node:
 	ldr	r3, [r4, #2520]
 	muls	r2, r0, r2
 	strh	r1, [r3, r2]	@ movhi
-	b	.L141
-.L144:
+	b	.L135
+.L138:
 	.align	2
-.L143:
+.L137:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC8
@@ -1291,15 +1238,15 @@ List_pop_index_node:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldr	r3, [r0]
-	cbz	r3, .L151
-	ldr	r2, .L152
+	cbz	r3, .L145
+	ldr	r2, .L146
 	movw	r5, #65535
 	movs	r6, #6
 	ldr	r2, [r2, #2520]
-.L147:
-	cbnz	r1, .L148
-.L150:
-	ldr	r4, .L152+4
+.L141:
+	cbnz	r1, .L142
+.L144:
+	ldr	r4, .L146+4
 	subs	r3, r3, r2
 	asrs	r3, r3, #1
 	muls	r4, r3, r4
@@ -1307,20 +1254,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, r5, r6, pc}
-.L148:
+.L142:
 	ldrh	r4, [r3]
 	cmp	r4, r5
-	beq	.L150
+	beq	.L144
 	subs	r1, r1, #1
 	mla	r3, r6, r4, r2
 	uxth	r1, r1
-	b	.L147
-.L151:
+	b	.L141
+.L145:
 	movw	r0, #65535
 	pop	{r4, r5, r6, pc}
-.L153:
+.L147:
 	.align	2
-.L152:
+.L146:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1352,37 +1299,37 @@ List_get_gc_head_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L161
+	ldr	r2, .L155
 	push	{r4, lr}
 	.save {r4, lr}
 	ldr	r3, [r2, #2524]
-	cbz	r3, .L160
+	cbz	r3, .L154
 	ldr	r1, [r2, #2520]
 	movs	r4, #6
 	movw	r2, #65535
-.L157:
-	cbz	r0, .L158
+.L151:
+	cbz	r0, .L152
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L159
-.L160:
+	bne	.L153
+.L154:
 	movw	r0, #65535
 	pop	{r4, pc}
-.L159:
+.L153:
 	subs	r0, r0, #1
 	mla	r3, r4, r3, r1
 	uxth	r0, r0
-	b	.L157
-.L158:
-	ldr	r0, .L161+4
+	b	.L151
+.L152:
+	ldr	r0, .L155+4
 	subs	r3, r3, r1
 	asrs	r3, r3, #1
 	muls	r3, r0, r3
 	uxth	r0, r3
 	pop	{r4, pc}
-.L162:
+.L156:
 	.align	2
-.L161:
+.L155:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1401,53 +1348,53 @@ List_update_data_list:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, r0
-	ldr	r4, .L174
+	ldr	r4, .L168
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L165
+	beq	.L159
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L165
+	beq	.L159
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	beq	.L165
+	beq	.L159
 	movs	r7, #6
 	ldr	r9, [r4, #2520]
 	muls	r7, r0, r7
 	ldr	r3, [r4, #2524]
 	add	r8, r9, r7
 	cmp	r8, r3
-	beq	.L165
+	beq	.L159
 	ldrh	r6, [r8, #4]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r6, #0
-	beq	.L172
+	beq	.L166
 	muls	r6, r3, r6
-.L167:
+.L161:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L168
+	bne	.L162
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	bne	.L168
+	bne	.L162
 	movw	r2, #463
-	ldr	r1, .L174+4
-	ldr	r0, .L174+8
+	ldr	r1, .L168+4
+	ldr	r0, .L168+8
 	bl	sftl_printk
-.L168:
+.L162:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L169
+	bne	.L163
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	beq	.L165
-.L169:
+	beq	.L159
+.L163:
 	movs	r2, #6
 	muls	r2, r3, r2
-	ldr	r3, .L174+12
+	ldr	r3, .L168+12
 	asrs	r1, r2, #1
 	muls	r3, r1, r3
 	ldr	r1, [r4, #76]
@@ -1455,38 +1402,38 @@ List_update_data_list:
 	ldr	r1, [r4, #2520]
 	add	r2, r2, r1
 	ldrh	r3, [r2, #4]
-	cbz	r3, .L173
+	cbz	r3, .L167
 	muls	r3, r0, r3
-.L170:
+.L164:
 	cmp	r6, r3
-	bcs	.L165
+	bcs	.L159
 	mov	r1, r5
-	ldr	r0, .L174+16
+	ldr	r0, .L168+16
 	bl	List_remove_node
 	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L171
+	cbnz	r3, .L165
 	mov	r2, #474
-	ldr	r1, .L174+4
-	ldr	r0, .L174+8
+	ldr	r1, .L168+4
+	ldr	r0, .L168+8
 	bl	sftl_printk
-.L171:
+.L165:
 	ldrh	r3, [r4, #2532]
 	mov	r0, r5
 	subs	r3, r3, #1
 	strh	r3, [r4, #2532]	@ movhi
 	bl	INSERT_DATA_LIST
-.L165:
+.L159:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L172:
+.L166:
 	mov	r6, #-1
-	b	.L167
-.L173:
+	b	.L161
+.L167:
 	mov	r3, #-1
-	b	.L170
-.L175:
+	b	.L164
+.L169:
 	.align	2
-.L174:
+.L168:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC8
@@ -1508,77 +1455,77 @@ select_l2p_ram_region:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r5, .L186
+	ldr	r5, .L180
 	movs	r0, #12
 	movw	r6, #65535
 	ldrh	r2, [r5, #342]
 	ldr	r3, [r5, #2544]
-.L177:
+.L171:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L179
+	bcc	.L173
 	mov	r4, r2
 	movs	r1, #0
 	mov	r7, #-2147483648
 	mov	ip, #12
-.L180:
+.L174:
 	uxth	r6, r1
 	cmp	r6, r2
-	bcc	.L182
+	bcc	.L176
 	cmp	r4, r2
-	bcc	.L178
+	bcc	.L172
 	ldrh	r7, [r5, #2548]
 	mov	r4, r2
 	movs	r1, #0
 	mov	r0, #-1
-.L183:
+.L177:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcc	.L185
+	bcc	.L179
 	cmp	r4, r2
-	bcc	.L178
+	bcc	.L172
 	movw	r2, #789
-	ldr	r1, .L186+4
-	ldr	r0, .L186+8
+	ldr	r1, .L180+4
+	ldr	r0, .L180+8
 	bl	sftl_printk
-	b	.L178
-.L179:
+	b	.L172
+.L173:
 	adds	r1, r1, #1
 	mla	r7, r0, r1, r3
 	ldrh	r7, [r7, #-12]
 	cmp	r7, r6
-	bne	.L177
-.L178:
+	bne	.L171
+.L172:
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L182:
+.L176:
 	mla	r0, ip, r1, r3
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L181
+	blt	.L175
 	cmp	r7, r0
 	itt	hi
 	movhi	r7, r0
 	movhi	r4, r6
-.L181:
+.L175:
 	adds	r1, r1, #1
-	b	.L180
-.L185:
+	b	.L174
+.L179:
 	ldr	r6, [r3, #4]
 	cmp	r0, r6
-	bls	.L184
+	bls	.L178
 	ldrh	ip, [r3]
 	cmp	ip, r7
 	itt	ne
 	movne	r0, r6
 	movne	r4, r5
-.L184:
+.L178:
 	adds	r1, r1, #1
 	adds	r3, r3, #12
-	b	.L183
-.L187:
+	b	.L177
+.L181:
 	.align	2
-.L186:
+.L180:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+73
 	.word	.LC8
@@ -1595,18 +1542,18 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L194
+	ldr	r1, .L188
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r3, r1
 	ldrh	r2, [r1, #2550]
 	cmp	r2, #4
-	bhi	.L189
-	cbnz	r0, .L189
+	bhi	.L183
+	cbnz	r0, .L183
 	adds	r2, r2, #1
 	strh	r2, [r1, #2550]	@ movhi
 	pop	{r4, r5, pc}
-.L189:
+.L183:
 	movs	r2, #0
 	ldrh	r1, [r3, #244]
 	strh	r2, [r3, #2550]	@ movhi
@@ -1614,21 +1561,21 @@ FtlUpdateVaildLpn:
 	str	r2, [r3, #2552]
 	ldr	r2, [r3, #76]
 	add	r1, r2, r1, lsl #1
-.L190:
+.L184:
 	cmp	r2, r1
-	bne	.L192
+	bne	.L186
 	pop	{r4, r5, pc}
-.L192:
+.L186:
 	ldrh	r4, [r2], #2
 	cmp	r4, r5
 	ittt	ne
 	ldrne	r0, [r3, #2552]
 	addne	r0, r0, r4
 	strne	r0, [r3, #2552]
-	b	.L190
-.L195:
+	b	.L184
+.L189:
 	.align	2
-.L194:
+.L188:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
@@ -1645,10 +1592,10 @@ ftl_set_blk_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	mov	r3, r0
-	cbz	r1, .L197
+	cbz	r1, .L191
 	b	ftl_set_blk_mode.part.6
-.L197:
-	ldr	r2, .L198
+.L191:
+	ldr	r2, .L192
 	lsrs	r0, r0, #5
 	and	r3, r3, #31
 	ldr	r1, [r2, #24]
@@ -1658,9 +1605,9 @@ ftl_set_blk_mode:
 	bic	r2, r2, r3
 	str	r2, [r1, r0, lsl #2]
 	bx	lr
-.L199:
+.L193:
 	.align	2
-.L198:
+.L192:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -1676,7 +1623,7 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L201
+	ldr	r3, .L195
 	lsrs	r2, r0, #5
 	and	r0, r0, #31
 	ldr	r3, [r3, #24]
@@ -1684,9 +1631,9 @@ ftl_get_blk_mode:
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-.L202:
+.L196:
 	.align	2
-.L201:
+.L195:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -1707,12 +1654,12 @@ ftl_sb_update_avl_pages:
 	strh	r3, [r0, #4]	@ movhi
 	add	r4, r0, r2, lsl #1
 	movw	r7, #65535
-	ldr	r3, .L210
+	ldr	r3, .L204
 	adds	r4, r4, #14
 	ldrh	r5, [r3, #236]
-.L204:
+.L198:
 	cmp	r2, r5
-	bcc	.L206
+	bcc	.L200
 	ldrh	r3, [r3, #306]
 	add	r4, r0, #16
 	movw	r6, #65535
@@ -1720,12 +1667,12 @@ ftl_sb_update_avl_pages:
 	subs	r1, r3, r1
 	movs	r3, #0
 	uxth	r1, r1
-.L207:
+.L201:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L209
+	bhi	.L203
 	pop	{r4, r5, r6, r7, pc}
-.L206:
+.L200:
 	ldrh	r6, [r4, #2]!
 	adds	r2, r2, #1
 	uxth	r2, r2
@@ -1734,8 +1681,8 @@ ftl_sb_update_avl_pages:
 	ldrhne	r6, [r0, #4]
 	addne	r6, r6, #1
 	strhne	r6, [r0, #4]	@ movhi
-	b	.L204
-.L209:
+	b	.L198
+.L203:
 	ldrh	r2, [r4], #2
 	adds	r3, r3, #1
 	cmp	r2, r6
@@ -1743,10 +1690,10 @@ ftl_sb_update_avl_pages:
 	ldrhne	r2, [r0, #4]
 	addne	r2, r2, r1
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L207
-.L211:
+	b	.L201
+.L205:
 	.align	2
-.L210:
+.L204:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -1764,24 +1711,24 @@ FtlSlcSuperblockCheck:
 	ldrh	r3, [r0, #4]
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	cbz	r3, .L212
+	cbz	r3, .L206
 	ldrh	r2, [r0]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L212
+	beq	.L206
 	ldrb	r2, [r0, #6]	@ zero_extendqisi2
 	movs	r5, #0
 	adds	r2, r2, #8
 	ldrh	r1, [r0, r2, lsl #1]
-	ldr	r2, .L218
+	ldr	r2, .L212
 	ldrh	r4, [r2, #236]
 	mov	r2, r3
-.L215:
+.L209:
 	cmp	r1, r2
-	beq	.L217
-.L212:
+	beq	.L211
+.L206:
 	pop	{r4, r5, pc}
-.L217:
+.L211:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -1795,10 +1742,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r1, [r0, r3, lsl #1]
-	b	.L215
-.L219:
+	b	.L209
+.L213:
 	.align	2
-.L218:
+.L212:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
@@ -1816,28 +1763,28 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r6, .L226
+	ldr	r6, .L220
 	ldrh	r2, [r0]
 	ldrh	r3, [r6, #244]
 	cmp	r2, r3
-	bcc	.L221
+	bcc	.L215
 	movw	r2, #2148
-	ldr	r1, .L226+4
-	ldr	r0, .L226+8
+	ldr	r1, .L220+4
+	ldr	r0, .L220+8
 	bl	sftl_printk
-.L221:
+.L215:
 	ldrh	r9, [r6, #236]
 	add	r7, r4, #16
-	ldr	r10, .L226+12
+	ldr	r10, .L220+12
 	movw	r8, #65535
 	movs	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L222:
+.L216:
 	uxth	r3, r5
 	ldrh	r1, [r4]
 	cmp	r9, r3
-	bhi	.L224
+	bhi	.L218
 	ldrh	r2, [r6, #306]
 	movs	r0, #0
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
@@ -1853,24 +1800,24 @@ make_superblock:
 	movhi	r3, #1
 	strbhi	r3, [r4, #9]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L224:
+.L218:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	strh	r8, [r7]	@ movhi
 	mov	fp, r0
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L223
+	cbnz	r0, .L217
 	strh	fp, [r7]	@ movhi
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	strb	r3, [r4, #7]
-.L223:
+.L217:
 	adds	r5, r5, #1
 	adds	r7, r7, #2
-	b	.L222
-.L227:
+	b	.L216
+.L221:
 	.align	2
-.L226:
+.L220:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC8
@@ -1891,44 +1838,44 @@ update_multiplier_value:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r6, .L234
+	ldr	r6, .L228
 	mov	r7, r0
 	mov	r4, r5
 	ldrh	r8, [r6, #236]
 	add	r10, r6, #264
 	ldrh	r9, [r6, #306]
-.L229:
+.L223:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L231
-	cbz	r4, .L233
+	bhi	.L225
+	cbz	r4, .L227
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L232:
+.L226:
 	ldr	r1, [r6, #2520]
 	movs	r3, #6
 	mla	r1, r3, r7, r1
 	strh	r0, [r1, #4]	@ movhi
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L231:
+.L225:
 	mov	r1, r7
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L230
+	cbnz	r0, .L224
 	add	r4, r4, r9
 	uxth	r4, r4
-.L230:
+.L224:
 	adds	r5, r5, #1
-	b	.L229
-.L233:
+	b	.L223
+.L227:
 	mov	r0, r4
-	b	.L232
-.L235:
+	b	.L226
+.L229:
 	.align	2
-.L234:
+.L228:
 	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
@@ -1944,22 +1891,22 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L239
+	ldr	r2, .L233
 	ldr	r0, [r2, #2536]
-	cbz	r0, .L237
+	cbz	r0, .L231
 	ldr	r3, [r2, #2520]
 	subs	r0, r0, r3
-	ldr	r3, .L239+4
+	ldr	r3, .L233+4
 	asrs	r0, r0, #1
 	muls	r0, r3, r0
 	ldr	r3, [r2, #2540]
 	uxth	r0, r0
 	ldrh	r0, [r3, r0, lsl #1]
-.L237:
+.L231:
 	bx	lr
-.L240:
+.L234:
 	.align	2
-.L239:
+.L233:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1975,11 +1922,11 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L249
+	ldr	r1, .L243
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	ldr	r3, [r1, #2536]
-	cbz	r3, .L247
+	cbz	r3, .L241
 	ldrh	r2, [r1, #228]
 	movs	r6, #6
 	ldr	r4, [r1, #2520]
@@ -1991,32 +1938,32 @@ GetFreeBlockMaxEraseCount:
 	cmp	r0, r2
 	it	gt
 	uxthgt	r0, r2
-	ldr	r2, .L249+4
+	ldr	r2, .L243+4
 	muls	r3, r2, r3
 	movs	r2, #0
 	uxth	r3, r3
-.L244:
+.L238:
 	uxth	r5, r2
 	cmp	r0, r5
-	bls	.L246
+	bls	.L240
 	mul	r5, r6, r3
 	adds	r2, r2, #1
 	ldrh	r5, [r4, r5]
 	cmp	r5, r7
-	bne	.L248
-.L246:
+	bne	.L242
+.L240:
 	ldr	r2, [r1, #2540]
 	ldrh	r0, [r2, r3, lsl #1]
 	pop	{r4, r5, r6, r7, pc}
-.L248:
+.L242:
 	mov	r3, r5
-	b	.L244
-.L247:
+	b	.L238
+.L241:
 	mov	r0, r3
 	pop	{r4, r5, r6, r7, pc}
-.L250:
+.L244:
 	.align	2
-.L249:
+.L243:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -2035,236 +1982,236 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r5, .L263
+	ldr	r5, .L257
 	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, .L263+4
+	ldr	r1, .L257+4
 	bl	strcpy
 	ldr	r3, [r5, #320]
 	movs	r1, #64
-	ldr	r2, .L263+8
+	ldr	r2, .L257+8
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r1, .L263+12
+	ldr	r1, .L257+12
 	mov	r0, r4
 	adds	r4, r4, #10
 	bl	strcpy
 	ldr	r3, [r5, #2556]
 	movs	r1, #64
-	ldr	r2, .L263+16
+	ldr	r2, .L257+16
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2552]
-	ldr	r2, .L263+20
+	ldr	r2, .L257+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2560]
-	ldr	r2, .L263+24
+	ldr	r2, .L257+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2564]
-	ldr	r2, .L263+28
+	ldr	r2, .L257+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2568]
-	ldr	r2, .L263+32
+	ldr	r2, .L257+32
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2572]
-	ldr	r2, .L263+36
+	ldr	r2, .L257+36
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2576]
-	ldr	r2, .L263+40
+	ldr	r2, .L257+40
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2580]
-	ldr	r2, .L263+44
+	ldr	r2, .L257+44
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2584]
 	add	r4, r4, r0
-	ldr	r2, .L263+48
+	ldr	r2, .L257+48
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	ldr	r2, .L263+52
+	ldr	r2, .L257+52
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2592]
-	ldr	r2, .L263+56
+	ldr	r2, .L257+56
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2596]
-	ldr	r2, .L263+60
+	ldr	r2, .L257+60
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #362]
-	ldr	r2, .L263+64
+	ldr	r2, .L257+64
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #228]
-	ldr	r2, .L263+68
+	ldr	r2, .L257+68
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2600]
-	ldr	r2, .L263+72
+	ldr	r2, .L257+72
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2604]
-	ldr	r2, .L263+76
+	ldr	r2, .L257+76
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2608]
-	ldr	r2, .L263+80
+	ldr	r2, .L257+80
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2612]
-	ldr	r2, .L263+84
+	ldr	r2, .L257+84
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2616]
-	ldr	r2, .L263+88
+	ldr	r2, .L257+88
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2620]
-	ldr	r2, .L263+92
+	ldr	r2, .L257+92
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2502]
-	ldr	r2, .L263+96
+	ldr	r2, .L257+96
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2500]
-	ldr	r2, .L263+100
+	ldr	r2, .L257+100
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #344]
-	ldr	r2, .L263+104
+	ldr	r2, .L257+104
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #336]
-	ldr	r2, .L263+108
+	ldr	r2, .L257+108
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #232]
-	ldr	r2, .L263+112
+	ldr	r2, .L257+112
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #422]
-	ldr	r2, .L263+116
+	ldr	r2, .L257+116
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #244]
-	ldr	r2, .L263+120
+	ldr	r2, .L257+120
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2624]
-	ldr	r2, .L263+124
+	ldr	r2, .L257+124
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #248]
-	ldr	r2, .L263+128
+	ldr	r2, .L257+128
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2628]
-	ldr	r2, .L263+132
+	ldr	r2, .L257+132
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #356]
-	ldr	r2, .L263+136
+	ldr	r2, .L257+136
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #30]
-	ldr	r2, .L263+140
+	ldr	r2, .L257+140
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #34]	@ zero_extendqisi2
-	ldr	r2, .L263+144
+	ldr	r2, .L257+144
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #28]
-	ldr	r2, .L263+148
+	ldr	r2, .L257+148
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #36]	@ zero_extendqisi2
-	ldr	r2, .L263+152
+	ldr	r2, .L257+152
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #32]
-	ldr	r2, .L263+156
+	ldr	r2, .L257+156
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2274,35 +2221,35 @@ FtlPrintInfo2buf:
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L263+160
+	ldr	r2, .L257+160
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #82]
-	ldr	r2, .L263+164
+	ldr	r2, .L257+164
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #86]	@ zero_extendqisi2
-	ldr	r2, .L263+168
+	ldr	r2, .L257+168
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #80]
-	ldr	r2, .L263+172
+	ldr	r2, .L257+172
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #88]	@ zero_extendqisi2
-	ldr	r2, .L263+176
+	ldr	r2, .L257+176
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #84]
-	ldr	r2, .L263+180
+	ldr	r2, .L257+180
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2312,68 +2259,68 @@ FtlPrintInfo2buf:
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L263+184
+	ldr	r2, .L257+184
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #130]
-	ldr	r2, .L263+188
+	ldr	r2, .L257+188
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #134]	@ zero_extendqisi2
-	ldr	r2, .L263+192
+	ldr	r2, .L257+192
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #128]
-	ldr	r2, .L263+196
+	ldr	r2, .L257+196
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #136]	@ zero_extendqisi2
-	ldr	r2, .L263+200
+	ldr	r2, .L257+200
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #132]
-	ldr	r2, .L263+204
+	ldr	r2, .L257+204
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #178]
-	ldr	r2, .L263+208
+	ldr	r2, .L257+208
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #182]	@ zero_extendqisi2
-	ldr	r2, .L263+212
+	ldr	r2, .L257+212
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #176]
-	ldr	r2, .L263+216
+	ldr	r2, .L257+216
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #184]	@ zero_extendqisi2
-	ldr	r2, .L263+220
+	ldr	r2, .L257+220
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #180]
-	b	.L264
-.L265:
+	b	.L258
+.L259:
 	.align	2
-.L263:
+.L257:
 	.word	.LANCHOR0
 	.word	.LC9
 	.word	.LC10
@@ -2430,14 +2377,14 @@ FtlPrintInfo2buf:
 	.word	.LC61
 	.word	.LC62
 	.word	.LC63
-.L264:
-	ldr	r2, .L266
+.L258:
+	ldr	r2, .L260
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r2, .L266+4
+	ldr	r2, .L260+4
 	movs	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
@@ -2447,43 +2394,43 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2716]
-	ldr	r2, .L266+8
+	ldr	r2, .L260+8
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2740]
-	ldr	r2, .L266+12
+	ldr	r2, .L260+12
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3156]
-	ldr	r2, .L266+16
+	ldr	r2, .L260+16
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3158]
-	ldr	r2, .L266+20
+	ldr	r2, .L260+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #3160]
-	ldr	r2, .L266+24
+	ldr	r2, .L260+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3164]
-	ldr	r2, .L266+28
+	ldr	r2, .L260+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r2, .L266+32
+	ldr	r2, .L260+32
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
@@ -2491,44 +2438,44 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r0, [r5, #228]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r2, .L266+36
+	ldr	r2, .L260+36
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, .L266+40
+	ldr	r3, .L260+40
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L252
-.L257:
+	beq	.L246
+.L251:
 	subs	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L252:
+.L246:
 	ldrh	r3, [r5, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L254
+	beq	.L248
 	ldr	r2, [r5, #76]
 	mov	r0, r4
 	movs	r1, #64
 	ldrh	r3, [r2, r3, lsl #1]
-	ldr	r2, .L266+44
+	ldr	r2, .L260+44
 	bl	snprintf
 	add	r4, r4, r0
-.L254:
+.L248:
 	movs	r0, #0
-	ldr	r9, .L266+52
+	ldr	r9, .L260+52
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	movs	r7, #0
 	movw	fp, #65535
 	mov	r10, #6
-.L256:
+.L250:
 	cmp	r0, fp
-	beq	.L255
+	beq	.L249
 	ldr	r3, [r5, #2540]
 	mul	r8, r10, r0
 	mov	r2, r9
@@ -2550,22 +2497,22 @@ FtlPrintInfo2buf:
 	cmp	r7, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
-	bne	.L256
-.L255:
+	bne	.L250
+.L249:
 	ldr	r2, [r5, #2520]
 	movs	r7, #0
 	ldr	r3, [r5, #2536]
 	movw	r9, #65535
-	ldr	fp, .L266+56
+	ldr	fp, .L260+56
 	mov	r10, #6
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L266+48
+	ldr	r3, .L260+48
 	muls	r3, r2, r3
 	uxth	r3, r3
-.L258:
+.L252:
 	cmp	r3, r9
-	beq	.L257
+	beq	.L251
 	ldr	r2, [r5, #2540]
 	mul	r8, r10, r3
 	mov	r0, r4
@@ -2583,13 +2530,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L257
+	beq	.L251
 	ldr	r3, [r5, #2520]
 	ldrh	r3, [r3, r8]
-	b	.L258
-.L267:
+	b	.L252
+.L261:
 	.align	2
-.L266:
+.L260:
 	.word	.LC64
 	.word	.LC65
 	.word	.LC66
@@ -2622,10 +2569,10 @@ rknand_proc_ftlread:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r1
-	blt	.L270
-	ldr	r3, .L271
+	blt	.L264
+	ldr	r3, .L265
 	movs	r1, #64
-	ldr	r2, .L271+4
+	ldr	r2, .L265+4
 	mov	r0, r5
 	bl	snprintf
 	adds	r4, r5, r0
@@ -2634,12 +2581,12 @@ rknand_proc_ftlread:
 	add	r0, r0, r4
 	subs	r0, r0, r5
 	pop	{r3, r4, r5, pc}
-.L270:
+.L264:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L272:
+.L266:
 	.align	2
-.L271:
+.L265:
 	.word	.LC0
 	.word	.LC77
 	.fnend
@@ -2659,18 +2606,18 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L297
+	ldr	r4, .L291
 	ldr	r2, [r4, #2608]
 	ldr	r3, [r4, #2620]
 	cmp	r2, r3
-	bcs	.L274
+	bcs	.L268
 	ldrh	r1, [r4, #244]
 	movs	r3, #0
 	ldr	r0, [r4, #2540]
 	str	r3, [r4, #2600]
-.L275:
+.L269:
 	cmp	r3, r1
-	bcc	.L276
+	bcc	.L270
 	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__aeabi_uidiv
@@ -2680,48 +2627,48 @@ GetSwlReplaceBlock:
 	subs	r0, r5, r0
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2600]
-.L277:
+.L271:
 	ldr	r6, [r4, #2620]
 	ldr	r7, [r4, #2608]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L282
+	bls	.L276
 	ldr	r2, [r4, #2616]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L282
-.L284:
+	bls	.L276
+.L278:
 	movw	r5, #65535
-.L283:
+.L277:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L276:
+.L270:
 	ldrh	r2, [r0, r3, lsl #1]
 	adds	r3, r3, #1
 	ldr	r5, [r4, #2600]
 	add	r2, r2, r5
 	str	r2, [r4, #2600]
-	b	.L275
-.L274:
+	b	.L269
+.L268:
 	ldr	r3, [r4, #2616]
 	cmp	r2, r3
-	bls	.L277
+	bls	.L271
 	adds	r3, r3, #1
 	str	r3, [r4, #2616]
 	movs	r3, #0
-.L279:
+.L273:
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	bcs	.L277
+	bcs	.L271
 	ldr	r1, [r4, #2540]
 	ldrh	r2, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	strh	r2, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
-	b	.L279
-.L282:
+	b	.L273
+.L276:
 	ldrh	r0, [r4, #228]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
@@ -2729,10 +2676,10 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L284
+	bcc	.L278
 	ldr	r3, [r4, #2524]
 	cmp	r3, #0
-	beq	.L284
+	beq	.L278
 	ldrh	r2, [r4, #244]
 	movw	r1, #65535
 	ldr	lr, [r4, #2520]
@@ -2742,42 +2689,42 @@ GetSwlReplaceBlock:
 	str	r2, [sp, #20]
 	mov	fp, #6
 	mov	r2, r1
-.L285:
+.L279:
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L288
+	bne	.L282
 	mov	r5, r2
-.L287:
+.L281:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L284
+	beq	.L278
 	ldrh	r10, [r8, r5, lsl #1]
 	lsl	fp, r5, #1
 	cmp	r6, r10
-	bcs	.L289
+	bcs	.L283
 	bl	GetFreeBlockMinEraseCount
 	cmp	r6, r0
 	it	cc
 	strcc	r1, [r4, #2620]
-.L289:
+.L283:
 	cmp	r7, r10
-	bls	.L284
+	bls	.L278
 	add	r3, r10, #128
 	cmp	r9, r3
-	ble	.L284
+	ble	.L278
 	add	r3, r10, #256
 	cmp	r7, r3
-	bhi	.L290
+	bhi	.L284
 	ldr	r3, [r4, #2616]
 	add	r10, r10, #768
 	cmp	r10, r3
-	bcs	.L284
-.L290:
+	bcs	.L278
+.L284:
 	str	r9, [sp, #8]
 	mov	r2, r7
 	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldr	r0, .L297+4
+	ldr	r0, .L291+4
 	str	r3, [sp, #4]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, fp]
@@ -2786,33 +2733,33 @@ GetSwlReplaceBlock:
 	bl	sftl_printk
 	movs	r3, #1
 	str	r3, [r4, #3168]
-	b	.L283
-.L288:
+	b	.L277
+.L282:
 	adds	r0, r0, #1
 	ldr	r5, [sp, #20]
 	uxth	r0, r0
 	cmp	r0, r5
-	bhi	.L284
+	bhi	.L278
 	ldrh	r5, [r3, #4]
-	cbz	r5, .L286
-	ldr	r5, .L297+8
+	cbz	r5, .L280
+	ldr	r5, .L291+8
 	sub	r3, r3, lr
 	asrs	r3, r3, #1
 	muls	r3, r5, r3
 	uxth	r5, r3
 	ldrh	r3, [r8, r5, lsl #1]
 	cmp	r6, r3
-	bcs	.L287
+	bcs	.L281
 	cmp	r1, r3
 	itt	hi
 	movhi	r1, r3
 	movhi	r2, r5
-.L286:
+.L280:
 	mla	r3, fp, ip, lr
-	b	.L285
-.L298:
+	b	.L279
+.L292:
 	.align	2
-.L297:
+.L291:
 	.word	.LANCHOR0
 	.word	.LC78
 	.word	-1431655765
@@ -2833,18 +2780,18 @@ free_data_superblock:
 	push	{r3, lr}
 	.save {r3, lr}
 	cmp	r0, r2
-	beq	.L300
-	ldr	r2, .L301
+	beq	.L294
+	ldr	r2, .L295
 	movs	r1, #0
 	ldr	r2, [r2, #76]
 	strh	r1, [r2, r0, lsl #1]	@ movhi
 	bl	INSERT_FREE_LIST
-.L300:
+.L294:
 	movs	r0, #0
 	pop	{r3, pc}
-.L302:
+.L296:
 	.align	2
-.L301:
+.L295:
 	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -2865,29 +2812,29 @@ get_new_active_ppa:
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L304
+	bne	.L298
 	movw	r2, #2781
-	ldr	r1, .L318
-	ldr	r0, .L318+4
+	ldr	r1, .L312
+	ldr	r0, .L312+4
 	bl	sftl_printk
-.L304:
-	ldr	r6, .L318+8
+.L298:
+	ldr	r6, .L312+8
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r6, #306]
 	cmp	r2, r3
-	bne	.L305
+	bne	.L299
 	movw	r2, #2782
-	ldr	r1, .L318
-	ldr	r0, .L318+4
+	ldr	r1, .L312
+	ldr	r0, .L312+4
 	bl	sftl_printk
-.L305:
+.L299:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L306
+	cbnz	r3, .L300
 	movw	r2, #2783
-	ldr	r1, .L318
-	ldr	r0, .L318+4
+	ldr	r1, .L312
+	ldr	r0, .L312+4
 	bl	sftl_printk
-.L306:
+.L300:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	movs	r3, #0
 	ldrh	r1, [r6, #236]
@@ -2896,13 +2843,13 @@ get_new_active_ppa:
 	adds	r2, r2, #8
 	ldrh	r0, [r4, r2, lsl #1]
 	mov	r2, r3
-.L307:
+.L301:
 	cmp	r0, r5
-	beq	.L309
+	beq	.L303
 	ldrh	r5, [r4, #2]
 	ldrh	r6, [r6, #306]
 	cmp	r5, r6
-	bcs	.L313
+	bcs	.L307
 	ldrh	r2, [r4, #4]
 	orr	r5, r5, r0, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
@@ -2910,7 +2857,7 @@ get_new_active_ppa:
 	subs	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #4]	@ movhi
-.L312:
+.L306:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2922,20 +2869,20 @@ get_new_active_ppa:
 	add	r7, r3, #8
 	ldrh	r7, [r4, r7, lsl #1]
 	cmp	r7, r0
-	beq	.L312
+	beq	.L306
 	strb	r3, [r4, #6]
 	ldrh	r3, [r4, #2]
 	cmp	r3, r6
-	bne	.L303
-	cbz	r2, .L303
+	bne	.L297
+	cbz	r2, .L297
 	movw	r2, #2806
-	ldr	r1, .L318
-	ldr	r0, .L318+4
+	ldr	r1, .L312
+	ldr	r0, .L312+4
 	bl	sftl_printk
-.L303:
+.L297:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, pc}
-.L309:
+.L303:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -2949,13 +2896,13 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
-	b	.L307
-.L313:
+	b	.L301
+.L307:
 	movw	r5, #65535
-	b	.L303
-.L319:
+	b	.L297
+.L313:
 	.align	2
-.L318:
+.L312:
 	.word	.LANCHOR1+111
 	.word	.LC8
 	.word	.LANCHOR0
@@ -2972,7 +2919,7 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L329
+	ldr	r3, .L323
 	mov	ip, #20
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -2981,21 +2928,21 @@ FtlGcBufInit:
 	movs	r2, #0
 	mov	r7, r3
 	str	r2, [r3, #3172]
-.L321:
+.L315:
 	ldrh	r1, [r3, #236]
 	uxth	r0, r2
 	adds	r4, r2, #1
 	cmp	r0, r1
-	bcc	.L324
-	ldr	r7, .L329
+	bcc	.L318
+	ldr	r7, .L323
 	mov	ip, #12
 	movs	r6, #0
-.L325:
+.L319:
 	ldr	r2, [r3, #3192]
 	cmp	r1, r2
-	bcc	.L328
+	bcc	.L322
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L324:
+.L318:
 	uxth	r2, r2
 	ldr	r8, [r3, #3176]
 	mul	lr, r9, r2
@@ -3026,8 +2973,8 @@ FtlGcBufInit:
 	ldr	r1, [r8, #4]
 	str	r1, [r2, #12]
 	mov	r2, r4
-	b	.L321
-.L328:
+	b	.L315
+.L322:
 	mul	r0, ip, r1
 	ldr	r4, [r3, #3176]
 	ldr	r5, [r3, #3180]
@@ -3052,10 +2999,10 @@ FtlGcBufInit:
 	add	r2, r2, r4
 	uxth	r1, r1
 	str	r2, [r0, #4]
-	b	.L325
-.L330:
+	b	.L319
+.L324:
 	.align	2
-.L329:
+.L323:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
@@ -3070,7 +3017,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L338
+	ldr	r3, .L332
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
@@ -3079,32 +3026,32 @@ FtlGcBufFree:
 	mov	r8, r5
 	ldr	ip, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L332:
+.L326:
 	uxth	r3, r5
 	cmp	r1, r3
-	bls	.L331
+	bls	.L325
 	mla	r4, r10, r3, r0
 	movs	r2, #0
-.L333:
+.L327:
 	uxth	r3, r2
 	cmp	ip, r3
-	bls	.L334
+	bls	.L328
 	mul	r3, lr, r3
 	ldr	r7, [r4, #8]
 	adds	r2, r2, #1
 	add	r9, r6, r3
 	ldr	r3, [r6, r3]
 	cmp	r3, r7
-	bne	.L333
+	bne	.L327
 	str	r8, [r9, #8]
-.L334:
+.L328:
 	adds	r5, r5, #1
-	b	.L332
-.L331:
+	b	.L326
+.L325:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L339:
+.L333:
 	.align	2
-.L338:
+.L332:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -3119,7 +3066,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L347
+	ldr	r3, .L341
 	mov	ip, #12
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -3128,34 +3075,34 @@ FtlGcBufAlloc:
 	mov	r8, #20
 	ldr	r5, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L341:
+.L335:
 	uxth	r2, r4
 	cmp	r1, r2
-	bhi	.L345
+	bhi	.L339
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L345:
+.L339:
 	mov	r9, #0
-.L342:
+.L336:
 	uxth	r3, r9
 	cmp	r5, r3
-	bls	.L343
+	bls	.L337
 	mla	r3, ip, r3, r6
 	add	r9, r9, #1
 	ldr	r7, [r3, #8]
 	cmp	r7, #0
-	bne	.L342
+	bne	.L336
 	mla	r2, r8, r2, r0
 	ldr	r7, [r3]
 	str	lr, [r3, #8]
 	str	r7, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L343:
+.L337:
 	adds	r4, r4, #1
-	b	.L341
-.L348:
+	b	.L335
+.L342:
 	.align	2
-.L347:
+.L341:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -3171,24 +3118,24 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L354
+	ldr	r2, .L348
 	ldr	r3, [r2, #3196]
 	ldrh	r2, [r2, #3200]
 	add	r2, r3, r2, lsl #1
-.L350:
+.L344:
 	cmp	r3, r2
-	bne	.L352
+	bne	.L346
 	movs	r0, #0
 	bx	lr
-.L352:
+.L346:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L350
+	bne	.L344
 	movs	r0, #1
 	bx	lr
-.L355:
+.L349:
 	.align	2
-.L354:
+.L348:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -3211,26 +3158,26 @@ FtlGcUpdatePage:
 	mov	r7, r2
 	movs	r4, #0
 	bl	P2V_block_in_plane
-	ldr	r3, .L360
+	ldr	r3, .L354
 	ldrh	r1, [r3, #3200]
 	ldr	r2, [r3, #3196]
-.L357:
+.L351:
 	uxth	ip, r4
 	cmp	ip, r1
-	bcc	.L359
-	bne	.L358
+	bcc	.L353
+	bne	.L352
 	strh	r0, [r2, ip, lsl #1]	@ movhi
 	ldrh	r0, [r3, #3200]
 	adds	r0, r0, #1
 	strh	r0, [r3, #3200]	@ movhi
-	b	.L358
-.L359:
+	b	.L352
+.L353:
 	adds	r4, r4, #1
 	add	ip, r2, r4, lsl #1
 	ldrh	ip, [ip, #-2]
 	cmp	ip, r0
-	bne	.L357
-.L358:
+	bne	.L351
+.L352:
 	ldrh	r2, [r3, #3208]
 	movs	r0, #12
 	muls	r0, r2, r0
@@ -3243,9 +3190,9 @@ FtlGcUpdatePage:
 	adds	r2, r2, #1
 	strh	r2, [r3, #3208]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
-.L361:
+.L355:
 	.align	2
-.L360:
+.L354:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -3264,30 +3211,30 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r1, r0
 	mov	r4, r0
-	ldr	r0, .L365
+	ldr	r0, .L359
 	bl	sftl_printk
-	ldr	r3, .L365+4
+	ldr	r3, .L359+4
 	ldrh	r0, [r3, #226]
 	cmp	r4, r0
-	beq	.L363
+	beq	.L357
 	ldrh	r1, [r3, #224]
 	cmp	r4, r1
-	beq	.L363
+	beq	.L357
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L364
+	bne	.L358
 	strh	r4, [r3, #226]	@ movhi
-.L363:
+.L357:
 	movs	r0, #0
 	pop	{r4, pc}
-.L364:
+.L358:
 	cmp	r1, r2
 	it	eq
 	strheq	r4, [r3, #224]	@ movhi
-	b	.L363
-.L366:
+	b	.L357
+.L360:
 	.align	2
-.L365:
+.L359:
 	.word	.LC79
 	.word	.LANCHOR0
 	.fnend
@@ -3306,41 +3253,41 @@ FtlGcMarkBadPhyBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
-	ldr	r4, .L371
+	ldr	r4, .L365
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r6, r0
 	ldrh	r1, [r4, #3210]
-	ldr	r0, .L371+4
+	ldr	r0, .L365+4
 	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, #3210]
 	movs	r2, #0
 	addw	r0, r4, #3212
-.L368:
+.L362:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L370
+	bhi	.L364
 	cmp	r3, #15
 	itttt	ls
 	addls	r2, r3, #1
 	strhls	r2, [r4, #3210]	@ movhi
 	addls	r4, r4, r3, lsl #1
 	strhls	r5, [r4, #3212]	@ movhi
-	b	.L369
-.L370:
+	b	.L363
+.L364:
 	adds	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L368
-.L369:
+	bne	.L362
+.L363:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L372:
+.L366:
 	.align	2
-.L371:
+.L365:
 	.word	.LANCHOR0
 	.word	.LC80
 	.fnend
@@ -3358,13 +3305,13 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L379
+	ldr	r4, .L373
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L374
+	cbz	r3, .L368
 	ldrh	r1, [r4, #226]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L374
+	bne	.L368
 	ldrh	r2, [r4, #3246]
 	cmp	r2, r3
 	itt	cs
@@ -3378,12 +3325,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, #3246]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3246]	@ movhi
-.L374:
+.L368:
 	movs	r0, #0
 	pop	{r4, pc}
-.L380:
+.L374:
 	.align	2
-.L379:
+.L373:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3399,12 +3346,12 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r1, .L382
+	ldr	r1, .L376
 	b	__kmalloc
-.L383:
+.L377:
 	.align	2
-.L382:
-	.word	37748929
+.L376:
+	.word	6291649
 	.fnend
 	.size	ftl_malloc, .-ftl_malloc
 	.align	1
@@ -3436,54 +3383,54 @@ rknand_print_hex:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	fp, .L394+16
+	ldr	fp, .L388+16
 	mov	r10, r0
 	mov	r7, r1
 	mov	r8, r2
 	mov	r9, r3
 	mov	r5, r6
 	mov	r4, r6
-.L386:
+.L380:
 	cmp	r4, r9
-	bcc	.L392
-	ldr	r0, .L394
+	bcc	.L386
+	ldr	r0, .L388
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	sftl_printk
-.L392:
-	cbnz	r5, .L387
+.L386:
+	cbnz	r5, .L381
 	mov	r3, r6
 	mov	r2, r7
 	mov	r1, r10
-	ldr	r0, .L394+4
+	ldr	r0, .L388+4
 	bl	sftl_printk
-.L387:
+.L381:
 	cmp	r8, #4
-	bne	.L388
+	bne	.L382
 	ldr	r1, [r7, r4, lsl #2]
-	ldr	r0, .L394+8
-.L393:
+	ldr	r0, .L388+8
+.L387:
 	adds	r5, r5, #1
 	bl	sftl_printk
 	cmp	r5, #15
-	bls	.L391
+	bls	.L385
 	movs	r5, #0
-	ldr	r0, .L394
+	ldr	r0, .L388
 	bl	sftl_printk
-.L391:
+.L385:
 	adds	r4, r4, #1
 	add	r6, r6, r8
-	b	.L386
-.L388:
+	b	.L380
+.L382:
 	cmp	r8, #2
 	ittee	eq
 	ldrheq	r1, [r7, r4, lsl #1]
 	moveq	r0, fp
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
-	ldrne	r0, .L394+12
-	b	.L393
-.L395:
+	ldrne	r0, .L388+12
+	b	.L387
+.L389:
 	.align	2
-.L394:
+.L388:
 	.word	.LC85
 	.word	.LC81
 	.word	.LC82
@@ -3500,41 +3447,45 @@ rknand_print_hex:
 	.type	FlashEraseBlocks, %function
 FlashEraseBlocks:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r5, .L412
+	ldr	r5, .L407
+	.pad #28
+	sub	sp, sp, #28
 	mov	r4, r0
 	mov	fp, r0
+	ldr	r2, .L407+4
 	movs	r7, #0
-	mov	r10, #-1
-	.pad #20
-	sub	sp, sp, #20
 	ldrh	r9, [r5, #12]
+	mov	r10, #-1
+	ldr	r3, [r2]
+	str	r2, [sp, #4]
+	str	r3, [sp, #20]
 	lsl	r3, r9, #3
-	str	r3, [sp, #4]
-.L397:
+	str	r3, [sp]
+.L391:
 	cmp	r7, r8
-	beq	.L401
-	add	r2, sp, #8
-	add	r1, sp, #12
+	beq	.L395
+	add	r2, sp, #12
+	add	r1, sp, #16
 	mov	r0, fp
 	bl	l2p_addr_tran
-	ldr	r6, [sp, #8]
-	cbnz	r6, .L398
-	ldr	r2, [sp, #12]
-	ldr	r3, [sp, #4]
+	ldr	r6, [sp, #12]
+	cbnz	r6, .L392
+	ldr	r2, [sp, #16]
+	ldr	r3, [sp]
 	cmp	r3, r2
-	bls	.L398
-	ldr	r5, .L412+4
-	ldr	r7, .L412+8
-	ldr	r9, .L412+16
-	b	.L411
-.L400:
+	bls	.L392
+	ldr	r5, .L407+8
+	ldr	r7, .L407+12
+	ldr	r9, .L407+20
+	b	.L406
+.L394:
 	mov	r3, #-1
-	ldr	r2, [sp, #12]
+	ldr	r2, [sp, #16]
 	str	r3, [r4, #-20]
 	mov	r1, r5
 	mov	r0, r7
@@ -3548,22 +3499,25 @@ FlashEraseBlocks:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L412+12
+	ldr	r0, .L407+16
 	bl	rknand_print_hex
-.L411:
+.L406:
 	cmp	r6, r8
 	add	r4, r4, #20
-	bne	.L400
+	bne	.L394
 	bl	dump_stack
-.L401:
+.L395:
+	ldr	r3, [sp, #4]
 	movs	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L398:
+	ldr	r2, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L402
+	bl	__stack_chk_fail
+.L392:
 	ldr	r2, [r5, #3252]
 	uxtb	r0, r6
-	ldr	r1, [sp, #12]
+	ldr	r1, [sp, #16]
 	blx	r2
 	cmp	r0, #0
 	mov	r2, r0
@@ -3572,22 +3526,27 @@ FlashEraseBlocks:
 	str	r2, [fp]
 	ldrh	r2, [r5, #14]
 	cmp	r2, #4
-	bne	.L405
-	ldr	r1, [sp, #12]
+	bne	.L399
+	ldr	r1, [sp, #16]
 	ldr	r2, [r5, #3252]
-	ldrb	r0, [sp, #8]	@ zero_extendqisi2
+	ldrb	r0, [sp, #12]	@ zero_extendqisi2
 	add	r1, r1, r9
 	blx	r2
-	cbz	r0, .L405
+	cbz	r0, .L399
 	str	r10, [fp]
-.L405:
+.L399:
 	adds	r7, r7, #1
 	add	fp, fp, #20
-	b	.L397
-.L413:
+	b	.L391
+.L402:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L408:
 	.align	2
-.L412:
+.L407:
 	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.word	.LANCHOR1+130
 	.word	.LC86
 	.word	.LC88
@@ -3612,12 +3571,12 @@ FtlFreeSysBlkQueueIn:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	cmp	r3, r2
-	bhi	.L414
-	ldr	r4, .L423
+	bhi	.L409
+	ldr	r4, .L418
 	ldrh	r3, [r4, #422]
 	cmp	r3, #1024
-	beq	.L414
-	cbz	r1, .L416
+	beq	.L409
+	cbz	r1, .L411
 	bl	P2V_block_in_plane
 	mov	r6, r0
 	ldr	r0, [r4, #3272]
@@ -3633,7 +3592,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L416:
+.L411:
 	ldrh	r3, [r4, #422]
 	adds	r3, r3, #1
 	strh	r3, [r4, #422]	@ movhi
@@ -3643,11 +3602,11 @@ FtlFreeSysBlkQueueIn:
 	ubfx	r3, r3, #0, #10
 	strh	r5, [r2, #424]	@ movhi
 	strh	r3, [r4, #420]	@ movhi
-.L414:
+.L409:
 	pop	{r4, r5, r6, pc}
-.L424:
+.L419:
 	.align	2
-.L423:
+.L418:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
@@ -3664,9 +3623,9 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r4, .L430
+	ldr	r4, .L425
 	ldrh	r2, [r4, #422]
-	cbz	r2, .L429
+	cbz	r2, .L424
 	ldrh	r3, [r4, #418]
 	subs	r2, r2, #1
 	ldr	r0, [r4, #3272]
@@ -3684,27 +3643,27 @@ FtlFreeSysBlkQueueOut:
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L426:
+.L421:
 	subs	r3, r5, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L427
+	bls	.L422
 	ldrh	r2, [r4, #422]
 	mov	r1, r5
-	ldr	r0, .L430+4
+	ldr	r0, .L425+4
 	bl	sftl_printk
-.L428:
-	b	.L428
-.L429:
+.L423:
+	b	.L423
+.L424:
 	movw	r5, #65535
-	b	.L426
-.L427:
+	b	.L421
+.L422:
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L431:
+.L426:
 	.align	2
-.L430:
+.L425:
 	.word	.LANCHOR0
 	.word	.LC89
 	.fnend
@@ -3726,16 +3685,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	movs	r3, #0
 	ldr	r2, [r0, #12]
-.L433:
+.L428:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L436
+	bcs	.L431
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
 	adds	r2, r2, #2
 	cmp	r6, #0
-	bne	.L433
+	bne	.L428
 	bl	FtlFreeSysBlkQueueOut
 	subs	r3, r0, #1
 	movw	r2, #65533
@@ -3743,14 +3702,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L434
-	ldr	r3, .L440
-	ldr	r0, .L440+4
+	bls	.L429
+	ldr	r3, .L435
+	ldr	r0, .L435+4
 	ldrh	r2, [r3, #422]
 	bl	sftl_printk
-.L435:
-	b	.L435
-.L434:
+.L430:
+	b	.L430
+.L429:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -3759,20 +3718,20 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L436:
+.L431:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L438
+	bhi	.L433
 	movw	r2, #578
-	ldr	r1, .L440+8
-	ldr	r0, .L440+12
+	ldr	r1, .L435+8
+	ldr	r0, .L435+12
 	bl	sftl_printk
-.L438:
+.L433:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L441:
+.L436:
 	.align	2
-.L440:
+.L435:
 	.word	.LANCHOR0
 	.word	.LC90
 	.word	.LANCHOR1+147
@@ -3780,59 +3739,6 @@ ftl_map_blk_alloc_new_blk:
 	.fnend
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	1
-	.global	FlashGetBadBlockList
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r2, #256
-	ldr	r5, .L449
-	mov	r4, r0
-	mov	r6, r1
-	movs	r1, #255
-	bl	memset
-	ldr	r3, [r5, #3248]
-	mov	r1, r6
-	mov	r0, r4
-	blx	r3
-	uxth	r0, r0
-	cmp	r0, #50
-	bls	.L443
-	mov	r2, #256
-	movs	r1, #255
-	mov	r0, r4
-	bl	memset
-	movs	r0, #0
-.L443:
-	ldrh	r3, [r5, #14]
-	cmp	r3, #4
-	bne	.L448
-	add	r1, r4, r0, lsl #1
-	mov	r3, r4
-.L445:
-	cmp	r3, r1
-	bne	.L446
-.L448:
-	pop	{r4, r5, r6, pc}
-.L446:
-	ldrh	r2, [r3]
-	lsrs	r2, r2, #1
-	strh	r2, [r3], #2	@ movhi
-	b	.L445
-.L450:
-	.align	2
-.L449:
-	.word	.LANCHOR0
-	.fnend
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
-	.align	1
 	.global	ftl_memset
 	.syntax unified
 	.thumb
@@ -3843,14 +3749,8 @@ ftl_memset:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	mov	r4, r0
-	cbz	r2, .L452
-	bl	memset
-.L452:
-	mov	r0, r4
-	pop	{r4, pc}
+	@ link register save eliminated.
+	b	memset
 	.fnend
 	.size	ftl_memset, .-ftl_memset
 	.align	1
@@ -3867,7 +3767,7 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r3, #65535
-	ldr	r4, .L557
+	ldr	r4, .L539
 	movs	r5, #0
 	movs	r7, #12
 	movs	r6, #20
@@ -3984,7 +3884,7 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	r3, [r4, #3344]
 	str	r0, [r4, #3348]
-	ldr	r0, .L557+4
+	ldr	r0, .L539+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
@@ -4071,143 +3971,143 @@ FtlMemInit:
 	str	r0, [r4, #384]
 	lsls	r2, r2, #2
 	mov	r1, r2
-.L457:
+.L439:
 	cmp	r3, r6
-	bcc	.L458
-	ldr	r2, .L557+8
+	bcc	.L440
+	ldr	r2, .L539+8
 	movs	r1, #0
 	add	r3, r2, r3, lsl #2
 	adds	r2, r2, #56
 	adds	r3, r3, #24
-.L459:
+.L441:
 	cmp	r2, r3
-	bne	.L460
+	bne	.L442
 	ldr	r3, [r4, #3360]
-	cbnz	r3, .L461
-.L463:
-	ldr	r1, .L557+12
-	ldr	r0, .L557+16
+	cbnz	r3, .L443
+.L445:
+	ldr	r1, .L539+12
+	ldr	r0, .L539+16
 	bl	sftl_printk
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L458:
+.L440:
 	ldr	r0, [r4, #384]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r5, #4]!
-	b	.L457
-.L460:
+	b	.L439
+.L442:
 	str	r1, [r3, #4]!
-	b	.L459
-.L558:
+	b	.L441
+.L540:
 	.align	2
-.L557:
+.L539:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+356
 	.word	.LANCHOR1+173
 	.word	.LC91
-.L461:
+.L443:
 	ldr	r3, [r4, #3364]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3380]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3384]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #2544]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3388]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #2520]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #384]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #76]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3204]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3272]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3312]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3320]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3340]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3184]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #2540]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r4, #352]
 	cmp	r3, #0
-	beq	.L463
-	ldr	r3, .L559
+	beq	.L445
+	ldr	r3, .L541
 	ldr	r2, [r3, #3368]
 	cmp	r2, #0
-	beq	.L463
+	beq	.L445
 	ldr	r2, [r3, #3372]
 	cmp	r2, #0
-	beq	.L463
+	beq	.L445
 	ldr	r3, [r3, #3376]
 	cmp	r3, #0
-	beq	.L463
+	beq	.L445
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L560:
+.L542:
 	.align	2
-.L559:
+.L541:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMemInit, .-FtlMemInit
@@ -4225,30 +4125,30 @@ FtlBbt2Bitmap:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, r0
-	ldr	r6, .L567
+	ldr	r6, .L549
 	mov	r7, r1
 	subs	r4, r5, #2
 	movw	r8, #65535
-	ldr	r9, .L567+4
+	ldr	r9, .L549+4
 	addw	r5, r5, #1022
 	ldrh	r2, [r6, #3392]
 	movs	r1, #0
-	ldr	r10, .L567+8
+	ldr	r10, .L549+8
 	mov	r0, r7
 	lsls	r2, r2, #2
 	bl	ftl_memset
-.L564:
+.L546:
 	ldrh	r3, [r4, #2]
 	cmp	r3, r8
-	beq	.L561
+	beq	.L543
 	ldrh	r2, [r6, #302]
 	cmp	r2, r3
-	bhi	.L563
+	bhi	.L545
 	movs	r2, #74
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L563:
+.L545:
 	ldrh	r3, [r4, #2]!
 	movs	r2, #1
 	cmp	r5, r4
@@ -4258,46 +4158,104 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r2, r2, r3
 	str	r2, [r7, r1, lsl #2]
-	bne	.L564
-.L561:
+	bne	.L546
+.L543:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L568:
+.L550:
 	.align	2
-.L567:
+.L549:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+184
 	.word	.LC8
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	1
-	.global	ftl_free_no_use_map_blk
+	.global	FtlBbtMemInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_free_no_use_map_blk, %function
-ftl_free_no_use_map_blk:
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movs	r1, #0
-	ldrh	r2, [r0, #10]
-	mov	r4, r0
-	ldr	r5, [r0, #20]
-	ldr	r7, [r0, #12]
-	ldr	r6, [r0, #24]
+	@ link register save eliminated.
+	ldr	r0, .L552
+	movw	r3, #65535
+	movs	r2, #16
+	movs	r1, #255
+	strh	r3, [r0, #356]	@ movhi
+	movs	r3, #0
+	strh	r3, [r0, #362]	@ movhi
+	add	r0, r0, #368
+	b	ftl_memset
+.L553:
+	.align	2
+.L552:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	1
+	.global	FtlFreeSysBlkQueueInit
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L555
+	mov	r2, #2048
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r4, #0
+	mov	r1, r4
+	strh	r0, [r3, #416]	@ movhi
+	add	r0, r3, #424
+	strh	r4, [r3, #418]	@ movhi
+	strh	r4, [r3, #420]	@ movhi
+	strh	r4, [r3, #422]	@ movhi
+	bl	ftl_memset
+	mov	r0, r4
+	pop	{r4, pc}
+.L556:
+	.align	2
+.L555:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	1
+	.global	ftl_free_no_use_map_blk
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r1, #0
+	ldrh	r2, [r0, #10]
+	mov	r4, r0
+	ldr	r5, [r0, #20]
+	ldr	r7, [r0, #12]
+	ldr	r6, [r0, #24]
 	lsls	r2, r2, #1
 	mov	r0, r5
 	bl	ftl_memset
 	movs	r3, #0
-.L570:
+.L558:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r3
 	cmp	r1, r2
-	bhi	.L574
-	ldr	r3, .L589
+	bhi	.L562
+	ldr	r3, .L577
 	movs	r6, #0
 	mov	r9, r6
 	mov	fp, r6
@@ -4305,73 +4263,73 @@ ftl_free_no_use_map_blk:
 	ldrh	r3, [r4]
 	strh	r2, [r5, r3, lsl #1]	@ movhi
 	ldrh	r10, [r5]
-.L575:
+.L563:
 	ldrh	r3, [r4, #10]
 	uxth	r1, r6
 	cmp	r3, r1
-	bhi	.L579
+	bhi	.L567
 	mov	r0, r9
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L574:
+.L562:
 	uxth	r2, r3
 	ldr	r1, [r6, r2, lsl #2]
 	movs	r2, #0
 	ubfx	r1, r1, #10, #16
-.L571:
+.L559:
 	ldrh	ip, [r4, #10]
 	uxth	r0, r2
 	cmp	ip, r0
-	bhi	.L573
+	bhi	.L561
 	adds	r3, r3, #1
-	b	.L570
-.L573:
+	b	.L558
+.L561:
 	uxth	r0, r2
 	ldrh	ip, [r7, r0, lsl #1]
 	cmp	ip, r1
-	bne	.L572
-	cbz	r1, .L572
+	bne	.L560
+	cbz	r1, .L560
 	ldrh	ip, [r5, r0, lsl #1]
 	add	ip, ip, #1
 	strh	ip, [r5, r0, lsl #1]	@ movhi
-.L572:
+.L560:
 	adds	r2, r2, #1
-	b	.L571
-.L579:
+	b	.L559
+.L567:
 	uxth	r2, r6
 	ldrh	r3, [r5, r2, lsl #1]
 	lsl	r8, r2, #1
 	cmp	r10, r3
-	bls	.L576
+	bls	.L564
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
-	cbnz	r0, .L577
-.L578:
+	cbnz	r0, .L565
+.L566:
 	adds	r6, r6, #1
-	b	.L575
-.L576:
+	b	.L563
+.L564:
 	cmp	r3, #0
-	bne	.L578
+	bne	.L566
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
 	cmp	r0, #0
-	beq	.L578
-.L580:
+	beq	.L566
+.L568:
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	strh	fp, [r8]	@ movhi
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L578
-.L577:
+	b	.L566
+.L565:
 	mov	r9, r1
 	mov	r10, r3
 	cmp	r3, #0
-	beq	.L580
-	b	.L578
-.L590:
+	beq	.L568
+	b	.L566
+.L578:
 	.align	2
-.L589:
+.L577:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -4389,7 +4347,7 @@ FtlL2PDataInit:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L594
+	ldr	r4, .L582
 	movs	r6, #12
 	ldr	r2, [r4, #332]
 	ldr	r0, [r4, #3364]
@@ -4405,12 +4363,12 @@ FtlL2PDataInit:
 	mov	r3, r4
 	movw	r1, #65535
 	mov	r7, r2
-.L592:
+.L580:
 	ldrh	r4, [r3, #342]
 	uxth	r0, r2
 	adds	r5, r2, #1
 	cmp	r4, r0
-	bhi	.L593
+	bhi	.L581
 	ldr	r2, [r3, #332]
 	strh	r1, [r3, #3398]	@ movhi
 	strh	r1, [r3, #3396]	@ movhi
@@ -4430,7 +4388,7 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3380]
 	str	r2, [r3, #3420]
 	pop	{r3, r4, r5, r6, r7, pc}
-.L593:
+.L581:
 	uxth	r2, r2
 	ldr	r0, [r3, #2544]
 	mul	r4, r6, r2
@@ -4446,10 +4404,10 @@ FtlL2PDataInit:
 	add	r2, r2, r4
 	str	r2, [r0, #8]
 	mov	r2, r5
-	b	.L592
-.L595:
+	b	.L580
+.L583:
 	.align	2
-.L594:
+.L582:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
@@ -4467,7 +4425,7 @@ FtlVariablesInit:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r5, #0
-	ldr	r4, .L597
+	ldr	r4, .L585
 	movw	r3, #65535
 	mov	r1, r5
 	ldrh	r2, [r4, #324]
@@ -4490,19 +4448,21 @@ FtlVariablesInit:
 	ldr	r0, [r4, #3348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
+	mov	r1, r5
+	movs	r2, #48
 	addw	r0, r4, #2472
-	movs	r1, #48
-	bl	__memzero
+	bl	ftl_memset
+	mov	r2, #512
+	mov	r1, r5
 	addw	r0, r4, #2644
-	mov	r1, #512
-	bl	__memzero
+	bl	ftl_memset
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L598:
+.L586:
 	.align	2
-.L597:
+.L585:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -4520,7 +4480,7 @@ SupperBlkListInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L610
+	ldr	r4, .L598
 	movs	r2, #6
 	mov	r9, r5
 	mov	r6, r5
@@ -4538,18 +4498,18 @@ SupperBlkListInit:
 	str	r5, [r4, #2528]
 	strh	r5, [r4, #2532]	@ movhi
 	strh	r5, [r4, #228]	@ movhi
-.L600:
+.L588:
 	ldrh	r3, [r4, #244]
 	uxth	r8, r5
 	cmp	r8, r3
-	bcs	.L607
+	bcs	.L595
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #236]
 	str	r3, [sp, #4]
 	movs	r3, #0
 	mov	r7, r3
-	b	.L608
-.L602:
+	b	.L596
+.L590:
 	ldrb	r0, [r10, r3]	@ zero_extendqisi2
 	mov	r1, r8
 	str	r2, [sp, #12]
@@ -4558,76 +4518,76 @@ SupperBlkListInit:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L601
+	cbnz	r0, .L589
 	ldr	r1, [sp, #4]
 	add	r7, r7, r1
 	uxth	r7, r7
-.L601:
+.L589:
 	adds	r3, r3, #1
-.L608:
+.L596:
 	uxth	r1, r3
 	cmp	r2, r1
-	bhi	.L602
+	bhi	.L590
 	uxth	r3, r5
-	cbz	r7, .L603
+	cbz	r7, .L591
 	mov	r1, r7
 	str	r3, [sp, #4]
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	ldr	r3, [sp, #4]
 	uxth	r7, r0
-.L604:
+.L592:
 	ldr	r1, [r4, #2520]
 	movs	r2, #6
 	mla	r2, r2, r3, r1
 	strh	r7, [r2, #4]	@ movhi
 	ldrh	r2, [r4, #28]
 	cmp	r2, r8
-	beq	.L605
+	beq	.L593
 	ldrh	r2, [r4, #80]
 	cmp	r2, r8
-	beq	.L605
+	beq	.L593
 	ldrh	r2, [r4, #128]
 	cmp	r2, r8
-	beq	.L605
+	beq	.L593
 	ldr	r2, [r4, #76]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L606
+	cbnz	r3, .L594
 	add	r9, r9, #1
 	mov	r0, r8
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-.L605:
+.L593:
 	adds	r5, r5, #1
-	b	.L600
-.L603:
+	b	.L588
+.L591:
 	ldr	r2, [r4, #76]
 	strh	fp, [r2, r3, lsl #1]	@ movhi
-	b	.L604
-.L606:
+	b	.L592
+.L594:
 	adds	r6, r6, #1
 	mov	r0, r8
 	uxth	r6, r6
 	bl	INSERT_DATA_LIST
-	b	.L605
-.L607:
+	b	.L593
+.L595:
 	strh	r6, [r4, #2532]	@ movhi
 	add	r6, r6, r9
 	cmp	r6, r3
 	strh	r9, [r4, #228]	@ movhi
-	ble	.L609
+	ble	.L597
 	movw	r2, #2210
-	ldr	r1, .L610+4
-	ldr	r0, .L610+8
+	ldr	r1, .L598+4
+	ldr	r0, .L598+8
 	bl	sftl_printk
-.L609:
+.L597:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L611:
+.L599:
 	.align	2
-.L610:
+.L598:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+198
 	.word	.LC8
@@ -4647,7 +4607,7 @@ FtlGcPageVarInit:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r3, #0
-	ldr	r4, .L613
+	ldr	r4, .L601
 	movs	r1, #255
 	ldrh	r2, [r4, #310]
 	ldr	r0, [r4, #3196]
@@ -4663,13 +4623,66 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	pop	{r4, lr}
 	b	FtlGcBufInit
-.L614:
+.L602:
 	.align	2
-.L613:
+.L601:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
 	.align	1
+	.global	FlashGetBadBlockList
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r2, #256
+	ldr	r5, .L610
+	mov	r4, r0
+	mov	r6, r1
+	movs	r1, #255
+	bl	ftl_memset
+	ldr	r3, [r5, #3248]
+	mov	r1, r6
+	mov	r0, r4
+	blx	r3
+	uxth	r0, r0
+	cmp	r0, #50
+	bls	.L604
+	mov	r2, #256
+	movs	r1, #255
+	mov	r0, r4
+	bl	ftl_memset
+	movs	r0, #0
+.L604:
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	bne	.L609
+	add	r1, r4, r0, lsl #1
+	mov	r3, r4
+.L606:
+	cmp	r3, r1
+	bne	.L607
+.L609:
+	pop	{r4, r5, r6, pc}
+.L607:
+	ldrh	r2, [r3]
+	lsrs	r2, r2, #1
+	strh	r2, [r3], #2	@ movhi
+	b	.L606
+.L611:
+	.align	2
+.L610:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	1
 	.global	ftl_memcpy
 	.syntax unified
 	.thumb
@@ -4693,56 +4706,61 @@ ftl_memcpy:
 	.type	FlashReadPages, %function
 FlashReadPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r1
-	ldr	r5, .L656
+	ldr	r5, .L654
 	mov	r4, r0
 	mov	r8, #0
-	.pad #20
-	sub	sp, sp, #20
-	ldr	r10, .L656+16
-	ldr	fp, .L656+20
-	ldrh	r3, [r5, #12]
-	str	r3, [sp, #4]
-.L617:
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r7, .L654+4
+	ldrh	r10, [r5, #12]
+	ldr	fp, .L654+24
+	ldr	r2, [r7]
+	str	r7, [sp, #4]
+	str	r2, [sp, #20]
+.L614:
 	cmp	r8, r9
-	bne	.L631
+	bne	.L628
+	ldr	r3, [sp, #4]
 	movs	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L631:
+	ldr	r2, [sp, #20]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L629
+	bl	__stack_chk_fail
+.L628:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L618
+	cbz	r3, .L615
 	ldr	r3, [r4, #12]
-	cbnz	r3, .L619
-.L618:
+	cbnz	r3, .L616
+.L615:
 	movs	r2, #96
-	ldr	r1, .L656+4
-	mov	r0, r10
+	ldr	r1, .L654+8
+	ldr	r0, .L654+12
 	bl	sftl_printk
-.L619:
-	add	r2, sp, #8
-	add	r1, sp, #12
+.L616:
+	add	r2, sp, #12
+	add	r1, sp, #16
 	mov	r0, r4
 	bl	l2p_addr_tran
-	ldr	r0, [sp, #8]
+	ldr	r0, [sp, #12]
 	cmp	r0, #3
-	bls	.L620
+	bls	.L617
 	mov	r3, #-1
 	str	r3, [r4]
-.L621:
+.L618:
 	add	r8, r8, #1
 	adds	r4, r4, #20
-	b	.L617
-.L620:
+	b	.L614
+.L617:
 	ldr	r6, [r4, #8]
 	uxtb	r0, r0
 	ldr	r3, [r4, #12]
-	ldr	r1, [sp, #12]
+	ldr	r1, [sp, #16]
 	lsls	r7, r6, #26
 	ldr	r7, [r5, #3260]
 	it	ne
@@ -4752,82 +4770,86 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L624
-	ldr	r0, [sp, #4]
-	add	r2, r6, #2048
+	bne	.L621
 	ldr	r3, [r4, #12]
-	ldr	r1, [sp, #12]
-	ldr	r7, [r5, #3260]
+	add	r2, r6, #2048
+	ldr	r1, [sp, #16]
+	ldrb	r0, [sp, #12]	@ zero_extendqisi2
 	adds	r3, r3, #8
-	add	r1, r1, r0
-	ldrb	r0, [sp, #8]	@ zero_extendqisi2
+	ldr	r7, [r5, #3260]
+	add	r1, r1, r10
 	blx	r7
 	adds	r1, r0, #1
-	beq	.L625
+	beq	.L622
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	adds	r2, r2, #1
-	bne	.L626
+	bne	.L623
 	ldr	r2, [r3, #8]
 	adds	r2, r2, #1
-	bne	.L626
+	bne	.L623
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L626
-.L625:
+	beq	.L623
+.L622:
 	mov	r3, #-1
 	str	r3, [r4]
-.L626:
+.L623:
 	ldr	r3, [r4]
 	adds	r3, r3, #1
-	beq	.L627
+	beq	.L624
 	cmp	r0, #256
 	it	eq
 	streq	r0, [r4]
-.L627:
+.L624:
 	ldr	r3, [r4]
 	adds	r2, r3, #1
-	beq	.L628
+	beq	.L625
 	cmp	r3, #256
-	bne	.L624
-.L628:
+	bne	.L621
+.L625:
 	ldr	r1, [r4, #4]
 	mov	r0, fp
-	ldr	r2, [sp, #12]
+	ldr	r2, [sp, #16]
 	bl	sftl_printk
 	ldr	r1, [r4, #8]
-	cbz	r1, .L630
+	cbz	r1, .L627
 	movs	r3, #4
-	ldr	r0, .L656+8
+	ldr	r0, .L654+16
 	mov	r2, r3
 	bl	rknand_print_hex
-.L630:
+.L627:
 	ldr	r1, [r4, #12]
-	cbz	r1, .L624
+	cbz	r1, .L621
 	movs	r3, #4
-	ldr	r0, .L656+12
+	ldr	r0, .L654+20
 	mov	r2, r3
 	bl	rknand_print_hex
-.L624:
+.L621:
 	ldr	r3, [r5, #3324]
 	cmp	r6, r3
-	bne	.L621
+	bne	.L618
 	ldr	r0, [r4, #8]
 	cmp	r6, r0
-	beq	.L621
+	beq	.L618
 	ldrh	r2, [r5, #262]
 	mov	r1, r6
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-	b	.L621
-.L657:
+	b	.L618
+.L629:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L655:
 	.align	2
-.L656:
+.L654:
 	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.word	.LANCHOR1+216
+	.word	.LC8
 	.word	.LC93
 	.word	.LC94
-	.word	.LC8
 	.word	.LC92
 	.fnend
 	.size	FlashReadPages, .-FlashReadPages
@@ -4845,7 +4867,7 @@ FtlLoadFactoryBbt:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r6, #0
-	ldr	r4, .L668
+	ldr	r4, .L666
 	movw	r10, #61664
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #366
@@ -4853,23 +4875,23 @@ FtlLoadFactoryBbt:
 	add	r9, r4, #3456
 	str	r3, [r4, #3464]
 	str	r8, [r4, #3468]
-.L659:
+.L657:
 	ldrh	r3, [r4, #258]
 	cmp	r6, r3
-	bcc	.L664
+	bcc	.L662
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L664:
+.L662:
 	ldrh	r5, [r4, #302]
 	movw	r3, #65535
 	strh	r3, [r7, #2]!	@ movhi
-.L661:
+.L659:
 	ldrh	r3, [r4, #302]
 	subs	r5, r5, #1
 	uxth	r5, r5
 	sub	r2, r3, #16
 	cmp	r5, r2
-	ble	.L662
+	ble	.L660
 	mla	r3, r6, r3, r5
 	movs	r2, #1
 	mov	r1, r2
@@ -4879,17 +4901,17 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L661
+	beq	.L659
 	ldrh	r3, [r8]
 	cmp	r3, r10
-	bne	.L661
+	bne	.L659
 	strh	r5, [r7]	@ movhi
-.L662:
+.L660:
 	adds	r6, r6, #1
-	b	.L659
-.L669:
+	b	.L657
+.L667:
 	.align	2
-.L668:
+.L666:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
@@ -4904,72 +4926,81 @@ FtlGetLastWrittenPage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L681
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r6, .L680
 	cmp	r1, #1
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	lsl	r6, r0, #10
-	.pad #88
-	sub	sp, sp, #88
+	lsl	r8, r0, #10
 	mov	r2, r1
 	mov	r7, r1
-	it	eq
-	ldrheq	r5, [r3, #308]
+	ldr	r3, [r6]
 	mov	r1, #1
-	it	ne
+	mov	r0, sp
+	str	r3, [sp, #84]
+	ldr	r3, .L680+4
+	ite	eq
+	ldrheq	r5, [r3, #308]
 	ldrhne	r5, [r3, #306]
-	add	r0, sp, #4
 	ldr	r3, [r3, #3328]
 	subs	r5, r5, #1
 	sxth	r5, r5
-	str	r3, [sp, #12]
-	add	r3, sp, #24
-	str	r3, [sp, #16]
-	orr	r3, r5, r6
 	str	r3, [sp, #8]
+	add	r3, sp, #20
+	str	r3, [sp, #12]
+	orr	r3, r5, r8
+	str	r3, [sp, #4]
 	bl	FlashReadPages
-	ldr	r3, [sp, #24]
+	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	bne	.L673
-	mov	r8, #0
-.L674:
-	cmp	r8, r5
-	ble	.L677
-.L673:
+	bne	.L671
+	mov	r9, #0
+.L672:
+	cmp	r9, r5
+	ble	.L675
+.L671:
+	ldr	r2, [sp, #84]
 	mov	r0, r5
-	add	sp, sp, #88
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L677:
-	add	r3, r8, r5
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L676
+	bl	__stack_chk_fail
+.L675:
+	add	r3, r9, r5
 	mov	r2, r7
 	add	r3, r3, r3, lsr #31
 	movs	r1, #1
-	add	r0, sp, #4
+	mov	r0, sp
 	asrs	r4, r3, #1
 	sxth	r3, r4
-	orrs	r3, r3, r6
-	str	r3, [sp, #8]
+	orr	r3, r3, r8
+	str	r3, [sp, #4]
 	bl	FlashReadPages
-	ldr	r3, [sp, #24]
+	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	bne	.L675
-	ldr	r3, [sp, #28]
+	bne	.L673
+	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L675
-	ldr	r3, [sp, #4]
+	bne	.L673
+	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L675
+	beq	.L673
 	subs	r4, r4, #1
 	sxth	r5, r4
-	b	.L674
-.L675:
+	b	.L672
+.L673:
 	adds	r4, r4, #1
-	sxth	r8, r4
-	b	.L674
-.L682:
-	.align	2
+	sxth	r9, r4
+	b	.L672
+.L676:
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
 .L681:
+	.align	2
+.L680:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -4987,7 +5018,7 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L765
+	ldr	r4, .L764
 	mov	r1, r5
 	.pad #20
 	sub	sp, sp, #20
@@ -5015,12 +5046,12 @@ FtlScanSysBlk:
 	movs	r2, #16
 	movs	r1, #255
 	addw	r0, r4, #2628
-	bl	memset
+	bl	ftl_memset
 	ldrh	r8, [r4, #244]
-.L684:
+.L683:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r8
-	bls	.L726
+	bls	.L725
 	movs	r5, #0
 	ldrh	fp, [r4, #236]
 	ldr	r9, [r4, #3292]
@@ -5029,11 +5060,11 @@ FtlScanSysBlk:
 	mov	r10, #20
 	ldr	r2, [r4, #3184]
 	ldrh	r6, [r4, #316]
-	b	.L727
-.L687:
+	b	.L726
+.L686:
 	str	r3, [sp, #8]
 	mov	r1, r8
-	ldr	r3, .L765+4
+	ldr	r3, .L764+4
 	str	r2, [sp, #12]
 	ldrb	r0, [r3, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -5041,7 +5072,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L685
+	cbnz	r0, .L684
 	ldr	r1, [sp, #4]
 	mla	r0, r10, r7, r9
 	lsls	r1, r1, #10
@@ -5056,27 +5087,27 @@ FtlScanSysBlk:
 	bic	r1, r1, #3
 	add	r1, r1, r2
 	str	r1, [r0, #12]
-.L685:
+.L684:
 	adds	r5, r5, #1
-.L727:
+.L726:
 	uxth	r1, r5
 	cmp	fp, r1
-	bhi	.L687
-	cbnz	r7, .L688
-.L725:
+	bhi	.L686
+	cbnz	r7, .L687
+.L724:
 	add	r8, r8, #1
 	uxth	r8, r8
-	b	.L684
-.L688:
+	b	.L683
+.L687:
 	mov	r0, r9
 	mov	r9, #0
 	movs	r2, #1
 	mov	r1, r7
 	bl	FlashReadPages
-.L689:
+.L688:
 	uxth	r3, r9
 	cmp	r7, r3
-	bls	.L725
+	bls	.L724
 	movs	r3, #20
 	mul	r10, r3, r9
 	ldr	r3, [r4, #3292]
@@ -5086,10 +5117,10 @@ FtlScanSysBlk:
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #1
 	ubfx	r5, r5, #10, #16
-	bne	.L692
+	bne	.L691
 	mov	fp, #16
 	movw	r3, #65535
-.L694:
+.L693:
 	ldr	r0, [r4, #3292]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
@@ -5102,73 +5133,73 @@ FtlScanSysBlk:
 	ldrh	r2, [r6]
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
-	bne	.L691
+	bne	.L690
 	ldr	r3, [r4, #3292]
 	mov	r2, #-1
 	str	r2, [r3, r10]
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
-	bne	.L692
-.L693:
+	bne	.L691
+.L692:
 	movs	r1, #1
-	b	.L764
-.L691:
+	b	.L763
+.L690:
 	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L692
+	bne	.L691
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L694
-	b	.L693
-.L692:
+	bne	.L693
+	b	.L692
+.L691:
 	ldr	r2, [r4, #2592]
 	ldr	r3, [r6, #4]
 	adds	r1, r2, #1
-	beq	.L695
+	beq	.L694
 	cmp	r2, r3
-	bhi	.L696
-.L695:
+	bhi	.L695
+.L694:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
 	strne	r2, [r4, #2592]
-.L696:
+.L695:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L698
-	bhi	.L699
+	beq	.L697
+	bhi	.L698
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L700
-.L697:
+	beq	.L699
+.L696:
 	add	r9, r9, #1
-	b	.L689
-.L699:
+	b	.L688
+.L698:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L701
+	beq	.L700
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L697
+	bne	.L696
 	movs	r1, #0
-.L764:
+.L763:
 	mov	r0, r5
 	bl	FtlFreeSysBlkQueueIn
-	b	.L697
-.L701:
+	b	.L696
+.L700:
 	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #332]
 	cmp	r2, r3
-	bls	.L703
+	bls	.L702
 	movw	r2, #1225
-	ldr	r1, .L765+8
-	ldr	r0, .L765+12
+	ldr	r1, .L764+8
+	ldr	r0, .L764+12
 	bl	sftl_printk
-.L703:
+.L702:
 	ldr	r1, [r4, #332]
 	ldrh	r0, [r4, #3440]
 	ldr	r10, [r4, #3384]
@@ -5178,58 +5209,58 @@ FtlScanSysBlk:
 	add	ip, ip, #-1
 	sxth	r3, r3
 	sxth	ip, ip
-.L704:
+.L703:
 	cmp	r3, ip
-	bgt	.L710
+	bgt	.L709
 	cmp	r3, #0
-	bge	.L742
-	b	.L697
-.L710:
+	bge	.L741
+	b	.L696
+.L709:
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	mov	lr, r2
 	ldr	r2, [r10, r3, lsl #2]
 	cmp	lr, r2
-	bls	.L705
+	bls	.L704
 	ldr	r2, [r10]
-	cbnz	r2, .L706
+	cbnz	r2, .L705
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #3440]	@ movhi
-.L706:
+.L705:
 	uxth	ip, r3
 	movs	r2, #0
-.L707:
+.L706:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L708
+	bhi	.L707
 	ldr	r2, [r4, #3384]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #3360]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	blt	.L697
+	blt	.L696
 	ldrh	r0, [r4, #3440]
 	ldr	r2, [r4, #332]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L697
-.L742:
+	bgt	.L696
+.L741:
 	ldr	r2, [r4, #3384]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
 	strh	r0, [r4, #3440]	@ movhi
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #3360]
-.L762:
+.L761:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	b	.L697
-.L708:
+	b	.L696
+.L707:
 	ldr	r0, [r4, #3384]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -5239,79 +5270,79 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L707
-.L705:
+	b	.L706
+.L704:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L704
-.L766:
-	.align	2
+	b	.L703
 .L765:
+	.align	2
+.L764:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+264
 	.word	.LANCHOR1+231
 	.word	.LC8
-.L700:
+.L699:
 	ldrh	r2, [r4, #348]
 	ldrh	r3, [r4, #324]
 	cmp	r2, r3
-	bls	.L713
+	bls	.L712
 	movw	r2, #1266
-	ldr	r1, .L767
-	ldr	r0, .L767+4
+	ldr	r1, .L766
+	ldr	r0, .L766+4
 	bl	sftl_printk
-.L713:
+.L712:
 	ldrh	lr, [r4, #324]
 	ldrh	r0, [r4, #348]
 	ldr	r10, [r4, #3372]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
-.L714:
+.L713:
 	cmp	r3, ip
-	ble	.L719
+	ble	.L718
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	ldr	r1, [r10, r3, lsl #2]
 	cmp	r2, r1
-	bls	.L715
+	bls	.L714
 	ldr	r2, [r10]
-	cbnz	r2, .L716
+	cbnz	r2, .L715
 	cmp	lr, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #348]	@ movhi
-.L716:
+.L715:
 	uxth	ip, r3
 	movs	r2, #0
-.L717:
+.L716:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L718
+	bhi	.L717
 	ldr	r2, [r4, #3372]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #352]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-.L719:
+.L718:
 	cmp	r3, #0
-	blt	.L697
+	blt	.L696
 	ldrh	r2, [r4, #324]
 	ldrh	r1, [r4, #348]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L697
+	bgt	.L696
 	adds	r1, r1, #1
 	ldr	r2, [r4, #3372]
 	strh	r1, [r4, #348]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #352]
-	b	.L762
-.L718:
+	b	.L761
+.L717:
 	ldr	r0, [r4, #3372]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -5321,81 +5352,81 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L717
-.L715:
+	b	.L716
+.L714:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L714
-.L698:
+	b	.L713
+.L697:
 	ldrh	r1, [r4, #2628]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L721
+	bne	.L720
 	strh	r5, [r4, #2628]	@ movhi
-.L763:
+.L762:
 	str	r3, [r4, #2636]
-	b	.L697
-.L721:
+	b	.L696
+.L720:
 	ldrh	r0, [r4, #2632]
 	cmp	r0, r2
-	beq	.L722
+	beq	.L721
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L722:
+.L721:
 	ldr	r2, [r4, #2636]
 	ldr	r3, [r6, #4]
 	cmp	r2, r3
-	bcs	.L723
+	bcs	.L722
 	ldrh	r3, [r4, #2628]
 	strh	r5, [r4, #2628]	@ movhi
 	strh	r3, [r4, #2632]	@ movhi
 	ldr	r3, [r6, #4]
-	b	.L763
-.L723:
+	b	.L762
+.L722:
 	strh	r5, [r4, #2632]	@ movhi
-	b	.L697
-.L726:
+	b	.L696
+.L725:
 	ldr	r1, [r4, #3360]
 	ldrh	r3, [r1]
-	cbz	r3, .L728
-.L731:
+	cbz	r3, .L727
+.L730:
 	ldr	r1, [r4, #352]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L729
-.L730:
+	beq	.L728
+.L729:
 	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #332]
 	cmp	r2, r3
-	bls	.L761
+	bls	.L760
 	movw	r2, #1391
-	ldr	r1, .L767
-	ldr	r0, .L767+4
+	ldr	r1, .L766
+	ldr	r0, .L766+4
 	bl	sftl_printk
-.L761:
+.L760:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L728:
+.L727:
 	ldrh	r2, [r4, #3440]
 	cmp	r2, #0
-	beq	.L731
+	beq	.L730
 	ldr	r0, [r4, #332]
-.L732:
+.L731:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L731
+	bcs	.L730
 	ldrh	r5, [r1, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r5, #0
-	beq	.L732
+	beq	.L731
 	mov	r3, r2
 	movs	r5, #0
-.L733:
+.L732:
 	ldr	r1, [r4, #332]
 	cmp	r3, r1
-	bcs	.L731
+	bcs	.L730
 	ldr	r1, [r4, #3360]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
@@ -5407,26 +5438,26 @@ FtlScanSysBlk:
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L733
-.L729:
+	b	.L732
+.L728:
 	ldrh	r3, [r4, #348]
 	cmp	r3, #0
-	beq	.L730
+	beq	.L729
 	ldrh	r0, [r4, #324]
-.L738:
+.L737:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	r5, r3
-	bge	.L730
+	bge	.L729
 	ldrh	r6, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	cmp	r6, #0
-	beq	.L738
+	beq	.L737
 	movs	r0, #0
-.L739:
+.L738:
 	ldrh	r2, [r4, #324]
 	cmp	r3, r2
-	bge	.L730
+	bge	.L729
 	ldr	r2, [r4, #352]
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
@@ -5438,10 +5469,10 @@ FtlScanSysBlk:
 	strh	r0, [r2, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L739
-.L768:
-	.align	2
+	b	.L738
 .L767:
+	.align	2
+.L766:
 	.word	.LANCHOR1+231
 	.word	.LC8
 	.fnend
@@ -5460,7 +5491,7 @@ FtlLoadBbt:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r8, #61649
-	ldr	r4, .L798
+	ldr	r4, .L797
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #3456
 	ldr	r6, [r4, #3336]
@@ -5470,11 +5501,11 @@ FtlLoadBbt:
 	ldrh	r5, [r4, #302]
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L770:
+.L769:
 	ldrh	r3, [r4, #302]
 	subs	r3, r3, #16
 	cmp	r5, r3
-	ble	.L773
+	ble	.L772
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -5483,7 +5514,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L771
+	bne	.L770
 	ldr	r3, [r4, #3460]
 	movs	r2, #1
 	mov	r1, r2
@@ -5491,50 +5522,50 @@ FtlLoadBbt:
 	adds	r3, r3, #1
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
-.L771:
+.L770:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L772
+	beq	.L771
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L772
+	bne	.L771
 	ldr	r3, [r6, #4]
 	strh	r5, [r4, #356]	@ movhi
 	str	r3, [r4, #364]
 	ldrh	r3, [r6, #8]
 	strh	r3, [r4, #360]	@ movhi
-.L773:
+.L772:
 	ldrh	r3, [r4, #356]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L787
+	beq	.L786
 	ldrh	r3, [r4, #360]
 	cmp	r3, r2
-	beq	.L777
+	beq	.L776
 	lsls	r3, r3, #10
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L798+4
+	ldr	r0, .L797+4
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L777
+	beq	.L776
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L777
+	bne	.L776
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #364]
 	cmp	r3, r2
-	bls	.L777
+	bls	.L776
 	ldrh	r2, [r4, #360]
 	str	r3, [r4, #364]
 	ldrh	r3, [r6, #8]
 	strh	r2, [r4, #356]	@ movhi
 	strh	r3, [r4, #360]	@ movhi
-.L777:
-	ldr	r7, .L798+4
+.L776:
+	ldr	r7, .L797+4
 	movs	r1, #1
 	ldrh	r0, [r4, #356]
 	movw	r8, #61649
@@ -5542,44 +5573,44 @@ FtlLoadBbt:
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #358]	@ movhi
-.L779:
+.L778:
 	cmp	r5, #0
-	bge	.L782
+	bge	.L781
 	movs	r2, #251
-	ldr	r1, .L798+8
-	ldr	r0, .L798+12
+	ldr	r1, .L797+8
+	ldr	r0, .L797+12
 	bl	sftl_printk
-.L781:
+.L780:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r4, #362]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L784
+	beq	.L783
 	ldr	r2, [r4, #232]
 	cmp	r0, r2
-	beq	.L784
+	beq	.L783
 	ldrh	r3, [r4, #246]
 	lsrs	r3, r3, #2
 	cmp	r2, r3
-	bcs	.L784
+	bcs	.L783
 	cmp	r0, r3
-	bcs	.L784
+	bcs	.L783
 	bl	FtlSysBlkNumInit
-.L784:
-	ldr	r6, .L798+16
+.L783:
+	ldr	r6, .L797+16
 	movs	r5, #0
-.L785:
+.L784:
 	ldrh	r3, [r4, #258]
 	cmp	r5, r3
-	bcc	.L786
+	bcc	.L785
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L772:
+.L771:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L770
-.L782:
+	b	.L769
+.L781:
 	ldrh	r3, [r4, #356]
 	movs	r2, #1
 	mov	r1, r2
@@ -5591,15 +5622,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L780
+	beq	.L779
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	beq	.L781
-.L780:
+	beq	.L780
+.L779:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L779
-.L786:
+	b	.L778
+.L785:
 	ldrh	r2, [r4, #3392]
 	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
@@ -5607,13 +5638,13 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	adds	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L785
-.L787:
+	b	.L784
+.L786:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L799:
-	.align	2
 .L798:
+	.align	2
+.L797:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
@@ -5630,68 +5661,74 @@ FtlLoadBbt:
 	.type	FlashProgPages, %function
 FlashProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 48
+	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #52
-	sub	sp, sp, #52
-	ldr	r6, .L839
-	mov	fp, r1
+	.pad #60
+	sub	sp, sp, #60
+	str	r3, [sp, #16]
 	mov	r4, r0
 	mov	r5, r0
-	str	r3, [sp, #12]
-	mov	r10, #0
-	ldrh	r3, [r6, #12]
-	mov	r8, r6
+	mov	r9, #0
+	ldr	r3, .L839
+	ldr	r8, .L839+8
+	str	r2, [sp, #12]
+	ldr	r2, [r3]
+	mov	r10, r8
+	mov	fp, r8
+	str	r1, [sp, #4]
+	str	r2, [sp, #52]
+	ldrh	r2, [r8, #12]
+	str	r3, [sp, #20]
+	str	r2, [sp]
+	lsls	r2, r2, #3
 	str	r2, [sp, #8]
-	str	r3, [sp]
-	lsls	r3, r3, #3
-	str	r3, [sp, #4]
-.L801:
-	cmp	r10, fp
-	bne	.L815
-	ldr	r3, [sp, #12]
+.L800:
+	ldr	r3, [sp, #4]
+	cmp	r9, r3
+	bne	.L814
+	ldr	r3, [sp, #16]
 	cmp	r3, #0
-	beq	.L809
+	beq	.L808
 	movs	r5, #0
 	ldr	r7, .L839+4
-	ldr	r8, .L839+28
-	ldr	r9, .L839+32
-	b	.L816
-.L815:
+	ldr	r8, .L839+36
+	ldr	r6, .L839+8
+	b	.L815
+.L814:
 	ldr	r3, [r5, #8]
-	cbz	r3, .L802
+	cbz	r3, .L801
 	ldr	r3, [r5, #12]
-	cbnz	r3, .L803
-.L802:
+	cbnz	r3, .L802
+.L801:
 	movs	r2, #148
-	ldr	r1, .L839+8
-	ldr	r0, .L839+12
+	ldr	r1, .L839+12
+	ldr	r0, .L839+16
 	bl	sftl_printk
-.L803:
-	add	r2, sp, #20
-	add	r1, sp, #24
+.L802:
+	add	r2, sp, #24
+	add	r1, sp, #28
 	mov	r0, r5
 	bl	l2p_addr_tran
-	ldr	r7, [sp, #20]
+	ldr	r7, [sp, #24]
 	cmp	r7, #3
-	bls	.L804
+	bls	.L803
 .L838:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L805
-.L804:
-	cbnz	r7, .L806
-	ldr	r3, [sp, #24]
-	ldr	r2, [sp, #4]
+	b	.L804
+.L803:
+	cbnz	r7, .L805
+	ldr	r3, [sp, #28]
+	ldr	r2, [sp, #8]
 	cmp	r2, r3
-	bls	.L806
-	ldr	r5, .L839+8
-	ldr	r6, .L839+16
-	ldr	r8, .L839+36
+	bls	.L805
+	ldr	r5, .L839+12
+	ldr	r6, .L839+20
+	ldr	r8, .L839+40
 	b	.L837
-.L808:
+.L807:
 	mov	r3, #-1
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5707,140 +5744,149 @@ FlashProgPages:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L839+20
+	ldr	r0, .L839+24
 	bl	rknand_print_hex
 .L837:
-	cmp	r7, fp
-	add	r4, r4, #20
-	bne	.L808
+	ldr	r3, [sp, #4]
+	adds	r4, r4, #20
+	cmp	r7, r3
+	bne	.L807
 	bl	dump_stack
-.L809:
+.L808:
+	ldr	r3, [sp, #20]
 	movs	r0, #0
-	add	sp, sp, #52
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L806:
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L822
+	bl	__stack_chk_fail
+.L805:
 	ldr	r1, [r5, #8]
 	lsls	r3, r1, #26
 	beq	.L823
-	ldr	r9, [r8, #3324]
-	cmp	r1, r9
-	beq	.L810
-	ldrh	r2, [r8, #262]
-	mov	r0, r9
+	ldr	r7, [fp, #3324]
+	cmp	r1, r7
+	beq	.L809
+	ldrh	r2, [fp, #262]
+	mov	r0, r7
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-.L810:
+.L809:
 	ldr	r3, [r5, #12]
-	mov	r2, r9
-	ldr	r1, [sp, #24]
-	ldrb	r0, [sp, #20]	@ zero_extendqisi2
-	ldr	r7, [r8, #3256]
-	blx	r7
-	cbnz	r0, .L811
+	mov	r2, r7
+	ldr	r1, [sp, #28]
+	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+	ldr	r6, [fp, #3256]
+	blx	r6
+	cbnz	r0, .L810
 	str	r0, [r5]
-.L812:
+.L811:
 	ldrh	r3, [r8, #14]
 	cmp	r3, #4
-	bne	.L805
+	bne	.L804
 	ldr	r0, [sp]
-	add	r2, r9, #2048
+	add	r2, r7, #2048
 	ldr	r3, [r5, #12]
-	ldr	r1, [sp, #24]
-	ldr	r7, [r8, #3256]
+	ldr	r1, [sp, #28]
+	ldr	r6, [r8, #3256]
 	adds	r3, r3, #8
 	add	r1, r1, r0
-	ldrb	r0, [sp, #20]	@ zero_extendqisi2
-	blx	r7
+	ldrb	r0, [sp, #24]	@ zero_extendqisi2
+	blx	r6
 	cmp	r0, #0
 	bne	.L838
-.L805:
-	add	r10, r10, #1
+.L804:
+	add	r9, r9, #1
 	adds	r5, r5, #20
-	b	.L801
+	b	.L800
 .L823:
-	mov	r9, r1
-	b	.L810
-.L811:
+	mov	r7, r1
+	b	.L809
+.L810:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L812
-.L821:
-	ldr	r2, [r6, #3324]
+	b	.L811
+.L820:
+	ldr	r2, [r10, #3324]
 	movs	r3, #0
 	movs	r1, #1
-	add	r0, sp, #28
+	add	r0, sp, #32
 	str	r3, [r2]
-	ldr	r2, [r6, #3332]
+	ldr	r2, [r10, #3332]
 	str	r3, [r2]
 	ldr	r3, [r4, #4]
-	ldr	r2, [sp, #8]
-	str	r3, [sp, #32]
-	ldr	r3, [r6, #3324]
+	ldr	r2, [sp, #12]
 	str	r3, [sp, #36]
-	ldr	r3, [r6, #3332]
+	ldr	r3, [r10, #3324]
 	str	r3, [sp, #40]
+	ldr	r3, [r10, #3332]
+	str	r3, [sp, #44]
 	bl	FlashReadPages
-	ldr	fp, [sp, #28]
+	ldr	fp, [sp, #32]
 	cmp	fp, #-1
-	bne	.L817
+	bne	.L816
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
 	str	fp, [r4]
-.L817:
-	ldr	fp, [sp, #28]
+.L816:
+	ldr	fp, [sp, #32]
 	cmp	fp, #256
-	bne	.L818
+	bne	.L817
 	ldr	r1, [r4, #4]
 	mov	r0, r8
 	bl	sftl_printk
 	str	fp, [r4]
-.L818:
+.L817:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L819
+	cbz	r3, .L818
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3332]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L819
+	beq	.L818
 	ldr	r1, [r4, #4]
-	mov	r0, r9
+	ldr	r0, .L839+28
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L819:
+.L818:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L820
+	cbz	r3, .L819
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3324]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L820
+	beq	.L819
 	ldr	r1, [r4, #4]
-	ldr	r0, .L839+24
+	ldr	r0, .L839+32
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L820:
+.L819:
 	adds	r5, r5, #1
 	adds	r4, r4, #20
-.L816:
-	cmp	r10, r5
-	bne	.L821
-	b	.L809
+.L815:
+	cmp	r9, r5
+	bne	.L820
+	b	.L808
+.L822:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 .L840:
 	.align	2
 .L839:
-	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.word	.LC95
+	.word	.LANCHOR0
 	.word	.LANCHOR1+256
 	.word	.LC8
 	.word	.LC86
 	.word	.LC88
+	.word	.LC97
 	.word	.LC98
 	.word	.LC96
-	.word	.LC97
 	.word	.LC87
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
@@ -6082,45 +6128,49 @@ FlashTestBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	cmp	r0, #11
-	push	{r4, r5, lr}
-	.save {r4, r5, lr}
+	ldr	r6, .L894
+	.pad #88
+	sub	sp, sp, #88
 	mov	r5, r0
-	.pad #92
-	sub	sp, sp, #92
-	bls	.L891
-	ldr	r3, .L893
-	add	r0, sp, #24
+	ldr	r2, [r6]
+	str	r2, [sp, #84]
+	bls	.L892
+	ldr	r4, .L894+4
+	add	r0, sp, #20
 	movs	r2, #32
 	movs	r1, #165
-	str	r0, [sp, #16]
+	str	r0, [sp, #12]
 	lsls	r5, r5, #10
-	ldr	r4, [r3, #3328]
-	str	r4, [sp, #12]
-	bl	memset
-	mov	r3, #1515870810
+	ldr	r3, [r4, #3328]
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	movs	r2, #8
+	movs	r1, #90
+	ldr	r0, [r4, #3328]
+	bl	ftl_memset
 	movs	r2, #1
-	str	r3, [r4]	@ unaligned
+	mov	r0, sp
 	mov	r1, r2
-	str	r3, [r4, #4]	@ unaligned
-	add	r0, sp, #4
-	str	r5, [sp, #8]
+	str	r5, [sp, #4]
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	add	r0, sp, #4
+	mov	r0, sp
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-	ldr	r3, [sp, #4]
-	cbnz	r3, .L892
+	ldr	r3, [sp]
+	cbnz	r3, .L893
 	adds	r3, r5, #1
-	add	r0, sp, #4
-	str	r3, [sp, #8]
+	mov	r0, sp
+	str	r3, [sp, #4]
 	movs	r3, #1
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-	ldr	r4, [sp, #4]
+	ldr	r4, [sp]
 	adds	r4, r4, #0
 	it	ne
 	movne	r4, #1
@@ -6128,23 +6178,30 @@ FlashTestBlk:
 .L890:
 	movs	r2, #1
 	movs	r1, #0
-	add	r0, sp, #4
-	str	r5, [sp, #8]
+	mov	r0, sp
+	str	r5, [sp, #4]
 	bl	FlashEraseBlocks
 .L888:
+	ldr	r2, [sp, #84]
 	mov	r0, r4
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, pc}
-.L892:
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L891
+	bl	__stack_chk_fail
+.L893:
 	mov	r4, #-1
 	b	.L890
-.L891:
+.L892:
 	movs	r4, #0
 	b	.L888
-.L894:
+.L891:
+	add	sp, sp, #88
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L895:
 	.align	2
-.L893:
+.L894:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -6163,7 +6220,7 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	movs	r5, #0
-	ldr	r4, .L907
+	ldr	r4, .L908
 	movs	r1, #0
 	ldr	r0, [r4, #3304]
 	add	r6, r4, #380
@@ -6172,19 +6229,19 @@ FtlBbmTblFlush:
 	str	r0, [r4, #3464]
 	str	r3, [r4, #3468]
 	bl	ftl_memset
-.L896:
+.L897:
 	ldrh	r3, [r4, #258]
 	cmp	r5, r3
-	blt	.L897
+	blt	.L898
 	ldr	r6, [r4, #3468]
 	movs	r2, #16
 	movs	r1, #255
-	ldr	r8, .L907+12
-	ldr	r9, .L907+16
+	ldr	r8, .L908+12
+	ldr	r9, .L908+16
 	movs	r5, #0
 	mov	r0, r6
 	mov	r7, r5
-	bl	memset
+	bl	ftl_memset
 	movw	r3, #61649
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #364]
@@ -6199,7 +6256,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #12]	@ movhi
 	ldr	r3, [r4, #2608]
 	strh	r3, [r6, #14]	@ movhi
-.L898:
+.L899:
 	ldr	r3, [r4, #3304]
 	mov	r10, #0
 	ldrh	r2, [r4, #358]
@@ -6219,7 +6276,7 @@ FtlBbmTblFlush:
 	ldrh	r2, [r4, #358]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L899
+	blt	.L900
 	ldr	r3, [r4, #364]
 	ldrh	r2, [r4, #356]
 	ldr	r0, [r4, #3272]
@@ -6237,7 +6294,7 @@ FtlBbmTblFlush:
 	str	r3, [r4, #3460]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-.L899:
+.L900:
 	movs	r3, #1
 	mov	r0, r9
 	mov	r2, r3
@@ -6248,21 +6305,21 @@ FtlBbmTblFlush:
 	strh	r3, [r4, #358]	@ movhi
 	ldr	r3, [r4, #3456]
 	adds	r2, r3, #1
-	bne	.L900
+	bne	.L901
 	adds	r5, r5, #1
 	ldr	r1, [r4, #3460]
 	uxth	r5, r5
-	ldr	r0, .L907+4
+	ldr	r0, .L908+4
 	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L898
+	bls	.L899
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L907+8
+	ldr	r0, .L908+8
 	bl	sftl_printk
-.L902:
-	b	.L902
-.L897:
+.L903:
+	b	.L903
+.L898:
 	ldrh	r2, [r4, #3392]
 	ldr	r3, [r4, #3464]
 	ldr	r1, [r6, #4]!
@@ -6271,23 +6328,23 @@ FtlBbmTblFlush:
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L896
-.L903:
+	b	.L897
+.L904:
 	movs	r7, #1
-	b	.L898
-.L900:
+	b	.L899
+.L901:
 	adds	r7, r7, #1
 	cmp	r7, #1
-	ble	.L903
+	ble	.L904
 	cmp	r3, #256
-	beq	.L898
+	beq	.L899
 	movs	r0, #0
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L908:
+.L909:
 	.align	2
-.L907:
+.L908:
 	.word	.LANCHOR0
 	.word	.LC100
 	.word	.LC101
@@ -6309,28 +6366,28 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L945
+	ldr	r4, .L946
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L945+20
-.L910:
-	ldr	r3, .L945
-	ldr	r2, .L945
+	ldr	r9, .L946+20
+.L911:
+	ldr	r3, .L946
+	ldr	r2, .L946
 	ldrh	r3, [r3, #228]
 	ldrh	r2, [r2, #2532]
 	add	r3, r3, r2
-	ldr	r2, .L945
+	ldr	r2, .L946
 	ldrh	r2, [r2, #244]
 	cmp	r3, r2
-	ble	.L911
+	ble	.L912
 	mov	r2, #2656
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L911:
-	ldr	r3, .L945+8
+.L912:
+	ldr	r3, .L946+8
 	cmp	r5, r3
-	bne	.L937
+	bne	.L938
 	ldrh	r3, [r4, #228]
 	ldr	r1, [r4, #3168]
 	mul	r2, r1, r3
@@ -6338,37 +6395,37 @@ allocate_data_superblock:
 	adds	r1, r1, #1
 	add	r1, r1, r2, lsr #2
 	uxth	r1, r1
-	cbz	r1, .L912
+	cbz	r1, .L913
 	subs	r1, r1, #1
 	uxth	r1, r1
-.L912:
-	ldr	r0, .L945+12
+.L913:
+	ldr	r0, .L946+12
 	bl	List_pop_index_node
 	ldrh	r3, [r4, #228]
 	mov	r6, r0
 	uxth	r8, r0
-	cbnz	r3, .L913
+	cbnz	r3, .L914
 	movw	r2, #2665
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L913:
+.L914:
 	ldrh	r3, [r4, #228]
 	subs	r3, r3, #1
 	strh	r3, [r4, #228]	@ movhi
 	ldrh	r3, [r4, #244]
 	cmp	r3, r8
-	bls	.L910
+	bls	.L911
 	ldr	r3, [r4, #76]
 	uxth	r6, r6
 	ldrh	r7, [r3, r6, lsl #1]
 	cmp	r7, #0
-	bne	.L910
+	bne	.L911
 	strh	r8, [r5]	@ movhi
 	mov	r0, r5
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L915
+	cbnz	r3, .L916
 	ldr	r3, [r4, #76]
 	movw	r2, #65535
 	mov	r0, r8
@@ -6379,27 +6436,27 @@ allocate_data_superblock:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L910
+	ble	.L911
 	movw	r2, #2679
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-	b	.L910
-.L937:
+	b	.L911
+.L938:
 	movs	r1, #0
-	b	.L912
-.L915:
+	b	.L913
+.L916:
 	ldrh	r2, [r4, #2532]
 	ldrh	r3, [r4, #228]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L917
+	ble	.L918
 	movw	r2, #2682
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L917:
+.L918:
 	ldr	r1, [r4, #3272]
 	mov	r10, #20
 	ldrh	r2, [r4, #236]
@@ -6409,34 +6466,34 @@ allocate_data_superblock:
 	mov	r3, r1
 	mla	r2, r10, r2, r1
 	str	r2, [sp, #4]
-.L918:
+.L919:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L920
-	cbnz	r7, .L921
+	bne	.L921
+	cbnz	r7, .L922
 	movw	r2, #2693
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L921:
+.L922:
 	ldrh	r3, [r4, #176]
 	cmp	r3, r8
-	bne	.L922
+	bne	.L923
 	movw	r2, #2695
 	mov	r1, r9
-	ldr	r0, .L945+4
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L922:
+.L923:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	ldr	r2, [r4, #2540]
 	cmp	r3, #0
-	bne	.L923
+	bne	.L924
 	ldrh	r3, [r2, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L924
+	beq	.L925
 	ldrh	r1, [r4, #296]
 	add	r3, r3, r1
-.L944:
+.L945:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	movs	r1, #0
 	ldr	r3, [r4, #2600]
@@ -6444,7 +6501,7 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2600]
 	bl	ftl_set_blk_mode
-.L926:
+.L927:
 	ldr	r3, [r4, #2540]
 	ldr	r2, [r4, #2616]
 	ldrh	r0, [r4, #296]
@@ -6461,17 +6518,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3272]
 	str	r0, [r4, #2608]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L945+16
+	ldr	r0, .L946+16
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r2, #20
 	mla	r2, r2, r7, r1
 	adds	r3, r1, #4
 	adds	r2, r2, #24
-.L928:
+.L929:
 	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L929
+	bne	.L930
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3272]
@@ -6479,42 +6536,42 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r3, r10
 	movs	r1, #20
-.L930:
+.L931:
 	uxth	r2, r10
 	cmp	r7, r2
-	bhi	.L932
+	bhi	.L933
 	cmp	r3, #0
-	ble	.L933
+	ble	.L934
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L933:
+.L934:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L934
+	bne	.L935
 	ldr	r3, [r4, #76]
 	movw	r2, #65535
 	strh	r2, [r3, r6, lsl #1]	@ movhi
-	b	.L910
-.L920:
+	b	.L911
+.L921:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
 	ldrh	r2, [r0], #2
 	cmp	r2, lr
-	beq	.L919
+	beq	.L920
 	mla	lr, r10, r7, r1
 	adds	r7, r7, #1
 	lsls	r2, r2, #10
 	uxth	r7, r7
 	str	r2, [lr, #4]
-.L919:
+.L920:
 	adds	r3, r3, #20
-	b	.L918
-.L924:
+	b	.L919
+.L925:
 	movs	r3, #2
-	b	.L944
-.L923:
+	b	.L945
+.L924:
 	ldrh	r3, [r2, r6, lsl #1]
 	mov	r0, r8
 	adds	r3, r3, #1
@@ -6523,19 +6580,19 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2604]
 	bl	ftl_set_blk_mode.part.6
-	b	.L926
-.L929:
+	b	.L927
+.L930:
 	ldr	r1, [r3, #-20]
 	ands	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L928
-.L932:
+	b	.L929
+.L933:
 	mul	r2, r1, r10
 	ldr	r0, [r4, #3272]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	adds	r0, r2, #1
-	bne	.L931
+	bne	.L932
 	ldr	r0, [ip, #4]
 	adds	r3, r3, #1
 	str	r1, [sp, #12]
@@ -6550,11 +6607,11 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
 	strb	r2, [r5, #7]
-.L931:
+.L932:
 	add	r10, r10, #1
 	add	fp, fp, #2
-	b	.L930
-.L934:
+	b	.L931
+.L935:
 	ldrh	r3, [r4, #306]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -6571,22 +6628,22 @@ allocate_data_superblock:
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #4]
-	cbz	r3, .L935
+	cbz	r3, .L936
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L936
-.L935:
+	cbnz	r3, .L937
+.L936:
 	movw	r2, #2748
-	ldr	r1, .L945+20
-	ldr	r0, .L945+4
+	ldr	r1, .L946+20
+	ldr	r0, .L946+4
 	bl	sftl_printk
-.L936:
+.L937:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L946:
+.L947:
 	.align	2
-.L945:
+.L946:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LANCHOR0+128
@@ -6609,65 +6666,65 @@ FtlGcFreeBadSuperBlk:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L959
+	ldr	r4, .L960
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L948
+	cbz	r3, .L949
 	movs	r7, #0
 	addw	r10, r4, #3212
-.L949:
+.L950:
 	ldrh	r2, [r4, #236]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L955
+	bhi	.L956
 	bl	FtlGcReFreshBadBlk
-.L948:
+.L949:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L955:
+.L956:
 	uxtah	r3, r4, r7
 	mov	r1, r8
 	mov	fp, #0
 	ldrb	r0, [r3, #264]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L950:
+.L951:
 	ldrh	r3, [r4, #3210]
 	uxth	r5, fp
 	cmp	r3, r5
-	bhi	.L954
+	bhi	.L955
 	adds	r7, r7, #1
-	b	.L949
-.L954:
+	b	.L950
+.L955:
 	uxth	r6, fp
 	add	r3, r4, r6, lsl #1
 	ldrh	r3, [r3, #3212]
 	cmp	r3, r9
-	bne	.L951
+	bne	.L952
 	mov	r1, r9
-	ldr	r0, .L959+4
+	ldr	r0, .L960+4
 	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [r4, #3210]
 	add	r3, r10, r6, lsl #1
-.L952:
+.L953:
 	cmp	r5, r1
-	bcc	.L953
+	bcc	.L954
 	subs	r1, r1, #1
 	strh	r1, [r4, #3210]	@ movhi
-.L951:
+.L952:
 	add	fp, fp, #1
-	b	.L950
-.L953:
+	b	.L951
+.L954:
 	ldrh	r0, [r3, #2]!
 	adds	r5, r5, #1
 	uxth	r5, r5
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L952
-.L960:
+	b	.L953
+.L961:
 	.align	2
-.L959:
+.L960:
 	.word	.LANCHOR0
 	.word	.LC102
 	.fnend
@@ -6686,11 +6743,11 @@ update_vpc_list:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L973
+	ldr	r4, .L974
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	bne	.L962
+	bne	.L963
 	ldrh	r3, [r4, #226]
 	cmp	r3, r0
 	itt	eq
@@ -6703,20 +6760,20 @@ update_vpc_list:
 	strheq	r3, [r4, #224]	@ movhi
 	ldrh	r3, [r4, #176]
 	cmp	r3, r0
-	bne	.L965
+	bne	.L966
 	movw	r3, #65535
 	strh	r3, [r4, #176]	@ movhi
-.L966:
+.L967:
 	mov	r1, r5
-	ldr	r0, .L973+4
+	ldr	r0, .L974+4
 	bl	List_remove_node
 	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L968
+	cbnz	r3, .L969
 	movw	r2, #2824
-	ldr	r1, .L973+8
-	ldr	r0, .L973+12
+	ldr	r1, .L974+8
+	ldr	r0, .L974+12
 	bl	sftl_printk
-.L968:
+.L969:
 	ldrh	r3, [r4, #2532]
 	mov	r0, r5
 	subs	r3, r3, #1
@@ -6729,33 +6786,33 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L972
+	ble	.L973
 	movw	r2, #2827
-	ldr	r1, .L973+8
-	ldr	r0, .L973+12
+	ldr	r1, .L974+8
+	ldr	r0, .L974+12
 	bl	sftl_printk
-.L972:
+.L973:
 	movs	r0, #1
 	pop	{r3, r4, r5, pc}
-.L965:
+.L966:
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L971
+	beq	.L972
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L971
+	beq	.L972
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	bne	.L966
-.L971:
+	bne	.L967
+.L972:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L962:
+.L963:
 	bl	List_update_data_list
-	b	.L971
-.L974:
+	b	.L972
+.L975:
 	.align	2
-.L973:
+.L974:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2524
 	.word	.LANCHOR1+296
@@ -6778,42 +6835,42 @@ decrement_vpc_count:
 	.save {r4, r5, r6, lr}
 	cmp	r0, r3
 	mov	r4, r0
-	ldr	r5, .L984
-	beq	.L976
+	ldr	r5, .L985
+	beq	.L977
 	ldr	r3, [r5, #76]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L977
+	cbnz	r2, .L978
 	mov	r1, r0
-	ldr	r0, .L984+4
+	ldr	r0, .L985+4
 	bl	sftl_printk
 	ldr	r3, [r5, #76]
 	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L978
-.L982:
+	cbz	r6, .L979
+.L983:
 	movs	r6, #0
-.L975:
+.L976:
 	mov	r0, r6
 	pop	{r4, r5, r6, pc}
-.L978:
+.L979:
 	movw	r2, #2842
-.L983:
-	ldr	r1, .L984+8
-	ldr	r0, .L984+12
+.L984:
+	ldr	r1, .L985+8
+	ldr	r0, .L985+12
 	bl	sftl_printk
-	b	.L975
-.L977:
+	b	.L976
+.L978:
 	subs	r2, r2, #1
 	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L976:
+.L977:
 	ldrh	r0, [r5, #3442]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L980
+	bne	.L981
 	strh	r4, [r5, #3442]	@ movhi
-	b	.L982
-.L980:
+	b	.L983
+.L981:
 	cmp	r4, r0
-	beq	.L982
+	beq	.L983
 	bl	update_vpc_list
 	ldr	r2, [r5, #2520]
 	adds	r6, r0, #0
@@ -6823,20 +6880,20 @@ decrement_vpc_count:
 	strh	r4, [r5, #3442]	@ movhi
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L984+16
+	ldr	r3, .L985+16
 	muls	r3, r2, r3
 	ldr	r2, [r5, #76]
 	uxth	r1, r3
 	ldrh	r2, [r2, r1, lsl #1]
 	cmp	r2, #0
-	bne	.L975
+	bne	.L976
 	cmp	r4, r1
-	beq	.L975
+	beq	.L976
 	movw	r2, #2858
-	b	.L983
-.L985:
+	b	.L984
+.L986:
 	.align	2
-.L984:
+.L985:
 	.word	.LANCHOR0
 	.word	.LC103
 	.word	.LANCHOR1+312
@@ -6855,43 +6912,46 @@ FtlSuperblockPowerLostFix:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	.pad #24
-	sub	sp, sp, #24
-	ldr	r5, .L999
-	mov	r3, #-1
-	movs	r7, #0
-	movw	r1, #61589
-	str	r3, [sp, #20]
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r7, .L1001
+	mov	r8, #0
+	movw	r2, #61589
 	mov	r4, r0
-	ldr	r2, [r5, #3304]
+	ldr	r5, .L1001+4
+	ldr	r3, [r7]
 	ldr	r6, [r5, #3336]
-	str	r2, [sp, #12]
-	mvn	r2, #2
-	str	r6, [sp, #16]
-	str	r2, [r6, #8]
-	mvn	r2, #1
-	str	r2, [r6, #12]
-	ldrh	r2, [r0]
-	strh	r7, [r6]	@ movhi
-	strh	r2, [r6, #2]	@ movhi
-	ldr	r2, [r5, #3304]
-	str	r1, [r2]
-	add	r1, r1, #304087040
-	ldr	r2, [r5, #3304]
-	add	r1, r1, #1269760
-	addw	r1, r1, #1507
-	str	r1, [r2, #4]
-	ldrh	r2, [r0, #4]
-	tst	r2, #1
+	str	r3, [sp, #20]
+	mov	r3, #-1
+	str	r3, [sp, #16]
+	ldr	r3, [r5, #3304]
+	str	r6, [sp, #12]
+	str	r3, [sp, #8]
+	mvn	r3, #2
+	str	r3, [r6, #8]
+	mvn	r3, #1
+	str	r3, [r6, #12]
+	ldrh	r3, [r0]
+	strh	r8, [r6]	@ movhi
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r5, #3304]
+	str	r2, [r3]
+	add	r2, r2, #304087040
+	ldr	r3, [r5, #3304]
+	add	r2, r2, #1269760
+	addw	r2, r2, #1507
+	str	r2, [r3, #4]
+	ldrh	r3, [r0, #4]
+	tst	r3, #1
 	ite	eq
-	moveq	r8, #6
-	movne	r8, #7
-.L992:
+	moveq	r9, #6
+	movne	r9, #7
+.L993:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L988
-.L989:
+	cbnz	r3, .L989
+.L990:
 	ldr	r2, [r5, #76]
 	ldrh	r1, [r4]
 	ldrh	r0, [r4, #4]
@@ -6899,39 +6959,46 @@ FtlSuperblockPowerLostFix:
 	subs	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #306]
+	ldr	r2, [sp, #20]
 	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [r4, #6]
 	strh	r3, [r4, #4]	@ movhi
-	add	sp, sp, #24
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L988:
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L994
+	bl	__stack_chk_fail
+.L989:
 	mov	r0, r4
 	bl	get_new_active_ppa
-	str	r0, [sp, #8]
+	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L989
+	beq	.L990
 	ldr	r3, [r5, #2596]
 	movs	r1, #1
-	add	r0, sp, #4
+	mov	r0, sp
 	str	r3, [r6, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	it	eq
-	moveq	r3, r7
+	moveq	r3, r8
 	str	r3, [r5, #2596]
 	movs	r3, #0
 	mov	r2, r3
 	bl	FlashProgPages
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
-	subs	r8, r8, #1
-	bne	.L992
-	b	.L989
-.L1000:
+	subs	r9, r9, #1
+	bne	.L993
+	b	.L990
+.L994:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1002:
 	.align	2
-.L999:
+.L1001:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
@@ -6949,47 +7016,47 @@ FtlMakeBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, #0
-	ldr	r9, .L1020+4
+	ldr	r9, .L1022+4
 	bl	FtlBbtMemInit
 	sub	r5, r9, #384
 	sub	r10, r9, #18
 	mov	r4, r5
 	bl	FtlLoadFactoryBbt
-.L1002:
+.L1004:
 	ldrh	r3, [r5, #258]
 	cmp	r8, r3
-	bcc	.L1008
+	bcc	.L1010
 	movs	r5, #0
-.L1009:
+.L1011:
 	ldrh	r3, [r4, #318]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1010
+	bhi	.L1012
 	ldrh	r5, [r4, #368]
 	movw	r6, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1011:
+.L1013:
 	ldrh	r3, [r4, #368]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1015
+	ble	.L1017
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1012
+	beq	.L1014
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1013
+	beq	.L1015
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1012:
+.L1014:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1011
-.L1008:
+	b	.L1013
+.L1010:
 	ldrh	r3, [r10, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3304]
@@ -6997,11 +7064,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3464]
 	str	fp, [r5, #3468]
-	beq	.L1003
+	beq	.L1005
 	ldrh	r7, [r5, #302]
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1020
+	ldr	r0, .L1022
 	mla	r7, r8, r7, r3
 	lsls	r3, r7, #10
 	str	r3, [r5, #3460]
@@ -7012,36 +7079,38 @@ FtlMakeBbt:
 	adds	r2, r2, #7
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
-.L1004:
+.L1006:
 	uxth	r0, r7
 	add	r8, r8, #1
 	add	r9, r9, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1002
-.L1003:
+	b	.L1004
+.L1005:
 	mov	r1, r8
 	bl	FlashGetBadBlockList
 	ldr	r1, [r9]
 	ldr	r0, [r5, #3464]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #302]
-.L1006:
+.L1008:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L1005:
+.L1007:
 	ldrh	r0, [r4, #302]
 	smlabb	r0, r0, r8, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1006
-	movs	r1, #16
-	ldr	r0, [r4, #3336]
+	beq	.L1008
+	movs	r2, #16
+	movs	r1, #0
 	strh	r6, [r10]	@ movhi
-	bl	__memzero
-	mov	r1, #4096
+	ldr	r0, [r4, #3336]
+	bl	ftl_memset
+	mov	r2, #4096
+	movs	r1, #0
 	ldr	r0, [r4, #3304]
-	bl	__memzero
+	bl	ftl_memset
 	movw	r3, #61664
 	strh	r3, [fp]	@ movhi
 	movs	r3, #0
@@ -7059,32 +7128,32 @@ FtlMakeBbt:
 	str	r3, [r4, #3460]
 	bl	ftl_memcpy
 	movs	r2, #1
-	ldr	r0, .L1020
+	ldr	r0, .L1022
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	ldr	r0, .L1020
+	ldr	r0, .L1022
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L1004
+	bne	.L1006
 	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1005
-.L1010:
+	b	.L1007
+.L1012:
 	bl	FtlBbmMapBadBlock
-	b	.L1009
-.L1013:
+	b	.L1011
+.L1015:
 	ldrh	r3, [r4, #356]
 	cmp	r3, r6
-	bne	.L1014
+	bne	.L1016
 	strh	r5, [r4, #356]	@ movhi
-	b	.L1012
-.L1014:
+	b	.L1014
+.L1016:
 	strh	r5, [r4, #360]	@ movhi
-.L1015:
+.L1017:
 	ldrh	r3, [r4, #356]
 	movs	r5, #0
 	ldr	r0, [r4, #3272]
@@ -7114,9 +7183,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1021:
+.L1023:
 	.align	2
-.L1020:
+.L1022:
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR0+384
 	.fnend
@@ -7147,25 +7216,25 @@ js_hash:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1026
+	ldr	r3, .L1028
 	add	r1, r1, r0
 	push	{r4, lr}
 	.save {r4, lr}
-.L1024:
+.L1026:
 	cmp	r0, r1
-	bne	.L1025
+	bne	.L1027
 	mov	r0, r3
 	pop	{r4, pc}
-.L1025:
+.L1027:
 	lsrs	r2, r3, #2
 	ldrb	r4, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsl #5
 	add	r2, r2, r4
 	eors	r3, r3, r2
-	b	.L1024
-.L1027:
+	b	.L1026
+.L1029:
 	.align	2
-.L1026:
+.L1028:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -7187,14 +7256,14 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L1029
+	bne	.L1031
 	ldrh	r3, [r0, #8]
-	cbz	r3, .L1030
+	cbz	r3, .L1032
 	movw	r2, #641
-	ldr	r1, .L1038
-	ldr	r0, .L1038+4
+	ldr	r1, .L1040
+	ldr	r0, .L1040+4
 	bl	sftl_printk
-.L1030:
+.L1032:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -7206,14 +7275,14 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	adds	r3, r3, #1
 	str	r3, [r4, #28]
-.L1031:
+.L1033:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1029:
+.L1031:
 	ldrh	r7, [r5, r3, lsl #1]
 	movs	r1, #255
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1038+8
+	ldr	r5, .L1040+8
 	ldr	r8, [r0, #24]
 	orr	r3, r3, r7, lsl #10
 	ldr	r6, [r5, #3336]
@@ -7234,11 +7303,11 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	movs	r2, #0
 	mov	r3, r2
-.L1032:
+.L1034:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L1034
+	bhi	.L1036
 	ldrh	r1, [r5, #314]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
@@ -7246,19 +7315,19 @@ Ftl_write_map_blk_to_last_page:
 	str	r0, [r6, #12]
 	movs	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1038+12
+	ldr	r0, .L1040+12
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L1031
-.L1034:
+	b	.L1033
+.L1036:
 	uxth	r0, r2
 	ldr	r1, [r8, r0, lsl #2]
 	cmp	r7, r1, lsr #10
-	bne	.L1033
+	bne	.L1035
 	ldr	r1, [r5, #3304]
 	adds	r3, r3, #1
 	uxth	r3, r3
@@ -7267,12 +7336,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r0, [r8, r0, lsl #2]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L1033:
+.L1035:
 	adds	r2, r2, #1
-	b	.L1032
-.L1039:
+	b	.L1034
+.L1041:
 	.align	2
-.L1038:
+.L1040:
 	.word	.LANCHOR1+332
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7294,13 +7363,13 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r4, r0
-	ldr	r7, .L1064
+	ldr	r7, .L1066
 	mov	r8, r1
 	movs	r6, #0
-	ldr	r9, .L1064+20
+	ldr	r9, .L1066+20
 	mov	r5, r7
 	str	r2, [sp, #4]
-.L1041:
+.L1043:
 	ldr	r3, [r7, #2576]
 	adds	r3, r3, #1
 	str	r3, [r7, #2576]
@@ -7308,52 +7377,53 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1042
+	bge	.L1044
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1043
-.L1042:
+	bne	.L1045
+.L1044:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1043:
+.L1045:
 	ldrh	r2, [r4]
 	ldr	r3, [r4, #12]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L1044
+	cbnz	r3, .L1046
 	mov	r2, #700
 	mov	r1, r9
-	ldr	r0, .L1064+4
+	ldr	r0, .L1066+4
 	bl	sftl_printk
-.L1044:
+.L1046:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L1045
+	bcc	.L1047
 	movw	r2, #701
 	mov	r1, r9
-	ldr	r0, .L1064+4
+	ldr	r0, .L1066+4
 	bl	sftl_printk
-.L1045:
+.L1047:
 	ldrh	r2, [r4]
-	movs	r1, #16
+	movs	r1, #0
 	ldr	r3, [r4, #12]
 	ldr	r0, [r5, #3336]
 	ldrh	r10, [r3, r2, lsl #1]
-	ldrh	r3, [r4, #2]
-	str	r0, [r5, #3468]
-	orr	r3, r3, r10, lsl #10
-	str	r3, [r5, #3460]
+	ldrh	r2, [r4, #2]
 	ldr	r3, [sp, #4]
+	str	r0, [r5, #3468]
+	orr	r2, r2, r10, lsl #10
 	str	r3, [r5, #3464]
-	bl	__memzero
-	ldr	r3, [r4, #28]
+	str	r2, [r5, #3460]
+	movs	r2, #16
+	bl	ftl_memset
+	ldr	r2, [r4, #28]
 	ldr	fp, [r5, #3468]
-	str	r3, [fp, #4]
+	str	r2, [fp, #4]
 	strh	r8, [fp, #8]	@ movhi
-	ldrh	r3, [r4, #4]
+	ldrh	r2, [r4, #4]
 	strh	r10, [fp, #2]	@ movhi
-	strh	r3, [fp]	@ movhi
+	strh	r2, [fp]	@ movhi
 	ldrh	r1, [r5, #314]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
@@ -7361,7 +7431,7 @@ FtlMapWritePage:
 	str	r0, [fp, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1064+8
+	ldr	r0, .L1066+8
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	adds	r3, r3, #1
@@ -7369,10 +7439,10 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3456]
 	adds	r1, r2, #1
-	bne	.L1046
+	bne	.L1048
 	ldr	r1, [r5, #3460]
 	adds	r6, r6, #1
-	ldr	r0, .L1064+12
+	ldr	r0, .L1066+12
 	uxth	r6, r6
 	bl	sftl_printk
 	ldrh	r3, [r4, #2]
@@ -7382,40 +7452,40 @@ FtlMapWritePage:
 	addls	r3, r3, #-1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1048
+	bls	.L1050
 	mov	r2, r6
 	ldr	r1, [r5, #3460]
-	ldr	r0, .L1064+16
+	ldr	r0, .L1066+16
 	bl	sftl_printk
-.L1049:
-	b	.L1049
-.L1048:
+.L1051:
+	b	.L1051
+.L1050:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1041
-.L1063:
-	b	.L1063
-.L1046:
+	beq	.L1043
+.L1065:
+	b	.L1065
+.L1048:
 	cmp	r3, #1
-	beq	.L1052
+	beq	.L1054
 	cmp	r2, #256
-	beq	.L1052
+	beq	.L1054
 	ldr	r0, [r4, #36]
-	cbz	r0, .L1053
-.L1052:
+	cbz	r0, .L1055
+.L1054:
 	movs	r3, #0
 	str	r3, [r4, #36]
-	b	.L1041
-.L1053:
+	b	.L1043
+.L1055:
 	ldr	r2, [r5, #3460]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r8, lsl #2]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1065:
+.L1067:
 	.align	2
-.L1064:
+.L1066:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LANCHOR0+3456
@@ -7438,20 +7508,20 @@ load_l2p_region:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, r0
-	ldr	r4, .L1073
+	ldr	r4, .L1075
 	mov	r8, r1
 	ldrh	r3, [r4, #340]
 	cmp	r3, r0
-	bcs	.L1067
+	bcs	.L1069
 	movw	r2, #485
-	ldr	r1, .L1073+4
-	ldr	r0, .L1073+8
+	ldr	r1, .L1075+4
+	ldr	r0, .L1075+8
 	bl	sftl_printk
-.L1067:
+.L1069:
 	ldr	r3, [r4, #3380]
 	movs	r5, #12
 	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L1068
+	cbnz	r7, .L1070
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2544]
 	ldrh	r2, [r4, #314]
@@ -7464,14 +7534,14 @@ load_l2p_region:
 	ldr	r3, [r4, #2544]
 	add	r5, r5, r3
 	str	r7, [r5, #4]
-.L1069:
+.L1071:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1068:
+.L1070:
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2544]
 	movs	r2, #1
-	ldr	r0, .L1073+12
+	ldr	r0, .L1075+12
 	mov	r1, r2
 	str	r7, [r4, #3460]
 	add	r3, r3, r5
@@ -7483,54 +7553,54 @@ load_l2p_region:
 	ldr	r8, [r4, #3468]
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1070
+	beq	.L1072
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1073+16
+	ldr	r0, .L1075+16
 	bl	sftl_printk
 	movs	r3, #4
 	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	ldr	r0, .L1073+20
+	ldr	r0, .L1075+20
 	bl	rknand_print_hex
 	ldrh	r3, [r4, #340]
 	movs	r2, #4
 	ldr	r1, [r4, #3380]
-	ldr	r0, .L1073+24
+	ldr	r0, .L1075+24
 	bl	rknand_print_hex
-.L1071:
+.L1073:
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1072
+	beq	.L1074
 	mov	r2, #508
-	ldr	r1, .L1073+4
-	ldr	r0, .L1073+8
+	ldr	r1, .L1075+4
+	ldr	r0, .L1075+8
 	bl	sftl_printk
-.L1072:
+.L1074:
 	ldr	r3, [r4, #2544]
 	movs	r1, #0
 	adds	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L1069
-.L1070:
+	b	.L1071
+.L1072:
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	bne	.L1071
+	bne	.L1073
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1073+28
+	ldr	r0, .L1075+28
 	bl	sftl_printk
 	ldr	r3, [r4, #2544]
 	mov	r1, r6
-	ldr	r0, .L1073+32
+	ldr	r0, .L1075+32
 	add	r3, r3, r5
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	b	.L1071
-.L1074:
+	b	.L1073
+.L1076:
 	.align	2
-.L1073:
+.L1075:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+379
 	.word	.LC8
@@ -7562,16 +7632,16 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	ldr	r5, .L1091
+	ldr	r5, .L1093
 	subs	r3, r3, #5
 	cmp	r2, r3
-	blt	.L1076
+	blt	.L1078
 	uxth	r0, r0
 	ldrh	r9, [r6, r0, lsl #1]
 	cmp	r9, #0
-	beq	.L1076
+	beq	.L1078
 	ldr	r3, [r4, #32]
-	cbnz	r3, .L1076
+	cbnz	r3, .L1078
 	movs	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r6, r0, lsl #1]	@ movhi
@@ -7581,43 +7651,43 @@ ftl_map_blk_gc:
 	strh	r3, [r4, #8]	@ movhi
 	ldrh	r3, [r5, #308]
 	cmp	r2, r3
-	bcc	.L1077
+	bcc	.L1079
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1077:
+.L1079:
 	movs	r6, #0
-.L1078:
+.L1080:
 	ldrh	r2, [r4, #6]
 	uxth	fp, r6
 	cmp	r2, fp
-	bhi	.L1085
+	bhi	.L1087
 	movs	r1, #1
 	mov	r0, r9
 	bl	FtlFreeSysBlkQueueIn
 	movs	r3, #0
 	str	r3, [r4, #32]
-.L1076:
+.L1078:
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #308]
 	cmp	r2, r3
-	bcc	.L1086
+	bcc	.L1088
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1086:
+.L1088:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1085:
+.L1087:
 	uxth	r7, r6
 	ldr	r2, [r10, r7, lsl #2]
 	add	r3, r10, r7, lsl #2
 	str	r3, [sp, #4]
 	cmp	r9, r2, lsr #10
-	bne	.L1079
+	bne	.L1081
 	ldr	r2, [r5, #3308]
 	ldr	r8, [r5, #3336]
-	ldr	r0, .L1091+4
+	ldr	r0, .L1093+4
 	str	r2, [r5, #3464]
 	str	r8, [r5, #3468]
 	ldr	r2, [r10, r7, lsl #2]
@@ -7627,39 +7697,39 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	beq	.L1080
+	beq	.L1082
 	movw	r2, #611
-	ldr	r1, .L1091+8
-	ldr	r0, .L1091+12
+	ldr	r1, .L1093+8
+	ldr	r0, .L1093+12
 	bl	sftl_printk
-.L1080:
+.L1082:
 	ldr	r2, [r5, #3456]
 	adds	r2, r2, #1
-	bne	.L1081
-.L1083:
+	bne	.L1083
+.L1085:
 	ldr	r2, [sp, #4]
 	movs	r3, #0
 	str	r3, [r2]
-.L1082:
-	b	.L1082
-.L1081:
+.L1084:
+	b	.L1084
+.L1083:
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	bne	.L1083
+	bne	.L1085
 	ldrh	r2, [r8]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1083
+	bne	.L1085
 	ldr	r2, [r5, #3464]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L1079:
+.L1081:
 	adds	r6, r6, #1
-	b	.L1078
-.L1092:
+	b	.L1080
+.L1094:
 	.align	2
-.L1091:
+.L1093:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+395
@@ -7680,7 +7750,7 @@ flush_l2p_region:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r4, #12
-	ldr	r5, .L1094
+	ldr	r5, .L1096
 	muls	r4, r0, r4
 	ldr	r3, [r5, #2544]
 	addw	r0, r5, #3396
@@ -7695,9 +7765,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r3, r4, r5, pc}
-.L1095:
+.L1097:
 	.align	2
-.L1094:
+.L1096:
 	.word	.LANCHOR0
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -7715,21 +7785,21 @@ log2phys:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
-	ldr	r4, .L1109
+	ldr	r4, .L1111
 	mov	r5, r1
 	mov	r7, r2
 	ldr	r3, [r4, #2556]
 	ldrh	r10, [r4, #312]
 	cmp	r0, r3
-	bcc	.L1097
+	bcc	.L1099
 	movw	r2, #813
-	ldr	r1, .L1109+4
-	ldr	r0, .L1109+8
+	ldr	r1, .L1111+4
+	ldr	r0, .L1111+8
 	bl	sftl_printk
-.L1097:
+.L1099:
 	ldr	r3, [r4, #2556]
 	cmp	r9, r3
-	bcs	.L1098
+	bcs	.L1100
 	add	r10, r10, #7
 	ldrh	r2, [r4, #342]
 	lsr	r6, r9, r10
@@ -7737,10 +7807,10 @@ log2phys:
 	movs	r3, #0
 	uxth	r6, r6
 	mov	fp, #12
-.L1099:
+.L1101:
 	uxth	r8, r3
 	cmp	r8, r2
-	bcc	.L1104
+	bcc	.L1106
 	bl	select_l2p_ram_region
 	mul	fp, fp, r0
 	ldr	r3, [r4, #2544]
@@ -7749,54 +7819,54 @@ log2phys:
 	add	r2, r3, fp
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1105
+	beq	.L1107
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L1105
+	bge	.L1107
 	bl	flush_l2p_region
-.L1105:
+.L1107:
 	mov	r1, r8
 	mov	r0, r6
 	bl	load_l2p_region
-	b	.L1101
-.L1098:
+	b	.L1103
+.L1100:
 	mov	r0, #-1
-	cbnz	r7, .L1096
+	cbnz	r7, .L1098
 	str	r0, [r5]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1104:
+.L1106:
 	adds	r3, r3, #1
 	mla	r0, fp, r3, r1
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r6
-	bne	.L1099
-.L1101:
+	bne	.L1101
+.L1103:
 	movs	r0, #1
 	movs	r3, #12
 	lsl	r0, r0, r10
 	subs	r0, r0, #1
 	and	r0, r0, r9
 	uxth	r0, r0
-	cbnz	r7, .L1102
+	cbnz	r7, .L1104
 	ldr	r2, [r4, #2544]
 	mla	r3, r3, r8, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r0, lsl #2]
 	str	r3, [r5]
-.L1103:
+.L1105:
 	ldr	r2, [r4, #2544]
 	movs	r3, #12
 	mla	r8, r3, r8, r2
 	ldr	r3, [r8, #4]
 	adds	r2, r3, #1
-	beq	.L1107
+	beq	.L1109
 	adds	r3, r3, #1
 	str	r3, [r8, #4]
-.L1107:
+.L1109:
 	movs	r0, #0
-.L1096:
+.L1098:
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1102:
+.L1104:
 	mul	r3, r3, r8
 	ldr	r2, [r4, #2544]
 	ldr	r1, [r5]
@@ -7809,10 +7879,10 @@ log2phys:
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	b	.L1103
-.L1110:
+	b	.L1105
+.L1112:
 	.align	2
-.L1109:
+.L1111:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+410
 	.word	.LC8
@@ -7827,105 +7897,116 @@ log2phys:
 	.type	FtlWriteDump_data, %function
 FtlWriteDump_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #24
-	sub	sp, sp, #24
-	ldr	r4, .L1129
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L1132
+	ldr	r7, .L1132+4
 	ldrh	r2, [r4, #32]
+	ldr	r3, [r7]
+	str	r3, [sp, #28]
 	cmp	r2, #0
-	beq	.L1112
+	beq	.L1114
 	ldrb	r3, [r4, #36]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1112
+	bne	.L1114
 	ldrb	r1, [r4, #35]	@ zero_extendqisi2
 	ldrh	r3, [r4, #306]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1112
-	ldrb	r7, [r4, #38]	@ zero_extendqisi2
-	cbnz	r7, .L1111
+	beq	.L1114
+	ldrb	r8, [r4, #38]	@ zero_extendqisi2
+	cmp	r8, #0
+	bne	.L1113
 	ldr	r6, [r4, #2556]
-	mov	r2, r7
-	mov	r1, sp
-	ldrh	r8, [r4, #236]
+	mov	r2, r8
+	add	r1, sp, #4
+	ldrh	r9, [r4, #236]
 	subs	r6, r6, #1
 	mov	r0, r6
 	bl	log2phys
-	ldr	r3, [sp]
+	ldr	r3, [sp, #4]
 	ldr	r5, [r4, #3336]
 	ldr	r0, [r4, #3304]
-	str	r3, [sp, #8]
+	str	r3, [sp, #12]
 	adds	r3, r3, #1
-	str	r6, [sp, #20]
-	str	r0, [sp, #12]
-	str	r5, [sp, #16]
-	str	r7, [r5, #4]
-	beq	.L1114
-	mov	r2, r7
+	str	r6, [sp, #24]
+	str	r0, [sp, #16]
+	str	r5, [sp, #20]
+	str	r8, [r5, #4]
+	beq	.L1116
+	mov	r2, r8
 	movs	r1, #1
-	add	r0, sp, #4
+	add	r0, sp, #8
 	bl	FlashReadPages
-.L1115:
-	ldr	r9, .L1129+4
-	movs	r7, #0
-	lsl	r8, r8, #2
-	mov	r10, r7
+.L1117:
+	ldr	r10, .L1132+8
+	mov	r8, #0
+	lsl	r9, r9, #2
+	mov	fp, r8
 	movw	r3, #61589
 	strh	r3, [r5]	@ movhi
-.L1116:
-	cmp	r8, r7
-	bne	.L1120
-.L1117:
+.L1118:
+	cmp	r9, r8
+	bne	.L1122
+.L1119:
 	movs	r3, #1
-.L1128:
+.L1131:
 	strb	r3, [r4, #38]
-.L1111:
-	add	sp, sp, #24
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1114:
+.L1113:
+	ldr	r2, [sp, #28]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1124
+	bl	__stack_chk_fail
+.L1116:
 	ldrh	r2, [r4, #314]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1115
-.L1120:
+	b	.L1117
+.L1122:
 	ldrh	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1117
-	ldr	r3, [sp, #8]
-	mov	r0, r9
+	beq	.L1119
+	ldr	r3, [sp, #12]
+	mov	r0, r10
 	str	r6, [r5, #8]
-	adds	r7, r7, #1
+	add	r8, r8, #1
 	str	r3, [r5, #12]
 	ldrh	r3, [r4, #28]
 	strh	r3, [r5, #2]	@ movhi
 	bl	get_new_active_ppa
 	ldr	r3, [r4, #2596]
 	movs	r1, #1
-	str	r0, [sp, #8]
-	add	r0, sp, #4
+	str	r0, [sp, #12]
+	add	r0, sp, #8
 	str	r3, [r5, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	it	eq
-	moveq	r3, r10
+	moveq	r3, fp
 	str	r3, [r4, #2596]
 	movs	r3, #0
 	mov	r2, r3
 	bl	FlashProgPages
 	ldrh	r0, [r4, #28]
 	bl	decrement_vpc_count
-	b	.L1116
-.L1112:
+	b	.L1118
+.L1114:
 	movs	r3, #0
-	b	.L1128
-.L1130:
+	b	.L1131
+.L1124:
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1133:
 	.align	2
-.L1129:
+.L1132:
 	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.word	.LANCHOR0+28
 	.fnend
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
@@ -7944,41 +8025,41 @@ FtlReUsePrevPpa:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r6, r0
-	ldr	r5, .L1141
+	ldr	r5, .L1144
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
 	ldr	r2, [r5, #76]
 	mov	r7, r0
 	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L1132
+	cbnz	r3, .L1135
 	ldr	r4, [r5, #2536]
-	cbz	r4, .L1133
+	cbz	r4, .L1136
 	ldr	r1, [r5, #2520]
 	mov	ip, #6
-	ldr	r2, .L1141+4
+	ldr	r2, .L1144+4
 	movw	lr, #65535
 	ldrh	r0, [r5, #228]
 	subs	r4, r4, r1
 	asrs	r4, r4, #1
 	muls	r4, r2, r4
 	uxth	r4, r4
-.L1134:
+.L1137:
 	uxth	r2, r3
 	cmp	r0, r2
-	bls	.L1133
+	bls	.L1136
 	cmp	r4, r7
-	bne	.L1135
+	bne	.L1138
 	mov	r1, r4
-	ldr	r0, .L1141+8
+	ldr	r0, .L1144+8
 	bl	List_remove_node
 	ldrh	r3, [r5, #228]
-	cbnz	r3, .L1136
+	cbnz	r3, .L1139
 	movw	r2, #1733
-	ldr	r1, .L1141+12
-	ldr	r0, .L1141+16
+	ldr	r1, .L1144+12
+	ldr	r0, .L1144+16
 	bl	sftl_printk
-.L1136:
+.L1139:
 	ldrh	r3, [r5, #228]
 	mov	r0, r4
 	subs	r3, r3, #1
@@ -7986,17 +8067,17 @@ FtlReUsePrevPpa:
 	bl	INSERT_DATA_LIST
 	ldr	r2, [r5, #76]
 	ldrh	r3, [r2, r7, lsl #1]
-.L1132:
+.L1135:
 	adds	r3, r3, #1
 	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L1133
-.L1135:
+	b	.L1136
+.L1138:
 	mul	r4, ip, r4
 	adds	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, lr
-	bne	.L1134
-.L1133:
+	bne	.L1137
+.L1136:
 	movs	r2, #1
 	add	r1, sp, #4
 	mov	r0, r6
@@ -8004,9 +8085,9 @@ FtlReUsePrevPpa:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L1142:
+.L1145:
 	.align	2
-.L1141:
+.L1144:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.word	.LANCHOR0+2536
@@ -8025,17 +8106,20 @@ FtlRecoverySuperblock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1283
+	movw	r2, #65535
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	movw	r2, #65535
-	ldrh	r3, [r0]
 	.pad #52
 	sub	sp, sp, #52
 	mov	r10, r0
+	ldr	r3, [r3]
+	str	r3, [sp, #44]
+	ldrh	r3, [r0]
 	cmp	r3, r2
-	beq	.L1271
+	beq	.L1148
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1279
+	ldr	r4, .L1283+4
 	str	r3, [sp]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp]
@@ -8043,27 +8127,30 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r4, #306]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1146
+	bne	.L1149
 	strh	r3, [r0, #4]	@ movhi
-.L1277:
+.L1281:
 	strb	r3, [r10, #6]
-.L1271:
+.L1148:
+	ldr	r3, .L1283
 	movs	r0, #0
-	add	sp, sp, #52
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1146:
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1220
+	bl	__stack_chk_fail
+.L1149:
 	ldrh	r0, [r0, #16]
-.L1147:
+.L1150:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1148
+	beq	.L1151
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
 	mov	r5, r0
-	beq	.L1149
+	beq	.L1152
 	ldr	r3, [r4, #3180]
 	movs	r2, #0
 	ldrh	fp, [r4, #236]
@@ -8079,11 +8166,11 @@ FtlRecoverySuperblock:
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [sp, #16]
-.L1150:
+.L1153:
 	uxth	r3, r2
 	cmp	fp, r3
-	bhi	.L1156
-	ldr	r6, .L1279
+	bhi	.L1159
+	ldr	r6, .L1283+4
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
@@ -8095,15 +8182,15 @@ FtlRecoverySuperblock:
 	add	fp, r3, #-1
 	movs	r3, #0
 	mov	r7, r8
-.L1157:
+.L1160:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1162
-	bne	.L1160
+	bhi	.L1165
+	bne	.L1163
 	adds	r3, r5, #1
 	uxth	r3, r3
 	str	r3, [sp, #8]
-.L1272:
+.L1276:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -8111,56 +8198,56 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #8]
 	str	r0, [sp, #4]
 	cmp	r3, r2
-	bne	.L1164
+	bne	.L1167
 	ldrh	r3, [sp, #8]
 	strh	r3, [r10, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [r10, #6]
 	strh	r3, [r10, #4]	@ movhi
-.L1164:
+.L1167:
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp]
 	cmp	r3, r2
-	bne	.L1165
+	bne	.L1168
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #20]
 	cmp	r3, r2
-	bne	.L1165
+	bne	.L1168
 	ldr	r1, [sp, #8]
 	mov	r2, r3
-.L1278:
+.L1282:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1271
-.L1148:
+	b	.L1148
+.L1151:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [r10, r1, lsl #1]
-	b	.L1147
-.L1149:
+	b	.L1150
+.L1152:
 	ldr	r3, [sp]
-	cbz	r3, .L1151
+	cbz	r3, .L1154
 	mov	r2, #1800
-	ldr	r1, .L1279+4
-	ldr	r0, .L1279+8
+	ldr	r1, .L1283+8
+	ldr	r0, .L1283+12
 	bl	sftl_printk
-.L1151:
+.L1154:
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1152
+	cbz	r3, .L1155
 	cmp	r6, r3
-	beq	.L1152
+	beq	.L1155
 	movw	r2, #1801
-	ldr	r1, .L1279+4
-	ldr	r0, .L1279+8
+	ldr	r1, .L1283+8
+	ldr	r0, .L1283+12
 	bl	sftl_printk
-.L1152:
+.L1155:
 	movs	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1277
-.L1156:
+	b	.L1281
+.L1159:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1153
+	beq	.L1156
 	mla	r1, lr, r4, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8182,49 +8269,49 @@ FtlRecoverySuperblock:
 	str	r6, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1153:
+.L1156:
 	adds	r2, r2, #1
-	b	.L1150
-.L1162:
+	b	.L1153
+.L1165:
 	ldr	r2, [r7]
-	cbnz	r2, .L1158
+	cbnz	r2, .L1161
 	ldr	r2, [r7, #12]
 	str	r2, [sp, #4]
 	ldr	r2, [r2, #4]
 	adds	r0, r2, #1
-	beq	.L1159
+	beq	.L1162
 	ldr	r1, [r6, #2596]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1159
+	cbz	r0, .L1162
 	adds	r2, r2, #1
 	str	r2, [r6, #2596]
-.L1159:
+.L1162:
 	ldr	r2, [sp, #4]
 	ldr	r2, [r2]
 	adds	r2, r2, #1
-	bne	.L1161
-.L1160:
+	bne	.L1164
+.L1163:
 	uxth	r2, r5
 	uxth	r3, r3
 	str	r2, [sp, #8]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1272
-.L1158:
-	ldr	r9, [sp, #8]
+	b	.L1276
 .L1161:
+	ldr	r9, [sp, #8]
+.L1164:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1157
-.L1165:
+	b	.L1160
+.L1168:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1166
+	bne	.L1169
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1167
-.L1166:
+	bne	.L1170
+.L1169:
 	ldr	r3, [r6, #3452]
 	uxth	r7, r5
 	uxth	r5, r5
@@ -8233,74 +8320,81 @@ FtlRecoverySuperblock:
 	ldr	r3, [sp]
 	it	eq
 	streq	fp, [r6, #3452]
-	ldr	r6, .L1279
+	ldr	r6, .L1283+4
 	adds	r3, r3, #7
 	cmp	r5, r3
 	itet	gt
 	subgt	r4, r7, #7
 	ldrle	r4, [sp]
 	uxthgt	r4, r4
-.L1170:
+.L1173:
 	cmp	r4, r7
-	bhi	.L1177
+	bhi	.L1180
 	movs	r3, #0
 	ldrh	lr, [r6, #236]
 	ldr	r0, [r6, #3292]
 	mov	r5, r3
 	ldr	r1, [sp, #16]
 	mov	ip, #20
-	b	.L1178
-.L1172:
+	b	.L1181
+.L1175:
 	ldrh	r2, [r1], #2
 	cmp	r2, r8
-	beq	.L1171
+	beq	.L1174
 	mla	r9, ip, r5, r0
 	adds	r5, r5, #1
 	orr	r2, r4, r2, lsl #10
 	uxth	r5, r5
 	str	r2, [r9, #4]
-.L1171:
+.L1174:
 	adds	r3, r3, #1
-.L1178:
+.L1181:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L1172
+	bhi	.L1175
 	movs	r2, #0
 	mov	r1, r5
 	bl	FlashReadPages
 	ldr	r3, [r6, #3292]
 	movs	r2, #20
 	mla	r5, r2, r5, r3
-.L1173:
+.L1176:
 	cmp	r5, r3
-	bne	.L1176
+	bne	.L1179
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1170
-.L1176:
+	b	.L1173
+.L1179:
 	ldr	r2, [r3]
-	cbnz	r2, .L1167
+	cbnz	r2, .L1170
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r8
-	beq	.L1175
+	beq	.L1178
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
 	strne	r2, [r6, #3452]
-.L1175:
+.L1178:
 	adds	r3, r3, #20
-	b	.L1173
-.L1177:
+	b	.L1176
+.L1284:
+	.align	2
+.L1283:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR1+435
+	.word	.LC8
+.L1180:
 	mov	r3, #-1
 	str	r3, [r6, #3452]
-.L1167:
-	ldr	r8, .L1279
+.L1170:
+	ldr	r8, .L1285+16
 	movs	r3, #1
 	ldr	r5, [sp]
 	mov	r4, r8
 	strh	r3, [r8, #3476]	@ movhi
-.L1179:
+.L1182:
 	ldrh	r6, [r4, #236]
 	movw	r9, #65535
 	ldr	r0, [r4, #3292]
@@ -8308,46 +8402,46 @@ FtlRecoverySuperblock:
 	ldr	r1, [sp, #16]
 	movs	r3, #0
 	str	r3, [sp, #12]
-.L1180:
+.L1183:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1182
+	bhi	.L1185
 	movs	r2, #0
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
 	movs	r3, #0
-.L1276:
+.L1280:
 	str	r3, [sp, #24]
 	ldr	r2, [sp, #12]
 	ldrh	r3, [sp, #24]
 	cmp	r2, r3
-	bhi	.L1212
+	bhi	.L1215
 	adds	r5, r5, #1
 	ldrh	r3, [r4, #306]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1179
+	bne	.L1182
 	ldrh	r2, [r4, #236]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1213:
+.L1216:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1271
+	bcs	.L1148
 	ldr	r1, [sp, #16]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
 	str	r1, [sp, #16]
 	add	r1, r3, #1
-	bne	.L1277
+	bne	.L1281
 	mov	r3, r1
-	b	.L1213
-.L1182:
+	b	.L1216
+.L1185:
 	ldrh	r2, [r1], #2
 	cmp	r2, r9
-	beq	.L1181
+	beq	.L1184
 	ldr	r7, [sp, #12]
 	orr	r2, r5, r2, lsl #10
 	mla	lr, ip, r7, r0
@@ -8356,16 +8450,10 @@ FtlRecoverySuperblock:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1181:
+.L1184:
 	adds	r3, r3, #1
-	b	.L1180
-.L1280:
-	.align	2
-.L1279:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+435
-	.word	.LC8
-.L1212:
+	b	.L1183
+.L1215:
 	ldr	r3, [sp, #24]
 	movs	r7, #20
 	muls	r7, r3, r7
@@ -8374,73 +8462,73 @@ FtlRecoverySuperblock:
 	add	r9, r3, r7
 	ldr	r6, [r9, #4]
 	ubfx	r0, r6, #10, #16
-	str	r6, [sp, #44]
+	str	r6, [sp, #40]
 	bl	P2V_plane
 	ldr	r3, [sp]
 	cmp	r5, r3
-	bcc	.L1184
+	bcc	.L1187
 	ldr	r3, [sp, #28]
-	bne	.L1185
+	bne	.L1188
 	ldr	r2, [sp, #20]
 	cmp	r2, r0
-	bhi	.L1184
-.L1185:
+	bhi	.L1187
+.L1188:
 	ldr	r2, [sp, #8]
 	cmp	r5, r2
-	bne	.L1186
+	bne	.L1189
 	ldr	r2, [sp, #4]
 	cmp	r2, r0
-	beq	.L1187
-.L1186:
+	beq	.L1190
+.L1189:
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1188
+	beq	.L1191
 	ldr	r9, [r9, #12]
 	movw	r3, #61589
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	beq	.L1189
+	beq	.L1192
 	ldrh	r0, [r10]
-.L1273:
+.L1277:
 	bl	decrement_vpc_count
-	b	.L1184
-.L1189:
+	b	.L1187
+.L1192:
 	ldr	fp, [r9, #4]
 	cmp	fp, #-1
-	beq	.L1190
+	beq	.L1193
 	ldr	r1, [r4, #2596]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1190
+	cbz	r0, .L1193
 	add	r3, fp, #1
 	str	r3, [r4, #2596]
-.L1190:
+.L1193:
 	ldrh	r2, [r9]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1191
+	beq	.L1194
 	mov	r2, #1952
-	ldr	r1, .L1281
-	ldr	r0, .L1281+4
+	ldr	r1, .L1285
+	ldr	r0, .L1285+4
 	bl	sftl_printk
-.L1191:
+.L1194:
 	ldr	r6, [r9, #8]
-	add	r1, sp, #40
+	add	r1, sp, #36
 	ldr	r3, [r9, #12]
 	movs	r2, #0
 	mov	r0, r6
-	str	r3, [sp, #36]
+	str	r3, [sp, #32]
 	bl	log2phys
 	ldr	r1, [r4, #3452]
 	adds	r0, r1, #1
-	beq	.L1192
+	beq	.L1195
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1192
-	ldr	r3, [sp, #36]
+	beq	.L1195
+	ldr	r3, [sp, #32]
 	adds	r2, r3, #1
-	beq	.L1193
+	beq	.L1196
 	ldr	r0, [r4, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8452,134 +8540,134 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1194
-.L1195:
+	bne	.L1197
+.L1198:
 	mov	r3, #-1
-	str	r3, [sp, #36]
-.L1202:
-	ldr	r0, [sp, #36]
+	str	r3, [sp, #32]
+.L1205:
+	ldr	r0, [sp, #32]
 	adds	r1, r0, #1
-	beq	.L1184
-.L1216:
+	beq	.L1187
+.L1219:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #244]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1208
+	bhi	.L1211
 	movw	r2, #2057
-	ldr	r1, .L1281
-	ldr	r0, .L1281+4
+	ldr	r1, .L1285
+	ldr	r0, .L1285+4
 	bl	sftl_printk
-.L1208:
+.L1211:
 	ldr	r3, [r8, #76]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1209
+	beq	.L1212
 	mov	r0, r6
-	b	.L1273
-.L1193:
-	ldr	r3, [sp, #44]
-	ldr	r2, [sp, #40]
+	b	.L1277
+.L1196:
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	bne	.L1184
+	bne	.L1187
 	movs	r2, #1
-	add	r1, sp, #36
+	add	r1, sp, #32
 	mov	r0, r6
 	bl	log2phys
-.L1184:
+.L1187:
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	b	.L1276
-.L1194:
+	b	.L1280
+.L1197:
 	ldr	r1, [r9, #8]
 	cmp	r6, r1
-	bne	.L1195
+	bne	.L1198
 	ldr	r1, [r9, #4]
 	ldr	r0, [r4, #3452]
 	str	r1, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1195
-	ldr	r1, [sp, #40]
-	ldr	r0, [sp, #44]
-	cmp	r1, r0
-	bne	.L1197
-.L1200:
+	beq	.L1198
 	ldr	r1, [sp, #36]
+	ldr	r0, [sp, #40]
+	cmp	r1, r0
+	bne	.L1200
+.L1203:
+	ldr	r1, [sp, #32]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1195
-.L1197:
-	ldr	r0, [sp, #36]
+	b	.L1198
+.L1200:
+	ldr	r0, [sp, #32]
 	cmp	r1, r0
-	beq	.L1195
-	adds	r0, r1, #1
 	beq	.L1198
+	adds	r0, r1, #1
+	beq	.L1201
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r9, [r3, #12]
 	bl	FlashReadPages
-.L1199:
+.L1202:
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1200
+	beq	.L1203
 	ldr	r3, [r9, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1200
+	beq	.L1203
 	mov	r1, r3
 	ldr	r0, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1195
-	b	.L1200
-.L1198:
+	beq	.L1198
+	b	.L1203
+.L1201:
 	str	r1, [r2, r7]
-	b	.L1199
-.L1192:
-	ldr	r3, [sp, #44]
-	ldr	r2, [sp, #40]
+	b	.L1202
+.L1195:
+	ldr	r3, [sp, #40]
+	ldr	r2, [sp, #36]
 	cmp	r2, r3
-	beq	.L1202
-	ldr	r1, [sp, #36]
+	beq	.L1205
+	ldr	r1, [sp, #32]
 	adds	r0, r1, #1
-	beq	.L1204
+	beq	.L1207
 	ldr	r3, [r8, #252]
 	cmp	r3, r1, lsr #10
-	bhi	.L1204
-	ldr	r0, .L1281+8
-.L1275:
+	bhi	.L1207
+	ldr	r0, .L1285+8
+.L1279:
 	bl	sftl_printk
-	b	.L1184
-.L1204:
+	b	.L1187
+.L1207:
 	movs	r2, #1
-	add	r1, sp, #44
+	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	ldr	r9, [sp, #40]
+	ldr	r9, [sp, #36]
 	cmp	r9, #-1
-	beq	.L1202
-	ldr	r3, [sp, #36]
+	beq	.L1205
+	ldr	r3, [sp, #32]
 	cmp	r9, r3
-	beq	.L1206
+	beq	.L1209
 	ubfx	r0, r9, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L1207
+	beq	.L1210
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L1207
+	beq	.L1210
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	bne	.L1202
-.L1207:
+	bne	.L1205
+.L1210:
 	ldr	r0, [r8, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8589,22 +8677,22 @@ FtlRecoverySuperblock:
 	ldr	r3, [r8, #3292]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1202
+	beq	.L1205
 	ldr	r1, [r7, #4]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1202
+	bne	.L1205
 	movs	r2, #1
-	add	r1, sp, #40
+	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-	b	.L1202
-.L1209:
+	b	.L1205
+.L1212:
 	mov	r1, r6
-	ldr	r0, .L1281+12
-	b	.L1275
-.L1188:
+	ldr	r0, .L1285+12
+	b	.L1279
+.L1191:
 	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	itttt	ls
@@ -8616,31 +8704,36 @@ FtlRecoverySuperblock:
 	bl	decrement_vpc_count
 	ldr	r3, [r4, #3452]
 	adds	r2, r3, #1
-	bne	.L1211
-.L1274:
+	bne	.L1214
+.L1278:
 	str	fp, [r4, #3452]
-	b	.L1184
-.L1211:
+	b	.L1187
+.L1214:
 	cmp	fp, r3
-	bcs	.L1184
-	b	.L1274
-.L1187:
+	bcs	.L1187
+	b	.L1278
+.L1190:
 	ldrb	r3, [sp, #4]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [r10, #2]	@ movhi
 	ldr	r2, [sp, #4]
 	strb	r3, [r10, #6]
-	b	.L1278
-.L1206:
+	b	.L1282
+.L1209:
 	mov	r0, r9
-	b	.L1216
-.L1282:
+	b	.L1219
+.L1220:
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1286:
 	.align	2
-.L1281:
+.L1285:
 	.word	.LANCHOR1+435
 	.word	.LC8
 	.word	.LC109
 	.word	.LC110
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	1
@@ -8652,122 +8745,136 @@ FtlRecoverySuperblock:
 	.type	ftl_check_vpc, %function
 ftl_check_vpc:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r5, .L1312
 	movs	r4, #0
-	ldr	r6, .L1307
-	ldr	r7, .L1307+4
-	ldr	r1, .L1307+8
-	mov	r5, r6
-	ldr	r0, .L1307+12
+	ldr	r6, .L1312+4
+	ldr	r3, [r5]
+	ldr	r1, .L1312+8
+	ldr	r0, .L1312+12
+	ldr	r7, .L1312+16
+	str	r3, [sp, #12]
 	bl	sftl_printk
-	mov	r1, #8192
-	ldr	r0, .L1307+4
-	bl	__memzero
-.L1284:
+	mov	r2, #8192
+	movs	r1, #0
+	ldr	r0, .L1312+16
+	bl	ftl_memset
+	str	r5, [sp, #4]
+	mov	r5, r6
+.L1288:
 	ldr	r3, [r6, #2556]
 	cmp	r4, r3
-	bcc	.L1286
-	ldr	r8, .L1307+4
+	bcc	.L1290
+	ldr	r8, .L1312+16
 	movs	r4, #0
-	ldr	r10, .L1307+24
-	mov	r7, r4
+	ldr	r10, .L1312+28
+	mov	r6, r4
 	movw	r9, #65535
-.L1287:
+.L1291:
 	ldrh	r2, [r5, #244]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1289
+	bhi	.L1293
 	ldr	r4, [r5, #2536]
-	cbz	r4, .L1290
+	cbz	r4, .L1294
 	ldr	r3, [r5, #2520]
-	movs	r6, #0
+	movs	r7, #0
 	ldrh	r8, [r5, #228]
 	mov	fp, #6
-	ldr	r9, .L1307+4
+	ldr	r9, .L1312+16
 	subs	r4, r4, r3
-	ldr	r3, .L1307+16
+	ldr	r3, .L1312+20
 	asrs	r4, r4, #1
-	ldr	r10, .L1307+28
+	ldr	r10, .L1312+32
 	muls	r4, r3, r4
 	uxth	r4, r4
-.L1291:
-	uxth	r3, r6
+.L1295:
+	uxth	r3, r7
 	cmp	r8, r3
-	bls	.L1290
+	bls	.L1294
 	ldr	r3, [r5, #76]
 	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L1292
-	movs	r7, #1
+	cbz	r2, .L1296
+	movs	r6, #1
 	ldrh	r3, [r9, r4, lsl #1]
 	mov	r1, r4
 	mov	r0, r10
 	bl	sftl_printk
-.L1292:
+.L1296:
 	mul	r4, fp, r4
 	ldr	r3, [r5, #2520]
-	adds	r6, r6, #1
+	adds	r7, r7, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L1291
-.L1290:
-	cbz	r7, .L1283
+	bne	.L1295
+.L1294:
+	cbz	r6, .L1287
 	movw	r2, #2383
-	ldr	r1, .L1307+8
-	ldr	r0, .L1307+20
+	ldr	r1, .L1312+8
+	ldr	r0, .L1312+24
 	bl	sftl_printk
-.L1283:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1286:
+.L1287:
+	ldr	r3, [sp, #4]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1299
+	bl	__stack_chk_fail
+.L1290:
 	movs	r2, #0
-	add	r1, sp, #4
+	add	r1, sp, #8
 	mov	r0, r4
 	bl	log2phys
-	ldr	r0, [sp, #4]
+	ldr	r0, [sp, #8]
 	adds	r3, r0, #1
-	beq	.L1285
+	beq	.L1289
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r7, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L1285:
-	adds	r4, r4, #1
-	b	.L1284
 .L1289:
+	adds	r4, r4, #1
+	b	.L1288
+.L1293:
 	ldr	r3, [r5, #76]
-	uxth	r6, r4
-	ldrh	r2, [r3, r6, lsl #1]
-	ldrh	r3, [r8, r6, lsl #1]
+	uxth	r7, r4
+	ldrh	r2, [r3, r7, lsl #1]
+	ldrh	r3, [r8, r7, lsl #1]
 	cmp	r2, r3
-	beq	.L1288
-	mov	r1, r6
+	beq	.L1292
+	mov	r1, r7
 	mov	r0, r10
 	bl	sftl_printk
 	ldr	r3, [r5, #76]
-	ldrh	r3, [r3, r6, lsl #1]
+	ldrh	r3, [r3, r7, lsl #1]
 	cmp	r3, r9
-	beq	.L1288
-	ldrh	r2, [r8, r6, lsl #1]
+	beq	.L1292
+	ldrh	r2, [r8, r7, lsl #1]
 	cmp	r2, r3
 	it	hi
-	movhi	r7, #1
-.L1288:
+	movhi	r6, #1
+.L1292:
 	adds	r4, r4, #1
-	b	.L1287
-.L1308:
+	b	.L1291
+.L1299:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1313:
 	.align	2
-.L1307:
+.L1312:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
-	.word	check_vpc_table
 	.word	.LANCHOR1+457
 	.word	.LC111
+	.word	check_vpc_table
 	.word	-1431655765
 	.word	.LC8
 	.word	.LC112
@@ -8785,62 +8892,67 @@ ftl_scan_all_data:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
 	movs	r5, #0
-	ldr	r6, .L1323
-	.pad #32
-	sub	sp, sp, #32
+	ldr	r6, .L1329
+	.pad #36
+	sub	sp, sp, #36
 	movs	r1, #0
-	ldr	r8, .L1323+16
-	mov	r4, r6
-	ldr	r0, .L1323+4
+	ldr	r7, .L1329+4
+	ldr	r9, .L1329+20
+	ldr	r3, [r6]
+	mov	r4, r7
+	ldr	r0, .L1329+8
+	str	r3, [sp, #28]
 	bl	sftl_printk
-.L1310:
-	ldr	r3, [r6, #2556]
+.L1315:
+	ldr	r3, [r7, #2556]
 	cmp	r5, r3
-	bcc	.L1316
-	add	sp, sp, #32
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1316:
+	bcc	.L1321
+	ldr	r2, [sp, #28]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1322
+	bl	__stack_chk_fail
+.L1321:
 	movs	r2, #0
-	add	r1, sp, #28
+	add	r1, sp, #24
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L1311
-	ldr	r2, [sp, #28]
+	cbnz	r3, .L1316
+	ldr	r2, [sp, #24]
 	mov	r1, r5
-	mov	r0, r8
+	mov	r0, r9
 	bl	sftl_printk
-.L1311:
-	ldr	r3, [sp, #28]
+.L1316:
+	ldr	r3, [sp, #24]
 	adds	r2, r3, #1
-	beq	.L1313
+	beq	.L1318
 	str	r3, [r4, #3460]
 	movs	r2, #0
 	ldr	r3, [r4, #3304]
 	movs	r1, #1
-	ldr	r7, [r4, #3336]
-	ldr	r0, .L1323+8
+	ldr	r8, [r4, #3336]
+	ldr	r0, .L1329+12
 	str	r3, [r4, #3464]
 	str	r5, [r4, #3472]
-	str	r7, [r4, #3468]
+	str	r8, [r4, #3468]
 	str	r2, [r4, #3456]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	beq	.L1314
+	beq	.L1319
 	adds	r3, r3, #1
-	beq	.L1314
-	ldr	r3, [r7, #8]
+	beq	.L1319
+	ldr	r3, [r8, #8]
 	cmp	r5, r3
-	beq	.L1313
-.L1314:
+	beq	.L1318
+.L1319:
 	ldr	r2, [r4, #3464]
 	ldr	r3, [r4, #3468]
-	ldr	r0, .L1323+12
+	ldr	r0, .L1329+16
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -8855,12 +8967,17 @@ ftl_scan_all_data:
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1313:
+.L1318:
 	adds	r5, r5, #1
-	b	.L1310
-.L1324:
+	b	.L1315
+.L1322:
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1330:
 	.align	2
-.L1323:
+.L1329:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC114
 	.word	.LANCHOR0+3456
@@ -8877,42 +8994,45 @@ ftl_scan_all_data:
 	.type	FtlGcScanTempBlk, %function
 FtlGcScanTempBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 40
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1362
+	ldr	r3, .L1369
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #44
-	sub	sp, sp, #44
+	.pad #52
+	sub	sp, sp, #52
 	mov	r5, r0
 	str	r1, [sp, #4]
+	ldr	r3, [r3]
+	str	r3, [sp, #44]
+	ldr	r3, .L1369+4
 	ldrh	r6, [r3, #4]
 	movw	r3, #65535
 	cmp	r6, r3
-	beq	.L1352
-	cbnz	r6, .L1326
-.L1327:
+	beq	.L1359
+	cbnz	r6, .L1332
+.L1333:
 	bl	FtlGcPageVarInit
-	b	.L1328
-.L1352:
+	b	.L1334
+.L1359:
 	movs	r6, #0
-.L1326:
-	ldr	r3, .L1362+4
+.L1332:
+	ldr	r3, .L1369+8
 	ldr	r2, [sp, #4]
 	ldrh	r3, [r3, #306]
 	cmp	r3, r2
-	beq	.L1327
-.L1328:
+	beq	.L1333
+.L1334:
 	mov	fp, #0
-.L1346:
+.L1352:
 	ldrh	r2, [r5]
 	movs	r3, #0
 	strb	r3, [r5, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1329
-	ldr	r4, .L1362+4
-.L1349:
+	beq	.L1335
+	ldr	r4, .L1369+8
+.L1355:
 	ldr	r3, [r4, #3292]
 	movs	r2, #0
 	ldrh	ip, [r4, #236]
@@ -8926,31 +9046,31 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #8]
 	ldrh	r3, [r4, #316]
 	str	r3, [sp, #12]
-.L1330:
+.L1336:
 	uxth	r3, r2
 	cmp	ip, r3
-	bhi	.L1334
+	bhi	.L1340
 	mov	r10, #0
 	movs	r2, #0
 	mov	r1, r7
 	ldr	r0, [sp]
 	bl	FlashReadPages
-.L1335:
+.L1341:
 	uxth	r3, r10
 	cmp	r7, r3
-	bhi	.L1347
+	bhi	.L1353
 	ldr	r3, [sp, #4]
 	add	fp, fp, #1
 	adds	r6, r6, #1
 	uxth	r6, r6
 	cmp	r3, fp
-	bls	.L1348
-.L1350:
+	bls	.L1354
+.L1356:
 	ldrh	r3, [r4, #306]
 	cmp	r3, r6
-	bhi	.L1349
-.L1329:
-	ldr	r3, .L1362
+	bhi	.L1355
+.L1335:
+	ldr	r3, .L1369+4
 	movw	r2, #65535
 	strh	r6, [r5, #2]	@ movhi
 	mov	r1, r6
@@ -8959,11 +9079,11 @@ FtlGcScanTempBlk:
 	movs	r2, #0
 	strb	r2, [r5, #6]
 	bl	ftl_sb_update_avl_pages
-	b	.L1351
-.L1334:
+	b	.L1357
+.L1340:
 	ldrh	r3, [lr], #2
 	cmp	r3, r8
-	beq	.L1331
+	beq	.L1337
 	ldr	r0, [sp]
 	movs	r1, #20
 	orr	r3, r6, r3, lsl #10
@@ -8987,10 +9107,10 @@ FtlGcScanTempBlk:
 	str	r0, [r1, #8]
 	add	r3, r3, r9
 	str	r3, [r1, #12]
-.L1331:
+.L1337:
 	adds	r2, r2, #1
-	b	.L1330
-.L1347:
+	b	.L1336
+.L1353:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, r10
@@ -9000,12 +9120,12 @@ FtlGcScanTempBlk:
 	ldr	r9, [r1, #12]
 	str	r0, [sp]
 	cmp	r8, #0
-	bne	.L1336
+	bne	.L1342
 	ldrh	r1, [r9]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1337
-.L1360:
+	bne	.L1343
+.L1367:
 	ldrh	r2, [r5]
 	movs	r1, #0
 	ldr	r3, [r4, #76]
@@ -9017,86 +9137,94 @@ FtlGcScanTempBlk:
 	strh	r3, [r5]	@ movhi
 	strh	r3, [r4, #176]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1346
-.L1337:
+	b	.L1352
+.L1343:
 	ldr	r0, [r9, #8]
 	ldr	r2, [r4, #2556]
 	str	r3, [sp, #8]
 	cmp	r0, r2
-	bhi	.L1360
+	bhi	.L1367
 	mov	r2, r8
-	add	r1, sp, #16
+	add	r1, sp, #20
 	bl	log2phys
 	ldr	r2, [r9, #12]
-	ldr	r1, [sp, #16]
+	ldr	r1, [sp, #20]
 	ldr	r3, [sp, #8]
 	cmp	r2, r1
-	beq	.L1340
-.L1342:
+	beq	.L1346
+.L1348:
 	ldr	r2, [r9, #8]
-.L1361:
+.L1368:
 	ldr	r1, [sp]
 	add	r10, r10, #1
 	ldr	r0, [r9, #12]
 	bl	FtlGcUpdatePage
-	b	.L1335
-.L1340:
+	b	.L1341
+.L1346:
 	str	r3, [sp, #8]
 	adds	r3, r2, #1
-	beq	.L1342
-	str	r2, [sp, #24]
+	beq	.L1348
+	str	r2, [sp, #28]
 	movs	r1, #1
 	ldr	r2, [r4, #3320]
-	add	r0, sp, #20
-	str	r2, [sp, #28]
-	ldr	r2, [r4, #3340]
+	add	r0, sp, #24
 	str	r2, [sp, #32]
+	ldr	r2, [r4, #3340]
+	str	r2, [sp, #36]
 	mov	r2, r8
 	bl	FlashReadPages
 	ldrh	r2, [r4, #262]
 	ldr	r1, [r4, #3292]
 	ldr	r3, [sp, #8]
-	ldr	r0, [sp, #28]
+	ldr	r0, [sp, #32]
 	lsls	r2, r2, #7
 	add	ip, r3, r1
-.L1343:
+.L1349:
 	cmp	r8, r2
-	beq	.L1342
+	beq	.L1348
 	ldr	r1, [ip, #8]
 	ldr	r3, [r0, r8, lsl #2]
 	ldr	r1, [r1, r8, lsl #2]
 	cmp	r1, r3
-	beq	.L1344
-	ldr	r2, [sp, #24]
+	beq	.L1350
+	ldr	r2, [sp, #28]
 	ldrh	r1, [r5]
-	ldr	r0, .L1362+8
+	ldr	r0, .L1369+12
 	bl	sftl_printk
-	b	.L1360
-.L1344:
+	b	.L1367
+.L1350:
 	add	r8, r8, #1
-	b	.L1343
-.L1336:
+	b	.L1349
+.L1342:
 	mov	r2, #-1
-	b	.L1361
-.L1348:
-	ldr	r2, .L1362
+	b	.L1368
+.L1354:
+	ldr	r2, .L1369+4
 	movw	r1, #65535
 	ldrh	r3, [r2, #4]
 	cmp	r3, r1
-	beq	.L1350
+	beq	.L1356
 	add	r3, r3, fp
 	strh	r3, [r2, #4]	@ movhi
 	ldrh	r3, [r4, #306]
 	cmp	r3, r6
-	bls	.L1350
-.L1351:
+	bls	.L1356
+.L1357:
+	ldr	r3, .L1369
 	mov	r0, #-1
-	add	sp, sp, #44
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1358
+	bl	__stack_chk_fail
+.L1358:
+	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1363:
+.L1370:
 	.align	2
-.L1362:
+.L1369:
+	.word	__stack_chk_guard
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LC117
@@ -9111,116 +9239,126 @@ FtlGcScanTempBlk:
 	.type	FtlReadRefresh, %function
 FtlReadRefresh:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 88
+	@ args = 0, pretend = 0, frame = 96
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	.pad #92
-	sub	sp, sp, #92
-	ldr	r6, .L1380
-	ldr	r9, [r6, #2724]
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #96
+	sub	sp, sp, #96
+	ldr	r6, .L1388
+	ldr	r7, .L1388+4
+	ldr	r10, [r6, #2724]
 	mov	r5, r6
-	cmp	r9, #0
-	beq	.L1365
+	ldr	r3, [r7]
+	str	r3, [sp, #92]
+	cmp	r10, #0
+	beq	.L1372
 	ldr	r2, [r6, #2728]
 	ldr	r3, [r6, #2556]
 	cmp	r2, r3
-	bcs	.L1366
+	bcs	.L1373
 	mov	r4, #2048
-.L1371:
+.L1378:
 	ldr	r0, [r5, #2728]
 	ldr	r3, [r5, #2556]
 	cmp	r0, r3
-	bcc	.L1367
-.L1370:
+	bcc	.L1374
+.L1377:
 	mov	r0, #-1
-.L1364:
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1367:
+.L1371:
+	ldr	r2, [sp, #92]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1383
+	bl	__stack_chk_fail
+.L1374:
 	movs	r2, #0
-	mov	r1, sp
+	add	r1, sp, #4
 	bl	log2phys
-	ldr	r2, [sp]
+	ldr	r2, [sp, #4]
 	ldr	r3, [r5, #2728]
 	adds	r1, r2, #1
 	add	r3, r3, #1
 	str	r3, [r5, #2728]
-	beq	.L1369
-	str	r3, [sp, #20]
-	add	r0, sp, #88
+	beq	.L1376
+	str	r3, [sp, #24]
+	add	r0, sp, #96
 	ldr	r3, [r5, #3328]
 	movs	r1, #1
-	str	r2, [sp, #8]
+	str	r2, [sp, #12]
 	movs	r2, #0
-	str	r2, [r0, #-84]!
-	str	r3, [sp, #12]
-	add	r3, sp, #24
+	str	r2, [r0, #-88]!
 	str	r3, [sp, #16]
+	add	r3, sp, #28
+	str	r3, [sp, #20]
 	bl	FlashReadPages
-	ldr	r3, [sp, #4]
+	ldr	r3, [sp, #8]
 	cmp	r3, #256
-	bne	.L1370
-	ldr	r0, [sp]
+	bne	.L1377
+	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1370
-.L1369:
+	b	.L1377
+.L1376:
 	subs	r4, r4, #1
-	bne	.L1371
-	b	.L1370
-.L1366:
+	bne	.L1378
+	b	.L1377
+.L1373:
 	ldr	r3, [r6, #2560]
 	movs	r0, #0
 	str	r0, [r6, #2724]
 	str	r0, [r6, #2728]
 	str	r3, [r6, #2720]
-	b	.L1364
-.L1365:
-	ldr	r8, [r6, #2560]
+	b	.L1371
+.L1372:
+	ldr	r9, [r6, #2560]
 	movw	r4, #10000
 	ldr	r1, [r6, #2616]
-	ldr	r7, [r6, #2720]
-	add	r3, r8, #1048576
+	ldr	r8, [r6, #2720]
+	add	r3, r9, #1048576
 	cmp	r1, r4
 	ite	hi
 	movhi	r4, #31
 	movls	r4, #63
-	cmp	r7, r3
-	bhi	.L1375
+	cmp	r8, r3
+	bhi	.L1382
 	ldr	r3, [r6, #2556]
 	lsrs	r1, r1, #10
 	mov	r0, #1000
 	adds	r1, r1, #1
 	muls	r0, r3, r0
 	bl	__aeabi_uidiv
-	add	r0, r0, r7
-	cmp	r8, r0
-	bhi	.L1375
+	add	r0, r0, r8
+	cmp	r9, r0
+	bhi	.L1382
 	ldrh	r3, [r6, #2500]
 	ands	r0, r4, r3
-	bne	.L1377
+	bne	.L1385
 	ldr	r2, [r6, #2744]
 	cmp	r3, r2
-	beq	.L1364
-.L1375:
+	beq	.L1371
+.L1382:
 	ldrh	r3, [r5, #2500]
 	movs	r0, #0
 	str	r0, [r5, #2728]
-	str	r8, [r5, #2720]
+	str	r9, [r5, #2720]
 	str	r3, [r5, #2744]
 	movs	r3, #1
 	str	r3, [r5, #2724]
-	b	.L1364
-.L1377:
-	mov	r0, r9
-	b	.L1364
-.L1381:
+	b	.L1371
+.L1385:
+	mov	r0, r10
+	b	.L1371
+.L1383:
+	add	sp, sp, #96
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1389:
 	.align	2
-.L1380:
+.L1388:
 	.word	.LANCHOR0
+	.word	__stack_chk_guard
 	.fnend
 	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	1
@@ -9237,30 +9375,30 @@ l2p_flush:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r4, #0
-	ldr	r5, .L1386
+	ldr	r5, .L1394
 	movs	r6, #12
 	bl	FtlWriteDump_data
-.L1383:
+.L1391:
 	ldrh	r3, [r5, #342]
 	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1385
+	bhi	.L1393
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1385:
+.L1393:
 	ldr	r2, [r5, #2544]
 	uxth	r3, r4
 	mla	r3, r6, r3, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1384
+	bge	.L1392
 	bl	flush_l2p_region
-.L1384:
+.L1392:
 	adds	r4, r4, #1
-	b	.L1383
-.L1387:
+	b	.L1391
+.L1395:
 	.align	2
-.L1386:
+.L1394:
 	.word	.LANCHOR0
 	.fnend
 	.size	l2p_flush, .-l2p_flush
@@ -9275,30 +9413,37 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1409
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1400
-	adds	r2, r0, r1
+	ldr	r4, .L1409+4
 	.pad #108
 	sub	sp, sp, #108
-	mov	r8, r0
 	mov	r6, r1
-	ldrh	r3, [r4, #300]
-	cmp	r2, r3
-	bhi	.L1396
+	adds	r1, r0, r1
+	ldr	r2, [r3]
+	mov	r8, r0
+	str	r3, [sp, #4]
+	str	r2, [sp, #100]
+	ldrh	r2, [r4, #300]
+	cmp	r1, r2
+	bhi	.L1405
 	ldrh	r7, [r4, #312]
 	mov	r9, #0
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1390:
-	cbnz	r6, .L1395
-.L1388:
+.L1398:
+	cbnz	r6, .L1403
+.L1396:
+	ldr	r3, [sp, #4]
 	mov	r0, r9
-	add	sp, sp, #108
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1395:
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1404
+	bl	__stack_chk_fail
+.L1403:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
@@ -9309,31 +9454,31 @@ FtlVendorPartWrite:
 	bl	__aeabi_uidivmod
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	str	r1, [sp, #4]
+	str	r1, [sp]
 	subs	r5, r3, r1
 	uxth	r5, r5
 	cmp	r6, r5
 	it	cc
 	uxthcc	r5, r6
-	cbz	r2, .L1392
+	cbz	r2, .L1400
 	cmp	r5, r3
-	beq	.L1392
+	beq	.L1400
 	ldr	r3, [r4, #3312]
-	add	r0, sp, #20
-	str	r2, [sp, #24]
+	add	r0, sp, #16
+	str	r2, [sp, #20]
 	movs	r2, #1
 	mov	r1, r2
+	str	r3, [sp, #24]
+	add	r3, sp, #36
 	str	r3, [sp, #28]
-	add	r3, sp, #40
-	str	r3, [sp, #32]
 	bl	FlashReadPages
-.L1393:
+.L1401:
 	lsls	r3, r5, #9
 	ldr	r0, [r4, #3312]
 	mov	r1, r10
 	mov	r2, r3
 	str	r3, [sp, #8]
-	ldr	r3, [sp, #4]
+	ldr	r3, [sp]
 	subs	r6, r6, r5
 	add	r8, r8, r5
 	add	fp, fp, #4
@@ -9341,7 +9486,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r7
 	ldr	r2, [r4, #3312]
-	ldr	r0, .L1400+4
+	ldr	r0, .L1409+8
 	adds	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
@@ -9349,19 +9494,24 @@ FtlVendorPartWrite:
 	it	eq
 	moveq	r9, #-1
 	add	r10, r10, r3
-	b	.L1390
-.L1392:
+	b	.L1398
+.L1400:
 	ldrh	r2, [r4, #314]
 	movs	r1, #0
 	ldr	r0, [r4, #3312]
 	bl	ftl_memset
-	b	.L1393
-.L1396:
+	b	.L1401
+.L1405:
 	mov	r9, #-1
-	b	.L1388
-.L1401:
+	b	.L1396
+.L1404:
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1410:
 	.align	2
-.L1400:
+.L1409:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3612
 	.fnend
@@ -9378,12 +9528,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1404
-	ldr	r3, .L1404+4
+	ldr	r2, .L1413
+	ldr	r3, .L1413+4
 	ldr	r1, [r2, #2644]
 	cmp	r1, r3
-	bne	.L1402
-	ldr	r3, .L1404+8
+	bne	.L1411
+	ldr	r3, .L1413+8
 	addw	r2, r2, #2644
 	movs	r1, #1
 	movs	r0, #0
@@ -9413,14 +9563,14 @@ Ftl_save_ext_data:
 	ldr	r3, [r2, #-24]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1402:
+.L1411:
 	bx	lr
-.L1405:
+.L1414:
 	.align	2
-.L1404:
+.L1413:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177352
+	.word	1342177363
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	1
@@ -9436,7 +9586,7 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1411
+	ldr	r3, .L1420
 	ldrh	r2, [r3, #3656]
 	cmp	r2, #31
 	itett	ls
@@ -9444,19 +9594,19 @@ FtlEctTblFlush:
 	movhi	r2, #32
 	strhls	r2, [r3, #3656]	@ movhi
 	movls	r2, #1
-	cbnz	r0, .L1408
+	cbnz	r0, .L1417
 	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1409
-.L1408:
+	bcc	.L1418
+.L1417:
 	ldr	r2, [r3, #3352]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1411+4
+	ldr	r1, .L1420+4
 	str	r1, [r2]
 	ldrh	r1, [r3, #3344]
 	ldr	r2, [r3, #3352]
@@ -9469,12 +9619,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1409:
+.L1418:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1412:
+.L1421:
 	.align	2
-.L1411:
+.L1420:
 	.word	.LANCHOR0
 	.word	1112818501
 	.fnend
@@ -9506,100 +9656,111 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1434
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1424
-	adds	r2, r0, r1
+	ldr	r4, .L1434+4
 	.pad #108
 	sub	sp, sp, #108
-	mov	r8, r0
 	mov	r7, r1
-	ldrh	r3, [r4, #300]
-	cmp	r2, r3
-	bhi	.L1423
+	adds	r1, r0, r1
+	ldr	r2, [r3]
+	mov	r8, r0
+	str	r3, [sp, #8]
+	str	r2, [sp, #100]
+	ldrh	r2, [r4, #300]
+	cmp	r1, r2
+	bhi	.L1433
 	ldrh	r6, [r4, #312]
 	mov	r9, #0
 	lsr	r6, r0, r6
 	lsl	fp, r6, #2
-.L1416:
-	cbnz	r7, .L1422
-.L1414:
+.L1425:
+	cbnz	r7, .L1431
+.L1423:
+	ldr	r3, [sp, #8]
 	mov	r0, r9
-	add	sp, sp, #108
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1422:
+	ldr	r2, [sp, #100]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1432
+	bl	__stack_chk_fail
+.L1431:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldrh	r5, [r4, #262]
 	ldr	r3, [r3, fp]
 	mov	r1, r5
-	str	r3, [sp, #8]
+	str	r3, [sp, #12]
 	bl	__aeabi_uidivmod
 	subs	r5, r5, r1
-	ldr	r3, [sp, #8]
+	ldr	r3, [sp, #12]
 	uxth	r5, r5
 	str	r1, [sp, #4]
 	cmp	r7, r5
 	it	cc
 	uxthcc	r5, r7
 	lsls	r2, r5, #9
-	str	r2, [sp, #8]
-	cbz	r3, .L1418
+	str	r2, [sp, #12]
+	cbz	r3, .L1427
 	ldr	r2, [r4, #3312]
-	add	r0, sp, #20
-	str	r3, [sp, #24]
+	add	r0, sp, #16
+	str	r3, [sp, #20]
 	str	r3, [sp, #12]
+	str	r2, [sp, #24]
+	add	r2, sp, #36
 	str	r2, [sp, #28]
-	add	r2, sp, #40
-	str	r2, [sp, #32]
 	movs	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-	ldr	r2, [sp, #20]
+	ldr	r2, [sp, #16]
 	ldr	r3, [sp, #12]
 	adds	r2, r2, #1
 	ldr	r2, [r4, #3456]
 	it	eq
 	moveq	r9, #-1
 	cmp	r2, #256
-	bne	.L1420
+	bne	.L1429
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1424+4
+	ldr	r0, .L1434+8
 	bl	sftl_printk
 	ldr	r2, [r4, #3312]
 	mov	r1, r6
-	ldr	r0, .L1424+8
+	ldr	r0, .L1434+12
 	bl	FtlMapWritePage
-.L1420:
+.L1429:
 	ldr	r1, [r4, #3312]
 	lsls	r2, r5, #9
 	ldr	r3, [sp, #4]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1421:
-	ldr	r3, [sp, #8]
+.L1430:
 	adds	r6, r6, #1
 	subs	r7, r7, r5
 	add	r8, r8, r5
+	add	r10, r10, r5, lsl #9
 	add	fp, fp, #4
-	add	r10, r10, r3
-	b	.L1416
-.L1418:
+	b	.L1425
+.L1427:
 	lsls	r2, r5, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1421
-.L1423:
+	b	.L1430
+.L1433:
 	mov	r9, #-1
-	b	.L1414
-.L1425:
+	b	.L1423
+.L1432:
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1435:
 	.align	2
-.L1424:
+.L1434:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LC118
 	.word	.LANCHOR0+3612
@@ -9619,29 +9780,29 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1428
+	ldr	r4, .L1438
 	ldr	r2, [r4, #3352]
 	ldrh	r1, [r4, #3344]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1428+4
+	ldr	r3, .L1438+4
 	cmp	r2, r3
-	beq	.L1427
-	ldr	r1, .L1428+8
-	ldr	r0, .L1428+12
+	beq	.L1437
+	ldr	r1, .L1438+8
+	ldr	r0, .L1438+12
 	bl	sftl_printk
 	ldrh	r2, [r4, #3344]
 	movs	r1, #0
 	ldr	r0, [r4, #3352]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1427:
+.L1437:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1429:
+.L1439:
 	.align	2
-.L1428:
+.L1438:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC119
@@ -9662,22 +9823,23 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1433
+	ldr	r4, .L1443
 	movs	r0, #0
-	ldr	r5, .L1433+4
+	ldr	r5, .L1443+4
 	addw	r2, r4, #2644
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	beq	.L1431
-	mov	r1, #512
+	beq	.L1441
+	mov	r2, #512
+	movs	r1, #0
 	addw	r0, r4, #2644
-	bl	__memzero
+	bl	ftl_memset
 	str	r5, [r4, #2644]
-.L1431:
+.L1441:
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	bne	.L1432
+	bne	.L1442
 	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2584]
 	ldr	r3, [r4, #2736]
@@ -9702,7 +9864,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2616]
 	ldr	r3, [r4, #2692]
 	str	r3, [r4, #2620]
-.L1432:
+.L1442:
 	ldrh	r2, [r4, #296]
 	ldr	r3, [r4, #2604]
 	ldr	r0, [r4, #2600]
@@ -9711,9 +9873,9 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2608]
 	pop	{r3, r4, r5, pc}
-.L1434:
+.L1444:
 	.align	2
-.L1433:
+.L1443:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9749,10 +9911,10 @@ FtlMapBlkWriteDump_data:
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
 	ldr	r3, [r0, #36]
-	cbz	r3, .L1436
+	cbz	r3, .L1446
 	ldrh	r5, [r0, #6]
 	movs	r3, #0
-	ldr	r4, .L1440
+	ldr	r4, .L1450
 	ldr	r2, [r0, #24]
 	str	r3, [r0, #36]
 	subs	r5, r5, #1
@@ -9763,27 +9925,27 @@ FtlMapBlkWriteDump_data:
 	str	r1, [r4, #3468]
 	ldr	r2, [r2, r5, lsl #2]
 	str	r2, [r4, #3460]
-	cbz	r2, .L1438
+	cbz	r2, .L1448
 	movs	r2, #1
 	add	r0, r4, #3456
 	mov	r1, r2
 	bl	FlashReadPages
-.L1439:
+.L1449:
 	ldr	r2, [r4, #3464]
 	mov	r1, r5
 	mov	r0, r6
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1438:
+.L1448:
 	ldrh	r2, [r4, #314]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1439
-.L1436:
+	b	.L1449
+.L1446:
 	pop	{r4, r5, r6, pc}
-.L1441:
+.L1451:
 	.align	2
-.L1440:
+.L1450:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -9801,14 +9963,14 @@ FtlVpcTblFlush:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r4, .L1457
+	ldr	r4, .L1467
 	movs	r1, #255
 	movw	r7, #65535
-	ldr	r9, .L1457+16
+	ldr	r9, .L1467+16
 	ldr	r3, [r4, #3304]
 	add	r8, r4, #3456
 	ldr	r6, [r4, #3336]
-	ldr	r10, .L1457+20
+	ldr	r10, .L1467+20
 	str	r3, [r4, #3464]
 	ldrh	r3, [r4, #2628]
 	str	r6, [r4, #3468]
@@ -9820,9 +9982,9 @@ FtlVpcTblFlush:
 	str	r5, [r6, #8]
 	ldrh	r2, [r4, #30]
 	str	r3, [r6, #4]
-	ldr	r3, .L1457+4
+	ldr	r3, .L1467+4
 	str	r3, [r4, #2472]
-	ldr	r3, .L1457+8
+	ldr	r3, .L1467+8
 	str	r3, [r4, #2476]
 	ldrh	r3, [r4, #2634]
 	strh	r3, [r4, #2480]	@ movhi
@@ -9882,7 +10044,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1443:
+.L1453:
 	ldr	r3, [r4, #3304]
 	ldrh	r1, [r4, #2630]
 	ldrh	r2, [r4, #2628]
@@ -9894,7 +10056,7 @@ FtlVpcTblFlush:
 	ldrh	r3, [r4, #308]
 	subs	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1444
+	blt	.L1454
 	movs	r3, #0
 	ldrh	r7, [r4, #2632]
 	strh	r3, [r4, #2630]	@ movhi
@@ -9909,7 +10071,7 @@ FtlVpcTblFlush:
 	str	r2, [r4, #3460]
 	str	r3, [r6, #4]
 	strh	r0, [r6, #2]	@ movhi
-.L1444:
+.L1454:
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3304]
 	bl	js_hash
@@ -9925,14 +10087,14 @@ FtlVpcTblFlush:
 	uxth	r3, r3
 	adds	r1, r2, #1
 	strh	r3, [r4, #2630]	@ movhi
-	bne	.L1445
+	bne	.L1455
 	cmp	r3, #1
-	bne	.L1446
+	bne	.L1456
 	movw	r2, #1138
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L1446:
+.L1456:
 	ldrh	r3, [r4, #2630]
 	adds	r5, r5, #1
 	uxth	r5, r5
@@ -9942,33 +10104,33 @@ FtlVpcTblFlush:
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2630]	@ movhi
 	cmp	r5, #3
-	bls	.L1443
+	bls	.L1453
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L1457+12
+	ldr	r0, .L1467+12
 	bl	sftl_printk
-.L1449:
-	b	.L1449
-.L1445:
+.L1459:
+	b	.L1459
+.L1455:
 	cmp	r3, #1
-	beq	.L1443
+	beq	.L1453
 	cmp	r2, #256
-	beq	.L1443
+	beq	.L1453
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1450
+	beq	.L1460
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1450:
+.L1460:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1458:
+.L1468:
 	.align	2
-.L1457:
+.L1467:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177352
+	.word	1342177363
 	.word	.LC120
 	.word	.LANCHOR1+471
 	.word	.LC8
@@ -10008,17 +10170,17 @@ sftl_deinit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1462
+	ldr	r3, .L1472
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1461
+	bne	.L1471
 	bl	FtlSysFlush
-.L1461:
+.L1471:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1463:
+.L1473:
 	.align	2
-.L1462:
+.L1472:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10031,90 +10193,105 @@ sftl_deinit:
 	.type	sftl_discard, %function
 sftl_discard:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	.pad #8
-	adds	r2, r0, r1
-	ldr	r4, .L1479
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r7, .L1492
 	mov	r8, r0
-	mov	r6, r1
+	mov	r5, r1
+	ldr	r4, .L1492+4
+	ldr	r3, [r7]
+	str	r3, [sp, #12]
 	ldr	r3, [r4, #344]
-	cmp	r2, r3
-	bhi	.L1472
+	cmp	r3, r0
+	bls	.L1485
+	cmp	r3, r1
+	bcc	.L1485
+	adds	r2, r0, r1
+	cmp	r3, r2
+	bcc	.L1485
 	cmp	r1, #31
-	bhi	.L1466
-.L1471:
+	bhi	.L1476
+.L1481:
 	movs	r0, #0
-.L1464:
-	add	sp, sp, #8
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1466:
-	ldrh	r5, [r4, #262]
-	mov	r1, r5
+.L1474:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1482
+	bl	__stack_chk_fail
+.L1476:
+	ldrh	r6, [r4, #262]
+	mov	r1, r6
 	bl	__aeabi_uidiv
-	smulbb	r3, r0, r5
-	mov	r7, r0
+	smulbb	r3, r0, r6
+	mov	r9, r0
 	sub	r8, r8, r3
 	uxth	r3, r8
-	cbz	r3, .L1467
-	subs	r5, r5, r3
-	adds	r7, r7, #1
-	cmp	r5, r6
+	cbz	r3, .L1477
+	subs	r6, r6, r3
+	add	r9, r0, #1
+	cmp	r6, r5
 	it	cs
-	movcs	r5, r6
-	uxth	r5, r5
-	subs	r6, r6, r5
-.L1467:
+	movcs	r6, r5
+	uxth	r6, r6
+	subs	r5, r5, r6
+.L1477:
 	mov	r3, #-1
-	str	r3, [sp, #4]
-.L1468:
+	str	r3, [sp, #8]
+.L1478:
 	ldrh	r3, [r4, #262]
-	cmp	r6, r3
-	bcs	.L1470
+	cmp	r5, r3
+	bcs	.L1480
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1471
+	bls	.L1481
 	movs	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1471
-.L1470:
+	b	.L1481
+.L1480:
 	movs	r2, #0
-	mov	r1, sp
-	mov	r0, r7
+	add	r1, sp, #4
+	mov	r0, r9
 	bl	log2phys
-	ldr	r3, [sp]
+	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L1469
+	beq	.L1479
 	ldr	r3, [r4, #3660]
 	movs	r2, #1
-	add	r1, sp, #4
-	mov	r0, r7
+	add	r1, sp, #8
+	mov	r0, r9
 	adds	r3, r3, #1
 	str	r3, [r4, #3660]
 	ldr	r3, [r4, #2564]
 	adds	r3, r3, #1
 	str	r3, [r4, #2564]
 	bl	log2phys
-	ldr	r0, [sp]
+	ldr	r0, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1469:
+.L1479:
 	ldrh	r3, [r4, #262]
-	adds	r7, r7, #1
-	subs	r6, r6, r3
-	b	.L1468
-.L1472:
+	add	r9, r9, #1
+	subs	r5, r5, r3
+	b	.L1478
+.L1485:
 	mov	r0, #-1
-	b	.L1464
-.L1480:
+	b	.L1474
+.L1482:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L1493:
 	.align	2
-.L1479:
+.L1492:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_discard, .-sftl_discard
@@ -10129,94 +10306,104 @@ FtlVpcCheckAndModify:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	.pad #12
+	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
 	movs	r5, #0
-	ldr	r4, .L1494
-	ldr	r1, .L1494+4
-	ldr	r0, .L1494+8
+	ldr	r7, .L1508
+	ldr	r4, .L1508+4
+	ldr	r3, [r7]
+	ldr	r1, .L1508+8
+	ldr	r0, .L1508+12
+	str	r3, [sp, #4]
 	bl	sftl_printk
 	ldrh	r2, [r4, #246]
 	movs	r1, #0
 	ldr	r0, [r4, #3356]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1482:
+.L1495:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1484
-	ldr	r9, .L1494+12
-	movs	r7, #0
-	movw	r8, #65535
-.L1485:
+	bcc	.L1497
+	ldr	r10, .L1508+16
+	mov	r8, #0
+	movw	r9, #65535
+.L1498:
 	ldrh	r3, [r4, #244]
-	uxth	r6, r7
+	uxth	r6, r8
 	cmp	r3, r6
-	bhi	.L1490
+	bhi	.L1503
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1484:
+	ldr	r2, [sp, #4]
+	ldr	r3, [r7]
+	cmp	r2, r3
+	beq	.L1504
+	bl	__stack_chk_fail
+.L1497:
 	movs	r2, #0
-	add	r1, sp, #4
+	mov	r1, sp
 	mov	r0, r5
 	bl	log2phys
-	ldr	r0, [sp, #4]
+	ldr	r0, [sp]
 	adds	r3, r0, #1
-	beq	.L1483
+	beq	.L1496
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3356]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1483:
+.L1496:
 	adds	r5, r5, #1
-	b	.L1482
-.L1490:
+	b	.L1495
+.L1503:
 	ldr	r3, [r4, #76]
-	uxth	r5, r7
+	uxth	r5, r8
 	ldrh	r2, [r3, r5, lsl #1]
 	ldr	r3, [r4, #3356]
 	ldrh	r3, [r3, r5, lsl #1]
 	cmp	r2, r3
-	beq	.L1487
-	cmp	r2, r8
-	beq	.L1487
+	beq	.L1500
+	cmp	r2, r9
+	beq	.L1500
 	mov	r1, r5
-	mov	r0, r9
+	mov	r0, r10
 	bl	sftl_printk
 	ldrh	r3, [r4, #28]
 	cmp	r3, r6
-	beq	.L1487
+	beq	.L1500
 	ldrh	r3, [r4, #128]
 	cmp	r3, r6
-	beq	.L1487
+	beq	.L1500
 	ldrh	r3, [r4, #80]
 	cmp	r3, r6
-	beq	.L1487
+	beq	.L1500
 	ldr	r3, [r4, #76]
 	ldrh	r2, [r3, r5, lsl #1]
-	cbnz	r2, .L1489
+	cbnz	r2, .L1502
 	ldr	r2, [r4, #3356]
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
-.L1487:
-	adds	r7, r7, #1
-	b	.L1485
-.L1489:
+.L1500:
+	add	r8, r8, #1
+	b	.L1498
+.L1502:
 	ldr	r2, [r4, #3356]
 	mov	r0, r6
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
 	bl	update_vpc_list
-	b	.L1487
-.L1495:
+	b	.L1500
+.L1504:
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1509:
 	.align	2
-.L1494:
+.L1508:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+486
 	.word	.LC111
@@ -10237,42 +10424,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1506
+	ldr	r4, .L1520
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #244]
 	cmp	r3, r5
-	bcs	.L1497
+	bcs	.L1511
 	movw	r2, #2755
-	ldr	r1, .L1506+4
-	ldr	r0, .L1506+8
+	ldr	r1, .L1520+4
+	ldr	r0, .L1520+8
 	bl	sftl_printk
-.L1497:
+.L1511:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1498
+	beq	.L1512
 	ldr	r3, [r4, #76]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1499
+	cbz	r3, .L1513
 	bl	INSERT_DATA_LIST
-.L1498:
+.L1512:
 	ldrh	r0, [r4, #3442]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1500
+	beq	.L1514
 	cmp	r5, r0
-	bne	.L1501
+	bne	.L1515
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1502
-.L1501:
+	cbz	r3, .L1516
+.L1515:
 	bl	update_vpc_list
-.L1502:
+.L1516:
 	movw	r3, #65535
 	strh	r3, [r4, #3442]	@ movhi
-.L1500:
+.L1514:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10281,12 +10468,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1499:
+.L1513:
 	bl	INSERT_FREE_LIST
-	b	.L1498
-.L1507:
+	b	.L1512
+.L1521:
 	.align	2
-.L1506:
+.L1520:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+507
 	.word	.LC8
@@ -10301,102 +10488,115 @@ allocate_new_data_superblock:
 	.type	FtlProgPages, %function
 FtlProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	movs	r6, #0
-	ldr	r10, .L1527+16
 	mov	r5, r3
+	ldr	r6, .L1542
+	.pad #20
+	sub	sp, sp, #20
+	movs	r7, #0
 	movs	r2, #0
+	ldr	fp, .L1542+20
 	mov	r4, r0
-	ldr	r8, .L1527
-	mov	r9, r1
-	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	ldr	r3, [r6]
+	mov	r10, r1
+	ldr	r9, .L1542+4
+	str	r3, [sp, #12]
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1509:
-	cmp	r6, r9
-	bne	.L1516
-	ldr	r3, .L1527
+.L1523:
+	cmp	r7, r10
+	bne	.L1530
+	ldr	r3, .L1542+4
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r3, #236]
 	cmp	r2, r3
-	bcc	.L1508
+	bcc	.L1522
 	mov	r2, #1000
-	ldr	r1, .L1527+4
-	ldr	r0, .L1527+8
+	ldr	r1, .L1542+8
+	ldr	r0, .L1542+12
 	bl	sftl_printk
-.L1508:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1511:
+.L1522:
+	ldr	r2, [sp, #12]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1532
+	bl	__stack_chk_fail
+.L1525:
 	ldr	r1, [r4, #4]
-	mov	r0, r10
+	mov	r0, fp
 	bl	sftl_printk
 	ldr	r0, [r4, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1510
+	cbnz	r3, .L1524
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1510:
+.L1524:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	movs	r2, #0
 	str	r0, [r4, #4]
-	str	r0, [sp, #4]
+	str	r0, [sp, #8]
 	movs	r1, #1
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	FlashProgPages
-.L1516:
+.L1530:
 	ldr	r2, [r4]
 	adds	r3, r2, #1
-	beq	.L1511
+	beq	.L1525
 	cmp	r2, #256
-	beq	.L1511
+	beq	.L1525
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
-	ldrh	r3, [r8, #236]
+	ldrh	r3, [r9, #236]
 	cmp	r2, r3
-	bcc	.L1512
+	bcc	.L1526
 	movw	r2, #985
-	ldr	r1, .L1527+4
-	ldr	r0, .L1527+8
+	ldr	r1, .L1542+8
+	ldr	r0, .L1542+12
 	bl	sftl_printk
-.L1512:
+.L1526:
 	ldr	r3, [r4, #4]
-	add	r1, sp, #8
+	add	r1, sp, #16
 	movs	r2, #1
 	ldr	r0, [r4, #16]
-	str	r3, [r1, #-4]!
+	str	r3, [r1, #-8]!
 	bl	log2phys
 	ldr	r3, [r4, #12]
-	ldr	fp, [r3, #12]
-	ubfx	r0, fp, #10, #16
+	ldr	r3, [r3, #12]
+	ubfx	r0, r3, #10, #16
+	str	r3, [sp, #4]
 	bl	P2V_block_in_plane
-	cmp	fp, #-1
-	mov	r7, r0
-	beq	.L1513
-	ldr	r3, [r8, #76]
+	ldr	r3, [sp, #4]
+	mov	r8, r0
+	adds	r3, r3, #1
+	beq	.L1527
+	ldr	r3, [r9, #76]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1514
+	cbnz	r2, .L1528
 	mov	r1, r0
-	ldr	r0, .L1527+12
+	ldr	r0, .L1542+16
 	bl	sftl_printk
-.L1514:
-	mov	r0, r7
+.L1528:
+	mov	r0, r8
 	bl	decrement_vpc_count
-.L1513:
-	adds	r6, r6, #1
+.L1527:
+	adds	r7, r7, #1
 	adds	r4, r4, #20
-	b	.L1509
-.L1528:
+	b	.L1523
+.L1532:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1543:
 	.align	2
-.L1527:
+.L1542:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR1+536
 	.word	.LC8
@@ -10415,69 +10615,74 @@ FtlGcFreeTempBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	.pad #12
-	movw	r3, #65535
-	ldr	r4, .L1553
+	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	ldr	r6, .L1569
+	ldr	r4, .L1569+4
+	ldr	r3, [r6]
 	ldrh	r2, [r4, #128]
+	str	r3, [sp, #4]
+	movw	r3, #65535
 	ldrh	r1, [r4, #306]
 	cmp	r2, r3
-	bne	.L1530
-.L1537:
+	bne	.L1545
+.L1552:
 	ldrh	r2, [r4, #128]
 	movs	r3, #0
 	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1550
-.L1531:
+	bne	.L1566
+.L1546:
 	movs	r0, #0
-.L1529:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1530:
-	ldr	r5, .L1553+4
-	cbz	r0, .L1533
+.L1544:
+	ldr	r2, [sp, #4]
+	ldr	r3, [r6]
+	cmp	r2, r3
+	beq	.L1561
+	bl	__stack_chk_fail
+.L1545:
+	ldr	r5, .L1569+8
+	cbz	r0, .L1548
 	ldrh	r2, [r5, #4]
 	cmp	r2, r3
-	beq	.L1534
-.L1535:
+	beq	.L1549
+.L1550:
 	movs	r1, #2
-.L1533:
-	ldr	r0, .L1553+8
+.L1548:
+	ldr	r0, .L1569+12
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r5, #4]
 	movw	r3, #65535
-	str	r0, [sp, #4]
+	str	r0, [sp]
 	cmp	r2, r3
-	beq	.L1537
+	beq	.L1552
 	movs	r0, #1
-	b	.L1529
-.L1534:
+	b	.L1544
+.L1549:
 	movs	r3, #0
 	strh	r3, [r5, #4]	@ movhi
 	ldrh	r3, [r4, #228]
 	cmp	r3, #17
-	bhi	.L1535
-	b	.L1533
-.L1550:
+	bhi	.L1550
+	b	.L1548
+.L1566:
 	ldrb	r1, [r4, #135]	@ zero_extendqisi2
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #3208]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1538
+	beq	.L1553
 	movs	r2, #164
-	ldr	r1, .L1553+12
-	ldr	r0, .L1553+16
+	ldr	r1, .L1569+16
+	ldr	r0, .L1569+20
 	bl	sftl_printk
-.L1538:
+.L1553:
 	ldrb	r3, [r4, #135]	@ zero_extendqisi2
 	movs	r5, #0
 	ldrh	r0, [r4, #306]
-	mov	r8, #12
+	mov	r9, #12
 	ldr	r2, [r4, #76]
 	ldrh	r1, [r4, #128]
 	smulbb	r3, r3, r0
@@ -10486,80 +10691,85 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, #3208]
 	add	r3, r3, r2
 	str	r3, [r4, #2580]
-.L1539:
+.L1554:
 	ldrh	r2, [r4, #3208]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1543
+	bhi	.L1558
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #128]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1544
+	beq	.L1559
 	bl	INSERT_DATA_LIST
-.L1545:
-	movw	r6, #65535
+.L1560:
+	movw	r7, #65535
 	movs	r5, #0
-	strh	r6, [r4, #128]	@ movhi
+	strh	r7, [r4, #128]	@ movhi
 	strh	r5, [r4, #3208]	@ movhi
 	strh	r5, [r4, #3200]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldrh	r3, [r4, #2624]
 	ldrh	r2, [r4, #228]
-	strh	r6, [r4, #176]	@ movhi
+	strh	r7, [r4, #176]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1531
+	ble	.L1546
 	movs	r3, #20
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1531
-.L1543:
-	uxth	r7, r5
-	ldr	r9, [r4, #3204]
+	b	.L1546
+.L1558:
+	uxth	r8, r5
+	ldr	r10, [r4, #3204]
 	ldr	r3, [r4, #2556]
-	mul	r7, r8, r7
-	add	r6, r9, r7
-	ldr	r0, [r6, #8]
+	mul	r8, r9, r8
+	add	r7, r10, r8
+	ldr	r0, [r7, #8]
 	cmp	r0, r3
-	bcc	.L1540
-.L1551:
+	bcc	.L1555
+.L1567:
 	ldrh	r0, [r4, #128]
-	b	.L1552
-.L1540:
+	b	.L1568
+.L1555:
 	movs	r2, #0
-	add	r1, sp, #4
+	mov	r1, sp
 	bl	log2phys
-	ldr	r0, [r9, r7]
-	ldr	r3, [sp, #4]
+	ldr	r0, [r10, r8]
+	ldr	r3, [sp]
 	cmp	r0, r3
-	bne	.L1542
+	bne	.L1557
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
-	mov	r7, r0
-	adds	r1, r6, #4
-	ldr	r0, [r6, #8]
+	mov	r8, r0
+	adds	r1, r7, #4
+	ldr	r0, [r7, #8]
 	bl	log2phys
-	mov	r0, r7
-.L1552:
+	mov	r0, r8
+.L1568:
 	bl	decrement_vpc_count
-	b	.L1541
-.L1542:
-	ldr	r2, [r6, #4]
+	b	.L1556
+.L1557:
+	ldr	r2, [r7, #4]
 	cmp	r3, r2
-	bne	.L1551
-.L1541:
+	bne	.L1567
+.L1556:
 	adds	r5, r5, #1
-	b	.L1539
-.L1544:
+	b	.L1554
+.L1559:
 	bl	INSERT_FREE_LIST
-	b	.L1545
-.L1554:
+	b	.L1560
+.L1561:
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1570:
 	.align	2
-.L1553:
+.L1569:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+128
@@ -10580,25 +10790,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1557
+	ldr	r4, .L1573
 	ldrh	r1, [r4, #306]
 	add	r0, r4, #128
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #130]
 	ldrh	r3, [r4, #306]
 	cmp	r2, r3
-	bcc	.L1555
+	bcc	.L1571
 	addw	r0, r4, #3396
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
 	str	r3, [r4, #3448]
-.L1555:
+.L1571:
 	pop	{r4, pc}
-.L1558:
+.L1574:
 	.align	2
-.L1557:
+.L1573:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10616,7 +10826,7 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1560
+	ldr	r4, .L1576
 	add	r6, r4, #28
 	str	r5, [r4, #3480]
 	mov	r0, r6
@@ -10633,9 +10843,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1561:
+.L1577:
 	.align	2
-.L1560:
+.L1576:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10653,30 +10863,30 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1570
+	ldr	r4, .L1586
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3172]
 	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1563:
+.L1579:
 	ldr	r1, [r4, #3172]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1566
+	bhi	.L1582
 	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #132]
 	movs	r0, #0
 	str	r0, [r4, #3172]
-	cbnz	r3, .L1562
+	cbnz	r3, .L1578
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	movs	r0, #1
-.L1562:
+.L1578:
 	pop	{r4, r5, r6, pc}
-.L1566:
+.L1582:
 	muls	r3, r6, r3
 	ldr	r2, [r4, #3296]
 	adds	r5, r5, #1
@@ -10689,10 +10899,10 @@ Ftl_gc_temp_data_write_back:
 	ldrne	r2, [r0, #8]
 	ldr	r0, [r0, #12]
 	bl	FtlGcUpdatePage
-	b	.L1563
-.L1571:
+	b	.L1579
+.L1587:
 	.align	2
-.L1570:
+.L1586:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10710,17 +10920,17 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1575
+	ldr	r4, .L1591
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	beq	.L1573
+	beq	.L1589
 	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1574
-.L1573:
+	cbnz	r3, .L1590
+.L1589:
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1575+4
+	ldr	r0, .L1591+4
 	strb	r5, [r4, #136]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #3200]	@ movhi
@@ -10729,13 +10939,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1574:
-	ldr	r0, .L1575+4
+.L1590:
+	ldr	r0, .L1591+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L1576:
+.L1592:
 	.align	2
-.L1575:
+.L1591:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+128
 	.fnend
@@ -10749,32 +10959,35 @@ Ftl_get_new_temp_ppa:
 	.type	rk_ftl_garbage_collect, %function
 rk_ftl_garbage_collect:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 32
+	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1708
+	ldr	r3, .L1725
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
 	mov	r9, r0
-	.pad #44
-	sub	sp, sp, #44
-	mov	r4, r3
+	ldr	r3, [r3]
+	str	r3, [sp, #44]
+	ldr	r3, .L1725+4
 	ldr	r0, [r3, #3276]
+	mov	r4, r3
 	cmp	r0, #0
-	bne	.L1660
+	bne	.L1677
 	ldrh	r2, [r3, #2532]
 	cmp	r2, #47
-	bls	.L1577
-	ldr	r2, .L1708+4
+	bls	.L1593
+	ldr	r2, .L1725+8
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1579
-.L1582:
+	bne	.L1595
+.L1598:
 	ldrh	r2, [r4, #224]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1580
-.L1581:
+	bne	.L1596
+.L1597:
 	bl	FtlReadRefresh
 	ldr	r3, [r4, #3160]
 	movw	r7, #65535
@@ -10783,121 +10996,124 @@ rk_ftl_garbage_collect:
 	add	r3, r3, r9, lsl #7
 	cmp	r1, r7
 	str	r3, [r4, #3160]
-	bne	.L1583
+	bne	.L1599
 	ldrh	r2, [r4, #128]
 	cmp	r2, r1
-	bne	.L1584
+	bne	.L1600
 	ldrh	r6, [r4, #226]
 	cmp	r6, r2
-	bne	.L1585
+	bne	.L1601
 	ldrh	r2, [r4, #228]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1585
+	bls	.L1601
 	movs	r5, #0
 	str	r5, [r4, #3160]
 	strh	r5, [r4, #3664]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r6
 	mov	r7, r0
-	bne	.L1664
+	bne	.L1681
 	ldrh	r2, [r4, #228]
 	ldrh	r3, [r4, #3158]
 	cmp	r2, r3
-	bcs	.L1588
+	bcs	.L1604
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r7
-	beq	.L1590
+	beq	.L1606
 	mov	r0, r3
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1591
+	bhi	.L1607
 	mov	r0, r5
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	movs	r3, #128
 	strh	r3, [r4, #3158]	@ movhi
 	cmp	r5, r7
-	bne	.L1587
-.L1590:
+	bne	.L1603
+.L1606:
 	bl	FtlGcReFreshBadBlk
 	cmp	r9, #0
-	bne	.L1593
+	bne	.L1609
 	movw	r3, #65535
 	cmp	r7, r3
-	bne	.L1593
-.L1658:
+	bne	.L1609
+.L1674:
 	ldrh	r3, [r4, #228]
 	cmp	r3, #24
-	bhi	.L1665
+	bhi	.L1682
 	cmp	r3, #16
 	ldrh	r6, [r4, #306]
-	bls	.L1595
+	bls	.L1611
 	lsrs	r6, r6, #5
-.L1594:
+.L1610:
 	ldrh	r2, [r4, #3156]
 	cmp	r2, r3
-	bcs	.L1598
+	bcs	.L1614
 	ldrh	r3, [r4, #128]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1599
+	bne	.L1615
 	ldrh	r2, [r4, #226]
 	cmp	r2, r3
-	bne	.L1599
+	bne	.L1615
 	ldrh	r0, [r4, #3664]
-	cbnz	r0, .L1600
+	cbnz	r0, .L1616
 	ldr	r3, [r4, #2556]
 	ldr	r2, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1601
-.L1600:
+	bcs	.L1617
+.L1616:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1704:
+.L1721:
 	strh	r3, [r4, #3156]	@ movhi
 	movs	r3, #0
 	str	r3, [r4, #3168]
-.L1577:
-	add	sp, sp, #44
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1579:
+.L1593:
+	ldr	r3, .L1725
+	ldr	r2, [sp, #44]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1676
+	bl	__stack_chk_fail
+.L1595:
 	ldrh	r3, [r3, #128]
 	cmp	r3, r2
-	beq	.L1582
+	beq	.L1598
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1582
+	beq	.L1598
 	movs	r0, #1
-	b	.L1577
-.L1580:
+	b	.L1593
+.L1596:
 	ldrh	r3, [r4, #226]
 	cmp	r3, r1
 	itt	eq
 	strheq	r2, [r4, #226]	@ movhi
 	strheq	r3, [r4, #224]	@ movhi
-	b	.L1581
-.L1591:
+	b	.L1597
+.L1607:
 	movs	r3, #64
-.L1703:
+.L1720:
 	strh	r3, [r4, #3158]	@ movhi
-	b	.L1590
-.L1588:
+	b	.L1606
+.L1604:
 	movs	r3, #80
-	b	.L1703
-.L1664:
+	b	.L1720
+.L1681:
 	mov	r5, r0
-.L1587:
+.L1603:
 	ldr	r3, [r4, #76]
 	mov	r7, r5
 	ldrh	r1, [r4, #3156]
@@ -10905,64 +11121,64 @@ rk_ftl_garbage_collect:
 	ldrh	r3, [r3, r5, lsl #1]
 	str	r1, [sp, #4]
 	ldr	r1, [r4, #2540]
-	ldr	r0, .L1708+8
+	ldr	r0, .L1725+12
 	ldrh	r1, [r1, r5, lsl #1]
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1590
-.L1595:
+	b	.L1606
+.L1611:
 	cmp	r3, #12
-	bls	.L1596
+	bls	.L1612
 	lsrs	r6, r6, #4
-	b	.L1594
-.L1596:
+	b	.L1610
+.L1612:
 	cmp	r3, #8
-	bls	.L1594
+	bls	.L1610
 	lsrs	r6, r6, #2
-	b	.L1594
-.L1665:
+	b	.L1610
+.L1682:
 	movs	r6, #1
-	b	.L1594
-.L1601:
+	b	.L1610
+.L1617:
 	movs	r3, #18
-	b	.L1704
-.L1599:
+	b	.L1721
+.L1615:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3156]	@ movhi
-.L1598:
+.L1614:
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L1666
+	cbz	r3, .L1683
 	adds	r6, r6, #32
 	uxth	r6, r6
-.L1666:
+.L1683:
 	movw	r7, #65535
-.L1604:
+.L1620:
 	ldrh	r3, [r4, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1613
+	bne	.L1629
 	cmp	r7, r3
-	beq	.L1614
+	beq	.L1630
 	strh	r7, [r4, #176]	@ movhi
-.L1615:
+.L1631:
 	ldrh	r0, [r4, #176]
 	movw	r5, #65535
 	movs	r3, #0
 	strb	r3, [r4, #184]
 	cmp	r0, r5
-	beq	.L1613
+	beq	.L1629
 	bl	IsBlkInGcList
-	cbz	r0, .L1618
+	cbz	r0, .L1634
 	strh	r5, [r4, #176]	@ movhi
-.L1618:
+.L1634:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1613
-	ldr	r0, .L1708+12
+	beq	.L1629
+	ldr	r0, .L1725+16
 	bl	make_superblock
 	movs	r3, #0
 	ldrh	r2, [r4, #176]
@@ -10972,62 +11188,62 @@ rk_ftl_garbage_collect:
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r2, lsl #1]
 	strh	r3, [r4, #3668]	@ movhi
-.L1613:
+.L1629:
 	ldrh	r3, [r4, #176]
 	ldrh	r2, [r4, #28]
 	cmp	r2, r3
-	beq	.L1619
+	beq	.L1635
 	ldrh	r2, [r4, #80]
 	cmp	r2, r3
-	beq	.L1619
+	beq	.L1635
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	bne	.L1620
-.L1619:
+	bne	.L1636
+.L1635:
 	movw	r3, #65535
 	strh	r3, [r4, #176]	@ movhi
-.L1620:
-	ldr	r5, .L1708
+.L1636:
+	ldr	r5, .L1725+4
 	mov	r4, r5
-.L1656:
+.L1672:
 	ldrh	r10, [r5, #176]
 	movw	r3, #65535
 	cmp	r10, r3
-	bne	.L1621
+	bne	.L1637
 	movs	r3, #0
 	mov	fp, r3
 	str	r3, [r5, #3168]
-.L1622:
+.L1638:
 	ldrh	r8, [r4, #3164]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	cmp	r2, r10
 	strh	r2, [r4, #176]	@ movhi
-	bne	.L1623
+	bne	.L1639
 	movs	r3, #0
 	movs	r0, #8
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1577
-.L1605:
+	b	.L1593
+.L1621:
 	movs	r3, #0
 	ldrh	r2, [r4, #228]
 	str	r3, [r4, #3168]
 	ldrh	r3, [r4, #3156]
 	cmp	r2, r3
-	bls	.L1606
+	bls	.L1622
 	ldrh	r3, [r4, #3664]
-	cbnz	r3, .L1607
+	cbnz	r3, .L1623
 	ldr	r3, [r4, #2556]
 	ldr	r2, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1608
-.L1607:
+	bcs	.L1624
+.L1623:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1705:
+.L1722:
 	strh	r3, [r4, #3156]	@ movhi
 	bl	FtlReadRefresh
 	movs	r0, #0
@@ -11036,17 +11252,17 @@ rk_ftl_garbage_collect:
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #4
-	bls	.L1606
-.L1707:
+	bls	.L1622
+.L1724:
 	ldrh	r0, [r4, #3664]
-	b	.L1577
-.L1608:
+	b	.L1593
+.L1624:
 	movs	r3, #18
-	b	.L1705
-.L1606:
+	b	.L1722
+.L1622:
 	ldrh	r0, [r4, #3664]
 	cmp	r0, #0
-	bne	.L1610
+	bne	.L1626
 	ldrh	r5, [r4, #2624]
 	add	r3, r5, r5, lsl #1
 	asrs	r3, r3, #2
@@ -11060,43 +11276,44 @@ rk_ftl_garbage_collect:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1611
+	ble	.L1627
 	ldrh	r3, [r4, #228]
 	subs	r5, r5, #1
 	cmp	r3, r5
-	blt	.L1611
+	blt	.L1627
 	bl	FtlReadRefresh
-	b	.L1707
-.L1611:
-	cmp	r2, #0
-	bne	.L1610
-	movw	r0, #65535
-	bl	decrement_vpc_count
-	ldrh	r0, [r4, #228]
-	adds	r0, r0, #1
-	b	.L1577
-.L1709:
+	b	.L1724
+.L1726:
 	.align	2
-.L1708:
+.L1725:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC124
 	.word	.LANCHOR0+176
-.L1614:
+.L1627:
+	cmp	r2, #0
+	bne	.L1626
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r0, [r4, #228]
+	adds	r0, r0, #1
+	b	.L1593
+.L1630:
 	ldrh	r3, [r4, #226]
 	cmp	r3, r7
-	beq	.L1615
+	beq	.L1631
 	ldr	r2, [r4, #76]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1616
+	cbnz	r3, .L1632
 	strh	r7, [r4, #226]	@ movhi
-.L1616:
+.L1632:
 	ldrh	r3, [r4, #226]
 	strh	r3, [r4, #176]	@ movhi
 	movw	r3, #65535
 	strh	r3, [r4, #226]	@ movhi
-	b	.L1615
-.L1623:
+	b	.L1631
+.L1639:
 	str	r0, [sp, #16]
 	mov	r0, r2
 	str	r2, [sp, #12]
@@ -11104,10 +11321,10 @@ rk_ftl_garbage_collect:
 	bl	IsBlkInGcList
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #16]
-	cbz	r0, .L1624
+	cbz	r0, .L1640
 	strh	r8, [r4, #3164]	@ movhi
-	b	.L1622
-.L1624:
+	b	.L1638
+.L1640:
 	ldrh	lr, [r4, #236]
 	uxth	r8, r8
 	ldrh	r1, [r4, #306]
@@ -11118,67 +11335,67 @@ rk_ftl_garbage_collect:
 	ldrh	ip, [r0, r3, lsl #1]
 	add	lr, r1, r1, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1626
+	bgt	.L1642
 	cmp	r8, #48
-	bls	.L1627
+	bls	.L1643
 	cmp	ip, #8
-	bls	.L1627
+	bls	.L1643
 	ldrh	ip, [r4, #3200]
 	cmp	ip, #35
-	bhi	.L1627
-.L1626:
+	bhi	.L1643
+.L1642:
 	strh	fp, [r4, #3164]	@ movhi
-.L1627:
+.L1643:
 	ldrh	r3, [r0, r3, lsl #1]
 	cmp	r1, r3
-	bgt	.L1628
+	bgt	.L1644
 	cmp	r7, r10
-	bne	.L1628
+	bne	.L1644
 	ldrh	r1, [r4, #3164]
 	cmp	r1, #3
-	bhi	.L1628
+	bhi	.L1644
 	movs	r3, #0
 	strh	r7, [r4, #176]	@ movhi
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1707
-.L1628:
-	cbnz	r3, .L1629
+	b	.L1724
+.L1644:
+	cbnz	r3, .L1645
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #3164]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1622
-.L1629:
+	b	.L1638
+.L1645:
 	movs	r3, #0
 	strb	r3, [r4, #184]
 	ldrh	r3, [r4, #28]
 	cmp	r3, r2
-	bne	.L1630
+	bne	.L1646
 	movw	r2, #717
-	ldr	r1, .L1710
-	ldr	r0, .L1710+4
+	ldr	r1, .L1727
+	ldr	r0, .L1727+4
 	bl	sftl_printk
-.L1630:
+.L1646:
 	ldrh	r2, [r4, #176]
 	ldrh	r3, [r4, #80]
 	cmp	r2, r3
-	bne	.L1631
+	bne	.L1647
 	movw	r2, #718
-	ldr	r1, .L1710
-	ldr	r0, .L1710+4
+	ldr	r1, .L1727
+	ldr	r0, .L1727+4
 	bl	sftl_printk
-.L1631:
+.L1647:
 	ldrh	r2, [r4, #176]
 	ldrh	r3, [r4, #128]
 	cmp	r2, r3
-	bne	.L1632
+	bne	.L1648
 	movw	r2, #719
-	ldr	r1, .L1710
-	ldr	r0, .L1710+4
+	ldr	r1, .L1727
+	ldr	r0, .L1727+4
 	bl	sftl_printk
-.L1632:
-	ldr	r0, .L1710+8
+.L1648:
+	ldr	r0, .L1727+8
 	bl	make_superblock
 	ldrh	r1, [r4, #176]
 	movs	r3, #0
@@ -11188,13 +11405,13 @@ rk_ftl_garbage_collect:
 	strh	r3, [r4, #178]	@ movhi
 	strb	r3, [r4, #182]
 	strh	r2, [r4, #3668]	@ movhi
-.L1621:
+.L1637:
 	movs	r3, #1
 	str	r3, [r4, #3276]
 	ldrh	r3, [r4, #306]
 	str	r3, [sp, #16]
 	cmp	r9, #0
-	beq	.L1633
+	beq	.L1649
 	ldr	r2, [sp, #16]
 	ldrh	r3, [r4, #236]
 	ldrh	r1, [r4, #176]
@@ -11206,7 +11423,7 @@ rk_ftl_garbage_collect:
 	addmi	r3, r3, #3
 	add	r6, r6, r3, asr #2
 	uxth	r6, r6
-.L1633:
+.L1649:
 	ldrh	r3, [r4, #178]
 	ldr	r1, [sp, #16]
 	adds	r2, r3, r6
@@ -11217,11 +11434,11 @@ rk_ftl_garbage_collect:
 	mov	r3, #0
 	it	gt
 	uxthgt	r6, r6
-.L1706:
+.L1723:
 	str	r3, [sp, #20]
 	ldrh	r3, [sp, #20]
 	cmp	r6, r3
-	bls	.L1644
+	bls	.L1660
 	ldr	r3, [sp, #20]
 	movw	r10, #65535
 	ldrh	r8, [r5, #178]
@@ -11229,17 +11446,17 @@ rk_ftl_garbage_collect:
 	ldrh	ip, [r5, #236]
 	ldr	r0, [r5, #3188]
 	add	r8, r8, r3
-	ldr	r3, .L1710+12
+	ldr	r3, .L1727+12
 	str	r3, [sp, #24]
 	movs	r3, #0
 	str	r3, [sp, #12]
-	b	.L1645
-.L1638:
+	b	.L1661
+.L1654:
 	ldr	r1, [sp, #24]
 	ldrh	r2, [r1, #2]!
 	cmp	r2, r10
 	str	r1, [sp, #24]
-	beq	.L1637
+	beq	.L1653
 	ldr	r1, [sp, #12]
 	orr	r2, r8, r2, lsl #10
 	mla	lr, fp, r1, r0
@@ -11248,57 +11465,57 @@ rk_ftl_garbage_collect:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1637:
+.L1653:
 	adds	r3, r3, #1
-.L1645:
+.L1661:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1638
+	bhi	.L1654
 	mov	fp, #0
 	ldrb	r2, [r5, #184]	@ zero_extendqisi2
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
-.L1639:
+.L1655:
 	ldr	r2, [sp, #12]
 	uxth	r3, fp
 	cmp	r2, r3
-	bhi	.L1643
+	bhi	.L1659
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	b	.L1706
-.L1643:
+	b	.L1723
+.L1659:
 	mov	r8, #20
 	ldr	r3, [r5, #3188]
 	mul	r8, r8, fp
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L1640
+	beq	.L1656
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1640
+	bne	.L1656
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1641
+	bne	.L1657
 	movw	r2, #753
-	ldr	r1, .L1710
-	ldr	r0, .L1710+4
+	ldr	r1, .L1727
+	ldr	r0, .L1727+4
 	str	r3, [sp, #24]
 	bl	sftl_printk
 	ldr	r3, [sp, #24]
-.L1641:
+.L1657:
 	movs	r2, #0
 	mov	r0, r3
-	add	r1, sp, #32
+	add	r1, sp, #36
 	bl	log2phys
 	ldr	r0, [r4, #3188]
-	ldr	r3, [sp, #32]
+	ldr	r3, [sp, #36]
 	add	r0, r0, r8
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1640
+	bne	.L1656
 	ldrh	r3, [r4, #3666]
 	movs	r2, #20
 	ldr	r1, [r4, #3172]
@@ -11324,7 +11541,7 @@ rk_ftl_garbage_collect:
 	movs	r1, #1
 	ldr	r2, [r2, #12]
 	str	r2, [r3, #12]
-	ldr	r3, [sp, #32]
+	ldr	r3, [sp, #36]
 	str	r3, [r10, #12]
 	ldrh	r3, [r4, #128]
 	strh	r3, [r10, #2]	@ movhi
@@ -11339,66 +11556,66 @@ rk_ftl_garbage_collect:
 	ldrb	r2, [r4, #135]	@ zero_extendqisi2
 	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L1642
+	beq	.L1658
 	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1640
-.L1642:
+	cbnz	r3, .L1656
+.L1658:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1640
-	ldr	r3, .L1710+16
+	cbz	r0, .L1656
+	ldr	r3, .L1727+16
 	movs	r2, #0
 	movw	r1, #65535
 	str	r2, [r3, #3276]
 	strh	r1, [r3, #176]	@ movhi
 	strh	r2, [r3, #178]	@ movhi
 	ldrh	r0, [r3, #3664]
-	b	.L1577
-.L1640:
+	b	.L1593
+.L1656:
 	add	fp, fp, #1
-	b	.L1639
-.L1644:
+	b	.L1655
+.L1660:
 	ldrh	r3, [r5, #178]
 	add	r6, r6, r3
 	ldr	r3, [sp, #16]
 	uxth	r6, r6
 	cmp	r3, r6
 	strh	r6, [r5, #178]	@ movhi
-	bhi	.L1646
+	bhi	.L1662
 	ldr	r3, [r5, #3172]
-	cbz	r3, .L1647
+	cbz	r3, .L1663
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1647
+	cbz	r0, .L1663
 	movs	r3, #0
 	ldrh	r0, [r5, #3664]
 	str	r3, [r5, #3276]
-	b	.L1577
-.L1647:
+	b	.L1593
+.L1663:
 	ldrh	r6, [r5, #3666]
-	cbnz	r6, .L1648
+	cbnz	r6, .L1664
 	ldrh	r2, [r5, #176]
 	ldr	r3, [r5, #76]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbz	r3, .L1648
-.L1649:
+	cbz	r3, .L1664
+.L1665:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcs	.L1654
+	bcs	.L1670
 	movs	r2, #0
-	add	r1, sp, #36
+	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	ldr	r0, [sp, #36]
+	ldr	r0, [sp, #40]
 	adds	r3, r0, #1
-	beq	.L1650
+	beq	.L1666
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r5, #176]
 	cmp	r3, r0
-	bne	.L1650
-.L1654:
+	bne	.L1666
+.L1670:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcc	.L1648
+	bcc	.L1664
 	ldrh	r2, [r5, #176]
 	movs	r1, #0
 	ldr	r3, [r5, #76]
@@ -11407,69 +11624,73 @@ rk_ftl_garbage_collect:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1648:
+.L1664:
 	movw	r3, #65535
 	strh	r3, [r5, #176]	@ movhi
-.L1646:
+.L1662:
 	movs	r3, #0
 	str	r3, [r5, #3276]
 	ldrh	r3, [r5, #228]
 	cmp	r3, #2
-	bhi	.L1655
+	bhi	.L1671
 	ldrh	r6, [r5, #306]
-	b	.L1656
-.L1650:
+	b	.L1672
+.L1666:
 	adds	r6, r6, #1
-	b	.L1649
-.L1655:
+	b	.L1665
+.L1671:
 	ldrh	r0, [r5, #3664]
 	cmp	r0, #0
-	bne	.L1577
+	bne	.L1593
 	adds	r0, r3, #1
-	b	.L1577
-.L1660:
+	b	.L1593
+.L1677:
 	movs	r0, #0
-	b	.L1577
-.L1583:
+	b	.L1593
+.L1599:
 	cmp	r9, #0
-	beq	.L1658
-.L1593:
+	beq	.L1674
+.L1609:
 	ldrh	r2, [r4, #128]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1669
-.L1659:
+	bne	.L1686
+.L1675:
 	ldrh	r3, [r4, #226]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1669
+	bne	.L1686
 	cmp	r7, r3
-	bne	.L1669
+	bne	.L1686
 	ldrh	r3, [r4, #176]
 	cmp	r3, r7
-	beq	.L1605
-.L1610:
+	beq	.L1621
+.L1626:
 	movw	r7, #65535
-.L1669:
+.L1686:
 	movs	r6, #1
-	b	.L1604
-.L1585:
+	b	.L1620
+.L1601:
 	cmp	r9, #0
-	beq	.L1658
+	beq	.L1674
 	movw	r7, #65535
-	b	.L1659
-.L1711:
+	b	.L1675
+.L1728:
 	.align	2
-.L1710:
+.L1727:
 	.word	.LANCHOR1+568
 	.word	.LC8
 	.word	.LANCHOR0+176
 	.word	.LANCHOR0+190
 	.word	.LANCHOR0
-.L1584:
+.L1600:
 	cmp	r9, #0
-	bne	.L1610
-	b	.L1658
+	bne	.L1626
+	b	.L1674
+.L1676:
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	1
@@ -11483,107 +11704,116 @@ FtlRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r0, #16
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r10, r3
+	ldr	r3, .L1765
+	cmp	r0, #16
 	.pad #60
 	sub	sp, sp, #60
-	mov	r7, r1
-	mov	r10, r3
-	str	r2, [sp, #20]
-	bne	.L1713
-	mov	r2, r3
-	ldr	r1, [sp, #20]
-	add	r0, r7, #256
+	mov	r6, r1
+	str	r2, [sp, #4]
+	ldr	r3, [r3]
+	str	r3, [sp, #52]
+	bne	.L1730
+	mov	r2, r10
+	ldr	r1, [sp, #4]
+	add	r0, r6, #256
 	bl	FtlVendorPartRead
-	mov	r8, r0
-.L1712:
-	mov	r0, r8
-	add	sp, sp, #60
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1713:
-	ldr	r3, [sp, #20]
-	ldr	r4, .L1745
-	adds	r3, r1, r3
-	str	r3, [sp, #8]
-	ldr	r2, [sp, #8]
+	mov	r5, r0
+.L1729:
+	ldr	r3, .L1765
+	mov	r0, r5
+	ldr	r2, [sp, #52]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1751
+	bl	__stack_chk_fail
+.L1730:
+	ldr	r4, .L1765+4
 	ldr	r3, [r4, #344]
+	cmp	r1, r3
+	bcs	.L1754
+	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bhi	.L1734
-	ldr	r3, .L1745+4
-	ldr	r3, [r3]
-	adds	r5, r3, #1
-	beq	.L1735
+	bhi	.L1754
+	adds	r2, r1, r2
+	cmp	r3, r2
+	str	r2, [sp, #12]
+	bcc	.L1754
+	ldr	r3, .L1765+8
+	ldr	r5, [r3]
+	adds	r7, r5, #1
+	beq	.L1729
 	ldrh	r5, [r4, #262]
-	mov	r0, r7
+	mov	r0, r6
 	mov	r9, #0
-	mov	r6, r9
 	mov	r8, r9
 	mov	r1, r5
 	bl	__aeabi_uidiv
-	ldr	r3, [sp, #8]
+	ldr	r3, [sp, #12]
 	mov	r1, r5
-	str	r0, [sp, #12]
+	str	r0, [sp, #16]
+	mov	r5, r9
 	subs	r0, r3, #1
 	bl	__aeabi_uidiv
-	ldr	r3, [sp, #12]
-	ldr	r2, [sp, #20]
-	ldr	r5, [sp, #12]
+	ldr	r3, [sp, #16]
+	ldr	r2, [sp, #4]
+	ldr	r7, [sp, #16]
 	rsb	r3, r3, #1
-	str	r0, [sp, #16]
+	str	r0, [sp, #20]
 	add	r3, r3, r0
 	str	r9, [sp, #28]
-	str	r3, [sp, #4]
+	str	r3, [sp, #8]
 	ldr	r3, [r4, #2588]
 	str	r9, [sp, #24]
 	add	r3, r3, r2
-	ldr	r2, [sp, #4]
+	ldr	r2, [sp, #8]
 	str	r3, [r4, #2588]
 	ldr	r3, [r4, #2560]
 	add	r3, r3, r2
 	str	r3, [r4, #2560]
-.L1715:
-	ldr	r3, [sp, #4]
-	cbnz	r3, .L1732
-	ldr	r3, .L1745
+.L1732:
+	ldr	r3, [sp, #8]
+	cbnz	r3, .L1749
+	ldr	r3, .L1765+4
 	ldrh	r2, [r3, #3210]
-	cbnz	r2, .L1733
+	cbnz	r2, .L1750
 	ldrh	r3, [r3, #228]
 	cmp	r3, #31
-	bhi	.L1712
-.L1733:
+	bhi	.L1729
+.L1750:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1712
-.L1732:
+	b	.L1729
+.L1749:
 	movs	r2, #0
-	add	r1, sp, #52
-	mov	r0, r5
+	add	r1, sp, #48
+	mov	r0, r7
 	bl	log2phys
-	ldr	r2, [sp, #52]
+	ldr	r2, [sp, #48]
 	adds	r0, r2, #1
-	bne	.L1716
+	bne	.L1733
 	mov	fp, #0
-.L1717:
+.L1734:
 	ldrh	r0, [r4, #262]
 	cmp	fp, r0
-	bcc	.L1719
-.L1720:
-	ldr	r3, [sp, #4]
-	adds	r5, r5, #1
+	bcc	.L1736
+.L1737:
+	ldr	r3, [sp, #8]
+	adds	r7, r7, #1
 	subs	r3, r3, #1
-	str	r3, [sp, #4]
-	beq	.L1724
+	str	r3, [sp, #8]
+	beq	.L1741
 	ldrh	r3, [r4, #236]
-	cmp	r6, r3, lsl #2
-	bne	.L1715
-.L1724:
-	cmp	r6, #0
-	beq	.L1715
+	cmp	r8, r3, lsl #2
+	bne	.L1732
+.L1741:
+	cmp	r8, #0
+	beq	.L1732
 	movs	r2, #0
-	mov	r1, r6
+	mov	r1, r8
 	ldr	r0, [r4, #3292]
 	mov	fp, #0
 	bl	FlashReadPages
@@ -11595,28 +11825,28 @@ FtlRead:
 	ldr	r3, [sp, #28]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1731:
+.L1748:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, fp
-	ldr	r0, [sp, #12]
+	ldr	r0, [sp, #16]
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1726
+	bne	.L1743
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3316]
 	cmp	r1, r2
-	bne	.L1727
+	bne	.L1744
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1744:
+.L1764:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1727:
+.L1744:
 	ldr	ip, [r4, #3292]
 	add	r2, ip, r3
 	ldr	r0, [r2, #12]
@@ -11631,54 +11861,55 @@ FtlRead:
 	adds	r1, r0, #1
 	itttt	eq
 	ldreq	r1, [r4, #2716]
-	moveq	r8, r0
+	moveq	r5, r0
 	addeq	r1, r1, #1
 	streq	r1, [r4, #2716]
 	ldr	r3, [ip, r3]
 	cmp	r3, #256
-	bne	.L1730
+	bne	.L1747
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1730:
+.L1747:
 	add	fp, fp, #1
-	cmp	r6, fp
-	bne	.L1731
-	movs	r6, #0
-	b	.L1715
-.L1719:
-	mla	r0, r0, r5, fp
-	cmp	r7, r0
-	bhi	.L1718
-	ldr	r3, [sp, #8]
+	cmp	r8, fp
+	bne	.L1748
+	mov	r8, #0
+	b	.L1732
+.L1736:
+	mla	r0, r0, r7, fp
+	cmp	r6, r0
+	bhi	.L1735
+	ldr	r3, [sp, #12]
 	cmp	r3, r0
-	bls	.L1718
-	subs	r0, r0, r7
-	mov	r1, #512
+	bls	.L1735
+	subs	r0, r0, r6
+	mov	r2, #512
+	movs	r1, #0
 	add	r0, r10, r0, lsl #9
-	bl	__memzero
-.L1718:
+	bl	ftl_memset
+.L1735:
 	add	fp, fp, #1
-	b	.L1717
-.L1716:
+	b	.L1734
+.L1733:
 	ldr	r3, [r4, #3292]
 	movs	r1, #20
 	ldrh	fp, [r4, #262]
-	mla	r3, r1, r6, r3
+	mla	r3, r1, r8, r3
 	str	r2, [r3, #4]
-	ldr	r2, [sp, #12]
-	cmp	r5, r2
-	bne	.L1721
+	ldr	r2, [sp, #16]
+	cmp	r7, r2
+	bne	.L1738
 	ldr	r2, [r4, #3316]
 	mov	r1, fp
-	mov	r0, r7
+	mov	r0, r6
 	str	r3, [sp, #32]
 	str	r2, [r3, #8]
 	bl	__aeabi_uidivmod
 	sub	r2, fp, r1
 	str	r1, [sp, #24]
-	ldr	r1, [sp, #20]
+	ldr	r1, [sp, #4]
 	mov	r3, r2
 	cmp	r2, r1
 	it	cs
@@ -11686,62 +11917,64 @@ FtlRead:
 	cmp	r3, fp
 	str	r3, [sp, #28]
 	ldr	r3, [sp, #32]
-	bne	.L1722
+	bne	.L1739
 	str	r10, [r3, #8]
-.L1722:
+.L1739:
 	ldrh	r2, [r4, #316]
 	ldr	r1, [r4, #3340]
-	str	r5, [r3, #16]
-	muls	r2, r6, r2
-	adds	r6, r6, #1
+	str	r7, [r3, #16]
+	mul	r2, r8, r2
+	add	r8, r8, #1
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1720
-.L1721:
-	ldr	r2, [sp, #16]
-	cmp	r5, r2
-	bne	.L1723
+	b	.L1737
+.L1738:
+	ldr	r2, [sp, #20]
+	cmp	r7, r2
+	bne	.L1740
 	ldr	r2, [r4, #3320]
-	ldr	r1, [sp, #8]
+	ldr	r1, [sp, #12]
 	str	r2, [r3, #8]
-	mul	r2, fp, r5
+	mul	r2, fp, r7
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1722
-.L1743:
-	subs	r2, r2, r7
+	bne	.L1739
+.L1763:
+	subs	r2, r2, r6
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1722
-.L1723:
-	mul	r2, r5, fp
-	b	.L1743
-.L1726:
-	ldr	r0, [sp, #16]
+	b	.L1739
+.L1740:
+	mul	r2, r7, fp
+	b	.L1763
+.L1743:
+	ldr	r0, [sp, #20]
 	cmp	r0, r1
-	bne	.L1727
+	bne	.L1744
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3320]
 	cmp	r1, r2
-	bne	.L1727
+	bne	.L1744
 	str	r3, [sp, #44]
 	ldrh	r0, [r4, #262]
-	ldr	r3, [sp, #16]
+	ldr	r3, [sp, #20]
 	ldr	r2, [sp, #40]
 	muls	r0, r3, r0
-	subs	r0, r0, r7
+	subs	r0, r0, r6
 	add	r0, r10, r0, lsl #9
-	b	.L1744
-.L1734:
-	mov	r8, #-1
-	b	.L1712
-.L1735:
-	mov	r8, r3
-	b	.L1712
-.L1746:
+	b	.L1764
+.L1754:
+	mov	r5, #-1
+	b	.L1729
+.L1751:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1766:
 	.align	2
-.L1745:
+.L1765:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11774,36 +12007,46 @@ sftl_read:
 	.type	FtlWrite, %function
 FtlWrite:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 72
 	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r0, #16
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #68
-	sub	sp, sp, #68
+	.pad #76
+	sub	sp, sp, #76
+	str	r3, [sp, #12]
+	cmp	r0, #16
 	mov	r10, r1
-	str	r2, [sp, #12]
-	str	r3, [sp, #8]
-	bne	.L1749
-	mov	r2, r3
-	ldr	r1, [sp, #12]
+	ldr	r3, .L1823
+	str	r2, [sp, #8]
+	ldr	r3, [r3]
+	str	r3, [sp, #68]
+	bne	.L1769
+	ldr	r2, [sp, #12]
 	add	r0, r10, #256
+	ldr	r1, [sp, #8]
 	bl	FtlVendorPartWrite
-.L1748:
-	add	sp, sp, #68
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1749:
-	ldr	r3, [sp, #12]
-	ldr	r5, .L1800
-	adds	r6, r1, r3
+.L1768:
+	ldr	r3, .L1823
+	ldr	r2, [sp, #68]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1806
+	bl	__stack_chk_fail
+.L1769:
+	ldr	r5, .L1823+4
 	ldr	r3, [r5, #344]
-	cmp	r6, r3
-	bhi	.L1786
-	ldr	r4, .L1800+4
+	cmp	r1, r3
+	bcs	.L1809
+	ldr	r2, [sp, #8]
+	cmp	r2, r3
+	bhi	.L1809
+	adds	r6, r1, r2
+	cmp	r3, r6
+	bcc	.L1809
+	ldr	r4, .L1823+8
 	ldr	r0, [r4]
 	adds	r7, r0, #1
-	beq	.L1748
+	beq	.L1768
 	ldrh	r7, [r5, #262]
 	mov	r3, #2048
 	str	r3, [r5, #3672]
@@ -11817,7 +12060,7 @@ FtlWrite:
 	ldr	r2, [sp, #4]
 	str	r0, [sp, #20]
 	subs	r3, r0, r2
-	ldr	r2, [sp, #12]
+	ldr	r2, [sp, #8]
 	str	r3, [sp, #24]
 	adds	r3, r3, #1
 	str	r3, [sp]
@@ -11829,68 +12072,68 @@ FtlWrite:
 	add	r3, r3, r2
 	str	r3, [r5, #2568]
 	ldr	r3, [r4, #8]
-	cbz	r3, .L1788
+	cbz	r3, .L1811
 	ldrh	r2, [r5, #32]
 	add	r3, r5, #28
 	adds	r5, r5, #80
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1751:
+.L1771:
 	ldr	r7, [sp, #4]
-	ldr	r4, .L1800
-.L1752:
+	ldr	r4, .L1823+4
+.L1772:
 	ldr	r3, [sp]
-	cbnz	r3, .L1781
+	cbnz	r3, .L1801
 	mov	r0, r3
 	ldr	r1, [sp, #24]
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #228]
 	cmp	r3, #5
-	bls	.L1782
-.L1784:
+	bls	.L1802
+.L1804:
 	movs	r0, #0
-	b	.L1748
-.L1788:
+	b	.L1768
+.L1811:
 	adds	r5, r5, #28
-	b	.L1751
-.L1781:
+	b	.L1771
+.L1801:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #236]
 	cmp	r2, r3
-	bcc	.L1753
+	bcc	.L1773
 	movw	r2, #1041
-	ldr	r1, .L1800+8
-	ldr	r0, .L1800+12
+	ldr	r1, .L1823+12
+	ldr	r0, .L1823+16
 	bl	sftl_printk
-.L1753:
+.L1773:
 	ldrh	r2, [r5, #4]
-	cbnz	r2, .L1754
-	ldr	r3, .L1800+16
-	ldr	r6, .L1800+4
+	cbnz	r2, .L1774
+	ldr	r3, .L1823+20
+	ldr	r6, .L1823+8
 	cmp	r5, r3
-	bne	.L1755
+	bne	.L1775
 	ldrh	r8, [r4, #84]
 	cmp	r8, #0
-	bne	.L1756
+	bne	.L1776
 	add	r0, r5, #52
 	bl	allocate_new_data_superblock
 	str	r8, [r6, #8]
-.L1756:
-	ldr	r5, .L1800+16
-	ldr	r0, .L1800+16
+.L1776:
+	ldr	r5, .L1823+20
+	ldr	r0, .L1823+20
 	bl	allocate_new_data_superblock
 	ldr	r2, [r6, #8]
 	add	r3, r5, #52
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1757:
+.L1777:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1754
+	cbnz	r3, .L1774
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1754:
+.L1774:
 	ldrh	r2, [r5, #4]
 	ldr	r3, [sp]
 	cmp	r2, r3
@@ -11905,18 +12148,18 @@ FtlWrite:
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1758
+	bcc	.L1778
 	movw	r2, #1074
-	ldr	r1, .L1800+8
-	ldr	r0, .L1800+12
+	ldr	r1, .L1823+12
+	ldr	r0, .L1823+16
 	bl	sftl_printk
-.L1758:
+.L1778:
 	mov	fp, #0
-.L1759:
+.L1779:
 	ldr	r3, [sp, #36]
 	cmp	fp, r3
-	bne	.L1779
-.L1760:
+	bne	.L1799
+.L1780:
 	mov	r3, r5
 	movs	r2, #0
 	mov	r1, fp
@@ -11924,32 +12167,32 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [sp]
 	cmp	fp, r3
-	bls	.L1780
+	bls	.L1800
 	mov	r2, #1152
-	ldr	r1, .L1800+8
-	ldr	r0, .L1800+12
+	ldr	r1, .L1823+12
+	ldr	r0, .L1823+16
 	bl	sftl_printk
-.L1780:
+.L1800:
 	ldr	r3, [sp]
 	sub	r3, r3, fp
 	str	r3, [sp]
-	b	.L1752
-.L1755:
+	b	.L1772
+.L1775:
 	str	r2, [r6, #8]
 	ldrh	r2, [r4, #32]
-	cbnz	r2, .L1791
+	cbnz	r2, .L1814
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1757
-.L1791:
+	b	.L1777
+.L1814:
 	mov	r5, r3
-	b	.L1754
-.L1779:
+	b	.L1774
+.L1799:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1760
+	beq	.L1780
 	movs	r2, #0
-	add	r1, sp, #40
+	add	r1, sp, #44
 	mov	r0, r7
 	mov	r8, #20
 	bl	log2phys
@@ -11974,57 +12217,57 @@ FtlWrite:
 	bl	ftl_memset
 	ldr	r3, [sp, #4]
 	cmp	r7, r3
-	beq	.L1761
+	beq	.L1781
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
-	bne	.L1796
+	bne	.L1819
 	ldrh	r2, [r4, #262]
-	ldr	r3, [sp, #12]
+	ldr	r3, [sp, #8]
 	smulbb	r2, r2, r7
 	add	r6, r10, r3
 	movs	r3, #0
 	str	r3, [sp, #16]
 	subs	r6, r6, r2
 	uxth	r6, r6
-	b	.L1764
-.L1761:
+	b	.L1784
+.L1781:
 	ldrh	r6, [r4, #262]
 	mov	r0, r10
 	mov	r1, r6
 	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #12]
+	ldr	r3, [sp, #8]
 	subs	r6, r6, r1
 	str	r1, [sp, #16]
 	cmp	r6, r3
 	it	cs
 	movcs	r6, r3
-.L1764:
+.L1784:
 	ldrh	r3, [r4, #262]
 	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	bne	.L1765
+	bne	.L1785
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	itte	ne
 	mulne	r6, r6, r7
-	ldrne	r2, [sp, #8]
-	ldreq	r2, [sp, #8]
+	ldrne	r2, [sp, #12]
+	ldreq	r2, [sp, #12]
 	add	r3, r3, r8
 	itett	ne
 	subne	r6, r6, r10
 	streq	r2, [r3, #8]
 	addne	r6, r2, r6, lsl #9
 	strne	r6, [r3, #8]
-.L1767:
+.L1787:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #236]
 	cmp	r2, r3
-	bcc	.L1776
+	bcc	.L1796
 	movw	r2, #1143
-	ldr	r1, .L1800+8
-	ldr	r0, .L1800+12
+	ldr	r1, .L1823+12
+	ldr	r0, .L1823+16
 	bl	sftl_printk
-.L1776:
+.L1796:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
@@ -12039,12 +12282,21 @@ FtlWrite:
 	it	eq
 	moveq	r3, #0
 	str	r3, [r4, #2596]
-	ldr	r3, [sp, #40]
+	ldr	r3, [sp, #44]
 	str	r3, [r9, #12]
 	ldrh	r3, [r5]
 	strh	r3, [r9, #2]	@ movhi
-	b	.L1759
-.L1765:
+	b	.L1779
+.L1824:
+	.align	2
+.L1823:
+	.word	__stack_chk_guard
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR1+591
+	.word	.LC8
+	.word	.LANCHOR0+28
+.L1785:
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	ite	eq
@@ -12052,117 +12304,108 @@ FtlWrite:
 	ldrne	r2, [r4, #3320]
 	add	r3, r3, r8
 	str	r2, [r3, #8]
-	ldr	r3, [sp, #40]
+	ldr	r3, [sp, #44]
 	adds	r0, r3, #1
-	beq	.L1770
-	str	r3, [sp, #48]
+	beq	.L1790
+	str	r3, [sp, #52]
 	movs	r1, #1
 	ldr	r3, [r4, #3300]
-	add	r0, sp, #44
-	str	r7, [sp, #60]
+	add	r0, sp, #48
+	str	r7, [sp, #64]
 	add	r3, r3, r8
 	ldr	r2, [r3, #8]
 	ldr	r3, [r3, #12]
-	str	r2, [sp, #52]
+	str	r2, [sp, #56]
 	movs	r2, #0
-	str	r3, [sp, #56]
+	str	r3, [sp, #60]
 	bl	FlashReadPages
-	ldr	r3, [sp, #44]
+	ldr	r3, [sp, #48]
 	adds	r1, r3, #1
-	bne	.L1771
+	bne	.L1791
 	ldr	r2, [r4, #2716]
-	ldr	r0, .L1800+20
+	ldr	r0, .L1825
 	adds	r2, r2, #1
 	str	r2, [r4, #2716]
 	mov	r2, r7
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1774:
+.L1794:
 	ldr	r3, [sp, #4]
 	lsls	r2, r6, #9
 	cmp	r7, r3
-	bne	.L1775
+	bne	.L1795
 	ldr	r3, [r4, #3300]
-	ldr	r1, [sp, #8]
+	ldr	r1, [sp, #12]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #16]
 	add	r0, r0, r3, lsl #9
-.L1798:
+.L1821:
 	bl	ftl_memcpy
-	b	.L1767
-.L1801:
-	.align	2
-.L1800:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR1+591
-	.word	.LC8
-	.word	.LANCHOR0+28
-	.word	.LC125
-.L1771:
+	b	.L1787
+.L1791:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1773
+	beq	.L1793
 	ldr	r3, [r4, #2716]
 	mov	r2, r7
-	ldr	r0, .L1802
+	ldr	r0, .L1825+4
 	adds	r3, r3, #1
 	str	r3, [r4, #2716]
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1773:
+.L1793:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1774
+	beq	.L1794
 	mov	r2, #1128
-	ldr	r1, .L1802+4
-	ldr	r0, .L1802+8
+	ldr	r1, .L1825+8
+	ldr	r0, .L1825+12
 	bl	sftl_printk
-	b	.L1774
-.L1770:
+	b	.L1794
+.L1790:
 	ldr	r3, [r4, #3300]
 	movs	r1, #0
 	ldrh	r2, [r4, #314]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1774
-.L1775:
+	b	.L1794
+.L1795:
 	ldrh	r1, [r4, #262]
-	ldr	r0, [sp, #8]
+	ldr	r0, [sp, #12]
 	ldr	r3, [r4, #3300]
 	muls	r1, r7, r1
 	add	r3, r3, r8
 	sub	r1, r1, r10
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1798
-.L1796:
+	b	.L1821
+.L1819:
 	ldr	r3, [r4, #3300]
-	ldr	r2, [sp, #8]
+	ldr	r2, [sp, #12]
 	add	r8, r8, r3
 	ldrh	r3, [r4, #262]
 	muls	r3, r7, r3
 	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
 	str	r3, [r8, #8]
-	b	.L1767
-.L1782:
+	b	.L1787
+.L1802:
 	mov	r5, #256
 	movw	r6, #65535
-.L1785:
+.L1805:
 	ldrh	r3, [r4, #176]
 	cmp	r3, r6
-	bne	.L1783
+	bne	.L1803
 	ldrh	r3, [r4, #226]
 	cmp	r3, r6
-	bne	.L1783
+	bne	.L1803
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1783:
+.L1803:
 	movs	r1, #1
 	movs	r3, #128
 	mov	r0, r1
@@ -12174,16 +12417,21 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #228]
 	cmp	r3, #2
-	bhi	.L1784
+	bhi	.L1804
 	subs	r5, r5, #1
-	bne	.L1785
-	b	.L1784
-.L1786:
+	bne	.L1805
+	b	.L1804
+.L1809:
 	mov	r0, #-1
-	b	.L1748
-.L1803:
+	b	.L1768
+.L1806:
+	add	sp, sp, #76
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1826:
 	.align	2
-.L1802:
+.L1825:
+	.word	.LC125
 	.word	.LC126
 	.word	.LANCHOR1+591
 	.word	.LC8
@@ -12221,7 +12469,7 @@ FtlLoadSysInfo:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #16
 	movs	r1, #0
-	ldr	r4, .L1835
+	ldr	r4, .L1858
 	ldr	r3, [r4, #3304]
 	ldrh	r2, [r4, #244]
 	ldr	r0, [r4, #76]
@@ -12233,32 +12481,32 @@ FtlLoadSysInfo:
 	ldrh	r0, [r4, #2628]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1806
-.L1817:
+	bne	.L1829
+.L1840:
 	mov	r0, #-1
-.L1805:
+.L1828:
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1806:
+.L1829:
 	movs	r1, #1
-	ldr	r8, .L1835+20
+	ldr	r8, .L1858+20
 	bl	FtlGetLastWrittenPage
-	ldr	r9, .L1835+4
+	ldr	r9, .L1858+4
 	add	r7, r4, #3456
 	ldrsh	r6, [r4, #2628]
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #2630]	@ movhi
-.L1808:
+.L1831:
 	cmp	r5, #0
-	bge	.L1814
+	bge	.L1837
 	movw	r2, #1465
-	ldr	r1, .L1835+4
-	ldr	r0, .L1835+8
+	ldr	r1, .L1858+4
+	ldr	r0, .L1858+8
 	bl	sftl_printk
-	b	.L1813
-.L1814:
+	b	.L1836
+.L1837:
 	orr	r3, r5, r6, lsl #10
 	movs	r2, #1
 	mov	r1, r2
@@ -12270,15 +12518,15 @@ FtlLoadSysInfo:
 	ldr	r3, [r4, #3468]
 	ldr	r10, [r3, #12]
 	cmp	r10, #0
-	beq	.L1809
+	beq	.L1832
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1809
+	beq	.L1832
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	cmp	r10, r0
-	beq	.L1809
+	beq	.L1832
 	ldrh	r3, [r4, #2632]
 	mov	r2, r6
 	str	r0, [sp, #8]
@@ -12286,48 +12534,48 @@ FtlLoadSysInfo:
 	str	r10, [sp, #4]
 	str	r3, [sp]
 	mov	r3, r5
-	ldr	r0, .L1835+12
+	ldr	r0, .L1858+12
 	bl	sftl_printk
-	cbnz	r5, .L1810
+	cbnz	r5, .L1833
 	ldrh	r3, [r4, #2632]
 	cmp	r6, r3
-	beq	.L1810
+	beq	.L1833
 	ldrh	r5, [r4, #308]
 	sxth	r6, r3
-.L1812:
+.L1835:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L1808
-.L1810:
+	b	.L1831
+.L1833:
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1809:
+.L1832:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1812
+	beq	.L1835
 	ldr	r3, [r4, #3304]
 	ldr	r3, [r3]
 	cmp	r3, r8
-	bne	.L1812
+	bne	.L1835
 	ldr	r3, [r4, #3336]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L1812
-.L1813:
+	bne	.L1835
+.L1836:
 	ldrh	r3, [r4, #244]
 	ldrh	r2, [r4, #314]
 	adds	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1816
+	bcs	.L1839
 	movw	r2, #1467
-	ldr	r1, .L1835+4
-	ldr	r0, .L1835+8
+	ldr	r1, .L1858+4
+	ldr	r0, .L1858+8
 	bl	sftl_printk
-.L1816:
+.L1839:
 	movs	r2, #48
 	ldr	r1, [r4, #3464]
-	ldr	r0, .L1835+16
+	ldr	r0, .L1858+16
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #244]
 	ldr	r1, [r4, #3464]
@@ -12346,15 +12594,15 @@ FtlLoadSysInfo:
 	add	r1, r1, r3
 	bl	ftl_memcpy
 	ldr	r2, [r4, #2472]
-	ldr	r3, .L1835+20
+	ldr	r3, .L1858+20
 	cmp	r2, r3
-	bne	.L1817
+	bne	.L1840
 	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
 	ldrh	r3, [r4, #258]
 	ldrh	r5, [r4, #2480]
 	cmp	r2, r3
 	strh	r5, [r4, #2634]	@ movhi
-	bne	.L1817
+	bne	.L1840
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #262]
 	ldr	r6, [r4, #248]
@@ -12370,12 +12618,12 @@ FtlLoadSysInfo:
 	bl	__aeabi_uidiv
 	cmp	r5, r6
 	strh	r0, [r4, #2624]	@ movhi
-	bls	.L1818
+	bls	.L1841
 	movw	r2, #1489
-	ldr	r1, .L1835+4
-	ldr	r0, .L1835+8
+	ldr	r1, .L1858+4
+	ldr	r0, .L1858+8
 	bl	sftl_printk
-.L1818:
+.L1841:
 	ldrh	r3, [r4, #2488]
 	ldrh	r1, [r4, #2486]
 	lsrs	r2, r3, #6
@@ -12430,36 +12678,36 @@ FtlLoadSysInfo:
 	strhi	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1821
-	ldr	r0, .L1835+24
+	beq	.L1844
+	ldr	r0, .L1858+24
 	bl	make_superblock
-.L1821:
+.L1844:
 	ldrh	r2, [r4, #80]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1822
-	ldr	r0, .L1835+28
+	beq	.L1845
+	ldr	r0, .L1858+28
 	bl	make_superblock
-.L1822:
+.L1845:
 	ldrh	r2, [r4, #128]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1823
-	ldr	r0, .L1835+32
+	beq	.L1846
+	ldr	r0, .L1858+32
 	bl	make_superblock
-.L1823:
+.L1846:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1824
-	ldr	r0, .L1835+36
+	beq	.L1847
+	ldr	r0, .L1858+36
 	bl	make_superblock
-.L1824:
+.L1847:
 	movs	r0, #0
-	b	.L1805
-.L1836:
+	b	.L1828
+.L1859:
 	.align	2
-.L1835:
+.L1858:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+600
 	.word	.LC8
@@ -12493,7 +12741,7 @@ FtlMapTblRecovery:
 	ldrh	r10, [r0, #6]
 	str	r3, [sp, #8]
 	ldr	r3, [r0, #16]
-	ldr	r4, .L1878
+	ldr	r4, .L1901
 	ldr	r9, [r0, #12]
 	lsl	r2, r10, #2
 	str	r3, [sp, #16]
@@ -12514,16 +12762,16 @@ FtlMapTblRecovery:
 	mov	r8, r3
 	str	r3, [r5, #32]
 	str	r3, [r5, #28]
-.L1838:
+.L1861:
 	ldr	r3, [sp, #12]
 	sxth	r6, r8
 	cmp	r6, r3
-	bge	.L1857
+	bge	.L1880
 	ldr	r3, [sp, #12]
 	lsls	r7, r6, #1
 	subs	r3, r3, #1
 	cmp	r6, r3
-	bne	.L1839
+	bne	.L1862
 	movs	r1, #1
 	ldrh	r0, [r9, r6, lsl #1]
 	bl	FtlGetLastWrittenPage
@@ -12537,22 +12785,22 @@ FtlMapTblRecovery:
 	strh	r0, [r5, #2]	@ movhi
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r5, #28]
-.L1840:
+.L1863:
 	ldr	r3, [sp, #12]
 	sxth	r9, r8
 	adds	r2, r3, #1
 	cmp	r9, r2
-	blt	.L1843
-.L1857:
+	blt	.L1866
+.L1880:
 	mov	r0, r5
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r5, #2]
 	ldrh	r3, [r4, #308]
 	cmp	r2, r3
-	bne	.L1845
+	bne	.L1868
 	mov	r0, r5
 	bl	ftl_map_blk_alloc_new_blk
-.L1845:
+.L1868:
 	mov	r0, r5
 	bl	ftl_map_blk_gc
 	mov	r0, r5
@@ -12561,9 +12809,9 @@ FtlMapTblRecovery:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1843:
+.L1866:
 	ldrh	r2, [r7]
-	ldr	r0, .L1878+4
+	ldr	r0, .L1901+4
 	orr	r2, r9, r2, lsl #10
 	str	r2, [r4, #3460]
 	movs	r2, #1
@@ -12572,32 +12820,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #16]
-	cbz	r2, .L1841
+	cbz	r2, .L1864
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1841
+	beq	.L1864
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #16]
 	cmp	r2, r0
-	beq	.L1841
+	beq	.L1864
 	str	r0, [sp, #4]
 	mov	r3, r9
 	str	r2, [sp]
 	mov	r2, r6
-	ldr	r1, .L1878+8
-	ldr	r0, .L1878+12
+	ldr	r1, .L1901+8
+	ldr	r0, .L1901+12
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1841:
+.L1864:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1842
+	beq	.L1865
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1842
+	bls	.L1865
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12605,12 +12853,12 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1842:
+.L1865:
 	add	r8, r8, #1
-	b	.L1840
-.L1839:
+	b	.L1863
+.L1862:
 	ldr	r3, [r4, #3304]
-	ldr	r0, .L1878+4
+	ldr	r0, .L1901+4
 	str	r3, [r4, #3464]
 	add	r3, r9, r7
 	ldrh	r2, [r9, r6, lsl #1]
@@ -12624,24 +12872,24 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1859
+	beq	.L1882
 	ldrh	r2, [fp]
 	ldrh	r3, [r5, #4]
 	cmp	r2, r3
-	bne	.L1859
+	bne	.L1882
 	ldrh	r2, [fp, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	beq	.L1847
-.L1859:
+	beq	.L1870
+.L1882:
 	movs	r7, #0
-.L1848:
+.L1871:
 	ldrh	r2, [r4, #308]
 	sxth	r3, r7
 	cmp	r3, r2
-	bge	.L1855
+	bge	.L1878
 	ldr	r2, [sp, #20]
-	ldr	r0, .L1878+4
+	ldr	r0, .L1901+4
 	str	r3, [sp, #28]
 	ldrh	r2, [r2]
 	orr	r2, r3, r2, lsl #10
@@ -12652,32 +12900,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #24]
-	cbz	r2, .L1852
+	cbz	r2, .L1875
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1852
+	beq	.L1875
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #24]
 	cmp	r2, r0
-	beq	.L1852
+	beq	.L1875
 	str	r0, [sp, #4]
 	str	r2, [sp]
 	mov	r2, r6
 	ldr	r3, [sp, #28]
-	ldr	r1, .L1878+8
-	ldr	r0, .L1878+16
+	ldr	r1, .L1901+8
+	ldr	r0, .L1901+16
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1852:
+.L1875:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1853
+	beq	.L1876
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1853
+	bls	.L1876
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12685,37 +12933,37 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1853:
+.L1876:
 	adds	r7, r7, #1
-	b	.L1848
-.L1847:
+	b	.L1871
+.L1870:
 	movs	r1, #0
 	movs	r0, #4
-.L1849:
+.L1872:
 	ldrh	r2, [r4, #308]
 	sxth	r3, r1
 	subs	r2, r2, #1
 	cmp	r3, r2
-	blt	.L1851
-.L1855:
+	blt	.L1874
+.L1878:
 	add	r8, r8, #1
-	b	.L1838
-.L1851:
+	b	.L1861
+.L1874:
 	ldr	r6, [r4, #3304]
 	ldr	r2, [r6, r3, lsl #3]
 	uxth	r7, r2
 	cmp	r10, r7
-	bls	.L1850
+	bls	.L1873
 	add	r3, r0, r3, lsl #3
 	ldr	r3, [r6, r3]
 	ldr	r6, [sp, #8]
 	str	r3, [r6, r7, lsl #2]
-.L1850:
+.L1873:
 	adds	r1, r1, #1
-	b	.L1849
-.L1879:
+	b	.L1872
+.L1902:
 	.align	2
-.L1878:
+.L1901:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+615
@@ -12734,7 +12982,7 @@ FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L1881
+	ldr	r0, .L1904
 	push	{r3, lr}
 	.save {r3, lr}
 	ldrh	r3, [r0, #324]
@@ -12757,9 +13005,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1882:
+.L1905:
 	.align	2
-.L1881:
+.L1904:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -12777,13 +13025,13 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L1884
+	ldr	r0, .L1907
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1885:
+.L1908:
 	.align	2
-.L1884:
+.L1907:
 	.word	.LANCHOR0+3396
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -12801,7 +13049,7 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1902
+	ldr	r4, .L1925
 	ldrh	r0, [r4, #240]
 	strh	r3, [r4, #3476]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
@@ -12809,17 +13057,17 @@ FtlSysBlkInit:
 	ldrh	r2, [r4, #2628]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1887
-.L1889:
+	bne	.L1910
+.L1912:
 	mov	r5, #-1
-.L1886:
+.L1909:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1887:
+.L1910:
 	bl	FtlLoadSysInfo
 	mov	r5, r0
 	cmp	r0, #0
-	bne	.L1889
+	bne	.L1912
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12833,23 +13081,23 @@ FtlSysBlkInit:
 	mov	r3, r5
 	ldr	r2, [r4, #2544]
 	movs	r0, #12
-.L1890:
+.L1913:
 	cmp	r3, r1
-	bge	.L1895
+	bge	.L1918
 	mla	r6, r0, r3, r2
 	ldr	r6, [r6, #4]
 	cmp	r6, #0
-	bge	.L1891
-.L1895:
+	bge	.L1914
+.L1918:
 	ldrh	r2, [r4, #2500]
 	cmp	r3, r1
 	add	r2, r2, #1
 	strh	r2, [r4, #2500]	@ movhi
-	bge	.L1901
-.L1892:
-	ldr	r0, .L1902+4
+	bge	.L1924
+.L1915:
+	ldr	r0, .L1925+4
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1902+8
+	ldr	r0, .L1925+8
 	bl	FtlSuperblockPowerLostFix
 	ldrh	r1, [r4, #28]
 	ldr	r2, [r4, #76]
@@ -12878,37 +13126,37 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1896
-.L1891:
+	b	.L1919
+.L1914:
 	adds	r3, r3, #1
-	b	.L1890
-.L1901:
+	b	.L1913
+.L1924:
 	ldrh	r3, [r4, #3476]
 	cmp	r3, #0
-	bne	.L1892
-.L1896:
+	bne	.L1915
+.L1919:
 	ldrh	r0, [r4, #28]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1897
+	beq	.L1920
 	ldrh	r3, [r4, #32]
-	cbnz	r3, .L1897
+	cbnz	r3, .L1920
 	ldrh	r3, [r4, #84]
-	cbnz	r3, .L1897
+	cbnz	r3, .L1920
 	bl	FtlGcRefreshBlock
 	ldrh	r0, [r4, #80]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-	ldr	r0, .L1902+4
+	ldr	r0, .L1925+4
 	bl	allocate_new_data_superblock
-	ldr	r0, .L1902+8
+	ldr	r0, .L1925+8
 	bl	allocate_new_data_superblock
-.L1897:
+.L1920:
 	bl	FtlVpcCheckAndModify
-	b	.L1886
-.L1903:
+	b	.L1909
+.L1926:
 	.align	2
-.L1902:
+.L1925:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+28
 	.word	.LANCHOR0+80
@@ -12928,43 +13176,43 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1928
+	ldr	r4, .L1951
 	ldrh	r0, [r4, #240]
 	str	r3, [r4, #2592]
 	str	r3, [r4, #2596]
 	str	r3, [r4, #2608]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1905
+	cbz	r0, .L1928
 	bl	FtlMakeBbt
-.L1905:
-	ldr	r0, .L1928+4
+.L1928:
+	ldr	r0, .L1951+4
 	movs	r2, #0
-.L1906:
+.L1929:
 	ldrh	r1, [r4, #262]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1907
+	blt	.L1930
 	ldrh	r6, [r4, #244]
 	movs	r5, #0
-.L1908:
+.L1931:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r6
-	bhi	.L1909
+	bhi	.L1932
 	ldrh	r1, [r4, #236]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1910
-.L1914:
+	bge	.L1933
+.L1937:
 	movs	r5, #0
 	mov	r6, r5
-.L1911:
+.L1934:
 	ldrh	r3, [r4, #244]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1915
+	bhi	.L1938
 	ldrh	r3, [r4, #246]
 	ldrh	r5, [r4, #236]
 	ldr	r9, [r4, #248]
@@ -12980,7 +13228,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1916
+	ble	.L1939
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12988,9 +13236,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2624]	@ movhi
-.L1916:
+.L1939:
 	ldrh	r3, [r4, #298]
-	cbz	r3, .L1918
+	cbz	r3, .L1941
 	ldrh	r2, [r4, #2624]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2624]	@ movhi
@@ -13001,10 +13249,10 @@ ftl_low_format:
 	strlt	r8, [r4, #2556]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2624]	@ movhi
-.L1918:
+.L1941:
 	ldrh	r2, [r4, #2624]
 	ldr	r3, [r4, #2556]
-	ldr	r6, .L1928+8
+	ldr	r6, .L1951+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #306]
@@ -13037,28 +13285,28 @@ ftl_low_format:
 	strh	r5, [r4, #176]	@ movhi
 	strb	r3, [r4, #36]
 	bl	ftl_memset
-.L1920:
+.L1943:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #35]	@ zero_extendqisi2
 	ldrh	r2, [r4, #28]
 	cmp	r3, #0
-	bne	.L1921
+	bne	.L1944
 	ldr	r3, [r4, #76]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #28]
 	adds	r3, r3, #1
 	strh	r3, [r4, #28]	@ movhi
-	b	.L1920
-.L1907:
+	b	.L1943
+.L1930:
 	ldr	r5, [r4, #3316]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
 	ldr	r1, [r4, #3320]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1906
-.L1909:
+	b	.L1929
+.L1932:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13066,8 +13314,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1908
-.L1910:
+	b	.L1931
+.L1933:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #336]
@@ -13077,27 +13325,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #240]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #244]
-.L1912:
+.L1935:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r5
-	bls	.L1914
+	bls	.L1937
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1912
-.L1915:
+	b	.L1935
+.L1938:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1911
-.L1921:
+	b	.L1934
+.L1944:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
 	ldrh	r1, [r4, #32]
-	ldr	r6, .L1928+12
+	ldr	r6, .L1951+12
 	str	r3, [r4, #40]
 	adds	r3, r3, #1
 	str	r3, [r4, #2592]
@@ -13111,19 +13359,19 @@ ftl_low_format:
 	strh	r3, [r4, #80]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #88]
-.L1922:
+.L1945:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #87]	@ zero_extendqisi2
 	ldrh	r2, [r4, #80]
-	cbnz	r3, .L1923
+	cbnz	r3, .L1946
 	ldr	r3, [r4, #76]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #80]
 	adds	r3, r3, #1
 	strh	r3, [r4, #80]	@ movhi
-	b	.L1922
-.L1923:
+	b	.L1945
+.L1946:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
 	ldrh	r1, [r4, #84]
@@ -13146,16 +13394,16 @@ ftl_low_format:
 	str	r3, [r4, #2592]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1924
-	ldr	r3, .L1928+16
+	cbnz	r0, .L1947
+	ldr	r3, .L1951+16
 	movs	r2, #1
 	str	r2, [r3]
-.L1924:
+.L1947:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1929:
+.L1952:
 	.align	2
-.L1928:
+.L1951:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR0+28
@@ -13177,10 +13425,10 @@ sftl_init:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r3, #-1
-	ldr	r4, .L1936
-	ldr	r5, .L1936+4
-	ldr	r1, .L1936+8
-	ldr	r0, .L1936+12
+	ldr	r4, .L1959
+	ldr	r5, .L1959+4
+	ldr	r1, .L1959+8
+	ldr	r0, .L1959+12
 	str	r3, [r5]
 	bl	sftl_printk
 	mov	r0, r4
@@ -13190,27 +13438,27 @@ sftl_init:
 	ldrh	r0, [r4, #240]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	r0, .L1934
+	cbnz	r0, .L1957
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1934
+	cbnz	r0, .L1957
 	movs	r3, #1
 	str	r3, [r5]
 	ldrh	r3, [r4, #228]
 	cmp	r3, #15
-	bhi	.L1934
+	bhi	.L1957
 	movw	r4, #8129
-.L1933:
+.L1956:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1933
-.L1934:
+	bne	.L1956
+.L1957:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L1937:
+.L1960:
 	.align	2
-.L1936:
+.L1959:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC0
@@ -13226,42 +13474,45 @@ sftl_init:
 	.type	FtlWriteToIDB, %function
 FtlWriteToIDB:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 96
+	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2028
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	add	r8, r1, r0
 	add	r9, r8, #-1
-	.pad #108
-	sub	sp, sp, #108
+	.pad #116
+	sub	sp, sp, #116
 	cmp	r9, #63
 	mov	r4, r0
+	ldr	r3, [r3]
 	mov	r6, r1
 	mov	r7, r2
-	ldr	r5, .L2005
-	bls	.L1939
+	ldr	r5, .L2028+4
+	str	r3, [sp, #108]
+	bls	.L1962
 	cmp	r0, #576
-	bcc	.L1940
-.L1939:
+	bcc	.L1963
+.L1962:
 	ldr	r3, [r5, #3680]
-	cbnz	r3, .L1941
-.L2004:
+	cbnz	r3, .L1964
+.L2027:
 	movs	r4, #0
-	b	.L1938
-.L1941:
-	ldr	fp, [r5, #3684]
-	ldr	r3, .L2005+4
-	ldr	r2, [fp]
+	b	.L1961
+.L1964:
+	ldr	r8, [r5, #3684]
+	ldr	r3, .L2028+8
+	ldr	r2, [r8]
 	cmp	r2, r3
-	bne	.L1943
+	bne	.L1966
 	ldrh	r1, [r5, #10]
-	add	r0, fp, #260096
+	add	r0, r8, #260096
 	movs	r2, #0
 	movw	r3, #65023
-.L1947:
+.L1970:
 	ldr	r4, [r0, #-4]!
-	cbnz	r4, .L1944
-	ldr	r4, [fp, r2, lsl #2]
+	cbnz	r4, .L1967
+	ldr	r4, [r8, r2, lsl #2]
 	adds	r2, r2, #1
 	cmp	r2, #4096
 	add	r3, r3, #-1
@@ -13269,282 +13520,295 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	r4, [r0, #2048]
-	bne	.L1947
-	mov	r3, #512
-	b	.L2002
-.L1944:
+	bne	.L1970
+	mov	fp, #512
+	b	.L1969
+.L1967:
 	adds	r3, r3, #127
-	lsrs	r3, r3, #7
-.L2002:
-	str	r3, [sp, #12]
+	lsr	fp, r3, #7
+.L1969:
 	lsls	r1, r1, #2
-	ldr	r3, [sp, #12]
+	add	r0, fp, #4
+	ldr	r4, .L2028+4
 	uxth	r1, r1
-	ldr	r4, .L2005
-	adds	r0, r3, #4
 	bl	__aeabi_uidiv
 	adds	r3, r0, #1
-	ldr	r1, [sp, #12]
+	mov	r1, fp
 	mov	r2, r3
-	ldr	r0, .L2005+8
+	ldr	r0, .L2028+12
 	str	r3, [sp, #16]
 	bl	sftl_printk
-	ldr	r3, [sp, #12]
-	lsls	r3, r3, #7
-	str	r3, [sp, #28]
+	lsl	r3, fp, #7
+	str	r3, [sp, #32]
 	movs	r3, #0
-	mov	r5, r3
 	str	r3, [sp, #20]
-.L1969:
-	mov	r1, #512
+	str	r3, [sp, #12]
+.L1971:
+	ldr	r3, [sp, #16]
+	ldr	r2, [sp, #12]
+	add	r3, r3, r2
+	cmp	r3, #8
+	str	r3, [sp, #28]
+	bls	.L1993
+	ldr	r3, [sp, #20]
+	cbnz	r3, .L1994
+.L1966:
+	mov	fp, #-1
+.L1994:
+	ldr	r5, .L2028+4
+	movs	r3, #0
+	mov	r4, fp
+	ldr	r0, [r5, #3684]
+	str	r3, [r5, #3680]
+	bl	kfree
+	ldr	r0, [r5, #3688]
+	bl	kfree
+.L1961:
+	ldr	r3, .L2028
+	mov	r0, r4
+	ldr	r2, [sp, #108]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2001
+	bl	__stack_chk_fail
+.L1993:
+	mov	r2, #512
+	movs	r1, #0
 	ldr	r0, [r4, #3688]
-	bl	__memzero
+	bl	memset
 	ldrh	r6, [r4, #10]
-	mul	r3, r5, r6
+	ldr	r3, [sp, #12]
+	muls	r3, r6, r3
 	str	r3, [sp, #24]
 	ldr	r3, [r4, #3264]
 	cmp	r3, #0
-	beq	.L1977
+	beq	.L2002
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	ite	eq
 	moveq	r9, #6
 	movne	r9, #9
-.L1948:
-	ldr	r8, [sp, #24]
-	movs	r7, #0
-.L1949:
+.L1972:
+	ldr	r7, [sp, #24]
+	movs	r5, #0
+.L1973:
 	ldr	r3, [r4, #3252]
-	mov	r1, r8
+	mov	r1, r7
 	movs	r0, #0
-	adds	r7, r7, #1
+	adds	r5, r5, #1
 	blx	r3
 	ldr	r3, [sp, #16]
-	add	r8, r8, r6
-	cmp	r3, r7
-	bhi	.L1949
+	add	r7, r7, r6
+	cmp	r3, r5
+	bhi	.L1973
 	cmp	r9, #9
-	bne	.L1979
-	ldr	r7, [r4, #3688]
-	mov	r1, #1024
-	mov	r0, r7
-	bl	__memzero
-	ldr	r3, .L2005+12
+	bne	.L2004
+	ldr	r5, [r4, #3688]
+	mov	r2, #1024
+	movs	r1, #0
+	mov	r0, r5
+	bl	ftl_memset
+	ldr	r3, .L2028+16
 	movs	r1, #12
 	movs	r2, #4
-	str	r1, [r7, #4]
-	strb	r2, [r7, #17]
-	adds	r0, r7, r1
-	str	r3, [r7]
+	str	r1, [r5, #4]
+	strb	r2, [r5, #17]
+	adds	r0, r5, r1
+	str	r3, [r5]
 	movs	r3, #0
 	ldrh	r2, [r4, #10]
-	str	r3, [r7, #12]
-	strb	r3, [r7, #16]
-	strh	r2, [r7, #18]	@ movhi
+	str	r3, [r5, #12]
+	strb	r3, [r5, #16]
+	strh	r2, [r5, #18]	@ movhi
 	movs	r2, #16
-	strb	r3, [r7, #20]
-	strb	r2, [r7, #21]
-	strh	r3, [r7, #22]	@ movhi
+	strb	r3, [r5, #20]
+	strb	r2, [r5, #21]
+	strh	r3, [r5, #22]	@ movhi
 	bl	js_hash
-	str	r0, [r7, #8]
-.L1950:
+	str	r0, [r5, #8]
+.L1974:
 	ldr	r3, [sp, #16]
-	mov	r10, fp
-	mov	r8, #0
+	mov	r10, r8
 	muls	r3, r6, r3
-	str	r3, [sp, #32]
-.L1951:
-	ldr	r3, [sp, #32]
-	cmp	r8, r3
-	beq	.L1958
+	movs	r6, #0
+	str	r3, [sp, #36]
+.L1975:
+	ldr	r3, [sp, #36]
+	cmp	r6, r3
+	beq	.L1982
 	cmp	r9, #9
 	ite	ne
-	lslne	r3, r8, #2
-	addeq	r3, r8, #1
-	str	r3, [sp, #40]
-	movw	r3, #61424
+	lslne	r3, r6, #2
+	addeq	r3, r6, #1
 	str	r3, [sp, #44]
-	cmp	r8, #0
-	bne	.L1954
+	movw	r3, #61424
+	str	r3, [sp, #48]
+	cmp	r6, #0
+	bne	.L1978
 	cmp	r9, #9
-	bne	.L1954
+	bne	.L1978
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
-	mov	r2, r7
-	add	r3, sp, #40
+	ldr	r7, [r4, #3256]
+	add	r3, sp, #44
+	mov	r2, r5
 	ldr	r1, [sp, #24]
-	mov	r0, r8
-	ldr	r6, [r4, #3256]
-	blx	r6
+	mov	r0, r6
+	blx	r7
 	ldr	r3, [r4, #3264]
-	str	r0, [sp, #36]
+	mov	r7, r0
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
-	ldr	r2, [sp, #36]
-	adds	r2, r2, #1
-	bne	.L1955
-.L1958:
+	adds	r7, r7, #1
+	bne	.L1979
+.L1982:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
-	ldr	r2, [r4, #3264]
-	ldr	r8, [r4, #3688]
+	ldr	r2, [sp, #12]
+	ldr	r7, [r4, #3688]
 	str	r3, [sp, #24]
 	ldrh	r3, [r4, #10]
-	mul	r9, r5, r3
+	mul	r9, r3, r2
+	ldr	r2, [r4, #3264]
 	cmp	r2, #0
-	bne	.L1956
+	bne	.L1980
 	mov	r10, #6
-.L1957:
+.L1981:
 	ldr	r2, [sp, #16]
-	movs	r6, #0
+	movs	r5, #0
 	muls	r3, r2, r3
-	str	r3, [sp, #32]
-.L1960:
-	ldr	r3, [sp, #32]
-	cmp	r6, r3
-	beq	.L1964
-	cmp	r6, #0
-	bne	.L1961
+	str	r3, [sp, #36]
+.L1984:
+	ldr	r3, [sp, #36]
+	cmp	r5, r3
+	beq	.L1988
+	cmp	r5, #0
+	bne	.L1985
 	cmp	r10, #9
-	bne	.L1961
+	bne	.L1985
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
 	ldr	r3, [r4, #3268]
 	movs	r0, #2
 	blx	r3
-	mov	r2, r8
+	mov	r2, r7
 	mov	r1, r9
-	add	r3, sp, #40
-	mov	r0, r6
-	ldr	r7, [r4, #3260]
-	blx	r7
+	add	r3, sp, #44
+	mov	r0, r5
+	ldr	r6, [r4, #3260]
+	blx	r6
 	ldr	r3, [r4, #3268]
 	ldr	r0, [sp, #24]
 	blx	r3
 	ldr	r3, [r4, #3264]
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
-	blx	r3
-	ldr	r3, [r8]
-	ldr	r2, .L2005+12
-	cmp	r3, r2
-	beq	.L1962
-.L1964:
-	ldr	r0, [r4, #3688]
-	mov	r1, fp
-	movs	r6, #0
-.L1963:
-	mov	r8, r1
-	ldr	r2, [r0, r6, lsl #2]
-	ldr	r3, [r8]
-	lsls	r7, r6, #2
+	blx	r3
+	ldr	r3, [r7]
+	ldr	r2, .L2028+16
+	cmp	r3, r2
+	beq	.L1986
+.L1988:
+	ldr	r0, [r4, #3688]
+	mov	r1, r8
+	movs	r5, #0
+	mov	ip, r0
+.L1987:
+	mov	r6, ip
+	mov	r7, r1
+	ldr	r2, [r6]
+	add	ip, ip, #4
+	ldr	r3, [r7]
 	adds	r1, r1, #4
 	cmp	r2, r3
-	beq	.L1966
-	mov	r1, #512
-	bl	__memzero
-	ldr	r2, [r4, #3688]
-	mov	r1, r5
-	str	r6, [sp]
-	ldr	r0, .L2005+16
-	ldr	r3, [r8]
-	ldr	r2, [r2, r7]
+	beq	.L1990
+	mov	r2, #512
+	movs	r1, #0
+	bl	memset
+	str	r5, [sp]
+	ldr	r3, [r7]
+	ldr	r2, [r6]
+	ldr	r1, [sp, #12]
+	ldr	r0, .L2028+20
 	bl	sftl_printk
 	ldrh	r1, [r4, #10]
 	movs	r0, #0
+	ldr	r2, [sp, #12]
 	ldr	r3, [r4, #3252]
-	muls	r1, r5, r1
+	muls	r2, r1, r2
+	mov	r1, r2
 	blx	r3
-.L1967:
-	ldr	r3, [sp, #16]
-	add	r5, r5, r3
-	cmp	r5, #7
-	bls	.L1969
-	ldr	r3, [sp, #20]
-	cbnz	r3, .L1970
-.L1943:
-	mov	r3, #-1
+.L1991:
+	ldr	r3, [sp, #28]
 	str	r3, [sp, #12]
-.L1970:
-	ldr	r5, .L2005
-	movs	r3, #0
-	ldr	r4, [sp, #12]
-	ldr	r0, [r5, #3684]
-	str	r3, [r5, #3680]
-	bl	kfree
-	ldr	r0, [r5, #3688]
-	bl	kfree
-.L1938:
-	mov	r0, r4
-	add	sp, sp, #108
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1977:
+	b	.L1971
+.L2002:
 	mov	r9, #6
-	b	.L1948
-.L1979:
-	movs	r7, #0
-	b	.L1950
-.L1954:
+	b	.L1972
+.L2004:
+	movs	r5, #0
+	b	.L1974
+.L1978:
 	ldr	r1, [sp, #24]
-	add	r3, sp, #40
+	add	r3, sp, #44
+	ldr	r7, [r4, #3256]
 	mov	r2, r10
 	movs	r0, #0
-	ldr	r6, [r4, #3256]
-	add	r1, r1, r8
-	blx	r6
+	add	r1, r1, r6
+	blx	r7
 	adds	r0, r0, #1
-	beq	.L1958
+	beq	.L1982
 	add	r10, r10, #2048
-.L1955:
-	add	r8, r8, #1
-	b	.L1951
-.L1956:
+.L1979:
+	adds	r6, r6, #1
+	b	.L1975
+.L1980:
 	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	ite	eq
 	moveq	r10, #6
 	movne	r10, #9
-	b	.L1957
-.L1961:
-	add	r3, sp, #40
-	mov	r2, r8
-	add	r1, r9, r6
+	b	.L1981
+.L1985:
+	add	r3, sp, #44
+	mov	r2, r7
+	add	r1, r9, r5
 	movs	r0, #0
-	ldr	r7, [r4, #3260]
-	blx	r7
+	ldr	r6, [r4, #3260]
+	blx	r6
 	adds	r0, r0, #1
-	beq	.L1964
-	ldr	r2, [sp, #44]
+	beq	.L1988
+	ldr	r2, [sp, #48]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1964
-	add	r8, r8, #2048
-.L1962:
-	adds	r6, r6, #1
-	b	.L1960
-.L1966:
-	ldr	r3, [sp, #28]
-	adds	r6, r6, #1
-	cmp	r6, r3
-	bne	.L1963
+	bne	.L1988
+	add	r7, r7, #2048
+.L1986:
+	adds	r5, r5, #1
+	b	.L1984
+.L1990:
+	ldr	r3, [sp, #32]
+	adds	r5, r5, #1
+	cmp	r5, r3
+	bne	.L1987
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #20]
-	bls	.L1967
-	b	.L1970
-.L2006:
+	bls	.L1991
+	b	.L1994
+.L2029:
 	.align	2
-.L2005:
+.L2028:
+	.word	__stack_chk_guard
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	.LC130
 	.word	1179535694
 	.word	.LC131
-.L1940:
+.L1963:
 	cmp	r0, #64
-	bne	.L1971
+	bne	.L1995
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r5, #3684]
@@ -13552,21 +13816,22 @@ FtlWriteToIDB:
 	bl	ftl_malloc
 	ldr	r3, [r5, #3684]
 	str	r0, [r5, #3688]
-	cbz	r3, .L1972
-	cbz	r0, .L1972
+	cbz	r3, .L1996
+	cbz	r0, .L1996
 	movs	r2, #1
-	mov	r1, #262144
-	mov	r0, r3
+	movs	r1, #0
 	str	r2, [r5, #3680]
-	bl	__memzero
-.L1971:
+	mov	r0, r3
+	mov	r2, #262144
+	bl	ftl_memset
+.L1995:
 	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	beq	.L2004
+	beq	.L2027
 	cmp	r4, #63
 	ldr	r0, [r5, #3684]
 	iteet	hi
-	ldrhi	r3, .L2007
+	ldrhi	r3, .L2030
 	rsbls	r1, r4, #64
 	subls	r6, r6, r1
 	movhi	r1, r7
@@ -13576,19 +13841,23 @@ FtlWriteToIDB:
 	addhi	r0, r0, r3, lsl #9
 	cmp	r9, #576
 	itt	cs
-	subcs	r6, r6, r8
-	subcs	r6, r6, #446
+	rsbcs	r8, r8, #576
+	addcs	r6, r6, r8
 	lsls	r2, r6, #9
 	bl	ftl_memcpy
-	b	.L2004
-.L1972:
-	ldr	r1, .L2007+4
-	ldr	r0, .L2007+8
+	b	.L2027
+.L1996:
+	ldr	r1, .L2030+4
+	ldr	r0, .L2030+8
 	bl	sftl_printk
-	b	.L1971
-.L2008:
+	b	.L1995
+.L2001:
+	add	sp, sp, #116
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2031:
 	.align	2
-.L2007:
+.L2030:
 	.word	8388544
 	.word	.LANCHOR1+633
 	.word	.LC132
@@ -13631,19 +13900,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L2013
+	ldr	r2, .L2036
 	ldr	r3, [r2, #3692]
-	cbnz	r3, .L2012
+	cbnz	r3, .L2035
 	str	r0, [r2, #3692]
 	mov	r0, r3
 	str	r1, [r2, #3696]
 	bx	lr
-.L2012:
+.L2035:
 	mov	r0, #-1
 	bx	lr
-.L2014:
+.L2037:
 	.align	2
-.L2013:
+.L2036:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -13658,79 +13927,80 @@ rk_sftl_vendor_storage_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r0, #65536
-	ldr	r4, .L2023
+	ldr	r5, .L2046
 	bl	ftl_malloc
-	str	r0, [r4, #3700]
+	str	r0, [r5, #3700]
 	cmp	r0, #0
-	beq	.L2021
-	ldr	r8, .L2023+4
+	beq	.L2044
+	ldr	r10, .L2046+4
 	mov	r9, #0
 	mov	r7, r9
-	mov	r6, r9
-.L2019:
-	ldr	r3, [r4, #3692]
+	mov	r8, r9
+.L2042:
+	ldr	r3, [r5, #3692]
 	movs	r1, #128
-	ldr	r2, [r4, #3700]
-	lsls	r0, r6, #7
+	ldr	r2, [r5, #3700]
+	lsl	r0, r8, #7
 	blx	r3
-	mov	r5, r0
-	cbnz	r0, .L2017
-	ldr	r2, [r4, #3700]
-	ldr	r3, [r2]
-	cmp	r3, r8
-	bne	.L2018
+	mov	r6, r0
+	cbnz	r0, .L2040
+	ldr	r4, [r5, #3700]
+	ldr	r3, [r4]
+	cmp	r3, r10
+	bne	.L2041
 	movw	r3, #65532
-	ldr	r1, [r2, r3]
-	ldr	r3, [r2, #4]
-	cmp	r1, r3
-	bne	.L2018
-	cmp	r1, r7
+	ldr	r2, [r4, #4]
+	ldr	r3, [r4, r3]
+	cmp	r3, r2
+	bne	.L2041
+	cmp	r3, r7
 	itt	hi
-	movhi	r9, r6
-	movhi	r7, r1
-.L2018:
-	adds	r6, r6, #1
-	cmp	r6, #2
-	bne	.L2019
-	cbz	r7, .L2020
-	ldr	r3, [r4, #3692]
+	movhi	r9, r8
+	movhi	r7, r3
+.L2041:
+	add	r8, r8, #1
+	cmp	r8, #2
+	bne	.L2042
+	cbz	r7, .L2043
+	ldr	r3, [r5, #3692]
+	mov	r2, r4
 	movs	r1, #128
 	lsl	r0, r9, #7
 	blx	r3
-	mov	r5, r0
-	cbz	r0, .L2015
-.L2017:
-	ldr	r0, [r4, #3700]
-	mov	r5, #-1
+	mov	r6, r0
+	cbz	r0, .L2038
+.L2040:
+	ldr	r0, [r5, #3700]
+	mov	r6, #-1
 	bl	kfree
 	movs	r3, #0
-	str	r3, [r4, #3700]
-	b	.L2015
-.L2020:
-	mov	r1, #65536
-	mov	r0, r2
-	bl	__memzero
-	ldr	r3, [r4, #3700]
-	movs	r2, #1
-	movw	r1, #65532
-	str	r2, [r3, #4]
-	str	r8, [r3]
-	str	r2, [r3, r1]
-	movw	r2, #64504
-	strh	r7, [r3, #12]	@ movhi
-	strh	r2, [r3, #14]	@ movhi
-.L2015:
-	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L2021:
-	mvn	r5, #11
-	b	.L2015
-.L2024:
+	str	r3, [r5, #3700]
+	b	.L2038
+.L2043:
+	mov	r2, #65536
+	mov	r1, r7
+	mov	r0, r4
+	bl	memset
+	movs	r3, #1
+	movw	r2, #65532
+	str	r3, [r4, #4]
+	str	r10, [r4]
+	str	r3, [r4, r2]
+	movw	r3, #64504
+	strh	r7, [r4, #12]	@ movhi
+	strh	r3, [r4, #14]	@ movhi
+.L2038:
+	mov	r0, r6
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L2044:
+	mvn	r6, #11
+	b	.L2038
+.L2047:
 	.align	2
-.L2023:
+.L2046:
 	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
@@ -13749,23 +14019,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L2031
+	ldr	r3, .L2054
 	mov	r0, r1
 	ldr	r5, [r3, #3700]
-	cbz	r5, .L2030
+	cbz	r5, .L2053
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L2027:
+.L2050:
 	cmp	r3, r6
-	bcc	.L2029
-.L2030:
+	bcc	.L2052
+.L2053:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2029:
+.L2052:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L2028
+	bne	.L2051
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13777,12 +14047,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2028:
+.L2051:
 	adds	r3, r3, #1
-	b	.L2027
-.L2032:
+	b	.L2050
+.L2055:
 	.align	2
-.L2031:
+.L2054:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -13800,26 +14070,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L2052
+	ldr	r2, .L2075
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
 	ldr	r4, [r2, #3700]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L2048
+	beq	.L2071
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L2035:
+.L2058:
 	cmp	r7, r2
-	bcc	.L2043
+	bcc	.L2066
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2048
+	bhi	.L2071
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -13852,31 +14122,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #3696]
-	b	.L2051
-.L2043:
+	b	.L2074
+.L2066:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L2036
+	bne	.L2059
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L2037
+	bls	.L2060
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2048
+	bhi	.L2071
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L2038:
+.L2061:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L2039
+	bcc	.L2062
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -13895,7 +14165,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L2040:
+.L2063:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -13908,20 +14178,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L2052
+	ldr	r3, .L2075
 	ldr	r3, [r3, #3696]
-.L2051:
+.L2074:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L2033:
+.L2056:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2039:
+.L2062:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -13938,24 +14208,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L2038
-.L2037:
+	b	.L2061
+.L2060:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L2040
-.L2036:
+	b	.L2063
+.L2059:
 	adds	r7, r7, #1
-	b	.L2035
-.L2048:
+	b	.L2058
+.L2071:
 	mov	r0, #-1
-	b	.L2033
-.L2053:
+	b	.L2056
+.L2076:
 	.align	2
-.L2052:
+.L2075:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -13970,162 +14240,166 @@ rk_sftl_vendor_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
 	mov	r0, #4096
 	mov	r6, r1
-	mov	r4, r2
+	mov	r5, r2
 	bl	ftl_malloc
-	mov	r5, r0
+	mov	r4, r0
 	cmp	r0, #0
-	beq	.L2071
-	ldr	r3, .L2082
+	beq	.L2093
+	ldr	r3, .L2101
 	cmp	r6, r3
-	beq	.L2057
+	beq	.L2080
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L2058
-.L2077:
-	mvn	r4, #13
-	b	.L2056
-.L2057:
-	ldr	r6, .L2082+4
+	beq	.L2081
+.L2099:
+	mvn	r5, #13
+	b	.L2079
+.L2080:
+	ldr	r6, .L2101+4
 	mov	r3, sp
 	ands	r3, r3, r6
-	ldr	r3, [r3, #72]
+	ldr	r3, [r3, #8]
 	.syntax unified
-@ 564 "./arch/arm/include/asm/uaccess.h" 1
-	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
+@ 114 "./include/linux/uaccess.h" 1
+	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L2059
 	movs	r2, #8
-	mov	r1, r4
+	cbnz	r3, .L2082
+	mov	r1, r5
 	bl	arm_copy_from_user
-	cbz	r0, .L2078
-.L2060:
-	mov	r2, r4
+	mov	r2, r0
+	cmp	r0, #0
+	beq	.L2083
+.L2082:
+	rsb	r0, r2, #8
+	movs	r1, #0
+	add	r0, r0, r4
+	bl	memset
+	mov	r2, r5
 	mov	r1, #256
-.L2081:
-	ldr	r0, .L2082+8
+.L2100:
+	ldr	r0, .L2101+8
 	bl	sftl_printk
-	b	.L2077
-.L2059:
-	movs	r1, #8
-	bl	__memzero
-	b	.L2060
-.L2078:
-	ldr	r2, [r5]
-	ldr	r3, .L2082+12
-	cmp	r2, r3
-	beq	.L2062
-.L2063:
-	mov	r4, #-1
-.L2056:
-	mov	r0, r5
-	bl	kfree
-.L2054:
-	mov	r0, r4
-	pop	{r4, r5, r6, pc}
-.L2062:
-	ldrh	r2, [r5, #6]
-	add	r1, r5, #8
-	ldrh	r0, [r5, #4]
-	bl	rk_sftl_vendor_read
-	adds	r3, r0, #1
-	beq	.L2063
+	b	.L2099
+.L2084:
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
-	strh	r0, [r5, #6]	@ movhi
+	strh	r0, [r4, #6]	@ movhi
 	adds	r2, r2, #8
-	ldr	r3, [r6, #72]
+	ldr	r3, [r6, #8]
 	.syntax unified
-@ 573 "./arch/arm/include/asm/uaccess.h" 1
-	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
+@ 132 "./include/linux/uaccess.h" 1
+	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2077
-	mov	r1, r5
-	mov	r0, r4
+	bne	.L2099
+	mov	r1, r4
+	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L2077
-.L2073:
-	mov	r4, r0
-	b	.L2056
-.L2058:
-	ldr	r6, .L2082+4
+	bne	.L2099
+.L2096:
+	mov	r5, r0
+	b	.L2079
+.L2081:
+	ldr	r7, .L2101+4
 	mov	r3, sp
-	ands	r3, r3, r6
-	ldr	r3, [r3, #72]
+	ands	r3, r3, r7
+	ldr	r3, [r3, #8]
 	.syntax unified
-@ 564 "./arch/arm/include/asm/uaccess.h" 1
-	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
+@ 114 "./include/linux/uaccess.h" 1
+	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L2065
 	movs	r2, #8
-	mov	r1, r4
+	cbnz	r3, .L2086
+	mov	r1, r5
 	bl	arm_copy_from_user
-	cbz	r0, .L2079
-.L2066:
-	mov	r2, r4
+	mov	r2, r0
+	cbz	r0, .L2087
+.L2086:
+	rsb	r0, r2, #8
+	movs	r1, #0
+	add	r0, r0, r4
+	bl	memset
+	mov	r2, r5
 	mov	r1, #276
-	b	.L2081
-.L2065:
-	movs	r1, #8
-	bl	__memzero
-	b	.L2066
+	b	.L2100
+.L2093:
+	mov	r5, #-1
+	b	.L2077
+.L2083:
+	ldr	r2, [r4]
+	ldr	r3, .L2101+12
+	cmp	r2, r3
+	bne	.L2088
+	ldrh	r2, [r4, #6]
+	add	r1, r4, #8
+	ldrh	r0, [r4, #4]
+	bl	rk_sftl_vendor_read
+	adds	r3, r0, #1
+	bne	.L2084
+.L2088:
+	mov	r5, #-1
 .L2079:
-	ldr	r2, [r5]
-	ldr	r3, .L2082+12
+	mov	r0, r4
+	bl	kfree
+.L2077:
+	mov	r0, r5
+	pop	{r3, r4, r5, r6, r7, pc}
+.L2087:
+	ldr	r2, [r4]
+	ldr	r3, .L2101+12
 	cmp	r2, r3
-	bne	.L2063
-	ldrh	r2, [r5, #6]
+	bne	.L2088
+	ldrh	r6, [r4, #6]
 	movw	r3, #4087
-	cmp	r2, r3
-	bhi	.L2063
+	cmp	r6, r3
+	bhi	.L2088
 	mov	r3, sp
-	adds	r2, r2, #8
-	ands	r6, r6, r3
-	ldr	r3, [r6, #72]
+	adds	r6, r6, #8
+	ands	r7, r7, r3
+	ldr	r3, [r7, #8]
 	.syntax unified
-@ 564 "./arch/arm/include/asm/uaccess.h" 1
-	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
+@ 114 "./include/linux/uaccess.h" 1
+	adds r2, r5, r6; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L2068
-	mov	r1, r4
-	mov	r0, r5
+	mov	r2, r6
+	cbnz	r3, .L2089
+	mov	r1, r5
+	mov	r0, r4
 	bl	arm_copy_from_user
-	cbz	r0, .L2080
-.L2069:
-	mov	r2, r4
+	mov	r2, r0
+	cbz	r0, .L2090
+.L2089:
+	subs	r6, r6, r2
+	movs	r1, #0
+	adds	r0, r4, r6
+	bl	memset
+	mov	r2, r5
 	movw	r1, #283
-	b	.L2081
-.L2068:
-	mov	r1, r2
-	mov	r0, r5
-	bl	__memzero
-	b	.L2069
-.L2080:
-	ldrh	r2, [r5, #6]
-	add	r1, r5, #8
-	ldrh	r0, [r5, #4]
+	b	.L2100
+.L2090:
+	ldrh	r2, [r4, #6]
+	add	r1, r4, #8
+	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L2073
-.L2071:
-	mov	r4, #-1
-	b	.L2054
-.L2083:
+	b	.L2096
+.L2102:
 	.align	2
-.L2082:
+.L2101:
 	.word	1074034177
 	.word	-8192
 	.word	.LC133
@@ -14144,11 +14418,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2085
+	ldr	r0, .L2104
 	b	misc_register
-.L2086:
+.L2105:
 	.align	2
-.L2085:
+.L2104:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14304,162 +14578,162 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.6711, %object
-	.size	__func__.6711, 17
-__func__.6711:
+	.type	__func__.7560, %object
+	.size	__func__.7560, 17
+__func__.7560:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.6706, %object
-	.size	__func__.6706, 17
-__func__.6706:
+	.type	__func__.7555, %object
+	.size	__func__.7555, 17
+__func__.7555:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.6742, %object
-	.size	__func__.6742, 17
-__func__.6742:
+	.type	__func__.7591, %object
+	.size	__func__.7591, 17
+__func__.7591:
 	.ascii	"List_remove_node\000"
-	.type	__func__.6774, %object
-	.size	__func__.6774, 22
-__func__.6774:
+	.type	__func__.7623, %object
+	.size	__func__.7623, 22
+__func__.7623:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.6881, %object
-	.size	__func__.6881, 22
-__func__.6881:
+	.type	__func__.7730, %object
+	.size	__func__.7730, 22
+__func__.7730:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.7208, %object
-	.size	__func__.7208, 16
-__func__.7208:
+	.type	__func__.8057, %object
+	.size	__func__.8057, 16
+__func__.8057:
 	.ascii	"make_superblock\000"
-	.type	__func__.7383, %object
-	.size	__func__.7383, 19
-__func__.7383:
+	.type	__func__.8232, %object
+	.size	__func__.8232, 19
+__func__.8232:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.17845, %object
-	.size	__func__.17845, 17
-__func__.17845:
+	.type	__func__.13881, %object
+	.size	__func__.13881, 17
+__func__.13881:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.6816, %object
-	.size	__func__.6816, 26
-__func__.6816:
+	.type	__func__.7665, %object
+	.size	__func__.7665, 26
+__func__.7665:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.6321, %object
-	.size	__func__.6321, 11
-__func__.6321:
+	.type	__func__.7170, %object
+	.size	__func__.7170, 11
+__func__.7170:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.6548, %object
-	.size	__func__.6548, 14
-__func__.6548:
+	.type	__func__.7397, %object
+	.size	__func__.7397, 14
+__func__.7397:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.7229, %object
-	.size	__func__.7229, 18
-__func__.7229:
+	.type	__func__.8078, %object
+	.size	__func__.8078, 18
+__func__.8078:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.17802, %object
-	.size	__func__.17802, 15
-__func__.17802:
+	.type	__func__.13838, %object
+	.size	__func__.13838, 15
+__func__.13838:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.6993, %object
-	.size	__func__.6993, 14
-__func__.6993:
+	.type	__func__.7842, %object
+	.size	__func__.7842, 14
+__func__.7842:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.6591, %object
-	.size	__func__.6591, 11
-__func__.6591:
+	.type	__func__.7440, %object
+	.size	__func__.7440, 11
+__func__.7440:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.17821, %object
-	.size	__func__.17821, 15
-__func__.17821:
+	.type	__func__.13857, %object
+	.size	__func__.13857, 15
+__func__.13857:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.7355, %object
-	.size	__func__.7355, 25
-__func__.7355:
+	.type	__func__.8204, %object
+	.size	__func__.8204, 25
+__func__.8204:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.7396, %object
-	.size	__func__.7396, 16
-__func__.7396:
+	.type	__func__.8245, %object
+	.size	__func__.8245, 16
+__func__.8245:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.7403, %object
-	.size	__func__.7403, 20
-__func__.7403:
+	.type	__func__.8252, %object
+	.size	__func__.8252, 20
+__func__.8252:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.6842, %object
-	.size	__func__.6842, 31
-__func__.6842:
+	.type	__func__.7691, %object
+	.size	__func__.7691, 31
+__func__.7691:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.6856, %object
-	.size	__func__.6856, 16
-__func__.6856:
+	.type	__func__.7705, %object
+	.size	__func__.7705, 16
+__func__.7705:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.6783, %object
-	.size	__func__.6783, 16
-__func__.6783:
+	.type	__func__.7632, %object
+	.size	__func__.7632, 16
+__func__.7632:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.6827, %object
-	.size	__func__.6827, 15
-__func__.6827:
+	.type	__func__.7676, %object
+	.size	__func__.7676, 15
+__func__.7676:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.6898, %object
-	.size	__func__.6898, 9
-__func__.6898:
+	.type	__func__.7747, %object
+	.size	__func__.7747, 9
+__func__.7747:
 	.ascii	"log2phys\000"
-	.type	__func__.7117, %object
-	.size	__func__.7117, 16
-__func__.7117:
+	.type	__func__.7966, %object
+	.size	__func__.7966, 16
+__func__.7966:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.7151, %object
-	.size	__func__.7151, 22
-__func__.7151:
+	.type	__func__.8000, %object
+	.size	__func__.8000, 22
+__func__.8000:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.7270, %object
-	.size	__func__.7270, 14
-__func__.7270:
+	.type	__func__.8119, %object
+	.size	__func__.8119, 14
+__func__.8119:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.6971, %object
-	.size	__func__.6971, 15
-__func__.6971:
+	.type	__func__.7820, %object
+	.size	__func__.7820, 15
+__func__.7820:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.7254, %object
-	.size	__func__.7254, 21
-__func__.7254:
+	.type	__func__.8103, %object
+	.size	__func__.8103, 21
+__func__.8103:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.7376, %object
-	.size	__func__.7376, 29
-__func__.7376:
+	.type	__func__.8225, %object
+	.size	__func__.8225, 29
+__func__.8225:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.6445, %object
-	.size	__func__.6445, 13
-__func__.6445:
+	.type	__func__.7294, %object
+	.size	__func__.7294, 13
+__func__.7294:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.7473, %object
-	.size	__func__.7473, 19
-__func__.7473:
+	.type	__func__.8322, %object
+	.size	__func__.8322, 19
+__func__.8322:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.7586, %object
-	.size	__func__.7586, 23
-__func__.7586:
+	.type	__func__.8435, %object
+	.size	__func__.8435, 23
+__func__.8435:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.6473, %object
-	.size	__func__.6473, 9
-__func__.6473:
+	.type	__func__.7322, %object
+	.size	__func__.7322, 9
+__func__.7322:
 	.ascii	"FtlWrite\000"
-	.type	__func__.7049, %object
-	.size	__func__.7049, 15
-__func__.7049:
+	.type	__func__.7898, %object
+	.size	__func__.7898, 15
+__func__.7898:
 	.ascii	"FtlLoadSysInfo\000"
-	.type	__func__.7071, %object
-	.size	__func__.7071, 18
-__func__.7071:
+	.type	__func__.7920, %object
+	.size	__func__.7920, 18
+__func__.7920:
 	.ascii	"FtlMapTblRecovery\000"
-	.type	__func__.17973, %object
-	.size	__func__.17973, 14
-__func__.17973:
+	.type	__func__.14000, %object
+	.size	__func__.14000, 14
+__func__.14000:
 	.ascii	"FtlWriteToIDB\000"
 	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 108
+	.size	rk_sftl_vendor_storage_fops, 128
 rk_sftl_vendor_storage_fops:
-	.space	32
+	.space	36
 	.word	rk_sftl_vendor_storage_ioctl
 	.word	rk_sftl_vendor_storage_ioctl
-	.space	68
+	.space	84
 	.data
 	.align	2
 	.set	.LANCHOR2,. + 0
@@ -15117,7 +15391,7 @@ gp_last_act_superblock:
 	.space	4
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
-	.ascii	"SFTL version: 5.0.52 20191125\000"
+	.ascii	"SFTL version: 5.0.53 20200303\000"
 .LC1:
 	.ascii	"\012%s\012\000"
 .LC2:
@@ -15352,7 +15626,7 @@ gp_last_act_superblock:
 .LC115:
 	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC116:
-	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"lpa = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
 .LC117:
 	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index 42f428ebcf57..fbcc8de01a99 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -1,24 +1,12 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2019-11-25
+ * date: 2020-04-10
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
 #APP
-	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
-	.equ	.L__reg_num_x\num, \num
-	.endr
-	.equ	.L__reg_num_xzr, 31
-
-	.macro	mrs_s, rt, sreg
-	.inst	0xd5200000|(\sreg)|(.L__reg_num_\rt)
-	.endm
-
-	.macro	msr_s, sreg, rt
-	.inst	0xd5000000|(\sreg)|(.L__reg_num_\rt)
-	.endm
-
+	.arch_extension	lse
 #NO_APP
 	.text
 	.align	2
@@ -2792,7 +2780,7 @@ FtlGcReFreshBadBlk:
 ftl_malloc:
 	stp	x29, x30, [sp, -16]!
 	mov	w1, 193
-	movk	w1, 0x240, lsl 16
+	movk	w1, 0x60, lsl 16
 	sxtw	x0, w0
 	add	x29, sp, 0
 	bl	__kmalloc
@@ -2886,59 +2874,65 @@ rknand_print_hex:
 	.global	FlashEraseBlocks
 	.type	FlashEraseBlocks, %function
 FlashEraseBlocks:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	stp	x25, x26, [sp, 64]
-	ubfiz	x22, x2, 5, 32
 	stp	x23, x24, [sp, 48]
-	add	x23, x22, 4
+	ubfiz	x23, x2, 5, 32
+	stp	x25, x26, [sp, 64]
 	mov	x20, x0
-	add	x21, x0, 4
-	ldrh	w24, [x19, 12]
-	add	x23, x0, x23
-	mov	w25, -1
-	lsl	w26, w24, 3
+	str	x27, [sp, 80]
+	adrp	x21, __stack_chk_guard
+	add	x24, x23, 4
+	add	x0, x21, :lo12:__stack_chk_guard
+	ldrh	w25, [x19, 12]
+	add	x22, x20, 4
+	add	x24, x20, x24
+	ldr	x1, [x0]
+	str	x1, [x29, 104]
+	mov	x1,0
+	mov	w26, -1
+	lsl	w27, w25, 3
 .L331:
-	cmp	x21, x23
+	cmp	x22, x24
 	beq	.L335
-	ldr	w0, [x21]
-	add	x2, x29, 88
-	add	x1, x29, 92
+	ldr	w0, [x22]
+	add	x2, x29, 96
+	add	x1, x29, 100
 	bl	l2p_addr_tran.isra.0
-	ldr	w0, [x29, 88]
+	ldr	w0, [x29, 96]
 	cbnz	w0, .L332
-	ldr	w1, [x29, 92]
-	cmp	w26, w1
+	ldr	w1, [x29, 100]
+	cmp	w27, w1
 	bls	.L332
 	mov	x19, x20
-	add	x22, x20, x22
+	add	x23, x20, x23
 	adrp	x20, .LANCHOR1
 	add	x20, x20, :lo12:.LANCHOR1
-	adrp	x21, .LC86
+	adrp	x22, .LC86
 	add	x20, x20, 160
-	add	x21, x21, :lo12:.LC86
+	add	x22, x22, :lo12:.LC86
 .L333:
-	cmp	x19, x22
+	cmp	x19, x23
 	bne	.L334
 	bl	dump_stack
 .L335:
-	ldp	x19, x20, [sp, 16]
+	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 96
-	ret
+	ldr	x2, [x29, 104]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L342
+	bl	__stack_chk_fail
 .L334:
-	ldr	w2, [x29, 92]
+	ldr	w2, [x29, 100]
 	mov	w0, -1
 	str	w0, [x19]
 	mov	x1, x20
-	mov	x0, x21
+	mov	x0, x22
 	add	x19, x19, 32
 	bl	sftl_printk
 	ldr	x1, [x19, -24]
@@ -2955,25 +2949,33 @@ FlashEraseBlocks:
 	bl	rknand_print_hex
 	b	.L333
 .L332:
-	ldr	w1, [x29, 92]
+	ldr	w1, [x29, 100]
 	ldr	x2, [x19, 3376]
 	blr	x2
 	cmp	w0, 0
-	csel	w0, w25, wzr, ne
-	str	w0, [x21, -4]
+	csel	w0, w26, wzr, ne
+	str	w0, [x22, -4]
 	ldrh	w0, [x19, 14]
 	cmp	w0, 4
 	bne	.L339
-	ldrb	w0, [x29, 88]
+	ldrb	w0, [x29, 96]
 	ldr	x2, [x19, 3376]
-	ldr	w1, [x29, 92]
-	add	w1, w24, w1
+	ldr	w1, [x29, 100]
+	add	w1, w25, w1
 	blr	x2
 	cbz	w0, .L339
-	str	w25, [x21, -4]
+	str	w26, [x22, -4]
 .L339:
-	add	x21, x21, 32
+	add	x22, x22, 32
 	b	.L331
+.L342:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldr	x27, [sp, 80]
+	ldp	x29, x30, [sp], 112
+	ret
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
 	.global	FtlFreeSysBlkQueueIn
@@ -2987,15 +2989,15 @@ FtlFreeSysBlkQueueIn:
 	sub	w2, w21, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcc	.L346
+	bcc	.L347
 	adrp	x0, .LANCHOR0
 	add	x20, x0, :lo12:.LANCHOR0
 	mov	x19, x0
 	ldrh	w2, [x20, 470]
 	cmp	w2, 1024
-	beq	.L346
+	beq	.L347
 	and	w1, w1, 65535
-	cbz	w1, .L348
+	cbz	w1, .L349
 	mov	w0, w21
 	bl	P2V_block_in_plane
 	and	w22, w0, 65535
@@ -3014,7 +3016,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	w0, [x20, 2688]
 	add	w0, w0, 1
 	str	w0, [x20, 2688]
-.L348:
+.L349:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 464
 	ldrh	w1, [x0, 6]
@@ -3026,7 +3028,7 @@ FtlFreeSysBlkQueueIn:
 	and	w1, w1, 1023
 	strh	w1, [x0, 4]
 	strh	w21, [x2, 8]
-.L346:
+.L347:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
@@ -3044,7 +3046,7 @@ FtlFreeSysBlkQueueOut:
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
 	ldrh	w2, [x21, 470]
-	cbz	w2, .L360
+	cbz	w2, .L361
 	ldrh	w0, [x21, 466]
 	add	x1, x21, 464
 	sub	w2, w2, #1
@@ -3064,23 +3066,23 @@ FtlFreeSysBlkQueueOut:
 	ldr	w0, [x21, 2688]
 	add	w0, w0, 1
 	str	w0, [x21, 2688]
-.L357:
+.L358:
 	sub	w0, w20, #1
 	mov	w1, 65533
 	cmp	w1, w0, uxth
-	bcs	.L358
+	bcs	.L359
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w20
 	ldrh	w2, [x0, 470]
 	adrp	x0, .LC89
 	add	x0, x0, :lo12:.LC89
 	bl	sftl_printk
-.L359:
-	b	.L359
 .L360:
+	b	.L360
+.L361:
 	mov	w20, 65535
-	b	.L357
-.L358:
+	b	.L358
+.L359:
 	mov	w0, w20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
@@ -3099,27 +3101,27 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w1, [x0, 10]
 	ldr	x0, [x0, 16]
-.L363:
+.L364:
 	cmp	w20, w1
-	beq	.L367
+	beq	.L368
 	mov	x21, x0
 	ldrh	w2, [x0], 2
-	cbnz	w2, .L364
+	cbnz	w2, .L365
 	bl	FtlFreeSysBlkQueueOut
 	and	w1, w0, 65535
 	strh	w0, [x21]
 	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcs	.L365
+	bcs	.L366
 	adrp	x0, .LANCHOR0+470
 	ldrh	w2, [x0, #:lo12:.LANCHOR0+470]
 	adrp	x0, .LC90
 	add	x0, x0, :lo12:.LC90
 	bl	sftl_printk
+.L367:
+	b	.L367
 .L366:
-	b	.L366
-.L365:
 	ldr	w0, [x19, 48]
 	strh	wzr, [x19, 2]
 	add	w0, w0, 1
@@ -3128,10 +3130,10 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
-.L367:
+.L368:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L369
+	bhi	.L370
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -3139,16 +3141,16 @@ ftl_map_blk_alloc_new_blk:
 	add	x1, x1, 184
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L369:
+.L370:
 	mov	w0, 0
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L364:
+.L365:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L363
+	b	.L364
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
 	.global	ftl_memset
@@ -3371,23 +3373,23 @@ FtlMemInit:
 	str	x0, [x19, 400]
 	mov	w2, w4
 	mov	x0, x20
-.L374:
+.L375:
 	cmp	w1, w6
-	bcc	.L375
+	bcc	.L376
 	mov	w2, 8
 	add	x4, x0, :lo12:.LANCHOR0
 	sub	w2, w2, w1
 	add	x4, x4, 368
 	add	x2, x2, 1
 	mov	x3, 0
-.L376:
+.L377:
 	add	x3, x3, 1
 	cmp	x3, x2
-	bne	.L377
+	bne	.L378
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3576]
-	cbnz	x2, .L378
-.L380:
+	cbnz	x2, .L379
+.L381:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 216
@@ -3395,92 +3397,92 @@ FtlMemInit:
 	add	x0, x0, :lo12:.LC91
 	bl	sftl_printk
 	mov	w0, -1
-.L373:
+.L374:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L375:
+.L376:
 	ldr	x3, [x19, 400]
 	add	w1, w1, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x5], 8
-	b	.L374
-.L377:
+	b	.L375
+.L378:
 	add	x5, x1, x3
 	add	x5, x4, x5, lsl 3
 	str	xzr, [x5, 24]
-	b	.L376
-.L378:
+	b	.L377
+.L379:
 	ldr	x2, [x1, 3584]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3616]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3624]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 2616]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3632]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 2568]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 400]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x1, [x1, 80]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3296]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3312]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3440]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3456]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3416]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3280]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3448]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3464]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x2, [x1, 3472]
-	cbz	x2, .L380
+	cbz	x2, .L381
 	ldr	x1, [x1, 3480]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3264]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3488]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3496]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3256]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3528]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3536]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3272]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 2608]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3552]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x0, [x0, 360]
-	cbz	x0, .L380
+	cbz	x0, .L381
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3592]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x1, [x0, 3600]
-	cbz	x1, .L380
+	cbz	x1, .L381
 	ldr	x0, [x0, 3608]
-	cbz	x0, .L380
+	cbz	x0, .L381
 	mov	w0, 0
-	b	.L373
+	b	.L374
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -3506,20 +3508,20 @@ FtlBbt2Bitmap:
 	mov	w1, 0
 	lsl	w2, w2, 2
 	bl	ftl_memset
-.L478:
+.L479:
 	ldrh	w0, [x23, x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L475
+	beq	.L476
 	add	x1, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x1, 310]
 	cmp	w1, w0
-	bhi	.L477
+	bhi	.L478
 	mov	w2, 74
 	mov	x1, x20
 	mov	x0, x24
 	bl	sftl_printk
-.L477:
+.L478:
 	ldrh	w2, [x23, x19]
 	mov	w1, 1
 	add	x19, x19, 2
@@ -3530,8 +3532,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x22, x0]
 	orr	w1, w1, w2
 	str	w1, [x22, x0]
-	bne	.L478
-.L475:
+	bne	.L479
+.L476:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -3595,10 +3597,10 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L487:
+.L488:
 	ldrh	w1, [x19, 6]
 	cmp	w1, w0
-	bhi	.L491
+	bhi	.L492
 	adrp	x0, .LANCHOR0+316
 	mov	w23, 0
 	mov	w20, 0
@@ -3606,10 +3608,10 @@ ftl_free_no_use_map_blk:
 	ldrh	w0, [x19]
 	strh	w1, [x21, x0, lsl 1]
 	ldrh	w24, [x21]
-.L492:
+.L493:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L496
+	bhi	.L497
 	mov	w0, w23
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -3617,64 +3619,64 @@ ftl_free_no_use_map_blk:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L491:
+.L492:
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20, x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L488:
+.L489:
 	ldrh	w3, [x19, 10]
 	cmp	w3, w1
-	bhi	.L490
+	bhi	.L491
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L487
-.L490:
+	b	.L488
+.L491:
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x22, x3]
 	cmp	w4, w2
-	bne	.L489
-	cbz	w2, .L489
+	bne	.L490
+	cbz	w2, .L490
 	ldrh	w4, [x21, x3]
 	add	w4, w4, 1
 	strh	w4, [x21, x3]
-.L489:
+.L490:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L488
-.L496:
+	b	.L489
+.L497:
 	ubfiz	x0, x20, 1, 16
 	ldrh	w1, [x21, x0]
 	cmp	w24, w1
-	bls	.L493
+	bls	.L494
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbnz	w0, .L494
-.L495:
+	cbnz	w0, .L495
+.L496:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L492
-.L493:
-	cbnz	w1, .L495
+	b	.L493
+.L494:
+	cbnz	w1, .L496
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbz	w0, .L495
-.L497:
+	cbz	w0, .L496
+.L498:
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	wzr, [x25]
 	ldrh	w0, [x19, 8]
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
-	b	.L495
-.L498:
+	b	.L496
+.L499:
 	mov	w24, 0
-	b	.L497
-.L494:
+	b	.L498
+.L495:
 	mov	w23, w20
-	cbz	w1, .L498
+	cbz	w1, .L499
 	mov	w24, w1
-	b	.L495
+	b	.L496
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
 	.global	FtlL2PDataInit
@@ -3699,10 +3701,10 @@ FtlL2PDataInit:
 	mov	x0, x19
 	mov	w1, 0
 	mov	w5, -1
-.L508:
+.L509:
 	ldrh	w2, [x0, 350]
 	cmp	w2, w1
-	bhi	.L509
+	bhi	.L510
 	mov	w2, -1
 	strh	w2, [x0, 3650]
 	strh	w2, [x0, 3648]
@@ -3726,7 +3728,7 @@ FtlL2PDataInit:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L509:
+.L510:
 	ldr	x3, [x0, 2616]
 	ubfiz	x2, x1, 4, 16
 	add	x3, x3, x2
@@ -3744,7 +3746,7 @@ FtlL2PDataInit:
 	and	x2, x2, -4
 	add	x2, x4, x2
 	str	x2, [x3, 8]
-	b	.L508
+	b	.L509
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
 	.global	FtlVariablesInit
@@ -3818,75 +3820,75 @@ SupperBlkListInit:
 	str	xzr, [x19, 2576]
 	str	xzr, [x19, 2584]
 	str	xzr, [x19, 2600]
-.L514:
+.L515:
 	ldrh	w0, [x19, 252]
 	cmp	w20, w0
-	bcs	.L521
+	bcs	.L522
 	ldrh	w8, [x19, 244]
 	mov	x6, 0
 	ldrh	w7, [x19, 314]
 	mov	w5, 0
-	b	.L522
-.L516:
+	b	.L523
+.L517:
 	ldrb	w0, [x23, x6]
 	mov	w1, w20
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L515
+	cbnz	w0, .L516
 	add	w5, w5, w7
 	and	w5, w5, 65535
-.L515:
+.L516:
 	add	x6, x6, 1
-.L522:
+.L523:
 	cmp	w8, w6, uxth
-	bhi	.L516
-	cbz	w5, .L517
+	bhi	.L517
+	cbz	w5, .L518
 	mov	w0, 32768
 	sdiv	w5, w0, w5
-.L518:
+.L519:
 	ldr	x1, [x19, 2568]
 	mov	w0, 6
 	umaddl	x0, w20, w0, x1
 	strh	w5, [x0, 4]
 	ldrh	w0, [x19, 32]
 	cmp	w0, w20
-	beq	.L519
+	beq	.L520
 	ldrh	w0, [x19, 88]
 	cmp	w0, w20
-	beq	.L519
+	beq	.L520
 	ldrh	w0, [x19, 136]
 	cmp	w0, w20
-	beq	.L519
+	beq	.L520
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x20, 1, 16
 	ldrh	w0, [x1, x0]
-	cbnz	w0, .L520
+	cbnz	w0, .L521
 	add	w22, w22, 1
 	mov	w0, w20
 	and	w22, w22, 65535
 	bl	INSERT_FREE_LIST
-.L519:
+.L520:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L514
-.L517:
+	b	.L515
+.L518:
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x20, 1, 16
 	mov	w2, -1
 	strh	w2, [x1, x0]
-	b	.L518
-.L520:
+	b	.L519
+.L521:
 	add	w21, w21, 1
 	mov	w0, w20
 	and	w21, w21, 65535
 	bl	INSERT_DATA_LIST
-	b	.L519
-.L521:
+	b	.L520
+.L522:
 	strh	w21, [x19, 2592]
 	add	w21, w21, w22
 	strh	w22, [x19, 236]
 	cmp	w21, w0
-	ble	.L523
+	ble	.L524
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -3894,7 +3896,7 @@ SupperBlkListInit:
 	add	x1, x1, 248
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L523:
+.L524:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
@@ -3950,32 +3952,32 @@ FlashGetBadBlockList:
 	blr	x2
 	and	w0, w0, 65535
 	cmp	w0, 50
-	bls	.L528
+	bls	.L529
 	mov	w2, 256
 	mov	w1, 255
 	mov	x0, x20
 	bl	ftl_memset
 	mov	w0, 0
-.L528:
+.L529:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 14]
 	cmp	w1, 4
-	bne	.L532
+	bne	.L533
 	mov	x1, 0
-.L530:
+.L531:
 	cmp	w0, w1, uxth
-	bhi	.L531
-.L532:
+	bhi	.L532
+.L533:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L531:
+.L532:
 	ldrh	w2, [x20, x1, lsl 1]
 	lsr	w2, w2, 1
 	strh	w2, [x20, x1, lsl 1]
 	add	x1, x1, 1
-	b	.L530
+	b	.L531
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
 	.global	ftl_memcpy
@@ -3996,139 +3998,151 @@ FlashReadPages:
 	ubfiz	x1, x1, 5, 32
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
-	add	x2, x21, :lo12:.LANCHOR0
+	adrp	x21, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
+	add	x2, x21, :lo12:__stack_chk_guard
 	stp	x19, x20, [sp, 16]
-	adrp	x22, .LANCHOR1
+	adrp	x22, .LANCHOR0
 	stp	x25, x26, [sp, 64]
-	add	x22, x22, :lo12:.LANCHOR1
-	str	x27, [sp, 80]
-	adrp	x24, .LC8
+	adrp	x23, .LANCHOR1
+	stp	x27, x28, [sp, 80]
+	add	x23, x23, :lo12:.LANCHOR1
+	adrp	x25, .LC8
 	mov	x19, x0
-	add	x23, x0, x1
-	ldrh	w25, [x2, 12]
-	add	x22, x22, 272
-	add	x24, x24, :lo12:.LC8
-.L537:
-	cmp	x23, x19
-	bne	.L550
-	ldp	x19, x20, [sp, 16]
+	ldr	x3, [x2]
+	str	x3, [x29, 104]
+	mov	x3,0
+	add	x2, x22, :lo12:.LANCHOR0
+	add	x24, x0, x1
+	add	x23, x23, 272
+	add	x25, x25, :lo12:.LC8
+	ldrh	w26, [x2, 12]
+.L538:
+	cmp	x24, x19
+	bne	.L551
+	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldr	x27, [sp, 80]
-	ldp	x29, x30, [sp], 112
-	ret
-.L550:
+	ldr	x2, [x29, 104]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L552
+	bl	__stack_chk_fail
+.L551:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L538
+	cbz	x0, .L539
 	ldr	x0, [x19, 16]
-	cbnz	x0, .L539
-.L538:
+	cbnz	x0, .L540
+.L539:
 	mov	w2, 96
-	mov	x1, x22
-	mov	x0, x24
+	mov	x1, x23
+	mov	x0, x25
 	bl	sftl_printk
-.L539:
+.L540:
 	ldr	w0, [x19, 4]
-	add	x2, x29, 104
-	add	x1, x29, 108
+	add	x2, x29, 96
+	add	x1, x29, 100
 	bl	l2p_addr_tran.isra.0
-	ldr	w0, [x29, 104]
+	ldr	w0, [x29, 96]
 	cmp	w0, 3
-	bls	.L540
+	bls	.L541
 	mov	w0, -1
 	str	w0, [x19]
-.L541:
+.L542:
 	add	x19, x19, 32
-	b	.L537
-.L540:
+	b	.L538
+.L541:
 	ldr	x20, [x19, 8]
 	tst	x20, 63
-	beq	.L542
-	add	x1, x21, :lo12:.LANCHOR0
+	beq	.L543
+	add	x1, x22, :lo12:.LANCHOR0
 	ldr	x20, [x1, 3504]
-.L542:
-	add	x27, x21, :lo12:.LANCHOR0
-	ldr	w1, [x29, 108]
+.L543:
+	add	x28, x22, :lo12:.LANCHOR0
+	ldr	w1, [x29, 100]
 	ldr	x3, [x19, 16]
 	mov	x2, x20
-	ldr	x4, [x27, 3392]
+	ldr	x4, [x28, 3392]
 	blr	x4
 	str	w0, [x19]
-	ldrh	w0, [x27, 14]
+	ldrh	w0, [x28, 14]
 	cmp	w0, 4
-	bne	.L544
-	ldrb	w0, [x29, 104]
+	bne	.L545
+	ldrb	w0, [x29, 96]
 	add	x2, x20, 2048
-	ldr	x4, [x27, 3392]
-	ldr	w1, [x29, 108]
+	ldr	x4, [x28, 3392]
+	ldr	w1, [x29, 100]
 	ldr	x3, [x19, 16]
-	add	w1, w25, w1
+	add	w1, w26, w1
 	add	x3, x3, 8
 	blr	x4
 	cmn	w0, #1
-	beq	.L545
+	beq	.L546
 	ldr	x1, [x19, 16]
 	ldr	w2, [x1, 12]
 	cmn	w2, #1
-	bne	.L546
+	bne	.L547
 	ldr	w2, [x1, 8]
 	cmn	w2, #1
-	bne	.L546
+	bne	.L547
 	ldr	w1, [x1]
 	cmn	w1, #1
-	beq	.L546
-.L545:
+	beq	.L547
+.L546:
 	mov	w1, -1
 	str	w1, [x19]
-.L546:
+.L547:
 	ldr	w1, [x19]
 	cmn	w1, #1
-	beq	.L547
+	beq	.L548
 	cmp	w0, 256
-	bne	.L547
+	bne	.L548
 	str	w0, [x19]
-.L547:
+.L548:
 	ldr	w3, [x19]
 	cmp	w3, 256
 	ccmn	w3, #1, 4, ne
-	bne	.L544
+	bne	.L545
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC92
-	ldr	w2, [x29, 108]
+	ldr	w2, [x29, 100]
 	add	x0, x0, :lo12:.LC92
 	bl	sftl_printk
 	ldr	x1, [x19, 8]
-	cbz	x1, .L549
+	cbz	x1, .L550
 	mov	w3, 4
 	adrp	x0, .LC93
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC93
 	bl	rknand_print_hex
-.L549:
+.L550:
 	ldr	x1, [x19, 16]
-	cbz	x1, .L544
+	cbz	x1, .L545
 	mov	w3, 4
 	adrp	x0, .LC94
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC94
 	bl	rknand_print_hex
-.L544:
-	add	x1, x21, :lo12:.LANCHOR0
+.L545:
+	add	x1, x22, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3504]
 	cmp	x20, x0
-	bne	.L541
+	bne	.L542
 	ldr	x0, [x19, 8]
 	cmp	x20, x0
-	beq	.L541
+	beq	.L542
 	ldrh	w2, [x1, 270]
 	mov	x1, x20
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-	b	.L541
+	b	.L542
+.L552:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 112
+	ret
 	.size	FlashReadPages, .-FlashReadPages
 	.align	2
 	.global	FtlLoadFactoryBbt
@@ -4151,10 +4165,10 @@ FtlLoadFactoryBbt:
 	ldr	x1, [x0, 3464]
 	ldr	x24, [x0, 3528]
 	stp	x1, x24, [x23, 8]
-.L577:
+.L579:
 	ldrh	w0, [x19, 266]
 	cmp	w21, w0
-	bcc	.L582
+	bcc	.L584
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -4162,17 +4176,17 @@ FtlLoadFactoryBbt:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L582:
+.L584:
 	ldrh	w20, [x19, 310]
 	mov	w0, -1
 	strh	w0, [x22]
-.L579:
+.L581:
 	ldrh	w0, [x19, 310]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L580
+	ble	.L582
 	madd	w0, w0, w21, w20
 	mov	w2, 1
 	mov	w1, w2
@@ -4182,90 +4196,104 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L579
+	beq	.L581
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L579
+	bne	.L581
 	strh	w20, [x22]
-.L580:
+.L582:
 	add	w21, w21, 1
 	add	x22, x22, 2
-	b	.L577
+	b	.L579
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
 	.global	FtlGetLastWrittenPage
 	.type	FtlGetLastWrittenPage, %function
 FtlGetLastWrittenPage:
-	stp	x29, x30, [sp, -160]!
-	cmp	w1, 1
+	stp	x29, x30, [sp, -192]!
 	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	adrp	x21, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
-	mov	w23, w1
+	mov	w24, w1
 	stp	x19, x20, [sp, 16]
+	add	x1, x21, :lo12:__stack_chk_guard
+	str	x25, [sp, 64]
+	cmp	w24, 1
+	ldr	x2, [x1]
+	str	x2, [x29, 184]
+	mov	x2,0
 	adrp	x1, .LANCHOR0
-	stp	x21, x22, [sp, 32]
 	add	x2, x1, :lo12:.LANCHOR0
-	bne	.L588
+	bne	.L590
 	ldrh	w19, [x2, 316]
-.L589:
+.L591:
 	add	x1, x1, :lo12:.LANCHOR0
 	sub	w19, w19, #1
 	sxth	w19, w19
-	lsl	w21, w0, 10
-	orr	w0, w19, w21
-	mov	w2, w23
+	lsl	w22, w0, 10
+	orr	w0, w19, w22
+	mov	w2, w24
 	ldr	x1, [x1, 3512]
-	str	x1, [x29, 72]
-	add	x1, x29, 96
-	str	w0, [x29, 68]
-	add	x0, x29, 64
-	str	x1, [x29, 80]
+	str	x1, [x29, 96]
+	add	x1, x29, 120
+	str	w0, [x29, 92]
+	add	x0, x29, 88
+	str	x1, [x29, 104]
 	mov	w1, 1
 	bl	FlashReadPages
-	ldr	w0, [x29, 96]
+	ldr	w0, [x29, 120]
 	cmn	w0, #1
-	bne	.L590
-	mov	w22, 0
-	mov	w24, 2
-.L591:
-	cmp	w22, w19
-	ble	.L594
-.L590:
+	bne	.L592
+	mov	w23, 0
+	mov	w25, 2
+.L593:
+	cmp	w23, w19
+	ble	.L596
+.L592:
+	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, w19
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 160
-	ret
-.L588:
+	ldr	x2, [x29, 184]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L597
+	bl	__stack_chk_fail
+.L590:
 	ldrh	w19, [x2, 314]
-	b	.L589
-.L594:
-	add	w20, w22, w19
-	mov	w2, w23
+	b	.L591
+.L596:
+	add	w20, w23, w19
+	mov	w2, w24
 	mov	w1, 1
-	sdiv	w20, w20, w24
+	sdiv	w20, w20, w25
 	sxth	w0, w20
-	orr	w0, w0, w21
-	str	w0, [x29, 68]
-	add	x0, x29, 64
+	orr	w0, w0, w22
+	str	w0, [x29, 92]
+	add	x0, x29, 88
 	bl	FlashReadPages
-	ldr	w0, [x29, 96]
+	ldr	w0, [x29, 120]
 	cmn	w0, #1
-	bne	.L592
-	ldr	w0, [x29, 100]
+	bne	.L594
+	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	bne	.L592
-	ldr	w0, [x29, 64]
+	bne	.L594
+	ldr	w0, [x29, 88]
 	cmn	w0, #1
-	beq	.L592
+	beq	.L594
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L591
-.L592:
+	b	.L593
+.L594:
 	add	w20, w20, 1
-	sxth	w22, w20
-	b	.L591
+	sxth	w23, w20
+	b	.L593
+.L597:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldr	x25, [sp, 64]
+	ldp	x29, x30, [sp], 192
+	ret
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
 	.global	FtlScanSysBlk
@@ -4310,24 +4338,24 @@ FtlScanSysBlk:
 	add	x0, x19, 2704
 	bl	ftl_memset
 	ldrh	w24, [x19, 252]
-.L600:
+.L603:
 	ldrh	w0, [x19, 254]
 	cmp	w0, w24
-	bls	.L640
+	bls	.L643
 	ldrh	w9, [x19, 244]
 	mov	x5, 0
 	ldrh	w8, [x19, 324]
 	mov	w20, 0
 	add	x7, x19, 272
 	mov	w6, 4
-	b	.L641
-.L602:
+	b	.L644
+.L605:
 	ldrb	w0, [x7, x5]
 	mov	w1, w24
 	bl	V2P_block
 	and	w4, w0, 65535
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L601
+	cbnz	w0, .L604
 	ldr	x0, [x19, 3440]
 	ubfiz	x2, x20, 5, 16
 	lsl	w4, w4, 10
@@ -4344,17 +4372,17 @@ FtlScanSysBlk:
 	sdiv	w0, w0, w6
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L601:
+.L604:
 	add	x5, x5, 1
-.L641:
+.L644:
 	cmp	w9, w5, uxth
-	bhi	.L602
-	cbnz	w20, .L603
-.L639:
+	bhi	.L605
+	cbnz	w20, .L606
+.L642:
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L600
-.L603:
+	b	.L603
+.L606:
 	ldr	x0, [x19, 3440]
 	mov	w1, w20
 	mov	w2, 1
@@ -4362,7 +4390,7 @@ FtlScanSysBlk:
 	mov	x23, 0
 	add	x27, x19, 2704
 	bl	FlashReadPages
-.L638:
+.L641:
 	ldr	x0, [x19, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
@@ -4370,10 +4398,10 @@ FtlScanSysBlk:
 	cmn	w0, #1
 	ldr	x26, [x1, 16]
 	ubfx	x22, x22, 10, 16
-	bne	.L606
+	bne	.L609
 	mov	w28, 16
 	mov	w3, 65535
-.L608:
+.L611:
 	ldr	x0, [x19, 3440]
 	mov	w2, 1
 	str	w3, [x29, 108]
@@ -4389,73 +4417,73 @@ FtlScanSysBlk:
 	ldr	w3, [x29, 108]
 	cmp	w0, w3
 	ldr	x0, [x19, 3440]
-	bne	.L605
+	bne	.L608
 	mov	w1, -1
 	str	w1, [x0, x23]
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0, x23]
 	cmp	w0, w1
-	bne	.L606
-.L607:
+	bne	.L609
+.L610:
 	mov	w1, 1
-	b	.L678
-.L605:
+	b	.L681
+.L608:
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L606
+	bne	.L609
 	sub	w28, w28, #1
 	ands	w28, w28, 65535
-	bne	.L608
-	b	.L607
-.L606:
+	bne	.L611
+	b	.L610
+.L609:
 	ldr	w1, [x19, 2668]
 	ldr	w0, [x26, 4]
 	cmn	w1, #1
-	beq	.L609
+	beq	.L612
 	cmp	w1, w0
-	bhi	.L610
-.L609:
+	bhi	.L613
+.L612:
 	cmn	w0, #1
-	beq	.L610
+	beq	.L613
 	add	w1, w0, 1
 	str	w1, [x19, 2668]
-.L610:
+.L613:
 	ldrh	w1, [x26]
 	mov	w2, 61604
 	cmp	w1, w2
-	beq	.L612
-	bhi	.L613
+	beq	.L615
+	bhi	.L616
 	mov	w0, 61574
 	cmp	w1, w0
-	beq	.L614
-.L611:
+	beq	.L617
+.L614:
 	add	x23, x23, 32
 	cmp	x20, x23
-	bne	.L638
-	b	.L639
-.L613:
+	bne	.L641
+	b	.L642
+.L616:
 	mov	w0, 61634
 	cmp	w1, w0
-	beq	.L615
+	beq	.L618
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L611
+	bne	.L614
 	mov	w1, 0
-.L678:
+.L681:
 	mov	w0, w22
 	bl	FtlFreeSysBlkQueueIn
-	b	.L611
-.L615:
+	b	.L614
+.L618:
 	ldrh	w1, [x19, 3712]
 	ldr	w0, [x19, 340]
 	cmp	w1, w0
-	bls	.L617
+	bls	.L620
 	adrp	x0, .LC8
 	mov	w2, 1225
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L617:
+.L620:
 	ldr	w3, [x19, 340]
 	ldrh	w1, [x19, 3712]
 	and	w2, w3, 65535
@@ -4465,52 +4493,52 @@ FtlScanSysBlk:
 	sub	w2, w2, #1
 	sxth	x0, w0
 	sxth	w2, w2
-.L618:
+.L621:
 	cmp	w0, w2
-	bgt	.L624
-	tbz	w0, #31, .L658
-	b	.L611
-.L624:
+	bgt	.L627
+	tbz	w0, #31, .L661
+	b	.L614
+.L627:
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L619
+	bls	.L622
 	ldr	w2, [x4]
-	cbnz	w2, .L620
+	cbnz	w2, .L623
 	cmp	w3, w1
-	beq	.L620
+	beq	.L623
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
-.L620:
+.L623:
 	mov	w1, 0
-.L621:
+.L624:
 	cmp	w1, w0
-	bne	.L622
+	bne	.L625
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 3576]
 	strh	w22, [x1, x5, lsl 1]
-	tbnz	w0, #31, .L611
+	tbnz	w0, #31, .L614
 	ldrh	w1, [x19, 3712]
 	ldr	w2, [x19, 340]
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	cmp	w0, w2, sxth
-	bgt	.L611
-.L658:
+	bgt	.L614
+.L661:
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 3576]
-.L676:
+.L679:
 	strh	w22, [x1, x0, lsl 1]
-	b	.L611
-.L622:
+	b	.L614
+.L625:
 	ldr	x4, [x19, 3624]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4524,69 +4552,69 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L621
-.L619:
+	b	.L624
+.L622:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L618
-.L614:
+	b	.L621
+.L617:
 	ldrh	w1, [x19, 356]
 	ldrh	w0, [x19, 332]
 	cmp	w1, w0
-	bls	.L627
+	bls	.L630
 	adrp	x0, .LC8
 	mov	w2, 1266
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L627:
+.L630:
 	ldrh	w3, [x19, 332]
 	ldrh	w1, [x19, 356]
 	sub	w2, w3, #1
 	ldr	x4, [x19, 3600]
 	sxth	x0, w2
 	sub	w2, w2, w1
-.L628:
+.L631:
 	cmp	w0, w2
-	ble	.L633
+	ble	.L636
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L629
+	bls	.L632
 	ldr	w2, [x4]
-	cbnz	w2, .L630
+	cbnz	w2, .L633
 	cmp	w3, w1
-	beq	.L630
+	beq	.L633
 	add	w1, w1, 1
 	strh	w1, [x19, 356]
-.L630:
+.L633:
 	mov	w1, 0
-.L631:
+.L634:
 	cmp	w1, w0
-	bne	.L632
+	bne	.L635
 	ldr	x1, [x19, 3600]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 360]
 	strh	w22, [x1, x5, lsl 1]
-.L633:
-	tbnz	w0, #31, .L611
+.L636:
+	tbnz	w0, #31, .L614
 	ldrh	w1, [x19, 332]
 	ldrh	w2, [x19, 356]
 	sub	w1, w1, #1
 	sub	w1, w1, w2
 	cmp	w0, w1, sxth
-	bgt	.L611
+	bgt	.L614
 	ldr	x1, [x19, 3600]
 	add	w2, w2, 1
 	strh	w2, [x19, 356]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 360]
-	b	.L676
-.L632:
+	b	.L679
+.L635:
 	ldr	x4, [x19, 3600]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4600,54 +4628,54 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L631
-.L629:
+	b	.L634
+.L632:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L628
-.L612:
+	b	.L631
+.L615:
 	ldrh	w2, [x27]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L635
+	bne	.L638
 	strh	w22, [x27]
-.L677:
+.L680:
 	str	w0, [x27, 8]
-	b	.L611
-.L635:
+	b	.L614
+.L638:
 	ldrh	w0, [x27, 4]
 	cmp	w0, w1
-	beq	.L636
+	beq	.L639
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L636:
+.L639:
 	ldr	w0, [x26, 4]
 	ldr	w1, [x27, 8]
 	cmp	w1, w0
-	bcs	.L637
+	bcs	.L640
 	ldrh	w0, [x27]
 	strh	w0, [x27, 4]
 	strh	w22, [x27]
 	ldr	w0, [x26, 4]
-	b	.L677
-.L637:
-	strh	w22, [x27, 4]
-	b	.L611
+	b	.L680
 .L640:
+	strh	w22, [x27, 4]
+	b	.L614
+.L643:
 	ldr	x1, [x19, 3576]
 	ldrh	w0, [x1]
-	cbz	w0, .L642
-.L645:
+	cbz	w0, .L645
+.L648:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x1, [x0, 360]
 	ldrh	w2, [x1]
-	cbz	w2, .L643
-.L644:
+	cbz	w2, .L646
+.L647:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x21, 3712]
 	ldr	w0, [x21, 340]
 	cmp	w1, w0
-	bls	.L674
+	bls	.L677
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4655,7 +4683,7 @@ FtlScanSysBlk:
 	add	x1, x1, 288
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L674:
+.L677:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -4664,22 +4692,22 @@ FtlScanSysBlk:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L642:
+.L645:
 	ldrh	w0, [x19, 3712]
-	cbz	w0, .L645
+	cbz	w0, .L648
 	ldr	w2, [x19, 340]
 	mov	w0, 0
-.L646:
+.L649:
 	cmp	w0, w2
-	bcs	.L645
+	bcs	.L648
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L647
+	cbz	w3, .L650
 	mov	w1, w0
 	add	x2, x21, :lo12:.LANCHOR0
-.L648:
+.L651:
 	ldr	w3, [x2, 340]
 	cmp	w1, w3
-	bcs	.L645
+	bcs	.L648
 	ldr	x5, [x2, 3576]
 	sxtw	x6, w1
 	lsl	x4, x6, 1
@@ -4694,27 +4722,27 @@ FtlScanSysBlk:
 	str	w6, [x5, x3, lsl 2]
 	ldr	x3, [x2, 3576]
 	strh	wzr, [x3, x4]
-	b	.L648
-.L647:
+	b	.L651
+.L650:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L646
-.L643:
+	b	.L649
+.L646:
 	ldrh	w2, [x0, 356]
-	cbz	w2, .L644
+	cbz	w2, .L647
 	ldrh	w2, [x0, 332]
 	mov	w0, 0
-.L653:
+.L656:
 	mov	w6, w0
 	cmp	w0, w2
-	bge	.L644
+	bge	.L647
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L654
+	cbz	w3, .L657
 	add	x1, x21, :lo12:.LANCHOR0
-.L655:
+.L658:
 	ldrh	w2, [x1, 332]
 	cmp	w0, w2
-	bge	.L644
+	bge	.L647
 	ldr	x4, [x1, 360]
 	sxtw	x5, w0
 	lsl	x3, x5, 1
@@ -4729,11 +4757,11 @@ FtlScanSysBlk:
 	str	w5, [x4, x2, lsl 2]
 	ldr	x2, [x1, 360]
 	strh	wzr, [x2, x3]
-	b	.L655
-.L654:
+	b	.L658
+.L657:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L653
+	b	.L656
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
 	.global	FtlLoadBbt
@@ -4755,11 +4783,11 @@ FtlLoadBbt:
 	ldrh	w20, [x23, 310]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-.L680:
+.L683:
 	ldrh	w0, [x23, 310]
 	sub	w0, w0, #16
 	cmp	w20, w0
-	ble	.L683
+	ble	.L686
 	lsl	w0, w20, 10
 	mov	w2, 1
 	str	w0, [x21, 4]
@@ -4768,7 +4796,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L681
+	bne	.L684
 	ldr	w0, [x21, 4]
 	mov	w2, 1
 	mov	w1, w2
@@ -4776,27 +4804,27 @@ FtlLoadBbt:
 	str	w0, [x21, 4]
 	mov	x0, x21
 	bl	FlashReadPages
-.L681:
+.L684:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L682
+	beq	.L685
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L682
+	bne	.L685
 	ldr	w1, [x22, 4]
 	str	w1, [x23, 376]
 	strh	w20, [x23, 368]
 	ldrh	w1, [x22, 8]
 	strh	w1, [x23, 372]
-.L683:
+.L686:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w1, [x21, 368]
 	cmp	w1, w0
-	beq	.L697
+	beq	.L700
 	ldrh	w1, [x21, 372]
 	cmp	w1, w0
-	beq	.L687
+	beq	.L690
 	add	x0, x21, 3728
 	lsl	w1, w1, 10
 	mov	w2, 1
@@ -4805,21 +4833,21 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21, 3728]
 	cmn	w0, #1
-	beq	.L687
+	beq	.L690
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L687
+	bne	.L690
 	ldr	w1, [x21, 376]
 	ldr	w0, [x22, 4]
 	cmp	w0, w1
-	bls	.L687
+	bls	.L690
 	str	w0, [x21, 376]
 	ldrh	w1, [x21, 372]
 	ldrh	w0, [x22, 8]
 	strh	w1, [x21, 368]
 	strh	w0, [x21, 372]
-.L687:
+.L690:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	x23, x20, 3728
@@ -4829,8 +4857,8 @@ FtlLoadBbt:
 	sxth	w21, w0
 	add	w0, w0, 1
 	strh	w0, [x20, 370]
-.L689:
-	tbz	w21, #31, .L692
+.L692:
+	tbz	w21, #31, .L695
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4838,44 +4866,44 @@ FtlLoadBbt:
 	add	x1, x1, 304
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L691:
+.L694:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 10]
 	mov	w2, 65535
 	strh	w0, [x1, 374]
 	ldrh	w0, [x22, 12]
 	cmp	w0, w2
-	beq	.L694
+	beq	.L697
 	ldr	w2, [x1, 240]
 	cmp	w0, w2
-	beq	.L694
+	beq	.L697
 	ldrh	w1, [x1, 254]
 	lsr	w1, w1, 2
 	cmp	w2, w1
-	bcs	.L694
+	bcs	.L697
 	cmp	w0, w1
-	bcs	.L694
+	bcs	.L697
 	bl	FtlSysBlkNumInit
-.L694:
+.L697:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, 0
 	add	x21, x19, 400
-.L695:
+.L698:
 	ldrh	w0, [x19, 266]
 	cmp	w20, w0
-	bcc	.L696
+	bcc	.L699
 	mov	w0, 0
-.L679:
+.L682:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L682:
+.L685:
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-	b	.L680
-.L692:
+	b	.L683
+.L695:
 	ldrh	w0, [x20, 368]
 	mov	w2, 1
 	mov	w1, w2
@@ -4887,15 +4915,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x23]
 	cmn	w0, #1
-	beq	.L690
+	beq	.L693
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	beq	.L691
-.L690:
+	beq	.L694
+.L693:
 	sub	w21, w21, #1
 	sxth	w21, w21
-	b	.L689
-.L696:
+	b	.L692
+.L699:
 	ldrh	w2, [x19, 3640]
 	ldr	x0, [x19, 3736]
 	mul	w1, w2, w20
@@ -4904,10 +4932,10 @@ FtlLoadBbt:
 	add	x1, x0, x1, lsl 2
 	ldr	x0, [x21], 8
 	bl	ftl_memcpy
-	b	.L695
-.L697:
+	b	.L698
+.L700:
 	mov	w0, -1
-	b	.L679
+	b	.L682
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
 	.global	FlashProgPages
@@ -4916,73 +4944,78 @@ FlashProgPages:
 	stp	x29, x30, [sp, -160]!
 	ubfiz	x1, x1, 5, 32
 	add	x29, sp, 0
-	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
 	stp	x19, x20, [sp, 16]
-	add	x22, x0, x1
-	str	w2, [x29, 108]
-	add	x2, x21, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp, 32]
+	adrp	x21, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
 	adrp	x23, .LANCHOR1
-	stp	x27, x28, [sp, 80]
-	add	x23, x23, :lo12:.LANCHOR1
 	stp	x25, x26, [sp, 64]
+	add	x23, x23, :lo12:.LANCHOR1
+	stp	x27, x28, [sp, 80]
 	adrp	x24, .LC8
-	mov	w27, w3
+	stp	w3, w2, [x29, 104]
+	add	x2, x21, :lo12:__stack_chk_guard
+	ldr	x3, [x2]
+	str	x3, [x29, 152]
+	mov	x3,0
+	add	x2, x20, :lo12:.LANCHOR0
 	mov	x19, x0
-	ldrh	w25, [x2, 12]
-	mov	x20, x0
+	add	x22, x0, x1
+	mov	x26, x0
 	add	x23, x23, 320
+	ldrh	w25, [x2, 12]
 	add	x24, x24, :lo12:.LC8
 	lsl	w28, w25, 3
-.L710:
-	cmp	x20, x22
-	bne	.L724
-	cbz	w27, .L718
-	adrp	x20, .LC95
-	adrp	x23, .LC96
-	add	x20, x20, :lo12:.LC95
-	add	x23, x23, :lo12:.LC96
-	b	.L746
-.L724:
-	ldr	x0, [x20, 8]
-	cbz	x0, .L711
-	ldr	x0, [x20, 16]
-	cbnz	x0, .L712
-.L711:
+.L713:
+	cmp	x26, x22
+	bne	.L727
+	ldr	w0, [x29, 104]
+	cbz	w0, .L721
+	adrp	x23, .LC95
+	adrp	x24, .LC96
+	add	x23, x23, :lo12:.LC95
+	add	x24, x24, :lo12:.LC96
+	b	.L750
+.L727:
+	ldr	x0, [x26, 8]
+	cbz	x0, .L714
+	ldr	x0, [x26, 16]
+	cbnz	x0, .L715
+.L714:
 	mov	w2, 148
 	mov	x1, x23
 	mov	x0, x24
 	bl	sftl_printk
-.L712:
-	ldr	w0, [x20, 4]
-	add	x2, x29, 120
-	add	x1, x29, 124
+.L715:
+	ldr	w0, [x26, 4]
+	add	x2, x29, 112
+	add	x1, x29, 116
 	bl	l2p_addr_tran.isra.0
-	ldr	w0, [x29, 120]
+	ldr	w0, [x29, 112]
 	cmp	w0, 3
-	bls	.L713
-.L748:
+	bls	.L716
+.L752:
 	mov	w0, -1
-	str	w0, [x20]
-	b	.L714
-.L713:
-	cbnz	w0, .L715
-	ldr	w0, [x29, 124]
+	str	w0, [x26]
+	b	.L717
+.L716:
+	cbnz	w0, .L718
+	ldr	w0, [x29, 116]
 	cmp	w28, w0
-	bls	.L715
+	bls	.L718
 	adrp	x20, .LANCHOR1
 	add	x20, x20, :lo12:.LANCHOR1
-	adrp	x21, .LC86
+	adrp	x23, .LC86
 	add	x20, x20, 320
-	add	x21, x21, :lo12:.LC86
-	b	.L745
-.L717:
+	add	x23, x23, :lo12:.LC86
+	b	.L749
+.L720:
 	ldr	w2, [x19, 4]
 	mov	w0, -1
 	str	w0, [x19]
 	mov	x1, x20
-	mov	x0, x21
+	mov	x0, x23
 	add	x19, x19, 32
 	bl	sftl_printk
 	ldr	x1, [x19, -24]
@@ -4997,131 +5030,138 @@ FlashProgPages:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC88
 	bl	rknand_print_hex
-.L745:
+.L749:
 	cmp	x19, x22
-	bne	.L717
+	bne	.L720
 	bl	dump_stack
-.L718:
-	ldp	x19, x20, [sp, 16]
+.L721:
+	add	x21, x21, :lo12:__stack_chk_guard
 	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 160
-	ret
-.L715:
-	ldr	x1, [x20, 8]
+	ldr	x2, [x29, 152]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L735
+	bl	__stack_chk_fail
+.L718:
+	ldr	x1, [x26, 8]
 	tst	x1, 63
-	beq	.L732
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x26, [x0, 3504]
-	cmp	x1, x26
-	beq	.L719
+	beq	.L736
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x27, [x0, 3504]
+	cmp	x1, x27
+	beq	.L722
 	ldrh	w2, [x0, 270]
-	mov	x0, x26
+	mov	x0, x27
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-.L719:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w1, [x29, 124]
-	ldr	x3, [x20, 16]
-	mov	x2, x26
-	ldr	x5, [x0, 3384]
-	ldrb	w0, [x29, 120]
-	blr	x5
-	cbnz	w0, .L720
-	str	wzr, [x20]
-.L721:
-	add	x0, x21, :lo12:.LANCHOR0
+.L722:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x29, 116]
+	ldr	x3, [x26, 16]
+	mov	x2, x27
+	ldr	x6, [x0, 3384]
+	ldrb	w0, [x29, 112]
+	blr	x6
+	cbnz	w0, .L723
+	str	wzr, [x26]
+.L724:
+	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 14]
 	cmp	w1, 4
-	bne	.L714
-	ldr	x5, [x0, 3384]
-	add	x2, x26, 2048
-	ldrb	w0, [x29, 120]
-	ldr	w1, [x29, 124]
-	ldr	x3, [x20, 16]
+	bne	.L717
+	ldr	x6, [x0, 3384]
+	add	x2, x27, 2048
+	ldrb	w0, [x29, 112]
+	ldr	w1, [x29, 116]
+	ldr	x3, [x26, 16]
 	add	w1, w25, w1
 	add	x3, x3, 8
-	blr	x5
-	cbnz	w0, .L748
-.L714:
-	add	x20, x20, 32
-	b	.L710
-.L732:
-	mov	x26, x1
-	b	.L719
-.L720:
+	blr	x6
+	cbnz	w0, .L752
+.L717:
+	add	x26, x26, 32
+	b	.L713
+.L736:
+	mov	x27, x1
+	b	.L722
+.L723:
 	mov	w0, -1
-	str	w0, [x20]
-	b	.L721
-.L730:
-	add	x0, x21, :lo12:.LANCHOR0
+	str	w0, [x26]
+	b	.L724
+.L733:
+	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w2, [x29, 108]
 	ldr	x1, [x0, 3504]
 	str	wzr, [x1]
 	ldr	x1, [x0, 3520]
 	str	wzr, [x1]
 	ldr	w1, [x19, 4]
-	str	w1, [x29, 132]
+	str	w1, [x29, 124]
 	ldr	x1, [x0, 3504]
 	ldr	x0, [x0, 3520]
-	stp	x1, x0, [x29, 136]
+	stp	x1, x0, [x29, 128]
 	mov	w1, 1
-	add	x0, x29, 128
+	add	x0, x29, 120
 	bl	FlashReadPages
-	ldr	w24, [x29, 128]
-	cmn	w24, #1
-	bne	.L726
+	ldr	w25, [x29, 120]
+	cmn	w25, #1
+	bne	.L729
 	ldr	w1, [x19, 4]
-	mov	x0, x20
+	mov	x0, x23
 	bl	sftl_printk
-	str	w24, [x19]
-.L726:
-	ldr	w24, [x29, 128]
-	cmp	w24, 256
-	bne	.L727
+	str	w25, [x19]
+.L729:
+	ldr	w25, [x29, 120]
+	cmp	w25, 256
+	bne	.L730
 	ldr	w1, [x19, 4]
-	mov	x0, x23
+	mov	x0, x24
 	bl	sftl_printk
-	str	w24, [x19]
-.L727:
+	str	w25, [x19]
+.L730:
 	ldr	x0, [x19, 16]
-	cbz	x0, .L728
+	cbz	x0, .L731
 	ldr	w2, [x0]
-	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3520]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L728
+	beq	.L731
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC97
 	add	x0, x0, :lo12:.LC97
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L728:
+.L731:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L729
+	cbz	x0, .L732
 	ldr	w2, [x0]
-	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3504]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L729
+	beq	.L732
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC98
 	add	x0, x0, :lo12:.LC98
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L729:
+.L732:
 	add	x19, x19, 32
-.L746:
+.L750:
 	cmp	x19, x22
-	bne	.L730
-	b	.L718
+	bne	.L733
+	b	.L721
+.L735:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 160
+	ret
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
 	.global	FtlLowFormatEraseBlock
@@ -5144,11 +5184,11 @@ FtlLowFormatEraseBlock:
 	mov	w20, 0
 	mov	w19, 0
 	str	w23, [x5, 3436]
-.L750:
+.L754:
 	ldrh	w0, [x5, 244]
 	cmp	w0, w10
-	bhi	.L754
-	cbz	w20, .L749
+	bhi	.L758
+	cbz	w20, .L753
 	ldr	x0, [x5, 3416]
 	mov	w2, w20
 	mov	w1, 0
@@ -5156,38 +5196,38 @@ FtlLowFormatEraseBlock:
 	mov	x24, 0
 	add	x25, x21, :lo12:.LANCHOR0
 	bl	FlashEraseBlocks
-.L758:
+.L762:
 	ldr	x0, [x25, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	bne	.L757
+	bne	.L761
 	ldr	w0, [x1, 4]
 	add	w19, w19, 1
 	and	w19, w19, 65535
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
-.L757:
+.L761:
 	add	x24, x24, 32
 	cmp	x24, x20
-	bne	.L758
-	cbz	w22, .L771
+	bne	.L762
+	cbz	w22, .L775
 	add	x0, x21, :lo12:.LANCHOR0
 	mov	w25, 1
 	ldrh	w26, [x0, 316]
-.L759:
+.L763:
 	add	x28, x21, :lo12:.LANCHOR0
 	mov	w24, 0
 	add	x0, x28, 272
 	str	x0, [x29, 104]
-.L767:
+.L771:
 	mov	w5, 0
 	mov	w20, 0
-.L760:
+.L764:
 	ldrh	w0, [x28, 244]
 	cmp	w0, w5
-	bhi	.L763
-	cbz	w20, .L749
+	bhi	.L767
+	cbz	w20, .L753
 	ldr	x0, [x28, 3416]
 	mov	w1, w20
 	mov	w3, 1
@@ -5195,11 +5235,11 @@ FtlLowFormatEraseBlock:
 	mov	x27, 0
 	bl	FlashProgPages
 	ubfiz	x1, x20, 5, 16
-.L766:
+.L770:
 	ldr	x0, [x28, 3416]
 	add	x3, x0, x27
 	ldr	w0, [x0, x27]
-	cbz	w0, .L765
+	cbz	w0, .L769
 	ldr	w0, [x3, 4]
 	add	w19, w19, 1
 	str	x1, [x29, 96]
@@ -5207,38 +5247,38 @@ FtlLowFormatEraseBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29, 96]
-.L765:
+.L769:
 	add	x27, x27, 32
 	cmp	x1, x27
-	bne	.L766
+	bne	.L770
 	add	w24, w24, 1
 	cmp	w26, w24, uxth
-	bhi	.L767
+	bhi	.L771
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	x24, 0
-.L769:
-	cbz	w22, .L768
+.L773:
+	cbz	w22, .L772
 	ldr	x0, [x26, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
-	cbnz	w0, .L768
+	cbnz	w0, .L772
 	ldr	w0, [x1, 4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L768:
+.L772:
 	add	x24, x24, 32
 	cmp	x24, x27
-	bne	.L769
+	bne	.L773
 	cmp	w23, 63
 	ccmp	w22, 0, 0, hi
-	beq	.L749
+	beq	.L753
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, w20
 	mov	w1, w25
 	ldr	x0, [x21, 3416]
 	bl	FlashEraseBlocks
-.L749:
+.L753:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5247,7 +5287,7 @@ FtlLowFormatEraseBlock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L754:
+.L758:
 	ldr	x1, [x5, 3416]
 	ubfiz	x0, x10, 5, 16
 	str	wzr, [x1, x0]
@@ -5256,13 +5296,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L751
+	cbz	w22, .L755
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L752
-.L751:
+	cbnz	w0, .L756
+.L755:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L753
+	cbnz	w0, .L757
 	ldr	x0, [x5, 3416]
 	ubfiz	x2, x20, 5, 16
 	lsl	w6, w6, 10
@@ -5280,19 +5320,19 @@ FtlLowFormatEraseBlock:
 	sdiv	w0, w0, w9
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L752:
+.L756:
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L750
-.L753:
+	b	.L754
+.L757:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L752
-.L771:
+	b	.L756
+.L775:
 	mov	w25, 0
 	mov	w26, 2
-	b	.L759
-.L763:
+	b	.L763
+.L767:
 	ldr	x1, [x28, 3416]
 	ubfiz	x0, x5, 5, 16
 	str	wzr, [x1, x0]
@@ -5302,13 +5342,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L761
+	cbz	w22, .L765
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L762
-.L761:
+	cbnz	w0, .L766
+.L765:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L762
+	cbnz	w0, .L766
 	ldr	x0, [x28, 3416]
 	ubfiz	x2, x20, 5, 16
 	add	w6, w24, w6, lsl 10
@@ -5327,74 +5367,89 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x28, 3496]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L762:
+.L766:
 	add	w5, w5, 1
 	and	w5, w5, 65535
-	b	.L760
+	b	.L764
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
 	.global	FlashTestBlk
 	.type	FlashTestBlk, %function
 FlashTestBlk:
-	stp	x29, x30, [sp, -128]!
+	stp	x29, x30, [sp, -160]!
+	adrp	x1, __stack_chk_guard
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	and	w19, w0, 65535
+	str	x21, [sp, 32]
+	add	x0, x1, :lo12:__stack_chk_guard
 	cmp	w19, 11
-	bls	.L795
+	mov	x21, x1
+	ldr	x2, [x0]
+	str	x2, [x29, 152]
+	mov	x2,0
+	bls	.L800
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w2, 32
 	mov	w1, 165
 	lsl	w19, w19, 10
 	ldr	x0, [x20, 3512]
-	str	x0, [x29, 40]
-	add	x0, x29, 64
-	str	x0, [x29, 48]
+	str	x0, [x29, 64]
+	add	x0, x29, 88
+	str	x0, [x29, 72]
 	bl	ftl_memset
 	ldr	x0, [x20, 3512]
 	mov	w2, 8
 	mov	w1, 90
 	bl	ftl_memset
-	str	w19, [x29, 36]
+	str	w19, [x29, 60]
 	mov	w2, 1
-	add	x0, x29, 32
+	add	x0, x29, 56
 	mov	w1, w2
 	bl	FlashEraseBlocks
 	mov	w3, 1
-	add	x0, x29, 32
+	add	x0, x29, 56
 	mov	w2, w3
 	mov	w1, w3
 	bl	FlashProgPages
-	ldr	w0, [x29, 32]
-	cbnz	w0, .L796
+	ldr	w0, [x29, 56]
+	cbnz	w0, .L801
 	add	w0, w19, 1
 	mov	w3, 1
-	str	w0, [x29, 36]
+	str	w0, [x29, 60]
 	mov	w2, w3
 	mov	w1, w3
-	add	x0, x29, 32
+	add	x0, x29, 56
 	bl	FlashProgPages
-	ldr	w0, [x29, 32]
+	ldr	w0, [x29, 56]
 	cmp	w0, 0
 	csetm	w20, ne
-.L794:
+.L798:
 	mov	w2, 1
 	mov	w1, 0
-	add	x0, x29, 32
-	str	w19, [x29, 36]
+	add	x0, x29, 56
+	str	w19, [x29, 60]
 	bl	FlashEraseBlocks
-.L792:
-	mov	w0, w20
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 128
-	ret
 .L796:
+	add	x1, x21, :lo12:__stack_chk_guard
+	mov	w0, w20
+	ldr	x2, [x29, 152]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L799
+	bl	__stack_chk_fail
+.L801:
 	mov	w20, -1
-	b	.L794
-.L795:
+	b	.L798
+.L800:
 	mov	w20, 0
-	b	.L792
+	b	.L796
+.L799:
+	ldp	x19, x20, [sp, 16]
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 160
+	ret
 	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
 	.global	FtlBbmTblFlush
@@ -5417,11 +5472,11 @@ FtlBbmTblFlush:
 	ldrh	w2, [x20, 322]
 	str	x0, [x20, 3736]
 	bl	ftl_memset
-.L799:
+.L804:
 	ldrh	w0, [x20, 266]
 	add	x1, x20, 3728
 	cmp	w19, w0
-	blt	.L800
+	blt	.L805
 	ldr	x26, [x1, 16]
 	add	x19, x20, 368
 	mov	w2, 16
@@ -5448,7 +5503,7 @@ FtlBbmTblFlush:
 	strh	w0, [x26, 12]
 	ldr	w0, [x20, 2684]
 	strh	w0, [x26, 14]
-.L801:
+.L806:
 	ldr	x0, [x25, 3464]
 	str	x0, [x25, 3736]
 	ldr	x0, [x25, 3528]
@@ -5466,7 +5521,7 @@ FtlBbmTblFlush:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L802
+	blt	.L807
 	ldr	w0, [x19, 8]
 	mov	w2, 1
 	ldrh	w1, [x19]
@@ -5485,7 +5540,7 @@ FtlBbmTblFlush:
 	mov	w1, w2
 	ldr	x0, [x25, 3416]
 	bl	FlashEraseBlocks
-.L802:
+.L807:
 	add	x20, x25, 3728
 	mov	w3, 1
 	mov	x0, x20
@@ -5497,22 +5552,22 @@ FtlBbmTblFlush:
 	strh	w0, [x19, 2]
 	ldr	w0, [x25, 3728]
 	cmn	w0, #1
-	bne	.L803
+	bne	.L808
 	ldr	w1, [x25, 3732]
 	add	w21, w21, 1
 	add	x0, x24, :lo12:.LC100
 	and	w21, w21, 65535
 	bl	sftl_printk
 	cmp	w21, 3
-	bls	.L801
+	bls	.L806
 	ldr	w1, [x25, 3732]
 	adrp	x0, .LC101
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC101
 	bl	sftl_printk
+.L810:
+	b	.L810
 .L805:
-	b	.L805
-.L800:
 	ldrh	w2, [x20, 3640]
 	ldr	x0, [x1, 8]
 	ldr	x1, [x21], 8
@@ -5521,16 +5576,16 @@ FtlBbmTblFlush:
 	add	w19, w19, 1
 	add	x0, x0, x3, sxtw 2
 	bl	ftl_memcpy
-	b	.L799
-.L806:
+	b	.L804
+.L811:
 	mov	w22, 1
-	b	.L801
-.L803:
+	b	.L806
+.L808:
 	add	w22, w22, 1
 	cmp	w22, 1
-	ble	.L806
+	ble	.L811
 	cmp	w0, 256
-	beq	.L801
+	beq	.L806
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5555,13 +5610,13 @@ allocate_data_superblock:
 	add	x23, x22, 136
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-.L812:
+.L817:
 	ldrh	w1, [x22, 2592]
 	ldrh	w0, [x22, 236]
 	add	w0, w0, w1
 	ldrh	w1, [x22, 252]
 	cmp	w0, w1
-	ble	.L813
+	ble	.L818
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5569,9 +5624,9 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L813:
+.L818:
 	cmp	x20, x23
-	bne	.L839
+	bne	.L844
 	ldrh	w0, [x19, 236]
 	ldr	w1, [x19, 3244]
 	mul	w1, w0, w1
@@ -5579,15 +5634,15 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	add	w1, w0, w1, lsr 2
 	ands	w1, w1, 65535
-	beq	.L814
+	beq	.L819
 	sub	w1, w1, #1
 	and	w1, w1, 65535
-.L814:
+.L819:
 	add	x0, x19, 2600
 	bl	List_pop_index_node
 	and	w25, w0, 65535
 	ldrh	w0, [x19, 236]
-	cbnz	w0, .L815
+	cbnz	w0, .L820
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5595,22 +5650,22 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L815:
+.L820:
 	ldrh	w0, [x19, 236]
 	sub	w0, w0, #1
 	strh	w0, [x19, 236]
 	ldrh	w0, [x19, 252]
 	cmp	w0, w25
-	bls	.L812
+	bls	.L817
 	ldr	x0, [x19, 80]
 	ubfiz	x26, x25, 1, 16
 	ldrh	w24, [x0, x26]
-	cbnz	w24, .L812
+	cbnz	w24, .L817
 	strh	w25, [x20]
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L817
+	cbnz	w0, .L822
 	ldr	x0, [x19, 80]
 	mov	w1, -1
 	strh	w1, [x0, x26]
@@ -5621,7 +5676,7 @@ allocate_data_superblock:
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L812
+	ble	.L817
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2679
@@ -5629,17 +5684,17 @@ allocate_data_superblock:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L812
-.L839:
+	b	.L817
+.L844:
 	mov	w1, 0
-	b	.L814
-.L817:
+	b	.L819
+.L822:
 	ldrh	w1, [x19, 2592]
 	ldrh	w0, [x19, 236]
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L819
+	ble	.L824
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5647,16 +5702,16 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L819:
+.L824:
 	add	x27, x20, 16
 	ldrh	w4, [x19, 244]
 	mov	x3, x27
 	mov	x0, 0
 	mov	w5, 65535
-.L820:
+.L825:
 	cmp	w4, w0, uxth
-	bhi	.L822
-	cbnz	w24, .L823
+	bhi	.L827
+	cbnz	w24, .L828
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5664,10 +5719,10 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L823:
+.L828:
 	ldrh	w0, [x19, 184]
 	cmp	w0, w25
-	bne	.L824
+	bne	.L829
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5675,15 +5730,15 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L824:
+.L829:
 	ldrb	w0, [x20, 8]
 	ldr	x1, [x19, 2608]
-	cbnz	w0, .L825
+	cbnz	w0, .L830
 	ldrh	w0, [x1, x26]
-	cbz	w0, .L826
+	cbz	w0, .L831
 	ldrh	w2, [x19, 304]
 	add	w0, w0, w2
-.L847:
+.L852:
 	strh	w0, [x1, x26]
 	mov	w1, 0
 	ldr	w0, [x19, 2676]
@@ -5691,14 +5746,14 @@ allocate_data_superblock:
 	str	w0, [x19, 2676]
 	mov	w0, w25
 	bl	ftl_set_blk_mode
-.L828:
+.L833:
 	ldr	x0, [x19, 2608]
 	ldr	w1, [x19, 2692]
 	ldrh	w0, [x0, x26]
 	cmp	w0, w1
-	bls	.L829
+	bls	.L834
 	str	w0, [x19, 2692]
-.L829:
+.L834:
 	ldr	w1, [x19, 2680]
 	ubfiz	x3, x24, 5, 16
 	ldrh	w0, [x19, 304]
@@ -5712,51 +5767,51 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	str	w0, [x1, 16]
 	mov	x0, 0
-.L830:
+.L835:
 	cmp	x3, x0
-	bne	.L831
+	bne	.L836
 	ldrb	w1, [x20, 8]
 	mov	w2, w24
 	ldr	x0, [x19, 3416]
 	mov	x28, 0
 	bl	FlashEraseBlocks
 	mov	w1, 0
-.L832:
+.L837:
 	cmp	w24, w28, uxth
-	bhi	.L834
+	bhi	.L839
 	cmp	w1, 0
-	ble	.L835
+	ble	.L840
 	mov	w0, w25
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L835:
+.L840:
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L836
+	cbnz	w0, .L841
 	ldr	x0, [x19, 80]
 	mov	w1, -1
 	strh	w1, [x0, x26]
-	b	.L812
-.L822:
+	b	.L817
+.L827:
 	ldr	x1, [x19, 3416]
 	add	x2, x1, x0, lsl 5
 	stp	xzr, xzr, [x2, 8]
 	ldrh	w2, [x3]
 	cmp	w2, w5
-	beq	.L821
+	beq	.L826
 	ubfiz	x6, x24, 5, 16
 	add	w24, w24, 1
 	add	x1, x1, x6
 	and	w24, w24, 65535
 	lsl	w2, w2, 10
 	str	w2, [x1, 4]
-.L821:
+.L826:
 	add	x0, x0, 1
 	add	x3, x3, 2
-	b	.L820
-.L826:
+	b	.L825
+.L831:
 	mov	w0, 2
-	b	.L847
-.L825:
+	b	.L852
+.L830:
 	ldrh	w0, [x1, x26]
 	add	w0, w0, 1
 	strh	w0, [x1, x26]
@@ -5765,22 +5820,22 @@ allocate_data_superblock:
 	str	w0, [x19, 2680]
 	mov	w0, w25
 	bl	ftl_set_blk_mode.part.7
-	b	.L828
-.L831:
+	b	.L833
+.L836:
 	ldr	x1, [x19, 3416]
 	add	x1, x1, x0
 	add	x0, x0, 32
 	ldr	w2, [x1, 4]
 	and	w2, w2, -1024
 	str	w2, [x1, 4]
-	b	.L830
-.L834:
+	b	.L835
+.L839:
 	ldr	x2, [x19, 3416]
 	lsl	x0, x28, 5
 	add	x3, x2, x0
 	ldr	w2, [x2, x0]
 	cmn	w2, #1
-	bne	.L833
+	bne	.L838
 	add	w1, w1, 1
 	ldr	w0, [x3, 4]
 	stp	w2, w1, [x29, 104]
@@ -5791,11 +5846,11 @@ allocate_data_superblock:
 	ldrb	w0, [x20, 7]
 	sub	w0, w0, #1
 	strb	w0, [x20, 7]
-.L833:
+.L838:
 	add	x28, x28, 1
 	add	x27, x27, 2
-	b	.L832
-.L836:
+	b	.L837
+.L841:
 	add	x21, x21, :lo12:.LANCHOR0
 	strh	wzr, [x20, 2]
 	strb	wzr, [x20, 6]
@@ -5812,10 +5867,10 @@ allocate_data_superblock:
 	ldrh	w2, [x20]
 	strh	w0, [x1, x2, lsl 1]
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L837
+	cbz	w0, .L842
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L838
-.L837:
+	cbnz	w0, .L843
+.L842:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5823,7 +5878,7 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L838:
+.L843:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5848,16 +5903,16 @@ FtlGcFreeBadSuperBlk:
 	stp	x25, x26, [sp, 64]
 	ldrh	w0, [x19, 3320]
 	str	x27, [sp, 80]
-	cbz	w0, .L849
+	cbz	w0, .L854
 	add	x23, x19, 272
 	add	x24, x19, 3328
 	mov	w21, 0
-.L850:
+.L855:
 	ldrh	w0, [x19, 244]
 	cmp	w0, w21
-	bhi	.L856
+	bhi	.L861
 	bl	FtlGcReFreshBadBlk
-.L849:
+.L854:
 	mov	w0, 0
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -5866,7 +5921,7 @@ FtlGcFreeBadSuperBlk:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L856:
+.L861:
 	ldrb	w0, [x23, w21, sxtw]
 	mov	w1, w22
 	adrp	x26, .LC102
@@ -5874,18 +5929,18 @@ FtlGcFreeBadSuperBlk:
 	mov	w20, 0
 	bl	V2P_block
 	and	w25, w0, 65535
-.L851:
+.L856:
 	ldrh	w0, [x19, 3320]
 	cmp	w0, w20
-	bhi	.L855
+	bhi	.L860
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	b	.L850
-.L855:
+	b	.L855
+.L860:
 	ldrh	w0, [x24, w20, sxtw 1]
 	add	w27, w20, 1
 	cmp	w0, w25
-	bne	.L852
+	bne	.L857
 	mov	w1, w25
 	mov	x0, x26
 	bl	sftl_printk
@@ -5894,22 +5949,22 @@ FtlGcFreeBadSuperBlk:
 	bl	FtlBbmTblFlush
 	ldrh	w0, [x19, 3320]
 	mov	w1, w27
-.L853:
+.L858:
 	cmp	w20, w0
-	bcc	.L854
+	bcc	.L859
 	sub	w0, w0, #1
 	strh	w0, [x19, 3320]
-.L852:
+.L857:
 	and	w20, w27, 65535
-	b	.L851
-.L854:
+	b	.L856
+.L859:
 	sub	w2, w1, #1
 	ldrh	w3, [x24, w1, sxtw 1]
 	add	w20, w20, 1
 	add	w1, w1, 1
 	and	w20, w20, 65535
 	strh	w3, [x24, w2, sxtw 1]
-	b	.L853
+	b	.L858
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -5925,33 +5980,33 @@ update_vpc_list:
 	ubfiz	x1, x20, 1, 16
 	ldr	x2, [x0, 80]
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L862
+	cbnz	w1, .L867
 	ldrh	w1, [x0, 234]
 	cmp	w1, w20
-	bne	.L863
+	bne	.L868
 	mov	w1, -1
 	strh	w1, [x0, 234]
-.L863:
+.L868:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 232]
 	cmp	w1, w20
-	bne	.L864
+	bne	.L869
 	mov	w1, -1
 	strh	w1, [x0, 232]
-.L864:
+.L869:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	cmp	w1, w20
-	bne	.L865
+	bne	.L870
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L866:
+.L871:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w1, w20
 	add	x0, x21, 2576
 	bl	List_remove_node
 	ldrh	w0, [x21, 2592]
-	cbnz	w0, .L868
+	cbnz	w0, .L873
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5959,7 +6014,7 @@ update_vpc_list:
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L868:
+.L873:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2592]
 	sub	w0, w0, #1
@@ -5973,7 +6028,7 @@ update_vpc_list:
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L872
+	ble	.L877
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5981,30 +6036,30 @@ update_vpc_list:
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L872:
+.L877:
 	mov	w0, 1
-	b	.L861
-.L865:
+	b	.L866
+.L870:
 	ldrh	w1, [x0, 32]
 	cmp	w1, w20
-	beq	.L871
+	beq	.L876
 	ldrh	w1, [x0, 88]
 	cmp	w1, w20
-	beq	.L871
+	beq	.L876
 	ldrh	w0, [x0, 136]
 	cmp	w0, w20
-	bne	.L866
-.L871:
+	bne	.L871
+.L876:
 	mov	w0, 0
-.L861:
+.L866:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L862:
+.L867:
 	mov	w0, w20
 	bl	List_update_data_list
-	b	.L871
+	b	.L876
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
 	.global	decrement_vpc_count
@@ -6018,12 +6073,12 @@ decrement_vpc_count:
 	mov	w0, 65535
 	adrp	x19, .LANCHOR0
 	cmp	w20, w0
-	beq	.L875
+	beq	.L880
 	add	x22, x19, :lo12:.LANCHOR0
 	ubfiz	x21, x20, 1, 16
 	ldr	x1, [x22, 80]
 	ldrh	w0, [x1, x21]
-	cbnz	w0, .L876
+	cbnz	w0, .L881
 	mov	w2, 0
 	mov	w1, w20
 	adrp	x0, .LC103
@@ -6031,16 +6086,16 @@ decrement_vpc_count:
 	bl	sftl_printk
 	ldr	x0, [x22, 80]
 	ldrh	w0, [x0, x21]
-	cbz	w0, .L877
-.L882:
+	cbz	w0, .L882
+.L887:
 	mov	w21, 0
-.L874:
+.L879:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L877:
+.L882:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2842
@@ -6048,21 +6103,21 @@ decrement_vpc_count:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L882
-.L876:
+	b	.L887
+.L881:
 	sub	w0, w0, #1
 	strh	w0, [x1, x21]
-.L875:
+.L880:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x19, 3714]
 	cmp	w0, w1
-	bne	.L879
+	bne	.L884
 	strh	w20, [x19, 3714]
-	b	.L882
-.L879:
+	b	.L887
+.L884:
 	cmp	w20, w0
-	beq	.L882
+	beq	.L887
 	bl	update_vpc_list
 	cmp	w0, 0
 	ldr	x1, [x19, 2568]
@@ -6077,9 +6132,9 @@ decrement_vpc_count:
 	ldr	x1, [x19, 80]
 	and	x2, x0, 65535
 	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L874
+	cbnz	w1, .L879
 	cmp	w20, w0, uxth
-	beq	.L874
+	beq	.L879
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2858
@@ -6087,34 +6142,39 @@ decrement_vpc_count:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L874
+	b	.L879
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
 	.global	FtlSuperblockPowerLostFix
 	.type	FtlSuperblockPowerLostFix, %function
 FtlSuperblockPowerLostFix:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	mov	w2, 61589
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
-	mov	w0, -1
 	stp	x21, x22, [sp, 32]
-	str	w0, [x29, 88]
 	adrp	x21, .LANCHOR0
+	stp	x23, x24, [sp, 48]
+	adrp	x23, __stack_chk_guard
+	add	x0, x23, :lo12:__stack_chk_guard
+	ldr	x1, [x0]
+	str	x1, [x29, 104]
+	mov	x1,0
+	mov	w0, -1
+	str	w0, [x29, 96]
 	add	x0, x21, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
 	mov	x20, x0
-	ldr	x23, [x0, 3528]
+	ldr	x24, [x0, 3528]
 	ldr	x1, [x0, 3464]
-	stp	x1, x23, [x29, 72]
+	stp	x1, x24, [x29, 80]
 	mov	w1, -3
-	str	w1, [x23, 8]
+	str	w1, [x24, 8]
 	mov	w1, -2
-	str	w1, [x23, 12]
+	str	w1, [x24, 12]
 	ldrh	w1, [x19]
-	strh	w1, [x23, 2]
-	strh	wzr, [x23]
+	strh	w1, [x24, 2]
+	strh	wzr, [x24]
 	ldr	x1, [x0, 3464]
 	str	w2, [x1]
 	mov	w2, 22136
@@ -6124,13 +6184,14 @@ FtlSuperblockPowerLostFix:
 	ldrh	w22, [x19, 4]
 	and	w22, w22, 1
 	add	w22, w22, 6
-.L889:
+.L894:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L885
-.L886:
+	cbnz	w0, .L890
+.L891:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x19]
 	ldrh	w3, [x19, 4]
+	add	x23, x23, :lo12:__stack_chk_guard
 	ldr	x2, [x21, 80]
 	lsl	x0, x0, 1
 	ldrh	w1, [x2, x0]
@@ -6140,33 +6201,39 @@ FtlSuperblockPowerLostFix:
 	ldrh	w0, [x21, 314]
 	strh	w0, [x19, 2]
 	strh	wzr, [x19, 4]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 96
-	ret
-.L885:
+	ldr	x1, [x29, 104]
+	ldr	x0, [x23]
+	eor	x0, x1, x0
+	cbz	x0, .L895
+	bl	__stack_chk_fail
+.L890:
 	mov	x0, x19
 	bl	get_new_active_ppa
-	str	w0, [x29, 68]
+	str	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L886
+	beq	.L891
 	ldr	w0, [x20, 2672]
 	mov	w3, 0
-	str	w0, [x23, 4]
+	str	w0, [x24, 4]
 	mov	w2, 0
 	add	w0, w0, 1
 	mov	w1, 1
 	cmn	w0, #1
 	csel	w0, w0, wzr, ne
 	str	w0, [x20, 2672]
-	add	x0, x29, 64
+	add	x0, x29, 72
 	bl	FlashProgPages
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	subs	w22, w22, #1
-	bne	.L889
-	b	.L886
+	bne	.L894
+	b	.L891
+.L895:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 112
+	ret
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlMakeBbt
@@ -6190,47 +6257,47 @@ FtlMakeBbt:
 	add	x25, x0, 380
 	mov	x19, x0
 	add	x20, x0, 3728
-.L898:
+.L904:
 	ldrh	w0, [x19, 266]
 	cmp	w24, w0
-	bcc	.L904
+	bcc	.L910
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-.L905:
+.L911:
 	ldrh	w0, [x20, 326]
 	cmp	w0, w19
-	bhi	.L906
+	bhi	.L912
 	add	x20, x20, 368
 	ldrh	w19, [x20, 12]
 	mov	w22, 65535
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L907:
+.L913:
 	ldrh	w0, [x20, 12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L911
+	ble	.L917
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L908
+	beq	.L914
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L909
+	cbz	w0, .L915
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-.L908:
+.L914:
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-	b	.L907
-.L904:
+	b	.L913
+.L910:
 	ldr	x0, [x19, 3464]
 	mov	w2, 65535
 	ldr	x27, [x19, 3528]
 	ldrh	w1, [x25]
 	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	beq	.L899
+	beq	.L905
 	ldrh	w23, [x19, 310]
 	mov	w2, 1
 	madd	w23, w23, w24, w1
@@ -6245,29 +6312,29 @@ FtlMakeBbt:
 	add	w2, w2, 7
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-.L900:
+.L906:
 	mov	w0, w23
 	add	w24, w24, 1
 	bl	FtlBbmMapBadBlock
 	add	x26, x26, 8
 	add	x25, x25, 2
-	b	.L898
-.L899:
+	b	.L904
+.L905:
 	mov	w1, w24
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20, 8]
 	ldr	x1, [x26]
 	bl	FtlBbt2Bitmap
 	ldrh	w22, [x19, 310]
-.L902:
+.L908:
 	sub	w22, w22, #1
 	and	w22, w22, 65535
-.L901:
+.L907:
 	ldrh	w0, [x19, 310]
 	madd	w0, w24, w0, w22
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L902
+	beq	.L908
 	ldr	x0, [x19, 3528]
 	mov	w2, 16
 	strh	w22, [x25]
@@ -6302,25 +6369,25 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L900
+	bne	.L906
 	mov	w0, w23
 	bl	FtlBbmMapBadBlock
-	b	.L901
-.L906:
+	b	.L907
+.L912:
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	and	w19, w19, 65535
-	b	.L905
-.L909:
+	b	.L911
+.L915:
 	ldrh	w0, [x20]
 	cmp	w0, w22
-	bne	.L910
+	bne	.L916
 	strh	w19, [x20]
-	b	.L908
-.L910:
+	b	.L914
+.L916:
 	strh	w19, [x20, 4]
-.L911:
+.L917:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, 2
 	ldr	x1, [x21, 3416]
@@ -6377,18 +6444,18 @@ js_hash:
 	mov	w0, 42982
 	mov	x3, 0
 	movk	w0, 0x47c6, lsl 16
-.L920:
+.L926:
 	cmp	w1, w3
-	bhi	.L921
+	bhi	.L927
 	ret
-.L921:
+.L927:
 	lsr	w2, w0, 2
 	ldrb	w5, [x4, x3]
 	add	w2, w2, w0, lsl 5
 	add	x3, x3, 1
 	add	w2, w2, w5
 	eor	w0, w0, w2
-	b	.L920
+	b	.L926
 	.size	js_hash, .-js_hash
 	.align	2
 	.global	Ftl_write_map_blk_to_last_page
@@ -6404,9 +6471,9 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x20, [x0, 16]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	bne	.L923
+	bne	.L929
 	ldrh	w0, [x19, 8]
-	cbz	w0, .L924
+	cbz	w0, .L930
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6414,7 +6481,7 @@ Ftl_write_map_blk_to_last_page:
 	add	x1, x1, 408
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L924:
+.L930:
 	ldrh	w0, [x19, 8]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
@@ -6425,14 +6492,14 @@ Ftl_write_map_blk_to_last_page:
 	strh	wzr, [x19]
 	add	w0, w0, 1
 	str	w0, [x19, 48]
-.L925:
+.L931:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L923:
+.L929:
 	ubfiz	x0, x0, 1, 16
 	adrp	x21, .LANCHOR0
 	ldrh	w1, [x19, 2]
@@ -6459,10 +6526,10 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w0, 0
-.L926:
+.L932:
 	ldrh	w2, [x19, 6]
 	cmp	w2, w0
-	bhi	.L928
+	bhi	.L934
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x6, x21, 3728
 	ldrh	w1, [x21, 322]
@@ -6479,12 +6546,12 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19, 2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-	b	.L925
-.L928:
+	b	.L931
+.L934:
 	ubfiz	x2, x0, 2, 16
 	ldr	w3, [x24, x2]
 	cmp	w23, w3, lsr 10
-	bne	.L927
+	bne	.L933
 	add	w1, w1, 1
 	ldr	x4, [x20, 3464]
 	and	w1, w1, 65535
@@ -6494,10 +6561,10 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x2, [x20, 3464]
 	add	x2, x2, x3
 	str	w4, [x2, 4]
-.L927:
+.L933:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L926
+	b	.L932
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
 	.global	FtlMapWritePage
@@ -6520,7 +6587,7 @@ FtlMapWritePage:
 	mov	x25, x24
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x20, x22, 3728
-.L934:
+.L940:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2652]
 	add	w1, w1, 1
@@ -6529,35 +6596,35 @@ FtlMapWritePage:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	bge	.L935
+	bge	.L941
 	ldrh	w1, [x19]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L936
-.L935:
+	bne	.L942
+.L941:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L936:
+.L942:
 	ldrh	w1, [x19]
 	ldr	x0, [x19, 16]
 	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L937
+	cbnz	w0, .L943
 	adrp	x0, .LC8
 	mov	w2, 700
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L937:
+.L943:
 	ldrh	w1, [x19]
 	ldrh	w0, [x19, 10]
 	cmp	w1, w0
-	bcc	.L938
+	bcc	.L944
 	adrp	x0, .LC8
 	mov	w2, 701
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L938:
+.L944:
 	ldrh	w1, [x19]
 	mov	w2, 16
 	ldr	x0, [x19, 16]
@@ -6592,7 +6659,7 @@ FtlMapWritePage:
 	strh	w0, [x19, 2]
 	ldr	w1, [x20]
 	cmn	w1, #1
-	bne	.L939
+	bne	.L945
 	ldr	w1, [x20, 4]
 	adrp	x0, .LC104
 	add	x0, x0, :lo12:.LC104
@@ -6601,37 +6668,37 @@ FtlMapWritePage:
 	bl	sftl_printk
 	ldrh	w0, [x19, 2]
 	cmp	w0, 2
-	bhi	.L940
+	bhi	.L946
 	ldrh	w0, [x22, 316]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2]
-.L940:
+.L946:
 	cmp	w21, 3
-	bls	.L941
+	bls	.L947
 	add	x25, x25, :lo12:.LANCHOR0
 	adrp	x0, .LC105
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC105
 	ldr	w1, [x25, 3732]
 	bl	sftl_printk
-.L942:
-	b	.L942
-.L941:
+.L948:
+	b	.L948
+.L947:
 	ldr	w0, [x19, 52]
-	cbz	w0, .L934
-.L956:
-	b	.L956
-.L939:
+	cbz	w0, .L940
+.L962:
+	b	.L962
+.L945:
 	cmp	w0, 1
-	beq	.L945
+	beq	.L951
 	cmp	w1, 256
-	beq	.L945
+	beq	.L951
 	ldr	w0, [x19, 56]
-	cbz	w0, .L946
-.L945:
+	cbz	w0, .L952
+.L951:
 	str	wzr, [x19, 56]
-	b	.L934
-.L946:
+	b	.L940
+.L952:
 	ldr	x0, [x19, 40]
 	ldr	w1, [x20, 4]
 	str	w1, [x0, w26, uxtw 2]
@@ -6660,7 +6727,7 @@ load_l2p_region:
 	str	x25, [sp, 64]
 	ldrh	w0, [x0, 348]
 	cmp	w0, w22
-	bcs	.L959
+	bcs	.L965
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6668,12 +6735,12 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L959:
+.L965:
 	add	x20, x21, :lo12:.LANCHOR0
 	ubfiz	x0, x22, 2, 16
 	ldr	x1, [x20, 3616]
 	ldr	w24, [x1, x0]
-	cbnz	w24, .L960
+	cbnz	w24, .L966
 	ldr	x0, [x20, 2616]
 	lsl	x19, x19, 4
 	ldrh	w2, [x20, 322]
@@ -6686,7 +6753,7 @@ load_l2p_region:
 	ldr	x0, [x20, 2616]
 	add	x19, x0, x19
 	str	wzr, [x19, 4]
-.L961:
+.L967:
 	mov	w0, 0
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -6694,7 +6761,7 @@ load_l2p_region:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L960:
+.L966:
 	ldr	x0, [x20, 2616]
 	lsl	x19, x19, 4
 	add	x23, x20, 3728
@@ -6711,7 +6778,7 @@ load_l2p_region:
 	ldr	x25, [x20, 3744]
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L962
+	beq	.L968
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC106
@@ -6729,10 +6796,10 @@ load_l2p_region:
 	mov	w2, 4
 	add	x0, x0, :lo12:.LC107
 	bl	rknand_print_hex
-.L963:
+.L969:
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L964
+	beq	.L970
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6740,18 +6807,18 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L964:
+.L970:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldr	x0, [x21, 2616]
 	add	x0, x0, x19
 	str	wzr, [x0, 4]
 	ldr	x0, [x21, 2616]
 	strh	w22, [x0, x19]
-	b	.L961
-.L962:
+	b	.L967
+.L968:
 	ldr	w0, [x20, 3728]
 	cmp	w0, 256
-	bne	.L963
+	bne	.L969
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC108
@@ -6763,7 +6830,7 @@ load_l2p_region:
 	ldr	x2, [x0, 8]
 	add	x0, x20, 3648
 	bl	FtlMapWritePage
-	b	.L963
+	b	.L969
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
 	.global	ftl_map_blk_gc
@@ -6785,12 +6852,12 @@ ftl_map_blk_gc:
 	ldrh	w2, [x19, 8]
 	sub	w1, w1, #5
 	cmp	w2, w1
-	blt	.L967
+	blt	.L973
 	ubfiz	x0, x0, 1, 16
 	ldrh	w26, [x20, x0]
-	cbz	w26, .L967
+	cbz	w26, .L973
 	ldr	w1, [x19, 52]
-	cbnz	w1, .L967
+	cbnz	w1, .L973
 	mov	w1, 1
 	str	w1, [x19, 52]
 	strh	wzr, [x20, x0]
@@ -6801,33 +6868,33 @@ ftl_map_blk_gc:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 316]
 	cmp	w1, w0
-	bcc	.L968
+	bcc	.L974
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L968:
+.L974:
 	add	x27, x22, :lo12:.LANCHOR0
 	adrp	x23, .LANCHOR1
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x21, x27, 3728
 	add	x23, x23, 472
 	mov	w20, 0
-.L969:
+.L975:
 	ldrh	w0, [x19, 6]
 	cmp	w0, w20
-	bhi	.L976
+	bhi	.L982
 	mov	w1, 1
 	mov	w0, w26
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19, 52]
-.L967:
+.L973:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x22, 316]
 	cmp	w1, w0
-	bcc	.L977
+	bcc	.L983
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L977:
+.L983:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -6836,12 +6903,12 @@ ftl_map_blk_gc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L976:
+.L982:
 	ubfiz	x0, x20, 2, 16
 	add	x28, x25, x0
 	ldr	w1, [x25, x0]
 	cmp	w26, w1, lsr 10
-	bne	.L970
+	bne	.L976
 	ldr	x1, [x27, 3472]
 	mov	w2, 1
 	ldr	x24, [x27, 3528]
@@ -6853,36 +6920,36 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	beq	.L971
+	beq	.L977
 	adrp	x0, .LC8
 	mov	w2, 611
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L971:
+.L977:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L972
-.L974:
+	bne	.L978
+.L980:
 	str	wzr, [x28]
-.L973:
-	b	.L973
-.L972:
+.L979:
+	b	.L979
+.L978:
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	bne	.L974
+	bne	.L980
 	ldrh	w1, [x24]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L974
+	bne	.L980
 	ldr	x2, [x21, 8]
 	mov	w1, w20
 	mov	x0, x19
 	bl	FtlMapWritePage
-.L970:
+.L976:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L969
+	b	.L975
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
 	.global	flush_l2p_region
@@ -6928,7 +6995,7 @@ log2phys:
 	ldrh	w24, [x0, 320]
 	ldr	w0, [x0, 2632]
 	cmp	w25, w0
-	bcc	.L986
+	bcc	.L992
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6936,21 +7003,21 @@ log2phys:
 	add	x1, x1, 488
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L986:
+.L992:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w25, w1
-	bcs	.L987
+	bcs	.L993
 	add	w24, w24, 7
 	ldrh	w1, [x0, 350]
 	ldr	x2, [x0, 2616]
 	mov	x0, 0
 	lsr	w21, w25, w24
 	and	w21, w21, 65535
-.L988:
+.L994:
 	and	x19, x0, 65535
 	cmp	w19, w1
-	bcc	.L993
+	bcc	.L999
 	bl	select_l2p_ram_region
 	and	x19, x0, 65535
 	add	x2, x20, :lo12:.LANCHOR0
@@ -6961,58 +7028,58 @@ log2phys:
 	ldrh	w2, [x2, x1]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L994
+	beq	.L1000
 	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L994
+	tbz	w1, #31, .L1000
 	bl	flush_l2p_region
-.L994:
+.L1000:
 	mov	w1, w26
 	mov	w0, w21
 	bl	load_l2p_region
-	b	.L990
-.L987:
+	b	.L996
+.L993:
 	mov	w0, -1
-	cbnz	w23, .L985
+	cbnz	w23, .L991
 	str	w0, [x22]
-.L985:
+.L991:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L993:
+.L999:
 	add	x0, x0, 1
 	add	x3, x2, x0, lsl 4
 	ldrh	w3, [x3, -16]
 	cmp	w3, w21
-	bne	.L988
-.L990:
+	bne	.L994
+.L996:
 	mov	x0, 1
 	lsl	x0, x0, x24
 	sub	w0, w0, #1
 	and	w0, w0, w25
 	and	x0, x0, 65535
-	cbnz	w23, .L991
+	cbnz	w23, .L997
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	x1, [x1, 2616]
 	add	x1, x1, x19, lsl 4
 	ldr	x1, [x1, 8]
 	ldr	w0, [x1, x0, lsl 2]
 	str	w0, [x22]
-.L992:
+.L998:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	x0, [x20, 2616]
 	add	x19, x0, x19, lsl 4
 	ldr	w0, [x19, 4]
 	cmn	w0, #1
-	beq	.L996
+	beq	.L1002
 	add	w0, w0, 1
 	str	w0, [x19, 4]
-.L996:
+.L1002:
 	mov	w0, 0
-	b	.L985
-.L991:
+	b	.L991
+.L997:
 	add	x2, x20, :lo12:.LANCHOR0
 	lsl	x1, x19, 4
 	ldr	w4, [x22]
@@ -7026,7 +7093,7 @@ log2phys:
 	ldr	w1, [x0, 4]
 	orr	w1, w1, -2147483648
 	str	w1, [x0, 4]
-	b	.L992
+	b	.L998
 	.size	log2phys, .-log2phys
 	.align	2
 	.global	FtlWriteDump_data
@@ -7039,77 +7106,82 @@ FtlWriteDump_data:
 	add	x20, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	str	x25, [sp, 64]
+	adrp	x22, __stack_chk_guard
+	stp	x25, x26, [sp, 64]
+	add	x0, x22, :lo12:__stack_chk_guard
 	ldrh	w2, [x20, 36]
-	cbz	w2, .L1000
+	ldr	x1, [x0]
+	str	x1, [x29, 120]
+	mov	x1,0
+	cbz	w2, .L1006
 	ldrb	w1, [x20, 40]
-	cbnz	w1, .L1000
+	cbnz	w1, .L1006
 	ldrb	w1, [x20, 39]
 	ldrh	w3, [x20, 314]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L1000
+	beq	.L1006
 	ldrb	w0, [x20, 42]
-	cbnz	w0, .L999
-	ldr	w22, [x20, 2632]
-	add	x1, x29, 92
-	ldrh	w24, [x20, 244]
+	cbnz	w0, .L1005
+	ldr	w23, [x20, 2632]
+	add	x1, x29, 84
+	ldrh	w25, [x20, 244]
 	mov	w2, 0
-	sub	w22, w22, #1
-	mov	w0, w22
+	sub	w23, w23, #1
+	mov	w0, w23
 	bl	log2phys
 	ldr	x21, [x20, 3528]
-	ldr	w0, [x29, 92]
+	ldr	w0, [x29, 84]
 	ldr	x1, [x20, 3464]
-	str	w0, [x29, 100]
+	str	w0, [x29, 92]
 	cmn	w0, #1
-	stp	x1, x21, [x29, 104]
-	str	w22, [x29, 120]
+	stp	x1, x21, [x29, 96]
+	str	w23, [x29, 112]
 	str	wzr, [x21, 4]
-	beq	.L1002
+	beq	.L1008
 	mov	w2, 0
 	mov	w1, 1
-	add	x0, x29, 96
+	add	x0, x29, 88
 	bl	FlashReadPages
-.L1003:
-	add	x25, x19, :lo12:.LANCHOR0
-	lsl	w24, w24, 2
-	add	x20, x25, 32
+.L1009:
+	add	x26, x19, :lo12:.LANCHOR0
+	lsl	w25, w25, 2
+	add	x20, x26, 32
 	mov	w0, -3947
-	mov	w23, 0
+	mov	w24, 0
 	strh	w0, [x21]
-.L1004:
-	cmp	w24, w23
-	bne	.L1008
-.L1005:
+.L1010:
+	cmp	w25, w24
+	bne	.L1014
+.L1011:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x19, 42]
-.L999:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
-	ldp	x29, x30, [sp], 128
-	ret
-.L1002:
+.L1005:
+	add	x22, x22, :lo12:__stack_chk_guard
+	ldr	x1, [x29, 120]
+	ldr	x0, [x22]
+	eor	x0, x1, x0
+	cbz	x0, .L1016
+	bl	__stack_chk_fail
+.L1008:
 	ldrh	w2, [x20, 322]
 	mov	w1, 255
 	ldr	x0, [x20, 3464]
 	bl	ftl_memset
-	b	.L1003
-.L1008:
+	b	.L1009
+.L1014:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1005
-	ldr	w0, [x29, 100]
-	add	w23, w23, 1
-	stp	w22, w0, [x21, 8]
+	cbz	w0, .L1011
+	ldr	w0, [x29, 92]
+	add	w24, w24, 1
+	stp	w23, w0, [x21, 8]
 	ldrh	w0, [x20]
 	strh	w0, [x21, 2]
 	mov	x0, x20
 	bl	get_new_active_ppa
-	str	w0, [x29, 100]
-	ldr	w0, [x25, 2672]
+	str	w0, [x29, 92]
+	ldr	w0, [x26, 2672]
 	mov	w3, 0
 	str	w0, [x21, 4]
 	mov	w2, 0
@@ -7117,16 +7189,23 @@ FtlWriteDump_data:
 	mov	w1, 1
 	cmn	w0, #1
 	csel	w0, w0, wzr, ne
-	str	w0, [x25, 2672]
-	add	x0, x29, 96
+	str	w0, [x26, 2672]
+	add	x0, x29, 88
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L1004
-.L1000:
+	b	.L1010
+.L1006:
 	add	x19, x19, :lo12:.LANCHOR0
 	strb	wzr, [x19, 42]
-	b	.L999
+	b	.L1005
+.L1016:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 128
+	ret
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
 	.global	FtlReUsePrevPpa
@@ -7147,9 +7226,9 @@ FtlReUsePrevPpa:
 	ubfiz	x20, x0, 1, 16
 	ldr	x3, [x2, 80]
 	ldrh	w1, [x3, x20]
-	cbnz	w1, .L1018
+	cbnz	w1, .L1025
 	ldr	x19, [x2, 2600]
-	cbz	x19, .L1019
+	cbz	x19, .L1026
 	ldrh	w3, [x2, 236]
 	mov	x4, -6148914691236517206
 	ldr	x2, [x2, 2568]
@@ -7160,17 +7239,17 @@ FtlReUsePrevPpa:
 	mul	x19, x19, x4
 	mov	w4, 6
 	and	w19, w19, 65535
-.L1020:
+.L1027:
 	cmp	w1, w3
-	beq	.L1019
+	beq	.L1026
 	cmp	w19, w0
-	bne	.L1021
+	bne	.L1028
 	add	x23, x22, :lo12:.LANCHOR0
 	mov	w1, w19
 	add	x0, x23, 2600
 	bl	List_remove_node
 	ldrh	w0, [x23, 236]
-	cbnz	w0, .L1022
+	cbnz	w0, .L1029
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7178,7 +7257,7 @@ FtlReUsePrevPpa:
 	add	x1, x1, 504
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1022:
+.L1029:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 236]
 	sub	w0, w0, #1
@@ -7189,7 +7268,7 @@ FtlReUsePrevPpa:
 	ldrh	w0, [x1, x20]
 	add	w0, w0, 1
 	strh	w0, [x1, x20]
-.L1019:
+.L1026:
 	add	x1, x29, 76
 	mov	w2, 1
 	mov	w0, w21
@@ -7199,80 +7278,86 @@ FtlReUsePrevPpa:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1021:
+.L1028:
 	umull	x19, w19, w4
 	ldrh	w19, [x2, x19]
 	cmp	w19, w5
-	beq	.L1019
+	beq	.L1026
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L1020
-.L1018:
+	b	.L1027
+.L1025:
 	add	w1, w1, 1
 	strh	w1, [x3, x20]
-	b	.L1019
+	b	.L1026
 	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
 	.global	FtlRecoverySuperblock
 	.type	FtlRecoverySuperblock, %function
 FtlRecoverySuperblock:
-	stp	x29, x30, [sp, -160]!
-	mov	w1, 65535
+	stp	x29, x30, [sp, -192]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x20, x0
 	stp	x21, x22, [sp, 32]
+	adrp	x0, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
+	add	x1, x0, :lo12:__stack_chk_guard
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-	ldrh	w0, [x0]
-	cmp	w0, w1
-	beq	.L1149
+	str	x0, [x29, 120]
+	ldr	x2, [x1]
+	str	x2, [x29, 184]
+	mov	x2,0
+	mov	w1, 65535
+	ldrh	w2, [x20]
+	cmp	w2, w1
+	beq	.L1037
 	ldrb	w0, [x20, 6]
 	adrp	x19, .LANCHOR0
-	str	w0, [x29, 140]
+	str	w0, [x29, 156]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w26, [x20, 2]
 	ldrh	w0, [x0, 314]
 	cmp	w0, w26
-	bne	.L1031
+	bne	.L1038
 	strh	wzr, [x20, 4]
-.L1156:
+.L1164:
 	strb	wzr, [x20, 6]
-.L1149:
-	ldp	x19, x20, [sp, 16]
+.L1037:
+	ldr	x1, [x29, 120]
 	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 160
-	ret
-.L1031:
+	add	x1, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 184]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L1106
+	bl	__stack_chk_fail
+.L1038:
 	ldrh	w0, [x20, 16]
 	mov	w21, 0
-.L1032:
+.L1039:
 	cmp	w0, w1
-	beq	.L1033
+	beq	.L1040
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	mov	w23, w0
 	cmn	w0, #1
-	beq	.L1034
+	beq	.L1041
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x28, x20, 16
-	mov	x3, x28
+	mov	x4, x28
 	mov	w22, 0
 	mov	w10, 65535
 	mov	w6, 4
-	ldrh	w1, [x0, 244]
+	ldrh	w3, [x0, 244]
 	ldrh	w8, [x0, 322]
-	add	x1, x1, 8
+	add	x3, x3, 8
 	ldrh	w9, [x0, 324]
-	add	x1, x20, x1, lsl 1
-.L1035:
-	cmp	x1, x3
-	bne	.L1039
+	add	x3, x20, x3, lsl 1
+.L1042:
+	cmp	x3, x4
+	bne	.L1046
 	add	x24, x19, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w1, w22
@@ -7285,42 +7370,42 @@ FtlRecoverySuperblock:
 	mov	w7, 65535
 	mov	x6, x4
 	mov	w3, 0
-.L1040:
+.L1047:
 	cmp	w22, w3
-	bne	.L1045
+	bne	.L1052
 	add	w22, w23, 1
 	ldr	w0, [x4, 4]
 	and	w22, w22, 65535
-.L1151:
+.L1159:
 	lsr	w0, w0, 10
 	bl	P2V_plane
 	and	w27, w0, 65535
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 314]
 	cmp	w0, w22
-	bne	.L1047
+	bne	.L1054
 	strh	w22, [x20, 2]
 	strb	wzr, [x20, 6]
 	strh	wzr, [x20, 4]
-.L1047:
-	ldr	w0, [x29, 140]
+.L1054:
+	ldr	w0, [x29, 156]
 	cmp	w22, w26
 	ccmp	w27, w0, 0, eq
-	bne	.L1048
-.L1157:
+	bne	.L1055
+.L1165:
 	mov	w2, w27
 	mov	w1, w22
 	mov	x0, x20
 	bl	ftl_sb_update_avl_pages
-	b	.L1149
-.L1033:
+	b	.L1037
+.L1040:
 	add	w21, w21, 1
 	and	w21, w21, 65535
 	add	x0, x20, x21, sxtw 1
 	ldrh	w0, [x0, 16]
-	b	.L1032
-.L1034:
-	cbz	w26, .L1036
+	b	.L1039
+.L1041:
+	cbz	w26, .L1043
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7328,11 +7413,11 @@ FtlRecoverySuperblock:
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1036:
-	ldr	w0, [x29, 140]
+.L1043:
+	ldr	w0, [x29, 156]
 	cmp	w0, 0
 	ccmp	w21, w0, 4, ne
-	beq	.L1037
+	beq	.L1044
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7340,102 +7425,102 @@ FtlRecoverySuperblock:
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1037:
+.L1044:
 	strh	wzr, [x20, 2]
-	b	.L1156
-.L1039:
-	ldrh	w2, [x3]
-	cmp	w2, w10
-	beq	.L1038
+	b	.L1164
+.L1046:
+	ldrh	w1, [x4]
+	cmp	w1, w10
+	beq	.L1045
 	ldr	x5, [x0, 3440]
 	ubfiz	x7, x22, 5, 16
-	orr	w2, w23, w2, lsl 10
+	orr	w1, w23, w1, lsl 10
 	add	x5, x5, x7
-	str	w2, [x5, 4]
-	mul	w2, w22, w8
-	ldr	x4, [x0, 3440]
+	str	w1, [x5, 4]
+	mul	w1, w22, w8
+	ldr	x2, [x0, 3440]
 	ldr	x5, [x0, 3264]
-	sdiv	w2, w2, w6
-	add	x4, x4, x7
-	add	x2, x5, x2, sxtw 2
-	str	x2, [x4, 8]
-	mul	w2, w22, w9
+	sdiv	w1, w1, w6
+	add	x2, x2, x7
+	add	x1, x5, x1, sxtw 2
+	str	x1, [x2, 8]
+	mul	w1, w22, w9
 	ldr	x5, [x0, 3272]
 	add	w22, w22, 1
 	and	w22, w22, 65535
-	sdiv	w2, w2, w6
-	add	x2, x5, x2, sxtw 2
-	str	x2, [x4, 16]
-.L1038:
-	add	x3, x3, 2
-	b	.L1035
+	sdiv	w1, w1, w6
+	add	x1, x5, x1, sxtw 2
+	str	x1, [x2, 16]
 .L1045:
+	add	x4, x4, 2
+	b	.L1042
+.L1052:
 	ldr	w0, [x6]
-	cbnz	w0, .L1041
+	cbnz	w0, .L1048
 	ldr	x8, [x6, 16]
 	ldr	w5, [x8, 4]
 	cmn	w5, #1
-	beq	.L1042
+	beq	.L1049
 	ldr	w1, [x24, 2672]
 	mov	w0, w5
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1042
+	cbz	w0, .L1049
 	add	w5, w5, 1
 	str	w5, [x24, 2672]
-.L1042:
+.L1049:
 	ldr	w0, [x8]
 	cmn	w0, #1
-	bne	.L1044
+	bne	.L1051
 	ubfiz	x3, x3, 5, 16
 	and	w22, w23, 65535
 	add	x3, x4, x3
 	ldr	w0, [x3, 4]
-	b	.L1151
-.L1041:
+	b	.L1159
+.L1048:
 	mov	w7, w9
-.L1044:
+.L1051:
 	add	w3, w3, 1
 	add	x6, x6, 32
 	and	w3, w3, 65535
-	b	.L1040
-.L1048:
+	b	.L1047
+.L1055:
 	mov	w0, 65535
 	cmp	w7, w0
-	bne	.L1049
+	bne	.L1056
 	ldrb	w0, [x20, 8]
-	cbnz	w0, .L1050
-.L1049:
+	cbnz	w0, .L1057
+.L1056:
 	add	x0, x19, :lo12:.LANCHOR0
 	and	w3, w23, 65535
 	ldr	w1, [x0, 3724]
 	cmn	w1, #1
-	bne	.L1051
+	bne	.L1058
 	str	w21, [x0, 3724]
-.L1051:
+.L1058:
 	add	w0, w26, 7
 	cmp	w0, w23, uxth
-	bge	.L1099
+	bge	.L1107
 	sub	w24, w3, #7
 	and	w24, w24, 65535
-.L1052:
+.L1059:
 	add	x25, x19, :lo12:.LANCHOR0
 	mov	w4, 65535
-.L1053:
+.L1060:
 	cmp	w24, w3
-	bhi	.L1060
+	bhi	.L1067
 	ldrh	w0, [x25, 244]
 	mov	x1, x28
 	mov	w23, 0
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-	b	.L1061
-.L1099:
+	b	.L1068
+.L1107:
 	mov	w24, w26
-	b	.L1052
-.L1055:
+	b	.L1059
+.L1062:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1054
+	beq	.L1061
 	ldr	x5, [x25, 3440]
 	ubfiz	x6, x23, 5, 16
 	add	w23, w23, 1
@@ -7443,102 +7528,102 @@ FtlRecoverySuperblock:
 	add	x5, x5, x6
 	and	w23, w23, 65535
 	str	w2, [x5, 4]
-.L1054:
-	add	x1, x1, 2
 .L1061:
+	add	x1, x1, 2
+.L1068:
 	cmp	x0, x1
-	bne	.L1055
+	bne	.L1062
 	ldr	x0, [x25, 3440]
 	mov	w1, w23
-	str	w4, [x29, 120]
+	str	w4, [x29, 136]
 	mov	w2, 0
-	str	w3, [x29, 128]
+	str	w3, [x29, 144]
 	ubfiz	x23, x23, 5, 16
 	add	x23, x23, 16
 	bl	FlashReadPages
 	ldr	x1, [x25, 3440]
-	ldr	w4, [x29, 120]
-	ldr	w3, [x29, 128]
+	ldr	w4, [x29, 136]
+	ldr	w3, [x29, 144]
 	add	x0, x1, 16
 	add	x23, x1, x23
-.L1056:
+.L1063:
 	cmp	x23, x0
-	bne	.L1059
+	bne	.L1066
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L1053
-.L1059:
+	b	.L1060
+.L1066:
 	ldr	w1, [x0, -16]
-	cbnz	w1, .L1050
+	cbnz	w1, .L1057
 	ldr	x1, [x0]
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1058
+	beq	.L1065
 	ldr	w1, [x1, 4]
 	cmn	w1, #1
-	beq	.L1058
+	beq	.L1065
 	str	w1, [x25, 3724]
-.L1058:
+.L1065:
 	add	x0, x0, 32
-	b	.L1056
-.L1060:
+	b	.L1063
+.L1067:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	str	w1, [x0, 3724]
-.L1050:
+.L1057:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	mov	w24, w26
 	strh	w0, [x19, 3760]
 	add	x0, x19, 3768
-	str	x0, [x29, 104]
-.L1062:
+	str	x0, [x29, 112]
+.L1069:
 	ldrh	w0, [x19, 244]
 	mov	x1, x28
 	mov	w23, 0
 	mov	w4, 65535
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-.L1063:
+.L1070:
 	cmp	x0, x1
-	bne	.L1065
+	bne	.L1072
 	ldr	x0, [x19, 3440]
 	mov	w1, w23
 	mov	w2, 0
 	bl	FlashReadPages
 	ubfiz	x0, x23, 5, 16
-	str	x0, [x29, 112]
+	str	x0, [x29, 128]
 	adrp	x0, .LANCHOR1
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 520
 	mov	x23, 0
-	str	x0, [x29, 120]
-.L1066:
-	ldr	x0, [x29, 112]
+	str	x0, [x29, 136]
+.L1073:
+	ldr	x0, [x29, 128]
 	cmp	x0, x23
-	bne	.L1093
+	bne	.L1100
 	add	w24, w24, 1
 	ldrh	w0, [x19, 314]
 	and	w24, w24, 65535
 	cmp	w0, w24
-	bne	.L1062
+	bne	.L1069
 	ldrh	w1, [x19, 244]
 	mov	w0, 0
 	strh	w24, [x20, 2]
 	mov	w2, 65535
 	strh	wzr, [x20, 4]
-.L1094:
+.L1101:
 	cmp	w0, w1
-	beq	.L1149
+	beq	.L1037
 	ldrh	w3, [x28], 2
 	cmp	w3, w2
-	beq	.L1095
+	beq	.L1102
 	strb	w0, [x20, 6]
-	b	.L1149
-.L1065:
+	b	.L1037
+.L1072:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1064
+	beq	.L1071
 	ldr	x3, [x19, 3440]
 	ubfiz	x5, x23, 5, 16
 	add	w23, w23, 1
@@ -7546,486 +7631,511 @@ FtlRecoverySuperblock:
 	add	x3, x3, x5
 	and	w23, w23, 65535
 	str	w2, [x3, 4]
-.L1064:
+.L1071:
 	add	x1, x1, 2
-	b	.L1063
-.L1093:
+	b	.L1070
+.L1100:
 	ldr	x4, [x19, 3440]
 	add	x4, x4, x23
 	ldr	w5, [x4, 4]
-	str	w5, [x29, 156]
+	str	w5, [x29, 180]
 	lsr	w0, w5, 10
 	bl	P2V_plane
 	and	w0, w0, 65535
 	cmp	w24, w26
-	bcc	.L1067
-	ldr	w1, [x29, 140]
+	bcc	.L1074
+	ldr	w1, [x29, 156]
 	ccmp	w1, w0, 0, eq
-	bhi	.L1067
+	bhi	.L1074
 	cmp	w24, w22
 	ccmp	w27, w0, 0, eq
-	beq	.L1068
+	beq	.L1075
 	ldr	w0, [x4]
 	cmn	w0, #1
-	beq	.L1069
+	beq	.L1076
 	ldr	x3, [x4, 16]
 	mov	w0, 61589
 	ldrh	w1, [x3]
 	cmp	w1, w0
-	beq	.L1070
+	beq	.L1077
 	ldrh	w0, [x20]
-.L1153:
+.L1161:
 	bl	decrement_vpc_count
-	b	.L1067
-.L1070:
+	b	.L1074
+.L1077:
 	ldr	w21, [x3, 4]
 	cmn	w21, #1
-	beq	.L1071
+	beq	.L1078
 	ldr	w1, [x19, 2672]
 	mov	w0, w21
-	str	x3, [x29, 128]
+	str	x3, [x29, 144]
 	bl	ftl_cmp_data_ver
-	ldr	x3, [x29, 128]
-	cbz	w0, .L1071
+	ldr	x3, [x29, 144]
+	cbz	w0, .L1078
 	add	w0, w21, 1
 	str	w0, [x19, 2672]
-.L1071:
+.L1078:
 	ldrh	w1, [x3]
 	mov	w0, 61589
 	cmp	w1, w0
-	beq	.L1072
-	ldr	x1, [x29, 120]
+	beq	.L1079
+	ldr	x1, [x29, 136]
 	mov	w2, 1952
-	str	x3, [x29, 128]
+	str	x3, [x29, 144]
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	ldr	x3, [x29, 128]
-.L1072:
+	ldr	x3, [x29, 144]
+.L1079:
 	ldp	w25, w0, [x3, 8]
-	add	x1, x29, 152
-	str	w0, [x29, 148]
+	add	x1, x29, 176
+	str	w0, [x29, 172]
 	mov	w2, 0
 	mov	w0, w25
 	bl	log2phys
 	ldr	w1, [x19, 3724]
-	ldr	w3, [x29, 148]
+	ldr	w3, [x29, 172]
 	cmn	w1, #1
-	beq	.L1073
+	beq	.L1080
 	mov	w0, w21
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1073
+	cbz	w0, .L1080
 	cmn	w3, #1
-	beq	.L1074
+	beq	.L1081
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
 	add	x0, x0, x23
 	ldr	x4, [x0, 16]
 	str	w3, [x0, 4]
-	str	x4, [x29, 128]
+	str	x4, [x29, 144]
 	ldr	x0, [x19, 3440]
 	add	x0, x0, x23
 	bl	FlashReadPages
 	ldr	x0, [x19, 3440]
-	ldr	x4, [x29, 128]
+	ldr	x4, [x29, 144]
 	add	x3, x0, x23
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L1075
-.L1076:
-	mov	w0, -1
-	str	w0, [x29, 148]
+	bne	.L1082
 .L1083:
-	ldr	w4, [x29, 148]
+	mov	w0, -1
+	str	w0, [x29, 172]
+.L1090:
+	ldr	w4, [x29, 172]
 	cmn	w4, #1
-	beq	.L1067
-.L1098:
+	beq	.L1074
+.L1105:
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	and	w25, w0, 65535
 	ldrh	w0, [x19, 252]
 	mov	w3, w25
 	cmp	w0, w25
-	bhi	.L1089
-	ldr	x1, [x29, 120]
+	bhi	.L1096
+	ldr	x1, [x29, 136]
 	mov	w2, 2057
 	adrp	x0, .LC8
-	str	w25, [x29, 128]
+	str	w25, [x29, 144]
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	ldr	w3, [x29, 128]
-.L1089:
+	ldr	w3, [x29, 144]
+.L1096:
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x25, 1, 16
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1090
+	cbz	w0, .L1097
 	mov	w0, w3
-	b	.L1153
-.L1074:
-	ldp	w1, w0, [x29, 152]
+	b	.L1161
+.L1081:
+	ldp	w1, w0, [x29, 176]
 	cmp	w1, w0
-	bne	.L1067
+	bne	.L1074
 	mov	w2, 1
-	add	x1, x29, 148
+	add	x1, x29, 172
 	mov	w0, w25
 	bl	log2phys
-.L1067:
+.L1074:
 	add	x23, x23, 32
-	b	.L1066
-.L1075:
+	b	.L1073
+.L1082:
 	ldr	w0, [x4, 8]
 	cmp	w25, w0
-	bne	.L1076
+	bne	.L1083
 	ldr	w0, [x4, 4]
-	str	w0, [x29, 128]
-	str	x4, [x29, 96]
+	str	w0, [x29, 144]
+	str	x4, [x29, 104]
 	uxtw	x1, w0
 	ldr	w0, [x19, 3724]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1076
-	ldp	w0, w1, [x29, 152]
-	ldr	x4, [x29, 96]
+	cbz	w0, .L1083
+	ldp	w0, w1, [x29, 176]
+	ldr	x4, [x29, 104]
 	cmp	w0, w1
-	ldr	w1, [x29, 148]
-	bne	.L1078
-.L1152:
+	ldr	w1, [x29, 172]
+	bne	.L1085
+.L1160:
 	mov	w0, w25
 	bl	FtlReUsePrevPpa
-	b	.L1076
-.L1078:
+	b	.L1083
+.L1085:
 	cmp	w0, w1
-	beq	.L1076
+	beq	.L1083
 	cmn	w0, #1
-	beq	.L1079
+	beq	.L1086
 	ldr	x4, [x3, 16]
 	mov	w2, 0
 	str	w0, [x3, 4]
 	mov	w1, 1
-	str	x4, [x29, 96]
+	str	x4, [x29, 104]
 	ldr	x0, [x19, 3440]
 	add	x0, x0, x23
 	bl	FlashReadPages
-	ldr	x4, [x29, 96]
-.L1080:
+	ldr	x4, [x29, 104]
+.L1087:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3440]
 	ldr	w1, [x1, x23]
 	cmn	w1, #1
-	beq	.L1081
+	beq	.L1088
 	ldr	w3, [x4, 4]
 	ldr	w0, [x0, 3724]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1081
-	ldr	w0, [x29, 128]
+	cbz	w0, .L1088
+	ldr	w0, [x29, 144]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1076
-.L1081:
-	ldr	w1, [x29, 148]
-	b	.L1152
-.L1079:
+	cbz	w0, .L1083
+.L1088:
+	ldr	w1, [x29, 172]
+	b	.L1160
+.L1086:
 	str	w0, [x3]
-	b	.L1080
-.L1073:
-	ldp	w1, w0, [x29, 152]
+	b	.L1087
+.L1080:
+	ldp	w1, w0, [x29, 176]
 	cmp	w1, w0
-	beq	.L1083
+	beq	.L1090
 	cmn	w3, #1
-	beq	.L1085
+	beq	.L1092
 	ldr	w0, [x19, 260]
 	cmp	w0, w3, lsr 10
-	bhi	.L1085
+	bhi	.L1092
 	adrp	x0, .LC109
 	mov	w1, w3
 	add	x0, x0, :lo12:.LC109
-.L1155:
+.L1163:
 	bl	sftl_printk
-	b	.L1067
-.L1085:
+	b	.L1074
+.L1092:
 	mov	w2, 1
-	add	x1, x29, 156
+	add	x1, x29, 180
 	mov	w0, w25
 	bl	log2phys
-	ldr	w4, [x29, 152]
+	ldr	w4, [x29, 176]
 	cmn	w4, #1
-	beq	.L1083
-	ldr	w0, [x29, 148]
+	beq	.L1090
+	ldr	w0, [x29, 172]
 	cmp	w4, w0
-	beq	.L1098
+	beq	.L1105
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x19, 32]
 	and	w0, w0, 65535
 	cmp	w1, w0
-	beq	.L1088
+	beq	.L1095
 	ldrh	w1, [x19, 88]
 	cmp	w1, w0
-	beq	.L1088
+	beq	.L1095
 	ldrh	w1, [x19, 136]
 	cmp	w1, w0
-	bne	.L1083
-.L1088:
+	bne	.L1090
+.L1095:
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
 	str	w4, [x0, 4]
 	ldr	x3, [x0, 16]
 	ldr	x0, [x19, 3440]
-	str	x3, [x29, 128]
+	str	x3, [x29, 144]
 	bl	FlashReadPages
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L1083
-	ldr	x3, [x29, 128]
+	beq	.L1090
+	ldr	x3, [x29, 144]
 	mov	w0, w21
 	ldr	w1, [x3, 4]
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1083
+	cbnz	w0, .L1090
 	mov	w2, 1
-	add	x1, x29, 152
+	add	x1, x29, 176
 	mov	w0, w25
 	bl	log2phys
-	b	.L1083
-.L1090:
+	b	.L1090
+.L1097:
 	adrp	x0, .LC110
 	mov	w1, w25
 	add	x0, x0, :lo12:.LC110
-	b	.L1155
-.L1069:
+	b	.L1163
+.L1076:
 	ldr	w0, [x19, 3764]
 	cmp	w0, 31
-	bhi	.L1091
-	ldr	x1, [x29, 104]
+	bhi	.L1098
+	ldr	x1, [x29, 112]
 	str	w5, [x1, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w0, [x19, 3764]
-.L1091:
+.L1098:
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
 	ldr	w0, [x19, 3724]
 	cmn	w0, #1
-	bne	.L1092
-.L1154:
+	bne	.L1099
+.L1162:
 	str	w21, [x19, 3724]
-	b	.L1067
-.L1092:
+	b	.L1074
+.L1099:
 	cmp	w21, w0
-	bcs	.L1067
-	b	.L1154
-.L1095:
+	bcs	.L1074
+	b	.L1162
+.L1102:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L1094
-.L1068:
+	b	.L1101
+.L1075:
 	strb	w27, [x20, 6]
 	strh	w22, [x20, 2]
-	b	.L1157
+	b	.L1165
+.L1106:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 192
+	ret
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
 	.global	ftl_check_vpc
 	.type	ftl_check_vpc, %function
 ftl_check_vpc:
 	stp	x29, x30, [sp, -128]!
-	adrp	x0, .LC111
-	add	x0, x0, :lo12:.LC111
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
-	stp	x23, x24, [sp, 48]
-	add	x24, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	mov	w23, 0
-	adrp	x21, .LANCHOR1
-	add	x1, x21, :lo12:.LANCHOR1
-	add	x1, x1, 544
+	adrp	x21, __stack_chk_guard
+	stp	x23, x24, [sp, 48]
+	add	x0, x21, :lo12:__stack_chk_guard
 	stp	x25, x26, [sp, 64]
+	add	x25, x20, :lo12:.LANCHOR0
 	stp	x27, x28, [sp, 80]
-	adrp	x22, check_vpc_table
+	adrp	x22, .LANCHOR1
+	mov	w24, 0
+	adrp	x23, check_vpc_table
+	ldr	x1, [x0]
+	str	x1, [x29, 120]
+	mov	x1,0
+	add	x19, x23, :lo12:check_vpc_table
+	add	x1, x22, :lo12:.LANCHOR1
+	adrp	x0, .LC111
+	add	x1, x1, 544
+	add	x0, x0, :lo12:.LC111
 	bl	sftl_printk
-	add	x19, x22, :lo12:check_vpc_table
 	mov	w2, 8192
 	mov	w1, 0
 	mov	x0, x19
 	bl	ftl_memset
-.L1159:
-	ldr	w0, [x24, 2632]
-	cmp	w23, w0
-	bcc	.L1161
-	adrp	x25, .LC112
-	add	x23, x20, :lo12:.LANCHOR0
-	add	x26, x22, :lo12:check_vpc_table
-	add	x25, x25, :lo12:.LC112
-	mov	w24, 0
+.L1167:
+	ldr	w0, [x25, 2632]
+	cmp	w24, w0
+	bcc	.L1169
+	adrp	x26, .LC112
+	add	x24, x20, :lo12:.LANCHOR0
+	add	x27, x23, :lo12:check_vpc_table
+	add	x26, x26, :lo12:.LC112
+	mov	w25, 0
 	mov	w19, 0
-	mov	w4, 65535
-.L1162:
-	ldrh	w0, [x23, 252]
+	mov	w5, 65535
+.L1170:
+	ldrh	w0, [x24, 252]
 	cmp	w0, w19
-	bhi	.L1164
-	ldr	x19, [x23, 2600]
-	cbz	x19, .L1165
-	ldr	x0, [x23, 2568]
-	adrp	x25, .LC113
+	bhi	.L1172
+	ldr	x19, [x24, 2600]
+	cbz	x19, .L1173
+	ldr	x0, [x24, 2568]
+	adrp	x26, .LC113
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:check_vpc_table
+	add	x23, x23, :lo12:check_vpc_table
 	sub	x19, x19, x0
 	mov	x0, -6148914691236517206
 	asr	x19, x19, 1
 	movk	x0, 0xaaab, lsl 0
-	add	x25, x25, :lo12:.LC113
-	ldrh	w26, [x23, 236]
-	mov	w27, 6
-	mov	w23, 0
+	add	x26, x26, :lo12:.LC113
+	ldrh	w27, [x24, 236]
+	mov	w28, 6
+	mov	w24, 0
 	mul	x19, x19, x0
 	and	w19, w19, 65535
-.L1166:
-	cmp	w23, w26
-	bne	.L1168
-.L1165:
-	cbz	w24, .L1158
-	add	x1, x21, :lo12:.LANCHOR1
+.L1174:
+	cmp	w24, w27
+	bne	.L1176
+.L1173:
+	cbz	w25, .L1166
+	add	x1, x22, :lo12:.LANCHOR1
 	adrp	x0, .LC8
 	mov	w2, 2383
 	add	x1, x1, 544
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1158:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
-	ret
-.L1161:
+.L1166:
+	add	x21, x21, :lo12:__stack_chk_guard
+	ldr	x1, [x29, 120]
+	ldr	x0, [x21]
+	eor	x0, x1, x0
+	cbz	x0, .L1178
+	bl	__stack_chk_fail
+.L1169:
 	mov	w2, 0
-	add	x1, x29, 124
-	mov	w0, w23
+	add	x1, x29, 116
+	mov	w0, w24
 	bl	log2phys
-	ldr	w0, [x29, 124]
+	ldr	w0, [x29, 116]
 	cmn	w0, #1
-	beq	.L1160
+	beq	.L1168
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	and	x0, x0, 65535
 	ldrh	w1, [x19, x0, lsl 1]
 	add	w1, w1, 1
 	strh	w1, [x19, x0, lsl 1]
-.L1160:
-	add	w23, w23, 1
-	b	.L1159
-.L1164:
-	ldr	x0, [x23, 80]
-	ubfiz	x28, x19, 1, 16
-	sxtw	x27, w19
-	ldrh	w2, [x0, x28]
-	ldrh	w3, [x26, x27, lsl 1]
+.L1168:
+	add	w24, w24, 1
+	b	.L1167
+.L1172:
+	ldr	x0, [x24, 80]
+	ubfiz	x4, x19, 1, 16
+	sxtw	x28, w19
+	str	x4, [x29, 96]
+	ldrh	w3, [x27, x28, lsl 1]
+	ldrh	w2, [x0, x4]
 	cmp	w2, w3
-	beq	.L1163
-	mov	x0, x25
-	str	w4, [x29, 108]
+	beq	.L1171
+	mov	x0, x26
+	str	w5, [x29, 108]
 	mov	w1, w19
 	bl	sftl_printk
-	ldr	x0, [x23, 80]
-	ldr	w4, [x29, 108]
-	ldrh	w0, [x0, x28]
-	cmp	w0, w4
-	beq	.L1163
-	ldrh	w1, [x26, x27, lsl 1]
+	ldr	x0, [x24, 80]
+	ldr	x4, [x29, 96]
+	ldr	w5, [x29, 108]
+	ldrh	w0, [x0, x4]
+	cmp	w0, w5
+	beq	.L1171
+	ldrh	w1, [x27, x28, lsl 1]
 	cmp	w1, w0
-	csinc	w24, w24, wzr, ls
-.L1163:
+	csinc	w25, w25, wzr, ls
+.L1171:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1162
-.L1168:
+	b	.L1170
+.L1176:
 	ldr	x1, [x20, 80]
 	ubfiz	x0, x19, 1, 16
 	ldrh	w2, [x1, x0]
-	cbz	w2, .L1167
-	ldrh	w3, [x22, w19, sxtw 1]
-	mov	w24, 1
+	cbz	w2, .L1175
+	ldrh	w3, [x23, w19, sxtw 1]
+	mov	w25, 1
 	mov	w1, w19
-	mov	x0, x25
+	mov	x0, x26
 	bl	sftl_printk
-.L1167:
+.L1175:
 	ldr	x0, [x20, 2568]
-	umull	x19, w19, w27
+	umull	x19, w19, w28
 	ldrh	w19, [x0, x19]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L1165
-	add	w23, w23, 1
-	and	w23, w23, 65535
-	b	.L1166
+	beq	.L1173
+	add	w24, w24, 1
+	and	w24, w24, 65535
+	b	.L1174
+.L1178:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 128
+	ret
 	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	2
 	.global	ftl_scan_all_data
 	.type	ftl_scan_all_data, %function
 ftl_scan_all_data:
 	sub	sp, sp, #96
-	adrp	x0, .LC114
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC114
 	stp	x29, x30, [sp, 16]
 	add	x29, sp, 16
-	stp	x21, x22, [sp, 48]
-	adrp	x22, .LANCHOR0
-	add	x21, x22, :lo12:.LANCHOR0
+	stp	x23, x24, [sp, 64]
+	adrp	x24, .LANCHOR0
+	add	x23, x24, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 32]
-	str	x23, [sp, 64]
+	add	x19, x23, 3728
+	stp	x21, x22, [sp, 48]
 	mov	w20, 0
-	add	x19, x21, 3728
+	adrp	x22, __stack_chk_guard
+	add	x0, x22, :lo12:__stack_chk_guard
+	ldr	x1, [x0]
+	str	x1, [x29, 72]
+	mov	x1,0
+	adrp	x0, .LC114
+	add	x0, x0, :lo12:.LC114
 	bl	sftl_printk
-.L1184:
-	add	x0, x22, :lo12:.LANCHOR0
+.L1193:
+	add	x0, x24, :lo12:.LANCHOR0
 	ldr	w0, [x0, 2632]
 	cmp	w20, w0
-	bcc	.L1190
-	ldp	x19, x20, [sp, 32]
-	ldp	x21, x22, [sp, 48]
-	ldp	x29, x30, [sp, 16]
-	ldr	x23, [sp, 64]
-	add	sp, sp, 96
-	ret
-.L1190:
+	bcc	.L1199
+	add	x0, x22, :lo12:__stack_chk_guard
+	ldr	x1, [x29, 72]
+	ldr	x0, [x0]
+	eor	x0, x1, x0
+	cbz	x0, .L1200
+	bl	__stack_chk_fail
+.L1199:
 	mov	w2, 0
-	add	x1, x29, 76
+	add	x1, x29, 68
 	mov	w0, w20
 	bl	log2phys
 	tst	x20, 2047
-	bne	.L1185
-	ldr	w2, [x29, 76]
+	bne	.L1194
+	ldr	w2, [x29, 68]
 	adrp	x0, .LC115
 	mov	w1, w20
 	add	x0, x0, :lo12:.LC115
 	bl	sftl_printk
-.L1185:
-	ldr	w0, [x29, 76]
-	cmn	w0, #1
-	beq	.L1187
-	ldr	x23, [x21, 3528]
+.L1194:
+	ldr	w1, [x29, 68]
+	cmn	w1, #1
+	beq	.L1196
+	ldr	x0, [x23, 3464]
 	mov	w2, 0
-	stp	wzr, w0, [x19]
+	ldr	x21, [x23, 3528]
+	stp	wzr, w1, [x19]
 	mov	w1, 1
-	ldr	x0, [x21, 3464]
-	str	x0, [x19, 8]
+	stp	x0, x21, [x19, 8]
 	mov	x0, x19
-	str	x23, [x19, 16]
 	str	w20, [x19, 24]
 	bl	FlashReadPages
-	ldr	w0, [x19]
-	cmp	w0, 256
-	ccmn	w0, #1, 4, ne
-	beq	.L1188
-	ldr	w0, [x23, 8]
+	ldr	w1, [x19]
+	cmp	w1, 256
+	ccmn	w1, #1, 4, ne
+	beq	.L1197
+	ldr	w0, [x21, 8]
 	cmp	w20, w0
-	beq	.L1187
-.L1188:
+	beq	.L1196
+.L1197:
 	ldp	x1, x0, [x19, 8]
 	ldr	w2, [x1, 4]
 	str	w2, [sp]
@@ -8037,215 +8147,236 @@ ftl_scan_all_data:
 	ldr	w2, [x19, 4]
 	mov	w1, w20
 	bl	sftl_printk
-.L1187:
+.L1196:
 	add	w20, w20, 1
-	b	.L1184
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
-	.align	2
-	.global	FtlGcScanTempBlk
+	b	.L1193
+.L1200:
+	ldp	x19, x20, [sp, 32]
+	ldp	x21, x22, [sp, 48]
+	ldp	x23, x24, [sp, 64]
+	ldp	x29, x30, [sp, 16]
+	add	sp, sp, 96
+	ret
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.align	2
+	.global	FtlGcScanTempBlk
 	.type	FtlGcScanTempBlk, %function
 FtlGcScanTempBlk:
 	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x20, x0
 	stp	x21, x22, [sp, 32]
-	adrp	x22, .LANCHOR2
-	add	x0, x22, :lo12:.LANCHOR2
+	adrp	x22, __stack_chk_guard
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
 	stp	x25, x26, [sp, 64]
+	add	x0, x22, :lo12:__stack_chk_guard
 	stp	x23, x24, [sp, 48]
 	mov	w25, w1
 	stp	x27, x28, [sp, 80]
+	adrp	x21, .LANCHOR2
+	str	x22, [x29, 96]
+	ldr	x1, [x0]
+	str	x1, [x29, 152]
+	mov	x1,0
+	add	x0, x21, :lo12:.LANCHOR2
 	ldrh	w28, [x0, 4]
 	mov	w0, 65535
 	cmp	w28, w0
-	beq	.L1216
-	cbnz	w28, .L1193
-.L1194:
+	beq	.L1227
+	cbnz	w28, .L1203
+.L1204:
 	bl	FtlGcPageVarInit
-	b	.L1195
-.L1216:
+	b	.L1205
+.L1227:
 	mov	w28, 0
-.L1193:
+.L1203:
 	adrp	x0, .LANCHOR0+314
 	ldrh	w0, [x0, #:lo12:.LANCHOR0+314]
 	cmp	w0, w25
-	beq	.L1194
-.L1195:
+	beq	.L1204
+.L1205:
 	adrp	x26, .LANCHOR0
-	add	x19, x26, :lo12:.LANCHOR0
+	add	x22, x26, :lo12:.LANCHOR0
 	mov	w24, 0
-.L1210:
-	ldrh	w1, [x20]
+.L1220:
+	ldrh	w1, [x19]
 	mov	w0, 65535
-	strb	wzr, [x20, 8]
+	strb	wzr, [x19, 8]
 	cmp	w1, w0
-	beq	.L1196
-.L1213:
+	beq	.L1206
+.L1223:
 	add	x0, x26, :lo12:.LANCHOR0
-	add	x2, x20, 16
-	mov	w21, 0
-	mov	w10, 65535
-	mov	w6, 4
-	ldrh	w8, [x0, 322]
-	ldrh	w9, [x0, 324]
+	add	x6, x19, 16
+	mov	w20, 0
+	mov	w11, 65535
+	mov	w7, 4
+	ldrh	w9, [x0, 322]
+	ldrh	w10, [x0, 324]
 	ldrh	w0, [x0, 244]
 	add	x0, x0, 8
-	add	x0, x20, x0, lsl 1
-.L1197:
-	cmp	x0, x2
-	bne	.L1199
-	ldr	x0, [x19, 3440]
+	add	x0, x19, x0, lsl 1
+.L1207:
+	cmp	x0, x6
+	bne	.L1209
+	ldr	x0, [x22, 3440]
 	mov	w2, 0
-	mov	w1, w21
+	mov	w1, w20
 	mov	x23, 0
 	bl	FlashReadPages
-	ubfiz	x0, x21, 5, 16
+	ubfiz	x0, x20, 5, 16
 	str	x0, [x29, 104]
-.L1200:
+.L1210:
 	ldr	x0, [x29, 104]
 	cmp	x0, x23
-	bne	.L1211
-	add	w3, w28, 1
+	bne	.L1221
+	add	w4, w28, 1
 	add	w24, w24, 1
-	and	w28, w3, 65535
+	and	w28, w4, 65535
 	cmp	w25, w24
-	bls	.L1212
-.L1214:
-	ldrh	w0, [x19, 314]
+	bls	.L1222
+.L1224:
+	ldrh	w0, [x22, 314]
 	cmp	w0, w28
-	bhi	.L1213
-.L1196:
-	add	x22, x22, :lo12:.LANCHOR2
-	strh	w28, [x20, 2]
-	strb	wzr, [x20, 6]
+	bhi	.L1223
+.L1206:
+	add	x21, x21, :lo12:.LANCHOR2
+	strh	w28, [x19, 2]
+	strb	wzr, [x19, 6]
 	mov	w0, -1
 	mov	w2, 0
 	mov	w1, w28
-	strh	w0, [x22, 4]
-	mov	x0, x20
+	strh	w0, [x21, 4]
+	mov	x0, x19
 	bl	ftl_sb_update_avl_pages
-	b	.L1215
-.L1199:
-	ldrh	w1, [x2]
-	cmp	w1, w10
-	beq	.L1198
-	ldr	x5, [x19, 3440]
-	ubfiz	x7, x21, 5, 16
+	b	.L1225
+.L1209:
+	ldrh	w1, [x6]
+	cmp	w1, w11
+	beq	.L1208
+	ldr	x5, [x22, 3440]
+	ubfiz	x8, x20, 5, 16
 	orr	w1, w28, w1, lsl 10
-	add	x5, x5, x7
+	add	x5, x5, x8
 	str	w1, [x5, 4]
-	mul	w1, w21, w8
-	ldr	x4, [x19, 3440]
-	ldr	x5, [x19, 3264]
-	sdiv	w1, w1, w6
-	add	x4, x4, x7
+	mul	w1, w20, w9
+	ldr	x2, [x22, 3440]
+	ldr	x5, [x22, 3264]
+	sdiv	w1, w1, w7
+	add	x2, x2, x8
 	add	x1, x5, x1, sxtw 2
-	str	x1, [x4, 8]
-	mul	w1, w21, w9
-	ldr	x5, [x19, 3272]
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	sdiv	w1, w1, w6
+	str	x1, [x2, 8]
+	mul	w1, w20, w10
+	ldr	x5, [x22, 3272]
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	sdiv	w1, w1, w7
 	add	x1, x5, x1, sxtw 2
-	str	x1, [x4, 16]
-.L1198:
-	add	x2, x2, 2
-	b	.L1197
-.L1211:
-	ldr	x0, [x19, 3440]
+	str	x1, [x2, 16]
+.L1208:
+	add	x6, x6, 2
+	b	.L1207
+.L1221:
+	ldr	x0, [x22, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
 	ldr	w27, [x1, 4]
-	ldr	x21, [x1, 16]
-	cbnz	w0, .L1201
-	ldrh	w0, [x21]
+	ldr	x20, [x1, 16]
+	cbnz	w0, .L1211
+	ldrh	w0, [x20]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1202
-.L1226:
-	ldrh	w1, [x20]
+	bne	.L1212
+.L1237:
+	ldrh	w1, [x19]
 	mov	w28, 0
-	ldr	x0, [x19, 80]
+	ldr	x0, [x22, 80]
 	strh	wzr, [x0, x1, lsl 1]
-	ldrh	w0, [x20]
+	ldrh	w0, [x19]
 	bl	INSERT_FREE_LIST
 	mov	w0, -1
-	strh	w0, [x20]
-	strh	w0, [x19, 184]
+	strh	w0, [x19]
+	strh	w0, [x22, 184]
 	bl	FtlGcPageVarInit
-	b	.L1210
-.L1202:
-	ldr	w1, [x19, 2632]
-	ldr	w0, [x21, 8]
+	b	.L1220
+.L1212:
+	ldr	w0, [x20, 8]
+	ldr	w1, [x22, 2632]
 	cmp	w0, w1
-	bhi	.L1226
-	add	x1, x29, 124
+	bhi	.L1237
+	add	x1, x29, 116
 	mov	w2, 0
 	bl	log2phys
-	ldr	w0, [x21, 12]
-	ldr	w1, [x29, 124]
+	ldr	w0, [x20, 12]
+	ldr	w1, [x29, 116]
 	cmp	w0, w1
-	beq	.L1205
-.L1207:
-	ldr	w2, [x21, 8]
-.L1227:
-	ldr	w0, [x21, 12]
+	beq	.L1215
+.L1217:
+	ldr	w2, [x20, 8]
+.L1238:
+	ldr	w0, [x20, 12]
 	mov	w1, w27
 	add	x23, x23, 32
 	bl	FtlGcUpdatePage
-	b	.L1200
-.L1205:
+	b	.L1210
+.L1215:
 	cmn	w0, #1
-	beq	.L1207
-	str	w0, [x29, 132]
+	beq	.L1217
+	str	w0, [x29, 124]
 	mov	w2, 0
-	ldr	x0, [x19, 3496]
+	ldr	x0, [x22, 3496]
 	mov	w1, 1
+	str	x0, [x29, 128]
+	ldr	x0, [x22, 3536]
 	str	x0, [x29, 136]
-	ldr	x0, [x19, 3536]
-	str	x0, [x29, 144]
-	add	x0, x29, 128
+	add	x0, x29, 120
 	bl	FlashReadPages
-	ldrh	w1, [x19, 270]
+	ldrh	w1, [x22, 270]
 	mov	x0, 0
-	ldr	x2, [x19, 3440]
-	ldr	x5, [x29, 136]
+	ldr	x2, [x22, 3440]
+	ldr	x6, [x29, 128]
 	ubfiz	x1, x1, 9, 16
 	add	x2, x2, x23
-.L1208:
+.L1218:
 	cmp	x0, x1
-	beq	.L1207
-	ldr	x6, [x2, 8]
-	ldr	w7, [x6, x0]
+	beq	.L1217
+	ldr	x7, [x2, 8]
+	ldr	w8, [x7, x0]
 	add	x0, x0, 4
-	add	x6, x5, x0
-	ldr	w6, [x6, -4]
-	cmp	w7, w6
-	beq	.L1208
-	ldrh	w1, [x20]
+	add	x7, x6, x0
+	ldr	w7, [x7, -4]
+	cmp	w8, w7
+	beq	.L1218
+	ldrh	w1, [x19]
 	adrp	x0, .LC117
-	ldr	w2, [x29, 132]
+	ldr	w2, [x29, 124]
 	add	x0, x0, :lo12:.LC117
 	bl	sftl_printk
-	b	.L1226
-.L1201:
+	b	.L1237
+.L1211:
 	mov	w2, -1
-	b	.L1227
-.L1212:
-	add	x1, x22, :lo12:.LANCHOR2
+	b	.L1238
+.L1222:
+	add	x1, x21, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w0, [x1, 4]
 	cmp	w0, w2
-	beq	.L1214
+	beq	.L1224
 	add	w0, w0, w24
 	strh	w0, [x1, 4]
-	ldrh	w0, [x19, 314]
+	ldrh	w0, [x22, 314]
 	cmp	w0, w28
-	bls	.L1214
-.L1215:
-	ldp	x19, x20, [sp, 16]
+	bls	.L1224
+.L1225:
+	ldr	x1, [x29, 96]
 	mov	w0, -1
+	add	x22, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 152]
+	ldr	x1, [x22]
+	eor	x1, x2, x1
+	cbz	x1, .L1226
+	bl	__stack_chk_fail
+.L1226:
+	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
@@ -8257,74 +8388,82 @@ FtlGcScanTempBlk:
 	.global	FtlReadRefresh
 	.type	FtlReadRefresh, %function
 FtlReadRefresh:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, __stack_chk_guard
+	stp	x21, x22, [sp, 32]
+	add	x0, x20, :lo12:__stack_chk_guard
+	ldr	x1, [x0]
+	str	x1, [x29, 152]
+	mov	x1,0
 	adrp	x1, .LANCHOR0
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x2, x0, 2720
 	ldr	w3, [x2, 80]
-	cbz	w3, .L1229
+	cbz	w3, .L1240
 	ldr	w1, [x0, 2632]
 	ldr	w3, [x2, 84]
 	cmp	w3, w1
-	bcs	.L1230
-	stp	x29, x30, [sp, -160]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
+	bcs	.L1241
 	mov	x19, x0
-	mov	w20, 2048
-	str	x21, [sp, 32]
-.L1235:
-	add	x21, x19, 2720
+	mov	w21, 2048
+.L1246:
+	add	x22, x19, 2720
 	ldr	w1, [x19, 2632]
-	ldr	w0, [x21, 84]
+	ldr	w0, [x22, 84]
 	cmp	w0, w1
-	bcc	.L1231
-.L1234:
-	ldp	x19, x20, [sp, 16]
+	bcc	.L1242
+.L1245:
 	mov	w0, -1
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 160
-	ret
-.L1231:
-	add	x1, x29, 60
+.L1239:
+	add	x20, x20, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 152]
+	ldr	x1, [x20]
+	eor	x1, x2, x1
+	cbz	x1, .L1251
+	bl	__stack_chk_fail
+.L1242:
+	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
-	ldr	w0, [x21, 84]
-	ldr	w1, [x29, 60]
+	ldr	w0, [x22, 84]
+	ldr	w1, [x29, 52]
 	add	w0, w0, 1
-	str	w0, [x21, 84]
+	str	w0, [x22, 84]
 	cmn	w1, #1
-	beq	.L1233
-	str	w0, [x29, 88]
+	beq	.L1244
+	str	w0, [x29, 80]
 	mov	w2, 0
 	ldr	x0, [x19, 3512]
+	str	x0, [x29, 64]
+	add	x0, x29, 88
 	str	x0, [x29, 72]
-	add	x0, x29, 96
-	str	x0, [x29, 80]
 	add	x0, x29, 160
-	str	w1, [x29, 68]
+	str	w1, [x29, 60]
 	mov	w1, 1
-	str	wzr, [x0, -96]!
+	str	wzr, [x0, -104]!
 	bl	FlashReadPages
-	ldr	w0, [x29, 64]
+	ldr	w0, [x29, 56]
 	cmp	w0, 256
-	bne	.L1234
-	ldr	w0, [x29, 60]
+	bne	.L1245
+	ldr	w0, [x29, 52]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1234
-.L1233:
-	subs	w20, w20, #1
-	bne	.L1235
-	b	.L1234
-.L1230:
+	b	.L1245
+.L1244:
+	subs	w21, w21, #1
+	bne	.L1246
+	b	.L1245
+.L1241:
 	ldr	w0, [x0, 2636]
 	stp	w0, wzr, [x2, 76]
 	str	wzr, [x2, 84]
-.L1242:
+.L1254:
 	mov	w0, 0
-	ret
-.L1229:
+	b	.L1239
+.L1240:
 	ldr	w4, [x0, 2692]
 	mov	w3, 10000
 	ldr	w5, [x0, 2636]
@@ -8335,7 +8474,7 @@ FtlReadRefresh:
 	csel	w6, w6, w3, hi
 	add	w3, w5, 1048576
 	cmp	w7, w3
-	bhi	.L1239
+	bhi	.L1250
 	ldr	w3, [x0, 2632]
 	mov	w8, 1000
 	lsr	w4, w4, 10
@@ -8344,14 +8483,14 @@ FtlReadRefresh:
 	udiv	w3, w3, w4
 	add	w3, w3, w7
 	cmp	w5, w3
-	bhi	.L1239
+	bhi	.L1250
 	ldrh	w0, [x0, 2548]
 	tst	w6, w0
-	bne	.L1242
+	bne	.L1254
 	ldr	w2, [x2, 100]
 	cmp	w0, w2
-	beq	.L1242
-.L1239:
+	beq	.L1254
+.L1250:
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x1, x0, 2720
 	ldrh	w0, [x0, 2548]
@@ -8360,7 +8499,12 @@ FtlReadRefresh:
 	mov	w0, 1
 	str	wzr, [x1, 84]
 	str	w0, [x1, 80]
-	b	.L1242
+	b	.L1254
+.L1251:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 160
+	ret
 	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
 	.global	l2p_flush
@@ -8373,115 +8517,128 @@ l2p_flush:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
 	bl	FtlWriteDump_data
-.L1249:
+.L1258:
 	ldrh	w0, [x20, 350]
 	cmp	w0, w19
-	bhi	.L1251
+	bhi	.L1260
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1251:
+.L1260:
 	ldr	x1, [x20, 2616]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1250
+	tbz	w0, #31, .L1259
 	mov	w0, w19
 	bl	flush_l2p_region
-.L1250:
+.L1259:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1249
+	b	.L1258
 	.size	l2p_flush, .-l2p_flush
 	.align	2
 	.global	FtlVendorPartWrite
 	.type	FtlVendorPartWrite, %function
 FtlVendorPartWrite:
-	stp	x29, x30, [sp, -208]!
+	stp	x29, x30, [sp, -224]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x25, x26, [sp, 64]
+	adrp	x22, __stack_chk_guard
 	stp	x27, x28, [sp, 80]
-	mov	w22, w1
-	mov	w28, w0
-	add	w1, w0, w1
+	mov	w26, w0
 	stp	x23, x24, [sp, 48]
+	add	x0, x22, :lo12:__stack_chk_guard
+	mov	w28, w1
+	ldr	x1, [x0]
+	str	x1, [x29, 216]
+	mov	x1,0
 	ldrh	w0, [x19, 308]
-	stp	x25, x26, [sp, 64]
+	add	w1, w26, w28
 	cmp	w1, w0
-	bhi	.L1261
+	bhi	.L1271
 	ldrh	w23, [x19, 320]
 	mov	x25, x2
-	add	x26, x29, 144
 	add	x27, x19, 3896
 	mov	w24, 0
-	lsr	w23, w28, w23
-.L1255:
-	cbnz	w22, .L1260
-.L1253:
+	lsr	w23, w26, w23
+.L1264:
+	cbnz	w28, .L1269
+.L1262:
+	add	x22, x22, :lo12:__stack_chk_guard
 	mov	w0, w24
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 208
-	ret
-.L1260:
+	ldr	x2, [x29, 216]
+	ldr	x1, [x22]
+	eor	x1, x2, x1
+	cbz	x1, .L1270
+	bl	__stack_chk_fail
+.L1269:
 	ldrh	w1, [x19, 270]
 	ldr	x0, [x19, 3608]
-	udiv	w21, w28, w1
+	udiv	w21, w26, w1
 	ldr	w2, [x0, w23, uxtw 2]
-	and	w0, w22, 65535
-	msub	w21, w21, w1, w28
+	and	w0, w28, 65535
+	msub	w21, w21, w1, w26
 	sub	w20, w1, w21
 	and	w20, w20, 65535
-	cmp	w22, w20
+	cmp	w28, w20
 	csel	w20, w0, w20, cc
-	cbz	w2, .L1257
+	cbz	w2, .L1266
 	cmp	w20, w1
-	beq	.L1257
+	beq	.L1266
 	ldr	x0, [x19, 3480]
-	str	w2, [x29, 116]
+	str	x0, [x29, 128]
+	add	x0, x29, 152
+	str	w2, [x29, 124]
 	mov	w2, 1
-	stp	x0, x26, [x29, 120]
+	str	x0, [x29, 136]
 	mov	w1, w2
-	add	x0, x29, 112
+	add	x0, x29, 120
 	bl	FlashReadPages
-.L1258:
-	lsl	w3, w20, 9
+.L1267:
+	lsl	w4, w20, 9
 	ldr	x0, [x19, 3480]
 	lsl	w21, w21, 9
-	mov	w2, w3
+	mov	w2, w4
 	asr	w21, w21, 2
 	mov	x1, x25
-	str	w3, [x29, 108]
+	str	w4, [x29, 108]
 	add	x0, x0, x21, sxtw 2
 	bl	ftl_memcpy
-	sub	w22, w22, w20
+	sub	w28, w28, w20
 	ldr	x2, [x19, 3480]
 	mov	w1, w23
 	mov	x0, x27
-	add	w28, w28, w20
+	add	w26, w26, w20
 	add	w23, w23, 1
 	bl	FtlMapWritePage
 	cmn	w0, #1
-	ldr	w3, [x29, 108]
+	ldr	w4, [x29, 108]
 	csinv	w24, w24, wzr, ne
-	add	x25, x25, x3, sxtw
-	b	.L1255
-.L1257:
+	add	x25, x25, x4, sxtw
+	b	.L1264
+.L1266:
 	ldrh	w2, [x19, 322]
 	mov	w1, 0
 	ldr	x0, [x19, 3480]
 	bl	ftl_memset
-	b	.L1258
-.L1261:
+	b	.L1267
+.L1271:
 	mov	w24, -1
-	b	.L1253
+	b	.L1262
+.L1270:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 224
+	ret
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8493,10 +8650,10 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1269
+	bne	.L1279
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
-	mov	w1, 72
+	mov	w1, 83
 	add	x29, sp, 0
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2, 4]
@@ -8528,7 +8685,7 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1269:
+.L1279:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -8539,20 +8696,20 @@ FtlEctTblFlush:
 	add	x3, x1, :lo12:.LANCHOR0
 	ldrh	w2, [x3, 3960]
 	cmp	w2, 31
-	bhi	.L1276
+	bhi	.L1286
 	add	w2, w2, 1
 	strh	w2, [x3, 3960]
 	mov	w2, 1
-.L1273:
-	cbnz	w0, .L1274
+.L1283:
+	cbnz	w0, .L1284
 	add	x0, x1, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3560]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1278
-.L1274:
+	bcc	.L1288
+.L1284:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
@@ -8577,10 +8734,10 @@ FtlEctTblFlush:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1276:
+.L1286:
 	mov	w2, 32
-	b	.L1273
-.L1278:
+	b	.L1283
+.L1288:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8599,40 +8756,46 @@ sftl_vendor_write:
 	.global	FtlVendorPartRead
 	.type	FtlVendorPartRead, %function
 FtlVendorPartRead:
-	stp	x29, x30, [sp, -208]!
+	stp	x29, x30, [sp, -224]!
 	adrp	x3, .LANCHOR0
 	add	x3, x3, :lo12:.LANCHOR0
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
 	mov	w22, w1
 	stp	x23, x24, [sp, 48]
-	add	w1, w0, w1
-	stp	x19, x20, [sp, 16]
 	mov	w23, w0
 	stp	x25, x26, [sp, 64]
+	adrp	x0, __stack_chk_guard
+	stp	x19, x20, [sp, 16]
+	add	x1, x0, :lo12:__stack_chk_guard
 	stp	x27, x28, [sp, 80]
-	ldrh	w0, [x3, 308]
-	cmp	w1, w0
-	bhi	.L1291
+	mov	x25, x2
+	str	x0, [x29, 104]
+	ldr	x2, [x1]
+	str	x2, [x29, 216]
+	mov	x2,0
+	ldrh	w1, [x3, 308]
+	add	w2, w23, w22
+	cmp	w2, w1
+	bhi	.L1302
 	ldrh	w21, [x3, 320]
 	adrp	x26, .LC118
-	mov	x25, x2
 	mov	x28, x3
 	add	x26, x26, :lo12:.LC118
 	mov	w24, 0
 	lsr	w21, w23, w21
-.L1284:
-	cbnz	w22, .L1290
-.L1282:
+.L1294:
+	cbnz	w22, .L1300
+.L1292:
+	ldr	x1, [x29, 104]
 	mov	w0, w24
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 208
-	ret
-.L1290:
+	add	x1, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 216]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L1301
+	bl	__stack_chk_fail
+.L1300:
 	ldrh	w19, [x28, 270]
 	ldr	x0, [x28, 3608]
 	udiv	w20, w23, w19
@@ -8644,23 +8807,24 @@ FtlVendorPartRead:
 	cmp	w22, w19
 	csel	w19, w0, w19, cc
 	lsl	w27, w19, 9
-	cbz	w4, .L1286
+	cbz	w4, .L1296
 	ldr	x0, [x28, 3480]
 	mov	w2, 1
-	str	x0, [x29, 120]
-	add	x0, x29, 144
-	str	w4, [x29, 108]
-	mov	w1, w2
-	str	w4, [x29, 116]
 	str	x0, [x29, 128]
-	add	x0, x29, 112
+	add	x0, x29, 152
+	str	w4, [x29, 100]
+	mov	w1, w2
+	str	w4, [x29, 124]
+	str	x0, [x29, 136]
+	add	x0, x29, 120
 	bl	FlashReadPages
-	ldp	w4, w0, [x29, 108]
+	ldr	w0, [x29, 120]
+	ldr	w4, [x29, 100]
 	cmn	w0, #1
 	ldr	w0, [x28, 3728]
 	csinv	w24, w24, wzr, ne
 	cmp	w0, 256
-	bne	.L1288
+	bne	.L1298
 	mov	w2, w4
 	mov	w1, w21
 	mov	x0, x26
@@ -8669,7 +8833,7 @@ FtlVendorPartRead:
 	mov	w1, w21
 	add	x0, x28, 3896
 	bl	FtlMapWritePage
-.L1288:
+.L1298:
 	ldr	x1, [x28, 3480]
 	lsl	w20, w20, 9
 	asr	w20, w20, 2
@@ -8677,21 +8841,29 @@ FtlVendorPartRead:
 	mov	x0, x25
 	add	x1, x1, x20, sxtw 2
 	bl	ftl_memcpy
-.L1289:
+.L1299:
 	add	w21, w21, 1
 	sub	w22, w22, w19
 	add	w23, w23, w19
 	add	x25, x25, x27, sxtw
-	b	.L1284
-.L1286:
+	b	.L1294
+.L1296:
 	mov	w2, w27
 	mov	w1, 0
 	mov	x0, x25
 	bl	ftl_memset
-	b	.L1289
-.L1291:
+	b	.L1299
+.L1302:
 	mov	w24, -1
-	b	.L1282
+	b	.L1292
+.L1301:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 224
+	ret
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -8711,7 +8883,7 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1294
+	beq	.L1305
 	adrp	x1, .LC119
 	adrp	x0, .LC77
 	add	x1, x1, :lo12:.LC119
@@ -8722,7 +8894,7 @@ FtlLoadEctTbl:
 	ldrh	w2, [x19, 3544]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1294:
+.L1305:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8747,19 +8919,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1297
+	beq	.L1308
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1297:
+.L1308:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1298
+	bne	.L1309
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2660]
 	ldr	w2, [x0, 2812]
@@ -8784,7 +8956,7 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2696]
 	str	w2, [x0, 2692]
-.L1298:
+.L1309:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2680]
 	ldrh	w1, [x0, 304]
@@ -8814,7 +8986,7 @@ sftl_vendor_read:
 	.type	FtlMapBlkWriteDump_data, %function
 FtlMapBlkWriteDump_data:
 	ldr	w1, [x0, 56]
-	cbz	w1, .L1310
+	cbz	w1, .L1321
 	stp	x29, x30, [sp, -48]!
 	adrp	x1, .LANCHOR0
 	add	x2, x1, :lo12:.LANCHOR0
@@ -8835,11 +9007,11 @@ FtlMapBlkWriteDump_data:
 	str	wzr, [x19, 56]
 	ldr	w4, [x5, x4]
 	str	w4, [x0, 4]
-	cbz	w4, .L1304
+	cbz	w4, .L1315
 	mov	w2, 1
 	mov	w1, w2
 	bl	FlashReadPages
-.L1305:
+.L1316:
 	add	x1, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	ldr	x2, [x1, 3736]
@@ -8849,13 +9021,13 @@ FtlMapBlkWriteDump_data:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1304:
+.L1315:
 	ldrh	w2, [x2, 322]
 	mov	w1, 255
 	mov	x0, x3
 	bl	ftl_memset
-	b	.L1305
-.L1310:
+	b	.L1316
+.L1321:
 	ret
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
@@ -8889,7 +9061,7 @@ FtlVpcTblFlush:
 	ldrh	w1, [x19, 32]
 	movk	w0, 0x4654, lsl 16
 	str	w0, [x19, 2520]
-	mov	w0, 72
+	mov	w0, 83
 	ldrb	w2, [x19, 38]
 	strh	w1, [x19, 2534]
 	movk	w0, 0x5000, lsl 16
@@ -8955,7 +9127,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1314:
+.L1325:
 	ldrh	w2, [x20, 2]
 	ldrh	w1, [x20]
 	ldr	x0, [x19, 3464]
@@ -8967,7 +9139,7 @@ FtlVpcTblFlush:
 	ldrh	w0, [x19, 316]
 	sub	w0, w0, #1
 	cmp	w2, w0
-	blt	.L1315
+	blt	.L1326
 	ldrh	w24, [x20, 4]
 	strh	wzr, [x20, 2]
 	strh	w1, [x20, 4]
@@ -8981,7 +9153,7 @@ FtlVpcTblFlush:
 	strh	w0, [x20]
 	strh	w0, [x21, 2]
 	str	w1, [x21, 4]
-.L1315:
+.L1326:
 	ldrh	w1, [x19, 322]
 	ldr	x0, [x19, 3464]
 	bl	js_hash
@@ -8997,46 +9169,46 @@ FtlVpcTblFlush:
 	and	w0, w0, 65535
 	strh	w0, [x20, 2]
 	cmn	w1, #1
-	bne	.L1316
+	bne	.L1327
 	cmp	w0, 1
-	bne	.L1317
+	bne	.L1328
 	adrp	x0, .LC8
 	mov	w2, 1138
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1317:
+.L1328:
 	ldrh	w0, [x20, 2]
 	cmp	w0, 1
-	bne	.L1318
+	bne	.L1329
 	ldrh	w0, [x19, 316]
 	sub	w0, w0, #1
 	strh	w0, [x20, 2]
-.L1318:
+.L1329:
 	add	w22, w22, 1
 	and	w22, w22, 65535
 	cmp	w22, 3
-	bls	.L1314
+	bls	.L1325
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x0, .LC120
 	mov	w2, w22
 	add	x0, x0, :lo12:.LC120
 	ldr	w1, [x23, 3732]
 	bl	sftl_printk
-.L1320:
-	b	.L1320
-.L1316:
+.L1331:
+	b	.L1331
+.L1327:
 	cmp	w0, 1
-	beq	.L1314
+	beq	.L1325
 	cmp	w1, 256
-	beq	.L1314
+	beq	.L1325
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1321
+	beq	.L1332
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1321:
+.L1332:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -9066,14 +9238,14 @@ sftl_deinit:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	bne	.L1334
+	bne	.L1345
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	FtlSysFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1334:
+.L1345:
 	mov	w0, 0
 	ret
 	.size	sftl_deinit, .-sftl_deinit
@@ -9082,133 +9254,155 @@ sftl_deinit:
 	.type	sftl_discard, %function
 sftl_discard:
 	stp	x29, x30, [sp, -64]!
-	add	w3, w0, w1
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	w20, w1
+	stp	x21, x22, [sp, 32]
+	adrp	x21, __stack_chk_guard
+	add	x1, x21, :lo12:__stack_chk_guard
 	adrp	x19, .LANCHOR0
-	add	x1, x19, :lo12:.LANCHOR0
-	str	x21, [sp, 32]
-	ldr	w2, [x1, 352]
-	cmp	w3, w2
-	bhi	.L1345
+	ldr	x2, [x1]
+	str	x2, [x29, 56]
+	mov	x2,0
+	add	x2, x19, :lo12:.LANCHOR0
+	ldr	w1, [x2, 352]
+	cmp	w1, w0
+	bls	.L1359
+	cmp	w1, w20
+	bcc	.L1359
+	add	w3, w0, w20
+	cmp	w1, w3
+	bcc	.L1359
 	cmp	w20, 31
-	bhi	.L1339
-.L1353:
+	bhi	.L1350
+.L1367:
 	mov	w0, 0
-.L1337:
-	ldp	x19, x20, [sp, 16]
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-.L1339:
-	ldrh	w1, [x1, 270]
-	udiv	w21, w0, w1
-	msub	w0, w1, w21, w0
+.L1348:
+	add	x21, x21, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 56]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L1356
+	bl	__stack_chk_fail
+.L1350:
+	ldrh	w1, [x2, 270]
+	udiv	w22, w0, w1
+	msub	w0, w1, w22, w0
 	ands	w0, w0, 65535
-	beq	.L1340
-	sub	w1, w1, w0
-	add	w21, w21, 1
-	cmp	w1, w20
-	csel	w1, w1, w20, ls
-	sub	w20, w20, w1, uxth
-.L1340:
+	beq	.L1351
+	sub	w0, w1, w0
+	add	w22, w22, 1
+	cmp	w0, w20
+	csel	w0, w0, w20, ls
+	sub	w20, w20, w0, uxth
+.L1351:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	str	w0, [x29, 60]
-.L1341:
+	str	w0, [x29, 52]
+.L1352:
 	ldrh	w0, [x19, 270]
 	cmp	w20, w0
-	bcs	.L1343
+	bcs	.L1354
 	ldr	w0, [x19, 3964]
 	cmp	w0, 32
-	bls	.L1353
+	bls	.L1367
 	str	wzr, [x19, 3964]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1353
-.L1343:
+	b	.L1367
+.L1354:
 	mov	w2, 0
-	add	x1, x29, 56
-	mov	w0, w21
+	add	x1, x29, 48
+	mov	w0, w22
 	bl	log2phys
-	ldr	w0, [x29, 56]
+	ldr	w0, [x29, 48]
 	cmn	w0, #1
-	beq	.L1342
+	beq	.L1353
 	ldr	w0, [x19, 3964]
 	mov	w2, 1
-	add	x1, x29, 60
+	add	x1, x29, 52
 	add	w0, w0, 1
 	str	w0, [x19, 3964]
 	ldr	w0, [x19, 2640]
 	add	w0, w0, 1
 	str	w0, [x19, 2640]
-	mov	w0, w21
+	mov	w0, w22
 	bl	log2phys
-	ldr	w0, [x29, 56]
+	ldr	w0, [x29, 48]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1342:
+.L1353:
 	ldrh	w0, [x19, 270]
-	add	w21, w21, 1
+	add	w22, w22, 1
 	sub	w20, w20, w0
-	b	.L1341
-.L1345:
+	b	.L1352
+.L1359:
 	mov	w0, -1
-	b	.L1337
+	b	.L1348
+.L1356:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 64
+	ret
 	.size	sftl_discard, .-sftl_discard
 	.align	2
 	.global	FtlVpcCheckAndModify
 	.type	FtlVpcCheckAndModify, %function
 FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC111
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
-	add	x19, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
+	adrp	x22, __stack_chk_guard
+	stp	x23, x24, [sp, 48]
+	add	x0, x22, :lo12:__stack_chk_guard
+	add	x19, x20, :lo12:.LANCHOR0
+	mov	w21, 0
+	ldr	x1, [x0]
+	str	x1, [x29, 72]
+	mov	x1,0
+	adrp	x0, .LC111
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 576
 	add	x0, x0, :lo12:.LC111
-	str	x23, [sp, 48]
 	bl	sftl_printk
 	ldr	x0, [x19, 3568]
-	mov	w21, 0
-	ldrh	w2, [x19, 254]
 	mov	w1, 0
+	ldrh	w2, [x19, 254]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1355:
+.L1369:
 	ldr	w0, [x19, 2632]
 	cmp	w21, w0
-	bcc	.L1357
-	adrp	x22, .LC121
+	bcc	.L1371
+	adrp	x23, .LC121
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC121
+	add	x23, x23, :lo12:.LC121
 	mov	w19, 0
-	mov	w23, 65535
-.L1358:
+	mov	w24, 65535
+.L1372:
 	ldrh	w0, [x20, 252]
 	cmp	w0, w19
-	bhi	.L1363
+	bhi	.L1377
 	bl	l2p_flush
+	add	x22, x22, :lo12:__stack_chk_guard
 	bl	FtlVpcTblFlush
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 80
-	ret
-.L1357:
+	ldr	x1, [x29, 72]
+	ldr	x0, [x22]
+	eor	x0, x1, x0
+	cbz	x0, .L1378
+	bl	__stack_chk_fail
+.L1371:
 	mov	w2, 0
-	add	x1, x29, 76
+	add	x1, x29, 68
 	mov	w0, w21
 	bl	log2phys
-	ldr	w0, [x29, 76]
+	ldr	w0, [x29, 68]
 	cmn	w0, #1
-	beq	.L1356
+	beq	.L1370
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldr	x2, [x19, 3568]
@@ -9216,48 +9410,54 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1356:
+.L1370:
 	add	w21, w21, 1
-	b	.L1355
-.L1363:
+	b	.L1369
+.L1377:
 	ldr	x0, [x20, 80]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
 	ldr	x0, [x20, 3568]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1360
-	cmp	w2, w23
-	beq	.L1360
-	mov	x0, x22
+	beq	.L1374
+	cmp	w2, w24
+	beq	.L1374
+	mov	x0, x23
 	mov	w1, w19
 	bl	sftl_printk
 	ldrh	w0, [x20, 32]
 	cmp	w0, w19
-	beq	.L1360
+	beq	.L1374
 	ldrh	w0, [x20, 136]
 	cmp	w0, w19
-	beq	.L1360
+	beq	.L1374
 	ldrh	w0, [x20, 88]
 	cmp	w0, w19
-	beq	.L1360
+	beq	.L1374
 	ldr	x0, [x20, 80]
 	ldrh	w1, [x0, x21]
-	cbnz	w1, .L1362
+	cbnz	w1, .L1376
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
-.L1360:
+.L1374:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1358
-.L1362:
+	b	.L1372
+.L1376:
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
 	mov	w0, w19
 	bl	update_vpc_list
-	b	.L1360
+	b	.L1374
+.L1378:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 80
+	ret
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
@@ -9273,7 +9473,7 @@ allocate_new_data_superblock:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 252]
 	cmp	w0, w20
-	bcs	.L1369
+	bcs	.L1384
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9281,38 +9481,38 @@ allocate_new_data_superblock:
 	add	x1, x1, 600
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1369:
+.L1384:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L1370
+	beq	.L1385
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x20, 1, 16
 	ldr	x1, [x1, 80]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1371
+	cbz	w0, .L1386
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1370:
+.L1385:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x21, 8]
 	mov	w1, 65535
 	ldrh	w0, [x2, 3714]
 	cmp	w0, w1
-	beq	.L1372
+	beq	.L1387
 	cmp	w20, w0
-	bne	.L1373
+	bne	.L1388
 	ldr	x2, [x2, 80]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1374
-.L1373:
+	cbz	w1, .L1389
+.L1388:
 	bl	update_vpc_list
-.L1374:
+.L1389:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	w0, [x19, 3714]
-.L1372:
+.L1387:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9324,70 +9524,76 @@ allocate_new_data_superblock:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1371:
+.L1386:
 	mov	w0, w20
 	bl	INSERT_FREE_LIST
-	b	.L1370
+	b	.L1385
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
 	.type	FtlProgPages, %function
 FtlProgPages:
 	stp	x29, x30, [sp, -96]!
-	mov	w2, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x20, x3
-	stp	x23, x24, [sp, 48]
-	adrp	x23, .LC122
 	stp	x21, x22, [sp, 32]
-	adrp	x24, .LANCHOR0
-	str	x25, [sp, 64]
-	mov	w21, w1
-	add	x23, x23, :lo12:.LC122
-	add	x25, x24, :lo12:.LANCHOR0
-	ldrb	w3, [x3, 9]
-	ubfiz	x21, x21, 5, 32
-	add	x21, x21, 4
-	add	x19, x0, 4
-	add	x21, x0, x21
+	mov	w22, w1
+	stp	x23, x24, [sp, 48]
+	adrp	x21, __stack_chk_guard
+	stp	x25, x26, [sp, 64]
+	add	x2, x21, :lo12:__stack_chk_guard
+	ubfiz	x22, x22, 5, 32
+	mov	x23, x0
+	ldr	x3, [x2]
+	str	x3, [x29, 88]
+	mov	x3,0
+	add	x22, x22, 4
+	ldrb	w3, [x20, 9]
+	adrp	x24, .LC122
+	adrp	x25, .LANCHOR0
+	add	x19, x23, 4
+	add	x22, x23, x22
+	add	x24, x24, :lo12:.LC122
+	add	x26, x25, :lo12:.LANCHOR0
+	mov	w2, 0
 	bl	FlashProgPages
-.L1380:
-	cmp	x21, x19
-	beq	.L1386
-	sub	x22, x19, #4
-	b	.L1387
-.L1382:
+.L1395:
+	cmp	x22, x19
+	beq	.L1401
+	sub	x23, x19, #4
+	b	.L1402
+.L1397:
 	ldr	w1, [x19]
-	mov	x0, x23
+	mov	x0, x24
 	bl	sftl_printk
 	ldr	w0, [x19]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1381
+	cbnz	w0, .L1396
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1381:
+.L1396:
 	mov	x0, x20
 	bl	get_new_active_ppa
 	str	w0, [x19]
 	mov	w2, 0
-	str	w0, [x29, 92]
+	str	w0, [x29, 84]
 	mov	w1, 1
 	ldrb	w3, [x20, 9]
-	mov	x0, x22
+	mov	x0, x23
 	bl	FlashProgPages
-.L1387:
+.L1402:
 	ldr	w2, [x19, -4]
 	cmp	w2, 256
 	ccmn	w2, #1, 4, ne
-	beq	.L1382
+	beq	.L1397
 	ldrb	w1, [x20, 6]
-	ldrh	w0, [x25, 244]
+	ldrh	w0, [x26, 244]
 	cmp	w1, w0
-	bcc	.L1383
+	bcc	.L1398
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9395,42 +9601,42 @@ FtlProgPages:
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1383:
+.L1398:
 	add	x1, x29, 96
-	ldr	w0, [x22, 4]
+	ldr	w0, [x23, 4]
 	mov	w2, 1
-	str	w0, [x1, -4]!
-	ldr	w0, [x22, 24]
+	str	w0, [x1, -12]!
+	ldr	w0, [x23, 24]
 	bl	log2phys
-	ldr	x0, [x22, 16]
+	ldr	x0, [x23, 16]
 	ldr	w4, [x0, 12]
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	and	w1, w0, 65535
-	mov	w22, w1
+	mov	w23, w1
 	cmn	w4, #1
-	beq	.L1384
-	add	x2, x24, :lo12:.LANCHOR0
+	beq	.L1399
+	add	x2, x25, :lo12:.LANCHOR0
 	ubfiz	x0, x1, 1, 16
 	ldr	x2, [x2, 80]
 	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1385
+	cbnz	w0, .L1400
 	adrp	x0, .LC123
 	mov	w2, 0
 	add	x0, x0, :lo12:.LC123
 	bl	sftl_printk
-.L1385:
-	mov	w0, w22
+.L1400:
+	mov	w0, w23
 	bl	decrement_vpc_count
-.L1384:
+.L1399:
 	add	x19, x19, 32
-	b	.L1380
-.L1386:
+	b	.L1395
+.L1401:
 	adrp	x0, .LANCHOR0+244
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, #:lo12:.LANCHOR0+244]
 	cmp	w1, w0
-	bcc	.L1379
+	bcc	.L1394
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9438,11 +9644,18 @@ FtlProgPages:
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1379:
+.L1394:
+	add	x21, x21, :lo12:__stack_chk_guard
+	ldr	x1, [x29, 88]
+	ldr	x0, [x21]
+	eor	x0, x1, x0
+	cbz	x0, .L1404
+	bl	__stack_chk_fail
+.L1404:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
+	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
 	.size	FtlProgPages, .-FtlProgPages
@@ -9455,65 +9668,70 @@ FtlGcFreeTempBlock:
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
-	add	x2, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
+	adrp	x21, __stack_chk_guard
 	stp	x23, x24, [sp, 48]
-	str	x25, [sp, 64]
+	add	x1, x21, :lo12:__stack_chk_guard
+	stp	x25, x26, [sp, 64]
+	ldr	x2, [x1]
+	str	x2, [x29, 88]
+	mov	x2,0
+	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w4, [x2, 136]
 	ldrh	w1, [x2, 314]
 	cmp	w4, w3
-	bne	.L1394
-.L1401:
+	bne	.L1410
+.L1417:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	add	x1, x0, 136
 	ldrh	w3, [x0, 136]
 	str	wzr, [x0, 3720]
 	cmp	w3, w2
-	bne	.L1414
-.L1418:
+	bne	.L1431
+.L1435:
 	mov	w0, 0
-.L1393:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
-	ldp	x29, x30, [sp], 96
-	ret
-.L1394:
+.L1409:
+	add	x21, x21, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 88]
+	ldr	x1, [x21]
+	eor	x1, x2, x1
+	cbz	x1, .L1426
+	bl	__stack_chk_fail
+.L1410:
 	adrp	x20, .LANCHOR2
-	cbz	w0, .L1397
+	cbz	w0, .L1413
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1398
-.L1399:
+	beq	.L1414
+.L1415:
 	mov	w1, 2
-.L1397:
+.L1413:
 	add	x20, x20, :lo12:.LANCHOR2
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 136
 	bl	FtlGcScanTempBlk
-	str	w0, [x29, 92]
+	str	w0, [x29, 84]
 	mov	w0, 65535
 	ldrh	w1, [x20, 4]
 	cmp	w1, w0
-	beq	.L1401
+	beq	.L1417
 	mov	w0, 1
-	b	.L1393
-.L1398:
+	b	.L1409
+.L1414:
 	strh	wzr, [x0, 4]
 	ldrh	w0, [x2, 236]
 	cmp	w0, 17
-	bhi	.L1399
-	b	.L1397
-.L1414:
+	bhi	.L1415
+	b	.L1413
+.L1431:
 	ldrh	w2, [x0, 3304]
 	ldrb	w1, [x1, 7]
 	ldrh	w0, [x0, 314]
 	mul	w0, w1, w0
 	cmp	w2, w0
-	beq	.L1402
+	beq	.L1418
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9521,11 +9739,11 @@ FtlGcFreeTempBlock:
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1402:
+.L1418:
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w21, 0
+	mov	w22, 0
 	mov	x20, x0
-	mov	w25, 12
+	mov	w26, 12
 	ldrb	w1, [x0, 143]
 	ldrh	w4, [x0, 314]
 	ldr	x2, [x0, 80]
@@ -9536,19 +9754,19 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2656]
-.L1403:
+.L1419:
 	ldrh	w0, [x20, 3304]
-	cmp	w0, w21
-	bhi	.L1407
+	cmp	w0, w22
+	bhi	.L1423
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x20, 136]
 	ldr	x2, [x20, 80]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1408
+	cbz	w1, .L1424
 	bl	INSERT_DATA_LIST
-.L1409:
+.L1425:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
@@ -9561,51 +9779,58 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x19, 236]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1418
+	ble	.L1435
 	mov	w0, 20
 	strh	w0, [x19, 3232]
-	b	.L1418
-.L1407:
-	umull	x23, w21, w25
-	ldr	x24, [x20, 3312]
+	b	.L1435
+.L1423:
+	umull	x24, w22, w26
+	ldr	x25, [x20, 3312]
 	ldr	w1, [x20, 2632]
-	add	x22, x24, x23
-	ldr	w0, [x22, 8]
+	add	x23, x25, x24
+	ldr	w0, [x23, 8]
 	cmp	w0, w1
-	bcc	.L1404
-.L1416:
+	bcc	.L1420
+.L1433:
 	ldrh	w0, [x20, 136]
-	b	.L1417
-.L1404:
-	add	x1, x29, 92
+	b	.L1434
+.L1420:
+	add	x1, x29, 84
 	mov	w2, 0
 	bl	log2phys
-	ldr	w0, [x24, x23]
-	ldr	w1, [x29, 92]
+	ldr	w0, [x25, x24]
+	ldr	w1, [x29, 84]
 	cmp	w0, w1
-	bne	.L1406
+	bne	.L1422
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
-	mov	w23, w0
-	ldr	w0, [x22, 8]
+	mov	w24, w0
+	ldr	w0, [x23, 8]
 	mov	w2, 1
-	add	x1, x22, 4
+	add	x1, x23, 4
 	bl	log2phys
-	mov	w0, w23
-.L1417:
+	mov	w0, w24
+.L1434:
 	bl	decrement_vpc_count
-	b	.L1405
-.L1406:
-	ldr	w0, [x22, 4]
+	b	.L1421
+.L1422:
+	ldr	w0, [x23, 4]
 	cmp	w1, w0
-	bne	.L1416
-.L1405:
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	b	.L1403
-.L1408:
+	bne	.L1433
+.L1421:
+	add	w22, w22, 1
+	and	w22, w22, 65535
+	b	.L1419
+.L1424:
 	bl	INSERT_FREE_LIST
-	b	.L1409
+	b	.L1425
+.L1426:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 96
+	ret
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -9623,13 +9848,13 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19, 138]
 	ldrh	w0, [x19, 314]
 	cmp	w1, w0
-	bcc	.L1419
+	bcc	.L1436
 	add	x0, x19, 3648
 	bl	FtlMapBlkWriteDump_data
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19, 3720]
-.L1419:
+.L1436:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9677,43 +9902,43 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x19, 3448]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1425:
+.L1442:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1428
+	bcc	.L1445
 	ldr	x0, [x19, 3448]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
 	ldrh	w0, [x19, 140]
-	cbnz	w0, .L1430
+	cbnz	w0, .L1447
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w0, 1
-.L1424:
+.L1441:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1428:
+.L1445:
 	ldr	x2, [x19, 3448]
 	ubfiz	x0, x10, 5, 16
 	add	x1, x2, x0
 	ldr	w2, [x2, x0]
 	ldr	x3, [x1, 16]
 	cmn	w2, #1
-	bne	.L1426
-.L1432:
+	bne	.L1443
+.L1449:
 	ldr	w1, [x1, 4]
 	ldr	w0, [x3, 12]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1425
-.L1426:
+	b	.L1442
+.L1443:
 	ldr	w2, [x3, 8]
-	b	.L1432
-.L1430:
+	b	.L1449
+.L1447:
 	mov	w0, 0
-	b	.L1424
+	b	.L1441
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9728,10 +9953,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0, 136]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1434
+	beq	.L1451
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1435
-.L1434:
+	cbnz	w0, .L1452
+.L1451:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
@@ -9744,7 +9969,7 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1435:
+.L1452:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 136
 	bl	get_new_active_ppa
@@ -9756,162 +9981,168 @@ Ftl_get_new_temp_ppa:
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
 rk_ftl_garbage_collect:
-	stp	x29, x30, [sp, -128]!
+	stp	x29, x30, [sp, -144]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
-	add	x1, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
+	adrp	x24, __stack_chk_guard
 	stp	x27, x28, [sp, 80]
-	ldr	w2, [x1, 3424]
-	cbnz	w2, .L1516
-	ldrh	w2, [x1, 2592]
-	cmp	w2, 47
-	bls	.L1516
-	mov	w23, w0
-	adrp	x0, .LANCHOR2+4
-	ldrh	w2, [x0, #:lo12:.LANCHOR2+4]
-	mov	w0, 65535
-	cmp	w2, w0
-	bne	.L1439
-.L1442:
+	mov	w27, w0
+	stp	x21, x22, [sp, 32]
+	add	x0, x24, :lo12:__stack_chk_guard
+	stp	x25, x26, [sp, 64]
+	str	x24, [x29, 112]
+	ldr	x1, [x0]
+	str	x1, [x29, 136]
+	mov	x1,0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x0, 3424]
+	cbnz	w1, .L1534
+	ldrh	w1, [x0, 2592]
+	cmp	w1, 47
+	bls	.L1534
+	adrp	x1, .LANCHOR2+4
+	ldrh	w2, [x1, #:lo12:.LANCHOR2+4]
+	mov	w1, 65535
+	cmp	w2, w1
+	bne	.L1456
+.L1459:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 232]
 	cmp	w1, w2
-	bne	.L1440
-.L1441:
+	bne	.L1457
+.L1458:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	FtlReadRefresh
 	mov	w21, 65535
 	ldr	w0, [x20, 3236]
 	ldrh	w1, [x20, 184]
 	add	w0, w0, 1
-	add	w0, w0, w23, lsl 7
+	add	w0, w0, w27, lsl 7
 	str	w0, [x20, 3236]
 	cmp	w1, w21
-	bne	.L1443
+	bne	.L1460
 	ldrh	w21, [x20, 136]
 	cmp	w21, w1
-	bne	.L1519
+	bne	.L1537
 	ldrh	w22, [x20, 234]
 	cmp	w22, w21
-	bne	.L1443
+	bne	.L1460
 	ldrh	w1, [x20, 236]
 	mov	w2, 1024
 	cmp	w1, 24
 	mov	w1, 5120
 	csel	w1, w1, w2, cc
 	cmp	w0, w1
-	bls	.L1522
+	bls	.L1540
 	strh	wzr, [x20, 3968]
 	str	wzr, [x20, 3236]
 	bl	GetSwlReplaceBlock
 	and	w21, w0, 65535
 	cmp	w21, w22
-	bne	.L1523
+	bne	.L1541
 	ldrh	w1, [x20, 236]
 	ldrh	w0, [x20, 3234]
 	cmp	w1, w0
-	bcs	.L1446
+	bcs	.L1463
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
 	cmp	w0, w21
-	beq	.L1448
+	beq	.L1465
 	ldr	x1, [x20, 80]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1449
+	bhi	.L1466
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
 	strh	w0, [x20, 3234]
 	cmp	w22, w21
-	bne	.L1445
-.L1448:
+	bne	.L1462
+.L1465:
 	bl	FtlGcReFreshBadBlk
-.L1443:
-	cmp	w23, 0
-	mov	w0, 65535
+.L1460:
+	cmp	w27, 0
+	mov	w1, 65535
+	ccmp	w21, w1, 0, eq
+	bne	.L1468
 	add	x1, x19, :lo12:.LANCHOR0
-	ccmp	w21, w0, 0, eq
-	bne	.L1451
 	ldrh	w0, [x1, 236]
 	cmp	w0, 24
-	bhi	.L1524
+	bhi	.L1542
 	cmp	w0, 16
 	ldrh	w20, [x1, 314]
-	bls	.L1453
+	bls	.L1470
 	lsr	w20, w20, 5
-.L1452:
+.L1469:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1456
+	bcs	.L1473
 	ldrh	w0, [x1, 136]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1457
+	bne	.L1474
 	ldrh	w2, [x1, 234]
 	cmp	w2, w0
-	bne	.L1457
+	bne	.L1474
 	ldrh	w0, [x1, 3968]
-	cbnz	w0, .L1458
+	cbnz	w0, .L1475
 	ldr	w2, [x1, 2632]
 	ldr	w3, [x1, 2628]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1459
-.L1458:
+	bcs	.L1476
+.L1475:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2700]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1460:
+.L1477:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1437:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
-	ret
-.L1439:
-	ldrh	w1, [x1, 136]
-	cmp	w1, w0
-	beq	.L1442
+.L1454:
+	ldr	x1, [x29, 112]
+	add	x24, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 136]
+	ldr	x1, [x24]
+	eor	x1, x2, x1
+	cbz	x1, .L1532
+	bl	__stack_chk_fail
+.L1456:
+	ldrh	w0, [x0, 136]
+	cmp	w0, w1
+	beq	.L1459
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1442
+	cbz	w0, .L1459
 	mov	w0, 1
-	b	.L1437
-.L1440:
+	b	.L1454
+.L1457:
 	ldrh	w3, [x0, 234]
 	cmp	w3, w2
-	bne	.L1441
+	bne	.L1458
 	strh	w1, [x0, 234]
 	mov	w1, -1
 	strh	w1, [x0, 232]
-	b	.L1441
-.L1449:
+	b	.L1458
+.L1466:
 	mov	w0, 64
-.L1554:
+.L1572:
 	strh	w0, [x20, 3234]
-	b	.L1448
-.L1446:
+	b	.L1465
+.L1463:
 	mov	w0, 80
-	b	.L1554
-.L1523:
+	b	.L1572
+.L1541:
 	mov	w22, w21
-.L1445:
+.L1462:
 	add	x0, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x22, 1, 32
 	mov	w21, w22
@@ -9925,73 +10156,73 @@ rk_ftl_garbage_collect:
 	adrp	x0, .LC124
 	add	x0, x0, :lo12:.LC124
 	bl	sftl_printk
-	b	.L1448
-.L1519:
+	b	.L1465
+.L1537:
 	mov	w21, w1
-	b	.L1443
-.L1522:
+	b	.L1460
+.L1540:
 	mov	w21, w22
-	b	.L1443
-.L1453:
+	b	.L1460
+.L1470:
 	cmp	w0, 12
-	bls	.L1454
+	bls	.L1471
 	lsr	w20, w20, 4
-	b	.L1452
-.L1454:
+	b	.L1469
+.L1471:
 	mov	w1, w20
 	cmp	w0, 9
 	lsr	w20, w20, 2
 	csel	w20, w20, w1, cs
-	b	.L1452
-.L1524:
+	b	.L1469
+.L1542:
 	mov	w20, 1
-	b	.L1452
-.L1459:
+	b	.L1469
+.L1476:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1460
-.L1457:
+	b	.L1477
+.L1474:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1456:
+.L1473:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3320]
-	cbz	w0, .L1525
+	cbz	w0, .L1543
 	add	w20, w20, 32
 	and	w20, w20, 65535
-.L1525:
+.L1543:
 	mov	w21, 65535
-.L1462:
+.L1479:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 184]
 	cmp	w1, w2
-	bne	.L1471
+	bne	.L1488
 	cmp	w21, w1
-	beq	.L1472
+	beq	.L1489
 	strh	w21, [x0, 184]
-.L1473:
+.L1490:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x5, 184]
 	strb	wzr, [x5, 192]
 	cmp	w0, w1
-	beq	.L1471
+	beq	.L1488
 	bl	IsBlkInGcList
-	cbz	w0, .L1476
+	cbz	w0, .L1493
 	mov	w0, -1
 	strh	w0, [x5, 184]
-.L1476:
+.L1493:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	add	x24, x22, 184
+	add	x23, x22, 184
 	ldrh	w1, [x22, 184]
 	cmp	w1, w0
-	beq	.L1471
-	mov	x0, x24
+	beq	.L1488
+	mov	x0, x23
 	bl	make_superblock
 	ldrh	w1, [x22, 184]
 	ldr	x0, [x22, 80]
@@ -10000,80 +10231,81 @@ rk_ftl_garbage_collect:
 	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
 	strh	w0, [x22, 3972]
-.L1471:
+.L1488:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w2, [x0, 32]
 	cmp	w2, w1
-	beq	.L1477
+	beq	.L1494
 	ldrh	w2, [x0, 88]
 	cmp	w2, w1
-	beq	.L1477
+	beq	.L1494
 	ldrh	w0, [x0, 136]
 	cmp	w0, w1
-	bne	.L1478
-.L1477:
+	bne	.L1495
+.L1494:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L1478:
-	adrp	x25, .LANCHOR1
-	add	x25, x25, :lo12:.LANCHOR1
-	add	x25, x25, 672
-.L1513:
+.L1495:
+	adrp	x23, .LANCHOR1
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x23, x23, 672
+.L1530:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w24, [x22, 184]
-	cmp	w24, w0
-	bne	.L1479
+	ldrh	w25, [x22, 184]
+	cmp	w25, w0
+	bne	.L1496
 	mov	w26, 2
 	str	wzr, [x22, 3244]
-.L1480:
+.L1497:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
 	strh	w6, [x22, 184]
-	cmp	w6, w24
-	bne	.L1481
+	cmp	w6, w25
+	bne	.L1498
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1437
-.L1451:
-	ldrh	w2, [x1, 136]
-	cmp	w2, w0
-	bne	.L1528
-	ldrh	w0, [x1, 234]
-	cmp	w0, w2
-	bne	.L1528
-	cmp	w21, w0
-	bne	.L1528
-	ldrh	w0, [x1, 184]
-	cmp	w0, w21
-	beq	.L1463
-.L1528:
+	b	.L1454
+.L1468:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x0, 136]
+	cmp	w2, w1
+	bne	.L1546
+	ldrh	w1, [x0, 234]
+	cmp	w1, w2
+	bne	.L1546
+	cmp	w21, w1
+	bne	.L1546
+	ldrh	w1, [x0, 184]
+	cmp	w1, w21
+	beq	.L1480
+.L1546:
 	mov	w20, 1
-	b	.L1462
-.L1463:
-	ldrh	w2, [x1, 236]
-	ldrh	w0, [x1, 3232]
-	str	wzr, [x1, 3244]
-	cmp	w2, w0
-	bls	.L1464
-	ldrh	w0, [x1, 3968]
-	cbnz	w0, .L1465
-	ldr	w0, [x1, 2632]
-	ldr	w2, [x1, 2628]
-	add	w0, w0, w0, lsl 1
-	cmp	w2, w0, lsr 2
-	bcs	.L1466
-.L1465:
+	b	.L1479
+.L1480:
+	ldrh	w2, [x0, 236]
+	ldrh	w1, [x0, 3232]
+	str	wzr, [x0, 3244]
+	cmp	w2, w1
+	bls	.L1481
+	ldrh	w1, [x0, 3968]
+	cbnz	w1, .L1482
+	ldr	w1, [x0, 2632]
+	ldr	w2, [x0, 2628]
+	add	w1, w1, w1, lsl 1
+	cmp	w2, w1, lsr 2
+	bcs	.L1483
+.L1482:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-.L1555:
 	strh	w0, [x1, 3232]
+.L1484:
 	bl	FtlReadRefresh
 	mov	w0, 0
 	bl	List_get_gc_head_node
@@ -10082,16 +10314,17 @@ rk_ftl_garbage_collect:
 	ldr	x2, [x1, 80]
 	ldrh	w0, [x2, x0]
 	cmp	w0, 4
-	bls	.L1464
+	bls	.L1481
 	ldrh	w0, [x1, 3968]
-	b	.L1437
-.L1466:
-	mov	w0, 18
-	b	.L1555
-.L1464:
+	b	.L1454
+.L1483:
+	mov	w1, 18
+	strh	w1, [x0, 3232]
+	b	.L1484
+.L1481:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x20, 3968]
-	cbnz	w0, .L1528
+	cbnz	w0, .L1546
 	ldrh	w5, [x20, 2700]
 	add	w0, w5, w5, lsl 1
 	asr	w0, w0, 2
@@ -10107,47 +10340,47 @@ rk_ftl_garbage_collect:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1469
+	ble	.L1486
 	ldrh	w0, [x20, 236]
 	sub	w5, w5, #1
 	cmp	w0, w5
-	blt	.L1469
+	blt	.L1486
 	bl	FtlReadRefresh
 	ldrh	w0, [x20, 3968]
-	b	.L1437
-.L1469:
-	cbnz	w1, .L1528
+	b	.L1454
+.L1486:
+	cbnz	w1, .L1546
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x19, 236]
 	add	w0, w0, 1
-	b	.L1437
-.L1472:
+	b	.L1454
+.L1489:
 	ldrh	w1, [x0, 234]
 	cmp	w1, w21
-	beq	.L1473
+	beq	.L1490
 	ldr	x2, [x0, 80]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1474
+	cbnz	w1, .L1491
 	mov	w1, -1
 	strh	w1, [x0, 234]
-.L1474:
+.L1491:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 234]
 	strh	w1, [x0, 184]
 	mov	w1, -1
 	strh	w1, [x0, 234]
-	b	.L1473
-.L1481:
+	b	.L1490
+.L1498:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1482
+	cbz	w0, .L1499
 	strh	w5, [x22, 3240]
-	b	.L1480
-.L1482:
+	b	.L1497
+.L1499:
 	ldrh	w4, [x22, 244]
 	ubfiz	x1, x6, 1, 16
 	ldrh	w0, [x22, 314]
@@ -10158,76 +10391,76 @@ rk_ftl_garbage_collect:
 	ldrh	w3, [x2, x1]
 	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L1484
+	bgt	.L1501
 	cmp	w5, 48
-	bls	.L1485
+	bls	.L1502
 	cmp	w3, 8
-	bls	.L1485
+	bls	.L1502
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1485
-.L1484:
+	bhi	.L1502
+.L1501:
 	strh	wzr, [x22, 3240]
-.L1485:
+.L1502:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1486
-	cmp	w21, w24
-	bne	.L1486
+	bgt	.L1503
+	cmp	w21, w25
+	bne	.L1503
 	ldrh	w0, [x22, 3240]
 	cmp	w0, 3
-	bhi	.L1486
+	bhi	.L1503
 	mov	w0, -1
 	strh	wzr, [x22, 3240]
 	strh	w0, [x22, 184]
-.L1556:
+.L1573:
 	ldrh	w0, [x22, 3968]
-	b	.L1437
-.L1486:
-	cbnz	w1, .L1487
+	b	.L1454
+.L1503:
+	cbnz	w1, .L1504
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1480
-.L1487:
+	b	.L1497
+.L1504:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0, 192]
 	ldrh	w0, [x0, 32]
 	cmp	w0, w6
-	bne	.L1488
+	bne	.L1505
 	adrp	x0, .LC8
 	mov	w2, 717
-	mov	x1, x25
+	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1488:
+.L1505:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w0, [x0, 88]
 	cmp	w1, w0
-	bne	.L1489
+	bne	.L1506
 	adrp	x0, .LC8
 	mov	w2, 718
-	mov	x1, x25
+	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1489:
+.L1506:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w0, [x0, 136]
 	cmp	w1, w0
-	bne	.L1490
+	bne	.L1507
 	adrp	x0, .LC8
 	mov	w2, 719
-	mov	x1, x25
+	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1490:
+.L1507:
 	add	x22, x19, :lo12:.LANCHOR0
-	add	x24, x22, 184
-	mov	x0, x24
+	add	x25, x22, 184
+	mov	x0, x25
 	bl	make_superblock
 	ldrh	w1, [x22, 184]
 	ldr	x0, [x22, 80]
@@ -10236,12 +10469,12 @@ rk_ftl_garbage_collect:
 	strh	w0, [x22, 3972]
 	strh	wzr, [x22, 186]
 	strb	wzr, [x22, 190]
-.L1479:
+.L1496:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	str	w0, [x1, 3424]
 	ldrh	w26, [x1, 314]
-	cbz	w23, .L1491
+	cbz	w27, .L1508
 	ldrh	w0, [x1, 244]
 	ldrh	w2, [x1, 184]
 	ldr	x1, [x1, 80]
@@ -10252,92 +10485,93 @@ rk_ftl_garbage_collect:
 	sdiv	w0, w0, w1
 	add	w20, w20, w0
 	and	w20, w20, 65535
-.L1491:
+.L1508:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 186]
 	add	w1, w0, w20
 	cmp	w1, w26
-	ble	.L1492
+	ble	.L1509
 	sub	w20, w26, w0
 	and	w20, w20, 65535
-.L1492:
-	mov	w27, 0
-.L1493:
-	cmp	w20, w27, uxth
-	bls	.L1501
+.L1509:
+	mov	w28, 0
+.L1510:
+	cmp	w20, w28, uxth
+	bls	.L1518
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w24, 0
+	mov	w22, 0
 	add	x3, x0, 200
 	mov	w1, 0
 	mov	w6, 65535
 	ldrh	w4, [x0, 186]
 	ldrh	w7, [x0, 244]
-	add	w4, w4, w27
-	b	.L1502
-.L1495:
+	add	w4, w4, w28
+	b	.L1519
+.L1512:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1494
+	beq	.L1511
 	ldr	x5, [x0, 3280]
-	ubfiz	x8, x24, 5, 16
-	add	w24, w24, 1
+	ubfiz	x8, x22, 5, 16
+	add	w22, w22, 1
 	orr	w2, w4, w2, lsl 10
 	add	x5, x5, x8
-	and	w24, w24, 65535
+	and	w22, w22, 65535
 	str	w2, [x5, 4]
-.L1494:
+.L1511:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1502:
+.L1519:
 	cmp	w1, w7
-	bne	.L1495
-	add	x22, x19, :lo12:.LANCHOR0
-	mov	w1, w24
-	mov	x28, 0
-	ldrb	w2, [x22, 192]
-	ldr	x0, [x22, 3280]
+	bne	.L1512
+	add	x24, x19, :lo12:.LANCHOR0
+	mov	w1, w22
+	mov	x25, 0
+	ldrb	w2, [x24, 192]
+	ldr	x0, [x24, 3280]
 	bl	FlashReadPages
-	ubfiz	x0, x24, 5, 16
-	str	x0, [x29, 104]
-.L1496:
-	ldr	x0, [x29, 104]
-	cmp	x0, x28
-	bne	.L1500
-	add	w27, w27, 1
-	b	.L1493
-.L1500:
+	ubfiz	x0, x22, 5, 16
+	mov	x22, x24
+	str	x0, [x29, 120]
+.L1513:
+	ldr	x0, [x29, 120]
+	cmp	x0, x25
+	bne	.L1517
+	add	w28, w28, 1
+	b	.L1510
+.L1517:
 	ldr	x0, [x22, 3280]
-	add	x1, x0, x28
-	ldr	w0, [x0, x28]
+	add	x1, x0, x25
+	ldr	w0, [x0, x25]
 	cmn	w0, #1
-	beq	.L1497
+	beq	.L1514
 	ldr	x24, [x1, 16]
 	mov	w0, 61589
 	ldrh	w1, [x24]
 	cmp	w1, w0
-	bne	.L1497
-	ldr	w4, [x24, 8]
-	cmn	w4, #1
-	bne	.L1498
-	str	w4, [x29, 96]
+	bne	.L1514
+	ldr	w5, [x24, 8]
+	cmn	w5, #1
+	bne	.L1515
+	str	w5, [x29, 104]
 	mov	w2, 753
-	mov	x1, x25
+	mov	x1, x23
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	ldr	w4, [x29, 96]
-.L1498:
+	ldr	w5, [x29, 104]
+.L1515:
 	mov	w2, 0
-	add	x1, x29, 120
-	mov	w0, w4
+	add	x1, x29, 128
+	mov	w0, w5
 	bl	log2phys
 	ldr	x0, [x22, 3280]
-	ldr	w1, [x29, 120]
-	add	x0, x0, x28
+	ldr	w1, [x29, 128]
+	add	x0, x0, x25
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1497
+	bne	.L1514
 	ldrh	w1, [x22, 3970]
 	ldr	x2, [x22, 3448]
 	add	w1, w1, 1
@@ -10345,21 +10579,21 @@ rk_ftl_garbage_collect:
 	ldr	w1, [x22, 3248]
 	ldr	w0, [x0, 24]
 	add	x1, x2, x1, lsl 5
-	str	x1, [x29, 96]
+	str	x1, [x29, 104]
 	str	w0, [x1, 24]
 	bl	Ftl_get_new_temp_ppa
-	ldr	x1, [x29, 96]
+	ldr	x1, [x29, 104]
 	str	w0, [x1, 4]
 	ldr	w0, [x22, 3248]
 	ldr	x1, [x22, 3448]
 	add	x0, x1, x0, lsl 5
 	ldr	x1, [x22, 3280]
-	add	x1, x1, x28
+	add	x1, x1, x25
 	ldr	x2, [x1, 8]
 	str	x2, [x0, 8]
 	ldr	x1, [x1, 16]
 	str	x1, [x0, 16]
-	ldr	w0, [x29, 120]
+	ldr	w0, [x29, 128]
 	mov	w1, 1
 	str	w0, [x24, 12]
 	ldrh	w0, [x22, 136]
@@ -10370,72 +10604,72 @@ rk_ftl_garbage_collect:
 	add	w0, w0, 1
 	str	w0, [x22, 3248]
 	ldr	x0, [x22, 3280]
-	add	x0, x0, x28
+	add	x0, x0, x25
 	bl	FtlGcBufAlloc
 	ldrb	w1, [x22, 143]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1499
+	beq	.L1516
 	ldrh	w0, [x22, 140]
-	cbnz	w0, .L1497
-.L1499:
+	cbnz	w0, .L1514
+.L1516:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1497
+	cbz	w0, .L1514
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	wzr, [x19, 186]
 	strh	w0, [x19, 184]
 	str	wzr, [x19, 3424]
 	ldrh	w0, [x19, 3968]
-	b	.L1437
-.L1497:
-	add	x28, x28, 32
-	b	.L1496
-.L1501:
+	b	.L1454
+.L1514:
+	add	x25, x25, 32
+	b	.L1513
+.L1518:
 	add	x22, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 186]
 	add	w20, w20, w0
 	and	w20, w20, 65535
 	strh	w20, [x22, 186]
 	cmp	w26, w20
-	bhi	.L1503
+	bhi	.L1520
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1504
+	cbz	w0, .L1521
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1504
+	cbz	w0, .L1521
 	str	wzr, [x22, 3424]
-	b	.L1556
-.L1504:
+	b	.L1573
+.L1521:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3970]
-	cbnz	w1, .L1505
+	cbnz	w1, .L1522
 	ldrh	w2, [x0, 184]
 	ldr	x1, [x0, 80]
 	ldrh	w1, [x1, x2, lsl 1]
-	cbz	w1, .L1505
+	cbz	w1, .L1522
 	mov	x20, x0
 	mov	w22, 0
-.L1506:
+.L1523:
 	ldr	w0, [x20, 2632]
 	cmp	w22, w0
-	bcs	.L1511
+	bcs	.L1528
 	mov	w2, 0
-	add	x1, x29, 124
+	add	x1, x29, 132
 	mov	w0, w22
 	bl	log2phys
-	ldr	w0, [x29, 124]
+	ldr	w0, [x29, 132]
 	cmn	w0, #1
-	beq	.L1507
+	beq	.L1524
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20, 184]
 	cmp	w1, w0, uxth
-	bne	.L1507
-.L1511:
+	bne	.L1524
+.L1528:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w22, w1
-	bcc	.L1505
+	bcc	.L1522
 	ldrh	w2, [x0, 184]
 	ldr	x1, [x0, 80]
 	strh	wzr, [x1, x2, lsl 1]
@@ -10443,291 +10677,319 @@ rk_ftl_garbage_collect:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1505:
+.L1522:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L1503:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 236]
-	str	wzr, [x0, 3424]
-	cmp	w1, 2
-	bhi	.L1512
-	ldrh	w20, [x0, 314]
-	b	.L1513
-.L1507:
+.L1520:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1, 236]
+	str	wzr, [x1, 3424]
+	cmp	w0, 2
+	bhi	.L1529
+	ldrh	w20, [x1, 314]
+	b	.L1530
+.L1524:
 	add	w22, w22, 1
-	b	.L1506
-.L1512:
-	ldrh	w0, [x0, 3968]
-	cmp	w0, 0
-	csinc	w0, w0, w1, ne
-	b	.L1437
-.L1516:
+	b	.L1523
+.L1529:
+	ldrh	w1, [x1, 3968]
+	cmp	w1, 0
+	csinc	w0, w1, w0, ne
+	b	.L1454
+.L1534:
 	mov	w0, 0
-	b	.L1437
+	b	.L1454
+.L1532:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 144
+	ret
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
 	.global	FtlRead
 	.type	FtlRead, %function
 FtlRead:
-	stp	x29, x30, [sp, -160]!
+	stp	x29, x30, [sp, -176]!
 	and	w0, w0, 255
 	cmp	w0, 16
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	w19, w1
-	stp	x23, x24, [sp, 48]
-	mov	x23, x3
 	stp	x25, x26, [sp, 64]
-	mov	w25, w2
+	mov	w26, w1
 	stp	x21, x22, [sp, 32]
+	adrp	x1, __stack_chk_guard
+	stp	x19, x20, [sp, 16]
+	mov	w25, w2
+	stp	x23, x24, [sp, 48]
+	add	x2, x1, :lo12:__stack_chk_guard
 	stp	x27, x28, [sp, 80]
-	bne	.L1558
-	mov	x2, x3
+	mov	x22, x3
+	str	x1, [x29, 112]
+	ldr	x3, [x2]
+	str	x3, [x29, 168]
+	mov	x3,0
+	bne	.L1575
+	mov	x2, x22
 	mov	w1, w25
-	add	w0, w19, 256
+	add	w0, w26, 256
 	bl	FtlVendorPartRead
-	mov	w21, w0
-.L1557:
-	mov	w0, w21
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 160
-	ret
-.L1558:
-	add	w0, w1, w2
-	str	w0, [x29, 128]
-	adrp	x0, .LANCHOR0
-	add	x3, x0, :lo12:.LANCHOR0
-	add	w2, w1, w2
-	str	x0, [x29, 96]
-	ldr	w1, [x3, 352]
-	cmp	w2, w1
-	bhi	.L1579
+	mov	w19, w0
+.L1574:
+	ldr	x1, [x29, 112]
+	mov	w0, w19
+	add	x1, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 168]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L1596
+	bl	__stack_chk_fail
+.L1575:
+	adrp	x1, .LANCHOR0
+	add	x3, x1, :lo12:.LANCHOR0
+	str	x1, [x29, 104]
+	ldr	w0, [x3, 352]
+	cmp	w26, w0
+	bcs	.L1599
+	cmp	w25, w0
+	bhi	.L1599
+	add	w1, w26, w25
+	str	w1, [x29, 144]
+	cmp	w0, w1
+	bcc	.L1599
 	adrp	x0, .LANCHOR2
-	ldr	w21, [x0, #:lo12:.LANCHOR2]
-	cmn	w21, #1
-	beq	.L1557
+	ldr	w19, [x0, #:lo12:.LANCHOR2]
+	cmn	w19, #1
+	beq	.L1574
 	ldrh	w0, [x3, 270]
-	sub	w24, w2, #1
-	mov	x26, x3
+	mov	x27, x3
+	mov	w23, 0
 	mov	w28, 0
-	mov	w21, 0
-	stp	wzr, wzr, [x29, 132]
-	str	wzr, [x29, 140]
-	udiv	w27, w19, w0
+	mov	w19, 0
+	stp	wzr, wzr, [x29, 148]
+	udiv	w1, w26, w0
+	str	w1, [x29, 156]
+	add	w1, w26, w25
+	sub	w24, w1, #1
+	ldr	w20, [x29, 156]
 	udiv	w24, w24, w0
+	ldr	w0, [x29, 156]
+	sub	w21, w24, w0
 	ldr	w0, [x3, 2664]
+	add	w21, w21, 1
 	add	w0, w0, w25
 	str	w0, [x3, 2664]
 	ldr	w0, [x3, 2636]
-	mov	w20, w27
-	sub	w22, w24, w27
-	add	w22, w22, 1
-	add	w0, w0, w22
+	add	w0, w0, w21
 	str	w0, [x3, 2636]
-.L1560:
-	cbnz	w22, .L1577
-	ldr	x0, [x29, 96]
+.L1577:
+	cbnz	w21, .L1594
+	ldr	x0, [x29, 104]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
-	cbnz	w1, .L1578
+	cbnz	w1, .L1595
 	ldrh	w0, [x0, 236]
 	cmp	w0, 31
-	bhi	.L1557
-.L1578:
+	bhi	.L1574
+.L1595:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1557
-.L1577:
-	add	x1, x29, 156
+	b	.L1574
+.L1594:
+	add	x1, x29, 164
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
-	ldr	w1, [x29, 156]
+	ldr	w1, [x29, 164]
 	cmn	w1, #1
-	bne	.L1561
-	mov	w5, 0
-.L1562:
-	ldrh	w0, [x26, 270]
-	cmp	w5, w0
-	bcc	.L1564
-.L1565:
+	bne	.L1578
+	mov	w6, 0
+.L1579:
+	ldrh	w0, [x27, 270]
+	cmp	w6, w0
+	bcc	.L1581
+.L1582:
 	add	w20, w20, 1
-	subs	w22, w22, #1
-	beq	.L1569
-	ldrh	w0, [x26, 244]
+	subs	w21, w21, #1
+	beq	.L1586
+	ldrh	w0, [x27, 244]
 	cmp	w28, w0, lsl 2
-	bne	.L1560
-.L1569:
-	cbz	w28, .L1560
-	ldr	x0, [x26, 3440]
+	bne	.L1577
+.L1586:
+	cbz	w28, .L1577
+	ldr	x0, [x27, 3440]
 	mov	w1, w28
 	mov	w2, 0
 	bl	FlashReadPages
-	ldr	w0, [x29, 132]
-	lsl	w0, w0, 9
-	str	w0, [x29, 112]
-	ldr	w0, [x29, 140]
+	ldr	w0, [x29, 148]
 	lsl	w0, w0, 9
-	str	x0, [x29, 120]
-	ldr	w0, [x29, 136]
+	str	w0, [x29, 128]
+	ldr	w0, [x29, 152]
 	lsl	w0, w0, 9
-	str	w0, [x29, 116]
+	str	x0, [x29, 136]
+	lsl	w0, w23, 9
+	str	w0, [x29, 132]
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
-	str	x0, [x29, 104]
-.L1576:
-	ldr	x0, [x26, 3440]
+	str	x0, [x29, 120]
+.L1593:
+	ldr	x0, [x27, 3440]
+	ldr	w2, [x29, 156]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
-	cmp	w27, w1
-	bne	.L1571
+	cmp	w2, w1
+	bne	.L1588
 	ldr	x1, [x0, 8]
-	ldr	x0, [x26, 3488]
+	ldr	x0, [x27, 3488]
 	cmp	x1, x0
-	bne	.L1572
-	ldr	x0, [x29, 120]
-	ldr	w2, [x29, 116]
+	bne	.L1589
+	ldr	x0, [x29, 136]
+	ldr	w2, [x29, 132]
 	add	x1, x1, x0
-	mov	x0, x23
-.L1589:
+	mov	x0, x22
+.L1609:
 	bl	ftl_memcpy
-.L1572:
-	ldr	x0, [x26, 3440]
+.L1589:
+	ldr	x0, [x27, 3440]
 	add	x0, x0, x28
 	ldr	x1, [x0, 16]
 	ldr	w2, [x0, 24]
 	ldr	w1, [x1, 8]
 	cmp	w2, w1
-	beq	.L1573
-	ldr	w1, [x26, 2792]
+	beq	.L1590
+	ldr	w1, [x27, 2792]
 	add	w1, w1, 1
-	str	w1, [x26, 2792]
-.L1573:
+	str	w1, [x27, 2792]
+.L1590:
 	ldr	w2, [x0]
 	cmn	w2, #1
-	bne	.L1574
-	ldr	w1, [x26, 2792]
-	mov	w21, w2
+	bne	.L1591
+	ldr	w1, [x27, 2792]
+	mov	w19, w2
 	add	w1, w1, 1
-	str	w1, [x26, 2792]
-.L1574:
+	str	w1, [x27, 2792]
+.L1591:
 	ldr	w1, [x0]
 	cmp	w1, 256
-	bne	.L1575
+	bne	.L1592
 	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1575:
-	ldr	x0, [x29, 104]
+.L1592:
+	ldr	x0, [x29, 120]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1576
+	bne	.L1593
 	mov	w28, 0
-	b	.L1560
-.L1564:
-	madd	w0, w20, w0, w5
-	cmp	w19, w0
-	bhi	.L1563
-	ldr	w1, [x29, 128]
+	b	.L1577
+.L1581:
+	madd	w0, w20, w0, w6
+	cmp	w26, w0
+	bhi	.L1580
+	ldr	w1, [x29, 144]
 	cmp	w1, w0
-	bls	.L1563
-	sub	w0, w0, w19
-	str	w5, [x29, 120]
+	bls	.L1580
+	sub	w0, w0, w26
+	str	w6, [x29, 136]
 	lsl	w0, w0, 9
 	mov	w2, 512
 	mov	w1, 0
-	add	x0, x23, x0
+	add	x0, x22, x0
 	bl	ftl_memset
-	ldr	w5, [x29, 120]
-.L1563:
-	add	w5, w5, 1
-	b	.L1562
-.L1561:
-	ldr	x0, [x26, 3440]
+	ldr	w6, [x29, 136]
+.L1580:
+	add	w6, w6, 1
+	b	.L1579
+.L1578:
+	ldr	x0, [x27, 3440]
 	ubfiz	x2, x28, 5, 32
-	cmp	w20, w27
 	add	x0, x0, x2
 	str	w1, [x0, 4]
-	ldrh	w0, [x26, 270]
-	bne	.L1566
-	ldr	x1, [x26, 3440]
-	ldr	x5, [x26, 3488]
+	ldr	w0, [x29, 156]
+	cmp	w20, w0
+	ldrh	w0, [x27, 270]
+	bne	.L1583
+	ldr	x1, [x27, 3440]
+	ldr	x6, [x27, 3488]
 	add	x1, x1, x2
-	str	x5, [x1, 8]
-	udiv	w5, w19, w0
-	msub	w3, w5, w0, w19
-	str	w3, [x29, 140]
-	sub	w5, w0, w3
-	cmp	w25, w5
-	csel	w3, w25, w5, ls
-	str	w3, [x29, 136]
-	cmp	w3, w0
-	bne	.L1567
-	str	x23, [x1, 8]
-.L1567:
-	ldr	x0, [x26, 3440]
-	ldr	x1, [x26, 3536]
+	str	x6, [x1, 8]
+	udiv	w6, w26, w0
+	msub	w3, w6, w0, w26
+	str	w3, [x29, 152]
+	sub	w23, w0, w3
+	cmp	w25, w23
+	csel	w23, w25, w23, ls
+	cmp	w23, w0
+	bne	.L1584
+	str	x22, [x1, 8]
+.L1584:
+	ldr	x0, [x27, 3440]
+	ldr	x1, [x27, 3536]
 	add	x2, x0, x2
-	ldrh	w0, [x26, 324]
+	ldrh	w0, [x27, 324]
 	str	w20, [x2, 24]
 	mul	w0, w0, w28
 	add	w28, w28, 1
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1565
-.L1566:
+	b	.L1582
+.L1583:
 	cmp	w20, w24
-	bne	.L1568
-	ldr	x5, [x26, 3440]
-	ldr	x1, [x26, 3496]
-	add	x5, x5, x2
-	ldr	w3, [x29, 128]
-	str	x1, [x5, 8]
+	bne	.L1585
+	ldr	x6, [x27, 3440]
+	ldr	x1, [x27, 3496]
+	add	x6, x6, x2
+	ldr	w3, [x29, 144]
+	str	x1, [x6, 8]
 	mul	w1, w20, w0
 	sub	w3, w3, w1
-	str	w3, [x29, 132]
+	str	w3, [x29, 148]
 	cmp	w0, w3
-	bne	.L1567
-	sub	w1, w1, w19
+	bne	.L1584
+	sub	w1, w1, w26
 	lsl	w1, w1, 9
-	add	x1, x23, x1
-	str	x1, [x5, 8]
-	b	.L1567
-.L1568:
-	ldr	x1, [x26, 3440]
+	add	x1, x22, x1
+	str	x1, [x6, 8]
+	b	.L1584
+.L1585:
+	ldr	x1, [x27, 3440]
 	mul	w0, w0, w20
 	add	x1, x1, x2
-	sub	w0, w0, w19
+	sub	w0, w0, w26
 	lsl	w0, w0, 9
-	add	x0, x23, x0
+	add	x0, x22, x0
 	str	x0, [x1, 8]
-	b	.L1567
-.L1571:
+	b	.L1584
+.L1588:
 	cmp	w24, w1
-	bne	.L1572
+	bne	.L1589
 	ldr	x1, [x0, 8]
-	ldr	x0, [x26, 3496]
+	ldr	x0, [x27, 3496]
 	cmp	x1, x0
-	bne	.L1572
-	ldrh	w0, [x26, 270]
-	ldr	w2, [x29, 112]
+	bne	.L1589
+	ldrh	w0, [x27, 270]
+	ldr	w2, [x29, 128]
 	mul	w0, w0, w24
-	sub	w0, w0, w19
+	sub	w0, w0, w26
 	lsl	w0, w0, 9
-	add	x0, x23, x0
-	b	.L1589
-.L1579:
-	mov	w21, -1
-	b	.L1557
+	add	x0, x22, x0
+	b	.L1609
+.L1599:
+	mov	w19, -1
+	b	.L1574
+.L1596:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 176
+	ret
 	.size	FtlRead, .-FtlRead
 	.align	2
 	.global	sftl_read
@@ -10747,132 +11009,139 @@ sftl_read:
 	.global	FtlWrite
 	.type	FtlWrite, %function
 FtlWrite:
-	stp	x29, x30, [sp, -224]!
+	stp	x29, x30, [sp, -240]!
 	and	w0, w0, 255
 	cmp	w0, 16
 	add	x29, sp, 0
 	stp	x23, x24, [sp, 48]
 	mov	w23, w1
 	stp	x25, x26, [sp, 64]
-	mov	x26, x3
+	adrp	x1, __stack_chk_guard
+	stp	x27, x28, [sp, 80]
+	mov	w26, w2
 	stp	x19, x20, [sp, 16]
+	add	x2, x1, :lo12:__stack_chk_guard
 	stp	x21, x22, [sp, 32]
-	stp	x27, x28, [sp, 80]
-	str	w2, [x29, 172]
-	bne	.L1593
-	add	w0, w1, 256
-	ldr	w1, [x29, 172]
-	mov	x2, x3
+	mov	x27, x3
+	str	x1, [x29, 112]
+	ldr	x3, [x2]
+	str	x3, [x29, 232]
+	mov	x3,0
+	bne	.L1613
+	mov	x2, x27
+	mov	w1, w26
+	add	w0, w23, 256
 	bl	FtlVendorPartWrite
-.L1592:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 224
-	ret
-.L1593:
-	ldr	w0, [x29, 172]
+.L1612:
+	ldr	x1, [x29, 112]
+	add	x1, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 232]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L1649
+	bl	__stack_chk_fail
+.L1613:
 	adrp	x19, .LANCHOR0
 	add	x1, x19, :lo12:.LANCHOR0
-	add	w0, w23, w0
-	str	w0, [x29, 148]
 	ldr	w0, [x1, 352]
-	ldr	w2, [x29, 148]
-	cmp	w2, w0
-	bhi	.L1629
+	cmp	w23, w0
+	bcs	.L1652
+	cmp	w26, w0
+	bhi	.L1652
+	add	w2, w23, w26
+	str	w2, [x29, 124]
+	cmp	w0, w2
+	bcc	.L1652
 	adrp	x2, .LANCHOR2
-	str	x2, [x29, 136]
+	str	x2, [x29, 152]
 	add	x3, x2, :lo12:.LANCHOR2
 	ldr	w0, [x2, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1592
+	beq	.L1612
 	mov	w0, 2048
-	ldr	w2, [x29, 148]
+	add	w2, w23, w26
 	str	w0, [x1, 3976]
-	add	x20, x1, 32
-	ldrh	w0, [x1, 270]
 	sub	w2, w2, #1
+	ldrh	w0, [x1, 270]
+	add	x20, x1, 32
 	udiv	w25, w23, w0
 	udiv	w0, w2, w0
-	ldr	w2, [x29, 172]
-	str	w0, [x29, 144]
+	str	w0, [x29, 160]
 	sub	w0, w0, w25
 	add	w24, w0, 1
-	str	w0, [x29, 132]
+	str	w0, [x29, 148]
 	ldr	w0, [x1, 2660]
-	add	w0, w0, w2
+	add	w0, w0, w26
 	str	w0, [x1, 2660]
 	ldr	w0, [x1, 2644]
 	add	w0, w0, w24
 	str	w0, [x1, 2644]
 	ldr	w0, [x3, 8]
-	cbz	w0, .L1595
+	cbz	w0, .L1615
 	ldrh	w0, [x20, 4]
 	add	x1, x1, 88
 	cmp	w0, 0
 	csel	x20, x1, x20, eq
-.L1595:
+.L1615:
 	adrp	x0, .LANCHOR1
 	mov	w21, w25
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 696
-	str	x0, [x29, 160]
-.L1596:
-	cbnz	w24, .L1624
-	ldr	w1, [x29, 132]
+	str	x0, [x29, 176]
+.L1616:
+	cbnz	w24, .L1644
+	ldr	w1, [x29, 148]
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x19, 236]
 	cmp	w0, 5
-	bls	.L1625
-.L1627:
+	bls	.L1645
+.L1647:
 	mov	w0, 0
-	b	.L1592
-.L1624:
+	b	.L1612
+.L1644:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1597
-	ldr	x1, [x29, 160]
+	bcc	.L1617
+	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1041
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1597:
+.L1617:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1598
+	cbnz	w0, .L1618
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x0, 32
 	cmp	x20, x1
-	bne	.L1599
+	bne	.L1619
 	add	x0, x0, 88
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1600
+	cbnz	w1, .L1620
 	bl	allocate_new_data_superblock
-	ldr	x0, [x29, 136]
+	ldr	x0, [x29, 152]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1600:
+.L1620:
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x22, x20, 32
 	add	x20, x20, 88
 	mov	x0, x22
 	bl	allocate_new_data_superblock
-	ldr	x0, [x29, 136]
+	ldr	x0, [x29, 152]
 	add	x0, x0, :lo12:.LANCHOR2
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
 	csel	x20, x20, x22, ne
-.L1601:
+.L1621:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1598
+	cbnz	w0, .L1618
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1598:
+.L1618:
 	ldrh	w0, [x20, 4]
 	ldrb	w1, [x20, 7]
 	cmp	w0, w24
@@ -10880,26 +11149,26 @@ FtlWrite:
 	lsl	w1, w1, 2
 	cmp	w0, w1
 	csel	w0, w0, w1, ls
-	str	w0, [x29, 128]
+	str	w0, [x29, 144]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1602
-	ldr	x1, [x29, 160]
+	bcc	.L1622
+	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1074
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1602:
-	mov	x28, 0
-.L1603:
-	ldr	w0, [x29, 128]
-	mov	w22, w28
-	cmp	w28, w0
-	bcc	.L1622
-	mov	x22, x0
-.L1604:
+.L1622:
+	str	xzr, [x29, 184]
+.L1623:
+	ldr	w1, [x29, 144]
+	ldr	w22, [x29, 184]
+	cmp	w22, w1
+	bcc	.L1642
+	mov	x22, x1
+.L1624:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	x3, x20
 	mov	w2, 0
@@ -10907,99 +11176,98 @@ FtlWrite:
 	ldr	x0, [x0, 3456]
 	bl	FtlProgPages
 	cmp	w24, w22
-	bcs	.L1623
-	ldr	x1, [x29, 160]
+	bcs	.L1643
+	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1152
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1623:
+.L1643:
 	sub	w24, w24, w22
-	b	.L1596
-.L1599:
-	ldr	x0, [x29, 136]
+	b	.L1616
+.L1619:
+	ldr	x0, [x29, 152]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1634
+	cbnz	w0, .L1657
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-	b	.L1601
-.L1634:
+	b	.L1621
+.L1657:
 	mov	x20, x1
-	b	.L1598
-.L1622:
+	b	.L1618
+.L1642:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1604
-	add	x1, x29, 188
+	cbz	w0, .L1624
+	add	x1, x29, 196
 	mov	w2, 0
 	mov	w0, w21
 	bl	log2phys
 	mov	x0, x20
-	lsl	x27, x28, 5
 	bl	get_new_active_ppa
 	add	x3, x19, :lo12:.LANCHOR0
-	str	x3, [x29, 152]
+	ldr	x1, [x29, 184]
+	str	x3, [x29, 168]
+	lsl	x28, x1, 5
 	ldr	x1, [x3, 3456]
 	ldrh	w2, [x3, 324]
-	add	x1, x1, x27
+	add	x1, x1, x28
 	str	w0, [x1, 4]
 	mul	w22, w22, w2
 	ldr	x0, [x3, 3456]
 	and	x1, x22, 4294967292
-	str	x1, [x29, 120]
-	add	x0, x0, x27
+	str	x1, [x29, 136]
+	add	x0, x0, x28
 	ldr	x1, [x3, 3536]
-	ldr	x3, [x29, 120]
-	str	x1, [x29, 112]
+	ldr	x3, [x29, 136]
+	str	x1, [x29, 128]
 	add	x22, x1, x3
 	str	w21, [x0, 24]
 	str	x22, [x0, 16]
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
-	ldr	w0, [x29, 144]
+	ldr	w0, [x29, 160]
 	cmp	w21, w25
-	ldr	x3, [x29, 152]
+	ldr	x3, [x29, 168]
 	ccmp	w21, w0, 4, ne
-	bne	.L1605
+	bne	.L1625
 	cmp	w21, w25
-	bne	.L1606
+	bne	.L1626
 	ldrh	w2, [x3, 270]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
-	str	w0, [x29, 168]
+	str	w0, [x29, 164]
 	sub	w2, w2, w0
-	ldr	w0, [x29, 172]
-	cmp	w2, w0
-	csel	w0, w2, w0, ls
-	str	w0, [x29, 152]
-.L1607:
+	cmp	w2, w26
+	csel	w0, w2, w26, ls
+	str	w0, [x29, 168]
+.L1627:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w2, [x29, 152]
+	ldr	w2, [x29, 168]
 	ldrh	w1, [x0, 270]
 	cmp	w2, w1
-	bne	.L1608
+	bne	.L1628
 	ldr	x0, [x0, 3456]
 	cmp	w21, w25
-	add	x4, x0, x27
-	bne	.L1609
-	str	x26, [x4, 8]
-.L1610:
+	add	x4, x0, x28
+	bne	.L1629
+	str	x27, [x4, 8]
+.L1630:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1619
-	ldr	x1, [x29, 160]
+	bcc	.L1639
+	ldr	x1, [x29, 176]
 	adrp	x0, .LC8
 	mov	w2, 1143
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1619:
-	ldp	x1, x2, [x29, 112]
+.L1639:
+	ldp	x1, x2, [x29, 128]
 	mov	w0, -3947
-	add	x28, x28, 1
 	strh	w0, [x1, x2]
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	w0, [x1, 2672]
@@ -11009,55 +11277,57 @@ FtlWrite:
 	cmn	w0, #1
 	csel	w0, w0, wzr, ne
 	str	w0, [x1, 2672]
-	ldr	w0, [x29, 188]
+	ldr	w0, [x29, 196]
 	str	w0, [x22, 12]
 	ldrh	w0, [x20]
 	strh	w0, [x22, 2]
-	b	.L1603
-.L1606:
-	ldr	w0, [x29, 148]
+	ldr	x0, [x29, 184]
+	add	x0, x0, 1
+	str	x0, [x29, 184]
+	b	.L1623
+.L1626:
+	ldr	w0, [x29, 124]
 	ldrh	w2, [x3, 270]
-	str	wzr, [x29, 168]
 	msub	w2, w21, w2, w0
 	and	w0, w2, 65535
-	str	w0, [x29, 152]
-	b	.L1607
-.L1609:
-	ldr	w0, [x29, 152]
-.L1641:
+	stp	wzr, w0, [x29, 164]
+	b	.L1627
+.L1629:
+	ldr	w0, [x29, 168]
+.L1664:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
-	add	x0, x26, x0
+	add	x0, x27, x0
 	str	x0, [x4, 8]
-	b	.L1610
-.L1608:
+	b	.L1630
+.L1628:
 	ldr	x1, [x0, 3456]
 	cmp	w21, w25
-	add	x1, x1, x27
-	bne	.L1611
+	add	x1, x1, x28
+	bne	.L1631
 	ldr	x0, [x0, 3488]
-.L1640:
+.L1663:
 	str	x0, [x1, 8]
-	ldr	w0, [x29, 188]
+	ldr	w0, [x29, 196]
 	cmn	w0, #1
-	beq	.L1613
+	beq	.L1633
 	add	x5, x19, :lo12:.LANCHOR0
-	str	w0, [x29, 196]
-	str	w21, [x29, 216]
+	str	w0, [x29, 204]
+	str	w21, [x29, 224]
 	mov	w2, 0
 	str	x5, [x29, 104]
 	ldr	x0, [x5, 3456]
-	add	x0, x0, x27
+	add	x0, x0, x28
 	ldp	x1, x0, [x0, 8]
-	stp	x1, x0, [x29, 200]
+	stp	x1, x0, [x29, 208]
 	mov	w1, 1
-	add	x0, x29, 192
+	add	x0, x29, 200
 	bl	FlashReadPages
-	ldr	w3, [x29, 192]
+	ldr	w3, [x29, 200]
 	ldr	x5, [x29, 104]
 	cmn	w3, #1
-	bne	.L1614
+	bne	.L1634
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11066,29 +11336,29 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC125
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1617:
-	ldr	w0, [x29, 152]
+.L1637:
+	ldr	w0, [x29, 168]
 	cmp	w21, w25
 	lsl	w2, w0, 9
 	add	x0, x19, :lo12:.LANCHOR0
-	bne	.L1618
+	bne	.L1638
 	ldr	x0, [x0, 3456]
-	mov	x1, x26
-	add	x4, x0, x27
-	ldr	w0, [x29, 168]
+	mov	x1, x27
+	add	x4, x0, x28
+	ldr	w0, [x29, 164]
 	ldr	x3, [x4, 8]
 	lsl	w0, w0, 9
 	add	x0, x3, x0
-.L1642:
+.L1665:
 	bl	ftl_memcpy
-	b	.L1610
-.L1611:
+	b	.L1630
+.L1631:
 	ldr	x0, [x0, 3496]
-	b	.L1640
-.L1614:
+	b	.L1663
+.L1634:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1616
+	beq	.L1636
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11097,55 +11367,55 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC126
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1616:
+.L1636:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1617
-	ldr	x1, [x29, 160]
+	beq	.L1637
+	ldr	x1, [x29, 176]
 	mov	w2, 1128
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1617
-.L1613:
+	b	.L1637
+.L1633:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3456]
 	ldrh	w2, [x1, 322]
 	mov	w1, 0
-	add	x0, x0, x27
+	add	x0, x0, x28
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1617
-.L1618:
+	b	.L1637
+.L1638:
 	ldrh	w1, [x0, 270]
 	ldr	x0, [x0, 3456]
-	add	x4, x0, x27
+	add	x4, x0, x28
 	mul	w1, w1, w21
 	sub	w1, w1, w23
 	ldr	x0, [x4, 8]
 	lsl	w1, w1, 9
-	add	x1, x26, x1
-	b	.L1642
-.L1605:
+	add	x1, x27, x1
+	b	.L1665
+.L1625:
 	ldr	x0, [x3, 3456]
-	add	x4, x0, x27
+	add	x4, x0, x28
 	ldrh	w0, [x3, 270]
-	b	.L1641
-.L1625:
+	b	.L1664
+.L1645:
 	mov	w20, 256
 	mov	w21, 65535
 	mov	w22, 128
-.L1628:
+.L1648:
 	ldrh	w0, [x19, 184]
 	cmp	w0, w21
-	bne	.L1626
+	bne	.L1646
 	ldrh	w0, [x19, 234]
 	cmp	w0, w21
-	bne	.L1626
+	bne	.L1646
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L1626:
+.L1646:
 	mov	w1, 1
 	strh	w22, [x19, 3234]
 	mov	w0, w1
@@ -11156,13 +11426,21 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x19, 236]
 	cmp	w0, 2
-	bhi	.L1627
+	bhi	.L1647
 	subs	w20, w20, #1
-	bne	.L1628
-	b	.L1627
-.L1629:
+	bne	.L1648
+	b	.L1647
+.L1652:
 	mov	w0, -1
-	b	.L1592
+	b	.L1612
+.L1649:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 240
+	ret
 	.size	FtlWrite, .-FtlWrite
 	.align	2
 	.global	sftl_gc
@@ -11201,17 +11479,17 @@ FtlLoadSysInfo:
 	ldrh	w0, [x21, 2704]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1646
-.L1657:
+	bne	.L1669
+.L1680:
 	mov	w0, -1
-.L1645:
+.L1668:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1646:
+.L1669:
 	add	x23, x21, 2704
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
@@ -11222,8 +11500,8 @@ FtlLoadSysInfo:
 	strh	w0, [x23, 2]
 	ldrsh	w23, [x21, 2704]
 	add	x24, x1, 712
-.L1648:
-	tbz	w19, #31, .L1654
+.L1671:
+	tbz	w19, #31, .L1677
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 1465
@@ -11231,8 +11509,8 @@ FtlLoadSysInfo:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1653
-.L1654:
+	b	.L1676
+.L1677:
 	orr	w0, w19, w23, lsl 10
 	str	w0, [x20, 4]
 	ldr	x0, [x21, 3464]
@@ -11243,15 +11521,15 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	x0, [x20, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1649
+	cbz	w7, .L1672
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1649
+	beq	.L1672
 	ldrh	w1, [x21, 322]
 	ldr	x0, [x20, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1649
+	beq	.L1672
 	ldrh	w4, [x21, 2708]
 	mov	w6, w0
 	mov	w5, w7
@@ -11261,41 +11539,41 @@ FtlLoadSysInfo:
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC127
 	bl	sftl_printk
-	cbnz	w19, .L1650
+	cbnz	w19, .L1673
 	ldrh	w0, [x21, 2708]
 	cmp	w23, w0
-	beq	.L1650
+	beq	.L1673
 	ldrh	w19, [x21, 316]
 	sxth	w23, w0
-.L1652:
+.L1675:
 	sub	w19, w19, #1
 	sxth	w19, w19
-	b	.L1648
-.L1650:
+	b	.L1671
+.L1673:
 	mov	w0, -1
 	str	w0, [x20]
-.L1649:
+.L1672:
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1652
+	beq	.L1675
 	ldr	x0, [x21, 3464]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1652
+	bne	.L1675
 	ldr	x0, [x21, 3528]
 	ldrh	w1, [x0]
 	mov	w0, 61604
 	cmp	w1, w0
-	bne	.L1652
-.L1653:
+	bne	.L1675
+.L1676:
 	add	x1, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 252]
 	ldrh	w1, [x1, 322]
 	add	x0, x0, 24
 	cmp	x1, x0, lsl 1
-	bcs	.L1656
+	bcs	.L1679
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -11303,7 +11581,7 @@ FtlLoadSysInfo:
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1656:
+.L1679:
 	add	x19, x22, :lo12:.LANCHOR0
 	mov	w2, 48
 	add	x20, x19, 2520
@@ -11330,13 +11608,13 @@ FtlLoadSysInfo:
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1657
+	bne	.L1680
 	ldrh	w1, [x19, 2528]
 	ldrb	w2, [x19, 2530]
 	ldrh	w0, [x19, 266]
 	strh	w1, [x19, 2710]
 	cmp	w2, w0
-	bne	.L1657
+	bne	.L1680
 	ldrh	w0, [x19, 314]
 	ldrh	w2, [x19, 270]
 	ldrh	w3, [x19, 244]
@@ -11352,7 +11630,7 @@ FtlLoadSysInfo:
 	sub	w0, w0, w1
 	udiv	w0, w0, w3
 	strh	w0, [x19, 2700]
-	bls	.L1658
+	bls	.L1681
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -11360,7 +11638,7 @@ FtlLoadSysInfo:
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1658:
+.L1681:
 	add	x0, x22, :lo12:.LANCHOR0
 	mov	w3, -1
 	ldrh	w2, [x0, 2536]
@@ -11406,49 +11684,49 @@ FtlLoadSysInfo:
 	ldr	w2, [x0, 2668]
 	str	wzr, [x0, 2648]
 	cmp	w1, w2
-	bls	.L1659
+	bls	.L1682
 	str	w1, [x0, 2668]
-.L1659:
+.L1682:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2556]
 	ldr	w2, [x0, 2672]
 	cmp	w1, w2
-	bls	.L1660
+	bls	.L1683
 	str	w1, [x0, 2672]
-.L1660:
+.L1683:
 	mov	w0, 65535
 	cmp	w4, w0
-	beq	.L1661
+	beq	.L1684
 	add	x0, x22, :lo12:.LANCHOR0
 	add	x0, x0, 32
 	bl	make_superblock
-.L1661:
+.L1684:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	x0, x1, 88
 	ldrh	w2, [x1, 88]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1662
+	beq	.L1685
 	bl	make_superblock
-.L1662:
+.L1685:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	x0, x1, 136
 	ldrh	w2, [x1, 136]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1663
+	beq	.L1686
 	bl	make_superblock
-.L1663:
+.L1686:
 	add	x22, x22, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x0, x22, 184
 	ldrh	w2, [x22, 184]
 	cmp	w2, w1
-	beq	.L1664
+	beq	.L1687
 	bl	make_superblock
-.L1664:
+.L1687:
 	mov	w0, 0
-	b	.L1645
+	b	.L1668
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
 	.global	FtlMapTblRecovery
@@ -11493,14 +11771,14 @@ FtlMapTblRecovery:
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 728
 	str	x0, [x29, 104]
-.L1677:
+.L1700:
 	ldr	w0, [x29, 136]
 	cmp	w20, w0
-	bge	.L1696
+	bge	.L1719
 	ldr	w0, [x29, 116]
 	sxtw	x28, w20
 	cmp	w20, w0
-	bne	.L1678
+	bne	.L1701
 	lsl	x0, x28, 1
 	mov	w26, 0
 	add	x1, x24, x0
@@ -11521,22 +11799,22 @@ FtlMapTblRecovery:
 	add	x28, x21, :lo12:.LANCHOR0
 	add	x27, x28, 3728
 	str	w0, [x19, 48]
-.L1679:
+.L1702:
 	ldr	w0, [x29, 120]
 	add	w0, w0, 1
 	cmp	w26, w0
-	blt	.L1682
-.L1696:
+	blt	.L1705
+.L1719:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	bl	ftl_free_no_use_map_blk
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x21, 316]
 	cmp	w1, w0
-	bne	.L1684
+	bne	.L1707
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L1684:
+.L1707:
 	mov	x0, x19
 	bl	ftl_map_blk_gc
 	mov	x0, x19
@@ -11549,7 +11827,7 @@ FtlMapTblRecovery:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L1682:
+.L1705:
 	ldr	x0, [x29, 136]
 	mov	w2, 1
 	mov	w1, w2
@@ -11560,15 +11838,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x27, 16]
 	ldr	w8, [x0, 12]
-	cbz	w8, .L1680
+	cbz	w8, .L1703
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1680
+	beq	.L1703
 	ldrh	w1, [x28, 322]
 	ldr	x0, [x27, 8]
 	bl	js_hash
 	cmp	w8, w0
-	beq	.L1680
+	beq	.L1703
 	mov	w5, w0
 	mov	w4, w8
 	mov	w3, w26
@@ -11579,25 +11857,25 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x27]
-.L1680:
+.L1703:
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1681
+	beq	.L1704
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1681
+	bls	.L1704
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1681
+	bne	.L1704
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x27, 4]
 	str	w1, [x23, x0]
-.L1681:
+.L1704:
 	add	w7, w26, 1
 	sxth	w26, w7
-	b	.L1679
-.L1678:
+	b	.L1702
+.L1701:
 	add	x26, x21, :lo12:.LANCHOR0
 	lsl	x2, x28, 1
 	add	x0, x26, 3728
@@ -11615,23 +11893,23 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x26, 3728]
 	cmn	w0, #1
-	beq	.L1698
+	beq	.L1721
 	ldrh	w1, [x22]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L1698
+	bne	.L1721
 	ldrh	w1, [x22, 8]
 	mov	w0, 64245
 	cmp	w1, w0
-	beq	.L1686
-.L1698:
+	beq	.L1709
+.L1721:
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	w27, 0
 	add	x28, x26, 3728
-.L1687:
+.L1710:
 	ldrh	w0, [x26, 316]
 	cmp	w27, w0
-	bge	.L1694
+	bge	.L1717
 	ldr	x0, [x29, 120]
 	mov	w2, 1
 	mov	w1, w2
@@ -11642,15 +11920,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x28, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1691
+	cbz	w7, .L1714
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1691
+	beq	.L1714
 	ldrh	w1, [x26, 322]
 	ldr	x0, [x28, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1691
+	beq	.L1714
 	ldr	x1, [x29, 104]
 	mov	w5, w0
 	mov	w4, w7
@@ -11661,49 +11939,49 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x28]
-.L1691:
+.L1714:
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1692
+	beq	.L1715
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1692
+	bls	.L1715
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1692
+	bne	.L1715
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x28, 4]
 	str	w1, [x23, x0]
-.L1692:
+.L1715:
 	add	w6, w27, 1
 	sxth	w27, w6
-	b	.L1687
-.L1686:
+	b	.L1710
+.L1709:
 	mov	w0, 0
-.L1688:
+.L1711:
 	ldrh	w1, [x26, 316]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L1690
-.L1694:
+	blt	.L1713
+.L1717:
 	add	w20, w20, 1
 	sxth	w20, w20
-	b	.L1677
-.L1690:
+	b	.L1700
+.L1713:
 	ldr	x2, [x26, 3464]
 	sbfiz	x3, x0, 3, 32
 	ldrh	w1, [x2, x3]
 	cmp	w25, w1
-	bls	.L1689
+	bls	.L1712
 	add	x2, x2, x3
 	ubfiz	x1, x1, 2, 16
 	ldr	w2, [x2, 4]
 	str	w2, [x23, x1]
-.L1689:
+.L1712:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1688
+	b	.L1711
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
 	.global	FtlLoadVonderInfo
@@ -11767,20 +12045,20 @@ FtlSysBlkInit:
 	ldrh	w1, [x21, 2704]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1723
-.L1725:
+	bne	.L1746
+.L1748:
 	mov	w23, -1
-.L1722:
+.L1745:
 	mov	w0, w23
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1723:
+.L1746:
 	bl	FtlLoadSysInfo
 	mov	w23, w0
-	cbnz	w0, .L1725
+	cbnz	w0, .L1748
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -11794,19 +12072,19 @@ FtlSysBlkInit:
 	mov	w0, 0
 	ldrh	w3, [x21, 350]
 	add	x1, x1, 4
-.L1726:
+.L1749:
 	cmp	w0, w3
-	bge	.L1731
+	bge	.L1754
 	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1727
-.L1731:
+	tbz	w2, #31, .L1750
+.L1754:
 	add	x2, x20, :lo12:.LANCHOR0
 	cmp	w0, w3
 	ldrh	w1, [x2, 2548]
 	add	w1, w1, 1
 	strh	w1, [x2, 2548]
-	bge	.L1737
-.L1728:
+	bge	.L1760
+.L1751:
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x22, x19, 32
 	add	x21, x19, 88
@@ -11842,25 +12120,25 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1732
-.L1727:
+	b	.L1755
+.L1750:
 	add	w0, w0, 1
-	b	.L1726
-.L1737:
+	b	.L1749
+.L1760:
 	ldrh	w0, [x2, 3760]
-	cbnz	w0, .L1728
-.L1732:
+	cbnz	w0, .L1751
+.L1755:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x21, x19, 32
 	ldrh	w0, [x19, 32]
 	cmp	w0, w1
-	beq	.L1733
+	beq	.L1756
 	ldrh	w1, [x19, 36]
-	cbnz	w1, .L1733
+	cbnz	w1, .L1756
 	ldrh	w1, [x19, 92]
 	add	x20, x19, 88
-	cbnz	w1, .L1733
+	cbnz	w1, .L1756
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x19, 88]
 	bl	FtlGcRefreshBlock
@@ -11869,9 +12147,9 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1733:
+.L1756:
 	bl	FtlVpcCheckAndModify
-	b	.L1722
+	b	.L1745
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
@@ -11889,36 +12167,36 @@ ftl_low_format:
 	ldrh	w0, [x0, 248]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1740
+	cbz	w0, .L1763
 	bl	FtlMakeBbt
-.L1740:
+.L1763:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1741:
+.L1764:
 	ldrh	w2, [x1, 270]
 	cmp	w0, w2, lsl 7
-	blt	.L1742
+	blt	.L1765
 	ldrh	w21, [x1, 252]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1743:
+.L1766:
 	ldrh	w0, [x22, 254]
 	cmp	w0, w21
-	bhi	.L1744
+	bhi	.L1767
 	ldrh	w0, [x22, 244]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1745
-.L1749:
+	bge	.L1768
+.L1772:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1746:
+.L1769:
 	ldrh	w0, [x19, 252]
 	cmp	w0, w22
-	bhi	.L1750
+	bhi	.L1773
 	ldrh	w2, [x19, 244]
 	ldr	w1, [x19, 256]
 	ldrh	w0, [x19, 254]
@@ -11931,28 +12209,28 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1751
+	ble	.L1774
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2632]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2700]
-.L1751:
+.L1774:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 306]
-	cbz	w1, .L1753
+	cbz	w1, .L1776
 	ldrh	w5, [x0, 2700]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2700]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1753
+	bge	.L1776
 	add	w1, w1, 32
 	str	w4, [x0, 2632]
 	add	w1, w3, w1
 	strh	w1, [x0, 2700]
-.L1753:
+.L1776:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w22, -1
 	add	x21, x19, 32
@@ -11988,20 +12266,20 @@ ftl_low_format:
 	strh	wzr, [x19, 32]
 	str	wzr, [x19, 2628]
 	bl	ftl_memset
-.L1755:
+.L1778:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1756
+	cbnz	w1, .L1779
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x0, 1, 16
 	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1755
-.L1742:
+	b	.L1778
+.L1765:
 	ldr	x5, [x1, 3488]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -12011,8 +12289,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3496]
 	str	w4, [x2, x3]
-	b	.L1741
-.L1744:
+	b	.L1764
+.L1767:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -12020,8 +12298,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1743
-.L1745:
+	b	.L1766
+.L1768:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 344]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -12030,17 +12308,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 248]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 252]
-.L1747:
+.L1770:
 	ldrh	w0, [x21, 254]
 	cmp	w0, w19
-	bls	.L1749
+	bls	.L1772
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1747
-.L1750:
+	b	.L1770
+.L1773:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -12048,8 +12326,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1746
-.L1756:
+	b	.L1769
+.L1779:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -12069,20 +12347,20 @@ ftl_low_format:
 	strb	w1, [x19, 96]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1757:
+.L1780:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1758
+	cbnz	w1, .L1781
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1757
-.L1758:
+	b	.L1780
+.L1781:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
@@ -12105,11 +12383,11 @@ ftl_low_format:
 	str	w0, [x19, 2668]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1759
+	cbnz	w0, .L1782
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1759:
+.L1782:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12140,22 +12418,22 @@ sftl_init:
 	ldrh	w0, [x19, 248]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	w0, .L1768
+	cbnz	w0, .L1791
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1768
+	cbnz	w0, .L1791
 	mov	w0, 1
 	str	w0, [x20, #:lo12:.LANCHOR2]
 	ldrh	w0, [x19, 236]
 	cmp	w0, 15
-	bhi	.L1768
+	bhi	.L1791
 	mov	w19, 8129
-.L1767:
+.L1790:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	subs	w19, w19, #1
-	bne	.L1767
-.L1768:
+	bne	.L1790
+.L1791:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -12165,44 +12443,52 @@ sftl_init:
 	.global	FtlWriteToIDB
 	.type	FtlWriteToIDB, %function
 FtlWriteToIDB:
-	stp	x29, x30, [sp, -208]!
+	stp	x29, x30, [sp, -240]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	add	w23, w1, w0
 	stp	x19, x20, [sp, 16]
-	sub	w24, w23, #1
+	mov	w19, w0
 	stp	x21, x22, [sp, 32]
-	cmp	w24, 63
+	adrp	x0, __stack_chk_guard
+	stp	x23, x24, [sp, 48]
+	mov	w21, w1
 	stp	x25, x26, [sp, 64]
-	adrp	x20, .LANCHOR0
+	add	x1, x0, :lo12:__stack_chk_guard
 	stp	x27, x28, [sp, 80]
-	bls	.L1772
-	mov	w19, w0
-	cmp	w0, 575
-	bls	.L1773
-.L1772:
+	mov	x22, x2
+	add	w23, w21, w19
+	str	x0, [x29, 112]
+	ldr	x2, [x1]
+	str	x2, [x29, 232]
+	mov	x2,0
+	sub	w24, w23, #1
+	cmp	w24, 63
+	adrp	x20, .LANCHOR0
+	bls	.L1795
+	cmp	w19, 575
+	bls	.L1796
+.L1795:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3984]
-	cbnz	w1, .L1774
-.L1838:
+	cbnz	w1, .L1797
+.L1862:
 	mov	w19, 0
-	b	.L1771
-.L1774:
+	b	.L1794
+.L1797:
 	ldr	x24, [x0, 3992]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
 	ldr	w2, [x24]
 	cmp	w2, w1
-	bne	.L1776
+	bne	.L1799
 	add	x1, x24, 258048
 	ldrh	w2, [x0, 10]
 	add	x1, x1, 2044
 	mov	w0, 0
 	mov	w19, 65023
 	mov	w3, 4097
-.L1780:
+.L1803:
 	ldr	w4, [x1]
-	cbnz	w4, .L1777
+	cbnz	w4, .L1800
 	ldr	w4, [x24, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w4, [x1, 2048]
@@ -12211,13 +12497,13 @@ FtlWriteToIDB:
 	csel	w0, w0, wzr, cc
 	sub	x1, x1, #4
 	cmp	w19, 4096
-	bne	.L1780
+	bne	.L1803
 	mov	w19, 512
-	b	.L1779
-.L1777:
+	b	.L1802
+.L1800:
 	add	w19, w19, 127
 	lsr	w19, w19, 7
-.L1779:
+.L1802:
 	ubfiz	w0, w2, 2, 14
 	add	w21, w19, 4
 	mov	w1, w19
@@ -12231,38 +12517,62 @@ FtlWriteToIDB:
 	mov	w2, w21
 	bl	sftl_printk
 	lsl	w0, w19, 7
-	str	w0, [x29, 132]
-.L1802:
+	str	w0, [x29, 140]
+.L1804:
+	add	w0, w21, w22
+	str	w0, [x29, 144]
+	cmp	w0, 8
+	bls	.L1826
+	cbnz	w25, .L1827
+.L1799:
+	mov	w19, -1
+.L1827:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20, 3992]
+	str	wzr, [x20, 3984]
+	bl	kfree
+	ldr	x0, [x20, 4000]
+	bl	kfree
+.L1794:
+	ldr	x1, [x29, 112]
+	mov	w0, w19
+	add	x1, x1, :lo12:__stack_chk_guard
+	ldr	x2, [x29, 232]
+	ldr	x1, [x1]
+	eor	x1, x2, x1
+	cbz	x1, .L1834
+	bl	__stack_chk_fail
+.L1826:
 	ldr	x0, [x27, 4000]
 	mov	w1, 0
 	mov	x2, 512
 	bl	memset
 	ldrh	w28, [x27, 10]
 	ldr	x1, [x27, 3400]
-	mul	w0, w28, w22
-	str	w0, [x29, 140]
-	cbz	x1, .L1810
+	mul	w0, w22, w28
+	str	w0, [x29, 152]
+	cbz	x1, .L1835
 	ldr	x0, [x27, 3408]
 	mov	w23, 6
 	cmp	x0, 0
 	mov	w0, 9
 	csel	w23, w23, w0, eq
-.L1781:
-	mul	w3, w28, w22
+.L1805:
+	mul	w4, w22, w28
 	mov	w26, 0
-.L1782:
-	ldr	x4, [x27, 3376]
-	mov	w1, w3
-	str	w3, [x29, 136]
+.L1806:
+	ldr	x6, [x27, 3376]
+	mov	w1, w4
+	str	w4, [x29, 148]
 	mov	w0, 0
 	add	w26, w26, 1
-	blr	x4
-	ldr	w3, [x29, 136]
+	blr	x6
+	ldr	w4, [x29, 148]
 	cmp	w21, w26
-	add	w3, w3, w28
-	bhi	.L1782
+	add	w4, w4, w28
+	bhi	.L1806
 	cmp	w23, 9
-	bne	.L1812
+	bne	.L1837
 	ldr	x26, [x27, 4000]
 	mov	w2, 1024
 	mov	w1, 0
@@ -12285,75 +12595,75 @@ FtlWriteToIDB:
 	str	wzr, [x26, 12]
 	bl	js_hash
 	str	w0, [x26, 8]
-.L1783:
+.L1807:
 	mul	w0, w21, w28
 	mov	x7, x24
 	mov	x28, 0
-	str	w0, [x29, 136]
-.L1784:
-	ldr	w0, [x29, 136]
+	str	w0, [x29, 148]
+.L1808:
+	ldr	w0, [x29, 148]
 	mov	w1, w28
-	cmp	w0, w28
-	bls	.L1791
+	cmp	w28, w0
+	bcs	.L1815
 	cmp	w23, 9
-	bne	.L1785
+	bne	.L1809
 	add	w0, w1, 1
-.L1836:
-	str	w0, [x29, 144]
+.L1860:
+	str	w0, [x29, 168]
 	mov	w0, 61424
-	str	w0, [x29, 148]
+	str	w0, [x29, 172]
 	cmp	w1, 0
 	ccmp	w23, 9, 0, eq
-	bne	.L1787
+	bne	.L1811
 	ldr	x1, [x27, 3400]
 	add	x8, x27, 3368
 	str	x7, [x29, 104]
 	mov	w0, 70
-	str	x8, [x29, 120]
+	str	x8, [x29, 128]
 	blr	x1
-	ldr	x8, [x29, 120]
-	add	x3, x29, 144
-	ldr	w1, [x29, 140]
+	ldr	x8, [x29, 128]
+	add	x3, x29, 168
+	ldr	w1, [x29, 152]
 	mov	x2, x26
-	str	x8, [x29, 112]
+	str	x8, [x29, 120]
 	mov	w0, 0
 	ldr	x9, [x8, 16]
 	blr	x9
 	mov	w1, w0
-	ldr	x8, [x29, 112]
+	ldr	x8, [x29, 120]
 	ldrb	w0, [x27, 22]
-	str	w1, [x29, 120]
+	str	w1, [x29, 128]
 	ldr	x2, [x8, 32]
 	blr	x2
-	ldr	w1, [x29, 120]
+	ldr	w1, [x29, 128]
 	ldr	x7, [x29, 104]
 	cmn	w1, #1
-	bne	.L1788
-.L1791:
+	bne	.L1812
+.L1815:
 	ldrb	w0, [x27, 14]
-	str	w0, [x29, 120]
+	str	w0, [x29, 128]
 	ldrh	w0, [x27, 10]
-	ldr	x26, [x27, 4000]
-	mul	w1, w0, w22
-	str	w1, [x29, 140]
+	ldr	x28, [x27, 4000]
+	mul	w1, w22, w0
+	str	w1, [x29, 152]
 	add	x1, x27, 3368
 	ldr	x2, [x1, 32]
-	cbnz	x2, .L1789
+	cbnz	x2, .L1813
 	mov	w1, 6
-.L1837:
+.L1861:
 	mul	w0, w21, w0
-	mov	x28, 0
-	str	w0, [x29, 112]
-	str	w1, [x29, 136]
-.L1793:
-	ldr	w0, [x29, 112]
-	mov	w1, w28
-	cmp	w28, w0
-	bcs	.L1797
-	ldr	w0, [x29, 136]
-	cmp	w28, 0
+	mov	x26, 0
+	str	w0, [x29, 120]
+	str	w1, [x29, 148]
+.L1817:
+	ldr	w0, [x29, 120]
+	mov	w1, w26
+	cmp	w0, w26
+	bls	.L1821
+	ldr	w0, [x29, 148]
+	cmp	w26, 0
 	ccmp	w0, 9, 0, eq
-	bne	.L1794
+	bne	.L1818
 	ldr	x1, [x27, 3400]
 	mov	w0, 70
 	blr	x1
@@ -12361,138 +12671,118 @@ FtlWriteToIDB:
 	mov	w0, 2
 	blr	x1
 	ldr	x8, [x27, 3392]
-	add	x3, x29, 144
-	ldr	w1, [x29, 140]
-	mov	x2, x26
+	add	x3, x29, 168
+	ldr	w1, [x29, 152]
+	mov	x2, x28
 	mov	w0, 0
 	blr	x8
-	ldrb	w0, [x29, 120]
+	ldrb	w0, [x29, 128]
 	ldr	x1, [x27, 3408]
 	blr	x1
 	ldrb	w0, [x27, 22]
 	ldr	x1, [x27, 3400]
 	blr	x1
-	ldr	w0, [x26]
+	ldr	w0, [x28]
 	mov	w1, 18766
 	movk	w1, 0x464e, lsl 16
 	cmp	w0, w1
-	beq	.L1795
-.L1797:
+	beq	.L1819
+.L1821:
 	ldr	x0, [x27, 4000]
 	mov	x1, x24
 	mov	w23, 0
 	mov	x2, x0
-.L1796:
+.L1820:
 	mov	x26, x2
-	mov	x28, x1
+	mov	x3, x1
 	add	x2, x2, 4
 	add	x1, x1, 4
-	ldr	w4, [x26]
-	ldr	w3, [x28]
-	cmp	w4, w3
-	beq	.L1799
+	ldr	w4, [x3]
+	ldr	w6, [x26]
+	cmp	w6, w4
+	beq	.L1823
 	mov	x2, 512
 	mov	w1, 0
+	str	x3, [x29, 152]
 	bl	memset
-	ldr	w2, [x26]
+	ldr	x3, [x29, 152]
 	mov	w1, w22
-	ldr	w3, [x28]
+	ldr	w2, [x26]
 	mov	w4, w23
 	adrp	x0, .LC131
 	add	x0, x0, :lo12:.LC131
+	ldr	w3, [x3]
 	bl	sftl_printk
 	ldrh	w1, [x27, 10]
 	mov	w0, 0
 	ldr	x2, [x27, 3376]
 	mul	w1, w1, w22
 	blr	x2
-.L1800:
-	add	w22, w22, w21
-	cmp	w22, 7
-	bls	.L1802
-	cbnz	w25, .L1803
-.L1776:
-	mov	w19, -1
-.L1803:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x20, 3992]
-	str	wzr, [x20, 3984]
-	bl	kfree
-	ldr	x0, [x20, 4000]
-	bl	kfree
-.L1771:
-	mov	w0, w19
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 208
-	ret
-.L1810:
+.L1824:
+	ldr	w22, [x29, 144]
+	b	.L1804
+.L1835:
 	mov	w23, 6
-	b	.L1781
-.L1812:
+	b	.L1805
+.L1837:
 	mov	x26, 0
-	b	.L1783
-.L1785:
+	b	.L1807
+.L1809:
 	lsl	w0, w1, 2
-	b	.L1836
-.L1787:
+	b	.L1860
+.L1811:
 	ldr	x8, [x27, 3384]
-	add	x3, x29, 144
-	ldr	w0, [x29, 140]
+	add	x3, x29, 168
+	ldr	w0, [x29, 152]
 	mov	x2, x7
-	str	x7, [x29, 120]
-	add	w1, w0, w1
+	str	x7, [x29, 128]
+	add	w1, w1, w0
 	mov	w0, 0
 	blr	x8
 	cmn	w0, #1
-	beq	.L1791
-	ldr	x7, [x29, 120]
+	beq	.L1815
+	ldr	x7, [x29, 128]
 	add	x7, x7, 2048
-.L1788:
+.L1812:
 	add	x28, x28, 1
-	b	.L1784
-.L1789:
+	b	.L1808
+.L1813:
 	ldr	x1, [x1, 40]
 	mov	w23, 6
 	cmp	x1, 0
 	mov	w1, 9
 	csel	w1, w23, w1, eq
-	b	.L1837
-.L1794:
+	b	.L1861
+.L1818:
 	ldr	x7, [x27, 3392]
-	add	x3, x29, 144
-	ldr	w0, [x29, 140]
-	mov	x2, x26
-	add	w1, w1, w0
+	add	x3, x29, 168
+	ldr	w0, [x29, 152]
+	mov	x2, x28
+	add	w1, w0, w1
 	mov	w0, 0
 	blr	x7
 	cmn	w0, #1
-	beq	.L1797
-	ldr	w0, [x29, 148]
+	beq	.L1821
+	ldr	w0, [x29, 172]
 	mov	w1, 61424
 	cmp	w0, w1
-	bne	.L1797
-	add	x26, x26, 2048
-.L1795:
-	add	x28, x28, 1
-	b	.L1793
-.L1799:
-	ldr	w3, [x29, 132]
+	bne	.L1821
+	add	x28, x28, 2048
+.L1819:
+	add	x26, x26, 1
+	b	.L1817
+.L1823:
+	ldr	w3, [x29, 140]
 	add	w23, w23, 1
 	cmp	w23, w3
-	bne	.L1796
+	bne	.L1820
 	add	w25, w25, 1
 	cmp	w25, 5
-	bls	.L1800
-	b	.L1803
-.L1773:
-	mov	w21, w1
-	mov	x22, x2
-	cmp	w0, 64
-	bne	.L1804
+	bls	.L1824
+	b	.L1827
+.L1796:
+	cmp	w19, 64
+	bne	.L1828
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w0, 262144
 	bl	ftl_malloc
@@ -12502,48 +12792,56 @@ FtlWriteToIDB:
 	mov	x1, x0
 	ldr	x0, [x25, 3992]
 	str	x1, [x25, 4000]
-	cbz	x0, .L1805
-	cbz	x1, .L1805
+	cbz	x0, .L1829
+	cbz	x1, .L1829
 	mov	w1, 1
 	mov	w2, 262144
 	str	w1, [x25, 3984]
 	mov	w1, 0
 	bl	ftl_memset
-.L1804:
+.L1828:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	w0, [x20, 3984]
-	cbz	w0, .L1838
+	cbz	w0, .L1862
 	cmp	w19, 63
 	ldr	x0, [x20, 3992]
-	bhi	.L1807
+	bhi	.L1831
 	mov	w1, 64
 	sub	w19, w1, w19
 	sub	w21, w21, w19
 	ubfiz	x19, x19, 9, 25
 	add	x1, x22, x19
-.L1808:
+.L1832:
 	cmp	w24, 575
-	bls	.L1809
+	bls	.L1833
 	sub	w21, w21, w23
-	sub	w21, w21, #446
-.L1809:
+	add	w21, w21, 576
+.L1833:
 	lsl	w2, w21, 9
 	bl	ftl_memcpy
-	b	.L1838
-.L1805:
+	b	.L1862
+.L1829:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 752
 	adrp	x0, .LC132
 	add	x0, x0, :lo12:.LC132
 	bl	sftl_printk
-	b	.L1804
-.L1807:
+	b	.L1828
+.L1831:
 	lsl	w2, w19, 7
 	mov	x1, x22
 	sub	w2, w2, #8192
 	add	x0, x0, x2, lsl 2
-	b	.L1808
+	b	.L1832
+.L1834:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 240
+	ret
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	2
 	.global	sftl_write
@@ -12574,12 +12872,12 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x3, [x2, 4008]
-	cbnz	x3, .L1843
+	cbnz	x3, .L1867
 	str	x0, [x2, 4008]
 	mov	w0, 0
 	str	x1, [x2, 4016]
 	ret
-.L1843:
+.L1867:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12598,38 +12896,38 @@ rk_sftl_vendor_storage_init:
 	stp	x25, x26, [sp, 64]
 	bl	ftl_malloc
 	str	x0, [x22, 4024]
-	cbz	x0, .L1850
+	cbz	x0, .L1874
 	mov	w26, 22084
 	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
 	movk	w26, 0x524b, lsl 16
-.L1848:
+.L1872:
 	ldr	x3, [x22, 4008]
 	mov	w1, 128
 	ldr	x2, [x22, 4024]
 	lsl	w0, w23, 7
 	blr	x3
 	mov	w21, w0
-	cbnz	w0, .L1846
+	cbnz	w0, .L1870
 	ldr	x19, [x22, 4024]
 	ldr	w0, [x19]
 	cmp	w0, w26
-	bne	.L1847
+	bne	.L1871
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1847
+	bne	.L1871
 	cmp	w0, w24
-	bls	.L1847
+	bls	.L1871
 	mov	w25, w23
 	mov	w24, w0
-.L1847:
+.L1871:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1848
-	cbz	w24, .L1849
+	bne	.L1872
+	cbz	w24, .L1873
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
@@ -12637,15 +12935,15 @@ rk_sftl_vendor_storage_init:
 	lsl	w0, w25, 7
 	blr	x3
 	mov	w21, w0
-	cbz	w0, .L1844
-.L1846:
+	cbz	w0, .L1868
+.L1870:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, -1
 	ldr	x0, [x20, 4024]
 	bl	kfree
 	str	xzr, [x20, 4024]
-	b	.L1844
-.L1849:
+	b	.L1868
+.L1873:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -12658,7 +12956,7 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1844:
+.L1868:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12666,9 +12964,9 @@ rk_sftl_vendor_storage_init:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1850:
+.L1874:
 	mov	w21, -12
-	b	.L1844
+	b	.L1868
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -12676,20 +12974,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR0+4024
 	ldr	x4, [x3, #:lo12:.LANCHOR0+4024]
-	cbz	x4, .L1858
+	cbz	x4, .L1882
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1855:
+.L1879:
 	cmp	w3, w6
-	bcc	.L1857
-.L1858:
+	bcc	.L1881
+.L1882:
 	mov	w0, -1
 	ret
-.L1857:
+.L1881:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1856
+	bne	.L1880
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -12707,9 +13005,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1856:
+.L1880:
 	add	w3, w3, 1
-	b	.L1855
+	b	.L1879
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -12725,7 +13023,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 4024]
-	cbz	x19, .L1878
+	cbz	x19, .L1902
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -12734,12 +13032,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1865:
+.L1889:
 	cmp	w20, w3
-	bcc	.L1873
+	bcc	.L1897
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1878
+	bhi	.L1902
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -12759,11 +13057,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1880
-.L1873:
+	b	.L1904
+.L1897:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1866
+	bne	.L1890
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -12771,17 +13069,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1867
+	bls	.L1891
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1878
+	bhi	.L1902
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1868:
+.L1892:
 	cmp	w20, w26
-	bcc	.L1869
+	bcc	.L1893
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -12798,7 +13096,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1880:
+.L1904:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR0
@@ -12817,7 +13115,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1863:
+.L1887:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12825,7 +13123,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1869:
+.L1893:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -12849,183 +13147,321 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1868
-.L1867:
+	b	.L1892
+.L1891:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1880
-.L1866:
+	b	.L1904
+.L1890:
 	add	w20, w20, 1
-	b	.L1865
-.L1878:
+	b	.L1889
+.L1902:
 	mov	w0, -1
-	b	.L1863
+	b	.L1887
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
 	.type	rk_sftl_vendor_storage_ioctl, %function
 rk_sftl_vendor_storage_ioctl:
-	stp	x29, x30, [sp, -48]!
+	stp	x29, x30, [sp, -64]!
 	mov	w0, 4096
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x20, x2
-	str	x21, [sp, 32]
+	stp	x21, x22, [sp, 32]
 	mov	w21, w1
+	str	x23, [sp, 48]
 	bl	ftl_malloc
-	cbz	x0, .L1898
-	mov	w1, 30209
+	cbz	x0, .L1927
 	mov	x19, x0
-	movk	w1, 0x4004, lsl 16
-	cmp	w21, w1
-	beq	.L1884
-	add	w1, w1, 1
-	cmp	w21, w1
-	beq	.L1885
-.L1908:
+	mov	w0, 30209
+	movk	w0, 0x4004, lsl 16
+	cmp	w21, w0
+	beq	.L1908
+	add	w0, w0, 1
+	cmp	w21, w0
+	beq	.L1909
+.L1943:
 	mov	x20, -14
-	b	.L1883
-.L1884:
+	b	.L1907
+.L1908:
 #APP
-// 21 "./arch/arm64/include/asm/current.h" 1
-	mrs x21, sp_el0
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x0, sp_el0
 // 0 "" 2
 #NO_APP
-	mov	x1, x20
-	ldr	x2, [x21, 8]
+	ldr	w2, [x0, 44]
+	ldr	x1, [x0, 8]
+	tbnz	x2, 21, .L1910
+	ldr	x0, [x0]
+	tbz	x0, 26, .L1929
+.L1910:
+	sbfx	x0, x20, 0, 56
+	and	x0, x0, x20
+.L1911:
+#APP
+// 89 "./arch/arm64/include/asm/uaccess.h" 1
+		adds	x0, x0, 8
+	csel	x1, xzr, x1, hi
+	csinv	x0, x0, xzr, cc
+	sbcs	xzr, x0, x1
+	cset	x0, ls
+
+// 0 "" 2
+#NO_APP
+	cbz	x0, .L1930
+	sbfx	x21, x20, 0, 56
+#APP
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x22, sp_el0
+// 0 "" 2
+#NO_APP
+	and	x21, x21, x20
+	ldr	x0, [x22, 8]
 #APP
-// 413 "./arch/arm64/include/asm/uaccess.h" 1
-	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
+// 249 "./arch/arm64/include/asm/uaccess.h" 1
+		bics	xzr, x21, x0
+	csel	x1, x20, xzr, eq
+
+// 0 "" 2
+// 257 "./arch/arm64/include/asm/uaccess.h" 1
+	hint #20
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1886
 	mov	x2, 8
-	mov	x1, x20
+	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbz	x0, .L1909
-.L1887:
+	mov	x2, x0
+	cbz	x0, .L1913
+.L1912:
+	sub	x0, x19, x2
+	mov	w1, 0
+	add	x0, x0, 8
+	bl	memset
 	mov	x2, x20
 	mov	w1, 256
-.L1913:
+.L1945:
 	adrp	x0, .LC133
 	add	x0, x0, :lo12:.LC133
 	bl	sftl_printk
-	b	.L1908
-.L1886:
-	str	xzr, [x0]
-	b	.L1887
-.L1909:
-	ldr	w1, [x19]
-	mov	w0, 17745
-	movk	w0, 0x5652, lsl 16
-	cmp	w1, w0
-	beq	.L1889
-.L1890:
-	mov	x20, -1
-.L1883:
-	mov	x0, x19
-	bl	kfree
-.L1881:
+	b	.L1943
+.L1929:
 	mov	x0, x20
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L1889:
-	ldrh	w2, [x19, 6]
-	add	x1, x19, 8
-	ldrh	w0, [x19, 4]
-	bl	rk_sftl_vendor_read
-	cmn	w0, #1
-	beq	.L1890
+	b	.L1911
+.L1930:
+	mov	x2, 8
+	b	.L1912
+.L1914:
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
-	mov	x0, x20
-	ldr	x1, [x21, 8]
+	ldr	w0, [x22, 44]
+	ldr	x1, [x22, 8]
+	tbnz	x0, 21, .L1931
+	ldr	x0, [x22]
+	tst	x0, 67108864
+	csel	x0, x21, x20, ne
+.L1915:
 #APP
-// 423 "./arch/arm64/include/asm/uaccess.h" 1
-	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
+// 89 "./arch/arm64/include/asm/uaccess.h" 1
+		adds	x0, x0, x2
+	csel	x1, xzr, x1, hi
+	csinv	x0, x0, xzr, cc
+	sbcs	xzr, x0, x1
+	cset	x0, ls
+
+// 0 "" 2
+#NO_APP
+	cbz	x0, .L1943
+#APP
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x0, sp_el0
+// 0 "" 2
+#NO_APP
+	ldr	x1, [x0, 8]
+#APP
+// 249 "./arch/arm64/include/asm/uaccess.h" 1
+		bics	xzr, x21, x1
+	csel	x0, x20, xzr, eq
+
+// 0 "" 2
+// 257 "./arch/arm64/include/asm/uaccess.h" 1
+	hint #20
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1908
-	mov	x0, x20
-	mov	x1, x19
 	mov	x20, 0
+	mov	x1, x19
 	bl	__arch_copy_to_user
-	cbz	x0, .L1883
-	b	.L1908
-.L1885:
+	cbz	x0, .L1907
+	b	.L1943
+.L1931:
+	mov	x0, x21
+	b	.L1915
+.L1909:
 #APP
-// 21 "./arch/arm64/include/asm/current.h" 1
-	mrs x21, sp_el0
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x0, sp_el0
 // 0 "" 2
 #NO_APP
-	mov	x1, x20
-	ldr	x2, [x21, 8]
+	ldr	w2, [x0, 44]
+	ldr	x1, [x0, 8]
+	tbnz	x2, 21, .L1917
+	ldr	x0, [x0]
+	tbz	x0, 26, .L1934
+.L1917:
+	sbfx	x0, x20, 0, 56
+	and	x0, x0, x20
+.L1918:
 #APP
-// 413 "./arch/arm64/include/asm/uaccess.h" 1
-	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
+// 89 "./arch/arm64/include/asm/uaccess.h" 1
+		adds	x0, x0, 8
+	csel	x1, xzr, x1, hi
+	csinv	x0, x0, xzr, cc
+	sbcs	xzr, x0, x1
+	cset	x0, ls
+
+// 0 "" 2
+#NO_APP
+	cbz	x0, .L1935
+	sbfx	x22, x20, 0, 56
+#APP
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x23, sp_el0
+// 0 "" 2
+#NO_APP
+	and	x22, x22, x20
+	ldr	x0, [x23, 8]
+#APP
+// 249 "./arch/arm64/include/asm/uaccess.h" 1
+		bics	xzr, x22, x0
+	csel	x1, x20, xzr, eq
+
+// 0 "" 2
+// 257 "./arch/arm64/include/asm/uaccess.h" 1
+	hint #20
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1892
 	mov	x2, 8
-	mov	x1, x20
+	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbz	x0, .L1910
-.L1893:
+	mov	x2, x0
+	cbz	x0, .L1920
+.L1919:
+	sub	x0, x19, x2
+	mov	w1, 0
+	add	x0, x0, 8
+	bl	memset
 	mov	x2, x20
 	mov	w1, 276
-	b	.L1913
-.L1892:
-	str	xzr, [x0]
-	b	.L1893
-.L1910:
+	b	.L1945
+.L1934:
+	mov	x0, x20
+	b	.L1918
+.L1935:
+	mov	x2, 8
+	b	.L1919
+.L1936:
+	mov	x0, x22
+	b	.L1922
+.L1938:
+	mov	x0, x21
+	b	.L1923
+.L1927:
+	mov	x20, -1
+	b	.L1905
+.L1913:
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1890
+	bne	.L1921
 	ldrh	w2, [x19, 6]
-	cmp	w2, 4087
-	bhi	.L1890
-	add	w2, w2, 8
+	add	x1, x19, 8
+	ldrh	w0, [x19, 4]
+	bl	rk_sftl_vendor_read
+	cmn	w0, #1
+	bne	.L1914
+.L1921:
+	mov	x20, -1
+.L1907:
+	mov	x0, x19
+	bl	kfree
+.L1905:
 	mov	x0, x20
-	sxtw	x2, w2
-	ldr	x1, [x21, 8]
+	ldr	x23, [sp, 48]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 64
+	ret
+.L1920:
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	bne	.L1921
+	ldrh	w21, [x19, 6]
+	cmp	w21, 4087
+	bhi	.L1921
+	ldr	w0, [x23, 44]
+	add	w21, w21, 8
+	sxtw	x21, w21
+	ldr	x1, [x23, 8]
+	tbnz	x0, 21, .L1936
+	ldr	x0, [x23]
+	tst	x0, 67108864
+	csel	x0, x22, x20, ne
+.L1922:
+#APP
+// 89 "./arch/arm64/include/asm/uaccess.h" 1
+		adds	x0, x0, x21
+	csel	x1, xzr, x1, hi
+	csinv	x0, x0, xzr, cc
+	sbcs	xzr, x0, x1
+	cset	x0, ls
+
+// 0 "" 2
+#NO_APP
+	cbz	x0, .L1938
 #APP
-// 413 "./arch/arm64/include/asm/uaccess.h" 1
-	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
+// 19 "./arch/arm64/include/asm/current.h" 1
+	mrs x0, sp_el0
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1895
-	mov	x1, x20
+	ldr	x0, [x0, 8]
+#APP
+// 249 "./arch/arm64/include/asm/uaccess.h" 1
+		bics	xzr, x22, x0
+	csel	x1, x20, xzr, eq
+
+// 0 "" 2
+// 257 "./arch/arm64/include/asm/uaccess.h" 1
+	hint #20
+// 0 "" 2
+#NO_APP
+	mov	x2, x21
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbz	x0, .L1911
-.L1896:
-	mov	x2, x20
-	mov	w1, 283
-	b	.L1913
-.L1895:
+	cbz	x0, .L1924
+.L1923:
+	sub	x21, x21, x0
+	mov	x2, x0
 	mov	w1, 0
-	mov	x0, x19
+	add	x0, x19, x21
 	bl	memset
-	b	.L1896
-.L1911:
+	mov	x2, x20
+	mov	w1, 283
+	b	.L1945
+.L1924:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1883
-.L1898:
-	mov	x20, -1
-	b	.L1881
+	b	.L1907
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -13192,193 +13628,193 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3807, %object
-	.size	__func__.3807, 17
-__func__.3807:
+	.type	__func__.5951, %object
+	.size	__func__.5951, 17
+__func__.5951:
 	.string	"INSERT_DATA_LIST"
 	.zero	7
-	.type	__func__.3802, %object
-	.size	__func__.3802, 17
-__func__.3802:
+	.type	__func__.5946, %object
+	.size	__func__.5946, 17
+__func__.5946:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.3838, %object
-	.size	__func__.3838, 17
-__func__.3838:
+	.type	__func__.5982, %object
+	.size	__func__.5982, 17
+__func__.5982:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.3870, %object
-	.size	__func__.3870, 22
-__func__.3870:
+	.type	__func__.6014, %object
+	.size	__func__.6014, 22
+__func__.6014:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.3977, %object
-	.size	__func__.3977, 22
-__func__.3977:
+	.type	__func__.6121, %object
+	.size	__func__.6121, 22
+__func__.6121:
 	.string	"select_l2p_ram_region"
 	.zero	2
-	.type	__func__.4304, %object
-	.size	__func__.4304, 16
-__func__.4304:
+	.type	__func__.6448, %object
+	.size	__func__.6448, 16
+__func__.6448:
 	.string	"make_superblock"
-	.type	__func__.4479, %object
-	.size	__func__.4479, 19
-__func__.4479:
+	.type	__func__.6623, %object
+	.size	__func__.6623, 19
+__func__.6623:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.16194, %object
-	.size	__func__.16194, 17
-__func__.16194:
+	.type	__func__.13467, %object
+	.size	__func__.13467, 17
+__func__.13467:
 	.string	"FlashEraseBlocks"
 	.zero	7
-	.type	__func__.3912, %object
-	.size	__func__.3912, 26
-__func__.3912:
+	.type	__func__.6056, %object
+	.size	__func__.6056, 26
+__func__.6056:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.3417, %object
-	.size	__func__.3417, 11
-__func__.3417:
+	.type	__func__.5561, %object
+	.size	__func__.5561, 11
+__func__.5561:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.3644, %object
-	.size	__func__.3644, 14
-__func__.3644:
+	.type	__func__.5788, %object
+	.size	__func__.5788, 14
+__func__.5788:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
-	.type	__func__.4325, %object
-	.size	__func__.4325, 18
-__func__.4325:
+	.type	__func__.6469, %object
+	.size	__func__.6469, 18
+__func__.6469:
 	.string	"SupperBlkListInit"
 	.zero	6
-	.type	__func__.16151, %object
-	.size	__func__.16151, 15
-__func__.16151:
+	.type	__func__.13424, %object
+	.size	__func__.13424, 15
+__func__.13424:
 	.string	"FlashReadPages"
 	.zero	1
-	.type	__func__.4089, %object
-	.size	__func__.4089, 14
-__func__.4089:
+	.type	__func__.6233, %object
+	.size	__func__.6233, 14
+__func__.6233:
 	.string	"FtlScanSysBlk"
 	.zero	2
-	.type	__func__.3687, %object
-	.size	__func__.3687, 11
-__func__.3687:
+	.type	__func__.5831, %object
+	.size	__func__.5831, 11
+__func__.5831:
 	.string	"FtlLoadBbt"
 	.zero	5
-	.type	__func__.16170, %object
-	.size	__func__.16170, 15
-__func__.16170:
+	.type	__func__.13443, %object
+	.size	__func__.13443, 15
+__func__.13443:
 	.string	"FlashProgPages"
 	.zero	1
-	.type	__func__.4451, %object
-	.size	__func__.4451, 25
-__func__.4451:
+	.type	__func__.6595, %object
+	.size	__func__.6595, 25
+__func__.6595:
 	.string	"allocate_data_superblock"
 	.zero	7
-	.type	__func__.4492, %object
-	.size	__func__.4492, 16
-__func__.4492:
+	.type	__func__.6636, %object
+	.size	__func__.6636, 16
+__func__.6636:
 	.string	"update_vpc_list"
-	.type	__func__.4499, %object
-	.size	__func__.4499, 20
-__func__.4499:
+	.type	__func__.6643, %object
+	.size	__func__.6643, 20
+__func__.6643:
 	.string	"decrement_vpc_count"
 	.zero	4
-	.type	__func__.3938, %object
-	.size	__func__.3938, 31
-__func__.3938:
+	.type	__func__.6082, %object
+	.size	__func__.6082, 31
+__func__.6082:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.3952, %object
-	.size	__func__.3952, 16
-__func__.3952:
+	.type	__func__.6096, %object
+	.size	__func__.6096, 16
+__func__.6096:
 	.string	"FtlMapWritePage"
-	.type	__func__.3879, %object
-	.size	__func__.3879, 16
-__func__.3879:
+	.type	__func__.6023, %object
+	.size	__func__.6023, 16
+__func__.6023:
 	.string	"load_l2p_region"
-	.type	__func__.3923, %object
-	.size	__func__.3923, 15
-__func__.3923:
+	.type	__func__.6067, %object
+	.size	__func__.6067, 15
+__func__.6067:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.3994, %object
-	.size	__func__.3994, 9
-__func__.3994:
+	.type	__func__.6138, %object
+	.size	__func__.6138, 9
+__func__.6138:
 	.string	"log2phys"
 	.zero	7
-	.type	__func__.4213, %object
-	.size	__func__.4213, 16
-__func__.4213:
+	.type	__func__.6357, %object
+	.size	__func__.6357, 16
+__func__.6357:
 	.string	"FtlReUsePrevPpa"
-	.type	__func__.4247, %object
-	.size	__func__.4247, 22
-__func__.4247:
+	.type	__func__.6391, %object
+	.size	__func__.6391, 22
+__func__.6391:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.4366, %object
-	.size	__func__.4366, 14
-__func__.4366:
+	.type	__func__.6510, %object
+	.size	__func__.6510, 14
+__func__.6510:
 	.string	"ftl_check_vpc"
 	.zero	2
-	.type	__func__.4067, %object
-	.size	__func__.4067, 15
-__func__.4067:
+	.type	__func__.6211, %object
+	.size	__func__.6211, 15
+__func__.6211:
 	.string	"FtlVpcTblFlush"
 	.zero	1
-	.type	__func__.4350, %object
-	.size	__func__.4350, 21
-__func__.4350:
+	.type	__func__.6494, %object
+	.size	__func__.6494, 21
+__func__.6494:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.4472, %object
-	.size	__func__.4472, 29
-__func__.4472:
+	.type	__func__.6616, %object
+	.size	__func__.6616, 29
+__func__.6616:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.3541, %object
-	.size	__func__.3541, 13
-__func__.3541:
+	.type	__func__.5685, %object
+	.size	__func__.5685, 13
+__func__.5685:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.4569, %object
-	.size	__func__.4569, 19
-__func__.4569:
+	.type	__func__.6713, %object
+	.size	__func__.6713, 19
+__func__.6713:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.4682, %object
-	.size	__func__.4682, 23
-__func__.4682:
+	.type	__func__.6826, %object
+	.size	__func__.6826, 23
+__func__.6826:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.3569, %object
-	.size	__func__.3569, 9
-__func__.3569:
+	.type	__func__.5713, %object
+	.size	__func__.5713, 9
+__func__.5713:
 	.string	"FtlWrite"
 	.zero	7
-	.type	__func__.4145, %object
-	.size	__func__.4145, 15
-__func__.4145:
+	.type	__func__.6289, %object
+	.size	__func__.6289, 15
+__func__.6289:
 	.string	"FtlLoadSysInfo"
 	.zero	1
-	.type	__func__.4167, %object
-	.size	__func__.4167, 18
-__func__.4167:
+	.type	__func__.6311, %object
+	.size	__func__.6311, 18
+__func__.6311:
 	.string	"FtlMapTblRecovery"
 	.zero	6
-	.type	__func__.16313, %object
-	.size	__func__.16313, 14
-__func__.16313:
+	.type	__func__.13586, %object
+	.size	__func__.13586, 14
+__func__.13586:
 	.string	"FtlWriteToIDB"
 	.zero	2
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 216
+	.size	rk_sftl_vendor_storage_fops, 256
 rk_sftl_vendor_storage_fops:
-	.zero	64
+	.zero	72
 	.xword	rk_sftl_vendor_storage_ioctl
 	.xword	rk_sftl_vendor_storage_ioctl
-	.zero	136
+	.zero	168
 	.data
 	.align	3
 	.set	.LANCHOR2,. + 0
@@ -14043,7 +14479,7 @@ gp_last_act_superblock:
 	.zero	8
 	.section	.rodata.str1.1,"aMS",@progbits,1
 .LC0:
-	.string	"SFTL version: 5.0.52 20191125"
+	.string	"SFTL version: 5.0.53 20200303"
 .LC1:
 	.string	"\n%s\n"
 .LC2:
@@ -14275,7 +14711,7 @@ gp_last_act_superblock:
 .LC115:
 	.string	"scan lpa = %x ppa= %x\n"
 .LC116:
-	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"lpa = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC117:
 	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
 .LC118:
-- 
2.35.3

