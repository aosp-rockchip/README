From 0301e4d916a52448668538a2bbe9673428fd051b Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Thu, 6 Jun 2019 17:45:30 +0800
Subject: [PATCH] PM / OPP: Implement dev_pm_opp_check_rate_volt()

Add support to change voltage even if old_rate is equal to target_rate.

Change-Id: I8f0020097a196420bc86f41d2dbc681730d410de
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/opp/core.c     | 85 ++++++++++++++++++++++++++++++++++++++++++
 include/linux/pm_opp.h |  6 +++
 2 files changed, 91 insertions(+)

diff --git a/drivers/opp/core.c b/drivers/opp/core.c
index 31ff03dbeb83..4b2acb7e3c4d 100644
--- a/drivers/opp/core.c
+++ b/drivers/opp/core.c
@@ -745,6 +745,91 @@ int dev_pm_opp_set_rate(struct device *dev, unsigned long target_freq)
 }
 EXPORT_SYMBOL_GPL(dev_pm_opp_set_rate);
 
+/**
+ * dev_pm_opp_check_rate_volt() - Configure new OPP based on current rate
+ * @dev:	device for which we do this operation
+ * @force:	when true force to set voltage
+ *
+ * This configures the power-supplies and clock source to the levels specified
+ * by the OPP corresponding to current rate.
+ *
+ */
+int dev_pm_opp_check_rate_volt(struct device *dev, bool force)
+{
+	struct opp_table *opp_table;
+	struct dev_pm_opp *opp;
+	struct regulator *reg;
+	struct clk *clk;
+	unsigned long old_freq, target_freq, target_volt;
+	int old_volt;
+	int ret = 0;
+
+	opp_table = _find_opp_table(dev);
+	if (IS_ERR(opp_table)) {
+		dev_err(dev, "%s: device opp doesn't exist\n", __func__);
+		return PTR_ERR(opp_table);
+	}
+
+	clk = opp_table->clk;
+	if (!opp_table->regulators) {
+		dev_err(dev, "opp_table regulators is null\n");
+		goto put_opp_table;
+	}
+	reg = opp_table->regulators[0];
+	if (IS_ERR_OR_NULL(clk) || IS_ERR_OR_NULL(reg)) {
+		dev_err(dev, "clk or regulater is unavailable\n");
+		ret = -EINVAL;
+		goto put_opp_table;
+	}
+	old_freq = clk_get_rate(clk);
+	old_volt = regulator_get_voltage(reg);
+	if (old_volt <= 0) {
+		dev_err(dev, "failed to get volt %d\n", old_volt);
+		ret = -EINVAL;
+		goto put_opp_table;
+	}
+
+	target_freq = old_freq;
+	/* If not available, use the closest opp */
+	opp = dev_pm_opp_find_freq_ceil(dev, &target_freq);
+	if (IS_ERR(opp)) {
+		/* The freq is an upper bound. opp should be lower */
+		opp = dev_pm_opp_find_freq_floor(dev, &target_freq);
+		if (IS_ERR(opp)) {
+			dev_err(dev, "failed to find OPP for freq %lu\n",
+				target_freq);
+			ret = PTR_ERR(opp);
+			goto put_opp_table;
+		}
+	}
+	target_volt = opp->supplies->u_volt;
+	target_freq = clk_round_rate(clk, target_freq);
+
+	dev_dbg(dev, "%lu Hz %d uV --> %lu Hz %lu uV\n", old_freq, old_volt,
+		target_freq, target_volt);
+
+	if (old_freq == target_freq) {
+		if (old_volt != target_volt || force) {
+			ret = _set_opp_voltage(dev, reg, opp->supplies);
+			if (ret) {
+				dev_err(dev, "failed to set volt %lu\n",
+					target_volt);
+				goto put_opp;
+			}
+		}
+		goto put_opp;
+	}
+
+	ret = _generic_set_opp_regulator(opp_table, dev, old_freq, target_freq,
+					  NULL, opp->supplies);
+put_opp:
+	dev_pm_opp_put(opp);
+put_opp_table:
+	dev_pm_opp_put_opp_table(opp_table);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_check_rate_volt);
+
 /* OPP-dev Helpers */
 static void _remove_opp_dev(struct opp_device *opp_dev,
 			    struct opp_table *opp_table)
diff --git a/include/linux/pm_opp.h b/include/linux/pm_opp.h
index 11dbffc7f889..5a37aba17018 100644
--- a/include/linux/pm_opp.h
+++ b/include/linux/pm_opp.h
@@ -126,6 +126,7 @@ void dev_pm_opp_put_clkname(struct opp_table *opp_table);
 struct opp_table *dev_pm_opp_register_set_opp_helper(struct device *dev, int (*set_opp)(struct dev_pm_set_opp_data *data));
 void dev_pm_opp_unregister_set_opp_helper(struct opp_table *opp_table);
 int dev_pm_opp_set_rate(struct device *dev, unsigned long target_freq);
+int dev_pm_opp_check_rate_volt(struct device *dev, bool force);
 int dev_pm_opp_set_sharing_cpus(struct device *cpu_dev, const struct cpumask *cpumask);
 int dev_pm_opp_get_sharing_cpus(struct device *cpu_dev, struct cpumask *cpumask);
 void dev_pm_opp_remove_table(struct device *dev);
@@ -271,6 +272,11 @@ static inline int dev_pm_opp_set_rate(struct device *dev, unsigned long target_f
 	return -ENOTSUPP;
 }
 
+static inline int dev_pm_opp_check_rate_volt(struct device *dev, bool force)
+{
+	return -ENOTSUPP;
+}
+
 static inline int dev_pm_opp_set_sharing_cpus(struct device *cpu_dev, const struct cpumask *cpumask)
 {
 	return -ENOTSUPP;
-- 
2.35.3

