From 232d9c30becfbf71046ef527171b1246b5c0f190 Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Tue, 1 Jan 2019 12:18:46 +0800
Subject: [PATCH] drm/rockchip: lvds: Convert to use MEDIA_BUS_FMT_*

On LVDS buses, usually each sample is transferred serialized in seven
time slots per pixel clock, on three (18-bit) or four (24-bit) differential
data pairs at the same time. The remaining bits are used for control signals
as defined by SPWG/PSWG/VESA or JEIDA standards. The 24-bit RGB format
serialized in seven time slots on four lanes using JEIDA defined bit mapping
will be named MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA, for example.

LVDS RGB formats
-----------------------------------------------------------------------
Identifier                       Code                 Data organization
                                        Timeslot Lane 3   2   1   0
MEDIA_BUS_FMT_RGB666_1X7X3_SPWG  0x1010    0              d   b1  g0
                                           1              d   b0  r5
                                           2              d   g5  r4
                                           3              b5  g4  r3
                                           4              b4  g3  r2
                                           5              b3  g2  r1
                                           6              b2  g1  r0

MEDIA_BUS_FMT_RGB888_1X7X4_SPWG  0x1011    0          d   d   b1  g0
                                           1          b7  d   b0  r5
                                           2          b6  d   g5  r4
                                           3          g7  b5  g4  r3
                                           4          g6  b4  g3  r2
                                           5          r7  b3  g2  r1
                                           6          r6  b2  g1  r0

MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA 0x1012    0          d   d   b3  g2
                                           1          b1  d   b2  r7
                                           2          b0  d   g7  r6
                                           3          g1  b7  g6  r5
                                           4          g0  b6  g5  r4
                                           5          r1  b5  g4  r3
                                           6          r0  b4  g3  r2

Change-Id: I7ca6442a761ac6ff29eb8b23d57647bf14d734ba
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_lvds.c | 73 ++++++++++--------------
 1 file changed, 29 insertions(+), 44 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_lvds.c b/drivers/gpu/drm/rockchip/rockchip_lvds.c
index d50e29d5714b..ee0f88756e41 100644
--- a/drivers/gpu/drm/rockchip/rockchip_lvds.c
+++ b/drivers/gpu/drm/rockchip/rockchip_lvds.c
@@ -75,6 +75,13 @@
 #define DISPLAY_OUTPUT_LVDS		1
 #define DISPLAY_OUTPUT_DUAL_LVDS	2
 
+enum lvds_format {
+	LVDS_8BIT_MODE_FORMAT_1,
+	LVDS_8BIT_MODE_FORMAT_2,
+	LVDS_8BIT_MODE_FORMAT_3,
+	LVDS_6BIT_MODE,
+};
+
 struct rockchip_lvds;
 
 struct rockchip_lvds_funcs {
@@ -88,8 +95,8 @@ struct rockchip_lvds {
 	struct regmap *grf;
 	const struct rockchip_lvds_funcs *funcs;
 
+	enum lvds_format format;
 	int output;
-	int format;
 
 	struct drm_panel *panel;
 	struct drm_bridge *bridge;
@@ -98,19 +105,6 @@ struct rockchip_lvds {
 	struct drm_display_mode mode;
 };
 
-static inline int lvds_name_to_format(const char *s)
-{
-	if (!s)
-		return -EINVAL;
-
-	if (strncmp(s, "jeida", 6) == 0)
-		return LVDS_FORMAT_JEIDA;
-	else if (strncmp(s, "vesa", 5) == 0)
-		return LVDS_FORMAT_VESA;
-
-	return -EINVAL;
-}
-
 static inline int lvds_name_to_output(const char *s)
 {
 	if (!s)
@@ -186,6 +180,25 @@ static void rockchip_lvds_encoder_mode_set(struct drm_encoder *encoder,
 					  struct drm_display_mode *adjusted)
 {
 	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
+	struct drm_connector *connector = &lvds->connector;
+	struct drm_display_info *info = &connector->display_info;
+	u32 bus_format = MEDIA_BUS_FMT_RGB888_1X7X4_SPWG;
+
+	if (info->num_bus_formats)
+		bus_format = info->bus_formats[0];
+
+	switch (bus_format) {
+	case MEDIA_BUS_FMT_RGB666_1X7X3_SPWG:	/* jeida-18 */
+		lvds->format = LVDS_6BIT_MODE;
+		break;
+	case MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA:	/* jeida-24 */
+		lvds->format = LVDS_8BIT_MODE_FORMAT_2;
+		break;
+	case MEDIA_BUS_FMT_RGB888_1X7X4_SPWG:	/* vesa-24 */
+	default:
+		lvds->format = LVDS_8BIT_MODE_FORMAT_1;
+		break;
+	}
 
 	drm_mode_copy(&lvds->mode, adjusted);
 }
@@ -202,7 +215,7 @@ rockchip_lvds_encoder_atomic_check(struct drm_encoder *encoder,
 	if (info->num_bus_formats)
 		s->bus_format = info->bus_formats[0];
 	else
-		s->bus_format = MEDIA_BUS_FMT_RGB888_1X24;
+		s->bus_format = MEDIA_BUS_FMT_RGB888_1X7X4_SPWG;
 
 	s->output_mode = ROCKCHIP_OUT_MODE_P888;
 	s->output_type = DRM_MODE_CONNECTOR_LVDS;
@@ -273,7 +286,7 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 	struct drm_connector *connector = &lvds->connector;
 	struct device_node *remote = NULL;
 	struct device_node  *port, *endpoint;
-	int ret, i;
+	int ret;
 	const char *name;
 
 	port = of_graph_get_port_by_id(dev->of_node, 1);
@@ -323,34 +336,6 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 		goto err_put_remote;
 	}
 
-	if (of_property_read_string(remote, "rockchip,data-mapping",
-				    &name))
-		/* default set it as format jeida */
-		lvds->format = LVDS_FORMAT_JEIDA;
-	else
-		lvds->format = lvds_name_to_format(name);
-
-	if (lvds->format < 0) {
-		dev_err(dev, "invalid data-mapping format [%s]\n", name);
-		ret = lvds->format;
-		goto err_put_remote;
-	}
-
-	if (of_property_read_u32(remote, "rockchip,data-width", &i)) {
-		lvds->format |= LVDS_24BIT;
-	} else {
-		if (i == 24) {
-			lvds->format |= LVDS_24BIT;
-		} else if (i == 18) {
-			lvds->format |= LVDS_18BIT;
-		} else {
-			dev_err(dev,
-				"rockchip-lvds unsupport data-width[%d]\n", i);
-			ret = -EINVAL;
-			goto err_put_remote;
-		}
-	}
-
 	encoder->port = dev->of_node;
 	encoder->possible_crtcs = drm_of_find_possible_crtcs(drm_dev,
 							     dev->of_node);
-- 
2.35.3

