From 8629f700ae19767f404f7704fe0915c333d55412 Mon Sep 17 00:00:00 2001
From: lyx <lyx@rock-chips.com>
Date: Sun, 20 Mar 2011 23:12:10 -0700
Subject: [PATCH] update spi driver

---
 arch/arm/mach-rk29/board-malata.c         | 30 ++----------
 arch/arm/mach-rk29/board-rk29-aigo.c      | 34 +++----------
 arch/arm/mach-rk29/board-rk29-phonesdk.c  | 36 +++-----------
 arch/arm/mach-rk29/board-rk29-winaccord.c | 34 +++----------
 arch/arm/mach-rk29/board-rk29sdk.c        | 30 ++----------
 drivers/spi/rk29_spim.c                   | 59 ++++++++++++++---------
 drivers/spi/spi.c                         |  1 +
 7 files changed, 69 insertions(+), 155 deletions(-)
 mode change 100644 => 100755 arch/arm/mach-rk29/board-malata.c
 mode change 100644 => 100755 arch/arm/mach-rk29/board-rk29-aigo.c
 mode change 100644 => 100755 arch/arm/mach-rk29/board-rk29-winaccord.c
 mode change 100644 => 100755 drivers/spi/spi.c

diff --git a/arch/arm/mach-rk29/board-malata.c b/arch/arm/mach-rk29/board-malata.c
old mode 100644
new mode 100755
index 1e311dd51e6f..305db83e83fe
--- a/arch/arm/mach-rk29/board-malata.c
+++ b/arch/arm/mach-rk29/board-malata.c
@@ -1734,7 +1734,8 @@ static struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi0 cs0",
 		.cs_gpio = RK29_PIN2_PC1,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C1_SPI0CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI0_CSN0,
 	},
 	{
 		.name = "spi0 cs1",
@@ -1748,7 +1749,8 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi1 cs0",
 		.cs_gpio = RK29_PIN2_PC5,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C5_SPI1CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI1_CSN0,
 	},
 	{
 		.name = "spi1 cs1",
@@ -1761,22 +1763,10 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
 static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
 #if 1
-	int i,j,ret;
-
-	//cs
+	int i;
 	if (cs_gpios) {
 		for (i=0; i<cs_num; i++) {
 			rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
-			ret = gpio_request(cs_gpios[i].cs_gpio, cs_gpios[i].name);
-			if (ret) {
-				for (j=0;j<i;j++) {
-					gpio_free(cs_gpios[j].cs_gpio);
-					//rk29_mux_api_mode_resume(cs_gpios[j].cs_iomux_name);
-				}
-				printk("[fun:%s, line:%d], gpio request err\n", __func__, __LINE__);
-				return -1;
-			}
-			gpio_direction_output(cs_gpios[i].cs_gpio, GPIO_HIGH);
 		}
 	}
 #endif
@@ -1785,16 +1775,6 @@ static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 
 static int spi_io_deinit(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
-#if 1
-	int i;
-
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			gpio_free(cs_gpios[i].cs_gpio);
-			//rk29_mux_api_mode_resume(cs_gpios[i].cs_iomux_name);
-		}
-	}
-#endif
 	return 0;
 }
 
diff --git a/arch/arm/mach-rk29/board-rk29-aigo.c b/arch/arm/mach-rk29/board-rk29-aigo.c
old mode 100644
new mode 100755
index b9a93def13ac..774bb154e805
--- a/arch/arm/mach-rk29/board-rk29-aigo.c
+++ b/arch/arm/mach-rk29/board-rk29-aigo.c
@@ -1559,11 +1559,12 @@ struct rk29_vmac_platform_data rk29_vmac_pdata = {
  * author: cmc@rock-chips.com
  *****************************************************************************************/
 #define SPI_CHIPSELECT_NUM 2
-struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
+static struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi0 cs0",
 		.cs_gpio = RK29_PIN2_PC1,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C1_SPI0CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI0_CSN0,
 	},
 	{
 		.name = "spi0 cs1",
@@ -1573,11 +1574,12 @@ struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
 	}
 };
 
-struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
+static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi1 cs0",
 		.cs_gpio = RK29_PIN2_PC5,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C5_SPI1CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI1_CSN0,
 	},
 	{
 		.name = "spi1 cs1",
@@ -1590,22 +1592,10 @@ struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
 static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
 #if 1
-	int i,j,ret;
-
-	//cs
+	int i;
 	if (cs_gpios) {
 		for (i=0; i<cs_num; i++) {
 			rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
-			ret = gpio_request(cs_gpios[i].cs_gpio, cs_gpios[i].name);
-			if (ret) {
-				for (j=0;j<i;j++) {
-					gpio_free(cs_gpios[j].cs_gpio);
-					//rk29_mux_api_mode_resume(cs_gpios[j].cs_iomux_name);
-				}
-				printk("[fun:%s, line:%d], gpio request err\n", __func__, __LINE__);
-				return -1;
-			}
-			gpio_direction_output(cs_gpios[i].cs_gpio, GPIO_HIGH);
 		}
 	}
 #endif
@@ -1614,16 +1604,6 @@ static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 
 static int spi_io_deinit(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
-#if 1
-	int i;
-
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			gpio_free(cs_gpios[i].cs_gpio);
-			//rk29_mux_api_mode_resume(cs_gpios[i].cs_iomux_name);
-		}
-	}
-#endif
 	return 0;
 }
 
diff --git a/arch/arm/mach-rk29/board-rk29-phonesdk.c b/arch/arm/mach-rk29/board-rk29-phonesdk.c
index d8a69cdf4699..3cb3453a6ea1 100755
--- a/arch/arm/mach-rk29/board-rk29-phonesdk.c
+++ b/arch/arm/mach-rk29/board-rk29-phonesdk.c
@@ -2483,7 +2483,8 @@ static struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi0 cs0",
 		.cs_gpio = RK29_PIN2_PC1,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C1_SPI0CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI0_CSN0,
 	},
 	{
 		.name = "spi0 cs1",
@@ -2497,7 +2498,8 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi1 cs0",
 		.cs_gpio = RK29_PIN2_PC5,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C5_SPI1CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI1_CSN0,
 	},
 	{
 		.name = "spi1 cs1",
@@ -2510,40 +2512,18 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
 static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
 #if 1
-	int i,j,ret;
-
-	//cs
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
-			ret = gpio_request(cs_gpios[i].cs_gpio, cs_gpios[i].name);
-			if (ret) {
-				for (j=0;j<i;j++) {
-					gpio_free(cs_gpios[j].cs_gpio);
-					//rk29_mux_api_mode_resume(cs_gpios[j].cs_iomux_name);
-				}
-				printk("[fun:%s, line:%d], gpio request err\n", __func__, __LINE__);
-				return -1;
+		int i;
+		if (cs_gpios) {
+			for (i=0; i<cs_num; i++) {
+				rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
 			}
-			gpio_direction_output(cs_gpios[i].cs_gpio, GPIO_HIGH);
 		}
-	}
 #endif
 	return 0;
 }
 
 static int spi_io_deinit(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
-#if 1
-	int i;
-
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			gpio_free(cs_gpios[i].cs_gpio);
-			//rk29_mux_api_mode_resume(cs_gpios[i].cs_iomux_name);
-		}
-	}
-#endif
 	return 0;
 }
 
diff --git a/arch/arm/mach-rk29/board-rk29-winaccord.c b/arch/arm/mach-rk29/board-rk29-winaccord.c
old mode 100644
new mode 100755
index b1ba8e6e2aea..3eb952058f53
--- a/arch/arm/mach-rk29/board-rk29-winaccord.c
+++ b/arch/arm/mach-rk29/board-rk29-winaccord.c
@@ -1476,11 +1476,12 @@ struct rk29_vmac_platform_data rk29_vmac_pdata = {
  * author: cmc@rock-chips.com
  *****************************************************************************************/
 #define SPI_CHIPSELECT_NUM 2
-struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
+static struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi0 cs0",
 		.cs_gpio = RK29_PIN2_PC1,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C1_SPI0CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI0_CSN0,
 	},
 	{
 		.name = "spi0 cs1",
@@ -1490,11 +1491,12 @@ struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
 	}
 };
 
-struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
+static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi1 cs0",
 		.cs_gpio = RK29_PIN2_PC5,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C5_SPI1CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI1_CSN0,
 	},
 	{
 		.name = "spi1 cs1",
@@ -1507,22 +1509,10 @@ struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
 static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
 #if 1
-	int i,j,ret;
-
-	//cs
+	int i;
 	if (cs_gpios) {
 		for (i=0; i<cs_num; i++) {
 			rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
-			ret = gpio_request(cs_gpios[i].cs_gpio, cs_gpios[i].name);
-			if (ret) {
-				for (j=0;j<i;j++) {
-					gpio_free(cs_gpios[j].cs_gpio);
-					//rk29_mux_api_mode_resume(cs_gpios[j].cs_iomux_name);
-				}
-				printk("[fun:%s, line:%d], gpio request err\n", __func__, __LINE__);
-				return -1;
-			}
-			gpio_direction_output(cs_gpios[i].cs_gpio, GPIO_HIGH);
 		}
 	}
 #endif
@@ -1531,16 +1521,6 @@ static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 
 static int spi_io_deinit(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
-#if 1
-	int i;
-
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			gpio_free(cs_gpios[i].cs_gpio);
-			//rk29_mux_api_mode_resume(cs_gpios[i].cs_iomux_name);
-		}
-	}
-#endif
 	return 0;
 }
 
diff --git a/arch/arm/mach-rk29/board-rk29sdk.c b/arch/arm/mach-rk29/board-rk29sdk.c
index 145b04edbd58..183dc28ace83 100755
--- a/arch/arm/mach-rk29/board-rk29sdk.c
+++ b/arch/arm/mach-rk29/board-rk29sdk.c
@@ -1679,7 +1679,8 @@ static struct spi_cs_gpio rk29xx_spi0_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi0 cs0",
 		.cs_gpio = RK29_PIN2_PC1,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C1_SPI0CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI0_CSN0,
 	},
 	{
 		.name = "spi0 cs1",
@@ -1693,7 +1694,8 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
     {
 		.name = "spi1 cs0",
 		.cs_gpio = RK29_PIN2_PC5,
-		.cs_iomux_name = NULL,
+		.cs_iomux_name = GPIO2C5_SPI1CSN0_NAME,
+		.cs_iomux_mode = GPIO2H_SPI1_CSN0,
 	},
 	{
 		.name = "spi1 cs1",
@@ -1706,22 +1708,10 @@ static struct spi_cs_gpio rk29xx_spi1_cs_gpios[SPI_CHIPSELECT_NUM] = {
 static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
 #if 1
-	int i,j,ret;
-
-	//cs
+	int i;
 	if (cs_gpios) {
 		for (i=0; i<cs_num; i++) {
 			rk29_mux_api_set(cs_gpios[i].cs_iomux_name, cs_gpios[i].cs_iomux_mode);
-			ret = gpio_request(cs_gpios[i].cs_gpio, cs_gpios[i].name);
-			if (ret) {
-				for (j=0;j<i;j++) {
-					gpio_free(cs_gpios[j].cs_gpio);
-					//rk29_mux_api_mode_resume(cs_gpios[j].cs_iomux_name);
-				}
-				printk("[fun:%s, line:%d], gpio request err\n", __func__, __LINE__);
-				return -1;
-			}
-			gpio_direction_output(cs_gpios[i].cs_gpio, GPIO_HIGH);
 		}
 	}
 #endif
@@ -1730,16 +1720,6 @@ static int spi_io_init(struct spi_cs_gpio *cs_gpios, int cs_num)
 
 static int spi_io_deinit(struct spi_cs_gpio *cs_gpios, int cs_num)
 {
-#if 1
-	int i;
-
-	if (cs_gpios) {
-		for (i=0; i<cs_num; i++) {
-			gpio_free(cs_gpios[i].cs_gpio);
-			//rk29_mux_api_mode_resume(cs_gpios[i].cs_iomux_name);
-		}
-	}
-#endif
 	return 0;
 }
 
diff --git a/drivers/spi/rk29_spim.c b/drivers/spi/rk29_spim.c
index c706987e12cc..e940e37550ec 100755
--- a/drivers/spi/rk29_spim.c
+++ b/drivers/spi/rk29_spim.c
@@ -89,24 +89,24 @@ struct chip_data {
 #define TXBUSY    (1<<3)
 
 static void spi_dump_regs(struct rk29xx_spi *dws) {
-	printk("MRST SPI0 registers:\n");
-	printk("=================================\n");
-	printk("CTRL0: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_CTRLR0));
-	printk("CTRL1: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_CTRLR1));
-	printk("SSIENR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_ENR));
-	printk("SER: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_SER));
-	printk("BAUDR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_BAUDR));
-	printk("TXFTLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_TXFTLR));
-	printk("RXFTLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_RXFTLR));
-	printk("TXFLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_TXFLR));
-	printk("RXFLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_RXFLR));
-	printk("SR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_SR));
-	printk("IMR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_IMR));
-	printk("ISR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_ISR));
-	printk("DMACR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_DMACR));
-	printk("DMATDLR: \t0x%08x\n", rk29xx_readl(dws, SPIM_DMATDLR));
-	printk("DMARDLR: \t0x%08x\n", rk29xx_readl(dws, SPIM_DMARDLR));
-	printk("=================================\n");
+	DBG("MRST SPI0 registers:\n");
+	DBG("=================================\n");
+	DBG("CTRL0: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_CTRLR0));
+	DBG("CTRL1: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_CTRLR1));
+	DBG("SSIENR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_ENR));
+	DBG("SER: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_SER));
+	DBG("BAUDR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_BAUDR));
+	DBG("TXFTLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_TXFTLR));
+	DBG("RXFTLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_RXFTLR));
+	DBG("TXFLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_TXFLR));
+	DBG("RXFLR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_RXFLR));
+	DBG("SR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_SR));
+	DBG("IMR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_IMR));
+	DBG("ISR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_ISR));
+	DBG("DMACR: \t\t0x%08x\n", rk29xx_readl(dws, SPIM_DMACR));
+	DBG("DMATDLR: \t0x%08x\n", rk29xx_readl(dws, SPIM_DMATDLR));
+	DBG("DMARDLR: \t0x%08x\n", rk29xx_readl(dws, SPIM_DMARDLR));
+	DBG("=================================\n");
 
 }
 
@@ -245,15 +245,21 @@ static void flush(struct rk29xx_spi *dws)
 static void spi_cs_control(struct rk29xx_spi *dws, u32 cs, u8 flag)
 {
 	#if 1
-	    return;
+	if (flag)
+		rk29xx_writel(dws, SPIM_SER, 1 << cs);
+	else 		
+		rk29xx_writel(dws, SPIM_SER, 0);
+	return;
 	#else
 	struct rk29xx_spi_platform_data *pdata = dws->master->dev.platform_data;
 	struct spi_cs_gpio *cs_gpios = pdata->chipselect_gpios;
 
-	if (flag == 0)
+	if (flag == 0) {
 		gpio_direction_output(cs_gpios[cs].cs_gpio, GPIO_HIGH);
-	else
+	}
+	else {
 		gpio_direction_output(cs_gpios[cs].cs_gpio, GPIO_LOW);
+	}
 	#endif
 }
 
@@ -1007,17 +1013,20 @@ static void dma_transfer(struct rk29xx_spi *dws) //int cs_change)
 	DBG("dws->tx_dmach: %d, dws->rx_dmach: %d, transfer->tx_dma: 0x%x\n", dws->tx_dmach, dws->rx_dmach, (unsigned int)transfer->tx_dma);
 	if (transfer->tx_buf != NULL) {
 		dws->state |= TXBUSY;
-		if (transfer->len & 0x3) {
+		/*if (transfer->len & 0x3) {
 			burst = 1;
 		}
 		else {
 			burst = 4;
 		}
-		if (rk29_dma_config(dws->tx_dmach, burst)) {
+		if (rk29_dma_config(dws->tx_dmach, burst)) {*/
+		if (rk29_dma_config(dws->tx_dmach, 1)) {//there is not dma burst but bitwide, set it 1 alwayss
 			dev_err(&dws->master->dev, "function: %s, line: %d\n", __FUNCTION__, __LINE__);
 			goto err_out;
 		}
 		
+		rk29_dma_ctrl(dws->tx_dmach, RK29_DMAOP_FLUSH);	
+		
 		iRet = rk29_dma_enqueue(dws->tx_dmach, (void *)dws,
 					transfer->tx_dma, transfer->len);
 		if (iRet) {
@@ -1032,12 +1041,16 @@ static void dma_transfer(struct rk29xx_spi *dws) //int cs_change)
 		}
 	}
 
+	wait_till_not_busy(dws);
+
 	if (transfer->rx_buf != NULL) {
 		dws->state |= RXBUSY;
 		if (rk29_dma_config(dws->rx_dmach, 1)) {
 			dev_err(&dws->master->dev, "function: %s, line: %d\n", __FUNCTION__, __LINE__);
 			goto err_out;
 		}
+
+		rk29_dma_ctrl(dws->rx_dmach, RK29_DMAOP_FLUSH);	
 		
 		iRet = rk29_dma_enqueue(dws->rx_dmach, (void *)dws,
 					transfer->rx_dma, transfer->len);
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
old mode 100644
new mode 100755
index 1d3ba252453d..e029cb56f5be
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -834,6 +834,7 @@ int spi_write_then_read(struct spi_device *spi,
 	} else
 		local_buf = buf;
 
+	memset(local_buf, 0, SPI_BUFSIZ);
 	memcpy(local_buf, txbuf, n_tx);
 	x[0].tx_buf = local_buf;
 	x[1].rx_buf = local_buf + n_tx;
-- 
2.35.3

