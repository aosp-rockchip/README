From 07b7fc9e8598534d2a3e411b82679569c52300c2 Mon Sep 17 00:00:00 2001
From: Sugar Zhang <sugar.zhang@rock-chips.com>
Date: Thu, 12 Nov 2020 20:58:41 +0800
Subject: [PATCH] ASoC: rockchip: Add support for Voice Activity Detection

This patch replace codec to component.

Change-Id: I6ae63b4d36f2f9b24f0fdf352fdc385ec425b330
Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
---
 include/sound/pcm.h               |  46 ++++++++
 sound/soc/rockchip/Kconfig        |   7 ++
 sound/soc/rockchip/Makefile       |   8 ++
 sound/soc/rockchip/rockchip_vad.c | 177 +++++++++++++++++-------------
 sound/soc/rockchip/rockchip_vad.h |  13 ++-
 5 files changed, 175 insertions(+), 76 deletions(-)

diff --git a/include/sound/pcm.h b/include/sound/pcm.h
index a94e06281eaa..ec934db14b77 100644
--- a/include/sound/pcm.h
+++ b/include/sound/pcm.h
@@ -1508,6 +1508,52 @@ int snd_pcm_add_usr_ctls(struct snd_pcm *pcm, int stream,
 			 unsigned long private_value,
 			 struct snd_pcm_usr **info_ret);
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+/**
+ * snd_pcm_vad_read - Read raw pcm data from vad buffer
+ * @substream: PCM substream instance
+ * @buf: dst buf
+ * @frames: size in frame
+ *
+ * Result is read frames for success or errno for fail
+ */
+snd_pcm_sframes_t snd_pcm_vad_read(struct snd_pcm_substream *substream,
+				   void __user *buf, snd_pcm_uframes_t frames);
+/**
+ * snd_pcm_vad_avail - Get the available (readable) space for vad
+ * @substream: PCM substream instance
+ *
+ * Result is between 0 ... (boundary - 1)
+ */
+snd_pcm_uframes_t snd_pcm_vad_avail(struct snd_pcm_substream *substream);
+/**
+ * snd_pcm_vad_attached - Check whether vad is attached to substream or not
+ * @substream: PCM substream instance
+ *
+ * Result is true for attached or false for detached
+ */
+bool snd_pcm_vad_attached(struct snd_pcm_substream *substream);
+/**
+ * snd_pcm_vad_preprocess - Pre process vad data
+ * @substream: PCM substream instance
+ * @size: size in frame
+ *
+ * Result is zero for success or errno for fail
+ */
+int snd_pcm_vad_preprocess(struct snd_pcm_substream *substream,
+			   void *buf, snd_pcm_uframes_t size);
+/**
+ * snd_pcm_vad_memcpy - Copy vad data to dst
+ * @substream: PCM substream instance
+ * @buf: dst buf
+ * @frames:  size in frame
+ *
+ * Result is copied frames for success or errno for fail
+ */
+snd_pcm_sframes_t snd_pcm_vad_memcpy(struct snd_pcm_substream *substream,
+				     void *buf, snd_pcm_uframes_t frames);
+#endif
+
 /* printk helpers */
 #define pcm_err(pcm, fmt, args...) \
 	dev_err((pcm)->card->dev, fmt, ##args)
diff --git a/sound/soc/rockchip/Kconfig b/sound/soc/rockchip/Kconfig
index 572f2f5d181b..7176a50b4928 100644
--- a/sound/soc/rockchip/Kconfig
+++ b/sound/soc/rockchip/Kconfig
@@ -57,6 +57,13 @@ config SND_SOC_ROCKCHIP_SPDIF
 	  Say Y or M if you want to add support for SPDIF driver for
 	  Rockchip SPDIF transceiver device.
 
+config SND_SOC_ROCKCHIP_VAD
+	tristate "Rockchip Voice Activity Detection Driver"
+	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
+	help
+	  Say Y or M if you want to add support for VAD driver for
+	  Rockchip VAD device.
+
 config SND_SOC_ROCKCHIP_MAX98090
 	tristate "ASoC support for Rockchip boards using a MAX98090 codec"
 	depends on SND_SOC_ROCKCHIP && I2C && GPIOLIB && CLKDEV_LOOKUP
diff --git a/sound/soc/rockchip/Makefile b/sound/soc/rockchip/Makefile
index c761947d5df6..816994d35697 100644
--- a/sound/soc/rockchip/Makefile
+++ b/sound/soc/rockchip/Makefile
@@ -6,12 +6,20 @@ snd-soc-rockchip-i2s-tdm-objs := rockchip_i2s_tdm.o
 snd-soc-rockchip-pcm-objs := rockchip_pcm.o
 snd-soc-rockchip-pdm-objs := rockchip_pdm.o
 snd-soc-rockchip-spdif-objs := rockchip_spdif.o
+snd-soc-rockchip-vad-objs := rockchip_vad.o
+ifdef CONFIG_THUMB2_KERNEL
+snd-soc-rockchip-vad-$(CONFIG_THUMB2_KERNEL) += vad_preprocess_thumb.o
+else
+snd-soc-rockchip-vad-$(CONFIG_ARM64) += vad_preprocess_arm64.o
+snd-soc-rockchip-vad-$(CONFIG_ARM) += vad_preprocess_arm.o
+endif
 
 obj-$(CONFIG_SND_SOC_ROCKCHIP_AUDIO_PWM) += snd-soc-rockchip-audio-pwm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S) += snd-soc-rockchip-i2s.o snd-soc-rockchip-pcm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S_TDM) += snd-soc-rockchip-i2s-tdm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_PDM) += snd-soc-rockchip-pdm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_SPDIF) += snd-soc-rockchip-spdif.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_VAD) += snd-soc-rockchip-vad.o
 
 snd-soc-rockchip-max98090-objs := rockchip_max98090.o
 snd-soc-rockchip-multicodecs-objs := rockchip_multicodecs.o
diff --git a/sound/soc/rockchip/rockchip_vad.c b/sound/soc/rockchip/rockchip_vad.c
index 0c6e15f3840e..813fcc7fa655 100644
--- a/sound/soc/rockchip/rockchip_vad.c
+++ b/sound/soc/rockchip/rockchip_vad.c
@@ -55,6 +55,16 @@ struct vad_buf {
 	bool sorted;
 };
 
+struct audio_src_addr_map {
+	u32 id;
+	u32 addr;
+};
+
+struct vad_soc_data {
+	enum rk_vad_version version;
+	const struct audio_src_addr_map *map;
+};
+
 struct rockchip_vad {
 	struct device *dev;
 	struct device_node *audio_node;
@@ -68,6 +78,7 @@ struct rockchip_vad {
 	struct vad_uparams uparams;
 	struct snd_soc_dai *cpu_dai;
 	struct snd_pcm_substream *substream;
+	struct vad_soc_data *soc_data;
 	int mode;
 	u32 audio_src;
 	u32 audio_src_addr;
@@ -83,11 +94,6 @@ struct rockchip_vad {
 	enum rk_vad_version version;
 };
 
-struct audio_src_addr_map {
-	u32 id;
-	u32 addr;
-};
-
 static inline int vframe_size(struct rockchip_vad *vad, int bytes)
 {
 	return bytes / vad->channels / vad->sample_bytes;
@@ -255,12 +261,45 @@ static struct rockchip_vad *substream_get_drvdata(struct snd_pcm_substream *subs
 		struct snd_soc_dai *codec_dai = rtd->codec_dais[i];
 
 		if (strstr(codec_dai->name, "vad"))
-			vad = snd_soc_codec_get_drvdata(codec_dai->codec);
+			vad = snd_soc_component_get_drvdata(codec_dai->component);
 	}
 
 	return vad;
 }
 
+/**
+ * snd_pcm_vad_avail - Get the available (readable) space for vad
+ * @runtime: PCM substream instance
+ *
+ * Result is between 0 ... (boundary - 1)
+ */
+snd_pcm_uframes_t snd_pcm_vad_avail(struct snd_pcm_substream *substream)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct rockchip_vad *vad = NULL;
+	struct vad_buf *vbuf;
+	snd_pcm_uframes_t vframes;
+
+	vad = substream_get_drvdata(substream);
+
+	if (!vad)
+		return 0;
+
+	vbuf = &vad->vbuf;
+
+	if (vbuf->size <= 0)
+		return 0;
+
+	vframes = samples_to_bytes(runtime, vad->channels);
+	if (vframes)
+		vframes = vbuf->size / vframes;
+	if (!vframes)
+		dev_err(vad->dev, "residue bytes: %d\n", vbuf->size);
+
+	return vframes;
+}
+EXPORT_SYMBOL(snd_pcm_vad_avail);
+
 snd_pcm_sframes_t snd_pcm_vad_read(struct snd_pcm_substream *substream,
 				   void __user *buf, snd_pcm_uframes_t frames)
 {
@@ -342,39 +381,6 @@ snd_pcm_sframes_t snd_pcm_vad_read(struct snd_pcm_substream *substream,
 }
 EXPORT_SYMBOL(snd_pcm_vad_read);
 
-/**
- * snd_pcm_vad_avail - Get the available (readable) space for vad
- * @runtime: PCM substream instance
- *
- * Result is between 0 ... (boundary - 1)
- */
-snd_pcm_uframes_t snd_pcm_vad_avail(struct snd_pcm_substream *substream)
-{
-	struct snd_pcm_runtime *runtime = substream->runtime;
-	struct rockchip_vad *vad = NULL;
-	struct vad_buf *vbuf;
-	snd_pcm_uframes_t vframes;
-
-	vad = substream_get_drvdata(substream);
-
-	if (!vad)
-		return 0;
-
-	vbuf = &vad->vbuf;
-
-	if (vbuf->size <= 0)
-		return 0;
-
-	vframes = samples_to_bytes(runtime, vad->channels);
-	if (vframes)
-		vframes = vbuf->size / vframes;
-	if (!vframes)
-		dev_err(vad->dev, "residue bytes: %d\n", vbuf->size);
-
-	return vframes;
-}
-EXPORT_SYMBOL(snd_pcm_vad_avail);
-
 int snd_pcm_vad_preprocess(struct snd_pcm_substream *substream,
 			   void *buf, snd_pcm_uframes_t size)
 {
@@ -594,26 +600,46 @@ static const struct regmap_config rk3308_vad_regmap_config = {
 	.cache_type = REGCACHE_FLAT,
 };
 
-static const struct audio_src_addr_map addr_maps[] = {
-	{0, 0xff300800},
-	{1, 0xff310800},
-	{2, 0xff320800},
-	{3, 0xff330800},
-	{4, 0xff380400},
-	{1, 0xff7e0800},
-	{3, 0xff7f0800},
-	{4, 0xff800400},
+static const struct audio_src_addr_map rk1808_addr_map[] = {
+	{ 1, RK1808_I2S0 },
+	{ 3, RK1808_I2S1 },
+	{ 4, RK1808_PDM },
+	{ /* sentinel */ },
+};
+
+static const struct audio_src_addr_map rk3308_addr_map[] = {
+	{ 0, RK3308_I2S_8CH_0 },
+	{ 1, RK3308_I2S_8CH_1 },
+	{ 2, RK3308_I2S_8CH_2 },
+	{ 3, RK3308_I2S_8CH_3 },
+	{ 4, RK3308_PDM_8CH },
+	{ /* sentinel */ },
+};
+
+static const struct vad_soc_data rk1808es_soc_data = {
+	.version = VAD_RK1808ES,
+	.map = rk1808_addr_map,
+};
+
+static const struct vad_soc_data rk1808_soc_data = {
+	.version = VAD_RK1808,
+	.map = rk1808_addr_map,
+};
+
+static const struct vad_soc_data rk3308_soc_data = {
+	.version = VAD_RK3308,
+	.map = rk3308_addr_map,
 };
 
 static int rockchip_vad_get_audio_src_address(struct rockchip_vad *vad,
 					      u32 addr)
 {
-	unsigned int i;
+	const struct audio_src_addr_map *map = vad->soc_data->map;
 
-	for (i = 0; i < ARRAY_SIZE(addr_maps); i++) {
-		if ((addr & addr_maps[i].addr) == addr) {
-			vad->audio_src = addr_maps[i].id;
-			vad->audio_src_addr = addr_maps[i].addr;
+	for (; map->addr; map++) {
+		if ((addr & map->addr) == addr) {
+			vad->audio_src = map->id;
+			vad->audio_src_addr = map->addr;
 			return 0;
 		}
 	}
@@ -654,8 +680,8 @@ static const struct reg_sequence rockchip_vad_acodec_adc_enable[] = {
 static int rockchip_vad_config_acodec(struct snd_pcm_hw_params *params,
 				      struct snd_soc_dai *dai)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	struct snd_soc_component *component = dai->component;
+	struct rockchip_vad *vad = snd_soc_component_get_drvdata(component);
 	unsigned int val = 0;
 
 	if (!vad->acodec_cfg)
@@ -698,7 +724,7 @@ static void rockchip_vad_params_fixup(struct snd_pcm_substream *substream,
 				      struct snd_pcm_hw_params *params,
 				      struct snd_soc_dai *dai)
 {
-	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(dai->codec);
+	struct rockchip_vad *vad = snd_soc_component_get_drvdata(dai->component);
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_dai *cpu_dai, *audio_src_dai;
 	struct device_node *np;
@@ -726,8 +752,8 @@ static int rockchip_vad_hw_params(struct snd_pcm_substream *substream,
 				  struct snd_pcm_hw_params *params,
 				  struct snd_soc_dai *dai)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	struct snd_soc_component *component = dai->component;
+	struct rockchip_vad *vad = snd_soc_component_get_drvdata(component);
 	unsigned int val = 0, mask = 0, frame_bytes, buf_time;
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
@@ -870,8 +896,8 @@ static int rockchip_vad_pcm_startup(struct snd_pcm_substream *substream,
 static void rockchip_vad_pcm_shutdown(struct snd_pcm_substream *substream,
 				      struct snd_soc_dai *dai)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	struct snd_soc_component *component = dai->component;
+	struct rockchip_vad *vad = snd_soc_component_get_drvdata(component);
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 		return;
@@ -887,8 +913,8 @@ static void rockchip_vad_pcm_shutdown(struct snd_pcm_substream *substream,
 static int rockchip_vad_trigger(struct snd_pcm_substream *substream, int cmd,
 				struct snd_soc_dai *dai)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	struct snd_soc_component *component = dai->component;
+	struct rockchip_vad *vad = snd_soc_component_get_drvdata(component);
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
@@ -991,11 +1017,9 @@ static const struct snd_kcontrol_new rockchip_vad_dapm_controls[] = {
 	SOC_ROCKCHIP_VAD_SWITCH_DECL("vad switch"),
 };
 
-static struct snd_soc_codec_driver soc_vad_codec = {
-	.component_driver = {
-		.controls = rockchip_vad_dapm_controls,
-		.num_controls = ARRAY_SIZE(rockchip_vad_dapm_controls),
-	},
+static const struct snd_soc_component_driver soc_vad_codec = {
+	.controls = rockchip_vad_dapm_controls,
+	.num_controls = ARRAY_SIZE(rockchip_vad_dapm_controls),
 };
 
 #if defined(CONFIG_DEBUG_FS)
@@ -1089,9 +1113,9 @@ static void rockchip_vad_init(struct rockchip_vad *vad)
 }
 
 static const struct of_device_id rockchip_vad_match[] = {
-	{ .compatible = "rockchip,rk1808es-vad", .data = (void *)VAD_RK1808ES },
-	{ .compatible = "rockchip,rk1808-vad", .data = (void *)VAD_RK1808 },
-	{ .compatible = "rockchip,rk3308-vad", .data = (void *)VAD_RK3308 },
+	{ .compatible = "rockchip,rk1808es-vad", .data = &rk1808es_soc_data },
+	{ .compatible = "rockchip,rk1808-vad", .data = &rk1808_soc_data },
+	{ .compatible = "rockchip,rk3308-vad", .data = &rk3308_soc_data },
 	{},
 };
 
@@ -1117,8 +1141,11 @@ static int rockchip_vad_probe(struct platform_device *pdev)
 	vad->dev = &pdev->dev;
 
 	match = of_match_device(rockchip_vad_match, &pdev->dev);
-	if (match)
-		vad->version = (enum rk_vad_version)match->data;
+	if (!match || !match->data)
+		return -EINVAL;
+
+	vad->soc_data = (struct vad_soc_data *)match->data;
+	vad->version = vad->soc_data->version;
 
 	switch (vad->version) {
 	case VAD_RK1808:
@@ -1220,8 +1247,8 @@ static int rockchip_vad_probe(struct platform_device *pdev)
 #endif
 
 	platform_set_drvdata(pdev, vad);
-	ret = snd_soc_register_codec(&pdev->dev, &soc_vad_codec,
-				     &vad_dai, 1);
+	ret = snd_soc_register_component(&pdev->dev, &soc_vad_codec,
+					 &vad_dai, 1);
 	if (ret)
 		goto err;
 
@@ -1243,7 +1270,7 @@ static int rockchip_vad_remove(struct platform_device *pdev)
 	if (!IS_ERR(vad->hclk))
 		clk_disable_unprepare(vad->hclk);
 	of_node_put(vad->audio_node);
-	snd_soc_unregister_codec(&pdev->dev);
+	snd_soc_unregister_component(&pdev->dev);
 	return 0;
 }
 
diff --git a/sound/soc/rockchip/rockchip_vad.h b/sound/soc/rockchip/rockchip_vad.h
index 35ed967a686c..ab7841c17397 100644
--- a/sound/soc/rockchip/rockchip_vad.h
+++ b/sound/soc/rockchip/rockchip_vad.h
@@ -203,8 +203,19 @@
 #define VAD_SAMPLE_CNT			0x7c
 #define VAD_NOISE_DATA			0x100
 
-/* acodec */
+/* RK1808 SOC */
+#define RK1808_I2S0			0xff7e0800
+#define RK1808_I2S1			0xff7f0800
+#define RK1808_PDM			0xff800400
+
+/* RK3308 SOC */
 #define ACODEC_BASE			0xff560000
 #define ACODEC_ADC_ANA_CON0		0X340
 
+#define RK3308_I2S_8CH_0		0xff300800
+#define RK3308_I2S_8CH_1		0xff310800
+#define RK3308_I2S_8CH_2		0xff320800
+#define RK3308_I2S_8CH_3		0xff330800
+#define RK3308_PDM_8CH			0xff380400
+
 #endif
-- 
2.35.3

