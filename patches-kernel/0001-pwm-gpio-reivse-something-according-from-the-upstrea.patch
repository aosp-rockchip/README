From ee9369d2350c91ed77c54248cf454df38fb1f8b0 Mon Sep 17 00:00:00 2001
From: Ziyuan Xu <xzy.xu@rock-chips.com>
Date: Thu, 17 May 2018 16:51:12 +0800
Subject: [PATCH] pwm: gpio: reivse something according from the upstream

-sort include files alphabetically
-drop DRV_NAME
-fix type definition of some variables
-only support one gpio per node
-fixup gpio output value polarity

The PWM_POLARITY_NORMAL(=0) means a high signal for the duration of the
duty-cycle, thus rectify the output value in pwm_on&off.

Usually, the pwm output should be a low signal before the first-timeuse.
Because of the probe function set the gpio output value to GPIOD_OUT_LOW
within devm_gpiod_get_index, we have been forced to set the flag of
gpios with ACTIVE_HIGH.

-fixup reverse the output signal at an inappropriate moment

In one case, someone set the value of duty_cycle as the same as the
period while the pwm output is enable, the off_time will be set to zero.
However the original implementation still to set the pwm output to a low
signal, it causes the output is not a **real** high signal. As the
result,
the output duty cycle is almost 97 percent.

Change-Id: I449fc96938ccaeb7bdfaf90e237eeb9f5c4e6de6
Signed-off-by: Ziyuan Xu <xzy.xu@rock-chips.com>
---
 drivers/pwm/pwm-gpio.c | 221 +++++++++++++++++------------------------
 1 file changed, 90 insertions(+), 131 deletions(-)

diff --git a/drivers/pwm/pwm-gpio.c b/drivers/pwm/pwm-gpio.c
index 554a46b4b27f..92963771d080 100644
--- a/drivers/pwm/pwm-gpio.c
+++ b/drivers/pwm/pwm-gpio.c
@@ -16,68 +16,75 @@
  * GPIO toggle speed and system load.
  */
 
-#include <linux/mod_devicetable.h>
-#include <linux/module.h>
-#include <linux/gpio/consumer.h>
-#include <linux/of.h>
-#include <linux/of_gpio.h>
-#include <linux/property.h>
-#include <linux/pwm.h>
+#include <linux/device.h>
 #include <linux/errno.h>
 #include <linux/err.h>
-#include <linux/device.h>
+#include <linux/gpio/consumer.h>
 #include <linux/hrtimer.h>
 #include <linux/ktime.h>
 #include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mod_devicetable.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <linux/platform_device.h>
+#include <linux/property.h>
+#include <linux/pwm.h>
 
-#define DRV_NAME "pwm-gpio"
-
-struct gpio_pwm_data {
+struct gpio_pwm_chip {
+	struct pwm_chip chip;
 	struct hrtimer timer;
 	struct gpio_desc *gpiod;
-	bool polarity;
+	unsigned int on_time;
+	unsigned int off_time;
 	bool pin_on;
-	int on_time;
-	int off_time;
-	bool run;
 };
 
-struct gpio_pwm_chip {
-	struct pwm_chip chip;
-};
+static inline struct gpio_pwm_chip *to_gpio_pwm_chip(struct pwm_chip *c)
+{
+	return container_of(c, struct gpio_pwm_chip, chip);
+}
 
-static void gpio_pwm_off(struct gpio_pwm_data *gpio_data)
+static void gpio_pwm_off(struct gpio_pwm_chip *pc)
 {
-	gpiod_set_value_cansleep(gpio_data->gpiod, gpio_data->polarity ? 0 : 1);
+	enum pwm_polarity polarity = pwm_get_polarity(pc->chip.pwms);
+
+	gpiod_set_value(pc->gpiod, polarity ? 1 : 0);
 }
 
-static void gpio_pwm_on(struct gpio_pwm_data *gpio_data)
+static void gpio_pwm_on(struct gpio_pwm_chip *pc)
 {
-	gpiod_set_value_cansleep(gpio_data->gpiod, gpio_data->polarity ? 1 : 0);
+	enum pwm_polarity polarity = pwm_get_polarity(pc->chip.pwms);
+
+	gpiod_set_value(pc->gpiod, polarity ? 0 : 1);
 }
 
-enum hrtimer_restart gpio_pwm_timer(struct hrtimer *timer)
+static enum hrtimer_restart gpio_pwm_timer(struct hrtimer *timer)
 {
-	struct gpio_pwm_data *gpio_data = container_of(timer,
-						      struct gpio_pwm_data,
-						      timer);
-	if (!gpio_data->run) {
-		gpio_pwm_off(gpio_data);
-		gpio_data->pin_on = false;
+	struct gpio_pwm_chip *pc = container_of(timer,
+						struct gpio_pwm_chip,
+						timer);
+	if (!pwm_is_enabled(pc->chip.pwms)) {
+		gpio_pwm_off(pc);
+		pc->pin_on = false;
 		return HRTIMER_NORESTART;
 	}
 
-	if (!gpio_data->pin_on) {
-		hrtimer_forward_now(&gpio_data->timer,
-				    ns_to_ktime(gpio_data->on_time));
-		gpio_pwm_on(gpio_data);
-		gpio_data->pin_on = true;
+	if (!pc->pin_on) {
+		hrtimer_forward_now(&pc->timer, ns_to_ktime(pc->on_time));
+
+		if (pc->on_time) {
+			gpio_pwm_on(pc);
+			pc->pin_on = true;
+		}
+
 	} else {
-		hrtimer_forward_now(&gpio_data->timer,
-				    ns_to_ktime(gpio_data->off_time));
-		gpio_pwm_off(gpio_data);
-		gpio_data->pin_on = false;
+		hrtimer_forward_now(&pc->timer, ns_to_ktime(pc->off_time));
+
+		if (pc->off_time) {
+			gpio_pwm_off(pc);
+			pc->pin_on = false;
+		}
 	}
 
 	return HRTIMER_RESTART;
@@ -86,10 +93,10 @@ enum hrtimer_restart gpio_pwm_timer(struct hrtimer *timer)
 static int gpio_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 			    int duty_ns, int period_ns)
 {
-	struct gpio_pwm_data *gpio_data = pwm_get_chip_data(pwm);
+	struct gpio_pwm_chip *pc = to_gpio_pwm_chip(chip);
 
-	gpio_data->on_time = duty_ns;
-	gpio_data->off_time = period_ns - duty_ns;
+	pc->on_time = duty_ns;
+	pc->off_time = period_ns - duty_ns;
 
 	return 0;
 }
@@ -97,29 +104,23 @@ static int gpio_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 static int gpio_pwm_set_polarity(struct pwm_chip *chip, struct pwm_device *pwm,
 				 enum pwm_polarity polarity)
 {
-	struct gpio_pwm_data *gpio_data = pwm_get_chip_data(pwm);
-
-	gpio_data->polarity = (polarity != PWM_POLARITY_NORMAL) ? true : false;
-
 	return 0;
 }
 
 static int gpio_pwm_enable(struct pwm_chip *chip, struct pwm_device *pwm)
 {
-	struct gpio_pwm_data *gpio_data = pwm_get_chip_data(pwm);
+	struct gpio_pwm_chip *pc = to_gpio_pwm_chip(chip);
 
-	if (gpio_data->run)
+	if (pwm_is_enabled(pc->chip.pwms))
 		return -EBUSY;
 
-	gpio_data->run = true;
-	if (gpio_data->off_time) {
-		hrtimer_start(&gpio_data->timer, ktime_set(0, 0),
-			      HRTIMER_MODE_REL);
+	if (pc->off_time) {
+		hrtimer_start(&pc->timer, ktime_set(0, 0), HRTIMER_MODE_REL);
 	} else {
-		if (gpio_data->on_time)
-			gpio_pwm_on(gpio_data);
+		if (pc->on_time)
+			gpio_pwm_on(pc);
 		else
-			gpio_pwm_off(gpio_data);
+			gpio_pwm_off(pc);
 	}
 
 	return 0;
@@ -127,11 +128,10 @@ static int gpio_pwm_enable(struct pwm_chip *chip, struct pwm_device *pwm)
 
 static void gpio_pwm_disable(struct pwm_chip *chip, struct pwm_device *pwm)
 {
-	struct gpio_pwm_data *gpio_data = pwm_get_chip_data(pwm);
+	struct gpio_pwm_chip *pc = to_gpio_pwm_chip(chip);
 
-	gpio_data->run = false;
-	if (!gpio_data->off_time)
-		gpio_pwm_off(gpio_data);
+	if (!pc->off_time)
+		gpio_pwm_off(pc);
 }
 
 static const struct pwm_ops gpio_pwm_ops = {
@@ -145,105 +145,64 @@ static const struct pwm_ops gpio_pwm_ops = {
 static int gpio_pwm_probe(struct platform_device *pdev)
 {
 	int ret;
-	struct gpio_pwm_chip *gpio_chip;
-	int npwm, i;
-	int hrtimer = 0;
-
-	npwm = of_gpio_named_count(pdev->dev.of_node, "pwm-gpios");
-	if (npwm < 1)
-		return -ENODEV;
+	struct gpio_pwm_chip *pc;
 
-	gpio_chip = devm_kzalloc(&pdev->dev, sizeof(*gpio_chip), GFP_KERNEL);
-	if (!gpio_chip)
+	pc = devm_kzalloc(&pdev->dev, sizeof(*pc), GFP_KERNEL);
+	if (!pc)
 		return -ENOMEM;
 
-	gpio_chip->chip.dev = &pdev->dev;
-	gpio_chip->chip.ops = &gpio_pwm_ops;
-	gpio_chip->chip.base = -1;
-	gpio_chip->chip.npwm = npwm;
-	gpio_chip->chip.of_xlate = of_pwm_xlate_with_flags;
-	gpio_chip->chip.of_pwm_n_cells = 3;
-	gpio_chip->chip.can_sleep = true;
+	pc->chip.dev = &pdev->dev;
+	pc->chip.ops = &gpio_pwm_ops;
+	pc->chip.base = -1;
+	pc->chip.npwm = 1;
+	pc->chip.of_xlate = of_pwm_xlate_with_flags;
+	pc->chip.of_pwm_n_cells = 3;
+	pc->chip.can_sleep = true;
 
-	ret = pwmchip_add(&gpio_chip->chip);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "failed to add PWM chip: %d\n", ret);
-		return ret;
-	}
+	pc->gpiod = devm_gpiod_get(&pdev->dev, "pwm", GPIOD_OUT_LOW);
 
-	for (i = 0; i < npwm; i++) {
-		struct gpio_desc *gpiod;
-		struct gpio_pwm_data *gpio_data;
-
-		gpiod = devm_gpiod_get_index(&pdev->dev, "pwm", i,
-					     GPIOD_OUT_LOW);
-		if (IS_ERR(gpiod)) {
-			int error;
-
-			error = PTR_ERR(gpiod);
-			if (error != -EPROBE_DEFER)
-				dev_err(&pdev->dev,
-					"failed to get gpio flags, error: %d\n",
-					error);
-			return error;
-		}
-
-		gpio_data = devm_kzalloc(&pdev->dev, sizeof(*gpio_data),
-					 GFP_KERNEL);
+	if (IS_ERR(pc->gpiod))
+		return PTR_ERR(pc->gpiod);
 
-		hrtimer_init(&gpio_data->timer,
-			     CLOCK_MONOTONIC, HRTIMER_MODE_REL);
-		gpio_data->timer.function = &gpio_pwm_timer;
-		gpio_data->gpiod = gpiod;
-		gpio_data->pin_on = false;
-		gpio_data->run = false;
+	hrtimer_init(&pc->timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	pc->timer.function = &gpio_pwm_timer;
+	pc->pin_on = false;
 
-		if (hrtimer_is_hres_active(&gpio_data->timer))
-			hrtimer++;
+	if (!hrtimer_is_hres_active(&pc->timer))
+		dev_warn(&pdev->dev, "HR timer unavailable, restricting to "
+				     "low resolution\n");
 
-		pwm_set_chip_data(&gpio_chip->chip.pwms[i], gpio_data);
-	}
-	if (!hrtimer) {
-		dev_warn(&pdev->dev, "unable to use High-Resolution timer,");
-		dev_warn(&pdev->dev, "%s is restricted to low resolution.",
-			 DRV_NAME);
+	ret = pwmchip_add(&pc->chip);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "failed to add PWM chip: %d\n", ret);
+		return ret;
 	}
 
-	platform_set_drvdata(pdev, gpio_chip);
-
-	dev_info(&pdev->dev, "%d gpio pwms loaded\n", npwm);
-
+	platform_set_drvdata(pdev, pc);
 	return 0;
 }
 
 static int gpio_pwm_remove(struct platform_device *pdev)
 {
-	struct gpio_pwm_chip *gpio_chip;
-	int i;
-
-	gpio_chip = platform_get_drvdata(pdev);
-	for (i = 0; i < gpio_chip->chip.npwm; i++) {
-		struct gpio_pwm_data *gpio_data;
-
-		gpio_data = pwm_get_chip_data(&gpio_chip->chip.pwms[i]);
-
-		hrtimer_cancel(&gpio_data->timer);
-	}
+	struct gpio_pwm_chip *pc = platform_get_drvdata(pdev);
 
-	return pwmchip_remove(&gpio_chip->chip);
+	hrtimer_cancel(&pc->timer);
+	return pwmchip_remove(&pc->chip);
 }
 
+#ifdef CONFIG_OF
 static const struct of_device_id gpio_pwm_of_match[] = {
-	{ .compatible = DRV_NAME, },
-	{/* sentinel */},
+	{ .compatible = "pwm-gpio", },
+	{ }
 };
 MODULE_DEVICE_TABLE(of, gpio_pwm_of_match);
+#endif
 
 static struct platform_driver gpio_pwm_driver = {
 	.probe = gpio_pwm_probe,
 	.remove = gpio_pwm_remove,
 	.driver = {
-		.name = DRV_NAME,
+		.name = "pwm-gpio",
 		.of_match_table = of_match_ptr(gpio_pwm_of_match),
 	},
 };
-- 
2.35.3

