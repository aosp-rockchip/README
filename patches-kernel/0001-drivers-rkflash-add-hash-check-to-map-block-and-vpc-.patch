From 8f8c737d6537a86ab5a8cab21feba7e80ddb20d0 Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Sun, 23 Dec 2018 22:25:33 -0800
Subject: [PATCH] drivers: rkflash: add hash check to map block and vpc block

1.If the validation fails, the data is discarded and the data is
restored to avoid the abnormal data written when the power lost
leading to system crash.

Change-Id: I83590ed44d98b02c3fc2eee108a38b46275613c0
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl_arm_v7.S       | 11905 ++++++++++++-----------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S | 10171 +++++++++----------
 drivers/rkflash/rk_sftl_arm_v8.S       |  9298 +++++++++---------
 3 files changed, 15916 insertions(+), 15458 deletions(-)

diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index 468977512f80..170f03e7d607 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-11-29
+ * date: 2018-12-27
  */
 	.file	"rk_sftl.c"
 	.global	__udivsi3
@@ -1364,7 +1364,7 @@ select_l2p_ram_region:
 	bcc	.L184
 	cmp	r4, r2
 	bcc	.L177
-	movw	r2, #787
+	movw	r2, #789
 	ldr	r1, .L185+8
 	ldr	r0, .L185+12
 	bl	sftl_printk
@@ -1641,7 +1641,7 @@ make_superblock:
 	ldrh	r3, [r6, #40]
 	cmp	r2, r3
 	bcc	.L221
-	movw	r2, #2110
+	movw	r2, #2156
 	ldr	r1, .L225+4
 	ldr	r0, .L225+8
 	bl	sftl_printk
@@ -1829,9 +1829,9 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #16
-	mov	r6, r0
+	mov	r7, r0
 	ldr	r5, .L262
-	add	r4, r6, #12
+	add	r4, r7, #12
 	ldr	r1, .L262+4
 	movw	r8, #2344
 	bl	strcpy
@@ -1855,7 +1855,7 @@ FtlPrintInfo2buf:
 	ldr	r2, .L262+20
 	mov	r1, #64
 	mov	r0, r4
-	ldr	r7, .L262+24
+	ldr	r6, .L262+24
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2508]
@@ -1969,17 +1969,17 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r7, #30]
+	ldrh	r3, [r6, #30]
 	ldr	r2, .L262+104
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r7, #28]
+	ldrh	r3, [r6, #28]
 	ldr	r2, .L262+108
 	mov	r1, #64
 	mov	r0, r4
-	movw	r7, #2348
+	movw	r6, #2348
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #140]
@@ -2050,7 +2050,7 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r5, r6]
 	ldr	r2, .L262+156
 	mov	r1, #64
 	mov	r0, r4
@@ -2067,12 +2067,12 @@ FtlPrintInfo2buf:
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r5, r6]
 	add	r4, r4, r0
 	ldr	r2, [r5, #2324]
 	mov	r1, #64
 	mov	r0, r4
-	movw	r7, #2396
+	movw	r6, #2396
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	ldr	r2, .L262+168
@@ -2090,7 +2090,7 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r5, r6]
 	ldr	r2, .L262+180
 	mov	r1, #64
 	mov	r0, r4
@@ -2107,12 +2107,12 @@ FtlPrintInfo2buf:
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r5, r6]
 	add	r4, r4, r0
 	ldr	r2, [r5, #2324]
 	mov	r1, #64
 	mov	r0, r4
-	movw	r7, #2588
+	add	r6, r5, #2592
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	ldr	r2, .L262+192
@@ -2149,65 +2149,65 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r9, #242]
+	ldrh	r3, [r6, #2]
 	ldr	r2, .L262+216
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #2594]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2598]	@ zero_extendqisi2
 	ldr	r2, .L262+220
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r6]
 	ldr	r2, .L262+224
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #2596]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2600]	@ zero_extendqisi2
 	ldr	r2, .L262+228
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r9, #244]
+	ldrh	r3, [r6, #4]
 	ldr	r2, .L262+232
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, [r5, #2712]
+	ldr	r3, [r5, #2716]
 	add	r4, r4, r0
 	ldr	r2, .L262+236
 	mov	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
-	ldr	r3, [r5, #2720]
+	ldr	r3, [r5, #2724]
 	str	r3, [sp]
-	ldr	r3, [r5, #2716]
+	ldr	r3, [r5, #2720]
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2708]
+	ldr	r3, [r5, #2712]
 	ldr	r2, .L262+240
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2732]
+	ldr	r3, [r5, #2736]
 	ldr	r2, .L262+244
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	movw	r3, #3148
+	add	r3, r5, #3152
 	add	r4, r4, r0
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r3]
 	mov	r1, #64
 	ldr	r2, .L262+248
 	mov	r0, r4
 	bl	snprintf
-	movw	r3, #3150
+	movw	r3, #3154
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
@@ -2215,12 +2215,12 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #3152]
+	ldr	r3, [r5, #3156]
 	ldr	r2, .L262+256
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	movw	r3, #3156
+	movw	r3, #3160
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
@@ -2248,11 +2248,11 @@ FtlPrintInfo2buf:
 	cmp	r3, #1
 	beq	.L251
 .L256:
-	sub	r0, r4, r6
+	sub	r0, r4, r7
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 .L251:
-	ldrh	r3, [r5, r7]
+	ldrh	r3, [r6]
 	movw	r2, #65535
 	cmp	r3, r2
 	beq	.L253
@@ -2269,7 +2269,7 @@ FtlPrintInfo2buf:
 	ldr	r9, .L262+280
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	mov	r7, #0
+	mov	r6, #0
 	movw	r10, #65535
 .L255:
 	cmp	r0, r10
@@ -2288,18 +2288,18 @@ FtlPrintInfo2buf:
 	ldrh	r3, [r3, r2]
 	mov	r2, r9
 	stm	sp, {r0, r3}
-	mov	r3, r7
+	mov	r3, r6
 	mov	r0, r4
-	add	r7, r7, #1
+	add	r6, r6, #1
 	bl	snprintf
 	ldr	r3, [r5, #2316]
-	cmp	r7, #16
+	cmp	r6, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
 	bne	.L255
 .L254:
 	ldr	r3, [r5, #2340]
-	mov	r7, #0
+	mov	r6, #0
 	ldr	r2, [r5, #2316]
 	movw	r9, #65535
 	ldr	r10, .L262+284
@@ -2319,12 +2319,12 @@ FtlPrintInfo2buf:
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
 	str	r3, [sp]
-	mov	r3, r7
-	add	r7, r7, #1
+	mov	r3, r6
+	add	r6, r6, #1
 	str	r2, [sp, #4]
 	mov	r2, r10
 	bl	snprintf
-	cmp	r7, #4
+	cmp	r6, #4
 	add	r4, r4, r0
 	beq	.L256
 	ldr	r3, [r5, #2316]
@@ -2581,7 +2581,7 @@ GetSwlReplaceBlock:
 	ldr	r3, [r4, #2564]
 	bl	sftl_printk
 	mov	r3, #1
-	str	r3, [r4, #3160]
+	str	r3, [r4, #3164]
 	b	.L279
 .L284:
 	add	r0, r0, #1
@@ -2657,7 +2657,7 @@ get_new_active_ppa:
 	mov	r4, r0
 	cmp	r2, r3
 	bne	.L300
-	movw	r2, #2740
+	movw	r2, #2786
 	ldr	r1, .L313
 	ldr	r0, .L313+4
 	bl	sftl_printk
@@ -2667,7 +2667,7 @@ get_new_active_ppa:
 	ldrh	r3, [r5, #102]
 	cmp	r2, r3
 	bne	.L301
-	movw	r2, #2741
+	movw	r2, #2787
 	ldr	r1, .L313
 	ldr	r0, .L313+4
 	bl	sftl_printk
@@ -2675,7 +2675,7 @@ get_new_active_ppa:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
 	bne	.L302
-	movw	r2, #2742
+	movw	r2, #2788
 	ldr	r1, .L313
 	ldr	r0, .L313+4
 	bl	sftl_printk
@@ -2721,7 +2721,7 @@ get_new_active_ppa:
 	moveq	r3, #0
 	cmp	r3, #0
 	beq	.L299
-	movw	r2, #2763
+	movw	r2, #2809
 	ldr	r1, .L313
 	ldr	r0, .L313+4
 	bl	sftl_printk
@@ -2765,7 +2765,7 @@ FtlGcBufInit:
 	mov	r4, #1
 	mov	r5, #20
 	mov	r2, #0
-	str	r2, [r3, #3164]
+	str	r2, [r3, #3168]
 .L316:
 	ldrh	r1, [r3, #32]
 	uxth	r0, r2
@@ -2775,13 +2775,13 @@ FtlGcBufInit:
 	mov	ip, #12
 	mov	lr, #0
 .L318:
-	ldr	r2, [r3, #3184]
+	ldr	r2, [r3, #3188]
 	cmp	r1, r2
 	bcc	.L319
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 .L317:
 	uxth	r2, r2
-	ldr	r6, [r3, #3168]
+	ldr	r6, [r3, #3172]
 	mul	r0, lr, r2
 	add	r1, r6, r0
 	str	r4, [r1, #8]
@@ -2790,22 +2790,22 @@ FtlGcBufInit:
 	add	r7, r1, #3
 	cmp	r1, #0
 	movlt	r1, r7
-	ldr	r7, [r3, #3172]
+	ldr	r7, [r3, #3176]
 	bic	r1, r1, #3
 	add	r1, r7, r1
 	str	r1, [r6, r0]
 	ldrh	r1, [r3, #112]
-	ldr	r7, [r3, #3168]
+	ldr	r7, [r3, #3172]
 	mul	r1, r2, r1
 	add	r6, r7, r0
 	add	r8, r1, #3
 	cmp	r1, #0
 	movlt	r1, r8
-	ldr	r8, [r3, #3176]
+	ldr	r8, [r3, #3180]
 	bic	r1, r1, #3
 	add	r1, r8, r1
 	str	r1, [r6, #4]
-	ldr	r1, [r3, #3180]
+	ldr	r1, [r3, #3184]
 	mla	r2, r5, r2, r1
 	ldr	r1, [r7, r0]
 	str	r1, [r2, #8]
@@ -2815,7 +2815,7 @@ FtlGcBufInit:
 	b	.L316
 .L319:
 	mul	r4, ip, r1
-	ldr	r5, [r3, #3168]
+	ldr	r5, [r3, #3172]
 	add	r2, r5, r4
 	str	lr, [r2, #8]
 	ldrh	r2, [r3, #110]
@@ -2823,12 +2823,12 @@ FtlGcBufInit:
 	add	r0, r2, #3
 	cmp	r2, #0
 	movlt	r2, r0
-	ldr	r0, [r3, #3172]
+	ldr	r0, [r3, #3176]
 	bic	r2, r2, #3
 	add	r2, r0, r2
 	str	r2, [r5, r4]
 	ldrh	r2, [r3, #112]
-	ldr	r0, [r3, #3168]
+	ldr	r0, [r3, #3172]
 	mul	r2, r1, r2
 	add	r0, r0, r4
 	add	r1, r1, #1
@@ -2836,7 +2836,7 @@ FtlGcBufInit:
 	add	r4, r2, #3
 	cmp	r2, #0
 	movlt	r2, r4
-	ldr	r4, [r3, #3176]
+	ldr	r4, [r3, #3180]
 	bic	r2, r2, #3
 	add	r2, r4, r2
 	str	r2, [r0, #4]
@@ -2863,8 +2863,8 @@ FtlGcBufFree:
 	mov	r5, #20
 	mov	r7, #12
 	mov	r8, lr
-	ldr	r6, [r3, #3184]
-	ldr	r4, [r3, #3168]
+	ldr	r6, [r3, #3188]
+	ldr	r4, [r3, #3172]
 .L323:
 	uxth	r3, lr
 	cmp	r1, r3
@@ -2908,8 +2908,8 @@ FtlGcBufAlloc:
 	mov	r6, #12
 	mov	r7, #1
 	mov	r8, #20
-	ldr	r4, [r3, #3184]
-	ldr	r5, [r3, #3168]
+	ldr	r4, [r3, #3188]
+	ldr	r5, [r3, #3172]
 .L332:
 	uxth	r2, ip
 	cmp	r1, r2
@@ -2953,9 +2953,9 @@ IsBlkInGcList:
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
 	ldr	r2, .L345
-	movw	r1, #3192
+	movw	r1, #3196
 	uxth	r0, r0
-	ldr	r3, [r2, #3188]
+	ldr	r3, [r2, #3192]
 	ldrh	r2, [r2, r1]
 	add	r2, r3, r2, lsl #1
 .L341:
@@ -2991,47 +2991,46 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	ip, .L351
-	movw	r3, #3192
-	ldr	r2, [ip, #3188]
-	ldrh	lr, [ip, r3]
-	mov	r3, #0
+	ldr	r3, .L351
+	movw	r2, #3196
+	mov	ip, #0
+	ldrh	lr, [r3, r2]
+	ldr	r2, [r3, #3192]
 	sub	r1, r2, #2
 .L348:
-	uxth	r7, r3
+	uxth	r7, ip
 	cmp	r7, lr
 	bcc	.L350
 	bne	.L349
-	lsl	r3, r7, #1
-	strh	r0, [r2, r3]	@ movhi
-	movw	r2, #3192
-	ldrh	r3, [ip, r2]
-	add	r3, r3, #1
-	strh	r3, [ip, r2]	@ movhi
+	lsl	ip, r7, #1
+	strh	r0, [r2, ip]	@ movhi
+	movw	r2, #3196
+	ldrh	r0, [r3, r2]
+	add	r0, r0, #1
+	strh	r0, [r3, r2]	@ movhi
 	b	.L349
 .L350:
 	ldrh	r7, [r1, #2]!
-	add	r3, r3, #1
+	add	ip, ip, #1
 	cmp	r7, r0
 	bne	.L348
 .L349:
-	ldr	r0, .L351+4
-	mov	r3, #12
-	ldrh	r2, [r0]
-	mul	r3, r3, r2
-	ldr	r2, [ip, #3196]
-	add	r1, r2, r3
+	movw	ip, #3204
+	mov	r0, #12
+	ldrh	r2, [r3, ip]
+	mul	r0, r0, r2
+	ldr	r2, [r3, #3200]
+	add	r1, r2, r0
 	stmib	r1, {r5, r6}
-	str	r4, [r2, r3]
-	ldrh	r3, [r0]
-	add	r3, r3, #1
-	strh	r3, [r0]	@ movhi
+	str	r4, [r2, r0]
+	ldrh	r2, [r3, ip]
+	add	r2, r2, #1
+	strh	r2, [r3, ip]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 .L352:
 	.align	2
 .L351:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3200
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
 	.align	2
 	.global	FtlGcRefreshBlock
@@ -3050,11 +3049,11 @@ FtlGcRefreshBlock:
 	mov	r1, r4
 	bl	sftl_printk
 	ldr	r3, .L356+4
-	movw	ip, #3202
+	movw	ip, #3206
 	ldrh	lr, [r3, ip]
 	cmp	r4, lr
 	beq	.L354
-	movw	r2, #3204
+	movw	r2, #3208
 	ldrh	r0, [r3, r2]
 	cmp	r4, r0
 	beq	.L354
@@ -3087,7 +3086,7 @@ FtlGcMarkBadPhyBlk:
 	sub	fp, ip, #4
 	ldr	r4, .L362
 	uxth	r5, r0
-	movw	r6, #3206
+	movw	r6, #3210
 	mov	r0, r5
 	bl	P2V_block_in_plane
 	mov	r2, r5
@@ -3105,7 +3104,7 @@ FtlGcMarkBadPhyBlk:
 	cmp	r3, r1
 	bhi	.L361
 	cmp	r3, #15
-	movwls	r2, #3206
+	movwls	r2, #3210
 	addls	r1, r3, #1
 	strhls	r1, [r4, r2]	@ movhi
 	lslls	r3, r3, #1
@@ -3126,7 +3125,7 @@ FtlGcMarkBadPhyBlk:
 .L362:
 	.word	.LANCHOR0
 	.word	.LC74
-	.word	.LANCHOR0+3208
+	.word	.LANCHOR0+3212
 	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
 	.align	2
 	.global	FtlGcReFreshBadBlk
@@ -3141,17 +3140,17 @@ FtlGcReFreshBadBlk:
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	ldr	r4, .L370
-	movw	r3, #3206
+	movw	r3, #3210
 	ldrh	r2, [r4, r3]
 	cmp	r2, #0
 	beq	.L365
-	movw	r3, #3202
+	movw	r3, #3206
 	ldrh	r1, [r4, r3]
 	movw	r3, #65535
 	cmp	r1, r3
 	bne	.L365
-	movw	r3, #3242
-	movw	r5, #3242
+	movw	r3, #3246
+	movw	r5, #3246
 	ldrh	r1, [r4, r3]
 	cmp	r1, r2
 	movcs	r2, #0
@@ -3172,7 +3171,7 @@ FtlGcReFreshBadBlk:
 	.align	2
 .L370:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3208
+	.word	.LANCHOR0+3212
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
 	.align	2
 	.global	ftl_malloc
@@ -3340,7 +3339,7 @@ FlashEraseBlocks:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 .L389:
-	ldr	r3, [r6, #3248]
+	ldr	r3, [r6, #3252]
 	uxtb	r0, ip
 	ldr	r1, [fp, #-44]
 	blx	r3
@@ -3352,7 +3351,7 @@ FlashEraseBlocks:
 	cmp	r3, #4
 	bne	.L396
 	ldr	r1, [fp, #-44]
-	ldr	r3, [r6, #3248]
+	ldr	r3, [r6, #3252]
 	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
 	add	r1, r9, r1
 	blx	r3
@@ -3400,7 +3399,7 @@ FtlFreeSysBlkQueueIn:
 	mov	r0, r5
 	bl	P2V_block_in_plane
 	mov	r6, r0
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
@@ -3449,7 +3448,7 @@ FtlFreeSysBlkQueueOut:
 	beq	.L417
 	ldrh	r3, [r4, #214]
 	sub	r2, r2, #1
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	strh	r2, [r4, #218]	@ movhi
 	mov	r2, #1
 	add	r1, r4, r3, lsl #1
@@ -3571,7 +3570,7 @@ FlashGetBadBlockList:
 	mov	r2, #256
 	mov	r1, #255
 	bl	memset
-	ldr	r3, [r5, #3244]
+	ldr	r3, [r5, #3248]
 	mov	r1, r6
 	mov	r0, r4
 	blx	r3
@@ -3637,28 +3636,28 @@ FtlMemInit:
 	sub	fp, ip, #4
 	ldr	r4, .L548
 	movw	r3, #65535
-	movw	r2, #3202
+	movw	r2, #3206
 	mov	r5, #0
 	mov	r7, #12
-	str	r3, [r4, #3276]
+	str	r3, [r4, #3280]
 	mvn	r3, #0
 	strh	r3, [r4, r2]	@ movhi
-	movw	r2, #3204
+	movw	r2, #3208
 	strh	r3, [r4, r2]	@ movhi
+	add	r3, r4, #3152
 	mov	r2, #32
-	movw	r3, #3148
 	ldrh	r0, [r4, #106]
-	strh	r2, [r4, r3]	@ movhi
+	strh	r2, [r3]	@ movhi
 	mov	r2, #128
-	movw	r3, #3150
+	movw	r3, #3154
 	str	r5, [r4, #2540]
 	strh	r2, [r4, r3]	@ movhi
-	movw	r3, #3156
+	movw	r3, #3160
 	strh	r5, [r4, r3]	@ movhi
-	movw	r3, #3206
+	movw	r3, #3210
 	strh	r5, [r4, r3]	@ movhi
 	lsl	r0, r0, #1
-	movw	r3, #3242
+	movw	r3, #3246
 	str	r5, [r4, #2544]
 	strh	r5, [r4, r3]	@ movhi
 	mov	r6, #20
@@ -3673,110 +3672,110 @@ FtlMemInit:
 	str	r5, [r4, #2560]
 	str	r5, [r4, #2564]
 	str	r5, [r4, #2568]
-	str	r5, [r4, #3272]
-	str	r5, [r4, #3160]
-	str	r5, [r4, #3280]
-	str	r5, [r4, #3152]
+	str	r5, [r4, #3276]
+	str	r5, [r4, #3164]
 	str	r5, [r4, #3284]
+	str	r5, [r4, #3156]
+	str	r5, [r4, #3288]
 	bl	ftl_malloc
-	str	r0, [r4, #3188]
+	str	r0, [r4, #3192]
 	ldrh	r0, [r4, #106]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
-	str	r0, [r4, #3196]
+	str	r0, [r4, #3200]
 	mul	r6, r6, r3
 	lsl	r8, r6, #2
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3288]
+	str	r0, [r4, #3292]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3292]
+	str	r0, [r4, #3296]
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3296]
+	str	r0, [r4, #3300]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3268]
+	str	r0, [r4, #3272]
 	mov	r0, r6
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
 	ldrh	r6, [r4, #110]
-	str	r0, [r4, #3180]
+	str	r0, [r4, #3184]
 	lsl	r3, r3, #1
 	mov	r0, r6
 	add	r3, r3, #1
-	str	r3, [r4, #3184]
-	bl	ftl_malloc
-	str	r0, [r4, #3300]
-	mov	r0, r6
+	str	r3, [r4, #3188]
 	bl	ftl_malloc
 	str	r0, [r4, #3304]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3308]
-	ldr	r0, [r4, #3184]
-	mul	r0, r0, r6
-	bl	ftl_malloc
-	str	r0, [r4, #3172]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3312]
+	ldr	r0, [r4, #3188]
+	mul	r0, r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3176]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3316]
-	ldr	r0, [r4, #3184]
-	mul	r0, r7, r0
-	bl	ftl_malloc
-	str	r0, [r4, #3168]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3320]
+	ldr	r0, [r4, #3188]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	str	r0, [r4, #3172]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3324]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3328]
 	ldrh	r0, [r4, #58]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
 	ldrh	r6, [r4, #32]
-	str	r0, [r4, #3328]
+	str	r0, [r4, #3332]
 	mul	r6, r6, r3
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3332]
+	str	r0, [r4, #3336]
 	lsl	r0, r6, #2
-	movw	r6, #3340
+	add	r6, r4, #3344
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
-	str	r0, [r4, #3336]
-	ldr	r0, [r4, #3184]
+	str	r0, [r4, #3340]
+	ldr	r0, [r4, #3188]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	str	r0, [r4, #3176]
+	str	r0, [r4, #3180]
 	ldrh	r0, [r4, #42]
 	lsl	r0, r0, #1
 	uxth	r0, r0
-	strh	r0, [r4, r6]	@ movhi
+	strh	r0, [r6]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #3344]
-	ldrh	r0, [r4, r6]
+	str	r0, [r4, #3348]
+	ldrh	r0, [r6]
 	ldr	r3, .L548+4
 	add	r0, r0, #544
 	add	r0, r0, #3
 	lsr	r0, r0, #9
-	strh	r0, [r4, r6]	@ movhi
+	strh	r0, [r6]	@ movhi
 	and	r0, r3, r0, lsl #9
 	bl	ftl_malloc
 	ldrh	r6, [r4, #42]
-	str	r0, [r4, #3348]
+	str	r0, [r4, #3352]
 	add	r0, r0, #32
 	str	r0, [r4, #2328]
 	lsl	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3352]
+	str	r0, [r4, #3356]
 	mov	r0, r6
 	bl	ftl_malloc
 	ldr	r6, [r4, #128]
@@ -3784,10 +3783,10 @@ FtlMemInit:
 	lsl	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3356]
+	str	r0, [r4, #3360]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3360]
+	str	r0, [r4, #3364]
 	ldrh	r0, [r4, #42]
 	lsr	r0, r0, #3
 	add	r0, r0, #4
@@ -3800,28 +3799,28 @@ FtlMemInit:
 	ldrh	r0, [r4, #120]
 	lsl	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #3364]
+	str	r0, [r4, #3368]
 	ldrh	r0, [r4, #120]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3368]
+	str	r0, [r4, #3372]
 	ldrh	r0, [r4, #122]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r2, [r4, #122]
 	mov	r1, r5
-	str	r0, [r4, #3372]
-	movw	r5, #3388
+	str	r0, [r4, #3376]
+	add	r5, r4, #3392
 	lsl	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r0, [r4, #136]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3376]
+	str	r0, [r4, #3380]
 	ldr	r0, [r4, #128]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3380]
+	str	r0, [r4, #3384]
 	ldrh	r0, [r4, #138]
 	mul	r0, r7, r0
 	bl	ftl_malloc
@@ -3830,7 +3829,7 @@ FtlMemInit:
 	ldrh	r0, [r4, #110]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	str	r0, [r4, #3384]
+	str	r0, [r4, #3388]
 	ldrh	r0, [r4, #42]
 	lsl	r0, r0, #3
 	bl	ftl_malloc
@@ -3839,11 +3838,11 @@ FtlMemInit:
 	ldrh	r3, [r4, #54]
 	add	r0, r0, #31
 	asr	r0, r0, #5
-	strh	r0, [r4, r5]	@ movhi
+	strh	r0, [r5]	@ movhi
 	mul	r0, r0, r3
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r4, r5]
+	ldrh	r2, [r5]
 	add	ip, r4, #180
 	ldrh	lr, [r4, #54]
 	mov	r3, #1
@@ -3861,7 +3860,7 @@ FtlMemInit:
 .L450:
 	cmp	r2, r3
 	bne	.L451
-	ldr	r3, [r4, #3356]
+	ldr	r3, [r4, #3360]
 	cmp	r3, #0
 	bne	.L452
 .L454:
@@ -3881,19 +3880,19 @@ FtlMemInit:
 	str	r1, [r3, #4]!
 	b	.L450
 .L452:
-	ldr	r3, [r4, #3360]
+	ldr	r3, [r4, #3364]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3376]
+	ldr	r3, [r4, #3380]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3380]
+	ldr	r3, [r4, #3384]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3384]
+	ldr	r3, [r4, #3388]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #2316]
@@ -3905,28 +3904,25 @@ FtlMemInit:
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3188]
-	cmp	r3, #0
-	beq	.L454
-	ldr	r3, [r4, #3196]
+	ldr	r3, [r4, #3192]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3200]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3292]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3268]
+	ldr	r3, [r4, #3300]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3180]
+	ldr	r3, [r4, #3272]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3292]
+	ldr	r3, [r4, #3184]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3300]
+	ldr	r3, [r4, #3296]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #3304]
@@ -3935,44 +3931,47 @@ FtlMemInit:
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3172]
+	ldr	r3, [r4, #3312]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3312]
+	ldr	r3, [r4, #3176]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3168]
+	ldr	r3, [r4, #3320]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3332]
+	ldr	r3, [r4, #3172]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3176]
+	ldr	r3, [r4, #3340]
+	cmp	r3, #0
+	beq	.L454
+	ldr	r3, [r4, #3180]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
 	beq	.L454
-	ldr	r3, [r4, #3344]
+	ldr	r3, [r4, #3348]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
 	beq	.L454
 	ldr	r3, .L548
-	ldr	r2, [r3, #3364]
+	ldr	r2, [r3, #3368]
 	cmp	r2, #0
 	beq	.L454
-	ldr	r2, [r3, #3368]
+	ldr	r2, [r3, #3372]
 	cmp	r2, #0
 	beq	.L454
-	ldr	r3, [r3, #3372]
+	ldr	r3, [r3, #3376]
 	cmp	r3, #0
 	beq	.L454
 	mov	r0, #0
@@ -3996,18 +3995,17 @@ FtlBbt2Bitmap:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	ldr	r6, .L556
-	movw	r3, #3388
 	mov	r4, r0
+	mov	r7, r1
 	ldr	r8, .L556+4
 	sub	r5, r4, #2
-	ldrh	r2, [r6, r3]
+	ldrh	r2, [r6]
 	add	r4, r4, #1020
-	ldr	r9, .L556+8
-	mov	r7, r1
 	add	r4, r4, #2
+	sub	r6, r6, #3392
 	mov	r1, #0
 	mov	r0, r7
 	lsl	r2, r2, #2
@@ -4016,13 +4014,13 @@ FtlBbt2Bitmap:
 	ldrh	r3, [r5, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	ldmfdeq	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
+	ldmfdeq	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 	ldrh	r2, [r6, #98]
 	cmp	r2, r3
 	bhi	.L552
 	mov	r2, #74
 	mov	r1, r8
-	mov	r0, r9
+	ldr	r0, .L556+8
 	bl	sftl_printk
 .L552:
 	ldrh	r3, [r5, #2]!
@@ -4034,11 +4032,11 @@ FtlBbt2Bitmap:
 	orr	r3, r2, r0, lsl r3
 	str	r3, [r7, r1, lsl #2]
 	bne	.L553
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 .L557:
 	.align	2
 .L556:
-	.word	.LANCHOR0
+	.word	.LANCHOR0+3392
 	.word	.LANCHOR1+184
 	.word	.LC1
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
@@ -4167,13 +4165,13 @@ FtlL2PDataInit:
 	mov	r1, #0
 	mvn	r5, #0
 	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3360]
+	ldr	r0, [r4, #3364]
 	lsl	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r3, [r4, #110]
 	mov	r1, #255
 	ldrh	r2, [r4, #138]
-	ldr	r0, [r4, #3384]
+	ldr	r0, [r4, #3388]
 	mul	r2, r2, r3
 	bl	ftl_memset
 	mov	r2, #0
@@ -4188,25 +4186,25 @@ FtlL2PDataInit:
 	bhi	.L582
 	ldr	r2, .L583+4
 	mvn	r1, #0
+	movw	r0, #3396
+	strh	r1, [r3, r0]	@ movhi
 	strh	r1, [r2, #2]	@ movhi
-	strh	r1, [r2]	@ movhi
 	ldr	r1, [r3, #128]
 	strh	r1, [r2, #10]	@ movhi
 	ldr	r1, .L583+8
 	strh	r1, [r2, #4]	@ movhi
-	movw	r1, #3436
-	ldrh	r1, [r3, r1]
+	ldrh	r1, [r2, #44]
 	strh	r1, [r2, #8]	@ movhi
 	ldrh	r1, [r3, #136]
 	strh	r1, [r2, #6]	@ movhi
-	ldr	r2, [r3, #3356]
-	str	r2, [r3, #3404]
-	ldr	r2, [r3, #3380]
-	str	r2, [r3, #3408]
 	ldr	r2, [r3, #3360]
+	str	r2, [r3, #3408]
+	ldr	r2, [r3, #3384]
 	str	r2, [r3, #3412]
-	ldr	r2, [r3, #3376]
+	ldr	r2, [r3, #3364]
 	str	r2, [r3, #3416]
+	ldr	r2, [r3, #3380]
+	str	r2, [r3, #3420]
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 .L582:
 	uxth	r2, r2
@@ -4219,7 +4217,7 @@ FtlL2PDataInit:
 	add	r1, r1, r0
 	ldrh	r0, [r3, #110]
 	mul	r2, r2, r0
-	ldr	r0, [r3, #3384]
+	ldr	r0, [r3, #3388]
 	bic	r2, r2, #3
 	add	r2, r0, r2
 	str	r2, [r1, #8]
@@ -4229,7 +4227,7 @@ FtlL2PDataInit:
 	.align	2
 .L583:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3392
+	.word	.LANCHOR0+3396
 	.word	-3902
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
@@ -4246,16 +4244,16 @@ FtlVariablesInit:
 	sub	fp, ip, #4
 	ldr	r4, .L586
 	mvn	r3, #0
-	movw	r2, #3438
+	movw	r2, #3442
 	mov	r5, #0
 	strh	r3, [r4, r2]	@ movhi
 	mov	r1, r5
 	ldrh	r2, [r4, #120]
 	ldr	r0, [r4, #148]
-	str	r3, [r4, #3448]
-	str	r5, [r4, #3440]
-	lsl	r2, r2, #1
+	str	r3, [r4, #3452]
 	str	r5, [r4, #3444]
+	lsl	r2, r2, #1
+	str	r5, [r4, #3448]
 	strh	r5, [r4, #144]	@ movhi
 	bl	ftl_memset
 	ldrh	r2, [r4, #42]
@@ -4265,16 +4263,15 @@ FtlVariablesInit:
 	bl	ftl_memset
 	ldrh	r2, [r4, #42]
 	mov	r1, r5
-	ldr	r0, [r4, #3344]
+	ldr	r0, [r4, #3348]
 	lsl	r2, r2, #1
 	bl	ftl_memset
 	add	r0, r4, #2256
 	mov	r1, #48
 	add	r0, r0, #12
 	bl	__memzero
-	add	r0, r4, #2624
+	add	r0, r4, #2640
 	mov	r1, #512
-	add	r0, r0, #12
 	bl	__memzero
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
@@ -4398,7 +4395,7 @@ SupperBlkListInit:
 	movw	r2, #2344
 	strh	r8, [r4, r2]	@ movhi
 	ble	.L598
-	movw	r2, #2170
+	movw	r2, #2216
 	ldr	r1, .L599+12
 	ldr	r0, .L599+16
 	bl	sftl_printk
@@ -4429,19 +4426,19 @@ FtlGcPageVarInit:
 	sub	fp, ip, #4
 	ldr	r4, .L602
 	mov	r3, #0
-	movw	r2, #3192
+	movw	r2, #3196
 	mov	r1, #255
 	strh	r3, [r4, r2]	@ movhi
-	add	r2, r4, #3200
-	strh	r3, [r2]	@ movhi
+	movw	r2, #3204
+	strh	r3, [r4, r2]	@ movhi
 	ldrh	r2, [r4, #106]
-	ldr	r0, [r4, #3188]
+	ldr	r0, [r4, #3192]
 	lsl	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r3, [r4, #106]
 	mov	r2, #12
 	mov	r1, #255
-	ldr	r0, [r4, #3196]
+	ldr	r0, [r4, #3200]
 	mul	r2, r2, r3
 	bl	ftl_memset
 	bl	FtlGcBufInit
@@ -4517,10 +4514,10 @@ FlashReadPages:
 	bhi	.L610
 	ldr	r6, [r4, #8]
 	ldr	r3, [r4, #12]
-	ldr	ip, [r5, #3256]
+	ldr	ip, [r5, #3260]
 	tst	r6, #63
 	ldr	r1, [fp, #-44]
-	ldrne	r6, [r5, #3320]
+	ldrne	r6, [r5, #3324]
 	mov	r2, r6
 	blx	ip
 	str	r0, [r4]
@@ -4531,7 +4528,7 @@ FlashReadPages:
 	add	r2, r6, #2048
 	ldr	r3, [r4, #12]
 	ldr	r1, [fp, #-44]
-	ldr	ip, [r5, #3256]
+	ldr	ip, [r5, #3260]
 	add	r3, r3, #8
 	add	r1, r0, r1
 	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
@@ -4562,7 +4559,7 @@ FlashReadPages:
 	movne	r3, #256
 	strne	r3, [r4]
 .L613:
-	ldr	r3, [r5, #3320]
+	ldr	r3, [r5, #3324]
 	cmp	r6, r3
 	bne	.L610
 	ldr	r0, [r4, #8]
@@ -4598,12 +4595,12 @@ FtlLoadFactoryBbt:
 	ldr	r4, .L645
 	mov	r6, #0
 	mvn	r9, #0
-	ldr	r10, .L645+4
-	ldr	r3, [r4, #3300]
+	ldr	r3, [r4, #3304]
 	add	r7, r4, #162
-	ldr	r8, [r4, #3332]
-	str	r3, [r4, #3460]
-	str	r8, [r4, #3464]
+	ldr	r8, [r4, #3336]
+	add	r10, r4, #3456
+	str	r3, [r4, #3464]
+	str	r8, [r4, #3468]
 .L636:
 	ldrh	r3, [r4, #54]
 	cmp	r6, r3
@@ -4625,9 +4622,9 @@ FtlLoadFactoryBbt:
 	mov	r1, r2
 	mov	r0, r10
 	lsl	r3, r3, #10
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	beq	.L638
 	ldrh	r2, [r8]
@@ -4642,7 +4639,6 @@ FtlLoadFactoryBbt:
 	.align	2
 .L645:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
 	.global	FtlGetLastWrittenPage
@@ -4666,7 +4662,7 @@ FtlGetLastWrittenPage:
 	ldrheq	r5, [r3, #104]
 	mov	r1, #1
 	ldrhne	r5, [r3, #102]
-	ldr	r3, [r3, #3324]
+	ldr	r3, [r3, #3328]
 	sub	r5, r5, #1
 	sxth	r5, r5
 	str	r3, [fp, #-108]
@@ -4732,23 +4728,23 @@ FtlScanSysBlk:
 	sub	sp, sp, #24
 	mov	r5, #0
 	ldr	r4, .L742
-	movw	r3, #3436
 	mov	r1, r5
 	ldr	r2, [r4, #128]
+	add	r3, r4, #3440
+	ldr	r0, [r4, #3384]
 	mov	r6, r4
-	ldr	r0, [r4, #3380]
-	strh	r5, [r4, r3]	@ movhi
+	strh	r5, [r3]	@ movhi
 	strh	r5, [r4, #144]	@ movhi
 	lsl	r2, r2, #2
 	bl	ftl_memset
 	ldr	r2, [r4, #128]
 	mov	r1, r5
-	ldr	r0, [r4, #3356]
+	ldr	r0, [r4, #3360]
 	lsl	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
 	mov	r1, r5
-	ldr	r0, [r4, #3368]
+	ldr	r0, [r4, #3372]
 	lsl	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
@@ -4757,10 +4753,10 @@ FtlScanSysBlk:
 	mov	r5, r4
 	lsl	r2, r2, #1
 	bl	ftl_memset
-	mvn	r3, #0
-	str	r3, [r4, #2576]
-	str	r3, [r4, #2580]
-	str	r3, [r4, #2584]
+	mov	r2, #16
+	mov	r1, #255
+	add	r0, r4, #2576
+	bl	memset
 	ldrh	r3, [r4, #40]
 	str	r3, [fp, #-44]
 .L661:
@@ -4768,12 +4764,12 @@ FtlScanSysBlk:
 	ldr	r2, [fp, #-44]
 	cmp	r3, r2
 	bls	.L702
-	ldr	r1, [r6, #3176]
+	ldr	r1, [r6, #3180]
 	mov	r7, #0
 	ldrh	r2, [r6, #32]
 	mov	r10, r7
-	ldr	r8, [r6, #3288]
-	ldr	r3, [r6, #3172]
+	ldr	r8, [r6, #3292]
+	ldr	r3, [r6, #3176]
 	str	r1, [fp, #-48]
 	ldrh	r9, [r6, #112]
 	ldr	ip, .L742+4
@@ -4835,7 +4831,7 @@ FtlScanSysBlk:
 	ldr	r3, [fp, #-48]
 	mov	r9, #20
 	mul	r9, r9, r3
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	add	r2, r3, r9
 	ldr	r3, [r3, r9]
 	ldr	r1, [r2, #4]
@@ -4846,7 +4842,7 @@ FtlScanSysBlk:
 	bne	.L668
 	mov	r3, #16
 .L670:
-	ldr	r0, [r4, #3288]
+	ldr	r0, [r4, #3292]
 	str	ip, [fp, #-56]
 	str	r3, [fp, #-52]
 	add	r0, r0, r9
@@ -4862,10 +4858,10 @@ FtlScanSysBlk:
 	cmp	r2, r3
 	ldr	r3, [fp, #-52]
 	bne	.L667
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	mvn	r2, #0
 	str	r2, [r3, r9]
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r9]
 	cmp	r3, r2
 	bne	.L668
@@ -4873,7 +4869,7 @@ FtlScanSysBlk:
 	mov	r1, #1
 	b	.L740
 .L667:
-	ldr	r2, [r4, #3288]
+	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r9]
 	cmn	r2, #1
 	bne	.L668
@@ -4924,14 +4920,14 @@ FtlScanSysBlk:
 	ldrh	r2, [r9]
 	cmp	r2, r3
 	bls	.L679
-	movw	r2, #1222
+	movw	r2, #1225
 	ldr	r1, .L742+12
 	ldr	r0, .L742+16
 	bl	sftl_printk
 .L679:
 	ldr	r0, [r4, #128]
 	ldrh	r2, [r9]
-	ldr	ip, [r4, #3380]
+	ldr	ip, [r4, #3384]
 	uxth	r1, r0
 	sub	r3, r1, #1
 	sub	r1, r1, r2
@@ -4969,11 +4965,11 @@ FtlScanSysBlk:
 	bhi	.L684
 	ldr	r1, [r7, #4]
 	cmp	r3, #0
-	ldr	r2, [r5, #3380]
+	ldr	r2, [r5, #3384]
 	ldr	r0, [fp, #-56]
 	str	r1, [r2, r0]
 	lsl	r2, r3, #1
-	ldr	r1, [r5, #3356]
+	ldr	r1, [r5, #3360]
 	strh	r8, [r1, r2]	@ movhi
 	blt	.L673
 	ldr	r2, .L742+8
@@ -4988,21 +4984,21 @@ FtlScanSysBlk:
 	add	r2, r2, #1
 	ldr	r1, [r7, #4]
 	strh	r2, [r9]	@ movhi
-	ldr	r2, [r4, #3380]
+	ldr	r2, [r4, #3384]
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
-	ldr	r2, [r4, #3356]
+	ldr	r2, [r4, #3360]
 .L738:
 	strh	r8, [r2, r3]	@ movhi
 	b	.L673
 .L684:
-	ldr	r0, [r6, #3380]
+	ldr	r0, [r6, #3384]
 	add	r1, r1, #1
 	add	lr, r0, r2, lsl #2
 	ldr	lr, [lr, #4]
 	str	lr, [r0, r2, lsl #2]
 	lsl	r2, r2, #1
-	ldr	r0, [r6, #3356]
+	ldr	r0, [r6, #3360]
 	add	lr, r0, r2
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r2]	@ movhi
@@ -5016,14 +5012,14 @@ FtlScanSysBlk:
 	ldrh	r3, [r4, #120]
 	cmp	r2, r3
 	bls	.L689
-	movw	r2, #1263
+	movw	r2, #1266
 	ldr	r1, .L742+12
 	ldr	r0, .L742+16
 	bl	sftl_printk
 .L689:
 	ldrh	r2, [r4, #120]
 	ldrh	r1, [r4, #144]
-	ldr	ip, [r4, #3368]
+	ldr	ip, [r4, #3372]
 	sub	r0, r2, #1
 	sxth	r3, r0
 	sub	r0, r0, r1
@@ -5054,7 +5050,7 @@ FtlScanSysBlk:
 	cmp	ip, r0
 	bhi	.L694
 	ldr	r1, [r7, #4]
-	ldr	r2, [r5, #3368]
+	ldr	r2, [r5, #3372]
 	str	r1, [r2, lr]
 	lsl	r2, r3, #1
 	ldr	r1, [r5, #148]
@@ -5070,7 +5066,7 @@ FtlScanSysBlk:
 	cmp	r3, r2
 	bgt	.L673
 	add	r1, r1, #1
-	ldr	r2, [r5, #3368]
+	ldr	r2, [r5, #3372]
 	strh	r1, [r5, #144]	@ movhi
 	ldr	r1, [r7, #4]
 	str	r1, [r2, r3, lsl #2]
@@ -5078,7 +5074,7 @@ FtlScanSysBlk:
 	ldr	r2, [r5, #148]
 	b	.L738
 .L694:
-	ldr	r0, [r6, #3368]
+	ldr	r0, [r6, #3372]
 	add	r1, r1, #1
 	add	r9, r0, r2, lsl #2
 	ldr	r9, [r9, #4]
@@ -5119,7 +5115,7 @@ FtlScanSysBlk:
 	str	r3, [r4, #2584]
 	b	.L673
 .L702:
-	ldr	r2, [r6, #3356]
+	ldr	r2, [r6, #3360]
 	ldrh	r3, [r2]
 	cmp	r3, #0
 	beq	.L704
@@ -5129,12 +5125,12 @@ FtlScanSysBlk:
 	cmp	r2, #0
 	beq	.L705
 .L706:
-	movw	r3, #3436
-	ldrh	r2, [r4, r3]
+	ldr	r3, .L742+8
+	ldrh	r2, [r3]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
 	bls	.L737
-	movw	r2, #1388
+	movw	r2, #1391
 	ldr	r1, .L742+12
 	ldr	r0, .L742+16
 	bl	sftl_printk
@@ -5143,8 +5139,8 @@ FtlScanSysBlk:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 .L704:
-	movw	r1, #3436
-	ldrh	r1, [r6, r1]
+	ldr	r1, .L742+8
+	ldrh	r1, [r1]
 	cmp	r1, #0
 	ldrne	r1, [r6, #128]
 	beq	.L707
@@ -5163,18 +5159,18 @@ FtlScanSysBlk:
 	ldr	r2, [r5, #128]
 	cmp	r3, r2
 	bcs	.L707
-	ldr	r1, [r5, #3356]
+	ldr	r1, [r5, #3360]
 	lsl	r2, r3, #1
 	sub	r0, r3, ip
 	lsl	r6, r0, #1
 	ldrh	r7, [r1, r2]
 	strh	r7, [r1, r6]	@ movhi
-	ldr	r1, [r5, #3380]
+	ldr	r1, [r5, #3384]
 	ldr	r6, [r1, r3, lsl #2]
 	add	r3, r3, #1
 	sxth	r3, r3
 	str	r6, [r1, r0, lsl #2]
-	ldr	r1, [r5, #3356]
+	ldr	r1, [r5, #3360]
 	strh	lr, [r1, r2]	@ movhi
 	b	.L709
 .L705:
@@ -5203,7 +5199,7 @@ FtlScanSysBlk:
 	lsl	r6, r0, #1
 	ldrh	r7, [r1, r2]
 	strh	r7, [r1, r6]	@ movhi
-	ldr	r1, [r5, #3368]
+	ldr	r1, [r5, #3372]
 	ldr	r6, [r1, r3, lsl #2]
 	add	r3, r3, #1
 	sxth	r3, r3
@@ -5216,7 +5212,7 @@ FtlScanSysBlk:
 .L742:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+60
-	.word	.LANCHOR0+3436
+	.word	.LANCHOR0+3440
 	.word	.LANCHOR1+231
 	.word	.LC1
 	.word	.LANCHOR0+2576
@@ -5234,11 +5230,11 @@ FtlLoadBbt:
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	ldr	r4, .L776
-	ldr	r7, .L776+4
-	ldr	r3, [r4, #3300]
-	ldr	r6, [r4, #3332]
-	str	r3, [r4, #3460]
-	str	r6, [r4, #3464]
+	ldr	r3, [r4, #3304]
+	add	r7, r4, #3456
+	ldr	r6, [r4, #3336]
+	str	r3, [r4, #3464]
+	str	r6, [r4, #3468]
 	bl	FtlBbtMemInit
 	ldrh	r5, [r4, #98]
 	sub	r5, r5, #1
@@ -5252,20 +5248,20 @@ FtlLoadBbt:
 	mov	r2, #1
 	mov	r1, r2
 	mov	r0, r7
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	bne	.L746
-	ldr	r3, [r4, #3456]
+	ldr	r3, [r4, #3460]
 	mov	r2, #1
 	mov	r1, r2
 	mov	r0, r7
 	add	r3, r3, #1
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
 .L746:
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	beq	.L747
 	ldrh	r2, [r6]
@@ -5289,9 +5285,9 @@ FtlLoadBbt:
 	mov	r2, #1
 	mov	r1, r2
 	ldr	r0, .L776+4
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	beq	.L752
 	ldrh	r2, [r6]
@@ -5340,7 +5336,7 @@ FtlLoadBbt:
 .L759:
 	ldr	r6, .L776+16
 	mov	r5, #0
-	ldr	r7, .L776+20
+	add	r7, r6, #3216
 .L760:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
@@ -5357,11 +5353,11 @@ FtlLoadBbt:
 	mov	r1, r2
 	mov	r0, r7
 	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3456]
-	ldr	r3, [r4, #3300]
 	str	r3, [r4, #3460]
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	beq	.L755
 	ldrh	r2, [r6]
@@ -5374,7 +5370,7 @@ FtlLoadBbt:
 	b	.L754
 .L761:
 	ldrh	r2, [r7]
-	ldr	r1, [r4, #3460]
+	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
 	lsl	r2, r2, #2
 	mla	r1, r5, r2, r1
@@ -5388,263 +5384,26 @@ FtlLoadBbt:
 	.align	2
 .L776:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
+	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
 	.word	.LC1
 	.word	.LANCHOR0+176
-	.word	.LANCHOR0+3388
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
-	.global	FtlLoadSysInfo
+	.global	FlashProgPages
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
-	@ args = 0, pretend = 0, frame = 0
+	.type	FlashProgPages, %function
+FlashProgPages:
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L799
-	mov	r1, #0
-	ldr	r3, [r4, #3300]
-	add	r6, r4, #2576
-	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #2324]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	lsl	r2, r2, #1
-	str	r3, [r4, #3464]
-	bl	ftl_memset
-	ldrh	r0, [r6]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L779
-.L787:
-	mvn	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L779:
-	ldr	r7, .L799+4
-	mov	r1, #1
-	ldr	r8, .L799+8
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	add	r0, r0, #1
-	strh	r0, [r6, #2]	@ movhi
-.L781:
-	cmp	r5, #0
-	bge	.L784
-	movw	r2, #1448
-	ldr	r1, .L799+12
-	ldr	r0, .L799+16
-	bl	sftl_printk
-.L783:
-	ldrh	r3, [r4, #40]
-	ldrh	r2, [r4, #110]
-	add	r3, r3, #24
-	cmp	r2, r3, lsl #1
-	bcs	.L786
-	movw	r2, #1450
-	ldr	r1, .L799+12
-	ldr	r0, .L799+16
-	bl	sftl_printk
-.L786:
-	ldr	r5, .L799+20
-	mov	r2, #48
-	ldr	r1, [r4, #3460]
-	mov	r0, r5
-	bl	ftl_memcpy
-	ldrh	r2, [r4, #40]
-	ldr	r1, [r4, #3460]
-	ldr	r0, [r4, #2324]
-	lsl	r2, r2, #1
-	add	r1, r1, #48
-	bl	ftl_memcpy
-	ldrh	r1, [r4, #40]
-	ldr	r3, [r4, #3460]
-	ldr	r0, [r4, #24]
-	lsr	r2, r1, #3
-	add	r1, r1, #24
-	lsl	r1, r1, #1
-	add	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r3, r1
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2268]
-	ldr	r3, .L799+8
-	cmp	r2, r3
-	bne	.L787
-	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
-	ldrh	r3, [r4, #54]
-	ldrh	r7, [r5, #8]
-	cmp	r2, r3
-	strh	r7, [r6, #6]	@ movhi
-	bne	.L787
-	ldrh	r3, [r4, #102]
-	ldrh	r2, [r4, #58]
-	ldr	r6, [r4, #44]
-	ldrh	r0, [r4, #158]
-	mul	r3, r7, r3
-	str	r7, [r4, #3472]
-	ldrh	r1, [r4, #32]
-	sub	r0, r6, r0
-	sub	r0, r0, r7
-	str	r3, [r4, #2504]
-	mul	r3, r3, r2
-	str	r3, [r4, #140]
-	bl	__udivsi3
-	cmp	r7, r6
-	movw	r3, #2572
-	strh	r0, [r4, r3]	@ movhi
-	bls	.L788
-	mov	r2, #1472
-	ldr	r1, .L799+12
-	ldr	r0, .L799+16
-	bl	sftl_printk
-.L788:
-	ldrh	r0, [r5, #14]
-	movw	r3, #2348
-	ldr	r1, .L799+24
-	mvn	ip, #0
-	strh	r0, [r4, r3]	@ movhi
-	ldrh	r3, [r5, #16]
-	lsr	r2, r3, #6
-	and	r3, r3, #63
-	strb	r3, [r4, #2354]
-	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
-	strh	r2, [r1, #2]	@ movhi
-	movw	r2, #2396
-	strb	r3, [r4, #2356]
-	movw	r3, #2588
-	strh	ip, [r4, r3]	@ movhi
-	mov	r3, #0
-	ldrh	ip, [r5, #18]
-	strh	r3, [r1, #242]	@ movhi
-	strb	r3, [r4, #2594]
-	strh	ip, [r4, r2]	@ movhi
-	ldrh	r2, [r5, #20]
-	strb	r3, [r4, #2596]
-	str	r3, [r4, #2528]
-	str	r3, [r4, #2516]
-	lsr	ip, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2402]
-	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
-	strh	ip, [r1, #50]	@ movhi
-	ldrh	ip, [r5, #22]
-	strb	r2, [r4, #2404]
-	movw	r2, #2444
-	str	r3, [r4, #2508]
-	strh	ip, [r4, r2]	@ movhi
-	ldrh	r2, [r5, #24]
-	str	r3, [r4, #2524]
-	str	r3, [r4, #2552]
-	lsr	ip, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2450]
-	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
-	strh	ip, [r1, #98]	@ movhi
-	strb	r2, [r4, #2452]
-	ldr	r2, [r4, #2300]
-	str	r2, [r4, #2548]
-	str	r3, [r4, #2564]
-	ldr	r2, [r4, #2540]
-	str	r3, [r4, #2520]
-	ldr	r3, [r4, #2308]
-	cmp	r3, r2
-	ldr	r2, [r4, #2544]
-	strhi	r3, [r4, #2540]
-	ldr	r3, [r4, #2304]
-	cmp	r3, r2
-	strhi	r3, [r4, #2544]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L791
-	ldr	r0, .L799+24
-	bl	make_superblock
-.L791:
-	movw	r3, #2396
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L792
-	ldr	r0, .L799+28
-	bl	make_superblock
-.L792:
-	movw	r3, #2444
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L793
-	ldr	r0, .L799+32
-	bl	make_superblock
-.L793:
-	movw	r3, #2588
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L794
-	ldr	r0, .L799+36
-	bl	make_superblock
-.L794:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L784:
-	ldrh	r3, [r6]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3456]
-	ldr	r3, [r4, #3300]
-	str	r3, [r4, #3460]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
-	cmn	r3, #1
-	beq	.L782
-	ldr	r3, [r4, #3300]
-	ldr	r3, [r3]
-	cmp	r3, r8
-	bne	.L782
-	ldr	r3, [r4, #3332]
-	ldrh	r2, [r3]
-	movw	r3, #61604
-	cmp	r2, r3
-	beq	.L783
-.L782:
-	sub	r5, r5, #1
-	sxth	r5, r5
-	b	.L781
-.L800:
-	.align	2
-.L799:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
-	.word	1179929683
-	.word	.LANCHOR1+256
-	.word	.LC1
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2588
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
-	.align	2
-	.global	FlashProgPages
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashProgPages, %function
-FlashProgPages:
-	@ args = 0, pretend = 0, frame = 48
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #48
 	mov	r8, #0
-	ldr	r6, .L839
+	ldr	r6, .L816
 	mov	r4, r0
 	str	r3, [fp, #-88]
 	mov	r5, r0
@@ -5656,52 +5415,52 @@ FlashProgPages:
 	str	r3, [fp, #-72]
 	lsl	r3, r3, #3
 	str	r3, [fp, #-80]
-.L802:
+.L779:
 	ldr	r3, [fp, #-76]
 	cmp	r8, r3
-	bne	.L816
+	bne	.L793
 	ldr	r3, [fp, #-88]
 	cmp	r3, #0
-	beq	.L810
+	beq	.L787
 	mov	r5, #0
-	ldr	r7, .L839+4
-	ldr	r6, .L839
-	b	.L817
-.L816:
+	ldr	r7, .L816+4
+	ldr	r6, .L816
+	b	.L794
+.L793:
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	beq	.L803
+	beq	.L780
 	ldr	r3, [r5, #12]
 	cmp	r3, #0
-	bne	.L804
-.L803:
+	bne	.L781
+.L780:
 	mov	r2, #140
-	ldr	r1, .L839+8
-	ldr	r0, .L839+12
+	ldr	r1, .L816+8
+	ldr	r0, .L816+12
 	bl	sftl_printk
-.L804:
+.L781:
 	sub	r2, fp, #68
 	sub	r1, fp, #64
 	mov	r0, r5
 	bl	l2p_addr_tran
 	ldr	r7, [fp, #-68]
 	cmp	r7, #3
-	bls	.L805
-.L838:
+	bls	.L782
+.L815:
 	mvn	r3, #0
 	str	r3, [r5]
-	b	.L806
-.L805:
+	b	.L783
+.L782:
 	cmp	r7, #0
-	bne	.L807
+	bne	.L784
 	ldr	r3, [fp, #-64]
 	ldr	r2, [fp, #-80]
 	cmp	r2, r3
-	bls	.L807
-	ldr	r5, .L839+8
-	ldr	r6, .L839+16
-	b	.L837
-.L809:
+	bls	.L784
+	ldr	r5, .L816+8
+	ldr	r6, .L816+16
+	b	.L814
+.L786:
 	mvn	r3, #0
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5712,39 +5471,39 @@ FlashProgPages:
 	mov	r3, #16
 	mov	r2, #4
 	ldr	r1, [r4, #-12]
-	ldr	r0, .L839+20
+	ldr	r0, .L816+20
 	bl	rknand_print_hex
 	mov	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L839+24
+	ldr	r0, .L816+24
 	bl	rknand_print_hex
-.L837:
+.L814:
 	ldr	r3, [fp, #-76]
 	add	r4, r4, #20
 	cmp	r7, r3
-	bne	.L809
+	bne	.L786
 	bl	dump_stack
-.L810:
+.L787:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L807:
+.L784:
 	ldr	r1, [r5, #8]
 	tst	r1, #63
 	moveq	r7, r1
-	beq	.L811
-	ldr	r7, [r10, #3320]
+	beq	.L788
+	ldr	r7, [r10, #3324]
 	cmp	r1, r7
-	beq	.L811
+	beq	.L788
 	ldrh	r2, [r10, #58]
 	mov	r0, r7
 	lsl	r2, r2, #9
 	bl	ftl_memcpy
-.L811:
+.L788:
 	ldr	r3, [r5, #12]
 	mov	r2, r7
-	ldr	ip, [r10, #3252]
+	ldr	ip, [r10, #3256]
 	ldr	r1, [fp, #-64]
 	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
 	blx	ip
@@ -5754,86 +5513,86 @@ FlashProgPages:
 	strne	r3, [r5]
 	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L806
+	bne	.L783
 	ldr	r0, [fp, #-72]
 	add	r2, r7, #2048
 	ldr	r3, [r5, #12]
 	ldr	r1, [fp, #-64]
-	ldr	ip, [r6, #3252]
+	ldr	ip, [r6, #3256]
 	add	r3, r3, #8
 	add	r1, r0, r1
 	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
 	blx	ip
 	cmp	r0, #0
-	bne	.L838
-.L806:
+	bne	.L815
+.L783:
 	add	r8, r8, #1
 	add	r5, r5, #20
-	b	.L802
-.L821:
-	ldr	r2, [r9, #3320]
+	b	.L779
+.L798:
+	ldr	r2, [r9, #3324]
 	mov	r3, #0
 	mov	r1, #1
 	sub	r0, fp, #60
 	str	r3, [r2]
-	ldr	r2, [r9, #3328]
+	ldr	r2, [r9, #3332]
 	str	r3, [r2]
 	ldr	r3, [r4, #4]
 	ldr	r2, [fp, #-84]
 	str	r3, [fp, #-56]
-	ldr	r3, [r9, #3320]
+	ldr	r3, [r9, #3324]
 	str	r3, [fp, #-52]
-	ldr	r3, [r9, #3328]
+	ldr	r3, [r9, #3332]
 	str	r3, [fp, #-48]
 	bl	FlashReadPages
 	ldr	r10, [fp, #-60]
 	cmn	r10, #1
-	bne	.L818
+	bne	.L795
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
 	str	r10, [r4]
-.L818:
+.L795:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L819
+	beq	.L796
 	ldr	r2, [r3]
-	ldr	r3, [r6, #3328]
+	ldr	r3, [r6, #3332]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L819
+	beq	.L796
 	ldr	r1, [r4, #4]
-	ldr	r0, .L839+28
+	ldr	r0, .L816+28
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L819:
+.L796:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L820
+	beq	.L797
 	ldr	r2, [r3]
-	ldr	r3, [r6, #3320]
+	ldr	r3, [r6, #3324]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L820
+	beq	.L797
 	ldr	r1, [r4, #4]
-	ldr	r0, .L839+32
+	ldr	r0, .L816+32
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L820:
+.L797:
 	add	r5, r5, #1
 	add	r4, r4, #20
-.L817:
+.L794:
 	cmp	r8, r5
-	bne	.L821
-	b	.L810
-.L840:
+	bne	.L798
+	b	.L787
+.L817:
 	.align	2
-.L839:
+.L816:
 	.word	.LANCHOR0
 	.word	.LC86
-	.word	.LANCHOR1+271
+	.word	.LANCHOR1+256
 	.word	.LC1
 	.word	.LC80
 	.word	.LC81
@@ -5855,31 +5614,31 @@ FtlLowFormatEraseBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r9, #0
-	ldr	ip, .L883
+	ldr	ip, .L860
 	uxtb	r6, r1
 	uxth	r7, r0
 	mov	r5, r9
 	mov	r4, r9
 	mov	r10, ip
-	str	r7, [ip, #3284]
-.L842:
+	str	r7, [ip, #3288]
+.L819:
 	ldrh	r1, [r10, #32]
 	uxth	r3, r9
 	cmp	r1, r3
-	bhi	.L846
+	bhi	.L823
 	cmp	r5, #0
-	beq	.L841
+	beq	.L818
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r5
 	mov	r1, #0
-	ldr	r0, [r10, #3268]
+	ldr	r0, [r10, #3272]
 	bl	FlashEraseBlocks
-.L849:
+.L826:
 	uxth	r3, r8
 	cmp	r5, r3
-	bhi	.L851
-.L852:
+	bhi	.L828
+.L829:
 	cmp	r6, #0
 	ldrhne	r3, [r10, #104]
 	moveq	r3, #2
@@ -5890,58 +5649,58 @@ FtlLowFormatEraseBlock:
 	strne	r3, [fp, #-48]
 	mov	r3, #0
 	str	r3, [fp, #-44]
-.L861:
+.L838:
 	mov	r8, #0
 	mov	r5, r8
-.L853:
+.L830:
 	ldrh	r1, [r10, #32]
 	uxth	r3, r8
 	cmp	r1, r3
-	bhi	.L856
+	bhi	.L833
 	cmp	r5, #0
-	beq	.L841
+	beq	.L818
 	mov	r9, #0
 	mov	r3, #1
 	ldr	r2, [fp, #-48]
 	mov	r1, r5
-	ldr	r0, [r10, #3268]
+	ldr	r0, [r10, #3272]
 	bl	FlashProgPages
-.L858:
+.L835:
 	uxth	r3, r9
 	cmp	r5, r3
-	bhi	.L860
+	bhi	.L837
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-52]
 	add	r3, r3, #1
 	str	r3, [fp, #-44]
 	ldrh	r3, [fp, #-44]
 	cmp	r2, r3
-	bhi	.L861
+	bhi	.L838
 	mov	r8, #0
 	mov	r9, #20
-.L862:
+.L839:
 	uxth	r3, r8
 	cmp	r5, r3
-	bhi	.L864
+	bhi	.L841
 	adds	r6, r6, #0
 	movne	r6, #1
 	cmp	r7, #63
 	movhi	r7, r6
 	orrls	r7, r6, #1
 	cmp	r7, #0
-	beq	.L841
+	beq	.L818
 	mov	r2, r5
 	ldr	r1, [fp, #-48]
-	ldr	r0, [r10, #3268]
+	ldr	r0, [r10, #3272]
 	bl	FlashEraseBlocks
-.L841:
+.L818:
 	mov	r0, r4
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L846:
+.L823:
 	uxth	r3, r9
 	mov	r2, #20
-	ldr	r0, [r10, #3268]
+	ldr	r0, [r10, #3272]
 	mul	r1, r2, r3
 	mov	r2, #0
 	add	r3, r10, r3
@@ -5951,22 +5710,22 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r8, r0
-	beq	.L843
+	beq	.L820
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L844
-.L843:
+	bne	.L821
+.L820:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	bne	.L844
-	ldr	r1, [r10, #3268]
+	bne	.L821
+	ldr	r1, [r10, #3272]
 	mov	r3, #20
 	lsl	r8, r8, #10
 	mla	r1, r3, r5, r1
-	ldr	r3, [r10, #3316]
+	ldr	r3, [r10, #3320]
 	str	r3, [r1, #8]
 	ldrh	r3, [r10, #112]
 	str	r8, [r1, #4]
@@ -5976,32 +5735,32 @@ FtlLowFormatEraseBlock:
 	add	r0, r3, #3
 	cmp	r3, #0
 	movlt	r3, r0
-	ldr	r0, [r10, #3336]
+	ldr	r0, [r10, #3340]
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L844:
+.L821:
 	add	r9, r9, #1
-	b	.L842
-.L851:
+	b	.L819
+.L828:
 	mul	r3, r9, r8
-	ldr	r2, [r10, #3268]
+	ldr	r2, [r10, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmn	r3, #1
-	bne	.L850
+	bne	.L827
 	ldr	r0, [r1, #4]
 	add	r4, r4, #1
 	uxth	r4, r4
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L850:
+.L827:
 	add	r8, r8, #1
-	b	.L849
-.L856:
+	b	.L826
+.L833:
 	uxth	r3, r8
 	mov	r2, #20
-	ldr	r0, [r10, #3268]
+	ldr	r0, [r10, #3272]
 	mul	r1, r2, r3
 	mov	r2, #0
 	add	r3, r10, r3
@@ -6011,21 +5770,21 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r9, r0
-	beq	.L854
+	beq	.L831
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L855
-.L854:
+	bne	.L832
+.L831:
 	mov	r0, r9
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L855
-	ldr	r1, [r10, #3268]
+	bne	.L832
+	ldr	r1, [r10, #3272]
 	mov	r3, #20
 	mla	r1, r3, r5, r1
 	ldr	r3, [fp, #-44]
 	add	r9, r3, r9, lsl #10
-	ldr	r3, [r10, #3312]
+	ldr	r3, [r10, #3316]
 	str	r9, [r1, #4]
 	str	r3, [r1, #8]
 	ldrh	r3, [r10, #112]
@@ -6035,2704 +5794,2298 @@ FtlLowFormatEraseBlock:
 	add	r0, r3, #3
 	cmp	r3, #0
 	movlt	r3, r0
-	ldr	r0, [r10, #3316]
+	ldr	r0, [r10, #3320]
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L855:
+.L832:
 	add	r8, r8, #1
-	b	.L853
-.L860:
+	b	.L830
+.L837:
 	mov	r3, #20
-	ldr	r2, [r10, #3268]
+	ldr	r2, [r10, #3272]
 	mul	r3, r3, r9
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L859
+	beq	.L836
 	ldr	r0, [r1, #4]
 	add	r4, r4, #1
 	uxth	r4, r4
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L859:
+.L836:
 	add	r9, r9, #1
-	b	.L858
-.L864:
+	b	.L835
+.L841:
 	cmp	r6, #0
-	beq	.L863
+	beq	.L840
 	mul	r3, r9, r8
-	ldr	r2, [r10, #3268]
+	ldr	r2, [r10, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L863
+	bne	.L840
 	ldr	r0, [r1, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L863:
+.L840:
 	add	r8, r8, #1
-	b	.L862
-.L884:
+	b	.L839
+.L861:
 	.align	2
-.L883:
+.L860:
 	.word	.LANCHOR0
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.global	Ftl_write_map_blk_to_last_page
+	.global	FlashTestBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
-	@ args = 0, pretend = 0, frame = 0
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	@ args = 0, pretend = 0, frame = 84
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldrh	r3, [r0]
-	movw	r2, #65535
-	mov	r4, r0
-	ldr	r5, [r0, #12]
-	cmp	r3, r2
-	bne	.L886
-	ldrh	r3, [r0, #8]
+	sub	sp, sp, #84
+	uxth	r5, r0
+	cmp	r5, #11
+	movls	r4, #0
+	bls	.L862
+	ldr	r3, .L867
+	sub	r0, fp, #84
+	mov	r2, #32
+	mov	r1, #165
+	str	r0, [fp, #-92]
+	lsl	r5, r5, #10
+	ldr	r4, [r3, #3328]
+	str	r4, [fp, #-96]
+	bl	memset
+	ldr	r3, .L867+4
+	mov	r2, #1
+	mov	r1, r2
+	sub	r0, fp, #104
+	str	r3, [r4]	@ unaligned
+	str	r3, [r4, #4]	@ unaligned
+	str	r5, [fp, #-100]
+	bl	FlashEraseBlocks
+	mov	r3, #1
+	sub	r0, fp, #104
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [fp, #-104]
 	cmp	r3, #0
-	beq	.L887
-	movw	r2, #641
-	ldr	r1, .L895
-	ldr	r0, .L895+4
-	bl	sftl_printk
-.L887:
-	ldrh	r3, [r4, #8]
-	add	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	mov	r3, #0
-	strh	r0, [r5]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	strh	r3, [r4]	@ movhi
-	ldr	r3, [r4, #28]
-	add	r3, r3, #1
-	str	r3, [r4, #28]
-.L888:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L886:
-	lsl	r3, r3, #1
-	ldr	r2, [r0, #28]
-	ldr	r6, [r0, #24]
-	mov	r1, #255
-	ldrh	r7, [r5, r3]
-	ldrh	r3, [r0, #2]
-	ldr	r5, .L895+8
-	orr	r3, r3, r7, lsl #10
-	str	r3, [r5, #3456]
-	ldr	r3, [r5, #3300]
-	str	r3, [r5, #3460]
-	ldr	r3, [r5, #3332]
-	str	r3, [r5, #3464]
-	str	r2, [r3, #4]
-	ldr	r2, .L895+12
-	strh	r2, [r3, #8]	@ movhi
-	ldrh	r2, [r0, #4]
-	strh	r7, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	ldrh	r2, [r5, #104]
-	ldr	r0, [r5, #3300]
-	lsl	r2, r2, #3
-	bl	ftl_memset
-	mov	r2, #0
-	mov	r3, r2
-.L889:
-	ldrh	r0, [r4, #6]
-	uxth	r1, r2
-	cmp	r0, r1
-	bhi	.L891
-	mov	r2, #1
-	mov	r3, #0
-	mov	r1, r2
-	ldr	r0, .L895+16
+	mvnne	r4, #0
+	bne	.L864
+	add	r3, r5, #1
+	sub	r0, fp, #104
+	str	r3, [fp, #-100]
+	mov	r3, #1
+	mov	r2, r3
+	mov	r1, r3
 	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
+	ldr	r4, [fp, #-104]
+	adds	r4, r4, #0
+	movne	r4, #1
+	rsb	r4, r4, #0
+.L864:
+	mov	r2, #1
+	mov	r1, #0
+	sub	r0, fp, #104
+	str	r5, [fp, #-100]
+	bl	FlashEraseBlocks
+.L862:
 	mov	r0, r4
-	add	r3, r3, #1
-	strh	r3, [r4, #2]	@ movhi
-	bl	ftl_map_blk_gc
-	b	.L888
-.L891:
-	uxth	r1, r2
-	ldr	r0, [r6, r1, lsl #2]
-	cmp	r7, r0, lsr #10
-	bne	.L890
-	ldr	r0, [r5, #3300]
-	add	r3, r3, #1
-	uxth	r3, r3
-	str	r1, [r0, r3, lsl #3]
-	ldr	r0, [r6, r1, lsl #2]
-	ldr	r1, [r5, #3300]
-	add	r1, r1, r3, lsl #3
-	str	r0, [r1, #4]
-.L890:
-	add	r2, r2, #1
-	b	.L889
-.L896:
+	sub	sp, fp, #20
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L868:
 	.align	2
-.L895:
-	.word	.LANCHOR1+286
-	.word	.LC1
+.L867:
 	.word	.LANCHOR0
-	.word	-1291
-	.word	.LANCHOR0+3452
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.word	1515870810
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
-	.global	FtlMapWritePage
+	.global	FtlBbmTblFlush
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r7, .L915
-	mov	r4, r0
-	mov	r8, r1
-	mov	r9, r2
+	sub	sp, sp, #4
+	mov	r5, #0
+	ldr	r4, .L878
+	mov	r1, #0
+	ldr	r0, [r4, #3304]
+	add	r6, r4, #176
+	ldr	r3, [r4, #3336]
+	add	r7, r4, #3392
+	ldrh	r2, [r4, #110]
+	str	r0, [r4, #3464]
+	str	r3, [r4, #3468]
+	bl	ftl_memset
+.L870:
+	ldrh	r3, [r4, #54]
+	cmp	r5, r3
+	blt	.L871
+	ldr	r5, [r4, #3468]
+	mov	r2, #16
+	mov	r1, #255
+	ldr	r8, .L878+4
 	mov	r6, #0
-	mov	r5, r7
-.L898:
-	ldr	r3, [r7, #2524]
-	add	r3, r3, #1
-	str	r3, [r7, #2524]
-	ldrh	r3, [r7, #104]
-	ldrh	r2, [r4, #2]
-	sub	r3, r3, #1
-	cmp	r2, r3
-	bge	.L899
-	ldrh	r2, [r4]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L900
-.L899:
-	mov	r0, r4
-	bl	Ftl_write_map_blk_to_last_page
-.L900:
-	ldrh	r3, [r4]
-	ldr	r2, [r4, #12]
-	lsl	r3, r3, #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	bne	.L901
-	movw	r2, #699
-	ldr	r1, .L915+4
-	ldr	r0, .L915+8
+	mov	r0, r5
+	mov	r7, r6
+	bl	memset
+	ldr	r3, .L878+8
+	strh	r3, [r5]	@ movhi
+	ldr	r3, [r4, #160]
+	str	r3, [r5, #4]
+	ldrh	r3, [r4, #152]
+	strh	r3, [r5, #2]	@ movhi
+	ldrh	r3, [r4, #156]
+	strh	r3, [r5, #8]	@ movhi
+	ldrh	r3, [r4, #158]
+	strh	r3, [r5, #10]	@ movhi
+	ldr	r3, [r4, #28]
+	strh	r3, [r5, #12]	@ movhi
+.L872:
+	ldr	r3, [r4, #3304]
+	mov	r9, #0
+	ldrh	r2, [r4, #154]
+	ldrh	r1, [r4, #152]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r9, [r4, #3456]
+	str	r3, [r4, #3468]
+	orr	r3, r2, r1, lsl #10
+	ldrh	r0, [r5, #10]
+	str	r3, [r4, #3460]
+	ldrh	r3, [r4, #156]
+	str	r0, [sp]
+	mov	r0, r8
 	bl	sftl_printk
-.L901:
-	ldrh	r2, [r4]
-	ldrh	r3, [r4, #10]
+	ldrh	r3, [r4, #104]
+	ldrh	r2, [r4, #154]
+	sub	r3, r3, #1
 	cmp	r2, r3
-	bcc	.L902
-	mov	r2, #700
-	ldr	r1, .L915+4
-	ldr	r0, .L915+8
-	bl	sftl_printk
-.L902:
-	ldrh	r3, [r4]
-	mov	r1, #16
-	ldr	r2, [r4, #12]
-	ldr	r0, [r5, #3332]
-	lsl	r3, r3, #1
-	ldrh	r10, [r2, r3]
-	ldrh	r3, [r4, #2]
-	str	r0, [r5, #3464]
-	str	r9, [r5, #3460]
-	orr	r3, r3, r10, lsl #10
-	str	r3, [r5, #3456]
-	bl	__memzero
-	ldr	r3, [r5, #3464]
-	ldr	r2, [r4, #28]
-	ldr	r0, .L915+12
-	strh	r8, [r3, #8]	@ movhi
-	str	r2, [r3, #4]
-	ldrh	r2, [r4, #4]
-	strh	r10, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
+	blt	.L873
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #152]
+	ldr	r0, [r4, #3272]
+	add	r3, r3, #1
+	strh	r9, [r4, #154]	@ movhi
+	str	r3, [r4, #160]
+	str	r3, [r5, #4]
+	ldrh	r3, [r4, #156]
+	strh	r2, [r5, #8]	@ movhi
+	strh	r2, [r4, #156]	@ movhi
+	mov	r2, #1
+	strh	r3, [r4, #152]	@ movhi
+	mov	r1, r2
+	lsl	r3, r3, #10
+	str	r3, [r4, #3460]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+.L873:
 	mov	r3, #1
+	ldr	r0, .L878+12
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
+	ldrh	r3, [r4, #154]
 	add	r3, r3, #1
-	uxth	r3, r3
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r2, [r5, #3452]
-	cmn	r2, #1
-	bne	.L903
-	ldr	r1, [r5, #3456]
+	strh	r3, [r4, #154]	@ movhi
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	bne	.L874
 	add	r6, r6, #1
-	ldr	r0, .L915+16
+	ldr	r1, [r4, #3460]
 	uxth	r6, r6
+	ldr	r0, .L878+16
 	bl	sftl_printk
-	ldrh	r3, [r4, #2]
-	cmp	r3, #2
-	ldrhls	r3, [r5, #104]
-	subls	r3, r3, #1
-	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L905
+	bls	.L872
 	mov	r2, r6
-	ldr	r1, [r5, #3456]
-	ldr	r0, .L915+20
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L878+20
 	bl	sftl_printk
-.L906:
-	b	.L906
-.L905:
-	ldr	r3, [r4, #32]
-	cmp	r3, #0
-	beq	.L898
-.L914:
-	b	.L914
-.L903:
-	cmp	r3, #1
-	cmpne	r2, #256
-	beq	.L909
-	ldr	r0, [r4, #36]
-	cmp	r0, #0
-	beq	.L910
-.L909:
-	mov	r3, #0
-	str	r3, [r4, #36]
-	b	.L898
-.L910:
-	ldr	r2, [r5, #3456]
-	ldr	r3, [r4, #24]
-	str	r2, [r3, r8, lsl #2]
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L916:
+.L876:
+	b	.L876
+.L871:
+	ldrh	r2, [r7]
+	ldr	r3, [r4, #3464]
+	ldr	r1, [r6, #4]!
+	mul	r0, r2, r5
+	lsl	r2, r2, #2
+	add	r5, r5, #1
+	add	r0, r3, r0, lsl #2
+	bl	ftl_memcpy
+	b	.L870
+.L877:
+	mov	r7, #1
+	b	.L872
+.L874:
+	cmp	r7, #0
+	beq	.L877
+	mov	r0, #0
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
+.L879:
 	.align	2
-.L915:
+.L878:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+317
-	.word	.LC1
-	.word	.LANCHOR0+3452
 	.word	.LC89
+	.word	-3887
+	.word	.LANCHOR0+3456
 	.word	.LC90
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.word	.LC91
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
-	.global	load_l2p_region
+	.global	allocate_data_superblock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	load_l2p_region, %function
-load_l2p_region:
-	@ args = 0, pretend = 0, frame = 0
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	@ args = 0, pretend = 0, frame = 12
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L924
-	uxth	r6, r0
-	uxth	r8, r1
-	ldrh	r3, [r4, #136]
-	cmp	r3, r6
-	bcs	.L918
-	movw	r2, #485
-	ldr	r1, .L924+4
-	ldr	r0, .L924+8
+	sub	sp, sp, #12
+	mov	r4, r0
+	ldr	r10, .L916
+.L881:
+	ldr	r8, .L916+4
+	ldrh	r1, [r8, #-8]
+	ldrh	r2, [r8]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L882
+	movw	r2, #2661
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
 	bl	sftl_printk
-.L918:
-	ldr	r3, [r4, #3376]
-	mov	r5, #12
-	ldr	r7, [r3, r6, lsl #2]
-	cmp	r7, #0
-	bne	.L919
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	ldrh	r2, [r4, #110]
-	mov	r1, #255
-	add	r3, r3, r5
-	ldr	r0, [r3, #8]
-	bl	ftl_memset
-	ldr	r3, [r4, #2492]
-	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2492]
-	add	r5, r3, r5
-	str	r7, [r5, #4]
-.L920:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L919:
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	mov	r2, #1
-	ldr	r0, .L924+12
-	mov	r1, r2
-	str	r7, [r4, #3456]
-	add	r3, r3, r5
-	ldr	r3, [r3, #8]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	str	r3, [r4, #3464]
-	bl	FlashReadPages
-	ldr	r8, [r4, #3464]
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L921
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L924+16
+.L882:
+	ldr	r2, .L916+16
+	cmp	r4, r2
+	movne	r1, #0
+	bne	.L883
+	ldrh	r2, [r8]
+	ldr	r1, [r10, #3164]
+	mul	r0, r1, r2
+	lsr	r1, r2, #1
+	add	r1, r1, #1
+	add	r1, r1, r0, lsr #2
+	uxth	r1, r1
+	cmp	r1, #0
+	subne	r1, r1, #1
+	uxthne	r1, r1
+.L883:
+	ldr	r0, .L916+20
+	bl	List_pop_index_node
+	ldrh	r2, [r8]
+	mov	r7, r0
+	uxth	r9, r0
+	cmp	r2, #0
+	bne	.L884
+	movw	r2, #2670
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
 	bl	sftl_printk
-	mov	r3, #4
-	ldr	r1, [r4, #3464]
-	mov	r2, r3
-	ldr	r0, .L924+20
-	bl	rknand_print_hex
-	ldrh	r3, [r4, #136]
-	mov	r2, #4
-	ldr	r1, [r4, #3376]
-	ldr	r0, .L924+24
-	bl	rknand_print_hex
-.L922:
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L923
-	mov	r2, #508
-	ldr	r1, .L924+4
-	ldr	r0, .L924+8
+.L884:
+	ldrh	r2, [r8]
+	sub	r2, r2, #1
+	strh	r2, [r8]	@ movhi
+	ldrh	r2, [r10, #40]
+	cmp	r2, r9
+	bls	.L881
+	uxth	r7, r7
+	ldr	r2, [r10, #2324]
+	lsl	r6, r7, #1
+	ldrh	r5, [r2, r6]
+	cmp	r5, #0
+	bne	.L881
+	strh	r9, [r4]	@ movhi
+	mov	r0, r4
+	bl	make_superblock
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L886
+	ldr	r2, [r10, #2324]
+	mvn	r1, #0
+	mov	r0, r7
+	strh	r1, [r2, r6]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r3, .L916+24
+	ldrh	r2, [r8]
+	ldrh	r1, [r3]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L881
+	movw	r2, #2684
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
 	bl	sftl_printk
-.L923:
-	ldr	r3, [r4, #2492]
+	b	.L881
+.L886:
+	ldr	r3, .L916+24
+	ldrh	r2, [r8]
+	ldrh	r1, [r3]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L888
+	movw	r2, #2687
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
+	bl	sftl_printk
+.L888:
+	ldr	r0, [r10, #3272]
+	mov	r1, #20
+	ldrh	lr, [r10, #32]
+	add	ip, r4, #16
+	str	r1, [fp, #-44]
+	mov	r2, r0
+	mla	r3, r1, lr, r0
+	mov	lr, #0
+.L889:
+	cmp	r3, r2
+	bne	.L891
+	cmp	r5, #0
+	bne	.L892
+	movw	r2, #2698
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
+	bl	sftl_printk
+.L892:
+	ldr	r2, .L916+28
+	ldrh	r2, [r2]
+	cmp	r2, r9
+	bne	.L893
+	movw	r2, #2700
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
+	bl	sftl_printk
+.L893:
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	ldr	r1, [r10, #2328]
+	cmp	r2, #0
+	ldrh	r2, [r1, r6]
+	bne	.L894
+	cmp	r2, #0
+	ldrhne	r0, [r10, #92]
+	moveq	r2, #2
+	addne	r2, r2, r0
+	mov	r0, r7
+	strh	r2, [r1, r6]	@ movhi
 	mov	r1, #0
-	add	r2, r3, r5
-	str	r1, [r2, #4]
-	strh	r6, [r3, r5]	@ movhi
-	b	.L920
-.L921:
-	ldr	r3, [r4, #3452]
-	cmp	r3, #256
-	bne	.L922
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L924+28
+	ldr	r2, [r10, #2548]
+	add	r2, r2, #1
+	str	r2, [r10, #2548]
+	bl	ftl_set_blk_mode
+.L897:
+	ldr	r2, [r10, #2328]
+	ldr	r1, [r10, #2564]
+	ldr	ip, [r10, #2548]
+	ldrh	r2, [r2, r6]
+	ldrh	r0, [r10, #92]
+	cmp	r2, r1
+	ldrh	r1, [r10, #40]
+	strhi	r2, [r10, #2564]
+	ldr	r2, [r10, #2552]
+	mla	r0, ip, r0, r2
+	bl	__udivsi3
+	ldr	r1, [r10, #3352]
+	str	r0, [r10, #2556]
+	ldr	r0, [r10, #3272]
+	ldr	r2, [r1, #16]
+	ldr	ip, .L916+32
+	add	r2, r2, #1
+	str	r2, [r1, #16]
+	mov	r1, #20
+	mla	r1, r1, r5, r0
+	add	r2, r0, #4
+	add	r1, r1, #24
+.L899:
+	add	r2, r2, #20
+	cmp	r1, r2
+	bne	.L900
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	mov	r2, r5
+	ldr	r0, [r10, #3272]
+	mov	r8, #0
+	bl	FlashEraseBlocks
+	mov	r1, r8
+	mov	ip, #20
+.L901:
+	uxth	r2, r8
+	cmp	r5, r2
+	bhi	.L903
+	cmp	r1, #0
+	ble	.L904
+	mov	r0, r7
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L904:
+	ldrb	r1, [r4, #7]	@ zero_extendqisi2
+	cmp	r1, #0
+	bne	.L905
+	ldr	r2, [r10, #2324]
+	mvn	r1, #0
+	strh	r1, [r2, r6]	@ movhi
+	b	.L881
+.L891:
+	str	lr, [r2, #8]
+	movw	r8, #65535
+	str	lr, [r2, #12]
+	add	r2, r2, #20
+	ldrh	r1, [ip], #2
+	cmp	r1, r8
+	ldrne	r8, [fp, #-44]
+	lslne	r1, r1, #10
+	mlane	r8, r8, r5, r0
+	addne	r5, r5, #1
+	uxthne	r5, r5
+	strne	r1, [r8, #4]
+	b	.L889
+.L894:
+	add	r2, r2, #1
+	mov	r0, r7
+	strh	r2, [r1, r6]	@ movhi
+	ldr	r2, [r10, #2552]
+	add	r2, r2, #1
+	str	r2, [r10, #2552]
+	bl	ftl_set_blk_mode.part.6
+	b	.L897
+.L900:
+	ldr	r0, [r2, #-20]
+	and	r0, r0, ip
+	str	r0, [r2, #-20]
+	b	.L899
+.L903:
+	mul	r2, ip, r8
+	ldr	lr, [r10, #3272]
+	add	r0, lr, r2
+	ldr	r2, [lr, r2]
+	cmn	r2, #1
+	bne	.L902
+	ldr	r0, [r0, #4]
+	add	r1, r1, #1
+	str	ip, [fp, #-52]
+	str	r2, [fp, #-48]
+	ubfx	r0, r0, #10, #16
+	str	r1, [fp, #-44]
+	bl	FtlBbmMapBadBlock
+	ldr	r2, [fp, #-48]
+	add	r0, r4, r8, lsl #1
+	ldr	ip, [fp, #-52]
+	ldr	r1, [fp, #-44]
+	strh	r2, [r0, #16]	@ movhi
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	sub	r2, r2, #1
+	strb	r2, [r4, #7]
+.L902:
+	add	r8, r8, #1
+	b	.L901
+.L905:
+	ldrh	r2, [r10, #102]
+	strh	r9, [r4]	@ movhi
+	smulbb	r2, r2, r1
+	mov	r1, #0
+	strh	r1, [r4, #2]	@ movhi
+	strb	r1, [r4, #6]
+	ldr	r1, [r10, #2540]
+	uxth	r2, r2
+	ldr	r0, [r10, #2324]
+	strh	r2, [r4, #4]	@ movhi
+	str	r1, [r4, #12]
+	add	r1, r1, #1
+	str	r1, [r10, #2540]
+	ldrh	r1, [r4]
+	lsl	r3, r1, #1
+	strh	r2, [r0, r3]	@ movhi
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	beq	.L906
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L907
+.L906:
+	movw	r2, #2753
+	ldr	r1, .L916+8
+	ldr	r0, .L916+12
 	bl	sftl_printk
-	ldr	r3, [r4, #2492]
-	mov	r1, r6
-	ldr	r0, .L924+32
-	add	r3, r3, r5
-	ldr	r2, [r3, #8]
-	bl	FtlMapWritePage
-	b	.L922
-.L925:
+.L907:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L917:
 	.align	2
-.L924:
+.L916:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+333
+	.word	.LANCHOR0+2344
+	.word	.LANCHOR1+271
 	.word	.LC1
-	.word	.LANCHOR0+3452
-	.word	.LC91
-	.word	.LC92
-	.word	.LC93
-	.word	.LC94
-	.word	.LANCHOR0+3392
-	.size	load_l2p_region, .-load_l2p_region
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2340
+	.word	.LANCHOR0+2336
+	.word	.LANCHOR0+2592
+	.word	-1024
+	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	2
-	.global	ftl_map_blk_gc
+	.global	FtlGcFreeBadSuperBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #8
-	mov	r4, r0
-	ldr	r6, [r0, #12]
-	ldr	r9, [r0, #24]
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r4, #10]
-	ldrh	r2, [r4, #8]
-	ldr	r5, .L942
-	sub	r3, r3, #5
-	cmp	r2, r3
-	blt	.L927
-	uxth	r0, r0
-	lsl	r0, r0, #1
-	ldrh	r8, [r6, r0]
-	cmp	r8, #0
-	beq	.L927
-	ldr	r3, [r4, #32]
+	uxth	r3, r0
+	ldr	r6, .L930
+	str	r3, [fp, #-44]
+	movw	r3, #3210
+	ldrh	r3, [r6, r3]
 	cmp	r3, #0
-	bne	.L927
-	mov	r2, #1
-	str	r2, [r4, #32]
-	strh	r3, [r6, r0]	@ movhi
-	ldrh	r3, [r4, #8]
-	ldrh	r2, [r4, #2]
-	sub	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L928
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L928:
-	mov	r6, #0
-.L929:
-	ldrh	r3, [r4, #6]
-	uxth	r10, r6
-	cmp	r3, r10
-	bhi	.L936
-	mov	r1, #1
-	mov	r0, r8
-	bl	FtlFreeSysBlkQueueIn
-	mov	r3, #0
-	str	r3, [r4, #32]
-.L927:
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L937
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L937:
+	movne	r7, #0
+	ldrne	r10, .L930+4
+	bne	.L920
+.L919:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L936:
-	uxth	r7, r6
-	add	r3, r9, r7, lsl #2
-	str	r3, [fp, #-44]
-	ldr	r3, [r9, r7, lsl #2]
-	cmp	r8, r3, lsr #10
-	bne	.L930
-	ldr	r3, [r5, #3304]
-	ldr	r0, .L942+4
-	str	r3, [r5, #3460]
-	ldr	r3, [r5, #3332]
-	str	r3, [r5, #3464]
-	ldr	r2, [r9, r7, lsl #2]
+.L926:
+	uxtah	r3, r6, r7
+	ldr	r1, [fp, #-44]
+	mov	r8, #0
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r9, r0
+.L921:
+	ldrh	r3, [r10]
+	uxth	r4, r8
+	cmp	r3, r4
+	bhi	.L925
+	add	r7, r7, #1
+.L920:
+	ldrh	r2, [r6, #32]
+	uxth	r3, r7
+	cmp	r2, r3
+	bhi	.L926
+	bl	FtlGcReFreshBadBlk
+	b	.L919
+.L925:
+	uxth	r3, r8
+	ldr	r5, .L930+8
+	lsl	r2, r3, #1
+	ldrh	r2, [r5, r2]
+	cmp	r2, r9
+	bne	.L922
+	mov	r1, r9
+	ldr	r0, .L930+12
 	str	r3, [fp, #-48]
-	str	r2, [r5, #3456]
-	mov	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r3, [fp, #-48]
-	ldrh	r2, [r3, #8]
-	cmp	r2, r10
-	beq	.L931
-	movw	r2, #611
-	ldr	r1, .L942+8
-	ldr	r0, .L942+12
 	bl	sftl_printk
+	mov	r0, r9
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
 	ldr	r3, [fp, #-48]
+	ldrh	r2, [r10]
+	add	r3, r5, r3, lsl #1
+.L923:
+	cmp	r4, r2
+	bcc	.L924
+	sub	r2, r2, #1
+	strh	r2, [r10]	@ movhi
+.L922:
+	add	r8, r8, #1
+	b	.L921
+.L924:
+	ldrh	r1, [r3, #2]!
+	add	r4, r4, #1
+	uxth	r4, r4
+	strh	r1, [r3, #-2]	@ movhi
+	b	.L923
 .L931:
-	ldr	r2, [r5, #3452]
-	cmn	r2, #1
-	bne	.L932
-.L934:
-	ldr	r2, [fp, #-44]
-	mov	r3, #0
-	str	r3, [r2]
+	.align	2
+.L930:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3210
+	.word	.LANCHOR0+3212
+	.word	.LC92
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	update_vpc_list, %function
+update_vpc_list:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r3, .L942
+	uxth	r4, r0
+	ldr	r1, [r3, #2324]
+	lsl	r2, r4, #1
+	mov	r6, r3
+	ldrh	r0, [r1, r2]
+	cmp	r0, #0
+	bne	.L933
+	add	r2, r3, #2592
+	ldrh	r1, [r2]
+	cmp	r1, r4
+	mvneq	r3, #0
+	strheq	r3, [r2]	@ movhi
+	beq	.L935
+	movw	r2, #2348
+	ldrh	r2, [r3, r2]
+	cmp	r2, r4
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
+	movw	r2, #2396
+	ldrh	r2, [r3, r2]
+	cmp	r2, r4
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
+	movw	r2, #2444
+	ldrh	r3, [r3, r2]
+	cmp	r3, r4
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
+.L935:
+	ldr	r5, .L942+4
+	mov	r1, r4
+	ldr	r0, .L942+8
+	bl	List_remove_node
+	ldrh	r3, [r5]
+	cmp	r3, #0
+	bne	.L937
+	movw	r2, #2823
+	ldr	r1, .L942+12
+	ldr	r0, .L942+16
+	bl	sftl_printk
+.L937:
+	ldrh	r3, [r5]
+	mov	r0, r4
+	sub	r3, r3, #1
+	strh	r3, [r5]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r4
+	bl	FtlGcFreeBadSuperBlk
+	movw	r3, #2344
+	ldrh	r2, [r5]
+	ldrh	r3, [r6, r3]
+	add	r3, r3, r2
+	ldrh	r2, [r6, #40]
+	cmp	r3, r2
+	ble	.L941
+	movw	r2, #2826
+	ldr	r1, .L942+12
+	ldr	r0, .L942+16
+	bl	sftl_printk
+.L941:
+	mov	r0, #1
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 .L933:
-	b	.L933
-.L932:
-	ldrh	r2, [r3, #8]
-	cmp	r2, r10
-	bne	.L934
-	ldrh	r2, [r3]
-	ldrh	r3, [r4, #4]
-	cmp	r2, r3
-	bne	.L934
-	ldr	r2, [r5, #3460]
-	mov	r1, r7
 	mov	r0, r4
-	bl	FtlMapWritePage
-.L930:
-	add	r6, r6, #1
-	b	.L929
+	bl	List_update_data_list
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 .L943:
 	.align	2
 .L942:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
-	.word	.LANCHOR1+349
+	.word	.LANCHOR0+2336
+	.word	.LANCHOR0+2320
+	.word	.LANCHOR1+296
 	.word	.LC1
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.size	update_vpc_list, .-update_vpc_list
 	.align	2
-	.global	FtlMapTblRecovery
+	.global	decrement_vpc_count
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	uxth	r6, r0
+	movw	r3, #65535
+	cmp	r6, r3
+	ldr	r4, .L956
+	beq	.L945
+	ldr	r3, [r4, #2324]
+	lsl	r5, r6, #1
+	ldrh	r2, [r3, r5]
+	cmp	r2, #0
+	subne	r2, r2, #1
+	strhne	r2, [r3, r5]	@ movhi
+	bne	.L945
+	mov	r1, r6
+	ldr	r0, .L956+4
+	bl	sftl_printk
+	ldr	r3, [r4, #2324]
+	ldrh	r5, [r3, r5]
+	cmp	r5, #0
+	beq	.L947
+.L954:
+	mov	r5, #0
+.L944:
+	mov	r0, r5
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L947:
+	movw	r2, #2841
+.L955:
+	ldr	r1, .L956+8
+	ldr	r0, .L956+12
+	bl	sftl_printk
+	b	.L944
+.L945:
+	movw	r7, #3442
+	movw	r3, #65535
+	ldrh	r0, [r4, r7]
+	cmp	r0, r3
+	strheq	r6, [r4, r7]	@ movhi
+	beq	.L954
+.L949:
+	cmp	r6, r0
+	beq	.L954
+	bl	update_vpc_list
+	ldr	r2, [r4, #2316]
+	adds	r5, r0, #0
+	ldr	r3, [r4, #2320]
+	movne	r5, #1
+	ldr	r1, [r4, #2324]
+	strh	r6, [r4, r7]	@ movhi
+	sub	r3, r3, r2
+	asr	r3, r3, #3
+	uxth	r2, r3
+	uxth	r3, r3
+	lsl	r2, r2, #1
+	cmp	r3, r6
+	ldrh	r2, [r1, r2]
+	clz	r2, r2
+	lsr	r2, r2, #5
+	moveq	r2, #0
+	cmp	r2, #0
+	beq	.L944
+	movw	r2, #2857
+	b	.L955
+.L957:
+	.align	2
+.L956:
+	.word	.LANCHOR0
+	.word	.LC93
+	.word	.LANCHOR1+312
+	.word	.LC1
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
 	@ args = 0, pretend = 0, frame = 20
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #20
-	mov	r1, #0
-	ldr	r3, [r0, #24]
+	mvn	r3, #0
+	str	r3, [fp, #-36]
+	mov	r6, #0
+	ldr	r3, .L971
+	movw	r1, #61589
 	mov	r4, r0
-	ldr	r6, .L971
-	mov	r7, #0
-	ldr	r8, [r0, #12]
-	str	r3, [fp, #-44]
-	ldr	r3, [r0, #16]
-	mov	r5, r6
-	str	r3, [fp, #-56]
-	ldrh	r3, [r0, #6]
-	str	r3, [fp, #-48]
-	ldrh	r3, [r0, #8]
-	ldr	r0, [fp, #-44]
-	str	r3, [fp, #-52]
-	ldr	r3, [fp, #-48]
-	lsl	r2, r3, #2
-	bl	ftl_memset
-	ldr	r3, [r6, #3300]
-	mvn	r2, #0
-	ldr	r9, [r6, #3332]
-	str	r7, [r4, #32]
-	str	r3, [r6, #3460]
-	str	r9, [r6, #3464]
-	strh	r2, [r4]	@ movhi
-	strh	r2, [r4, #2]	@ movhi
-	mov	r2, #1
-	str	r7, [r4, #28]
-	str	r2, [r4, #36]
-.L945:
-	ldr	r3, [fp, #-52]
-	sxth	r2, r7
-	cmp	r2, r3
-	bge	.L962
-	ldr	r3, [fp, #-52]
-	lsl	r0, r2, #1
-	sub	r1, r3, #1
-	cmp	r2, r1
-	bne	.L946
-	add	r10, r8, r0
-	mov	r1, #1
-	ldrh	r0, [r8, r0]
-	mov	r8, #0
-	str	r2, [fp, #-52]
-	bl	FtlGetLastWrittenPage
-	ldr	r3, [fp, #-56]
-	sxth	r1, r0
-	ldr	r2, [fp, #-52]
-	add	r0, r0, #1
-	ldr	ip, .L971+4
-	strh	r7, [r4]	@ movhi
-	add	r7, r1, #1
-	strh	r0, [r4, #2]	@ movhi
-	ldr	r2, [r3, r2, lsl #2]
-	str	r2, [r4, #28]
-.L947:
-	sxth	r2, r8
-	cmp	r2, r7
-	blt	.L949
-.L962:
-	mov	r0, r4
-	bl	ftl_free_no_use_map_blk
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bne	.L951
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L951:
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L949:
-	ldrh	r1, [r10]
-	mov	r0, ip
-	str	ip, [fp, #-52]
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r6, #3456]
-	mov	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r2, [r6, #3452]
-	ldr	ip, [fp, #-52]
-	cmn	r2, #1
-	beq	.L948
-	ldrh	r2, [r9, #8]
-	ldr	r3, [fp, #-48]
-	cmp	r3, r2
-	bls	.L948
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r9]
-	cmp	r0, r1
-	ldreq	r1, [r6, #3456]
-	ldreq	r3, [fp, #-44]
-	streq	r1, [r3, r2, lsl #2]
-.L948:
-	add	r8, r8, #1
-	b	.L947
-.L946:
-	ldr	r2, [r5, #3300]
-	add	r3, r8, r0
-	str	r3, [fp, #-60]
-	str	r2, [r5, #3460]
-	ldrh	r2, [r5, #104]
-	ldrh	r1, [r8, r0]
-	ldr	r0, .L971+4
-	sub	r2, r2, #1
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3456]
-	mov	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r2, [r5, #3452]
-	cmn	r2, #1
-	beq	.L964
-	ldrh	r1, [r9]
-	ldrh	r2, [r4, #4]
-	cmp	r1, r2
-	bne	.L964
-	ldrh	r1, [r9, #8]
-	movw	r2, #64245
-	cmp	r1, r2
-	beq	.L953
+	ldr	r2, [r3, #3304]
+	mov	r8, r3
+	ldr	r5, [r3, #3336]
+	str	r2, [fp, #-44]
+	mvn	r2, #2
+	str	r5, [fp, #-40]
+	str	r2, [r5, #8]
+	mvn	r2, #1
+	str	r2, [r5, #12]
+	ldrh	r2, [r0]
+	strh	r6, [r5]	@ movhi
+	strh	r2, [r5, #2]	@ movhi
+	ldr	r2, [r3, #3304]
+	str	r1, [r2]
+	ldr	r1, .L971+4
+	ldr	r2, [r3, #3304]
+	str	r1, [r2, #4]
+	ldrh	r2, [r0, #4]
+	tst	r2, #1
+	moveq	r7, #6
+	movne	r7, #7
 .L964:
-	mov	r10, #0
-.L954:
-	ldrh	r1, [r5, #104]
-	sxth	r2, r10
-	cmp	r2, r1
-	bge	.L960
-	ldr	r3, [fp, #-60]
-	ldr	r0, .L971+4
-	ldrh	r1, [r3]
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3456]
-	mov	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r2, [r5, #3452]
-	cmn	r2, #1
-	beq	.L958
-	ldrh	r2, [r9, #8]
-	ldr	r3, [fp, #-48]
-	cmp	r3, r2
-	bls	.L958
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r9]
-	cmp	r0, r1
-	ldreq	r1, [r5, #3456]
-	ldreq	r3, [fp, #-44]
-	streq	r1, [r3, r2, lsl #2]
-.L958:
-	add	r10, r10, #1
-	b	.L954
-.L953:
-	mov	r0, #0
-	mov	lr, #4
-.L955:
-	ldrh	r1, [r5, #104]
-	sxth	r2, r0
-	sub	r1, r1, #1
-	cmp	r2, r1
-	blt	.L957
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L960
+.L961:
+	ldrh	r3, [r4]
+	ldr	r1, [r8, #2324]
+	ldrh	r0, [r4, #4]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	ldrh	r3, [r8, #102]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	sub	sp, fp, #32
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 .L960:
-	add	r7, r7, #1
-	b	.L945
-.L957:
-	ldr	ip, [r5, #3300]
-	add	r0, r0, #1
-	ldr	r3, [fp, #-48]
-	ldr	r1, [ip, r2, lsl #3]
-	uxth	r10, r1
-	cmp	r3, r10
-	addhi	r2, lr, r2, lsl #3
-	ldrhi	r3, [fp, #-44]
-	movhi	r1, r10
-	ldrhi	r2, [ip, r2]
-	strhi	r2, [r3, r1, lsl #2]
-	b	.L955
+	mov	r0, r4
+	bl	get_new_active_ppa
+	cmn	r0, #1
+	str	r0, [fp, #-48]
+	beq	.L961
+	ldr	r3, [r8, #2544]
+	mov	r1, #1
+	sub	r0, fp, #52
+	str	r3, [r5, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, r6
+	str	r3, [r8, #2544]
+	mov	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	subs	r7, r7, #1
+	bne	.L964
+	b	.L961
 .L972:
 	.align	2
 .L971:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.word	305419896
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
-	.global	FtlLoadVonderInfo
+	.global	FtlMakeBbt
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
-	@ args = 0, pretend = 0, frame = 0
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L974
-	ldrh	r2, [r3, #120]
-	add	r0, r3, #3472
-	add	r0, r0, #4
-	strh	r2, [r0, #10]	@ movhi
-	ldr	r2, .L974+4
-	strh	r2, [r0, #4]	@ movhi
-	ldrh	r2, [r3, #144]
-	strh	r2, [r0, #8]	@ movhi
-	ldrh	r2, [r3, #122]
-	strh	r2, [r0, #6]	@ movhi
-	ldr	r2, [r3, #148]
-	str	r2, [r3, #3488]
-	ldr	r2, [r3, #3368]
-	str	r2, [r3, #3492]
-	ldr	r2, [r3, #3364]
-	str	r2, [r3, #3496]
-	ldr	r2, [r3, #3372]
-	str	r2, [r3, #3500]
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	ldmfd	sp, {fp, sp, pc}
-.L975:
-	.align	2
+	sub	sp, sp, #4
+	mov	r7, #0
+	ldr	r8, .L992
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+	sub	r5, r8, #180
+	sub	r9, r8, #18
+	mov	r4, r5
 .L974:
-	.word	.LANCHOR0
-	.word	-3962
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
-	.align	2
-	.global	FtlLoadMapInfo
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	bl	FtlL2PDataInit
-	ldr	r0, .L977
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	ldmfd	sp, {fp, sp, pc}
-.L978:
-	.align	2
-.L977:
-	.word	.LANCHOR0+3392
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
-	.align	2
-	.global	flush_l2p_region
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	flush_l2p_region, %function
-flush_l2p_region:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r5, .L980
-	uxth	r0, r0
-	mov	r4, #12
-	mul	r4, r4, r0
-	ldr	r3, [r5, #2492]
-	add	r0, r5, #3392
-	add	r2, r3, r4
-	ldrh	r1, [r3, r4]
-	ldr	r2, [r2, #8]
-	bl	FtlMapWritePage
-	ldr	r0, [r5, #2492]
-	add	r4, r0, r4
+	ldrh	r3, [r5, #54]
+	cmp	r7, r3
+	bcc	.L980
 	mov	r0, #0
-	ldr	r3, [r4, #4]
-	bic	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	ldmfd	sp, {r4, r5, fp, sp, pc}
 .L981:
-	.align	2
+	ldrh	r2, [r4, #114]
+	uxth	r3, r0
+	add	r5, r0, #1
+	cmp	r2, r3
+	bhi	.L982
+	ldrh	r5, [r4, #164]
+	movw	r6, #65535
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L983:
+	ldrh	r3, [r4, #164]
+	sub	r3, r3, #48
+	cmp	r5, r3
+	ble	.L987
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L984
+	mov	r0, r5
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L985
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+.L984:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L983
 .L980:
-	.word	.LANCHOR0
-	.size	flush_l2p_region, .-flush_l2p_region
+	ldrh	r3, [r9, #2]!
+	movw	r2, #65535
+	ldr	r0, [r5, #3304]
+	ldr	r10, [r5, #3336]
+	cmp	r3, r2
+	str	r0, [r5, #3464]
+	str	r10, [r5, #3468]
+	beq	.L975
+	ldrh	ip, [r5, #98]
+	mov	r2, #1
+	mov	r1, r2
+	ldr	r0, .L992+4
+	mla	ip, r7, ip, r3
+	lsl	r3, ip, #10
+	str	ip, [fp, #-44]
+	str	r3, [r5, #3460]
+	bl	FlashReadPages
+	ldrh	r2, [r5, #98]
+	ldr	r1, [r5, #3464]
+	ldr	r0, [r8]
+	add	r2, r2, #7
+	asr	r2, r2, #3
+	bl	ftl_memcpy
+	ldr	ip, [fp, #-44]
+.L976:
+	uxth	r0, ip
+	add	r7, r7, #1
+	add	r8, r8, #4
+	bl	FtlBbmMapBadBlock
+	b	.L974
+.L975:
+	mov	r1, r7
+	bl	FlashGetBadBlockList
+	ldr	r1, [r8]
+	ldr	r0, [r5, #3464]
+	bl	FtlBbt2Bitmap
+	ldrh	r6, [r5, #98]
+.L978:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L977:
+	ldrh	r0, [r4, #98]
+	smlabb	r0, r0, r7, r6
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L978
+	mov	r1, #16
+	ldr	r0, [r4, #3336]
+	strh	r6, [r9]	@ movhi
+	bl	__memzero
+	mov	r1, #4096
+	ldr	r0, [r4, #3304]
+	bl	__memzero
+	ldr	r3, .L992+8
+	strh	r3, [r10]	@ movhi
+	mov	r3, #0
+	str	r3, [r10, #4]
+	ldrh	r3, [r9]
+	ldrh	ip, [r4, #98]
+	strh	r3, [r10, #2]	@ movhi
+	ldrh	r3, [r9]
+	ldr	r1, [r8]
+	ldr	r0, [r4, #3464]
+	mla	ip, r7, ip, r3
+	lsl	r3, ip, #10
+	str	ip, [fp, #-44]
+	str	r3, [r4, #3460]
+	ldr	r3, .L992+12
+	ldrh	r2, [r3]
+	lsl	r2, r2, #2
+	bl	ftl_memcpy
+	mov	r2, #1
+	ldr	r0, .L992+4
+	mov	r1, r2
+	bl	FlashEraseBlocks
+	mov	r3, #1
+	ldr	r0, .L992+4
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [r4, #3456]
+	ldr	ip, [fp, #-44]
+	cmn	r3, #1
+	bne	.L976
+	uxth	r0, ip
+	bl	FtlBbmMapBadBlock
+	b	.L977
+.L982:
+	uxth	r0, r0
+	bl	FtlBbmMapBadBlock
+	mov	r0, r5
+	b	.L981
+.L985:
+	ldrh	r3, [r4, #152]
+	cmp	r3, r6
+	strheq	r5, [r4, #152]	@ movhi
+	beq	.L984
+.L986:
+	strh	r5, [r4, #156]	@ movhi
+.L987:
+	ldrh	r3, [r4, #152]
+	mov	r5, #0
+	ldr	r0, [r4, #3272]
+	mov	r1, #1
+	str	r5, [r4, #160]
+	mov	r2, #2
+	strh	r5, [r4, #154]	@ movhi
+	lsl	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #156]
+	lsl	r3, r3, #10
+	str	r3, [r0, #24]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, #152]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #156]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #156]
+	strh	r5, [r4, #154]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r4, #160]
+	ldrh	r3, [r4, #152]
+	strh	r2, [r4, #152]	@ movhi
+	strh	r3, [r4, #156]	@ movhi
+	bl	FtlBbmTblFlush
+	mov	r0, r5
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L993:
 	.align	2
-	.global	log2phys
+.L992:
+	.word	.LANCHOR0+180
+	.word	.LANCHOR0+3456
+	.word	-3872
+	.word	.LANCHOR0+3392
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.global	ftl_memcmp
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	log2phys, %function
-log2phys:
-	@ args = 0, pretend = 0, frame = 8
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #8
-	mov	r6, r0
-	ldr	r4, .L995
-	mov	r7, r1
-	mov	r10, r2
-	ldr	r3, [r4, #2504]
-	ldrh	r5, [r4, #108]
-	cmp	r0, r3
-	bcc	.L983
-	movw	r2, #811
-	ldr	r1, .L995+4
-	ldr	r0, .L995+8
-	bl	sftl_printk
-.L983:
-	ldr	r3, [r4, #2504]
-	cmp	r6, r3
-	bcs	.L984
-	add	r5, r5, #7
-	ldrh	r0, [r4, #138]
-	lsr	r3, r6, r5
-	ldr	ip, [r4, #2492]
-	mov	r1, #0
-	str	r3, [fp, #-44]
-	mov	r2, #12
-	ldrh	r9, [fp, #-44]
-.L985:
-	uxth	r8, r1
-	cmp	r8, r0
-	bcc	.L990
-	str	r2, [fp, #-48]
-	bl	select_l2p_ram_region
-	ldr	r2, [fp, #-48]
-	mov	r8, r0
-	ldr	r1, [r4, #2492]
-	mul	r2, r2, r0
-	add	ip, r1, r2
-	ldrh	r1, [r1, r2]
-	movw	r2, #65535
-	cmp	r1, r2
-	beq	.L991
-	ldr	r2, [ip, #4]
-	cmp	r2, #0
-	bge	.L991
-	bl	flush_l2p_region
-.L991:
-	mov	r1, r8
-	ldrh	r0, [fp, #-44]
-	bl	load_l2p_region
-	b	.L987
-.L984:
-	cmp	r10, #0
-	mvn	r0, #0
-	streq	r0, [r7]
-.L982:
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L990:
-	add	r1, r1, #1
-	mla	lr, r2, r1, ip
-	ldrh	lr, [lr, #-12]
-	cmp	lr, r9
-	bne	.L985
-.L987:
-	mvn	r2, #0
-	cmp	r10, #0
-	bic	r5, r6, r2, lsl r5
-	mov	r2, #12
-	uxth	r5, r5
-	bne	.L988
-	ldr	r1, [r4, #2492]
-	mla	r2, r2, r8, r1
-	ldr	r2, [r2, #8]
-	ldr	r2, [r2, r5, lsl #2]
-	str	r2, [r7]
-.L989:
-	ldr	r1, [r4, #2492]
-	mov	r2, #12
-	mov	r0, #0
-	mla	r3, r2, r8, r1
-	ldr	r2, [r3, #4]
-	cmn	r2, #1
-	addne	r2, r2, #1
-	strne	r2, [r3, #4]
-	b	.L982
-.L988:
-	mul	r2, r2, r8
-	ldr	r1, [r4, #2492]
-	ldr	r0, [r7]
-	add	r1, r1, r2
-	ldr	r1, [r1, #8]
-	str	r0, [r1, r5, lsl #2]
-	ldr	r1, [r4, #2492]
-	add	r2, r1, r2
-	ldr	r1, [r2, #4]
-	orr	r1, r1, #-2147483648
-	str	r1, [r2, #4]
-	ldr	r2, .L995+12
-	strh	r9, [r2]	@ movhi
-	b	.L989
+	bl	memcmp
+	ldmfd	sp, {fp, sp, pc}
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	2
+	.global	js_hash
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	js_hash, %function
+js_hash:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r3, .L998
+	add	r1, r0, r1
 .L996:
+	cmp	r0, r1
+	bne	.L997
+	mov	r0, r3
+	ldmfd	sp, {fp, sp, pc}
+.L997:
+	lsr	r2, r3, #2
+	ldrb	ip, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsl #5
+	add	r2, r2, ip
+	eor	r3, r3, r2
+	b	.L996
+.L999:
 	.align	2
-.L995:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+364
-	.word	.LC1
-	.word	.LANCHOR0+2496
-	.size	log2phys, .-log2phys
+.L998:
+	.word	1204201446
+	.size	js_hash, .-js_hash
 	.align	2
-	.global	FtlReUsePrevPpa
+	.global	Ftl_write_map_blk_to_last_page
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
-	@ args = 0, pretend = 0, frame = 4
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mov	r6, r0
-	ldr	r7, .L1007
-	ubfx	r0, r1, #10, #16
-	str	r1, [fp, #-32]
-	bl	P2V_block_in_plane
-	ldr	r2, [r7, #2324]
-	lsl	r5, r0, #1
-	ldrh	r3, [r2, r5]
+	ldrh	r3, [r0]
+	movw	r2, #65535
+	mov	r4, r0
+	ldr	r5, [r0, #12]
+	cmp	r3, r2
+	bne	.L1001
+	ldrh	r3, [r0, #8]
 	cmp	r3, #0
-	bne	.L998
-	ldr	r4, [r7, #2340]
-	cmp	r4, #0
-	beq	.L999
-	movw	r2, #2344
-	movw	lr, #65535
-	ldrh	ip, [r7, r2]
-	ldr	r2, [r7, #2316]
-	sub	r4, r4, r2
-	ubfx	r4, r4, #3, #16
-.L1000:
-	uxth	r1, r3
-	cmp	ip, r1
-	bls	.L999
-	cmp	r4, r0
-	bne	.L1001
-	mov	r1, r4
-	ldr	r0, .L1007+4
-	bl	List_remove_node
-	movw	r3, #2344
-	ldrh	r3, [r7, r3]
-	cmp	r3, #0
-	bne	.L1002
-	movw	r2, #1699
-	ldr	r1, .L1007+8
-	ldr	r0, .L1007+12
+	beq	.L1002
+	movw	r2, #641
+	ldr	r1, .L1010
+	ldr	r0, .L1010+4
 	bl	sftl_printk
 .L1002:
-	movw	r2, #2344
-	mov	r0, r4
-	ldrh	r3, [r7, r2]
-	sub	r3, r3, #1
-	strh	r3, [r7, r2]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r7, #2324]
-	ldrh	r3, [r2, r5]
-.L998:
+	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
-	strh	r3, [r2, r5]	@ movhi
-	b	.L999
-.L1001:
-	lsl	r4, r4, #3
+	strh	r3, [r4, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	mov	r3, #0
+	strh	r0, [r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r4, #28]
 	add	r3, r3, #1
-	ldrh	r4, [r2, r4]
-	cmp	r4, lr
-	bne	.L1000
-.L999:
+	str	r3, [r4, #28]
+.L1003:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1001:
+	lsl	r3, r3, #1
+	ldr	r7, [r0, #24]
+	mov	r1, #255
+	ldrh	r8, [r5, r3]
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L1010+8
+	orr	r3, r3, r8, lsl #10
+	ldr	r6, [r5, #3336]
+	str	r3, [r5, #3460]
+	ldr	r3, [r5, #3304]
+	str	r6, [r5, #3468]
+	str	r3, [r5, #3464]
+	ldr	r3, [r0, #28]
+	str	r3, [r6, #4]
+	ldr	r3, .L1010+12
+	strh	r3, [r6, #8]	@ movhi
+	ldrh	r3, [r0, #4]
+	strh	r8, [r6, #2]	@ movhi
+	strh	r3, [r6]	@ movhi
+	ldrh	r2, [r5, #104]
+	ldr	r0, [r5, #3304]
+	lsl	r2, r2, #3
+	bl	ftl_memset
+	mov	r2, #0
+	mov	r3, r2
+.L1004:
+	ldrh	r0, [r4, #6]
+	uxth	r1, r2
+	cmp	r0, r1
+	bhi	.L1006
+	ldrh	r1, [r5, #110]
+	ldr	r0, [r5, #3464]
+	bl	js_hash
 	mov	r2, #1
-	sub	r1, fp, #32
-	mov	r0, r6
-	bl	log2phys
-	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1008:
+	str	r0, [r6, #12]
+	mov	r3, #0
+	mov	r1, r2
+	ldr	r0, .L1010+16
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	add	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+	b	.L1003
+.L1006:
+	uxth	r1, r2
+	ldr	r0, [r7, r1, lsl #2]
+	cmp	r8, r0, lsr #10
+	bne	.L1005
+	ldr	r0, [r5, #3304]
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r1, [r0, r3, lsl #3]
+	ldr	r0, [r7, r1, lsl #2]
+	ldr	r1, [r5, #3304]
+	add	r1, r1, r3, lsl #3
+	str	r0, [r1, #4]
+.L1005:
+	add	r2, r2, #1
+	b	.L1004
+.L1011:
 	.align	2
-.L1007:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2340
-	.word	.LANCHOR1+373
+.L1010:
+	.word	.LANCHOR1+332
 	.word	.LC1
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.word	.LANCHOR0
+	.word	-1291
+	.word	.LANCHOR0+3456
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
-	.global	ftl_check_vpc
+	.global	FtlMapWritePage
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
 	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #4
-	mov	r4, #0
-	ldr	r6, .L1033
-	ldr	r1, .L1033+4
-	ldr	r0, .L1033+8
-	mov	r5, r6
-	bl	sftl_printk
-	mov	r1, #8192
-	ldr	r0, .L1033+12
-	bl	__memzero
-.L1010:
-	ldr	r3, [r6, #2504]
-	cmp	r4, r3
-	bcc	.L1012
-	ldr	r8, .L1033+12
-	mov	r4, #0
-	ldr	r9, .L1033+16
-	mov	r6, r4
+	mov	r6, #0
+	ldr	r7, .L1030
+	mov	r4, r0
+	mov	r8, r1
+	mov	r9, r2
+	mov	r5, r7
 .L1013:
-	ldrh	r2, [r5, #40]
-	uxth	r3, r4
+	ldr	r3, [r7, #2524]
+	add	r3, r3, #1
+	str	r3, [r7, #2524]
+	ldrh	r3, [r7, #104]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
 	cmp	r2, r3
-	bhi	.L1015
-	ldr	r4, [r5, #2340]
-	cmp	r4, #0
-	beq	.L1016
-	movw	r3, #2344
-	ldr	r9, .L1033+12
-	ldrh	r8, [r5, r3]
-	mov	r7, #0
-	ldr	r3, [r5, #2316]
-	ldr	r10, .L1033+20
-	sub	r4, r4, r3
-	ubfx	r4, r4, #3, #16
-.L1017:
-	uxth	r3, r7
-	cmp	r8, r3
-	bls	.L1016
-	ldr	r2, [r5, #2324]
-	lsl	r3, r4, #1
-	ldrh	r2, [r2, r3]
-	cmp	r2, #0
-	beq	.L1018
-	mov	r6, #1
-	ldrh	r3, [r9, r3]
-	mov	r1, r4
-	mov	r0, r10
-	bl	sftl_printk
-.L1018:
-	ldr	r3, [r5, #2316]
-	lsl	r4, r4, #3
-	add	r7, r7, #1
-	ldrh	r4, [r3, r4]
+	bge	.L1014
+	ldrh	r2, [r4]
 	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L1017
-.L1016:
-	cmp	r6, #0
-	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-	movw	r2, #2343
-	ldr	r1, .L1033+4
-	ldr	r0, .L1033+24
-	bl	sftl_printk
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1012:
-	mov	r2, #0
-	sub	r1, fp, #44
+	cmp	r2, r3
+	bne	.L1015
+.L1014:
 	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [fp, #-44]
-	cmn	r0, #1
-	beq	.L1011
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r2, .L1033+12
-	lsl	r0, r0, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-.L1011:
-	add	r4, r4, #1
-	b	.L1010
+	bl	Ftl_write_map_blk_to_last_page
 .L1015:
-	uxth	r1, r4
-	ldr	r3, [r5, #2324]
-	lsl	r7, r1, #1
-	ldrh	r2, [r3, r7]
-	ldrh	r3, [r8, r7]
-	cmp	r2, r3
-	beq	.L1014
-	mov	r0, r9
+	ldrh	r3, [r4]
+	ldr	r2, [r4, #12]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	bne	.L1016
+	mov	r2, #700
+	ldr	r1, .L1030+4
+	ldr	r0, .L1030+8
 	bl	sftl_printk
-	ldr	r3, [r5, #2324]
-	movw	r2, #65535
-	ldrh	r3, [r3, r7]
-	cmp	r3, r2
-	beq	.L1014
-	ldrh	r2, [r8, r7]
+.L1016:
+	ldrh	r2, [r4]
+	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	movhi	r6, #1
-.L1014:
-	add	r4, r4, #1
+	bcc	.L1017
+	movw	r2, #701
+	ldr	r1, .L1030+4
+	ldr	r0, .L1030+8
+	bl	sftl_printk
+.L1017:
+	ldrh	r3, [r4]
+	mov	r1, #16
+	ldr	r2, [r4, #12]
+	ldr	r0, [r5, #3336]
+	lsl	r3, r3, #1
+	ldrh	r2, [r2, r3]
+	ldrh	r3, [r4, #2]
+	str	r0, [r5, #3468]
+	str	r2, [fp, #-44]
+	str	r9, [r5, #3464]
+	orr	r3, r3, r2, lsl #10
+	str	r3, [r5, #3460]
+	bl	__memzero
+	ldr	r3, [r4, #28]
+	ldr	r10, [r5, #3468]
+	ldr	r2, [fp, #-44]
+	str	r3, [r10, #4]
+	strh	r8, [r10, #8]	@ movhi
+	ldrh	r3, [r4, #4]
+	strh	r2, [r10, #2]	@ movhi
+	strh	r3, [r10]	@ movhi
+	ldrh	r1, [r5, #110]
+	ldr	r0, [r5, #3464]
+	bl	js_hash
+	mov	r3, #1
+	str	r0, [r10, #12]
+	mov	r2, r3
+	mov	r1, r3
+	ldr	r0, .L1030+12
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #3456]
+	cmn	r2, #1
+	bne	.L1018
+	ldr	r1, [r5, #3460]
+	add	r6, r6, #1
+	ldr	r0, .L1030+16
+	uxth	r6, r6
+	bl	sftl_printk
+	ldrh	r3, [r4, #2]
+	cmp	r3, #2
+	ldrhls	r3, [r5, #104]
+	subls	r3, r3, #1
+	strhls	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1020
+	mov	r2, r6
+	ldr	r1, [r5, #3460]
+	ldr	r0, .L1030+20
+	bl	sftl_printk
+.L1021:
+	b	.L1021
+.L1020:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1013
+.L1029:
+	b	.L1029
+.L1018:
+	cmp	r3, #1
+	cmpne	r2, #256
+	beq	.L1024
+	ldr	r0, [r4, #36]
+	cmp	r0, #0
+	beq	.L1025
+.L1024:
+	mov	r3, #0
+	str	r3, [r4, #36]
 	b	.L1013
-.L1034:
+.L1025:
+	ldr	r2, [r5, #3460]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r8, lsl #2]
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1031:
 	.align	2
-.L1033:
+.L1030:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+389
-	.word	.LC95
-	.word	check_vpc_table
-	.word	.LC96
-	.word	.LC97
+	.word	.LANCHOR1+363
 	.word	.LC1
-	.size	ftl_check_vpc, .-ftl_check_vpc
+	.word	.LANCHOR0+3456
+	.word	.LC94
+	.word	.LC95
+	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
-	.global	ftl_scan_all_data
+	.global	load_l2p_region
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	@ args = 0, pretend = 0, frame = 4
+	.type	load_l2p_region, %function
+load_l2p_region:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #24
-	mov	r5, #0
-	ldr	r6, .L1043
-	mov	r1, #0
-	ldr	r0, .L1043+4
+	ldr	r4, .L1039
+	uxth	r6, r0
+	uxth	r8, r1
+	ldrh	r3, [r4, #136]
+	cmp	r3, r6
+	bcs	.L1033
+	movw	r2, #485
+	ldr	r1, .L1039+4
+	ldr	r0, .L1039+8
 	bl	sftl_printk
-	mov	r4, r6
+.L1033:
+	ldr	r3, [r4, #3380]
+	mov	r5, #12
+	ldr	r7, [r3, r6, lsl #2]
+	cmp	r7, #0
+	bne	.L1034
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	ldrh	r2, [r4, #110]
+	mov	r1, #255
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
+	bl	ftl_memset
+	ldr	r3, [r4, #2492]
+	strh	r6, [r3, r5]	@ movhi
+	ldr	r3, [r4, #2492]
+	add	r5, r3, r5
+	str	r7, [r5, #4]
+.L1035:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1034:
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	mov	r2, #1
+	ldr	r0, .L1039+12
+	mov	r1, r2
+	str	r7, [r4, #3460]
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r3, [r4, #3468]
+	bl	FlashReadPages
+	ldr	r8, [r4, #3468]
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L1036
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L1039+16
+	bl	sftl_printk
+	mov	r3, #4
+	ldr	r1, [r4, #3468]
+	mov	r2, r3
+	ldr	r0, .L1039+20
+	bl	rknand_print_hex
+	ldrh	r3, [r4, #136]
+	mov	r2, #4
+	ldr	r1, [r4, #3380]
+	ldr	r0, .L1039+24
+	bl	rknand_print_hex
+.L1037:
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L1038
+	mov	r2, #508
+	ldr	r1, .L1039+4
+	ldr	r0, .L1039+8
+	bl	sftl_printk
+.L1038:
+	ldr	r3, [r4, #2492]
+	mov	r1, #0
+	add	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L1035
 .L1036:
-	ldr	r3, [r6, #2504]
-	cmp	r5, r3
-	bcc	.L1042
-	sub	sp, fp, #28
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1042:
-	mov	r2, #0
-	sub	r1, fp, #32
-	mov	r0, r5
-	bl	log2phys
-	ubfx	r3, r5, #0, #11
-	cmp	r3, #0
+	ldr	r3, [r4, #3456]
+	cmp	r3, #256
 	bne	.L1037
-	ldr	r2, [fp, #-32]
-	mov	r1, r5
-	ldr	r0, .L1043+8
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L1039+28
 	bl	sftl_printk
-.L1037:
-	ldr	r3, [fp, #-32]
-	cmn	r3, #1
-	beq	.L1039
-	str	r3, [r4, #3456]
-	mov	r2, #0
-	ldr	r3, [r4, #3300]
-	mov	r1, #1
-	ldr	r7, [r4, #3332]
-	ldr	r0, .L1043+12
-	str	r3, [r4, #3460]
-	str	r5, [r4, #3468]
-	str	r7, [r4, #3464]
-	str	r2, [r4, #3452]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
-	cmn	r3, #1
-	cmpne	r3, #256
-	beq	.L1040
-	ldr	r3, [r7, #8]
-	cmp	r5, r3
-	beq	.L1039
-.L1040:
-	ldr	r2, [r4, #3460]
-	ldr	r3, [r4, #3464]
-	ldr	r0, .L1043+16
-	ldr	r1, [r2, #4]
-	str	r1, [sp, #16]
-	mov	r1, r5
-	ldr	r2, [r2]
-	str	r2, [sp, #12]
-	ldr	r2, [r3, #12]
-	str	r2, [sp, #8]
+	ldr	r3, [r4, #2492]
+	mov	r1, r6
+	ldr	r0, .L1039+32
+	add	r3, r3, r5
 	ldr	r2, [r3, #8]
-	str	r2, [sp, #4]
-	ldr	r2, [r3, #4]
-	str	r2, [sp]
-	ldr	r3, [r3]
-	ldr	r2, [r4, #3456]
-	bl	sftl_printk
-.L1039:
-	add	r5, r5, #1
-	b	.L1036
-.L1044:
+	bl	FtlMapWritePage
+	b	.L1037
+.L1040:
 	.align	2
-.L1043:
+.L1039:
 	.word	.LANCHOR0
+	.word	.LANCHOR1+379
+	.word	.LC1
+	.word	.LANCHOR0+3456
+	.word	.LC96
+	.word	.LC97
 	.word	.LC98
 	.word	.LC99
-	.word	.LANCHOR0+3452
-	.word	.LC100
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.word	.LANCHOR0+3396
+	.size	load_l2p_region, .-load_l2p_region
 	.align	2
-	.global	FtlGcScanTempBlk
+	.global	ftl_map_blk_gc
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
-	@ args = 0, pretend = 0, frame = 44
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #44
-	mov	r5, r0
-	ldr	r3, .L1075
-	str	r1, [fp, #-68]
-	ldrh	r6, [r3, #4]
-	movw	r3, #65535
-	cmp	r6, r3
-	beq	.L1070
-	cmp	r6, #0
-	bne	.L1046
-.L1047:
-	bl	FtlGcPageVarInit
-	b	.L1048
-.L1070:
+	sub	sp, sp, #8
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r9, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	ldr	r5, .L1057
+	sub	r3, r3, #5
+	cmp	r2, r3
+	blt	.L1042
+	uxth	r0, r0
+	lsl	r0, r0, #1
+	ldrh	r8, [r6, r0]
+	cmp	r8, #0
+	beq	.L1042
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L1042
+	mov	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r6, r0]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L1043
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1043:
 	mov	r6, #0
-.L1046:
-	ldr	r3, .L1075+4
-	ldr	r2, [fp, #-68]
-	ldrh	r3, [r3, #102]
-	cmp	r3, r2
-	beq	.L1047
-.L1048:
-	ldr	r4, .L1075+4
-	mov	r9, #0
-.L1049:
-	ldrh	r2, [r5]
+.L1044:
+	ldrh	r3, [r4, #6]
+	uxth	r10, r6
+	cmp	r3, r10
+	bhi	.L1051
+	mov	r1, #1
+	mov	r0, r8
+	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
-	strb	r3, [r5, #8]
-	movw	r3, #65535
+	str	r3, [r4, #32]
+.L1042:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	beq	.L1050
-.L1067:
-	ldrh	r3, [r4, #32]
-	mov	r2, #0
-	ldr	r0, [r4, #3288]
-	add	ip, r5, #16
-	ldrh	lr, [r4, #112]
-	mov	r10, r2
-	str	r3, [fp, #-72]
-	movw	r7, #65535
-	ldr	r3, [r4, #3172]
-	str	r3, [fp, #-76]
-	ldrh	r3, [r4, #110]
-	str	r3, [fp, #-80]
-	ldr	r3, [r4, #3176]
-	str	r3, [fp, #-84]
+	bcc	.L1052
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1052:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 .L1051:
-	ldr	r1, [fp, #-72]
-	uxth	r3, r2
-	cmp	r1, r3
-	bhi	.L1053
-	mov	r8, #0
-	mov	r2, #0
-	mov	r1, r10
+	uxth	r7, r6
+	add	r3, r9, r7, lsl #2
+	str	r3, [fp, #-44]
+	ldr	r3, [r9, r7, lsl #2]
+	cmp	r8, r3, lsr #10
+	bne	.L1045
+	ldr	r3, [r5, #3308]
+	ldr	r0, .L1057+4
+	str	r3, [r5, #3464]
+	ldr	r3, [r5, #3336]
+	str	r3, [r5, #3468]
+	ldr	r2, [r9, r7, lsl #2]
+	str	r3, [fp, #-48]
+	str	r2, [r5, #3460]
+	mov	r2, #1
+	mov	r1, r2
 	bl	FlashReadPages
-.L1054:
-	uxth	r3, r8
-	cmp	r10, r3
-	bhi	.L1065
-	ldr	r3, [fp, #-68]
-	add	r9, r9, #1
-	add	r6, r6, #1
-	uxth	r6, r6
-	cmp	r3, r9
-	bls	.L1066
-.L1068:
-	ldrh	r3, [r4, #102]
-	cmp	r3, r6
-	bhi	.L1067
-.L1050:
-	ldr	r3, .L1075
-	mvn	r2, #0
-	strh	r6, [r5, #2]	@ movhi
-	mov	r1, r6
-	mov	r0, r5
-	strh	r2, [r3, #4]	@ movhi
-	mov	r2, #0
-	strb	r2, [r5, #6]
-	bl	ftl_sb_update_avl_pages
-	b	.L1069
-.L1053:
-	ldrh	r3, [ip], #2
-	cmp	r3, r7
-	beq	.L1052
-	mov	r1, #20
-	orr	r3, r6, r3, lsl #10
-	mla	r1, r1, r10, r0
-	str	r3, [r1, #4]
-	ldr	r3, [fp, #-80]
-	mul	r3, r3, r10
-	add	r8, r3, #3
-	cmp	r3, #0
-	movlt	r3, r8
-	ldr	r8, [fp, #-76]
-	bic	r3, r3, #3
-	add	r3, r8, r3
-	str	r3, [r1, #8]
-	mul	r3, lr, r10
-	add	r10, r10, #1
-	uxth	r10, r10
-	add	r8, r3, #3
-	cmp	r3, #0
-	movlt	r3, r8
-	ldr	r8, [fp, #-84]
-	bic	r3, r3, #3
-	add	r3, r8, r3
-	str	r3, [r1, #12]
-.L1052:
-	add	r2, r2, #1
-	b	.L1051
-.L1065:
-	mov	r3, #20
-	ldr	r2, [r4, #3288]
-	mul	ip, r3, r8
-	ldr	r7, [r2, ip]
-	add	r3, r2, ip
-	ldr	r1, [r3, #4]
-	cmp	r7, #0
-	str	r1, [fp, #-72]
-	bne	.L1055
-	ldr	r3, [r3, #12]
-	movw	r2, #65535
-	ldrh	r1, [r3]
-	cmp	r1, r2
-	bne	.L1056
-.L1055:
-	ldrh	r3, [r5]
-	mov	r1, #0
-	ldr	r2, [r4, #2324]
-	mov	r6, #0
-	lsl	r3, r3, #1
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r0, [r5]
-	bl	INSERT_FREE_LIST
-	mvn	r3, #0
-	strh	r3, [r5]	@ movhi
-	bl	FtlGcPageVarInit
-	b	.L1049
-.L1056:
-	ldr	r0, [r3, #8]
-	ldr	r2, [r4, #2504]
-	str	ip, [fp, #-80]
-	str	r3, [fp, #-76]
-	cmp	r0, r2
-	bhi	.L1055
-	mov	r2, r7
-	sub	r1, fp, #64
-	bl	log2phys
-	ldr	r3, [fp, #-76]
-	ldr	r1, [fp, #-64]
-	ldr	ip, [fp, #-80]
-	ldr	r2, [r3, #12]
-	cmn	r1, #1
-	sub	r0, r2, r1
-	clz	r0, r0
-	lsr	r0, r0, #5
-	moveq	r0, #0
-	cmp	r0, #0
-	bne	.L1059
-.L1063:
-	ldr	r2, [r3, #8]
-	add	r8, r8, #1
-	ldr	r1, [fp, #-72]
-	ldr	r0, [r3, #12]
-	bl	FtlGcUpdatePage
-	b	.L1054
-.L1059:
-	str	r2, [fp, #-56]
-	mov	r1, #1
-	ldr	r2, [r4, #3316]
-	sub	r0, fp, #60
-	str	ip, [fp, #-80]
-	str	r3, [fp, #-76]
-	str	r2, [fp, #-52]
-	ldr	r2, [r4, #3336]
-	str	r2, [fp, #-48]
-	mov	r2, r7
-	bl	FlashReadPages
-	ldrh	r1, [r4, #58]
-	ldr	r2, [r4, #3288]
-	ldr	ip, [fp, #-80]
-	ldr	r0, [fp, #-52]
-	ldr	r3, [fp, #-76]
-	lsl	r1, r1, #7
-	add	ip, r2, ip
-	mov	r2, r7
-.L1060:
-	cmp	r2, r1
-	beq	.L1063
-	ldr	lr, [ip, #8]
-	ldr	r7, [lr, r2, lsl #2]
-	ldr	lr, [r0, r2, lsl #2]
-	cmp	r7, lr
-	beq	.L1061
-	ldr	r2, [fp, #-56]
-	ldrh	r1, [r5]
-	ldr	r0, .L1075+8
+	ldr	r3, [fp, #-48]
+	ldrh	r2, [r3, #8]
+	cmp	r2, r10
+	beq	.L1046
+	movw	r2, #611
+	ldr	r1, .L1057+8
+	ldr	r0, .L1057+12
 	bl	sftl_printk
-	b	.L1055
-.L1061:
-	add	r2, r2, #1
-	b	.L1060
-.L1066:
-	ldr	r2, .L1075
-	movw	r1, #65535
-	ldrh	r3, [r2, #4]
-	cmp	r3, r1
-	beq	.L1068
-	add	r3, r3, r9
-	strh	r3, [r2, #4]	@ movhi
-	ldrh	r3, [r4, #102]
-	cmp	r3, r6
-	bls	.L1068
-.L1069:
-	mvn	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1076:
+	ldr	r3, [fp, #-48]
+.L1046:
+	ldr	r2, [r5, #3456]
+	cmn	r2, #1
+	bne	.L1047
+.L1049:
+	ldr	r2, [fp, #-44]
+	mov	r3, #0
+	str	r3, [r2]
+.L1048:
+	b	.L1048
+.L1047:
+	ldrh	r2, [r3, #8]
+	cmp	r2, r10
+	bne	.L1049
+	ldrh	r2, [r3]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L1049
+	ldr	r2, [r5, #3464]
+	mov	r1, r7
+	mov	r0, r4
+	bl	FtlMapWritePage
+.L1045:
+	add	r6, r6, #1
+	b	.L1044
+.L1058:
 	.align	2
-.L1075:
-	.word	.LANCHOR2
+.L1057:
 	.word	.LANCHOR0
-	.word	.LC101
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+395
+	.word	.LC1
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
-	.global	FtlReadRefresh
+	.global	flush_l2p_region
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
-	@ args = 0, pretend = 0, frame = 88
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #88
-	ldr	r3, .L1090
-	ldr	r0, [r3, #2716]
-	mov	r4, r3
-	cmp	r0, #0
-	beq	.L1078
-	ldr	r1, [r3, #2720]
-	ldr	r2, [r3, #2504]
-	cmp	r1, r2
-	bcs	.L1079
-	mov	r5, #2048
-.L1084:
-	ldr	r0, [r4, #2720]
-	ldr	r3, [r4, #2504]
-	cmp	r0, r3
-	bcs	.L1081
-	mov	r2, #0
-	sub	r1, fp, #108
-	bl	log2phys
-	ldr	r2, [fp, #-108]
-	ldr	r3, [r4, #2720]
-	cmn	r2, #1
-	add	r3, r3, #1
-	str	r3, [r4, #2720]
-	beq	.L1082
-	str	r3, [fp, #-88]
-	sub	r0, fp, #20
-	ldr	r3, [r4, #3324]
-	mov	r1, #1
-	str	r2, [fp, #-100]
-	mov	r2, #0
-	str	r2, [r0, #-84]!
-	str	r3, [fp, #-96]
-	sub	r3, fp, #84
-	str	r3, [fp, #-92]
-	bl	FlashReadPages
-	ldr	r3, [fp, #-104]
-	cmp	r3, #256
-	bne	.L1081
-	ldr	r0, [fp, #-108]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L1081:
-	mvn	r0, #0
-.L1077:
-	sub	sp, fp, #20
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1082:
-	subs	r5, r5, #1
-	bne	.L1084
-	b	.L1081
-.L1079:
-	ldr	r2, [r3, #2508]
-	mov	r0, #0
-	str	r0, [r3, #2716]
-	str	r0, [r3, #2720]
-	str	r2, [r3, #2712]
-	b	.L1077
-.L1078:
-	ldr	r1, [r3, #2508]
-	ldr	r2, [r3, #2712]
-	add	ip, r1, #1048576
-	cmp	r2, ip
-	bhi	.L1087
-	ldr	r3, [r3, #2564]
-	mov	ip, #33554432
-	lsr	r3, r3, #10
-	add	r2, r2, ip, asr r3
-	cmp	r1, r2
-	bhi	.L1087
-	ldr	r3, .L1090+4
-	ldrb	r3, [r3, #28]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1077
-.L1087:
-	mov	r3, #1
+	ldr	r5, .L1060
+	uxth	r0, r0
+	mov	r4, #12
+	mul	r4, r4, r0
+	ldr	r3, [r5, #2492]
+	add	r0, r5, #3392
+	add	r0, r0, #4
+	add	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r0, [r5, #2492]
+	add	r4, r0, r4
 	mov	r0, #0
-	str	r3, [r4, #2716]
-	str	r0, [r4, #2720]
-	str	r1, [r4, #2712]
-	b	.L1077
-.L1091:
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1061:
 	.align	2
-.L1090:
+.L1060:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2268
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
-	.global	FtlMapBlkWriteDump_data
+	.global	log2phys
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
-	@ args = 0, pretend = 0, frame = 0
+	.type	log2phys, %function
+log2phys:
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, [r0, #36]
+	sub	sp, sp, #8
 	mov	r6, r0
-	cmp	r3, #0
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-	mov	r3, #0
-	ldrh	r5, [r0, #6]
-	str	r3, [r0, #36]
-	ldr	r3, .L1099
-	ldr	r2, [r0, #24]
-	sub	r5, r5, #1
-	uxth	r5, r5
-	ldr	r0, [r3, #3304]
-	mov	r4, r3
-	ldr	r1, [r3, #3332]
-	str	r0, [r3, #3460]
-	str	r1, [r3, #3464]
-	ldr	r2, [r2, r5, lsl #2]
-	cmp	r2, #0
-	str	r2, [r3, #3456]
-	beq	.L1094
-	mov	r2, #1
-	ldr	r0, .L1099+4
-	mov	r1, r2
-	bl	FlashReadPages
-.L1095:
-	ldr	r2, [r4, #3460]
-	mov	r1, r5
-	mov	r0, r6
-	bl	FtlMapWritePage
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1094:
-	ldrh	r2, [r3, #110]
-	mov	r1, #255
-	bl	ftl_memset
-	b	.L1095
-.L1100:
+	ldr	r4, .L1075
+	mov	r7, r1
+	mov	r10, r2
+	ldr	r3, [r4, #2504]
+	ldrh	r5, [r4, #108]
+	cmp	r0, r3
+	bcc	.L1063
+	movw	r2, #813
+	ldr	r1, .L1075+4
+	ldr	r0, .L1075+8
+	bl	sftl_printk
+.L1063:
+	ldr	r3, [r4, #2504]
+	cmp	r6, r3
+	bcs	.L1064
+	add	r5, r5, #7
+	ldrh	r0, [r4, #138]
+	lsr	r3, r6, r5
+	ldr	ip, [r4, #2492]
+	mov	r1, #0
+	str	r3, [fp, #-44]
+	mov	r2, #12
+	ldrh	r9, [fp, #-44]
+.L1065:
+	uxth	r8, r1
+	cmp	r8, r0
+	bcc	.L1070
+	str	r2, [fp, #-48]
+	bl	select_l2p_ram_region
+	ldr	r2, [fp, #-48]
+	mov	r8, r0
+	ldr	r1, [r4, #2492]
+	mul	r2, r2, r0
+	add	ip, r1, r2
+	ldrh	r1, [r1, r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L1071
+	ldr	r2, [ip, #4]
+	cmp	r2, #0
+	bge	.L1071
+	bl	flush_l2p_region
+.L1071:
+	mov	r1, r8
+	ldrh	r0, [fp, #-44]
+	bl	load_l2p_region
+	b	.L1067
+.L1064:
+	cmp	r10, #0
+	mvn	r0, #0
+	streq	r0, [r7]
+.L1062:
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1070:
+	add	r1, r1, #1
+	mla	lr, r2, r1, ip
+	ldrh	lr, [lr, #-12]
+	cmp	lr, r9
+	bne	.L1065
+.L1067:
+	mvn	r2, #0
+	cmp	r10, #0
+	bic	r5, r6, r2, lsl r5
+	mov	r2, #12
+	uxth	r5, r5
+	bne	.L1068
+	ldr	r1, [r4, #2492]
+	mla	r2, r2, r8, r1
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, r5, lsl #2]
+	str	r2, [r7]
+.L1069:
+	ldr	r1, [r4, #2492]
+	mov	r2, #12
+	mov	r0, #0
+	mla	r3, r2, r8, r1
+	ldr	r2, [r3, #4]
+	cmn	r2, #1
+	addne	r2, r2, #1
+	strne	r2, [r3, #4]
+	b	.L1062
+.L1068:
+	mul	r2, r2, r8
+	ldr	r1, [r4, #2492]
+	ldr	r0, [r7]
+	add	r1, r1, r2
+	ldr	r1, [r1, #8]
+	str	r0, [r1, r5, lsl #2]
+	ldr	r1, [r4, #2492]
+	add	r2, r1, r2
+	ldr	r1, [r2, #4]
+	orr	r1, r1, #-2147483648
+	str	r1, [r2, #4]
+	ldr	r2, .L1075+12
+	strh	r9, [r2]	@ movhi
+	b	.L1069
+.L1076:
 	.align	2
-.L1099:
+.L1075:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.word	.LANCHOR1+410
+	.word	.LC1
+	.word	.LANCHOR0+2496
+	.size	log2phys, .-log2phys
 	.align	2
-	.global	FlashTestBlk
+	.global	FtlWriteDump_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	@ args = 0, pretend = 0, frame = 84
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
+	@ args = 0, pretend = 0, frame = 28
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #84
-	uxth	r4, r0
-	cmp	r4, #11
-	movls	r4, #0
-	bls	.L1101
-	ldr	r3, .L1104
-	sub	r0, fp, #84
-	mov	r2, #32
-	mov	r1, #165
-	str	r0, [fp, #-92]
-	lsl	r4, r4, #10
-	ldr	r5, [r3, #3324]
-	str	r5, [fp, #-96]
-	bl	memset
-	ldr	r3, .L1104+4
-	mov	r2, #1
-	mov	r1, r2
-	sub	r0, fp, #104
-	str	r3, [r5]	@ unaligned
-	str	r3, [r5, #4]	@ unaligned
-	str	r4, [fp, #-100]
-	bl	FlashEraseBlocks
+	sub	sp, sp, #28
+	ldr	r6, .L1095
+	ldr	r4, .L1095+4
+	ldrh	r2, [r6, #4]
+	cmp	r2, #0
+	beq	.L1078
+	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1078
+	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
+	ldrh	r3, [r4, #102]
+	mul	r3, r3, r1
+	cmp	r2, r3
+	beq	.L1078
+	ldrb	r8, [r4, #2358]	@ zero_extendqisi2
+	cmp	r8, #0
+	bne	.L1077
+	ldr	r7, [r4, #2504]
+	mov	r2, r8
+	sub	r1, fp, #64
+	ldrh	r9, [r4, #32]
+	sub	r7, r7, #1
+	mov	r0, r7
+	bl	log2phys
+	ldr	r3, [fp, #-64]
+	ldr	r5, [r4, #3336]
+	ldr	r0, [r4, #3304]
+	cmn	r3, #1
+	str	r3, [fp, #-56]
+	str	r7, [fp, #-44]
+	str	r0, [fp, #-52]
+	str	r5, [fp, #-48]
+	str	r8, [r5, #4]
+	beq	.L1080
+	mov	r2, r8
+	mov	r1, #1
+	sub	r0, fp, #60
+	bl	FlashReadPages
+.L1081:
+	ldr	ip, .L1095
+	mov	r8, #0
+	ldr	r3, .L1095+8
+	lsl	r9, r9, #2
+	mov	r10, r8
+	strh	r3, [r5]	@ movhi
+.L1082:
+	cmp	r9, r8
+	bne	.L1086
+.L1083:
 	mov	r3, #1
-	sub	r0, fp, #104
+.L1094:
+	strb	r3, [r4, #2358]
+.L1077:
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1080:
+	ldrh	r2, [r4, #110]
+	mov	r1, #255
+	bl	ftl_memset
+	b	.L1081
+.L1086:
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	beq	.L1083
+	ldr	r3, [fp, #-56]
+	mov	r0, ip
+	str	r7, [r5, #8]
+	add	r8, r8, #1
+	str	ip, [fp, #-68]
+	str	r3, [r5, #12]
+	ldrh	r3, [r6]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2544]
+	mov	r1, #1
+	str	r0, [fp, #-56]
+	sub	r0, fp, #60
+	str	r3, [r5, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, r10
+	str	r3, [r4, #2544]
+	mov	r3, #0
 	mov	r2, r3
-	mov	r1, r3
 	bl	FlashProgPages
-	ldr	r4, [fp, #-104]
-	mov	r2, #1
-	mov	r1, #0
-	sub	r0, fp, #104
-	adds	r4, r4, #0
-	movne	r4, #1
-	rsb	r4, r4, #0
-	bl	FlashEraseBlocks
-.L1101:
-	mov	r0, r4
-	sub	sp, fp, #20
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1105:
+	ldrh	r0, [r6]
+	bl	decrement_vpc_count
+	ldr	ip, [fp, #-68]
+	b	.L1082
+.L1078:
+	mov	r3, #0
+	b	.L1094
+.L1096:
 	.align	2
-.L1104:
+.L1095:
+	.word	.LANCHOR0+2348
 	.word	.LANCHOR0
-	.word	1515870810
-	.size	FlashTestBlk, .-FlashTestBlk
+	.word	-3947
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
-	.global	FtlBbmTblFlush
+	.global	FtlReUsePrevPpa
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlBbmTblFlush, %function
-FtlBbmTblFlush:
-	@ args = 0, pretend = 0, frame = 0
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #4
-	mov	r5, #0
-	ldr	r4, .L1115
-	mov	r1, #0
-	ldr	r7, .L1115+4
-	ldr	r0, [r4, #3300]
-	add	r6, r4, #176
-	ldr	r3, [r4, #3332]
-	ldrh	r2, [r4, #110]
-	str	r0, [r4, #3460]
-	str	r3, [r4, #3464]
-	bl	ftl_memset
-.L1107:
-	ldrh	r3, [r4, #54]
-	cmp	r5, r3
-	blt	.L1108
-	ldr	r5, [r4, #3464]
-	mov	r2, #16
-	mov	r1, #255
-	ldr	r8, .L1115+8
-	mov	r6, #0
-	mov	r0, r5
-	mov	r7, r6
-	bl	memset
-	ldr	r3, .L1115+12
-	strh	r3, [r5]	@ movhi
-	ldr	r3, [r4, #160]
-	str	r3, [r5, #4]
-	ldrh	r3, [r4, #152]
-	strh	r3, [r5, #2]	@ movhi
-	ldrh	r3, [r4, #156]
-	strh	r3, [r5, #8]	@ movhi
-	ldrh	r3, [r4, #158]
-	strh	r3, [r5, #10]	@ movhi
-	ldr	r3, [r4, #28]
-	strh	r3, [r5, #12]	@ movhi
-.L1109:
-	ldr	r3, [r4, #3300]
-	mov	r9, #0
-	ldrh	r2, [r4, #154]
-	ldrh	r1, [r4, #152]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	str	r9, [r4, #3452]
-	str	r3, [r4, #3464]
-	orr	r3, r2, r1, lsl #10
-	ldrh	r0, [r5, #10]
-	str	r3, [r4, #3456]
-	ldrh	r3, [r4, #156]
-	str	r0, [sp]
-	mov	r0, r8
+	mov	r6, r0
+	ldr	r7, .L1107
+	ubfx	r0, r1, #10, #16
+	str	r1, [fp, #-32]
+	bl	P2V_block_in_plane
+	ldr	r2, [r7, #2324]
+	lsl	r5, r0, #1
+	ldrh	r3, [r2, r5]
+	cmp	r3, #0
+	bne	.L1098
+	ldr	r4, [r7, #2340]
+	cmp	r4, #0
+	beq	.L1099
+	movw	r2, #2344
+	movw	lr, #65535
+	ldrh	ip, [r7, r2]
+	ldr	r2, [r7, #2316]
+	sub	r4, r4, r2
+	ubfx	r4, r4, #3, #16
+.L1100:
+	uxth	r1, r3
+	cmp	ip, r1
+	bls	.L1099
+	cmp	r4, r0
+	bne	.L1101
+	mov	r1, r4
+	ldr	r0, .L1107+4
+	bl	List_remove_node
+	movw	r3, #2344
+	ldrh	r3, [r7, r3]
+	cmp	r3, #0
+	bne	.L1102
+	movw	r2, #1733
+	ldr	r1, .L1107+8
+	ldr	r0, .L1107+12
 	bl	sftl_printk
-	ldrh	r3, [r4, #104]
-	ldrh	r2, [r4, #154]
+.L1102:
+	movw	r2, #2344
+	mov	r0, r4
+	ldrh	r3, [r7, r2]
 	sub	r3, r3, #1
-	cmp	r2, r3
-	blt	.L1110
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #152]
-	ldr	r0, [r4, #3268]
+	strh	r3, [r7, r2]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r7, #2324]
+	ldrh	r3, [r2, r5]
+.L1098:
 	add	r3, r3, #1
-	strh	r9, [r4, #154]	@ movhi
-	str	r3, [r4, #160]
-	str	r3, [r5, #4]
-	ldrh	r3, [r4, #156]
-	strh	r2, [r5, #8]	@ movhi
-	strh	r2, [r4, #156]	@ movhi
-	mov	r2, #1
-	strh	r3, [r4, #152]	@ movhi
-	mov	r1, r2
-	lsl	r3, r3, #10
-	str	r3, [r4, #3456]
-	str	r3, [r0, #4]
-	bl	FlashEraseBlocks
-.L1110:
-	mov	r3, #1
-	ldr	r0, .L1115+16
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldrh	r3, [r4, #154]
+	strh	r3, [r2, r5]	@ movhi
+	b	.L1099
+.L1101:
+	lsl	r4, r4, #3
 	add	r3, r3, #1
-	strh	r3, [r4, #154]	@ movhi
-	ldr	r3, [r4, #3452]
-	cmn	r3, #1
-	bne	.L1111
-	add	r6, r6, #1
-	ldr	r1, [r4, #3456]
-	uxth	r6, r6
-	ldr	r0, .L1115+20
-	bl	sftl_printk
-	cmp	r6, #3
-	bls	.L1109
-	mov	r2, r6
-	ldr	r1, [r4, #3456]
-	ldr	r0, .L1115+24
-	bl	sftl_printk
-.L1113:
-	b	.L1113
+	ldrh	r4, [r2, r4]
+	cmp	r4, lr
+	bne	.L1100
+.L1099:
+	mov	r2, #1
+	sub	r1, fp, #32
+	mov	r0, r6
+	bl	log2phys
+	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
 .L1108:
-	ldrh	r2, [r7]
-	ldr	r3, [r4, #3460]
-	ldr	r1, [r6, #4]!
-	mul	r0, r2, r5
-	lsl	r2, r2, #2
-	add	r5, r5, #1
-	add	r0, r3, r0, lsl #2
-	bl	ftl_memcpy
-	b	.L1107
-.L1114:
-	mov	r7, #1
-	b	.L1109
-.L1111:
-	cmp	r7, #0
-	beq	.L1114
-	mov	r0, #0
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L1116:
 	.align	2
-.L1115:
+.L1107:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3388
-	.word	.LC102
-	.word	-3887
-	.word	.LANCHOR0+3452
-	.word	.LC103
-	.word	.LC104
-	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.word	.LANCHOR0+2340
+	.word	.LANCHOR1+419
+	.word	.LC1
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
-	.global	allocate_data_superblock
+	.global	FtlRecoverySuperblock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	allocate_data_superblock, %function
-allocate_data_superblock:
-	@ args = 0, pretend = 0, frame = 12
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	@ args = 0, pretend = 0, frame = 44
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #12
+	sub	sp, sp, #44
+	movw	r2, #65535
+	ldrh	r3, [r0]
+	mov	r10, r0
+	cmp	r3, r2
+	beq	.L1229
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L1238
+	str	r3, [fp, #-64]
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	ldr	r1, [fp, #-64]
+	str	r3, [fp, #-80]
+	ldrh	r3, [r5, #102]
+	cmp	r3, r1
+	mov	r3, #0
+	strheq	r3, [r0, #4]	@ movhi
+	ldrhne	r0, [r0, #16]
+	bne	.L1113
+.L1236:
+	strb	r3, [r10, #6]
+.L1229:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1114:
+	uxth	r1, r3
+	add	r1, r10, r1, lsl #1
+	ldrh	r0, [r1, #16]
+.L1113:
+	cmp	r0, r2
+	uxth	r6, r3
+	add	r3, r3, #1
+	beq	.L1114
+	mov	r1, #1
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
 	mov	r4, r0
-	ldr	r10, .L1153
-.L1118:
-	ldr	r8, .L1153+4
-	ldrh	r1, [r8, #-8]
-	ldrh	r2, [r8]
-	add	r2, r2, r1
-	ldrh	r1, [r10, #40]
-	cmp	r2, r1
-	ble	.L1119
-	movw	r2, #2615
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
-.L1119:
-	ldr	r2, .L1153+16
-	cmp	r4, r2
-	movne	r1, #0
-	bne	.L1120
-	ldrh	r2, [r8]
-	ldr	r1, [r10, #3160]
-	mul	r0, r1, r2
-	lsr	r1, r2, #1
-	add	r1, r1, #1
-	add	r1, r1, r0, lsr #2
-	uxth	r1, r1
-	cmp	r1, #0
-	subne	r1, r1, #1
-	uxthne	r1, r1
-.L1120:
-	ldr	r0, .L1153+20
-	bl	List_pop_index_node
-	ldrh	r2, [r8]
-	mov	r7, r0
-	uxth	r9, r0
-	cmp	r2, #0
-	bne	.L1121
-	mov	r2, #2624
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
+	beq	.L1115
+	ldrh	r3, [r5, #32]
+	mov	r2, #0
+	ldr	r0, [r5, #3292]
+	movw	r7, #65535
+	ldr	lr, [r5, #3180]
+	mov	r8, #20
+	str	r3, [fp, #-56]
+	ldr	r3, [r5, #3176]
+	ldrh	r6, [r5, #112]
+	str	r3, [fp, #-60]
+	ldrh	r3, [r5, #110]
+	mov	r5, r2
+	str	r3, [fp, #-68]
+	add	r3, r10, #16
+	mov	ip, r3
+	str	r3, [fp, #-76]
+.L1116:
+	ldr	r1, [fp, #-56]
+	uxth	r3, r2
+	cmp	r1, r3
+	bhi	.L1120
+	ldr	r6, .L1238
+	mov	r2, #0
+	mov	r1, r5
+	movw	r8, #65535
+	bl	FlashReadPages
+	ldr	r3, [r6, #2544]
+	uxth	r2, r4
+	ldr	r9, [r6, #3292]
+	str	r2, [fp, #-60]
+	sub	r3, r3, #1
+	str	r3, [fp, #-56]
+	mov	r7, r9
+	mov	r3, #0
 .L1121:
-	ldrh	r2, [r8]
-	sub	r2, r2, #1
-	strh	r2, [r8]	@ movhi
-	ldrh	r2, [r10, #40]
-	cmp	r2, r9
-	bls	.L1118
-	uxth	r7, r7
-	ldr	r2, [r10, #2324]
-	lsl	r6, r7, #1
-	ldrh	r5, [r2, r6]
-	cmp	r5, #0
-	bne	.L1118
-	strh	r9, [r4]	@ movhi
-	mov	r0, r4
-	bl	make_superblock
-	ldrb	r2, [r4, #7]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1123
-	ldr	r2, [r10, #2324]
-	mvn	r1, #0
-	mov	r0, r7
-	strh	r1, [r2, r6]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r3, .L1153+24
-	ldrh	r2, [r8]
-	ldrh	r1, [r3]
-	add	r2, r2, r1
-	ldrh	r1, [r10, #40]
-	cmp	r2, r1
-	ble	.L1118
-	movw	r2, #2638
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
-	b	.L1118
-.L1123:
-	ldr	r3, .L1153+24
-	ldrh	r2, [r8]
-	ldrh	r1, [r3]
-	add	r2, r2, r1
-	ldrh	r1, [r10, #40]
-	cmp	r2, r1
-	ble	.L1125
-	movw	r2, #2641
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
-.L1125:
-	ldr	r0, [r10, #3268]
-	mov	r1, #20
-	ldrh	lr, [r10, #32]
-	add	ip, r4, #16
-	str	r1, [fp, #-44]
-	mov	r2, r0
-	mla	r3, r1, lr, r0
-	mov	lr, #0
-.L1126:
+	uxth	r2, r3
+	cmp	r5, r2
+	bhi	.L1126
+	addeq	r3, r4, #1
+	uxtheq	r3, r3
+	streq	r3, [fp, #-60]
+	bne	.L1124
+.L1230:
+	ldr	r0, [r9, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	ldrh	r3, [r6, #102]
+	sub	r1, fp, #68
+	ldr	r2, [fp, #-60]
+	str	r0, [fp, #-68]
+	ldr	r0, [fp, #-80]
 	cmp	r3, r2
-	bne	.L1128
-	cmp	r5, #0
-	bne	.L1129
-	movw	r2, #2652
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
-.L1129:
-	ldr	r2, .L1153+28
-	ldrh	r2, [r2]
-	cmp	r2, r9
+	ldrheq	r3, [fp, #-60]
+	strheq	r3, [r10, #2]	@ movhi
+	moveq	r3, #0
+	strbeq	r3, [r10, #6]
+	strheq	r3, [r10, #4]	@ movhi
+	ldm	r1, {r1, r2, r3}
+	cmp	r3, r2
+	cmpeq	r1, r0
+	moveq	r2, r1
+	moveq	r1, r3
+	beq	.L1237
+	movw	r3, #65535
+	cmp	r8, r3
 	bne	.L1130
-	movw	r2, #2654
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
-.L1130:
-	ldrb	r2, [r4, #8]	@ zero_extendqisi2
-	ldr	r1, [r10, #2328]
-	cmp	r2, #0
-	ldrh	r2, [r1, r6]
+	ldrb	r3, [r10, #8]	@ zero_extendqisi2
+	cmp	r3, #0
 	bne	.L1131
-	cmp	r2, #0
-	ldrhne	r0, [r10, #92]
-	moveq	r2, #2
-	addne	r2, r2, r0
-	mov	r0, r7
-	strh	r2, [r1, r6]	@ movhi
-	mov	r1, #0
-	ldr	r2, [r10, #2548]
-	add	r2, r2, #1
-	str	r2, [r10, #2548]
-	bl	ftl_set_blk_mode
+.L1130:
+	ldr	r3, [r6, #3452]
+	uxth	r7, r4
+	uxth	r4, r4
+	cmn	r3, #1
+	ldreq	r3, [fp, #-56]
+	streq	r3, [r6, #3452]
+	ldr	r3, [fp, #-64]
+	ldr	r6, .L1238
+	add	r3, r3, #7
+	cmp	r4, r3
+	subgt	r4, r7, #7
+	ldrle	r4, [fp, #-64]
+	uxthgt	r4, r4
 .L1134:
-	ldr	r2, [r10, #2328]
-	ldr	r1, [r10, #2564]
-	ldr	ip, [r10, #2548]
-	ldrh	r2, [r2, r6]
-	ldrh	r0, [r10, #92]
-	cmp	r2, r1
-	ldrh	r1, [r10, #40]
-	strhi	r2, [r10, #2564]
-	ldr	r2, [r10, #2552]
-	mla	r0, ip, r0, r2
-	bl	__udivsi3
-	ldr	r1, [r10, #3348]
-	str	r0, [r10, #2556]
-	ldr	r0, [r10, #3268]
-	ldr	r2, [r1, #16]
-	ldr	ip, .L1153+32
+	cmp	r4, r7
+	bhi	.L1141
+	mov	r3, #0
+	ldrh	r8, [r6, #32]
+	ldr	r0, [r6, #3292]
+	mov	r5, r3
+	ldr	r1, [fp, #-76]
+	movw	lr, #65535
+	mov	ip, #20
+	b	.L1142
+.L1115:
+	ldr	r3, [fp, #-64]
+	cmp	r3, #0
+	beq	.L1117
+	movw	r2, #1800
+	ldr	r1, .L1238+4
+	ldr	r0, .L1238+8
+	bl	sftl_printk
+.L1117:
+	ldr	r3, [fp, #-80]
+	cmp	r3, #0
+	cmpne	r6, r3
+	beq	.L1118
+	movw	r2, #1801
+	ldr	r1, .L1238+4
+	ldr	r0, .L1238+8
+	bl	sftl_printk
+.L1118:
+	mov	r3, #0
+	strh	r3, [r10, #2]	@ movhi
+	b	.L1236
+.L1120:
+	ldrh	r3, [ip], #2
+	cmp	r3, r7
+	beq	.L1119
+	mla	r1, r8, r5, r0
+	orr	r3, r4, r3, lsl #10
+	str	r3, [r1, #4]
+	ldr	r3, [fp, #-68]
+	mul	r3, r3, r5
+	add	r9, r3, #3
+	cmp	r3, #0
+	movlt	r3, r9
+	ldr	r9, [fp, #-60]
+	bic	r3, r3, #3
+	add	r3, r9, r3
+	str	r3, [r1, #8]
+	mul	r3, r6, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r9, r3, #3
+	cmp	r3, #0
+	movlt	r3, r9
+	bic	r3, r3, #3
+	add	r3, lr, r3
+	str	r3, [r1, #12]
+.L1119:
 	add	r2, r2, #1
-	str	r2, [r1, #16]
-	mov	r1, #20
-	mla	r1, r1, r5, r0
-	add	r2, r0, #4
-	add	r1, r1, #24
+	b	.L1116
+.L1126:
+	ldr	r2, [r7]
+	cmp	r2, #0
+	bne	.L1122
+	ldr	ip, [r7, #12]
+	ldr	r2, [ip, #4]
+	cmn	r2, #1
+	beq	.L1123
+	ldr	r1, .L1238
+	mov	r0, r2
+	str	ip, [fp, #-68]
+	ldr	r1, [r1, #2544]
+	bl	ftl_cmp_data_ver
+	ldr	ip, [fp, #-68]
+	cmp	r0, #0
+	ldrne	r1, .L1238
+	addne	r2, r2, #1
+	strne	r2, [r1, #2544]
+.L1123:
+	ldr	r2, [ip]
+	cmn	r2, #1
+	bne	.L1125
+.L1124:
+	uxth	r2, r4
+	uxth	r3, r3
+	str	r2, [fp, #-60]
+	mov	r2, #20
+	mla	r9, r2, r3, r9
+	b	.L1230
+.L1122:
+	ldr	r8, [fp, #-60]
+.L1125:
+	add	r3, r3, #1
+	add	r7, r7, #20
+	b	.L1121
 .L1136:
-	add	r2, r2, #20
-	cmp	r1, r2
-	bne	.L1137
-	ldrb	r1, [r4, #8]	@ zero_extendqisi2
-	mov	r2, r5
-	ldr	r0, [r10, #3268]
-	mov	r8, #0
-	bl	FlashEraseBlocks
-	mov	r1, r8
-	mov	ip, #20
-.L1138:
-	uxth	r2, r8
-	cmp	r5, r2
-	bhi	.L1140
-	cmp	r1, #0
-	ble	.L1141
-	mov	r0, r7
-	bl	update_multiplier_value
-	bl	FtlBbmTblFlush
-.L1141:
-	ldrb	r1, [r4, #7]	@ zero_extendqisi2
-	cmp	r1, #0
-	bne	.L1142
-	ldr	r2, [r10, #2324]
-	mvn	r1, #0
-	strh	r1, [r2, r6]	@ movhi
-	b	.L1118
-.L1128:
-	str	lr, [r2, #8]
-	movw	r8, #65535
-	str	lr, [r2, #12]
-	add	r2, r2, #20
-	ldrh	r1, [ip], #2
-	cmp	r1, r8
-	ldrne	r8, [fp, #-44]
-	lslne	r1, r1, #10
-	mlane	r8, r8, r5, r0
+	ldrh	r2, [r1], #2
+	add	r3, r3, #1
+	cmp	r2, lr
+	mlane	r9, ip, r5, r0
 	addne	r5, r5, #1
+	orrne	r2, r4, r2, lsl #10
 	uxthne	r5, r5
-	strne	r1, [r8, #4]
-	b	.L1126
-.L1131:
-	add	r2, r2, #1
-	mov	r0, r7
-	strh	r2, [r1, r6]	@ movhi
-	ldr	r2, [r10, #2552]
-	add	r2, r2, #1
-	str	r2, [r10, #2552]
-	bl	ftl_set_blk_mode.part.6
-	b	.L1134
+	strne	r2, [r9, #4]
+.L1142:
+	uxth	r2, r3
+	cmp	r8, r2
+	bhi	.L1136
+	mov	r1, r5
+	mov	r2, #0
+	bl	FlashReadPages
+	ldr	r3, [r6, #3292]
+	mov	r2, #20
+	movw	r1, #65535
+	mla	r5, r2, r5, r3
 .L1137:
-	ldr	r0, [r2, #-20]
-	and	r0, r0, ip
-	str	r0, [r2, #-20]
-	b	.L1136
+	cmp	r5, r3
+	addeq	r4, r4, #1
+	uxtheq	r4, r4
+	beq	.L1134
 .L1140:
-	mul	r2, ip, r8
-	ldr	lr, [r10, #3268]
-	add	r0, lr, r2
-	ldr	r2, [lr, r2]
+	ldr	r2, [r3]
+	cmp	r2, #0
+	bne	.L1131
+	ldr	r2, [r3, #12]
+	ldrh	r0, [r2]
+	cmp	r0, r1
+	beq	.L1139
+	ldr	r2, [r2, #4]
 	cmn	r2, #1
-	bne	.L1139
-	ldr	r0, [r0, #4]
-	add	r1, r1, #1
-	str	ip, [fp, #-52]
-	str	r2, [fp, #-48]
-	ubfx	r0, r0, #10, #16
-	str	r1, [fp, #-44]
-	bl	FtlBbmMapBadBlock
-	ldr	r2, [fp, #-48]
-	add	r0, r4, r8, lsl #1
-	ldr	ip, [fp, #-52]
-	ldr	r1, [fp, #-44]
-	strh	r2, [r0, #16]	@ movhi
-	ldrb	r2, [r4, #7]	@ zero_extendqisi2
-	sub	r2, r2, #1
-	strb	r2, [r4, #7]
+	strne	r2, [r6, #3452]
 .L1139:
-	add	r8, r8, #1
-	b	.L1138
-.L1142:
-	ldrh	r2, [r10, #102]
-	strh	r9, [r4]	@ movhi
-	smulbb	r2, r2, r1
-	mov	r1, #0
-	strh	r1, [r4, #2]	@ movhi
-	strb	r1, [r4, #6]
-	ldr	r1, [r10, #2540]
-	uxth	r2, r2
-	ldr	r0, [r10, #2324]
-	strh	r2, [r4, #4]	@ movhi
-	str	r1, [r4, #12]
-	add	r1, r1, #1
-	str	r1, [r10, #2540]
-	ldrh	r1, [r4]
-	lsl	r3, r1, #1
-	strh	r2, [r0, r3]	@ movhi
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	beq	.L1143
-	ldrb	r3, [r4, #7]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1144
+	add	r3, r3, #20
+	b	.L1137
+.L1141:
+	mvn	r3, #0
+	str	r3, [r6, #3452]
+.L1131:
+	ldr	r1, .L1238
+	mov	r2, #1
+	ldr	r8, [fp, #-64]
+	movw	r3, #3476
+	mov	r4, r1
+	strh	r2, [r1, r3]	@ movhi
 .L1143:
-	movw	r2, #2707
-	ldr	r1, .L1153+8
-	ldr	r0, .L1153+12
-	bl	sftl_printk
+	ldrh	ip, [r4, #32]
+	mov	r3, #0
+	ldr	r0, [r4, #3292]
+	mov	r9, r3
+	ldr	r1, [fp, #-76]
+	movw	lr, #65535
+	mov	r5, #20
 .L1144:
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1154:
-	.align	2
-.L1153:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2344
-	.word	.LANCHOR1+403
-	.word	.LC1
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2340
-	.word	.LANCHOR0+2336
-	.word	.LANCHOR0+2588
-	.word	-1024
-	.size	allocate_data_superblock, .-allocate_data_superblock
-	.align	2
-	.global	FtlGcFreeBadSuperBlk
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlGcFreeBadSuperBlk, %function
-FtlGcFreeBadSuperBlk:
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #8
-	uxth	r3, r0
-	ldr	r6, .L1167
-	str	r3, [fp, #-44]
-	movw	r3, #3206
-	ldrh	r3, [r6, r3]
-	cmp	r3, #0
-	movne	r7, #0
-	ldrne	r10, .L1167+4
-	bne	.L1157
-.L1156:
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1163:
-	uxtah	r3, r6, r7
-	ldr	r1, [fp, #-44]
-	mov	r8, #0
-	ldrb	r0, [r3, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	mov	r9, r0
-.L1158:
-	ldrh	r3, [r10]
-	uxth	r4, r8
-	cmp	r3, r4
-	bhi	.L1162
-	add	r7, r7, #1
-.L1157:
-	ldrh	r2, [r6, #32]
-	uxth	r3, r7
-	cmp	r2, r3
-	bhi	.L1163
-	bl	FtlGcReFreshBadBlk
-	b	.L1156
-.L1162:
-	uxth	r3, r8
-	ldr	r5, .L1167+8
-	lsl	r2, r3, #1
-	ldrh	r2, [r5, r2]
-	cmp	r2, r9
-	bne	.L1159
-	mov	r1, r9
-	ldr	r0, .L1167+12
-	str	r3, [fp, #-48]
-	bl	sftl_printk
-	mov	r0, r9
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [fp, #-48]
-	ldrh	r2, [r10]
-	add	r3, r5, r3, lsl #1
-.L1160:
-	cmp	r4, r2
-	bcc	.L1161
-	sub	r2, r2, #1
-	strh	r2, [r10]	@ movhi
-.L1159:
-	add	r8, r8, #1
-	b	.L1158
-.L1161:
-	ldrh	r1, [r3, #2]!
-	add	r4, r4, #1
-	uxth	r4, r4
-	strh	r1, [r3, #-2]	@ movhi
-	b	.L1160
-.L1168:
-	.align	2
-.L1167:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+3206
-	.word	.LANCHOR0+3208
-	.word	.LC105
-	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
-	.align	2
-	.global	update_vpc_list
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	update_vpc_list, %function
-update_vpc_list:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r3, .L1179
-	uxth	r4, r0
-	ldr	r1, [r3, #2324]
-	lsl	r2, r4, #1
-	mov	r6, r3
-	ldrh	r0, [r1, r2]
-	cmp	r0, #0
-	bne	.L1170
-	movw	r2, #2588
-	ldrh	r1, [r3, r2]
-	cmp	r1, r4
-	mvneq	r3, #0
-	strheq	r3, [r6, r2]	@ movhi
-	beq	.L1172
-	movw	r2, #2348
-	ldrh	r2, [r3, r2]
-	cmp	r2, r4
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-	movw	r2, #2396
-	ldrh	r2, [r3, r2]
-	cmp	r2, r4
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-	movw	r2, #2444
-	ldrh	r3, [r3, r2]
-	cmp	r3, r4
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-.L1172:
-	ldr	r5, .L1179+4
-	mov	r1, r4
-	ldr	r0, .L1179+8
-	bl	List_remove_node
-	ldrh	r3, [r5]
-	cmp	r3, #0
-	bne	.L1174
-	movw	r2, #2777
-	ldr	r1, .L1179+12
-	ldr	r0, .L1179+16
-	bl	sftl_printk
-.L1174:
-	ldrh	r3, [r5]
-	mov	r0, r4
-	sub	r3, r3, #1
-	strh	r3, [r5]	@ movhi
-	bl	free_data_superblock
-	mov	r0, r4
-	bl	FtlGcFreeBadSuperBlk
-	movw	r3, #2344
-	ldrh	r2, [r5]
-	ldrh	r3, [r6, r3]
-	add	r3, r3, r2
-	ldrh	r2, [r6, #40]
-	cmp	r3, r2
-	ble	.L1178
-	movw	r2, #2780
-	ldr	r1, .L1179+12
-	ldr	r0, .L1179+16
-	bl	sftl_printk
-.L1178:
-	mov	r0, #1
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1170:
-	mov	r0, r4
-	bl	List_update_data_list
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1180:
-	.align	2
-.L1179:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2336
-	.word	.LANCHOR0+2320
-	.word	.LANCHOR1+428
-	.word	.LC1
-	.size	update_vpc_list, .-update_vpc_list
-	.align	2
-	.global	decrement_vpc_count
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	decrement_vpc_count, %function
-decrement_vpc_count:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	uxth	r6, r0
-	movw	r3, #65535
-	cmp	r6, r3
-	ldr	r4, .L1193
-	beq	.L1182
-	ldr	r3, [r4, #2324]
-	lsl	r5, r6, #1
-	ldrh	r2, [r3, r5]
-	cmp	r2, #0
-	subne	r2, r2, #1
-	strhne	r2, [r3, r5]	@ movhi
-	bne	.L1182
-	mov	r1, r6
-	ldr	r0, .L1193+4
-	bl	sftl_printk
-	ldr	r3, [r4, #2324]
-	ldrh	r5, [r3, r5]
-	cmp	r5, #0
-	beq	.L1184
-.L1191:
-	mov	r5, #0
-.L1181:
-	mov	r0, r5
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1184:
-	movw	r2, #2795
-.L1192:
-	ldr	r1, .L1193+8
-	ldr	r0, .L1193+12
-	bl	sftl_printk
-	b	.L1181
-.L1182:
-	movw	r7, #3438
-	movw	r3, #65535
-	ldrh	r0, [r4, r7]
-	cmp	r0, r3
-	strheq	r6, [r4, r7]	@ movhi
-	beq	.L1191
-.L1186:
-	cmp	r6, r0
-	beq	.L1191
-	bl	update_vpc_list
-	ldr	r2, [r4, #2316]
-	adds	r5, r0, #0
-	ldr	r3, [r4, #2320]
-	movne	r5, #1
-	ldr	r1, [r4, #2324]
-	strh	r6, [r4, r7]	@ movhi
-	sub	r3, r3, r2
-	asr	r3, r3, #3
-	uxth	r2, r3
-	uxth	r3, r3
-	lsl	r2, r2, #1
-	cmp	r3, r6
-	ldrh	r2, [r1, r2]
-	clz	r2, r2
-	lsr	r2, r2, #5
-	moveq	r2, #0
-	cmp	r2, #0
-	beq	.L1181
-	movw	r2, #2811
-	b	.L1192
-.L1194:
-	.align	2
-.L1193:
-	.word	.LANCHOR0
-	.word	.LC106
-	.word	.LANCHOR1+444
-	.word	.LC1
-	.size	decrement_vpc_count, .-decrement_vpc_count
-	.align	2
-	.global	FtlRecoverySuperblock
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
-	@ args = 0, pretend = 0, frame = 44
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #44
-	movw	r2, #65535
-	ldrh	r3, [r0]
-	mov	r10, r0
-	cmp	r3, r2
-	beq	.L1315
-	ldrh	r3, [r0, #2]
-	ldr	r5, .L1322
-	str	r3, [fp, #-64]
-	ldrb	r3, [r0, #6]	@ zero_extendqisi2
-	ldr	r1, [fp, #-64]
-	str	r3, [fp, #-80]
-	ldrh	r3, [r5, #102]
-	cmp	r3, r1
-	mov	r3, #0
-	strheq	r3, [r0, #4]	@ movhi
-	ldrhne	r0, [r0, #16]
-	bne	.L1199
-.L1320:
-	strb	r3, [r10, #6]
-.L1315:
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1200:
-	uxth	r1, r3
-	add	r1, r10, r1, lsl #1
-	ldrh	r0, [r1, #16]
-.L1199:
-	cmp	r0, r2
-	uxth	r6, r3
-	add	r3, r3, #1
-	beq	.L1200
-	mov	r1, #1
-	bl	FtlGetLastWrittenPage
-	cmn	r0, #1
-	mov	r4, r0
-	beq	.L1201
-	ldrh	r3, [r5, #32]
-	mov	r2, #0
-	ldr	r0, [r5, #3288]
-	movw	r7, #65535
-	ldr	lr, [r5, #3176]
-	mov	r8, #20
-	str	r3, [fp, #-56]
-	ldr	r3, [r5, #3172]
-	ldrh	r6, [r5, #112]
-	str	r3, [fp, #-60]
-	ldrh	r3, [r5, #110]
-	mov	r5, r2
-	str	r3, [fp, #-68]
-	add	r3, r10, #16
-	mov	ip, r3
-	str	r3, [fp, #-76]
-.L1202:
-	ldr	r1, [fp, #-56]
-	uxth	r3, r2
-	cmp	r1, r3
-	bhi	.L1206
-	ldr	r6, .L1322
-	mov	r2, #0
-	mov	r1, r5
-	movw	r8, #65535
-	bl	FlashReadPages
-	ldr	r3, [r6, #2544]
-	uxth	r2, r4
-	ldr	r9, [r6, #3288]
-	str	r2, [fp, #-60]
-	sub	r3, r3, #1
-	str	r3, [fp, #-56]
-	mov	r7, r9
-	mov	r3, #0
-.L1207:
-	uxth	r2, r3
-	cmp	r5, r2
-	bhi	.L1212
-	addeq	r3, r4, #1
-	uxtheq	r3, r3
-	streq	r3, [fp, #-60]
-	bne	.L1210
-.L1316:
-	ldr	r0, [r9, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_plane
-	ldrh	r3, [r6, #102]
-	sub	r1, fp, #68
-	ldr	r2, [fp, #-60]
-	str	r0, [fp, #-68]
-	ldr	r0, [fp, #-80]
-	cmp	r3, r2
-	ldrheq	r3, [fp, #-60]
-	strheq	r3, [r10, #2]	@ movhi
-	moveq	r3, #0
-	strbeq	r3, [r10, #6]
-	strheq	r3, [r10, #4]	@ movhi
-	ldm	r1, {r1, r2, r3}
-	cmp	r3, r2
-	cmpeq	r1, r0
-	moveq	r2, r1
-	moveq	r1, r3
-	beq	.L1321
-	movw	r3, #65535
-	cmp	r8, r3
-	bne	.L1216
-	ldrb	r3, [r10, #8]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1217
-.L1216:
-	ldr	r3, [r6, #3448]
-	uxth	r7, r4
-	uxth	r4, r4
-	cmn	r3, #1
-	ldreq	r3, [fp, #-56]
-	streq	r3, [r6, #3448]
-	ldr	r3, [fp, #-64]
-	ldr	r6, .L1322
-	add	r3, r3, #7
-	cmp	r4, r3
-	subgt	r4, r7, #7
-	ldrle	r4, [fp, #-64]
-	uxthgt	r4, r4
-.L1220:
-	cmp	r4, r7
-	bhi	.L1227
-	mov	r3, #0
-	ldrh	r8, [r6, #32]
-	ldr	r0, [r6, #3288]
-	mov	r5, r3
-	ldr	r1, [fp, #-76]
-	movw	lr, #65535
-	mov	ip, #20
-	b	.L1228
-.L1201:
-	ldr	r3, [fp, #-64]
-	cmp	r3, #0
-	beq	.L1203
-	movw	r2, #1766
-	ldr	r1, .L1322+4
-	ldr	r0, .L1322+8
-	bl	sftl_printk
-.L1203:
-	ldr	r3, [fp, #-80]
-	cmp	r3, #0
-	cmpne	r6, r3
-	beq	.L1204
-	movw	r2, #1767
-	ldr	r1, .L1322+4
-	ldr	r0, .L1322+8
-	bl	sftl_printk
-.L1204:
-	mov	r3, #0
-	strh	r3, [r10, #2]	@ movhi
-	b	.L1320
-.L1206:
-	ldrh	r3, [ip], #2
-	cmp	r3, r7
-	beq	.L1205
-	mla	r1, r8, r5, r0
-	orr	r3, r4, r3, lsl #10
-	str	r3, [r1, #4]
-	ldr	r3, [fp, #-68]
-	mul	r3, r3, r5
-	add	r9, r3, #3
-	cmp	r3, #0
-	movlt	r3, r9
-	ldr	r9, [fp, #-60]
-	bic	r3, r3, #3
-	add	r3, r9, r3
-	str	r3, [r1, #8]
-	mul	r3, r6, r5
-	add	r5, r5, #1
-	uxth	r5, r5
-	add	r9, r3, #3
-	cmp	r3, #0
-	movlt	r3, r9
-	bic	r3, r3, #3
-	add	r3, lr, r3
-	str	r3, [r1, #12]
-.L1205:
-	add	r2, r2, #1
-	b	.L1202
-.L1212:
-	ldr	r2, [r7]
-	cmp	r2, #0
-	bne	.L1208
-	ldr	ip, [r7, #12]
-	ldr	r2, [ip, #4]
-	cmn	r2, #1
-	beq	.L1209
-	ldr	r1, .L1322
-	mov	r0, r2
-	str	ip, [fp, #-68]
-	ldr	r1, [r1, #2544]
-	bl	ftl_cmp_data_ver
-	ldr	ip, [fp, #-68]
-	cmp	r0, #0
-	ldrne	r1, .L1322
-	addne	r2, r2, #1
-	strne	r2, [r1, #2544]
-.L1209:
-	ldr	r2, [ip]
-	cmn	r2, #1
-	bne	.L1211
-.L1210:
-	uxth	r2, r4
-	uxth	r3, r3
-	str	r2, [fp, #-60]
-	mov	r2, #20
-	mla	r9, r2, r3, r9
-	b	.L1316
-.L1208:
-	ldr	r8, [fp, #-60]
-.L1211:
-	add	r3, r3, #1
-	add	r7, r7, #20
-	b	.L1207
-.L1222:
-	ldrh	r2, [r1], #2
-	add	r3, r3, #1
-	cmp	r2, lr
-	mlane	r9, ip, r5, r0
-	addne	r5, r5, #1
-	orrne	r2, r4, r2, lsl #10
-	uxthne	r5, r5
-	strne	r2, [r9, #4]
-.L1228:
-	uxth	r2, r3
-	cmp	r8, r2
-	bhi	.L1222
-	mov	r1, r5
-	mov	r2, #0
-	bl	FlashReadPages
-	ldr	r3, [r6, #3288]
-	mov	r2, #20
-	movw	r1, #65535
-	mla	r5, r2, r5, r3
-.L1223:
-	cmp	r5, r3
-	addeq	r4, r4, #1
-	uxtheq	r4, r4
-	beq	.L1220
-.L1226:
-	ldr	r2, [r3]
-	cmp	r2, #0
-	bne	.L1217
-	ldr	r2, [r3, #12]
-	ldrh	r0, [r2]
-	cmp	r0, r1
-	beq	.L1225
-	ldr	r2, [r2, #4]
-	cmn	r2, #1
-	strne	r2, [r6, #3448]
-.L1225:
-	add	r3, r3, #20
-	b	.L1223
-.L1227:
-	mvn	r3, #0
-	str	r3, [r6, #3448]
-.L1217:
-	ldr	r4, .L1322+12
-	mov	r3, #1
-	ldr	r8, [fp, #-64]
-	strh	r3, [r4]	@ movhi
-	sub	r4, r4, #3520
-.L1229:
-	ldrh	ip, [r4, #32]
-	mov	r3, #0
-	ldr	r0, [r4, #3288]
-	mov	r9, r3
-	ldr	r1, [fp, #-76]
-	movw	lr, #65535
-	mov	r5, #20
-.L1230:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1232
+	bhi	.L1146
 	mov	r2, #0
 	mov	r1, r9
 	bl	FlashReadPages
 	mov	r3, #0
-.L1319:
+.L1235:
 	str	r3, [fp, #-72]
 	ldrh	r3, [fp, #-72]
 	cmp	r9, r3
-	bhi	.L1259
+	bhi	.L1176
 	add	r8, r8, #1
 	ldrh	r3, [r4, #102]
 	uxth	r8, r8
 	cmp	r3, r8
-	bne	.L1229
+	bne	.L1143
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	mov	r3, #0
 	strh	r8, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1260:
+.L1177:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1315
+	bcs	.L1229
 	ldr	r1, [fp, #-76]
 	ldrh	ip, [r1], #2
 	cmp	ip, r0
 	str	r1, [fp, #-76]
 	add	r1, r3, #1
-	bne	.L1320
+	bne	.L1236
 	mov	r3, r1
-	b	.L1260
-.L1232:
+	b	.L1177
+.L1146:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8741,11 +8094,11 @@ FtlRecoverySuperblock:
 	addne	r9, r9, #1
 	uxthne	r9, r9
 	strne	r2, [r6, #4]
-	b	.L1230
-.L1259:
+	b	.L1144
+.L1176:
 	ldr	r3, [fp, #-72]
 	mov	r6, #20
-	ldr	r2, [r4, #3288]
+	ldr	r2, [r4, #3292]
 	mul	r6, r6, r3
 	str	r2, [fp, #-84]
 	add	r7, r2, r6
@@ -8755,7 +8108,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [fp, #-64]
 	cmp	r8, r3
-	bcc	.L1234
+	bcc	.L1148
 	ldr	r2, [fp, #-80]
 	moveq	r3, #1
 	movne	r3, #0
@@ -8763,367 +8116,828 @@ FtlRecoverySuperblock:
 	movls	r3, #0
 	andhi	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1234
+	bne	.L1148
 	ldr	r3, [fp, #-60]
 	ldr	r2, [fp, #-68]
 	cmp	r8, r3
-	cmpeq	r2, r0
-	beq	.L1235
-	ldr	r2, [fp, #-84]
-	ldr	r3, [r2, r6]
-	cmn	r3, #1
-	beq	.L1236
-	ldr	r7, [r7, #12]
-	movw	r3, #61589
-	ldrh	r2, [r7]
+	cmpeq	r2, r0
+	beq	.L1149
+	ldr	r2, [fp, #-84]
+	ldr	r3, [r2, r6]
+	cmn	r3, #1
+	beq	.L1150
+	ldr	r7, [r7, #12]
+	movw	r3, #61589
+	ldrh	r2, [r7]
+	cmp	r2, r3
+	ldrhne	r0, [r10]
+	bne	.L1233
+	ldr	r3, [r7, #4]
+	cmn	r3, #1
+	str	r3, [fp, #-56]
+	beq	.L1152
+	mov	r0, r3
+	ldr	r1, [r4, #2544]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	ldrne	r3, [fp, #-56]
+	addne	r3, r3, #1
+	strne	r3, [r4, #2544]
+.L1152:
+	ldrh	r2, [r7]
+	movw	r3, #61589
+	cmp	r2, r3
+	beq	.L1153
+	mov	r2, #1952
+	ldr	r1, .L1238+4
+	ldr	r0, .L1238+8
+	bl	sftl_printk
+.L1153:
+	ldr	r5, [r7, #8]
+	sub	r1, fp, #48
+	ldr	r3, [r7, #12]
+	mov	r2, #0
+	mov	r0, r5
+	str	r3, [fp, #-52]
+	bl	log2phys
+	ldr	r1, [r4, #3452]
+	cmn	r1, #1
+	beq	.L1154
+	ldr	r0, [fp, #-56]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1154
+	ldr	r2, [fp, #-52]
+	cmn	r2, #1
+	beq	.L1155
+	ldr	r0, [r4, #3292]
+	mov	r1, #1
+	add	r0, r0, r6
+	str	r2, [r0, #4]
+	mov	r2, #0
+	ldr	r7, [r0, #12]
+	bl	FlashReadPages
+	ldr	r2, [r4, #3292]
+	ldr	r1, [r2, r6]
+	add	r3, r2, r6
+	cmn	r1, #1
+	bne	.L1156
+.L1157:
+	mvn	r3, #0
+	str	r3, [fp, #-52]
+.L1164:
+	ldr	r6, [fp, #-52]
+	cmn	r6, #1
+	beq	.L1148
+.L1180:
+	ubfx	r0, r6, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4, #40]
+	mov	r5, r0
+	cmp	r3, r0
+	bhi	.L1172
+	movw	r2, #2065
+	ldr	r1, .L1238+4
+	ldr	r0, .L1238+8
+	bl	sftl_printk
+.L1172:
+	ldr	r3, .L1238
+	ldr	r2, [r3, #2324]
+	lsl	r3, r5, #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1173
+	mov	r0, r5
+.L1233:
+	bl	decrement_vpc_count
+	b	.L1148
+.L1155:
+	ldr	r3, [fp, #-44]
+	ldr	r2, [fp, #-48]
+	cmp	r2, r3
+	bne	.L1148
+	mov	r2, #1
+	sub	r1, fp, #52
+	mov	r0, r5
+	bl	log2phys
+.L1148:
+	ldr	r3, [fp, #-72]
+	add	r3, r3, #1
+	b	.L1235
+.L1156:
+	ldr	r1, [r7, #8]
+	cmp	r5, r1
+	bne	.L1157
+	ldr	r1, [r7, #4]
+	ldr	r0, [r4, #3452]
+	str	r1, [fp, #-84]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1157
+	ldr	r1, [fp, #-48]
+	ldr	r0, [fp, #-44]
+	cmp	r1, r0
+	bne	.L1159
+.L1162:
+	ldr	r1, [fp, #-52]
+	mov	r0, r5
+	bl	FtlReUsePrevPpa
+	b	.L1157
+.L1159:
+	ldr	r0, [fp, #-52]
+	cmp	r1, r0
+	beq	.L1157
+	cmn	r1, #1
+	streq	r1, [r2, r6]
+	beq	.L1161
+	str	r1, [r3, #4]
+	mov	r2, #0
+	mov	r1, #1
+	mov	r0, r3
+	ldr	r7, [r3, #12]
+	bl	FlashReadPages
+.L1161:
+	ldr	r2, [r4, #3292]
+	ldr	r2, [r2, r6]
+	cmn	r2, #1
+	beq	.L1162
+	ldr	r3, [r7, #4]
+	ldr	r0, [r4, #3452]
+	mov	r1, r3
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1162
+	mov	r1, r3
+	ldr	r0, [fp, #-84]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1157
+	b	.L1162
+.L1154:
+	ldr	r3, [fp, #-44]
+	ldr	r2, [fp, #-48]
+	cmp	r2, r3
+	beq	.L1164
+	ldr	r3, [fp, #-52]
+	ldr	r2, [r4, #48]
+	cmp	r2, r3, lsr #10
+	bhi	.L1166
+	cmn	r3, #1
+.L1232:
+	bne	.L1148
+	mov	r2, #1
+	sub	r1, fp, #44
+	mov	r0, r5
+	bl	log2phys
+	ldr	r6, [fp, #-48]
+	cmn	r6, #1
+	beq	.L1164
+	ldr	r3, [fp, #-52]
+	cmp	r6, r3
+	beq	.L1180
+	ubfx	r0, r6, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, .L1238+12
+	ldrh	r2, [r3]
+	cmp	r2, r0
+	beq	.L1171
+	ldrh	r2, [r3, #48]
+	cmp	r2, r0
+	beq	.L1171
+	ldrh	r3, [r3, #96]
+	cmp	r3, r0
+	bne	.L1164
+.L1171:
+	ldr	r0, [r4, #3292]
+	mov	r2, #0
+	mov	r1, #1
+	str	r6, [r0, #4]
+	ldr	r7, [r0, #12]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L1164
+	ldr	r1, [r7, #4]
+	ldr	r0, [fp, #-56]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	bne	.L1164
+	mov	r2, #1
+	sub	r1, fp, #48
+	mov	r0, r5
+	bl	log2phys
+	b	.L1164
+.L1166:
+	ldr	r0, [r4, #3292]
+	mov	r2, #0
+	mov	r1, #1
+	ldr	r6, [r0, #12]
+	str	r3, [r0, #4]
+	bl	FlashReadPages
+	ldr	r3, [r6, #8]
+	cmp	r5, r3
+	bne	.L1148
+	ldrh	r2, [r6]
+	movw	r3, #61589
+	cmp	r2, r3
+	b	.L1232
+.L1173:
+	mov	r1, r5
+	ldr	r0, .L1238+16
+	bl	sftl_printk
+	b	.L1148
+.L1150:
+	ldr	r3, [r4, #3480]
+	cmp	r3, #31
+	addls	r2, r4, r3, lsl #2
+	addls	r3, r3, #1
+	strls	r3, [r4, #3480]
+	strls	r5, [r2, #3484]
+	ldrh	r0, [r10]
+	bl	decrement_vpc_count
+	ldr	r3, [r4, #3452]
+	cmn	r3, #1
+	ldreq	r3, [fp, #-56]
+	beq	.L1234
+	ldr	r2, [fp, #-56]
+	cmp	r2, r3
+	bcs	.L1148
+	mov	r3, r2
+.L1234:
+	str	r3, [r4, #3452]
+	b	.L1148
+.L1149:
+	ldrb	r3, [fp, #-68]	@ zero_extendqisi2
+	ldr	r2, [fp, #-68]
+	ldr	r1, [fp, #-60]
+	strb	r3, [r10, #6]
+	ldrh	r3, [fp, #-60]
+	strh	r3, [r10, #2]	@ movhi
+.L1237:
+	mov	r0, r10
+	bl	ftl_sb_update_avl_pages
+	b	.L1229
+.L1239:
+	.align	2
+.L1238:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+435
+	.word	.LC1
+	.word	.LANCHOR0+2348
+	.word	.LC100
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	ftl_check_vpc
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
+	@ args = 0, pretend = 0, frame = 4
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #4
+	mov	r4, #0
+	ldr	r6, .L1264
+	ldr	r1, .L1264+4
+	ldr	r0, .L1264+8
+	mov	r5, r6
+	bl	sftl_printk
+	mov	r1, #8192
+	ldr	r0, .L1264+12
+	bl	__memzero
+.L1241:
+	ldr	r3, [r6, #2504]
+	cmp	r4, r3
+	bcc	.L1243
+	ldr	r8, .L1264+12
+	mov	r4, #0
+	ldr	r9, .L1264+16
+	mov	r6, r4
+.L1244:
+	ldrh	r2, [r5, #40]
+	uxth	r3, r4
+	cmp	r2, r3
+	bhi	.L1246
+	ldr	r4, [r5, #2340]
+	cmp	r4, #0
+	beq	.L1247
+	movw	r3, #2344
+	ldr	r9, .L1264+12
+	ldrh	r8, [r5, r3]
+	mov	r7, #0
+	ldr	r3, [r5, #2316]
+	ldr	r10, .L1264+20
+	sub	r4, r4, r3
+	ubfx	r4, r4, #3, #16
+.L1248:
+	uxth	r3, r7
+	cmp	r8, r3
+	bls	.L1247
+	ldr	r2, [r5, #2324]
+	lsl	r3, r4, #1
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	beq	.L1249
+	mov	r6, #1
+	ldrh	r3, [r9, r3]
+	mov	r1, r4
+	mov	r0, r10
+	bl	sftl_printk
+.L1249:
+	ldr	r3, [r5, #2316]
+	lsl	r4, r4, #3
+	add	r7, r7, #1
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L1248
+.L1247:
+	cmp	r6, #0
+	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+	movw	r2, #2389
+	ldr	r1, .L1264+4
+	ldr	r0, .L1264+24
+	bl	sftl_printk
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1243:
+	mov	r2, #0
+	sub	r1, fp, #44
+	mov	r0, r4
+	bl	log2phys
+	ldr	r0, [fp, #-44]
+	cmn	r0, #1
+	beq	.L1242
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, .L1264+12
+	lsl	r0, r0, #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+.L1242:
+	add	r4, r4, #1
+	b	.L1241
+.L1246:
+	uxth	r1, r4
+	ldr	r3, [r5, #2324]
+	lsl	r7, r1, #1
+	ldrh	r2, [r3, r7]
+	ldrh	r3, [r8, r7]
 	cmp	r2, r3
-	ldrhne	r0, [r10]
-	bne	.L1317
-	ldr	r3, [r7, #4]
-	cmn	r3, #1
-	str	r3, [fp, #-56]
-	beq	.L1238
-	mov	r0, r3
-	ldr	r1, [r4, #2544]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	ldrne	r3, [fp, #-56]
-	addne	r3, r3, #1
-	strne	r3, [r4, #2544]
-.L1238:
-	ldrh	r2, [r7]
-	movw	r3, #61589
+	beq	.L1245
+	mov	r0, r9
+	bl	sftl_printk
+	ldr	r3, [r5, #2324]
+	movw	r2, #65535
+	ldrh	r3, [r3, r7]
+	cmp	r3, r2
+	beq	.L1245
+	ldrh	r2, [r8, r7]
 	cmp	r2, r3
-	beq	.L1239
-	movw	r2, #1918
-	ldr	r1, .L1322+4
-	ldr	r0, .L1322+8
+	movhi	r6, #1
+.L1245:
+	add	r4, r4, #1
+	b	.L1244
+.L1265:
+	.align	2
+.L1264:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+457
+	.word	.LC101
+	.word	check_vpc_table
+	.word	.LC102
+	.word	.LC103
+	.word	.LC1
+	.size	ftl_check_vpc, .-ftl_check_vpc
+	.align	2
+	.global	ftl_scan_all_data
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	@ args = 0, pretend = 0, frame = 4
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #24
+	mov	r5, #0
+	ldr	r6, .L1274
+	mov	r1, #0
+	ldr	r0, .L1274+4
 	bl	sftl_printk
-.L1239:
-	ldr	r5, [r7, #8]
-	sub	r1, fp, #48
-	ldr	r3, [r7, #12]
+	mov	r4, r6
+.L1267:
+	ldr	r3, [r6, #2504]
+	cmp	r5, r3
+	bcc	.L1273
+	sub	sp, fp, #28
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L1273:
 	mov	r2, #0
+	sub	r1, fp, #32
 	mov	r0, r5
-	str	r3, [fp, #-52]
 	bl	log2phys
-	ldr	r1, [r4, #3448]
-	cmn	r1, #1
-	beq	.L1240
-	ldr	r0, [fp, #-56]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1240
-	ldr	r2, [fp, #-52]
-	cmn	r2, #1
-	beq	.L1241
-	ldr	r0, [r4, #3288]
-	mov	r1, #1
-	add	r0, r0, r6
-	str	r2, [r0, #4]
+	ubfx	r3, r5, #0, #11
+	cmp	r3, #0
+	bne	.L1268
+	ldr	r2, [fp, #-32]
+	mov	r1, r5
+	ldr	r0, .L1274+8
+	bl	sftl_printk
+.L1268:
+	ldr	r3, [fp, #-32]
+	cmn	r3, #1
+	beq	.L1270
+	str	r3, [r4, #3460]
 	mov	r2, #0
-	ldr	r7, [r0, #12]
+	ldr	r3, [r4, #3304]
+	mov	r1, #1
+	ldr	r7, [r4, #3336]
+	ldr	r0, .L1274+12
+	str	r3, [r4, #3464]
+	str	r5, [r4, #3472]
+	str	r7, [r4, #3468]
+	str	r2, [r4, #3456]
 	bl	FlashReadPages
-	ldr	r2, [r4, #3288]
-	ldr	r1, [r2, r6]
-	add	r3, r2, r6
-	cmn	r1, #1
-	bne	.L1242
-.L1243:
-	mvn	r3, #0
-	str	r3, [fp, #-52]
-.L1250:
-	ldr	r6, [fp, #-52]
-	cmn	r6, #1
-	beq	.L1234
-.L1263:
-	ubfx	r0, r6, #10, #16
-	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #40]
-	mov	r5, r0
-	cmp	r3, r0
-	bhi	.L1255
-	movw	r2, #2019
-	ldr	r1, .L1322+4
-	ldr	r0, .L1322+8
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	cmpne	r3, #256
+	beq	.L1271
+	ldr	r3, [r7, #8]
+	cmp	r5, r3
+	beq	.L1270
+.L1271:
+	ldr	r2, [r4, #3464]
+	ldr	r3, [r4, #3468]
+	ldr	r0, .L1274+16
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	mov	r1, r5
+	ldr	r2, [r2]
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp]
+	ldr	r3, [r3]
+	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1255:
-	ldr	r2, [r4, #2324]
-	lsl	r3, r5, #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	beq	.L1256
-	mov	r0, r5
-.L1317:
-	bl	decrement_vpc_count
-	b	.L1234
-.L1241:
-	ldr	r3, [fp, #-44]
-	ldr	r2, [fp, #-48]
+.L1270:
+	add	r5, r5, #1
+	b	.L1267
+.L1275:
+	.align	2
+.L1274:
+	.word	.LANCHOR0
+	.word	.LC104
+	.word	.LC105
+	.word	.LANCHOR0+3456
+	.word	.LC106
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.align	2
+	.global	FtlGcScanTempBlk
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	@ args = 0, pretend = 0, frame = 44
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #44
+	mov	r5, r0
+	ldr	r3, .L1306
+	str	r1, [fp, #-68]
+	ldrh	r6, [r3, #4]
+	movw	r3, #65535
+	cmp	r6, r3
+	beq	.L1301
+	cmp	r6, #0
+	bne	.L1277
+.L1278:
+	bl	FtlGcPageVarInit
+	b	.L1279
+.L1301:
+	mov	r6, #0
+.L1277:
+	ldr	r3, .L1306+4
+	ldr	r2, [fp, #-68]
+	ldrh	r3, [r3, #102]
+	cmp	r3, r2
+	beq	.L1278
+.L1279:
+	ldr	r4, .L1306+4
+	mov	r9, #0
+.L1280:
+	ldrh	r2, [r5]
+	mov	r3, #0
+	strb	r3, [r5, #8]
+	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1234
-	mov	r2, #1
-	sub	r1, fp, #52
-	mov	r0, r5
-	bl	log2phys
-.L1234:
-	ldr	r3, [fp, #-72]
-	add	r3, r3, #1
-	b	.L1319
-.L1242:
-	ldr	r1, [r7, #8]
-	cmp	r5, r1
-	bne	.L1243
-	ldr	r1, [r7, #4]
-	ldr	r0, [r4, #3448]
-	str	r1, [fp, #-84]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1243
-	ldr	r1, [fp, #-48]
-	ldr	r0, [fp, #-44]
-	cmp	r1, r0
-	bne	.L1245
-.L1248:
-	ldr	r1, [fp, #-52]
-	mov	r0, r5
-	bl	FtlReUsePrevPpa
-	b	.L1243
-.L1245:
-	ldr	r0, [fp, #-52]
-	cmp	r1, r0
-	beq	.L1243
-	cmn	r1, #1
-	streq	r1, [r2, r6]
-	beq	.L1247
-	str	r1, [r3, #4]
+	beq	.L1281
+.L1298:
+	ldrh	r3, [r4, #32]
+	mov	r2, #0
+	ldr	r0, [r4, #3292]
+	add	ip, r5, #16
+	ldrh	lr, [r4, #112]
+	mov	r10, r2
+	str	r3, [fp, #-72]
+	movw	r7, #65535
+	ldr	r3, [r4, #3176]
+	str	r3, [fp, #-76]
+	ldrh	r3, [r4, #110]
+	str	r3, [fp, #-80]
+	ldr	r3, [r4, #3180]
+	str	r3, [fp, #-84]
+.L1282:
+	ldr	r1, [fp, #-72]
+	uxth	r3, r2
+	cmp	r1, r3
+	bhi	.L1284
+	mov	r8, #0
 	mov	r2, #0
-	mov	r1, #1
-	mov	r0, r3
-	ldr	r7, [r3, #12]
+	mov	r1, r10
 	bl	FlashReadPages
-.L1247:
-	ldr	r2, [r4, #3288]
-	ldr	r2, [r2, r6]
-	cmn	r2, #1
-	beq	.L1248
-	ldr	r3, [r7, #4]
-	ldr	r0, [r4, #3448]
-	mov	r1, r3
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1248
-	mov	r1, r3
-	ldr	r0, [fp, #-84]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1243
-	b	.L1248
-.L1240:
-	ldr	r3, [fp, #-44]
-	ldr	r2, [fp, #-48]
-	cmp	r2, r3
-	beq	.L1250
-	mov	r2, #1
-	sub	r1, fp, #44
+.L1285:
+	uxth	r3, r8
+	cmp	r10, r3
+	bhi	.L1296
+	ldr	r3, [fp, #-68]
+	add	r9, r9, #1
+	add	r6, r6, #1
+	uxth	r6, r6
+	cmp	r3, r9
+	bls	.L1297
+.L1299:
+	ldrh	r3, [r4, #102]
+	cmp	r3, r6
+	bhi	.L1298
+.L1281:
+	ldr	r3, .L1306
+	mvn	r2, #0
+	strh	r6, [r5, #2]	@ movhi
+	mov	r1, r6
 	mov	r0, r5
-	bl	log2phys
-	ldr	r6, [fp, #-48]
-	cmn	r6, #1
-	beq	.L1250
-	ldr	r3, [fp, #-52]
-	cmp	r6, r3
-	beq	.L1263
-	ubfx	r0, r6, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r3, .L1322+16
-	ldrh	r2, [r3]
-	cmp	r2, r0
-	beq	.L1254
-	ldrh	r2, [r3, #48]
-	cmp	r2, r0
-	beq	.L1254
-	ldrh	r3, [r3, #96]
-	cmp	r3, r0
-	bne	.L1250
-.L1254:
-	ldr	r0, [r4, #3288]
+	strh	r2, [r3, #4]	@ movhi
 	mov	r2, #0
+	strb	r2, [r5, #6]
+	bl	ftl_sb_update_avl_pages
+	b	.L1300
+.L1284:
+	ldrh	r3, [ip], #2
+	cmp	r3, r7
+	beq	.L1283
+	mov	r1, #20
+	orr	r3, r6, r3, lsl #10
+	mla	r1, r1, r10, r0
+	str	r3, [r1, #4]
+	ldr	r3, [fp, #-80]
+	mul	r3, r3, r10
+	add	r8, r3, #3
+	cmp	r3, #0
+	movlt	r3, r8
+	ldr	r8, [fp, #-76]
+	bic	r3, r3, #3
+	add	r3, r8, r3
+	str	r3, [r1, #8]
+	mul	r3, lr, r10
+	add	r10, r10, #1
+	uxth	r10, r10
+	add	r8, r3, #3
+	cmp	r3, #0
+	movlt	r3, r8
+	ldr	r8, [fp, #-84]
+	bic	r3, r3, #3
+	add	r3, r8, r3
+	str	r3, [r1, #12]
+.L1283:
+	add	r2, r2, #1
+	b	.L1282
+.L1296:
+	mov	r3, #20
+	ldr	r2, [r4, #3292]
+	mul	ip, r3, r8
+	ldr	r7, [r2, ip]
+	add	r3, r2, ip
+	ldr	r1, [r3, #4]
+	cmp	r7, #0
+	str	r1, [fp, #-72]
+	bne	.L1286
+	ldr	r3, [r3, #12]
+	movw	r2, #65535
+	ldrh	r1, [r3]
+	cmp	r1, r2
+	bne	.L1287
+.L1286:
+	ldrh	r3, [r5]
+	mov	r1, #0
+	ldr	r2, [r4, #2324]
+	mov	r6, #0
+	lsl	r3, r3, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r5]
+	bl	INSERT_FREE_LIST
+	mvn	r3, #0
+	strh	r3, [r5]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1280
+.L1287:
+	ldr	r0, [r3, #8]
+	ldr	r2, [r4, #2504]
+	str	ip, [fp, #-80]
+	str	r3, [fp, #-76]
+	cmp	r0, r2
+	bhi	.L1286
+	mov	r2, r7
+	sub	r1, fp, #64
+	bl	log2phys
+	ldr	r3, [fp, #-76]
+	ldr	r1, [fp, #-64]
+	ldr	ip, [fp, #-80]
+	ldr	r2, [r3, #12]
+	cmn	r1, #1
+	sub	r0, r2, r1
+	clz	r0, r0
+	lsr	r0, r0, #5
+	moveq	r0, #0
+	cmp	r0, #0
+	bne	.L1290
+.L1294:
+	ldr	r2, [r3, #8]
+	add	r8, r8, #1
+	ldr	r1, [fp, #-72]
+	ldr	r0, [r3, #12]
+	bl	FtlGcUpdatePage
+	b	.L1285
+.L1290:
+	str	r2, [fp, #-56]
 	mov	r1, #1
-	str	r6, [r0, #4]
-	ldr	r7, [r0, #12]
+	ldr	r2, [r4, #3320]
+	sub	r0, fp, #60
+	str	ip, [fp, #-80]
+	str	r3, [fp, #-76]
+	str	r2, [fp, #-52]
+	ldr	r2, [r4, #3340]
+	str	r2, [fp, #-48]
+	mov	r2, r7
 	bl	FlashReadPages
-	ldr	r3, [r4, #3288]
-	ldr	r3, [r3]
-	cmn	r3, #1
-	beq	.L1250
-	ldr	r1, [r7, #4]
-	ldr	r0, [fp, #-56]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	bne	.L1250
-	mov	r2, #1
-	sub	r1, fp, #48
-	mov	r0, r5
-	bl	log2phys
-	b	.L1250
-.L1256:
-	mov	r1, r5
-	ldr	r0, .L1322+20
-	bl	sftl_printk
-	b	.L1234
-.L1236:
-	ldr	r3, [r4, #3524]
-	cmp	r3, #31
-	addls	r2, r4, r3, lsl #2
-	addls	r3, r3, #1
-	strls	r3, [r4, #3524]
-	strls	r5, [r2, #3528]
-	ldrh	r0, [r10]
-	bl	decrement_vpc_count
-	ldr	r3, [r4, #3448]
-	cmn	r3, #1
-	ldreq	r3, [fp, #-56]
-	beq	.L1318
+	ldrh	r1, [r4, #58]
+	ldr	r2, [r4, #3292]
+	ldr	ip, [fp, #-80]
+	ldr	r0, [fp, #-52]
+	ldr	r3, [fp, #-76]
+	lsl	r1, r1, #7
+	add	ip, r2, ip
+	mov	r2, r7
+.L1291:
+	cmp	r2, r1
+	beq	.L1294
+	ldr	lr, [ip, #8]
+	ldr	r7, [lr, r2, lsl #2]
+	ldr	lr, [r0, r2, lsl #2]
+	cmp	r7, lr
+	beq	.L1292
 	ldr	r2, [fp, #-56]
-	cmp	r2, r3
-	bcs	.L1234
-	mov	r3, r2
-.L1318:
-	str	r3, [r4, #3448]
-	b	.L1234
-.L1235:
-	ldrb	r3, [fp, #-68]	@ zero_extendqisi2
-	ldr	r2, [fp, #-68]
-	ldr	r1, [fp, #-60]
-	strb	r3, [r10, #6]
-	ldrh	r3, [fp, #-60]
-	strh	r3, [r10, #2]	@ movhi
-.L1321:
-	mov	r0, r10
-	bl	ftl_sb_update_avl_pages
-	b	.L1315
-.L1323:
+	ldrh	r1, [r5]
+	ldr	r0, .L1306+8
+	bl	sftl_printk
+	b	.L1286
+.L1292:
+	add	r2, r2, #1
+	b	.L1291
+.L1297:
+	ldr	r2, .L1306
+	movw	r1, #65535
+	ldrh	r3, [r2, #4]
+	cmp	r3, r1
+	beq	.L1299
+	add	r3, r3, r9
+	strh	r3, [r2, #4]	@ movhi
+	ldrh	r3, [r4, #102]
+	cmp	r3, r6
+	bls	.L1299
+.L1300:
+	mvn	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1307:
 	.align	2
-.L1322:
+.L1306:
+	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR1+464
-	.word	.LC1
-	.word	.LANCHOR0+3520
-	.word	.LANCHOR0+2348
 	.word	.LC107
-	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	2
-	.global	FtlWriteDump_data
+	.global	FtlReadRefresh
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
-	@ args = 0, pretend = 0, frame = 28
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #28
-	ldr	r6, .L1342
-	ldr	r4, .L1342+4
-	ldrh	r2, [r6, #4]
-	cmp	r2, #0
-	beq	.L1325
-	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1325
-	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
-	ldrh	r3, [r4, #102]
-	mul	r3, r3, r1
-	cmp	r2, r3
-	beq	.L1325
-	ldrb	r8, [r4, #2358]	@ zero_extendqisi2
-	cmp	r8, #0
-	bne	.L1324
-	ldr	r7, [r4, #2504]
-	mov	r2, r8
-	sub	r1, fp, #64
-	ldrh	r9, [r4, #32]
-	sub	r7, r7, #1
-	mov	r0, r7
-	bl	log2phys
-	ldr	r3, [fp, #-64]
-	ldr	r5, [r4, #3332]
-	ldr	r0, [r4, #3300]
-	cmn	r3, #1
-	str	r3, [fp, #-56]
-	str	r7, [fp, #-44]
-	str	r0, [fp, #-52]
-	str	r5, [fp, #-48]
-	str	r8, [r5, #4]
-	beq	.L1327
-	mov	r2, r8
+	sub	sp, sp, #88
+	ldr	r3, .L1321
+	ldr	r0, [r3, #2720]
+	mov	r4, r3
+	cmp	r0, #0
+	beq	.L1309
+	ldr	r1, [r3, #2724]
+	ldr	r2, [r3, #2504]
+	cmp	r1, r2
+	bcs	.L1310
+	mov	r5, #2048
+.L1315:
+	ldr	r0, [r4, #2724]
+	ldr	r3, [r4, #2504]
+	cmp	r0, r3
+	bcs	.L1312
+	mov	r2, #0
+	sub	r1, fp, #108
+	bl	log2phys
+	ldr	r2, [fp, #-108]
+	ldr	r3, [r4, #2724]
+	cmn	r2, #1
+	add	r3, r3, #1
+	str	r3, [r4, #2724]
+	beq	.L1313
+	str	r3, [fp, #-88]
+	sub	r0, fp, #20
+	ldr	r3, [r4, #3328]
 	mov	r1, #1
-	sub	r0, fp, #60
+	str	r2, [fp, #-100]
+	mov	r2, #0
+	str	r2, [r0, #-84]!
+	str	r3, [fp, #-96]
+	sub	r3, fp, #84
+	str	r3, [fp, #-92]
 	bl	FlashReadPages
-.L1328:
-	ldr	ip, .L1342
-	mov	r8, #0
-	ldr	r3, .L1342+8
-	lsl	r9, r9, #2
-	mov	r10, r8
-	strh	r3, [r5]	@ movhi
-.L1329:
-	cmp	r9, r8
-	bne	.L1333
-.L1330:
-	mov	r3, #1
-.L1341:
-	strb	r3, [r4, #2358]
-.L1324:
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1327:
-	ldrh	r2, [r4, #110]
-	mov	r1, #255
-	bl	ftl_memset
-	b	.L1328
-.L1333:
-	ldrh	r3, [r6, #4]
+	ldr	r3, [fp, #-104]
+	cmp	r3, #256
+	bne	.L1312
+	ldr	r0, [fp, #-108]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1312:
+	mvn	r0, #0
+.L1308:
+	sub	sp, fp, #20
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1313:
+	subs	r5, r5, #1
+	bne	.L1315
+	b	.L1312
+.L1310:
+	ldr	r2, [r3, #2508]
+	mov	r0, #0
+	str	r0, [r3, #2720]
+	str	r0, [r3, #2724]
+	str	r2, [r3, #2716]
+	b	.L1308
+.L1309:
+	ldr	r1, [r3, #2508]
+	ldr	r2, [r3, #2716]
+	add	ip, r1, #1048576
+	cmp	r2, ip
+	bhi	.L1318
+	ldr	r3, [r3, #2564]
+	mov	ip, #33554432
+	lsr	r3, r3, #10
+	add	r2, r2, ip, asr r3
+	cmp	r1, r2
+	bhi	.L1318
+	ldr	r3, .L1321+4
+	ldrb	r3, [r3, #28]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1330
-	ldr	r3, [fp, #-56]
-	mov	r0, ip
-	str	r7, [r5, #8]
-	add	r8, r8, #1
-	str	ip, [fp, #-68]
-	str	r3, [r5, #12]
-	ldrh	r3, [r6]
-	strh	r3, [r5, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	r3, [r4, #2544]
-	mov	r1, #1
-	str	r0, [fp, #-56]
-	sub	r0, fp, #60
-	str	r3, [r5, #4]
-	add	r3, r3, #1
-	cmn	r3, #1
-	moveq	r3, r10
-	str	r3, [r4, #2544]
-	mov	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r6]
-	bl	decrement_vpc_count
-	ldr	ip, [fp, #-68]
-	b	.L1329
-.L1325:
-	mov	r3, #0
-	b	.L1341
-.L1343:
+	bne	.L1308
+.L1318:
+	mov	r3, #1
+	mov	r0, #0
+	str	r3, [r4, #2720]
+	str	r0, [r4, #2724]
+	str	r1, [r4, #2716]
+	b	.L1308
+.L1322:
 	.align	2
-.L1342:
-	.word	.LANCHOR0+2348
+.L1321:
 	.word	.LANCHOR0
-	.word	-3947
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
+	.word	.LANCHOR0+2268
+	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
 	.global	l2p_flush
 	.syntax unified
@@ -9136,121 +8950,34 @@ l2p_flush:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L1348
+	ldr	r5, .L1327
 	mov	r4, #0
 	mov	r6, #12
 	bl	FtlWriteDump_data
-.L1345:
+.L1324:
 	ldrh	r2, [r5, #138]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1347
+	bhi	.L1326
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1347:
+.L1326:
 	ldr	r3, [r5, #2492]
 	uxth	r0, r4
 	mla	r3, r6, r0, r3
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1346
+	bge	.L1325
 	bl	flush_l2p_region
-.L1346:
+.L1325:
 	add	r4, r4, #1
-	b	.L1345
-.L1349:
+	b	.L1324
+.L1328:
 	.align	2
-.L1348:
+.L1327:
 	.word	.LANCHOR0
 	.size	l2p_flush, .-l2p_flush
 	.align	2
-	.global	FtlSuperblockPowerLostFix
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
-	@ args = 0, pretend = 0, frame = 20
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #20
-	mvn	r3, #0
-	str	r3, [fp, #-36]
-	mov	r6, #0
-	ldr	r3, .L1363
-	movw	r1, #61589
-	mov	r4, r0
-	ldr	r2, [r3, #3300]
-	mov	r8, r3
-	ldr	r5, [r3, #3332]
-	str	r2, [fp, #-44]
-	mvn	r2, #2
-	str	r5, [fp, #-40]
-	str	r2, [r5, #8]
-	mvn	r2, #1
-	str	r2, [r5, #12]
-	ldrh	r2, [r0]
-	strh	r6, [r5]	@ movhi
-	strh	r2, [r5, #2]	@ movhi
-	ldr	r2, [r3, #3300]
-	str	r1, [r2]
-	ldr	r1, .L1363+4
-	ldr	r2, [r3, #3300]
-	str	r1, [r2, #4]
-	ldrh	r2, [r0, #4]
-	tst	r2, #1
-	moveq	r7, #6
-	movne	r7, #7
-.L1356:
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	bne	.L1352
-.L1353:
-	ldrh	r3, [r4]
-	ldr	r1, [r8, #2324]
-	ldrh	r0, [r4, #4]
-	lsl	r3, r3, #1
-	ldrh	r2, [r1, r3]
-	sub	r2, r2, r0
-	strh	r2, [r1, r3]	@ movhi
-	ldrh	r3, [r8, #102]
-	strh	r3, [r4, #2]	@ movhi
-	mov	r3, #0
-	strb	r3, [r4, #6]
-	strh	r3, [r4, #4]	@ movhi
-	sub	sp, fp, #32
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1352:
-	mov	r0, r4
-	bl	get_new_active_ppa
-	cmn	r0, #1
-	str	r0, [fp, #-48]
-	beq	.L1353
-	ldr	r3, [r8, #2544]
-	mov	r1, #1
-	sub	r0, fp, #52
-	str	r3, [r5, #4]
-	add	r3, r3, #1
-	cmn	r3, #1
-	moveq	r3, r6
-	str	r3, [r8, #2544]
-	mov	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r4]
-	bl	decrement_vpc_count
-	subs	r7, r7, #1
-	bne	.L1356
-	b	.L1353
-.L1364:
-	.align	2
-.L1363:
-	.word	.LANCHOR0
-	.word	305419896
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
-	.align	2
 	.global	FtlVendorPartWrite
 	.syntax unified
 	.arm
@@ -9264,27 +8991,27 @@ FtlVendorPartWrite:
 	sub	fp, ip, #4
 	sub	sp, sp, #100
 	mov	r7, r0
-	ldr	r4, .L1374
+	ldr	r4, .L1338
 	mov	r5, r1
 	str	r2, [fp, #-128]
 	add	r2, r0, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
 	mvnhi	r8, #0
-	bhi	.L1365
+	bhi	.L1329
 	ldrh	r6, [r4, #108]
 	mov	r8, #0
 	lsr	r6, r0, r6
 	lsl	r10, r6, #2
-.L1367:
+.L1331:
 	cmp	r5, #0
-	bne	.L1372
-.L1365:
+	bne	.L1336
+.L1329:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1372:
-	ldr	r3, [r4, #3372]
+.L1336:
+	ldr	r3, [r4, #3376]
 	mov	r0, r7
 	ldrh	r2, [r4, #58]
 	ldr	ip, [r3, r10]
@@ -9303,8 +9030,8 @@ FtlVendorPartWrite:
 	cmpne	r9, r2
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L1369
-	ldr	r2, [r4, #3308]
+	beq	.L1333
+	ldr	r2, [r4, #3312]
 	sub	r0, fp, #124
 	str	ip, [fp, #-120]
 	str	r2, [fp, #-116]
@@ -9313,10 +9040,10 @@ FtlVendorPartWrite:
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-.L1370:
+.L1334:
 	ldr	r3, [fp, #-132]
 	lsl	ip, r9, #9
-	ldr	r0, [r4, #3308]
+	ldr	r0, [r4, #3312]
 	sub	r5, r5, r9
 	mov	r2, ip
 	ldr	r1, [fp, #-128]
@@ -9326,8 +9053,8 @@ FtlVendorPartWrite:
 	add	r0, r0, r3, lsl #9
 	bl	ftl_memcpy
 	mov	r1, r6
-	ldr	r2, [r4, #3308]
-	ldr	r0, .L1374+4
+	ldr	r2, [r4, #3312]
+	ldr	r0, .L1338+4
 	add	r6, r6, #1
 	bl	FtlMapWritePage
 	ldr	r3, [fp, #-128]
@@ -9336,17 +9063,17 @@ FtlVendorPartWrite:
 	mvneq	r8, #0
 	add	r3, r3, ip
 	str	r3, [fp, #-128]
-	b	.L1367
-.L1369:
+	b	.L1331
+.L1333:
 	ldrh	r2, [r4, #110]
-	ldr	r0, [r4, #3308]
+	ldr	r0, [r4, #3312]
 	bl	ftl_memset
-	b	.L1370
-.L1375:
+	b	.L1334
+.L1339:
 	.align	2
-.L1374:
+.L1338:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3476
+	.word	.LANCHOR0+3612
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -9360,49 +9087,48 @@ Ftl_save_ext_data:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1378
-	ldr	r2, .L1378+4
-	ldr	r1, [r3, #2636]
-	cmp	r1, r2
+	ldr	r2, .L1342
+	ldr	r3, .L1342+4
+	ldr	r1, [r2, #2640]
+	cmp	r1, r3
 	ldmfdne	sp, {fp, sp, pc}
-	ldr	r2, .L1378+8
+	ldr	r3, .L1342+8
+	add	r2, r2, #2640
 	mov	r1, #1
 	mov	r0, #0
-	str	r2, [r3, #2640]
-	ldr	r2, [r3, #2532]
-	str	r2, [r3, #2724]
-	ldr	r2, [r3, #2536]
-	str	r2, [r3, #2728]
-	ldr	r2, [r3, #2528]
-	str	r2, [r3, #2644]
-	ldr	r2, [r3, #2516]
-	str	r2, [r3, #2648]
-	ldr	r2, [r3, #2508]
-	str	r2, [r3, #2652]
-	ldr	r2, [r3, #2524]
-	str	r2, [r3, #2656]
-	ldr	r2, [r3, #2552]
-	str	r2, [r3, #2664]
-	ldr	r2, [r3, #2560]
-	str	r2, [r3, #2668]
-	ldr	r2, [r3, #2512]
-	str	r2, [r3, #2672]
-	ldr	r2, [r3, #2520]
-	str	r2, [r3, #2676]
-	ldr	r2, [r3, #2564]
-	str	r2, [r3, #2680]
-	ldr	r2, [r3, #2568]
-	str	r2, [r3, #2684]
-	ldr	r2, .L1378+12
+	str	r3, [r2, #4]
+	ldr	r3, [r2, #-108]
+	str	r3, [r2, #88]
+	ldr	r3, [r2, #-104]
+	str	r3, [r2, #92]
+	ldr	r3, [r2, #-112]
+	str	r3, [r2, #8]
+	ldr	r3, [r2, #-124]
+	str	r3, [r2, #12]
+	ldr	r3, [r2, #-132]
+	str	r3, [r2, #16]
+	ldr	r3, [r2, #-116]
+	str	r3, [r2, #20]
+	ldr	r3, [r2, #-88]
+	str	r3, [r2, #28]
+	ldr	r3, [r2, #-80]
+	str	r3, [r2, #32]
+	ldr	r3, [r2, #-128]
+	str	r3, [r2, #36]
+	ldr	r3, [r2, #-120]
+	str	r3, [r2, #40]
+	ldr	r3, [r2, #-76]
+	str	r3, [r2, #44]
+	ldr	r3, [r2, #-72]
+	str	r3, [r2, #48]
 	bl	FtlVendorPartWrite
 	ldmfd	sp, {fp, sp, pc}
-.L1379:
+.L1343:
 	.align	2
-.L1378:
+.L1342:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
-	.word	.LANCHOR0+2636
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
 	.global	FtlEctTblFlush
@@ -9416,7 +9142,7 @@ FtlEctTblFlush:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1385
+	ldr	r3, .L1349
 	movw	r1, #3656
 	ldrh	r2, [r3, r1]
 	cmp	r2, #31
@@ -9425,23 +9151,23 @@ FtlEctTblFlush:
 	strhls	r2, [r3, r1]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	bne	.L1382
-	ldr	r1, [r3, #3348]
+	bne	.L1346
+	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1383
-.L1382:
-	ldr	r2, [r3, #3348]
+	bcc	.L1347
+.L1346:
+	ldr	r2, [r3, #3352]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1385+4
+	ldr	r1, .L1349+4
 	str	r1, [r2]
-	movw	r1, #3340
-	ldrh	r1, [r3, r1]
-	ldr	r2, [r3, #3348]
+	ldr	r2, [r3, #3352]
+	ldr	r3, .L1349+8
+	ldrh	r1, [r3]
 	lsl	r3, r1, #9
 	str	r3, [r2, #12]
 	ldr	r3, [r2, #8]
@@ -9451,14 +9177,15 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1383:
+.L1347:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1386:
+.L1350:
 	.align	2
-.L1385:
+.L1349:
 	.word	.LANCHOR0
 	.word	1112818501
+	.word	.LANCHOR0+3344
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
 	.align	2
 	.global	FtlVendorPartRead
@@ -9474,7 +9201,7 @@ FtlVendorPartRead:
 	sub	fp, ip, #4
 	sub	sp, sp, #96
 	mov	r9, r2
-	ldr	r3, .L1397
+	ldr	r3, .L1361
 	mov	r6, r1
 	add	r1, r0, r1
 	mov	r7, r0
@@ -9482,23 +9209,23 @@ FtlVendorPartRead:
 	mov	r10, r3
 	cmp	r1, r2
 	mvnhi	r8, #0
-	bhi	.L1387
+	bhi	.L1351
 	ldrh	r5, [r3, #108]
 	mov	r8, #0
 	lsr	r5, r0, r5
 	lsl	r3, r5, #2
 	str	r3, [fp, #-128]
-.L1389:
+.L1353:
 	cmp	r6, #0
-	bne	.L1395
-.L1387:
+	bne	.L1359
+.L1351:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1395:
+.L1359:
 	ldr	r3, [fp, #-128]
 	mov	r0, r7
-	ldr	r2, [r10, #3372]
+	ldr	r2, [r10, #3376]
 	ldrh	r4, [r10, #58]
 	ldr	ip, [r2, r3]
 	mov	r1, r4
@@ -9513,8 +9240,8 @@ FtlVendorPartRead:
 	cmp	ip, #0
 	lsl	r3, r4, #9
 	str	r3, [fp, #-136]
-	beq	.L1391
-	ldr	r2, [r10, #3308]
+	beq	.L1355
+	ldr	r2, [r10, #3312]
 	sub	r0, fp, #124
 	str	ip, [fp, #-120]
 	str	ip, [fp, #-136]
@@ -9527,26 +9254,26 @@ FtlVendorPartRead:
 	ldr	r2, [fp, #-124]
 	ldr	ip, [fp, #-136]
 	cmn	r2, #1
-	ldr	r2, [r10, #3452]
+	ldr	r2, [r10, #3456]
 	mvneq	r8, #0
 	cmp	r2, #256
-	bne	.L1393
+	bne	.L1357
 	mov	r2, ip
 	mov	r1, r5
-	ldr	r0, .L1397+4
+	ldr	r0, .L1361+4
 	bl	sftl_printk
-	ldr	r2, [r10, #3308]
+	ldr	r2, [r10, #3312]
 	mov	r1, r5
-	ldr	r0, .L1397+8
+	ldr	r0, .L1361+8
 	bl	FtlMapWritePage
-.L1393:
-	ldr	r1, [r10, #3308]
+.L1357:
+	ldr	r1, [r10, #3312]
 	lsl	r2, r4, #9
 	ldr	r3, [fp, #-132]
 	mov	r0, r9
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1394:
+.L1358:
 	ldr	r3, [fp, #-128]
 	add	r5, r5, #1
 	sub	r6, r6, r4
@@ -9554,19 +9281,19 @@ FtlVendorPartRead:
 	add	r9, r9, r4, lsl #9
 	add	r3, r3, #4
 	str	r3, [fp, #-128]
-	b	.L1389
-.L1391:
+	b	.L1353
+.L1355:
 	lsl	r2, r4, #9
 	mov	r1, ip
 	mov	r0, r9
 	bl	ftl_memset
-	b	.L1394
-.L1398:
+	b	.L1358
+.L1362:
 	.align	2
-.L1397:
+.L1361:
 	.word	.LANCHOR0
 	.word	.LC108
-	.word	.LANCHOR0+3476
+	.word	.LANCHOR0+3612
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -9580,31 +9307,31 @@ FtlLoadEctTbl:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1401
-	movw	r5, #3340
+	ldr	r4, .L1365
 	mov	r0, #64
-	ldr	r2, [r4, #3348]
-	ldrh	r1, [r4, r5]
+	add	r5, r4, #3344
+	ldr	r2, [r4, #3352]
+	ldrh	r1, [r5]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #3348]
+	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1401+4
+	ldr	r3, .L1365+4
 	cmp	r2, r3
-	beq	.L1400
-	ldr	r1, .L1401+8
-	ldr	r0, .L1401+12
+	beq	.L1364
+	ldr	r1, .L1365+8
+	ldr	r0, .L1365+12
 	bl	sftl_printk
-	ldrh	r2, [r4, r5]
+	ldrh	r2, [r5]
 	mov	r1, #0
-	ldr	r0, [r4, #3348]
+	ldr	r0, [r4, #3352]
 	lsl	r2, r2, #9
 	bl	ftl_memset
-.L1400:
+.L1364:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1402:
+.L1366:
 	.align	2
-.L1401:
+.L1365:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC109
@@ -9622,48 +9349,48 @@ Ftl_load_ext_data:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1406
+	ldr	r4, .L1370
 	mov	r1, #1
 	mov	r0, #0
-	ldr	r2, .L1406+4
+	ldr	r5, .L1370+4
+	add	r2, r4, #2640
 	bl	FtlVendorPartRead
-	ldr	r5, .L1406+8
-	ldr	r3, [r4, #2636]
+	ldr	r3, [r4, #2640]
 	cmp	r3, r5
-	beq	.L1404
+	beq	.L1368
 	mov	r1, #512
-	ldr	r0, .L1406+4
+	add	r0, r4, #2640
 	bl	__memzero
-	str	r5, [r4, #2636]
-.L1404:
-	ldr	r3, [r4, #2636]
+	str	r5, [r4, #2640]
+.L1368:
+	ldr	r3, [r4, #2640]
 	cmp	r3, r5
-	bne	.L1405
-	ldr	r3, [r4, #2724]
-	str	r3, [r4, #2532]
+	bne	.L1369
 	ldr	r3, [r4, #2728]
+	str	r3, [r4, #2532]
+	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2536]
-	ldr	r3, [r4, #2644]
-	str	r3, [r4, #2528]
 	ldr	r3, [r4, #2648]
-	str	r3, [r4, #2516]
+	str	r3, [r4, #2528]
 	ldr	r3, [r4, #2652]
-	str	r3, [r4, #2508]
+	str	r3, [r4, #2516]
 	ldr	r3, [r4, #2656]
+	str	r3, [r4, #2508]
+	ldr	r3, [r4, #2660]
 	str	r3, [r4, #2524]
-	ldr	r3, [r4, #2664]
-	str	r3, [r4, #2552]
 	ldr	r3, [r4, #2668]
-	str	r3, [r4, #2560]
+	str	r3, [r4, #2552]
 	ldr	r3, [r4, #2672]
-	str	r3, [r4, #2512]
+	str	r3, [r4, #2560]
 	ldr	r3, [r4, #2676]
-	str	r3, [r4, #2520]
+	str	r3, [r4, #2512]
 	ldr	r3, [r4, #2680]
-	str	r3, [r4, #2564]
+	str	r3, [r4, #2520]
 	ldr	r3, [r4, #2684]
+	str	r3, [r4, #2564]
+	ldr	r3, [r4, #2688]
 	str	r3, [r4, #2568]
-.L1405:
+.L1369:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9672,13 +9399,64 @@ Ftl_load_ext_data:
 	bl	__udivsi3
 	str	r0, [r4, #2556]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1407:
+.L1371:
+	.align	2
+.L1370:
+	.word	.LANCHOR0
+	.word	1179929683
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	FtlMapBlkWriteDump_data
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r3, [r0, #36]
+	mov	r6, r0
+	cmp	r3, #0
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
+	mov	r3, #0
+	ldrh	r5, [r0, #6]
+	str	r3, [r0, #36]
+	ldr	r3, .L1379
+	ldr	r2, [r0, #24]
+	sub	r5, r5, #1
+	uxth	r5, r5
+	ldr	r0, [r3, #3308]
+	mov	r4, r3
+	ldr	r1, [r3, #3336]
+	str	r0, [r3, #3464]
+	str	r1, [r3, #3468]
+	ldr	r2, [r2, r5, lsl #2]
+	cmp	r2, #0
+	str	r2, [r3, #3460]
+	beq	.L1374
+	mov	r2, #1
+	add	r0, r3, #3456
+	mov	r1, r2
+	bl	FlashReadPages
+.L1375:
+	ldr	r2, [r4, #3464]
+	mov	r1, r5
+	mov	r0, r6
+	bl	FtlMapWritePage
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L1374:
+	ldrh	r2, [r3, #110]
+	mov	r1, #255
+	bl	ftl_memset
+	b	.L1375
+.L1380:
 	.align	2
-.L1406:
+.L1379:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2636
-	.word	1179929683
-	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
 	.global	FtlVpcTblFlush
 	.syntax unified
@@ -9691,29 +9469,29 @@ FtlVpcTblFlush:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1417
+	ldr	r4, .L1390
 	mov	r5, #0
 	mov	r1, #255
-	ldr	r10, .L1417+4
-	ldr	r3, [r4, #3300]
+	ldr	r10, .L1390+4
+	ldr	r3, [r4, #3304]
 	add	r6, r4, #2576
-	ldr	r7, [r4, #3332]
+	ldr	r7, [r4, #3336]
 	sub	r8, r6, #308
-	add	r9, r6, #876
-	str	r3, [r4, #3460]
+	add	r9, r4, #3456
+	str	r3, [r4, #3464]
 	ldrh	r3, [r6]
-	str	r7, [r4, #3464]
+	str	r7, [r4, #3468]
 	str	r5, [r7, #12]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, .L1417+8
+	ldr	r3, .L1390+8
 	strh	r3, [r7]	@ movhi
 	ldr	r3, [r4, #2584]
 	str	r5, [r7, #8]
 	ldrh	r2, [r6, #-226]
 	str	r3, [r7, #4]
-	ldr	r3, .L1417+12
+	ldr	r3, .L1390+12
 	str	r3, [r4, #2268]
-	ldr	r3, .L1417+16
+	ldr	r3, .L1390+16
 	str	r3, [r4, #2272]
 	ldrh	r3, [r6, #6]
 	strh	r3, [r8, #8]	@ movhi
@@ -9741,7 +9519,7 @@ FtlVpcTblFlush:
 	strh	r3, [r8, #22]	@ movhi
 	ldrh	r2, [r6, #-130]
 	ldrb	r3, [r4, #2450]	@ zero_extendqisi2
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	orr	r3, r3, r2, lsl #6
 	ldrh	r2, [r4, #110]
 	strh	r3, [r8, #24]	@ movhi
@@ -9756,17 +9534,17 @@ FtlVpcTblFlush:
 	bl	ftl_memset
 	mov	r1, r8
 	mov	r2, #48
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	movw	r8, #65535
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	ldr	r1, [r4, #2324]
 	lsl	r2, r2, #1
 	add	r0, r0, #48
 	bl	ftl_memcpy
 	ldrh	r0, [r4, #40]
-	ldr	r3, [r4, #3460]
+	ldr	r3, [r4, #3464]
 	ldr	r1, [r4, #24]
 	lsr	r2, r0, #3
 	add	r0, r0, #24
@@ -9777,19 +9555,19 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1409:
-	ldr	r3, [r4, #3300]
+.L1382:
+	ldr	r3, [r4, #3304]
 	ldrh	r1, [r6, #2]
 	ldrh	r2, [r6]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
 	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r3, [r4, #3468]
 	orr	r3, r1, r2, lsl #10
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	ldrh	r3, [r4, #104]
 	sub	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1410
+	blt	.L1383
 	mov	r3, #0
 	ldrh	r8, [r6, #4]
 	strh	r3, [r6, #2]	@ movhi
@@ -9801,29 +9579,33 @@ FtlVpcTblFlush:
 	str	r3, [r4, #2584]
 	str	r2, [r4, #2540]
 	lsl	r2, r0, #10
-	str	r2, [r4, #3456]
+	str	r2, [r4, #3460]
 	str	r3, [r7, #4]
 	strh	r0, [r7, #2]	@ movhi
-.L1410:
+.L1383:
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3304]
+	bl	js_hash
 	mov	r3, #1
-	mov	r0, r9
+	str	r0, [r7, #12]
 	mov	r2, r3
 	mov	r1, r3
+	mov	r0, r9
 	bl	FlashProgPages
 	ldrh	r3, [r6, #2]
-	ldr	r2, [r4, #3452]
+	ldr	r2, [r4, #3456]
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmn	r2, #1
 	strh	r3, [r6, #2]	@ movhi
-	bne	.L1411
+	bne	.L1384
 	cmp	r3, #1
-	bne	.L1412
-	movw	r2, #1135
+	bne	.L1385
+	movw	r2, #1138
 	mov	r1, r10
-	ldr	r0, .L1417+20
+	ldr	r0, .L1390+20
 	bl	sftl_printk
-.L1412:
+.L1385:
 	ldrh	r3, [r6, #2]
 	add	r5, r5, #1
 	uxth	r5, r5
@@ -9832,31 +9614,31 @@ FtlVpcTblFlush:
 	subeq	r3, r3, #1
 	strheq	r3, [r6, #2]	@ movhi
 	cmp	r5, #3
-	bls	.L1409
+	bls	.L1382
 	mov	r2, r5
-	ldr	r1, [r4, #3456]
-	ldr	r0, .L1417+24
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L1390+24
 	bl	sftl_printk
-.L1415:
-	b	.L1415
-.L1411:
+.L1388:
+	b	.L1388
+.L1384:
 	cmp	r2, #256
 	cmpne	r3, #1
-	beq	.L1409
+	beq	.L1382
 	movw	r3, #65535
 	cmp	r8, r3
-	beq	.L1416
+	beq	.L1389
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
-.L1416:
+.L1389:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1418:
+.L1391:
 	.align	2
-.L1417:
+.L1390:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+486
+	.word	.LANCHOR1+471
 	.word	-3932
 	.word	1179929683
 	.word	1342177352
@@ -9894,17 +9676,17 @@ sftl_deinit:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1422
+	ldr	r3, .L1395
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1421
+	bne	.L1394
 	bl	FtlSysFlush
-.L1421:
+.L1394:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1423:
+.L1396:
 	.align	2
-.L1422:
+.L1395:
 	.word	.LANCHOR2
 	.size	sftl_deinit, .-sftl_deinit
 	.align	2
@@ -9921,21 +9703,21 @@ sftl_discard:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	add	r2, r0, r1
-	ldr	r4, .L1439
+	ldr	r4, .L1412
 	mov	r8, r0
 	mov	r6, r1
 	ldr	r3, [r4, #140]
 	cmp	r2, r3
 	mvnhi	r0, #0
-	bhi	.L1424
+	bhi	.L1397
 	cmp	r1, #31
-	bhi	.L1426
-.L1431:
+	bhi	.L1399
+.L1404:
 	mov	r0, #0
-.L1424:
+.L1397:
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1426:
+.L1399:
 	ldrh	r5, [r4, #58]
 	mov	r1, r5
 	bl	__udivsi3
@@ -9944,36 +9726,36 @@ sftl_discard:
 	sub	r8, r8, r3
 	uxth	r8, r8
 	cmp	r8, #0
-	beq	.L1427
+	beq	.L1400
 	sub	r5, r5, r8
 	add	r7, r0, #1
 	cmp	r5, r6
 	movcs	r5, r6
 	uxth	r5, r5
 	sub	r6, r6, r5
-.L1427:
+.L1400:
 	mvn	r3, #0
 	str	r3, [fp, #-36]
-.L1428:
+.L1401:
 	ldrh	r3, [r4, #58]
 	cmp	r6, r3
-	bcs	.L1430
+	bcs	.L1403
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1431
+	bls	.L1404
 	mov	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1431
-.L1430:
+	b	.L1404
+.L1403:
 	mov	r2, #0
 	sub	r1, fp, #40
 	mov	r0, r7
 	bl	log2phys
 	ldr	r3, [fp, #-40]
 	cmn	r3, #1
-	beq	.L1429
+	beq	.L1402
 	ldr	r3, [r4, #3660]
 	mov	r2, #1
 	sub	r1, fp, #36
@@ -9988,14 +9770,14 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1429:
+.L1402:
 	ldrh	r3, [r4, #58]
 	add	r7, r7, #1
 	sub	r6, r6, r3
-	b	.L1428
-.L1440:
+	b	.L1401
+.L1413:
 	.align	2
-.L1439:
+.L1412:
 	.word	.LANCHOR0
 	.size	sftl_discard, .-sftl_discard
 	.align	2
@@ -10012,92 +9794,92 @@ FtlVpcCheckAndModify:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1454
-	ldr	r1, .L1454+4
-	ldr	r0, .L1454+8
+	ldr	r4, .L1427
+	ldr	r1, .L1427+4
+	ldr	r0, .L1427+8
 	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
-	ldr	r0, [r4, #3352]
+	ldr	r0, [r4, #3356]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-.L1442:
+.L1415:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1444
-	ldr	r9, .L1454+12
+	bcc	.L1417
+	ldr	r9, .L1427+12
 	mov	r7, #0
-	ldr	r10, .L1454+16
-.L1445:
+	ldr	r10, .L1427+16
+.L1418:
 	ldrh	r3, [r4, #40]
 	uxth	r6, r7
 	cmp	r3, r6
-	bhi	.L1450
+	bhi	.L1423
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1444:
+.L1417:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1443
+	beq	.L1416
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r4, #3352]
+	ldr	r2, [r4, #3356]
 	lsl	r0, r0, #1
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1443:
+.L1416:
 	add	r5, r5, #1
-	b	.L1442
-.L1450:
+	b	.L1415
+.L1423:
 	uxth	r8, r7
 	ldr	r3, [r4, #2324]
 	movw	r1, #65535
 	lsl	r5, r8, #1
 	ldrh	r2, [r3, r5]
-	ldr	r3, [r4, #3352]
+	ldr	r3, [r4, #3356]
 	ldrh	r3, [r3, r5]
 	cmp	r2, r1
 	cmpne	r2, r3
-	beq	.L1447
+	beq	.L1420
 	mov	r1, r8
 	mov	r0, r9
 	bl	sftl_printk
 	ldrh	r3, [r10]
 	cmp	r3, r6
-	beq	.L1447
-	ldr	r3, .L1454+20
+	beq	.L1420
+	ldr	r3, .L1427+20
 	ldrh	r2, [r3]
 	cmp	r2, r6
-	beq	.L1447
+	beq	.L1420
 	ldrh	r3, [r3, #-48]
 	cmp	r3, r6
-	beq	.L1447
+	beq	.L1420
 	ldr	r3, [r4, #2324]
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
-	ldr	r2, [r4, #3352]
+	ldr	r2, [r4, #3356]
 	ldrh	r2, [r2, r5]
 	strh	r2, [r3, r5]	@ movhi
-	bne	.L1449
-.L1447:
+	bne	.L1422
+.L1420:
 	add	r7, r7, #1
-	b	.L1445
-.L1449:
+	b	.L1418
+.L1422:
 	mov	r0, r8
 	bl	update_vpc_list
-	b	.L1447
-.L1455:
+	b	.L1420
+.L1428:
 	.align	2
-.L1454:
+.L1427:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+501
-	.word	.LC95
+	.word	.LANCHOR1+486
+	.word	.LC101
 	.word	.LC111
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR0+2444
@@ -10114,49 +9896,49 @@ allocate_new_data_superblock:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1466
+	ldr	r4, .L1439
 	mov	r6, r0
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1457
-	movw	r2, #2714
-	ldr	r1, .L1466+4
-	ldr	r0, .L1466+8
+	bcs	.L1430
+	movw	r2, #2760
+	ldr	r1, .L1439+4
+	ldr	r0, .L1439+8
 	bl	sftl_printk
-.L1457:
+.L1430:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1458
+	beq	.L1431
 	ldr	r2, [r4, #2324]
 	lsl	r3, r5, #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1459
+	beq	.L1432
 	bl	INSERT_DATA_LIST
-.L1458:
+.L1431:
 	mov	r3, #1
 	strb	r3, [r6, #8]
-	movw	r3, #3438
+	movw	r3, #3442
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1460
+	beq	.L1433
 	cmp	r5, r0
-	bne	.L1461
+	bne	.L1434
 	ldr	r2, [r4, #2324]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1462
-.L1461:
+	beq	.L1435
+.L1434:
 	bl	update_vpc_list
-.L1462:
+.L1435:
 	mvn	r2, #0
-	movw	r3, #3438
+	movw	r3, #3442
 	strh	r2, [r4, r3]	@ movhi
-.L1460:
+.L1433:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10165,14 +9947,14 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1459:
+.L1432:
 	bl	INSERT_FREE_LIST
-	b	.L1458
-.L1467:
+	b	.L1431
+.L1440:
 	.align	2
-.L1466:
+.L1439:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+522
+	.word	.LANCHOR1+507
 	.word	.LC1
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
@@ -10189,26 +9971,26 @@ FtlProgPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r7, #0
-	ldr	r6, .L1482
+	ldr	r6, .L1455
 	mov	r4, r3
-	ldr	r10, .L1482+4
+	ldr	r10, .L1455+4
 	mov	r2, #0
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	mov	r5, r0
 	mov	r9, r1
 	bl	FlashProgPages
-.L1469:
+.L1442:
 	cmp	r7, r9
-	beq	.L1476
+	beq	.L1449
 	mov	r8, #0
-	b	.L1477
-.L1472:
+	b	.L1450
+.L1445:
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4]
 	cmp	r3, r0
-	bne	.L1470
+	bne	.L1443
 	ldr	r1, [r6, #2324]
 	lsl	r3, r3, #1
 	ldrh	r0, [r4, #4]
@@ -10219,16 +10001,16 @@ FtlProgPages:
 	strb	r8, [r4, #6]
 	strh	r8, [r4, #4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
-.L1470:
+.L1443:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1471
+	bne	.L1444
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1471:
-	ldr	r3, [r6, #2732]
+.L1444:
+	ldr	r3, [r6, #2736]
 	add	r3, r3, #1
-	str	r3, [r6, #2732]
+	str	r3, [r6, #2736]
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlGcMarkBadPhyBlk
@@ -10241,19 +10023,19 @@ FtlProgPages:
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	FlashProgPages
-.L1477:
+.L1450:
 	ldr	r3, [r5]
 	cmn	r3, #1
-	beq	.L1472
+	beq	.L1445
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1473
+	bcc	.L1446
 	mov	r2, #960
 	mov	r1, r10
-	ldr	r0, .L1482+8
+	ldr	r0, .L1455+8
 	bl	sftl_printk
-.L1473:
+.L1446:
 	ldr	r3, [r5, #4]
 	sub	r1, fp, #40
 	mov	r2, #1
@@ -10268,39 +10050,39 @@ FtlProgPages:
 	ldr	r3, [fp, #-48]
 	mov	r8, r0
 	cmn	r3, #1
-	beq	.L1474
+	beq	.L1447
 	ldr	r2, [r6, #2324]
 	lsl	r3, r0, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L1475
+	bne	.L1448
 	mov	r1, r0
-	ldr	r0, .L1482+12
+	ldr	r0, .L1455+12
 	bl	sftl_printk
-.L1475:
+.L1448:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1474:
+.L1447:
 	add	r7, r7, #1
 	add	r5, r5, #20
-	b	.L1469
-.L1476:
+	b	.L1442
+.L1449:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1468
+	bcc	.L1441
 	movw	r2, #975
-	ldr	r1, .L1482+4
-	ldr	r0, .L1482+8
+	ldr	r1, .L1455+4
+	ldr	r0, .L1455+8
 	bl	sftl_printk
-.L1468:
+.L1441:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1483:
+.L1456:
 	.align	2
-.L1482:
+.L1455:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+551
+	.word	.LANCHOR1+536
 	.word	.LC1
 	.word	.LC112
 	.size	FtlProgPages, .-FtlProgPages
@@ -10318,111 +10100,113 @@ FtlGcFreeTempBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	movw	r3, #2444
-	ldr	r4, .L1510
+	ldr	r4, .L1483
 	movw	r2, #65535
 	ldrh	r5, [r4, r3]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1485
-.L1495:
+	bne	.L1458
+.L1468:
 	mov	r3, #0
-	str	r3, [r4, #3444]
+	str	r3, [r4, #3448]
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1508
-.L1486:
+	bne	.L1481
+.L1459:
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1485:
+.L1458:
 	cmp	r0, #0
-	beq	.L1488
-	ldr	r3, .L1510+4
+	beq	.L1461
+	ldr	r3, .L1483+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1489
-.L1490:
+	beq	.L1462
+.L1463:
 	mov	r1, #2
-.L1488:
-	ldr	r0, .L1510+8
+.L1461:
+	ldr	r0, .L1483+8
 	bl	FtlGcScanTempBlk
 	cmn	r0, #1
 	str	r0, [fp, #-44]
-	beq	.L1491
+	beq	.L1464
 	ldr	r2, [r4, #2328]
 	lsl	r5, r5, #1
 	ldrh	r3, [r2, r5]
 	cmp	r3, #4
-	bls	.L1492
+	bls	.L1465
 	sub	r3, r3, #5
 	mov	r0, #1
 	strh	r3, [r2, r5]	@ movhi
 	bl	FtlEctTblFlush
-.L1492:
-	ldr	r3, [r4, #3444]
+.L1465:
+	ldr	r3, [r4, #3448]
 	cmp	r3, #0
-	bne	.L1493
-	ldr	r3, [r4, #2732]
+	bne	.L1466
+	ldr	r3, [r4, #2736]
 	ldr	r0, [fp, #-44]
 	add	r3, r3, #1
 	ubfx	r0, r0, #10, #16
-	str	r3, [r4, #2732]
+	str	r3, [r4, #2736]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1493:
+.L1466:
 	mov	r3, #0
-	str	r3, [r4, #3444]
-.L1504:
+	str	r3, [r4, #3448]
+.L1477:
 	mov	r0, #1
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1489:
+.L1462:
 	mov	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	movw	r3, #2344
 	ldrh	r3, [r4, r3]
 	cmp	r3, #17
-	bhi	.L1490
-	b	.L1488
-.L1491:
-	ldr	r3, .L1510+4
+	bhi	.L1463
+	b	.L1461
+.L1464:
+	ldr	r3, .L1483+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1504
-	b	.L1495
-.L1508:
+	bne	.L1477
+	b	.L1468
+.L1481:
+	movw	r3, #3204
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
+	ldrh	r2, [r4, r3]
 	ldrh	r3, [r4, #102]
-	ldr	r6, .L1510+12
 	mul	r3, r3, r1
-	ldrh	r2, [r6]
 	cmp	r2, r3
-	beq	.L1496
+	beq	.L1469
 	mov	r2, #162
-	ldr	r1, .L1510+16
-	ldr	r0, .L1510+20
+	ldr	r1, .L1483+12
+	ldr	r0, .L1483+16
 	bl	sftl_printk
-.L1496:
+.L1469:
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
 	movw	r3, #2444
 	ldrh	r0, [r4, #102]
-	mov	r5, #0
+	mov	r6, #0
 	ldrh	r3, [r4, r3]
 	ldr	r1, [r4, #2324]
-	ldr	r10, .L1510+20
+	ldr	r9, .L1483+20
 	smulbb	r2, r2, r0
+	ldr	r10, .L1483+12
 	lsl	r3, r3, #1
 	strh	r2, [r1, r3]	@ movhi
+	movw	r3, #3204
 	ldr	r2, [r4, #2528]
-	ldrh	r3, [r6]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1497:
-	ldrh	r2, [r6]
-	uxth	r3, r5
+.L1470:
+	ldrh	r2, [r9]
+	uxth	r3, r6
 	cmp	r2, r3
-	bhi	.L1501
+	bhi	.L1474
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2444
@@ -10432,84 +10216,86 @@ FtlGcFreeTempBlock:
 	lsl	r2, r0, #1
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	beq	.L1502
+	beq	.L1475
 	bl	INSERT_DATA_LIST
-.L1503:
-	mvn	r7, #0
-	movw	r3, #3192
-	strh	r7, [r4, r5]	@ movhi
+.L1476:
+	mvn	r6, #0
+	movw	r3, #3204
+	strh	r6, [r4, r5]	@ movhi
 	mov	r5, #0
 	strh	r5, [r4, r3]	@ movhi
-	strh	r5, [r6]	@ movhi
+	movw	r3, #3196
+	strh	r5, [r4, r3]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	movw	r3, #2588
-	strh	r7, [r4, r3]	@ movhi
-	movw	r3, #2344
-	ldrh	r2, [r4, r3]
-	movw	r3, #2572
-	ldrh	r3, [r4, r3]
-	add	r3, r3, r3, lsl #1
-	cmp	r2, r3, asr #2
+	movw	r2, #2344
+	ldr	r3, .L1483+24
+	ldrh	r1, [r4, r2]
+	movw	r2, #2572
+	ldrh	r2, [r4, r2]
+	strh	r6, [r3]	@ movhi
+	add	r2, r2, r2, lsl #1
+	cmp	r1, r2, asr #2
+	addgt	r3, r3, #560
 	movgt	r2, #20
-	movwgt	r3, #3148
-	strhgt	r2, [r4, r3]	@ movhi
-	b	.L1486
-.L1501:
-	uxth	r3, r5
+	strhgt	r2, [r3]	@ movhi
+	b	.L1459
+.L1474:
+	uxth	r3, r6
 	mov	r7, #12
-	ldr	r8, [r4, #3196]
+	ldr	r8, [r4, #3200]
 	mul	r7, r7, r3
-	ldr	r2, [r4, #2504]
-	add	r9, r8, r7
-	ldr	r1, [r9, #8]
-	cmp	r1, r2
-	bcc	.L1498
+	ldr	r3, [r4, #2504]
+	add	r5, r8, r7
+	ldr	r2, [r5, #8]
+	cmp	r2, r3
+	bcc	.L1471
 	mov	r2, #168
-	ldr	r1, .L1510+16
-	mov	r0, r10
+	mov	r1, r10
+	ldr	r0, .L1483+16
 	bl	sftl_printk
-.L1498:
+.L1471:
 	mov	r2, #0
 	sub	r1, fp, #44
-	ldr	r0, [r9, #8]
+	ldr	r0, [r5, #8]
 	bl	log2phys
-	ldr	r2, [fp, #-44]
+	ldr	r3, [fp, #-44]
 	ldr	r0, [r8, r7]
-	cmp	r0, r2
-	bne	.L1499
+	cmp	r0, r3
+	bne	.L1472
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r2, #1
 	mov	r7, r0
-	add	r1, r9, #4
-	ldr	r0, [r9, #8]
+	add	r1, r5, #4
+	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1509:
+.L1482:
 	bl	decrement_vpc_count
-.L1500:
-	add	r5, r5, #1
-	b	.L1497
-.L1499:
-	ldr	r3, [r9, #4]
-	cmp	r2, r3
-	beq	.L1500
-	ldr	r3, .L1510+8
+.L1473:
+	add	r6, r6, #1
+	b	.L1470
+.L1472:
+	ldr	r2, [r5, #4]
+	cmp	r3, r2
+	beq	.L1473
+	ldr	r3, .L1483+8
 	ldrh	r0, [r3]
-	b	.L1509
-.L1502:
+	b	.L1482
+.L1475:
 	bl	INSERT_FREE_LIST
-	b	.L1503
-.L1511:
+	b	.L1476
+.L1484:
 	.align	2
-.L1510:
+.L1483:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+3200
-	.word	.LANCHOR1+564
+	.word	.LANCHOR1+549
 	.word	.LC1
+	.word	.LANCHOR0+3204
+	.word	.LANCHOR0+2592
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -10523,8 +10309,8 @@ FtlGcPageRecovery:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1514
-	ldr	r5, .L1514+4
+	ldr	r4, .L1487
+	ldr	r5, .L1487+4
 	ldrh	r1, [r4, #102]
 	mov	r0, r5
 	bl	FtlGcScanTempBlk
@@ -10532,16 +10318,16 @@ FtlGcPageRecovery:
 	ldrh	r3, [r4, #102]
 	cmp	r2, r3
 	ldmfdcc	sp, {r4, r5, fp, sp, pc}
-	add	r0, r4, #3392
+	add	r0, r5, #952
 	bl	FtlMapBlkWriteDump_data
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
-	str	r3, [r4, #3444]
+	str	r3, [r4, #3448]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1515:
+.L1488:
 	.align	2
-.L1514:
+.L1487:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10557,10 +10343,10 @@ FtlPowerLostRecovery:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1517
+	ldr	r4, .L1490
 	mov	r6, #0
 	add	r5, r4, #2336
-	str	r6, [r4, #3524]
+	str	r6, [r4, #3480]
 	add	r5, r5, #12
 	add	r4, r4, #2384
 	mov	r0, r5
@@ -10577,9 +10363,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1518:
+.L1491:
 	.align	2
-.L1517:
+.L1490:
 	.word	.LANCHOR0
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -10594,68 +10380,68 @@ Ftl_gc_temp_data_write_back:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1526
+	ldr	r4, .L1499
 	mov	r3, #0
 	mov	r5, #0
 	mov	r6, #20
 	mov	r2, r3
-	ldr	r1, [r4, #3164]
-	ldr	r0, [r4, #3292]
+	ldr	r1, [r4, #3168]
+	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1520:
-	ldr	r1, [r4, #3164]
+.L1493:
+	ldr	r1, [r4, #3168]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1523
-	ldr	r0, [r4, #3292]
+	bhi	.L1496
+	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
-	ldr	r3, .L1526+4
+	ldr	r3, .L1499+4
 	mov	r0, #0
-	str	r0, [r4, #3164]
+	str	r0, [r4, #3168]
 	ldrh	r3, [r3, #4]
 	cmp	r3, r0
 	ldmfdne	sp, {r4, r5, r6, fp, sp, pc}
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1525
-.L1523:
+	b	.L1498
+.L1496:
 	mul	r3, r6, r3
-	ldr	r2, [r4, #3292]
+	ldr	r2, [r4, #3296]
 	add	r5, r5, #1
 	ldr	r0, [r2, r3]
 	add	r1, r2, r3
 	cmn	r0, #1
-	bne	.L1521
+	bne	.L1494
 	movw	r1, #2444
 	ldr	ip, [r4, #2324]
 	ldrh	r2, [r4, r1]
 	mov	lr, #0
 	lsl	r2, r2, #1
 	strh	lr, [ip, r2]	@ movhi
-	ldr	r2, [r4, #2732]
+	ldr	r2, [r4, #2736]
 	strh	r0, [r4, r1]	@ movhi
 	add	r2, r2, #1
-	str	r2, [r4, #2732]
-	ldr	r2, [r4, #3292]
+	str	r2, [r4, #2736]
+	ldr	r2, [r4, #3296]
 	add	r3, r2, r3
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1525:
+.L1498:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1521:
+.L1494:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1520
-.L1527:
+	b	.L1493
+.L1500:
 	.align	2
-.L1526:
+.L1499:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10671,181 +10457,42 @@ Ftl_get_new_temp_ppa:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1531
+	ldr	r4, .L1504
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1529
-	ldr	r3, .L1531+4
+	beq	.L1502
+	ldr	r3, .L1504+4
 	ldrh	r3, [r3, #4]
 	cmp	r3, #0
-	bne	.L1530
-.L1529:
+	bne	.L1503
+.L1502:
 	mov	r0, #0
 	mov	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1531+4
+	ldr	r0, .L1504+4
 	strb	r5, [r4, #2452]
 	bl	allocate_data_superblock
-	movw	r3, #3192
+	movw	r3, #3196
+	strh	r5, [r4, r3]	@ movhi
+	movw	r3, #3204
 	strh	r5, [r4, r3]	@ movhi
-	ldr	r3, .L1531+8
-	strh	r5, [r3]	@ movhi
 	bl	l2p_flush
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1530:
-	ldr	r0, .L1531+4
+.L1503:
+	ldr	r0, .L1504+4
 	bl	get_new_active_ppa
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1532:
+.L1505:
 	.align	2
-.L1531:
+.L1504:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+3200
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
-	.global	FtlSysBlkInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L1548
-	mov	r3, #0
-	add	r7, r4, #3520
-	ldrh	r0, [r4, #36]
-	strh	r3, [r7]	@ movhi
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	add	r3, r4, #2576
-	ldrh	r2, [r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L1534
-.L1536:
-	mvn	r8, #0
-.L1533:
-	mov	r0, r8
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1534:
-	bl	FtlLoadSysInfo
-	subs	r8, r0, #0
-	bne	.L1536
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	mov	r0, #1
-	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r4, #138]
-	mov	r3, r8
-	ldr	r2, [r4, #2492]
-	mov	r0, #12
-.L1537:
-	cmp	r3, r1
-	bge	.L1542
-	mla	ip, r0, r3, r2
-	ldr	ip, [ip, #4]
-	cmp	ip, #0
-	bge	.L1538
-.L1542:
-	ldr	r5, .L1548+4
-	cmp	r3, r1
-	ldrh	r2, [r5, #28]
-	add	r6, r5, #80
-	add	r2, r2, #1
-	strh	r2, [r5, #28]	@ movhi
-	bge	.L1547
-.L1539:
-	ldr	r7, .L1548+8
-	ldr	r0, .L1548+12
-	bl	FtlSuperblockPowerLostFix
-	mov	r0, r7
-	bl	FtlSuperblockPowerLostFix
-	movw	r3, #2348
-	ldr	r1, [r4, #2324]
-	ldrh	r3, [r4, r3]
-	ldrh	r0, [r6, #4]
-	lsl	r3, r3, #1
-	ldrh	r2, [r1, r3]
-	sub	r2, r2, r0
-	strh	r2, [r1, r3]	@ movhi
-	movw	r2, #2396
-	ldrh	r2, [r4, r2]
-	ldrh	r3, [r4, #102]
-	ldr	r0, [r4, #2324]
-	ldrh	ip, [r7, #4]
-	lsl	r2, r2, #1
-	strh	r3, [r6, #2]	@ movhi
-	mov	r3, #0
-	strb	r3, [r4, #2354]
-	strh	r3, [r6, #4]	@ movhi
-	ldrh	r1, [r0, r2]
-	sub	r1, r1, ip
-	strh	r1, [r0, r2]	@ movhi
-	strb	r3, [r4, #2402]
-	strh	r3, [r7, #4]	@ movhi
-	ldrh	r3, [r5, #30]
-	ldrh	r2, [r4, #102]
-	add	r3, r3, #1
-	strh	r2, [r7, #2]	@ movhi
-	strh	r3, [r5, #30]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1543
-.L1538:
-	add	r3, r3, #1
-	b	.L1537
-.L1547:
-	ldrh	r3, [r7]
-	cmp	r3, #0
-	bne	.L1539
-.L1543:
-	bl	FtlVpcCheckAndModify
-	movw	r3, #2348
-	ldrh	r0, [r4, r3]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1533
-	ldrh	r3, [r6, #4]
-	cmp	r3, #0
-	bne	.L1533
-	ldr	r5, .L1548+8
-	ldrh	r3, [r5, #4]
-	cmp	r3, #0
-	bne	.L1533
-	bl	FtlGcRefreshBlock
-	movw	r3, #2396
-	ldrh	r0, [r4, r3]
-	bl	FtlGcRefreshBlock
-	bl	FtlVpcTblFlush
-	sub	r0, r5, #48
-	bl	allocate_new_data_superblock
-	mov	r0, r5
-	bl	allocate_new_data_superblock
-	b	.L1533
-.L1549:
-	.align	2
-.L1548:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2348
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
-	.align	2
 	.global	rk_ftl_garbage_collect
 	.syntax unified
 	.arm
@@ -10858,405 +10505,394 @@ rk_ftl_garbage_collect:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #36
-	ldr	r3, .L1669
+	ldr	r3, .L1625
 	str	r0, [fp, #-60]
-	ldr	r0, [r3, #3272]
-	mov	r6, r3
+	ldr	r0, [r3, #3276]
+	mov	r4, r3
 	cmp	r0, #0
 	movne	r0, #0
-	bne	.L1550
+	bne	.L1506
 	add	r2, r3, #2336
 	ldrh	r2, [r2]
 	cmp	r2, #47
-	bls	.L1550
-	ldr	r2, .L1669+4
+	bls	.L1506
+	ldr	r2, .L1625+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1552
-.L1555:
-	movw	r3, #3204
+	bne	.L1508
+.L1511:
+	movw	r3, #3208
 	movw	r0, #65535
-	ldrh	r1, [r6, r3]
+	ldrh	r1, [r4, r3]
 	cmp	r1, r0
-	bne	.L1553
-.L1554:
+	bne	.L1509
+.L1510:
 	bl	FtlReadRefresh
-	ldr	r3, [r6, #3152]
-	movw	r4, #65535
+	ldr	r3, [r4, #3156]
+	movw	r5, #65535
 	ldr	r2, [fp, #-60]
+	ldr	r7, .L1625+8
 	add	r3, r3, #1
 	add	r3, r3, r2, lsl #7
-	movw	r2, #2588
-	ldrh	r2, [r6, r2]
-	str	r3, [r6, #3152]
-	cmp	r2, r4
-	bne	.L1556
+	ldrh	r2, [r7]
+	str	r3, [r4, #3156]
+	cmp	r2, r5
+	bne	.L1512
 	movw	r1, #2444
-	ldrh	r4, [r6, r1]
-	cmp	r4, r2
-	movne	r4, r2
-	bne	.L1556
-	movw	r2, #3202
-	ldrh	r5, [r6, r2]
-	cmp	r5, r4
-	bne	.L1556
-	movw	r9, #2344
-	ldrh	r2, [r6, r9]
+	ldrh	r5, [r4, r1]
+	cmp	r5, r2
+	movne	r5, r2
+	bne	.L1512
+	movw	r2, #3206
+	ldrh	r6, [r4, r2]
+	cmp	r6, r5
+	bne	.L1512
+	movw	r10, #2344
+	ldrh	r2, [r4, r10]
 	cmp	r2, #24
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	movls	r4, r5
-	bls	.L1556
-	ldr	r3, .L1669+8
-	mov	r8, #0
-	str	r8, [r6, #3152]
-	strh	r8, [r3]	@ movhi
+	movls	r5, r6
+	bls	.L1512
+	mov	r9, #0
+	add	r3, r7, #1072
+	str	r9, [r4, #3156]
+	strh	r9, [r3]	@ movhi
 	bl	GetSwlReplaceBlock
-	cmp	r0, r5
-	mov	r4, r0
-	movne	r5, r0
-	bne	.L1558
-	movw	r7, #3150
-	ldrh	r2, [r6, r9]
-	ldrh	r3, [r6, r7]
+	cmp	r0, r6
+	mov	r5, r0
+	movne	r6, r0
+	bne	.L1514
+	movw	r8, #3154
+	ldrh	r2, [r4, r10]
+	ldrh	r3, [r4, r8]
 	cmp	r2, r3
-	bcs	.L1559
+	bcs	.L1515
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
-	cmp	r3, r4
-	beq	.L1561
+	cmp	r3, r5
+	beq	.L1517
 	mov	r0, r3
-	ldr	r3, [r6, #2324]
+	ldr	r3, [r4, #2324]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #7
-	bhi	.L1562
-	mov	r0, r8
+	bhi	.L1518
+	mov	r0, r9
 	bl	List_get_gc_head_node
-	uxth	r5, r0
+	uxth	r6, r0
 	mov	r3, #128
-	strh	r3, [r6, r7]	@ movhi
-	cmp	r5, r4
-	bne	.L1558
-.L1561:
+	strh	r3, [r4, r8]	@ movhi
+	cmp	r6, r5
+	bne	.L1514
+.L1517:
 	bl	FtlGcReFreshBadBlk
-.L1556:
+.L1512:
 	movw	r1, #65535
 	ldr	r2, [fp, #-60]
-	sub	r3, r4, r1
+	sub	r3, r5, r1
 	clz	r3, r3
 	lsr	r3, r3, #5
 	cmp	r2, #0
 	movne	r2, #0
 	andeq	r2, r3, #1
 	cmp	r2, #0
-	beq	.L1564
+	beq	.L1520
 	movw	r3, #2344
-	ldrh	r3, [r6, r3]
+	ldrh	r3, [r4, r3]
 	cmp	r3, #24
-	movhi	r5, #1
-	bhi	.L1565
-	ldrh	r5, [r6, #102]
+	movhi	r6, #1
+	bhi	.L1521
+	ldrh	r6, [r4, #102]
 	cmp	r3, #16
-	lsrhi	r5, r5, #5
-	bhi	.L1565
+	lsrhi	r6, r6, #5
+	bhi	.L1521
 	cmp	r3, #12
-	lsrhi	r5, r5, #4
-	bhi	.L1565
+	lsrhi	r6, r6, #4
+	bhi	.L1521
 	cmp	r3, #8
-	lsrhi	r5, r5, #2
-.L1565:
-	movw	r2, #3148
-	ldrh	r1, [r6, r2]
-	cmp	r1, r3
-	bcs	.L1569
+	lsrhi	r6, r6, #2
+.L1521:
+	ldr	r1, .L1625+12
+	ldrh	r2, [r1]
+	cmp	r2, r3
+	mov	r2, r1
+	bcs	.L1525
 	movw	r3, #2444
-	movw	r1, #65535
-	ldrh	r3, [r6, r3]
-	cmp	r3, r1
-	bne	.L1570
-	movw	r1, #3202
-	ldrh	r1, [r6, r1]
-	cmp	r1, r3
-	bne	.L1570
-	ldr	r3, .L1669+8
+	movw	r0, #65535
+	ldrh	r3, [r4, r3]
+	cmp	r3, r0
+	bne	.L1526
+	movw	r0, #3206
+	ldrh	r0, [r4, r0]
+	cmp	r0, r3
+	bne	.L1526
+	add	r3, r1, #512
 	ldrh	r0, [r3]
 	cmp	r0, #0
-	bne	.L1571
-	ldr	r3, [r6, #2504]
-	ldr	r1, [r6, #2500]
+	bne	.L1527
+	ldr	r3, [r4, #2504]
+	ldr	ip, [r4, #2500]
 	add	r3, r3, r3, lsl #1
-	cmp	r1, r3, lsr #2
+	cmp	ip, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1663
-.L1571:
+	strhcs	r3, [r1]	@ movhi
+	bcs	.L1529
+.L1527:
 	movw	r3, #2572
-	movw	r2, #3148
-	ldrh	r3, [r6, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1663:
-	strh	r3, [r6, r2]	@ movhi
+	strh	r3, [r2]	@ movhi
+.L1529:
 	mov	r3, #0
-	str	r3, [r6, #3160]
-.L1550:
+	str	r3, [r4, #3164]
+.L1506:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1552:
+.L1508:
 	movw	r1, #2444
 	ldrh	r3, [r3, r1]
 	cmp	r3, r2
-	beq	.L1555
+	beq	.L1511
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1555
+	beq	.L1511
 	mov	r0, #1
-	b	.L1550
-.L1553:
-	movw	r2, #3202
-	ldrh	ip, [r6, r2]
+	b	.L1506
+.L1509:
+	movw	r2, #3206
+	ldrh	ip, [r4, r2]
 	cmp	ip, r0
-	strheq	r1, [r6, r2]	@ movhi
+	strheq	r1, [r4, r2]	@ movhi
 	mvneq	r2, #0
-	strheq	r2, [r6, r3]	@ movhi
-	b	.L1554
-.L1562:
+	strheq	r2, [r4, r3]	@ movhi
+	b	.L1510
+.L1518:
 	mov	r3, #64
-.L1662:
-	strh	r3, [r6, r7]	@ movhi
-	b	.L1561
-.L1559:
+.L1618:
+	strh	r3, [r4, r8]	@ movhi
+	b	.L1517
+.L1515:
 	mov	r3, #80
-	b	.L1662
-.L1558:
-	movw	r0, #3148
-	ldr	r3, [r6, #2324]
-	ldrh	r0, [r6, r0]
-	lsl	r1, r5, #1
+	b	.L1618
+.L1514:
+	ldr	r0, .L1625+12
+	lsl	r1, r6, #1
+	ldr	r3, [r4, #2324]
 	movw	r2, #2344
+	ldrh	r2, [r4, r2]
+	mov	r5, r6
+	ldrh	r0, [r0]
 	ldrh	r3, [r3, r1]
-	mov	r4, r5
-	ldrh	r2, [r6, r2]
 	str	r0, [sp, #4]
-	ldr	r0, [r6, #2328]
+	ldr	r0, [r4, #2328]
 	ldrh	r1, [r0, r1]
-	ldr	r0, .L1669+12
+	ldr	r0, .L1625+16
 	str	r1, [sp]
-	mov	r1, r5
+	mov	r1, r6
 	bl	sftl_printk
-	b	.L1561
-.L1570:
+	b	.L1517
+.L1526:
 	movw	r3, #2572
-	movw	r2, #3148
-	ldrh	r3, [r6, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-	strh	r3, [r6, r2]	@ movhi
-.L1569:
-	movw	r3, #3206
-	movw	r4, #65535
-	ldrh	r3, [r6, r3]
+	strh	r3, [r2]	@ movhi
+.L1525:
+	movw	r3, #3210
+	movw	r5, #65535
+	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	addne	r5, r5, #32
-	uxthne	r5, r5
-.L1575:
-	movw	r3, #2588
-	ldrh	r2, [r6, r3]
-	movw	r1, #65535
-	cmp	r2, r1
-	bne	.L1584
-	cmp	r4, r2
-	strhne	r4, [r6, r3]	@ movhi
-	bne	.L1586
-	movw	r2, #3202
-	ldrh	r3, [r6, r2]
-	cmp	r3, r4
-	beq	.L1586
-	ldr	r1, [r6, #2324]
+	addne	r6, r6, #32
+	uxthne	r6, r6
+.L1531:
+	ldrh	r3, [r7]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1540
+	cmp	r5, r3
+	strhne	r5, [r7]	@ movhi
+	bne	.L1542
+	movw	r2, #3206
+	ldrh	r3, [r4, r2]
+	cmp	r3, r5
+	beq	.L1542
+	ldr	r1, [r4, #2324]
 	lsl	r3, r3, #1
 	ldrh	r3, [r1, r3]
 	cmp	r3, #0
 	mvneq	r3, #0
-	strheq	r3, [r6, r2]	@ movhi
-	movw	r3, #3202
-	ldrh	r1, [r6, r3]
-	movw	r2, #2588
-	strh	r1, [r6, r2]	@ movhi
+	strheq	r3, [r4, r2]	@ movhi
+	movw	r3, #3206
+	ldrh	r2, [r4, r3]
+	strh	r2, [r7]	@ movhi
 	mvn	r2, #0
-	strh	r2, [r6, r3]	@ movhi
-.L1586:
-	movw	r7, #2588
+	strh	r2, [r4, r3]	@ movhi
+.L1542:
+	ldrh	r0, [r7]
 	mov	r3, #0
-	ldrh	r0, [r6, r7]
-	strb	r3, [r6, #2596]
+	strb	r3, [r4, #2600]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1584
+	beq	.L1540
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	ldr	r8, .L1669+16
 	mvnne	r3, #0
-	strhne	r3, [r6, r7]	@ movhi
-	movw	r7, #2588
-	ldrh	r2, [r6, r7]
+	strhne	r3, [r7]	@ movhi
 	movw	r3, #65535
+	ldrh	r2, [r7]
 	cmp	r2, r3
-	beq	.L1584
-	mov	r0, r8
+	beq	.L1540
+	ldr	r0, .L1625+8
 	bl	make_superblock
 	mov	r3, #0
 	movw	r2, #3666
-	strh	r3, [r6, r2]	@ movhi
-	strh	r3, [r8, #2]	@ movhi
-	strb	r3, [r6, #2594]
-	ldrh	r3, [r6, r7]
-	ldr	r2, [r6, #2324]
+	strh	r3, [r4, r2]	@ movhi
+	strh	r3, [r7, #2]	@ movhi
+	strb	r3, [r4, #2598]
+	ldrh	r3, [r7]
+	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	ldrh	r2, [r2, r3]
 	movw	r3, #3668
-	strh	r2, [r6, r3]	@ movhi
-.L1584:
-	movw	r3, #2588
+	strh	r2, [r4, r3]	@ movhi
+.L1540:
 	movw	r2, #2348
-	ldrh	r3, [r6, r3]
-	ldrh	r2, [r6, r2]
+	ldrh	r3, [r7]
+	ldrh	r2, [r4, r2]
 	cmp	r2, r3
-	beq	.L1590
+	beq	.L1546
 	movw	r2, #2396
-	ldrh	r2, [r6, r2]
+	ldrh	r2, [r4, r2]
 	cmp	r2, r3
-	bne	.L1591
-.L1590:
-	mvn	r2, #0
-	movw	r3, #2588
-	strh	r2, [r6, r3]	@ movhi
-.L1591:
-	ldr	r6, .L1669
-	mov	r9, r6
-.L1620:
-	ldr	r7, .L1669+16
-	movw	r3, #65535
+	bne	.L1547
+.L1546:
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+.L1547:
+	ldr	r4, .L1625
+	add	r7, r4, #2592
+.L1576:
 	ldrh	r2, [r7]
+	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1592
-	add	r10, r7, #568
+	bne	.L1548
+	ldr	r10, .L1625+20
 	mov	r3, #0
-	str	r3, [r6, #3160]
-.L1593:
+	str	r3, [r4, #3164]
+	mov	r9, r10
+.L1549:
 	ldrh	r8, [r10]
 	mov	r0, r8
 	bl	List_get_gc_head_node
-	ldr	r3, .L1669+16
 	uxth	r2, r0
-	strh	r2, [r3]	@ movhi
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1594
+	strh	r2, [r7]	@ movhi
+	bne	.L1550
 	mov	r3, #0
 	mov	r0, #8
 	strh	r3, [r10]	@ movhi
-	b	.L1550
-.L1564:
+	b	.L1506
+.L1520:
 	movw	r0, #2444
-	ldrh	r5, [r6, r0]
-	cmp	r5, r1
-	bne	.L1634
-	movw	r1, #3202
-	ldrh	r1, [r6, r1]
-	cmp	r1, r5
+	ldrh	r8, [r4, r0]
+	cmp	r8, r1
+	bne	.L1590
+	movw	r1, #3206
+	ldrh	r1, [r4, r1]
+	cmp	r1, r8
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L1634
-	movw	r3, #2588
-	ldrh	r3, [r6, r3]
-	cmp	r3, r5
-	beq	.L1576
-.L1581:
-	mov	r4, r5
-.L1634:
-	mov	r5, #1
-	b	.L1575
-.L1576:
+	beq	.L1590
+	ldrh	r3, [r7]
+	cmp	r3, r8
+	beq	.L1532
+.L1537:
+	mov	r5, r8
+.L1590:
+	mov	r6, #1
+	b	.L1531
+.L1532:
+	ldr	r5, .L1625+12
 	movw	r3, #2344
-	str	r2, [r6, #3160]
-	movw	r2, #3148
-	ldrh	r1, [r6, r3]
-	ldrh	r3, [r6, r2]
-	ldr	r4, .L1669+8
-	cmp	r1, r3
-	bls	.L1577
-	ldrh	r3, [r4]
+	str	r2, [r4, #3164]
+	ldrh	r2, [r4, r3]
+	ldrh	r3, [r5]
+	add	r6, r5, #512
+	cmp	r2, r3
+	bls	.L1533
+	ldrh	r3, [r6]
 	cmp	r3, #0
-	bne	.L1578
-	ldr	r3, [r6, #2504]
-	ldr	r1, [r6, #2500]
+	bne	.L1534
+	ldr	r3, [r4, #2504]
+	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
-	cmp	r1, r3, lsr #2
+	cmp	r2, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1664
-.L1578:
+	bcs	.L1619
+.L1534:
 	movw	r3, #2572
-	movw	r2, #3148
-	ldrh	r3, [r6, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1664:
-	strh	r3, [r6, r2]	@ movhi
+.L1619:
+	strh	r3, [r5]	@ movhi
 	bl	FtlReadRefresh
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	ldr	r3, [r6, #2324]
+	ldr	r3, [r4, #2324]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #4
-	bls	.L1577
-.L1667:
-	ldrh	r0, [r4]
-	b	.L1550
-.L1577:
-	ldrh	r0, [r4]
+	bls	.L1533
+.L1622:
+	ldrh	r0, [r6]
+	b	.L1506
+.L1533:
+	ldrh	r0, [r6]
 	cmp	r0, #0
-	bne	.L1581
+	bne	.L1537
 	movw	r3, #2572
-	movw	r2, #3148
-	ldrh	r7, [r6, r3]
-	add	r3, r7, r7, lsl #1
+	ldrh	r9, [r4, r3]
+	add	r3, r9, r9, lsl #1
 	asr	r3, r3, #2
-	strh	r3, [r6, r2]	@ movhi
+	strh	r3, [r5]	@ movhi
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	ldr	r3, [r6, #2324]
-	ldrh	r1, [r6, #104]
+	ldr	r3, [r4, #2324]
+	ldrh	r1, [r4, #104]
 	lsl	r0, r0, #1
 	ldrh	r2, [r3, r0]
-	ldrh	r3, [r6, #32]
+	ldrh	r3, [r4, #32]
 	mul	r3, r3, r1
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1582
+	ble	.L1538
 	movw	r3, #2344
-	sub	r7, r7, #1
-	ldrh	r3, [r6, r3]
-	cmp	r3, r7
-	blt	.L1582
+	sub	r9, r9, #1
+	ldrh	r3, [r4, r3]
+	cmp	r3, r9
+	blt	.L1538
 	bl	FtlReadRefresh
-	b	.L1667
-.L1582:
+	b	.L1622
+.L1538:
 	cmp	r2, #0
-	bne	.L1581
+	bne	.L1537
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2344
-	ldrh	r0, [r6, r3]
+	ldrh	r0, [r4, r3]
 	add	r0, r0, #1
-	b	.L1550
-.L1594:
+	b	.L1506
+.L1550:
 	uxth	r3, r0
 	str	r2, [fp, #-52]
 	add	r8, r8, #1
@@ -11267,686 +10903,1057 @@ rk_ftl_garbage_collect:
 	ldr	r3, [fp, #-48]
 	ldr	r2, [fp, #-52]
 	strhne	r8, [r10]	@ movhi
-	bne	.L1593
+	bne	.L1549
 	lsl	r0, r3, #1
-	ldrh	lr, [r9, #32]
-	ldrh	r3, [r9, #102]
+	ldrh	lr, [r4, #32]
+	ldrh	r3, [r4, #102]
 	uxth	r8, r8
-	ldr	r1, [r9, #2324]
+	ldr	r1, [r4, #2324]
 	strh	r8, [r10]	@ movhi
 	mul	r3, lr, r3
 	ldrh	ip, [r1, r0]
 	add	lr, r3, r3, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1597
+	bgt	.L1553
 	cmp	ip, #8
 	cmphi	r8, #48
-	bls	.L1598
-	ldr	ip, .L1669+20
+	bls	.L1554
+	ldr	ip, .L1625+24
 	ldrh	ip, [ip]
 	cmp	ip, #35
-	bhi	.L1598
-.L1597:
-	ldr	lr, .L1669+24
+	bhi	.L1554
+.L1553:
 	mov	ip, #0
-	strh	ip, [lr]	@ movhi
-.L1598:
+	strh	ip, [r9]	@ movhi
+.L1554:
 	ldrh	r1, [r1, r0]
 	movw	r0, #65535
 	cmp	r3, r1
-	cmple	r4, r0
-	bne	.L1599
-	ldr	r3, .L1669+24
-	ldrh	r3, [r3]
+	cmple	r5, r0
+	bne	.L1555
+	ldrh	r3, [r9]
 	cmp	r3, #3
-	bhi	.L1599
-	mvn	r2, #0
-	movw	r3, #2588
-	strh	r2, [r9, r3]	@ movhi
+	bhi	.L1555
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L1669+24
-	strh	r3, [r2]	@ movhi
-	add	r3, r2, #508
-.L1668:
-	ldrh	r0, [r3]
-	b	.L1550
-.L1599:
+	strh	r3, [r9]	@ movhi
+.L1624:
+	ldr	r3, .L1625+28
+	b	.L1623
+.L1555:
 	cmp	r1, #0
-	bne	.L1600
+	bne	.L1556
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L1669+24
-	ldr	r2, .L1669+24
-	ldrh	r3, [r3]
+	ldrh	r3, [r9]
 	add	r3, r3, #1
-	strh	r3, [r2]	@ movhi
-	b	.L1593
-.L1600:
+	strh	r3, [r9]	@ movhi
+	b	.L1549
+.L1556:
 	mov	r3, #0
-	strb	r3, [r9, #2596]
-	ldr	r3, .L1669+28
+	strb	r3, [r4, #2600]
+	ldr	r3, .L1625+32
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L1601
+	bne	.L1557
 	mov	r2, #700
-	ldr	r1, .L1669+32
-	ldr	r0, .L1669+36
+	ldr	r1, .L1625+36
+	ldr	r0, .L1625+40
 	bl	sftl_printk
-.L1601:
-	ldr	r3, .L1669+40
+.L1557:
+	ldr	r3, .L1625+44
 	ldrh	r2, [r7]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1602
+	bne	.L1558
 	movw	r2, #701
-	ldr	r1, .L1669+32
-	ldr	r0, .L1669+36
+	ldr	r1, .L1625+36
+	ldr	r0, .L1625+40
+	bl	sftl_printk
+.L1558:
+	ldr	r3, .L1625+48
+	ldrh	r2, [r7]
+	ldrh	r3, [r3]
+	cmp	r2, r3
+	bne	.L1559
+	movw	r2, #702
+	ldr	r1, .L1625+36
+	ldr	r0, .L1625+40
 	bl	sftl_printk
-.L1602:
-	ldr	r3, .L1669+44
+.L1559:
+	ldr	r0, .L1625+8
+	bl	make_superblock
+	ldrh	r2, [r7]
+	mov	r3, #0
+	ldr	r1, .L1625+52
+	ldr	r0, [r4, #2324]
+	lsl	r2, r2, #1
+	strh	r3, [r1]	@ movhi
+	ldrh	r2, [r0, r2]
+	strh	r3, [r7, #2]	@ movhi
+	strb	r3, [r4, #2598]
+	strh	r2, [r1, #2]	@ movhi
+.L1548:
+	mov	r3, #1
+	str	r3, [r4, #3276]
+	ldrh	r3, [r4, #102]
+	str	r3, [fp, #-48]
+	ldr	r3, [fp, #-60]
+	cmp	r3, #0
+	beq	.L1560
+	ldr	r2, [fp, #-48]
+	ldrh	r3, [r4, #32]
+	ldr	r1, [r4, #2324]
+	mul	r3, r2, r3
 	ldrh	r2, [r7]
+	lsl	r2, r2, #1
+	ldrh	r2, [r1, r2]
+	sub	r3, r3, r2
+	add	r2, r3, #3
+	cmp	r3, #0
+	movlt	r3, r2
+	add	r6, r6, r3, asr #2
+	uxth	r6, r6
+.L1560:
+	ldrh	r3, [r7, #2]
+	ldr	r1, [fp, #-48]
+	add	r2, r3, r6
+	cmp	r2, r1
+	movgt	r2, r1
+	subgt	r6, r2, r3
+	mov	r3, #0
+	uxthgt	r6, r6
+.L1621:
+	str	r3, [fp, #-56]
+	ldrh	r3, [fp, #-56]
+	cmp	r6, r3
+	bls	.L1570
+	ldr	r3, [fp, #-56]
+	add	ip, r7, #14
+	ldrh	r1, [r7, #2]
+	mov	lr, #20
+	ldrh	r9, [r4, #32]
+	ldr	r0, [r4, #3184]
+	add	r1, r1, r3
+	mov	r3, #0
+	mov	r8, r3
+	b	.L1571
+.L1564:
+	ldrh	r2, [ip, #2]!
+	movw	r10, #65535
+	add	r3, r3, #1
+	cmp	r2, r10
+	mlane	r10, lr, r8, r0
+	addne	r8, r8, #1
+	orrne	r2, r1, r2, lsl #10
+	uxthne	r8, r8
+	strne	r2, [r10, #4]
+.L1571:
+	uxth	r2, r3
+	cmp	r9, r2
+	bhi	.L1564
+	ldrb	r2, [r4, #2600]	@ zero_extendqisi2
+	mov	r1, r8
+	bl	FlashReadPages
+	mov	r3, #0
+.L1620:
+	str	r3, [fp, #-52]
+	ldrh	r3, [fp, #-52]
+	cmp	r8, r3
+	ldrls	r3, [fp, #-56]
+	addls	r3, r3, #1
+	bls	.L1621
+.L1569:
+	ldr	r3, [fp, #-52]
+	mov	r9, #20
+	mul	r9, r9, r3
+	ldr	r3, [r4, #3184]
+	add	r2, r3, r9
+	ldr	r3, [r3, r9]
+	cmn	r3, #1
+	beq	.L1566
+	ldr	r10, [r2, #12]
+	movw	r2, #61589
+	ldrh	r1, [r10]
+	cmp	r1, r2
+	bne	.L1566
+	ldr	ip, [r10, #8]
+	cmn	ip, #1
+	bne	.L1567
+	mov	r2, #736
+	ldr	r1, .L1625+36
+	ldr	r0, .L1625+40
+	str	ip, [fp, #-64]
+	bl	sftl_printk
+	ldr	ip, [fp, #-64]
+.L1567:
+	mov	r2, #0
+	sub	r1, fp, #44
+	mov	r0, ip
+	bl	log2phys
+	ldr	r0, [r4, #3184]
+	ldr	r2, [fp, #-44]
+	add	r0, r0, r9
+	ldr	r1, [r0, #4]
+	cmp	r1, r2
+	bne	.L1566
+	ldr	r3, .L1625+52
+	mov	r1, #20
+	ldr	ip, [r4, #3168]
+	ldr	r0, [r0, #16]
+	ldrh	r2, [r3]
+	str	r1, [fp, #-68]
+	add	r2, r2, #1
+	strh	r2, [r3]	@ movhi
+	ldr	r2, [r4, #3296]
+	mla	r2, r1, ip, r2
+	str	r0, [r2, #16]
+	str	r2, [fp, #-64]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r2, [fp, #-64]
+	ldr	r1, [fp, #-68]
+	str	r0, [r2, #4]
+	ldr	r0, [r4, #3168]
+	ldr	r2, [r4, #3296]
+	mla	r1, r1, r0, r2
+	ldr	r2, [r4, #3184]
+	add	r2, r2, r9
+	ldr	r0, [r2, #8]
+	str	r0, [r1, #8]
+	ldr	r2, [r2, #12]
+	str	r2, [r1, #12]
+	ldr	r2, [fp, #-44]
+	str	r2, [r10, #12]
+	ldr	r2, .L1625+48
+	ldrh	r1, [r2]
+	str	r2, [fp, #-64]
+	strh	r1, [r10, #2]	@ movhi
+	ldr	r1, [r4, #2544]
+	ldr	r3, [r4, #3168]
+	ldr	r0, [r4, #3184]
+	str	r1, [r10, #4]
+	mov	r1, #1
+	add	r3, r3, #1
+	add	r0, r0, r9
+	str	r3, [r4, #3168]
+	bl	FtlGcBufAlloc
+	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
+	ldr	r3, [r4, #3168]
+	cmp	r1, r3
+	beq	.L1568
+	ldr	r2, [fp, #-64]
+	ldrh	r3, [r2, #4]
+	cmp	r3, #0
+	bne	.L1566
+.L1568:
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	beq	.L1566
+	ldr	r3, .L1625
+	mov	r2, #0
+	str	r2, [r3, #3276]
+	add	r3, r3, #3664
+.L1623:
+	ldrh	r0, [r3]
+	b	.L1506
+.L1566:
+	ldr	r3, [fp, #-52]
+	add	r3, r3, #1
+	b	.L1620
+.L1570:
+	ldrh	r3, [r7, #2]
+	add	r6, r6, r3
+	ldr	r3, [fp, #-48]
+	uxth	r6, r6
+	cmp	r3, r6
+	strh	r6, [r7, #2]	@ movhi
+	bhi	.L1572
+	ldr	r3, [r4, #3168]
+	cmp	r3, #0
+	beq	.L1573
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	movne	r3, #0
+	strne	r3, [r4, #3276]
+	bne	.L1624
+.L1573:
+	ldr	r3, .L1625+52
+	ldrh	r1, [r3]
+	cmp	r1, #0
+	bne	.L1574
+	ldrh	r3, [r7]
+	ldr	r2, [r4, #2324]
+	lsl	r3, r3, #1
+	ldrh	r0, [r2, r3]
+	cmp	r0, #0
+	beq	.L1574
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r0, [r7]
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L1574:
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+.L1572:
+	mov	r3, #0
+	str	r3, [r4, #3276]
+	ldr	r3, .L1625+56
 	ldrh	r3, [r3]
+	cmp	r3, #2
+	ldrhls	r6, [r4, #102]
+	bls	.L1576
+.L1575:
+	ldr	r2, .L1625+28
+	ldrh	r0, [r2]
+	cmp	r0, #0
+	addeq	r0, r3, #1
+	b	.L1506
+.L1626:
+	.align	2
+.L1625:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+2592
+	.word	.LANCHOR0+3152
+	.word	.LC113
+	.word	.LANCHOR0+3160
+	.word	.LANCHOR0+3196
+	.word	.LANCHOR0+3664
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR1+568
+	.word	.LC1
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+3666
+	.word	.LANCHOR0+2344
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	2
+	.global	FtlRead
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlRead, %function
+FtlRead:
+	@ args = 0, pretend = 0, frame = 52
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #52
+	uxtb	r0, r0
+	mov	r6, r1
+	str	r2, [fp, #-52]
+	cmp	r0, #16
+	mov	r9, r3
+	bne	.L1628
+	mov	r2, r3
+	ldr	r1, [fp, #-52]
+	add	r0, r6, #256
+	bl	FtlVendorPartRead
+	str	r0, [fp, #-48]
+.L1627:
+	ldr	r0, [fp, #-48]
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1628:
+	ldr	r3, [fp, #-52]
+	ldr	r10, .L1662
+	add	r3, r1, r3
+	str	r3, [fp, #-60]
+	ldr	r2, [fp, #-60]
+	ldr	r3, [r10, #140]
 	cmp	r2, r3
-	bne	.L1603
-	movw	r2, #702
-	ldr	r1, .L1669+32
-	ldr	r0, .L1669+36
-	bl	sftl_printk
-.L1603:
-	ldr	r0, .L1669+16
-	bl	make_superblock
-	ldrh	r2, [r7]
-	mov	r3, #0
-	ldr	r1, .L1669+48
-	ldr	r0, [r9, #2324]
-	lsl	r2, r2, #1
-	strh	r3, [r1]	@ movhi
-	ldrh	r2, [r0, r2]
-	strh	r3, [r7, #2]	@ movhi
-	strb	r3, [r9, #2594]
-	strh	r2, [r1, #2]	@ movhi
-.L1592:
-	mov	r3, #1
-	str	r3, [r9, #3272]
-	ldrh	r3, [r9, #102]
-	str	r3, [fp, #-48]
+	mvnhi	r3, #0
+	strhi	r3, [fp, #-48]
+	bhi	.L1627
+	ldr	r3, .L1662+4
+	ldr	r7, [r3]
+	cmn	r7, #1
+	streq	r7, [fp, #-48]
+	beq	.L1627
+	ldrh	r4, [r10, #58]
+	mov	r0, r6
+	mov	r8, #0
+	mov	r7, r10
+	mov	r5, r8
+	mov	r1, r4
+	bl	__udivsi3
 	ldr	r3, [fp, #-60]
-	cmp	r3, #0
-	beq	.L1604
-	ldr	r2, [fp, #-48]
-	ldrh	r3, [r9, #32]
-	ldr	r1, [r9, #2324]
-	mul	r3, r2, r3
-	ldrh	r2, [r7]
-	lsl	r2, r2, #1
-	ldrh	r2, [r1, r2]
-	sub	r3, r3, r2
-	add	r2, r3, #3
-	cmp	r3, #0
-	movlt	r3, r2
-	add	r5, r5, r3, asr #2
-	uxth	r5, r5
-.L1604:
-	ldrh	r3, [r7, #2]
-	ldr	r1, [fp, #-48]
-	add	r2, r3, r5
-	cmp	r2, r1
-	movgt	r2, r1
-	subgt	r5, r2, r3
-	mov	r3, #0
-	uxthgt	r5, r5
-.L1666:
+	mov	r1, r4
+	str	r0, [fp, #-64]
+	sub	r0, r3, #1
+	bl	__udivsi3
+	ldr	r3, [fp, #-64]
+	ldr	r2, [fp, #-52]
+	ldr	r4, [fp, #-64]
+	rsb	r3, r3, #1
+	str	r0, [fp, #-68]
+	add	r3, r3, r0
+	str	r8, [fp, #-76]
 	str	r3, [fp, #-56]
-	ldrh	r3, [fp, #-56]
-	ldr	r7, .L1669+16
-	cmp	r5, r3
-	bls	.L1614
-	ldrh	ip, [r7, #2]
+	ldr	r3, [r10, #2536]
+	str	r8, [fp, #-72]
+	str	r8, [fp, #-48]
+	add	r3, r3, r2
+	ldr	r2, [fp, #-56]
+	str	r3, [r10, #2536]
+	ldr	r3, [r10, #2508]
+	add	r3, r3, r2
+	str	r3, [r10, #2508]
+.L1630:
+	ldr	r3, [fp, #-56]
+	cmp	r3, #0
+	bne	.L1647
+	ldr	r3, .L1662
+	movw	r2, #3210
+	ldrh	r2, [r3, r2]
+	cmp	r2, #0
+	bne	.L1648
+	movw	r2, #2344
+	ldrh	r3, [r3, r2]
+	cmp	r3, #31
+	bhi	.L1627
+.L1648:
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	b	.L1627
+.L1647:
+	sub	r1, fp, #44
 	mov	r2, #0
+	mov	r0, r4
+	bl	log2phys
+	ldr	r1, [fp, #-44]
+	cmn	r1, #1
+	moveq	r10, #0
+	beq	.L1632
+	ldr	r2, [r7, #3292]
+	mov	r0, #20
+	ldr	r3, [fp, #-64]
+	ldrh	r10, [r7, #58]
+	mla	r2, r0, r5, r2
+	cmp	r4, r3
+	str	r1, [r2, #4]
+	bne	.L1636
+	ldr	r1, [r7, #3316]
+	mov	r0, r6
+	str	r2, [fp, #-80]
+	str	r1, [r2, #8]
+	mov	r1, r10
+	bl	__umodsi3
+	ldr	r3, [fp, #-52]
+	sub	r1, r10, r0
+	ldr	r2, [fp, #-80]
+	str	r0, [fp, #-72]
+	cmp	r3, r1
+	movcs	r3, r1
+	cmp	r3, r10
+	str	r3, [fp, #-76]
+	streq	r9, [r2, #8]
+.L1637:
+	ldrh	r1, [r7, #112]
+	ldr	r0, [r7, #3340]
+	str	r4, [r2, #16]
+	mul	r1, r5, r1
+	add	r5, r5, #1
+	bic	r1, r1, #3
+	add	r1, r0, r1
+	str	r1, [r2, #12]
+	b	.L1635
+.L1634:
+	mla	r0, r0, r4, r10
+	ldr	r2, [fp, #-60]
+	cmp	r2, r0
+	movhi	r2, #1
+	movls	r2, #0
+	cmp	r6, r0
+	movhi	r2, #0
+	cmp	r2, #0
+	beq	.L1633
+	sub	r0, r0, r6
+	mov	r1, #512
+	add	r0, r9, r0, lsl #9
+	bl	__memzero
+.L1633:
+	add	r10, r10, #1
+.L1632:
+	ldrh	r0, [r7, #58]
+	cmp	r10, r0
+	bcc	.L1634
+.L1635:
 	ldr	r3, [fp, #-56]
-	mov	lr, #20
-	ldrh	r8, [r6, #32]
-	ldr	r0, [r6, #3180]
-	add	ip, ip, r3
-	add	r3, r7, #14
-	mov	r7, r2
-	b	.L1615
-.L1608:
-	ldrh	r1, [r3, #2]!
-	movw	r10, #65535
-	add	r2, r2, #1
-	cmp	r1, r10
-	mlane	r10, lr, r7, r0
-	addne	r7, r7, #1
-	orrne	r1, ip, r1, lsl #10
-	uxthne	r7, r7
-	strne	r1, [r10, #4]
-.L1615:
-	uxth	r1, r2
-	cmp	r8, r1
-	bhi	.L1608
-	ldrb	r2, [r6, #2596]	@ zero_extendqisi2
-	mov	r1, r7
+	add	r4, r4, #1
+	subs	r3, r3, #1
+	str	r3, [fp, #-56]
+	beq	.L1639
+	ldrh	r2, [r7, #32]
+	cmp	r5, r2, lsl #2
+	bne	.L1630
+.L1639:
+	cmp	r5, #0
+	beq	.L1630
+	mov	r2, #0
+	mov	r1, r5
+	ldr	r0, [r7, #3292]
+	mov	r10, #0
 	bl	FlashReadPages
-	mov	r3, #0
-.L1665:
-	str	r3, [fp, #-52]
-	ldrh	r3, [fp, #-52]
-	cmp	r7, r3
-	ldrls	r3, [fp, #-56]
-	addls	r3, r3, #1
-	bls	.L1666
-.L1613:
-	ldr	r3, [fp, #-52]
-	mov	r8, #20
-	mul	r8, r8, r3
-	ldr	r3, [r6, #3180]
-	add	r2, r3, r8
-	ldr	r3, [r3, r8]
-	cmn	r3, #1
-	beq	.L1610
-	ldr	r10, [r2, #12]
-	movw	r3, #61589
-	ldrh	r2, [r10]
-	cmp	r2, r3
-	bne	.L1610
-	ldr	r3, [r10, #8]
-	cmn	r3, #1
-	bne	.L1611
-	mov	r2, #736
-	ldr	r1, .L1669+32
-	ldr	r0, .L1669+36
-	str	r3, [fp, #-64]
-	bl	sftl_printk
+	lsl	r3, r8, #9
+	str	r3, [fp, #-88]
+	ldr	r3, [fp, #-72]
+	lsl	r3, r3, #9
+	str	r3, [fp, #-80]
+	ldr	r3, [fp, #-76]
+	lsl	r3, r3, #9
+	str	r3, [fp, #-84]
+.L1646:
+	mov	ip, #20
+	ldr	r2, [r7, #3292]
+	mul	ip, ip, r10
 	ldr	r3, [fp, #-64]
-.L1611:
-	mov	r2, #0
-	sub	r1, fp, #44
-	mov	r0, r3
-	bl	log2phys
-	ldr	r3, [r6, #3180]
-	ldr	r2, [fp, #-44]
-	add	r3, r3, r8
-	ldr	r1, [r3, #4]
+	add	r2, r2, ip
+	ldr	r1, [r2, #16]
+	cmp	r3, r1
+	bne	.L1641
+	ldr	r1, [r2, #8]
+	ldr	r2, [r7, #3316]
 	cmp	r1, r2
-	bne	.L1610
-	ldr	r2, .L1669+48
-	ldr	r1, .L1669+48
-	ldr	r0, [r6, #3164]
-	ldrh	r2, [r2]
-	ldr	r3, [r3, #16]
-	add	r2, r2, #1
-	strh	r2, [r1]	@ movhi
-	mov	r1, #20
-	ldr	r2, [r6, #3292]
-	str	r1, [fp, #-68]
-	mla	r2, r1, r0, r2
-	str	r3, [r2, #16]
-	str	r2, [fp, #-64]
-	bl	Ftl_get_new_temp_ppa
-	ldr	r2, [fp, #-64]
-	ldr	r3, [r6, #3292]
-	ldr	r1, [fp, #-68]
-	str	r0, [r2, #4]
-	ldr	r2, [r6, #3164]
-	mla	r3, r1, r2, r3
-	ldr	r2, [r6, #3180]
-	add	r2, r2, r8
+	bne	.L1642
+	ldr	r3, [fp, #-80]
+	mov	r0, r9
+	ldr	r2, [fp, #-84]
+	str	ip, [fp, #-92]
+	add	r1, r1, r3
+.L1661:
+	bl	ftl_memcpy
+	ldr	ip, [fp, #-92]
+.L1642:
+	ldr	r1, [r7, #3292]
+	add	r2, r1, ip
+	ldr	r0, [r2, #12]
+	ldr	lr, [r2, #16]
+	ldr	r0, [r0, #8]
+	cmp	lr, r0
+	ldrne	r0, [r7, #2712]
+	addne	r0, r0, #1
+	strne	r0, [r7, #2712]
+	ldr	lr, [r1, ip]
+	cmn	lr, #1
+	ldreq	r0, [r7, #2712]
+	streq	lr, [fp, #-48]
+	addeq	r0, r0, #1
+	streq	r0, [r7, #2712]
+	ldr	r1, [r1, ip]
+	cmp	r1, #256
+	bne	.L1645
+	ldr	r0, [r2, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1645:
+	add	r10, r10, #1
+	cmp	r5, r10
+	bne	.L1646
+	mov	r5, #0
+	b	.L1630
+.L1636:
+	ldr	r3, [fp, #-68]
+	cmp	r4, r3
+	bne	.L1638
+	ldr	r1, [r7, #3320]
+	ldr	r3, [fp, #-60]
+	str	r1, [r2, #8]
+	mul	r1, r10, r4
+	sub	r8, r3, r1
+	cmp	r10, r8
+	subeq	r1, r1, r6
+	addeq	r1, r9, r1, lsl #9
+	streq	r1, [r2, #8]
+	b	.L1637
+.L1638:
+	mul	r10, r4, r10
+	sub	r10, r10, r6
+	add	r10, r9, r10, lsl #9
+	str	r10, [r2, #8]
+	b	.L1637
+.L1641:
+	ldr	r3, [fp, #-68]
+	cmp	r3, r1
+	bne	.L1642
 	ldr	r1, [r2, #8]
-	str	r1, [r3, #8]
-	mov	r1, #1
-	ldr	r2, [r2, #12]
-	str	r2, [r3, #12]
-	ldr	r3, [fp, #-44]
-	str	r3, [r10, #12]
-	ldr	r3, .L1669+44
-	ldrh	r2, [r3]
-	str	r3, [fp, #-64]
-	strh	r2, [r10, #2]	@ movhi
-	ldr	r2, [r6, #2544]
-	ldr	r0, [r6, #3180]
-	str	r2, [r10, #4]
-	ldr	r2, [r6, #3164]
-	add	r0, r0, r8
-	add	r2, r2, #1
-	str	r2, [r6, #3164]
-	bl	FtlGcBufAlloc
-	ldrb	r1, [r6, #2451]	@ zero_extendqisi2
-	ldr	r2, [r6, #3164]
+	ldr	r2, [r7, #3320]
 	cmp	r1, r2
-	beq	.L1612
-	ldr	r3, [fp, #-64]
-	ldrh	r3, [r3, #4]
-	cmp	r3, #0
-	bne	.L1610
-.L1612:
-	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	ldrne	r3, .L1669
-	movne	r2, #0
-	strne	r2, [r3, #3272]
-	addne	r3, r3, #3664
-	bne	.L1668
-.L1610:
-	ldr	r3, [fp, #-52]
-	add	r3, r3, #1
-	b	.L1665
-.L1614:
-	ldrh	r3, [r7, #2]
-	add	r5, r5, r3
-	ldr	r3, [fp, #-48]
-	uxth	r5, r5
-	cmp	r3, r5
-	strh	r5, [r7, #2]	@ movhi
-	bhi	.L1616
-	ldr	r3, [r6, #3164]
-	cmp	r3, #0
-	beq	.L1617
-	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	movne	r3, #0
-	strne	r3, [r6, #3272]
-	ldrne	r3, .L1669+8
-	bne	.L1668
-.L1617:
-	ldr	r3, .L1669+48
-	ldrh	r1, [r3]
-	cmp	r1, #0
-	bne	.L1618
-	ldrh	r3, [r7]
-	ldr	r2, [r6, #2324]
-	lsl	r3, r3, #1
-	ldrh	r0, [r2, r3]
-	cmp	r0, #0
-	beq	.L1618
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r0, [r7]
-	bl	update_vpc_list
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1618:
-	mvn	r3, #0
-	strh	r3, [r7]	@ movhi
-.L1616:
-	mov	r3, #0
-	str	r3, [r6, #3272]
-	ldr	r3, .L1669+52
-	ldrh	r3, [r3]
-	cmp	r3, #2
-	ldrhls	r5, [r6, #102]
-	bls	.L1620
-.L1619:
-	ldr	r2, .L1669+8
-	ldrh	r0, [r2]
-	cmp	r0, #0
-	addeq	r0, r3, #1
-	b	.L1550
-.L1670:
+	bne	.L1642
+	ldrh	r0, [r7, #58]
+	str	ip, [fp, #-92]
+	ldr	r2, [fp, #-88]
+	mul	r0, r3, r0
+	sub	r0, r0, r6
+	add	r0, r9, r0, lsl #9
+	b	.L1661
+.L1663:
 	.align	2
-.L1669:
+.L1662:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR0+3664
-	.word	.LC113
-	.word	.LANCHOR0+2588
-	.word	.LANCHOR0+3192
-	.word	.LANCHOR0+3156
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+583
-	.word	.LC1
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+3666
-	.word	.LANCHOR0+2344
-	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.size	FtlRead, .-FtlRead
 	.align	2
-	.global	sftl_init
+	.global	sftl_read
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_init, %function
-sftl_init:
+	.type	sftl_read, %function
+sftl_read:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
+	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1677
-	mvn	r3, #0
-	ldr	r5, .L1677+4
-	ldr	r1, .L1677+8
-	ldr	r0, .L1677+12
-	str	r3, [r5]
-	bl	sftl_printk
-	mov	r0, r4
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	r0, [r4, #36]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	bne	.L1675
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	bne	.L1675
-	mov	r3, #1
-	str	r3, [r5]
-	movw	r3, #2344
-	ldrh	r3, [r4, r3]
-	cmp	r3, #15
-	bhi	.L1675
-	movw	r4, #8129
-.L1674:
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	subs	r4, r4, #1
-	bne	.L1674
-.L1675:
+	mov	r3, r2
+	mov	r2, r1
+	mov	r1, r0
 	mov	r0, #0
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1678:
-	.align	2
-.L1677:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LC70
-	.word	.LC71
-	.size	sftl_init, .-sftl_init
+	bl	FtlRead
+	ldmfd	sp, {fp, sp, pc}
+	.size	sftl_read, .-sftl_read
 	.align	2
-	.global	sftl_gc
+	.global	sftl_vendor_read
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_gc, %function
-sftl_gc:
+	.type	sftl_vendor_read, %function
+sftl_vendor_read:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	mov	r1, #1
-	mov	r0, r1
-	bl	rk_ftl_garbage_collect
+	mov	r3, r2
+	mov	r2, r1
+	mov	r1, r0
+	mov	r0, #16
+	bl	FtlRead
 	ldmfd	sp, {fp, sp, pc}
-	.size	sftl_gc, .-sftl_gc
+	.size	sftl_vendor_read, .-sftl_vendor_read
 	.align	2
-	.global	FtlRead
+	.global	FtlWrite
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlRead, %function
-FtlRead:
-	@ args = 0, pretend = 0, frame = 52
+	.type	FtlWrite, %function
+FtlWrite:
+	@ args = 0, pretend = 0, frame = 68
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #52
+	sub	sp, sp, #68
 	uxtb	r0, r0
-	mov	r6, r1
-	str	r2, [fp, #-52]
+	mov	r9, r1
+	str	r2, [fp, #-80]
 	cmp	r0, #16
-	mov	r9, r3
-	bne	.L1681
+	str	r3, [fp, #-84]
+	bne	.L1667
 	mov	r2, r3
-	ldr	r1, [fp, #-52]
-	add	r0, r6, #256
-	bl	FtlVendorPartRead
-	str	r0, [fp, #-48]
-.L1680:
-	ldr	r0, [fp, #-48]
+	ldr	r1, [fp, #-80]
+	add	r0, r9, #256
+	bl	FtlVendorPartWrite
+.L1666:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1681:
-	ldr	r3, [fp, #-52]
-	ldr	r10, .L1715
-	add	r3, r1, r3
-	str	r3, [fp, #-60]
-	ldr	r2, [fp, #-60]
-	ldr	r3, [r10, #140]
-	cmp	r2, r3
-	mvnhi	r3, #0
-	strhi	r3, [fp, #-48]
-	bhi	.L1680
-	ldr	r3, .L1715+4
-	ldr	r7, [r3]
-	cmn	r7, #1
-	streq	r7, [fp, #-48]
-	beq	.L1680
-	ldrh	r4, [r10, #58]
-	mov	r0, r6
-	mov	r8, #0
-	mov	r7, r10
-	mov	r5, r8
-	mov	r1, r4
+.L1667:
+	ldr	r3, [fp, #-80]
+	ldr	r4, .L1718
+	add	r6, r1, r3
+	ldr	r3, [r4, #140]
+	cmp	r6, r3
+	mvnhi	r0, #0
+	bhi	.L1666
+	ldr	r5, .L1718+4
+	ldr	r0, [r5]
+	cmn	r0, #1
+	beq	.L1666
+	ldrh	r7, [r4, #58]
+	mov	r3, #2048
+	str	r3, [r4, #3672]
+	mov	r0, r9
+	mov	r1, r7
 	bl	__udivsi3
-	ldr	r3, [fp, #-60]
-	mov	r1, r4
-	str	r0, [fp, #-64]
-	sub	r0, r3, #1
+	mov	r1, r7
+	str	r0, [fp, #-76]
+	sub	r0, r6, #1
 	bl	__udivsi3
-	ldr	r3, [fp, #-64]
-	ldr	r2, [fp, #-52]
-	ldr	r4, [fp, #-64]
-	rsb	r3, r3, #1
-	str	r0, [fp, #-68]
-	add	r3, r3, r0
-	str	r8, [fp, #-76]
-	str	r3, [fp, #-56]
-	ldr	r3, [r10, #2536]
-	str	r8, [fp, #-72]
-	str	r8, [fp, #-48]
+	ldr	r2, [fp, #-76]
+	str	r0, [fp, #-92]
+	sub	r3, r0, r2
+	ldr	r2, [fp, #-80]
+	str	r3, [fp, #-96]
+	add	r3, r3, #1
+	str	r3, [fp, #-72]
+	ldr	r3, [r4, #2532]
 	add	r3, r3, r2
-	ldr	r2, [fp, #-56]
-	str	r3, [r10, #2536]
-	ldr	r3, [r10, #2508]
+	ldr	r2, [fp, #-72]
+	str	r3, [r4, #2532]
+	ldr	r3, [r4, #2516]
 	add	r3, r3, r2
-	str	r3, [r10, #2508]
-.L1683:
-	ldr	r3, [fp, #-56]
+	str	r3, [r4, #2516]
+	ldr	r3, [r5, #8]
+	ldr	r4, .L1718+8
+	cmp	r3, #0
+	beq	.L1669
+	ldrh	r3, [r4, #4]
+	add	r0, r4, #48
+	cmp	r3, #0
+	moveq	r4, r0
+.L1669:
+	ldr	r5, [fp, #-76]
+	ldr	r10, .L1718
+.L1670:
+	ldr	r3, [fp, #-72]
+	cmp	r3, #0
+	bne	.L1698
+	mov	r0, r3
+	ldr	r1, [fp, #-96]
+	bl	rk_ftl_garbage_collect
+	movw	r3, #2344
+	ldrh	r3, [r10, r3]
+	cmp	r3, #5
+	bls	.L1699
+.L1701:
+	mov	r0, #0
+	b	.L1666
+.L1698:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r10, #32]
+	cmp	r2, r3
+	bcc	.L1671
+	mov	r2, #1016
+	ldr	r1, .L1718+12
+	ldr	r0, .L1718+16
+	bl	sftl_printk
+.L1671:
+	ldrh	r2, [r4, #4]
+	cmp	r2, #0
+	bne	.L1672
+	ldr	r3, .L1718+8
+	ldr	r6, .L1718+4
+	cmp	r4, r3
+	bne	.L1673
+	add	r0, r4, #48
+	ldrh	r7, [r0, #4]
+	cmp	r7, #0
+	bne	.L1674
+	bl	allocate_new_data_superblock
+	str	r7, [r6, #8]
+.L1674:
+	ldr	r0, .L1718+8
+	bl	allocate_new_data_superblock
+	ldr	r4, .L1718+8
+	ldr	r3, [r6, #8]
+	add	r0, r4, #48
 	cmp	r3, #0
-	bne	.L1700
-	ldr	r3, .L1715
-	movw	r2, #3206
-	ldrh	r2, [r3, r2]
-	cmp	r2, #0
-	bne	.L1701
-	movw	r2, #2344
-	ldrh	r3, [r3, r2]
-	cmp	r3, #31
-	bhi	.L1680
-.L1701:
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	b	.L1680
-.L1700:
-	sub	r1, fp, #44
+	movne	r4, r0
+.L1675:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L1672
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L1672:
+	ldrh	r3, [r4, #4]
+	ldr	r2, [fp, #-72]
+	cmp	r3, r2
+	movcs	r3, r2
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	lsl	r2, r2, #2
+	cmp	r3, r2
+	movcs	r3, r2
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	str	r3, [fp, #-108]
+	ldrh	r3, [r10, #32]
+	cmp	r2, r3
+	bcc	.L1676
+	movw	r2, #1049
+	ldr	r1, .L1718+12
+	ldr	r0, .L1718+16
+	bl	sftl_printk
+.L1676:
+	mov	r3, #0
+.L1717:
+	str	r3, [fp, #-68]
+	ldr	r3, [fp, #-68]
+	ldr	r2, [fp, #-108]
+	cmp	r3, r2
+	bne	.L1696
+.L1678:
+	mov	r3, r4
 	mov	r2, #0
+	ldr	r1, [fp, #-68]
+	ldr	r0, [r10, #3300]
+	bl	FtlProgPages
+	ldr	r3, [fp, #-68]
+	ldr	r2, [fp, #-72]
+	cmp	r3, r2
+	bls	.L1697
+	movw	r2, #1126
+	ldr	r1, .L1718+12
+	ldr	r0, .L1718+16
+	bl	sftl_printk
+.L1697:
+	ldr	r3, [fp, #-72]
+	ldr	r2, [fp, #-68]
+	sub	r3, r3, r2
+	str	r3, [fp, #-72]
+	b	.L1670
+.L1673:
+	str	r2, [r6, #8]
+	ldrh	r2, [r3, #4]
+	cmp	r2, #0
+	movne	r4, r3
+	bne	.L1672
 	mov	r0, r4
+	bl	allocate_new_data_superblock
+	b	.L1675
+.L1696:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	beq	.L1678
+	mov	r2, #0
+	sub	r1, fp, #64
+	mov	r0, r5
+	mov	r7, #20
 	bl	log2phys
-	ldr	r1, [fp, #-44]
-	cmn	r1, #1
-	moveq	r10, #0
-	beq	.L1685
-	ldr	r2, [r7, #3288]
-	mov	r0, #20
-	ldr	r3, [fp, #-64]
-	ldrh	r10, [r7, #58]
-	mla	r2, r0, r5, r2
-	cmp	r4, r3
-	str	r1, [r2, #4]
-	bne	.L1689
-	ldr	r1, [r7, #3312]
-	mov	r0, r6
-	str	r2, [fp, #-80]
-	str	r1, [r2, #8]
-	mov	r1, r10
-	bl	__umodsi3
-	ldr	r3, [fp, #-52]
-	sub	r1, r10, r0
-	ldr	r2, [fp, #-80]
-	str	r0, [fp, #-72]
-	cmp	r3, r1
-	movcs	r3, r1
-	cmp	r3, r10
-	str	r3, [fp, #-76]
-	streq	r9, [r2, #8]
-.L1690:
-	ldrh	r1, [r7, #112]
-	ldr	r0, [r7, #3336]
-	str	r4, [r2, #16]
-	mul	r1, r5, r1
-	add	r5, r5, #1
+	mov	r0, r4
+	bl	get_new_active_ppa
+	ldrh	r2, [r10, #112]
+	ldr	r1, [fp, #-68]
+	ldr	r3, [fp, #-68]
+	mul	r1, r2, r1
+	mul	r7, r7, r3
+	ldr	r3, [r10, #3300]
 	bic	r1, r1, #3
-	add	r1, r0, r1
-	str	r1, [r2, #12]
-	b	.L1688
-.L1687:
-	mla	r0, r0, r4, r10
-	ldr	r2, [fp, #-60]
-	cmp	r2, r0
-	movhi	r2, #1
-	movls	r2, #0
-	cmp	r6, r0
-	movhi	r2, #0
-	cmp	r2, #0
-	beq	.L1686
-	sub	r0, r0, r6
-	mov	r1, #512
-	add	r0, r9, r0, lsl #9
-	bl	__memzero
-.L1686:
-	add	r10, r10, #1
-.L1685:
-	ldrh	r0, [r7, #58]
-	cmp	r10, r0
-	bcc	.L1687
-.L1688:
-	ldr	r3, [fp, #-56]
-	add	r4, r4, #1
-	subs	r3, r3, #1
-	str	r3, [fp, #-56]
-	beq	.L1692
-	ldrh	r2, [r7, #32]
-	cmp	r5, r2, lsl #2
-	bne	.L1683
-.L1692:
-	cmp	r5, #0
-	beq	.L1683
-	mov	r2, #0
-	mov	r1, r5
-	ldr	r0, [r7, #3288]
-	mov	r10, #0
-	bl	FlashReadPages
-	lsl	r3, r8, #9
-	str	r3, [fp, #-88]
-	ldr	r3, [fp, #-72]
-	lsl	r3, r3, #9
-	str	r3, [fp, #-80]
+	str	r1, [fp, #-100]
+	add	r3, r3, r7
+	ldr	r1, [r10, #3340]
+	str	r0, [r3, #4]
+	ldr	r0, [fp, #-100]
+	str	r1, [fp, #-104]
+	str	r5, [r3, #16]
+	add	r8, r1, r0
+	mov	r1, #0
+	str	r8, [r3, #12]
+	mov	r0, r8
+	bl	ftl_memset
 	ldr	r3, [fp, #-76]
-	lsl	r3, r3, #9
-	str	r3, [fp, #-84]
-.L1699:
-	mov	ip, #20
-	ldr	r2, [r7, #3288]
-	mul	ip, ip, r10
-	ldr	r3, [fp, #-64]
-	add	r2, r2, ip
-	ldr	r1, [r2, #16]
-	cmp	r3, r1
-	bne	.L1694
-	ldr	r1, [r2, #8]
-	ldr	r2, [r7, #3312]
-	cmp	r1, r2
-	bne	.L1695
-	ldr	r3, [fp, #-80]
+	ldr	r2, [fp, #-92]
+	ldrh	r6, [r10, #58]
+	cmp	r5, r2
+	cmpne	r5, r3
+	bne	.L1679
+	cmp	r5, r3
+	bne	.L1680
+	mov	r1, r6
 	mov	r0, r9
-	ldr	r2, [fp, #-84]
-	str	ip, [fp, #-92]
-	add	r1, r1, r3
+	bl	__umodsi3
+	ldr	r3, [fp, #-80]
+	sub	r6, r6, r0
+	str	r0, [fp, #-88]
+	cmp	r6, r3
+	movcs	r6, r3
+.L1681:
+	ldrh	r3, [r10, #58]
+	cmp	r6, r3
+	ldr	r3, [fp, #-76]
+	bne	.L1682
+	cmp	r5, r3
+	ldr	r3, [r10, #3300]
+	add	r7, r3, r7
+	ldreq	r3, [fp, #-84]
+	streq	r3, [r7, #8]
+	beq	.L1684
 .L1714:
-	bl	ftl_memcpy
-	ldr	ip, [fp, #-92]
-.L1695:
-	ldr	r1, [r7, #3288]
-	add	r2, r1, ip
-	ldr	r0, [r2, #12]
-	ldr	lr, [r2, #16]
-	ldr	r0, [r0, #8]
-	cmp	lr, r0
-	ldrne	r0, [r7, #2708]
-	addne	r0, r0, #1
-	strne	r0, [r7, #2708]
-	ldr	lr, [r1, ip]
-	cmn	lr, #1
-	ldreq	r0, [r7, #2708]
-	streq	lr, [fp, #-48]
-	addeq	r0, r0, #1
-	streq	r0, [r7, #2708]
-	ldr	r1, [r1, ip]
-	cmp	r1, #256
-	bne	.L1698
-	ldr	r0, [r2, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L1698:
-	add	r10, r10, #1
-	cmp	r5, r10
-	bne	.L1699
-	mov	r5, #0
-	b	.L1683
-.L1689:
-	ldr	r3, [fp, #-68]
-	cmp	r4, r3
-	bne	.L1691
-	ldr	r1, [r7, #3316]
+	mul	r6, r5, r6
+	ldr	r3, [fp, #-84]
+	sub	r6, r6, r9
+	add	r6, r3, r6, lsl #9
+	str	r6, [r7, #8]
+	b	.L1684
+.L1680:
+	ldr	r3, [fp, #-80]
+	add	r2, r9, r3
+	smulbb	r3, r6, r5
+	sub	r6, r2, r3
+	mov	r3, #0
+	uxth	r6, r6
+	str	r3, [fp, #-88]
+	b	.L1681
+.L1682:
+	cmp	r5, r3
+	ldr	r3, [r10, #3300]
+	ldreq	r2, [r10, #3316]
+	ldrne	r2, [r10, #3320]
+	add	r3, r3, r7
+	str	r2, [r3, #8]
+	ldr	r3, [fp, #-64]
+	cmn	r3, #1
+	beq	.L1687
+	str	r3, [fp, #-56]
+	mov	r1, #1
+	ldr	r3, [r10, #3300]
+	sub	r0, fp, #60
+	str	r5, [fp, #-44]
+	add	r3, r3, r7
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #12]
+	str	r2, [fp, #-52]
+	mov	r2, #0
+	str	r3, [fp, #-48]
+	bl	FlashReadPages
 	ldr	r3, [fp, #-60]
-	str	r1, [r2, #8]
-	mul	r1, r10, r4
-	sub	r8, r3, r1
-	cmp	r10, r8
-	subeq	r1, r1, r6
-	addeq	r1, r9, r1, lsl #9
-	streq	r1, [r2, #8]
-	b	.L1690
+	cmn	r3, #1
+	ldreq	r3, [r10, #2712]
+	addeq	r3, r3, #1
+	streq	r3, [r10, #2712]
+	beq	.L1691
+	ldr	r3, [r8, #8]
+	cmp	r5, r3
+	beq	.L1690
+	ldr	r3, [r10, #2712]
+	mov	r2, r5
+	ldr	r0, .L1718+20
+	add	r3, r3, #1
+	str	r3, [r10, #2712]
+	ldr	r1, [r8, #8]
+	bl	sftl_printk
+.L1690:
+	ldr	r3, [r8, #8]
+	cmp	r5, r3
+	beq	.L1691
+	movw	r2, #1102
+	ldr	r1, .L1718+12
+	ldr	r0, .L1718+16
+	bl	sftl_printk
 .L1691:
-	mul	r10, r4, r10
-	sub	r10, r10, r6
-	add	r10, r9, r10, lsl #9
-	str	r10, [r2, #8]
-	b	.L1690
-.L1694:
+	ldr	r3, [fp, #-76]
+	lsl	r2, r6, #9
+	cmp	r5, r3
+	bne	.L1692
+	ldr	r3, [r10, #3300]
+	ldr	r1, [fp, #-84]
+	add	r7, r3, r7
+	ldr	r3, [fp, #-88]
+	ldr	r0, [r7, #8]
+	add	r0, r0, r3, lsl #9
+.L1715:
+	bl	ftl_memcpy
+.L1684:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r10, #32]
+	cmp	r2, r3
+	bcc	.L1693
+	movw	r2, #1117
+	ldr	r1, .L1718+12
+	ldr	r0, .L1718+16
+	bl	sftl_printk
+.L1693:
+	ldr	r3, .L1718+24
+	ldr	r2, [fp, #-104]
+	ldr	r1, [fp, #-100]
+	strh	r3, [r2, r1]	@ movhi
+	ldr	r3, [r10, #2544]
+	str	r5, [r8, #8]
+	add	r5, r5, #1
+	str	r3, [r8, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, #0
+	str	r3, [r10, #2544]
+	ldr	r3, [fp, #-64]
+	str	r3, [r8, #12]
+	ldrh	r3, [r4]
+	strh	r3, [r8, #2]	@ movhi
 	ldr	r3, [fp, #-68]
-	cmp	r3, r1
-	bne	.L1695
-	ldr	r1, [r2, #8]
-	ldr	r2, [r7, #3316]
-	cmp	r1, r2
-	bne	.L1695
-	ldrh	r0, [r7, #58]
-	str	ip, [fp, #-92]
-	ldr	r2, [fp, #-88]
-	mul	r0, r3, r0
-	sub	r0, r0, r6
-	add	r0, r9, r0, lsl #9
+	add	r3, r3, #1
+	b	.L1717
+.L1687:
+	ldr	r3, [r10, #3300]
+	mov	r1, #0
+	ldrh	r2, [r10, #110]
+	add	r3, r3, r7
+	ldr	r0, [r3, #8]
+	bl	ftl_memset
+	b	.L1691
+.L1692:
+	ldrh	r1, [r10, #58]
+	ldr	r3, [r10, #3300]
+	mul	r1, r5, r1
+	add	r7, r3, r7
+	ldr	r3, [fp, #-84]
+	ldr	r0, [r7, #8]
+	sub	r1, r1, r9
+	add	r1, r3, r1, lsl #9
+	b	.L1715
+.L1679:
+	ldr	r3, [r10, #3300]
+	add	r7, r3, r7
 	b	.L1714
-.L1716:
+.L1699:
+	ldr	r5, .L1718+28
+	mov	r4, #256
+	ldr	r6, .L1718+32
+.L1702:
+	ldrh	r3, [r5]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1700
+	ldrh	r2, [r6]
+	cmp	r2, r3
+	bne	.L1700
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L1700:
+	ldr	r3, .L1718+36
+	mov	r1, #1
+	mov	r2, #128
+	mov	r0, r1
+	strh	r2, [r3]	@ movhi
+	strh	r2, [r3, #-2]	@ movhi
+	bl	rk_ftl_garbage_collect
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	ldr	r3, .L1718+40
+	ldrh	r3, [r3]
+	cmp	r3, #2
+	bhi	.L1701
+	subs	r4, r4, #1
+	bne	.L1702
+	b	.L1701
+.L1719:
 	.align	2
-.L1715:
+.L1718:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.size	FtlRead, .-FtlRead
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR1+591
+	.word	.LC1
+	.word	.LC114
+	.word	-3947
+	.word	.LANCHOR0+2592
+	.word	.LANCHOR0+3206
+	.word	.LANCHOR0+3154
+	.word	.LANCHOR0+2344
+	.size	FtlWrite, .-FtlWrite
 	.align	2
-	.global	sftl_read
+	.global	sftl_vendor_write
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_read, %function
-sftl_read:
+	.type	sftl_vendor_write, %function
+sftl_vendor_write:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
@@ -11955,652 +11962,745 @@ sftl_read:
 	mov	r3, r2
 	mov	r2, r1
 	mov	r1, r0
-	mov	r0, #0
-	bl	FtlRead
+	mov	r0, #16
+	bl	FtlWrite
 	ldmfd	sp, {fp, sp, pc}
-	.size	sftl_read, .-sftl_read
+	.size	sftl_vendor_write, .-sftl_vendor_write
 	.align	2
-	.global	sftl_vendor_read
+	.global	sftl_gc
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_vendor_read, %function
-sftl_vendor_read:
+	.type	sftl_gc, %function
+sftl_gc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	mov	r3, r2
-	mov	r2, r1
-	mov	r1, r0
-	mov	r0, #16
-	bl	FtlRead
+	mov	r1, #1
+	mov	r0, r1
+	bl	rk_ftl_garbage_collect
 	ldmfd	sp, {fp, sp, pc}
-	.size	sftl_vendor_read, .-sftl_vendor_read
+	.size	sftl_gc, .-sftl_gc
 	.align	2
-	.global	FtlWrite
+	.global	FtlLoadSysInfo
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlWrite, %function
-FtlWrite:
-	@ args = 0, pretend = 0, frame = 68
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #68
-	uxtb	r0, r0
-	mov	r9, r1
-	str	r2, [fp, #-80]
-	cmp	r0, #16
-	str	r3, [fp, #-84]
-	bne	.L1720
-	mov	r2, r3
-	ldr	r1, [fp, #-80]
-	add	r0, r9, #256
-	bl	FtlVendorPartWrite
-.L1719:
+	sub	sp, sp, #12
+	mov	r1, #0
+	ldr	r4, .L1749
+	ldr	r3, [r4, #3304]
+	add	r6, r4, #2576
+	ldrh	r2, [r4, #40]
+	ldr	r0, [r4, #2324]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	lsl	r2, r2, #1
+	str	r3, [r4, #3468]
+	bl	ftl_memset
+	ldrh	r0, [r6]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L1723
+.L1734:
+	mvn	r0, #0
+.L1722:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1720:
-	ldr	r3, [fp, #-80]
-	ldr	r4, .L1771
-	add	r6, r1, r3
-	ldr	r3, [r4, #140]
-	cmp	r6, r3
-	mvnhi	r0, #0
-	bhi	.L1719
-	ldr	r5, .L1771+4
-	ldr	r0, [r5]
-	cmn	r0, #1
-	beq	.L1719
-	ldrh	r7, [r4, #58]
-	mov	r3, #2048
-	str	r3, [r4, #3672]
-	mov	r0, r9
-	mov	r1, r7
-	bl	__udivsi3
-	mov	r1, r7
-	str	r0, [fp, #-76]
-	sub	r0, r6, #1
+.L1723:
+	mov	r1, #1
+	ldr	r9, .L1749+4
+	bl	FtlGetLastWrittenPage
+	ldrsh	r7, [r6]
+	add	r8, r4, #3456
+	sxth	r5, r0
+	add	r0, r0, #1
+	strh	r0, [r6, #2]	@ movhi
+.L1725:
+	cmp	r5, #0
+	bge	.L1731
+	movw	r2, #1465
+	ldr	r1, .L1749+8
+	ldr	r0, .L1749+12
+	bl	sftl_printk
+.L1730:
+	ldrh	r3, [r4, #40]
+	ldrh	r2, [r4, #110]
+	add	r3, r3, #24
+	cmp	r2, r3, lsl #1
+	bcs	.L1733
+	movw	r2, #1467
+	ldr	r1, .L1749+8
+	ldr	r0, .L1749+12
+	bl	sftl_printk
+.L1733:
+	ldr	r5, .L1749+16
+	mov	r2, #48
+	ldr	r1, [r4, #3464]
+	mov	r0, r5
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #40]
+	ldr	r1, [r4, #3464]
+	ldr	r0, [r4, #2324]
+	lsl	r2, r2, #1
+	add	r1, r1, #48
+	bl	ftl_memcpy
+	ldrh	r1, [r4, #40]
+	ldr	r3, [r4, #3464]
+	ldr	r0, [r4, #24]
+	lsr	r2, r1, #3
+	add	r1, r1, #24
+	lsl	r1, r1, #1
+	add	r2, r2, #4
+	bic	r1, r1, #3
+	add	r1, r3, r1
+	bl	ftl_memcpy
+	ldr	r2, [r4, #2268]
+	ldr	r3, .L1749+4
+	cmp	r2, r3
+	bne	.L1734
+	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
+	ldrh	r3, [r4, #54]
+	ldrh	r7, [r5, #8]
+	cmp	r2, r3
+	strh	r7, [r6, #6]	@ movhi
+	bne	.L1734
+	ldrh	r3, [r4, #102]
+	ldrh	r2, [r4, #58]
+	ldr	r6, [r4, #44]
+	ldrh	r0, [r4, #158]
+	mul	r3, r7, r3
+	str	r7, [r4, #3676]
+	ldrh	r1, [r4, #32]
+	sub	r0, r6, r0
+	sub	r0, r0, r7
+	str	r3, [r4, #2504]
+	mul	r3, r3, r2
+	str	r3, [r4, #140]
 	bl	__udivsi3
-	ldr	r2, [fp, #-76]
-	str	r0, [fp, #-92]
-	sub	r3, r0, r2
-	ldr	r2, [fp, #-80]
-	str	r3, [fp, #-96]
-	add	r3, r3, #1
-	str	r3, [fp, #-72]
-	ldr	r3, [r4, #2532]
-	add	r3, r3, r2
-	ldr	r2, [fp, #-72]
-	str	r3, [r4, #2532]
-	ldr	r3, [r4, #2516]
-	add	r3, r3, r2
+	cmp	r7, r6
+	movw	r3, #2572
+	strh	r0, [r4, r3]	@ movhi
+	bls	.L1735
+	movw	r2, #1489
+	ldr	r1, .L1749+8
+	ldr	r0, .L1749+12
+	bl	sftl_printk
+.L1735:
+	ldrh	lr, [r5, #18]
+	movw	r1, #2396
+	ldr	r0, .L1749+20
+	movw	r3, #2348
+	ldrh	ip, [r5, #14]
+	strh	lr, [r4, r1]	@ movhi
+	ldrh	r1, [r5, #20]
+	strh	ip, [r4, r3]	@ movhi
+	ldrh	r3, [r5, #16]
+	lsr	lr, r1, #6
+	and	r1, r1, #63
+	strb	r1, [r4, #2402]
+	ldrb	r1, [r4, #2280]	@ zero_extendqisi2
+	lsr	r2, r3, #6
+	strh	lr, [r0, #50]	@ movhi
+	and	r3, r3, #63
+	ldrh	lr, [r5, #22]
+	strb	r1, [r4, #2404]
+	movw	r1, #2444
+	strb	r3, [r4, #2354]
+	strh	lr, [r4, r1]	@ movhi
+	ldrh	r1, [r5, #24]
+	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
+	strh	r2, [r0, #2]	@ movhi
+	mov	r2, r0
+	lsr	lr, r1, #6
+	and	r1, r1, #63
+	strb	r1, [r4, #2450]
+	ldrb	r1, [r4, #2281]	@ zero_extendqisi2
+	strb	r3, [r4, #2356]
+	mvn	r3, #0
+	strh	r3, [r2, #244]!	@ movhi
+	mov	r3, #0
+	strb	r1, [r4, #2452]
+	mov	r5, r2
+	ldr	r1, [r4, #2300]
+	strh	r3, [r2, #2]	@ movhi
+	strb	r3, [r4, #2598]
+	strb	r3, [r4, #2600]
+	str	r3, [r4, #2528]
 	str	r3, [r4, #2516]
-	ldr	r3, [r5, #8]
-	ldr	r4, .L1771+8
-	cmp	r3, #0
-	beq	.L1722
-	ldrh	r3, [r4, #4]
-	add	r0, r4, #48
-	cmp	r3, #0
-	moveq	r4, r0
-.L1722:
-	ldr	r5, [fp, #-76]
-	ldr	r10, .L1771
-.L1723:
-	ldr	r3, [fp, #-72]
-	cmp	r3, #0
-	bne	.L1751
-	mov	r0, r3
-	ldr	r1, [fp, #-96]
-	bl	rk_ftl_garbage_collect
-	movw	r3, #2344
-	ldrh	r3, [r10, r3]
-	cmp	r3, #5
-	bls	.L1752
-.L1754:
-	mov	r0, #0
-	b	.L1719
-.L1751:
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r10, #32]
+	str	r3, [r4, #2508]
+	str	r3, [r4, #2524]
+	str	r1, [r4, #2548]
+	str	r3, [r4, #2552]
+	strh	lr, [r0, #98]	@ movhi
+	str	r3, [r4, #2564]
+	ldr	r1, [r4, #2540]
+	str	r3, [r4, #2520]
+	ldr	r3, [r4, #2308]
+	ldr	r2, [r4, #2544]
+	cmp	r3, r1
+	strhi	r3, [r4, #2540]
+	ldr	r3, [r4, #2304]
+	cmp	r3, r2
+	strhi	r3, [r4, #2544]
+	movw	r3, #65535
+	cmp	ip, r3
+	beq	.L1738
+	ldr	r0, .L1749+20
+	bl	make_superblock
+.L1738:
+	movw	r3, #2396
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
 	cmp	r2, r3
-	bcc	.L1724
-	mov	r2, #1016
-	ldr	r1, .L1771+12
-	ldr	r0, .L1771+16
+	beq	.L1739
+	ldr	r0, .L1749+24
+	bl	make_superblock
+.L1739:
+	movw	r3, #2444
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1740
+	ldr	r0, .L1749+28
+	bl	make_superblock
+.L1740:
+	ldrh	r2, [r5]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1741
+	ldr	r0, .L1749+32
+	bl	make_superblock
+.L1741:
+	mov	r0, #0
+	b	.L1722
+.L1731:
+	orr	r3, r5, r7, lsl #10
+	mov	r2, #1
+	mov	r1, r2
+	str	r3, [r4, #3460]
+	mov	r0, r8
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3468]
+	ldr	r10, [r3, #12]
+	cmp	r10, #0
+	beq	.L1726
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3464]
+	bl	js_hash
+	cmp	r10, r0
+	beq	.L1726
+	str	r0, [sp, #8]
+	mov	r2, r7
+	str	r10, [sp, #4]
+	ldrh	r3, [r6, #4]
+	ldr	r1, .L1749+8
+	ldr	r0, .L1749+36
+	str	r3, [sp]
+	mov	r3, r5
 	bl	sftl_printk
-.L1724:
-	ldrh	r2, [r4, #4]
-	cmp	r2, #0
-	bne	.L1725
-	ldr	r3, .L1771+8
-	ldr	r6, .L1771+4
-	cmp	r4, r3
-	bne	.L1726
-	add	r0, r4, #48
-	ldrh	r7, [r0, #4]
-	cmp	r7, #0
+	cmp	r5, #0
 	bne	.L1727
-	bl	allocate_new_data_superblock
-	str	r7, [r6, #8]
+	ldrh	r3, [r6, #4]
+	cmp	r7, r3
+	sxthne	r7, r3
+	ldrhne	r5, [r4, #104]
+	bne	.L1729
 .L1727:
-	ldr	r0, .L1771+8
-	bl	allocate_new_data_superblock
-	ldr	r4, .L1771+8
-	ldr	r3, [r6, #8]
-	add	r0, r4, #48
-	cmp	r3, #0
-	movne	r4, r0
-.L1728:
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	bne	.L1725
-	mov	r0, r4
-	bl	allocate_new_data_superblock
-.L1725:
-	ldrh	r3, [r4, #4]
-	ldr	r2, [fp, #-72]
-	cmp	r3, r2
-	movcs	r3, r2
-	ldrb	r2, [r4, #7]	@ zero_extendqisi2
-	lsl	r2, r2, #2
-	cmp	r3, r2
-	movcs	r3, r2
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	str	r3, [fp, #-108]
-	ldrh	r3, [r10, #32]
+	mvn	r3, #0
+	str	r3, [r4, #3456]
+.L1726:
+	ldr	r3, [r4, #3456]
+	cmn	r3, #1
+	beq	.L1729
+	ldr	r3, [r4, #3304]
+	ldr	r3, [r3]
+	cmp	r3, r9
+	bne	.L1729
+	ldr	r3, [r4, #3336]
+	ldrh	r2, [r3]
+	movw	r3, #61604
 	cmp	r2, r3
-	bcc	.L1729
-	movw	r2, #1049
-	ldr	r1, .L1771+12
-	ldr	r0, .L1771+16
-	bl	sftl_printk
+	beq	.L1730
 .L1729:
-	mov	r3, #0
-.L1770:
-	str	r3, [fp, #-68]
-	ldr	r3, [fp, #-68]
-	ldr	r2, [fp, #-108]
-	cmp	r3, r2
-	bne	.L1749
-.L1731:
-	mov	r3, r4
-	mov	r2, #0
-	ldr	r1, [fp, #-68]
-	ldr	r0, [r10, #3296]
-	bl	FtlProgPages
-	ldr	r3, [fp, #-68]
-	ldr	r2, [fp, #-72]
-	cmp	r3, r2
-	bls	.L1750
-	movw	r2, #1126
-	ldr	r1, .L1771+12
-	ldr	r0, .L1771+16
-	bl	sftl_printk
+	sub	r5, r5, #1
+	sxth	r5, r5
+	b	.L1725
 .L1750:
-	ldr	r3, [fp, #-72]
-	ldr	r2, [fp, #-68]
-	sub	r3, r3, r2
-	str	r3, [fp, #-72]
-	b	.L1723
-.L1726:
-	str	r2, [r6, #8]
-	ldrh	r2, [r3, #4]
-	cmp	r2, #0
-	movne	r4, r3
-	bne	.L1725
-	mov	r0, r4
-	bl	allocate_new_data_superblock
-	b	.L1728
+	.align	2
 .L1749:
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	beq	.L1731
-	mov	r2, #0
-	sub	r1, fp, #64
-	mov	r0, r5
-	mov	r7, #20
-	bl	log2phys
-	mov	r0, r4
-	bl	get_new_active_ppa
-	ldrh	r2, [r10, #112]
-	ldr	r1, [fp, #-68]
-	ldr	r3, [fp, #-68]
-	mul	r1, r2, r1
-	mul	r7, r7, r3
-	ldr	r3, [r10, #3296]
-	bic	r1, r1, #3
-	str	r1, [fp, #-100]
-	add	r3, r3, r7
-	ldr	r1, [r10, #3336]
-	str	r0, [r3, #4]
-	ldr	r0, [fp, #-100]
-	str	r1, [fp, #-104]
-	str	r5, [r3, #16]
-	add	r8, r1, r0
+	.word	.LANCHOR0
+	.word	1179929683
+	.word	.LANCHOR1+600
+	.word	.LC1
+	.word	.LANCHOR0+2268
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2592
+	.word	.LC115
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	2
+	.global	FtlMapTblRecovery
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	@ args = 0, pretend = 0, frame = 28
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #36
 	mov	r1, #0
-	str	r8, [r3, #12]
-	mov	r0, r8
-	bl	ftl_memset
-	ldr	r3, [fp, #-76]
-	ldr	r2, [fp, #-92]
-	ldrh	r6, [r10, #58]
-	cmp	r5, r2
-	cmpne	r5, r3
-	bne	.L1732
-	cmp	r5, r3
-	bne	.L1733
-	mov	r1, r6
-	mov	r0, r9
-	bl	__umodsi3
-	ldr	r3, [fp, #-80]
-	sub	r6, r6, r0
-	str	r0, [fp, #-88]
-	cmp	r6, r3
-	movcs	r6, r3
-.L1734:
-	ldrh	r3, [r10, #58]
-	cmp	r6, r3
-	ldr	r3, [fp, #-76]
-	bne	.L1735
-	cmp	r5, r3
-	ldr	r3, [r10, #3296]
-	add	r7, r3, r7
-	ldreq	r3, [fp, #-84]
-	streq	r3, [r7, #8]
-	beq	.L1737
-.L1767:
-	mul	r6, r5, r6
-	ldr	r3, [fp, #-84]
-	sub	r6, r6, r9
-	add	r6, r3, r6, lsl #9
-	str	r6, [r7, #8]
-	b	.L1737
-.L1733:
-	ldr	r3, [fp, #-80]
-	add	r2, r9, r3
-	smulbb	r3, r6, r5
-	sub	r6, r2, r3
-	mov	r3, #0
-	uxth	r6, r6
-	str	r3, [fp, #-88]
-	b	.L1734
-.L1735:
-	cmp	r5, r3
-	ldr	r3, [r10, #3296]
-	ldreq	r2, [r10, #3312]
-	ldrne	r2, [r10, #3316]
-	add	r3, r3, r7
-	str	r2, [r3, #8]
-	ldr	r3, [fp, #-64]
-	cmn	r3, #1
-	beq	.L1740
+	ldr	r3, [r0, #24]
+	mov	r4, r0
+	ldr	r9, .L1786
+	mov	r7, #0
+	ldr	r8, [r0, #12]
+	str	r3, [fp, #-44]
+	ldr	r3, [r0, #16]
 	str	r3, [fp, #-56]
+	ldrh	r3, [r0, #6]
+	str	r3, [fp, #-48]
+	ldrh	r3, [r0, #8]
+	ldr	r0, [fp, #-44]
+	str	r3, [fp, #-52]
+	ldr	r3, [fp, #-48]
+	lsl	r2, r3, #2
+	bl	ftl_memset
+	ldr	r3, [r9, #3304]
+	ldr	r5, [r9, #3336]
+	str	r7, [r4, #32]
+	str	r3, [r9, #3464]
+	mvn	r3, #0
+	str	r5, [r9, #3468]
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #1
+	str	r7, [r4, #28]
+	str	r3, [r4, #36]
+.L1752:
+	ldr	r3, [fp, #-52]
+	sxth	r6, r7
+	cmp	r6, r3
+	bge	.L1771
+	ldr	r3, [fp, #-52]
+	sub	r3, r3, #1
+	cmp	r6, r3
+	lsl	r3, r6, #1
+	bne	.L1753
+	add	r2, r8, r3
+	ldrh	r0, [r8, r3]
 	mov	r1, #1
-	ldr	r3, [r10, #3296]
-	sub	r0, fp, #60
-	str	r5, [fp, #-44]
-	add	r3, r3, r7
-	ldr	r2, [r3, #8]
-	ldr	r3, [r3, #12]
 	str	r2, [fp, #-52]
-	mov	r2, #0
-	str	r3, [fp, #-48]
-	bl	FlashReadPages
+	bl	FtlGetLastWrittenPage
+	sxth	r3, r0
+	ldr	r9, .L1786
+	add	r0, r0, #1
+	strh	r7, [r4]	@ movhi
+	str	r3, [fp, #-60]
+	mov	r7, #0
+	ldr	r3, [fp, #-56]
+	add	r10, r9, #3456
+	strh	r0, [r4, #2]	@ movhi
+	ldr	r3, [r3, r6, lsl #2]
+	str	r3, [r4, #28]
+.L1754:
 	ldr	r3, [fp, #-60]
-	cmn	r3, #1
-	ldreq	r3, [r10, #2708]
-	addeq	r3, r3, #1
-	streq	r3, [r10, #2708]
-	beq	.L1744
-	ldr	r3, [r8, #8]
-	cmp	r5, r3
-	beq	.L1743
-	ldr	r3, [r10, #2708]
-	mov	r2, r5
-	ldr	r0, .L1771+20
-	add	r3, r3, #1
-	str	r3, [r10, #2708]
-	ldr	r1, [r8, #8]
-	bl	sftl_printk
-.L1743:
-	ldr	r3, [r8, #8]
-	cmp	r5, r3
-	beq	.L1744
-	movw	r2, #1102
-	ldr	r1, .L1771+12
-	ldr	r0, .L1771+16
-	bl	sftl_printk
-.L1744:
-	ldr	r3, [fp, #-76]
-	lsl	r2, r6, #9
-	cmp	r5, r3
-	bne	.L1745
-	ldr	r3, [r10, #3296]
-	ldr	r1, [fp, #-84]
-	add	r7, r3, r7
-	ldr	r3, [fp, #-88]
-	ldr	r0, [r7, #8]
-	add	r0, r0, r3, lsl #9
-.L1768:
-	bl	ftl_memcpy
-.L1737:
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r10, #32]
+	sxth	r8, r7
+	add	r2, r3, #1
+	cmp	r8, r2
+	blt	.L1757
+.L1771:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldr	r3, .L1786
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r3, #104]
 	cmp	r2, r3
-	bcc	.L1746
-	movw	r2, #1117
-	ldr	r1, .L1771+12
-	ldr	r0, .L1771+16
+	bne	.L1759
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1759:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1757:
+	ldr	r3, [fp, #-52]
+	mov	r0, r10
+	ldrh	r2, [r3]
+	orr	r2, r8, r2, lsl #10
+	str	r2, [r9, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r9, #3468]
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	str	r2, [fp, #-56]
+	beq	.L1755
+	ldrh	r1, [r9, #110]
+	ldr	r0, [r9, #3464]
+	bl	js_hash
+	ldr	r2, [fp, #-56]
+	cmp	r2, r0
+	beq	.L1755
+	str	r0, [sp, #4]
+	mov	r3, r8
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r1, .L1786+4
+	ldr	r0, .L1786+8
 	bl	sftl_printk
-.L1746:
-	ldr	r3, .L1771+24
-	ldr	r2, [fp, #-104]
-	ldr	r1, [fp, #-100]
-	strh	r3, [r2, r1]	@ movhi
-	ldr	r3, [r10, #2544]
-	str	r5, [r8, #8]
-	add	r5, r5, #1
-	str	r3, [r8, #4]
-	add	r3, r3, #1
+	mvn	r3, #0
+	str	r3, [r9, #3456]
+.L1755:
+	ldr	r3, [r9, #3456]
 	cmn	r3, #1
-	moveq	r3, #0
-	str	r3, [r10, #2544]
-	ldr	r3, [fp, #-64]
-	str	r3, [r8, #12]
-	ldrh	r3, [r4]
-	strh	r3, [r8, #2]	@ movhi
+	beq	.L1756
+	ldrh	r3, [r5, #8]
+	ldr	r2, [fp, #-48]
+	cmp	r2, r3
+	bls	.L1756
+	ldrh	r1, [r5]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	ldreq	r2, [r9, #3460]
+	ldreq	r1, [fp, #-44]
+	streq	r2, [r1, r3, lsl #2]
+.L1756:
+	add	r7, r7, #1
+	b	.L1754
+.L1753:
+	ldr	r2, [r9, #3304]
+	ldr	r0, .L1786+12
+	str	r2, [r9, #3464]
+	add	r2, r8, r3
+	str	r2, [fp, #-60]
+	ldrh	r2, [r8, r3]
+	ldrh	r3, [r9, #104]
+	sub	r3, r3, #1
+	orr	r3, r3, r2, lsl #10
+	mov	r2, #1
+	mov	r1, r2
+	str	r3, [r9, #3460]
+	bl	FlashReadPages
+	ldr	r3, [r9, #3456]
+	cmn	r3, #1
+	beq	.L1773
+	ldrh	r2, [r5]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L1773
+	ldrh	r2, [r5, #8]
+	movw	r3, #64245
+	cmp	r2, r3
+	beq	.L1761
+.L1773:
+	mov	r10, #0
+.L1762:
+	ldrh	r2, [r9, #104]
+	sxth	r3, r10
+	cmp	r3, r2
+	bge	.L1769
+	ldr	r2, [fp, #-60]
+	ldr	r0, .L1786+12
+	str	r3, [fp, #-68]
+	ldrh	r2, [r2]
+	orr	r2, r3, r2, lsl #10
+	str	r2, [r9, #3460]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r9, #3468]
+	ldr	r2, [r2, #12]
+	cmp	r2, #0
+	str	r2, [fp, #-64]
+	beq	.L1766
+	ldrh	r1, [r9, #110]
+	ldr	r0, [r9, #3464]
+	bl	js_hash
+	ldr	r2, [fp, #-64]
+	cmp	r2, r0
+	beq	.L1766
+	str	r0, [sp, #4]
+	str	r2, [sp]
+	mov	r2, r6
 	ldr	r3, [fp, #-68]
-	add	r3, r3, #1
-	b	.L1770
-.L1740:
-	ldr	r3, [r10, #3296]
+	ldr	r1, .L1786+4
+	ldr	r0, .L1786+16
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r9, #3456]
+.L1766:
+	ldr	r3, [r9, #3456]
+	cmn	r3, #1
+	beq	.L1767
+	ldrh	r3, [r5, #8]
+	ldr	r2, [fp, #-48]
+	cmp	r2, r3
+	bls	.L1767
+	ldrh	r1, [r5]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	ldreq	r2, [r9, #3460]
+	ldreq	r1, [fp, #-44]
+	streq	r2, [r1, r3, lsl #2]
+.L1767:
+	add	r10, r10, #1
+	b	.L1762
+.L1761:
 	mov	r1, #0
-	ldrh	r2, [r10, #110]
-	add	r3, r3, r7
-	ldr	r0, [r3, #8]
-	bl	ftl_memset
-	b	.L1744
-.L1745:
-	ldrh	r1, [r10, #58]
-	ldr	r3, [r10, #3296]
-	mul	r1, r5, r1
-	add	r7, r3, r7
-	ldr	r3, [fp, #-84]
-	ldr	r0, [r7, #8]
-	sub	r1, r1, r9
-	add	r1, r3, r1, lsl #9
-	b	.L1768
-.L1732:
-	ldr	r3, [r10, #3296]
-	add	r7, r3, r7
-	b	.L1767
-.L1752:
-	ldr	r5, .L1771+28
-	mov	r4, #256
-	ldr	r6, .L1771+32
-.L1755:
-	ldrh	r3, [r5]
-	movw	r2, #65535
+	mov	ip, #4
+.L1763:
+	ldrh	r2, [r9, #104]
+	sxth	r3, r1
+	sub	r2, r2, #1
 	cmp	r3, r2
-	bne	.L1753
-	ldrh	r2, [r6]
-	cmp	r2, r3
-	bne	.L1753
-	mov	r0, #0
-	bl	List_get_gc_head_node
-	uxth	r0, r0
-	bl	FtlGcRefreshBlock
-.L1753:
-	ldr	r3, .L1771+36
-	mov	r1, #1
-	mov	r2, #128
-	mov	r0, r1
-	strh	r2, [r3]	@ movhi
-	strh	r2, [r3, #-2]	@ movhi
-	bl	rk_ftl_garbage_collect
-	mov	r1, #1
+	blt	.L1765
+.L1769:
+	add	r7, r7, #1
+	b	.L1752
+.L1765:
+	ldr	r0, [r9, #3304]
+	add	r1, r1, #1
+	ldr	r6, [fp, #-48]
+	ldr	r2, [r0, r3, lsl #3]
+	uxth	lr, r2
+	cmp	r6, lr
+	addhi	r3, ip, r3, lsl #3
+	movhi	r2, lr
+	ldrhi	r3, [r0, r3]
+	ldrhi	r0, [fp, #-44]
+	strhi	r3, [r0, r2, lsl #2]
+	b	.L1763
+.L1787:
+	.align	2
+.L1786:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+615
+	.word	.LC116
+	.word	.LANCHOR0+3456
+	.word	.LC117
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadVonderInfo
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r3, .L1789
+	ldrh	r2, [r3, #120]
+	add	r0, r3, #3600
+	add	r0, r0, #12
+	strh	r2, [r0, #10]	@ movhi
+	ldr	r2, .L1789+4
+	strh	r2, [r0, #4]	@ movhi
+	ldrh	r2, [r3, #144]
+	strh	r2, [r0, #8]	@ movhi
+	ldrh	r2, [r3, #122]
+	strh	r2, [r0, #6]	@ movhi
+	ldr	r2, [r3, #148]
+	str	r2, [r3, #3624]
+	ldr	r2, [r3, #3372]
+	str	r2, [r3, #3628]
+	ldr	r2, [r3, #3368]
+	str	r2, [r3, #3632]
+	ldr	r2, [r3, #3376]
+	str	r2, [r3, #3636]
+	bl	FtlMapTblRecovery
 	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldr	r3, .L1771+40
-	ldrh	r3, [r3]
-	cmp	r3, #2
-	bhi	.L1754
-	subs	r4, r4, #1
-	bne	.L1755
-	b	.L1754
-.L1772:
+	ldmfd	sp, {fp, sp, pc}
+.L1790:
 	.align	2
-.L1771:
+.L1789:
 	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+606
-	.word	.LC1
-	.word	.LC114
-	.word	-3947
-	.word	.LANCHOR0+2588
-	.word	.LANCHOR0+3202
-	.word	.LANCHOR0+3150
-	.word	.LANCHOR0+2344
-	.size	FtlWrite, .-FtlWrite
+	.word	-3962
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
 	.align	2
-	.global	sftl_vendor_write
+	.global	FtlLoadMapInfo
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	sftl_vendor_write, %function
-sftl_vendor_write:
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	mov	r3, r2
-	mov	r2, r1
-	mov	r1, r0
-	mov	r0, #16
-	bl	FtlWrite
+	bl	FtlL2PDataInit
+	ldr	r0, .L1792
+	bl	FtlMapTblRecovery
+	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-	.size	sftl_vendor_write, .-sftl_vendor_write
+.L1793:
 	.align	2
-	.global	FtlMakeBbt
+.L1792:
+	.word	.LANCHOR0+3396
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	FtlSysBlkInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
-	@ args = 0, pretend = 0, frame = 4
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mov	r7, #0
-	ldr	r8, .L1793
-	bl	FtlBbtMemInit
-	bl	FtlLoadFactoryBbt
-	sub	r5, r8, #180
-	sub	r9, r8, #18
-	mov	r4, r5
-.L1775:
-	ldrh	r3, [r5, #54]
-	cmp	r7, r3
-	bcc	.L1781
-	mov	r0, #0
-.L1782:
-	ldrh	r2, [r4, #114]
-	uxth	r3, r0
-	add	r5, r0, #1
+	ldr	r4, .L1809
+	mov	r2, #0
+	movw	r3, #3476
+	ldrh	r0, [r4, #36]
+	strh	r2, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	add	r3, r4, #2576
+	ldrh	r2, [r3]
+	movw	r3, #65535
 	cmp	r2, r3
-	bhi	.L1783
-	ldrh	r5, [r4, #164]
-	movw	r6, #65535
-	sub	r5, r5, #1
-	uxth	r5, r5
-.L1784:
-	ldrh	r3, [r4, #164]
-	sub	r3, r3, #48
-	cmp	r5, r3
-	ble	.L1788
-	mov	r0, r5
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1785
-	mov	r0, r5
-	bl	FlashTestBlk
-	cmp	r0, #0
-	beq	.L1786
-	mov	r0, r5
-	bl	FtlBbmMapBadBlock
-.L1785:
-	sub	r5, r5, #1
-	uxth	r5, r5
-	b	.L1784
-.L1781:
-	ldrh	r3, [r9, #2]!
-	movw	r2, #65535
-	ldr	r0, [r5, #3300]
-	ldr	r10, [r5, #3332]
-	cmp	r3, r2
-	str	r0, [r5, #3460]
-	str	r10, [r5, #3464]
-	beq	.L1776
-	ldrh	ip, [r5, #98]
-	mov	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1793+4
-	mla	ip, r7, ip, r3
-	lsl	r3, ip, #10
-	str	ip, [fp, #-44]
-	str	r3, [r5, #3456]
-	bl	FlashReadPages
-	ldrh	r2, [r5, #98]
-	ldr	r1, [r5, #3460]
-	ldr	r0, [r8]
-	add	r2, r2, #7
-	asr	r2, r2, #3
-	bl	ftl_memcpy
-	ldr	ip, [fp, #-44]
-.L1777:
-	uxth	r0, ip
-	add	r7, r7, #1
-	add	r8, r8, #4
-	bl	FtlBbmMapBadBlock
-	b	.L1775
-.L1776:
-	mov	r1, r7
-	bl	FlashGetBadBlockList
-	ldr	r1, [r8]
-	ldr	r0, [r5, #3460]
-	bl	FtlBbt2Bitmap
-	ldrh	r6, [r5, #98]
-.L1779:
-	sub	r6, r6, #1
-	uxth	r6, r6
-.L1778:
-	ldrh	r0, [r4, #98]
-	smlabb	r0, r0, r7, r6
-	uxth	r0, r0
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1779
-	mov	r1, #16
-	ldr	r0, [r4, #3332]
-	strh	r6, [r9]	@ movhi
-	bl	__memzero
-	mov	r1, #4096
-	ldr	r0, [r4, #3300]
-	bl	__memzero
-	ldr	r3, .L1793+8
-	strh	r3, [r10]	@ movhi
+	bne	.L1795
+.L1797:
+	mvn	r8, #0
+.L1794:
+	mov	r0, r8
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1795:
+	bl	FtlLoadSysInfo
+	subs	r8, r0, #0
+	bne	.L1797
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldrh	r1, [r4, #138]
+	mov	r3, r8
+	ldr	r2, [r4, #2492]
+	mov	r0, #12
+.L1798:
+	cmp	r3, r1
+	bge	.L1803
+	mla	ip, r0, r3, r2
+	ldr	ip, [ip, #4]
+	cmp	ip, #0
+	bge	.L1799
+.L1803:
+	ldr	r5, .L1809+4
+	cmp	r3, r1
+	ldrh	r2, [r5, #28]
+	add	r6, r5, #80
+	add	r2, r2, #1
+	strh	r2, [r5, #28]	@ movhi
+	bge	.L1808
+.L1800:
+	ldr	r7, .L1809+8
+	ldr	r0, .L1809+12
+	bl	FtlSuperblockPowerLostFix
+	mov	r0, r7
+	bl	FtlSuperblockPowerLostFix
+	movw	r3, #2348
+	ldr	r1, [r4, #2324]
+	ldrh	r3, [r4, r3]
+	ldrh	r0, [r6, #4]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	movw	r2, #2396
+	ldrh	r2, [r4, r2]
+	ldrh	r3, [r4, #102]
+	ldr	r0, [r4, #2324]
+	ldrh	ip, [r7, #4]
+	lsl	r2, r2, #1
+	strh	r3, [r6, #2]	@ movhi
 	mov	r3, #0
-	str	r3, [r10, #4]
-	ldrh	r3, [r9]
-	ldrh	ip, [r4, #98]
-	strh	r3, [r10, #2]	@ movhi
-	ldrh	r3, [r9]
-	ldr	r1, [r8]
-	ldr	r0, [r4, #3460]
-	mla	ip, r7, ip, r3
-	lsl	r3, ip, #10
-	str	ip, [fp, #-44]
-	str	r3, [r4, #3456]
-	ldr	r3, .L1793+12
-	ldrh	r2, [r3]
-	lsl	r2, r2, #2
-	bl	ftl_memcpy
-	mov	r2, #1
-	ldr	r0, .L1793+4
-	mov	r1, r2
-	bl	FlashEraseBlocks
-	mov	r3, #1
-	ldr	r0, .L1793+4
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [r4, #3452]
-	ldr	ip, [fp, #-44]
-	cmn	r3, #1
-	bne	.L1777
-	uxth	r0, ip
-	bl	FtlBbmMapBadBlock
-	b	.L1778
-.L1783:
-	uxth	r0, r0
-	bl	FtlBbmMapBadBlock
-	mov	r0, r5
-	b	.L1782
-.L1786:
-	ldrh	r3, [r4, #152]
-	cmp	r3, r6
-	strheq	r5, [r4, #152]	@ movhi
-	beq	.L1785
-.L1787:
-	strh	r5, [r4, #156]	@ movhi
-.L1788:
-	ldrh	r3, [r4, #152]
-	mov	r5, #0
-	ldr	r0, [r4, #3268]
-	mov	r1, #1
-	str	r5, [r4, #160]
-	mov	r2, #2
-	strh	r5, [r4, #154]	@ movhi
-	lsl	r3, r3, #10
-	str	r3, [r0, #4]
-	ldrh	r3, [r4, #156]
-	lsl	r3, r3, #10
-	str	r3, [r0, #24]
-	bl	FlashEraseBlocks
-	ldrh	r0, [r4, #152]
-	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, #156]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #156]
-	strh	r5, [r4, #154]	@ movhi
+	strb	r3, [r4, #2354]
+	strh	r3, [r6, #4]	@ movhi
+	ldrh	r1, [r0, r2]
+	sub	r1, r1, ip
+	strh	r1, [r0, r2]	@ movhi
+	strb	r3, [r4, #2402]
+	strh	r3, [r7, #4]	@ movhi
+	ldrh	r3, [r5, #30]
+	ldrh	r2, [r4, #102]
 	add	r3, r3, #1
-	str	r3, [r4, #160]
-	ldrh	r3, [r4, #152]
-	strh	r2, [r4, #152]	@ movhi
-	strh	r3, [r4, #156]	@ movhi
-	bl	FtlBbmTblFlush
+	strh	r2, [r7, #2]	@ movhi
+	strh	r3, [r5, #30]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L1804
+.L1799:
+	add	r3, r3, #1
+	b	.L1798
+.L1808:
+	movw	r3, #3476
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L1800
+.L1804:
+	bl	FtlVpcCheckAndModify
+	movw	r3, #2348
+	ldrh	r0, [r4, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1794
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	bne	.L1794
+	ldr	r5, .L1809+8
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	bne	.L1794
+	bl	FtlGcRefreshBlock
+	movw	r3, #2396
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	sub	r0, r5, #48
+	bl	allocate_new_data_superblock
 	mov	r0, r5
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1794:
+	bl	allocate_new_data_superblock
+	b	.L1794
+.L1810:
 	.align	2
-.L1793:
-	.word	.LANCHOR0+180
-	.word	.LANCHOR0+3452
-	.word	-3872
-	.word	.LANCHOR0+3388
-	.size	FtlMakeBbt, .-FtlMakeBbt
+.L1809:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2268
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2348
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
 	.syntax unified
@@ -12613,7 +12713,7 @@ ftl_low_format:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1819
+	ldr	r4, .L1835
 	mov	r3, #0
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
@@ -12621,41 +12721,41 @@ ftl_low_format:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L1796
+	beq	.L1812
 	bl	FtlMakeBbt
-.L1796:
-	ldr	r0, .L1819+4
+.L1812:
+	ldr	r0, .L1835+4
 	mov	r2, #0
-.L1797:
+.L1813:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1798
+	blt	.L1814
 	ldrh	r6, [r4, #40]
 	mov	r5, #0
-.L1799:
+.L1815:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1800
+	bhi	.L1816
 	ldrh	r1, [r4, #32]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1801
-.L1805:
+	bge	.L1817
+.L1821:
 	mov	r0, #0
 	mov	r6, r0
-.L1802:
+.L1818:
 	ldrh	r2, [r4, #40]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1806
+	bhi	.L1822
 	ldrh	r3, [r4, #42]
 	movw	r9, #2572
 	ldrh	r5, [r4, #32]
 	ldr	r10, [r4, #44]
-	str	r3, [r4, #3284]
+	str	r3, [r4, #3288]
 	mov	r1, r5
 	mov	r0, r10
 	bl	__udivsi3
@@ -12667,7 +12767,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r6, r3
-	ble	.L1807
+	ble	.L1823
 	mov	r1, r5
 	sub	r0, r10, r6
 	bl	__udivsi3
@@ -12675,10 +12775,10 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r4, r9]	@ movhi
-.L1807:
+.L1823:
 	ldrh	r3, [r4, #94]
 	cmp	r3, #0
-	beq	.L1809
+	beq	.L1825
 	movw	r2, #2572
 	ldrh	r1, [r4, r2]
 	add	r1, r1, r3, lsr #1
@@ -12689,70 +12789,69 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r7, r3
 	strhlt	r3, [r4, r2]	@ movhi
-.L1809:
+.L1825:
 	movw	r3, #2572
+	ldr	r1, [r4, #2504]
+	ldrh	r3, [r4, r3]
 	mvn	r6, #0
-	ldrh	r2, [r4, r3]
-	ldr	r3, [r4, #2504]
-	sub	r3, r3, r2
-	mul	r5, r5, r3
+	sub	r1, r1, r3
 	ldrh	r3, [r4, #102]
-	str	r5, [r4, #3472]
-	mul	r5, r5, r3
+	mul	r1, r5, r1
+	ldr	r5, .L1835+8
+	sub	r5, r5, #244
+	str	r1, [r4, #3676]
+	mul	r1, r1, r3
 	ldrh	r3, [r4, #58]
-	str	r5, [r4, #2504]
-	mul	r5, r5, r3
-	str	r5, [r4, #140]
+	str	r1, [r4, #2504]
+	mul	r1, r1, r3
+	str	r1, [r4, #140]
 	bl	FtlBbmTblFlush
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r5, .L1819+8
 	lsl	r2, r2, #1
-	sub	r5, r5, #240
 	bl	ftl_memset
-	movw	r2, #2588
 	mov	r3, #0
-	strh	r6, [r4, r2]	@ movhi
 	movw	r2, #2348
 	strh	r3, [r4, r2]	@ movhi
 	mov	r1, #255
 	ldrh	r2, [r4, #40]
-	strh	r3, [r5, #242]	@ movhi
+	strh	r3, [r5, #246]	@ movhi
+	strh	r6, [r5, #244]	@ movhi
 	mov	r7, r5
 	str	r3, [r4, #2500]
-	strb	r3, [r4, #2594]
-	strb	r3, [r4, #2596]
+	strb	r3, [r4, #2598]
 	lsr	r2, r2, #3
+	strb	r3, [r4, #2600]
 	strh	r3, [r5, #2]	@ movhi
 	strb	r3, [r4, #2354]
 	mov	r3, #1
 	ldr	r0, [r4, #24]
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1811:
+.L1827:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1812
+	bne	.L1828
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1811
-.L1798:
-	ldr	ip, [r4, #3312]
+	b	.L1827
+.L1814:
+	ldr	ip, [r4, #3316]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [ip, r3, lsl #2]
-	ldr	r1, [r4, #3316]
+	ldr	r1, [r4, #3320]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1797
-.L1800:
+	b	.L1813
+.L1816:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12760,8 +12859,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1799
-.L1801:
+	b	.L1815
+.L1817:
 	mov	r0, r5
 	bl	__udivsi3
 	ldr	r3, [r4, #132]
@@ -12771,25 +12870,25 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1803:
+.L1819:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1805
+	bls	.L1821
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1803
-.L1806:
+	b	.L1819
+.L1822:
 	mov	r1, #0
 	uxth	r0, r0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	mov	r0, r5
 	uxth	r6, r6
-	b	.L1802
-.L1812:
+	b	.L1818
+.L1828:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -12800,7 +12899,7 @@ ftl_low_format:
 	ldr	r2, [r4, #2324]
 	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L1819+12
+	ldr	r2, .L1835+12
 	movw	r1, #2396
 	strb	r3, [r4, #2402]
 	strh	r3, [r2, #2]	@ movhi
@@ -12811,21 +12910,21 @@ ftl_low_format:
 	strh	r3, [r4, r1]	@ movhi
 	mov	r3, #1
 	strb	r3, [r4, #2404]
-.L1813:
+.L1829:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1814
+	bne	.L1830
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1813
-.L1814:
+	b	.L1829
+.L1830:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -12838,10 +12937,10 @@ ftl_low_format:
 	movw	r3, #2444
 	strh	r5, [r4, r3]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L1819+16
+	ldr	r3, .L1835+16
 	mov	r2, #0
 	strh	r2, [r3, #2]	@ movhi
-	ldr	r2, [r4, #3472]
+	ldr	r2, [r4, #3676]
 	strh	r5, [r3, #4]	@ movhi
 	strh	r0, [r3]	@ movhi
 	strh	r2, [r3, #6]	@ movhi
@@ -12853,35 +12952,75 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L1819+20
+	ldreq	r3, .L1835+20
 	moveq	r2, #1
 	streq	r2, [r3]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1820:
+.L1836:
 	.align	2
-.L1819:
+.L1835:
 	.word	.LANCHOR0
 	.word	168778952
-	.word	.LANCHOR0+2588
+	.word	.LANCHOR0+2592
 	.word	.LANCHOR0+2396
 	.word	.LANCHOR0+2576
 	.word	.LANCHOR2
 	.size	ftl_low_format, .-ftl_low_format
 	.align	2
-	.global	ftl_memcmp
+	.global	sftl_init
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_memcmp, %function
-ftl_memcmp:
+	.type	sftl_init, %function
+sftl_init:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{fp, ip, lr, pc}
+	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	bl	memcmp
-	ldmfd	sp, {fp, sp, pc}
-	.size	ftl_memcmp, .-ftl_memcmp
+	ldr	r4, .L1843
+	mvn	r3, #0
+	ldr	r5, .L1843+4
+	ldr	r1, .L1843+8
+	ldr	r0, .L1843+12
+	str	r3, [r5]
+	bl	sftl_printk
+	mov	r0, r4
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #36]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	bne	.L1841
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L1841
+	mov	r3, #1
+	str	r3, [r5]
+	movw	r3, #2344
+	ldrh	r3, [r4, r3]
+	cmp	r3, #15
+	bhi	.L1841
+	movw	r4, #8129
+.L1840:
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L1840
+.L1841:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1844:
+	.align	2
+.L1843:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC70
+	.word	.LC71
+	.size	sftl_init, .-sftl_init
 	.align	2
 	.global	FtlWriteToIDB
 	.syntax unified
@@ -12906,30 +13045,30 @@ FtlWriteToIDB:
 	orrcs	r3, r3, #1
 	mov	r7, r2
 	cmp	r3, #0
-	ldr	r6, .L1886
-	beq	.L1823
-	ldr	r3, [r6, #3676]
+	ldr	r6, .L1907
+	beq	.L1846
+	ldr	r3, [r6, #3680]
 	cmp	r3, #0
-	bne	.L1824
-.L1885:
+	bne	.L1847
+.L1906:
 	mov	r4, #0
-	b	.L1822
-.L1824:
-	ldr	r3, [r6, #3680]
+	b	.L1845
+.L1847:
+	ldr	r3, [r6, #3684]
 	ldr	r2, [r3]
 	str	r3, [fp, #-112]
-	ldr	r3, .L1886+4
+	ldr	r3, .L1907+4
 	cmp	r2, r3
-	bne	.L1826
+	bne	.L1849
 	ldr	r3, [fp, #-112]
 	mov	r2, #0
 	ldrh	r1, [r6, #10]
 	add	r0, r3, #262144
 	movw	r3, #65535
-.L1830:
+.L1853:
 	ldr	ip, [r0, #-4]
 	cmp	ip, #0
-	bne	.L1827
+	bne	.L1850
 	ldr	ip, [fp, #-112]
 	sub	r3, r3, #1
 	ldr	ip, [ip, r2, lsl #2]
@@ -12938,18 +13077,18 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	ip, [r0, #-4]!
-	bne	.L1830
+	bne	.L1853
 	mov	r3, #512
-	b	.L1883
-.L1827:
+	b	.L1904
+.L1850:
 	add	r3, r3, #127
 	lsr	r3, r3, #7
-.L1883:
+.L1904:
 	str	r3, [fp, #-116]
 	lsl	r1, r1, #2
 	ldr	r3, [fp, #-116]
 	uxth	r1, r1
-	ldr	r4, .L1886
+	ldr	r4, .L1907
 	add	r0, r3, #4
 	bl	__udivsi3
 	add	r3, r0, #1
@@ -12961,68 +13100,60 @@ FtlWriteToIDB:
 	mov	r3, #0
 	str	r3, [fp, #-124]
 	str	r3, [fp, #-108]
-.L1853:
+.L1875:
 	mov	r1, #512
-	ldr	r0, [r4, #3684]
+	ldr	r0, [r4, #3688]
 	bl	__memzero
 	ldr	r3, [fp, #-108]
 	ldrh	r7, [r4, #10]
 	mul	r8, r3, r7
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	cmp	r3, #0
 	moveq	r10, #6
-	beq	.L1831
-	ldr	r3, [r4, #3264]
+	beq	.L1854
+	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	moveq	r10, #6
 	movne	r10, #9
-.L1831:
-	ldr	r3, [r6, #3248]
+.L1854:
+	ldr	r3, [r6, #3252]
 	mov	r1, r8
 	mov	r0, #0
 	blx	r3
 	ldr	r3, [fp, #-120]
 	cmp	r3, #1
-	beq	.L1832
-	ldr	r3, [r6, #3248]
+	beq	.L1855
+	ldr	r3, [r6, #3252]
 	add	r1, r7, r8
 	mov	r0, #0
 	blx	r3
-.L1832:
+.L1855:
 	cmp	r10, #9
 	movne	r5, #0
-	bne	.L1833
-	ldr	r5, [r6, #3684]
+	bne	.L1856
+	ldr	r5, [r6, #3688]
 	mov	r1, #1024
 	mov	r0, r5
 	bl	__memzero
-	ldr	r2, .L1886+8
-	mov	r3, #12
-	add	r1, r5, #11
-	add	r0, r5, #23
-	stm	r5, {r2, r3}
-	mov	r3, #0
+	ldr	r3, .L1907+8
+	mov	r1, #12
 	mov	r2, #4
-	str	r3, [r5, #12]
-	strb	r3, [r5, #16]
+	str	r1, [r5, #4]
 	strb	r2, [r5, #17]
-	strb	r3, [r5, #20]
+	add	r0, r5, r1
+	str	r3, [r5]
+	mov	r3, #0
 	ldrh	r2, [r6, #10]
-	strh	r3, [r5, #22]	@ movhi
-	ldr	r3, .L1886+12
+	str	r3, [r5, #12]
+	strb	r3, [r5, #16]
 	strh	r2, [r5, #18]	@ movhi
 	mov	r2, #16
+	strb	r3, [r5, #20]
 	strb	r2, [r5, #21]
-.L1834:
-	lsr	r2, r3, #2
-	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
-	add	r2, r2, r3, lsl #5
-	cmp	r0, r1
-	add	r2, r2, ip
-	eor	r3, r3, r2
-	bne	.L1834
-	str	r3, [r5, #8]
-.L1833:
+	strh	r3, [r5, #22]	@ movhi
+	bl	js_hash
+	str	r0, [r5, #8]
+.L1856:
 	ldr	r3, [fp, #-120]
 	mov	r9, r8
 	mul	r3, r7, r3
@@ -13030,10 +13161,10 @@ FtlWriteToIDB:
 	str	r3, [fp, #-136]
 	ldr	r3, [fp, #-112]
 	str	r3, [fp, #-128]
-.L1835:
+.L1857:
 	ldr	r3, [fp, #-136]
 	cmp	r7, r3
-	beq	.L1842
+	beq	.L1864
 	cmp	r10, #9
 	addne	r3, r8, r7
 	addeq	r3, r9, #1
@@ -13045,197 +13176,197 @@ FtlWriteToIDB:
 	movw	r3, #61424
 	str	r3, [fp, #-100]
 	movne	r0, #0
-	bne	.L1838
-	ldr	r3, [r4, #3260]
+	bne	.L1860
+	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
 	sub	r3, fp, #104
-	ldr	ip, [r4, #3252]
+	ldr	ip, [r4, #3256]
 	mov	r2, r5
 	mov	r1, r8
 	mov	r0, #0
 	blx	ip
-	ldr	r2, [r4, #3260]
+	ldr	r2, [r4, #3264]
 	str	r0, [fp, #-140]
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r2
 	ldr	r3, [fp, #-140]
 	cmn	r3, #1
-	bne	.L1839
-.L1842:
+	bne	.L1861
+.L1864:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldrh	r10, [r4, #10]
-	ldr	r7, [r4, #3684]
+	ldr	r7, [r4, #3688]
 	str	r3, [fp, #-128]
 	ldr	r3, [fp, #-108]
 	mul	r9, r3, r10
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	cmp	r3, #0
 	moveq	r8, #6
-	beq	.L1841
-	ldr	r3, [r4, #3264]
+	beq	.L1863
+	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	moveq	r8, #6
 	movne	r8, #9
-.L1841:
+.L1863:
 	ldr	r3, [fp, #-120]
 	mov	r5, #0
 	mul	r10, r10, r3
-.L1844:
+.L1866:
 	cmp	r5, r10
-	beq	.L1848
+	beq	.L1870
 	cmp	r5, #0
 	cmpeq	r8, #9
 	moveq	r0, #1
 	movne	r0, #0
-	bne	.L1845
-	ldr	r3, [r4, #3260]
+	bne	.L1867
+	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
-	ldr	r3, [r4, #3264]
+	ldr	r3, [r4, #3268]
 	mov	r0, #2
 	blx	r3
 	mov	r2, r7
-	ldr	ip, [r4, #3256]
+	ldr	ip, [r4, #3260]
 	mov	r1, r9
 	sub	r3, fp, #104
 	mov	r0, #0
 	blx	ip
-	ldr	r3, [r4, #3264]
+	ldr	r3, [r4, #3268]
 	ldr	r0, [fp, #-128]
 	blx	r3
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r7]
-	ldr	r2, .L1886+8
+	ldr	r2, .L1907+8
 	cmp	r3, r2
-	beq	.L1846
-.L1848:
-	ldr	r0, [r4, #3684]
+	beq	.L1868
+.L1870:
+	ldr	r0, [r4, #3688]
 	mov	r5, #0
 	ldr	r3, [fp, #-112]
-.L1847:
+.L1869:
 	mov	r8, r3
 	ldr	r1, [r0, r5, lsl #2]
 	ldr	r2, [r8]
 	lsl	r7, r5, #2
 	add	r3, r3, #4
 	cmp	r1, r2
-	beq	.L1850
+	beq	.L1872
 	mov	r1, #512
 	bl	__memzero
-	ldr	r2, [r6, #3684]
+	ldr	r2, [r6, #3688]
 	ldr	r1, [fp, #-108]
 	str	r5, [sp]
-	ldr	r0, .L1886+16
+	ldr	r0, .L1907+12
 	ldr	r3, [r8]
 	ldr	r2, [r2, r7]
 	bl	sftl_printk
 	ldrh	r1, [r6, #10]
 	mov	r0, #0
 	ldr	r2, [fp, #-108]
-	ldr	r3, [r6, #3248]
+	ldr	r3, [r6, #3252]
 	mul	r1, r2, r1
 	blx	r3
-.L1851:
+.L1873:
 	ldr	r3, [fp, #-108]
 	ldr	r2, [fp, #-120]
 	add	r3, r3, r2
 	cmp	r3, #15
 	str	r3, [fp, #-108]
-	bls	.L1853
+	bls	.L1875
 	ldr	r3, [fp, #-124]
 	cmp	r3, #0
-	bne	.L1854
-.L1826:
+	bne	.L1876
+.L1849:
 	mvn	r3, #0
 	str	r3, [fp, #-116]
-.L1854:
-	ldr	r5, .L1886
+.L1876:
+	ldr	r5, .L1907
 	mov	r3, #0
 	ldr	r4, [fp, #-116]
-	ldr	r0, [r5, #3680]
-	str	r3, [r5, #3676]
-	bl	kfree
 	ldr	r0, [r5, #3684]
+	str	r3, [r5, #3680]
 	bl	kfree
-.L1822:
+	ldr	r0, [r5, #3688]
+	bl	kfree
+.L1845:
 	mov	r0, r4
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1838:
-	ldr	ip, [r4, #3252]
+.L1860:
+	ldr	ip, [r4, #3256]
 	sub	r3, fp, #104
 	ldr	r2, [fp, #-128]
 	mov	r1, r9
 	blx	ip
 	cmn	r0, #1
-	beq	.L1842
+	beq	.L1864
 	ldr	r3, [fp, #-128]
 	add	r3, r3, #2048
 	str	r3, [fp, #-128]
-.L1839:
+.L1861:
 	add	r7, r7, #1
 	add	r9, r9, #1
-	b	.L1835
-.L1845:
-	ldr	ip, [r4, #3256]
+	b	.L1857
+.L1867:
+	ldr	ip, [r4, #3260]
 	sub	r3, fp, #104
 	mov	r2, r7
 	add	r1, r9, r5
 	blx	ip
 	cmn	r0, #1
-	beq	.L1848
+	beq	.L1870
 	ldr	r2, [fp, #-100]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1848
+	bne	.L1870
 	add	r7, r7, #2048
-.L1846:
+.L1868:
 	add	r5, r5, #1
-	b	.L1844
-.L1850:
+	b	.L1866
+.L1872:
 	ldr	r2, [fp, #-132]
 	add	r5, r5, #1
 	cmp	r5, r2
-	bne	.L1847
+	bne	.L1869
 	ldr	r3, [fp, #-124]
 	add	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [fp, #-124]
-	bls	.L1851
-	b	.L1854
-.L1823:
+	bls	.L1873
+	b	.L1876
+.L1846:
 	cmp	r0, #64
-	bne	.L1855
+	bne	.L1877
 	mov	r0, #262144
 	bl	ftl_malloc
-	str	r0, [r6, #3680]
+	str	r0, [r6, #3684]
 	mov	r0, #262144
 	bl	ftl_malloc
-	ldr	r3, [r6, #3680]
-	str	r0, [r6, #3684]
-	cmp	r0, #0
-	cmpne	r3, #0
-	beq	.L1856
+	ldr	r3, [r6, #3684]
+	str	r0, [r6, #3688]
+	cmp	r3, #0
+	cmpne	r0, #0
+	beq	.L1878
 	mov	r2, #1
 	mov	r1, #262144
 	mov	r0, r3
-	str	r2, [r6, #3676]
+	str	r2, [r6, #3680]
 	bl	__memzero
-.L1855:
-	ldr	r3, [r6, #3676]
+.L1877:
+	ldr	r3, [r6, #3680]
 	cmp	r3, #0
-	beq	.L1885
+	beq	.L1906
 	cmp	r5, #63
-	ldr	r1, [r6, #3680]
-	ldrhi	r6, .L1886+20
+	ldr	r1, [r6, #3684]
+	ldrhi	r6, .L1907+16
 	rsbls	r5, r5, #64
 	subls	r4, r4, r5
 	addls	r7, r7, r5, lsl #9
 	movls	r6, r1
-	ldr	r0, .L1886+24
+	ldr	r0, .L1907+20
 	addhi	r6, r5, r6
 	mov	r2, #262144
 	addhi	r6, r1, r6, lsl #9
@@ -13250,24 +13381,23 @@ FtlWriteToIDB:
 	mov	r1, r7
 	mov	r0, r6
 	bl	ftl_memcpy
-	b	.L1885
-.L1856:
-	ldr	r1, .L1886+28
-	ldr	r0, .L1886+32
+	b	.L1906
+.L1878:
+	ldr	r1, .L1907+24
+	ldr	r0, .L1907+28
 	bl	sftl_printk
-	b	.L1855
-.L1887:
+	b	.L1877
+.L1908:
 	.align	2
-.L1886:
+.L1907:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	1179535694
-	.word	1204201446
-	.word	.LC115
+	.word	.LC118
 	.word	8388544
-	.word	.LC117
-	.word	.LANCHOR1+615
-	.word	.LC116
+	.word	.LC120
+	.word	.LANCHOR1+633
+	.word	.LC119
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	2
 	.global	sftl_write
@@ -13304,17 +13434,17 @@ rk_sftl_vendor_dev_ops_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1892
-	ldr	r3, [r2, #3688]
+	ldr	r2, .L1913
+	ldr	r3, [r2, #3692]
 	cmp	r3, #0
-	streq	r0, [r2, #3688]
+	streq	r0, [r2, #3692]
 	moveq	r0, r3
-	streq	r1, [r2, #3692]
+	streq	r1, [r2, #3696]
 	mvnne	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1893:
+.L1914:
 	.align	2
-.L1892:
+.L1913:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
@@ -13330,28 +13460,28 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #65536
-	ldr	r4, .L1903
+	ldr	r4, .L1924
 	bl	ftl_malloc
 	cmp	r0, #0
-	str	r0, [r4, #3696]
+	str	r0, [r4, #3700]
 	mvneq	r9, #11
-	beq	.L1894
-	ldr	r8, .L1903+4
+	beq	.L1915
+	ldr	r8, .L1924+4
 	mov	r6, #0
 	mov	r5, r6
 	mov	r7, r6
-.L1898:
-	ldr	r3, [r4, #3688]
+.L1919:
+	ldr	r3, [r4, #3692]
 	mov	r1, #128
-	ldr	r2, [r4, #3696]
+	ldr	r2, [r4, #3700]
 	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L1896
-	ldr	r2, [r4, #3696]
+	bne	.L1917
+	ldr	r2, [r4, #3700]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1897
+	bne	.L1918
 	add	r1, r2, #61440
 	ldr	r3, [r2, #4]
 	ldr	r1, [r1, #4092]
@@ -13363,44 +13493,44 @@ rk_sftl_vendor_storage_init:
 	cmp	r1, #0
 	movne	r6, r7
 	movne	r5, r3
-.L1897:
+.L1918:
 	add	r7, r7, #1
 	cmp	r7, #2
-	bne	.L1898
+	bne	.L1919
 	cmp	r5, #0
-	beq	.L1899
-	ldr	r3, [r4, #3688]
+	beq	.L1920
+	ldr	r3, [r4, #3692]
 	mov	r1, #128
 	lsl	r0, r6, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L1894
-.L1896:
-	ldr	r0, [r4, #3696]
+	beq	.L1915
+.L1917:
+	ldr	r0, [r4, #3700]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
-	str	r3, [r4, #3696]
-	b	.L1894
-.L1899:
+	str	r3, [r4, #3700]
+	b	.L1915
+.L1920:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
-	ldr	r3, [r4, #3696]
+	ldr	r3, [r4, #3700]
 	mov	r2, #1
 	add	r1, r3, #61440
 	str	r2, [r3, #4]
 	str	r8, [r3]
 	str	r2, [r1, #4092]
-	ldr	r2, .L1903+8
+	ldr	r2, .L1924+8
 	strh	r5, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1894:
+.L1915:
 	mov	r0, r9
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L1904:
+.L1925:
 	.align	2
-.L1903:
+.L1924:
 	.word	.LANCHOR0
 	.word	1380668996
 	.word	-1032
@@ -13417,26 +13547,26 @@ rk_sftl_vendor_read:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1911
+	ldr	r3, .L1932
 	mov	r4, r0
 	mov	r0, r1
-	ldr	ip, [r3, #3696]
+	ldr	ip, [r3, #3700]
 	cmp	ip, #0
 	ldrhne	lr, [ip, #10]
 	movne	r3, #0
-	bne	.L1907
-.L1910:
+	bne	.L1928
+.L1931:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1908:
+.L1929:
 	add	r3, r3, #1
-.L1907:
+.L1928:
 	cmp	r3, lr
-	bcs	.L1910
+	bcs	.L1931
 	add	r1, ip, r3, lsl #3
 	ldrh	r5, [r1, #16]
 	cmp	r5, r4
-	bne	.L1908
+	bne	.L1929
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13447,9 +13577,9 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1912:
+.L1933:
 	.align	2
-.L1911:
+.L1932:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
@@ -13466,23 +13596,23 @@ rk_sftl_vendor_write:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	ip, r1
-	ldr	r8, .L1932
+	ldr	r8, .L1953
 	mov	r9, r2
-	ldr	r4, [r8, #3696]
+	ldr	r4, [r8, #3700]
 	cmp	r4, #0
-	beq	.L1928
+	beq	.L1949
 	ldrh	r2, [r4, #10]
 	add	r7, r9, #63
 	ldrh	r3, [r4, #8]
 	bic	r7, r7, #63
 	mov	r5, #0
 	str	r3, [fp, #-44]
-.L1915:
+.L1936:
 	cmp	r5, r2
-	bcc	.L1923
+	bcc	.L1944
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1928
+	bhi	.L1949
 	add	r3, r4, r2, lsl #3
 	uxth	r7, r7
 	strh	r0, [r3, #16]	@ movhi
@@ -13513,32 +13643,32 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, [r8, #3692]
-	b	.L1931
-.L1923:
+	ldr	r3, [r8, #3696]
+	b	.L1952
+.L1944:
 	add	r6, r4, r5, lsl #3
 	ldrh	r3, [r6, #16]
 	cmp	r3, r0
 	str	r3, [fp, #-48]
-	bne	.L1916
+	bne	.L1937
 	ldrh	r1, [r6, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r9, r1
 	str	r1, [fp, #-52]
-	bls	.L1917
+	bls	.L1938
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1928
+	bhi	.L1949
 	ldrh	r8, [r6, #18]
 	sub	r2, r2, #1
 	str	r2, [fp, #-56]
-.L1918:
+.L1939:
 	ldr	r2, [fp, #-56]
 	add	r6, r6, #8
 	cmp	r5, r2
-	bcc	.L1919
+	bcc	.L1940
 	ldrh	r2, [fp, #-48]
 	add	r5, r4, r5, lsl #3
 	uxth	r8, r8
@@ -13557,7 +13687,7 @@ rk_sftl_vendor_write:
 	strh	r8, [r4, #12]	@ movhi
 	add	r7, r7, r3
 	strh	r7, [r4, #14]	@ movhi
-.L1920:
+.L1941:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -13569,19 +13699,19 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1932
-	ldr	r3, [r3, #3692]
-.L1931:
+	ldr	r3, .L1953
+	ldr	r3, [r3, #3696]
+.L1952:
 	ldr	r0, [fp, #-44]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L1913:
+.L1934:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1919:
+.L1940:
 	ldrh	r10, [r6, #20]
 	add	r0, r3, r8
 	ldrh	r2, [r6, #16]
@@ -13600,8 +13730,8 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	ip, [fp, #-64]
 	ldr	r3, [fp, #-60]
-	b	.L1918
-.L1917:
+	b	.L1939
+.L1938:
 	add	r5, r4, r5, lsl #3
 	mov	r2, r9
 	mov	r1, ip
@@ -13609,16 +13739,16 @@ rk_sftl_vendor_write:
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r9, [r6, #20]	@ movhi
-	b	.L1920
-.L1916:
+	b	.L1941
+.L1937:
 	add	r5, r5, #1
-	b	.L1915
-.L1928:
+	b	.L1936
+.L1949:
 	mvn	r0, #0
-	b	.L1913
-.L1933:
+	b	.L1934
+.L1954:
 	.align	2
-.L1932:
+.L1953:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
@@ -13639,53 +13769,53 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L1934
-	ldr	r3, .L1959
+	beq	.L1955
+	ldr	r3, .L1980
 	cmp	r6, r3
-	beq	.L1937
+	beq	.L1958
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1938
-.L1954:
+	beq	.L1959
+.L1975:
 	mvn	r5, #13
-	b	.L1936
-.L1937:
-	ldr	r6, .L1959+4
+	b	.L1957
+.L1958:
+	ldr	r6, .L1980+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
 	.syntax divided
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1944
+	bne	.L1965
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1954
+	bne	.L1975
 	ldr	r2, [r4]
-	ldr	r3, .L1959+8
+	ldr	r3, .L1980+8
 	cmp	r2, r3
-	beq	.L1942
-.L1943:
+	beq	.L1963
+.L1964:
 	mvn	r5, #0
-.L1936:
+.L1957:
 	mov	r0, r4
 	bl	kfree
-.L1934:
+.L1955:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1942:
+.L1963:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	beq	.L1943
+	beq	.L1964
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
@@ -13693,51 +13823,51 @@ rk_sftl_vendor_storage_ioctl:
 	add	r2, r2, #8
 	ldr	r3, [r6, #72]
 	.syntax divided
-@ 561 "./arch/arm/include/asm/uaccess.h" 1
+@ 573 "./arch/arm/include/asm/uaccess.h" 1
 	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1954
+	bne	.L1975
 	mov	r0, r5
 	mov	r1, r4
 	bl	arm_copy_to_user
 	subs	r5, r0, #0
-	beq	.L1936
-	b	.L1954
-.L1938:
-	ldr	r6, .L1959+4
+	beq	.L1957
+	b	.L1975
+.L1959:
+	ldr	r6, .L1980+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
 	.syntax divided
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1944
+	bne	.L1965
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1954
+	bne	.L1975
 	ldr	r2, [r4]
-	ldr	r3, .L1959+8
+	ldr	r3, .L1980+8
 	cmp	r2, r3
-	bne	.L1943
+	bne	.L1964
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1943
+	bhi	.L1964
 	mov	r3, sp
 	add	r2, r2, #8
 	and	r6, r6, r3
 	ldr	r3, [r6, #72]
 	.syntax divided
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
@@ -13745,26 +13875,26 @@ rk_sftl_vendor_storage_ioctl:
 	cmp	r3, #0
 	movne	r1, r2
 	movne	r0, r4
-	bne	.L1958
+	bne	.L1979
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1954
+	bne	.L1975
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
 	mov	r5, r0
-	b	.L1936
-.L1944:
+	b	.L1957
+.L1965:
 	mov	r1, #8
-.L1958:
+.L1979:
 	bl	__memzero
-	b	.L1954
-.L1960:
+	b	.L1975
+.L1981:
 	.align	2
-.L1959:
+.L1980:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13781,12 +13911,12 @@ rk_sftl_vendor_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L1962
+	ldr	r0, .L1983
 	bl	misc_register
 	ldmfd	sp, {fp, sp, pc}
-.L1963:
+.L1984:
 	.align	2
-.L1962:
+.L1983:
 	.word	.LANCHOR2+12
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
 	.global	g_nand_ops
@@ -13941,151 +14071,155 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3954, %object
-	.size	__func__.3954, 17
-__func__.3954:
+	.type	__func__.3964, %object
+	.size	__func__.3964, 17
+__func__.3964:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.3949, %object
-	.size	__func__.3949, 17
-__func__.3949:
+	.type	__func__.3959, %object
+	.size	__func__.3959, 17
+__func__.3959:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.3985, %object
-	.size	__func__.3985, 17
-__func__.3985:
+	.type	__func__.3995, %object
+	.size	__func__.3995, 17
+__func__.3995:
 	.ascii	"List_remove_node\000"
-	.type	__func__.4017, %object
-	.size	__func__.4017, 22
-__func__.4017:
+	.type	__func__.4027, %object
+	.size	__func__.4027, 22
+__func__.4027:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.4124, %object
-	.size	__func__.4124, 22
-__func__.4124:
+	.type	__func__.4134, %object
+	.size	__func__.4134, 22
+__func__.4134:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.4447, %object
-	.size	__func__.4447, 16
-__func__.4447:
+	.type	__func__.4461, %object
+	.size	__func__.4461, 16
+__func__.4461:
 	.ascii	"make_superblock\000"
-	.type	__func__.4622, %object
-	.size	__func__.4622, 19
-__func__.4622:
+	.type	__func__.4636, %object
+	.size	__func__.4636, 19
+__func__.4636:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.15029, %object
-	.size	__func__.15029, 17
-__func__.15029:
+	.type	__func__.15051, %object
+	.size	__func__.15051, 17
+__func__.15051:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.4059, %object
-	.size	__func__.4059, 26
-__func__.4059:
+	.type	__func__.4069, %object
+	.size	__func__.4069, 26
+__func__.4069:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.3564, %object
-	.size	__func__.3564, 11
-__func__.3564:
+	.type	__func__.3574, %object
+	.size	__func__.3574, 11
+__func__.3574:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.3791, %object
-	.size	__func__.3791, 14
-__func__.3791:
+	.type	__func__.3801, %object
+	.size	__func__.3801, 14
+__func__.3801:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.4468, %object
-	.size	__func__.4468, 18
-__func__.4468:
+	.type	__func__.4482, %object
+	.size	__func__.4482, 18
+__func__.4482:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.14986, %object
-	.size	__func__.14986, 15
-__func__.14986:
+	.type	__func__.15008, %object
+	.size	__func__.15008, 15
+__func__.15008:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.4236, %object
-	.size	__func__.4236, 14
-__func__.4236:
+	.type	__func__.4246, %object
+	.size	__func__.4246, 14
+__func__.4246:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.3834, %object
-	.size	__func__.3834, 11
-__func__.3834:
+	.type	__func__.3844, %object
+	.size	__func__.3844, 11
+__func__.3844:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.4293, %object
-	.size	__func__.4293, 15
-__func__.4293:
-	.ascii	"FtlLoadSysInfo\000"
-	.type	__func__.15005, %object
-	.size	__func__.15005, 15
-__func__.15005:
+	.type	__func__.15027, %object
+	.size	__func__.15027, 15
+__func__.15027:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.4085, %object
-	.size	__func__.4085, 31
-__func__.4085:
+	.type	__func__.4608, %object
+	.size	__func__.4608, 25
+__func__.4608:
+	.ascii	"allocate_data_superblock\000"
+	.type	__func__.4649, %object
+	.size	__func__.4649, 16
+__func__.4649:
+	.ascii	"update_vpc_list\000"
+	.type	__func__.4656, %object
+	.size	__func__.4656, 20
+__func__.4656:
+	.ascii	"decrement_vpc_count\000"
+	.type	__func__.4095, %object
+	.size	__func__.4095, 31
+__func__.4095:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.4099, %object
-	.size	__func__.4099, 16
-__func__.4099:
+	.type	__func__.4109, %object
+	.size	__func__.4109, 16
+__func__.4109:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.4026, %object
-	.size	__func__.4026, 16
-__func__.4026:
+	.type	__func__.4036, %object
+	.size	__func__.4036, 16
+__func__.4036:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.4070, %object
-	.size	__func__.4070, 15
-__func__.4070:
+	.type	__func__.4080, %object
+	.size	__func__.4080, 15
+__func__.4080:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.4141, %object
-	.size	__func__.4141, 9
-__func__.4141:
+	.type	__func__.4151, %object
+	.size	__func__.4151, 9
+__func__.4151:
 	.ascii	"log2phys\000"
-	.type	__func__.4356, %object
-	.size	__func__.4356, 16
-__func__.4356:
+	.type	__func__.4370, %object
+	.size	__func__.4370, 16
+__func__.4370:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.4509, %object
-	.size	__func__.4509, 14
-__func__.4509:
-	.ascii	"ftl_check_vpc\000"
-	.type	__func__.4594, %object
-	.size	__func__.4594, 25
-__func__.4594:
-	.ascii	"allocate_data_superblock\000"
-	.type	__func__.4635, %object
-	.size	__func__.4635, 16
-__func__.4635:
-	.ascii	"update_vpc_list\000"
-	.type	__func__.4642, %object
-	.size	__func__.4642, 20
-__func__.4642:
-	.ascii	"decrement_vpc_count\000"
-	.type	__func__.4390, %object
-	.size	__func__.4390, 22
-__func__.4390:
+	.type	__func__.4404, %object
+	.size	__func__.4404, 22
+__func__.4404:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.4214, %object
-	.size	__func__.4214, 15
-__func__.4214:
+	.type	__func__.4523, %object
+	.size	__func__.4523, 14
+__func__.4523:
+	.ascii	"ftl_check_vpc\000"
+	.type	__func__.4224, %object
+	.size	__func__.4224, 15
+__func__.4224:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.4493, %object
-	.size	__func__.4493, 21
-__func__.4493:
+	.type	__func__.4507, %object
+	.size	__func__.4507, 21
+__func__.4507:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.4615, %object
-	.size	__func__.4615, 29
-__func__.4615:
+	.type	__func__.4629, %object
+	.size	__func__.4629, 29
+__func__.4629:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.3688, %object
-	.size	__func__.3688, 13
-__func__.3688:
+	.type	__func__.3698, %object
+	.size	__func__.3698, 13
+__func__.3698:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.4712, %object
-	.size	__func__.4712, 19
-__func__.4712:
+	.type	__func__.4726, %object
+	.size	__func__.4726, 19
+__func__.4726:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.4823, %object
-	.size	__func__.4823, 23
-__func__.4823:
+	.type	__func__.4837, %object
+	.size	__func__.4837, 23
+__func__.4837:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.3716, %object
-	.size	__func__.3716, 9
-__func__.3716:
+	.type	__func__.3726, %object
+	.size	__func__.3726, 9
+__func__.3726:
 	.ascii	"FtlWrite\000"
-	.type	__func__.15153, %object
-	.size	__func__.15153, 14
-__func__.15153:
+	.type	__func__.4302, %object
+	.size	__func__.4302, 15
+__func__.4302:
+	.ascii	"FtlLoadSysInfo\000"
+	.type	__func__.4324, %object
+	.size	__func__.4324, 18
+__func__.4324:
+	.ascii	"FtlMapTblRecovery\000"
+	.type	__func__.15175, %object
+	.size	__func__.15175, 14
+__func__.15175:
 	.ascii	"FtlWriteToIDB\000"
-	.space	3
+	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
@@ -14113,7 +14247,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC118
+	.word	.LC121
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14418,9 +14552,9 @@ c_ftl_nand_data_op_blks_per_plane:
 	.space	2
 	.space	2
 	.type	gSysInfo, %object
-	.size	gSysInfo, 12
+	.size	gSysInfo, 16
 gSysInfo:
-	.space	12
+	.space	16
 	.type	g_gc_superblock, %object
 	.size	g_gc_superblock, 48
 g_gc_superblock:
@@ -14669,14 +14803,6 @@ g_recovery_page_min_ver:
 	.size	req_sys, 20
 req_sys:
 	.space	20
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
-	.space	4
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 44
-gVendorBlkInfo:
-	.space	44
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -14690,6 +14816,10 @@ g_recovery_page_num:
 	.size	g_recovery_ppa_tbl, 128
 g_recovery_ppa_tbl:
 	.space	128
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
 	.type	g_ect_tbl_power_up_flush, %object
 	.size	g_ect_tbl_power_up_flush, 2
 g_ect_tbl_power_up_flush:
@@ -14715,6 +14845,10 @@ g_gc_cur_blk_max_valid_pages:
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
+	.space	4
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
 	.space	4
 	.type	idb_need_write_back, %object
 	.size	idb_need_write_back, 4
@@ -14891,7 +15025,7 @@ gp_last_act_superblock:
 .LC69:
 	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
 .LC70:
-	.ascii	"SFTL version: 5.0.49 20181030\000"
+	.ascii	"SFTL version: 5.0.50 20181227\000"
 .LC71:
 	.ascii	"%s\012\000"
 .LC72:
@@ -14931,44 +15065,44 @@ gp_last_act_superblock:
 .LC88:
 	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC89:
-	.ascii	"FtlMapWritePage error = %x \012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC90:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC91:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC92:
-	.ascii	"spare:\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC93:
-	.ascii	"map_ppn:\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC94:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC95:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC96:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC97:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"spare:\000"
 .LC98:
-	.ascii	"ftl_scan_all_data = %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC99:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC100:
-	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
-	.ascii	"\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC101:
-	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
+	.ascii	"...%s enter...\012\000"
 .LC102:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC103:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC104:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"ftl_scan_all_data = %x\012\000"
 .LC105:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC106:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC107:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC108:
 	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC109:
@@ -14984,10 +15118,19 @@ gp_last_act_superblock:
 .LC114:
 	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC115:
-	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+	.ascii	"%s hash error this.id =%x page =%x pre_id =%x hash "
+	.ascii	"=%x hash_r =%x\012\000"
 .LC116:
-	.ascii	"%s idb buffer alloc fail\012\000"
+	.ascii	"%s last blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC117:
-	.ascii	"%p %x %p %x\012\000"
+	.ascii	"%s scan blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC118:
+	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+.LC119:
+	.ascii	"%s idb buffer alloc fail\012\000"
+.LC120:
+	.ascii	"%p %x %p %x\012\000"
+.LC121:
 	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index c8341eccf2bf..13ebc06d213b 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-11-29
+ * date: 2018-12-27
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -1457,7 +1457,7 @@ select_l2p_ram_region:
 	bcc	.L181
 	cmp	r4, r2
 	bcc	.L174
-	movw	r2, #787
+	movw	r2, #789
 	ldr	r1, .L182+4
 	ldr	r0, .L182+8
 	bl	sftl_printk
@@ -1741,7 +1741,7 @@ make_superblock:
 	ldrh	r3, [r6, #40]
 	cmp	r2, r3
 	bcc	.L217
-	movw	r2, #2110
+	movw	r2, #2156
 	ldr	r1, .L221+4
 	ldr	r0, .L221+8
 	bl	sftl_printk
@@ -2257,31 +2257,31 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #2590]
+	ldrh	r3, [r5, #2594]
 	ldr	r2, .L258+208
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #2594]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2598]	@ zero_extendqisi2
 	ldr	r2, .L258+212
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #2588]
+	ldrh	r3, [r5, #2592]
 	ldr	r2, .L258+216
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrb	r3, [r5, #2596]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2600]	@ zero_extendqisi2
 	ldr	r2, .L258+220
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #2592]
+	ldrh	r3, [r5, #2596]
 	b	.L259
 .L260:
 	.align	2
@@ -2347,48 +2347,48 @@ FtlPrintInfo2buf:
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, [r5, #2712]
+	ldr	r3, [r5, #2716]
 	add	r4, r4, r0
 	ldr	r2, .L261+4
 	movs	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
-	ldr	r3, [r5, #2720]
+	ldr	r3, [r5, #2724]
 	str	r3, [sp]
-	ldr	r3, [r5, #2716]
+	ldr	r3, [r5, #2720]
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2708]
+	ldr	r3, [r5, #2712]
 	ldr	r2, .L261+8
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #2732]
+	ldr	r3, [r5, #2736]
 	ldr	r2, .L261+12
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #3148]
+	ldrh	r3, [r5, #3152]
 	ldr	r2, .L261+16
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #3150]
+	ldrh	r3, [r5, #3154]
 	ldr	r2, .L261+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r3, [r5, #3152]
+	ldr	r3, [r5, #3156]
 	ldr	r2, .L261+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r3, [r5, #3156]
+	ldrh	r3, [r5, #3160]
 	ldr	r2, .L261+28
 	movs	r1, #64
 	mov	r0, r4
@@ -2419,7 +2419,7 @@ FtlPrintInfo2buf:
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 .L247:
-	ldrh	r3, [r5, #2588]
+	ldrh	r3, [r5, #2592]
 	movw	r2, #65535
 	cmp	r3, r2
 	beq	.L249
@@ -2697,7 +2697,7 @@ GetSwlReplaceBlock:
 	ldr	r3, [r4, #2564]
 	bl	sftl_printk
 	movs	r3, #1
-	str	r3, [r4, #3160]
+	str	r3, [r4, #3164]
 	b	.L278
 .L283:
 	adds	r0, r0, #1
@@ -2778,7 +2778,7 @@ get_new_active_ppa:
 	mov	r4, r0
 	cmp	r2, r3
 	bne	.L299
-	movw	r2, #2740
+	movw	r2, #2786
 	ldr	r1, .L312
 	ldr	r0, .L312+4
 	bl	sftl_printk
@@ -2788,14 +2788,14 @@ get_new_active_ppa:
 	ldrh	r3, [r5, #102]
 	cmp	r2, r3
 	bne	.L300
-	movw	r2, #2741
+	movw	r2, #2787
 	ldr	r1, .L312
 	ldr	r0, .L312+4
 	bl	sftl_printk
 .L300:
 	ldrh	r3, [r4, #4]
 	cbnz	r3, .L301
-	movw	r2, #2742
+	movw	r2, #2788
 	ldr	r1, .L312
 	ldr	r0, .L312+4
 	bl	sftl_printk
@@ -2838,7 +2838,7 @@ get_new_active_ppa:
 	cmp	r1, r3
 	bne	.L298
 	cbz	r2, .L298
-	movw	r2, #2763
+	movw	r2, #2809
 	ldr	r1, .L312
 	ldr	r0, .L312+4
 	bl	sftl_printk
@@ -2886,7 +2886,7 @@ FtlGcBufInit:
 	movs	r6, #1
 	movs	r2, #0
 	mov	r7, r3
-	str	r2, [r3, #3164]
+	str	r2, [r3, #3168]
 .L315:
 	ldrh	r1, [r3, #32]
 	uxth	r0, r2
@@ -2897,13 +2897,13 @@ FtlGcBufInit:
 	mov	ip, #12
 	movs	r6, #0
 .L319:
-	ldr	r2, [r3, #3184]
+	ldr	r2, [r3, #3188]
 	cmp	r1, r2
 	bcc	.L322
 	pop	{r4, r5, r6, r7, r8, r9, pc}
 .L318:
 	uxth	r2, r2
-	ldr	r8, [r3, #3168]
+	ldr	r8, [r3, #3172]
 	mul	lr, r9, r2
 	add	r1, r8, lr
 	str	r6, [r1, #8]
@@ -2912,11 +2912,11 @@ FtlGcBufInit:
 	it	mi
 	addmi	r1, r1, #3
 	bic	r0, r1, #3
-	ldr	r1, [r3, #3172]
+	ldr	r1, [r3, #3176]
 	add	r1, r1, r0
 	str	r1, [r8, lr]
-	ldr	r5, [r7, #3176]
-	ldr	r0, [r3, #3168]
+	ldr	r5, [r7, #3180]
+	ldr	r0, [r3, #3172]
 	ldrh	r1, [r3, #112]
 	muls	r1, r2, r1
 	it	mi
@@ -2925,7 +2925,7 @@ FtlGcBufInit:
 	add	r8, r0, lr
 	add	r1, r1, r5
 	str	r1, [r8, #4]
-	ldr	r1, [r3, #3180]
+	ldr	r1, [r3, #3184]
 	mla	r2, ip, r2, r1
 	ldr	r1, [r0, lr]
 	str	r1, [r2, #8]
@@ -2935,8 +2935,8 @@ FtlGcBufInit:
 	b	.L315
 .L322:
 	mul	r0, ip, r1
-	ldr	r4, [r3, #3168]
-	ldr	r5, [r3, #3172]
+	ldr	r4, [r3, #3172]
+	ldr	r5, [r3, #3176]
 	adds	r2, r4, r0
 	str	r6, [r2, #8]
 	ldrh	r2, [r3, #110]
@@ -2946,8 +2946,8 @@ FtlGcBufInit:
 	bic	r2, r2, #3
 	add	r2, r2, r5
 	str	r2, [r4, r0]
-	ldr	r2, [r3, #3168]
-	ldr	r4, [r7, #3176]
+	ldr	r2, [r3, #3172]
+	ldr	r4, [r7, #3180]
 	add	r0, r0, r2
 	ldrh	r2, [r3, #112]
 	muls	r2, r1, r2
@@ -2983,8 +2983,8 @@ FtlGcBufFree:
 	mov	r10, #20
 	mov	lr, #12
 	mov	r8, r5
-	ldr	ip, [r3, #3184]
-	ldr	r6, [r3, #3168]
+	ldr	ip, [r3, #3188]
+	ldr	r6, [r3, #3172]
 .L326:
 	uxth	r3, r5
 	cmp	r1, r3
@@ -3032,8 +3032,8 @@ FtlGcBufAlloc:
 	movs	r4, #0
 	mov	lr, #1
 	mov	r8, #20
-	ldr	r5, [r3, #3184]
-	ldr	r6, [r3, #3168]
+	ldr	r5, [r3, #3188]
+	ldr	r6, [r3, #3172]
 .L335:
 	uxth	r2, r4
 	cmp	r1, r2
@@ -3078,8 +3078,8 @@ IsBlkInGcList:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	ldr	r2, .L348
-	ldr	r3, [r2, #3188]
-	ldrh	r2, [r2, #3192]
+	ldr	r3, [r2, #3192]
+	ldrh	r2, [r2, #3196]
 	add	r2, r3, r2, lsl #1
 .L344:
 	cmp	r3, r2
@@ -3118,17 +3118,17 @@ FtlGcUpdatePage:
 	movs	r4, #0
 	bl	P2V_block_in_plane
 	ldr	r3, .L354
-	ldrh	r1, [r3, #3192]
-	ldr	r2, [r3, #3188]
+	ldrh	r1, [r3, #3196]
+	ldr	r2, [r3, #3192]
 .L351:
 	uxth	ip, r4
 	cmp	ip, r1
 	bcc	.L353
 	bne	.L352
 	strh	r0, [r2, ip, lsl #1]	@ movhi
-	ldrh	r0, [r3, #3192]
+	ldrh	r0, [r3, #3196]
 	adds	r0, r0, #1
-	strh	r0, [r3, #3192]	@ movhi
+	strh	r0, [r3, #3196]	@ movhi
 	b	.L352
 .L353:
 	adds	r4, r4, #1
@@ -3137,17 +3137,17 @@ FtlGcUpdatePage:
 	cmp	ip, r0
 	bne	.L351
 .L352:
-	ldrh	r2, [r3, #3200]
+	ldrh	r2, [r3, #3204]
 	movs	r0, #12
 	muls	r0, r2, r0
-	ldr	r2, [r3, #3196]
+	ldr	r2, [r3, #3200]
 	adds	r1, r2, r0
 	str	r6, [r1, #4]
 	str	r7, [r1, #8]
 	str	r5, [r2, r0]
-	ldrh	r2, [r3, #3200]
+	ldrh	r2, [r3, #3204]
 	adds	r2, r2, #1
-	strh	r2, [r3, #3200]	@ movhi
+	strh	r2, [r3, #3204]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
 .L355:
 	.align	2
@@ -3173,23 +3173,23 @@ FtlGcRefreshBlock:
 	ldr	r0, .L359
 	bl	sftl_printk
 	ldr	r3, .L359+4
-	ldrh	r0, [r3, #3202]
+	ldrh	r0, [r3, #3206]
 	cmp	r4, r0
 	beq	.L357
-	ldrh	r1, [r3, #3204]
+	ldrh	r1, [r3, #3208]
 	cmp	r4, r1
 	beq	.L357
 	movw	r2, #65535
 	cmp	r0, r2
 	bne	.L358
-	strh	r4, [r3, #3202]	@ movhi
+	strh	r4, [r3, #3206]	@ movhi
 .L357:
 	movs	r0, #0
 	pop	{r4, pc}
 .L358:
 	cmp	r1, r2
 	it	eq
-	strheq	r4, [r3, #3204]	@ movhi
+	strheq	r4, [r3, #3208]	@ movhi
 	b	.L357
 .L360:
 	.align	2
@@ -3216,14 +3216,14 @@ FtlGcMarkBadPhyBlk:
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r6, r0
-	ldrh	r1, [r4, #3206]
+	ldrh	r1, [r4, #3210]
 	ldr	r0, .L365+4
 	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
-	ldrh	r3, [r4, #3206]
+	ldrh	r3, [r4, #3210]
 	movs	r2, #0
-	addw	r0, r4, #3208
+	addw	r0, r4, #3212
 .L362:
 	uxth	r1, r2
 	cmp	r3, r1
@@ -3231,9 +3231,9 @@ FtlGcMarkBadPhyBlk:
 	cmp	r3, #15
 	itttt	ls
 	addls	r2, r3, #1
-	strhls	r2, [r4, #3206]	@ movhi
+	strhls	r2, [r4, #3210]	@ movhi
 	addls	r4, r4, r3, lsl #1
-	strhls	r5, [r4, #3208]	@ movhi
+	strhls	r5, [r4, #3212]	@ movhi
 	b	.L363
 .L364:
 	adds	r2, r2, #1
@@ -3265,25 +3265,25 @@ FtlGcReFreshBadBlk:
 	push	{r4, lr}
 	.save {r4, lr}
 	ldr	r4, .L373
-	ldrh	r3, [r4, #3206]
+	ldrh	r3, [r4, #3210]
 	cbz	r3, .L368
-	ldrh	r1, [r4, #3202]
+	ldrh	r1, [r4, #3206]
 	movw	r2, #65535
 	cmp	r1, r2
 	bne	.L368
-	ldrh	r2, [r4, #3242]
+	ldrh	r2, [r4, #3246]
 	cmp	r2, r3
 	itt	cs
 	movcs	r3, #0
-	strhcs	r3, [r4, #3242]	@ movhi
-	ldrh	r3, [r4, #3242]
+	strhcs	r3, [r4, #3246]	@ movhi
+	ldrh	r3, [r4, #3246]
 	add	r3, r4, r3, lsl #1
-	ldrh	r0, [r3, #3208]
+	ldrh	r0, [r3, #3212]
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	ldrh	r3, [r4, #3242]
+	ldrh	r3, [r4, #3246]
 	adds	r3, r3, #1
-	strh	r3, [r4, #3242]	@ movhi
+	strh	r3, [r4, #3246]	@ movhi
 .L368:
 	movs	r0, #0
 	pop	{r4, pc}
@@ -3467,7 +3467,7 @@ FlashEraseBlocks:
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 .L392:
-	ldr	r2, [r5, #3248]
+	ldr	r2, [r5, #3252]
 	uxtb	r0, r6
 	ldr	r1, [sp, #12]
 	blx	r2
@@ -3480,7 +3480,7 @@ FlashEraseBlocks:
 	cmp	r2, #4
 	bne	.L399
 	ldr	r1, [sp, #12]
-	ldr	r2, [r5, #3248]
+	ldr	r2, [r5, #3252]
 	ldrb	r0, [sp, #8]	@ zero_extendqisi2
 	add	r1, r1, r9
 	blx	r2
@@ -3526,7 +3526,7 @@ FtlFreeSysBlkQueueIn:
 	cbz	r1, .L410
 	bl	P2V_block_in_plane
 	mov	r6, r0
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -3575,7 +3575,7 @@ FtlFreeSysBlkQueueOut:
 	cbz	r2, .L423
 	ldrh	r3, [r4, #214]
 	subs	r2, r2, #1
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	strh	r2, [r4, #218]	@ movhi
 	movs	r2, #1
 	add	r1, r4, r3, lsl #1
@@ -3704,7 +3704,7 @@ FlashGetBadBlockList:
 	mov	r6, r1
 	movs	r1, #255
 	bl	memset
-	ldr	r3, [r5, #3244]
+	ldr	r3, [r5, #3248]
 	mov	r1, r6
 	mov	r0, r4
 	blx	r3
@@ -3778,15 +3778,15 @@ FtlMemInit:
 	movs	r7, #12
 	movs	r6, #20
 	ldrh	r0, [r4, #106]
-	str	r3, [r4, #3276]
-	strh	r3, [r4, #3202]	@ movhi
-	strh	r3, [r4, #3204]	@ movhi
+	str	r3, [r4, #3280]
+	strh	r3, [r4, #3206]	@ movhi
+	strh	r3, [r4, #3208]	@ movhi
 	movs	r3, #32
-	strh	r3, [r4, #3148]	@ movhi
+	strh	r3, [r4, #3152]	@ movhi
 	lsls	r0, r0, #1
 	movs	r3, #128
 	str	r5, [r4, #2540]
-	strh	r3, [r4, #3150]	@ movhi
+	strh	r3, [r4, #3154]	@ movhi
 	str	r5, [r4, #2544]
 	str	r5, [r4, #2528]
 	str	r5, [r4, #2516]
@@ -3799,111 +3799,111 @@ FtlMemInit:
 	str	r5, [r4, #2560]
 	str	r5, [r4, #2564]
 	str	r5, [r4, #2568]
-	str	r5, [r4, #3272]
-	str	r5, [r4, #3160]
-	str	r5, [r4, #3280]
-	str	r5, [r4, #3152]
+	str	r5, [r4, #3276]
+	str	r5, [r4, #3164]
 	str	r5, [r4, #3284]
-	strh	r5, [r4, #3156]	@ movhi
-	strh	r5, [r4, #3206]	@ movhi
-	strh	r5, [r4, #3242]	@ movhi
+	str	r5, [r4, #3156]
+	str	r5, [r4, #3288]
+	strh	r5, [r4, #3160]	@ movhi
+	strh	r5, [r4, #3210]	@ movhi
+	strh	r5, [r4, #3246]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #3188]
+	str	r0, [r4, #3192]
 	ldrh	r0, [r4, #106]
 	muls	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
-	str	r0, [r4, #3196]
+	str	r0, [r4, #3200]
 	muls	r6, r3, r6
 	lsl	r8, r6, #2
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3288]
+	str	r0, [r4, #3292]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3292]
+	str	r0, [r4, #3296]
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3296]
+	str	r0, [r4, #3300]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3268]
+	str	r0, [r4, #3272]
 	mov	r0, r6
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
 	ldrh	r6, [r4, #110]
-	str	r0, [r4, #3180]
+	str	r0, [r4, #3184]
 	lsls	r3, r3, #1
 	mov	r0, r6
 	adds	r3, r3, #1
-	str	r3, [r4, #3184]
-	bl	ftl_malloc
-	str	r0, [r4, #3300]
-	mov	r0, r6
+	str	r3, [r4, #3188]
 	bl	ftl_malloc
 	str	r0, [r4, #3304]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3308]
-	ldr	r0, [r4, #3184]
-	muls	r0, r6, r0
-	bl	ftl_malloc
-	str	r0, [r4, #3172]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3312]
+	ldr	r0, [r4, #3188]
+	muls	r0, r6, r0
+	bl	ftl_malloc
+	str	r0, [r4, #3176]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3316]
-	ldr	r0, [r4, #3184]
-	muls	r0, r7, r0
-	bl	ftl_malloc
-	str	r0, [r4, #3168]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3320]
+	ldr	r0, [r4, #3188]
+	muls	r0, r7, r0
+	bl	ftl_malloc
+	str	r0, [r4, #3172]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3324]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3328]
 	ldrh	r0, [r4, #58]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
 	ldrh	r6, [r4, #32]
-	str	r0, [r4, #3328]
+	str	r0, [r4, #3332]
 	muls	r6, r3, r6
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3332]
+	str	r0, [r4, #3336]
 	lsls	r0, r6, #2
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
-	str	r0, [r4, #3336]
-	ldr	r0, [r4, #3184]
+	str	r0, [r4, #3340]
+	ldr	r0, [r4, #3188]
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	str	r0, [r4, #3176]
+	str	r0, [r4, #3180]
 	ldrh	r0, [r4, #42]
 	lsls	r0, r0, #1
 	uxth	r0, r0
-	strh	r0, [r4, #3340]	@ movhi
+	strh	r0, [r4, #3344]	@ movhi
 	bl	ftl_malloc
-	ldrh	r3, [r4, #3340]
-	str	r0, [r4, #3344]
+	ldrh	r3, [r4, #3344]
+	str	r0, [r4, #3348]
 	ldr	r0, .L551+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
-	strh	r3, [r4, #3340]	@ movhi
+	strh	r3, [r4, #3344]	@ movhi
 	bl	ftl_malloc
 	ldrh	r6, [r4, #42]
-	str	r0, [r4, #3348]
+	str	r0, [r4, #3352]
 	adds	r0, r0, #32
 	str	r0, [r4, #2328]
 	lsls	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3352]
+	str	r0, [r4, #3356]
 	mov	r0, r6
 	bl	ftl_malloc
 	ldr	r6, [r4, #128]
@@ -3911,10 +3911,10 @@ FtlMemInit:
 	lsls	r6, r6, #1
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3356]
+	str	r0, [r4, #3360]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3360]
+	str	r0, [r4, #3364]
 	ldrh	r0, [r4, #42]
 	lsrs	r0, r0, #3
 	adds	r0, r0, #4
@@ -3927,28 +3927,28 @@ FtlMemInit:
 	ldrh	r0, [r4, #120]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #3364]
+	str	r0, [r4, #3368]
 	ldrh	r0, [r4, #120]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3368]
+	str	r0, [r4, #3372]
 	ldrh	r0, [r4, #122]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r2, [r4, #122]
 	mov	r1, r5
-	str	r0, [r4, #3372]
+	str	r0, [r4, #3376]
 	add	r5, r4, #180
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r0, [r4, #136]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3376]
+	str	r0, [r4, #3380]
 	ldr	r0, [r4, #128]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3380]
+	str	r0, [r4, #3384]
 	ldrh	r0, [r4, #138]
 	muls	r0, r7, r0
 	bl	ftl_malloc
@@ -3958,7 +3958,7 @@ FtlMemInit:
 	muls	r0, r3, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #42]
-	str	r0, [r4, #3384]
+	str	r0, [r4, #3388]
 	movs	r0, #6
 	muls	r0, r3, r0
 	bl	ftl_malloc
@@ -3967,11 +3967,11 @@ FtlMemInit:
 	ldrh	r3, [r4, #54]
 	adds	r0, r0, #31
 	asrs	r0, r0, #5
-	strh	r0, [r4, #3388]	@ movhi
+	strh	r0, [r4, #3392]	@ movhi
 	muls	r0, r3, r0
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r4, #3388]
+	ldrh	r2, [r4, #3392]
 	movs	r3, #1
 	ldrh	r6, [r4, #54]
 	str	r0, [r4, #180]
@@ -3988,7 +3988,7 @@ FtlMemInit:
 .L453:
 	cmp	r2, r3
 	bne	.L454
-	ldr	r3, [r4, #3356]
+	ldr	r3, [r4, #3360]
 	cbnz	r3, .L455
 .L457:
 	ldr	r1, .L551+12
@@ -4015,19 +4015,19 @@ FtlMemInit:
 	.word	.LANCHOR1+173
 	.word	.LC85
 .L455:
-	ldr	r3, [r4, #3360]
+	ldr	r3, [r4, #3364]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3376]
+	ldr	r3, [r4, #3380]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3380]
+	ldr	r3, [r4, #3384]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3384]
+	ldr	r3, [r4, #3388]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #2316]
@@ -4039,28 +4039,25 @@ FtlMemInit:
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3188]
+	ldr	r3, [r4, #3192]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3196]
+	ldr	r3, [r4, #3200]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3288]
-	cmp	r3, #0
-	beq	.L457
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3292]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3268]
+	ldr	r3, [r4, #3300]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3180]
+	ldr	r3, [r4, #3272]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3292]
+	ldr	r3, [r4, #3184]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3300]
+	ldr	r3, [r4, #3296]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #3304]
@@ -4069,44 +4066,47 @@ FtlMemInit:
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3172]
+	ldr	r3, [r4, #3312]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3312]
+	ldr	r3, [r4, #3176]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3168]
+	ldr	r3, [r4, #3320]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3332]
+	ldr	r3, [r4, #3172]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3176]
+	ldr	r3, [r4, #3340]
+	cmp	r3, #0
+	beq	.L457
+	ldr	r3, [r4, #3180]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
 	beq	.L457
-	ldr	r3, [r4, #3344]
+	ldr	r3, [r4, #3348]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
 	beq	.L457
 	ldr	r3, .L553
-	ldr	r2, [r3, #3364]
+	ldr	r2, [r3, #3368]
 	cmp	r2, #0
 	beq	.L457
-	ldr	r2, [r3, #3368]
+	ldr	r2, [r3, #3372]
 	cmp	r2, #0
 	beq	.L457
-	ldr	r3, [r3, #3372]
+	ldr	r3, [r3, #3376]
 	cmp	r3, #0
 	beq	.L457
 	movs	r0, #0
@@ -4137,7 +4137,7 @@ FtlBbt2Bitmap:
 	movw	r8, #65535
 	ldr	r9, .L561+4
 	addw	r5, r5, #1022
-	ldrh	r2, [r6, #3388]
+	ldrh	r2, [r6, #3392]
 	movs	r1, #0
 	ldr	r10, .L561+8
 	mov	r0, r7
@@ -4298,13 +4298,13 @@ FtlL2PDataInit:
 	ldr	r4, .L588
 	movs	r6, #12
 	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3360]
+	ldr	r0, [r4, #3364]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r3, [r4, #110]
 	movs	r1, #255
 	ldrh	r2, [r4, #138]
-	ldr	r0, [r4, #3384]
+	ldr	r0, [r4, #3388]
 	muls	r2, r3, r2
 	bl	ftl_memset
 	movs	r2, #0
@@ -4318,23 +4318,23 @@ FtlL2PDataInit:
 	cmp	r4, r0
 	bhi	.L587
 	ldr	r2, [r3, #128]
-	strh	r1, [r3, #3394]	@ movhi
-	strh	r1, [r3, #3392]	@ movhi
-	strh	r2, [r3, #3402]	@ movhi
+	strh	r1, [r3, #3398]	@ movhi
+	strh	r1, [r3, #3396]	@ movhi
+	strh	r2, [r3, #3406]	@ movhi
 	movw	r2, #61634
-	strh	r2, [r3, #3396]	@ movhi
-	ldrh	r2, [r3, #3436]
 	strh	r2, [r3, #3400]	@ movhi
+	ldrh	r2, [r3, #3440]
+	strh	r2, [r3, #3404]	@ movhi
 	ldrh	r2, [r3, #136]
-	strh	r2, [r3, #3398]	@ movhi
-	ldr	r2, [r3, #3356]
-	str	r2, [r3, #3404]
-	ldr	r2, [r3, #3380]
-	str	r2, [r3, #3408]
+	strh	r2, [r3, #3402]	@ movhi
 	ldr	r2, [r3, #3360]
+	str	r2, [r3, #3408]
+	ldr	r2, [r3, #3384]
 	str	r2, [r3, #3412]
-	ldr	r2, [r3, #3376]
+	ldr	r2, [r3, #3364]
 	str	r2, [r3, #3416]
+	ldr	r2, [r3, #3380]
+	str	r2, [r3, #3420]
 	pop	{r3, r4, r5, r6, r7, pc}
 .L587:
 	uxth	r2, r2
@@ -4347,7 +4347,7 @@ FtlL2PDataInit:
 	add	r0, r0, r4
 	ldrh	r4, [r3, #110]
 	muls	r2, r4, r2
-	ldr	r4, [r3, #3384]
+	ldr	r4, [r3, #3388]
 	bic	r2, r2, #3
 	add	r2, r2, r4
 	str	r2, [r0, #8]
@@ -4377,13 +4377,13 @@ FtlVariablesInit:
 	movw	r3, #65535
 	mov	r1, r5
 	ldrh	r2, [r4, #120]
-	strh	r3, [r4, #3438]	@ movhi
+	strh	r3, [r4, #3442]	@ movhi
 	mov	r3, #-1
 	ldr	r0, [r4, #148]
-	str	r3, [r4, #3448]
+	str	r3, [r4, #3452]
 	lsls	r2, r2, #1
-	str	r5, [r4, #3440]
 	str	r5, [r4, #3444]
+	str	r5, [r4, #3448]
 	strh	r5, [r4, #144]	@ movhi
 	bl	ftl_memset
 	ldrh	r2, [r4, #42]
@@ -4393,13 +4393,13 @@ FtlVariablesInit:
 	bl	ftl_memset
 	ldrh	r2, [r4, #42]
 	mov	r1, r5
-	ldr	r0, [r4, #3344]
+	ldr	r0, [r4, #3348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	addw	r0, r4, #2268
 	movs	r1, #48
 	bl	__memzero
-	addw	r0, r4, #2636
+	add	r0, r4, #2640
 	mov	r1, #512
 	bl	__memzero
 	bl	FtlGcBufInit
@@ -4522,7 +4522,7 @@ SupperBlkListInit:
 	cmp	r6, r3
 	strh	r9, [r4, #2344]	@ movhi
 	ble	.L603
-	movw	r2, #2170
+	movw	r2, #2216
 	ldr	r1, .L604+4
 	ldr	r0, .L604+8
 	bl	sftl_printk
@@ -4556,14 +4556,14 @@ FtlGcPageVarInit:
 	ldr	r4, .L607
 	movs	r1, #255
 	ldrh	r2, [r4, #106]
-	ldr	r0, [r4, #3188]
-	strh	r3, [r4, #3192]	@ movhi
-	strh	r3, [r4, #3200]	@ movhi
+	ldr	r0, [r4, #3192]
+	strh	r3, [r4, #3196]	@ movhi
+	strh	r3, [r4, #3204]	@ movhi
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r3, [r4, #106]
 	movs	r2, #12
-	ldr	r0, [r4, #3196]
+	ldr	r0, [r4, #3200]
 	movs	r1, #255
 	muls	r2, r3, r2
 	bl	ftl_memset
@@ -4650,9 +4650,9 @@ FlashReadPages:
 	ldr	r3, [r4, #12]
 	ldr	r1, [sp, #12]
 	lsls	r2, r6, #26
-	ldr	r7, [r5, #3256]
+	ldr	r7, [r5, #3260]
 	it	ne
-	ldrne	r6, [r5, #3320]
+	ldrne	r6, [r5, #3324]
 	mov	r2, r6
 	blx	r7
 	str	r0, [r4]
@@ -4663,7 +4663,7 @@ FlashReadPages:
 	add	r2, r6, #2048
 	ldr	r3, [r4, #12]
 	ldr	r1, [sp, #12]
-	ldr	r7, [r5, #3256]
+	ldr	r7, [r5, #3260]
 	adds	r3, r3, #8
 	add	r1, r1, r0
 	ldrb	r0, [sp, #8]	@ zero_extendqisi2
@@ -4691,7 +4691,7 @@ FlashReadPages:
 	it	eq
 	streq	r0, [r4]
 .L618:
-	ldr	r3, [r5, #3320]
+	ldr	r3, [r5, #3324]
 	cmp	r6, r3
 	bne	.L615
 	ldr	r0, [r4, #8]
@@ -4726,12 +4726,12 @@ FtlLoadFactoryBbt:
 	movs	r6, #0
 	ldr	r4, .L650
 	movw	r10, #61664
-	ldr	r3, [r4, #3300]
+	ldr	r3, [r4, #3304]
 	add	r7, r4, #162
-	ldr	r8, [r4, #3332]
-	addw	r9, r4, #3452
-	str	r3, [r4, #3460]
-	str	r8, [r4, #3464]
+	ldr	r8, [r4, #3336]
+	add	r9, r4, #3456
+	str	r3, [r4, #3464]
+	str	r8, [r4, #3468]
 .L641:
 	ldrh	r3, [r4, #54]
 	cmp	r6, r3
@@ -4754,9 +4754,9 @@ FtlLoadFactoryBbt:
 	mov	r1, r2
 	mov	r0, r9
 	lsls	r3, r3, #10
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
 	beq	.L643
 	ldrh	r3, [r8]
@@ -4798,7 +4798,7 @@ FtlGetLastWrittenPage:
 	it	ne
 	ldrhne	r5, [r3, #102]
 	add	r0, sp, #4
-	ldr	r3, [r3, #3324]
+	ldr	r3, [r3, #3328]
 	subs	r5, r5, #1
 	sxth	r5, r5
 	str	r3, [sp, #12]
@@ -4871,19 +4871,19 @@ FtlScanSysBlk:
 	.pad #20
 	sub	sp, sp, #20
 	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3380]
-	strh	r5, [r4, #3436]	@ movhi
+	ldr	r0, [r4, #3384]
+	strh	r5, [r4, #3440]	@ movhi
 	strh	r5, [r4, #144]	@ movhi
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldr	r2, [r4, #128]
 	mov	r1, r5
-	ldr	r0, [r4, #3356]
+	ldr	r0, [r4, #3360]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
 	mov	r1, r5
-	ldr	r0, [r4, #3368]
+	ldr	r0, [r4, #3372]
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
@@ -4891,22 +4891,22 @@ FtlScanSysBlk:
 	ldr	r0, [r4, #148]
 	lsls	r2, r2, #1
 	bl	ftl_memset
+	movs	r2, #16
+	movs	r1, #255
+	add	r0, r4, #2576
+	bl	memset
 	ldrh	r8, [r4, #40]
-	mov	r3, #-1
-	str	r3, [r4, #2576]
-	str	r3, [r4, #2580]
-	str	r3, [r4, #2584]
 .L666:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r8
 	bls	.L708
 	movs	r5, #0
 	ldrh	fp, [r4, #32]
-	ldr	r9, [r4, #3288]
+	ldr	r9, [r4, #3292]
 	mov	r7, r5
-	ldr	r3, [r4, #3172]
+	ldr	r3, [r4, #3176]
 	mov	r10, #20
-	ldr	r2, [r4, #3176]
+	ldr	r2, [r4, #3180]
 	ldrh	r6, [r4, #112]
 	b	.L709
 .L669:
@@ -4958,7 +4958,7 @@ FtlScanSysBlk:
 	bls	.L707
 	movs	r3, #20
 	mul	r10, r3, r9
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	add	r2, r3, r10
 	ldr	r3, [r3, r10]
 	ldr	r5, [r2, #4]
@@ -4969,7 +4969,7 @@ FtlScanSysBlk:
 	mov	fp, #16
 	movw	r3, #65535
 .L676:
-	ldr	r0, [r4, #3288]
+	ldr	r0, [r4, #3292]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
 	ldr	r2, [r0, #4]
@@ -4982,10 +4982,10 @@ FtlScanSysBlk:
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
 	bne	.L673
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	mov	r2, #-1
 	str	r2, [r3, r10]
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
 	bne	.L674
@@ -4993,7 +4993,7 @@ FtlScanSysBlk:
 	movs	r1, #1
 	b	.L746
 .L673:
-	ldr	r2, [r4, #3288]
+	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
 	bne	.L674
@@ -5039,18 +5039,18 @@ FtlScanSysBlk:
 	bl	FtlFreeSysBlkQueueIn
 	b	.L679
 .L683:
-	ldrh	r2, [r4, #3436]
+	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
 	bls	.L685
-	movw	r2, #1222
+	movw	r2, #1225
 	ldr	r1, .L747+8
 	ldr	r0, .L747+12
 	bl	sftl_printk
 .L685:
 	ldr	r1, [r4, #128]
-	ldrh	r0, [r4, #3436]
-	ldr	r10, [r4, #3380]
+	ldrh	r0, [r4, #3440]
+	ldr	r10, [r4, #3384]
 	uxth	ip, r1
 	add	r3, ip, #-1
 	sub	ip, ip, r0
@@ -5075,7 +5075,7 @@ FtlScanSysBlk:
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
-	strhne	r0, [r4, #3436]	@ movhi
+	strhne	r0, [r4, #3440]	@ movhi
 .L688:
 	uxth	ip, r3
 	movs	r2, #0
@@ -5084,14 +5084,14 @@ FtlScanSysBlk:
 	sxth	r1, r2
 	cmp	ip, r0
 	bhi	.L690
-	ldr	r2, [r4, #3380]
+	ldr	r2, [r4, #3384]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
-	ldr	r2, [r4, #3356]
+	ldr	r2, [r4, #3360]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
 	blt	.L679
-	ldrh	r0, [r4, #3436]
+	ldrh	r0, [r4, #3440]
 	ldr	r2, [r4, #128]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
@@ -5099,22 +5099,22 @@ FtlScanSysBlk:
 	cmp	r3, r2
 	bgt	.L679
 .L724:
-	ldr	r2, [r4, #3380]
+	ldr	r2, [r4, #3384]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
-	strh	r0, [r4, #3436]	@ movhi
+	strh	r0, [r4, #3440]	@ movhi
 	str	r1, [r2, r3, lsl #2]
-	ldr	r2, [r4, #3356]
+	ldr	r2, [r4, #3360]
 .L744:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
 	b	.L679
 .L690:
-	ldr	r0, [r4, #3380]
+	ldr	r0, [r4, #3384]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
 	ldr	lr, [lr, #4]
 	str	lr, [r0, r1, lsl #2]
-	ldr	r0, [r4, #3356]
+	ldr	r0, [r4, #3360]
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
@@ -5135,14 +5135,14 @@ FtlScanSysBlk:
 	ldrh	r3, [r4, #120]
 	cmp	r2, r3
 	bls	.L695
-	movw	r2, #1263
+	movw	r2, #1266
 	ldr	r1, .L749
 	ldr	r0, .L749+4
 	bl	sftl_printk
 .L695:
 	ldrh	lr, [r4, #120]
 	ldrh	r0, [r4, #144]
-	ldr	r10, [r4, #3368]
+	ldr	r10, [r4, #3372]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
@@ -5168,7 +5168,7 @@ FtlScanSysBlk:
 	sxth	r1, r2
 	cmp	ip, r0
 	bhi	.L700
-	ldr	r2, [r4, #3368]
+	ldr	r2, [r4, #3372]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #148]
@@ -5184,14 +5184,14 @@ FtlScanSysBlk:
 	cmp	r3, r2
 	bgt	.L679
 	adds	r1, r1, #1
-	ldr	r2, [r4, #3368]
+	ldr	r2, [r4, #3372]
 	strh	r1, [r4, #144]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #148]
 	b	.L744
 .L700:
-	ldr	r0, [r4, #3368]
+	ldr	r0, [r4, #3372]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
 	ldr	lr, [lr, #4]
@@ -5234,7 +5234,7 @@ FtlScanSysBlk:
 	strh	r5, [r4, #2580]	@ movhi
 	b	.L679
 .L708:
-	ldr	r1, [r4, #3356]
+	ldr	r1, [r4, #3360]
 	ldrh	r3, [r1]
 	cbz	r3, .L710
 .L713:
@@ -5243,11 +5243,11 @@ FtlScanSysBlk:
 	cmp	r2, #0
 	beq	.L711
 .L712:
-	ldrh	r2, [r4, #3436]
+	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
 	bls	.L743
-	movw	r2, #1388
+	movw	r2, #1391
 	ldr	r1, .L749
 	ldr	r0, .L749+4
 	bl	sftl_printk
@@ -5257,7 +5257,7 @@ FtlScanSysBlk:
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 .L710:
-	ldrh	r2, [r4, #3436]
+	ldrh	r2, [r4, #3440]
 	cmp	r2, #0
 	beq	.L713
 	ldr	r0, [r4, #128]
@@ -5275,14 +5275,14 @@ FtlScanSysBlk:
 	ldr	r1, [r4, #128]
 	cmp	r3, r1
 	bcs	.L713
-	ldr	r1, [r4, #3356]
+	ldr	r1, [r4, #3360]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
 	strh	r6, [r1, r0, lsl #1]	@ movhi
-	ldr	r1, [r4, #3380]
+	ldr	r1, [r4, #3384]
 	ldr	r6, [r1, r3, lsl #2]
 	str	r6, [r1, r0, lsl #2]
-	ldr	r1, [r4, #3356]
+	ldr	r1, [r4, #3360]
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
@@ -5310,7 +5310,7 @@ FtlScanSysBlk:
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
 	strh	r6, [r2, r1, lsl #1]	@ movhi
-	ldr	r2, [r4, #3368]
+	ldr	r2, [r4, #3372]
 	ldr	r6, [r2, r3, lsl #2]
 	str	r6, [r2, r1, lsl #2]
 	ldr	r2, [r4, #148]
@@ -5340,11 +5340,11 @@ FtlLoadBbt:
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r8, #61649
 	ldr	r4, .L780
-	ldr	r3, [r4, #3300]
-	addw	r7, r4, #3452
-	ldr	r6, [r4, #3332]
-	str	r3, [r4, #3460]
-	str	r6, [r4, #3464]
+	ldr	r3, [r4, #3304]
+	add	r7, r4, #3456
+	ldr	r6, [r4, #3336]
+	str	r3, [r4, #3464]
+	str	r6, [r4, #3468]
 	bl	FtlBbtMemInit
 	ldrh	r5, [r4, #98]
 	subs	r5, r5, #1
@@ -5358,20 +5358,20 @@ FtlLoadBbt:
 	movs	r2, #1
 	mov	r1, r2
 	mov	r0, r7
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
 	bne	.L753
-	ldr	r3, [r4, #3456]
+	ldr	r3, [r4, #3460]
 	movs	r2, #1
 	mov	r1, r2
 	mov	r0, r7
 	adds	r3, r3, #1
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
 .L753:
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
 	beq	.L754
 	ldrh	r3, [r6]
@@ -5394,9 +5394,9 @@ FtlLoadBbt:
 	movs	r2, #1
 	mov	r1, r2
 	ldr	r0, .L780+4
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
 	beq	.L759
 	ldrh	r2, [r6]
@@ -5464,11 +5464,11 @@ FtlLoadBbt:
 	mov	r1, r2
 	mov	r0, r7
 	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3456]
-	ldr	r3, [r4, #3300]
 	str	r3, [r4, #3460]
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
 	beq	.L762
 	ldrh	r3, [r6]
@@ -5479,8 +5479,8 @@ FtlLoadBbt:
 	sxth	r5, r5
 	b	.L761
 .L768:
-	ldrh	r2, [r4, #3388]
-	ldr	r1, [r4, #3460]
+	ldrh	r2, [r4, #3392]
+	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
 	lsls	r2, r2, #2
 	mla	r1, r5, r2, r1
@@ -5494,311 +5494,83 @@ FtlLoadBbt:
 	.align	2
 .L780:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
+	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
 	.word	.LC1
 	.word	.LANCHOR0+176
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	1
-	.global	FtlLoadSysInfo
+	.global	FlashProgPages
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
+	.type	FlashProgPages, %function
+FlashProgPages:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	movs	r1, #0
-	ldr	r4, .L803
-	ldr	r3, [r4, #3300]
-	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #2324]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	lsls	r2, r2, #1
-	str	r3, [r4, #3464]
-	bl	ftl_memset
-	ldrh	r0, [r4, #2576]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L783
-.L791:
-	mov	r0, #-1
-	pop	{r3, r4, r5, r6, r7, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r6, .L820
+	mov	fp, r1
+	mov	r4, r0
+	mov	r5, r0
+	str	r3, [sp, #12]
+	mov	r10, #0
+	ldrh	r3, [r6, #12]
+	mov	r8, r6
+	str	r2, [sp, #8]
+	str	r3, [sp]
+	lsls	r3, r3, #3
+	str	r3, [sp, #4]
 .L783:
-	ldr	r7, .L803+4
-	movs	r1, #1
-	addw	r6, r4, #3452
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	adds	r0, r0, #1
-	strh	r0, [r4, #2578]	@ movhi
-.L785:
-	cmp	r5, #0
-	bge	.L788
-	mov	r2, #1448
-	ldr	r1, .L803+8
-	ldr	r0, .L803+12
-	bl	sftl_printk
-.L787:
-	ldrh	r3, [r4, #40]
-	ldrh	r2, [r4, #110]
-	adds	r3, r3, #24
-	cmp	r2, r3, lsl #1
-	bcs	.L790
-	movw	r2, #1450
-	ldr	r1, .L803+8
-	ldr	r0, .L803+12
+	cmp	r10, fp
+	bne	.L797
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	beq	.L791
+	movs	r5, #0
+	ldr	r7, .L820+4
+	ldr	r8, .L820+24
+	ldr	r9, .L820+28
+	b	.L798
+.L797:
+	ldr	r3, [r5, #8]
+	cbz	r3, .L784
+	ldr	r3, [r5, #12]
+	cbnz	r3, .L785
+.L784:
+	movs	r2, #140
+	ldr	r1, .L820+8
+	ldr	r0, .L820+12
 	bl	sftl_printk
+.L785:
+	add	r2, sp, #20
+	add	r1, sp, #24
+	mov	r0, r5
+	bl	l2p_addr_tran
+	ldr	r7, [sp, #20]
+	cmp	r7, #3
+	bls	.L786
+.L819:
+	mov	r3, #-1
+	str	r3, [r5]
+	b	.L787
+.L786:
+	cbnz	r7, .L788
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #4]
+	cmp	r2, r3
+	bls	.L788
+	ldr	r5, .L820+8
+	ldr	r6, .L820+16
+	ldr	r8, .L820+32
+	b	.L818
 .L790:
-	movs	r2, #48
-	ldr	r1, [r4, #3460]
-	ldr	r0, .L803+16
-	bl	ftl_memcpy
-	ldrh	r2, [r4, #40]
-	ldr	r1, [r4, #3460]
-	ldr	r0, [r4, #2324]
-	lsls	r2, r2, #1
-	adds	r1, r1, #48
-	bl	ftl_memcpy
-	ldrh	r1, [r4, #40]
-	ldr	r3, [r4, #3460]
-	ldr	r0, [r4, #24]
-	lsrs	r2, r1, #3
-	adds	r1, r1, #24
-	lsls	r1, r1, #1
-	adds	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r1, r3
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2268]
-	ldr	r3, .L803+4
-	cmp	r2, r3
-	bne	.L791
-	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
-	ldrh	r3, [r4, #54]
-	ldrh	r5, [r4, #2276]
-	cmp	r2, r3
-	strh	r5, [r4, #2582]	@ movhi
-	bne	.L791
-	ldrh	r3, [r4, #102]
-	ldrh	r2, [r4, #58]
-	ldr	r6, [r4, #44]
-	ldrh	r0, [r4, #158]
-	muls	r3, r5, r3
-	str	r5, [r4, #3472]
-	ldrh	r1, [r4, #32]
-	subs	r0, r6, r0
-	subs	r0, r0, r5
-	str	r3, [r4, #2504]
-	muls	r3, r2, r3
-	str	r3, [r4, #140]
-	bl	__aeabi_uidiv
-	cmp	r5, r6
-	strh	r0, [r4, #2572]	@ movhi
-	bls	.L792
-	mov	r2, #1472
-	ldr	r1, .L803+8
-	ldr	r0, .L803+12
-	bl	sftl_printk
-.L792:
-	ldrh	r3, [r4, #2284]
-	ldrh	r1, [r4, #2282]
-	lsrs	r2, r3, #6
-	and	r3, r3, #63
-	strb	r3, [r4, #2354]
-	strh	r2, [r4, #2350]	@ movhi
-	ldrh	r2, [r4, #2286]
-	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
-	strh	r1, [r4, #2348]	@ movhi
-	strh	r2, [r4, #2396]	@ movhi
-	ldrh	r2, [r4, #2288]
-	strb	r3, [r4, #2356]
-	movw	r3, #65535
-	strh	r3, [r4, #2588]	@ movhi
-	movs	r3, #0
-	strh	r3, [r4, #2590]	@ movhi
-	lsrs	r0, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2402]
-	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
-	strh	r0, [r4, #2398]	@ movhi
-	strb	r3, [r4, #2594]
-	strb	r2, [r4, #2404]
-	ldrh	r2, [r4, #2290]
-	strb	r3, [r4, #2596]
-	str	r3, [r4, #2528]
-	strh	r2, [r4, #2444]	@ movhi
-	ldrh	r2, [r4, #2292]
-	str	r3, [r4, #2516]
-	str	r3, [r4, #2508]
-	str	r3, [r4, #2524]
-	lsrs	r0, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2450]
-	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
-	str	r3, [r4, #2552]
-	strh	r0, [r4, #2446]	@ movhi
-	strb	r2, [r4, #2452]
-	ldr	r2, [r4, #2300]
-	str	r2, [r4, #2548]
-	str	r3, [r4, #2564]
-	ldr	r2, [r4, #2540]
-	str	r3, [r4, #2520]
-	ldr	r3, [r4, #2308]
-	cmp	r3, r2
-	ldr	r2, [r4, #2544]
-	it	hi
-	strhi	r3, [r4, #2540]
-	ldr	r3, [r4, #2304]
-	cmp	r3, r2
-	it	hi
-	strhi	r3, [r4, #2544]
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L795
-	ldr	r0, .L803+20
-	bl	make_superblock
-.L795:
-	ldrh	r2, [r4, #2396]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L796
-	ldr	r0, .L803+24
-	bl	make_superblock
-.L796:
-	ldrh	r2, [r4, #2444]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L797
-	ldr	r0, .L803+28
-	bl	make_superblock
-.L797:
-	ldrh	r2, [r4, #2588]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L798
-	ldr	r0, .L803+32
-	bl	make_superblock
-.L798:
-	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, pc}
-.L788:
-	ldrh	r3, [r4, #2576]
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r6
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3456]
-	ldr	r3, [r4, #3300]
-	str	r3, [r4, #3460]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
-	adds	r3, r3, #1
-	beq	.L786
-	ldr	r3, [r4, #3300]
-	ldr	r3, [r3]
-	cmp	r3, r7
-	bne	.L786
-	ldr	r3, [r4, #3332]
-	ldrh	r2, [r3]
-	movw	r3, #61604
-	cmp	r2, r3
-	beq	.L787
-.L786:
-	subs	r5, r5, #1
-	sxth	r5, r5
-	b	.L785
-.L804:
-	.align	2
-.L803:
-	.word	.LANCHOR0
-	.word	1179929683
-	.word	.LANCHOR1+256
-	.word	.LC1
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2588
-	.fnend
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
-	.align	1
-	.global	FlashProgPages
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashProgPages, %function
-FlashProgPages:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 48
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #52
-	sub	sp, sp, #52
-	ldr	r6, .L843
-	mov	fp, r1
-	mov	r4, r0
-	mov	r5, r0
-	str	r3, [sp, #12]
-	mov	r10, #0
-	ldrh	r3, [r6, #12]
-	mov	r8, r6
-	str	r2, [sp, #8]
-	str	r3, [sp]
-	lsls	r3, r3, #3
-	str	r3, [sp, #4]
-.L806:
-	cmp	r10, fp
-	bne	.L820
-	ldr	r3, [sp, #12]
-	cmp	r3, #0
-	beq	.L814
-	movs	r5, #0
-	ldr	r7, .L843+4
-	ldr	r8, .L843+24
-	ldr	r9, .L843+28
-	b	.L821
-.L820:
-	ldr	r3, [r5, #8]
-	cbz	r3, .L807
-	ldr	r3, [r5, #12]
-	cbnz	r3, .L808
-.L807:
-	movs	r2, #140
-	ldr	r1, .L843+8
-	ldr	r0, .L843+12
-	bl	sftl_printk
-.L808:
-	add	r2, sp, #20
-	add	r1, sp, #24
-	mov	r0, r5
-	bl	l2p_addr_tran
-	ldr	r7, [sp, #20]
-	cmp	r7, #3
-	bls	.L809
-.L842:
-	mov	r3, #-1
-	str	r3, [r5]
-	b	.L810
-.L809:
-	cbnz	r7, .L811
-	ldr	r3, [sp, #24]
-	ldr	r2, [sp, #4]
-	cmp	r2, r3
-	bls	.L811
-	ldr	r5, .L843+8
-	ldr	r6, .L843+16
-	ldr	r8, .L843+32
-	b	.L841
-.L813:
 	mov	r3, #-1
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5814,126 +5586,126 @@ FlashProgPages:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L843+20
+	ldr	r0, .L820+20
 	bl	rknand_print_hex
-.L841:
+.L818:
 	cmp	r7, fp
 	add	r4, r4, #20
-	bne	.L813
+	bne	.L790
 	bl	dump_stack
-.L814:
+.L791:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L811:
+.L788:
 	ldr	r1, [r5, #8]
 	lsls	r3, r1, #26
-	beq	.L827
-	ldr	r9, [r8, #3320]
+	beq	.L804
+	ldr	r9, [r8, #3324]
 	cmp	r1, r9
-	beq	.L815
+	beq	.L792
 	ldrh	r2, [r8, #58]
 	mov	r0, r9
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-.L815:
+.L792:
 	ldr	r3, [r5, #12]
 	mov	r2, r9
 	ldr	r1, [sp, #24]
 	ldrb	r0, [sp, #20]	@ zero_extendqisi2
-	ldr	r7, [r8, #3252]
+	ldr	r7, [r8, #3256]
 	blx	r7
-	cbnz	r0, .L816
+	cbnz	r0, .L793
 	str	r0, [r5]
-.L817:
+.L794:
 	ldrh	r3, [r8, #14]
 	cmp	r3, #4
-	bne	.L810
+	bne	.L787
 	ldr	r0, [sp]
 	add	r2, r9, #2048
 	ldr	r3, [r5, #12]
 	ldr	r1, [sp, #24]
-	ldr	r7, [r8, #3252]
+	ldr	r7, [r8, #3256]
 	adds	r3, r3, #8
 	add	r1, r1, r0
 	ldrb	r0, [sp, #20]	@ zero_extendqisi2
 	blx	r7
 	cmp	r0, #0
-	bne	.L842
-.L810:
+	bne	.L819
+.L787:
 	add	r10, r10, #1
 	adds	r5, r5, #20
-	b	.L806
-.L827:
+	b	.L783
+.L804:
 	mov	r9, r1
-	b	.L815
-.L816:
+	b	.L792
+.L793:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L817
-.L825:
-	ldr	r2, [r6, #3320]
+	b	.L794
+.L802:
+	ldr	r2, [r6, #3324]
 	movs	r3, #0
 	movs	r1, #1
 	add	r0, sp, #28
 	str	r3, [r2]
-	ldr	r2, [r6, #3328]
+	ldr	r2, [r6, #3332]
 	str	r3, [r2]
 	ldr	r3, [r4, #4]
 	ldr	r2, [sp, #8]
 	str	r3, [sp, #32]
-	ldr	r3, [r6, #3320]
+	ldr	r3, [r6, #3324]
 	str	r3, [sp, #36]
-	ldr	r3, [r6, #3328]
+	ldr	r3, [r6, #3332]
 	str	r3, [sp, #40]
 	bl	FlashReadPages
 	ldr	fp, [sp, #28]
 	cmp	fp, #-1
-	bne	.L822
+	bne	.L799
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
 	str	fp, [r4]
-.L822:
+.L799:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L823
+	cbz	r3, .L800
 	ldr	r2, [r3]
-	ldr	r3, [r6, #3328]
+	ldr	r3, [r6, #3332]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L823
+	beq	.L800
 	ldr	r1, [r4, #4]
 	mov	r0, r8
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L823:
+.L800:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L824
+	cbz	r3, .L801
 	ldr	r2, [r3]
-	ldr	r3, [r6, #3320]
+	ldr	r3, [r6, #3324]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L824
+	beq	.L801
 	ldr	r1, [r4, #4]
 	mov	r0, r9
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L824:
+.L801:
 	adds	r5, r5, #1
 	adds	r4, r4, #20
-.L821:
+.L798:
 	cmp	r10, r5
-	bne	.L825
-	b	.L814
-.L844:
+	bne	.L802
+	b	.L791
+.L821:
 	.align	2
-.L843:
+.L820:
 	.word	.LANCHOR0
 	.word	.LC86
-	.word	.LANCHOR1+271
+	.word	.LANCHOR1+256
 	.word	.LC1
 	.word	.LC80
 	.word	.LC82
@@ -5956,7 +5728,7 @@ FtlLowFormatEraseBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, #0
-	ldr	r4, .L890
+	ldr	r4, .L867
 	mov	r7, r1
 	mov	r6, r10
 	mov	r5, r10
@@ -5965,79 +5737,79 @@ FtlLowFormatEraseBlock:
 	sub	sp, sp, #20
 	mov	fp, r4
 	str	r0, [sp, #4]
-	str	r0, [r4, #3284]
-.L846:
+	str	r0, [r4, #3288]
+.L823:
 	ldrh	r1, [r4, #32]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L851
+	bhi	.L828
 	cmp	r6, #0
-	beq	.L845
+	beq	.L822
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r6
 	movs	r1, #0
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L854:
+.L831:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L856
+	bhi	.L833
 	cmp	r7, #0
-	beq	.L873
+	beq	.L850
 	ldrh	r3, [r4, #104]
 	mov	r10, #1
 	str	r3, [sp, #8]
-.L857:
+.L834:
 	mov	r8, #0
 	mov	fp, #20
-.L867:
+.L844:
 	mov	r9, #0
 	mov	r6, r9
-.L858:
+.L835:
 	ldrh	r1, [r4, #32]
 	uxth	r3, r9
 	cmp	r1, r3
-	bhi	.L862
-	cbz	r6, .L845
+	bhi	.L839
+	cbz	r6, .L822
 	mov	r9, #0
 	movs	r3, #1
 	mov	r2, r10
 	mov	r1, r6
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	bl	FlashProgPages
-.L864:
+.L841:
 	uxth	r3, r9
 	cmp	r6, r3
-	bhi	.L866
+	bhi	.L843
 	add	r8, r8, #1
 	ldr	r2, [sp, #8]
 	uxth	r3, r8
 	cmp	r2, r3
-	bhi	.L867
+	bhi	.L844
 	mov	r8, #0
 	mov	r9, #20
-.L868:
+.L845:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L870
+	bhi	.L847
 	ldr	r3, [sp, #4]
 	cmp	r3, #63
-	bls	.L871
-	cbz	r7, .L845
-.L871:
+	bls	.L848
+	cbz	r7, .L822
+.L848:
 	mov	r2, r6
 	mov	r1, r10
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L845:
+.L822:
 	mov	r0, r5
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L851:
+.L828:
 	uxth	r3, r10
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	movs	r2, #0
 	mul	r1, r9, r3
 	add	r3, r3, r4
@@ -6046,19 +5818,19 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	cbz	r7, .L847
+	cbz	r7, .L824
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L848
-.L847:
+	cbnz	r0, .L825
+.L824:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L849
-	ldr	r1, [r4, #3268]
+	cbnz	r0, .L826
+	ldr	r1, [r4, #3272]
 	lsl	r3, r8, #10
-	ldr	r0, [fp, #3336]
+	ldr	r0, [fp, #3340]
 	mla	r1, r9, r6, r1
 	str	r3, [r1, #4]
-	ldr	r3, [r4, #3316]
+	ldr	r3, [r4, #3320]
 	str	r3, [r1, #8]
 	ldrh	r3, [r4, #112]
 	muls	r3, r6, r3
@@ -6069,36 +5841,36 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L848:
+.L825:
 	add	r10, r10, #1
-	b	.L846
-.L849:
+	b	.L823
+.L826:
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L848
-.L856:
+	b	.L825
+.L833:
 	mul	r3, r9, r8
-	ldr	r2, [r4, #3268]
+	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
 	adds	r3, r3, #1
-	bne	.L855
+	bne	.L832
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L855:
+.L832:
 	add	r8, r8, #1
-	b	.L854
-.L873:
+	b	.L831
+.L850:
 	movs	r3, #2
 	mov	r10, r7
 	str	r3, [sp, #8]
-	b	.L857
-.L862:
+	b	.L834
+.L839:
 	uxth	r3, r9
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3272]
 	movs	r2, #0
 	mul	r1, fp, r3
 	add	r3, r3, r4
@@ -6107,21 +5879,21 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	str	r0, [sp, #12]
-	cbz	r7, .L859
+	cbz	r7, .L836
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L860
-.L859:
+	cbnz	r0, .L837
+.L836:
 	ldr	r0, [sp, #12]
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L860
-	ldr	r1, [r4, #3268]
+	cbnz	r0, .L837
+	ldr	r1, [r4, #3272]
 	ldr	r3, [sp, #12]
-	ldr	r2, .L890
+	ldr	r2, .L867
 	mla	r1, fp, r6, r1
-	ldr	r0, [r2, #3316]
+	ldr	r0, [r2, #3320]
 	add	r3, r8, r3, lsl #10
 	str	r3, [r1, #4]
-	ldr	r3, [r4, #3312]
+	ldr	r3, [r4, #3316]
 	str	r3, [r1, #8]
 	ldrh	r3, [r4, #112]
 	muls	r3, r6, r3
@@ -6132,2401 +5904,1983 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L860:
+.L837:
 	add	r9, r9, #1
-	b	.L858
-.L866:
+	b	.L835
+.L843:
 	mul	r3, fp, r9
-	ldr	r2, [r4, #3268]
+	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbz	r3, .L865
+	cbz	r3, .L842
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L865:
+.L842:
 	add	r9, r9, #1
-	b	.L864
-.L870:
-	cbz	r7, .L869
+	b	.L841
+.L847:
+	cbz	r7, .L846
 	mul	r3, r9, r8
-	ldr	r2, [r4, #3268]
+	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbnz	r3, .L869
+	cbnz	r3, .L846
 	ldr	r0, [r1, #4]
 	movs	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L869:
+.L846:
 	add	r8, r8, #1
-	b	.L868
-.L891:
+	b	.L845
+.L868:
 	.align	2
-.L890:
+.L867:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	1
-	.global	Ftl_write_map_blk_to_last_page
+	.global	FlashTestBlk
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
+	.type	FlashTestBlk, %function
+FlashTestBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	movw	r2, #65535
-	ldrh	r3, [r0]
-	mov	r4, r0
-	ldr	r5, [r0, #12]
-	cmp	r3, r2
-	bne	.L893
-	ldrh	r3, [r0, #8]
-	cbz	r3, .L894
-	movw	r2, #641
-	ldr	r1, .L902
-	ldr	r0, .L902+4
-	bl	sftl_printk
-.L894:
-	ldrh	r3, [r4, #8]
-	adds	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	movs	r3, #0
-	strh	r0, [r5]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	strh	r3, [r4]	@ movhi
-	ldr	r3, [r4, #28]
-	adds	r3, r3, #1
-	str	r3, [r4, #28]
-.L895:
-	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, pc}
-.L893:
-	ldrh	r6, [r5, r3, lsl #1]
-	movs	r1, #255
-	ldrh	r3, [r0, #2]
-	ldr	r5, .L902+8
-	ldr	r2, [r0, #28]
-	ldr	r7, [r0, #24]
-	orr	r3, r3, r6, lsl #10
-	str	r3, [r5, #3456]
-	ldr	r3, [r5, #3300]
-	str	r3, [r5, #3460]
-	ldr	r3, [r5, #3332]
-	str	r3, [r5, #3464]
-	str	r2, [r3, #4]
-	movw	r2, #64245
-	strh	r2, [r3, #8]	@ movhi
-	ldrh	r2, [r0, #4]
-	strh	r6, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	ldrh	r2, [r5, #104]
-	ldr	r0, [r5, #3300]
-	lsls	r2, r2, #3
-	bl	ftl_memset
-	movs	r2, #0
-	mov	r3, r2
-.L896:
-	ldrh	r0, [r4, #6]
-	uxth	r1, r2
-	cmp	r0, r1
-	bhi	.L898
+	cmp	r0, #11
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r5, r0
+	.pad #92
+	sub	sp, sp, #92
+	bls	.L872
+	ldr	r3, .L874
+	add	r0, sp, #24
+	movs	r2, #32
+	movs	r1, #165
+	str	r0, [sp, #16]
+	lsls	r5, r5, #10
+	ldr	r4, [r3, #3328]
+	str	r4, [sp, #12]
+	bl	memset
+	mov	r3, #1515870810
 	movs	r2, #1
-	movs	r3, #0
+	str	r3, [r4]	@ unaligned
 	mov	r1, r2
-	ldr	r0, .L902+12
+	str	r3, [r4, #4]	@ unaligned
+	add	r0, sp, #4
+	str	r5, [sp, #8]
+	bl	FlashEraseBlocks
+	movs	r3, #1
+	add	r0, sp, #4
+	mov	r2, r3
+	mov	r1, r3
 	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
+	ldr	r3, [sp, #4]
+	cbnz	r3, .L873
+	adds	r3, r5, #1
+	add	r0, sp, #4
+	str	r3, [sp, #8]
+	movs	r3, #1
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r4, [sp, #4]
+	adds	r4, r4, #0
+	it	ne
+	movne	r4, #1
+	negs	r4, r4
+.L871:
+	movs	r2, #1
+	movs	r1, #0
+	add	r0, sp, #4
+	str	r5, [sp, #8]
+	bl	FlashEraseBlocks
+.L869:
 	mov	r0, r4
-	adds	r3, r3, #1
-	strh	r3, [r4, #2]	@ movhi
-	bl	ftl_map_blk_gc
-	b	.L895
-.L898:
-	uxth	r1, r2
-	ldr	r0, [r7, r1, lsl #2]
-	cmp	r6, r0, lsr #10
-	bne	.L897
-	ldr	r0, [r5, #3300]
-	adds	r3, r3, #1
-	uxth	r3, r3
-	str	r1, [r0, r3, lsl #3]
-	ldr	r0, [r7, r1, lsl #2]
-	ldr	r1, [r5, #3300]
-	add	r1, r1, r3, lsl #3
-	str	r0, [r1, #4]
-.L897:
-	adds	r2, r2, #1
-	b	.L896
-.L903:
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, pc}
+.L873:
+	mov	r4, #-1
+	b	.L871
+.L872:
+	movs	r4, #0
+	b	.L869
+.L875:
 	.align	2
-.L902:
-	.word	.LANCHOR1+286
-	.word	.LC1
+.L874:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
 	.fnend
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	1
-	.global	FtlMapWritePage
+	.global	FtlBbmTblFlush
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r4, r0
-	ldr	r7, .L928
-	mov	r8, r1
-	mov	r10, r2
-	movs	r6, #0
-	ldr	r9, .L928+20
-	mov	r5, r7
-.L905:
-	ldr	r3, [r7, #2524]
-	adds	r3, r3, #1
-	str	r3, [r7, #2524]
-	ldrh	r3, [r7, #104]
-	ldrh	r2, [r4, #2]
-	subs	r3, r3, #1
-	cmp	r2, r3
-	bge	.L906
-	ldrh	r2, [r4]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L907
-.L906:
-	mov	r0, r4
-	bl	Ftl_write_map_blk_to_last_page
-.L907:
-	ldrh	r2, [r4]
-	ldr	r3, [r4, #12]
-	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L908
-	movw	r2, #699
-	mov	r1, r9
-	ldr	r0, .L928+4
+	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
+	movs	r5, #0
+	ldr	r4, .L885
+	movs	r1, #0
+	ldr	r0, [r4, #3304]
+	add	r6, r4, #176
+	ldr	r3, [r4, #3336]
+	ldrh	r2, [r4, #110]
+	str	r0, [r4, #3464]
+	str	r3, [r4, #3468]
+	bl	ftl_memset
+.L877:
+	ldrh	r3, [r4, #54]
+	cmp	r5, r3
+	blt	.L878
+	ldr	r6, [r4, #3468]
+	movs	r2, #16
+	movs	r1, #255
+	ldr	r8, .L885+12
+	ldr	r9, .L885+16
+	movs	r5, #0
+	mov	r0, r6
+	mov	r7, r5
+	bl	memset
+	movw	r3, #61649
+	strh	r3, [r6]	@ movhi
+	ldr	r3, [r4, #160]
+	str	r3, [r6, #4]
+	ldrh	r3, [r4, #152]
+	strh	r3, [r6, #2]	@ movhi
+	ldrh	r3, [r4, #156]
+	strh	r3, [r6, #8]	@ movhi
+	ldrh	r3, [r4, #158]
+	strh	r3, [r6, #10]	@ movhi
+	ldr	r3, [r4, #28]
+	strh	r3, [r6, #12]	@ movhi
+.L879:
+	ldr	r3, [r4, #3304]
+	mov	r10, #0
+	ldrh	r2, [r4, #154]
+	ldrh	r1, [r4, #152]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r10, [r4, #3456]
+	str	r3, [r4, #3468]
+	orr	r3, r2, r1, lsl #10
+	ldrh	r0, [r6, #10]
+	str	r3, [r4, #3460]
+	ldrh	r3, [r4, #156]
+	str	r0, [sp]
+	mov	r0, r8
 	bl	sftl_printk
-.L908:
-	ldrh	r2, [r4]
-	ldrh	r3, [r4, #10]
+	ldrh	r3, [r4, #104]
+	ldrh	r2, [r4, #154]
+	subs	r3, r3, #1
 	cmp	r2, r3
-	bcc	.L909
-	mov	r2, #700
-	mov	r1, r9
-	ldr	r0, .L928+4
-	bl	sftl_printk
-.L909:
-	ldrh	r2, [r4]
-	movs	r1, #16
-	ldr	r3, [r4, #12]
-	ldr	r0, [r5, #3332]
-	ldrh	fp, [r3, r2, lsl #1]
-	ldrh	r3, [r4, #2]
-	str	r0, [r5, #3464]
-	str	r10, [r5, #3460]
-	orr	r3, r3, fp, lsl #10
-	str	r3, [r5, #3456]
-	bl	__memzero
-	ldr	r3, [r5, #3464]
-	ldr	r2, [r4, #28]
-	ldr	r0, .L928+8
-	strh	r8, [r3, #8]	@ movhi
-	str	r2, [r3, #4]
-	ldrh	r2, [r4, #4]
-	strh	fp, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
+	blt	.L880
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #152]
+	ldr	r0, [r4, #3272]
+	adds	r3, r3, #1
+	strh	r10, [r4, #154]	@ movhi
+	str	r3, [r4, #160]
+	str	r3, [r6, #4]
+	ldrh	r3, [r4, #156]
+	strh	r2, [r6, #8]	@ movhi
+	strh	r2, [r4, #156]	@ movhi
+	movs	r2, #1
+	strh	r3, [r4, #152]	@ movhi
+	mov	r1, r2
+	lsls	r3, r3, #10
+	str	r3, [r4, #3460]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+.L880:
 	movs	r3, #1
+	mov	r0, r9
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
+	ldrh	r3, [r4, #154]
 	adds	r3, r3, #1
-	uxth	r3, r3
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r2, [r5, #3452]
-	adds	r1, r2, #1
-	bne	.L910
-	ldr	r1, [r5, #3456]
-	adds	r6, r6, #1
-	ldr	r0, .L928+12
-	uxth	r6, r6
+	strh	r3, [r4, #154]	@ movhi
+	ldr	r3, [r4, #3456]
+	adds	r3, r3, #1
+	bne	.L881
+	adds	r5, r5, #1
+	ldr	r1, [r4, #3460]
+	uxth	r5, r5
+	ldr	r0, .L885+4
 	bl	sftl_printk
-	ldrh	r3, [r4, #2]
-	cmp	r3, #2
-	ittt	ls
-	ldrhls	r3, [r5, #104]
-	addls	r3, r3, #-1
-	strhls	r3, [r4, #2]	@ movhi
-	cmp	r6, #3
-	bls	.L912
-	mov	r2, r6
-	ldr	r1, [r5, #3456]
-	ldr	r0, .L928+16
+	cmp	r5, #3
+	bls	.L879
+	mov	r2, r5
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L885+8
 	bl	sftl_printk
-.L913:
-	b	.L913
-.L912:
-	ldr	r3, [r4, #32]
-	cmp	r3, #0
-	beq	.L905
-.L927:
-	b	.L927
-.L910:
-	cmp	r3, #1
-	beq	.L916
-	cmp	r2, #256
-	beq	.L916
-	ldr	r0, [r4, #36]
-	cbz	r0, .L917
-.L916:
-	movs	r3, #0
-	str	r3, [r4, #36]
-	b	.L905
-.L917:
-	ldr	r2, [r5, #3456]
-	ldr	r3, [r4, #24]
-	str	r2, [r3, r8, lsl #2]
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L929:
+.L883:
+	b	.L883
+.L878:
+	ldrh	r2, [r4, #3392]
+	ldr	r3, [r4, #3464]
+	ldr	r1, [r6, #4]!
+	mul	r0, r2, r5
+	lsls	r2, r2, #2
+	adds	r5, r5, #1
+	add	r0, r3, r0, lsl #2
+	bl	ftl_memcpy
+	b	.L877
+.L884:
+	movs	r7, #1
+	b	.L879
+.L881:
+	cmp	r7, #0
+	beq	.L884
+	movs	r0, #0
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L886:
 	.align	2
-.L928:
+.L885:
 	.word	.LANCHOR0
-	.word	.LC1
-	.word	.LANCHOR0+3452
-	.word	.LC89
 	.word	.LC90
-	.word	.LANCHOR1+317
+	.word	.LC91
+	.word	.LC89
+	.word	.LANCHOR0+3456
 	.fnend
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	1
-	.global	load_l2p_region
+	.global	allocate_data_superblock
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	load_l2p_region, %function
-load_l2p_region:
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	mov	r6, r0
-	ldr	r4, .L937
-	mov	r8, r1
-	ldrh	r3, [r4, #136]
-	cmp	r3, r0
-	bcs	.L931
-	movw	r2, #485
-	ldr	r1, .L937+4
-	ldr	r0, .L937+8
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	ldr	r4, .L923
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r9, .L923+20
+.L888:
+	ldr	r3, .L923
+	ldr	r2, .L923
+	ldrh	r3, [r3, #2344]
+	ldrh	r2, [r2, #2336]
+	add	r3, r3, r2
+	ldr	r2, .L923
+	ldrh	r2, [r2, #40]
+	cmp	r3, r2
+	ble	.L889
+	movw	r2, #2661
+	mov	r1, r9
+	ldr	r0, .L923+4
 	bl	sftl_printk
-.L931:
-	ldr	r3, [r4, #3376]
-	movs	r5, #12
-	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L932
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	ldrh	r2, [r4, #110]
-	movs	r1, #255
-	add	r3, r3, r5
-	ldr	r0, [r3, #8]
-	bl	ftl_memset
-	ldr	r3, [r4, #2492]
-	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2492]
-	add	r5, r5, r3
-	str	r7, [r5, #4]
-.L933:
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L932:
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	movs	r2, #1
-	ldr	r0, .L937+12
-	mov	r1, r2
-	str	r7, [r4, #3456]
-	add	r3, r3, r5
-	ldr	r3, [r3, #8]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	str	r3, [r4, #3464]
-	bl	FlashReadPages
-	ldr	r8, [r4, #3464]
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L934
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L937+16
+.L889:
+	ldr	r3, .L923+8
+	cmp	r5, r3
+	bne	.L915
+	ldrh	r3, [r4, #2344]
+	ldr	r1, [r4, #3164]
+	mul	r2, r1, r3
+	lsrs	r1, r3, #1
+	adds	r1, r1, #1
+	add	r1, r1, r2, lsr #2
+	uxth	r1, r1
+	cbz	r1, .L890
+	subs	r1, r1, #1
+	uxth	r1, r1
+.L890:
+	ldr	r0, .L923+12
+	bl	List_pop_index_node
+	ldrh	r3, [r4, #2344]
+	mov	r6, r0
+	uxth	r8, r0
+	cbnz	r3, .L891
+	movw	r2, #2670
+	mov	r1, r9
+	ldr	r0, .L923+4
 	bl	sftl_printk
-	movs	r3, #4
-	ldr	r1, [r4, #3464]
-	mov	r2, r3
-	ldr	r0, .L937+20
-	bl	rknand_print_hex
-	ldrh	r3, [r4, #136]
-	movs	r2, #4
-	ldr	r1, [r4, #3376]
-	ldr	r0, .L937+24
-	bl	rknand_print_hex
-.L935:
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L936
-	mov	r2, #508
-	ldr	r1, .L937+4
-	ldr	r0, .L937+8
+.L891:
+	ldrh	r3, [r4, #2344]
+	subs	r3, r3, #1
+	strh	r3, [r4, #2344]	@ movhi
+	ldrh	r3, [r4, #40]
+	cmp	r3, r8
+	bls	.L888
+	ldr	r3, [r4, #2324]
+	uxth	r6, r6
+	ldrh	r7, [r3, r6, lsl #1]
+	cmp	r7, #0
+	bne	.L888
+	strh	r8, [r5]	@ movhi
+	mov	r0, r5
+	bl	make_superblock
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cbnz	r3, .L893
+	ldr	r3, [r4, #2324]
+	movw	r2, #65535
+	mov	r0, r8
+	strh	r2, [r3, r6, lsl #1]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldrh	r2, [r4, #2336]
+	ldrh	r3, [r4, #2344]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #40]
+	cmp	r3, r2
+	ble	.L888
+	movw	r2, #2684
+	mov	r1, r9
+	ldr	r0, .L923+4
 	bl	sftl_printk
-.L936:
-	ldr	r3, [r4, #2492]
+	b	.L888
+.L915:
 	movs	r1, #0
-	adds	r2, r3, r5
-	str	r1, [r2, #4]
-	strh	r6, [r3, r5]	@ movhi
-	b	.L933
-.L934:
-	ldr	r3, [r4, #3452]
-	cmp	r3, #256
-	bne	.L935
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L937+28
-	bl	sftl_printk
-	ldr	r3, [r4, #2492]
-	mov	r1, r6
-	ldr	r0, .L937+32
-	add	r3, r3, r5
-	ldr	r2, [r3, #8]
-	bl	FtlMapWritePage
-	b	.L935
-.L938:
-	.align	2
-.L937:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+333
-	.word	.LC1
-	.word	.LANCHOR0+3452
-	.word	.LC91
-	.word	.LC92
-	.word	.LC93
-	.word	.LC94
-	.word	.LANCHOR0+3392
-	.fnend
-	.size	load_l2p_region, .-load_l2p_region
-	.align	1
-	.global	ftl_map_blk_gc
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	mov	r4, r0
-	ldr	r6, [r0, #12]
-	ldr	r10, [r0, #24]
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r4, #10]
-	ldrh	r2, [r4, #8]
-	ldr	r5, .L955
-	subs	r3, r3, #5
-	cmp	r2, r3
-	blt	.L940
-	uxth	r0, r0
-	ldrh	r9, [r6, r0, lsl #1]
-	cmp	r9, #0
-	beq	.L940
-	ldr	r3, [r4, #32]
-	cbnz	r3, .L940
-	movs	r2, #1
-	str	r2, [r4, #32]
-	strh	r3, [r6, r0, lsl #1]	@ movhi
-	ldrh	r3, [r4, #8]
-	ldrh	r2, [r4, #2]
-	subs	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L941
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L941:
-	movs	r6, #0
-.L942:
-	ldrh	r2, [r4, #6]
-	uxth	fp, r6
-	cmp	r2, fp
-	bhi	.L949
-	movs	r1, #1
-	mov	r0, r9
-	bl	FtlFreeSysBlkQueueIn
-	movs	r3, #0
-	str	r3, [r4, #32]
-.L940:
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L950
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L950:
-	movs	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L949:
-	uxth	r7, r6
-	ldr	r2, [r10, r7, lsl #2]
-	add	r3, r10, r7, lsl #2
-	str	r3, [sp, #4]
-	cmp	r9, r2, lsr #10
-	bne	.L943
-	ldr	r2, [r5, #3304]
-	ldr	r8, [r5, #3332]
-	ldr	r0, .L955+4
-	str	r2, [r5, #3460]
-	str	r8, [r5, #3464]
-	ldr	r2, [r10, r7, lsl #2]
-	str	r2, [r5, #3456]
-	movs	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldrh	r2, [r8, #8]
-	cmp	r2, fp
-	beq	.L944
-	movw	r2, #611
-	ldr	r1, .L955+8
-	ldr	r0, .L955+12
+	b	.L890
+.L893:
+	ldrh	r2, [r4, #2336]
+	ldrh	r3, [r4, #2344]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #40]
+	cmp	r3, r2
+	ble	.L895
+	movw	r2, #2687
+	mov	r1, r9
+	ldr	r0, .L923+4
 	bl	sftl_printk
-.L944:
-	ldr	r2, [r5, #3452]
-	adds	r2, r2, #1
-	bne	.L945
-.L947:
+.L895:
+	ldr	r1, [r4, #3272]
+	mov	r10, #20
+	ldrh	r2, [r4, #32]
+	add	fp, r5, #16
+	mov	r0, fp
+	mov	ip, #0
+	mov	r3, r1
+	mla	r2, r10, r2, r1
+	str	r2, [sp, #4]
+.L896:
 	ldr	r2, [sp, #4]
-	movs	r3, #0
-	str	r3, [r2]
-.L946:
-	b	.L946
-.L945:
-	ldrh	r2, [r8, #8]
-	cmp	r2, fp
-	bne	.L947
-	ldrh	r2, [r8]
-	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L947
-	ldr	r2, [r5, #3460]
-	mov	r1, r7
-	mov	r0, r4
-	bl	FtlMapWritePage
-.L943:
-	adds	r6, r6, #1
-	b	.L942
-.L956:
-	.align	2
-.L955:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
-	.word	.LANCHOR1+349
-	.word	.LC1
-	.fnend
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
-	.align	1
-	.global	FtlMapTblRecovery
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 24
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #28
-	sub	sp, sp, #28
-	ldr	r3, [r0, #24]
-	mov	r4, r0
+	bne	.L898
+	cbnz	r7, .L899
+	movw	r2, #2698
+	mov	r1, r9
+	ldr	r0, .L923+4
+	bl	sftl_printk
+.L899:
+	ldrh	r3, [r4, #2592]
+	cmp	r3, r8
+	bne	.L900
+	movw	r2, #2700
+	mov	r1, r9
+	ldr	r0, .L923+4
+	bl	sftl_printk
+.L900:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	ldr	r2, [r4, #2328]
+	cmp	r3, #0
+	bne	.L901
+	ldrh	r3, [r2, r6, lsl #1]
+	cmp	r3, #0
+	beq	.L902
+	ldrh	r1, [r4, #92]
+	add	r3, r3, r1
+.L922:
+	strh	r3, [r2, r6, lsl #1]	@ movhi
 	movs	r1, #0
-	ldrh	r10, [r0, #6]
-	str	r3, [sp, #4]
-	ldr	r3, [r0, #16]
-	ldr	r5, .L984
-	ldr	r9, [r0, #12]
-	lsl	r2, r10, #2
-	str	r3, [sp, #12]
-	ldrh	r3, [r0, #8]
-	ldr	r0, [sp, #4]
-	str	r3, [sp, #8]
-	bl	ftl_memset
-	ldr	r3, [r5, #3300]
-	movs	r2, #1
-	ldr	r6, [r5, #3332]
-	str	r2, [r4, #36]
-	str	r3, [r5, #3460]
-	movw	r3, #65535
-	str	r6, [r5, #3464]
-	strh	r3, [r4]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	movs	r3, #0
-	str	r3, [r4, #32]
-	mov	r8, r3
-	str	r3, [r4, #28]
-	ldr	r3, [sp, #8]
-	add	fp, r3, #-1
-	mov	r3, r5
-.L958:
-	ldr	r1, [sp, #8]
-	sxth	r2, r8
-	cmp	r2, r1
-	bge	.L975
-	cmp	r2, fp
-	lsl	r7, r2, #1
-	bne	.L959
-	ldrh	r0, [r9, fp, lsl #1]
-	movs	r1, #1
-	bl	FtlGetLastWrittenPage
-	ldr	r3, [sp, #12]
-	add	r7, r7, r9
-	strh	r8, [r4]	@ movhi
-	sxth	r9, r0
-	ldr	r8, .L984+4
-	adds	r0, r0, #1
-	strh	r0, [r4, #2]	@ movhi
-	add	r9, r9, #1
-	ldr	r3, [r3, fp, lsl #2]
-	mov	fp, #0
-	str	r3, [r4, #28]
-.L960:
-	sxth	r2, fp
-	cmp	r2, r9
-	blt	.L962
-.L975:
-	mov	r0, r4
-	bl	ftl_free_no_use_map_blk
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
+	ldr	r3, [r4, #2548]
+	mov	r0, r8
+	adds	r3, r3, #1
+	str	r3, [r4, #2548]
+	bl	ftl_set_blk_mode
+.L904:
+	ldr	r3, [r4, #2328]
+	ldr	r2, [r4, #2564]
+	ldrh	r0, [r4, #92]
+	ldrh	r3, [r3, r6, lsl #1]
+	ldrh	r1, [r4, #40]
+	cmp	r3, r2
+	ldr	r2, [r4, #2548]
+	it	hi
+	strhi	r3, [r4, #2564]
+	ldr	r3, [r4, #2552]
+	mla	r0, r2, r0, r3
+	bl	__aeabi_uidiv
+	ldr	r2, [r4, #3352]
+	ldr	r1, [r4, #3272]
+	str	r0, [r4, #2556]
+	ldr	r3, [r2, #16]
+	ldr	r0, .L923+16
+	adds	r3, r3, #1
+	str	r3, [r2, #16]
+	movs	r2, #20
+	mla	r2, r2, r7, r1
+	adds	r3, r1, #4
+	adds	r2, r2, #24
+.L906:
+	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L964
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L964:
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	movs	r0, #0
-	add	sp, sp, #28
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L962:
-	ldrh	r1, [r7]
+	bne	.L907
+	ldrb	r1, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r7
+	ldr	r0, [r4, #3272]
+	mov	r10, #0
+	bl	FlashEraseBlocks
+	mov	r3, r10
+	movs	r1, #20
+.L908:
+	uxth	r2, r10
+	cmp	r7, r2
+	bhi	.L910
+	cmp	r3, #0
+	ble	.L911
 	mov	r0, r8
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3456]
-	movs	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r2, [r5, #3452]
-	adds	r2, r2, #1
-	beq	.L961
-	ldrh	r2, [r6, #8]
-	cmp	r10, r2
-	bls	.L961
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r6]
-	cmp	r0, r1
-	ittt	eq
-	ldreq	r1, [r5, #3456]
-	ldreq	r3, [sp, #4]
-	streq	r1, [r3, r2, lsl #2]
-.L961:
-	add	fp, fp, #1
-	b	.L960
-.L959:
-	ldr	r1, [r5, #3300]
-	str	r3, [sp, #20]
-	add	r3, r9, r7
-	ldr	r0, .L984+4
-	str	r1, [r5, #3460]
-	ldrh	r1, [r9, r2, lsl #1]
-	ldrh	r2, [r5, #104]
-	str	r3, [sp, #16]
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L911:
+	ldrb	r2, [r5, #7]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L912
+	ldr	r3, [r4, #2324]
+	movw	r2, #65535
+	strh	r2, [r3, r6, lsl #1]	@ movhi
+	b	.L888
+.L898:
+	str	ip, [r3, #8]
+	movw	lr, #65535
+	str	ip, [r3, #12]
+	ldrh	r2, [r0], #2
+	cmp	r2, lr
+	beq	.L897
+	mla	lr, r10, r7, r1
+	adds	r7, r7, #1
+	lsls	r2, r2, #10
+	uxth	r7, r7
+	str	r2, [lr, #4]
+.L897:
+	adds	r3, r3, #20
+	b	.L896
+.L902:
+	movs	r3, #2
+	b	.L922
+.L901:
+	ldrh	r3, [r2, r6, lsl #1]
+	mov	r0, r8
+	adds	r3, r3, #1
+	strh	r3, [r2, r6, lsl #1]	@ movhi
+	ldr	r3, [r4, #2552]
+	adds	r3, r3, #1
+	str	r3, [r4, #2552]
+	bl	ftl_set_blk_mode.part.6
+	b	.L904
+.L907:
+	ldr	r1, [r3, #-20]
+	ands	r1, r1, r0
+	str	r1, [r3, #-20]
+	b	.L906
+.L910:
+	mul	r2, r1, r10
+	ldr	r0, [r4, #3272]
+	add	ip, r0, r2
+	ldr	r2, [r0, r2]
+	adds	r0, r2, #1
+	bne	.L909
+	ldr	r0, [ip, #4]
+	adds	r3, r3, #1
+	str	r1, [sp, #12]
+	str	r2, [sp, #8]
+	ubfx	r0, r0, #10, #16
+	str	r3, [sp, #4]
+	bl	FtlBbmMapBadBlock
+	ldr	r2, [sp, #8]
+	ldr	r1, [sp, #12]
+	ldr	r3, [sp, #4]
+	strh	r2, [fp]	@ movhi
+	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3456]
-	movs	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r2, [r5, #3452]
-	ldr	r3, [sp, #20]
-	adds	r2, r2, #1
-	beq	.L977
-	ldrh	r1, [r6]
-	ldrh	r2, [r4, #4]
-	cmp	r1, r2
-	bne	.L977
-	ldrh	r1, [r6, #8]
-	movw	r2, #64245
-	cmp	r1, r2
-	beq	.L966
-.L977:
-	movs	r7, #0
-.L967:
-	ldrh	r1, [r3, #104]
-	sxth	r2, r7
-	cmp	r2, r1
-	bge	.L973
-	ldr	r1, [sp, #16]
-	ldr	r0, .L984+4
-	str	r3, [sp, #20]
-	ldrh	r1, [r1]
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r3, #3456]
-	movs	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
-	ldr	r3, [sp, #20]
-	ldr	r2, [r3, #3452]
+	strb	r2, [r5, #7]
+.L909:
+	add	r10, r10, #1
+	add	fp, fp, #2
+	b	.L908
+.L912:
+	ldrh	r3, [r4, #102]
+	strh	r8, [r5]	@ movhi
+	smulbb	r3, r3, r2
+	movs	r2, #0
+	strh	r2, [r5, #2]	@ movhi
+	strb	r2, [r5, #6]
+	ldr	r2, [r4, #2540]
+	uxth	r3, r3
+	strh	r3, [r5, #4]	@ movhi
+	str	r2, [r5, #12]
 	adds	r2, r2, #1
-	beq	.L971
-	ldrh	r2, [r6, #8]
-	cmp	r10, r2
-	bls	.L971
-	ldrh	r0, [r6]
-	ldrh	r1, [r4, #4]
-	cmp	r0, r1
-	ittt	eq
-	ldreq	r1, [r3, #3456]
-	ldreq	r0, [sp, #4]
-	streq	r1, [r0, r2, lsl #2]
-.L971:
-	adds	r7, r7, #1
-	b	.L967
-.L966:
+	str	r2, [r4, #2540]
+	ldr	r2, [r4, #2324]
+	ldrh	r1, [r5]
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r5, #4]
+	cbz	r3, .L913
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cbnz	r3, .L914
+.L913:
+	movw	r2, #2753
+	ldr	r1, .L923+20
+	ldr	r0, .L923+4
+	bl	sftl_printk
+.L914:
 	movs	r0, #0
-	mov	ip, #4
-.L968:
-	ldrh	r1, [r5, #104]
-	sxth	r2, r0
-	subs	r1, r1, #1
-	cmp	r2, r1
-	blt	.L970
-.L973:
-	add	r8, r8, #1
-	b	.L958
-.L970:
-	ldr	r7, [r5, #3300]
-	ldr	r1, [r7, r2, lsl #3]
-	uxth	lr, r1
-	cmp	r10, lr
-	bls	.L969
-	add	r2, ip, r2, lsl #3
-	ldr	r2, [r7, r2]
-	ldr	r7, [sp, #4]
-	str	r2, [r7, lr, lsl #2]
-.L969:
-	adds	r0, r0, #1
-	b	.L968
-.L985:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L924:
 	.align	2
-.L984:
+.L923:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3452
+	.word	.LC1
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2340
+	.word	-1024
+	.word	.LANCHOR1+271
 	.fnend
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	1
-	.global	FtlLoadVonderInfo
+	.global	FtlGcFreeBadSuperBlk
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L987
-	push	{r3, lr}
-	.save {r3, lr}
-	ldrh	r3, [r0, #120]
-	strh	r3, [r0, #3486]	@ movhi
-	movw	r3, #61574
-	strh	r3, [r0, #3480]	@ movhi
-	ldrh	r3, [r0, #144]
-	strh	r3, [r0, #3484]	@ movhi
-	ldrh	r3, [r0, #122]
-	strh	r3, [r0, #3482]	@ movhi
-	ldr	r3, [r0, #148]
-	addw	r0, r0, #3476
-	str	r3, [r0, #12]
-	ldr	r3, [r0, #-108]
-	str	r3, [r0, #16]
-	ldr	r3, [r0, #-112]
-	str	r3, [r0, #20]
-	ldr	r3, [r0, #-104]
-	str	r3, [r0, #24]
-	bl	FtlMapTblRecovery
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r0
+	ldr	r4, .L937
+	ldrh	r3, [r4, #3210]
+	cbz	r3, .L926
+	movs	r7, #0
+	addw	r10, r4, #3212
+.L927:
+	ldrh	r2, [r4, #32]
+	uxth	r3, r7
+	cmp	r2, r3
+	bhi	.L933
+	bl	FtlGcReFreshBadBlk
+.L926:
 	movs	r0, #0
-	pop	{r3, pc}
-.L988:
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L933:
+	uxtah	r3, r4, r7
+	mov	r1, r8
+	mov	fp, #0
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r9, r0
+.L928:
+	ldrh	r3, [r4, #3210]
+	uxth	r5, fp
+	cmp	r3, r5
+	bhi	.L932
+	adds	r7, r7, #1
+	b	.L927
+.L932:
+	uxth	r6, fp
+	add	r3, r4, r6, lsl #1
+	ldrh	r3, [r3, #3212]
+	cmp	r3, r9
+	bne	.L929
+	mov	r1, r9
+	ldr	r0, .L937+4
+	bl	sftl_printk
+	mov	r0, r9
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	r1, [r4, #3210]
+	add	r3, r10, r6, lsl #1
+.L930:
+	cmp	r5, r1
+	bcc	.L931
+	subs	r1, r1, #1
+	strh	r1, [r4, #3210]	@ movhi
+.L929:
+	add	fp, fp, #1
+	b	.L928
+.L931:
+	ldrh	r0, [r3, #2]!
+	adds	r5, r5, #1
+	uxth	r5, r5
+	strh	r0, [r3, #-2]	@ movhi
+	b	.L930
+.L938:
 	.align	2
-.L987:
+.L937:
 	.word	.LANCHOR0
+	.word	.LC92
 	.fnend
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	1
-	.global	FtlLoadMapInfo
+	.global	update_vpc_list
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
+	.type	update_vpc_list, %function
+update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, lr}
-	.save {r3, lr}
-	bl	FtlL2PDataInit
-	ldr	r0, .L990
-	bl	FtlMapTblRecovery
-	movs	r0, #0
-	pop	{r3, pc}
-.L991:
+	ldr	r2, .L949
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	mov	r4, r2
+	ldr	r3, [r2, #2324]
+	ldrh	r3, [r3, r0, lsl #1]
+	cmp	r3, #0
+	bne	.L940
+	ldrh	r1, [r2, #2592]
+	cmp	r1, r0
+	bne	.L941
+	movw	r3, #65535
+	strh	r3, [r2, #2592]	@ movhi
+.L942:
+	mov	r1, r5
+	ldr	r0, .L949+4
+	bl	List_remove_node
+	ldrh	r3, [r4, #2336]
+	cbnz	r3, .L944
+	movw	r2, #2823
+	ldr	r1, .L949+8
+	ldr	r0, .L949+12
+	bl	sftl_printk
+.L944:
+	ldrh	r3, [r4, #2336]
+	mov	r0, r5
+	subs	r3, r3, #1
+	strh	r3, [r4, #2336]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r5
+	bl	FtlGcFreeBadSuperBlk
+	ldrh	r2, [r4, #2336]
+	ldrh	r3, [r4, #2344]
+	add	r3, r3, r2
+	ldrh	r2, [r4, #40]
+	cmp	r3, r2
+	ble	.L948
+	movw	r2, #2826
+	ldr	r1, .L949+8
+	ldr	r0, .L949+12
+	bl	sftl_printk
+.L948:
+	movs	r3, #1
+	b	.L939
+.L941:
+	ldrh	r1, [r2, #2348]
+	cmp	r1, r0
+	beq	.L939
+	ldrh	r1, [r2, #2396]
+	cmp	r1, r0
+	beq	.L939
+	ldrh	r2, [r2, #2444]
+	cmp	r2, r0
+	bne	.L942
+.L939:
+	mov	r0, r3
+	pop	{r3, r4, r5, pc}
+.L940:
+	bl	List_update_data_list
+	movs	r3, #0
+	b	.L939
+.L950:
 	.align	2
-.L990:
-	.word	.LANCHOR0+3392
+.L949:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2320
+	.word	.LANCHOR1+296
+	.word	.LC1
 	.fnend
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.size	update_vpc_list, .-update_vpc_list
 	.align	1
-	.global	flush_l2p_region
+	.global	decrement_vpc_count
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	flush_l2p_region, %function
-flush_l2p_region:
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	movs	r4, #12
-	ldr	r5, .L993
-	muls	r4, r0, r4
-	ldr	r3, [r5, #2492]
-	add	r0, r5, #3392
-	adds	r2, r3, r4
-	ldrh	r1, [r3, r4]
-	ldr	r2, [r2, #8]
-	bl	FtlMapWritePage
-	ldr	r3, [r5, #2492]
-	movs	r0, #0
-	add	r4, r4, r3
-	ldr	r3, [r4, #4]
-	bic	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	pop	{r3, r4, r5, pc}
-.L994:
+	movw	r3, #65535
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	cmp	r0, r3
+	mov	r4, r0
+	ldr	r5, .L960
+	beq	.L952
+	ldr	r3, [r5, #2324]
+	ldrh	r2, [r3, r0, lsl #1]
+	cbnz	r2, .L953
+	mov	r1, r0
+	ldr	r0, .L960+4
+	bl	sftl_printk
+	ldr	r3, [r5, #2324]
+	ldrh	r6, [r3, r4, lsl #1]
+	cbz	r6, .L954
+.L958:
+	movs	r6, #0
+.L951:
+	mov	r0, r6
+	pop	{r4, r5, r6, pc}
+.L954:
+	movw	r2, #2841
+.L959:
+	ldr	r1, .L960+8
+	ldr	r0, .L960+12
+	bl	sftl_printk
+	b	.L951
+.L953:
+	subs	r2, r2, #1
+	strh	r2, [r3, r0, lsl #1]	@ movhi
+.L952:
+	ldrh	r0, [r5, #3442]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L956
+	strh	r4, [r5, #3442]	@ movhi
+	b	.L958
+.L956:
+	cmp	r4, r0
+	beq	.L958
+	bl	update_vpc_list
+	ldr	r2, [r5, #2316]
+	adds	r6, r0, #0
+	ldr	r3, [r5, #2320]
+	it	ne
+	movne	r6, #1
+	strh	r4, [r5, #3442]	@ movhi
+	subs	r3, r3, r2
+	asrs	r2, r3, #1
+	ldr	r3, .L960+16
+	muls	r3, r2, r3
+	ldr	r2, [r5, #2324]
+	uxth	r1, r3
+	ldrh	r2, [r2, r1, lsl #1]
+	cmp	r2, #0
+	bne	.L951
+	cmp	r4, r1
+	beq	.L951
+	movw	r2, #2857
+	b	.L959
+.L961:
 	.align	2
-.L993:
+.L960:
 	.word	.LANCHOR0
+	.word	.LC93
+	.word	.LANCHOR1+312
+	.word	.LC1
+	.word	-1431655765
 	.fnend
-	.size	flush_l2p_region, .-flush_l2p_region
+	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	1
-	.global	log2phys
+	.global	FtlSuperblockPowerLostFix
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	log2phys, %function
-log2phys:
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r9, r0
-	ldr	r4, .L1008
-	mov	r5, r1
-	mov	r7, r2
-	ldr	r3, [r4, #2504]
-	ldrh	r10, [r4, #108]
-	cmp	r0, r3
-	bcc	.L996
-	movw	r2, #811
-	ldr	r1, .L1008+4
-	ldr	r0, .L1008+8
-	bl	sftl_printk
-.L996:
-	ldr	r3, [r4, #2504]
-	cmp	r9, r3
-	bcs	.L997
-	add	r10, r10, #7
-	ldrh	r2, [r4, #138]
-	lsr	r6, r9, r10
-	ldr	r1, [r4, #2492]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r5, .L975
+	mov	r3, #-1
+	movs	r7, #0
+	movw	r1, #61589
+	str	r3, [sp, #20]
+	mov	r4, r0
+	ldr	r2, [r5, #3304]
+	ldr	r6, [r5, #3336]
+	str	r2, [sp, #12]
+	mvn	r2, #2
+	str	r6, [sp, #16]
+	str	r2, [r6, #8]
+	mvn	r2, #1
+	str	r2, [r6, #12]
+	ldrh	r2, [r0]
+	strh	r7, [r6]	@ movhi
+	strh	r2, [r6, #2]	@ movhi
+	ldr	r2, [r5, #3304]
+	str	r1, [r2]
+	add	r1, r1, #304087040
+	ldr	r2, [r5, #3304]
+	add	r1, r1, #1269760
+	addw	r1, r1, #1507
+	str	r1, [r2, #4]
+	ldrh	r2, [r0, #4]
+	tst	r2, #1
+	ite	eq
+	moveq	r8, #6
+	movne	r8, #7
+.L968:
+	ldrh	r3, [r4, #4]
+	cbnz	r3, .L964
+.L965:
+	ldr	r2, [r5, #2324]
+	ldrh	r1, [r4]
+	ldrh	r0, [r4, #4]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r5, #102]
+	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #0
-	uxth	r6, r6
-	mov	fp, #12
-.L998:
-	uxth	r8, r3
-	cmp	r8, r2
-	bcc	.L1003
-	bl	select_l2p_ram_region
-	mul	fp, fp, r0
-	ldr	r3, [r4, #2492]
-	mov	r8, r0
-	ldrh	r1, [r3, fp]
-	add	r2, r3, fp
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L1004
-	ldr	r3, [r2, #4]
-	cmp	r3, #0
-	bge	.L1004
-	bl	flush_l2p_region
-.L1004:
-	mov	r1, r8
-	mov	r0, r6
-	bl	load_l2p_region
-	b	.L1000
-.L997:
-	mov	r0, #-1
-	cbnz	r7, .L995
-	str	r0, [r5]
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1003:
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	add	sp, sp, #24
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L964:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	str	r0, [sp, #8]
+	adds	r0, r0, #1
+	beq	.L965
+	ldr	r3, [r5, #2544]
+	movs	r1, #1
+	add	r0, sp, #4
+	str	r3, [r6, #4]
 	adds	r3, r3, #1
-	mla	r0, fp, r3, r1
-	ldrh	r0, [r0, #-12]
-	cmp	r0, r6
-	bne	.L998
-.L1000:
-	movs	r0, #1
-	movs	r3, #12
-	lsl	r0, r0, r10
-	subs	r0, r0, #1
-	and	r0, r0, r9
-	uxth	r0, r0
-	cbnz	r7, .L1001
-	ldr	r2, [r4, #2492]
-	mla	r3, r3, r8, r2
-	ldr	r3, [r3, #8]
-	ldr	r3, [r3, r0, lsl #2]
-	str	r3, [r5]
-.L1002:
-	ldr	r2, [r4, #2492]
-	movs	r3, #12
-	mla	r8, r3, r8, r2
-	ldr	r3, [r8, #4]
 	adds	r2, r3, #1
-	beq	.L1006
-	adds	r3, r3, #1
-	str	r3, [r8, #4]
-.L1006:
-	movs	r0, #0
-.L995:
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1001:
-	mul	r3, r3, r8
-	ldr	r2, [r4, #2492]
-	ldr	r1, [r5]
-	add	r2, r2, r3
-	ldr	r2, [r2, #8]
-	str	r1, [r2, r0, lsl #2]
-	ldr	r2, [r4, #2492]
-	strh	r6, [r4, #2496]	@ movhi
-	add	r3, r3, r2
-	ldr	r2, [r3, #4]
-	orr	r2, r2, #-2147483648
-	str	r2, [r3, #4]
-	b	.L1002
-.L1009:
+	it	eq
+	moveq	r3, r7
+	str	r3, [r5, #2544]
+	movs	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	subs	r8, r8, #1
+	bne	.L968
+	b	.L965
+.L976:
 	.align	2
-.L1008:
+.L975:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+364
-	.word	.LC1
 	.fnend
-	.size	log2phys, .-log2phys
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	1
-	.global	FtlReUsePrevPpa
+	.global	FtlMakeBbt
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	.pad #12
-	mov	r6, r0
-	ldr	r5, .L1020
-	ubfx	r0, r1, #10, #16
-	str	r1, [sp, #4]
-	bl	P2V_block_in_plane
-	ldr	r2, [r5, #2324]
-	mov	r7, r0
-	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L1011
-	ldr	r4, [r5, #2340]
-	cbz	r4, .L1012
-	ldr	r1, [r5, #2316]
-	mov	ip, #6
-	ldr	r2, .L1020+4
-	movw	lr, #65535
-	ldrh	r0, [r5, #2344]
-	subs	r4, r4, r1
-	asrs	r4, r4, #1
-	muls	r4, r2, r4
-	uxth	r4, r4
-.L1013:
-	uxth	r2, r3
-	cmp	r0, r2
-	bls	.L1012
-	cmp	r4, r7
-	bne	.L1014
-	mov	r1, r4
-	ldr	r0, .L1020+8
-	bl	List_remove_node
-	ldrh	r3, [r5, #2344]
-	cbnz	r3, .L1015
-	movw	r2, #1699
-	ldr	r1, .L1020+12
-	ldr	r0, .L1020+16
-	bl	sftl_printk
-.L1015:
-	ldrh	r3, [r5, #2344]
-	mov	r0, r4
-	subs	r3, r3, #1
-	strh	r3, [r5, #2344]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r5, #2324]
-	ldrh	r3, [r2, r7, lsl #1]
-.L1011:
-	adds	r3, r3, #1
-	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L1012
-.L1014:
-	mul	r4, ip, r4
-	adds	r3, r3, #1
-	ldrh	r4, [r1, r4]
-	cmp	r4, lr
-	bne	.L1013
-.L1012:
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, #0
+	ldr	r9, .L996+4
+	bl	FtlBbtMemInit
+	sub	r5, r9, #180
+	sub	r10, r9, #18
+	mov	r4, r5
+	bl	FtlLoadFactoryBbt
+.L978:
+	ldrh	r3, [r5, #54]
+	cmp	r8, r3
+	bcc	.L984
+	movs	r5, #0
+.L985:
+	ldrh	r3, [r4, #114]
+	uxth	r0, r5
+	adds	r5, r5, #1
+	cmp	r3, r0
+	bhi	.L986
+	ldrh	r5, [r4, #164]
+	movw	r6, #65535
+	subs	r5, r5, #1
+	uxth	r5, r5
+.L987:
+	ldrh	r3, [r4, #164]
+	subs	r3, r3, #48
+	cmp	r5, r3
+	ble	.L991
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L988
+	mov	r0, r5
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L989
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+.L988:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L987
+.L984:
+	ldrh	r3, [r10, #2]!
+	movw	r2, #65535
+	ldr	r0, [r5, #3304]
+	ldr	fp, [r5, #3336]
+	cmp	r3, r2
+	str	r0, [r5, #3464]
+	str	fp, [r5, #3468]
+	beq	.L979
+	ldrh	r7, [r5, #98]
 	movs	r2, #1
-	add	r1, sp, #4
-	mov	r0, r6
-	bl	log2phys
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, pc}
-.L1021:
-	.align	2
-.L1020:
-	.word	.LANCHOR0
-	.word	-1431655765
-	.word	.LANCHOR0+2340
-	.word	.LANCHOR1+373
-	.word	.LC1
-	.fnend
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	1
-	.global	ftl_check_vpc
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	movs	r4, #0
-	ldr	r6, .L1046
-	ldr	r7, .L1046+4
-	ldr	r1, .L1046+8
-	mov	r5, r6
-	ldr	r0, .L1046+12
-	bl	sftl_printk
-	mov	r1, #8192
-	ldr	r0, .L1046+4
+	mov	r1, r2
+	ldr	r0, .L996
+	mla	r7, r8, r7, r3
+	lsls	r3, r7, #10
+	str	r3, [r5, #3460]
+	bl	FlashReadPages
+	ldrh	r2, [r5, #98]
+	ldr	r1, [r5, #3464]
+	ldr	r0, [r9]
+	adds	r2, r2, #7
+	asrs	r2, r2, #3
+	bl	ftl_memcpy
+.L980:
+	uxth	r0, r7
+	add	r8, r8, #1
+	add	r9, r9, #4
+	bl	FtlBbmMapBadBlock
+	b	.L978
+.L979:
+	mov	r1, r8
+	bl	FlashGetBadBlockList
+	ldr	r1, [r9]
+	ldr	r0, [r5, #3464]
+	bl	FtlBbt2Bitmap
+	ldrh	r6, [r5, #98]
+.L982:
+	subs	r6, r6, #1
+	uxth	r6, r6
+.L981:
+	ldrh	r0, [r4, #98]
+	smlabb	r0, r0, r8, r6
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L982
+	movs	r1, #16
+	ldr	r0, [r4, #3336]
+	strh	r6, [r10]	@ movhi
 	bl	__memzero
-.L1023:
-	ldr	r3, [r6, #2504]
-	cmp	r4, r3
-	bcc	.L1025
-	ldr	r8, .L1046+4
-	movs	r4, #0
-	ldr	r10, .L1046+24
-	mov	r7, r4
-	movw	r9, #65535
-.L1026:
-	ldrh	r2, [r5, #40]
-	uxth	r3, r4
-	cmp	r2, r3
-	bhi	.L1028
-	ldr	r4, [r5, #2340]
-	cbz	r4, .L1029
-	ldr	r3, [r5, #2316]
-	movs	r6, #0
-	ldrh	r8, [r5, #2344]
-	mov	fp, #6
-	ldr	r9, .L1046+4
-	subs	r4, r4, r3
-	ldr	r3, .L1046+16
-	asrs	r4, r4, #1
-	ldr	r10, .L1046+28
-	muls	r4, r3, r4
-	uxth	r4, r4
-.L1030:
-	uxth	r3, r6
-	cmp	r8, r3
-	bls	.L1029
-	ldr	r3, [r5, #2324]
-	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L1031
-	movs	r7, #1
-	ldrh	r3, [r9, r4, lsl #1]
-	mov	r1, r4
-	mov	r0, r10
-	bl	sftl_printk
-.L1031:
-	mul	r4, fp, r4
-	ldr	r3, [r5, #2316]
-	adds	r6, r6, #1
-	ldrh	r4, [r3, r4]
-	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L1030
-.L1029:
-	cbz	r7, .L1022
-	movw	r2, #2343
-	ldr	r1, .L1046+8
-	ldr	r0, .L1046+20
-	bl	sftl_printk
-.L1022:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1025:
-	movs	r2, #0
-	add	r1, sp, #4
-	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [sp, #4]
-	adds	r3, r0, #1
-	beq	.L1024
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldrh	r3, [r7, r0, lsl #1]
+	mov	r1, #4096
+	ldr	r0, [r4, #3304]
+	bl	__memzero
+	movw	r3, #61664
+	strh	r3, [fp]	@ movhi
+	movs	r3, #0
+	str	r3, [fp, #4]
+	ldrh	r3, [r10]
+	ldrh	r7, [r4, #98]
+	ldrh	r2, [r4, #3392]
+	strh	r3, [fp, #2]	@ movhi
+	ldrh	r3, [r10]
+	ldr	r1, [r9]
+	lsls	r2, r2, #2
+	ldr	r0, [r4, #3464]
+	mla	r7, r8, r7, r3
+	lsls	r3, r7, #10
+	str	r3, [r4, #3460]
+	bl	ftl_memcpy
+	movs	r2, #1
+	ldr	r0, .L996
+	mov	r1, r2
+	bl	FlashEraseBlocks
+	movs	r3, #1
+	ldr	r0, .L996
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L1024:
-	adds	r4, r4, #1
-	b	.L1023
-.L1028:
-	ldr	r3, [r5, #2324]
-	uxth	r6, r4
-	ldrh	r2, [r3, r6, lsl #1]
-	ldrh	r3, [r8, r6, lsl #1]
-	cmp	r2, r3
-	beq	.L1027
-	mov	r1, r6
-	mov	r0, r10
-	bl	sftl_printk
-	ldr	r3, [r5, #2324]
-	ldrh	r3, [r3, r6, lsl #1]
-	cmp	r3, r9
-	beq	.L1027
-	ldrh	r2, [r8, r6, lsl #1]
-	cmp	r2, r3
-	it	hi
-	movhi	r7, #1
-.L1027:
-	adds	r4, r4, #1
-	b	.L1026
-.L1047:
+	bne	.L980
+	uxth	r0, r7
+	bl	FtlBbmMapBadBlock
+	b	.L981
+.L986:
+	bl	FtlBbmMapBadBlock
+	b	.L985
+.L989:
+	ldrh	r3, [r4, #152]
+	cmp	r3, r6
+	bne	.L990
+	strh	r5, [r4, #152]	@ movhi
+	b	.L988
+.L990:
+	strh	r5, [r4, #156]	@ movhi
+.L991:
+	ldrh	r3, [r4, #152]
+	movs	r5, #0
+	ldr	r0, [r4, #3272]
+	movs	r1, #1
+	str	r5, [r4, #160]
+	movs	r2, #2
+	strh	r5, [r4, #154]	@ movhi
+	lsls	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #156]
+	lsls	r3, r3, #10
+	str	r3, [r0, #24]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, #152]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #156]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #156]
+	strh	r5, [r4, #154]	@ movhi
+	adds	r3, r3, #1
+	str	r3, [r4, #160]
+	ldrh	r3, [r4, #152]
+	strh	r2, [r4, #152]	@ movhi
+	strh	r3, [r4, #156]	@ movhi
+	bl	FtlBbmTblFlush
+	mov	r0, r5
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L997:
 	.align	2
-.L1046:
-	.word	.LANCHOR0
-	.word	check_vpc_table
-	.word	.LANCHOR1+389
-	.word	.LC95
-	.word	-1431655765
-	.word	.LC1
-	.word	.LC96
-	.word	.LC97
+.L996:
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR0+180
 	.fnend
-	.size	ftl_check_vpc, .-ftl_check_vpc
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	1
-	.global	ftl_scan_all_data
+	.global	ftl_memcmp
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
+	.type	ftl_memcmp, %function
+ftl_memcmp:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movs	r5, #0
-	ldr	r6, .L1062
-	.pad #32
-	sub	sp, sp, #32
-	movs	r1, #0
-	ldr	r8, .L1062+16
-	mov	r4, r6
-	ldr	r0, .L1062+4
-	bl	sftl_printk
-.L1049:
-	ldr	r3, [r6, #2504]
-	cmp	r5, r3
-	bcc	.L1055
-	add	sp, sp, #32
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1055:
-	movs	r2, #0
-	add	r1, sp, #28
-	mov	r0, r5
-	bl	log2phys
-	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L1050
-	ldr	r2, [sp, #28]
-	mov	r1, r5
-	mov	r0, r8
-	bl	sftl_printk
-.L1050:
-	ldr	r3, [sp, #28]
-	adds	r2, r3, #1
-	beq	.L1052
-	str	r3, [r4, #3456]
-	movs	r2, #0
-	ldr	r3, [r4, #3300]
-	movs	r1, #1
-	ldr	r7, [r4, #3332]
-	ldr	r0, .L1062+8
-	str	r3, [r4, #3460]
-	str	r5, [r4, #3468]
-	str	r7, [r4, #3464]
-	str	r2, [r4, #3452]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3452]
-	cmp	r3, #256
-	beq	.L1053
-	adds	r3, r3, #1
-	beq	.L1053
-	ldr	r3, [r7, #8]
-	cmp	r5, r3
-	beq	.L1052
-.L1053:
-	ldr	r2, [r4, #3460]
-	ldr	r3, [r4, #3464]
-	ldr	r0, .L1062+12
-	ldr	r1, [r2, #4]
-	str	r1, [sp, #16]
-	mov	r1, r5
-	ldr	r2, [r2]
-	str	r2, [sp, #12]
-	ldr	r2, [r3, #12]
-	str	r2, [sp, #8]
-	ldr	r2, [r3, #8]
-	str	r2, [sp, #4]
-	ldr	r2, [r3, #4]
-	str	r2, [sp]
-	ldr	r3, [r3]
-	ldr	r2, [r4, #3456]
-	bl	sftl_printk
-.L1052:
-	adds	r5, r5, #1
-	b	.L1049
-.L1063:
+	@ link register save eliminated.
+	b	memcmp
+	.fnend
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	1
+	.global	js_hash
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	js_hash, %function
+js_hash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1002
+	add	r1, r1, r0
+	push	{r4, lr}
+	.save {r4, lr}
+.L1000:
+	cmp	r0, r1
+	bne	.L1001
+	mov	r0, r3
+	pop	{r4, pc}
+.L1001:
+	lsrs	r2, r3, #2
+	ldrb	r4, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsl #5
+	add	r2, r2, r4
+	eors	r3, r3, r2
+	b	.L1000
+.L1003:
 	.align	2
-.L1062:
-	.word	.LANCHOR0
-	.word	.LC98
-	.word	.LANCHOR0+3452
-	.word	.LC100
-	.word	.LC99
+.L1002:
+	.word	1204201446
 	.fnend
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.size	js_hash, .-js_hash
 	.align	1
-	.global	FtlGcScanTempBlk
+	.global	Ftl_write_map_blk_to_last_page
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 48
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1099
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #52
-	sub	sp, sp, #52
-	mov	r5, r0
-	str	r1, [sp, #12]
-	ldrh	r6, [r3, #4]
-	movw	r3, #65535
-	cmp	r6, r3
-	beq	.L1091
-	cbnz	r6, .L1065
-.L1066:
-	bl	FtlGcPageVarInit
-	b	.L1067
-.L1091:
-	movs	r6, #0
-.L1065:
-	ldr	r3, .L1099+4
-	ldr	r2, [sp, #12]
-	ldrh	r3, [r3, #102]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r2, #65535
+	ldrh	r3, [r0]
+	mov	r4, r0
+	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	beq	.L1066
-.L1067:
-	movw	r9, #65535
+	bne	.L1005
+	ldrh	r3, [r0, #8]
+	cbz	r3, .L1006
+	movw	r2, #641
+	ldr	r1, .L1014
+	ldr	r0, .L1014+4
+	bl	sftl_printk
+.L1006:
+	ldrh	r3, [r4, #8]
+	adds	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
 	movs	r3, #0
-	str	r3, [sp, #4]
-.L1068:
-	movs	r3, #0
-	strb	r3, [r5, #8]
-	ldrh	r3, [r5]
-	cmp	r3, r9
-	beq	.L1069
-	ldr	r4, .L1099+4
-.L1088:
-	ldr	r3, [r4, #3288]
-	movs	r2, #0
-	ldrh	ip, [r4, #32]
-	add	lr, r5, #16
-	ldrh	fp, [r4, #110]
-	mov	r7, r2
-	str	r3, [sp, #8]
-	mov	r8, #20
-	ldr	r3, [r4, #3172]
-	ldr	r10, [r4, #3176]
-	str	r3, [sp, #16]
-	ldrh	r3, [r4, #112]
-	str	r3, [sp, #20]
-.L1070:
-	uxth	r3, r2
-	cmp	ip, r3
-	bhi	.L1074
-	mov	fp, #0
-	movs	r2, #0
-	mov	r1, r7
-	ldr	r0, [sp, #8]
-	bl	FlashReadPages
-.L1075:
-	uxth	r3, fp
-	cmp	r7, r3
-	bhi	.L1086
-	ldr	r3, [sp, #4]
-	adds	r6, r6, #1
-	uxth	r6, r6
+	strh	r0, [r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r4, #28]
 	adds	r3, r3, #1
-	str	r3, [sp, #4]
-	ldr	r2, [sp, #4]
-	ldr	r3, [sp, #12]
-	cmp	r3, r2
-	bls	.L1087
-.L1089:
-	ldrh	r3, [r4, #102]
-	cmp	r3, r6
-	bhi	.L1088
-.L1069:
-	ldr	r3, .L1099
-	movw	r2, #65535
-	strh	r6, [r5, #2]	@ movhi
-	mov	r1, r6
-	mov	r0, r5
-	strh	r2, [r3, #4]	@ movhi
+	str	r3, [r4, #28]
+.L1007:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1005:
+	ldrh	r7, [r5, r3, lsl #1]
+	movs	r1, #255
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L1014+8
+	ldr	r8, [r0, #24]
+	orr	r3, r3, r7, lsl #10
+	ldr	r6, [r5, #3336]
+	str	r3, [r5, #3460]
+	ldr	r3, [r5, #3304]
+	str	r6, [r5, #3468]
+	str	r3, [r5, #3464]
+	ldr	r3, [r0, #28]
+	str	r3, [r6, #4]
+	movw	r3, #64245
+	strh	r3, [r6, #8]	@ movhi
+	ldrh	r3, [r0, #4]
+	strh	r7, [r6, #2]	@ movhi
+	strh	r3, [r6]	@ movhi
+	ldrh	r2, [r5, #104]
+	ldr	r0, [r5, #3304]
+	lsls	r2, r2, #3
+	bl	ftl_memset
 	movs	r2, #0
-	strb	r2, [r5, #6]
-	bl	ftl_sb_update_avl_pages
-	b	.L1090
-.L1074:
-	ldrh	r3, [lr], #2
-	cmp	r3, r9
-	beq	.L1071
-	ldr	r1, [sp, #8]
-	orr	r3, r6, r3, lsl #10
-	mla	r1, r8, r7, r1
-	str	r3, [r1, #4]
-	mov	r3, fp
-	muls	r3, r7, r3
-	it	mi
-	addmi	r3, r3, #3
-	bic	r3, r3, #3
-	mov	r0, r3
-	ldr	r3, [sp, #16]
-	add	r0, r0, r3
-	ldr	r3, [sp, #20]
-	muls	r3, r7, r3
-	add	r7, r7, #1
-	it	mi
-	addmi	r3, r3, #3
-	uxth	r7, r7
-	bic	r3, r3, #3
-	str	r0, [r1, #8]
-	add	r3, r3, r10
-	str	r3, [r1, #12]
-.L1071:
+	mov	r3, r2
+.L1008:
+	ldrh	r0, [r4, #6]
+	uxth	r1, r2
+	cmp	r0, r1
+	bhi	.L1010
+	ldrh	r1, [r5, #110]
+	ldr	r0, [r5, #3464]
+	bl	js_hash
+	movs	r2, #1
+	str	r0, [r6, #12]
+	movs	r3, #0
+	mov	r1, r2
+	ldr	r0, .L1014+12
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	adds	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+	b	.L1007
+.L1010:
+	uxth	r0, r2
+	ldr	r1, [r8, r0, lsl #2]
+	cmp	r7, r1, lsr #10
+	bne	.L1009
+	ldr	r1, [r5, #3304]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	str	r0, [r1, r3, lsl #3]
+	ldr	r1, [r5, #3304]
+	ldr	r0, [r8, r0, lsl #2]
+	add	r1, r1, r3, lsl #3
+	str	r0, [r1, #4]
+.L1009:
 	adds	r2, r2, #1
-	b	.L1070
-.L1086:
-	movs	r3, #20
-	ldr	r1, [r4, #3288]
-	mul	r3, r3, fp
-	adds	r2, r1, r3
-	ldr	r8, [r1, r3]
-	ldr	r0, [r2, #4]
-	str	r0, [sp, #8]
-	cmp	r8, #0
-	bne	.L1076
-	ldr	r10, [r2, #12]
-	ldrh	r2, [r10]
-	cmp	r2, r9
-	bne	.L1077
-.L1076:
-	ldrh	r2, [r5]
-	movs	r1, #0
-	ldr	r3, [r4, #2324]
-	movs	r6, #0
-	strh	r1, [r3, r2, lsl #1]	@ movhi
-	ldrh	r0, [r5]
-	bl	INSERT_FREE_LIST
-	strh	r9, [r5]	@ movhi
-	bl	FtlGcPageVarInit
-	b	.L1068
-.L1077:
-	ldr	r0, [r10, #8]
-	ldr	r2, [r4, #2504]
-	str	r3, [sp, #16]
-	cmp	r0, r2
-	bhi	.L1076
-	mov	r2, r8
-	add	r1, sp, #24
-	bl	log2phys
-	ldr	r2, [r10, #12]
-	ldr	r1, [sp, #24]
-	ldr	r3, [sp, #16]
-	cmp	r2, r1
-	beq	.L1080
-.L1081:
-	ldr	r2, [r10, #8]
-	add	fp, fp, #1
-	ldr	r1, [sp, #8]
-	ldr	r0, [r10, #12]
-	bl	FtlGcUpdatePage
-	b	.L1075
-.L1080:
-	str	r3, [sp, #16]
-	adds	r3, r2, #1
-	beq	.L1081
-	str	r2, [sp, #32]
-	movs	r1, #1
-	ldr	r2, [r4, #3316]
-	add	r0, sp, #28
-	str	r2, [sp, #36]
-	ldr	r2, [r4, #3336]
-	str	r2, [sp, #40]
-	mov	r2, r8
-	bl	FlashReadPages
-	ldrh	r2, [r4, #58]
-	ldr	r1, [r4, #3288]
-	ldr	r3, [sp, #16]
-	ldr	r0, [sp, #36]
-	lsls	r2, r2, #7
-	add	ip, r3, r1
-.L1082:
-	cmp	r8, r2
-	beq	.L1081
-	ldr	r1, [ip, #8]
-	ldr	r3, [r0, r8, lsl #2]
-	ldr	r1, [r1, r8, lsl #2]
-	cmp	r1, r3
-	beq	.L1083
-	ldr	r2, [sp, #32]
-	ldrh	r1, [r5]
-	ldr	r0, .L1099+8
-	bl	sftl_printk
-	b	.L1076
-.L1083:
-	add	r8, r8, #1
-	b	.L1082
-.L1087:
-	ldr	r2, .L1099
-	ldrh	r3, [r2, #4]
-	cmp	r3, r9
-	beq	.L1089
-	ldr	r1, [sp, #4]
-	add	r3, r3, r1
-	strh	r3, [r2, #4]	@ movhi
-	ldrh	r3, [r4, #102]
-	cmp	r3, r6
-	bls	.L1089
-.L1090:
-	mov	r0, #-1
-	add	sp, sp, #52
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1100:
+	b	.L1008
+.L1015:
 	.align	2
-.L1099:
-	.word	.LANCHOR2
+.L1014:
+	.word	.LANCHOR1+332
+	.word	.LC1
 	.word	.LANCHOR0
-	.word	.LC101
+	.word	.LANCHOR0+3456
 	.fnend
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	1
-	.global	FtlReadRefresh
+	.global	FtlMapWritePage
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 88
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1114
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	.pad #88
-	sub	sp, sp, #88
-	mov	r4, r3
-	ldr	r0, [r3, #2716]
-	cmp	r0, #0
-	beq	.L1102
-	ldr	r1, [r3, #2720]
-	ldr	r2, [r3, #2504]
-	cmp	r1, r2
-	bcs	.L1103
-	mov	r5, #2048
-.L1108:
-	ldr	r0, [r4, #2720]
-	ldr	r3, [r4, #2504]
-	cmp	r0, r3
-	bcs	.L1105
-	movs	r2, #0
-	mov	r1, sp
-	bl	log2phys
-	ldr	r2, [sp]
-	ldr	r3, [r4, #2720]
-	adds	r1, r2, #1
-	add	r3, r3, #1
-	str	r3, [r4, #2720]
-	beq	.L1106
-	str	r3, [sp, #20]
-	add	r0, sp, #88
-	ldr	r3, [r4, #3324]
-	movs	r1, #1
-	str	r2, [sp, #8]
-	movs	r2, #0
-	str	r2, [r0, #-84]!
-	str	r3, [sp, #12]
-	add	r3, sp, #24
-	str	r3, [sp, #16]
-	bl	FlashReadPages
-	ldr	r3, [sp, #4]
-	cmp	r3, #256
-	bne	.L1105
-	ldr	r0, [sp]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L1105:
-	mov	r0, #-1
-.L1101:
-	add	sp, sp, #88
-	@ sp needed
-	pop	{r4, r5, r6, pc}
-.L1106:
-	subs	r5, r5, #1
-	bne	.L1108
-	b	.L1105
-.L1103:
-	ldr	r2, [r3, #2508]
-	movs	r0, #0
-	str	r0, [r3, #2716]
-	str	r0, [r3, #2720]
-	str	r2, [r3, #2712]
-	b	.L1101
-.L1102:
-	ldr	r1, [r3, #2508]
-	ldr	r6, [r3, #2712]
-	add	r2, r1, #1048576
-	cmp	r6, r2
-	bhi	.L1111
-	ldr	r2, [r3, #2564]
-	lsrs	r5, r2, #10
-	mov	r2, #33554432
-	asrs	r2, r2, r5
-	add	r2, r2, r6
-	cmp	r1, r2
-	bhi	.L1111
-	ldrb	r3, [r3, #2296]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1101
-.L1111:
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	r7, .L1040
+	mov	r8, r1
+	movs	r6, #0
+	ldr	r9, .L1040+20
+	mov	r5, r7
+	str	r2, [sp, #4]
+.L1017:
+	ldr	r3, [r7, #2524]
+	adds	r3, r3, #1
+	str	r3, [r7, #2524]
+	ldrh	r3, [r7, #104]
+	ldrh	r2, [r4, #2]
+	subs	r3, r3, #1
+	cmp	r2, r3
+	bge	.L1018
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1019
+.L1018:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L1019:
+	ldrh	r2, [r4]
+	ldr	r3, [r4, #12]
+	ldrh	r3, [r3, r2, lsl #1]
+	cbnz	r3, .L1020
+	mov	r2, #700
+	mov	r1, r9
+	ldr	r0, .L1040+4
+	bl	sftl_printk
+.L1020:
+	ldrh	r2, [r4]
+	ldrh	r3, [r4, #10]
+	cmp	r2, r3
+	bcc	.L1021
+	movw	r2, #701
+	mov	r1, r9
+	ldr	r0, .L1040+4
+	bl	sftl_printk
+.L1021:
+	ldrh	r2, [r4]
+	movs	r1, #16
+	ldr	r3, [r4, #12]
+	ldr	r0, [r5, #3336]
+	ldrh	r10, [r3, r2, lsl #1]
+	ldrh	r3, [r4, #2]
+	str	r0, [r5, #3468]
+	orr	r3, r3, r10, lsl #10
+	str	r3, [r5, #3460]
+	ldr	r3, [sp, #4]
+	str	r3, [r5, #3464]
+	bl	__memzero
+	ldr	r3, [r4, #28]
+	ldr	fp, [r5, #3468]
+	str	r3, [fp, #4]
+	strh	r8, [fp, #8]	@ movhi
+	ldrh	r3, [r4, #4]
+	strh	r10, [fp, #2]	@ movhi
+	strh	r3, [fp]	@ movhi
+	ldrh	r1, [r5, #110]
+	ldr	r0, [r5, #3464]
+	bl	js_hash
 	movs	r3, #1
-	movs	r0, #0
-	str	r3, [r4, #2716]
-	str	r0, [r4, #2720]
-	str	r1, [r4, #2712]
-	b	.L1101
-.L1115:
+	str	r0, [fp, #12]
+	mov	r2, r3
+	mov	r1, r3
+	ldr	r0, .L1040+8
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #3456]
+	adds	r1, r2, #1
+	bne	.L1022
+	ldr	r1, [r5, #3460]
+	adds	r6, r6, #1
+	ldr	r0, .L1040+12
+	uxth	r6, r6
+	bl	sftl_printk
+	ldrh	r3, [r4, #2]
+	cmp	r3, #2
+	ittt	ls
+	ldrhls	r3, [r5, #104]
+	addls	r3, r3, #-1
+	strhls	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1024
+	mov	r2, r6
+	ldr	r1, [r5, #3460]
+	ldr	r0, .L1040+16
+	bl	sftl_printk
+.L1025:
+	b	.L1025
+.L1024:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1017
+.L1039:
+	b	.L1039
+.L1022:
+	cmp	r3, #1
+	beq	.L1028
+	cmp	r2, #256
+	beq	.L1028
+	ldr	r0, [r4, #36]
+	cbz	r0, .L1029
+.L1028:
+	movs	r3, #0
+	str	r3, [r4, #36]
+	b	.L1017
+.L1029:
+	ldr	r2, [r5, #3460]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r8, lsl #2]
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1041:
 	.align	2
-.L1114:
+.L1040:
 	.word	.LANCHOR0
+	.word	.LC1
+	.word	.LANCHOR0+3456
+	.word	.LC94
+	.word	.LC95
+	.word	.LANCHOR1+363
 	.fnend
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	1
-	.global	FtlMapBlkWriteDump_data
+	.global	load_l2p_region
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
+	.type	load_l2p_region, %function
+load_l2p_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, r0
-	ldr	r3, [r0, #36]
-	cbz	r3, .L1116
-	ldrh	r5, [r0, #6]
-	movs	r3, #0
-	ldr	r4, .L1120
-	ldr	r2, [r0, #24]
-	str	r3, [r0, #36]
-	subs	r5, r5, #1
-	ldr	r0, [r4, #3304]
-	uxth	r5, r5
-	ldr	r1, [r4, #3332]
-	str	r0, [r4, #3460]
-	str	r1, [r4, #3464]
-	ldr	r2, [r2, r5, lsl #2]
-	str	r2, [r4, #3456]
-	cbz	r2, .L1118
-	movs	r2, #1
-	addw	r0, r4, #3452
-	mov	r1, r2
-	bl	FlashReadPages
-.L1119:
-	ldr	r2, [r4, #3460]
-	mov	r1, r5
-	mov	r0, r6
-	pop	{r4, r5, r6, lr}
-	b	FtlMapWritePage
-.L1118:
+	ldr	r4, .L1049
+	mov	r8, r1
+	ldrh	r3, [r4, #136]
+	cmp	r3, r0
+	bcs	.L1043
+	movw	r2, #485
+	ldr	r1, .L1049+4
+	ldr	r0, .L1049+8
+	bl	sftl_printk
+.L1043:
+	ldr	r3, [r4, #3380]
+	movs	r5, #12
+	ldr	r7, [r3, r6, lsl #2]
+	cbnz	r7, .L1044
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
 	ldrh	r2, [r4, #110]
 	movs	r1, #255
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1119
-.L1116:
-	pop	{r4, r5, r6, pc}
-.L1121:
-	.align	2
-.L1120:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
-	.align	1
-	.global	FlashTestBlk
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 88
-	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r0, #11
-	push	{r4, r5, lr}
-	.save {r4, r5, lr}
-	mov	r4, r0
-	.pad #92
-	sub	sp, sp, #92
-	bls	.L1124
-	ldr	r3, .L1125
-	add	r0, sp, #24
-	movs	r2, #32
-	movs	r1, #165
-	lsls	r4, r4, #10
-	str	r0, [sp, #16]
-	ldr	r5, [r3, #3324]
-	str	r5, [sp, #12]
-	bl	memset
-	mov	r3, #1515870810
+	ldr	r3, [r4, #2492]
+	strh	r6, [r3, r5]	@ movhi
+	ldr	r3, [r4, #2492]
+	add	r5, r5, r3
+	str	r7, [r5, #4]
+.L1045:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1044:
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
 	movs	r2, #1
-	str	r3, [r5]	@ unaligned
+	ldr	r0, .L1049+12
 	mov	r1, r2
-	str	r3, [r5, #4]	@ unaligned
-	add	r0, sp, #4
-	str	r4, [sp, #8]
-	bl	FlashEraseBlocks
-	movs	r3, #1
-	add	r0, sp, #4
+	str	r7, [r4, #3460]
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r3, [r4, #3468]
+	bl	FlashReadPages
+	ldr	r8, [r4, #3468]
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L1046
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L1049+16
+	bl	sftl_printk
+	movs	r3, #4
+	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r4, [sp, #4]
-	movs	r2, #1
+	ldr	r0, .L1049+20
+	bl	rknand_print_hex
+	ldrh	r3, [r4, #136]
+	movs	r2, #4
+	ldr	r1, [r4, #3380]
+	ldr	r0, .L1049+24
+	bl	rknand_print_hex
+.L1047:
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L1048
+	mov	r2, #508
+	ldr	r1, .L1049+4
+	ldr	r0, .L1049+8
+	bl	sftl_printk
+.L1048:
+	ldr	r3, [r4, #2492]
 	movs	r1, #0
-	add	r0, sp, #4
-	adds	r4, r4, #0
-	it	ne
-	movne	r4, #1
-	negs	r4, r4
-	bl	FlashEraseBlocks
-.L1122:
-	mov	r0, r4
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, pc}
-.L1124:
-	movs	r4, #0
-	b	.L1122
-.L1126:
+	adds	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L1045
+.L1046:
+	ldr	r3, [r4, #3456]
+	cmp	r3, #256
+	bne	.L1047
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L1049+28
+	bl	sftl_printk
+	ldr	r3, [r4, #2492]
+	mov	r1, r6
+	ldr	r0, .L1049+32
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+	b	.L1047
+.L1050:
 	.align	2
-.L1125:
+.L1049:
 	.word	.LANCHOR0
+	.word	.LANCHOR1+379
+	.word	.LC1
+	.word	.LANCHOR0+3456
+	.word	.LC96
+	.word	.LC97
+	.word	.LC98
+	.word	.LC99
+	.word	.LANCHOR0+3396
 	.fnend
-	.size	FlashTestBlk, .-FlashTestBlk
+	.size	load_l2p_region, .-load_l2p_region
 	.align	1
-	.global	FtlBbmTblFlush
+	.global	ftl_map_blk_gc
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlBbmTblFlush, %function
-FtlBbmTblFlush:
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #8
-	movs	r5, #0
-	ldr	r4, .L1136
-	movs	r1, #0
-	ldr	r0, [r4, #3300]
-	add	r6, r4, #176
-	ldr	r3, [r4, #3332]
-	ldrh	r2, [r4, #110]
-	str	r0, [r4, #3460]
-	str	r3, [r4, #3464]
-	bl	ftl_memset
-.L1128:
-	ldrh	r3, [r4, #54]
-	cmp	r5, r3
-	blt	.L1129
-	ldr	r6, [r4, #3464]
-	movs	r2, #16
-	movs	r1, #255
-	ldr	r8, .L1136+12
-	ldr	r9, .L1136+16
-	movs	r5, #0
-	mov	r0, r6
-	mov	r7, r5
-	bl	memset
-	movw	r3, #61649
-	strh	r3, [r6]	@ movhi
-	ldr	r3, [r4, #160]
-	str	r3, [r6, #4]
-	ldrh	r3, [r4, #152]
-	strh	r3, [r6, #2]	@ movhi
-	ldrh	r3, [r4, #156]
-	strh	r3, [r6, #8]	@ movhi
-	ldrh	r3, [r4, #158]
-	strh	r3, [r6, #10]	@ movhi
-	ldr	r3, [r4, #28]
-	strh	r3, [r6, #12]	@ movhi
-.L1130:
-	ldr	r3, [r4, #3300]
-	mov	r10, #0
-	ldrh	r2, [r4, #154]
-	ldrh	r1, [r4, #152]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
-	str	r10, [r4, #3452]
-	str	r3, [r4, #3464]
-	orr	r3, r2, r1, lsl #10
-	ldrh	r0, [r6, #10]
-	str	r3, [r4, #3456]
-	ldrh	r3, [r4, #156]
-	str	r0, [sp]
-	mov	r0, r8
-	bl	sftl_printk
-	ldrh	r3, [r4, #104]
-	ldrh	r2, [r4, #154]
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r10, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	ldr	r5, .L1067
+	subs	r3, r3, #5
+	cmp	r2, r3
+	blt	.L1052
+	uxth	r0, r0
+	ldrh	r9, [r6, r0, lsl #1]
+	cmp	r9, #0
+	beq	.L1052
+	ldr	r3, [r4, #32]
+	cbnz	r3, .L1052
+	movs	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r6, r0, lsl #1]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	blt	.L1131
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #152]
-	ldr	r0, [r4, #3268]
-	adds	r3, r3, #1
-	strh	r10, [r4, #154]	@ movhi
-	str	r3, [r4, #160]
-	str	r3, [r6, #4]
-	ldrh	r3, [r4, #156]
-	strh	r2, [r6, #8]	@ movhi
-	strh	r2, [r4, #156]	@ movhi
+	bcc	.L1053
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1053:
+	movs	r6, #0
+.L1054:
+	ldrh	r2, [r4, #6]
+	uxth	fp, r6
+	cmp	r2, fp
+	bhi	.L1061
+	movs	r1, #1
+	mov	r0, r9
+	bl	FtlFreeSysBlkQueueIn
+	movs	r3, #0
+	str	r3, [r4, #32]
+.L1052:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L1062
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1062:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1061:
+	uxth	r7, r6
+	ldr	r2, [r10, r7, lsl #2]
+	add	r3, r10, r7, lsl #2
+	str	r3, [sp, #4]
+	cmp	r9, r2, lsr #10
+	bne	.L1055
+	ldr	r2, [r5, #3308]
+	ldr	r8, [r5, #3336]
+	ldr	r0, .L1067+4
+	str	r2, [r5, #3464]
+	str	r8, [r5, #3468]
+	ldr	r2, [r10, r7, lsl #2]
+	str	r2, [r5, #3460]
 	movs	r2, #1
-	strh	r3, [r4, #152]	@ movhi
 	mov	r1, r2
-	lsls	r3, r3, #10
-	str	r3, [r4, #3456]
-	str	r3, [r0, #4]
-	bl	FlashEraseBlocks
-.L1131:
-	movs	r3, #1
-	mov	r0, r9
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldrh	r3, [r4, #154]
-	adds	r3, r3, #1
-	strh	r3, [r4, #154]	@ movhi
-	ldr	r3, [r4, #3452]
-	adds	r3, r3, #1
-	bne	.L1132
-	adds	r5, r5, #1
-	ldr	r1, [r4, #3456]
-	uxth	r5, r5
-	ldr	r0, .L1136+4
-	bl	sftl_printk
-	cmp	r5, #3
-	bls	.L1130
-	mov	r2, r5
-	ldr	r1, [r4, #3456]
-	ldr	r0, .L1136+8
+	bl	FlashReadPages
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	beq	.L1056
+	movw	r2, #611
+	ldr	r1, .L1067+8
+	ldr	r0, .L1067+12
 	bl	sftl_printk
-.L1134:
-	b	.L1134
-.L1129:
-	ldrh	r2, [r4, #3388]
-	ldr	r3, [r4, #3460]
-	ldr	r1, [r6, #4]!
-	mul	r0, r2, r5
-	lsls	r2, r2, #2
-	adds	r5, r5, #1
-	add	r0, r3, r0, lsl #2
-	bl	ftl_memcpy
-	b	.L1128
-.L1135:
-	movs	r7, #1
-	b	.L1130
-.L1132:
-	cmp	r7, #0
-	beq	.L1135
+.L1056:
+	ldr	r2, [r5, #3456]
+	adds	r2, r2, #1
+	bne	.L1057
+.L1059:
+	ldr	r2, [sp, #4]
+	movs	r3, #0
+	str	r3, [r2]
+.L1058:
+	b	.L1058
+.L1057:
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	bne	.L1059
+	ldrh	r2, [r8]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L1059
+	ldr	r2, [r5, #3464]
+	mov	r1, r7
+	mov	r0, r4
+	bl	FtlMapWritePage
+.L1055:
+	adds	r6, r6, #1
+	b	.L1054
+.L1068:
+	.align	2
+.L1067:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+395
+	.word	.LC1
+	.fnend
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	1
+	.global	flush_l2p_region
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r4, #12
+	ldr	r5, .L1070
+	muls	r4, r0, r4
+	ldr	r3, [r5, #2492]
+	addw	r0, r5, #3396
+	adds	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #2492]
 	movs	r0, #0
-	add	sp, sp, #8
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1137:
+	add	r4, r4, r3
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	pop	{r3, r4, r5, pc}
+.L1071:
 	.align	2
-.L1136:
+.L1070:
 	.word	.LANCHOR0
-	.word	.LC103
-	.word	.LC104
-	.word	.LC102
-	.word	.LANCHOR0+3452
 	.fnend
-	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.size	flush_l2p_region, .-flush_l2p_region
 	.align	1
-	.global	allocate_data_superblock
+	.global	log2phys
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	allocate_data_superblock, %function
-allocate_data_superblock:
+	.type	log2phys, %function
+log2phys:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r5, r0
-	ldr	r4, .L1174
-	.pad #20
-	sub	sp, sp, #20
-	ldr	r9, .L1174+20
-.L1139:
-	ldr	r3, .L1174
-	ldr	r2, .L1174
-	ldrh	r3, [r3, #2344]
-	ldrh	r2, [r2, #2336]
-	add	r3, r3, r2
-	ldr	r2, .L1174
-	ldrh	r2, [r2, #40]
-	cmp	r3, r2
-	ble	.L1140
-	movw	r2, #2615
-	mov	r1, r9
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-.L1140:
-	ldr	r3, .L1174+8
-	cmp	r5, r3
-	bne	.L1166
-	ldrh	r3, [r4, #2344]
-	ldr	r1, [r4, #3160]
-	mul	r2, r1, r3
-	lsrs	r1, r3, #1
-	adds	r1, r1, #1
-	add	r1, r1, r2, lsr #2
-	uxth	r1, r1
-	cbz	r1, .L1141
-	subs	r1, r1, #1
-	uxth	r1, r1
-.L1141:
-	ldr	r0, .L1174+12
-	bl	List_pop_index_node
-	ldrh	r3, [r4, #2344]
-	mov	r6, r0
-	uxth	r8, r0
-	cbnz	r3, .L1142
-	mov	r2, #2624
-	mov	r1, r9
-	ldr	r0, .L1174+4
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r0
+	ldr	r4, .L1085
+	mov	r5, r1
+	mov	r7, r2
+	ldr	r3, [r4, #2504]
+	ldrh	r10, [r4, #108]
+	cmp	r0, r3
+	bcc	.L1073
+	movw	r2, #813
+	ldr	r1, .L1085+4
+	ldr	r0, .L1085+8
 	bl	sftl_printk
-.L1142:
-	ldrh	r3, [r4, #2344]
-	subs	r3, r3, #1
-	strh	r3, [r4, #2344]	@ movhi
-	ldrh	r3, [r4, #40]
-	cmp	r3, r8
-	bls	.L1139
-	ldr	r3, [r4, #2324]
-	uxth	r6, r6
-	ldrh	r7, [r3, r6, lsl #1]
-	cmp	r7, #0
-	bne	.L1139
-	strh	r8, [r5]	@ movhi
-	mov	r0, r5
-	bl	make_superblock
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1144
-	ldr	r3, [r4, #2324]
-	movw	r2, #65535
-	mov	r0, r8
-	strh	r2, [r3, r6, lsl #1]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldrh	r2, [r4, #2336]
-	ldrh	r3, [r4, #2344]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1139
-	movw	r2, #2638
-	mov	r1, r9
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-	b	.L1139
-.L1166:
-	movs	r1, #0
-	b	.L1141
-.L1144:
-	ldrh	r2, [r4, #2336]
-	ldrh	r3, [r4, #2344]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1146
-	movw	r2, #2641
-	mov	r1, r9
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-.L1146:
-	ldr	r1, [r4, #3268]
-	mov	r10, #20
-	ldrh	r2, [r4, #32]
-	add	fp, r5, #16
-	mov	r0, fp
-	mov	ip, #0
-	mov	r3, r1
-	mla	r2, r10, r2, r1
-	str	r2, [sp, #4]
-.L1147:
-	ldr	r2, [sp, #4]
-	cmp	r2, r3
-	bne	.L1149
-	cbnz	r7, .L1150
-	movw	r2, #2652
-	mov	r1, r9
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-.L1150:
-	ldrh	r3, [r4, #2588]
-	cmp	r3, r8
-	bne	.L1151
-	movw	r2, #2654
-	mov	r1, r9
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-.L1151:
-	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #2328]
-	cmp	r3, #0
-	bne	.L1152
-	ldrh	r3, [r2, r6, lsl #1]
-	cmp	r3, #0
-	beq	.L1153
-	ldrh	r1, [r4, #92]
-	add	r3, r3, r1
-.L1173:
-	strh	r3, [r2, r6, lsl #1]	@ movhi
-	movs	r1, #0
-	ldr	r3, [r4, #2548]
-	mov	r0, r8
-	adds	r3, r3, #1
-	str	r3, [r4, #2548]
-	bl	ftl_set_blk_mode
-.L1155:
-	ldr	r3, [r4, #2328]
-	ldr	r2, [r4, #2564]
-	ldrh	r0, [r4, #92]
-	ldrh	r3, [r3, r6, lsl #1]
-	ldrh	r1, [r4, #40]
-	cmp	r3, r2
-	ldr	r2, [r4, #2548]
-	it	hi
-	strhi	r3, [r4, #2564]
-	ldr	r3, [r4, #2552]
-	mla	r0, r2, r0, r3
-	bl	__aeabi_uidiv
-	ldr	r2, [r4, #3348]
-	ldr	r1, [r4, #3268]
-	str	r0, [r4, #2556]
-	ldr	r3, [r2, #16]
-	ldr	r0, .L1174+16
-	adds	r3, r3, #1
-	str	r3, [r2, #16]
-	movs	r2, #20
-	mla	r2, r2, r7, r1
-	adds	r3, r1, #4
-	adds	r2, r2, #24
-.L1157:
-	adds	r3, r3, #20
-	cmp	r2, r3
-	bne	.L1158
-	ldrb	r1, [r5, #8]	@ zero_extendqisi2
-	mov	r2, r7
-	ldr	r0, [r4, #3268]
-	mov	r10, #0
-	bl	FlashEraseBlocks
-	mov	r3, r10
-	movs	r1, #20
-.L1159:
-	uxth	r2, r10
-	cmp	r7, r2
-	bhi	.L1161
+.L1073:
+	ldr	r3, [r4, #2504]
+	cmp	r9, r3
+	bcs	.L1074
+	add	r10, r10, #7
+	ldrh	r2, [r4, #138]
+	lsr	r6, r9, r10
+	ldr	r1, [r4, #2492]
+	movs	r3, #0
+	uxth	r6, r6
+	mov	fp, #12
+.L1075:
+	uxth	r8, r3
+	cmp	r8, r2
+	bcc	.L1080
+	bl	select_l2p_ram_region
+	mul	fp, fp, r0
+	ldr	r3, [r4, #2492]
+	mov	r8, r0
+	ldrh	r1, [r3, fp]
+	add	r2, r3, fp
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1081
+	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	ble	.L1162
-	mov	r0, r8
-	bl	update_multiplier_value
-	bl	FtlBbmTblFlush
-.L1162:
-	ldrb	r2, [r5, #7]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1163
-	ldr	r3, [r4, #2324]
-	movw	r2, #65535
-	strh	r2, [r3, r6, lsl #1]	@ movhi
-	b	.L1139
-.L1149:
-	str	ip, [r3, #8]
-	movw	lr, #65535
-	str	ip, [r3, #12]
-	ldrh	r2, [r0], #2
-	cmp	r2, lr
-	beq	.L1148
-	mla	lr, r10, r7, r1
-	adds	r7, r7, #1
-	lsls	r2, r2, #10
-	uxth	r7, r7
-	str	r2, [lr, #4]
-.L1148:
-	adds	r3, r3, #20
-	b	.L1147
-.L1153:
-	movs	r3, #2
-	b	.L1173
-.L1152:
-	ldrh	r3, [r2, r6, lsl #1]
-	mov	r0, r8
-	adds	r3, r3, #1
-	strh	r3, [r2, r6, lsl #1]	@ movhi
-	ldr	r3, [r4, #2552]
+	bge	.L1081
+	bl	flush_l2p_region
+.L1081:
+	mov	r1, r8
+	mov	r0, r6
+	bl	load_l2p_region
+	b	.L1077
+.L1074:
+	mov	r0, #-1
+	cbnz	r7, .L1072
+	str	r0, [r5]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1080:
 	adds	r3, r3, #1
-	str	r3, [r4, #2552]
-	bl	ftl_set_blk_mode.part.6
-	b	.L1155
-.L1158:
-	ldr	r1, [r3, #-20]
-	ands	r1, r1, r0
-	str	r1, [r3, #-20]
-	b	.L1157
-.L1161:
-	mul	r2, r1, r10
-	ldr	r0, [r4, #3268]
-	add	ip, r0, r2
-	ldr	r2, [r0, r2]
-	adds	r0, r2, #1
-	bne	.L1160
-	ldr	r0, [ip, #4]
+	mla	r0, fp, r3, r1
+	ldrh	r0, [r0, #-12]
+	cmp	r0, r6
+	bne	.L1075
+.L1077:
+	movs	r0, #1
+	movs	r3, #12
+	lsl	r0, r0, r10
+	subs	r0, r0, #1
+	and	r0, r0, r9
+	uxth	r0, r0
+	cbnz	r7, .L1078
+	ldr	r2, [r4, #2492]
+	mla	r3, r3, r8, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r0, lsl #2]
+	str	r3, [r5]
+.L1079:
+	ldr	r2, [r4, #2492]
+	movs	r3, #12
+	mla	r8, r3, r8, r2
+	ldr	r3, [r8, #4]
+	adds	r2, r3, #1
+	beq	.L1083
 	adds	r3, r3, #1
-	str	r1, [sp, #12]
-	str	r2, [sp, #8]
-	ubfx	r0, r0, #10, #16
-	str	r3, [sp, #4]
-	bl	FtlBbmMapBadBlock
-	ldr	r2, [sp, #8]
-	ldr	r1, [sp, #12]
-	ldr	r3, [sp, #4]
-	strh	r2, [fp]	@ movhi
-	ldrb	r2, [r5, #7]	@ zero_extendqisi2
-	subs	r2, r2, #1
-	strb	r2, [r5, #7]
-.L1160:
-	add	r10, r10, #1
-	add	fp, fp, #2
-	b	.L1159
-.L1163:
-	ldrh	r3, [r4, #102]
-	strh	r8, [r5]	@ movhi
-	smulbb	r3, r3, r2
-	movs	r2, #0
-	strh	r2, [r5, #2]	@ movhi
-	strb	r2, [r5, #6]
-	ldr	r2, [r4, #2540]
-	uxth	r3, r3
-	strh	r3, [r5, #4]	@ movhi
-	str	r2, [r5, #12]
-	adds	r2, r2, #1
-	str	r2, [r4, #2540]
-	ldr	r2, [r4, #2324]
-	ldrh	r1, [r5]
-	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r5, #4]
-	cbz	r3, .L1164
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1165
-.L1164:
-	movw	r2, #2707
-	ldr	r1, .L1174+20
-	ldr	r0, .L1174+4
-	bl	sftl_printk
-.L1165:
+	str	r3, [r8, #4]
+.L1083:
 	movs	r0, #0
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1175:
+.L1072:
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1078:
+	mul	r3, r3, r8
+	ldr	r2, [r4, #2492]
+	ldr	r1, [r5]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r0, lsl #2]
+	ldr	r2, [r4, #2492]
+	strh	r6, [r4, #2496]	@ movhi
+	add	r3, r3, r2
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+	b	.L1079
+.L1086:
 	.align	2
-.L1174:
+.L1085:
 	.word	.LANCHOR0
+	.word	.LANCHOR1+410
 	.word	.LC1
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2340
-	.word	-1024
-	.word	.LANCHOR1+403
 	.fnend
-	.size	allocate_data_superblock, .-allocate_data_superblock
+	.size	log2phys, .-log2phys
 	.align	1
-	.global	FtlGcFreeBadSuperBlk
+	.global	FtlWriteDump_data
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlGcFreeBadSuperBlk, %function
-FtlGcFreeBadSuperBlk:
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r8, r0
-	ldr	r4, .L1188
-	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1177
-	movs	r7, #0
-	addw	r10, r4, #3208
-.L1178:
-	ldrh	r2, [r4, #32]
-	uxth	r3, r7
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r4, .L1105
+	ldrh	r2, [r4, #2352]
+	cmp	r2, #0
+	beq	.L1088
+	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1088
+	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
+	ldrh	r3, [r4, #102]
+	muls	r3, r1, r3
 	cmp	r2, r3
-	bhi	.L1184
-	bl	FtlGcReFreshBadBlk
-.L1177:
-	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1184:
-	uxtah	r3, r4, r7
-	mov	r1, r8
-	mov	fp, #0
-	ldrb	r0, [r3, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	mov	r9, r0
-.L1179:
-	ldrh	r3, [r4, #3206]
-	uxth	r5, fp
-	cmp	r3, r5
-	bhi	.L1183
-	adds	r7, r7, #1
-	b	.L1178
-.L1183:
-	uxth	r6, fp
-	add	r3, r4, r6, lsl #1
-	ldrh	r3, [r3, #3208]
-	cmp	r3, r9
-	bne	.L1180
-	mov	r1, r9
-	ldr	r0, .L1188+4
-	bl	sftl_printk
+	beq	.L1088
+	ldrb	r7, [r4, #2358]	@ zero_extendqisi2
+	cbnz	r7, .L1087
+	ldr	r6, [r4, #2504]
+	mov	r2, r7
+	mov	r1, sp
+	ldrh	r8, [r4, #32]
+	subs	r6, r6, #1
+	mov	r0, r6
+	bl	log2phys
+	ldr	r3, [sp]
+	ldr	r5, [r4, #3336]
+	ldr	r0, [r4, #3304]
+	str	r3, [sp, #8]
+	adds	r3, r3, #1
+	str	r6, [sp, #20]
+	str	r0, [sp, #12]
+	str	r5, [sp, #16]
+	str	r7, [r5, #4]
+	beq	.L1090
+	mov	r2, r7
+	movs	r1, #1
+	add	r0, sp, #4
+	bl	FlashReadPages
+.L1091:
+	ldr	r9, .L1105+4
+	movs	r7, #0
+	lsl	r8, r8, #2
+	mov	r10, r7
+	movw	r3, #61589
+	strh	r3, [r5]	@ movhi
+.L1092:
+	cmp	r8, r7
+	bne	.L1096
+.L1093:
+	movs	r3, #1
+.L1104:
+	strb	r3, [r4, #2358]
+.L1087:
+	add	sp, sp, #24
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1090:
+	ldrh	r2, [r4, #110]
+	movs	r1, #255
+	bl	ftl_memset
+	b	.L1091
+.L1096:
+	ldrh	r3, [r4, #2352]
+	cmp	r3, #0
+	beq	.L1093
+	ldr	r3, [sp, #8]
 	mov	r0, r9
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldrh	r1, [r4, #3206]
-	add	r3, r10, r6, lsl #1
-.L1181:
-	cmp	r5, r1
-	bcc	.L1182
-	subs	r1, r1, #1
-	strh	r1, [r4, #3206]	@ movhi
-.L1180:
-	add	fp, fp, #1
-	b	.L1179
-.L1182:
-	ldrh	r0, [r3, #2]!
-	adds	r5, r5, #1
-	uxth	r5, r5
-	strh	r0, [r3, #-2]	@ movhi
-	b	.L1181
-.L1189:
+	str	r6, [r5, #8]
+	adds	r7, r7, #1
+	str	r3, [r5, #12]
+	ldrh	r3, [r4, #2348]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2544]
+	movs	r1, #1
+	str	r0, [sp, #8]
+	add	r0, sp, #4
+	str	r3, [r5, #4]
+	adds	r3, r3, #1
+	adds	r2, r3, #1
+	it	eq
+	moveq	r3, r10
+	str	r3, [r4, #2544]
+	movs	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4, #2348]
+	bl	decrement_vpc_count
+	b	.L1092
+.L1088:
+	movs	r3, #0
+	b	.L1104
+.L1106:
 	.align	2
-.L1188:
+.L1105:
 	.word	.LANCHOR0
-	.word	.LC105
+	.word	.LANCHOR0+2348
 	.fnend
-	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	1
-	.global	update_vpc_list
+	.global	FtlReUsePrevPpa
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	update_vpc_list, %function
-update_vpc_list:
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1200
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mov	r5, r0
-	mov	r4, r2
-	ldr	r3, [r2, #2324]
-	ldrh	r3, [r3, r0, lsl #1]
-	cmp	r3, #0
-	bne	.L1191
-	ldrh	r1, [r2, #2588]
-	cmp	r1, r0
-	bne	.L1192
-	movw	r3, #65535
-	strh	r3, [r2, #2588]	@ movhi
-.L1193:
-	mov	r1, r5
-	ldr	r0, .L1200+4
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ldr	r5, .L1117
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #2324]
+	mov	r7, r0
+	ldrh	r3, [r2, r0, lsl #1]
+	cbnz	r3, .L1108
+	ldr	r4, [r5, #2340]
+	cbz	r4, .L1109
+	ldr	r1, [r5, #2316]
+	mov	ip, #6
+	ldr	r2, .L1117+4
+	movw	lr, #65535
+	ldrh	r0, [r5, #2344]
+	subs	r4, r4, r1
+	asrs	r4, r4, #1
+	muls	r4, r2, r4
+	uxth	r4, r4
+.L1110:
+	uxth	r2, r3
+	cmp	r0, r2
+	bls	.L1109
+	cmp	r4, r7
+	bne	.L1111
+	mov	r1, r4
+	ldr	r0, .L1117+8
 	bl	List_remove_node
-	ldrh	r3, [r4, #2336]
-	cbnz	r3, .L1195
-	movw	r2, #2777
-	ldr	r1, .L1200+8
-	ldr	r0, .L1200+12
+	ldrh	r3, [r5, #2344]
+	cbnz	r3, .L1112
+	movw	r2, #1733
+	ldr	r1, .L1117+12
+	ldr	r0, .L1117+16
 	bl	sftl_printk
-.L1195:
-	ldrh	r3, [r4, #2336]
-	mov	r0, r5
+.L1112:
+	ldrh	r3, [r5, #2344]
+	mov	r0, r4
 	subs	r3, r3, #1
-	strh	r3, [r4, #2336]	@ movhi
-	bl	free_data_superblock
-	mov	r0, r5
-	bl	FtlGcFreeBadSuperBlk
-	ldrh	r2, [r4, #2336]
-	ldrh	r3, [r4, #2344]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1199
-	movw	r2, #2780
-	ldr	r1, .L1200+8
-	ldr	r0, .L1200+12
-	bl	sftl_printk
-.L1199:
-	movs	r3, #1
-	b	.L1190
-.L1192:
-	ldrh	r1, [r2, #2348]
-	cmp	r1, r0
-	beq	.L1190
-	ldrh	r1, [r2, #2396]
-	cmp	r1, r0
-	beq	.L1190
-	ldrh	r2, [r2, #2444]
-	cmp	r2, r0
-	bne	.L1193
-.L1190:
-	mov	r0, r3
-	pop	{r3, r4, r5, pc}
-.L1191:
-	bl	List_update_data_list
-	movs	r3, #0
-	b	.L1190
-.L1201:
+	strh	r3, [r5, #2344]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r5, #2324]
+	ldrh	r3, [r2, r7, lsl #1]
+.L1108:
+	adds	r3, r3, #1
+	strh	r3, [r2, r7, lsl #1]	@ movhi
+	b	.L1109
+.L1111:
+	mul	r4, ip, r4
+	adds	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, lr
+	bne	.L1110
+.L1109:
+	movs	r2, #1
+	add	r1, sp, #4
+	mov	r0, r6
+	bl	log2phys
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L1118:
 	.align	2
-.L1200:
+.L1117:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2320
-	.word	.LANCHOR1+428
+	.word	-1431655765
+	.word	.LANCHOR0+2340
+	.word	.LANCHOR1+419
 	.word	.LC1
 	.fnend
-	.size	update_vpc_list, .-update_vpc_list
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	1
-	.global	decrement_vpc_count
+	.global	FtlRecoverySuperblock
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	decrement_vpc_count, %function
-decrement_vpc_count:
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	movw	r3, #65535
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	cmp	r0, r3
-	mov	r4, r0
-	ldr	r5, .L1211
-	beq	.L1203
-	ldr	r3, [r5, #2324]
-	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1204
-	mov	r1, r0
-	ldr	r0, .L1211+4
-	bl	sftl_printk
-	ldr	r3, [r5, #2324]
-	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L1205
-.L1209:
-	movs	r6, #0
-.L1202:
-	mov	r0, r6
-	pop	{r4, r5, r6, pc}
-.L1205:
-	movw	r2, #2795
-.L1210:
-	ldr	r1, .L1211+8
-	ldr	r0, .L1211+12
-	bl	sftl_printk
-	b	.L1202
-.L1204:
-	subs	r2, r2, #1
-	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L1203:
-	ldrh	r0, [r5, #3438]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L1207
-	strh	r4, [r5, #3438]	@ movhi
-	b	.L1209
-.L1207:
-	cmp	r4, r0
-	beq	.L1209
-	bl	update_vpc_list
-	ldr	r2, [r5, #2316]
-	adds	r6, r0, #0
-	ldr	r3, [r5, #2320]
-	it	ne
-	movne	r6, #1
-	strh	r4, [r5, #3438]	@ movhi
-	subs	r3, r3, r2
-	asrs	r2, r3, #1
-	ldr	r3, .L1211+16
-	muls	r3, r2, r3
-	ldr	r2, [r5, #2324]
-	uxth	r1, r3
-	ldrh	r2, [r2, r1, lsl #1]
-	cmp	r2, #0
-	bne	.L1202
-	cmp	r4, r1
-	beq	.L1202
-	movw	r2, #2811
-	b	.L1210
-.L1212:
-	.align	2
-.L1211:
-	.word	.LANCHOR0
-	.word	.LC106
-	.word	.LANCHOR1+444
-	.word	.LC1
-	.word	-1431655765
-	.fnend
-	.size	decrement_vpc_count, .-decrement_vpc_count
-	.align	1
-	.global	FtlRecoverySuperblock
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 48
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -8536,9 +7890,9 @@ FtlRecoverySuperblock:
 	sub	sp, sp, #52
 	mov	fp, r0
 	cmp	r3, r2
-	beq	.L1337
+	beq	.L1243
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1344
+	ldr	r4, .L1252
 	str	r3, [sp, #4]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp, #4]
@@ -8546,68 +7900,68 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r4, #102]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1216
+	bne	.L1122
 	strh	r3, [r0, #4]	@ movhi
-.L1342:
+.L1250:
 	strb	r3, [fp, #6]
-.L1337:
+.L1243:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1216:
+.L1122:
 	ldrh	r0, [r0, #16]
-.L1217:
+.L1123:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1218
+	beq	.L1124
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
 	mov	r5, r0
-	beq	.L1219
-	ldr	r3, [r4, #3172]
+	beq	.L1125
+	ldr	r3, [r4, #3176]
 	movs	r2, #0
 	ldrh	lr, [r4, #32]
 	movw	r9, #65535
-	ldr	r0, [r4, #3288]
+	ldr	r0, [r4, #3292]
 	mov	r10, #20
 	str	r3, [sp]
 	ldrh	r3, [r4, #110]
-	ldr	r8, [r4, #3176]
+	ldr	r8, [r4, #3180]
 	ldrh	r7, [r4, #112]
 	mov	r4, r2
 	str	r3, [sp, #8]
 	add	r3, fp, #16
 	mov	ip, r3
 	str	r3, [sp, #16]
-.L1220:
+.L1126:
 	uxth	r3, r2
 	cmp	lr, r3
-	bhi	.L1226
-	ldr	r6, .L1344
+	bhi	.L1132
+	ldr	r6, .L1252
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
 	bl	FlashReadPages
 	ldr	r3, [r6, #2544]
 	uxth	r2, r5
-	ldr	r8, [r6, #3288]
+	ldr	r8, [r6, #3292]
 	str	r2, [sp, #8]
 	subs	r3, r3, #1
 	str	r3, [sp]
 	mov	r7, r8
 	movs	r3, #0
-.L1227:
+.L1133:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1232
-	bne	.L1230
+	bhi	.L1138
+	bne	.L1136
 	adds	r3, r5, #1
 	uxth	r3, r3
 	str	r3, [sp, #12]
-.L1338:
+.L1244:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -8615,56 +7969,56 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #12]
 	str	r0, [sp, #8]
 	cmp	r3, r2
-	bne	.L1234
+	bne	.L1140
 	ldrh	r3, [sp, #12]
 	strh	r3, [fp, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [fp, #6]
 	strh	r3, [fp, #4]	@ movhi
-.L1234:
+.L1140:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bne	.L1235
+	bne	.L1141
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #20]
 	cmp	r3, r2
-	bne	.L1235
+	bne	.L1141
 	ldr	r1, [sp, #12]
 	mov	r2, r3
-.L1343:
+.L1251:
 	mov	r0, fp
 	bl	ftl_sb_update_avl_pages
-	b	.L1337
-.L1218:
+	b	.L1243
+.L1124:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [fp, r1, lsl #1]
-	b	.L1217
-.L1219:
+	b	.L1123
+.L1125:
 	ldr	r3, [sp, #4]
-	cbz	r3, .L1221
-	movw	r2, #1766
-	ldr	r1, .L1344+4
-	ldr	r0, .L1344+8
+	cbz	r3, .L1127
+	mov	r2, #1800
+	ldr	r1, .L1252+4
+	ldr	r0, .L1252+8
 	bl	sftl_printk
-.L1221:
+.L1127:
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1222
+	cbz	r3, .L1128
 	cmp	r6, r3
-	beq	.L1222
-	movw	r2, #1767
-	ldr	r1, .L1344+4
-	ldr	r0, .L1344+8
+	beq	.L1128
+	movw	r2, #1801
+	ldr	r1, .L1252+4
+	ldr	r0, .L1252+8
 	bl	sftl_printk
-.L1222:
+.L1128:
 	movs	r3, #0
 	strh	r3, [fp, #2]	@ movhi
-	b	.L1342
-.L1226:
+	b	.L1250
+.L1132:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1223
+	beq	.L1129
 	mla	r1, r10, r4, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8686,189 +8040,189 @@ FtlRecoverySuperblock:
 	str	r6, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1223:
+.L1129:
 	adds	r2, r2, #1
-	b	.L1220
-.L1232:
+	b	.L1126
+.L1138:
 	ldr	r2, [r7]
-	cbnz	r2, .L1228
+	cbnz	r2, .L1134
 	ldr	r10, [r7, #12]
 	ldr	r2, [r10, #4]
 	adds	r0, r2, #1
-	beq	.L1229
+	beq	.L1135
 	ldr	r1, [r6, #2544]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1229
+	cbz	r0, .L1135
 	adds	r2, r2, #1
 	str	r2, [r6, #2544]
-.L1229:
+.L1135:
 	ldr	r2, [r10]
 	adds	r2, r2, #1
-	bne	.L1231
-.L1230:
+	bne	.L1137
+.L1136:
 	uxth	r2, r5
 	uxth	r3, r3
 	str	r2, [sp, #12]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1338
-.L1228:
+	b	.L1244
+.L1134:
 	ldr	r9, [sp, #8]
-.L1231:
+.L1137:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1227
-.L1235:
+	b	.L1133
+.L1141:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1236
+	bne	.L1142
 	ldrb	r3, [fp, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1237
-.L1236:
-	ldr	r3, [r6, #3448]
+	bne	.L1143
+.L1142:
+	ldr	r3, [r6, #3452]
 	uxth	r7, r5
 	uxth	r5, r5
 	movw	r8, #65535
 	adds	r3, r3, #1
 	itt	eq
 	ldreq	r3, [sp]
-	streq	r3, [r6, #3448]
+	streq	r3, [r6, #3452]
 	ldr	r3, [sp, #4]
-	ldr	r6, .L1344
+	ldr	r6, .L1252
 	adds	r3, r3, #7
 	cmp	r5, r3
 	itet	gt
 	subgt	r4, r7, #7
 	ldrle	r4, [sp, #4]
 	uxthgt	r4, r4
-.L1240:
+.L1146:
 	cmp	r4, r7
-	bhi	.L1247
+	bhi	.L1153
 	movs	r3, #0
 	ldrh	lr, [r6, #32]
-	ldr	r0, [r6, #3288]
+	ldr	r0, [r6, #3292]
 	mov	r5, r3
 	ldr	r1, [sp, #16]
 	mov	ip, #20
-	b	.L1248
-.L1242:
+	b	.L1154
+.L1148:
 	ldrh	r2, [r1], #2
 	cmp	r2, r8
-	beq	.L1241
+	beq	.L1147
 	mla	r9, ip, r5, r0
 	adds	r5, r5, #1
 	orr	r2, r4, r2, lsl #10
 	uxth	r5, r5
 	str	r2, [r9, #4]
-.L1241:
+.L1147:
 	adds	r3, r3, #1
-.L1248:
+.L1154:
 	uxth	r2, r3
-	cmp	r2, lr
-	bcc	.L1242
+	cmp	lr, r2
+	bhi	.L1148
 	movs	r2, #0
 	mov	r1, r5
 	bl	FlashReadPages
-	ldr	r3, [r6, #3288]
+	ldr	r3, [r6, #3292]
 	movs	r2, #20
 	mla	r5, r2, r5, r3
-.L1243:
+.L1149:
 	cmp	r5, r3
-	bne	.L1246
+	bne	.L1152
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1240
-.L1246:
+	b	.L1146
+.L1152:
 	ldr	r2, [r3]
-	cbnz	r2, .L1237
+	cbnz	r2, .L1143
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r8
-	beq	.L1245
+	beq	.L1151
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
-	strne	r2, [r6, #3448]
-.L1245:
+	strne	r2, [r6, #3452]
+.L1151:
 	adds	r3, r3, #20
-	b	.L1243
-.L1247:
+	b	.L1149
+.L1153:
 	mov	r3, #-1
-	str	r3, [r6, #3448]
-.L1237:
-	ldr	r10, .L1344
+	str	r3, [r6, #3452]
+.L1143:
+	ldr	r10, .L1252
 	movs	r3, #1
 	ldr	r5, [sp, #4]
 	mov	r4, r10
-	strh	r3, [r10, #3520]	@ movhi
-.L1249:
+	strh	r3, [r10, #3476]	@ movhi
+.L1155:
 	ldrh	r6, [r4, #32]
 	movs	r3, #0
-	ldr	r0, [r4, #3288]
+	ldr	r0, [r4, #3292]
 	mov	r9, r3
 	ldr	r1, [sp, #16]
 	movw	r7, #65535
 	mov	ip, #20
-.L1250:
+.L1156:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1252
+	bhi	.L1158
 	movs	r2, #0
 	mov	r1, r9
 	bl	FlashReadPages
 	movs	r3, #0
-.L1341:
+.L1249:
 	str	r3, [sp, #24]
 	ldrh	r3, [sp, #24]
 	cmp	r9, r3
-	bhi	.L1281
+	bhi	.L1190
 	adds	r5, r5, #1
 	ldrh	r3, [r4, #102]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1249
+	bne	.L1155
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [fp, #2]	@ movhi
 	strh	r3, [fp, #4]	@ movhi
-.L1282:
+.L1191:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1337
+	bcs	.L1243
 	ldr	r1, [sp, #16]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
 	str	r1, [sp, #16]
 	add	r1, r3, #1
-	bne	.L1342
+	bne	.L1250
 	mov	r3, r1
-	b	.L1282
-.L1252:
+	b	.L1191
+.L1158:
 	ldrh	r2, [r1], #2
 	cmp	r2, r7
-	beq	.L1251
+	beq	.L1157
 	mla	lr, ip, r9, r0
 	orr	r2, r5, r2, lsl #10
 	str	r2, [lr, #4]
 	add	r2, r9, #1
 	uxth	r9, r2
-.L1251:
+.L1157:
 	adds	r3, r3, #1
-	b	.L1250
-.L1345:
+	b	.L1156
+.L1253:
 	.align	2
-.L1344:
+.L1252:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+464
+	.word	.LANCHOR1+435
 	.word	.LC1
-.L1281:
+.L1190:
 	ldr	r3, [sp, #24]
 	movs	r7, #20
 	muls	r7, r3, r7
-	ldr	r3, [r4, #3288]
+	ldr	r3, [r4, #3292]
 	str	r3, [sp, #28]
 	add	r8, r3, r7
 	ldr	r6, [r8, #4]
@@ -8877,54 +8231,54 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp, #4]
 	cmp	r5, r3
-	bcc	.L1254
+	bcc	.L1160
 	ldr	r3, [sp, #28]
-	bne	.L1255
+	bne	.L1161
 	ldr	r2, [sp, #20]
 	cmp	r2, r0
-	bhi	.L1254
-.L1255:
+	bhi	.L1160
+.L1161:
 	ldr	r2, [sp, #12]
 	cmp	r5, r2
-	bne	.L1256
+	bne	.L1162
 	ldr	r2, [sp, #8]
 	cmp	r2, r0
-	beq	.L1257
-.L1256:
+	beq	.L1163
+.L1162:
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1258
+	beq	.L1164
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	beq	.L1259
+	beq	.L1165
 	ldrh	r0, [fp]
-.L1339:
+.L1247:
 	bl	decrement_vpc_count
-	b	.L1254
-.L1259:
+	b	.L1160
+.L1165:
 	ldr	r3, [r8, #4]
 	adds	r6, r3, #1
 	str	r3, [sp]
-	beq	.L1260
+	beq	.L1166
 	ldr	r1, [r4, #2544]
 	mov	r0, r3
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1260
+	cbz	r0, .L1166
 	ldr	r3, [sp]
 	adds	r3, r3, #1
 	str	r3, [r4, #2544]
-.L1260:
+.L1166:
 	ldrh	r2, [r8]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1261
-	movw	r2, #1918
-	ldr	r1, .L1346
-	ldr	r0, .L1346+4
+	beq	.L1167
+	mov	r2, #1952
+	ldr	r1, .L1254
+	ldr	r0, .L1254+4
 	bl	sftl_printk
-.L1261:
+.L1167:
 	ldr	r6, [r8, #8]
 	add	r1, sp, #40
 	ldr	r3, [r8, #12]
@@ -8932,607 +8286,984 @@ FtlRecoverySuperblock:
 	mov	r0, r6
 	str	r3, [sp, #36]
 	bl	log2phys
-	ldr	r1, [r4, #3448]
+	ldr	r1, [r4, #3452]
 	adds	r0, r1, #1
-	beq	.L1262
+	beq	.L1168
 	ldr	r0, [sp]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1262
+	beq	.L1168
 	ldr	r3, [sp, #36]
 	adds	r2, r3, #1
-	beq	.L1263
-	ldr	r0, [r4, #3288]
+	beq	.L1169
+	ldr	r0, [r4, #3292]
 	movs	r2, #0
 	movs	r1, #1
 	add	r0, r0, r7
 	str	r3, [r0, #4]
 	ldr	r8, [r0, #12]
 	bl	FlashReadPages
-	ldr	r2, [r4, #3288]
+	ldr	r2, [r4, #3292]
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1264
-.L1265:
+	bne	.L1170
+.L1171:
 	mov	r3, #-1
 	str	r3, [sp, #36]
-.L1272:
+.L1178:
 	ldr	r0, [sp, #36]
 	adds	r1, r0, #1
-	beq	.L1254
-.L1285:
+	beq	.L1160
+.L1194:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #40]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1277
-	movw	r2, #2019
-	ldr	r1, .L1346
-	ldr	r0, .L1346+4
+	bhi	.L1186
+	movw	r2, #2065
+	ldr	r1, .L1254
+	ldr	r0, .L1254+4
 	bl	sftl_printk
-.L1277:
+.L1186:
 	ldr	r3, [r10, #2324]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1278
+	beq	.L1187
 	mov	r0, r6
-	b	.L1339
-.L1263:
+	b	.L1247
+.L1169:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	bne	.L1254
+	bne	.L1160
 	movs	r2, #1
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-.L1254:
+.L1160:
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	b	.L1341
-.L1264:
+	b	.L1249
+.L1170:
 	ldr	r1, [r8, #8]
 	cmp	r6, r1
-	bne	.L1265
+	bne	.L1171
 	ldr	r1, [r8, #4]
-	ldr	r0, [r4, #3448]
+	ldr	r0, [r4, #3452]
 	str	r1, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1265
+	beq	.L1171
 	ldr	r1, [sp, #40]
 	ldr	r0, [sp, #44]
 	cmp	r1, r0
-	bne	.L1267
-.L1270:
+	bne	.L1173
+.L1176:
 	ldr	r1, [sp, #36]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1265
-.L1267:
+	b	.L1171
+.L1173:
 	ldr	r0, [sp, #36]
 	cmp	r1, r0
-	beq	.L1265
+	beq	.L1171
 	adds	r0, r1, #1
-	beq	.L1268
+	beq	.L1174
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r8, [r3, #12]
 	bl	FlashReadPages
-.L1269:
-	ldr	r3, [r4, #3288]
+.L1175:
+	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1270
+	beq	.L1176
 	ldr	r3, [r8, #4]
-	ldr	r0, [r4, #3448]
+	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1270
+	beq	.L1176
 	mov	r1, r3
 	ldr	r0, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1265
-	b	.L1270
-.L1268:
+	beq	.L1171
+	b	.L1176
+.L1174:
 	str	r1, [r2, r7]
-	b	.L1269
-.L1262:
+	b	.L1175
+.L1168:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	beq	.L1272
+	beq	.L1178
+	ldr	r3, [sp, #36]
+	ldr	r2, [r4, #48]
+	cmp	r2, r3, lsr #10
+	bhi	.L1180
+	adds	r3, r3, #1
+.L1246:
+	bne	.L1160
 	movs	r2, #1
 	add	r1, sp, #44
 	mov	r0, r6
 	bl	log2phys
 	ldr	r8, [sp, #40]
 	cmp	r8, #-1
-	beq	.L1272
+	beq	.L1178
 	ldr	r3, [sp, #36]
 	cmp	r8, r3
-	beq	.L1275
+	beq	.L1184
 	ubfx	r0, r8, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r0
-	beq	.L1276
+	beq	.L1185
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r0
-	beq	.L1276
+	beq	.L1185
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r0
-	bne	.L1272
-.L1276:
-	ldr	r0, [r10, #3288]
+	bne	.L1178
+.L1185:
+	ldr	r0, [r10, #3292]
 	movs	r2, #0
 	movs	r1, #1
 	str	r8, [r0, #4]
 	ldr	r7, [r0, #12]
 	bl	FlashReadPages
-	ldr	r3, [r10, #3288]
+	ldr	r3, [r10, #3292]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1272
+	beq	.L1178
 	ldr	r1, [r7, #4]
 	ldr	r0, [sp]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1272
+	bne	.L1178
 	movs	r2, #1
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	b	.L1272
-.L1278:
+	b	.L1178
+.L1180:
+	ldr	r0, [r4, #3292]
+	movs	r2, #0
+	movs	r1, #1
+	ldr	r7, [r0, #12]
+	str	r3, [r0, #4]
+	bl	FlashReadPages
+	ldr	r3, [r7, #8]
+	cmp	r6, r3
+	bne	.L1160
+	ldrh	r2, [r7]
+	movw	r3, #61589
+	cmp	r2, r3
+	b	.L1246
+.L1187:
 	mov	r1, r6
-	ldr	r0, .L1346+8
+	ldr	r0, .L1254+8
 	bl	sftl_printk
-	b	.L1254
-.L1258:
-	ldr	r3, [r4, #3524]
+	b	.L1160
+.L1164:
+	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	itttt	ls
 	addls	r2, r4, r3, lsl #2
 	addls	r3, r3, #1
-	strls	r3, [r4, #3524]
-	strls	r6, [r2, #3528]
+	strls	r3, [r4, #3480]
+	strls	r6, [r2, #3484]
 	ldrh	r0, [fp]
 	bl	decrement_vpc_count
-	ldr	r3, [r4, #3448]
+	ldr	r3, [r4, #3452]
 	adds	r2, r3, #1
-	bne	.L1280
+	bne	.L1189
 	ldr	r3, [sp]
-.L1340:
-	str	r3, [r4, #3448]
-	b	.L1254
-.L1280:
+.L1248:
+	str	r3, [r4, #3452]
+	b	.L1160
+.L1189:
 	ldr	r2, [sp]
 	cmp	r2, r3
-	bcs	.L1254
+	bcs	.L1160
 	mov	r3, r2
-	b	.L1340
-.L1257:
+	b	.L1248
+.L1163:
 	ldrb	r3, [sp, #8]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [fp, #2]	@ movhi
 	ldr	r2, [sp, #8]
 	strb	r3, [fp, #6]
-	b	.L1343
-.L1275:
+	b	.L1251
+.L1184:
 	mov	r0, r8
-	b	.L1285
-.L1347:
+	b	.L1194
+.L1255:
 	.align	2
-.L1346:
-	.word	.LANCHOR1+464
+.L1254:
+	.word	.LANCHOR1+435
 	.word	.LC1
-	.word	.LC107
+	.word	.LC100
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	1
-	.global	FtlWriteDump_data
+	.global	ftl_check_vpc
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #24
-	sub	sp, sp, #24
-	ldr	r4, .L1366
-	ldrh	r2, [r4, #2352]
-	cmp	r2, #0
-	beq	.L1349
-	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1349
-	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
-	ldrh	r3, [r4, #102]
-	muls	r3, r1, r3
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	movs	r4, #0
+	ldr	r6, .L1280
+	ldr	r7, .L1280+4
+	ldr	r1, .L1280+8
+	mov	r5, r6
+	ldr	r0, .L1280+12
+	bl	sftl_printk
+	mov	r1, #8192
+	ldr	r0, .L1280+4
+	bl	__memzero
+.L1257:
+	ldr	r3, [r6, #2504]
+	cmp	r4, r3
+	bcc	.L1259
+	ldr	r8, .L1280+4
+	movs	r4, #0
+	ldr	r10, .L1280+24
+	mov	r7, r4
+	movw	r9, #65535
+.L1260:
+	ldrh	r2, [r5, #40]
+	uxth	r3, r4
 	cmp	r2, r3
-	beq	.L1349
-	ldrb	r7, [r4, #2358]	@ zero_extendqisi2
-	cbnz	r7, .L1348
-	ldr	r6, [r4, #2504]
-	mov	r2, r7
-	mov	r1, sp
-	ldrh	r8, [r4, #32]
-	subs	r6, r6, #1
-	mov	r0, r6
+	bhi	.L1262
+	ldr	r4, [r5, #2340]
+	cbz	r4, .L1263
+	ldr	r3, [r5, #2316]
+	movs	r6, #0
+	ldrh	r8, [r5, #2344]
+	mov	fp, #6
+	ldr	r9, .L1280+4
+	subs	r4, r4, r3
+	ldr	r3, .L1280+16
+	asrs	r4, r4, #1
+	ldr	r10, .L1280+28
+	muls	r4, r3, r4
+	uxth	r4, r4
+.L1264:
+	uxth	r3, r6
+	cmp	r8, r3
+	bls	.L1263
+	ldr	r3, [r5, #2324]
+	ldrh	r2, [r3, r4, lsl #1]
+	cbz	r2, .L1265
+	movs	r7, #1
+	ldrh	r3, [r9, r4, lsl #1]
+	mov	r1, r4
+	mov	r0, r10
+	bl	sftl_printk
+.L1265:
+	mul	r4, fp, r4
+	ldr	r3, [r5, #2316]
+	adds	r6, r6, #1
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L1264
+.L1263:
+	cbz	r7, .L1256
+	movw	r2, #2389
+	ldr	r1, .L1280+8
+	ldr	r0, .L1280+20
+	bl	sftl_printk
+.L1256:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1259:
+	movs	r2, #0
+	add	r1, sp, #4
+	mov	r0, r4
 	bl	log2phys
-	ldr	r3, [sp]
-	ldr	r5, [r4, #3332]
-	ldr	r0, [r4, #3300]
-	str	r3, [sp, #8]
+	ldr	r0, [sp, #4]
+	adds	r3, r0, #1
+	beq	.L1258
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r7, r0, lsl #1]
 	adds	r3, r3, #1
-	str	r6, [sp, #20]
-	str	r0, [sp, #12]
-	str	r5, [sp, #16]
-	str	r7, [r5, #4]
-	beq	.L1351
-	mov	r2, r7
-	movs	r1, #1
-	add	r0, sp, #4
-	bl	FlashReadPages
-.L1352:
-	ldr	r9, .L1366+4
-	movs	r7, #0
-	lsl	r8, r8, #2
-	mov	r10, r7
-	movw	r3, #61589
-	strh	r3, [r5]	@ movhi
-.L1353:
-	cmp	r8, r7
-	bne	.L1357
-.L1354:
-	movs	r3, #1
-.L1365:
-	strb	r3, [r4, #2358]
-.L1348:
-	add	sp, sp, #24
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1351:
-	ldrh	r2, [r4, #110]
-	movs	r1, #255
-	bl	ftl_memset
-	b	.L1352
-.L1357:
-	ldrh	r3, [r4, #2352]
-	cmp	r3, #0
-	beq	.L1354
-	ldr	r3, [sp, #8]
-	mov	r0, r9
-	str	r6, [r5, #8]
-	adds	r7, r7, #1
-	str	r3, [r5, #12]
-	ldrh	r3, [r4, #2348]
-	strh	r3, [r5, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	r3, [r4, #2544]
-	movs	r1, #1
-	str	r0, [sp, #8]
-	add	r0, sp, #4
-	str	r3, [r5, #4]
-	adds	r3, r3, #1
-	adds	r2, r3, #1
-	it	eq
-	moveq	r3, r10
-	str	r3, [r4, #2544]
-	movs	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r4, #2348]
-	bl	decrement_vpc_count
-	b	.L1353
-.L1349:
-	movs	r3, #0
-	b	.L1365
-.L1367:
-	.align	2
-.L1366:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2348
-	.fnend
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
-	.align	1
-	.global	l2p_flush
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	l2p_flush, %function
-l2p_flush:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movs	r4, #0
-	ldr	r5, .L1372
-	movs	r6, #12
-	bl	FtlWriteDump_data
-.L1369:
-	ldrh	r3, [r5, #138]
-	uxth	r0, r4
-	cmp	r3, r0
-	bhi	.L1371
-	movs	r0, #0
-	pop	{r4, r5, r6, pc}
-.L1371:
-	ldr	r2, [r5, #2492]
-	uxth	r3, r4
-	mla	r3, r6, r3, r2
-	ldr	r3, [r3, #4]
-	cmp	r3, #0
-	bge	.L1370
-	bl	flush_l2p_region
-.L1370:
+	strh	r3, [r7, r0, lsl #1]	@ movhi
+.L1258:
 	adds	r4, r4, #1
-	b	.L1369
-.L1373:
+	b	.L1257
+.L1262:
+	ldr	r3, [r5, #2324]
+	uxth	r6, r4
+	ldrh	r2, [r3, r6, lsl #1]
+	ldrh	r3, [r8, r6, lsl #1]
+	cmp	r2, r3
+	beq	.L1261
+	mov	r1, r6
+	mov	r0, r10
+	bl	sftl_printk
+	ldr	r3, [r5, #2324]
+	ldrh	r3, [r3, r6, lsl #1]
+	cmp	r3, r9
+	beq	.L1261
+	ldrh	r2, [r8, r6, lsl #1]
+	cmp	r2, r3
+	it	hi
+	movhi	r7, #1
+.L1261:
+	adds	r4, r4, #1
+	b	.L1260
+.L1281:
 	.align	2
-.L1372:
+.L1280:
 	.word	.LANCHOR0
+	.word	check_vpc_table
+	.word	.LANCHOR1+457
+	.word	.LC101
+	.word	-1431655765
+	.word	.LC1
+	.word	.LC102
+	.word	.LC103
 	.fnend
-	.size	l2p_flush, .-l2p_flush
+	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	1
-	.global	FtlSuperblockPowerLostFix
+	.global	ftl_scan_all_data
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	.pad #24
-	sub	sp, sp, #24
-	ldr	r5, .L1387
-	mov	r3, #-1
-	movs	r7, #0
-	movw	r1, #61589
-	str	r3, [sp, #20]
-	mov	r4, r0
-	ldr	r2, [r5, #3300]
-	ldr	r6, [r5, #3332]
-	str	r2, [sp, #12]
-	mvn	r2, #2
-	str	r6, [sp, #16]
-	str	r2, [r6, #8]
-	mvn	r2, #1
-	str	r2, [r6, #12]
-	ldrh	r2, [r0]
-	strh	r7, [r6]	@ movhi
-	strh	r2, [r6, #2]	@ movhi
-	ldr	r2, [r5, #3300]
-	str	r1, [r2]
-	add	r1, r1, #304087040
-	ldr	r2, [r5, #3300]
-	add	r1, r1, #1269760
-	addw	r1, r1, #1507
-	str	r1, [r2, #4]
-	ldrh	r2, [r0, #4]
-	tst	r2, #1
-	ite	eq
-	moveq	r8, #6
-	movne	r8, #7
-.L1380:
-	ldrh	r3, [r4, #4]
-	cbnz	r3, .L1376
-.L1377:
-	ldr	r2, [r5, #2324]
-	ldrh	r1, [r4]
-	ldrh	r0, [r4, #4]
-	ldrh	r3, [r2, r1, lsl #1]
-	subs	r3, r3, r0
-	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r5, #102]
-	strh	r3, [r4, #2]	@ movhi
-	movs	r3, #0
-	strb	r3, [r4, #6]
-	strh	r3, [r4, #4]	@ movhi
-	add	sp, sp, #24
+	movs	r5, #0
+	ldr	r6, .L1296
+	.pad #32
+	sub	sp, sp, #32
+	movs	r1, #0
+	ldr	r8, .L1296+16
+	mov	r4, r6
+	ldr	r0, .L1296+4
+	bl	sftl_printk
+.L1283:
+	ldr	r3, [r6, #2504]
+	cmp	r5, r3
+	bcc	.L1289
+	add	sp, sp, #32
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1376:
-	mov	r0, r4
-	bl	get_new_active_ppa
-	str	r0, [sp, #8]
-	adds	r0, r0, #1
-	beq	.L1377
-	ldr	r3, [r5, #2544]
+.L1289:
+	movs	r2, #0
+	add	r1, sp, #28
+	mov	r0, r5
+	bl	log2phys
+	ubfx	r3, r5, #0, #11
+	cbnz	r3, .L1284
+	ldr	r2, [sp, #28]
+	mov	r1, r5
+	mov	r0, r8
+	bl	sftl_printk
+.L1284:
+	ldr	r3, [sp, #28]
+	adds	r2, r3, #1
+	beq	.L1286
+	str	r3, [r4, #3460]
+	movs	r2, #0
+	ldr	r3, [r4, #3304]
 	movs	r1, #1
-	add	r0, sp, #4
-	str	r3, [r6, #4]
+	ldr	r7, [r4, #3336]
+	ldr	r0, .L1296+8
+	str	r3, [r4, #3464]
+	str	r5, [r4, #3472]
+	str	r7, [r4, #3468]
+	str	r2, [r4, #3456]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3456]
+	cmp	r3, #256
+	beq	.L1287
 	adds	r3, r3, #1
-	adds	r2, r3, #1
-	it	eq
-	moveq	r3, r7
-	str	r3, [r5, #2544]
-	movs	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r4]
-	bl	decrement_vpc_count
-	subs	r8, r8, #1
-	bne	.L1380
-	b	.L1377
-.L1388:
+	beq	.L1287
+	ldr	r3, [r7, #8]
+	cmp	r5, r3
+	beq	.L1286
+.L1287:
+	ldr	r2, [r4, #3464]
+	ldr	r3, [r4, #3468]
+	ldr	r0, .L1296+12
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	mov	r1, r5
+	ldr	r2, [r2]
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp]
+	ldr	r3, [r3]
+	ldr	r2, [r4, #3460]
+	bl	sftl_printk
+.L1286:
+	adds	r5, r5, #1
+	b	.L1283
+.L1297:
 	.align	2
-.L1387:
+.L1296:
 	.word	.LANCHOR0
+	.word	.LC104
+	.word	.LANCHOR0+3456
+	.word	.LC106
+	.word	.LC105
 	.fnend
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	1
-	.global	FtlVendorPartWrite
+	.global	FtlGcScanTempBlk
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlVendorPartWrite, %function
-FtlVendorPartWrite:
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 104
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1333
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r10, r2
-	ldr	r4, .L1401
-	adds	r2, r0, r1
-	.pad #108
-	sub	sp, sp, #108
-	mov	r8, r0
-	mov	r6, r1
-	ldrh	r3, [r4, #96]
-	cmp	r2, r3
-	bhi	.L1397
-	ldrh	r7, [r4, #108]
-	mov	r9, #0
-	lsr	r7, r0, r7
-	lsl	fp, r7, #2
-.L1391:
-	cbnz	r6, .L1396
-.L1389:
-	mov	r0, r9
-	add	sp, sp, #108
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1396:
-	ldr	r3, [r4, #3372]
-	mov	r0, r8
-	ldr	r2, [r3, fp]
-	ldrh	r3, [r4, #58]
-	str	r2, [sp, #12]
-	mov	r1, r3
-	str	r3, [sp, #8]
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #8]
-	ldr	r2, [sp, #12]
-	str	r1, [sp, #4]
-	subs	r5, r3, r1
-	uxth	r5, r5
-	cmp	r6, r5
-	it	cc
-	uxthcc	r5, r6
-	cbz	r2, .L1393
-	cmp	r5, r3
-	beq	.L1393
-	ldr	r3, [r4, #3308]
-	add	r0, sp, #20
-	str	r2, [sp, #24]
-	movs	r2, #1
-	mov	r1, r2
-	str	r3, [sp, #28]
-	add	r3, sp, #40
-	str	r3, [sp, #32]
-	bl	FlashReadPages
-.L1394:
-	lsls	r3, r5, #9
-	ldr	r0, [r4, #3308]
-	mov	r1, r10
-	mov	r2, r3
+	.pad #52
+	sub	sp, sp, #52
+	mov	r5, r0
+	str	r1, [sp, #12]
+	ldrh	r6, [r3, #4]
+	movw	r3, #65535
+	cmp	r6, r3
+	beq	.L1325
+	cbnz	r6, .L1299
+.L1300:
+	bl	FtlGcPageVarInit
+	b	.L1301
+.L1325:
+	movs	r6, #0
+.L1299:
+	ldr	r3, .L1333+4
+	ldr	r2, [sp, #12]
+	ldrh	r3, [r3, #102]
+	cmp	r3, r2
+	beq	.L1300
+.L1301:
+	movw	r9, #65535
+	movs	r3, #0
+	str	r3, [sp, #4]
+.L1302:
+	movs	r3, #0
+	strb	r3, [r5, #8]
+	ldrh	r3, [r5]
+	cmp	r3, r9
+	beq	.L1303
+	ldr	r4, .L1333+4
+.L1322:
+	ldr	r3, [r4, #3292]
+	movs	r2, #0
+	ldrh	ip, [r4, #32]
+	add	lr, r5, #16
+	ldrh	fp, [r4, #110]
+	mov	r7, r2
 	str	r3, [sp, #8]
-	ldr	r3, [sp, #4]
-	subs	r6, r6, r5
-	add	r8, r8, r5
-	add	fp, fp, #4
-	add	r0, r0, r3, lsl #9
-	bl	ftl_memcpy
+	mov	r8, #20
+	ldr	r3, [r4, #3176]
+	ldr	r10, [r4, #3180]
+	str	r3, [sp, #16]
+	ldrh	r3, [r4, #112]
+	str	r3, [sp, #20]
+.L1304:
+	uxth	r3, r2
+	cmp	ip, r3
+	bhi	.L1308
+	mov	fp, #0
+	movs	r2, #0
 	mov	r1, r7
-	ldr	r2, [r4, #3308]
-	ldr	r0, .L1401+4
-	adds	r7, r7, #1
-	bl	FtlMapWritePage
-	ldr	r3, [sp, #8]
-	adds	r0, r0, #1
-	it	eq
-	moveq	r9, #-1
-	add	r10, r10, r3
-	b	.L1391
-.L1393:
-	ldrh	r2, [r4, #110]
+	ldr	r0, [sp, #8]
+	bl	FlashReadPages
+.L1309:
+	uxth	r3, fp
+	cmp	r7, r3
+	bhi	.L1320
+	ldr	r3, [sp, #4]
+	adds	r6, r6, #1
+	uxth	r6, r6
+	adds	r3, r3, #1
+	str	r3, [sp, #4]
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #12]
+	cmp	r3, r2
+	bls	.L1321
+.L1323:
+	ldrh	r3, [r4, #102]
+	cmp	r3, r6
+	bhi	.L1322
+.L1303:
+	ldr	r3, .L1333
+	movw	r2, #65535
+	strh	r6, [r5, #2]	@ movhi
+	mov	r1, r6
+	mov	r0, r5
+	strh	r2, [r3, #4]	@ movhi
+	movs	r2, #0
+	strb	r2, [r5, #6]
+	bl	ftl_sb_update_avl_pages
+	b	.L1324
+.L1308:
+	ldrh	r3, [lr], #2
+	cmp	r3, r9
+	beq	.L1305
+	ldr	r1, [sp, #8]
+	orr	r3, r6, r3, lsl #10
+	mla	r1, r8, r7, r1
+	str	r3, [r1, #4]
+	mov	r3, fp
+	muls	r3, r7, r3
+	it	mi
+	addmi	r3, r3, #3
+	bic	r3, r3, #3
+	mov	r0, r3
+	ldr	r3, [sp, #16]
+	add	r0, r0, r3
+	ldr	r3, [sp, #20]
+	muls	r3, r7, r3
+	add	r7, r7, #1
+	it	mi
+	addmi	r3, r3, #3
+	uxth	r7, r7
+	bic	r3, r3, #3
+	str	r0, [r1, #8]
+	add	r3, r3, r10
+	str	r3, [r1, #12]
+.L1305:
+	adds	r2, r2, #1
+	b	.L1304
+.L1320:
+	movs	r3, #20
+	ldr	r1, [r4, #3292]
+	mul	r3, r3, fp
+	adds	r2, r1, r3
+	ldr	r8, [r1, r3]
+	ldr	r0, [r2, #4]
+	str	r0, [sp, #8]
+	cmp	r8, #0
+	bne	.L1310
+	ldr	r10, [r2, #12]
+	ldrh	r2, [r10]
+	cmp	r2, r9
+	bne	.L1311
+.L1310:
+	ldrh	r2, [r5]
 	movs	r1, #0
-	ldr	r0, [r4, #3308]
-	bl	ftl_memset
-	b	.L1394
-.L1397:
-	mov	r9, #-1
-	b	.L1389
-.L1402:
+	ldr	r3, [r4, #2324]
+	movs	r6, #0
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	ldrh	r0, [r5]
+	bl	INSERT_FREE_LIST
+	strh	r9, [r5]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1302
+.L1311:
+	ldr	r0, [r10, #8]
+	ldr	r2, [r4, #2504]
+	str	r3, [sp, #16]
+	cmp	r0, r2
+	bhi	.L1310
+	mov	r2, r8
+	add	r1, sp, #24
+	bl	log2phys
+	ldr	r2, [r10, #12]
+	ldr	r1, [sp, #24]
+	ldr	r3, [sp, #16]
+	cmp	r2, r1
+	beq	.L1314
+.L1315:
+	ldr	r2, [r10, #8]
+	add	fp, fp, #1
+	ldr	r1, [sp, #8]
+	ldr	r0, [r10, #12]
+	bl	FtlGcUpdatePage
+	b	.L1309
+.L1314:
+	str	r3, [sp, #16]
+	adds	r3, r2, #1
+	beq	.L1315
+	str	r2, [sp, #32]
+	movs	r1, #1
+	ldr	r2, [r4, #3320]
+	add	r0, sp, #28
+	str	r2, [sp, #36]
+	ldr	r2, [r4, #3340]
+	str	r2, [sp, #40]
+	mov	r2, r8
+	bl	FlashReadPages
+	ldrh	r2, [r4, #58]
+	ldr	r1, [r4, #3292]
+	ldr	r3, [sp, #16]
+	ldr	r0, [sp, #36]
+	lsls	r2, r2, #7
+	add	ip, r3, r1
+.L1316:
+	cmp	r8, r2
+	beq	.L1315
+	ldr	r1, [ip, #8]
+	ldr	r3, [r0, r8, lsl #2]
+	ldr	r1, [r1, r8, lsl #2]
+	cmp	r1, r3
+	beq	.L1317
+	ldr	r2, [sp, #32]
+	ldrh	r1, [r5]
+	ldr	r0, .L1333+8
+	bl	sftl_printk
+	b	.L1310
+.L1317:
+	add	r8, r8, #1
+	b	.L1316
+.L1321:
+	ldr	r2, .L1333
+	ldrh	r3, [r2, #4]
+	cmp	r3, r9
+	beq	.L1323
+	ldr	r1, [sp, #4]
+	add	r3, r3, r1
+	strh	r3, [r2, #4]	@ movhi
+	ldrh	r3, [r4, #102]
+	cmp	r3, r6
+	bls	.L1323
+.L1324:
+	mov	r0, #-1
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1334:
 	.align	2
-.L1401:
+.L1333:
+	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3476
+	.word	.LC107
 	.fnend
-	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	1
-	.global	Ftl_save_ext_data
+	.global	FtlReadRefresh
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	Ftl_save_ext_data, %function
-Ftl_save_ext_data:
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r2, .L1405
-	ldr	r3, .L1405+4
-	ldr	r1, [r2, #2636]
-	cmp	r1, r3
-	bne	.L1403
-	ldr	r3, .L1405+8
-	addw	r2, r2, #2636
+	ldr	r3, .L1348
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #88
+	sub	sp, sp, #88
+	mov	r4, r3
+	ldr	r0, [r3, #2720]
+	cmp	r0, #0
+	beq	.L1336
+	ldr	r1, [r3, #2724]
+	ldr	r2, [r3, #2504]
+	cmp	r1, r2
+	bcs	.L1337
+	mov	r5, #2048
+.L1342:
+	ldr	r0, [r4, #2724]
+	ldr	r3, [r4, #2504]
+	cmp	r0, r3
+	bcs	.L1339
+	movs	r2, #0
+	mov	r1, sp
+	bl	log2phys
+	ldr	r2, [sp]
+	ldr	r3, [r4, #2724]
+	adds	r1, r2, #1
+	add	r3, r3, #1
+	str	r3, [r4, #2724]
+	beq	.L1340
+	str	r3, [sp, #20]
+	add	r0, sp, #88
+	ldr	r3, [r4, #3328]
 	movs	r1, #1
+	str	r2, [sp, #8]
+	movs	r2, #0
+	str	r2, [r0, #-84]!
+	str	r3, [sp, #12]
+	add	r3, sp, #24
+	str	r3, [sp, #16]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmp	r3, #256
+	bne	.L1339
+	ldr	r0, [sp]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1339:
+	mov	r0, #-1
+.L1335:
+	add	sp, sp, #88
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L1340:
+	subs	r5, r5, #1
+	bne	.L1342
+	b	.L1339
+.L1337:
+	ldr	r2, [r3, #2508]
 	movs	r0, #0
-	str	r3, [r2, #4]
-	ldr	r3, [r2, #-104]
-	str	r3, [r2, #88]
-	ldr	r3, [r2, #-100]
-	str	r3, [r2, #92]
-	ldr	r3, [r2, #-108]
+	str	r0, [r3, #2720]
+	str	r0, [r3, #2724]
+	str	r2, [r3, #2716]
+	b	.L1335
+.L1336:
+	ldr	r1, [r3, #2508]
+	ldr	r6, [r3, #2716]
+	add	r2, r1, #1048576
+	cmp	r6, r2
+	bhi	.L1345
+	ldr	r2, [r3, #2564]
+	lsrs	r5, r2, #10
+	mov	r2, #33554432
+	asrs	r2, r2, r5
+	add	r2, r2, r6
+	cmp	r1, r2
+	bhi	.L1345
+	ldrb	r3, [r3, #2296]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1335
+.L1345:
+	movs	r3, #1
+	movs	r0, #0
+	str	r3, [r4, #2720]
+	str	r0, [r4, #2724]
+	str	r1, [r4, #2716]
+	b	.L1335
+.L1349:
+	.align	2
+.L1348:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	1
+	.global	l2p_flush
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	l2p_flush, %function
+l2p_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r4, #0
+	ldr	r5, .L1354
+	movs	r6, #12
+	bl	FtlWriteDump_data
+.L1351:
+	ldrh	r3, [r5, #138]
+	uxth	r0, r4
+	cmp	r3, r0
+	bhi	.L1353
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L1353:
+	ldr	r2, [r5, #2492]
+	uxth	r3, r4
+	mla	r3, r6, r3, r2
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1352
+	bl	flush_l2p_region
+.L1352:
+	adds	r4, r4, #1
+	b	.L1351
+.L1355:
+	.align	2
+.L1354:
+	.word	.LANCHOR0
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	1
+	.global	FtlVendorPartWrite
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r10, r2
+	ldr	r4, .L1368
+	adds	r2, r0, r1
+	.pad #108
+	sub	sp, sp, #108
+	mov	r8, r0
+	mov	r6, r1
+	ldrh	r3, [r4, #96]
+	cmp	r2, r3
+	bhi	.L1364
+	ldrh	r7, [r4, #108]
+	mov	r9, #0
+	lsr	r7, r0, r7
+	lsl	fp, r7, #2
+.L1358:
+	cbnz	r6, .L1363
+.L1356:
+	mov	r0, r9
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1363:
+	ldr	r3, [r4, #3376]
+	mov	r0, r8
+	ldr	r2, [r3, fp]
+	ldrh	r3, [r4, #58]
+	str	r2, [sp, #12]
+	mov	r1, r3
+	str	r3, [sp, #8]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #12]
+	str	r1, [sp, #4]
+	subs	r5, r3, r1
+	uxth	r5, r5
+	cmp	r6, r5
+	it	cc
+	uxthcc	r5, r6
+	cbz	r2, .L1360
+	cmp	r5, r3
+	beq	.L1360
+	ldr	r3, [r4, #3312]
+	add	r0, sp, #20
+	str	r2, [sp, #24]
+	movs	r2, #1
+	mov	r1, r2
+	str	r3, [sp, #28]
+	add	r3, sp, #40
+	str	r3, [sp, #32]
+	bl	FlashReadPages
+.L1361:
+	lsls	r3, r5, #9
+	ldr	r0, [r4, #3312]
+	mov	r1, r10
+	mov	r2, r3
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #4]
+	subs	r6, r6, r5
+	add	r8, r8, r5
+	add	fp, fp, #4
+	add	r0, r0, r3, lsl #9
+	bl	ftl_memcpy
+	mov	r1, r7
+	ldr	r2, [r4, #3312]
+	ldr	r0, .L1368+4
+	adds	r7, r7, #1
+	bl	FtlMapWritePage
+	ldr	r3, [sp, #8]
+	adds	r0, r0, #1
+	it	eq
+	moveq	r9, #-1
+	add	r10, r10, r3
+	b	.L1358
+.L1360:
+	ldrh	r2, [r4, #110]
+	movs	r1, #0
+	ldr	r0, [r4, #3312]
+	bl	ftl_memset
+	b	.L1361
+.L1364:
+	mov	r9, #-1
+	b	.L1356
+.L1369:
+	.align	2
+.L1368:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3612
+	.fnend
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	1
+	.global	Ftl_save_ext_data
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1372
+	ldr	r3, .L1372+4
+	ldr	r1, [r2, #2640]
+	cmp	r1, r3
+	bne	.L1370
+	ldr	r3, .L1372+8
+	add	r2, r2, #2640
+	movs	r1, #1
+	movs	r0, #0
+	str	r3, [r2, #4]
+	ldr	r3, [r2, #-108]
+	str	r3, [r2, #88]
+	ldr	r3, [r2, #-104]
+	str	r3, [r2, #92]
+	ldr	r3, [r2, #-112]
 	str	r3, [r2, #8]
-	ldr	r3, [r2, #-120]
+	ldr	r3, [r2, #-124]
 	str	r3, [r2, #12]
-	ldr	r3, [r2, #-128]
+	ldr	r3, [r2, #-132]
 	str	r3, [r2, #16]
-	ldr	r3, [r2, #-112]
+	ldr	r3, [r2, #-116]
 	str	r3, [r2, #20]
-	ldr	r3, [r2, #-84]
+	ldr	r3, [r2, #-88]
 	str	r3, [r2, #28]
-	ldr	r3, [r2, #-76]
+	ldr	r3, [r2, #-80]
 	str	r3, [r2, #32]
-	ldr	r3, [r2, #-124]
+	ldr	r3, [r2, #-128]
 	str	r3, [r2, #36]
-	ldr	r3, [r2, #-116]
+	ldr	r3, [r2, #-120]
 	str	r3, [r2, #40]
-	ldr	r3, [r2, #-72]
+	ldr	r3, [r2, #-76]
 	str	r3, [r2, #44]
-	ldr	r3, [r2, #-68]
+	ldr	r3, [r2, #-72]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1403:
+.L1370:
 	bx	lr
-.L1406:
+.L1373:
 	.align	2
-.L1405:
+.L1372:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
@@ -9551,7 +9282,7 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1412
+	ldr	r3, .L1379
 	ldrh	r2, [r3, #3656]
 	cmp	r2, #31
 	itett	ls
@@ -9559,22 +9290,22 @@ FtlEctTblFlush:
 	movhi	r2, #32
 	strhls	r2, [r3, #3656]	@ movhi
 	movls	r2, #1
-	cbnz	r0, .L1409
-	ldr	r1, [r3, #3348]
+	cbnz	r0, .L1376
+	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1410
-.L1409:
-	ldr	r2, [r3, #3348]
+	bcc	.L1377
+.L1376:
+	ldr	r2, [r3, #3352]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1412+4
+	ldr	r1, .L1379+4
 	str	r1, [r2]
-	ldrh	r1, [r3, #3340]
-	ldr	r2, [r3, #3348]
+	ldrh	r1, [r3, #3344]
+	ldr	r2, [r3, #3352]
 	lsls	r3, r1, #9
 	str	r3, [r2, #12]
 	ldr	r3, [r2, #8]
@@ -9584,12 +9315,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1410:
+.L1377:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1413:
+.L1380:
 	.align	2
-.L1412:
+.L1379:
 	.word	.LANCHOR0
 	.word	1112818501
 	.fnend
@@ -9624,7 +9355,7 @@ FtlVendorPartRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1425
+	ldr	r4, .L1392
 	adds	r2, r0, r1
 	.pad #108
 	sub	sp, sp, #108
@@ -9632,20 +9363,20 @@ FtlVendorPartRead:
 	mov	r7, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
-	bhi	.L1424
+	bhi	.L1391
 	ldrh	r6, [r4, #108]
 	mov	r9, #0
 	lsr	r6, r0, r6
 	lsl	fp, r6, #2
-.L1417:
-	cbnz	r7, .L1423
-.L1415:
+.L1384:
+	cbnz	r7, .L1390
+.L1382:
 	mov	r0, r9
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1423:
-	ldr	r3, [r4, #3372]
+.L1390:
+	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldrh	r5, [r4, #58]
 	ldr	r3, [r3, fp]
@@ -9661,8 +9392,8 @@ FtlVendorPartRead:
 	uxthcc	r5, r7
 	lsls	r2, r5, #9
 	str	r2, [sp, #8]
-	cbz	r3, .L1419
-	ldr	r2, [r4, #3308]
+	cbz	r3, .L1386
+	ldr	r2, [r4, #3312]
 	add	r0, sp, #20
 	str	r3, [sp, #24]
 	str	r3, [sp, #12]
@@ -9675,49 +9406,49 @@ FtlVendorPartRead:
 	ldr	r2, [sp, #20]
 	ldr	r3, [sp, #12]
 	adds	r2, r2, #1
-	ldr	r2, [r4, #3452]
+	ldr	r2, [r4, #3456]
 	it	eq
 	moveq	r9, #-1
 	cmp	r2, #256
-	bne	.L1421
+	bne	.L1388
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1425+4
+	ldr	r0, .L1392+4
 	bl	sftl_printk
-	ldr	r2, [r4, #3308]
+	ldr	r2, [r4, #3312]
 	mov	r1, r6
-	ldr	r0, .L1425+8
+	ldr	r0, .L1392+8
 	bl	FtlMapWritePage
-.L1421:
-	ldr	r1, [r4, #3308]
+.L1388:
+	ldr	r1, [r4, #3312]
 	lsls	r2, r5, #9
 	ldr	r3, [sp, #4]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1422:
+.L1389:
 	ldr	r3, [sp, #8]
 	adds	r6, r6, #1
 	subs	r7, r7, r5
 	add	r8, r8, r5
 	add	fp, fp, #4
 	add	r10, r10, r3
-	b	.L1417
-.L1419:
+	b	.L1384
+.L1386:
 	lsls	r2, r5, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1422
-.L1424:
+	b	.L1389
+.L1391:
 	mov	r9, #-1
-	b	.L1415
-.L1426:
+	b	.L1382
+.L1393:
 	.align	2
-.L1425:
+.L1392:
 	.word	.LANCHOR0
 	.word	.LC108
-	.word	.LANCHOR0+3476
+	.word	.LANCHOR0+3612
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	1
@@ -9734,29 +9465,29 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1429
-	ldr	r2, [r4, #3348]
-	ldrh	r1, [r4, #3340]
+	ldr	r4, .L1396
+	ldr	r2, [r4, #3352]
+	ldrh	r1, [r4, #3344]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #3348]
+	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1429+4
+	ldr	r3, .L1396+4
 	cmp	r2, r3
-	beq	.L1428
-	ldr	r1, .L1429+8
-	ldr	r0, .L1429+12
+	beq	.L1395
+	ldr	r1, .L1396+8
+	ldr	r0, .L1396+12
 	bl	sftl_printk
-	ldrh	r2, [r4, #3340]
+	ldrh	r2, [r4, #3344]
 	movs	r1, #0
-	ldr	r0, [r4, #3348]
+	ldr	r0, [r4, #3352]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1428:
+.L1395:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1430:
+.L1397:
 	.align	2
-.L1429:
+.L1396:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC109
@@ -9777,47 +9508,47 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1434
+	ldr	r4, .L1401
 	movs	r0, #0
-	ldr	r5, .L1434+4
-	addw	r2, r4, #2636
+	ldr	r5, .L1401+4
+	add	r2, r4, #2640
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #2636]
+	ldr	r3, [r4, #2640]
 	cmp	r3, r5
-	beq	.L1432
+	beq	.L1399
 	mov	r1, #512
-	addw	r0, r4, #2636
+	add	r0, r4, #2640
 	bl	__memzero
-	str	r5, [r4, #2636]
-.L1432:
-	ldr	r3, [r4, #2636]
+	str	r5, [r4, #2640]
+.L1399:
+	ldr	r3, [r4, #2640]
 	cmp	r3, r5
-	bne	.L1433
-	ldr	r3, [r4, #2724]
-	str	r3, [r4, #2532]
+	bne	.L1400
 	ldr	r3, [r4, #2728]
+	str	r3, [r4, #2532]
+	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2536]
-	ldr	r3, [r4, #2644]
-	str	r3, [r4, #2528]
 	ldr	r3, [r4, #2648]
-	str	r3, [r4, #2516]
+	str	r3, [r4, #2528]
 	ldr	r3, [r4, #2652]
-	str	r3, [r4, #2508]
+	str	r3, [r4, #2516]
 	ldr	r3, [r4, #2656]
+	str	r3, [r4, #2508]
+	ldr	r3, [r4, #2660]
 	str	r3, [r4, #2524]
-	ldr	r3, [r4, #2664]
-	str	r3, [r4, #2552]
 	ldr	r3, [r4, #2668]
-	str	r3, [r4, #2560]
+	str	r3, [r4, #2552]
 	ldr	r3, [r4, #2672]
-	str	r3, [r4, #2512]
+	str	r3, [r4, #2560]
 	ldr	r3, [r4, #2676]
-	str	r3, [r4, #2520]
+	str	r3, [r4, #2512]
 	ldr	r3, [r4, #2680]
-	str	r3, [r4, #2564]
+	str	r3, [r4, #2520]
 	ldr	r3, [r4, #2684]
+	str	r3, [r4, #2564]
+	ldr	r3, [r4, #2688]
 	str	r3, [r4, #2568]
-.L1433:
+.L1400:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9826,9 +9557,9 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2556]
 	pop	{r3, r4, r5, pc}
-.L1435:
+.L1402:
 	.align	2
-.L1434:
+.L1401:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9850,41 +9581,94 @@ sftl_vendor_read:
 	.fnend
 	.size	sftl_vendor_read, .-sftl_vendor_read
 	.align	1
-	.global	FtlVpcTblFlush
+	.global	FtlMapBlkWriteDump_data
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlVpcTblFlush, %function
-FtlVpcTblFlush:
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movs	r5, #0
-	ldr	r4, .L1452
-	movs	r1, #255
-	movw	r7, #65535
-	ldr	r9, .L1452+16
-	ldr	r3, [r4, #3300]
-	addw	r8, r4, #3452
-	ldr	r6, [r4, #3332]
-	ldr	r10, .L1452+20
-	str	r3, [r4, #3460]
-	ldrh	r3, [r4, #2576]
-	str	r6, [r4, #3464]
-	str	r5, [r6, #12]
-	strh	r3, [r6, #2]	@ movhi
-	movw	r3, #61604
-	strh	r3, [r6]	@ movhi
-	ldr	r3, [r4, #2584]
-	str	r5, [r6, #8]
-	ldrh	r2, [r4, #2350]
-	str	r3, [r6, #4]
-	ldr	r3, .L1452+4
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldr	r3, [r0, #36]
+	cbz	r3, .L1404
+	ldrh	r5, [r0, #6]
+	movs	r3, #0
+	ldr	r4, .L1408
+	ldr	r2, [r0, #24]
+	str	r3, [r0, #36]
+	subs	r5, r5, #1
+	ldr	r0, [r4, #3308]
+	uxth	r5, r5
+	ldr	r1, [r4, #3336]
+	str	r0, [r4, #3464]
+	str	r1, [r4, #3468]
+	ldr	r2, [r2, r5, lsl #2]
+	str	r2, [r4, #3460]
+	cbz	r2, .L1406
+	movs	r2, #1
+	add	r0, r4, #3456
+	mov	r1, r2
+	bl	FlashReadPages
+.L1407:
+	ldr	r2, [r4, #3464]
+	mov	r1, r5
+	mov	r0, r6
+	pop	{r4, r5, r6, lr}
+	b	FtlMapWritePage
+.L1406:
+	ldrh	r2, [r4, #110]
+	movs	r1, #255
+	bl	ftl_memset
+	b	.L1407
+.L1404:
+	pop	{r4, r5, r6, pc}
+.L1409:
+	.align	2
+.L1408:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.align	1
+	.global	FtlVpcTblFlush
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movs	r5, #0
+	ldr	r4, .L1425
+	movs	r1, #255
+	movw	r7, #65535
+	ldr	r9, .L1425+16
+	ldr	r3, [r4, #3304]
+	add	r8, r4, #3456
+	ldr	r6, [r4, #3336]
+	ldr	r10, .L1425+20
+	str	r3, [r4, #3464]
+	ldrh	r3, [r4, #2576]
+	str	r6, [r4, #3468]
+	str	r5, [r6, #12]
+	strh	r3, [r6, #2]	@ movhi
+	movw	r3, #61604
+	strh	r3, [r6]	@ movhi
+	ldr	r3, [r4, #2584]
+	str	r5, [r6, #8]
+	ldrh	r2, [r4, #2350]
+	str	r3, [r6, #4]
+	ldr	r3, .L1425+4
 	str	r3, [r4, #2268]
-	ldr	r3, .L1452+8
+	ldr	r3, .L1425+8
 	str	r3, [r4, #2272]
 	ldrh	r3, [r4, #2582]
 	strh	r3, [r4, #2276]	@ movhi
@@ -9907,7 +9691,7 @@ FtlVpcTblFlush:
 	strb	r3, [r4, #2280]
 	ldrh	r3, [r4, #2444]
 	ldrh	r2, [r4, #2446]
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	strh	r3, [r4, #2290]	@ movhi
 	ldrb	r3, [r4, #2450]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
@@ -9924,16 +9708,16 @@ FtlVpcTblFlush:
 	bl	ftl_memset
 	movs	r2, #48
 	addw	r1, r4, #2268
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #3460]
+	ldr	r0, [r4, #3464]
 	ldr	r1, [r4, #2324]
 	lsls	r2, r2, #1
 	adds	r0, r0, #48
 	bl	ftl_memcpy
 	ldrh	r0, [r4, #40]
-	ldr	r3, [r4, #3460]
+	ldr	r3, [r4, #3464]
 	ldr	r1, [r4, #24]
 	lsrs	r2, r0, #3
 	adds	r0, r0, #24
@@ -9944,19 +9728,19 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1438:
-	ldr	r3, [r4, #3300]
+.L1411:
+	ldr	r3, [r4, #3304]
 	ldrh	r1, [r4, #2578]
 	ldrh	r2, [r4, #2576]
-	str	r3, [r4, #3460]
-	ldr	r3, [r4, #3332]
 	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	str	r3, [r4, #3468]
 	orr	r3, r1, r2, lsl #10
-	str	r3, [r4, #3456]
+	str	r3, [r4, #3460]
 	ldrh	r3, [r4, #104]
 	subs	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1439
+	blt	.L1412
 	movs	r3, #0
 	ldrh	r7, [r4, #2580]
 	strh	r3, [r4, #2578]	@ movhi
@@ -9968,29 +9752,33 @@ FtlVpcTblFlush:
 	str	r3, [r4, #2584]
 	str	r2, [r4, #2540]
 	lsls	r2, r0, #10
-	str	r2, [r4, #3456]
+	str	r2, [r4, #3460]
 	str	r3, [r6, #4]
 	strh	r0, [r6, #2]	@ movhi
-.L1439:
+.L1412:
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3304]
+	bl	js_hash
 	movs	r3, #1
-	mov	r0, r8
+	str	r0, [r6, #12]
 	mov	r2, r3
 	mov	r1, r3
+	mov	r0, r8
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2578]
-	ldr	r2, [r4, #3452]
+	ldr	r2, [r4, #3456]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	adds	r1, r2, #1
 	strh	r3, [r4, #2578]	@ movhi
-	bne	.L1440
+	bne	.L1413
 	cmp	r3, #1
-	bne	.L1441
-	movw	r2, #1135
+	bne	.L1414
+	movw	r2, #1138
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L1441:
+.L1414:
 	ldrh	r3, [r4, #2578]
 	adds	r5, r5, #1
 	uxth	r5, r5
@@ -10000,35 +9788,35 @@ FtlVpcTblFlush:
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2578]	@ movhi
 	cmp	r5, #3
-	bls	.L1438
+	bls	.L1411
 	mov	r2, r5
-	ldr	r1, [r4, #3456]
-	ldr	r0, .L1452+12
+	ldr	r1, [r4, #3460]
+	ldr	r0, .L1425+12
 	bl	sftl_printk
-.L1444:
-	b	.L1444
-.L1440:
+.L1417:
+	b	.L1417
+.L1413:
 	cmp	r3, #1
-	beq	.L1438
+	beq	.L1411
 	cmp	r2, #256
-	beq	.L1438
+	beq	.L1411
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1445
+	beq	.L1418
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1445:
+.L1418:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1453:
+.L1426:
 	.align	2
-.L1452:
+.L1425:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
 	.word	.LC110
-	.word	.LANCHOR1+486
+	.word	.LANCHOR1+471
 	.word	.LC1
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
@@ -10066,17 +9854,17 @@ sftl_deinit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1457
+	ldr	r3, .L1430
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1456
+	bne	.L1429
 	bl	FtlSysFlush
-.L1456:
+.L1429:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1458:
+.L1431:
 	.align	2
-.L1457:
+.L1430:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10095,21 +9883,21 @@ sftl_discard:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	adds	r2, r0, r1
-	ldr	r4, .L1474
+	ldr	r4, .L1447
 	mov	r8, r0
 	mov	r6, r1
 	ldr	r3, [r4, #140]
 	cmp	r2, r3
-	bhi	.L1467
+	bhi	.L1440
 	cmp	r1, #31
-	bhi	.L1461
-.L1466:
+	bhi	.L1434
+.L1439:
 	movs	r0, #0
-.L1459:
+.L1432:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1461:
+.L1434:
 	ldrh	r5, [r4, #58]
 	mov	r1, r5
 	bl	__aeabi_uidiv
@@ -10117,7 +9905,7 @@ sftl_discard:
 	mov	r7, r0
 	sub	r8, r8, r3
 	uxth	r3, r8
-	cbz	r3, .L1462
+	cbz	r3, .L1435
 	subs	r5, r5, r3
 	adds	r7, r7, #1
 	cmp	r5, r6
@@ -10125,29 +9913,29 @@ sftl_discard:
 	movcs	r5, r6
 	uxth	r5, r5
 	subs	r6, r6, r5
-.L1462:
+.L1435:
 	mov	r3, #-1
 	str	r3, [sp, #4]
-.L1463:
+.L1436:
 	ldrh	r3, [r4, #58]
 	cmp	r6, r3
-	bcs	.L1465
+	bcs	.L1438
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1466
+	bls	.L1439
 	movs	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1466
-.L1465:
+	b	.L1439
+.L1438:
 	movs	r2, #0
 	mov	r1, sp
 	mov	r0, r7
 	bl	log2phys
 	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L1464
+	beq	.L1437
 	ldr	r3, [r4, #3660]
 	movs	r2, #1
 	add	r1, sp, #4
@@ -10162,17 +9950,17 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1464:
+.L1437:
 	ldrh	r3, [r4, #58]
 	adds	r7, r7, #1
 	subs	r6, r6, r3
-	b	.L1463
-.L1467:
+	b	.L1436
+.L1440:
 	mov	r0, #-1
-	b	.L1459
-.L1475:
+	b	.L1432
+.L1448:
 	.align	2
-.L1474:
+.L1447:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_discard, .-sftl_discard
@@ -10191,93 +9979,93 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movs	r5, #0
-	ldr	r4, .L1489
-	ldr	r1, .L1489+4
-	ldr	r0, .L1489+8
+	ldr	r4, .L1462
+	ldr	r1, .L1462+4
+	ldr	r0, .L1462+8
 	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	movs	r1, #0
-	ldr	r0, [r4, #3352]
+	ldr	r0, [r4, #3356]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1477:
+.L1450:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1479
-	ldr	r9, .L1489+12
+	bcc	.L1452
+	ldr	r9, .L1462+12
 	movs	r7, #0
 	movw	r8, #65535
-.L1480:
+.L1453:
 	ldrh	r3, [r4, #40]
 	uxth	r6, r7
 	cmp	r3, r6
-	bhi	.L1485
+	bhi	.L1458
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1479:
+.L1452:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L1478
+	beq	.L1451
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r4, #3352]
+	ldr	r2, [r4, #3356]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1478:
+.L1451:
 	adds	r5, r5, #1
-	b	.L1477
-.L1485:
+	b	.L1450
+.L1458:
 	ldr	r3, [r4, #2324]
 	uxth	r5, r7
 	ldrh	r2, [r3, r5, lsl #1]
-	ldr	r3, [r4, #3352]
+	ldr	r3, [r4, #3356]
 	ldrh	r3, [r3, r5, lsl #1]
 	cmp	r2, r3
-	beq	.L1482
+	beq	.L1455
 	cmp	r2, r8
-	beq	.L1482
+	beq	.L1455
 	mov	r1, r5
 	mov	r0, r9
 	bl	sftl_printk
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1455
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1455
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1455
 	ldr	r3, [r4, #2324]
 	ldrh	r2, [r3, r5, lsl #1]
-	cbnz	r2, .L1484
-	ldr	r2, [r4, #3352]
+	cbnz	r2, .L1457
+	ldr	r2, [r4, #3356]
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
-.L1482:
+.L1455:
 	adds	r7, r7, #1
-	b	.L1480
-.L1484:
-	ldr	r2, [r4, #3352]
+	b	.L1453
+.L1457:
+	ldr	r2, [r4, #3356]
 	mov	r0, r6
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
 	bl	update_vpc_list
-	b	.L1482
-.L1490:
+	b	.L1455
+.L1463:
 	.align	2
-.L1489:
+.L1462:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+501
-	.word	.LC95
+	.word	.LANCHOR1+486
+	.word	.LC101
 	.word	.LC111
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
@@ -10295,42 +10083,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1501
+	ldr	r4, .L1474
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1492
-	movw	r2, #2714
-	ldr	r1, .L1501+4
-	ldr	r0, .L1501+8
+	bcs	.L1465
+	movw	r2, #2760
+	ldr	r1, .L1474+4
+	ldr	r0, .L1474+8
 	bl	sftl_printk
-.L1492:
+.L1465:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1493
+	beq	.L1466
 	ldr	r3, [r4, #2324]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1494
+	cbz	r3, .L1467
 	bl	INSERT_DATA_LIST
-.L1493:
-	ldrh	r0, [r4, #3438]
+.L1466:
+	ldrh	r0, [r4, #3442]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1495
+	beq	.L1468
 	cmp	r5, r0
-	bne	.L1496
+	bne	.L1469
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1497
-.L1496:
+	cbz	r3, .L1470
+.L1469:
 	bl	update_vpc_list
-.L1497:
+.L1470:
 	movw	r3, #65535
-	strh	r3, [r4, #3438]	@ movhi
-.L1495:
+	strh	r3, [r4, #3442]	@ movhi
+.L1468:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10339,14 +10127,14 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1494:
+.L1467:
 	bl	INSERT_FREE_LIST
-	b	.L1493
-.L1502:
+	b	.L1466
+.L1475:
 	.align	2
-.L1501:
+.L1474:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+522
+	.word	.LANCHOR1+507
 	.word	.LC1
 	.fnend
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
@@ -10364,29 +10152,29 @@ FtlProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r7, #0
-	ldr	r6, .L1517
+	ldr	r6, .L1490
 	.pad #20
 	sub	sp, sp, #20
 	mov	r4, r3
 	movs	r2, #0
-	ldr	r10, .L1517+8
+	ldr	r10, .L1490+8
 	mov	r5, r0
-	ldr	fp, .L1517+12
+	ldr	fp, .L1490+12
 	mov	r9, r1
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1504:
+.L1477:
 	cmp	r7, r9
-	beq	.L1511
+	beq	.L1484
 	mov	r8, #0
-	b	.L1512
-.L1507:
+	b	.L1485
+.L1480:
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4]
 	cmp	r3, r0
-	bne	.L1505
+	bne	.L1478
 	ldr	r1, [r6, #2324]
 	ldrh	r0, [r4, #4]
 	ldrh	r2, [r1, r3, lsl #1]
@@ -10396,15 +10184,15 @@ FtlProgPages:
 	strb	r8, [r4, #6]
 	strh	r8, [r4, #4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
-.L1505:
+.L1478:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L1506
+	cbnz	r3, .L1479
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1506:
-	ldr	r3, [r6, #2732]
+.L1479:
+	ldr	r3, [r6, #2736]
 	adds	r3, r3, #1
-	str	r3, [r6, #2732]
+	str	r3, [r6, #2736]
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlGcMarkBadPhyBlk
@@ -10417,19 +10205,19 @@ FtlProgPages:
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	FlashProgPages
-.L1512:
+.L1485:
 	ldr	r3, [r5]
 	adds	r3, r3, #1
-	beq	.L1507
+	beq	.L1480
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1508
+	bcc	.L1481
 	mov	r2, #960
 	mov	r1, r10
 	mov	r0, fp
 	bl	sftl_printk
-.L1508:
+.L1481:
 	ldr	r3, [r5, #4]
 	add	r1, sp, #16
 	movs	r2, #1
@@ -10444,39 +10232,39 @@ FtlProgPages:
 	ldr	r3, [sp, #4]
 	mov	r8, r0
 	adds	r3, r3, #1
-	beq	.L1509
+	beq	.L1482
 	ldr	r3, [r6, #2324]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1510
+	cbnz	r2, .L1483
 	mov	r1, r0
-	ldr	r0, .L1517+4
+	ldr	r0, .L1490+4
 	bl	sftl_printk
-.L1510:
+.L1483:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1509:
+.L1482:
 	adds	r7, r7, #1
 	adds	r5, r5, #20
-	b	.L1504
-.L1511:
+	b	.L1477
+.L1484:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1503
+	bcc	.L1476
 	movw	r2, #975
-	ldr	r1, .L1517+8
-	ldr	r0, .L1517+12
+	ldr	r1, .L1490+8
+	ldr	r0, .L1490+12
 	bl	sftl_printk
-.L1503:
+.L1476:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1518:
+.L1491:
 	.align	2
-.L1517:
+.L1490:
 	.word	.LANCHOR0
 	.word	.LC112
-	.word	.LANCHOR1+551
+	.word	.LANCHOR1+536
 	.word	.LC1
 	.fnend
 	.size	FtlProgPages, .-FtlProgPages
@@ -10495,146 +10283,146 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r2, #65535
-	ldr	r4, .L1545
+	ldr	r4, .L1518
 	ldrh	r5, [r4, #2444]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1520
-.L1530:
+	bne	.L1493
+.L1503:
 	ldrh	r2, [r4, #2444]
 	movs	r3, #0
-	str	r3, [r4, #3444]
+	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1543
-.L1521:
+	bne	.L1516
+.L1494:
 	movs	r0, #0
-.L1519:
+.L1492:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1520:
-	cbz	r0, .L1523
-	ldr	r3, .L1545+4
+.L1493:
+	cbz	r0, .L1496
+	ldr	r3, .L1518+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1524
-.L1525:
+	beq	.L1497
+.L1498:
 	movs	r1, #2
-.L1523:
-	ldr	r0, .L1545+8
+.L1496:
+	ldr	r0, .L1518+8
 	bl	FtlGcScanTempBlk
 	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L1526
+	beq	.L1499
 	ldr	r2, [r4, #2328]
 	ldrh	r3, [r2, r5, lsl #1]
 	cmp	r3, #4
-	bls	.L1527
+	bls	.L1500
 	subs	r3, r3, #5
 	movs	r0, #1
 	strh	r3, [r2, r5, lsl #1]	@ movhi
 	bl	FtlEctTblFlush
-.L1527:
-	ldr	r3, [r4, #3444]
-	cbnz	r3, .L1528
-	ldr	r3, [r4, #2732]
+.L1500:
+	ldr	r3, [r4, #3448]
+	cbnz	r3, .L1501
+	ldr	r3, [r4, #2736]
 	ldr	r0, [sp, #4]
 	adds	r3, r3, #1
 	ubfx	r0, r0, #10, #16
-	str	r3, [r4, #2732]
+	str	r3, [r4, #2736]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1528:
+.L1501:
 	movs	r3, #0
-	str	r3, [r4, #3444]
-.L1539:
+	str	r3, [r4, #3448]
+.L1512:
 	movs	r0, #1
-	b	.L1519
-.L1524:
+	b	.L1492
+.L1497:
 	movs	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #17
-	bhi	.L1525
-	b	.L1523
-.L1526:
-	ldr	r3, .L1545+4
+	bhi	.L1498
+	b	.L1496
+.L1499:
+	ldr	r3, .L1518+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1539
-	b	.L1530
-.L1543:
+	bne	.L1512
+	b	.L1503
+.L1516:
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
-	ldrh	r2, [r4, #3200]
+	ldrh	r2, [r4, #3204]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1531
+	beq	.L1504
 	movs	r2, #162
-	ldr	r1, .L1545+12
-	ldr	r0, .L1545+16
+	ldr	r1, .L1518+12
+	ldr	r0, .L1518+16
 	bl	sftl_printk
-.L1531:
+.L1504:
 	ldrb	r3, [r4, #2451]	@ zero_extendqisi2
 	movs	r6, #0
 	ldrh	r0, [r4, #102]
 	mov	r9, #12
 	ldr	r2, [r4, #2324]
 	ldrh	r1, [r4, #2444]
-	ldr	r10, .L1545+12
+	ldr	r10, .L1518+12
 	smulbb	r3, r3, r0
-	ldr	fp, .L1545+16
+	ldr	fp, .L1518+16
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldr	r2, [r4, #2528]
-	ldrh	r3, [r4, #3200]
+	ldrh	r3, [r4, #3204]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1532:
-	ldrh	r2, [r4, #3200]
+.L1505:
+	ldrh	r2, [r4, #3204]
 	uxth	r3, r6
 	cmp	r2, r3
-	bhi	.L1536
+	bhi	.L1509
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2444]
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1537
+	beq	.L1510
 	bl	INSERT_DATA_LIST
-.L1538:
+.L1511:
 	movw	r6, #65535
 	movs	r5, #0
 	strh	r6, [r4, #2444]	@ movhi
-	strh	r5, [r4, #3200]	@ movhi
-	strh	r5, [r4, #3192]	@ movhi
+	strh	r5, [r4, #3204]	@ movhi
+	strh	r5, [r4, #3196]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldrh	r3, [r4, #2572]
 	ldrh	r2, [r4, #2344]
-	strh	r6, [r4, #2588]	@ movhi
+	strh	r6, [r4, #2592]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1521
+	ble	.L1494
 	movs	r3, #20
-	strh	r3, [r4, #3148]	@ movhi
-	b	.L1521
-.L1536:
+	strh	r3, [r4, #3152]	@ movhi
+	b	.L1494
+.L1509:
 	uxth	r7, r6
-	ldr	r8, [r4, #3196]
+	ldr	r8, [r4, #3200]
 	ldr	r3, [r4, #2504]
 	mul	r7, r9, r7
 	add	r5, r8, r7
 	ldr	r2, [r5, #8]
 	cmp	r2, r3
-	bcc	.L1533
+	bcc	.L1506
 	movs	r2, #168
 	mov	r1, r10
 	mov	r0, fp
 	bl	sftl_printk
-.L1533:
+.L1506:
 	movs	r2, #0
 	add	r1, sp, #4
 	ldr	r0, [r5, #8]
@@ -10642,7 +10430,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r8, r7]
 	ldr	r3, [sp, #4]
 	cmp	r0, r3
-	bne	.L1534
+	bne	.L1507
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
@@ -10651,27 +10439,27 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1544:
+.L1517:
 	bl	decrement_vpc_count
-.L1535:
+.L1508:
 	adds	r6, r6, #1
-	b	.L1532
-.L1534:
+	b	.L1505
+.L1507:
 	ldr	r2, [r5, #4]
 	cmp	r3, r2
-	beq	.L1535
+	beq	.L1508
 	ldrh	r0, [r4, #2444]
-	b	.L1544
-.L1537:
+	b	.L1517
+.L1510:
 	bl	INSERT_FREE_LIST
-	b	.L1538
-.L1546:
+	b	.L1511
+.L1519:
 	.align	2
-.L1545:
+.L1518:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
-	.word	.LANCHOR1+564
+	.word	.LANCHOR1+549
 	.word	.LC1
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
@@ -10688,25 +10476,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1549
+	ldr	r4, .L1522
 	ldrh	r1, [r4, #102]
 	addw	r0, r4, #2444
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #2446]
 	ldrh	r3, [r4, #102]
 	cmp	r2, r3
-	bcc	.L1547
-	add	r0, r4, #3392
+	bcc	.L1520
+	addw	r0, r4, #3396
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
-	str	r3, [r4, #3444]
-.L1547:
+	str	r3, [r4, #3448]
+.L1520:
 	pop	{r4, pc}
-.L1550:
+.L1523:
 	.align	2
-.L1549:
+.L1522:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10724,9 +10512,9 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1552
+	ldr	r4, .L1525
 	addw	r6, r4, #2348
-	str	r5, [r4, #3524]
+	str	r5, [r4, #3480]
 	mov	r0, r6
 	addw	r4, r4, #2396
 	bl	FtlRecoverySuperblock
@@ -10741,9 +10529,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1553:
+.L1526:
 	.align	2
-.L1552:
+.L1525:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10761,64 +10549,64 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1561
+	ldr	r4, .L1534
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
-	ldr	r1, [r4, #3164]
-	ldr	r0, [r4, #3292]
+	ldr	r1, [r4, #3168]
+	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1555:
-	ldr	r1, [r4, #3164]
+.L1528:
+	ldr	r1, [r4, #3168]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1558
-	ldr	r0, [r4, #3292]
+	bhi	.L1531
+	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #2448]
 	movs	r0, #0
-	str	r0, [r4, #3164]
-	cbnz	r3, .L1554
+	str	r0, [r4, #3168]
+	cbnz	r3, .L1527
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1560
-.L1558:
+	b	.L1533
+.L1531:
 	muls	r3, r6, r3
-	ldr	r2, [r4, #3292]
+	ldr	r2, [r4, #3296]
 	adds	r5, r5, #1
 	adds	r1, r2, r3
 	ldr	r2, [r2, r3]
 	adds	r0, r2, #1
-	bne	.L1556
+	bne	.L1529
 	ldrh	r0, [r4, #2444]
 	movs	r5, #0
 	ldr	r1, [r4, #2324]
 	strh	r5, [r1, r0, lsl #1]	@ movhi
 	strh	r2, [r4, #2444]	@ movhi
-	ldr	r2, [r4, #2732]
+	ldr	r2, [r4, #2736]
 	adds	r2, r2, #1
-	str	r2, [r4, #2732]
-	ldr	r2, [r4, #3292]
+	str	r2, [r4, #2736]
+	ldr	r2, [r4, #3296]
 	add	r3, r3, r2
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1560:
+.L1533:
 	movs	r0, #1
-.L1554:
+.L1527:
 	pop	{r4, r5, r6, pc}
-.L1556:
+.L1529:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1555
-.L1562:
+	b	.L1528
+.L1535:
 	.align	2
-.L1561:
+.L1534:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10836,166 +10624,38 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1566
+	ldr	r4, .L1539
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r3
-	beq	.L1564
+	beq	.L1537
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1565
-.L1564:
+	cbnz	r3, .L1538
+.L1537:
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1566+4
+	ldr	r0, .L1539+4
 	strb	r5, [r4, #2452]
 	bl	allocate_data_superblock
-	strh	r5, [r4, #3192]	@ movhi
-	strh	r5, [r4, #3200]	@ movhi
+	strh	r5, [r4, #3196]	@ movhi
+	strh	r5, [r4, #3204]	@ movhi
 	bl	l2p_flush
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1565:
-	ldr	r0, .L1566+4
+.L1538:
+	ldr	r0, .L1539+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L1567:
+.L1540:
 	.align	2
-.L1566:
+.L1539:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.fnend
 	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	1
-	.global	FtlSysBlkInit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movs	r3, #0
-	ldr	r4, .L1583
-	ldrh	r0, [r4, #36]
-	strh	r3, [r4, #3520]	@ movhi
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	ldrh	r2, [r4, #2576]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L1569
-.L1571:
-	mov	r5, #-1
-.L1568:
-	mov	r0, r5
-	pop	{r4, r5, r6, pc}
-.L1569:
-	bl	FtlLoadSysInfo
-	mov	r5, r0
-	cmp	r0, #0
-	bne	.L1571
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	movs	r0, #1
-	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r4, #138]
-	mov	r3, r5
-	ldr	r2, [r4, #2492]
-	movs	r0, #12
-.L1572:
-	cmp	r3, r1
-	bge	.L1577
-	mla	r6, r0, r3, r2
-	ldr	r6, [r6, #4]
-	cmp	r6, #0
-	bge	.L1573
-.L1577:
-	ldrh	r2, [r4, #2296]
-	cmp	r3, r1
-	add	r2, r2, #1
-	strh	r2, [r4, #2296]	@ movhi
-	bge	.L1582
-.L1574:
-	ldr	r0, .L1583+4
-	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1583+8
-	bl	FtlSuperblockPowerLostFix
-	ldrh	r1, [r4, #2348]
-	ldr	r2, [r4, #2324]
-	ldrh	r0, [r4, #2352]
-	ldrh	r3, [r2, r1, lsl #1]
-	subs	r3, r3, r0
-	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r4, #102]
-	ldr	r1, [r4, #2324]
-	ldrh	r0, [r4, #2396]
-	strh	r3, [r4, #2350]	@ movhi
-	movs	r3, #0
-	strb	r3, [r4, #2354]
-	strh	r3, [r4, #2352]	@ movhi
-	ldrh	r6, [r4, #2400]
-	ldrh	r2, [r1, r0, lsl #1]
-	subs	r2, r2, r6
-	strh	r2, [r1, r0, lsl #1]	@ movhi
-	strb	r3, [r4, #2402]
-	strh	r3, [r4, #2400]	@ movhi
-	ldrh	r3, [r4, #2298]
-	ldrh	r2, [r4, #102]
-	adds	r3, r3, #1
-	strh	r2, [r4, #2398]	@ movhi
-	strh	r3, [r4, #2298]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1578
-.L1573:
-	adds	r3, r3, #1
-	b	.L1572
-.L1582:
-	ldrh	r3, [r4, #3520]
-	cmp	r3, #0
-	bne	.L1574
-.L1578:
-	bl	FtlVpcCheckAndModify
-	ldrh	r0, [r4, #2348]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1568
-	ldrh	r3, [r4, #2352]
-	cmp	r3, #0
-	bne	.L1568
-	ldrh	r3, [r4, #2400]
-	cmp	r3, #0
-	bne	.L1568
-	bl	FtlGcRefreshBlock
-	ldrh	r0, [r4, #2396]
-	bl	FtlGcRefreshBlock
-	bl	FtlVpcTblFlush
-	ldr	r0, .L1583+4
-	bl	allocate_new_data_superblock
-	ldr	r0, .L1583+8
-	bl	allocate_new_data_superblock
-	b	.L1568
-.L1584:
-	.align	2
-.L1583:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.fnend
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
-	.align	1
-	.global	rk_ftl_garbage_collect
+	.global	rk_ftl_garbage_collect
 	.syntax unified
 	.thumb
 	.thumb_func
@@ -11005,281 +10665,281 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1707
+	ldr	r3, .L1663
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
 	.pad #44
 	sub	sp, sp, #44
 	mov	r4, r3
-	ldr	r0, [r3, #3272]
+	ldr	r0, [r3, #3276]
 	cmp	r0, #0
-	bne	.L1662
+	bne	.L1618
 	ldrh	r2, [r3, #2336]
 	cmp	r2, #47
-	bls	.L1585
-	ldr	r2, .L1707+4
+	bls	.L1541
+	ldr	r2, .L1663+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1587
-.L1590:
-	ldrh	r2, [r4, #3204]
+	bne	.L1543
+.L1546:
+	ldrh	r2, [r4, #3208]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1588
-.L1589:
+	bne	.L1544
+.L1545:
 	bl	FtlReadRefresh
-	ldr	r3, [r4, #3152]
+	ldr	r3, [r4, #3156]
 	movw	r6, #65535
-	ldrh	r1, [r4, #2588]
+	ldrh	r1, [r4, #2592]
 	adds	r3, r3, #1
 	add	r3, r3, r9, lsl #7
 	cmp	r1, r6
-	str	r3, [r4, #3152]
-	bne	.L1591
+	str	r3, [r4, #3156]
+	bne	.L1547
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r1
-	bne	.L1592
-	ldrh	r7, [r4, #3202]
+	bne	.L1548
+	ldrh	r7, [r4, #3206]
 	cmp	r7, r2
-	bne	.L1593
+	bne	.L1549
 	ldrh	r2, [r4, #2344]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1593
+	bls	.L1549
 	movs	r5, #0
-	str	r5, [r4, #3152]
+	str	r5, [r4, #3156]
 	strh	r5, [r4, #3664]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r7
 	mov	r6, r0
-	bne	.L1666
+	bne	.L1622
 	ldrh	r2, [r4, #2344]
-	ldrh	r3, [r4, #3150]
+	ldrh	r3, [r4, #3154]
 	cmp	r2, r3
-	bcs	.L1596
+	bcs	.L1552
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r6
-	beq	.L1598
+	beq	.L1554
 	mov	r0, r3
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1599
+	bhi	.L1555
 	mov	r0, r5
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	movs	r3, #128
-	strh	r3, [r4, #3150]	@ movhi
+	strh	r3, [r4, #3154]	@ movhi
 	cmp	r5, r6
-	bne	.L1595
-.L1598:
+	bne	.L1551
+.L1554:
 	bl	FtlGcReFreshBadBlk
 	cmp	r9, #0
-	bne	.L1601
+	bne	.L1557
 	movw	r3, #65535
 	cmp	r6, r3
-	bne	.L1601
-.L1660:
+	bne	.L1557
+.L1616:
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #24
-	bhi	.L1667
+	bhi	.L1623
 	cmp	r3, #16
 	ldrh	r5, [r4, #102]
-	bls	.L1603
+	bls	.L1559
 	lsrs	r5, r5, #5
-.L1602:
-	ldrh	r2, [r4, #3148]
+.L1558:
+	ldrh	r2, [r4, #3152]
 	cmp	r2, r3
-	bcs	.L1606
+	bcs	.L1562
 	ldrh	r3, [r4, #2444]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1607
-	ldrh	r2, [r4, #3202]
+	bne	.L1563
+	ldrh	r2, [r4, #3206]
 	cmp	r2, r3
-	bne	.L1607
+	bne	.L1563
 	ldrh	r0, [r4, #3664]
-	cbnz	r0, .L1608
+	cbnz	r0, .L1564
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1609
-.L1608:
+	bcs	.L1565
+.L1564:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1703:
-	strh	r3, [r4, #3148]	@ movhi
+.L1659:
+	strh	r3, [r4, #3152]	@ movhi
 	movs	r3, #0
-	str	r3, [r4, #3160]
-.L1585:
+	str	r3, [r4, #3164]
+.L1541:
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1587:
+.L1543:
 	ldrh	r3, [r3, #2444]
 	cmp	r3, r2
-	beq	.L1590
+	beq	.L1546
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1590
+	beq	.L1546
 	movs	r0, #1
-	b	.L1585
-.L1588:
-	ldrh	r3, [r4, #3202]
+	b	.L1541
+.L1544:
+	ldrh	r3, [r4, #3206]
 	cmp	r3, r1
 	itt	eq
-	strheq	r2, [r4, #3202]	@ movhi
-	strheq	r3, [r4, #3204]	@ movhi
-	b	.L1589
-.L1599:
+	strheq	r2, [r4, #3206]	@ movhi
+	strheq	r3, [r4, #3208]	@ movhi
+	b	.L1545
+.L1555:
 	movs	r3, #64
-.L1702:
-	strh	r3, [r4, #3150]	@ movhi
-	b	.L1598
-.L1596:
+.L1658:
+	strh	r3, [r4, #3154]	@ movhi
+	b	.L1554
+.L1552:
 	movs	r3, #80
-	b	.L1702
-.L1666:
+	b	.L1658
+.L1622:
 	mov	r5, r0
-.L1595:
+.L1551:
 	ldr	r3, [r4, #2324]
 	mov	r6, r5
-	ldrh	r1, [r4, #3148]
+	ldrh	r1, [r4, #3152]
 	ldrh	r2, [r4, #2344]
 	ldrh	r3, [r3, r5, lsl #1]
 	str	r1, [sp, #4]
 	ldr	r1, [r4, #2328]
-	ldr	r0, .L1707+8
+	ldr	r0, .L1663+8
 	ldrh	r1, [r1, r5, lsl #1]
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1598
-.L1603:
+	b	.L1554
+.L1559:
 	cmp	r3, #12
-	bls	.L1604
+	bls	.L1560
 	lsrs	r5, r5, #4
-	b	.L1602
-.L1604:
+	b	.L1558
+.L1560:
 	cmp	r3, #8
-	bls	.L1602
+	bls	.L1558
 	lsrs	r5, r5, #2
-	b	.L1602
-.L1667:
+	b	.L1558
+.L1623:
 	movs	r5, #1
-	b	.L1602
-.L1609:
+	b	.L1558
+.L1565:
 	movs	r3, #18
-	b	.L1703
-.L1607:
+	b	.L1659
+.L1563:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-	strh	r3, [r4, #3148]	@ movhi
-.L1606:
-	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1668
+	strh	r3, [r4, #3152]	@ movhi
+.L1562:
+	ldrh	r3, [r4, #3210]
+	cbz	r3, .L1624
 	adds	r5, r5, #32
 	uxth	r5, r5
-.L1668:
+.L1624:
 	movw	r6, #65535
-.L1612:
-	ldrh	r3, [r4, #2588]
+.L1568:
+	ldrh	r3, [r4, #2592]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1621
+	bne	.L1577
 	cmp	r6, r3
-	beq	.L1622
-	strh	r6, [r4, #2588]	@ movhi
-.L1623:
-	ldrh	r0, [r4, #2588]
+	beq	.L1578
+	strh	r6, [r4, #2592]	@ movhi
+.L1579:
+	ldrh	r0, [r4, #2592]
 	movw	r7, #65535
 	movs	r3, #0
-	strb	r3, [r4, #2596]
+	strb	r3, [r4, #2600]
 	cmp	r0, r7
-	beq	.L1621
+	beq	.L1577
 	bl	IsBlkInGcList
-	cbz	r0, .L1626
-	strh	r7, [r4, #2588]	@ movhi
-.L1626:
-	ldrh	r2, [r4, #2588]
+	cbz	r0, .L1582
+	strh	r7, [r4, #2592]	@ movhi
+.L1582:
+	ldrh	r2, [r4, #2592]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1621
-	ldr	r0, .L1707+12
+	beq	.L1577
+	ldr	r0, .L1663+12
 	bl	make_superblock
 	movs	r3, #0
-	ldrh	r2, [r4, #2588]
-	strh	r3, [r4, #2590]	@ movhi
-	strb	r3, [r4, #2594]
+	ldrh	r2, [r4, #2592]
+	strh	r3, [r4, #2594]	@ movhi
+	strb	r3, [r4, #2598]
 	strh	r3, [r4, #3666]	@ movhi
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r2, lsl #1]
 	strh	r3, [r4, #3668]	@ movhi
-.L1621:
-	ldrh	r3, [r4, #2588]
+.L1577:
+	ldrh	r3, [r4, #2592]
 	ldrh	r2, [r4, #2348]
 	cmp	r2, r3
-	beq	.L1627
+	beq	.L1583
 	ldrh	r2, [r4, #2396]
 	cmp	r2, r3
-	bne	.L1628
-.L1627:
+	bne	.L1584
+.L1583:
 	movw	r3, #65535
-	strh	r3, [r4, #2588]	@ movhi
-.L1628:
-	ldr	r7, .L1707
+	strh	r3, [r4, #2592]	@ movhi
+.L1584:
+	ldr	r7, .L1663
 	mov	r4, r7
-.L1658:
-	ldrh	r10, [r7, #2588]
+.L1614:
+	ldrh	r10, [r7, #2592]
 	movw	r3, #65535
 	cmp	r10, r3
-	bne	.L1629
+	bne	.L1585
 	movs	r3, #0
 	mov	fp, r3
-	str	r3, [r7, #3160]
-.L1630:
-	ldrh	r8, [r4, #3156]
+	str	r3, [r7, #3164]
+.L1586:
+	ldrh	r8, [r4, #3160]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	cmp	r2, r10
-	strh	r2, [r4, #2588]	@ movhi
-	bne	.L1631
+	strh	r2, [r4, #2592]	@ movhi
+	bne	.L1587
 	movs	r3, #0
 	movs	r0, #8
-	strh	r3, [r4, #3156]	@ movhi
-	b	.L1585
-.L1613:
+	strh	r3, [r4, #3160]	@ movhi
+	b	.L1541
+.L1569:
 	movs	r3, #0
 	ldrh	r2, [r4, #2344]
-	str	r3, [r4, #3160]
-	ldrh	r3, [r4, #3148]
+	str	r3, [r4, #3164]
+	ldrh	r3, [r4, #3152]
 	cmp	r2, r3
-	bls	.L1614
+	bls	.L1570
 	ldrh	r3, [r4, #3664]
-	cbnz	r3, .L1615
+	cbnz	r3, .L1571
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1616
-.L1615:
+	bcs	.L1572
+.L1571:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1704:
-	strh	r3, [r4, #3148]	@ movhi
+.L1660:
+	strh	r3, [r4, #3152]	@ movhi
 	bl	FtlReadRefresh
 	movs	r0, #0
 	bl	List_get_gc_head_node
@@ -11287,21 +10947,21 @@ rk_ftl_garbage_collect:
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #4
-	bls	.L1614
-.L1706:
+	bls	.L1570
+.L1662:
 	ldrh	r0, [r4, #3664]
-	b	.L1585
-.L1616:
+	b	.L1541
+.L1572:
 	movs	r3, #18
-	b	.L1704
-.L1614:
+	b	.L1660
+.L1570:
 	ldrh	r0, [r4, #3664]
 	cmp	r0, #0
-	bne	.L1618
+	bne	.L1574
 	ldrh	r5, [r4, #2572]
 	add	r3, r5, r5, lsl #1
 	asrs	r3, r3, #2
-	strh	r3, [r4, #3148]	@ movhi
+	strh	r3, [r4, #3152]	@ movhi
 	bl	List_get_gc_head_node
 	ldr	r3, [r4, #2324]
 	uxth	r0, r0
@@ -11311,43 +10971,43 @@ rk_ftl_garbage_collect:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1619
+	ble	.L1575
 	ldrh	r3, [r4, #2344]
 	subs	r5, r5, #1
 	cmp	r3, r5
-	blt	.L1619
+	blt	.L1575
 	bl	FtlReadRefresh
-	b	.L1706
-.L1619:
+	b	.L1662
+.L1575:
 	cmp	r2, #0
-	bne	.L1618
+	bne	.L1574
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2344]
 	adds	r0, r0, #1
-	b	.L1585
-.L1708:
+	b	.L1541
+.L1664:
 	.align	2
-.L1707:
+.L1663:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC113
-	.word	.LANCHOR0+2588
-.L1622:
-	ldrh	r3, [r4, #3202]
+	.word	.LANCHOR0+2592
+.L1578:
+	ldrh	r3, [r4, #3206]
 	cmp	r3, r6
-	beq	.L1623
+	beq	.L1579
 	ldr	r2, [r4, #2324]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1624
-	strh	r6, [r4, #3202]	@ movhi
-.L1624:
-	ldrh	r3, [r4, #3202]
-	strh	r3, [r4, #2588]	@ movhi
+	cbnz	r3, .L1580
+	strh	r6, [r4, #3206]	@ movhi
+.L1580:
+	ldrh	r3, [r4, #3206]
+	strh	r3, [r4, #2592]	@ movhi
 	movw	r3, #65535
-	strh	r3, [r4, #3202]	@ movhi
-	b	.L1623
-.L1631:
+	strh	r3, [r4, #3206]	@ movhi
+	b	.L1579
+.L1587:
 	str	r0, [sp, #16]
 	mov	r0, r2
 	str	r2, [sp, #12]
@@ -11355,100 +11015,100 @@ rk_ftl_garbage_collect:
 	bl	IsBlkInGcList
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #16]
-	cbz	r0, .L1632
-	strh	r8, [r4, #3156]	@ movhi
-	b	.L1630
-.L1632:
+	cbz	r0, .L1588
+	strh	r8, [r4, #3160]	@ movhi
+	b	.L1586
+.L1588:
 	ldrh	lr, [r4, #32]
 	uxth	r8, r8
 	ldrh	r1, [r4, #102]
 	uxth	r3, r3
 	ldr	r0, [r4, #2324]
-	strh	r8, [r4, #3156]	@ movhi
+	strh	r8, [r4, #3160]	@ movhi
 	mul	r1, lr, r1
 	ldrh	ip, [r0, r3, lsl #1]
 	add	lr, r1, r1, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1634
+	bgt	.L1590
 	cmp	r8, #48
-	bls	.L1635
+	bls	.L1591
 	cmp	ip, #8
-	bls	.L1635
-	ldrh	ip, [r4, #3192]
+	bls	.L1591
+	ldrh	ip, [r4, #3196]
 	cmp	ip, #35
-	bhi	.L1635
-.L1634:
-	strh	fp, [r4, #3156]	@ movhi
-.L1635:
+	bhi	.L1591
+.L1590:
+	strh	fp, [r4, #3160]	@ movhi
+.L1591:
 	ldrh	r3, [r0, r3, lsl #1]
 	cmp	r1, r3
-	bgt	.L1636
+	bgt	.L1592
 	cmp	r6, r10
-	bne	.L1636
-	ldrh	r1, [r4, #3156]
+	bne	.L1592
+	ldrh	r1, [r4, #3160]
 	cmp	r1, #3
-	bhi	.L1636
+	bhi	.L1592
 	movs	r3, #0
-	strh	r6, [r4, #2588]	@ movhi
-	strh	r3, [r4, #3156]	@ movhi
-	b	.L1706
-.L1636:
-	cbnz	r3, .L1637
+	strh	r6, [r4, #2592]	@ movhi
+	strh	r3, [r4, #3160]	@ movhi
+	b	.L1662
+.L1592:
+	cbnz	r3, .L1593
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r3, [r4, #3156]
+	ldrh	r3, [r4, #3160]
 	adds	r3, r3, #1
-	strh	r3, [r4, #3156]	@ movhi
-	b	.L1630
-.L1637:
+	strh	r3, [r4, #3160]	@ movhi
+	b	.L1586
+.L1593:
 	movs	r3, #0
-	strb	r3, [r4, #2596]
+	strb	r3, [r4, #2600]
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r2
-	bne	.L1638
+	bne	.L1594
 	mov	r2, #700
-	ldr	r1, .L1709
-	ldr	r0, .L1709+4
+	ldr	r1, .L1665
+	ldr	r0, .L1665+4
 	bl	sftl_printk
-.L1638:
-	ldrh	r2, [r4, #2588]
+.L1594:
+	ldrh	r2, [r4, #2592]
 	ldrh	r3, [r4, #2396]
 	cmp	r2, r3
-	bne	.L1639
+	bne	.L1595
 	movw	r2, #701
-	ldr	r1, .L1709
-	ldr	r0, .L1709+4
+	ldr	r1, .L1665
+	ldr	r0, .L1665+4
 	bl	sftl_printk
-.L1639:
-	ldrh	r2, [r4, #2588]
+.L1595:
+	ldrh	r2, [r4, #2592]
 	ldrh	r3, [r4, #2444]
 	cmp	r2, r3
-	bne	.L1640
+	bne	.L1596
 	movw	r2, #702
-	ldr	r1, .L1709
-	ldr	r0, .L1709+4
+	ldr	r1, .L1665
+	ldr	r0, .L1665+4
 	bl	sftl_printk
-.L1640:
-	ldr	r0, .L1709+8
+.L1596:
+	ldr	r0, .L1665+8
 	bl	make_superblock
-	ldrh	r1, [r4, #2588]
+	ldrh	r1, [r4, #2592]
 	movs	r3, #0
 	ldr	r2, [r4, #2324]
 	strh	r3, [r4, #3666]	@ movhi
 	ldrh	r2, [r2, r1, lsl #1]
-	strh	r3, [r4, #2590]	@ movhi
-	strb	r3, [r4, #2594]
+	strh	r3, [r4, #2594]	@ movhi
+	strb	r3, [r4, #2598]
 	strh	r2, [r4, #3668]	@ movhi
-.L1629:
+.L1585:
 	movs	r3, #1
-	str	r3, [r4, #3272]
+	str	r3, [r4, #3276]
 	ldrh	r3, [r4, #102]
 	str	r3, [sp, #16]
 	cmp	r9, #0
-	beq	.L1641
+	beq	.L1597
 	ldr	r2, [sp, #16]
 	ldrh	r3, [r4, #32]
-	ldrh	r1, [r4, #2588]
+	ldrh	r1, [r4, #2592]
 	muls	r3, r2, r3
 	ldr	r2, [r4, #2324]
 	ldrh	r2, [r2, r1, lsl #1]
@@ -11457,8 +11117,8 @@ rk_ftl_garbage_collect:
 	addmi	r3, r3, #3
 	add	r5, r5, r3, asr #2
 	uxth	r5, r5
-.L1641:
-	ldrh	r3, [r4, #2590]
+.L1597:
+	ldrh	r3, [r4, #2594]
 	ldr	r1, [sp, #16]
 	adds	r2, r3, r5
 	cmp	r2, r1
@@ -11468,29 +11128,29 @@ rk_ftl_garbage_collect:
 	mov	r3, #0
 	it	gt
 	uxthgt	r5, r5
-.L1705:
+.L1661:
 	str	r3, [sp, #20]
 	ldrh	r3, [sp, #20]
 	cmp	r5, r3
-	bls	.L1652
+	bls	.L1608
 	ldr	r3, [sp, #20]
 	movw	r10, #65535
-	ldrh	r8, [r7, #2590]
+	ldrh	r8, [r7, #2594]
 	mov	fp, #20
 	ldrh	ip, [r7, #32]
-	ldr	r0, [r7, #3180]
+	ldr	r0, [r7, #3184]
 	add	r8, r8, r3
-	ldr	r3, .L1709+12
+	ldr	r3, .L1665+12
 	str	r3, [sp, #24]
 	movs	r3, #0
 	str	r3, [sp, #12]
-	b	.L1653
-.L1646:
+	b	.L1609
+.L1602:
 	ldr	r1, [sp, #24]
 	ldrh	r2, [r1, #2]!
 	cmp	r2, r10
 	str	r1, [sp, #24]
-	beq	.L1645
+	beq	.L1601
 	ldr	r1, [sp, #12]
 	orr	r2, r8, r2, lsl #10
 	mla	lr, fp, r1, r0
@@ -11499,76 +11159,76 @@ rk_ftl_garbage_collect:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1645:
+.L1601:
 	adds	r3, r3, #1
-.L1653:
+.L1609:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1646
+	bhi	.L1602
 	mov	fp, #0
-	ldrb	r2, [r7, #2596]	@ zero_extendqisi2
+	ldrb	r2, [r7, #2600]	@ zero_extendqisi2
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
-.L1647:
+.L1603:
 	ldr	r2, [sp, #12]
 	uxth	r3, fp
 	cmp	r2, r3
-	bhi	.L1651
+	bhi	.L1607
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	b	.L1705
-.L1651:
+	b	.L1661
+.L1607:
 	mov	r8, #20
-	ldr	r3, [r7, #3180]
+	ldr	r3, [r7, #3184]
 	mul	r8, r8, fp
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L1648
+	beq	.L1604
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1648
+	bne	.L1604
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1649
+	bne	.L1605
 	mov	r2, #736
-	ldr	r1, .L1709
-	ldr	r0, .L1709+4
+	ldr	r1, .L1665
+	ldr	r0, .L1665+4
 	str	r3, [sp, #24]
 	bl	sftl_printk
 	ldr	r3, [sp, #24]
-.L1649:
+.L1605:
 	movs	r2, #0
 	mov	r0, r3
 	add	r1, sp, #36
 	bl	log2phys
-	ldr	r0, [r4, #3180]
+	ldr	r0, [r4, #3184]
 	ldr	r3, [sp, #36]
 	add	r0, r0, r8
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1648
+	bne	.L1604
 	ldrh	r3, [r4, #3666]
 	movs	r2, #20
-	ldr	r1, [r4, #3164]
+	ldr	r1, [r4, #3168]
 	str	r2, [sp, #28]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3666]	@ movhi
-	ldr	r3, [r4, #3292]
+	ldr	r3, [r4, #3296]
 	mla	r3, r2, r1, r3
 	ldr	r1, [r0, #16]
 	str	r1, [r3, #16]
 	str	r3, [sp, #24]
 	bl	Ftl_get_new_temp_ppa
 	ldr	r3, [sp, #24]
-	ldr	r1, [r4, #3292]
+	ldr	r1, [r4, #3296]
 	ldr	r2, [sp, #28]
 	str	r0, [r3, #4]
-	ldr	r3, [r4, #3164]
+	ldr	r3, [r4, #3168]
 	mla	r3, r2, r3, r1
-	ldr	r2, [r4, #3180]
+	ldr	r2, [r4, #3184]
 	add	r2, r2, r8
 	ldr	r1, [r2, #8]
 	str	r1, [r3, #8]
@@ -11580,193 +11240,122 @@ rk_ftl_garbage_collect:
 	ldrh	r3, [r4, #2444]
 	strh	r3, [r10, #2]	@ movhi
 	ldr	r3, [r4, #2544]
-	ldr	r0, [r4, #3180]
+	ldr	r0, [r4, #3184]
 	str	r3, [r10, #4]
-	ldr	r3, [r4, #3164]
+	ldr	r3, [r4, #3168]
 	add	r0, r0, r8
 	adds	r3, r3, #1
-	str	r3, [r4, #3164]
+	str	r3, [r4, #3168]
 	bl	FtlGcBufAlloc
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
-	ldr	r3, [r4, #3164]
+	ldr	r3, [r4, #3168]
 	cmp	r2, r3
-	beq	.L1650
+	beq	.L1606
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1648
-.L1650:
+	cbnz	r3, .L1604
+.L1606:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1648
-	ldr	r3, .L1709+16
+	cbz	r0, .L1604
+	ldr	r3, .L1665+16
 	movs	r2, #0
-	str	r2, [r3, #3272]
+	str	r2, [r3, #3276]
 	ldrh	r0, [r3, #3664]
-	b	.L1585
-.L1648:
+	b	.L1541
+.L1604:
 	add	fp, fp, #1
-	b	.L1647
-.L1652:
-	ldrh	r3, [r7, #2590]
+	b	.L1603
+.L1608:
+	ldrh	r3, [r7, #2594]
 	add	r5, r5, r3
 	ldr	r3, [sp, #16]
 	uxth	r5, r5
 	cmp	r3, r5
-	strh	r5, [r7, #2590]	@ movhi
-	bhi	.L1654
-	ldr	r3, [r7, #3164]
-	cbz	r3, .L1655
+	strh	r5, [r7, #2594]	@ movhi
+	bhi	.L1610
+	ldr	r3, [r7, #3168]
+	cbz	r3, .L1611
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1655
+	cbz	r0, .L1611
 	movs	r3, #0
 	ldrh	r0, [r7, #3664]
-	str	r3, [r7, #3272]
-	b	.L1585
-.L1655:
+	str	r3, [r7, #3276]
+	b	.L1541
+.L1611:
 	ldrh	r1, [r7, #3666]
-	cbnz	r1, .L1656
-	ldrh	r2, [r7, #2588]
+	cbnz	r1, .L1612
+	ldrh	r2, [r7, #2592]
 	ldr	r3, [r7, #2324]
 	ldrh	r0, [r3, r2, lsl #1]
-	cbz	r0, .L1656
+	cbz	r0, .L1612
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	ldrh	r0, [r7, #2588]
+	ldrh	r0, [r7, #2592]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1656:
+.L1612:
 	movw	r3, #65535
-	strh	r3, [r7, #2588]	@ movhi
-.L1654:
+	strh	r3, [r7, #2592]	@ movhi
+.L1610:
 	movs	r3, #0
-	str	r3, [r7, #3272]
+	str	r3, [r7, #3276]
 	ldrh	r3, [r7, #2344]
 	cmp	r3, #2
-	bhi	.L1657
+	bhi	.L1613
 	ldrh	r5, [r7, #102]
-	b	.L1658
-.L1657:
+	b	.L1614
+.L1613:
 	ldrh	r0, [r7, #3664]
 	cmp	r0, #0
-	bne	.L1585
+	bne	.L1541
 	adds	r0, r3, #1
-	b	.L1585
-.L1662:
+	b	.L1541
+.L1618:
 	movs	r0, #0
-	b	.L1585
-.L1591:
+	b	.L1541
+.L1547:
 	cmp	r9, #0
-	beq	.L1660
-.L1601:
+	beq	.L1616
+.L1557:
 	ldrh	r2, [r4, #2444]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1671
-.L1661:
-	ldrh	r3, [r4, #3202]
+	bne	.L1627
+.L1617:
+	ldrh	r3, [r4, #3206]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1671
+	bne	.L1627
 	cmp	r6, r3
-	bne	.L1671
-	ldrh	r3, [r4, #2588]
+	bne	.L1627
+	ldrh	r3, [r4, #2592]
 	cmp	r3, r6
-	beq	.L1613
-.L1618:
+	beq	.L1569
+.L1574:
 	movw	r6, #65535
-.L1671:
+.L1627:
 	movs	r5, #1
-	b	.L1612
-.L1593:
+	b	.L1568
+.L1549:
 	cmp	r9, #0
-	beq	.L1660
+	beq	.L1616
 	movw	r6, #65535
-	b	.L1661
-.L1592:
+	b	.L1617
+.L1548:
 	cmp	r9, #0
-	bne	.L1618
-	b	.L1660
-.L1710:
+	bne	.L1574
+	b	.L1616
+.L1666:
 	.align	2
-.L1709:
-	.word	.LANCHOR1+583
+.L1665:
+	.word	.LANCHOR1+568
 	.word	.LC1
-	.word	.LANCHOR0+2588
-	.word	.LANCHOR0+2602
+	.word	.LANCHOR0+2592
+	.word	.LANCHOR0+2606
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	1
-	.global	sftl_init
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	sftl_init, %function
-sftl_init:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mov	r3, #-1
-	ldr	r4, .L1717
-	ldr	r5, .L1717+4
-	ldr	r1, .L1717+8
-	ldr	r0, .L1717+12
-	str	r3, [r5]
-	bl	sftl_printk
-	mov	r0, r4
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	r0, [r4, #36]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbnz	r0, .L1715
-	bl	FtlSysBlkInit
-	cbnz	r0, .L1715
-	movs	r3, #1
-	str	r3, [r5]
-	ldrh	r3, [r4, #2344]
-	cmp	r3, #15
-	bhi	.L1715
-	movw	r4, #8129
-.L1714:
-	movs	r1, #1
-	movs	r0, #0
-	bl	rk_ftl_garbage_collect
-	subs	r4, r4, #1
-	bne	.L1714
-.L1715:
-	movs	r0, #0
-	pop	{r3, r4, r5, pc}
-.L1718:
-	.align	2
-.L1717:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LC70
-	.word	.LC71
-	.fnend
-	.size	sftl_init, .-sftl_init
-	.align	1
-	.global	sftl_gc
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	sftl_gc, %function
-sftl_gc:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movs	r1, #1
-	mov	r0, r1
-	b	rk_ftl_garbage_collect
-	.fnend
-	.size	sftl_gc, .-sftl_gc
-	.align	1
-	.global	FtlRead
+	.global	FtlRead
 	.syntax unified
 	.thumb
 	.thumb_func
@@ -11784,30 +11373,30 @@ FtlRead:
 	mov	r7, r1
 	mov	r10, r3
 	str	r2, [sp, #20]
-	bne	.L1721
+	bne	.L1668
 	mov	r2, r3
 	ldr	r1, [sp, #20]
 	add	r0, r7, #256
 	bl	FtlVendorPartRead
 	mov	r8, r0
-.L1720:
+.L1667:
 	mov	r0, r8
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1721:
+.L1668:
 	ldr	r3, [sp, #20]
-	ldr	r4, .L1753
+	ldr	r4, .L1700
 	adds	r3, r1, r3
 	str	r3, [sp, #8]
 	ldr	r2, [sp, #8]
 	ldr	r3, [r4, #140]
 	cmp	r2, r3
-	bhi	.L1742
-	ldr	r3, .L1753+4
+	bhi	.L1689
+	ldr	r3, .L1700+4
 	ldr	r3, [r3]
 	adds	r5, r3, #1
-	beq	.L1743
+	beq	.L1690
 	ldrh	r5, [r4, #58]
 	mov	r0, r7
 	mov	r9, #0
@@ -11836,48 +11425,48 @@ FtlRead:
 	ldr	r3, [r4, #2508]
 	add	r3, r3, r2
 	str	r3, [r4, #2508]
-.L1723:
+.L1670:
 	ldr	r3, [sp, #4]
-	cbnz	r3, .L1740
-	ldr	r3, .L1753
-	ldrh	r2, [r3, #3206]
-	cbnz	r2, .L1741
+	cbnz	r3, .L1687
+	ldr	r3, .L1700
+	ldrh	r2, [r3, #3210]
+	cbnz	r2, .L1688
 	ldrh	r3, [r3, #2344]
 	cmp	r3, #31
-	bhi	.L1720
-.L1741:
+	bhi	.L1667
+.L1688:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1720
-.L1740:
+	b	.L1667
+.L1687:
 	movs	r2, #0
 	add	r1, sp, #52
 	mov	r0, r5
 	bl	log2phys
 	ldr	r2, [sp, #52]
 	adds	r0, r2, #1
-	bne	.L1724
+	bne	.L1671
 	mov	fp, #0
-.L1725:
+.L1672:
 	ldrh	r0, [r4, #58]
 	cmp	fp, r0
-	bcc	.L1727
-.L1728:
+	bcc	.L1674
+.L1675:
 	ldr	r3, [sp, #4]
 	adds	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #4]
-	beq	.L1732
+	beq	.L1679
 	ldrh	r3, [r4, #32]
 	cmp	r6, r3, lsl #2
-	bne	.L1723
-.L1732:
+	bne	.L1670
+.L1679:
 	cmp	r6, #0
-	beq	.L1723
+	beq	.L1670
 	movs	r2, #0
 	mov	r1, r6
-	ldr	r0, [r4, #3288]
+	ldr	r0, [r4, #3292]
 	mov	fp, #0
 	bl	FlashReadPages
 	lsl	r3, r9, #9
@@ -11888,82 +11477,82 @@ FtlRead:
 	ldr	r3, [sp, #28]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1739:
+.L1686:
 	movs	r3, #20
-	ldr	r2, [r4, #3288]
+	ldr	r2, [r4, #3292]
 	mul	r3, r3, fp
 	ldr	r0, [sp, #12]
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1734
+	bne	.L1681
 	ldr	r1, [r2, #8]
-	ldr	r2, [r4, #3312]
+	ldr	r2, [r4, #3316]
 	cmp	r1, r2
-	bne	.L1735
+	bne	.L1682
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1752:
+.L1699:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1735:
-	ldr	ip, [r4, #3288]
+.L1682:
+	ldr	ip, [r4, #3292]
 	add	r2, ip, r3
 	ldr	r0, [r2, #12]
 	ldr	r1, [r2, #16]
 	ldr	r0, [r0, #8]
 	cmp	r1, r0
 	ittt	ne
-	ldrne	r1, [r4, #2708]
+	ldrne	r1, [r4, #2712]
 	addne	r1, r1, #1
-	strne	r1, [r4, #2708]
+	strne	r1, [r4, #2712]
 	ldr	r0, [ip, r3]
 	adds	r1, r0, #1
 	itttt	eq
-	ldreq	r1, [r4, #2708]
+	ldreq	r1, [r4, #2712]
 	moveq	r8, r0
 	addeq	r1, r1, #1
-	streq	r1, [r4, #2708]
+	streq	r1, [r4, #2712]
 	ldr	r3, [ip, r3]
 	cmp	r3, #256
-	bne	.L1738
+	bne	.L1685
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1738:
+.L1685:
 	add	fp, fp, #1
 	cmp	r6, fp
-	bne	.L1739
+	bne	.L1686
 	movs	r6, #0
-	b	.L1723
-.L1727:
+	b	.L1670
+.L1674:
 	mla	r0, r0, r5, fp
 	cmp	r7, r0
-	bhi	.L1726
+	bhi	.L1673
 	ldr	r3, [sp, #8]
 	cmp	r3, r0
-	bls	.L1726
+	bls	.L1673
 	subs	r0, r0, r7
 	mov	r1, #512
 	add	r0, r10, r0, lsl #9
 	bl	__memzero
-.L1726:
+.L1673:
 	add	fp, fp, #1
-	b	.L1725
-.L1724:
-	ldr	r3, [r4, #3288]
+	b	.L1672
+.L1671:
+	ldr	r3, [r4, #3292]
 	movs	r1, #20
 	ldrh	fp, [r4, #58]
 	mla	r3, r1, r6, r3
 	str	r2, [r3, #4]
 	ldr	r2, [sp, #12]
 	cmp	r5, r2
-	bne	.L1729
-	ldr	r2, [r4, #3312]
+	bne	.L1676
+	ldr	r2, [r4, #3316]
 	mov	r1, fp
 	mov	r0, r7
 	str	r3, [sp, #32]
@@ -11979,45 +11568,45 @@ FtlRead:
 	cmp	r3, fp
 	str	r3, [sp, #28]
 	ldr	r3, [sp, #32]
-	bne	.L1730
+	bne	.L1677
 	str	r10, [r3, #8]
-.L1730:
+.L1677:
 	ldrh	r2, [r4, #112]
-	ldr	r1, [r4, #3336]
+	ldr	r1, [r4, #3340]
 	str	r5, [r3, #16]
 	muls	r2, r6, r2
 	adds	r6, r6, #1
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1728
-.L1729:
+	b	.L1675
+.L1676:
 	ldr	r2, [sp, #16]
 	cmp	r5, r2
-	bne	.L1731
-	ldr	r2, [r4, #3316]
+	bne	.L1678
+	ldr	r2, [r4, #3320]
 	ldr	r1, [sp, #8]
 	str	r2, [r3, #8]
 	mul	r2, fp, r5
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1730
-.L1751:
+	bne	.L1677
+.L1698:
 	subs	r2, r2, r7
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1730
-.L1731:
+	b	.L1677
+.L1678:
 	mul	r2, r5, fp
-	b	.L1751
-.L1734:
+	b	.L1698
+.L1681:
 	ldr	r0, [sp, #16]
 	cmp	r0, r1
-	bne	.L1735
+	bne	.L1682
 	ldr	r1, [r2, #8]
-	ldr	r2, [r4, #3316]
+	ldr	r2, [r4, #3320]
 	cmp	r1, r2
-	bne	.L1735
+	bne	.L1682
 	str	r3, [sp, #44]
 	ldrh	r0, [r4, #58]
 	ldr	r3, [sp, #16]
@@ -12025,16 +11614,16 @@ FtlRead:
 	muls	r0, r3, r0
 	subs	r0, r0, r7
 	add	r0, r10, r0, lsl #9
-	b	.L1752
-.L1742:
+	b	.L1699
+.L1689:
 	mov	r8, #-1
-	b	.L1720
-.L1743:
+	b	.L1667
+.L1690:
 	mov	r8, r3
-	b	.L1720
-.L1754:
+	b	.L1667
+.L1701:
 	.align	2
-.L1753:
+.L1700:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -12077,26 +11666,26 @@ FtlWrite:
 	mov	r10, r1
 	str	r2, [sp, #12]
 	str	r3, [sp, #8]
-	bne	.L1757
+	bne	.L1704
 	mov	r2, r3
 	ldr	r1, [sp, #12]
 	add	r0, r10, #256
 	bl	FtlVendorPartWrite
-.L1756:
+.L1703:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1757:
+.L1704:
 	ldr	r3, [sp, #12]
-	ldr	r5, .L1808
+	ldr	r5, .L1755
 	adds	r6, r1, r3
 	ldr	r3, [r5, #140]
 	cmp	r6, r3
-	bhi	.L1794
-	ldr	r4, .L1808+4
+	bhi	.L1741
+	ldr	r4, .L1755+4
 	ldr	r0, [r4]
 	adds	r7, r0, #1
-	beq	.L1756
+	beq	.L1703
 	ldrh	r7, [r5, #58]
 	mov	r3, #2048
 	str	r3, [r5, #3672]
@@ -12122,68 +11711,68 @@ FtlWrite:
 	add	r3, r3, r2
 	str	r3, [r5, #2516]
 	ldr	r3, [r4, #8]
-	cbz	r3, .L1796
+	cbz	r3, .L1743
 	ldrh	r2, [r5, #2352]
 	addw	r3, r5, #2348
 	addw	r5, r5, #2396
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1759:
+.L1706:
 	ldr	r7, [sp, #4]
-	ldr	r4, .L1808
-.L1760:
+	ldr	r4, .L1755
+.L1707:
 	ldr	r3, [sp]
-	cbnz	r3, .L1789
+	cbnz	r3, .L1736
 	mov	r0, r3
 	ldr	r1, [sp, #24]
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #5
-	bls	.L1790
-.L1792:
+	bls	.L1737
+.L1739:
 	movs	r0, #0
-	b	.L1756
-.L1796:
+	b	.L1703
+.L1743:
 	addw	r5, r5, #2348
-	b	.L1759
-.L1789:
+	b	.L1706
+.L1736:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1761
+	bcc	.L1708
 	mov	r2, #1016
-	ldr	r1, .L1808+8
-	ldr	r0, .L1808+12
+	ldr	r1, .L1755+8
+	ldr	r0, .L1755+12
 	bl	sftl_printk
-.L1761:
+.L1708:
 	ldrh	r2, [r5, #4]
-	cbnz	r2, .L1762
-	ldr	r3, .L1808+16
-	ldr	r6, .L1808+4
+	cbnz	r2, .L1709
+	ldr	r3, .L1755+16
+	ldr	r6, .L1755+4
 	cmp	r5, r3
-	bne	.L1763
+	bne	.L1710
 	ldrh	r8, [r4, #2400]
 	cmp	r8, #0
-	bne	.L1764
+	bne	.L1711
 	add	r0, r5, #48
 	bl	allocate_new_data_superblock
 	str	r8, [r6, #8]
-.L1764:
-	ldr	r5, .L1808+16
-	ldr	r0, .L1808+16
+.L1711:
+	ldr	r5, .L1755+16
+	ldr	r0, .L1755+16
 	bl	allocate_new_data_superblock
 	ldr	r2, [r6, #8]
 	add	r3, r5, #48
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1765:
+.L1712:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1762
+	cbnz	r3, .L1709
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1762:
+.L1709:
 	ldrh	r2, [r5, #4]
 	ldr	r3, [sp]
 	cmp	r2, r3
@@ -12198,49 +11787,49 @@ FtlWrite:
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1766
+	bcc	.L1713
 	movw	r2, #1049
-	ldr	r1, .L1808+8
-	ldr	r0, .L1808+12
+	ldr	r1, .L1755+8
+	ldr	r0, .L1755+12
 	bl	sftl_printk
-.L1766:
+.L1713:
 	mov	fp, #0
-.L1767:
+.L1714:
 	ldr	r3, [sp, #36]
 	cmp	fp, r3
-	bne	.L1787
-.L1768:
+	bne	.L1734
+.L1715:
 	mov	r3, r5
 	movs	r2, #0
 	mov	r1, fp
-	ldr	r0, [r4, #3296]
+	ldr	r0, [r4, #3300]
 	bl	FtlProgPages
 	ldr	r3, [sp]
 	cmp	fp, r3
-	bls	.L1788
+	bls	.L1735
 	movw	r2, #1126
-	ldr	r1, .L1808+8
-	ldr	r0, .L1808+12
+	ldr	r1, .L1755+8
+	ldr	r0, .L1755+12
 	bl	sftl_printk
-.L1788:
+.L1735:
 	ldr	r3, [sp]
 	sub	r3, r3, fp
 	str	r3, [sp]
-	b	.L1760
-.L1763:
+	b	.L1707
+.L1710:
 	str	r2, [r6, #8]
 	ldrh	r2, [r4, #2352]
-	cbnz	r2, .L1799
+	cbnz	r2, .L1746
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1765
-.L1799:
+	b	.L1712
+.L1746:
 	mov	r5, r3
-	b	.L1762
-.L1787:
+	b	.L1709
+.L1734:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1768
+	beq	.L1715
 	movs	r2, #0
 	add	r1, sp, #40
 	mov	r0, r7
@@ -12250,7 +11839,7 @@ FtlWrite:
 	mul	r8, r8, fp
 	bl	get_new_active_ppa
 	ldrh	r2, [r4, #112]
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3300]
 	mul	r1, r2, fp
 	add	r3, r3, r8
 	str	r0, [r3, #4]
@@ -12258,7 +11847,7 @@ FtlWrite:
 	bic	r1, r1, #3
 	str	r1, [sp, #28]
 	ldr	r0, [sp, #28]
-	ldr	r1, [r4, #3336]
+	ldr	r1, [r4, #3340]
 	add	r9, r1, r0
 	str	r1, [sp, #32]
 	str	r9, [r3, #12]
@@ -12267,10 +11856,10 @@ FtlWrite:
 	bl	ftl_memset
 	ldr	r3, [sp, #4]
 	cmp	r7, r3
-	beq	.L1769
+	beq	.L1716
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
-	bne	.L1804
+	bne	.L1751
 	ldrh	r2, [r4, #58]
 	ldr	r3, [sp, #12]
 	smulbb	r2, r2, r7
@@ -12279,8 +11868,8 @@ FtlWrite:
 	str	r3, [sp, #16]
 	subs	r6, r6, r2
 	uxth	r6, r6
-	b	.L1772
-.L1769:
+	b	.L1719
+.L1716:
 	ldrh	r6, [r4, #58]
 	mov	r0, r10
 	mov	r1, r6
@@ -12291,13 +11880,13 @@ FtlWrite:
 	cmp	r6, r3
 	it	cs
 	movcs	r6, r3
-.L1772:
+.L1719:
 	ldrh	r3, [r4, #58]
 	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	bne	.L1773
+	bne	.L1720
 	cmp	r7, r3
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3300]
 	itte	ne
 	mulne	r6, r6, r7
 	ldrne	r2, [sp, #8]
@@ -12308,16 +11897,16 @@ FtlWrite:
 	streq	r2, [r3, #8]
 	addne	r6, r2, r6, lsl #9
 	strne	r6, [r3, #8]
-.L1775:
+.L1722:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1784
+	bcc	.L1731
 	movw	r2, #1117
-	ldr	r1, .L1808+8
-	ldr	r0, .L1808+12
+	ldr	r1, .L1755+8
+	ldr	r0, .L1755+12
 	bl	sftl_printk
-.L1784:
+.L1731:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
@@ -12336,21 +11925,21 @@ FtlWrite:
 	str	r3, [r9, #12]
 	ldrh	r3, [r5]
 	strh	r3, [r9, #2]	@ movhi
-	b	.L1767
-.L1773:
+	b	.L1714
+.L1720:
 	cmp	r7, r3
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3300]
 	ite	eq
-	ldreq	r2, [r4, #3312]
-	ldrne	r2, [r4, #3316]
+	ldreq	r2, [r4, #3316]
+	ldrne	r2, [r4, #3320]
 	add	r3, r3, r8
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #40]
 	adds	r1, r3, #1
-	beq	.L1778
+	beq	.L1725
 	str	r3, [sp, #48]
 	movs	r1, #1
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3300]
 	add	r0, sp, #44
 	str	r7, [sp, #60]
 	add	r3, r3, r8
@@ -12362,72 +11951,72 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #44]
 	adds	r3, r3, #1
-	bne	.L1779
-	ldr	r3, [r4, #2708]
+	bne	.L1726
+	ldr	r3, [r4, #2712]
 	adds	r3, r3, #1
-	str	r3, [r4, #2708]
-.L1782:
+	str	r3, [r4, #2712]
+.L1729:
 	ldr	r3, [sp, #4]
 	lsls	r2, r6, #9
 	cmp	r7, r3
-	bne	.L1783
-	ldr	r3, [r4, #3296]
+	bne	.L1730
+	ldr	r3, [r4, #3300]
 	ldr	r1, [sp, #8]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #16]
 	add	r0, r0, r3, lsl #9
-.L1806:
+.L1753:
 	bl	ftl_memcpy
-	b	.L1775
-.L1809:
+	b	.L1722
+.L1756:
 	.align	2
-.L1808:
+.L1755:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR1+606
+	.word	.LANCHOR1+591
 	.word	.LC1
 	.word	.LANCHOR0+2348
-.L1779:
+.L1726:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1781
-	ldr	r3, [r4, #2708]
+	beq	.L1728
+	ldr	r3, [r4, #2712]
 	mov	r2, r7
-	ldr	r0, .L1810
+	ldr	r0, .L1757
 	adds	r3, r3, #1
-	str	r3, [r4, #2708]
+	str	r3, [r4, #2712]
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1781:
+.L1728:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1782
+	beq	.L1729
 	movw	r2, #1102
-	ldr	r1, .L1810+4
-	ldr	r0, .L1810+8
+	ldr	r1, .L1757+4
+	ldr	r0, .L1757+8
 	bl	sftl_printk
-	b	.L1782
-.L1778:
-	ldr	r3, [r4, #3296]
+	b	.L1729
+.L1725:
+	ldr	r3, [r4, #3300]
 	movs	r1, #0
 	ldrh	r2, [r4, #110]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1782
-.L1783:
+	b	.L1729
+.L1730:
 	ldrh	r1, [r4, #58]
 	ldr	r0, [sp, #8]
-	ldr	r3, [r4, #3296]
+	ldr	r3, [r4, #3300]
 	muls	r1, r7, r1
 	add	r3, r3, r8
 	sub	r1, r1, r10
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1806
-.L1804:
-	ldr	r3, [r4, #3296]
+	b	.L1753
+.L1751:
+	ldr	r3, [r4, #3300]
 	ldr	r2, [sp, #8]
 	add	r8, r8, r3
 	ldrh	r3, [r4, #58]
@@ -12435,234 +12024,765 @@ FtlWrite:
 	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
 	str	r3, [r8, #8]
-	b	.L1775
-.L1790:
+	b	.L1722
+.L1737:
 	mov	r5, #256
 	movw	r6, #65535
-.L1793:
-	ldrh	r3, [r4, #2588]
+.L1740:
+	ldrh	r3, [r4, #2592]
 	cmp	r3, r6
-	bne	.L1791
-	ldrh	r3, [r4, #3202]
+	bne	.L1738
+	ldrh	r3, [r4, #3206]
 	cmp	r3, r6
-	bne	.L1791
+	bne	.L1738
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1791:
+.L1738:
 	movs	r1, #1
 	movs	r3, #128
 	mov	r0, r1
-	strh	r3, [r4, #3150]	@ movhi
-	strh	r3, [r4, #3148]	@ movhi
+	strh	r3, [r4, #3154]	@ movhi
+	strh	r3, [r4, #3152]	@ movhi
+	bl	rk_ftl_garbage_collect
+	movs	r1, #1
+	movs	r0, #0
 	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r4, #2344]
+	cmp	r3, #2
+	bhi	.L1739
+	subs	r5, r5, #1
+	bne	.L1740
+	b	.L1739
+.L1741:
+	mov	r0, #-1
+	b	.L1703
+.L1758:
+	.align	2
+.L1757:
+	.word	.LC114
+	.word	.LANCHOR1+591
+	.word	.LC1
+	.fnend
+	.size	FtlWrite, .-FtlWrite
+	.align	1
+	.global	sftl_gc
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	sftl_gc, %function
+sftl_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r1, #1
+	mov	r0, r1
+	b	rk_ftl_garbage_collect
+	.fnend
+	.size	sftl_gc, .-sftl_gc
+	.align	1
+	.global	FtlLoadSysInfo
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #16
+	movs	r1, #0
+	ldr	r4, .L1787
+	ldr	r3, [r4, #3304]
+	ldrh	r2, [r4, #40]
+	ldr	r0, [r4, #2324]
+	str	r3, [r4, #3464]
+	ldr	r3, [r4, #3336]
+	lsls	r2, r2, #1
+	str	r3, [r4, #3468]
+	bl	ftl_memset
+	ldrh	r0, [r4, #2576]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L1761
+.L1772:
+	mov	r0, #-1
+.L1760:
+	add	sp, sp, #16
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1761:
 	movs	r1, #1
+	ldr	r8, .L1787+20
+	bl	FtlGetLastWrittenPage
+	ldr	r9, .L1787+4
+	add	r7, r4, #3456
+	ldrsh	r6, [r4, #2576]
+	sxth	r5, r0
+	adds	r0, r0, #1
+	strh	r0, [r4, #2578]	@ movhi
+.L1763:
+	cmp	r5, #0
+	bge	.L1769
+	movw	r2, #1465
+	ldr	r1, .L1787+4
+	ldr	r0, .L1787+8
+	bl	sftl_printk
+	b	.L1768
+.L1769:
+	orr	r3, r5, r6, lsl #10
+	movs	r2, #1
+	mov	r1, r2
+	str	r3, [r4, #3460]
+	mov	r0, r7
+	ldr	r3, [r4, #3304]
+	str	r3, [r4, #3464]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3468]
+	ldr	r10, [r3, #12]
+	cmp	r10, #0
+	beq	.L1764
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3464]
+	bl	js_hash
+	cmp	r10, r0
+	beq	.L1764
+	ldrh	r3, [r4, #2580]
+	mov	r2, r6
+	str	r0, [sp, #8]
+	mov	r1, r9
+	str	r10, [sp, #4]
+	str	r3, [sp]
+	mov	r3, r5
+	ldr	r0, .L1787+12
+	bl	sftl_printk
+	cbnz	r5, .L1765
+	ldrh	r3, [r4, #2580]
+	cmp	r6, r3
+	beq	.L1765
+	ldrh	r5, [r4, #104]
+	sxth	r6, r3
+.L1767:
+	subs	r5, r5, #1
+	sxth	r5, r5
+	b	.L1763
+.L1765:
+	mov	r3, #-1
+	str	r3, [r4, #3456]
+.L1764:
+	ldr	r3, [r4, #3456]
+	adds	r3, r3, #1
+	beq	.L1767
+	ldr	r3, [r4, #3304]
+	ldr	r3, [r3]
+	cmp	r3, r8
+	bne	.L1767
+	ldr	r3, [r4, #3336]
+	ldrh	r2, [r3]
+	movw	r3, #61604
+	cmp	r2, r3
+	bne	.L1767
+.L1768:
+	ldrh	r3, [r4, #40]
+	ldrh	r2, [r4, #110]
+	adds	r3, r3, #24
+	cmp	r2, r3, lsl #1
+	bcs	.L1771
+	movw	r2, #1467
+	ldr	r1, .L1787+4
+	ldr	r0, .L1787+8
+	bl	sftl_printk
+.L1771:
+	movs	r2, #48
+	ldr	r1, [r4, #3464]
+	ldr	r0, .L1787+16
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #40]
+	ldr	r1, [r4, #3464]
+	ldr	r0, [r4, #2324]
+	lsls	r2, r2, #1
+	adds	r1, r1, #48
+	bl	ftl_memcpy
+	ldrh	r1, [r4, #40]
+	ldr	r3, [r4, #3464]
+	ldr	r0, [r4, #24]
+	lsrs	r2, r1, #3
+	adds	r1, r1, #24
+	lsls	r1, r1, #1
+	adds	r2, r2, #4
+	bic	r1, r1, #3
+	add	r1, r1, r3
+	bl	ftl_memcpy
+	ldr	r2, [r4, #2268]
+	ldr	r3, .L1787+20
+	cmp	r2, r3
+	bne	.L1772
+	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
+	ldrh	r3, [r4, #54]
+	ldrh	r5, [r4, #2276]
+	cmp	r2, r3
+	strh	r5, [r4, #2582]	@ movhi
+	bne	.L1772
+	ldrh	r3, [r4, #102]
+	ldrh	r2, [r4, #58]
+	ldr	r6, [r4, #44]
+	ldrh	r0, [r4, #158]
+	muls	r3, r5, r3
+	str	r5, [r4, #3676]
+	ldrh	r1, [r4, #32]
+	subs	r0, r6, r0
+	subs	r0, r0, r5
+	str	r3, [r4, #2504]
+	muls	r3, r2, r3
+	str	r3, [r4, #140]
+	bl	__aeabi_uidiv
+	cmp	r5, r6
+	strh	r0, [r4, #2572]	@ movhi
+	bls	.L1773
+	movw	r2, #1489
+	ldr	r1, .L1787+4
+	ldr	r0, .L1787+8
+	bl	sftl_printk
+.L1773:
+	ldrh	r3, [r4, #2284]
+	ldrh	r1, [r4, #2282]
+	lsrs	r2, r3, #6
+	and	r3, r3, #63
+	strb	r3, [r4, #2354]
+	strh	r2, [r4, #2350]	@ movhi
+	ldrh	r2, [r4, #2286]
+	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
+	strh	r1, [r4, #2348]	@ movhi
+	strh	r2, [r4, #2396]	@ movhi
+	ldrh	r2, [r4, #2288]
+	strb	r3, [r4, #2356]
+	movw	r3, #65535
+	strh	r3, [r4, #2592]	@ movhi
+	movs	r3, #0
+	strh	r3, [r4, #2594]	@ movhi
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2402]
+	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
+	strh	r0, [r4, #2398]	@ movhi
+	strb	r3, [r4, #2598]
+	strb	r2, [r4, #2404]
+	ldrh	r2, [r4, #2290]
+	strb	r3, [r4, #2600]
+	str	r3, [r4, #2528]
+	strh	r2, [r4, #2444]	@ movhi
+	ldrh	r2, [r4, #2292]
+	str	r3, [r4, #2516]
+	str	r3, [r4, #2508]
+	str	r3, [r4, #2524]
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2450]
+	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
+	str	r3, [r4, #2552]
+	strh	r0, [r4, #2446]	@ movhi
+	strb	r2, [r4, #2452]
+	ldr	r2, [r4, #2300]
+	str	r2, [r4, #2548]
+	str	r3, [r4, #2564]
+	ldr	r2, [r4, #2540]
+	str	r3, [r4, #2520]
+	ldr	r3, [r4, #2308]
+	cmp	r3, r2
+	ldr	r2, [r4, #2544]
+	it	hi
+	strhi	r3, [r4, #2540]
+	ldr	r3, [r4, #2304]
+	cmp	r3, r2
+	it	hi
+	strhi	r3, [r4, #2544]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1776
+	ldr	r0, .L1787+24
+	bl	make_superblock
+.L1776:
+	ldrh	r2, [r4, #2396]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1777
+	ldr	r0, .L1787+28
+	bl	make_superblock
+.L1777:
+	ldrh	r2, [r4, #2444]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1778
+	ldr	r0, .L1787+32
+	bl	make_superblock
+.L1778:
+	ldrh	r2, [r4, #2592]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1779
+	ldr	r0, .L1787+36
+	bl	make_superblock
+.L1779:
+	movs	r0, #0
+	b	.L1760
+.L1788:
+	.align	2
+.L1787:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+600
+	.word	.LC1
+	.word	.LC115
+	.word	.LANCHOR0+2268
+	.word	1179929683
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2592
+	.fnend
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	1
+	.global	FtlMapTblRecovery
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r3, [r0, #24]
+	mov	r5, r0
+	movs	r1, #0
+	ldrh	r10, [r0, #6]
+	str	r3, [sp, #8]
+	ldr	r3, [r0, #16]
+	ldr	r4, .L1824
+	ldr	r9, [r0, #12]
+	lsl	r2, r10, #2
+	str	r3, [sp, #16]
+	ldrh	r3, [r0, #8]
+	ldr	r0, [sp, #8]
+	str	r3, [sp, #12]
+	bl	ftl_memset
+	ldr	r3, [r4, #3304]
+	movs	r2, #1
+	ldr	fp, [r4, #3336]
+	str	r2, [r5, #36]
+	str	r3, [r4, #3464]
+	movw	r3, #65535
+	str	fp, [r4, #3468]
+	strh	r3, [r5]	@ movhi
+	strh	r3, [r5, #2]	@ movhi
+	movs	r3, #0
+	mov	r8, r3
+	str	r3, [r5, #32]
+	str	r3, [r5, #28]
+.L1790:
+	ldr	r3, [sp, #12]
+	sxth	r6, r8
+	cmp	r6, r3
+	bge	.L1809
+	ldr	r3, [sp, #12]
+	lsls	r7, r6, #1
+	subs	r3, r3, #1
+	cmp	r6, r3
+	bne	.L1791
+	movs	r1, #1
+	ldrh	r0, [r9, r6, lsl #1]
+	bl	FtlGetLastWrittenPage
+	sxth	r3, r0
+	adds	r0, r0, #1
+	strh	r8, [r5]	@ movhi
+	add	r7, r7, r9
+	str	r3, [sp, #12]
+	mov	r8, #0
+	ldr	r3, [sp, #16]
+	strh	r0, [r5, #2]	@ movhi
+	ldr	r3, [r3, r6, lsl #2]
+	str	r3, [r5, #28]
+.L1792:
+	ldr	r3, [sp, #12]
+	sxth	r9, r8
+	adds	r2, r3, #1
+	cmp	r9, r2
+	blt	.L1795
+.L1809:
+	mov	r0, r5
+	bl	ftl_free_no_use_map_blk
+	ldrh	r2, [r5, #2]
+	ldrh	r3, [r4, #104]
+	cmp	r2, r3
+	bne	.L1797
+	mov	r0, r5
+	bl	ftl_map_blk_alloc_new_blk
+.L1797:
+	mov	r0, r5
+	bl	ftl_map_blk_gc
+	mov	r0, r5
+	bl	ftl_map_blk_gc
+	movs	r0, #0
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1795:
+	ldrh	r2, [r7]
+	ldr	r0, .L1824+4
+	orr	r2, r9, r2, lsl #10
+	str	r2, [r4, #3460]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r4, #3468]
+	ldr	r2, [r2, #12]
+	str	r2, [sp, #16]
+	cbz	r2, .L1793
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3464]
+	bl	js_hash
+	ldr	r2, [sp, #16]
+	cmp	r2, r0
+	beq	.L1793
+	str	r0, [sp, #4]
+	mov	r3, r9
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r1, .L1824+8
+	ldr	r0, .L1824+12
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4, #3456]
+.L1793:
+	ldr	r3, [r4, #3456]
+	adds	r3, r3, #1
+	beq	.L1794
+	ldrh	r3, [fp, #8]
+	cmp	r10, r3
+	bls	.L1794
+	ldrh	r1, [fp]
+	ldrh	r2, [r5, #4]
+	cmp	r1, r2
+	ittt	eq
+	ldreq	r2, [r4, #3460]
+	ldreq	r1, [sp, #8]
+	streq	r2, [r1, r3, lsl #2]
+.L1794:
+	add	r8, r8, #1
+	b	.L1792
+.L1791:
+	ldr	r3, [r4, #3304]
+	ldr	r0, .L1824+4
+	str	r3, [r4, #3464]
+	add	r3, r9, r7
+	ldrh	r2, [r9, r6, lsl #1]
+	str	r3, [sp, #20]
+	ldrh	r3, [r4, #104]
+	subs	r3, r3, #1
+	orr	r3, r3, r2, lsl #10
+	movs	r2, #1
+	mov	r1, r2
+	str	r3, [r4, #3460]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3456]
+	adds	r3, r3, #1
+	beq	.L1811
+	ldrh	r2, [fp]
+	ldrh	r3, [r5, #4]
+	cmp	r2, r3
+	bne	.L1811
+	ldrh	r2, [fp, #8]
+	movw	r3, #64245
+	cmp	r2, r3
+	beq	.L1799
+.L1811:
+	movs	r7, #0
+.L1800:
+	ldrh	r2, [r4, #104]
+	sxth	r3, r7
+	cmp	r3, r2
+	bge	.L1807
+	ldr	r2, [sp, #20]
+	ldr	r0, .L1824+4
+	str	r3, [sp, #28]
+	ldrh	r2, [r2]
+	orr	r2, r3, r2, lsl #10
+	str	r2, [r4, #3460]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r4, #3468]
+	ldr	r2, [r2, #12]
+	str	r2, [sp, #24]
+	cbz	r2, .L1804
+	ldrh	r1, [r4, #110]
+	ldr	r0, [r4, #3464]
+	bl	js_hash
+	ldr	r2, [sp, #24]
+	cmp	r2, r0
+	beq	.L1804
+	str	r0, [sp, #4]
+	str	r2, [sp]
+	mov	r2, r6
+	ldr	r3, [sp, #28]
+	ldr	r1, .L1824+8
+	ldr	r0, .L1824+16
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4, #3456]
+.L1804:
+	ldr	r3, [r4, #3456]
+	adds	r3, r3, #1
+	beq	.L1805
+	ldrh	r3, [fp, #8]
+	cmp	r10, r3
+	bls	.L1805
+	ldrh	r1, [fp]
+	ldrh	r2, [r5, #4]
+	cmp	r1, r2
+	ittt	eq
+	ldreq	r2, [r4, #3460]
+	ldreq	r1, [sp, #8]
+	streq	r2, [r1, r3, lsl #2]
+.L1805:
+	adds	r7, r7, #1
+	b	.L1800
+.L1799:
+	movs	r1, #0
+	movs	r0, #4
+.L1801:
+	ldrh	r2, [r4, #104]
+	sxth	r3, r1
+	subs	r2, r2, #1
+	cmp	r3, r2
+	blt	.L1803
+.L1807:
+	add	r8, r8, #1
+	b	.L1790
+.L1803:
+	ldr	r6, [r4, #3304]
+	ldr	r2, [r6, r3, lsl #3]
+	uxth	r7, r2
+	cmp	r10, r7
+	bls	.L1802
+	add	r3, r0, r3, lsl #3
+	ldr	r3, [r6, r3]
+	ldr	r6, [sp, #8]
+	str	r3, [r6, r7, lsl #2]
+.L1802:
+	adds	r1, r1, #1
+	b	.L1801
+.L1825:
+	.align	2
+.L1824:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3456
+	.word	.LANCHOR1+615
+	.word	.LC116
+	.word	.LC117
+	.fnend
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	1
+	.global	FtlLoadVonderInfo
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r0, .L1827
+	push	{r3, lr}
+	.save {r3, lr}
+	ldrh	r3, [r0, #120]
+	strh	r3, [r0, #3622]	@ movhi
+	movw	r3, #61574
+	strh	r3, [r0, #3616]	@ movhi
+	ldrh	r3, [r0, #144]
+	strh	r3, [r0, #3620]	@ movhi
+	ldrh	r3, [r0, #122]
+	strh	r3, [r0, #3618]	@ movhi
+	ldr	r3, [r0, #148]
+	addw	r0, r0, #3612
+	str	r3, [r0, #12]
+	ldr	r3, [r0, #-240]
+	str	r3, [r0, #16]
+	ldr	r3, [r0, #-244]
+	str	r3, [r0, #20]
+	ldr	r3, [r0, #-236]
+	str	r3, [r0, #24]
+	bl	FtlMapTblRecovery
+	movs	r0, #0
+	pop	{r3, pc}
+.L1828:
+	.align	2
+.L1827:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	1
+	.global	FtlLoadMapInfo
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L1830
+	bl	FtlMapTblRecovery
 	movs	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r4, #2344]
-	cmp	r3, #2
-	bhi	.L1792
-	subs	r5, r5, #1
-	bne	.L1793
-	b	.L1792
-.L1794:
-	mov	r0, #-1
-	b	.L1756
-.L1811:
+	pop	{r3, pc}
+.L1831:
 	.align	2
-.L1810:
-	.word	.LC114
-	.word	.LANCHOR1+606
-	.word	.LC1
+.L1830:
+	.word	.LANCHOR0+3396
 	.fnend
-	.size	FtlWrite, .-FtlWrite
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	1
-	.global	FtlMakeBbt
+	.global	FtlSysBlkInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r8, #0
-	ldr	r9, .L1831+4
-	bl	FtlBbtMemInit
-	sub	r5, r9, #180
-	sub	r10, r9, #18
-	mov	r4, r5
-	bl	FtlLoadFactoryBbt
-.L1813:
-	ldrh	r3, [r5, #54]
-	cmp	r8, r3
-	bcc	.L1819
-	movs	r5, #0
-.L1820:
-	ldrh	r3, [r4, #114]
-	uxth	r0, r5
-	adds	r5, r5, #1
-	cmp	r3, r0
-	bhi	.L1821
-	ldrh	r5, [r4, #164]
-	movw	r6, #65535
-	subs	r5, r5, #1
-	uxth	r5, r5
-.L1822:
-	ldrh	r3, [r4, #164]
-	subs	r3, r3, #48
-	cmp	r5, r3
-	ble	.L1826
-	mov	r0, r5
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1823
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r3, #0
+	ldr	r4, .L1847
+	ldrh	r0, [r4, #36]
+	strh	r3, [r4, #3476]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	r2, [r4, #2576]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1833
+.L1835:
+	mov	r5, #-1
+.L1832:
 	mov	r0, r5
-	bl	FlashTestBlk
+	pop	{r4, r5, r6, pc}
+.L1833:
+	bl	FtlLoadSysInfo
+	mov	r5, r0
 	cmp	r0, #0
-	beq	.L1824
-	mov	r0, r5
-	bl	FtlBbmMapBadBlock
-.L1823:
-	subs	r5, r5, #1
-	uxth	r5, r5
-	b	.L1822
-.L1819:
-	ldrh	r3, [r10, #2]!
-	movw	r2, #65535
-	ldr	r0, [r5, #3300]
-	ldr	fp, [r5, #3332]
-	cmp	r3, r2
-	str	r0, [r5, #3460]
-	str	fp, [r5, #3464]
-	beq	.L1814
-	ldrh	r7, [r5, #98]
-	movs	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1831
-	mla	r7, r8, r7, r3
-	lsls	r3, r7, #10
-	str	r3, [r5, #3456]
-	bl	FlashReadPages
-	ldrh	r2, [r5, #98]
-	ldr	r1, [r5, #3460]
-	ldr	r0, [r9]
-	adds	r2, r2, #7
-	asrs	r2, r2, #3
-	bl	ftl_memcpy
-.L1815:
-	uxth	r0, r7
-	add	r8, r8, #1
-	add	r9, r9, #4
-	bl	FtlBbmMapBadBlock
-	b	.L1813
-.L1814:
-	mov	r1, r8
-	bl	FlashGetBadBlockList
-	ldr	r1, [r9]
-	ldr	r0, [r5, #3460]
-	bl	FtlBbt2Bitmap
-	ldrh	r6, [r5, #98]
-.L1817:
-	subs	r6, r6, #1
-	uxth	r6, r6
-.L1816:
-	ldrh	r0, [r4, #98]
-	smlabb	r0, r0, r8, r6
-	uxth	r0, r0
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1817
-	movs	r1, #16
-	ldr	r0, [r4, #3332]
-	strh	r6, [r10]	@ movhi
-	bl	__memzero
-	mov	r1, #4096
-	ldr	r0, [r4, #3300]
-	bl	__memzero
-	movw	r3, #61664
-	strh	r3, [fp]	@ movhi
+	bne	.L1835
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	movs	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldrh	r1, [r4, #138]
+	mov	r3, r5
+	ldr	r2, [r4, #2492]
+	movs	r0, #12
+.L1836:
+	cmp	r3, r1
+	bge	.L1841
+	mla	r6, r0, r3, r2
+	ldr	r6, [r6, #4]
+	cmp	r6, #0
+	bge	.L1837
+.L1841:
+	ldrh	r2, [r4, #2296]
+	cmp	r3, r1
+	add	r2, r2, #1
+	strh	r2, [r4, #2296]	@ movhi
+	bge	.L1846
+.L1838:
+	ldr	r0, .L1847+4
+	bl	FtlSuperblockPowerLostFix
+	ldr	r0, .L1847+8
+	bl	FtlSuperblockPowerLostFix
+	ldrh	r1, [r4, #2348]
+	ldr	r2, [r4, #2324]
+	ldrh	r0, [r4, #2352]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r4, #102]
+	ldr	r1, [r4, #2324]
+	ldrh	r0, [r4, #2396]
+	strh	r3, [r4, #2350]	@ movhi
 	movs	r3, #0
-	str	r3, [fp, #4]
-	ldrh	r3, [r10]
-	ldrh	r7, [r4, #98]
-	ldrh	r2, [r4, #3388]
-	strh	r3, [fp, #2]	@ movhi
-	ldrh	r3, [r10]
-	ldr	r1, [r9]
-	lsls	r2, r2, #2
-	ldr	r0, [r4, #3460]
-	mla	r7, r8, r7, r3
-	lsls	r3, r7, #10
-	str	r3, [r4, #3456]
-	bl	ftl_memcpy
-	movs	r2, #1
-	ldr	r0, .L1831
-	mov	r1, r2
-	bl	FlashEraseBlocks
-	movs	r3, #1
-	ldr	r0, .L1831
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [r4, #3452]
+	strb	r3, [r4, #2354]
+	strh	r3, [r4, #2352]	@ movhi
+	ldrh	r6, [r4, #2400]
+	ldrh	r2, [r1, r0, lsl #1]
+	subs	r2, r2, r6
+	strh	r2, [r1, r0, lsl #1]	@ movhi
+	strb	r3, [r4, #2402]
+	strh	r3, [r4, #2400]	@ movhi
+	ldrh	r3, [r4, #2298]
+	ldrh	r2, [r4, #102]
 	adds	r3, r3, #1
-	bne	.L1815
-	uxth	r0, r7
-	bl	FtlBbmMapBadBlock
-	b	.L1816
-.L1821:
-	bl	FtlBbmMapBadBlock
-	b	.L1820
-.L1824:
-	ldrh	r3, [r4, #152]
-	cmp	r3, r6
-	bne	.L1825
-	strh	r5, [r4, #152]	@ movhi
-	b	.L1823
-.L1825:
-	strh	r5, [r4, #156]	@ movhi
-.L1826:
-	ldrh	r3, [r4, #152]
-	movs	r5, #0
-	ldr	r0, [r4, #3268]
-	movs	r1, #1
-	str	r5, [r4, #160]
-	movs	r2, #2
-	strh	r5, [r4, #154]	@ movhi
-	lsls	r3, r3, #10
-	str	r3, [r0, #4]
-	ldrh	r3, [r4, #156]
-	lsls	r3, r3, #10
-	str	r3, [r0, #24]
-	bl	FlashEraseBlocks
-	ldrh	r0, [r4, #152]
-	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, #156]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #156]
-	strh	r5, [r4, #154]	@ movhi
+	strh	r2, [r4, #2398]	@ movhi
+	strh	r3, [r4, #2298]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L1842
+.L1837:
 	adds	r3, r3, #1
-	str	r3, [r4, #160]
-	ldrh	r3, [r4, #152]
-	strh	r2, [r4, #152]	@ movhi
-	strh	r3, [r4, #156]	@ movhi
-	bl	FtlBbmTblFlush
-	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1832:
+	b	.L1836
+.L1846:
+	ldrh	r3, [r4, #3476]
+	cmp	r3, #0
+	bne	.L1838
+.L1842:
+	bl	FtlVpcCheckAndModify
+	ldrh	r0, [r4, #2348]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1832
+	ldrh	r3, [r4, #2352]
+	cmp	r3, #0
+	bne	.L1832
+	ldrh	r3, [r4, #2400]
+	cmp	r3, #0
+	bne	.L1832
+	bl	FtlGcRefreshBlock
+	ldrh	r0, [r4, #2396]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	ldr	r0, .L1847+4
+	bl	allocate_new_data_superblock
+	ldr	r0, .L1847+8
+	bl	allocate_new_data_superblock
+	b	.L1832
+.L1848:
 	.align	2
-.L1831:
-	.word	.LANCHOR0+3452
-	.word	.LANCHOR0+180
+.L1847:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
 	.fnend
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	1
 	.global	ftl_low_format
 	.syntax unified
@@ -12677,46 +12797,46 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1857
+	ldr	r4, .L1873
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
 	str	r3, [r4, #2544]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1834
+	cbz	r0, .L1850
 	bl	FtlMakeBbt
-.L1834:
-	ldr	r0, .L1857+4
+.L1850:
+	ldr	r0, .L1873+4
 	movs	r2, #0
-.L1835:
+.L1851:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1836
+	blt	.L1852
 	ldrh	r6, [r4, #40]
 	movs	r5, #0
-.L1837:
+.L1853:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1838
+	bhi	.L1854
 	ldrh	r1, [r4, #32]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1839
-.L1843:
+	bge	.L1855
+.L1859:
 	movs	r5, #0
 	mov	r6, r5
-.L1840:
+.L1856:
 	ldrh	r3, [r4, #40]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1844
+	bhi	.L1860
 	ldrh	r3, [r4, #42]
 	ldrh	r5, [r4, #32]
 	ldr	r9, [r4, #44]
-	str	r3, [r4, #3284]
+	str	r3, [r4, #3288]
 	mov	r1, r5
 	mov	r0, r9
 	bl	__aeabi_uidiv
@@ -12728,7 +12848,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1845
+	ble	.L1861
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12736,9 +12856,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2572]	@ movhi
-.L1845:
+.L1861:
 	ldrh	r3, [r4, #94]
-	cbz	r3, .L1847
+	cbz	r3, .L1863
 	ldrh	r2, [r4, #2572]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2572]	@ movhi
@@ -12749,14 +12869,14 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2572]	@ movhi
-.L1847:
+.L1863:
 	ldrh	r2, [r4, #2572]
 	ldr	r3, [r4, #2504]
-	ldr	r6, .L1857+8
+	ldr	r6, .L1873+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #102]
-	str	r5, [r4, #3472]
+	str	r5, [r4, #3676]
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #58]
 	str	r5, [r4, #2504]
@@ -12773,40 +12893,40 @@ ftl_low_format:
 	movs	r3, #0
 	str	r3, [r4, #2500]
 	movs	r1, #255
-	strh	r3, [r4, #2590]	@ movhi
-	strb	r3, [r4, #2594]
-	strb	r3, [r4, #2596]
+	strh	r3, [r4, #2594]	@ movhi
+	strb	r3, [r4, #2598]
+	strb	r3, [r4, #2600]
 	lsrs	r2, r2, #3
 	strh	r3, [r4, #2350]	@ movhi
 	strb	r3, [r4, #2354]
 	strh	r3, [r4, #2348]	@ movhi
 	movs	r3, #1
 	ldr	r0, [r4, #24]
-	strh	r5, [r4, #2588]	@ movhi
+	strh	r5, [r4, #2592]	@ movhi
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1849:
+.L1865:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2348]
 	cmp	r3, #0
-	bne	.L1850
+	bne	.L1866
 	ldr	r3, [r4, #2324]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2348]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2348]	@ movhi
-	b	.L1849
-.L1836:
-	ldr	r5, [r4, #3312]
+	b	.L1865
+.L1852:
+	ldr	r5, [r4, #3316]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
-	ldr	r1, [r4, #3316]
+	ldr	r1, [r4, #3320]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1835
-.L1838:
+	b	.L1851
+.L1854:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12814,8 +12934,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1837
-.L1839:
+	b	.L1853
+.L1855:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #132]
@@ -12825,27 +12945,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1841:
+.L1857:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1843
+	bls	.L1859
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1841
-.L1844:
+	b	.L1857
+.L1860:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1840
-.L1850:
+	b	.L1856
+.L1866:
 	ldr	r3, [r4, #2540]
 	movw	r5, #65535
 	ldrh	r1, [r4, #2352]
-	ldr	r6, .L1857+12
+	ldr	r6, .L1873+12
 	str	r3, [r4, #2360]
 	adds	r3, r3, #1
 	str	r3, [r4, #2540]
@@ -12859,19 +12979,19 @@ ftl_low_format:
 	strh	r3, [r4, #2396]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #2404]
-.L1851:
+.L1867:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2396]
-	cbnz	r3, .L1852
+	cbnz	r3, .L1868
 	ldr	r3, [r4, #2324]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2396]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2396]	@ movhi
-	b	.L1851
-.L1852:
+	b	.L1867
+.L1868:
 	ldr	r3, [r4, #2540]
 	movw	r5, #65535
 	ldrh	r1, [r4, #2400]
@@ -12885,7 +13005,7 @@ ftl_low_format:
 	movs	r3, #0
 	strh	r0, [r4, #2576]	@ movhi
 	strh	r3, [r4, #2578]	@ movhi
-	ldr	r3, [r4, #3472]
+	ldr	r3, [r4, #3676]
 	strh	r5, [r4, #2580]	@ movhi
 	strh	r3, [r4, #2582]	@ movhi
 	ldr	r3, [r4, #2540]
@@ -12894,16 +13014,16 @@ ftl_low_format:
 	str	r3, [r4, #2540]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1853
-	ldr	r3, .L1857+16
+	cbnz	r0, .L1869
+	ldr	r3, .L1873+16
 	movs	r2, #1
 	str	r2, [r3]
-.L1853:
+.L1869:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1858:
+.L1874:
 	.align	2
-.L1857:
+.L1873:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR0+2348
@@ -12912,20 +13032,59 @@ ftl_low_format:
 	.fnend
 	.size	ftl_low_format, .-ftl_low_format
 	.align	1
-	.global	ftl_memcmp
+	.global	sftl_init
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_memcmp, %function
-ftl_memcmp:
+	.type	sftl_init, %function
+sftl_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memcmp
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r3, #-1
+	ldr	r4, .L1881
+	ldr	r5, .L1881+4
+	ldr	r1, .L1881+8
+	ldr	r0, .L1881+12
+	str	r3, [r5]
+	bl	sftl_printk
+	mov	r0, r4
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #36]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbnz	r0, .L1879
+	bl	FtlSysBlkInit
+	cbnz	r0, .L1879
+	movs	r3, #1
+	str	r3, [r5]
+	ldrh	r3, [r4, #2344]
+	cmp	r3, #15
+	bhi	.L1879
+	movw	r4, #8129
+.L1878:
+	movs	r1, #1
+	movs	r0, #0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L1878
+.L1879:
+	movs	r0, #0
+	pop	{r3, r4, r5, pc}
+.L1882:
+	.align	2
+.L1881:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC70
+	.word	.LC71
 	.fnend
-	.size	ftl_memcmp, .-ftl_memcmp
+	.size	sftl_init, .-sftl_init
 	.align	1
 	.global	FtlWriteToIDB
 	.syntax unified
@@ -12947,31 +13106,31 @@ FtlWriteToIDB:
 	mov	r4, r0
 	mov	r6, r1
 	mov	r9, r2
-	ldr	r5, .L1932
-	bls	.L1861
+	ldr	r5, .L1953
+	bls	.L1884
 	cmp	r0, #576
-	bcc	.L1862
-.L1861:
-	ldr	r3, [r5, #3676]
-	cbnz	r3, .L1863
-.L1931:
-	movs	r4, #0
-	b	.L1860
-.L1863:
+	bcc	.L1885
+.L1884:
 	ldr	r3, [r5, #3680]
+	cbnz	r3, .L1886
+.L1952:
+	movs	r4, #0
+	b	.L1883
+.L1886:
+	ldr	r3, [r5, #3684]
 	ldr	r2, [r3]
 	str	r3, [sp, #8]
-	ldr	r3, .L1932+4
+	ldr	r3, .L1953+4
 	cmp	r2, r3
-	bne	.L1865
+	bne	.L1888
 	ldr	r3, [sp, #8]
 	movs	r2, #0
 	ldrh	r1, [r5, #10]
 	add	r0, r3, #262144
 	movw	r3, #65535
-.L1869:
+.L1892:
 	ldr	r4, [r0, #-4]
-	cbnz	r4, .L1866
+	cbnz	r4, .L1889
 	ldr	r4, [sp, #8]
 	subs	r3, r3, #1
 	ldr	r4, [r4, r2, lsl #2]
@@ -12981,18 +13140,18 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	r4, [r0, #-4]!
-	bne	.L1869
+	bne	.L1892
 	mov	r3, #512
-	b	.L1928
-.L1866:
+	b	.L1949
+.L1889:
 	adds	r3, r3, #127
 	lsrs	r3, r3, #7
-.L1928:
+.L1949:
 	str	r3, [sp, #12]
 	lsls	r1, r1, #2
 	ldr	r3, [sp, #12]
 	uxth	r1, r1
-	ldr	r4, .L1932
+	ldr	r4, .L1953
 	adds	r0, r3, #4
 	bl	__aeabi_uidiv
 	adds	r3, r0, #1
@@ -13003,82 +13162,74 @@ FtlWriteToIDB:
 	movs	r3, #0
 	mov	fp, r3
 	str	r3, [sp, #16]
-.L1892:
+.L1914:
 	mov	r1, #512
-	ldr	r0, [r4, #3684]
+	ldr	r0, [r4, #3688]
 	bl	__memzero
 	ldrh	r7, [r4, #10]
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	mul	r9, fp, r7
 	cmp	r3, #0
-	beq	.L1900
-	ldr	r3, [r4, #3264]
+	beq	.L1922
+	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	ite	eq
 	moveq	r3, #6
 	movne	r3, #9
-.L1929:
+.L1950:
 	str	r3, [sp, #24]
 	mov	r1, r9
-	ldr	r3, .L1932
+	ldr	r3, .L1953
 	movs	r0, #0
-	ldr	r3, [r3, #3248]
+	ldr	r3, [r3, #3252]
 	blx	r3
 	ldr	r3, [sp, #20]
 	cmp	r3, #1
-	beq	.L1871
-	ldr	r3, .L1932
+	beq	.L1894
+	ldr	r3, .L1953
 	add	r1, r7, r9
 	movs	r0, #0
-	ldr	r3, [r3, #3248]
+	ldr	r3, [r3, #3252]
 	blx	r3
-.L1871:
+.L1894:
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
-	bne	.L1902
-	ldr	r3, .L1932
+	bne	.L1924
+	ldr	r3, .L1953
 	mov	r1, #1024
-	ldr	r5, [r3, #3684]
+	ldr	r5, [r3, #3688]
 	mov	r0, r5
 	bl	__memzero
-	ldr	r2, .L1932+8
-	movs	r3, #12
-	add	r1, r5, #11
-	add	r0, r5, #23
-	stm	r5, {r2, r3}
 	movs	r2, #4
+	ldr	r3, .L1953+8
 	strb	r2, [r5, #17]
+	movs	r1, #12
+	ldr	r2, .L1953
+	adds	r0, r5, r1
+	str	r3, [r5]
 	movs	r3, #0
-	ldr	r2, .L1932
+	str	r1, [r5, #4]
+	ldrh	r2, [r2, #10]
 	str	r3, [r5, #12]
 	strb	r3, [r5, #16]
-	ldrh	r2, [r2, #10]
-	strb	r3, [r5, #20]
-	strh	r3, [r5, #22]	@ movhi
-	ldr	r3, .L1932+12
 	strh	r2, [r5, #18]	@ movhi
 	movs	r2, #16
+	strb	r3, [r5, #20]
 	strb	r2, [r5, #21]
-.L1873:
-	lsrs	r2, r3, #2
-	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
-	add	r2, r2, r3, lsl #5
-	cmp	r0, r1
-	add	r2, r2, ip
-	eor	r3, r3, r2
-	bne	.L1873
-	str	r3, [r5, #8]
-.L1872:
+	strh	r3, [r5, #22]	@ movhi
+	bl	js_hash
+	str	r0, [r5, #8]
+.L1895:
 	ldr	r3, [sp, #20]
 	mov	r10, r9
 	mov	r8, #0
 	muls	r3, r7, r3
 	ldr	r7, [sp, #8]
 	str	r3, [sp, #32]
-.L1874:
+.L1896:
 	ldr	r3, [sp, #32]
 	cmp	r8, r3
-	beq	.L1881
+	beq	.L1903
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
 	itet	ne
@@ -13089,215 +13240,214 @@ FtlWriteToIDB:
 	movw	r3, #61424
 	str	r3, [sp, #44]
 	cmp	r8, #0
-	bne	.L1877
+	bne	.L1899
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
-	bne	.L1877
-	ldr	r3, [r4, #3260]
+	bne	.L1899
+	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
 	mov	r2, r5
 	add	r3, sp, #40
 	mov	r1, r9
 	mov	r0, r8
-	ldr	r6, [r4, #3252]
+	ldr	r6, [r4, #3256]
 	blx	r6
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	str	r0, [sp, #36]
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r2, [sp, #36]
 	adds	r2, r2, #1
-	bne	.L1878
-.L1881:
+	bne	.L1900
+.L1903:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
-	ldr	r2, [r4, #3260]
-	ldr	r8, [r4, #3684]
+	ldr	r2, [r4, #3264]
+	ldr	r8, [r4, #3688]
 	str	r3, [sp, #24]
 	ldrh	r3, [r4, #10]
 	mul	r10, fp, r3
 	cmp	r2, #0
-	bne	.L1879
+	bne	.L1901
 	mov	r9, #6
-.L1880:
+.L1902:
 	ldr	r2, [sp, #20]
 	movs	r7, #0
 	mul	r5, r3, r2
-.L1883:
+.L1905:
 	cmp	r7, r5
-	beq	.L1887
+	beq	.L1909
 	cmp	r7, #0
-	bne	.L1884
+	bne	.L1906
 	cmp	r9, #9
-	bne	.L1884
-	ldr	r3, [r4, #3260]
+	bne	.L1906
+	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
-	ldr	r3, [r4, #3264]
+	ldr	r3, [r4, #3268]
 	movs	r0, #2
 	blx	r3
 	mov	r2, r8
 	mov	r1, r10
 	add	r3, sp, #40
 	mov	r0, r7
-	ldr	r6, [r4, #3256]
+	ldr	r6, [r4, #3260]
 	blx	r6
-	ldr	r3, [r4, #3264]
+	ldr	r3, [r4, #3268]
 	ldr	r0, [sp, #24]
 	blx	r3
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3264]
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r8]
-	ldr	r2, .L1932+8
+	ldr	r2, .L1953+8
 	cmp	r3, r2
-	beq	.L1885
-.L1887:
-	ldr	r0, [r4, #3684]
+	beq	.L1907
+.L1909:
+	ldr	r0, [r4, #3688]
 	movs	r5, #0
 	ldr	r1, [sp, #8]
-.L1886:
+.L1908:
 	mov	r8, r1
 	ldr	r2, [r0, r5, lsl #2]
 	ldr	r3, [r8]
 	lsls	r7, r5, #2
 	adds	r1, r1, #4
 	cmp	r2, r3
-	beq	.L1889
+	beq	.L1911
 	mov	r1, #512
 	bl	__memzero
-	ldr	r3, .L1932
+	ldr	r3, .L1953
 	mov	r1, fp
-	ldr	r0, .L1932+16
-	ldr	r2, [r3, #3684]
+	ldr	r0, .L1953+12
+	ldr	r2, [r3, #3688]
 	str	r5, [sp]
 	ldr	r3, [r8]
 	ldr	r2, [r2, r7]
 	bl	sftl_printk
-	ldr	r3, .L1932
+	ldr	r3, .L1953
 	movs	r0, #0
 	ldrh	r1, [r3, #10]
-	ldr	r3, [r3, #3248]
+	ldr	r3, [r3, #3252]
 	mul	r1, fp, r1
 	blx	r3
-.L1890:
+.L1912:
 	ldr	r3, [sp, #20]
 	add	fp, fp, r3
 	cmp	fp, #15
-	bls	.L1892
+	bls	.L1914
 	ldr	r3, [sp, #16]
-	cbnz	r3, .L1893
-.L1865:
+	cbnz	r3, .L1915
+.L1888:
 	mov	r3, #-1
 	str	r3, [sp, #12]
-.L1893:
-	ldr	r5, .L1932
+.L1915:
+	ldr	r5, .L1953
 	movs	r3, #0
 	ldr	r4, [sp, #12]
-	ldr	r0, [r5, #3680]
-	str	r3, [r5, #3676]
-	bl	kfree
 	ldr	r0, [r5, #3684]
+	str	r3, [r5, #3680]
 	bl	kfree
-.L1860:
+	ldr	r0, [r5, #3688]
+	bl	kfree
+.L1883:
 	mov	r0, r4
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1900:
+.L1922:
 	movs	r3, #6
-	b	.L1929
-.L1902:
+	b	.L1950
+.L1924:
 	movs	r5, #0
-	b	.L1872
-.L1877:
+	b	.L1895
+.L1899:
 	add	r3, sp, #40
 	mov	r2, r7
 	mov	r1, r10
 	movs	r0, #0
-	ldr	r6, [r4, #3252]
+	ldr	r6, [r4, #3256]
 	blx	r6
 	adds	r0, r0, #1
-	beq	.L1881
+	beq	.L1903
 	add	r7, r7, #2048
-.L1878:
+.L1900:
 	add	r8, r8, #1
 	add	r10, r10, #1
-	b	.L1874
-.L1879:
-	ldr	r2, [r4, #3264]
+	b	.L1896
+.L1901:
+	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	ite	eq
 	moveq	r9, #6
 	movne	r9, #9
-	b	.L1880
-.L1884:
+	b	.L1902
+.L1906:
 	add	r3, sp, #40
 	mov	r2, r8
 	add	r1, r10, r7
 	movs	r0, #0
-	ldr	r6, [r4, #3256]
+	ldr	r6, [r4, #3260]
 	blx	r6
 	adds	r0, r0, #1
-	beq	.L1887
+	beq	.L1909
 	ldr	r2, [sp, #44]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1887
+	bne	.L1909
 	add	r8, r8, #2048
-.L1885:
+.L1907:
 	adds	r7, r7, #1
-	b	.L1883
-.L1889:
+	b	.L1905
+.L1911:
 	ldr	r3, [sp, #28]
 	adds	r5, r5, #1
 	cmp	r5, r3
-	bne	.L1886
+	bne	.L1908
 	ldr	r3, [sp, #16]
 	adds	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #16]
-	bls	.L1890
-	b	.L1893
-.L1933:
+	bls	.L1912
+	b	.L1915
+.L1954:
 	.align	2
-.L1932:
+.L1953:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	1179535694
-	.word	1204201446
-	.word	.LC115
-.L1862:
+	.word	.LC118
+.L1885:
 	cmp	r0, #64
-	bne	.L1894
+	bne	.L1916
 	mov	r0, #262144
 	bl	ftl_malloc
-	str	r0, [r5, #3680]
+	str	r0, [r5, #3684]
 	mov	r0, #262144
 	bl	ftl_malloc
-	ldr	r3, [r5, #3680]
-	str	r0, [r5, #3684]
-	cbz	r3, .L1895
-	cbz	r0, .L1895
+	ldr	r3, [r5, #3684]
+	str	r0, [r5, #3688]
+	cbz	r3, .L1917
+	cbz	r0, .L1917
 	movs	r2, #1
 	mov	r1, #262144
 	mov	r0, r3
-	str	r2, [r5, #3676]
+	str	r2, [r5, #3680]
 	bl	__memzero
-.L1894:
-	ldr	r3, [r5, #3676]
+.L1916:
+	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	beq	.L1931
+	beq	.L1952
 	cmp	r4, #63
-	ldr	r1, [r5, #3680]
+	ldr	r1, [r5, #3684]
 	iteee	hi
-	ldrhi	r5, .L1934
+	ldrhi	r5, .L1955
 	rsbls	r4, r4, #64
 	subls	r6, r6, r4
 	addls	r9, r9, r4, lsl #9
 	it	ls
 	movls	r5, r1
-	ldr	r0, .L1934+4
+	ldr	r0, .L1955+4
 	it	hi
 	addhi	r5, r5, r4
 	mov	r2, #262144
@@ -13314,19 +13464,19 @@ FtlWriteToIDB:
 	mov	r1, r9
 	mov	r0, r5
 	bl	ftl_memcpy
-	b	.L1931
-.L1895:
-	ldr	r1, .L1934+8
-	ldr	r0, .L1934+12
+	b	.L1952
+.L1917:
+	ldr	r1, .L1955+8
+	ldr	r0, .L1955+12
 	bl	sftl_printk
-	b	.L1894
-.L1935:
+	b	.L1916
+.L1956:
 	.align	2
-.L1934:
+.L1955:
 	.word	8388544
-	.word	.LC117
-	.word	.LANCHOR1+615
-	.word	.LC116
+	.word	.LC120
+	.word	.LANCHOR1+633
+	.word	.LC119
 	.fnend
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	1
@@ -13366,19 +13516,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1940
-	ldr	r3, [r2, #3688]
-	cbnz	r3, .L1939
-	str	r0, [r2, #3688]
+	ldr	r2, .L1961
+	ldr	r3, [r2, #3692]
+	cbnz	r3, .L1960
+	str	r0, [r2, #3692]
 	mov	r0, r3
-	str	r1, [r2, #3692]
+	str	r1, [r2, #3696]
 	bx	lr
-.L1939:
+.L1960:
 	mov	r0, #-1
 	bx	lr
-.L1941:
+.L1962:
 	.align	2
-.L1940:
+.L1961:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -13396,59 +13546,59 @@ rk_sftl_vendor_storage_init:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r4, .L1950
+	ldr	r4, .L1971
 	bl	ftl_malloc
-	str	r0, [r4, #3696]
+	str	r0, [r4, #3700]
 	cmp	r0, #0
-	beq	.L1948
-	ldr	r8, .L1950+4
+	beq	.L1969
+	ldr	r8, .L1971+4
 	mov	r9, #0
 	mov	r7, r9
 	mov	r6, r9
-.L1946:
-	ldr	r3, [r4, #3688]
+.L1967:
+	ldr	r3, [r4, #3692]
 	movs	r1, #128
-	ldr	r2, [r4, #3696]
+	ldr	r2, [r4, #3700]
 	lsls	r0, r6, #7
 	blx	r3
 	mov	r5, r0
-	cbnz	r0, .L1944
-	ldr	r2, [r4, #3696]
+	cbnz	r0, .L1965
+	ldr	r2, [r4, #3700]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1945
+	bne	.L1966
 	movw	r3, #65532
 	ldr	r1, [r2, r3]
 	ldr	r3, [r2, #4]
 	cmp	r1, r3
-	bne	.L1945
+	bne	.L1966
 	cmp	r1, r7
 	itt	hi
 	movhi	r9, r6
 	movhi	r7, r1
-.L1945:
+.L1966:
 	adds	r6, r6, #1
 	cmp	r6, #2
-	bne	.L1946
-	cbz	r7, .L1947
-	ldr	r3, [r4, #3688]
+	bne	.L1967
+	cbz	r7, .L1968
+	ldr	r3, [r4, #3692]
 	movs	r1, #128
 	lsl	r0, r9, #7
 	blx	r3
 	mov	r5, r0
-	cbz	r0, .L1942
-.L1944:
-	ldr	r0, [r4, #3696]
+	cbz	r0, .L1963
+.L1965:
+	ldr	r0, [r4, #3700]
 	mov	r5, #-1
 	bl	kfree
 	movs	r3, #0
-	str	r3, [r4, #3696]
-	b	.L1942
-.L1947:
+	str	r3, [r4, #3700]
+	b	.L1963
+.L1968:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
-	ldr	r3, [r4, #3696]
+	ldr	r3, [r4, #3700]
 	movs	r2, #1
 	movw	r1, #65532
 	str	r2, [r3, #4]
@@ -13457,15 +13607,15 @@ rk_sftl_vendor_storage_init:
 	movw	r2, #64504
 	strh	r7, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1942:
+.L1963:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1948:
+.L1969:
 	mvn	r5, #11
-	b	.L1942
-.L1951:
+	b	.L1963
+.L1972:
 	.align	2
-.L1950:
+.L1971:
 	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
@@ -13484,23 +13634,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L1958
+	ldr	r3, .L1979
 	mov	r0, r1
-	ldr	r5, [r3, #3696]
-	cbz	r5, .L1957
+	ldr	r5, [r3, #3700]
+	cbz	r5, .L1978
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L1954:
+.L1975:
 	cmp	r3, r6
-	bcc	.L1956
-.L1957:
+	bcc	.L1977
+.L1978:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1956:
+.L1977:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L1955
+	bne	.L1976
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13512,12 +13662,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1955:
+.L1976:
 	adds	r3, r3, #1
-	b	.L1954
-.L1959:
+	b	.L1975
+.L1980:
 	.align	2
-.L1958:
+.L1979:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -13535,26 +13685,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L1979
+	ldr	r2, .L2000
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
-	ldr	r4, [r2, #3696]
+	ldr	r4, [r2, #3700]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L1975
+	beq	.L1996
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L1962:
+.L1983:
 	cmp	r7, r2
-	bcc	.L1970
+	bcc	.L1991
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1975
+	bhi	.L1996
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -13586,32 +13736,32 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, [r9, #3692]
-	b	.L1978
-.L1970:
+	ldr	r3, [r9, #3696]
+	b	.L1999
+.L1991:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L1963
+	bne	.L1984
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L1964
+	bls	.L1985
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1975
+	bhi	.L1996
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L1965:
+.L1986:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L1966
+	bcc	.L1987
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -13630,7 +13780,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L1967:
+.L1988:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -13643,20 +13793,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1979
-	ldr	r3, [r3, #3692]
-.L1978:
+	ldr	r3, .L2000
+	ldr	r3, [r3, #3696]
+.L1999:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L1960:
+.L1981:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1966:
+.L1987:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -13673,24 +13823,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L1965
-.L1964:
+	b	.L1986
+.L1985:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L1967
-.L1963:
+	b	.L1988
+.L1984:
 	adds	r7, r7, #1
-	b	.L1962
-.L1975:
+	b	.L1983
+.L1996:
 	mov	r0, #-1
-	b	.L1960
-.L1980:
+	b	.L1981
+.L2001:
 	.align	2
-.L1979:
+.L2000:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -13713,53 +13863,53 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L1995
-	ldr	r3, .L2007
+	beq	.L2016
+	ldr	r3, .L2028
 	cmp	r6, r3
-	beq	.L1984
+	beq	.L2005
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1985
-.L2006:
+	beq	.L2006
+.L2027:
 	mvn	r5, #13
-	b	.L1983
-.L1984:
-	ldr	r6, .L2007+4
+	b	.L2004
+.L2005:
+	ldr	r6, .L2028+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
 	.syntax unified
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1991
+	bne	.L2012
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L2006
+	bne	.L2027
 	ldr	r2, [r4]
-	ldr	r3, .L2007+8
+	ldr	r3, .L2028+8
 	cmp	r2, r3
-	beq	.L1989
-.L1990:
+	beq	.L2010
+.L2011:
 	mov	r5, #-1
-.L1983:
+.L2004:
 	mov	r0, r4
 	bl	kfree
-.L1981:
+.L2002:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1989:
+.L2010:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L1990
+	beq	.L2011
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
@@ -13767,82 +13917,82 @@ rk_sftl_vendor_storage_ioctl:
 	adds	r2, r2, #8
 	ldr	r3, [r6, #72]
 	.syntax unified
-@ 561 "./arch/arm/include/asm/uaccess.h" 1
+@ 573 "./arch/arm/include/asm/uaccess.h" 1
 	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2006
+	bne	.L2027
 	mov	r1, r4
 	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L2006
-.L1997:
+	bne	.L2027
+.L2018:
 	mov	r5, r0
-	b	.L1983
-.L1985:
-	ldr	r6, .L2007+4
+	b	.L2004
+.L2006:
+	ldr	r6, .L2028+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
 	.syntax unified
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r2, r5, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1991
+	cbnz	r3, .L2012
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L2006
+	bne	.L2027
 	ldr	r2, [r4]
-	ldr	r3, .L2007+8
+	ldr	r3, .L2028+8
 	cmp	r2, r3
-	bne	.L1990
+	bne	.L2011
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1990
+	bhi	.L2011
 	mov	r3, sp
 	adds	r2, r2, #8
 	ands	r6, r6, r3
 	ldr	r3, [r6, #72]
 	.syntax unified
-@ 552 "./arch/arm/include/asm/uaccess.h" 1
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
 	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1993
+	cbnz	r3, .L2014
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L2006
+	bne	.L2027
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L1997
-.L1991:
+	b	.L2018
+.L2012:
 	movs	r1, #8
-.L2005:
+.L2026:
 	bl	__memzero
-	b	.L2006
-.L1993:
+	b	.L2027
+.L2014:
 	mov	r1, r2
 	mov	r0, r4
-	b	.L2005
-.L1995:
+	b	.L2026
+.L2016:
 	mov	r5, #-1
-	b	.L1981
-.L2008:
+	b	.L2002
+.L2029:
 	.align	2
-.L2007:
+.L2028:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13860,11 +14010,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2010
+	ldr	r0, .L2031
 	b	misc_register
-.L2011:
+.L2032:
 	.align	2
-.L2010:
+.L2031:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14020,151 +14170,155 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.6693, %object
-	.size	__func__.6693, 17
-__func__.6693:
+	.type	__func__.6703, %object
+	.size	__func__.6703, 17
+__func__.6703:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.6688, %object
-	.size	__func__.6688, 17
-__func__.6688:
+	.type	__func__.6698, %object
+	.size	__func__.6698, 17
+__func__.6698:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.6724, %object
-	.size	__func__.6724, 17
-__func__.6724:
+	.type	__func__.6734, %object
+	.size	__func__.6734, 17
+__func__.6734:
 	.ascii	"List_remove_node\000"
-	.type	__func__.6756, %object
-	.size	__func__.6756, 22
-__func__.6756:
+	.type	__func__.6766, %object
+	.size	__func__.6766, 22
+__func__.6766:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.6863, %object
-	.size	__func__.6863, 22
-__func__.6863:
+	.type	__func__.6873, %object
+	.size	__func__.6873, 22
+__func__.6873:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.7186, %object
-	.size	__func__.7186, 16
-__func__.7186:
+	.type	__func__.7200, %object
+	.size	__func__.7200, 16
+__func__.7200:
 	.ascii	"make_superblock\000"
-	.type	__func__.7361, %object
-	.size	__func__.7361, 19
-__func__.7361:
+	.type	__func__.7375, %object
+	.size	__func__.7375, 19
+__func__.7375:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.17768, %object
-	.size	__func__.17768, 17
-__func__.17768:
+	.type	__func__.17790, %object
+	.size	__func__.17790, 17
+__func__.17790:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.6798, %object
-	.size	__func__.6798, 26
-__func__.6798:
+	.type	__func__.6808, %object
+	.size	__func__.6808, 26
+__func__.6808:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.6303, %object
-	.size	__func__.6303, 11
-__func__.6303:
+	.type	__func__.6313, %object
+	.size	__func__.6313, 11
+__func__.6313:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.6530, %object
-	.size	__func__.6530, 14
-__func__.6530:
+	.type	__func__.6540, %object
+	.size	__func__.6540, 14
+__func__.6540:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.7207, %object
-	.size	__func__.7207, 18
-__func__.7207:
+	.type	__func__.7221, %object
+	.size	__func__.7221, 18
+__func__.7221:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.17725, %object
-	.size	__func__.17725, 15
-__func__.17725:
+	.type	__func__.17747, %object
+	.size	__func__.17747, 15
+__func__.17747:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.6975, %object
-	.size	__func__.6975, 14
-__func__.6975:
+	.type	__func__.6985, %object
+	.size	__func__.6985, 14
+__func__.6985:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.6573, %object
-	.size	__func__.6573, 11
-__func__.6573:
+	.type	__func__.6583, %object
+	.size	__func__.6583, 11
+__func__.6583:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.7032, %object
-	.size	__func__.7032, 15
-__func__.7032:
-	.ascii	"FtlLoadSysInfo\000"
-	.type	__func__.17744, %object
-	.size	__func__.17744, 15
-__func__.17744:
+	.type	__func__.17766, %object
+	.size	__func__.17766, 15
+__func__.17766:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.6824, %object
-	.size	__func__.6824, 31
-__func__.6824:
+	.type	__func__.7347, %object
+	.size	__func__.7347, 25
+__func__.7347:
+	.ascii	"allocate_data_superblock\000"
+	.type	__func__.7388, %object
+	.size	__func__.7388, 16
+__func__.7388:
+	.ascii	"update_vpc_list\000"
+	.type	__func__.7395, %object
+	.size	__func__.7395, 20
+__func__.7395:
+	.ascii	"decrement_vpc_count\000"
+	.type	__func__.6834, %object
+	.size	__func__.6834, 31
+__func__.6834:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.6838, %object
-	.size	__func__.6838, 16
-__func__.6838:
+	.type	__func__.6848, %object
+	.size	__func__.6848, 16
+__func__.6848:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.6765, %object
-	.size	__func__.6765, 16
-__func__.6765:
+	.type	__func__.6775, %object
+	.size	__func__.6775, 16
+__func__.6775:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.6809, %object
-	.size	__func__.6809, 15
-__func__.6809:
+	.type	__func__.6819, %object
+	.size	__func__.6819, 15
+__func__.6819:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.6880, %object
-	.size	__func__.6880, 9
-__func__.6880:
+	.type	__func__.6890, %object
+	.size	__func__.6890, 9
+__func__.6890:
 	.ascii	"log2phys\000"
-	.type	__func__.7095, %object
-	.size	__func__.7095, 16
-__func__.7095:
+	.type	__func__.7109, %object
+	.size	__func__.7109, 16
+__func__.7109:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.7248, %object
-	.size	__func__.7248, 14
-__func__.7248:
-	.ascii	"ftl_check_vpc\000"
-	.type	__func__.7333, %object
-	.size	__func__.7333, 25
-__func__.7333:
-	.ascii	"allocate_data_superblock\000"
-	.type	__func__.7374, %object
-	.size	__func__.7374, 16
-__func__.7374:
-	.ascii	"update_vpc_list\000"
-	.type	__func__.7381, %object
-	.size	__func__.7381, 20
-__func__.7381:
-	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7129, %object
-	.size	__func__.7129, 22
-__func__.7129:
+	.type	__func__.7143, %object
+	.size	__func__.7143, 22
+__func__.7143:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.6953, %object
-	.size	__func__.6953, 15
-__func__.6953:
+	.type	__func__.7262, %object
+	.size	__func__.7262, 14
+__func__.7262:
+	.ascii	"ftl_check_vpc\000"
+	.type	__func__.6963, %object
+	.size	__func__.6963, 15
+__func__.6963:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.7232, %object
-	.size	__func__.7232, 21
-__func__.7232:
+	.type	__func__.7246, %object
+	.size	__func__.7246, 21
+__func__.7246:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.7354, %object
-	.size	__func__.7354, 29
-__func__.7354:
+	.type	__func__.7368, %object
+	.size	__func__.7368, 29
+__func__.7368:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.6427, %object
-	.size	__func__.6427, 13
-__func__.6427:
+	.type	__func__.6437, %object
+	.size	__func__.6437, 13
+__func__.6437:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.7451, %object
-	.size	__func__.7451, 19
-__func__.7451:
+	.type	__func__.7465, %object
+	.size	__func__.7465, 19
+__func__.7465:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.7562, %object
-	.size	__func__.7562, 23
-__func__.7562:
+	.type	__func__.7576, %object
+	.size	__func__.7576, 23
+__func__.7576:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.6455, %object
-	.size	__func__.6455, 9
-__func__.6455:
+	.type	__func__.6465, %object
+	.size	__func__.6465, 9
+__func__.6465:
 	.ascii	"FtlWrite\000"
-	.type	__func__.17892, %object
-	.size	__func__.17892, 14
-__func__.17892:
+	.type	__func__.7041, %object
+	.size	__func__.7041, 15
+__func__.7041:
+	.ascii	"FtlLoadSysInfo\000"
+	.type	__func__.7063, %object
+	.size	__func__.7063, 18
+__func__.7063:
+	.ascii	"FtlMapTblRecovery\000"
+	.type	__func__.17914, %object
+	.size	__func__.17914, 14
+__func__.17914:
 	.ascii	"FtlWriteToIDB\000"
-	.space	3
+	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
@@ -14192,7 +14346,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC118
+	.word	.LC121
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14497,9 +14651,9 @@ c_ftl_nand_data_op_blks_per_plane:
 	.space	2
 	.space	2
 	.type	gSysInfo, %object
-	.size	gSysInfo, 12
+	.size	gSysInfo, 16
 gSysInfo:
-	.space	12
+	.space	16
 	.type	g_gc_superblock, %object
 	.size	g_gc_superblock, 48
 g_gc_superblock:
@@ -14748,14 +14902,6 @@ g_recovery_page_min_ver:
 	.size	req_sys, 20
 req_sys:
 	.space	20
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
-	.space	4
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 44
-gVendorBlkInfo:
-	.space	44
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -14769,6 +14915,10 @@ g_recovery_page_num:
 	.size	g_recovery_ppa_tbl, 128
 g_recovery_ppa_tbl:
 	.space	128
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
 	.type	g_ect_tbl_power_up_flush, %object
 	.size	g_ect_tbl_power_up_flush, 2
 g_ect_tbl_power_up_flush:
@@ -14794,6 +14944,10 @@ g_gc_cur_blk_max_valid_pages:
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
+	.space	4
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
 	.space	4
 	.type	idb_need_write_back, %object
 	.size	idb_need_write_back, 4
@@ -14970,7 +15124,7 @@ gp_last_act_superblock:
 .LC69:
 	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
 .LC70:
-	.ascii	"SFTL version: 5.0.49 20181030\000"
+	.ascii	"SFTL version: 5.0.50 20181227\000"
 .LC71:
 	.ascii	"%s\012\000"
 .LC72:
@@ -15010,44 +15164,44 @@ gp_last_act_superblock:
 .LC88:
 	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC89:
-	.ascii	"FtlMapWritePage error = %x \012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC90:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC91:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC92:
-	.ascii	"spare:\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC93:
-	.ascii	"map_ppn:\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC94:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC95:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC96:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC97:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"spare:\000"
 .LC98:
-	.ascii	"ftl_scan_all_data = %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC99:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC100:
-	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
-	.ascii	"\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC101:
-	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
+	.ascii	"...%s enter...\012\000"
 .LC102:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC103:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC104:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"ftl_scan_all_data = %x\012\000"
 .LC105:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC106:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC107:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC108:
 	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC109:
@@ -15063,10 +15217,19 @@ gp_last_act_superblock:
 .LC114:
 	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC115:
-	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+	.ascii	"%s hash error this.id =%x page =%x pre_id =%x hash "
+	.ascii	"=%x hash_r =%x\012\000"
 .LC116:
-	.ascii	"%s idb buffer alloc fail\012\000"
+	.ascii	"%s last blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC117:
-	.ascii	"%p %x %p %x\012\000"
+	.ascii	"%s scan blk_id =%x page =%x hash error hash =%x has"
+	.ascii	"h_r =%x\012\000"
 .LC118:
+	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+.LC119:
+	.ascii	"%s idb buffer alloc fail\012\000"
+.LC120:
+	.ascii	"%p %x %p %x\012\000"
+.LC121:
 	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index 65224449064e..973506e2b34a 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-11-29
+ * date: 2018-12-27
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
@@ -1073,7 +1073,7 @@ select_l2p_ram_region:
 	bcc	.L138
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 787
+	mov	w2, 789
 	add	x1, x1, 96
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
@@ -1293,7 +1293,7 @@ make_superblock:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2110
+	mov	w2, 2156
 	add	x1, x1, 120
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -2268,7 +2268,7 @@ get_new_active_ppa:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2740
+	mov	w2, 2786
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -2282,7 +2282,7 @@ get_new_active_ppa:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2741
+	mov	w2, 2787
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -2292,7 +2292,7 @@ get_new_active_ppa:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2742
+	mov	w2, 2788
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -2339,7 +2339,7 @@ get_new_active_ppa:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2763
+	mov	w2, 2809
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -3816,7 +3816,7 @@ SupperBlkListInit:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2170
+	mov	w2, 2216
 	add	x1, x1, 248
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -4206,7 +4206,7 @@ FtlScanSysBlk:
 	ldrh	w2, [x19, 124]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	mov	w2, 12
+	mov	w2, 16
 	mov	w1, 255
 	add	x0, x19, 2656
 	bl	ftl_memset
@@ -4352,7 +4352,7 @@ FtlScanSysBlk:
 	cmp	w1, w0
 	bls	.L605
 	adrp	x0, .LC1
-	mov	w2, 1222
+	mov	w2, 1225
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -4436,7 +4436,7 @@ FtlScanSysBlk:
 	cmp	w1, w0
 	bls	.L615
 	adrp	x0, .LC1
-	mov	w2, 1263
+	mov	w2, 1266
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -4552,7 +4552,7 @@ FtlScanSysBlk:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 1388
+	mov	w2, 1391
 	add	x1, x1, 288
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
@@ -4811,244 +4811,6 @@ FtlLoadBbt:
 	b	.L667
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
-	.global	FtlLoadSysInfo
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
-	stp	x29, x30, [sp, -64]!
-	mov	w1, 0
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	add	x19, x20, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	add	x21, x19, 3728
-	stp	x23, x24, [sp, 48]
-	ldr	x0, [x19, 3464]
-	str	x0, [x21, 8]
-	ldr	x0, [x19, 3528]
-	str	x0, [x21, 16]
-	ldr	x0, [x19, 2376]
-	ldrh	w2, [x19, 44]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	ldrh	w0, [x19, 2656]
-	mov	w1, 65535
-	cmp	w0, w1
-	bne	.L698
-.L706:
-	mov	w0, -1
-.L697:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 64
-	ret
-.L698:
-	add	x23, x19, 2656
-	mov	w1, 1
-	bl	FtlGetLastWrittenPage
-	sxth	w22, w0
-	add	w0, w0, 1
-	mov	w24, 61604
-	strh	w0, [x23, 2]
-	mov	w23, 19539
-	movk	w23, 0x4654, lsl 16
-.L700:
-	tbz	w22, #31, .L703
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1448
-	add	x1, x1, 320
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L702:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 44]
-	ldrh	w1, [x1, 114]
-	add	x0, x0, 24
-	cmp	x1, x0, lsl 1
-	bcs	.L705
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1450
-	add	x1, x1, 320
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L705:
-	add	x19, x20, :lo12:.LANCHOR0
-	mov	w2, 48
-	add	x21, x19, 2312
-	mov	x0, x21
-	ldr	x1, [x19, 3736]
-	bl	ftl_memcpy
-	ldr	x0, [x19, 2376]
-	ldrh	w2, [x19, 44]
-	ldr	x1, [x19, 3736]
-	lsl	w2, w2, 1
-	add	x1, x1, 48
-	bl	ftl_memcpy
-	ldrh	w1, [x19, 44]
-	ldr	x0, [x19, 3736]
-	lsr	w2, w1, 3
-	ubfiz	x1, x1, 1, 16
-	add	x1, x1, 48
-	add	w2, w2, 4
-	and	x1, x1, -4
-	add	x1, x0, x1
-	ldr	x0, [x19, 24]
-	bl	ftl_memcpy
-	ldr	w1, [x19, 2312]
-	mov	w0, 19539
-	movk	w0, 0x4654, lsl 16
-	cmp	w1, w0
-	bne	.L706
-	ldrh	w1, [x19, 2320]
-	ldrb	w2, [x19, 2322]
-	ldrh	w0, [x19, 58]
-	strh	w1, [x19, 2662]
-	cmp	w2, w0
-	bne	.L706
-	ldrh	w0, [x19, 106]
-	ldrh	w2, [x19, 62]
-	ldrh	w3, [x19, 36]
-	str	w1, [x19, 3760]
-	mul	w0, w0, w1
-	str	w0, [x19, 2584]
-	mul	w0, w2, w0
-	ldr	w2, [x19, 48]
-	str	w0, [x19, 144]
-	ldrh	w0, [x19, 166]
-	cmp	w1, w2
-	sub	w0, w2, w0
-	sub	w0, w0, w1
-	udiv	w0, w0, w3
-	strh	w0, [x19, 2652]
-	bls	.L707
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1472
-	add	x1, x1, 320
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L707:
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w3, -1
-	ldrh	w2, [x0, 2328]
-	ldrh	w4, [x0, 2326]
-	strh	w4, [x0, 2424]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2430]
-	ldrb	w2, [x0, 2323]
-	strb	w2, [x0, 2432]
-	ldrh	w2, [x0, 2330]
-	strh	w2, [x0, 2472]
-	ldrh	w2, [x0, 2332]
-	strh	w5, [x0, 2426]
-	strh	w3, [x0, 2672]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2478]
-	ldrb	w2, [x0, 2324]
-	strb	w2, [x0, 2480]
-	ldrh	w2, [x0, 2334]
-	strh	w2, [x0, 2520]
-	ldrh	w2, [x0, 2336]
-	strh	w5, [x0, 2474]
-	strh	wzr, [x0, 2674]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2526]
-	ldrb	w2, [x0, 2325]
-	strb	w2, [x0, 2528]
-	ldr	w2, [x0, 2344]
-	str	w2, [x0, 2628]
-	strb	wzr, [x0, 2678]
-	strb	wzr, [x0, 2680]
-	strh	w5, [x0, 2522]
-	str	wzr, [x0, 2588]
-	str	wzr, [x0, 2596]
-	str	wzr, [x0, 2604]
-	str	wzr, [x0, 2608]
-	str	wzr, [x0, 2632]
-	str	wzr, [x0, 2644]
-	ldr	w1, [x0, 2352]
-	ldr	w2, [x0, 2620]
-	str	wzr, [x0, 2600]
-	cmp	w1, w2
-	bls	.L708
-	str	w1, [x0, 2620]
-.L708:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2348]
-	ldr	w2, [x0, 2624]
-	cmp	w1, w2
-	bls	.L709
-	str	w1, [x0, 2624]
-.L709:
-	mov	w0, 65535
-	cmp	w4, w0
-	beq	.L710
-	add	x0, x20, :lo12:.LANCHOR0
-	add	x0, x0, 2424
-	bl	make_superblock
-.L710:
-	add	x1, x20, :lo12:.LANCHOR0
-	add	x0, x1, 2472
-	ldrh	w2, [x1, 2472]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L711
-	bl	make_superblock
-.L711:
-	add	x1, x20, :lo12:.LANCHOR0
-	add	x0, x1, 2520
-	ldrh	w2, [x1, 2520]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L712
-	bl	make_superblock
-.L712:
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w1, 65535
-	add	x0, x20, 2672
-	ldrh	w2, [x20, 2672]
-	cmp	w2, w1
-	beq	.L713
-	bl	make_superblock
-.L713:
-	mov	w0, 0
-	b	.L697
-.L703:
-	ldrh	w0, [x19, 2656]
-	mov	w2, 1
-	mov	w1, w2
-	orr	w0, w22, w0, lsl 10
-	str	w0, [x21, 4]
-	ldr	x0, [x19, 3464]
-	str	x0, [x21, 8]
-	mov	x0, x21
-	bl	FlashReadPages
-	ldr	w0, [x21]
-	cmn	w0, #1
-	beq	.L701
-	ldr	x0, [x19, 3464]
-	ldr	w0, [x0]
-	cmp	w0, w23
-	bne	.L701
-	ldr	x0, [x19, 3528]
-	ldrh	w0, [x0]
-	cmp	w0, w24
-	beq	.L702
-.L701:
-	sub	w22, w22, #1
-	sxth	w22, w22
-	b	.L700
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
-	.align	2
 	.global	FlashProgPages
 	.type	FlashProgPages, %function
 FlashProgPages:
@@ -5071,52 +4833,52 @@ FlashProgPages:
 	mov	x19, x0
 	ldrh	w25, [x2, 12]
 	mov	x20, x0
-	add	x23, x23, 336
+	add	x23, x23, 320
 	add	x24, x24, :lo12:.LC1
 	lsl	w28, w25, 3
-.L720:
+.L698:
 	cmp	x20, x22
-	bne	.L734
-	cbz	w27, .L728
+	bne	.L712
+	cbz	w27, .L706
 	adrp	x20, .LC86
 	adrp	x23, .LC87
 	add	x20, x20, :lo12:.LC86
 	add	x23, x23, :lo12:.LC87
-	b	.L755
-.L734:
+	b	.L733
+.L712:
 	ldr	x0, [x20, 8]
-	cbz	x0, .L721
+	cbz	x0, .L699
 	ldr	x0, [x20, 16]
-	cbnz	x0, .L722
-.L721:
+	cbnz	x0, .L700
+.L699:
 	mov	w2, 140
 	mov	x1, x23
 	mov	x0, x24
 	bl	sftl_printk
-.L722:
+.L700:
 	ldr	w0, [x20, 4]
 	add	x2, x29, 120
 	add	x1, x29, 124
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 120]
 	cmp	w0, 3
-	bls	.L723
-.L757:
+	bls	.L701
+.L735:
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L724
-.L723:
-	cbnz	w0, .L725
+	b	.L702
+.L701:
+	cbnz	w0, .L703
 	ldr	w0, [x29, 124]
 	cmp	w28, w0
-	bls	.L725
+	bls	.L703
 	adrp	x20, .LANCHOR1
 	add	x20, x20, :lo12:.LANCHOR1
 	adrp	x21, .LC80
-	add	x20, x20, 336
+	add	x20, x20, 320
 	add	x21, x21, :lo12:.LC80
-	b	.L754
-.L727:
+	b	.L732
+.L705:
 	ldr	w2, [x19, 4]
 	mov	w0, -1
 	str	w0, [x19]
@@ -5136,11 +4898,11 @@ FlashProgPages:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC82
 	bl	rknand_print_hex
-.L754:
+.L732:
 	cmp	x19, x22
-	bne	.L727
+	bne	.L705
 	bl	dump_stack
-.L728:
+.L706:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5149,19 +4911,19 @@ FlashProgPages:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L725:
+.L703:
 	ldr	x1, [x20, 8]
 	tst	x1, 63
-	beq	.L741
+	beq	.L719
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x26, [x0, 3504]
 	cmp	x1, x26
-	beq	.L729
+	beq	.L707
 	ldrh	w2, [x0, 62]
 	mov	x0, x26
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-.L729:
+.L707:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w1, [x29, 124]
 	ldr	x3, [x20, 16]
@@ -5169,13 +4931,13 @@ FlashProgPages:
 	ldr	x5, [x0, 3384]
 	ldrb	w0, [x29, 120]
 	blr	x5
-	cbnz	w0, .L730
+	cbnz	w0, .L708
 	str	wzr, [x20]
-.L731:
+.L709:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 14]
 	cmp	w1, 4
-	bne	.L724
+	bne	.L702
 	ldr	x5, [x0, 3384]
 	add	x2, x26, 2048
 	ldrb	w0, [x29, 120]
@@ -5184,18 +4946,18 @@ FlashProgPages:
 	add	w1, w25, w1
 	add	x3, x3, 8
 	blr	x5
-	cbnz	w0, .L757
-.L724:
+	cbnz	w0, .L735
+.L702:
 	add	x20, x20, 32
-	b	.L720
-.L741:
+	b	.L698
+.L719:
 	mov	x26, x1
-	b	.L729
-.L730:
+	b	.L707
+.L708:
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L731
-.L739:
+	b	.L709
+.L717:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29, 108]
 	ldr	x1, [x0, 3504]
@@ -5212,46 +4974,46 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w24, [x29, 128]
 	cmn	w24, #1
-	bne	.L736
+	bne	.L714
 	ldr	w1, [x19, 4]
 	mov	x0, x20
 	bl	sftl_printk
 	str	w24, [x19]
-.L736:
+.L714:
 	ldr	x0, [x19, 16]
-	cbz	x0, .L737
+	cbz	x0, .L715
 	ldr	w2, [x0]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3520]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L737
+	beq	.L715
 	ldr	w1, [x19, 4]
 	mov	x0, x23
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L737:
+.L715:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L738
+	cbz	x0, .L716
 	ldr	w2, [x0]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3504]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L738
+	beq	.L716
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC88
 	add	x0, x0, :lo12:.LC88
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L738:
+.L716:
 	add	x19, x19, 32
-.L755:
+.L733:
 	cmp	x19, x22
-	bne	.L739
-	b	.L728
+	bne	.L717
+	b	.L706
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
 	.global	FtlLowFormatEraseBlock
@@ -5274,11 +5036,11 @@ FtlLowFormatEraseBlock:
 	mov	w20, 0
 	mov	w19, 0
 	str	w23, [x5, 3436]
-.L759:
+.L737:
 	ldrh	w0, [x5, 36]
 	cmp	w0, w10
-	bhi	.L763
-	cbz	w20, .L758
+	bhi	.L741
+	cbz	w20, .L736
 	ldr	x0, [x5, 3416]
 	mov	w2, w20
 	mov	w1, 0
@@ -5286,38 +5048,38 @@ FtlLowFormatEraseBlock:
 	mov	x24, 0
 	add	x25, x21, :lo12:.LANCHOR0
 	bl	FlashEraseBlocks
-.L767:
+.L745:
 	ldr	x0, [x25, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	bne	.L766
+	bne	.L744
 	ldr	w0, [x1, 4]
 	add	w19, w19, 1
 	and	w19, w19, 65535
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
-.L766:
+.L744:
 	add	x24, x24, 32
 	cmp	x24, x20
-	bne	.L767
-	cbz	w22, .L780
+	bne	.L745
+	cbz	w22, .L758
 	add	x0, x21, :lo12:.LANCHOR0
 	mov	w25, 1
 	ldrh	w26, [x0, 108]
-.L768:
+.L746:
 	add	x28, x21, :lo12:.LANCHOR0
 	mov	w24, 0
 	add	x0, x28, 64
 	str	x0, [x29, 104]
-.L776:
+.L754:
 	mov	w5, 0
 	mov	w20, 0
-.L769:
+.L747:
 	ldrh	w0, [x28, 36]
 	cmp	w0, w5
-	bhi	.L772
-	cbz	w20, .L758
+	bhi	.L750
+	cbz	w20, .L736
 	ldr	x0, [x28, 3416]
 	mov	w1, w20
 	mov	w3, 1
@@ -5325,11 +5087,11 @@ FtlLowFormatEraseBlock:
 	mov	x27, 0
 	bl	FlashProgPages
 	ubfiz	x1, x20, 5, 16
-.L775:
+.L753:
 	ldr	x0, [x28, 3416]
 	add	x3, x0, x27
 	ldr	w0, [x0, x27]
-	cbz	w0, .L774
+	cbz	w0, .L752
 	ldr	w0, [x3, 4]
 	add	w19, w19, 1
 	str	x1, [x29, 96]
@@ -5337,38 +5099,38 @@ FtlLowFormatEraseBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29, 96]
-.L774:
+.L752:
 	add	x27, x27, 32
 	cmp	x1, x27
-	bne	.L775
+	bne	.L753
 	add	w24, w24, 1
 	cmp	w26, w24, uxth
-	bhi	.L776
+	bhi	.L754
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	x24, 0
-.L778:
-	cbz	w22, .L777
+.L756:
+	cbz	w22, .L755
 	ldr	x0, [x26, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
-	cbnz	w0, .L777
+	cbnz	w0, .L755
 	ldr	w0, [x1, 4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L777:
+.L755:
 	add	x24, x24, 32
 	cmp	x24, x27
-	bne	.L778
+	bne	.L756
 	cmp	w23, 63
 	ccmp	w22, 0, 0, hi
-	beq	.L758
+	beq	.L736
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, w20
 	mov	w1, w25
 	ldr	x0, [x21, 3416]
 	bl	FlashEraseBlocks
-.L758:
+.L736:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5377,7 +5139,7 @@ FtlLowFormatEraseBlock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L763:
+.L741:
 	ldr	x1, [x5, 3416]
 	ubfiz	x0, x10, 5, 16
 	str	wzr, [x1, x0]
@@ -5386,13 +5148,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L760
+	cbz	w22, .L738
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L761
-.L760:
+	cbnz	w0, .L739
+.L738:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L762
+	cbnz	w0, .L740
 	ldr	x0, [x5, 3416]
 	ubfiz	x2, x20, 5, 16
 	lsl	w6, w6, 10
@@ -5410,19 +5172,19 @@ FtlLowFormatEraseBlock:
 	sdiv	w0, w0, w9
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L761:
+.L739:
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L759
-.L762:
+	b	.L737
+.L740:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L761
-.L780:
+	b	.L739
+.L758:
 	mov	w25, 0
 	mov	w26, 2
-	b	.L768
-.L772:
+	b	.L746
+.L750:
 	ldr	x1, [x28, 3416]
 	ubfiz	x0, x5, 5, 16
 	str	wzr, [x1, x0]
@@ -5432,13 +5194,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L770
+	cbz	w22, .L748
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L771
-.L770:
+	cbnz	w0, .L749
+.L748:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L771
+	cbnz	w0, .L749
 	ldr	x0, [x28, 3416]
 	ubfiz	x2, x20, 5, 16
 	add	w6, w24, w6, lsl 10
@@ -5457,2953 +5219,3008 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x28, 3496]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L771:
+.L749:
 	add	w5, w5, 1
 	and	w5, w5, 65535
-	b	.L769
+	b	.L747
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.global	Ftl_write_map_blk_to_last_page
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
-	stp	x29, x30, [sp, -64]!
-	mov	w1, 65535
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	stp	x21, x22, [sp, 32]
-	str	x23, [sp, 48]
-	ldr	x20, [x0, 16]
-	ldrh	w0, [x0]
-	cmp	w0, w1
-	bne	.L802
-	ldrh	w0, [x19, 8]
-	cbz	w0, .L803
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 641
-	add	x1, x1, 352
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L803:
-	ldrh	w0, [x19, 8]
-	add	w0, w0, 1
-	strh	w0, [x19, 8]
-	bl	FtlFreeSysBlkQueueOut
-	strh	w0, [x20]
-	strh	wzr, [x19, 2]
-	ldr	w0, [x19, 48]
-	strh	wzr, [x19]
-	add	w0, w0, 1
-	str	w0, [x19, 48]
-.L804:
-	mov	w0, 0
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-.L802:
-	ubfiz	x0, x0, 1, 16
-	adrp	x21, .LANCHOR0
-	ldr	w1, [x19, 48]
-	ldr	x23, [x19, 40]
-	ldrh	w22, [x20, x0]
-	add	x20, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 2]
-	orr	w0, w0, w22, lsl 10
-	str	w0, [x20, 3732]
-	ldr	x0, [x20, 3464]
-	str	x0, [x20, 3736]
-	ldr	x0, [x20, 3528]
-	str	x0, [x20, 3744]
-	str	w1, [x0, 4]
-	mov	w1, -1291
-	strh	w1, [x0, 8]
-	ldrh	w1, [x19, 4]
-	strh	w1, [x0]
-	strh	w22, [x0, 2]
-	mov	w1, 255
-	ldrh	w2, [x20, 108]
-	ldr	x0, [x20, 3464]
-	lsl	w2, w2, 3
+	and	w19, w0, 65535
+	cmp	w19, 11
+	bls	.L782
+	adrp	x20, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w2, 32
+	mov	w1, 165
+	lsl	w19, w19, 10
+	ldr	x0, [x20, 3512]
+	str	x0, [x29, 40]
+	add	x0, x29, 64
+	str	x0, [x29, 48]
 	bl	ftl_memset
-	mov	w0, 0
-	mov	w1, 0
-.L805:
-	ldrh	w2, [x19, 6]
-	cmp	w2, w1
-	bhi	.L807
-	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x0, [x20, 3512]
+	mov	w2, 8
+	mov	w1, 90
+	bl	ftl_memset
+	str	w19, [x29, 36]
 	mov	w2, 1
-	mov	w3, 0
+	add	x0, x29, 32
 	mov	w1, w2
-	add	x0, x0, 3728
+	bl	FlashEraseBlocks
+	mov	w3, 1
+	add	x0, x29, 32
+	mov	w2, w3
+	mov	w1, w3
 	bl	FlashProgPages
-	ldrh	w0, [x19, 2]
-	add	w0, w0, 1
-	strh	w0, [x19, 2]
-	mov	x0, x19
-	bl	ftl_map_blk_gc
-	b	.L804
-.L807:
-	ubfiz	x2, x1, 2, 16
-	ldr	w3, [x23, x2]
-	cmp	w22, w3, lsr 10
-	bne	.L806
-	add	w0, w0, 1
-	ldr	x4, [x20, 3464]
-	and	w0, w0, 65535
-	ubfiz	x3, x0, 3, 16
-	str	w1, [x4, x3]
-	ldr	w4, [x23, x2]
-	ldr	x2, [x20, 3464]
-	add	x2, x2, x3
-	str	w4, [x2, 4]
-.L806:
-	add	w1, w1, 1
-	and	w1, w1, 65535
-	b	.L805
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	ldr	w0, [x29, 32]
+	cbnz	w0, .L783
+	add	w0, w19, 1
+	mov	w3, 1
+	str	w0, [x29, 36]
+	mov	w2, w3
+	mov	w1, w3
+	add	x0, x29, 32
+	bl	FlashProgPages
+	ldr	w0, [x29, 32]
+	cmp	w0, 0
+	csetm	w20, ne
+.L781:
+	mov	w2, 1
+	mov	w1, 0
+	add	x0, x29, 32
+	str	w19, [x29, 36]
+	bl	FlashEraseBlocks
+.L779:
+	mov	w0, w20
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 128
+	ret
+.L783:
+	mov	w20, -1
+	b	.L781
+.L782:
+	mov	w20, 0
+	b	.L779
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
-	.global	FtlMapWritePage
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
-	stp	x29, x30, [sp, -96]!
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 0
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR0
-	add	x24, x23, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	stp	x21, x22, [sp, 32]
-	mov	x19, x0
+	mov	w19, 0
 	stp	x25, x26, [sp, 64]
-	adrp	x22, .LANCHOR1
-	stp	x27, x28, [sp, 80]
-	mov	w26, w1
-	mov	x27, x2
-	mov	x25, x23
-	add	x22, x22, :lo12:.LANCHOR1
-	add	x20, x24, 3728
+	adrp	x25, .LANCHOR0
+	add	x20, x25, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	stp	x23, x24, [sp, 48]
+	add	x21, x20, 192
+	ldr	x2, [x20, 3528]
+	ldr	x0, [x20, 3464]
+	str	x2, [x20, 3744]
+	ldrh	w2, [x20, 114]
+	str	x0, [x20, 3736]
+	bl	ftl_memset
+.L786:
+	ldrh	w0, [x20, 58]
+	add	x1, x20, 3728
+	cmp	w19, w0
+	blt	.L787
+	ldr	x26, [x1, 16]
+	add	x19, x20, 160
+	mov	w2, 16
+	mov	w1, 255
+	mov	x0, x26
+	bl	ftl_memset
+	mov	w0, -3887
+	adrp	x22, .LC89
+	strh	w0, [x26]
+	add	x25, x25, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LC89
 	mov	w21, 0
-.L813:
-	add	x0, x23, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2604]
-	add	w1, w1, 1
-	str	w1, [x0, 2604]
-	ldrh	w0, [x0, 108]
-	ldrh	w1, [x19, 2]
-	sub	w0, w0, #1
-	cmp	w1, w0
-	bge	.L814
-	ldrh	w1, [x19]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L815
-.L814:
-	mov	x0, x19
-	bl	Ftl_write_map_blk_to_last_page
-.L815:
+	ldr	w0, [x19, 8]
+	mov	w23, 0
+	str	w0, [x26, 4]
+	adrp	x24, .LC90
+	ldrh	w0, [x20, 160]
+	strh	w0, [x26, 2]
+	ldrh	w0, [x19, 4]
+	strh	w0, [x26, 8]
+	ldrh	w0, [x19, 6]
+	strh	w0, [x26, 10]
+	ldr	w0, [x20, 32]
+	strh	w0, [x26, 12]
+.L788:
+	ldr	x0, [x25, 3464]
+	str	x0, [x25, 3736]
+	ldr	x0, [x25, 3528]
+	str	x0, [x25, 3744]
 	ldrh	w1, [x19]
-	ldr	x0, [x19, 16]
-	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L816
-	adrp	x0, .LC1
-	mov	w2, 699
-	add	x1, x22, 384
-	add	x0, x0, :lo12:.LC1
+	ldrh	w2, [x19, 2]
+	ldrh	w3, [x19, 4]
+	ldrh	w4, [x26, 10]
+	orr	w0, w2, w1, lsl 10
+	str	wzr, [x25, 3728]
+	str	w0, [x25, 3732]
+	mov	x0, x22
 	bl	sftl_printk
-.L816:
-	ldrh	w1, [x19]
-	ldrh	w0, [x19, 10]
+	ldrh	w0, [x25, 108]
+	ldrh	w1, [x19, 2]
+	sub	w0, w0, #1
 	cmp	w1, w0
-	bcc	.L817
-	adrp	x0, .LC1
-	mov	w2, 700
-	add	x1, x22, 384
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L817:
+	blt	.L789
+	ldr	w0, [x19, 8]
+	mov	w2, 1
 	ldrh	w1, [x19]
-	mov	w2, 16
-	ldr	x0, [x19, 16]
-	ldrh	w28, [x0, x1, lsl 1]
-	mov	w1, 0
-	ldrh	w0, [x19, 2]
-	str	x27, [x20, 8]
-	orr	w0, w0, w28, lsl 10
-	str	w0, [x20, 4]
-	ldr	x0, [x24, 3528]
-	str	x0, [x20, 16]
-	bl	ftl_memset
-	ldr	x0, [x20, 16]
+	add	w0, w0, 1
+	str	w0, [x19, 8]
+	str	w0, [x26, 4]
+	strh	w1, [x26, 8]
+	ldrh	w0, [x19, 4]
+	strh	w1, [x19, 4]
+	ldr	x1, [x25, 3416]
+	strh	w0, [x19]
+	lsl	w0, w0, 10
+	str	w0, [x25, 3732]
+	strh	wzr, [x19, 2]
+	str	w0, [x1, 4]
+	mov	w1, w2
+	ldr	x0, [x25, 3416]
+	bl	FlashEraseBlocks
+.L789:
+	add	x20, x25, 3728
 	mov	w3, 1
-	ldr	w1, [x19, 48]
+	mov	x0, x20
 	mov	w2, w3
-	strh	w26, [x0, 8]
-	str	w1, [x0, 4]
-	ldrh	w1, [x19, 4]
-	strh	w1, [x0]
 	mov	w1, w3
-	strh	w28, [x0, 2]
-	mov	x0, x20
 	bl	FlashProgPages
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
-	and	w0, w0, 65535
 	strh	w0, [x19, 2]
-	ldr	w1, [x20]
-	cmn	w1, #1
-	bne	.L818
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC89
-	add	x0, x0, :lo12:.LC89
+	ldr	w0, [x25, 3728]
+	cmn	w0, #1
+	bne	.L790
+	ldr	w1, [x25, 3732]
 	add	w21, w21, 1
+	add	x0, x24, :lo12:.LC90
 	and	w21, w21, 65535
 	bl	sftl_printk
-	ldrh	w0, [x19, 2]
-	cmp	w0, 2
-	bhi	.L819
-	ldrh	w0, [x24, 108]
-	sub	w0, w0, #1
-	strh	w0, [x19, 2]
-.L819:
 	cmp	w21, 3
-	bls	.L820
-	add	x25, x25, :lo12:.LANCHOR0
-	adrp	x0, .LC90
-	mov	w2, w21
-	add	x0, x0, :lo12:.LC90
+	bls	.L788
 	ldr	w1, [x25, 3732]
+	adrp	x0, .LC91
+	mov	w2, w21
+	add	x0, x0, :lo12:.LC91
 	bl	sftl_printk
-.L821:
-	b	.L821
-.L820:
-	ldr	w0, [x19, 52]
-	cbz	w0, .L813
-.L835:
-	b	.L835
-.L818:
-	cmp	w0, 1
-	beq	.L824
-	cmp	w1, 256
-	beq	.L824
-	ldr	w0, [x19, 56]
-	cbz	w0, .L825
-.L824:
-	str	wzr, [x19, 56]
-	b	.L813
-.L825:
-	ldr	x0, [x19, 40]
-	ldr	w1, [x20, 4]
-	str	w1, [x0, w26, uxtw 2]
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	FtlMapWritePage, .-FtlMapWritePage
+.L792:
+	b	.L792
+.L787:
+	ldrh	w2, [x20, 3640]
+	ldr	x0, [x1, 8]
+	ldr	x1, [x21], 8
+	mul	w3, w19, w2
+	lsl	w2, w2, 2
+	add	w19, w19, 1
+	add	x0, x0, x3, sxtw 2
+	bl	ftl_memcpy
+	b	.L786
+.L793:
+	mov	w23, 1
+	b	.L788
+.L790:
+	cbz	w23, .L793
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
-	.global	load_l2p_region
-	.type	load_l2p_region, %function
-load_l2p_region:
-	stp	x29, x30, [sp, -80]!
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	and	w22, w0, 65535
 	adrp	x21, .LANCHOR0
-	add	x0, x21, :lo12:.LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	and	x19, x1, 65535
 	stp	x23, x24, [sp, 48]
-	str	x25, [sp, 64]
-	ldrh	w0, [x0, 140]
-	cmp	w0, w22
-	bcs	.L838
+	mov	x20, x0
+	mov	x19, x22
+	add	x23, x22, 2520
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+.L796:
+	ldrh	w1, [x22, 2400]
+	ldrh	w0, [x22, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x22, 44]
+	cmp	w0, w1
+	ble	.L797
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 485
-	add	x1, x1, 400
+	mov	w2, 2661
+	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L838:
-	add	x20, x21, :lo12:.LANCHOR0
-	ubfiz	x0, x22, 2, 16
-	ldr	x1, [x20, 3616]
-	ldr	w24, [x1, x0]
-	cbnz	w24, .L839
-	ldr	x0, [x20, 2568]
-	lsl	x19, x19, 4
-	ldrh	w2, [x20, 114]
-	mov	w1, 255
-	add	x0, x0, x19
-	ldr	x0, [x0, 8]
-	bl	ftl_memset
-	ldr	x0, [x20, 2568]
-	strh	w22, [x0, x19]
-	ldr	x0, [x20, 2568]
-	add	x19, x0, x19
-	str	wzr, [x19, 4]
-.L840:
-	mov	w0, 0
-	ldr	x25, [sp, 64]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 80
-	ret
-.L839:
-	ldr	x0, [x20, 2568]
-	lsl	x19, x19, 4
-	add	x23, x20, 3728
-	mov	w2, 1
-	add	x0, x0, x19
-	mov	w1, w2
-	str	w24, [x20, 3732]
-	ldr	x0, [x0, 8]
-	str	x0, [x20, 3736]
-	ldr	x0, [x20, 3528]
-	str	x0, [x20, 3744]
-	mov	x0, x23
-	bl	FlashReadPages
-	ldr	x25, [x20, 3744]
-	ldrh	w0, [x25, 8]
-	cmp	w0, w22
-	beq	.L841
-	mov	w2, w24
-	mov	w1, w22
-	adrp	x0, .LC91
-	add	x0, x0, :lo12:.LC91
-	bl	sftl_printk
-	ldr	x1, [x20, 3744]
-	mov	w3, 4
-	adrp	x0, .LC92
-	mov	w2, w3
-	add	x0, x0, :lo12:.LC92
-	bl	rknand_print_hex
-	ldrh	w3, [x20, 140]
-	adrp	x0, .LC93
-	ldr	x1, [x20, 3616]
-	mov	w2, 4
-	add	x0, x0, :lo12:.LC93
-	bl	rknand_print_hex
-.L842:
-	ldrh	w0, [x25, 8]
-	cmp	w0, w22
-	beq	.L843
+.L797:
+	cmp	x20, x23
+	bne	.L823
+	ldrh	w0, [x19, 2416]
+	ldr	w1, [x19, 3244]
+	mul	w1, w0, w1
+	lsr	w0, w0, 1
+	add	w0, w0, 1
+	add	w1, w0, w1, lsr 2
+	ands	w1, w1, 65535
+	beq	.L798
+	sub	w1, w1, #1
+	and	w1, w1, 65535
+.L798:
+	add	x0, x19, 2408
+	bl	List_pop_index_node
+	and	w25, w0, 65535
+	ldrh	w0, [x19, 2416]
+	cbnz	w0, .L799
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 508
-	add	x1, x1, 400
+	mov	w2, 2670
+	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L843:
-	add	x21, x21, :lo12:.LANCHOR0
-	ldr	x0, [x21, 2568]
-	add	x0, x0, x19
-	str	wzr, [x0, 4]
-	ldr	x0, [x21, 2568]
-	strh	w22, [x0, x19]
-	b	.L840
-.L841:
-	ldr	w0, [x20, 3728]
-	cmp	w0, 256
-	bne	.L842
-	mov	w2, w24
-	mov	w1, w22
-	adrp	x0, .LC94
-	add	x0, x0, :lo12:.LC94
-	bl	sftl_printk
-	ldr	x0, [x20, 2568]
-	mov	w1, w22
-	add	x0, x0, x19
-	ldr	x2, [x0, 8]
-	add	x0, x20, 3648
-	bl	FtlMapWritePage
-	b	.L842
-	.size	load_l2p_region, .-load_l2p_region
-	.align	2
-	.global	ftl_map_blk_gc
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	stp	x21, x22, [sp, 32]
-	adrp	x22, .LANCHOR0
-	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-	ldr	x20, [x0, 16]
-	ldr	x25, [x0, 40]
-	bl	ftl_free_no_use_map_blk
-	ldrh	w1, [x19, 10]
-	ldrh	w2, [x19, 8]
-	sub	w1, w1, #5
-	cmp	w2, w1
-	blt	.L846
-	ubfiz	x0, x0, 1, 16
-	ldrh	w26, [x20, x0]
-	cbz	w26, .L846
-	ldr	w1, [x19, 52]
-	cbnz	w1, .L846
-	mov	w1, 1
-	str	w1, [x19, 52]
-	strh	wzr, [x20, x0]
-	ldrh	w0, [x19, 8]
-	ldrh	w1, [x19, 2]
+.L799:
+	ldrh	w0, [x19, 2416]
 	sub	w0, w0, #1
-	strh	w0, [x19, 8]
-	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 108]
-	cmp	w1, w0
-	bcc	.L847
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L847:
-	add	x27, x22, :lo12:.LANCHOR0
-	adrp	x23, .LANCHOR1
-	add	x23, x23, :lo12:.LANCHOR1
-	add	x21, x27, 3728
-	add	x23, x23, 416
-	mov	w20, 0
-.L848:
-	ldrh	w0, [x19, 6]
-	cmp	w0, w20
-	bhi	.L855
-	mov	w1, 1
-	mov	w0, w26
-	bl	FtlFreeSysBlkQueueIn
-	str	wzr, [x19, 52]
-.L846:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w1, [x19, 2]
-	ldrh	w0, [x22, 108]
-	cmp	w1, w0
-	bcc	.L856
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L856:
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
-	ret
-.L855:
-	ubfiz	x0, x20, 2, 16
-	add	x28, x25, x0
-	ldr	w1, [x25, x0]
-	cmp	w26, w1, lsr 10
-	bne	.L849
-	ldr	x1, [x27, 3472]
-	mov	w2, 1
-	ldr	x24, [x27, 3528]
-	stp	x1, x24, [x21, 8]
-	mov	w1, w2
-	ldr	w0, [x25, x0]
-	str	w0, [x21, 4]
-	mov	x0, x21
-	bl	FlashReadPages
-	ldrh	w0, [x24, 8]
-	cmp	w0, w20
-	beq	.L850
+	strh	w0, [x19, 2416]
+	ldrh	w0, [x19, 44]
+	cmp	w0, w25
+	bls	.L796
+	ldr	x0, [x19, 2376]
+	ubfiz	x26, x25, 1, 16
+	ldrh	w24, [x0, x26]
+	cbnz	w24, .L796
+	strh	w25, [x20]
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L801
+	ldr	x0, [x19, 2376]
+	mov	w1, -1
+	strh	w1, [x0, x26]
+	mov	w0, w25
+	bl	INSERT_DATA_LIST
+	ldrh	w1, [x19, 2400]
+	ldrh	w0, [x19, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x19, 44]
+	cmp	w0, w1
+	ble	.L796
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2684
+	add	x1, x1, 336
 	adrp	x0, .LC1
-	mov	w2, 611
-	mov	x1, x23
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L850:
-	ldr	w0, [x21]
-	cmn	w0, #1
-	bne	.L851
-.L853:
-	str	wzr, [x28]
-.L852:
-	b	.L852
-.L851:
-	ldrh	w0, [x24, 8]
-	cmp	w0, w20
-	bne	.L853
-	ldrh	w1, [x24]
-	ldrh	w0, [x19, 4]
-	cmp	w1, w0
-	bne	.L853
-	ldr	x2, [x21, 8]
-	mov	w1, w20
-	mov	x0, x19
-	bl	FtlMapWritePage
-.L849:
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	b	.L848
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
-	.align	2
-	.global	FtlMapTblRecovery
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
-	stp	x29, x30, [sp, -128]!
+	b	.L796
+.L823:
+	mov	w1, 0
+	b	.L798
+.L801:
+	ldrh	w1, [x19, 2400]
+	ldrh	w0, [x19, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x19, 44]
+	cmp	w0, w1
+	ble	.L803
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2687
+	add	x1, x1, 336
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L803:
+	add	x27, x20, 16
+	ldrh	w4, [x19, 36]
+	mov	x3, x27
+	mov	x0, 0
+	mov	w5, 65535
+.L804:
+	cmp	w4, w0, uxth
+	bhi	.L806
+	cbnz	w24, .L807
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2698
+	add	x1, x1, 336
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L807:
+	ldrh	w0, [x19, 2672]
+	cmp	w0, w25
+	bne	.L808
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2700
+	add	x1, x1, 336
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L808:
+	ldrb	w0, [x20, 8]
+	ldr	x1, [x19, 2384]
+	cbnz	w0, .L809
+	ldrh	w0, [x1, x26]
+	cbz	w0, .L810
+	ldrh	w2, [x19, 96]
+	add	w0, w0, w2
+.L831:
+	strh	w0, [x1, x26]
+	mov	w1, 0
+	ldr	w0, [x19, 2628]
+	add	w0, w0, 1
+	str	w0, [x19, 2628]
+	mov	w0, w25
+	bl	ftl_set_blk_mode
+.L812:
+	ldr	x0, [x19, 2384]
+	ldr	w1, [x19, 2644]
+	ldrh	w0, [x0, x26]
+	cmp	w0, w1
+	bls	.L813
+	str	w0, [x19, 2644]
+.L813:
+	ldr	w1, [x19, 2632]
+	ubfiz	x3, x24, 5, 16
+	ldrh	w0, [x19, 96]
+	ldr	w2, [x19, 2628]
+	madd	w0, w0, w2, w1
+	ldrh	w1, [x19, 44]
+	udiv	w0, w0, w1
+	ldr	x1, [x19, 3560]
+	str	w0, [x19, 2636]
+	ldr	w0, [x1, 16]
+	add	w0, w0, 1
+	str	w0, [x1, 16]
+	mov	x0, 0
+.L814:
+	cmp	x3, x0
+	bne	.L815
+	ldrb	w1, [x20, 8]
+	mov	w2, w24
+	ldr	x0, [x19, 3416]
+	mov	x28, 0
+	bl	FlashEraseBlocks
 	mov	w1, 0
+.L816:
+	cmp	w24, w28, uxth
+	bhi	.L818
+	cmp	w1, 0
+	ble	.L819
+	mov	w0, w25
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L819:
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L820
+	ldr	x0, [x19, 2376]
+	mov	w1, -1
+	strh	w1, [x0, x26]
+	b	.L796
+.L806:
+	ldr	x1, [x19, 3416]
+	add	x2, x1, x0, lsl 5
+	stp	xzr, xzr, [x2, 8]
+	ldrh	w2, [x3]
+	cmp	w2, w5
+	beq	.L805
+	ubfiz	x6, x24, 5, 16
+	add	w24, w24, 1
+	add	x1, x1, x6
+	and	w24, w24, 65535
+	lsl	w2, w2, 10
+	str	w2, [x1, 4]
+.L805:
+	add	x0, x0, 1
+	add	x3, x3, 2
+	b	.L804
+.L810:
+	mov	w0, 2
+	b	.L831
+.L809:
+	ldrh	w0, [x1, x26]
+	add	w0, w0, 1
+	strh	w0, [x1, x26]
+	ldr	w0, [x19, 2632]
+	add	w0, w0, 1
+	str	w0, [x19, 2632]
+	mov	w0, w25
+	bl	ftl_set_blk_mode.part.7
+	b	.L812
+.L815:
+	ldr	x1, [x19, 3416]
+	add	x1, x1, x0
+	add	x0, x0, 32
+	ldr	w2, [x1, 4]
+	and	w2, w2, -1024
+	str	w2, [x1, 4]
+	b	.L814
+.L818:
+	ldr	x2, [x19, 3416]
+	lsl	x0, x28, 5
+	add	x3, x2, x0
+	ldr	w2, [x2, x0]
+	cmn	w2, #1
+	bne	.L817
+	add	w1, w1, 1
+	ldr	w0, [x3, 4]
+	stp	w2, w1, [x29, 104]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	ldp	w2, w1, [x29, 104]
+	strh	w2, [x27]
+	ldrb	w0, [x20, 7]
+	sub	w0, w0, #1
+	strb	w0, [x20, 7]
+.L817:
+	add	x28, x28, 1
+	add	x27, x27, 2
+	b	.L816
+.L820:
+	add	x21, x21, :lo12:.LANCHOR0
+	strh	wzr, [x20, 2]
+	strb	wzr, [x20, 6]
+	ldrh	w1, [x21, 106]
+	strh	w25, [x20]
+	mul	w0, w0, w1
+	ldr	w1, [x21, 2620]
+	str	w1, [x20, 12]
+	and	w0, w0, 65535
+	add	w1, w1, 1
+	strh	w0, [x20, 4]
+	str	w1, [x21, 2620]
+	ldr	x1, [x21, 2376]
+	ldrh	w2, [x20]
+	strh	w0, [x1, x2, lsl 1]
+	ldrh	w0, [x20, 4]
+	cbz	w0, .L821
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L822
+.L821:
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2753
+	add	x1, x1, 336
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L822:
+	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	x19, x0
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-	mov	w27, 0
+	and	w22, w0, 65535
 	stp	x23, x24, [sp, 48]
-	ldrh	w24, [x0, 6]
-	ldr	x0, [x0, 40]
-	str	x0, [x29, 120]
-	ldrh	w0, [x19, 8]
-	lsl	w2, w24, 2
-	str	w0, [x29, 116]
-	ldr	x0, [x29, 120]
-	ldp	x23, x26, [x19, 16]
-	bl	ftl_memset
-	stp	wzr, wzr, [x19, 48]
-	add	x3, x21, :lo12:.LANCHOR0
-	add	x20, x3, 3728
-	mov	x25, x3
-	ldr	x0, [x3, 3464]
-	ldr	x22, [x3, 3528]
-	stp	x0, x22, [x20, 8]
-	mov	w0, -1
-	strh	w0, [x19]
-	strh	w0, [x19, 2]
-	mov	w0, 1
-	str	w0, [x19, 56]
-	ldr	w0, [x29, 116]
-	sub	w0, w0, #1
-	str	w0, [x29, 112]
-.L863:
-	ldr	w0, [x29, 116]
-	cmp	w27, w0
-	bge	.L880
-	ldr	w0, [x29, 112]
-	sxtw	x28, w27
-	cmp	w27, w0
-	bne	.L864
-	lsl	x0, x28, 1
-	mov	w1, 1
-	add	x20, x23, x0
-	add	x25, x21, :lo12:.LANCHOR0
-	add	x25, x25, 3728
-	ldrh	w0, [x23, x0]
-	mov	w23, 0
-	bl	FtlGetLastWrittenPage
-	strh	w27, [x19]
-	sxth	w1, w0
-	add	w0, w0, 1
-	strh	w0, [x19, 2]
-	ldr	w0, [x26, x28, lsl 2]
-	add	w26, w1, 1
-	str	w0, [x19, 48]
-.L865:
-	cmp	w23, w26
-	blt	.L867
-.L880:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	x0, x19
-	bl	ftl_free_no_use_map_blk
-	ldrh	w1, [x19, 2]
-	ldrh	w0, [x21, 108]
-	cmp	w1, w0
-	bne	.L869
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L869:
-	mov	x0, x19
-	bl	ftl_map_blk_gc
-	mov	x0, x19
-	bl	ftl_map_blk_gc
+	stp	x25, x26, [sp, 64]
+	ldrh	w0, [x19, 3324]
+	str	x27, [sp, 80]
+	cbz	w0, .L833
+	add	x23, x19, 64
+	add	x24, x19, 3328
+	mov	w21, 0
+.L834:
+	ldrh	w0, [x19, 36]
+	cmp	w0, w21
+	bhi	.L840
+	bl	FtlGcReFreshBadBlk
+.L833:
 	mov	w0, 0
+	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 96
 	ret
-.L867:
-	ldrh	w0, [x20]
-	mov	w2, 1
-	mov	w1, w2
-	orr	w0, w23, w0, lsl 10
-	str	w0, [x25, 4]
-	mov	x0, x25
-	bl	FlashReadPages
-	ldr	w0, [x25]
-	cmn	w0, #1
-	beq	.L866
-	ldrh	w0, [x22, 8]
-	cmp	w24, w0
-	bls	.L866
-	ldrh	w2, [x22]
-	ldrh	w1, [x19, 4]
-	cmp	w2, w1
-	bne	.L866
-	ldr	x2, [x29, 120]
-	ubfiz	x0, x0, 2, 16
-	ldr	w1, [x25, 4]
-	str	w1, [x2, x0]
-.L866:
-	add	w23, w23, 1
-	sxth	w23, w23
-	b	.L865
-.L864:
-	ldr	x0, [x25, 3464]
-	mov	w2, 1
-	str	x0, [x20, 8]
-	lsl	x0, x28, 1
-	ldrh	w1, [x25, 108]
-	add	x28, x23, x0
-	ldrh	w0, [x23, x0]
-	sub	w1, w1, #1
-	orr	w0, w1, w0, lsl 10
-	mov	w1, w2
-	str	w0, [x20, 4]
-	mov	x0, x20
-	bl	FlashReadPages
-	ldr	w0, [x20]
-	cmn	w0, #1
-	beq	.L882
-	ldrh	w1, [x22]
-	ldrh	w0, [x19, 4]
-	cmp	w1, w0
-	bne	.L882
-	ldrh	w1, [x22, 8]
-	mov	w0, 64245
-	cmp	w1, w0
-	beq	.L871
-.L882:
-	mov	w5, 0
-.L872:
-	ldrh	w0, [x25, 108]
-	cmp	w5, w0
-	bge	.L878
-	ldrh	w0, [x28]
-	mov	w2, 1
-	str	w5, [x29, 108]
-	mov	w1, w2
-	orr	w0, w5, w0, lsl 10
-	str	w0, [x20, 4]
-	mov	x0, x20
-	bl	FlashReadPages
-	ldr	w0, [x20]
-	ldr	w5, [x29, 108]
-	cmn	w0, #1
-	beq	.L876
-	ldrh	w0, [x22, 8]
-	cmp	w24, w0
-	bls	.L876
-	ldrh	w2, [x22]
-	ldrh	w1, [x19, 4]
-	cmp	w2, w1
-	bne	.L876
-	ldr	x2, [x29, 120]
-	ubfiz	x0, x0, 2, 16
-	ldr	w1, [x20, 4]
-	str	w1, [x2, x0]
-.L876:
-	add	w5, w5, 1
-	sxth	w5, w5
-	b	.L872
-.L871:
-	mov	w0, 0
-.L873:
-	ldrh	w1, [x25, 108]
-	sub	w1, w1, #1
-	cmp	w0, w1
-	blt	.L875
-.L878:
-	add	w4, w27, 1
-	sxth	w27, w4
-	b	.L863
-.L875:
-	ldr	x2, [x25, 3464]
-	sbfiz	x5, x0, 3, 32
-	ldrh	w1, [x2, x5]
-	cmp	w24, w1
-	bls	.L874
-	add	x2, x2, x5
-	ldr	x3, [x29, 120]
-	ubfiz	x1, x1, 2, 16
-	ldr	w2, [x2, 4]
-	str	w2, [x3, x1]
-.L874:
-	add	w0, w0, 1
-	sxth	w0, w0
-	b	.L873
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
-	.align	2
-	.global	FtlLoadVonderInfo
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
-	adrp	x1, .LANCHOR0
-	add	x1, x1, :lo12:.LANCHOR0
-	stp	x29, x30, [sp, -16]!
-	add	x0, x1, 3768
-	add	x29, sp, 0
-	ldrh	w2, [x1, 124]
-	strh	w2, [x0, 10]
-	mov	w2, -3962
-	strh	w2, [x0, 4]
-	ldrh	w2, [x1, 148]
-	strh	w2, [x0, 8]
-	ldrh	w2, [x1, 126]
-	strh	w2, [x0, 6]
-	ldr	x2, [x1, 152]
-	str	x2, [x0, 16]
-	ldr	x2, [x1, 3600]
-	str	x2, [x0, 24]
-	ldr	x2, [x1, 3592]
-	ldr	x1, [x1, 3608]
-	stp	x2, x1, [x0, 32]
-	bl	FtlMapTblRecovery
-	mov	w0, 0
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
-	.align	2
-	.global	FtlLoadMapInfo
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	FtlL2PDataInit
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 3648
-	bl	FtlMapTblRecovery
-	mov	w0, 0
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+.L840:
+	ldrb	w0, [x23, w21, sxtw]
+	mov	w1, w22
+	adrp	x26, .LC92
+	add	x26, x26, :lo12:.LC92
+	mov	w20, 0
+	bl	V2P_block
+	and	w25, w0, 65535
+.L835:
+	ldrh	w0, [x19, 3324]
+	cmp	w0, w20
+	bhi	.L839
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	b	.L834
+.L839:
+	ldrh	w0, [x24, w20, sxtw 1]
+	add	w27, w20, 1
+	cmp	w0, w25
+	bne	.L836
+	mov	w1, w25
+	mov	x0, x26
+	bl	sftl_printk
+	mov	w0, w25
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	w0, [x19, 3324]
+	mov	w1, w27
+.L837:
+	cmp	w20, w0
+	bcc	.L838
+	sub	w0, w0, #1
+	strh	w0, [x19, 3324]
+.L836:
+	and	w20, w27, 65535
+	b	.L835
+.L838:
+	sub	w2, w1, #1
+	ldrh	w3, [x24, w1, sxtw 1]
+	add	w20, w20, 1
+	add	w1, w1, 1
+	and	w20, w20, 65535
+	strh	w3, [x24, w2, sxtw 1]
+	b	.L837
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
-	.global	flush_l2p_region
-	.type	flush_l2p_region, %function
-flush_l2p_region:
-	stp	x29, x30, [sp, -32]!
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	ubfiz	x20, x0, 4, 16
-	ldr	x0, [x19, 2568]
-	add	x1, x0, x20
-	ldr	x2, [x1, 8]
-	ldrh	w1, [x0, x20]
-	add	x0, x19, 3648
-	bl	FtlMapWritePage
-	ldr	x0, [x19, 2568]
-	add	x0, x0, x20
-	ldr	w1, [x0, 4]
-	and	w1, w1, 2147483647
-	str	w1, [x0, 4]
+	and	w19, w0, 65535
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	str	x21, [sp, 32]
+	ubfiz	x1, x19, 1, 16
+	ldr	x2, [x0, 2376]
+	ldrh	w1, [x2, x1]
+	cbnz	w1, .L846
+	ldrh	w1, [x0, 2672]
+	cmp	w1, w19
+	bne	.L847
+	mov	w1, -1
+	strh	w1, [x0, 2672]
+.L848:
+	add	x21, x20, :lo12:.LANCHOR0
+	mov	w1, w19
+	add	x0, x21, 2368
+	bl	List_remove_node
+	ldrh	w0, [x21, 2400]
+	cbnz	w0, .L850
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2823
+	add	x1, x1, 368
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L850:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x20, 2400]
+	sub	w0, w0, #1
+	strh	w0, [x20, 2400]
+	mov	w0, w19
+	bl	free_data_superblock
+	mov	w0, w19
+	bl	FtlGcFreeBadSuperBlk
+	ldrh	w1, [x20, 2400]
+	ldrh	w0, [x20, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x20, 44]
+	cmp	w0, w1
+	ble	.L854
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2826
+	add	x1, x1, 368
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L854:
+	mov	w0, 1
+	b	.L845
+.L847:
+	ldrh	w1, [x0, 2424]
+	cmp	w1, w19
+	beq	.L853
+	ldrh	w1, [x0, 2472]
+	cmp	w1, w19
+	beq	.L853
+	ldrh	w0, [x0, 2520]
+	cmp	w0, w19
+	bne	.L848
+.L853:
 	mov	w0, 0
+.L845:
 	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 48
 	ret
-	.size	flush_l2p_region, .-flush_l2p_region
+.L846:
+	mov	w0, w19
+	bl	List_update_data_list
+	b	.L853
+	.size	update_vpc_list, .-update_vpc_list
 	.align	2
-	.global	log2phys
-	.type	log2phys, %function
-log2phys:
-	stp	x29, x30, [sp, -80]!
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	stp	x25, x26, [sp, 64]
-	mov	w25, w0
-	add	x0, x20, :lo12:.LANCHOR0
+	and	w20, w0, 65535
 	stp	x21, x22, [sp, 32]
-	stp	x23, x24, [sp, 48]
-	mov	x22, x1
-	mov	w23, w2
-	ldrh	w24, [x0, 112]
-	ldr	w0, [x0, 2584]
-	cmp	w25, w0
-	bcc	.L897
+	mov	w0, 65535
+	adrp	x19, .LANCHOR0
+	cmp	w20, w0
+	beq	.L857
+	add	x22, x19, :lo12:.LANCHOR0
+	ubfiz	x21, x20, 1, 16
+	ldr	x1, [x22, 2376]
+	ldrh	w0, [x1, x21]
+	cbnz	w0, .L858
+	mov	w2, 0
+	mov	w1, w20
+	adrp	x0, .LC93
+	add	x0, x0, :lo12:.LC93
+	bl	sftl_printk
+	ldr	x0, [x22, 2376]
+	ldrh	w0, [x0, x21]
+	cbz	w0, .L859
+.L864:
+	mov	w21, 0
+.L856:
+	mov	w0, w21
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+.L859:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2841
+	add	x1, x1, 384
 	adrp	x0, .LC1
-	mov	w2, 811
-	add	x1, x1, 432
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L897:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2584]
-	cmp	w25, w1
-	bcs	.L898
-	add	w24, w24, 7
-	ldrh	w1, [x0, 142]
-	ldr	x2, [x0, 2568]
-	mov	x0, 0
-	lsr	w21, w25, w24
-	and	w21, w21, 65535
-.L899:
-	and	x19, x0, 65535
-	cmp	w19, w1
-	bcc	.L904
-	bl	select_l2p_ram_region
-	and	x19, x0, 65535
-	add	x2, x20, :lo12:.LANCHOR0
-	ubfiz	x1, x19, 4, 16
-	mov	w26, w0
-	ldr	x2, [x2, 2568]
-	add	x3, x2, x1
-	ldrh	w2, [x2, x1]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L905
-	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L905
-	bl	flush_l2p_region
-.L905:
-	mov	w1, w26
-	mov	w0, w21
-	bl	load_l2p_region
-	b	.L901
-.L898:
-	mov	w0, -1
-	cbnz	w23, .L896
-	str	w0, [x22]
-.L896:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 80
-	ret
-.L904:
-	add	x0, x0, 1
-	add	x3, x2, x0, lsl 4
-	ldrh	w3, [x3, -16]
-	cmp	w3, w21
-	bne	.L899
-.L901:
-	mov	x0, 1
-	lsl	x0, x0, x24
+	b	.L864
+.L858:
 	sub	w0, w0, #1
-	and	w0, w0, w25
-	and	x0, x0, 65535
-	cbnz	w23, .L902
-	add	x1, x20, :lo12:.LANCHOR0
-	ldr	x1, [x1, 2568]
-	add	x1, x1, x19, lsl 4
-	ldr	x1, [x1, 8]
-	ldr	w0, [x1, x0, lsl 2]
-	str	w0, [x22]
-.L903:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x20, 2568]
-	add	x19, x0, x19, lsl 4
-	ldr	w0, [x19, 4]
-	cmn	w0, #1
-	beq	.L907
-	add	w0, w0, 1
-	str	w0, [x19, 4]
-.L907:
-	mov	w0, 0
-	b	.L896
-.L902:
-	add	x2, x20, :lo12:.LANCHOR0
-	lsl	x1, x19, 4
-	ldr	w4, [x22]
-	ldr	x3, [x2, 2568]
-	add	x3, x3, x1
-	ldr	x3, [x3, 8]
-	str	w4, [x3, x0, lsl 2]
-	strh	w21, [x2, 2576]
-	ldr	x0, [x2, 2568]
-	add	x0, x0, x1
-	ldr	w1, [x0, 4]
-	orr	w1, w1, -2147483648
-	str	w1, [x0, 4]
-	b	.L903
-	.size	log2phys, .-log2phys
-	.align	2
-	.global	FtlReUsePrevPpa
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
-	stp	x29, x30, [sp, -80]!
-	add	x29, sp, 0
-	stp	x21, x22, [sp, 32]
-	mov	w21, w0
-	stp	x19, x20, [sp, 16]
-	lsr	w0, w1, 10
-	str	w1, [x29, 76]
-	adrp	x22, .LANCHOR0
-	str	x23, [sp, 48]
-	bl	P2V_block_in_plane
-	add	x2, x22, :lo12:.LANCHOR0
-	and	w0, w0, 65535
-	ubfiz	x20, x0, 1, 16
-	ldr	x3, [x2, 2376]
-	ldrh	w1, [x3, x20]
-	cbnz	w1, .L911
-	ldr	x19, [x2, 2408]
-	cbz	x19, .L912
-	ldrh	w3, [x2, 2416]
-	mov	x4, -6148914691236517206
-	ldr	x2, [x2, 2360]
-	movk	x4, 0xaaab, lsl 0
-	mov	w5, 65535
-	sub	x19, x19, x2
-	asr	x19, x19, 1
-	mul	x19, x19, x4
-	mov	w4, 6
-	and	w19, w19, 65535
-.L913:
-	cmp	w1, w3
-	beq	.L912
-	cmp	w19, w0
-	bne	.L914
-	add	x23, x22, :lo12:.LANCHOR0
-	mov	w1, w19
-	add	x0, x23, 2408
-	bl	List_remove_node
-	ldrh	w0, [x23, 2416]
-	cbnz	w0, .L915
+	strh	w0, [x1, x21]
+.L857:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 65535
+	ldrh	w0, [x19, 3714]
+	cmp	w0, w1
+	bne	.L861
+	strh	w20, [x19, 3714]
+	b	.L864
+.L861:
+	cmp	w20, w0
+	beq	.L864
+	bl	update_vpc_list
+	cmp	w0, 0
+	ldr	x1, [x19, 2360]
+	cset	w21, ne
+	ldr	x0, [x19, 2368]
+	strh	w20, [x19, 3714]
+	sub	x0, x0, x1
+	mov	x1, -6148914691236517206
+	asr	x0, x0, 1
+	movk	x1, 0xaaab, lsl 0
+	mul	x0, x0, x1
+	ldr	x1, [x19, 2376]
+	and	x2, x0, 65535
+	ldrh	w1, [x1, x2, lsl 1]
+	cbnz	w1, .L856
+	cmp	w20, w0, uxth
+	beq	.L856
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2857
+	add	x1, x1, 384
 	adrp	x0, .LC1
-	mov	w2, 1699
-	add	x1, x1, 448
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L915:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x22, 2416]
-	sub	w0, w0, #1
-	strh	w0, [x22, 2416]
-	mov	w0, w19
-	bl	INSERT_DATA_LIST
-	ldr	x1, [x22, 2376]
-	ldrh	w0, [x1, x20]
-	add	w0, w0, 1
-	strh	w0, [x1, x20]
-.L912:
-	add	x1, x29, 76
-	mov	w2, 1
-	mov	w0, w21
-	bl	log2phys
+	b	.L856
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	stp	x29, x30, [sp, -96]!
+	mov	w2, 61589
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	mov	w0, -1
+	stp	x21, x22, [sp, 32]
+	str	w0, [x29, 88]
+	adrp	x21, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
+	str	x23, [sp, 48]
+	mov	x20, x0
+	ldr	x23, [x0, 3528]
+	ldr	x1, [x0, 3464]
+	stp	x1, x23, [x29, 72]
+	mov	w1, -3
+	str	w1, [x23, 8]
+	mov	w1, -2
+	str	w1, [x23, 12]
+	ldrh	w1, [x19]
+	strh	w1, [x23, 2]
+	strh	wzr, [x23]
+	ldr	x1, [x0, 3464]
+	str	w2, [x1]
+	mov	w2, 22136
+	movk	w2, 0x1234, lsl 16
+	ldr	x1, [x0, 3464]
+	str	w2, [x1, 4]
+	ldrh	w22, [x19, 4]
+	and	w22, w22, 1
+	add	w22, w22, 6
+.L871:
+	ldrh	w0, [x19, 4]
+	cbnz	w0, .L867
+.L868:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x19]
+	ldrh	w3, [x19, 4]
+	ldr	x2, [x21, 2376]
+	lsl	x0, x0, 1
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 6]
+	ldrh	w0, [x21, 106]
+	strh	w0, [x19, 2]
+	strh	wzr, [x19, 4]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 96
 	ret
-.L914:
-	umull	x19, w19, w4
-	ldrh	w19, [x2, x19]
-	cmp	w19, w5
-	beq	.L912
-	add	w1, w1, 1
-	and	w1, w1, 65535
-	b	.L913
-.L911:
-	add	w1, w1, 1
-	strh	w1, [x3, x20]
-	b	.L912
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+.L867:
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x29, 68]
+	cmn	w0, #1
+	beq	.L868
+	ldr	w0, [x20, 2624]
+	mov	w3, 0
+	str	w0, [x23, 4]
+	mov	w2, 0
+	add	w0, w0, 1
+	mov	w1, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x20, 2624]
+	add	x0, x29, 64
+	bl	FlashProgPages
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	subs	w22, w22, #1
+	bne	.L871
+	b	.L868
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
-	.global	ftl_check_vpc
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
-	stp	x29, x30, [sp, -128]!
-	adrp	x0, .LC95
-	add	x0, x0, :lo12:.LC95
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	stp	x23, x24, [sp, 48]
-	add	x24, x20, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	mov	w23, 0
-	adrp	x21, .LANCHOR1
-	add	x1, x21, :lo12:.LANCHOR1
-	add	x1, x1, 464
+	adrp	x19, .LANCHOR0
 	stp	x25, x26, [sp, 64]
+	stp	x21, x22, [sp, 32]
+	mov	x21, x19
+	stp	x23, x24, [sp, 48]
+	mov	w24, 0
 	stp	x27, x28, [sp, 80]
-	adrp	x22, check_vpc_table
-	bl	sftl_printk
-	add	x19, x22, :lo12:check_vpc_table
-	mov	w2, 8192
-	mov	w1, 0
-	mov	x0, x19
-	bl	ftl_memset
-.L922:
-	ldr	w0, [x24, 2584]
-	cmp	w23, w0
-	bcc	.L924
-	adrp	x25, .LC96
-	add	x23, x20, :lo12:.LANCHOR0
-	add	x26, x22, :lo12:check_vpc_table
-	add	x25, x25, :lo12:.LC96
-	mov	w24, 0
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+	mov	w28, -3872
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x26, x0, 192
+	add	x25, x0, 172
+	mov	x19, x0
+	add	x20, x0, 3728
+.L880:
+	ldrh	w0, [x19, 58]
+	cmp	w24, w0
+	bcc	.L886
+	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-	mov	w4, 65535
-.L925:
-	ldrh	w0, [x23, 44]
+.L887:
+	ldrh	w0, [x20, 118]
 	cmp	w0, w19
-	bhi	.L927
-	ldr	x19, [x23, 2408]
-	cbz	x19, .L928
-	ldr	x0, [x23, 2360]
-	adrp	x25, .LC97
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:check_vpc_table
-	sub	x19, x19, x0
-	mov	x0, -6148914691236517206
-	asr	x19, x19, 1
-	movk	x0, 0xaaab, lsl 0
-	add	x25, x25, :lo12:.LC97
-	ldrh	w26, [x23, 2416]
-	mov	w27, 6
-	mov	w23, 0
-	mul	x19, x19, x0
+	bhi	.L888
+	add	x20, x20, 160
+	ldrh	w19, [x20, 12]
+	mov	w22, 65535
+	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L929:
-	cmp	w23, w26
-	bne	.L931
-.L928:
-	cbz	w24, .L921
-	add	x1, x21, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2343
-	add	x1, x1, 464
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L921:
+.L889:
+	ldrh	w0, [x20, 12]
+	sub	w0, w0, #48
+	cmp	w19, w0
+	ble	.L893
+	mov	w0, w19
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L890
+	mov	w0, w19
+	bl	FlashTestBlk
+	cbz	w0, .L891
+	mov	w0, w19
+	bl	FtlBbmMapBadBlock
+.L890:
+	sub	w19, w19, #1
+	and	w19, w19, 65535
+	b	.L889
+.L886:
+	ldr	x0, [x19, 3464]
+	mov	w2, 65535
+	ldr	x27, [x19, 3528]
+	ldrh	w1, [x25]
+	stp	x0, x27, [x20, 8]
+	cmp	w1, w2
+	beq	.L881
+	ldrh	w23, [x19, 102]
+	mov	w2, 1
+	madd	w23, w23, w24, w1
+	mov	w1, w2
+	lsl	w0, w23, 10
+	str	w0, [x20, 4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	x1, [x20, 8]
+	ldr	x0, [x26]
+	ldrh	w2, [x19, 102]
+	add	w2, w2, 7
+	lsr	w2, w2, 3
+	bl	ftl_memcpy
+.L882:
+	mov	w0, w23
+	add	w24, w24, 1
+	bl	FtlBbmMapBadBlock
+	add	x26, x26, 8
+	add	x25, x25, 2
+	b	.L880
+.L881:
+	mov	w1, w24
+	bl	FlashGetBadBlockList
+	ldr	x0, [x20, 8]
+	ldr	x1, [x26]
+	bl	FtlBbt2Bitmap
+	ldrh	w22, [x19, 102]
+.L884:
+	sub	w22, w22, #1
+	and	w22, w22, 65535
+.L883:
+	ldrh	w0, [x19, 102]
+	madd	w0, w24, w0, w22
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L884
+	ldr	x0, [x19, 3528]
+	mov	w2, 16
+	strh	w22, [x25]
+	mov	w1, 0
+	bl	ftl_memset
+	ldr	x0, [x19, 3464]
+	mov	w2, 4096
+	mov	w1, 0
+	bl	ftl_memset
+	strh	w28, [x27]
+	str	wzr, [x27, 4]
+	ldrh	w23, [x19, 102]
+	ldrh	w0, [x25]
+	strh	w0, [x27, 2]
+	ldrh	w2, [x19, 3640]
+	ldrh	w0, [x25]
+	ldr	x1, [x26]
+	lsl	w2, w2, 2
+	madd	w23, w23, w24, w0
+	lsl	w0, w23, 10
+	str	w0, [x20, 4]
+	ldr	x0, [x20, 8]
+	bl	ftl_memcpy
+	mov	w2, 1
+	mov	x0, x20
+	mov	w1, w2
+	bl	FlashEraseBlocks
+	mov	w3, 1
+	mov	x0, x20
+	mov	w2, w3
+	mov	w1, w3
+	bl	FlashProgPages
+	ldr	w0, [x20]
+	cmn	w0, #1
+	bne	.L882
+	mov	w0, w23
+	bl	FtlBbmMapBadBlock
+	b	.L883
+.L888:
+	mov	w0, w19
+	add	w19, w19, 1
+	bl	FtlBbmMapBadBlock
+	and	w19, w19, 65535
+	b	.L887
+.L891:
+	ldrh	w0, [x20]
+	cmp	w0, w22
+	bne	.L892
+	strh	w19, [x20]
+	b	.L890
+.L892:
+	strh	w19, [x20, 4]
+.L893:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w2, 2
+	ldr	x1, [x21, 3416]
+	ldrh	w0, [x21, 160]
+	str	wzr, [x21, 168]
+	strh	wzr, [x21, 162]
+	lsl	w0, w0, 10
+	str	w0, [x1, 4]
+	ldr	x0, [x21, 3416]
+	ldrh	w1, [x21, 164]
+	lsl	w1, w1, 10
+	str	w1, [x0, 36]
+	mov	w1, 1
+	bl	FlashEraseBlocks
+	ldrh	w0, [x21, 160]
+	bl	FtlBbmMapBadBlock
+	ldrh	w0, [x21, 164]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	strh	wzr, [x21, 162]
+	ldr	w0, [x21, 168]
+	ldrh	w1, [x21, 164]
+	add	w0, w0, 1
+	str	w0, [x21, 168]
+	ldrh	w0, [x21, 160]
+	strh	w0, [x21, 164]
+	strh	w1, [x21, 160]
+	bl	FtlBbmTblFlush
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 96
 	ret
-.L924:
-	mov	w2, 0
-	add	x1, x29, 124
-	mov	w0, w23
-	bl	log2phys
-	ldr	w0, [x29, 124]
-	cmn	w0, #1
-	beq	.L923
-	lsr	w0, w0, 10
-	bl	P2V_block_in_plane
-	and	x0, x0, 65535
-	ldrh	w1, [x19, x0, lsl 1]
-	add	w1, w1, 1
-	strh	w1, [x19, x0, lsl 1]
-.L923:
-	add	w23, w23, 1
-	b	.L922
-.L927:
-	ldr	x0, [x23, 2376]
-	ubfiz	x28, x19, 1, 16
-	sxtw	x27, w19
-	ldrh	w2, [x0, x28]
-	ldrh	w3, [x26, x27, lsl 1]
-	cmp	w2, w3
-	beq	.L926
-	mov	x0, x25
-	str	w4, [x29, 108]
-	mov	w1, w19
-	bl	sftl_printk
-	ldr	x0, [x23, 2376]
-	ldr	w4, [x29, 108]
-	ldrh	w0, [x0, x28]
-	cmp	w0, w4
-	beq	.L926
-	ldrh	w1, [x26, x27, lsl 1]
-	cmp	w1, w0
-	csinc	w24, w24, wzr, ls
-.L926:
-	add	w19, w19, 1
-	and	w19, w19, 65535
-	b	.L925
-.L931:
-	ldr	x1, [x20, 2376]
-	ubfiz	x0, x19, 1, 16
-	ldrh	w2, [x1, x0]
-	cbz	w2, .L930
-	ldrh	w3, [x22, w19, sxtw 1]
-	mov	w24, 1
-	mov	w1, w19
-	mov	x0, x25
-	bl	sftl_printk
-.L930:
-	ldr	x0, [x20, 2360]
-	umull	x19, w19, w27
-	ldrh	w19, [x0, x19]
-	mov	w0, 65535
-	cmp	w19, w0
-	beq	.L928
-	add	w23, w23, 1
-	and	w23, w23, 65535
-	b	.L929
-	.size	ftl_check_vpc, .-ftl_check_vpc
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	2
-	.global	ftl_scan_all_data
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	sub	sp, sp, #96
-	adrp	x0, .LC98
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC98
-	stp	x29, x30, [sp, 16]
-	add	x29, sp, 16
-	stp	x21, x22, [sp, 48]
-	adrp	x22, .LANCHOR0
-	add	x21, x22, :lo12:.LANCHOR0
-	stp	x19, x20, [sp, 32]
-	str	x23, [sp, 64]
-	mov	w20, 0
-	add	x19, x21, 3728
-	bl	sftl_printk
-.L947:
-	add	x0, x22, :lo12:.LANCHOR0
-	ldr	w0, [x0, 2584]
-	cmp	w20, w0
-	bcc	.L953
-	ldp	x19, x20, [sp, 32]
-	ldp	x21, x22, [sp, 48]
-	ldp	x29, x30, [sp, 16]
-	ldr	x23, [sp, 64]
-	add	sp, sp, 96
+	.global	ftl_memcmp
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcmp
+	ldp	x29, x30, [sp], 16
 	ret
-.L953:
-	mov	w2, 0
-	add	x1, x29, 76
-	mov	w0, w20
-	bl	log2phys
-	tst	x20, 2047
-	bne	.L948
-	ldr	w2, [x29, 76]
-	adrp	x0, .LC99
-	mov	w1, w20
-	add	x0, x0, :lo12:.LC99
-	bl	sftl_printk
-.L948:
-	ldr	w0, [x29, 76]
-	cmn	w0, #1
-	beq	.L950
-	ldr	x23, [x21, 3528]
-	mov	w2, 0
-	stp	wzr, w0, [x19]
-	mov	w1, 1
-	ldr	x0, [x21, 3464]
-	str	x0, [x19, 8]
-	mov	x0, x19
-	str	x23, [x19, 16]
-	str	w20, [x19, 24]
-	bl	FlashReadPages
-	ldr	w0, [x19]
-	cmp	w0, 256
-	ccmn	w0, #1, 4, ne
-	beq	.L951
-	ldr	w0, [x23, 8]
-	cmp	w20, w0
-	beq	.L950
-.L951:
-	ldp	x1, x0, [x19, 8]
-	ldr	w2, [x1, 4]
-	str	w2, [sp]
-	ldp	w3, w4, [x0]
-	ldp	w5, w6, [x0, 8]
-	adrp	x0, .LC100
-	ldr	w7, [x1]
-	add	x0, x0, :lo12:.LC100
-	ldr	w2, [x19, 4]
-	mov	w1, w20
-	bl	sftl_printk
-.L950:
-	add	w20, w20, 1
-	b	.L947
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.size	ftl_memcmp, .-ftl_memcmp
 	.align	2
-	.global	FtlGcScanTempBlk
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
-	stp	x29, x30, [sp, -160]!
+	.global	js_hash
+	.type	js_hash, %function
+js_hash:
+	mov	x4, x0
+	mov	w0, 42982
+	mov	x3, 0
+	movk	w0, 0x47c6, lsl 16
+.L902:
+	cmp	w1, w3
+	bhi	.L903
+	ret
+.L903:
+	lsr	w2, w0, 2
+	ldrb	w5, [x4, x3]
+	add	w2, w2, w0, lsl 5
+	add	x3, x3, 1
+	add	w2, w2, w5
+	eor	w0, w0, w2
+	b	.L902
+	.size	js_hash, .-js_hash
+	.align	2
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 65535
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
+	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR2
-	add	x0, x23, :lo12:.LANCHOR2
-	stp	x25, x26, [sp, 64]
+	ldr	x20, [x0, 16]
+	ldrh	w0, [x0]
+	cmp	w0, w1
+	bne	.L905
+	ldrh	w0, [x19, 8]
+	cbz	w0, .L906
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 641
+	add	x1, x1, 408
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L906:
+	ldrh	w0, [x19, 8]
+	add	w0, w0, 1
+	strh	w0, [x19, 8]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x20]
+	strh	wzr, [x19, 2]
+	ldr	w0, [x19, 48]
+	strh	wzr, [x19]
+	add	w0, w0, 1
+	str	w0, [x19, 48]
+.L907:
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 64
+	ret
+.L905:
+	ubfiz	x0, x0, 1, 16
+	adrp	x21, .LANCHOR0
+	ldrh	w1, [x19, 2]
+	ldr	x24, [x19, 40]
+	ldrh	w23, [x20, x0]
+	add	x20, x21, :lo12:.LANCHOR0
+	ldr	w0, [x19, 48]
+	ldr	x22, [x20, 3528]
+	orr	w1, w1, w23, lsl 10
+	str	w1, [x20, 3732]
+	ldr	x1, [x20, 3464]
+	str	x1, [x20, 3736]
+	str	x22, [x20, 3744]
+	mov	w1, 255
+	str	w0, [x22, 4]
+	mov	w0, -1291
+	strh	w0, [x22, 8]
+	ldrh	w0, [x19, 4]
+	strh	w0, [x22]
+	strh	w23, [x22, 2]
+	ldrh	w2, [x20, 108]
+	ldr	x0, [x20, 3464]
+	lsl	w2, w2, 3
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w0, 0
+.L908:
+	ldrh	w2, [x19, 6]
+	cmp	w2, w0
+	bhi	.L910
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x6, x21, 3728
+	ldrh	w1, [x21, 114]
+	ldr	x0, [x21, 3736]
+	bl	js_hash
+	str	w0, [x22, 12]
+	mov	w2, 1
+	mov	w3, 0
+	mov	w1, w2
+	mov	x0, x6
+	bl	FlashProgPages
+	ldrh	w0, [x19, 2]
+	add	w0, w0, 1
+	strh	w0, [x19, 2]
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	b	.L907
+.L910:
+	ubfiz	x2, x0, 2, 16
+	ldr	w3, [x24, x2]
+	cmp	w23, w3, lsr 10
+	bne	.L909
+	add	w1, w1, 1
+	ldr	x4, [x20, 3464]
+	and	w1, w1, 65535
+	ubfiz	x3, x1, 3, 16
+	str	w0, [x4, x3]
+	ldr	w4, [x24, x2]
+	ldr	x2, [x20, 3464]
+	add	x2, x2, x3
+	str	w4, [x2, 4]
+.L909:
+	add	w0, w0, 1
+	and	w0, w0, 65535
+	b	.L908
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	mov	w25, w1
-	stp	x27, x28, [sp, 80]
-	ldrh	w21, [x0, 4]
-	mov	w0, 65535
-	cmp	w21, w0
-	beq	.L979
-	cbnz	w21, .L956
-.L957:
-	bl	FtlGcPageVarInit
-	b	.L958
-.L979:
 	mov	w21, 0
-.L956:
-	adrp	x0, .LANCHOR0+106
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+106]
-	cmp	w0, w25
-	beq	.L957
-.L958:
-	adrp	x26, .LANCHOR0
-	add	x20, x26, :lo12:.LANCHOR0
-	mov	w24, 0
-.L959:
+	stp	x23, x24, [sp, 48]
+	adrp	x24, .LANCHOR0
+	add	x22, x24, :lo12:.LANCHOR0
+	stp	x19, x20, [sp, 16]
+	stp	x25, x26, [sp, 64]
+	adrp	x23, .LANCHOR1
+	stp	x27, x28, [sp, 80]
+	mov	x19, x0
+	mov	w26, w1
+	mov	x27, x2
+	mov	x25, x24
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x20, x22, 3728
+.L916:
+	add	x0, x24, :lo12:.LANCHOR0
+	ldr	w1, [x0, 2604]
+	add	w1, w1, 1
+	str	w1, [x0, 2604]
+	ldrh	w0, [x0, 108]
+	ldrh	w1, [x19, 2]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	bge	.L917
 	ldrh	w1, [x19]
 	mov	w0, 65535
-	strb	wzr, [x19, 8]
 	cmp	w1, w0
-	beq	.L960
-.L976:
-	add	x0, x26, :lo12:.LANCHOR0
-	add	x2, x19, 16
-	mov	w22, 0
-	mov	w9, 65535
-	mov	w5, 4
-	ldrh	w7, [x0, 114]
-	ldrh	w8, [x0, 116]
-	ldrh	w0, [x0, 36]
-	add	x0, x0, 8
-	add	x0, x19, x0, lsl 1
-.L961:
-	cmp	x0, x2
-	bne	.L963
-	ldr	x0, [x20, 3440]
-	mov	w1, w22
-	mov	w2, 0
-	ubfiz	x22, x22, 5, 16
-	mov	x27, 0
-	bl	FlashReadPages
-.L964:
-	cmp	x22, x27
-	bne	.L974
-	add	w21, w21, 1
-	add	w24, w24, 1
-	and	w21, w21, 65535
-	cmp	w25, w24
-	bls	.L975
-.L977:
-	ldrh	w0, [x20, 106]
-	cmp	w0, w21
-	bhi	.L976
-.L960:
-	add	x23, x23, :lo12:.LANCHOR2
-	strh	w21, [x19, 2]
-	strb	wzr, [x19, 6]
-	mov	w0, -1
-	mov	w2, 0
-	mov	w1, w21
-	strh	w0, [x23, 4]
+	bne	.L918
+.L917:
 	mov	x0, x19
-	bl	ftl_sb_update_avl_pages
-	b	.L978
-.L963:
-	ldrh	w1, [x2]
-	cmp	w1, w9
-	beq	.L962
-	ldr	x4, [x20, 3440]
-	ubfiz	x6, x22, 5, 16
-	orr	w1, w21, w1, lsl 10
-	add	x4, x4, x6
-	str	w1, [x4, 4]
-	mul	w1, w22, w7
-	ldr	x3, [x20, 3440]
-	ldr	x4, [x20, 3264]
-	sdiv	w1, w1, w5
-	add	x3, x3, x6
-	add	x1, x4, x1, sxtw 2
-	str	x1, [x3, 8]
-	mul	w1, w22, w8
-	ldr	x4, [x20, 3272]
-	add	w22, w22, 1
-	and	w22, w22, 65535
-	sdiv	w1, w1, w5
-	add	x1, x4, x1, sxtw 2
-	str	x1, [x3, 16]
-.L962:
-	add	x2, x2, 2
-	b	.L961
-.L974:
-	ldr	x1, [x20, 3440]
-	add	x0, x1, x27
-	ldr	w1, [x1, x27]
-	ldr	w2, [x0, 4]
-	str	w2, [x29, 108]
-	cbnz	w1, .L965
-	ldr	x28, [x0, 16]
-	mov	w1, 65535
-	ldrh	w0, [x28]
-	cmp	w0, w1
-	bne	.L966
-.L965:
+	bl	Ftl_write_map_blk_to_last_page
+.L918:
 	ldrh	w1, [x19]
-	mov	w21, 0
-	ldr	x0, [x20, 2376]
-	strh	wzr, [x0, x1, lsl 1]
-	ldrh	w0, [x19]
-	bl	INSERT_FREE_LIST
-	mov	w0, -1
-	strh	w0, [x19]
-	bl	FtlGcPageVarInit
-	b	.L959
-.L966:
-	ldr	w1, [x20, 2584]
-	ldr	w0, [x28, 8]
-	cmp	w0, w1
-	bhi	.L965
-	add	x1, x29, 124
-	mov	w2, 0
-	bl	log2phys
-	ldr	w0, [x28, 12]
-	ldr	w1, [x29, 124]
-	cmp	w0, w1
-	beq	.L969
-.L970:
-	ldp	w2, w0, [x28, 8]
-	add	x27, x27, 32
-	ldr	w1, [x29, 108]
-	bl	FtlGcUpdatePage
-	b	.L964
-.L969:
-	cmn	w0, #1
-	beq	.L970
-	str	w0, [x29, 132]
-	mov	w2, 0
-	ldr	x0, [x20, 3496]
-	mov	w1, 1
-	str	x0, [x29, 136]
-	ldr	x0, [x20, 3536]
-	str	x0, [x29, 144]
-	add	x0, x29, 128
-	bl	FlashReadPages
-	ldrh	w1, [x20, 62]
-	mov	x0, 0
-	ldr	x2, [x20, 3440]
-	ldr	x5, [x29, 136]
-	ubfiz	x1, x1, 9, 16
-	add	x2, x2, x27
-.L971:
-	cmp	x0, x1
-	beq	.L970
-	ldr	x6, [x2, 8]
-	ldr	w7, [x6, x0]
-	add	x0, x0, 4
-	add	x6, x5, x0
-	ldr	w6, [x6, -4]
-	cmp	w7, w6
-	beq	.L971
+	ldr	x0, [x19, 16]
+	ldrh	w0, [x0, x1, lsl 1]
+	cbnz	w0, .L919
+	adrp	x0, .LC1
+	mov	w2, 700
+	add	x1, x23, 440
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L919:
 	ldrh	w1, [x19]
-	adrp	x0, .LC101
-	ldr	w2, [x29, 132]
-	add	x0, x0, :lo12:.LC101
+	ldrh	w0, [x19, 10]
+	cmp	w1, w0
+	bcc	.L920
+	adrp	x0, .LC1
+	mov	w2, 701
+	add	x1, x23, 440
+	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-	b	.L965
-.L975:
-	add	x1, x23, :lo12:.LANCHOR2
-	mov	w2, 65535
-	ldrh	w0, [x1, 4]
-	cmp	w0, w2
-	beq	.L977
-	add	w0, w0, w24
-	strh	w0, [x1, 4]
-	ldrh	w0, [x20, 106]
-	cmp	w0, w21
-	bls	.L977
-.L978:
+.L920:
+	ldrh	w1, [x19]
+	mov	w2, 16
+	ldr	x0, [x19, 16]
+	ldrh	w28, [x0, x1, lsl 1]
+	mov	w1, 0
+	ldrh	w0, [x19, 2]
+	str	x27, [x20, 8]
+	orr	w0, w0, w28, lsl 10
+	str	w0, [x20, 4]
+	ldr	x0, [x22, 3528]
+	str	x0, [x20, 16]
+	bl	ftl_memset
+	ldr	x6, [x20, 16]
+	ldr	w0, [x19, 48]
+	str	w0, [x6, 4]
+	strh	w26, [x6, 8]
+	ldrh	w0, [x19, 4]
+	strh	w0, [x6]
+	strh	w28, [x6, 2]
+	ldrh	w1, [x22, 114]
+	ldr	x0, [x20, 8]
+	bl	js_hash
+	str	w0, [x6, 12]
+	mov	w3, 1
+	mov	x0, x20
+	mov	w1, w3
+	mov	w2, w3
+	bl	FlashProgPages
+	ldrh	w0, [x19, 2]
+	add	w0, w0, 1
+	and	w0, w0, 65535
+	strh	w0, [x19, 2]
+	ldr	w1, [x20]
+	cmn	w1, #1
+	bne	.L921
+	ldr	w1, [x20, 4]
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	bl	sftl_printk
+	ldrh	w0, [x19, 2]
+	cmp	w0, 2
+	bhi	.L922
+	ldrh	w0, [x22, 108]
+	sub	w0, w0, #1
+	strh	w0, [x19, 2]
+.L922:
+	cmp	w21, 3
+	bls	.L923
+	add	x25, x25, :lo12:.LANCHOR0
+	adrp	x0, .LC95
+	mov	w2, w21
+	add	x0, x0, :lo12:.LC95
+	ldr	w1, [x25, 3732]
+	bl	sftl_printk
+.L924:
+	b	.L924
+.L923:
+	ldr	w0, [x19, 52]
+	cbz	w0, .L916
+.L938:
+	b	.L938
+.L921:
+	cmp	w0, 1
+	beq	.L927
+	cmp	w1, 256
+	beq	.L927
+	ldr	w0, [x19, 56]
+	cbz	w0, .L928
+.L927:
+	str	wzr, [x19, 56]
+	b	.L916
+.L928:
+	ldr	x0, [x19, 40]
+	ldr	w1, [x20, 4]
+	str	w1, [x0, w26, uxtw 2]
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
-	mov	w0, -1
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 160
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
-	.global	FtlReadRefresh
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
-	adrp	x1, .LANCHOR0
-	add	x0, x1, :lo12:.LANCHOR0
-	add	x2, x0, 2720
-	ldr	w3, [x2, 80]
-	cbz	w3, .L990
-	ldr	w1, [x0, 2584]
-	ldr	w3, [x2, 84]
-	cmp	w3, w1
-	bcs	.L991
-	stp	x29, x30, [sp, -160]!
+	.global	load_l2p_region
+	.type	load_l2p_region, %function
+load_l2p_region:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	and	w22, w0, 65535
+	adrp	x21, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	mov	w20, 2048
-	str	x21, [sp, 32]
-.L996:
-	ldr	w1, [x19, 2584]
-	ldr	w0, [x19, 2804]
-	cmp	w0, w1
-	bcs	.L993
-	add	x1, x29, 60
-	mov	w2, 0
-	bl	log2phys
-	ldr	w0, [x19, 2804]
-	ldr	w1, [x29, 60]
-	add	w0, w0, 1
-	str	w0, [x19, 2804]
-	cmn	w1, #1
-	beq	.L994
-	str	w0, [x29, 88]
-	mov	w2, 0
-	ldr	x0, [x19, 3512]
-	str	x0, [x29, 72]
-	add	x0, x29, 96
-	str	x0, [x29, 80]
-	add	x0, x29, 160
-	str	w1, [x29, 68]
-	mov	w1, 1
-	str	wzr, [x0, -96]!
-	bl	FlashReadPages
-	ldr	w0, [x29, 64]
-	cmp	w0, 256
-	bne	.L993
-	ldr	w0, [x29, 60]
-	lsr	w0, w0, 10
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L993:
-	ldp	x19, x20, [sp, 16]
-	mov	w0, -1
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 160
-	ret
-.L994:
-	subs	w20, w20, #1
-	bne	.L996
-	b	.L993
-.L991:
-	ldr	w0, [x0, 2588]
-	stp	w0, wzr, [x2, 76]
-	str	wzr, [x2, 84]
-.L1000:
+	and	x19, x1, 65535
+	stp	x23, x24, [sp, 48]
+	str	x25, [sp, 64]
+	ldrh	w0, [x0, 140]
+	cmp	w0, w22
+	bcs	.L941
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 485
+	add	x1, x1, 456
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L941:
+	add	x20, x21, :lo12:.LANCHOR0
+	ubfiz	x0, x22, 2, 16
+	ldr	x1, [x20, 3616]
+	ldr	w24, [x1, x0]
+	cbnz	w24, .L942
+	ldr	x0, [x20, 2568]
+	lsl	x19, x19, 4
+	ldrh	w2, [x20, 114]
+	mov	w1, 255
+	add	x0, x0, x19
+	ldr	x0, [x0, 8]
+	bl	ftl_memset
+	ldr	x0, [x20, 2568]
+	strh	w22, [x0, x19]
+	ldr	x0, [x20, 2568]
+	add	x19, x0, x19
+	str	wzr, [x19, 4]
+.L943:
 	mov	w0, 0
+	ldr	x25, [sp, 64]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 80
 	ret
-.L990:
-	ldr	w3, [x0, 2588]
-	ldr	w5, [x2, 76]
-	add	w2, w3, 1048576
-	cmp	w5, w2
-	bhi	.L999
-	ldr	w2, [x0, 2644]
-	lsr	w4, w2, 10
-	mov	w2, 33554432
-	asr	w2, w2, w4
-	add	w2, w2, w5
-	cmp	w3, w2
-	bhi	.L999
-	ldrb	w0, [x0, 2340]
-	cbnz	w0, .L1000
-.L999:
-	add	x0, x1, :lo12:.LANCHOR0
-	mov	w1, 1
-	str	w3, [x0, 2796]
-	str	w1, [x0, 2800]
-	str	wzr, [x0, 2804]
-	b	.L1000
-	.size	FtlReadRefresh, .-FtlReadRefresh
-	.align	2
-	.global	FtlMapBlkWriteDump_data
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
-	ldr	w1, [x0, 56]
-	cbz	w1, .L1014
-	stp	x29, x30, [sp, -48]!
-	adrp	x1, .LANCHOR0
-	add	x2, x1, :lo12:.LANCHOR0
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	str	x21, [sp, 32]
-	add	x0, x2, 3728
-	mov	x21, x1
-	ldrh	w20, [x19, 6]
-	ldr	x4, [x2, 3528]
-	sub	w20, w20, #1
-	ldr	x3, [x2, 3472]
-	and	w20, w20, 65535
-	ldr	x5, [x19, 40]
-	stp	x3, x4, [x0, 8]
-	ubfiz	x4, x20, 2, 16
-	str	wzr, [x19, 56]
-	ldr	w4, [x5, x4]
-	str	w4, [x0, 4]
-	cbz	w4, .L1008
+.L942:
+	ldr	x0, [x20, 2568]
+	lsl	x19, x19, 4
+	add	x23, x20, 3728
 	mov	w2, 1
+	add	x0, x0, x19
 	mov	w1, w2
+	str	w24, [x20, 3732]
+	ldr	x0, [x0, 8]
+	str	x0, [x20, 3736]
+	ldr	x0, [x20, 3528]
+	str	x0, [x20, 3744]
+	mov	x0, x23
 	bl	FlashReadPages
-.L1009:
-	add	x1, x21, :lo12:.LANCHOR0
-	mov	x0, x19
-	ldr	x2, [x1, 3736]
-	mov	w1, w20
+	ldr	x25, [x20, 3744]
+	ldrh	w0, [x25, 8]
+	cmp	w0, w22
+	beq	.L944
+	mov	w2, w24
+	mov	w1, w22
+	adrp	x0, .LC96
+	add	x0, x0, :lo12:.LC96
+	bl	sftl_printk
+	ldr	x1, [x20, 3744]
+	mov	w3, 4
+	adrp	x0, .LC97
+	mov	w2, w3
+	add	x0, x0, :lo12:.LC97
+	bl	rknand_print_hex
+	ldrh	w3, [x20, 140]
+	adrp	x0, .LC98
+	ldr	x1, [x20, 3616]
+	mov	w2, 4
+	add	x0, x0, :lo12:.LC98
+	bl	rknand_print_hex
+.L945:
+	ldrh	w0, [x25, 8]
+	cmp	w0, w22
+	beq	.L946
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 508
+	add	x1, x1, 456
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L946:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x0, [x21, 2568]
+	add	x0, x0, x19
+	str	wzr, [x0, 4]
+	ldr	x0, [x21, 2568]
+	strh	w22, [x0, x19]
+	b	.L943
+.L944:
+	ldr	w0, [x20, 3728]
+	cmp	w0, 256
+	bne	.L945
+	mov	w2, w24
+	mov	w1, w22
+	adrp	x0, .LC99
+	add	x0, x0, :lo12:.LC99
+	bl	sftl_printk
+	ldr	x0, [x20, 2568]
+	mov	w1, w22
+	add	x0, x0, x19
+	ldr	x2, [x0, 8]
+	add	x0, x20, 3648
 	bl	FtlMapWritePage
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L1008:
-	ldrh	w2, [x2, 114]
-	mov	w1, 255
-	mov	x0, x3
-	bl	ftl_memset
-	b	.L1009
-.L1014:
-	ret
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	b	.L945
+	.size	load_l2p_region, .-load_l2p_region
 	.align	2
-	.global	FlashTestBlk
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	stp	x29, x30, [sp, -128]!
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	and	w19, w0, 65535
-	cmp	w19, 11
-	bls	.L1019
-	adrp	x20, .LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w2, 32
-	mov	w1, 165
-	lsl	w19, w19, 10
-	ldr	x0, [x20, 3512]
-	str	x0, [x29, 40]
-	add	x0, x29, 64
-	str	x0, [x29, 48]
-	bl	ftl_memset
-	ldr	x0, [x20, 3512]
-	mov	w2, 8
-	mov	w1, 90
-	bl	ftl_memset
-	str	w19, [x29, 36]
+	mov	x19, x0
+	stp	x21, x22, [sp, 32]
+	adrp	x22, .LANCHOR0
+	stp	x23, x24, [sp, 48]
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+	ldr	x20, [x0, 16]
+	ldr	x25, [x0, 40]
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x19, 10]
+	ldrh	w2, [x19, 8]
+	sub	w1, w1, #5
+	cmp	w2, w1
+	blt	.L949
+	ubfiz	x0, x0, 1, 16
+	ldrh	w26, [x20, x0]
+	cbz	w26, .L949
+	ldr	w1, [x19, 52]
+	cbnz	w1, .L949
+	mov	w1, 1
+	str	w1, [x19, 52]
+	strh	wzr, [x20, x0]
+	ldrh	w0, [x19, 8]
+	ldrh	w1, [x19, 2]
+	sub	w0, w0, #1
+	strh	w0, [x19, 8]
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0, 108]
+	cmp	w1, w0
+	bcc	.L950
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L950:
+	add	x27, x22, :lo12:.LANCHOR0
+	adrp	x23, .LANCHOR1
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x21, x27, 3728
+	add	x23, x23, 472
+	mov	w20, 0
+.L951:
+	ldrh	w0, [x19, 6]
+	cmp	w0, w20
+	bhi	.L958
+	mov	w1, 1
+	mov	w0, w26
+	bl	FtlFreeSysBlkQueueIn
+	str	wzr, [x19, 52]
+.L949:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w1, [x19, 2]
+	ldrh	w0, [x22, 108]
+	cmp	w1, w0
+	bcc	.L959
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L959:
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
+	ret
+.L958:
+	ubfiz	x0, x20, 2, 16
+	add	x28, x25, x0
+	ldr	w1, [x25, x0]
+	cmp	w26, w1, lsr 10
+	bne	.L952
+	ldr	x1, [x27, 3472]
 	mov	w2, 1
-	add	x0, x29, 32
+	ldr	x24, [x27, 3528]
+	stp	x1, x24, [x21, 8]
 	mov	w1, w2
-	bl	FlashEraseBlocks
-	mov	w3, 1
-	add	x0, x29, 32
-	mov	w2, w3
-	mov	w1, w3
-	bl	FlashProgPages
-	ldr	w0, [x29, 32]
-	mov	w2, 1
-	mov	w1, 0
-	cmp	w0, 0
-	add	x0, x29, 32
-	csetm	w19, ne
-	bl	FlashEraseBlocks
-.L1017:
-	mov	w0, w19
+	ldr	w0, [x25, x0]
+	str	w0, [x21, 4]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldrh	w0, [x24, 8]
+	cmp	w0, w20
+	beq	.L953
+	adrp	x0, .LC1
+	mov	w2, 611
+	mov	x1, x23
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L953:
+	ldr	w0, [x21]
+	cmn	w0, #1
+	bne	.L954
+.L956:
+	str	wzr, [x28]
+.L955:
+	b	.L955
+.L954:
+	ldrh	w0, [x24, 8]
+	cmp	w0, w20
+	bne	.L956
+	ldrh	w1, [x24]
+	ldrh	w0, [x19, 4]
+	cmp	w1, w0
+	bne	.L956
+	ldr	x2, [x21, 8]
+	mov	w1, w20
+	mov	x0, x19
+	bl	FtlMapWritePage
+.L952:
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	b	.L951
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfiz	x20, x0, 4, 16
+	ldr	x0, [x19, 2568]
+	add	x1, x0, x20
+	ldr	x2, [x1, 8]
+	ldrh	w1, [x0, x20]
+	add	x0, x19, 3648
+	bl	FtlMapWritePage
+	ldr	x0, [x19, 2568]
+	add	x0, x0, x20
+	ldr	w1, [x0, 4]
+	and	w1, w1, 2147483647
+	str	w1, [x0, 4]
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 32
 	ret
-.L1019:
-	mov	w19, 0
-	b	.L1017
-	.size	FlashTestBlk, .-FlashTestBlk
+	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
-	.global	FtlBbmTblFlush
-	.type	FtlBbmTblFlush, %function
-FtlBbmTblFlush:
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
 	stp	x29, x30, [sp, -80]!
-	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	w19, 0
+	adrp	x20, .LANCHOR0
 	stp	x25, x26, [sp, 64]
-	adrp	x25, .LANCHOR0
-	add	x20, x25, :lo12:.LANCHOR0
+	mov	w25, w0
+	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	add	x21, x20, 192
-	ldr	x2, [x20, 3528]
-	ldr	x0, [x20, 3464]
-	str	x2, [x20, 3744]
-	ldrh	w2, [x20, 114]
-	str	x0, [x20, 3736]
-	bl	ftl_memset
-.L1022:
-	ldrh	w0, [x20, 58]
-	add	x1, x20, 3728
-	cmp	w19, w0
-	blt	.L1023
-	ldr	x26, [x1, 16]
-	add	x19, x20, 160
-	mov	w2, 16
-	mov	w1, 255
-	mov	x0, x26
-	bl	ftl_memset
-	mov	w0, -3887
-	adrp	x22, .LC102
-	strh	w0, [x26]
-	add	x25, x25, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC102
-	mov	w21, 0
-	ldr	w0, [x19, 8]
-	mov	w23, 0
-	str	w0, [x26, 4]
-	adrp	x24, .LC103
-	ldrh	w0, [x20, 160]
-	strh	w0, [x26, 2]
-	ldrh	w0, [x19, 4]
-	strh	w0, [x26, 8]
-	ldrh	w0, [x19, 6]
-	strh	w0, [x26, 10]
-	ldr	w0, [x20, 32]
-	strh	w0, [x26, 12]
-.L1024:
-	ldr	x0, [x25, 3464]
-	str	x0, [x25, 3736]
-	ldr	x0, [x25, 3528]
-	str	x0, [x25, 3744]
-	ldrh	w1, [x19]
-	ldrh	w2, [x19, 2]
-	ldrh	w3, [x19, 4]
-	ldrh	w4, [x26, 10]
-	orr	w0, w2, w1, lsl 10
-	str	wzr, [x25, 3728]
-	str	w0, [x25, 3732]
-	mov	x0, x22
+	mov	x22, x1
+	mov	w23, w2
+	ldrh	w24, [x0, 112]
+	ldr	w0, [x0, 2584]
+	cmp	w25, w0
+	bcc	.L968
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 813
+	add	x1, x1, 488
+	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-	ldrh	w0, [x25, 108]
-	ldrh	w1, [x19, 2]
-	sub	w0, w0, #1
-	cmp	w1, w0
-	blt	.L1025
-	ldr	w0, [x19, 8]
-	mov	w2, 1
-	ldrh	w1, [x19]
-	add	w0, w0, 1
-	str	w0, [x19, 8]
-	str	w0, [x26, 4]
-	strh	w1, [x26, 8]
-	ldrh	w0, [x19, 4]
-	strh	w1, [x19, 4]
-	ldr	x1, [x25, 3416]
-	strh	w0, [x19]
-	lsl	w0, w0, 10
-	str	w0, [x25, 3732]
-	strh	wzr, [x19, 2]
-	str	w0, [x1, 4]
-	mov	w1, w2
-	ldr	x0, [x25, 3416]
-	bl	FlashEraseBlocks
-.L1025:
-	add	x20, x25, 3728
-	mov	w3, 1
-	mov	x0, x20
-	mov	w2, w3
-	mov	w1, w3
-	bl	FlashProgPages
-	ldrh	w0, [x19, 2]
-	add	w0, w0, 1
-	strh	w0, [x19, 2]
-	ldr	w0, [x25, 3728]
-	cmn	w0, #1
-	bne	.L1026
-	ldr	w1, [x25, 3732]
-	add	w21, w21, 1
-	add	x0, x24, :lo12:.LC103
+.L968:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x0, 2584]
+	cmp	w25, w1
+	bcs	.L969
+	add	w24, w24, 7
+	ldrh	w1, [x0, 142]
+	ldr	x2, [x0, 2568]
+	mov	x0, 0
+	lsr	w21, w25, w24
 	and	w21, w21, 65535
-	bl	sftl_printk
-	cmp	w21, 3
-	bls	.L1024
-	ldr	w1, [x25, 3732]
-	adrp	x0, .LC104
-	mov	w2, w21
-	add	x0, x0, :lo12:.LC104
-	bl	sftl_printk
-.L1028:
-	b	.L1028
-.L1023:
-	ldrh	w2, [x20, 3640]
-	ldr	x0, [x1, 8]
-	ldr	x1, [x21], 8
-	mul	w3, w19, w2
-	lsl	w2, w2, 2
-	add	w19, w19, 1
-	add	x0, x0, x3, sxtw 2
-	bl	ftl_memcpy
-	b	.L1022
-.L1029:
-	mov	w23, 1
-	b	.L1024
-.L1026:
-	cbz	w23, .L1029
-	mov	w0, 0
+.L970:
+	and	x19, x0, 65535
+	cmp	w19, w1
+	bcc	.L975
+	bl	select_l2p_ram_region
+	and	x19, x0, 65535
+	add	x2, x20, :lo12:.LANCHOR0
+	ubfiz	x1, x19, 4, 16
+	mov	w26, w0
+	ldr	x2, [x2, 2568]
+	add	x3, x2, x1
+	ldrh	w2, [x2, x1]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L976
+	ldr	w1, [x3, 4]
+	tbz	w1, #31, .L976
+	bl	flush_l2p_region
+.L976:
+	mov	w1, w26
+	mov	w0, w21
+	bl	load_l2p_region
+	b	.L972
+.L969:
+	mov	w0, -1
+	cbnz	w23, .L967
+	str	w0, [x22]
+.L967:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+.L975:
+	add	x0, x0, 1
+	add	x3, x2, x0, lsl 4
+	ldrh	w3, [x3, -16]
+	cmp	w3, w21
+	bne	.L970
+.L972:
+	mov	x0, 1
+	lsl	x0, x0, x24
+	sub	w0, w0, #1
+	and	w0, w0, w25
+	and	x0, x0, 65535
+	cbnz	w23, .L973
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x1, [x1, 2568]
+	add	x1, x1, x19, lsl 4
+	ldr	x1, [x1, 8]
+	ldr	w0, [x1, x0, lsl 2]
+	str	w0, [x22]
+.L974:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20, 2568]
+	add	x19, x0, x19, lsl 4
+	ldr	w0, [x19, 4]
+	cmn	w0, #1
+	beq	.L978
+	add	w0, w0, 1
+	str	w0, [x19, 4]
+.L978:
+	mov	w0, 0
+	b	.L967
+.L973:
+	add	x2, x20, :lo12:.LANCHOR0
+	lsl	x1, x19, 4
+	ldr	w4, [x22]
+	ldr	x3, [x2, 2568]
+	add	x3, x3, x1
+	ldr	x3, [x3, 8]
+	str	w4, [x3, x0, lsl 2]
+	strh	w21, [x2, 2576]
+	ldr	x0, [x2, 2568]
+	add	x0, x0, x1
+	ldr	w1, [x0, 4]
+	orr	w1, w1, -2147483648
+	str	w1, [x0, 4]
+	b	.L974
+	.size	log2phys, .-log2phys
 	.align	2
-	.global	allocate_data_superblock
-	.type	allocate_data_superblock, %function
-allocate_data_superblock:
-	stp	x29, x30, [sp, -112]!
+	.global	FtlWriteDump_data
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
+	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
-	add	x22, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	mov	x20, x0
-	mov	x19, x22
-	add	x23, x22, 2520
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-.L1032:
-	ldrh	w1, [x22, 2400]
-	ldrh	w0, [x22, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x22, 44]
-	cmp	w0, w1
-	ble	.L1033
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2615
-	add	x1, x1, 480
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L1033:
-	cmp	x20, x23
-	bne	.L1059
-	ldrh	w0, [x19, 2416]
-	ldr	w1, [x19, 3244]
-	mul	w1, w0, w1
-	lsr	w0, w0, 1
+	str	x25, [sp, 64]
+	ldrh	w2, [x20, 2428]
+	cbz	w2, .L982
+	ldrb	w1, [x20, 2432]
+	cbnz	w1, .L982
+	ldrb	w1, [x20, 2431]
+	ldrh	w3, [x20, 106]
+	mul	w1, w1, w3
+	cmp	w2, w1
+	beq	.L982
+	ldrb	w0, [x20, 2434]
+	cbnz	w0, .L981
+	ldr	w22, [x20, 2584]
+	add	x1, x29, 92
+	ldrh	w24, [x20, 36]
+	mov	w2, 0
+	sub	w22, w22, #1
+	mov	w0, w22
+	bl	log2phys
+	ldr	x21, [x20, 3528]
+	ldr	w0, [x29, 92]
+	ldr	x1, [x20, 3464]
+	str	w0, [x29, 100]
+	cmn	w0, #1
+	stp	x1, x21, [x29, 104]
+	str	w22, [x29, 120]
+	str	wzr, [x21, 4]
+	beq	.L984
+	mov	w2, 0
+	mov	w1, 1
+	add	x0, x29, 96
+	bl	FlashReadPages
+.L985:
+	add	x25, x19, :lo12:.LANCHOR0
+	lsl	w24, w24, 2
+	add	x20, x25, 2424
+	mov	w0, -3947
+	mov	w23, 0
+	strh	w0, [x21]
+.L986:
+	cmp	w24, w23
+	bne	.L990
+.L987:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	strb	w0, [x19, 2434]
+.L981:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldr	x25, [sp, 64]
+	ldp	x29, x30, [sp], 128
+	ret
+.L984:
+	ldrh	w2, [x20, 114]
+	mov	w1, 255
+	ldr	x0, [x20, 3464]
+	bl	ftl_memset
+	b	.L985
+.L990:
+	ldrh	w0, [x20, 4]
+	cbz	w0, .L987
+	ldr	w0, [x29, 100]
+	add	w23, w23, 1
+	stp	w22, w0, [x21, 8]
+	ldrh	w0, [x20]
+	strh	w0, [x21, 2]
+	mov	x0, x20
+	bl	get_new_active_ppa
+	str	w0, [x29, 100]
+	ldr	w0, [x25, 2624]
+	mov	w3, 0
+	str	w0, [x21, 4]
+	mov	w2, 0
 	add	w0, w0, 1
-	add	w1, w0, w1, lsr 2
-	ands	w1, w1, 65535
-	beq	.L1034
-	sub	w1, w1, #1
-	and	w1, w1, 65535
-.L1034:
-	add	x0, x19, 2408
-	bl	List_pop_index_node
-	and	w25, w0, 65535
-	ldrh	w0, [x19, 2416]
-	cbnz	w0, .L1035
+	mov	w1, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x25, 2624]
+	add	x0, x29, 96
+	bl	FlashProgPages
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	b	.L986
+.L982:
+	add	x19, x19, :lo12:.LANCHOR0
+	strb	wzr, [x19, 2434]
+	b	.L981
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	mov	w21, w0
+	stp	x19, x20, [sp, 16]
+	lsr	w0, w1, 10
+	str	w1, [x29, 76]
+	adrp	x22, .LANCHOR0
+	str	x23, [sp, 48]
+	bl	P2V_block_in_plane
+	add	x2, x22, :lo12:.LANCHOR0
+	and	w0, w0, 65535
+	ubfiz	x20, x0, 1, 16
+	ldr	x3, [x2, 2376]
+	ldrh	w1, [x3, x20]
+	cbnz	w1, .L1000
+	ldr	x19, [x2, 2408]
+	cbz	x19, .L1001
+	ldrh	w3, [x2, 2416]
+	mov	x4, -6148914691236517206
+	ldr	x2, [x2, 2360]
+	movk	x4, 0xaaab, lsl 0
+	mov	w5, 65535
+	sub	x19, x19, x2
+	asr	x19, x19, 1
+	mul	x19, x19, x4
+	mov	w4, 6
+	and	w19, w19, 65535
+.L1002:
+	cmp	w1, w3
+	beq	.L1001
+	cmp	w19, w0
+	bne	.L1003
+	add	x23, x22, :lo12:.LANCHOR0
+	mov	w1, w19
+	add	x0, x23, 2408
+	bl	List_remove_node
+	ldrh	w0, [x23, 2416]
+	cbnz	w0, .L1004
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2624
-	add	x1, x1, 480
+	mov	w2, 1733
+	add	x1, x1, 504
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1035:
-	ldrh	w0, [x19, 2416]
+.L1004:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x22, 2416]
 	sub	w0, w0, #1
-	strh	w0, [x19, 2416]
-	ldrh	w0, [x19, 44]
-	cmp	w0, w25
-	bls	.L1032
-	ldr	x0, [x19, 2376]
-	ubfiz	x26, x25, 1, 16
-	ldrh	w24, [x0, x26]
-	cbnz	w24, .L1032
-	strh	w25, [x20]
-	mov	x0, x20
-	bl	make_superblock
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L1037
-	ldr	x0, [x19, 2376]
-	mov	w1, -1
-	strh	w1, [x0, x26]
-	mov	w0, w25
+	strh	w0, [x22, 2416]
+	mov	w0, w19
 	bl	INSERT_DATA_LIST
-	ldrh	w1, [x19, 2400]
-	ldrh	w0, [x19, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x19, 44]
+	ldr	x1, [x22, 2376]
+	ldrh	w0, [x1, x20]
+	add	w0, w0, 1
+	strh	w0, [x1, x20]
+.L1001:
+	add	x1, x29, 76
+	mov	w2, 1
+	mov	w0, w21
+	bl	log2phys
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldr	x23, [sp, 48]
+	ldp	x29, x30, [sp], 80
+	ret
+.L1003:
+	umull	x19, w19, w4
+	ldrh	w19, [x2, x19]
+	cmp	w19, w5
+	beq	.L1001
+	add	w1, w1, 1
+	and	w1, w1, 65535
+	b	.L1002
+.L1000:
+	add	w1, w1, 1
+	strh	w1, [x3, x20]
+	b	.L1001
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	stp	x29, x30, [sp, -160]!
+	mov	w1, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x20, x0
+	stp	x21, x22, [sp, 32]
+	stp	x23, x24, [sp, 48]
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+	ldrh	w0, [x0]
 	cmp	w0, w1
-	ble	.L1032
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2638
-	add	x1, x1, 480
-	adrp	x0, .LC1
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-	b	.L1032
-.L1059:
-	mov	w1, 0
-	b	.L1034
-.L1037:
-	ldrh	w1, [x19, 2400]
-	ldrh	w0, [x19, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x19, 44]
+	beq	.L1127
+	ldrb	w0, [x20, 6]
+	adrp	x19, .LANCHOR0
+	str	w0, [x29, 140]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w26, [x20, 2]
+	ldrh	w0, [x0, 106]
+	cmp	w0, w26
+	bne	.L1013
+	strh	wzr, [x20, 4]
+.L1135:
+	strb	wzr, [x20, 6]
+.L1127:
+	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 160
+	ret
+.L1013:
+	ldrh	w0, [x20, 16]
+	mov	w21, 0
+.L1014:
 	cmp	w0, w1
-	ble	.L1039
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2641
-	add	x1, x1, 480
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L1039:
-	add	x27, x20, 16
-	ldrh	w4, [x19, 36]
-	mov	x3, x27
-	mov	x0, 0
-	mov	w5, 65535
-.L1040:
-	cmp	w4, w0, uxth
-	bhi	.L1042
-	cbnz	w24, .L1043
+	beq	.L1015
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	mov	w23, w0
+	cmn	w0, #1
+	beq	.L1016
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x28, x20, 16
+	mov	x3, x28
+	mov	w22, 0
+	mov	w10, 65535
+	mov	w6, 4
+	ldrh	w1, [x0, 36]
+	ldrh	w8, [x0, 114]
+	add	x1, x1, 8
+	ldrh	w9, [x0, 116]
+	add	x1, x20, x1, lsl 1
+.L1017:
+	cmp	x1, x3
+	bne	.L1021
+	add	x24, x19, :lo12:.LANCHOR0
+	mov	w2, 0
+	mov	w1, w22
+	ldr	x0, [x24, 3440]
+	bl	FlashReadPages
+	ldr	w21, [x24, 2624]
+	ldr	x4, [x24, 3440]
+	and	w9, w23, 65535
+	sub	w21, w21, #1
+	mov	w7, 65535
+	mov	x6, x4
+	mov	w3, 0
+.L1022:
+	cmp	w22, w3
+	bne	.L1027
+	add	w22, w23, 1
+	ldr	w0, [x4, 4]
+	and	w22, w22, 65535
+.L1129:
+	lsr	w0, w0, 10
+	bl	P2V_plane
+	and	w27, w0, 65535
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0, 106]
+	cmp	w0, w22
+	bne	.L1029
+	strh	w22, [x20, 2]
+	strb	wzr, [x20, 6]
+	strh	wzr, [x20, 4]
+.L1029:
+	ldr	w0, [x29, 140]
+	cmp	w22, w26
+	ccmp	w27, w0, 0, eq
+	bne	.L1030
+.L1136:
+	mov	w2, w27
+	mov	w1, w22
+	mov	x0, x20
+	bl	ftl_sb_update_avl_pages
+	b	.L1127
+.L1015:
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	add	x0, x20, x21, sxtw 1
+	ldrh	w0, [x0, 16]
+	b	.L1014
+.L1016:
+	cbz	w26, .L1018
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2652
-	add	x1, x1, 480
+	mov	w2, 1800
+	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1043:
-	ldrh	w0, [x19, 2672]
-	cmp	w0, w25
-	bne	.L1044
+.L1018:
+	ldr	w0, [x29, 140]
+	cmp	w0, 0
+	ccmp	w21, w0, 4, ne
+	beq	.L1019
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2654
-	add	x1, x1, 480
+	mov	w2, 1801
+	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1044:
-	ldrb	w0, [x20, 8]
-	ldr	x1, [x19, 2384]
-	cbnz	w0, .L1045
-	ldrh	w0, [x1, x26]
-	cbz	w0, .L1046
-	ldrh	w2, [x19, 96]
-	add	w0, w0, w2
-.L1067:
-	strh	w0, [x1, x26]
-	mov	w1, 0
-	ldr	w0, [x19, 2628]
-	add	w0, w0, 1
-	str	w0, [x19, 2628]
-	mov	w0, w25
-	bl	ftl_set_blk_mode
-.L1048:
-	ldr	x0, [x19, 2384]
-	ldr	w1, [x19, 2644]
-	ldrh	w0, [x0, x26]
-	cmp	w0, w1
-	bls	.L1049
-	str	w0, [x19, 2644]
-.L1049:
-	ldr	w1, [x19, 2632]
-	ubfiz	x3, x24, 5, 16
-	ldrh	w0, [x19, 96]
-	ldr	w2, [x19, 2628]
-	madd	w0, w0, w2, w1
-	ldrh	w1, [x19, 44]
-	udiv	w0, w0, w1
-	ldr	x1, [x19, 3560]
-	str	w0, [x19, 2636]
-	ldr	w0, [x1, 16]
-	add	w0, w0, 1
-	str	w0, [x1, 16]
-	mov	x0, 0
-.L1050:
-	cmp	x3, x0
-	bne	.L1051
-	ldrb	w1, [x20, 8]
-	mov	w2, w24
-	ldr	x0, [x19, 3416]
-	mov	x28, 0
-	bl	FlashEraseBlocks
-	mov	w1, 0
-.L1052:
-	cmp	w24, w28, uxth
-	bhi	.L1054
-	cmp	w1, 0
-	ble	.L1055
-	mov	w0, w25
-	bl	update_multiplier_value
-	bl	FtlBbmTblFlush
-.L1055:
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L1056
-	ldr	x0, [x19, 2376]
-	mov	w1, -1
-	strh	w1, [x0, x26]
-	b	.L1032
-.L1042:
-	ldr	x1, [x19, 3416]
-	add	x2, x1, x0, lsl 5
-	stp	xzr, xzr, [x2, 8]
+.L1019:
+	strh	wzr, [x20, 2]
+	b	.L1135
+.L1021:
 	ldrh	w2, [x3]
-	cmp	w2, w5
-	beq	.L1041
-	ubfiz	x6, x24, 5, 16
+	cmp	w2, w10
+	beq	.L1020
+	ldr	x5, [x0, 3440]
+	ubfiz	x7, x22, 5, 16
+	orr	w2, w23, w2, lsl 10
+	add	x5, x5, x7
+	str	w2, [x5, 4]
+	mul	w2, w22, w8
+	ldr	x4, [x0, 3440]
+	ldr	x5, [x0, 3264]
+	sdiv	w2, w2, w6
+	add	x4, x4, x7
+	add	x2, x5, x2, sxtw 2
+	str	x2, [x4, 8]
+	mul	w2, w22, w9
+	ldr	x5, [x0, 3272]
+	add	w22, w22, 1
+	and	w22, w22, 65535
+	sdiv	w2, w2, w6
+	add	x2, x5, x2, sxtw 2
+	str	x2, [x4, 16]
+.L1020:
+	add	x3, x3, 2
+	b	.L1017
+.L1027:
+	ldr	w0, [x6]
+	cbnz	w0, .L1023
+	ldr	x8, [x6, 16]
+	ldr	w5, [x8, 4]
+	cmn	w5, #1
+	beq	.L1024
+	ldr	w1, [x24, 2624]
+	mov	w0, w5
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1024
+	add	w5, w5, 1
+	str	w5, [x24, 2624]
+.L1024:
+	ldr	w0, [x8]
+	cmn	w0, #1
+	bne	.L1026
+	ubfiz	x3, x3, 5, 16
+	and	w22, w23, 65535
+	add	x3, x4, x3
+	ldr	w0, [x3, 4]
+	b	.L1129
+.L1023:
+	mov	w7, w9
+.L1026:
+	add	w3, w3, 1
+	add	x6, x6, 32
+	and	w3, w3, 65535
+	b	.L1022
+.L1030:
+	mov	w0, 65535
+	cmp	w7, w0
+	bne	.L1031
+	ldrb	w0, [x20, 8]
+	cbnz	w0, .L1032
+.L1031:
+	add	x0, x19, :lo12:.LANCHOR0
+	and	w3, w23, 65535
+	ldr	w1, [x0, 3724]
+	cmn	w1, #1
+	bne	.L1033
+	str	w21, [x0, 3724]
+.L1033:
+	add	w0, w26, 7
+	cmp	w0, w23, uxth
+	bge	.L1083
+	sub	w24, w3, #7
+	and	w24, w24, 65535
+.L1034:
+	add	x25, x19, :lo12:.LANCHOR0
+	mov	w4, 65535
+.L1035:
+	cmp	w24, w3
+	bhi	.L1042
+	ldrh	w0, [x25, 36]
+	mov	x1, x28
+	mov	w23, 0
+	add	x0, x0, 8
+	add	x0, x20, x0, lsl 1
+	b	.L1043
+.L1083:
+	mov	w24, w26
+	b	.L1034
+.L1037:
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1036
+	ldr	x5, [x25, 3440]
+	ubfiz	x6, x23, 5, 16
+	add	w23, w23, 1
+	orr	w2, w24, w2, lsl 10
+	add	x5, x5, x6
+	and	w23, w23, 65535
+	str	w2, [x5, 4]
+.L1036:
+	add	x1, x1, 2
+.L1043:
+	cmp	x0, x1
+	bne	.L1037
+	ldr	x0, [x25, 3440]
+	mov	w1, w23
+	str	w4, [x29, 120]
+	mov	w2, 0
+	str	w3, [x29, 128]
+	ubfiz	x23, x23, 5, 16
+	add	x23, x23, 16
+	bl	FlashReadPages
+	ldr	x1, [x25, 3440]
+	ldr	w4, [x29, 120]
+	ldr	w3, [x29, 128]
+	add	x0, x1, 16
+	add	x23, x1, x23
+.L1038:
+	cmp	x23, x0
+	bne	.L1041
 	add	w24, w24, 1
-	add	x1, x1, x6
 	and	w24, w24, 65535
-	lsl	w2, w2, 10
-	str	w2, [x1, 4]
+	b	.L1035
 .L1041:
-	add	x0, x0, 1
-	add	x3, x3, 2
-	b	.L1040
-.L1046:
-	mov	w0, 2
-	b	.L1067
-.L1045:
-	ldrh	w0, [x1, x26]
-	add	w0, w0, 1
-	strh	w0, [x1, x26]
-	ldr	w0, [x19, 2632]
-	add	w0, w0, 1
-	str	w0, [x19, 2632]
-	mov	w0, w25
-	bl	ftl_set_blk_mode.part.7
-	b	.L1048
-.L1051:
-	ldr	x1, [x19, 3416]
-	add	x1, x1, x0
+	ldr	w1, [x0, -16]
+	cbnz	w1, .L1032
+	ldr	x1, [x0]
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1040
+	ldr	w1, [x1, 4]
+	cmn	w1, #1
+	beq	.L1040
+	str	w1, [x25, 3724]
+.L1040:
 	add	x0, x0, 32
-	ldr	w2, [x1, 4]
-	and	w2, w2, -1024
-	str	w2, [x1, 4]
-	b	.L1050
-.L1054:
-	ldr	x2, [x19, 3416]
-	lsl	x0, x28, 5
-	add	x3, x2, x0
-	ldr	w2, [x2, x0]
-	cmn	w2, #1
-	bne	.L1053
-	add	w1, w1, 1
-	ldr	w0, [x3, 4]
-	stp	w2, w1, [x29, 104]
-	lsr	w0, w0, 10
-	bl	FtlBbmMapBadBlock
-	ldp	w2, w1, [x29, 104]
-	strh	w2, [x27]
-	ldrb	w0, [x20, 7]
-	sub	w0, w0, #1
-	strb	w0, [x20, 7]
-.L1053:
-	add	x28, x28, 1
-	add	x27, x27, 2
-	b	.L1052
-.L1056:
-	add	x21, x21, :lo12:.LANCHOR0
-	strh	wzr, [x20, 2]
-	strb	wzr, [x20, 6]
-	ldrh	w1, [x21, 106]
-	strh	w25, [x20]
-	mul	w0, w0, w1
-	ldr	w1, [x21, 2620]
-	str	w1, [x20, 12]
-	and	w0, w0, 65535
-	add	w1, w1, 1
-	strh	w0, [x20, 4]
-	str	w1, [x21, 2620]
-	ldr	x1, [x21, 2376]
-	ldrh	w2, [x20]
-	strh	w0, [x1, x2, lsl 1]
-	ldrh	w0, [x20, 4]
-	cbz	w0, .L1057
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L1058
-.L1057:
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2707
-	add	x1, x1, 480
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L1058:
-	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 112
-	ret
-	.size	allocate_data_superblock, .-allocate_data_superblock
-	.align	2
-	.global	FtlGcFreeBadSuperBlk
-	.type	FtlGcFreeBadSuperBlk, %function
-FtlGcFreeBadSuperBlk:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
+	b	.L1038
+.L1042:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, -1
+	str	w1, [x0, 3724]
+.L1032:
 	add	x19, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	and	w22, w0, 65535
-	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
-	ldrh	w0, [x19, 3324]
-	str	x27, [sp, 80]
-	cbz	w0, .L1069
-	add	x23, x19, 64
-	add	x24, x19, 3328
-	mov	w21, 0
-.L1070:
+	mov	w0, 1
+	mov	w25, w26
+	strh	w0, [x19, 3760]
+	add	x0, x19, 3768
+	str	x0, [x29, 104]
+.L1044:
 	ldrh	w0, [x19, 36]
-	cmp	w0, w21
-	bhi	.L1076
-	bl	FtlGcReFreshBadBlk
-.L1069:
-	mov	w0, 0
-	ldr	x27, [sp, 80]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 96
-	ret
-.L1076:
-	ldrb	w0, [x23, w21, sxtw]
-	mov	w1, w22
-	adrp	x26, .LC105
-	add	x26, x26, :lo12:.LC105
-	mov	w20, 0
-	bl	V2P_block
-	and	w25, w0, 65535
-.L1071:
-	ldrh	w0, [x19, 3324]
-	cmp	w0, w20
-	bhi	.L1075
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	b	.L1070
-.L1075:
-	ldrh	w0, [x24, w20, sxtw 1]
-	add	w27, w20, 1
+	mov	x1, x28
+	mov	w23, 0
+	mov	w4, 65535
+	add	x0, x0, 8
+	add	x0, x20, x0, lsl 1
+.L1045:
+	cmp	x0, x1
+	bne	.L1047
+	ldr	x0, [x19, 3440]
+	mov	w1, w23
+	mov	w2, 0
+	bl	FlashReadPages
+	ubfiz	x0, x23, 5, 16
+	str	x0, [x29, 112]
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	add	x0, x0, 520
+	mov	x23, 0
+	str	x0, [x29, 120]
+.L1048:
+	ldr	x0, [x29, 112]
+	cmp	x0, x23
+	bne	.L1077
+	add	w25, w25, 1
+	ldrh	w0, [x19, 106]
+	and	w25, w25, 65535
 	cmp	w0, w25
-	bne	.L1072
-	mov	w1, w25
-	mov	x0, x26
-	bl	sftl_printk
-	mov	w0, w25
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldrh	w0, [x19, 3324]
-	mov	w1, w27
-.L1073:
-	cmp	w20, w0
-	bcc	.L1074
-	sub	w0, w0, #1
-	strh	w0, [x19, 3324]
-.L1072:
-	and	w20, w27, 65535
-	b	.L1071
-.L1074:
-	sub	w2, w1, #1
-	ldrh	w3, [x24, w1, sxtw 1]
-	add	w20, w20, 1
-	add	w1, w1, 1
-	and	w20, w20, 65535
-	strh	w3, [x24, w2, sxtw 1]
-	b	.L1073
-	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
-	.align	2
-	.global	update_vpc_list
-	.type	update_vpc_list, %function
-update_vpc_list:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	and	w19, w0, 65535
-	adrp	x20, .LANCHOR0
-	add	x0, x20, :lo12:.LANCHOR0
-	str	x21, [sp, 32]
-	ubfiz	x1, x19, 1, 16
-	ldr	x2, [x0, 2376]
-	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1082
-	ldrh	w1, [x0, 2672]
-	cmp	w1, w19
-	bne	.L1083
-	mov	w1, -1
-	strh	w1, [x0, 2672]
-.L1084:
-	add	x21, x20, :lo12:.LANCHOR0
-	mov	w1, w19
-	add	x0, x21, 2368
-	bl	List_remove_node
-	ldrh	w0, [x21, 2400]
-	cbnz	w0, .L1086
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2777
-	add	x1, x1, 512
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-.L1086:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x20, 2400]
-	sub	w0, w0, #1
-	strh	w0, [x20, 2400]
-	mov	w0, w19
-	bl	free_data_superblock
-	mov	w0, w19
-	bl	FtlGcFreeBadSuperBlk
-	ldrh	w1, [x20, 2400]
-	ldrh	w0, [x20, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x20, 44]
+	bne	.L1044
+	ldrh	w1, [x19, 36]
+	mov	w0, 0
+	strh	w25, [x20, 2]
+	mov	w2, 65535
+	strh	wzr, [x20, 4]
+.L1078:
 	cmp	w0, w1
-	ble	.L1090
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
+	beq	.L1127
+	ldrh	w3, [x28], 2
+	cmp	w3, w2
+	beq	.L1079
+	strb	w0, [x20, 6]
+	b	.L1127
+.L1047:
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1046
+	ldr	x3, [x19, 3440]
+	ubfiz	x5, x23, 5, 16
+	add	w23, w23, 1
+	orr	w2, w25, w2, lsl 10
+	add	x3, x3, x5
+	and	w23, w23, 65535
+	str	w2, [x3, 4]
+.L1046:
+	add	x1, x1, 2
+	b	.L1045
+.L1077:
+	ldr	x4, [x19, 3440]
+	add	x4, x4, x23
+	ldr	w5, [x4, 4]
+	str	w5, [x29, 156]
+	lsr	w0, w5, 10
+	bl	P2V_plane
+	and	w0, w0, 65535
+	cmp	w25, w26
+	bcc	.L1049
+	ldr	w1, [x29, 140]
+	ccmp	w1, w0, 0, eq
+	bhi	.L1049
+	cmp	w25, w22
+	ccmp	w27, w0, 0, eq
+	beq	.L1050
+	ldr	w0, [x4]
+	cmn	w0, #1
+	beq	.L1051
+	ldr	x3, [x4, 16]
+	mov	w0, 61589
+	ldrh	w1, [x3]
+	cmp	w1, w0
+	beq	.L1052
+	ldrh	w0, [x20]
+.L1133:
+	bl	decrement_vpc_count
+	b	.L1049
+.L1052:
+	ldr	w21, [x3, 4]
+	cmn	w21, #1
+	beq	.L1053
+	ldr	w1, [x19, 2624]
+	mov	w0, w21
+	str	x3, [x29, 128]
+	bl	ftl_cmp_data_ver
+	ldr	x3, [x29, 128]
+	cbz	w0, .L1053
+	add	w0, w21, 1
+	str	w0, [x19, 2624]
+.L1053:
+	ldrh	w1, [x3]
+	mov	w0, 61589
+	cmp	w1, w0
+	beq	.L1054
+	ldr	x1, [x29, 120]
+	mov	w2, 1952
+	str	x3, [x29, 128]
 	adrp	x0, .LC1
-	mov	w2, 2780
-	add	x1, x1, 512
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1090:
-	mov	w0, 1
-	b	.L1081
-.L1083:
-	ldrh	w1, [x0, 2424]
-	cmp	w1, w19
-	beq	.L1089
-	ldrh	w1, [x0, 2472]
-	cmp	w1, w19
-	beq	.L1089
-	ldrh	w0, [x0, 2520]
-	cmp	w0, w19
-	bne	.L1084
-.L1089:
-	mov	w0, 0
-.L1081:
-	ldp	x19, x20, [sp, 16]
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 48
-	ret
-.L1082:
-	mov	w0, w19
-	bl	List_update_data_list
-	b	.L1089
-	.size	update_vpc_list, .-update_vpc_list
-	.align	2
-	.global	decrement_vpc_count
-	.type	decrement_vpc_count, %function
-decrement_vpc_count:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	and	w20, w0, 65535
-	stp	x21, x22, [sp, 32]
-	mov	w0, 65535
-	adrp	x19, .LANCHOR0
-	cmp	w20, w0
-	beq	.L1093
-	add	x22, x19, :lo12:.LANCHOR0
-	ubfiz	x21, x20, 1, 16
-	ldr	x1, [x22, 2376]
-	ldrh	w0, [x1, x21]
-	cbnz	w0, .L1094
+	ldr	x3, [x29, 128]
+.L1054:
+	ldp	w24, w0, [x3, 8]
+	add	x1, x29, 152
+	str	w0, [x29, 148]
 	mov	w2, 0
-	mov	w1, w20
-	adrp	x0, .LC106
-	add	x0, x0, :lo12:.LC106
-	bl	sftl_printk
-	ldr	x0, [x22, 2376]
-	ldrh	w0, [x0, x21]
-	cbz	w0, .L1095
-.L1100:
-	mov	w21, 0
-.L1092:
+	mov	w0, w24
+	bl	log2phys
+	ldr	w1, [x19, 3724]
+	ldr	w3, [x29, 148]
+	cmn	w1, #1
+	beq	.L1055
 	mov	w0, w21
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 48
-	ret
-.L1095:
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2795
-	add	x1, x1, 528
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1055
+	cmn	w3, #1
+	beq	.L1056
+	ldr	x0, [x19, 3440]
+	mov	w2, 0
+	mov	w1, 1
+	add	x0, x0, x23
+	ldr	x4, [x0, 16]
+	str	w3, [x0, 4]
+	str	x4, [x29, 128]
+	ldr	x0, [x19, 3440]
+	add	x0, x0, x23
+	bl	FlashReadPages
+	ldr	x0, [x19, 3440]
+	ldr	x4, [x29, 128]
+	add	x3, x0, x23
+	ldr	w0, [x0, x23]
+	cmn	w0, #1
+	bne	.L1057
+.L1058:
+	mov	w0, -1
+	str	w0, [x29, 148]
+.L1065:
+	ldr	w4, [x29, 148]
+	cmn	w4, #1
+	beq	.L1049
+.L1082:
+	lsr	w0, w4, 10
+	bl	P2V_block_in_plane
+	and	w24, w0, 65535
+	ldrh	w0, [x19, 44]
+	mov	w3, w24
+	cmp	w0, w24
+	bhi	.L1073
+	ldr	x1, [x29, 120]
+	mov	w2, 2065
 	adrp	x0, .LC1
+	str	w24, [x29, 128]
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-	b	.L1100
-.L1094:
-	sub	w0, w0, #1
-	strh	w0, [x1, x21]
-.L1093:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w1, 65535
-	ldrh	w0, [x19, 3714]
-	cmp	w0, w1
-	bne	.L1097
-	strh	w20, [x19, 3714]
-	b	.L1100
-.L1097:
-	cmp	w20, w0
-	beq	.L1100
-	bl	update_vpc_list
-	cmp	w0, 0
-	ldr	x1, [x19, 2360]
-	cset	w21, ne
-	ldr	x0, [x19, 2368]
-	strh	w20, [x19, 3714]
-	sub	x0, x0, x1
-	mov	x1, -6148914691236517206
-	asr	x0, x0, 1
-	movk	x1, 0xaaab, lsl 0
-	mul	x0, x0, x1
+	ldr	w3, [x29, 128]
+.L1073:
 	ldr	x1, [x19, 2376]
-	and	x2, x0, 65535
-	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L1092
-	cmp	w20, w0, uxth
-	beq	.L1092
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2811
-	add	x1, x1, 528
-	adrp	x0, .LC1
-	add	x0, x0, :lo12:.LC1
+	ubfiz	x0, x24, 1, 16
+	ldrh	w0, [x1, x0]
+	cbz	w0, .L1074
+	mov	w0, w3
+	b	.L1133
+.L1056:
+	ldp	w1, w0, [x29, 152]
+	cmp	w1, w0
+	bne	.L1049
+	mov	w2, 1
+	add	x1, x29, 148
+	mov	w0, w24
+	bl	log2phys
+.L1049:
+	add	x23, x23, 32
+	b	.L1048
+.L1057:
+	ldr	w0, [x4, 8]
+	cmp	w24, w0
+	bne	.L1058
+	ldr	w0, [x4, 4]
+	str	w0, [x29, 128]
+	str	x4, [x29, 96]
+	uxtw	x1, w0
+	ldr	w0, [x19, 3724]
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1058
+	ldp	w0, w1, [x29, 152]
+	ldr	x4, [x29, 96]
+	cmp	w0, w1
+	ldr	w1, [x29, 148]
+	bne	.L1060
+.L1130:
+	mov	w0, w24
+	bl	FtlReUsePrevPpa
+	b	.L1058
+.L1060:
+	cmp	w0, w1
+	beq	.L1058
+	cmn	w0, #1
+	beq	.L1061
+	ldr	x4, [x3, 16]
+	mov	w2, 0
+	str	w0, [x3, 4]
+	mov	w1, 1
+	str	x4, [x29, 96]
+	ldr	x0, [x19, 3440]
+	add	x0, x0, x23
+	bl	FlashReadPages
+	ldr	x4, [x29, 96]
+.L1062:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0, 3440]
+	ldr	w1, [x1, x23]
+	cmn	w1, #1
+	beq	.L1063
+	ldr	w3, [x4, 4]
+	ldr	w0, [x0, 3724]
+	mov	w1, w3
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1063
+	ldr	w0, [x29, 128]
+	mov	w1, w3
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1058
+.L1063:
+	ldr	w1, [x29, 148]
+	b	.L1130
+.L1061:
+	str	w0, [x3]
+	b	.L1062
+.L1055:
+	ldp	w1, w0, [x29, 152]
+	cmp	w1, w0
+	beq	.L1065
+	ldr	w0, [x19, 52]
+	cmp	w0, w3, lsr 10
+	bhi	.L1067
+	cmn	w3, #1
+.L1132:
+	bne	.L1049
+	mov	w2, 1
+	add	x1, x29, 156
+	mov	w0, w24
+	bl	log2phys
+	ldr	w4, [x29, 152]
+	cmn	w4, #1
+	beq	.L1065
+	ldr	w0, [x29, 148]
+	cmp	w4, w0
+	beq	.L1082
+	lsr	w0, w4, 10
+	bl	P2V_block_in_plane
+	ldrh	w1, [x19, 2424]
+	and	w0, w0, 65535
+	cmp	w1, w0
+	beq	.L1072
+	ldrh	w1, [x19, 2472]
+	cmp	w1, w0
+	beq	.L1072
+	ldrh	w1, [x19, 2520]
+	cmp	w1, w0
+	bne	.L1065
+.L1072:
+	ldr	x0, [x19, 3440]
+	mov	w2, 0
+	mov	w1, 1
+	str	w4, [x0, 4]
+	ldr	x3, [x0, 16]
+	ldr	x0, [x19, 3440]
+	str	x3, [x29, 128]
+	bl	FlashReadPages
+	ldr	x0, [x19, 3440]
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L1065
+	ldr	x3, [x29, 128]
+	mov	w0, w21
+	ldr	w1, [x3, 4]
+	bl	ftl_cmp_data_ver
+	cbnz	w0, .L1065
+	mov	w2, 1
+	add	x1, x29, 152
+	mov	w0, w24
+	bl	log2phys
+	b	.L1065
+.L1067:
+	ldr	x0, [x19, 3440]
+	mov	w2, 0
+	mov	w1, 1
+	str	w3, [x0, 4]
+	ldr	x4, [x0, 16]
+	ldr	x0, [x19, 3440]
+	str	x4, [x29, 128]
+	bl	FlashReadPages
+	ldr	x4, [x29, 128]
+	ldr	w0, [x4, 8]
+	cmp	w24, w0
+	bne	.L1049
+	ldrh	w1, [x4]
+	mov	w0, 61589
+	cmp	w1, w0
+	b	.L1132
+.L1074:
+	mov	w1, w24
+	adrp	x0, .LC100
+	add	x0, x0, :lo12:.LC100
 	bl	sftl_printk
-	b	.L1092
-	.size	decrement_vpc_count, .-decrement_vpc_count
+	b	.L1049
+.L1051:
+	ldr	w0, [x19, 3764]
+	cmp	w0, 31
+	bhi	.L1075
+	ldr	x1, [x29, 104]
+	str	w5, [x1, w0, uxtw 2]
+	add	w0, w0, 1
+	str	w0, [x19, 3764]
+.L1075:
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	ldr	w0, [x19, 3724]
+	cmn	w0, #1
+	bne	.L1076
+.L1134:
+	str	w21, [x19, 3724]
+	b	.L1049
+.L1076:
+	cmp	w21, w0
+	bcs	.L1049
+	b	.L1134
+.L1079:
+	add	w0, w0, 1
+	and	w0, w0, 65535
+	b	.L1078
+.L1050:
+	strb	w27, [x20, 6]
+	strh	w22, [x20, 2]
+	b	.L1136
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
-	.global	FtlRecoverySuperblock
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
-	stp	x29, x30, [sp, -160]!
-	mov	w1, 65535
+	.global	ftl_check_vpc
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
+	stp	x29, x30, [sp, -128]!
+	adrp	x0, .LC101
+	add	x0, x0, :lo12:.LC101
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	x20, x0
-	stp	x21, x22, [sp, 32]
+	adrp	x20, .LANCHOR0
 	stp	x23, x24, [sp, 48]
+	add	x24, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	mov	w23, 0
+	adrp	x21, .LANCHOR1
+	add	x1, x21, :lo12:.LANCHOR1
+	add	x1, x1, 544
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-	ldrh	w0, [x0]
-	cmp	w0, w1
-	beq	.L1218
-	ldrb	w0, [x20, 6]
-	adrp	x19, .LANCHOR0
-	str	w0, [x29, 140]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w26, [x20, 2]
-	ldrh	w0, [x0, 106]
-	cmp	w0, w26
-	bne	.L1104
-	strh	wzr, [x20, 4]
-.L1224:
-	strb	wzr, [x20, 6]
-.L1218:
-	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 160
-	ret
-.L1104:
-	ldrh	w0, [x20, 16]
-	mov	w21, 0
-.L1105:
-	cmp	w0, w1
-	beq	.L1106
-	mov	w1, 1
-	bl	FtlGetLastWrittenPage
-	mov	w23, w0
-	cmn	w0, #1
-	beq	.L1107
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x28, x20, 16
-	mov	x5, x28
-	mov	w22, 0
-	mov	w10, 65535
-	mov	w6, 4
-	ldrh	w1, [x0, 36]
-	ldrh	w8, [x0, 114]
-	add	x1, x1, 8
-	ldrh	w9, [x0, 116]
-	add	x1, x20, x1, lsl 1
-.L1108:
-	cmp	x5, x1
-	bne	.L1112
-	add	x24, x19, :lo12:.LANCHOR0
-	mov	w2, 0
-	mov	w1, w22
-	ldr	x0, [x24, 3440]
-	bl	FlashReadPages
-	ldr	w21, [x24, 2624]
-	ldr	x4, [x24, 3440]
-	and	w9, w23, 65535
-	sub	w21, w21, #1
-	mov	w7, 65535
-	mov	x6, x4
-	mov	w3, 0
-.L1113:
-	cmp	w22, w3
-	bne	.L1118
-	add	w22, w23, 1
-	ldr	w0, [x4, 4]
-	and	w22, w22, 65535
-.L1220:
-	lsr	w0, w0, 10
-	bl	P2V_plane
-	and	w27, w0, 65535
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 106]
-	cmp	w0, w22
-	bne	.L1120
-	strh	w22, [x20, 2]
-	strb	wzr, [x20, 6]
-	strh	wzr, [x20, 4]
-.L1120:
-	ldr	w0, [x29, 140]
-	cmp	w22, w26
-	ccmp	w27, w0, 0, eq
-	bne	.L1121
-.L1225:
-	mov	w2, w27
-	mov	w1, w22
-	mov	x0, x20
-	bl	ftl_sb_update_avl_pages
-	b	.L1218
-.L1106:
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	add	x0, x20, x21, sxtw 1
-	ldrh	w0, [x0, 16]
-	b	.L1105
-.L1107:
-	cbz	w26, .L1109
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1766
-	add	x1, x1, 552
-	add	x0, x0, :lo12:.LC1
+	adrp	x22, check_vpc_table
 	bl	sftl_printk
-.L1109:
-	ldr	w0, [x29, 140]
-	cmp	w0, 0
-	ccmp	w21, w0, 4, ne
-	beq	.L1110
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
+	add	x19, x22, :lo12:check_vpc_table
+	mov	w2, 8192
+	mov	w1, 0
+	mov	x0, x19
+	bl	ftl_memset
+.L1138:
+	ldr	w0, [x24, 2584]
+	cmp	w23, w0
+	bcc	.L1140
+	adrp	x25, .LC102
+	add	x23, x20, :lo12:.LANCHOR0
+	add	x26, x22, :lo12:check_vpc_table
+	add	x25, x25, :lo12:.LC102
+	mov	w24, 0
+	mov	w19, 0
+	mov	w4, 65535
+.L1141:
+	ldrh	w0, [x23, 44]
+	cmp	w0, w19
+	bhi	.L1143
+	ldr	x19, [x23, 2408]
+	cbz	x19, .L1144
+	ldr	x0, [x23, 2360]
+	adrp	x25, .LC103
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:check_vpc_table
+	sub	x19, x19, x0
+	mov	x0, -6148914691236517206
+	asr	x19, x19, 1
+	movk	x0, 0xaaab, lsl 0
+	add	x25, x25, :lo12:.LC103
+	ldrh	w26, [x23, 2416]
+	mov	w27, 6
+	mov	w23, 0
+	mul	x19, x19, x0
+	and	w19, w19, 65535
+.L1145:
+	cmp	w23, w26
+	bne	.L1147
+.L1144:
+	cbz	w24, .L1137
+	add	x1, x21, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 1767
-	add	x1, x1, 552
+	mov	w2, 2389
+	add	x1, x1, 544
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1110:
-	strh	wzr, [x20, 2]
-	b	.L1224
-.L1112:
-	ldrh	w2, [x5]
-	cmp	w2, w10
-	beq	.L1111
-	ldr	x4, [x0, 3440]
-	ubfiz	x7, x22, 5, 16
-	orr	w2, w23, w2, lsl 10
-	add	x4, x4, x7
-	str	w2, [x4, 4]
-	mul	w2, w22, w8
-	ldr	x3, [x0, 3440]
-	ldr	x4, [x0, 3264]
-	sdiv	w2, w2, w6
-	add	x3, x3, x7
-	add	x2, x4, x2, sxtw 2
-	str	x2, [x3, 8]
-	mul	w2, w22, w9
-	ldr	x4, [x0, 3272]
-	add	w22, w22, 1
-	and	w22, w22, 65535
-	sdiv	w2, w2, w6
-	add	x2, x4, x2, sxtw 2
-	str	x2, [x3, 16]
-.L1111:
-	add	x5, x5, 2
-	b	.L1108
-.L1118:
-	ldr	w0, [x6]
-	cbnz	w0, .L1114
-	ldr	x8, [x6, 16]
-	ldr	w5, [x8, 4]
-	cmn	w5, #1
-	beq	.L1115
-	ldr	w1, [x24, 2624]
-	mov	w0, w5
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1115
-	add	w5, w5, 1
-	str	w5, [x24, 2624]
-.L1115:
-	ldr	w0, [x8]
-	cmn	w0, #1
-	bne	.L1117
-	ubfiz	x3, x3, 5, 16
-	and	w22, w23, 65535
-	add	x3, x4, x3
-	ldr	w0, [x3, 4]
-	b	.L1220
-.L1114:
-	mov	w7, w9
-.L1117:
-	add	w3, w3, 1
-	add	x6, x6, 32
-	and	w3, w3, 65535
-	b	.L1113
-.L1121:
-	mov	w0, 65535
-	cmp	w7, w0
-	bne	.L1122
-	ldrb	w0, [x20, 8]
-	cbnz	w0, .L1123
-.L1122:
-	add	x0, x19, :lo12:.LANCHOR0
-	and	w3, w23, 65535
-	ldr	w1, [x0, 3724]
-	cmn	w1, #1
-	bne	.L1124
-	str	w21, [x0, 3724]
-.L1124:
-	add	w0, w26, 7
-	cmp	w0, w23, uxth
-	bge	.L1171
-	sub	w24, w3, #7
-	and	w24, w24, 65535
-.L1125:
-	add	x25, x19, :lo12:.LANCHOR0
-	mov	w4, 65535
-.L1126:
-	cmp	w24, w3
-	bhi	.L1133
-	ldrh	w0, [x25, 36]
-	mov	x1, x28
-	mov	w23, 0
-	add	x0, x0, 8
-	add	x0, x20, x0, lsl 1
-	b	.L1134
-.L1171:
-	mov	w24, w26
-	b	.L1125
-.L1128:
-	ldrh	w2, [x1]
-	cmp	w2, w4
-	beq	.L1127
-	ldr	x5, [x25, 3440]
-	ubfiz	x6, x23, 5, 16
-	add	w23, w23, 1
-	orr	w2, w24, w2, lsl 10
-	add	x5, x5, x6
-	and	w23, w23, 65535
-	str	w2, [x5, 4]
-.L1127:
-	add	x1, x1, 2
-.L1134:
-	cmp	x0, x1
-	bne	.L1128
-	ldr	x0, [x25, 3440]
-	mov	w1, w23
-	str	w4, [x29, 120]
-	mov	w2, 0
-	str	w3, [x29, 128]
-	ubfiz	x23, x23, 5, 16
-	add	x23, x23, 16
-	bl	FlashReadPages
-	ldr	x1, [x25, 3440]
-	ldr	w4, [x29, 120]
-	ldr	w3, [x29, 128]
-	add	x0, x1, 16
-	add	x23, x1, x23
-.L1129:
-	cmp	x23, x0
-	bne	.L1132
-	add	w24, w24, 1
-	and	w24, w24, 65535
-	b	.L1126
-.L1132:
-	ldr	w1, [x0, -16]
-	cbnz	w1, .L1123
-	ldr	x1, [x0]
-	ldrh	w2, [x1]
-	cmp	w2, w4
-	beq	.L1131
-	ldr	w1, [x1, 4]
-	cmn	w1, #1
-	beq	.L1131
-	str	w1, [x25, 3724]
-.L1131:
-	add	x0, x0, 32
-	b	.L1129
-.L1133:
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, -1
-	str	w1, [x0, 3724]
-.L1123:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 1
-	mov	w24, w26
-	strh	w0, [x19, 3832]
-	add	x0, x19, 3840
-	str	x0, [x29, 104]
-.L1135:
-	ldrh	w0, [x19, 36]
-	mov	x1, x28
-	mov	w23, 0
-	mov	w4, 65535
-	add	x0, x0, 8
-	add	x0, x20, x0, lsl 1
-.L1136:
-	cmp	x0, x1
-	bne	.L1138
-	ldr	x0, [x19, 3440]
-	mov	w1, w23
+.L1137:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 128
+	ret
+.L1140:
 	mov	w2, 0
-	bl	FlashReadPages
-	ubfiz	x0, x23, 5, 16
-	str	x0, [x29, 112]
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	add	x0, x0, 552
-	mov	x23, 0
-	str	x0, [x29, 120]
+	add	x1, x29, 124
+	mov	w0, w23
+	bl	log2phys
+	ldr	w0, [x29, 124]
+	cmn	w0, #1
+	beq	.L1139
+	lsr	w0, w0, 10
+	bl	P2V_block_in_plane
+	and	x0, x0, 65535
+	ldrh	w1, [x19, x0, lsl 1]
+	add	w1, w1, 1
+	strh	w1, [x19, x0, lsl 1]
 .L1139:
-	ldr	x0, [x29, 112]
-	cmp	x0, x23
-	bne	.L1165
-	add	w24, w24, 1
-	ldrh	w0, [x19, 106]
-	and	w24, w24, 65535
-	cmp	w0, w24
-	bne	.L1135
-	ldrh	w1, [x19, 36]
-	mov	w0, 0
-	strh	w24, [x20, 2]
-	mov	w2, 65535
-	strh	wzr, [x20, 4]
-.L1166:
-	cmp	w0, w1
-	beq	.L1218
-	ldrh	w3, [x28], 2
-	cmp	w3, w2
-	beq	.L1167
-	strb	w0, [x20, 6]
-	b	.L1218
-.L1138:
-	ldrh	w2, [x1]
-	cmp	w2, w4
-	beq	.L1137
-	ldr	x3, [x19, 3440]
-	ubfiz	x5, x23, 5, 16
 	add	w23, w23, 1
-	orr	w2, w24, w2, lsl 10
-	add	x3, x3, x5
-	and	w23, w23, 65535
-	str	w2, [x3, 4]
-.L1137:
-	add	x1, x1, 2
-	b	.L1136
-.L1165:
-	ldr	x4, [x19, 3440]
-	add	x4, x4, x23
-	ldr	w5, [x4, 4]
-	str	w5, [x29, 156]
-	lsr	w0, w5, 10
-	bl	P2V_plane
-	and	w0, w0, 65535
-	cmp	w24, w26
-	bcc	.L1140
-	ldr	w1, [x29, 140]
-	ccmp	w1, w0, 0, eq
-	bhi	.L1140
-	cmp	w24, w22
-	ccmp	w27, w0, 0, eq
-	beq	.L1141
-	ldr	w0, [x4]
-	cmn	w0, #1
+	b	.L1138
+.L1143:
+	ldr	x0, [x23, 2376]
+	ubfiz	x28, x19, 1, 16
+	sxtw	x27, w19
+	ldrh	w2, [x0, x28]
+	ldrh	w3, [x26, x27, lsl 1]
+	cmp	w2, w3
 	beq	.L1142
-	ldr	x3, [x4, 16]
-	mov	w0, 61589
-	ldrh	w1, [x3]
+	mov	x0, x25
+	str	w4, [x29, 108]
+	mov	w1, w19
+	bl	sftl_printk
+	ldr	x0, [x23, 2376]
+	ldr	w4, [x29, 108]
+	ldrh	w0, [x0, x28]
+	cmp	w0, w4
+	beq	.L1142
+	ldrh	w1, [x26, x27, lsl 1]
 	cmp	w1, w0
-	beq	.L1143
-	ldrh	w0, [x20]
-.L1222:
-	bl	decrement_vpc_count
-	b	.L1140
-.L1143:
-	ldr	w21, [x3, 4]
-	cmn	w21, #1
+	csinc	w24, w24, wzr, ls
+.L1142:
+	add	w19, w19, 1
+	and	w19, w19, 65535
+	b	.L1141
+.L1147:
+	ldr	x1, [x20, 2376]
+	ubfiz	x0, x19, 1, 16
+	ldrh	w2, [x1, x0]
+	cbz	w2, .L1146
+	ldrh	w3, [x22, w19, sxtw 1]
+	mov	w24, 1
+	mov	w1, w19
+	mov	x0, x25
+	bl	sftl_printk
+.L1146:
+	ldr	x0, [x20, 2360]
+	umull	x19, w19, w27
+	ldrh	w19, [x0, x19]
+	mov	w0, 65535
+	cmp	w19, w0
 	beq	.L1144
-	ldr	w1, [x19, 2624]
-	mov	w0, w21
-	str	x3, [x29, 128]
-	bl	ftl_cmp_data_ver
-	ldr	x3, [x29, 128]
-	cbz	w0, .L1144
-	add	w0, w21, 1
-	str	w0, [x19, 2624]
-.L1144:
-	ldrh	w1, [x3]
-	mov	w0, 61589
-	cmp	w1, w0
-	beq	.L1145
-	ldr	x1, [x29, 120]
-	mov	w2, 1918
-	str	x3, [x29, 128]
-	adrp	x0, .LC1
-	add	x0, x0, :lo12:.LC1
+	add	w23, w23, 1
+	and	w23, w23, 65535
+	b	.L1145
+	.size	ftl_check_vpc, .-ftl_check_vpc
+	.align	2
+	.global	ftl_scan_all_data
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	sub	sp, sp, #96
+	adrp	x0, .LC104
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC104
+	stp	x29, x30, [sp, 16]
+	add	x29, sp, 16
+	stp	x21, x22, [sp, 48]
+	adrp	x22, .LANCHOR0
+	add	x21, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp, 32]
+	str	x23, [sp, 64]
+	mov	w20, 0
+	add	x19, x21, 3728
 	bl	sftl_printk
-	ldr	x3, [x29, 128]
-.L1145:
-	ldp	w25, w0, [x3, 8]
-	add	x1, x29, 152
-	str	w0, [x29, 148]
+.L1163:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w0, [x0, 2584]
+	cmp	w20, w0
+	bcc	.L1169
+	ldp	x19, x20, [sp, 32]
+	ldp	x21, x22, [sp, 48]
+	ldp	x29, x30, [sp, 16]
+	ldr	x23, [sp, 64]
+	add	sp, sp, 96
+	ret
+.L1169:
 	mov	w2, 0
-	mov	w0, w25
+	add	x1, x29, 76
+	mov	w0, w20
 	bl	log2phys
-	ldr	w1, [x19, 3724]
-	cmn	w1, #1
-	beq	.L1146
-	mov	w0, w21
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1146
-	ldr	w1, [x29, 148]
-	cmn	w1, #1
-	beq	.L1147
-	ldr	x0, [x19, 3440]
+	tst	x20, 2047
+	bne	.L1164
+	ldr	w2, [x29, 76]
+	adrp	x0, .LC105
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC105
+	bl	sftl_printk
+.L1164:
+	ldr	w0, [x29, 76]
+	cmn	w0, #1
+	beq	.L1166
+	ldr	x23, [x21, 3528]
 	mov	w2, 0
-	add	x0, x0, x23
-	ldr	x4, [x0, 16]
-	str	w1, [x0, 4]
+	stp	wzr, w0, [x19]
 	mov	w1, 1
-	str	x4, [x29, 128]
-	ldr	x0, [x19, 3440]
-	add	x0, x0, x23
+	ldr	x0, [x21, 3464]
+	str	x0, [x19, 8]
+	mov	x0, x19
+	str	x23, [x19, 16]
+	str	w20, [x19, 24]
+	bl	FlashReadPages
+	ldr	w0, [x19]
+	cmp	w0, 256
+	ccmn	w0, #1, 4, ne
+	beq	.L1167
+	ldr	w0, [x23, 8]
+	cmp	w20, w0
+	beq	.L1166
+.L1167:
+	ldp	x1, x0, [x19, 8]
+	ldr	w2, [x1, 4]
+	str	w2, [sp]
+	ldp	w3, w4, [x0]
+	ldp	w5, w6, [x0, 8]
+	adrp	x0, .LC106
+	ldr	w7, [x1]
+	add	x0, x0, :lo12:.LC106
+	ldr	w2, [x19, 4]
+	mov	w1, w20
+	bl	sftl_printk
+.L1166:
+	add	w20, w20, 1
+	b	.L1163
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.align	2
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	stp	x23, x24, [sp, 48]
+	adrp	x23, .LANCHOR2
+	add	x0, x23, :lo12:.LANCHOR2
+	stp	x25, x26, [sp, 64]
+	stp	x21, x22, [sp, 32]
+	mov	w25, w1
+	stp	x27, x28, [sp, 80]
+	ldrh	w21, [x0, 4]
+	mov	w0, 65535
+	cmp	w21, w0
+	beq	.L1195
+	cbnz	w21, .L1172
+.L1173:
+	bl	FtlGcPageVarInit
+	b	.L1174
+.L1195:
+	mov	w21, 0
+.L1172:
+	adrp	x0, .LANCHOR0+106
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+106]
+	cmp	w0, w25
+	beq	.L1173
+.L1174:
+	adrp	x26, .LANCHOR0
+	add	x20, x26, :lo12:.LANCHOR0
+	mov	w24, 0
+.L1175:
+	ldrh	w1, [x19]
+	mov	w0, 65535
+	strb	wzr, [x19, 8]
+	cmp	w1, w0
+	beq	.L1176
+.L1192:
+	add	x0, x26, :lo12:.LANCHOR0
+	add	x2, x19, 16
+	mov	w22, 0
+	mov	w9, 65535
+	mov	w5, 4
+	ldrh	w7, [x0, 114]
+	ldrh	w8, [x0, 116]
+	ldrh	w0, [x0, 36]
+	add	x0, x0, 8
+	add	x0, x19, x0, lsl 1
+.L1177:
+	cmp	x0, x2
+	bne	.L1179
+	ldr	x0, [x20, 3440]
+	mov	w1, w22
+	mov	w2, 0
+	ubfiz	x22, x22, 5, 16
+	mov	x27, 0
 	bl	FlashReadPages
-	ldr	x0, [x19, 3440]
-	ldr	x4, [x29, 128]
-	add	x3, x0, x23
-	ldr	w0, [x0, x23]
-	cmn	w0, #1
-	bne	.L1148
-.L1149:
+.L1180:
+	cmp	x22, x27
+	bne	.L1190
+	add	w21, w21, 1
+	add	w24, w24, 1
+	and	w21, w21, 65535
+	cmp	w25, w24
+	bls	.L1191
+.L1193:
+	ldrh	w0, [x20, 106]
+	cmp	w0, w21
+	bhi	.L1192
+.L1176:
+	add	x23, x23, :lo12:.LANCHOR2
+	strh	w21, [x19, 2]
+	strb	wzr, [x19, 6]
 	mov	w0, -1
-	str	w0, [x29, 148]
-.L1156:
-	ldr	w4, [x29, 148]
-	cmn	w4, #1
-	beq	.L1140
-.L1170:
-	lsr	w0, w4, 10
-	bl	P2V_block_in_plane
-	and	w25, w0, 65535
-	ldrh	w0, [x19, 44]
-	mov	w3, w25
-	cmp	w0, w25
-	bhi	.L1161
-	ldr	x1, [x29, 120]
-	mov	w2, 2019
-	adrp	x0, .LC1
-	str	w25, [x29, 128]
-	add	x0, x0, :lo12:.LC1
-	bl	sftl_printk
-	ldr	w3, [x29, 128]
-.L1161:
-	ldr	x1, [x19, 2376]
-	ubfiz	x0, x25, 1, 16
-	ldrh	w0, [x1, x0]
-	cbz	w0, .L1162
-	mov	w0, w3
-	b	.L1222
-.L1147:
-	ldp	w1, w0, [x29, 152]
-	cmp	w1, w0
-	bne	.L1140
-	mov	w2, 1
-	add	x1, x29, 148
-	mov	w0, w25
-	bl	log2phys
-.L1140:
-	add	x23, x23, 32
-	b	.L1139
-.L1148:
-	ldr	w0, [x4, 8]
-	cmp	w25, w0
-	bne	.L1149
-	ldr	w0, [x4, 4]
-	str	w0, [x29, 128]
-	str	x4, [x29, 96]
-	uxtw	x1, w0
-	ldr	w0, [x19, 3724]
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1149
-	ldp	w0, w1, [x29, 152]
-	ldr	x4, [x29, 96]
+	mov	w2, 0
+	mov	w1, w21
+	strh	w0, [x23, 4]
+	mov	x0, x19
+	bl	ftl_sb_update_avl_pages
+	b	.L1194
+.L1179:
+	ldrh	w1, [x2]
+	cmp	w1, w9
+	beq	.L1178
+	ldr	x4, [x20, 3440]
+	ubfiz	x6, x22, 5, 16
+	orr	w1, w21, w1, lsl 10
+	add	x4, x4, x6
+	str	w1, [x4, 4]
+	mul	w1, w22, w7
+	ldr	x3, [x20, 3440]
+	ldr	x4, [x20, 3264]
+	sdiv	w1, w1, w5
+	add	x3, x3, x6
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x3, 8]
+	mul	w1, w22, w8
+	ldr	x4, [x20, 3272]
+	add	w22, w22, 1
+	and	w22, w22, 65535
+	sdiv	w1, w1, w5
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x3, 16]
+.L1178:
+	add	x2, x2, 2
+	b	.L1177
+.L1190:
+	ldr	x1, [x20, 3440]
+	add	x0, x1, x27
+	ldr	w1, [x1, x27]
+	ldr	w2, [x0, 4]
+	str	w2, [x29, 108]
+	cbnz	w1, .L1181
+	ldr	x28, [x0, 16]
+	mov	w1, 65535
+	ldrh	w0, [x28]
 	cmp	w0, w1
-	ldr	w1, [x29, 148]
-	bne	.L1151
-.L1221:
-	mov	w0, w25
-	bl	FtlReUsePrevPpa
-	b	.L1149
-.L1151:
+	bne	.L1182
+.L1181:
+	ldrh	w1, [x19]
+	mov	w21, 0
+	ldr	x0, [x20, 2376]
+	strh	wzr, [x0, x1, lsl 1]
+	ldrh	w0, [x19]
+	bl	INSERT_FREE_LIST
+	mov	w0, -1
+	strh	w0, [x19]
+	bl	FtlGcPageVarInit
+	b	.L1175
+.L1182:
+	ldr	w1, [x20, 2584]
+	ldr	w0, [x28, 8]
 	cmp	w0, w1
-	beq	.L1149
-	cmn	w0, #1
-	beq	.L1152
-	ldr	x4, [x3, 16]
+	bhi	.L1181
+	add	x1, x29, 124
 	mov	w2, 0
-	str	w0, [x3, 4]
-	mov	w1, 1
-	str	x4, [x29, 96]
-	ldr	x0, [x19, 3440]
-	add	x0, x0, x23
-	bl	FlashReadPages
-	ldr	x4, [x29, 96]
-.L1153:
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	ldr	x1, [x0, 3440]
-	ldr	w1, [x1, x23]
-	cmn	w1, #1
-	beq	.L1154
-	ldr	w3, [x4, 4]
-	ldr	w0, [x0, 3724]
-	mov	w1, w3
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1154
-	ldr	w0, [x29, 128]
-	mov	w1, w3
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1149
-.L1154:
-	ldr	w1, [x29, 148]
-	b	.L1221
-.L1152:
-	str	w0, [x3]
-	b	.L1153
-.L1146:
-	ldp	w1, w0, [x29, 152]
-	cmp	w1, w0
-	beq	.L1156
-	mov	w2, 1
-	add	x1, x29, 156
-	mov	w0, w25
 	bl	log2phys
-	ldr	w4, [x29, 152]
-	cmn	w4, #1
-	beq	.L1156
-	ldr	w0, [x29, 148]
-	cmp	w4, w0
-	beq	.L1170
-	lsr	w0, w4, 10
-	bl	P2V_block_in_plane
-	ldrh	w1, [x19, 2424]
-	and	w0, w0, 65535
-	cmp	w1, w0
-	beq	.L1160
-	ldrh	w1, [x19, 2472]
-	cmp	w1, w0
-	beq	.L1160
-	ldrh	w1, [x19, 2520]
-	cmp	w1, w0
-	bne	.L1156
-.L1160:
-	ldr	x0, [x19, 3440]
+	ldr	w0, [x28, 12]
+	ldr	w1, [x29, 124]
+	cmp	w0, w1
+	beq	.L1185
+.L1186:
+	ldp	w2, w0, [x28, 8]
+	add	x27, x27, 32
+	ldr	w1, [x29, 108]
+	bl	FtlGcUpdatePage
+	b	.L1180
+.L1185:
+	cmn	w0, #1
+	beq	.L1186
+	str	w0, [x29, 132]
 	mov	w2, 0
+	ldr	x0, [x20, 3496]
 	mov	w1, 1
-	str	w4, [x0, 4]
-	ldr	x3, [x0, 16]
-	ldr	x0, [x19, 3440]
-	str	x3, [x29, 128]
+	str	x0, [x29, 136]
+	ldr	x0, [x20, 3536]
+	str	x0, [x29, 144]
+	add	x0, x29, 128
 	bl	FlashReadPages
-	ldr	x0, [x19, 3440]
-	ldr	w0, [x0]
-	cmn	w0, #1
-	beq	.L1156
-	ldr	x3, [x29, 128]
-	mov	w0, w21
-	ldr	w1, [x3, 4]
-	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1156
-	mov	w2, 1
-	add	x1, x29, 152
-	mov	w0, w25
-	bl	log2phys
-	b	.L1156
-.L1162:
-	mov	w1, w25
+	ldrh	w1, [x20, 62]
+	mov	x0, 0
+	ldr	x2, [x20, 3440]
+	ldr	x5, [x29, 136]
+	ubfiz	x1, x1, 9, 16
+	add	x2, x2, x27
+.L1187:
+	cmp	x0, x1
+	beq	.L1186
+	ldr	x6, [x2, 8]
+	ldr	w7, [x6, x0]
+	add	x0, x0, 4
+	add	x6, x5, x0
+	ldr	w6, [x6, -4]
+	cmp	w7, w6
+	beq	.L1187
+	ldrh	w1, [x19]
 	adrp	x0, .LC107
+	ldr	w2, [x29, 132]
 	add	x0, x0, :lo12:.LC107
 	bl	sftl_printk
-	b	.L1140
-.L1142:
-	ldr	w0, [x19, 3836]
-	cmp	w0, 31
-	bhi	.L1163
-	ldr	x1, [x29, 104]
-	str	w5, [x1, w0, uxtw 2]
-	add	w0, w0, 1
-	str	w0, [x19, 3836]
-.L1163:
-	ldrh	w0, [x20]
-	bl	decrement_vpc_count
-	ldr	w0, [x19, 3724]
-	cmn	w0, #1
-	bne	.L1164
-.L1223:
-	str	w21, [x19, 3724]
-	b	.L1140
-.L1164:
-	cmp	w21, w0
-	bcs	.L1140
-	b	.L1223
-.L1167:
-	add	w0, w0, 1
-	and	w0, w0, 65535
-	b	.L1166
-.L1141:
-	strb	w27, [x20, 6]
-	strh	w22, [x20, 2]
-	b	.L1225
-	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	b	.L1181
+.L1191:
+	add	x1, x23, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w0, [x1, 4]
+	cmp	w0, w2
+	beq	.L1193
+	add	w0, w0, w24
+	strh	w0, [x1, 4]
+	ldrh	w0, [x20, 106]
+	cmp	w0, w21
+	bls	.L1193
+.L1194:
+	ldp	x19, x20, [sp, 16]
+	mov	w0, -1
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	2
-	.global	FtlWriteDump_data
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
-	stp	x29, x30, [sp, -128]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	stp	x23, x24, [sp, 48]
-	str	x25, [sp, 64]
-	ldrh	w2, [x20, 2428]
-	cbz	w2, .L1227
-	ldrb	w1, [x20, 2432]
-	cbnz	w1, .L1227
-	ldrb	w1, [x20, 2431]
-	ldrh	w3, [x20, 106]
-	mul	w1, w1, w3
-	cmp	w2, w1
-	beq	.L1227
-	ldrb	w0, [x20, 2434]
-	cbnz	w0, .L1226
-	ldr	w22, [x20, 2584]
-	add	x1, x29, 92
-	ldrh	w24, [x20, 36]
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	adrp	x1, .LANCHOR0
+	add	x0, x1, :lo12:.LANCHOR0
+	add	x2, x0, 2720
+	ldr	w3, [x2, 80]
+	cbz	w3, .L1206
+	ldr	w1, [x0, 2584]
+	ldr	w3, [x2, 84]
+	cmp	w3, w1
+	bcs	.L1207
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	mov	w20, 2048
+	str	x21, [sp, 32]
+.L1212:
+	ldr	w1, [x19, 2584]
+	ldr	w0, [x19, 2804]
+	cmp	w0, w1
+	bcs	.L1209
+	add	x1, x29, 60
 	mov	w2, 0
-	sub	w22, w22, #1
-	mov	w0, w22
 	bl	log2phys
-	ldr	x21, [x20, 3528]
-	ldr	w0, [x29, 92]
-	ldr	x1, [x20, 3464]
-	str	w0, [x29, 100]
-	cmn	w0, #1
-	stp	x1, x21, [x29, 104]
-	str	w22, [x29, 120]
-	str	wzr, [x21, 4]
-	beq	.L1229
+	ldr	w0, [x19, 2804]
+	ldr	w1, [x29, 60]
+	add	w0, w0, 1
+	str	w0, [x19, 2804]
+	cmn	w1, #1
+	beq	.L1210
+	str	w0, [x29, 88]
 	mov	w2, 0
-	mov	w1, 1
+	ldr	x0, [x19, 3512]
+	str	x0, [x29, 72]
 	add	x0, x29, 96
+	str	x0, [x29, 80]
+	add	x0, x29, 160
+	str	w1, [x29, 68]
+	mov	w1, 1
+	str	wzr, [x0, -96]!
 	bl	FlashReadPages
-.L1230:
-	add	x25, x19, :lo12:.LANCHOR0
-	lsl	w24, w24, 2
-	add	x20, x25, 2424
-	mov	w0, -3947
-	mov	w23, 0
-	strh	w0, [x21]
-.L1231:
-	cmp	w24, w23
-	bne	.L1235
-.L1232:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 1
-	strb	w0, [x19, 2434]
-.L1226:
+	ldr	w0, [x29, 64]
+	cmp	w0, 256
+	bne	.L1209
+	ldr	w0, [x29, 60]
+	lsr	w0, w0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1209:
 	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
-	ldp	x29, x30, [sp], 128
+	mov	w0, -1
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 160
 	ret
-.L1229:
-	ldrh	w2, [x20, 114]
-	mov	w1, 255
-	ldr	x0, [x20, 3464]
-	bl	ftl_memset
-	b	.L1230
-.L1235:
-	ldrh	w0, [x20, 4]
-	cbz	w0, .L1232
-	ldr	w0, [x29, 100]
-	add	w23, w23, 1
-	stp	w22, w0, [x21, 8]
-	ldrh	w0, [x20]
-	strh	w0, [x21, 2]
-	mov	x0, x20
-	bl	get_new_active_ppa
-	str	w0, [x29, 100]
-	ldr	w0, [x25, 2624]
-	mov	w3, 0
-	str	w0, [x21, 4]
-	mov	w2, 0
-	add	w0, w0, 1
+.L1210:
+	subs	w20, w20, #1
+	bne	.L1212
+	b	.L1209
+.L1207:
+	ldr	w0, [x0, 2588]
+	stp	w0, wzr, [x2, 76]
+	str	wzr, [x2, 84]
+.L1216:
+	mov	w0, 0
+	ret
+.L1206:
+	ldr	w3, [x0, 2588]
+	ldr	w5, [x2, 76]
+	add	w2, w3, 1048576
+	cmp	w5, w2
+	bhi	.L1215
+	ldr	w2, [x0, 2644]
+	lsr	w4, w2, 10
+	mov	w2, 33554432
+	asr	w2, w2, w4
+	add	w2, w2, w5
+	cmp	w3, w2
+	bhi	.L1215
+	ldrb	w0, [x0, 2340]
+	cbnz	w0, .L1216
+.L1215:
+	add	x0, x1, :lo12:.LANCHOR0
 	mov	w1, 1
-	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x25, 2624]
-	add	x0, x29, 96
-	bl	FlashProgPages
-	ldrh	w0, [x20]
-	bl	decrement_vpc_count
-	b	.L1231
-.L1227:
-	add	x19, x19, :lo12:.LANCHOR0
-	strb	wzr, [x19, 2434]
-	b	.L1226
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
+	str	w3, [x0, 2796]
+	str	w1, [x0, 2800]
+	str	wzr, [x0, 2804]
+	b	.L1216
+	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
 	.global	l2p_flush
 	.type	l2p_flush, %function
@@ -8415,107 +8232,28 @@ l2p_flush:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
 	bl	FtlWriteDump_data
-.L1245:
+.L1223:
 	ldrh	w0, [x20, 142]
 	cmp	w0, w19
-	bhi	.L1247
+	bhi	.L1225
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1247:
+.L1225:
 	ldr	x1, [x20, 2568]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1246
+	tbz	w0, #31, .L1224
 	mov	w0, w19
 	bl	flush_l2p_region
-.L1246:
+.L1224:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1245
+	b	.L1223
 	.size	l2p_flush, .-l2p_flush
 	.align	2
-	.global	FtlSuperblockPowerLostFix
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
-	stp	x29, x30, [sp, -96]!
-	mov	w2, 61589
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	mov	w0, -1
-	stp	x21, x22, [sp, 32]
-	str	w0, [x29, 88]
-	adrp	x21, .LANCHOR0
-	add	x0, x21, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	mov	x20, x0
-	ldr	x23, [x0, 3528]
-	ldr	x1, [x0, 3464]
-	stp	x1, x23, [x29, 72]
-	mov	w1, -3
-	str	w1, [x23, 8]
-	mov	w1, -2
-	str	w1, [x23, 12]
-	ldrh	w1, [x19]
-	strh	w1, [x23, 2]
-	strh	wzr, [x23]
-	ldr	x1, [x0, 3464]
-	str	w2, [x1]
-	mov	w2, 22136
-	movk	w2, 0x1234, lsl 16
-	ldr	x1, [x0, 3464]
-	str	w2, [x1, 4]
-	ldrh	w22, [x19, 4]
-	and	w22, w22, 1
-	add	w22, w22, 6
-.L1255:
-	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1251
-.L1252:
-	add	x21, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19]
-	ldrh	w3, [x19, 4]
-	ldr	x2, [x21, 2376]
-	lsl	x0, x0, 1
-	ldrh	w1, [x2, x0]
-	sub	w1, w1, w3
-	strh	w1, [x2, x0]
-	strb	wzr, [x19, 6]
-	ldrh	w0, [x21, 106]
-	strh	w0, [x19, 2]
-	strh	wzr, [x19, 4]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 96
-	ret
-.L1251:
-	mov	x0, x19
-	bl	get_new_active_ppa
-	str	w0, [x29, 68]
-	cmn	w0, #1
-	beq	.L1252
-	ldr	w0, [x20, 2624]
-	mov	w3, 0
-	str	w0, [x23, 4]
-	mov	w2, 0
-	add	w0, w0, 1
-	mov	w1, 1
-	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x20, 2624]
-	add	x0, x29, 64
-	bl	FlashProgPages
-	ldrh	w0, [x19]
-	bl	decrement_vpc_count
-	subs	w22, w22, #1
-	bne	.L1255
-	b	.L1252
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
-	.align	2
 	.global	FtlVendorPartWrite
 	.type	FtlVendorPartWrite, %function
 FtlVendorPartWrite:
@@ -8533,16 +8271,16 @@ FtlVendorPartWrite:
 	ldrh	w0, [x19, 100]
 	stp	x25, x26, [sp, 64]
 	cmp	w1, w0
-	bhi	.L1271
+	bhi	.L1235
 	ldrh	w23, [x19, 112]
 	mov	x25, x2
 	add	x26, x29, 144
-	add	x27, x19, 3768
+	add	x27, x19, 3896
 	mov	w24, 0
 	lsr	w23, w28, w23
-.L1265:
-	cbnz	w22, .L1270
-.L1263:
+.L1229:
+	cbnz	w22, .L1234
+.L1227:
 	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8551,7 +8289,7 @@ FtlVendorPartWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1270:
+.L1234:
 	ldrh	w1, [x19, 62]
 	ldr	x0, [x19, 3608]
 	udiv	w21, w28, w1
@@ -8562,9 +8300,9 @@ FtlVendorPartWrite:
 	and	w20, w20, 65535
 	cmp	w22, w20
 	csel	w20, w0, w20, cc
-	cbz	w2, .L1267
+	cbz	w2, .L1231
 	cmp	w20, w1
-	beq	.L1267
+	beq	.L1231
 	ldr	x0, [x19, 3480]
 	str	w2, [x29, 116]
 	mov	w2, 1
@@ -8572,7 +8310,7 @@ FtlVendorPartWrite:
 	mov	w1, w2
 	add	x0, x29, 112
 	bl	FlashReadPages
-.L1268:
+.L1232:
 	lsl	w3, w20, 9
 	ldr	x0, [x19, 3480]
 	lsl	w21, w21, 9
@@ -8593,16 +8331,16 @@ FtlVendorPartWrite:
 	ldr	w3, [x29, 108]
 	csinv	w24, w24, wzr, ne
 	add	x25, x25, x3, sxtw
-	b	.L1265
-.L1267:
+	b	.L1229
+.L1231:
 	ldrh	w2, [x19, 114]
 	mov	w1, 0
 	ldr	x0, [x19, 3480]
 	bl	ftl_memset
-	b	.L1268
-.L1271:
+	b	.L1232
+.L1235:
 	mov	w24, -1
-	b	.L1263
+	b	.L1227
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8614,7 +8352,7 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1279
+	bne	.L1243
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
 	mov	w1, 72
@@ -8649,7 +8387,7 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1279:
+.L1243:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -8658,22 +8396,22 @@ Ftl_save_ext_data:
 FtlEctTblFlush:
 	adrp	x1, .LANCHOR0
 	add	x3, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x3, 3968]
+	ldrh	w2, [x3, 3960]
 	cmp	w2, 31
-	bhi	.L1286
+	bhi	.L1250
 	add	w2, w2, 1
-	strh	w2, [x3, 3968]
+	strh	w2, [x3, 3960]
 	mov	w2, 1
-.L1283:
-	cbnz	w0, .L1284
+.L1247:
+	cbnz	w0, .L1248
 	add	x0, x1, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3560]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1288
-.L1284:
+	bcc	.L1252
+.L1248:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
@@ -8698,10 +8436,10 @@ FtlEctTblFlush:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1286:
+.L1250:
 	mov	w2, 32
-	b	.L1283
-.L1288:
+	b	.L1247
+.L1252:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8734,7 +8472,7 @@ FtlVendorPartRead:
 	stp	x27, x28, [sp, 80]
 	ldrh	w0, [x3, 100]
 	cmp	w1, w0
-	bhi	.L1301
+	bhi	.L1265
 	ldrh	w21, [x3, 112]
 	adrp	x26, .LC108
 	mov	x25, x2
@@ -8742,9 +8480,9 @@ FtlVendorPartRead:
 	add	x26, x26, :lo12:.LC108
 	mov	w24, 0
 	lsr	w21, w23, w21
-.L1294:
-	cbnz	w22, .L1300
-.L1292:
+.L1258:
+	cbnz	w22, .L1264
+.L1256:
 	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8753,7 +8491,7 @@ FtlVendorPartRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1300:
+.L1264:
 	ldrh	w19, [x28, 62]
 	ldr	x0, [x28, 3608]
 	udiv	w20, w23, w19
@@ -8765,7 +8503,7 @@ FtlVendorPartRead:
 	cmp	w22, w19
 	csel	w19, w0, w19, cc
 	lsl	w27, w19, 9
-	cbz	w4, .L1296
+	cbz	w4, .L1260
 	ldr	x0, [x28, 3480]
 	mov	w2, 1
 	str	x0, [x29, 120]
@@ -8781,16 +8519,16 @@ FtlVendorPartRead:
 	ldr	w0, [x28, 3728]
 	csinv	w24, w24, wzr, ne
 	cmp	w0, 256
-	bne	.L1298
+	bne	.L1262
 	mov	w2, w4
 	mov	w1, w21
 	mov	x0, x26
 	bl	sftl_printk
 	ldr	x2, [x28, 3480]
 	mov	w1, w21
-	add	x0, x28, 3768
+	add	x0, x28, 3896
 	bl	FtlMapWritePage
-.L1298:
+.L1262:
 	ldr	x1, [x28, 3480]
 	lsl	w20, w20, 9
 	asr	w20, w20, 2
@@ -8798,21 +8536,21 @@ FtlVendorPartRead:
 	mov	x0, x25
 	add	x1, x1, x20, sxtw 2
 	bl	ftl_memcpy
-.L1299:
+.L1263:
 	add	w21, w21, 1
 	sub	w22, w22, w19
 	add	w23, w23, w19
 	add	x25, x25, x27, sxtw
-	b	.L1294
-.L1296:
+	b	.L1258
+.L1260:
 	mov	w2, w27
 	mov	w1, 0
 	mov	x0, x25
 	bl	ftl_memset
-	b	.L1299
-.L1301:
+	b	.L1263
+.L1265:
 	mov	w24, -1
-	b	.L1292
+	b	.L1256
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -8832,7 +8570,7 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1304
+	beq	.L1268
 	adrp	x1, .LC109
 	adrp	x0, .LC71
 	add	x1, x1, :lo12:.LC109
@@ -8843,7 +8581,7 @@ FtlLoadEctTbl:
 	ldrh	w2, [x19, 3544]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1304:
+.L1268:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8868,19 +8606,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1307
+	beq	.L1271
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1307:
+.L1271:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1308
+	bne	.L1272
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2612]
 	ldr	w2, [x0, 2812]
@@ -8905,7 +8643,7 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2648]
 	str	w2, [x0, 2644]
-.L1308:
+.L1272:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2632]
 	ldrh	w1, [x0, 96]
@@ -8915,21 +8653,70 @@ Ftl_load_ext_data:
 	udiv	w1, w1, w2
 	str	w1, [x0, 2636]
 	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	sftl_vendor_read
+	.type	sftl_vendor_read, %function
+sftl_vendor_read:
+	stp	x29, x30, [sp, -16]!
+	add	w0, w0, 256
+	add	x29, sp, 0
+	bl	FtlVendorPartRead
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	sftl_vendor_read, .-sftl_vendor_read
+	.align	2
+	.global	FtlMapBlkWriteDump_data
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
+	ldr	w1, [x0, 56]
+	cbz	w1, .L1284
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	add	x2, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	str	x21, [sp, 32]
+	add	x0, x2, 3728
+	mov	x21, x1
+	ldrh	w20, [x19, 6]
+	ldr	x4, [x2, 3528]
+	sub	w20, w20, #1
+	ldr	x3, [x2, 3472]
+	and	w20, w20, 65535
+	ldr	x5, [x19, 40]
+	stp	x3, x4, [x0, 8]
+	ubfiz	x4, x20, 2, 16
+	str	wzr, [x19, 56]
+	ldr	w4, [x5, x4]
+	str	w4, [x0, 4]
+	cbz	w4, .L1278
+	mov	w2, 1
+	mov	w1, w2
+	bl	FlashReadPages
+.L1279:
+	add	x1, x21, :lo12:.LANCHOR0
+	mov	x0, x19
+	ldr	x2, [x1, 3736]
+	mov	w1, w20
+	bl	FtlMapWritePage
+	ldr	x21, [sp, 32]
+	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
-	.align	2
-	.global	sftl_vendor_read
-	.type	sftl_vendor_read, %function
-sftl_vendor_read:
-	stp	x29, x30, [sp, -16]!
-	add	w0, w0, 256
-	add	x29, sp, 0
-	bl	FtlVendorPartRead
-	ldp	x29, x30, [sp], 16
+.L1278:
+	ldrh	w2, [x2, 114]
+	mov	w1, 255
+	mov	x0, x3
+	bl	ftl_memset
+	b	.L1279
+.L1284:
 	ret
-	.size	sftl_vendor_read, .-sftl_vendor_read
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
 	.global	FtlVpcTblFlush
 	.type	FtlVpcTblFlush, %function
@@ -9007,7 +8794,7 @@ FtlVpcTblFlush:
 	mov	x20, x25
 	adrp	x25, .LANCHOR1
 	add	x25, x25, :lo12:.LANCHOR1
-	add	x25, x25, 576
+	add	x25, x25, 560
 	bl	ftl_memcpy
 	ldr	x1, [x19, 2376]
 	ldrh	w2, [x19, 44]
@@ -9027,7 +8814,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1313:
+.L1288:
 	ldrh	w2, [x20, 2]
 	ldrh	w1, [x20]
 	ldr	x0, [x19, 3464]
@@ -9039,7 +8826,7 @@ FtlVpcTblFlush:
 	ldrh	w0, [x19, 108]
 	sub	w0, w0, #1
 	cmp	w2, w0
-	blt	.L1314
+	blt	.L1289
 	ldrh	w24, [x20, 4]
 	strh	wzr, [x20, 2]
 	strh	w1, [x20, 4]
@@ -9053,7 +8840,11 @@ FtlVpcTblFlush:
 	strh	w0, [x20]
 	strh	w0, [x21, 2]
 	str	w1, [x21, 4]
-.L1314:
+.L1289:
+	ldrh	w1, [x19, 114]
+	ldr	x0, [x19, 3464]
+	bl	js_hash
+	str	w0, [x21, 12]
 	mov	w3, 1
 	add	x0, x19, 3728
 	mov	w1, w3
@@ -9065,46 +8856,46 @@ FtlVpcTblFlush:
 	and	w0, w0, 65535
 	strh	w0, [x20, 2]
 	cmn	w1, #1
-	bne	.L1315
+	bne	.L1290
 	cmp	w0, 1
-	bne	.L1316
+	bne	.L1291
 	adrp	x0, .LC1
-	mov	w2, 1135
+	mov	w2, 1138
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1316:
+.L1291:
 	ldrh	w0, [x20, 2]
 	cmp	w0, 1
-	bne	.L1317
+	bne	.L1292
 	ldrh	w0, [x19, 108]
 	sub	w0, w0, #1
 	strh	w0, [x20, 2]
-.L1317:
+.L1292:
 	add	w22, w22, 1
 	and	w22, w22, 65535
 	cmp	w22, 3
-	bls	.L1313
+	bls	.L1288
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x0, .LC110
 	mov	w2, w22
 	add	x0, x0, :lo12:.LC110
 	ldr	w1, [x23, 3732]
 	bl	sftl_printk
-.L1319:
-	b	.L1319
-.L1315:
+.L1294:
+	b	.L1294
+.L1290:
 	cmp	w0, 1
-	beq	.L1313
+	beq	.L1288
 	cmp	w1, 256
-	beq	.L1313
+	beq	.L1288
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1320
+	beq	.L1295
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1320:
+.L1295:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -9134,14 +8925,14 @@ sftl_deinit:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	bne	.L1333
+	bne	.L1308
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	FtlSysFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1333:
+.L1308:
 	mov	w0, 0
 	ret
 	.size	sftl_deinit, .-sftl_deinit
@@ -9159,55 +8950,55 @@ sftl_discard:
 	str	x21, [sp, 32]
 	ldr	w2, [x1, 144]
 	cmp	w3, w2
-	bhi	.L1344
+	bhi	.L1319
 	cmp	w20, 31
-	bhi	.L1338
-.L1352:
+	bhi	.L1313
+.L1327:
 	mov	w0, 0
-.L1336:
+.L1311:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1338:
+.L1313:
 	ldrh	w1, [x1, 62]
 	udiv	w21, w0, w1
 	msub	w0, w1, w21, w0
 	ands	w0, w0, 65535
-	beq	.L1339
+	beq	.L1314
 	sub	w1, w1, w0
 	add	w21, w21, 1
 	cmp	w1, w20
 	csel	w1, w1, w20, ls
 	sub	w20, w20, w1, uxth
-.L1339:
+.L1314:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	str	w0, [x29, 60]
-.L1340:
+.L1315:
 	ldrh	w0, [x19, 62]
 	cmp	w20, w0
-	bcs	.L1342
-	ldr	w0, [x19, 3972]
+	bcs	.L1317
+	ldr	w0, [x19, 3964]
 	cmp	w0, 32
-	bls	.L1352
-	str	wzr, [x19, 3972]
+	bls	.L1327
+	str	wzr, [x19, 3964]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1352
-.L1342:
+	b	.L1327
+.L1317:
 	mov	w2, 0
 	add	x1, x29, 56
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 56]
 	cmn	w0, #1
-	beq	.L1341
-	ldr	w0, [x19, 3972]
+	beq	.L1316
+	ldr	w0, [x19, 3964]
 	mov	w2, 1
 	add	x1, x29, 60
 	add	w0, w0, 1
-	str	w0, [x19, 3972]
+	str	w0, [x19, 3964]
 	ldr	w0, [x19, 2592]
 	add	w0, w0, 1
 	str	w0, [x19, 2592]
@@ -9217,14 +9008,14 @@ sftl_discard:
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1341:
+.L1316:
 	ldrh	w0, [x19, 62]
 	add	w21, w21, 1
 	sub	w20, w20, w0
-	b	.L1340
-.L1344:
+	b	.L1315
+.L1319:
 	mov	w0, -1
-	b	.L1336
+	b	.L1311
 	.size	sftl_discard, .-sftl_discard
 	.align	2
 	.global	FtlVpcCheckAndModify
@@ -9233,14 +9024,14 @@ FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC95
+	adrp	x0, .LC101
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
 	add	x19, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	add	x1, x1, 592
-	add	x0, x0, :lo12:.LC95
+	add	x1, x1, 576
+	add	x0, x0, :lo12:.LC101
 	str	x23, [sp, 48]
 	bl	sftl_printk
 	ldr	x0, [x19, 3568]
@@ -9249,19 +9040,19 @@ FtlVpcCheckAndModify:
 	mov	w1, 0
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1354:
+.L1329:
 	ldr	w0, [x19, 2584]
 	cmp	w21, w0
-	bcc	.L1356
+	bcc	.L1331
 	adrp	x22, .LC111
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:.LC111
 	mov	w19, 0
 	mov	w23, 65535
-.L1357:
+.L1332:
 	ldrh	w0, [x20, 44]
 	cmp	w0, w19
-	bhi	.L1362
+	bhi	.L1337
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	x23, [sp, 48]
@@ -9269,14 +9060,14 @@ FtlVpcCheckAndModify:
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1356:
+.L1331:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1355
+	beq	.L1330
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldr	x2, [x19, 3568]
@@ -9284,48 +9075,48 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1355:
+.L1330:
 	add	w21, w21, 1
-	b	.L1354
-.L1362:
+	b	.L1329
+.L1337:
 	ldr	x0, [x20, 2376]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
 	ldr	x0, [x20, 3568]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1359
+	beq	.L1334
 	cmp	w2, w23
-	beq	.L1359
+	beq	.L1334
 	mov	x0, x22
 	mov	w1, w19
 	bl	sftl_printk
 	ldrh	w0, [x20, 2424]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1334
 	ldrh	w0, [x20, 2520]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1334
 	ldrh	w0, [x20, 2472]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1334
 	ldr	x0, [x20, 2376]
 	ldrh	w1, [x0, x21]
-	cbnz	w1, .L1361
+	cbnz	w1, .L1336
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
-.L1359:
+.L1334:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1357
-.L1361:
+	b	.L1332
+.L1336:
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
 	mov	w0, w19
 	bl	update_vpc_list
-	b	.L1359
+	b	.L1334
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
@@ -9341,46 +9132,46 @@ allocate_new_data_superblock:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 44]
 	cmp	w0, w20
-	bcs	.L1368
+	bcs	.L1343
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2714
-	add	x1, x1, 616
+	mov	w2, 2760
+	add	x1, x1, 600
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1368:
+.L1343:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L1369
+	beq	.L1344
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x20, 1, 16
 	ldr	x1, [x1, 2376]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1370
+	cbz	w0, .L1345
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1369:
+.L1344:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x21, 8]
 	mov	w1, 65535
 	ldrh	w0, [x2, 3714]
 	cmp	w0, w1
-	beq	.L1371
+	beq	.L1346
 	cmp	w20, w0
-	bne	.L1372
+	bne	.L1347
 	ldr	x2, [x2, 2376]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1373
-.L1372:
+	cbz	w1, .L1348
+.L1347:
 	bl	update_vpc_list
-.L1373:
+.L1348:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	w0, [x19, 3714]
-.L1371:
+.L1346:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9392,10 +9183,10 @@ allocate_new_data_superblock:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1370:
+.L1345:
 	mov	w0, w20
 	bl	INSERT_FREE_LIST
-	b	.L1369
+	b	.L1344
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
@@ -9420,18 +9211,18 @@ FtlProgPages:
 	add	x25, x25, :lo12:.LANCHOR1
 	add	x20, x0, 4
 	bl	FlashProgPages
-.L1379:
+.L1354:
 	cmp	x20, x24
-	beq	.L1386
+	beq	.L1361
 	sub	x23, x20, #4
-	b	.L1387
-.L1382:
+	b	.L1362
+.L1357:
 	ldr	w0, [x20]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x19]
 	cmp	w1, w0, uxth
-	bne	.L1380
+	bne	.L1355
 	ldr	x2, [x21, 2376]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w3, [x19, 4]
@@ -9442,12 +9233,12 @@ FtlProgPages:
 	ldrh	w0, [x21, 106]
 	strh	w0, [x19, 2]
 	strh	wzr, [x19, 4]
-.L1380:
+.L1355:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1381
+	cbnz	w0, .L1356
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-.L1381:
+.L1356:
 	ldr	w0, [x21, 2816]
 	add	w0, w0, 1
 	str	w0, [x21, 2816]
@@ -9463,20 +9254,20 @@ FtlProgPages:
 	ldrb	w3, [x19, 9]
 	mov	x0, x23
 	bl	FlashProgPages
-.L1387:
+.L1362:
 	ldr	w0, [x20, -4]
 	cmn	w0, #1
-	beq	.L1382
+	beq	.L1357
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x21, 36]
 	cmp	w1, w0
-	bcc	.L1383
+	bcc	.L1358
 	adrp	x0, .LC1
 	mov	w2, 960
-	add	x1, x25, 648
+	add	x1, x25, 632
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1383:
+.L1358:
 	add	x1, x29, 96
 	ldr	w0, [x23, 4]
 	mov	w2, 1
@@ -9490,35 +9281,35 @@ FtlProgPages:
 	and	w1, w0, 65535
 	mov	w23, w1
 	cmn	w4, #1
-	beq	.L1384
+	beq	.L1359
 	ldr	x2, [x21, 2376]
 	ubfiz	x0, x1, 1, 16
 	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1385
+	cbnz	w0, .L1360
 	adrp	x0, .LC112
 	mov	w2, 0
 	add	x0, x0, :lo12:.LC112
 	bl	sftl_printk
-.L1385:
+.L1360:
 	mov	w0, w23
 	bl	decrement_vpc_count
-.L1384:
+.L1359:
 	add	x20, x20, 32
-	b	.L1379
-.L1386:
+	b	.L1354
+.L1361:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x22, 36]
 	cmp	w1, w0
-	bcc	.L1378
+	bcc	.L1353
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 975
-	add	x1, x1, 648
+	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1378:
+.L1353:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9542,53 +9333,53 @@ FtlGcFreeTempBlock:
 	ldrh	w20, [x2, 2520]
 	ldrh	w1, [x2, 106]
 	cmp	w20, w3
-	bne	.L1394
-.L1404:
+	bne	.L1369
+.L1379:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	add	x1, x0, 2520
 	ldrh	w3, [x0, 2520]
 	str	wzr, [x0, 3720]
 	cmp	w3, w2
-	bne	.L1417
-.L1420:
+	bne	.L1392
+.L1395:
 	mov	w0, 0
-.L1393:
+.L1368:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L1394:
-	cbz	w0, .L1397
+.L1369:
+	cbz	w0, .L1372
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1398
-.L1399:
+	beq	.L1373
+.L1374:
 	mov	w1, 2
-.L1397:
+.L1372:
 	add	x21, x19, :lo12:.LANCHOR0
 	add	x0, x21, 2520
 	bl	FtlGcScanTempBlk
 	str	w0, [x29, 92]
 	cmn	w0, #1
-	beq	.L1400
+	beq	.L1375
 	ldr	x1, [x21, 2384]
 	ubfiz	x20, x20, 1, 16
 	ldrh	w0, [x1, x20]
 	cmp	w0, 4
-	bls	.L1401
+	bls	.L1376
 	sub	w0, w0, #5
 	strh	w0, [x1, x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L1401:
+.L1376:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3720]
-	cbnz	w1, .L1402
+	cbnz	w1, .L1377
 	ldr	w1, [x0, 2816]
 	add	w1, w1, 1
 	str	w1, [x0, 2816]
@@ -9596,45 +9387,45 @@ FtlGcFreeTempBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1402:
+.L1377:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3720]
-.L1413:
+.L1388:
 	mov	w0, 1
-	b	.L1393
-.L1398:
+	b	.L1368
+.L1373:
 	strh	wzr, [x0, 4]
 	ldrh	w0, [x2, 2416]
 	cmp	w0, 17
-	bhi	.L1399
-	b	.L1397
-.L1400:
+	bhi	.L1374
+	b	.L1372
+.L1375:
 	adrp	x0, .LANCHOR2+4
 	ldrh	w1, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1413
-	b	.L1404
-.L1417:
+	bne	.L1388
+	b	.L1379
+.L1392:
 	ldrh	w2, [x0, 3304]
 	ldrb	w1, [x1, 7]
 	ldrh	w0, [x0, 106]
 	mul	w0, w1, w0
 	cmp	w2, w0
-	beq	.L1405
+	beq	.L1380
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 162
-	add	x1, x1, 664
+	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1405:
+.L1380:
 	add	x0, x19, :lo12:.LANCHOR0
 	adrp	x22, .LANCHOR1
 	add	x22, x22, :lo12:.LANCHOR1
 	adrp	x25, .LC1
-	add	x22, x22, 664
+	add	x22, x22, 648
 	add	x25, x25, :lo12:.LC1
 	ldrb	w1, [x0, 2527]
 	mov	w20, 0
@@ -9647,20 +9438,20 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2608]
-.L1406:
+.L1381:
 	add	x21, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x21, 3304]
 	cmp	w0, w20
-	bhi	.L1410
+	bhi	.L1385
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x21, 2520]
 	ldr	x2, [x21, 2376]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1411
+	cbz	w1, .L1386
 	bl	INSERT_DATA_LIST
-.L1412:
+.L1387:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
@@ -9673,11 +9464,11 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x19, 2416]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1420
+	ble	.L1395
 	mov	w0, 20
 	strh	w0, [x19, 3232]
-	b	.L1420
-.L1410:
+	b	.L1395
+.L1385:
 	mov	w24, 12
 	ldr	x26, [x21, 3312]
 	ldr	w0, [x21, 2584]
@@ -9685,12 +9476,12 @@ FtlGcFreeTempBlock:
 	add	x23, x26, x24
 	ldr	w1, [x23, 8]
 	cmp	w1, w0
-	bcc	.L1407
+	bcc	.L1382
 	mov	w2, 168
 	mov	x1, x22
 	mov	x0, x25
 	bl	sftl_printk
-.L1407:
+.L1382:
 	ldr	w0, [x23, 8]
 	add	x1, x29, 92
 	mov	w2, 0
@@ -9698,7 +9489,7 @@ FtlGcFreeTempBlock:
 	ldr	w0, [x26, x24]
 	ldr	w1, [x29, 92]
 	cmp	w0, w1
-	bne	.L1408
+	bne	.L1383
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	mov	w21, w0
@@ -9707,22 +9498,22 @@ FtlGcFreeTempBlock:
 	add	x1, x23, 4
 	bl	log2phys
 	mov	w0, w21
-.L1419:
+.L1394:
 	bl	decrement_vpc_count
-.L1409:
+.L1384:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L1406
-.L1408:
+	b	.L1381
+.L1383:
 	ldr	w0, [x23, 4]
 	cmp	w1, w0
-	beq	.L1409
+	beq	.L1384
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 2520]
-	b	.L1419
-.L1411:
+	b	.L1394
+.L1386:
 	bl	INSERT_FREE_LIST
-	b	.L1412
+	b	.L1387
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -9740,13 +9531,13 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19, 2522]
 	ldrh	w0, [x19, 106]
 	cmp	w1, w0
-	bcc	.L1421
+	bcc	.L1396
 	add	x0, x19, 3648
 	bl	FtlMapBlkWriteDump_data
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19, 3720]
-.L1421:
+.L1396:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9763,7 +9554,7 @@ FtlPowerLostRecovery:
 	add	x20, x19, 2424
 	add	x19, x19, 2472
 	mov	x0, x20
-	str	wzr, [x19, 1364]
+	str	wzr, [x19, 1292]
 	bl	FtlRecoverySuperblock
 	mov	x0, x20
 	bl	FtlSlcSuperblockCheck
@@ -9794,25 +9585,25 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x19, 3448]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1427:
+.L1402:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1430
+	bcc	.L1405
 	ldr	x0, [x19, 3448]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
 	ldrh	w0, [x19, 2524]
-	cbnz	w0, .L1431
+	cbnz	w0, .L1406
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	b	.L1433
-.L1430:
+	b	.L1408
+.L1405:
 	ldr	x0, [x19, 3448]
 	ubfiz	x1, x10, 5, 16
 	add	x3, x0, x1
 	ldr	w0, [x0, x1]
 	cmn	w0, #1
-	bne	.L1428
+	bne	.L1403
 	ldrh	w3, [x19, 2520]
 	ldr	x2, [x19, 2376]
 	strh	wzr, [x2, x3, lsl 1]
@@ -9827,23 +9618,23 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1433:
+.L1408:
 	mov	w0, 1
-.L1426:
+.L1401:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1428:
+.L1403:
 	ldr	x0, [x3, 16]
 	ldr	w1, [x3, 4]
 	ldp	w2, w0, [x0, 8]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1427
-.L1431:
+	b	.L1402
+.L1406:
 	mov	w0, 0
-	b	.L1426
+	b	.L1401
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9858,10 +9649,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0, 2520]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1435
+	beq	.L1410
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1436
-.L1435:
+	cbnz	w0, .L1411
+.L1410:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
@@ -9874,137 +9665,14 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1436:
+.L1411:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 2520
 	bl	get_new_active_ppa
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
-	.align	2
-	.global	FtlSysBlkInit
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	stp	x21, x22, [sp, 32]
-	add	x21, x20, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	ldrh	w0, [x21, 40]
-	strh	wzr, [x21, 3832]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	ldrh	w1, [x21, 2656]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L1439
-.L1441:
-	mov	w23, -1
-.L1438:
-	mov	w0, w23
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-.L1439:
-	bl	FtlLoadSysInfo
-	mov	w23, w0
-	cbnz	w0, .L1441
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	mov	w0, 1
-	bl	FtlUpdateVaildLpn
-	ldr	x1, [x21, 2568]
-	mov	w0, 0
-	ldrh	w3, [x21, 142]
-	add	x1, x1, 4
-.L1442:
-	cmp	w0, w3
-	bge	.L1447
-	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1443
-.L1447:
-	add	x2, x20, :lo12:.LANCHOR0
-	cmp	w0, w3
-	ldrh	w1, [x2, 2340]
-	add	w1, w1, 1
-	strh	w1, [x2, 2340]
-	bge	.L1452
-.L1444:
-	add	x19, x20, :lo12:.LANCHOR0
-	add	x22, x19, 2424
-	add	x21, x19, 2472
-	mov	x0, x22
-	bl	FtlSuperblockPowerLostFix
-	mov	x0, x21
-	bl	FtlSuperblockPowerLostFix
-	ldrh	w0, [x19, 2424]
-	ldr	x2, [x19, 2376]
-	ldrh	w3, [x19, 2428]
-	lsl	x0, x0, 1
-	ldrh	w1, [x2, x0]
-	sub	w1, w1, w3
-	strh	w1, [x2, x0]
-	strb	wzr, [x19, 2430]
-	ldrh	w0, [x19, 106]
-	strh	w0, [x19, 2426]
-	ldrh	w0, [x19, 2472]
-	ldr	x2, [x19, 2376]
-	strh	wzr, [x19, 2428]
-	lsl	x0, x0, 1
-	ldrh	w3, [x19, 2476]
-	ldrh	w1, [x2, x0]
-	sub	w1, w1, w3
-	strh	w1, [x2, x0]
-	strb	wzr, [x19, 2478]
-	ldrh	w0, [x19, 106]
-	strh	w0, [x19, 2474]
-	ldrh	w0, [x19, 2342]
-	strh	wzr, [x19, 2476]
-	add	w0, w0, 1
-	strh	w0, [x19, 2342]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1448
-.L1443:
-	add	w0, w0, 1
-	b	.L1442
-.L1452:
-	ldrh	w0, [x2, 3832]
-	cbnz	w0, .L1444
-.L1448:
-	add	x19, x20, :lo12:.LANCHOR0
-	bl	FtlVpcCheckAndModify
-	mov	w1, 65535
-	add	x21, x19, 2424
-	ldrh	w0, [x19, 2424]
-	cmp	w0, w1
-	beq	.L1438
-	ldrh	w1, [x19, 2428]
-	cbnz	w1, .L1438
-	ldrh	w1, [x19, 2476]
-	add	x20, x19, 2472
-	cbnz	w1, .L1438
-	bl	FtlGcRefreshBlock
-	ldrh	w0, [x19, 2472]
-	bl	FtlGcRefreshBlock
-	bl	FtlVpcTblFlush
-	mov	x0, x21
-	bl	allocate_new_data_superblock
-	mov	x0, x20
-	bl	allocate_new_data_superblock
-	b	.L1438
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
@@ -10019,23 +9687,23 @@ rk_ftl_garbage_collect:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	w2, [x1, 3424]
-	cbnz	w2, .L1527
+	cbnz	w2, .L1486
 	ldrh	w2, [x1, 2400]
 	cmp	w2, 47
-	bls	.L1527
+	bls	.L1486
 	mov	w23, w0
 	adrp	x0, .LANCHOR2+4
 	ldrh	w2, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L1456
-.L1459:
+	bne	.L1415
+.L1418:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 3322]
 	cmp	w1, w2
-	bne	.L1457
-.L1458:
+	bne	.L1416
+.L1417:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	FtlReadRefresh
 	mov	w21, 65535
@@ -10045,91 +9713,91 @@ rk_ftl_garbage_collect:
 	add	w0, w0, w23, lsl 7
 	str	w0, [x20, 3236]
 	cmp	w1, w21
-	bne	.L1460
+	bne	.L1419
 	ldrh	w21, [x20, 2520]
 	cmp	w21, w1
-	bne	.L1530
+	bne	.L1489
 	ldrh	w22, [x20, 3320]
 	cmp	w22, w21
-	bne	.L1460
+	bne	.L1419
 	ldrh	w1, [x20, 2416]
 	mov	w2, 1024
 	cmp	w1, 24
 	mov	w1, 5120
 	csel	w1, w1, w2, cc
 	cmp	w0, w1
-	bls	.L1533
-	strh	wzr, [x20, 3976]
+	bls	.L1492
+	strh	wzr, [x20, 3968]
 	str	wzr, [x20, 3236]
 	bl	GetSwlReplaceBlock
 	and	w21, w0, 65535
 	cmp	w21, w22
-	bne	.L1534
+	bne	.L1493
 	ldrh	w1, [x20, 2416]
 	ldrh	w0, [x20, 3234]
 	cmp	w1, w0
-	bcs	.L1463
+	bcs	.L1422
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
 	cmp	w0, w21
-	beq	.L1465
+	beq	.L1424
 	ldr	x1, [x20, 2376]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1466
+	bhi	.L1425
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
 	strh	w0, [x20, 3234]
 	cmp	w22, w21
-	bne	.L1462
-.L1465:
+	bne	.L1421
+.L1424:
 	bl	FtlGcReFreshBadBlk
-.L1460:
+.L1419:
 	cmp	w23, 0
 	mov	w0, 65535
 	add	x1, x19, :lo12:.LANCHOR0
 	ccmp	w21, w0, 0, eq
-	bne	.L1468
+	bne	.L1427
 	ldrh	w0, [x1, 2416]
 	cmp	w0, 24
-	bhi	.L1535
+	bhi	.L1494
 	cmp	w0, 16
 	ldrh	w20, [x1, 106]
-	bls	.L1470
+	bls	.L1429
 	lsr	w20, w20, 5
-.L1469:
+.L1428:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1473
+	bcs	.L1432
 	ldrh	w0, [x1, 2520]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1474
+	bne	.L1433
 	ldrh	w2, [x1, 3320]
 	cmp	w2, w0
-	bne	.L1474
-	ldrh	w0, [x1, 3976]
-	cbnz	w0, .L1475
+	bne	.L1433
+	ldrh	w0, [x1, 3968]
+	cbnz	w0, .L1434
 	ldr	w2, [x1, 2584]
 	ldr	w3, [x1, 2580]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1476
-.L1475:
+	bcs	.L1435
+.L1434:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2652]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1477:
+.L1436:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1454:
+.L1413:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -10137,34 +9805,34 @@ rk_ftl_garbage_collect:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1456:
+.L1415:
 	ldrh	w1, [x1, 2520]
 	cmp	w1, w0
-	beq	.L1459
+	beq	.L1418
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1459
+	cbz	w0, .L1418
 	mov	w0, 1
-	b	.L1454
-.L1457:
+	b	.L1413
+.L1416:
 	ldrh	w3, [x0, 3320]
 	cmp	w3, w2
-	bne	.L1458
+	bne	.L1417
 	strh	w1, [x0, 3320]
 	mov	w1, -1
 	strh	w1, [x0, 3322]
-	b	.L1458
-.L1466:
+	b	.L1417
+.L1425:
 	mov	w0, 64
-.L1562:
+.L1521:
 	strh	w0, [x20, 3234]
-	b	.L1465
-.L1463:
+	b	.L1424
+.L1422:
 	mov	w0, 80
-	b	.L1562
-.L1534:
+	b	.L1521
+.L1493:
 	mov	w22, w21
-.L1462:
+.L1421:
 	add	x0, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x22, 1, 32
 	mov	w21, w22
@@ -10178,151 +9846,151 @@ rk_ftl_garbage_collect:
 	adrp	x0, .LC113
 	add	x0, x0, :lo12:.LC113
 	bl	sftl_printk
-	b	.L1465
-.L1530:
+	b	.L1424
+.L1489:
 	mov	w21, w1
-	b	.L1460
-.L1533:
+	b	.L1419
+.L1492:
 	mov	w21, w22
-	b	.L1460
-.L1470:
+	b	.L1419
+.L1429:
 	cmp	w0, 12
-	bls	.L1471
+	bls	.L1430
 	lsr	w20, w20, 4
-	b	.L1469
-.L1471:
+	b	.L1428
+.L1430:
 	mov	w1, w20
 	cmp	w0, 9
 	lsr	w20, w20, 2
 	csel	w20, w20, w1, cs
-	b	.L1469
-.L1535:
+	b	.L1428
+.L1494:
 	mov	w20, 1
-	b	.L1469
-.L1476:
+	b	.L1428
+.L1435:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1477
-.L1474:
+	b	.L1436
+.L1433:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1473:
+.L1432:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3324]
-	cbz	w0, .L1536
+	cbz	w0, .L1495
 	add	w20, w20, 32
 	and	w20, w20, 65535
-.L1536:
+.L1495:
 	mov	w21, 65535
-.L1479:
+.L1438:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 2672]
 	cmp	w1, w2
-	bne	.L1488
+	bne	.L1447
 	cmp	w21, w1
-	beq	.L1489
+	beq	.L1448
 	strh	w21, [x0, 2672]
-.L1490:
+.L1449:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x5, 2672]
 	strb	wzr, [x5, 2680]
 	cmp	w0, w1
-	beq	.L1488
+	beq	.L1447
 	bl	IsBlkInGcList
-	cbz	w0, .L1493
+	cbz	w0, .L1452
 	mov	w0, -1
 	strh	w0, [x5, 2672]
-.L1493:
+.L1452:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	add	x24, x22, 2672
 	ldrh	w1, [x22, 2672]
 	cmp	w1, w0
-	beq	.L1488
+	beq	.L1447
 	mov	x0, x24
 	bl	make_superblock
 	ldrh	w1, [x22, 2672]
 	ldr	x0, [x22, 2376]
 	strh	wzr, [x22, 2674]
 	strb	wzr, [x22, 2678]
-	strh	wzr, [x22, 3978]
+	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
-	strh	w0, [x22, 3980]
-.L1488:
+	strh	w0, [x22, 3972]
+.L1447:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w2, [x0, 2424]
 	cmp	w2, w1
-	beq	.L1494
+	beq	.L1453
 	ldrh	w0, [x0, 2472]
 	cmp	w0, w1
-	bne	.L1495
-.L1494:
+	bne	.L1454
+.L1453:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 2672]
-.L1495:
+.L1454:
 	adrp	x25, .LANCHOR1
 	add	x25, x25, :lo12:.LANCHOR1
-	add	x25, x25, 688
-.L1524:
+	add	x25, x25, 672
+.L1483:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w24, [x22, 2672]
 	cmp	w24, w0
-	bne	.L1496
+	bne	.L1455
 	mov	w26, 2
 	str	wzr, [x22, 3244]
-.L1497:
+.L1456:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
 	strh	w6, [x22, 2672]
 	cmp	w6, w24
-	bne	.L1498
+	bne	.L1457
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1454
-.L1468:
+	b	.L1413
+.L1427:
 	ldrh	w2, [x1, 2520]
 	cmp	w2, w0
-	bne	.L1539
+	bne	.L1498
 	ldrh	w0, [x1, 3320]
 	cmp	w0, w2
-	bne	.L1539
+	bne	.L1498
 	cmp	w21, w0
-	bne	.L1539
+	bne	.L1498
 	ldrh	w0, [x1, 2672]
 	cmp	w0, w21
-	beq	.L1480
-.L1539:
+	beq	.L1439
+.L1498:
 	mov	w20, 1
-	b	.L1479
-.L1480:
+	b	.L1438
+.L1439:
 	ldrh	w2, [x1, 2416]
 	ldrh	w0, [x1, 3232]
 	str	wzr, [x1, 3244]
 	cmp	w2, w0
-	bls	.L1481
-	ldrh	w0, [x1, 3976]
-	cbnz	w0, .L1482
+	bls	.L1440
+	ldrh	w0, [x1, 3968]
+	cbnz	w0, .L1441
 	ldr	w0, [x1, 2584]
 	ldr	w2, [x1, 2580]
 	add	w0, w0, w0, lsl 1
 	cmp	w2, w0, lsr 2
-	bcs	.L1483
-.L1482:
+	bcs	.L1442
+.L1441:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-.L1563:
+.L1522:
 	strh	w0, [x1, 3232]
 	bl	FtlReadRefresh
 	mov	w0, 0
@@ -10332,16 +10000,16 @@ rk_ftl_garbage_collect:
 	ldr	x2, [x1, 2376]
 	ldrh	w0, [x2, x0]
 	cmp	w0, 4
-	bls	.L1481
-	ldrh	w0, [x1, 3976]
-	b	.L1454
-.L1483:
+	bls	.L1440
+	ldrh	w0, [x1, 3968]
+	b	.L1413
+.L1442:
 	mov	w0, 18
-	b	.L1563
-.L1481:
+	b	.L1522
+.L1440:
 	add	x20, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x20, 3976]
-	cbnz	w0, .L1539
+	ldrh	w0, [x20, 3968]
+	cbnz	w0, .L1498
 	ldrh	w5, [x20, 2652]
 	add	w0, w5, w5, lsl 1
 	asr	w0, w0, 2
@@ -10357,47 +10025,47 @@ rk_ftl_garbage_collect:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1486
+	ble	.L1445
 	ldrh	w0, [x20, 2416]
 	sub	w5, w5, #1
 	cmp	w0, w5
-	blt	.L1486
+	blt	.L1445
 	bl	FtlReadRefresh
-	ldrh	w0, [x20, 3976]
-	b	.L1454
-.L1486:
-	cbnz	w1, .L1539
+	ldrh	w0, [x20, 3968]
+	b	.L1413
+.L1445:
+	cbnz	w1, .L1498
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x19, 2416]
 	add	w0, w0, 1
-	b	.L1454
-.L1489:
+	b	.L1413
+.L1448:
 	ldrh	w1, [x0, 3320]
 	cmp	w1, w21
-	beq	.L1490
+	beq	.L1449
 	ldr	x2, [x0, 2376]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1491
+	cbnz	w1, .L1450
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-.L1491:
+.L1450:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
 	strh	w1, [x0, 2672]
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-	b	.L1490
-.L1498:
+	b	.L1449
+.L1457:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1499
+	cbz	w0, .L1458
 	strh	w5, [x22, 3240]
-	b	.L1497
-.L1499:
+	b	.L1456
+.L1458:
 	ldrh	w4, [x22, 36]
 	ubfiz	x1, x6, 1, 16
 	ldrh	w0, [x22, 106]
@@ -10408,90 +10076,90 @@ rk_ftl_garbage_collect:
 	ldrh	w3, [x2, x1]
 	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L1501
+	bgt	.L1460
 	cmp	w5, 48
-	bls	.L1502
+	bls	.L1461
 	cmp	w3, 8
-	bls	.L1502
+	bls	.L1461
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1502
-.L1501:
+	bhi	.L1461
+.L1460:
 	strh	wzr, [x22, 3240]
-.L1502:
+.L1461:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1503
+	bgt	.L1462
 	cmp	w21, w24
-	bne	.L1503
+	bne	.L1462
 	ldrh	w0, [x22, 3240]
 	cmp	w0, 3
-	bhi	.L1503
+	bhi	.L1462
 	mov	w0, -1
 	strh	wzr, [x22, 3240]
 	strh	w0, [x22, 2672]
-.L1564:
-	ldrh	w0, [x22, 3976]
-	b	.L1454
-.L1503:
-	cbnz	w1, .L1504
+.L1523:
+	ldrh	w0, [x22, 3968]
+	b	.L1413
+.L1462:
+	cbnz	w1, .L1463
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1497
-.L1504:
+	b	.L1456
+.L1463:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0, 2680]
 	ldrh	w0, [x0, 2424]
 	cmp	w0, w6
-	bne	.L1505
+	bne	.L1464
 	adrp	x0, .LC1
 	mov	w2, 700
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1505:
+.L1464:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2472]
 	cmp	w1, w0
-	bne	.L1506
+	bne	.L1465
 	adrp	x0, .LC1
 	mov	w2, 701
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1506:
+.L1465:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2520]
 	cmp	w1, w0
-	bne	.L1507
+	bne	.L1466
 	adrp	x0, .LC1
 	mov	w2, 702
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1507:
+.L1466:
 	add	x22, x19, :lo12:.LANCHOR0
 	add	x24, x22, 2672
 	mov	x0, x24
 	bl	make_superblock
 	ldrh	w1, [x22, 2672]
 	ldr	x0, [x22, 2376]
-	strh	wzr, [x22, 3978]
+	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
-	strh	w0, [x22, 3980]
+	strh	w0, [x22, 3972]
 	strh	wzr, [x22, 2674]
 	strb	wzr, [x22, 2678]
-.L1496:
+.L1455:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	str	w0, [x1, 3424]
 	ldrh	w26, [x1, 106]
-	cbz	w23, .L1508
+	cbz	w23, .L1467
 	ldrh	w0, [x1, 36]
 	ldrh	w2, [x1, 2672]
 	ldr	x1, [x1, 2376]
@@ -10502,19 +10170,19 @@ rk_ftl_garbage_collect:
 	sdiv	w0, w0, w1
 	add	w20, w20, w0
 	and	w20, w20, 65535
-.L1508:
+.L1467:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 2674]
 	add	w1, w0, w20
 	cmp	w1, w26
-	ble	.L1509
+	ble	.L1468
 	sub	w20, w26, w0
 	and	w20, w20, 65535
-.L1509:
+.L1468:
 	mov	w27, 0
-.L1510:
+.L1469:
 	cmp	w20, w27, uxth
-	bls	.L1518
+	bls	.L1477
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w24, 0
 	add	x3, x0, 2688
@@ -10523,11 +10191,11 @@ rk_ftl_garbage_collect:
 	ldrh	w4, [x0, 2674]
 	ldrh	w7, [x0, 36]
 	add	w4, w4, w27
-	b	.L1519
-.L1512:
+	b	.L1478
+.L1471:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1511
+	beq	.L1470
 	ldr	x5, [x0, 3280]
 	ubfiz	x8, x24, 5, 16
 	add	w24, w24, 1
@@ -10535,13 +10203,13 @@ rk_ftl_garbage_collect:
 	add	x5, x5, x8
 	and	w24, w24, 65535
 	str	w2, [x5, 4]
-.L1511:
+.L1470:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1519:
+.L1478:
 	cmp	w1, w7
-	bne	.L1512
+	bne	.L1471
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w1, w24
 	mov	x28, 0
@@ -10550,26 +10218,26 @@ rk_ftl_garbage_collect:
 	bl	FlashReadPages
 	ubfiz	x0, x24, 5, 16
 	str	x0, [x29, 104]
-.L1513:
+.L1472:
 	ldr	x0, [x29, 104]
 	cmp	x0, x28
-	bne	.L1517
+	bne	.L1476
 	add	w27, w27, 1
-	b	.L1510
-.L1517:
+	b	.L1469
+.L1476:
 	ldr	x0, [x22, 3280]
 	add	x1, x0, x28
 	ldr	w0, [x0, x28]
 	cmn	w0, #1
-	beq	.L1514
+	beq	.L1473
 	ldr	x24, [x1, 16]
 	mov	w0, 61589
 	ldrh	w1, [x24]
 	cmp	w1, w0
-	bne	.L1514
+	bne	.L1473
 	ldr	w4, [x24, 8]
 	cmn	w4, #1
-	bne	.L1515
+	bne	.L1474
 	str	w4, [x29, 96]
 	mov	w2, 736
 	mov	x1, x25
@@ -10577,7 +10245,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
 	ldr	w4, [x29, 96]
-.L1515:
+.L1474:
 	mov	w2, 0
 	add	x1, x29, 124
 	mov	w0, w4
@@ -10587,11 +10255,11 @@ rk_ftl_garbage_collect:
 	add	x0, x0, x28
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1514
-	ldrh	w1, [x22, 3978]
+	bne	.L1473
+	ldrh	w1, [x22, 3970]
 	ldr	x2, [x22, 3448]
 	add	w1, w1, 1
-	strh	w1, [x22, 3978]
+	strh	w1, [x22, 3970]
 	ldr	w1, [x22, 3248]
 	ldr	w0, [x0, 24]
 	add	x1, x2, x1, lsl 5
@@ -10625,126 +10293,69 @@ rk_ftl_garbage_collect:
 	ldrb	w1, [x22, 2527]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1516
+	beq	.L1475
 	ldrh	w0, [x22, 2524]
-	cbnz	w0, .L1514
-.L1516:
+	cbnz	w0, .L1473
+.L1475:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1514
+	cbz	w0, .L1473
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 3976]
+	ldrh	w0, [x19, 3968]
 	str	wzr, [x19, 3424]
-	b	.L1454
-.L1514:
+	b	.L1413
+.L1473:
 	add	x28, x28, 32
-	b	.L1513
-.L1518:
+	b	.L1472
+.L1477:
 	add	x22, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 2674]
 	add	w20, w20, w0
 	and	w20, w20, 65535
 	strh	w20, [x22, 2674]
 	cmp	w26, w20
-	bhi	.L1520
+	bhi	.L1479
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1521
+	cbz	w0, .L1480
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1521
+	cbz	w0, .L1480
 	str	wzr, [x22, 3424]
-	b	.L1564
-.L1521:
+	b	.L1523
+.L1480:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 3978]
-	cbnz	w1, .L1522
+	ldrh	w1, [x0, 3970]
+	cbnz	w1, .L1481
 	ldrh	w1, [x0, 2672]
 	ldr	x2, [x0, 2376]
 	lsl	x1, x1, 1
 	ldrh	w3, [x2, x1]
-	cbz	w3, .L1522
+	cbz	w3, .L1481
 	strh	wzr, [x2, x1]
 	ldrh	w0, [x0, 2672]
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1522:
+.L1481:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 2672]
-.L1520:
+.L1479:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2416]
 	str	wzr, [x0, 3424]
 	cmp	w1, 2
-	bhi	.L1523
+	bhi	.L1482
 	ldrh	w20, [x0, 106]
-	b	.L1524
-.L1523:
-	ldrh	w0, [x0, 3976]
+	b	.L1483
+.L1482:
+	ldrh	w0, [x0, 3968]
 	cmp	w0, 0
 	csinc	w0, w0, w1, ne
-	b	.L1454
-.L1527:
+	b	.L1413
+.L1486:
 	mov	w0, 0
-	b	.L1454
+	b	.L1413
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
-	.global	sftl_init
-	.type	sftl_init, %function
-sftl_init:
-	stp	x29, x30, [sp, -32]!
-	adrp	x1, .LC70
-	add	x1, x1, :lo12:.LC70
-	mov	w0, -1
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR2
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	w0, [x20, #:lo12:.LANCHOR2]
-	adrp	x0, .LC71
-	add	x0, x0, :lo12:.LC71
-	bl	sftl_printk
-	mov	x0, x19
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	w0, [x19, 40]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbnz	w0, .L1569
-	bl	FtlSysBlkInit
-	cbnz	w0, .L1569
-	mov	w0, 1
-	str	w0, [x20, #:lo12:.LANCHOR2]
-	ldrh	w0, [x19, 2416]
-	cmp	w0, 15
-	bhi	.L1569
-	mov	w19, 8129
-.L1568:
-	mov	w1, 1
-	mov	w0, 0
-	bl	rk_ftl_garbage_collect
-	subs	w19, w19, #1
-	bne	.L1568
-.L1569:
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	sftl_init, .-sftl_init
-	.align	2
-	.global	sftl_gc
-	.type	sftl_gc, %function
-sftl_gc:
-	stp	x29, x30, [sp, -16]!
-	mov	w1, 1
-	mov	w0, w1
-	add	x29, sp, 0
-	bl	rk_ftl_garbage_collect
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	sftl_gc, .-sftl_gc
-	.align	2
 	.global	FtlRead
 	.type	FtlRead, %function
 FtlRead:
@@ -10760,13 +10371,13 @@ FtlRead:
 	mov	w25, w2
 	stp	x21, x22, [sp, 32]
 	stp	x27, x28, [sp, 80]
-	bne	.L1575
+	bne	.L1525
 	mov	x2, x3
 	mov	w1, w25
 	add	w0, w19, 256
 	bl	FtlVendorPartRead
 	mov	w21, w0
-.L1574:
+.L1524:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -10775,7 +10386,7 @@ FtlRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1575:
+.L1525:
 	add	w0, w1, w2
 	str	w0, [x29, 128]
 	adrp	x0, .LANCHOR0
@@ -10784,11 +10395,11 @@ FtlRead:
 	str	x0, [x29, 96]
 	ldr	w1, [x3, 144]
 	cmp	w2, w1
-	bhi	.L1596
+	bhi	.L1546
 	adrp	x0, .LANCHOR2
 	ldr	w21, [x0, #:lo12:.LANCHOR2]
 	cmn	w21, #1
-	beq	.L1574
+	beq	.L1524
 	ldrh	w0, [x3, 62]
 	sub	w24, w2, #1
 	mov	x26, x3
@@ -10807,42 +10418,42 @@ FtlRead:
 	add	w22, w22, 1
 	add	w0, w0, w22
 	str	w0, [x3, 2588]
-.L1577:
-	cbnz	w22, .L1594
+.L1527:
+	cbnz	w22, .L1544
 	ldr	x0, [x29, 96]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3324]
-	cbnz	w1, .L1595
+	cbnz	w1, .L1545
 	ldrh	w0, [x0, 2416]
 	cmp	w0, 31
-	bhi	.L1574
-.L1595:
+	bhi	.L1524
+.L1545:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1574
-.L1594:
+	b	.L1524
+.L1544:
 	add	x1, x29, 156
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
 	ldr	w1, [x29, 156]
 	cmn	w1, #1
-	bne	.L1578
+	bne	.L1528
 	mov	w5, 0
-.L1579:
+.L1529:
 	ldrh	w0, [x26, 62]
 	cmp	w5, w0
-	bcc	.L1581
-.L1582:
+	bcc	.L1531
+.L1532:
 	add	w20, w20, 1
 	subs	w22, w22, #1
-	beq	.L1586
+	beq	.L1536
 	ldrh	w0, [x26, 36]
 	cmp	w28, w0, lsl 2
-	bne	.L1577
-.L1586:
-	cbz	w28, .L1577
+	bne	.L1527
+.L1536:
+	cbz	w28, .L1527
 	ldr	x0, [x26, 3440]
 	mov	w1, w28
 	mov	w2, 0
@@ -10859,63 +10470,63 @@ FtlRead:
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
 	str	x0, [x29, 104]
-.L1593:
+.L1543:
 	ldr	x0, [x26, 3440]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
 	cmp	w27, w1
-	bne	.L1588
+	bne	.L1538
 	ldr	x1, [x0, 8]
 	ldr	x0, [x26, 3488]
 	cmp	x1, x0
-	bne	.L1589
+	bne	.L1539
 	ldr	x0, [x29, 120]
 	ldr	w2, [x29, 116]
 	add	x1, x1, x0
 	mov	x0, x23
-.L1606:
+.L1556:
 	bl	ftl_memcpy
-.L1589:
+.L1539:
 	ldr	x0, [x26, 3440]
 	add	x0, x0, x28
 	ldr	x1, [x0, 16]
 	ldr	w2, [x0, 24]
 	ldr	w1, [x1, 8]
 	cmp	w2, w1
-	beq	.L1590
+	beq	.L1540
 	ldr	w1, [x26, 2792]
 	add	w1, w1, 1
 	str	w1, [x26, 2792]
-.L1590:
+.L1540:
 	ldr	w2, [x0]
 	cmn	w2, #1
-	bne	.L1591
+	bne	.L1541
 	ldr	w1, [x26, 2792]
 	mov	w21, w2
 	add	w1, w1, 1
 	str	w1, [x26, 2792]
-.L1591:
+.L1541:
 	ldr	w1, [x0]
 	cmp	w1, 256
-	bne	.L1592
+	bne	.L1542
 	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1592:
+.L1542:
 	ldr	x0, [x29, 104]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1593
+	bne	.L1543
 	mov	w28, 0
-	b	.L1577
-.L1581:
+	b	.L1527
+.L1531:
 	madd	w0, w20, w0, w5
 	cmp	w19, w0
-	bhi	.L1580
+	bhi	.L1530
 	ldr	w1, [x29, 128]
 	cmp	w1, w0
-	bls	.L1580
+	bls	.L1530
 	sub	w0, w0, w19
 	str	w5, [x29, 120]
 	lsl	w0, w0, 9
@@ -10924,17 +10535,17 @@ FtlRead:
 	add	x0, x23, x0
 	bl	ftl_memset
 	ldr	w5, [x29, 120]
-.L1580:
+.L1530:
 	add	w5, w5, 1
-	b	.L1579
-.L1578:
+	b	.L1529
+.L1528:
 	ldr	x0, [x26, 3440]
 	ubfiz	x2, x28, 5, 32
 	cmp	w20, w27
 	add	x0, x0, x2
 	str	w1, [x0, 4]
 	ldrh	w0, [x26, 62]
-	bne	.L1583
+	bne	.L1533
 	ldr	x1, [x26, 3440]
 	ldr	x5, [x26, 3488]
 	add	x1, x1, x2
@@ -10947,9 +10558,9 @@ FtlRead:
 	csel	w3, w25, w5, ls
 	str	w3, [x29, 136]
 	cmp	w3, w0
-	bne	.L1584
+	bne	.L1534
 	str	x23, [x1, 8]
-.L1584:
+.L1534:
 	ldr	x0, [x26, 3440]
 	ldr	x1, [x26, 3536]
 	add	x2, x0, x2
@@ -10960,10 +10571,10 @@ FtlRead:
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1582
-.L1583:
+	b	.L1532
+.L1533:
 	cmp	w20, w24
-	bne	.L1585
+	bne	.L1535
 	ldr	x5, [x26, 3440]
 	ldr	x1, [x26, 3496]
 	add	x5, x5, x2
@@ -10973,13 +10584,13 @@ FtlRead:
 	sub	w3, w3, w1
 	str	w3, [x29, 132]
 	cmp	w0, w3
-	bne	.L1584
+	bne	.L1534
 	sub	w1, w1, w19
 	lsl	w1, w1, 9
 	add	x1, x23, x1
 	str	x1, [x5, 8]
-	b	.L1584
-.L1585:
+	b	.L1534
+.L1535:
 	ldr	x1, [x26, 3440]
 	mul	w0, w0, w20
 	add	x1, x1, x2
@@ -10987,24 +10598,24 @@ FtlRead:
 	lsl	w0, w0, 9
 	add	x0, x23, x0
 	str	x0, [x1, 8]
-	b	.L1584
-.L1588:
+	b	.L1534
+.L1538:
 	cmp	w24, w1
-	bne	.L1589
+	bne	.L1539
 	ldr	x1, [x0, 8]
 	ldr	x0, [x26, 3496]
 	cmp	x1, x0
-	bne	.L1589
+	bne	.L1539
 	ldrh	w0, [x26, 62]
 	ldr	w2, [x29, 112]
 	mul	w0, w0, w24
 	sub	w0, w0, w19
 	lsl	w0, w0, 9
 	add	x0, x23, x0
-	b	.L1606
-.L1596:
+	b	.L1556
+.L1546:
 	mov	w21, -1
-	b	.L1574
+	b	.L1524
 	.size	FtlRead, .-FtlRead
 	.align	2
 	.global	sftl_read
@@ -11036,12 +10647,12 @@ FtlWrite:
 	stp	x21, x22, [sp, 32]
 	stp	x27, x28, [sp, 80]
 	str	w2, [x29, 172]
-	bne	.L1610
+	bne	.L1560
 	add	w0, w1, 256
 	ldr	w1, [x29, 172]
 	mov	x2, x3
 	bl	FtlVendorPartWrite
-.L1609:
+.L1559:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -11049,7 +10660,7 @@ FtlWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 224
 	ret
-.L1610:
+.L1560:
 	ldr	w0, [x29, 172]
 	adrp	x19, .LANCHOR0
 	add	x1, x19, :lo12:.LANCHOR0
@@ -11058,16 +10669,16 @@ FtlWrite:
 	ldr	w0, [x1, 144]
 	ldr	w2, [x29, 148]
 	cmp	w2, w0
-	bhi	.L1646
+	bhi	.L1596
 	adrp	x2, .LANCHOR2
 	str	x2, [x29, 136]
 	add	x3, x2, :lo12:.LANCHOR2
 	ldr	w0, [x2, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1609
+	beq	.L1559
 	mov	w0, 2048
 	ldr	w2, [x29, 148]
-	str	w0, [x1, 3984]
+	str	w0, [x1, 3976]
 	add	x20, x1, 2424
 	ldrh	w0, [x1, 62]
 	sub	w2, w2, #1
@@ -11085,55 +10696,55 @@ FtlWrite:
 	add	w0, w0, w24
 	str	w0, [x1, 2596]
 	ldr	w0, [x3, 8]
-	cbz	w0, .L1612
+	cbz	w0, .L1562
 	ldrh	w0, [x20, 4]
 	add	x1, x1, 2472
 	cmp	w0, 0
 	csel	x20, x1, x20, eq
-.L1612:
+.L1562:
 	adrp	x0, .LANCHOR1
 	mov	w21, w25
 	add	x0, x0, :lo12:.LANCHOR1
-	add	x0, x0, 712
+	add	x0, x0, 696
 	str	x0, [x29, 160]
-.L1613:
-	cbnz	w24, .L1641
+.L1563:
+	cbnz	w24, .L1591
 	ldr	w1, [x29, 132]
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x19, 2416]
 	cmp	w0, 5
-	bls	.L1642
-.L1644:
+	bls	.L1592
+.L1594:
 	mov	w0, 0
-	b	.L1609
-.L1641:
+	b	.L1559
+.L1591:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1614
+	bcc	.L1564
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1016
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1614:
+.L1564:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1615
+	cbnz	w0, .L1565
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x0, 2424
 	cmp	x20, x1
-	bne	.L1616
+	bne	.L1566
 	add	x0, x0, 2472
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1617
+	cbnz	w1, .L1567
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1617:
+.L1567:
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x22, x20, 2424
 	add	x20, x20, 2472
@@ -11144,12 +10755,12 @@ FtlWrite:
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
 	csel	x20, x20, x22, ne
-.L1618:
+.L1568:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1615
+	cbnz	w0, .L1565
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1615:
+.L1565:
 	ldrh	w0, [x20, 4]
 	ldrb	w1, [x20, 7]
 	cmp	w0, w24
@@ -11162,21 +10773,21 @@ FtlWrite:
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1619
+	bcc	.L1569
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1049
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1619:
+.L1569:
 	mov	x28, 0
-.L1620:
+.L1570:
 	ldr	w0, [x29, 128]
 	mov	w22, w28
 	cmp	w28, w0
-	bcc	.L1639
+	bcc	.L1589
 	mov	x22, x0
-.L1621:
+.L1571:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	x3, x20
 	mov	w2, 0
@@ -11184,30 +10795,30 @@ FtlWrite:
 	ldr	x0, [x0, 3456]
 	bl	FtlProgPages
 	cmp	w24, w22
-	bcs	.L1640
+	bcs	.L1590
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1126
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1640:
+.L1590:
 	sub	w24, w24, w22
-	b	.L1613
-.L1616:
+	b	.L1563
+.L1566:
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1651
+	cbnz	w0, .L1601
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-	b	.L1618
-.L1651:
+	b	.L1568
+.L1601:
 	mov	x20, x1
-	b	.L1615
-.L1639:
+	b	.L1565
+.L1589:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1621
+	cbz	w0, .L1571
 	add	x1, x29, 188
 	mov	w2, 0
 	mov	w0, w21
@@ -11239,9 +10850,9 @@ FtlWrite:
 	cmp	w21, w25
 	ldr	x4, [x29, 152]
 	ccmp	w21, w0, 4, ne
-	bne	.L1622
+	bne	.L1572
 	cmp	w21, w25
-	bne	.L1623
+	bne	.L1573
 	ldrh	w2, [x4, 62]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
@@ -11251,29 +10862,29 @@ FtlWrite:
 	cmp	w2, w0
 	csel	w0, w2, w0, ls
 	str	w0, [x29, 152]
-.L1624:
+.L1574:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x29, 152]
 	ldrh	w1, [x0, 62]
 	cmp	w2, w1
-	bne	.L1625
+	bne	.L1575
 	ldr	x0, [x0, 3456]
 	cmp	w21, w25
 	add	x3, x0, x27
-	bne	.L1626
+	bne	.L1576
 	str	x26, [x3, 8]
-.L1627:
+.L1577:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1636
+	bcc	.L1586
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1117
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-.L1636:
+.L1586:
 	ldp	x1, x2, [x29, 112]
 	mov	w0, -3947
 	add	x28, x28, 1
@@ -11290,35 +10901,35 @@ FtlWrite:
 	str	w0, [x22, 12]
 	ldrh	w0, [x20]
 	strh	w0, [x22, 2]
-	b	.L1620
-.L1623:
+	b	.L1570
+.L1573:
 	ldr	w0, [x29, 148]
 	ldrh	w2, [x4, 62]
 	str	wzr, [x29, 168]
 	msub	w2, w21, w2, w0
 	and	w0, w2, 65535
 	str	w0, [x29, 152]
-	b	.L1624
-.L1626:
+	b	.L1574
+.L1576:
 	ldr	w0, [x29, 152]
-.L1658:
+.L1608:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
 	add	x0, x26, x0
 	str	x0, [x3, 8]
-	b	.L1627
-.L1625:
+	b	.L1577
+.L1575:
 	ldr	x1, [x0, 3456]
 	cmp	w21, w25
 	add	x1, x1, x27
-	bne	.L1628
+	bne	.L1578
 	ldr	x0, [x0, 3488]
-.L1657:
+.L1607:
 	str	x0, [x1, 8]
 	ldr	w0, [x29, 188]
 	cmn	w0, #1
-	beq	.L1630
+	beq	.L1580
 	add	x4, x19, :lo12:.LANCHOR0
 	str	w0, [x29, 196]
 	str	w21, [x29, 216]
@@ -11334,16 +10945,16 @@ FtlWrite:
 	ldr	w0, [x29, 192]
 	ldr	x4, [x29, 104]
 	cmn	w0, #1
-	bne	.L1631
+	bne	.L1581
 	ldr	w0, [x4, 2792]
 	add	w0, w0, 1
 	str	w0, [x4, 2792]
-.L1634:
+.L1584:
 	ldr	w0, [x29, 152]
 	cmp	w21, w25
 	lsl	w2, w0, 9
 	add	x0, x19, :lo12:.LANCHOR0
-	bne	.L1635
+	bne	.L1585
 	ldr	x0, [x0, 3456]
 	mov	x1, x26
 	add	x3, x0, x27
@@ -11351,16 +10962,16 @@ FtlWrite:
 	ldr	x3, [x3, 8]
 	lsl	w0, w0, 9
 	add	x0, x3, x0
-.L1659:
+.L1609:
 	bl	ftl_memcpy
-	b	.L1627
-.L1628:
+	b	.L1577
+.L1578:
 	ldr	x0, [x0, 3496]
-	b	.L1657
-.L1631:
+	b	.L1607
+.L1581:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1633
+	beq	.L1583
 	ldr	w0, [x4, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11369,17 +10980,17 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC114
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1633:
+.L1583:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1634
+	beq	.L1584
 	ldr	x1, [x29, 160]
 	mov	w2, 1102
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
 	bl	sftl_printk
-	b	.L1634
-.L1630:
+	b	.L1584
+.L1580:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3456]
 	ldrh	w2, [x1, 114]
@@ -11387,8 +10998,8 @@ FtlWrite:
 	add	x0, x0, x27
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1634
-.L1635:
+	b	.L1584
+.L1585:
 	ldrh	w1, [x0, 62]
 	ldr	x0, [x0, 3456]
 	add	x3, x0, x27
@@ -11397,27 +11008,27 @@ FtlWrite:
 	ldr	x0, [x3, 8]
 	lsl	w1, w1, 9
 	add	x1, x26, x1
-	b	.L1659
-.L1622:
+	b	.L1609
+.L1572:
 	ldr	x0, [x4, 3456]
 	add	x3, x0, x27
 	ldrh	w0, [x4, 62]
-	b	.L1658
-.L1642:
+	b	.L1608
+.L1592:
 	mov	w20, 256
 	mov	w21, 65535
 	mov	w22, 128
-.L1645:
+.L1595:
 	ldrh	w0, [x19, 2672]
 	cmp	w0, w21
-	bne	.L1643
+	bne	.L1593
 	ldrh	w0, [x19, 3320]
 	cmp	w0, w21
-	bne	.L1643
+	bne	.L1593
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L1643:
+.L1593:
 	mov	w1, 1
 	strh	w22, [x19, 3234]
 	mov	w0, w1
@@ -11425,207 +11036,716 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	mov	w1, 1
 	mov	w0, 0
-	bl	rk_ftl_garbage_collect
-	ldrh	w0, [x19, 2416]
-	cmp	w0, 2
-	bhi	.L1644
-	subs	w20, w20, #1
-	bne	.L1645
-	b	.L1644
-.L1646:
-	mov	w0, -1
-	b	.L1609
-	.size	FtlWrite, .-FtlWrite
+	bl	rk_ftl_garbage_collect
+	ldrh	w0, [x19, 2416]
+	cmp	w0, 2
+	bhi	.L1594
+	subs	w20, w20, #1
+	bne	.L1595
+	b	.L1594
+.L1596:
+	mov	w0, -1
+	b	.L1559
+	.size	FtlWrite, .-FtlWrite
+	.align	2
+	.global	sftl_gc
+	.type	sftl_gc, %function
+sftl_gc:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, 1
+	mov	w0, w1
+	add	x29, sp, 0
+	bl	rk_ftl_garbage_collect
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	sftl_gc, .-sftl_gc
+	.align	2
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	adrp	x22, .LANCHOR0
+	add	x21, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp, 16]
+	add	x20, x21, 3728
+	stp	x23, x24, [sp, 48]
+	str	x25, [sp, 64]
+	ldr	x0, [x21, 3464]
+	str	x0, [x20, 8]
+	ldr	x0, [x21, 3528]
+	str	x0, [x20, 16]
+	ldr	x0, [x21, 2376]
+	ldrh	w2, [x21, 44]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w0, [x21, 2656]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L1613
+.L1624:
+	mov	w0, -1
+.L1612:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldr	x25, [sp, 64]
+	ldp	x29, x30, [sp], 80
+	ret
+.L1613:
+	add	x23, x21, 2656
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	sxth	w19, w0
+	adrp	x1, .LANCHOR1
+	add	w0, w0, 1
+	add	x1, x1, :lo12:.LANCHOR1
+	strh	w0, [x23, 2]
+	ldrsh	w23, [x21, 2656]
+	add	x24, x1, 712
+.L1615:
+	tbz	w19, #31, .L1621
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1465
+	add	x1, x1, 712
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	b	.L1620
+.L1621:
+	orr	w0, w19, w23, lsl 10
+	str	w0, [x20, 4]
+	ldr	x0, [x21, 3464]
+	mov	w2, 1
+	str	x0, [x20, 8]
+	mov	w1, w2
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	x0, [x20, 16]
+	ldr	w7, [x0, 12]
+	cbz	w7, .L1616
+	ldrh	w1, [x21, 114]
+	ldr	x0, [x20, 8]
+	bl	js_hash
+	cmp	w7, w0
+	beq	.L1616
+	ldrh	w4, [x21, 2660]
+	mov	w6, w0
+	mov	w5, w7
+	adrp	x0, .LC115
+	mov	w3, w19
+	mov	w2, w23
+	mov	x1, x24
+	add	x0, x0, :lo12:.LC115
+	bl	sftl_printk
+	cbnz	w19, .L1617
+	ldrh	w0, [x21, 2660]
+	cmp	w23, w0
+	beq	.L1617
+	ldrh	w19, [x21, 108]
+	sxth	w23, w0
+.L1619:
+	sub	w19, w19, #1
+	sxth	w19, w19
+	b	.L1615
+.L1617:
+	mov	w0, -1
+	str	w0, [x20]
+.L1616:
+	ldr	w0, [x20]
+	cmn	w0, #1
+	beq	.L1619
+	ldr	x0, [x21, 3464]
+	ldr	w1, [x0]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L1619
+	ldr	x0, [x21, 3528]
+	ldrh	w1, [x0]
+	mov	w0, 61604
+	cmp	w1, w0
+	bne	.L1619
+.L1620:
+	add	x1, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x1, 44]
+	ldrh	w1, [x1, 114]
+	add	x0, x0, 24
+	cmp	x1, x0, lsl 1
+	bcs	.L1623
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1467
+	add	x1, x1, 712
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1623:
+	add	x19, x22, :lo12:.LANCHOR0
+	mov	w2, 48
+	add	x20, x19, 2312
+	mov	x0, x20
+	ldr	x1, [x19, 3736]
+	bl	ftl_memcpy
+	ldr	x0, [x19, 2376]
+	ldrh	w2, [x19, 44]
+	ldr	x1, [x19, 3736]
+	lsl	w2, w2, 1
+	add	x1, x1, 48
+	bl	ftl_memcpy
+	ldrh	w1, [x19, 44]
+	ldr	x0, [x19, 3736]
+	lsr	w2, w1, 3
+	ubfiz	x1, x1, 1, 16
+	add	x1, x1, 48
+	add	w2, w2, 4
+	and	x1, x1, -4
+	add	x1, x0, x1
+	ldr	x0, [x19, 24]
+	bl	ftl_memcpy
+	ldr	w1, [x19, 2312]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L1624
+	ldrh	w1, [x19, 2320]
+	ldrb	w2, [x19, 2322]
+	ldrh	w0, [x19, 58]
+	strh	w1, [x19, 2662]
+	cmp	w2, w0
+	bne	.L1624
+	ldrh	w0, [x19, 106]
+	ldrh	w2, [x19, 62]
+	ldrh	w3, [x19, 36]
+	str	w1, [x19, 3980]
+	mul	w0, w0, w1
+	str	w0, [x19, 2584]
+	mul	w0, w2, w0
+	ldr	w2, [x19, 48]
+	str	w0, [x19, 144]
+	ldrh	w0, [x19, 166]
+	cmp	w1, w2
+	sub	w0, w2, w0
+	sub	w0, w0, w1
+	udiv	w0, w0, w3
+	strh	w0, [x19, 2652]
+	bls	.L1625
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1489
+	add	x1, x1, 712
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1625:
+	add	x0, x22, :lo12:.LANCHOR0
+	mov	w3, -1
+	ldrh	w2, [x0, 2328]
+	ldrh	w4, [x0, 2326]
+	strh	w4, [x0, 2424]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2430]
+	ldrb	w2, [x0, 2323]
+	strb	w2, [x0, 2432]
+	ldrh	w2, [x0, 2330]
+	strh	w2, [x0, 2472]
+	ldrh	w2, [x0, 2332]
+	strh	w5, [x0, 2426]
+	strh	w3, [x0, 2672]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2478]
+	ldrb	w2, [x0, 2324]
+	strb	w2, [x0, 2480]
+	ldrh	w2, [x0, 2334]
+	strh	w2, [x0, 2520]
+	ldrh	w2, [x0, 2336]
+	strh	w5, [x0, 2474]
+	strh	wzr, [x0, 2674]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2526]
+	ldrb	w2, [x0, 2325]
+	strb	w2, [x0, 2528]
+	ldr	w2, [x0, 2344]
+	str	w2, [x0, 2628]
+	strb	wzr, [x0, 2678]
+	strb	wzr, [x0, 2680]
+	strh	w5, [x0, 2522]
+	str	wzr, [x0, 2588]
+	str	wzr, [x0, 2596]
+	str	wzr, [x0, 2604]
+	str	wzr, [x0, 2608]
+	str	wzr, [x0, 2632]
+	str	wzr, [x0, 2644]
+	ldr	w1, [x0, 2352]
+	ldr	w2, [x0, 2620]
+	str	wzr, [x0, 2600]
+	cmp	w1, w2
+	bls	.L1626
+	str	w1, [x0, 2620]
+.L1626:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w1, [x0, 2348]
+	ldr	w2, [x0, 2624]
+	cmp	w1, w2
+	bls	.L1627
+	str	w1, [x0, 2624]
+.L1627:
+	mov	w0, 65535
+	cmp	w4, w0
+	beq	.L1628
+	add	x0, x22, :lo12:.LANCHOR0
+	add	x0, x0, 2424
+	bl	make_superblock
+.L1628:
+	add	x1, x22, :lo12:.LANCHOR0
+	add	x0, x1, 2472
+	ldrh	w2, [x1, 2472]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1629
+	bl	make_superblock
+.L1629:
+	add	x1, x22, :lo12:.LANCHOR0
+	add	x0, x1, 2520
+	ldrh	w2, [x1, 2520]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1630
+	bl	make_superblock
+.L1630:
+	add	x22, x22, :lo12:.LANCHOR0
+	mov	w1, 65535
+	add	x0, x22, 2672
+	ldrh	w2, [x22, 2672]
+	cmp	w2, w1
+	beq	.L1631
+	bl	make_superblock
+.L1631:
+	mov	w0, 0
+	b	.L1612
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
-	.global	FtlMakeBbt
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
-	stp	x29, x30, [sp, -96]!
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	stp	x29, x30, [sp, -144]!
+	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	stp	x25, x26, [sp, 64]
+	mov	x19, x0
 	stp	x21, x22, [sp, 32]
-	mov	x21, x19
+	adrp	x21, .LANCHOR0
 	stp	x23, x24, [sp, 48]
-	mov	w24, 0
+	mov	w20, 0
+	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-	bl	FtlBbtMemInit
-	bl	FtlLoadFactoryBbt
-	mov	w28, -3872
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x26, x0, 192
-	add	x25, x0, 172
-	mov	x19, x0
-	add	x20, x0, 3728
-.L1661:
-	ldrh	w0, [x19, 58]
-	cmp	w24, w0
-	bcc	.L1667
-	add	x20, x21, :lo12:.LANCHOR0
-	mov	w19, 0
-.L1668:
-	ldrh	w0, [x20, 118]
-	cmp	w0, w19
-	bhi	.L1669
-	add	x20, x20, 160
-	ldrh	w19, [x20, 12]
-	mov	w22, 65535
-	sub	w19, w19, #1
-	and	w19, w19, 65535
-.L1670:
-	ldrh	w0, [x20, 12]
-	sub	w0, w0, #48
-	cmp	w19, w0
-	ble	.L1674
-	mov	w0, w19
-	bl	FtlBbmIsBadBlock
-	cmp	w0, 1
-	beq	.L1671
-	mov	w0, w19
-	bl	FlashTestBlk
-	cbz	w0, .L1672
-	mov	w0, w19
-	bl	FtlBbmMapBadBlock
-.L1671:
-	sub	w19, w19, #1
-	and	w19, w19, 65535
-	b	.L1670
-.L1667:
-	ldr	x0, [x19, 3464]
-	mov	w2, 65535
-	ldr	x27, [x19, 3528]
-	ldrh	w1, [x25]
-	stp	x0, x27, [x20, 8]
-	cmp	w1, w2
-	beq	.L1662
-	ldrh	w23, [x19, 102]
+	ldrh	w25, [x0, 6]
+	ldr	x23, [x0, 40]
+	ldr	x24, [x0, 16]
+	ldr	x0, [x0, 24]
+	lsl	w2, w25, 2
+	str	x0, [x29, 128]
+	ldrh	w0, [x19, 8]
+	str	w0, [x29, 136]
+	mov	x0, x23
+	bl	ftl_memset
+	stp	wzr, wzr, [x19, 48]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x2, [x0, 3464]
+	ldr	x22, [x0, 3528]
+	str	x2, [x0, 3736]
+	str	x22, [x0, 3744]
+	mov	w0, -1
+	strh	w0, [x19]
+	strh	w0, [x19, 2]
+	mov	w0, 1
+	str	w0, [x19, 56]
+	ldr	w0, [x29, 136]
+	sub	w0, w0, #1
+	str	w0, [x29, 116]
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	add	x0, x0, 728
+	str	x0, [x29, 104]
+.L1641:
+	ldr	w0, [x29, 136]
+	cmp	w20, w0
+	bge	.L1660
+	ldr	w0, [x29, 116]
+	sxtw	x28, w20
+	cmp	w20, w0
+	bne	.L1642
+	lsl	x0, x28, 1
+	mov	w26, 0
+	add	x1, x24, x0
+	str	x1, [x29, 136]
+	mov	w1, 1
+	ldrh	w0, [x24, x0]
+	adrp	x24, .LANCHOR1
+	add	x24, x24, :lo12:.LANCHOR1
+	add	x24, x24, 728
+	bl	FtlGetLastWrittenPage
+	sxth	w1, w0
+	add	w0, w0, 1
+	strh	w0, [x19, 2]
+	ldr	x0, [x29, 128]
+	strh	w20, [x19]
+	str	w1, [x29, 120]
+	ldr	w0, [x0, x28, lsl 2]
+	add	x28, x21, :lo12:.LANCHOR0
+	add	x27, x28, 3728
+	str	w0, [x19, 48]
+.L1643:
+	ldr	w0, [x29, 120]
+	add	w0, w0, 1
+	cmp	w26, w0
+	blt	.L1646
+.L1660:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	x0, x19
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x19, 2]
+	ldrh	w0, [x21, 108]
+	cmp	w1, w0
+	bne	.L1648
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L1648:
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 144
+	ret
+.L1646:
+	ldr	x0, [x29, 136]
 	mov	w2, 1
-	madd	w23, w23, w24, w1
 	mov	w1, w2
-	lsl	w0, w23, 10
-	str	w0, [x20, 4]
-	mov	x0, x20
+	ldrh	w0, [x0]
+	orr	w0, w26, w0, lsl 10
+	str	w0, [x27, 4]
+	mov	x0, x27
 	bl	FlashReadPages
-	ldr	x1, [x20, 8]
-	ldr	x0, [x26]
-	ldrh	w2, [x19, 102]
-	add	w2, w2, 7
-	lsr	w2, w2, 3
-	bl	ftl_memcpy
-.L1663:
-	mov	w0, w23
-	add	w24, w24, 1
-	bl	FtlBbmMapBadBlock
-	add	x26, x26, 8
-	add	x25, x25, 2
-	b	.L1661
-.L1662:
-	mov	w1, w24
-	bl	FlashGetBadBlockList
-	ldr	x0, [x20, 8]
-	ldr	x1, [x26]
-	bl	FtlBbt2Bitmap
-	ldrh	w22, [x19, 102]
-.L1665:
-	sub	w22, w22, #1
-	and	w22, w22, 65535
-.L1664:
-	ldrh	w0, [x19, 102]
-	madd	w0, w24, w0, w22
-	bl	FtlBbmIsBadBlock
-	cmp	w0, 1
-	beq	.L1665
-	ldr	x0, [x19, 3528]
-	mov	w2, 16
-	strh	w22, [x25]
-	mov	w1, 0
-	bl	ftl_memset
-	ldr	x0, [x19, 3464]
-	mov	w2, 4096
-	mov	w1, 0
-	bl	ftl_memset
-	strh	w28, [x27]
-	str	wzr, [x27, 4]
-	ldrh	w23, [x19, 102]
-	ldrh	w0, [x25]
-	strh	w0, [x27, 2]
-	ldrh	w2, [x19, 3640]
-	ldrh	w0, [x25]
-	ldr	x1, [x26]
-	lsl	w2, w2, 2
-	madd	w23, w23, w24, w0
-	lsl	w0, w23, 10
-	str	w0, [x20, 4]
-	ldr	x0, [x20, 8]
-	bl	ftl_memcpy
+	ldr	x0, [x27, 16]
+	ldr	w8, [x0, 12]
+	cbz	w8, .L1644
+	ldrh	w1, [x28, 114]
+	ldr	x0, [x27, 8]
+	bl	js_hash
+	cmp	w8, w0
+	beq	.L1644
+	mov	w5, w0
+	mov	w4, w8
+	mov	w3, w26
+	mov	w2, w20
+	mov	x1, x24
+	adrp	x0, .LC116
+	add	x0, x0, :lo12:.LC116
+	bl	sftl_printk
+	mov	w0, -1
+	str	w0, [x27]
+.L1644:
+	ldr	w0, [x27]
+	cmn	w0, #1
+	beq	.L1645
+	ldrh	w0, [x22, 8]
+	cmp	w25, w0
+	bls	.L1645
+	ldrh	w2, [x22]
+	ldrh	w1, [x19, 4]
+	cmp	w2, w1
+	bne	.L1645
+	ubfiz	x0, x0, 2, 16
+	ldr	w1, [x27, 4]
+	str	w1, [x23, x0]
+.L1645:
+	add	w6, w26, 1
+	sxth	w26, w6
+	b	.L1643
+.L1642:
+	add	x26, x21, :lo12:.LANCHOR0
+	lsl	x2, x28, 1
+	add	x0, x26, 3728
+	ldr	x1, [x26, 3464]
+	str	x1, [x0, 8]
+	add	x1, x24, x2
+	str	x1, [x29, 120]
+	ldrh	w1, [x24, x2]
+	ldrh	w2, [x26, 108]
+	sub	w2, w2, #1
+	orr	w1, w2, w1, lsl 10
 	mov	w2, 1
-	mov	x0, x20
+	str	w1, [x0, 4]
 	mov	w1, w2
-	bl	FlashEraseBlocks
-	mov	w3, 1
-	mov	x0, x20
-	mov	w2, w3
-	mov	w1, w3
-	bl	FlashProgPages
-	ldr	w0, [x20]
+	bl	FlashReadPages
+	ldr	w0, [x26, 3728]
 	cmn	w0, #1
-	bne	.L1663
-	mov	w0, w23
-	bl	FtlBbmMapBadBlock
-	b	.L1664
-.L1669:
-	mov	w0, w19
-	add	w19, w19, 1
-	bl	FtlBbmMapBadBlock
-	and	w19, w19, 65535
-	b	.L1668
-.L1672:
-	ldrh	w0, [x20]
-	cmp	w0, w22
-	bne	.L1673
-	strh	w19, [x20]
-	b	.L1671
-.L1673:
-	strh	w19, [x20, 4]
-.L1674:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	w2, 2
-	ldr	x1, [x21, 3416]
-	ldrh	w0, [x21, 160]
-	str	wzr, [x21, 168]
-	strh	wzr, [x21, 162]
-	lsl	w0, w0, 10
-	str	w0, [x1, 4]
-	ldr	x0, [x21, 3416]
-	ldrh	w1, [x21, 164]
-	lsl	w1, w1, 10
-	str	w1, [x0, 36]
-	mov	w1, 1
-	bl	FlashEraseBlocks
-	ldrh	w0, [x21, 160]
-	bl	FtlBbmMapBadBlock
-	ldrh	w0, [x21, 164]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	strh	wzr, [x21, 162]
-	ldr	w0, [x21, 168]
-	ldrh	w1, [x21, 164]
+	beq	.L1662
+	ldrh	w1, [x22]
+	ldrh	w0, [x19, 4]
+	cmp	w1, w0
+	bne	.L1662
+	ldrh	w1, [x22, 8]
+	mov	w0, 64245
+	cmp	w1, w0
+	beq	.L1650
+.L1662:
+	add	x26, x21, :lo12:.LANCHOR0
+	mov	w27, 0
+	add	x28, x26, 3728
+.L1651:
+	ldrh	w0, [x26, 108]
+	cmp	w27, w0
+	bge	.L1658
+	ldr	x0, [x29, 120]
+	mov	w2, 1
+	mov	w1, w2
+	ldrh	w0, [x0]
+	orr	w0, w27, w0, lsl 10
+	str	w0, [x28, 4]
+	mov	x0, x28
+	bl	FlashReadPages
+	ldr	x0, [x28, 16]
+	ldr	w7, [x0, 12]
+	cbz	w7, .L1655
+	ldrh	w1, [x26, 114]
+	ldr	x0, [x28, 8]
+	bl	js_hash
+	cmp	w7, w0
+	beq	.L1655
+	ldr	x1, [x29, 104]
+	mov	w5, w0
+	mov	w4, w7
+	mov	w3, w27
+	mov	w2, w20
+	adrp	x0, .LC117
+	add	x0, x0, :lo12:.LC117
+	bl	sftl_printk
+	mov	w0, -1
+	str	w0, [x28]
+.L1655:
+	ldr	w0, [x28]
+	cmn	w0, #1
+	beq	.L1656
+	ldrh	w0, [x22, 8]
+	cmp	w25, w0
+	bls	.L1656
+	ldrh	w2, [x22]
+	ldrh	w1, [x19, 4]
+	cmp	w2, w1
+	bne	.L1656
+	ubfiz	x0, x0, 2, 16
+	ldr	w1, [x28, 4]
+	str	w1, [x23, x0]
+.L1656:
+	add	w6, w27, 1
+	sxth	w27, w6
+	b	.L1651
+.L1650:
+	mov	w0, 0
+.L1652:
+	ldrh	w1, [x26, 108]
+	sub	w1, w1, #1
+	cmp	w0, w1
+	blt	.L1654
+.L1658:
+	add	w20, w20, 1
+	sxth	w20, w20
+	b	.L1641
+.L1654:
+	ldr	x2, [x26, 3464]
+	sbfiz	x3, x0, 3, 32
+	ldrh	w1, [x2, x3]
+	cmp	w25, w1
+	bls	.L1653
+	add	x2, x2, x3
+	ubfiz	x1, x1, 2, 16
+	ldr	w2, [x2, 4]
+	str	w2, [x23, x1]
+.L1653:
 	add	w0, w0, 1
-	str	w0, [x21, 168]
-	ldrh	w0, [x21, 160]
-	strh	w0, [x21, 164]
-	strh	w1, [x21, 160]
-	bl	FtlBbmTblFlush
+	sxth	w0, w0
+	b	.L1652
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x0, x1, 3896
+	add	x29, sp, 0
+	ldrh	w2, [x1, 124]
+	strh	w2, [x0, 10]
+	mov	w2, -3962
+	strh	w2, [x0, 4]
+	ldrh	w2, [x1, 148]
+	strh	w2, [x0, 8]
+	ldrh	w2, [x1, 126]
+	strh	w2, [x0, 6]
+	ldr	x2, [x1, 152]
+	str	x2, [x0, 16]
+	ldr	x2, [x1, 3600]
+	str	x2, [x0, 24]
+	ldr	x2, [x1, 3592]
+	ldr	x1, [x1, 3608]
+	stp	x2, x1, [x0, 32]
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlL2PDataInit
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 3648
+	bl	FtlMapTblRecovery
 	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp, 32]
+	add	x21, x20, :lo12:.LANCHOR0
+	str	x23, [sp, 48]
+	ldrh	w0, [x21, 40]
+	strh	wzr, [x21, 3760]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	w1, [x21, 2656]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L1681
+.L1683:
+	mov	w23, -1
+.L1680:
+	mov	w0, w23
+	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 64
 	ret
-	.size	FtlMakeBbt, .-FtlMakeBbt
+.L1681:
+	bl	FtlLoadSysInfo
+	mov	w23, w0
+	cbnz	w0, .L1683
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	w0, 1
+	bl	FtlUpdateVaildLpn
+	ldr	x1, [x21, 2568]
+	mov	w0, 0
+	ldrh	w3, [x21, 142]
+	add	x1, x1, 4
+.L1684:
+	cmp	w0, w3
+	bge	.L1689
+	ldr	w2, [x1], 16
+	tbz	w2, #31, .L1685
+.L1689:
+	add	x2, x20, :lo12:.LANCHOR0
+	cmp	w0, w3
+	ldrh	w1, [x2, 2340]
+	add	w1, w1, 1
+	strh	w1, [x2, 2340]
+	bge	.L1694
+.L1686:
+	add	x19, x20, :lo12:.LANCHOR0
+	add	x22, x19, 2424
+	add	x21, x19, 2472
+	mov	x0, x22
+	bl	FtlSuperblockPowerLostFix
+	mov	x0, x21
+	bl	FtlSuperblockPowerLostFix
+	ldrh	w0, [x19, 2424]
+	ldr	x2, [x19, 2376]
+	ldrh	w3, [x19, 2428]
+	lsl	x0, x0, 1
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 2430]
+	ldrh	w0, [x19, 106]
+	strh	w0, [x19, 2426]
+	ldrh	w0, [x19, 2472]
+	ldr	x2, [x19, 2376]
+	strh	wzr, [x19, 2428]
+	lsl	x0, x0, 1
+	ldrh	w3, [x19, 2476]
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 2478]
+	ldrh	w0, [x19, 106]
+	strh	w0, [x19, 2474]
+	ldrh	w0, [x19, 2342]
+	strh	wzr, [x19, 2476]
+	add	w0, w0, 1
+	strh	w0, [x19, 2342]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L1690
+.L1685:
+	add	w0, w0, 1
+	b	.L1684
+.L1694:
+	ldrh	w0, [x2, 3760]
+	cbnz	w0, .L1686
+.L1690:
+	add	x19, x20, :lo12:.LANCHOR0
+	bl	FtlVpcCheckAndModify
+	mov	w1, 65535
+	add	x21, x19, 2424
+	ldrh	w0, [x19, 2424]
+	cmp	w0, w1
+	beq	.L1680
+	ldrh	w1, [x19, 2428]
+	cbnz	w1, .L1680
+	ldrh	w1, [x19, 2476]
+	add	x20, x19, 2472
+	cbnz	w1, .L1680
+	bl	FtlGcRefreshBlock
+	ldrh	w0, [x19, 2472]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	mov	x0, x21
+	bl	allocate_new_data_superblock
+	mov	x0, x20
+	bl	allocate_new_data_superblock
+	b	.L1680
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
 	.type	ftl_low_format, %function
@@ -11641,36 +11761,36 @@ ftl_low_format:
 	ldrh	w0, [x0, 40]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1681
+	cbz	w0, .L1697
 	bl	FtlMakeBbt
-.L1681:
+.L1697:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1682:
+.L1698:
 	ldrh	w2, [x1, 62]
 	cmp	w0, w2, lsl 7
-	blt	.L1683
+	blt	.L1699
 	ldrh	w21, [x1, 44]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1684:
+.L1700:
 	ldrh	w0, [x22, 46]
 	cmp	w0, w21
-	bhi	.L1685
+	bhi	.L1701
 	ldrh	w0, [x22, 36]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1686
-.L1690:
+	bge	.L1702
+.L1706:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1687:
+.L1703:
 	ldrh	w0, [x19, 44]
 	cmp	w0, w22
-	bhi	.L1691
+	bhi	.L1707
 	ldrh	w2, [x19, 36]
 	ldr	w1, [x19, 48]
 	ldrh	w0, [x19, 46]
@@ -11683,28 +11803,28 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1692
+	ble	.L1708
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2584]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2652]
-.L1692:
+.L1708:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 98]
-	cbz	w1, .L1694
+	cbz	w1, .L1710
 	ldrh	w5, [x0, 2652]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2652]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1694
+	bge	.L1710
 	add	w1, w1, 32
 	str	w4, [x0, 2584]
 	add	w1, w3, w1
 	strh	w1, [x0, 2652]
-.L1694:
+.L1710:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w22, -1
 	add	x21, x19, 2424
@@ -11713,7 +11833,7 @@ ftl_low_format:
 	sub	w0, w0, w1
 	ldrh	w1, [x19, 106]
 	mul	w0, w0, w2
-	str	w0, [x19, 3760]
+	str	w0, [x19, 3980]
 	mul	w0, w1, w0
 	ldrh	w1, [x19, 62]
 	str	w0, [x19, 2584]
@@ -11740,20 +11860,20 @@ ftl_low_format:
 	strh	wzr, [x19, 2424]
 	str	wzr, [x19, 2580]
 	bl	ftl_memset
-.L1696:
+.L1712:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1697
+	cbnz	w1, .L1713
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1696
-.L1683:
+	b	.L1712
+.L1699:
 	ldr	x5, [x1, 3488]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -11763,8 +11883,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3496]
 	str	w4, [x2, x3]
-	b	.L1682
-.L1685:
+	b	.L1698
+.L1701:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -11772,8 +11892,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1684
-.L1686:
+	b	.L1700
+.L1702:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 136]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -11782,17 +11902,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 40]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 44]
-.L1688:
+.L1704:
 	ldrh	w0, [x21, 46]
 	cmp	w0, w19
-	bls	.L1690
+	bls	.L1706
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1688
-.L1691:
+	b	.L1704
+.L1707:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -11800,8 +11920,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1687
-.L1697:
+	b	.L1703
+.L1713:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -11821,20 +11941,20 @@ ftl_low_format:
 	strb	w1, [x19, 2480]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1698:
+.L1714:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1699
+	cbnz	w1, .L1715
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1698
-.L1699:
+	b	.L1714
+.L1715:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
@@ -11847,7 +11967,7 @@ ftl_low_format:
 	strh	w20, [x19, 2520]
 	bl	FtlFreeSysBlkQueueOut
 	strh	w0, [x19, 2656]
-	ldr	w0, [x19, 3760]
+	ldr	w0, [x19, 3980]
 	strh	w0, [x19, 2662]
 	ldr	w0, [x19, 2620]
 	str	w0, [x19, 2664]
@@ -11857,11 +11977,11 @@ ftl_low_format:
 	str	w0, [x19, 2620]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1700
+	cbnz	w0, .L1716
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1700:
+.L1716:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -11869,285 +11989,307 @@ ftl_low_format:
 	ret
 	.size	ftl_low_format, .-ftl_low_format
 	.align	2
-	.global	ftl_memcmp
-	.type	ftl_memcmp, %function
-ftl_memcmp:
-	stp	x29, x30, [sp, -16]!
-	uxtw	x2, w2
+	.global	sftl_init
+	.type	sftl_init, %function
+sftl_init:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LC70
+	add	x1, x1, :lo12:.LC70
+	mov	w0, -1
 	add	x29, sp, 0
-	bl	memcmp
-	ldp	x29, x30, [sp], 16
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR2
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	str	w0, [x20, #:lo12:.LANCHOR2]
+	adrp	x0, .LC71
+	add	x0, x0, :lo12:.LC71
+	bl	sftl_printk
+	mov	x0, x19
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19, 40]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbnz	w0, .L1725
+	bl	FtlSysBlkInit
+	cbnz	w0, .L1725
+	mov	w0, 1
+	str	w0, [x20, #:lo12:.LANCHOR2]
+	ldrh	w0, [x19, 2416]
+	cmp	w0, 15
+	bhi	.L1725
+	mov	w19, 8129
+.L1724:
+	mov	w1, 1
+	mov	w0, 0
+	bl	rk_ftl_garbage_collect
+	subs	w19, w19, #1
+	bne	.L1724
+.L1725:
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
 	ret
-	.size	ftl_memcmp, .-ftl_memcmp
+	.size	sftl_init, .-sftl_init
 	.align	2
 	.global	FtlWriteToIDB
 	.type	FtlWriteToIDB, %function
 FtlWriteToIDB:
 	stp	x29, x30, [sp, -208]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	add	w23, w1, w0
-	stp	x19, x20, [sp, 16]
-	sub	w24, w23, #1
 	stp	x21, x22, [sp, 32]
-	cmp	w24, 63
+	adrp	x21, .LANCHOR0
+	stp	x23, x24, [sp, 48]
+	add	w24, w1, w0
 	stp	x25, x26, [sp, 64]
-	adrp	x20, .LANCHOR0
+	sub	w25, w24, #1
+	stp	x19, x20, [sp, 16]
+	cmp	w25, 63
 	stp	x27, x28, [sp, 80]
-	bls	.L1708
+	bls	.L1729
 	mov	w19, w0
 	cmp	w0, 575
-	bls	.L1709
-.L1708:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w1, [x0, 3988]
-	cbnz	w1, .L1710
-.L1778:
-	mov	w19, 0
-	b	.L1707
-.L1710:
-	ldr	x25, [x0, 3992]
+	bls	.L1730
+.L1729:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w1, [x0, 3984]
+	cbnz	w1, .L1731
+.L1797:
+	mov	w20, 0
+	b	.L1728
+.L1731:
+	ldr	x26, [x0, 3992]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
-	ldr	w2, [x25]
+	ldr	w2, [x26]
 	cmp	w2, w1
-	bne	.L1712
+	bne	.L1733
 	ldrh	w1, [x0, 10]
 	mov	x0, 262140
-	mov	w19, 65535
-	add	x2, x25, x0
+	mov	w20, 65535
+	add	x2, x26, x0
 	mov	w3, 4097
 	mov	w0, 0
-.L1716:
+.L1737:
 	ldr	w4, [x2]
-	cbnz	w4, .L1713
-	ldr	w4, [x25, w0, uxtw 2]
+	cbnz	w4, .L1734
+	ldr	w4, [x26, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w4, [x2], -4
 	cmp	w0, w3
-	sub	w19, w19, #1
+	sub	w20, w20, #1
 	csel	w0, w0, wzr, cc
-	cmp	w19, 4096
-	bne	.L1716
-	mov	w19, 512
-	b	.L1715
-.L1713:
-	add	w19, w19, 127
-	lsr	w19, w19, 7
-.L1715:
+	cmp	w20, 4096
+	bne	.L1737
+	mov	w20, 512
+	b	.L1736
+.L1734:
+	add	w20, w20, 127
+	lsr	w20, w20, 7
+.L1736:
 	ubfiz	w0, w1, 2, 14
-	add	w21, w19, 4
-	add	x27, x20, :lo12:.LANCHOR0
-	mov	w22, 0
+	add	w22, w20, 4
+	add	x19, x21, :lo12:.LANCHOR0
+	mov	w23, 0
 	str	wzr, [x29, 140]
-	udiv	w21, w21, w0
-	lsl	w0, w19, 7
+	udiv	w22, w22, w0
+	lsl	w0, w20, 7
 	str	w0, [x29, 128]
-	add	w21, w21, 1
-.L1739:
-	ldr	x0, [x27, 4000]
+	add	w22, w22, 1
+.L1759:
+	ldr	x0, [x19, 4000]
 	mov	w1, 0
 	mov	x2, 512
 	bl	memset
-	ldrh	w28, [x27, 10]
-	ldr	x1, [x27, 3400]
-	mul	w23, w28, w22
-	cbz	x1, .L1747
-	ldr	x0, [x27, 3408]
-	mov	w24, 6
+	ldrh	w28, [x19, 10]
+	ldr	x1, [x19, 3400]
+	mul	w24, w28, w23
+	cbz	x1, .L1767
+	ldr	x0, [x19, 3408]
+	mov	w25, 6
 	cmp	x0, 0
 	mov	w0, 9
-	csel	w24, w24, w0, eq
-.L1717:
-	ldr	x3, [x27, 3376]
-	mov	w1, w23
+	csel	w25, w25, w0, eq
+.L1738:
+	ldr	x3, [x19, 3376]
+	mov	w1, w24
 	mov	w0, 0
 	blr	x3
-	cmp	w21, 1
-	beq	.L1718
-	ldr	x2, [x27, 3376]
-	add	w1, w28, w23
+	cmp	w22, 1
+	beq	.L1739
+	ldr	x2, [x19, 3376]
+	add	w1, w28, w24
 	mov	w0, 0
 	blr	x2
-.L1718:
-	cmp	w24, 9
-	bne	.L1749
-	ldr	x26, [x27, 4000]
+.L1739:
+	cmp	w25, 9
+	bne	.L1769
+	ldr	x27, [x19, 4000]
 	mov	w2, 1024
 	mov	w1, 0
-	mov	x0, x26
+	mov	x0, x27
 	bl	ftl_memset
 	mov	w0, 18766
-	add	x6, x26, 12
+	mov	w1, 12
 	movk	w0, 0x464e, lsl 16
-	str	w0, [x26]
-	mov	w0, 12
-	str	w0, [x26, 4]
+	stp	w0, w1, [x27]
 	mov	w0, 4
-	strb	w0, [x26, 17]
-	ldrh	w0, [x27, 10]
-	mov	x2, 0
-	strh	w0, [x26, 18]
+	strb	w0, [x27, 17]
+	ldrh	w0, [x19, 10]
+	strh	w0, [x27, 18]
+	strb	wzr, [x27, 16]
 	mov	w0, 16
-	strb	w0, [x26, 21]
-	mov	w0, 42982
-	strb	wzr, [x26, 16]
-	strb	wzr, [x26, 20]
-	movk	w0, 0x47c6, lsl 16
-	strh	wzr, [x26, 22]
-	str	wzr, [x26, 12]
-.L1720:
-	lsr	w1, w0, 2
-	ldrb	w3, [x6, x2]
-	add	w1, w1, w0, lsl 5
-	add	x2, x2, 1
-	add	w1, w1, w3
-	cmp	x2, 12
-	eor	w0, w0, w1
-	bne	.L1720
-	str	w0, [x26, 8]
-.L1719:
-	mul	w0, w21, w28
-	mov	x7, x25
+	strb	wzr, [x27, 20]
+	strb	w0, [x27, 21]
+	add	x0, x27, 12
+	strh	wzr, [x27, 22]
+	str	wzr, [x27, 12]
+	bl	js_hash
+	str	w0, [x27, 8]
+.L1740:
+	mul	w0, w22, w28
+	mov	x6, x26
 	str	w0, [x29, 136]
 	mov	x28, 0
-	add	w0, w23, 1
+	add	w0, w24, 1
 	str	w0, [x29, 132]
-.L1721:
+.L1741:
 	ldr	w0, [x29, 136]
 	mov	w1, w28
 	cmp	w28, w0
-	bcs	.L1728
-	cmp	w24, 9
-	bne	.L1722
+	bcs	.L1748
+	cmp	w25, 9
+	bne	.L1742
 	ldr	w0, [x29, 132]
 	add	w0, w0, w1
-.L1776:
+.L1795:
 	str	w0, [x29, 144]
 	mov	w0, 61424
 	str	w0, [x29, 148]
 	cmp	w1, 0
-	ccmp	w24, 9, 0, eq
-	bne	.L1724
-	ldr	x1, [x27, 3400]
-	add	x8, x27, 3368
-	str	x7, [x29, 104]
+	ccmp	w25, 9, 0, eq
+	bne	.L1744
+	ldr	x1, [x19, 3400]
+	add	x7, x19, 3368
+	str	x6, [x29, 104]
 	mov	w0, 70
-	str	x8, [x29, 120]
+	str	x7, [x29, 120]
 	blr	x1
-	ldr	x8, [x29, 120]
+	ldr	x7, [x29, 120]
 	add	x3, x29, 144
-	mov	x2, x26
-	mov	w1, w23
-	str	x8, [x29, 112]
+	mov	x2, x27
+	mov	w1, w24
+	str	x7, [x29, 112]
 	mov	w0, 0
-	ldr	x9, [x8, 16]
-	blr	x9
+	ldr	x8, [x7, 16]
+	blr	x8
 	mov	w1, w0
-	ldr	x8, [x29, 112]
-	ldrb	w0, [x27, 22]
+	ldr	x7, [x29, 112]
+	ldrb	w0, [x19, 22]
 	str	w1, [x29, 120]
-	ldr	x2, [x8, 32]
+	ldr	x2, [x7, 32]
 	blr	x2
 	ldr	w1, [x29, 120]
-	ldr	x7, [x29, 104]
+	ldr	x6, [x29, 104]
 	cmn	w1, #1
-	bne	.L1725
-.L1728:
-	ldrb	w0, [x27, 14]
+	bne	.L1745
+.L1748:
+	ldrb	w0, [x19, 14]
 	str	w0, [x29, 120]
-	ldrh	w0, [x27, 10]
-	ldr	x24, [x27, 4000]
-	mul	w1, w0, w22
+	ldrh	w0, [x19, 10]
+	ldr	x25, [x19, 4000]
+	mul	w1, w0, w23
 	str	w1, [x29, 136]
-	add	x1, x27, 3368
+	add	x1, x19, 3368
 	ldr	x2, [x1, 32]
-	cbnz	x2, .L1726
+	cbnz	x2, .L1746
 	mov	w1, 6
-.L1777:
-	mul	w0, w21, w0
+.L1796:
+	mul	w0, w22, w0
 	mov	x28, 0
-	mov	w26, 61424
+	mov	w27, 61424
 	str	w0, [x29, 112]
 	str	w1, [x29, 132]
-.L1730:
+.L1750:
 	ldr	w0, [x29, 112]
 	mov	w1, w28
-	cmp	w0, w28
-	bls	.L1734
+	cmp	w28, w0
+	bcs	.L1754
 	ldr	w0, [x29, 132]
 	cmp	w28, 0
 	ccmp	w0, 9, 0, eq
-	bne	.L1731
-	ldr	x1, [x27, 3400]
+	bne	.L1751
+	ldr	x1, [x19, 3400]
 	mov	w0, 70
 	blr	x1
-	ldr	x1, [x27, 3408]
+	ldr	x1, [x19, 3408]
 	mov	w0, 2
 	blr	x1
-	ldr	x8, [x27, 3392]
+	ldr	x7, [x19, 3392]
 	add	x3, x29, 144
 	ldr	w1, [x29, 136]
-	mov	x2, x24
+	mov	x2, x25
 	mov	w0, 0
-	blr	x8
+	blr	x7
 	ldrb	w0, [x29, 120]
-	ldr	x1, [x27, 3408]
+	ldr	x1, [x19, 3408]
 	blr	x1
-	ldrb	w0, [x27, 22]
-	ldr	x1, [x27, 3400]
+	ldrb	w0, [x19, 22]
+	ldr	x1, [x19, 3400]
 	blr	x1
-	ldr	w0, [x24]
+	ldr	w0, [x25]
 	mov	w1, 18766
 	movk	w1, 0x464e, lsl 16
 	cmp	w0, w1
-	beq	.L1732
-.L1734:
-	ldr	x0, [x27, 4000]
-	mov	x1, x25
-	mov	w23, 0
+	beq	.L1752
+.L1754:
+	ldr	x0, [x19, 4000]
+	mov	x1, x26
+	mov	w24, 0
 	mov	x2, x0
-.L1733:
-	mov	x24, x2
+.L1753:
+	mov	x25, x2
 	mov	x28, x1
 	add	x2, x2, 4
 	add	x1, x1, 4
-	ldr	w4, [x24]
+	ldr	w4, [x25]
 	ldr	w3, [x28]
 	cmp	w4, w3
-	beq	.L1736
+	beq	.L1756
 	mov	x2, 512
 	mov	w1, 0
 	bl	memset
-	ldr	w2, [x24]
-	mov	w1, w22
+	ldr	w2, [x25]
+	mov	w1, w23
 	ldr	w3, [x28]
-	mov	w4, w23
-	adrp	x0, .LC115
-	add	x0, x0, :lo12:.LC115
+	mov	w4, w24
+	adrp	x0, .LC118
+	add	x0, x0, :lo12:.LC118
 	bl	sftl_printk
-	ldrh	w1, [x27, 10]
+	ldrh	w1, [x19, 10]
 	mov	w0, 0
-	ldr	x2, [x27, 3376]
-	mul	w1, w1, w22
+	ldr	x2, [x19, 3376]
+	mul	w1, w1, w23
 	blr	x2
-.L1737:
-	add	w22, w22, w21
-	cmp	w22, 15
-	bls	.L1739
+.L1757:
+	add	w23, w23, w22
+	cmp	w23, 15
+	bls	.L1759
 	ldr	w0, [x29, 140]
-	cbnz	w0, .L1740
-.L1712:
-	mov	w19, -1
-.L1740:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x20, 3992]
-	str	wzr, [x20, 3988]
+	cbnz	w0, .L1760
+.L1733:
+	mov	w20, -1
+.L1760:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x0, [x21, 3992]
+	str	wzr, [x21, 3984]
 	bl	kfree
-	ldr	x0, [x20, 4000]
+	ldr	x0, [x21, 4000]
 	bl	kfree
-.L1707:
-	mov	w0, w19
+.L1728:
+	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12155,130 +12297,130 @@ FtlWriteToIDB:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1747:
-	mov	w24, 6
-	b	.L1717
-.L1749:
-	mov	x26, 0
-	b	.L1719
-.L1722:
-	add	w0, w1, w23
+.L1767:
+	mov	w25, 6
+	b	.L1738
+.L1769:
+	mov	x27, 0
+	b	.L1740
+.L1742:
+	add	w0, w1, w24
 	lsl	w0, w0, 2
-	b	.L1776
-.L1724:
-	ldr	x8, [x27, 3384]
+	b	.L1795
+.L1744:
+	ldr	x7, [x19, 3384]
 	add	x3, x29, 144
-	mov	x2, x7
-	add	w1, w1, w23
+	mov	x2, x6
+	add	w1, w1, w24
 	mov	w0, 0
-	str	x7, [x29, 120]
-	blr	x8
+	str	x6, [x29, 120]
+	blr	x7
 	cmn	w0, #1
-	beq	.L1728
-	ldr	x7, [x29, 120]
-	add	x7, x7, 2048
-.L1725:
+	beq	.L1748
+	ldr	x6, [x29, 120]
+	add	x6, x6, 2048
+.L1745:
 	add	x28, x28, 1
-	b	.L1721
-.L1726:
+	b	.L1741
+.L1746:
 	ldr	x1, [x1, 40]
-	mov	w23, 6
+	mov	w24, 6
 	cmp	x1, 0
 	mov	w1, 9
-	csel	w1, w23, w1, eq
-	b	.L1777
-.L1731:
-	ldr	x7, [x27, 3392]
+	csel	w1, w24, w1, eq
+	b	.L1796
+.L1751:
+	ldr	x6, [x19, 3392]
 	add	x3, x29, 144
 	ldr	w0, [x29, 136]
-	mov	x2, x24
-	add	w1, w0, w1
+	mov	x2, x25
+	add	w1, w1, w0
 	mov	w0, 0
-	blr	x7
+	blr	x6
 	cmn	w0, #1
-	beq	.L1734
+	beq	.L1754
 	ldr	w0, [x29, 148]
-	cmp	w0, w26
-	bne	.L1734
-	add	x24, x24, 2048
-.L1732:
+	cmp	w0, w27
+	bne	.L1754
+	add	x25, x25, 2048
+.L1752:
 	add	x28, x28, 1
-	b	.L1730
-.L1736:
+	b	.L1750
+.L1756:
 	ldr	w3, [x29, 128]
-	add	w23, w23, 1
-	cmp	w23, w3
-	bne	.L1733
+	add	w24, w24, 1
+	cmp	w24, w3
+	bne	.L1753
 	ldr	w0, [x29, 140]
 	add	w0, w0, 1
 	str	w0, [x29, 140]
 	cmp	w0, 5
-	bls	.L1737
-	b	.L1740
-.L1709:
-	mov	w21, w1
-	mov	x22, x2
+	bls	.L1757
+	b	.L1760
+.L1730:
+	mov	w22, w1
+	mov	x23, x2
 	cmp	w0, 64
-	bne	.L1741
-	add	x25, x20, :lo12:.LANCHOR0
+	bne	.L1761
+	add	x20, x21, :lo12:.LANCHOR0
 	mov	w0, 262144
 	bl	ftl_malloc
-	str	x0, [x25, 3992]
+	str	x0, [x20, 3992]
 	mov	w0, 262144
 	bl	ftl_malloc
 	mov	x1, x0
-	ldr	x0, [x25, 3992]
-	str	x1, [x25, 4000]
-	cbz	x0, .L1742
-	cbz	x1, .L1742
+	ldr	x0, [x20, 3992]
+	str	x1, [x20, 4000]
+	cbz	x0, .L1762
+	cbz	x1, .L1762
 	mov	w1, 1
 	mov	w2, 262144
-	str	w1, [x25, 3988]
+	str	w1, [x20, 3984]
 	mov	w1, 0
 	bl	ftl_memset
-.L1741:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldr	w0, [x20, 3988]
-	cbz	w0, .L1778
+.L1761:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	w0, [x21, 3984]
+	cbz	w0, .L1797
 	cmp	w19, 63
-	ldr	x1, [x20, 3992]
-	bhi	.L1744
+	ldr	x1, [x21, 3992]
+	bhi	.L1764
 	mov	w0, 64
 	sub	w19, w0, w19
-	sub	w21, w21, w19
+	sub	w22, w22, w19
 	ubfiz	x19, x19, 9, 25
-	add	x22, x22, x19
+	add	x23, x23, x19
 	mov	x20, x1
-.L1745:
-	cmp	w24, 575
-	bls	.L1746
-	sub	w21, w21, w23
-	sub	w21, w21, #446
-.L1746:
-	mov	w4, w21
+.L1765:
+	cmp	w25, 575
+	bls	.L1766
+	sub	w22, w22, w24
+	sub	w22, w22, #446
+.L1766:
+	mov	w4, w22
 	mov	x3, x20
 	mov	w2, 262144
-	adrp	x0, .LC117
-	add	x0, x0, :lo12:.LC117
+	adrp	x0, .LC120
+	add	x0, x0, :lo12:.LC120
 	bl	sftl_printk
-	lsl	w2, w21, 9
-	mov	x1, x22
+	lsl	w2, w22, 9
+	mov	x1, x23
 	mov	x0, x20
 	bl	ftl_memcpy
-	b	.L1778
-.L1742:
+	b	.L1797
+.L1762:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x1, x1, 728
-	adrp	x0, .LC116
-	add	x0, x0, :lo12:.LC116
+	add	x1, x1, 752
+	adrp	x0, .LC119
+	add	x0, x0, :lo12:.LC119
 	bl	sftl_printk
-	b	.L1741
-.L1744:
+	b	.L1761
+.L1764:
 	lsl	w20, w19, 7
 	sub	w20, w20, #8192
 	add	x20, x1, x20, lsl 2
-	b	.L1745
+	b	.L1765
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	2
 	.global	sftl_write
@@ -12309,12 +12451,12 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x3, [x2, 4008]
-	cbnz	x3, .L1783
+	cbnz	x3, .L1802
 	str	x0, [x2, 4008]
 	mov	w0, 0
 	str	x1, [x2, 4016]
 	ret
-.L1783:
+.L1802:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12333,38 +12475,38 @@ rk_sftl_vendor_storage_init:
 	stp	x25, x26, [sp, 64]
 	bl	ftl_malloc
 	str	x0, [x22, 4024]
-	cbz	x0, .L1790
+	cbz	x0, .L1809
 	mov	w26, 22084
 	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
 	movk	w26, 0x524b, lsl 16
-.L1788:
+.L1807:
 	ldr	x3, [x22, 4008]
 	mov	w1, 128
 	ldr	x2, [x22, 4024]
 	lsl	w0, w23, 7
 	blr	x3
 	mov	w21, w0
-	cbnz	w0, .L1786
+	cbnz	w0, .L1805
 	ldr	x19, [x22, 4024]
 	ldr	w0, [x19]
 	cmp	w0, w26
-	bne	.L1787
+	bne	.L1806
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1787
+	bne	.L1806
 	cmp	w0, w24
-	bls	.L1787
+	bls	.L1806
 	mov	w25, w23
 	mov	w24, w0
-.L1787:
+.L1806:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1788
-	cbz	w24, .L1789
+	bne	.L1807
+	cbz	w24, .L1808
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
@@ -12372,15 +12514,15 @@ rk_sftl_vendor_storage_init:
 	lsl	w0, w25, 7
 	blr	x3
 	mov	w21, w0
-	cbz	w0, .L1784
-.L1786:
+	cbz	w0, .L1803
+.L1805:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, -1
 	ldr	x0, [x20, 4024]
 	bl	kfree
 	str	xzr, [x20, 4024]
-	b	.L1784
-.L1789:
+	b	.L1803
+.L1808:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -12393,7 +12535,7 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1784:
+.L1803:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12401,9 +12543,9 @@ rk_sftl_vendor_storage_init:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1790:
+.L1809:
 	mov	w21, -12
-	b	.L1784
+	b	.L1803
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -12411,20 +12553,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR0+4024
 	ldr	x4, [x3, #:lo12:.LANCHOR0+4024]
-	cbz	x4, .L1798
+	cbz	x4, .L1817
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1795:
+.L1814:
 	cmp	w3, w6
-	bcc	.L1797
-.L1798:
+	bcc	.L1816
+.L1817:
 	mov	w0, -1
 	ret
-.L1797:
+.L1816:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1796
+	bne	.L1815
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -12442,9 +12584,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1796:
+.L1815:
 	add	w3, w3, 1
-	b	.L1795
+	b	.L1814
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -12460,7 +12602,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 4024]
-	cbz	x19, .L1818
+	cbz	x19, .L1837
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -12469,12 +12611,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1805:
+.L1824:
 	cmp	w20, w3
-	bcc	.L1813
+	bcc	.L1832
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1818
+	bhi	.L1837
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -12494,11 +12636,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1820
-.L1813:
+	b	.L1839
+.L1832:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1806
+	bne	.L1825
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -12506,17 +12648,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1807
+	bls	.L1826
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1818
+	bhi	.L1837
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1808:
+.L1827:
 	cmp	w20, w26
-	bcc	.L1809
+	bcc	.L1828
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -12533,7 +12675,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1820:
+.L1839:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR0
@@ -12552,7 +12694,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1803:
+.L1822:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12560,7 +12702,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1809:
+.L1828:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -12584,21 +12726,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1808
-.L1807:
+	b	.L1827
+.L1826:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1820
-.L1806:
+	b	.L1839
+.L1825:
 	add	w20, w20, 1
-	b	.L1805
-.L1818:
+	b	.L1824
+.L1837:
 	mov	w0, -1
-	b	.L1803
+	b	.L1822
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12612,19 +12754,19 @@ rk_sftl_vendor_storage_ioctl:
 	str	x21, [sp, 32]
 	mov	w21, w1
 	bl	ftl_malloc
-	cbz	x0, .L1835
+	cbz	x0, .L1854
 	mov	w1, 30209
 	mov	x19, x0
 	movk	w1, 0x4004, lsl 16
 	cmp	w21, w1
-	beq	.L1824
+	beq	.L1843
 	add	w1, w1, 1
 	cmp	w21, w1
-	beq	.L1825
-.L1845:
+	beq	.L1844
+.L1864:
 	mov	x20, -14
-	b	.L1823
-.L1824:
+	b	.L1842
+.L1843:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12637,34 +12779,34 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1831
+	cbz	x3, .L1850
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1845
+	cbnz	x0, .L1864
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L1829
-.L1830:
+	beq	.L1848
+.L1849:
 	mov	x20, -1
-.L1823:
+.L1842:
 	mov	x0, x19
 	bl	kfree
-.L1821:
+.L1840:
 	mov	x0, x20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1829:
+.L1848:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_read
 	cmn	w0, #1
-	beq	.L1830
+	beq	.L1849
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
@@ -12675,14 +12817,14 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1845
+	cbz	x3, .L1864
 	mov	x0, x20
 	mov	x1, x19
 	mov	x20, 0
 	bl	__arch_copy_to_user
-	cbz	x0, .L1823
-	b	.L1845
-.L1825:
+	cbz	x0, .L1842
+	b	.L1864
+.L1844:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12695,19 +12837,19 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1831
+	cbz	x3, .L1850
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1845
+	cbnz	x0, .L1864
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1830
+	bne	.L1849
 	ldrh	w2, [x19, 6]
 	cmp	w2, 4087
-	bhi	.L1830
+	bhi	.L1849
 	add	w2, w2, 8
 	mov	x0, x20
 	sxtw	x2, w2
@@ -12717,28 +12859,28 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1833
+	cbz	x3, .L1852
 	mov	x1, x20
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1845
+	cbnz	x0, .L1864
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1823
-.L1831:
+	b	.L1842
+.L1850:
 	str	xzr, [x19]
-	b	.L1845
-.L1833:
+	b	.L1864
+.L1852:
 	mov	w1, 0
 	mov	x0, x19
 	bl	memset
-	b	.L1845
-.L1835:
+	b	.L1864
+.L1854:
 	mov	x20, -1
-	b	.L1821
+	b	.L1840
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -12905,179 +13047,184 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
+	.type	__func__.3799, %object
+	.size	__func__.3799, 17
+__func__.3799:
+	.string	"INSERT_DATA_LIST"
+	.zero	7
 	.type	__func__.3794, %object
 	.size	__func__.3794, 17
 __func__.3794:
-	.string	"INSERT_DATA_LIST"
-	.zero	7
-	.type	__func__.3789, %object
-	.size	__func__.3789, 17
-__func__.3789:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.3825, %object
-	.size	__func__.3825, 17
-__func__.3825:
+	.type	__func__.3830, %object
+	.size	__func__.3830, 17
+__func__.3830:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.3857, %object
-	.size	__func__.3857, 22
-__func__.3857:
+	.type	__func__.3862, %object
+	.size	__func__.3862, 22
+__func__.3862:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.3964, %object
-	.size	__func__.3964, 22
-__func__.3964:
+	.type	__func__.3969, %object
+	.size	__func__.3969, 22
+__func__.3969:
 	.string	"select_l2p_ram_region"
 	.zero	2
-	.type	__func__.4287, %object
-	.size	__func__.4287, 16
-__func__.4287:
+	.type	__func__.4296, %object
+	.size	__func__.4296, 16
+__func__.4296:
 	.string	"make_superblock"
-	.type	__func__.4462, %object
-	.size	__func__.4462, 19
-__func__.4462:
+	.type	__func__.4471, %object
+	.size	__func__.4471, 19
+__func__.4471:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.16114, %object
-	.size	__func__.16114, 17
-__func__.16114:
+	.type	__func__.16134, %object
+	.size	__func__.16134, 17
+__func__.16134:
 	.string	"FlashEraseBlocks"
 	.zero	7
-	.type	__func__.3899, %object
-	.size	__func__.3899, 26
-__func__.3899:
+	.type	__func__.3904, %object
+	.size	__func__.3904, 26
+__func__.3904:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.3404, %object
-	.size	__func__.3404, 11
-__func__.3404:
+	.type	__func__.3409, %object
+	.size	__func__.3409, 11
+__func__.3409:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.3631, %object
-	.size	__func__.3631, 14
-__func__.3631:
+	.type	__func__.3636, %object
+	.size	__func__.3636, 14
+__func__.3636:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
-	.type	__func__.4308, %object
-	.size	__func__.4308, 18
-__func__.4308:
+	.type	__func__.4317, %object
+	.size	__func__.4317, 18
+__func__.4317:
 	.string	"SupperBlkListInit"
 	.zero	6
-	.type	__func__.16071, %object
-	.size	__func__.16071, 15
-__func__.16071:
+	.type	__func__.16091, %object
+	.size	__func__.16091, 15
+__func__.16091:
 	.string	"FlashReadPages"
 	.zero	1
-	.type	__func__.4076, %object
-	.size	__func__.4076, 14
-__func__.4076:
+	.type	__func__.4081, %object
+	.size	__func__.4081, 14
+__func__.4081:
 	.string	"FtlScanSysBlk"
 	.zero	2
-	.type	__func__.3674, %object
-	.size	__func__.3674, 11
-__func__.3674:
+	.type	__func__.3679, %object
+	.size	__func__.3679, 11
+__func__.3679:
 	.string	"FtlLoadBbt"
 	.zero	5
-	.type	__func__.4133, %object
-	.size	__func__.4133, 15
-__func__.4133:
-	.string	"FtlLoadSysInfo"
-	.zero	1
-	.type	__func__.16090, %object
-	.size	__func__.16090, 15
-__func__.16090:
+	.type	__func__.16110, %object
+	.size	__func__.16110, 15
+__func__.16110:
 	.string	"FlashProgPages"
 	.zero	1
-	.type	__func__.3925, %object
-	.size	__func__.3925, 31
-__func__.3925:
+	.type	__func__.4443, %object
+	.size	__func__.4443, 25
+__func__.4443:
+	.string	"allocate_data_superblock"
+	.zero	7
+	.type	__func__.4484, %object
+	.size	__func__.4484, 16
+__func__.4484:
+	.string	"update_vpc_list"
+	.type	__func__.4491, %object
+	.size	__func__.4491, 20
+__func__.4491:
+	.string	"decrement_vpc_count"
+	.zero	4
+	.type	__func__.3930, %object
+	.size	__func__.3930, 31
+__func__.3930:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.3939, %object
-	.size	__func__.3939, 16
-__func__.3939:
+	.type	__func__.3944, %object
+	.size	__func__.3944, 16
+__func__.3944:
 	.string	"FtlMapWritePage"
-	.type	__func__.3866, %object
-	.size	__func__.3866, 16
-__func__.3866:
+	.type	__func__.3871, %object
+	.size	__func__.3871, 16
+__func__.3871:
 	.string	"load_l2p_region"
-	.type	__func__.3910, %object
-	.size	__func__.3910, 15
-__func__.3910:
+	.type	__func__.3915, %object
+	.size	__func__.3915, 15
+__func__.3915:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.3981, %object
-	.size	__func__.3981, 9
-__func__.3981:
+	.type	__func__.3986, %object
+	.size	__func__.3986, 9
+__func__.3986:
 	.string	"log2phys"
 	.zero	7
-	.type	__func__.4196, %object
-	.size	__func__.4196, 16
-__func__.4196:
+	.type	__func__.4205, %object
+	.size	__func__.4205, 16
+__func__.4205:
 	.string	"FtlReUsePrevPpa"
-	.type	__func__.4349, %object
-	.size	__func__.4349, 14
-__func__.4349:
-	.string	"ftl_check_vpc"
-	.zero	2
-	.type	__func__.4434, %object
-	.size	__func__.4434, 25
-__func__.4434:
-	.string	"allocate_data_superblock"
-	.zero	7
-	.type	__func__.4475, %object
-	.size	__func__.4475, 16
-__func__.4475:
-	.string	"update_vpc_list"
-	.type	__func__.4482, %object
-	.size	__func__.4482, 20
-__func__.4482:
-	.string	"decrement_vpc_count"
-	.zero	4
-	.type	__func__.4230, %object
-	.size	__func__.4230, 22
-__func__.4230:
+	.type	__func__.4239, %object
+	.size	__func__.4239, 22
+__func__.4239:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.4054, %object
-	.size	__func__.4054, 15
-__func__.4054:
+	.type	__func__.4358, %object
+	.size	__func__.4358, 14
+__func__.4358:
+	.string	"ftl_check_vpc"
+	.zero	2
+	.type	__func__.4059, %object
+	.size	__func__.4059, 15
+__func__.4059:
 	.string	"FtlVpcTblFlush"
 	.zero	1
-	.type	__func__.4333, %object
-	.size	__func__.4333, 21
-__func__.4333:
+	.type	__func__.4342, %object
+	.size	__func__.4342, 21
+__func__.4342:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.4455, %object
-	.size	__func__.4455, 29
-__func__.4455:
+	.type	__func__.4464, %object
+	.size	__func__.4464, 29
+__func__.4464:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.3528, %object
-	.size	__func__.3528, 13
-__func__.3528:
+	.type	__func__.3533, %object
+	.size	__func__.3533, 13
+__func__.3533:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.4552, %object
-	.size	__func__.4552, 19
-__func__.4552:
+	.type	__func__.4561, %object
+	.size	__func__.4561, 19
+__func__.4561:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.4663, %object
-	.size	__func__.4663, 23
-__func__.4663:
+	.type	__func__.4672, %object
+	.size	__func__.4672, 23
+__func__.4672:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.3556, %object
-	.size	__func__.3556, 9
-__func__.3556:
+	.type	__func__.3561, %object
+	.size	__func__.3561, 9
+__func__.3561:
 	.string	"FtlWrite"
 	.zero	7
-	.type	__func__.16229, %object
-	.size	__func__.16229, 14
-__func__.16229:
+	.type	__func__.4137, %object
+	.size	__func__.4137, 15
+__func__.4137:
+	.string	"FtlLoadSysInfo"
+	.zero	1
+	.type	__func__.4159, %object
+	.size	__func__.4159, 18
+__func__.4159:
+	.string	"FtlMapTblRecovery"
+	.zero	6
+	.type	__func__.16249, %object
+	.size	__func__.16249, 14
+__func__.16249:
 	.string	"FtlWriteToIDB"
 	.zero	2
 	.type	rk_sftl_vendor_storage_fops, %object
@@ -13109,7 +13256,7 @@ power_up_flag:
 rkflash_vender_storage_dev:
 	.word	255
 	.zero	4
-	.xword	.LC118
+	.xword	.LC121
 	.xword	rk_sftl_vendor_storage_fops
 	.zero	56
 	.bss
@@ -13414,10 +13561,9 @@ c_ftl_nand_data_op_blks_per_plane:
 	.zero	2
 	.zero	2
 	.type	gSysInfo, %object
-	.size	gSysInfo, 12
+	.size	gSysInfo, 16
 gSysInfo:
-	.zero	12
-	.zero	4
+	.zero	16
 	.type	g_gc_superblock, %object
 	.size	g_gc_superblock, 48
 g_gc_superblock:
@@ -13670,15 +13816,6 @@ g_recovery_page_min_ver:
 	.size	req_sys, 32
 req_sys:
 	.zero	32
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
-	.zero	4
-	.zero	4
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 64
-gVendorBlkInfo:
-	.zero	64
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -13692,6 +13829,10 @@ g_recovery_page_num:
 	.size	g_recovery_ppa_tbl, 128
 g_recovery_ppa_tbl:
 	.zero	128
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 64
+gVendorBlkInfo:
+	.zero	64
 	.type	g_ect_tbl_power_up_flush, %object
 	.size	g_ect_tbl_power_up_flush, 2
 g_ect_tbl_power_up_flush:
@@ -13717,10 +13858,15 @@ g_gc_cur_blk_max_valid_pages:
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
+	.zero	4
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
 	.zero	4
 	.type	idb_need_write_back, %object
 	.size	idb_need_write_back, 4
 idb_need_write_back:
+	.zero	4
 	.zero	4
 	.type	idb_buf, %object
 	.size	idb_buf, 8
@@ -13892,7 +14038,7 @@ gp_last_act_superblock:
 .LC69:
 	.string	"free %d. [0x%x] 0x%x  0x%x\n"
 .LC70:
-	.string	"SFTL version: 5.0.49 20181030"
+	.string	"SFTL version: 5.0.50 20181227"
 .LC71:
 	.string	"%s\n"
 .LC72:
@@ -13930,43 +14076,43 @@ gp_last_act_superblock:
 .LC88:
 	.string	"prog read d error: = %x %x %x\n"
 .LC89:
-	.string	"FtlMapWritePage error = %x \n"
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
 .LC90:
-	.string	"FtlMapWritePage error = %x error count = %d\n"
+	.string	"FtlBbmTblFlush error:%x\n"
 .LC91:
-	.string	"region_id = %x phyAddr = %x\n"
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
 .LC92:
-	.string	"spare:"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC93:
-	.string	"map_ppn:"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC94:
-	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
+	.string	"FtlMapWritePage error = %x \n"
 .LC95:
-	.string	"...%s enter...\n"
+	.string	"FtlMapWritePage error = %x error count = %d\n"
 .LC96:
-	.string	"FtlCheckVpc2 %x = %x  %x\n"
+	.string	"region_id = %x phyAddr = %x\n"
 .LC97:
-	.string	"free blk vpc error %x = %x  %x\n"
+	.string	"spare:"
 .LC98:
-	.string	"ftl_scan_all_data = %x\n"
+	.string	"map_ppn:"
 .LC99:
-	.string	"scan lpa = %x ppa= %x\n"
+	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
 .LC100:
-	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"spuer block %x vpn is 0\n "
 .LC101:
-	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
+	.string	"...%s enter...\n"
 .LC102:
-	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+	.string	"FtlCheckVpc2 %x = %x  %x\n"
 .LC103:
-	.string	"FtlBbmTblFlush error:%x\n"
+	.string	"free blk vpc error %x = %x  %x\n"
 .LC104:
-	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+	.string	"ftl_scan_all_data = %x\n"
 .LC105:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"scan lpa = %x ppa= %x\n"
 .LC106:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC107:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
 .LC108:
 	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
 .LC109:
@@ -13982,10 +14128,16 @@ gp_last_act_superblock:
 .LC114:
 	.string	"FtlWrite: lpa error:%x %x\n"
 .LC115:
-	.string	"write_idblock fail! %x %x %x %x\n"
+	.string	"%s hash error this.id =%x page =%x pre_id =%x hash =%x hash_r =%x\n"
 .LC116:
-	.string	"%s idb buffer alloc fail\n"
+	.string	"%s last blk_id =%x page =%x hash error hash =%x hash_r =%x\n"
 .LC117:
-	.string	"%p %x %p %x\n"
+	.string	"%s scan blk_id =%x page =%x hash error hash =%x hash_r =%x\n"
 .LC118:
+	.string	"write_idblock fail! %x %x %x %x\n"
+.LC119:
+	.string	"%s idb buffer alloc fail\n"
+.LC120:
+	.string	"%p %x %p %x\n"
+.LC121:
 	.string	"vendor_storage"
-- 
2.35.3

