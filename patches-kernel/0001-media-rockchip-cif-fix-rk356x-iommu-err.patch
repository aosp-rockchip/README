From 21640649a51a7397a29ca32d9a3a9a8bb74786e6 Mon Sep 17 00:00:00 2001
From: Allon Huang <allon.huang@rock-chips.com>
Date: Fri, 29 Jan 2021 18:51:32 +0800
Subject: [PATCH] media: rockchip: cif: fix rk356x iommu err

Signed-off-by: Allon Huang <allon.huang@rock-chips.com>
Change-Id: I249cfb2bd8023e6ae498fb0ee9dc168fe3c0f534
---
 drivers/media/platform/rockchip/cif/capture.c | 18 ++++++---
 drivers/media/platform/rockchip/cif/dev.c     | 39 ++++---------------
 drivers/media/platform/rockchip/cif/hw.c      |  8 ++--
 drivers/media/platform/rockchip/cif/version.h |  1 +
 4 files changed, 25 insertions(+), 41 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index b04071fe881a..6a33a2aaa8f2 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -1661,6 +1661,7 @@ static void rkcif_buf_queue(struct vb2_buffer *vb)
 	struct rkcif_stream *stream = queue->drv_priv;
 	struct v4l2_pix_format_mplane *pixm = &stream->pixm;
 	const struct cif_output_fmt *fmt = stream->cif_fmt_out;
+	struct rkcif_hw *hw_dev = stream->cifdev->hw_dev;
 	unsigned long lock_flags = 0;
 	int i;
 
@@ -1671,14 +1672,14 @@ static void rkcif_buf_queue(struct vb2_buffer *vb)
 	for (i = 0; i < fmt->mplanes; i++) {
 		void *addr = vb2_plane_vaddr(vb, i);
 
-		if (stream->cifdev->iommu_en) {
+		if (hw_dev->iommu_en) {
 			struct sg_table *sgt = vb2_dma_sg_plane_desc(vb, i);
 
 			cifbuf->buff_addr[i] = sg_dma_address(sgt->sgl);
 		} else {
 			cifbuf->buff_addr[i] = vb2_dma_contig_plane_dma_addr(vb, i);
 		}
-		if (rkcif_debug && addr && !stream->cifdev->hw_dev->iommu_en) {
+		if (rkcif_debug && addr && !hw_dev->iommu_en) {
 			memset(addr, 0, pixm->plane_fmt[i].sizeimage);
 			v4l2_dbg(1, rkcif_debug, &stream->cifdev->v4l2_dev,
 				 "Clear buffer, size: 0x%08x\n",
@@ -1702,6 +1703,7 @@ static int rkcif_create_dummy_buf(struct rkcif_stream *stream)
 	u32 fourcc;
 	struct rkcif_dummy_buffer *dummy_buf = &stream->dummy_buf;
 	struct rkcif_device *dev = stream->cifdev;
+	struct rkcif_hw *hw_dev = dev->hw_dev;
 
 	/* get a maximum plane size */
 	dummy_buf->size = max3(stream->pixm.plane_fmt[0].bytesperline *
@@ -1719,7 +1721,7 @@ static int rkcif_create_dummy_buf(struct rkcif_stream *stream)
 	    fourcc == V4L2_PIX_FMT_UYVY || fourcc == V4L2_PIX_FMT_VYUY)
 		dummy_buf->size *= 2;
 
-	dummy_buf->vaddr = dma_alloc_coherent(dev->dev, dummy_buf->size,
+	dummy_buf->vaddr = dma_alloc_coherent(hw_dev->dev, dummy_buf->size,
 					      &dummy_buf->dma_addr,
 					      GFP_KERNEL);
 	if (!dummy_buf->vaddr) {
@@ -1738,9 +1740,10 @@ static void rkcif_destroy_dummy_buf(struct rkcif_stream *stream)
 {
 	struct rkcif_dummy_buffer *dummy_buf = &stream->dummy_buf;
 	struct rkcif_device *dev = stream->cifdev;
+	struct rkcif_hw *hw_dev = dev->hw_dev;
 
 	if (dummy_buf->vaddr)
-		dma_free_coherent(dev->dev, dummy_buf->size,
+		dma_free_coherent(hw_dev->dev, dummy_buf->size,
 				  dummy_buf->vaddr, dummy_buf->dma_addr);
 }
 
@@ -2522,11 +2525,13 @@ static int rkcif_init_vb2_queue(struct vb2_queue *q,
 				struct rkcif_stream *stream,
 				enum v4l2_buf_type buf_type)
 {
+	struct rkcif_hw *hw_dev = stream->cifdev->hw_dev;
+
 	q->type = buf_type;
 	q->io_modes = VB2_MMAP | VB2_DMABUF;
 	q->drv_priv = stream;
 	q->ops = &rkcif_vb2_ops;
-	if (stream->cifdev->iommu_en)
+	if (hw_dev->iommu_en)
 		q->mem_ops = &vb2_dma_sg_memops;
 	else
 		q->mem_ops = &vb2_dma_contig_memops;
@@ -2534,8 +2539,9 @@ static int rkcif_init_vb2_queue(struct vb2_queue *q,
 	q->min_buffers_needed = CIF_REQ_BUFS_MIN;
 	q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
 	q->lock = &stream->vnode.vlock;
-	q->dev = stream->cifdev->dev;
+	q->dev = hw_dev->dev;
 	q->allow_cache_hints = 1;
+	q->bidirectional = 1;
 
 	return vb2_queue_init(q);
 }
diff --git a/drivers/media/platform/rockchip/cif/dev.c b/drivers/media/platform/rockchip/cif/dev.c
index 8e3d245003d0..63dd9bb32f58 100644
--- a/drivers/media/platform/rockchip/cif/dev.c
+++ b/drivers/media/platform/rockchip/cif/dev.c
@@ -248,24 +248,6 @@ void rkcif_config_dvp_clk_sampling_edge(struct rkcif_device *dev,
 	}
 }
 
-static bool is_iommu_enable(struct device *dev)
-{
-	struct device_node *iommu;
-
-	iommu = of_parse_phandle(dev->of_node, "iommus", 0);
-	if (!iommu) {
-		dev_info(dev, "no iommu attached, using non-iommu buffers\n");
-		return false;
-	} else if (!of_device_is_available(iommu)) {
-		dev_info(dev, "iommu is disabled, using non-iommu buffers\n");
-		of_node_put(iommu);
-		return false;
-	}
-	of_node_put(iommu);
-
-	return true;
-}
-
 /**************************** pipeline operations *****************************/
 static int __cif_pipeline_prepare(struct rkcif_pipeline *p,
 				  struct media_entity *me)
@@ -603,7 +585,9 @@ static int subdev_notifier_complete(struct v4l2_async_notifier *notifier)
 	ret = _set_pipeline_default_fmt(dev);
 	if (ret < 0)
 		goto unregister_lvds;
+
 	v4l2_info(&dev->v4l2_dev, "Async subdev notifier completed\n");
+
 	return ret;
 
 unregister_lvds:
@@ -691,7 +675,9 @@ static int cif_subdev_notifier(struct rkcif_device *cif_dev)
 
 	ntf->ops = &subdev_notifier_ops;
 
-	return v4l2_async_notifier_register(&cif_dev->v4l2_dev, ntf);
+	ret = v4l2_async_notifier_register(&cif_dev->v4l2_dev, ntf);
+
+	return ret;
 }
 
 /***************************** platform deive *******************************/
@@ -826,7 +812,7 @@ static int rkcif_detach_hw(struct rkcif_device *cif_dev)
 	return 0;
 }
 
-static char* rkcif_get_monitor_mode(enum rkcif_monitor_mode mode)
+static char *rkcif_get_monitor_mode(enum rkcif_monitor_mode mode)
 {
 	switch (mode) {
 	case RKCIF_MONITOR_MODE_IDLE:
@@ -890,8 +876,7 @@ static void rkcif_init_reset_monitor(struct rkcif_device *dev)
 					  timer->csi2_err_ref_cnt);
 			}
 		}
-
-	}else {
+	} else {
 		timer->monitor_mode = RKCIF_MONITOR_MODE_IDLE;
 		timer->err_time_interval = 0xffffffff;
 		timer->frm_num_of_monitor_cycle = 0xffffffff;
@@ -1072,13 +1057,6 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 
 	rkcif_attach_hw(cif_dev);
 
-	cif_dev->iommu_en = is_iommu_enable(dev);
-	if (!cif_dev->iommu_en) {
-		ret = of_reserved_mem_device_init(dev);
-		if (ret)
-			dev_info(dev, "No reserved memory region assign to CIF\n");
-	}
-
 	ret = rkcif_plat_init(cif_dev, node, data->inf_id);
 	if (ret) {
 		rkcif_detach_hw(cif_dev);
@@ -1089,8 +1067,7 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 		dev_warn(dev, "dev:%s create proc failed\n", dev_name(dev));
 
 	rkcif_init_reset_monitor(cif_dev);
-
-	rkcif_soft_reset(cif_dev, true);
+	rkcif_soft_reset(cif_dev, false);
 	pm_runtime_enable(&pdev->dev);
 
 	return 0;
diff --git a/drivers/media/platform/rockchip/cif/hw.c b/drivers/media/platform/rockchip/cif/hw.c
index 2fe83664a19d..6e8cfda5ae6b 100644
--- a/drivers/media/platform/rockchip/cif/hw.c
+++ b/drivers/media/platform/rockchip/cif/hw.c
@@ -798,7 +798,7 @@ void rkcif_hw_soft_reset(struct rkcif_hw *cif_hw, bool is_rst_iommu)
 			reset_control_deassert(cif_hw->cif_rst[i]);
 }
 
-static int rkcif_plat_probe(struct platform_device *pdev)
+static int rkcif_plat_hw_probe(struct platform_device *pdev)
 {
 	const struct of_device_id *match;
 	struct device_node *node = pdev->dev.of_node;
@@ -924,10 +924,10 @@ static int rkcif_plat_probe(struct platform_device *pdev)
 			return ret;
 	}
 
-	pm_runtime_enable(&pdev->dev);
-
 	rkcif_hw_soft_reset(cif_hw, true);
 
+	pm_runtime_enable(&pdev->dev);
+
 	if (data->chip_id == CHIP_RK1808_CIF ||
 	    data->chip_id == CHIP_RV1126_CIF ||
 	    data->chip_id == CHIP_RK3568_CIF) {
@@ -989,7 +989,7 @@ static struct platform_driver rkcif_hw_plat_drv = {
 		.of_match_table = of_match_ptr(rkcif_plat_of_match),
 		.pm = &rkcif_plat_pm_ops,
 	},
-	.probe = rkcif_plat_probe,
+	.probe = rkcif_plat_hw_probe,
 	.remove = rkcif_plat_remove,
 };
 
diff --git a/drivers/media/platform/rockchip/cif/version.h b/drivers/media/platform/rockchip/cif/version.h
index 569cb2c3bbd9..bf7c3923fda9 100644
--- a/drivers/media/platform/rockchip/cif/version.h
+++ b/drivers/media/platform/rockchip/cif/version.h
@@ -55,6 +55,7 @@
  *3. add dvp sof
  *4. add extended lines to out image for normal & hdr short frame
  *5. modify reset mechanism drivered by real-time frame rate
+ *6. support rk356x iommu uses vb2 sg type
  */
 
 #define RKCIF_DRIVER_VERSION RKCIF_API_VERSION
-- 
2.35.3

