From b33a8916908c1018f2fe94184a0b81cd50025e9f Mon Sep 17 00:00:00 2001
From: Frank Wang <frank.wang@rock-chips.com>
Date: Thu, 9 Nov 2017 15:50:52 +0800
Subject: [PATCH] usb: dwc_otg_310: remove RK_GRF_VIRT references

Use regmap method instead of iomap for dwc_otg_310 driver.

Change-Id: I78e91f99196f7619c84b53a579909925167b145c
Signed-off-by: Frank Wang <frank.wang@rock-chips.com>
---
 drivers/usb/dwc_otg_310/dwc_otg_driver.c | 125 ----------------
 drivers/usb/dwc_otg_310/usbdev_rk.h      |   3 -
 drivers/usb/dwc_otg_310/usbdev_rk3036.c  | 125 +++++++++-------
 drivers/usb/dwc_otg_310/usbdev_rk3126.c  | 174 ++++++++++++++---------
 4 files changed, 178 insertions(+), 249 deletions(-)

diff --git a/drivers/usb/dwc_otg_310/dwc_otg_driver.c b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
index 4463f1bb35d2..bab78a8beb9a 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_driver.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
@@ -1630,131 +1630,6 @@ static struct platform_driver dwc_otg_driver = {
 };
 #endif
 
-void rk_usb_power_up(void)
-{
-	struct dwc_otg_platform_data *pldata_otg;
-#ifdef CONFIG_USB20_HOST
-	struct dwc_otg_platform_data *pldata_host;
-#endif
-#ifdef CONFIG_USB_EHCI_RK
-	struct rkehci_platform_data *pldata_ehci;
-#endif
-
-	if (is_rk3288_usb()) {
-#ifdef CONFIG_RK_USB_UART
-		/* enable USB bypass UART function  */
-		writel_relaxed(0x00c00000 | usb_to_uart_status,
-			       RK_GRF_VIRT + RK3288_GRF_UOC0_CON3);
-
-#endif
-		/* unset siddq,the analog blocks are powered up */
-#ifdef CONFIG_USB20_OTG
-		pldata_otg = &usb20otg_pdata_rk3288;
-		if (pldata_otg) {
-			if (pldata_otg->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) << 16,
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC0_CON0);
-		}
-#endif
-#ifdef CONFIG_USB20_HOST
-		pldata_host = &usb20host_pdata_rk3288;
-		if (pldata_host) {
-			if (pldata_host->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) << 16,
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC2_CON0);
-		}
-#endif
-#ifdef CONFIG_USB_EHCI_RK
-		pldata_ehci = &rkehci_pdata_rk3288;
-		if (pldata_ehci) {
-			if (pldata_ehci->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) << 16,
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC1_CON0);
-		}
-#endif
-
-	} else {
-		dwc_otg_device_t *otg_dev = g_otgdev;
-
-		if (!otg_dev)
-			return;
-
-		pldata_otg = otg_dev->pldata;
-		if (pldata_otg && pldata_otg->phy_power_down)
-			pldata_otg->phy_power_down(PHY_POWER_UP);
-	}
-}
-
-void rk_usb_power_down(void)
-{
-	struct dwc_otg_platform_data *pldata_otg;
-#ifdef CONFIG_USB20_HOST
-	struct dwc_otg_platform_data *pldata_host;
-#endif
-#ifdef CONFIG_USB_EHCI_RK
-	struct rkehci_platform_data *pldata_ehci;
-#endif
-
-	if (is_rk3288_usb()) {
-#ifdef CONFIG_RK_USB_UART
-		/* disable USB bypass UART function */
-		usb_to_uart_status =
-		    readl_relaxed(RK_GRF_VIRT + RK3288_GRF_UOC0_CON3);
-		writel_relaxed(0x00c00000, RK_GRF_VIRT + RK3288_GRF_UOC0_CON3);
-#endif
-		/* set siddq,the analog blocks are powered down
-		 * note:
-		 * 1. Before asserting SIDDQ, ensure that VDATSRCENB0,
-		 * VDATDETENB0, DCDENB0, BYPASSSEL0, ADPPRBENB0,
-		 * and TESTBURNIN are set to 1'b0.
-		 * 2. Before asserting SIDDQ, ensure that phy enter suspend.*/
-#ifdef CONFIG_USB20_OTG
-		pldata_otg = &usb20otg_pdata_rk3288;
-		if (pldata_otg) {
-			if (pldata_otg->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) |
-					       ((0x01 << 13) << 16),
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC0_CON0);
-		}
-#endif
-#ifdef CONFIG_USB20_HOST
-		pldata_host = &usb20host_pdata_rk3288;
-		if (pldata_host) {
-			if (pldata_host->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) |
-					       ((0x01 << 13) << 16),
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC2_CON0);
-		}
-#endif
-#ifdef CONFIG_USB_EHCI_RK
-		pldata_ehci = &rkehci_pdata_rk3288;
-		if (pldata_ehci) {
-			if (pldata_ehci->phy_status == USB_PHY_SUSPEND)
-				writel_relaxed((0x01 << 13) |
-					       ((0x01 << 13) << 16),
-					       RK_GRF_VIRT +
-					       RK3288_GRF_UOC1_CON0);
-		}
-#endif
-	} else {
-		dwc_otg_device_t *otg_dev = g_otgdev;
-
-		if (!otg_dev)
-			return;
-
-		pldata_otg = otg_dev->pldata;
-		if (pldata_otg && pldata_otg->phy_power_down)
-			pldata_otg->phy_power_down(PHY_POWER_DOWN);
-	}
-}
-
-EXPORT_SYMBOL(rk_usb_power_up);
-EXPORT_SYMBOL(rk_usb_power_down);
 /**
  * This function is called when the dwc_otg_driver is installed with the
  * insmod command. It registers the dwc_otg_driver structure with the
diff --git a/drivers/usb/dwc_otg_310/usbdev_rk.h b/drivers/usb/dwc_otg_310/usbdev_rk.h
index 9066c75033da..8bb78179c626 100644
--- a/drivers/usb/dwc_otg_310/usbdev_rk.h
+++ b/drivers/usb/dwc_otg_310/usbdev_rk.h
@@ -22,10 +22,7 @@
 #include <linux/mfd/syscon.h>
 #include <linux/regmap.h>
 #include <linux/rk_keys.h>
-#include <linux/rockchip/cru.h>
-#include <linux/rockchip/grf.h>
 #include <linux/rockchip/cpu.h>
-#include <linux/rockchip/iomap.h>
 
 #include "usbdev_grf_regs.h"
 #include "usbdev_bc.h"
diff --git a/drivers/usb/dwc_otg_310/usbdev_rk3036.c b/drivers/usb/dwc_otg_310/usbdev_rk3036.c
index 02dec7048022..4de1212903b0 100644
--- a/drivers/usb/dwc_otg_310/usbdev_rk3036.c
+++ b/drivers/usb/dwc_otg_310/usbdev_rk3036.c
@@ -4,6 +4,12 @@
 #include "dwc_otg_regs.h"
 static struct dwc_otg_control_usb *control_usb;
 
+#define RK3036_GRF_UOC0_CON5	0x0017c
+#define RK3036_GRF_UOC1_CON4	0x00190
+#define RK3036_GRF_UOC1_CON5	0x00194
+#define RK3036_GRF_SOC_STATUS0	0x0014c
+#define RK3036_GRF_UOC_CON6	0x001a0
+
 #ifdef CONFIG_USB20_OTG
 static void usb20otg_hw_init(void)
 {
@@ -20,14 +26,14 @@ static void usb20otg_phy_suspend(void *pdata, int suspend)
 	struct dwc_otg_platform_data *usbpdata = pdata;
 
 	if (suspend) {
-		/* enable soft control */
-		writel(UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0),
-		       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+		/* Enable soft control */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+			     UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0));
 		usbpdata->phy_status = 1;
 	} else {
-		/* exit suspend */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x1, 0),
-		       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+		/* Exit suspend */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+			     UOC_HIWORD_UPDATE(0x0, 0x1, 0));
 		usbpdata->phy_status = 0;
 	}
 }
@@ -48,12 +54,12 @@ static void usb20otg_soft_reset(void *pdata, enum rkusb_rst_flag rst_type)
 	switch(rst_type) {
 	case RST_POR:
 		/* PHY reset */
-		writel(UOC_HIWORD_UPDATE(0x1, 0x3, 0),
-			   RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+		regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+			     UOC_HIWORD_UPDATE(0x1, 0x3, 0));
 		reset_control_assert(rst_otg_p);
 		udelay(15);
-		writel(UOC_HIWORD_UPDATE(0x2, 0x3, 0),
-			   RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+		regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+			     UOC_HIWORD_UPDATE(0x2, 0x3, 0));
 		udelay(1500);
 		reset_control_deassert(rst_otg_p);
 		udelay(2);
@@ -112,7 +118,12 @@ static void usb20otg_clock_enable(void *pdata, int enable)
 static int usb20otg_get_status(int id)
 {
 	int ret = -1;
-	u32 soc_status0 = readl(RK_GRF_VIRT + RK3036_GRF_SOC_STATUS0);
+	u32 soc_status0;
+
+	ret = regmap_read(control_usb->grf, RK3036_GRF_SOC_STATUS0,
+			  &soc_status0);
+	if (ret)
+		return ret;
 
 	switch (id) {
 	case USB_STATUS_BVABLID:
@@ -164,13 +175,13 @@ static bool dwc_otg_uart_enabled(void)
 static void dwc_otg_uart_mode(void *pdata, int enter_usb_uart_mode)
 {
 	if ((1 == enter_usb_uart_mode) && dwc_otg_uart_enabled()) {
-		/* bypass dm, enter uart mode */
-		writel(UOC_HIWORD_UPDATE(0x3, 0x3, 12), RK_GRF_VIRT + 
-			   RK3036_GRF_UOC1_CON4);
+		/* Bypass dm, enter uart mode */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON4,
+			     UOC_HIWORD_UPDATE(0x3, 0x3, 12));
 	} else if (0 == enter_usb_uart_mode) {
-		/* enter usb mode */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x3, 12), RK_GRF_VIRT + 
-			   RK3036_GRF_UOC1_CON4);
+		/* Enter usb mode */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON4,
+			     UOC_HIWORD_UPDATE(0x0, 0x3, 12));
 	}
 }
 #else
@@ -200,12 +211,13 @@ static void usb20otg_phy_power_down(int power_down)
 {
 	if (power_down == PHY_POWER_DOWN) {
 		if (control_usb->linestate_wakeup) {
-			/* enable otg0_linestate irq */
-			writel(UOC_HIWORD_UPDATE(0x3, 0x3, 12),
-			       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+			/* Enable otg0_linestate irq */
+			regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+				     UOC_HIWORD_UPDATE(0x3, 0x3, 12));
+
 			/* enable otg1_linestate irq */
-			writel(UOC_HIWORD_UPDATE(0x3, 0x3, 14),
-			       RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+			regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+				     UOC_HIWORD_UPDATE(0x3, 0x3, 14));
 		}
 	} else if (power_down == PHY_POWER_UP) {
 		;
@@ -245,14 +257,14 @@ static void usb20host_phy_suspend(void *pdata, int suspend)
 	struct dwc_otg_platform_data *usbpdata = pdata;
 
 	if (suspend) {
-		/* enable soft control */
-		writel(UOC_HIWORD_UPDATE(0x1d5, 0x1ff, 0),
-		       RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+		/* Enable soft control */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1d5, 0x1ff, 0));
 		usbpdata->phy_status = 1;
 	} else {
-		/* exit suspend */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x1, 0),
-		       RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+		/* Exit suspend */
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x0, 0x1, 0));
 		usbpdata->phy_status = 0;
 	}
 }
@@ -273,12 +285,12 @@ static void usb20host_soft_reset(void *pdata, enum rkusb_rst_flag rst_type)
 	switch(rst_type) {
 	case RST_POR:
 		/* PHY reset */
-		writel(UOC_HIWORD_UPDATE(0x1, 0x3, 0),
-			   RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1, 0x3, 0));
 		reset_control_assert(rst_host_p);
 		udelay(15);
-		writel(UOC_HIWORD_UPDATE(0x2, 0x3, 0),
-			   RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x2, 0x3, 0));
 
 		udelay(1500);
 		reset_control_deassert(rst_host_p);
@@ -335,7 +347,12 @@ static void usb20host_clock_enable(void *pdata, int enable)
 static int usb20host_get_status(int id)
 {
 	int ret = -1;
-	u32 soc_status0 = readl(RK_GRF_VIRT + RK3036_GRF_SOC_STATUS0);
+	u32 soc_status0;
+
+	ret = regmap_read(control_usb->grf, RK3036_GRF_SOC_STATUS0,
+			  &soc_status0);
+	if (ret)
+		return ret;
 
 	switch (id) {
 	case USB_STATUS_BVABLID:
@@ -420,8 +437,9 @@ static void usb_battery_charger_detect_work(struct work_struct *work)
 static irqreturn_t bvalid_irq_handler(int irq, void *dev_id)
 {
 	/* clear irq */
-	writel(UOC_HIWORD_UPDATE(0x1, 0x1, 15),
-	       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+	regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+		     UOC_HIWORD_UPDATE(0x1, 0x1, 15));
+
 #ifdef CONFIG_RK_USB_UART
 	/* usb otg dp/dm switch to usb phy */
 	dwc_otg_uart_mode(NULL, PHY_USB_MODE);
@@ -450,10 +468,9 @@ static irqreturn_t otg0_linestate_irq_handler(int irq, void *dev_id)
 	 */
 	udelay(200);
 
-	/* clear and disable irq */
-	writel(UOC_HIWORD_UPDATE(0x2, 0x3, 12),
-	       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
-
+	/* Clear and disable irq */
+	regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+		     UOC_HIWORD_UPDATE(0x2, 0x3, 12));
 
 	if (control_usb->usb_irq_wakeup) {
 		wake_lock_timeout(&control_usb->usb_wakelock,
@@ -474,9 +491,8 @@ static irqreturn_t otg1_linestate_irq_handler(int irq, void *dev_id)
 	udelay(200);
 
 	/* clear and disable irq */
-	writel(UOC_HIWORD_UPDATE(0x2, 0x3, 14),
-	       RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
-
+	regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+		     UOC_HIWORD_UPDATE(0x2, 0x3, 14));
 
 	if (control_usb->usb_irq_wakeup) {
 		wake_lock_timeout(&control_usb->usb_wakelock,
@@ -485,6 +501,7 @@ static irqreturn_t otg1_linestate_irq_handler(int irq, void *dev_id)
 
 	return IRQ_HANDLED;
 }
+
 /************* register usb detection irqs **************/
 static int otg_irq_detect_init(struct platform_device *pdev)
 {
@@ -505,9 +522,9 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 		if (ret < 0) {
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
-			/* enable bvalid irq  */
-			writel(UOC_HIWORD_UPDATE(0x1, 0x1, 14),
-			       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+			/* Enable bvalid irq  */
+			regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+				     UOC_HIWORD_UPDATE(0x1, 0x1, 14));
 		}
 	}
 
@@ -515,7 +532,8 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 		return 0;
 
 	/* Set otg0&1_linestate_filter time to 100us */
-	writel(UOC_HIWORD_UPDATE(0x0, 0xf, 6), RK_GRF_VIRT + 0x1a0);
+	regmap_write(control_usb->grf, RK3036_GRF_UOC_CON6,
+		     UOC_HIWORD_UPDATE(0x0, 0xf, 6));
 
 	/* Register otg0_linestate irq */
 	irq = platform_get_irq_byname(pdev, "otg0_linestate");
@@ -526,8 +544,8 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
 			/* Clear otg0_linestate irq  */
-			writel(UOC_HIWORD_UPDATE(0x2, 0x3, 12),
-			       RK_GRF_VIRT + RK3036_GRF_UOC0_CON5);
+			regmap_write(control_usb->grf, RK3036_GRF_UOC0_CON5,
+				     UOC_HIWORD_UPDATE(0x2, 0x3, 12));
 		}
 	}
 
@@ -540,8 +558,8 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
 			/* Clear otg1_linestate irq  */
-			writel(UOC_HIWORD_UPDATE(0x2, 0x3, 14),
-			       RK_GRF_VIRT + RK3036_GRF_UOC1_CON5);
+			regmap_write(control_usb->grf, RK3036_GRF_UOC1_CON5,
+				     UOC_HIWORD_UPDATE(0x2, 0x3, 14));
 		}
 	}
 	return ret;
@@ -562,6 +580,13 @@ static int rk_usb_control_probe(struct platform_device *pdev)
 		goto out;
 	}
 
+	control_usb->grf = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
+	if (IS_ERR(control_usb->grf)) {
+		dev_err(&pdev->dev, "Missing rockchip,grf property\n");
+		ret = PTR_ERR(control_usb->grf);
+		goto out;
+	}
+
 	control_usb->chip_id = RK3036_USB_CTLR;
 	control_usb->remote_wakeup = of_property_read_bool(np,
 							   "rockchip,remote_wakeup");
diff --git a/drivers/usb/dwc_otg_310/usbdev_rk3126.c b/drivers/usb/dwc_otg_310/usbdev_rk3126.c
index 2cf9c5a8fbf8..434e98f620b1 100644
--- a/drivers/usb/dwc_otg_310/usbdev_rk3126.c
+++ b/drivers/usb/dwc_otg_310/usbdev_rk3126.c
@@ -4,15 +4,26 @@
 #include "dwc_otg_regs.h"
 static struct dwc_otg_control_usb *control_usb;
 
+#define RK312X_GRF_SOC_STATUS0		0x0014c
+#define RK312X_GRF_UOC0_CON0		0x0017c
+#define RK312X_GRF_UOC1_CON4		0x00190
+#define RK312X_GRF_UOC1_CON5		0x00194
+#define RK312X_GRF_USBPHY0_CON6		0x00298
+#define RK312X_GRF_USBPHY0_CON7		0x0029c
+#define RK312X_GRF_USBPHY1_CON6		0x002b8
+#define RK312X_GRF_USBPHY1_CON7		0x002bc
+
 #ifdef CONFIG_USB20_OTG
 static void usb20otg_hw_init(void)
 {
 	/* Turn off differential receiver in suspend mode */
-	writel(UOC_HIWORD_UPDATE(0, 1, 2),
-	       RK_GRF_VIRT + RK312X_GRF_USBPHY0_CON6);
+	regmap_write(control_usb->grf, RK312X_GRF_USBPHY0_CON6,
+		     UOC_HIWORD_UPDATE(0, 1, 2));
+
 	/* Set disconnect detection trigger point to 600mv */
-	writel(UOC_HIWORD_UPDATE(0, 0xf, 11),
-	       RK_GRF_VIRT + RK312X_GRF_USBPHY0_CON7);
+	regmap_write(control_usb->grf, RK312X_GRF_USBPHY0_CON7,
+		     UOC_HIWORD_UPDATE(0, 0xf, 11));
+
 	/* other haredware init,include:
 	 * DRV_VBUS GPIO init */
 	if (gpio_is_valid(control_usb->otg_gpios->gpio)) {
@@ -26,14 +37,14 @@ static void usb20otg_phy_suspend(void *pdata, int suspend)
 	struct dwc_otg_platform_data *usbpdata = pdata;
 
 	if (suspend) {
-		/* enable soft control */
-		writel(UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+		/* Enable soft control */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+			     UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0));
 		usbpdata->phy_status = 1;
 	} else {
-		/* exit suspend */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x1, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+		/* Exit suspend */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+			     UOC_HIWORD_UPDATE(0x0, 0x1, 0));
 		usbpdata->phy_status = 0;
 	}
 }
@@ -54,12 +65,12 @@ static void usb20otg_soft_reset(void *pdata, enum rkusb_rst_flag rst_type)
 	switch(rst_type) {
 	case RST_POR:
 		/* PHY reset */
-		writel(UOC_HIWORD_UPDATE(0x1, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+			     UOC_HIWORD_UPDATE(0x1, 0x3, 0));
 		reset_control_assert(rst_otg_p);
 		udelay(15);
-		writel(UOC_HIWORD_UPDATE(0x2, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+			     UOC_HIWORD_UPDATE(0x2, 0x3, 0));
 		udelay(1500);
 		reset_control_deassert(rst_otg_p);
 		udelay(2);
@@ -118,7 +129,13 @@ static void usb20otg_clock_enable(void *pdata, int enable)
 static int usb20otg_get_status(int id)
 {
 	int ret = -1;
-	u32 soc_status0 = readl(RK_GRF_VIRT + RK312X_GRF_SOC_STATUS0);
+	u32 soc_status0;
+
+	ret = regmap_read(control_usb->grf, RK312X_GRF_SOC_STATUS0,
+			  &soc_status0);
+	if (ret)
+		return ret;
+
 	switch (id) {
 	case USB_STATUS_BVABLID:
 		/* bvalid in grf */
@@ -133,7 +150,9 @@ static int usb20otg_get_status(int id)
 		ret = soc_status0 & (0x1 << 8);
 		break;
 	case USB_STATUS_UARTMODE:
-		ret = readl(RK_GRF_VIRT + RK312X_GRF_UOC1_CON4) & (1 << 12);
+		regmap_read(control_usb->grf, RK312X_GRF_UOC1_CON4,
+			    &soc_status0);
+		ret = soc_status0 & (1 << 12);
 		break;
 	case USB_CHIP_ID:
 		ret = control_usb->chip_id;
@@ -172,14 +191,13 @@ static bool dwc_otg_uart_enabled(void)
 static void dwc_otg_uart_mode(void *pdata, int enter_usb_uart_mode)
 {
 	if ((1 == enter_usb_uart_mode) && dwc_otg_uart_enabled()) {
-		/* bypass dm, enter uart mode */
-		writel(UOC_HIWORD_UPDATE(0x3, 0x3, 12), RK_GRF_VIRT +
-			   RK312X_GRF_UOC1_CON4);
-
+		/* Bypass dm, enter uart mode */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON4,
+			     UOC_HIWORD_UPDATE(0x3, 0x3, 12));
 	} else if (0 == enter_usb_uart_mode) {
-		/* enter usb mode */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x3, 12), RK_GRF_VIRT + 
-			   RK312X_GRF_UOC1_CON4);
+		/* Enter usb mode */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON4,
+			     UOC_HIWORD_UPDATE(0x0, 0x3, 12));
 	}
 }
 #else
@@ -209,12 +227,13 @@ static void usb20otg_phy_power_down(int power_down)
 {
 	if (power_down == PHY_POWER_DOWN) {
 		if (control_usb->linestate_wakeup) {
-			/* enable otg0_linestate irq */
-			writel(UOC_HIWORD_UPDATE(0x3, 0x3, 14),
-			       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
-			/* enable otg1_linestate irq */
-			writel(UOC_HIWORD_UPDATE(0x3, 0x3, 12),
-			       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+			/* Enable otg0_linestate irq */
+			regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+				     UOC_HIWORD_UPDATE(0x3, 0x3, 14));
+
+			/* Enable otg1_linestate irq */
+			regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+				     UOC_HIWORD_UPDATE(0x3, 0x3, 12));
 		}
 	} else if (power_down == PHY_POWER_UP) {
 		;
@@ -242,11 +261,13 @@ struct dwc_otg_platform_data usb20otg_pdata_rk3126 = {
 static void usb20host_hw_init(void)
 {
 	/* Turn off differential receiver in suspend mode */
-	writel(UOC_HIWORD_UPDATE(0, 1, 2),
-		   RK_GRF_VIRT + RK312X_GRF_USBPHY1_CON6);
+	regmap_write(control_usb->grf, RK312X_GRF_USBPHY1_CON6,
+		     UOC_HIWORD_UPDATE(0, 1, 2));
+
 	/* Set disconnect detection trigger point to 600mv */
-	writel(UOC_HIWORD_UPDATE(1, 0xf, 11),
-		   RK_GRF_VIRT + RK312X_GRF_USBPHY1_CON7);
+	regmap_write(control_usb->grf, RK312X_GRF_USBPHY1_CON7,
+		     UOC_HIWORD_UPDATE(1, 0xf, 11));
+
 	/* other haredware init,include:
 	 * DRV_VBUS GPIO init */
 	if (gpio_is_valid(control_usb->host_gpios->gpio)) {
@@ -260,14 +281,14 @@ static void usb20host_phy_suspend(void *pdata, int suspend)
 	struct dwc_otg_platform_data *usbpdata = pdata;
 
 	if (suspend) {
-		/* enable soft control */
-		writel(UOC_HIWORD_UPDATE(0x1d5, 0x1ff, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		/* Enable soft control */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1d5, 0x1ff, 0));
 		usbpdata->phy_status = 1;
 	} else {
-		/* exit suspend */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x1, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		/* Exit suspend */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x0, 0x1, 0));
 		usbpdata->phy_status = 0;
 	}
 }
@@ -288,12 +309,12 @@ static void usb20host_soft_reset(void *pdata, enum rkusb_rst_flag rst_type)
 	switch(rst_type) {
 	case RST_POR:
 		/* PHY reset */
-		writel(UOC_HIWORD_UPDATE(0x1, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1, 0x3, 0));
 		reset_control_assert(rst_host_p);
 		udelay(15);
-		writel(UOC_HIWORD_UPDATE(0x2, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x2, 0x3, 0));
 
 		udelay(1500);
 		reset_control_deassert(rst_host_p);
@@ -350,7 +371,12 @@ static void usb20host_clock_enable(void *pdata, int enable)
 static int usb20host_get_status(int id)
 {
 	int ret = -1;
-	u32 soc_status0 = readl(RK_GRF_VIRT + RK312X_GRF_SOC_STATUS0);
+	u32 soc_status0;
+
+	ret = regmap_read(control_usb->grf, RK312X_GRF_SOC_STATUS0,
+			  &soc_status0);
+	if (ret)
+		return ret;
 
 	switch (id) {
 	case USB_STATUS_BVABLID:
@@ -413,14 +439,14 @@ static void usb20ehci_phy_suspend(void *pdata, int suspend)
 	struct rkehci_platform_data *usbpdata = pdata;
 
 	if (suspend) {
-		/* enable soft control */
-		writel(UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		/* Enable soft control */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1d1, 0x1ff, 0));
 		usbpdata->phy_status = 1;
 	} else {
-		/* exit suspend */
-		writel(UOC_HIWORD_UPDATE(0x0, 0x1, 0),
-		       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		/* Exit suspend */
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x0, 0x1, 0));
 		usbpdata->phy_status = 0;
 	}
 }
@@ -441,12 +467,12 @@ static void usb20ehci_soft_reset(void *pdata, enum rkusb_rst_flag rst_type)
 	switch(rst_type) {
 	case RST_POR:
 		/* PHY reset */
-		writel(UOC_HIWORD_UPDATE(0x1, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x1, 0x3, 0));
 		reset_control_assert(rst_host_p);
 		udelay(15);
-		writel(UOC_HIWORD_UPDATE(0x2, 0x3, 0),
-			   RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+		regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+			     UOC_HIWORD_UPDATE(0x2, 0x3, 0));
 
 		udelay(1500);
 		reset_control_deassert(rst_host_p);
@@ -543,8 +569,9 @@ static void usb_battery_charger_detect_work(struct work_struct *work)
 static irqreturn_t bvalid_irq_handler(int irq, void *dev_id)
 {
 	/* clear irq */
-	writel(UOC_HIWORD_UPDATE(0x1, 0x1, 15),
-	       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+	regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+		     UOC_HIWORD_UPDATE(0x1, 0x1, 15));
+
 #ifdef CONFIG_RK_USB_UART
 	/* usb otg dp/dm switch to usb phy */
 	dwc_otg_uart_mode(NULL, PHY_USB_MODE);
@@ -573,10 +600,9 @@ static irqreturn_t otg0_linestate_irq_handler(int irq, void *dev_id)
 	 */
 	udelay(200);
 
-	/* clear and disable irq */
-	writel(UOC_HIWORD_UPDATE(0x2, 0x3, 12),
-	       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
-
+	/* Clear and disable irq */
+	regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+		     UOC_HIWORD_UPDATE(0x2, 0x3, 12));
 
 	if (control_usb->usb_irq_wakeup) {
 		wake_lock_timeout(&control_usb->usb_wakelock,
@@ -597,9 +623,8 @@ static irqreturn_t otg1_linestate_irq_handler(int irq, void *dev_id)
 	udelay(200);
 
 	/* clear and disable irq */
-	writel(UOC_HIWORD_UPDATE(0x2, 0x3, 14),
-	       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
-
+	regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+		     UOC_HIWORD_UPDATE(0x2, 0x3, 14));
 
 	if (control_usb->usb_irq_wakeup) {
 		wake_lock_timeout(&control_usb->usb_wakelock,
@@ -629,9 +654,9 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 		if (ret < 0) {
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
-			/* enable bvalid irq  */
-			writel(UOC_HIWORD_UPDATE(0x1, 0x1, 14),
-			       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+			/* Enable bvalid irq  */
+			regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+				     UOC_HIWORD_UPDATE(0x1, 0x1, 14));
 		}
 	}
 
@@ -639,7 +664,7 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 		return 0;
 
 	/* Set otg0&1_linestate_filter time to 100us */
-	writel(UOC_HIWORD_UPDATE(0x0, 0xf, 6), RK_GRF_VIRT + 0x1a0);
+	regmap_write(control_usb->grf, 0x1a0, UOC_HIWORD_UPDATE(0x0, 0xf, 6));
 
 	/* Register otg0_linestate irq */
 	irq = platform_get_irq_byname(pdev, "otg0_linestate");
@@ -650,8 +675,8 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
 			/* Clear otg0_linestate irq  */
-			writel(UOC_HIWORD_UPDATE(0x2, 0x3, 12),
-			       RK_GRF_VIRT + RK312X_GRF_UOC0_CON0);
+			regmap_write(control_usb->grf, RK312X_GRF_UOC0_CON0,
+				     UOC_HIWORD_UPDATE(0x2, 0x3, 12));
 		}
 	}
 
@@ -664,8 +689,8 @@ static int otg_irq_detect_init(struct platform_device *pdev)
 			dev_err(&pdev->dev, "request_irq %d failed!\n", irq);
 		} else {
 			/* Clear otg1_linestate irq  */
-			writel(UOC_HIWORD_UPDATE(0x2, 0x3, 14),
-			       RK_GRF_VIRT + RK312X_GRF_UOC1_CON5);
+			regmap_write(control_usb->grf, RK312X_GRF_UOC1_CON5,
+				     UOC_HIWORD_UPDATE(0x2, 0x3, 14));
 		}
 	}
 	return 0;
@@ -686,6 +711,13 @@ static int rk_usb_control_probe(struct platform_device *pdev)
 		goto out;
 	}
 
+	control_usb->grf = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
+	if (IS_ERR(control_usb->grf)) {
+		dev_err(&pdev->dev, "Missing rockchip,grf property\n");
+		ret = PTR_ERR(control_usb->grf);
+		goto out;
+	}
+
 	control_usb->chip_id = RK3126_USB_CTLR;
 	control_usb->remote_wakeup = of_property_read_bool(np,
 							   "rockchip,remote_wakeup");
-- 
2.35.3

