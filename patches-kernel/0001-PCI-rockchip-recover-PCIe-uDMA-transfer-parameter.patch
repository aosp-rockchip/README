From b43575b260b5494620033aaa092eb953caa7d11b Mon Sep 17 00:00:00 2001
From: Simon Xue <xxm@rock-chips.com>
Date: Thu, 10 Jan 2019 09:33:24 +0800
Subject: [PATCH] PCI: rockchip: recover PCIe uDMA transfer parameter

Change-Id: Iddc7fe154bebd2cbd46645bf519cce1f42815286
Signed-off-by: Simon Xue <xxm@rock-chips.com>
---
 drivers/pci/host/pcie-rockchip.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/drivers/pci/host/pcie-rockchip.c b/drivers/pci/host/pcie-rockchip.c
index 952199e76bab..74f861b10893 100644
--- a/drivers/pci/host/pcie-rockchip.c
+++ b/drivers/pci/host/pcie-rockchip.c
@@ -1444,6 +1444,7 @@ static ssize_t pcie_reset_ep_store(struct device *dev,
 	u32 val = 0;
 	int err;
 	struct rockchip_pcie *rockchip = dev_get_drvdata(dev);
+	struct dma_trx_obj *obj = rockchip->dma_obj;
 
 	err = kstrtou32(buf, 10, &val);
 	if (err)
@@ -1464,6 +1465,19 @@ static ssize_t pcie_reset_ep_store(struct device *dev,
 		err = rockchip_cfg_atu(rockchip);
 		if (err)
 			return err;
+
+		/*
+		 * In order not to bother sending remain but unused data to the
+		 * peer,we need to flush out the pending data to the link before
+		 * setting up the ATU. This is safe as the peer's ATU isn't
+		 * ready at this moment and the sender also can turn its FSM
+		 * back without any exception.
+		 */
+		obj->loop_count = 0;
+		obj->local_read_available = 0x0;
+		obj->local_write_available = 0xff;
+		obj->remote_write_available = 0xff;
+		obj->dma_free = true;
 	}
 
 	return size;
-- 
2.35.3

