From 8a838cde7c64c2e51c251d1c64a1913e494a1cd9 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Wed, 9 May 2018 09:48:07 +0800
Subject: [PATCH] clk: rockchip: Add support to configurate boost for pll clock

Change-Id: I15841da7266b1b0fbc3407f0c23608c99209fb11
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/clk/rockchip/clk-pll.c |  5 ++++-
 drivers/clk/rockchip/clk.c     |  3 ++-
 drivers/clk/rockchip/clk.h     | 23 ++++++++++++++++++++++-
 3 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/drivers/clk/rockchip/clk-pll.c b/drivers/clk/rockchip/clk-pll.c
index 3d6a241bca8b..16b3eef50554 100644
--- a/drivers/clk/rockchip/clk-pll.c
+++ b/drivers/clk/rockchip/clk-pll.c
@@ -50,6 +50,7 @@ struct rockchip_clk_pll {
 	int			sel;
 	unsigned long		scaling;
 	spinlock_t		*lock;
+	bool			boost_enabled;
 
 	struct rockchip_clk_provider *ctx;
 };
@@ -1360,7 +1361,8 @@ struct clk *rockchip_clk_register_pll(struct rockchip_clk_provider *ctx,
 		u8 num_parents, int con_offset, int grf_lock_offset,
 		int lock_shift, int mode_offset, int mode_shift,
 		struct rockchip_pll_rate_table *rate_table,
-		unsigned long flags, u8 clk_pll_flags)
+		unsigned long flags, u8 clk_pll_flags,
+		bool boost_enabled)
 {
 	const char *pll_parents[3];
 	struct clk_init_data init;
@@ -1487,6 +1489,7 @@ struct clk *rockchip_clk_register_pll(struct rockchip_clk_provider *ctx,
 	pll->flags = clk_pll_flags;
 	pll->lock = &ctx->lock;
 	pll->ctx = ctx;
+	pll->boost_enabled = boost_enabled;
 
 	pll_clk = clk_register(NULL, &pll->hw);
 	if (IS_ERR(pll_clk)) {
diff --git a/drivers/clk/rockchip/clk.c b/drivers/clk/rockchip/clk.c
index 8b1f3e12eac0..f26c77c40631 100644
--- a/drivers/clk/rockchip/clk.c
+++ b/drivers/clk/rockchip/clk.c
@@ -445,7 +445,8 @@ void __init rockchip_clk_register_plls(struct rockchip_clk_provider *ctx,
 				list->con_offset, grf_lock_offset,
 				list->lock_shift, list->mode_offset,
 				list->mode_shift, list->rate_table,
-				list->flags, list->pll_flags);
+				list->flags, list->pll_flags,
+				list->boost_enabled);
 		if (IS_ERR(clk)) {
 			pr_err("%s: failed to register clock %s\n", __func__,
 				list->name);
diff --git a/drivers/clk/rockchip/clk.h b/drivers/clk/rockchip/clk.h
index 7696484619ba..6ad4253c5da1 100644
--- a/drivers/clk/rockchip/clk.h
+++ b/drivers/clk/rockchip/clk.h
@@ -269,6 +269,7 @@ struct rockchip_pll_rate_table {
  * @type: Type of PLL to be registered.
  * @pll_flags: hardware-specific flags
  * @rate_table: Table of usable pll rates
+ * @boost_enabled: whether pll supports boost
  *
  * Flags:
  * ROCKCHIP_PLL_SYNC_RATE - check rate parameters to match against the
@@ -287,6 +288,7 @@ struct rockchip_pll_clock {
 	enum rockchip_pll_type	type;
 	u8			pll_flags;
 	struct rockchip_pll_rate_table *rate_table;
+	bool			boost_enabled;
 };
 
 #define ROCKCHIP_PLL_SYNC_RATE		BIT(0)
@@ -308,13 +310,32 @@ struct rockchip_pll_clock {
 		.rate_table	= _rtable,				\
 	}
 
+#define PLL_BOOST(_type, _id, _name, _pnames, _flags, _con, _mode,	\
+		_mshift, _lshift, _pflags, _rtable)			\
+	{								\
+		.id		= _id,					\
+		.type		= _type,				\
+		.name		= _name,				\
+		.parent_names	= _pnames,				\
+		.num_parents	= ARRAY_SIZE(_pnames),			\
+		.flags		= CLK_GET_RATE_NOCACHE | _flags,	\
+		.con_offset	= _con,					\
+		.mode_offset	= _mode,				\
+		.mode_shift	= _mshift,				\
+		.lock_shift	= _lshift,				\
+		.pll_flags	= _pflags,				\
+		.rate_table	= _rtable,				\
+		.boost_enabled  = true,					\
+	}
+
 struct clk *rockchip_clk_register_pll(struct rockchip_clk_provider *ctx,
 		enum rockchip_pll_type pll_type,
 		const char *name, const char *const *parent_names,
 		u8 num_parents, int con_offset, int grf_lock_offset,
 		int lock_shift, int mode_offset, int mode_shift,
 		struct rockchip_pll_rate_table *rate_table,
-		unsigned long flags, u8 clk_pll_flags);
+		unsigned long flags, u8 clk_pll_flags,
+		bool boost_enabled);
 
 void rockchip_boost_enable_recovery_sw_low(struct clk_hw *hw);
 
-- 
2.35.3

