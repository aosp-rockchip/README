From 1d4084c945a078345c1bb12282bfe7a28d8004c0 Mon Sep 17 00:00:00 2001
From: Sandy Huang <hjc@rock-chips.com>
Date: Fri, 17 Nov 2017 14:16:39 +0800
Subject: [PATCH] drm/rockchip: vop: add support color space convert

the CSC path include:
	1. plane color space convert;
	2. post BCSH module color space convert.

Change-Id: Ibfa7bccdb7d57a09a8d0147db65658627326262a
Signed-off-by: Sandy Huang <hjc@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_drm_drv.c |   6 +
 drivers/gpu/drm/rockchip/rockchip_drm_drv.h |   8 +-
 drivers/gpu/drm/rockchip/rockchip_drm_vop.c | 242 ++++++++++++++++----
 drivers/gpu/drm/rockchip/rockchip_drm_vop.h |   6 +-
 drivers/gpu/drm/rockchip/rockchip_vop_reg.c |  17 +-
 5 files changed, 228 insertions(+), 51 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
index ab11b5cebdcf..6f34b0613568 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.c
@@ -1101,6 +1101,12 @@ static int rockchip_drm_create_properties(struct drm_device *dev)
 		return -ENOMEM;
 	private->eotf_prop = prop;
 
+	prop = drm_property_create_range(dev, DRM_MODE_PROP_ATOMIC,
+					 "COLOR_SPACE", 0, 12);
+	if (!prop)
+		return -ENOMEM;
+	private->color_space_prop = prop;
+
 	return drm_mode_create_tv_properties(dev, 0, NULL);
 }
 
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
index a300821594a9..86d358ded609 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
@@ -120,7 +120,12 @@ struct rockchip_crtc_state {
 	int output_mode;
 	int output_flags;
 	int bus_format;
-	bool yuv_overlay;
+	int yuv_overlay;
+	int post_r2y_en;
+	int post_y2r_en;
+	int post_csc_mode;
+	int bcsh_en;
+	int color_space;
 	int eotf;
 	struct rockchip_hdr_state hdr;
 };
@@ -166,6 +171,7 @@ struct rockchip_drm_private {
 	struct drm_property *cabc_global_dn_property;
 	struct drm_property *cabc_calc_pixel_num_property;
 	struct drm_property *eotf_prop;
+	struct drm_property *color_space_prop;
 	void *backlight;
 	struct drm_fb_helper *fbdev_helper;
 	struct drm_gem_object *fbdev_bo;
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
index afe6da230055..84168842a40d 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
@@ -40,6 +40,7 @@
 #include <linux/sort.h>
 #include <soc/rockchip/rockchip-system-status.h>
 #include <uapi/drm/rockchip_drm.h>
+#include <uapi/linux/videodev2.h>
 
 #include "rockchip_drm_drv.h"
 #include "rockchip_drm_gem.h"
@@ -159,6 +160,11 @@ struct vop_plane_state {
 	const uint32_t *r2r_table;
 	const uint32_t *r2y_table;
 	int eotf;
+	bool y2r_en;
+	bool r2r_en;
+	bool r2y_en;
+	int color_space;
+	unsigned int csc_mode;
 	bool enable;
 };
 
@@ -396,7 +402,11 @@ static void vop_load_csc_table(struct vop *vop, u32 offset, const u32 *table)
 {
 	int i;
 
-	if (!table)
+	/*
+	 * so far the csc offset is not 0 and in the feature the csc offset
+	 * impossible be 0, so when the offset is 0, should return here.
+	 */
+	if (!table || offset == 0)
 		return;
 
 	for (i = 0; i < 8; i++)
@@ -716,7 +726,7 @@ static int vop_hdr_atomic_check(struct drm_crtc *crtc,
 	struct vop *vop = to_vop(crtc);
 	int pre_sdr2hdr_state = 0, post_sdr2hdr_state = 0;
 	int pre_sdr2hdr_mode = 0, post_sdr2hdr_mode = 0, sdr2hdr_func = 0;
-	bool pre_overlay = 0;
+	bool pre_overlay = false;
 	int hdr2sdr_en = 0, plane_id = 0;
 
 	if (!vop->data->hdr_table)
@@ -747,11 +757,60 @@ static int vop_hdr_atomic_check(struct drm_crtc *crtc,
 	}
 
 	if (pre_sdr2hdr_state || post_sdr2hdr_state || hdr2sdr_en) {
-		pre_overlay = 1;
+		pre_overlay = true;
 		pre_sdr2hdr_mode = BT709_TO_BT2020;
 		post_sdr2hdr_mode = BT709_TO_BT2020;
 		sdr2hdr_func = SDR2HDR_FOR_HDR;
+		goto exit_hdr_conver;
 	}
+
+	/* overlay mode */
+	plane_id = 0;
+	pre_overlay = false;
+	pre_sdr2hdr_mode = 0;
+	post_sdr2hdr_mode = 0;
+	pre_sdr2hdr_state = 0;
+	post_sdr2hdr_state = 0;
+	drm_atomic_crtc_state_for_each_plane(plane, crtc_state) {
+		struct vop_plane_state *vop_plane_state;
+		struct vop_win *win = to_vop_win(plane);
+
+		pstate = drm_atomic_get_plane_state(state, plane);
+		if (IS_ERR(pstate))
+			return PTR_ERR(pstate);
+		vop_plane_state = to_vop_plane_state(pstate);
+		if (!pstate->fb)
+			continue;
+
+		if (vop_plane_state->color_space == V4L2_COLORSPACE_BT2020 &&
+		    vop_plane_state->color_space > s->color_space) {
+			if (win->feature & WIN_FEATURE_PRE_OVERLAY) {
+				pre_sdr2hdr_mode = BT2020_TO_BT709;
+				pre_sdr2hdr_state |= BIT(plane_id);
+			} else {
+				post_sdr2hdr_mode = BT2020_TO_BT709;
+				post_sdr2hdr_state |= BIT(plane_id);
+			}
+		}
+		if (s->color_space == V4L2_COLORSPACE_BT2020 &&
+		    vop_plane_state->color_space < s->color_space) {
+			if (win->feature & WIN_FEATURE_PRE_OVERLAY) {
+				pre_sdr2hdr_mode = BT709_TO_BT2020;
+				pre_sdr2hdr_state |= BIT(plane_id);
+			} else {
+				post_sdr2hdr_mode = BT709_TO_BT2020;
+				post_sdr2hdr_state |= BIT(plane_id);
+			}
+		}
+		plane_id++;
+	}
+
+	if (pre_sdr2hdr_state || post_sdr2hdr_state) {
+		pre_overlay = true;
+		sdr2hdr_func = SDR2HDR_FOR_BT2020;
+	}
+
+exit_hdr_conver:
 	s->hdr.pre_overlay = pre_overlay;
 	s->hdr.hdr2sdr_en = hdr2sdr_en;
 	if (s->hdr.pre_overlay)
@@ -771,6 +830,23 @@ static int vop_hdr_atomic_check(struct drm_crtc *crtc,
 	return 0;
 }
 
+static int to_vop_csc_mode(int csc_mode)
+{
+	switch (csc_mode) {
+	case V4L2_COLORSPACE_SMPTE170M:
+		return CSC_BT601L;
+	case V4L2_COLORSPACE_REC709:
+	case V4L2_COLORSPACE_DEFAULT:
+		return CSC_BT709L;
+	case V4L2_COLORSPACE_JPEG:
+		return CSC_BT601F;
+	case V4L2_COLORSPACE_BT2020:
+		return CSC_BT2020;
+	default:
+		return CSC_BT709L;
+	}
+}
+
 /*
  * rk3399 colorspace path:
  *      Input        Win csc                     Output
@@ -803,34 +879,38 @@ static int vop_hdr_atomic_check(struct drm_crtc *crtc,
  *
  * 11. RGB       --> bypass                --> RGB_OUTPUT(709)
  */
-static int vop_csc_setup(const struct vop_csc_table *csc_table,
-			 bool is_input_yuv, bool is_output_yuv,
-			 int input_csc, int output_csc,
-			 const uint32_t **y2r_table,
-			 const uint32_t **r2r_table,
-			 const uint32_t **r2y_table)
+static int vop_setup_csc_table(const struct vop_csc_table *csc_table,
+			       bool is_input_yuv, bool is_output_yuv,
+			       int input_csc, int output_csc,
+			       const uint32_t **y2r_table,
+			       const uint32_t **r2r_table,
+			       const uint32_t **r2y_table)
 {
 	*y2r_table = NULL;
 	*r2r_table = NULL;
 	*r2y_table = NULL;
 
+	if (!csc_table)
+		return 0;
+
 	if (is_output_yuv) {
-		if (output_csc == CSC_BT2020) {
+		if (output_csc == V4L2_COLORSPACE_BT2020) {
 			if (is_input_yuv) {
-				if (input_csc == CSC_BT2020)
+				if (input_csc == V4L2_COLORSPACE_BT2020)
 					return 0;
 				*y2r_table = csc_table->y2r_bt709;
 			}
-			if (input_csc != CSC_BT2020)
+			if (input_csc != V4L2_COLORSPACE_BT2020)
 				*r2r_table = csc_table->r2r_bt709_to_bt2020;
 			*r2y_table = csc_table->r2y_bt2020;
 		} else {
-			if (is_input_yuv && input_csc == CSC_BT2020)
+			if (is_input_yuv && input_csc == V4L2_COLORSPACE_BT2020)
 				*y2r_table = csc_table->y2r_bt2020;
-			if (input_csc == CSC_BT2020)
+			if (input_csc == V4L2_COLORSPACE_BT2020)
 				*r2r_table = csc_table->r2r_bt2020_to_bt709;
 			if (!is_input_yuv || *y2r_table) {
-				if (output_csc == CSC_BT709)
+				if (output_csc == V4L2_COLORSPACE_REC709 ||
+				    output_csc == V4L2_COLORSPACE_DEFAULT)
 					*r2y_table = csc_table->r2y_bt709;
 				else
 					*r2y_table = csc_table->r2y_bt601;
@@ -843,17 +923,18 @@ static int vop_csc_setup(const struct vop_csc_table *csc_table,
 		/*
 		 * is possible use bt2020 on rgb mode?
 		 */
-		if (WARN_ON(output_csc == CSC_BT2020))
+		if (WARN_ON(output_csc == V4L2_COLORSPACE_BT2020))
 			return -EINVAL;
 
-		if (input_csc == CSC_BT2020)
+		if (input_csc == V4L2_COLORSPACE_BT2020)
 			*y2r_table = csc_table->y2r_bt2020;
-		else if (input_csc == CSC_BT709)
+		else if ((input_csc == V4L2_COLORSPACE_REC709) ||
+			 (input_csc == V4L2_COLORSPACE_DEFAULT))
 			*y2r_table = csc_table->y2r_bt709;
 		else
 			*y2r_table = csc_table->y2r_bt601;
 
-		if (input_csc == CSC_BT2020)
+		if (input_csc == V4L2_COLORSPACE_BT2020)
 			/*
 			 * We don't have bt601 to bt709 table, force use bt709.
 			 */
@@ -863,6 +944,19 @@ static int vop_csc_setup(const struct vop_csc_table *csc_table,
 	return 0;
 }
 
+static void vop_setup_csc_mode(bool is_input_yuv, bool is_output_yuv,
+			       int input_csc, int output_csc,
+			       bool *y2r_en, bool *r2y_en, int *csc_mode)
+{
+	if (is_input_yuv && !is_output_yuv) {
+		*y2r_en = true;
+		*csc_mode =  to_vop_csc_mode(input_csc);
+	} else if (!is_input_yuv && is_output_yuv) {
+		*r2y_en = true;
+		*csc_mode = to_vop_csc_mode(output_csc);
+	}
+}
+
 static int vop_csc_atomic_check(struct drm_crtc *crtc,
 				struct drm_crtc_state *crtc_state)
 {
@@ -875,13 +969,11 @@ static int vop_csc_atomic_check(struct drm_crtc *crtc,
 	bool is_input_yuv, is_output_yuv;
 	int ret;
 
-	if (!csc_table)
-		return 0;
-
 	is_output_yuv = is_yuv_output(s->bus_format);
 
 	drm_atomic_crtc_state_for_each_plane(plane, crtc_state) {
 		struct vop_plane_state *vop_plane_state;
+		struct vop_win *win = to_vop_win(plane);
 
 		pstate = drm_atomic_get_plane_state(state, plane);
 		if (IS_ERR(pstate))
@@ -891,17 +983,39 @@ static int vop_csc_atomic_check(struct drm_crtc *crtc,
 		if (!pstate->fb)
 			continue;
 		is_input_yuv = is_yuv_support(pstate->fb->pixel_format);
-
-		/*
-		 * TODO: force set input and output csc mode.
-		 */
-		ret = vop_csc_setup(csc_table, is_input_yuv, is_output_yuv,
-				    CSC_BT709, CSC_BT709,
-				    &vop_plane_state->y2r_table,
-				    &vop_plane_state->r2r_table,
-				    &vop_plane_state->r2y_table);
+		vop_plane_state->y2r_en = false;
+		vop_plane_state->r2r_en = false;
+		vop_plane_state->r2y_en = false;
+
+		ret = vop_setup_csc_table(csc_table, is_input_yuv,
+					  is_output_yuv,
+					  vop_plane_state->color_space,
+					  s->color_space,
+					  &vop_plane_state->y2r_table,
+					  &vop_plane_state->r2r_table,
+					  &vop_plane_state->r2y_table);
 		if (ret)
 			return ret;
+
+		if (csc_table) {
+			vop_plane_state->y2r_en = !!vop_plane_state->y2r_table;
+			vop_plane_state->r2r_en = !!vop_plane_state->r2r_table;
+			vop_plane_state->r2y_en = !!vop_plane_state->r2y_table;
+			continue;
+		}
+
+		vop_setup_csc_mode(is_input_yuv, s->yuv_overlay,
+				   vop_plane_state->color_space, s->color_space,
+				   &vop_plane_state->y2r_en,
+				   &vop_plane_state->r2y_en,
+				   &vop_plane_state->csc_mode);
+
+		if (win->feature & WIN_FEATURE_PRE_OVERLAY)
+			vop_plane_state->r2r_en =
+				s->hdr.sdr2hdr_state.rgb2rgb_pre_conv_en;
+		else if (win->feature & WIN_FEATURE_HDR2SDR)
+			vop_plane_state->r2r_en =
+				s->hdr.sdr2hdr_state.rgb2rgb_post_conv_en;
 	}
 
 	return 0;
@@ -1496,13 +1610,14 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
 		VOP_WIN_SET(vop, win, alpha_en, 0);
 	}
 
+	VOP_WIN_SET(vop, win, csc_mode, vop_plane_state->csc_mode);
 	if (win->csc) {
 		vop_load_csc_table(vop, win->csc->y2r_offset, y2r_table);
 		vop_load_csc_table(vop, win->csc->r2r_offset, r2r_table);
 		vop_load_csc_table(vop, win->csc->r2y_offset, r2y_table);
-		VOP_WIN_SET_EXT(vop, win, csc, y2r_en, !!y2r_table);
-		VOP_WIN_SET_EXT(vop, win, csc, r2r_en, !!r2r_table);
-		VOP_WIN_SET_EXT(vop, win, csc, r2y_en, !!r2y_table);
+		VOP_WIN_SET_EXT(vop, win, csc, y2r_en, vop_plane_state->y2r_en);
+		VOP_WIN_SET_EXT(vop, win, csc, r2r_en, vop_plane_state->r2r_en);
+		VOP_WIN_SET_EXT(vop, win, csc, r2y_en, vop_plane_state->r2y_en);
 	}
 	VOP_WIN_SET(vop, win, enable, 1);
 	spin_unlock(&vop->reg_lock);
@@ -1596,6 +1711,12 @@ static int vop_atomic_plane_set_property(struct drm_plane *plane,
 		plane_state->eotf = val;
 		return 0;
 	}
+
+	if (property == private->color_space_prop) {
+		plane_state->color_space = val;
+		return 0;
+	}
+
 	DRM_ERROR("failed to set vop plane property\n");
 	return -EINVAL;
 }
@@ -1624,6 +1745,11 @@ static int vop_atomic_plane_get_property(struct drm_plane *plane,
 		return 0;
 	}
 
+	if (property == private->color_space_prop) {
+		*val = plane_state->color_space;
+		return 0;
+	}
+
 	DRM_ERROR("failed to get vop plane property\n");
 	return -EINVAL;
 }
@@ -2135,13 +2261,10 @@ static void vop_update_csc(struct drm_crtc *crtc)
 		     s->output_mode == ROCKCHIP_OUT_MODE_YUV420 ? 1 : 0);
 	VOP_CTRL_SET(vop, hdmi_dclk_out_en,
 		     s->output_mode == ROCKCHIP_OUT_MODE_YUV420 ? 1 : 0);
-	s->yuv_overlay = is_yuv_output(s->bus_format);
+	s->yuv_overlay = 0;
 	if (VOP_CTRL_SUPPORT(vop, overlay_mode)) {
+		s->yuv_overlay = is_yuv_output(s->bus_format);
 		VOP_CTRL_SET(vop, overlay_mode, s->yuv_overlay);
-		VOP_CTRL_SET(vop, bcsh_r2y_en, !s->yuv_overlay);
-		VOP_CTRL_SET(vop, bcsh_y2r_en, !s->yuv_overlay);
-	} else {
-		VOP_CTRL_SET(vop, bcsh_r2y_en, s->yuv_overlay);
 	}
 	VOP_CTRL_SET(vop, dsp_out_yuv, is_yuv_output(s->bus_format));
 
@@ -2289,6 +2412,7 @@ static void vop_crtc_enable(struct drm_crtc *crtc)
 	VOP_CTRL_SET(vop, cabc_scale_cfg_value, 1);
 	VOP_CTRL_SET(vop, cabc_scale_cfg_enable, 0);
 	VOP_CTRL_SET(vop, cabc_global_dn_limit_en, 1);
+	VOP_CTRL_SET(vop, win_csc_mode_sel, 1);
 
 	clk_set_rate(vop->dclk, adjusted_mode->crtc_clock * 1000);
 
@@ -2700,12 +2824,36 @@ static void vop_tv_config_update(struct drm_crtc *crtc,
 		return;
 
 	memcpy(&vop->active_tv_state, s->tv_state, sizeof(*s->tv_state));
-
-	if (s->tv_state->brightness == 50 &&
-	    s->tv_state->contrast == 50 &&
-	    s->tv_state->saturation == 50 &&
-	    s->tv_state->hue == 50) {
-		VOP_CTRL_SET(vop, bcsh_en, 0);
+	/* post BCSH CSC */
+	s->post_r2y_en = 0;
+	s->post_y2r_en = 0;
+	s->bcsh_en = 0;
+	if (s->tv_state) {
+		if (s->tv_state->brightness != 50 ||
+		    s->tv_state->contrast != 50 ||
+		    s->tv_state->saturation != 50 || s->tv_state->hue != 50)
+			s->bcsh_en = 1;
+	}
+
+	if (s->bcsh_en) {
+		if (!s->yuv_overlay)
+			s->post_r2y_en = 1;
+		if (!is_yuv_output(s->bus_format))
+			s->post_y2r_en = 1;
+	} else {
+		if (!s->yuv_overlay && is_yuv_output(s->bus_format))
+			s->post_r2y_en = 1;
+		if (s->yuv_overlay && !is_yuv_output(s->bus_format))
+			s->post_y2r_en = 1;
+	}
+
+	s->post_csc_mode = to_vop_csc_mode(s->color_space);
+	VOP_CTRL_SET(vop, bcsh_r2y_en, s->post_r2y_en);
+	VOP_CTRL_SET(vop, bcsh_y2r_en, s->post_y2r_en);
+	VOP_CTRL_SET(vop, bcsh_r2y_csc_mode, s->post_csc_mode);
+	VOP_CTRL_SET(vop, bcsh_y2r_csc_mode, s->post_csc_mode);
+	if (!s->bcsh_en) {
+		VOP_CTRL_SET(vop, bcsh_en, s->bcsh_en);
 		return;
 	}
 
@@ -2734,7 +2882,7 @@ static void vop_tv_config_update(struct drm_crtc *crtc,
 	VOP_CTRL_SET(vop, bcsh_sat_con, saturation * contrast / 0x100);
 	VOP_CTRL_SET(vop, bcsh_sin_hue, sin_hue);
 	VOP_CTRL_SET(vop, bcsh_cos_hue, cos_hue);
-	VOP_CTRL_SET(vop, bcsh_en, 1);
+	VOP_CTRL_SET(vop, bcsh_en, s->bcsh_en);
 }
 
 static void vop_cfg_update(struct drm_crtc *crtc,
@@ -3284,6 +3432,8 @@ static int vop_plane_init(struct vop *vop, struct vop_win *win,
 	drm_object_attach_property(&win->base.base, vop->plane_feature_prop,
 				   feature);
 	drm_object_attach_property(&win->base.base, private->eotf_prop, 0);
+	drm_object_attach_property(&win->base.base,
+				   private->color_space_prop, 0);
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
index dfaae0a714fe..04710aba57e9 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.h
@@ -47,8 +47,9 @@ enum cabc_stage_up_mode {
 #define DSP_DELTA_SWAP		0x8
 
 enum vop_csc_format {
-	CSC_BT601,
-	CSC_BT709,
+	CSC_BT601L,
+	CSC_BT709L,
+	CSC_BT601F,
 	CSC_BT2020,
 };
 
@@ -357,6 +358,7 @@ struct vop_win_phy {
 	struct vop_reg enable;
 	struct vop_reg format;
 	struct vop_reg fmt_10;
+	struct vop_reg csc_mode;
 	struct vop_reg xmirror;
 	struct vop_reg ymirror;
 	struct vop_reg rb_swap;
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
index 1ed5b2b470fc..9a70cddd3ce3 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
+++ b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
@@ -108,6 +108,7 @@ static const struct vop_win_phy rk3288_win01_data = {
 	.enable = VOP_REG(RK3288_WIN0_CTRL0, 0x1, 0),
 	.format = VOP_REG(RK3288_WIN0_CTRL0, 0x7, 1),
 	.fmt_10 = VOP_REG(RK3288_WIN0_CTRL0, 0x7, 4),
+	.csc_mode = VOP_REG(RK3288_WIN0_CTRL0, 0x3, 10),
 	.rb_swap = VOP_REG(RK3288_WIN0_CTRL0, 0x1, 12),
 	.xmirror = VOP_REG_VER(RK3368_WIN0_CTRL0, 0x1, 21, 3, 2, -1),
 	.ymirror = VOP_REG_VER(RK3368_WIN0_CTRL0, 0x1, 22, 3, 2, -1),
@@ -533,16 +534,28 @@ static const struct vop_csc rk3399_win1_csc = {
 	.r2y_offset = RK3399_WIN1_YUV2YUV_R2Y,
 };
 
+static const struct vop_csc rk3399_win2_csc = {
+	.r2r_en = VOP_REG(RK3399_YUV2YUV_WIN, 0x1, 16),
+	.r2y_en = VOP_REG(RK3399_YUV2YUV_WIN, 0x1, 18),
+	.r2r_offset = RK3399_WIN2_YUV2YUV_3X3,
+};
+
+static const struct vop_csc rk3399_win3_csc = {
+	.r2r_en = VOP_REG(RK3399_YUV2YUV_WIN, 0x1, 24),
+	.r2y_en = VOP_REG(RK3399_YUV2YUV_WIN, 0x1, 26),
+	.r2r_offset = RK3399_WIN3_YUV2YUV_3X3,
+};
+
 static const struct vop_win_data rk3399_vop_win_data[] = {
 	{ .base = 0x00, .phy = &rk3288_win01_data, .csc = &rk3399_win0_csc,
 	  .type = DRM_PLANE_TYPE_PRIMARY },
 	{ .base = 0x40, .phy = &rk3288_win01_data, .csc = &rk3399_win1_csc,
 	  .type = DRM_PLANE_TYPE_OVERLAY },
-	{ .base = 0x00, .phy = &rk3368_win23_data,
+	{ .base = 0x00, .phy = &rk3368_win23_data, .csc = &rk3399_win2_csc,
 	  .type = DRM_PLANE_TYPE_OVERLAY,
 	  .area = rk3368_area_data,
 	  .area_size = ARRAY_SIZE(rk3368_area_data), },
-	{ .base = 0x50, .phy = &rk3368_win23_data,
+	{ .base = 0x50, .phy = &rk3368_win23_data, .csc = &rk3399_win3_csc,
 	  .type = DRM_PLANE_TYPE_CURSOR,
 	  .area = rk3368_area_data,
 	  .area_size = ARRAY_SIZE(rk3368_area_data), },
-- 
2.35.3

