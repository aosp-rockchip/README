From 36a38835147e4a6c5dba3570305058dc5942f8c5 Mon Sep 17 00:00:00 2001
From: Zheng Yang <zhengyang@rock-chips.com>
Date: Thu, 12 Oct 2017 18:08:32 +0800
Subject: [PATCH] drm: Add HDR panel metadata property

HDR_PANEL_METADATA is used to indicate HDR capacity of sink device.

Change-Id: I598a7bb5634f14b57f94135fd3be6b0ad2075116
Signed-off-by: Zheng Yang <zhengyang@rock-chips.com>
---
 drivers/gpu/drm/bridge/dw-hdmi.c            |  3 +++
 drivers/gpu/drm/drm_crtc.c                  | 28 +++++++++++++++++++++
 drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c |  3 +++
 include/drm/drm_crtc.h                      |  6 ++++-
 4 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/bridge/dw-hdmi.c b/drivers/gpu/drm/bridge/dw-hdmi.c
index c017af810b10..9ce47096cbd2 100644
--- a/drivers/gpu/drm/bridge/dw-hdmi.c
+++ b/drivers/gpu/drm/bridge/dw-hdmi.c
@@ -2336,6 +2336,8 @@ static int dw_hdmi_connector_get_modes(struct drm_connector *connector)
 	struct edid *edid;
 	struct drm_display_mode *mode;
 	const u8 def_modes[6] = {4, 16, 31, 19, 17, 2};
+	struct hdr_static_metadata *metedata =
+			&connector->display_info.hdmi.hdr_panel_metadata;
 	int i, ret = 0;
 
 	if (!hdmi->ddc)
@@ -2352,6 +2354,7 @@ static int dw_hdmi_connector_get_modes(struct drm_connector *connector)
 		ret = drm_add_edid_modes(connector, edid);
 		/* Store the ELD */
 		drm_edid_to_eld(connector, edid);
+		drm_mode_connector_update_hdr_property(connector, metedata);
 		kfree(edid);
 	} else {
 		hdmi->sink_is_hdmi = true;
diff --git a/drivers/gpu/drm/drm_crtc.c b/drivers/gpu/drm/drm_crtc.c
index 5c7e2fda4978..7cd13faf83ca 100644
--- a/drivers/gpu/drm/drm_crtc.c
+++ b/drivers/gpu/drm/drm_crtc.c
@@ -1669,6 +1669,14 @@ static int drm_mode_create_standard_properties(struct drm_device *dev)
 		return -ENOMEM;
 	dev->mode_config.hdr_source_metadata_property = prop;
 
+	prop = drm_property_create(dev,
+				   DRM_MODE_PROP_BLOB |
+				   DRM_MODE_PROP_IMMUTABLE,
+				   "HDR_PANEL_METADATA", 0);
+	if (!prop)
+		return -ENOMEM;
+	dev->mode_config.hdr_panel_metadata_property = prop;
+
 	prop = drm_property_create_enum(dev, DRM_MODE_PROP_IMMUTABLE,
 					"type", drm_plane_type_enum_list,
 					ARRAY_SIZE(drm_plane_type_enum_list));
@@ -5048,6 +5056,26 @@ int drm_mode_connector_update_edid_property(struct drm_connector *connector,
 }
 EXPORT_SYMBOL(drm_mode_connector_update_edid_property);
 
+int
+drm_mode_connector_update_hdr_property(struct drm_connector *connector,
+				       const struct hdr_static_metadata *data)
+{
+	struct drm_device *dev = connector->dev;
+	size_t size = sizeof(*data);
+	struct drm_property *property =
+			dev->mode_config.hdr_panel_metadata_property;
+	int ret;
+
+	ret = drm_property_replace_global_blob(dev,
+					       &connector->hdr_panel_blob_ptr,
+					       size,
+					       data,
+					       &connector->base,
+					       property);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_connector_update_hdr_property);
+
 /* Some properties could refer to dynamic refcnt'd objects, or things that
  * need special locking to handle lifetime issues (ie. to ensure the prop
  * value doesn't become invalid part way through the property update due to
diff --git a/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c b/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
index 2be241936ca8..63f8464073ec 100644
--- a/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
+++ b/drivers/gpu/drm/rockchip/dw_hdmi-rockchip.c
@@ -804,6 +804,9 @@ dw_hdmi_rockchip_attatch_properties(struct drm_connector *connector,
 	prop = connector->dev->mode_config.hdr_source_metadata_property;
 	if (version >= 0x211a)
 		drm_object_attach_property(&connector->base, prop, 0);
+
+	prop = connector->dev->mode_config.hdr_panel_metadata_property;
+	drm_object_attach_property(&connector->base, prop, 0);
 }
 
 static void
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index 8e483c28b116..1ff48539154a 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -953,6 +953,8 @@ struct drm_connector {
 
 	struct drm_property_blob *tile_blob_ptr;
 
+	struct drm_property_blob *hdr_panel_blob_ptr;
+
 	uint8_t polled; /* DRM_CONNECTOR_POLL_* */
 
 	/* requested DPMS state */
@@ -1638,7 +1640,7 @@ struct drm_mode_config {
 	 * This will be provided by userspace compositors based on HDR content
 	 */
 	struct drm_property *hdr_source_metadata_property;
-
+	struct drm_property *hdr_panel_metadata_property;
 	/* dumb ioctl parameters */
 	uint32_t preferred_depth, prefer_shadow;
 
@@ -1814,6 +1816,8 @@ extern int drm_mode_connector_set_path_property(struct drm_connector *connector,
 int drm_mode_connector_set_tile_property(struct drm_connector *connector);
 extern int drm_mode_connector_update_edid_property(struct drm_connector *connector,
 						   const struct edid *edid);
+int drm_mode_connector_update_hdr_property(struct drm_connector *connector,
+					   const struct hdr_static_metadata *data);
 
 extern int drm_display_info_set_bus_formats(struct drm_display_info *info,
 					    const u32 *formats,
-- 
2.35.3

