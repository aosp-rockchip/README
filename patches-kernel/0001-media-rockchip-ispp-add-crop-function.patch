From 11068fbb8c11c33392fd3c851c906db93b19450b Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Thu, 9 Apr 2020 17:32:34 +0800
Subject: [PATCH] media: rockchip: ispp: add crop function

set selection to ispp will request mpfbc crop output

Change-Id: I3d8930a95e117fb44a6491357d328ccf87684993
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/ispp/ispp.c   | 162 ++++++++++++++----
 drivers/media/platform/rockchip/ispp/ispp.h   |   2 +-
 drivers/media/platform/rockchip/ispp/params.c |   3 +-
 drivers/media/platform/rockchip/ispp/stream.c |  15 +-
 4 files changed, 146 insertions(+), 36 deletions(-)

diff --git a/drivers/media/platform/rockchip/ispp/ispp.c b/drivers/media/platform/rockchip/ispp/ispp.c
index 893e049d8724..5e335462e53f 100644
--- a/drivers/media/platform/rockchip/ispp/ispp.c
+++ b/drivers/media/platform/rockchip/ispp/ispp.c
@@ -99,51 +99,136 @@ static int rkispp_sd_get_fmt(struct v4l2_subdev *sd,
 			     struct v4l2_subdev_format *fmt)
 {
 	struct rkispp_subdev *ispp_sdev = v4l2_get_subdevdata(sd);
-	struct rkispp_device *dev = ispp_sdev->dev;
+	struct v4l2_mbus_framefmt *mf;
 	const struct isppsd_fmt *ispp_fmt;
 	int ret = 0;
 
-	if (dev->inp != INP_ISP) {
-		*fmt = ispp_sdev->in_fmt;
-		return 0;
+	if (!fmt)
+		goto err;
+
+	if (fmt->pad != RKISPP_PAD_SINK &&
+	    fmt->pad != RKISPP_PAD_SOURCE)
+		goto err;
+
+	mf = &fmt->format;
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+		if (!cfg)
+			goto err;
+		mf = v4l2_subdev_get_try_format(sd, cfg, fmt->pad);
 	}
 
-	ret = v4l2_subdev_call(ispp_sdev->remote_sd,
-			       pad, get_fmt, cfg, fmt);
-	if (ret == 0) {
-		ispp_fmt = find_fmt(fmt->format.code);
-		if (!ispp_fmt)
-			return -EINVAL;
-		ispp_sdev->in_fmt = *fmt;
-		ispp_sdev->out_fmt = *ispp_fmt;
-		ispp_sdev->out_fmt.width = fmt->format.width;
-		ispp_sdev->out_fmt.height = fmt->format.height;
+	if (ispp_sdev->dev->inp != INP_ISP) {
+		*mf = ispp_sdev->in_fmt;
+		return 0;
 	}
 
+	if (fmt->pad == RKISPP_PAD_SINK) {
+		ret = v4l2_subdev_call(ispp_sdev->remote_sd,
+				       pad, get_fmt, cfg, fmt);
+		if (!ret) {
+			ispp_fmt = find_fmt(fmt->format.code);
+			if (!ispp_fmt)
+				goto err;
+			ispp_sdev->in_fmt = *mf;
+			ispp_sdev->out_fmt = *ispp_fmt;
+		}
+	} else {
+		*mf = ispp_sdev->in_fmt;
+		mf->width = ispp_sdev->out_fmt.width;
+		mf->height = ispp_sdev->out_fmt.height;
+	}
 	return ret;
+err:
+	return -EINVAL;
 }
 
 static int rkispp_sd_set_fmt(struct v4l2_subdev *sd,
 			     struct v4l2_subdev_pad_config *cfg,
 			     struct v4l2_subdev_format *fmt)
+{
+	/* format from isp output or rkispp_m_bypass input */
+	return 0;
+}
+
+static int rkispp_sd_get_selection(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_pad_config *cfg,
+				   struct v4l2_subdev_selection *sel)
 {
 	struct rkispp_subdev *ispp_sdev = v4l2_get_subdevdata(sd);
-	struct rkispp_device *dev = ispp_sdev->dev;
-	const struct isppsd_fmt *ispp_fmt;
+	struct v4l2_rect *crop;
+	int ret = 0;
 
-	if (dev->inp != INP_ISP) {
-		ispp_sdev->in_fmt = *fmt;
+	if (!sel)
+		goto err;
+	if (sel->pad != RKISPP_PAD_SINK)
+		goto err;
+
+	crop = &sel->r;
+	if (sel->which == V4L2_SUBDEV_FORMAT_TRY) {
+		if (!cfg)
+			goto err;
+		crop = v4l2_subdev_get_try_crop(sd, cfg, sel->pad);
+	}
+
+	if (ispp_sdev->dev->inp != INP_ISP) {
+		crop->left = 0;
+		crop->top = 0;
+		crop->width = ispp_sdev->in_fmt.width;
+		crop->height = ispp_sdev->in_fmt.height;
 		return 0;
 	}
 
-	ispp_fmt = find_fmt(fmt->format.code);
-	if (!ispp_fmt)
-		return -EINVAL;
+	ret = v4l2_subdev_call(ispp_sdev->remote_sd,
+			pad, get_selection, cfg, sel);
+	if (!ret && sel->target == V4L2_SEL_TGT_CROP) {
+		ispp_sdev->out_fmt.width = crop->width;
+		ispp_sdev->out_fmt.height = crop->height;
+	}
 
-	ispp_sdev->out_fmt = *ispp_fmt;
-	ispp_sdev->in_fmt = *fmt;
-	return v4l2_subdev_call(ispp_sdev->remote_sd, pad,
-				set_fmt, NULL, fmt);
+	return ret;
+err:
+	return -EINVAL;
+}
+
+static int rkispp_sd_set_selection(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_pad_config *cfg,
+				   struct v4l2_subdev_selection *sel)
+{
+	struct rkispp_subdev *ispp_sdev = v4l2_get_subdevdata(sd);
+	struct v4l2_rect *crop;
+	int ret = 0;
+
+	if (!sel)
+		goto err;
+	if (sel->pad != RKISPP_PAD_SINK ||
+	    sel->target != V4L2_SEL_TGT_CROP)
+		goto err;
+
+	crop = &sel->r;
+	if (sel->which == V4L2_SUBDEV_FORMAT_TRY) {
+		if (!cfg)
+			goto err;
+		crop = v4l2_subdev_get_try_crop(sd, cfg, sel->pad);
+	}
+
+	if (ispp_sdev->dev->inp != INP_ISP) {
+		crop->left = 0;
+		crop->top = 0;
+		crop->width = ispp_sdev->in_fmt.width;
+		crop->height = ispp_sdev->in_fmt.height;
+		return 0;
+	}
+
+	ret = v4l2_subdev_call(ispp_sdev->remote_sd,
+			pad, set_selection, cfg, sel);
+	if (!ret) {
+		ispp_sdev->out_fmt.width = crop->width;
+		ispp_sdev->out_fmt.height = crop->height;
+	}
+
+	return ret;
+err:
+	return -EINVAL;
 }
 
 static int rkispp_s_rx_buffer(struct rkispp_subdev *ispp_sdev)
@@ -257,16 +342,31 @@ static int rkispp_sd_s_power(struct v4l2_subdev *sd, int on)
 		       ispp_dev->base_addr + RKISPP_SHARP_CORE_CTRL);
 		writel(GATE_DIS_NR, ispp_dev->base_addr + RKISPP_CTRL_CLKGATE);
 		if (ispp_dev->inp == INP_ISP) {
-			struct v4l2_subdev_format *fmt = &ispp_sdev->in_fmt;
-
-			fmt->which = V4L2_SUBDEV_FORMAT_ACTIVE;
-			ret = v4l2_subdev_call(sd, pad, get_fmt, NULL, fmt);
-			if (ret < 0) {
+			struct v4l2_subdev_format fmt;
+			struct v4l2_subdev_selection sel;
+
+			/* update format, if ispp input change */
+			fmt.pad = RKISPP_PAD_SINK;
+			fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+			ret = v4l2_subdev_call(sd, pad, get_fmt, NULL, &fmt);
+			if (ret) {
 				v4l2_err(&ispp_dev->v4l2_dev,
 					 "%s get format fail:%d\n",
 					 __func__, ret);
 				goto err;
 			}
+			sel.pad = RKISPP_PAD_SINK;
+			sel.target = V4L2_SEL_TGT_CROP;
+			sel.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+			ret = v4l2_subdev_call(sd, pad,
+				get_selection, NULL, &sel);
+			if (ret) {
+				v4l2_err(&ispp_dev->v4l2_dev,
+					 "%s get crop fail:%d\n",
+					 __func__, ret);
+				goto err;
+			}
+
 			ret = v4l2_subdev_call(ispp_sdev->remote_sd,
 					       core, s_power, 1);
 			if (ret < 0) {
@@ -309,6 +409,8 @@ static const struct media_entity_operations rkispp_sd_media_ops = {
 static const struct v4l2_subdev_pad_ops rkispp_sd_pad_ops = {
 	.get_fmt = rkispp_sd_get_fmt,
 	.set_fmt = rkispp_sd_set_fmt,
+	.get_selection = rkispp_sd_get_selection,
+	.set_selection = rkispp_sd_set_selection,
 };
 
 static const struct v4l2_subdev_video_ops rkispp_sd_video_ops = {
diff --git a/drivers/media/platform/rockchip/ispp/ispp.h b/drivers/media/platform/rockchip/ispp/ispp.h
index 0ec459f9ff30..ec183ed79717 100644
--- a/drivers/media/platform/rockchip/ispp/ispp.h
+++ b/drivers/media/platform/rockchip/ispp/ispp.h
@@ -29,7 +29,7 @@ struct rkispp_subdev {
 	struct v4l2_subdev sd;
 	struct v4l2_subdev *remote_sd;
 	struct media_pad pads[RKISPP_PAD_MAX];
-	struct v4l2_subdev_format in_fmt;
+	struct v4l2_mbus_framefmt in_fmt;
 	struct isppsd_fmt out_fmt;
 	atomic_t frm_sync_seq;
 };
diff --git a/drivers/media/platform/rockchip/ispp/params.c b/drivers/media/platform/rockchip/ispp/params.c
index d5199d7e2fec..1afe75dfa55c 100644
--- a/drivers/media/platform/rockchip/ispp/params.c
+++ b/drivers/media/platform/rockchip/ispp/params.c
@@ -37,9 +37,8 @@ static inline size_t get_input_size(struct rkispp_params_vdev *params_vdev)
 {
 	struct rkispp_device *dev = params_vdev->dev;
 	struct rkispp_subdev *isp_sdev = &dev->ispp_sdev;
-	struct v4l2_mbus_framefmt *frmfmt = &isp_sdev->in_fmt.format;
 
-	return frmfmt->width * frmfmt->height;
+	return isp_sdev->out_fmt.width * isp_sdev->out_fmt.height;
 }
 
 static void tnr_config(struct rkispp_params_vdev *params_vdev,
diff --git a/drivers/media/platform/rockchip/ispp/stream.c b/drivers/media/platform/rockchip/ispp/stream.c
index dc756424dce2..e03179a5127e 100644
--- a/drivers/media/platform/rockchip/ispp/stream.c
+++ b/drivers/media/platform/rockchip/ispp/stream.c
@@ -903,6 +903,7 @@ static int is_stopped_mb(struct rkispp_stream *stream)
 		rkispp_set_bits(base + RKISPP_SHARP_CORE_CTRL,
 				SW_SHP_DMA_DIS, SW_SHP_DMA_DIS);
 		val = false;
+		en = false;
 		break;
 	default:
 		en = SW_FEC_EN_SHD;
@@ -925,6 +926,8 @@ static int limit_check_mb(struct rkispp_stream *stream)
 			 "output %dx%d should euqal to input %dx%d\n",
 			 stream->out_fmt.width, stream->out_fmt.height,
 			 sdev->out_fmt.width, sdev->out_fmt.height);
+		stream->out_fmt.width = 0;
+		stream->out_fmt.height = 0;
 		return -EINVAL;
 	}
 
@@ -1006,6 +1009,8 @@ static int limit_check_scl(struct rkispp_stream *stream)
 			 stream->id - STREAM_S0,
 			 stream->out_fmt.width, stream->out_fmt.height,
 			 max_width, max_ratio, min_ratio);
+		stream->out_fmt.width = 0;
+		stream->out_fmt.height = 0;
 	}
 
 	return ret;
@@ -1045,6 +1050,8 @@ static int rkispp_queue_setup(struct vb2_queue *queue,
 	u32 i;
 
 	pixm = &stream->out_fmt;
+	if (!pixm->width || !pixm->height)
+		return -EINVAL;
 	cap_fmt = &stream->out_cap_fmt;
 	*num_planes = cap_fmt->mplanes;
 
@@ -1422,9 +1429,9 @@ static int rkispp_set_fmt(struct rkispp_stream *stream,
 		stream->out_cap_fmt = *fmt;
 		stream->out_fmt = *pixm;
 
-		if (stream->id == STREAM_II) {
-			sdev->in_fmt.format.width = pixm->width;
-			sdev->in_fmt.format.height = pixm->height;
+		if (stream->id == STREAM_II && stream->linked) {
+			sdev->in_fmt.width = pixm->width;
+			sdev->in_fmt.height = pixm->height;
 			sdev->out_fmt.width = pixm->width;
 			sdev->out_fmt.height = pixm->height;
 		}
@@ -1442,6 +1449,8 @@ static int rkispp_set_fmt(struct rkispp_stream *stream,
 			 "ispp input max:%dx%d min:%dx%d\n",
 			 RKISPP_MIN_WIDTH, RKISPP_MIN_HEIGHT,
 			 RKISPP_MAX_WIDTH, RKISPP_MAX_HEIGHT);
+		stream->out_fmt.width = 0;
+		stream->out_fmt.height = 0;
 		return -EINVAL;
 	}
 
-- 
2.35.3

