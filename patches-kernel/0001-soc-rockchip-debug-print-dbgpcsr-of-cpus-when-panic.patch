From f901b81c85e17b54b6654a4ca9acb0257e8961f3 Mon Sep 17 00:00:00 2001
From: Huibin Hong <huibin.hong@rock-chips.com>
Date: Thu, 28 Mar 2019 17:50:29 +0800
Subject: [PATCH] soc: rockchip: debug: print dbgpcsr of cpus when panic

Change-Id: I4a3d60986b0bd23d43fa7fd5479b43cb65662996
Signed-off-by: Huibin Hong <huibin.hong@rock-chips.com>
---
 drivers/soc/rockchip/Kconfig          |   6 +
 drivers/soc/rockchip/Makefile         |   1 +
 drivers/soc/rockchip/rockchip_debug.c | 195 ++++++++++++++++++++++++++
 drivers/soc/rockchip/rockchip_debug.h |  14 ++
 4 files changed, 216 insertions(+)
 create mode 100644 drivers/soc/rockchip/rockchip_debug.c
 create mode 100644 drivers/soc/rockchip/rockchip_debug.h

diff --git a/drivers/soc/rockchip/Kconfig b/drivers/soc/rockchip/Kconfig
index 9db45d778185..bfd9b0bc2382 100644
--- a/drivers/soc/rockchip/Kconfig
+++ b/drivers/soc/rockchip/Kconfig
@@ -90,4 +90,10 @@ config ROCKCHIP_VENDOR_STORAGE_UPDATE_LOADER
 	help
 	  Say y here to enable rockchip vendor storage update loader support.
 	  The /dev/vendor_storage must set root user access only.
+
+config ROCKCHIP_DEBUG
+	bool "Rockchip DEBUG"
+	default y
+	help
+	  Print dbgpcsr for every cpu when panic.
 endif
diff --git a/drivers/soc/rockchip/Makefile b/drivers/soc/rockchip/Makefile
index d5eef424632d..88c893e1dd77 100644
--- a/drivers/soc/rockchip/Makefile
+++ b/drivers/soc/rockchip/Makefile
@@ -15,3 +15,4 @@ obj-$(CONFIG_ROCKCHIP_SYSTEM_MONITOR) += rockchip_system_monitor.o
 
 obj-y += rk_vendor_storage.o
 obj-$(CONFIG_RK_FLASH) += flash_vendor_storage.o
+obj-$(CONFIG_ROCKCHIP_DEBUG) += rockchip_debug.o
diff --git a/drivers/soc/rockchip/rockchip_debug.c b/drivers/soc/rockchip/rockchip_debug.c
new file mode 100644
index 000000000000..30a721a55452
--- /dev/null
+++ b/drivers/soc/rockchip/rockchip_debug.c
@@ -0,0 +1,195 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * drivers/soc/rockchip/rockchip_debug.c
+ *
+ * Arm debug driver
+ *
+ * Copyright (C) 2019 ROCKCHIP, Inc.
+ */
+
+/*	RK3399
+ *	debug {
+ *		compatible = "rockchip,debug";
+ *		reg = <0x0 0xfe430000 0x0 0x1000>,
+ *		      <0x0 0xfe432000 0x0 0x1000>,
+ *		      <0x0 0xfe434000 0x0 0x1000>,
+ *		      <0x0 0xfe436000 0x0 0x1000>,
+ *		      <0x0 0xfe610000 0x0 0x1000>,
+ *		      <0x0 0xfe710000 0x0 0x1000>;
+ *	};
+ */
+
+/*	RK3326
+ *	debug {
+ *		compatible = "rockchip,debug";
+ *		reg = <0x0 0xff690000 0x0 0x1000>,
+ *		      <0x0 0xff692000 0x0 0x1000>,
+ *		      <0x0 0xff694000 0x0 0x1000>,
+ *		      <0x0 0xff696000 0x0 0x1000>;
+ *	};
+ */
+
+/*	RK3308
+ *	debug {
+ *		compatible = "rockchip,debug";
+ *		reg = <0x0 0xff810000 0x0 0x1000>,
+ *		      <0x0 0xff812000 0x0 0x1000>,
+ *		      <0x0 0xff814000 0x0 0x1000>,
+ *		      <0x0 0xff816000 0x0 0x1000>;
+ *	};
+ */
+
+/*	RK3288
+ *	debug {
+ *		compatible = "rockchip,debug";
+ *		reg = <0x0 0xffbb0000 0x0 0x1000>,
+ *		      <0x0 0xffbb2000 0x0 0x1000>,
+ *		      <0x0 0xffbb4000 0x0 0x1000>,
+ *		      <0x0 0xffbb6000 0x0 0x1000>;
+ *	};
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include "../../staging/android/fiq_debugger/fiq_debugger_priv.h"
+#include "rockchip_debug.h"
+
+#define EDPCSR_LO			0x0a0
+#define EDPCSR_HI			0x0ac
+#define EDLAR				0xfb0
+#define EDLAR_UNLOCK			0xc5acce55
+
+#define NUM_CPU_SAMPLES			100
+#define NUM_SAMPLES_TO_PRINT		32
+
+static void __iomem *rockchip_cpu_debug[16];
+
+#ifdef CONFIG_FIQ_DEBUGGER
+int rockchip_debug_dump_pcsr(struct fiq_debugger_output *output)
+{
+	unsigned long dbgpcsr;
+	int i = 0, j;
+	void *pc = NULL;
+	void *prev_pc = NULL;
+	int printed = 0;
+	void __iomem *base;
+
+	while (rockchip_cpu_debug[i]) {
+		base = rockchip_cpu_debug[i];
+		/* Unlock EDLSR.SLK so that EDPCSRhi gets populated */
+		writel(EDLAR_UNLOCK, base + EDLAR);
+
+		/* Try to read a bunch of times if CPU is actually running */
+		for (j = 0; j < NUM_CPU_SAMPLES &&
+			    printed < NUM_SAMPLES_TO_PRINT; j++) {
+			if (sizeof(dbgpcsr) == 8)
+				dbgpcsr = ((u64)readl(base + EDPCSR_LO)) |
+				  ((u64)readl(base + EDPCSR_HI) << 32);
+			else
+				dbgpcsr = (u32)readl(base + EDPCSR_LO);
+
+			/* NOTE: no offset on ARMv8; see DBGDEVID1.PCSROffset */
+			pc = (void *)(dbgpcsr & ~1);
+
+			if (pc != prev_pc) {
+				output->printf(output,
+					       "CPU%d online:%d PC: <%ph> %pS\n",
+					       i, cpu_online(i), pc, pc);
+				printed++;
+			}
+			prev_pc = pc;
+		}
+		i++;
+		prev_pc = NULL;
+		printed = 0;
+	}
+	return NOTIFY_OK;
+}
+#endif
+
+static int rockchip_panic_notify(struct notifier_block *nb, unsigned long event,
+				 void *p)
+{
+	unsigned long dbgpcsr;
+	int i = 0, j;
+	void *pc = NULL;
+	void *prev_pc = NULL;
+	int printed = 0;
+	void __iomem *base;
+
+	/*
+	 * The panic handler will try to shut down the other CPUs.
+	 * If any of them are still online at this point, this loop attempts
+	 * to determine the program counter value.  If there are no wedged
+	 * CPUs, this loop will do nothing.
+	 */
+
+	while (rockchip_cpu_debug[i]) {
+		base = rockchip_cpu_debug[i];
+		/* Unlock EDLSR.SLK so that EDPCSRhi gets populated */
+		writel(EDLAR_UNLOCK, base + EDLAR);
+
+		/* Try to read a bunch of times if CPU is actually running */
+		for (j = 0; j < NUM_CPU_SAMPLES &&
+			    printed < NUM_SAMPLES_TO_PRINT; j++) {
+			if (sizeof(dbgpcsr) == 8)
+				dbgpcsr = ((u64)readl(base + EDPCSR_LO)) |
+				  ((u64)readl(base + EDPCSR_HI) << 32);
+			else
+				dbgpcsr = (u32)readl(base + EDPCSR_LO);
+
+			/* NOTE: no offset on ARMv8; see DBGDEVID1.PCSROffset */
+			pc = (void *)(dbgpcsr & ~1);
+
+			if (pc != prev_pc) {
+				pr_err("CPU%d online:%d PC: <%ph> %pS\n",
+				       i, cpu_online(i), pc, pc);
+				printed++;
+			}
+			prev_pc = pc;
+		}
+		i++;
+		prev_pc = NULL;
+		printed = 0;
+	}
+	return NOTIFY_OK;
+}
+
+static struct notifier_block rockchip_panic_nb = {
+	.notifier_call = rockchip_panic_notify,
+};
+
+static const struct of_device_id rockchip_debug_dt_match[] __initconst = {
+	{
+		.compatible = "rockchip,debug",
+	},
+	{ /* sentinel */ },
+};
+
+static int __init rockchip_debug_init(void)
+{
+	int i;
+	struct device_node *np = NULL;
+
+	np = of_find_matching_node_and_match(NULL,
+				rockchip_debug_dt_match, NULL);
+
+	if (!np)
+		return -ENODEV;
+
+	i = -1;
+	do {
+		i++;
+		rockchip_cpu_debug[i] = of_iomap(np, i);
+	} while (rockchip_cpu_debug[i]);
+
+	of_node_put(np);
+
+	atomic_notifier_chain_register(&panic_notifier_list,
+				       &rockchip_panic_nb);
+	return 0;
+}
+arch_initcall(rockchip_debug_init);
diff --git a/drivers/soc/rockchip/rockchip_debug.h b/drivers/soc/rockchip/rockchip_debug.h
new file mode 100644
index 000000000000..d8b83fb6e27d
--- /dev/null
+++ b/drivers/soc/rockchip/rockchip_debug.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */
+
+/* Copyright (c) 2020 Fuzhou Rockchip Electronics Co., Ltd */
+
+#ifndef _ROCKCHIP_DEBUG
+#define _ROCKCHIP_DEBUG
+
+struct fiq_debugger_output;
+
+#ifdef CONFIG_FIQ_DEBUGGER
+int rockchip_debug_dump_pcsr(struct fiq_debugger_output *output);
+#endif
+
+#endif
-- 
2.35.3

