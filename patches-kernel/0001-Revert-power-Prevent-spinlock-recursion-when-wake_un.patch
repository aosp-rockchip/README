From ee178b734e454470462745543da6269c0e422428 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=BB=84=E6=B6=9B?= <huangtao@rock-chips.com>
Date: Sat, 30 Jul 2011 23:05:44 +0800
Subject: [PATCH] Revert "power: Prevent spinlock recursion when wake_unlock()
 is called"

This reverts commit 368bb8b6eed4c72d19f75669335d87f884fe2a94.
---
 kernel/power/wakelock.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/kernel/power/wakelock.c b/kernel/power/wakelock.c
index 62714d75c3c9..b24eb7594ef2 100644
--- a/kernel/power/wakelock.c
+++ b/kernel/power/wakelock.c
@@ -216,13 +216,13 @@ static void expire_wake_lock(struct wake_lock *lock)
 		pr_info("expired wake lock %s\n", lock->name);
 }
 
-/* Caller must acquire the list_lock spinlock */
 static void print_active_locks(int type)
 {
 	unsigned long irqflags;
 	struct wake_lock *lock;
 
 	BUG_ON(type >= WAKE_LOCK_TYPE_COUNT);
+	spin_lock_irqsave(&list_lock, irqflags);
 	list_for_each_entry(lock, &active_wake_locks[type], link) {
 		if (lock->flags & WAKE_LOCK_AUTO_EXPIRE) {
 			long timeout = lock->expires - jiffies;
@@ -234,6 +234,7 @@ static void print_active_locks(int type)
 		} else
 			pr_info("active wake lock %s\n", lock->name);
 	}
+	spin_unlock_irqrestore(&list_lock, irqflags);
 }
 
 static long has_wake_lock_locked(int type)
@@ -305,9 +306,9 @@ static void expire_wake_locks(unsigned long data)
 	unsigned long irqflags;
 	if (debug_mask & DEBUG_EXPIRE)
 		pr_info("expire_wake_locks: start\n");
-	spin_lock_irqsave(&list_lock, irqflags);
 	if (debug_mask & DEBUG_SUSPEND)
 		print_active_locks(WAKE_LOCK_SUSPEND);
+	spin_lock_irqsave(&list_lock, irqflags);
 	has_lock = has_wake_lock_locked(WAKE_LOCK_SUSPEND);
 	if (debug_mask & DEBUG_EXPIRE)
 		pr_info("expire_wake_locks: done, has_lock %ld\n", has_lock);
-- 
2.35.3

