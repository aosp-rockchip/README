From f71c468ab15ffe29b461f70a05c7f68d56051f2f Mon Sep 17 00:00:00 2001
From: Meng Dongyang <daniel.meng@rock-chips.com>
Date: Thu, 19 Apr 2018 18:32:09 +0800
Subject: [PATCH] usb: fix error of reference count of ep

The reference count of endpoints is same with the interface
number in the quirk case of USB_QUIRK_AUTO_SUSPEND. This will
result in a break of unregister interface cycle. As a result,
the device only unregister the first interface when disconnect.
This patch use "j" instead of "i" to solve this problem.

Fixes: f092c995c31e ("USB: core: flush pending URBs for unusual USB3 core when disable device")
Change-Id: I7aba63c0d38768cb956394a702bb61ae3f3250ba
Signed-off-by: Meng Dongyang <daniel.meng@rock-chips.com>
---
 drivers/usb/core/message.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index 4fcb3b7488ca..dfab6c1e1c18 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -1148,7 +1148,7 @@ void usb_disable_interface(struct usb_device *dev, struct usb_interface *intf,
  */
 void usb_disable_device(struct usb_device *dev, int skip_ep0)
 {
-	int i;
+	int i, j;
 	struct usb_hcd *hcd = bus_to_hcd(dev->bus);
 
 	/* getting rid of interfaces will disconnect
@@ -1186,11 +1186,11 @@ void usb_disable_device(struct usb_device *dev, int skip_ep0)
 			 */
 			if (hcd->self.root_hub->quirks &
 			    USB_QUIRK_AUTO_SUSPEND) {
-				for (i = skip_ep0; i < 16; ++i) {
+				for (j = skip_ep0; j < 16; ++j) {
 					usb_hcd_flush_endpoint(dev,
-							       dev->ep_out[i]);
+							       dev->ep_out[j]);
 					usb_hcd_flush_endpoint(dev,
-							       dev->ep_in[i]);
+							       dev->ep_in[j]);
 				}
 			}
 
-- 
2.35.3

