From f1453d1e8263761d23ef4db11d3767b48e64f235 Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Fri, 20 Mar 2020 17:26:13 +0800
Subject: [PATCH] media: rockchip: ispp: add resolution limit

Change-Id: Ia6f645d2c68ae4f814dcdf29f984f5bbc843dd79
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/ispp/common.h |  9 ++-
 drivers/media/platform/rockchip/ispp/stream.c | 78 ++++++++++++++++---
 drivers/media/platform/rockchip/ispp/stream.h |  1 +
 3 files changed, 74 insertions(+), 14 deletions(-)

diff --git a/drivers/media/platform/rockchip/ispp/common.h b/drivers/media/platform/rockchip/ispp/common.h
index c83928a69477..e78101fc1d5c 100644
--- a/drivers/media/platform/rockchip/ispp/common.h
+++ b/drivers/media/platform/rockchip/ispp/common.h
@@ -11,8 +11,13 @@
 #include <media/v4l2-device.h>
 #include <media/videobuf2-v4l2.h>
 
-#define RKISPP_PLANE_Y	0
-#define RKISPP_PLANE_UV 1
+#define RKISPP_PLANE_Y		0
+#define RKISPP_PLANE_UV		1
+
+#define RKISPP_MAX_WIDTH	4416
+#define RKISPP_MAX_HEIGHT	3312
+#define RKISPP_MIN_WIDTH	66
+#define RKISPP_MIN_HEIGHT	258
 
 struct rkispp_device;
 
diff --git a/drivers/media/platform/rockchip/ispp/stream.c b/drivers/media/platform/rockchip/ispp/stream.c
index 477a6e638f14..ca824a067fa2 100644
--- a/drivers/media/platform/rockchip/ispp/stream.c
+++ b/drivers/media/platform/rockchip/ispp/stream.c
@@ -919,6 +919,26 @@ static int is_stopped_mb(struct rkispp_stream *stream)
 	return !(val & en);
 }
 
+static int limit_check_mb(struct rkispp_stream *stream)
+{
+	struct rkispp_device *dev = stream->isppdev;
+	struct rkispp_subdev *sdev = &dev->ispp_sdev;
+
+	if (stream->out_fmt.width != sdev->out_fmt.width ||
+	    stream->out_fmt.height != sdev->out_fmt.height) {
+		v4l2_err(&dev->v4l2_dev,
+			 "output %dx%d should euqal to input %dx%d\n",
+			 stream->out_fmt.width, stream->out_fmt.height,
+			 sdev->out_fmt.width, sdev->out_fmt.height);
+		return -EINVAL;
+	}
+
+	if (stream->out_cap_fmt.wr_fmt & FMT_FBC)
+		dev->stream_vdev.is_update_manual = true;
+
+	return 0;
+}
+
 static int config_scl(struct rkispp_stream *stream)
 {
 	struct rkispp_device *dev = stream->isppdev;
@@ -968,6 +988,34 @@ static int is_stopped_scl(struct rkispp_stream *stream)
 	return !(readl(base + stream->config->reg.ctrl) & SW_SCL_ENABLE_SHD);
 }
 
+static int limit_check_scl(struct rkispp_stream *stream)
+{
+	struct rkispp_device *dev = stream->isppdev;
+	struct rkispp_subdev *sdev = &dev->ispp_sdev;
+	u32 max_width = 1280, max_ratio = 8, min_ratio = 2;
+	int ret = 0;
+
+	if (stream->id == STREAM_S0) {
+		max_width = 3264;
+		min_ratio = 1;
+	}
+
+	if (stream->out_fmt.width > max_width ||
+	    stream->out_fmt.width * max_ratio < sdev->out_fmt.width ||
+	    stream->out_fmt.height * max_ratio < sdev->out_fmt.height ||
+	    stream->out_fmt.width * min_ratio > sdev->out_fmt.width ||
+	    stream->out_fmt.height * min_ratio > sdev->out_fmt.height) {
+		ret = -EINVAL;
+		v4l2_err(&dev->v4l2_dev,
+			 "scale%d:%dx%d out of range [width max:%d ratio max:%d min:%d]\n",
+			 stream->id - STREAM_S0,
+			 stream->out_fmt.width, stream->out_fmt.height,
+			 max_width, max_ratio, min_ratio);
+	}
+
+	return ret;
+}
+
 static struct streams_ops input_stream_ops = {
 	.config = config_ii,
 	.start = start_ii,
@@ -977,12 +1025,14 @@ static struct streams_ops mb_stream_ops = {
 	.config = config_mb,
 	.stop = stop_mb,
 	.is_stopped = is_stopped_mb,
+	.limit_check = limit_check_mb,
 };
 
 static struct streams_ops scal_stream_ops = {
 	.config = config_scl,
 	.stop = stop_scl,
 	.is_stopped = is_stopped_scl,
+	.limit_check = limit_check_scl,
 };
 
 /***************************** vb2 operations*******************************/
@@ -1312,22 +1362,11 @@ static int rkispp_set_fmt(struct rkispp_stream *stream,
 		return -EINVAL;
 	}
 
-	if (stream->id == STREAM_MB &&
-	    (pixm->width != sdev->out_fmt.width &&
-	     pixm->height != sdev->out_fmt.height)) {
-		v4l2_err(&dev->v4l2_dev,
-			 "resolution should euqal to input\n");
-		return -EINVAL;
-	}
-
 	pixm->num_planes = fmt->mplanes;
 	pixm->field = V4L2_FIELD_NONE;
 	if (!pixm->quantization)
 		pixm->quantization = V4L2_QUANTIZATION_FULL_RANGE;
 
-	if (fmt->wr_fmt & FMT_FBC)
-		dev->stream_vdev.is_update_manual = true;
-
 	/* calculate size */
 	fcc_xysubs(fmt->fourcc, &xsubs, &ysubs);
 	planes = fmt->cplanes ? fmt->cplanes : fmt->mplanes;
@@ -1375,11 +1414,26 @@ static int rkispp_set_fmt(struct rkispp_stream *stream,
 			sdev->out_fmt.width = pixm->width;
 			sdev->out_fmt.height = pixm->height;
 		}
-		v4l2_dbg(1, rkispp_debug, &stream->isppdev->v4l2_dev,
+		v4l2_dbg(1, rkispp_debug, &dev->v4l2_dev,
 			 "%s: stream: %d req(%d, %d) out(%d, %d)\n", __func__,
 			 stream->id, pixm->width, pixm->height,
 			 stream->out_fmt.width, stream->out_fmt.height);
 	}
+
+	if (sdev->out_fmt.width > RKISPP_MAX_WIDTH ||
+	    sdev->out_fmt.height > RKISPP_MAX_HEIGHT ||
+	    sdev->out_fmt.width < RKISPP_MIN_WIDTH ||
+	    sdev->out_fmt.height < RKISPP_MIN_HEIGHT) {
+		v4l2_err(&dev->v4l2_dev,
+			 "ispp input max:%dx%d min:%dx%d\n",
+			 RKISPP_MIN_WIDTH, RKISPP_MIN_HEIGHT,
+			 RKISPP_MAX_WIDTH, RKISPP_MAX_HEIGHT);
+		return -EINVAL;
+	}
+
+	if (stream->ops->limit_check)
+		return stream->ops->limit_check(stream);
+
 	return 0;
 }
 
diff --git a/drivers/media/platform/rockchip/ispp/stream.h b/drivers/media/platform/rockchip/ispp/stream.h
index 67f7adc1e0db..b5ce3c6ec3dc 100644
--- a/drivers/media/platform/rockchip/ispp/stream.h
+++ b/drivers/media/platform/rockchip/ispp/stream.h
@@ -63,6 +63,7 @@ struct streams_ops {
 	void (*stop)(struct rkispp_stream *stream);
 	int (*start)(struct rkispp_stream *stream);
 	int (*is_stopped)(struct rkispp_stream *stream);
+	int (*limit_check)(struct rkispp_stream *stream);
 };
 
 /* stream input/out flag */
-- 
2.35.3

