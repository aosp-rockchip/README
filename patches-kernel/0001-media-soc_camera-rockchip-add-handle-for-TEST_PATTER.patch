From 7557057cac75102b907346e9e9cb547a6c2a0b73 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Thu, 22 Nov 2018 12:47:14 +0800
Subject: [PATCH] media: soc_camera: rockchip: add handle for TEST_PATTERN

add handle for V4L2_CID_TEST_PATTERN

Change-Id: Ibe79bca7d1fe261382ca330e26c0faec703b77a8
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
---
 .../soc_camera/rockchip/adv_camera_module.c   | 19 ++++++++++++++++
 .../rockchip/aptina_camera_module.c           | 19 ++++++++++++++++
 .../soc_camera/rockchip/imx_camera_module.c   | 19 ++++++++++++++++
 .../rockchip/ov8858_v4l2-i2c-subdev.c         | 22 +++++++++++++++++++
 .../soc_camera/rockchip/ov_camera_module.c    | 19 ++++++++++++++++
 .../soc_camera/rockchip/tc_camera_module.c    | 19 ++++++++++++++++
 6 files changed, 117 insertions(+)

diff --git a/drivers/media/i2c/soc_camera/rockchip/adv_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/adv_camera_module.c
index 96ba4f824e31..3cabc32338c1 100644
--- a/drivers/media/i2c/soc_camera/rockchip/adv_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/adv_camera_module.c
@@ -802,6 +802,7 @@ int adv_camera_module_s_ext_ctrls(
 	int i;
 	int ctrl_cnt = 0;
 	struct adv_camera_module *cam_mod =  to_adv_camera_module(sd);
+	struct adv_camera_module_ext_ctrls adv_ctrls;
 	int ret = 0;
 
 	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
@@ -924,6 +925,24 @@ int adv_camera_module_s_ext_ctrls(
 				cam_mod->vflip = false;
 			cam_mod->flip_flg = true;
 			break;
+		case V4L2_CID_TEST_PATTERN:
+			adv_ctrls.ctrls =
+				kmalloc_array(ctrls->count,
+					sizeof(*adv_ctrls.ctrls),
+					GFP_KERNEL);
+			if (adv_ctrls.ctrls) {
+				for (i = 0; i < ctrls->count; i++) {
+					adv_ctrls.ctrls[i].id =
+						ctrls->controls[i].id;
+					adv_ctrls.ctrls[i].value =
+						ctrls->controls[i].value;
+				}
+				adv_ctrls.count = ctrls->count;
+				ret = cam_mod->custom.s_ext_ctrls(cam_mod,
+								  &adv_ctrls);
+			}
+			kfree(adv_ctrls.ctrls);
+			break;
 		default:
 			pltfrm_camera_module_pr_warn(&cam_mod->sd,
 			"ignoring unknown ctrl 0x%x\n", ctrl->id);
diff --git a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
index 2aed92387b2d..7f9ed5219533 100644
--- a/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/aptina_camera_module.c
@@ -1030,6 +1030,7 @@ int aptina_camera_module_s_ext_ctrls(
 	int i;
 	int ctrl_cnt = 0;
 	struct aptina_camera_module *cam_mod =  to_aptina_camera_module(sd);
+	struct aptina_camera_module_ext_ctrls aptina_ctrls;
 	int ret = 0;
 
 	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
@@ -1148,6 +1149,24 @@ int aptina_camera_module_s_ext_ctrls(
 				cam_mod->vflip = false;
 			cam_mod->flip_flg = true;
 			break;
+		case V4L2_CID_TEST_PATTERN:
+			aptina_ctrls.ctrls =
+				kmalloc_array(ctrls->count,
+					sizeof(*aptina_ctrls.ctrls),
+					GFP_KERNEL);
+			if (aptina_ctrls.ctrls) {
+				for (i = 0; i < ctrls->count; i++) {
+					aptina_ctrls.ctrls[i].id =
+						ctrls->controls[i].id;
+					aptina_ctrls.ctrls[i].value =
+						ctrls->controls[i].value;
+				}
+				aptina_ctrls.count = ctrls->count;
+				ret = cam_mod->custom.s_ext_ctrls(cam_mod,
+								  &aptina_ctrls);
+			}
+			kfree(aptina_ctrls.ctrls);
+			break;
 		default:
 			pltfrm_camera_module_pr_warn(&cam_mod->sd,
 			"ignoring unknown ctrl 0x%x\n", ctrl->id);
diff --git a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
index 8cccfe425de3..5ff3d5f16eb4 100644
--- a/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/imx_camera_module.c
@@ -778,6 +778,7 @@ int imx_camera_module_s_ext_ctrls(
 	int i;
 	int ctrl_cnt = 0;
 	struct imx_camera_module *cam_mod =  to_imx_camera_module(sd);
+	struct imx_camera_module_ext_ctrls imx_ctrls;
 	int ret = 0;
 
 	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
@@ -900,6 +901,24 @@ int imx_camera_module_s_ext_ctrls(
 				cam_mod->vflip = false;
 			cam_mod->flip_flg = true;
 			break;
+		case V4L2_CID_TEST_PATTERN:
+			imx_ctrls.ctrls =
+				kmalloc_array(ctrls->count,
+					sizeof(*imx_ctrls.ctrls),
+					GFP_KERNEL);
+			if (imx_ctrls.ctrls) {
+				for (i = 0; i < ctrls->count; i++) {
+					imx_ctrls.ctrls[i].id =
+						ctrls->controls[i].id;
+					imx_ctrls.ctrls[i].value =
+						ctrls->controls[i].value;
+				}
+				imx_ctrls.count = ctrls->count;
+				ret = cam_mod->custom.s_ext_ctrls(cam_mod,
+								  &imx_ctrls);
+			}
+			kfree(imx_ctrls.ctrls);
+			break;
 		default:
 			pltfrm_camera_module_pr_warn(&cam_mod->sd,
 			"ignoring unknown ctrl 0x%x\n", ctrl->id);
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c b/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
index 51680bd7f55c..3c3a9a520e20 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov8858_v4l2-i2c-subdev.c
@@ -93,6 +93,10 @@ bool is_R1A_module;
 #define BG_RATIO_TYPICAL  0x129
 #define RG_RATIO_TYPICAL  0x11f
 
+#define OV8858_REG_TEST_PATTERN     0x5e00
+#define OV8858_TEST_PATTERN_ENABLE  0x80
+#define OV8858_TEST_PATTERN_DISABLE 0x0
+
 struct ov8858_otp_struct {
 	int otp_en;
 	int flag;
@@ -1589,6 +1593,20 @@ static int ov8858_s_ctrl(struct ov_camera_module *cam_mod, u32 ctrl_id)
 
 /*--------------------------------------------------------------------------*/
 
+static int ov8858_enable_test_pattern(struct ov_camera_module *cam_mod,
+				      u32 pattern)
+{
+	u32 val;
+
+	if (pattern)
+		val = (pattern - 1) | OV8858_TEST_PATTERN_ENABLE;
+	else
+		val = OV8858_TEST_PATTERN_DISABLE;
+
+	return ov_camera_module_write_reg(cam_mod,
+					  OV8858_REG_TEST_PATTERN, val);
+}
+
 static int ov8858_s_ext_ctrls(struct ov_camera_module *cam_mod,
 				 struct ov_camera_module_ext_ctrls *ctrls)
 {
@@ -1600,6 +1618,10 @@ static int ov8858_s_ext_ctrls(struct ov_camera_module *cam_mod,
 	else
 		ret = -EINVAL;
 
+	if (ctrls->ctrls[0].id == V4L2_CID_TEST_PATTERN)
+		ret = ov8858_enable_test_pattern(cam_mod,
+						 ctrls->ctrls[0].value);
+
 	if (IS_ERR_VALUE(ret))
 		ov_camera_module_pr_debug(cam_mod,
 			"failed with error (%d)\n", ret);
diff --git a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
index b29bf6c314bc..1fced7f4ec70 100644
--- a/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/ov_camera_module.c
@@ -800,6 +800,7 @@ int ov_camera_module_s_ext_ctrls(
 	int i;
 	int ctrl_cnt = 0;
 	struct ov_camera_module *cam_mod =  to_ov_camera_module(sd);
+	struct ov_camera_module_ext_ctrls ov_ctrls;
 	int ret = 0;
 
 	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
@@ -922,6 +923,24 @@ int ov_camera_module_s_ext_ctrls(
 				cam_mod->vflip = false;
 			cam_mod->flip_flg = true;
 			break;
+		case V4L2_CID_TEST_PATTERN:
+			ov_ctrls.ctrls =
+				kmalloc_array(ctrls->count,
+					sizeof(*ov_ctrls.ctrls),
+					GFP_KERNEL);
+			if (ov_ctrls.ctrls) {
+				for (i = 0; i < ctrls->count; i++) {
+					ov_ctrls.ctrls[i].id =
+						ctrls->controls[i].id;
+					ov_ctrls.ctrls[i].value =
+						ctrls->controls[i].value;
+				}
+				ov_ctrls.count = ctrls->count;
+				ret = cam_mod->custom.s_ext_ctrls(cam_mod,
+								  &ov_ctrls);
+			}
+			kfree(ov_ctrls.ctrls);
+			break;
 		default:
 			pltfrm_camera_module_pr_warn(&cam_mod->sd,
 			"ignoring unknown ctrl 0x%x\n", ctrl->id);
diff --git a/drivers/media/i2c/soc_camera/rockchip/tc_camera_module.c b/drivers/media/i2c/soc_camera/rockchip/tc_camera_module.c
index 2fc97149be55..c2b1a6d25d19 100644
--- a/drivers/media/i2c/soc_camera/rockchip/tc_camera_module.c
+++ b/drivers/media/i2c/soc_camera/rockchip/tc_camera_module.c
@@ -818,6 +818,7 @@ int tc_camera_module_s_ext_ctrls(
 	int i;
 	int ctrl_cnt = 0;
 	struct tc_camera_module *cam_mod =  to_tc_camera_module(sd);
+	struct tc_camera_module_ext_ctrls tc_ctrls;
 	int ret = 0;
 
 	pltfrm_camera_module_pr_debug(&cam_mod->sd, "\n");
@@ -949,6 +950,24 @@ int tc_camera_module_s_ext_ctrls(
 				cam_mod->vflip = false;
 			cam_mod->flip_flg = true;
 			break;
+		case V4L2_CID_TEST_PATTERN:
+			tc_ctrls.ctrls =
+				kmalloc_array(ctrls->count,
+					sizeof(*tc_ctrls.ctrls),
+					GFP_KERNEL);
+			if (tc_ctrls.ctrls) {
+				for (i = 0; i < ctrls->count; i++) {
+					tc_ctrls.ctrls[i].id =
+						ctrls->controls[i].id;
+					tc_ctrls.ctrls[i].value =
+						ctrls->controls[i].value;
+				}
+				tc_ctrls.count = ctrls->count;
+				ret = cam_mod->custom.s_ext_ctrls(cam_mod,
+								  &tc_ctrls);
+			}
+			kfree(tc_ctrls.ctrls);
+			break;
 		default:
 			pltfrm_camera_module_pr_warn(
 				&cam_mod->sd,
-- 
2.35.3

