From 9c60c6aa418d3b0bbd5e922c147e69e26f2b8fb3 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Thu, 12 Mar 2020 12:26:39 +0800
Subject: [PATCH] nvmem: rockchip-otp: Sync with upstream

Change-Id: I6d97becdeec650edddcd5ece6fe9d2e2b335e66b
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 arch/arm64/boot/dts/rockchip/px30.dtsi   |  2 +-
 arch/arm64/boot/dts/rockchip/rk3308.dtsi |  2 +-
 drivers/nvmem/rockchip-otp.c             | 74 ++++++++++--------------
 3 files changed, 33 insertions(+), 45 deletions(-)

diff --git a/arch/arm64/boot/dts/rockchip/px30.dtsi b/arch/arm64/boot/dts/rockchip/px30.dtsi
index 5de9e7fcdb32..ae56ebcbb10a 100644
--- a/arch/arm64/boot/dts/rockchip/px30.dtsi
+++ b/arch/arm64/boot/dts/rockchip/px30.dtsi
@@ -1058,7 +1058,7 @@
 		#size-cells = <1>;
 		clocks = <&cru SCLK_OTP_USR>, <&cru PCLK_OTP_NS>,
 			 <&cru PCLK_OTP_PHY>;
-		clock-names = "clk_otp", "pclk_otp", "pclk_otp_phy";
+		clock-names = "otp", "apb_pclk", "phy";
 		resets = <&cru SRST_OTP_PHY>;
 		reset-names = "otp_phy";
 
diff --git a/arch/arm64/boot/dts/rockchip/rk3308.dtsi b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
index c69c012e740d..8cdc6f0d237c 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
@@ -860,7 +860,7 @@
 		#size-cells = <1>;
 		clocks = <&cru SCLK_OTP_USR>, <&cru PCLK_OTP_NS>,
 			 <&cru PCLK_OTP_PHY>;
-		clock-names = "clk_otp", "pclk_otp", "pclk_otp_phy";
+		clock-names = "otp", "apb_pclk", "phy";
 		resets = <&cru SRST_OTP_PHY>;
 		reset-names = "otp_phy";
 
diff --git a/drivers/nvmem/rockchip-otp.c b/drivers/nvmem/rockchip-otp.c
index 92019d309642..9d63610f0f25 100644
--- a/drivers/nvmem/rockchip-otp.c
+++ b/drivers/nvmem/rockchip-otp.c
@@ -1,17 +1,9 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
  * Rockchip OTP Driver
  *
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
  * Author: Finley Xiao <finley.xiao@rock-chips.com>
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
- * more details.
  */
 
 #include <linux/clk.h>
@@ -70,6 +62,11 @@ struct rockchip_otp {
 	struct reset_control *rst;
 };
 
+/* list of required clocks */
+static const char * const rockchip_otp_clocks[] = {
+	"otp", "apb_pclk", "phy",
+};
+
 struct rockchip_data {
 	int size;
 };
@@ -142,23 +139,22 @@ static int rockchip_otp_read(void *context, unsigned int offset,
 	u8 *buf = val;
 	int ret = 0;
 
-
 	ret = clk_bulk_prepare_enable(otp->num_clks, otp->clks);
-	if (ret) {
-		dev_err(otp->dev, "failed to enable clock\n");
+	if (ret < 0) {
+		dev_err(otp->dev, "failed to prepare/enable clks\n");
 		return ret;
 	}
 
 	ret = rockchip_otp_reset(otp);
 	if (ret) {
 		dev_err(otp->dev, "failed to reset otp phy\n");
-		goto otp_clk;
+		goto disable_clks;
 	}
 
 	ret = rockchip_otp_ecc_enable(otp, false);
 	if (ret < 0) {
 		dev_err(otp->dev, "rockchip_otp_ecc_enable err\n");
-		goto otp_clk;
+		goto disable_clks;
 	}
 
 	writel(OTPC_USE_USER | OTPC_USE_USER_MASK, otp->base + OTPC_USER_CTRL);
@@ -178,7 +174,7 @@ static int rockchip_otp_read(void *context, unsigned int offset,
 
 read_end:
 	writel(0x0 | OTPC_USE_USER_MASK, otp->base + OTPC_USER_CTRL);
-otp_clk:
+disable_clks:
 	clk_bulk_disable_unprepare(otp->num_clks, otp->clks);
 
 	return ret;
@@ -206,7 +202,7 @@ static const struct of_device_id rockchip_otp_match[] = {
 		.compatible = "rockchip,rk3308-otp",
 		.data = (void *)&px30_data,
 	},
-	{ /* sentinel */},
+	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, rockchip_otp_match);
 
@@ -215,33 +211,37 @@ static int __init rockchip_otp_probe(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct rockchip_otp *otp;
 	const struct rockchip_data *data;
-	struct resource *res;
 	struct nvmem_device *nvmem;
-	const struct of_device_id *match;
+	int ret, i;
 
-	match = of_match_device(dev->driver->of_match_table, dev);
-	if (!match || !match->data) {
+	data = of_device_get_match_data(dev);
+	if (!data) {
 		dev_err(dev, "failed to get match data\n");
 		return -EINVAL;
 	}
-	data = match->data;
 
 	otp = devm_kzalloc(&pdev->dev, sizeof(struct rockchip_otp),
 			   GFP_KERNEL);
 	if (!otp)
 		return -ENOMEM;
-	otp->dev = dev;
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	otp->base = devm_ioremap_resource(&pdev->dev, res);
+	otp->dev = dev;
+	otp->base = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(otp->base))
 		return PTR_ERR(otp->base);
 
-	otp->num_clks = devm_clk_bulk_get_all(dev, &otp->clks);
-	if (otp->num_clks < 0) {
-		dev_err(dev, "failed to get otp clock\n");
-		return -ENODEV;
-	}
+	otp->num_clks = ARRAY_SIZE(rockchip_otp_clocks);
+	otp->clks = devm_kcalloc(dev, otp->num_clks,
+				     sizeof(*otp->clks), GFP_KERNEL);
+	if (!otp->clks)
+		return -ENOMEM;
+
+	for (i = 0; i < otp->num_clks; ++i)
+		otp->clks[i].id = rockchip_otp_clocks[i];
+
+	ret = devm_clk_bulk_get(dev, otp->num_clks, otp->clks);
+	if (ret)
+		return ret;
 
 	otp->rst = devm_reset_control_array_get_optional_exclusive(dev);
 	if (IS_ERR(otp->rst))
@@ -250,24 +250,12 @@ static int __init rockchip_otp_probe(struct platform_device *pdev)
 	otp_config.size = data->size;
 	otp_config.priv = otp;
 	otp_config.dev = dev;
-	nvmem = nvmem_register(&otp_config);
-	if (IS_ERR(nvmem))
-		return PTR_ERR(nvmem);
-
-	platform_set_drvdata(pdev, nvmem);
-
-	return 0;
-}
-
-static int rockchip_otp_remove(struct platform_device *pdev)
-{
-	struct nvmem_device *nvmem = platform_get_drvdata(pdev);
+	nvmem = devm_nvmem_register(dev, &otp_config);
 
-	return nvmem_unregister(nvmem);
+	return PTR_ERR_OR_ZERO(nvmem);
 }
 
 static struct platform_driver rockchip_otp_driver = {
-	.remove = rockchip_otp_remove,
 	.driver = {
 		.name = "rockchip-otp",
 		.of_match_table = rockchip_otp_match,
-- 
2.35.3

