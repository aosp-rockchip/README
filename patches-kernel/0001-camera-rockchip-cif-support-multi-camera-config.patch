From 6b1070e6469bded8be3751618adac91d93c9f75f Mon Sep 17 00:00:00 2001
From: Zhang Yunlong <dalon.zhang@rock-chips.com>
Date: Fri, 19 Jan 2018 20:32:09 +0800
Subject: [PATCH] camera: rockchip: cif: support multi camera config

fix gpio_desc request fail when multi cameras defined in dts.

Change-Id: I058ea1284ef86fcea621197367e426f018853936
Signed-off-by: Zhang Yunlong <dalon.zhang@rock-chips.com>
---
 drivers/media/video/generic_sensor.c |  66 +++++++++++++
 drivers/media/video/generic_sensor.h |  51 +---------
 drivers/soc/rockchip/rk_camera.c     | 143 +++++++++++++++++++--------
 drivers/soc/rockchip/rk_camera.h     |  14 +++
 4 files changed, 184 insertions(+), 90 deletions(-)

diff --git a/drivers/media/video/generic_sensor.c b/drivers/media/video/generic_sensor.c
index 767076256fe5..98875e394d6d 100644
--- a/drivers/media/video/generic_sensor.c
+++ b/drivers/media/video/generic_sensor.c
@@ -1508,3 +1508,69 @@ int generic_sensor_enum_framesizes(struct v4l2_subdev *sd, struct v4l2_frmsizeen
 
 }
 
+static inline int deinit_sensor_gpio(int pltfrm_gpio)
+{
+	struct rk29_camera_gpio *camera_gpio;
+
+	list_for_each_entry(camera_gpio, &camera_gpios.gpios, gpios)
+		if (camera_gpio->pltfrm_gpio == pltfrm_gpio)
+			break;
+
+	if (camera_gpio->pltfrm_gpio == pltfrm_gpio) {
+		camera_gpio->count--;
+
+		if (!camera_gpio->count) {
+			gpiod_direction_input(camera_gpio->gpio_desc);
+			gpiod_put(camera_gpio->gpio_desc);
+
+			list_del(&camera_gpio->gpios);
+			kfree(camera_gpio);
+		}
+	}
+
+	return 0;
+}
+
+void deinit_sensor_gpios(struct soc_camera_device *icd)
+{
+	struct soc_camera_desc *desc = to_soc_camera_desc(icd);
+	struct rk29camera_platform_data *pdata = desc->subdev_desc.drv_priv;
+	struct rkcamera_platform_data *sensor_device = NULL, *new_camera;
+	struct rk29camera_gpio_res *gpios = NULL;
+
+	new_camera = pdata->register_dev_new;
+	while (new_camera) {
+		if (strcmp(dev_name(icd->pdev), new_camera->dev_name) == 0) {
+			sensor_device = new_camera;
+			break;
+		}
+		new_camera = new_camera->next_camera;
+	}
+	if (!sensor_device) {
+		pr_err("%s(%d): Could not find %s\n",
+		       __func__, __LINE__, dev_name(icd->pdev));
+		return;
+	}
+
+	gpios = &new_camera->io;
+
+	deinit_sensor_gpio(gpios->power);
+	deinit_sensor_gpio(gpios->powerdown);
+	deinit_sensor_gpio(gpios->reset);
+	deinit_sensor_gpio(gpios->af);
+	deinit_sensor_gpio(gpios->flash);
+	deinit_sensor_gpio(gpios->irq);
+	gpios->gpio_power = NULL;
+	gpios->gpio_powerdown = NULL;
+	gpios->gpio_reset = NULL;
+	gpios->gpio_af = NULL;
+	gpios->gpio_flash = NULL;
+	gpios->gpio_irq = NULL;
+	gpios->power = INVALID_GPIO;
+	gpios->powerdown = INVALID_GPIO;
+	gpios->reset = INVALID_GPIO;
+	gpios->af = INVALID_GPIO;
+	gpios->flash = INVALID_GPIO;
+	gpios->irq = INVALID_GPIO;
+}
+
diff --git a/drivers/media/video/generic_sensor.h b/drivers/media/video/generic_sensor.h
index 6d68d43862b0..530435a6d6bb 100644
--- a/drivers/media/video/generic_sensor.h
+++ b/drivers/media/video/generic_sensor.h
@@ -92,6 +92,8 @@
 #define CFG_FunChk(a, b)		((a & b) == b)
 #define CFG_FunDis(a, b)		(a &= (~b))
 
+extern struct rk29_camera_gpio camera_gpios;
+
 enum rk_sensor_sequence_property {
 	SEQUENCE_INIT = 1,
 	SEQUENCE_PREVIEW,
@@ -332,6 +334,7 @@ extern int generic_sensor_s_stream(struct v4l2_subdev *sd, int enable);
 extern int generic_sensor_writebuf(struct i2c_client *client, char *buf, int buf_size);
 extern int generic_sensor_cropcap(struct v4l2_subdev *sd, struct v4l2_cropcap *cc);
 extern int generic_sensor_enum_framesizes(struct v4l2_subdev *sd, struct v4l2_frmsizeenum *fsize);
+void deinit_sensor_gpios(struct soc_camera_device *icd);
 
 static inline int sensor_get_full_width_height(int full_resolution, unsigned short *w, unsigned short *h)
 {
@@ -726,54 +729,6 @@ static inline int sensor_v4l2ctrl_flip_default_cb(struct soc_camera_device *icd,
 	return sensor_v4l2ctrl_flip_cb(icd, ctrl_info, ext_ctrl);
 }
 
-static inline void deinit_sensor_gpios(struct soc_camera_device *icd)
-{
-	struct soc_camera_desc *desc = to_soc_camera_desc(icd);
-	struct rk29camera_platform_data *pdata = desc->subdev_desc.drv_priv;
-	struct rkcamera_platform_data *sensor_device = NULL, *new_camera;
-	struct rk29camera_gpio_res *gpios = NULL;
-
-	new_camera = pdata->register_dev_new;
-	while (new_camera) {
-		if (strcmp(dev_name(icd->pdev), new_camera->dev_name) == 0) {
-			sensor_device = new_camera;
-			break;
-		}
-		new_camera = new_camera->next_camera;
-	}
-	if (!sensor_device) {
-		pr_err("%s(%d): Could not find %s\n",
-		       __func__, __LINE__, dev_name(icd->pdev));
-		return;
-	}
-
-	gpios = &new_camera->io;
-	if (gpios->gpio_reset) {
-		gpiod_direction_input(gpios->gpio_reset);
-		gpiod_put(gpios->gpio_reset);
-	}
-	if (gpios->gpio_power) {
-		gpiod_direction_input(gpios->gpio_power);
-		gpiod_put(gpios->gpio_power);
-	}
-	if (gpios->gpio_powerdown) {
-		gpiod_direction_input(gpios->gpio_powerdown);
-		gpiod_put(gpios->gpio_powerdown);
-	}
-	if (gpios->gpio_flash) {
-		gpiod_direction_input(gpios->gpio_flash);
-		gpiod_put(gpios->gpio_flash);
-	}
-	if (gpios->gpio_af) {
-		gpiod_direction_input(gpios->gpio_af);
-		gpiod_put(gpios->gpio_af);
-	}
-	if (gpios->gpio_irq) {
-		gpiod_direction_input(gpios->gpio_irq);
-		gpiod_put(gpios->gpio_irq);
-	}
-}
-
 #define new_user_v4l2ctrl(ctl_id, ctl_type, ctl_name, ctl_min, ctl_max, ctl_step, default_val, callback, seqe)\
 {\
 	.qctrl = {\
diff --git a/drivers/soc/rockchip/rk_camera.c b/drivers/soc/rockchip/rk_camera.c
index ee41482037d0..2f122aaacb57 100644
--- a/drivers/soc/rockchip/rk_camera.c
+++ b/drivers/soc/rockchip/rk_camera.c
@@ -99,6 +99,61 @@ static int rk_dts_sensor_remove(struct platform_device *pdev)
 	return 0;
 }
 
+struct rk29_camera_gpio camera_gpios;
+static struct gpio_desc *rk_dts_sensor_parse_gpio(
+	struct device *dev,
+	struct fwnode_handle *child,
+	int pltfrm_gpio,
+	const char *label)
+{
+	struct rk29_camera_gpio *camera_gpio;
+	struct rk29_camera_gpio *new_gpio;
+	struct gpio_desc *gpio;
+
+	if (IS_ERR_VALUE(pltfrm_gpio))
+		return NULL;
+
+	list_for_each_entry(camera_gpio, &camera_gpios.gpios, gpios) {
+		if (camera_gpio->pltfrm_gpio == pltfrm_gpio)
+			break;
+	}
+
+	if (camera_gpio->pltfrm_gpio != pltfrm_gpio) {
+		dprintk("%s(%d): alloc a new gpio for pltfrm gpio %d\n",
+			__func__, __LINE__, pltfrm_gpio);
+		new_gpio = kzalloc(sizeof(*new_gpio), GFP_KERNEL);
+		if (!new_gpio) {
+			eprintk("%s(%d): alloc camera_gpio failed\n",
+				__func__, __LINE__);
+			return NULL;
+		}
+
+		new_gpio->pltfrm_gpio = pltfrm_gpio;
+		new_gpio->count = 1;
+		new_gpio->gpio_desc =
+			devm_get_gpiod_from_child(dev, label, child);
+		if (IS_ERR(new_gpio->gpio_desc)) {
+			eprintk("gpio reset get failed.\n");
+			goto err_alloc;
+		}
+
+		list_add_tail(&new_gpio->gpios, &camera_gpios.gpios);
+		gpio = new_gpio->gpio_desc;
+	} else {
+		camera_gpio->count++;
+		gpio = camera_gpio->gpio_desc;
+		dprintk("%s(%d): gpio %d have get count %d\n",
+			__func__, __LINE__,
+			pltfrm_gpio, camera_gpio->count);
+	}
+
+	return gpio;
+err_alloc:
+	kfree(new_gpio);
+
+	return NULL;
+}
+
 static int rk_dts_sensor_probe(struct platform_device *pdev)
 {
 	struct device_node *np, *cp;
@@ -106,6 +161,13 @@ static int rk_dts_sensor_probe(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct rkcamera_platform_data *new_camera_list;
 	struct fwnode_handle *child;
+	enum of_gpio_flags flags;
+	int power = INVALID_GPIO;
+	int powerdown = INVALID_GPIO;
+	int reset = INVALID_GPIO;
+	int af = INVALID_GPIO;
+	int flash = INVALID_GPIO;
+	int irq = INVALID_GPIO;
 	int count;
 
 	np = dev->of_node;
@@ -116,6 +178,7 @@ static int rk_dts_sensor_probe(struct platform_device *pdev)
 	if (!count)
 		return -ENODEV;
 
+	INIT_LIST_HEAD(&camera_gpios.gpios);
 	device_for_each_child_node(dev, child) {
 		u32 flash_attach = 0, mir = 0, i2c_chl = 0, i2c_add = 0;
 		u32 cif_chl = 0, mclk_rate = 0, is_front = 0;
@@ -286,48 +349,44 @@ static int rk_dts_sensor_probe(struct platform_device *pdev)
 			sprintf(new_camera->dev_name, "%s_%s", name, "back");
 		new_camera->dev.device_info.dev.init_name = (const char *)&new_camera->dev_name[0];
 
-		new_camera->io.gpio_reset = devm_get_gpiod_from_child(dev,
-			"reset", child);
-		if (IS_ERR(new_camera->io.gpio_reset)) {
-			eprintk("gpio reset get failed.\n");
-			new_camera->io.gpio_reset = NULL;
-		}
-
-		new_camera->io.gpio_powerdown = devm_get_gpiod_from_child(dev,
-			"powerdown", child);
-		if (IS_ERR(new_camera->io.gpio_powerdown)) {
-			eprintk("gpio powerdown get failed.\n");
-			new_camera->io.gpio_powerdown = NULL;
-		}
-
-		new_camera->io.gpio_power = devm_get_gpiod_from_child(dev,
-			"power", child);
-		if (IS_ERR(new_camera->io.gpio_power)) {
-			eprintk("gpio power get failed.\n");
-			new_camera->io.gpio_power = NULL;
-		}
-
-		new_camera->io.gpio_af = devm_get_gpiod_from_child(dev,
-			"af", child);
-		if (IS_ERR(new_camera->io.gpio_af)) {
-			eprintk("gpio af get failed.\n");
-			new_camera->io.gpio_af = NULL;
-		}
-
-		new_camera->io.gpio_flash = devm_get_gpiod_from_child(dev,
-			"flash", child);
-		if (IS_ERR(new_camera->io.gpio_flash)) {
-			eprintk("gpio flash get failed.\n");
-			new_camera->io.gpio_flash = NULL;
-		}
-
-		new_camera->io.gpio_irq = devm_get_gpiod_from_child(dev,
-			"irq", child);
-		if (IS_ERR(new_camera->io.gpio_irq)) {
-			eprintk("gpio irq get failed.\n");
-			new_camera->io.gpio_irq = NULL;
-		}
-
+		power = of_get_named_gpio_flags(cp, "power-gpios",
+						0, &flags);
+		powerdown = of_get_named_gpio_flags(cp, "powerdown-gpios",
+						    0, &flags);
+		reset = of_get_named_gpio_flags(cp, "reset-gpios",
+						0, &flags);
+		af = of_get_named_gpio_flags(cp, "af-gpios",
+					     0, &flags);
+		flash = of_get_named_gpio_flags(cp, "flash-gpios",
+						0, &flags);
+		irq = of_get_named_gpio_flags(cp, "irq-gpios",
+					      0, &flags);
+
+		new_camera->io.gpio_reset =
+			rk_dts_sensor_parse_gpio(dev, child, reset, "reset");
+
+		new_camera->io.gpio_power =
+			rk_dts_sensor_parse_gpio(dev, child, power, "power");
+
+		new_camera->io.gpio_powerdown =
+			rk_dts_sensor_parse_gpio(dev, child,
+						 powerdown, "powerdown");
+
+		new_camera->io.gpio_af =
+			rk_dts_sensor_parse_gpio(dev, child, af, "af");
+
+		new_camera->io.gpio_flash =
+			rk_dts_sensor_parse_gpio(dev, child, flash, "flash");
+
+		new_camera->io.gpio_irq =
+			rk_dts_sensor_parse_gpio(dev, child, irq, "irq");
+
+		new_camera->io.reset = reset;
+		new_camera->io.power = power;
+		new_camera->io.powerdown = powerdown;
+		new_camera->io.af = af;
+		new_camera->io.flash = flash;
+		new_camera->io.irq = irq;
 		new_camera->io.gpio_flag = ((pwr_active & 0x01) << RK29_CAM_POWERACTIVE_BITPOS) |
 					    ((rst_active & 0x01) << RK29_CAM_RESETACTIVE_BITPOS) |
 					    ((pwdn_active & 0x01) << RK29_CAM_POWERDNACTIVE_BITPOS) |
diff --git a/drivers/soc/rockchip/rk_camera.h b/drivers/soc/rockchip/rk_camera.h
index 529385869ece..293342efe1e0 100644
--- a/drivers/soc/rockchip/rk_camera.h
+++ b/drivers/soc/rockchip/rk_camera.h
@@ -170,6 +170,14 @@ enum rk29camera_flash_cmd
     Flash_Torch
 };
 
+struct rk29_camera_gpio {
+	struct gpio_desc *gpio_desc;
+	unsigned int pltfrm_gpio;
+	int count;
+
+	struct list_head gpios;
+};
+
 struct rk29camera_gpio_res {
 	struct gpio_desc *gpio_reset;
 	struct gpio_desc *gpio_power;
@@ -177,6 +185,12 @@ struct rk29camera_gpio_res {
 	struct gpio_desc *gpio_flash;
 	struct gpio_desc *gpio_af;
 	struct gpio_desc *gpio_irq;
+	int reset;
+	int power;
+	int powerdown;
+	int flash;
+	int af;
+	int irq;
 	unsigned int gpio_flag;
 	unsigned int gpio_init;
 	const char *dev_name;
-- 
2.35.3

