From 5b213a010d8d1c410d65f444429999797d4c7bff Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Tue, 12 May 2020 18:16:48 +0800
Subject: [PATCH] media: rockchip: move start/stop event for params to ispp for
 isp20

Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
Change-Id: I74e6056d253596019aea72d614afda7c13f23746
---
 drivers/media/platform/rockchip/isp/rkisp.c   |  4 +-
 drivers/media/platform/rockchip/ispp/dev.c    |  2 +
 drivers/media/platform/rockchip/ispp/dev.h    |  3 ++
 drivers/media/platform/rockchip/ispp/params.c | 27 +++++++++--
 drivers/media/platform/rockchip/ispp/stats.c  |  4 +-
 drivers/media/platform/rockchip/ispp/stream.c | 46 +++++++++++++++++++
 6 files changed, 79 insertions(+), 7 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp/rkisp.c b/drivers/media/platform/rockchip/isp/rkisp.c
index cebb22fd145c..5e50d08b81a2 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.c
+++ b/drivers/media/platform/rockchip/isp/rkisp.c
@@ -743,7 +743,7 @@ static void rkisp_start_3a_run(struct rkisp_device *dev)
 	};
 	int ret;
 
-	if (!rkisp_is_need_3a(dev))
+	if (!rkisp_is_need_3a(dev) || dev->isp_ver == ISP_V20)
 		return;
 
 	v4l2_event_queue(vdev, &ev);
@@ -770,7 +770,7 @@ static void rkisp_stop_3a_run(struct rkisp_device *dev)
 	};
 	int ret;
 
-	if (!rkisp_is_need_3a(dev))
+	if (!rkisp_is_need_3a(dev) || dev->isp_ver == ISP_V20)
 		return;
 
 	v4l2_event_queue(vdev, &ev);
diff --git a/drivers/media/platform/rockchip/ispp/dev.c b/drivers/media/platform/rockchip/ispp/dev.c
index 5b046f77dc15..834c6b0d7de5 100644
--- a/drivers/media/platform/rockchip/ispp/dev.c
+++ b/drivers/media/platform/rockchip/ispp/dev.c
@@ -371,7 +371,9 @@ static int rkispp_plat_probe(struct platform_device *pdev)
 	ispp_dev->ispp_ver = match_data->ispp_ver;
 
 	mutex_init(&ispp_dev->apilock);
+	mutex_init(&ispp_dev->iqlock);
 	spin_lock_init(&ispp_dev->irq_lock);
+	init_waitqueue_head(&ispp_dev->sync_onoff);
 
 	strlcpy(ispp_dev->media_dev.model, "rkispp",
 		sizeof(ispp_dev->media_dev.model));
diff --git a/drivers/media/platform/rockchip/ispp/dev.h b/drivers/media/platform/rockchip/ispp/dev.h
index 07194ce96494..b8ccd430090e 100644
--- a/drivers/media/platform/rockchip/ispp/dev.h
+++ b/drivers/media/platform/rockchip/ispp/dev.h
@@ -49,9 +49,12 @@ struct rkispp_device {
 	enum rkispp_ver	ispp_ver;
 	/* mutex to serialize the calls from user */
 	struct mutex apilock;
+	/* mutex to serialize the calls of iq */
+	struct mutex iqlock;
 	/* lock for fec and ispp irq */
 	spinlock_t irq_lock;
 	enum rkispp_input inp;
 	u32 isp_mode;
+	wait_queue_head_t sync_onoff;
 };
 #endif
diff --git a/drivers/media/platform/rockchip/ispp/params.c b/drivers/media/platform/rockchip/ispp/params.c
index 2b41b0bad99f..485c040f194a 100644
--- a/drivers/media/platform/rockchip/ispp/params.c
+++ b/drivers/media/platform/rockchip/ispp/params.c
@@ -5,7 +5,9 @@
 #include <media/v4l2-ioctl.h>
 #include <media/videobuf2-core.h>
 #include <media/videobuf2-vmalloc.h>
+#include <media/v4l2-event.h>
 #include <media/v4l2-mc.h>
+#include <linux/rkisp1-config.h>
 #include "dev.h"
 #include "regs.h"
 
@@ -590,6 +592,21 @@ static int rkispp_params_querycap(struct file *file,
 	return 0;
 }
 
+static int rkispp_params_subs_evt(struct v4l2_fh *fh,
+				 const struct v4l2_event_subscription *sub)
+{
+	if (sub->id != 0)
+		return -EINVAL;
+
+	switch (sub->type) {
+	case CIFISP_V4L2_EVENT_STREAM_START:
+	case CIFISP_V4L2_EVENT_STREAM_STOP:
+		return v4l2_event_subscribe(fh, sub, 0, NULL);
+	default:
+		return -EINVAL;
+	}
+}
+
 static const struct v4l2_ioctl_ops rkispp_params_ioctl = {
 	.vidioc_reqbufs = vb2_ioctl_reqbufs,
 	.vidioc_querybuf = vb2_ioctl_querybuf,
@@ -604,7 +621,9 @@ static const struct v4l2_ioctl_ops rkispp_params_ioctl = {
 	.vidioc_g_fmt_meta_out = rkispp_params_g_fmt_meta_out,
 	.vidioc_s_fmt_meta_out = rkispp_params_g_fmt_meta_out,
 	.vidioc_try_fmt_meta_out = rkispp_params_g_fmt_meta_out,
-	.vidioc_querycap = rkispp_params_querycap
+	.vidioc_querycap = rkispp_params_querycap,
+	.vidioc_subscribe_event = rkispp_params_subs_evt,
+	.vidioc_unsubscribe_event = v4l2_event_unsubscribe
 };
 
 static int rkispp_params_vb2_queue_setup(struct vb2_queue *vq,
@@ -646,6 +665,7 @@ static void rkispp_params_vb2_buf_queue(struct vb2_buffer *vb)
 		if (new_params->module_init_ens)
 			stream_vdev->module_ens = new_params->module_init_ens;
 		spin_unlock_irqrestore(&params_vdev->config_lock, flags);
+		wake_up(&params_vdev->dev->sync_onoff);
 		return;
 	}
 	spin_unlock_irqrestore(&params_vdev->config_lock, flags);
@@ -667,6 +687,7 @@ static void rkispp_params_vb2_stop_streaming(struct vb2_queue *vq)
 	/* stop params input firstly */
 	spin_lock_irqsave(&params_vdev->config_lock, flags);
 	params_vdev->streamon = false;
+	wake_up(&params_vdev->dev->sync_onoff);
 	spin_unlock_irqrestore(&params_vdev->config_lock, flags);
 
 	for (i = 0; i < RKISP1_ISP_PARAMS_REQ_BUFS_MAX; i++) {
@@ -777,7 +798,7 @@ rkispp_params_init_vb2_queue(struct vb2_queue *q,
 	q->mem_ops = &vb2_vmalloc_memops;
 	q->buf_struct_size = sizeof(struct rkispp_buffer);
 	q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
-	q->lock = &params_vdev->dev->apilock;
+	q->lock = &params_vdev->dev->iqlock;
 	q->dev = params_vdev->dev->dev;
 
 	return vb2_queue_init(q);
@@ -958,7 +979,7 @@ int rkispp_register_params_vdev(struct rkispp_device *dev)
 	 * Provide a mutex to v4l2 core. It will be used
 	 * to protect all fops and v4l2 ioctls.
 	 */
-	vdev->lock = &dev->apilock;
+	vdev->lock = &dev->iqlock;
 	vdev->v4l2_dev = &dev->v4l2_dev;
 	vdev->queue = &node->buf_queue;
 	vdev->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_META_OUTPUT;
diff --git a/drivers/media/platform/rockchip/ispp/stats.c b/drivers/media/platform/rockchip/ispp/stats.c
index 20c9f4729b86..e3251c1cb6a9 100644
--- a/drivers/media/platform/rockchip/ispp/stats.c
+++ b/drivers/media/platform/rockchip/ispp/stats.c
@@ -308,7 +308,7 @@ static int rkispp_stats_init_vb2_queue(struct vb2_queue *q,
 	q->mem_ops = &vb2_dma_contig_memops;
 	q->buf_struct_size = sizeof(struct rkispp_buffer);
 	q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
-	q->lock = &stats_vdev->dev->apilock;
+	q->lock = &stats_vdev->dev->iqlock;
 	q->dev = stats_vdev->dev->dev;
 
 	return vb2_queue_init(q);
@@ -351,7 +351,7 @@ int rkispp_register_stats_vdev(struct rkispp_device *dev)
 	vdev->ioctl_ops = &rkispp_stats_ioctl;
 	vdev->fops = &rkispp_stats_fops;
 	vdev->release = video_device_release_empty;
-	vdev->lock = &dev->apilock;
+	vdev->lock = &dev->iqlock;
 	vdev->v4l2_dev = &dev->v4l2_dev;
 	vdev->queue = &node->buf_queue;
 	vdev->device_caps = V4L2_CAP_META_CAPTURE | V4L2_CAP_STREAMING;
diff --git a/drivers/media/platform/rockchip/ispp/stream.c b/drivers/media/platform/rockchip/ispp/stream.c
index 9eb20c1d58c6..52181281b9ff 100644
--- a/drivers/media/platform/rockchip/ispp/stream.c
+++ b/drivers/media/platform/rockchip/ispp/stream.c
@@ -9,6 +9,8 @@
 #include <media/v4l2-ioctl.h>
 #include <media/v4l2-subdev.h>
 #include <media/videobuf2-dma-contig.h>
+#include <linux/rkisp1-config.h>
+
 #include "dev.h"
 #include "regs.h"
 
@@ -866,10 +868,53 @@ static int config_fec(struct rkispp_device *dev)
 	return ret;
 }
 
+static void rkispp_start_3a_run(struct rkispp_device *dev)
+{
+	struct rkispp_params_vdev *params_vdev = &dev->params_vdev;
+	struct video_device *vdev = &params_vdev->vnode.vdev;
+	struct v4l2_event ev = {
+		.type = CIFISP_V4L2_EVENT_STREAM_START,
+	};
+	int ret;
+
+	v4l2_event_queue(vdev, &ev);
+	ret = wait_event_timeout(dev->sync_onoff,
+			params_vdev->streamon && !params_vdev->first_params,
+			msecs_to_jiffies(1000));
+	if (!ret)
+		v4l2_warn(&dev->v4l2_dev,
+			  "waiting on params stream on event timeout\n");
+	else
+		v4l2_dbg(1, rkispp_debug, &dev->v4l2_dev,
+			 "Waiting for 3A on use %d ms\n", 1000 - ret);
+}
+
+static void rkispp_stop_3a_run(struct rkispp_device *dev)
+{
+	struct rkispp_params_vdev *params_vdev = &dev->params_vdev;
+	struct video_device *vdev = &params_vdev->vnode.vdev;
+	struct v4l2_event ev = {
+		.type = CIFISP_V4L2_EVENT_STREAM_STOP,
+	};
+	int ret;
+
+	v4l2_event_queue(vdev, &ev);
+	ret = wait_event_timeout(dev->sync_onoff, !params_vdev->streamon,
+				 msecs_to_jiffies(1000));
+	if (!ret)
+		v4l2_warn(&dev->v4l2_dev,
+			  "waiting on params stream off event timeout\n");
+	else
+		v4l2_dbg(1, rkispp_debug, &dev->v4l2_dev,
+			 "Waiting for 3A off use %d ms\n", 1000 - ret);
+}
+
 static int config_modules(struct rkispp_device *dev)
 {
 	int ret;
 
+	rkispp_start_3a_run(dev);
+
 	v4l2_dbg(1, rkispp_debug, &dev->v4l2_dev,
 		 "stream module ens:0x%x\n", dev->stream_vdev.module_ens);
 
@@ -1289,6 +1334,7 @@ static void rkispp_stream_stop(struct rkispp_stream *stream)
 	stream->stopping = true;
 	if (dev->inp == INP_ISP &&
 	    atomic_read(&dev->stream_vdev.refcnt) == 1) {
+		rkispp_stop_3a_run(dev);
 		v4l2_subdev_call(&dev->ispp_sdev.sd,
 				 video, s_stream, false);
 		if (!(dev->isp_mode & ISP_ISPP_QUICK))
-- 
2.35.3

