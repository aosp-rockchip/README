From 9ce8852ccaba6ce9c4086ad1b0be6d44494aab6a Mon Sep 17 00:00:00 2001
From: Jian Qiu <qiujian@rock-chips.com>
Date: Mon, 30 Jul 2018 08:56:00 +0800
Subject: [PATCH] staging: android: sync: fix CVE-2016-6684

CVE-2016-6684

An information disclosure vulnerability in Sync could enable a local
malicious application to access data outside of its permission levels.
The format specifier %p can leak kernel addresses while not valuing
the kptr_restrict system settings.
The fix is designed to use %pK instead of %p, which also evaluates
whether kptr_restrict is set.

Change-Id: I6d52a4d6193770b3fa1479a1086a5d73a210de07
Signed-off-by: Jian Qiu <qiujian@rock-chips.com>
---
 drivers/staging/android/sync.c       | 4 ++--
 drivers/staging/android/sync_debug.c | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/staging/android/sync.c b/drivers/staging/android/sync.c
index da101a506cd2..9b8d17ce3a5e 100644
--- a/drivers/staging/android/sync.c
+++ b/drivers/staging/android/sync.c
@@ -390,7 +390,7 @@ int sync_fence_wait(struct sync_fence *fence, long timeout)
 		return ret;
 	} else if (ret == 0) {
 		if (timeout) {
-			pr_info("fence timeout on [%p] after %dms\n", fence,
+			pr_info("fence timeout on [%pK] after %dms\n", fence,
 				jiffies_to_msecs(timeout));
 			sync_dump();
 		}
@@ -399,7 +399,7 @@ int sync_fence_wait(struct sync_fence *fence, long timeout)
 
 	ret = atomic_read(&fence->status);
 	if (ret) {
-		pr_info("fence error %ld on [%p]\n", ret, fence);
+		pr_info("fence error %ld on [%pK]\n", ret, fence);
 		sync_dump();
 	}
 	return ret;
diff --git a/drivers/staging/android/sync_debug.c b/drivers/staging/android/sync_debug.c
index 91ed2c4cff45..efdb9f01d0df 100644
--- a/drivers/staging/android/sync_debug.c
+++ b/drivers/staging/android/sync_debug.c
@@ -149,7 +149,7 @@ static void sync_print_fence(struct seq_file *s, struct sync_fence *fence)
 	unsigned long flags;
 	int i;
 
-	seq_printf(s, "[%p] %s: %s\n", fence, fence->name,
+	seq_printf(s, "[%pK] %s: %s\n", fence, fence->name,
 		   sync_status_str(atomic_read(&fence->status)));
 
 	for (i = 0; i < fence->num_fences; ++i) {
@@ -169,7 +169,7 @@ static void sync_print_fence(struct seq_file *s, struct sync_fence *fence)
 
 		waiter = container_of(pos, struct sync_fence_waiter, work);
 
-		seq_printf(s, "waiter %pF\n", waiter->callback);
+		seq_printf(s, "waiter %pK\n", waiter->callback);
 	}
 	spin_unlock_irqrestore(&fence->wq.lock, flags);
 }
-- 
2.35.3

