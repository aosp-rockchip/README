From 2a1585104af58485902169b6c2060a10c11d8676 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Mon, 18 Jan 2021 10:59:25 +0800
Subject: [PATCH] media: i2c: vcm: support config max current

Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
Change-Id: I02503eadd93ab6c9c462630721353e85b830d9bd
---
 drivers/media/i2c/dw9714.c      | 29 ++++++++++++++++++++++++-----
 drivers/media/i2c/fp5510.c      | 29 ++++++++++++++++++++++++-----
 drivers/media/i2c/gt9760s.c     | 26 ++++++++++++++++++++++----
 drivers/media/i2c/rk_vcm_head.h |  1 +
 drivers/media/i2c/vm149c.c      | 29 ++++++++++++++++++++++++-----
 5 files changed, 95 insertions(+), 19 deletions(-)

diff --git a/drivers/media/i2c/dw9714.c b/drivers/media/i2c/dw9714.c
index 085f925bd1b4..cafbd1aa45b6 100644
--- a/drivers/media/i2c/dw9714.c
+++ b/drivers/media/i2c/dw9714.c
@@ -54,6 +54,7 @@ struct dw9714_device {
 	u32 module_index;
 	const char *module_facing;
 	struct rk_cam_vcm_cfg vcm_cfg;
+	int max_ma;
 };
 
 struct TimeTabel_s {
@@ -462,20 +463,26 @@ static void dw9714_update_vcm_cfg(struct dw9714_device *dev_vcm)
 	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
 	int cur_dist;
 
+	if (dev_vcm->max_ma == 0) {
+		dev_err(&client->dev, "max current is zero");
+		return;
+	}
+
 	cur_dist = dev_vcm->vcm_cfg.rated_ma - dev_vcm->vcm_cfg.start_ma;
-	cur_dist = cur_dist * DW9714_MAX_REG / DW9714_MAX_CURRENT;
+	cur_dist = cur_dist * DW9714_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->step = (cur_dist + (VCMDRV_MAX_LOG - 1)) / VCMDRV_MAX_LOG;
 	dev_vcm->start_current = dev_vcm->vcm_cfg.start_ma *
-				 DW9714_MAX_REG / DW9714_MAX_CURRENT;
+				 DW9714_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->rated_current = dev_vcm->start_current +
 				 VCMDRV_MAX_LOG * dev_vcm->step;
 	dev_vcm->step_mode = dev_vcm->vcm_cfg.step_mode;
 
 	dev_dbg(&client->dev,
-		"vcm_cfg: %d, %d, %d\n",
+		"vcm_cfg: %d, %d, %d, max_ma %d\n",
 		dev_vcm->vcm_cfg.start_ma,
 		dev_vcm->vcm_cfg.rated_ma,
-		dev_vcm->vcm_cfg.step_mode);
+		dev_vcm->vcm_cfg.step_mode,
+		dev_vcm->max_ma);
 }
 
 static long dw9714_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
@@ -609,13 +616,24 @@ static int dw9714_probe(struct i2c_client *client,
 {
 	struct device_node *np = of_node_get(client->dev.of_node);
 	struct dw9714_device *dw9714_dev;
-	unsigned int start_ma, rated_ma, step_mode;
+	unsigned int max_ma, start_ma, rated_ma, step_mode;
 	unsigned int dlc_en, mclk, t_src;
 	struct v4l2_subdev *sd;
 	char facing[2];
 	int ret;
 
 	dev_info(&client->dev, "probing...\n");
+	if (of_property_read_u32(np,
+		OF_CAMERA_VCMDRV_MAX_CURRENT,
+		(unsigned int *)&max_ma)) {
+		max_ma = DW9714_MAX_CURRENT;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_MAX_CURRENT);
+	}
+	if (max_ma == 0)
+		max_ma = DW9714_MAX_CURRENT;
+
 	if (of_property_read_u32(np,
 		OF_CAMERA_VCMDRV_START_CURRENT,
 		(unsigned int *)&start_ma)) {
@@ -708,6 +726,7 @@ static int dw9714_probe(struct i2c_client *client,
 	if (ret)
 		dev_err(&client->dev, "v4l2 async register subdev failed\n");
 
+	dw9714_dev->max_ma = max_ma;
 	dw9714_dev->vcm_cfg.start_ma = start_ma;
 	dw9714_dev->vcm_cfg.rated_ma = rated_ma;
 	dw9714_dev->vcm_cfg.step_mode = step_mode;
diff --git a/drivers/media/i2c/fp5510.c b/drivers/media/i2c/fp5510.c
index 760a94363318..c71cc40c6f27 100644
--- a/drivers/media/i2c/fp5510.c
+++ b/drivers/media/i2c/fp5510.c
@@ -55,6 +55,7 @@ struct fp5510_device {
 	u32 module_index;
 	const char *module_facing;
 	struct rk_cam_vcm_cfg vcm_cfg;
+	int max_ma;
 };
 
 struct TimeTabel_s {
@@ -488,20 +489,26 @@ static void fp5510_update_vcm_cfg(struct fp5510_device *dev_vcm)
 	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
 	int cur_dist;
 
+	if (dev_vcm->max_ma == 0) {
+		dev_err(&client->dev, "max current is zero");
+		return;
+	}
+
 	cur_dist = dev_vcm->vcm_cfg.rated_ma - dev_vcm->vcm_cfg.start_ma;
-	cur_dist = cur_dist * FP5510_MAX_REG / FP5510_MAX_CURRENT;
+	cur_dist = cur_dist * FP5510_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->step = (cur_dist + (VCMDRV_MAX_LOG - 1)) / VCMDRV_MAX_LOG;
 	dev_vcm->start_current = dev_vcm->vcm_cfg.start_ma *
-				 FP5510_MAX_REG / FP5510_MAX_CURRENT;
+				 FP5510_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->rated_current = dev_vcm->start_current +
 				 VCMDRV_MAX_LOG * dev_vcm->step;
 	dev_vcm->step_mode = dev_vcm->vcm_cfg.step_mode;
 
 	dev_dbg(&client->dev,
-		"vcm_cfg: %d, %d, %d\n",
+		"vcm_cfg: %d, %d, %d, max_ma %d\n",
 		dev_vcm->vcm_cfg.start_ma,
 		dev_vcm->vcm_cfg.rated_ma,
-		dev_vcm->vcm_cfg.step_mode);
+		dev_vcm->vcm_cfg.step_mode,
+		dev_vcm->max_ma);
 }
 
 static long fp5510_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
@@ -635,13 +642,24 @@ static int fp5510_probe(struct i2c_client *client,
 	struct device_node *np = of_node_get(client->dev.of_node);
 	struct fp5510_device *fp5510_dev;
 	struct device *dev = &client->dev;
-	unsigned int start_ma, rated_ma, step_mode;
+	unsigned int max_ma, start_ma, rated_ma, step_mode;
 	struct v4l2_subdev *sd;
 	char facing[2];
 	unsigned char data = 0x0;
 	int ret;
 
 	dev_info(&client->dev, "probing...\n");
+	if (of_property_read_u32(np,
+		OF_CAMERA_VCMDRV_MAX_CURRENT,
+		(unsigned int *)&max_ma)) {
+		max_ma = FP5510_MAX_CURRENT;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_MAX_CURRENT);
+	}
+	if (max_ma == 0)
+		max_ma = FP5510_MAX_CURRENT;
+
 	if (of_property_read_u32(np,
 		OF_CAMERA_VCMDRV_START_CURRENT,
 		(unsigned int *)&start_ma)) {
@@ -717,6 +735,7 @@ static int fp5510_probe(struct i2c_client *client,
 	if (ret)
 		dev_err(&client->dev, "v4l2 async register subdev failed\n");
 
+	fp5510_dev->max_ma = max_ma;
 	fp5510_dev->vcm_cfg.start_ma = start_ma;
 	fp5510_dev->vcm_cfg.rated_ma = rated_ma;
 	fp5510_dev->vcm_cfg.step_mode = step_mode;
diff --git a/drivers/media/i2c/gt9760s.c b/drivers/media/i2c/gt9760s.c
index 3d226c230acf..0dc19d134002 100644
--- a/drivers/media/i2c/gt9760s.c
+++ b/drivers/media/i2c/gt9760s.c
@@ -63,6 +63,7 @@ struct gt9760s_device {
 	const char *module_facing;
 
 	struct rk_cam_vcm_cfg vcm_cfg;
+	int max_ma;
 };
 
 struct TimeTabel_s {
@@ -503,20 +504,26 @@ static void gt9760s_update_vcm_cfg(struct gt9760s_device *dev_vcm)
 	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
 	int cur_dist;
 
+	if (dev_vcm->max_ma == 0) {
+		dev_err(&client->dev, "max current is zero");
+		return;
+	}
+
 	cur_dist = dev_vcm->vcm_cfg.rated_ma - dev_vcm->vcm_cfg.start_ma;
-	cur_dist = cur_dist * GT9760S_MAX_REG / GT9760S_MAX_CURRENT;
+	cur_dist = cur_dist * GT9760S_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->step = (cur_dist + (VCMDRV_MAX_LOG - 1)) / VCMDRV_MAX_LOG;
 	dev_vcm->start_current = dev_vcm->vcm_cfg.start_ma *
-				 GT9760S_MAX_REG / GT9760S_MAX_CURRENT;
+				 GT9760S_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->rated_current = dev_vcm->start_current +
 				 VCMDRV_MAX_LOG * dev_vcm->step;
 	dev_vcm->step_mode = dev_vcm->vcm_cfg.step_mode;
 
 	dev_dbg(&client->dev,
-		"vcm_cfg: %d, %d, %d\n",
+		"vcm_cfg: %d, %d, %d, max_ma %d\n",
 		dev_vcm->vcm_cfg.start_ma,
 		dev_vcm->vcm_cfg.rated_ma,
-		dev_vcm->vcm_cfg.step_mode);
+		dev_vcm->vcm_cfg.step_mode,
+		dev_vcm->max_ma);
 }
 
 static long gt9760s_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
@@ -636,6 +643,17 @@ static int gt9760s_read_dts(struct i2c_client *client, struct gt9760s_device *de
 	struct rk_cam_vcm_cfg *vcm_cfg = &dev_vcm->vcm_cfg;
 	int ret;
 
+	if (of_property_read_u32(np,
+		 OF_CAMERA_VCMDRV_MAX_CURRENT,
+		(unsigned int *)&dev_vcm->max_ma)) {
+		dev_vcm->max_ma = GT9760S_MAX_CURRENT;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_MAX_CURRENT);
+	}
+	if (dev_vcm->max_ma == 0)
+		dev_vcm->max_ma = GT9760S_MAX_CURRENT;
+
 	if (of_property_read_u32(np,
 		 OF_CAMERA_VCMDRV_START_CURRENT,
 		(unsigned int *)&vcm_cfg->start_ma)) {
diff --git a/drivers/media/i2c/rk_vcm_head.h b/drivers/media/i2c/rk_vcm_head.h
index 5465337545e1..b8398b392bda 100644
--- a/drivers/media/i2c/rk_vcm_head.h
+++ b/drivers/media/i2c/rk_vcm_head.h
@@ -12,6 +12,7 @@
  */
 #define VCMDRV_MAX_LOG			64U
 
+#define OF_CAMERA_VCMDRV_MAX_CURRENT	"rockchip,vcm-max-current"
 #define OF_CAMERA_VCMDRV_START_CURRENT	"rockchip,vcm-start-current"
 #define OF_CAMERA_VCMDRV_RATED_CURRENT	"rockchip,vcm-rated-current"
 #define OF_CAMERA_VCMDRV_STEP_MODE	"rockchip,vcm-step-mode"
diff --git a/drivers/media/i2c/vm149c.c b/drivers/media/i2c/vm149c.c
index ba333228e063..1a15e1483add 100644
--- a/drivers/media/i2c/vm149c.c
+++ b/drivers/media/i2c/vm149c.c
@@ -43,6 +43,7 @@ struct vm149c_device {
 	u32 module_index;
 	const char *module_facing;
 	struct rk_cam_vcm_cfg vcm_cfg;
+	int max_ma;
 };
 
 static inline struct vm149c_device *to_vm149c_vcm(struct v4l2_ctrl *ctrl)
@@ -302,20 +303,26 @@ static void vm149c_update_vcm_cfg(struct vm149c_device *dev_vcm)
 	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
 	int cur_dist;
 
+	if (dev_vcm->max_ma == 0) {
+		dev_err(&client->dev, "max current is zero");
+		return;
+	}
+
 	cur_dist = dev_vcm->vcm_cfg.rated_ma - dev_vcm->vcm_cfg.start_ma;
-	cur_dist = cur_dist * VM149C_MAX_REG / VM149C_MAX_CURRENT;
+	cur_dist = cur_dist * VM149C_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->step = (cur_dist + (VCMDRV_MAX_LOG - 1)) / VCMDRV_MAX_LOG;
 	dev_vcm->start_current = dev_vcm->vcm_cfg.start_ma *
-				 VM149C_MAX_REG / VM149C_MAX_CURRENT;
+				 VM149C_MAX_REG / dev_vcm->max_ma;
 	dev_vcm->rated_current = dev_vcm->start_current +
 				 VCMDRV_MAX_LOG * dev_vcm->step;
 	dev_vcm->step_mode = dev_vcm->vcm_cfg.step_mode;
 
 	dev_dbg(&client->dev,
-		"vcm_cfg: %d, %d, %d\n",
+		"vcm_cfg: %d, %d, %d, max_ma %d\n",
 		dev_vcm->vcm_cfg.start_ma,
 		dev_vcm->vcm_cfg.rated_ma,
-		dev_vcm->vcm_cfg.step_mode);
+		dev_vcm->vcm_cfg.step_mode,
+		dev_vcm->max_ma);
 }
 
 static long vm149c_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
@@ -439,7 +446,7 @@ static int vm149c_probe(struct i2c_client *client,
 {
 	struct device_node *np = of_node_get(client->dev.of_node);
 	struct vm149c_device *vm149c_dev;
-	unsigned int start_ma, rated_ma, step_mode;
+	unsigned int max_ma, start_ma, rated_ma, step_mode;
 	struct v4l2_subdev *sd;
 	char facing[2];
 	int ret;
@@ -450,6 +457,17 @@ static int vm149c_probe(struct i2c_client *client,
 		(DRIVER_VERSION & 0xff00) >> 8,
 		DRIVER_VERSION & 0x00ff);
 
+	if (of_property_read_u32(np,
+		 OF_CAMERA_VCMDRV_MAX_CURRENT,
+		(unsigned int *)&max_ma)) {
+		max_ma = VM149C_MAX_CURRENT;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_MAX_CURRENT);
+	}
+	if (max_ma == 0)
+		max_ma = VM149C_MAX_CURRENT;
+
 	if (of_property_read_u32(np,
 		 OF_CAMERA_VCMDRV_START_CURRENT,
 		(unsigned int *)&start_ma)) {
@@ -518,6 +536,7 @@ static int vm149c_probe(struct i2c_client *client,
 	if (ret)
 		dev_err(&client->dev, "v4l2 async register subdev failed\n");
 
+	vm149c_dev->max_ma = max_ma;
 	vm149c_dev->vcm_cfg.start_ma = start_ma;
 	vm149c_dev->vcm_cfg.rated_ma = rated_ma;
 	vm149c_dev->vcm_cfg.step_mode = step_mode;
-- 
2.35.3

