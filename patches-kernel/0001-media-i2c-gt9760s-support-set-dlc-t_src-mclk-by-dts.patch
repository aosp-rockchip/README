From 0611b7575a81a3705be9209450d1ceb7635a607a Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Fri, 11 Sep 2020 16:52:09 +0800
Subject: [PATCH] media: i2c: gt9760s: support set dlc/t_src/mclk by dts

Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
Change-Id: I2e71d559b9f6796c68ce170848589a1db85bad9d
---
 drivers/media/i2c/gt9760s.c     | 268 ++++++++++++++++++++++++++++----
 drivers/media/i2c/rk_vcm_head.h |   3 +
 2 files changed, 239 insertions(+), 32 deletions(-)

diff --git a/drivers/media/i2c/gt9760s.c b/drivers/media/i2c/gt9760s.c
index 863db60004fd..491eaed4347d 100644
--- a/drivers/media/i2c/gt9760s.c
+++ b/drivers/media/i2c/gt9760s.c
@@ -20,6 +20,9 @@
 #define GT9760S_DEFAULT_START_CURRENT	0
 #define GT9760S_DEFAULT_RATED_CURRENT	120
 #define GT9760S_DEFAULT_STEP_MODE	4
+#define GT9760S_DEFAULT_DLC_ENABLE	1
+#define GT9760S_DEFAULT_MCLK		0x1
+#define GT9760S_DEFAULT_T_SRC		0x1F
 
 #define GT9760S_SEL_ON_BYTE1		0xEC
 #define GT9760S_SEL_ON_BYTE2		0xA3
@@ -29,6 +32,7 @@
 #define GT9760S_T_SRC_BYTE2		0xF8
 #define GT9760S_SEL_OFF_BYTE1		0xDC
 #define GT9760S_SEL_OFF_BYTE2		0x51
+#define REG_NULL			0xFF
 
 /* Time to move the motor, this is fixed in the DLC specific setting */
 #define GT9760S_DLC_MOVE_MS		7
@@ -47,6 +51,9 @@ struct gt9760s_device {
 	unsigned int step;
 	unsigned int step_mode;
 	unsigned int vcm_movefull_t;
+	unsigned int dlc_enable;
+	unsigned int t_src;
+	unsigned int mclk;
 
 	struct timeval start_move_tv;
 	struct timeval end_move_tv;
@@ -58,6 +65,86 @@ struct gt9760s_device {
 	struct rk_cam_vcm_cfg vcm_cfg;
 };
 
+struct TimeTabel_s {
+	unsigned int t_src;/* time of slew rate control */
+	unsigned int step00;/* S[1:0] /MCLK[1:0] step period */
+	unsigned int step01;
+	unsigned int step10;
+	unsigned int step11;
+};
+
+static const struct TimeTabel_s gt9760s_lsc_time_table[] = {/* 1/10us */
+	{0b10000, 1360, 2720, 5440, 10880},
+	{0b10001, 1300, 2600, 5200, 10400},
+	{0b10010, 1250, 2500, 5000, 10000},
+	{0b10011, 1200, 2400, 4800,  9600},
+	{0b10100, 1160, 2320, 4640,  9280},
+	{0b10101, 1120, 2240, 4480,  8960},
+	{0b10110, 1080, 2160, 4320,  8640},
+	{0b10111, 1040, 2080, 4160,  8320},
+	{0b11000, 1010, 2020, 4040,  8080},
+	{0b11001,  980, 1960, 3920,  7840},
+	{0b11010,  950, 1900, 3800,  7600},
+	{0b11011,  920, 1840, 3680,  7360},
+	{0b11100,  890, 1780, 3560,  7120},
+	{0b11101,  870, 1740, 3480,  6960},
+	{0b11110,  850, 1700, 3400,  6800},
+	{0b11111,  830, 1660, 3320,  6640},
+	{0b00000,  810, 1620, 3240,  6480},
+	{0b00001,  790, 1580, 3160,  6320},
+	{0b00010,  775, 1550, 3100,  6200},
+	{0b00011,  760, 1520, 3040,  6080},
+	{0b00100,  745, 1490, 2980,  5960},
+	{0b00101,  730, 1460, 2920,  5840},
+	{0b00110,  715, 1430, 2860,  5720},
+	{0b00111,  700, 1400, 2800,  5600},
+	{0b01000,  690, 1380, 2760,  5520},
+	{0b01001,  680, 1360, 2720,  5440},
+	{0b01010,  670, 1340, 2680,  5360},
+	{0b01011,  660, 1320, 2640,  5280},
+	{0b01100,  655, 1310, 2620,  5240},
+	{0b01101,  650, 1300, 2600,  5200},
+	{0b01110,  645, 1290, 2580,  5160},
+	{0b01111,  640, 1280, 2560,  5120},
+	{REG_NULL,  0, 0, 0, 0},
+};
+
+static const struct TimeTabel_s gt9760s_dlc_time_table[] = {/* us */
+	{0b10000, 21250, 10630, 5310, 2660},
+	{0b10001, 20310, 10160, 5080, 2540},
+	{0b10010, 19530,  9770, 4880, 2440},
+	{0b10011, 18750,  9380, 4690, 2340},
+	{0b10100, 18130,  9060, 4530, 2270},
+	{0b10101, 17500,  8750, 4380, 2190},
+	{0b10110, 16880,  8440, 4220, 2110},
+	{0b10111, 16250,  8130, 4060, 2030},
+	{0b11000, 15780,  7890, 3950, 1970},
+	{0b11001, 15310,  7660, 3830, 1910},
+	{0b11010, 14840,  7420, 3710, 1860},
+	{0b11011, 14380,  7190, 3590, 1800},
+	{0b11100, 13910,  6950, 3480, 1740},
+	{0b11101, 13590,  6800, 3400, 1700},
+	{0b11110, 13280,  6640, 3320, 1660},
+	{0b11111, 12970,  6480, 3240, 1620},
+	{0b00000, 12660,  6330, 3160, 1580},
+	{0b00001, 12340,  6170, 3090, 1540},
+	{0b00010, 12110,  6050, 3030, 1510},
+	{0b00011, 11880,  5940, 2970, 1480},
+	{0b00100, 11640,  5820, 2910, 1460},
+	{0b00101, 11410,  5700, 2850, 1430},
+	{0b00110, 11170,  5590, 2790, 1400},
+	{0b00111, 10940,  5470, 2730, 1370},
+	{0b01000, 10780,  5390, 2700, 1350},
+	{0b01001, 10630,  5310, 2660, 1330},
+	{0b01010, 10470,  5230, 2620, 1310},
+	{0b01011, 10310,  5160, 2580, 1290},
+	{0b01100, 10230,  5120, 2560, 1280},
+	{0b01101, 10160,  5080, 2540, 1270},
+	{0b01110, 10080,  5040, 2520, 1260},
+	{0b01111, 10000,  5000, 2500, 1250},
+	{REG_NULL, 0, 0, 0, 0},
+};
+
 static inline struct gt9760s_device *to_vcm_dev(struct v4l2_ctrl *ctrl)
 {
 	return container_of(ctrl->handler, struct gt9760s_device, ctrls_vcm);
@@ -150,9 +237,84 @@ static int gt9760s_write_msg(struct i2c_client *client, u8 msb, u8 lsb)
 	return ret;
 }
 
+static unsigned int gt9760s_move_time(struct gt9760s_device *dev_vcm, unsigned int move_pos)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
+	unsigned int move_time_ms = 200;
+	unsigned int step_period_lsc = 0;
+	unsigned int step_period_dlc = 0;
+	unsigned int step_period = 0;
+	unsigned int codes_per_step = 1;
+	unsigned int step_case;
+	int table_cnt = 0;
+	int i = 0;
+
+	if (dev_vcm->dlc_enable) {
+		step_case = dev_vcm->mclk & 0x3;
+		table_cnt = ARRAY_SIZE(gt9760s_dlc_time_table);
+		for (i = 0; i < table_cnt; i++) {
+			if (gt9760s_dlc_time_table[i].t_src == dev_vcm->t_src)
+				break;
+		}
+	} else {
+		step_case = dev_vcm->step_mode & 0x3;
+		table_cnt = ARRAY_SIZE(gt9760s_lsc_time_table);
+		for (i = 0; i < table_cnt; i++) {
+			if (gt9760s_lsc_time_table[i].t_src == dev_vcm->t_src)
+				break;
+		}
+	}
+
+	if (i >= table_cnt)
+		i = 0;
+
+	switch (step_case) {
+	case 0:
+		step_period_lsc = gt9760s_lsc_time_table[i].step00;
+		step_period_dlc = gt9760s_dlc_time_table[i].step00;
+		break;
+	case 1:
+		step_period_lsc = gt9760s_lsc_time_table[i].step01;
+		step_period_dlc = gt9760s_dlc_time_table[i].step01;
+		break;
+	case 2:
+		step_period_lsc = gt9760s_lsc_time_table[i].step10;
+		step_period_dlc = gt9760s_dlc_time_table[i].step10;
+		break;
+	case 3:
+		step_period_lsc = gt9760s_lsc_time_table[i].step11;
+		step_period_dlc = gt9760s_dlc_time_table[i].step11;
+		break;
+	default:
+		dev_err(&client->dev,
+			"%s: step_case is error %d\n",
+			__func__, step_case);
+		break;
+	}
+	codes_per_step = (dev_vcm->step_mode & 0x0c) >> 2;
+	if (codes_per_step > 1)
+		codes_per_step = 1 << (codes_per_step - 1);
+
+	if (dev_vcm->dlc_enable) {
+		move_time_ms = (step_period_dlc + 999) / 1000;
+	} else {
+		step_period = step_period_lsc;
+
+		if (!codes_per_step)
+			move_time_ms = (step_period * move_pos + 9999) / 10000;
+		else
+			move_time_ms = (step_period * move_pos / codes_per_step + 9999) / 10000;
+	}
+
+	return move_time_ms;
+}
+
 static int gt9760s_init(struct i2c_client *client)
 {
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gt9760s_device *dev_vcm = sd_to_vcm_dev(sd);
 	int ret = 0;
+	u8 val;
 
 	usleep_range(7000, 7500);
 
@@ -161,13 +323,13 @@ static int gt9760s_init(struct i2c_client *client)
 	if (ret)
 		goto err;
 
-	ret = gt9760s_write_msg(client, GT9760S_DVO_DLC_BYTE1,
-				GT9760S_DVO_DLC_BYTE2);
+	val = dev_vcm->dlc_enable << 3 | dev_vcm->mclk | 0x04;
+	ret = gt9760s_write_msg(client, GT9760S_DVO_DLC_BYTE1, val);
 	if (ret)
 		goto err;
 
-	ret = gt9760s_write_msg(client, GT9760S_T_SRC_BYTE1,
-				GT9760S_T_SRC_BYTE2);
+	val = dev_vcm->t_src << 3;
+	ret = gt9760s_write_msg(client, GT9760S_T_SRC_BYTE1, val);
 	if (ret)
 		goto err;
 
@@ -262,6 +424,7 @@ static int gt9760s_set_ctrl(struct v4l2_ctrl *ctrl)
 	struct gt9760s_device *dev_vcm = to_vcm_dev(ctrl);
 	struct i2c_client *client = v4l2_get_subdevdata(&dev_vcm->sd);
 	unsigned int dest_pos = ctrl->val;
+	int move_pos;
 	long mv_us;
 	int ret = 0;
 
@@ -272,10 +435,19 @@ static int gt9760s_set_ctrl(struct v4l2_ctrl *ctrl)
 				__func__, dest_pos, VCMDRV_MAX_LOG);
 			return -EINVAL;
 		}
+		/* calculate move time */
+		move_pos = dev_vcm->current_related_pos - dest_pos;
+		if (move_pos < 0)
+			move_pos = -move_pos;
 
 		ret = gt9760s_set_pos(dev_vcm, dest_pos);
 
-		dev_vcm->move_ms = GT9760S_DLC_MOVE_MS;
+		if (dev_vcm->dlc_enable)
+			dev_vcm->move_ms = dev_vcm->vcm_movefull_t;
+		else
+			dev_vcm->move_ms =
+				((dev_vcm->vcm_movefull_t * (uint32_t)move_pos) / VCMDRV_MAX_LOG);
+
 		dev_dbg(&client->dev, "dest_pos %d, move_ms %ld\n",
 			dest_pos, dev_vcm->move_ms);
 
@@ -458,51 +630,60 @@ static int gt9760s_init_controls(struct gt9760s_device *dev_vcm)
 	return hdl->error;
 }
 
-static int gt9760s_probe(struct i2c_client *client,
-			const struct i2c_device_id *id)
+static int gt9760s_read_dts(struct i2c_client *client, struct gt9760s_device *dev_vcm)
 {
 	struct device_node *np = of_node_get(client->dev.of_node);
-	struct gt9760s_device *dev_vcm;
-	unsigned int start_ma, rated_ma, step_mode;
-	struct v4l2_subdev *sd;
-	char facing[2];
+	struct rk_cam_vcm_cfg *vcm_cfg = &dev_vcm->vcm_cfg;
 	int ret;
 
-	dev_info(&client->dev, "probing...\n");
-	dev_info(&client->dev, "driver version: %02x.%02x.%02x",
-		DRIVER_VERSION >> 16,
-		(DRIVER_VERSION & 0xff00) >> 8,
-		DRIVER_VERSION & 0x00ff);
-
 	if (of_property_read_u32(np,
 		 OF_CAMERA_VCMDRV_START_CURRENT,
-		(unsigned int *)&start_ma)) {
-		start_ma = GT9760S_DEFAULT_START_CURRENT;
+		(unsigned int *)&vcm_cfg->start_ma)) {
+		vcm_cfg->start_ma = GT9760S_DEFAULT_START_CURRENT;
 		dev_info(&client->dev,
 			"could not get module %s from dts!\n",
 			OF_CAMERA_VCMDRV_START_CURRENT);
 	}
 	if (of_property_read_u32(np,
 		 OF_CAMERA_VCMDRV_RATED_CURRENT,
-		(unsigned int *)&rated_ma)) {
-		rated_ma = GT9760S_DEFAULT_RATED_CURRENT;
+		(unsigned int *)&vcm_cfg->rated_ma)) {
+		vcm_cfg->rated_ma = GT9760S_DEFAULT_RATED_CURRENT;
 		dev_info(&client->dev,
 			"could not get module %s from dts!\n",
 			OF_CAMERA_VCMDRV_RATED_CURRENT);
 	}
 	if (of_property_read_u32(np,
 		 OF_CAMERA_VCMDRV_STEP_MODE,
-		(unsigned int *)&step_mode)) {
-		step_mode = GT9760S_DEFAULT_STEP_MODE;
+		(unsigned int *)&vcm_cfg->step_mode)) {
+		vcm_cfg->step_mode = GT9760S_DEFAULT_STEP_MODE;
 		dev_info(&client->dev,
 			"could not get module %s from dts!\n",
 			OF_CAMERA_VCMDRV_STEP_MODE);
 	}
-
-	dev_vcm = devm_kzalloc(&client->dev, sizeof(*dev_vcm),
-				  GFP_KERNEL);
-	if (!dev_vcm)
-		return -ENOMEM;
+	if (of_property_read_u32(np,
+		 OF_CAMERA_VCMDRV_DLC_ENABLE,
+		(unsigned int *)&dev_vcm->dlc_enable)) {
+		dev_vcm->dlc_enable = GT9760S_DEFAULT_DLC_ENABLE;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_DLC_ENABLE);
+	}
+	if (of_property_read_u32(np,
+		 OF_CAMERA_VCMDRV_MCLK,
+		(unsigned int *)&dev_vcm->mclk)) {
+		dev_vcm->mclk = GT9760S_DEFAULT_MCLK;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_MCLK);
+	}
+	if (of_property_read_u32(np,
+		 OF_CAMERA_VCMDRV_T_SRC,
+		(unsigned int *)&dev_vcm->t_src)) {
+		dev_vcm->t_src = GT9760S_DEFAULT_T_SRC;
+		dev_info(&client->dev,
+			"could not get module %s from dts!\n",
+			OF_CAMERA_VCMDRV_T_SRC);
+	}
 
 	ret = of_property_read_u32(np, RKMODULE_CAMERA_MODULE_INDEX,
 				   &dev_vcm->module_index);
@@ -514,6 +695,32 @@ static int gt9760s_probe(struct i2c_client *client,
 		return -EINVAL;
 	}
 
+	return ret;
+}
+
+static int gt9760s_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct gt9760s_device *dev_vcm;
+	struct v4l2_subdev *sd;
+	char facing[2];
+	int ret;
+
+	dev_info(&client->dev, "probing...\n");
+	dev_info(&client->dev, "driver version: %02x.%02x.%02x",
+		DRIVER_VERSION >> 16,
+		(DRIVER_VERSION & 0xff00) >> 8,
+		DRIVER_VERSION & 0x00ff);
+
+	dev_vcm = devm_kzalloc(&client->dev, sizeof(*dev_vcm),
+				  GFP_KERNEL);
+	if (!dev_vcm)
+		return -ENOMEM;
+
+	ret = gt9760s_read_dts(client, dev_vcm);
+	if (ret)
+		return ret;
+
 	v4l2_i2c_subdev_init(&dev_vcm->sd, client, &gt9760s_ops);
 	dev_vcm->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	dev_vcm->sd.internal_ops = &gt9760s_int_ops;
@@ -542,16 +749,13 @@ static int gt9760s_probe(struct i2c_client *client,
 	if (ret)
 		dev_err(&client->dev, "v4l2 async register subdev failed\n");
 
-	dev_vcm->vcm_cfg.start_ma = start_ma;
-	dev_vcm->vcm_cfg.rated_ma = rated_ma;
-	dev_vcm->vcm_cfg.step_mode = step_mode;
 	gt9760s_update_vcm_cfg(dev_vcm);
 
 	dev_vcm->move_ms       = 0;
 	dev_vcm->current_related_pos = VCMDRV_MAX_LOG;
 	dev_vcm->start_move_tv = ns_to_timeval(ktime_get_ns());
 	dev_vcm->end_move_tv = ns_to_timeval(ktime_get_ns());
-	dev_vcm->vcm_movefull_t = GT9760S_DLC_MOVE_MS;
+	dev_vcm->vcm_movefull_t = gt9760s_move_time(dev_vcm, GT9760S_MAX_REG);
 
 	pm_runtime_set_active(&client->dev);
 	pm_runtime_enable(&client->dev);
diff --git a/drivers/media/i2c/rk_vcm_head.h b/drivers/media/i2c/rk_vcm_head.h
index ab13808a50ac..99eb7aa811bc 100644
--- a/drivers/media/i2c/rk_vcm_head.h
+++ b/drivers/media/i2c/rk_vcm_head.h
@@ -14,6 +14,9 @@
 #define OF_CAMERA_VCMDRV_START_CURRENT	"rockchip,vcm-start-current"
 #define OF_CAMERA_VCMDRV_RATED_CURRENT	"rockchip,vcm-rated-current"
 #define OF_CAMERA_VCMDRV_STEP_MODE	"rockchip,vcm-step-mode"
+#define OF_CAMERA_VCMDRV_DLC_ENABLE	"rockchip,vcm-dlc-enable"
+#define OF_CAMERA_VCMDRV_MCLK		"rockchip,vcm-mclk"
+#define OF_CAMERA_VCMDRV_T_SRC		"rockchip,vcm-t-src"
 
 #define RK_VIDIOC_VCM_TIMEINFO \
 	_IOR('V', BASE_VIDIOC_PRIVATE + 0, struct rk_cam_vcm_tim)
-- 
2.35.3

