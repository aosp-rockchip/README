From 7c959b40c92fe48f241fc228ba9d4d5fe4313d91 Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Sat, 11 Jul 2020 16:11:46 +0800
Subject: [PATCH] drm/bridge: analogix_dp: Fix the logic of prepare/unprepare
 the panel

This patch avoids frequent prepare/unprepare the panel, and keep
the current state until the panel is disabled.

Change-Id: I0148ab85779df6ef447796d2f07eb46315813d56
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 .../drm/bridge/analogix/analogix_dp_core.c    | 120 +++++++-----------
 .../drm/bridge/analogix/analogix_dp_core.h    |   2 +-
 2 files changed, 49 insertions(+), 73 deletions(-)

diff --git a/drivers/gpu/drm/bridge/analogix/analogix_dp_core.c b/drivers/gpu/drm/bridge/analogix/analogix_dp_core.c
index 9057843586b4..c466a9c9b9af 100644
--- a/drivers/gpu/drm/bridge/analogix/analogix_dp_core.c
+++ b/drivers/gpu/drm/bridge/analogix/analogix_dp_core.c
@@ -67,6 +67,29 @@ static int analogix_dp_init_dp(struct analogix_dp_device *dp)
 	return 0;
 }
 
+static int analogix_dp_prepare_panel(struct analogix_dp_device *dp,
+				     bool prepare)
+{
+	int ret = 0;
+
+	mutex_lock(&dp->panel_lock);
+
+	if (prepare == dp->panel_is_prepared)
+		goto out;
+
+	if (prepare)
+		ret = drm_panel_prepare(dp->plat_data->panel);
+	else
+		ret = drm_panel_unprepare(dp->plat_data->panel);
+	if (ret)
+		goto out;
+
+	dp->panel_is_prepared = prepare;
+out:
+	mutex_unlock(&dp->panel_lock);
+	return ret;
+}
+
 static int analogix_dp_detect_hpd(struct analogix_dp_device *dp)
 {
 	int timeout_loop = 0;
@@ -1061,52 +1084,6 @@ static int analogix_dp_commit(struct analogix_dp_device *dp)
 	return ret;
 }
 
-/*
- * This function is a bit of a catch-all for panel preparation, hopefully
- * simplifying the logic of functions that need to prepare/unprepare the panel
- * below.
- *
- * If @prepare is true, this function will prepare the panel. Conversely, if it
- * is false, the panel will be unprepared.
- *
- * If @is_modeset_prepare is true, the function will disregard the current state
- * of the panel and either prepare/unprepare the panel based on @prepare. Once
- * it finishes, it will update dp->panel_is_modeset to reflect the current state
- * of the panel.
- */
-static int analogix_dp_prepare_panel(struct analogix_dp_device *dp,
-				     bool prepare, bool is_modeset_prepare)
-{
-	int ret = 0;
-
-	if (!dp->plat_data->panel)
-		return 0;
-
-	mutex_lock(&dp->panel_lock);
-
-	/*
-	 * Exit early if this is a temporary prepare/unprepare and we're already
-	 * modeset (since we neither want to prepare twice or unprepare early).
-	 */
-	if (dp->panel_is_modeset && !is_modeset_prepare)
-		goto out;
-
-	if (prepare)
-		ret = drm_panel_prepare(dp->plat_data->panel);
-	else
-		ret = drm_panel_unprepare(dp->plat_data->panel);
-
-	if (ret)
-		goto out;
-
-	if (is_modeset_prepare)
-		dp->panel_is_modeset = prepare;
-
-out:
-	mutex_unlock(&dp->panel_lock);
-	return ret;
-}
-
 static int analogix_dp_get_modes(struct drm_connector *connector)
 {
 	struct analogix_dp_device *dp = to_dp(connector);
@@ -1117,10 +1094,12 @@ static int analogix_dp_get_modes(struct drm_connector *connector)
 		num_modes += drm_panel_get_modes(dp->plat_data->panel);
 
 	if (!num_modes) {
-		ret = analogix_dp_prepare_panel(dp, true, false);
-		if (ret) {
-			DRM_ERROR("Failed to prepare panel (%d)\n", ret);
-			return 0;
+		if (dp->plat_data->panel) {
+			ret = analogix_dp_prepare_panel(dp, true);
+			if (ret) {
+				DRM_ERROR("Failed to prepare panel (%d)\n", ret);
+				return 0;
+			}
 		}
 
 		pm_runtime_get_sync(dp->dev);
@@ -1132,10 +1111,6 @@ static int analogix_dp_get_modes(struct drm_connector *connector)
 			num_modes += drm_add_edid_modes(&dp->connector, edid);
 			kfree(edid);
 		}
-
-		ret = analogix_dp_prepare_panel(dp, false, false);
-		if (ret)
-			DRM_ERROR("Failed to unprepare panel (%d)\n", ret);
 	}
 
 	if (dp->plat_data->get_modes)
@@ -1196,21 +1171,18 @@ analogix_dp_detect(struct drm_connector *connector, bool force)
 	enum drm_connector_status status = connector_status_disconnected;
 	int ret;
 
-	if (dp->plat_data->panel)
-		return connector_status_connected;
-
-	ret = analogix_dp_prepare_panel(dp, true, false);
-	if (ret) {
-		DRM_ERROR("Failed to prepare panel (%d)\n", ret);
-		return connector_status_disconnected;
+	if (dp->plat_data->panel) {
+		ret = analogix_dp_prepare_panel(dp, true);
+		if (ret) {
+			DRM_ERROR("Failed to prepare panel (%d)\n", ret);
+			return ret;
+		}
 	}
 
+	pm_runtime_get_sync(dp->dev);
 	if (!analogix_dp_detect_hpd(dp))
 		status = connector_status_connected;
-
-	ret = analogix_dp_prepare_panel(dp, false, false);
-	if (ret)
-		DRM_ERROR("Failed to unprepare panel (%d)\n", ret);
+	pm_runtime_put(dp->dev);
 
 	return status;
 }
@@ -1283,9 +1255,11 @@ static void analogix_dp_bridge_pre_enable(struct drm_bridge *bridge)
 	struct analogix_dp_device *dp = bridge->driver_private;
 	int ret;
 
-	ret = analogix_dp_prepare_panel(dp, true, true);
-	if (ret)
-		DRM_ERROR("failed to setup the panel ret = %d\n", ret);
+	if (dp->plat_data->panel) {
+		ret = analogix_dp_prepare_panel(dp, true);
+		if (ret)
+			DRM_ERROR("failed to setup the panel ret = %d\n", ret);
+	}
 }
 
 static int analogix_dp_set_bridge(struct analogix_dp_device *dp)
@@ -1391,9 +1365,11 @@ static void analogix_dp_bridge_disable(struct drm_bridge *bridge)
 
 	pm_runtime_put_sync(dp->dev);
 
-	ret = analogix_dp_prepare_panel(dp, false, true);
-	if (ret)
-		DRM_ERROR("failed to setup the panel ret = %d\n", ret);
+	if (dp->plat_data->panel) {
+		ret = analogix_dp_prepare_panel(dp, false);
+		if (ret)
+			DRM_ERROR("failed to setup the panel ret = %d\n", ret);
+	}
 
 	dp->psr_enable = false;
 	dp->fast_train_enable = false;
@@ -1582,7 +1558,7 @@ analogix_dp_bind(struct device *dev, struct drm_device *drm_dev,
 	dp->dpms_mode = DRM_MODE_DPMS_OFF;
 
 	mutex_init(&dp->panel_lock);
-	dp->panel_is_modeset = false;
+	dp->panel_is_prepared = false;
 
 	/*
 	 * platform dp driver need containor_of the plat_data to get
diff --git a/drivers/gpu/drm/bridge/analogix/analogix_dp_core.h b/drivers/gpu/drm/bridge/analogix/analogix_dp_core.h
index d56a791c43b1..8c47a99ffc2b 100644
--- a/drivers/gpu/drm/bridge/analogix/analogix_dp_core.h
+++ b/drivers/gpu/drm/bridge/analogix/analogix_dp_core.h
@@ -180,7 +180,7 @@ struct analogix_dp_device {
 	bool			fast_train_enable;
 
 	struct mutex		panel_lock;
-	bool			panel_is_modeset;
+	bool			panel_is_prepared;
 
 	struct analogix_dp_plat_data *plat_data;
 };
-- 
2.35.3

