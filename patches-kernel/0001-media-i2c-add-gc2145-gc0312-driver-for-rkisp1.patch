From 2629173c88c7b10bb4eea12cbd079960d5efdc30 Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Wed, 15 Aug 2018 14:14:13 +0800
Subject: [PATCH] media: i2c: add gc2145/gc0312 driver for rkisp1

Change-Id: I3d4bae2e45a6fd40cf7bf6b53900abcbfacba2d7
Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
---
 drivers/media/i2c/Kconfig  |   18 +
 drivers/media/i2c/Makefile |    2 +
 drivers/media/i2c/gc0312.c | 1113 +++++++++++++++++++++++++
 drivers/media/i2c/gc2145.c | 1583 ++++++++++++++++++++++++++++++++++++
 4 files changed, 2716 insertions(+)
 create mode 100644 drivers/media/i2c/gc0312.c
 create mode 100644 drivers/media/i2c/gc2145.c

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 08d350bc7398..7303b6e74b10 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -722,6 +722,24 @@ config VIDEO_GC2155
 	  To compile this driver as a module, choose M here: the
 	  module will be called gc2155.
 
+config VIDEO_GC0312
+	tristate "GalaxyCore GC0312 sensor support"
+	depends on VIDEO_V4L2 && I2C && VIDEO_V4L2_SUBDEV_API
+	help
+	  Support for the GalaxyCore GC0312 sensor.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gc0312.
+
+config VIDEO_GC2145
+	tristate "GalaxyCore GC2145 sensor support"
+	depends on VIDEO_V4L2 && I2C && VIDEO_V4L2_SUBDEV_API
+	help
+	  Support for the GalaxyCore GC2145 sensor.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gc2145.
+
 comment "Flash devices"
 
 config VIDEO_ADP1653
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 2fba2f69de33..f04d9168ac1c 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -88,3 +88,5 @@ obj-$(CONFIG_VIDEO_TC35874X)	+= tc35874x.o
 obj-$(CONFIG_VIDEO_OV5647)	+= ov5647.o
 obj-$(CONFIG_VIDEO_IMX219)	+= imx219.o
 obj-$(CONFIG_VIDEO_GC2155)	+= gc2155.o
+obj-$(CONFIG_VIDEO_GC0312)	+= gc0312.o
+obj-$(CONFIG_VIDEO_GC2145)	+= gc2145.o
diff --git a/drivers/media/i2c/gc0312.c b/drivers/media/i2c/gc0312.c
new file mode 100644
index 000000000000..cf4c74416d59
--- /dev/null
+++ b/drivers/media/i2c/gc0312.c
@@ -0,0 +1,1113 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * GC0312 CMOS Image Sensor driver
+ *
+ * Copyright (C) 2015 Texas Instruments, Inc.
+ *
+ * Benoit Parrot <bparrot@ti.com>
+ * Lad, Prabhakar <prabhakar.csengg@gmail.com>
+ *
+ * This program is free software; you may redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/gpio/consumer.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/media.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_graph.h>
+#include <linux/regulator/consumer.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/videodev2.h>
+
+#include <media/media-entity.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-event.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-image-sizes.h>
+#include <media/v4l2-mediabus.h>
+#include <media/v4l2-subdev.h>
+
+#define DRIVER_NAME "gc0312"
+#define GC0312_PIXEL_RATE		(96 * 1000 * 1000)
+
+/*
+ * GC0312 register definitions
+ */
+#define REG_SOFTWARE_STANDBY		0xf3
+
+#define REG_SC_CHIP_ID_H		0xf0
+#define REG_SC_CHIP_ID_L		0xf1
+
+#define REG_NULL			0xFFFF	/* Array end token */
+
+#define SENSOR_ID(_msb, _lsb)		((_msb) << 8 | (_lsb))
+#define GC0312_ID			0xb310
+
+struct sensor_register {
+	u16 addr;
+	u8 value;
+};
+
+struct gc0312_framesize {
+	u16 width;
+	u16 height;
+	u16 max_exp_lines;
+	const struct sensor_register *regs;
+};
+
+struct gc0312_pll_ctrl {
+	u8 ctrl1;
+	u8 ctrl2;
+	u8 ctrl3;
+};
+
+struct gc0312_pixfmt {
+	u32 code;
+	/* Output format Register Value (REG_FORMAT_CTRL00) */
+	struct sensor_register *format_ctrl_regs;
+};
+
+struct pll_ctrl_reg {
+	unsigned int div;
+	unsigned char reg;
+};
+
+static const char * const gc0312_supply_names[] = {
+	"dovdd",	/* Digital I/O power */
+	"avdd",		/* Analog power */
+	"dvdd",		/* Digital core power */
+};
+
+#define GC0312_NUM_SUPPLIES ARRAY_SIZE(gc0312_supply_names)
+
+struct gc0312 {
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt format;
+	unsigned int xvclk_frequency;
+	struct clk *xvclk;
+	struct gpio_desc *pwdn_gpio;
+	struct regulator_bulk_data supplies[GC0312_NUM_SUPPLIES];
+	struct mutex lock;
+	struct i2c_client *client;
+	struct v4l2_ctrl_handler ctrls;
+	struct v4l2_ctrl *link_frequency;
+	const struct gc0312_framesize *frame_size;
+	int streaming;
+};
+
+static const struct sensor_register gc0312_vga_regs[] = {
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfe, 0x00},
+	{0xfc, 0x0e},
+	{0xfc, 0x0e},
+	{0xf2, 0x07},
+	/*output_disable*/
+	{0xf3, 0x00},
+	{0xf7, 0x1b},
+	{0xf8, 0x04},
+	{0xf9, 0x0e},
+	{0xfa, 0x11},
+
+	/*CISCTL reg*/
+	{0x00, 0x2f},
+	{0x01, 0x0f},
+	{0x02, 0x04},
+	{0x03, 0x03},
+	{0x04, 0x50},
+	{0x09, 0x00},
+	{0x0a, 0x00},
+	{0x0b, 0x00},
+	{0x0c, 0x04},
+	{0x0d, 0x01},
+	{0x0e, 0xe8},
+	{0x0f, 0x02},
+	{0x10, 0x88},
+	{0x16, 0x00},
+	{0x17, 0x17},
+	{0x18, 0x1a},
+	{0x19, 0x14},
+	{0x1b, 0x48},
+	/*1c travis 20140929  update for lag*/
+	{0x1c, 0x6c},
+	{0x1e, 0x6b},
+	{0x1f, 0x28},
+	/*0x89 travis20140801*/
+	{0x20, 0x8b},
+	{0x21, 0x49},
+	/*b0 travis 20140929 update for lag*/
+	{0x22, 0xd0},
+	{0x23, 0x04},
+	{0x24, 0x16},
+	{0x34, 0x20},
+
+	/*BLK*/
+	{0x26, 0x23},
+	{0x28, 0xff},
+	{0x29, 0x00},
+	/*{0x32, 0x04},*/
+	{0x33, 0x10},
+	{0x37, 0x20},
+	{0x38, 0x10},
+	{0x47, 0x80},
+	{0x4e, 0x66},
+	{0xa8, 0x02},
+	{0xa9, 0x80},
+
+	/*ISP reg*/
+	{0x40, 0xff},
+	{0x41, 0x21},
+	{0x42, 0xcf},
+	{0x44, 0x02},
+	{0x45, 0xa8},
+	/*sync 02*/
+	{0x46, 0x03},
+	{0x4a, 0x11},
+	{0x4b, 0x01},
+	{0x4c, 0x20},
+	{0x4d, 0x05},
+	{0x4f, 0x01},
+	{0x50, 0x01},
+	{0x55, 0x01},
+	{0x56, 0xe0},
+	{0x57, 0x02},
+	{0x58, 0x80},
+
+	/*GAIN*/
+	{0x70, 0x70},
+	{0x5a, 0x84},
+	{0x5b, 0xc9},
+	{0x5c, 0xed},
+	{0x77, 0x74},
+	{0x78, 0x40},
+	{0x79, 0x5f},
+
+	/*DNDD*/
+	{0x82, 0x14},
+	{0x83, 0x0b},
+	{0x89, 0xf0},
+
+	/*EEINTP*/
+	{0x8f, 0xaa},
+	{0x90, 0x8c},
+	{0x91, 0x90},
+	{0x92, 0x03},
+	{0x93, 0x03},
+	{0x94, 0x05},
+	{0x95, 0x66},
+	{0x96, 0xf0},
+
+	/*ASDE*/
+	{0xfe, 0x00},
+
+	{0x9a, 0x20},
+	{0x9b, 0x80},
+	{0x9c, 0x40},
+	{0x9d, 0x80},
+
+	{0xa1, 0x30},
+	{0xa2, 0x32},
+	{0xa4, 0x30},
+	{0xa5, 0x30},
+	{0xaa, 0x10},
+	{0xac, 0x22},
+
+	/*GAMMA*/
+	{0xfe, 0x00},
+	{0xbf, 0x08},
+	{0xc0, 0x16},
+	{0xc1, 0x28},
+	{0xc2, 0x41},
+	{0xc3, 0x5a},
+	{0xc4, 0x6c},
+	{0xc5, 0x7a},
+	{0xc6, 0x96},
+	{0xc7, 0xac},
+	{0xc8, 0xbc},
+	{0xc9, 0xc9},
+	{0xca, 0xd3},
+	{0xcb, 0xdd},
+	{0xcc, 0xe5},
+	{0xcd, 0xf1},
+	{0xce, 0xfa},
+	{0xcf, 0xff},
+
+	/*YCP*/
+	{0xd0, 0x40},
+	{0xd1, 0x34},
+	{0xd2, 0x34},
+	{0xd3, 0x45},
+	{0xd6, 0xf2},
+	{0xd7, 0x1b},
+	{0xd8, 0x18},
+	{0xdd, 0x03},
+
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x05, 0x30},
+	{0x06, 0x75},
+	{0x07, 0x40},
+	{0x08, 0xb0},
+	{0x0a, 0xc5},
+	{0x0b, 0x11},
+	{0x0c, 0x00},
+	{0x12, 0x52},
+	{0x13, 0x40},
+	{0x18, 0x95},
+	{0x19, 0x96},
+	{0x1f, 0x20},
+	{0x20, 0xc0},
+	{0x3e, 0x40},
+	{0x3f, 0x57},
+	{0x40, 0x7d},
+	{0x03, 0x60},
+	{0x44, 0x02},
+
+	/*AWB*/
+	{0x1c, 0x91},
+	{0x21, 0x15},
+	{0x50, 0x80},
+	{0x56, 0x04},
+	{0x59, 0x08},
+	{0x5b, 0x02},
+	{0x61, 0x8d},
+	{0x62, 0xa7},
+	{0x63, 0xd0},
+	{0x65, 0x06},
+	{0x66, 0x06},
+	{0x67, 0x84},
+	{0x69, 0x08},
+	{0x6a, 0x25},
+	{0x6b, 0x01},
+	{0x6c, 0x00},
+	{0x6d, 0x02},
+	{0x6e, 0xf0},
+	{0x6f, 0x80},
+	{0x76, 0x80},
+	{0x78, 0xaf},
+	{0x79, 0x75},
+	{0x7a, 0x40},
+	{0x7b, 0x50},
+	{0x7c, 0x0c},
+
+	{0xa4, 0xb9},
+	{0xa5, 0xa0},
+	{0x90, 0xc9},
+	{0x91, 0xbe},
+
+	{0xa6, 0xb8},
+	{0xa7, 0x95},
+	{0x92, 0xe6},
+	{0x93, 0xca},
+
+	{0xa9, 0xbc},
+	{0xaa, 0x95},
+	{0x95, 0x23},
+	{0x96, 0xe7},
+
+	{0xab, 0x9d},
+	{0xac, 0x80},
+	{0x97, 0x43},
+	{0x98, 0x24},
+
+	{0xae, 0xb7},
+	{0xaf, 0x9e},
+	{0x9a, 0x43},
+	{0x9b, 0x24},
+
+	{0xb0, 0xc8},
+	{0xb1, 0x97},
+	{0x9c, 0xc4},
+	{0x9d, 0x44},
+
+	{0xb3, 0xb7},
+	{0xb4, 0x7f},
+	{0x9f, 0xc7},
+	{0xa0, 0xc8},
+
+	{0xb5, 0x00},
+	{0xb6, 0x00},
+	{0xa1, 0x00},
+	{0xa2, 0x00},
+
+	{0x86, 0x60},
+	{0x87, 0x08},
+	{0x88, 0x00},
+	{0x89, 0x00},
+	{0x8b, 0xde},
+	{0x8c, 0x80},
+	{0x8d, 0x00},
+	{0x8e, 0x00},
+
+	{0x94, 0x55},
+	{0x99, 0xa6},
+	{0x9e, 0xaa},
+	{0xa3, 0x0a},
+	{0x8a, 0x0a},
+	{0xa8, 0x55},
+	{0xad, 0x55},
+	{0xb2, 0x55},
+	{0xb7, 0x05},
+	{0x8f, 0x05},
+
+	{0xb8, 0xcc},
+	{0xb9, 0x9a},
+	/*CC*/
+	{0xfe, 0x01},
+	/*skin white*/
+	{0xd0, 0x38},
+	{0xd1, 0xfd},
+	{0xd2, 0x06},
+	{0xd3, 0xf0},
+	{0xd4, 0x40},
+	{0xd5, 0x08},
+
+	{0xd6, 0x30},
+	{0xd7, 0x00},
+	{0xd8, 0x0a},
+	{0xd9, 0x16},
+	{0xda, 0x39},
+	{0xdb, 0xf8},
+
+	/*LSC*/
+	{0xfe, 0x01},
+	{0xc1, 0x3c},
+	{0xc2, 0x50},
+	{0xc3, 0x00},
+	{0xc4, 0x40},
+	{0xc5, 0x30},
+	{0xc6, 0x30},
+	{0xc7, 0x10},
+	{0xc8, 0x00},
+	{0xc9, 0x00},
+	{0xdc, 0x20},
+	{0xdd, 0x10},
+	{0xdf, 0x00},
+	{0xde, 0x00},
+
+	/*Histogram*/
+	{0x01, 0x10},
+	{0x0b, 0x31},
+	{0x0e, 0x50},
+	{0x0f, 0x0f},
+	{0x10, 0x6e},
+	{0x12, 0xa0},
+	{0x15, 0x60},
+	{0x16, 0x60},
+	{0x17, 0xe0},
+
+	/*Measure Window*/
+	{0xcc, 0x0c},
+	{0xcd, 0x10},
+	{0xce, 0xa0},
+	{0xcf, 0xe6},
+
+	/*dark sun*/
+	{0x45, 0xf7},
+	{0x46, 0xff},
+	{0x47, 0x15},
+	{0x48, 0x03},
+	{0x4f, 0x60},
+
+	/*banding*/
+	{0xfe, 0x00},
+	{0x05, 0x02},
+	/*HB*/
+	{0x06, 0xd1},
+	{0x07, 0x00},
+	/*VB*/
+	{0x08, 0x22},
+
+	{0xfe, 0x01},
+	/*anti-flicker step [11:8]*/
+	{0x25, 0x00},
+	/*anti-flicker step [7:0]*/
+	{0x26, 0x6a},
+
+	/*exp level 0  20fps*/
+	{0x27, 0x02},
+	{0x28, 0x12},
+	/*exp level 1  12.50fps*/
+	{0x29, 0x02},
+	{0x2a, 0x12},
+	/*7.14fps*/
+	{0x2b, 0x02},
+	{0x2c, 0x12},
+	/*exp level 3  5.55fps*/
+	{0x2d, 0x02},
+	{0x2e, 0x12},
+	{0x3c, 0x20},
+	{0xfe, 0x00},
+
+	/*DVP*/
+	{0xfe, 0x03},
+	{0x01, 0x00},
+	{0x02, 0x00},
+	{0x10, 0x00},
+	{0x15, 0x00},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+static const struct gc0312_framesize gc0312_framesizes[] = {
+	{ /* VGA */
+		.width		= 640,
+		.height		= 480,
+		.regs		= gc0312_vga_regs,
+		.max_exp_lines	= 488,
+	}
+};
+
+static const struct gc0312_pixfmt gc0312_formats[] = {
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_2X8,
+	}
+};
+
+static inline struct gc0312 *to_gc0312(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct gc0312, sd);
+}
+
+/* sensor register write */
+static int gc0312_write(struct i2c_client *client, u8 reg, u8 val)
+{
+	struct i2c_msg msg;
+	u8 buf[2];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+	buf[1] = val;
+
+	msg.addr = client->addr;
+	msg.flags = client->flags;
+	msg.buf = buf;
+	msg.len = sizeof(buf);
+
+	ret = i2c_transfer(client->adapter, &msg, 1);
+	if (ret >= 0)
+		return 0;
+
+	dev_err(&client->dev,
+		"gc0312 write reg(0x%x val:0x%x) failed !\n", reg, val);
+
+	return ret;
+}
+
+/* sensor register read */
+static int gc0312_read(struct i2c_client *client, u8 reg, u8 *val)
+{
+	struct i2c_msg msg[2];
+	u8 buf[1];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+
+	msg[0].addr = client->addr;
+	msg[0].flags = client->flags;
+	msg[0].buf = buf;
+	msg[0].len = sizeof(buf);
+
+	msg[1].addr = client->addr;
+	msg[1].flags = client->flags | I2C_M_RD;
+	msg[1].buf = buf;
+	msg[1].len = 1;
+
+	ret = i2c_transfer(client->adapter, msg, 2);
+	if (ret >= 0) {
+		*val = buf[0];
+		return 0;
+	}
+
+	dev_err(&client->dev,
+		"gc0312 read reg(0x%x val:0x%x) failed !\n", reg, *val);
+
+	return ret;
+}
+
+static int gc0312_write_array(struct i2c_client *client,
+			      const struct sensor_register *regs)
+{
+	int i, ret = 0;
+
+	i = 0;
+	while (regs[i].addr != REG_NULL) {
+		ret = gc0312_write(client, regs[i].addr, regs[i].value);
+		if (ret) {
+			dev_err(&client->dev, "%s failed !\n", __func__);
+			break;
+		}
+
+		i++;
+	}
+
+	return ret;
+}
+
+static void gc0312_get_default_format(struct v4l2_mbus_framefmt *format)
+{
+	format->width = gc0312_framesizes[0].width;
+	format->height = gc0312_framesizes[0].height;
+	format->colorspace = V4L2_COLORSPACE_SRGB;
+	format->code = gc0312_formats[0].code;
+	format->field = V4L2_FIELD_NONE;
+}
+
+static void gc0312_set_streaming(struct gc0312 *gc0312, int on)
+{
+	struct i2c_client *client = gc0312->client;
+	int ret;
+
+	dev_dbg(&client->dev, "%s: on: %d\n", __func__, on);
+
+	ret = gc0312_write(client, REG_SOFTWARE_STANDBY, on);
+	if (ret)
+		dev_err(&client->dev, "gc0312 soft standby failed\n");
+}
+
+/*
+ * V4L2 subdev video and pad level operations
+ */
+
+static int gc0312_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_pad_config *cfg,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	if (code->index >= ARRAY_SIZE(gc0312_formats))
+		return -EINVAL;
+
+	code->code = gc0312_formats[code->index].code;
+
+	return 0;
+}
+
+static int gc0312_enum_frame_sizes(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_pad_config *cfg,
+				   struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int i = ARRAY_SIZE(gc0312_formats);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	if (fse->index >= ARRAY_SIZE(gc0312_framesizes))
+		return -EINVAL;
+
+	while (--i)
+		if (fse->code == gc0312_formats[i].code)
+			break;
+
+	fse->code = gc0312_formats[i].code;
+
+	fse->min_width  = gc0312_framesizes[fse->index].width;
+	fse->max_width  = fse->min_width;
+	fse->max_height = gc0312_framesizes[fse->index].height;
+	fse->min_height = fse->max_height;
+
+	return 0;
+}
+
+static int gc0312_get_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct gc0312 *gc0312 = to_gc0312(sd);
+
+	dev_dbg(&client->dev, "%s enter\n", __func__);
+
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		struct v4l2_mbus_framefmt *mf;
+
+		mf = v4l2_subdev_get_try_format(sd, cfg, 0);
+		mutex_lock(&gc0312->lock);
+		fmt->format = *mf;
+		mutex_unlock(&gc0312->lock);
+		return 0;
+#else
+	return -ENOTTY;
+#endif
+	}
+
+	mutex_lock(&gc0312->lock);
+	fmt->format = gc0312->format;
+	mutex_unlock(&gc0312->lock);
+
+	dev_dbg(&client->dev, "%s: %x %dx%d\n", __func__,
+		gc0312->format.code, gc0312->format.width,
+		gc0312->format.height);
+
+	return 0;
+}
+
+static void __gc0312_try_frame_size(struct v4l2_mbus_framefmt *mf,
+				    const struct gc0312_framesize **size)
+{
+	const struct gc0312_framesize *fsize = &gc0312_framesizes[0];
+	const struct gc0312_framesize *match = NULL;
+	int i = ARRAY_SIZE(gc0312_framesizes);
+	unsigned int min_err = UINT_MAX;
+
+	while (i--) {
+		int err = abs(fsize->width - mf->width)
+				+ abs(fsize->height - mf->height);
+		if (err < min_err && fsize->regs[0].addr) {
+			min_err = err;
+			match = fsize;
+		}
+		fsize++;
+	}
+
+	if (!match)
+		match = &gc0312_framesizes[0];
+
+	mf->width  = match->width;
+	mf->height = match->height;
+
+	if (size)
+		*size = match;
+}
+
+static int gc0312_set_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int index = ARRAY_SIZE(gc0312_formats);
+	struct v4l2_mbus_framefmt *mf = &fmt->format;
+	const struct gc0312_framesize *size = NULL;
+	struct gc0312 *gc0312 = to_gc0312(sd);
+	int ret = 0;
+
+	dev_dbg(&client->dev, "%s enter\n", __func__);
+
+	__gc0312_try_frame_size(mf, &size);
+
+	while (--index >= 0)
+		if (gc0312_formats[index].code == mf->code)
+			break;
+
+	if (index < 0)
+		return -EINVAL;
+
+	mf->colorspace = V4L2_COLORSPACE_SRGB;
+	mf->code = gc0312_formats[index].code;
+	mf->field = V4L2_FIELD_NONE;
+
+	mutex_lock(&gc0312->lock);
+
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		mf = v4l2_subdev_get_try_format(sd, cfg, fmt->pad);
+		*mf = fmt->format;
+#else
+		return -ENOTTY;
+#endif
+	} else {
+		if (gc0312->streaming) {
+			mutex_unlock(&gc0312->lock);
+			return -EBUSY;
+		}
+
+		gc0312->frame_size = size;
+		gc0312->format = fmt->format;
+	}
+
+	mutex_unlock(&gc0312->lock);
+	return ret;
+}
+
+static int gc0312_s_stream(struct v4l2_subdev *sd, int on)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct gc0312 *gc0312 = to_gc0312(sd);
+	int ret = 0;
+
+	dev_dbg(&client->dev, "%s: on: %d\n", __func__, on);
+
+	mutex_lock(&gc0312->lock);
+
+	on = !!on;
+
+	if (gc0312->streaming == on)
+		goto unlock;
+
+	if (!on) {
+		/* Stop Streaming Sequence */
+		gc0312_set_streaming(gc0312, 0x00);
+		gc0312->streaming = on;
+		goto unlock;
+	}
+
+	ret = gc0312_write_array(client, gc0312->frame_size->regs);
+	if (ret)
+		goto unlock;
+
+	gc0312_set_streaming(gc0312, 0xFF);
+	gc0312->streaming = on;
+
+unlock:
+	mutex_unlock(&gc0312->lock);
+	return ret;
+}
+
+static int gc0312_set_test_pattern(struct gc0312 *gc0312, int value)
+{
+	return 0;
+}
+
+static int gc0312_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct gc0312 *gc0312 =
+			container_of(ctrl->handler, struct gc0312, ctrls);
+
+	switch (ctrl->id) {
+	case V4L2_CID_TEST_PATTERN:
+		return gc0312_set_test_pattern(gc0312, ctrl->val);
+	}
+
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops gc0312_ctrl_ops = {
+	.s_ctrl = gc0312_s_ctrl,
+};
+
+static const char * const gc0312_test_pattern_menu[] = {
+	"Disabled",
+	"Vertical Color Bars",
+};
+
+/* -----------------------------------------------------------------------------
+ * V4L2 subdev internal operations
+ */
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static int gc0312_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct v4l2_mbus_framefmt *format =
+				v4l2_subdev_get_try_format(sd, fh->pad, 0);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	gc0312_get_default_format(format);
+
+	return 0;
+}
+#endif
+
+static int gc0312_g_mbus_config(struct v4l2_subdev *sd,
+				struct v4l2_mbus_config *config)
+{
+	config->type = V4L2_MBUS_PARALLEL;
+	config->flags = V4L2_MBUS_HSYNC_ACTIVE_HIGH |
+			V4L2_MBUS_VSYNC_ACTIVE_HIGH |
+			V4L2_MBUS_PCLK_SAMPLE_RISING;
+
+	return 0;
+}
+
+static const struct v4l2_subdev_core_ops gc0312_subdev_core_ops = {
+	.log_status = v4l2_ctrl_subdev_log_status,
+	.subscribe_event = v4l2_ctrl_subdev_subscribe_event,
+	.unsubscribe_event = v4l2_event_subdev_unsubscribe,
+};
+
+static const struct v4l2_subdev_video_ops gc0312_subdev_video_ops = {
+	.s_stream = gc0312_s_stream,
+	.g_mbus_config = gc0312_g_mbus_config,
+};
+
+static const struct v4l2_subdev_pad_ops gc0312_subdev_pad_ops = {
+	.enum_mbus_code = gc0312_enum_mbus_code,
+	.enum_frame_size = gc0312_enum_frame_sizes,
+	.get_fmt = gc0312_get_fmt,
+	.set_fmt = gc0312_set_fmt,
+};
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static const struct v4l2_subdev_ops gc0312_subdev_ops = {
+	.core  = &gc0312_subdev_core_ops,
+	.video = &gc0312_subdev_video_ops,
+	.pad   = &gc0312_subdev_pad_ops,
+};
+
+static const struct v4l2_subdev_internal_ops gc0312_subdev_internal_ops = {
+	.open = gc0312_open,
+};
+#endif
+
+static int gc0312_detect(struct v4l2_subdev *sd)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	u8 pid, ver;
+	int ret;
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	/* Check sensor revision */
+	ret = gc0312_read(client, REG_SC_CHIP_ID_H, &pid);
+	if (!ret)
+		ret = gc0312_read(client, REG_SC_CHIP_ID_L, &ver);
+
+	if (!ret) {
+		unsigned short id;
+
+		id = SENSOR_ID(pid, ver);
+		if (id != GC0312_ID) {
+			ret = -1;
+			dev_err(&client->dev,
+				"Sensor detection failed (%04X, %d)\n",
+				id, ret);
+		} else {
+			dev_info(&client->dev, "Found GC%04X sensor\n", id);
+		}
+	}
+
+	return ret;
+}
+
+static int __gc0312_power_on(struct gc0312 *gc0312)
+{
+	int ret;
+	struct device *dev = &gc0312->client->dev;
+
+	ret = clk_set_rate(gc0312->xvclk, 24000000);
+	if (ret < 0)
+		dev_info(dev, "Failed to set xvclk rate (24MHz)\n");
+
+	gpiod_set_value_cansleep(gc0312->pwdn_gpio, 1);
+	usleep_range(2000, 5000);
+
+	ret = regulator_bulk_enable(GC0312_NUM_SUPPLIES, gc0312->supplies);
+	if (ret < 0)
+		dev_info(dev, "Failed to enable regulators\n");
+
+	usleep_range(20000, 50000);
+
+	gpiod_set_value_cansleep(gc0312->pwdn_gpio, 0);
+	usleep_range(2000, 5000);
+
+	ret = clk_prepare_enable(gc0312->xvclk);
+	if (ret < 0)
+		dev_info(dev, "Failed to enable xvclk\n");
+
+	usleep_range(70000, 100000);
+
+	return 0;
+}
+
+static void __gc0312_power_off(struct gc0312 *gc0312)
+{
+	clk_disable_unprepare(gc0312->xvclk);
+	regulator_bulk_disable(GC0312_NUM_SUPPLIES, gc0312->supplies);
+	gpiod_set_value_cansleep(gc0312->pwdn_gpio, 1);
+}
+
+static int gc0312_configure_regulators(struct gc0312 *gc0312)
+{
+	unsigned int i;
+
+	for (i = 0; i < GC0312_NUM_SUPPLIES; i++)
+		gc0312->supplies[i].supply = gc0312_supply_names[i];
+
+	return devm_regulator_bulk_get(&gc0312->client->dev,
+				       GC0312_NUM_SUPPLIES,
+				       gc0312->supplies);
+}
+
+static int gc0312_parse_of(struct gc0312 *gc0312)
+{
+	struct device *dev = &gc0312->client->dev;
+	int ret;
+
+	gc0312->pwdn_gpio = devm_gpiod_get(dev, "pwdn", GPIOD_OUT_LOW);
+	if (IS_ERR(gc0312->pwdn_gpio)) {
+		dev_info(dev, "Failed to get pwdn-gpios\n");
+		return 0;
+	}
+
+	ret = gc0312_configure_regulators(gc0312);
+	if (ret)
+		dev_info(dev, "Failed to get power regulators\n");
+
+	return __gc0312_power_on(gc0312);
+}
+
+static int gc0312_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct v4l2_subdev *sd;
+	struct gc0312 *gc0312;
+	int ret;
+
+	gc0312 = devm_kzalloc(&client->dev, sizeof(*gc0312), GFP_KERNEL);
+	if (!gc0312)
+		return -ENOMEM;
+
+	gc0312->client = client;
+	gc0312->xvclk = devm_clk_get(&client->dev, "xvclk");
+	if (IS_ERR(gc0312->xvclk)) {
+		dev_err(&client->dev, "Failed to get xvclk\n");
+		return -EINVAL;
+	}
+
+	gc0312_parse_of(gc0312);
+
+	gc0312->xvclk_frequency = clk_get_rate(gc0312->xvclk);
+	if (gc0312->xvclk_frequency < 6000000 ||
+	    gc0312->xvclk_frequency > 27000000)
+		return -EINVAL;
+
+	v4l2_ctrl_handler_init(&gc0312->ctrls, 2);
+	gc0312->link_frequency =
+			v4l2_ctrl_new_std(&gc0312->ctrls, &gc0312_ctrl_ops,
+					  V4L2_CID_PIXEL_RATE, 0,
+					  GC0312_PIXEL_RATE, 1,
+					  GC0312_PIXEL_RATE);
+
+	v4l2_ctrl_new_std_menu_items(&gc0312->ctrls, &gc0312_ctrl_ops,
+				     V4L2_CID_TEST_PATTERN,
+				     ARRAY_SIZE(gc0312_test_pattern_menu) - 1,
+				     0, 0, gc0312_test_pattern_menu);
+	gc0312->sd.ctrl_handler = &gc0312->ctrls;
+
+	if (gc0312->ctrls.error) {
+		dev_err(&client->dev, "%s: control initialization error %d\n",
+			__func__, gc0312->ctrls.error);
+		return  gc0312->ctrls.error;
+	}
+
+	sd = &gc0312->sd;
+	client->flags |= I2C_CLIENT_SCCB;
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+	v4l2_i2c_subdev_init(sd, client, &gc0312_subdev_ops);
+
+	sd->internal_ops = &gc0312_subdev_internal_ops;
+	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
+		     V4L2_SUBDEV_FL_HAS_EVENTS;
+#endif
+
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	gc0312->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sd->entity.type = MEDIA_ENT_T_V4L2_SUBDEV_SENSOR;
+	ret = media_entity_init(&sd->entity, 1, &gc0312->pad, 0);
+	if (ret < 0) {
+		v4l2_ctrl_handler_free(&gc0312->ctrls);
+		return ret;
+	}
+#endif
+
+	mutex_init(&gc0312->lock);
+
+	gc0312_get_default_format(&gc0312->format);
+	gc0312->frame_size = &gc0312_framesizes[0];
+
+	ret = gc0312_detect(sd);
+	if (ret < 0)
+		goto error;
+
+	ret = v4l2_async_register_subdev(&gc0312->sd);
+	if (ret)
+		goto error;
+
+	dev_info(&client->dev, "%s sensor driver registered !!\n", sd->name);
+
+	return 0;
+
+error:
+	v4l2_ctrl_handler_free(&gc0312->ctrls);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	mutex_destroy(&gc0312->lock);
+	__gc0312_power_off(gc0312);
+	return ret;
+}
+
+static int gc0312_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc0312 *gc0312 = to_gc0312(sd);
+
+	v4l2_ctrl_handler_free(&gc0312->ctrls);
+	v4l2_async_unregister_subdev(sd);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	mutex_destroy(&gc0312->lock);
+
+	__gc0312_power_off(gc0312);
+
+	return 0;
+}
+
+static const struct i2c_device_id gc0312_id[] = {
+	{ "gc0312", 0 },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(i2c, gc0312_id);
+
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id gc0312_of_match[] = {
+	{ .compatible = "galaxycore,gc0312", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, gc0312_of_match);
+#endif
+
+static struct i2c_driver gc0312_i2c_driver = {
+	.driver = {
+		.name	= DRIVER_NAME,
+		.of_match_table = of_match_ptr(gc0312_of_match),
+	},
+	.probe		= gc0312_probe,
+	.remove		= gc0312_remove,
+	.id_table	= gc0312_id,
+};
+
+static int __init sensor_mod_init(void)
+{
+	return i2c_add_driver(&gc0312_i2c_driver);
+}
+
+static void __exit sensor_mod_exit(void)
+{
+	i2c_del_driver(&gc0312_i2c_driver);
+}
+
+device_initcall_sync(sensor_mod_init);
+module_exit(sensor_mod_exit);
+
+MODULE_AUTHOR("Benoit Parrot <bparrot@ti.com>");
+MODULE_DESCRIPTION("GC0312 CMOS Image Sensor driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/i2c/gc2145.c b/drivers/media/i2c/gc2145.c
new file mode 100644
index 000000000000..6d8f2dd3b90d
--- /dev/null
+++ b/drivers/media/i2c/gc2145.c
@@ -0,0 +1,1583 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * GC2145 CMOS Image Sensor driver
+ *
+ * Copyright (C) 2015 Texas Instruments, Inc.
+ *
+ * Benoit Parrot <bparrot@ti.com>
+ * Lad, Prabhakar <prabhakar.csengg@gmail.com>
+ *
+ * This program is free software; you may redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/gpio/consumer.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/media.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_graph.h>
+#include <linux/regulator/consumer.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/videodev2.h>
+
+#include <media/media-entity.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-event.h>
+#include <media/v4l2-fwnode.h>
+#include <media/v4l2-image-sizes.h>
+#include <media/v4l2-mediabus.h>
+#include <media/v4l2-subdev.h>
+
+#define DRIVER_NAME "gc2145"
+#define GC2145_PIXEL_RATE		(120 * 1000 * 1000)
+
+/*
+ * GC2145 register definitions
+ */
+#define REG_SOFTWARE_STANDBY		0xf2
+
+#define REG_SC_CHIP_ID_H		0xf0
+#define REG_SC_CHIP_ID_L		0xf1
+
+#define REG_NULL			0xFFFF	/* Array end token */
+
+#define SENSOR_ID(_msb, _lsb)		((_msb) << 8 | (_lsb))
+#define GC2145_ID			0x2145
+
+struct sensor_register {
+	u16 addr;
+	u8 value;
+};
+
+struct gc2145_framesize {
+	u16 width;
+	u16 height;
+	u16 max_exp_lines;
+	const struct sensor_register *regs;
+};
+
+struct gc2145_pll_ctrl {
+	u8 ctrl1;
+	u8 ctrl2;
+	u8 ctrl3;
+};
+
+struct gc2145_pixfmt {
+	u32 code;
+	/* Output format Register Value (REG_FORMAT_CTRL00) */
+	struct sensor_register *format_ctrl_regs;
+};
+
+struct pll_ctrl_reg {
+	unsigned int div;
+	unsigned char reg;
+};
+
+static const char * const gc2145_supply_names[] = {
+	"dovdd",	/* Digital I/O power */
+	"avdd",		/* Analog power */
+	"dvdd",		/* Digital core power */
+};
+
+#define GC2145_NUM_SUPPLIES ARRAY_SIZE(gc2145_supply_names)
+
+struct gc2145 {
+	struct v4l2_subdev sd;
+	struct media_pad pad;
+	struct v4l2_mbus_framefmt format;
+	unsigned int xvclk_frequency;
+	struct clk *xvclk;
+	struct gpio_desc *pwdn_gpio;
+	struct regulator_bulk_data supplies[GC2145_NUM_SUPPLIES];
+	struct mutex lock;
+	struct i2c_client *client;
+	struct v4l2_ctrl_handler ctrls;
+	struct v4l2_ctrl *link_frequency;
+	const struct gc2145_framesize *frame_size;
+	int streaming;
+};
+
+static const struct sensor_register gc2145_init_regs[] = {
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfc, 0x06},
+	{0xf6, 0x00},
+	{0xf7, 0x1d},
+	{0xf8, 0x84},
+	{0xfa, 0x00},
+	{0xf9, 0xfe},
+	{0xf2, 0x00},
+	/*ISP reg*/
+	{0xfe, 0x00},
+	{0x03, 0x04},
+	{0x04, 0xe2},
+	{0x09, 0x00},
+	{0x0a, 0x00},
+	{0x0b, 0x00},
+	{0x0c, 0x00},
+	{0x0d, 0x04},
+	{0x0e, 0xc0},
+	{0x0f, 0x06},
+	{0x10, 0x52},
+	{0x12, 0x2e},
+	{0x17, 0x14},
+	{0x18, 0x22},
+	{0x19, 0x0e},
+	{0x1a, 0x01},
+	{0x1b, 0x4b},
+	{0x1c, 0x07},
+	{0x1d, 0x10},
+	{0x1e, 0x88},
+	{0x1f, 0x78},
+	{0x20, 0x03},
+	{0x21, 0x40},
+	{0x22, 0xa0},
+	{0x24, 0x16},
+	{0x25, 0x01},
+	{0x26, 0x10},
+	{0x2d, 0x60},
+	{0x30, 0x01},
+	{0x31, 0x90},
+	{0x33, 0x06},
+	{0x34, 0x01},
+	{0xfe, 0x00},
+	{0x80, 0x7f},
+	{0x81, 0x26},
+	{0x82, 0xfa},
+	{0x83, 0x00},
+	{0x84, 0x00},
+	{0x86, 0x02},
+	{0x88, 0x03},
+	{0x89, 0x03},
+	{0x85, 0x08},
+	{0x8a, 0x00},
+	{0x8b, 0x00},
+	{0xb0, 0x55},
+	{0xc3, 0x00},
+	{0xc4, 0x80},
+	{0xc5, 0x90},
+	{0xc6, 0x3b},
+	{0xc7, 0x46},
+	{0xec, 0x06},
+	{0xed, 0x04},
+	{0xee, 0x60},
+	{0xef, 0x90},
+	{0xb6, 0x01},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x04},
+	{0x96, 0xb0},
+	{0x97, 0x06},
+	{0x98, 0x40},
+	/*BLK*/
+	{0xfe, 0x00},
+	{0x40, 0x42},
+	{0x41, 0x00},
+	{0x43, 0x5b},
+	{0x5e, 0x00},
+	{0x5f, 0x00},
+	{0x60, 0x00},
+	{0x61, 0x00},
+	{0x62, 0x00},
+	{0x63, 0x00},
+	{0x64, 0x00},
+	{0x65, 0x00},
+	{0x66, 0x20},
+	{0x67, 0x20},
+	{0x68, 0x20},
+	{0x69, 0x20},
+	{0x76, 0x00},
+	{0x6a, 0x08},
+	{0x6b, 0x08},
+	{0x6c, 0x08},
+	{0x6d, 0x08},
+	{0x6e, 0x08},
+	{0x6f, 0x08},
+	{0x70, 0x08},
+	{0x71, 0x08},
+	{0x76, 0x00},
+	{0x72, 0xf0},
+	{0x7e, 0x3c},
+	{0x7f, 0x00},
+	{0xfe, 0x02},
+	{0x48, 0x15},
+	{0x49, 0x00},
+	{0x4b, 0x0b},
+	{0xfe, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0xc0},
+	{0x03, 0x04},
+	{0x04, 0x90},
+	{0x05, 0x30},
+	{0x06, 0x90},
+	{0x07, 0x30},
+	{0x08, 0x80},
+	{0x09, 0x00},
+	{0x0a, 0x82},
+	{0x0b, 0x11},
+	{0x0c, 0x10},
+	{0x11, 0x10},
+	{0x13, 0x7b},
+	{0x17, 0x00},
+	{0x1c, 0x11},
+	{0x1e, 0x61},
+	{0x1f, 0x35},
+	{0x20, 0x40},
+	{0x22, 0x40},
+	{0x23, 0x20},
+	{0xfe, 0x02},
+	{0x0f, 0x04},
+	{0xfe, 0x01},
+	{0x12, 0x35},
+	{0x15, 0xb0},
+	{0x10, 0x31},
+	{0x3e, 0x28},
+	{0x3f, 0xb0},
+	{0x40, 0x90},
+	{0x41, 0x0f},
+
+	/*INTPEE*/
+	{0xfe, 0x02},
+	{0x90, 0x6c},
+	{0x91, 0x03},
+	{0x92, 0xcb},
+	{0x94, 0x33},
+	{0x95, 0x84},
+	{0x97, 0x45},
+	{0xa2, 0x11},
+	{0xfe, 0x00},
+	/*DNDD*/
+	{0xfe, 0x02},
+	{0x80, 0xc1},
+	{0x81, 0x08},
+	{0x82, 0x1f},
+	{0x83, 0x10},
+	{0x84, 0x0a},
+	{0x86, 0xf0},
+	{0x87, 0x50},
+	{0x88, 0x15},
+	{0x89, 0xb0},
+	{0x8a, 0x30},
+	{0x8b, 0x10},
+	/*ASDE*/
+	{0xfe, 0x01},
+	{0x21, 0x04},
+	{0xfe, 0x02},
+	{0xa3, 0x50},
+	{0xa4, 0x20},
+	{0xa5, 0x40},
+	{0xa6, 0x80},
+	{0xab, 0x40},
+	{0xae, 0x0c},
+	{0xb3, 0x46},
+	{0xb4, 0x64},
+	{0xb6, 0x38},
+	{0xb7, 0x01},
+	{0xb9, 0x2b},
+	{0x3c, 0x04},
+	{0x3d, 0x15},
+	{0x4b, 0x06},
+	{0x4c, 0x20},
+	{0xfe, 0x00},
+	/*GAMMA*/
+	/*gamma1*/
+#if 1
+	{0xfe, 0x02},
+	{0x10, 0x09},
+	{0x11, 0x0d},
+	{0x12, 0x13},
+	{0x13, 0x19},
+	{0x14, 0x27},
+	{0x15, 0x37},
+	{0x16, 0x45},
+	{0x17, 0x53},
+	{0x18, 0x69},
+	{0x19, 0x7d},
+	{0x1a, 0x8f},
+	{0x1b, 0x9d},
+	{0x1c, 0xa9},
+	{0x1d, 0xbd},
+	{0x1e, 0xcd},
+	{0x1f, 0xd9},
+	{0x20, 0xe3},
+	{0x21, 0xea},
+	{0x22, 0xef},
+	{0x23, 0xf5},
+	{0x24, 0xf9},
+	{0x25, 0xff},
+#else
+	{0xfe, 0x02},
+	{0x10, 0x0a},
+	{0x11, 0x12},
+	{0x12, 0x19},
+	{0x13, 0x1f},
+	{0x14, 0x2c},
+	{0x15, 0x38},
+	{0x16, 0x42},
+	{0x17, 0x4e},
+	{0x18, 0x63},
+	{0x19, 0x76},
+	{0x1a, 0x87},
+	{0x1b, 0x96},
+	{0x1c, 0xa2},
+	{0x1d, 0xb8},
+	{0x1e, 0xcb},
+	{0x1f, 0xd8},
+	{0x20, 0xe2},
+	{0x21, 0xe9},
+	{0x22, 0xf0},
+	{0x23, 0xf8},
+	{0x24, 0xfd},
+	{0x25, 0xff},
+	{0xfe, 0x00},
+#endif
+	{0xfe, 0x00},
+	{0xc6, 0x20},
+	{0xc7, 0x2b},
+	/*gamma2*/
+#if 1
+	{0xfe, 0x02},
+	{0x26, 0x0f},
+	{0x27, 0x14},
+	{0x28, 0x19},
+	{0x29, 0x1e},
+	{0x2a, 0x27},
+	{0x2b, 0x33},
+	{0x2c, 0x3b},
+	{0x2d, 0x45},
+	{0x2e, 0x59},
+	{0x2f, 0x69},
+	{0x30, 0x7c},
+	{0x31, 0x89},
+	{0x32, 0x98},
+	{0x33, 0xae},
+	{0x34, 0xc0},
+	{0x35, 0xcf},
+	{0x36, 0xda},
+	{0x37, 0xe2},
+	{0x38, 0xe9},
+	{0x39, 0xf3},
+	{0x3a, 0xf9},
+	{0x3b, 0xff},
+#else
+	/*Gamma outdoor*/
+	{0xfe, 0x02},
+	{0x26, 0x17},
+	{0x27, 0x18},
+	{0x28, 0x1c},
+	{0x29, 0x20},
+	{0x2a, 0x28},
+	{0x2b, 0x34},
+	{0x2c, 0x40},
+	{0x2d, 0x49},
+	{0x2e, 0x5b},
+	{0x2f, 0x6d},
+	{0x30, 0x7d},
+	{0x31, 0x89},
+	{0x32, 0x97},
+	{0x33, 0xac},
+	{0x34, 0xc0},
+	{0x35, 0xcf},
+	{0x36, 0xda},
+	{0x37, 0xe5},
+	{0x38, 0xec},
+	{0x39, 0xf8},
+	{0x3a, 0xfd},
+	{0x3b, 0xff},
+#endif
+	/*YCP*/
+	{0xfe, 0x02},
+	{0xd1, 0x40},
+	{0xd2, 0x40},
+	{0xd3, 0x48},
+	{0xd6, 0xf0},
+	{0xd7, 0x10},
+	{0xd8, 0xda},
+	{0xdd, 0x14},
+	{0xde, 0x86},
+	{0xed, 0x80},
+	{0xee, 0x00},
+	{0xef, 0x3f},
+	{0xd8, 0xd8},
+	/*abs*/
+	{0xfe, 0x01},
+	{0x9f, 0x40},
+	/*LSC*/
+	{0xfe, 0x01},
+	{0xc2, 0x14},
+	{0xc3, 0x0d},
+	{0xc4, 0x0c},
+	{0xc8, 0x15},
+	{0xc9, 0x0d},
+	{0xca, 0x0a},
+	{0xbc, 0x24},
+	{0xbd, 0x10},
+	{0xbe, 0x0b},
+	{0xb6, 0x25},
+	{0xb7, 0x16},
+	{0xb8, 0x15},
+	{0xc5, 0x00},
+	{0xc6, 0x00},
+	{0xc7, 0x00},
+	{0xcb, 0x00},
+	{0xcc, 0x00},
+	{0xcd, 0x00},
+	{0xbf, 0x07},
+	{0xc0, 0x00},
+	{0xc1, 0x00},
+	{0xb9, 0x00},
+	{0xba, 0x00},
+	{0xbb, 0x00},
+	{0xaa, 0x01},
+	{0xab, 0x01},
+	{0xac, 0x00},
+	{0xad, 0x05},
+	{0xae, 0x06},
+	{0xaf, 0x0e},
+	{0xb0, 0x0b},
+	{0xb1, 0x07},
+	{0xb2, 0x06},
+	{0xb3, 0x17},
+	{0xb4, 0x0e},
+	{0xb5, 0x0e},
+	{0xd0, 0x09},
+	{0xd1, 0x00},
+	{0xd2, 0x00},
+	{0xd6, 0x08},
+	{0xd7, 0x00},
+	{0xd8, 0x00},
+	{0xd9, 0x00},
+	{0xda, 0x00},
+	{0xdb, 0x00},
+	{0xd3, 0x0a},
+	{0xd4, 0x00},
+	{0xd5, 0x00},
+	{0xa4, 0x00},
+	{0xa5, 0x00},
+	{0xa6, 0x77},
+	{0xa7, 0x77},
+	{0xa8, 0x77},
+	{0xa9, 0x77},
+	{0xa1, 0x80},
+	{0xa2, 0x80},
+
+	{0xfe, 0x01},
+	{0xdf, 0x0d},
+	{0xdc, 0x25},
+	{0xdd, 0x30},
+	{0xe0, 0x77},
+	{0xe1, 0x80},
+	{0xe2, 0x77},
+	{0xe3, 0x90},
+	{0xe6, 0x90},
+	{0xe7, 0xa0},
+	{0xe8, 0x90},
+	{0xe9, 0xa0},
+	{0xfe, 0x00},
+	/*AWB*/
+	{0xfe, 0x01},
+	{0x4f, 0x00},
+	{0x4f, 0x00},
+	{0x4b, 0x01},
+	{0x4f, 0x00},
+
+	{0x4c, 0x01},
+	{0x4d, 0x71},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x91},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x70},
+	{0x4e, 0x01},
+	{0x4c, 0x01},
+	{0x4d, 0x90},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xb0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x8f},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x6f},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xaf},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xd0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xf0},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xcf},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0xef},
+	{0x4e, 0x02},
+	{0x4c, 0x01},
+	{0x4d, 0x6e},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8e},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xae},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xce},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8d},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xad},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcd},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8c},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xac},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcc},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xcb},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x4b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x6b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8b},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0xab},
+	{0x4e, 0x03},
+	{0x4c, 0x01},
+	{0x4d, 0x8a},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xaa},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xca},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xca},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xc9},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0x8a},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0x89},
+	{0x4e, 0x04},
+	{0x4c, 0x01},
+	{0x4d, 0xa9},
+	{0x4e, 0x04},
+	{0x4c, 0x02},
+	{0x4d, 0x0b},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x0a},
+	{0x4e, 0x05},
+	{0x4c, 0x01},
+	{0x4d, 0xeb},
+	{0x4e, 0x05},
+	{0x4c, 0x01},
+	{0x4d, 0xea},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x09},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x29},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x2a},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x4a},
+	{0x4e, 0x05},
+	{0x4c, 0x02},
+	{0x4d, 0x8a},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x49},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x69},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x89},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0xa9},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x48},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x68},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0x69},
+	{0x4e, 0x06},
+	{0x4c, 0x02},
+	{0x4d, 0xca},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc9},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe9},
+	{0x4e, 0x07},
+	{0x4c, 0x03},
+	{0x4d, 0x09},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc8},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe8},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xa7},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xc7},
+	{0x4e, 0x07},
+	{0x4c, 0x02},
+	{0x4d, 0xe7},
+	{0x4e, 0x07},
+	{0x4c, 0x03},
+	{0x4d, 0x07},
+	{0x4e, 0x07},
+
+	{0x4f, 0x01},
+	{0x50, 0x80},
+	{0x51, 0xa8},
+	{0x52, 0x47},
+	{0x53, 0x38},
+	{0x54, 0xc7},
+	{0x56, 0x0e},
+	{0x58, 0x08},
+	{0x5b, 0x00},
+	{0x5c, 0x74},
+	{0x5d, 0x8b},
+	{0x61, 0xdb},
+	{0x62, 0xb8},
+	{0x63, 0x86},
+	{0x64, 0xc0},
+	{0x65, 0x04},
+	{0x67, 0xa8},
+	{0x68, 0xb0},
+	{0x69, 0x00},
+	{0x6a, 0xa8},
+	{0x6b, 0xb0},
+	{0x6c, 0xaf},
+	{0x6d, 0x8b},
+	{0x6e, 0x50},
+	{0x6f, 0x18},
+	{0x73, 0xf0},
+	{0x70, 0x0d},
+	{0x71, 0x60},
+	{0x72, 0x80},
+	{0x74, 0x01},
+	{0x75, 0x01},
+	{0x7f, 0x0c},
+	{0x76, 0x70},
+	{0x77, 0x58},
+	{0x78, 0xa0},
+	{0x79, 0x5e},
+	{0x7a, 0x54},
+	{0x7b, 0x58},
+	{0xfe, 0x00},
+	/*CC*/
+	{0xfe, 0x02},
+	{0xc0, 0x01},
+	{0xc1, 0x44},
+	{0xc2, 0xfd},
+	{0xc3, 0x04},
+	{0xc4, 0xF0},
+	{0xc5, 0x48},
+	{0xc6, 0xfd},
+	{0xc7, 0x46},
+	{0xc8, 0xfd},
+	{0xc9, 0x02},
+	{0xca, 0xe0},
+	{0xcb, 0x45},
+	{0xcc, 0xec},
+	{0xcd, 0x48},
+	{0xce, 0xf0},
+	{0xcf, 0xf0},
+	{0xe3, 0x0c},
+	{0xe4, 0x4b},
+	{0xe5, 0xe0},
+	/*ABS*/
+	{0xfe, 0x01},
+	{0x9f, 0x40},
+	{0xfe, 0x00},
+	/*OUTPUT*/
+	{0xfe, 0x00},
+	{0xf2, 0x0f},
+	/*dark sun*/
+	{0xfe, 0x02},
+	{0x40, 0xbf},
+	{0x46, 0xcf},
+	{0xfe, 0x00},
+
+	/*frame rate 50Hz*/
+	{0xfe, 0x00},
+	{0x05, 0x01},
+	{0x06, 0x56},
+	{0x07, 0x00},
+	{0x08, 0x32},
+	{0xfe, 0x01},
+	{0x25, 0x00},
+	{0x26, 0xfa},
+
+	{0x27, 0x04},
+	{0x28, 0xe2},
+	{0x29, 0x04},
+	{0x2a, 0xe2},
+	{0x2b, 0x04},
+	{0x2c, 0xe2},
+	{0x2d, 0x04},
+	{0x2e, 0xe2},
+	{0xfe, 0x00},
+
+	{0xfe, 0x00},
+	{0xfd, 0x01},
+	{0xfa, 0x00},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x02},
+	{0x96, 0x58},
+	{0x97, 0x03},
+	{0x98, 0x20},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x02},
+	{0xed, 0x02},
+	{0xee, 0x30},
+	{0xef, 0x48},
+	{0xfe, 0x02},
+	{0x9d, 0x08},
+	{0xfe, 0x01},
+	{0x74, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0x60},
+	{0x03, 0x02},
+	{0x04, 0x48},
+	{0x05, 0x18},
+	{0x06, 0x50},
+	{0x07, 0x10},
+	{0x08, 0x38},
+	{0x0a, 0x80},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x03},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/* Senor full resolution setting */
+static const struct sensor_register gc2145_full_regs[] = {
+	{0xfe, 0x00},
+	{0xfd, 0x00},
+	{0xfa, 0x00},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x04},
+	{0x96, 0xb0},
+	{0x97, 0x06},
+	{0x98, 0x40},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x06},
+	{0xed, 0x04},
+	{0xee, 0x60},
+	{0xef, 0x90},
+	{0xfe, 0x01},
+	{0x74, 0x01},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0xc0},
+	{0x03, 0x04},
+	{0x04, 0x90},
+	{0x05, 0x30},
+	{0x06, 0x90},
+	{0x07, 0x30},
+	{0x08, 0x80},
+	{0x0a, 0x82},
+	{0xfe, 0x01},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x15},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+/* Preview resolution setting*/
+static const struct sensor_register gc2145_svga_regs[] = {
+	{0xfe, 0x00},
+	{0xb6, 0x01},
+	{0xfd, 0x01},
+	{0xfa, 0x00},
+	/*crop window*/
+	{0xfe, 0x00},
+	{0x90, 0x01},
+	{0x91, 0x00},
+	{0x92, 0x00},
+	{0x93, 0x00},
+	{0x94, 0x00},
+	{0x95, 0x02},
+	{0x96, 0x58},
+	{0x97, 0x03},
+	{0x98, 0x20},
+	{0x99, 0x11},
+	{0x9a, 0x06},
+	/*AWB*/
+	{0xfe, 0x00},
+	{0xec, 0x02},
+	{0xed, 0x02},
+	{0xee, 0x30},
+	{0xef, 0x48},
+	{0xfe, 0x02},
+	{0x9d, 0x08},
+	{0xfe, 0x01},
+	{0x74, 0x00},
+	/*AEC*/
+	{0xfe, 0x01},
+	{0x01, 0x04},
+	{0x02, 0x60},
+	{0x03, 0x02},
+	{0x04, 0x48},
+	{0x05, 0x18},
+	{0x06, 0x50},
+	{0x07, 0x10},
+	{0x08, 0x38},
+	{0x0a, 0x80},
+	{0x21, 0x04},
+	{0xfe, 0x00},
+	{0x20, 0x03},
+	{0xfe, 0x00},
+	{REG_NULL, 0x00},
+};
+
+static const struct gc2145_framesize gc2145_framesizes[] = {
+	{ /* SVGA */
+		.width		= 800,
+		.height		= 600,
+		.regs		= gc2145_svga_regs,
+		.max_exp_lines	= 608,
+	}, { /* FULL */
+		.width		= 1600,
+		.height		= 1200,
+		.regs		= gc2145_full_regs,
+		.max_exp_lines	= 1208,
+	}
+};
+
+static const struct gc2145_pixfmt gc2145_formats[] = {
+	{
+		.code = MEDIA_BUS_FMT_UYVY8_2X8,
+	}
+};
+
+static inline struct gc2145 *to_gc2145(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct gc2145, sd);
+}
+
+/* sensor register write */
+static int gc2145_write(struct i2c_client *client, u8 reg, u8 val)
+{
+	struct i2c_msg msg;
+	u8 buf[2];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+	buf[1] = val;
+
+	msg.addr = client->addr;
+	msg.flags = client->flags;
+	msg.buf = buf;
+	msg.len = sizeof(buf);
+
+	ret = i2c_transfer(client->adapter, &msg, 1);
+	if (ret >= 0)
+		return 0;
+
+	dev_err(&client->dev,
+		"gc2145 write reg(0x%x val:0x%x) failed !\n", reg, val);
+
+	return ret;
+}
+
+/* sensor register read */
+static int gc2145_read(struct i2c_client *client, u8 reg, u8 *val)
+{
+	struct i2c_msg msg[2];
+	u8 buf[1];
+	int ret;
+
+	buf[0] = reg & 0xFF;
+
+	msg[0].addr = client->addr;
+	msg[0].flags = client->flags;
+	msg[0].buf = buf;
+	msg[0].len = sizeof(buf);
+
+	msg[1].addr = client->addr;
+	msg[1].flags = client->flags | I2C_M_RD;
+	msg[1].buf = buf;
+	msg[1].len = 1;
+
+	ret = i2c_transfer(client->adapter, msg, 2);
+	if (ret >= 0) {
+		*val = buf[0];
+		return 0;
+	}
+
+	dev_err(&client->dev,
+		"gc2145 read reg(0x%x val:0x%x) failed !\n", reg, *val);
+
+	return ret;
+}
+
+static int gc2145_write_array(struct i2c_client *client,
+			      const struct sensor_register *regs)
+{
+	int i, ret = 0;
+
+	i = 0;
+	while (regs[i].addr != REG_NULL) {
+		ret = gc2145_write(client, regs[i].addr, regs[i].value);
+		if (ret) {
+			dev_err(&client->dev, "%s failed !\n", __func__);
+			break;
+		}
+
+		i++;
+	}
+
+	return ret;
+}
+
+static void gc2145_get_default_format(struct v4l2_mbus_framefmt *format)
+{
+	format->width = gc2145_framesizes[0].width;
+	format->height = gc2145_framesizes[0].height;
+	format->colorspace = V4L2_COLORSPACE_SRGB;
+	format->code = gc2145_formats[0].code;
+	format->field = V4L2_FIELD_NONE;
+}
+
+static void gc2145_set_streaming(struct gc2145 *gc2145, int on)
+{
+	struct i2c_client *client = gc2145->client;
+	int ret;
+
+	dev_dbg(&client->dev, "%s: on: %d\n", __func__, on);
+
+	ret = gc2145_write(client, REG_SOFTWARE_STANDBY, on);
+	if (ret)
+		dev_err(&client->dev, "gc2145 soft standby failed\n");
+}
+
+/*
+ * V4L2 subdev video and pad level operations
+ */
+
+static int gc2145_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_pad_config *cfg,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	if (code->index >= ARRAY_SIZE(gc2145_formats))
+		return -EINVAL;
+
+	code->code = gc2145_formats[code->index].code;
+
+	return 0;
+}
+
+static int gc2145_enum_frame_sizes(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_pad_config *cfg,
+				   struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int i = ARRAY_SIZE(gc2145_formats);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	if (fse->index >= ARRAY_SIZE(gc2145_framesizes))
+		return -EINVAL;
+
+	while (--i)
+		if (fse->code == gc2145_formats[i].code)
+			break;
+
+	fse->code = gc2145_formats[i].code;
+
+	fse->min_width  = gc2145_framesizes[fse->index].width;
+	fse->max_width  = fse->min_width;
+	fse->max_height = gc2145_framesizes[fse->index].height;
+	fse->min_height = fse->max_height;
+
+	return 0;
+}
+
+static int gc2145_get_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct gc2145 *gc2145 = to_gc2145(sd);
+
+	dev_dbg(&client->dev, "%s enter\n", __func__);
+
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		struct v4l2_mbus_framefmt *mf;
+
+		mf = v4l2_subdev_get_try_format(sd, cfg, 0);
+		mutex_lock(&gc2145->lock);
+		fmt->format = *mf;
+		mutex_unlock(&gc2145->lock);
+		return 0;
+#else
+	return -ENOTTY;
+#endif
+	}
+
+	mutex_lock(&gc2145->lock);
+	fmt->format = gc2145->format;
+	mutex_unlock(&gc2145->lock);
+
+	dev_dbg(&client->dev, "%s: %x %dx%d\n", __func__,
+		gc2145->format.code, gc2145->format.width,
+		gc2145->format.height);
+
+	return 0;
+}
+
+static void __gc2145_try_frame_size(struct v4l2_mbus_framefmt *mf,
+				    const struct gc2145_framesize **size)
+{
+	const struct gc2145_framesize *fsize = &gc2145_framesizes[0];
+	const struct gc2145_framesize *match = NULL;
+	int i = ARRAY_SIZE(gc2145_framesizes);
+	unsigned int min_err = UINT_MAX;
+
+	while (i--) {
+		int err = abs(fsize->width - mf->width)
+				+ abs(fsize->height - mf->height);
+		if (err < min_err && fsize->regs[0].addr) {
+			min_err = err;
+			match = fsize;
+		}
+		fsize++;
+	}
+
+	if (!match)
+		match = &gc2145_framesizes[0];
+
+	mf->width  = match->width;
+	mf->height = match->height;
+
+	if (size)
+		*size = match;
+}
+
+static int gc2145_set_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	int index = ARRAY_SIZE(gc2145_formats);
+	struct v4l2_mbus_framefmt *mf = &fmt->format;
+	const struct gc2145_framesize *size = NULL;
+	struct gc2145 *gc2145 = to_gc2145(sd);
+	int ret = 0;
+
+	dev_dbg(&client->dev, "%s enter\n", __func__);
+
+	__gc2145_try_frame_size(mf, &size);
+
+	while (--index >= 0)
+		if (gc2145_formats[index].code == mf->code)
+			break;
+
+	if (index < 0)
+		return -EINVAL;
+
+	mf->colorspace = V4L2_COLORSPACE_SRGB;
+	mf->code = gc2145_formats[index].code;
+	mf->field = V4L2_FIELD_NONE;
+
+	mutex_lock(&gc2145->lock);
+
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		mf = v4l2_subdev_get_try_format(sd, cfg, fmt->pad);
+		*mf = fmt->format;
+#else
+		return -ENOTTY;
+#endif
+	} else {
+		if (gc2145->streaming) {
+			mutex_unlock(&gc2145->lock);
+			return -EBUSY;
+		}
+
+		gc2145->frame_size = size;
+		gc2145->format = fmt->format;
+	}
+
+	mutex_unlock(&gc2145->lock);
+	return ret;
+}
+
+static int gc2145_s_stream(struct v4l2_subdev *sd, int on)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct gc2145 *gc2145 = to_gc2145(sd);
+	int ret = 0;
+
+	dev_dbg(&client->dev, "%s: on: %d\n", __func__, on);
+
+	mutex_lock(&gc2145->lock);
+
+	on = !!on;
+
+	if (gc2145->streaming == on)
+		goto unlock;
+
+	if (!on) {
+		/* Stop Streaming Sequence */
+		gc2145_set_streaming(gc2145, 0x00);
+		gc2145->streaming = on;
+		goto unlock;
+	}
+
+	ret = gc2145_write_array(client, gc2145_init_regs);
+	if (ret)
+		goto unlock;
+
+	ret = gc2145_write_array(client, gc2145->frame_size->regs);
+	if (ret)
+		goto unlock;
+
+	gc2145_set_streaming(gc2145, 0x0f);
+	gc2145->streaming = on;
+
+unlock:
+	mutex_unlock(&gc2145->lock);
+	return ret;
+}
+
+static int gc2145_set_test_pattern(struct gc2145 *gc2145, int value)
+{
+	return 0;
+}
+
+static int gc2145_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct gc2145 *gc2145 =
+			container_of(ctrl->handler, struct gc2145, ctrls);
+
+	switch (ctrl->id) {
+	case V4L2_CID_TEST_PATTERN:
+		return gc2145_set_test_pattern(gc2145, ctrl->val);
+	}
+
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops gc2145_ctrl_ops = {
+	.s_ctrl = gc2145_s_ctrl,
+};
+
+static const char * const gc2145_test_pattern_menu[] = {
+	"Disabled",
+	"Vertical Color Bars",
+};
+
+/* -----------------------------------------------------------------------------
+ * V4L2 subdev internal operations
+ */
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static int gc2145_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct v4l2_mbus_framefmt *format =
+				v4l2_subdev_get_try_format(sd, fh->pad, 0);
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	gc2145_get_default_format(format);
+
+	return 0;
+}
+#endif
+
+static int gc2145_g_mbus_config(struct v4l2_subdev *sd,
+				struct v4l2_mbus_config *config)
+{
+	config->type = V4L2_MBUS_PARALLEL;
+	config->flags = V4L2_MBUS_HSYNC_ACTIVE_HIGH |
+			V4L2_MBUS_VSYNC_ACTIVE_LOW |
+			V4L2_MBUS_PCLK_SAMPLE_RISING;
+
+	return 0;
+}
+
+static const struct v4l2_subdev_core_ops gc2145_subdev_core_ops = {
+	.log_status = v4l2_ctrl_subdev_log_status,
+	.subscribe_event = v4l2_ctrl_subdev_subscribe_event,
+	.unsubscribe_event = v4l2_event_subdev_unsubscribe,
+};
+
+static const struct v4l2_subdev_video_ops gc2145_subdev_video_ops = {
+	.s_stream = gc2145_s_stream,
+	.g_mbus_config = gc2145_g_mbus_config,
+};
+
+static const struct v4l2_subdev_pad_ops gc2145_subdev_pad_ops = {
+	.enum_mbus_code = gc2145_enum_mbus_code,
+	.enum_frame_size = gc2145_enum_frame_sizes,
+	.get_fmt = gc2145_get_fmt,
+	.set_fmt = gc2145_set_fmt,
+};
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static const struct v4l2_subdev_ops gc2145_subdev_ops = {
+	.core  = &gc2145_subdev_core_ops,
+	.video = &gc2145_subdev_video_ops,
+	.pad   = &gc2145_subdev_pad_ops,
+};
+
+static const struct v4l2_subdev_internal_ops gc2145_subdev_internal_ops = {
+	.open = gc2145_open,
+};
+#endif
+
+static int gc2145_detect(struct v4l2_subdev *sd)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	u8 pid, ver;
+	int ret;
+
+	dev_dbg(&client->dev, "%s:\n", __func__);
+
+	/* Check sensor revision */
+	ret = gc2145_read(client, REG_SC_CHIP_ID_H, &pid);
+	if (!ret)
+		ret = gc2145_read(client, REG_SC_CHIP_ID_L, &ver);
+
+	if (!ret) {
+		unsigned short id;
+
+		id = SENSOR_ID(pid, ver);
+		if (id != GC2145_ID) {
+			ret = -1;
+			dev_err(&client->dev,
+				"Sensor detection failed (%04X, %d)\n",
+				id, ret);
+		} else {
+			dev_info(&client->dev, "Found GC%04X sensor\n", id);
+		}
+	}
+
+	return ret;
+}
+
+static int __gc2145_power_on(struct gc2145 *gc2145)
+{
+	int ret;
+	struct device *dev = &gc2145->client->dev;
+
+	ret = clk_set_rate(gc2145->xvclk, 24000000);
+	if (ret < 0)
+		dev_info(dev, "Failed to set xvclk rate (24MHz)\n");
+
+	gpiod_set_value_cansleep(gc2145->pwdn_gpio, 1);
+	usleep_range(2000, 5000);
+
+	ret = regulator_bulk_enable(GC2145_NUM_SUPPLIES, gc2145->supplies);
+	if (ret < 0)
+		dev_info(dev, "Failed to enable regulators\n");
+
+	usleep_range(20000, 50000);
+
+	gpiod_set_value_cansleep(gc2145->pwdn_gpio, 0);
+	usleep_range(2000, 5000);
+
+	ret = clk_prepare_enable(gc2145->xvclk);
+	if (ret < 0)
+		dev_info(dev, "Failed to enable xvclk\n");
+
+	usleep_range(70000, 100000);
+
+	return 0;
+}
+
+static void __gc2145_power_off(struct gc2145 *gc2145)
+{
+	clk_disable_unprepare(gc2145->xvclk);
+	regulator_bulk_disable(GC2145_NUM_SUPPLIES, gc2145->supplies);
+	gpiod_set_value_cansleep(gc2145->pwdn_gpio, 1);
+}
+
+static int gc2145_configure_regulators(struct gc2145 *gc2145)
+{
+	unsigned int i;
+
+	for (i = 0; i < GC2145_NUM_SUPPLIES; i++)
+		gc2145->supplies[i].supply = gc2145_supply_names[i];
+
+	return devm_regulator_bulk_get(&gc2145->client->dev,
+				       GC2145_NUM_SUPPLIES,
+				       gc2145->supplies);
+}
+
+static int gc2145_parse_of(struct gc2145 *gc2145)
+{
+	struct device *dev = &gc2145->client->dev;
+	int ret;
+
+	gc2145->pwdn_gpio = devm_gpiod_get(dev, "pwdn", GPIOD_OUT_LOW);
+	if (IS_ERR(gc2145->pwdn_gpio)) {
+		dev_info(dev, "Failed to get pwdn-gpios\n");
+		return 0;
+	}
+
+	ret = gc2145_configure_regulators(gc2145);
+	if (ret)
+		dev_info(dev, "Failed to get power regulators\n");
+
+	return __gc2145_power_on(gc2145);
+}
+
+static int gc2145_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct v4l2_subdev *sd;
+	struct gc2145 *gc2145;
+	int ret;
+
+	gc2145 = devm_kzalloc(&client->dev, sizeof(*gc2145), GFP_KERNEL);
+	if (!gc2145)
+		return -ENOMEM;
+
+	gc2145->client = client;
+	gc2145->xvclk = devm_clk_get(&client->dev, "xvclk");
+	if (IS_ERR(gc2145->xvclk)) {
+		dev_err(&client->dev, "Failed to get xvclk\n");
+		return -EINVAL;
+	}
+
+	gc2145_parse_of(gc2145);
+
+	gc2145->xvclk_frequency = clk_get_rate(gc2145->xvclk);
+	if (gc2145->xvclk_frequency < 6000000 ||
+	    gc2145->xvclk_frequency > 27000000)
+		return -EINVAL;
+
+	v4l2_ctrl_handler_init(&gc2145->ctrls, 2);
+	gc2145->link_frequency =
+			v4l2_ctrl_new_std(&gc2145->ctrls, &gc2145_ctrl_ops,
+					  V4L2_CID_PIXEL_RATE, 0,
+					  GC2145_PIXEL_RATE, 1,
+					  GC2145_PIXEL_RATE);
+
+	v4l2_ctrl_new_std_menu_items(&gc2145->ctrls, &gc2145_ctrl_ops,
+				     V4L2_CID_TEST_PATTERN,
+				     ARRAY_SIZE(gc2145_test_pattern_menu) - 1,
+				     0, 0, gc2145_test_pattern_menu);
+	gc2145->sd.ctrl_handler = &gc2145->ctrls;
+
+	if (gc2145->ctrls.error) {
+		dev_err(&client->dev, "%s: control initialization error %d\n",
+			__func__, gc2145->ctrls.error);
+		return  gc2145->ctrls.error;
+	}
+
+	sd = &gc2145->sd;
+	client->flags |= I2C_CLIENT_SCCB;
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+	v4l2_i2c_subdev_init(sd, client, &gc2145_subdev_ops);
+
+	sd->internal_ops = &gc2145_subdev_internal_ops;
+	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
+		     V4L2_SUBDEV_FL_HAS_EVENTS;
+#endif
+
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	gc2145->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sd->entity.type = MEDIA_ENT_T_V4L2_SUBDEV_SENSOR;
+	ret = media_entity_init(&sd->entity, 1, &gc2145->pad, 0);
+	if (ret < 0) {
+		v4l2_ctrl_handler_free(&gc2145->ctrls);
+		return ret;
+	}
+#endif
+
+	mutex_init(&gc2145->lock);
+
+	gc2145_get_default_format(&gc2145->format);
+	gc2145->frame_size = &gc2145_framesizes[0];
+
+	ret = gc2145_detect(sd);
+	if (ret < 0)
+		goto error;
+
+	ret = v4l2_async_register_subdev(&gc2145->sd);
+	if (ret)
+		goto error;
+
+	dev_info(&client->dev, "%s sensor driver registered !!\n", sd->name);
+
+	return 0;
+
+error:
+	v4l2_ctrl_handler_free(&gc2145->ctrls);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	mutex_destroy(&gc2145->lock);
+	__gc2145_power_off(gc2145);
+	return ret;
+}
+
+static int gc2145_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct gc2145 *gc2145 = to_gc2145(sd);
+
+	v4l2_ctrl_handler_free(&gc2145->ctrls);
+	v4l2_async_unregister_subdev(sd);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	mutex_destroy(&gc2145->lock);
+
+	__gc2145_power_off(gc2145);
+
+	return 0;
+}
+
+static const struct i2c_device_id gc2145_id[] = {
+	{ "gc2145", 0 },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(i2c, gc2145_id);
+
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id gc2145_of_match[] = {
+	{ .compatible = "galaxycore,gc2145", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, gc2145_of_match);
+#endif
+
+static struct i2c_driver gc2145_i2c_driver = {
+	.driver = {
+		.name	= DRIVER_NAME,
+		.of_match_table = of_match_ptr(gc2145_of_match),
+	},
+	.probe		= gc2145_probe,
+	.remove		= gc2145_remove,
+	.id_table	= gc2145_id,
+};
+
+static int __init sensor_mod_init(void)
+{
+	return i2c_add_driver(&gc2145_i2c_driver);
+}
+
+static void __exit sensor_mod_exit(void)
+{
+	i2c_del_driver(&gc2145_i2c_driver);
+}
+
+device_initcall_sync(sensor_mod_init);
+module_exit(sensor_mod_exit);
+
+MODULE_AUTHOR("Benoit Parrot <bparrot@ti.com>");
+MODULE_DESCRIPTION("GC2145 CMOS Image Sensor driver");
+MODULE_LICENSE("GPL v2");
-- 
2.35.3

