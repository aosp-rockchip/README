From 11e801adcc7345adf24b50f1d4ab38b47363450a Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Tue, 19 Sep 2017 17:46:15 +0800
Subject: [PATCH] drm/rockchip: dsi: properly check return value of some
 functions

Fixes: d6dfcd07b75e ("drm/rockchip: dw-mipi-dsi: analyze the platform parameters in the probe function")
Change-Id: Iecf9532f52a1b27ea063556701f840329881a2e2
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 .../display/rockchip/dw_mipi_dsi_rockchip.txt |   4 +-
 drivers/gpu/drm/rockchip/dw-mipi-dsi.c        | 120 ++++++------------
 2 files changed, 42 insertions(+), 82 deletions(-)

diff --git a/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt b/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
index dd6e29c28d62..449cf98fc82f 100644
--- a/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
+++ b/Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt
@@ -11,6 +11,8 @@ Required properties:
 - interrupts: Represent the controller's interrupt to the CPU(s).
 - clocks, clock-names: Phandles to the controller's APB clock(pclk) as
   described in [1].
+- resets : phandle to the reset of MIPI DSI APB Clock.
+- reset-names : should be "apb".
 - rockchip,grf: this soc should set GRF regs to mux vopl/vopb.
 - #address-cells: Should be <1>.
 - #size-cells: Should be <0>.
@@ -25,8 +27,6 @@ Optional properties
 - phys: phandle to Non-SNPS PHY node
 - phy-names: the string "mipi_dphy" when is found in a node, along with "phys"
   attribute, provides phandle to MIPI PHY node
-- resets : phandle to the reset of MIPI DSI APB Clock.
-- reset-names : should be "apb".
 - rockchip,dual-channel: for dual-channel panel, if not, don't configure
 - rockchip,lane-rate: manually configure lane-rate, not necessary.
 
diff --git a/drivers/gpu/drm/rockchip/dw-mipi-dsi.c b/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
index 48e106a726a8..7adba4822d57 100644
--- a/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
+++ b/drivers/gpu/drm/rockchip/dw-mipi-dsi.c
@@ -1111,6 +1111,12 @@ static void rockchip_dsi_pre_init(struct dw_mipi_dsi *dsi)
 		return;
 	}
 
+	/* MIPI DSI APB software reset request. */
+	reset_control_assert(dsi->rst);
+	udelay(10);
+	reset_control_deassert(dsi->rst);
+	udelay(10);
+
 	if (clk_prepare_enable(dsi->dphy.ref_clk)) {
 		dev_err(dsi->dev, "Failed to enable pllref_clk\n");
 		return;
@@ -1125,14 +1131,6 @@ static void rockchip_dsi_pre_init(struct dw_mipi_dsi *dsi)
 
 	pm_runtime_get_sync(dsi->dev);
 
-	if (dsi->rst) {
-		/* MIPI DSI APB software reset request. */
-		reset_control_assert(dsi->rst);
-		udelay(10);
-		reset_control_deassert(dsi->rst);
-		udelay(10);
-	}
-
 	dev_info(dsi->dev, "final DSI-Link bandwidth: %u x %d Mbps\n",
 		 dsi->lane_mbps, dsi->lanes);
 }
@@ -1486,48 +1484,7 @@ static const struct component_ops dw_mipi_dsi_ops = {
 	.unbind	= dw_mipi_dsi_unbind,
 };
 
-static int rockchip_dsi_get_reset_handle(struct dw_mipi_dsi *dsi)
-{
-	struct device *dev = dsi->dev;
-
-	dsi->rst = devm_reset_control_get_optional(dev, "apb");
-	if (IS_ERR(dsi->rst)) {
-		dev_info(dev, "no reset control specified\n");
-		dsi->rst = NULL;
-	}
-
-	return 0;
-}
-
-static int rockchip_dsi_grf_regmap(struct dw_mipi_dsi *dsi)
-{
-	struct device_node *np = dsi->dev->of_node;
-
-	dsi->grf_regmap = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
-	if (IS_ERR(dsi->grf_regmap)) {
-		dev_err(dsi->dev, "Unable to get rockchip,grf\n");
-		return PTR_ERR(dsi->grf_regmap);
-	}
-
-	return 0;
-}
-
-static int rockchip_dsi_clk_get(struct dw_mipi_dsi *dsi)
-{
-	struct device *dev = dsi->dev;
-	int ret;
-
-	dsi->pclk = devm_clk_get(dev, "pclk");
-	if (IS_ERR(dsi->pclk)) {
-		ret = PTR_ERR(dsi->pclk);
-		dev_err(dev, "Unable to get pclk: %d\n", ret);
-		return ret;
-	}
-
-	return 0;
-}
-
-static int rockchip_dsi_dphy_parse(struct dw_mipi_dsi *dsi)
+static int mipi_dphy_attach(struct dw_mipi_dsi *dsi)
 {
 	struct device *dev = dsi->dev;
 	int ret;
@@ -1572,35 +1529,16 @@ static int rockchip_dsi_dphy_parse(struct dw_mipi_dsi *dsi)
 	return 0;
 }
 
-static int rockchip_dsi_ioremap_resource(struct platform_device *pdev,
-					 struct dw_mipi_dsi *dsi)
-{
-	struct device *dev = &pdev->dev;
-	struct resource *res;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res)
-		return -ENODEV;
-
-	dsi->base = devm_ioremap_resource(dev, res);
-	if (IS_ERR(dsi->base))
-		return PTR_ERR(dsi->base);
-
-	return 0;
-}
-
 static int dw_mipi_dsi_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
-	const struct of_device_id *of_id =
-			of_match_device(dw_mipi_dsi_dt_ids, dev);
-	const struct dw_mipi_dsi_plat_data *pdata = of_id->data;
 	struct dw_mipi_dsi *dsi;
 	struct device_node *np = dev->of_node;
+	struct resource *res;
 	int ret;
 	int dsi_id;
 
-	dsi = devm_kzalloc(&pdev->dev, sizeof(*dsi), GFP_KERNEL);
+	dsi = devm_kzalloc(dev, sizeof(*dsi), GFP_KERNEL);
 	if (!dsi)
 		return -ENOMEM;
 
@@ -1610,23 +1548,45 @@ static int dw_mipi_dsi_probe(struct platform_device *pdev)
 
 	dsi->id = dsi_id;
 	dsi->dev = dev;
-	dsi->pdata = pdata;
+	dsi->pdata = of_device_get_match_data(dev);
+	platform_set_drvdata(pdev, dsi);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	dsi->base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(dsi->base))
+		return PTR_ERR(dsi->base);
 
-	rockchip_dsi_ioremap_resource(pdev, dsi);
-	rockchip_dsi_clk_get(dsi);
-	rockchip_dsi_dphy_parse(dsi);
-	rockchip_dsi_grf_regmap(dsi);
-	rockchip_dsi_get_reset_handle(dsi);
+	dsi->pclk = devm_clk_get(dev, "pclk");
+	if (IS_ERR(dsi->pclk)) {
+		ret = PTR_ERR(dsi->pclk);
+		dev_err(dev, "Unable to get pclk: %d\n", ret);
+		return ret;
+	}
+
+	dsi->grf_regmap = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
+	if (IS_ERR(dsi->grf_regmap)) {
+		dev_err(dev, "Unable to get rockchip,grf\n");
+		return PTR_ERR(dsi->grf_regmap);
+	}
+
+	dsi->rst = devm_reset_control_get(dev, "apb");
+	if (IS_ERR(dsi->rst)) {
+		dev_err(dev, "failed to get reset control\n");
+		return PTR_ERR(dsi->rst);
+	}
+
+	ret = mipi_dphy_attach(dsi);
+	if (ret)
+		return ret;
 
 	dsi->dsi_host.ops = &dw_mipi_dsi_host_ops;
-	dsi->dsi_host.dev = &pdev->dev;
+	dsi->dsi_host.dev = dev;
 
 	ret = mipi_dsi_host_register(&dsi->dsi_host);
 	if (ret)
 		return ret;
 
-	platform_set_drvdata(pdev, dsi);
-	ret = component_add(&pdev->dev, &dw_mipi_dsi_ops);
+	ret = component_add(dev, &dw_mipi_dsi_ops);
 	if (ret)
 		mipi_dsi_host_unregister(&dsi->dsi_host);
 
-- 
2.35.3

