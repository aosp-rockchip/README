From 0b84208d4d8916b3856a0c9048c4d0c0b1526346 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Fri, 28 Feb 2020 10:56:08 +0800
Subject: [PATCH] nvmem: rockchip-otp: Add support for rv1126-otp

This adds the necessary data for handling efuse on the rv1126.

Change-Id: Id46ae2354674482ca1e2d69888acce3028f0f902
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 .../bindings/nvmem/rockchip-otp.txt           |  1 +
 drivers/nvmem/rockchip-otp.c                  | 45 +++++++++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/Documentation/devicetree/bindings/nvmem/rockchip-otp.txt b/Documentation/devicetree/bindings/nvmem/rockchip-otp.txt
index b46e169fcbcc..5fec29725aa4 100644
--- a/Documentation/devicetree/bindings/nvmem/rockchip-otp.txt
+++ b/Documentation/devicetree/bindings/nvmem/rockchip-otp.txt
@@ -4,6 +4,7 @@ Required properties:
 - compatible: Should be one of the following.
   - "rockchip,px30-otp" - for PX30 SoCs.
   - "rockchip,rk3308-otp" - for RK3308 SoCs.
+  - "rockchip,rv1126-otp" - for RV1126 SoCs.
 - reg: Must contain an entry with the physical base address and length
   for each entry in reg-names.
 - address-cells: must be set to 1.
diff --git a/drivers/nvmem/rockchip-otp.c b/drivers/nvmem/rockchip-otp.c
index 669a3a20f4c5..96c64e137675 100644
--- a/drivers/nvmem/rockchip-otp.c
+++ b/drivers/nvmem/rockchip-otp.c
@@ -54,6 +54,11 @@
 
 #define OTPC_TIMEOUT			10000
 
+#define RV1126_OTP_NVM_RADDR		0x1C
+#define RV1126_OTP_NVM_RSTART		0x20
+#define RV1126_OTP_NVM_RDATA		0x24
+#define RV1126_OTP_READ_ST		0x30
+
 struct rockchip_otp {
 	struct device *dev;
 	void __iomem *base;
@@ -179,6 +184,31 @@ static int px30_otp_read(void *context, unsigned int offset, void *val,
 	return ret;
 }
 
+static int rv1126_otp_read(void *context, unsigned int offset, void *val,
+			   size_t bytes)
+{
+	struct rockchip_otp *otp = context;
+	u32 status = 0;
+	u8 *buf = val;
+	int ret = 0;
+
+	while (bytes--) {
+		writel(offset++, otp->base + RV1126_OTP_NVM_RADDR);
+		writel(0x1, otp->base + RV1126_OTP_NVM_RSTART);
+		ret = readl_poll_timeout_atomic(otp->base + RV1126_OTP_READ_ST,
+						status, status == 0, 1,
+						OTPC_TIMEOUT);
+		if (ret < 0) {
+			dev_err(otp->dev, "timeout during read setup\n");
+			return ret;
+		}
+
+		*buf++ = readb(otp->base + RV1126_OTP_NVM_RDATA);
+	}
+
+	return 0;
+}
+
 static struct nvmem_config otp_config = {
 	.name = "rockchip-otp",
 	.owner = THIS_MODULE,
@@ -198,6 +228,17 @@ static const struct rockchip_data px30_data = {
 	.reg_read = px30_otp_read,
 };
 
+static const char * const rv1126_otp_clocks[] = {
+	"otp", "apb_pclk",
+};
+
+static const struct rockchip_data rv1126_data = {
+	.size = 0x200,
+	.clocks = rv1126_otp_clocks,
+	.num_clks = ARRAY_SIZE(rv1126_otp_clocks),
+	.reg_read = rv1126_otp_read,
+};
+
 static const struct of_device_id rockchip_otp_match[] = {
 	{
 		.compatible = "rockchip,px30-otp",
@@ -207,6 +248,10 @@ static const struct of_device_id rockchip_otp_match[] = {
 		.compatible = "rockchip,rk3308-otp",
 		.data = (void *)&px30_data,
 	},
+	{
+		.compatible = "rockchip,rv1126-otp",
+		.data = (void *)&rv1126_data,
+	},
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, rockchip_otp_match);
-- 
2.35.3

