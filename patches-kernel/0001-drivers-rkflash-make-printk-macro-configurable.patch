From 3cf664dd5738a6c594736db81315467a2f35acd2 Mon Sep 17 00:00:00 2001
From: Dingqiang Lin <jon.lin@rock-chips.com>
Date: Tue, 7 Aug 2018 15:43:37 +0800
Subject: [PATCH] drivers: rkflash: make printk macro configurable

Change-Id: If4b768f0ebe8186a79b08ec424fd0b70a79f9c83
Signed-off-by: Dingqiang Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl.h              |    5 +
 drivers/rkflash/rk_sftl_arm_v7.S       | 4648 +++++++++++-----------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S | 4938 ++++++++++++------------
 drivers/rkflash/rk_sftl_arm_v8.S       | 4100 ++++++++++----------
 drivers/rkflash/rkflash_blk.c          |    9 +
 drivers/rkflash/rkflash_debug.h        |    4 +-
 6 files changed, 6952 insertions(+), 6752 deletions(-)

diff --git a/drivers/rkflash/rk_sftl.h b/drivers/rkflash/rk_sftl.h
index a5d8f9661eba..0f0e0d5085f6 100644
--- a/drivers/rkflash/rk_sftl.h
+++ b/drivers/rkflash/rk_sftl.h
@@ -30,4 +30,9 @@ void *ftl_memset(void *s, int c, unsigned int n);
 void *ftl_memcpy(void *pv_to,
 		 const void *pv_from,
 		 unsigned int size);
+
+/*
+ * Function that needs to be defined
+ */
+void  __printf(1, 2)  sftl_printk(char *fmt, ...);
 #endif
diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index 9332ff8827c2..269c66693e1c 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -2,10 +2,44 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-08-07
  */
 	.file	"rk_sftl.c"
+	.syntax divided
+	.macro	it, cond
+	.endm
+	.macro	itt, cond
+	.endm
+	.macro	ite, cond
+	.endm
+	.macro	ittt, cond
+	.endm
+	.macro	itte, cond
+	.endm
+	.macro	itet, cond
+	.endm
+	.macro	itee, cond
+	.endm
+	.macro	itttt, cond
+	.endm
+	.macro	ittte, cond
+	.endm
+	.macro	ittet, cond
+	.endm
+	.macro	ittee, cond
+	.endm
+	.macro	itett, cond
+	.endm
+	.macro	itete, cond
+	.endm
+	.macro	iteet, cond
+	.endm
+	.macro	iteee, cond
+	.endm
+
 	.global	__udivsi3
+	.arm
+	.syntax unified
 	.text
 	.align	2
 	.syntax unified
@@ -374,7 +408,7 @@ FtlBbmMapBadBlock:
 	str	r1, [sp]
 	mov	r1, r5
 	ldr	r0, .L39+4
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #158]
 	mov	r0, #0
 	add	r3, r3, #1
@@ -921,7 +955,7 @@ INSERT_DATA_LIST:
 	mov	r2, #221
 	ldr	r1, .L117+4
 	ldr	r0, .L117+8
-	bl	printk
+	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
 .L118:
 	.align	2
@@ -1027,7 +1061,7 @@ INSERT_FREE_LIST:
 	mov	r2, #214
 	ldr	r1, .L130+4
 	ldr	r0, .L130+8
-	bl	printk
+	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
 .L131:
 	.align	2
@@ -1064,7 +1098,7 @@ List_remove_node:
 	movw	r2, #379
 	ldr	r1, .L139+4
 	ldr	r0, .L139+8
-	bl	printk
+	bl	sftl_printk
 .L133:
 	ldr	r3, [r8]
 	ldrh	r2, [r7, r6]
@@ -1258,7 +1292,7 @@ List_update_data_list:
 	movw	r2, #470
 	ldr	r1, .L172+4
 	ldr	r0, .L172+8
-	bl	printk
+	bl	sftl_printk
 .L164:
 	ldr	r3, [r8, r5, lsl #3]
 	cmn	r3, #1
@@ -1286,7 +1320,7 @@ List_update_data_list:
 	movw	r2, #481
 	ldr	r1, .L172+4
 	ldr	r0, .L172+8
-	bl	printk
+	bl	sftl_printk
 .L166:
 	ldrh	r3, [r4]
 	mov	r0, r5
@@ -1351,7 +1385,7 @@ select_l2p_ram_region:
 	mov	r2, #784
 	ldr	r1, .L184+8
 	ldr	r0, .L184+12
-	bl	printk
+	bl	sftl_printk
 	b	.L176
 .L177:
 	add	r1, r1, #1
@@ -1628,7 +1662,7 @@ make_superblock:
 	movw	r2, #2097
 	ldr	r1, .L224+4
 	ldr	r0, .L224+8
-	bl	printk
+	bl	sftl_printk
 .L220:
 	ldrh	r9, [r6, #32]
 	add	r7, r4, #16
@@ -2490,7 +2524,7 @@ GetSwlReplaceBlock:
 	mov	r2, r7
 	str	r3, [sp]
 	ldr	r3, [r4, #2564]
-	bl	printk
+	bl	sftl_printk
 	mov	r3, #1
 	str	r3, [r4, #3160]
 	b	.L276
@@ -2571,7 +2605,7 @@ get_new_active_ppa:
 	movw	r2, #2707
 	ldr	r1, .L310
 	ldr	r0, .L310+4
-	bl	printk
+	bl	sftl_printk
 .L297:
 	ldr	r5, .L310+8
 	ldrh	r2, [r4, #2]
@@ -2581,7 +2615,7 @@ get_new_active_ppa:
 	movw	r2, #2708
 	ldr	r1, .L310
 	ldr	r0, .L310+4
-	bl	printk
+	bl	sftl_printk
 .L298:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
@@ -2589,7 +2623,7 @@ get_new_active_ppa:
 	movw	r2, #2709
 	ldr	r1, .L310
 	ldr	r0, .L310+4
-	bl	printk
+	bl	sftl_printk
 .L299:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	mov	r3, #0
@@ -2635,7 +2669,7 @@ get_new_active_ppa:
 	movw	r2, #2730
 	ldr	r1, .L310
 	ldr	r0, .L310+4
-	bl	printk
+	bl	sftl_printk
 .L296:
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
@@ -2959,7 +2993,7 @@ FtlGcRefreshBlock:
 	uxth	r4, r0
 	ldr	r0, .L353
 	mov	r1, r4
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, .L353+4
 	movw	ip, #3202
 	ldrh	lr, [r3, ip]
@@ -3005,7 +3039,7 @@ FtlGcMarkBadPhyBlk:
 	mov	r7, r0
 	ldrh	r1, [r4, r6]
 	ldr	r0, .L359+4
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r7
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, r6]
@@ -3130,25 +3164,60 @@ rknand_print_hex:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #16
-	mul	r3, r2, r3
-	mov	ip, #0
-	str	r2, [sp]
-	str	ip, [sp, #12]
-	mov	r2, #2
-	stmib	sp, {r1, r3}
-	mov	r1, r0
-	mov	r3, #16
-	ldr	r0, .L374
-	bl	print_hex_dump
-	sub	sp, fp, #12
-	ldmfd	sp, {fp, sp, pc}
+	mov	r6, #0
+	mov	r10, r0
+	mov	r7, r1
+	mov	r8, r2
+	mov	r9, r3
+	mov	r5, r6
+	mov	r4, r6
+.L374:
+	cmp	r4, r9
+	bcc	.L380
+	ldr	r0, .L382
+	bl	sftl_printk
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L380:
+	cmp	r5, #0
+	bne	.L375
+	mov	r3, r6
+	mov	r2, r7
+	mov	r1, r10
+	ldr	r0, .L382+4
+	bl	sftl_printk
 .L375:
+	cmp	r8, #4
+	ldreq	r1, [r7, r4, lsl #2]
+	ldreq	r0, .L382+8
+	beq	.L381
+	cmp	r8, #2
+	lsleq	r3, r4, #1
+	ldreq	r0, .L382+12
+	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
+	ldrheq	r1, [r7, r3]
+	ldrne	r0, .L382+16
+.L381:
+	add	r5, r5, #1
+	bl	sftl_printk
+	cmp	r5, #15
+	bls	.L379
+	mov	r5, #0
+	ldr	r0, .L382
+	bl	sftl_printk
+.L379:
+	add	r4, r4, #1
+	add	r6, r6, r8
+	b	.L374
+.L383:
 	.align	2
-.L374:
+.L382:
+	.word	.LC79
 	.word	.LC75
+	.word	.LC76
+	.word	.LC77
+	.word	.LC78
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
 	.global	FlashReadPages
@@ -3164,31 +3233,31 @@ FlashReadPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r6, #0
-	ldr	r5, .L394
+	ldr	r5, .L402
 	mov	r7, r1
-	ldr	r9, .L394+4
+	ldr	r9, .L402+4
 	mov	r4, r0
-	ldr	r10, .L394+8
+	ldr	r10, .L402+8
 	ldrh	r8, [r5, #12]
-.L377:
+.L385:
 	cmp	r6, r7
-	bne	.L384
+	bne	.L392
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L384:
+.L392:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L378
+	beq	.L386
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	bne	.L379
-.L378:
-	mov	r2, #76
+	bne	.L387
+.L386:
+	mov	r2, #101
 	mov	r1, r9
 	mov	r0, r10
-	bl	printk
-.L379:
+	bl	sftl_printk
+.L387:
 	sub	r2, fp, #48
 	sub	r1, fp, #44
 	mov	r0, r4
@@ -3202,7 +3271,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L381
+	bne	.L389
 	ldr	r3, [r4, #12]
 	ldr	r2, [r4, #8]
 	ldr	r1, [fp, #-44]
@@ -3213,27 +3282,27 @@ FlashReadPages:
 	add	r1, r8, r1
 	blx	ip
 	cmn	r0, #1
-	beq	.L382
+	beq	.L390
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	cmn	r2, #1
-	bne	.L381
+	bne	.L389
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L381
+	bne	.L389
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L381
-.L382:
+	beq	.L389
+.L390:
 	mvn	r3, #0
 	str	r3, [r4]
-.L381:
+.L389:
 	add	r6, r6, #1
 	add	r4, r4, #20
-	b	.L377
-.L395:
+	b	.L385
+.L403:
 	.align	2
-.L394:
+.L402:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
 	.word	.LC1
@@ -3250,31 +3319,31 @@ FtlLoadFactoryBbt:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L406
+	ldr	r4, .L414
 	mov	r6, #0
 	mvn	r9, #0
-	ldr	r10, .L406+4
+	ldr	r10, .L414+4
 	ldr	r3, [r4, #3280]
 	add	r7, r4, #162
 	ldr	r8, [r4, #3284]
 	str	r3, [r4, #3268]
 	str	r8, [r4, #3272]
-.L397:
+.L405:
 	ldrh	r3, [r4, #54]
 	cmp	r6, r3
-	bcc	.L402
+	bcc	.L410
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L402:
+.L410:
 	ldrh	r5, [r4, #98]
 	strh	r9, [r7, #2]!	@ movhi
-.L399:
+.L407:
 	ldrh	r3, [r4, #98]
 	sub	r5, r5, #1
 	uxth	r5, r5
 	sub	r2, r3, #16
 	cmp	r5, r2
-	ble	.L400
+	ble	.L408
 	mla	r3, r6, r3, r5
 	mov	r2, #1
 	mov	r1, r2
@@ -3284,18 +3353,18 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	beq	.L399
+	beq	.L407
 	ldrh	r2, [r8]
 	movw	r3, #61664
 	cmp	r2, r3
-	bne	.L399
+	bne	.L407
 	strh	r5, [r7]	@ movhi
-.L400:
+.L408:
 	add	r6, r6, #1
-	b	.L397
-.L407:
+	b	.L405
+.L415:
 	.align	2
-.L406:
+.L414:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
@@ -3313,7 +3382,7 @@ FtlGetLastWrittenPage:
 	sub	fp, ip, #4
 	sub	sp, sp, #84
 	cmp	r1, #1
-	ldr	r3, .L416
+	ldr	r3, .L424
 	lsl	r6, r0, #10
 	mov	r2, r1
 	mov	r7, r1
@@ -3321,7 +3390,7 @@ FtlGetLastWrittenPage:
 	ldrheq	r4, [r3, #104]
 	mov	r1, #1
 	ldrhne	r4, [r3, #102]
-	ldr	r3, .L416+4
+	ldr	r3, .L424+4
 	sub	r4, r4, #1
 	sxth	r5, r4
 	str	r3, [fp, #-108]
@@ -3333,12 +3402,12 @@ FtlGetLastWrittenPage:
 	ldr	r3, [fp, #-96]
 	cmn	r3, #1
 	moveq	r8, #0
-	beq	.L412
-.L411:
+	beq	.L420
+.L419:
 	mov	r0, r5
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L415:
+.L423:
 	add	r4, r8, r5
 	mov	r2, r7
 	add	r4, r4, r4, lsr #31
@@ -3351,22 +3420,22 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-96]
 	cmn	r3, #1
-	bne	.L413
+	bne	.L421
 	ldr	r3, [fp, #-92]
 	cmn	r3, #1
 	subeq	r4, r4, #1
 	sxtheq	r5, r4
-	beq	.L412
-.L413:
+	beq	.L420
+.L421:
 	add	r4, r4, #1
 	sxth	r8, r4
-.L412:
+.L420:
 	cmp	r8, r5
-	ble	.L415
-	b	.L411
-.L417:
+	ble	.L423
+	b	.L419
+.L425:
 	.align	2
-.L416:
+.L424:
 	.word	.LANCHOR0
 	.word	ftl_temp_buf
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -3384,7 +3453,7 @@ FlashProgPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #32
 	mov	r9, r3
-	ldr	r6, .L448
+	ldr	r6, .L456
 	mov	r10, r1
 	mov	r8, r2
 	mov	r4, r0
@@ -3392,28 +3461,28 @@ FlashProgPages:
 	mov	r7, #0
 	ldrh	r3, [r6, #12]
 	str	r3, [fp, #-72]
-.L419:
+.L427:
 	cmp	r7, r10
-	bne	.L427
+	bne	.L435
 	cmp	r9, #0
-	bne	.L434
-.L447:
+	bne	.L442
+.L455:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L427:
+.L435:
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	beq	.L420
+	beq	.L428
 	ldr	r3, [r5, #12]
 	cmp	r3, #0
-	bne	.L421
-.L420:
-	mov	r2, #106
-	ldr	r1, .L448+4
-	ldr	r0, .L448+8
-	bl	printk
-.L421:
+	bne	.L429
+.L428:
+	mov	r2, #131
+	ldr	r1, .L456+4
+	ldr	r0, .L456+8
+	bl	sftl_printk
+.L429:
 	sub	r2, fp, #68
 	sub	r1, fp, #64
 	mov	r0, r5
@@ -3430,7 +3499,7 @@ FlashProgPages:
 	strne	r3, [r5]
 	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L425
+	bne	.L433
 	ldr	r0, [fp, #-72]
 	ldr	r3, [r5, #12]
 	ldr	r2, [r5, #8]
@@ -3444,11 +3513,11 @@ FlashProgPages:
 	cmp	r0, #0
 	mvnne	r3, #0
 	strne	r3, [r5]
-.L425:
+.L433:
 	add	r7, r7, #1
 	add	r5, r5, #20
-	b	.L419
-.L432:
+	b	.L427
+.L440:
 	mov	r3, #0
 	mov	r2, r8
 	str	r3, [r9]
@@ -3462,60 +3531,60 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-60]
 	cmn	r3, #1
-	bne	.L429
+	bne	.L437
 	ldr	r1, [r4, #4]
-	ldr	r0, .L448+12
+	ldr	r0, .L456+12
 	str	r3, [fp, #-72]
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [fp, #-72]
 	str	r3, [r4]
-.L429:
+.L437:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L430
+	beq	.L438
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3288]
 	cmp	r2, r3
-	beq	.L430
+	beq	.L438
 	ldr	r1, [r4, #4]
-	ldr	r0, .L448+16
-	bl	printk
+	ldr	r0, .L456+16
+	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L430:
+.L438:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L431
+	beq	.L439
 	ldr	r2, [r3]
 	ldr	r3, [r9]
 	cmp	r2, r3
-	beq	.L431
+	beq	.L439
 	ldr	r1, [r4, #4]
-	ldr	r0, .L448+20
-	bl	printk
+	ldr	r0, .L456+20
+	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L431:
+.L439:
 	add	r5, r5, #1
 	add	r4, r4, #20
-.L428:
+.L436:
 	cmp	r7, r5
-	bne	.L432
-	b	.L447
-.L434:
+	bne	.L440
+	b	.L455
+.L442:
 	mov	r5, #0
-	ldr	r9, .L448+24
-	ldr	r10, .L448+28
-	b	.L428
-.L449:
+	ldr	r9, .L456+24
+	ldr	r10, .L456+28
+	b	.L436
+.L457:
 	.align	2
-.L448:
+.L456:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+145
 	.word	.LC1
-	.word	.LC76
-	.word	.LC77
-	.word	.LC78
+	.word	.LC80
+	.word	.LC81
+	.word	.LC82
 	.word	check_buf
 	.word	.LANCHOR0+3288
 	.size	FlashProgPages, .-FlashProgPages
@@ -3533,17 +3602,17 @@ FlashEraseBlocks:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r6, #0
-	ldr	r5, .L461
+	ldr	r5, .L469
 	mov	r7, r2
 	mov	r4, r0
 	ldrh	r8, [r5, #12]
-.L451:
+.L459:
 	cmp	r6, r7
-	bne	.L457
+	bne	.L465
 	mov	r0, #0
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L457:
+.L465:
 	sub	r2, fp, #40
 	sub	r1, fp, #36
 	mov	r0, r4
@@ -3558,7 +3627,7 @@ FlashEraseBlocks:
 	strne	r3, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L455
+	bne	.L463
 	ldr	r1, [fp, #-36]
 	ldr	r3, [r5, #3248]
 	ldrb	r0, [fp, #-40]	@ zero_extendqisi2
@@ -3567,13 +3636,13 @@ FlashEraseBlocks:
 	cmp	r0, #0
 	mvnne	r3, #0
 	strne	r3, [r4]
-.L455:
+.L463:
 	add	r6, r6, #1
 	add	r4, r4, #20
-	b	.L451
-.L462:
+	b	.L459
+.L470:
 	.align	2
-.L461:
+.L469:
 	.word	.LANCHOR0
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
@@ -3595,12 +3664,12 @@ FtlFreeSysBlkQueueIn:
 	uxth	r3, r3
 	cmp	r3, r2
 	ldmfdhi	sp, {r4, r5, r6, fp, sp, pc}
-	ldr	r4, .L472
+	ldr	r4, .L480
 	ldrh	r3, [r4, #218]
 	cmp	r3, #1024
 	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
 	cmp	r1, #0
-	beq	.L465
+	beq	.L473
 	mov	r0, r5
 	bl	P2V_block_in_plane
 	mov	r6, r0
@@ -3618,7 +3687,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r4, #2560]
 	add	r3, r3, #1
 	str	r3, [r4, #2560]
-.L465:
+.L473:
 	ldrh	r3, [r4, #218]
 	add	r3, r3, #1
 	strh	r3, [r4, #218]	@ movhi
@@ -3629,9 +3698,9 @@ FtlFreeSysBlkQueueIn:
 	strh	r5, [r2, #220]	@ movhi
 	strh	r3, [r4, #216]	@ movhi
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L473:
+.L481:
 	.align	2
-.L472:
+.L480:
 	.word	.LANCHOR0
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
@@ -3652,34 +3721,34 @@ FtlLowFormatEraseBlock:
 	uxtb	r6, r1
 	str	r3, [fp, #-48]
 	mov	r5, r10
-	ldr	r3, .L516
+	ldr	r3, .L524
 	mov	r4, r10
 	ldr	r2, [fp, #-48]
 	mov	r9, #20
 	mov	r8, r3
 	str	r2, [r3, #3804]
-.L475:
+.L483:
 	ldrh	r1, [r8, #32]
 	uxth	r2, r10
 	cmp	r1, r2
-	bhi	.L479
+	bhi	.L487
 	cmp	r5, #0
-	beq	.L474
+	beq	.L482
 	mov	r7, #0
 	mov	r9, #20
 	mov	r2, r5
 	mov	r1, #0
 	ldr	r0, [r8, #3800]
 	bl	FlashEraseBlocks
-.L482:
+.L490:
 	uxth	r2, r7
 	cmp	r5, r2
-	bhi	.L484
-.L485:
+	bhi	.L492
+.L493:
 	cmp	r6, #0
 	ldrhne	r3, [r8, #104]
 	moveq	r3, #6
-	ldr	r8, .L516
+	ldr	r8, .L524
 	streq	r3, [fp, #-60]
 	moveq	r3, #1
 	strne	r3, [fp, #-52]
@@ -3692,16 +3761,16 @@ FtlLowFormatEraseBlock:
 	mov	r3, #0
 	streq	r6, [fp, #-56]
 	str	r3, [fp, #-44]
-.L494:
+.L502:
 	mov	r7, #0
 	mov	r5, r7
-.L486:
+.L494:
 	ldrh	r1, [r8, #32]
 	uxth	r3, r7
 	cmp	r1, r3
-	bhi	.L489
+	bhi	.L497
 	cmp	r5, #0
-	beq	.L474
+	beq	.L482
 	ldr	r2, [fp, #-56]
 	mov	r3, #1
 	mov	r1, r5
@@ -3709,10 +3778,10 @@ FtlLowFormatEraseBlock:
 	bl	FlashProgPages
 	mov	r9, #0
 	mov	r2, #20
-.L491:
+.L499:
 	uxth	r3, r9
 	cmp	r5, r3
-	bhi	.L493
+	bhi	.L501
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-60]
 	add	r7, r3, r2
@@ -3721,13 +3790,13 @@ FtlLowFormatEraseBlock:
 	ldr	r2, [fp, #-44]
 	ldr	r3, [fp, #-52]
 	cmp	r3, r2
-	bhi	.L494
+	bhi	.L502
 	mov	r7, #0
 	mov	r9, #20
-.L495:
+.L503:
 	uxth	r3, r7
 	cmp	r5, r3
-	bhi	.L497
+	bhi	.L505
 	ldr	r3, [fp, #-48]
 	adds	r6, r6, #0
 	movne	r6, #1
@@ -3735,16 +3804,16 @@ FtlLowFormatEraseBlock:
 	movhi	r8, r6
 	orrls	r8, r6, #1
 	cmp	r8, #0
-	beq	.L474
+	beq	.L482
 	mov	r2, r5
 	ldr	r1, [fp, #-56]
 	ldr	r0, [r10, #3800]
 	bl	FlashEraseBlocks
-.L474:
+.L482:
 	mov	r0, r4
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L479:
+.L487:
 	uxth	r2, r10
 	ldr	r0, [r8, #3800]
 	mov	r3, #0
@@ -3756,17 +3825,17 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r7, r0
-	beq	.L476
+	beq	.L484
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L477
-.L476:
+	bne	.L485
+.L484:
 	mov	r0, r7
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	bne	.L477
+	bne	.L485
 	ldr	r1, [r8, #3800]
 	lsl	r7, r7, #10
 	ldr	r2, [r8, #3808]
@@ -3784,25 +3853,25 @@ FtlLowFormatEraseBlock:
 	bic	r2, r2, #3
 	add	r2, r0, r2
 	str	r2, [r1, #12]
-.L477:
+.L485:
 	add	r10, r10, #1
-	b	.L475
-.L484:
+	b	.L483
+.L492:
 	mul	r2, r9, r7
 	ldr	r1, [r8, #3800]
 	add	r0, r1, r2
 	ldr	r2, [r1, r2]
 	cmn	r2, #1
-	bne	.L483
+	bne	.L491
 	ldr	r0, [r0, #4]
 	add	r4, r4, #1
 	uxth	r4, r4
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L483:
+.L491:
 	add	r7, r7, #1
-	b	.L482
-.L489:
+	b	.L490
+.L497:
 	uxth	r3, r7
 	mov	r2, #20
 	ldr	r0, [r8, #3800]
@@ -3815,15 +3884,15 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r6, #0
 	mov	r9, r0
-	beq	.L487
+	beq	.L495
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L488
-.L487:
+	bne	.L496
+.L495:
 	mov	r0, r9
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L488
+	bne	.L496
 	ldr	r1, [r8, #3800]
 	mov	r3, #20
 	mla	r1, r3, r5, r1
@@ -3843,16 +3912,16 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L488:
+.L496:
 	add	r7, r7, #1
-	b	.L486
-.L493:
+	b	.L494
+.L501:
 	mul	r3, r2, r9
 	ldr	r1, [r10, #3800]
 	add	r0, r1, r3
 	ldr	r3, [r1, r3]
 	cmp	r3, #0
-	beq	.L492
+	beq	.L500
 	ldr	r0, [r0, #4]
 	add	r4, r4, #1
 	str	r2, [fp, #-64]
@@ -3860,28 +3929,28 @@ FtlLowFormatEraseBlock:
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	ldr	r2, [fp, #-64]
-.L492:
+.L500:
 	add	r9, r9, #1
-	b	.L491
-.L497:
+	b	.L499
+.L505:
 	cmp	r6, #0
-	beq	.L496
+	beq	.L504
 	mul	r3, r9, r7
 	ldr	r2, [r10, #3800]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L496
+	bne	.L504
 	ldr	r0, [r1, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L496:
+.L504:
 	add	r7, r7, #1
-	b	.L495
-.L517:
+	b	.L503
+.L525:
 	.align	2
-.L516:
+.L524:
 	.word	.LANCHOR0
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
@@ -3896,12 +3965,12 @@ FtlFreeSysBlkQueueOut:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L525
-	ldr	r6, .L525+4
-.L519:
+	ldr	r4, .L533
+	ldr	r6, .L533+4
+.L527:
 	ldrh	r1, [r4, #218]
 	cmp	r1, #0
-	beq	.L520
+	beq	.L528
 	ldrh	r3, [r4, #214]
 	sub	r1, r1, #1
 	strh	r1, [r4, #218]	@ movhi
@@ -3931,26 +4000,26 @@ FtlFreeSysBlkQueueOut:
 	sub	r3, r5, #1
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L524
+	bhi	.L529
+	mov	r0, r5
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L528:
+	ldr	r0, .L533+8
+	bl	sftl_printk
+.L531:
+	b	.L531
+.L529:
 	ldrh	r2, [r4, #218]
 	mov	r1, r5
 	mov	r0, r6
-	bl	printk
-	b	.L519
-.L520:
-	ldr	r0, .L525+8
-	bl	printk
-.L523:
-	b	.L523
-.L524:
-	mov	r0, r5
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L526:
+	bl	sftl_printk
+	b	.L527
+.L534:
 	.align	2
-.L525:
+.L533:
 	.word	.LANCHOR0
-	.word	.LC80
-	.word	.LC79
+	.word	.LC84
+	.word	.LC83
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
 	.global	ftl_map_blk_alloc_new_blk
@@ -3968,16 +4037,16 @@ ftl_map_blk_alloc_new_blk:
 	mov	r4, r0
 	mov	r3, #0
 	ldr	r2, [r0, #12]
-.L528:
+.L536:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L531
+	bcs	.L539
 	mov	r7, r2
 	add	r3, r3, #1
 	ldrh	r6, [r7]
 	add	r2, r2, #2
 	cmp	r6, #0
-	bne	.L528
+	bne	.L536
 	bl	FtlFreeSysBlkQueueOut
 	sub	r3, r0, #1
 	movw	r2, #65533
@@ -3985,14 +4054,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L529
-	ldr	r3, .L535
-	ldr	r0, .L535+4
+	bls	.L537
+	ldr	r3, .L543
+	ldr	r0, .L543+4
 	ldrh	r2, [r3, #218]
-	bl	printk
-.L530:
-	b	.L530
-.L529:
+	bl	sftl_printk
+.L538:
+	b	.L538
+.L537:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -4001,22 +4070,22 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L531:
+.L539:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L533
+	bhi	.L541
 	movw	r2, #581
-	ldr	r1, .L535+8
-	ldr	r0, .L535+12
-	bl	printk
-.L533:
+	ldr	r1, .L543+8
+	ldr	r0, .L543+12
+	bl	sftl_printk
+.L541:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L536:
+.L544:
 	.align	2
-.L535:
+.L543:
 	.word	.LANCHOR0
-	.word	.LC81
+	.word	.LC85
 	.word	.LANCHOR1+160
 	.word	.LC1
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
@@ -4036,8 +4105,8 @@ FlashTestBlk:
 	uxth	r4, r0
 	cmp	r4, #11
 	movls	r4, #0
-	bls	.L537
-	ldr	r5, .L540
+	bls	.L545
+	ldr	r5, .L548
 	sub	r0, fp, #84
 	mov	r2, #32
 	mov	r1, #165
@@ -4045,7 +4114,7 @@ FlashTestBlk:
 	lsl	r4, r4, #10
 	str	r5, [fp, #-96]
 	bl	memset
-	ldr	r3, .L540+4
+	ldr	r3, .L548+4
 	mov	r2, #1
 	mov	r1, r2
 	sub	r0, fp, #104
@@ -4066,13 +4135,13 @@ FlashTestBlk:
 	movne	r4, #1
 	rsb	r4, r4, #0
 	bl	FlashEraseBlocks
-.L537:
+.L545:
 	mov	r0, r4
 	sub	sp, fp, #20
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L541:
+.L549:
 	.align	2
-.L540:
+.L548:
 	.word	ftl_temp_buf
 	.word	1515870810
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -4088,7 +4157,7 @@ FlashGetBadBlockList:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L549
+	ldr	r5, .L557
 	mov	r4, r0
 	mov	r6, r1
 	mov	r2, #256
@@ -4100,30 +4169,30 @@ FlashGetBadBlockList:
 	blx	r3
 	uxth	r0, r0
 	cmp	r0, #50
-	bls	.L543
+	bls	.L551
 	mov	r2, #256
 	mov	r1, #255
 	mov	r0, r4
 	bl	memset
 	mov	r0, #0
-.L543:
+.L551:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
 	moveq	r3, r4
 	addeq	r1, r3, r0, lsl #1
-	beq	.L545
+	beq	.L553
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L546:
+.L554:
 	ldrh	r2, [r3]
 	lsr	r2, r2, #1
 	strh	r2, [r3], #2	@ movhi
-.L545:
+.L553:
 	cmp	r3, r1
-	bne	.L546
+	bne	.L554
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L550:
+.L558:
 	.align	2
-.L549:
+.L557:
 	.word	.LANCHOR0
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
@@ -4140,9 +4209,9 @@ ftl_memset:
 	sub	fp, ip, #4
 	cmp	r2, #0
 	mov	r4, r0
-	beq	.L552
+	beq	.L560
 	bl	memset
-.L552:
+.L560:
 	mov	r0, r4
 	ldmfd	sp, {r4, fp, sp, pc}
 	.size	ftl_memset, .-ftl_memset
@@ -4158,7 +4227,7 @@ FtlMemInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L657
+	ldr	r4, .L665
 	movw	r3, #65535
 	movw	r2, #3202
 	mov	r5, #0
@@ -4275,7 +4344,7 @@ FtlMemInit:
 	bl	ftl_malloc
 	str	r0, [r4, #3856]
 	ldrh	r0, [r4, r7]
-	ldr	r3, .L657+4
+	ldr	r3, .L665+4
 	add	r0, r0, #544
 	add	r0, r0, #3
 	lsr	r0, r0, #9
@@ -4363,141 +4432,141 @@ FtlMemInit:
 	str	r0, [r4, #180]
 	lsl	r2, r2, #2
 	mov	r1, r2
-.L557:
+.L565:
 	cmp	r3, lr
-	bcc	.L558
-	ldr	r2, .L657+8
+	bcc	.L566
+	ldr	r2, .L665+8
 	mov	r1, #0
 	add	r3, r2, r3, lsl #2
 	add	r2, r2, #56
 	add	r3, r3, #24
-.L559:
+.L567:
 	cmp	r2, r3
-	bne	.L560
+	bne	.L568
 	ldr	r3, [r4, #3868]
 	cmp	r3, #0
-	bne	.L561
-.L563:
-	ldr	r1, .L657+12
-	ldr	r0, .L657+16
-	bl	printk
+	bne	.L569
+.L571:
+	ldr	r1, .L665+12
+	ldr	r0, .L665+16
+	bl	sftl_printk
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L558:
+.L566:
 	ldr	r0, [r4, #180]
 	add	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [ip, #4]!
-	b	.L557
-.L560:
+	b	.L565
+.L568:
 	str	r1, [r3, #4]!
-	b	.L559
-.L561:
+	b	.L567
+.L569:
 	ldr	r3, [r4, #3872]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3888]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3892]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3896]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #2316]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #180]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3832]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3840]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3800]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3836]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3280]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3844]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3848]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3172]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3816]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3808]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3168]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3284]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3812]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #3856]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, .L657
+	beq	.L571
+	ldr	r3, .L665
 	ldr	r2, [r3, #3876]
 	cmp	r2, #0
-	beq	.L563
+	beq	.L571
 	ldr	r2, [r3, #3880]
 	cmp	r2, #0
-	beq	.L563
+	beq	.L571
 	ldr	r3, [r3, #3884]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L571
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L658:
+.L666:
 	.align	2
-.L657:
+.L665:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+152
 	.word	.LANCHOR1+186
-	.word	.LC82
+	.word	.LC86
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -4511,33 +4580,33 @@ FtlBbt2Bitmap:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r6, .L665
+	ldr	r6, .L673
 	movw	r3, #3900
 	mov	r4, r0
-	ldr	r8, .L665+4
+	ldr	r8, .L673+4
 	sub	r5, r4, #2
 	ldrh	r2, [r6, r3]
 	add	r4, r4, #1020
-	ldr	r9, .L665+8
+	ldr	r9, .L673+8
 	mov	r7, r1
 	add	r4, r4, #2
 	mov	r1, #0
 	mov	r0, r7
 	lsl	r2, r2, #2
 	bl	ftl_memset
-.L662:
+.L670:
 	ldrh	r3, [r5, #2]
 	movw	r2, #65535
 	cmp	r3, r2
 	ldmfdeq	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
 	ldrh	r2, [r6, #98]
 	cmp	r2, r3
-	bhi	.L661
+	bhi	.L669
 	mov	r2, #74
 	mov	r1, r8
 	mov	r0, r9
-	bl	printk
-.L661:
+	bl	sftl_printk
+.L669:
 	ldrh	r3, [r5, #2]!
 	mov	r0, #1
 	cmp	r4, r5
@@ -4546,11 +4615,11 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r3, r2, r0, lsl r3
 	str	r3, [r7, r1, lsl #2]
-	bne	.L662
+	bne	.L670
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L666:
+.L674:
 	.align	2
-.L665:
+.L673:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+197
 	.word	.LC1
@@ -4567,22 +4636,22 @@ load_l2p_region:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L673
+	ldr	r4, .L681
 	uxth	r6, r0
 	uxth	r8, r1
 	ldrh	r3, [r4, #136]
 	cmp	r3, r6
-	bcs	.L668
+	bcs	.L676
 	mov	r2, #492
-	ldr	r1, .L673+4
-	ldr	r0, .L673+8
-	bl	printk
-.L668:
+	ldr	r1, .L681+4
+	ldr	r0, .L681+8
+	bl	sftl_printk
+.L676:
 	ldr	r3, [r4, #3888]
 	mov	r5, #12
 	ldr	r7, [r3, r6, lsl #2]
 	cmp	r7, #0
-	bne	.L669
+	bne	.L677
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2492]
 	ldrh	r2, [r4, #110]
@@ -4595,14 +4664,14 @@ load_l2p_region:
 	ldr	r3, [r4, #2492]
 	add	r5, r3, r5
 	str	r7, [r5, #4]
-.L670:
+.L678:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L669:
+.L677:
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2492]
 	mov	r2, #1
-	ldr	r0, .L673+12
+	ldr	r0, .L681+12
 	mov	r1, r2
 	str	r7, [r4, #3264]
 	add	r3, r3, r5
@@ -4614,46 +4683,46 @@ load_l2p_region:
 	ldr	r8, [r4, #3272]
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L671
+	beq	.L679
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L673+16
-	bl	printk
+	ldr	r0, .L681+16
+	bl	sftl_printk
 	mov	r3, #4
 	ldr	r1, [r4, #3272]
 	mov	r2, r3
-	ldr	r0, .L673+20
+	ldr	r0, .L681+20
 	bl	rknand_print_hex
 	ldrh	r3, [r4, #136]
 	mov	r2, #4
 	ldr	r1, [r4, #3888]
-	ldr	r0, .L673+24
+	ldr	r0, .L681+24
 	bl	rknand_print_hex
-.L671:
+.L679:
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L672
+	beq	.L680
 	movw	r2, #513
-	ldr	r1, .L673+4
-	ldr	r0, .L673+8
-	bl	printk
-.L672:
+	ldr	r1, .L681+4
+	ldr	r0, .L681+8
+	bl	sftl_printk
+.L680:
 	ldr	r3, [r4, #2492]
 	mov	r1, #0
 	add	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L670
-.L674:
+	b	.L678
+.L682:
 	.align	2
-.L673:
+.L681:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+211
 	.word	.LC1
 	.word	.LANCHOR0+3260
-	.word	.LC83
-	.word	.LC84
-	.word	.LC85
+	.word	.LC87
+	.word	.LC88
+	.word	.LC89
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
 	.global	ftl_free_no_use_map_blk
@@ -4678,35 +4747,35 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r2, #0
-.L676:
+.L684:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L680
+	bhi	.L688
 	ldrh	r2, [r5]
 	mov	r7, #0
-	ldr	ip, .L689
+	ldr	ip, .L697
 	mov	r10, r7
-.L681:
+.L689:
 	ldrh	r1, [r4, #10]
 	uxth	r3, r7
 	cmp	r1, r3
-	bhi	.L685
+	bhi	.L693
 	mov	r0, r10
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L680:
+.L688:
 	uxth	r3, r2
 	mov	r1, #0
 	ldr	r0, [r6, r3, lsl #2]
 	ubfx	r0, r0, #10, #16
-.L677:
+.L685:
 	ldrh	ip, [r4, #10]
 	uxth	r3, r1
 	cmp	ip, r3
 	addls	r2, r2, #1
-	bls	.L676
-.L679:
+	bls	.L684
+.L687:
 	uxth	r3, r1
 	add	r1, r1, #1
 	lsl	r3, r3, #1
@@ -4715,28 +4784,28 @@ ftl_free_no_use_map_blk:
 	ldrheq	ip, [r5, r3]
 	addeq	ip, ip, #1
 	strheq	ip, [r5, r3]	@ movhi
-	b	.L677
-.L685:
+	b	.L685
+.L693:
 	ldrh	r1, [r4]
 	uxth	r6, r7
 	cmp	r1, r3
-	bne	.L682
+	bne	.L690
 	ldrh	r0, [r4, #2]
 	ldrh	r1, [ip, #104]
 	cmp	r0, r1
 	lslcc	r0, r6, #1
 	strhcc	r1, [r5, r0]	@ movhi
-.L682:
+.L690:
 	lsl	r6, r6, #1
 	ldrh	r8, [r5, r6]
 	cmp	r2, r8
 	movhi	r10, r3
 	movhi	r2, r8
 	cmp	r8, #0
-	bne	.L684
+	bne	.L692
 	ldrh	r0, [r9, r6]
 	cmp	r0, #0
-	beq	.L684
+	beq	.L692
 	mov	r1, #1
 	str	ip, [fp, #-48]
 	str	r2, [fp, #-44]
@@ -4747,12 +4816,12 @@ ftl_free_no_use_map_blk:
 	ldr	r2, [fp, #-44]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L684:
+.L692:
 	add	r7, r7, #1
-	b	.L681
-.L690:
+	b	.L689
+.L698:
 	.align	2
-.L689:
+.L697:
 	.word	.LANCHOR0
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
@@ -4772,15 +4841,15 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L692
+	bne	.L700
 	ldrh	r3, [r0, #8]
 	cmp	r3, #0
-	beq	.L693
+	beq	.L701
 	movw	r2, #641
-	ldr	r1, .L701
-	ldr	r0, .L701+4
-	bl	printk
-.L693:
+	ldr	r1, .L709
+	ldr	r0, .L709+4
+	bl	sftl_printk
+.L701:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -4792,17 +4861,17 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	add	r3, r3, #1
 	str	r3, [r4, #28]
-.L694:
+.L702:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L692:
+.L700:
 	lsl	r3, r3, #1
 	ldr	r2, [r0, #28]
 	ldr	r6, [r0, #24]
 	mov	r1, #255
 	ldrh	r7, [r5, r3]
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L701+8
+	ldr	r5, .L709+8
 	orr	r3, r3, r7, lsl #10
 	str	r3, [r5, #3264]
 	ldr	r3, [r5, #3280]
@@ -4810,7 +4879,7 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r5, #3284]
 	str	r3, [r5, #3272]
 	str	r2, [r3, #4]
-	ldr	r2, .L701+12
+	ldr	r2, .L709+12
 	strh	r2, [r3, #8]	@ movhi
 	ldrh	r2, [r0, #4]
 	strh	r7, [r3, #2]	@ movhi
@@ -4821,27 +4890,27 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	r2, #0
 	mov	r3, r2
-.L695:
+.L703:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L697
+	bhi	.L705
 	mov	r2, #1
 	mov	r3, #0
 	mov	r1, r2
-	ldr	r0, .L701+16
+	ldr	r0, .L709+16
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L694
-.L697:
+	b	.L702
+.L705:
 	uxth	r1, r2
 	ldr	r0, [r6, r1, lsl #2]
 	cmp	r7, r0, lsr #10
-	bne	.L696
+	bne	.L704
 	ldr	r0, [r5, #3280]
 	add	r3, r3, #1
 	uxth	r3, r3
@@ -4850,12 +4919,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r1, [r5, #3280]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L696:
+.L704:
 	add	r2, r2, #1
-	b	.L695
-.L702:
+	b	.L703
+.L710:
 	.align	2
-.L701:
+.L709:
 	.word	.LANCHOR1+227
 	.word	.LC1
 	.word	.LANCHOR0
@@ -4874,13 +4943,13 @@ FtlMapWritePage:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r7, .L722
+	ldr	r7, .L730
 	mov	r4, r0
 	mov	r8, r1
 	mov	r9, r2
 	mov	r6, #0
 	mov	r5, r7
-.L704:
+.L712:
 	ldr	r3, [r7, #2524]
 	add	r3, r3, #1
 	str	r3, [r7, #2524]
@@ -4888,35 +4957,35 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L705
+	bge	.L713
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L706
-.L705:
+	bne	.L714
+.L713:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L706:
+.L714:
 	ldrh	r3, [r4]
 	ldr	r2, [r4, #12]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L707
+	bne	.L715
 	movw	r2, #699
-	ldr	r1, .L722+4
-	ldr	r0, .L722+8
-	bl	printk
-.L707:
+	ldr	r1, .L730+4
+	ldr	r0, .L730+8
+	bl	sftl_printk
+.L715:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L708
+	bcc	.L716
 	mov	r2, #700
-	ldr	r1, .L722+4
-	ldr	r0, .L722+8
-	bl	printk
-.L708:
+	ldr	r1, .L730+4
+	ldr	r0, .L730+8
+	bl	sftl_printk
+.L716:
 	ldrh	r3, [r4]
 	mov	r1, #16
 	ldr	r2, [r4, #12]
@@ -4931,7 +5000,7 @@ FtlMapWritePage:
 	bl	__memzero
 	ldr	r3, [r5, #3272]
 	ldr	r2, [r4, #28]
-	ldr	r0, .L722+12
+	ldr	r0, .L730+12
 	strh	r8, [r3, #8]	@ movhi
 	str	r2, [r3, #4]
 	ldrh	r2, [r4, #4]
@@ -4947,48 +5016,48 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3260]
 	cmn	r2, #1
-	bne	.L709
+	bne	.L717
 	ldr	r1, [r5, #3264]
 	add	r6, r6, #1
-	ldr	r0, .L722+16
+	ldr	r0, .L730+16
 	uxth	r6, r6
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #2]
 	cmp	r3, #2
 	ldrhls	r3, [r5, #104]
 	subls	r3, r3, #1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L711
+	bls	.L719
 	mov	r2, r6
 	ldr	r1, [r5, #3264]
-	ldr	r0, .L722+20
-	bl	printk
-.L712:
-	b	.L712
-.L711:
+	ldr	r0, .L730+20
+	bl	sftl_printk
+.L720:
+	b	.L720
+.L719:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L704
-.L721:
-	b	.L721
-.L709:
+	beq	.L712
+.L729:
+	b	.L729
+.L717:
 	cmp	r3, #1
-	beq	.L704
+	beq	.L712
 	ldr	r2, [r5, #3264]
 	mov	r0, #0
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r8, lsl #2]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L723:
+.L731:
 	.align	2
-.L722:
+.L730:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+258
 	.word	.LC1
 	.word	.LANCHOR0+3260
-	.word	.LC86
-	.word	.LC87
+	.word	.LC90
+	.word	.LC91
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
 	.global	ftl_map_blk_gc
@@ -5009,18 +5078,18 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	ldr	r5, .L736
+	ldr	r5, .L744
 	sub	r3, r3, #4
 	cmp	r2, r3
-	blt	.L725
+	blt	.L733
 	uxth	r0, r0
 	lsl	r0, r0, #1
 	ldrh	r8, [r6, r0]
 	cmp	r8, #0
-	beq	.L725
+	beq	.L733
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L725
+	bne	.L733
 	mov	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r6, r0]	@ movhi
@@ -5030,41 +5099,41 @@ ftl_map_blk_gc:
 	strh	r3, [r4, #8]	@ movhi
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bcc	.L726
+	bcc	.L734
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L726:
-	ldr	r10, .L736+4
+.L734:
+	ldr	r10, .L744+4
 	mov	r6, #0
-.L727:
+.L735:
 	ldrh	r2, [r4, #6]
 	uxth	r3, r6
 	cmp	r2, r3
-	bhi	.L731
+	bhi	.L739
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L725:
+.L733:
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bcc	.L732
+	bcc	.L740
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L732:
+.L740:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L731:
+.L739:
 	uxth	r7, r6
 	ldr	r2, [r9, r7, lsl #2]
 	cmp	r8, r2, lsr #10
-	bne	.L728
+	bne	.L736
 	ldr	ip, [r5, #3284]
 	ldr	r2, [r5, #3844]
-	ldr	r0, .L736+8
+	ldr	r0, .L744+8
 	str	ip, [r5, #3272]
 	str	r2, [r5, #3268]
 	ldr	r2, [r9, r7, lsl #2]
@@ -5078,27 +5147,27 @@ ftl_map_blk_gc:
 	ldr	r3, [fp, #-48]
 	ldrh	r2, [ip, #8]
 	cmp	r2, r3
-	beq	.L729
+	beq	.L737
 	movw	r2, #613
 	mov	r1, r10
-	ldr	r0, .L736+12
-	bl	printk
-.L729:
+	ldr	r0, .L744+12
+	bl	sftl_printk
+.L737:
 	ldr	r3, [r5, #3260]
 	cmn	r3, #1
 	moveq	r3, #0
 	streq	r3, [r9, r7, lsl #2]
-	beq	.L728
+	beq	.L736
 	ldr	r2, [r5, #3268]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L728:
+.L736:
 	add	r6, r6, #1
-	b	.L727
-.L737:
+	b	.L735
+.L745:
 	.align	2
-.L736:
+.L744:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+274
 	.word	.LANCHOR0+3260
@@ -5116,7 +5185,7 @@ flush_l2p_region:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L739
+	ldr	r5, .L747
 	uxth	r0, r0
 	mov	r4, #12
 	mul	r4, r4, r0
@@ -5133,9 +5202,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L740:
+.L748:
 	.align	2
-.L739:
+.L747:
 	.word	.LANCHOR0
 	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
@@ -5152,7 +5221,7 @@ log2phys:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mvn	r6, #0
-	ldr	r4, .L755
+	ldr	r4, .L763
 	mov	r7, r1
 	mov	r10, r2
 	ldrh	r3, [r4, #108]
@@ -5163,20 +5232,20 @@ log2phys:
 	uxth	r8, r9
 	uxth	r6, r6
 	cmp	r0, r3
-	bcc	.L742
+	bcc	.L750
 	mov	r2, #808
-	ldr	r1, .L755+4
-	ldr	r0, .L755+8
-	bl	printk
-.L742:
+	ldr	r1, .L763+4
+	ldr	r0, .L763+8
+	bl	sftl_printk
+.L750:
 	ldrh	r1, [r4, #138]
 	mov	r2, #0
 	ldr	r0, [r4, #2492]
 	mov	r3, #12
-.L743:
+.L751:
 	uxth	r5, r2
 	cmp	r5, r1
-	bcc	.L748
+	bcc	.L756
 	str	r3, [fp, #-44]
 	bl	select_l2p_ram_region
 	ldr	r3, [fp, #-44]
@@ -5187,32 +5256,32 @@ log2phys:
 	ldrh	r2, [r2, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L749
+	beq	.L757
 	ldr	r3, [r1, #4]
 	cmp	r3, #0
-	bge	.L749
+	bge	.L757
 	bl	flush_l2p_region
-.L749:
+.L757:
 	mov	r1, r5
 	uxth	r0, r9
 	bl	load_l2p_region
-	b	.L744
-.L748:
+	b	.L752
+.L756:
 	add	r2, r2, #1
 	mla	ip, r3, r2, r0
 	ldrh	ip, [ip, #-12]
 	cmp	ip, r8
-	bne	.L743
-.L744:
+	bne	.L751
+.L752:
 	cmp	r10, #0
 	mov	r3, #12
-	bne	.L745
+	bne	.L753
 	ldr	r2, [r4, #2492]
 	mla	r3, r3, r5, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r7]
-.L746:
+.L754:
 	ldr	r2, [r4, #2492]
 	mov	r3, #12
 	mov	r0, #0
@@ -5222,7 +5291,7 @@ log2phys:
 	addne	r3, r3, #1
 	strne	r3, [r5, #4]
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L745:
+.L753:
 	mul	r3, r3, r5
 	ldr	r2, [r4, #2492]
 	ldr	r1, [r7]
@@ -5234,12 +5303,12 @@ log2phys:
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	ldr	r3, .L755+12
+	ldr	r3, .L763+12
 	strh	r8, [r3]	@ movhi
-	b	.L746
-.L756:
+	b	.L754
+.L764:
 	.align	2
-.L755:
+.L763:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+289
 	.word	.LC1
@@ -5259,7 +5328,7 @@ FtlReUsePrevPpa:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r6, r0
-	ldr	r7, .L767
+	ldr	r7, .L775
 	ubfx	r0, r1, #10, #16
 	str	r1, [fp, #-32]
 	bl	P2V_block_in_plane
@@ -5267,34 +5336,34 @@ FtlReUsePrevPpa:
 	lsl	r5, r0, #1
 	ldrh	r3, [r2, r5]
 	cmp	r3, #0
-	bne	.L758
+	bne	.L766
 	ldr	r4, [r7, #2340]
 	cmp	r4, #0
-	beq	.L759
+	beq	.L767
 	movw	r2, #2344
 	movw	lr, #65535
 	ldrh	ip, [r7, r2]
 	ldr	r2, [r7, #2316]
 	sub	r4, r4, r2
 	ubfx	r4, r4, #3, #16
-.L760:
+.L768:
 	uxth	r1, r3
 	cmp	ip, r1
-	bls	.L759
+	bls	.L767
 	cmp	r4, r0
-	bne	.L761
+	bne	.L769
 	mov	r1, r4
-	ldr	r0, .L767+4
+	ldr	r0, .L775+4
 	bl	List_remove_node
 	movw	r3, #2344
 	ldrh	r3, [r7, r3]
 	cmp	r3, #0
-	bne	.L762
+	bne	.L770
 	movw	r2, #1688
-	ldr	r1, .L767+8
-	ldr	r0, .L767+12
-	bl	printk
-.L762:
+	ldr	r1, .L775+8
+	ldr	r0, .L775+12
+	bl	sftl_printk
+.L770:
 	movw	r2, #2344
 	mov	r0, r4
 	ldrh	r3, [r7, r2]
@@ -5303,25 +5372,25 @@ FtlReUsePrevPpa:
 	bl	INSERT_DATA_LIST
 	ldr	r2, [r7, #2324]
 	ldrh	r3, [r2, r5]
-.L758:
+.L766:
 	add	r3, r3, #1
 	strh	r3, [r2, r5]	@ movhi
-	b	.L759
-.L761:
+	b	.L767
+.L769:
 	lsl	r4, r4, #3
 	add	r3, r3, #1
 	ldrh	r4, [r2, r4]
 	cmp	r4, lr
-	bne	.L760
-.L759:
+	bne	.L768
+.L767:
 	mov	r2, #1
 	sub	r1, fp, #32
 	mov	r0, r6
 	bl	log2phys
 	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L768:
+.L776:
 	.align	2
-.L767:
+.L775:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2340
 	.word	.LANCHOR1+298
@@ -5341,39 +5410,39 @@ ftl_scan_all_data:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	r5, #0
-	ldr	r6, .L777
+	ldr	r6, .L785
 	mov	r1, #0
-	ldr	r0, .L777+4
-	bl	printk
+	ldr	r0, .L785+4
+	bl	sftl_printk
 	mov	r4, r6
-.L770:
+.L778:
 	ldr	r3, [r6, #2504]
 	cmp	r5, r3
-	bcc	.L776
+	bcc	.L784
 	sub	sp, fp, #28
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L776:
+.L784:
 	mov	r2, #0
 	sub	r1, fp, #32
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
 	cmp	r3, #0
-	bne	.L771
+	bne	.L779
 	ldr	r2, [fp, #-32]
 	mov	r1, r5
-	ldr	r0, .L777+8
-	bl	printk
-.L771:
+	ldr	r0, .L785+8
+	bl	sftl_printk
+.L779:
 	ldr	r3, [fp, #-32]
 	cmn	r3, #1
-	beq	.L773
+	beq	.L781
 	str	r3, [r4, #3264]
 	mov	r2, #0
 	ldr	r3, [r4, #3280]
 	mov	r1, #1
 	ldr	r7, [r4, #3284]
-	ldr	r0, .L777+12
+	ldr	r0, .L785+12
 	str	r3, [r4, #3268]
 	str	r5, [r4, #3276]
 	str	r7, [r4, #3272]
@@ -5382,14 +5451,14 @@ ftl_scan_all_data:
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
 	cmpne	r3, #256
-	beq	.L774
+	beq	.L782
 	ldr	r3, [r7, #8]
 	cmp	r5, r3
-	beq	.L773
-.L774:
+	beq	.L781
+.L782:
 	ldr	r2, [r4, #3268]
 	ldr	r3, [r4, #3272]
-	ldr	r0, .L777+16
+	ldr	r0, .L785+16
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -5403,18 +5472,18 @@ ftl_scan_all_data:
 	str	r2, [sp]
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3264]
-	bl	printk
-.L773:
+	bl	sftl_printk
+.L781:
 	add	r5, r5, #1
-	b	.L770
-.L778:
+	b	.L778
+.L786:
 	.align	2
-.L777:
+.L785:
 	.word	.LANCHOR0
-	.word	.LC88
-	.word	.LC89
+	.word	.LC92
+	.word	.LC93
 	.word	.LANCHOR0+3260
-	.word	.LC90
+	.word	.LC94
 	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	2
 	.global	FtlReadRefresh
@@ -5429,21 +5498,21 @@ FtlReadRefresh:
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #88
-	ldr	r3, .L792
+	ldr	r3, .L800
 	ldr	r0, [r3, #2716]
 	mov	r4, r3
 	cmp	r0, #0
-	beq	.L780
+	beq	.L788
 	ldr	r1, [r3, #2720]
 	ldr	r2, [r3, #2504]
 	cmp	r1, r2
-	bcs	.L781
+	bcs	.L789
 	mov	r5, #2048
-.L786:
+.L794:
 	ldr	r0, [r4, #2720]
 	ldr	r3, [r4, #2504]
 	cmp	r0, r3
-	bcs	.L783
+	bcs	.L791
 	mov	r2, #0
 	sub	r1, fp, #108
 	bl	log2phys
@@ -5452,10 +5521,10 @@ FtlReadRefresh:
 	cmn	r2, #1
 	add	r3, r3, #1
 	str	r3, [r4, #2720]
-	beq	.L784
+	beq	.L792
 	str	r3, [fp, #-88]
 	sub	r0, fp, #20
-	ldr	r3, .L792+4
+	ldr	r3, .L800+4
 	mov	r1, #1
 	str	r2, [fp, #-100]
 	mov	r2, #0
@@ -5466,53 +5535,53 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-104]
 	cmp	r3, #256
-	bne	.L783
+	bne	.L791
 	ldr	r0, [fp, #-108]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L783:
+.L791:
 	mvn	r0, #0
-.L779:
+.L787:
 	sub	sp, fp, #20
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L784:
+.L792:
 	subs	r5, r5, #1
-	bne	.L786
-	b	.L783
-.L781:
+	bne	.L794
+	b	.L791
+.L789:
 	ldr	r2, [r3, #2508]
 	mov	r0, #0
 	str	r0, [r3, #2716]
 	str	r0, [r3, #2720]
 	str	r2, [r3, #2712]
-	b	.L779
-.L780:
+	b	.L787
+.L788:
 	ldr	r1, [r3, #2508]
 	ldr	r2, [r3, #2712]
 	add	ip, r1, #1048576
 	cmp	r2, ip
-	bhi	.L789
+	bhi	.L797
 	ldr	r3, [r3, #2564]
 	mov	ip, #33554432
 	lsr	r3, r3, #10
 	add	r2, r2, ip, asr r3
 	cmp	r1, r2
-	bhi	.L789
-	ldr	r3, .L792+8
+	bhi	.L797
+	ldr	r3, .L800+8
 	ldrb	r3, [r3, #28]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L779
-.L789:
+	bne	.L787
+.L797:
 	mov	r3, #1
 	mov	r0, #0
 	str	r3, [r4, #2716]
 	str	r0, [r4, #2720]
 	str	r1, [r4, #2712]
-	b	.L779
-.L793:
+	b	.L787
+.L801:
 	.align	2
-.L792:
+.L800:
 	.word	.LANCHOR0
 	.word	ftl_temp_buf
 	.word	.LANCHOR0+2268
@@ -5531,116 +5600,116 @@ ftl_check_vpc:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r4, #0
-	ldr	r6, .L818
-	ldr	r1, .L818+4
-	ldr	r0, .L818+8
+	ldr	r6, .L826
+	ldr	r1, .L826+4
+	ldr	r0, .L826+8
 	mov	r5, r6
-	bl	printk
+	bl	sftl_printk
 	mov	r1, #8192
-	ldr	r0, .L818+12
+	ldr	r0, .L826+12
 	bl	__memzero
-.L795:
+.L803:
 	ldr	r3, [r6, #2504]
 	cmp	r4, r3
-	bcc	.L797
-	ldr	r8, .L818+12
+	bcc	.L805
+	ldr	r8, .L826+12
 	mov	r4, #0
-	ldr	r9, .L818+16
+	ldr	r9, .L826+16
 	mov	r6, r4
-.L798:
+.L806:
 	ldrh	r2, [r5, #40]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L800
+	bhi	.L808
 	ldr	r4, [r5, #2340]
 	cmp	r4, #0
-	beq	.L801
+	beq	.L809
 	movw	r3, #2344
-	ldr	r9, .L818+12
+	ldr	r9, .L826+12
 	ldrh	r8, [r5, r3]
 	mov	r7, #0
 	ldr	r3, [r5, #2316]
-	ldr	r10, .L818+20
+	ldr	r10, .L826+20
 	sub	r4, r4, r3
 	ubfx	r4, r4, #3, #16
-.L802:
+.L810:
 	uxth	r3, r7
 	cmp	r8, r3
-	bls	.L801
+	bls	.L809
 	ldr	r2, [r5, #2324]
 	lsl	r3, r4, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L803
+	beq	.L811
 	mov	r6, #1
 	ldrh	r3, [r9, r3]
 	mov	r1, r4
 	mov	r0, r10
-	bl	printk
-.L803:
+	bl	sftl_printk
+.L811:
 	ldr	r3, [r5, #2316]
 	lsl	r4, r4, #3
 	add	r7, r7, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L802
-.L801:
+	bne	.L810
+.L809:
 	cmp	r6, #0
 	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 	movw	r2, #2321
-	ldr	r1, .L818+4
-	ldr	r0, .L818+24
-	bl	printk
+	ldr	r1, .L826+4
+	ldr	r0, .L826+24
+	bl	sftl_printk
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L797:
+.L805:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L796
+	beq	.L804
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, .L818+12
+	ldr	r2, .L826+12
 	lsl	r0, r0, #1
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L796:
+.L804:
 	add	r4, r4, #1
-	b	.L795
-.L800:
+	b	.L803
+.L808:
 	uxth	r1, r4
 	ldr	r3, [r5, #2324]
 	lsl	r7, r1, #1
 	ldrh	r2, [r3, r7]
 	ldrh	r3, [r8, r7]
 	cmp	r2, r3
-	beq	.L799
+	beq	.L807
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [r5, #2324]
 	movw	r2, #65535
 	ldrh	r3, [r3, r7]
 	cmp	r3, r2
-	beq	.L799
+	beq	.L807
 	ldrh	r2, [r8, r7]
 	cmp	r2, r3
 	movhi	r6, #1
-.L799:
+.L807:
 	add	r4, r4, #1
-	b	.L798
-.L819:
+	b	.L806
+.L827:
 	.align	2
-.L818:
+.L826:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+314
-	.word	.LC91
+	.word	.LC95
 	.word	check_vpc_table
-	.word	.LC92
-	.word	.LC93
+	.word	.LC96
+	.word	.LC97
 	.word	.LC1
 	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	2
@@ -5662,7 +5731,7 @@ FtlMapBlkWriteDump_data:
 	mov	r3, #0
 	ldrh	r5, [r0, #6]
 	str	r3, [r0, #36]
-	ldr	r3, .L827
+	ldr	r3, .L835
 	ldr	r2, [r0, #24]
 	sub	r5, r5, #1
 	uxth	r5, r5
@@ -5674,25 +5743,25 @@ FtlMapBlkWriteDump_data:
 	ldr	r2, [r2, r5, lsl #2]
 	cmp	r2, #0
 	str	r2, [r3, #3264]
-	beq	.L822
+	beq	.L830
 	mov	r2, #1
-	ldr	r0, .L827+4
+	ldr	r0, .L835+4
 	mov	r1, r2
 	bl	FlashReadPages
-.L823:
+.L831:
 	ldr	r2, [r4, #3268]
 	mov	r1, r5
 	mov	r0, r6
 	bl	FtlMapWritePage
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L822:
+.L830:
 	ldrh	r2, [r3, #110]
 	mov	r1, #255
 	bl	ftl_memset
-	b	.L823
-.L828:
+	b	.L831
+.L836:
 	.align	2
-.L827:
+.L835:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -5710,7 +5779,7 @@ FtlScanSysBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	r5, #0
-	ldr	r4, .L910
+	ldr	r4, .L918
 	movw	r3, #3944
 	mov	r1, r5
 	ldr	r2, [r4, #128]
@@ -5742,11 +5811,11 @@ FtlScanSysBlk:
 	str	r3, [r4, #2584]
 	ldrh	r3, [r4, #40]
 	str	r3, [fp, #-44]
-.L830:
+.L838:
 	ldrh	r3, [r6, #42]
 	ldr	r2, [fp, #-44]
 	cmp	r3, r2
-	bls	.L871
+	bls	.L879
 	ldr	r1, [r6, #3176]
 	mov	r7, #0
 	ldrh	r2, [r6, #32]
@@ -5755,9 +5824,9 @@ FtlScanSysBlk:
 	ldr	r3, [r6, #3172]
 	str	r1, [fp, #-48]
 	ldrh	r9, [r6, #112]
-	ldr	ip, .L910+4
-	b	.L872
-.L832:
+	ldr	ip, .L918+4
+	b	.L880
+.L840:
 	ldrb	r0, [ip, r7]	@ zero_extendqisi2
 	ldr	r1, [fp, #-44]
 	str	r3, [fp, #-64]
@@ -5770,7 +5839,7 @@ FtlScanSysBlk:
 	ldr	ip, [fp, #-56]
 	ldr	r2, [fp, #-60]
 	ldr	r3, [fp, #-64]
-	bne	.L831
+	bne	.L839
 	mov	r1, #20
 	mla	r0, r1, r10, r8
 	ldr	r1, [fp, #-52]
@@ -5786,31 +5855,31 @@ FtlScanSysBlk:
 	str	r1, [r0, #12]
 	add	r1, r10, #1
 	uxth	r10, r1
-.L831:
+.L839:
 	add	r7, r7, #1
-.L872:
+.L880:
 	uxth	r1, r7
 	cmp	r2, r1
-	bhi	.L832
+	bhi	.L840
 	cmp	r10, #0
-	bne	.L833
-.L870:
+	bne	.L841
+.L878:
 	ldr	r3, [fp, #-44]
 	add	r3, r3, #1
 	uxth	r3, r3
 	str	r3, [fp, #-44]
-	b	.L830
-.L833:
+	b	.L838
+.L841:
 	mov	r2, #1
 	mov	r1, r10
 	mov	r0, r8
 	bl	FlashReadPages
 	mov	r3, #0
-.L909:
+.L917:
 	str	r3, [fp, #-48]
 	ldrh	r3, [fp, #-48]
 	cmp	r10, r3
-	bls	.L870
+	bls	.L878
 	ldr	r3, [fp, #-48]
 	mov	r9, #20
 	mul	r9, r9, r3
@@ -5822,9 +5891,9 @@ FtlScanSysBlk:
 	cmn	r3, #1
 	lsr	ip, r1, #10
 	uxth	r8, ip
-	bne	.L837
+	bne	.L845
 	mov	r3, #16
-.L839:
+.L847:
 	ldr	r0, [r4, #3832]
 	str	ip, [fp, #-56]
 	str	r3, [fp, #-52]
@@ -5840,72 +5909,72 @@ FtlScanSysBlk:
 	ldr	ip, [fp, #-56]
 	cmp	r2, r3
 	ldr	r3, [fp, #-52]
-	bne	.L836
+	bne	.L844
 	ldr	r3, [r4, #3832]
 	mvn	r2, #0
 	str	r2, [r3, r9]
 	ldr	r3, [r4, #3832]
 	ldr	r3, [r3, r9]
 	cmp	r3, r2
-	bne	.L837
-.L838:
+	bne	.L845
+.L846:
 	mov	r1, #0
 	uxth	r0, ip
 	bl	FtlFreeSysBlkQueueIn
-	b	.L842
-.L836:
+	b	.L850
+.L844:
 	ldr	r2, [r4, #3832]
 	ldr	r2, [r2, r9]
 	cmn	r2, #1
-	bne	.L837
+	bne	.L845
 	sub	r3, r3, #1
 	uxth	r3, r3
 	cmp	r3, #0
-	bne	.L839
-	b	.L838
-.L837:
+	bne	.L847
+	b	.L846
+.L845:
 	ldr	r2, [r6, #2540]
 	ldr	r3, [r7, #4]
 	cmn	r2, #1
-	beq	.L840
+	beq	.L848
 	cmp	r2, r3
-	bhi	.L841
-.L840:
+	bhi	.L849
+.L848:
 	cmn	r3, #1
 	addne	r2, r3, #1
 	strne	r2, [r5, #2540]
-.L841:
+.L849:
 	ldrh	r2, [r7]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L843
-	bhi	.L844
+	beq	.L851
+	bhi	.L852
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L845
-.L842:
+	beq	.L853
+.L850:
 	ldr	r3, [fp, #-48]
 	add	r3, r3, #1
-	b	.L909
-.L844:
+	b	.L917
+.L852:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L846
+	beq	.L854
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L838
-	b	.L842
-.L846:
-	ldr	r9, .L910+8
+	beq	.L846
+	b	.L850
+.L854:
+	ldr	r9, .L918+8
 	ldr	r3, [r4, #128]
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	bls	.L848
+	bls	.L856
 	movw	r2, #1211
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L848:
+	ldr	r1, .L918+12
+	ldr	r0, .L918+16
+	bl	sftl_printk
+.L856:
 	ldr	r0, [r4, #128]
 	ldrh	r2, [r9]
 	ldr	ip, [r4, #3892]
@@ -5916,34 +5985,34 @@ FtlScanSysBlk:
 	sxth	r3, r3
 	sxth	r1, r1
 	str	r1, [fp, #-52]
-.L849:
+.L857:
 	ldr	r1, [fp, #-52]
 	cmp	r3, r1
-	bgt	.L855
+	bgt	.L863
 	cmp	r3, #0
-	bge	.L887
-	b	.L842
-.L855:
+	bge	.L895
+	b	.L850
+.L863:
 	lsl	lr, r3, #2
 	ldr	r1, [r7, #4]
 	str	lr, [fp, #-56]
 	ldr	lr, [ip, r3, lsl #2]
 	cmp	r1, lr
-	bls	.L850
+	bls	.L858
 	ldr	r1, [ip]
 	cmp	r1, #0
-	bne	.L851
+	bne	.L859
 	cmp	r0, r2
 	addne	r2, r2, #1
 	strhne	r2, [r9]	@ movhi
-.L851:
+.L859:
 	uxth	ip, r3
 	mov	r1, #0
-.L852:
+.L860:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L853
+	bhi	.L861
 	ldr	r1, [r7, #4]
 	cmp	r3, #0
 	ldr	r2, [r5, #3892]
@@ -5952,16 +6021,16 @@ FtlScanSysBlk:
 	lsl	r2, r3, #1
 	ldr	r1, [r5, #3868]
 	strh	r8, [r1, r2]	@ movhi
-	blt	.L842
-	ldr	r2, .L910+8
+	blt	.L850
+	ldr	r2, .L918+8
 	ldr	r1, [r5, #128]
 	ldrh	r2, [r2]
 	sub	r1, r1, r2
 	sub	r1, r1, #1
 	sxth	r1, r1
 	cmp	r3, r1
-	bgt	.L842
-.L887:
+	bgt	.L850
+.L895:
 	add	r2, r2, #1
 	ldr	r1, [r7, #4]
 	strh	r2, [r9]	@ movhi
@@ -5969,10 +6038,10 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
 	ldr	r2, [r4, #3868]
-.L907:
+.L915:
 	strh	r8, [r2, r3]	@ movhi
-	b	.L842
-.L853:
+	b	.L850
+.L861:
 	ldr	r0, [r6, #3892]
 	add	r1, r1, #1
 	add	lr, r0, r2, lsl #2
@@ -5983,21 +6052,21 @@ FtlScanSysBlk:
 	add	lr, r0, r2
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r2]	@ movhi
-	b	.L852
-.L850:
+	b	.L860
+.L858:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L849
-.L845:
+	b	.L857
+.L853:
 	ldrh	r2, [r4, #144]
 	ldrh	r3, [r4, #120]
 	cmp	r2, r3
-	bls	.L858
+	bls	.L866
 	movw	r2, #1252
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L858:
+	ldr	r1, .L918+12
+	ldr	r0, .L918+16
+	bl	sftl_printk
+.L866:
 	ldrh	r2, [r4, #120]
 	ldrh	r1, [r4, #144]
 	ldr	ip, [r4, #3880]
@@ -6005,15 +6074,15 @@ FtlScanSysBlk:
 	sxth	r3, r0
 	sub	r0, r0, r1
 	str	r0, [fp, #-52]
-.L859:
+.L867:
 	ldr	r0, [fp, #-52]
 	cmp	r3, r0
-	ble	.L864
+	ble	.L872
 	ldr	r9, [ip, r3, lsl #2]
 	lsl	lr, r3, #2
 	ldr	r0, [r7, #4]
 	cmp	r0, r9
-	bls	.L860
+	bls	.L868
 	sub	r2, r2, r1
 	ldr	r0, [ip]
 	clz	r2, r2
@@ -6025,27 +6094,27 @@ FtlScanSysBlk:
 	addeq	r1, r1, #1
 	strheq	r1, [r5, #144]	@ movhi
 	mov	r1, #0
-.L862:
+.L870:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L863
+	bhi	.L871
 	ldr	r1, [r7, #4]
 	ldr	r2, [r5, #3880]
 	str	r1, [r2, lr]
 	lsl	r2, r3, #1
 	ldr	r1, [r5, #148]
 	strh	r8, [r1, r2]	@ movhi
-.L864:
+.L872:
 	cmp	r3, #0
-	blt	.L842
+	blt	.L850
 	ldrh	r2, [r5, #120]
 	ldrh	r1, [r5, #144]
 	sub	r2, r2, #1
 	sub	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L842
+	bgt	.L850
 	add	r1, r1, #1
 	ldr	r2, [r5, #3880]
 	strh	r1, [r5, #144]	@ movhi
@@ -6053,8 +6122,8 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
 	ldr	r2, [r5, #148]
-	b	.L907
-.L863:
+	b	.L915
+.L871:
 	ldr	r0, [r6, #3880]
 	add	r1, r1, #1
 	add	r9, r0, r2, lsl #2
@@ -6065,81 +6134,81 @@ FtlScanSysBlk:
 	add	r9, r0, r2
 	ldrh	r9, [r9, #2]
 	strh	r9, [r0, r2]	@ movhi
-	b	.L862
-.L860:
+	b	.L870
+.L868:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L859
-.L843:
-	ldr	r9, .L910+20
+	b	.L867
+.L851:
+	ldr	r9, .L918+20
 	movw	r2, #65535
 	ldrh	r1, [r9]
 	cmp	r1, r2
 	strheq	r8, [r9]	@ movhi
-	beq	.L908
+	beq	.L916
 	ldrh	r0, [r9, #4]
 	cmp	r0, r2
-	beq	.L867
+	beq	.L875
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L867:
+.L875:
 	ldr	r3, [r7, #4]
 	ldr	r2, [r4, #2584]
 	cmp	r2, r3
 	strhcs	r8, [r9, #4]	@ movhi
-	bcs	.L842
+	bcs	.L850
 	ldrh	r3, [r9]
 	strh	r8, [r9]	@ movhi
 	strh	r3, [r9, #4]	@ movhi
 	ldr	r3, [r7, #4]
-.L908:
+.L916:
 	str	r3, [r4, #2584]
-	b	.L842
-.L871:
+	b	.L850
+.L879:
 	ldr	r2, [r6, #3868]
 	ldrh	r3, [r2]
 	cmp	r3, #0
-	beq	.L873
-.L876:
+	beq	.L881
+.L884:
 	ldr	r1, [r4, #148]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L874
-.L875:
+	beq	.L882
+.L883:
 	movw	r3, #3944
 	ldrh	r2, [r4, r3]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
-	bls	.L906
+	bls	.L914
 	movw	r2, #1377
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L906:
+	ldr	r1, .L918+12
+	ldr	r0, .L918+16
+	bl	sftl_printk
+.L914:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L873:
+.L881:
 	movw	r1, #3944
 	ldrh	r1, [r6, r1]
 	cmp	r1, #0
 	ldrne	r1, [r6, #128]
-	beq	.L876
-.L877:
+	beq	.L884
+.L885:
 	sxth	ip, r3
 	cmp	ip, r1
-	bcs	.L876
+	bcs	.L884
 	lsl	r0, ip, #1
 	add	r3, r3, #1
 	ldrh	r0, [r2, r0]
 	cmp	r0, #0
-	beq	.L877
+	beq	.L885
 	mov	r3, ip
 	mov	lr, #0
-.L878:
+.L886:
 	ldr	r2, [r5, #128]
 	cmp	r3, r2
-	bcs	.L876
+	bcs	.L884
 	ldr	r1, [r5, #3868]
 	lsl	r2, r3, #1
 	sub	r0, r3, ip
@@ -6153,27 +6222,27 @@ FtlScanSysBlk:
 	str	r6, [r1, r0, lsl #2]
 	ldr	r1, [r5, #3868]
 	strh	lr, [r1, r2]	@ movhi
-	b	.L878
-.L874:
+	b	.L886
+.L882:
 	ldrh	r3, [r4, #144]
 	cmp	r3, #0
 	ldrhne	r0, [r4, #120]
-	beq	.L875
-.L883:
+	beq	.L883
+.L891:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	ip, r3
-	bge	.L875
+	bge	.L883
 	lsl	lr, r3, #1
 	add	r2, r2, #1
 	ldrh	lr, [r1, lr]
 	cmp	lr, #0
-	beq	.L883
+	beq	.L891
 	mov	lr, #0
-.L884:
+.L892:
 	ldrh	r2, [r5, #120]
 	cmp	r3, r2
-	bge	.L875
+	bge	.L883
 	ldr	r1, [r5, #148]
 	lsl	r2, r3, #1
 	sub	r0, r3, ip
@@ -6187,10 +6256,10 @@ FtlScanSysBlk:
 	str	r6, [r1, r0, lsl #2]
 	ldr	r1, [r5, #148]
 	strh	lr, [r1, r2]	@ movhi
-	b	.L884
-.L911:
+	b	.L892
+.L919:
 	.align	2
-.L910:
+.L918:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+60
 	.word	.LANCHOR0+3944
@@ -6214,7 +6283,7 @@ FtlMapTblRecovery:
 	mov	r1, #0
 	ldr	r3, [r0, #24]
 	mov	r4, r0
-	ldr	r6, .L939
+	ldr	r6, .L947
 	mov	r7, #0
 	ldr	r8, [r0, #12]
 	str	r3, [fp, #-44]
@@ -6240,16 +6309,16 @@ FtlMapTblRecovery:
 	mov	r2, #1
 	str	r7, [r4, #28]
 	str	r2, [r4, #36]
-.L913:
+.L921:
 	ldr	r3, [fp, #-52]
 	sxth	r2, r7
 	cmp	r2, r3
-	bge	.L930
+	bge	.L938
 	ldr	r3, [fp, #-52]
 	lsl	r0, r2, #1
 	sub	r1, r3, #1
 	cmp	r2, r1
-	bne	.L914
+	bne	.L922
 	add	r10, r8, r0
 	mov	r1, #1
 	ldrh	r0, [r8, r0]
@@ -6260,26 +6329,26 @@ FtlMapTblRecovery:
 	sxth	r1, r0
 	ldr	r2, [fp, #-52]
 	add	r0, r0, #1
-	ldr	ip, .L939+4
+	ldr	ip, .L947+4
 	strh	r7, [r4]	@ movhi
 	add	r7, r1, #1
 	strh	r0, [r4, #2]	@ movhi
 	ldr	r2, [r3, r2, lsl #2]
 	str	r2, [r4, #28]
-.L915:
+.L923:
 	sxth	r2, r8
 	cmp	r2, r7
-	blt	.L917
-.L930:
+	blt	.L925
+.L938:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bne	.L919
+	bne	.L927
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L919:
+.L927:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -6287,7 +6356,7 @@ FtlMapTblRecovery:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L917:
+.L925:
 	ldrh	r1, [r10]
 	mov	r0, ip
 	str	ip, [fp, #-52]
@@ -6299,28 +6368,28 @@ FtlMapTblRecovery:
 	ldr	r2, [r6, #3260]
 	ldr	ip, [fp, #-52]
 	cmn	r2, #1
-	beq	.L916
+	beq	.L924
 	ldrh	r2, [r9, #8]
 	ldr	r3, [fp, #-48]
 	cmp	r3, r2
-	bls	.L916
+	bls	.L924
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r9]
 	cmp	r0, r1
 	ldreq	r1, [r6, #3264]
 	ldreq	r3, [fp, #-44]
 	streq	r1, [r3, r2, lsl #2]
-.L916:
+.L924:
 	add	r8, r8, #1
-	b	.L915
-.L914:
+	b	.L923
+.L922:
 	ldr	r2, [r5, #3280]
 	add	r3, r8, r0
 	str	r3, [fp, #-60]
 	str	r2, [r5, #3268]
 	ldrh	r2, [r5, #104]
 	ldrh	r1, [r8, r0]
-	ldr	r0, .L939+4
+	ldr	r0, .L947+4
 	sub	r2, r2, #1
 	orr	r2, r2, r1, lsl #10
 	str	r2, [r5, #3264]
@@ -6329,24 +6398,24 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r2, [r5, #3260]
 	cmn	r2, #1
-	beq	.L932
+	beq	.L940
 	ldrh	r1, [r9]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
-	bne	.L932
+	bne	.L940
 	ldrh	r1, [r9, #8]
 	movw	r2, #64245
 	cmp	r1, r2
-	beq	.L921
-.L932:
+	beq	.L929
+.L940:
 	mov	r10, #0
-.L922:
+.L930:
 	ldrh	r1, [r5, #104]
 	sxth	r2, r10
 	cmp	r2, r1
-	bge	.L928
+	bge	.L936
 	ldr	r3, [fp, #-60]
-	ldr	r0, .L939+4
+	ldr	r0, .L947+4
 	ldrh	r1, [r3]
 	orr	r2, r2, r1, lsl #10
 	str	r2, [r5, #3264]
@@ -6355,33 +6424,33 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r2, [r5, #3260]
 	cmn	r2, #1
-	beq	.L926
+	beq	.L934
 	ldrh	r2, [r9, #8]
 	ldr	r3, [fp, #-48]
 	cmp	r3, r2
-	bls	.L926
+	bls	.L934
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r9]
 	cmp	r0, r1
 	ldreq	r1, [r5, #3264]
 	ldreq	r3, [fp, #-44]
 	streq	r1, [r3, r2, lsl #2]
-.L926:
+.L934:
 	add	r10, r10, #1
-	b	.L922
-.L921:
+	b	.L930
+.L929:
 	mov	r0, #0
 	mov	lr, #4
-.L923:
+.L931:
 	ldrh	r1, [r5, #104]
 	sxth	r2, r0
 	sub	r1, r1, #1
 	cmp	r2, r1
-	blt	.L925
-.L928:
+	blt	.L933
+.L936:
 	add	r7, r7, #1
-	b	.L913
-.L925:
+	b	.L921
+.L933:
 	ldr	ip, [r5, #3280]
 	add	r0, r0, #1
 	ldr	r3, [fp, #-48]
@@ -6393,10 +6462,10 @@ FtlMapTblRecovery:
 	movhi	r1, r10
 	ldrhi	r2, [ip, r2]
 	strhi	r2, [r3, r1, lsl #2]
-	b	.L923
-.L940:
+	b	.L931
+.L948:
 	.align	2
-.L939:
+.L947:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
@@ -6412,12 +6481,12 @@ FtlLoadVonderInfo:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L942
+	ldr	r3, .L950
 	ldrh	r2, [r3, #120]
 	add	r0, r3, #3936
 	add	r0, r0, #12
 	strh	r2, [r0, #10]	@ movhi
-	ldr	r2, .L942+4
+	ldr	r2, .L950+4
 	strh	r2, [r0, #4]	@ movhi
 	ldrh	r2, [r3, #144]
 	strh	r2, [r0, #8]	@ movhi
@@ -6434,9 +6503,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L943:
+.L951:
 	.align	2
-.L942:
+.L950:
 	.word	.LANCHOR0
 	.word	-3962
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -6452,7 +6521,7 @@ FtlL2PDataInit:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L947
+	ldr	r4, .L955
 	mov	r1, #0
 	mvn	r5, #0
 	ldr	r2, [r4, #128]
@@ -6469,19 +6538,19 @@ FtlL2PDataInit:
 	mov	r3, r4
 	mov	lr, #12
 	mov	r4, r2
-.L945:
+.L953:
 	ldrh	r0, [r3, #138]
 	uxth	r1, r2
 	add	ip, r2, #1
 	cmp	r0, r1
-	bhi	.L946
-	ldr	r2, .L947+4
+	bhi	.L954
+	ldr	r2, .L955+4
 	mvn	r1, #0
 	strh	r1, [r2, #2]	@ movhi
 	strh	r1, [r2]	@ movhi
 	ldr	r1, [r3, #128]
 	strh	r1, [r2, #10]	@ movhi
-	ldr	r1, .L947+8
+	ldr	r1, .L955+8
 	strh	r1, [r2, #4]	@ movhi
 	movw	r1, #3944
 	ldrh	r1, [r3, r1]
@@ -6497,7 +6566,7 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3888]
 	str	r2, [r3, #3928]
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L946:
+.L954:
 	uxth	r2, r2
 	ldr	r1, [r3, #2492]
 	mul	r0, lr, r2
@@ -6513,10 +6582,10 @@ FtlL2PDataInit:
 	add	r2, r0, r2
 	str	r2, [r1, #8]
 	mov	r2, ip
-	b	.L945
-.L948:
+	b	.L953
+.L956:
 	.align	2
-.L947:
+.L955:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3904
 	.word	-3902
@@ -6534,13 +6603,13 @@ FtlLoadMapInfo:
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
 	bl	FtlL2PDataInit
-	ldr	r0, .L950
+	ldr	r0, .L958
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L951:
+.L959:
 	.align	2
-.L950:
+.L958:
 	.word	.LANCHOR0+3904
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	2
@@ -6555,7 +6624,7 @@ FtlVariablesInit:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L953
+	ldr	r4, .L961
 	mvn	r3, #0
 	movw	r2, #3992
 	mov	r5, #0
@@ -6592,9 +6661,9 @@ FtlVariablesInit:
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L954:
+.L962:
 	.align	2
-.L953:
+.L961:
 	.word	.LANCHOR0
 	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
@@ -6611,7 +6680,7 @@ SupperBlkListInit:
 	sub	fp, ip, #4
 	sub	sp, sp, #16
 	mov	r5, #0
-	ldr	r4, .L966
+	ldr	r4, .L974
 	mov	r1, #0
 	mov	r8, r5
 	mov	r7, r5
@@ -6627,20 +6696,20 @@ SupperBlkListInit:
 	strh	r5, [r3]	@ movhi
 	strh	r5, [r4, r2]	@ movhi
 	str	r3, [fp, #-48]
-.L956:
+.L964:
 	ldrh	r3, [r4, #40]
 	uxth	r10, r5
 	cmp	r10, r3
-	bcs	.L962
+	bcs	.L970
 	ldrh	r3, [r4, #102]
 	mov	r9, r10
 	ldrh	ip, [r4, #32]
 	str	r3, [fp, #-44]
 	mov	r3, #0
 	mov	r6, r3
-	b	.L963
-.L958:
-	ldr	r2, .L966+4
+	b	.L971
+.L966:
+	ldr	r2, .L974+4
 	mov	r1, r9
 	str	ip, [fp, #-56]
 	str	r3, [fp, #-52]
@@ -6654,67 +6723,67 @@ SupperBlkListInit:
 	add	r3, r3, #1
 	addeq	r6, r6, r2
 	uxtheq	r6, r6
-.L963:
+.L971:
 	uxth	r1, r3
 	cmp	ip, r1
-	bhi	.L958
+	bhi	.L966
 	cmp	r6, #0
 	moveq	r0, r6
-	beq	.L959
+	beq	.L967
 	mov	r1, r6
 	mov	r0, #32768
 	bl	__divsi3
-.L959:
+.L967:
 	ldr	r3, [r4, #2316]
 	add	r3, r3, r9, lsl #3
 	strh	r0, [r3, #4]	@ movhi
-	ldr	r3, .L966+8
+	ldr	r3, .L974+8
 	ldrh	r1, [r3]
 	cmp	r1, r10
-	beq	.L960
+	beq	.L968
 	ldrh	r1, [r3, #48]
 	cmp	r1, r10
-	beq	.L960
+	beq	.L968
 	ldrh	r3, [r3, #96]
 	cmp	r3, r10
-	beq	.L960
+	beq	.L968
 	ldr	r2, [r4, #2324]
 	lsl	r3, r9, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L961
+	bne	.L969
 	add	r8, r8, #1
 	mov	r0, r9
 	uxth	r8, r8
 	bl	INSERT_FREE_LIST
-.L960:
+.L968:
 	add	r5, r5, #1
-	b	.L956
-.L961:
+	b	.L964
+.L969:
 	add	r7, r7, #1
 	mov	r0, r9
 	uxth	r7, r7
 	bl	INSERT_DATA_LIST
-	b	.L960
-.L962:
+	b	.L968
+.L970:
 	ldr	r2, [fp, #-48]
 	strh	r7, [r2]	@ movhi
 	add	r7, r7, r8
 	cmp	r7, r3
 	movw	r2, #2344
 	strh	r8, [r4, r2]	@ movhi
-	ble	.L964
+	ble	.L972
 	movw	r2, #2154
-	ldr	r1, .L966+12
-	ldr	r0, .L966+16
-	bl	printk
-.L964:
+	ldr	r1, .L974+12
+	ldr	r0, .L974+16
+	bl	sftl_printk
+.L972:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L967:
+.L975:
 	.align	2
-.L966:
+.L974:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+60
 	.word	.LANCHOR0+2348
@@ -6733,7 +6802,7 @@ FtlGcPageVarInit:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L969
+	ldr	r4, .L977
 	mov	r3, #0
 	movw	r2, #3192
 	mov	r1, #255
@@ -6752,9 +6821,9 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	ldmfd	sp, {r4, fp, sp, pc}
-.L970:
+.L978:
 	.align	2
-.L969:
+.L977:
 	.word	.LANCHOR0
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
 	.align	2
@@ -6771,35 +6840,35 @@ FtlGcScanTempBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #20
 	mov	r6, r0
-	ldr	r3, .L994
+	ldr	r3, .L1002
 	mov	r10, r1
 	ldrh	r4, [r3, #4]
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L988
+	beq	.L996
 	cmp	r4, #0
-	bne	.L972
-.L973:
+	bne	.L980
+.L981:
 	bl	FtlGcPageVarInit
-	b	.L974
-.L988:
+	b	.L982
+.L996:
 	mov	r4, #0
-.L972:
-	ldr	r3, .L994+4
+.L980:
+	ldr	r3, .L1002+4
 	ldrh	r3, [r3, #102]
 	cmp	r3, r10
-	beq	.L973
-.L974:
-	ldr	r5, .L994+4
-	mov	r8, #0
+	beq	.L981
 .L982:
+	ldr	r5, .L1002+4
+	mov	r8, #0
+.L990:
 	ldrh	r2, [r6]
 	movw	r3, #65535
 	mov	r0, #0
 	strb	r0, [r6, #8]
 	cmp	r2, r3
-	beq	.L975
-.L985:
+	beq	.L983
+.L993:
 	ldrh	r3, [r5, #32]
 	mov	r2, #0
 	ldr	r0, [r5, #3832]
@@ -6815,34 +6884,34 @@ FtlGcScanTempBlk:
 	str	r3, [fp, #-56]
 	ldrh	r3, [r5, #112]
 	str	r3, [fp, #-60]
-.L976:
+.L984:
 	ldr	r1, [fp, #-44]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L978
+	bhi	.L986
 	mov	r9, #0
 	mov	r2, #0
 	mov	r1, r7
 	bl	FlashReadPages
-.L979:
+.L987:
 	uxth	r3, r9
 	cmp	r7, r3
-	bhi	.L983
+	bhi	.L991
 	add	r8, r8, #1
 	add	r4, r4, #1
 	cmp	r10, r8
 	uxth	r4, r4
-	bls	.L984
-.L986:
+	bls	.L992
+.L994:
 	ldrh	r3, [r5, #102]
 	cmp	r3, r4
-	bhi	.L985
+	bhi	.L993
 	mov	r0, #0
-	b	.L975
-.L978:
+	b	.L983
+.L986:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L977
+	beq	.L985
 	mov	r1, #20
 	orr	r3, r4, r3, lsl #10
 	mla	r1, r1, r7, r0
@@ -6867,10 +6936,10 @@ FtlGcScanTempBlk:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L977:
+.L985:
 	add	r2, r2, #1
-	b	.L976
-.L983:
+	b	.L984
+.L991:
 	mov	r3, #20
 	ldr	r2, [r5, #3832]
 	mul	r3, r3, r9
@@ -6886,7 +6955,7 @@ FtlGcScanTempBlk:
 	ldr	r3, [fp, #-56]
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L980
+	bne	.L988
 	ldr	ip, [fp, #-48]
 	movw	r2, #65535
 	add	r9, r9, #1
@@ -6894,11 +6963,11 @@ FtlGcScanTempBlk:
 	ldr	r3, [ip, #12]
 	ldrh	ip, [r3]
 	cmp	ip, r2
-	bne	.L981
+	bne	.L989
 	mov	r3, #1
 	str	r3, [r5, #4000]
-.L975:
-	ldr	r3, .L994
+.L983:
+	ldr	r3, .L1002
 	mvn	r2, #0
 	strb	r0, [r6, #6]
 	mov	r1, r4
@@ -6907,13 +6976,13 @@ FtlGcScanTempBlk:
 	mov	r2, r0
 	mov	r0, r6
 	bl	ftl_sb_update_avl_pages
-	b	.L987
-.L981:
+	b	.L995
+.L989:
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L979
-.L980:
+	b	.L987
+.L988:
 	ldrh	r3, [r6]
 	mov	r4, #0
 	ldr	r2, [r5, #2324]
@@ -6924,25 +6993,25 @@ FtlGcScanTempBlk:
 	mvn	r3, #0
 	strh	r3, [r6]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L982
-.L984:
-	ldr	r2, .L994
+	b	.L990
+.L992:
+	ldr	r2, .L1002
 	movw	r1, #65535
 	ldrh	r3, [r2, #4]
 	cmp	r3, r1
-	beq	.L986
+	beq	.L994
 	add	r3, r3, r8
 	strh	r3, [r2, #4]	@ movhi
 	ldrh	r3, [r5, #102]
 	cmp	r3, r4
-	bls	.L986
-.L987:
+	bls	.L994
+.L995:
 	mvn	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L995:
+.L1003:
 	.align	2
-.L994:
+.L1002:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
@@ -6975,9 +7044,9 @@ FtlBbmTblFlush:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1006
+	ldr	r4, .L1014
 	mov	r1, #0
-	ldr	r7, .L1006+4
+	ldr	r7, .L1014+4
 	ldr	r0, [r4, #3280]
 	add	r6, r4, #176
 	ldr	r3, [r4, #3284]
@@ -6985,20 +7054,20 @@ FtlBbmTblFlush:
 	str	r0, [r4, #3268]
 	str	r3, [r4, #3272]
 	bl	ftl_memset
-.L998:
+.L1006:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	blt	.L999
+	blt	.L1007
 	ldr	r6, [r4, #3272]
 	mov	r2, #16
 	mov	r1, #255
-	ldr	r9, .L1006+8
-	ldr	r8, .L1006+12
+	ldr	r9, .L1014+8
+	ldr	r8, .L1014+12
 	mov	r5, #0
 	mov	r0, r6
 	mov	r7, r5
 	bl	memset
-	ldr	r3, .L1006+16
+	ldr	r3, .L1014+16
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #160]
 	str	r3, [r6, #4]
@@ -7010,7 +7079,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #10]	@ movhi
 	ldr	r3, [r4, #28]
 	strh	r3, [r6, #12]	@ movhi
-.L1000:
+.L1008:
 	ldr	r3, [r4, #3280]
 	mov	r10, #0
 	ldrh	r1, [r4, #152]
@@ -7025,7 +7094,7 @@ FtlBbmTblFlush:
 	ldrh	r3, [r4, #156]
 	str	r0, [sp]
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	mov	r3, #1
 	mov	r0, r8
 	mov	r2, r3
@@ -7035,7 +7104,7 @@ FtlBbmTblFlush:
 	ldrh	r2, [r4, #154]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1001
+	blt	.L1009
 	ldr	r3, [r4, #160]
 	ldrh	r2, [r4, #152]
 	ldr	r0, [r4, #3800]
@@ -7058,27 +7127,27 @@ FtlBbmTblFlush:
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-.L1001:
+.L1009:
 	ldrh	r3, [r4, #154]
 	add	r3, r3, #1
 	strh	r3, [r4, #154]	@ movhi
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	bne	.L1002
+	bne	.L1010
 	add	r5, r5, #1
 	ldr	r1, [r4, #3264]
 	uxth	r5, r5
-	ldr	r0, .L1006+20
-	bl	printk
+	ldr	r0, .L1014+20
+	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L1000
+	bls	.L1008
 	mov	r2, r5
 	ldr	r1, [r4, #3264]
-	ldr	r0, .L1006+24
-	bl	printk
-.L1004:
-	b	.L1004
-.L999:
+	ldr	r0, .L1014+24
+	bl	sftl_printk
+.L1012:
+	b	.L1012
+.L1007:
 	ldrh	r2, [r7]
 	ldr	r3, [r4, #3268]
 	ldr	r1, [r6, #4]!
@@ -7087,25 +7156,25 @@ FtlBbmTblFlush:
 	add	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L998
-.L1005:
+	b	.L1006
+.L1013:
 	mov	r7, #1
-	b	.L1000
-.L1002:
+	b	.L1008
+.L1010:
 	cmp	r7, #0
-	beq	.L1005
+	beq	.L1013
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1007:
+.L1015:
 	.align	2
-.L1006:
+.L1014:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3900
-	.word	.LC94
+	.word	.LC98
 	.word	.LANCHOR0+3260
 	.word	-3887
-	.word	.LC95
-	.word	.LC96
+	.word	.LC99
+	.word	.LC100
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
 	.global	allocate_data_superblock
@@ -7121,25 +7190,25 @@ allocate_data_superblock:
 	sub	fp, ip, #4
 	sub	sp, sp, #16
 	mov	r5, r0
-	ldr	r4, .L1043
+	ldr	r4, .L1051
 	add	r9, r4, #2336
-.L1009:
-	ldr	r7, .L1043+4
+.L1017:
+	ldr	r7, .L1051+4
 	ldrh	r2, [r9]
 	ldrh	r3, [r7]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1010
+	ble	.L1018
 	movw	r2, #2585
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1010:
-	ldr	r3, .L1043+16
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1018:
+	ldr	r3, .L1051+16
 	cmp	r5, r3
 	movne	r1, #0
-	bne	.L1011
+	bne	.L1019
 	ldrh	r3, [r7]
 	ldr	r1, [r4, #3160]
 	mul	r2, r1, r3
@@ -7150,19 +7219,19 @@ allocate_data_superblock:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-.L1011:
-	ldr	r0, .L1043+20
+.L1019:
+	ldr	r0, .L1051+20
 	bl	List_pop_index_node
 	ldrh	r3, [r7]
 	mov	r6, r0
 	uxth	r8, r0
 	cmp	r3, #0
-	bne	.L1012
+	bne	.L1020
 	movw	r2, #2594
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1012:
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1020:
 	ldrh	r3, [r7]
 	mov	r0, r5
 	sub	r3, r3, #1
@@ -7171,7 +7240,7 @@ allocate_data_superblock:
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1013
+	bne	.L1021
 	uxth	r0, r6
 	ldr	r2, [r4, #2324]
 	mvn	r1, #0
@@ -7183,24 +7252,24 @@ allocate_data_superblock:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1009
+	ble	.L1017
 	movw	r2, #2605
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-	b	.L1009
-.L1013:
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+	b	.L1017
+.L1021:
 	ldrh	r2, [r9]
 	ldrh	r3, [r7]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1015
+	ble	.L1023
 	mov	r2, #2608
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1015:
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1023:
 	ldr	r0, [r4, #3800]
 	mov	r2, #20
 	ldrh	r1, [r4, #32]
@@ -7210,30 +7279,30 @@ allocate_data_superblock:
 	mov	r3, r0
 	mla	r1, r2, r1, r0
 	str	r1, [fp, #-44]
-.L1016:
+.L1024:
 	ldr	r1, [fp, #-44]
 	cmp	r1, r3
-	bne	.L1018
+	bne	.L1026
 	cmp	r7, #0
-	bne	.L1019
+	bne	.L1027
 	movw	r2, #2619
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1019:
-	ldr	r3, .L1043+24
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1027:
+	ldr	r3, .L1051+24
 	ldrh	r3, [r3]
 	cmp	r3, r8
-	bne	.L1020
+	bne	.L1028
 	movw	r2, #2621
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1020:
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1028:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	uxth	r6, r6
 	cmp	r3, #0
-	bne	.L1021
+	bne	.L1029
 	ldr	r1, [r4, #2328]
 	lsl	r2, r6, #1
 	ldrh	r3, [r1, r2]
@@ -7248,7 +7317,7 @@ allocate_data_superblock:
 	add	r3, r3, #1
 	str	r3, [r4, #2548]
 	bl	ftl_set_blk_mode
-.L1024:
+.L1032:
 	ldr	r3, [r4, #2328]
 	lsl	r10, r6, #1
 	ldr	r2, [r4, #2564]
@@ -7265,17 +7334,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3800]
 	str	r0, [r4, #2556]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L1043+28
+	ldr	r0, .L1051+28
 	add	r3, r3, #1
 	str	r3, [r2, #16]
 	mov	r2, #20
 	mla	r2, r2, r7, r1
 	add	r3, r1, #4
 	add	r2, r2, #24
-.L1026:
+.L1034:
 	add	r3, r3, #20
 	cmp	r2, r3
-	bne	.L1027
+	bne	.L1035
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3800]
@@ -7283,26 +7352,26 @@ allocate_data_superblock:
 	mov	r3, #0
 	mov	ip, #20
 	mov	r1, r3
-.L1028:
+.L1036:
 	uxth	r2, r3
 	cmp	r7, r2
-	bhi	.L1030
+	bhi	.L1038
 	cmp	r1, #0
-	ble	.L1031
+	ble	.L1039
 	mov	r0, r6
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1031:
+.L1039:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1032
+	bne	.L1040
 	ldr	r3, [r4, #2324]
 	mvn	r2, #0
 	mov	r0, r6
 	strh	r2, [r3, r10]	@ movhi
 	bl	INSERT_DATA_LIST
-	b	.L1009
-.L1018:
+	b	.L1017
+.L1026:
 	str	lr, [r3, #8]
 	movw	r10, #65535
 	str	lr, [r3, #12]
@@ -7314,8 +7383,8 @@ allocate_data_superblock:
 	addne	r7, r7, #1
 	uxthne	r7, r7
 	strne	r1, [r10, #4]
-	b	.L1016
-.L1021:
+	b	.L1024
+.L1029:
 	ldr	r1, [r4, #2328]
 	lsl	r3, r6, #1
 	mov	r0, r6
@@ -7326,19 +7395,19 @@ allocate_data_superblock:
 	add	r3, r3, #1
 	str	r3, [r4, #2552]
 	bl	ftl_set_blk_mode.part.6
-	b	.L1024
-.L1027:
+	b	.L1032
+.L1035:
 	ldr	r1, [r3, #-20]
 	and	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L1026
-.L1030:
+	b	.L1034
+.L1038:
 	mul	r2, ip, r3
 	ldr	lr, [r4, #3800]
 	add	r0, lr, r2
 	ldr	r2, [lr, r2]
 	cmn	r2, #1
-	bne	.L1029
+	bne	.L1037
 	ldr	r0, [r0, #4]
 	add	r1, r1, #1
 	str	ip, [fp, #-56]
@@ -7356,10 +7425,10 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	sub	r2, r2, #1
 	strb	r2, [r5, #7]
-.L1029:
+.L1037:
 	add	r3, r3, #1
-	b	.L1028
-.L1032:
+	b	.L1036
+.L1040:
 	ldrh	r3, [r4, #102]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -7378,22 +7447,22 @@ allocate_data_superblock:
 	strh	r3, [r1, r2]	@ movhi
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1033
+	beq	.L1041
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1034
-.L1033:
+	bne	.L1042
+.L1041:
 	movw	r2, #2674
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1034:
+	ldr	r1, .L1051+8
+	ldr	r0, .L1051+12
+	bl	sftl_printk
+.L1042:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1044:
+.L1052:
 	.align	2
-.L1043:
+.L1051:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2344
 	.word	.LANCHOR1+360
@@ -7417,76 +7486,76 @@ FtlGcFreeBadSuperBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	uxth	r3, r0
-	ldr	r6, .L1057
+	ldr	r6, .L1065
 	str	r3, [fp, #-44]
 	movw	r3, #3206
 	ldrh	r3, [r6, r3]
 	cmp	r3, #0
 	movne	r7, #0
-	ldrne	r10, .L1057+4
-	bne	.L1047
-.L1046:
+	ldrne	r10, .L1065+4
+	bne	.L1055
+.L1054:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1053:
+.L1061:
 	uxtah	r3, r6, r7
 	ldr	r1, [fp, #-44]
 	mov	r8, #0
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L1048:
+.L1056:
 	ldrh	r3, [r10]
 	uxth	r4, r8
 	cmp	r3, r4
-	bhi	.L1052
+	bhi	.L1060
 	add	r7, r7, #1
-.L1047:
+.L1055:
 	ldrh	r2, [r6, #32]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L1053
+	bhi	.L1061
 	bl	FtlGcReFreshBadBlk
-	b	.L1046
-.L1052:
+	b	.L1054
+.L1060:
 	uxth	r3, r8
-	ldr	r5, .L1057+8
+	ldr	r5, .L1065+8
 	lsl	r2, r3, #1
 	ldrh	r2, [r5, r2]
 	cmp	r2, r9
-	bne	.L1049
+	bne	.L1057
 	mov	r1, r9
-	ldr	r0, .L1057+12
+	ldr	r0, .L1065+12
 	str	r3, [fp, #-48]
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldr	r3, [fp, #-48]
 	ldrh	r2, [r10]
 	add	r3, r5, r3, lsl #1
-.L1050:
+.L1058:
 	cmp	r4, r2
-	bcc	.L1051
+	bcc	.L1059
 	sub	r2, r2, #1
 	strh	r2, [r10]	@ movhi
-.L1049:
+.L1057:
 	add	r8, r8, #1
-	b	.L1048
-.L1051:
+	b	.L1056
+.L1059:
 	ldrh	r1, [r3, #2]!
 	add	r4, r4, #1
 	uxth	r4, r4
 	strh	r1, [r3, #-2]	@ movhi
-	b	.L1050
-.L1058:
+	b	.L1058
+.L1066:
 	.align	2
-.L1057:
+.L1065:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3206
 	.word	.LANCHOR0+3208
-	.word	.LC97
+	.word	.LC101
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -7500,20 +7569,20 @@ update_vpc_list:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1069
+	ldr	r3, .L1077
 	uxth	r4, r0
 	ldr	r1, [r3, #2324]
 	lsl	r2, r4, #1
 	mov	r6, r3
 	ldrh	r0, [r1, r2]
 	cmp	r0, #0
-	bne	.L1060
+	bne	.L1068
 	movw	r2, #2588
 	ldrh	r1, [r3, r2]
 	cmp	r1, r4
 	mvneq	r3, #0
 	strheq	r3, [r6, r2]	@ movhi
-	beq	.L1062
+	beq	.L1070
 	movw	r2, #2348
 	ldrh	r2, [r3, r2]
 	cmp	r2, r4
@@ -7526,19 +7595,19 @@ update_vpc_list:
 	ldrh	r3, [r3, r2]
 	cmp	r3, r4
 	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-.L1062:
-	ldr	r5, .L1069+4
+.L1070:
+	ldr	r5, .L1077+4
 	mov	r1, r4
-	ldr	r0, .L1069+8
+	ldr	r0, .L1077+8
 	bl	List_remove_node
 	ldrh	r3, [r5]
 	cmp	r3, #0
-	bne	.L1064
+	bne	.L1072
 	movw	r2, #2744
-	ldr	r1, .L1069+12
-	ldr	r0, .L1069+16
-	bl	printk
-.L1064:
+	ldr	r1, .L1077+12
+	ldr	r0, .L1077+16
+	bl	sftl_printk
+.L1072:
 	ldrh	r3, [r5]
 	mov	r0, r4
 	sub	r3, r3, #1
@@ -7552,22 +7621,22 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r6, #40]
 	cmp	r3, r2
-	ble	.L1068
+	ble	.L1076
 	movw	r2, #2747
-	ldr	r1, .L1069+12
-	ldr	r0, .L1069+16
-	bl	printk
-.L1068:
+	ldr	r1, .L1077+12
+	ldr	r0, .L1077+16
+	bl	sftl_printk
+.L1076:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1060:
+.L1068:
 	mov	r0, r4
 	bl	List_update_data_list
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1070:
+.L1078:
 	.align	2
-.L1069:
+.L1077:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2336
 	.word	.LANCHOR0+2320
@@ -7589,44 +7658,44 @@ decrement_vpc_count:
 	uxth	r6, r0
 	movw	r3, #65535
 	cmp	r6, r3
-	ldr	r4, .L1083
-	beq	.L1072
+	ldr	r4, .L1091
+	beq	.L1080
 	ldr	r3, [r4, #2324]
 	lsl	r5, r6, #1
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	subne	r2, r2, #1
 	strhne	r2, [r3, r5]	@ movhi
-	bne	.L1072
+	bne	.L1080
 	mov	r1, r6
-	ldr	r0, .L1083+4
-	bl	printk
+	ldr	r0, .L1091+4
+	bl	sftl_printk
 	ldr	r3, [r4, #2324]
 	ldrh	r5, [r3, r5]
 	cmp	r5, #0
-	beq	.L1074
-.L1081:
+	beq	.L1082
+.L1089:
 	mov	r5, #0
-.L1071:
+.L1079:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1074:
-	movw	r2, #2762
 .L1082:
-	ldr	r1, .L1083+8
-	ldr	r0, .L1083+12
-	bl	printk
-	b	.L1071
-.L1072:
+	movw	r2, #2762
+.L1090:
+	ldr	r1, .L1091+8
+	ldr	r0, .L1091+12
+	bl	sftl_printk
+	b	.L1079
+.L1080:
 	movw	r7, #3992
 	movw	r3, #65535
 	ldrh	r0, [r4, r7]
 	cmp	r0, r3
 	strheq	r6, [r4, r7]	@ movhi
-	beq	.L1081
-.L1076:
+	beq	.L1089
+.L1084:
 	cmp	r6, r0
-	beq	.L1081
+	beq	.L1089
 	bl	update_vpc_list
 	ldr	r2, [r4, #2316]
 	adds	r5, r0, #0
@@ -7645,14 +7714,14 @@ decrement_vpc_count:
 	lsr	r2, r2, #5
 	moveq	r2, #0
 	cmp	r2, #0
-	beq	.L1071
+	beq	.L1079
 	movw	r2, #2778
-	b	.L1082
-.L1084:
+	b	.L1090
+.L1092:
 	.align	2
-.L1083:
+.L1091:
 	.word	.LANCHOR0
-	.word	.LC98
+	.word	.LC102
 	.word	.LANCHOR1+401
 	.word	.LC1
 	.size	decrement_vpc_count, .-decrement_vpc_count
@@ -7669,22 +7738,22 @@ FtlWriteDump_data:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #28
-	ldr	r6, .L1103
-	ldr	r4, .L1103+4
+	ldr	r6, .L1111
+	ldr	r4, .L1111+4
 	ldrh	r2, [r6, #4]
 	cmp	r2, #0
-	beq	.L1086
+	beq	.L1094
 	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1086
+	bne	.L1094
 	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
 	mul	r3, r3, r1
 	cmp	r2, r3
-	beq	.L1086
+	beq	.L1094
 	ldrb	r8, [r4, #2358]	@ zero_extendqisi2
 	cmp	r8, #0
-	bne	.L1085
+	bne	.L1093
 	ldr	r7, [r4, #2504]
 	mov	r2, r8
 	sub	r1, fp, #64
@@ -7701,37 +7770,37 @@ FtlWriteDump_data:
 	str	r0, [fp, #-52]
 	str	r5, [fp, #-48]
 	str	r8, [r5, #4]
-	beq	.L1088
+	beq	.L1096
 	mov	r2, r8
 	mov	r1, #1
 	sub	r0, fp, #60
 	bl	FlashReadPages
-.L1089:
-	ldr	ip, .L1103
+.L1097:
+	ldr	ip, .L1111
 	mov	r8, #0
-	ldr	r3, .L1103+8
+	ldr	r3, .L1111+8
 	lsl	r9, r9, #2
 	mov	r10, r8
 	strh	r3, [r5]	@ movhi
-.L1090:
+.L1098:
 	cmp	r9, r8
-	bne	.L1094
-.L1091:
+	bne	.L1102
+.L1099:
 	mov	r3, #1
-.L1102:
+.L1110:
 	strb	r3, [r4, #2358]
-.L1085:
+.L1093:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1088:
+.L1096:
 	ldrh	r2, [r4, #110]
 	mov	r1, #255
 	bl	ftl_memset
-	b	.L1089
-.L1094:
+	b	.L1097
+.L1102:
 	ldrh	r3, [r6, #4]
 	cmp	r3, #0
-	beq	.L1091
+	beq	.L1099
 	ldr	r3, [fp, #-56]
 	mov	r0, ip
 	str	r7, [r5, #8]
@@ -7756,13 +7825,13 @@ FtlWriteDump_data:
 	ldrh	r0, [r6]
 	bl	decrement_vpc_count
 	ldr	ip, [fp, #-68]
-	b	.L1090
-.L1086:
+	b	.L1098
+.L1094:
 	mov	r3, #0
-	b	.L1102
-.L1104:
+	b	.L1110
+.L1112:
 	.align	2
-.L1103:
+.L1111:
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR0
 	.word	-3947
@@ -7779,31 +7848,31 @@ l2p_flush:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L1109
+	ldr	r5, .L1117
 	mov	r4, #0
 	mov	r6, #12
 	bl	FtlWriteDump_data
-.L1106:
+.L1114:
 	ldrh	r2, [r5, #138]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1108
+	bhi	.L1116
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1108:
+.L1116:
 	ldr	r3, [r5, #2492]
 	uxth	r0, r4
 	mla	r3, r6, r0, r3
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1107
+	bge	.L1115
 	bl	flush_l2p_region
-.L1107:
+.L1115:
 	add	r4, r4, #1
-	b	.L1106
-.L1110:
+	b	.L1114
+.L1118:
 	.align	2
-.L1109:
+.L1117:
 	.word	.LANCHOR0
 	.size	l2p_flush, .-l2p_flush
 	.align	2
@@ -7823,9 +7892,9 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r0]
 	mov	r10, r0
 	cmp	r3, r2
-	beq	.L1232
+	beq	.L1240
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1239
+	ldr	r5, .L1247
 	str	r3, [fp, #-64]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [fp, #-64]
@@ -7835,27 +7904,27 @@ FtlRecoverySuperblock:
 	mov	r3, #0
 	strheq	r3, [r0, #4]	@ movhi
 	ldrhne	r0, [r0, #16]
-	bne	.L1115
-.L1237:
+	bne	.L1123
+.L1245:
 	strb	r3, [r10, #6]
-.L1232:
+.L1240:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1116:
+.L1124:
 	uxth	r1, r3
 	add	r1, r10, r1, lsl #1
 	ldrh	r0, [r1, #16]
-.L1115:
+.L1123:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1116
+	beq	.L1124
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r4, r0
-	beq	.L1117
+	beq	.L1125
 	ldrh	r3, [r5, #32]
 	mov	r2, #0
 	ldr	r0, [r5, #3832]
@@ -7872,12 +7941,12 @@ FtlRecoverySuperblock:
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [fp, #-76]
-.L1118:
+.L1126:
 	ldr	r1, [fp, #-56]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L1122
-	ldr	r6, .L1239
+	bhi	.L1130
+	ldr	r6, .L1247
 	mov	r2, #0
 	mov	r1, r5
 	movw	r8, #65535
@@ -7890,15 +7959,15 @@ FtlRecoverySuperblock:
 	str	r3, [fp, #-56]
 	mov	r7, r9
 	mov	r3, #0
-.L1123:
+.L1131:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L1128
+	bhi	.L1136
 	addeq	r3, r4, #1
 	uxtheq	r3, r3
 	streq	r3, [fp, #-60]
-	bne	.L1126
-.L1233:
+	bne	.L1134
+.L1241:
 	ldr	r0, [r9, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -7918,14 +7987,14 @@ FtlRecoverySuperblock:
 	cmpeq	r1, r0
 	moveq	r2, r1
 	moveq	r1, r3
-	beq	.L1238
+	beq	.L1246
 	movw	r3, #65535
 	cmp	r8, r3
-	bne	.L1132
+	bne	.L1140
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1133
-.L1132:
+	bne	.L1141
+.L1140:
 	ldr	r3, [r6, #4004]
 	uxth	r7, r4
 	uxth	r4, r4
@@ -7933,15 +8002,15 @@ FtlRecoverySuperblock:
 	ldreq	r3, [fp, #-56]
 	streq	r3, [r6, #4004]
 	ldr	r3, [fp, #-64]
-	ldr	r6, .L1239
+	ldr	r6, .L1247
 	add	r3, r3, #7
 	cmp	r4, r3
 	subgt	r4, r7, #7
 	ldrle	r4, [fp, #-64]
 	uxthgt	r4, r4
-.L1136:
+.L1144:
 	cmp	r4, r7
-	bhi	.L1143
+	bhi	.L1151
 	mov	r3, #0
 	ldrh	r8, [r6, #32]
 	ldr	r0, [r6, #3832]
@@ -7949,32 +8018,32 @@ FtlRecoverySuperblock:
 	ldr	r1, [fp, #-76]
 	movw	lr, #65535
 	mov	ip, #20
-	b	.L1144
-.L1117:
+	b	.L1152
+.L1125:
 	ldr	r3, [fp, #-64]
 	cmp	r3, #0
-	beq	.L1119
+	beq	.L1127
 	movw	r2, #1755
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1119:
+	ldr	r1, .L1247+4
+	ldr	r0, .L1247+8
+	bl	sftl_printk
+.L1127:
 	ldr	r3, [fp, #-80]
 	cmp	r3, #0
 	cmpne	r6, r3
-	beq	.L1120
+	beq	.L1128
 	movw	r2, #1756
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1120:
+	ldr	r1, .L1247+4
+	ldr	r0, .L1247+8
+	bl	sftl_printk
+.L1128:
 	mov	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1237
-.L1122:
+	b	.L1245
+.L1130:
 	ldrh	r3, [ip], #2
 	cmp	r3, r7
-	beq	.L1121
+	beq	.L1129
 	mla	r1, r8, r5, r0
 	orr	r3, r4, r3, lsl #10
 	str	r3, [r1, #4]
@@ -7996,45 +8065,45 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L1121:
+.L1129:
 	add	r2, r2, #1
-	b	.L1118
-.L1128:
+	b	.L1126
+.L1136:
 	ldr	r2, [r7]
 	cmp	r2, #0
-	bne	.L1124
+	bne	.L1132
 	ldr	ip, [r7, #12]
 	ldr	r2, [ip, #4]
 	cmn	r2, #1
-	beq	.L1125
-	ldr	r1, .L1239
+	beq	.L1133
+	ldr	r1, .L1247
 	mov	r0, r2
 	str	ip, [fp, #-68]
 	ldr	r1, [r1, #2544]
 	bl	ftl_cmp_data_ver
 	ldr	ip, [fp, #-68]
 	cmp	r0, #0
-	ldrne	r1, .L1239
+	ldrne	r1, .L1247
 	addne	r2, r2, #1
 	strne	r2, [r1, #2544]
-.L1125:
+.L1133:
 	ldr	r2, [ip]
 	cmn	r2, #1
-	bne	.L1127
-.L1126:
+	bne	.L1135
+.L1134:
 	uxth	r2, r4
 	uxth	r3, r3
 	str	r2, [fp, #-60]
 	mov	r2, #20
 	mla	r9, r2, r3, r9
-	b	.L1233
-.L1124:
+	b	.L1241
+.L1132:
 	ldr	r8, [fp, #-60]
-.L1127:
+.L1135:
 	add	r3, r3, #1
 	add	r7, r7, #20
-	b	.L1123
-.L1138:
+	b	.L1131
+.L1146:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8043,10 +8112,10 @@ FtlRecoverySuperblock:
 	orrne	r2, r4, r2, lsl #10
 	uxthne	r5, r5
 	strne	r2, [r9, #4]
-.L1144:
+.L1152:
 	uxth	r2, r3
 	cmp	r8, r2
-	bhi	.L1138
+	bhi	.L1146
 	mov	r1, r5
 	mov	r2, #0
 	bl	FlashReadPages
@@ -8054,38 +8123,38 @@ FtlRecoverySuperblock:
 	mov	r2, #20
 	movw	r1, #65535
 	mla	r5, r2, r5, r3
-.L1139:
+.L1147:
 	cmp	r5, r3
 	addeq	r4, r4, #1
 	uxtheq	r4, r4
-	beq	.L1136
-.L1142:
+	beq	.L1144
+.L1150:
 	ldr	r2, [r3]
 	cmp	r2, #0
-	bne	.L1133
+	bne	.L1141
 	ldr	r2, [r3, #12]
 	ldrh	r0, [r2]
 	cmp	r0, r1
-	beq	.L1141
+	beq	.L1149
 	ldr	r2, [r2, #4]
 	cmn	r2, #1
 	strne	r2, [r6, #4004]
-.L1141:
+.L1149:
 	add	r3, r3, #20
-	b	.L1139
-.L1143:
+	b	.L1147
+.L1151:
 	mvn	r3, #0
 	str	r3, [r6, #4004]
-.L1133:
-	ldr	r1, .L1239
+.L1141:
+	ldr	r1, .L1247
 	mov	r2, #1
 	movw	r3, #4008
-	ldr	r4, .L1239
+	ldr	r4, .L1247
 	add	r0, r1, #3904
 	strh	r2, [r1, r3]	@ movhi
 	bl	FtlMapBlkWriteDump_data
 	ldr	r8, [fp, #-64]
-.L1145:
+.L1153:
 	ldrh	ip, [r4, #32]
 	mov	r3, #0
 	ldr	r0, [r4, #3832]
@@ -8093,42 +8162,42 @@ FtlRecoverySuperblock:
 	ldr	r1, [fp, #-76]
 	movw	lr, #65535
 	mov	r5, #20
-.L1146:
+.L1154:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1148
+	bhi	.L1156
 	mov	r2, #0
 	mov	r1, r9
 	bl	FlashReadPages
 	mov	r3, #0
-.L1236:
+.L1244:
 	str	r3, [fp, #-72]
 	ldrh	r3, [fp, #-72]
 	cmp	r9, r3
-	bhi	.L1176
+	bhi	.L1184
 	add	r8, r8, #1
 	ldrh	r3, [r4, #102]
 	uxth	r8, r8
 	cmp	r3, r8
-	bne	.L1145
+	bne	.L1153
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	mov	r3, #0
 	strh	r8, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1177:
+.L1185:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1232
+	bcs	.L1240
 	ldr	r1, [fp, #-76]
 	ldrh	ip, [r1], #2
 	cmp	ip, r0
 	str	r1, [fp, #-76]
 	add	r1, r3, #1
-	bne	.L1237
+	bne	.L1245
 	mov	r3, r1
-	b	.L1177
-.L1148:
+	b	.L1185
+.L1156:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8137,8 +8206,8 @@ FtlRecoverySuperblock:
 	addne	r9, r9, #1
 	uxthne	r9, r9
 	strne	r2, [r6, #4]
-	b	.L1146
-.L1176:
+	b	.L1154
+.L1184:
 	ldr	r3, [fp, #-72]
 	mov	r6, #20
 	ldr	r2, [r4, #3832]
@@ -8151,7 +8220,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [fp, #-64]
 	cmp	r8, r3
-	bcc	.L1150
+	bcc	.L1158
 	ldr	r2, [fp, #-80]
 	moveq	r3, #1
 	movne	r3, #0
@@ -8159,34 +8228,34 @@ FtlRecoverySuperblock:
 	movls	r3, #0
 	andhi	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1150
+	bne	.L1158
 	ldr	r3, [fp, #-60]
 	ldr	r2, [fp, #-68]
 	cmp	r8, r3
 	cmpeq	r2, r0
-	beq	.L1151
+	beq	.L1159
 	ldr	r2, [fp, #-84]
 	ldr	r3, [r2, r6]
 	cmn	r3, #1
-	beq	.L1152
+	beq	.L1160
 	ldr	r7, [r7, #12]
 	movw	r3, #61589
 	ldrh	r2, [r7]
 	cmp	r2, r3
-	beq	.L1153
-.L1160:
+	beq	.L1161
+.L1168:
 	ldrh	r0, [r10]
-.L1235:
+.L1243:
 	bl	decrement_vpc_count
-.L1150:
+.L1158:
 	ldr	r3, [fp, #-72]
 	add	r3, r3, #1
-	b	.L1236
-.L1153:
+	b	.L1244
+.L1161:
 	ldr	r3, [r7, #4]
 	cmn	r3, #1
 	str	r3, [fp, #-56]
-	beq	.L1154
+	beq	.L1162
 	mov	r0, r3
 	ldr	r1, [r4, #2544]
 	bl	ftl_cmp_data_ver
@@ -8194,16 +8263,16 @@ FtlRecoverySuperblock:
 	ldrne	r3, [fp, #-56]
 	addne	r3, r3, #1
 	strne	r3, [r4, #2544]
-.L1154:
+.L1162:
 	ldrh	r2, [r7]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1155
+	beq	.L1163
 	movw	r2, #1905
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1155:
+	ldr	r1, .L1247+4
+	ldr	r0, .L1247+8
+	bl	sftl_printk
+.L1163:
 	ldr	r5, [r7, #8]
 	sub	r1, fp, #48
 	ldr	r3, [r7, #12]
@@ -8213,14 +8282,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #4004]
 	cmn	r1, #1
-	beq	.L1156
+	beq	.L1164
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1156
+	beq	.L1164
 	ldr	r2, [fp, #-52]
 	cmn	r2, #1
-	beq	.L1157
+	beq	.L1165
 	ldr	r0, [r4, #3832]
 	mov	r1, #1
 	add	r0, r0, r6
@@ -8232,123 +8301,123 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r6]
 	add	r3, r2, r6
 	cmn	r1, #1
-	bne	.L1158
-.L1159:
+	bne	.L1166
+.L1167:
 	mvn	r3, #0
 	ldrh	r0, [r10]
 	str	r3, [fp, #-52]
 	bl	decrement_vpc_count
-.L1167:
+.L1175:
 	ldr	r6, [fp, #-52]
 	cmn	r6, #1
-	beq	.L1150
-.L1180:
+	beq	.L1158
+.L1188:
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #40]
 	mov	r5, r0
 	cmp	r3, r0
-	bhi	.L1172
+	bhi	.L1180
 	movw	r2, #2006
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1172:
-	ldr	r3, .L1239
+	ldr	r1, .L1247+4
+	ldr	r0, .L1247+8
+	bl	sftl_printk
+.L1180:
+	ldr	r3, .L1247
 	ldr	r2, [r3, #2324]
 	lsl	r3, r5, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1173
+	beq	.L1181
 	mov	r0, r5
-	b	.L1235
-.L1157:
+	b	.L1243
+.L1165:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	bne	.L1160
+	bne	.L1168
 	mov	r2, #1
 	sub	r1, fp, #52
 	mov	r0, r5
 	bl	log2phys
-	b	.L1160
-.L1158:
+	b	.L1168
+.L1166:
 	ldr	r1, [r7, #8]
 	cmp	r5, r1
-	bne	.L1159
+	bne	.L1167
 	ldr	r1, [r7, #4]
 	ldr	r0, [r4, #4004]
 	str	r1, [fp, #-84]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1159
+	beq	.L1167
 	ldr	r1, [fp, #-48]
 	ldr	r0, [fp, #-44]
 	cmp	r1, r0
-	bne	.L1162
-.L1165:
+	bne	.L1170
+.L1173:
 	ldr	r1, [fp, #-52]
 	mov	r0, r5
 	bl	FtlReUsePrevPpa
-	b	.L1159
-.L1162:
+	b	.L1167
+.L1170:
 	ldr	r0, [fp, #-52]
 	cmp	r1, r0
-	beq	.L1159
+	beq	.L1167
 	cmn	r1, #1
 	streq	r1, [r2, r6]
-	beq	.L1164
+	beq	.L1172
 	str	r1, [r3, #4]
 	mov	r2, #0
 	mov	r1, #1
 	mov	r0, r3
 	ldr	r7, [r3, #12]
 	bl	FlashReadPages
-.L1164:
+.L1172:
 	ldr	r2, [r4, #3832]
 	ldr	r2, [r2, r6]
 	cmn	r2, #1
-	beq	.L1165
+	beq	.L1173
 	ldr	r3, [r7, #4]
 	ldr	r0, [r4, #4004]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1165
+	beq	.L1173
 	mov	r1, r3
 	ldr	r0, [fp, #-84]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1159
-	b	.L1165
-.L1156:
+	beq	.L1167
+	b	.L1173
+.L1164:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	beq	.L1167
+	beq	.L1175
 	mov	r2, #1
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r6, [fp, #-48]
 	cmn	r6, #1
-	beq	.L1167
+	beq	.L1175
 	ldr	r3, [fp, #-52]
 	cmp	r6, r3
-	beq	.L1180
+	beq	.L1188
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, .L1239+12
+	ldr	r3, .L1247+12
 	ldrh	r2, [r3]
 	cmp	r2, r0
-	beq	.L1171
+	beq	.L1179
 	ldrh	r2, [r3, #48]
 	cmp	r2, r0
-	beq	.L1171
+	beq	.L1179
 	ldrh	r3, [r3, #96]
 	cmp	r3, r0
-	bne	.L1167
-.L1171:
+	bne	.L1175
+.L1179:
 	ldr	r0, [r4, #3832]
 	mov	r2, #0
 	mov	r1, #1
@@ -8358,23 +8427,23 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #3832]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L1167
+	beq	.L1175
 	ldr	r1, [r7, #4]
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1167
+	bne	.L1175
 	mov	r2, #1
 	sub	r1, fp, #48
 	mov	r0, r5
 	bl	log2phys
-	b	.L1167
-.L1173:
+	b	.L1175
+.L1181:
 	mov	r1, r5
-	ldr	r0, .L1239+16
-	bl	printk
-	b	.L1150
-.L1152:
+	ldr	r0, .L1247+16
+	bl	sftl_printk
+	b	.L1158
+.L1160:
 	ldr	r3, [r4, #4012]
 	cmp	r3, #31
 	addls	r2, r4, r3, lsl #2
@@ -8386,33 +8455,33 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #4004]
 	cmn	r3, #1
 	ldreq	r3, [fp, #-56]
-	beq	.L1234
+	beq	.L1242
 	ldr	r2, [fp, #-56]
 	cmp	r2, r3
-	bcs	.L1150
+	bcs	.L1158
 	mov	r3, r2
-.L1234:
+.L1242:
 	str	r3, [r4, #4004]
-	b	.L1150
-.L1151:
+	b	.L1158
+.L1159:
 	ldrb	r3, [fp, #-68]	@ zero_extendqisi2
 	ldr	r2, [fp, #-68]
 	ldr	r1, [fp, #-60]
 	strb	r3, [r10, #6]
 	ldrh	r3, [fp, #-60]
 	strh	r3, [r10, #2]	@ movhi
-.L1238:
+.L1246:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1232
-.L1240:
+	b	.L1240
+.L1248:
 	.align	2
-.L1239:
+.L1247:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+421
 	.word	.LC1
 	.word	.LANCHOR0+2348
-	.word	.LC99
+	.word	.LC103
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
 	.global	FtlSuperblockPowerLostFix
@@ -8430,7 +8499,7 @@ FtlSuperblockPowerLostFix:
 	mvn	r3, #0
 	str	r3, [fp, #-36]
 	mov	r7, #0
-	ldr	r3, .L1252
+	ldr	r3, .L1260
 	movw	r1, #61589
 	mov	r4, r0
 	mov	r6, #7
@@ -8448,16 +8517,16 @@ FtlSuperblockPowerLostFix:
 	strh	r2, [r5, #2]	@ movhi
 	ldr	r2, [r3, #3280]
 	str	r1, [r2]
-	ldr	r1, .L1252+4
+	ldr	r1, .L1260+4
 	ldr	r2, [r3, #3280]
 	str	r1, [r2, #4]
-.L1242:
+.L1250:
 	subs	r6, r6, #1
-	beq	.L1244
+	beq	.L1252
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1243
-.L1244:
+	bne	.L1251
+.L1252:
 	ldrh	r3, [r4]
 	ldr	r1, [r8, #2324]
 	ldrh	r0, [r4, #4]
@@ -8472,12 +8541,12 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1243:
+.L1251:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	cmn	r0, #1
 	str	r0, [fp, #-48]
-	beq	.L1244
+	beq	.L1252
 	ldr	r3, [r8, #2544]
 	mov	r1, #1
 	sub	r0, fp, #52
@@ -8491,10 +8560,10 @@ FtlSuperblockPowerLostFix:
 	bl	FlashProgPages
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
-	b	.L1242
-.L1253:
+	b	.L1250
+.L1261:
 	.align	2
-.L1252:
+.L1260:
 	.word	.LANCHOR0
 	.word	305419896
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
@@ -8510,8 +8579,8 @@ FtlLoadBbt:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1286
-	ldr	r7, .L1286+4
+	ldr	r4, .L1294
+	ldr	r7, .L1294+4
 	ldr	r3, [r4, #3280]
 	ldr	r6, [r4, #3284]
 	str	r3, [r4, #3268]
@@ -8520,11 +8589,11 @@ FtlLoadBbt:
 	ldrh	r5, [r4, #98]
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1255:
+.L1263:
 	ldrh	r3, [r4, #98]
 	sub	r3, r3, #16
 	cmp	r5, r3
-	ble	.L1258
+	ble	.L1266
 	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
@@ -8533,7 +8602,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	bne	.L1256
+	bne	.L1264
 	ldr	r3, [r4, #3264]
 	mov	r2, #1
 	mov	r1, r2
@@ -8541,40 +8610,40 @@ FtlLoadBbt:
 	add	r3, r3, #1
 	str	r3, [r4, #3264]
 	bl	FlashReadPages
-.L1256:
+.L1264:
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	beq	.L1257
+	beq	.L1265
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1257
+	bne	.L1265
 	ldr	r3, [r6, #4]
 	strh	r5, [r4, #152]	@ movhi
 	str	r3, [r4, #160]
 	ldrh	r3, [r6, #8]
 	strh	r3, [r4, #156]	@ movhi
-.L1258:
+.L1266:
 	ldrh	r3, [r4, #152]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L1272
+	beq	.L1280
 	ldrh	r3, [r4, #156]
 	cmp	r3, r2
-	beq	.L1262
+	beq	.L1270
 	lsl	r3, r3, #10
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1286+4
+	ldr	r0, .L1294+4
 	str	r3, [r4, #3264]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	beq	.L1262
+	beq	.L1270
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1262
+	bne	.L1270
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #160]
 	cmp	r3, r2
@@ -8583,52 +8652,52 @@ FtlLoadBbt:
 	ldrhhi	r3, [r6, #8]
 	strhhi	r2, [r4, #152]	@ movhi
 	strhhi	r3, [r4, #156]	@ movhi
-.L1262:
-	ldr	r7, .L1286+4
+.L1270:
+	ldr	r7, .L1294+4
 	mov	r1, #1
 	ldrh	r0, [r4, #152]
 	bl	FtlGetLastWrittenPage
 	sxth	r5, r0
 	add	r0, r0, #1
 	strh	r0, [r4, #154]	@ movhi
-.L1264:
+.L1272:
 	cmp	r5, #0
-	bge	.L1267
+	bge	.L1275
 	mov	r2, #254
-	ldr	r1, .L1286+8
-	ldr	r0, .L1286+12
-	bl	printk
-.L1266:
+	ldr	r1, .L1294+8
+	ldr	r0, .L1294+12
+	bl	sftl_printk
+.L1274:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r4, #158]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1269
+	beq	.L1277
 	ldr	r2, [r4, #28]
 	cmp	r0, r2
-	beq	.L1269
+	beq	.L1277
 	ldrh	r3, [r4, #42]
 	lsr	r3, r3, #2
 	cmp	r0, r3
 	cmpcc	r2, r3
-	bcs	.L1269
+	bcs	.L1277
 	bl	FtlSysBlkNumInit
-.L1269:
-	ldr	r6, .L1286+16
+.L1277:
+	ldr	r6, .L1294+16
 	mov	r5, #0
-	ldr	r7, .L1286+20
-.L1270:
+	ldr	r7, .L1294+20
+.L1278:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	bcc	.L1271
+	bcc	.L1279
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1257:
+.L1265:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L1255
-.L1267:
+	b	.L1263
+.L1275:
 	ldrh	r3, [r4, #152]
 	mov	r2, #1
 	mov	r1, r2
@@ -8640,16 +8709,16 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	beq	.L1265
+	beq	.L1273
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	beq	.L1266
-.L1265:
+	beq	.L1274
+.L1273:
 	sub	r5, r5, #1
 	sxth	r5, r5
-	b	.L1264
-.L1271:
+	b	.L1272
+.L1279:
 	ldrh	r2, [r7]
 	ldr	r1, [r4, #3268]
 	ldr	r0, [r6, #4]!
@@ -8657,13 +8726,13 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	add	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L1270
-.L1272:
+	b	.L1278
+.L1280:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1287:
+.L1295:
 	.align	2
-.L1286:
+.L1294:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.word	.LANCHOR1+443
@@ -8685,47 +8754,47 @@ FtlMakeBbt:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r7, #0
-	ldr	r8, .L1307
+	ldr	r8, .L1315
 	bl	FtlBbtMemInit
 	bl	FtlLoadFactoryBbt
 	sub	r5, r8, #180
 	sub	r9, r8, #18
 	mov	r4, r5
-.L1289:
+.L1297:
 	ldrh	r3, [r5, #54]
 	cmp	r7, r3
-	bcc	.L1295
+	bcc	.L1303
 	mov	r0, #0
-.L1296:
+.L1304:
 	ldrh	r2, [r4, #114]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1297
+	bhi	.L1305
 	ldrh	r5, [r4, #164]
 	movw	r6, #65535
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1298:
+.L1306:
 	ldrh	r3, [r4, #164]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1302
+	ble	.L1310
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1299
+	beq	.L1307
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1300
+	beq	.L1308
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1299:
+.L1307:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L1298
-.L1295:
+	b	.L1306
+.L1303:
 	ldrh	r3, [r9, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3280]
@@ -8733,11 +8802,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3268]
 	str	r10, [r5, #3272]
-	beq	.L1290
+	beq	.L1298
 	ldrh	ip, [r5, #98]
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1307+4
+	ldr	r0, .L1315+4
 	mla	ip, r7, ip, r3
 	lsl	r3, ip, #10
 	str	ip, [fp, #-44]
@@ -8750,29 +8819,29 @@ FtlMakeBbt:
 	asr	r2, r2, #3
 	bl	ftl_memcpy
 	ldr	ip, [fp, #-44]
-.L1291:
+.L1299:
 	uxth	r0, ip
 	add	r7, r7, #1
 	add	r8, r8, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1289
-.L1290:
+	b	.L1297
+.L1298:
 	mov	r1, r7
 	bl	FlashGetBadBlockList
 	ldr	r1, [r8]
 	ldr	r0, [r5, #3268]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #98]
-.L1293:
+.L1301:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1292:
+.L1300:
 	ldrh	r0, [r4, #98]
 	smlabb	r0, r0, r7, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1293
+	beq	.L1301
 	mov	r1, #16
 	ldr	r0, [r4, #3284]
 	strh	r6, [r9]	@ movhi
@@ -8780,7 +8849,7 @@ FtlMakeBbt:
 	mov	r1, #4096
 	ldr	r0, [r4, #3280]
 	bl	__memzero
-	ldr	r3, .L1307+8
+	ldr	r3, .L1315+8
 	strh	r3, [r10]	@ movhi
 	mov	r3, #0
 	str	r3, [r10, #4]
@@ -8794,39 +8863,39 @@ FtlMakeBbt:
 	lsl	r3, ip, #10
 	str	ip, [fp, #-44]
 	str	r3, [r4, #3264]
-	ldr	r3, .L1307+12
+	ldr	r3, .L1315+12
 	ldrh	r2, [r3]
 	lsl	r2, r2, #2
 	bl	ftl_memcpy
 	mov	r2, #1
-	ldr	r0, .L1307+4
+	ldr	r0, .L1315+4
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	mov	r3, #1
-	ldr	r0, .L1307+4
+	ldr	r0, .L1315+4
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3260]
 	ldr	ip, [fp, #-44]
 	cmn	r3, #1
-	bne	.L1291
+	bne	.L1299
 	uxth	r0, ip
 	bl	FtlBbmMapBadBlock
-	b	.L1292
-.L1297:
+	b	.L1300
+.L1305:
 	uxth	r0, r0
 	bl	FtlBbmMapBadBlock
 	mov	r0, r5
-	b	.L1296
-.L1300:
+	b	.L1304
+.L1308:
 	ldrh	r3, [r4, #152]
 	cmp	r3, r6
 	strheq	r5, [r4, #152]	@ movhi
-	beq	.L1299
-.L1301:
+	beq	.L1307
+.L1309:
 	strh	r5, [r4, #156]	@ movhi
-.L1302:
+.L1310:
 	ldrh	r3, [r4, #152]
 	mov	r5, #0
 	ldr	r0, [r4, #3800]
@@ -8856,9 +8925,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1308:
+.L1316:
 	.align	2
-.L1307:
+.L1315:
 	.word	.LANCHOR0+180
 	.word	.LANCHOR0+3260
 	.word	-3872
@@ -8878,26 +8947,26 @@ FtlVendorPartWrite:
 	sub	fp, ip, #4
 	sub	sp, sp, #100
 	mov	r7, r0
-	ldr	r4, .L1318
+	ldr	r4, .L1326
 	mov	r5, r1
 	str	r2, [fp, #-128]
 	add	r2, r0, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
 	mvnhi	r8, #0
-	bhi	.L1309
+	bhi	.L1317
 	ldrh	r6, [r4, #108]
 	mov	r8, #0
 	lsr	r6, r0, r6
 	lsl	r10, r6, #2
-.L1311:
+.L1319:
 	cmp	r5, #0
-	bne	.L1316
-.L1309:
+	bne	.L1324
+.L1317:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1316:
+.L1324:
 	ldr	r3, [r4, #3884]
 	mov	r0, r7
 	ldrh	r2, [r4, #58]
@@ -8917,7 +8986,7 @@ FtlVendorPartWrite:
 	cmpne	r9, r2
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L1313
+	beq	.L1321
 	ldr	r2, [r4, #3848]
 	sub	r0, fp, #124
 	str	ip, [fp, #-120]
@@ -8927,7 +8996,7 @@ FtlVendorPartWrite:
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-.L1314:
+.L1322:
 	ldr	r3, [fp, #-132]
 	lsl	ip, r9, #9
 	ldr	r0, [r4, #3848]
@@ -8941,7 +9010,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r6
 	ldr	r2, [r4, #3848]
-	ldr	r0, .L1318+4
+	ldr	r0, .L1326+4
 	add	r6, r6, #1
 	bl	FtlMapWritePage
 	ldr	r3, [fp, #-128]
@@ -8950,15 +9019,15 @@ FtlVendorPartWrite:
 	mvneq	r8, #0
 	add	r3, r3, ip
 	str	r3, [fp, #-128]
-	b	.L1311
-.L1313:
+	b	.L1319
+.L1321:
 	ldrh	r2, [r4, #110]
 	ldr	r0, [r4, #3848]
 	bl	ftl_memset
-	b	.L1314
-.L1319:
+	b	.L1322
+.L1327:
 	.align	2
-.L1318:
+.L1326:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3948
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
@@ -8974,12 +9043,12 @@ Ftl_save_ext_data:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1322
-	ldr	r2, .L1322+4
+	ldr	r3, .L1330
+	ldr	r2, .L1330+4
 	ldr	r1, [r3, #2636]
 	cmp	r1, r2
 	ldmfdne	sp, {fp, sp, pc}
-	ldr	r2, .L1322+8
+	ldr	r2, .L1330+8
 	mov	r1, #1
 	mov	r0, #0
 	str	r2, [r3, #2640]
@@ -9007,12 +9076,12 @@ Ftl_save_ext_data:
 	str	r2, [r3, #2680]
 	ldr	r2, [r3, #2568]
 	str	r2, [r3, #2684]
-	ldr	r2, .L1322+12
+	ldr	r2, .L1330+12
 	bl	FtlVendorPartWrite
 	ldmfd	sp, {fp, sp, pc}
-.L1323:
+.L1331:
 	.align	2
-.L1322:
+.L1330:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177348
@@ -9030,7 +9099,7 @@ FtlEctTblFlush:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1329
+	ldr	r2, .L1337
 	ldrh	r3, [r2, #-8]
 	cmp	r3, #31
 	addls	r3, r3, #1
@@ -9038,20 +9107,20 @@ FtlEctTblFlush:
 	strhls	r3, [r2, #-8]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	ldr	r3, .L1329+4
-	bne	.L1326
+	ldr	r3, .L1337+4
+	bne	.L1334
 	ldr	r1, [r3, #3860]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1327
-.L1326:
+	bcc	.L1335
+.L1334:
 	ldr	r2, [r3, #3860]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1329+8
+	ldr	r1, .L1337+8
 	str	r1, [r2]
 	movw	r1, #3852
 	ldrh	r1, [r3, r1]
@@ -9065,12 +9134,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1327:
+.L1335:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1330:
+.L1338:
 	.align	2
-.L1329:
+.L1337:
 	.word	.LANCHOR3-4032
 	.word	.LANCHOR0
 	.word	1112818501
@@ -9089,26 +9158,26 @@ FtlVendorPartRead:
 	sub	fp, ip, #4
 	sub	sp, sp, #92
 	mov	r9, r2
-	ldr	r5, .L1340
+	ldr	r5, .L1348
 	mov	r7, r1
 	add	r1, r0, r1
 	mov	r10, r0
 	ldrh	r2, [r5, #96]
 	cmp	r1, r2
 	mvnhi	r8, #0
-	bhi	.L1331
+	bhi	.L1339
 	ldrh	r6, [r5, #108]
 	mov	r8, #0
 	lsr	r6, r0, r6
 	lsl	r6, r6, #2
-.L1333:
+.L1341:
 	cmp	r7, #0
-	bne	.L1338
-.L1331:
+	bne	.L1346
+.L1339:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1338:
+.L1346:
 	ldr	r2, [r5, #3884]
 	mov	r0, r10
 	ldrh	r4, [r5, #58]
@@ -9125,7 +9194,7 @@ FtlVendorPartRead:
 	cmp	ip, #0
 	lsl	r3, r4, #9
 	str	r3, [fp, #-128]
-	beq	.L1335
+	beq	.L1343
 	ldr	r2, [r5, #3848]
 	sub	r3, fp, #104
 	sub	r0, fp, #124
@@ -9144,22 +9213,22 @@ FtlVendorPartRead:
 	lsl	r2, r4, #9
 	mvneq	r8, #0
 	bl	ftl_memcpy
-.L1337:
+.L1345:
 	ldr	r3, [fp, #-128]
 	sub	r7, r7, r4
 	add	r10, r10, r4
 	add	r6, r6, #4
 	add	r9, r9, r3
-	b	.L1333
-.L1335:
+	b	.L1341
+.L1343:
 	lsl	r2, r4, #9
 	mov	r1, ip
 	mov	r0, r9
 	bl	ftl_memset
-	b	.L1337
-.L1341:
+	b	.L1345
+.L1349:
 	.align	2
-.L1340:
+.L1348:
 	.word	.LANCHOR0
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
@@ -9174,7 +9243,7 @@ FtlLoadEctTbl:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1344
+	ldr	r4, .L1352
 	movw	r5, #3852
 	mov	r0, #64
 	ldr	r2, [r4, #3860]
@@ -9182,26 +9251,26 @@ FtlLoadEctTbl:
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3860]
 	ldr	r2, [r3]
-	ldr	r3, .L1344+4
+	ldr	r3, .L1352+4
 	cmp	r2, r3
-	beq	.L1343
-	ldr	r1, .L1344+8
-	ldr	r0, .L1344+12
-	bl	printk
+	beq	.L1351
+	ldr	r1, .L1352+8
+	ldr	r0, .L1352+12
+	bl	sftl_printk
 	ldrh	r2, [r4, r5]
 	mov	r1, #0
 	ldr	r0, [r4, #3860]
 	lsl	r2, r2, #9
 	bl	ftl_memset
-.L1343:
+.L1351:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1345:
+.L1353:
 	.align	2
-.L1344:
+.L1352:
 	.word	.LANCHOR0
 	.word	1112818501
-	.word	.LC100
+	.word	.LC104
 	.word	.LC71
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
 	.align	2
@@ -9216,23 +9285,23 @@ Ftl_load_ext_data:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1349
+	ldr	r4, .L1357
 	mov	r1, #1
 	mov	r0, #0
-	ldr	r2, .L1349+4
+	ldr	r2, .L1357+4
 	bl	FtlVendorPartRead
-	ldr	r5, .L1349+8
+	ldr	r5, .L1357+8
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	beq	.L1347
+	beq	.L1355
 	mov	r1, #512
-	ldr	r0, .L1349+4
+	ldr	r0, .L1357+4
 	bl	__memzero
 	str	r5, [r4, #2636]
-.L1347:
+.L1355:
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	bne	.L1348
+	bne	.L1356
 	ldr	r3, [r4, #2724]
 	str	r3, [r4, #2532]
 	ldr	r3, [r4, #2728]
@@ -9257,7 +9326,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2564]
 	ldr	r3, [r4, #2684]
 	str	r3, [r4, #2568]
-.L1348:
+.L1356:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9266,9 +9335,9 @@ Ftl_load_ext_data:
 	bl	__udivsi3
 	str	r0, [r4, #2556]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1350:
+.L1358:
 	.align	2
-.L1349:
+.L1357:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2636
 	.word	1179929683
@@ -9285,10 +9354,10 @@ FtlVpcTblFlush:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1363
+	ldr	r4, .L1371
 	mov	r6, #0
 	mov	r1, #255
-	ldr	r10, .L1363+4
+	ldr	r10, .L1371+4
 	ldr	r3, [r4, #3280]
 	add	r5, r4, #2576
 	ldr	r7, [r4, #3284]
@@ -9299,15 +9368,15 @@ FtlVpcTblFlush:
 	str	r7, [r4, #3272]
 	str	r6, [r7, #12]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, .L1363+8
+	ldr	r3, .L1371+8
 	strh	r3, [r7]	@ movhi
 	ldr	r3, [r4, #2584]
 	str	r6, [r7, #8]
 	ldrh	r2, [r5, #-226]
 	str	r3, [r7, #4]
-	ldr	r3, .L1363+12
+	ldr	r3, .L1371+12
 	str	r3, [r4, #2268]
-	ldr	r3, .L1363+16
+	ldr	r3, .L1371+16
 	str	r3, [r4, #2272]
 	ldrh	r3, [r5, #6]
 	strh	r3, [r8, #8]	@ movhi
@@ -9371,7 +9440,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r6
 	bl	FtlUpdateVaildLpn
-.L1352:
+.L1360:
 	ldr	r3, [r4, #3280]
 	mov	r0, r9
 	ldrh	r2, [r5]
@@ -9389,7 +9458,7 @@ FtlVpcTblFlush:
 	ldrh	r2, [r5, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1353
+	blt	.L1361
 	ldrh	r3, [r5]
 	ldrh	r8, [r5, #4]
 	strh	r3, [r5, #4]	@ movhi
@@ -9410,21 +9479,21 @@ FtlVpcTblFlush:
 	mov	r1, r3
 	mov	r0, r9
 	bl	FlashProgPages
-.L1353:
+.L1361:
 	ldrh	r3, [r5, #2]
 	ldr	r2, [r4, #3260]
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmn	r2, #1
 	strh	r3, [r5, #2]	@ movhi
-	bne	.L1354
+	bne	.L1362
 	cmp	r3, #1
-	bne	.L1355
+	bne	.L1363
 	movw	r2, #1124
 	mov	r1, r10
-	ldr	r0, .L1363+20
-	bl	printk
-.L1355:
+	ldr	r0, .L1371+20
+	bl	sftl_printk
+.L1363:
 	ldrh	r3, [r5, #2]
 	add	r6, r6, #1
 	uxth	r6, r6
@@ -9433,35 +9502,35 @@ FtlVpcTblFlush:
 	subeq	r3, r3, #1
 	strheq	r3, [r5, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1352
+	bls	.L1360
 	mov	r2, r6
 	ldr	r1, [r4, #3264]
-	ldr	r0, .L1363+24
-	bl	printk
-.L1358:
-	b	.L1358
-.L1354:
+	ldr	r0, .L1371+24
+	bl	sftl_printk
+.L1366:
+	b	.L1366
+.L1362:
 	cmp	r3, #1
-	beq	.L1352
+	beq	.L1360
 	movw	r3, #65535
 	cmp	r8, r3
-	beq	.L1359
+	beq	.L1367
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
-.L1359:
+.L1367:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1364:
+.L1372:
 	.align	2
-.L1363:
+.L1371:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+454
 	.word	-3932
 	.word	1179929683
 	.word	1342177348
 	.word	.LC1
-	.word	.LC101
+	.word	.LC105
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	2
 	.global	FtlVpcCheckAndModify
@@ -9477,36 +9546,36 @@ FtlVpcCheckAndModify:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1377
-	ldr	r1, .L1377+4
-	ldr	r0, .L1377+8
-	bl	printk
+	ldr	r4, .L1385
+	ldr	r1, .L1385+4
+	ldr	r0, .L1385+8
+	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
 	ldr	r0, [r4, #3864]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-.L1366:
+.L1374:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1368
-	ldr	r9, .L1377+12
+	bcc	.L1376
+	ldr	r9, .L1385+12
 	mov	r6, #0
-	ldr	r10, .L1377+16
-.L1369:
+	ldr	r10, .L1385+16
+.L1377:
 	ldrh	r3, [r4, #40]
 	uxth	r5, r6
 	cmp	r3, r5
-	bhi	.L1373
+	bhi	.L1381
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1368:
+.L1376:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1367
+	beq	.L1375
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3864]
@@ -9514,10 +9583,10 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1367:
+.L1375:
 	add	r5, r5, #1
-	b	.L1366
-.L1373:
+	b	.L1374
+.L1381:
 	uxth	r8, r6
 	ldr	r3, [r4, #2324]
 	movw	r1, #65535
@@ -9527,20 +9596,20 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r3, r7]
 	cmp	r2, r1
 	cmpne	r2, r3
-	beq	.L1371
+	beq	.L1379
 	mov	r1, r8
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r10]
 	cmp	r3, r5
-	beq	.L1371
-	ldr	r3, .L1377+20
+	beq	.L1379
+	ldr	r3, .L1385+20
 	ldrh	r2, [r3]
 	cmp	r2, r5
-	beq	.L1371
+	beq	.L1379
 	ldrh	r3, [r3, #-48]
 	cmp	r3, r5
-	beq	.L1371
+	beq	.L1379
 	ldr	r3, [r4, #3864]
 	mov	r0, r8
 	ldrh	r2, [r3, r7]
@@ -9549,16 +9618,16 @@ FtlVpcCheckAndModify:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1371:
+.L1379:
 	add	r6, r6, #1
-	b	.L1369
-.L1378:
+	b	.L1377
+.L1386:
 	.align	2
-.L1377:
+.L1385:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+469
-	.word	.LC91
-	.word	.LC102
+	.word	.LC95
+	.word	.LC106
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR0+2444
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
@@ -9574,49 +9643,49 @@ allocate_new_data_superblock:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1389
+	ldr	r4, .L1397
 	mov	r6, r0
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1380
+	bcs	.L1388
 	movw	r2, #2681
-	ldr	r1, .L1389+4
-	ldr	r0, .L1389+8
-	bl	printk
-.L1380:
+	ldr	r1, .L1397+4
+	ldr	r0, .L1397+8
+	bl	sftl_printk
+.L1388:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1381
+	beq	.L1389
 	ldr	r2, [r4, #2324]
 	lsl	r3, r5, #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1382
+	beq	.L1390
 	bl	INSERT_DATA_LIST
-.L1381:
+.L1389:
 	mov	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #3992
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1383
+	beq	.L1391
 	cmp	r5, r0
-	bne	.L1384
+	bne	.L1392
 	ldr	r2, [r4, #2324]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1385
-.L1384:
+	beq	.L1393
+.L1392:
 	bl	update_vpc_list
-.L1385:
+.L1393:
 	mvn	r2, #0
 	movw	r3, #3992
 	strh	r2, [r4, r3]	@ movhi
-.L1383:
+.L1391:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9625,12 +9694,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1382:
-	bl	INSERT_FREE_LIST
-	b	.L1381
 .L1390:
+	bl	INSERT_FREE_LIST
+	b	.L1389
+.L1398:
 	.align	2
-.L1389:
+.L1397:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+490
 	.word	.LC1
@@ -9649,26 +9718,26 @@ FtlProgPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r7, #0
-	ldr	r6, .L1405
+	ldr	r6, .L1413
 	mov	r4, r3
-	ldr	r10, .L1405+4
+	ldr	r10, .L1413+4
 	mov	r2, #0
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	mov	r5, r0
 	mov	r9, r1
 	bl	FlashProgPages
-.L1392:
+.L1400:
 	cmp	r7, r9
-	beq	.L1399
+	beq	.L1407
 	mov	r8, #0
-	b	.L1400
-.L1395:
+	b	.L1408
+.L1403:
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4]
 	cmp	r3, r0
-	bne	.L1393
+	bne	.L1401
 	ldr	r1, [r6, #2324]
 	lsl	r3, r3, #1
 	ldrh	r0, [r4, #4]
@@ -9679,13 +9748,13 @@ FtlProgPages:
 	strb	r8, [r4, #6]
 	strh	r8, [r4, #4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
-.L1393:
+.L1401:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1394
+	bne	.L1402
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1394:
+.L1402:
 	ldr	r3, [r6, #2732]
 	add	r3, r3, #1
 	str	r3, [r6, #2732]
@@ -9701,19 +9770,19 @@ FtlProgPages:
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	FlashProgPages
-.L1400:
+.L1408:
 	ldr	r3, [r5]
 	cmn	r3, #1
-	beq	.L1395
+	beq	.L1403
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1396
+	bcc	.L1404
 	movw	r2, #933
 	mov	r1, r10
-	ldr	r0, .L1405+8
-	bl	printk
-.L1396:
+	ldr	r0, .L1413+8
+	bl	sftl_printk
+.L1404:
 	ldr	r3, [r5, #4]
 	sub	r1, fp, #40
 	mov	r2, #1
@@ -9728,41 +9797,41 @@ FtlProgPages:
 	ldr	r3, [fp, #-48]
 	mov	r8, r0
 	cmn	r3, #1
-	beq	.L1397
+	beq	.L1405
 	ldr	r2, [r6, #2324]
 	lsl	r3, r0, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L1398
+	bne	.L1406
 	mov	r1, r0
-	ldr	r0, .L1405+12
-	bl	printk
-.L1398:
+	ldr	r0, .L1413+12
+	bl	sftl_printk
+.L1406:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1397:
+.L1405:
 	add	r7, r7, #1
 	add	r5, r5, #20
-	b	.L1392
-.L1399:
+	b	.L1400
+.L1407:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1391
+	bcc	.L1399
 	mov	r2, #948
-	ldr	r1, .L1405+4
-	ldr	r0, .L1405+8
-	bl	printk
-.L1391:
+	ldr	r1, .L1413+4
+	ldr	r0, .L1413+8
+	bl	sftl_printk
+.L1399:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1406:
+.L1414:
 	.align	2
-.L1405:
+.L1413:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+519
 	.word	.LC1
-	.word	.LC103
+	.word	.LC107
 	.size	FtlProgPages, .-FtlProgPages
 	.align	2
 	.global	FtlCacheWriteBack
@@ -9776,23 +9845,23 @@ FtlCacheWriteBack:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1412
+	ldr	r4, .L1420
 	ldr	r0, [r4, #3988]
 	cmp	r0, #0
-	beq	.L1408
-	ldr	r3, .L1412+4
+	beq	.L1416
+	ldr	r3, .L1420+4
 	mov	r2, #0
 	mov	r1, #1
 	ldr	r3, [r3, #-4036]
 	bl	FtlProgPages
 	mov	r3, #0
 	str	r3, [r4, #3988]
-.L1408:
+.L1416:
 	mov	r0, #0
 	ldmfd	sp, {r4, fp, sp, pc}
-.L1413:
+.L1421:
 	.align	2
-.L1412:
+.L1420:
 	.word	.LANCHOR0
 	.word	.LANCHOR3
 	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
@@ -9828,17 +9897,17 @@ sftl_deinit:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1417
+	ldr	r3, .L1425
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1416
+	bne	.L1424
 	bl	FtlSysFlush
-.L1416:
+.L1424:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1418:
+.L1426:
 	.align	2
-.L1417:
+.L1425:
 	.word	.LANCHOR2
 	.size	sftl_deinit, .-sftl_deinit
 	.align	2
@@ -9855,21 +9924,21 @@ FtlDiscard:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	add	r2, r0, r1
-	ldr	r6, .L1434
+	ldr	r6, .L1442
 	mov	r7, r0
 	mov	r5, r1
 	ldr	r3, [r6, #140]
 	cmp	r2, r3
 	mvnhi	r0, #0
-	bhi	.L1419
+	bhi	.L1427
 	cmp	r1, #31
-	bhi	.L1421
-.L1426:
+	bhi	.L1429
+.L1434:
 	mov	r0, #0
-.L1419:
+.L1427:
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1421:
+.L1429:
 	bl	FtlCacheWriteBack
 	ldrh	r4, [r6, #58]
 	mov	r0, r7
@@ -9880,38 +9949,38 @@ FtlDiscard:
 	sub	r7, r7, r3
 	uxth	r7, r7
 	cmp	r7, #0
-	beq	.L1422
+	beq	.L1430
 	sub	r4, r4, r7
 	add	r8, r0, #1
 	cmp	r4, r5
 	movcs	r4, r5
 	uxth	r4, r4
 	sub	r5, r5, r4
-.L1422:
-	ldr	r4, .L1434+4
+.L1430:
+	ldr	r4, .L1442+4
 	mvn	r3, #0
 	str	r3, [fp, #-36]
-.L1423:
+.L1431:
 	ldrh	r3, [r6, #58]
 	cmp	r5, r3
-	bcs	.L1425
-	ldr	r3, .L1434+4
+	bcs	.L1433
+	ldr	r3, .L1442+4
 	ldr	r2, [r3, #-4032]
 	cmp	r2, #32
-	bls	.L1426
+	bls	.L1434
 	mov	r4, #0
 	str	r4, [r3, #-4032]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1426
-.L1425:
+	b	.L1434
+.L1433:
 	mov	r2, #0
 	sub	r1, fp, #40
 	mov	r0, r8
 	bl	log2phys
 	ldr	r3, [fp, #-40]
 	cmn	r3, #1
-	beq	.L1424
+	beq	.L1432
 	ldr	r3, [r4, #-4032]
 	mov	r2, #1
 	sub	r1, fp, #36
@@ -9926,14 +9995,14 @@ FtlDiscard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1424:
+.L1432:
 	ldrh	r3, [r6, #58]
 	add	r8, r8, #1
 	sub	r5, r5, r3
-	b	.L1423
-.L1435:
+	b	.L1431
+.L1443:
 	.align	2
-.L1434:
+.L1442:
 	.word	.LANCHOR0
 	.word	.LANCHOR3
 	.size	FtlDiscard, .-FtlDiscard
@@ -9951,51 +10020,51 @@ FtlGcFreeTempBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	movw	r3, #2444
-	ldr	r4, .L1462
+	ldr	r4, .L1470
 	movw	r2, #65535
 	ldrh	r5, [r4, r3]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1437
-.L1447:
+	bne	.L1445
+.L1455:
 	mov	r3, #0
 	str	r3, [r4, #4000]
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1460
-.L1438:
+	bne	.L1468
+.L1446:
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1437:
+.L1445:
 	cmp	r0, #0
-	beq	.L1440
-	ldr	r3, .L1462+4
+	beq	.L1448
+	ldr	r3, .L1470+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1441
-.L1442:
+	beq	.L1449
+.L1450:
 	mov	r1, #2
-.L1440:
-	ldr	r0, .L1462+8
+.L1448:
+	ldr	r0, .L1470+8
 	bl	FtlGcScanTempBlk
 	cmn	r0, #1
 	str	r0, [fp, #-44]
-	beq	.L1443
+	beq	.L1451
 	ldr	r2, [r4, #2328]
 	lsl	r5, r5, #1
 	ldrh	r3, [r2, r5]
 	cmp	r3, #4
-	bls	.L1444
+	bls	.L1452
 	sub	r3, r3, #5
 	mov	r0, #1
 	strh	r3, [r2, r5]	@ movhi
 	bl	FtlEctTblFlush
-.L1444:
+.L1452:
 	ldr	r3, [r4, #4000]
 	cmp	r3, #0
-	bne	.L1445
+	bne	.L1453
 	ldr	r3, [r4, #2732]
 	ldr	r0, [fp, #-44]
 	add	r3, r3, #1
@@ -10003,48 +10072,48 @@ FtlGcFreeTempBlock:
 	str	r3, [r4, #2732]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1445:
+.L1453:
 	mov	r3, #0
 	str	r3, [r4, #4000]
-.L1456:
+.L1464:
 	mov	r0, #1
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1441:
+.L1449:
 	mov	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	movw	r3, #2344
 	ldrh	r3, [r4, r3]
 	cmp	r3, #17
-	bhi	.L1442
-	b	.L1440
-.L1443:
-	ldr	r3, .L1462+4
+	bhi	.L1450
+	b	.L1448
+.L1451:
+	ldr	r3, .L1470+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1456
-	b	.L1447
-.L1460:
+	bne	.L1464
+	b	.L1455
+.L1468:
 	bl	FtlCacheWriteBack
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
-	ldr	r6, .L1462+12
+	ldr	r6, .L1470+12
 	mul	r3, r3, r1
 	ldrh	r2, [r6]
 	cmp	r2, r3
-	beq	.L1448
+	beq	.L1456
 	mov	r2, #162
-	ldr	r1, .L1462+16
-	ldr	r0, .L1462+20
-	bl	printk
-.L1448:
+	ldr	r1, .L1470+16
+	ldr	r0, .L1470+20
+	bl	sftl_printk
+.L1456:
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
 	movw	r3, #2444
 	ldrh	r0, [r4, #102]
 	mov	r5, #0
 	ldrh	r3, [r4, r3]
 	ldr	r1, [r4, #2324]
-	ldr	r10, .L1462+20
+	ldr	r10, .L1470+20
 	smulbb	r2, r2, r0
 	lsl	r3, r3, #1
 	strh	r2, [r1, r3]	@ movhi
@@ -10052,11 +10121,11 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r6]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1449:
+.L1457:
 	ldrh	r2, [r6]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1453
+	bhi	.L1461
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2444
@@ -10066,9 +10135,9 @@ FtlGcFreeTempBlock:
 	lsl	r2, r0, #1
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	beq	.L1454
+	beq	.L1462
 	bl	INSERT_DATA_LIST
-.L1455:
+.L1463:
 	mvn	r7, #0
 	movw	r3, #3192
 	strh	r7, [r4, r5]	@ movhi
@@ -10088,8 +10157,8 @@ FtlGcFreeTempBlock:
 	strhgt	r7, [r4, r3]	@ movhi
 	movwgt	r3, #3148
 	strhgt	r2, [r4, r3]	@ movhi
-	b	.L1438
-.L1453:
+	b	.L1446
+.L1461:
 	uxth	r3, r5
 	mov	r7, #12
 	ldr	r8, [r4, #3196]
@@ -10098,12 +10167,12 @@ FtlGcFreeTempBlock:
 	add	r9, r8, r7
 	ldr	r1, [r9, #8]
 	cmp	r1, r2
-	bcc	.L1450
+	bcc	.L1458
 	mov	r2, #168
-	ldr	r1, .L1462+16
+	ldr	r1, .L1470+16
 	mov	r0, r10
-	bl	printk
-.L1450:
+	bl	sftl_printk
+.L1458:
 	mov	r2, #0
 	sub	r1, fp, #44
 	ldr	r0, [r9, #8]
@@ -10111,7 +10180,7 @@ FtlGcFreeTempBlock:
 	ldr	r2, [fp, #-44]
 	ldr	r0, [r8, r7]
 	cmp	r0, r2
-	bne	.L1451
+	bne	.L1459
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r2, #1
@@ -10120,24 +10189,24 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r9, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1461:
+.L1469:
 	bl	decrement_vpc_count
-.L1452:
+.L1460:
 	add	r5, r5, #1
-	b	.L1449
-.L1451:
+	b	.L1457
+.L1459:
 	ldr	r3, [r9, #4]
 	cmp	r2, r3
-	beq	.L1452
-	ldr	r3, .L1462+8
+	beq	.L1460
+	ldr	r3, .L1470+8
 	ldrh	r0, [r3]
-	b	.L1461
-.L1454:
+	b	.L1469
+.L1462:
 	bl	INSERT_FREE_LIST
-	b	.L1455
-.L1463:
+	b	.L1463
+.L1471:
 	.align	2
-.L1462:
+.L1470:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
@@ -10157,8 +10226,8 @@ FtlGcPageRecovery:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1466
-	ldr	r5, .L1466+4
+	ldr	r4, .L1474
+	ldr	r5, .L1474+4
 	ldrh	r1, [r4, #102]
 	mov	r0, r5
 	bl	FtlGcScanTempBlk
@@ -10173,9 +10242,9 @@ FtlGcPageRecovery:
 	mov	r3, #0
 	str	r3, [r4, #4000]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1467:
+.L1475:
 	.align	2
-.L1466:
+.L1474:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10191,7 +10260,7 @@ FtlPowerLostRecovery:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1469
+	ldr	r4, .L1477
 	mov	r6, #0
 	add	r5, r4, #2336
 	str	r6, [r4, #4012]
@@ -10211,9 +10280,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1470:
+.L1478:
 	.align	2
-.L1469:
+.L1477:
 	.word	.LANCHOR0
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -10228,7 +10297,7 @@ Ftl_gc_temp_data_write_back:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1478
+	ldr	r4, .L1486
 	mov	r3, #0
 	mov	r5, #0
 	mov	r6, #20
@@ -10236,14 +10305,14 @@ Ftl_gc_temp_data_write_back:
 	ldr	r1, [r4, #3164]
 	ldr	r0, [r4, #3836]
 	bl	FlashProgPages
-.L1472:
+.L1480:
 	ldr	r1, [r4, #3164]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1475
+	bhi	.L1483
 	ldr	r0, [r4, #3836]
 	bl	FtlGcBufFree
-	ldr	r3, .L1478+4
+	ldr	r3, .L1486+4
 	mov	r0, #0
 	str	r0, [r4, #3164]
 	ldrh	r3, [r3, #4]
@@ -10251,15 +10320,15 @@ Ftl_gc_temp_data_write_back:
 	ldmfdne	sp, {r4, r5, r6, fp, sp, pc}
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1477
-.L1475:
+	b	.L1485
+.L1483:
 	mul	r3, r6, r3
 	ldr	r2, [r4, #3836]
 	add	r5, r5, #1
 	ldr	r0, [r2, r3]
 	add	r1, r2, r3
 	cmn	r0, #1
-	bne	.L1473
+	bne	.L1481
 	movw	r1, #2444
 	ldr	ip, [r4, #2324]
 	ldrh	r2, [r4, r1]
@@ -10277,19 +10346,19 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1477:
+.L1485:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1473:
+.L1481:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1472
-.L1479:
+	b	.L1480
+.L1487:
 	.align	2
-.L1478:
+.L1486:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10305,39 +10374,39 @@ Ftl_get_new_temp_ppa:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1483
+	ldr	r4, .L1491
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1481
-	ldr	r3, .L1483+4
+	beq	.L1489
+	ldr	r3, .L1491+4
 	ldrh	r3, [r3, #4]
 	cmp	r3, #0
-	bne	.L1482
-.L1481:
+	bne	.L1490
+.L1489:
 	bl	FtlCacheWriteBack
 	mov	r0, #0
 	mov	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1483+4
+	ldr	r0, .L1491+4
 	strb	r5, [r4, #2452]
 	bl	allocate_data_superblock
 	movw	r3, #3192
 	strh	r5, [r4, r3]	@ movhi
-	ldr	r3, .L1483+8
+	ldr	r3, .L1491+8
 	strh	r5, [r3]	@ movhi
 	bl	l2p_flush
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1482:
-	ldr	r0, .L1483+4
+.L1490:
+	ldr	r0, .L1491+4
 	bl	get_new_active_ppa
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1484:
+.L1492:
 	.align	2
-.L1483:
+.L1491:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.word	.LANCHOR0+3200
@@ -10356,28 +10425,28 @@ rk_ftl_garbage_collect:
 	sub	fp, ip, #4
 	sub	sp, sp, #36
 	mov	r6, r0
-	ldr	r3, .L1598
+	ldr	r3, .L1606
 	ldr	r0, [r3, #3820]
 	mov	r5, r3
 	cmp	r0, #0
 	movne	r0, #0
-	bne	.L1485
+	bne	.L1493
 	add	r2, r3, #2336
 	ldrh	r2, [r2]
 	cmp	r2, #47
-	bls	.L1485
-	ldr	r2, .L1598+4
+	bls	.L1493
+	ldr	r2, .L1606+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1487
-.L1490:
+	bne	.L1495
+.L1498:
 	movw	r3, #3204
 	movw	r0, #65535
 	ldrh	r1, [r5, r3]
 	cmp	r1, r0
-	bne	.L1488
-.L1489:
+	bne	.L1496
+.L1497:
 	ldr	r3, [r5, #3152]
 	movw	r2, #2588
 	ldrh	r2, [r5, r2]
@@ -10386,16 +10455,16 @@ rk_ftl_garbage_collect:
 	add	r3, r3, r6, lsl #7
 	cmp	r2, r4
 	str	r3, [r5, #3152]
-	bne	.L1491
+	bne	.L1499
 	movw	r1, #2444
 	ldrh	r4, [r5, r1]
 	cmp	r4, r2
 	movne	r4, r2
-	bne	.L1491
+	bne	.L1499
 	movw	r2, #3202
 	ldrh	r7, [r5, r2]
 	cmp	r7, r4
-	bne	.L1491
+	bne	.L1499
 	movw	r10, #2344
 	ldrh	r2, [r5, r10]
 	cmp	r2, #24
@@ -10403,8 +10472,8 @@ rk_ftl_garbage_collect:
 	movcs	r2, #1024
 	cmp	r3, r2
 	movls	r4, r7
-	bls	.L1491
-	ldr	r3, .L1598+8
+	bls	.L1499
+	ldr	r3, .L1606+8
 	mov	r9, #0
 	str	r9, [r5, #3152]
 	strh	r9, [r3, #-12]	@ movhi
@@ -10412,73 +10481,33 @@ rk_ftl_garbage_collect:
 	cmp	r0, r7
 	mov	r4, r0
 	movne	r7, r0
-	bne	.L1493
+	bne	.L1501
 	movw	r8, #3150
 	ldrh	r2, [r5, r10]
 	ldrh	r3, [r5, r8]
 	cmp	r2, r3
-	bcs	.L1494
+	bcs	.L1502
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r4
-	beq	.L1496
+	beq	.L1504
 	mov	r0, r3
 	ldr	r3, [r5, #2324]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #7
-	bhi	.L1497
+	bhi	.L1505
 	mov	r0, r9
 	bl	List_get_gc_head_node
 	uxth	r7, r0
 	mov	r3, #128
 	strh	r3, [r5, r8]	@ movhi
 	cmp	r7, r4
-	beq	.L1496
-.L1493:
-	movw	r0, #3148
-	ldr	r3, [r5, #2324]
-	ldrh	r0, [r5, r0]
-	lsl	r1, r7, #1
-	movw	r2, #2344
-	ldrh	r3, [r3, r1]
-	mov	r4, r7
-	ldrh	r2, [r5, r2]
-	str	r0, [sp, #4]
-	ldr	r0, [r5, #2328]
-	ldrh	r1, [r0, r1]
-	ldr	r0, .L1598+12
-	str	r1, [sp]
-	mov	r1, r7
-	bl	printk
-	b	.L1496
-.L1487:
-	movw	r1, #2444
-	ldrh	r3, [r3, r1]
-	cmp	r3, r2
-	beq	.L1490
-	mov	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	beq	.L1490
-	mov	r0, #1
-	b	.L1485
-.L1488:
-	movw	r2, #3202
-	ldrh	ip, [r5, r2]
-	cmp	ip, r0
-	strheq	r1, [r5, r2]	@ movhi
-	mvneq	r2, #0
-	strheq	r2, [r5, r3]	@ movhi
-	b	.L1489
-.L1497:
-	mov	r3, #64
-.L1590:
-	strh	r3, [r5, r8]	@ movhi
-.L1496:
+	bne	.L1501
+.L1504:
 	bl	FtlGcReFreshBadBlk
-.L1491:
+.L1499:
 	movw	r2, #65535
 	sub	r3, r4, r2
 	clz	r3, r3
@@ -10487,88 +10516,129 @@ rk_ftl_garbage_collect:
 	movne	r6, #0
 	andeq	r6, r3, #1
 	cmp	r6, #0
-	beq	.L1499
+	beq	.L1507
 	movw	r3, #2344
 	ldrh	r3, [r5, r3]
 	cmp	r3, #24
 	movhi	r6, #1
-	bhi	.L1500
+	bhi	.L1508
 	ldrh	r6, [r5, #102]
 	cmp	r3, #16
 	lsrhi	r6, r6, #5
-	bhi	.L1500
+	bhi	.L1508
 	cmp	r3, #12
 	lsrhi	r6, r6, #4
-	bhi	.L1500
+	bhi	.L1508
 	cmp	r3, #8
 	lsrhi	r6, r6, #2
-.L1500:
+.L1508:
 	movw	r2, #3148
 	ldrh	r1, [r5, r2]
 	cmp	r1, r3
-	bcs	.L1504
+	bcs	.L1512
 	movw	r3, #2444
 	movw	r1, #65535
 	ldrh	r3, [r5, r3]
 	cmp	r3, r1
-	bne	.L1505
+	bne	.L1513
 	movw	r1, #3202
 	ldrh	r1, [r5, r1]
 	cmp	r1, r3
-	bne	.L1505
-	ldr	r3, .L1598+8
+	bne	.L1513
+	ldr	r3, .L1606+8
 	ldrh	r0, [r3, #-12]
 	cmp	r0, #0
-	bne	.L1506
+	bne	.L1514
 	ldr	r3, [r5, #2504]
 	ldr	r1, [r5, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1591
-.L1506:
+	bcs	.L1599
+.L1514:
 	movw	r3, #2572
 	movw	r2, #3148
 	ldrh	r3, [r5, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1591:
+.L1599:
 	strh	r3, [r5, r2]	@ movhi
 	mov	r3, #0
 	str	r3, [r5, #3160]
-.L1485:
+.L1493:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1494:
-	mov	r3, #80
-	b	.L1590
+.L1495:
+	movw	r1, #2444
+	ldrh	r3, [r3, r1]
+	cmp	r3, r2
+	beq	.L1498
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L1498
+	mov	r0, #1
+	b	.L1493
+.L1496:
+	movw	r2, #3202
+	ldrh	ip, [r5, r2]
+	cmp	ip, r0
+	strheq	r1, [r5, r2]	@ movhi
+	mvneq	r2, #0
+	strheq	r2, [r5, r3]	@ movhi
+	b	.L1497
 .L1505:
+	mov	r3, #64
+.L1598:
+	strh	r3, [r5, r8]	@ movhi
+	b	.L1504
+.L1502:
+	mov	r3, #80
+	b	.L1598
+.L1501:
+	movw	r0, #3148
+	ldr	r3, [r5, #2324]
+	ldrh	r0, [r5, r0]
+	lsl	r1, r7, #1
+	movw	r2, #2344
+	ldrh	r3, [r3, r1]
+	mov	r4, r7
+	ldrh	r2, [r5, r2]
+	str	r0, [sp, #4]
+	ldr	r0, [r5, #2328]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1606+12
+	str	r1, [sp]
+	mov	r1, r7
+	bl	sftl_printk
+	b	.L1504
+.L1513:
 	movw	r3, #2572
 	movw	r2, #3148
 	ldrh	r3, [r5, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
 	strh	r3, [r5, r2]	@ movhi
-.L1504:
+.L1512:
 	movw	r3, #3206
 	movw	r4, #65535
 	ldrh	r3, [r5, r3]
 	cmp	r3, #0
 	addne	r6, r6, #32
 	uxthne	r6, r6
-.L1510:
+.L1518:
 	movw	r3, #2588
 	ldrh	r2, [r5, r3]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1519
+	bne	.L1527
 	cmp	r4, r2
 	strhne	r4, [r5, r3]	@ movhi
-	bne	.L1521
+	bne	.L1529
 	movw	r2, #3202
 	ldrh	r3, [r5, r2]
 	cmp	r3, r4
-	beq	.L1521
+	beq	.L1529
 	ldr	r1, [r5, #2324]
 	lsl	r3, r3, #1
 	ldrh	r3, [r1, r3]
@@ -10581,27 +10651,27 @@ rk_ftl_garbage_collect:
 	strh	r1, [r5, r2]	@ movhi
 	mvn	r2, #0
 	strh	r2, [r5, r3]	@ movhi
-.L1521:
+.L1529:
 	movw	r7, #2588
 	mov	r3, #0
 	ldrh	r0, [r5, r7]
 	strb	r3, [r5, #2596]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1519
+	beq	.L1527
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	ldr	r8, .L1598+16
+	ldr	r8, .L1606+16
 	mvnne	r3, #0
 	strhne	r3, [r5, r7]	@ movhi
 	movw	r7, #2588
 	ldrh	r2, [r5, r7]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1519
+	beq	.L1527
 	mov	r0, r8
 	bl	make_superblock
-	ldr	r2, .L1598+8
+	ldr	r2, .L1606+8
 	mov	r3, #0
 	strh	r3, [r8, #2]	@ movhi
 	strb	r3, [r5, #2594]
@@ -10611,83 +10681,83 @@ rk_ftl_garbage_collect:
 	lsl	r3, r3, #1
 	ldrh	r3, [r1, r3]
 	strh	r3, [r2, #-8]	@ movhi
-.L1519:
+.L1527:
 	movw	r3, #2588
 	movw	r2, #2348
 	ldrh	r3, [r5, r3]
 	ldrh	r2, [r5, r2]
 	cmp	r2, r3
-	beq	.L1525
+	beq	.L1533
 	movw	r2, #2396
 	ldrh	r2, [r5, r2]
 	cmp	r2, r3
-	ldrne	r7, .L1598
+	ldrne	r7, .L1606
 	movne	r5, r7
-	bne	.L1526
-.L1525:
+	bne	.L1534
+.L1533:
 	mvn	r2, #0
 	movw	r3, #2588
-.L1596:
+.L1604:
 	strh	r2, [r5, r3]	@ movhi
-	ldr	r3, .L1598+8
-.L1597:
+	ldr	r3, .L1606+8
+.L1605:
 	ldrh	r0, [r3, #-12]
-	b	.L1485
-.L1499:
+	b	.L1493
+.L1507:
 	movw	r1, #2444
 	ldrh	r7, [r5, r1]
 	cmp	r7, r2
-	bne	.L1568
+	bne	.L1576
 	movw	r2, #3202
 	ldrh	r2, [r5, r2]
 	cmp	r2, r7
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L1568
+	beq	.L1576
 	movw	r3, #2588
 	ldrh	r3, [r5, r3]
 	cmp	r3, r7
-	beq	.L1511
-.L1516:
+	beq	.L1519
+.L1524:
 	mov	r4, r7
-.L1568:
+.L1576:
 	mov	r6, #1
-	b	.L1510
-.L1511:
+	b	.L1518
+.L1519:
 	movw	r3, #2344
 	movw	r2, #3148
 	ldrh	r8, [r5, r3]
 	ldrh	r3, [r5, r2]
 	str	r6, [r5, #3160]
-	ldr	r4, .L1598+8
+	ldr	r4, .L1606+8
 	cmp	r3, r8
-	bcs	.L1512
+	bcs	.L1520
 	ldrh	r3, [r4, #-12]
 	cmp	r3, #0
-	bne	.L1513
+	bne	.L1521
 	ldr	r3, [r5, #2504]
 	ldr	r1, [r5, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1592
-.L1513:
+	bcs	.L1600
+.L1521:
 	movw	r3, #2572
 	movw	r2, #3148
 	ldrh	r3, [r5, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1592:
+.L1600:
 	strh	r3, [r5, r2]	@ movhi
-.L1595:
+.L1603:
 	bl	FtlReadRefresh
 	ldrh	r0, [r4, #-12]
-	b	.L1485
-.L1512:
+	b	.L1493
+.L1520:
 	ldrh	r0, [r4, #-12]
 	cmp	r0, #0
-	bne	.L1516
+	bne	.L1524
 	movw	r3, #2572
 	ldrh	r6, [r5, r3]
 	add	r3, r6, r6, lsl #1
@@ -10703,20 +10773,20 @@ rk_ftl_garbage_collect:
 	mul	r3, r3, r1
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1517
+	ble	.L1525
 	sub	r6, r6, #1
 	cmp	r8, r6
-	bge	.L1595
-.L1517:
+	bge	.L1603
+.L1525:
 	cmp	r2, #0
-	bne	.L1516
+	bne	.L1524
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2344
 	ldrh	r0, [r5, r3]
 	add	r0, r0, #1
-	b	.L1485
-.L1529:
+	b	.L1493
+.L1537:
 	uxth	r2, r0
 	str	r1, [fp, #-52]
 	add	r10, r10, #1
@@ -10727,7 +10797,7 @@ rk_ftl_garbage_collect:
 	ldr	r2, [fp, #-48]
 	ldr	r1, [fp, #-52]
 	strhne	r10, [r9]	@ movhi
-	bne	.L1528
+	bne	.L1536
 	ldrh	lr, [r5, #32]
 	uxth	r10, r10
 	ldrh	r3, [r5, #102]
@@ -10738,78 +10808,78 @@ rk_ftl_garbage_collect:
 	ldrh	ip, [r0, r2]
 	add	lr, r3, r3, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1532
+	bgt	.L1540
 	cmp	ip, #8
 	cmphi	r10, #48
-	bls	.L1533
-	ldr	ip, .L1598+20
+	bls	.L1541
+	ldr	ip, .L1606+20
 	ldrh	ip, [ip]
 	cmp	ip, #35
-	bhi	.L1533
-.L1532:
-	ldr	lr, .L1598+24
+	bhi	.L1541
+.L1540:
+	ldr	lr, .L1606+24
 	mov	ip, #0
 	strh	ip, [lr]	@ movhi
-.L1533:
+.L1541:
 	ldrh	ip, [r0, r2]
 	movw	r0, #65535
 	cmp	r3, ip
 	cmple	r4, r0
 	moveq	r3, #1
 	movne	r3, #0
-	bne	.L1534
+	bne	.L1542
 	mvn	r2, #0
 	movw	r3, #2588
 	strh	r2, [r5, r3]	@ movhi
 	mov	r2, #0
 	movw	r3, #3156
-	b	.L1596
-.L1534:
+	b	.L1604
+.L1542:
 	cmp	ip, #0
-	bne	.L1535
+	bne	.L1543
 	bl	decrement_vpc_count
-	ldr	r3, .L1598+24
-	ldr	r2, .L1598+24
+	ldr	r3, .L1606+24
+	ldr	r2, .L1606+24
 	ldrh	r3, [r3]
 	add	r3, r3, #1
 	strh	r3, [r2]	@ movhi
-	b	.L1528
-.L1535:
+	b	.L1536
+.L1543:
 	strb	r3, [r5, #2596]
-	ldr	r3, .L1598+28
+	ldr	r3, .L1606+28
 	ldrh	r3, [r3]
 	cmp	r3, r1
-	bne	.L1536
+	bne	.L1544
 	movw	r2, #658
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1536:
-	ldr	r3, .L1598+40
+	ldr	r1, .L1606+32
+	ldr	r0, .L1606+36
+	bl	sftl_printk
+.L1544:
+	ldr	r3, .L1606+40
 	ldrh	r2, [r8]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1537
+	bne	.L1545
 	movw	r2, #659
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1537:
-	ldr	r3, .L1598+44
+	ldr	r1, .L1606+32
+	ldr	r0, .L1606+36
+	bl	sftl_printk
+.L1545:
+	ldr	r3, .L1606+44
 	ldrh	r2, [r8]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1538
+	bne	.L1546
 	mov	r2, #660
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1538:
-	ldr	r0, .L1598+16
+	ldr	r1, .L1606+32
+	ldr	r0, .L1606+36
+	bl	sftl_printk
+.L1546:
+	ldr	r0, .L1606+16
 	bl	make_superblock
 	ldrh	r2, [r8]
 	mov	r3, #0
-	ldr	r1, .L1598+48
+	ldr	r1, .L1606+48
 	ldr	r0, [r5, #2324]
 	lsl	r2, r2, #1
 	strh	r3, [r1]	@ movhi
@@ -10817,7 +10887,7 @@ rk_ftl_garbage_collect:
 	strh	r3, [r8, #2]	@ movhi
 	strb	r3, [r5, #2594]
 	strh	r2, [r1, #2]	@ movhi
-.L1527:
+.L1535:
 	bl	FtlReadRefresh
 	mov	r3, #1
 	str	r3, [r5, #3820]
@@ -10831,12 +10901,12 @@ rk_ftl_garbage_collect:
 	subgt	r6, r2, r3
 	mov	r3, #0
 	uxthgt	r6, r6
-.L1594:
+.L1602:
 	str	r3, [fp, #-52]
 	ldrh	r3, [fp, #-52]
-	ldr	r8, .L1598+16
+	ldr	r8, .L1606+16
 	cmp	r6, r3
-	bls	.L1548
+	bls	.L1556
 	ldrh	r9, [r8, #2]
 	mov	r2, #0
 	ldr	r3, [fp, #-52]
@@ -10846,8 +10916,8 @@ rk_ftl_garbage_collect:
 	add	r9, r9, r3
 	add	r3, r8, #14
 	mov	r8, r2
-	b	.L1549
-.L1542:
+	b	.L1557
+.L1550:
 	ldrh	r1, [r3, #2]!
 	add	r2, r2, #1
 	cmp	r1, r10
@@ -10857,22 +10927,22 @@ rk_ftl_garbage_collect:
 	addne	r8, r8, #1
 	uxthne	r8, r8
 	strne	r1, [lr, #4]
-.L1549:
+.L1557:
 	uxth	r1, r2
 	cmp	ip, r1
-	bhi	.L1542
+	bhi	.L1550
 	ldrb	r2, [r7, #2596]	@ zero_extendqisi2
 	mov	r1, r8
 	bl	FlashReadPages
 	mov	r3, #0
-.L1593:
+.L1601:
 	str	r3, [fp, #-48]
 	ldrh	r3, [fp, #-48]
 	cmp	r3, r8
 	ldrcs	r3, [fp, #-52]
 	addcs	r3, r3, #1
-	bcs	.L1594
-.L1547:
+	bcs	.L1602
+.L1555:
 	ldr	r3, [fp, #-48]
 	mov	r9, #20
 	mul	r9, r9, r3
@@ -10880,22 +10950,22 @@ rk_ftl_garbage_collect:
 	add	r2, r3, r9
 	ldr	r3, [r3, r9]
 	cmn	r3, #1
-	beq	.L1544
+	beq	.L1552
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1544
+	bne	.L1552
 	ldr	r3, [r10, #8]
 	cmn	r3, #1
-	bne	.L1545
+	bne	.L1553
 	mov	r2, #696
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
+	ldr	r1, .L1606+32
+	ldr	r0, .L1606+36
 	str	r3, [fp, #-60]
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [fp, #-60]
-.L1545:
+.L1553:
 	mov	r2, #0
 	mov	r0, r3
 	sub	r1, fp, #44
@@ -10905,8 +10975,8 @@ rk_ftl_garbage_collect:
 	add	r0, r0, r9
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1544
-	ldr	r3, .L1598+48
+	bne	.L1552
+	ldr	r3, .L1606+48
 	mov	r1, #20
 	ldr	lr, [r5, #3164]
 	ldr	r0, [r0, #16]
@@ -10934,7 +11004,7 @@ rk_ftl_garbage_collect:
 	str	r2, [r1, #12]
 	ldr	r2, [fp, #-44]
 	str	r2, [r10, #12]
-	ldr	r2, .L1598+44
+	ldr	r2, .L1606+44
 	ldrh	r1, [r2]
 	str	r2, [fp, #-60]
 	strh	r1, [r10, #2]	@ movhi
@@ -10951,109 +11021,109 @@ rk_ftl_garbage_collect:
 	ldr	r1, [r5, #3164]
 	ldr	r3, [fp, #-68]
 	cmp	r0, r1
-	beq	.L1546
+	beq	.L1554
 	ldr	r2, [fp, #-60]
 	ldrh	r2, [r2, #4]
 	cmp	r2, #0
-	bne	.L1544
-.L1546:
+	bne	.L1552
+.L1554:
 	str	r3, [fp, #-60]
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	ldr	r3, [fp, #-60]
-	ldrne	r2, .L1598
+	ldrne	r2, .L1606
 	movne	r1, #0
 	strne	r1, [r2, #3820]
-	bne	.L1597
-.L1544:
+	bne	.L1605
+.L1552:
 	ldr	r3, [fp, #-48]
 	add	r3, r3, #1
-	b	.L1593
-.L1548:
+	b	.L1601
+.L1556:
 	ldrh	r3, [r8, #2]
 	add	r6, r6, r3
 	ldr	r3, [fp, #-56]
 	uxth	r6, r6
 	cmp	r3, r6
 	strh	r6, [r8, #2]	@ movhi
-	ldr	r6, .L1598+8
-	bls	.L1550
+	ldr	r6, .L1606+8
+	bls	.L1558
 	ldrh	r2, [r6, #-10]
 	ldrh	r3, [r6, #-8]
 	cmp	r2, r3
-	bne	.L1551
-.L1550:
+	bne	.L1559
+.L1558:
 	ldr	r3, [r7, #3164]
 	cmp	r3, #0
-	beq	.L1552
+	beq	.L1560
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	movne	r3, #0
 	ldrhne	r0, [r6, #-12]
 	strne	r3, [r7, #3820]
-	bne	.L1485
-.L1552:
+	bne	.L1493
+.L1560:
 	ldrh	r1, [r6, #-10]
 	cmp	r1, #0
-	bne	.L1553
+	bne	.L1561
 	ldrh	r3, [r8]
 	ldr	r2, [r7, #2324]
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	cmp	r0, #0
-	beq	.L1553
+	beq	.L1561
 	strh	r1, [r2, r3]	@ movhi
 	ldrh	r0, [r8]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1553:
+.L1561:
 	mvn	r3, #0
 	strh	r3, [r8]	@ movhi
-.L1551:
-	ldr	r3, .L1598+52
+.L1559:
+	ldr	r3, .L1606+52
 	ldrh	r3, [r3]
 	cmp	r3, #2
-	bhi	.L1554
+	bhi	.L1562
 	ldrh	r6, [r7, #102]
-.L1526:
-	ldr	r8, .L1598+16
+.L1534:
+	ldr	r8, .L1606+16
 	movw	r3, #65535
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	bne	.L1527
+	bne	.L1535
 	add	r9, r8, #568
 	mov	r3, #0
 	str	r3, [r7, #3160]
-.L1528:
+.L1536:
 	ldrh	r10, [r9]
 	mov	r0, r10
 	bl	List_get_gc_head_node
-	ldr	r3, .L1598+16
+	ldr	r3, .L1606+16
 	uxth	r1, r0
 	strh	r1, [r3]	@ movhi
 	movw	r3, #65535
 	cmp	r1, r3
-	bne	.L1529
+	bne	.L1537
 	mov	r3, #0
 	mov	r0, #8
 	strh	r3, [r9]	@ movhi
-	b	.L1485
-.L1554:
+	b	.L1493
+.L1562:
 	ldrh	r0, [r6, #-12]
 	mov	r2, #0
 	str	r2, [r7, #3820]
 	cmp	r0, r2
 	addeq	r0, r3, #1
-	b	.L1485
-.L1599:
+	b	.L1493
+.L1607:
 	.align	2
-.L1598:
+.L1606:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3-4016
-	.word	.LC104
+	.word	.LC108
 	.word	.LANCHOR0+2588
 	.word	.LANCHOR0+3192
 	.word	.LANCHOR0+3156
@@ -11100,19 +11170,19 @@ FtlRead:
 	str	r2, [fp, #-68]
 	cmp	r0, #16
 	mov	r9, r3
-	bne	.L1602
+	bne	.L1610
 	mov	r2, r3
 	ldr	r1, [fp, #-68]
 	add	r0, r6, #256
 	bl	FtlVendorPartRead
 	str	r0, [fp, #-48]
-.L1601:
+.L1609:
 	ldr	r0, [fp, #-48]
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1602:
+.L1610:
 	ldr	r3, [fp, #-68]
-	ldr	r10, .L1635
+	ldr	r10, .L1643
 	add	r3, r1, r3
 	str	r3, [fp, #-56]
 	ldr	r2, [fp, #-56]
@@ -11120,12 +11190,12 @@ FtlRead:
 	cmp	r2, r3
 	mvnhi	r3, #0
 	strhi	r3, [fp, #-48]
-	bhi	.L1601
-	ldr	r3, .L1635+4
+	bhi	.L1609
+	ldr	r3, .L1643+4
 	ldr	r7, [r3]
 	cmn	r7, #1
 	streq	r7, [fp, #-48]
-	beq	.L1601
+	beq	.L1609
 	bl	FtlCacheWriteBack
 	ldrh	r4, [r10, #58]
 	mov	r0, r6
@@ -11152,25 +11222,25 @@ FtlRead:
 	str	r8, [fp, #-48]
 	add	r3, r3, r2
 	str	r3, [r10, #2508]
-.L1604:
+.L1612:
 	ldr	r3, [fp, #-52]
 	cmp	r3, #0
-	bne	.L1620
-	ldr	r3, .L1635
+	bne	.L1628
+	ldr	r3, .L1643
 	movw	r2, #3206
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	bne	.L1621
+	bne	.L1629
 	movw	r2, #2344
 	ldrh	r3, [r3, r2]
 	cmp	r3, #31
-	bhi	.L1601
-.L1621:
+	bhi	.L1609
+.L1629:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1601
-.L1620:
+	b	.L1609
+.L1628:
 	sub	r1, fp, #44
 	mov	r2, #0
 	mov	r0, r4
@@ -11178,7 +11248,7 @@ FtlRead:
 	ldr	r1, [fp, #-44]
 	cmn	r1, #1
 	moveq	r10, #0
-	beq	.L1606
+	beq	.L1614
 	ldr	r2, [r7, #3832]
 	mov	r0, #20
 	ldr	r3, [fp, #-60]
@@ -11186,7 +11256,7 @@ FtlRead:
 	mla	r2, r0, r5, r2
 	cmp	r4, r3
 	str	r1, [r2, #4]
-	bne	.L1610
+	bne	.L1618
 	ldr	r1, [r7, #3816]
 	mov	r0, r6
 	str	r2, [fp, #-80]
@@ -11202,7 +11272,7 @@ FtlRead:
 	cmp	r3, r10
 	str	r3, [fp, #-76]
 	streq	r9, [r2, #8]
-.L1611:
+.L1619:
 	ldrh	r1, [r7, #112]
 	ldr	r0, [r7, #3812]
 	str	r4, [r2, #16]
@@ -11211,8 +11281,8 @@ FtlRead:
 	bic	r1, r1, #3
 	add	r1, r0, r1
 	str	r1, [r2, #12]
-	b	.L1609
-.L1608:
+	b	.L1617
+.L1616:
 	mla	r0, r0, r4, r10
 	ldr	r2, [fp, #-56]
 	cmp	r2, r0
@@ -11221,29 +11291,29 @@ FtlRead:
 	cmp	r6, r0
 	movhi	r2, #0
 	cmp	r2, #0
-	beq	.L1607
+	beq	.L1615
 	sub	r0, r0, r6
 	mov	r1, #512
 	add	r0, r9, r0, lsl #9
 	bl	__memzero
-.L1607:
+.L1615:
 	add	r10, r10, #1
-.L1606:
+.L1614:
 	ldrh	r0, [r7, #58]
 	cmp	r10, r0
-	bcc	.L1608
-.L1609:
+	bcc	.L1616
+.L1617:
 	ldr	r3, [fp, #-52]
 	add	r4, r4, #1
 	subs	r3, r3, #1
 	str	r3, [fp, #-52]
-	beq	.L1613
+	beq	.L1621
 	ldrh	r2, [r7, #32]
 	cmp	r5, r2, lsl #2
-	bne	.L1604
-.L1613:
+	bne	.L1612
+.L1621:
 	cmp	r5, #0
-	beq	.L1604
+	beq	.L1612
 	mov	r2, #0
 	mov	r1, r5
 	ldr	r0, [r7, #3832]
@@ -11257,7 +11327,7 @@ FtlRead:
 	ldr	r3, [fp, #-76]
 	lsl	r3, r3, #9
 	str	r3, [fp, #-84]
-.L1619:
+.L1627:
 	mov	r3, #20
 	ldr	r2, [r7, #3832]
 	mul	ip, r3, r10
@@ -11265,20 +11335,20 @@ FtlRead:
 	add	r2, r2, ip
 	ldr	r1, [r2, #16]
 	cmp	r3, r1
-	bne	.L1615
+	bne	.L1623
 	ldr	r1, [r2, #8]
 	ldr	r2, [r7, #3816]
 	cmp	r1, r2
-	bne	.L1616
+	bne	.L1624
 	ldr	r3, [fp, #-80]
 	mov	r0, r9
 	ldr	r2, [fp, #-84]
 	str	ip, [fp, #-92]
 	add	r1, r1, r3
-.L1634:
+.L1642:
 	bl	ftl_memcpy
 	ldr	ip, [fp, #-92]
-.L1616:
+.L1624:
 	ldr	r2, [r7, #3832]
 	ldr	r0, [r2, ip]
 	add	lr, r2, ip
@@ -11289,21 +11359,21 @@ FtlRead:
 	streq	r1, [r7, #2708]
 	ldr	r2, [r2, ip]
 	cmp	r2, #256
-	bne	.L1618
+	bne	.L1626
 	ldr	r0, [lr, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1618:
+.L1626:
 	add	r10, r10, #1
 	cmp	r5, r10
-	bne	.L1619
+	bne	.L1627
 	mov	r5, #0
-	b	.L1604
-.L1610:
+	b	.L1612
+.L1618:
 	ldr	r3, [fp, #-64]
 	cmp	r4, r3
-	bne	.L1612
+	bne	.L1620
 	ldr	r1, [r7, #3808]
 	ldr	r3, [fp, #-56]
 	str	r1, [r2, #8]
@@ -11313,31 +11383,31 @@ FtlRead:
 	subeq	r1, r1, r6
 	addeq	r1, r9, r1, lsl #9
 	streq	r1, [r2, #8]
-	b	.L1611
-.L1612:
+	b	.L1619
+.L1620:
 	mul	r10, r4, r10
 	sub	r10, r10, r6
 	add	r10, r9, r10, lsl #9
 	str	r10, [r2, #8]
-	b	.L1611
-.L1615:
+	b	.L1619
+.L1623:
 	ldr	r3, [fp, #-64]
 	cmp	r3, r1
-	bne	.L1616
+	bne	.L1624
 	ldr	r1, [r2, #8]
 	ldr	r2, [r7, #3808]
 	cmp	r1, r2
-	bne	.L1616
+	bne	.L1624
 	ldrh	r0, [r7, #58]
 	str	ip, [fp, #-92]
 	ldr	r2, [fp, #-88]
 	mul	r0, r3, r0
 	sub	r0, r0, r6
 	add	r0, r9, r0, lsl #9
-	b	.L1634
-.L1636:
+	b	.L1642
+.L1644:
 	.align	2
-.L1635:
+.L1643:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.size	FtlRead, .-FtlRead
@@ -11397,27 +11467,27 @@ FtlWrite:
 	str	r2, [fp, #-76]
 	cmp	r0, #16
 	str	r3, [fp, #-80]
-	bne	.L1640
+	bne	.L1648
 	mov	r2, r3
 	ldr	r1, [fp, #-76]
 	add	r0, r8, #256
 	bl	FtlVendorPartWrite
-.L1639:
+.L1647:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1640:
+.L1648:
 	ldr	r3, [fp, #-76]
-	ldr	r9, .L1704
+	ldr	r9, .L1712
 	add	r6, r1, r3
 	ldr	r3, [r9, #140]
 	cmp	r6, r3
 	mvnhi	r0, #0
-	bhi	.L1639
-	ldr	r5, .L1704+4
+	bhi	.L1647
+	ldr	r5, .L1712+4
 	ldr	r0, [r5]
 	cmn	r0, #1
-	beq	.L1639
-	ldr	r3, .L1704+8
+	beq	.L1647
+	ldr	r3, .L1712+8
 	mov	r2, #2048
 	ldrh	r4, [r9, #58]
 	mov	r0, r8
@@ -11439,66 +11509,66 @@ FtlWrite:
 	ldr	r3, [r9, #2516]
 	add	r3, r3, r2
 	str	r3, [r9, #2516]
-	beq	.L1642
+	beq	.L1650
 	ldr	r3, [r10, #16]
 	ldr	r2, [fp, #-68]
 	cmp	r2, r3
-	beq	.L1643
+	beq	.L1651
 	bl	FtlCacheWriteBack
-.L1642:
+.L1650:
 	ldr	r3, [r5, #8]
-	ldr	r4, .L1704+12
+	ldr	r4, .L1712+12
 	cmp	r3, #0
-	beq	.L1645
+	beq	.L1653
 	ldrh	r3, [r4, #4]
 	add	r0, r4, #48
 	cmp	r3, #0
 	moveq	r4, r0
-.L1645:
+.L1653:
 	ldr	r5, [fp, #-68]
-	ldr	r7, .L1704
-.L1646:
+	ldr	r7, .L1712
+.L1654:
 	ldr	r3, [fp, #-72]
 	cmp	r3, #0
-	beq	.L1680
+	beq	.L1688
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r7, #32]
 	cmp	r2, r3
-	bcc	.L1647
+	bcc	.L1655
 	mov	r2, #1012
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1647:
+	ldr	r1, .L1712+16
+	ldr	r0, .L1712+20
+	bl	sftl_printk
+.L1655:
 	ldrh	r9, [r4, #4]
 	cmp	r9, #0
-	bne	.L1648
+	bne	.L1656
 	bl	FtlCacheWriteBack
-	ldr	r3, .L1704+12
-	ldr	r6, .L1704+4
+	ldr	r3, .L1712+12
+	ldr	r6, .L1712+4
 	cmp	r4, r3
-	bne	.L1649
+	bne	.L1657
 	add	r0, r4, #48
 	ldrh	r9, [r0, #4]
 	cmp	r9, #0
-	bne	.L1650
+	bne	.L1658
 	bl	allocate_new_data_superblock
 	str	r9, [r6, #8]
-.L1650:
-	ldr	r0, .L1704+12
+.L1658:
+	ldr	r0, .L1712+12
 	bl	allocate_new_data_superblock
-	ldr	r4, .L1704+12
+	ldr	r4, .L1712+12
 	ldr	r3, [r6, #8]
 	add	r0, r4, #48
 	cmp	r3, #0
 	movne	r4, r0
-.L1651:
+.L1659:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1648
+	bne	.L1656
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1648:
+.L1656:
 	ldrh	r3, [r4, #4]
 	ldr	r2, [fp, #-72]
 	cmp	r3, r2
@@ -11511,53 +11581,53 @@ FtlWrite:
 	str	r3, [fp, #-104]
 	ldrh	r3, [r7, #32]
 	cmp	r2, r3
-	bcc	.L1652
+	bcc	.L1660
 	movw	r2, #1045
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1652:
+	ldr	r1, .L1712+16
+	ldr	r0, .L1712+20
+	bl	sftl_printk
+.L1660:
 	mov	r9, #0
-.L1653:
+.L1661:
 	ldr	r3, [fp, #-104]
 	cmp	r9, r3
-	bne	.L1674
-.L1654:
+	bne	.L1682
+.L1662:
 	ldr	r3, [r7, #3988]
 	cmp	r3, #0
-	beq	.L1675
+	beq	.L1683
 	ldr	r3, [fp, #-72]
 	subs	r9, r9, #1
 	sub	r3, r3, #1
 	str	r3, [fp, #-72]
-	bne	.L1675
-.L1680:
+	bne	.L1683
+.L1688:
 	ldr	r3, [fp, #-88]
 	mov	r0, #0
 	ldr	r2, [fp, #-68]
 	sub	r1, r3, r2
 	bl	rk_ftl_garbage_collect
-	ldr	r2, .L1704
+	ldr	r2, .L1712
 	movw	r3, #2344
 	ldrh	r3, [r2, r3]
 	cmp	r3, #15
-	bhi	.L1677
-	ldr	r4, .L1704+24
-	ldr	r5, .L1704+28
-.L1700:
+	bhi	.L1685
+	ldr	r4, .L1712+24
+	ldr	r5, .L1712+28
+.L1708:
 	ldrh	r3, [r4]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1681
+	bne	.L1689
 	ldrh	r2, [r5]
 	cmp	r2, r3
-	bne	.L1681
+	bne	.L1689
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1681:
-	ldr	r3, .L1704+32
+.L1689:
+	ldr	r3, .L1712+32
 	mov	r1, #1
 	mov	r2, #128
 	mov	r0, r1
@@ -11567,12 +11637,12 @@ FtlWrite:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	ldr	r3, .L1704+36
+	ldr	r3, .L1712+36
 	ldrh	r3, [r3]
 	cmp	r3, #8
-	bls	.L1700
-	b	.L1677
-.L1643:
+	bls	.L1708
+	b	.L1685
+.L1651:
 	ldr	r3, [r9, #2520]
 	mov	r1, r4
 	mov	r0, r8
@@ -11590,11 +11660,11 @@ FtlWrite:
 	add	r0, r3, r0, lsl #9
 	bl	ftl_memcpy
 	cmp	r6, #0
-	bne	.L1644
-.L1677:
+	bne	.L1652
+.L1685:
 	mov	r0, #0
-	b	.L1639
-.L1644:
+	b	.L1647
+.L1652:
 	ldr	r3, [fp, #-76]
 	add	r8, r8, r4
 	sub	r3, r3, r4
@@ -11607,20 +11677,20 @@ FtlWrite:
 	str	r3, [fp, #-68]
 	bl	FtlCacheWriteBack
 	str	r6, [fp, #-72]
-	b	.L1642
-.L1649:
+	b	.L1650
+.L1657:
 	ldrh	r2, [r3, #4]
 	str	r9, [r6, #8]
 	cmp	r2, #0
 	movne	r4, r3
-	bne	.L1648
+	bne	.L1656
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-	b	.L1651
-.L1674:
+	b	.L1659
+.L1682:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1654
+	beq	.L1662
 	mov	r2, #0
 	sub	r1, fp, #64
 	mov	r0, r5
@@ -11650,10 +11720,10 @@ FtlWrite:
 	cmp	r5, r2
 	cmpne	r5, r3
 	ldrh	r3, [r7, #58]
-	bne	.L1655
+	bne	.L1663
 	ldr	r2, [fp, #-68]
 	cmp	r5, r2
-	bne	.L1656
+	bne	.L1664
 	mov	r1, r3
 	mov	r0, r8
 	str	r3, [fp, #-84]
@@ -11665,34 +11735,34 @@ FtlWrite:
 	cmp	r3, r2
 	movcs	r3, r2
 	str	r3, [fp, #-84]
-.L1657:
+.L1665:
 	ldrh	r3, [r7, #58]
 	ldr	r2, [fp, #-84]
 	cmp	r2, r3
 	ldr	r3, [fp, #-68]
-	bne	.L1658
+	bne	.L1666
 	cmp	r5, r3
 	ldr	r3, [r7, #3840]
 	add	r6, r3, r6
 	ldreq	r3, [fp, #-80]
-	beq	.L1702
+	beq	.L1710
 	ldr	r3, [fp, #-84]
 	mul	r2, r3, r5
 	ldr	r3, [fp, #-80]
 	sub	r2, r2, r8
 	add	r2, r3, r2, lsl #9
 	str	r2, [r6, #8]
-.L1660:
+.L1668:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r7, #32]
 	cmp	r2, r3
-	bcc	.L1671
+	bcc	.L1679
 	movw	r2, #1119
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1671:
-	ldr	r3, .L1704+40
+	ldr	r1, .L1712+16
+	ldr	r0, .L1712+20
+	bl	sftl_printk
+.L1679:
+	ldr	r3, .L1712+40
 	add	r9, r9, #1
 	ldr	r2, [fp, #-100]
 	ldr	r1, [fp, #-96]
@@ -11709,8 +11779,8 @@ FtlWrite:
 	str	r3, [r10, #12]
 	ldrh	r3, [r4]
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1653
-.L1656:
+	b	.L1661
+.L1664:
 	ldr	r2, [fp, #-76]
 	smulbb	r3, r3, r5
 	add	r2, r8, r2
@@ -11719,8 +11789,8 @@ FtlWrite:
 	str	r3, [fp, #-84]
 	mov	r3, #0
 	str	r3, [fp, #-92]
-	b	.L1657
-.L1658:
+	b	.L1665
+.L1666:
 	cmp	r5, r3
 	ldr	r3, [r7, #3840]
 	ldreq	r2, [r7, #3816]
@@ -11729,7 +11799,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [fp, #-64]
 	cmn	r3, #1
-	beq	.L1663
+	beq	.L1671
 	str	r3, [fp, #-56]
 	mov	r1, #1
 	ldr	r3, [r7, #3840]
@@ -11747,31 +11817,31 @@ FtlWrite:
 	ldreq	r3, [r7, #2708]
 	addeq	r3, r3, #1
 	streq	r3, [r7, #2708]
-	beq	.L1667
+	beq	.L1675
 	ldr	r3, [r10, #8]
 	cmp	r5, r3
-	beq	.L1666
+	beq	.L1674
 	ldr	r3, [r7, #2708]
 	mov	r2, r5
-	ldr	r0, .L1704+44
+	ldr	r0, .L1712+44
 	add	r3, r3, #1
 	str	r3, [r7, #2708]
 	ldr	r1, [r10, #8]
-	bl	printk
-.L1666:
+	bl	sftl_printk
+.L1674:
 	ldr	r3, [r10, #8]
 	cmp	r5, r3
-	beq	.L1667
+	beq	.L1675
 	movw	r2, #1098
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1667:
+	ldr	r1, .L1712+16
+	ldr	r0, .L1712+20
+	bl	sftl_printk
+.L1675:
 	ldr	r3, [fp, #-68]
 	cmp	r5, r3
 	ldr	r3, [fp, #-84]
 	lsl	r2, r3, #9
-	bne	.L1668
+	bne	.L1676
 	ldr	r3, [r7, #3840]
 	ldr	r1, [fp, #-80]
 	add	r3, r3, r6
@@ -11781,25 +11851,25 @@ FtlWrite:
 	bl	ftl_memcpy
 	ldr	r3, [fp, #-88]
 	cmp	r5, r3
-	bne	.L1660
-.L1669:
+	bne	.L1668
+.L1677:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
 	ldrne	r3, [r7, #3840]
 	addne	r6, r3, r6
-	ldrne	r3, .L1704+8
+	ldrne	r3, .L1712+8
 	strne	r6, [r7, #3988]
 	strne	r4, [r3, #-4036]
-	b	.L1660
-.L1663:
+	b	.L1668
+.L1671:
 	ldr	r3, [r7, #3840]
 	mov	r1, #0
 	ldrh	r2, [r7, #110]
 	add	r3, r3, r6
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1667
-.L1668:
+	b	.L1675
+.L1676:
 	ldrh	r1, [r7, #58]
 	ldr	r0, [fp, #-80]
 	ldr	r3, [r7, #3840]
@@ -11809,18 +11879,18 @@ FtlWrite:
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
 	bl	ftl_memcpy
-	b	.L1669
-.L1655:
+	b	.L1677
+.L1663:
 	ldr	r2, [r7, #3840]
 	mul	r3, r5, r3
 	add	r6, r2, r6
 	ldr	r2, [fp, #-80]
 	sub	r3, r3, r8
 	add	r3, r2, r3, lsl #9
-.L1702:
+.L1710:
 	str	r3, [r6, #8]
-	b	.L1660
-.L1675:
+	b	.L1668
+.L1683:
 	mov	r3, r4
 	mov	r2, #0
 	mov	r1, r9
@@ -11828,19 +11898,19 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [fp, #-72]
 	cmp	r3, r9
-	bcs	.L1678
+	bcs	.L1686
 	movw	r2, #1134
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1678:
+	ldr	r1, .L1712+16
+	ldr	r0, .L1712+20
+	bl	sftl_printk
+.L1686:
 	ldr	r3, [fp, #-72]
 	sub	r3, r3, r9
 	str	r3, [fp, #-72]
-	b	.L1646
-.L1705:
+	b	.L1654
+.L1713:
 	.align	2
-.L1704:
+.L1712:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3
@@ -11852,7 +11922,7 @@ FtlWrite:
 	.word	.LANCHOR0+3150
 	.word	.LANCHOR0+2344
 	.word	-3947
-	.word	.LC105
+	.word	.LC109
 	.size	FtlWrite, .-FtlWrite
 	.align	2
 	.global	sftl_write
@@ -11904,7 +11974,7 @@ FtlLoadSysInfo:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1729
+	ldr	r4, .L1737
 	mov	r1, #0
 	ldr	r3, [r4, #3280]
 	add	r6, r4, #2576
@@ -11918,37 +11988,37 @@ FtlLoadSysInfo:
 	ldrh	r0, [r6]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1709
-.L1717:
+	bne	.L1717
+.L1725:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1709:
-	ldr	r7, .L1729+4
+.L1717:
+	ldr	r7, .L1737+4
 	mov	r1, #1
-	ldr	r8, .L1729+8
+	ldr	r8, .L1737+8
 	bl	FtlGetLastWrittenPage
 	sxth	r5, r0
 	add	r0, r0, #1
 	strh	r0, [r6, #2]	@ movhi
-.L1711:
+.L1719:
 	cmp	r5, #0
-	bge	.L1714
+	bge	.L1722
 	movw	r2, #1437
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1713:
+	ldr	r1, .L1737+12
+	ldr	r0, .L1737+16
+	bl	sftl_printk
+.L1721:
 	ldrh	r3, [r4, #40]
 	ldrh	r2, [r4, #110]
 	add	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1716
+	bcs	.L1724
 	movw	r2, #1439
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1716:
-	ldr	r5, .L1729+20
+	ldr	r1, .L1737+12
+	ldr	r0, .L1737+16
+	bl	sftl_printk
+.L1724:
+	ldr	r5, .L1737+20
 	mov	r2, #48
 	ldr	r1, [r4, #3268]
 	mov	r0, r5
@@ -11970,16 +12040,16 @@ FtlLoadSysInfo:
 	add	r1, r3, r1
 	bl	ftl_memcpy
 	ldr	r2, [r4, #2268]
-	ldr	r3, .L1729+8
+	ldr	r3, .L1737+8
 	cmp	r2, r3
-	bne	.L1717
+	bne	.L1725
 	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
 	ldrh	r3, [r4, #54]
 	ldrh	r7, [r5, #8]
 	cmp	r2, r3
 	strh	r7, [r6, #6]	@ movhi
-	bne	.L1717
-	ldr	r3, .L1729+24
+	bne	.L1725
+	ldr	r3, .L1737+24
 	ldrh	r2, [r4, #58]
 	ldr	r6, [r4, #44]
 	str	r7, [r3, #-4016]
@@ -11996,15 +12066,15 @@ FtlLoadSysInfo:
 	cmp	r7, r6
 	movw	r3, #2572
 	strh	r0, [r4, r3]	@ movhi
-	bls	.L1718
+	bls	.L1726
 	movw	r2, #1461
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1718:
+	ldr	r1, .L1737+12
+	ldr	r0, .L1737+16
+	bl	sftl_printk
+.L1726:
 	ldrh	r0, [r5, #14]
 	movw	r3, #2348
-	ldr	r1, .L1729+28
+	ldr	r1, .L1737+28
 	mvn	ip, #0
 	strh	r0, [r4, r3]	@ movhi
 	ldrh	r3, [r5, #16]
@@ -12059,37 +12129,37 @@ FtlLoadSysInfo:
 	strhi	r3, [r4, #2544]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1721
-	ldr	r0, .L1729+28
+	beq	.L1729
+	ldr	r0, .L1737+28
 	bl	make_superblock
-.L1721:
+.L1729:
 	movw	r3, #2396
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1722
-	ldr	r0, .L1729+32
+	beq	.L1730
+	ldr	r0, .L1737+32
 	bl	make_superblock
-.L1722:
+.L1730:
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1723
-	ldr	r0, .L1729+36
+	beq	.L1731
+	ldr	r0, .L1737+36
 	bl	make_superblock
-.L1723:
+.L1731:
 	movw	r3, #2588
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1724
-	ldr	r0, .L1729+40
+	beq	.L1732
+	ldr	r0, .L1737+40
 	bl	make_superblock
-.L1724:
+.L1732:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1714:
+.L1722:
 	ldrh	r3, [r6]
 	mov	r2, #1
 	mov	r1, r2
@@ -12101,23 +12171,23 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmn	r3, #1
-	beq	.L1712
+	beq	.L1720
 	ldr	r3, [r4, #3280]
 	ldr	r3, [r3]
 	cmp	r3, r8
-	bne	.L1712
+	bne	.L1720
 	ldr	r3, [r4, #3284]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	beq	.L1713
-.L1712:
+	beq	.L1721
+.L1720:
 	sub	r5, r5, #1
 	sxth	r5, r5
-	b	.L1711
-.L1730:
+	b	.L1719
+.L1738:
 	.align	2
-.L1729:
+.L1737:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.word	1179929683
@@ -12142,7 +12212,7 @@ FtlSysBlkInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1747
+	ldr	r4, .L1755
 	mov	r2, #0
 	movw	r3, #4008
 	ldrh	r0, [r4, #36]
@@ -12153,16 +12223,16 @@ FtlSysBlkInit:
 	ldrh	r2, [r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1732
-.L1734:
+	bne	.L1740
+.L1742:
 	mvn	r8, #0
-.L1731:
+.L1739:
 	mov	r0, r8
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1732:
+.L1740:
 	bl	FtlLoadSysInfo
 	subs	r8, r0, #0
-	bne	.L1734
+	bne	.L1742
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12176,24 +12246,24 @@ FtlSysBlkInit:
 	mov	r3, r8
 	ldr	r2, [r4, #2492]
 	mov	r0, #12
-.L1735:
+.L1743:
 	cmp	r3, r1
-	bge	.L1740
+	bge	.L1748
 	mla	ip, r0, r3, r2
 	ldr	ip, [ip, #4]
 	cmp	ip, #0
-	bge	.L1736
-.L1740:
-	ldr	r5, .L1747+4
+	bge	.L1744
+.L1748:
+	ldr	r5, .L1755+4
 	cmp	r3, r1
 	ldrh	r2, [r5, #28]
 	add	r7, r5, #80
 	add	r2, r2, #1
 	strh	r2, [r5, #28]	@ movhi
-	bge	.L1746
-.L1737:
-	ldr	r6, .L1747+8
-	ldr	r0, .L1747+12
+	bge	.L1754
+.L1745:
+	ldr	r6, .L1755+8
+	ldr	r0, .L1755+12
 	bl	FtlSuperblockPowerLostFix
 	mov	r0, r6
 	bl	FtlSuperblockPowerLostFix
@@ -12219,7 +12289,7 @@ FtlSysBlkInit:
 	sub	r1, r1, ip
 	strh	r1, [r0, r2]	@ movhi
 	ldrh	r2, [r4, #102]
-	ldr	r0, .L1747+16
+	ldr	r0, .L1755+16
 	strb	r3, [r4, #2402]
 	strh	r2, [r6, #2]	@ movhi
 	strh	r3, [r6, #4]	@ movhi
@@ -12232,28 +12302,28 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1741
-.L1736:
+	b	.L1749
+.L1744:
 	add	r3, r3, #1
-	b	.L1735
-.L1746:
+	b	.L1743
+.L1754:
 	movw	r3, #4008
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L1737
-.L1741:
+	bne	.L1745
+.L1749:
 	movw	r3, #2348
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1742
+	beq	.L1750
 	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	bne	.L1742
-	ldr	r6, .L1747+8
+	bne	.L1750
+	ldr	r6, .L1755+8
 	ldrh	r3, [r6, #4]
 	cmp	r3, #0
-	bne	.L1742
+	bne	.L1750
 	bl	FtlGcRefreshBlock
 	movw	r3, #2396
 	ldrh	r0, [r4, r3]
@@ -12262,15 +12332,15 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	r0, r6
 	bl	allocate_new_data_superblock
-.L1742:
+.L1750:
 	ldrh	r3, [r5, #28]
 	tst	r3, #31
-	bne	.L1731
+	bne	.L1739
 	bl	FtlVpcCheckAndModify
-	b	.L1731
-.L1748:
+	b	.L1739
+.L1756:
 	.align	2
-.L1747:
+.L1755:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2268
 	.word	.LANCHOR0+2396
@@ -12289,7 +12359,7 @@ ftl_low_format:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1773
+	ldr	r4, .L1781
 	mov	r3, #0
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
@@ -12297,36 +12367,36 @@ ftl_low_format:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L1750
+	beq	.L1758
 	bl	FtlMakeBbt
-.L1750:
-	ldr	r0, .L1773+4
+.L1758:
+	ldr	r0, .L1781+4
 	mov	r2, #0
-.L1751:
+.L1759:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1752
+	blt	.L1760
 	ldrh	r6, [r4, #40]
 	mov	r5, #0
-.L1753:
+.L1761:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1754
+	bhi	.L1762
 	ldrh	r1, [r4, #32]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1755
-.L1759:
+	bge	.L1763
+.L1767:
 	mov	r0, #0
 	mov	r6, r0
-.L1756:
+.L1764:
 	ldrh	r2, [r4, #40]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1760
+	bhi	.L1768
 	ldrh	r3, [r4, #42]
 	movw	r9, #2572
 	ldrh	r5, [r4, #32]
@@ -12343,7 +12413,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r6, r3
-	ble	.L1761
+	ble	.L1769
 	mov	r1, r5
 	sub	r0, r10, r6
 	bl	__udivsi3
@@ -12351,10 +12421,10 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r4, r9]	@ movhi
-.L1761:
+.L1769:
 	ldrh	r3, [r4, #94]
 	cmp	r3, #0
-	beq	.L1763
+	beq	.L1771
 	movw	r2, #2572
 	ldrh	r1, [r4, r2]
 	add	r1, r1, r3, lsr #1
@@ -12365,9 +12435,9 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r7, r3
 	strhlt	r3, [r4, r2]	@ movhi
-.L1763:
+.L1771:
 	movw	r3, #2572
-	ldr	r6, .L1773+8
+	ldr	r6, .L1781+8
 	ldrh	r2, [r4, r3]
 	mvn	r7, #0
 	ldr	r3, [r4, #2504]
@@ -12384,7 +12454,7 @@ ftl_low_format:
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r5, .L1773+12
+	ldr	r5, .L1781+12
 	lsl	r2, r2, #1
 	sub	r5, r5, #240
 	bl	ftl_memset
@@ -12407,29 +12477,29 @@ ftl_low_format:
 	ldr	r0, [r4, #24]
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1765:
+.L1773:
 	mov	r0, r8
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1766
+	bne	.L1774
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r7, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1765
-.L1752:
+	b	.L1773
+.L1760:
 	ldr	ip, [r4, #3816]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [ip, r3, lsl #2]
 	ldr	r1, [r4, #3808]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1751
-.L1754:
+	b	.L1759
+.L1762:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12437,8 +12507,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1753
-.L1755:
+	b	.L1761
+.L1763:
 	mov	r0, r5
 	bl	__udivsi3
 	ldr	r3, [r4, #132]
@@ -12448,25 +12518,25 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1757:
+.L1765:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1759
+	bls	.L1767
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1757
-.L1760:
+	b	.L1765
+.L1768:
 	mov	r1, #0
 	uxth	r0, r0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	mov	r0, r5
 	uxth	r6, r6
-	b	.L1756
-.L1766:
+	b	.L1764
+.L1774:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -12477,7 +12547,7 @@ ftl_low_format:
 	ldr	r2, [r4, #2324]
 	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L1773+16
+	ldr	r2, .L1781+16
 	movw	r1, #2396
 	strb	r3, [r4, #2402]
 	strh	r3, [r2, #2]	@ movhi
@@ -12488,21 +12558,21 @@ ftl_low_format:
 	strh	r3, [r4, r1]	@ movhi
 	mov	r3, #1
 	strb	r3, [r4, #2404]
-.L1767:
+.L1775:
 	mov	r0, r8
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1768
+	bne	.L1776
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	strh	r7, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1767
-.L1768:
+	b	.L1775
+.L1776:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -12515,7 +12585,7 @@ ftl_low_format:
 	movw	r3, #2444
 	strh	r5, [r4, r3]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L1773+20
+	ldr	r3, .L1781+20
 	mov	r2, #0
 	strh	r2, [r3, #2]	@ movhi
 	ldr	r2, [r6, #-4016]
@@ -12530,13 +12600,13 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L1773+24
+	ldreq	r3, .L1781+24
 	moveq	r2, #1
 	streq	r2, [r3]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1774:
+.L1782:
 	.align	2
-.L1773:
+.L1781:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR3
@@ -12557,13 +12627,13 @@ sftl_init:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1781
+	ldr	r4, .L1789
 	mvn	r3, #0
-	ldr	r5, .L1781+4
-	ldr	r1, .L1781+8
-	ldr	r0, .L1781+12
+	ldr	r5, .L1789+4
+	ldr	r1, .L1789+8
+	ldr	r0, .L1789+12
 	str	r3, [r5]
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r4
 	bl	FtlConstantsInit
 	bl	FtlMemInit
@@ -12572,29 +12642,29 @@ sftl_init:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L1779
+	bne	.L1787
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L1779
+	bne	.L1787
 	mov	r3, #1
 	str	r3, [r5]
 	movw	r3, #2344
 	ldrh	r3, [r4, r3]
 	cmp	r3, #15
-	bhi	.L1779
+	bhi	.L1787
 	movw	r4, #8129
-.L1778:
+.L1786:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1778
-.L1779:
+	bne	.L1786
+.L1787:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1782:
+.L1790:
 	.align	2
-.L1781:
+.L1789:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC70
@@ -12627,7 +12697,7 @@ rk_sftl_vendor_dev_ops_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1787
+	ldr	r2, .L1795
 	ldr	r3, [r2, #-4012]
 	cmp	r3, #0
 	streq	r0, [r2, #-4012]
@@ -12635,9 +12705,9 @@ rk_sftl_vendor_dev_ops_register:
 	streq	r1, [r2, #-4008]
 	mvnne	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1788:
+.L1796:
 	.align	2
-.L1787:
+.L1795:
 	.word	.LANCHOR3
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
@@ -12653,35 +12723,28 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #65536
-	ldr	r4, .L1798
+	ldr	r4, .L1806
 	bl	ftl_malloc
 	cmp	r0, #0
 	str	r0, [r4, #-4004]
 	mvneq	r9, #11
-	beq	.L1789
-	ldr	r8, .L1798+4
+	beq	.L1797
+	ldr	r8, .L1806+4
 	mov	r6, #0
 	mov	r5, r6
 	mov	r7, r6
-.L1793:
+.L1801:
 	ldr	r3, [r4, #-4012]
 	mov	r1, #128
 	ldr	r2, [r4, #-4004]
 	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L1791
-	ldr	r1, [r4, #-4004]
-	ldr	r0, .L1798+8
-	add	r2, r1, #61440
-	ldr	r3, [r1, #4]
-	ldr	r2, [r2, #4092]
-	ldr	r1, [r1]
-	bl	printk
+	bne	.L1799
 	ldr	r2, [r4, #-4004]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1792
+	bne	.L1800
 	add	r1, r2, #61440
 	ldr	r3, [r2, #4]
 	ldr	r1, [r1, #4092]
@@ -12693,26 +12756,26 @@ rk_sftl_vendor_storage_init:
 	cmp	r1, #0
 	movne	r6, r7
 	movne	r5, r3
-.L1792:
+.L1800:
 	add	r7, r7, #1
 	cmp	r7, #2
-	bne	.L1793
+	bne	.L1801
 	cmp	r5, #0
-	beq	.L1794
+	beq	.L1802
 	ldr	r3, [r4, #-4012]
 	mov	r1, #128
 	lsl	r0, r6, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L1789
-.L1791:
+	beq	.L1797
+.L1799:
 	ldr	r0, [r4, #-4004]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
 	str	r3, [r4, #-4004]
-	b	.L1789
-.L1794:
+	b	.L1797
+.L1802:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
@@ -12722,18 +12785,17 @@ rk_sftl_vendor_storage_init:
 	str	r2, [r3, #4]
 	str	r8, [r3]
 	str	r2, [r1, #4092]
-	ldr	r2, .L1798+12
+	ldr	r2, .L1806+8
 	strh	r5, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1789:
+.L1797:
 	mov	r0, r9
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L1799:
+.L1807:
 	.align	2
-.L1798:
+.L1806:
 	.word	.LANCHOR3
 	.word	1380668996
-	.word	.LC106
 	.word	-1032
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
@@ -12748,26 +12810,26 @@ rk_sftl_vendor_read:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1806
+	ldr	r3, .L1814
 	mov	r4, r0
 	mov	r0, r1
 	ldr	ip, [r3, #-4004]
 	cmp	ip, #0
 	ldrhne	lr, [ip, #10]
 	movne	r3, #0
-	bne	.L1802
-.L1805:
+	bne	.L1810
+.L1813:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1803:
+.L1811:
 	add	r3, r3, #1
-.L1802:
+.L1810:
 	cmp	r3, lr
-	bcs	.L1805
+	bcs	.L1813
 	add	r1, ip, r3, lsl #3
 	ldrh	r5, [r1, #16]
 	cmp	r5, r4
-	bne	.L1803
+	bne	.L1811
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -12778,9 +12840,9 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1807:
+.L1815:
 	.align	2
-.L1806:
+.L1814:
 	.word	.LANCHOR3
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
@@ -12797,23 +12859,23 @@ rk_sftl_vendor_write:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	ip, r1
-	ldr	r8, .L1827
+	ldr	r8, .L1835
 	mov	r9, r2
 	ldr	r4, [r8, #-4004]
 	cmp	r4, #0
-	beq	.L1823
+	beq	.L1831
 	ldrh	r2, [r4, #10]
 	add	r7, r9, #63
 	ldrh	r3, [r4, #8]
 	bic	r7, r7, #63
 	mov	r5, #0
 	str	r3, [fp, #-44]
-.L1810:
+.L1818:
 	cmp	r5, r2
-	bcc	.L1818
+	bcc	.L1826
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1823
+	bhi	.L1831
 	add	r3, r4, r2, lsl #3
 	uxth	r7, r7
 	strh	r0, [r3, #16]	@ movhi
@@ -12845,31 +12907,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r8, #-4008]
-	b	.L1826
-.L1818:
+	b	.L1834
+.L1826:
 	add	r6, r4, r5, lsl #3
 	ldrh	r3, [r6, #16]
 	cmp	r3, r0
 	str	r3, [fp, #-48]
-	bne	.L1811
+	bne	.L1819
 	ldrh	r1, [r6, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r9, r1
 	str	r1, [fp, #-52]
-	bls	.L1812
+	bls	.L1820
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1823
+	bhi	.L1831
 	ldrh	r8, [r6, #18]
 	sub	r2, r2, #1
 	str	r2, [fp, #-56]
-.L1813:
+.L1821:
 	ldr	r2, [fp, #-56]
 	add	r6, r6, #8
 	cmp	r5, r2
-	bcc	.L1814
+	bcc	.L1822
 	ldrh	r2, [fp, #-48]
 	add	r5, r4, r5, lsl #3
 	uxth	r8, r8
@@ -12888,7 +12950,7 @@ rk_sftl_vendor_write:
 	strh	r8, [r4, #12]	@ movhi
 	add	r7, r7, r3
 	strh	r7, [r4, #14]	@ movhi
-.L1815:
+.L1823:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -12900,19 +12962,19 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1827
+	ldr	r3, .L1835
 	ldr	r3, [r3, #-4008]
-.L1826:
+.L1834:
 	ldr	r0, [fp, #-44]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L1808:
+.L1816:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1814:
+.L1822:
 	ldrh	r10, [r6, #20]
 	add	r0, r3, r8
 	ldrh	r2, [r6, #16]
@@ -12931,8 +12993,8 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	ip, [fp, #-64]
 	ldr	r3, [fp, #-60]
-	b	.L1813
-.L1812:
+	b	.L1821
+.L1820:
 	add	r5, r4, r5, lsl #3
 	mov	r2, r9
 	mov	r1, ip
@@ -12940,16 +13002,16 @@ rk_sftl_vendor_write:
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r9, [r6, #20]	@ movhi
-	b	.L1815
-.L1811:
+	b	.L1823
+.L1819:
 	add	r5, r5, #1
-	b	.L1810
-.L1823:
+	b	.L1818
+.L1831:
 	mvn	r0, #0
-	b	.L1808
-.L1828:
+	b	.L1816
+.L1836:
 	.align	2
-.L1827:
+.L1835:
 	.word	.LANCHOR3
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
@@ -12970,18 +13032,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L1829
-	ldr	r3, .L1854
+	beq	.L1837
+	ldr	r3, .L1862
 	cmp	r6, r3
-	beq	.L1832
+	beq	.L1840
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1833
-.L1849:
+	beq	.L1841
+.L1857:
 	mvn	r5, #13
-	b	.L1831
-.L1832:
-	ldr	r6, .L1854+4
+	b	.L1839
+.L1840:
+	ldr	r6, .L1862+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -12992,31 +13054,31 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1839
+	bne	.L1847
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1857
 	ldr	r2, [r4]
-	ldr	r3, .L1854+8
+	ldr	r3, .L1862+8
 	cmp	r2, r3
-	beq	.L1837
-.L1838:
+	beq	.L1845
+.L1846:
 	mvn	r5, #0
-.L1831:
+.L1839:
 	mov	r0, r4
 	bl	kfree
-.L1829:
+.L1837:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1837:
+.L1845:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	beq	.L1838
+	beq	.L1846
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
@@ -13030,15 +13092,15 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1849
+	bne	.L1857
 	mov	r0, r5
 	mov	r1, r4
 	bl	arm_copy_to_user
 	subs	r5, r0, #0
-	beq	.L1831
-	b	.L1849
-.L1833:
-	ldr	r6, .L1854+4
+	beq	.L1839
+	b	.L1857
+.L1841:
+	ldr	r6, .L1862+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13049,20 +13111,20 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1839
+	bne	.L1847
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1857
 	ldr	r2, [r4]
-	ldr	r3, .L1854+8
+	ldr	r3, .L1862+8
 	cmp	r2, r3
-	bne	.L1838
+	bne	.L1846
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1838
+	bhi	.L1846
 	mov	r3, sp
 	add	r2, r2, #8
 	and	r6, r6, r3
@@ -13076,26 +13138,26 @@ rk_sftl_vendor_storage_ioctl:
 	cmp	r3, #0
 	movne	r1, r2
 	movne	r0, r4
-	bne	.L1853
+	bne	.L1861
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1857
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
 	mov	r5, r0
-	b	.L1831
-.L1839:
+	b	.L1839
+.L1847:
 	mov	r1, #8
-.L1853:
+.L1861:
 	bl	__memzero
-	b	.L1849
-.L1855:
+	b	.L1857
+.L1863:
 	.align	2
-.L1854:
+.L1862:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13112,12 +13174,12 @@ rk_sftl_vendor_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L1857
+	ldr	r0, .L1865
 	bl	misc_register
 	ldmfd	sp, {fp, sp, pc}
-.L1858:
+.L1866:
 	.align	2
-.L1857:
+.L1865:
 	.word	.LANCHOR2+12
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
 	.global	ftl_temp_buf
@@ -13271,141 +13333,141 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3927, %object
-	.size	__func__.3927, 17
-__func__.3927:
+	.type	__func__.3929, %object
+	.size	__func__.3929, 17
+__func__.3929:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.3922, %object
-	.size	__func__.3922, 17
-__func__.3922:
+	.type	__func__.3924, %object
+	.size	__func__.3924, 17
+__func__.3924:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.3958, %object
-	.size	__func__.3958, 17
-__func__.3958:
+	.type	__func__.3960, %object
+	.size	__func__.3960, 17
+__func__.3960:
 	.ascii	"List_remove_node\000"
-	.type	__func__.3990, %object
-	.size	__func__.3990, 22
-__func__.3990:
+	.type	__func__.3992, %object
+	.size	__func__.3992, 22
+__func__.3992:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.4096, %object
-	.size	__func__.4096, 22
-__func__.4096:
+	.type	__func__.4098, %object
+	.size	__func__.4098, 22
+__func__.4098:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.4419, %object
-	.size	__func__.4419, 16
-__func__.4419:
+	.type	__func__.4421, %object
+	.size	__func__.4421, 16
+__func__.4421:
 	.ascii	"make_superblock\000"
-	.type	__func__.4594, %object
-	.size	__func__.4594, 19
-__func__.4594:
+	.type	__func__.4596, %object
+	.size	__func__.4596, 19
+__func__.4596:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.14923, %object
-	.size	__func__.14923, 15
-__func__.14923:
+	.type	__func__.14933, %object
+	.size	__func__.14933, 15
+__func__.14933:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.14940, %object
-	.size	__func__.14940, 15
-__func__.14940:
+	.type	__func__.14950, %object
+	.size	__func__.14950, 15
+__func__.14950:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.4032, %object
-	.size	__func__.4032, 26
-__func__.4032:
+	.type	__func__.4034, %object
+	.size	__func__.4034, 26
+__func__.4034:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.3536, %object
-	.size	__func__.3536, 11
-__func__.3536:
+	.type	__func__.3538, %object
+	.size	__func__.3538, 11
+__func__.3538:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.3762, %object
-	.size	__func__.3762, 14
-__func__.3762:
+	.type	__func__.3764, %object
+	.size	__func__.3764, 14
+__func__.3764:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.3999, %object
-	.size	__func__.3999, 16
-__func__.3999:
+	.type	__func__.4001, %object
+	.size	__func__.4001, 16
+__func__.4001:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.4057, %object
-	.size	__func__.4057, 31
-__func__.4057:
+	.type	__func__.4059, %object
+	.size	__func__.4059, 31
+__func__.4059:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.4071, %object
-	.size	__func__.4071, 16
-__func__.4071:
+	.type	__func__.4073, %object
+	.size	__func__.4073, 16
+__func__.4073:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.4043, %object
-	.size	__func__.4043, 15
-__func__.4043:
+	.type	__func__.4045, %object
+	.size	__func__.4045, 15
+__func__.4045:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.4113, %object
-	.size	__func__.4113, 9
-__func__.4113:
+	.type	__func__.4115, %object
+	.size	__func__.4115, 9
+__func__.4115:
 	.ascii	"log2phys\000"
-	.type	__func__.4328, %object
-	.size	__func__.4328, 16
-__func__.4328:
+	.type	__func__.4330, %object
+	.size	__func__.4330, 16
+__func__.4330:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.4481, %object
-	.size	__func__.4481, 14
-__func__.4481:
+	.type	__func__.4483, %object
+	.size	__func__.4483, 14
+__func__.4483:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.4208, %object
-	.size	__func__.4208, 14
-__func__.4208:
+	.type	__func__.4210, %object
+	.size	__func__.4210, 14
+__func__.4210:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.4440, %object
-	.size	__func__.4440, 18
-__func__.4440:
+	.type	__func__.4442, %object
+	.size	__func__.4442, 18
+__func__.4442:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.4566, %object
-	.size	__func__.4566, 25
-__func__.4566:
+	.type	__func__.4568, %object
+	.size	__func__.4568, 25
+__func__.4568:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.4607, %object
-	.size	__func__.4607, 16
-__func__.4607:
+	.type	__func__.4609, %object
+	.size	__func__.4609, 16
+__func__.4609:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.4614, %object
-	.size	__func__.4614, 20
-__func__.4614:
+	.type	__func__.4616, %object
+	.size	__func__.4616, 20
+__func__.4616:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.4362, %object
-	.size	__func__.4362, 22
-__func__.4362:
+	.type	__func__.4364, %object
+	.size	__func__.4364, 22
+__func__.4364:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.3805, %object
-	.size	__func__.3805, 11
-__func__.3805:
+	.type	__func__.3807, %object
+	.size	__func__.3807, 11
+__func__.3807:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.4186, %object
-	.size	__func__.4186, 15
-__func__.4186:
+	.type	__func__.4188, %object
+	.size	__func__.4188, 15
+__func__.4188:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.4465, %object
-	.size	__func__.4465, 21
-__func__.4465:
+	.type	__func__.4467, %object
+	.size	__func__.4467, 21
+__func__.4467:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.4587, %object
-	.size	__func__.4587, 29
-__func__.4587:
+	.type	__func__.4589, %object
+	.size	__func__.4589, 29
+__func__.4589:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.3660, %object
-	.size	__func__.3660, 13
-__func__.3660:
+	.type	__func__.3662, %object
+	.size	__func__.3662, 13
+__func__.3662:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.4684, %object
-	.size	__func__.4684, 19
-__func__.4684:
+	.type	__func__.4686, %object
+	.size	__func__.4686, 19
+__func__.4686:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.4790, %object
-	.size	__func__.4790, 23
-__func__.4790:
+	.type	__func__.4792, %object
+	.size	__func__.4792, 23
+__func__.4792:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.3688, %object
-	.size	__func__.3688, 9
-__func__.3688:
+	.type	__func__.3690, %object
+	.size	__func__.3690, 9
+__func__.3690:
 	.ascii	"FtlWrite\000"
-	.type	__func__.4265, %object
-	.size	__func__.4265, 15
-__func__.4265:
+	.type	__func__.4267, %object
+	.size	__func__.4267, 15
+__func__.4267:
 	.ascii	"FtlLoadSysInfo\000"
 	.space	2
 	.type	rk_sftl_vendor_storage_fops, %object
@@ -13435,7 +13497,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC107
+	.word	.LC110
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14219,70 +14281,76 @@ check_vpc_table:
 .LC74:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC75:
-	.ascii	"\0014\000"
+	.ascii	"%s %p + 0x%x:\000"
 .LC76:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"0x%08x,\000"
 .LC77:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"0x%04x,\000"
 .LC78:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"0x%02x,\000"
 .LC79:
-	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+	.ascii	"\012\000"
 .LC80:
+	.ascii	"prog read error: = %x\012\000"
+.LC81:
+	.ascii	"prog read s error: = %x %x %x\012\000"
+.LC82:
+	.ascii	"prog read d error: = %x %x %x\012\000"
+.LC83:
+	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+.LC84:
 	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
 	.ascii	"\000"
-.LC81:
+.LC85:
 	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
-.LC82:
+.LC86:
 	.ascii	"%s error allocating memory. return -1\012\000"
-.LC83:
+.LC87:
 	.ascii	"region_id = %x phyAddr = %x\012\000"
-.LC84:
+.LC88:
 	.ascii	"spare:\000"
-.LC85:
+.LC89:
 	.ascii	"map_ppn:\000"
-.LC86:
+.LC90:
 	.ascii	"FtlMapWritePage error = %x \012\000"
-.LC87:
+.LC91:
 	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
-.LC88:
+.LC92:
 	.ascii	"ftl_scan_all_data = %x\012\000"
-.LC89:
+.LC93:
 	.ascii	"scan lpa = %x ppa= %x\012\000"
-.LC90:
+.LC94:
 	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC91:
+.LC95:
 	.ascii	"...%s enter...\012\000"
-.LC92:
+.LC96:
 	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
-.LC93:
+.LC97:
 	.ascii	"free blk vpc error %x = %x  %x\012\000"
-.LC94:
+.LC98:
 	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
-.LC95:
+.LC99:
 	.ascii	"FtlBbmTblFlush error:%x\012\000"
-.LC96:
+.LC100:
 	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
-.LC97:
+.LC101:
 	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
-.LC98:
+.LC102:
 	.ascii	"decrement_vpc_count %x = %d\012\000"
-.LC99:
+.LC103:
 	.ascii	"spuer block %x vpn is 0\012 \000"
-.LC100:
+.LC104:
 	.ascii	"no ect\000"
-.LC101:
+.LC105:
 	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
-.LC102:
+.LC106:
 	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
-.LC103:
+.LC107:
 	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
-.LC104:
+.LC108:
 	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
-.LC105:
+.LC109:
 	.ascii	"FtlWrite: lpa error:%x %x\012\000"
-.LC106:
-	.ascii	"\0013vendor storage %x,%x,%x\012\000"
-.LC107:
-	.ascii	"vendor_storage\000"
\ No newline at end of file
+.LC110:
+	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index 0ea7136a78fc..cfc34a4080f7 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -2,7 +2,7 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-08-07
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -15,7 +15,41 @@
 	.eabi_attribute 34, 1
 	.eabi_attribute 18, 4
 	.file	"rk_sftl.c"
+	.syntax unified
+	.macro	it, cond
+	.endm
+	.macro	itt, cond
+	.endm
+	.macro	ite, cond
+	.endm
+	.macro	ittt, cond
+	.endm
+	.macro	itte, cond
+	.endm
+	.macro	itet, cond
+	.endm
+	.macro	itee, cond
+	.endm
+	.macro	itttt, cond
+	.endm
+	.macro	ittte, cond
+	.endm
+	.macro	ittet, cond
+	.endm
+	.macro	ittee, cond
+	.endm
+	.macro	itett, cond
+	.endm
+	.macro	itete, cond
+	.endm
+	.macro	iteet, cond
+	.endm
+	.macro	iteee, cond
+	.endm
+
 	.global	__aeabi_uidiv
+	.thumb
+	.syntax unified
 	.text
 	.align	1
 	.syntax unified
@@ -397,7 +431,7 @@ FtlBbmMapBadBlock:
 	str	r0, [sp]
 	mov	r1, r5
 	ldr	r0, .L40+4
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #158]
 	movs	r0, #0
 	adds	r3, r3, #1
@@ -971,7 +1005,7 @@ INSERT_DATA_LIST:
 	ldr	r1, .L117+4
 	ldr	r0, .L117+8
 	pop	{r3, lr}
-	b	printk
+	b	sftl_printk
 .L115:
 	pop	{r3, pc}
 .L118:
@@ -1086,7 +1120,7 @@ INSERT_FREE_LIST:
 	ldr	r1, .L130+4
 	ldr	r0, .L130+8
 	pop	{r3, lr}
-	b	printk
+	b	sftl_printk
 .L128:
 	pop	{r3, pc}
 .L131:
@@ -1126,7 +1160,7 @@ List_remove_node:
 	movw	r2, #379
 	ldr	r1, .L138+4
 	ldr	r0, .L138+8
-	bl	printk
+	bl	sftl_printk
 .L133:
 	ldr	r3, [r8]
 	movw	r1, #65535
@@ -1337,7 +1371,7 @@ List_update_data_list:
 	mov	r2, #470
 	ldr	r1, .L169+4
 	ldr	r0, .L169+8
-	bl	printk
+	bl	sftl_printk
 .L163:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
@@ -1370,7 +1404,7 @@ List_update_data_list:
 	movw	r2, #481
 	ldr	r1, .L169+4
 	ldr	r0, .L169+8
-	bl	printk
+	bl	sftl_printk
 .L166:
 	ldrh	r3, [r4, #2336]
 	mov	r0, r5
@@ -1442,7 +1476,7 @@ select_l2p_ram_region:
 	mov	r2, #784
 	ldr	r1, .L181+4
 	ldr	r0, .L181+8
-	bl	printk
+	bl	sftl_printk
 	b	.L173
 .L174:
 	adds	r1, r1, #1
@@ -1726,7 +1760,7 @@ make_superblock:
 	movw	r2, #2097
 	ldr	r1, .L220+4
 	ldr	r0, .L220+8
-	bl	printk
+	bl	sftl_printk
 .L216:
 	ldrh	r9, [r6, #32]
 	add	r7, r4, #16
@@ -2603,7 +2637,7 @@ GetSwlReplaceBlock:
 	ldrh	r3, [r3, fp]
 	str	r3, [sp]
 	ldr	r3, [r4, #2564]
-	bl	printk
+	bl	sftl_printk
 	movs	r3, #1
 	str	r3, [r4, #3160]
 	b	.L275
@@ -2689,7 +2723,7 @@ get_new_active_ppa:
 	movw	r2, #2707
 	ldr	r1, .L309
 	ldr	r0, .L309+4
-	bl	printk
+	bl	sftl_printk
 .L296:
 	ldr	r5, .L309+8
 	ldrh	r2, [r4, #2]
@@ -2699,14 +2733,14 @@ get_new_active_ppa:
 	movw	r2, #2708
 	ldr	r1, .L309
 	ldr	r0, .L309+4
-	bl	printk
+	bl	sftl_printk
 .L297:
 	ldrh	r3, [r4, #4]
 	cbnz	r3, .L298
 	movw	r2, #2709
 	ldr	r1, .L309
 	ldr	r0, .L309+4
-	bl	printk
+	bl	sftl_printk
 .L298:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	movs	r3, #0
@@ -2749,7 +2783,7 @@ get_new_active_ppa:
 	movw	r2, #2730
 	ldr	r1, .L309
 	ldr	r0, .L309+4
-	bl	printk
+	bl	sftl_printk
 .L295:
 	mov	r0, r6
 	pop	{r3, r4, r5, r6, r7, pc}
@@ -3079,7 +3113,7 @@ FtlGcRefreshBlock:
 	mov	r1, r0
 	mov	r4, r0
 	ldr	r0, .L356
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, .L356+4
 	ldrh	r0, [r3, #3202]
 	cmp	r4, r0
@@ -3126,7 +3160,7 @@ FtlGcMarkBadPhyBlk:
 	mov	r6, r0
 	ldrh	r1, [r4, #3206]
 	ldr	r0, .L362+4
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, #3206]
@@ -3247,27 +3281,62 @@ rknand_print_hex:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r3, r4, lr}
-	.save {r4, lr}
-	.pad #16
-	muls	r3, r2, r3
-	movs	r4, #0
-	str	r1, [sp, #4]
-	mov	r1, r0
-	str	r4, [sp, #12]
-	str	r3, [sp, #8]
-	movs	r3, #16
-	str	r2, [sp]
-	movs	r2, #2
-	ldr	r0, .L377
-	bl	print_hex_dump
-	add	sp, sp, #16
-	@ sp needed
-	pop	{r4, pc}
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r6, #0
+	ldr	fp, .L385+16
+	mov	r10, r0
+	mov	r7, r1
+	mov	r8, r2
+	mov	r9, r3
+	mov	r5, r6
+	mov	r4, r6
+.L377:
+	cmp	r4, r9
+	bcc	.L383
+	ldr	r0, .L385
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	sftl_printk
+.L383:
+	cbnz	r5, .L378
+	mov	r3, r6
+	mov	r2, r7
+	mov	r1, r10
+	ldr	r0, .L385+4
+	bl	sftl_printk
 .L378:
+	cmp	r8, #4
+	bne	.L379
+	ldr	r1, [r7, r4, lsl #2]
+	ldr	r0, .L385+8
+.L384:
+	adds	r5, r5, #1
+	bl	sftl_printk
+	cmp	r5, #15
+	bls	.L382
+	movs	r5, #0
+	ldr	r0, .L385
+	bl	sftl_printk
+.L382:
+	adds	r4, r4, #1
+	add	r6, r6, r8
+	b	.L377
+.L379:
+	cmp	r8, #2
+	ittee	eq
+	ldrheq	r1, [r7, r4, lsl #1]
+	moveq	r0, fp
+	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
+	ldrne	r0, .L385+12
+	b	.L384
+.L386:
 	.align	2
-.L377:
+.L385:
+	.word	.LC79
 	.word	.LC75
+	.word	.LC76
+	.word	.LC78
+	.word	.LC77
 	.fnend
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	1
@@ -3285,30 +3354,30 @@ FlashReadPages:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r8, r1
-	ldr	r5, .L397
+	ldr	r5, .L405
 	mov	r4, r0
 	movs	r6, #0
-	ldr	r10, .L397+4
+	ldr	r10, .L405+4
 	ldrh	r9, [r5, #12]
-	ldr	fp, .L397+8
-.L380:
+	ldr	fp, .L405+8
+.L388:
 	cmp	r6, r8
-	bne	.L387
+	bne	.L395
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L387:
+.L395:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L381
+	cbz	r3, .L389
 	ldr	r3, [r4, #12]
-	cbnz	r3, .L382
-.L381:
-	movs	r2, #76
+	cbnz	r3, .L390
+.L389:
+	movs	r2, #101
 	mov	r1, r10
 	mov	r0, fp
-	bl	printk
-.L382:
+	bl	sftl_printk
+.L390:
 	mov	r2, sp
 	add	r1, sp, #4
 	mov	r0, r4
@@ -3322,7 +3391,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L384
+	bne	.L392
 	ldr	r3, [r4, #12]
 	ldr	r2, [r4, #8]
 	ldr	r1, [sp, #4]
@@ -3333,27 +3402,27 @@ FlashReadPages:
 	add	r1, r1, r9
 	blx	r7
 	adds	r0, r0, #1
-	beq	.L385
+	beq	.L393
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	adds	r2, r2, #1
-	bne	.L384
+	bne	.L392
 	ldr	r2, [r3, #8]
 	adds	r2, r2, #1
-	bne	.L384
+	bne	.L392
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L384
-.L385:
+	beq	.L392
+.L393:
 	mov	r3, #-1
 	str	r3, [r4]
-.L384:
+.L392:
 	adds	r6, r6, #1
 	adds	r4, r4, #20
-	b	.L380
-.L398:
+	b	.L388
+.L406:
 	.align	2
-.L397:
+.L405:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
 	.word	.LC1
@@ -3373,7 +3442,7 @@ FtlLoadFactoryBbt:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r6, #0
-	ldr	r4, .L409
+	ldr	r4, .L417
 	movw	r10, #61664
 	ldr	r3, [r4, #3280]
 	add	r7, r4, #162
@@ -3381,23 +3450,23 @@ FtlLoadFactoryBbt:
 	addw	r9, r4, #3260
 	str	r3, [r4, #3268]
 	str	r8, [r4, #3272]
-.L400:
+.L408:
 	ldrh	r3, [r4, #54]
 	cmp	r6, r3
-	bcc	.L405
+	bcc	.L413
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L405:
+.L413:
 	ldrh	r5, [r4, #98]
 	movw	r3, #65535
 	strh	r3, [r7, #2]!	@ movhi
-.L402:
+.L410:
 	ldrh	r3, [r4, #98]
 	subs	r5, r5, #1
 	uxth	r5, r5
 	sub	r2, r3, #16
 	cmp	r5, r2
-	ble	.L403
+	ble	.L411
 	mla	r3, r6, r3, r5
 	movs	r2, #1
 	mov	r1, r2
@@ -3407,17 +3476,17 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	beq	.L402
+	beq	.L410
 	ldrh	r3, [r8]
 	cmp	r3, r10
-	bne	.L402
+	bne	.L410
 	strh	r5, [r7]	@ movhi
-.L403:
+.L411:
 	adds	r6, r6, #1
-	b	.L400
-.L410:
+	b	.L408
+.L418:
 	.align	2
-.L409:
+.L417:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
@@ -3432,7 +3501,7 @@ FtlGetLastWrittenPage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L419
+	ldr	r3, .L427
 	cmp	r1, #1
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
@@ -3447,7 +3516,7 @@ FtlGetLastWrittenPage:
 	it	ne
 	ldrhne	r4, [r3, #102]
 	add	r0, sp, #4
-	ldr	r3, .L419+4
+	ldr	r3, .L427+4
 	subs	r4, r4, #1
 	sxth	r5, r4
 	str	r3, [sp, #12]
@@ -3458,17 +3527,17 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L414
+	bne	.L422
 	mov	r8, #0
-.L415:
+.L423:
 	cmp	r8, r5
-	ble	.L418
-.L414:
+	ble	.L426
+.L422:
 	mov	r0, r5
 	add	sp, sp, #88
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L418:
+.L426:
 	add	r4, r8, r5
 	mov	r2, r6
 	add	r4, r4, r4, lsr #31
@@ -3481,20 +3550,20 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L416
+	bne	.L424
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	bne	.L416
+	bne	.L424
 	subs	r4, r4, #1
 	sxth	r5, r4
-	b	.L415
-.L416:
+	b	.L423
+.L424:
 	adds	r4, r4, #1
 	sxth	r8, r4
-	b	.L415
-.L420:
+	b	.L423
+.L428:
 	.align	2
-.L419:
+.L427:
 	.word	.LANCHOR0
 	.word	ftl_temp_buf
 	.fnend
@@ -3513,7 +3582,7 @@ FlashProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	fp, r1
-	ldr	r6, .L451
+	ldr	r6, .L459
 	mov	r9, r2
 	mov	r4, r0
 	mov	r5, r0
@@ -3522,28 +3591,28 @@ FlashProgPages:
 	sub	sp, sp, #44
 	ldrh	r10, [r6, #12]
 	str	r3, [sp, #4]
-.L422:
+.L430:
 	cmp	r8, fp
-	bne	.L430
+	bne	.L438
 	ldr	r3, [sp, #4]
 	cmp	r3, #0
-	bne	.L437
-.L450:
+	bne	.L445
+.L458:
 	movs	r0, #0
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L430:
+.L438:
 	ldr	r3, [r5, #8]
-	cbz	r3, .L423
+	cbz	r3, .L431
 	ldr	r3, [r5, #12]
-	cbnz	r3, .L424
-.L423:
-	movs	r2, #106
-	ldr	r1, .L451+4
-	ldr	r0, .L451+8
-	bl	printk
-.L424:
+	cbnz	r3, .L432
+.L431:
+	movs	r2, #131
+	ldr	r1, .L459+4
+	ldr	r0, .L459+8
+	bl	sftl_printk
+.L432:
 	add	r2, sp, #12
 	add	r1, sp, #16
 	mov	r0, r5
@@ -3554,12 +3623,12 @@ FlashProgPages:
 	ldrb	r0, [sp, #12]	@ zero_extendqisi2
 	ldr	r7, [r6, #3252]
 	blx	r7
-	cbnz	r0, .L425
+	cbnz	r0, .L433
 	str	r0, [r5]
-.L426:
+.L434:
 	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L428
+	bne	.L436
 	ldr	r3, [r5, #12]
 	ldr	r2, [r5, #8]
 	ldr	r1, [sp, #16]
@@ -3569,18 +3638,18 @@ FlashProgPages:
 	ldr	r7, [r6, #3252]
 	add	r1, r1, r10
 	blx	r7
-	cbz	r0, .L428
+	cbz	r0, .L436
 	mov	r3, #-1
 	str	r3, [r5]
-.L428:
+.L436:
 	add	r8, r8, #1
 	adds	r5, r5, #20
-	b	.L422
-.L425:
+	b	.L430
+.L433:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L426
-.L435:
+	b	.L434
+.L443:
 	movs	r3, #0
 	mov	r2, r9
 	str	r3, [r7]
@@ -3594,61 +3663,61 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	r3, [sp, #20]
 	adds	r2, r3, #1
-	bne	.L432
+	bne	.L440
 	ldr	r1, [r4, #4]
 	mov	r0, fp
 	str	r3, [sp, #4]
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [sp, #4]
 	str	r3, [r4]
-.L432:
+.L440:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L433
+	cbz	r3, .L441
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3288]
 	cmp	r2, r3
-	beq	.L433
+	beq	.L441
 	ldr	r1, [r4, #4]
-	ldr	r0, .L451+12
-	bl	printk
+	ldr	r0, .L459+12
+	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L433:
+.L441:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L434
+	cbz	r3, .L442
 	ldr	r2, [r3]
 	ldr	r3, [r7]
 	cmp	r2, r3
-	beq	.L434
+	beq	.L442
 	ldr	r1, [r4, #4]
-	ldr	r0, .L451+16
-	bl	printk
+	ldr	r0, .L459+16
+	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L434:
+.L442:
 	adds	r5, r5, #1
 	adds	r4, r4, #20
-.L431:
+.L439:
 	cmp	r8, r5
-	bne	.L435
-	b	.L450
-.L437:
+	bne	.L443
+	b	.L458
+.L445:
 	movs	r5, #0
-	ldr	r7, .L451+20
-	ldr	r10, .L451+24
-	ldr	fp, .L451+28
-	b	.L431
-.L452:
+	ldr	r7, .L459+20
+	ldr	r10, .L459+24
+	ldr	fp, .L459+28
+	b	.L439
+.L460:
 	.align	2
-.L451:
+.L459:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+145
 	.word	.LC1
-	.word	.LC77
-	.word	.LC78
+	.word	.LC81
+	.word	.LC82
 	.word	check_buf
 	.word	.LANCHOR0+3288
-	.word	.LC76
+	.word	.LC80
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
 	.align	1
@@ -3666,19 +3735,19 @@ FlashEraseBlocks:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	mov	r7, r2
-	ldr	r4, .L464
+	ldr	r4, .L472
 	mov	r5, r0
 	movs	r6, #0
 	mov	r9, #-1
 	ldrh	r8, [r4, #12]
-.L454:
+.L462:
 	cmp	r6, r7
-	bne	.L460
+	bne	.L468
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L460:
+.L468:
 	mov	r2, sp
 	add	r1, sp, #4
 	mov	r0, r5
@@ -3694,21 +3763,21 @@ FlashEraseBlocks:
 	str	r3, [r5]
 	ldrh	r3, [r4, #14]
 	cmp	r3, #4
-	bne	.L458
+	bne	.L466
 	ldr	r1, [sp, #4]
 	ldr	r3, [r4, #3248]
 	ldrb	r0, [sp]	@ zero_extendqisi2
 	add	r1, r1, r8
 	blx	r3
-	cbz	r0, .L458
+	cbz	r0, .L466
 	str	r9, [r5]
-.L458:
+.L466:
 	adds	r6, r6, #1
 	adds	r5, r5, #20
-	b	.L454
-.L465:
+	b	.L462
+.L473:
 	.align	2
-.L464:
+.L472:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
@@ -3730,12 +3799,12 @@ FtlFreeSysBlkQueueIn:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	cmp	r3, r2
-	bhi	.L466
-	ldr	r4, .L475
+	bhi	.L474
+	ldr	r4, .L483
 	ldrh	r3, [r4, #218]
 	cmp	r3, #1024
-	beq	.L466
-	cbz	r1, .L468
+	beq	.L474
+	cbz	r1, .L476
 	bl	P2V_block_in_plane
 	mov	r6, r0
 	ldr	r0, [r4, #3800]
@@ -3751,7 +3820,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r4, #2560]
 	adds	r3, r3, #1
 	str	r3, [r4, #2560]
-.L468:
+.L476:
 	ldrh	r3, [r4, #218]
 	adds	r3, r3, #1
 	strh	r3, [r4, #218]	@ movhi
@@ -3761,11 +3830,11 @@ FtlFreeSysBlkQueueIn:
 	ubfx	r3, r3, #0, #10
 	strh	r5, [r2, #220]	@ movhi
 	strh	r3, [r4, #216]	@ movhi
-.L466:
+.L474:
 	pop	{r4, r5, r6, pc}
-.L476:
+.L484:
 	.align	2
-.L475:
+.L483:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
@@ -3783,7 +3852,7 @@ FtlLowFormatEraseBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, #0
-	ldr	r4, .L522
+	ldr	r4, .L530
 	mov	r7, r1
 	mov	r6, r10
 	mov	r5, r10
@@ -3793,79 +3862,79 @@ FtlLowFormatEraseBlock:
 	mov	fp, r4
 	str	r0, [sp]
 	str	r0, [r4, #3804]
-.L478:
+.L486:
 	ldrh	r1, [r4, #32]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L483
+	bhi	.L491
 	cmp	r6, #0
-	beq	.L477
+	beq	.L485
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r6
 	movs	r1, #0
 	ldr	r0, [r4, #3800]
 	bl	FlashEraseBlocks
-.L486:
+.L494:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L488
+	bhi	.L496
 	cmp	r7, #0
-	beq	.L505
+	beq	.L513
 	ldrh	r3, [r4, #104]
 	mov	r10, #1
 	str	r3, [sp, #4]
 	lsrs	r3, r3, #2
 	str	r3, [sp, #8]
-.L489:
+.L497:
 	mov	r8, #0
 	mov	fp, #20
-.L499:
+.L507:
 	mov	r9, #0
 	mov	r6, r9
-.L490:
+.L498:
 	ldrh	r1, [r4, #32]
 	uxth	r3, r9
 	cmp	r1, r3
-	bhi	.L494
-	cbz	r6, .L477
+	bhi	.L502
+	cbz	r6, .L485
 	mov	r9, #0
 	movs	r3, #1
 	mov	r2, r10
 	mov	r1, r6
 	ldr	r0, [r4, #3800]
 	bl	FlashProgPages
-.L496:
+.L504:
 	uxth	r3, r9
 	cmp	r6, r3
-	bhi	.L498
+	bhi	.L506
 	ldr	r3, [sp, #8]
 	add	r8, r8, r3
 	ldr	r3, [sp, #4]
 	uxth	r8, r8
 	cmp	r3, r8
-	bhi	.L499
+	bhi	.L507
 	mov	r8, #0
 	mov	r9, #20
-.L500:
+.L508:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L502
+	bhi	.L510
 	ldr	r3, [sp]
 	cmp	r3, #63
-	bls	.L503
-	cbz	r7, .L477
-.L503:
+	bls	.L511
+	cbz	r7, .L485
+.L511:
 	mov	r2, r6
 	mov	r1, r10
 	ldr	r0, [r4, #3800]
 	bl	FlashEraseBlocks
-.L477:
+.L485:
 	mov	r0, r5
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L483:
+.L491:
 	uxth	r3, r10
 	ldr	r0, [r4, #3800]
 	movs	r2, #0
@@ -3876,13 +3945,13 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	cbz	r7, .L479
+	cbz	r7, .L487
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L480
-.L479:
+	cbnz	r0, .L488
+.L487:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L481
+	cbnz	r0, .L489
 	ldr	r1, [r4, #3800]
 	lsl	r3, r8, #10
 	ldr	r0, [fp, #3812]
@@ -3899,36 +3968,36 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L480:
+.L488:
 	add	r10, r10, #1
-	b	.L478
-.L481:
+	b	.L486
+.L489:
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L480
-.L488:
+	b	.L488
+.L496:
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3800]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
 	adds	r3, r3, #1
-	bne	.L487
+	bne	.L495
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L487:
+.L495:
 	add	r8, r8, #1
-	b	.L486
-.L505:
+	b	.L494
+.L513:
 	movs	r3, #6
 	mov	r10, r7
 	str	r3, [sp, #8]
 	movs	r3, #1
 	str	r3, [sp, #4]
-	b	.L489
-.L494:
+	b	.L497
+.L502:
 	uxth	r3, r9
 	ldr	r0, [r4, #3800]
 	movs	r2, #0
@@ -3939,16 +4008,16 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	str	r0, [sp, #12]
-	cbz	r7, .L491
+	cbz	r7, .L499
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L492
-.L491:
+	cbnz	r0, .L500
+.L499:
 	ldr	r0, [sp, #12]
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L492
+	cbnz	r0, .L500
 	ldr	r1, [r4, #3800]
 	ldr	r3, [sp, #12]
-	ldr	r2, .L522
+	ldr	r2, .L530
 	mla	r1, fp, r6, r1
 	ldr	r0, [r2, #3808]
 	add	r3, r8, r3, lsl #10
@@ -3964,40 +4033,40 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L492:
+.L500:
 	add	r9, r9, #1
-	b	.L490
-.L498:
+	b	.L498
+.L506:
 	mul	r3, fp, r9
 	ldr	r2, [r4, #3800]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbz	r3, .L497
+	cbz	r3, .L505
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L497:
+.L505:
 	add	r9, r9, #1
-	b	.L496
-.L502:
-	cbz	r7, .L501
+	b	.L504
+.L510:
+	cbz	r7, .L509
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3800]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbnz	r3, .L501
+	cbnz	r3, .L509
 	ldr	r0, [r1, #4]
 	movs	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L501:
+.L509:
 	add	r8, r8, #1
-	b	.L500
-.L523:
+	b	.L508
+.L531:
 	.align	2
-.L522:
+.L530:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
@@ -4014,11 +4083,11 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r4, .L531
-	ldr	r6, .L531+4
-.L525:
+	ldr	r4, .L539
+	ldr	r6, .L539+4
+.L533:
 	ldrh	r1, [r4, #218]
-	cbz	r1, .L526
+	cbz	r1, .L534
 	ldrh	r3, [r4, #214]
 	subs	r1, r1, #1
 	strh	r1, [r4, #218]	@ movhi
@@ -4047,26 +4116,26 @@ FtlFreeSysBlkQueueOut:
 	subs	r3, r5, #1
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L530
+	bhi	.L535
+	mov	r0, r5
+	pop	{r3, r4, r5, r6, r7, pc}
+.L534:
+	ldr	r0, .L539+8
+	bl	sftl_printk
+.L537:
+	b	.L537
+.L535:
 	ldrh	r2, [r4, #218]
 	mov	r1, r5
 	mov	r0, r6
-	bl	printk
-	b	.L525
-.L526:
-	ldr	r0, .L531+8
-	bl	printk
-.L529:
-	b	.L529
-.L530:
-	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, pc}
-.L532:
+	bl	sftl_printk
+	b	.L533
+.L540:
 	.align	2
-.L531:
+.L539:
 	.word	.LANCHOR0
-	.word	.LC80
-	.word	.LC79
+	.word	.LC84
+	.word	.LC83
 	.fnend
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	1
@@ -4086,16 +4155,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	movs	r3, #0
 	ldr	r2, [r0, #12]
-.L534:
+.L542:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L537
+	bcs	.L545
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
 	adds	r2, r2, #2
 	cmp	r6, #0
-	bne	.L534
+	bne	.L542
 	bl	FtlFreeSysBlkQueueOut
 	subs	r3, r0, #1
 	movw	r2, #65533
@@ -4103,14 +4172,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L535
-	ldr	r3, .L541
-	ldr	r0, .L541+4
+	bls	.L543
+	ldr	r3, .L549
+	ldr	r0, .L549+4
 	ldrh	r2, [r3, #218]
-	bl	printk
-.L536:
-	b	.L536
-.L535:
+	bl	sftl_printk
+.L544:
+	b	.L544
+.L543:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -4119,22 +4188,22 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L537:
+.L545:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L539
+	bhi	.L547
 	movw	r2, #581
-	ldr	r1, .L541+8
-	ldr	r0, .L541+12
-	bl	printk
-.L539:
+	ldr	r1, .L549+8
+	ldr	r0, .L549+12
+	bl	sftl_printk
+.L547:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L542:
+.L550:
 	.align	2
-.L541:
+.L549:
 	.word	.LANCHOR0
-	.word	.LC81
+	.word	.LC85
 	.word	.LANCHOR1+160
 	.word	.LC1
 	.fnend
@@ -4156,8 +4225,8 @@ FlashTestBlk:
 	mov	r4, r0
 	.pad #92
 	sub	sp, sp, #92
-	bls	.L545
-	ldr	r5, .L546
+	bls	.L553
+	ldr	r5, .L554
 	add	r0, sp, #24
 	movs	r2, #32
 	movs	r1, #165
@@ -4187,17 +4256,17 @@ FlashTestBlk:
 	movne	r4, #1
 	negs	r4, r4
 	bl	FlashEraseBlocks
-.L543:
+.L551:
 	mov	r0, r4
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, pc}
-.L545:
+.L553:
 	movs	r4, #0
-	b	.L543
-.L547:
+	b	.L551
+.L555:
 	.align	2
-.L546:
+.L554:
 	.word	ftl_temp_buf
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -4215,7 +4284,7 @@ FlashGetBadBlockList:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r2, #256
-	ldr	r5, .L555
+	ldr	r5, .L563
 	mov	r4, r0
 	mov	r6, r1
 	movs	r1, #255
@@ -4226,31 +4295,31 @@ FlashGetBadBlockList:
 	blx	r3
 	uxth	r0, r0
 	cmp	r0, #50
-	bls	.L549
+	bls	.L557
 	mov	r2, #256
 	movs	r1, #255
 	mov	r0, r4
 	bl	memset
 	movs	r0, #0
-.L549:
+.L557:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L554
+	bne	.L562
 	add	r1, r4, r0, lsl #1
 	mov	r3, r4
-.L551:
+.L559:
 	cmp	r3, r1
-	bne	.L552
-.L554:
+	bne	.L560
+.L562:
 	pop	{r4, r5, r6, pc}
-.L552:
+.L560:
 	ldrh	r2, [r3]
 	lsrs	r2, r2, #1
 	strh	r2, [r3], #2	@ movhi
-	b	.L551
-.L556:
+	b	.L559
+.L564:
 	.align	2
-.L555:
+.L563:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
@@ -4268,9 +4337,9 @@ ftl_memset:
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r4, r0
-	cbz	r2, .L558
+	cbz	r2, .L566
 	bl	memset
-.L558:
+.L566:
 	mov	r0, r4
 	pop	{r4, pc}
 	.fnend
@@ -4289,7 +4358,7 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r3, #65535
-	ldr	r4, .L663
+	ldr	r4, .L671
 	movs	r5, #0
 	movs	r6, #12
 	movs	r7, #20
@@ -4396,7 +4465,7 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	r3, [r4, #3852]
 	str	r0, [r4, #3856]
-	ldr	r0, .L663+4
+	ldr	r0, .L671+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
@@ -4483,143 +4552,143 @@ FtlMemInit:
 	str	r0, [r4, #180]
 	lsls	r2, r2, #2
 	mov	r1, r2
-.L563:
+.L571:
 	cmp	r3, r6
-	bcc	.L564
-	ldr	r2, .L663+8
+	bcc	.L572
+	ldr	r2, .L671+8
 	movs	r1, #0
 	add	r3, r2, r3, lsl #2
 	adds	r2, r2, #56
 	adds	r3, r3, #24
-.L565:
+.L573:
 	cmp	r2, r3
-	bne	.L566
+	bne	.L574
 	ldr	r3, [r4, #3868]
-	cbnz	r3, .L567
-.L569:
-	ldr	r1, .L663+12
-	ldr	r0, .L663+16
-	bl	printk
+	cbnz	r3, .L575
+.L577:
+	ldr	r1, .L671+12
+	ldr	r0, .L671+16
+	bl	sftl_printk
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L564:
+.L572:
 	ldr	r0, [r4, #180]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r5, #4]!
-	b	.L563
-.L566:
+	b	.L571
+.L574:
 	str	r1, [r3, #4]!
-	b	.L565
-.L664:
+	b	.L573
+.L672:
 	.align	2
-.L663:
+.L671:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+152
 	.word	.LANCHOR1+186
-	.word	.LC82
-.L567:
+	.word	.LC86
+.L575:
 	ldr	r3, [r4, #3872]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3888]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3892]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3896]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #2316]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #180]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3832]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3840]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3800]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3836]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3280]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3844]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3848]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3172]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3816]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3808]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3168]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3284]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3812]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #3856]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, .L665
+	beq	.L577
+	ldr	r3, .L673
 	ldr	r2, [r3, #3876]
 	cmp	r2, #0
-	beq	.L569
+	beq	.L577
 	ldr	r2, [r3, #3880]
 	cmp	r2, #0
-	beq	.L569
+	beq	.L577
 	ldr	r3, [r3, #3884]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L577
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L666:
+.L674:
 	.align	2
-.L665:
+.L673:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMemInit, .-FtlMemInit
@@ -4637,30 +4706,30 @@ FtlBbt2Bitmap:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, r0
-	ldr	r6, .L673
+	ldr	r6, .L681
 	mov	r7, r1
 	subs	r4, r5, #2
 	movw	r8, #65535
-	ldr	r9, .L673+4
+	ldr	r9, .L681+4
 	addw	r5, r5, #1022
 	ldrh	r2, [r6, #3900]
 	movs	r1, #0
-	ldr	r10, .L673+8
+	ldr	r10, .L681+8
 	mov	r0, r7
 	lsls	r2, r2, #2
 	bl	ftl_memset
-.L670:
+.L678:
 	ldrh	r3, [r4, #2]
 	cmp	r3, r8
-	beq	.L667
+	beq	.L675
 	ldrh	r2, [r6, #98]
 	cmp	r2, r3
-	bhi	.L669
+	bhi	.L677
 	movs	r2, #74
 	mov	r1, r9
 	mov	r0, r10
-	bl	printk
-.L669:
+	bl	sftl_printk
+.L677:
 	ldrh	r3, [r4, #2]!
 	movs	r2, #1
 	cmp	r5, r4
@@ -4670,12 +4739,12 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r2, r2, r3
 	str	r2, [r7, r1, lsl #2]
-	bne	.L670
-.L667:
+	bne	.L678
+.L675:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L674:
+.L682:
 	.align	2
-.L673:
+.L681:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+197
 	.word	.LC1
@@ -4695,20 +4764,20 @@ load_l2p_region:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, r0
-	ldr	r4, .L681
+	ldr	r4, .L689
 	mov	r8, r1
 	ldrh	r3, [r4, #136]
 	cmp	r3, r0
-	bcs	.L676
+	bcs	.L684
 	mov	r2, #492
-	ldr	r1, .L681+4
-	ldr	r0, .L681+8
-	bl	printk
-.L676:
+	ldr	r1, .L689+4
+	ldr	r0, .L689+8
+	bl	sftl_printk
+.L684:
 	ldr	r3, [r4, #3888]
 	movs	r5, #12
 	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L677
+	cbnz	r7, .L685
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2492]
 	ldrh	r2, [r4, #110]
@@ -4721,14 +4790,14 @@ load_l2p_region:
 	ldr	r3, [r4, #2492]
 	add	r5, r5, r3
 	str	r7, [r5, #4]
-.L678:
+.L686:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L677:
+.L685:
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2492]
 	movs	r2, #1
-	ldr	r0, .L681+12
+	ldr	r0, .L689+12
 	mov	r1, r2
 	str	r7, [r4, #3264]
 	add	r3, r3, r5
@@ -4740,46 +4809,46 @@ load_l2p_region:
 	ldr	r8, [r4, #3272]
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L679
+	beq	.L687
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L681+16
-	bl	printk
+	ldr	r0, .L689+16
+	bl	sftl_printk
 	movs	r3, #4
 	ldr	r1, [r4, #3272]
 	mov	r2, r3
-	ldr	r0, .L681+20
+	ldr	r0, .L689+20
 	bl	rknand_print_hex
 	ldrh	r3, [r4, #136]
 	movs	r2, #4
 	ldr	r1, [r4, #3888]
-	ldr	r0, .L681+24
+	ldr	r0, .L689+24
 	bl	rknand_print_hex
-.L679:
+.L687:
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L680
+	beq	.L688
 	movw	r2, #513
-	ldr	r1, .L681+4
-	ldr	r0, .L681+8
-	bl	printk
-.L680:
+	ldr	r1, .L689+4
+	ldr	r0, .L689+8
+	bl	sftl_printk
+.L688:
 	ldr	r3, [r4, #2492]
 	movs	r1, #0
 	adds	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L678
-.L682:
+	b	.L686
+.L690:
 	.align	2
-.L681:
+.L689:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+211
 	.word	.LC1
 	.word	.LANCHOR0+3260
-	.word	.LC83
-	.word	.LC84
-	.word	.LC85
+	.word	.LC87
+	.word	.LC88
+	.word	.LC89
 	.fnend
 	.size	load_l2p_region, .-load_l2p_region
 	.align	1
@@ -4806,37 +4875,37 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	movs	r3, #0
-.L684:
+.L692:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r3
 	cmp	r1, r2
-	bhi	.L688
+	bhi	.L696
 	ldrh	fp, [r5]
 	movs	r6, #0
-	ldr	r2, .L697
+	ldr	r2, .L705
 	mov	r10, r6
-.L689:
+.L697:
 	ldrh	r1, [r4, #10]
 	uxth	r3, r6
 	cmp	r1, r3
-	bhi	.L693
+	bhi	.L701
 	mov	r0, r10
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L688:
+.L696:
 	uxth	r2, r3
 	ldr	r1, [r6, r2, lsl #2]
 	movs	r2, #0
 	ubfx	r1, r1, #10, #16
-.L685:
+.L693:
 	ldrh	r7, [r4, #10]
 	uxth	r0, r2
 	cmp	r7, r0
-	bhi	.L687
+	bhi	.L695
 	adds	r3, r3, #1
-	b	.L684
-.L687:
+	b	.L692
+.L695:
 	uxth	r0, r2
 	adds	r2, r2, #1
 	ldrh	r7, [r9, r0, lsl #1]
@@ -4845,27 +4914,27 @@ ftl_free_no_use_map_blk:
 	ldrheq	r7, [r5, r0, lsl #1]
 	addeq	r7, r7, #1
 	strheq	r7, [r5, r0, lsl #1]	@ movhi
-	b	.L685
-.L693:
+	b	.L693
+.L701:
 	ldrh	r1, [r4]
 	uxth	r7, r6
 	cmp	r1, r3
-	bne	.L690
+	bne	.L698
 	ldrh	r1, [r2, #104]
 	ldrh	r0, [r4, #2]
 	cmp	r0, r1
 	it	cc
 	strhcc	r1, [r5, r7, lsl #1]	@ movhi
-.L690:
+.L698:
 	ldrh	r8, [r5, r7, lsl #1]
 	cmp	fp, r8
 	itt	hi
 	movhi	r10, r3
 	movhi	fp, r8
 	cmp	r8, #0
-	bne	.L692
+	bne	.L700
 	ldrh	r0, [r9, r7, lsl #1]
-	cbz	r0, .L692
+	cbz	r0, .L700
 	movs	r1, #1
 	str	r2, [sp, #4]
 	bl	FtlFreeSysBlkQueueIn
@@ -4874,12 +4943,12 @@ ftl_free_no_use_map_blk:
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L692:
+.L700:
 	adds	r6, r6, #1
-	b	.L689
-.L698:
+	b	.L697
+.L706:
 	.align	2
-.L697:
+.L705:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -4901,14 +4970,14 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L700
+	bne	.L708
 	ldrh	r3, [r0, #8]
-	cbz	r3, .L701
+	cbz	r3, .L709
 	movw	r2, #641
-	ldr	r1, .L709
-	ldr	r0, .L709+4
-	bl	printk
-.L701:
+	ldr	r1, .L717
+	ldr	r0, .L717+4
+	bl	sftl_printk
+.L709:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -4920,14 +4989,14 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	adds	r3, r3, #1
 	str	r3, [r4, #28]
-.L702:
+.L710:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L700:
+.L708:
 	ldrh	r6, [r5, r3, lsl #1]
 	movs	r1, #255
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L709+8
+	ldr	r5, .L717+8
 	ldr	r2, [r0, #28]
 	ldr	r7, [r0, #24]
 	orr	r3, r3, r6, lsl #10
@@ -4948,27 +5017,27 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	movs	r2, #0
 	mov	r3, r2
-.L703:
+.L711:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L705
+	bhi	.L713
 	movs	r2, #1
 	movs	r3, #0
 	mov	r1, r2
-	ldr	r0, .L709+12
+	ldr	r0, .L717+12
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L702
-.L705:
+	b	.L710
+.L713:
 	uxth	r1, r2
 	ldr	r0, [r7, r1, lsl #2]
 	cmp	r6, r0, lsr #10
-	bne	.L704
+	bne	.L712
 	ldr	r0, [r5, #3280]
 	adds	r3, r3, #1
 	uxth	r3, r3
@@ -4977,12 +5046,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r1, [r5, #3280]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L704:
+.L712:
 	adds	r2, r2, #1
-	b	.L703
-.L710:
+	b	.L711
+.L718:
 	.align	2
-.L709:
+.L717:
 	.word	.LANCHOR1+227
 	.word	.LC1
 	.word	.LANCHOR0
@@ -5003,13 +5072,13 @@ FtlMapWritePage:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r7, .L730
+	ldr	r7, .L738
 	mov	r8, r1
 	mov	r10, r2
 	movs	r6, #0
-	ldr	r9, .L730+20
+	ldr	r9, .L738+20
 	mov	r5, r7
-.L712:
+.L720:
 	ldr	r3, [r7, #2524]
 	adds	r3, r3, #1
 	str	r3, [r7, #2524]
@@ -5017,33 +5086,33 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	bge	.L713
+	bge	.L721
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L714
-.L713:
+	bne	.L722
+.L721:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L714:
+.L722:
 	ldrh	r2, [r4]
 	ldr	r3, [r4, #12]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L715
+	cbnz	r3, .L723
 	movw	r2, #699
 	mov	r1, r9
-	ldr	r0, .L730+4
-	bl	printk
-.L715:
+	ldr	r0, .L738+4
+	bl	sftl_printk
+.L723:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L716
+	bcc	.L724
 	mov	r2, #700
 	mov	r1, r9
-	ldr	r0, .L730+4
-	bl	printk
-.L716:
+	ldr	r0, .L738+4
+	bl	sftl_printk
+.L724:
 	ldrh	r2, [r4]
 	movs	r1, #16
 	ldr	r3, [r4, #12]
@@ -5057,7 +5126,7 @@ FtlMapWritePage:
 	bl	__memzero
 	ldr	r3, [r5, #3272]
 	ldr	r2, [r4, #28]
-	ldr	r0, .L730+8
+	ldr	r0, .L738+8
 	strh	r8, [r3, #8]	@ movhi
 	str	r2, [r3, #4]
 	ldrh	r2, [r4, #4]
@@ -5073,12 +5142,12 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3260]
 	adds	r2, r2, #1
-	bne	.L717
+	bne	.L725
 	ldr	r1, [r5, #3264]
 	adds	r6, r6, #1
-	ldr	r0, .L730+12
+	ldr	r0, .L738+12
 	uxth	r6, r6
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #2]
 	cmp	r3, #2
 	ittt	ls
@@ -5086,35 +5155,35 @@ FtlMapWritePage:
 	addls	r3, r3, #-1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L719
+	bls	.L727
 	mov	r2, r6
 	ldr	r1, [r5, #3264]
-	ldr	r0, .L730+16
-	bl	printk
-.L720:
-	b	.L720
-.L719:
+	ldr	r0, .L738+16
+	bl	sftl_printk
+.L728:
+	b	.L728
+.L727:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L712
-.L729:
-	b	.L729
-.L717:
+	beq	.L720
+.L737:
+	b	.L737
+.L725:
 	cmp	r3, #1
-	beq	.L712
+	beq	.L720
 	ldr	r2, [r5, #3264]
 	movs	r0, #0
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r8, lsl #2]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L731:
+.L739:
 	.align	2
-.L730:
+.L738:
 	.word	.LANCHOR0
 	.word	.LC1
 	.word	.LANCHOR0+3260
-	.word	.LC86
-	.word	.LC87
+	.word	.LC90
+	.word	.LC91
 	.word	.LANCHOR1+258
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
@@ -5138,16 +5207,16 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	ldr	r5, .L744
+	ldr	r5, .L752
 	subs	r3, r3, #4
 	cmp	r2, r3
-	blt	.L733
+	blt	.L741
 	uxth	r0, r0
 	ldrh	r8, [r6, r0, lsl #1]
 	cmp	r8, #0
-	beq	.L733
+	beq	.L741
 	ldr	r3, [r4, #32]
-	cbnz	r3, .L733
+	cbnz	r3, .L741
 	movs	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r6, r0, lsl #1]	@ movhi
@@ -5157,41 +5226,41 @@ ftl_map_blk_gc:
 	strh	r3, [r4, #8]	@ movhi
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bcc	.L734
+	bcc	.L742
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L734:
-	ldr	fp, .L744+12
+.L742:
+	ldr	fp, .L752+12
 	movs	r6, #0
-.L735:
+.L743:
 	ldrh	r3, [r4, #6]
 	uxth	r10, r6
 	cmp	r3, r10
-	bhi	.L739
+	bhi	.L747
 	movs	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
 	movs	r3, #0
 	str	r3, [r4, #32]
-.L733:
+.L741:
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bcc	.L740
+	bcc	.L748
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L740:
+.L748:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L739:
+.L747:
 	uxth	r7, r6
 	ldr	r3, [r9, r7, lsl #2]
 	cmp	r8, r3, lsr #10
-	bne	.L736
+	bne	.L744
 	ldr	r3, [r5, #3844]
-	ldr	r0, .L744+4
+	ldr	r0, .L752+4
 	str	r3, [r5, #3268]
 	ldr	r3, [r5, #3284]
 	str	r3, [r5, #3272]
@@ -5204,29 +5273,29 @@ ftl_map_blk_gc:
 	ldr	r3, [sp, #4]
 	ldrh	r3, [r3, #8]
 	cmp	r3, r10
-	beq	.L737
+	beq	.L745
 	movw	r2, #613
-	ldr	r1, .L744+8
+	ldr	r1, .L752+8
 	mov	r0, fp
-	bl	printk
-.L737:
+	bl	sftl_printk
+.L745:
 	ldr	r3, [r5, #3260]
 	adds	r3, r3, #1
-	bne	.L738
+	bne	.L746
 	movs	r3, #0
 	str	r3, [r9, r7, lsl #2]
-.L736:
+.L744:
 	adds	r6, r6, #1
-	b	.L735
-.L738:
+	b	.L743
+.L746:
 	ldr	r2, [r5, #3268]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-	b	.L736
-.L745:
+	b	.L744
+.L753:
 	.align	2
-.L744:
+.L752:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.word	.LANCHOR1+274
@@ -5247,7 +5316,7 @@ flush_l2p_region:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r4, #12
-	ldr	r5, .L747
+	ldr	r5, .L755
 	muls	r4, r0, r4
 	ldr	r3, [r5, #2492]
 	add	r0, r5, #3904
@@ -5262,9 +5331,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r3, r4, r5, pc}
-.L748:
+.L756:
 	.align	2
-.L747:
+.L755:
 	.word	.LANCHOR0
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -5282,7 +5351,7 @@ log2phys:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r7, r1
-	ldr	r4, .L763
+	ldr	r4, .L771
 	mov	r9, r2
 	ldrh	r5, [r4, #108]
 	adds	r3, r5, #7
@@ -5295,20 +5364,20 @@ log2phys:
 	ands	r5, r5, r0
 	cmp	r0, r3
 	uxth	r5, r5
-	bcc	.L750
+	bcc	.L758
 	mov	r2, #808
-	ldr	r1, .L763+4
-	ldr	r0, .L763+8
-	bl	printk
-.L750:
+	ldr	r1, .L771+4
+	ldr	r0, .L771+8
+	bl	sftl_printk
+.L758:
 	ldrh	r2, [r4, #138]
 	movs	r3, #0
 	ldr	r1, [r4, #2492]
 	mov	r10, #12
-.L751:
+.L759:
 	uxth	r6, r3
 	cmp	r6, r2
-	bcc	.L756
+	bcc	.L764
 	bl	select_l2p_ram_region
 	mul	r10, r10, r0
 	ldr	r3, [r4, #2492]
@@ -5317,44 +5386,44 @@ log2phys:
 	add	r2, r3, r10
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L757
+	beq	.L765
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L757
+	bge	.L765
 	bl	flush_l2p_region
-.L757:
+.L765:
 	mov	r1, r6
 	mov	r0, r8
 	bl	load_l2p_region
-	b	.L752
-.L756:
+	b	.L760
+.L764:
 	adds	r3, r3, #1
 	mla	r0, r10, r3, r1
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r8
-	bne	.L751
-.L752:
+	bne	.L759
+.L760:
 	movs	r3, #12
 	cmp	r9, #0
-	bne	.L753
+	bne	.L761
 	ldr	r2, [r4, #2492]
 	mla	r3, r3, r6, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r5, lsl #2]
 	str	r3, [r7]
-.L754:
+.L762:
 	ldr	r2, [r4, #2492]
 	movs	r3, #12
 	mla	r6, r3, r6, r2
 	ldr	r3, [r6, #4]
 	adds	r2, r3, #1
-	beq	.L760
+	beq	.L768
 	adds	r3, r3, #1
 	str	r3, [r6, #4]
-.L760:
+.L768:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L753:
+.L761:
 	muls	r3, r6, r3
 	ldr	r2, [r4, #2492]
 	ldr	r1, [r7]
@@ -5367,10 +5436,10 @@ log2phys:
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	b	.L754
-.L764:
+	b	.L762
+.L772:
 	.align	2
-.L763:
+.L771:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+289
 	.word	.LC1
@@ -5391,41 +5460,41 @@ FtlReUsePrevPpa:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r6, r0
-	ldr	r5, .L775
+	ldr	r5, .L783
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
 	ldr	r2, [r5, #2324]
 	mov	r7, r0
 	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L766
+	cbnz	r3, .L774
 	ldr	r4, [r5, #2340]
-	cbz	r4, .L767
+	cbz	r4, .L775
 	ldr	r1, [r5, #2316]
 	mov	ip, #6
-	ldr	r2, .L775+4
+	ldr	r2, .L783+4
 	movw	lr, #65535
 	ldrh	r0, [r5, #2344]
 	subs	r4, r4, r1
 	asrs	r4, r4, #1
 	muls	r4, r2, r4
 	uxth	r4, r4
-.L768:
+.L776:
 	uxth	r2, r3
 	cmp	r0, r2
-	bls	.L767
+	bls	.L775
 	cmp	r4, r7
-	bne	.L769
+	bne	.L777
 	mov	r1, r4
-	ldr	r0, .L775+8
+	ldr	r0, .L783+8
 	bl	List_remove_node
 	ldrh	r3, [r5, #2344]
-	cbnz	r3, .L770
+	cbnz	r3, .L778
 	mov	r2, #1688
-	ldr	r1, .L775+12
-	ldr	r0, .L775+16
-	bl	printk
-.L770:
+	ldr	r1, .L783+12
+	ldr	r0, .L783+16
+	bl	sftl_printk
+.L778:
 	ldrh	r3, [r5, #2344]
 	mov	r0, r4
 	subs	r3, r3, #1
@@ -5433,17 +5502,17 @@ FtlReUsePrevPpa:
 	bl	INSERT_DATA_LIST
 	ldr	r2, [r5, #2324]
 	ldrh	r3, [r2, r7, lsl #1]
-.L766:
+.L774:
 	adds	r3, r3, #1
 	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L767
-.L769:
+	b	.L775
+.L777:
 	mul	r4, ip, r4
 	adds	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, lr
-	bne	.L768
-.L767:
+	bne	.L776
+.L775:
 	movs	r2, #1
 	add	r1, sp, #4
 	mov	r0, r6
@@ -5451,9 +5520,9 @@ FtlReUsePrevPpa:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L776:
+.L784:
 	.align	2
-.L775:
+.L783:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.word	.LANCHOR0+2340
@@ -5475,42 +5544,42 @@ ftl_scan_all_data:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r5, #0
-	ldr	r6, .L791
+	ldr	r6, .L799
 	.pad #32
 	sub	sp, sp, #32
 	movs	r1, #0
-	ldr	r8, .L791+16
+	ldr	r8, .L799+16
 	mov	r4, r6
-	ldr	r0, .L791+4
-	bl	printk
-.L778:
+	ldr	r0, .L799+4
+	bl	sftl_printk
+.L786:
 	ldr	r3, [r6, #2504]
 	cmp	r5, r3
-	bcc	.L784
+	bcc	.L792
 	add	sp, sp, #32
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L784:
+.L792:
 	movs	r2, #0
 	add	r1, sp, #28
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L779
+	cbnz	r3, .L787
 	ldr	r2, [sp, #28]
 	mov	r1, r5
 	mov	r0, r8
-	bl	printk
-.L779:
+	bl	sftl_printk
+.L787:
 	ldr	r3, [sp, #28]
 	adds	r2, r3, #1
-	beq	.L781
+	beq	.L789
 	str	r3, [r4, #3264]
 	movs	r2, #0
 	ldr	r3, [r4, #3280]
 	movs	r1, #1
 	ldr	r7, [r4, #3284]
-	ldr	r0, .L791+8
+	ldr	r0, .L799+8
 	str	r3, [r4, #3268]
 	str	r5, [r4, #3276]
 	str	r7, [r4, #3272]
@@ -5518,16 +5587,16 @@ ftl_scan_all_data:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	cmp	r3, #256
-	beq	.L782
+	beq	.L790
 	adds	r3, r3, #1
-	beq	.L782
+	beq	.L790
 	ldr	r3, [r7, #8]
 	cmp	r5, r3
-	beq	.L781
-.L782:
+	beq	.L789
+.L790:
 	ldr	r2, [r4, #3268]
 	ldr	r3, [r4, #3272]
-	ldr	r0, .L791+12
+	ldr	r0, .L799+12
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -5541,18 +5610,18 @@ ftl_scan_all_data:
 	str	r2, [sp]
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3264]
-	bl	printk
-.L781:
+	bl	sftl_printk
+.L789:
 	adds	r5, r5, #1
-	b	.L778
-.L792:
+	b	.L786
+.L800:
 	.align	2
-.L791:
+.L799:
 	.word	.LANCHOR0
-	.word	.LC88
+	.word	.LC92
 	.word	.LANCHOR0+3260
-	.word	.LC90
-	.word	.LC89
+	.word	.LC94
+	.word	.LC93
 	.fnend
 	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	1
@@ -5566,7 +5635,7 @@ FtlReadRefresh:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L806
+	ldr	r3, .L814
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	.pad #88
@@ -5574,17 +5643,17 @@ FtlReadRefresh:
 	mov	r4, r3
 	ldr	r0, [r3, #2716]
 	cmp	r0, #0
-	beq	.L794
+	beq	.L802
 	ldr	r1, [r3, #2720]
 	ldr	r2, [r3, #2504]
 	cmp	r1, r2
-	bcs	.L795
+	bcs	.L803
 	mov	r5, #2048
-.L800:
+.L808:
 	ldr	r0, [r4, #2720]
 	ldr	r3, [r4, #2504]
 	cmp	r0, r3
-	bcs	.L797
+	bcs	.L805
 	movs	r2, #0
 	mov	r1, sp
 	bl	log2phys
@@ -5593,10 +5662,10 @@ FtlReadRefresh:
 	adds	r1, r2, #1
 	add	r3, r3, #1
 	str	r3, [r4, #2720]
-	beq	.L798
+	beq	.L806
 	str	r3, [sp, #20]
 	add	r0, sp, #88
-	ldr	r3, .L806+4
+	ldr	r3, .L814+4
 	movs	r1, #1
 	str	r2, [sp, #8]
 	movs	r2, #0
@@ -5607,54 +5676,54 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	cmp	r3, #256
-	bne	.L797
+	bne	.L805
 	ldr	r0, [sp]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L797:
+.L805:
 	mov	r0, #-1
-.L793:
+.L801:
 	add	sp, sp, #88
 	@ sp needed
 	pop	{r4, r5, r6, pc}
-.L798:
+.L806:
 	subs	r5, r5, #1
-	bne	.L800
-	b	.L797
-.L795:
+	bne	.L808
+	b	.L805
+.L803:
 	ldr	r2, [r3, #2508]
 	movs	r0, #0
 	str	r0, [r3, #2716]
 	str	r0, [r3, #2720]
 	str	r2, [r3, #2712]
-	b	.L793
-.L794:
+	b	.L801
+.L802:
 	ldr	r1, [r3, #2508]
 	ldr	r6, [r3, #2712]
 	add	r2, r1, #1048576
 	cmp	r6, r2
-	bhi	.L803
+	bhi	.L811
 	ldr	r2, [r3, #2564]
 	lsrs	r5, r2, #10
 	mov	r2, #33554432
 	asrs	r2, r2, r5
 	add	r2, r2, r6
 	cmp	r1, r2
-	bhi	.L803
+	bhi	.L811
 	ldrb	r3, [r3, #2296]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L793
-.L803:
+	bne	.L801
+.L811:
 	movs	r3, #1
 	movs	r0, #0
 	str	r3, [r4, #2716]
 	str	r0, [r4, #2720]
 	str	r1, [r4, #2712]
-	b	.L793
-.L807:
+	b	.L801
+.L815:
 	.align	2
-.L806:
+.L814:
 	.word	.LANCHOR0
 	.word	ftl_temp_buf
 	.fnend
@@ -5674,120 +5743,120 @@ ftl_check_vpc:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movs	r4, #0
-	ldr	r6, .L832
-	ldr	r7, .L832+4
-	ldr	r1, .L832+8
+	ldr	r6, .L840
+	ldr	r7, .L840+4
+	ldr	r1, .L840+8
 	mov	r5, r6
-	ldr	r0, .L832+12
-	bl	printk
+	ldr	r0, .L840+12
+	bl	sftl_printk
 	mov	r1, #8192
-	ldr	r0, .L832+4
+	ldr	r0, .L840+4
 	bl	__memzero
-.L809:
+.L817:
 	ldr	r3, [r6, #2504]
 	cmp	r4, r3
-	bcc	.L811
-	ldr	r8, .L832+4
+	bcc	.L819
+	ldr	r8, .L840+4
 	movs	r4, #0
-	ldr	r10, .L832+24
+	ldr	r10, .L840+24
 	mov	r7, r4
 	movw	r9, #65535
-.L812:
+.L820:
 	ldrh	r2, [r5, #40]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L814
+	bhi	.L822
 	ldr	r4, [r5, #2340]
-	cbz	r4, .L815
+	cbz	r4, .L823
 	ldr	r3, [r5, #2316]
 	movs	r6, #0
 	ldrh	r8, [r5, #2344]
 	mov	fp, #6
-	ldr	r9, .L832+4
+	ldr	r9, .L840+4
 	subs	r4, r4, r3
-	ldr	r3, .L832+16
+	ldr	r3, .L840+16
 	asrs	r4, r4, #1
-	ldr	r10, .L832+28
+	ldr	r10, .L840+28
 	muls	r4, r3, r4
 	uxth	r4, r4
-.L816:
+.L824:
 	uxth	r3, r6
 	cmp	r8, r3
-	bls	.L815
+	bls	.L823
 	ldr	r3, [r5, #2324]
 	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L817
+	cbz	r2, .L825
 	movs	r7, #1
 	ldrh	r3, [r9, r4, lsl #1]
 	mov	r1, r4
 	mov	r0, r10
-	bl	printk
-.L817:
+	bl	sftl_printk
+.L825:
 	mul	r4, fp, r4
 	ldr	r3, [r5, #2316]
 	adds	r6, r6, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L816
-.L815:
-	cbz	r7, .L808
+	bne	.L824
+.L823:
+	cbz	r7, .L816
 	movw	r2, #2321
-	ldr	r1, .L832+8
-	ldr	r0, .L832+20
-	bl	printk
-.L808:
+	ldr	r1, .L840+8
+	ldr	r0, .L840+20
+	bl	sftl_printk
+.L816:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L811:
+.L819:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L810
+	beq	.L818
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r7, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L810:
+.L818:
 	adds	r4, r4, #1
-	b	.L809
-.L814:
+	b	.L817
+.L822:
 	ldr	r3, [r5, #2324]
 	uxth	r6, r4
 	ldrh	r2, [r3, r6, lsl #1]
 	ldrh	r3, [r8, r6, lsl #1]
 	cmp	r2, r3
-	beq	.L813
+	beq	.L821
 	mov	r1, r6
 	mov	r0, r10
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [r5, #2324]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, r9
-	beq	.L813
+	beq	.L821
 	ldrh	r2, [r8, r6, lsl #1]
 	cmp	r2, r3
 	it	hi
 	movhi	r7, #1
-.L813:
+.L821:
 	adds	r4, r4, #1
-	b	.L812
-.L833:
+	b	.L820
+.L841:
 	.align	2
-.L832:
+.L840:
 	.word	.LANCHOR0
 	.word	check_vpc_table
 	.word	.LANCHOR1+314
-	.word	.LC91
+	.word	.LC95
 	.word	-1431655765
 	.word	.LC1
-	.word	.LC92
-	.word	.LC93
+	.word	.LC96
+	.word	.LC97
 	.fnend
 	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	1
@@ -5805,10 +5874,10 @@ FtlMapBlkWriteDump_data:
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
 	ldr	r3, [r0, #36]
-	cbz	r3, .L834
+	cbz	r3, .L842
 	ldrh	r5, [r0, #6]
 	movs	r3, #0
-	ldr	r4, .L838
+	ldr	r4, .L846
 	ldr	r2, [r0, #24]
 	str	r3, [r0, #36]
 	subs	r5, r5, #1
@@ -5819,27 +5888,27 @@ FtlMapBlkWriteDump_data:
 	str	r1, [r4, #3272]
 	ldr	r2, [r2, r5, lsl #2]
 	str	r2, [r4, #3264]
-	cbz	r2, .L836
+	cbz	r2, .L844
 	movs	r2, #1
 	addw	r0, r4, #3260
 	mov	r1, r2
 	bl	FlashReadPages
-.L837:
+.L845:
 	ldr	r2, [r4, #3268]
 	mov	r1, r5
 	mov	r0, r6
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L836:
+.L844:
 	ldrh	r2, [r4, #110]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L837
-.L834:
+	b	.L845
+.L842:
 	pop	{r4, r5, r6, pc}
-.L839:
+.L847:
 	.align	2
-.L838:
+.L846:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -5857,7 +5926,7 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L921
+	ldr	r4, .L929
 	mov	r1, r5
 	.pad #20
 	sub	sp, sp, #20
@@ -5887,10 +5956,10 @@ FtlScanSysBlk:
 	str	r3, [r4, #2576]
 	str	r3, [r4, #2580]
 	str	r3, [r4, #2584]
-.L841:
+.L849:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r8
-	bls	.L883
+	bls	.L891
 	movs	r5, #0
 	ldrh	fp, [r4, #32]
 	ldr	r9, [r4, #3832]
@@ -5899,11 +5968,11 @@ FtlScanSysBlk:
 	mov	r10, #20
 	ldr	r2, [r4, #3176]
 	ldrh	r6, [r4, #112]
-	b	.L884
-.L844:
+	b	.L892
+.L852:
 	str	r3, [sp, #8]
 	mov	r1, r8
-	ldr	r3, .L921+4
+	ldr	r3, .L929+4
 	str	r2, [sp, #12]
 	ldrb	r0, [r3, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -5911,7 +5980,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L842
+	cbnz	r0, .L850
 	ldr	r1, [sp, #4]
 	mla	r0, r10, r7, r9
 	lsls	r1, r1, #10
@@ -5926,27 +5995,27 @@ FtlScanSysBlk:
 	bic	r1, r1, #3
 	add	r1, r1, r2
 	str	r1, [r0, #12]
-.L842:
+.L850:
 	adds	r5, r5, #1
-.L884:
+.L892:
 	uxth	r1, r5
 	cmp	fp, r1
-	bhi	.L844
-	cbnz	r7, .L845
-.L882:
+	bhi	.L852
+	cbnz	r7, .L853
+.L890:
 	add	r8, r8, #1
 	uxth	r8, r8
-	b	.L841
-.L845:
+	b	.L849
+.L853:
 	mov	r0, r9
 	mov	r9, #0
 	movs	r2, #1
 	mov	r1, r7
 	bl	FlashReadPages
-.L846:
+.L854:
 	uxth	r3, r9
 	cmp	r7, r3
-	bls	.L882
+	bls	.L890
 	movs	r3, #20
 	mul	r10, r3, r9
 	ldr	r3, [r4, #3832]
@@ -5956,10 +6025,10 @@ FtlScanSysBlk:
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #1
 	ubfx	r5, r5, #10, #16
-	bne	.L849
+	bne	.L857
 	mov	fp, #16
 	movw	r3, #65535
-.L851:
+.L859:
 	ldr	r0, [r4, #3832]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
@@ -5972,71 +6041,71 @@ FtlScanSysBlk:
 	ldrh	r2, [r6]
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
-	bne	.L848
+	bne	.L856
 	ldr	r3, [r4, #3832]
 	mov	r2, #-1
 	str	r2, [r3, r10]
 	ldr	r3, [r4, #3832]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
-	bne	.L849
-.L850:
+	bne	.L857
+.L858:
 	movs	r1, #0
 	mov	r0, r5
 	bl	FtlFreeSysBlkQueueIn
-	b	.L854
-.L848:
+	b	.L862
+.L856:
 	ldr	r2, [r4, #3832]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L849
+	bne	.L857
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L851
-	b	.L850
-.L849:
+	bne	.L859
+	b	.L858
+.L857:
 	ldr	r2, [r4, #2540]
 	ldr	r3, [r6, #4]
 	adds	r1, r2, #1
-	beq	.L852
+	beq	.L860
 	cmp	r2, r3
-	bhi	.L853
-.L852:
+	bhi	.L861
+.L860:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
 	strne	r2, [r4, #2540]
-.L853:
+.L861:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L855
-	bhi	.L856
+	beq	.L863
+	bhi	.L864
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L857
-.L854:
+	beq	.L865
+.L862:
 	add	r9, r9, #1
-	b	.L846
-.L856:
+	b	.L854
+.L864:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L858
+	beq	.L866
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L850
-	b	.L854
-.L858:
+	beq	.L858
+	b	.L862
+.L866:
 	ldrh	r2, [r4, #3944]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
-	bls	.L860
+	bls	.L868
 	movw	r2, #1211
-	ldr	r1, .L921+8
-	ldr	r0, .L921+12
-	bl	printk
-.L860:
+	ldr	r1, .L929+8
+	ldr	r0, .L929+12
+	bl	sftl_printk
+.L868:
 	ldr	r1, [r4, #128]
 	ldrh	r0, [r4, #3944]
 	ldr	r10, [r4, #3892]
@@ -6046,58 +6115,58 @@ FtlScanSysBlk:
 	add	ip, ip, #-1
 	sxth	r3, r3
 	sxth	ip, ip
-.L861:
+.L869:
 	cmp	r3, ip
-	bgt	.L867
+	bgt	.L875
 	cmp	r3, #0
-	bge	.L899
-	b	.L854
-.L867:
+	bge	.L907
+	b	.L862
+.L875:
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	mov	lr, r2
 	ldr	r2, [r10, r3, lsl #2]
 	cmp	lr, r2
-	bls	.L862
+	bls	.L870
 	ldr	r2, [r10]
-	cbnz	r2, .L863
+	cbnz	r2, .L871
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #3944]	@ movhi
-.L863:
+.L871:
 	uxth	ip, r3
 	movs	r2, #0
-.L864:
+.L872:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L865
+	bhi	.L873
 	ldr	r2, [r4, #3892]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #3868]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	blt	.L854
+	blt	.L862
 	ldrh	r0, [r4, #3944]
 	ldr	r2, [r4, #128]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L854
-.L899:
+	bgt	.L862
+.L907:
 	ldr	r2, [r4, #3892]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
 	strh	r0, [r4, #3944]	@ movhi
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #3868]
-.L919:
+.L927:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	b	.L854
-.L865:
+	b	.L862
+.L873:
 	ldr	r0, [r4, #3892]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -6107,79 +6176,79 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L864
-.L862:
+	b	.L872
+.L870:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L861
-.L922:
+	b	.L869
+.L930:
 	.align	2
-.L921:
+.L929:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+60
 	.word	.LANCHOR1+328
 	.word	.LC1
-.L857:
+.L865:
 	ldrh	r2, [r4, #144]
 	ldrh	r3, [r4, #120]
 	cmp	r2, r3
-	bls	.L870
+	bls	.L878
 	movw	r2, #1252
-	ldr	r1, .L923
-	ldr	r0, .L923+4
-	bl	printk
-.L870:
+	ldr	r1, .L931
+	ldr	r0, .L931+4
+	bl	sftl_printk
+.L878:
 	ldrh	lr, [r4, #120]
 	ldrh	r0, [r4, #144]
 	ldr	r10, [r4, #3880]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
-.L871:
+.L879:
 	cmp	r3, ip
-	ble	.L876
+	ble	.L884
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	ldr	r1, [r10, r3, lsl #2]
 	cmp	r2, r1
-	bls	.L872
+	bls	.L880
 	ldr	r2, [r10]
-	cbnz	r2, .L873
+	cbnz	r2, .L881
 	cmp	lr, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #144]	@ movhi
-.L873:
+.L881:
 	uxth	ip, r3
 	movs	r2, #0
-.L874:
+.L882:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L875
+	bhi	.L883
 	ldr	r2, [r4, #3880]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #148]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-.L876:
+.L884:
 	cmp	r3, #0
-	blt	.L854
+	blt	.L862
 	ldrh	r2, [r4, #120]
 	ldrh	r1, [r4, #144]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L854
+	bgt	.L862
 	adds	r1, r1, #1
 	ldr	r2, [r4, #3880]
 	strh	r1, [r4, #144]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #148]
-	b	.L919
-.L875:
+	b	.L927
+.L883:
 	ldr	r0, [r4, #3880]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -6189,81 +6258,81 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L874
-.L872:
+	b	.L882
+.L880:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L871
-.L855:
+	b	.L879
+.L863:
 	ldrh	r1, [r4, #2576]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L878
+	bne	.L886
 	strh	r5, [r4, #2576]	@ movhi
-.L920:
+.L928:
 	str	r3, [r4, #2584]
-	b	.L854
-.L878:
+	b	.L862
+.L886:
 	ldrh	r0, [r4, #2580]
 	cmp	r0, r2
-	beq	.L879
+	beq	.L887
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L879:
+.L887:
 	ldr	r2, [r4, #2584]
 	ldr	r3, [r6, #4]
 	cmp	r2, r3
-	bcs	.L880
+	bcs	.L888
 	ldrh	r3, [r4, #2576]
 	strh	r5, [r4, #2576]	@ movhi
 	strh	r3, [r4, #2580]	@ movhi
 	ldr	r3, [r6, #4]
-	b	.L920
-.L880:
+	b	.L928
+.L888:
 	strh	r5, [r4, #2580]	@ movhi
-	b	.L854
-.L883:
+	b	.L862
+.L891:
 	ldr	r1, [r4, #3868]
 	ldrh	r3, [r1]
-	cbz	r3, .L885
-.L888:
+	cbz	r3, .L893
+.L896:
 	ldr	r1, [r4, #148]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L886
-.L887:
+	beq	.L894
+.L895:
 	ldrh	r2, [r4, #3944]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
-	bls	.L918
+	bls	.L926
 	movw	r2, #1377
-	ldr	r1, .L923
-	ldr	r0, .L923+4
-	bl	printk
-.L918:
+	ldr	r1, .L931
+	ldr	r0, .L931+4
+	bl	sftl_printk
+.L926:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L885:
+.L893:
 	ldrh	r2, [r4, #3944]
 	cmp	r2, #0
-	beq	.L888
+	beq	.L896
 	ldr	r0, [r4, #128]
-.L889:
+.L897:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L888
+	bcs	.L896
 	ldrh	r5, [r1, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r5, #0
-	beq	.L889
+	beq	.L897
 	mov	r3, r2
 	movs	r5, #0
-.L890:
+.L898:
 	ldr	r1, [r4, #128]
 	cmp	r3, r1
-	bcs	.L888
+	bcs	.L896
 	ldr	r1, [r4, #3868]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
@@ -6275,26 +6344,26 @@ FtlScanSysBlk:
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L890
-.L886:
+	b	.L898
+.L894:
 	ldrh	r3, [r4, #144]
 	cmp	r3, #0
-	beq	.L887
+	beq	.L895
 	ldrh	r0, [r4, #120]
-.L895:
+.L903:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	r5, r3
-	bge	.L887
+	bge	.L895
 	ldrh	r6, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	cmp	r6, #0
-	beq	.L895
+	beq	.L903
 	movs	r0, #0
-.L896:
+.L904:
 	ldrh	r2, [r4, #120]
 	cmp	r3, r2
-	bge	.L887
+	bge	.L895
 	ldr	r2, [r4, #148]
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
@@ -6306,10 +6375,10 @@ FtlScanSysBlk:
 	strh	r0, [r2, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L896
-.L924:
+	b	.L904
+.L932:
 	.align	2
-.L923:
+.L931:
 	.word	.LANCHOR1+328
 	.word	.LC1
 	.fnend
@@ -6335,7 +6404,7 @@ FtlMapTblRecovery:
 	ldrh	r10, [r0, #6]
 	str	r3, [sp, #4]
 	ldr	r3, [r0, #16]
-	ldr	r5, .L952
+	ldr	r5, .L960
 	ldr	r9, [r0, #12]
 	lsl	r2, r10, #2
 	str	r3, [sp, #12]
@@ -6359,14 +6428,14 @@ FtlMapTblRecovery:
 	ldr	r3, [sp, #8]
 	add	fp, r3, #-1
 	mov	r3, r5
-.L926:
+.L934:
 	ldr	r1, [sp, #8]
 	sxth	r2, r8
 	cmp	r2, r1
-	bge	.L943
+	bge	.L951
 	cmp	r2, fp
 	lsl	r7, r2, #1
-	bne	.L927
+	bne	.L935
 	ldrh	r0, [r9, fp, lsl #1]
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
@@ -6374,27 +6443,27 @@ FtlMapTblRecovery:
 	add	r7, r7, r9
 	strh	r8, [r4]	@ movhi
 	sxth	r9, r0
-	ldr	r8, .L952+4
+	ldr	r8, .L960+4
 	adds	r0, r0, #1
 	strh	r0, [r4, #2]	@ movhi
 	add	r9, r9, #1
 	ldr	r3, [r3, fp, lsl #2]
 	mov	fp, #0
 	str	r3, [r4, #28]
-.L928:
+.L936:
 	sxth	r2, fp
 	cmp	r2, r9
-	blt	.L930
-.L943:
+	blt	.L938
+.L951:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bne	.L932
+	bne	.L940
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L932:
+.L940:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -6403,7 +6472,7 @@ FtlMapTblRecovery:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L930:
+.L938:
 	ldrh	r1, [r7]
 	mov	r0, r8
 	orr	r2, r2, r1, lsl #10
@@ -6413,10 +6482,10 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r2, [r5, #3260]
 	adds	r2, r2, #1
-	beq	.L929
+	beq	.L937
 	ldrh	r2, [r6, #8]
 	cmp	r10, r2
-	bls	.L929
+	bls	.L937
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r6]
 	cmp	r0, r1
@@ -6424,14 +6493,14 @@ FtlMapTblRecovery:
 	ldreq	r1, [r5, #3264]
 	ldreq	r3, [sp, #4]
 	streq	r1, [r3, r2, lsl #2]
-.L929:
+.L937:
 	add	fp, fp, #1
-	b	.L928
-.L927:
+	b	.L936
+.L935:
 	ldr	r1, [r5, #3280]
 	str	r3, [sp, #20]
 	add	r3, r9, r7
-	ldr	r0, .L952+4
+	ldr	r0, .L960+4
 	str	r1, [r5, #3268]
 	ldrh	r1, [r9, r2, lsl #1]
 	ldrh	r2, [r5, #104]
@@ -6445,24 +6514,24 @@ FtlMapTblRecovery:
 	ldr	r2, [r5, #3260]
 	ldr	r3, [sp, #20]
 	adds	r2, r2, #1
-	beq	.L945
+	beq	.L953
 	ldrh	r1, [r6]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
-	bne	.L945
+	bne	.L953
 	ldrh	r1, [r6, #8]
 	movw	r2, #64245
 	cmp	r1, r2
-	beq	.L934
-.L945:
+	beq	.L942
+.L953:
 	movs	r7, #0
-.L935:
+.L943:
 	ldrh	r1, [r3, #104]
 	sxth	r2, r7
 	cmp	r2, r1
-	bge	.L941
+	bge	.L949
 	ldr	r1, [sp, #16]
-	ldr	r0, .L952+4
+	ldr	r0, .L960+4
 	str	r3, [sp, #20]
 	ldrh	r1, [r1]
 	orr	r2, r2, r1, lsl #10
@@ -6473,10 +6542,10 @@ FtlMapTblRecovery:
 	ldr	r3, [sp, #20]
 	ldr	r2, [r3, #3260]
 	adds	r2, r2, #1
-	beq	.L939
+	beq	.L947
 	ldrh	r2, [r6, #8]
 	cmp	r10, r2
-	bls	.L939
+	bls	.L947
 	ldrh	r0, [r6]
 	ldrh	r1, [r4, #4]
 	cmp	r0, r1
@@ -6484,37 +6553,37 @@ FtlMapTblRecovery:
 	ldreq	r1, [r3, #3264]
 	ldreq	r0, [sp, #4]
 	streq	r1, [r0, r2, lsl #2]
-.L939:
+.L947:
 	adds	r7, r7, #1
-	b	.L935
-.L934:
+	b	.L943
+.L942:
 	movs	r0, #0
 	mov	ip, #4
-.L936:
+.L944:
 	ldrh	r1, [r5, #104]
 	sxth	r2, r0
 	subs	r1, r1, #1
 	cmp	r2, r1
-	blt	.L938
-.L941:
+	blt	.L946
+.L949:
 	add	r8, r8, #1
-	b	.L926
-.L938:
+	b	.L934
+.L946:
 	ldr	r7, [r5, #3280]
 	ldr	r1, [r7, r2, lsl #3]
 	uxth	lr, r1
 	cmp	r10, lr
-	bls	.L937
+	bls	.L945
 	add	r2, ip, r2, lsl #3
 	ldr	r2, [r7, r2]
 	ldr	r7, [sp, #4]
 	str	r2, [r7, lr, lsl #2]
-.L937:
+.L945:
 	adds	r0, r0, #1
-	b	.L936
-.L953:
+	b	.L944
+.L961:
 	.align	2
-.L952:
+.L960:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.fnend
@@ -6530,7 +6599,7 @@ FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L955
+	ldr	r0, .L963
 	push	{r3, lr}
 	.save {r3, lr}
 	ldrh	r3, [r0, #120]
@@ -6553,9 +6622,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L956:
+.L964:
 	.align	2
-.L955:
+.L963:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -6573,7 +6642,7 @@ FtlL2PDataInit:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L960
+	ldr	r4, .L968
 	movs	r6, #12
 	ldr	r2, [r4, #128]
 	ldr	r0, [r4, #3872]
@@ -6589,12 +6658,12 @@ FtlL2PDataInit:
 	mov	r3, r4
 	movw	r1, #65535
 	mov	r7, r2
-.L958:
+.L966:
 	ldrh	r4, [r3, #138]
 	uxth	r0, r2
 	adds	r5, r2, #1
 	cmp	r4, r0
-	bhi	.L959
+	bhi	.L967
 	ldr	r2, [r3, #128]
 	strh	r1, [r3, #3906]	@ movhi
 	strh	r1, [r3, #3904]	@ movhi
@@ -6614,7 +6683,7 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3888]
 	str	r2, [r3, #3928]
 	pop	{r3, r4, r5, r6, r7, pc}
-.L959:
+.L967:
 	uxth	r2, r2
 	ldr	r0, [r3, #2492]
 	mul	r4, r6, r2
@@ -6630,10 +6699,10 @@ FtlL2PDataInit:
 	add	r2, r2, r4
 	str	r2, [r0, #8]
 	mov	r2, r5
-	b	.L958
-.L961:
+	b	.L966
+.L969:
 	.align	2
-.L960:
+.L968:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
@@ -6651,13 +6720,13 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L963
+	ldr	r0, .L971
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L964:
+.L972:
 	.align	2
-.L963:
+.L971:
 	.word	.LANCHOR0+3904
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -6675,7 +6744,7 @@ FtlVariablesInit:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r5, #0
-	ldr	r4, .L966
+	ldr	r4, .L974
 	movw	r3, #65535
 	mov	r1, r5
 	ldrh	r2, [r4, #120]
@@ -6709,9 +6778,9 @@ FtlVariablesInit:
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L967:
+.L975:
 	.align	2
-.L966:
+.L974:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -6730,7 +6799,7 @@ SupperBlkListInit:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movs	r6, #0
-	ldr	r4, .L979
+	ldr	r4, .L987
 	movs	r2, #6
 	mov	r9, r6
 	mov	r7, r6
@@ -6745,37 +6814,37 @@ SupperBlkListInit:
 	str	r6, [r4, #2332]
 	strh	r6, [r4, #2336]	@ movhi
 	strh	r6, [r4, #2344]	@ movhi
-.L969:
+.L977:
 	ldrh	r3, [r4, #40]
 	uxth	r8, r6
 	cmp	r8, r3
-	bcs	.L975
+	bcs	.L983
 	mov	r10, #0
 	ldrh	r2, [r4, #32]
 	ldrh	r3, [r4, #102]
 	mov	r5, r10
-	b	.L976
-.L971:
+	b	.L984
+.L979:
 	mov	r1, r8
 	ldrb	r0, [fp, r10]	@ zero_extendqisi2
 	stm	sp, {r2, r3}
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
 	ldm	sp, {r2, r3}
-	cbnz	r0, .L970
+	cbnz	r0, .L978
 	add	r5, r5, r3
 	uxth	r5, r5
-.L970:
+.L978:
 	add	r10, r10, #1
-.L976:
+.L984:
 	uxth	r1, r10
 	cmp	r2, r1
-	bhi	.L971
-	cbz	r5, .L978
+	bhi	.L979
+	cbz	r5, .L986
 	mov	r1, r5
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L972:
+.L980:
 	ldr	r2, [r4, #2316]
 	uxth	r1, r6
 	movs	r3, #6
@@ -6783,50 +6852,50 @@ SupperBlkListInit:
 	strh	r0, [r3, #4]	@ movhi
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r8
-	beq	.L973
+	beq	.L981
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r8
-	beq	.L973
+	beq	.L981
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r8
-	beq	.L973
+	beq	.L981
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r1, lsl #1]
-	cbnz	r3, .L974
+	cbnz	r3, .L982
 	add	r9, r9, #1
 	mov	r0, r8
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-.L973:
+.L981:
 	adds	r6, r6, #1
-	b	.L969
-.L978:
+	b	.L977
+.L986:
 	mov	r0, r5
-	b	.L972
-.L974:
+	b	.L980
+.L982:
 	adds	r7, r7, #1
 	mov	r0, r8
 	uxth	r7, r7
 	bl	INSERT_DATA_LIST
-	b	.L973
-.L975:
+	b	.L981
+.L983:
 	strh	r7, [r4, #2336]	@ movhi
 	add	r7, r7, r9
 	cmp	r7, r3
 	strh	r9, [r4, #2344]	@ movhi
-	ble	.L977
+	ble	.L985
 	movw	r2, #2154
-	ldr	r1, .L979+4
-	ldr	r0, .L979+8
-	bl	printk
-.L977:
+	ldr	r1, .L987+4
+	ldr	r0, .L987+8
+	bl	sftl_printk
+.L985:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L980:
+.L988:
 	.align	2
-.L979:
+.L987:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+342
 	.word	.LC1
@@ -6846,7 +6915,7 @@ FtlGcPageVarInit:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r3, #0
-	ldr	r4, .L982
+	ldr	r4, .L990
 	movs	r1, #255
 	ldrh	r2, [r4, #106]
 	ldr	r0, [r4, #3188]
@@ -6862,9 +6931,9 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	pop	{r4, lr}
 	b	FtlGcBufInit
-.L983:
+.L991:
 	.align	2
-.L982:
+.L990:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
@@ -6879,7 +6948,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1009
+	ldr	r3, .L1017
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
@@ -6889,30 +6958,30 @@ FtlGcScanTempBlk:
 	ldrh	r4, [r3, #4]
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L1003
-	cbnz	r4, .L985
-.L986:
+	beq	.L1011
+	cbnz	r4, .L993
+.L994:
 	bl	FtlGcPageVarInit
-	b	.L987
-.L1003:
+	b	.L995
+.L1011:
 	movs	r4, #0
-.L985:
-	ldr	r3, .L1009+4
+.L993:
+	ldr	r3, .L1017+4
 	ldr	r2, [sp, #8]
 	ldrh	r3, [r3, #102]
 	cmp	r3, r2
-	beq	.L986
-.L987:
+	beq	.L994
+.L995:
 	mov	fp, #0
 	movw	r8, #65535
-.L997:
+.L1005:
 	ldrh	r3, [r7]
 	movs	r0, #0
 	strb	r0, [r7, #8]
 	cmp	r3, r8
-	beq	.L988
-	ldr	r5, .L1009+4
-.L1000:
+	beq	.L996
+	ldr	r5, .L1017+4
+.L1008:
 	ldr	r3, [r5, #3832]
 	movs	r2, #0
 	ldrh	ip, [r5, #32]
@@ -6927,35 +6996,35 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #16]
 	ldrh	r3, [r5, #112]
 	str	r3, [sp, #20]
-.L989:
+.L997:
 	uxth	r3, r2
 	cmp	ip, r3
-	bhi	.L993
+	bhi	.L1001
 	mov	r9, #0
 	movs	r2, #0
 	mov	r1, r6
 	ldr	r0, [sp, #4]
 	bl	FlashReadPages
-.L994:
+.L1002:
 	uxth	r3, r9
 	cmp	r6, r3
-	bhi	.L998
+	bhi	.L1006
 	ldr	r3, [sp, #8]
 	add	fp, fp, #1
 	adds	r4, r4, #1
 	uxth	r4, r4
 	cmp	r3, fp
-	bls	.L999
-.L1001:
+	bls	.L1007
+.L1009:
 	ldrh	r3, [r5, #102]
 	cmp	r3, r4
-	bhi	.L1000
+	bhi	.L1008
 	movs	r0, #0
-	b	.L988
-.L993:
+	b	.L996
+.L1001:
 	ldrh	r3, [lr], #2
 	cmp	r3, r8
-	beq	.L990
+	beq	.L998
 	ldr	r1, [sp, #4]
 	orr	r3, r4, r3, lsl #10
 	mla	r1, r9, r6, r1
@@ -6978,10 +7047,10 @@ FtlGcScanTempBlk:
 	str	r0, [r1, #8]
 	add	r3, r3, r10
 	str	r3, [r1, #12]
-.L990:
-	adds	r2, r2, #1
-	b	.L989
 .L998:
+	adds	r2, r2, #1
+	b	.L997
+.L1006:
 	movs	r3, #20
 	ldr	r2, [r5, #3832]
 	mul	r10, r3, r9
@@ -6994,18 +7063,18 @@ FtlGcScanTempBlk:
 	bl	P2V_plane
 	ldr	r2, [sp, #16]
 	ldr	r2, [r2, r10]
-	cbnz	r2, .L995
+	cbnz	r2, .L1003
 	ldr	r3, [sp, #12]
 	add	r9, r9, #1
 	ldr	r1, [sp, #4]
 	ldr	r3, [r3, #12]
 	ldrh	r2, [r3]
 	cmp	r2, r8
-	bne	.L996
+	bne	.L1004
 	movs	r3, #1
 	str	r3, [r5, #4000]
-.L988:
-	ldr	r3, .L1009
+.L996:
+	ldr	r3, .L1017
 	movw	r2, #65535
 	strb	r0, [r7, #6]
 	mov	r1, r4
@@ -7014,13 +7083,13 @@ FtlGcScanTempBlk:
 	mov	r2, r0
 	mov	r0, r7
 	bl	ftl_sb_update_avl_pages
-	b	.L1002
-.L996:
+	b	.L1010
+.L1004:
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L994
-.L995:
+	b	.L1002
+.L1003:
 	ldrh	r2, [r7]
 	movs	r4, #0
 	ldr	r3, [r5, #2324]
@@ -7029,25 +7098,25 @@ FtlGcScanTempBlk:
 	bl	INSERT_FREE_LIST
 	strh	r8, [r7]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L997
-.L999:
-	ldr	r2, .L1009
+	b	.L1005
+.L1007:
+	ldr	r2, .L1017
 	ldrh	r3, [r2, #4]
 	cmp	r3, r8
-	beq	.L1001
+	beq	.L1009
 	add	r3, r3, fp
 	strh	r3, [r2, #4]	@ movhi
 	ldrh	r3, [r5, #102]
 	cmp	r3, r4
-	bls	.L1001
-.L1002:
+	bls	.L1009
+.L1010:
 	mov	r0, #-1
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1010:
+.L1018:
 	.align	2
-.L1009:
+.L1017:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -7082,7 +7151,7 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movs	r5, #0
-	ldr	r4, .L1021
+	ldr	r4, .L1029
 	movs	r1, #0
 	ldr	r0, [r4, #3280]
 	add	r6, r4, #176
@@ -7091,18 +7160,18 @@ FtlBbmTblFlush:
 	str	r0, [r4, #3268]
 	str	r3, [r4, #3272]
 	bl	ftl_memset
-.L1013:
+.L1021:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	blt	.L1014
+	blt	.L1022
 	ldr	r6, [r4, #3272]
 	movs	r2, #16
 	movs	r1, #255
-	ldr	r9, .L1021+12
-	ldr	r8, .L1021+4
+	ldr	r9, .L1029+12
+	ldr	r8, .L1029+4
 	movs	r5, #0
 	mov	r0, r6
-	ldr	r10, .L1021+16
+	ldr	r10, .L1029+16
 	bl	memset
 	movw	r3, #61649
 	mov	r7, r5
@@ -7117,7 +7186,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #10]	@ movhi
 	ldr	r3, [r4, #28]
 	strh	r3, [r6, #12]	@ movhi
-.L1015:
+.L1023:
 	ldr	r3, [r4, #3280]
 	mov	fp, #0
 	ldrh	r1, [r4, #152]
@@ -7132,9 +7201,9 @@ FtlBbmTblFlush:
 	ldrh	r3, [r4, #156]
 	str	r0, [sp]
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	movs	r3, #1
-	ldr	r0, .L1021+4
+	ldr	r0, .L1029+4
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
@@ -7142,7 +7211,7 @@ FtlBbmTblFlush:
 	ldrh	r2, [r4, #154]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1016
+	blt	.L1024
 	ldr	r3, [r4, #160]
 	ldrh	r2, [r4, #152]
 	ldr	r0, [r4, #3800]
@@ -7165,27 +7234,27 @@ FtlBbmTblFlush:
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-.L1016:
+.L1024:
 	ldrh	r3, [r4, #154]
 	adds	r3, r3, #1
 	strh	r3, [r4, #154]	@ movhi
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	bne	.L1017
+	bne	.L1025
 	adds	r5, r5, #1
 	ldr	r1, [r4, #3264]
 	uxth	r5, r5
 	mov	r0, r10
-	bl	printk
+	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L1015
+	bls	.L1023
 	mov	r2, r5
 	ldr	r1, [r4, #3264]
-	ldr	r0, .L1021+8
-	bl	printk
-.L1019:
-	b	.L1019
-.L1014:
+	ldr	r0, .L1029+8
+	bl	sftl_printk
+.L1027:
+	b	.L1027
+.L1022:
 	ldrh	r2, [r4, #3900]
 	ldr	r3, [r4, #3268]
 	ldr	r1, [r6, #4]!
@@ -7194,25 +7263,25 @@ FtlBbmTblFlush:
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L1013
-.L1020:
+	b	.L1021
+.L1028:
 	movs	r7, #1
-	b	.L1015
-.L1017:
+	b	.L1023
+.L1025:
 	cmp	r7, #0
-	beq	.L1020
+	beq	.L1028
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1022:
+.L1030:
 	.align	2
-.L1021:
+.L1029:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
-	.word	.LC96
-	.word	.LC94
-	.word	.LC95
+	.word	.LC100
+	.word	.LC98
+	.word	.LC99
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	1
@@ -7229,28 +7298,28 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L1058
+	ldr	r4, .L1066
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L1058+20
-.L1024:
-	ldr	r3, .L1058
-	ldr	r2, .L1058
+	ldr	r9, .L1066+20
+.L1032:
+	ldr	r3, .L1066
+	ldr	r2, .L1066
 	ldrh	r3, [r3, #2344]
 	ldrh	r2, [r2, #2336]
 	add	r3, r3, r2
-	ldr	r2, .L1058
+	ldr	r2, .L1066
 	ldrh	r2, [r2, #40]
 	cmp	r3, r2
-	ble	.L1025
+	ble	.L1033
 	movw	r2, #2585
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1025:
-	ldr	r3, .L1058+8
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1033:
+	ldr	r3, .L1066+8
 	cmp	r5, r3
-	bne	.L1050
+	bne	.L1058
 	ldrh	r3, [r4, #2344]
 	ldr	r1, [r4, #3160]
 	mul	r2, r1, r3
@@ -7258,21 +7327,21 @@ allocate_data_superblock:
 	adds	r1, r1, #1
 	add	r1, r1, r2, lsr #2
 	uxth	r1, r1
-	cbz	r1, .L1026
+	cbz	r1, .L1034
 	subs	r1, r1, #1
 	uxth	r1, r1
-.L1026:
-	ldr	r0, .L1058+12
+.L1034:
+	ldr	r0, .L1066+12
 	bl	List_pop_index_node
 	ldrh	r3, [r4, #2344]
 	mov	r6, r0
 	uxth	r8, r0
-	cbnz	r3, .L1027
+	cbnz	r3, .L1035
 	movw	r2, #2594
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1027:
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1035:
 	ldrh	r3, [r4, #2344]
 	mov	r0, r5
 	subs	r3, r3, #1
@@ -7280,7 +7349,7 @@ allocate_data_superblock:
 	strh	r8, [r5]	@ movhi
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1028
+	cbnz	r3, .L1036
 	ldr	r3, [r4, #2324]
 	uxth	r6, r6
 	movw	r2, #65535
@@ -7292,27 +7361,27 @@ allocate_data_superblock:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1024
+	ble	.L1032
 	movw	r2, #2605
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-	b	.L1024
-.L1050:
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+	b	.L1032
+.L1058:
 	movs	r1, #0
-	b	.L1026
-.L1028:
+	b	.L1034
+.L1036:
 	ldrh	r2, [r4, #2336]
 	ldrh	r3, [r4, #2344]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1030
+	ble	.L1038
 	mov	r2, #2608
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1030:
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1038:
 	ldr	r1, [r4, #3800]
 	mov	r10, #20
 	ldrh	r2, [r4, #32]
@@ -7323,35 +7392,35 @@ allocate_data_superblock:
 	mov	ip, r7
 	mla	r2, r10, r2, r1
 	str	r2, [sp, #4]
-.L1031:
+.L1039:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L1033
-	cbnz	r7, .L1034
+	bne	.L1041
+	cbnz	r7, .L1042
 	movw	r2, #2619
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1034:
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1042:
 	ldrh	r3, [r4, #2588]
 	cmp	r3, r8
-	bne	.L1035
+	bne	.L1043
 	movw	r2, #2621
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1035:
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1043:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	uxth	r6, r6
 	ldr	r2, [r4, #2328]
 	cmp	r3, #0
-	bne	.L1036
+	bne	.L1044
 	ldrh	r3, [r2, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1037
+	beq	.L1045
 	ldrh	r1, [r4, #92]
 	add	r3, r3, r1
-.L1057:
+.L1065:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	movs	r1, #0
 	ldr	r3, [r4, #2548]
@@ -7359,7 +7428,7 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2548]
 	bl	ftl_set_blk_mode
-.L1039:
+.L1047:
 	ldr	r3, [r4, #2328]
 	ldr	r2, [r4, #2564]
 	ldrh	r0, [r4, #92]
@@ -7376,17 +7445,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3800]
 	str	r0, [r4, #2556]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L1058+16
+	ldr	r0, .L1066+16
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r2, #20
 	mla	r2, r2, r7, r1
 	adds	r3, r1, #4
 	adds	r2, r2, #24
-.L1041:
+.L1049:
 	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L1042
+	bne	.L1050
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3800]
@@ -7394,44 +7463,44 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r3, r10
 	movs	r1, #20
-.L1043:
+.L1051:
 	uxth	r2, r10
 	cmp	r7, r2
-	bhi	.L1045
+	bhi	.L1053
 	cmp	r3, #0
-	ble	.L1046
+	ble	.L1054
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1046:
+.L1054:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1047
+	bne	.L1055
 	ldr	r3, [r4, #2324]
 	movw	r2, #65535
 	mov	r0, r8
 	strh	r2, [r3, r6, lsl #1]	@ movhi
 	bl	INSERT_DATA_LIST
-	b	.L1024
-.L1033:
+	b	.L1032
+.L1041:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
 	ldrh	r2, [r0], #2
 	cmp	r2, lr
-	beq	.L1032
+	beq	.L1040
 	mla	lr, r10, r7, r1
 	adds	r7, r7, #1
 	lsls	r2, r2, #10
 	uxth	r7, r7
 	str	r2, [lr, #4]
-.L1032:
+.L1040:
 	adds	r3, r3, #20
-	b	.L1031
-.L1037:
+	b	.L1039
+.L1045:
 	movs	r3, #2
-	b	.L1057
-.L1036:
+	b	.L1065
+.L1044:
 	ldrh	r3, [r2, r6, lsl #1]
 	mov	r0, r8
 	adds	r3, r3, #1
@@ -7440,19 +7509,19 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2552]
 	bl	ftl_set_blk_mode.part.6
-	b	.L1039
-.L1042:
+	b	.L1047
+.L1050:
 	ldr	r1, [r3, #-20]
 	ands	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L1041
-.L1045:
+	b	.L1049
+.L1053:
 	mul	r2, r1, r10
 	ldr	r0, [r4, #3800]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	adds	r0, r2, #1
-	bne	.L1044
+	bne	.L1052
 	ldr	r0, [ip, #4]
 	adds	r3, r3, #1
 	str	r1, [sp, #12]
@@ -7467,11 +7536,11 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
 	strb	r2, [r5, #7]
-.L1044:
+.L1052:
 	add	r10, r10, #1
 	add	fp, fp, #2
-	b	.L1043
-.L1047:
+	b	.L1051
+.L1055:
 	ldrh	r3, [r4, #102]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -7488,22 +7557,22 @@ allocate_data_superblock:
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #4]
-	cbz	r3, .L1048
+	cbz	r3, .L1056
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1049
-.L1048:
+	cbnz	r3, .L1057
+.L1056:
 	movw	r2, #2674
-	ldr	r1, .L1058+20
-	ldr	r0, .L1058+4
-	bl	printk
-.L1049:
+	ldr	r1, .L1066+20
+	ldr	r0, .L1066+4
+	bl	sftl_printk
+.L1057:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1059:
+.L1067:
 	.align	2
-.L1058:
+.L1066:
 	.word	.LANCHOR0
 	.word	.LC1
 	.word	.LANCHOR0+2444
@@ -7526,67 +7595,67 @@ FtlGcFreeBadSuperBlk:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L1072
+	ldr	r4, .L1080
 	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1061
+	cbz	r3, .L1069
 	movs	r7, #0
 	addw	r10, r4, #3208
-.L1062:
+.L1070:
 	ldrh	r2, [r4, #32]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L1068
+	bhi	.L1076
 	bl	FtlGcReFreshBadBlk
-.L1061:
+.L1069:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1068:
+.L1076:
 	uxtah	r3, r4, r7
 	mov	r1, r8
 	mov	fp, #0
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L1063:
+.L1071:
 	ldrh	r3, [r4, #3206]
 	uxth	r5, fp
 	cmp	r3, r5
-	bhi	.L1067
+	bhi	.L1075
 	adds	r7, r7, #1
-	b	.L1062
-.L1067:
+	b	.L1070
+.L1075:
 	uxth	r6, fp
 	add	r3, r4, r6, lsl #1
 	ldrh	r3, [r3, #3208]
 	cmp	r3, r9
-	bne	.L1064
+	bne	.L1072
 	mov	r1, r9
-	ldr	r0, .L1072+4
-	bl	printk
+	ldr	r0, .L1080+4
+	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [r4, #3206]
 	add	r3, r10, r6, lsl #1
-.L1065:
+.L1073:
 	cmp	r5, r1
-	bcc	.L1066
+	bcc	.L1074
 	subs	r1, r1, #1
 	strh	r1, [r4, #3206]	@ movhi
-.L1064:
+.L1072:
 	add	fp, fp, #1
-	b	.L1063
-.L1066:
+	b	.L1071
+.L1074:
 	ldrh	r0, [r3, #2]!
 	adds	r5, r5, #1
 	uxth	r5, r5
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L1065
-.L1073:
+	b	.L1073
+.L1081:
 	.align	2
-.L1072:
+.L1080:
 	.word	.LANCHOR0
-	.word	.LC97
+	.word	.LC101
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	1
@@ -7600,7 +7669,7 @@ update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1084
+	ldr	r2, .L1092
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
@@ -7608,23 +7677,23 @@ update_vpc_list:
 	ldr	r3, [r2, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	bne	.L1075
+	bne	.L1083
 	ldrh	r1, [r2, #2588]
 	cmp	r1, r0
-	bne	.L1076
+	bne	.L1084
 	movw	r3, #65535
 	strh	r3, [r2, #2588]	@ movhi
-.L1077:
+.L1085:
 	mov	r1, r5
-	ldr	r0, .L1084+4
+	ldr	r0, .L1092+4
 	bl	List_remove_node
 	ldrh	r3, [r4, #2336]
-	cbnz	r3, .L1079
+	cbnz	r3, .L1087
 	movw	r2, #2744
-	ldr	r1, .L1084+8
-	ldr	r0, .L1084+12
-	bl	printk
-.L1079:
+	ldr	r1, .L1092+8
+	ldr	r0, .L1092+12
+	bl	sftl_printk
+.L1087:
 	ldrh	r3, [r4, #2336]
 	mov	r0, r5
 	subs	r3, r3, #1
@@ -7637,34 +7706,34 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1083
+	ble	.L1091
 	movw	r2, #2747
-	ldr	r1, .L1084+8
-	ldr	r0, .L1084+12
-	bl	printk
-.L1083:
+	ldr	r1, .L1092+8
+	ldr	r0, .L1092+12
+	bl	sftl_printk
+.L1091:
 	movs	r3, #1
-	b	.L1074
-.L1076:
+	b	.L1082
+.L1084:
 	ldrh	r1, [r2, #2348]
 	cmp	r1, r0
-	beq	.L1074
+	beq	.L1082
 	ldrh	r1, [r2, #2396]
 	cmp	r1, r0
-	beq	.L1074
+	beq	.L1082
 	ldrh	r2, [r2, #2444]
 	cmp	r2, r0
-	bne	.L1077
-.L1074:
+	bne	.L1085
+.L1082:
 	mov	r0, r3
 	pop	{r3, r4, r5, pc}
-.L1075:
+.L1083:
 	bl	List_update_data_list
 	movs	r3, #0
-	b	.L1074
-.L1085:
+	b	.L1082
+.L1093:
 	.align	2
-.L1084:
+.L1092:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2320
 	.word	.LANCHOR1+385
@@ -7687,42 +7756,42 @@ decrement_vpc_count:
 	.save {r4, r5, r6, lr}
 	cmp	r0, r3
 	mov	r4, r0
-	ldr	r5, .L1095
-	beq	.L1087
+	ldr	r5, .L1103
+	beq	.L1095
 	ldr	r3, [r5, #2324]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1088
+	cbnz	r2, .L1096
 	mov	r1, r0
-	ldr	r0, .L1095+4
-	bl	printk
+	ldr	r0, .L1103+4
+	bl	sftl_printk
 	ldr	r3, [r5, #2324]
 	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L1089
-.L1093:
+	cbz	r6, .L1097
+.L1101:
 	movs	r6, #0
-.L1086:
+.L1094:
 	mov	r0, r6
 	pop	{r4, r5, r6, pc}
-.L1089:
+.L1097:
 	movw	r2, #2762
-.L1094:
-	ldr	r1, .L1095+8
-	ldr	r0, .L1095+12
-	bl	printk
-	b	.L1086
-.L1088:
+.L1102:
+	ldr	r1, .L1103+8
+	ldr	r0, .L1103+12
+	bl	sftl_printk
+	b	.L1094
+.L1096:
 	subs	r2, r2, #1
 	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L1087:
+.L1095:
 	ldrh	r0, [r5, #3992]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1091
+	bne	.L1099
 	strh	r4, [r5, #3992]	@ movhi
-	b	.L1093
-.L1091:
+	b	.L1101
+.L1099:
 	cmp	r4, r0
-	beq	.L1093
+	beq	.L1101
 	bl	update_vpc_list
 	ldr	r2, [r5, #2316]
 	adds	r6, r0, #0
@@ -7732,22 +7801,22 @@ decrement_vpc_count:
 	strh	r4, [r5, #3992]	@ movhi
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L1095+16
+	ldr	r3, .L1103+16
 	muls	r3, r2, r3
 	ldr	r2, [r5, #2324]
 	uxth	r1, r3
 	ldrh	r2, [r2, r1, lsl #1]
 	cmp	r2, #0
-	bne	.L1086
+	bne	.L1094
 	cmp	r4, r1
-	beq	.L1086
+	beq	.L1094
 	movw	r2, #2778
-	b	.L1094
-.L1096:
+	b	.L1102
+.L1104:
 	.align	2
-.L1095:
+.L1103:
 	.word	.LANCHOR0
-	.word	.LC98
+	.word	.LC102
 	.word	.LANCHOR1+401
 	.word	.LC1
 	.word	-1431655765
@@ -7768,20 +7837,20 @@ FtlWriteDump_data:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r4, .L1115
+	ldr	r4, .L1123
 	ldrh	r2, [r4, #2352]
 	cmp	r2, #0
-	beq	.L1098
+	beq	.L1106
 	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1098
+	bne	.L1106
 	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1098
+	beq	.L1106
 	ldrb	r7, [r4, #2358]	@ zero_extendqisi2
-	cbnz	r7, .L1097
+	cbnz	r7, .L1105
 	ldr	r6, [r4, #2504]
 	mov	r2, r7
 	mov	r1, sp
@@ -7798,38 +7867,38 @@ FtlWriteDump_data:
 	str	r0, [sp, #12]
 	str	r5, [sp, #16]
 	str	r7, [r5, #4]
-	beq	.L1100
+	beq	.L1108
 	mov	r2, r7
 	movs	r1, #1
 	add	r0, sp, #4
 	bl	FlashReadPages
-.L1101:
-	ldr	r9, .L1115+4
+.L1109:
+	ldr	r9, .L1123+4
 	movs	r7, #0
 	lsl	r8, r8, #2
 	mov	r10, r7
 	movw	r3, #61589
 	strh	r3, [r5]	@ movhi
-.L1102:
+.L1110:
 	cmp	r8, r7
-	bne	.L1106
-.L1103:
+	bne	.L1114
+.L1111:
 	movs	r3, #1
-.L1114:
+.L1122:
 	strb	r3, [r4, #2358]
-.L1097:
+.L1105:
 	add	sp, sp, #24
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1100:
+.L1108:
 	ldrh	r2, [r4, #110]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1101
-.L1106:
+	b	.L1109
+.L1114:
 	ldrh	r3, [r4, #2352]
 	cmp	r3, #0
-	beq	.L1103
+	beq	.L1111
 	ldr	r3, [sp, #8]
 	mov	r0, r9
 	str	r6, [r5, #8]
@@ -7853,13 +7922,13 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	r0, [r4, #2348]
 	bl	decrement_vpc_count
-	b	.L1102
-.L1098:
+	b	.L1110
+.L1106:
 	movs	r3, #0
-	b	.L1114
-.L1116:
+	b	.L1122
+.L1124:
 	.align	2
-.L1115:
+.L1123:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2348
 	.fnend
@@ -7878,30 +7947,30 @@ l2p_flush:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r4, #0
-	ldr	r5, .L1121
+	ldr	r5, .L1129
 	movs	r6, #12
 	bl	FtlWriteDump_data
-.L1118:
+.L1126:
 	ldrh	r3, [r5, #138]
 	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1120
+	bhi	.L1128
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1120:
+.L1128:
 	ldr	r2, [r5, #2492]
 	uxth	r3, r4
 	mla	r3, r6, r3, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1119
+	bge	.L1127
 	bl	flush_l2p_region
-.L1119:
+.L1127:
 	adds	r4, r4, #1
-	b	.L1118
-.L1122:
+	b	.L1126
+.L1130:
 	.align	2
-.L1121:
+.L1129:
 	.word	.LANCHOR0
 	.fnend
 	.size	l2p_flush, .-l2p_flush
@@ -7924,9 +7993,9 @@ FtlRecoverySuperblock:
 	sub	sp, sp, #52
 	mov	fp, r0
 	cmp	r3, r2
-	beq	.L1248
+	beq	.L1256
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1255
+	ldr	r4, .L1263
 	str	r3, [sp, #8]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp, #8]
@@ -7934,27 +8003,27 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r4, #102]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1126
+	bne	.L1134
 	strh	r3, [r0, #4]	@ movhi
-.L1253:
+.L1261:
 	strb	r3, [fp, #6]
-.L1248:
+.L1256:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1126:
+.L1134:
 	ldrh	r0, [r0, #16]
-.L1127:
+.L1135:
 	cmp	r0, r2
 	uxth	r5, r3
 	add	r3, r3, #1
-	beq	.L1128
+	beq	.L1136
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
 	mov	r6, r0
-	beq	.L1129
+	beq	.L1137
 	ldr	r3, [r4, #3172]
 	movs	r2, #0
 	ldrh	lr, [r4, #32]
@@ -7970,11 +8039,11 @@ FtlRecoverySuperblock:
 	add	r3, fp, #16
 	mov	ip, r3
 	str	r3, [sp, #20]
-.L1130:
+.L1138:
 	uxth	r3, r2
 	cmp	lr, r3
-	bhi	.L1136
-	ldr	r5, .L1255
+	bhi	.L1144
+	ldr	r5, .L1263
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
@@ -7987,15 +8056,15 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #4]
 	mov	r7, r8
 	movs	r3, #0
-.L1137:
+.L1145:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1142
-	bne	.L1140
+	bhi	.L1150
+	bne	.L1148
 	adds	r3, r6, #1
 	uxth	r3, r3
 	str	r3, [sp, #16]
-.L1249:
+.L1257:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -8003,56 +8072,56 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #16]
 	str	r0, [sp, #12]
 	cmp	r3, r2
-	bne	.L1144
+	bne	.L1152
 	ldrh	r3, [sp, #16]
 	strh	r3, [fp, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [fp, #6]
 	strh	r3, [fp, #4]	@ movhi
-.L1144:
+.L1152:
 	ldr	r3, [sp, #16]
 	ldr	r2, [sp, #8]
 	cmp	r3, r2
-	bne	.L1145
+	bne	.L1153
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #24]
 	cmp	r3, r2
-	bne	.L1145
+	bne	.L1153
 	ldr	r1, [sp, #16]
 	mov	r2, r3
-.L1254:
+.L1262:
 	mov	r0, fp
 	bl	ftl_sb_update_avl_pages
-	b	.L1248
-.L1128:
+	b	.L1256
+.L1136:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [fp, r1, lsl #1]
-	b	.L1127
-.L1129:
+	b	.L1135
+.L1137:
 	ldr	r3, [sp, #8]
-	cbz	r3, .L1131
+	cbz	r3, .L1139
 	movw	r2, #1755
-	ldr	r1, .L1255+4
-	ldr	r0, .L1255+8
-	bl	printk
-.L1131:
+	ldr	r1, .L1263+4
+	ldr	r0, .L1263+8
+	bl	sftl_printk
+.L1139:
 	ldr	r3, [sp, #24]
-	cbz	r3, .L1132
+	cbz	r3, .L1140
 	cmp	r5, r3
-	beq	.L1132
+	beq	.L1140
 	movw	r2, #1756
-	ldr	r1, .L1255+4
-	ldr	r0, .L1255+8
-	bl	printk
-.L1132:
+	ldr	r1, .L1263+4
+	ldr	r0, .L1263+8
+	bl	sftl_printk
+.L1140:
 	movs	r3, #0
 	strh	r3, [fp, #2]	@ movhi
-	b	.L1253
-.L1136:
+	b	.L1261
+.L1144:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1133
+	beq	.L1141
 	mla	r1, r10, r4, r0
 	orr	r3, r6, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8074,51 +8143,51 @@ FtlRecoverySuperblock:
 	str	r5, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1133:
+.L1141:
 	adds	r2, r2, #1
-	b	.L1130
-.L1142:
+	b	.L1138
+.L1150:
 	ldr	r2, [r7]
-	cbnz	r2, .L1138
+	cbnz	r2, .L1146
 	ldr	r10, [r7, #12]
 	ldr	r2, [r10, #4]
 	adds	r0, r2, #1
-	beq	.L1139
+	beq	.L1147
 	ldr	r1, [r5, #2544]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1139
+	cbz	r0, .L1147
 	adds	r2, r2, #1
 	str	r2, [r5, #2544]
-.L1139:
+.L1147:
 	ldr	r2, [r10]
 	adds	r2, r2, #1
-	bne	.L1141
-.L1140:
+	bne	.L1149
+.L1148:
 	uxth	r2, r6
 	uxth	r3, r3
 	str	r2, [sp, #16]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1249
-.L1138:
+	b	.L1257
+.L1146:
 	ldr	r9, [sp, #12]
-.L1141:
+.L1149:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1137
-.L1145:
+	b	.L1145
+.L1153:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1146
+	bne	.L1154
 	ldrb	r3, [fp, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1147
-.L1146:
+	bne	.L1155
+.L1154:
 	ldr	r3, [r5, #4004]
 	uxth	r8, r6
 	uxth	r6, r6
-	ldr	r7, .L1255
+	ldr	r7, .L1263
 	movw	r9, #65535
 	adds	r3, r3, #1
 	itt	eq
@@ -8131,68 +8200,68 @@ FtlRecoverySuperblock:
 	subgt	r4, r8, #7
 	ldrle	r4, [sp, #8]
 	uxthgt	r4, r4
-.L1150:
+.L1158:
 	cmp	r4, r8
-	bhi	.L1157
+	bhi	.L1165
 	movs	r3, #0
 	ldrh	lr, [r7, #32]
 	ldr	r0, [r7, #3832]
 	mov	r6, r3
 	ldr	r1, [sp, #20]
 	mov	ip, #20
-	b	.L1158
-.L1152:
+	b	.L1166
+.L1160:
 	ldrh	r2, [r1], #2
 	cmp	r2, r9
-	beq	.L1151
+	beq	.L1159
 	mla	r10, ip, r6, r0
 	adds	r6, r6, #1
 	orr	r2, r4, r2, lsl #10
 	uxth	r6, r6
 	str	r2, [r10, #4]
-.L1151:
+.L1159:
 	adds	r3, r3, #1
-.L1158:
+.L1166:
 	uxth	r2, r3
 	cmp	r2, lr
-	bcc	.L1152
+	bcc	.L1160
 	movs	r2, #0
 	mov	r1, r6
 	bl	FlashReadPages
 	ldr	r3, [r7, #3832]
 	movs	r2, #20
 	mla	r6, r2, r6, r3
-.L1153:
+.L1161:
 	cmp	r6, r3
-	bne	.L1156
+	bne	.L1164
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1150
-.L1156:
+	b	.L1158
+.L1164:
 	ldr	r2, [r3]
-	cbnz	r2, .L1147
+	cbnz	r2, .L1155
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r9
-	beq	.L1155
+	beq	.L1163
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
 	strne	r2, [r7, #4004]
-.L1155:
+.L1163:
 	adds	r3, r3, #20
-	b	.L1153
-.L1157:
+	b	.L1161
+.L1165:
 	mov	r3, #-1
 	str	r3, [r7, #4004]
-.L1147:
+.L1155:
 	movs	r3, #1
-	ldr	r0, .L1255+12
+	ldr	r0, .L1263+12
 	strh	r3, [r5, #4008]	@ movhi
-	ldr	r4, .L1255
+	ldr	r4, .L1263
 	bl	FtlMapBlkWriteDump_data
 	ldr	r5, [sp, #8]
-.L1159:
+.L1167:
 	ldrh	r6, [r4, #32]
 	movs	r3, #0
 	ldr	r0, [r4, #3832]
@@ -8200,61 +8269,61 @@ FtlRecoverySuperblock:
 	ldr	r1, [sp, #20]
 	movw	r7, #65535
 	mov	ip, #20
-.L1160:
+.L1168:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1162
+	bhi	.L1170
 	movs	r2, #0
 	mov	r1, r10
 	bl	FlashReadPages
 	movs	r3, #0
-.L1252:
+.L1260:
 	str	r3, [sp, #28]
 	ldrh	r3, [sp, #28]
 	cmp	r10, r3
-	bhi	.L1192
+	bhi	.L1200
 	adds	r5, r5, #1
 	ldrh	r3, [r4, #102]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1159
+	bne	.L1167
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [fp, #2]	@ movhi
 	strh	r3, [fp, #4]	@ movhi
-.L1193:
+.L1201:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1248
+	bcs	.L1256
 	ldr	r1, [sp, #20]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
 	str	r1, [sp, #20]
 	add	r1, r3, #1
-	bne	.L1253
+	bne	.L1261
 	mov	r3, r1
-	b	.L1193
-.L1162:
+	b	.L1201
+.L1170:
 	ldrh	r2, [r1], #2
 	cmp	r2, r7
-	beq	.L1161
+	beq	.L1169
 	mla	lr, ip, r10, r0
 	add	r10, r10, #1
 	orr	r2, r5, r2, lsl #10
 	uxth	r10, r10
 	str	r2, [lr, #4]
-.L1161:
+.L1169:
 	adds	r3, r3, #1
-	b	.L1160
-.L1256:
+	b	.L1168
+.L1264:
 	.align	2
-.L1255:
+.L1263:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+421
 	.word	.LC1
 	.word	.LANCHOR0+3904
-.L1192:
+.L1200:
 	ldr	r3, [sp, #28]
 	movs	r7, #20
 	ldr	r9, [r4, #3832]
@@ -8266,57 +8335,57 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp, #8]
 	cmp	r5, r3
-	bcc	.L1164
-	bne	.L1165
+	bcc	.L1172
+	bne	.L1173
 	ldr	r3, [sp, #24]
 	cmp	r3, r0
-	bhi	.L1164
-.L1165:
+	bhi	.L1172
+.L1173:
 	ldr	r3, [sp, #16]
 	cmp	r5, r3
-	bne	.L1166
+	bne	.L1174
 	ldr	r3, [sp, #12]
 	cmp	r3, r0
-	beq	.L1167
-.L1166:
+	beq	.L1175
+.L1174:
 	ldr	r3, [r9, r7]
 	adds	r3, r3, #1
-	beq	.L1168
+	beq	.L1176
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	beq	.L1169
-.L1176:
+	beq	.L1177
+.L1184:
 	ldrh	r0, [fp]
-.L1251:
+.L1259:
 	bl	decrement_vpc_count
-.L1164:
+.L1172:
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	b	.L1252
-.L1169:
+	b	.L1260
+.L1177:
 	ldr	r3, [r8, #4]
 	adds	r6, r3, #1
 	str	r3, [sp, #4]
-	beq	.L1170
+	beq	.L1178
 	ldr	r1, [r4, #2544]
 	mov	r0, r3
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1170
+	cbz	r0, .L1178
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
 	str	r3, [r4, #2544]
-.L1170:
+.L1178:
 	ldrh	r2, [r8]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1171
+	beq	.L1179
 	movw	r2, #1905
-	ldr	r1, .L1257
-	ldr	r0, .L1257+4
-	bl	printk
-.L1171:
+	ldr	r1, .L1265
+	ldr	r0, .L1265+4
+	bl	sftl_printk
+.L1179:
 	ldr	r6, [r8, #8]
 	add	r1, sp, #40
 	ldr	r3, [r8, #12]
@@ -8326,14 +8395,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #4004]
 	adds	r0, r1, #1
-	beq	.L1172
+	beq	.L1180
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1172
+	beq	.L1180
 	ldr	r3, [sp, #36]
 	adds	r2, r3, #1
-	beq	.L1173
+	beq	.L1181
 	ldr	r0, [r4, #3832]
 	movs	r2, #0
 	movs	r1, #1
@@ -8345,122 +8414,122 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1174
-.L1175:
+	bne	.L1182
+.L1183:
 	mov	r3, #-1
 	ldrh	r0, [fp]
 	str	r3, [sp, #36]
 	bl	decrement_vpc_count
-.L1183:
+.L1191:
 	ldr	r0, [sp, #36]
 	adds	r1, r0, #1
-	beq	.L1164
-.L1196:
+	beq	.L1172
+.L1204:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #40]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1188
+	bhi	.L1196
 	movw	r2, #2006
-	ldr	r1, .L1257
-	ldr	r0, .L1257+4
-	bl	printk
-.L1188:
+	ldr	r1, .L1265
+	ldr	r0, .L1265+4
+	bl	sftl_printk
+.L1196:
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1189
+	beq	.L1197
 	mov	r0, r6
-	b	.L1251
-.L1173:
+	b	.L1259
+.L1181:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	bne	.L1176
+	bne	.L1184
 	movs	r2, #1
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-	b	.L1176
-.L1174:
+	b	.L1184
+.L1182:
 	ldr	r1, [r8, #8]
 	cmp	r6, r1
-	bne	.L1175
+	bne	.L1183
 	ldr	r9, [r8, #4]
 	ldr	r0, [r4, #4004]
 	mov	r1, r9
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
+	beq	.L1183
 	ldr	r1, [sp, #40]
 	ldr	r0, [sp, #44]
 	cmp	r1, r0
-	bne	.L1178
-.L1181:
+	bne	.L1186
+.L1189:
 	ldr	r1, [sp, #36]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1175
-.L1178:
+	b	.L1183
+.L1186:
 	ldr	r0, [sp, #36]
 	cmp	r1, r0
-	beq	.L1175
+	beq	.L1183
 	adds	r0, r1, #1
-	beq	.L1179
+	beq	.L1187
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r8, [r3, #12]
 	bl	FlashReadPages
-.L1180:
+.L1188:
 	ldr	r3, [r4, #3832]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1181
+	beq	.L1189
 	ldr	r3, [r8, #4]
 	ldr	r0, [r4, #4004]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1181
+	beq	.L1189
 	mov	r1, r3
 	mov	r0, r9
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
-	b	.L1181
-.L1179:
+	beq	.L1183
+	b	.L1189
+.L1187:
 	str	r1, [r2, r7]
-	b	.L1180
-.L1172:
+	b	.L1188
+.L1180:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	beq	.L1183
+	beq	.L1191
 	movs	r2, #1
 	add	r1, sp, #44
 	mov	r0, r6
 	bl	log2phys
 	ldr	r8, [sp, #40]
 	cmp	r8, #-1
-	beq	.L1183
+	beq	.L1191
 	ldr	r3, [sp, #36]
 	cmp	r8, r3
-	beq	.L1186
+	beq	.L1194
 	ubfx	r0, r8, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1195
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1195
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r0
-	bne	.L1183
-.L1187:
+	bne	.L1191
+.L1195:
 	ldr	r0, [r4, #3832]
 	movs	r2, #0
 	movs	r1, #1
@@ -8470,23 +8539,23 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #3832]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1183
+	beq	.L1191
 	ldr	r1, [r7, #4]
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1183
+	bne	.L1191
 	movs	r2, #1
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	b	.L1183
-.L1189:
+	b	.L1191
+.L1197:
 	mov	r1, r6
-	ldr	r0, .L1257+8
-	bl	printk
-	b	.L1164
-.L1168:
+	ldr	r0, .L1265+8
+	bl	sftl_printk
+	b	.L1172
+.L1176:
 	ldr	r3, [r4, #4012]
 	cmp	r3, #31
 	itttt	ls
@@ -8498,33 +8567,33 @@ FtlRecoverySuperblock:
 	bl	decrement_vpc_count
 	ldr	r3, [r4, #4004]
 	adds	r2, r3, #1
-	bne	.L1191
+	bne	.L1199
 	ldr	r3, [sp, #4]
-.L1250:
+.L1258:
 	str	r3, [r4, #4004]
-	b	.L1164
-.L1191:
+	b	.L1172
+.L1199:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bcs	.L1164
+	bcs	.L1172
 	mov	r3, r2
-	b	.L1250
-.L1167:
+	b	.L1258
+.L1175:
 	ldrb	r3, [sp, #12]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [fp, #2]	@ movhi
 	ldr	r2, [sp, #12]
 	strb	r3, [fp, #6]
-	b	.L1254
-.L1186:
+	b	.L1262
+.L1194:
 	mov	r0, r8
-	b	.L1196
-.L1258:
+	b	.L1204
+.L1266:
 	.align	2
-.L1257:
+.L1265:
 	.word	.LANCHOR1+421
 	.word	.LC1
-	.word	.LC99
+	.word	.LC103
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	1
@@ -8542,7 +8611,7 @@ FtlSuperblockPowerLostFix:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r4, .L1270
+	ldr	r4, .L1278
 	mov	r3, #-1
 	mov	r8, #0
 	movw	r1, #61589
@@ -8567,12 +8636,12 @@ FtlSuperblockPowerLostFix:
 	add	r1, r1, #1269760
 	addw	r1, r1, #1507
 	str	r1, [r2, #4]
-.L1260:
+.L1268:
 	subs	r7, r7, #1
-	beq	.L1262
+	beq	.L1270
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1261
-.L1262:
+	cbnz	r3, .L1269
+.L1270:
 	ldr	r2, [r4, #2324]
 	ldrh	r1, [r5]
 	ldrh	r0, [r5, #4]
@@ -8587,12 +8656,12 @@ FtlSuperblockPowerLostFix:
 	add	sp, sp, #24
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1261:
+.L1269:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	str	r0, [sp, #8]
 	adds	r0, r0, #1
-	beq	.L1262
+	beq	.L1270
 	ldr	r3, [r4, #2544]
 	movs	r1, #1
 	add	r0, sp, #4
@@ -8607,10 +8676,10 @@ FtlSuperblockPowerLostFix:
 	bl	FlashProgPages
 	ldrh	r0, [r5]
 	bl	decrement_vpc_count
-	b	.L1260
-.L1271:
+	b	.L1268
+.L1279:
 	.align	2
-.L1270:
+.L1278:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
@@ -8628,7 +8697,7 @@ FtlLoadBbt:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r8, #61649
-	ldr	r4, .L1301
+	ldr	r4, .L1309
 	ldr	r3, [r4, #3280]
 	addw	r7, r4, #3260
 	ldr	r6, [r4, #3284]
@@ -8638,11 +8707,11 @@ FtlLoadBbt:
 	ldrh	r5, [r4, #98]
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1273:
+.L1281:
 	ldrh	r3, [r4, #98]
 	subs	r3, r3, #16
 	cmp	r5, r3
-	ble	.L1276
+	ble	.L1284
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -8651,7 +8720,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	bne	.L1274
+	bne	.L1282
 	ldr	r3, [r4, #3264]
 	movs	r2, #1
 	mov	r1, r2
@@ -8659,50 +8728,50 @@ FtlLoadBbt:
 	adds	r3, r3, #1
 	str	r3, [r4, #3264]
 	bl	FlashReadPages
-.L1274:
+.L1282:
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	beq	.L1275
+	beq	.L1283
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L1275
+	bne	.L1283
 	ldr	r3, [r6, #4]
 	strh	r5, [r4, #152]	@ movhi
 	str	r3, [r4, #160]
 	ldrh	r3, [r6, #8]
 	strh	r3, [r4, #156]	@ movhi
-.L1276:
+.L1284:
 	ldrh	r3, [r4, #152]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L1290
+	beq	.L1298
 	ldrh	r3, [r4, #156]
 	cmp	r3, r2
-	beq	.L1280
+	beq	.L1288
 	lsls	r3, r3, #10
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1301+4
+	ldr	r0, .L1309+4
 	str	r3, [r4, #3264]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	beq	.L1280
+	beq	.L1288
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1280
+	bne	.L1288
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #160]
 	cmp	r3, r2
-	bls	.L1280
+	bls	.L1288
 	ldrh	r2, [r4, #156]
 	str	r3, [r4, #160]
 	ldrh	r3, [r6, #8]
 	strh	r2, [r4, #152]	@ movhi
 	strh	r3, [r4, #156]	@ movhi
-.L1280:
-	ldr	r7, .L1301+4
+.L1288:
+	ldr	r7, .L1309+4
 	movs	r1, #1
 	ldrh	r0, [r4, #152]
 	movw	r8, #61649
@@ -8710,44 +8779,44 @@ FtlLoadBbt:
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #154]	@ movhi
-.L1282:
+.L1290:
 	cmp	r5, #0
-	bge	.L1285
+	bge	.L1293
 	movs	r2, #254
-	ldr	r1, .L1301+8
-	ldr	r0, .L1301+12
-	bl	printk
-.L1284:
+	ldr	r1, .L1309+8
+	ldr	r0, .L1309+12
+	bl	sftl_printk
+.L1292:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r4, #158]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1287
+	beq	.L1295
 	ldr	r2, [r4, #28]
 	cmp	r0, r2
-	beq	.L1287
+	beq	.L1295
 	ldrh	r3, [r4, #42]
 	lsrs	r3, r3, #2
 	cmp	r2, r3
-	bcs	.L1287
+	bcs	.L1295
 	cmp	r0, r3
-	bcs	.L1287
+	bcs	.L1295
 	bl	FtlSysBlkNumInit
-.L1287:
-	ldr	r6, .L1301+16
+.L1295:
+	ldr	r6, .L1309+16
 	movs	r5, #0
-.L1288:
+.L1296:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	bcc	.L1289
+	bcc	.L1297
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1275:
+.L1283:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1273
-.L1285:
+	b	.L1281
+.L1293:
 	ldrh	r3, [r4, #152]
 	movs	r2, #1
 	mov	r1, r2
@@ -8759,15 +8828,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	beq	.L1283
+	beq	.L1291
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	beq	.L1284
-.L1283:
+	beq	.L1292
+.L1291:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L1282
-.L1289:
+	b	.L1290
+.L1297:
 	ldrh	r2, [r4, #3900]
 	ldr	r1, [r4, #3268]
 	ldr	r0, [r6, #4]!
@@ -8775,13 +8844,13 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	adds	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L1288
-.L1290:
+	b	.L1296
+.L1298:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1302:
+.L1310:
 	.align	2
-.L1301:
+.L1309:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3260
 	.word	.LANCHOR1+443
@@ -8803,47 +8872,47 @@ FtlMakeBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, #0
-	ldr	r9, .L1322+4
+	ldr	r9, .L1330+4
 	bl	FtlBbtMemInit
 	sub	r5, r9, #180
 	sub	r10, r9, #18
 	mov	r4, r5
 	bl	FtlLoadFactoryBbt
-.L1304:
+.L1312:
 	ldrh	r3, [r5, #54]
 	cmp	r8, r3
-	bcc	.L1310
+	bcc	.L1318
 	movs	r5, #0
-.L1311:
+.L1319:
 	ldrh	r3, [r4, #114]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1312
+	bhi	.L1320
 	ldrh	r5, [r4, #164]
 	movw	r6, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1313:
+.L1321:
 	ldrh	r3, [r4, #164]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1317
+	ble	.L1325
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1314
+	beq	.L1322
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1315
+	beq	.L1323
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1314:
+.L1322:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1313
-.L1310:
+	b	.L1321
+.L1318:
 	ldrh	r3, [r10, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3280]
@@ -8851,11 +8920,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3268]
 	str	fp, [r5, #3272]
-	beq	.L1305
+	beq	.L1313
 	ldrh	r7, [r5, #98]
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1322
+	ldr	r0, .L1330
 	mla	r7, r8, r7, r3
 	lsls	r3, r7, #10
 	str	r3, [r5, #3264]
@@ -8866,29 +8935,29 @@ FtlMakeBbt:
 	adds	r2, r2, #7
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
-.L1306:
+.L1314:
 	uxth	r0, r7
 	add	r8, r8, #1
 	add	r9, r9, #4
 	bl	FtlBbmMapBadBlock
-	b	.L1304
-.L1305:
+	b	.L1312
+.L1313:
 	mov	r1, r8
 	bl	FlashGetBadBlockList
 	ldr	r1, [r9]
 	ldr	r0, [r5, #3268]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #98]
-.L1308:
+.L1316:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L1307:
+.L1315:
 	ldrh	r0, [r4, #98]
 	smlabb	r0, r0, r8, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1308
+	beq	.L1316
 	movs	r1, #16
 	ldr	r0, [r4, #3284]
 	strh	r6, [r10]	@ movhi
@@ -8913,32 +8982,32 @@ FtlMakeBbt:
 	str	r3, [r4, #3264]
 	bl	ftl_memcpy
 	movs	r2, #1
-	ldr	r0, .L1322
+	ldr	r0, .L1330
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	ldr	r0, .L1322
+	ldr	r0, .L1330
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	bne	.L1306
+	bne	.L1314
 	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1307
-.L1312:
+	b	.L1315
+.L1320:
 	bl	FtlBbmMapBadBlock
-	b	.L1311
-.L1315:
+	b	.L1319
+.L1323:
 	ldrh	r3, [r4, #152]
 	cmp	r3, r6
-	bne	.L1316
+	bne	.L1324
 	strh	r5, [r4, #152]	@ movhi
-	b	.L1314
-.L1316:
+	b	.L1322
+.L1324:
 	strh	r5, [r4, #156]	@ movhi
-.L1317:
+.L1325:
 	ldrh	r3, [r4, #152]
 	movs	r5, #0
 	ldr	r0, [r4, #3800]
@@ -8968,9 +9037,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1323:
+.L1331:
 	.align	2
-.L1322:
+.L1330:
 	.word	.LANCHOR0+3260
 	.word	.LANCHOR0+180
 	.fnend
@@ -8989,7 +9058,7 @@ FtlVendorPartWrite:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1336
+	ldr	r4, .L1344
 	adds	r2, r0, r1
 	.pad #108
 	sub	sp, sp, #108
@@ -8997,19 +9066,19 @@ FtlVendorPartWrite:
 	mov	r6, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
-	bhi	.L1332
+	bhi	.L1340
 	ldrh	r7, [r4, #108]
 	mov	r9, #0
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1326:
-	cbnz	r6, .L1331
-.L1324:
+.L1334:
+	cbnz	r6, .L1339
+.L1332:
 	mov	r0, r9
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1331:
+.L1339:
 	ldr	r3, [r4, #3884]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
@@ -9026,9 +9095,9 @@ FtlVendorPartWrite:
 	cmp	r6, r5
 	it	cc
 	uxthcc	r5, r6
-	cbz	r2, .L1328
+	cbz	r2, .L1336
 	cmp	r5, r3
-	beq	.L1328
+	beq	.L1336
 	ldr	r3, [r4, #3848]
 	add	r0, sp, #20
 	str	r2, [sp, #24]
@@ -9038,7 +9107,7 @@ FtlVendorPartWrite:
 	add	r3, sp, #40
 	str	r3, [sp, #32]
 	bl	FlashReadPages
-.L1329:
+.L1337:
 	lsls	r3, r5, #9
 	ldr	r0, [r4, #3848]
 	mov	r1, r10
@@ -9052,7 +9121,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r7
 	ldr	r2, [r4, #3848]
-	ldr	r0, .L1336+4
+	ldr	r0, .L1344+4
 	adds	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
@@ -9060,19 +9129,19 @@ FtlVendorPartWrite:
 	it	eq
 	moveq	r9, #-1
 	add	r10, r10, r3
-	b	.L1326
-.L1328:
+	b	.L1334
+.L1336:
 	ldrh	r2, [r4, #110]
 	movs	r1, #0
 	ldr	r0, [r4, #3848]
 	bl	ftl_memset
-	b	.L1329
-.L1332:
+	b	.L1337
+.L1340:
 	mov	r9, #-1
-	b	.L1324
-.L1337:
+	b	.L1332
+.L1345:
 	.align	2
-.L1336:
+.L1344:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3948
 	.fnend
@@ -9089,12 +9158,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1340
-	ldr	r3, .L1340+4
+	ldr	r2, .L1348
+	ldr	r3, .L1348+4
 	ldr	r1, [r2, #2636]
 	cmp	r1, r3
-	bne	.L1338
-	ldr	r3, .L1340+8
+	bne	.L1346
+	ldr	r3, .L1348+8
 	addw	r2, r2, #2636
 	movs	r1, #1
 	movs	r0, #0
@@ -9124,11 +9193,11 @@ Ftl_save_ext_data:
 	ldr	r3, [r2, #-68]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1338:
+.L1346:
 	bx	lr
-.L1341:
+.L1349:
 	.align	2
-.L1340:
+.L1348:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177348
@@ -9145,7 +9214,7 @@ FtlEctTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1347
+	ldr	r2, .L1355
 	push	{r3, lr}
 	.save {r3, lr}
 	ldrh	r3, [r2, #-200]
@@ -9155,20 +9224,20 @@ FtlEctTblFlush:
 	movhi	r2, #32
 	strhls	r3, [r2, #-200]	@ movhi
 	movls	r2, #1
-	ldr	r3, .L1347+4
-	cbnz	r0, .L1344
+	ldr	r3, .L1355+4
+	cbnz	r0, .L1352
 	ldr	r1, [r3, #3860]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1345
-.L1344:
+	bcc	.L1353
+.L1352:
 	ldr	r2, [r3, #3860]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1347+8
+	ldr	r1, .L1355+8
 	str	r1, [r2]
 	ldrh	r1, [r3, #3852]
 	ldr	r2, [r3, #3860]
@@ -9181,12 +9250,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1345:
+.L1353:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1348:
+.L1356:
 	.align	2
-.L1347:
+.L1355:
 	.word	.LANCHOR3
 	.word	.LANCHOR0
 	.word	1112818501
@@ -9222,7 +9291,7 @@ FtlVendorPartRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r5, .L1359
+	ldr	r5, .L1367
 	adds	r2, r0, r1
 	.pad #100
 	sub	sp, sp, #100
@@ -9230,19 +9299,19 @@ FtlVendorPartRead:
 	mov	r7, r1
 	ldrh	r3, [r5, #96]
 	cmp	r2, r3
-	bhi	.L1358
+	bhi	.L1366
 	ldrh	r6, [r5, #108]
 	mov	r9, #0
 	lsr	r6, r0, r6
 	lsls	r6, r6, #2
-.L1352:
-	cbnz	r7, .L1357
-.L1350:
+.L1360:
+	cbnz	r7, .L1365
+.L1358:
 	mov	r0, r9
 	add	sp, sp, #100
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1357:
+.L1365:
 	ldr	r3, [r5, #3884]
 	mov	r0, r8
 	ldrh	r4, [r5, #58]
@@ -9258,7 +9327,7 @@ FtlVendorPartRead:
 	it	cc
 	uxthcc	r4, r7
 	lsl	fp, r4, #9
-	cbz	r3, .L1354
+	cbz	r3, .L1362
 	str	r3, [sp, #16]
 	movs	r2, #1
 	ldr	r3, [r5, #3848]
@@ -9278,24 +9347,24 @@ FtlVendorPartRead:
 	moveq	r9, #-1
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1356:
+.L1364:
 	subs	r7, r7, r4
 	add	r8, r8, r4
 	add	r10, r10, fp
 	adds	r6, r6, #4
-	b	.L1352
-.L1354:
+	b	.L1360
+.L1362:
 	mov	r2, fp
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1356
-.L1358:
+	b	.L1364
+.L1366:
 	mov	r9, #-1
-	b	.L1350
-.L1360:
+	b	.L1358
+.L1368:
 	.align	2
-.L1359:
+.L1367:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
@@ -9313,32 +9382,32 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1363
+	ldr	r4, .L1371
 	ldr	r2, [r4, #3860]
 	ldrh	r1, [r4, #3852]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3860]
 	ldr	r2, [r3]
-	ldr	r3, .L1363+4
+	ldr	r3, .L1371+4
 	cmp	r2, r3
-	beq	.L1362
-	ldr	r1, .L1363+8
-	ldr	r0, .L1363+12
-	bl	printk
+	beq	.L1370
+	ldr	r1, .L1371+8
+	ldr	r0, .L1371+12
+	bl	sftl_printk
 	ldrh	r2, [r4, #3852]
 	movs	r1, #0
 	ldr	r0, [r4, #3860]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1362:
+.L1370:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1364:
+.L1372:
 	.align	2
-.L1363:
+.L1371:
 	.word	.LANCHOR0
 	.word	1112818501
-	.word	.LC100
+	.word	.LC104
 	.word	.LC71
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
@@ -9356,22 +9425,22 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1368
+	ldr	r4, .L1376
 	movs	r0, #0
-	ldr	r5, .L1368+4
+	ldr	r5, .L1376+4
 	addw	r2, r4, #2636
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	beq	.L1366
+	beq	.L1374
 	mov	r1, #512
 	addw	r0, r4, #2636
 	bl	__memzero
 	str	r5, [r4, #2636]
-.L1366:
+.L1374:
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	bne	.L1367
+	bne	.L1375
 	ldr	r3, [r4, #2724]
 	str	r3, [r4, #2532]
 	ldr	r3, [r4, #2728]
@@ -9396,7 +9465,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2564]
 	ldr	r3, [r4, #2684]
 	str	r3, [r4, #2568]
-.L1367:
+.L1375:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9405,9 +9474,9 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2556]
 	pop	{r3, r4, r5, pc}
-.L1369:
+.L1377:
 	.align	2
-.L1368:
+.L1376:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9442,14 +9511,14 @@ FtlVpcTblFlush:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r4, .L1383
+	ldr	r4, .L1391
 	movs	r1, #255
 	movw	r7, #65535
-	ldr	r9, .L1383+16
+	ldr	r9, .L1391+16
 	ldr	r3, [r4, #3280]
 	addw	r8, r4, #3260
 	ldr	r6, [r4, #3284]
-	ldr	r10, .L1383+20
+	ldr	r10, .L1391+20
 	str	r3, [r4, #3268]
 	ldrh	r3, [r4, #2576]
 	str	r6, [r4, #3272]
@@ -9461,9 +9530,9 @@ FtlVpcTblFlush:
 	str	r5, [r6, #8]
 	ldrh	r2, [r4, #2350]
 	str	r3, [r6, #4]
-	ldr	r3, .L1383+4
+	ldr	r3, .L1391+4
 	str	r3, [r4, #2268]
-	ldr	r3, .L1383+8
+	ldr	r3, .L1391+8
 	str	r3, [r4, #2272]
 	ldrh	r3, [r4, #2582]
 	strh	r3, [r4, #2276]	@ movhi
@@ -9523,7 +9592,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1372:
+.L1380:
 	ldr	r3, [r4, #3280]
 	mov	r0, r8
 	ldrh	r2, [r4, #2576]
@@ -9541,7 +9610,7 @@ FtlVpcTblFlush:
 	ldrh	r2, [r4, #2578]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1373
+	blt	.L1381
 	ldrh	r3, [r4, #2576]
 	ldrh	r7, [r4, #2580]
 	strh	r3, [r4, #2580]	@ movhi
@@ -9562,21 +9631,21 @@ FtlVpcTblFlush:
 	mov	r1, r3
 	mov	r0, r8
 	bl	FlashProgPages
-.L1373:
+.L1381:
 	ldrh	r3, [r4, #2578]
 	ldr	r2, [r4, #3260]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	adds	r2, r2, #1
 	strh	r3, [r4, #2578]	@ movhi
-	bne	.L1374
+	bne	.L1382
 	cmp	r3, #1
-	bne	.L1375
+	bne	.L1383
 	movw	r2, #1124
 	mov	r1, r9
 	mov	r0, r10
-	bl	printk
-.L1375:
+	bl	sftl_printk
+.L1383:
 	ldrh	r3, [r4, #2578]
 	adds	r5, r5, #1
 	uxth	r5, r5
@@ -9586,32 +9655,32 @@ FtlVpcTblFlush:
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2578]	@ movhi
 	cmp	r5, #3
-	bls	.L1372
+	bls	.L1380
 	mov	r2, r5
 	ldr	r1, [r4, #3264]
-	ldr	r0, .L1383+12
-	bl	printk
-.L1378:
-	b	.L1378
-.L1374:
+	ldr	r0, .L1391+12
+	bl	sftl_printk
+.L1386:
+	b	.L1386
+.L1382:
 	cmp	r3, #1
-	beq	.L1372
+	beq	.L1380
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1379
+	beq	.L1387
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1379:
+.L1387:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1384:
+.L1392:
 	.align	2
-.L1383:
+.L1391:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177348
-	.word	.LC101
+	.word	.LC105
 	.word	.LANCHOR1+454
 	.word	.LC1
 	.fnend
@@ -9631,69 +9700,69 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movs	r5, #0
-	ldr	r4, .L1397
-	ldr	r1, .L1397+4
-	ldr	r0, .L1397+8
-	bl	printk
+	ldr	r4, .L1405
+	ldr	r1, .L1405+4
+	ldr	r0, .L1405+8
+	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	movs	r1, #0
 	ldr	r0, [r4, #3864]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1386:
+.L1394:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1388
-	ldr	r9, .L1397+12
+	bcc	.L1396
+	ldr	r9, .L1405+12
 	movs	r7, #0
 	movw	r8, #65535
-.L1389:
+.L1397:
 	ldrh	r3, [r4, #40]
 	uxth	r5, r7
 	cmp	r3, r5
-	bhi	.L1393
+	bhi	.L1401
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1388:
+.L1396:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L1387
+	beq	.L1395
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3864]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1387:
+.L1395:
 	adds	r5, r5, #1
-	b	.L1386
-.L1393:
+	b	.L1394
+.L1401:
 	ldr	r3, [r4, #2324]
 	uxth	r6, r7
 	ldrh	r2, [r3, r6, lsl #1]
 	ldr	r3, [r4, #3864]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r2, r3
-	beq	.L1391
+	beq	.L1399
 	cmp	r2, r8
-	beq	.L1391
+	beq	.L1399
 	mov	r1, r6
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r5
-	beq	.L1391
+	beq	.L1399
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r5
-	beq	.L1391
+	beq	.L1399
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r5
-	beq	.L1391
+	beq	.L1399
 	ldr	r3, [r4, #3864]
 	mov	r0, r5
 	ldrh	r2, [r3, r6, lsl #1]
@@ -9702,16 +9771,16 @@ FtlVpcCheckAndModify:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1391:
+.L1399:
 	adds	r7, r7, #1
-	b	.L1389
-.L1398:
+	b	.L1397
+.L1406:
 	.align	2
-.L1397:
+.L1405:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+469
-	.word	.LC91
-	.word	.LC102
+	.word	.LC95
+	.word	.LC106
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	1
@@ -9728,42 +9797,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1409
+	ldr	r4, .L1417
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1400
+	bcs	.L1408
 	movw	r2, #2681
-	ldr	r1, .L1409+4
-	ldr	r0, .L1409+8
-	bl	printk
-.L1400:
+	ldr	r1, .L1417+4
+	ldr	r0, .L1417+8
+	bl	sftl_printk
+.L1408:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1401
+	beq	.L1409
 	ldr	r3, [r4, #2324]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1402
+	cbz	r3, .L1410
 	bl	INSERT_DATA_LIST
-.L1401:
+.L1409:
 	ldrh	r0, [r4, #3992]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1403
+	beq	.L1411
 	cmp	r5, r0
-	bne	.L1404
+	bne	.L1412
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1405
-.L1404:
+	cbz	r3, .L1413
+.L1412:
 	bl	update_vpc_list
-.L1405:
+.L1413:
 	movw	r3, #65535
 	strh	r3, [r4, #3992]	@ movhi
-.L1403:
+.L1411:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9772,12 +9841,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1402:
-	bl	INSERT_FREE_LIST
-	b	.L1401
 .L1410:
+	bl	INSERT_FREE_LIST
+	b	.L1409
+.L1418:
 	.align	2
-.L1409:
+.L1417:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+490
 	.word	.LC1
@@ -9797,29 +9866,29 @@ FtlProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r7, #0
-	ldr	r6, .L1425
+	ldr	r6, .L1433
 	.pad #20
 	sub	sp, sp, #20
 	mov	r4, r3
 	movs	r2, #0
-	ldr	r10, .L1425+8
+	ldr	r10, .L1433+8
 	mov	r5, r0
-	ldr	fp, .L1425+12
+	ldr	fp, .L1433+12
 	mov	r9, r1
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1412:
+.L1420:
 	cmp	r7, r9
-	beq	.L1419
+	beq	.L1427
 	mov	r8, #0
-	b	.L1420
-.L1415:
+	b	.L1428
+.L1423:
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4]
 	cmp	r3, r0
-	bne	.L1413
+	bne	.L1421
 	ldr	r1, [r6, #2324]
 	ldrh	r0, [r4, #4]
 	ldrh	r2, [r1, r3, lsl #1]
@@ -9829,12 +9898,12 @@ FtlProgPages:
 	strb	r8, [r4, #6]
 	strh	r8, [r4, #4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
-.L1413:
+.L1421:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L1414
+	cbnz	r3, .L1422
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1414:
+.L1422:
 	ldr	r3, [r6, #2732]
 	adds	r3, r3, #1
 	str	r3, [r6, #2732]
@@ -9850,19 +9919,19 @@ FtlProgPages:
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	FlashProgPages
-.L1420:
+.L1428:
 	ldr	r3, [r5]
 	adds	r3, r3, #1
-	beq	.L1415
+	beq	.L1423
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1416
+	bcc	.L1424
 	movw	r2, #933
 	mov	r1, r10
 	mov	r0, fp
-	bl	printk
-.L1416:
+	bl	sftl_printk
+.L1424:
 	ldr	r3, [r5, #4]
 	add	r1, sp, #16
 	movs	r2, #1
@@ -9877,38 +9946,38 @@ FtlProgPages:
 	ldr	r3, [sp, #4]
 	mov	r8, r0
 	adds	r3, r3, #1
-	beq	.L1417
+	beq	.L1425
 	ldr	r3, [r6, #2324]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1418
+	cbnz	r2, .L1426
 	mov	r1, r0
-	ldr	r0, .L1425+4
-	bl	printk
-.L1418:
+	ldr	r0, .L1433+4
+	bl	sftl_printk
+.L1426:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1417:
+.L1425:
 	adds	r7, r7, #1
 	adds	r5, r5, #20
-	b	.L1412
-.L1419:
+	b	.L1420
+.L1427:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1411
+	bcc	.L1419
 	mov	r2, #948
-	ldr	r1, .L1425+8
-	ldr	r0, .L1425+12
-	bl	printk
-.L1411:
+	ldr	r1, .L1433+8
+	ldr	r0, .L1433+12
+	bl	sftl_printk
+.L1419:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1426:
+.L1434:
 	.align	2
-.L1425:
+.L1433:
 	.word	.LANCHOR0
-	.word	.LC103
+	.word	.LC107
 	.word	.LANCHOR1+519
 	.word	.LC1
 	.fnend
@@ -9926,22 +9995,22 @@ FtlCacheWriteBack:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1432
+	ldr	r4, .L1440
 	ldr	r0, [r4, #3988]
-	cbz	r0, .L1428
-	ldr	r3, .L1432+4
+	cbz	r0, .L1436
+	ldr	r3, .L1440+4
 	movs	r2, #0
 	movs	r1, #1
 	ldr	r3, [r3, #-196]
 	bl	FtlProgPages
 	movs	r3, #0
 	str	r3, [r4, #3988]
-.L1428:
+.L1436:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1433:
+.L1441:
 	.align	2
-.L1432:
+.L1440:
 	.word	.LANCHOR0
 	.word	.LANCHOR3
 	.fnend
@@ -9981,17 +10050,17 @@ sftl_deinit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1437
+	ldr	r3, .L1445
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1436
+	bne	.L1444
 	bl	FtlSysFlush
-.L1436:
+.L1444:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1438:
+.L1446:
 	.align	2
-.L1437:
+.L1445:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10010,21 +10079,21 @@ FtlDiscard:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	adds	r2, r0, r1
-	ldr	r6, .L1454
+	ldr	r6, .L1462
 	mov	r7, r0
 	mov	r5, r1
 	ldr	r3, [r6, #140]
 	cmp	r2, r3
-	bhi	.L1447
+	bhi	.L1455
 	cmp	r1, #31
-	bhi	.L1441
-.L1446:
+	bhi	.L1449
+.L1454:
 	movs	r0, #0
-.L1439:
+.L1447:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1441:
+.L1449:
 	bl	FtlCacheWriteBack
 	ldrh	r4, [r6, #58]
 	mov	r0, r7
@@ -10034,7 +10103,7 @@ FtlDiscard:
 	mov	r8, r0
 	subs	r7, r7, r3
 	uxth	r7, r7
-	cbz	r7, .L1442
+	cbz	r7, .L1450
 	subs	r4, r4, r7
 	add	r8, r0, #1
 	cmp	r4, r5
@@ -10042,31 +10111,31 @@ FtlDiscard:
 	movcs	r4, r5
 	uxth	r4, r4
 	subs	r5, r5, r4
-.L1442:
-	ldr	r4, .L1454+4
+.L1450:
+	ldr	r4, .L1462+4
 	mov	r3, #-1
 	str	r3, [sp, #4]
-.L1443:
+.L1451:
 	ldrh	r3, [r6, #58]
 	cmp	r5, r3
-	bcs	.L1445
-	ldr	r3, .L1454+4
+	bcs	.L1453
+	ldr	r3, .L1462+4
 	ldr	r2, [r3, #-192]
 	cmp	r2, #32
-	bls	.L1446
+	bls	.L1454
 	movs	r4, #0
 	str	r4, [r3, #-192]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1446
-.L1445:
+	b	.L1454
+.L1453:
 	movs	r2, #0
 	mov	r1, sp
 	mov	r0, r8
 	bl	log2phys
 	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L1444
+	beq	.L1452
 	ldr	r3, [r4, #-192]
 	movs	r2, #1
 	add	r1, sp, #4
@@ -10081,17 +10150,17 @@ FtlDiscard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1444:
+.L1452:
 	ldrh	r3, [r6, #58]
 	add	r8, r8, #1
 	subs	r5, r5, r3
-	b	.L1443
-.L1447:
-	mov	r0, #-1
-	b	.L1439
+	b	.L1451
 .L1455:
+	mov	r0, #-1
+	b	.L1447
+.L1463:
 	.align	2
-.L1454:
+.L1462:
 	.word	.LANCHOR0
 	.word	.LANCHOR3
 	.fnend
@@ -10111,49 +10180,49 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r2, #65535
-	ldr	r4, .L1482
+	ldr	r4, .L1490
 	ldrh	r5, [r4, #2444]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1457
-.L1467:
+	bne	.L1465
+.L1475:
 	ldrh	r2, [r4, #2444]
 	movs	r3, #0
 	str	r3, [r4, #4000]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1480
-.L1458:
+	bne	.L1488
+.L1466:
 	movs	r0, #0
-.L1456:
+.L1464:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1457:
-	cbz	r0, .L1460
-	ldr	r3, .L1482+4
+.L1465:
+	cbz	r0, .L1468
+	ldr	r3, .L1490+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1461
-.L1462:
+	beq	.L1469
+.L1470:
 	movs	r1, #2
-.L1460:
-	ldr	r0, .L1482+8
+.L1468:
+	ldr	r0, .L1490+8
 	bl	FtlGcScanTempBlk
 	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L1463
+	beq	.L1471
 	ldr	r2, [r4, #2328]
 	ldrh	r3, [r2, r5, lsl #1]
 	cmp	r3, #4
-	bls	.L1464
+	bls	.L1472
 	subs	r3, r3, #5
 	movs	r0, #1
 	strh	r3, [r2, r5, lsl #1]	@ movhi
 	bl	FtlEctTblFlush
-.L1464:
+.L1472:
 	ldr	r3, [r4, #4000]
-	cbnz	r3, .L1465
+	cbnz	r3, .L1473
 	ldr	r3, [r4, #2732]
 	ldr	r0, [sp, #4]
 	adds	r3, r3, #1
@@ -10161,67 +10230,67 @@ FtlGcFreeTempBlock:
 	str	r3, [r4, #2732]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1465:
+.L1473:
 	movs	r3, #0
 	str	r3, [r4, #4000]
-.L1476:
+.L1484:
 	movs	r0, #1
-	b	.L1456
-.L1461:
+	b	.L1464
+.L1469:
 	movs	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #17
-	bhi	.L1462
-	b	.L1460
-.L1463:
-	ldr	r3, .L1482+4
+	bhi	.L1470
+	b	.L1468
+.L1471:
+	ldr	r3, .L1490+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1476
-	b	.L1467
-.L1480:
+	bne	.L1484
+	b	.L1475
+.L1488:
 	bl	FtlCacheWriteBack
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
 	ldrh	r2, [r4, #3200]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1468
+	beq	.L1476
 	movs	r2, #162
-	ldr	r1, .L1482+12
-	ldr	r0, .L1482+16
-	bl	printk
-.L1468:
+	ldr	r1, .L1490+12
+	ldr	r0, .L1490+16
+	bl	sftl_printk
+.L1476:
 	ldrb	r3, [r4, #2451]	@ zero_extendqisi2
 	movs	r6, #0
 	ldrh	r0, [r4, #102]
 	mov	r9, #12
 	ldr	r2, [r4, #2324]
 	ldrh	r1, [r4, #2444]
-	ldr	r10, .L1482+12
+	ldr	r10, .L1490+12
 	smulbb	r3, r3, r0
-	ldr	fp, .L1482+16
+	ldr	fp, .L1490+16
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldr	r2, [r4, #2528]
 	ldrh	r3, [r4, #3200]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1469:
+.L1477:
 	ldrh	r2, [r4, #3200]
 	uxth	r3, r6
 	cmp	r2, r3
-	bhi	.L1473
+	bhi	.L1481
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2444]
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1474
+	beq	.L1482
 	bl	INSERT_DATA_LIST
-.L1475:
+.L1483:
 	movs	r5, #0
 	movw	r6, #65535
 	strh	r6, [r4, #2444]	@ movhi
@@ -10233,12 +10302,12 @@ FtlGcFreeTempBlock:
 	ldrh	r2, [r4, #2344]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1458
+	ble	.L1466
 	movs	r3, #20
 	strh	r6, [r4, #2588]	@ movhi
 	strh	r3, [r4, #3148]	@ movhi
-	b	.L1458
-.L1473:
+	b	.L1466
+.L1481:
 	uxth	r7, r6
 	ldr	r8, [r4, #3196]
 	ldr	r3, [r4, #2504]
@@ -10246,12 +10315,12 @@ FtlGcFreeTempBlock:
 	add	r5, r8, r7
 	ldr	r2, [r5, #8]
 	cmp	r2, r3
-	bcc	.L1470
+	bcc	.L1478
 	movs	r2, #168
 	mov	r1, r10
 	mov	r0, fp
-	bl	printk
-.L1470:
+	bl	sftl_printk
+.L1478:
 	movs	r2, #0
 	add	r1, sp, #4
 	ldr	r0, [r5, #8]
@@ -10259,7 +10328,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r8, r7]
 	ldr	r3, [sp, #4]
 	cmp	r0, r3
-	bne	.L1471
+	bne	.L1479
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
@@ -10268,23 +10337,23 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1481:
+.L1489:
 	bl	decrement_vpc_count
-.L1472:
+.L1480:
 	adds	r6, r6, #1
-	b	.L1469
-.L1471:
+	b	.L1477
+.L1479:
 	ldr	r2, [r5, #4]
 	cmp	r3, r2
-	beq	.L1472
+	beq	.L1480
 	ldrh	r0, [r4, #2444]
-	b	.L1481
-.L1474:
+	b	.L1489
+.L1482:
 	bl	INSERT_FREE_LIST
-	b	.L1475
-.L1483:
+	b	.L1483
+.L1491:
 	.align	2
-.L1482:
+.L1490:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
@@ -10305,25 +10374,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1486
+	ldr	r4, .L1494
 	ldrh	r1, [r4, #102]
 	addw	r0, r4, #2444
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #2446]
 	ldrh	r3, [r4, #102]
 	cmp	r2, r3
-	bcc	.L1484
+	bcc	.L1492
 	add	r0, r4, #3904
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
 	str	r3, [r4, #4000]
-.L1484:
+.L1492:
 	pop	{r4, pc}
-.L1487:
+.L1495:
 	.align	2
-.L1486:
+.L1494:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10341,7 +10410,7 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1489
+	ldr	r4, .L1497
 	addw	r6, r4, #2348
 	str	r5, [r4, #4012]
 	mov	r0, r6
@@ -10358,9 +10427,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1490:
+.L1498:
 	.align	2
-.L1489:
+.L1497:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10378,35 +10447,35 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1498
+	ldr	r4, .L1506
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3164]
 	ldr	r0, [r4, #3836]
 	bl	FlashProgPages
-.L1492:
+.L1500:
 	ldr	r1, [r4, #3164]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1495
+	bhi	.L1503
 	ldr	r0, [r4, #3836]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #2448]
 	movs	r0, #0
 	str	r0, [r4, #3164]
-	cbnz	r3, .L1491
+	cbnz	r3, .L1499
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1497
-.L1495:
+	b	.L1505
+.L1503:
 	muls	r3, r6, r3
 	ldr	r2, [r4, #3836]
 	adds	r5, r5, #1
 	adds	r1, r2, r3
 	ldr	r2, [r2, r3]
 	adds	r0, r2, #1
-	bne	.L1493
+	bne	.L1501
 	ldrh	r0, [r4, #2444]
 	movs	r5, #0
 	ldr	r1, [r4, #2324]
@@ -10422,20 +10491,20 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1497:
+.L1505:
 	movs	r0, #1
-.L1491:
+.L1499:
 	pop	{r4, r5, r6, pc}
-.L1493:
+.L1501:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1492
-.L1499:
+	b	.L1500
+.L1507:
 	.align	2
-.L1498:
+.L1506:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10453,18 +10522,18 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1503
+	ldr	r4, .L1511
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r3
-	beq	.L1501
+	beq	.L1509
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1502
-.L1501:
+	cbnz	r3, .L1510
+.L1509:
 	bl	FtlCacheWriteBack
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1503+4
+	ldr	r0, .L1511+4
 	strb	r5, [r4, #2452]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #3192]	@ movhi
@@ -10473,13 +10542,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1502:
-	ldr	r0, .L1503+4
+.L1510:
+	ldr	r0, .L1511+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L1504:
+.L1512:
 	.align	2
-.L1503:
+.L1511:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.fnend
@@ -10495,7 +10564,7 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1624
+	ldr	r3, .L1632
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, r0
@@ -10504,21 +10573,21 @@ rk_ftl_garbage_collect:
 	mov	r4, r3
 	ldr	r0, [r3, #3820]
 	cmp	r0, #0
-	bne	.L1580
+	bne	.L1588
 	ldrh	r2, [r3, #2336]
 	cmp	r2, #47
-	bls	.L1505
-	ldr	r2, .L1624+4
+	bls	.L1513
+	ldr	r2, .L1632+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1507
-.L1510:
+	bne	.L1515
+.L1518:
 	ldrh	r2, [r4, #3204]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1508
-.L1509:
+	bne	.L1516
+.L1517:
 	ldr	r3, [r4, #3152]
 	movw	r5, #65535
 	ldrh	r1, [r4, #2588]
@@ -10526,190 +10595,190 @@ rk_ftl_garbage_collect:
 	add	r3, r3, r7, lsl #7
 	cmp	r1, r5
 	str	r3, [r4, #3152]
-	bne	.L1511
+	bne	.L1519
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r1
-	bne	.L1512
+	bne	.L1520
 	ldrh	r8, [r4, #3202]
 	cmp	r8, r2
-	bne	.L1513
+	bne	.L1521
 	ldrh	r2, [r4, #2344]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1513
-	ldr	r3, .L1624+8
+	bls	.L1521
+	ldr	r3, .L1632+8
 	movs	r6, #0
 	str	r6, [r4, #3152]
 	strh	r6, [r3, #-188]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r8
 	mov	r5, r0
-	bne	.L1584
+	bne	.L1592
 	ldrh	r2, [r4, #2344]
 	ldrh	r3, [r4, #3150]
 	cmp	r2, r3
-	bcs	.L1516
+	bcs	.L1524
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r5
-	beq	.L1518
+	beq	.L1526
 	mov	r0, r3
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1519
+	bhi	.L1527
 	mov	r0, r6
 	bl	List_get_gc_head_node
 	uxth	r6, r0
 	movs	r3, #128
 	strh	r3, [r4, #3150]	@ movhi
 	cmp	r6, r5
-	beq	.L1518
-.L1515:
-	ldr	r3, [r4, #2324]
-	mov	r5, r6
-	ldrh	r1, [r4, #3148]
-	ldrh	r2, [r4, #2344]
-	ldrh	r3, [r3, r6, lsl #1]
-	str	r1, [sp, #4]
-	ldr	r1, [r4, #2328]
-	ldr	r0, .L1624+12
-	ldrh	r1, [r1, r6, lsl #1]
-	str	r1, [sp]
-	mov	r1, r6
-	bl	printk
-	b	.L1518
-.L1507:
-	ldrh	r3, [r3, #2444]
-	cmp	r3, r2
-	beq	.L1510
-	movs	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	beq	.L1510
-	movs	r0, #1
-	b	.L1505
-.L1508:
-	ldrh	r3, [r4, #3202]
-	cmp	r3, r1
-	itt	eq
-	strheq	r2, [r4, #3202]	@ movhi
-	strheq	r3, [r4, #3204]	@ movhi
-	b	.L1509
-.L1519:
-	movs	r3, #64
-.L1617:
-	strh	r3, [r4, #3150]	@ movhi
-.L1518:
+	bne	.L1523
+.L1526:
 	bl	FtlGcReFreshBadBlk
 	cmp	r7, #0
-	bne	.L1521
+	bne	.L1529
 	movw	r3, #65535
 	cmp	r5, r3
-	bne	.L1521
-.L1578:
+	bne	.L1529
+.L1586:
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #24
-	bhi	.L1585
+	bhi	.L1593
 	cmp	r3, #16
 	ldrh	r6, [r4, #102]
-	bls	.L1523
+	bls	.L1531
 	lsrs	r6, r6, #5
-.L1522:
+.L1530:
 	ldrh	r2, [r4, #3148]
 	cmp	r2, r3
-	bcs	.L1526
+	bcs	.L1534
 	ldrh	r3, [r4, #2444]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1527
+	bne	.L1535
 	ldrh	r2, [r4, #3202]
 	cmp	r2, r3
-	bne	.L1527
-	ldr	r3, .L1624+8
+	bne	.L1535
+	ldr	r3, .L1632+8
 	ldrh	r0, [r3, #-188]
-	cbnz	r0, .L1528
+	cbnz	r0, .L1536
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1529
-.L1528:
+	bcs	.L1537
+.L1536:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1618:
+.L1626:
 	strh	r3, [r4, #3148]	@ movhi
 	movs	r3, #0
 	str	r3, [r4, #3160]
-.L1505:
+.L1513:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1515:
+	ldrh	r3, [r3, #2444]
+	cmp	r3, r2
+	beq	.L1518
+	movs	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L1518
+	movs	r0, #1
+	b	.L1513
 .L1516:
+	ldrh	r3, [r4, #3202]
+	cmp	r3, r1
+	itt	eq
+	strheq	r2, [r4, #3202]	@ movhi
+	strheq	r3, [r4, #3204]	@ movhi
+	b	.L1517
+.L1527:
+	movs	r3, #64
+.L1625:
+	strh	r3, [r4, #3150]	@ movhi
+	b	.L1526
+.L1524:
 	movs	r3, #80
-	b	.L1617
-.L1584:
+	b	.L1625
+.L1592:
 	mov	r6, r0
-	b	.L1515
 .L1523:
+	ldr	r3, [r4, #2324]
+	mov	r5, r6
+	ldrh	r1, [r4, #3148]
+	ldrh	r2, [r4, #2344]
+	ldrh	r3, [r3, r6, lsl #1]
+	str	r1, [sp, #4]
+	ldr	r1, [r4, #2328]
+	ldr	r0, .L1632+12
+	ldrh	r1, [r1, r6, lsl #1]
+	str	r1, [sp]
+	mov	r1, r6
+	bl	sftl_printk
+	b	.L1526
+.L1531:
 	cmp	r3, #12
-	bls	.L1524
+	bls	.L1532
 	lsrs	r6, r6, #4
-	b	.L1522
-.L1524:
+	b	.L1530
+.L1532:
 	cmp	r3, #8
-	bls	.L1522
+	bls	.L1530
 	lsrs	r6, r6, #2
-	b	.L1522
-.L1585:
+	b	.L1530
+.L1593:
 	movs	r6, #1
-	b	.L1522
-.L1529:
+	b	.L1530
+.L1537:
 	movs	r3, #18
-	b	.L1618
-.L1527:
+	b	.L1626
+.L1535:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3148]	@ movhi
-.L1526:
+.L1534:
 	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1586
+	cbz	r3, .L1594
 	adds	r6, r6, #32
 	uxth	r6, r6
-.L1586:
+.L1594:
 	movw	r5, #65535
-.L1532:
+.L1540:
 	ldrh	r3, [r4, #2588]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1541
+	bne	.L1549
 	cmp	r5, r3
-	beq	.L1542
+	beq	.L1550
 	strh	r5, [r4, #2588]	@ movhi
-.L1543:
+.L1551:
 	ldrh	r0, [r4, #2588]
 	movw	r7, #65535
 	movs	r3, #0
 	strb	r3, [r4, #2596]
 	cmp	r0, r7
-	beq	.L1541
+	beq	.L1549
 	bl	IsBlkInGcList
-	cbz	r0, .L1546
+	cbz	r0, .L1554
 	strh	r7, [r4, #2588]	@ movhi
-.L1546:
+.L1554:
 	ldrh	r2, [r4, #2588]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1541
-	ldr	r0, .L1624+16
+	beq	.L1549
+	ldr	r0, .L1632+16
 	bl	make_superblock
-	ldr	r2, .L1624+8
+	ldr	r2, .L1632+8
 	movs	r3, #0
 	strh	r3, [r4, #2590]	@ movhi
 	strb	r3, [r4, #2594]
@@ -10718,67 +10787,67 @@ rk_ftl_garbage_collect:
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r1, lsl #1]
 	strh	r3, [r2, #-184]	@ movhi
-.L1541:
+.L1549:
 	ldrh	r3, [r4, #2588]
 	ldrh	r2, [r4, #2348]
 	cmp	r2, r3
-	beq	.L1547
+	beq	.L1555
 	ldrh	r2, [r4, #2396]
 	cmp	r2, r3
-	beq	.L1547
-	ldr	r7, .L1624+8
-.L1548:
+	beq	.L1555
+	ldr	r7, .L1632+8
+.L1556:
 	ldrh	r9, [r4, #2588]
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1549
+	bne	.L1557
 	movs	r3, #0
 	mov	r10, r3
 	str	r3, [r4, #3160]
-.L1550:
+.L1558:
 	ldrh	r8, [r4, #3156]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	fp, r0
 	cmp	fp, r9
 	strh	fp, [r4, #2588]	@ movhi
-	bne	.L1551
+	bne	.L1559
 	movs	r3, #0
 	movs	r0, #8
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1505
-.L1533:
+	b	.L1513
+.L1541:
 	movs	r3, #0
 	ldrh	r7, [r4, #2344]
 	str	r3, [r4, #3160]
 	ldrh	r3, [r4, #3148]
-	ldr	r5, .L1624+8
+	ldr	r5, .L1632+8
 	cmp	r3, r7
-	bcs	.L1534
+	bcs	.L1542
 	ldrh	r3, [r5, #-188]
-	cbnz	r3, .L1535
+	cbnz	r3, .L1543
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1536
-.L1535:
+	bcs	.L1544
+.L1543:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1619:
+.L1627:
 	strh	r3, [r4, #3148]	@ movhi
-.L1621:
+.L1629:
 	bl	FtlReadRefresh
 	ldrh	r0, [r5, #-188]
-	b	.L1505
-.L1536:
+	b	.L1513
+.L1544:
 	movs	r3, #18
-	b	.L1619
-.L1534:
+	b	.L1627
+.L1542:
 	ldrh	r0, [r5, #-188]
 	cmp	r0, #0
-	bne	.L1538
+	bne	.L1546
 	ldrh	r6, [r4, #2572]
 	add	r3, r6, r6, lsl #1
 	asrs	r3, r3, #2
@@ -10792,57 +10861,57 @@ rk_ftl_garbage_collect:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1539
+	ble	.L1547
 	subs	r6, r6, #1
 	cmp	r7, r6
-	bge	.L1621
-.L1539:
+	bge	.L1629
+.L1547:
 	cmp	r2, #0
-	bne	.L1538
+	bne	.L1546
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2344]
 	adds	r0, r0, #1
-	b	.L1505
-.L1542:
+	b	.L1513
+.L1550:
 	ldrh	r3, [r4, #3202]
 	cmp	r3, r5
-	beq	.L1543
+	beq	.L1551
 	ldr	r2, [r4, #2324]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1544
+	cbnz	r3, .L1552
 	strh	r5, [r4, #3202]	@ movhi
-.L1544:
+.L1552:
 	ldrh	r3, [r4, #3202]
 	strh	r3, [r4, #2588]	@ movhi
 	movw	r3, #65535
 	strh	r3, [r4, #3202]	@ movhi
-	b	.L1543
-.L1625:
+	b	.L1551
+.L1633:
 	.align	2
-.L1624:
+.L1632:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3
-	.word	.LC104
+	.word	.LC108
 	.word	.LANCHOR0+2588
-.L1547:
+.L1555:
 	movw	r3, #65535
 	strh	r3, [r4, #2588]	@ movhi
-.L1622:
-	ldr	r3, .L1626
+.L1630:
+	ldr	r3, .L1634
 	ldrh	r0, [r3, #-188]
-	b	.L1505
-.L1551:
+	b	.L1513
+.L1559:
 	str	r0, [sp, #8]
 	mov	r0, fp
 	bl	IsBlkInGcList
 	add	r8, r8, #1
 	ldr	r3, [sp, #8]
-	cbz	r0, .L1552
+	cbz	r0, .L1560
 	strh	r8, [r4, #3156]	@ movhi
-	b	.L1550
-.L1552:
+	b	.L1558
+.L1560:
 	uxth	r0, r3
 	ldrh	ip, [r4, #32]
 	ldrh	r3, [r4, #102]
@@ -10853,64 +10922,64 @@ rk_ftl_garbage_collect:
 	ldrh	r1, [r2, r0, lsl #1]
 	add	ip, r3, r3, lsr #31
 	cmp	r1, ip, asr #1
-	bgt	.L1554
+	bgt	.L1562
 	cmp	r8, #48
-	bls	.L1555
+	bls	.L1563
 	cmp	r1, #8
-	bls	.L1555
+	bls	.L1563
 	ldrh	r1, [r4, #3192]
 	cmp	r1, #35
-	bhi	.L1555
-.L1554:
+	bhi	.L1563
+.L1562:
 	strh	r10, [r4, #3156]	@ movhi
-.L1555:
+.L1563:
 	ldrh	r2, [r2, r0, lsl #1]
 	cmp	r3, r2
-	bgt	.L1556
+	bgt	.L1564
 	cmp	r5, r9
-	bne	.L1556
+	bne	.L1564
 	movs	r3, #0
 	strh	r5, [r4, #2588]	@ movhi
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1622
-.L1556:
-	cbnz	r2, .L1557
+	b	.L1630
+.L1564:
+	cbnz	r2, .L1565
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #3156]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1550
-.L1557:
+	b	.L1558
+.L1565:
 	movs	r3, #0
 	strb	r3, [r4, #2596]
 	ldrh	r3, [r4, #2348]
 	cmp	r3, fp
-	bne	.L1558
+	bne	.L1566
 	movw	r2, #658
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1558:
+	ldr	r1, .L1634+4
+	ldr	r0, .L1634+8
+	bl	sftl_printk
+.L1566:
 	ldrh	r2, [r4, #2588]
 	ldrh	r3, [r4, #2396]
 	cmp	r2, r3
-	bne	.L1559
+	bne	.L1567
 	movw	r2, #659
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1559:
+	ldr	r1, .L1634+4
+	ldr	r0, .L1634+8
+	bl	sftl_printk
+.L1567:
 	ldrh	r2, [r4, #2588]
 	ldrh	r3, [r4, #2444]
 	cmp	r2, r3
-	bne	.L1560
+	bne	.L1568
 	mov	r2, #660
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1560:
-	ldr	r0, .L1626+12
+	ldr	r1, .L1634+4
+	ldr	r0, .L1634+8
+	bl	sftl_printk
+.L1568:
+	ldr	r0, .L1634+12
 	bl	make_superblock
 	ldrh	r1, [r4, #2588]
 	movs	r3, #0
@@ -10920,7 +10989,7 @@ rk_ftl_garbage_collect:
 	strh	r3, [r4, #2590]	@ movhi
 	strb	r3, [r4, #2594]
 	strh	r2, [r7, #-184]	@ movhi
-.L1549:
+.L1557:
 	bl	FtlReadRefresh
 	movs	r3, #1
 	str	r3, [r4, #3820]
@@ -10936,11 +11005,11 @@ rk_ftl_garbage_collect:
 	mov	r3, #0
 	it	gt
 	uxthgt	r6, r6
-.L1620:
+.L1628:
 	str	r3, [sp, #8]
 	ldrh	r3, [sp, #8]
 	cmp	r6, r3
-	bls	.L1570
+	bls	.L1578
 	ldr	r3, [sp, #8]
 	movw	r10, #65535
 	ldrh	r1, [r4, #2590]
@@ -10949,58 +11018,58 @@ rk_ftl_garbage_collect:
 	ldr	r0, [r4, #3180]
 	add	r1, r1, r3
 	movs	r3, #0
-	ldr	ip, .L1626+16
+	ldr	ip, .L1634+16
 	mov	r8, r3
-	b	.L1571
-.L1564:
+	b	.L1579
+.L1572:
 	ldrh	r2, [ip, #2]!
 	cmp	r2, r10
-	beq	.L1563
+	beq	.L1571
 	mla	r9, fp, r8, r0
 	add	r8, r8, #1
 	orr	r2, r1, r2, lsl #10
 	uxth	r8, r8
 	str	r2, [r9, #4]
-.L1563:
-	adds	r3, r3, #1
 .L1571:
+	adds	r3, r3, #1
+.L1579:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L1564
+	bhi	.L1572
 	mov	fp, #0
 	ldrb	r2, [r4, #2596]	@ zero_extendqisi2
 	mov	r1, r8
 	bl	FlashReadPages
-.L1565:
+.L1573:
 	uxth	r3, fp
 	cmp	r8, r3
-	bhi	.L1569
+	bhi	.L1577
 	ldr	r3, [sp, #8]
 	adds	r3, r3, #1
-	b	.L1620
-.L1569:
+	b	.L1628
+.L1577:
 	mov	r9, #20
 	ldr	r3, [r4, #3180]
 	mul	r9, r9, fp
 	add	r2, r3, r9
 	ldr	r3, [r3, r9]
 	adds	r3, r3, #1
-	beq	.L1566
+	beq	.L1574
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1566
+	bne	.L1574
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1567
+	bne	.L1575
 	mov	r2, #696
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
+	ldr	r1, .L1634+4
+	ldr	r0, .L1634+8
 	str	r3, [sp, #16]
-	bl	printk
+	bl	sftl_printk
 	ldr	r3, [sp, #16]
-.L1567:
+.L1575:
 	movs	r2, #0
 	mov	r0, r3
 	add	r1, sp, #28
@@ -11010,7 +11079,7 @@ rk_ftl_garbage_collect:
 	add	r0, r0, r9
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1566
+	bne	.L1574
 	ldrh	r3, [r7, #-186]
 	movs	r2, #20
 	ldr	r1, [r4, #3164]
@@ -11051,111 +11120,111 @@ rk_ftl_garbage_collect:
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
 	ldr	r3, [r4, #3164]
 	cmp	r2, r3
-	beq	.L1568
+	beq	.L1576
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1566
-.L1568:
+	cbnz	r3, .L1574
+.L1576:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1566
-.L1623:
+	cbz	r0, .L1574
+.L1631:
 	movs	r3, #0
 	ldrh	r0, [r7, #-188]
 	str	r3, [r4, #3820]
-	b	.L1505
-.L1566:
+	b	.L1513
+.L1574:
 	add	fp, fp, #1
-	b	.L1565
-.L1570:
+	b	.L1573
+.L1578:
 	ldrh	r3, [r4, #2590]
 	add	r6, r6, r3
 	ldr	r3, [sp, #12]
 	uxth	r6, r6
 	cmp	r3, r6
 	strh	r6, [r4, #2590]	@ movhi
-	bls	.L1572
+	bls	.L1580
 	ldrh	r2, [r7, #-186]
 	ldrh	r3, [r7, #-184]
 	cmp	r2, r3
-	bne	.L1573
-.L1572:
+	bne	.L1581
+.L1580:
 	ldr	r3, [r4, #3164]
-	cbz	r3, .L1574
+	cbz	r3, .L1582
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	bne	.L1623
-.L1574:
+	bne	.L1631
+.L1582:
 	ldrh	r1, [r7, #-186]
-	cbnz	r1, .L1575
+	cbnz	r1, .L1583
 	ldrh	r2, [r4, #2588]
 	ldr	r3, [r4, #2324]
 	ldrh	r0, [r3, r2, lsl #1]
-	cbz	r0, .L1575
+	cbz	r0, .L1583
 	strh	r1, [r3, r2, lsl #1]	@ movhi
 	ldrh	r0, [r4, #2588]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1575:
+.L1583:
 	movw	r3, #65535
 	strh	r3, [r4, #2588]	@ movhi
-.L1573:
+.L1581:
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #2
-	bhi	.L1576
+	bhi	.L1584
 	ldrh	r6, [r4, #102]
-	b	.L1548
-.L1576:
+	b	.L1556
+.L1584:
 	ldrh	r0, [r7, #-188]
 	movs	r2, #0
 	str	r2, [r4, #3820]
 	cmp	r0, #0
-	bne	.L1505
+	bne	.L1513
 	adds	r0, r3, #1
-	b	.L1505
-.L1580:
+	b	.L1513
+.L1588:
 	movs	r0, #0
-	b	.L1505
-.L1627:
+	b	.L1513
+.L1635:
 	.align	2
-.L1626:
+.L1634:
 	.word	.LANCHOR3
 	.word	.LANCHOR1+551
 	.word	.LC1
 	.word	.LANCHOR0+2588
 	.word	.LANCHOR0+2602
-.L1511:
+.L1519:
 	cmp	r7, #0
-	beq	.L1578
-.L1521:
+	beq	.L1586
+.L1529:
 	ldrh	r2, [r4, #2444]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1589
-.L1579:
+	bne	.L1597
+.L1587:
 	ldrh	r3, [r4, #3202]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1589
+	bne	.L1597
 	cmp	r5, r3
-	bne	.L1589
+	bne	.L1597
 	ldrh	r3, [r4, #2588]
 	cmp	r3, r5
-	beq	.L1533
-.L1538:
+	beq	.L1541
+.L1546:
 	movw	r5, #65535
-.L1589:
+.L1597:
 	movs	r6, #1
-	b	.L1532
-.L1513:
+	b	.L1540
+.L1521:
 	cmp	r7, #0
-	beq	.L1578
+	beq	.L1586
 	movw	r5, #65535
-	b	.L1579
-.L1512:
+	b	.L1587
+.L1520:
 	cmp	r7, #0
-	bne	.L1538
-	b	.L1578
+	bne	.L1546
+	b	.L1586
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	1
@@ -11194,30 +11263,30 @@ FtlRead:
 	mov	r7, r1
 	mov	r10, r3
 	str	r2, [sp, #28]
-	bne	.L1630
+	bne	.L1638
 	mov	r2, r3
 	ldr	r1, [sp, #28]
 	add	r0, r7, #256
 	bl	FtlVendorPartRead
 	mov	r8, r0
-.L1629:
+.L1637:
 	mov	r0, r8
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1630:
+.L1638:
 	ldr	r3, [sp, #28]
-	ldr	r4, .L1661
+	ldr	r4, .L1669
 	adds	r3, r1, r3
 	str	r3, [sp, #8]
 	ldr	r2, [sp, #8]
 	ldr	r3, [r4, #140]
 	cmp	r2, r3
-	bhi	.L1650
-	ldr	r3, .L1661+4
+	bhi	.L1658
+	ldr	r3, .L1669+4
 	ldr	r3, [r3]
 	adds	r5, r3, #1
-	beq	.L1651
+	beq	.L1659
 	bl	FtlCacheWriteBack
 	ldrh	r5, [r4, #58]
 	mov	r0, r7
@@ -11243,45 +11312,45 @@ FtlRead:
 	ldr	r3, [r4, #2508]
 	add	r3, r3, r2
 	str	r3, [r4, #2508]
-.L1632:
+.L1640:
 	ldr	r3, [sp, #4]
-	cbnz	r3, .L1648
-	ldr	r3, .L1661
+	cbnz	r3, .L1656
+	ldr	r3, .L1669
 	ldrh	r2, [r3, #3206]
-	cbnz	r2, .L1649
+	cbnz	r2, .L1657
 	ldrh	r3, [r3, #2344]
 	cmp	r3, #31
-	bhi	.L1629
-.L1649:
+	bhi	.L1637
+.L1657:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1629
-.L1648:
+	b	.L1637
+.L1656:
 	movs	r2, #0
 	add	r1, sp, #52
 	mov	r0, r5
 	bl	log2phys
 	ldr	r2, [sp, #52]
 	adds	r0, r2, #1
-	bne	.L1633
+	bne	.L1641
 	mov	fp, #0
-.L1634:
+.L1642:
 	ldrh	r0, [r4, #58]
 	cmp	fp, r0
-	bcc	.L1636
-.L1637:
+	bcc	.L1644
+.L1645:
 	ldr	r3, [sp, #4]
 	adds	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #4]
-	beq	.L1641
+	beq	.L1649
 	ldrh	r3, [r4, #32]
 	cmp	r6, r3, lsl #2
-	bne	.L1632
-.L1641:
+	bne	.L1640
+.L1649:
 	cmp	r6, #0
-	beq	.L1632
+	beq	.L1640
 	movs	r2, #0
 	mov	r1, r6
 	ldr	r0, [r4, #3832]
@@ -11295,7 +11364,7 @@ FtlRead:
 	ldr	r3, [sp, #24]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1647:
+.L1655:
 	movs	r3, #20
 	ldr	r2, [r4, #3832]
 	mul	r3, r3, fp
@@ -11303,20 +11372,20 @@ FtlRead:
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1643
+	bne	.L1651
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3816]
 	cmp	r1, r2
-	bne	.L1644
+	bne	.L1652
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1660:
+.L1668:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1644:
+.L1652:
 	ldr	r2, [r4, #3832]
 	ldr	r0, [r2, r3]
 	add	ip, r2, r3
@@ -11328,32 +11397,32 @@ FtlRead:
 	streq	r1, [r4, #2708]
 	ldr	r3, [r2, r3]
 	cmp	r3, #256
-	bne	.L1646
+	bne	.L1654
 	ldr	r0, [ip, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1646:
+.L1654:
 	add	fp, fp, #1
 	cmp	r6, fp
-	bne	.L1647
+	bne	.L1655
 	movs	r6, #0
-	b	.L1632
-.L1636:
+	b	.L1640
+.L1644:
 	mla	r0, r0, r5, fp
 	cmp	r7, r0
-	bhi	.L1635
+	bhi	.L1643
 	ldr	r3, [sp, #8]
 	cmp	r3, r0
-	bls	.L1635
+	bls	.L1643
 	subs	r0, r0, r7
 	mov	r1, #512
 	add	r0, r10, r0, lsl #9
 	bl	__memzero
-.L1635:
+.L1643:
 	add	fp, fp, #1
-	b	.L1634
-.L1633:
+	b	.L1642
+.L1641:
 	ldr	r3, [r4, #3832]
 	movs	r1, #20
 	ldrh	fp, [r4, #58]
@@ -11361,7 +11430,7 @@ FtlRead:
 	str	r2, [r3, #4]
 	ldr	r2, [sp, #12]
 	cmp	r5, r2
-	bne	.L1638
+	bne	.L1646
 	ldr	r2, [r4, #3816]
 	mov	r1, fp
 	mov	r0, r7
@@ -11378,9 +11447,9 @@ FtlRead:
 	cmp	r3, fp
 	str	r3, [sp, #24]
 	ldr	r3, [sp, #32]
-	bne	.L1639
+	bne	.L1647
 	str	r10, [r3, #8]
-.L1639:
+.L1647:
 	ldrh	r2, [r4, #112]
 	ldr	r1, [r4, #3812]
 	str	r5, [r3, #16]
@@ -11389,34 +11458,34 @@ FtlRead:
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1637
-.L1638:
+	b	.L1645
+.L1646:
 	ldr	r2, [sp, #16]
 	cmp	r5, r2
-	bne	.L1640
+	bne	.L1648
 	ldr	r2, [r4, #3808]
 	ldr	r1, [sp, #8]
 	str	r2, [r3, #8]
 	mul	r2, fp, r5
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1639
-.L1659:
+	bne	.L1647
+.L1667:
 	subs	r2, r2, r7
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1639
-.L1640:
+	b	.L1647
+.L1648:
 	mul	r2, r5, fp
-	b	.L1659
-.L1643:
+	b	.L1667
+.L1651:
 	ldr	r0, [sp, #16]
 	cmp	r0, r1
-	bne	.L1644
+	bne	.L1652
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3808]
 	cmp	r1, r2
-	bne	.L1644
+	bne	.L1652
 	str	r3, [sp, #44]
 	ldrh	r0, [r4, #58]
 	ldr	r3, [sp, #16]
@@ -11424,16 +11493,16 @@ FtlRead:
 	muls	r0, r3, r0
 	subs	r0, r0, r7
 	add	r0, r10, r0, lsl #9
-	b	.L1660
-.L1650:
+	b	.L1668
+.L1658:
 	mov	r8, #-1
-	b	.L1629
-.L1651:
+	b	.L1637
+.L1659:
 	mov	r8, r3
-	b	.L1629
-.L1662:
+	b	.L1637
+.L1670:
 	.align	2
-.L1661:
+.L1669:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11476,27 +11545,27 @@ FtlWrite:
 	mov	r8, r1
 	str	r2, [sp, #12]
 	str	r3, [sp, #4]
-	bne	.L1665
+	bne	.L1673
 	mov	r2, r3
 	ldr	r1, [sp, #12]
 	add	r0, r8, #256
 	bl	FtlVendorPartWrite
-.L1664:
+.L1672:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1665:
+.L1673:
 	ldr	r3, [sp, #12]
-	ldr	r4, .L1731
+	ldr	r4, .L1739
 	adds	r7, r1, r3
 	ldr	r3, [r4, #140]
 	cmp	r7, r3
-	bhi	.L1707
-	ldr	r6, .L1731+4
+	bhi	.L1715
+	ldr	r6, .L1739+4
 	ldr	r0, [r6]
 	adds	r5, r0, #1
-	beq	.L1664
-	ldr	r3, .L1731+8
+	beq	.L1672
+	ldr	r3, .L1739+8
 	mov	r2, #2048
 	ldrh	r5, [r4, #58]
 	mov	r0, r8
@@ -11517,66 +11586,66 @@ FtlWrite:
 	add	r3, r3, r2
 	str	r3, [r4, #2516]
 	cmp	fp, #0
-	beq	.L1667
+	beq	.L1675
 	ldr	r3, [fp, #16]
 	cmp	r10, r3
-	beq	.L1668
+	beq	.L1676
 	bl	FtlCacheWriteBack
-.L1667:
+.L1675:
 	ldr	r3, [r6, #8]
 	cmp	r3, #0
-	beq	.L1709
-	ldr	r5, .L1731+12
+	beq	.L1717
+	ldr	r5, .L1739+12
 	ldrh	r2, [r4, #2352]
 	add	r3, r5, #48
 	cmp	r2, #0
 	it	eq
 	moveq	r5, r3
-.L1670:
-	ldr	r4, .L1731
+.L1678:
+	ldr	r4, .L1739
 	mov	r6, r10
-.L1671:
+.L1679:
 	ldr	r3, [sp, #8]
 	cmp	r3, #0
-	beq	.L1705
+	beq	.L1713
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1672
+	bcc	.L1680
 	mov	r2, #1012
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1672:
+	ldr	r1, .L1739+16
+	ldr	r0, .L1739+20
+	bl	sftl_printk
+.L1680:
 	ldrh	r9, [r5, #4]
 	cmp	r9, #0
-	bne	.L1673
+	bne	.L1681
 	bl	FtlCacheWriteBack
-	ldr	r3, .L1731+12
-	ldr	r7, .L1731+4
+	ldr	r3, .L1739+12
+	ldr	r7, .L1739+4
 	cmp	r5, r3
-	bne	.L1674
+	bne	.L1682
 	ldrh	r9, [r4, #2400]
 	cmp	r9, #0
-	bne	.L1675
+	bne	.L1683
 	add	r0, r5, #48
 	bl	allocate_new_data_superblock
 	str	r9, [r7, #8]
-.L1675:
-	ldr	r5, .L1731+12
-	ldr	r0, .L1731+12
+.L1683:
+	ldr	r5, .L1739+12
+	ldr	r0, .L1739+12
 	bl	allocate_new_data_superblock
 	ldr	r2, [r7, #8]
 	add	r3, r5, #48
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1676:
+.L1684:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1673
+	cbnz	r3, .L1681
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1673:
+.L1681:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	ldrh	r3, [r5, #4]
 	ldr	r1, [sp, #8]
@@ -11591,48 +11660,48 @@ FtlWrite:
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1677
+	bcc	.L1685
 	movw	r2, #1045
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1677:
+	ldr	r1, .L1739+16
+	ldr	r0, .L1739+20
+	bl	sftl_printk
+.L1685:
 	mov	r9, #0
-.L1678:
+.L1686:
 	ldr	r3, [sp, #36]
 	cmp	r9, r3
-	bne	.L1699
-.L1679:
+	bne	.L1707
+.L1687:
 	ldr	r3, [r4, #3988]
 	cmp	r3, #0
-	beq	.L1700
+	beq	.L1708
 	ldr	r3, [sp, #8]
 	subs	r9, r9, #1
 	add	r3, r3, #-1
 	str	r3, [sp, #8]
-	bne	.L1700
-.L1705:
+	bne	.L1708
+.L1713:
 	ldr	r3, [sp, #20]
 	movs	r0, #0
-	ldr	r4, .L1731
+	ldr	r4, .L1739
 	sub	r1, r3, r10
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #15
-	bhi	.L1702
+	bhi	.L1710
 	movw	r5, #65535
-.L1726:
+.L1734:
 	ldrh	r3, [r4, #2588]
 	cmp	r3, r5
-	bne	.L1706
+	bne	.L1714
 	ldrh	r3, [r4, #3202]
 	cmp	r3, r5
-	bne	.L1706
+	bne	.L1714
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1706:
+.L1714:
 	movs	r1, #1
 	movs	r3, #128
 	mov	r0, r1
@@ -11644,9 +11713,9 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #8
-	bls	.L1726
-	b	.L1702
-.L1668:
+	bls	.L1734
+	b	.L1710
+.L1676:
 	ldr	r3, [r4, #2520]
 	mov	r1, r5
 	mov	r0, r8
@@ -11665,11 +11734,11 @@ FtlWrite:
 	add	r0, r0, r3, lsl #9
 	mov	r2, r9
 	bl	ftl_memcpy
-	cbnz	r7, .L1669
-.L1702:
+	cbnz	r7, .L1677
+.L1710:
 	movs	r0, #0
-	b	.L1664
-.L1669:
+	b	.L1672
+.L1677:
 	ldr	r3, [sp, #12]
 	add	r8, r8, r5
 	add	r10, r10, #1
@@ -11680,24 +11749,24 @@ FtlWrite:
 	str	r3, [sp, #4]
 	bl	FtlCacheWriteBack
 	str	r7, [sp, #8]
-	b	.L1667
-.L1709:
-	ldr	r5, .L1731+12
-	b	.L1670
-.L1674:
+	b	.L1675
+.L1717:
+	ldr	r5, .L1739+12
+	b	.L1678
+.L1682:
 	ldrh	r2, [r4, #2352]
 	str	r9, [r7, #8]
-	cbnz	r2, .L1712
+	cbnz	r2, .L1720
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1676
-.L1712:
+	b	.L1684
+.L1720:
 	mov	r5, r3
-	b	.L1673
-.L1699:
+	b	.L1681
+.L1707:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1679
+	beq	.L1687
 	movs	r2, #0
 	add	r1, sp, #40
 	mov	r0, r6
@@ -11723,10 +11792,10 @@ FtlWrite:
 	mov	r0, fp
 	bl	ftl_memset
 	cmp	r6, r10
-	beq	.L1680
+	beq	.L1688
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L1725
+	bne	.L1733
 	ldr	r3, [sp, #12]
 	add	r2, r8, r3
 	ldrh	r3, [r4, #58]
@@ -11736,8 +11805,8 @@ FtlWrite:
 	str	r3, [sp, #16]
 	movs	r3, #0
 	str	r3, [sp, #24]
-	b	.L1683
-.L1680:
+	b	.L1691
+.L1688:
 	ldrh	r2, [r4, #58]
 	mov	r0, r8
 	mov	r1, r2
@@ -11752,36 +11821,36 @@ FtlWrite:
 	it	cs
 	movcs	r3, r1
 	str	r3, [sp, #16]
-.L1683:
+.L1691:
 	ldrh	r3, [r4, #58]
 	ldr	r2, [sp, #16]
 	cmp	r2, r3
 	ldr	r3, [r4, #3840]
-	bne	.L1684
+	bne	.L1692
 	cmp	r6, r10
 	add	r7, r7, r3
-	bne	.L1685
+	bne	.L1693
 	ldr	r3, [sp, #4]
-.L1729:
+.L1737:
 	str	r3, [r7, #8]
-	b	.L1686
-.L1685:
+	b	.L1694
+.L1693:
 	ldr	r2, [sp, #16]
 	ldr	r3, [sp, #4]
 	muls	r2, r6, r2
 	sub	r2, r2, r8
 	add	r2, r3, r2, lsl #9
 	str	r2, [r7, #8]
-.L1686:
+.L1694:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1696
+	bcc	.L1704
 	movw	r2, #1119
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1696:
+	ldr	r1, .L1739+16
+	ldr	r0, .L1739+20
+	bl	sftl_printk
+.L1704:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
@@ -11800,17 +11869,17 @@ FtlWrite:
 	str	r3, [fp, #12]
 	ldrh	r3, [r5]
 	strh	r3, [fp, #2]	@ movhi
-	b	.L1678
-.L1732:
+	b	.L1686
+.L1740:
 	.align	2
-.L1731:
+.L1739:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR3
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR1+574
 	.word	.LC1
-.L1684:
+.L1692:
 	cmp	r6, r10
 	add	r3, r3, r7
 	ite	eq
@@ -11819,7 +11888,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #40]
 	adds	r1, r3, #1
-	beq	.L1689
+	beq	.L1697
 	str	r3, [sp, #48]
 	movs	r1, #1
 	ldr	r3, [r4, #3840]
@@ -11834,64 +11903,64 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #44]
 	adds	r3, r3, #1
-	bne	.L1690
+	bne	.L1698
 	ldr	r3, [r4, #2708]
 	adds	r3, r3, #1
 	str	r3, [r4, #2708]
-.L1693:
+.L1701:
 	ldr	r3, [sp, #16]
 	cmp	r6, r10
 	lsl	r2, r3, #9
-	bne	.L1694
+	bne	.L1702
 	ldr	r3, [r4, #3840]
 	ldr	r1, [sp, #4]
 	add	r3, r3, r7
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #24]
 	add	r0, r0, r3, lsl #9
-.L1728:
+.L1736:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L1686
+	bne	.L1694
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1686
+	beq	.L1694
 	ldr	r3, [r4, #3840]
 	add	r7, r7, r3
-	ldr	r3, .L1733
+	ldr	r3, .L1741
 	str	r7, [r4, #3988]
 	str	r5, [r3, #-196]
-	b	.L1686
-.L1690:
+	b	.L1694
+.L1698:
 	ldr	r3, [fp, #8]
 	cmp	r6, r3
-	beq	.L1692
+	beq	.L1700
 	ldr	r3, [r4, #2708]
 	mov	r2, r6
-	ldr	r0, .L1733+4
+	ldr	r0, .L1741+4
 	adds	r3, r3, #1
 	str	r3, [r4, #2708]
 	ldr	r1, [fp, #8]
-	bl	printk
-.L1692:
+	bl	sftl_printk
+.L1700:
 	ldr	r3, [fp, #8]
 	cmp	r6, r3
-	beq	.L1693
+	beq	.L1701
 	movw	r2, #1098
-	ldr	r1, .L1733+8
-	ldr	r0, .L1733+12
-	bl	printk
-	b	.L1693
-.L1689:
+	ldr	r1, .L1741+8
+	ldr	r0, .L1741+12
+	bl	sftl_printk
+	b	.L1701
+.L1697:
 	ldr	r3, [r4, #3840]
 	movs	r1, #0
 	ldrh	r2, [r4, #110]
 	add	r3, r3, r7
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1693
-.L1694:
+	b	.L1701
+.L1702:
 	ldrh	r1, [r4, #58]
 	ldr	r0, [sp, #4]
 	ldr	r3, [r4, #3840]
@@ -11900,8 +11969,8 @@ FtlWrite:
 	sub	r1, r1, r8
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1728
-.L1725:
+	b	.L1736
+.L1733:
 	ldr	r3, [r4, #3840]
 	ldr	r2, [sp, #4]
 	add	r7, r7, r3
@@ -11909,8 +11978,8 @@ FtlWrite:
 	muls	r3, r6, r3
 	sub	r3, r3, r8
 	add	r3, r2, r3, lsl #9
-	b	.L1729
-.L1700:
+	b	.L1737
+.L1708:
 	mov	r3, r5
 	movs	r2, #0
 	mov	r1, r9
@@ -11918,24 +11987,24 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [sp, #8]
 	cmp	r3, r9
-	bcs	.L1703
+	bcs	.L1711
 	movw	r2, #1134
-	ldr	r1, .L1733+8
-	ldr	r0, .L1733+12
-	bl	printk
-.L1703:
+	ldr	r1, .L1741+8
+	ldr	r0, .L1741+12
+	bl	sftl_printk
+.L1711:
 	ldr	r3, [sp, #8]
 	sub	r3, r3, r9
 	str	r3, [sp, #8]
-	b	.L1671
-.L1707:
+	b	.L1679
+.L1715:
 	mov	r0, #-1
-	b	.L1664
-.L1734:
+	b	.L1672
+.L1742:
 	.align	2
-.L1733:
+.L1741:
 	.word	.LANCHOR3
-	.word	.LC105
+	.word	.LC109
 	.word	.LANCHOR1+574
 	.word	.LC1
 	.fnend
@@ -11973,7 +12042,7 @@ FtlLoadSysInfo:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L1757
+	ldr	r4, .L1765
 	ldr	r3, [r4, #3280]
 	ldrh	r2, [r4, #40]
 	ldr	r0, [r4, #2324]
@@ -11985,39 +12054,39 @@ FtlLoadSysInfo:
 	ldrh	r0, [r4, #2576]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1737
-.L1745:
+	bne	.L1745
+.L1753:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1737:
-	ldr	r7, .L1757+4
+.L1745:
+	ldr	r7, .L1765+4
 	movs	r1, #1
 	addw	r6, r4, #3260
 	bl	FtlGetLastWrittenPage
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #2578]	@ movhi
-.L1739:
+.L1747:
 	cmp	r5, #0
-	bge	.L1742
+	bge	.L1750
 	movw	r2, #1437
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1741:
+	ldr	r1, .L1765+8
+	ldr	r0, .L1765+12
+	bl	sftl_printk
+.L1749:
 	ldrh	r3, [r4, #40]
 	ldrh	r2, [r4, #110]
 	adds	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1744
+	bcs	.L1752
 	movw	r2, #1439
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1744:
+	ldr	r1, .L1765+8
+	ldr	r0, .L1765+12
+	bl	sftl_printk
+.L1752:
 	movs	r2, #48
 	ldr	r1, [r4, #3268]
-	ldr	r0, .L1757+16
+	ldr	r0, .L1765+16
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #40]
 	ldr	r1, [r4, #3268]
@@ -12036,16 +12105,16 @@ FtlLoadSysInfo:
 	add	r1, r1, r3
 	bl	ftl_memcpy
 	ldr	r2, [r4, #2268]
-	ldr	r3, .L1757+4
+	ldr	r3, .L1765+4
 	cmp	r2, r3
-	bne	.L1745
+	bne	.L1753
 	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
 	ldrh	r3, [r4, #54]
 	ldrh	r5, [r4, #2276]
 	cmp	r2, r3
 	strh	r5, [r4, #2582]	@ movhi
-	bne	.L1745
-	ldr	r3, .L1757+20
+	bne	.L1753
+	ldr	r3, .L1765+20
 	ldrh	r2, [r4, #58]
 	ldr	r6, [r4, #44]
 	str	r5, [r3, #-176]
@@ -12061,12 +12130,12 @@ FtlLoadSysInfo:
 	bl	__aeabi_uidiv
 	cmp	r5, r6
 	strh	r0, [r4, #2572]	@ movhi
-	bls	.L1746
+	bls	.L1754
 	movw	r2, #1461
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1746:
+	ldr	r1, .L1765+8
+	ldr	r0, .L1765+12
+	bl	sftl_printk
+.L1754:
 	ldrh	r3, [r4, #2284]
 	ldrh	r1, [r4, #2282]
 	lsrs	r2, r3, #6
@@ -12121,34 +12190,34 @@ FtlLoadSysInfo:
 	strhi	r3, [r4, #2544]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1749
-	ldr	r0, .L1757+24
+	beq	.L1757
+	ldr	r0, .L1765+24
 	bl	make_superblock
-.L1749:
+.L1757:
 	ldrh	r2, [r4, #2396]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1750
-	ldr	r0, .L1757+28
+	beq	.L1758
+	ldr	r0, .L1765+28
 	bl	make_superblock
-.L1750:
+.L1758:
 	ldrh	r2, [r4, #2444]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1751
-	ldr	r0, .L1757+32
+	beq	.L1759
+	ldr	r0, .L1765+32
 	bl	make_superblock
-.L1751:
+.L1759:
 	ldrh	r2, [r4, #2588]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1752
-	ldr	r0, .L1757+36
+	beq	.L1760
+	ldr	r0, .L1765+36
 	bl	make_superblock
-.L1752:
+.L1760:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1742:
+.L1750:
 	ldrh	r3, [r4, #2576]
 	movs	r2, #1
 	mov	r1, r2
@@ -12160,23 +12229,23 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3260]
 	adds	r3, r3, #1
-	beq	.L1740
+	beq	.L1748
 	ldr	r3, [r4, #3280]
 	ldr	r3, [r3]
 	cmp	r3, r7
-	bne	.L1740
+	bne	.L1748
 	ldr	r3, [r4, #3284]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	beq	.L1741
-.L1740:
+	beq	.L1749
+.L1748:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L1739
-.L1758:
+	b	.L1747
+.L1766:
 	.align	2
-.L1757:
+.L1765:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	.LANCHOR1+583
@@ -12203,7 +12272,7 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1775
+	ldr	r4, .L1783
 	ldrh	r0, [r4, #36]
 	strh	r3, [r4, #4008]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
@@ -12211,17 +12280,17 @@ FtlSysBlkInit:
 	ldrh	r2, [r4, #2576]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1760
-.L1762:
+	bne	.L1768
+.L1770:
 	mov	r5, #-1
-.L1759:
+.L1767:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1760:
+.L1768:
 	bl	FtlLoadSysInfo
 	mov	r5, r0
 	cmp	r0, #0
-	bne	.L1762
+	bne	.L1770
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12235,23 +12304,23 @@ FtlSysBlkInit:
 	mov	r3, r5
 	ldr	r2, [r4, #2492]
 	movs	r0, #12
-.L1763:
+.L1771:
 	cmp	r3, r1
-	bge	.L1768
+	bge	.L1776
 	mla	r6, r0, r3, r2
 	ldr	r6, [r6, #4]
 	cmp	r6, #0
-	bge	.L1764
-.L1768:
+	bge	.L1772
+.L1776:
 	ldrh	r2, [r4, #2296]
 	cmp	r3, r1
 	add	r2, r2, #1
 	strh	r2, [r4, #2296]	@ movhi
-	bge	.L1774
-.L1765:
-	ldr	r0, .L1775+4
+	bge	.L1782
+.L1773:
+	ldr	r0, .L1783+4
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1775+8
+	ldr	r0, .L1783+8
 	bl	FtlSuperblockPowerLostFix
 	ldrh	r1, [r4, #2348]
 	ldr	r2, [r4, #2324]
@@ -12271,12 +12340,12 @@ FtlSysBlkInit:
 	subs	r2, r2, r6
 	strh	r2, [r1, r0, lsl #1]	@ movhi
 	ldrh	r2, [r4, #102]
-	ldr	r0, .L1775+12
+	ldr	r0, .L1783+12
 	strb	r3, [r4, #2402]
 	strh	r2, [r4, #2398]	@ movhi
 	strh	r3, [r4, #2400]	@ movhi
 	bl	FtlMapBlkWriteDump_data
-	ldr	r0, .L1775+16
+	ldr	r0, .L1783+16
 	bl	FtlMapBlkWriteDump_data
 	ldrh	r3, [r4, #2298]
 	adds	r3, r3, #1
@@ -12284,39 +12353,39 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1769
-.L1764:
+	b	.L1777
+.L1772:
 	adds	r3, r3, #1
-	b	.L1763
-.L1774:
+	b	.L1771
+.L1782:
 	ldrh	r3, [r4, #4008]
 	cmp	r3, #0
-	bne	.L1765
-.L1769:
+	bne	.L1773
+.L1777:
 	ldrh	r0, [r4, #2348]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1770
+	beq	.L1778
 	ldrh	r3, [r4, #2352]
-	cbnz	r3, .L1770
+	cbnz	r3, .L1778
 	ldrh	r3, [r4, #2400]
-	cbnz	r3, .L1770
+	cbnz	r3, .L1778
 	bl	FtlGcRefreshBlock
 	ldrh	r0, [r4, #2396]
 	bl	FtlGcRefreshBlock
-	ldr	r0, .L1775+4
+	ldr	r0, .L1783+4
 	bl	allocate_new_data_superblock
-	ldr	r0, .L1775+8
+	ldr	r0, .L1783+8
 	bl	allocate_new_data_superblock
-.L1770:
+.L1778:
 	ldrh	r3, [r4, #2296]
 	lsls	r3, r3, #27
-	bne	.L1759
+	bne	.L1767
 	bl	FtlVpcCheckAndModify
-	b	.L1759
-.L1776:
+	b	.L1767
+.L1784:
 	.align	2
-.L1775:
+.L1783:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR0+2396
@@ -12338,42 +12407,42 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1801
+	ldr	r4, .L1809
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
 	str	r3, [r4, #2544]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1778
+	cbz	r0, .L1786
 	bl	FtlMakeBbt
-.L1778:
-	ldr	r0, .L1801+4
+.L1786:
+	ldr	r0, .L1809+4
 	movs	r2, #0
-.L1779:
+.L1787:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1780
+	blt	.L1788
 	ldrh	r6, [r4, #40]
 	movs	r5, #0
-.L1781:
+.L1789:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1782
+	bhi	.L1790
 	ldrh	r1, [r4, #32]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1783
-.L1787:
+	bge	.L1791
+.L1795:
 	movs	r5, #0
 	mov	r6, r5
-.L1784:
+.L1792:
 	ldrh	r3, [r4, #40]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1788
+	bhi	.L1796
 	ldrh	r3, [r4, #42]
 	ldrh	r5, [r4, #32]
 	ldr	r9, [r4, #44]
@@ -12389,7 +12458,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1789
+	ble	.L1797
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12397,9 +12466,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2572]	@ movhi
-.L1789:
+.L1797:
 	ldrh	r3, [r4, #94]
-	cbz	r3, .L1791
+	cbz	r3, .L1799
 	ldrh	r2, [r4, #2572]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2572]	@ movhi
@@ -12410,11 +12479,11 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2572]	@ movhi
-.L1791:
+.L1799:
 	ldrh	r2, [r4, #2572]
 	movw	r6, #65535
 	ldr	r3, [r4, #2504]
-	ldr	r7, .L1801+8
+	ldr	r7, .L1809+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #102]
@@ -12429,7 +12498,7 @@ ftl_low_format:
 	ldrh	r2, [r4, #42]
 	movs	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r7, .L1801+12
+	ldr	r7, .L1809+12
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r2, [r4, #40]
@@ -12448,28 +12517,28 @@ ftl_low_format:
 	strh	r6, [r4, #2588]	@ movhi
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1793:
+.L1801:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2348]
 	cmp	r3, #0
-	bne	.L1794
+	bne	.L1802
 	ldr	r3, [r4, #2324]
 	strh	r6, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2348]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2348]	@ movhi
-	b	.L1793
-.L1780:
+	b	.L1801
+.L1788:
 	ldr	r5, [r4, #3816]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
 	ldr	r1, [r4, #3808]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1779
-.L1782:
+	b	.L1787
+.L1790:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12477,8 +12546,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1781
-.L1783:
+	b	.L1789
+.L1791:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #132]
@@ -12488,27 +12557,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1785:
+.L1793:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1787
+	bls	.L1795
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1785
-.L1788:
+	b	.L1793
+.L1796:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1784
-.L1794:
+	b	.L1792
+.L1802:
 	ldr	r3, [r4, #2540]
 	movw	r6, #65535
 	ldrh	r1, [r4, #2352]
-	ldr	r7, .L1801+16
+	ldr	r7, .L1809+16
 	str	r3, [r4, #2360]
 	adds	r3, r3, #1
 	str	r3, [r4, #2540]
@@ -12522,19 +12591,19 @@ ftl_low_format:
 	strh	r3, [r4, #2396]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #2404]
-.L1795:
+.L1803:
 	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2396]
-	cbnz	r3, .L1796
+	cbnz	r3, .L1804
 	ldr	r3, [r4, #2324]
 	strh	r6, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2396]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2396]	@ movhi
-	b	.L1795
-.L1796:
+	b	.L1803
+.L1804:
 	ldr	r3, [r4, #2540]
 	movw	r6, #65535
 	ldrh	r1, [r4, #2400]
@@ -12557,16 +12626,16 @@ ftl_low_format:
 	str	r3, [r4, #2540]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1797
-	ldr	r3, .L1801+20
+	cbnz	r0, .L1805
+	ldr	r3, .L1809+20
 	movs	r2, #1
 	str	r2, [r3]
-.L1797:
+.L1805:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1802:
+.L1810:
 	.align	2
-.L1801:
+.L1809:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR3
@@ -12589,12 +12658,12 @@ sftl_init:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r3, #-1
-	ldr	r4, .L1809
-	ldr	r5, .L1809+4
-	ldr	r1, .L1809+8
-	ldr	r0, .L1809+12
+	ldr	r4, .L1817
+	ldr	r5, .L1817+4
+	ldr	r1, .L1817+8
+	ldr	r0, .L1817+12
 	str	r3, [r5]
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r4
 	bl	FtlConstantsInit
 	bl	FtlMemInit
@@ -12602,27 +12671,27 @@ sftl_init:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	r0, .L1807
+	cbnz	r0, .L1815
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1807
+	cbnz	r0, .L1815
 	movs	r3, #1
 	str	r3, [r5]
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #15
-	bhi	.L1807
+	bhi	.L1815
 	movw	r4, #8129
-.L1806:
+.L1814:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1806
-.L1807:
+	bne	.L1814
+.L1815:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L1810:
+.L1818:
 	.align	2
-.L1809:
+.L1817:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC70
@@ -12656,19 +12725,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1815
+	ldr	r2, .L1823
 	ldr	r3, [r2, #-172]
-	cbnz	r3, .L1814
+	cbnz	r3, .L1822
 	str	r0, [r2, #-172]
 	mov	r0, r3
 	str	r1, [r2, #-168]
 	bx	lr
-.L1814:
+.L1822:
 	mov	r0, #-1
 	bx	lr
-.L1816:
+.L1824:
 	.align	2
-.L1815:
+.L1823:
 	.word	.LANCHOR3
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12683,65 +12752,58 @@ rk_sftl_vendor_storage_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r4, .L1825
+	ldr	r4, .L1833
 	bl	ftl_malloc
 	str	r0, [r4, #-164]
 	cmp	r0, #0
-	beq	.L1823
-	ldr	fp, .L1825+4
-	mov	r8, #0
-	ldr	r9, .L1825+8
-	mov	r7, r8
-	mov	r6, r8
-.L1821:
+	beq	.L1831
+	ldr	r8, .L1833+4
+	mov	r9, #0
+	mov	r7, r9
+	mov	r6, r9
+.L1829:
 	ldr	r3, [r4, #-172]
 	movs	r1, #128
 	ldr	r2, [r4, #-164]
 	lsls	r0, r6, #7
 	blx	r3
 	mov	r5, r0
-	cbnz	r0, .L1819
-	ldr	r1, [r4, #-164]
-	movw	r10, #65532
-	mov	r0, fp
-	ldr	r3, [r1, #4]
-	ldr	r2, [r1, r10]
-	ldr	r1, [r1]
-	bl	printk
+	cbnz	r0, .L1827
 	ldr	r2, [r4, #-164]
 	ldr	r3, [r2]
-	cmp	r3, r9
-	bne	.L1820
-	ldr	r3, [r2, r10]
-	ldr	r1, [r2, #4]
-	cmp	r3, r1
-	bne	.L1820
-	cmp	r3, r7
+	cmp	r3, r8
+	bne	.L1828
+	movw	r3, #65532
+	ldr	r1, [r2, r3]
+	ldr	r3, [r2, #4]
+	cmp	r1, r3
+	bne	.L1828
+	cmp	r1, r7
 	itt	hi
-	movhi	r8, r6
-	movhi	r7, r3
-.L1820:
+	movhi	r9, r6
+	movhi	r7, r1
+.L1828:
 	adds	r6, r6, #1
 	cmp	r6, #2
-	bne	.L1821
-	cbz	r7, .L1822
+	bne	.L1829
+	cbz	r7, .L1830
 	ldr	r3, [r4, #-172]
 	movs	r1, #128
-	lsl	r0, r8, #7
+	lsl	r0, r9, #7
 	blx	r3
 	mov	r5, r0
-	cbz	r0, .L1817
-.L1819:
+	cbz	r0, .L1825
+.L1827:
 	ldr	r0, [r4, #-164]
 	mov	r5, #-1
 	bl	kfree
 	movs	r3, #0
 	str	r3, [r4, #-164]
-	b	.L1817
-.L1822:
+	b	.L1825
+.L1830:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
@@ -12749,22 +12811,21 @@ rk_sftl_vendor_storage_init:
 	movs	r2, #1
 	movw	r1, #65532
 	str	r2, [r3, #4]
-	str	r9, [r3]
+	str	r8, [r3]
 	str	r2, [r3, r1]
 	movw	r2, #64504
 	strh	r7, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1817:
+.L1825:
 	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1823:
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1831:
 	mvn	r5, #11
-	b	.L1817
-.L1826:
+	b	.L1825
+.L1834:
 	.align	2
-.L1825:
+.L1833:
 	.word	.LANCHOR3
-	.word	.LC106
 	.word	1380668996
 	.fnend
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
@@ -12782,23 +12843,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L1833
+	ldr	r3, .L1841
 	mov	r0, r1
 	ldr	r5, [r3, #-164]
-	cbz	r5, .L1832
+	cbz	r5, .L1840
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L1829:
+.L1837:
 	cmp	r3, r6
-	bcc	.L1831
-.L1832:
+	bcc	.L1839
+.L1840:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1831:
+.L1839:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L1830
+	bne	.L1838
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -12810,12 +12871,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1830:
+.L1838:
 	adds	r3, r3, #1
-	b	.L1829
-.L1834:
+	b	.L1837
+.L1842:
 	.align	2
-.L1833:
+.L1841:
 	.word	.LANCHOR3
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -12833,26 +12894,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L1854
+	ldr	r2, .L1862
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
 	ldr	r4, [r2, #-164]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L1850
+	beq	.L1858
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L1837:
+.L1845:
 	cmp	r7, r2
-	bcc	.L1845
+	bcc	.L1853
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1850
+	bhi	.L1858
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -12885,31 +12946,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #-168]
-	b	.L1853
-.L1845:
+	b	.L1861
+.L1853:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L1838
+	bne	.L1846
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L1839
+	bls	.L1847
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1850
+	bhi	.L1858
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L1840:
+.L1848:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L1841
+	bcc	.L1849
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -12928,7 +12989,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L1842:
+.L1850:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -12941,20 +13002,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1854
+	ldr	r3, .L1862
 	ldr	r3, [r3, #-168]
-.L1853:
+.L1861:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L1835:
+.L1843:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1841:
+.L1849:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -12971,24 +13032,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L1840
-.L1839:
+	b	.L1848
+.L1847:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L1842
-.L1838:
+	b	.L1850
+.L1846:
 	adds	r7, r7, #1
-	b	.L1837
-.L1850:
+	b	.L1845
+.L1858:
 	mov	r0, #-1
-	b	.L1835
-.L1855:
+	b	.L1843
+.L1863:
 	.align	2
-.L1854:
+.L1862:
 	.word	.LANCHOR3
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -13011,18 +13072,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L1870
-	ldr	r3, .L1882
+	beq	.L1878
+	ldr	r3, .L1890
 	cmp	r6, r3
-	beq	.L1859
+	beq	.L1867
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1860
-.L1881:
+	beq	.L1868
+.L1889:
 	mvn	r5, #13
-	b	.L1858
-.L1859:
-	ldr	r6, .L1882+4
+	b	.L1866
+.L1867:
+	ldr	r6, .L1890+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13033,31 +13094,31 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1866
+	bne	.L1874
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1889
 	ldr	r2, [r4]
-	ldr	r3, .L1882+8
+	ldr	r3, .L1890+8
 	cmp	r2, r3
-	beq	.L1864
-.L1865:
+	beq	.L1872
+.L1873:
 	mov	r5, #-1
-.L1858:
+.L1866:
 	mov	r0, r4
 	bl	kfree
-.L1856:
+.L1864:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1864:
+.L1872:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L1865
+	beq	.L1873
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
@@ -13071,17 +13132,17 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1881
+	bne	.L1889
 	mov	r1, r4
 	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L1881
-.L1872:
+	bne	.L1889
+.L1880:
 	mov	r5, r0
-	b	.L1858
-.L1860:
-	ldr	r6, .L1882+4
+	b	.L1866
+.L1868:
+	ldr	r6, .L1890+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13091,20 +13152,20 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1866
+	cbnz	r3, .L1874
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1889
 	ldr	r2, [r4]
-	ldr	r3, .L1882+8
+	ldr	r3, .L1890+8
 	cmp	r2, r3
-	bne	.L1865
+	bne	.L1873
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1865
+	bhi	.L1873
 	mov	r3, sp
 	adds	r2, r2, #8
 	ands	r6, r6, r3
@@ -13115,32 +13176,32 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1868
+	cbnz	r3, .L1876
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1889
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L1872
-.L1866:
+	b	.L1880
+.L1874:
 	movs	r1, #8
-.L1880:
+.L1888:
 	bl	__memzero
-	b	.L1881
-.L1868:
+	b	.L1889
+.L1876:
 	mov	r1, r2
 	mov	r0, r4
-	b	.L1880
-.L1870:
+	b	.L1888
+.L1878:
 	mov	r5, #-1
-	b	.L1856
-.L1883:
+	b	.L1864
+.L1891:
 	.align	2
-.L1882:
+.L1890:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13158,11 +13219,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L1885
+	ldr	r0, .L1893
 	b	misc_register
-.L1886:
+.L1894:
 	.align	2
-.L1885:
+.L1893:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -13317,141 +13378,141 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.6666, %object
-	.size	__func__.6666, 17
-__func__.6666:
+	.type	__func__.6668, %object
+	.size	__func__.6668, 17
+__func__.6668:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.6661, %object
-	.size	__func__.6661, 17
-__func__.6661:
+	.type	__func__.6663, %object
+	.size	__func__.6663, 17
+__func__.6663:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.6697, %object
-	.size	__func__.6697, 17
-__func__.6697:
+	.type	__func__.6699, %object
+	.size	__func__.6699, 17
+__func__.6699:
 	.ascii	"List_remove_node\000"
-	.type	__func__.6729, %object
-	.size	__func__.6729, 22
-__func__.6729:
+	.type	__func__.6731, %object
+	.size	__func__.6731, 22
+__func__.6731:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.6835, %object
-	.size	__func__.6835, 22
-__func__.6835:
+	.type	__func__.6837, %object
+	.size	__func__.6837, 22
+__func__.6837:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.7158, %object
-	.size	__func__.7158, 16
-__func__.7158:
+	.type	__func__.7160, %object
+	.size	__func__.7160, 16
+__func__.7160:
 	.ascii	"make_superblock\000"
-	.type	__func__.7333, %object
-	.size	__func__.7333, 19
-__func__.7333:
+	.type	__func__.7335, %object
+	.size	__func__.7335, 19
+__func__.7335:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.17662, %object
-	.size	__func__.17662, 15
-__func__.17662:
+	.type	__func__.17672, %object
+	.size	__func__.17672, 15
+__func__.17672:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.17679, %object
-	.size	__func__.17679, 15
-__func__.17679:
+	.type	__func__.17689, %object
+	.size	__func__.17689, 15
+__func__.17689:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.6771, %object
-	.size	__func__.6771, 26
-__func__.6771:
+	.type	__func__.6773, %object
+	.size	__func__.6773, 26
+__func__.6773:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.6275, %object
-	.size	__func__.6275, 11
-__func__.6275:
+	.type	__func__.6277, %object
+	.size	__func__.6277, 11
+__func__.6277:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.6501, %object
-	.size	__func__.6501, 14
-__func__.6501:
+	.type	__func__.6503, %object
+	.size	__func__.6503, 14
+__func__.6503:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.6738, %object
-	.size	__func__.6738, 16
-__func__.6738:
+	.type	__func__.6740, %object
+	.size	__func__.6740, 16
+__func__.6740:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.6796, %object
-	.size	__func__.6796, 31
-__func__.6796:
+	.type	__func__.6798, %object
+	.size	__func__.6798, 31
+__func__.6798:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.6810, %object
-	.size	__func__.6810, 16
-__func__.6810:
+	.type	__func__.6812, %object
+	.size	__func__.6812, 16
+__func__.6812:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.6782, %object
-	.size	__func__.6782, 15
-__func__.6782:
+	.type	__func__.6784, %object
+	.size	__func__.6784, 15
+__func__.6784:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.6852, %object
-	.size	__func__.6852, 9
-__func__.6852:
+	.type	__func__.6854, %object
+	.size	__func__.6854, 9
+__func__.6854:
 	.ascii	"log2phys\000"
-	.type	__func__.7067, %object
-	.size	__func__.7067, 16
-__func__.7067:
+	.type	__func__.7069, %object
+	.size	__func__.7069, 16
+__func__.7069:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.7220, %object
-	.size	__func__.7220, 14
-__func__.7220:
+	.type	__func__.7222, %object
+	.size	__func__.7222, 14
+__func__.7222:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.6947, %object
-	.size	__func__.6947, 14
-__func__.6947:
+	.type	__func__.6949, %object
+	.size	__func__.6949, 14
+__func__.6949:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.7179, %object
-	.size	__func__.7179, 18
-__func__.7179:
+	.type	__func__.7181, %object
+	.size	__func__.7181, 18
+__func__.7181:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.7305, %object
-	.size	__func__.7305, 25
-__func__.7305:
+	.type	__func__.7307, %object
+	.size	__func__.7307, 25
+__func__.7307:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.7346, %object
-	.size	__func__.7346, 16
-__func__.7346:
+	.type	__func__.7348, %object
+	.size	__func__.7348, 16
+__func__.7348:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.7353, %object
-	.size	__func__.7353, 20
-__func__.7353:
+	.type	__func__.7355, %object
+	.size	__func__.7355, 20
+__func__.7355:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7101, %object
-	.size	__func__.7101, 22
-__func__.7101:
+	.type	__func__.7103, %object
+	.size	__func__.7103, 22
+__func__.7103:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.6544, %object
-	.size	__func__.6544, 11
-__func__.6544:
+	.type	__func__.6546, %object
+	.size	__func__.6546, 11
+__func__.6546:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.6925, %object
-	.size	__func__.6925, 15
-__func__.6925:
+	.type	__func__.6927, %object
+	.size	__func__.6927, 15
+__func__.6927:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.7204, %object
-	.size	__func__.7204, 21
-__func__.7204:
+	.type	__func__.7206, %object
+	.size	__func__.7206, 21
+__func__.7206:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.7326, %object
-	.size	__func__.7326, 29
-__func__.7326:
+	.type	__func__.7328, %object
+	.size	__func__.7328, 29
+__func__.7328:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.6399, %object
-	.size	__func__.6399, 13
-__func__.6399:
+	.type	__func__.6401, %object
+	.size	__func__.6401, 13
+__func__.6401:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.7423, %object
-	.size	__func__.7423, 19
-__func__.7423:
+	.type	__func__.7425, %object
+	.size	__func__.7425, 19
+__func__.7425:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.7529, %object
-	.size	__func__.7529, 23
-__func__.7529:
+	.type	__func__.7531, %object
+	.size	__func__.7531, 23
+__func__.7531:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.6427, %object
-	.size	__func__.6427, 9
-__func__.6427:
+	.type	__func__.6429, %object
+	.size	__func__.6429, 9
+__func__.6429:
 	.ascii	"FtlWrite\000"
-	.type	__func__.7004, %object
-	.size	__func__.7004, 15
-__func__.7004:
+	.type	__func__.7006, %object
+	.size	__func__.7006, 15
+__func__.7006:
 	.ascii	"FtlLoadSysInfo\000"
 	.space	2
 	.type	rk_sftl_vendor_storage_fops, %object
@@ -13481,7 +13542,7 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC107
+	.word	.LC110
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
@@ -14265,70 +14326,77 @@ check_vpc_table:
 .LC74:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC75:
-	.ascii	"\0014\000"
+	.ascii	"%s %p + 0x%x:\000"
 .LC76:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"0x%08x,\000"
 .LC77:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"0x%04x,\000"
 .LC78:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"0x%02x,\000"
 .LC79:
-	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+	.ascii	"\012\000"
 .LC80:
+	.ascii	"prog read error: = %x\012\000"
+.LC81:
+	.ascii	"prog read s error: = %x %x %x\012\000"
+.LC82:
+	.ascii	"prog read d error: = %x %x %x\012\000"
+.LC83:
+	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+.LC84:
 	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
 	.ascii	"\000"
-.LC81:
+.LC85:
 	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
-.LC82:
+.LC86:
 	.ascii	"%s error allocating memory. return -1\012\000"
-.LC83:
+.LC87:
 	.ascii	"region_id = %x phyAddr = %x\012\000"
-.LC84:
+.LC88:
 	.ascii	"spare:\000"
-.LC85:
+.LC89:
 	.ascii	"map_ppn:\000"
-.LC86:
+.LC90:
 	.ascii	"FtlMapWritePage error = %x \012\000"
-.LC87:
+.LC91:
 	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
-.LC88:
+.LC92:
 	.ascii	"ftl_scan_all_data = %x\012\000"
-.LC89:
+.LC93:
 	.ascii	"scan lpa = %x ppa= %x\012\000"
-.LC90:
+.LC94:
 	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
 	.ascii	"\000"
-.LC91:
+.LC95:
 	.ascii	"...%s enter...\012\000"
-.LC92:
+.LC96:
 	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
-.LC93:
+.LC97:
 	.ascii	"free blk vpc error %x = %x  %x\012\000"
-.LC94:
+.LC98:
 	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
-.LC95:
+.LC99:
 	.ascii	"FtlBbmTblFlush error:%x\012\000"
-.LC96:
+.LC100:
 	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
-.LC97:
+.LC101:
 	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
-.LC98:
+.LC102:
 	.ascii	"decrement_vpc_count %x = %d\012\000"
-.LC99:
+.LC103:
 	.ascii	"spuer block %x vpn is 0\012 \000"
-.LC100:
+.LC104:
 	.ascii	"no ect\000"
-.LC101:
+.LC105:
 	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
-.LC102:
+.LC106:
 	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
-.LC103:
+.LC107:
 	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
-.LC104:
+.LC108:
 	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
-.LC105:
+.LC109:
 	.ascii	"FtlWrite: lpa error:%x %x\012\000"
-.LC106:
-	.ascii	"\0013vendor storage %x,%x,%x\012\000"
-.LC107:
-	.ascii	"vendor_storage\000"
\ No newline at end of file
+.LC110:
+	.ascii	"vendor_storage\000"
+
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index add074698025..e8896074a6c0 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -2,7 +2,7 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-08-07
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
@@ -305,7 +305,7 @@ FtlBbmMapBadBlock:
 	str	w4, [x0, x5]
 	adrp	x0, .LC0
 	add	x0, x0, :lo12:.LC0
-	bl	printk
+	bl	sftl_printk
 	ldrh	w0, [x19, 6]
 	add	w0, w0, 1
 	strh	w0, [x19, 6]
@@ -651,7 +651,7 @@ INSERT_DATA_LIST:
 	mov	w2, 221
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L84:
 	ldp	x29, x30, [sp], 16
 	ret
@@ -748,7 +748,7 @@ INSERT_FREE_LIST:
 	mov	w2, 214
 	add	x1, x1, 24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L94:
 	ldp	x29, x30, [sp], 16
 	ret
@@ -783,7 +783,7 @@ List_remove_node:
 	mov	w2, 379
 	add	x1, x1, 48
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L98:
 	ldr	x0, [x23]
 	mov	w1, 65535
@@ -973,7 +973,7 @@ List_update_data_list:
 	mov	w2, 470
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L128:
 	ldrh	w0, [x23, 2]
 	mov	w1, 65535
@@ -1011,7 +1011,7 @@ List_update_data_list:
 	mov	w2, 481
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L131:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2400]
@@ -1069,7 +1069,7 @@ select_l2p_ram_region:
 	add	x1, x1, 96
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 	b	.L137
 .L138:
 	add	x3, x3, 1
@@ -1288,7 +1288,7 @@ make_superblock:
 	mov	w2, 2097
 	add	x1, x1, 120
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L174:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x6, x19, 16
@@ -2123,7 +2123,7 @@ GetSwlReplaceBlock:
 	ldrh	w4, [x0, x7]
 	adrp	x0, .LC72
 	add	x0, x0, :lo12:.LC72
-	bl	printk
+	bl	sftl_printk
 	mov	w0, 1
 	str	w0, [x19, 3244]
 	b	.L228
@@ -2191,7 +2191,7 @@ get_new_active_ppa:
 	mov	w2, 2707
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L250:
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
@@ -2205,7 +2205,7 @@ get_new_active_ppa:
 	mov	w2, 2708
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L251:
 	ldrh	w0, [x19, 4]
 	cbnz	w0, .L252
@@ -2215,7 +2215,7 @@ get_new_active_ppa:
 	mov	w2, 2709
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L252:
 	ldrb	w0, [x19, 6]
 	add	x1, x20, :lo12:.LANCHOR0
@@ -2262,7 +2262,7 @@ get_new_active_ppa:
 	mov	w2, 2730
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 .L249:
 	mov	w0, w21
 	ldr	x21, [sp, 32]
@@ -2525,7 +2525,7 @@ FtlGcRefreshBlock:
 	mov	w1, w19
 	adrp	x0, .LC73
 	add	x0, x0, :lo12:.LC73
-	bl	printk
+	bl	sftl_printk
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w3, [x0, 3320]
@@ -2568,7 +2568,7 @@ FtlGcMarkBadPhyBlk:
 	mov	w22, w0
 	adrp	x0, .LC74
 	add	x0, x0, :lo12:.LC74
-	bl	printk
+	bl	sftl_printk
 	mov	w0, w22
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x20, -4]
@@ -2659,21 +2659,74 @@ ftl_free:
 	.global	rknand_print_hex
 	.type	rknand_print_hex, %function
 rknand_print_hex:
-	stp	x29, x30, [sp, -16]!
-	mul	w3, w3, w2
-	mov	x5, x1
-	mov	w4, w2
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
-	mov	x1, x0
-	sxtw	x6, w3
-	mov	w7, 0
-	mov	w3, 16
-	mov	w2, 2
-	adrp	x0, .LC75
-	add	x0, x0, :lo12:.LC75
-	bl	print_hex_dump
-	ldp	x29, x30, [sp], 16
+	stp	x21, x22, [sp, 32]
+	mov	x21, x1
+	stp	x23, x24, [sp, 48]
+	adrp	x24, .LC75
+	stp	x25, x26, [sp, 64]
+	mov	w23, w2
+	stp	x27, x28, [sp, 80]
+	adrp	x25, .LC78
+	mov	x27, x0
+	mov	w26, w3
+	add	x24, x24, :lo12:.LC75
+	add	x25, x25, :lo12:.LC78
+	stp	x19, x20, [sp, 16]
+	mov	w22, 0
+	mov	x19, 0
+	mov	w20, 0
+	adrp	x28, .LC77
+.L314:
+	cmp	w26, w19
+	bhi	.L320
+	adrp	x0, .LC79
+	add	x0, x0, :lo12:.LC79
+	bl	sftl_printk
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
 	ret
+.L320:
+	cbnz	w20, .L315
+	mov	w3, w22
+	mov	x2, x21
+	mov	x1, x27
+	mov	x0, x24
+	bl	sftl_printk
+.L315:
+	cmp	w23, 4
+	bne	.L316
+	ldr	w1, [x21, x19, lsl 2]
+	adrp	x0, .LC76
+	add	x0, x0, :lo12:.LC76
+.L322:
+	bl	sftl_printk
+	add	w20, w20, 1
+	cmp	w20, 15
+	bls	.L319
+	mov	w20, 0
+	adrp	x0, .LC79
+	add	x0, x0, :lo12:.LC79
+	bl	sftl_printk
+.L319:
+	add	x19, x19, 1
+	add	w22, w22, w23
+	b	.L314
+.L316:
+	cmp	w23, 2
+	bne	.L318
+	ldrh	w1, [x21, x19, lsl 1]
+	add	x0, x28, :lo12:.LC77
+	b	.L322
+.L318:
+	ldrb	w1, [x21, x19]
+	mov	x0, x25
+	b	.L322
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
 	.global	FlashReadPages
@@ -2696,9 +2749,9 @@ FlashReadPages:
 	add	x23, x0, x1
 	add	x20, x20, 160
 	add	x21, x21, :lo12:.LC1
-.L316:
+.L324:
 	cmp	x19, x23
-	bne	.L323
+	bne	.L331
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -2706,17 +2759,17 @@ FlashReadPages:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L323:
+.L331:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L317
+	cbz	x0, .L325
 	ldr	x0, [x19, 16]
-	cbnz	x0, .L318
-.L317:
-	mov	w2, 76
+	cbnz	x0, .L326
+.L325:
+	mov	w2, 101
 	mov	x1, x20
 	mov	x0, x21
-	bl	printk
-.L318:
+	bl	sftl_printk
+.L326:
 	ldr	w0, [x19, 4]
 	add	x26, x22, :lo12:.LANCHOR0
 	add	x2, x29, 88
@@ -2730,7 +2783,7 @@ FlashReadPages:
 	str	w0, [x19]
 	ldrh	w0, [x26, 14]
 	cmp	w0, 4
-	bne	.L320
+	bne	.L328
 	ldrb	w0, [x29, 88]
 	ldr	x4, [x26, 3392]
 	ldp	x2, x3, [x19, 8]
@@ -2740,23 +2793,23 @@ FlashReadPages:
 	add	w1, w25, w1
 	blr	x4
 	cmn	w0, #1
-	beq	.L321
+	beq	.L329
 	ldr	x0, [x19, 16]
 	ldr	w1, [x0, 12]
 	cmn	w1, #1
-	bne	.L320
+	bne	.L328
 	ldr	w1, [x0, 8]
 	cmn	w1, #1
-	bne	.L320
+	bne	.L328
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L320
-.L321:
+	beq	.L328
+.L329:
 	mov	w0, -1
 	str	w0, [x19]
-.L320:
+.L328:
 	add	x19, x19, 32
-	b	.L316
+	b	.L324
 	.size	FlashReadPages, .-FlashReadPages
 	.align	2
 	.global	FtlLoadFactoryBbt
@@ -2779,10 +2832,10 @@ FtlLoadFactoryBbt:
 	ldr	x1, [x0, 3432]
 	ldr	x24, [x0, 3440]
 	stp	x1, x24, [x23, 8]
-.L335:
+.L343:
 	ldrh	w0, [x19, 58]
 	cmp	w21, w0
-	bcc	.L340
+	bcc	.L348
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -2790,17 +2843,17 @@ FtlLoadFactoryBbt:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L340:
+.L348:
 	ldrh	w20, [x19, 102]
 	mov	w0, -1
 	strh	w0, [x22]
-.L337:
+.L345:
 	ldrh	w0, [x19, 102]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L338
+	ble	.L346
 	madd	w0, w0, w21, w20
 	mov	w2, 1
 	mov	w1, w2
@@ -2810,15 +2863,15 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L337
+	beq	.L345
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L337
+	bne	.L345
 	strh	w20, [x22]
-.L338:
+.L346:
 	add	w21, w21, 1
 	add	x22, x22, 2
-	b	.L335
+	b	.L343
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
 	.global	FtlGetLastWrittenPage
@@ -2833,9 +2886,9 @@ FtlGetLastWrittenPage:
 	adrp	x1, .LANCHOR0
 	stp	x21, x22, [sp, 32]
 	add	x1, x1, :lo12:.LANCHOR0
-	bne	.L346
+	bne	.L354
 	ldrh	w19, [x1, 108]
-.L347:
+.L355:
 	sub	w19, w19, #1
 	adrp	x1, ftl_temp_buf
 	sxth	w19, w19
@@ -2852,23 +2905,23 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 96]
 	cmn	w0, #1
-	bne	.L348
+	bne	.L356
 	mov	w22, 0
 	mov	w24, 2
-.L349:
+.L357:
 	cmp	w22, w19
-	ble	.L352
-.L348:
+	ble	.L360
+.L356:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 160
 	ret
-.L346:
+.L354:
 	ldrh	w19, [x1, 106]
-	b	.L347
-.L352:
+	b	.L355
+.L360:
 	add	w20, w22, w19
 	mov	w2, w23
 	mov	w1, 1
@@ -2880,17 +2933,17 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 96]
 	cmn	w0, #1
-	bne	.L350
+	bne	.L358
 	ldr	w0, [x29, 100]
 	cmn	w0, #1
-	bne	.L350
+	bne	.L358
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L349
-.L350:
+	b	.L357
+.L358:
 	add	w20, w20, 1
 	sxth	w22, w20
-	b	.L349
+	b	.L357
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
 	.global	FlashProgPages
@@ -2917,11 +2970,11 @@ FlashProgPages:
 	mov	x19, x0
 	add	x22, x22, 176
 	add	x23, x23, :lo12:.LC1
-.L355:
+.L363:
 	cmp	x19, x24
-	bne	.L363
-	cbnz	w26, .L364
-.L382:
+	bne	.L371
+	cbnz	w26, .L372
+.L390:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -2930,17 +2983,17 @@ FlashProgPages:
 	ldr	x27, [sp, 80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L363:
+.L371:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L356
+	cbz	x0, .L364
 	ldr	x0, [x19, 16]
-	cbnz	x0, .L357
-.L356:
-	mov	w2, 106
+	cbnz	x0, .L365
+.L364:
+	mov	w2, 131
 	mov	x1, x22
 	mov	x0, x23
-	bl	printk
-.L357:
+	bl	sftl_printk
+.L365:
 	ldr	w0, [x19, 4]
 	add	x2, x29, 104
 	add	x1, x29, 108
@@ -2951,13 +3004,13 @@ FlashProgPages:
 	ldr	x4, [x0, 3384]
 	ldrb	w0, [x29, 104]
 	blr	x4
-	cbnz	w0, .L358
+	cbnz	w0, .L366
 	str	wzr, [x19]
-.L359:
+.L367:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 14]
 	cmp	w1, 4
-	bne	.L361
+	bne	.L369
 	ldr	x4, [x0, 3384]
 	ldrb	w0, [x29, 104]
 	ldp	x2, x3, [x19, 8]
@@ -2966,17 +3019,17 @@ FlashProgPages:
 	add	x2, x2, 2048
 	add	w1, w27, w1
 	blr	x4
-	cbz	w0, .L361
+	cbz	w0, .L369
 	mov	w0, -1
 	str	w0, [x19]
-.L361:
+.L369:
 	add	x19, x19, 32
-	b	.L355
-.L358:
+	b	.L363
+.L366:
 	mov	w0, -1
 	str	w0, [x19]
-	b	.L359
-.L368:
+	b	.L367
+.L376:
 	str	wzr, [x21]
 	mov	w2, w25
 	str	wzr, [x23]
@@ -2988,50 +3041,50 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w24, [x29, 112]
 	cmn	w24, #1
-	bne	.L365
+	bne	.L373
 	ldr	w1, [x20, 4]
-	adrp	x0, .LC76
-	add	x0, x0, :lo12:.LC76
-	bl	printk
+	adrp	x0, .LC80
+	add	x0, x0, :lo12:.LC80
+	bl	sftl_printk
 	str	w24, [x20]
-.L365:
+.L373:
 	ldr	x0, [x20, 16]
-	cbz	x0, .L366
+	cbz	x0, .L374
 	ldr	w2, [x0]
 	ldr	w3, [x21]
 	cmp	w2, w3
-	beq	.L366
+	beq	.L374
 	ldr	w1, [x20, 4]
-	adrp	x0, .LC77
-	add	x0, x0, :lo12:.LC77
-	bl	printk
+	adrp	x0, .LC81
+	add	x0, x0, :lo12:.LC81
+	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x20]
-.L366:
+.L374:
 	ldr	x0, [x20, 8]
-	cbz	x0, .L367
+	cbz	x0, .L375
 	ldr	w3, [x22, #:lo12:check_buf]
 	ldr	w2, [x0]
 	cmp	w2, w3
-	beq	.L367
+	beq	.L375
 	ldr	w1, [x20, 4]
-	adrp	x0, .LC78
-	add	x0, x0, :lo12:.LC78
-	bl	printk
+	adrp	x0, .LC82
+	add	x0, x0, :lo12:.LC82
+	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x20]
-.L367:
+.L375:
 	add	x20, x20, 32
-.L383:
+.L391:
 	cmp	x20, x19
-	bne	.L368
-	b	.L382
-.L364:
+	bne	.L376
+	b	.L390
+.L372:
 	add	x21, x21, :lo12:.LANCHOR0
 	adrp	x22, check_buf
 	add	x21, x21, 3448
 	add	x23, x22, :lo12:check_buf
-	b	.L383
+	b	.L391
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
 	.global	FlashEraseBlocks
@@ -3050,16 +3103,16 @@ FlashEraseBlocks:
 	add	x22, x0, x2
 	mov	w21, -1
 	ldrh	w23, [x19, 12]
-.L386:
+.L394:
 	cmp	x20, x22
-	bne	.L392
+	bne	.L400
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L392:
+.L400:
 	ldr	w0, [x20]
 	add	x2, x29, 72
 	add	x1, x29, 76
@@ -3073,17 +3126,17 @@ FlashEraseBlocks:
 	str	w0, [x20, -4]
 	ldrh	w0, [x19, 14]
 	cmp	w0, 4
-	bne	.L390
+	bne	.L398
 	ldrb	w0, [x29, 72]
 	ldr	x2, [x19, 3376]
 	ldr	w1, [x29, 76]
 	add	w1, w23, w1
 	blr	x2
-	cbz	w0, .L390
+	cbz	w0, .L398
 	str	w21, [x20, -4]
-.L390:
+.L398:
 	add	x20, x20, 32
-	b	.L386
+	b	.L394
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
 	.global	FtlFreeSysBlkQueueIn
@@ -3097,15 +3150,15 @@ FtlFreeSysBlkQueueIn:
 	sub	w2, w21, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcc	.L397
+	bcc	.L405
 	adrp	x0, .LANCHOR0
 	add	x20, x0, :lo12:.LANCHOR0
 	mov	x19, x0
 	ldrh	w2, [x20, 262]
 	cmp	w2, 1024
-	beq	.L397
+	beq	.L405
 	and	w1, w1, 65535
-	cbz	w1, .L399
+	cbz	w1, .L407
 	mov	w0, w21
 	bl	P2V_block_in_plane
 	and	w22, w0, 65535
@@ -3124,7 +3177,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	w0, [x20, 2640]
 	add	w0, w0, 1
 	str	w0, [x20, 2640]
-.L399:
+.L407:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 256
 	ldrh	w1, [x0, 6]
@@ -3136,7 +3189,7 @@ FtlFreeSysBlkQueueIn:
 	and	w1, w1, 1023
 	strh	w1, [x0, 4]
 	strh	w21, [x2, 8]
-.L397:
+.L405:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
@@ -3163,11 +3216,11 @@ FtlLowFormatEraseBlock:
 	mov	w21, 0
 	mov	w19, 0
 	str	w24, [x5, 3968]
-.L408:
+.L416:
 	ldrh	w0, [x5, 36]
 	cmp	w0, w10
-	bhi	.L412
-	cbz	w21, .L407
+	bhi	.L420
+	cbz	w21, .L415
 	ldr	x0, [x5, 3960]
 	mov	w2, w21
 	mov	w1, 0
@@ -3175,40 +3228,40 @@ FtlLowFormatEraseBlock:
 	mov	x22, 0
 	add	x25, x20, :lo12:.LANCHOR0
 	bl	FlashEraseBlocks
-.L416:
+.L424:
 	ldr	x0, [x25, 3960]
 	add	x1, x0, x22
 	ldr	w0, [x0, x22]
 	cmn	w0, #1
-	bne	.L415
+	bne	.L423
 	ldr	w0, [x1, 4]
 	add	w19, w19, 1
 	and	w19, w19, 65535
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
-.L415:
+.L423:
 	add	x22, x22, 32
 	cmp	x22, x21
-	bne	.L416
-	cbz	w23, .L429
+	bne	.L424
+	cbz	w23, .L437
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w25, 1
 	ldrh	w26, [x0, 108]
 	lsr	w0, w26, 2
 	str	w0, [x29, 124]
-.L417:
+.L425:
 	add	x27, x20, :lo12:.LANCHOR0
 	mov	w22, 0
 	add	x0, x27, 64
 	str	x0, [x29, 112]
-.L425:
+.L433:
 	mov	w5, 0
 	mov	w21, 0
-.L418:
+.L426:
 	ldrh	w0, [x27, 36]
 	cmp	w0, w5
-	bhi	.L421
-	cbz	w21, .L407
+	bhi	.L429
+	cbz	w21, .L415
 	ldr	x0, [x27, 3960]
 	mov	w1, w21
 	mov	w3, 1
@@ -3216,11 +3269,11 @@ FtlLowFormatEraseBlock:
 	mov	x28, 0
 	bl	FlashProgPages
 	ubfiz	x1, x21, 5, 16
-.L424:
+.L432:
 	ldr	x0, [x27, 3960]
 	add	x3, x0, x28
 	ldr	w0, [x0, x28]
-	cbz	w0, .L423
+	cbz	w0, .L431
 	ldr	w0, [x3, 4]
 	add	w19, w19, 1
 	str	x1, [x29, 104]
@@ -3228,40 +3281,40 @@ FtlLowFormatEraseBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29, 104]
-.L423:
+.L431:
 	add	x28, x28, 32
 	cmp	x1, x28
-	bne	.L424
+	bne	.L432
 	ldr	w0, [x29, 124]
 	add	w22, w22, w0
 	and	w22, w22, 65535
 	cmp	w26, w22
-	bhi	.L425
+	bhi	.L433
 	add	x26, x20, :lo12:.LANCHOR0
 	mov	x22, 0
-.L427:
-	cbz	w23, .L426
+.L435:
+	cbz	w23, .L434
 	ldr	x0, [x26, 3960]
 	add	x1, x0, x22
 	ldr	w0, [x0, x22]
-	cbnz	w0, .L426
+	cbnz	w0, .L434
 	ldr	w0, [x1, 4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L426:
+.L434:
 	add	x22, x22, 32
 	cmp	x22, x28
-	bne	.L427
+	bne	.L435
 	cmp	w24, 63
 	ccmp	w23, 0, 0, hi
-	beq	.L407
+	beq	.L415
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w2, w21
 	mov	w1, w25
 	ldr	x0, [x20, 3960]
 	bl	FlashEraseBlocks
-.L407:
+.L415:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -3270,7 +3323,7 @@ FtlLowFormatEraseBlock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L412:
+.L420:
 	ldr	x1, [x5, 3960]
 	ubfiz	x0, x10, 5, 16
 	str	wzr, [x1, x0]
@@ -3279,13 +3332,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w23, .L409
+	cbz	w23, .L417
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L410
-.L409:
+	cbnz	w0, .L418
+.L417:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L411
+	cbnz	w0, .L419
 	ldr	x0, [x5, 3960]
 	ubfiz	x2, x21, 5, 16
 	lsl	w6, w6, 10
@@ -3303,21 +3356,21 @@ FtlLowFormatEraseBlock:
 	sdiv	w0, w0, w9
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L410:
+.L418:
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L408
-.L411:
+	b	.L416
+.L419:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L410
-.L429:
+	b	.L418
+.L437:
 	mov	w0, 6
 	mov	w25, 0
 	mov	w26, 1
 	str	w0, [x29, 124]
-	b	.L417
-.L421:
+	b	.L425
+.L429:
 	ldr	x1, [x27, 3960]
 	ubfiz	x0, x5, 5, 16
 	str	wzr, [x1, x0]
@@ -3327,13 +3380,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w23, .L419
+	cbz	w23, .L427
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L420
-.L419:
+	cbnz	w0, .L428
+.L427:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L420
+	cbnz	w0, .L428
 	ldr	x0, [x27, 3960]
 	ubfiz	x2, x21, 5, 16
 	add	w6, w22, w6, lsl 10
@@ -3352,10 +3405,10 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x27, 3976]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L420:
+.L428:
 	add	w5, w5, 1
 	and	w5, w5, 65535
-	b	.L418
+	b	.L426
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
 	.global	FtlFreeSysBlkQueueOut
@@ -3368,12 +3421,12 @@ FtlFreeSysBlkQueueOut:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	x23, [sp, 48]
 	add	x20, x19, 256
-	adrp	x23, .LC80
-	add	x23, x23, :lo12:.LC80
+	adrp	x23, .LC84
+	add	x23, x23, :lo12:.LC84
 	stp	x21, x22, [sp, 32]
-.L451:
+.L459:
 	ldrh	w1, [x20, 6]
-	cbz	w1, .L452
+	cbz	w1, .L460
 	ldrh	w0, [x20, 2]
 	sub	w1, w1, #1
 	strh	w1, [x20, 6]
@@ -3403,26 +3456,26 @@ FtlFreeSysBlkQueueOut:
 	str	w0, [x19, 2640]
 	mov	w0, 65533
 	cmp	w0, w1, uxth
-	bcs	.L456
-	ldrh	w2, [x20, 6]
-	mov	w1, w21
-	mov	x0, x23
-	bl	printk
-	b	.L451
-.L452:
-	adrp	x0, .LC79
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC79
-	bl	printk
-.L455:
-	b	.L455
-.L456:
+	bcc	.L461
 	mov	w0, w21
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
+.L460:
+	adrp	x0, .LC83
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC83
+	bl	sftl_printk
+.L463:
+	b	.L463
+.L461:
+	ldrh	w2, [x20, 6]
+	mov	w1, w21
+	mov	x0, x23
+	bl	sftl_printk
+	b	.L459
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
 	.global	ftl_map_blk_alloc_new_blk
@@ -3436,27 +3489,27 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w1, [x0, 10]
 	ldr	x0, [x0, 16]
-.L459:
+.L467:
 	cmp	w20, w1
-	beq	.L463
+	beq	.L471
 	mov	x21, x0
 	ldrh	w2, [x0], 2
-	cbnz	w2, .L460
+	cbnz	w2, .L468
 	bl	FtlFreeSysBlkQueueOut
 	and	w1, w0, 65535
 	strh	w0, [x21]
 	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcs	.L461
+	bcs	.L469
 	adrp	x0, .LANCHOR0+262
 	ldrh	w2, [x0, #:lo12:.LANCHOR0+262]
-	adrp	x0, .LC81
-	add	x0, x0, :lo12:.LC81
-	bl	printk
-.L462:
-	b	.L462
-.L461:
+	adrp	x0, .LC85
+	add	x0, x0, :lo12:.LC85
+	bl	sftl_printk
+.L470:
+	b	.L470
+.L469:
 	ldr	w0, [x19, 48]
 	strh	wzr, [x19, 2]
 	add	w0, w0, 1
@@ -3465,27 +3518,27 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
-.L463:
+.L471:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L465
+	bhi	.L473
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 581
 	add	x1, x1, 192
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L465:
+	bl	sftl_printk
+.L473:
 	mov	w0, 0
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L460:
+.L468:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L459
+	b	.L467
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
 	.global	ftl_memset
@@ -3701,117 +3754,117 @@ FtlMemInit:
 	str	x0, [x19, 192]
 	mov	w2, w4
 	mov	x0, x20
-.L470:
+.L478:
 	cmp	w1, w6
-	bcc	.L471
+	bcc	.L479
 	mov	w2, 8
 	add	x4, x0, :lo12:.LANCHOR0
 	sub	w2, w2, w1
 	add	x4, x4, 160
 	add	x2, x2, 1
 	mov	x3, 0
-.L472:
+.L480:
 	add	x3, x3, 1
 	cmp	x3, x2
-	bne	.L473
+	bne	.L481
 	add	x2, x0, :lo12:.LANCHOR0
 	ldr	x1, [x2, 4088]
-	cbnz	x1, .L474
-.L476:
+	cbnz	x1, .L482
+.L484:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 224
-	adrp	x0, .LC82
-	add	x0, x0, :lo12:.LC82
-	bl	printk
+	adrp	x0, .LC86
+	add	x0, x0, :lo12:.LC86
+	bl	sftl_printk
 	mov	w0, -1
-.L469:
+.L477:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L471:
+.L479:
 	ldr	x3, [x19, 192]
 	add	w1, w1, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x5], 8
-	b	.L470
-.L473:
+	b	.L478
+.L481:
 	add	x5, x1, x3
 	add	x5, x4, x5, lsl 3
 	str	xzr, [x5, 24]
-	b	.L472
-.L474:
+	b	.L480
+.L482:
 	add	x1, x21, :lo12:.LANCHOR3
 	ldr	x3, [x1, -256]
-	cbz	x3, .L476
+	cbz	x3, .L484
 	ldr	x3, [x1, -224]
-	cbz	x3, .L476
+	cbz	x3, .L484
 	ldr	x3, [x1, -216]
-	cbz	x3, .L476
+	cbz	x3, .L484
 	ldr	x3, [x2, 2568]
-	cbz	x3, .L476
+	cbz	x3, .L484
 	ldr	x1, [x1, -208]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x2, 2360]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x2, 192]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x2, 2376]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3296]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 3312]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 4016]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 4032]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 3960]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 3280]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 4024]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 3432]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x2, [x1, 4040]
-	cbz	x2, .L476
+	cbz	x2, .L484
 	ldr	x1, [x1, 4048]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3264]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3992]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3976]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3256]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3440]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3984]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 3272]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 2384]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, 4064]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x0, [x0, 152]
-	cbz	x0, .L476
+	cbz	x0, .L484
 	adrp	x0, .LANCHOR3
 	add	x0, x0, :lo12:.LANCHOR3
 	ldr	x1, [x0, -248]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x1, [x0, -240]
-	cbz	x1, .L476
+	cbz	x1, .L484
 	ldr	x0, [x0, -232]
-	cbz	x0, .L476
+	cbz	x0, .L484
 	mov	w0, 0
-	b	.L469
+	b	.L477
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -3836,20 +3889,20 @@ FtlBbt2Bitmap:
 	mov	w1, 0
 	mov	x0, x21
 	bl	ftl_memset
-.L574:
+.L582:
 	ldrh	w0, [x22, x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L571
+	beq	.L579
 	ldrh	w1, [x23, 102]
 	cmp	w1, w0
-	bhi	.L573
+	bhi	.L581
 	adrp	x0, .LC1
 	mov	w2, 74
 	mov	x1, x20
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L573:
+	bl	sftl_printk
+.L581:
 	ldrh	w2, [x22, x19]
 	mov	w1, 1
 	add	x19, x19, 2
@@ -3860,8 +3913,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x21, x0]
 	orr	w1, w1, w2
 	str	w1, [x21, x0]
-	bne	.L574
-.L571:
+	bne	.L582
+.L579:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldr	x23, [sp, 48]
@@ -3923,21 +3976,21 @@ load_l2p_region:
 	stp	x25, x26, [sp, 64]
 	ldrh	w1, [x1, 140]
 	cmp	w1, w20
-	bcs	.L583
+	bcs	.L591
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 492
 	add	x1, x1, 256
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L583:
+	bl	sftl_printk
+.L591:
 	adrp	x22, .LANCHOR3
 	add	x22, x22, :lo12:.LANCHOR3
 	ubfiz	x0, x20, 2, 16
 	ldr	x1, [x22, -224]
 	ldr	w25, [x1, x0]
-	cbnz	w25, .L584
+	cbnz	w25, .L592
 	add	x24, x24, :lo12:.LANCHOR0
 	lsl	x19, x19, 4
 	mov	w1, 255
@@ -3951,7 +4004,7 @@ load_l2p_region:
 	ldr	x0, [x24, 2568]
 	add	x19, x0, x19
 	str	wzr, [x19, 4]
-.L585:
+.L593:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -3959,7 +4012,7 @@ load_l2p_region:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L584:
+.L592:
 	add	x23, x24, :lo12:.LANCHOR0
 	lsl	x19, x19, 4
 	add	x21, x23, 3400
@@ -3977,43 +4030,43 @@ load_l2p_region:
 	ldr	x26, [x23, 3416]
 	ldrh	w0, [x26, 8]
 	cmp	w0, w20
-	beq	.L586
+	beq	.L594
 	mov	w2, w25
 	mov	w1, w20
-	adrp	x0, .LC83
-	add	x0, x0, :lo12:.LC83
-	bl	printk
+	adrp	x0, .LC87
+	add	x0, x0, :lo12:.LC87
+	bl	sftl_printk
 	ldr	x1, [x23, 3416]
 	mov	w3, 4
-	adrp	x0, .LC84
+	adrp	x0, .LC88
 	mov	w2, w3
-	add	x0, x0, :lo12:.LC84
+	add	x0, x0, :lo12:.LC88
 	bl	rknand_print_hex
 	ldrh	w3, [x23, 140]
-	adrp	x0, .LC85
+	adrp	x0, .LC89
 	ldr	x1, [x22, -224]
 	mov	w2, 4
-	add	x0, x0, :lo12:.LC85
+	add	x0, x0, :lo12:.LC89
 	bl	rknand_print_hex
-.L586:
+.L594:
 	ldrh	w0, [x26, 8]
 	cmp	w0, w20
-	beq	.L587
+	beq	.L595
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 513
 	add	x1, x1, 256
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L587:
+	bl	sftl_printk
+.L595:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	x1, [x0, 2568]
 	add	x1, x1, x19
 	str	wzr, [x1, 4]
 	ldr	x0, [x0, 2568]
 	strh	w20, [x0, x19]
-	b	.L585
+	b	.L593
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
 	.global	ftl_free_no_use_map_blk
@@ -4034,19 +4087,19 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L590:
+.L598:
 	ldrh	w1, [x19, 6]
 	cmp	w1, w0
-	bhi	.L594
+	bhi	.L602
 	ldrh	w26, [x21]
 	adrp	x24, .LANCHOR0
 	add	x24, x24, :lo12:.LANCHOR0
 	mov	w25, 0
 	mov	w20, 0
-.L595:
+.L603:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L599
+	bhi	.L607
 	mov	w0, w25
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -4054,61 +4107,61 @@ ftl_free_no_use_map_blk:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L594:
+.L602:
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20, x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L591:
+.L599:
 	ldrh	w3, [x19, 10]
 	cmp	w3, w1
-	bhi	.L593
+	bhi	.L601
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L590
-.L593:
+	b	.L598
+.L601:
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x23, x3]
 	cmp	w4, w2
-	bne	.L592
+	bne	.L600
 	ldrh	w4, [x21, x3]
 	add	w4, w4, 1
 	strh	w4, [x21, x3]
-.L592:
+.L600:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L591
-.L599:
+	b	.L599
+.L607:
 	ldrh	w0, [x19]
 	uxtw	x22, w20
 	cmp	w0, w20
-	bne	.L596
+	bne	.L604
 	ldrh	w0, [x24, 108]
 	ldrh	w1, [x19, 2]
 	cmp	w1, w0
-	bcs	.L596
+	bcs	.L604
 	strh	w0, [x21, x22, lsl 1]
-.L596:
+.L604:
 	lsl	x22, x22, 1
 	ldrh	w0, [x21, x22]
 	cmp	w26, w0
-	bls	.L597
+	bls	.L605
 	mov	w25, w20
 	mov	w26, w0
-.L597:
-	cbnz	w0, .L598
+.L605:
+	cbnz	w0, .L606
 	ldrh	w0, [x23, x22]
-	cbz	w0, .L598
+	cbz	w0, .L606
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	wzr, [x23, x22]
 	ldrh	w0, [x19, 8]
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
-.L598:
+.L606:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L595
+	b	.L603
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
 	.global	Ftl_write_map_blk_to_last_page
@@ -4124,17 +4177,17 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x20, [x0, 16]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	bne	.L605
+	bne	.L613
 	ldrh	w0, [x19, 8]
-	cbz	w0, .L606
+	cbz	w0, .L614
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 641
 	add	x1, x1, 272
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L606:
+	bl	sftl_printk
+.L614:
 	ldrh	w0, [x19, 8]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
@@ -4145,14 +4198,14 @@ Ftl_write_map_blk_to_last_page:
 	strh	wzr, [x19]
 	add	w0, w0, 1
 	str	w0, [x19, 48]
-.L607:
+.L615:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L605:
+.L613:
 	ubfiz	x0, x0, 1, 16
 	adrp	x21, .LANCHOR0
 	ldr	w1, [x19, 48]
@@ -4179,10 +4232,10 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	w0, 0
 	mov	w1, 0
-.L608:
+.L616:
 	ldrh	w2, [x19, 6]
 	cmp	w2, w1
-	bhi	.L610
+	bhi	.L618
 	add	x0, x21, :lo12:.LANCHOR0
 	mov	w2, 1
 	mov	w3, 0
@@ -4194,12 +4247,12 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19, 2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-	b	.L607
-.L610:
+	b	.L615
+.L618:
 	ubfiz	x2, x1, 2, 16
 	ldr	w3, [x23, x2]
 	cmp	w22, w3, lsr 10
-	bne	.L609
+	bne	.L617
 	add	w0, w0, 1
 	ldr	x4, [x20, 3432]
 	and	w0, w0, 65535
@@ -4209,10 +4262,10 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x2, [x20, 3432]
 	add	x2, x2, x3
 	str	w4, [x2, 4]
-.L609:
+.L617:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L608
+	b	.L616
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
 	.global	FtlMapWritePage
@@ -4235,7 +4288,7 @@ FtlMapWritePage:
 	add	x22, x22, :lo12:.LANCHOR1
 	add	x20, x24, 3400
 	mov	w21, 0
-.L616:
+.L624:
 	add	x0, x23, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2604]
 	add	w1, w1, 1
@@ -4244,35 +4297,35 @@ FtlMapWritePage:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	bge	.L617
+	bge	.L625
 	ldrh	w1, [x19]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L618
-.L617:
+	bne	.L626
+.L625:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L618:
+.L626:
 	ldrh	w1, [x19]
 	ldr	x0, [x19, 16]
 	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L619
+	cbnz	w0, .L627
 	adrp	x0, .LC1
 	mov	w2, 699
 	add	x1, x22, 304
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L619:
+	bl	sftl_printk
+.L627:
 	ldrh	w1, [x19]
 	ldrh	w0, [x19, 10]
 	cmp	w1, w0
-	bcc	.L620
+	bcc	.L628
 	adrp	x0, .LC1
 	mov	w2, 700
 	add	x1, x22, 304
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L620:
+	bl	sftl_printk
+.L628:
 	ldrh	w1, [x19]
 	mov	w2, 16
 	ldr	x0, [x19, 16]
@@ -4303,38 +4356,38 @@ FtlMapWritePage:
 	strh	w0, [x19, 2]
 	ldr	w1, [x20]
 	cmn	w1, #1
-	bne	.L621
+	bne	.L629
 	ldr	w1, [x20, 4]
-	adrp	x0, .LC86
-	add	x0, x0, :lo12:.LC86
+	adrp	x0, .LC90
+	add	x0, x0, :lo12:.LC90
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	bl	printk
+	bl	sftl_printk
 	ldrh	w0, [x19, 2]
 	cmp	w0, 2
-	bhi	.L622
+	bhi	.L630
 	ldrh	w0, [x24, 108]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2]
-.L622:
+.L630:
 	cmp	w21, 3
-	bls	.L623
+	bls	.L631
 	add	x25, x25, :lo12:.LANCHOR0
-	adrp	x0, .LC87
+	adrp	x0, .LC91
 	mov	w2, w21
-	add	x0, x0, :lo12:.LC87
+	add	x0, x0, :lo12:.LC91
 	ldr	w1, [x25, 3404]
-	bl	printk
-.L624:
-	b	.L624
-.L623:
+	bl	sftl_printk
+.L632:
+	b	.L632
+.L631:
 	ldr	w0, [x19, 52]
-	cbz	w0, .L616
-.L633:
-	b	.L633
-.L621:
+	cbz	w0, .L624
+.L641:
+	b	.L641
+.L629:
 	cmp	w0, 1
-	beq	.L616
+	beq	.L624
 	ldr	x0, [x19, 40]
 	ldr	w1, [x20, 4]
 	str	w1, [x0, w26, uxtw 2]
@@ -4367,12 +4420,12 @@ ftl_map_blk_gc:
 	ldrh	w2, [x19, 8]
 	sub	w1, w1, #4
 	cmp	w2, w1
-	blt	.L636
+	blt	.L644
 	ubfiz	x0, x0, 1, 16
 	ldrh	w24, [x20, x0]
-	cbz	w24, .L636
+	cbz	w24, .L644
 	ldr	w1, [x19, 52]
-	cbnz	w1, .L636
+	cbnz	w1, .L644
 	mov	w1, 1
 	str	w1, [x19, 52]
 	strh	wzr, [x20, x0]
@@ -4383,33 +4436,33 @@ ftl_map_blk_gc:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 108]
 	cmp	w1, w0
-	bcc	.L637
+	bcc	.L645
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L637:
+.L645:
 	add	x26, x22, :lo12:.LANCHOR0
 	adrp	x23, .LANCHOR1
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x21, x26, 3400
 	add	x23, x23, 320
 	mov	w20, 0
-.L638:
+.L646:
 	ldrh	w0, [x19, 6]
 	cmp	w0, w20
-	bhi	.L642
+	bhi	.L650
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19, 52]
-.L636:
+.L644:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x22, 108]
 	cmp	w1, w0
-	bcc	.L643
+	bcc	.L651
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L643:
+.L651:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -4418,11 +4471,11 @@ ftl_map_blk_gc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L642:
+.L650:
 	ubfiz	x27, x20, 2, 16
 	ldr	w0, [x25, x27]
 	cmp	w24, w0, lsr 10
-	bne	.L639
+	bne	.L647
 	ldr	x28, [x26, 3440]
 	mov	w2, 1
 	ldr	x0, [x26, 4040]
@@ -4434,27 +4487,27 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	w0, [x28, 8]
 	cmp	w0, w20
-	beq	.L640
+	beq	.L648
 	adrp	x0, .LC1
 	mov	w2, 613
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L640:
+	bl	sftl_printk
+.L648:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L641
+	bne	.L649
 	str	wzr, [x25, x27]
-.L639:
+.L647:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L638
-.L641:
+	b	.L646
+.L649:
 	ldr	x2, [x21, 8]
 	mov	w1, w20
 	mov	x0, x19
 	bl	FtlMapWritePage
-	b	.L639
+	b	.L647
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
 	.global	flush_l2p_region
@@ -4509,23 +4562,23 @@ log2phys:
 	and	w19, w19, w0
 	cmp	w0, w1
 	and	x19, x19, 65535
-	bcc	.L651
+	bcc	.L659
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 808
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L651:
+	bl	sftl_printk
+.L659:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 142]
 	ldr	x2, [x0, 2568]
 	mov	x0, 0
-.L652:
+.L660:
 	and	x20, x0, 65535
 	cmp	w20, w1
-	bcc	.L657
+	bcc	.L665
 	bl	select_l2p_ram_region
 	and	x20, x0, 65535
 	add	x2, x24, :lo12:.LANCHOR0
@@ -4536,39 +4589,39 @@ log2phys:
 	ldrh	w2, [x2, x1]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L658
+	beq	.L666
 	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L658
+	tbz	w1, #31, .L666
 	bl	flush_l2p_region
-.L658:
+.L666:
 	mov	w1, w25
 	mov	w0, w21
 	bl	load_l2p_region
-	b	.L653
-.L657:
+	b	.L661
+.L665:
 	add	x0, x0, 1
 	add	x3, x2, x0, lsl 4
 	ldrh	w3, [x3, -16]
 	cmp	w3, w21
-	bne	.L652
-.L653:
-	cbnz	w23, .L654
+	bne	.L660
+.L661:
+	cbnz	w23, .L662
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	x0, [x0, 2568]
 	add	x0, x0, x20, lsl 4
 	ldr	x0, [x0, 8]
 	ldr	w0, [x0, x19, lsl 2]
 	str	w0, [x22]
-.L655:
+.L663:
 	add	x24, x24, :lo12:.LANCHOR0
 	ldr	x0, [x24, 2568]
 	add	x20, x0, x20, lsl 4
 	ldr	w0, [x20, 4]
 	cmn	w0, #1
-	beq	.L660
+	beq	.L668
 	add	w0, w0, 1
 	str	w0, [x20, 4]
-.L660:
+.L668:
 	mov	w0, 0
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -4576,7 +4629,7 @@ log2phys:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L654:
+.L662:
 	add	x2, x24, :lo12:.LANCHOR0
 	lsl	x0, x20, 4
 	mov	x1, x0
@@ -4591,7 +4644,7 @@ log2phys:
 	ldr	w1, [x0, 4]
 	orr	w1, w1, -2147483648
 	str	w1, [x0, 4]
-	b	.L655
+	b	.L663
 	.size	log2phys, .-log2phys
 	.align	2
 	.global	FtlReUsePrevPpa
@@ -4612,9 +4665,9 @@ FtlReUsePrevPpa:
 	ubfiz	x20, x0, 1, 16
 	ldr	x3, [x2, 2376]
 	ldrh	w1, [x3, x20]
-	cbnz	w1, .L666
+	cbnz	w1, .L674
 	ldr	x19, [x2, 2408]
-	cbz	x19, .L667
+	cbz	x19, .L675
 	ldrh	w3, [x2, 2416]
 	mov	x4, -6148914691236517206
 	ldr	x2, [x2, 2360]
@@ -4625,25 +4678,25 @@ FtlReUsePrevPpa:
 	mul	x19, x19, x4
 	mov	w4, 6
 	and	w19, w19, 65535
-.L668:
+.L676:
 	cmp	w1, w3
-	beq	.L667
+	beq	.L675
 	cmp	w19, w0
-	bne	.L669
+	bne	.L677
 	add	x23, x22, :lo12:.LANCHOR0
 	mov	w1, w19
 	add	x0, x23, 2408
 	bl	List_remove_node
 	ldrh	w0, [x23, 2416]
-	cbnz	w0, .L670
+	cbnz	w0, .L678
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1688
 	add	x1, x1, 352
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L670:
+	bl	sftl_printk
+.L678:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 2416]
 	sub	w0, w0, #1
@@ -4654,7 +4707,7 @@ FtlReUsePrevPpa:
 	ldrh	w0, [x1, x20]
 	add	w0, w0, 1
 	strh	w0, [x1, x20]
-.L667:
+.L675:
 	add	x1, x29, 76
 	mov	w2, 1
 	mov	w0, w21
@@ -4664,27 +4717,27 @@ FtlReUsePrevPpa:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L669:
+.L677:
 	umull	x19, w19, w4
 	ldrh	w19, [x2, x19]
 	cmp	w19, w5
-	beq	.L667
+	beq	.L675
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L668
-.L666:
+	b	.L676
+.L674:
 	add	w1, w1, 1
 	strh	w1, [x3, x20]
-	b	.L667
+	b	.L675
 	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
 	.global	ftl_scan_all_data
 	.type	ftl_scan_all_data, %function
 ftl_scan_all_data:
 	sub	sp, sp, #96
-	adrp	x0, .LC88
+	adrp	x0, .LC92
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC88
+	add	x0, x0, :lo12:.LC92
 	stp	x29, x30, [sp, 16]
 	add	x29, sp, 16
 	stp	x21, x22, [sp, 48]
@@ -4694,34 +4747,34 @@ ftl_scan_all_data:
 	str	x23, [sp, 64]
 	mov	w20, 0
 	add	x19, x21, 3400
-	bl	printk
-.L677:
+	bl	sftl_printk
+.L685:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w0, [x0, 2584]
 	cmp	w20, w0
-	bcc	.L683
+	bcc	.L691
 	ldp	x19, x20, [sp, 32]
 	ldp	x21, x22, [sp, 48]
 	ldp	x29, x30, [sp, 16]
 	ldr	x23, [sp, 64]
 	add	sp, sp, 96
 	ret
-.L683:
+.L691:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w20
 	bl	log2phys
 	tst	x20, 2047
-	bne	.L678
+	bne	.L686
 	ldr	w2, [x29, 76]
-	adrp	x0, .LC89
+	adrp	x0, .LC93
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC89
-	bl	printk
-.L678:
+	add	x0, x0, :lo12:.LC93
+	bl	sftl_printk
+.L686:
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L680
+	beq	.L688
 	ldr	x23, [x21, 3440]
 	mov	w2, 0
 	stp	wzr, w0, [x19]
@@ -4735,25 +4788,25 @@ ftl_scan_all_data:
 	ldr	w0, [x19]
 	cmp	w0, 256
 	ccmn	w0, #1, 4, ne
-	beq	.L681
+	beq	.L689
 	ldr	w0, [x23, 8]
 	cmp	w20, w0
-	beq	.L680
-.L681:
+	beq	.L688
+.L689:
 	ldp	x1, x0, [x19, 8]
 	ldr	w2, [x1, 4]
 	str	w2, [sp]
 	ldp	w3, w4, [x0]
 	ldp	w5, w6, [x0, 8]
-	adrp	x0, .LC90
+	adrp	x0, .LC94
 	ldr	w7, [x1]
-	add	x0, x0, :lo12:.LC90
+	add	x0, x0, :lo12:.LC94
 	ldr	w2, [x19, 4]
 	mov	w1, w20
-	bl	printk
-.L680:
+	bl	sftl_printk
+.L688:
 	add	w20, w20, 1
-	b	.L677
+	b	.L685
 	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	2
 	.global	FtlReadRefresh
@@ -4763,22 +4816,22 @@ FtlReadRefresh:
 	add	x1, x0, :lo12:.LANCHOR0
 	add	x2, x1, 2720
 	ldr	w3, [x2, 80]
-	cbz	w3, .L686
+	cbz	w3, .L694
 	ldr	w0, [x1, 2584]
 	ldr	w3, [x2, 84]
 	cmp	w3, w0
-	bcs	.L687
+	bcs	.L695
 	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x1
 	mov	w20, 2048
 	str	x21, [sp, 32]
-.L692:
+.L700:
 	ldr	w1, [x19, 2584]
 	ldr	w0, [x19, 2804]
 	cmp	w0, w1
-	bcs	.L689
+	bcs	.L697
 	add	x1, x29, 60
 	mov	w2, 0
 	bl	log2phys
@@ -4787,7 +4840,7 @@ FtlReadRefresh:
 	add	w0, w0, 1
 	str	w0, [x19, 2804]
 	cmn	w1, #1
-	beq	.L690
+	beq	.L698
 	str	w0, [x29, 88]
 	adrp	x0, ftl_temp_buf
 	add	x0, x0, :lo12:ftl_temp_buf
@@ -4802,57 +4855,57 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29, 64]
 	cmp	w0, 256
-	bne	.L689
+	bne	.L697
 	ldr	w0, [x29, 60]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L689:
+.L697:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, -1
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 160
 	ret
-.L690:
+.L698:
 	subs	w20, w20, #1
-	bne	.L692
-	b	.L689
-.L687:
+	bne	.L700
+	b	.L697
+.L695:
 	ldr	w0, [x1, 2588]
 	stp	w0, wzr, [x2, 76]
 	str	wzr, [x2, 84]
-.L696:
+.L704:
 	mov	w0, 0
 	ret
-.L686:
+.L694:
 	ldr	w3, [x1, 2588]
 	ldr	w5, [x2, 76]
 	add	w2, w3, 1048576
 	cmp	w5, w2
-	bhi	.L695
+	bhi	.L703
 	ldr	w2, [x1, 2644]
 	lsr	w4, w2, 10
 	mov	w2, 33554432
 	asr	w2, w2, w4
 	add	w2, w2, w5
 	cmp	w3, w2
-	bhi	.L695
+	bhi	.L703
 	ldrb	w1, [x1, 2340]
-	cbnz	w1, .L696
-.L695:
+	cbnz	w1, .L704
+.L703:
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w1, 1
 	str	w3, [x0, 2796]
 	str	w1, [x0, 2800]
 	str	wzr, [x0, 2804]
-	b	.L696
+	b	.L704
 	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
 	.global	FtlMapBlkWriteDump_data
 	.type	FtlMapBlkWriteDump_data, %function
 FtlMapBlkWriteDump_data:
 	ldr	w1, [x0, 56]
-	cbz	w1, .L710
+	cbz	w1, .L718
 	stp	x29, x30, [sp, -48]!
 	adrp	x1, .LANCHOR0
 	add	x2, x1, :lo12:.LANCHOR0
@@ -4873,11 +4926,11 @@ FtlMapBlkWriteDump_data:
 	str	wzr, [x19, 56]
 	ldr	w4, [x5, x4]
 	str	w4, [x0, 4]
-	cbz	w4, .L704
+	cbz	w4, .L712
 	mov	w2, 1
 	mov	w1, w2
 	bl	FlashReadPages
-.L705:
+.L713:
 	add	x1, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	ldr	x2, [x1, 3408]
@@ -4887,13 +4940,13 @@ FtlMapBlkWriteDump_data:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L704:
+.L712:
 	ldrh	w2, [x2, 114]
 	mov	w1, 255
 	mov	x0, x3
 	bl	ftl_memset
-	b	.L705
-.L710:
+	b	.L713
+.L718:
 	ret
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
@@ -4941,24 +4994,24 @@ FtlScanSysBlk:
 	add	x0, x19, 2656
 	bl	ftl_memset
 	ldrh	w24, [x19, 44]
-.L714:
+.L722:
 	ldrh	w0, [x19, 46]
 	cmp	w0, w24
-	bls	.L754
+	bls	.L762
 	ldrh	w9, [x19, 36]
 	mov	x5, 0
 	ldrh	w8, [x19, 116]
 	mov	w21, 0
 	add	x7, x19, 64
 	mov	w6, 4
-	b	.L755
-.L716:
+	b	.L763
+.L724:
 	ldrb	w0, [x7, x5]
 	mov	w1, w24
 	bl	V2P_block
 	and	w4, w0, 65535
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L715
+	cbnz	w0, .L723
 	ldr	x0, [x19, 4016]
 	ubfiz	x2, x21, 5, 16
 	lsl	w4, w4, 10
@@ -4975,17 +5028,17 @@ FtlScanSysBlk:
 	sdiv	w0, w0, w6
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L715:
+.L723:
 	add	x5, x5, 1
-.L755:
+.L763:
 	cmp	w9, w5, uxth
-	bhi	.L716
-	cbnz	w21, .L717
-.L753:
+	bhi	.L724
+	cbnz	w21, .L725
+.L761:
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L714
-.L717:
+	b	.L722
+.L725:
 	ldr	x0, [x19, 4016]
 	mov	w1, w21
 	mov	w2, 1
@@ -4993,7 +5046,7 @@ FtlScanSysBlk:
 	mov	x23, 0
 	add	x28, x19, 2656
 	bl	FlashReadPages
-.L752:
+.L760:
 	ldr	x0, [x19, 4016]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
@@ -5001,10 +5054,10 @@ FtlScanSysBlk:
 	cmn	w0, #1
 	ldr	x27, [x1, 16]
 	ubfx	x26, x26, 10, 16
-	bne	.L720
+	bne	.L728
 	mov	w3, 16
 	mov	w4, 65535
-.L722:
+.L730:
 	ldr	x0, [x19, 4016]
 	mov	w2, 1
 	stp	w4, w3, [x29, 104]
@@ -5020,72 +5073,72 @@ FtlScanSysBlk:
 	ldrh	w0, [x27]
 	cmp	w0, w4
 	ldr	x0, [x19, 4016]
-	bne	.L719
+	bne	.L727
 	mov	w1, -1
 	str	w1, [x0, x23]
 	ldr	x0, [x19, 4016]
 	ldr	w0, [x0, x23]
 	cmp	w0, w1
-	bne	.L720
-.L721:
+	bne	.L728
+.L729:
 	mov	w1, 0
 	mov	w0, w26
 	bl	FtlFreeSysBlkQueueIn
-	b	.L725
-.L719:
+	b	.L733
+.L727:
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L720
+	bne	.L728
 	sub	w3, w3, #1
 	ands	w3, w3, 65535
-	bne	.L722
-	b	.L721
-.L720:
+	bne	.L730
+	b	.L729
+.L728:
 	ldr	w1, [x19, 2620]
 	ldr	w0, [x27, 4]
 	cmn	w1, #1
-	beq	.L723
+	beq	.L731
 	cmp	w1, w0
-	bhi	.L724
-.L723:
+	bhi	.L732
+.L731:
 	cmn	w0, #1
-	beq	.L724
+	beq	.L732
 	add	w1, w0, 1
 	str	w1, [x19, 2620]
-.L724:
+.L732:
 	ldrh	w1, [x27]
 	mov	w2, 61604
 	cmp	w1, w2
-	beq	.L726
-	bhi	.L727
+	beq	.L734
+	bhi	.L735
 	mov	w0, 61574
 	cmp	w1, w0
-	beq	.L728
-.L725:
+	beq	.L736
+.L733:
 	add	x23, x23, 32
 	cmp	x21, x23
-	bne	.L752
-	b	.L753
-.L727:
+	bne	.L760
+	b	.L761
+.L735:
 	mov	w0, 61634
 	cmp	w1, w0
-	beq	.L729
+	beq	.L737
 	mov	w0, 65535
 	cmp	w1, w0
-	beq	.L721
-	b	.L725
-.L729:
+	beq	.L729
+	b	.L733
+.L737:
 	add	x0, x20, :lo12:.LANCHOR3
 	ldrh	w1, [x0, -128]
 	ldr	w0, [x19, 132]
 	cmp	w1, w0
-	bls	.L731
+	bls	.L739
 	adrp	x0, .LC1
 	mov	w2, 1211
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L731:
+	bl	sftl_printk
+.L739:
 	add	x4, x20, :lo12:.LANCHOR3
 	ldr	w3, [x19, 132]
 	and	w2, w3, 65535
@@ -5096,45 +5149,45 @@ FtlScanSysBlk:
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	sxth	w2, w2
-.L732:
+.L740:
 	cmp	w0, w2
-	bgt	.L738
-	tbz	w0, #31, .L772
-	b	.L725
-.L738:
+	bgt	.L746
+	tbz	w0, #31, .L780
+	b	.L733
+.L746:
 	sxtw	x5, w0
 	ldr	w8, [x27, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L733
+	bls	.L741
 	ldr	w2, [x4]
-	cbnz	w2, .L734
+	cbnz	w2, .L742
 	cmp	w3, w1
-	beq	.L734
+	beq	.L742
 	add	x2, x20, :lo12:.LANCHOR3
 	add	w1, w1, 1
 	strh	w1, [x2, -128]
-.L734:
+.L742:
 	add	x7, x20, :lo12:.LANCHOR3
 	mov	w1, 0
-.L735:
+.L743:
 	cmp	w1, w0
-	bne	.L736
+	bne	.L744
 	add	x1, x20, :lo12:.LANCHOR3
 	ldr	w3, [x27, 4]
 	ldr	x2, [x1, -216]
 	str	w3, [x2, x6]
 	ldr	x2, [x19, 4088]
 	strh	w26, [x2, x5, lsl 1]
-	tbnz	w0, #31, .L725
+	tbnz	w0, #31, .L733
 	ldrh	w1, [x1, -128]
 	ldr	w2, [x19, 132]
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	cmp	w0, w2, sxth
-	bgt	.L725
-.L772:
+	bgt	.L733
+.L780:
 	add	x2, x20, :lo12:.LANCHOR3
 	add	w1, w1, 1
 	ldr	w3, [x27, 4]
@@ -5142,10 +5195,10 @@ FtlScanSysBlk:
 	ldr	x1, [x2, -216]
 	str	w3, [x1, x0, lsl 2]
 	ldr	x1, [x19, 4088]
-.L790:
+.L798:
 	strh	w26, [x1, x0, lsl 1]
-	b	.L725
-.L736:
+	b	.L733
+.L744:
 	ldr	x4, [x7, -216]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -5159,22 +5212,22 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L735
-.L733:
+	b	.L743
+.L741:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L732
-.L728:
+	b	.L740
+.L736:
 	ldrh	w1, [x19, 148]
 	ldrh	w0, [x19, 124]
 	cmp	w1, w0
-	bls	.L741
+	bls	.L749
 	adrp	x0, .LC1
 	mov	w2, 1252
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L741:
+	bl	sftl_printk
+.L749:
 	add	x4, x20, :lo12:.LANCHOR3
 	ldrh	w3, [x19, 124]
 	ldrh	w1, [x19, 148]
@@ -5182,41 +5235,41 @@ FtlScanSysBlk:
 	ldr	x4, [x4, -240]
 	sxth	x0, w2
 	sub	w2, w2, w1
-.L742:
+.L750:
 	cmp	w0, w2
-	ble	.L747
+	ble	.L755
 	sxtw	x5, w0
 	ldr	w8, [x27, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L743
+	bls	.L751
 	ldr	w2, [x4]
-	cbnz	w2, .L744
+	cbnz	w2, .L752
 	cmp	w3, w1
-	beq	.L744
+	beq	.L752
 	add	w1, w1, 1
 	strh	w1, [x19, 148]
-.L744:
+.L752:
 	add	x7, x20, :lo12:.LANCHOR3
 	mov	w1, 0
-.L745:
+.L753:
 	cmp	w1, w0
-	bne	.L746
+	bne	.L754
 	add	x1, x20, :lo12:.LANCHOR3
 	ldr	w2, [x27, 4]
 	ldr	x1, [x1, -240]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 152]
 	strh	w26, [x1, x5, lsl 1]
-.L747:
-	tbnz	w0, #31, .L725
+.L755:
+	tbnz	w0, #31, .L733
 	ldrh	w1, [x19, 124]
 	ldrh	w2, [x19, 148]
 	sub	w1, w1, #1
 	sub	w1, w1, w2
 	cmp	w0, w1, sxth
-	bgt	.L725
+	bgt	.L733
 	add	x1, x20, :lo12:.LANCHOR3
 	add	w2, w2, 1
 	strh	w2, [x19, 148]
@@ -5224,8 +5277,8 @@ FtlScanSysBlk:
 	ldr	x1, [x1, -240]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 152]
-	b	.L790
-.L746:
+	b	.L798
+.L754:
 	ldr	x4, [x7, -240]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -5239,63 +5292,63 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L745
-.L743:
+	b	.L753
+.L751:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L742
-.L726:
+	b	.L750
+.L734:
 	ldrh	w2, [x28]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L749
+	bne	.L757
 	strh	w26, [x28]
-.L791:
+.L799:
 	str	w0, [x28, 8]
-	b	.L725
-.L749:
+	b	.L733
+.L757:
 	ldrh	w0, [x28, 4]
 	cmp	w0, w1
-	beq	.L750
+	beq	.L758
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L750:
+.L758:
 	ldr	w0, [x27, 4]
 	ldr	w1, [x28, 8]
 	cmp	w1, w0
-	bcs	.L751
+	bcs	.L759
 	ldrh	w0, [x28]
 	strh	w0, [x28, 4]
 	strh	w26, [x28]
 	ldr	w0, [x27, 4]
-	b	.L791
-.L751:
+	b	.L799
+.L759:
 	strh	w26, [x28, 4]
-	b	.L725
-.L754:
+	b	.L733
+.L762:
 	ldr	x1, [x19, 4088]
 	ldrh	w0, [x1]
-	cbz	w0, .L756
-.L759:
+	cbz	w0, .L764
+.L767:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	x1, [x0, 152]
 	ldrh	w2, [x1]
-	cbz	w2, .L757
-.L758:
+	cbz	w2, .L765
+.L766:
 	add	x20, x20, :lo12:.LANCHOR3
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x20, -128]
 	ldr	w0, [x22, 132]
 	cmp	w1, w0
-	bls	.L788
+	bls	.L796
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1377
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L788:
+	bl	sftl_printk
+.L796:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5304,24 +5357,24 @@ FtlScanSysBlk:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L756:
+.L764:
 	add	x0, x20, :lo12:.LANCHOR3
 	ldrh	w0, [x0, -128]
-	cbz	w0, .L759
+	cbz	w0, .L767
 	ldr	w2, [x19, 132]
 	mov	w0, 0
-.L760:
+.L768:
 	cmp	w0, w2
-	bcs	.L759
+	bcs	.L767
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L761
+	cbz	w3, .L769
 	mov	w1, w0
 	add	x3, x22, :lo12:.LANCHOR0
 	add	x7, x20, :lo12:.LANCHOR3
-.L762:
+.L770:
 	ldr	w2, [x3, 132]
 	cmp	w1, w2
-	bcs	.L759
+	bcs	.L767
 	ldr	x5, [x3, 4088]
 	sxtw	x6, w1
 	lsl	x4, x6, 1
@@ -5336,28 +5389,28 @@ FtlScanSysBlk:
 	str	w6, [x5, x2, lsl 2]
 	ldr	x2, [x3, 4088]
 	strh	wzr, [x2, x4]
-	b	.L762
-.L761:
+	b	.L770
+.L769:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L760
-.L757:
+	b	.L768
+.L765:
 	ldrh	w2, [x0, 148]
-	cbz	w2, .L758
+	cbz	w2, .L766
 	ldrh	w2, [x0, 124]
 	mov	w0, 0
-.L767:
+.L775:
 	mov	w6, w0
 	cmp	w0, w2
-	bge	.L758
+	bge	.L766
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L768
+	cbz	w3, .L776
 	add	x2, x22, :lo12:.LANCHOR0
 	add	x7, x20, :lo12:.LANCHOR3
-.L769:
+.L777:
 	ldrh	w1, [x2, 124]
 	cmp	w0, w1
-	bge	.L758
+	bge	.L766
 	ldr	x4, [x2, 152]
 	sxtw	x5, w0
 	lsl	x3, x5, 1
@@ -5372,11 +5425,11 @@ FtlScanSysBlk:
 	str	w5, [x4, x1, lsl 2]
 	ldr	x1, [x2, 152]
 	strh	wzr, [x1, x3]
-	b	.L769
-.L768:
+	b	.L777
+.L776:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L767
+	b	.L775
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
 	.global	FtlMapTblRecovery
@@ -5417,14 +5470,14 @@ FtlMapTblRecovery:
 	ldr	w0, [x29, 116]
 	sub	w0, w0, #1
 	str	w0, [x29, 112]
-.L793:
+.L801:
 	ldr	w0, [x29, 116]
 	cmp	w27, w0
-	bge	.L810
+	bge	.L818
 	ldr	w0, [x29, 112]
 	sxtw	x28, w27
 	cmp	w27, w0
-	bne	.L794
+	bne	.L802
 	lsl	x0, x28, 1
 	mov	w1, 1
 	add	x20, x23, x0
@@ -5440,20 +5493,20 @@ FtlMapTblRecovery:
 	ldr	w0, [x26, x28, lsl 2]
 	add	w26, w1, 1
 	str	w0, [x19, 48]
-.L795:
+.L803:
 	cmp	w23, w26
-	blt	.L797
-.L810:
+	blt	.L805
+.L818:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	bl	ftl_free_no_use_map_blk
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x21, 108]
 	cmp	w1, w0
-	bne	.L799
+	bne	.L807
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L799:
+.L807:
 	mov	x0, x19
 	bl	ftl_map_blk_gc
 	mov	x0, x19
@@ -5466,7 +5519,7 @@ FtlMapTblRecovery:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L797:
+.L805:
 	ldrh	w0, [x20]
 	mov	w2, 1
 	mov	w1, w2
@@ -5476,23 +5529,23 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L796
+	beq	.L804
 	ldrh	w0, [x22, 8]
 	cmp	w24, w0
-	bls	.L796
+	bls	.L804
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L796
+	bne	.L804
 	ldr	x2, [x29, 120]
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x25, 4]
 	str	w1, [x2, x0]
-.L796:
+.L804:
 	add	w23, w23, 1
 	sxth	w23, w23
-	b	.L795
-.L794:
+	b	.L803
+.L802:
 	ldr	x0, [x25, 3432]
 	mov	w2, 1
 	str	x0, [x20, 8]
@@ -5508,21 +5561,21 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L812
+	beq	.L820
 	ldrh	w1, [x22]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L812
+	bne	.L820
 	ldrh	w1, [x22, 8]
 	mov	w0, 64245
 	cmp	w1, w0
-	beq	.L801
-.L812:
+	beq	.L809
+.L820:
 	mov	w5, 0
-.L802:
+.L810:
 	ldrh	w0, [x25, 108]
 	cmp	w5, w0
-	bge	.L808
+	bge	.L816
 	ldrh	w0, [x28]
 	mov	w2, 1
 	str	w5, [x29, 108]
@@ -5534,48 +5587,48 @@ FtlMapTblRecovery:
 	ldr	w0, [x20]
 	ldr	w5, [x29, 108]
 	cmn	w0, #1
-	beq	.L806
+	beq	.L814
 	ldrh	w0, [x22, 8]
 	cmp	w24, w0
-	bls	.L806
+	bls	.L814
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L806
+	bne	.L814
 	ldr	x2, [x29, 120]
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x20, 4]
 	str	w1, [x2, x0]
-.L806:
+.L814:
 	add	w5, w5, 1
 	sxth	w5, w5
-	b	.L802
-.L801:
+	b	.L810
+.L809:
 	mov	w0, 0
-.L803:
+.L811:
 	ldrh	w1, [x25, 108]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L805
-.L808:
+	blt	.L813
+.L816:
 	add	w4, w27, 1
 	sxth	w27, w4
-	b	.L793
-.L805:
+	b	.L801
+.L813:
 	ldr	x2, [x25, 3432]
 	sbfiz	x5, x0, 3, 32
 	ldrh	w1, [x2, x5]
 	cmp	w24, w1
-	bls	.L804
+	bls	.L812
 	add	x2, x2, x5
 	ldr	x3, [x29, 120]
 	ubfiz	x1, x1, 2, 16
 	ldr	w2, [x2, 4]
 	str	w2, [x3, x1]
-.L804:
+.L812:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L803
+	b	.L811
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
 	.global	FtlLoadVonderInfo
@@ -5635,10 +5688,10 @@ FtlL2PDataInit:
 	mov	x1, x20
 	mov	w0, 0
 	mov	w5, -1
-.L823:
+.L831:
 	ldrh	w2, [x1, 142]
 	cmp	w2, w0
-	bhi	.L824
+	bhi	.L832
 	add	x0, x19, :lo12:.LANCHOR3
 	mov	w2, -1
 	strh	w2, [x0, -190]
@@ -5663,7 +5716,7 @@ FtlL2PDataInit:
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L824:
+.L832:
 	ldr	x3, [x1, 2568]
 	ubfiz	x2, x0, 4, 16
 	add	x3, x3, x2
@@ -5681,7 +5734,7 @@ FtlL2PDataInit:
 	and	x2, x2, -4
 	add	x2, x4, x2
 	str	x2, [x3, 8]
-	b	.L823
+	b	.L831
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
 	.global	FtlLoadMapInfo
@@ -5772,80 +5825,80 @@ SupperBlkListInit:
 	str	xzr, [x19, 2368]
 	str	xzr, [x19, 2392]
 	str	xzr, [x19, 2408]
-.L831:
+.L839:
 	ldrh	w0, [x19, 44]
 	cmp	w20, w0
-	bcs	.L837
+	bcs	.L845
 	ldrh	w8, [x19, 36]
 	mov	x6, 0
 	ldrh	w7, [x19, 106]
 	mov	w5, 0
-	b	.L838
-.L833:
+	b	.L846
+.L841:
 	ldrb	w0, [x23, x6]
 	mov	w1, w20
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L832
+	cbnz	w0, .L840
 	add	w5, w5, w7
 	and	w5, w5, 65535
-.L832:
+.L840:
 	add	x6, x6, 1
-.L838:
+.L846:
 	cmp	w8, w6, uxth
-	bhi	.L833
-	cbz	w5, .L840
+	bhi	.L841
+	cbz	w5, .L848
 	mov	w0, 32768
 	sdiv	w5, w0, w5
-.L834:
+.L842:
 	ldr	x1, [x19, 2360]
 	mov	w0, 6
 	umaddl	x0, w20, w0, x1
 	strh	w5, [x0, 4]
 	ldrh	w0, [x19, 2424]
 	cmp	w0, w20
-	beq	.L835
+	beq	.L843
 	ldrh	w0, [x19, 2472]
 	cmp	w0, w20
-	beq	.L835
+	beq	.L843
 	ldrh	w0, [x19, 2520]
 	cmp	w0, w20
-	beq	.L835
+	beq	.L843
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x20, 1, 16
 	ldrh	w0, [x1, x0]
-	cbnz	w0, .L836
+	cbnz	w0, .L844
 	add	w22, w22, 1
 	mov	w0, w20
 	and	w22, w22, 65535
 	bl	INSERT_FREE_LIST
-.L835:
+.L843:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L831
-.L840:
+	b	.L839
+.L848:
 	mov	w5, 0
-	b	.L834
-.L836:
+	b	.L842
+.L844:
 	add	w21, w21, 1
 	mov	w0, w20
 	and	w21, w21, 65535
 	bl	INSERT_DATA_LIST
-	b	.L835
-.L837:
+	b	.L843
+.L845:
 	strh	w21, [x19, 2400]
 	add	w21, w21, w22
 	strh	w22, [x19, 2416]
 	cmp	w21, w0
-	ble	.L839
+	ble	.L847
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2154
 	add	x1, x1, 384
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L839:
+	bl	sftl_printk
+.L847:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
@@ -5858,8 +5911,8 @@ SupperBlkListInit:
 	.type	ftl_check_vpc, %function
 ftl_check_vpc:
 	stp	x29, x30, [sp, -128]!
-	adrp	x0, .LC91
-	add	x0, x0, :lo12:.LC91
+	adrp	x0, .LC95
+	add	x0, x0, :lo12:.LC95
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
@@ -5873,55 +5926,55 @@ ftl_check_vpc:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	adrp	x22, check_vpc_table
-	bl	printk
+	bl	sftl_printk
 	add	x19, x22, :lo12:check_vpc_table
 	mov	w2, 8192
 	mov	w1, 0
 	mov	x0, x19
 	bl	ftl_memset
-.L843:
+.L851:
 	ldr	w0, [x24, 2584]
 	cmp	w23, w0
-	bcc	.L845
-	adrp	x25, .LC92
+	bcc	.L853
+	adrp	x25, .LC96
 	add	x23, x20, :lo12:.LANCHOR0
 	add	x26, x22, :lo12:check_vpc_table
-	add	x25, x25, :lo12:.LC92
+	add	x25, x25, :lo12:.LC96
 	mov	w24, 0
 	mov	w19, 0
 	mov	w4, 65535
-.L846:
+.L854:
 	ldrh	w0, [x23, 44]
 	cmp	w0, w19
-	bhi	.L848
+	bhi	.L856
 	ldr	x19, [x23, 2408]
-	cbz	x19, .L849
+	cbz	x19, .L857
 	ldr	x0, [x23, 2360]
-	adrp	x25, .LC93
+	adrp	x25, .LC97
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:check_vpc_table
 	sub	x19, x19, x0
 	mov	x0, -6148914691236517206
 	asr	x19, x19, 1
 	movk	x0, 0xaaab, lsl 0
-	add	x25, x25, :lo12:.LC93
+	add	x25, x25, :lo12:.LC97
 	ldrh	w26, [x23, 2416]
 	mov	w27, 6
 	mov	w23, 0
 	mul	x19, x19, x0
 	and	w19, w19, 65535
-.L850:
+.L858:
 	cmp	w23, w26
-	bne	.L852
-.L849:
-	cbz	w24, .L842
+	bne	.L860
+.L857:
+	cbz	w24, .L850
 	add	x1, x21, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2321
 	add	x1, x1, 408
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L842:
+	bl	sftl_printk
+.L850:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -5929,67 +5982,67 @@ ftl_check_vpc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L845:
+.L853:
 	mov	w2, 0
 	add	x1, x29, 124
 	mov	w0, w23
 	bl	log2phys
 	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	beq	.L844
+	beq	.L852
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	and	x0, x0, 65535
 	ldrh	w1, [x19, x0, lsl 1]
 	add	w1, w1, 1
 	strh	w1, [x19, x0, lsl 1]
-.L844:
+.L852:
 	add	w23, w23, 1
-	b	.L843
-.L848:
+	b	.L851
+.L856:
 	ldr	x0, [x23, 2376]
 	ubfiz	x28, x19, 1, 16
 	sxtw	x27, w19
 	ldrh	w2, [x0, x28]
 	ldrh	w3, [x26, x27, lsl 1]
 	cmp	w2, w3
-	beq	.L847
+	beq	.L855
+	mov	x0, x25
 	str	w4, [x29, 108]
 	mov	w1, w19
-	mov	x0, x25
-	bl	printk
+	bl	sftl_printk
 	ldr	x0, [x23, 2376]
 	ldr	w4, [x29, 108]
 	ldrh	w0, [x0, x28]
 	cmp	w0, w4
-	beq	.L847
+	beq	.L855
 	ldrh	w1, [x26, x27, lsl 1]
 	cmp	w1, w0
 	csinc	w24, w24, wzr, ls
-.L847:
+.L855:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L846
-.L852:
+	b	.L854
+.L860:
 	ldr	x1, [x20, 2376]
 	ubfiz	x0, x19, 1, 16
 	ldrh	w2, [x1, x0]
-	cbz	w2, .L851
+	cbz	w2, .L859
 	ldrh	w3, [x22, w19, sxtw 1]
 	mov	w24, 1
 	mov	w1, w19
 	mov	x0, x25
-	bl	printk
-.L851:
+	bl	sftl_printk
+.L859:
 	ldr	x0, [x20, 2360]
 	umull	x19, w19, w27
 	ldrh	w19, [x0, x19]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L849
+	beq	.L857
 	add	w23, w23, 1
 	and	w23, w23, 65535
-	b	.L850
+	b	.L858
 	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	2
 	.global	FtlGcPageVarInit
@@ -6035,29 +6088,29 @@ FtlGcScanTempBlk:
 	ldrh	w19, [x0, 4]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L886
-	cbnz	w19, .L870
-.L871:
+	beq	.L894
+	cbnz	w19, .L878
+.L879:
 	bl	FtlGcPageVarInit
-	b	.L872
-.L886:
+	b	.L880
+.L894:
 	mov	w19, 0
-.L870:
+.L878:
 	adrp	x0, .LANCHOR0+106
 	ldrh	w0, [x0, #:lo12:.LANCHOR0+106]
 	cmp	w0, w25
-	beq	.L871
-.L872:
+	beq	.L879
+.L880:
 	adrp	x26, .LANCHOR0
 	add	x22, x26, :lo12:.LANCHOR0
 	mov	w24, 0
-.L880:
+.L888:
 	ldrh	w1, [x21]
 	mov	w0, 65535
 	strb	wzr, [x21, 8]
 	cmp	w1, w0
-	beq	.L887
-.L883:
+	beq	.L895
+.L891:
 	add	x0, x26, :lo12:.LANCHOR0
 	add	x2, x21, 16
 	mov	w20, 0
@@ -6068,9 +6121,9 @@ FtlGcScanTempBlk:
 	ldrh	w0, [x0, 36]
 	add	x0, x0, 8
 	add	x0, x21, x0, lsl 1
-.L874:
+.L882:
 	cmp	x0, x2
-	bne	.L876
+	bne	.L884
 	ldr	x0, [x22, 4016]
 	mov	w1, w20
 	mov	w2, 0
@@ -6078,25 +6131,25 @@ FtlGcScanTempBlk:
 	bl	FlashReadPages
 	mov	x10, 0
 	mov	w11, 65535
-.L877:
+.L885:
 	cmp	x10, x20
-	bne	.L881
+	bne	.L889
 	add	w19, w19, 1
 	add	w24, w24, 1
 	and	w19, w19, 65535
 	cmp	w25, w24
-	bls	.L882
-.L884:
+	bls	.L890
+.L892:
 	ldrh	w0, [x22, 106]
 	cmp	w0, w19
-	bhi	.L883
-.L887:
+	bhi	.L891
+.L895:
 	mov	w2, 0
-	b	.L873
-.L876:
+	b	.L881
+.L884:
 	ldrh	w1, [x2]
 	cmp	w1, w9
-	beq	.L875
+	beq	.L883
 	ldr	x4, [x22, 4016]
 	ubfiz	x6, x20, 5, 16
 	orr	w1, w19, w1, lsl 10
@@ -6116,10 +6169,10 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w5
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x3, 16]
-.L875:
+.L883:
 	add	x2, x2, 2
-	b	.L874
-.L881:
+	b	.L882
+.L889:
 	ldr	x6, [x22, 4016]
 	add	x5, x6, x10
 	ldr	w4, [x5, 4]
@@ -6127,16 +6180,16 @@ FtlGcScanTempBlk:
 	bl	P2V_plane
 	and	w2, w0, 65535
 	ldr	w0, [x6, x10]
-	cbnz	w0, .L878
+	cbnz	w0, .L886
 	ldr	x0, [x5, 16]
 	add	x10, x10, 32
 	ldrh	w1, [x0]
 	cmp	w1, w11
-	bne	.L879
+	bne	.L887
 	adrp	x0, .LANCHOR3-40
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR3-40]
-.L873:
+.L881:
 	add	x23, x23, :lo12:.LANCHOR2
 	strh	w19, [x21, 2]
 	strb	w2, [x21, 6]
@@ -6145,13 +6198,13 @@ FtlGcScanTempBlk:
 	strh	w0, [x23, 4]
 	mov	x0, x21
 	bl	ftl_sb_update_avl_pages
-	b	.L885
-.L879:
+	b	.L893
+.L887:
 	ldp	w2, w0, [x0, 8]
 	mov	w1, w4
 	bl	FtlGcUpdatePage
-	b	.L877
-.L878:
+	b	.L885
+.L886:
 	ldr	x0, [x22, 2376]
 	mov	w19, 0
 	ldrh	w1, [x21]
@@ -6161,19 +6214,19 @@ FtlGcScanTempBlk:
 	mov	w0, -1
 	strh	w0, [x21]
 	bl	FtlGcPageVarInit
-	b	.L880
-.L882:
+	b	.L888
+.L890:
 	add	x1, x23, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w0, [x1, 4]
 	cmp	w0, w2
-	beq	.L884
+	beq	.L892
 	add	w0, w0, w24
 	strh	w0, [x1, 4]
 	ldrh	w0, [x22, 106]
 	cmp	w0, w19
-	bls	.L884
-.L885:
+	bls	.L892
+.L893:
 	mov	w0, -1
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -6191,7 +6244,7 @@ FlashTestBlk:
 	stp	x19, x20, [sp, 16]
 	and	w19, w0, 65535
 	cmp	w19, 11
-	bls	.L895
+	bls	.L903
 	add	x0, x29, 64
 	mov	w2, 32
 	mov	w1, 165
@@ -6221,14 +6274,14 @@ FlashTestBlk:
 	add	x0, x29, 32
 	csetm	w19, ne
 	bl	FlashEraseBlocks
-.L893:
+.L901:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 128
 	ret
-.L895:
+.L903:
 	mov	w19, 0
-	b	.L893
+	b	.L901
 	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
 	.global	FlashGetBadBlockList
@@ -6251,32 +6304,32 @@ FlashGetBadBlockList:
 	blr	x2
 	and	w0, w0, 65535
 	cmp	w0, 50
-	bls	.L898
+	bls	.L906
 	mov	w2, 256
 	mov	w1, 255
 	mov	x0, x20
 	bl	ftl_memset
 	mov	w0, 0
-.L898:
+.L906:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 14]
 	cmp	w1, 4
-	bne	.L902
+	bne	.L910
 	mov	x1, 0
-.L900:
+.L908:
 	cmp	w0, w1, uxth
-	bhi	.L901
-.L902:
+	bhi	.L909
+.L910:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L901:
+.L909:
 	ldrh	w2, [x20, x1, lsl 1]
 	lsr	w2, w2, 1
 	strh	w2, [x20, x1, lsl 1]
 	add	x1, x1, 1
-	b	.L900
+	b	.L908
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
 	.global	ftl_memcpy
@@ -6312,22 +6365,22 @@ FtlBbmTblFlush:
 	ldrh	w2, [x19, 114]
 	str	x0, [x19, 3408]
 	bl	ftl_memset
-.L907:
+.L915:
 	ldrh	w0, [x19, 58]
 	add	x20, x19, 3400
 	cmp	w21, w0
-	blt	.L908
+	blt	.L916
 	ldr	x24, [x20, 16]
 	mov	w1, 255
 	mov	w2, 16
-	adrp	x22, .LC94
+	adrp	x22, .LC98
 	mov	x0, x24
 	bl	ftl_memset
 	mov	w0, -3887
 	add	x1, x19, 160
 	strh	w0, [x24]
 	add	x25, x25, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC94
+	add	x22, x22, :lo12:.LC98
 	mov	w21, 0
 	ldr	w0, [x19, 168]
 	mov	w23, 0
@@ -6341,7 +6394,7 @@ FtlBbmTblFlush:
 	ldr	w0, [x19, 32]
 	mov	x19, x1
 	strh	w0, [x24, 12]
-.L909:
+.L917:
 	ldr	x0, [x25, 3432]
 	str	x0, [x20, 8]
 	ldr	x0, [x25, 3440]
@@ -6354,7 +6407,7 @@ FtlBbmTblFlush:
 	str	wzr, [x20]
 	str	w0, [x20, 4]
 	mov	x0, x22
-	bl	printk
+	bl	sftl_printk
 	mov	w3, 1
 	mov	x0, x20
 	mov	w1, w3
@@ -6364,7 +6417,7 @@ FtlBbmTblFlush:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L910
+	blt	.L918
 	ldr	w0, [x19, 8]
 	mov	w2, 1
 	ldrh	w1, [x19]
@@ -6388,29 +6441,29 @@ FtlBbmTblFlush:
 	mov	w2, w3
 	mov	w1, w3
 	bl	FlashProgPages
-.L910:
+.L918:
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L911
+	bne	.L919
 	ldr	w1, [x20, 4]
 	add	w21, w21, 1
-	adrp	x0, .LC95
+	adrp	x0, .LC99
 	and	w21, w21, 65535
-	add	x0, x0, :lo12:.LC95
-	bl	printk
+	add	x0, x0, :lo12:.LC99
+	bl	sftl_printk
 	cmp	w21, 3
-	bls	.L909
+	bls	.L917
 	ldr	w1, [x20, 4]
-	adrp	x0, .LC96
+	adrp	x0, .LC100
 	mov	w2, w21
-	add	x0, x0, :lo12:.LC96
-	bl	printk
-.L913:
-	b	.L913
-.L908:
+	add	x0, x0, :lo12:.LC100
+	bl	sftl_printk
+.L921:
+	b	.L921
+.L916:
 	ldrh	w2, [x22, -200]
 	ldr	x1, [x23], 8
 	ldr	x0, [x20, 8]
@@ -6419,12 +6472,12 @@ FtlBbmTblFlush:
 	add	w21, w21, 1
 	add	x0, x0, x3, sxtw 2
 	bl	ftl_memcpy
-	b	.L907
-.L914:
+	b	.L915
+.L922:
 	mov	w23, 1
-	b	.L909
-.L911:
-	cbz	w23, .L914
+	b	.L917
+.L919:
+	cbz	w23, .L922
 	mov	w0, 0
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -6449,23 +6502,23 @@ allocate_data_superblock:
 	add	x23, x22, 2520
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-.L917:
+.L925:
 	ldrh	w1, [x22, 2400]
 	ldrh	w0, [x22, 2416]
 	add	w0, w0, w1
 	ldrh	w1, [x22, 44]
 	cmp	w0, w1
-	ble	.L918
+	ble	.L926
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2585
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L918:
+	bl	sftl_printk
+.L926:
 	cmp	x20, x23
-	bne	.L943
+	bne	.L951
 	ldrh	w0, [x19, 2416]
 	ldr	w1, [x19, 3244]
 	mul	w1, w0, w1
@@ -6473,23 +6526,23 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	add	w1, w0, w1, lsr 2
 	ands	w1, w1, 65535
-	beq	.L919
+	beq	.L927
 	sub	w1, w1, #1
 	and	w1, w1, 65535
-.L919:
+.L927:
 	add	x0, x19, 2408
 	bl	List_pop_index_node
 	and	w24, w0, 65535
 	ldrh	w0, [x19, 2416]
-	cbnz	w0, .L920
+	cbnz	w0, .L928
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2594
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L920:
+	bl	sftl_printk
+.L928:
 	ldrh	w0, [x19, 2416]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2416]
@@ -6497,7 +6550,7 @@ allocate_data_superblock:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L921
+	cbnz	w0, .L929
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x24, 1, 16
 	mov	w2, -1
@@ -6509,72 +6562,72 @@ allocate_data_superblock:
 	add	w0, w0, w1
 	ldrh	w1, [x19, 44]
 	cmp	w0, w1
-	ble	.L917
+	ble	.L925
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2605
 	add	x1, x1, 424
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L917
-.L943:
+	bl	sftl_printk
+	b	.L925
+.L951:
 	mov	w1, 0
-	b	.L919
-.L921:
+	b	.L927
+.L929:
 	ldrh	w1, [x19, 2400]
 	ldrh	w0, [x19, 2416]
 	add	w0, w0, w1
 	ldrh	w1, [x19, 44]
 	cmp	w0, w1
-	ble	.L923
+	ble	.L931
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2608
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L923:
+	bl	sftl_printk
+.L931:
 	add	x27, x20, 16
 	ldrh	w4, [x19, 36]
 	mov	x3, x27
 	mov	x0, 0
 	mov	w25, 0
 	mov	w5, 65535
-.L924:
+.L932:
 	cmp	w4, w0, uxth
-	bhi	.L926
-	cbnz	w25, .L927
+	bhi	.L934
+	cbnz	w25, .L935
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2619
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L927:
+	bl	sftl_printk
+.L935:
 	ldrh	w0, [x19, 2672]
 	cmp	w0, w24
-	bne	.L928
+	bne	.L936
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2621
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L928:
+	bl	sftl_printk
+.L936:
 	ldrb	w0, [x20, 8]
 	uxtw	x26, w24
-	cbnz	w0, .L929
+	cbnz	w0, .L937
 	ldr	x2, [x19, 2384]
 	lsl	x1, x26, 1
 	ldrh	w0, [x2, x1]
-	cbz	w0, .L930
+	cbz	w0, .L938
 	ldrh	w3, [x19, 96]
 	add	w0, w0, w3
-.L951:
+.L959:
 	strh	w0, [x2, x1]
 	mov	w1, 0
 	ldr	w0, [x19, 2628]
@@ -6582,15 +6635,15 @@ allocate_data_superblock:
 	str	w0, [x19, 2628]
 	mov	w0, w24
 	bl	ftl_set_blk_mode
-.L932:
+.L940:
 	ldr	x0, [x19, 2384]
 	lsl	x26, x26, 1
 	ldr	w1, [x19, 2644]
 	ldrh	w0, [x0, x26]
 	cmp	w0, w1
-	bls	.L933
+	bls	.L941
 	str	w0, [x19, 2644]
-.L933:
+.L941:
 	ldr	w1, [x19, 2632]
 	ubfiz	x3, x25, 5, 16
 	ldrh	w0, [x19, 96]
@@ -6604,53 +6657,53 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	str	w0, [x1, 16]
 	mov	x0, 0
-.L934:
+.L942:
 	cmp	x3, x0
-	bne	.L935
+	bne	.L943
 	ldrb	w1, [x20, 8]
 	mov	w2, w25
 	ldr	x0, [x19, 3960]
 	mov	x28, 0
 	bl	FlashEraseBlocks
 	mov	w1, 0
-.L936:
+.L944:
 	cmp	w25, w28, uxth
-	bhi	.L938
+	bhi	.L946
 	cmp	w1, 0
-	ble	.L939
+	ble	.L947
 	mov	w0, w24
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L939:
+.L947:
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L940
+	cbnz	w0, .L948
 	ldr	x0, [x19, 2376]
 	mov	w1, -1
 	strh	w1, [x0, x26]
 	mov	w0, w24
 	bl	INSERT_DATA_LIST
-	b	.L917
-.L926:
+	b	.L925
+.L934:
 	ldr	x1, [x19, 3960]
 	add	x2, x1, x0, lsl 5
 	stp	xzr, xzr, [x2, 8]
 	ldrh	w2, [x3]
 	cmp	w2, w5
-	beq	.L925
+	beq	.L933
 	ubfiz	x6, x25, 5, 16
 	add	w25, w25, 1
 	add	x1, x1, x6
 	and	w25, w25, 65535
 	lsl	w2, w2, 10
 	str	w2, [x1, 4]
-.L925:
+.L933:
 	add	x0, x0, 1
 	add	x3, x3, 2
-	b	.L924
-.L930:
+	b	.L932
+.L938:
 	mov	w0, 2
-	b	.L951
-.L929:
+	b	.L959
+.L937:
 	ldr	x2, [x19, 2384]
 	lsl	x0, x26, 1
 	ldrh	w1, [x2, x0]
@@ -6661,22 +6714,22 @@ allocate_data_superblock:
 	str	w0, [x19, 2632]
 	mov	w0, w24
 	bl	ftl_set_blk_mode.part.7
-	b	.L932
-.L935:
+	b	.L940
+.L943:
 	ldr	x1, [x19, 3960]
 	add	x1, x1, x0
 	add	x0, x0, 32
 	ldr	w2, [x1, 4]
 	and	w2, w2, -1024
 	str	w2, [x1, 4]
-	b	.L934
-.L938:
+	b	.L942
+.L946:
 	ldr	x2, [x19, 3960]
 	lsl	x0, x28, 5
 	add	x3, x2, x0
 	ldr	w2, [x2, x0]
 	cmn	w2, #1
-	bne	.L937
+	bne	.L945
 	add	w1, w1, 1
 	ldr	w0, [x3, 4]
 	stp	w2, w1, [x29, 104]
@@ -6687,11 +6740,11 @@ allocate_data_superblock:
 	ldrb	w0, [x20, 7]
 	sub	w0, w0, #1
 	strb	w0, [x20, 7]
-.L937:
+.L945:
 	add	x28, x28, 1
 	add	x27, x27, 2
-	b	.L936
-.L940:
+	b	.L944
+.L948:
 	add	x21, x21, :lo12:.LANCHOR0
 	strh	wzr, [x20, 2]
 	strb	wzr, [x20, 6]
@@ -6708,18 +6761,18 @@ allocate_data_superblock:
 	ldrh	w2, [x20]
 	strh	w0, [x1, x2, lsl 1]
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L941
+	cbz	w0, .L949
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L942
-.L941:
+	cbnz	w0, .L950
+.L949:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2674
 	add	x1, x1, 424
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L942:
+	bl	sftl_printk
+.L950:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -6744,16 +6797,16 @@ FtlGcFreeBadSuperBlk:
 	stp	x25, x26, [sp, 64]
 	ldrh	w0, [x19, 3324]
 	str	x27, [sp, 80]
-	cbz	w0, .L953
+	cbz	w0, .L961
 	add	x23, x19, 64
 	add	x24, x19, 3328
 	mov	w21, 0
-.L954:
+.L962:
 	ldrh	w0, [x19, 36]
 	cmp	w0, w21
-	bhi	.L960
+	bhi	.L968
 	bl	FtlGcReFreshBadBlk
-.L953:
+.L961:
 	mov	w0, 0
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -6762,50 +6815,50 @@ FtlGcFreeBadSuperBlk:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L960:
+.L968:
 	ldrb	w0, [x23, w21, sxtw]
 	mov	w1, w22
-	adrp	x26, .LC97
-	add	x26, x26, :lo12:.LC97
+	adrp	x26, .LC101
+	add	x26, x26, :lo12:.LC101
 	mov	w20, 0
 	bl	V2P_block
 	and	w25, w0, 65535
-.L955:
+.L963:
 	ldrh	w0, [x19, 3324]
 	cmp	w0, w20
-	bhi	.L959
+	bhi	.L967
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	b	.L954
-.L959:
+	b	.L962
+.L967:
 	ldrh	w0, [x24, w20, sxtw 1]
 	add	w27, w20, 1
 	cmp	w0, w25
-	bne	.L956
+	bne	.L964
 	mov	w1, w25
 	mov	x0, x26
-	bl	printk
+	bl	sftl_printk
 	mov	w0, w25
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	w0, [x19, 3324]
 	mov	w1, w27
-.L957:
+.L965:
 	cmp	w20, w0
-	bcc	.L958
+	bcc	.L966
 	sub	w0, w0, #1
 	strh	w0, [x19, 3324]
-.L956:
+.L964:
 	and	w20, w27, 65535
-	b	.L955
-.L958:
+	b	.L963
+.L966:
 	sub	w2, w1, #1
 	ldrh	w3, [x24, w1, sxtw 1]
 	add	w20, w20, 1
 	add	w1, w1, 1
 	and	w20, w20, 65535
 	strh	w3, [x24, w2, sxtw 1]
-	b	.L957
+	b	.L965
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -6821,27 +6874,27 @@ update_vpc_list:
 	ubfiz	x1, x19, 1, 16
 	ldr	x2, [x0, 2376]
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L966
+	cbnz	w1, .L974
 	ldrh	w1, [x0, 2672]
 	cmp	w1, w19
-	bne	.L967
+	bne	.L975
 	mov	w1, -1
 	strh	w1, [x0, 2672]
-.L968:
+.L976:
 	add	x21, x20, :lo12:.LANCHOR0
 	mov	w1, w19
 	add	x0, x21, 2368
 	bl	List_remove_node
 	ldrh	w0, [x21, 2400]
-	cbnz	w0, .L970
+	cbnz	w0, .L978
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2744
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L970:
+	bl	sftl_printk
+.L978:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x20, 2400]
 	sub	w0, w0, #1
@@ -6851,42 +6904,42 @@ update_vpc_list:
 	mov	w0, w19
 	bl	FtlGcFreeBadSuperBlk
 	ldrh	w1, [x20, 2400]
-	mov	w19, 1
 	ldrh	w0, [x20, 2416]
 	add	w0, w0, w1
 	ldrh	w1, [x20, 44]
 	cmp	w0, w1
-	ble	.L965
+	ble	.L982
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2747
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L965:
-	mov	w0, w19
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L967:
+	bl	sftl_printk
+.L982:
+	mov	w0, 1
+	b	.L973
+.L975:
 	ldrh	w1, [x0, 2424]
 	cmp	w1, w19
-	beq	.L973
+	beq	.L981
 	ldrh	w1, [x0, 2472]
 	cmp	w1, w19
-	beq	.L973
+	beq	.L981
 	ldrh	w0, [x0, 2520]
 	cmp	w0, w19
-	bne	.L968
+	bne	.L976
+.L981:
+	mov	w0, 0
 .L973:
-	mov	w19, 0
-	b	.L965
-.L966:
+	ldp	x19, x20, [sp, 16]
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+.L974:
 	mov	w0, w19
 	bl	List_update_data_list
-	b	.L973
+	b	.L981
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
 	.global	decrement_vpc_count
@@ -6899,53 +6952,53 @@ decrement_vpc_count:
 	str	x21, [sp, 32]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L977
+	beq	.L985
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
 	ubfiz	x21, x19, 1, 16
 	ldr	x1, [x20, 2376]
 	ldrh	w0, [x1, x21]
-	cbnz	w0, .L978
+	cbnz	w0, .L986
 	mov	w2, 0
 	mov	w1, w19
-	adrp	x0, .LC98
-	add	x0, x0, :lo12:.LC98
-	bl	printk
+	adrp	x0, .LC102
+	add	x0, x0, :lo12:.LC102
+	bl	sftl_printk
 	ldr	x0, [x20, 2376]
 	ldrh	w0, [x0, x21]
-	cbz	w0, .L979
-.L984:
+	cbz	w0, .L987
+.L992:
 	mov	w21, 0
-.L976:
+.L984:
 	mov	w0, w21
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L979:
+.L987:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2762
 	add	x1, x1, 472
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L984
-.L978:
+	bl	sftl_printk
+	b	.L992
+.L986:
 	sub	w0, w0, #1
 	strh	w0, [x1, x21]
-.L977:
+.L985:
 	adrp	x20, .LANCHOR3
 	add	x20, x20, :lo12:.LANCHOR3
 	mov	w1, 65535
 	ldrh	w0, [x20, -48]
 	cmp	w0, w1
-	bne	.L981
+	bne	.L989
 	strh	w19, [x20, -48]
-	b	.L984
-.L981:
+	b	.L992
+.L989:
 	cmp	w19, w0
-	beq	.L984
+	beq	.L992
 	bl	update_vpc_list
 	cmp	w0, 0
 	adrp	x1, .LANCHOR0
@@ -6962,17 +7015,17 @@ decrement_vpc_count:
 	mul	x0, x0, x2
 	and	x2, x0, 65535
 	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L976
+	cbnz	w1, .L984
 	cmp	w19, w0, uxth
-	beq	.L976
+	beq	.L984
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2778
 	add	x1, x1, 472
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L976
+	bl	sftl_printk
+	b	.L984
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
 	.global	FtlWriteDump_data
@@ -6987,16 +7040,16 @@ FtlWriteDump_data:
 	stp	x23, x24, [sp, 48]
 	str	x25, [sp, 64]
 	ldrh	w2, [x20, 2428]
-	cbz	w2, .L986
+	cbz	w2, .L994
 	ldrb	w1, [x20, 2432]
-	cbnz	w1, .L986
+	cbnz	w1, .L994
 	ldrb	w1, [x20, 2431]
 	ldrh	w3, [x20, 106]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L986
+	beq	.L994
 	ldrb	w0, [x20, 2434]
-	cbnz	w0, .L985
+	cbnz	w0, .L993
 	ldr	w22, [x20, 2584]
 	add	x1, x29, 92
 	ldrh	w24, [x20, 36]
@@ -7012,41 +7065,41 @@ FtlWriteDump_data:
 	stp	x1, x21, [x29, 104]
 	str	w22, [x29, 120]
 	str	wzr, [x21, 4]
-	beq	.L988
+	beq	.L996
 	mov	w2, 0
 	mov	w1, 1
 	add	x0, x29, 96
 	bl	FlashReadPages
-.L989:
+.L997:
 	add	x25, x19, :lo12:.LANCHOR0
 	lsl	w24, w24, 2
 	add	x20, x25, 2424
 	mov	w0, -3947
 	mov	w23, 0
 	strh	w0, [x21]
-.L990:
+.L998:
 	cmp	w24, w23
-	bne	.L994
-.L991:
+	bne	.L1002
+.L999:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x19, 2434]
-.L985:
+.L993:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 128
 	ret
-.L988:
+.L996:
 	ldrh	w2, [x20, 114]
 	mov	w1, 255
 	ldr	x0, [x20, 3432]
 	bl	ftl_memset
-	b	.L989
-.L994:
+	b	.L997
+.L1002:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L991
+	cbz	w0, .L999
 	ldr	w0, [x29, 100]
 	add	w23, w23, 1
 	stp	w22, w0, [x21, 8]
@@ -7068,11 +7121,11 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L990
-.L986:
+	b	.L998
+.L994:
 	add	x19, x19, :lo12:.LANCHOR0
 	strb	wzr, [x19, 2434]
-	b	.L985
+	b	.L993
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
 	.global	l2p_flush
@@ -7085,26 +7138,26 @@ l2p_flush:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
 	bl	FtlWriteDump_data
-.L1004:
+.L1012:
 	ldrh	w0, [x20, 142]
 	cmp	w0, w19
-	bhi	.L1006
+	bhi	.L1014
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1006:
+.L1014:
 	ldr	x1, [x20, 2568]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1005
+	tbz	w0, #31, .L1013
 	mov	w0, w19
 	bl	flush_l2p_region
-.L1005:
+.L1013:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1004
+	b	.L1012
 	.size	l2p_flush, .-l2p_flush
 	.align	2
 	.global	FtlRecoverySuperblock
@@ -7121,7 +7174,7 @@ FtlRecoverySuperblock:
 	stp	x27, x28, [sp, 80]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	beq	.L1126
+	beq	.L1134
 	ldrb	w0, [x19, 6]
 	adrp	x20, .LANCHOR0
 	str	w0, [x29, 156]
@@ -7129,11 +7182,11 @@ FtlRecoverySuperblock:
 	ldrh	w27, [x19, 2]
 	ldrh	w0, [x0, 106]
 	cmp	w0, w27
-	bne	.L1011
+	bne	.L1019
 	strh	wzr, [x19, 4]
-.L1132:
+.L1140:
 	strb	wzr, [x19, 6]
-.L1126:
+.L1134:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -7142,17 +7195,17 @@ FtlRecoverySuperblock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 176
 	ret
-.L1011:
+.L1019:
 	ldrh	w0, [x19, 16]
 	mov	w21, 0
-.L1012:
+.L1020:
 	cmp	w0, w1
-	beq	.L1013
+	beq	.L1021
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	mov	w24, w0
 	cmn	w0, #1
-	beq	.L1014
+	beq	.L1022
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x1, x19, 16
 	str	x1, [x29, 144]
@@ -7165,9 +7218,9 @@ FtlRecoverySuperblock:
 	add	x1, x1, 8
 	ldrh	w9, [x0, 116]
 	add	x1, x19, x1, lsl 1
-.L1015:
+.L1023:
 	cmp	x5, x1
-	bne	.L1019
+	bne	.L1027
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w1, w21
@@ -7180,68 +7233,68 @@ FtlRecoverySuperblock:
 	mov	w7, 65535
 	mov	x6, x4
 	mov	w3, 0
-.L1020:
+.L1028:
 	cmp	w21, w3
-	bne	.L1025
+	bne	.L1033
 	add	w23, w24, 1
 	ldr	w0, [x4, 4]
 	and	w23, w23, 65535
-.L1128:
+.L1136:
 	lsr	w0, w0, 10
 	bl	P2V_plane
 	and	w28, w0, 65535
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 106]
 	cmp	w0, w23
-	bne	.L1027
+	bne	.L1035
 	strh	w23, [x19, 2]
 	strb	wzr, [x19, 6]
 	strh	wzr, [x19, 4]
-.L1027:
+.L1035:
 	ldr	w0, [x29, 156]
 	cmp	w23, w27
 	ccmp	w28, w0, 0, eq
-	bne	.L1028
-.L1133:
+	bne	.L1036
+.L1141:
 	mov	w2, w28
 	mov	w1, w23
 	mov	x0, x19
 	bl	ftl_sb_update_avl_pages
-	b	.L1126
-.L1013:
+	b	.L1134
+.L1021:
 	add	w21, w21, 1
 	and	w21, w21, 65535
 	add	x0, x19, x21, sxtw 1
 	ldrh	w0, [x0, 16]
-	b	.L1012
-.L1014:
-	cbz	w27, .L1016
+	b	.L1020
+.L1022:
+	cbz	w27, .L1024
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1755
 	add	x1, x1, 496
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1016:
+	bl	sftl_printk
+.L1024:
 	ldr	w0, [x29, 156]
 	cmp	w0, 0
 	ccmp	w21, w0, 4, ne
-	beq	.L1017
+	beq	.L1025
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1756
 	add	x1, x1, 496
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1017:
+	bl	sftl_printk
+.L1025:
 	strh	wzr, [x19, 2]
-	b	.L1132
-.L1019:
+	b	.L1140
+.L1027:
 	ldrh	w2, [x5]
 	cmp	w2, w10
-	beq	.L1018
+	beq	.L1026
 	ldr	x4, [x0, 4016]
 	ubfiz	x7, x21, 5, 16
 	orr	w2, w24, w2, lsl 10
@@ -7261,77 +7314,77 @@ FtlRecoverySuperblock:
 	sdiv	w2, w2, w6
 	add	x2, x4, x2, sxtw 2
 	str	x2, [x3, 16]
-.L1018:
+.L1026:
 	add	x5, x5, 2
-	b	.L1015
-.L1025:
+	b	.L1023
+.L1033:
 	ldr	w0, [x6]
-	cbnz	w0, .L1021
+	cbnz	w0, .L1029
 	ldr	x8, [x6, 16]
 	ldr	w5, [x8, 4]
 	cmn	w5, #1
-	beq	.L1022
+	beq	.L1030
 	ldr	w1, [x23, 2624]
 	mov	w0, w5
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1022
+	cbz	w0, .L1030
 	add	w5, w5, 1
 	str	w5, [x23, 2624]
-.L1022:
+.L1030:
 	ldr	w0, [x8]
 	cmn	w0, #1
-	bne	.L1024
+	bne	.L1032
 	ubfiz	x3, x3, 5, 16
 	and	w23, w24, 65535
 	add	x3, x4, x3
 	ldr	w0, [x3, 4]
-	b	.L1128
-.L1021:
+	b	.L1136
+.L1029:
 	mov	w7, w9
-.L1024:
+.L1032:
 	add	w3, w3, 1
 	add	x6, x6, 32
 	and	w3, w3, 65535
-	b	.L1020
-.L1028:
+	b	.L1028
+.L1036:
 	mov	w0, 65535
 	adrp	x21, .LANCHOR3
 	cmp	w7, w0
-	bne	.L1029
+	bne	.L1037
 	ldrb	w0, [x19, 8]
-	cbnz	w0, .L1030
-.L1029:
+	cbnz	w0, .L1038
+.L1037:
 	add	x0, x21, :lo12:.LANCHOR3
 	and	w3, w24, 65535
 	ldr	w1, [x0, -36]
 	cmn	w1, #1
-	bne	.L1031
+	bne	.L1039
 	str	w22, [x0, -36]
-.L1031:
+.L1039:
 	add	w0, w27, 7
 	cmp	w0, w24, uxth
-	bge	.L1079
+	bge	.L1087
 	sub	w25, w3, #7
 	and	w25, w25, 65535
-.L1032:
+.L1040:
 	add	x26, x20, :lo12:.LANCHOR0
 	mov	w4, 65535
-.L1033:
+.L1041:
 	cmp	w25, w3
-	bhi	.L1040
+	bhi	.L1048
 	ldrh	w0, [x26, 36]
 	mov	w24, 0
 	ldr	x1, [x29, 144]
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 1
-	b	.L1041
-.L1079:
+	b	.L1049
+.L1087:
 	mov	w25, w27
-	b	.L1032
-.L1035:
+	b	.L1040
+.L1043:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1034
+	beq	.L1042
 	ldr	x5, [x26, 4016]
 	ubfiz	x6, x24, 5, 16
 	add	w24, w24, 1
@@ -7339,11 +7392,11 @@ FtlRecoverySuperblock:
 	add	x5, x5, x6
 	and	w24, w24, 65535
 	str	w2, [x5, 4]
-.L1034:
+.L1042:
 	add	x1, x1, 2
-.L1041:
+.L1049:
 	cmp	x0, x1
-	bne	.L1035
+	bne	.L1043
 	ldr	x0, [x26, 4016]
 	mov	w1, w24
 	mov	w2, 0
@@ -7358,31 +7411,31 @@ FtlRecoverySuperblock:
 	ldr	w3, [x29, 136]
 	add	x0, x1, 16
 	add	x24, x1, x24
-.L1036:
+.L1044:
 	cmp	x24, x0
-	bne	.L1039
+	bne	.L1047
 	add	w25, w25, 1
 	and	w25, w25, 65535
-	b	.L1033
-.L1039:
+	b	.L1041
+.L1047:
 	ldr	w1, [x0, -16]
-	cbnz	w1, .L1030
+	cbnz	w1, .L1038
 	ldr	x1, [x0]
 	ldrh	w5, [x1]
 	cmp	w5, w4
-	beq	.L1038
+	beq	.L1046
 	ldr	w1, [x1, 4]
 	cmn	w1, #1
-	beq	.L1038
+	beq	.L1046
 	str	w1, [x2, -36]
-.L1038:
+.L1046:
 	add	x0, x0, 32
-	b	.L1036
-.L1040:
+	b	.L1044
+.L1048:
 	add	x0, x21, :lo12:.LANCHOR3
 	mov	w1, -1
 	str	w1, [x0, -36]
-.L1030:
+.L1038:
 	add	x21, x21, :lo12:.LANCHOR3
 	mov	w0, 1
 	mov	w25, w27
@@ -7392,16 +7445,16 @@ FtlRecoverySuperblock:
 	bl	FtlMapBlkWriteDump_data
 	sub	x0, x21, #24
 	str	x0, [x29, 112]
-.L1042:
+.L1050:
 	ldrh	w0, [x20, 36]
 	mov	w24, 0
 	ldr	x1, [x29, 144]
 	mov	w4, 65535
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 1
-.L1043:
+.L1051:
 	cmp	x0, x1
-	bne	.L1045
+	bne	.L1053
 	ldr	x0, [x20, 4016]
 	mov	w1, w24
 	mov	w2, 0
@@ -7413,34 +7466,34 @@ FtlRecoverySuperblock:
 	add	x0, x0, 496
 	mov	x24, 0
 	str	x0, [x29, 128]
-.L1046:
+.L1054:
 	ldr	x0, [x29, 120]
 	cmp	x0, x24
-	bne	.L1073
+	bne	.L1081
 	add	w25, w25, 1
 	ldrh	w0, [x20, 106]
 	and	w25, w25, 65535
 	cmp	w0, w25
-	bne	.L1042
+	bne	.L1050
 	ldrh	w1, [x20, 36]
 	mov	w0, 0
 	strh	w25, [x19, 2]
 	mov	w2, 65535
 	strh	wzr, [x19, 4]
-.L1074:
+.L1082:
 	cmp	w0, w1
-	beq	.L1126
+	beq	.L1134
 	ldr	x4, [x29, 144]
 	ldrh	w3, [x4], 2
 	str	x4, [x29, 144]
 	cmp	w3, w2
-	beq	.L1075
+	beq	.L1083
 	strb	w0, [x19, 6]
-	b	.L1126
-.L1045:
+	b	.L1134
+.L1053:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1044
+	beq	.L1052
 	ldr	x3, [x20, 4016]
 	ubfiz	x5, x24, 5, 16
 	add	w24, w24, 1
@@ -7448,10 +7501,10 @@ FtlRecoverySuperblock:
 	add	x3, x3, x5
 	and	w24, w24, 65535
 	str	w2, [x3, 4]
-.L1044:
+.L1052:
 	add	x1, x1, 2
-	b	.L1043
-.L1073:
+	b	.L1051
+.L1081:
 	ldr	x4, [x20, 4016]
 	add	x4, x4, x24
 	ldr	w5, [x4, 4]
@@ -7460,53 +7513,53 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	and	w0, w0, 65535
 	cmp	w25, w27
-	bcc	.L1047
+	bcc	.L1055
 	ldr	w1, [x29, 156]
 	ccmp	w1, w0, 0, eq
-	bhi	.L1047
+	bhi	.L1055
 	cmp	w25, w23
 	ccmp	w28, w0, 0, eq
-	beq	.L1048
+	beq	.L1056
 	ldr	w0, [x4]
 	cmn	w0, #1
-	beq	.L1049
+	beq	.L1057
 	ldr	x3, [x4, 16]
 	mov	w0, 61589
 	ldrh	w1, [x3]
 	cmp	w1, w0
-	beq	.L1050
-.L1057:
+	beq	.L1058
+.L1065:
 	ldrh	w0, [x19]
-.L1131:
+.L1139:
 	bl	decrement_vpc_count
-.L1047:
+.L1055:
 	add	x24, x24, 32
-	b	.L1046
-.L1050:
+	b	.L1054
+.L1058:
 	ldr	w22, [x3, 4]
 	cmn	w22, #1
-	beq	.L1051
+	beq	.L1059
 	ldr	w1, [x20, 2624]
 	mov	w0, w22
 	str	x3, [x29, 136]
 	bl	ftl_cmp_data_ver
 	ldr	x3, [x29, 136]
-	cbz	w0, .L1051
+	cbz	w0, .L1059
 	add	w0, w22, 1
 	str	w0, [x20, 2624]
-.L1051:
+.L1059:
 	ldrh	w1, [x3]
 	mov	w0, 61589
 	cmp	w1, w0
-	beq	.L1052
+	beq	.L1060
 	ldr	x1, [x29, 128]
 	mov	w2, 1905
 	str	x3, [x29, 136]
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 	ldr	x3, [x29, 136]
-.L1052:
+.L1060:
 	ldp	w26, w0, [x3, 8]
 	add	x1, x29, 168
 	str	w0, [x29, 164]
@@ -7515,13 +7568,13 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	w1, [x21, -36]
 	cmn	w1, #1
-	beq	.L1053
+	beq	.L1061
 	mov	w0, w22
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1053
+	cbz	w0, .L1061
 	ldr	w1, [x29, 164]
 	cmn	w1, #1
-	beq	.L1054
+	beq	.L1062
 	ldr	x0, [x20, 4016]
 	mov	w2, 0
 	add	x0, x0, x24
@@ -7537,72 +7590,72 @@ FtlRecoverySuperblock:
 	add	x3, x0, x24
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	bne	.L1055
-.L1056:
+	bne	.L1063
+.L1064:
 	mov	w0, -1
 	str	w0, [x29, 164]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-.L1064:
+.L1072:
 	ldr	w4, [x29, 164]
 	cmn	w4, #1
-	beq	.L1047
-.L1078:
+	beq	.L1055
+.L1086:
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	and	w26, w0, 65535
 	ldrh	w0, [x20, 44]
 	mov	w3, w26
 	cmp	w0, w26
-	bhi	.L1069
+	bhi	.L1077
 	ldr	x1, [x29, 128]
 	mov	w2, 2006
 	adrp	x0, .LC1
 	str	w26, [x29, 136]
 	add	x0, x0, :lo12:.LC1
-	bl	printk
+	bl	sftl_printk
 	ldr	w3, [x29, 136]
-.L1069:
+.L1077:
 	ldr	x1, [x20, 2376]
 	ubfiz	x0, x26, 1, 16
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1070
+	cbz	w0, .L1078
 	mov	w0, w3
-	b	.L1131
-.L1054:
+	b	.L1139
+.L1062:
 	ldp	w1, w0, [x29, 168]
 	cmp	w1, w0
-	bne	.L1057
+	bne	.L1065
 	mov	w2, 1
 	add	x1, x29, 164
 	mov	w0, w26
 	bl	log2phys
-	b	.L1057
-.L1055:
+	b	.L1065
+.L1063:
 	ldr	w0, [x4, 8]
 	cmp	w26, w0
-	bne	.L1056
+	bne	.L1064
 	ldr	w0, [x4, 4]
 	str	w0, [x29, 136]
 	str	x4, [x29, 104]
 	uxtw	x1, w0
 	ldr	w0, [x21, -36]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1056
+	cbz	w0, .L1064
 	ldp	w0, w1, [x29, 168]
 	ldr	x4, [x29, 104]
 	cmp	w0, w1
 	ldr	w1, [x29, 164]
-	bne	.L1059
-.L1129:
+	bne	.L1067
+.L1137:
 	mov	w0, w26
 	bl	FtlReUsePrevPpa
-	b	.L1056
-.L1059:
+	b	.L1064
+.L1067:
 	cmp	w0, w1
-	beq	.L1056
+	beq	.L1064
 	cmn	w0, #1
-	beq	.L1060
+	beq	.L1068
 	ldr	x4, [x3, 16]
 	mov	w2, 0
 	str	w0, [x3, 4]
@@ -7612,54 +7665,54 @@ FtlRecoverySuperblock:
 	add	x0, x0, x24
 	bl	FlashReadPages
 	ldr	x4, [x29, 104]
-.L1061:
+.L1069:
 	adrp	x0, .LANCHOR0+4016
 	ldr	x0, [x0, #:lo12:.LANCHOR0+4016]
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	beq	.L1062
+	beq	.L1070
 	ldr	w3, [x4, 4]
 	ldr	w0, [x21, -36]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1062
+	cbz	w0, .L1070
 	ldr	w0, [x29, 136]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1056
-.L1062:
+	cbz	w0, .L1064
+.L1070:
 	ldr	w1, [x29, 164]
-	b	.L1129
-.L1060:
+	b	.L1137
+.L1068:
 	str	w0, [x3]
-	b	.L1061
-.L1053:
+	b	.L1069
+.L1061:
 	ldp	w1, w0, [x29, 168]
 	cmp	w1, w0
-	beq	.L1064
+	beq	.L1072
 	mov	w2, 1
 	add	x1, x29, 172
 	mov	w0, w26
 	bl	log2phys
 	ldr	w4, [x29, 168]
 	cmn	w4, #1
-	beq	.L1064
+	beq	.L1072
 	ldr	w0, [x29, 164]
 	cmp	w4, w0
-	beq	.L1078
+	beq	.L1086
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20, 2424]
 	and	w0, w0, 65535
 	cmp	w1, w0
-	beq	.L1068
+	beq	.L1076
 	ldrh	w1, [x20, 2472]
 	cmp	w1, w0
-	beq	.L1068
+	beq	.L1076
 	ldrh	w1, [x20, 2520]
 	cmp	w1, w0
-	bne	.L1064
-.L1068:
+	bne	.L1072
+.L1076:
 	ldr	x0, [x20, 4016]
 	mov	w2, 0
 	mov	w1, 1
@@ -7671,52 +7724,52 @@ FtlRecoverySuperblock:
 	ldr	x0, [x20, 4016]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L1064
+	beq	.L1072
 	ldr	x3, [x29, 136]
 	mov	w0, w22
 	ldr	w1, [x3, 4]
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1064
+	cbnz	w0, .L1072
 	mov	w2, 1
 	add	x1, x29, 168
 	mov	w0, w26
 	bl	log2phys
-	b	.L1064
-.L1070:
+	b	.L1072
+.L1078:
 	mov	w1, w26
-	adrp	x0, .LC99
-	add	x0, x0, :lo12:.LC99
-	bl	printk
-	b	.L1047
-.L1049:
+	adrp	x0, .LC103
+	add	x0, x0, :lo12:.LC103
+	bl	sftl_printk
+	b	.L1055
+.L1057:
 	ldr	w0, [x21, -28]
 	cmp	w0, 31
-	bhi	.L1071
+	bhi	.L1079
 	ldr	x1, [x29, 112]
 	str	w5, [x1, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w0, [x21, -28]
-.L1071:
+.L1079:
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	ldr	w0, [x21, -36]
 	cmn	w0, #1
-	bne	.L1072
-.L1130:
+	bne	.L1080
+.L1138:
 	str	w22, [x21, -36]
-	b	.L1047
-.L1072:
+	b	.L1055
+.L1080:
 	cmp	w22, w0
-	bcs	.L1047
-	b	.L1130
-.L1075:
+	bcs	.L1055
+	b	.L1138
+.L1083:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L1074
-.L1048:
+	b	.L1082
+.L1056:
 	strb	w28, [x19, 6]
 	strh	w23, [x19, 2]
-	b	.L1133
+	b	.L1141
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
 	.global	FtlSuperblockPowerLostFix
@@ -7752,12 +7805,12 @@ FtlSuperblockPowerLostFix:
 	movk	w3, 0x1234, lsl 16
 	ldr	x1, [x0, 3432]
 	str	w3, [x1, 4]
-.L1135:
+.L1143:
 	subs	w22, w22, #1
-	beq	.L1137
+	beq	.L1145
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1136
-.L1137:
+	cbnz	w0, .L1144
+.L1145:
 	add	x2, x23, :lo12:.LANCHOR0
 	ldrh	w0, [x19]
 	ldrh	w4, [x19, 4]
@@ -7775,12 +7828,12 @@ FtlSuperblockPowerLostFix:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 96
 	ret
-.L1136:
+.L1144:
 	mov	x0, x19
 	bl	get_new_active_ppa
 	str	w0, [x29, 68]
 	cmn	w0, #1
-	beq	.L1137
+	beq	.L1145
 	ldr	w0, [x20, 2624]
 	mov	w3, 0
 	str	w0, [x21, 4]
@@ -7794,7 +7847,7 @@ FtlSuperblockPowerLostFix:
 	bl	FlashProgPages
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L1135
+	b	.L1143
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlLoadBbt
@@ -7816,11 +7869,11 @@ FtlLoadBbt:
 	ldrh	w20, [x23, 102]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-.L1147:
+.L1155:
 	ldrh	w0, [x23, 102]
 	sub	w0, w0, #16
 	cmp	w20, w0
-	ble	.L1150
+	ble	.L1158
 	lsl	w0, w20, 10
 	mov	w2, 1
 	str	w0, [x21, 4]
@@ -7829,7 +7882,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L1148
+	bne	.L1156
 	ldr	w0, [x21, 4]
 	mov	w2, 1
 	mov	w1, w2
@@ -7837,27 +7890,27 @@ FtlLoadBbt:
 	str	w0, [x21, 4]
 	mov	x0, x21
 	bl	FlashReadPages
-.L1148:
+.L1156:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1149
+	beq	.L1157
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L1149
+	bne	.L1157
 	ldr	w1, [x22, 4]
 	str	w1, [x23, 168]
 	strh	w20, [x23, 160]
 	ldrh	w1, [x22, 8]
 	strh	w1, [x23, 164]
-.L1150:
+.L1158:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w1, [x21, 160]
 	cmp	w1, w0
-	beq	.L1164
+	beq	.L1172
 	ldrh	w1, [x21, 164]
 	cmp	w1, w0
-	beq	.L1154
+	beq	.L1162
 	add	x0, x21, 3400
 	lsl	w1, w1, 10
 	mov	w2, 1
@@ -7866,21 +7919,21 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21, 3400]
 	cmn	w0, #1
-	beq	.L1154
+	beq	.L1162
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L1154
+	bne	.L1162
 	ldr	w1, [x21, 168]
 	ldr	w0, [x22, 4]
 	cmp	w0, w1
-	bls	.L1154
+	bls	.L1162
 	str	w0, [x21, 168]
 	ldrh	w1, [x21, 164]
 	ldrh	w0, [x22, 8]
 	strh	w1, [x21, 160]
 	strh	w0, [x21, 164]
-.L1154:
+.L1162:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	x23, x20, 3400
@@ -7890,55 +7943,55 @@ FtlLoadBbt:
 	sxth	w21, w0
 	add	w0, w0, 1
 	strh	w0, [x20, 162]
-.L1156:
-	tbz	w21, #31, .L1159
+.L1164:
+	tbz	w21, #31, .L1167
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 254
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1158:
+	bl	sftl_printk
+.L1166:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 10]
 	mov	w2, 65535
 	strh	w0, [x1, 166]
 	ldrh	w0, [x22, 12]
 	cmp	w0, w2
-	beq	.L1161
+	beq	.L1169
 	ldr	w2, [x1, 32]
 	cmp	w0, w2
-	beq	.L1161
+	beq	.L1169
 	ldrh	w1, [x1, 46]
 	lsr	w1, w1, 2
 	cmp	w2, w1
-	bcs	.L1161
+	bcs	.L1169
 	cmp	w0, w1
-	bcs	.L1161
+	bcs	.L1169
 	bl	FtlSysBlkNumInit
-.L1161:
+.L1169:
 	add	x19, x19, :lo12:.LANCHOR0
 	adrp	x21, .LANCHOR3
 	add	x22, x19, 192
 	add	x21, x21, :lo12:.LANCHOR3
 	mov	w20, 0
-.L1162:
+.L1170:
 	ldrh	w0, [x19, 58]
 	cmp	w20, w0
-	bcc	.L1163
+	bcc	.L1171
 	mov	w0, 0
-.L1146:
+.L1154:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1149:
+.L1157:
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-	b	.L1147
-.L1159:
+	b	.L1155
+.L1167:
 	ldrh	w0, [x20, 160]
 	mov	w2, 1
 	mov	w1, w2
@@ -7950,15 +8003,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x23]
 	cmn	w0, #1
-	beq	.L1157
+	beq	.L1165
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	beq	.L1158
-.L1157:
+	beq	.L1166
+.L1165:
 	sub	w21, w21, #1
 	sxth	w21, w21
-	b	.L1156
-.L1163:
+	b	.L1164
+.L1171:
 	ldrh	w2, [x21, -200]
 	ldr	x0, [x19, 3408]
 	mul	w1, w2, w20
@@ -7967,10 +8020,10 @@ FtlLoadBbt:
 	add	x1, x0, x1, lsl 2
 	ldr	x0, [x22], 8
 	bl	ftl_memcpy
-	b	.L1162
-.L1164:
+	b	.L1170
+.L1172:
 	mov	w0, -1
-	b	.L1146
+	b	.L1154
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
 	.global	FtlMakeBbt
@@ -7995,47 +8048,47 @@ FtlMakeBbt:
 	add	x25, x0, 172
 	mov	x19, x0
 	add	x20, x0, 3400
-.L1177:
+.L1185:
 	ldrh	w0, [x19, 58]
 	cmp	w24, w0
-	bcc	.L1183
+	bcc	.L1191
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1184:
+.L1192:
 	ldrh	w0, [x20, 118]
 	cmp	w0, w19
-	bhi	.L1185
+	bhi	.L1193
 	add	x20, x20, 160
 	ldrh	w19, [x20, 12]
 	mov	w22, 65535
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L1186:
+.L1194:
 	ldrh	w0, [x20, 12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L1190
+	ble	.L1198
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1187
+	beq	.L1195
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L1188
+	cbz	w0, .L1196
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-.L1187:
+.L1195:
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-	b	.L1186
-.L1183:
+	b	.L1194
+.L1191:
 	ldr	x0, [x19, 3432]
 	mov	w2, 65535
 	ldr	x27, [x19, 3440]
 	ldrh	w1, [x25]
 	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	beq	.L1178
+	beq	.L1186
 	ldrh	w23, [x19, 102]
 	mov	w2, 1
 	madd	w23, w23, w24, w1
@@ -8050,29 +8103,29 @@ FtlMakeBbt:
 	add	w2, w2, 7
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-.L1179:
+.L1187:
 	mov	w0, w23
 	add	w24, w24, 1
 	bl	FtlBbmMapBadBlock
 	add	x26, x26, 8
 	add	x25, x25, 2
-	b	.L1177
-.L1178:
+	b	.L1185
+.L1186:
 	mov	w1, w24
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20, 8]
 	ldr	x1, [x26]
 	bl	FtlBbt2Bitmap
 	ldrh	w22, [x19, 102]
-.L1181:
+.L1189:
 	sub	w22, w22, #1
 	and	w22, w22, 65535
-.L1180:
+.L1188:
 	ldrh	w0, [x19, 102]
 	madd	w0, w24, w0, w22
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1181
+	beq	.L1189
 	ldr	x0, [x19, 3440]
 	mov	w2, 16
 	strh	w22, [x25]
@@ -8108,25 +8161,25 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L1179
+	bne	.L1187
 	mov	w0, w23
 	bl	FtlBbmMapBadBlock
-	b	.L1180
-.L1185:
+	b	.L1188
+.L1193:
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	and	w19, w19, 65535
-	b	.L1184
-.L1188:
+	b	.L1192
+.L1196:
 	ldrh	w0, [x20]
 	cmp	w0, w22
-	bne	.L1189
+	bne	.L1197
 	strh	w19, [x20]
-	b	.L1187
-.L1189:
+	b	.L1195
+.L1197:
 	strh	w19, [x20, 4]
-.L1190:
+.L1198:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, 2
 	ldr	x1, [x21, 3960]
@@ -8183,16 +8236,16 @@ FtlVendorPartWrite:
 	stp	x25, x26, [sp, 64]
 	ldrh	w1, [x0, 100]
 	cmp	w2, w1
-	bhi	.L1204
+	bhi	.L1212
 	ldrh	w21, [x0, 112]
 	adrp	x26, .LANCHOR3
 	add	x25, x26, :lo12:.LANCHOR3
 	mov	w23, 0
 	sub	x25, x25, #120
 	lsr	w21, w27, w21
-.L1198:
-	cbnz	w28, .L1203
-.L1196:
+.L1206:
+	cbnz	w28, .L1211
+.L1204:
 	mov	w0, w23
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8201,7 +8254,7 @@ FtlVendorPartWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1203:
+.L1211:
 	add	x2, x22, :lo12:.LANCHOR0
 	add	x0, x26, :lo12:.LANCHOR3
 	ldrh	w1, [x2, 62]
@@ -8214,9 +8267,9 @@ FtlVendorPartWrite:
 	and	w19, w19, 65535
 	cmp	w28, w19
 	csel	w19, w0, w19, cc
-	cbz	w4, .L1200
+	cbz	w4, .L1208
 	cmp	w19, w1
-	beq	.L1200
+	beq	.L1208
 	ldr	x0, [x2, 4048]
 	mov	w2, 1
 	str	x0, [x29, 120]
@@ -8226,7 +8279,7 @@ FtlVendorPartWrite:
 	str	w4, [x29, 116]
 	add	x0, x29, 112
 	bl	FlashReadPages
-.L1201:
+.L1209:
 	add	x5, x22, :lo12:.LANCHOR0
 	lsl	w4, w19, 9
 	lsl	w20, w20, 9
@@ -8250,17 +8303,17 @@ FtlVendorPartWrite:
 	ldr	w4, [x29, 108]
 	csinv	w23, w23, wzr, ne
 	add	x24, x24, x4, sxtw
-	b	.L1198
-.L1200:
+	b	.L1206
+.L1208:
 	add	x0, x22, :lo12:.LANCHOR0
 	mov	w1, 0
 	ldrh	w2, [x0, 114]
 	ldr	x0, [x0, 4048]
 	bl	ftl_memset
-	b	.L1201
-.L1204:
+	b	.L1209
+.L1212:
 	mov	w23, -1
-	b	.L1196
+	b	.L1204
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8272,7 +8325,7 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1212
+	bne	.L1220
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
 	mov	w1, 68
@@ -8307,7 +8360,7 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1212:
+.L1220:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -8318,21 +8371,21 @@ FtlEctTblFlush:
 	add	x1, x1, :lo12:.LANCHOR3
 	ldrh	w2, [x1, 104]
 	cmp	w2, 31
-	bhi	.L1219
+	bhi	.L1227
 	add	w2, w2, 1
 	strh	w2, [x1, 104]
 	mov	w2, 1
-.L1216:
+.L1224:
 	adrp	x1, .LANCHOR0
-	cbnz	w0, .L1217
+	cbnz	w0, .L1225
 	add	x0, x1, :lo12:.LANCHOR0
 	ldr	x0, [x0, 4072]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1221
-.L1217:
+	bcc	.L1229
+.L1225:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
@@ -8357,10 +8410,10 @@ FtlEctTblFlush:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1219:
+.L1227:
 	mov	w2, 32
-	b	.L1216
-.L1221:
+	b	.L1224
+.L1229:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8393,16 +8446,16 @@ FtlVendorPartRead:
 	stp	x25, x26, [sp, 64]
 	ldrh	w0, [x20, 100]
 	cmp	w1, w0
-	bhi	.L1233
+	bhi	.L1241
 	ldrh	w3, [x20, 112]
 	adrp	x24, .LANCHOR3
 	mov	x23, x2
 	add	x24, x24, :lo12:.LANCHOR3
 	mov	w22, 0
 	lsr	w25, w28, w3
-.L1227:
-	cbnz	w27, .L1232
-.L1225:
+.L1235:
+	cbnz	w27, .L1240
+.L1233:
 	mov	w0, w22
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8411,7 +8464,7 @@ FtlVendorPartRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 192
 	ret
-.L1232:
+.L1240:
 	ldrh	w19, [x20, 62]
 	ldr	x0, [x24, -232]
 	udiv	w21, w28, w19
@@ -8423,7 +8476,7 @@ FtlVendorPartRead:
 	cmp	w27, w19
 	csel	w19, w0, w19, cc
 	lsl	w26, w19, 9
-	cbz	w1, .L1229
+	cbz	w1, .L1237
 	ldr	x0, [x20, 4048]
 	mov	w2, 1
 	str	x0, [x29, 104]
@@ -8443,21 +8496,21 @@ FtlVendorPartRead:
 	csinv	w22, w22, wzr, ne
 	add	x1, x1, x21, sxtw 2
 	bl	ftl_memcpy
-.L1231:
+.L1239:
 	add	w25, w25, 1
 	sub	w27, w27, w19
 	add	w28, w28, w19
 	add	x23, x23, x26, sxtw
-	b	.L1227
-.L1229:
+	b	.L1235
+.L1237:
 	mov	w2, w26
 	mov	w1, 0
 	mov	x0, x23
 	bl	ftl_memset
-	b	.L1231
-.L1233:
+	b	.L1239
+.L1241:
 	mov	w22, -1
-	b	.L1225
+	b	.L1233
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -8477,18 +8530,18 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1236
-	adrp	x1, .LC100
+	beq	.L1244
+	adrp	x1, .LC104
 	adrp	x0, .LC71
-	add	x1, x1, :lo12:.LC100
+	add	x1, x1, :lo12:.LC104
 	add	x0, x0, :lo12:.LC71
-	bl	printk
+	bl	sftl_printk
 	ldr	x0, [x19, 4072]
 	mov	w1, 0
 	ldrh	w2, [x19, 4056]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1236:
+.L1244:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8513,19 +8566,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1239
+	beq	.L1247
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1239:
+.L1247:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1240
+	bne	.L1248
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2612]
 	ldr	w2, [x0, 2812]
@@ -8550,7 +8603,7 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2648]
 	str	w2, [x0, 2644]
-.L1240:
+.L1248:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2632]
 	ldrh	w1, [x0, 96]
@@ -8672,7 +8725,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1245:
+.L1253:
 	ldr	x0, [x19, 3432]
 	mov	w3, 1
 	str	x0, [x20, 8]
@@ -8690,7 +8743,7 @@ FtlVpcTblFlush:
 	ldrh	w1, [x19, 2658]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L1246
+	blt	.L1254
 	ldrh	w0, [x19, 2656]
 	ldrh	w24, [x19, 2660]
 	strh	wzr, [x19, 2658]
@@ -8710,51 +8763,51 @@ FtlVpcTblFlush:
 	mov	x0, x20
 	mov	w1, w3
 	bl	FlashProgPages
-.L1246:
+.L1254:
 	ldrh	w0, [x19, 2658]
 	ldr	w1, [x20]
 	add	w0, w0, 1
 	and	w0, w0, 65535
 	strh	w0, [x19, 2658]
 	cmn	w1, #1
-	bne	.L1247
+	bne	.L1255
 	cmp	w0, 1
-	bne	.L1248
+	bne	.L1256
 	adrp	x0, .LC1
 	mov	w2, 1124
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1248:
+	bl	sftl_printk
+.L1256:
 	ldrh	w0, [x19, 2658]
 	cmp	w0, 1
-	bne	.L1249
+	bne	.L1257
 	ldrh	w0, [x19, 108]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2658]
-.L1249:
+.L1257:
 	add	w22, w22, 1
 	and	w22, w22, 65535
 	cmp	w22, 3
-	bls	.L1245
+	bls	.L1253
 	add	x23, x23, :lo12:.LANCHOR0
-	adrp	x0, .LC101
+	adrp	x0, .LC105
 	mov	w2, w22
-	add	x0, x0, :lo12:.LC101
+	add	x0, x0, :lo12:.LC105
 	ldr	w1, [x23, 3404]
-	bl	printk
-.L1251:
-	b	.L1251
-.L1247:
+	bl	sftl_printk
+.L1259:
+	b	.L1259
+.L1255:
 	cmp	w0, 1
-	beq	.L1245
+	beq	.L1253
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1252
+	beq	.L1260
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1252:
+.L1260:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8770,48 +8823,48 @@ FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC91
+	adrp	x0, .LC95
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
 	add	x19, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	add	x1, x1, 552
-	add	x0, x0, :lo12:.LC91
+	add	x0, x0, :lo12:.LC95
 	str	x23, [sp, 48]
-	bl	printk
+	bl	sftl_printk
 	ldr	x0, [x19, 4080]
 	mov	w21, 0
 	ldrh	w2, [x19, 46]
 	mov	w1, 0
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1258:
+.L1266:
 	ldr	w0, [x19, 2584]
 	cmp	w21, w0
-	bcc	.L1260
-	adrp	x22, .LC102
+	bcc	.L1268
+	adrp	x22, .LC106
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC102
+	add	x22, x22, :lo12:.LC106
 	mov	w19, 0
 	mov	w23, 65535
-.L1261:
+.L1269:
 	ldrh	w0, [x20, 44]
 	cmp	w0, w19
-	bhi	.L1265
+	bhi	.L1273
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1260:
+.L1268:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1259
+	beq	.L1267
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldr	x2, [x19, 4080]
@@ -8819,31 +8872,31 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1259:
+.L1267:
 	add	w21, w21, 1
-	b	.L1258
-.L1265:
+	b	.L1266
+.L1273:
 	ldr	x0, [x20, 2376]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
 	ldr	x0, [x20, 4080]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1263
+	beq	.L1271
 	cmp	w2, w23
-	beq	.L1263
-	mov	w1, w19
+	beq	.L1271
 	mov	x0, x22
-	bl	printk
+	mov	w1, w19
+	bl	sftl_printk
 	ldrh	w0, [x20, 2424]
 	cmp	w0, w19
-	beq	.L1263
+	beq	.L1271
 	ldrh	w0, [x20, 2520]
 	cmp	w0, w19
-	beq	.L1263
+	beq	.L1271
 	ldrh	w0, [x20, 2472]
 	cmp	w0, w19
-	beq	.L1263
+	beq	.L1271
 	ldr	x0, [x20, 4080]
 	ldrh	w1, [x0, x21]
 	ldr	x0, [x20, 2376]
@@ -8852,10 +8905,10 @@ FtlVpcCheckAndModify:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1263:
+.L1271:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1261
+	b	.L1269
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
@@ -8871,26 +8924,26 @@ allocate_new_data_superblock:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 44]
 	cmp	w0, w21
-	bcs	.L1271
+	bcs	.L1279
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 2681
 	add	x1, x1, 576
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1271:
+	bl	sftl_printk
+.L1279:
 	mov	w0, 65535
 	cmp	w21, w0
-	beq	.L1272
+	beq	.L1280
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x21, 1, 16
 	ldr	x1, [x1, 2376]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1273
+	cbz	w0, .L1281
 	mov	w0, w21
 	bl	INSERT_DATA_LIST
-.L1272:
+.L1280:
 	mov	w0, 1
 	adrp	x1, .LANCHOR3
 	strb	w0, [x22, 8]
@@ -8899,21 +8952,21 @@ allocate_new_data_superblock:
 	mov	x20, x1
 	ldrh	w0, [x0, -48]
 	cmp	w0, w2
-	beq	.L1274
+	beq	.L1282
 	cmp	w21, w0
-	bne	.L1275
+	bne	.L1283
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x0, 1, 16
 	ldr	x2, [x19, 2376]
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1276
-.L1275:
+	cbz	w1, .L1284
+.L1283:
 	bl	update_vpc_list
-.L1276:
+.L1284:
 	add	x1, x20, :lo12:.LANCHOR3
 	mov	w0, -1
 	strh	w0, [x1, -48]
-.L1274:
+.L1282:
 	mov	x0, x22
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -8925,10 +8978,10 @@ allocate_new_data_superblock:
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1273:
+.L1281:
 	mov	w0, w21
 	bl	INSERT_FREE_LIST
-	b	.L1272
+	b	.L1280
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
@@ -8953,18 +9006,18 @@ FtlProgPages:
 	add	x25, x25, :lo12:.LANCHOR1
 	add	x20, x0, 4
 	bl	FlashProgPages
-.L1282:
+.L1290:
 	cmp	x20, x24
-	beq	.L1289
+	beq	.L1297
 	sub	x23, x20, #4
-	b	.L1290
-.L1285:
+	b	.L1298
+.L1293:
 	ldr	w0, [x20]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x19]
 	cmp	w1, w0, uxth
-	bne	.L1283
+	bne	.L1291
 	ldr	x2, [x21, 2376]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w3, [x19, 4]
@@ -8975,12 +9028,12 @@ FtlProgPages:
 	ldrh	w0, [x21, 106]
 	strh	w0, [x19, 2]
 	strh	wzr, [x19, 4]
-.L1283:
+.L1291:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1284
+	cbnz	w0, .L1292
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-.L1284:
+.L1292:
 	ldr	w0, [x21, 2816]
 	add	w0, w0, 1
 	str	w0, [x21, 2816]
@@ -8996,20 +9049,20 @@ FtlProgPages:
 	ldrb	w3, [x19, 9]
 	mov	x0, x23
 	bl	FlashProgPages
-.L1290:
+.L1298:
 	ldr	w0, [x20, -4]
 	cmn	w0, #1
-	beq	.L1285
+	beq	.L1293
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x21, 36]
 	cmp	w1, w0
-	bcc	.L1286
+	bcc	.L1294
 	adrp	x0, .LC1
 	mov	w2, 933
 	add	x1, x25, 608
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1286:
+	bl	sftl_printk
+.L1294:
 	add	x1, x29, 96
 	ldr	w0, [x23, 4]
 	mov	w2, 1
@@ -9023,35 +9076,35 @@ FtlProgPages:
 	and	w1, w0, 65535
 	mov	w23, w1
 	cmn	w4, #1
-	beq	.L1287
+	beq	.L1295
 	ldr	x2, [x21, 2376]
 	ubfiz	x0, x1, 1, 16
 	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1288
-	adrp	x0, .LC103
+	cbnz	w0, .L1296
+	adrp	x0, .LC107
 	mov	w2, 0
-	add	x0, x0, :lo12:.LC103
-	bl	printk
-.L1288:
+	add	x0, x0, :lo12:.LC107
+	bl	sftl_printk
+.L1296:
 	mov	w0, w23
 	bl	decrement_vpc_count
-.L1287:
+.L1295:
 	add	x20, x20, 32
-	b	.L1282
-.L1289:
+	b	.L1290
+.L1297:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x22, 36]
 	cmp	w1, w0
-	bcc	.L1281
+	bcc	.L1289
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 948
 	add	x1, x1, 608
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1281:
+	bl	sftl_printk
+.L1289:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9069,13 +9122,13 @@ FtlCacheWriteBack:
 	adrp	x19, .LANCHOR3
 	add	x19, x19, :lo12:.LANCHOR3
 	ldr	x0, [x19, -56]
-	cbz	x0, .L1297
+	cbz	x0, .L1305
 	ldr	x3, [x19, 112]
 	mov	w2, 0
 	mov	w1, 1
 	bl	FtlProgPages
 	str	xzr, [x19, -56]
-.L1297:
+.L1305:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -9103,14 +9156,14 @@ sftl_deinit:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	bne	.L1307
+	bne	.L1315
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	FtlSysFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1307:
+.L1315:
 	mov	w0, 0
 	ret
 	.size	sftl_deinit, .-sftl_deinit
@@ -9129,55 +9182,55 @@ FtlDiscard:
 	add	w1, w0, w1
 	ldr	w0, [x22, 144]
 	cmp	w1, w0
-	bhi	.L1318
+	bhi	.L1326
 	cmp	w19, 31
-	bhi	.L1312
-.L1326:
+	bhi	.L1320
+.L1334:
 	mov	w0, 0
-.L1310:
+.L1318:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1312:
+.L1320:
 	bl	FtlCacheWriteBack
 	ldrh	w1, [x22, 62]
 	udiv	w22, w21, w1
 	msub	w21, w1, w22, w21
 	ands	w21, w21, 65535
-	beq	.L1313
+	beq	.L1321
 	sub	w1, w1, w21
 	add	w22, w22, 1
 	cmp	w1, w19
 	csel	w1, w1, w19, ls
 	sub	w19, w19, w1, uxth
-.L1313:
+.L1321:
 	adrp	x21, .LANCHOR3
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x21, x21, :lo12:.LANCHOR3
 	mov	w0, -1
 	str	w0, [x29, 60]
-.L1314:
+.L1322:
 	ldrh	w0, [x20, 62]
 	cmp	w19, w0
-	bcs	.L1316
+	bcs	.L1324
 	adrp	x0, .LANCHOR3
 	add	x0, x0, :lo12:.LANCHOR3
 	ldr	w1, [x0, 120]
 	cmp	w1, 32
-	bls	.L1326
+	bls	.L1334
 	str	wzr, [x0, 120]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1326
-.L1316:
+	b	.L1334
+.L1324:
 	mov	w2, 0
 	add	x1, x29, 56
 	mov	w0, w22
 	bl	log2phys
 	ldr	w0, [x29, 56]
 	cmn	w0, #1
-	beq	.L1315
+	beq	.L1323
 	ldr	w0, [x21, 120]
 	mov	w2, 1
 	add	x1, x29, 60
@@ -9192,14 +9245,14 @@ FtlDiscard:
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1315:
+.L1323:
 	ldrh	w0, [x20, 62]
 	add	w22, w22, 1
 	sub	w19, w19, w0
-	b	.L1314
-.L1318:
+	b	.L1322
+.L1326:
 	mov	w0, -1
-	b	.L1310
+	b	.L1318
 	.size	FtlDiscard, .-FtlDiscard
 	.align	2
 	.global	FtlGcFreeTempBlock
@@ -9217,8 +9270,8 @@ FtlGcFreeTempBlock:
 	ldrh	w20, [x2, 2520]
 	ldrh	w1, [x2, 106]
 	cmp	w20, w3
-	bne	.L1328
-.L1338:
+	bne	.L1336
+.L1346:
 	add	x20, x19, :lo12:.LANCHOR0
 	adrp	x0, .LANCHOR3-40
 	add	x21, x20, 2520
@@ -9226,47 +9279,47 @@ FtlGcFreeTempBlock:
 	mov	w0, 65535
 	ldrh	w1, [x20, 2520]
 	cmp	w1, w0
-	bne	.L1351
-.L1354:
+	bne	.L1359
+.L1362:
 	mov	w0, 0
-.L1327:
+.L1335:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L1328:
-	cbz	w0, .L1331
+.L1336:
+	cbz	w0, .L1339
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1332
-.L1333:
+	beq	.L1340
+.L1341:
 	mov	w1, 2
-.L1331:
+.L1339:
 	add	x21, x19, :lo12:.LANCHOR0
 	add	x0, x21, 2520
 	bl	FtlGcScanTempBlk
 	str	w0, [x29, 92]
 	cmn	w0, #1
-	beq	.L1334
+	beq	.L1342
 	ldr	x1, [x21, 2384]
 	ubfiz	x20, x20, 1, 16
 	ldrh	w0, [x1, x20]
 	cmp	w0, 4
-	bls	.L1335
+	bls	.L1343
 	sub	w0, w0, #5
 	strh	w0, [x1, x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L1335:
+.L1343:
 	adrp	x0, .LANCHOR3
 	add	x1, x0, :lo12:.LANCHOR3
 	mov	x20, x0
 	ldr	w1, [x1, -40]
-	cbnz	w1, .L1336
+	cbnz	w1, .L1344
 	add	x19, x19, :lo12:.LANCHOR0
 	ldr	w0, [x19, 2816]
 	add	w0, w0, 1
@@ -9275,41 +9328,41 @@ FtlGcFreeTempBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1336:
+.L1344:
 	add	x0, x20, :lo12:.LANCHOR3
 	str	wzr, [x0, -40]
-.L1347:
+.L1355:
 	mov	w0, 1
-	b	.L1327
-.L1332:
+	b	.L1335
+.L1340:
 	strh	wzr, [x0, 4]
 	ldrh	w0, [x2, 2416]
 	cmp	w0, 17
-	bhi	.L1333
-	b	.L1331
-.L1334:
+	bhi	.L1341
+	b	.L1339
+.L1342:
 	adrp	x0, .LANCHOR2+4
 	ldrh	w1, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1347
-	b	.L1338
-.L1351:
+	bne	.L1355
+	b	.L1346
+.L1359:
 	bl	FtlCacheWriteBack
 	ldrb	w0, [x21, 7]
 	ldrh	w2, [x20, 106]
 	ldrh	w1, [x20, 3304]
 	mul	w0, w0, w2
 	cmp	w1, w0
-	beq	.L1339
+	beq	.L1347
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 162
 	add	x1, x1, 624
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1339:
+	bl	sftl_printk
+.L1347:
 	add	x0, x19, :lo12:.LANCHOR0
 	adrp	x22, .LANCHOR1
 	add	x22, x22, :lo12:.LANCHOR1
@@ -9327,20 +9380,20 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2608]
-.L1340:
+.L1348:
 	add	x21, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x21, 3304]
 	cmp	w0, w20
-	bhi	.L1344
+	bhi	.L1352
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x21, 2520]
 	ldr	x2, [x21, 2376]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1345
+	cbz	w1, .L1353
 	bl	INSERT_DATA_LIST
-.L1346:
+.L1354:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
@@ -9352,12 +9405,12 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x19, 2416]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1354
+	ble	.L1362
 	mov	w0, 20
 	strh	w20, [x19, 2672]
 	strh	w0, [x19, 3232]
-	b	.L1354
-.L1344:
+	b	.L1362
+.L1352:
 	mov	w24, 12
 	ldr	x26, [x21, 3312]
 	ldr	w0, [x21, 2584]
@@ -9365,12 +9418,12 @@ FtlGcFreeTempBlock:
 	add	x23, x26, x24
 	ldr	w1, [x23, 8]
 	cmp	w1, w0
-	bcc	.L1341
+	bcc	.L1349
 	mov	w2, 168
 	mov	x1, x22
 	mov	x0, x25
-	bl	printk
-.L1341:
+	bl	sftl_printk
+.L1349:
 	ldr	w0, [x23, 8]
 	add	x1, x29, 92
 	mov	w2, 0
@@ -9378,7 +9431,7 @@ FtlGcFreeTempBlock:
 	ldr	w0, [x26, x24]
 	ldr	w1, [x29, 92]
 	cmp	w0, w1
-	bne	.L1342
+	bne	.L1350
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	mov	w21, w0
@@ -9387,22 +9440,22 @@ FtlGcFreeTempBlock:
 	add	x1, x23, 4
 	bl	log2phys
 	mov	w0, w21
-.L1353:
+.L1361:
 	bl	decrement_vpc_count
-.L1343:
+.L1351:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L1340
-.L1342:
+	b	.L1348
+.L1350:
 	ldr	w0, [x23, 4]
 	cmp	w1, w0
-	beq	.L1343
+	beq	.L1351
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 2520]
-	b	.L1353
-.L1345:
+	b	.L1361
+.L1353:
 	bl	INSERT_FREE_LIST
-	b	.L1346
+	b	.L1354
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -9420,7 +9473,7 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19, 2522]
 	ldrh	w0, [x19, 106]
 	cmp	w1, w0
-	bcc	.L1355
+	bcc	.L1363
 	adrp	x19, .LANCHOR3
 	add	x19, x19, :lo12:.LANCHOR3
 	sub	x0, x19, #192
@@ -9428,7 +9481,7 @@ FtlGcPageRecovery:
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19, -40]
-.L1355:
+.L1363:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9477,25 +9530,25 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x19, 4024]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1361:
+.L1369:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1364
+	bcc	.L1372
 	ldr	x0, [x19, 4024]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
 	ldrh	w0, [x19, 2524]
-	cbnz	w0, .L1365
+	cbnz	w0, .L1373
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	b	.L1367
-.L1364:
+	b	.L1375
+.L1372:
 	ldr	x0, [x19, 4024]
 	ubfiz	x1, x10, 5, 16
 	add	x3, x0, x1
 	ldr	w0, [x0, x1]
 	cmn	w0, #1
-	bne	.L1362
+	bne	.L1370
 	ldrh	w3, [x19, 2520]
 	ldr	x2, [x19, 2376]
 	strh	wzr, [x2, x3, lsl 1]
@@ -9510,23 +9563,23 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1367:
+.L1375:
 	mov	w0, 1
-.L1360:
+.L1368:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1362:
+.L1370:
 	ldr	x0, [x3, 16]
 	ldr	w1, [x3, 4]
 	ldp	w2, w0, [x0, 8]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1361
-.L1365:
+	b	.L1369
+.L1373:
 	mov	w0, 0
-	b	.L1360
+	b	.L1368
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9541,10 +9594,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0, 2520]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1369
+	beq	.L1377
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1370
-.L1369:
+	cbnz	w0, .L1378
+.L1377:
 	bl	FtlCacheWriteBack
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
@@ -9558,7 +9611,7 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1370:
+.L1378:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 2520
 	bl	get_new_active_ppa
@@ -9580,23 +9633,23 @@ rk_ftl_garbage_collect:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	w2, [x1, 4000]
-	cbnz	w2, .L1444
+	cbnz	w2, .L1452
 	ldrh	w2, [x1, 2400]
 	cmp	w2, 47
-	bls	.L1444
+	bls	.L1452
 	mov	w23, w0
 	adrp	x0, .LANCHOR2+4
 	ldrh	w2, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L1374
-.L1377:
+	bne	.L1382
+.L1385:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 3322]
 	cmp	w1, w2
-	bne	.L1375
-.L1376:
+	bne	.L1383
+.L1384:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w20, 65535
 	ldr	w1, [x21, 3236]
@@ -9605,129 +9658,93 @@ rk_ftl_garbage_collect:
 	add	w1, w1, w23, lsl 7
 	str	w1, [x21, 3236]
 	cmp	w0, w20
-	bne	.L1378
+	bne	.L1386
 	ldrh	w20, [x21, 2520]
 	cmp	w20, w0
-	bne	.L1447
+	bne	.L1455
 	ldrh	w22, [x21, 3320]
 	cmp	w22, w20
-	bne	.L1378
+	bne	.L1386
 	ldrh	w0, [x21, 2416]
 	mov	w2, 1024
 	cmp	w0, 24
 	mov	w0, 5120
 	csel	w0, w0, w2, cc
 	cmp	w1, w0
-	bls	.L1450
+	bls	.L1458
 	adrp	x0, .LANCHOR3+124
 	str	wzr, [x21, 3236]
 	strh	wzr, [x0, #:lo12:.LANCHOR3+124]
 	bl	GetSwlReplaceBlock
 	and	w20, w0, 65535
 	cmp	w20, w22
-	bne	.L1451
+	bne	.L1459
 	ldrh	w1, [x21, 2416]
 	ldrh	w0, [x21, 3234]
 	cmp	w1, w0
-	bcs	.L1381
+	bcs	.L1389
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
 	cmp	w0, w20
-	beq	.L1383
+	beq	.L1391
 	ldr	x1, [x21, 2376]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1384
+	bhi	.L1392
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
 	strh	w0, [x21, 3234]
 	cmp	w22, w20
-	beq	.L1383
-.L1380:
-	add	x0, x19, :lo12:.LANCHOR0
-	ubfiz	x1, x22, 1, 32
-	mov	w20, w22
-	ldr	x2, [x0, 2376]
-	ldr	x3, [x0, 2384]
-	ldrh	w5, [x0, 3232]
-	ldrh	w4, [x3, x1]
-	ldrh	w3, [x2, x1]
-	mov	w1, w22
-	ldrh	w2, [x0, 2416]
-	adrp	x0, .LC104
-	add	x0, x0, :lo12:.LC104
-	bl	printk
-	b	.L1383
-.L1374:
-	ldrh	w1, [x1, 2520]
-	cmp	w1, w0
-	beq	.L1377
-	mov	w0, 1
-	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1377
-	mov	w0, 1
-	b	.L1372
-.L1375:
-	ldrh	w3, [x0, 3320]
-	cmp	w3, w2
-	bne	.L1376
-	strh	w1, [x0, 3320]
-	mov	w1, -1
-	strh	w1, [x0, 3322]
-	b	.L1376
-.L1384:
-	mov	w0, 64
-.L1476:
-	strh	w0, [x21, 3234]
-.L1383:
+	bne	.L1388
+.L1391:
 	bl	FtlGcReFreshBadBlk
-.L1378:
+.L1386:
 	cmp	w23, 0
 	mov	w0, 65535
 	ccmp	w20, w0, 0, eq
-	bne	.L1386
+	bne	.L1394
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2416]
 	cmp	w0, 24
-	bhi	.L1452
+	bhi	.L1460
 	cmp	w0, 16
 	ldrh	w21, [x1, 106]
-	bls	.L1388
+	bls	.L1396
 	lsr	w21, w21, 5
-.L1387:
+.L1395:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1391
+	bcs	.L1399
 	ldrh	w0, [x1, 2520]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1392
+	bne	.L1400
 	ldrh	w2, [x1, 3320]
 	cmp	w2, w0
-	bne	.L1392
+	bne	.L1400
 	adrp	x0, .LANCHOR3+124
 	ldrh	w0, [x0, #:lo12:.LANCHOR3+124]
-	cbnz	w0, .L1393
+	cbnz	w0, .L1401
 	ldr	w2, [x1, 2584]
 	ldr	w3, [x1, 2580]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1394
-.L1393:
+	bcs	.L1402
+.L1401:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2652]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1395:
+.L1403:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1372:
+.L1380:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9735,77 +9752,113 @@ rk_ftl_garbage_collect:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1381:
+.L1382:
+	ldrh	w1, [x1, 2520]
+	cmp	w1, w0
+	beq	.L1385
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+	cbz	w0, .L1385
+	mov	w0, 1
+	b	.L1380
+.L1383:
+	ldrh	w3, [x0, 3320]
+	cmp	w3, w2
+	bne	.L1384
+	strh	w1, [x0, 3320]
+	mov	w1, -1
+	strh	w1, [x0, 3322]
+	b	.L1384
+.L1392:
+	mov	w0, 64
+.L1484:
+	strh	w0, [x21, 3234]
+	b	.L1391
+.L1389:
 	mov	w0, 80
-	b	.L1476
-.L1451:
+	b	.L1484
+.L1459:
 	mov	w22, w20
-	b	.L1380
-.L1447:
+.L1388:
+	add	x0, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x22, 1, 32
+	mov	w20, w22
+	ldr	x2, [x0, 2376]
+	ldr	x3, [x0, 2384]
+	ldrh	w5, [x0, 3232]
+	ldrh	w4, [x3, x1]
+	ldrh	w3, [x2, x1]
+	mov	w1, w22
+	ldrh	w2, [x0, 2416]
+	adrp	x0, .LC108
+	add	x0, x0, :lo12:.LC108
+	bl	sftl_printk
+	b	.L1391
+.L1455:
 	mov	w20, w0
-	b	.L1378
-.L1450:
+	b	.L1386
+.L1458:
 	mov	w20, w22
-	b	.L1378
-.L1388:
+	b	.L1386
+.L1396:
 	cmp	w0, 12
-	bls	.L1389
+	bls	.L1397
 	lsr	w21, w21, 4
-	b	.L1387
-.L1389:
+	b	.L1395
+.L1397:
 	mov	w1, w21
 	cmp	w0, 9
 	lsr	w21, w21, 2
 	csel	w21, w21, w1, cs
-	b	.L1387
-.L1452:
+	b	.L1395
+.L1460:
 	mov	w21, 1
-	b	.L1387
-.L1394:
+	b	.L1395
+.L1402:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1395
-.L1392:
+	b	.L1403
+.L1400:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1391:
+.L1399:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3324]
-	cbz	w0, .L1453
+	cbz	w0, .L1461
 	add	w21, w21, 32
 	and	w21, w21, 65535
-.L1453:
+.L1461:
 	mov	w20, 65535
-.L1397:
+.L1405:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 2672]
 	cmp	w1, w2
-	bne	.L1406
+	bne	.L1414
 	cmp	w20, w1
-	beq	.L1407
+	beq	.L1415
 	strh	w20, [x0, 2672]
-.L1408:
+.L1416:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x5, 2672]
 	strb	wzr, [x5, 2680]
 	cmp	w0, w1
-	beq	.L1406
+	beq	.L1414
 	bl	IsBlkInGcList
-	cbz	w0, .L1411
+	cbz	w0, .L1419
 	mov	w0, -1
 	strh	w0, [x5, 2672]
-.L1411:
+.L1419:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	add	x23, x22, 2672
 	ldrh	w1, [x22, 2672]
 	cmp	w1, w0
-	beq	.L1406
+	beq	.L1414
 	mov	x0, x23
 	bl	make_superblock
 	adrp	x0, .LANCHOR3
@@ -9817,87 +9870,87 @@ rk_ftl_garbage_collect:
 	strh	wzr, [x0, 126]
 	ldrh	w1, [x1, x2, lsl 1]
 	strh	w1, [x0, 128]
-.L1406:
+.L1414:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w2, [x0, 2424]
 	cmp	w2, w1
-	beq	.L1412
+	beq	.L1420
 	ldrh	w0, [x0, 2472]
 	cmp	w0, w1
-	beq	.L1412
+	beq	.L1420
 	adrp	x24, .LANCHOR1
 	add	x24, x24, :lo12:.LANCHOR1
 	add	x24, x24, 648
-.L1413:
+.L1421:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w23, [x22, 2672]
 	cmp	w23, w0
-	bne	.L1414
+	bne	.L1422
 	mov	w25, 2
 	str	wzr, [x22, 3244]
-.L1415:
+.L1423:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
 	strh	w6, [x22, 2672]
 	cmp	w6, w23
-	bne	.L1416
+	bne	.L1424
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1372
-.L1386:
+	b	.L1380
+.L1394:
 	add	x5, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x5, 2520]
 	cmp	w1, w0
-	bne	.L1456
+	bne	.L1464
 	ldrh	w0, [x5, 3320]
 	cmp	w0, w1
-	bne	.L1456
+	bne	.L1464
 	cmp	w20, w0
-	bne	.L1456
+	bne	.L1464
 	ldrh	w0, [x5, 2672]
 	cmp	w0, w20
-	beq	.L1398
-.L1456:
+	beq	.L1406
+.L1464:
 	mov	w21, 1
-	b	.L1397
-.L1398:
+	b	.L1405
+.L1406:
 	ldrh	w7, [x5, 2416]
 	adrp	x21, .LANCHOR3
 	ldrh	w0, [x5, 3232]
 	str	wzr, [x5, 3244]
 	cmp	w0, w7
-	bcs	.L1399
+	bcs	.L1407
 	add	x0, x21, :lo12:.LANCHOR3
 	ldrh	w0, [x0, 124]
-	cbnz	w0, .L1400
+	cbnz	w0, .L1408
 	ldr	w0, [x5, 2584]
 	ldr	w1, [x5, 2580]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	bcs	.L1401
-.L1400:
+	bcs	.L1409
+.L1408:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x19, 3232]
-.L1402:
+.L1410:
 	bl	FtlReadRefresh
-.L1477:
+.L1485:
 	add	x21, x21, :lo12:.LANCHOR3
-	b	.L1478
-.L1401:
+	b	.L1486
+.L1409:
 	mov	w0, 18
 	strh	w0, [x5, 3232]
-	b	.L1402
-.L1399:
+	b	.L1410
+.L1407:
 	add	x21, x21, :lo12:.LANCHOR3
 	ldrh	w0, [x21, 124]
-	cbnz	w0, .L1456
+	cbnz	w0, .L1464
 	ldrh	w6, [x5, 2652]
 	add	w0, w6, w6, lsl 1
 	asr	w0, w0, 2
@@ -9913,55 +9966,55 @@ rk_ftl_garbage_collect:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1404
+	ble	.L1412
 	sub	w6, w6, #1
 	cmp	w7, w6
-	blt	.L1404
+	blt	.L1412
 	bl	FtlReadRefresh
-.L1478:
+.L1486:
 	ldrh	w0, [x21, 124]
-	b	.L1372
-.L1404:
-	cbnz	w1, .L1456
+	b	.L1380
+.L1412:
+	cbnz	w1, .L1464
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x19, 2416]
 	add	w0, w0, 1
-	b	.L1372
-.L1407:
+	b	.L1380
+.L1415:
 	ldrh	w1, [x0, 3320]
 	cmp	w1, w20
-	beq	.L1408
+	beq	.L1416
 	ldr	x2, [x0, 2376]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1409
+	cbnz	w1, .L1417
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-.L1409:
+.L1417:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
 	strh	w1, [x0, 2672]
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-	b	.L1408
-.L1412:
+	b	.L1416
+.L1420:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	w0, [x19, 2672]
-.L1479:
+.L1487:
 	adrp	x0, .LANCHOR3+124
 	ldrh	w0, [x0, #:lo12:.LANCHOR3+124]
-	b	.L1372
-.L1416:
+	b	.L1380
+.L1424:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1417
+	cbz	w0, .L1425
 	strh	w5, [x22, 3240]
-	b	.L1415
-.L1417:
+	b	.L1423
+.L1425:
 	ldrh	w4, [x22, 36]
 	ubfiz	x1, x6, 1, 16
 	ldrh	w0, [x22, 106]
@@ -9972,69 +10025,69 @@ rk_ftl_garbage_collect:
 	ldrh	w3, [x2, x1]
 	sdiv	w4, w0, w25
 	cmp	w3, w4
-	bgt	.L1419
+	bgt	.L1427
 	cmp	w5, 48
-	bls	.L1420
+	bls	.L1428
 	cmp	w3, 8
-	bls	.L1420
+	bls	.L1428
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1420
-.L1419:
+	bhi	.L1428
+.L1427:
 	strh	wzr, [x22, 3240]
-.L1420:
+.L1428:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1421
+	bgt	.L1429
 	cmp	w20, w23
-	bne	.L1421
+	bne	.L1429
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	wzr, [x19, 3240]
 	strh	w0, [x19, 2672]
-	b	.L1479
-.L1421:
-	cbnz	w1, .L1422
+	b	.L1487
+.L1429:
+	cbnz	w1, .L1430
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1415
-.L1422:
+	b	.L1423
+.L1430:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0, 2680]
 	ldrh	w0, [x0, 2424]
 	cmp	w0, w6
-	bne	.L1423
+	bne	.L1431
 	adrp	x0, .LC1
 	mov	w2, 658
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1423:
+	bl	sftl_printk
+.L1431:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2472]
 	cmp	w1, w0
-	bne	.L1424
+	bne	.L1432
 	adrp	x0, .LC1
 	mov	w2, 659
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1424:
+	bl	sftl_printk
+.L1432:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2520]
 	cmp	w1, w0
-	bne	.L1425
+	bne	.L1433
 	adrp	x0, .LC1
 	mov	w2, 660
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1425:
+	bl	sftl_printk
+.L1433:
 	add	x23, x19, :lo12:.LANCHOR0
 	add	x22, x23, 2672
 	mov	x0, x22
@@ -10048,7 +10101,7 @@ rk_ftl_garbage_collect:
 	strh	w1, [x0, 128]
 	strh	wzr, [x23, 2674]
 	strb	wzr, [x23, 2678]
-.L1414:
+.L1422:
 	bl	FtlReadRefresh
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 1
@@ -10057,14 +10110,14 @@ rk_ftl_garbage_collect:
 	ldrh	w0, [x0, 2674]
 	add	w1, w0, w21
 	cmp	w1, w26
-	ble	.L1426
+	ble	.L1434
 	sub	w21, w26, w0
 	and	w21, w21, 65535
-.L1426:
+.L1434:
 	mov	w25, 0
-.L1427:
+.L1435:
 	cmp	w21, w25, uxth
-	bls	.L1435
+	bls	.L1443
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w23, 0
 	add	x3, x0, 2688
@@ -10073,11 +10126,11 @@ rk_ftl_garbage_collect:
 	ldrh	w4, [x0, 2674]
 	ldrh	w7, [x0, 36]
 	add	w4, w4, w25
-	b	.L1436
-.L1429:
+	b	.L1444
+.L1437:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1428
+	beq	.L1436
 	ldr	x5, [x0, 3280]
 	ubfiz	x8, x23, 5, 16
 	add	w23, w23, 1
@@ -10085,13 +10138,13 @@ rk_ftl_garbage_collect:
 	add	x5, x5, x8
 	and	w23, w23, 65535
 	str	w2, [x5, 4]
-.L1428:
+.L1436:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1436:
+.L1444:
 	cmp	w1, w7
-	bne	.L1429
+	bne	.L1437
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w1, w23
 	mov	x27, 0
@@ -10100,32 +10153,32 @@ rk_ftl_garbage_collect:
 	bl	FlashReadPages
 	ubfiz	x0, x23, 5, 16
 	str	x0, [x29, 104]
-.L1430:
+.L1438:
 	ldr	x0, [x29, 104]
 	cmp	x27, x0
-	bne	.L1434
+	bne	.L1442
 	add	w25, w25, 1
-	b	.L1427
-.L1434:
+	b	.L1435
+.L1442:
 	ldr	x0, [x22, 3280]
 	add	x1, x0, x27
 	ldr	w0, [x0, x27]
 	cmn	w0, #1
-	beq	.L1431
+	beq	.L1439
 	ldr	x23, [x1, 16]
 	mov	w0, 61589
 	ldrh	w1, [x23]
 	cmp	w1, w0
-	bne	.L1431
+	bne	.L1439
 	ldr	w28, [x23, 8]
 	cmn	w28, #1
-	bne	.L1432
+	bne	.L1440
 	adrp	x0, .LC1
 	mov	w2, 696
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1432:
+	bl	sftl_printk
+.L1440:
 	mov	w2, 0
 	add	x1, x29, 124
 	mov	w0, w28
@@ -10135,7 +10188,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, x27
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1431
+	bne	.L1439
 	adrp	x28, .LANCHOR3
 	add	x2, x28, :lo12:.LANCHOR3
 	ldr	w0, [x0, 24]
@@ -10175,21 +10228,21 @@ rk_ftl_garbage_collect:
 	ldrb	w1, [x22, 2527]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1433
+	beq	.L1441
 	ldrh	w0, [x22, 2524]
-	cbnz	w0, .L1431
-.L1433:
+	cbnz	w0, .L1439
+.L1441:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1431
+	cbz	w0, .L1439
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x28, x28, :lo12:.LANCHOR3
 	str	wzr, [x19, 4000]
 	ldrh	w0, [x28, 124]
-	b	.L1372
-.L1431:
+	b	.L1380
+.L1439:
 	add	x27, x27, 32
-	b	.L1430
-.L1435:
+	b	.L1438
+.L1443:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2674]
 	add	w21, w21, w0
@@ -10197,57 +10250,57 @@ rk_ftl_garbage_collect:
 	strh	w21, [x1, 2674]
 	cmp	w26, w21
 	adrp	x21, .LANCHOR3
-	bls	.L1437
+	bls	.L1445
 	add	x0, x21, :lo12:.LANCHOR3
 	ldrh	w1, [x0, 126]
 	ldrh	w0, [x0, 128]
 	cmp	w1, w0
-	bne	.L1438
-.L1437:
+	bne	.L1446
+.L1445:
 	add	x22, x19, :lo12:.LANCHOR0
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1439
+	cbz	w0, .L1447
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1439
+	cbz	w0, .L1447
 	str	wzr, [x22, 4000]
-	b	.L1477
-.L1439:
+	b	.L1485
+.L1447:
 	add	x0, x21, :lo12:.LANCHOR3
 	ldrh	w0, [x0, 126]
-	cbnz	w0, .L1440
+	cbnz	w0, .L1448
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2672]
 	ldr	x2, [x1, 2376]
 	lsl	x0, x0, 1
 	ldrh	w3, [x2, x0]
-	cbz	w3, .L1440
+	cbz	w3, .L1448
 	strh	wzr, [x2, x0]
 	ldrh	w0, [x1, 2672]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1440:
+.L1448:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 2672]
-.L1438:
+.L1446:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2416]
 	cmp	w0, 2
-	bhi	.L1441
+	bhi	.L1449
 	ldrh	w21, [x1, 106]
-	b	.L1413
-.L1441:
+	b	.L1421
+.L1449:
 	add	x21, x21, :lo12:.LANCHOR3
 	str	wzr, [x1, 4000]
 	ldrh	w1, [x21, 124]
 	cmp	w1, 0
 	csinc	w0, w1, w0, ne
-	b	.L1372
-.L1444:
+	b	.L1380
+.L1452:
 	mov	w0, 0
-	b	.L1372
+	b	.L1380
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
 	.global	sftl_gc
@@ -10277,13 +10330,13 @@ FtlRead:
 	mov	w27, w2
 	stp	x21, x22, [sp, 32]
 	stp	x25, x26, [sp, 64]
-	bne	.L1483
+	bne	.L1491
 	mov	x2, x3
 	mov	w1, w27
 	add	w0, w19, 256
 	bl	FtlVendorPartRead
 	mov	w21, w0
-.L1482:
+.L1490:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -10292,7 +10345,7 @@ FtlRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1483:
+.L1491:
 	add	w0, w1, w2
 	str	w0, [x29, 128]
 	adrp	x0, .LANCHOR0
@@ -10301,11 +10354,11 @@ FtlRead:
 	str	x0, [x29, 96]
 	ldr	w1, [x25, 144]
 	cmp	w2, w1
-	bhi	.L1503
+	bhi	.L1511
 	adrp	x0, .LANCHOR2
 	ldr	w21, [x0, #:lo12:.LANCHOR2]
 	cmn	w21, #1
-	beq	.L1482
+	beq	.L1490
 	bl	FtlCacheWriteBack
 	mov	w28, 0
 	ldrh	w0, [x25, 62]
@@ -10322,42 +10375,42 @@ FtlRead:
 	add	w22, w22, 1
 	add	w0, w0, w22
 	str	w0, [x25, 2588]
-.L1485:
-	cbnz	w22, .L1501
+.L1493:
+	cbnz	w22, .L1509
 	ldr	x0, [x29, 96]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3324]
-	cbnz	w1, .L1502
+	cbnz	w1, .L1510
 	ldrh	w0, [x0, 2416]
 	cmp	w0, 31
-	bhi	.L1482
-.L1502:
+	bhi	.L1490
+.L1510:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1482
-.L1501:
+	b	.L1490
+.L1509:
 	add	x1, x29, 156
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
 	ldr	w1, [x29, 156]
 	cmn	w1, #1
-	bne	.L1486
+	bne	.L1494
 	mov	w5, 0
-.L1487:
+.L1495:
 	ldrh	w0, [x25, 62]
 	cmp	w5, w0
-	bcc	.L1489
-.L1490:
+	bcc	.L1497
+.L1498:
 	add	w20, w20, 1
 	subs	w22, w22, #1
-	beq	.L1494
+	beq	.L1502
 	ldrh	w0, [x25, 36]
 	cmp	w28, w0, lsl 2
-	bne	.L1485
-.L1494:
-	cbz	w28, .L1485
+	bne	.L1493
+.L1502:
+	cbz	w28, .L1493
 	ldr	x0, [x25, 4016]
 	mov	w1, w28
 	mov	w2, 0
@@ -10374,54 +10427,54 @@ FtlRead:
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
 	str	x0, [x29, 104]
-.L1500:
+.L1508:
 	ldr	x0, [x25, 4016]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
 	cmp	w26, w1
-	bne	.L1496
+	bne	.L1504
 	ldr	x1, [x0, 8]
 	ldr	x0, [x25, 3992]
 	cmp	x1, x0
-	bne	.L1497
+	bne	.L1505
 	ldr	x0, [x29, 120]
 	ldr	w2, [x29, 116]
 	add	x1, x1, x0
 	mov	x0, x23
-.L1513:
+.L1521:
 	bl	ftl_memcpy
-.L1497:
+.L1505:
 	ldr	x0, [x25, 4016]
 	add	x1, x0, x28
 	ldr	w2, [x0, x28]
 	cmn	w2, #1
-	bne	.L1498
+	bne	.L1506
 	ldr	w0, [x25, 2792]
 	mov	w21, w2
 	add	w0, w0, 1
 	str	w0, [x25, 2792]
-.L1498:
+.L1506:
 	ldr	w0, [x1]
 	cmp	w0, 256
-	bne	.L1499
+	bne	.L1507
 	ldr	w0, [x1, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1499:
+.L1507:
 	ldr	x0, [x29, 104]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1500
+	bne	.L1508
 	mov	w28, 0
-	b	.L1485
-.L1489:
+	b	.L1493
+.L1497:
 	madd	w0, w20, w0, w5
 	cmp	w19, w0
-	bhi	.L1488
+	bhi	.L1496
 	ldr	w1, [x29, 128]
 	cmp	w1, w0
-	bls	.L1488
+	bls	.L1496
 	sub	w0, w0, w19
 	str	w5, [x29, 120]
 	lsl	w0, w0, 9
@@ -10430,17 +10483,17 @@ FtlRead:
 	add	x0, x23, x0
 	bl	ftl_memset
 	ldr	w5, [x29, 120]
-.L1488:
+.L1496:
 	add	w5, w5, 1
-	b	.L1487
-.L1486:
+	b	.L1495
+.L1494:
 	ldr	x0, [x25, 4016]
 	ubfiz	x2, x28, 5, 32
 	cmp	w20, w26
 	add	x0, x0, x2
 	str	w1, [x0, 4]
 	ldrh	w0, [x25, 62]
-	bne	.L1491
+	bne	.L1499
 	ldr	x1, [x25, 4016]
 	ldr	x5, [x25, 3992]
 	add	x1, x1, x2
@@ -10453,9 +10506,9 @@ FtlRead:
 	csel	w3, w27, w5, ls
 	str	w3, [x29, 136]
 	cmp	w3, w0
-	bne	.L1492
+	bne	.L1500
 	str	x23, [x1, 8]
-.L1492:
+.L1500:
 	ldr	x0, [x25, 4016]
 	ldr	x1, [x25, 3984]
 	add	x2, x0, x2
@@ -10466,10 +10519,10 @@ FtlRead:
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1490
-.L1491:
+	b	.L1498
+.L1499:
 	cmp	w20, w24
-	bne	.L1493
+	bne	.L1501
 	ldr	x5, [x25, 4016]
 	ldr	x1, [x25, 3976]
 	add	x5, x5, x2
@@ -10479,13 +10532,13 @@ FtlRead:
 	sub	w3, w3, w1
 	str	w3, [x29, 132]
 	cmp	w0, w3
-	bne	.L1492
+	bne	.L1500
 	sub	w1, w1, w19
 	lsl	w1, w1, 9
 	add	x1, x23, x1
 	str	x1, [x5, 8]
-	b	.L1492
-.L1493:
+	b	.L1500
+.L1501:
 	ldr	x1, [x25, 4016]
 	mul	w0, w0, w20
 	add	x1, x1, x2
@@ -10493,24 +10546,24 @@ FtlRead:
 	lsl	w0, w0, 9
 	add	x0, x23, x0
 	str	x0, [x1, 8]
-	b	.L1492
-.L1496:
+	b	.L1500
+.L1504:
 	cmp	w24, w1
-	bne	.L1497
+	bne	.L1505
 	ldr	x1, [x0, 8]
 	ldr	x0, [x25, 3976]
 	cmp	x1, x0
-	bne	.L1497
+	bne	.L1505
 	ldrh	w0, [x25, 62]
 	ldr	w2, [x29, 112]
 	mul	w0, w0, w24
 	sub	w0, w0, w19
 	lsl	w0, w0, 9
 	add	x0, x23, x0
-	b	.L1513
-.L1503:
+	b	.L1521
+.L1511:
 	mov	w21, -1
-	b	.L1482
+	b	.L1490
 	.size	FtlRead, .-FtlRead
 	.align	2
 	.global	sftl_read
@@ -10542,12 +10595,12 @@ FtlWrite:
 	mov	x27, x3
 	stp	x19, x20, [sp, 16]
 	stp	x21, x22, [sp, 32]
-	bne	.L1517
+	bne	.L1525
 	mov	x2, x3
 	mov	w1, w26
 	add	w0, w23, 256
 	bl	FtlVendorPartWrite
-.L1516:
+.L1524:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -10555,18 +10608,18 @@ FtlWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 224
 	ret
-.L1517:
+.L1525:
 	add	w3, w1, w2
 	adrp	x20, .LANCHOR0
 	add	x2, x20, :lo12:.LANCHOR0
 	ldr	w0, [x2, 144]
 	cmp	w3, w0
-	bhi	.L1559
+	bhi	.L1567
 	adrp	x1, .LANCHOR2
 	str	x1, [x29, 136]
 	ldr	w0, [x1, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1516
+	beq	.L1524
 	ldrh	w1, [x2, 62]
 	adrp	x4, .LANCHOR3
 	sub	w3, w3, #1
@@ -10583,56 +10636,56 @@ FtlWrite:
 	add	w25, w24, 1
 	add	w0, w0, w25
 	str	w0, [x2, 2596]
-	cbz	x3, .L1519
+	cbz	x3, .L1527
 	ldr	w0, [x3, 24]
 	cmp	w22, w0
-	beq	.L1520
+	beq	.L1528
 	bl	FtlCacheWriteBack
-.L1519:
+.L1527:
 	ldr	x0, [x29, 136]
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR2
 	ldr	w0, [x0, 8]
-	cbz	w0, .L1561
+	cbz	w0, .L1569
 	ldrh	w1, [x19, 2428]
 	add	x0, x19, 2424
 	add	x19, x19, 2472
 	cmp	w1, 0
 	csel	x19, x19, x0, eq
-.L1522:
+.L1530:
 	adrp	x0, .LANCHOR1
 	mov	w21, w22
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 672
 	str	x0, [x29, 160]
-.L1523:
-	cbz	w25, .L1557
+.L1531:
+	cbz	w25, .L1565
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1524
+	bcc	.L1532
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1012
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1524:
+	bl	sftl_printk
+.L1532:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1525
+	cbnz	w0, .L1533
 	bl	FtlCacheWriteBack
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x1, x0, 2424
 	cmp	x19, x1
-	bne	.L1526
+	bne	.L1534
 	add	x0, x0, 2472
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1527
+	cbnz	w1, .L1535
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1527:
+.L1535:
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x24, x19, 2424
 	add	x19, x19, 2472
@@ -10643,12 +10696,12 @@ FtlWrite:
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
 	csel	x19, x19, x24, ne
-.L1528:
+.L1536:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1525
+	cbnz	w0, .L1533
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-.L1525:
+.L1533:
 	ldrh	w0, [x19, 4]
 	ldrb	w1, [x19, 7]
 	cmp	w0, w25
@@ -10661,29 +10714,29 @@ FtlWrite:
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1529
+	bcc	.L1537
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1045
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1529:
+	bl	sftl_printk
+.L1537:
 	str	xzr, [x29, 168]
-.L1530:
+.L1538:
 	ldr	w1, [x29, 132]
 	ldr	w28, [x29, 168]
 	cmp	w28, w1
-	bcc	.L1551
+	bcc	.L1559
 	mov	x28, x1
-.L1531:
+.L1539:
 	ldr	x0, [x29, 104]
 	add	x0, x0, :lo12:.LANCHOR3
 	ldr	x0, [x0, -56]
-	cbz	x0, .L1552
+	cbz	x0, .L1560
 	sub	w25, w25, #1
 	subs	w28, w28, #1
-	bne	.L1552
-.L1557:
+	bne	.L1560
+.L1565:
 	ldr	w0, [x29, 148]
 	add	x20, x20, :lo12:.LANCHOR0
 	sub	w1, w0, w22
@@ -10691,20 +10744,20 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x20, 2416]
 	cmp	w0, 15
-	bhi	.L1554
+	bhi	.L1562
 	mov	w21, 65535
 	mov	w19, 128
-.L1577:
+.L1585:
 	ldrh	w0, [x20, 2672]
 	cmp	w0, w21
-	bne	.L1558
+	bne	.L1566
 	ldrh	w0, [x20, 3320]
 	cmp	w0, w21
-	bne	.L1558
+	bne	.L1566
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L1558:
+.L1566:
 	mov	w1, 1
 	strh	w19, [x20, 3234]
 	mov	w0, w1
@@ -10715,9 +10768,9 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x20, 2416]
 	cmp	w0, 8
-	bls	.L1577
-	b	.L1554
-.L1520:
+	bls	.L1585
+	b	.L1562
+.L1528:
 	ldr	w0, [x2, 2600]
 	ldr	x3, [x3, 8]
 	add	w0, w0, 1
@@ -10732,36 +10785,36 @@ FtlWrite:
 	mov	x1, x27
 	mov	w2, w21
 	bl	ftl_memcpy
-	cbnz	w24, .L1521
-.L1554:
+	cbnz	w24, .L1529
+.L1562:
 	mov	w0, 0
-	b	.L1516
-.L1521:
+	b	.L1524
+.L1529:
 	sub	w26, w26, w19
 	add	w23, w23, w19
 	add	x27, x27, x21
 	add	w22, w22, 1
 	bl	FtlCacheWriteBack
 	mov	w25, w24
-	b	.L1519
-.L1561:
+	b	.L1527
+.L1569:
 	add	x19, x19, 2424
-	b	.L1522
-.L1526:
+	b	.L1530
+.L1534:
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1564
+	cbnz	w0, .L1572
 	mov	x0, x19
 	bl	allocate_new_data_superblock
-	b	.L1528
-.L1564:
+	b	.L1536
+.L1572:
 	mov	x19, x1
-	b	.L1525
-.L1551:
+	b	.L1533
+.L1559:
 	ldrh	w0, [x19, 4]
-	cbz	w0, .L1531
+	cbz	w0, .L1539
 	add	x1, x29, 188
 	mov	w2, 0
 	mov	w0, w21
@@ -10794,9 +10847,9 @@ FtlWrite:
 	cmp	w21, w22
 	ldr	x3, [x29, 152]
 	ccmp	w21, w0, 4, ne
-	bne	.L1532
+	bne	.L1540
 	cmp	w21, w22
-	bne	.L1533
+	bne	.L1541
 	ldrh	w2, [x3, 62]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
@@ -10805,29 +10858,29 @@ FtlWrite:
 	cmp	w2, w26
 	csel	w0, w2, w26, ls
 	str	w0, [x29, 152]
-.L1534:
+.L1542:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w2, [x29, 152]
 	ldrh	w1, [x0, 62]
 	cmp	w2, w1
-	bne	.L1535
+	bne	.L1543
 	ldr	x0, [x0, 4032]
 	cmp	w21, w22
 	add	x24, x0, x24
-	bne	.L1536
+	bne	.L1544
 	str	x27, [x24, 8]
-.L1537:
+.L1545:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrb	w1, [x19, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1548
+	bcc	.L1556
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1119
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1548:
+	bl	sftl_printk
+.L1556:
 	ldp	x1, x2, [x29, 112]
 	mov	w0, -3947
 	strh	w0, [x1, x2]
@@ -10846,35 +10899,35 @@ FtlWrite:
 	ldr	x0, [x29, 168]
 	add	x0, x0, 1
 	str	x0, [x29, 168]
-	b	.L1530
-.L1533:
+	b	.L1538
+.L1541:
 	ldrh	w0, [x3, 62]
 	add	w2, w23, w26
 	str	wzr, [x29, 144]
 	msub	w2, w21, w0, w2
 	and	w0, w2, 65535
 	str	w0, [x29, 152]
-	b	.L1534
-.L1536:
+	b	.L1542
+.L1544:
 	ldr	w0, [x29, 152]
-.L1580:
+.L1588:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
 	add	x0, x27, x0
 	str	x0, [x24, 8]
-	b	.L1537
-.L1535:
+	b	.L1545
+.L1543:
 	ldr	x1, [x0, 4032]
 	cmp	w21, w22
 	add	x1, x1, x24
-	bne	.L1538
+	bne	.L1546
 	ldr	x0, [x0, 3992]
-.L1579:
+.L1587:
 	str	x0, [x1, 8]
 	ldr	w0, [x29, 188]
 	cmn	w0, #1
-	beq	.L1540
+	beq	.L1548
 	add	x3, x20, :lo12:.LANCHOR0
 	str	w0, [x29, 196]
 	str	w21, [x29, 216]
@@ -10890,16 +10943,16 @@ FtlWrite:
 	ldr	w0, [x29, 192]
 	ldr	x3, [x29, 96]
 	cmn	w0, #1
-	bne	.L1541
+	bne	.L1549
 	ldr	w0, [x3, 2792]
 	add	w0, w0, 1
 	str	w0, [x3, 2792]
-.L1544:
+.L1552:
 	ldr	w0, [x29, 152]
 	cmp	w21, w22
 	lsl	w2, w0, 9
 	add	x0, x20, :lo12:.LANCHOR0
-	bne	.L1545
+	bne	.L1553
 	ldr	x1, [x0, 4032]
 	ldr	w0, [x29, 144]
 	add	x1, x1, x24
@@ -10910,10 +10963,10 @@ FtlWrite:
 	bl	ftl_memcpy
 	ldr	w0, [x29, 148]
 	cmp	w21, w0
-	bne	.L1537
-.L1546:
+	bne	.L1545
+.L1554:
 	ldrh	w0, [x19, 4]
-	cbz	w0, .L1537
+	cbz	w0, .L1545
 	ldr	x0, [x29, 104]
 	add	x1, x0, :lo12:.LANCHOR3
 	add	x0, x20, :lo12:.LANCHOR0
@@ -10921,33 +10974,33 @@ FtlWrite:
 	str	x19, [x1, 112]
 	add	x24, x0, x24
 	str	x24, [x1, -56]
-	b	.L1537
-.L1538:
+	b	.L1545
+.L1546:
 	ldr	x0, [x0, 3976]
-	b	.L1579
-.L1541:
+	b	.L1587
+.L1549:
 	ldr	w0, [x28, 8]
 	cmp	w21, w0
-	beq	.L1543
+	beq	.L1551
 	ldr	w0, [x3, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
 	str	w0, [x3, 2792]
-	adrp	x0, .LC105
-	add	x0, x0, :lo12:.LC105
+	adrp	x0, .LC109
+	add	x0, x0, :lo12:.LC109
 	ldr	w1, [x28, 8]
-	bl	printk
-.L1543:
+	bl	sftl_printk
+.L1551:
 	ldr	w0, [x28, 8]
 	cmp	w21, w0
-	beq	.L1544
+	beq	.L1552
 	ldr	x1, [x29, 160]
 	mov	w2, 1098
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L1544
-.L1540:
+	bl	sftl_printk
+	b	.L1552
+.L1548:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	x0, [x1, 4032]
 	ldrh	w2, [x1, 114]
@@ -10955,8 +11008,8 @@ FtlWrite:
 	add	x0, x0, x24
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1544
-.L1545:
+	b	.L1552
+.L1553:
 	ldrh	w1, [x0, 62]
 	ldr	x0, [x0, 4032]
 	add	x0, x0, x24
@@ -10966,13 +11019,13 @@ FtlWrite:
 	lsl	w1, w1, 9
 	add	x1, x27, x1
 	bl	ftl_memcpy
-	b	.L1546
-.L1532:
+	b	.L1554
+.L1540:
 	ldr	x0, [x3, 4032]
 	add	x24, x0, x24
 	ldrh	w0, [x3, 62]
-	b	.L1580
-.L1552:
+	b	.L1588
+.L1560:
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x3, x19
 	mov	w2, 0
@@ -10980,18 +11033,18 @@ FtlWrite:
 	ldr	x0, [x0, 4032]
 	bl	FtlProgPages
 	cmp	w25, w28
-	bcs	.L1555
+	bcs	.L1563
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
 	mov	w2, 1134
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1555:
+	bl	sftl_printk
+.L1563:
 	sub	w25, w25, w28
-	b	.L1523
-.L1559:
+	b	.L1531
+.L1567:
 	mov	w0, -1
-	b	.L1516
+	b	.L1524
 	.size	FtlWrite, .-FtlWrite
 	.align	2
 	.global	sftl_write
@@ -11031,16 +11084,16 @@ FtlLoadSysInfo:
 	ldrh	w0, [x19, 2656]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1584
-.L1592:
+	bne	.L1592
+.L1600:
 	mov	w0, -1
-.L1583:
+.L1591:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1584:
+.L1592:
 	add	x23, x19, 2656
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
@@ -11050,30 +11103,30 @@ FtlLoadSysInfo:
 	strh	w0, [x23, 2]
 	mov	w23, 19539
 	movk	w23, 0x4654, lsl 16
-.L1586:
-	tbz	w22, #31, .L1589
+.L1594:
+	tbz	w22, #31, .L1597
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1437
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1588:
+	bl	sftl_printk
+.L1596:
 	add	x1, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 44]
 	ldrh	w1, [x1, 114]
 	add	x0, x0, 24
 	cmp	x1, x0, lsl 1
-	bcs	.L1591
+	bcs	.L1599
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1439
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1591:
+	bl	sftl_printk
+.L1599:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w2, 48
 	add	x21, x19, 2312
@@ -11100,13 +11153,13 @@ FtlLoadSysInfo:
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1592
+	bne	.L1600
 	ldrh	w1, [x19, 2320]
 	ldrb	w2, [x19, 2322]
 	ldrh	w0, [x19, 58]
 	strh	w1, [x19, 2662]
 	cmp	w2, w0
-	bne	.L1592
+	bne	.L1600
 	adrp	x0, .LANCHOR3+136
 	ldrh	w2, [x19, 62]
 	ldrh	w3, [x19, 36]
@@ -11123,15 +11176,15 @@ FtlLoadSysInfo:
 	sub	w0, w0, w1
 	udiv	w0, w0, w3
 	strh	w0, [x19, 2652]
-	bls	.L1593
+	bls	.L1601
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 1461
 	add	x1, x1, 688
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1593:
+	bl	sftl_printk
+.L1601:
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w3, -1
 	ldrh	w2, [x0, 2328]
@@ -11177,50 +11230,50 @@ FtlLoadSysInfo:
 	ldr	w2, [x0, 2620]
 	str	wzr, [x0, 2600]
 	cmp	w1, w2
-	bls	.L1594
+	bls	.L1602
 	str	w1, [x0, 2620]
-.L1594:
+.L1602:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2348]
 	ldr	w2, [x0, 2624]
 	cmp	w1, w2
-	bls	.L1595
+	bls	.L1603
 	str	w1, [x0, 2624]
-.L1595:
+.L1603:
 	mov	w0, 65535
 	cmp	w4, w0
-	beq	.L1596
+	beq	.L1604
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x0, x0, 2424
 	bl	make_superblock
-.L1596:
+.L1604:
 	add	x1, x20, :lo12:.LANCHOR0
 	add	x0, x1, 2472
 	ldrh	w2, [x1, 2472]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1597
+	beq	.L1605
 	bl	make_superblock
-.L1597:
+.L1605:
 	add	x1, x20, :lo12:.LANCHOR0
 	add	x0, x1, 2520
 	ldrh	w2, [x1, 2520]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1598
+	beq	.L1606
 	bl	make_superblock
-.L1598:
+.L1606:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x0, x20, 2672
 	ldrh	w2, [x20, 2672]
 	cmp	w2, w1
-	beq	.L1599
+	beq	.L1607
 	bl	make_superblock
-.L1599:
+.L1607:
 	mov	w0, 0
-	b	.L1583
-.L1589:
+	b	.L1591
+.L1597:
 	ldrh	w0, [x19, 2656]
 	mov	w2, 1
 	mov	w1, w2
@@ -11232,19 +11285,19 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1587
+	beq	.L1595
 	ldr	x0, [x19, 3432]
 	ldr	w0, [x0]
 	cmp	w0, w23
-	bne	.L1587
+	bne	.L1595
 	ldr	x0, [x19, 3440]
 	ldrh	w0, [x0]
 	cmp	w0, w24
-	beq	.L1588
-.L1587:
+	beq	.L1596
+.L1595:
 	sub	w22, w22, #1
 	sxth	w22, w22
-	b	.L1586
+	b	.L1594
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
 	.global	FtlSysBlkInit
@@ -11266,20 +11319,20 @@ FtlSysBlkInit:
 	ldrh	w1, [x19, 2656]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1606
-.L1608:
+	bne	.L1614
+.L1616:
 	mov	w24, -1
-.L1605:
+.L1613:
 	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1606:
+.L1614:
 	bl	FtlLoadSysInfo
 	mov	w24, w0
-	cbnz	w0, .L1608
+	cbnz	w0, .L1616
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -11293,19 +11346,19 @@ FtlSysBlkInit:
 	mov	w0, 0
 	ldrh	w3, [x19, 142]
 	add	x1, x1, 4
-.L1609:
+.L1617:
 	cmp	w0, w3
-	bge	.L1614
+	bge	.L1622
 	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1610
-.L1614:
+	tbz	w2, #31, .L1618
+.L1622:
 	add	x1, x20, :lo12:.LANCHOR0
 	cmp	w0, w3
 	ldrh	w2, [x1, 2340]
 	add	w2, w2, 1
 	strh	w2, [x1, 2340]
-	bge	.L1620
-.L1611:
+	bge	.L1628
+.L1619:
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x21, x21, :lo12:.LANCHOR3
 	add	x23, x19, 2424
@@ -11346,26 +11399,26 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1615
-.L1610:
+	b	.L1623
+.L1618:
 	add	w0, w0, 1
-	b	.L1609
-.L1620:
+	b	.L1617
+.L1628:
 	add	x0, x21, :lo12:.LANCHOR3
 	ldrh	w0, [x0, -32]
-	cbnz	w0, .L1611
-.L1615:
+	cbnz	w0, .L1619
+.L1623:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x22, x19, 2424
 	ldrh	w0, [x19, 2424]
 	cmp	w0, w1
-	beq	.L1616
+	beq	.L1624
 	ldrh	w1, [x19, 2428]
-	cbnz	w1, .L1616
+	cbnz	w1, .L1624
 	ldrh	w1, [x19, 2476]
 	add	x21, x19, 2472
-	cbnz	w1, .L1616
+	cbnz	w1, .L1624
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x19, 2472]
 	bl	FtlGcRefreshBlock
@@ -11373,13 +11426,13 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	x0, x21
 	bl	allocate_new_data_superblock
-.L1616:
+.L1624:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w0, [x20, 2340]
 	tst	x0, 31
-	bne	.L1605
+	bne	.L1613
 	bl	FtlVpcCheckAndModify
-	b	.L1605
+	b	.L1613
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
@@ -11397,36 +11450,36 @@ ftl_low_format:
 	ldrh	w0, [x0, 40]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1623
+	cbz	w0, .L1631
 	bl	FtlMakeBbt
-.L1623:
+.L1631:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1624:
+.L1632:
 	ldrh	w2, [x1, 62]
 	cmp	w0, w2, lsl 7
-	blt	.L1625
+	blt	.L1633
 	ldrh	w21, [x1, 44]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1626:
+.L1634:
 	ldrh	w0, [x22, 46]
 	cmp	w0, w21
-	bhi	.L1627
+	bhi	.L1635
 	ldrh	w0, [x22, 36]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1628
-.L1632:
+	bge	.L1636
+.L1640:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1629:
+.L1637:
 	ldrh	w0, [x19, 44]
 	cmp	w0, w22
-	bhi	.L1633
+	bhi	.L1641
 	ldrh	w2, [x19, 36]
 	ldr	w1, [x19, 48]
 	ldrh	w0, [x19, 46]
@@ -11439,28 +11492,28 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1634
+	ble	.L1642
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2584]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2652]
-.L1634:
+.L1642:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 98]
-	cbz	w1, .L1636
+	cbz	w1, .L1644
 	ldrh	w5, [x0, 2652]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2652]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1636
+	bge	.L1644
 	add	w1, w1, 32
 	str	w4, [x0, 2584]
 	add	w1, w3, w1
 	strh	w1, [x0, 2652]
-.L1636:
+.L1644:
 	add	x19, x20, :lo12:.LANCHOR0
 	adrp	x22, .LANCHOR3
 	add	x21, x19, 2424
@@ -11498,20 +11551,20 @@ ftl_low_format:
 	strh	wzr, [x19, 2424]
 	str	wzr, [x19, 2580]
 	bl	ftl_memset
-.L1638:
+.L1646:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1639
+	cbnz	w1, .L1647
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w23, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1638
-.L1625:
+	b	.L1646
+.L1633:
 	ldr	x5, [x1, 3992]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -11521,8 +11574,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3976]
 	str	w4, [x2, x3]
-	b	.L1624
-.L1627:
+	b	.L1632
+.L1635:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -11530,8 +11583,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1626
-.L1628:
+	b	.L1634
+.L1636:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 136]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -11540,17 +11593,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 40]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 44]
-.L1630:
+.L1638:
 	ldrh	w0, [x21, 46]
 	cmp	w0, w19
-	bls	.L1632
+	bls	.L1640
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1630
-.L1633:
+	b	.L1638
+.L1641:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -11558,8 +11611,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1629
-.L1639:
+	b	.L1637
+.L1647:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -11579,20 +11632,20 @@ ftl_low_format:
 	strb	w1, [x19, 2480]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1640:
+.L1648:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1641
+	cbnz	w1, .L1649
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1640
-.L1641:
+	b	.L1648
+.L1649:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
@@ -11616,11 +11669,11 @@ ftl_low_format:
 	str	w0, [x19, 2620]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1642
+	cbnz	w0, .L1650
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1642:
+.L1650:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
@@ -11644,7 +11697,7 @@ sftl_init:
 	str	w0, [x20, #:lo12:.LANCHOR2]
 	adrp	x0, .LC71
 	add	x0, x0, :lo12:.LC71
-	bl	printk
+	bl	sftl_printk
 	mov	x0, x19
 	bl	FtlConstantsInit
 	bl	FtlMemInit
@@ -11652,22 +11705,22 @@ sftl_init:
 	ldrh	w0, [x19, 40]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	w0, .L1651
+	cbnz	w0, .L1659
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1651
+	cbnz	w0, .L1659
 	mov	w0, 1
 	str	w0, [x20, #:lo12:.LANCHOR2]
 	ldrh	w0, [x19, 2416]
 	cmp	w0, 15
-	bhi	.L1651
+	bhi	.L1659
 	mov	w19, 8129
-.L1650:
+.L1658:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	subs	w19, w19, #1
-	bne	.L1650
-.L1651:
+	bne	.L1658
+.L1659:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -11691,11 +11744,11 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR3
 	add	x2, x2, :lo12:.LANCHOR3
 	ldr	x3, [x2, 144]
-	cbnz	x3, .L1658
+	cbnz	x3, .L1666
 	stp	x0, x1, [x2, 144]
 	mov	w0, 0
 	ret
-.L1658:
+.L1666:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -11703,75 +11756,65 @@ rk_sftl_vendor_dev_ops_register:
 	.global	rk_sftl_vendor_storage_init
 	.type	rk_sftl_vendor_storage_init, %function
 rk_sftl_vendor_storage_init:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -80]!
 	mov	w0, 65536
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR3
 	stp	x21, x22, [sp, 32]
-	add	x21, x20, :lo12:.LANCHOR3
+	add	x22, x20, :lo12:.LANCHOR3
 	stp	x23, x24, [sp, 48]
 	stp	x25, x26, [sp, 64]
-	str	x27, [sp, 80]
 	bl	ftl_malloc
-	str	x0, [x21, 160]
-	cbz	x0, .L1665
-	adrp	x25, .LC106
-	mov	w27, 22084
-	add	x25, x25, :lo12:.LC106
-	mov	w26, 0
+	str	x0, [x22, 160]
+	cbz	x0, .L1673
+	mov	w26, 22084
+	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
-	movk	w27, 0x524b, lsl 16
-.L1663:
-	ldr	x3, [x21, 144]
+	movk	w26, 0x524b, lsl 16
+.L1671:
+	ldr	x3, [x22, 144]
 	mov	w1, 128
-	ldr	x2, [x21, 160]
+	ldr	x2, [x22, 160]
 	lsl	w0, w23, 7
 	blr	x3
-	mov	w22, w0
-	cbnz	w0, .L1661
-	ldr	x0, [x21, 160]
-	add	x1, x0, 61440
-	ldr	w3, [x0, 4]
-	ldr	w2, [x1, 4092]
-	ldr	w1, [x0]
-	mov	x0, x25
-	bl	printk
-	ldr	x19, [x21, 160]
+	mov	w21, w0
+	cbnz	w0, .L1669
+	ldr	x19, [x22, 160]
 	ldr	w0, [x19]
-	cmp	w0, w27
-	bne	.L1662
+	cmp	w0, w26
+	bne	.L1670
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1662
+	bne	.L1670
 	cmp	w0, w24
-	bls	.L1662
-	mov	w26, w23
+	bls	.L1670
+	mov	w25, w23
 	mov	w24, w0
-.L1662:
+.L1670:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1663
-	cbz	w24, .L1664
+	bne	.L1671
+	cbz	w24, .L1672
 	add	x0, x20, :lo12:.LANCHOR3
 	mov	x2, x19
 	mov	w1, 128
 	ldr	x3, [x0, 144]
-	lsl	w0, w26, 7
+	lsl	w0, w25, 7
 	blr	x3
-	mov	w22, w0
-	cbz	w0, .L1659
-.L1661:
+	mov	w21, w0
+	cbz	w0, .L1667
+.L1669:
 	add	x20, x20, :lo12:.LANCHOR3
-	mov	w22, -1
+	mov	w21, -1
 	ldr	x0, [x20, 160]
 	bl	kfree
 	str	xzr, [x20, 160]
-	b	.L1659
-.L1664:
+	b	.L1667
+.L1672:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -11784,18 +11827,17 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1659:
-	mov	w0, w22
-	ldr	x27, [sp, 80]
+.L1667:
+	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 80
 	ret
-.L1665:
-	mov	w22, -12
-	b	.L1659
+.L1673:
+	mov	w21, -12
+	b	.L1667
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -11803,20 +11845,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR3+160
 	ldr	x4, [x3, #:lo12:.LANCHOR3+160]
-	cbz	x4, .L1673
+	cbz	x4, .L1681
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1670:
+.L1678:
 	cmp	w3, w6
-	bcc	.L1672
-.L1673:
+	bcc	.L1680
+.L1681:
 	mov	w0, -1
 	ret
-.L1672:
+.L1680:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1671
+	bne	.L1679
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -11834,9 +11876,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1671:
+.L1679:
 	add	w3, w3, 1
-	b	.L1670
+	b	.L1678
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -11852,7 +11894,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 160]
-	cbz	x19, .L1693
+	cbz	x19, .L1701
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -11861,12 +11903,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1680:
+.L1688:
 	cmp	w20, w3
-	bcc	.L1688
+	bcc	.L1696
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1693
+	bhi	.L1701
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -11886,11 +11928,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1695
-.L1688:
+	b	.L1703
+.L1696:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1681
+	bne	.L1689
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -11898,17 +11940,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1682
+	bls	.L1690
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1693
+	bhi	.L1701
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1683:
+.L1691:
 	cmp	w20, w26
-	bcc	.L1684
+	bcc	.L1692
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -11925,7 +11967,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1695:
+.L1703:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR3
@@ -11944,7 +11986,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1678:
+.L1686:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -11952,7 +11994,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1684:
+.L1692:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -11976,21 +12018,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1683
-.L1682:
+	b	.L1691
+.L1690:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1695
-.L1681:
+	b	.L1703
+.L1689:
 	add	w20, w20, 1
-	b	.L1680
-.L1693:
+	b	.L1688
+.L1701:
 	mov	w0, -1
-	b	.L1678
+	b	.L1686
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12004,19 +12046,19 @@ rk_sftl_vendor_storage_ioctl:
 	str	x21, [sp, 32]
 	mov	w21, w1
 	bl	ftl_malloc
-	cbz	x0, .L1710
+	cbz	x0, .L1718
 	mov	w1, 30209
 	mov	x19, x0
 	movk	w1, 0x4004, lsl 16
 	cmp	w21, w1
-	beq	.L1699
+	beq	.L1707
 	add	w1, w1, 1
 	cmp	w21, w1
-	beq	.L1700
-.L1720:
+	beq	.L1708
+.L1728:
 	mov	x20, -14
-	b	.L1698
-.L1699:
+	b	.L1706
+.L1707:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12029,34 +12071,34 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1706
+	cbz	x3, .L1714
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1728
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L1704
-.L1705:
+	beq	.L1712
+.L1713:
 	mov	x20, -1
-.L1698:
+.L1706:
 	mov	x0, x19
 	bl	kfree
-.L1696:
+.L1704:
 	mov	x0, x20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1704:
+.L1712:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_read
 	cmn	w0, #1
-	beq	.L1705
+	beq	.L1713
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
@@ -12067,14 +12109,14 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1720
+	cbz	x3, .L1728
 	mov	x0, x20
 	mov	x1, x19
 	mov	x20, 0
 	bl	__arch_copy_to_user
-	cbz	x0, .L1698
-	b	.L1720
-.L1700:
+	cbz	x0, .L1706
+	b	.L1728
+.L1708:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12087,19 +12129,19 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1706
+	cbz	x3, .L1714
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1728
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1705
+	bne	.L1713
 	ldrh	w2, [x19, 6]
 	cmp	w2, 4087
-	bhi	.L1705
+	bhi	.L1713
 	add	w2, w2, 8
 	mov	x0, x20
 	sxtw	x2, w2
@@ -12109,28 +12151,28 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1708
+	cbz	x3, .L1716
 	mov	x1, x20
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1728
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1698
-.L1706:
+	b	.L1706
+.L1714:
 	str	xzr, [x19]
-	b	.L1720
-.L1708:
+	b	.L1728
+.L1716:
 	mov	w1, 0
 	mov	x0, x19
 	bl	memset
-	b	.L1720
-.L1710:
+	b	.L1728
+.L1718:
 	mov	x20, -1
-	b	.L1696
+	b	.L1704
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -12296,169 +12338,169 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3767, %object
-	.size	__func__.3767, 17
-__func__.3767:
+	.type	__func__.3769, %object
+	.size	__func__.3769, 17
+__func__.3769:
 	.string	"INSERT_DATA_LIST"
 	.zero	7
-	.type	__func__.3762, %object
-	.size	__func__.3762, 17
-__func__.3762:
+	.type	__func__.3764, %object
+	.size	__func__.3764, 17
+__func__.3764:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.3798, %object
-	.size	__func__.3798, 17
-__func__.3798:
+	.type	__func__.3800, %object
+	.size	__func__.3800, 17
+__func__.3800:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.3830, %object
-	.size	__func__.3830, 22
-__func__.3830:
+	.type	__func__.3832, %object
+	.size	__func__.3832, 22
+__func__.3832:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.3936, %object
-	.size	__func__.3936, 22
-__func__.3936:
+	.type	__func__.3938, %object
+	.size	__func__.3938, 22
+__func__.3938:
 	.string	"select_l2p_ram_region"
 	.zero	2
-	.type	__func__.4259, %object
-	.size	__func__.4259, 16
-__func__.4259:
+	.type	__func__.4261, %object
+	.size	__func__.4261, 16
+__func__.4261:
 	.string	"make_superblock"
-	.type	__func__.4434, %object
-	.size	__func__.4434, 19
-__func__.4434:
+	.type	__func__.4436, %object
+	.size	__func__.4436, 19
+__func__.4436:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.16008, %object
-	.size	__func__.16008, 15
-__func__.16008:
+	.type	__func__.16018, %object
+	.size	__func__.16018, 15
+__func__.16018:
 	.string	"FlashReadPages"
 	.zero	1
-	.type	__func__.16025, %object
-	.size	__func__.16025, 15
-__func__.16025:
+	.type	__func__.16035, %object
+	.size	__func__.16035, 15
+__func__.16035:
 	.string	"FlashProgPages"
 	.zero	1
-	.type	__func__.3872, %object
-	.size	__func__.3872, 26
-__func__.3872:
+	.type	__func__.3874, %object
+	.size	__func__.3874, 26
+__func__.3874:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.3376, %object
-	.size	__func__.3376, 11
-__func__.3376:
+	.type	__func__.3378, %object
+	.size	__func__.3378, 11
+__func__.3378:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.3602, %object
-	.size	__func__.3602, 14
-__func__.3602:
+	.type	__func__.3604, %object
+	.size	__func__.3604, 14
+__func__.3604:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
-	.type	__func__.3839, %object
-	.size	__func__.3839, 16
-__func__.3839:
+	.type	__func__.3841, %object
+	.size	__func__.3841, 16
+__func__.3841:
 	.string	"load_l2p_region"
-	.type	__func__.3897, %object
-	.size	__func__.3897, 31
-__func__.3897:
+	.type	__func__.3899, %object
+	.size	__func__.3899, 31
+__func__.3899:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.3911, %object
-	.size	__func__.3911, 16
-__func__.3911:
+	.type	__func__.3913, %object
+	.size	__func__.3913, 16
+__func__.3913:
 	.string	"FtlMapWritePage"
-	.type	__func__.3883, %object
-	.size	__func__.3883, 15
-__func__.3883:
+	.type	__func__.3885, %object
+	.size	__func__.3885, 15
+__func__.3885:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.3953, %object
-	.size	__func__.3953, 9
-__func__.3953:
+	.type	__func__.3955, %object
+	.size	__func__.3955, 9
+__func__.3955:
 	.string	"log2phys"
 	.zero	7
-	.type	__func__.4168, %object
-	.size	__func__.4168, 16
-__func__.4168:
+	.type	__func__.4170, %object
+	.size	__func__.4170, 16
+__func__.4170:
 	.string	"FtlReUsePrevPpa"
-	.type	__func__.4048, %object
-	.size	__func__.4048, 14
-__func__.4048:
+	.type	__func__.4050, %object
+	.size	__func__.4050, 14
+__func__.4050:
 	.string	"FtlScanSysBlk"
 	.zero	2
-	.type	__func__.4280, %object
-	.size	__func__.4280, 18
-__func__.4280:
+	.type	__func__.4282, %object
+	.size	__func__.4282, 18
+__func__.4282:
 	.string	"SupperBlkListInit"
 	.zero	6
-	.type	__func__.4321, %object
-	.size	__func__.4321, 14
-__func__.4321:
+	.type	__func__.4323, %object
+	.size	__func__.4323, 14
+__func__.4323:
 	.string	"ftl_check_vpc"
 	.zero	2
-	.type	__func__.4406, %object
-	.size	__func__.4406, 25
-__func__.4406:
+	.type	__func__.4408, %object
+	.size	__func__.4408, 25
+__func__.4408:
 	.string	"allocate_data_superblock"
 	.zero	7
-	.type	__func__.4447, %object
-	.size	__func__.4447, 16
-__func__.4447:
+	.type	__func__.4449, %object
+	.size	__func__.4449, 16
+__func__.4449:
 	.string	"update_vpc_list"
-	.type	__func__.4454, %object
-	.size	__func__.4454, 20
-__func__.4454:
+	.type	__func__.4456, %object
+	.size	__func__.4456, 20
+__func__.4456:
 	.string	"decrement_vpc_count"
 	.zero	4
-	.type	__func__.4202, %object
-	.size	__func__.4202, 22
-__func__.4202:
+	.type	__func__.4204, %object
+	.size	__func__.4204, 22
+__func__.4204:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.3645, %object
-	.size	__func__.3645, 11
-__func__.3645:
+	.type	__func__.3647, %object
+	.size	__func__.3647, 11
+__func__.3647:
 	.string	"FtlLoadBbt"
 	.zero	5
-	.type	__func__.4026, %object
-	.size	__func__.4026, 15
-__func__.4026:
+	.type	__func__.4028, %object
+	.size	__func__.4028, 15
+__func__.4028:
 	.string	"FtlVpcTblFlush"
 	.zero	1
-	.type	__func__.4305, %object
-	.size	__func__.4305, 21
-__func__.4305:
+	.type	__func__.4307, %object
+	.size	__func__.4307, 21
+__func__.4307:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.4427, %object
-	.size	__func__.4427, 29
-__func__.4427:
+	.type	__func__.4429, %object
+	.size	__func__.4429, 29
+__func__.4429:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.3500, %object
-	.size	__func__.3500, 13
-__func__.3500:
+	.type	__func__.3502, %object
+	.size	__func__.3502, 13
+__func__.3502:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.4524, %object
-	.size	__func__.4524, 19
-__func__.4524:
+	.type	__func__.4526, %object
+	.size	__func__.4526, 19
+__func__.4526:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.4630, %object
-	.size	__func__.4630, 23
-__func__.4630:
+	.type	__func__.4632, %object
+	.size	__func__.4632, 23
+__func__.4632:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.3528, %object
-	.size	__func__.3528, 9
-__func__.3528:
+	.type	__func__.3530, %object
+	.size	__func__.3530, 9
+__func__.3530:
 	.string	"FtlWrite"
 	.zero	7
-	.type	__func__.4105, %object
-	.size	__func__.4105, 15
-__func__.4105:
+	.type	__func__.4107, %object
+	.size	__func__.4107, 15
+__func__.4107:
 	.string	"FtlLoadSysInfo"
 	.zero	1
 	.type	rk_sftl_vendor_storage_fops, %object
@@ -12490,7 +12532,7 @@ power_up_flag:
 rkflash_vender_storage_dev:
 	.word	255
 	.zero	4
-	.xword	.LC107
+	.xword	.LC110
 	.xword	rk_sftl_vendor_storage_fops
 	.zero	56
 	.bss
@@ -13280,68 +13322,76 @@ check_vpc_table:
 .LC74:
 	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
 .LC75:
-	.string	"\0014"
+	.string	"%s %p + 0x%x:"
 .LC76:
-	.string	"prog read error: = %x\n"
+	.string	"0x%08x,"
 .LC77:
-	.string	"prog read s error: = %x %x %x\n"
+	.string	"0x%04x,"
 .LC78:
-	.string	"prog read d error: = %x %x %x\n"
+	.string	"0x%02x,"
 .LC79:
-	.string	"FtlFreeSysBlkQueueOut free count = %d\n"
+	.string	"\n"
 .LC80:
-	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\n"
+	.string	"prog read error: = %x\n"
 .LC81:
-	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d\n"
+	.string	"prog read s error: = %x %x %x\n"
 .LC82:
-	.string	"%s error allocating memory. return -1\n"
+	.string	"prog read d error: = %x %x %x\n"
 .LC83:
-	.string	"region_id = %x phyAddr = %x\n"
+	.string	"FtlFreeSysBlkQueueOut free count = %d\n"
 .LC84:
-	.string	"spare:"
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\n"
 .LC85:
-	.string	"map_ppn:"
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d\n"
 .LC86:
-	.string	"FtlMapWritePage error = %x \n"
+	.string	"%s error allocating memory. return -1\n"
 .LC87:
-	.string	"FtlMapWritePage error = %x error count = %d\n"
+	.string	"region_id = %x phyAddr = %x\n"
 .LC88:
-	.string	"ftl_scan_all_data = %x\n"
+	.string	"spare:"
 .LC89:
-	.string	"scan lpa = %x ppa= %x\n"
+	.string	"map_ppn:"
 .LC90:
-	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"FtlMapWritePage error = %x \n"
 .LC91:
-	.string	"...%s enter...\n"
+	.string	"FtlMapWritePage error = %x error count = %d\n"
 .LC92:
-	.string	"FtlCheckVpc2 %x = %x  %x\n"
+	.string	"ftl_scan_all_data = %x\n"
 .LC93:
-	.string	"free blk vpc error %x = %x  %x\n"
+	.string	"scan lpa = %x ppa= %x\n"
 .LC94:
-	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC95:
-	.string	"FtlBbmTblFlush error:%x\n"
+	.string	"...%s enter...\n"
 .LC96:
-	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+	.string	"FtlCheckVpc2 %x = %x  %x\n"
 .LC97:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"free blk vpc error %x = %x  %x\n"
 .LC98:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
 .LC99:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"FtlBbmTblFlush error:%x\n"
 .LC100:
-	.string	"no ect"
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
 .LC101:
-	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC102:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC103:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"spuer block %x vpn is 0\n "
 .LC104:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"no ect"
 .LC105:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
 .LC106:
-	.string	"\0013vendor storage %x,%x,%x\n"
+	.string	"FtlCheckVpc %x = %x  %x\n"
 .LC107:
-	.string	"vendor_storage"
\ No newline at end of file
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+.LC108:
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+.LC109:
+	.string	"FtlWrite: lpa error:%x %x\n"
+.LC110:
+	.string	"vendor_storage"
+	.ident	"GCC: (Linaro GCC 6.3-2017.05) 6.3.1 20170404"
+	.section	.note.GNU-stack,"",@progbits
diff --git a/drivers/rkflash/rkflash_blk.c b/drivers/rkflash/rkflash_blk.c
index 16bc33826aa0..862269c9227a 100644
--- a/drivers/rkflash/rkflash_blk.c
+++ b/drivers/rkflash/rkflash_blk.c
@@ -33,6 +33,15 @@
 
 #include "../soc/rockchip/flash_vendor_storage.h"
 
+void __printf(1, 2) sftl_printk(char *fmt, ...)
+{
+	va_list ap;
+
+	va_start(ap, fmt);
+	vprintk(fmt, ap);
+	va_end(ap);
+}
+
 static struct flash_boot_ops nandc_nand_ops = {
 #ifdef	CONFIG_RK_NANDC_NAND
 	FLASH_TYPE_NANDC_NAND,
diff --git a/drivers/rkflash/rkflash_debug.h b/drivers/rkflash/rkflash_debug.h
index 6f41f530eb7b..850a9e41b67b 100644
--- a/drivers/rkflash/rkflash_debug.h
+++ b/drivers/rkflash/rkflash_debug.h
@@ -37,13 +37,13 @@ extern unsigned int rkflash_debug;
 #define	PRINT_BIT_SFC_E		BIT(1)
 #define PRINT_BIT_SFC_HEX	BIT(2)
 #define	PRINT_BIT_SFC\
-		(PRINT_BIT_SFC_I | PRINT_BIT_SFC_E | PRINT_BIT_SFC_HEX)
+		(PRINT_BIT_SFC_E | PRINT_BIT_SFC_HEX)
 
 #define	PRINT_BIT_NANDC_I	BIT(4)
 #define	PRINT_BIT_NANDC_E	BIT(5)
 #define PRINT_BIT_NANDC_HEX	BIT(5)
 #define	PRINT_BIT_NANDC\
-		(PRINT_BIT_NANDC_I | PRINT_BIT_NANDC_E | PRINT_BIT_NANDC_HEX)
+		(PRINT_BIT_NANDC_E | PRINT_BIT_NANDC_HEX)
 
 #if (PRINT_SWI_SFC_I)
 #define PRINT_SFC_I(...) {if (rkflash_debug & PRINT_BIT_SFC_I)\
-- 
2.35.3

