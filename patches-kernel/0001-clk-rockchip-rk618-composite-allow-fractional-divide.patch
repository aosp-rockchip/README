From 6817aad45a78cfb3b4877fb1a495b73c9a38ff64 Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Thu, 17 Oct 2019 15:04:36 +0800
Subject: [PATCH] clk/rockchip/rk618: composite: allow fractional divider

Change-Id: I932d59aefe43831d54230e767f46f3876d5b1404
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 .../clk/rockchip/rk618/clk-regmap-composite.c | 75 +++++++++++++++----
 drivers/clk/rockchip/rk618/clk-regmap.h       |  1 +
 drivers/clk/rockchip/rk618/clk-rk618.c        | 13 ++--
 3 files changed, 71 insertions(+), 18 deletions(-)

diff --git a/drivers/clk/rockchip/rk618/clk-regmap-composite.c b/drivers/clk/rockchip/rk618/clk-regmap-composite.c
index 781b85cf5f59..43d2b9a45aca 100644
--- a/drivers/clk/rockchip/rk618/clk-regmap-composite.c
+++ b/drivers/clk/rockchip/rk618/clk-regmap-composite.c
@@ -82,7 +82,7 @@ static int clk_regmap_composite_determine_rate(struct clk_hw *hw,
 	unsigned long rate_diff;
 	unsigned long best_rate_diff = ULONG_MAX;
 	long rate;
-	int i;
+	unsigned int i;
 
 	if (rate_hw && rate_ops && rate_ops->determine_rate) {
 		__clk_hw_set_clk(rate_hw, hw);
@@ -208,14 +208,18 @@ devm_clk_regmap_register_composite(struct device *dev, const char *name,
 				   u8 num_parents, struct regmap *regmap,
 				   u32 mux_reg, u8 mux_shift, u8 mux_width,
 				   u32 div_reg, u8 div_shift, u8 div_width,
+				   u8 div_flags,
 				   u32 gate_reg, u8 gate_shift,
 				   unsigned long flags)
 {
 	struct clk_regmap_gate *gate = NULL;
 	struct clk_regmap_mux *mux = NULL;
 	struct clk_regmap_divider *div = NULL;
+	struct clk_regmap_fractional_divider *fd = NULL;
 	const struct clk_ops *mux_ops = NULL, *div_ops = NULL, *gate_ops = NULL;
+	const struct clk_ops *fd_ops = NULL;
 	struct clk_hw *mux_hw = NULL, *div_hw = NULL, *gate_hw = NULL;
+	struct clk_hw *fd_hw = NULL;
 	struct clk *clk;
 	struct clk_init_data init = {};
 	struct clk_regmap_composite *composite;
@@ -248,18 +252,36 @@ devm_clk_regmap_register_composite(struct device *dev, const char *name,
 		gate_hw = &gate->hw;
 	}
 
-	if (div_width > 0) {
-		div = devm_kzalloc(dev, sizeof(*div), GFP_KERNEL);
-		if (!div)
-			return ERR_PTR(-ENOMEM);
-
-		div->dev = dev;
-		div->regmap = regmap;
-		div->reg = div_reg;
-		div->shift = div_shift;
-		div->width = div_width;
-		div_ops = &clk_regmap_divider_ops;
-		div_hw = &div->hw;
+	if (div_reg > 0) {
+		if (div_flags & CLK_DIVIDER_HIWORD_MASK) {
+			div = devm_kzalloc(dev, sizeof(*div), GFP_KERNEL);
+			if (!div)
+				return ERR_PTR(-ENOMEM);
+
+			div->dev = dev;
+			div->regmap = regmap;
+			div->reg = div_reg;
+			div->shift = div_shift;
+			div->width = div_width;
+			div_ops = &clk_regmap_divider_ops;
+			div_hw = &div->hw;
+		} else {
+			fd = devm_kzalloc(dev, sizeof(*fd), GFP_KERNEL);
+			if (!fd)
+				return ERR_PTR(-ENOMEM);
+
+			fd->dev = dev;
+			fd->regmap = regmap;
+			fd->reg = div_reg;
+			fd->mshift = 16;
+			fd->mwidth = 16;
+			fd->mmask = GENMASK(fd->mwidth - 1, 0) << fd->mshift;
+			fd->nshift = 0;
+			fd->nwidth = 16;
+			fd->nmask = GENMASK(fd->nwidth - 1, 0) << fd->nshift;
+			fd_ops = &clk_regmap_fractional_divider_ops;
+			fd_hw = &fd->hw;
+		}
 	}
 
 	composite = devm_kzalloc(dev, sizeof(*composite), GFP_KERNEL);
@@ -316,6 +338,33 @@ devm_clk_regmap_register_composite(struct device *dev, const char *name,
 		composite->rate_ops = div_ops;
 	}
 
+	if (fd_hw && fd_ops) {
+		if (!fd_ops->recalc_rate)
+			return ERR_PTR(-EINVAL);
+
+		clk_composite_ops->recalc_rate =
+			clk_regmap_composite_recalc_rate;
+
+		if (fd_ops->determine_rate)
+			clk_composite_ops->determine_rate =
+				clk_regmap_composite_determine_rate;
+		else if (fd_ops->round_rate)
+			clk_composite_ops->round_rate =
+				clk_regmap_composite_round_rate;
+
+		/* .set_rate requires either .round_rate or .determine_rate */
+		if (fd_ops->set_rate) {
+			if (fd_ops->determine_rate || fd_ops->round_rate)
+				clk_composite_ops->set_rate =
+					clk_regmap_composite_set_rate;
+			else
+				WARN(1, "missing round_rate op\n");
+		}
+
+		composite->rate_hw = fd_hw;
+		composite->rate_ops = fd_ops;
+	}
+
 	if (gate_hw && gate_ops) {
 		if (!gate_ops->is_prepared || !gate_ops->prepare ||
 		    !gate_ops->unprepare)
diff --git a/drivers/clk/rockchip/rk618/clk-regmap.h b/drivers/clk/rockchip/rk618/clk-regmap.h
index 2ccc3d46cddc..e9868fe0e513 100644
--- a/drivers/clk/rockchip/rk618/clk-regmap.h
+++ b/drivers/clk/rockchip/rk618/clk-regmap.h
@@ -107,6 +107,7 @@ devm_clk_regmap_register_composite(struct device *dev, const char *name,
 				   u8 num_parents, struct regmap *regmap,
 				   u32 mux_reg, u8 mux_shift, u8 mux_width,
 				   u32 div_reg, u8 div_shift, u8 div_width,
+				   u8 div_flags,
 				   u32 gate_reg, u8 gate_shift,
 				   unsigned long flags);
 
diff --git a/drivers/clk/rockchip/rk618/clk-rk618.c b/drivers/clk/rockchip/rk618/clk-rk618.c
index ee23412492a4..e5f5e4179cc4 100644
--- a/drivers/clk/rockchip/rk618/clk-rk618.c
+++ b/drivers/clk/rockchip/rk618/clk-rk618.c
@@ -122,6 +122,7 @@ struct clk_composite_data {
 	u32 div_reg;
 	u8 div_shift;
 	u8 div_width;
+	u8 div_flags;
 	u32 gate_reg;
 	u8 gate_shift;
 	unsigned long flags;
@@ -142,6 +143,7 @@ struct clk_composite_data {
 	.div_reg = _div_reg, \
 	.div_shift = _div_shift, \
 	.div_width = _div_width, \
+	.div_flags = CLK_DIVIDER_HIWORD_MASK, \
 	.gate_reg = _gate_reg, \
 	.gate_shift = _gate_shift, \
 	.flags = _flags, \
@@ -300,7 +302,7 @@ static void rk618_clk_add_lookup(struct rk618_cru *cru, struct clk *clk,
 static void rk618_clk_register_muxes(struct rk618_cru *cru)
 {
 	struct clk *clk;
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(rk618_clk_muxes); i++) {
 		const struct clk_mux_data *data = &rk618_clk_muxes[i];
@@ -324,7 +326,7 @@ static void rk618_clk_register_muxes(struct rk618_cru *cru)
 static void rk618_clk_register_dividers(struct rk618_cru *cru)
 {
 	struct clk *clk;
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(rk618_clk_dividers); i++) {
 		const struct clk_divider_data *data = &rk618_clk_dividers[i];
@@ -347,7 +349,7 @@ static void rk618_clk_register_dividers(struct rk618_cru *cru)
 static void rk618_clk_register_gates(struct rk618_cru *cru)
 {
 	struct clk *clk;
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(rk618_clk_gates); i++) {
 		const struct clk_gate_data *data = &rk618_clk_gates[i];
@@ -370,7 +372,7 @@ static void rk618_clk_register_gates(struct rk618_cru *cru)
 static void rk618_clk_register_composites(struct rk618_cru *cru)
 {
 	struct clk *clk;
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(rk618_clk_composites); i++) {
 		const struct clk_composite_data *data =
@@ -386,6 +388,7 @@ static void rk618_clk_register_composites(struct rk618_cru *cru)
 							 data->div_reg,
 							 data->div_shift,
 							 data->div_width,
+							 data->div_flags,
 							 data->gate_reg,
 							 data->gate_shift,
 							 data->flags);
@@ -402,7 +405,7 @@ static void rk618_clk_register_composites(struct rk618_cru *cru)
 static void rk618_clk_register_plls(struct rk618_cru *cru)
 {
 	struct clk *clk;
-	int i;
+	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(rk618_clk_plls); i++) {
 		const struct clk_pll_data *data = &rk618_clk_plls[i];
-- 
2.35.3

