From 727e0fe68d8f422698f4e257cb7c04f90b8692c0 Mon Sep 17 00:00:00 2001
From: xuhuicong <xhc@rock-chips.com>
Date: Tue, 26 Sep 2017 17:32:56 +0800
Subject: [PATCH] drm/edid: output common tv resolution and hdmi mode if no
 read the correct edid

Change-Id: Ib7379340e8c1d59382553d21b60165fe5fb371e8
Signed-off-by: xuhuicong <xhc@rock-chips.com>
---
 drivers/gpu/drm/bridge/dw-hdmi.c | 23 +++++++++++++++++++----
 drivers/gpu/drm/drm_edid.c       |  3 ++-
 include/drm/drm_crtc.h           |  4 ++++
 3 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/bridge/dw-hdmi.c b/drivers/gpu/drm/bridge/dw-hdmi.c
index d26939e00fbc..1cc9680d8059 100644
--- a/drivers/gpu/drm/bridge/dw-hdmi.c
+++ b/drivers/gpu/drm/bridge/dw-hdmi.c
@@ -2284,7 +2284,9 @@ static int dw_hdmi_connector_get_modes(struct drm_connector *connector)
 	struct dw_hdmi *hdmi = container_of(connector, struct dw_hdmi,
 					     connector);
 	struct edid *edid;
-	int ret = 0;
+	struct drm_display_mode *mode;
+	const u8 def_modes[6] = {4, 16, 31, 19, 17, 2};
+	int i, ret = 0;
 
 	if (!hdmi->ddc)
 		return 0;
@@ -2302,7 +2304,20 @@ static int dw_hdmi_connector_get_modes(struct drm_connector *connector)
 		drm_edid_to_eld(connector, edid);
 		kfree(edid);
 	} else {
-		dev_dbg(hdmi->dev, "failed to get edid\n");
+		hdmi->sink_is_hdmi = true;
+		hdmi->sink_has_audio = true;
+		for (i = 0; i < sizeof(def_modes); i++) {
+			mode = drm_display_mode_from_vic_index(connector,
+							       def_modes,
+							       31, i);
+			if (mode) {
+				if (!i)
+					mode->type = DRM_MODE_TYPE_PREFERRED;
+				drm_mode_probed_add(connector, mode);
+				ret++;
+			}
+		}
+		dev_info(hdmi->dev, "failed to get edid\n");
 	}
 
 	return ret;
@@ -2824,7 +2839,7 @@ int dw_hdmi_bind(struct device *dev, struct device *master,
 	u32 val = 1;
 	u8 config0;
 	u8 config3;
-	bool hdcp1x_enable = 0;
+	bool hdcp1x_enable = false;
 
 	hdmi = devm_kzalloc(dev, sizeof(*hdmi), GFP_KERNEL);
 	if (!hdmi)
@@ -3036,7 +3051,7 @@ int dw_hdmi_bind(struct device *dev, struct device *master,
 	dw_hdmi_register_debugfs(dev, hdmi);
 
 	if (of_property_read_bool(np, "hdcp1x-enable"))
-		hdcp1x_enable = 1;
+		hdcp1x_enable = true;
 	dw_hdmi_register_hdcp(dev, hdmi, val, hdcp1x_enable);
 
 	return 0;
diff --git a/drivers/gpu/drm/drm_edid.c b/drivers/gpu/drm/drm_edid.c
index 306d6000d528..24955d8323e8 100644
--- a/drivers/gpu/drm/drm_edid.c
+++ b/drivers/gpu/drm/drm_edid.c
@@ -3023,7 +3023,7 @@ static u8 svd_to_vic(u8 svd)
 	return svd;
 }
 
-static struct drm_display_mode *
+struct drm_display_mode *
 drm_display_mode_from_vic_index(struct drm_connector *connector,
 				const u8 *video_db, u8 video_len,
 				u8 video_index)
@@ -3048,6 +3048,7 @@ drm_display_mode_from_vic_index(struct drm_connector *connector,
 
 	return newmode;
 }
+EXPORT_SYMBOL(drm_display_mode_from_vic_index);
 
 /*
  * do_y420vdb_modes - Parse YCBCR 420 only modes
diff --git a/include/drm/drm_crtc.h b/include/drm/drm_crtc.h
index 92656a59fe73..c7f69aa63bcb 100644
--- a/include/drm/drm_crtc.h
+++ b/include/drm/drm_crtc.h
@@ -1850,6 +1850,10 @@ extern struct drm_property *drm_mode_create_rotation_property(struct drm_device
 							      unsigned int supported_rotations);
 extern unsigned int drm_rotation_simplify(unsigned int rotation,
 					  unsigned int supported_rotations);
+struct drm_display_mode *
+drm_display_mode_from_vic_index(struct drm_connector *connector,
+				const u8 *video_db, u8 video_len,
+				u8 video_index);
 
 /* Helpers */
 
-- 
2.35.3

