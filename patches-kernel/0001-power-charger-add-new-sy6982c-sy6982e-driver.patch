From 38c57424d483a2b17f36e73c8e031119ddfec76c Mon Sep 17 00:00:00 2001
From: Yankun Zheng <zyk@rock-chips.com>
Date: Tue, 18 Jul 2017 15:09:30 +0800
Subject: [PATCH] power: charger: add new sy6982c/sy6982e driver

Change-Id: I3204b34234194d4a17ae0b2141744dbdbe5c4daa
Signed-off-by: Yankun Zheng <zyk@rock-chips.com>
---
 .../bindings/power/sy6982c-charger.txt        |  14 +
 drivers/power/Kconfig                         |   6 +
 drivers/power/Makefile                        |   1 +
 drivers/power/sy6982c_charger.c               | 293 ++++++++++++++++++
 4 files changed, 314 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/power/sy6982c-charger.txt
 create mode 100644 drivers/power/sy6982c_charger.c

diff --git a/Documentation/devicetree/bindings/power/sy6982c-charger.txt b/Documentation/devicetree/bindings/power/sy6982c-charger.txt
new file mode 100644
index 000000000000..9ec4d54b24de
--- /dev/null
+++ b/Documentation/devicetree/bindings/power/sy6982c-charger.txt
@@ -0,0 +1,14 @@
+Binding for sy6982c Charger
+
+Required properties:
+- compatible: Should contain one of the following:
+    * "sy6982c-charger"
+- extcon: extcon specifier for the Charger.
+
+Example:
+
+	sy6982c {
+		status = "okay";
+		compatible = "sy6982c-charger";
+		extcon = <&u2phy0>;
+	};
diff --git a/drivers/power/Kconfig b/drivers/power/Kconfig
index 9427d28f2c8a..6a5b860c6e01 100644
--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -455,6 +455,12 @@ config CHARGER_SMB347
 	  Say Y to include support for Summit Microelectronics SMB347
 	  Battery Charger.
 
+config CHARGER_SY6982C
+	tristate "SY6982C Charger driver"
+	depends on EXTCON
+	help
+	  Say Y to enable support for sy8963c charger.
+
 config CHARGER_TPS65090
 	tristate "TPS65090 battery charger driver"
 	depends on MFD_TPS65090
diff --git a/drivers/power/Makefile b/drivers/power/Makefile
index 814abaf1617a..823d26a7c1c5 100644
--- a/drivers/power/Makefile
+++ b/drivers/power/Makefile
@@ -72,6 +72,7 @@ obj-$(CONFIG_CHARGER_BQ25700)	+= bq25700_charger.o
 obj-$(CONFIG_CHARGER_BQ25890)	+= bq25890_charger.o
 obj-$(CONFIG_POWER_AVS)		+= avs/
 obj-$(CONFIG_CHARGER_SMB347)	+= smb347-charger.o
+obj-$(CONFIG_CHARGER_SY6982C)	+= sy6982c_charger.o
 obj-$(CONFIG_CHARGER_TPS65090)	+= tps65090-charger.o
 obj-$(CONFIG_CHARGER_TPS65217)	+= tps65217_charger.o
 obj-$(CONFIG_POWER_RESET)	+= reset/
diff --git a/drivers/power/sy6982c_charger.c b/drivers/power/sy6982c_charger.c
new file mode 100644
index 000000000000..630729fca11e
--- /dev/null
+++ b/drivers/power/sy6982c_charger.c
@@ -0,0 +1,293 @@
+/*
+ * sy6982c/sy6982e charger driver
+ *
+ * Copyright (C) 2016 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/extcon.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/power/rk_usbbc.h>
+#include <linux/property.h>
+#include <linux/workqueue.h>
+
+enum charger_t {
+	USB_TYPE_UNKNOWN_CHARGER,
+	USB_TYPE_NONE_CHARGER,
+	USB_TYPE_USB_CHARGER,
+	USB_TYPE_AC_CHARGER,
+	USB_TYPE_CDP_CHARGER,
+};
+
+struct sy6982c_charger {
+	struct device *dev;
+	struct power_supply *usb_psy;
+	struct workqueue_struct *usb_charger_wq;
+	struct delayed_work usb_work;
+	struct delayed_work discnt_work;
+	struct notifier_block cable_cg_nb;
+	struct notifier_block cable_discnt_nb;
+	unsigned int bc_event;
+	enum charger_t usb_charger;
+	bool extcon;
+	struct extcon_dev *cable_edev;
+};
+
+static void sy6982c_cg_bc_evt_worker(struct work_struct *work)
+{
+	struct sy6982c_charger *cg = container_of(work,
+					struct sy6982c_charger, usb_work.work);
+	struct extcon_dev *edev = cg->cable_edev;
+	enum charger_t charger = USB_TYPE_UNKNOWN_CHARGER;
+	const char *event[5] = {"UN", "NONE", "USB", "AC", "CDP1.5A"};
+
+	/* Determine cable/charger type */
+	if (extcon_get_cable_state_(edev, EXTCON_CHG_USB_SDP) > 0)
+		charger = USB_TYPE_USB_CHARGER;
+	else if (extcon_get_cable_state_(edev, EXTCON_CHG_USB_DCP) > 0)
+		charger = USB_TYPE_AC_CHARGER;
+	else if (extcon_get_cable_state_(edev, EXTCON_CHG_USB_CDP) > 0)
+		charger = USB_TYPE_CDP_CHARGER;
+	else if (extcon_get_cable_state_(edev, EXTCON_CHG_USB_DCP) == 0)
+		charger = USB_TYPE_NONE_CHARGER;
+	else if (extcon_get_cable_state_(edev, EXTCON_CHG_USB_CDP) == 0)
+		charger = USB_TYPE_NONE_CHARGER;
+
+	if (charger != USB_TYPE_UNKNOWN_CHARGER) {
+		dev_info(cg->dev, "receive type-c notifier event: %s...\n",
+			 event[charger]);
+		cg->usb_charger = charger;
+	}
+}
+
+static int sy6982c_cg_charger_evt_notifier(struct notifier_block *nb,
+					   unsigned long event,
+					   void *ptr)
+{
+	struct sy6982c_charger *cg =
+		container_of(nb, struct sy6982c_charger, cable_cg_nb);
+
+	queue_delayed_work(cg->usb_charger_wq, &cg->usb_work,
+			   msecs_to_jiffies(10));
+
+	return NOTIFY_DONE;
+}
+
+static void sy6982c_cg_discnt_evt_worker(struct work_struct *work)
+{
+	struct sy6982c_charger *cg = container_of(work,
+			struct sy6982c_charger, discnt_work.work);
+
+	if (extcon_get_cable_state_(cg->cable_edev, EXTCON_USB) == 0) {
+		dev_info(cg->dev, "receive type-c notifier event: DISCNT...\n");
+		cg->usb_charger = USB_TYPE_NONE_CHARGER;
+	}
+}
+
+static int sy6982c_cg_discnt_evt_notfier(struct notifier_block *nb,
+					 unsigned long event, void *ptr)
+{
+	struct sy6982c_charger *cg =
+		container_of(nb, struct sy6982c_charger, cable_discnt_nb);
+
+	queue_delayed_work(cg->usb_charger_wq, &cg->discnt_work,
+			   msecs_to_jiffies(10));
+
+	return NOTIFY_DONE;
+}
+
+static int sy6982c_cg_init_usb(struct sy6982c_charger *cg)
+{
+	struct device *dev = cg->dev;
+	int ret;
+	struct extcon_dev *edev;
+
+	if (!cg->extcon)
+		return -1;
+
+	edev = extcon_get_edev_by_phandle(dev, 0);
+	if (IS_ERR(edev)) {
+		if (PTR_ERR(edev) != -EPROBE_DEFER)
+			dev_err(dev, "Invalid or missing extcon\n");
+		return PTR_ERR(edev);
+	}
+
+	cg->usb_charger_wq = alloc_ordered_workqueue("%s",
+				WQ_MEM_RECLAIM | WQ_FREEZABLE,
+				"sy6982c-usb-wq");
+	cg->usb_charger = USB_TYPE_NONE_CHARGER;
+
+	/* Register chargers  */
+	INIT_DELAYED_WORK(&cg->usb_work, sy6982c_cg_bc_evt_worker);
+	cg->cable_cg_nb.notifier_call = sy6982c_cg_charger_evt_notifier;
+	ret = devm_extcon_register_notifier(dev, edev, EXTCON_CHG_USB_SDP,
+					    &cg->cable_cg_nb);
+	if (ret < 0) {
+		dev_err(dev, "failed to register notifier for SDP\n");
+		goto __fail;
+	}
+
+	ret = devm_extcon_register_notifier(dev, edev, EXTCON_CHG_USB_DCP,
+					    &cg->cable_cg_nb);
+	if (ret < 0) {
+		dev_err(dev, "failed to register notifier for DCP\n");
+		goto __fail;
+	}
+
+	ret = devm_extcon_register_notifier(dev, edev, EXTCON_CHG_USB_CDP,
+					    &cg->cable_cg_nb);
+	if (ret < 0) {
+		dev_err(dev, "failed to register notifier for CDP\n");
+		goto __fail;
+	}
+
+	/* Register discnt usb */
+	INIT_DELAYED_WORK(&cg->discnt_work, sy6982c_cg_discnt_evt_worker);
+	cg->cable_discnt_nb.notifier_call = sy6982c_cg_discnt_evt_notfier;
+	ret = devm_extcon_register_notifier(dev, edev, EXTCON_USB,
+					    &cg->cable_discnt_nb);
+	if (ret < 0) {
+		dev_err(dev, "failed to register notifier for HOST\n");
+		goto __fail;
+	}
+
+	cg->cable_edev = edev;
+	schedule_delayed_work(&cg->usb_work, 0);
+	dev_info(cg->dev, "register extcon evt notifier\n");
+
+	return 0;
+
+__fail:
+	destroy_workqueue(cg->usb_charger_wq);
+	return ret;
+}
+
+static enum power_supply_property sy6982c_usb_props[] = {
+	POWER_SUPPLY_PROP_ONLINE,
+	POWER_SUPPLY_PROP_STATUS,
+};
+
+static int sy6982c_cg_usb_get_property(struct power_supply *psy,
+				       enum power_supply_property psp,
+				       union power_supply_propval *val)
+{
+	struct sy6982c_charger *cg = power_supply_get_drvdata(psy);
+	int online = 0;
+	int ret = 0;
+
+	if (cg->usb_charger != USB_TYPE_UNKNOWN_CHARGER &&
+	    cg->usb_charger != USB_TYPE_NONE_CHARGER)
+		online = 1;
+	switch (psp) {
+	case POWER_SUPPLY_PROP_ONLINE:
+		val->intval = online;
+
+		dev_dbg(cg->dev, "report online: %d\n", val->intval);
+		break;
+	case POWER_SUPPLY_PROP_STATUS:
+		if (online)
+			val->intval = POWER_SUPPLY_STATUS_CHARGING;
+		else
+			val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
+
+		dev_dbg(cg->dev, "report prop: %d\n", val->intval);
+		break;
+	default:
+		ret = -EINVAL;
+		break;
+	}
+
+	return ret;
+}
+
+static const struct power_supply_desc sy6982c_usb_desc = {
+	.name		= "sy6982c_usb",
+	.type		= POWER_SUPPLY_TYPE_USB,
+	.properties	= sy6982c_usb_props,
+	.num_properties	= ARRAY_SIZE(sy6982c_usb_props),
+	.get_property	= sy6982c_cg_usb_get_property,
+};
+
+static int sy6982c_cg_init_power_supply(struct sy6982c_charger *cg)
+{
+	struct power_supply_config psy_cfg = { .drv_data = cg, };
+
+	cg->usb_psy = devm_power_supply_register(cg->dev, &sy6982c_usb_desc,
+						 &psy_cfg);
+	if (IS_ERR(cg->usb_psy)) {
+		dev_err(cg->dev, "register usb power supply fail\n");
+		return PTR_ERR(cg->usb_psy);
+	}
+
+	return 0;
+}
+
+static int sy6982c_charger_probe(struct platform_device *pdev)
+{
+	struct sy6982c_charger *cg;
+	int ret;
+
+	cg = devm_kzalloc(&pdev->dev, sizeof(*cg), GFP_KERNEL);
+	if (!cg)
+		return -ENOMEM;
+
+	cg->dev = &pdev->dev;
+	cg->extcon = device_property_read_bool(cg->dev, "extcon");
+	ret = sy6982c_cg_init_usb(cg);
+	if (ret) {
+		dev_err(cg->dev, "init usb failed!\n");
+		return ret;
+	}
+
+	ret = sy6982c_cg_init_power_supply(cg);
+	if (ret) {
+		dev_err(cg->dev, "init power supply fail!\n");
+		return ret;
+	}
+
+	dev_info(cg->dev, "driver registered\n");
+
+	return 0;
+}
+
+static void sy6982c_charger_remove(struct platform_device *pdev)
+{
+	struct sy6982c_charger *cg = platform_get_drvdata(pdev);
+
+	if (cg->usb_charger_wq)
+		destroy_workqueue(cg->usb_charger_wq);
+}
+
+static const struct of_device_id sy6982c_charger_match[] = {
+	{
+		.compatible = "sy6982c-charger",
+	},
+	{},
+};
+
+static struct platform_driver sy6982c_charger_driver = {
+	.probe = sy6982c_charger_probe,
+	.remove = sy6982c_charger_remove,
+	.driver = {
+		.name	= "sy6982c-charger",
+		.of_match_table = sy6982c_charger_match,
+	},
+};
+
+module_platform_driver(sy6982c_charger_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:sy6982c-charger");
+MODULE_AUTHOR("chen Shunqing<csq@rock-chips.com>");
-- 
2.35.3

