From 5e5c15bd6aafc4291734a202adfddcd88107f83f Mon Sep 17 00:00:00 2001
From: Frank Wang <frank.wang@rock-chips.com>
Date: Tue, 14 Mar 2017 09:33:19 +0800
Subject: [PATCH] usb: dwc_otg_310: amend last_id property to support PM
 suspend

Move last_id property from static to struct dwc_otg_device as a static
global variable to support PM suspend process.

Change-Id: I7729095339aed3dcca6481005f249c855ebbdb3c
Signed-off-by: Frank Wang <frank.wang@rock-chips.com>
Signed-off-by: William Wu <william.wu@rock-chips.com>
---
 .../devicetree/bindings/usb/rockchip-usb.txt   |  2 ++
 drivers/usb/dwc_otg_310/dwc_otg_cil.h          |  3 +++
 drivers/usb/dwc_otg_310/dwc_otg_driver.c       | 18 ++++++++++++++++++
 drivers/usb/dwc_otg_310/dwc_otg_driver.h       |  2 ++
 drivers/usb/dwc_otg_310/dwc_otg_pcd_linux.c    |  8 ++++----
 5 files changed, 29 insertions(+), 4 deletions(-)

diff --git a/Documentation/devicetree/bindings/usb/rockchip-usb.txt b/Documentation/devicetree/bindings/usb/rockchip-usb.txt
index 308b17f166eb..ace71f394151 100644
--- a/Documentation/devicetree/bindings/usb/rockchip-usb.txt
+++ b/Documentation/devicetree/bindings/usb/rockchip-usb.txt
@@ -25,6 +25,8 @@ Optional properties:
    even if it's used for a non-split periodic transfer.
  - rockchip,high-bandwidth: If present, support high bandwidth
    endpoints.
+ - rockchip,usb-pd-off: when set, support turning off usb pd at
+   PM suspend.
 
 Example:
  - RK3288
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_cil.h b/drivers/usb/dwc_otg_310/dwc_otg_cil.h
index b5486163c6fa..aac00808fbc8 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_cil.h
+++ b/drivers/usb/dwc_otg_310/dwc_otg_cil.h
@@ -858,6 +858,9 @@ struct dwc_otg_core_if {
 	/* Indicate USB get VBUS 5V from PMIC(e.g. rk81x) */
 	bool pmic_vbus;
 
+	/* True if support power down usb in suspend */
+	bool usb_pd_off;
+
 #ifdef DWC_DEV_SRPCAP
 	/* This timer is needed to power on the hibernated host core if SRP is not
 	 * initiated on connected SRP capable device for limited period of time
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_driver.c b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
index 7569fc696763..b0a2542c7209 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_driver.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_driver.c
@@ -1134,6 +1134,9 @@ static int host20_driver_probe(struct platform_device *_dev)
 		goto fail;
 	}
 
+	/* Initialize last_id */
+	dwc_otg_device->last_id = -1;
+
 	clk_set_rate(pldata->phyclk_480m, 480000000);
 	/*
 	 * Enable the global interrupt after all the interrupt
@@ -1542,6 +1545,10 @@ static int otg20_driver_probe(struct platform_device *_dev)
 	dwc_otg_device->core_if->hc_halt_quirk =
 		of_property_read_bool(node, "rockchip,hc-halt-quirk");
 
+	/* usb pd off support */
+	dwc_otg_device->core_if->usb_pd_off =
+		of_property_read_bool(node, "rockchip,usb-pd-off");
+
 #ifndef DWC_HOST_ONLY
 	/*
 	 * Initialize the PCD
@@ -1564,6 +1571,9 @@ static int otg20_driver_probe(struct platform_device *_dev)
 		goto fail;
 	}
 #endif
+	/* Initialize last_id */
+	dwc_otg_device->last_id = -1;
+
 	/*
 	 * Enable the global interrupt after all the interrupt
 	 * handlers are installed if there is no ADP support else
@@ -1604,6 +1614,9 @@ static int dwc_otg_pm_suspend(struct device *dev)
 
 	dev_dbg(dev, "dwc_otg PM suspend\n");
 
+	if (dwc_otg_device->core_if->usb_pd_off)
+		cancel_delayed_work(&dwc_otg_device->pcd->check_id_work);
+
 	if (dwc_otg_device->core_if->op_state == B_PERIPHERAL)
 		return 0;
 
@@ -1622,6 +1635,11 @@ static int dwc_otg_pm_resume(struct device *dev)
 
 	dev_dbg(dev, "dwc_otg PM resume\n");
 
+	if (dwc_otg_device->core_if->usb_pd_off) {
+		dwc_otg_device->last_id = -1;
+		schedule_delayed_work(&dwc_otg_device->pcd->check_id_work, HZ);
+	}
+
 	if (dwc_otg_device->core_if->op_state == B_PERIPHERAL)
 		return 0;
 
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_driver.h b/drivers/usb/dwc_otg_310/dwc_otg_driver.h
index 0e4d9715cd58..234004fb163f 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_driver.h
+++ b/drivers/usb/dwc_otg_310/dwc_otg_driver.h
@@ -69,6 +69,8 @@ typedef struct dwc_otg_device {
 	/** Flag to indicate whether the common IRQ handler is installed. */
 	uint8_t common_irq_installed;
 
+	/* The last ID value read from GRF IDDIG status */
+	int32_t last_id;
 } dwc_otg_device_t;
 
 /*We must clear S3C24XX_EINTPEND external interrupt register
diff --git a/drivers/usb/dwc_otg_310/dwc_otg_pcd_linux.c b/drivers/usb/dwc_otg_310/dwc_otg_pcd_linux.c
index ede0ec7f4473..7813b26b6ff8 100644
--- a/drivers/usb/dwc_otg_310/dwc_otg_pcd_linux.c
+++ b/drivers/usb/dwc_otg_310/dwc_otg_pcd_linux.c
@@ -1614,11 +1614,11 @@ static void check_id(struct work_struct *work)
 	    container_of(work, dwc_otg_pcd_t, check_id_work.work);
 	struct dwc_otg_device *otg_dev = _pcd->otg_dev;
 	struct dwc_otg_platform_data *pldata = otg_dev->pldata;
-	static int last_id = -1;
 	int id = pldata->get_status(USB_STATUS_ID);
 
-	if (last_id != id) {
-		pr_info("[otg id chg] last id %d current id %d\n", last_id, id);
+	if (otg_dev->last_id != id) {
+		pr_info("[otg id chg] last id %d current id %d\n",
+			otg_dev->last_id, id);
 
 		if (pldata->phy_status == USB_PHY_SUSPEND) {
 			pldata->clock_enable(pldata, 1);
@@ -1628,7 +1628,7 @@ static void check_id(struct work_struct *work)
 		/* Force Device or Host by id */
 		id_status_change(otg_dev->core_if, id);
 	}
-	last_id = id;
+	otg_dev->last_id = id;
 	schedule_delayed_work(&_pcd->check_id_work, (HZ));
 }
 
-- 
2.35.3

