From 3efb6d37bdfb2321525a50886854002ed843ee3b Mon Sep 17 00:00:00 2001
From: Liang Chen <cl@rock-chips.com>
Date: Wed, 7 Mar 2018 21:00:09 +0800
Subject: [PATCH] PM / devfreq: record opp rate instead of real clock rate for
 thermal

Opp rate is used to calc power in thermal framework, so we record
this rate instead of real clock rate.
Devfreq is not ready in target() when use performance governor, so
we need record opp rate in probe().

Change-Id: Iec1918ad5d12124b9f112964f247339e0d50645f
Signed-off-by: Liang Chen <cl@rock-chips.com>
---
 drivers/devfreq/rockchip_dmc.c                 | 18 ++++++++++++------
 .../bifrost/backend/gpu/mali_kbase_devfreq.c   | 18 ++++++++++++------
 .../gpu/arm/mali400/mali/linux/mali_devfreq.c  | 15 ++++++++++++---
 .../midgard/backend/gpu/mali_kbase_devfreq.c   | 16 ++++++++++++----
 .../backend/gpu/mali_kbase_devfreq.c           | 15 ++++++++++++---
 5 files changed, 60 insertions(+), 22 deletions(-)

diff --git a/drivers/devfreq/rockchip_dmc.c b/drivers/devfreq/rockchip_dmc.c
index cc59cb459267..830723bfb371 100644
--- a/drivers/devfreq/rockchip_dmc.c
+++ b/drivers/devfreq/rockchip_dmc.c
@@ -912,7 +912,7 @@ static int rockchip_dmcfreq_target(struct device *dev, unsigned long *freq,
 	struct dev_pm_opp *opp;
 	struct cpufreq_policy *policy;
 	unsigned long old_clk_rate = dmcfreq->rate;
-	unsigned long opp_rate, target_volt, target_rate;
+	unsigned long target_volt, target_rate;
 	unsigned int cpu_cur, cpufreq_cur;
 	int err = 0;
 
@@ -923,14 +923,13 @@ static int rockchip_dmcfreq_target(struct device *dev, unsigned long *freq,
 		rcu_read_unlock();
 		return PTR_ERR(opp);
 	}
-	opp_rate = dev_pm_opp_get_freq(opp);
 	target_volt = dev_pm_opp_get_voltage(opp);
 
 	rcu_read_unlock();
 
-	target_rate = clk_round_rate(dmcfreq->dmc_clk, opp_rate);
+	target_rate = clk_round_rate(dmcfreq->dmc_clk, *freq);
 	if ((long)target_rate <= 0)
-		target_rate = opp_rate;
+		target_rate = *freq;
 
 	if (dmcfreq->rate == target_rate) {
 		if (dmcfreq->volt == target_volt)
@@ -1028,7 +1027,8 @@ static int rockchip_dmcfreq_target(struct device *dev, unsigned long *freq,
 		}
 	}
 
-	dmcfreq->devfreq->last_status.current_frequency = opp_rate;
+	if (dmcfreq->devfreq)
+		dmcfreq->devfreq->last_status.current_frequency = *freq;
 
 	dmcfreq->volt = target_volt;
 out:
@@ -2694,6 +2694,7 @@ static int rockchip_dmcfreq_probe(struct platform_device *pdev)
 	const struct of_device_id *match;
 	int (*init)(struct platform_device *pdev,
 		    struct rockchip_dmcfreq *data);
+	unsigned long opp_rate;
 #define MAX_PROP_NAME_LEN	3
 	char name[MAX_PROP_NAME_LEN];
 	bool is_events_available = false;
@@ -2804,11 +2805,16 @@ static int rockchip_dmcfreq_probe(struct platform_device *pdev)
 
 	devm_devfreq_register_opp_notifier(dev, data->devfreq);
 
+	opp_rate = data->rate;
+	rcu_read_lock();
+	devfreq_recommended_opp(dev, &opp_rate, 0);
+	rcu_read_unlock();
+
 	data->min = devp->freq_table[0];
 	data->max = devp->freq_table[devp->max_state ? devp->max_state - 1 : 0];
 	data->devfreq->min_freq = data->min;
 	data->devfreq->max_freq = data->max;
-	data->devfreq->last_status.current_frequency = data->rate;
+	data->devfreq->last_status.current_frequency = opp_rate;
 	reset_last_status(data->devfreq);
 
 	if (rockchip_drm_register_notifier_to_dmc(data->devfreq))
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_devfreq.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_devfreq.c
index ba42acabf9fe..99b39cafb62a 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_devfreq.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_devfreq.c
@@ -89,15 +89,15 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 
 	rcu_read_lock();
 	opp = devfreq_recommended_opp(dev, &freq, flags);
-	voltage = dev_pm_opp_get_voltage(opp);
-	rcu_read_unlock();
-	if (IS_ERR_OR_NULL(opp)) {
+	if (IS_ERR(opp)) {
+		rcu_read_unlock();
 		dev_err(dev, "Failed to get opp (%ld)\n", PTR_ERR(opp));
 		return PTR_ERR(opp);
 	}
+	voltage = dev_pm_opp_get_voltage(opp);
+	rcu_read_unlock();
 
 	nominal_freq = freq;
-
 	/*
 	 * Only update if there is a change of frequency
 	 */
@@ -155,6 +155,8 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 	kbdev->current_nominal_freq = nominal_freq;
 	kbdev->current_freq = freq;
 	kbdev->current_core_mask = core_mask;
+	if (kbdev->devfreq)
+		kbdev->devfreq->last_status.current_frequency = nominal_freq;
 
 	KBASE_TLSTREAM_AUX_DEVFREQ_TARGET((u64)nominal_freq);
 
@@ -178,8 +180,6 @@ kbase_devfreq_status(struct device *dev, struct devfreq_dev_status *stat)
 {
 	struct kbase_device *kbdev = dev_get_drvdata(dev);
 
-	stat->current_frequency = kbdev->current_nominal_freq;
-
 	kbase_pm_get_dvfs_utilisation(kbdev,
 			&stat->total_time, &stat->busy_time);
 
@@ -319,6 +319,7 @@ static int kbase_devfreq_init_core_mask_table(struct kbase_device *kbdev)
 int kbase_devfreq_init(struct kbase_device *kbdev)
 {
 	struct devfreq_dev_profile *dp;
+	unsigned long opp_rate;
 	int err;
 
 	if (!kbdev->clock) {
@@ -368,6 +369,11 @@ int kbase_devfreq_init(struct kbase_device *kbdev)
 		goto opp_notifier_failed;
 	}
 
+	opp_rate = kbdev->current_freq;
+	rcu_read_lock();
+	devfreq_recommended_opp(kbdev->dev, &opp_rate, 0);
+	rcu_read_unlock();
+	kbdev->devfreq->last_status.current_frequency = opp_rate;
 #ifdef CONFIG_DEVFREQ_THERMAL
 	err = kbase_ipa_init(kbdev);
 	if (err) {
diff --git a/drivers/gpu/arm/mali400/mali/linux/mali_devfreq.c b/drivers/gpu/arm/mali400/mali/linux/mali_devfreq.c
index 3eac07d76766..6e2d29a1e29e 100644
--- a/drivers/gpu/arm/mali400/mali/linux/mali_devfreq.c
+++ b/drivers/gpu/arm/mali400/mali/linux/mali_devfreq.c
@@ -50,12 +50,13 @@ mali_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 
 	rcu_read_lock();
 	opp = devfreq_recommended_opp(dev, &freq, flags);
-	voltage = dev_pm_opp_get_voltage(opp);
-	rcu_read_unlock();
-	if (IS_ERR_OR_NULL(opp)) {
+	if (IS_ERR(opp)) {
+		rcu_read_unlock();
 		MALI_PRINT_ERROR(("Failed to get opp (%ld)\n", PTR_ERR(opp)));
 		return PTR_ERR(opp);
 	}
+	voltage = dev_pm_opp_get_voltage(opp);
+	rcu_read_unlock();
 
 	MALI_DEBUG_PRINT(2, ("mali_devfreq_target:set_freq = %lld flags = 0x%x\n", freq, flags));
 	/*
@@ -95,6 +96,8 @@ mali_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 	}
 	*target_freq = freq;
 	mdev->current_freq = freq;
+	if (mdev->devfreq)
+		mdev->devfreq->last_status.current_frequency = freq;
 
 #ifdef CONFIG_REGULATOR
 	if (mdev->regulator && mdev->current_voltage != voltage &&
@@ -225,6 +228,7 @@ int mali_devfreq_init(struct mali_device *mdev)
 	_mali_osk_device_data data;
 #endif
 	struct devfreq_dev_profile *dp;
+	unsigned long opp_rate;
 	int err;
 
 	MALI_DEBUG_PRINT(2, ("Init Mali devfreq\n"));
@@ -261,6 +265,11 @@ int mali_devfreq_init(struct mali_device *mdev)
 		goto opp_notifier_failed;
 	}
 
+	opp_rate = mdev->current_freq;
+	rcu_read_lock();
+	devfreq_recommended_opp(mdev->dev, &opp_rate, 0);
+	rcu_read_unlock();
+	mdev->devfreq->last_status.current_frequency = opp_rate;
 #ifdef CONFIG_DEVFREQ_THERMAL
 	if (of_machine_is_compatible("rockchip,rk3036"))
 		return 0;
diff --git a/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_devfreq.c b/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_devfreq.c
index 0bf5fcd21c03..3510a98c25c6 100644
--- a/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_devfreq.c
+++ b/drivers/gpu/arm/midgard/backend/gpu/mali_kbase_devfreq.c
@@ -62,12 +62,13 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 
 	rcu_read_lock();
 	opp = devfreq_recommended_opp(dev, &freq, flags);
-	voltage = dev_pm_opp_get_voltage(opp);
-	rcu_read_unlock();
-	if (IS_ERR_OR_NULL(opp)) {
+	if (IS_ERR(opp)) {
+		rcu_read_unlock();
 		dev_err(dev, "Failed to get opp (%ld)\n", PTR_ERR(opp));
 		return PTR_ERR(opp);
 	}
+	voltage = dev_pm_opp_get_voltage(opp);
+	rcu_read_unlock();
 
 	/*
 	 * Only update if there is a change of frequency
@@ -106,7 +107,8 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 	}
 	*target_freq = freq;
 	kbdev->current_freq = freq;
-
+	if (kbdev->devfreq)
+		kbdev->devfreq->last_status.current_frequency = freq;
 #ifdef CONFIG_REGULATOR
 	if (kbdev->regulator && kbdev->current_voltage != voltage &&
 	    old_freq > freq) {
@@ -217,6 +219,7 @@ static void kbase_devfreq_exit(struct device *dev)
 int kbase_devfreq_init(struct kbase_device *kbdev)
 {
 	struct devfreq_dev_profile *dp;
+	unsigned long opp_rate;
 	int err;
 
 	if (!kbdev->clock)
@@ -256,6 +259,11 @@ int kbase_devfreq_init(struct kbase_device *kbdev)
 		goto opp_notifier_failed;
 	}
 
+	opp_rate = kbdev->current_freq;
+	rcu_read_lock();
+	devfreq_recommended_opp(kbdev->dev, &opp_rate, 0);
+	rcu_read_unlock();
+	kbdev->devfreq->last_status.current_frequency = opp_rate;
 #ifdef CONFIG_DEVFREQ_THERMAL
 	err = kbase_power_model_simple_init(kbdev);
 	if (err && err != -ENODEV && err != -EPROBE_DEFER) {
diff --git a/drivers/gpu/arm/midgard_for_linux/backend/gpu/mali_kbase_devfreq.c b/drivers/gpu/arm/midgard_for_linux/backend/gpu/mali_kbase_devfreq.c
index 69b13ddad95f..1fb28302d7c2 100644
--- a/drivers/gpu/arm/midgard_for_linux/backend/gpu/mali_kbase_devfreq.c
+++ b/drivers/gpu/arm/midgard_for_linux/backend/gpu/mali_kbase_devfreq.c
@@ -60,12 +60,13 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 
 	rcu_read_lock();
 	opp = devfreq_recommended_opp(dev, &freq, flags);
-	voltage = dev_pm_opp_get_voltage(opp);
-	rcu_read_unlock();
-	if (IS_ERR_OR_NULL(opp)) {
+	if (IS_ERR(opp)) {
+		rcu_read_unlock();
 		dev_err(dev, "Failed to get opp (%ld)\n", PTR_ERR(opp));
 		return PTR_ERR(opp);
 	}
+	voltage = dev_pm_opp_get_voltage(opp);
+	rcu_read_unlock();
 
 	/*
 	 * Only update if there is a change of frequency
@@ -107,6 +108,8 @@ kbase_devfreq_target(struct device *dev, unsigned long *target_freq, u32 flags)
 	*target_freq = freq;
 	kbdev->current_voltage = voltage;
 	kbdev->current_freq = freq;
+	if (kbdev->devfreq)
+		kbdev->devfreq->last_status.current_frequency = freq;
 
 	kbase_pm_reset_dvfs_utilisation(kbdev);
 
@@ -203,6 +206,7 @@ static void kbase_devfreq_exit(struct device *dev)
 int kbase_devfreq_init(struct kbase_device *kbdev)
 {
 	struct devfreq_dev_profile *dp;
+	unsigned long opp_rate;
 	int err;
 
 	if (!kbdev->clock)
@@ -243,6 +247,11 @@ int kbase_devfreq_init(struct kbase_device *kbdev)
 		goto opp_notifier_failed;
 	}
 
+	opp_rate = kbdev->current_freq;
+	rcu_read_lock();
+	devfreq_recommended_opp(kbdev->dev, &opp_rate, 0);
+	rcu_read_unlock();
+	kbdev->devfreq->last_status.current_frequency = opp_rate;
 #ifdef CONFIG_DEVFREQ_THERMAL
 	err = kbase_power_model_simple_init(kbdev);
 	if (err && err != -ENODEV && err != -EPROBE_DEFER) {
-- 
2.35.3

