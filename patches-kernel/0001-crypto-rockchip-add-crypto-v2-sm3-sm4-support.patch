From d39a33349bc2791d514558793a8912a001c89701 Mon Sep 17 00:00:00 2001
From: Lin Jinhan <troy.lin@rock-chips.com>
Date: Tue, 16 Jun 2020 17:20:12 +0800
Subject: [PATCH] crypto: rockchip - add crypto v2 sm3/sm4 support

Change-Id: I31e4ac2d7c47c0f7649306d72fdf172150d45d7e
Signed-off-by: Lin Jinhan <troy.lin@rock-chips.com>
---
 drivers/crypto/Kconfig                        |  1 +
 drivers/crypto/rockchip/rk_crypto_core.c      |  8 ++++++-
 drivers/crypto/rockchip/rk_crypto_core.h      |  6 ++++++
 drivers/crypto/rockchip/rk_crypto_v2.h        |  4 ++++
 .../crypto/rockchip/rk_crypto_v2_ablkcipher.c | 21 +++++++++++++++++++
 drivers/crypto/rockchip/rk_crypto_v2_ahash.c  | 12 +++++++++++
 drivers/crypto/rockchip/rk_crypto_v2_reg.h    |  1 +
 7 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/drivers/crypto/Kconfig b/drivers/crypto/Kconfig
index a825b6444459..e33934f36969 100644
--- a/drivers/crypto/Kconfig
+++ b/drivers/crypto/Kconfig
@@ -648,6 +648,7 @@ config CRYPTO_DEV_ROCKCHIP
 	select CRYPTO_DES
 	select CRYPTO_MD5
 	select CRYPTO_SHA1
+	select CRYPTO_SM3
 	select CRYPTO_SHA256
 	select CRYPTO_HASH
 	select CRYPTO_BLKCIPHER
diff --git a/drivers/crypto/rockchip/rk_crypto_core.c b/drivers/crypto/rockchip/rk_crypto_core.c
index d2392815e620..373a294116b0 100644
--- a/drivers/crypto/rockchip/rk_crypto_core.c
+++ b/drivers/crypto/rockchip/rk_crypto_core.c
@@ -364,6 +364,10 @@ static const char * const crypto_v2_rsts[] = {
 };
 
 static struct rk_crypto_tmp *crypto_v2_algs[] = {
+	&rk_v2_ecb_sm4_alg,		/* ecb(sm4) */
+	&rk_v2_cbc_sm4_alg,		/* cbc(sm4) */
+	&rk_v2_xts_sm4_alg,		/* xts(sm4) */
+
 	&rk_v2_ecb_aes_alg,		/* ecb(aes) */
 	&rk_v2_cbc_aes_alg,		/* cbc(aes) */
 	&rk_v2_xts_aes_alg,		/* xts(aes) */
@@ -378,6 +382,7 @@ static struct rk_crypto_tmp *crypto_v2_algs[] = {
 	&rk_v2_ahash_sha256,		/* sha256 */
 	&rk_v2_ahash_sha512,		/* sha512 */
 	&rk_v2_ahash_md5,		/* md5 */
+	&rk_v2_ahash_sm3,		/* sm3 */
 };
 
 static char *px30_algs_name[] = {
@@ -388,9 +393,10 @@ static char *px30_algs_name[] = {
 };
 
 static char *rv1126_algs_name[] = {
+	"ecb(sm4)", "cbc(sm4)", "xts(sm4)",
 	"ecb(des)", "cbc(des)",
 	"ecb(des3_ede)", "cbc(des3_ede)",
-	"sha1", "sha256", "sha512", "md5",
+	"sha1", "sha256", "sha512", "md5", "sm3",
 };
 
 static const struct rk_crypto_soc_data px30_soc_data =
diff --git a/drivers/crypto/rockchip/rk_crypto_core.h b/drivers/crypto/rockchip/rk_crypto_core.h
index 333a4e07ed89..099c36493232 100644
--- a/drivers/crypto/rockchip/rk_crypto_core.h
+++ b/drivers/crypto/rockchip/rk_crypto_core.h
@@ -10,6 +10,8 @@
 #include <crypto/algapi.h>
 #include <crypto/md5.h>
 #include <crypto/sha.h>
+#include <crypto/sm3.h>
+#include <crypto/sm4.h>
 #include <crypto/internal/hash.h>
 #include <linux/interrupt.h>
 #include <linux/delay.h>
@@ -121,12 +123,14 @@ enum rk_hash_algo {
 	HASH_ALGO_SHA1,
 	HASH_ALGO_SHA256,
 	HASH_ALGO_SHA512,
+	HASH_ALGO_SM3,
 };
 
 enum rk_cipher_algo {
 	CIPHER_ALGO_DES,
 	CIPHER_ALGO_DES3_EDE,
 	CIPHER_ALGO_AES,
+	CIPHER_ALGO_SM4,
 };
 
 enum rk_cipher_mode {
@@ -139,6 +143,8 @@ enum rk_cipher_mode {
 #define DES_MAX_KEY_SIZE	DES_KEY_SIZE
 #define DES3_EDE_MIN_KEY_SIZE	DES3_EDE_KEY_SIZE
 #define DES3_EDE_MAX_KEY_SIZE	DES3_EDE_KEY_SIZE
+#define SM4_MIN_KEY_SIZE	SM4_KEY_SIZE
+#define SM4_MAX_KEY_SIZE	SM4_KEY_SIZE
 
 #define MD5_BLOCK_SIZE		SHA1_BLOCK_SIZE
 
diff --git a/drivers/crypto/rockchip/rk_crypto_v2.h b/drivers/crypto/rockchip/rk_crypto_v2.h
index 701c3e07bfdc..525d7e424fde 100644
--- a/drivers/crypto/rockchip/rk_crypto_v2.h
+++ b/drivers/crypto/rockchip/rk_crypto_v2.h
@@ -23,6 +23,9 @@ struct rk_hw_crypto_v2_info {
 	dma_addr_t			desc_dma;
 };
 
+extern struct rk_crypto_tmp rk_v2_ecb_sm4_alg;
+extern struct rk_crypto_tmp rk_v2_cbc_sm4_alg;
+extern struct rk_crypto_tmp rk_v2_xts_sm4_alg;
 extern struct rk_crypto_tmp rk_v2_ecb_aes_alg;
 extern struct rk_crypto_tmp rk_v2_cbc_aes_alg;
 extern struct rk_crypto_tmp rk_v2_xts_aes_alg;
@@ -37,6 +40,7 @@ extern struct rk_crypto_tmp rk_v2_ahash_sha1;
 extern struct rk_crypto_tmp rk_v2_ahash_sha256;
 extern struct rk_crypto_tmp rk_v2_ahash_sha512;
 extern struct rk_crypto_tmp rk_v2_ahash_md5;
+extern struct rk_crypto_tmp rk_v2_ahash_sm3;
 
 int rk_hw_crypto_v2_init(struct device *dev, void *hw_info);
 void rk_hw_crypto_v2_deinit(struct device *dev, void *hw_info);
diff --git a/drivers/crypto/rockchip/rk_crypto_v2_ablkcipher.c b/drivers/crypto/rockchip/rk_crypto_v2_ablkcipher.c
index f2dca0eb9f3b..93e5e186cb8b 100644
--- a/drivers/crypto/rockchip/rk_crypto_v2_ablkcipher.c
+++ b/drivers/crypto/rockchip/rk_crypto_v2_ablkcipher.c
@@ -11,6 +11,7 @@
 
 #include <linux/module.h>
 #include <linux/platform_device.h>
+
 #include "rk_crypto_core.h"
 #include "rk_crypto_v2.h"
 #include "rk_crypto_v2_reg.h"
@@ -22,6 +23,7 @@ static const u32 cipher_algo2bc[] = {
 	[CIPHER_ALGO_DES]      = CRYPTO_BC_DES,
 	[CIPHER_ALGO_DES3_EDE] = CRYPTO_BC_TDES,
 	[CIPHER_ALGO_AES]      = CRYPTO_BC_AES,
+	[CIPHER_ALGO_SM4]      = CRYPTO_BC_SM4,
 };
 
 static const u32 cipher_mode2bc[] = {
@@ -206,6 +208,15 @@ static int rk_cipher_setkey(struct crypto_ablkcipher *cipher,
 				goto error;
 		}
 		break;
+	case CIPHER_ALGO_SM4:
+		if (algt->mode != CIPHER_MODE_XTS) {
+			if (keylen != SM4_KEY_SIZE)
+				goto error;
+		} else {
+			if (keylen != SM4_KEY_SIZE * 2)
+				goto error;
+		}
+		break;
 	default:
 		goto error;
 	}
@@ -488,6 +499,15 @@ void rk_hw_crypto_v2_deinit(struct device *dev, void *hw_info)
 				  info->desc, info->desc_dma);
 }
 
+struct rk_crypto_tmp rk_v2_ecb_sm4_alg =
+	RK_CIPHER_ALGO_INIT(SM4, ECB, ecb(sm4), ecb-sm4-rk);
+
+struct rk_crypto_tmp rk_v2_cbc_sm4_alg =
+	RK_CIPHER_ALGO_INIT(SM4, CBC, cbc(sm4), cbc-sm4-rk);
+
+struct rk_crypto_tmp rk_v2_xts_sm4_alg =
+	RK_CIPHER_ALGO_XTS_INIT(SM4, xts(sm4), xts-sm4-rk);
+
 struct rk_crypto_tmp rk_v2_ecb_aes_alg =
 	RK_CIPHER_ALGO_INIT(AES, ECB, ecb(aes), ecb-aes-rk);
 
@@ -508,3 +528,4 @@ struct rk_crypto_tmp rk_v2_ecb_des3_ede_alg =
 
 struct rk_crypto_tmp rk_v2_cbc_des3_ede_alg =
 	RK_CIPHER_ALGO_INIT(DES3_EDE, CBC, cbc(des3_ede), cbc-des3_ede-rk);
+
diff --git a/drivers/crypto/rockchip/rk_crypto_v2_ahash.c b/drivers/crypto/rockchip/rk_crypto_v2_ahash.c
index a3ab9b6b31c7..61123a001c4d 100644
--- a/drivers/crypto/rockchip/rk_crypto_v2_ahash.c
+++ b/drivers/crypto/rockchip/rk_crypto_v2_ahash.c
@@ -54,11 +54,19 @@ static const u8 null_hash_sha512_value[] = {
 	0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
 };
 
+static const u8 null_hash_sm3_value[] = {
+	0x1a, 0xb2, 0x1d, 0x83, 0x55, 0xcf, 0xa1, 0x7f,
+	0x8e, 0x61, 0x19, 0x48, 0x31, 0xe8, 0x1a, 0x8f,
+	0x22, 0xbe, 0xc8, 0xc7, 0x28, 0xfe, 0xfb, 0x74,
+	0x7e, 0xd0, 0x35, 0xeb, 0x50, 0x82, 0xaa, 0x2b
+};
+
 static const u32 hash_algo2bc[] = {
 	[HASH_ALGO_MD5]    = CRYPTO_MD5,
 	[HASH_ALGO_SHA1]   = CRYPTO_SHA1,
 	[HASH_ALGO_SHA256] = CRYPTO_SHA256,
 	[HASH_ALGO_SHA512] = CRYPTO_SHA512,
+	[HASH_ALGO_SM3]    = CRYPTO_SM3,
 };
 
 static void word2byte(u32 word, u8 *ch, u32 endian)
@@ -109,6 +117,9 @@ static int zero_message_process(struct ahash_request *req)
 	case HASH_ALGO_SHA512:
 		memcpy(req->result, null_hash_sha512_value, rk_digest_size);
 		break;
+	case HASH_ALGO_SM3:
+		memcpy(req->result, null_hash_sm3_value, rk_digest_size);
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -477,4 +488,5 @@ struct rk_crypto_tmp rk_v2_ahash_md5 = RK_HASH_ALGO_INIT(MD5, md5);
 struct rk_crypto_tmp rk_v2_ahash_sha1 = RK_HASH_ALGO_INIT(SHA1, sha1);
 struct rk_crypto_tmp rk_v2_ahash_sha256 = RK_HASH_ALGO_INIT(SHA256, sha256);
 struct rk_crypto_tmp rk_v2_ahash_sha512 = RK_HASH_ALGO_INIT(SHA512, sha512);
+struct rk_crypto_tmp rk_v2_ahash_sm3 = RK_HASH_ALGO_INIT(SM3, sm3);
 
diff --git a/drivers/crypto/rockchip/rk_crypto_v2_reg.h b/drivers/crypto/rockchip/rk_crypto_v2_reg.h
index a295841bee03..d48889dcc05b 100644
--- a/drivers/crypto/rockchip/rk_crypto_v2_reg.h
+++ b/drivers/crypto/rockchip/rk_crypto_v2_reg.h
@@ -80,6 +80,7 @@
 /* Block Cipher Control Register */
 #define CRYPTO_BC_CTL			0x0044
 #define CRYPTO_BC_AES			_SBF(8, 0x00)
+#define CRYPTO_BC_SM4			_SBF(8, 0x01)
 #define CRYPTO_BC_DES			_SBF(8, 0x02)
 #define CRYPTO_BC_TDES			_SBF(8, 0x03)
 #define CRYPTO_BC_ECB			_SBF(4, 0x00)
-- 
2.35.3

