From b181f0746982a3a36bf27d07bab72ecf2844c8c9 Mon Sep 17 00:00:00 2001
From: "gy@rock-chips.com" <gy@rock-chips.com>
Date: Thu, 22 Nov 2012 16:27:11 +0800
Subject: [PATCH] add gsensor mxc6225

---
 drivers/input/sensors/accel/Kconfig   |   6 +
 drivers/input/sensors/accel/Makefile  |   3 +-
 drivers/input/sensors/accel/mxc622x.c | 312 ++++++++++++++++++++++++++
 drivers/input/sensors/sensor-dev.c    |   1 +
 include/linux/sensor-dev.h            |   1 +
 5 files changed, 322 insertions(+), 1 deletion(-)
 create mode 100644 drivers/input/sensors/accel/mxc622x.c

diff --git a/drivers/input/sensors/accel/Kconfig b/drivers/input/sensors/accel/Kconfig
index 1ded64e9a524..4e62ea91df30 100755
--- a/drivers/input/sensors/accel/Kconfig
+++ b/drivers/input/sensors/accel/Kconfig
@@ -33,6 +33,12 @@ config GS_MMA7660
 	  To have support for your specific gsesnor you will have to
 	  select the proper drivers which depend on this option.
 
+config GS_MXC6225
+	bool "gsensor mxc6225"
+	help
+	To have support for your sepcific gsensor you will have to
+	select het proper drivers which depend on this option.
+
 config GS_BMA023
   bool "gsensor bma023"
   help
diff --git a/drivers/input/sensors/accel/Makefile b/drivers/input/sensors/accel/Makefile
index 1f9ac9adcf80..67226f173770 100755
--- a/drivers/input/sensors/accel/Makefile
+++ b/drivers/input/sensors/accel/Makefile
@@ -1,4 +1,5 @@
 obj-$(CONFIG_GS_KXTIK) 		+= kxtik.o
 obj-$(CONFIG_GS_MMA8452) 	+= mma8452.o
 obj-$(CONFIG_GS_LIS3DH) 	+= lis3dh.o
-obj-$(CONFIG_GS_MMA7660) 	+= mma7660.o
\ No newline at end of file
+obj-$(CONFIG_GS_MMA7660) 	+= mma7660.o
+obj-$(CONFIG_GS_MXC6225)    += mxc622x.o
diff --git a/drivers/input/sensors/accel/mxc622x.c b/drivers/input/sensors/accel/mxc622x.c
new file mode 100644
index 000000000000..045a87602f86
--- /dev/null
+++ b/drivers/input/sensors/accel/mxc622x.c
@@ -0,0 +1,312 @@
+/* drivers/input/sensors/access/mxc6225.c
+ *
+ * Copyright (C) 2012-2015 ROCKCHIP.
+ * Author: luowei <lw@rock-chips.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <linux/interrupt.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <linux/irq.h>
+#include <linux/miscdevice.h>
+#include <linux/gpio.h>
+#include <asm/uaccess.h>
+#include <asm/atomic.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/freezer.h>
+#include <mach/gpio.h>
+#include <mach/board.h> 
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/sensor-dev.h>
+
+#if 0
+#define SENSOR_DEBUG_TYPE SENSOR_TYPE_ACCEL
+#define DBG(x...) if(sensor->pdata->type == SENSOR_DEBUG_TYPE) printk(x)
+#else
+#define DBG(x...)
+#endif
+
+#define MXC6225_ENABLE		1
+
+#define MXC6225_REG_DATA       0x00
+#define MXC6225_REG_TILT        0x3
+#define MXC6225_REG_SRST        0x4
+#define MXC6225_REG_SPCNT       0x5
+#define MXC6225_REG_INTSU      	0x6
+#define MXC6225_REG_MODE        0x7
+#define MXC6225_REG_SR          0x8
+#define MXC6225_REG_PDET        0x9
+#define MXC6225_REG_PD          0xa
+
+
+#define MXC6225_RANGE			2000000//1500000
+
+/* LIS3DH */
+#define MXC6225_PRECISION       8 // 8bit data
+#define MXC6225_BOUNDARY		(0x1 << (MXC6225_PRECISION - 1))
+#define MXC6225_GRAVITY_STEP	15625 //	(MXC6225_RANGE / MXC6225_BOUNDARY)
+
+#define MXC6225_COUNT_AVERAGE	2
+
+struct sensor_axis_average {
+		int x_average;
+		int y_average;
+		int z_average;
+		int count;
+};
+
+static struct sensor_axis_average axis_average;
+
+/****************operate according to sensor chip:start************/
+
+static int sensor_active(struct i2c_client *client, int enable, int rate)
+{
+	struct sensor_private_data *sensor =
+	    (struct sensor_private_data *) i2c_get_clientdata(client);	
+	int result = 0;
+	int status = 0;
+		
+	sensor->ops->ctrl_data = sensor_read_reg(client, sensor->ops->ctrl_reg);
+	
+	//register setting according to chip datasheet		
+	if(enable)
+	{	
+		status = MXC6225_ENABLE;	//mxc6225
+		sensor->ops->ctrl_data |= status;	
+	}
+	else
+	{
+		status = ~MXC6225_ENABLE;	//mxc6225
+		sensor->ops->ctrl_data &= status;
+	}
+
+	DBG("%s:reg=0x%x,reg_ctrl=0x%x,enable=%d\n",__func__,sensor->ops->ctrl_reg, sensor->ops->ctrl_data, enable);
+	result = sensor_write_reg(client, sensor->ops->ctrl_reg, sensor->ops->ctrl_data);
+	if(result)
+		printk("%s:fail to active sensor\n",__func__);
+	
+	return result;
+
+}
+
+static int sensor_init(struct i2c_client *client)
+{	
+	struct sensor_private_data *sensor =
+	    (struct sensor_private_data *) i2c_get_clientdata(client);	
+	int result = 0;
+	
+	result = sensor->ops->active(client,0,0);
+	if(result)
+	{
+		printk("%s:line=%d,error\n",__func__,__LINE__);
+		return result;
+	}
+	
+	sensor->status_cur = SENSOR_OFF;
+
+	//DBG("%s:MXC6225_REG_TILT=0x%x\n",__func__,sensor_read_reg(client, MXC6225_REG_TILT));
+
+	result = sensor_write_reg(client, MXC6225_REG_SR, (0x01<<5)| 0x02);	//32 Samples/Second Active and Auto-Sleep Mode
+	if(result)
+	{
+		printk("%s:line=%d,error\n",__func__,__LINE__);
+		return result;
+	}
+
+	if(sensor->pdata->irq_enable)	//open interrupt
+	{
+		result = sensor_write_reg(client, MXC6225_REG_INTSU, 1<<4);//enable int,GINT=1
+		if(result)
+		{
+			printk("%s:line=%d,error\n",__func__,__LINE__);
+			return result;
+		}
+	}
+	
+	sensor->ops->ctrl_data = 1<<8;	//Interrupt output INT is push-pull
+	result = sensor_write_reg(client, sensor->ops->ctrl_reg, sensor->ops->ctrl_data);
+	if(result)
+	{
+		printk("%s:line=%d,error\n",__func__,__LINE__);
+		return result;
+	}
+
+	
+	memset(&axis_average, 0, sizeof(struct sensor_axis_average));
+
+	return result;
+}
+
+
+static int sensor_convert_data(struct i2c_client *client, char high_byte, char low_byte)
+{
+    s64 result;
+	struct sensor_private_data *sensor =
+	    (struct sensor_private_data *) i2c_get_clientdata(client);	
+	//int precision = sensor->ops->precision;
+		
+	result = (int)low_byte;
+	if (result < MXC6225_BOUNDARY)
+		result = result* MXC6225_GRAVITY_STEP;
+	else
+		result = ~(((~result & 0x7f) + 1) * MXC6225_GRAVITY_STEP) + 1;    
+
+    	return (int)result;
+}
+
+static int gsensor_report_value(struct i2c_client *client, struct sensor_axis *axis)
+{
+	struct sensor_private_data *sensor =
+	    (struct sensor_private_data *) i2c_get_clientdata(client);	
+
+	/* Report acceleration sensor information */
+	input_report_abs(sensor->input_dev, ABS_X, axis->x);
+	input_report_abs(sensor->input_dev, ABS_X, axis->y);
+	input_report_abs(sensor->input_dev, ABS_Z, axis->z);
+	input_sync(sensor->input_dev);
+	DBG("Gsensor x==%d  y==%d z==%d\n",axis->x,axis->y,axis->z);
+
+	return 0;
+}
+
+#define GSENSOR_MIN  		2
+static int sensor_report_value(struct i2c_client *client)
+{
+	struct sensor_private_data *sensor =
+		(struct sensor_private_data *) i2c_get_clientdata(client);	
+	struct sensor_platform_data *pdata = sensor->pdata;
+	int ret = 0;
+	int x,y,z;
+	struct sensor_axis axis;
+	char buffer[3] = {0};	
+	char value = 0;
+	
+	if(sensor->ops->read_len < 3)	//sensor->ops->read_len = 3
+	{
+		printk("%s:lenth is error,len=%d\n",__func__,sensor->ops->read_len);
+		return -1;
+	}
+	
+	memset(buffer, 0, 3);
+	
+	/* Data bytes from hardware xL, xH, yL, yH, zL, zH */	
+	do {
+		*buffer = sensor->ops->read_reg;
+		ret = sensor_rx_data(client, buffer, sensor->ops->read_len);
+		if (ret < 0)
+		return ret;
+	} while (0);
+
+
+	//this gsensor need 6 bytes buffer
+	x = sensor_convert_data(sensor->client, 0, buffer[0]);	//buffer[1]:high bit 
+	y = sensor_convert_data(sensor->client, 0, buffer[1]);
+	z = sensor_convert_data(sensor->client, 0, buffer[2]);		
+
+	axis.x = (pdata->orientation[0])*x + (pdata->orientation[1])*y + (pdata->orientation[2])*z;
+	axis.y = (pdata->orientation[3])*x + (pdata->orientation[4])*y + (pdata->orientation[5])*z; 
+	axis.z = (pdata->orientation[6])*x + (pdata->orientation[7])*y + (pdata->orientation[8])*z;
+
+	
+	axis_average.x_average += axis.x;
+	axis_average.y_average += axis.y;
+	axis_average.z_average += axis.z;
+	axis_average.count++;
+	
+	if(axis_average.count >= MXC6225_COUNT_AVERAGE)
+	{
+		axis.x = axis_average.x_average / axis_average.count;	
+		axis.y = axis_average.y_average / axis_average.count;	
+		axis.z = axis_average.z_average / axis_average.count;
+		
+		DBG( "%s: axis = %d  %d  %d \n", __func__, axis.x, axis.y, axis.z);
+		
+		memset(&axis_average, 0, sizeof(struct sensor_axis_average));
+		
+		//Report event only while value is changed to save some power
+		if((abs(sensor->axis.x - axis.x) > GSENSOR_MIN) || (abs(sensor->axis.y - axis.y) > GSENSOR_MIN) || (abs(sensor->axis.z - axis.z) > GSENSOR_MIN))
+		{
+			gsensor_report_value(client, &axis);
+
+			/* »¥³âµØ»º´æÊý¾Ý. */
+			mutex_lock(&(sensor->data_mutex) );
+			sensor->axis = axis;
+			mutex_unlock(&(sensor->data_mutex) );
+		}
+	}
+	
+	if((sensor->pdata->irq_enable)&& (sensor->ops->int_status_reg >= 0))	//read sensor intterupt status register
+	{
+		
+		value = sensor_read_reg(client, sensor->ops->int_status_reg);
+		DBG("%s:sensor int status :0x%x\n",__func__,value);
+	}
+	
+	return ret;
+}
+
+
+struct sensor_operate gsensor_mxc6225_ops = {
+	.name				= "mxc6225",
+	.type				= SENSOR_TYPE_ACCEL,			//sensor type and it should be correct
+	.id_i2c				= ACCEL_ID_MXC6225,			//i2c id number
+	.read_reg			= MXC6225_REG_DATA,			//read data
+	.read_len			= 3,					//data length
+	.id_reg				= SENSOR_UNKNOW_DATA,			//read device id from this register
+	.id_data 			= SENSOR_UNKNOW_DATA,			//device id
+	.precision			= MXC6225_PRECISION,			//12 bit
+	.ctrl_reg 			= MXC6225_REG_MODE,			//enable or disable 	
+	.int_status_reg 		= SENSOR_UNKNOW_DATA,			//intterupt status register
+	.range				= {-MXC6225_RANGE,MXC6225_RANGE},	//range
+	.trig				= IRQF_TRIGGER_LOW |IRQF_ONESHOT,		
+	.active				= sensor_active,	
+	.init				= sensor_init,
+	.report 			= sensor_report_value,
+};
+
+/****************operate according to sensor chip:end************/
+
+//function name should not be changed
+static struct sensor_operate *gsensor_get_ops(void)
+{
+	return &gsensor_mxc6225_ops;
+}
+
+
+static int __init gsensor_mxc6225_init(void)
+{
+	struct sensor_operate *ops = gsensor_get_ops();
+	int result = 0;
+	int type = ops->type;
+	
+	result = sensor_register_slave(type, NULL, NULL, gsensor_get_ops);	
+	DBG("%s\n",__func__);
+	return result;
+}
+
+static void __exit gsensor_mxc6225_exit(void)
+{
+	struct sensor_operate *ops = gsensor_get_ops();
+	int type = ops->type;
+	sensor_unregister_slave(type, NULL, NULL, gsensor_get_ops);
+}
+
+
+module_init(gsensor_mxc6225_init);
+module_exit(gsensor_mxc6225_exit);
+
+
+
diff --git a/drivers/input/sensors/sensor-dev.c b/drivers/input/sensors/sensor-dev.c
index 5ae58ff2d64d..ea2b4172c57b 100755
--- a/drivers/input/sensors/sensor-dev.c
+++ b/drivers/input/sensors/sensor-dev.c
@@ -1400,6 +1400,7 @@ static const struct i2c_device_id sensor_id[] = {
 	{"gs_kxtik", ACCEL_ID_KXTIK},
 	{"gs_lis3dh", ACCEL_ID_LIS3DH},
 	{"gs_mma7660", ACCEL_ID_MMA7660},
+	{"gs_mxc6225", ACCEL_ID_MXC6225},
 	/*compass*/
 	{"compass", COMPASS_ID_ALL},
 	{"ak8975", COMPASS_ID_AK8975},
diff --git a/include/linux/sensor-dev.h b/include/linux/sensor-dev.h
index efabb62369c1..7841b1782fdd 100755
--- a/include/linux/sensor-dev.h
+++ b/include/linux/sensor-dev.h
@@ -54,6 +54,7 @@ enum sensor_id {
 	ACCEL_ID_MMA845X,
 	ACCEL_ID_MMA7660,
 	ACCEL_ID_MPU6050,
+	ACCEL_ID_MXC6225,
 
 	COMPASS_ID_ALL,
 	COMPASS_ID_AK8975,
-- 
2.35.3

