From 998e9cd43f171383fac15ba6b708a3556d21e15c Mon Sep 17 00:00:00 2001
From: Cai YiWei <cyw@rock-chips.com>
Date: Mon, 24 Feb 2020 13:43:37 +0800
Subject: [PATCH] media: rockchip: isp: add csi tx/rx memory mode API

Change-Id: I289b1c57889e65d5220462d9509f96287b3fb81a
Signed-off-by: Cai YiWei <cyw@rock-chips.com>
---
 drivers/media/platform/rockchip/isp/capture.c | 31 +++----
 drivers/media/platform/rockchip/isp/csi.h     |  2 +
 drivers/media/platform/rockchip/isp/dmarx.c   | 86 +++++++++++++++++--
 drivers/media/platform/rockchip/isp/rkisp.c   | 15 ++++
 include/uapi/linux/rkisp2-config.h            | 10 +++
 5 files changed, 117 insertions(+), 27 deletions(-)

diff --git a/drivers/media/platform/rockchip/isp/capture.c b/drivers/media/platform/rockchip/isp/capture.c
index d1180c05d9ab..288e0e83fc10 100644
--- a/drivers/media/platform/rockchip/isp/capture.c
+++ b/drivers/media/platform/rockchip/isp/capture.c
@@ -1021,8 +1021,8 @@ static int dmatx3_config_mi(struct rkisp_stream *stream)
 	vc = csi->sink[CSI_SRC_CH4 - 1].index;
 	raw_wr_ctrl(stream,
 		SW_CSI_RAW_WR_CH_EN(vc) |
-		SW_CSI_RAW_WR_SIMG_MODE |
-		SW_CSI_RWA_WR_SIMG_SWP);
+		csi->memory |
+		SW_CSI_RAW_WR_EN_ORG);
 	mi_set_y_size(stream, in_size);
 	mi_frame_end(stream);
 	mi_frame_end_int_enable(stream);
@@ -1068,10 +1068,7 @@ static int dmatx2_config_mi(struct rkisp_stream *stream)
 				    stream->out_fmt.height);
 		vc = csi->sink[CSI_SRC_CH3 - 1].index;
 		val = SW_CSI_RAW_WR_CH_EN(vc);
-		if (IS_HDR_DBG(dev->hdr.op_mode) ||
-		    dev->hdr.op_mode == HDR_NORMAL)
-			val |= SW_CSI_RWA_WR_SIMG_SWP |
-				SW_CSI_RAW_WR_SIMG_MODE;
+		val |= csi->memory;
 		if (dev->hdr.op_mode != HDR_NORMAL)
 			val |= SW_CSI_RAW_WR_EN_ORG;
 		raw_wr_ctrl(stream, val);
@@ -1114,10 +1111,7 @@ static int dmatx1_config_mi(struct rkisp_stream *stream)
 		raw_wr_set_pic_offs(stream, 0);
 		vc = csi->sink[CSI_SRC_CH2 - 1].index;
 		val = SW_CSI_RAW_WR_CH_EN(vc);
-		if (IS_HDR_DBG(dev->hdr.op_mode) ||
-		    dev->hdr.op_mode == HDR_NORMAL)
-			val |= SW_CSI_RWA_WR_SIMG_SWP |
-				SW_CSI_RAW_WR_SIMG_MODE;
+		val |= csi->memory;
 		if (dev->hdr.op_mode != HDR_NORMAL)
 			val |= SW_CSI_RAW_WR_EN_ORG;
 		raw_wr_ctrl(stream, val);
@@ -1165,10 +1159,7 @@ static int dmatx0_config_mi(struct rkisp_stream *stream)
 		raw_wr_set_pic_offs(dmatx, 0);
 		vc = csi->sink[CSI_SRC_CH1 - 1].index;
 		val = SW_CSI_RAW_WR_CH_EN(vc);
-		if (IS_HDR_DBG(dev->hdr.op_mode) ||
-		    dev->hdr.op_mode == HDR_NORMAL)
-			val |= SW_CSI_RWA_WR_SIMG_SWP |
-				SW_CSI_RAW_WR_SIMG_MODE;
+		val |= csi->memory;
 		if (dev->hdr.op_mode != HDR_NORMAL)
 			val |= SW_CSI_RAW_WR_EN_ORG;
 		raw_wr_ctrl(dmatx, val);
@@ -1707,9 +1698,7 @@ int hdr_config_dmatx(struct rkisp_device *dev)
 		dmatx2_config_mi(&dev->cap_dev.stream[RKISP_STREAM_DMATX2]);
 
 	if (IS_HDR_DBG(dev->hdr.op_mode))
-		raw_rd_ctrl(dev->base_addr,
-			SW_CSI_RAW_RD_SIMG_SWP |
-			SW_CSI_RAW_RD_SIMG_MOD);
+		raw_rd_ctrl(dev->base_addr, dev->csi_dev.memory << 2);
 	return 0;
 }
 
@@ -2318,7 +2307,13 @@ static int rkisp_set_fmt(struct rkisp_stream *stream,
 			height = pixm->height / ysubs;
 		}
 
-		bytesperline = width * DIV_ROUND_UP(fmt->bpp[i], 8);
+		if (dev->isp_ver == ISP_V20 &&
+		    !dev->csi_dev.memory &&
+		    stream->id != RKISP_STREAM_MP &&
+		    stream->id != RKISP_STREAM_SP)
+			bytesperline = width * fmt->bpp[i] / 8;
+		else
+			bytesperline = width * DIV_ROUND_UP(fmt->bpp[i], 8);
 		/* stride is only available for sp stream and y plane */
 		if (stream->id != RKISP_STREAM_SP || i != 0 ||
 		    plane_fmt->bytesperline < bytesperline)
diff --git a/drivers/media/platform/rockchip/isp/csi.h b/drivers/media/platform/rockchip/isp/csi.h
index 1a00bb6b8c61..2566bcc87cfa 100644
--- a/drivers/media/platform/rockchip/isp/csi.h
+++ b/drivers/media/platform/rockchip/isp/csi.h
@@ -64,6 +64,7 @@ struct sink_info {
  * mipi_di: Data Identifier (vc[7:6],dt[5:0])
  * filt_state: multiframe read back mode to filt irq event
  * tx_first: flags for dmatx first Y_STATE irq
+ * memory: compact or big/little endian byte order for tx/rx
  */
 struct rkisp_csi_device {
 	struct rkisp_device *ispdev;
@@ -74,6 +75,7 @@ struct rkisp_csi_device {
 	u8 mipi_di[CSI_PAD_MAX - 1];
 	u8 filt_state[CSI_F_MAX];
 	u8 tx_first[HDR_DMA_MAX];
+	u8 memory;
 };
 
 int rkisp_register_csi_subdev(struct rkisp_device *dev,
diff --git a/drivers/media/platform/rockchip/isp/dmarx.c b/drivers/media/platform/rockchip/isp/dmarx.c
index 614e80ab99ad..8a2677ce8dc2 100644
--- a/drivers/media/platform/rockchip/isp/dmarx.c
+++ b/drivers/media/platform/rockchip/isp/dmarx.c
@@ -100,6 +100,70 @@ static const struct capture_fmt dmarx_fmts[] = {
 	}
 };
 
+static const struct capture_fmt rawrd_fmts[] = {
+	{
+		.fourcc = V4L2_PIX_FMT_SRGGB8,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 8 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGRBG8,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 8 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGBRG8,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 8 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SBGGR8,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 8 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SRGGB10,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 10 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGRBG10,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 10 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGBRG10,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 10 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SBGGR10,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 10 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SRGGB12,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 12 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGRBG12,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 12 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SGBRG12,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 12 },
+		.mplanes = 1,
+	}, {
+		.fourcc = V4L2_PIX_FMT_SBGGR12,
+		.fmt_type = FMT_BAYER,
+		.bpp = { 12 },
+		.mplanes = 1,
+	}
+};
+
 static struct stream_config rkisp_dmarx_stream_config = {
 	.fmts = dmarx_fmts,
 	.fmt_size = ARRAY_SIZE(dmarx_fmts),
@@ -112,8 +176,8 @@ static struct stream_config rkisp_dmarx_stream_config = {
 };
 
 static struct stream_config rkisp2_dmarx0_stream_config = {
-	.fmts = dmarx_fmts,
-	.fmt_size = ARRAY_SIZE(dmarx_fmts),
+	.fmts = rawrd_fmts,
+	.fmt_size = ARRAY_SIZE(rawrd_fmts),
 	.frame_end_id = RAW0_RD_FRAME,
 	.mi = {
 		.y_base_ad_init = MI_RAW0_RD_BASE,
@@ -122,8 +186,8 @@ static struct stream_config rkisp2_dmarx0_stream_config = {
 };
 
 static struct stream_config rkisp2_dmarx1_stream_config = {
-	.fmts = dmarx_fmts,
-	.fmt_size = ARRAY_SIZE(dmarx_fmts),
+	.fmts = rawrd_fmts,
+	.fmt_size = ARRAY_SIZE(rawrd_fmts),
 	.frame_end_id = RAW1_RD_FRAME,
 	.mi = {
 		.y_base_ad_init = MI_RAW1_RD_BASE,
@@ -132,8 +196,8 @@ static struct stream_config rkisp2_dmarx1_stream_config = {
 };
 
 static struct stream_config rkisp2_dmarx2_stream_config = {
-	.fmts = dmarx_fmts,
-	.fmt_size = ARRAY_SIZE(dmarx_fmts),
+	.fmts = rawrd_fmts,
+	.fmt_size = ARRAY_SIZE(rawrd_fmts),
 	.frame_end_id = RAW2_RD_FRAME,
 	.mi = {
 		.y_base_ad_init = MI_RAW2_RD_BASE,
@@ -227,8 +291,7 @@ static int rawrd_config_mi(struct rkisp_stream *stream)
 		stream->out_fmt.width,
 		stream->out_fmt.height);
 	isp_set_bits(base + CSI2RX_RAW_RD_CTRL, 0,
-		     SW_CSI_RAW_RD_SIMG_SWP |
-		     SW_CSI_RAW_RD_SIMG_MOD |
+		     dev->csi_dev.memory << 2 |
 		     1 << (stream->id - 1));
 
 	return 0;
@@ -564,7 +627,12 @@ static int rkisp_set_fmt(struct rkisp_stream *stream,
 			height = pixm->height / ysubs;
 		}
 
-		bytesperline = width * DIV_ROUND_UP(fmt->bpp[i], 8);
+		if (stream->ispdev->isp_ver == ISP_V20 &&
+		    !stream->ispdev->csi_dev.memory &&
+		    stream->id != RKISP_STREAM_DMARX)
+			bytesperline = width * fmt->bpp[i] / 8;
+		else
+			bytesperline = width * DIV_ROUND_UP(fmt->bpp[i], 8);
 		/* stride is only available for sp stream and y plane */
 		if (i != 0 ||
 		    plane_fmt->bytesperline < bytesperline)
diff --git a/drivers/media/platform/rockchip/isp/rkisp.c b/drivers/media/platform/rockchip/isp/rkisp.c
index 4d9b5bf7f111..697bb554a1d8 100644
--- a/drivers/media/platform/rockchip/isp/rkisp.c
+++ b/drivers/media/platform/rockchip/isp/rkisp.c
@@ -1590,6 +1590,15 @@ static long rkisp_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		isp_dev->dmarx_dev.frame_id = trigger->frame_id;
 		rkisp_trigger_read_back(&isp_dev->csi_dev, trigger->times);
 		break;
+	case RKISP_CMD_CSI_MEMORY_MODE:
+		if (*((int *)arg) == CSI_MEM_BYTE_BE)
+			isp_dev->csi_dev.memory = SW_CSI_RWA_WR_SIMG_SWP |
+						SW_CSI_RAW_WR_SIMG_MODE;
+		else if (*((int *)arg) == CSI_MEM_BYTE_LE)
+			isp_dev->csi_dev.memory = SW_CSI_RAW_WR_SIMG_MODE;
+		else
+			isp_dev->csi_dev.memory = 0;
+		break;
 	default:
 		ret = -ENOIOCTLCMD;
 	}
@@ -1604,6 +1613,7 @@ static long rkisp_compat_ioctl32(struct v4l2_subdev *sd,
 	void __user *up = compat_ptr(arg);
 	struct isp2x_csi_trigger trigger;
 	long ret = 0;
+	int mode;
 
 	switch (cmd) {
 	case RKISP_CMD_TRIGGER_READ_BACK:
@@ -1611,6 +1621,11 @@ static long rkisp_compat_ioctl32(struct v4l2_subdev *sd,
 		if (!ret)
 			ret = rkisp_ioctl(sd, cmd, &trigger);
 		break;
+	case RKISP_CMD_CSI_MEMORY_MODE:
+		ret = copy_from_user(&mode, up, sizeof(int));
+		if (!ret)
+			ret = rkisp_ioctl(sd, cmd, &mode);
+		break;
 	default:
 		ret = -ENOIOCTLCMD;
 	}
diff --git a/include/uapi/linux/rkisp2-config.h b/include/uapi/linux/rkisp2-config.h
index ff0e2fdd2114..bcdbbd05b9f7 100644
--- a/include/uapi/linux/rkisp2-config.h
+++ b/include/uapi/linux/rkisp2-config.h
@@ -13,6 +13,9 @@
 #define RKISP_CMD_TRIGGER_READ_BACK \
 	_IOW('V', BASE_VIDIOC_PRIVATE + 0, struct isp2x_csi_trigger)
 
+#define RKISP_CMD_CSI_MEMORY_MODE \
+	_IOW('V', BASE_VIDIOC_PRIVATE + 1, int)
+
 #define ISP2X_MODULE_DPCC		BIT_ULL(0)
 #define ISP2X_MODULE_BLS		BIT_ULL(1)
 #define ISP2X_MODULE_SDG		BIT_ULL(2)
@@ -141,6 +144,13 @@ struct isp2x_csi_trigger {
 	int times;
 } __attribute__ ((packed));
 
+enum isp2x_csi_memory {
+	CSI_MEM_COMPACT = 0,
+	CSI_MEM_BYTE_BE,
+	CSI_MEM_BYTE_LE,
+	CSI_MEM_MAX,
+};
+
 struct isp2x_window {
 	u16 h_offs;
 	u16 v_offs;
-- 
2.35.3

