From 24b77886e393f0f4765e48d273c7d570ab3269fd Mon Sep 17 00:00:00 2001
From: Zhen Chen <chenzhen@rock-chips.com>
Date: Wed, 17 Jan 2018 14:50:00 +0800
Subject: [PATCH] bifrost: make it possible to build midgard and bifrost as
 module in one make

including :
	modifications for changing patch from drivers/gpu/arm/midgard
		to drivers/gpu/arm/bifrost;
	rename output mali_kbase.ko to bifrost_kbase.ko;
	rename configs, which have duplicated names in midgard, in Kconfig,
		Kbuild and source files.

Change-Id: I127d8c8043db9010398946b3f4a90640ab1f13fe
Signed-off-by: Zhen Chen <chenzhen@rock-chips.com>
---
 drivers/gpu/arm/bifrost/Kbuild                | 20 ++---
 drivers/gpu/arm/bifrost/Kconfig               | 72 +++++++--------
 drivers/gpu/arm/bifrost/backend/gpu/Kbuild    |  4 +-
 .../backend/gpu/mali_kbase_device_hw.c        |  4 +-
 .../arm/bifrost/backend/gpu/mali_kbase_gpu.c  | 16 ++--
 .../backend/gpu/mali_kbase_instr_backend.c    |  2 +-
 .../backend/gpu/mali_kbase_irq_linux.c        | 20 ++---
 .../bifrost/backend/gpu/mali_kbase_jm_hw.c    | 10 +--
 .../backend/gpu/mali_kbase_js_backend.c       |  4 +-
 .../backend/gpu/mali_kbase_pm_backend.c       |  6 +-
 .../bifrost/backend/gpu/mali_kbase_pm_ca.c    |  2 +-
 .../bifrost/backend/gpu/mali_kbase_pm_defs.h  |  6 +-
 .../backend/gpu/mali_kbase_pm_driver.c        |  8 +-
 .../backend/gpu/mali_kbase_pm_internal.h      |  6 +-
 .../backend/gpu/mali_kbase_pm_metrics.c       | 22 ++---
 .../backend/gpu/mali_kbase_pm_policy.c        | 12 +--
 .../arm/bifrost/backend/gpu/mali_kbase_time.c |  4 +-
 .../arm/bifrost/backend/gpu/mali_kbase_time.h |  2 +-
 drivers/gpu/arm/bifrost/ipa/Kbuild            |  6 +-
 drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa.h  |  6 +-
 .../arm/bifrost/ipa/mali_kbase_ipa_simple.h   |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase.h          | 22 ++---
 .../arm/bifrost/mali_kbase_as_fault_debugfs.c |  8 +-
 .../arm/bifrost/mali_kbase_as_fault_debugfs.h |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_context.c  |  4 +-
 .../gpu/arm/bifrost/mali_kbase_core_linux.c   | 90 +++++++++----------
 drivers/gpu/arm/bifrost/mali_kbase_debug.h    | 10 +--
 drivers/gpu/arm/bifrost/mali_kbase_defs.h     | 42 ++++-----
 drivers/gpu/arm/bifrost/mali_kbase_device.c   |  8 +-
 .../gpu/arm/bifrost/mali_kbase_dma_fence.c    |  2 +-
 .../gpu/arm/bifrost/mali_kbase_dma_fence.h    |  6 +-
 drivers/gpu/arm/bifrost/mali_kbase_fence.h    |  6 +-
 .../gpu/arm/bifrost/mali_kbase_fence_defs.h   |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_gator.h    |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_gpuprops.c |  4 +-
 .../arm/bifrost/mali_kbase_hwaccess_time.h    |  2 +-
 drivers/gpu/arm/bifrost/mali_kbase_jd.c       | 56 ++++++------
 .../gpu/arm/bifrost/mali_kbase_jd_debugfs.c   |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_js.c       | 12 +--
 drivers/gpu/arm/bifrost/mali_kbase_js_defs.h  |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_mem.h      |  6 +-
 drivers/gpu/arm/bifrost/mali_kbase_mmu.c      | 16 ++--
 .../bifrost/mali_kbase_regs_history_debugfs.c |  2 +-
 .../bifrost/mali_kbase_regs_history_debugfs.h |  2 +-
 drivers/gpu/arm/bifrost/mali_kbase_replay.c   | 12 +--
 drivers/gpu/arm/bifrost/mali_kbase_softjobs.c | 14 +--
 drivers/gpu/arm/bifrost/mali_kbase_sync.h     |  2 +-
 .../gpu/arm/bifrost/mali_kbase_sync_android.c |  6 +-
 .../gpu/arm/bifrost/mali_kbase_sync_file.c    |  2 +-
 .../arm/bifrost/mali_kbase_trace_timeline.c   |  4 +-
 .../arm/bifrost/mali_kbase_trace_timeline.h   |  4 +-
 drivers/gpu/arm/bifrost/mali_kbase_uku.h      | 10 +--
 drivers/gpu/arm/bifrost/mali_kbase_vinstr.c   | 12 +--
 drivers/gpu/arm/bifrost/platform/rk/Kbuild    | 12 +--
 .../bifrost/tests/mali_kutf_irq_test/Kconfig  |  2 +-
 .../bifrost/tests/mali_kutf_irq_test/Makefile |  4 +-
 .../tests/mali_kutf_irq_test/sconscript       |  2 +-
 57 files changed, 315 insertions(+), 325 deletions(-)

diff --git a/drivers/gpu/arm/bifrost/Kbuild b/drivers/gpu/arm/bifrost/Kbuild
index 49d016ef2582..531b92126b98 100644
--- a/drivers/gpu/arm/bifrost/Kbuild
+++ b/drivers/gpu/arm/bifrost/Kbuild
@@ -12,8 +12,6 @@
 #
 #
 
-
-
 # Driver version string which is returned to userspace via an ioctl
 MALI_RELEASE_NAME ?= "r8p0-01rel0"
 
@@ -22,7 +20,7 @@ KBASE_PATH = $(src)
 KBASE_PLATFORM_PATH = $(KBASE_PATH)/platform_dummy
 UMP_PATH = $(src)/../../../base
 
-ifeq ($(CONFIG_MALI_ERROR_INJECT),y)
+ifeq ($(CONFIG_MALI_BIFROST_ERROR_INJECT),y)
 MALI_ERROR_INJECT_ON = 1
 endif
 
@@ -130,10 +128,10 @@ endif
 ccflags-y += -I$(KBASE_PATH)
 
 # Tell the Linux build system from which .o file to create the kernel module
-obj-$(CONFIG_MALI_MIDGARD) += mali_kbase.o
+obj-$(CONFIG_MALI_BIFROST) += bifrost_kbase.o
 
 # Tell the Linux build system to enable building of our .c files
-mali_kbase-y := $(SRC:.c=.o)
+bifrost_kbase-y := $(SRC:.c=.o)
 
 # Kconfig passes in the name with quotes for in-tree builds - remove them.
 platform_name := $(shell echo $(CONFIG_MALI_PLATFORM_NAME))
@@ -141,30 +139,30 @@ MALI_PLATFORM_DIR := platform/$(platform_name)
 ccflags-y += -I$(src)/$(MALI_PLATFORM_DIR)
 include $(src)/$(MALI_PLATFORM_DIR)/Kbuild
 
-ifeq ($(CONFIG_MALI_DEVFREQ),y)
+ifeq ($(CONFIG_MALI_BIFROST_DEVFREQ),y)
   ifeq ($(CONFIG_DEVFREQ_THERMAL),y)
     include $(src)/ipa/Kbuild
   endif
 endif
 
-mali_kbase-$(CONFIG_MALI_DMA_FENCE) += \
+bifrost_kbase-$(CONFIG_MALI_BIFROST_DMA_FENCE) += \
 	mali_kbase_dma_fence.o \
 	mali_kbase_fence.o
-mali_kbase-$(CONFIG_SYNC) += \
+bifrost_kbase-$(CONFIG_SYNC) += \
 	mali_kbase_sync_android.o \
 	mali_kbase_sync_common.o
-mali_kbase-$(CONFIG_SYNC_FILE) += \
+bifrost_kbase-$(CONFIG_SYNC_FILE) += \
 	mali_kbase_sync_file.o \
 	mali_kbase_sync_common.o \
 	mali_kbase_fence.o
 
 ifeq ($(MALI_MOCK_TEST),1)
 # Test functionality
-mali_kbase-y += tests/internal/src/mock/mali_kbase_pm_driver_mock.o
+bifrost_kbase-y += tests/internal/src/mock/mali_kbase_pm_driver_mock.o
 endif
 
 include  $(src)/backend/gpu/Kbuild
-mali_kbase-y += $(BACKEND:.c=.o)
+bifrost_kbase-y += $(BACKEND:.c=.o)
 
 
 ccflags-y += -I$(src)/backend/gpu
diff --git a/drivers/gpu/arm/bifrost/Kconfig b/drivers/gpu/arm/bifrost/Kconfig
index dc78f84b1eb5..7c70914e3900 100644
--- a/drivers/gpu/arm/bifrost/Kconfig
+++ b/drivers/gpu/arm/bifrost/Kconfig
@@ -14,19 +14,19 @@
 
 
 
-menuconfig MALI_MIDGARD
-	tristate "Mali Midgard series support"
+menuconfig MALI_BIFROST
+	tristate "Mali Bifrost series support"
 	select GPU_TRACEPOINTS if ANDROID
 	default n
 	help
-	  Enable this option to build support for a ARM Mali Midgard GPU.
+	  Enable this option to build support for a ARM Mali Bifrost GPU.
 
 	  To compile this driver as a module, choose M here:
 	  this will generate a single module, called mali_kbase.
 
-config MALI_GATOR_SUPPORT
+config MALI_BIFROST_GATOR_SUPPORT
 	bool "Streamline support via Gator"
-	depends on MALI_MIDGARD
+	depends on MALI_BIFROST
 	default n
 	help
 	  Adds diagnostic support for use with the ARM Streamline Performance Analyzer.
@@ -34,24 +34,24 @@ config MALI_GATOR_SUPPORT
 	  Streamline debug support.
 	  This is a legacy interface required by older versions of Streamline.
 
-config MALI_MIDGARD_DVFS
+config MALI_BIFROST_DVFS
 	bool "Enable legacy DVFS"
-	depends on MALI_MIDGARD && !MALI_DEVFREQ
+	depends on MALI_BIFROST && !MALI_BIFROST_DEVFREQ
 	default n
 	help
 	  Choose this option to enable legacy DVFS in the Mali Midgard DDK.
 
-config MALI_MIDGARD_ENABLE_TRACE
+config MALI_BIFROST_ENABLE_TRACE
 	bool "Enable kbase tracing"
-	depends on MALI_MIDGARD
+	depends on MALI_BIFROST
 	default n
 	help
 	  Enables tracing in kbase.  Trace log available through
 	  the "mali_trace" debugfs file, when the CONFIG_DEBUG_FS is enabled
 
-config MALI_DEVFREQ
+config MALI_BIFROST_DEVFREQ
 	bool "devfreq support for Mali"
-	depends on MALI_MIDGARD && PM_DEVFREQ
+	depends on MALI_BIFROST && PM_DEVFREQ
 	help
 	  Support devfreq for Mali.
 
@@ -59,9 +59,9 @@ config MALI_DEVFREQ
 	  governor, the frequency of Mali will be dynamically selected from the
 	  available OPPs.
 
-config MALI_DMA_FENCE
+config MALI_BIFROST_DMA_FENCE
 	bool "DMA_BUF fence support for Mali"
-	depends on MALI_MIDGARD && !KDS
+	depends on MALI_BIFROST && !KDS
 	default n
 	help
 	  Support DMA_BUF fences for Mali.
@@ -70,7 +70,7 @@ config MALI_DMA_FENCE
 	  the Linux Kernel has built in support for DMA_BUF fences.
 
 config MALI_PLATFORM_NAME
-	depends on MALI_MIDGARD
+	depends on MALI_BIFROST
 	string "Platform name"
 	default "devicetree"
 	help
@@ -78,10 +78,10 @@ config MALI_PLATFORM_NAME
 	  include in the build. 'platform/$(MALI_PLATFORM_NAME)/Kbuild' must
 	  exist.
 
-# MALI_EXPERT configuration options
+# MALI_BIFROST_EXPERT configuration options
 
-menuconfig MALI_EXPERT
-	depends on MALI_MIDGARD
+menuconfig MALI_BIFROST_EXPERT
+	depends on MALI_BIFROST
 	bool "Enable Expert Settings"
 	default n
 	help
@@ -90,7 +90,7 @@ menuconfig MALI_EXPERT
 
 config MALI_CORESTACK
 	bool "Support controlling power to the GPU core stack"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Enabling this feature on supported GPUs will let the driver powering
@@ -101,9 +101,9 @@ config MALI_CORESTACK
 
 	  If unsure, say N.
 
-config MALI_PRFCNT_SET_SECONDARY
+config MALI_BIFROST_PRFCNT_SET_SECONDARY
 	bool "Use secondary set of performance counters"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Select this option to use secondary set of performance counters. Kernel
@@ -114,17 +114,17 @@ config MALI_PRFCNT_SET_SECONDARY
 
 	  If unsure, say N.
 
-config MALI_DEBUG
+config MALI_BIFROST_DEBUG
 	bool "Debug build"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Select this option for increased checking and reporting of errors.
 
-config MALI_FENCE_DEBUG
+config MALI_BIFROST_FENCE_DEBUG
 	bool "Debug sync fence usage"
-	depends on MALI_MIDGARD && MALI_EXPERT && (SYNC || SYNC_FILE)
-	default y if MALI_DEBUG
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT && (SYNC || SYNC_FILE)
+	default y if MALI_BIFROST_DEBUG
 	help
 	  Select this option to enable additional checking and reporting on the
 	  use of sync fences in the Mali driver.
@@ -138,9 +138,9 @@ config MALI_FENCE_DEBUG
 	  The timeout can be changed at runtime through the js_soft_timeout
 	  device attribute, where the timeout is specified in milliseconds.
 
-config MALI_NO_MALI
+config MALI_BIFROST_NO_MALI
 	bool "No Mali"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  This can be used to test the driver in a simulated environment
@@ -150,23 +150,23 @@ config MALI_NO_MALI
 	  All calls to the simulated hardware will complete immediately as if the hardware
 	  completed the task.
 
-config MALI_ERROR_INJECT
+config MALI_BIFROST_ERROR_INJECT
 	bool "Error injection"
-	depends on MALI_MIDGARD && MALI_EXPERT && MALI_NO_MALI
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT && MALI_BIFROST_NO_MALI
 	default n
 	help
 	  Enables insertion of errors to test module failure and recovery mechanisms.
 
-config MALI_TRACE_TIMELINE
+config MALI_BIFROST_TRACE_TIMELINE
 	bool "Timeline tracing"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Enables timeline tracing through the kernel tracepoint system.
 
-config MALI_SYSTEM_TRACE
+config MALI_BIFROST_SYSTEM_TRACE
 	bool "Enable system event tracing support"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Choose this option to enable system trace events for each
@@ -176,7 +176,7 @@ config MALI_SYSTEM_TRACE
 
 config MALI_2MB_ALLOC
 	bool "Attempt to allocate 2MB pages"
-	depends on MALI_MIDGARD && MALI_EXPERT
+	depends on MALI_BIFROST && MALI_BIFROST_EXPERT
 	default n
 	help
 	  Rather than allocating all GPU memory page-by-page, attempt to
@@ -193,5 +193,5 @@ config MALI_PWRSOFT_765
 	  not merged in mainline kernel yet. So this define helps to guard those
 	  parts of the code.
 
-source "drivers/gpu/arm/midgard/platform/Kconfig"
-source "drivers/gpu/arm/midgard/tests/Kconfig"
+source "drivers/gpu/arm/bifrost/platform/Kconfig"
+# source "drivers/gpu/arm/bifrost/tests/Kconfig"
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/Kbuild b/drivers/gpu/arm/bifrost/backend/gpu/Kbuild
index 5f700e9b6b44..5eeba1b14710 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/Kbuild
+++ b/drivers/gpu/arm/bifrost/backend/gpu/Kbuild
@@ -45,13 +45,13 @@ BACKEND += \
 	backend/gpu/mali_kbase_pm_fast_start.c
 endif
 
-ifeq ($(CONFIG_MALI_DEVFREQ),y)
+ifeq ($(CONFIG_MALI_BIFROST_DEVFREQ),y)
 BACKEND += \
 	backend/gpu/mali_kbase_devfreq.c \
 	backend/gpu/mali_kbase_pm_ca_devfreq.c
 endif
 
-ifeq ($(CONFIG_MALI_NO_MALI),y)
+ifeq ($(CONFIG_MALI_BIFROST_NO_MALI),y)
 	# Dummy model
 	BACKEND += backend/gpu/mali_kbase_model_dummy.c
 	BACKEND += backend/gpu/mali_kbase_model_linux.c
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_device_hw.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_device_hw.c
index dcdf15cdc3e8..17f253308ffc 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_device_hw.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_device_hw.c
@@ -25,7 +25,7 @@
 
 #include <backend/gpu/mali_kbase_device_internal.h>
 
-#if !defined(CONFIG_MALI_NO_MALI)
+#if !defined(CONFIG_MALI_BIFROST_NO_MALI)
 
 
 #ifdef CONFIG_DEBUG_FS
@@ -195,7 +195,7 @@ u32 kbase_reg_read(struct kbase_device *kbdev, u16 offset,
 }
 
 KBASE_EXPORT_TEST_API(kbase_reg_read);
-#endif /* !defined(CONFIG_MALI_NO_MALI) */
+#endif /* !defined(CONFIG_MALI_BIFROST_NO_MALI) */
 
 /**
  * kbase_report_gpu_fault - Report a GPU fault.
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_gpu.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_gpu.c
index 3b78100ec6df..a7c3a77d8ac8 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_gpu.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_gpu.c
@@ -80,15 +80,15 @@ int kbase_backend_late_init(struct kbase_device *kbdev)
 	if (err)
 		goto fail_timer;
 
-#ifdef CONFIG_MALI_DEBUG
-#ifndef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_DEBUG
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	if (kbasep_common_test_interrupt_handlers(kbdev) != 0) {
 		dev_err(kbdev->dev, "Interrupt assigment check failed.\n");
 		err = -EINVAL;
 		goto fail_interrupt_test;
 	}
-#endif /* !CONFIG_MALI_NO_MALI */
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	err = kbase_job_slot_init(kbdev);
 	if (err)
@@ -100,11 +100,11 @@ int kbase_backend_late_init(struct kbase_device *kbdev)
 
 fail_job_slot:
 
-#ifdef CONFIG_MALI_DEBUG
-#ifndef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_DEBUG
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 fail_interrupt_test:
-#endif /* !CONFIG_MALI_NO_MALI */
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	kbase_backend_timer_term(kbdev);
 fail_timer:
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_instr_backend.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_instr_backend.c
index 7ad309e8d7f4..8084d054cc5b 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_instr_backend.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_instr_backend.c
@@ -129,7 +129,7 @@ int kbase_instr_hwcnt_enable_internal(struct kbase_device *kbdev,
 
 	/* Configure */
 	prfcnt_config = kctx->as_nr << PRFCNT_CONFIG_AS_SHIFT;
-#ifdef CONFIG_MALI_PRFCNT_SET_SECONDARY
+#ifdef CONFIG_MALI_BIFROST_PRFCNT_SET_SECONDARY
 	{
 		u32 gpu_id = kbdev->gpu_props.props.raw_props.gpu_id;
 		u32 product_id = (gpu_id & GPU_ID_VERSION_PRODUCT_ID)
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_irq_linux.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_irq_linux.c
index 8416b80e8b77..d0666c86cf59 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_irq_linux.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_irq_linux.c
@@ -21,7 +21,7 @@
 
 #include <linux/interrupt.h>
 
-#if !defined(CONFIG_MALI_NO_MALI)
+#if !defined(CONFIG_MALI_BIFROST_NO_MALI)
 
 /* GPU IRQ Tags */
 #define	JOB_IRQ_TAG	0
@@ -55,11 +55,11 @@ static irqreturn_t kbase_job_irq_handler(int irq, void *data)
 
 	val = kbase_reg_read(kbdev, JOB_CONTROL_REG(JOB_IRQ_STATUS), NULL);
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	if (!kbdev->pm.backend.driver_ready_for_irqs)
 		dev_warn(kbdev->dev, "%s: irq %d irqstatus 0x%x before driver is ready\n",
 				__func__, irq, val);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 	spin_unlock_irqrestore(&kbdev->pm.backend.gpu_powered_lock, flags);
 
 	if (!val)
@@ -93,11 +93,11 @@ static irqreturn_t kbase_mmu_irq_handler(int irq, void *data)
 
 	val = kbase_reg_read(kbdev, MMU_REG(MMU_IRQ_STATUS), NULL);
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	if (!kbdev->pm.backend.driver_ready_for_irqs)
 		dev_warn(kbdev->dev, "%s: irq %d irqstatus 0x%x before driver is ready\n",
 				__func__, irq, val);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 	spin_unlock_irqrestore(&kbdev->pm.backend.gpu_powered_lock, flags);
 
 	if (!val) {
@@ -131,11 +131,11 @@ static irqreturn_t kbase_gpu_irq_handler(int irq, void *data)
 
 	val = kbase_reg_read(kbdev, GPU_CONTROL_REG(GPU_IRQ_STATUS), NULL);
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	if (!kbdev->pm.backend.driver_ready_for_irqs)
 		dev_dbg(kbdev->dev, "%s: irq %d irqstatus 0x%x before driver is ready\n",
 				__func__, irq, val);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 	spin_unlock_irqrestore(&kbdev->pm.backend.gpu_powered_lock, flags);
 
 	if (!val)
@@ -156,7 +156,7 @@ static irq_handler_t kbase_handler_table[] = {
 	[GPU_IRQ_TAG] = kbase_gpu_irq_handler,
 };
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define  JOB_IRQ_HANDLER JOB_IRQ_TAG
 #define  MMU_IRQ_HANDLER MMU_IRQ_TAG
 #define  GPU_IRQ_HANDLER GPU_IRQ_TAG
@@ -412,7 +412,7 @@ int kbasep_common_test_interrupt_handlers(
 
 	return err;
 }
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 int kbase_install_interrupts(struct kbase_device *kbdev)
 {
@@ -466,4 +466,4 @@ void kbase_synchronize_irqs(struct kbase_device *kbdev)
 	}
 }
 
-#endif /* !defined(CONFIG_MALI_NO_MALI) */
+#endif /* !defined(CONFIG_MALI_BIFROST_NO_MALI) */
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_jm_hw.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_jm_hw.c
index be88ec8eb0d7..cbca5eac82f1 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_jm_hw.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_jm_hw.c
@@ -22,7 +22,7 @@
 #include <mali_kbase.h>
 #include <mali_kbase_config.h>
 #include <mali_midg_regmap.h>
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 #include <mali_kbase_gator.h>
 #endif
 #include <mali_kbase_tlstream.h>
@@ -140,7 +140,7 @@ void kbase_job_hw_submit(struct kbase_device *kbdev,
 	KBASE_TRACE_ADD_SLOT_INFO(kbdev, JM_SUBMIT, kctx, katom, jc_head, js,
 							(u32) katom->affinity);
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	kbase_trace_mali_job_slots_event(
 				GATOR_MAKE_EVENT(GATOR_JOB_SLOT_START, js),
 				kctx, kbase_jd_atom_id(kctx, katom));
@@ -273,7 +273,7 @@ void kbase_job_done(struct kbase_device *kbdev, u32 done)
 
 				switch (completion_code) {
 				case BASE_JD_EVENT_STOPPED:
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 					kbase_trace_mali_job_slots_event(
 						GATOR_MAKE_EVENT(
 						GATOR_JOB_SLOT_SOFT_STOPPED, i),
@@ -507,11 +507,11 @@ void kbasep_job_slot_soft_or_hard_stop_do_action(struct kbase_device *kbdev,
 								target_katom);
 
 		if (!soft_stop_allowed) {
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 			dev_dbg(kbdev->dev,
 					"Attempt made to soft-stop a job that cannot be soft-stopped. core_reqs = 0x%X",
 					(unsigned int)core_reqs);
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 			return;
 		}
 
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_js_backend.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_js_backend.c
index a8c1af23a369..d392fa2a85d9 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_js_backend.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_js_backend.c
@@ -52,12 +52,12 @@ static inline bool timer_callback_should_run(struct kbase_device *kbdev)
 	 * nr_contexts_pullable is up-to-date for reading */
 	nr_running_ctxs = atomic_read(&kbdev->js_data.nr_contexts_runnable);
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	if (kbdev->js_data.softstop_always) {
 		/* Debug support for allowing soft-stop on a single context */
 		return true;
 	}
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 
 	if (kbase_hw_has_issue(kbdev, BASE_HW_ISSUE_9435)) {
 		/* Timeouts would have to be 4x longer (due to micro-
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_backend.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_backend.c
index c88b80a325dd..cd8932650ed5 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_backend.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_backend.c
@@ -75,9 +75,9 @@ int kbase_hwaccess_pm_init(struct kbase_device *kbdev)
 
 	kbdev->pm.backend.gpu_powered = false;
 	kbdev->pm.suspending = false;
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	kbdev->pm.backend.driver_ready_for_irqs = false;
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 	kbdev->pm.backend.gpu_in_desired_state = true;
 	init_waitqueue_head(&kbdev->pm.backend.gpu_in_desired_state_wait);
 
@@ -348,7 +348,7 @@ int kbase_hwaccess_pm_powerup(struct kbase_device *kbdev,
 
 	/* We are ready to receive IRQ's now as power policy is set up, so
 	 * enable them now. */
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	spin_lock_irqsave(&kbdev->pm.backend.gpu_powered_lock, irq_flags);
 	kbdev->pm.backend.driver_ready_for_irqs = true;
 	spin_unlock_irqrestore(&kbdev->pm.backend.gpu_powered_lock, irq_flags);
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_ca.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_ca.c
index 85890f1e85f5..c17db8be8877 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_ca.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_ca.c
@@ -25,7 +25,7 @@
 
 static const struct kbase_pm_ca_policy *const policy_list[] = {
 	&kbase_pm_ca_fixed_policy_ops,
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 	&kbase_pm_ca_devfreq_policy_ops,
 #endif
 #if !MALI_CUSTOMER_RELEASE
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_defs.h b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_defs.h
index 352744ee6d73..564fbda1116a 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_defs.h
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_defs.h
@@ -111,7 +111,7 @@ struct kbasep_pm_metrics_data {
 	u32 active_gl_ctx[2]; /* GL jobs can only run on 2 of the 3 job slots */
 	spinlock_t lock;
 
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 	struct hrtimer timer;
 	bool timer_active;
 #endif
@@ -279,9 +279,9 @@ struct kbase_pm_backend_data {
 
 	bool cg1_disabled;
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	bool driver_ready_for_irqs;
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	spinlock_t gpu_powered_lock;
 
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
index cbc258cb361b..707f71a79a77 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_driver.c
@@ -24,7 +24,7 @@
 #include <mali_kbase.h>
 #include <mali_kbase_config_defaults.h>
 #include <mali_midg_regmap.h>
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 #include <mali_kbase_gator.h>
 #endif
 #include <mali_kbase_tlstream.h>
@@ -173,7 +173,7 @@ static void kbase_pm_invoke(struct kbase_device *kbdev,
 	reg = core_type_to_reg(core_type, action);
 
 	KBASE_DEBUG_ASSERT(reg);
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	if (cores) {
 		if (action == ACTION_PWRON)
 			kbase_trace_mali_pm_power_on(core_type, cores);
@@ -783,7 +783,7 @@ MOCKABLE(kbase_pm_check_transitions_nolock) (struct kbase_device *kbdev)
 	if (in_desired_state) {
 		KBASE_DEBUG_ASSERT(cores_are_available);
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 		kbase_trace_mali_pm_status(KBASE_PM_CORE_L2,
 						kbase_pm_get_ready_cores(kbdev,
 							KBASE_PM_CORE_L2));
@@ -1197,7 +1197,7 @@ static void kbase_pm_hw_issues_detect(struct kbase_device *kbdev)
 	if (kbase_hw_has_issue(kbdev, BASE_HW_ISSUE_10327))
 		kbdev->hw_quirks_sc |= SC_SDC_DISABLE_OQ_DISCARD;
 
-#ifdef CONFIG_MALI_PRFCNT_SET_SECONDARY
+#ifdef CONFIG_MALI_BIFROST_PRFCNT_SET_SECONDARY
 	/* Enable alternative hardware counter selection if configured. */
 	if (!GPU_ID_IS_NEW_FORMAT(prod_id))
 		kbdev->hw_quirks_sc |= SC_ALT_COUNTERS;
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_internal.h b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_internal.h
index 6804f45ac27b..9fbe094541c5 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_internal.h
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_internal.h
@@ -486,13 +486,13 @@ void kbase_pm_do_poweron(struct kbase_device *kbdev, bool is_resume);
  */
 void kbase_pm_do_poweroff(struct kbase_device *kbdev, bool is_suspend);
 
-#if defined(CONFIG_MALI_DEVFREQ) || defined(CONFIG_MALI_MIDGARD_DVFS)
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) || defined(CONFIG_MALI_BIFROST_DVFS)
 void kbase_pm_get_dvfs_utilisation(struct kbase_device *kbdev,
 		unsigned long *total, unsigned long *busy);
 void kbase_pm_reset_dvfs_utilisation(struct kbase_device *kbdev);
-#endif /* defined(CONFIG_MALI_DEVFREQ) || defined(CONFIG_MALI_MIDGARD_DVFS) */
+#endif /* defined(CONFIG_MALI_BIFROST_DEVFREQ) || defined(CONFIG_MALI_BIFROST_DVFS) */
 
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 
 /**
  * kbase_platform_dvfs_event - Report utilisation to DVFS code
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_metrics.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_metrics.c
index 024248ca7123..ba13bcd8b291 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_metrics.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_metrics.c
@@ -42,7 +42,7 @@
  * counters. */
 #define MALI_UTILIZATION_MAX_PERIOD 100000 /* ns = 100ms */
 
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 static enum hrtimer_restart dvfs_callback(struct hrtimer *timer)
 {
 	unsigned long flags;
@@ -64,7 +64,7 @@ static enum hrtimer_restart dvfs_callback(struct hrtimer *timer)
 
 	return HRTIMER_NORESTART;
 }
-#endif /* CONFIG_MALI_MIDGARD_DVFS */
+#endif /* CONFIG_MALI_BIFROST_DVFS */
 
 int kbasep_pm_metrics_init(struct kbase_device *kbdev)
 {
@@ -88,7 +88,7 @@ int kbasep_pm_metrics_init(struct kbase_device *kbdev)
 
 	spin_lock_init(&kbdev->pm.backend.metrics.lock);
 
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 	kbdev->pm.backend.metrics.timer_active = true;
 	hrtimer_init(&kbdev->pm.backend.metrics.timer, CLOCK_MONOTONIC,
 							HRTIMER_MODE_REL);
@@ -97,7 +97,7 @@ int kbasep_pm_metrics_init(struct kbase_device *kbdev)
 	hrtimer_start(&kbdev->pm.backend.metrics.timer,
 			HR_TIMER_DELAY_MSEC(kbdev->pm.dvfs_period),
 			HRTIMER_MODE_REL);
-#endif /* CONFIG_MALI_MIDGARD_DVFS */
+#endif /* CONFIG_MALI_BIFROST_DVFS */
 
 	return 0;
 }
@@ -106,7 +106,7 @@ KBASE_EXPORT_TEST_API(kbasep_pm_metrics_init);
 
 void kbasep_pm_metrics_term(struct kbase_device *kbdev)
 {
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 	unsigned long flags;
 
 	KBASE_DEBUG_ASSERT(kbdev != NULL);
@@ -116,7 +116,7 @@ void kbasep_pm_metrics_term(struct kbase_device *kbdev)
 	spin_unlock_irqrestore(&kbdev->pm.backend.metrics.lock, flags);
 
 	hrtimer_cancel(&kbdev->pm.backend.metrics.timer);
-#endif /* CONFIG_MALI_MIDGARD_DVFS */
+#endif /* CONFIG_MALI_BIFROST_DVFS */
 }
 
 KBASE_EXPORT_TEST_API(kbasep_pm_metrics_term);
@@ -155,7 +155,7 @@ static void kbase_pm_get_dvfs_utilisation_calc(struct kbase_device *kbdev,
 	kbdev->pm.backend.metrics.time_period_start = now;
 }
 
-#if defined(CONFIG_MALI_DEVFREQ) || defined(CONFIG_MALI_MIDGARD_DVFS)
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) || defined(CONFIG_MALI_BIFROST_DVFS)
 /* Caller needs to hold kbdev->pm.backend.metrics.lock before calling this
  * function.
  */
@@ -214,7 +214,7 @@ void kbase_pm_get_dvfs_utilisation(struct kbase_device *kbdev,
 }
 #endif
 
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 
 /* caller needs to hold kbdev->pm.backend.metrics.lock before calling this
  * function
@@ -302,10 +302,10 @@ void kbase_pm_get_dvfs_action(struct kbase_device *kbdev)
 	}
 
 out:
-#ifdef CONFIG_MALI_MIDGARD_DVFS
+#ifdef CONFIG_MALI_BIFROST_DVFS
 	kbase_platform_dvfs_event(kbdev, utilisation, util_gl_share,
 								util_cl_share);
-#endif				/*CONFIG_MALI_MIDGARD_DVFS */
+#endif				/*CONFIG_MALI_BIFROST_DVFS */
 
 	kbase_pm_reset_dvfs_utilisation_unlocked(kbdev, now);
 
@@ -327,7 +327,7 @@ bool kbase_pm_metrics_is_active(struct kbase_device *kbdev)
 }
 KBASE_EXPORT_TEST_API(kbase_pm_metrics_is_active);
 
-#endif /* CONFIG_MALI_MIDGARD_DVFS */
+#endif /* CONFIG_MALI_BIFROST_DVFS */
 
 /**
  * kbase_pm_metrics_active_calc - Update PM active counts based on currently
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_policy.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_policy.c
index 075f020c66e6..b98c68d9a42a 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_policy.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_pm_policy.c
@@ -26,7 +26,7 @@
 #include <backend/gpu/mali_kbase_pm_internal.h>
 
 static const struct kbase_pm_policy *const policy_list[] = {
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	&kbase_pm_always_on_policy_ops,
 	&kbase_pm_demand_policy_ops,
 	&kbase_pm_coarse_demand_policy_ops,
@@ -34,7 +34,7 @@ static const struct kbase_pm_policy *const policy_list[] = {
 	&kbase_pm_demand_always_powered_policy_ops,
 	&kbase_pm_fast_start_policy_ops,
 #endif
-#else				/* CONFIG_MALI_NO_MALI */
+#else				/* CONFIG_MALI_BIFROST_NO_MALI */
 #if !PLATFORM_POWER_DOWN_ONLY
 	&kbase_pm_demand_policy_ops,
 #endif /* !PLATFORM_POWER_DOWN_ONLY */
@@ -46,7 +46,7 @@ static const struct kbase_pm_policy *const policy_list[] = {
 	&kbase_pm_fast_start_policy_ops,
 #endif /* !PLATFORM_POWER_DOWN_ONLY */
 #endif
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 };
 
 /* The number of policies available in the system.
@@ -85,7 +85,7 @@ enum {
 typedef u32 kbase_pm_change_state;
 
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 /* Timeline Trace code lookups for each function */
 static u32 kbase_pm_change_state_trace_code[KBASE_PM_FUNC_ID_COUNT]
 					[KBASE_PM_CHANGE_STATE_COUNT] = {
@@ -142,13 +142,13 @@ static inline void kbase_timeline_pm_cores_func(struct kbase_device *kbdev,
 	KBASE_TIMELINE_PM_CHECKTRANS(kbdev, trace_code);
 }
 
-#else /* CONFIG_MALI_TRACE_TIMELINE */
+#else /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 static inline void kbase_timeline_pm_cores_func(struct kbase_device *kbdev,
 		enum kbase_pm_func_id func_id, kbase_pm_change_state state)
 {
 }
 
-#endif /* CONFIG_MALI_TRACE_TIMELINE */
+#endif /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 
 /**
  * kbasep_pm_do_poweroff_cores - Process a poweroff request and power down any
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.c b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.c
index d992989123e8..0068e1091f4c 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.c
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.c
@@ -69,7 +69,7 @@ void kbase_backend_get_gpu_time(struct kbase_device *kbdev, u64 *cycle_counter,
  * Note : If GPU resets occur then the counters are reset to zero, the delay may
  * not be as expected.
  */
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 void kbase_wait_write_flush(struct kbase_context *kctx)
 {
 	u32 base_count = 0;
@@ -100,4 +100,4 @@ void kbase_wait_write_flush(struct kbase_context *kctx)
 	kbase_pm_release_gpu_cycle_counter(kctx->kbdev);
 	kbase_pm_context_idle(kctx->kbdev);
 }
-#endif				/* CONFIG_MALI_NO_MALI */
+#endif				/* CONFIG_MALI_BIFROST_NO_MALI */
diff --git a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.h b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.h
index 35088abc8fe5..0559b2f7097d 100644
--- a/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.h
+++ b/drivers/gpu/arm/bifrost/backend/gpu/mali_kbase_time.h
@@ -41,7 +41,7 @@ void kbase_backend_get_gpu_time(struct kbase_device *kbdev, u64 *cycle_counter,
  *
  * This function is only in use for BASE_HW_ISSUE_6367
  */
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 static inline void kbase_wait_write_flush(struct kbase_context *kctx)
 {
 }
diff --git a/drivers/gpu/arm/bifrost/ipa/Kbuild b/drivers/gpu/arm/bifrost/ipa/Kbuild
index 8e37f406433e..831fa83c6a8e 100644
--- a/drivers/gpu/arm/bifrost/ipa/Kbuild
+++ b/drivers/gpu/arm/bifrost/ipa/Kbuild
@@ -13,14 +13,14 @@
 #
 
 
-mali_kbase-y += \
+bifrost_kbase-y += \
 	ipa/mali_kbase_ipa_simple.o \
 	ipa/mali_kbase_ipa.o
 
-mali_kbase-$(CONFIG_DEBUG_FS) += ipa/mali_kbase_ipa_debugfs.o
+bifrost_kbase-$(CONFIG_DEBUG_FS) += ipa/mali_kbase_ipa_debugfs.o
 
 ifneq ($(wildcard $(src)/ipa/mali_kbase_ipa_vinstr_g71.c),)
-  mali_kbase-y += \
+  bifrost_kbase-y += \
 	ipa/mali_kbase_ipa_vinstr_g71.o \
 	ipa/mali_kbase_ipa_vinstr_common.o
 
diff --git a/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa.h b/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa.h
index 469f33cbdcc6..67478fe911ea 100644
--- a/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa.h
+++ b/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa.h
@@ -18,7 +18,7 @@
 #ifndef _KBASE_IPA_H_
 #define _KBASE_IPA_H_
 
-#if defined(CONFIG_MALI_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)
 
 struct devfreq;
 
@@ -152,7 +152,7 @@ extern struct devfreq_cooling_ops kbase_ipa_power_model_ops;
 extern struct devfreq_cooling_power kbase_ipa_power_model_ops;
 #endif
 
-#else /* !(defined(CONFIG_MALI_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
+#else /* !(defined(CONFIG_MALI_BIFROST_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
 
 static inline void kbase_ipa_model_use_fallback_locked(struct kbase_device *kbdev)
 { }
@@ -160,6 +160,6 @@ static inline void kbase_ipa_model_use_fallback_locked(struct kbase_device *kbde
 static inline void kbase_ipa_model_use_configured_locked(struct kbase_device *kbdev)
 { }
 
-#endif /* (defined(CONFIG_MALI_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
+#endif /* (defined(CONFIG_MALI_BIFROST_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
 
 #endif
diff --git a/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa_simple.h b/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa_simple.h
index e78d6173300b..23cd55f5867d 100644
--- a/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa_simple.h
+++ b/drivers/gpu/arm/bifrost/ipa/mali_kbase_ipa_simple.h
@@ -18,7 +18,7 @@
 #ifndef _KBASE_IPA_SIMPLE_H_
 #define _KBASE_IPA_SIMPLE_H_
 
-#if defined(CONFIG_MALI_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)
 
 extern struct kbase_ipa_model_ops kbase_simple_ipa_model_ops;
 
@@ -35,6 +35,6 @@ extern struct kbase_ipa_model_ops kbase_simple_ipa_model_ops;
 void kbase_simple_power_model_set_dummy_temp(int temp);
 #endif /* MALI_UNIT_TEST */
 
-#endif /* (defined(CONFIG_MALI_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
+#endif /* (defined(CONFIG_MALI_BIFROST_DEVFREQ) && defined(CONFIG_DEVFREQ_THERMAL)) */
 
 #endif /* _KBASE_IPA_SIMPLE_H_ */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase.h b/drivers/gpu/arm/bifrost/mali_kbase.h
index 56b364e505d1..369a2d4706fe 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase.h
@@ -374,11 +374,11 @@ void kbase_disjoint_state_down(struct kbase_device *kbdev);
 #if KBASE_TRACE_ENABLE
 void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 
-#ifndef CONFIG_MALI_SYSTEM_TRACE
+#ifndef CONFIG_MALI_BIFROST_SYSTEM_TRACE
 /** Add trace values about a job-slot
  *
  * @note Any functions called through this macro will still be evaluated in
- * Release builds (CONFIG_MALI_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
+ * Release builds (CONFIG_MALI_BIFROST_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
  * functions called to get the parameters supplied to this macro must:
  * - be static or static inline
  * - must just return 0 and have no other statements present in the body.
@@ -390,7 +390,7 @@ void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 /** Add trace values about a job-slot, with info
  *
  * @note Any functions called through this macro will still be evaluated in
- * Release builds (CONFIG_MALI_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
+ * Release builds (CONFIG_MALI_BIFROST_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
  * functions called to get the parameters supplied to this macro must:
  * - be static or static inline
  * - must just return 0 and have no other statements present in the body.
@@ -402,7 +402,7 @@ void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 /** Add trace values about a ctx refcount
  *
  * @note Any functions called through this macro will still be evaluated in
- * Release builds (CONFIG_MALI_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
+ * Release builds (CONFIG_MALI_BIFROST_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
  * functions called to get the parameters supplied to this macro must:
  * - be static or static inline
  * - must just return 0 and have no other statements present in the body.
@@ -413,7 +413,7 @@ void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 /** Add trace values about a ctx refcount, and info
  *
  * @note Any functions called through this macro will still be evaluated in
- * Release builds (CONFIG_MALI_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
+ * Release builds (CONFIG_MALI_BIFROST_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
  * functions called to get the parameters supplied to this macro must:
  * - be static or static inline
  * - must just return 0 and have no other statements present in the body.
@@ -425,7 +425,7 @@ void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 /** Add trace values (no slot or refcount)
  *
  * @note Any functions called through this macro will still be evaluated in
- * Release builds (CONFIG_MALI_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
+ * Release builds (CONFIG_MALI_BIFROST_DEBUG not defined). Therefore, when KBASE_TRACE_ENABLE == 0 any
  * functions called to get the parameters supplied to this macro must:
  * - be static or static inline
  * - must just return 0 and have no other statements present in the body.
@@ -446,7 +446,7 @@ void kbasep_trace_debugfs_init(struct kbase_device *kbdev);
 void kbasep_trace_add(struct kbase_device *kbdev, enum kbase_trace_code code, void *ctx, struct kbase_jd_atom *katom, u64 gpu_addr, u8 flags, int refcount, int jobslot, unsigned long info_val);
 /** PRIVATE - do not use directly. Use KBASE_TRACE_CLEAR() instead */
 void kbasep_trace_clear(struct kbase_device *kbdev);
-#else /* #ifndef CONFIG_MALI_SYSTEM_TRACE */
+#else /* #ifndef CONFIG_MALI_BIFROST_SYSTEM_TRACE */
 /* Dispatch kbase trace events as system trace events */
 #include <mali_linux_kbase_trace.h>
 #define KBASE_TRACE_ADD_SLOT(kbdev, code, ctx, katom, gpu_addr, jobslot)\
@@ -475,7 +475,7 @@ void kbasep_trace_clear(struct kbase_device *kbdev);
 		CSTD_NOP(0);\
 	} while (0)
 
-#endif /* #ifndef CONFIG_MALI_SYSTEM_TRACE */
+#endif /* #ifndef CONFIG_MALI_BIFROST_SYSTEM_TRACE */
 #else
 #define KBASE_TRACE_ADD_SLOT(kbdev, code, ctx, katom, gpu_addr, jobslot)\
 	do {\
@@ -546,7 +546,7 @@ void kbasep_trace_clear(struct kbase_device *kbdev);
 /** PRIVATE - do not use directly. Use KBASE_TRACE_DUMP() instead */
 void kbasep_trace_dump(struct kbase_device *kbdev);
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 /**
  * kbase_set_driver_inactive - Force driver to go inactive
  * @kbdev:    Device pointer
@@ -557,10 +557,10 @@ void kbasep_trace_dump(struct kbase_device *kbdev);
  * which require that no jobs are running while the test executes.
  */
 void kbase_set_driver_inactive(struct kbase_device *kbdev, bool inactive);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 
-#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_NO_MALI)
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_BIFROST_NO_MALI)
 
 /* kbase_io_history_init - initialize data struct for register access history
  *
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.c b/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.c
index f910fe970feb..cc729d416858 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.c
@@ -21,7 +21,7 @@
 #include <mali_kbase_as_fault_debugfs.h>
 
 #ifdef CONFIG_DEBUG_FS
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 
 static int kbase_as_fault_read(struct seq_file *sfile, void *data)
 {
@@ -64,7 +64,7 @@ static const struct file_operations as_fault_fops = {
 	.release = single_release,
 };
 
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 #endif /* CONFIG_DEBUG_FS */
 
 /*
@@ -73,7 +73,7 @@ static const struct file_operations as_fault_fops = {
 void kbase_as_fault_debugfs_init(struct kbase_device *kbdev)
 {
 #ifdef CONFIG_DEBUG_FS
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	uint i;
 	char as_name[64];
 	struct dentry *debugfs_directory;
@@ -96,7 +96,7 @@ void kbase_as_fault_debugfs_init(struct kbase_device *kbdev)
 	else
 		dev_warn(kbdev->dev, "unable to create address_spaces debugfs directory");
 
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 #endif /* CONFIG_DEBUG_FS */
 	return;
 }
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.h b/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.h
index 3ed2248897fc..66387e1c3f6a 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_as_fault_debugfs.h
@@ -35,10 +35,10 @@ static inline void
 kbase_as_fault_debugfs_new(struct kbase_device *kbdev, int as_no)
 {
 #ifdef CONFIG_DEBUG_FS
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	kbdev->debugfs_as_read_bitmap |= (1ULL << as_no);
 #endif /* CONFIG_DEBUG_FS */
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 	return;
 }
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_context.c b/drivers/gpu/arm/bifrost/mali_kbase_context.c
index ad20e6135ba5..17821fee6cba 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_context.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_context.c
@@ -59,7 +59,7 @@ kbase_create_context(struct kbase_device *kbdev, bool is_compat)
 	atomic_set(&kctx->refcount, 0);
 	if (is_compat)
 		kbase_ctx_flag_set(kctx, KCTX_COMPAT);
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	kctx->timeline.owner_tgid = task_tgid_nr(current);
 #endif
 	atomic_set(&kctx->setup_complete, 0);
@@ -160,7 +160,7 @@ kbase_create_context(struct kbase_device *kbdev, bool is_compat)
 #ifdef CONFIG_GPU_TRACEPOINTS
 	atomic_set(&kctx->jctx.work_id, 0);
 #endif
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	atomic_set(&kctx->timeline.jd_atoms_in_flight, 0);
 #endif
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_core_linux.c b/drivers/gpu/arm/bifrost/mali_kbase_core_linux.c
index 3da2b6c4e7dc..3b46c7761148 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_core_linux.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_core_linux.c
@@ -21,16 +21,16 @@
 #include <mali_midg_regmap.h>
 #include <mali_kbase_gator.h>
 #include <mali_kbase_mem_linux.h>
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 #include <linux/devfreq.h>
 #include <backend/gpu/mali_kbase_devfreq.h>
 #ifdef CONFIG_DEVFREQ_THERMAL
 #include <ipa/mali_kbase_ipa_debugfs.h>
 #endif /* CONFIG_DEVFREQ_THERMAL */
-#endif /* CONFIG_MALI_DEVFREQ */
-#ifdef CONFIG_MALI_NO_MALI
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 #include "mali_kbase_model_linux.h"
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 #include "mali_kbase_mem_profile_debugfs_buf_size.h"
 #include "mali_kbase_debug_mem_view.h"
 #include "mali_kbase_mem.h"
@@ -153,9 +153,9 @@ enum {
 	inited_mem = (1u << 0),
 	inited_js = (1u << 1),
 	inited_pm_runtime_init = (1u << 2),
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 	inited_devfreq = (1u << 3),
-#endif /* CONFIG_MALI_DEVFREQ */
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
 	inited_tlstream = (1u << 4),
 	inited_backend_early = (1u << 5),
 	inited_backend_late = (1u << 6),
@@ -178,7 +178,7 @@ enum {
 };
 
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define INACTIVE_WAIT_MS (5000)
 
 void kbase_set_driver_inactive(struct kbase_device *kbdev, bool inactive)
@@ -191,7 +191,7 @@ void kbase_set_driver_inactive(struct kbase_device *kbdev, bool inactive)
 		msleep(INACTIVE_WAIT_MS);
 }
 KBASE_EXPORT_TEST_API(kbase_set_driver_inactive);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 /**
  * kbase_legacy_dispatch - UKK dispatch function
@@ -217,10 +217,10 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 	id = ukh->id;
 	ukh->ret = MALI_ERROR_NONE; /* Be optimistic */
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	wait_event(kbdev->driver_inactive_wait,
 			kbdev->driver_inactive == false);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	if (UKP_FUNC_ID_CHECK_VERSION == id) {
 		struct uku_version_check_args *version_check;
@@ -674,7 +674,7 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 
 	case KBASE_FUNC_INJECT_ERROR:
 		{
-#ifdef CONFIG_MALI_ERROR_INJECT
+#ifdef CONFIG_MALI_BIFROST_ERROR_INJECT
 			unsigned long flags;
 			struct kbase_error_params params = ((struct kbase_uk_error_params *)args)->params;
 
@@ -686,13 +686,13 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 				ukh->ret = MALI_ERROR_NONE;
 			spin_unlock_irqrestore(&kbdev->reg_op_lock, flags);
 			/*mutex unlock */
-#endif /* CONFIG_MALI_ERROR_INJECT */
+#endif /* CONFIG_MALI_BIFROST_ERROR_INJECT */
 			break;
 		}
 
 	case KBASE_FUNC_MODEL_CONTROL:
 		{
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 			unsigned long flags;
 			struct kbase_model_control_params params =
 					((struct kbase_uk_model_control_params *)args)->params;
@@ -705,7 +705,7 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 				ukh->ret = MALI_ERROR_NONE;
 			spin_unlock_irqrestore(&kbdev->reg_op_lock, flags);
 			/*mutex unlock */
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 			break;
 		}
 
@@ -782,7 +782,7 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 			break;
 		}
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	case KBASE_FUNC_SET_PRFCNT_VALUES:
 		{
 
@@ -793,7 +793,7 @@ static int kbase_legacy_dispatch(struct kbase_context *kctx,
 
 			break;
 		}
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 #ifdef BASE_LEGACY_UK10_4_SUPPORT
 	case KBASE_FUNC_TLSTREAM_ACQUIRE_V10_4:
 		{
@@ -2139,7 +2139,7 @@ static const struct file_operations kbase_fops = {
 	.get_unmapped_area = kbase_get_unmapped_area,
 };
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 void kbase_os_reg_write(struct kbase_device *kbdev, u16 offset, u32 value)
 {
 	writel(value, kbdev->reg + offset);
@@ -2149,7 +2149,7 @@ u32 kbase_os_reg_read(struct kbase_device *kbdev, u16 offset)
 {
 	return readl(kbdev->reg + offset);
 }
-#endif /* !CONFIG_MALI_NO_MALI */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
 
 /**
  * show_policy - Show callback for the power_policy sysfs file.
@@ -2974,7 +2974,7 @@ static DEVICE_ATTR(force_replay, S_IRUGO | S_IWUSR, show_force_replay,
 		set_force_replay);
 #endif /* !MALI_CUSTOMER_RELEASE */
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 static ssize_t set_js_softstop_always(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
@@ -3028,9 +3028,9 @@ static ssize_t show_js_softstop_always(struct device *dev,
  * (see CL t6xx_stress_1 unit-test as an example whereby this feature is used.)
  */
 static DEVICE_ATTR(js_softstop_always, S_IRUGO | S_IWUSR, show_js_softstop_always, set_js_softstop_always);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 typedef void (kbasep_debug_command_func) (struct kbase_device *);
 
 enum kbasep_debug_command_code {
@@ -3132,7 +3132,7 @@ static ssize_t issue_debug(struct device *dev, struct device_attribute *attr, co
  * Writing to it with one of those commands will issue said command.
  */
 static DEVICE_ATTR(debug_command, S_IRUGO | S_IWUSR, show_debug, issue_debug);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 /**
  * kbase_show_gpuinfo - Show callback for the gpuinfo sysfs entry.
@@ -3804,7 +3804,7 @@ static void kbasep_protected_mode_term(struct kbase_device *kbdev)
 		kfree(kbdev->protected_dev);
 }
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 static int kbase_common_reg_map(struct kbase_device *kbdev)
 {
 	return 0;
@@ -3812,7 +3812,7 @@ static int kbase_common_reg_map(struct kbase_device *kbdev)
 static void kbase_common_reg_unmap(struct kbase_device * const kbdev)
 {
 }
-#else /* CONFIG_MALI_NO_MALI */
+#else /* CONFIG_MALI_BIFROST_NO_MALI */
 static int kbase_common_reg_map(struct kbase_device *kbdev)
 {
 	int err = 0;
@@ -3848,7 +3848,7 @@ static void kbase_common_reg_unmap(struct kbase_device * const kbdev)
 		kbdev->reg_size = 0;
 	}
 }
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 
 static int registers_map(struct kbase_device * const kbdev)
 {
@@ -4137,16 +4137,16 @@ static int kbase_device_debugfs_init(struct kbase_device *kbdev)
 	kbasep_trace_debugfs_init(kbdev);
 #endif /* KBASE_TRACE_ENABLE */
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	kbasep_trace_timeline_debugfs_init(kbdev);
-#endif /* CONFIG_MALI_TRACE_TIMELINE */
+#endif /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 #ifdef CONFIG_DEVFREQ_THERMAL
 	if (kbdev->inited_subsys & inited_devfreq)
 		kbase_ipa_debugfs_init(kbdev);
 #endif /* CONFIG_DEVFREQ_THERMAL */
-#endif /* CONFIG_MALI_DEVFREQ */
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
 
 #ifdef CONFIG_DEBUG_FS
 	debugfs_create_file("serialize_jobs", S_IRUGO | S_IWUSR,
@@ -4247,7 +4247,7 @@ static void kbase_logging_started_cb(void *data)
 #endif
 
 static struct attribute *kbase_attrs[] = {
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	&dev_attr_debug_command.attr,
 	&dev_attr_js_softstop_always.attr,
 #endif
@@ -4329,7 +4329,7 @@ static int kbase_platform_device_remove(struct platform_device *pdev)
 		kbdev->inited_subsys &= ~inited_vinstr;
 	}
 
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 	if (kbdev->inited_subsys & inited_devfreq) {
 		kbase_devfreq_term(kbdev);
 		kbdev->inited_subsys &= ~inited_devfreq;
@@ -4404,12 +4404,12 @@ static int kbase_platform_device_remove(struct platform_device *pdev)
 		kbdev->inited_subsys &= ~inited_registers_map;
 	}
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	if (kbdev->inited_subsys & inited_gpu_device) {
 		gpu_device_destroy(kbdev);
 		kbdev->inited_subsys &= ~inited_gpu_device;
 	}
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 
 	if (kbdev->inited_subsys != 0)
 		dev_err(kbdev->dev, "Missing sub system termination\n");
@@ -4451,7 +4451,7 @@ static int kbase_platform_device_probe(struct platform_device *pdev)
 	kbdev->dev = &pdev->dev;
 	dev_set_drvdata(kbdev->dev, kbdev);
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	err = gpu_device_create(kbdev);
 	if (err) {
 		dev_err(&pdev->dev, "Dummy model initialization failed\n");
@@ -4459,7 +4459,7 @@ static int kbase_platform_device_probe(struct platform_device *pdev)
 		return err;
 	}
 	kbdev->inited_subsys |= inited_gpu_device;
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 
 	err = assign_irqs(pdev);
 	if (err) {
@@ -4603,14 +4603,14 @@ static int kbase_platform_device_probe(struct platform_device *pdev)
 	}
 	kbdev->inited_subsys |= inited_vinstr;
 
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 	/* Devfreq uses vinstr, so must be initialized after it. */
 	err = kbase_devfreq_init(kbdev);
 	if (!err)
 		kbdev->inited_subsys |= inited_devfreq;
 	else
 		dev_err(kbdev->dev, "Continuing without devfreq\n");
-#endif /* CONFIG_MALI_DEVFREQ */
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
 
 	err = kbase_debug_job_fault_dev_init(kbdev);
 	if (err) {
@@ -4711,7 +4711,7 @@ static int kbase_device_suspend(struct device *dev)
 	if (!kbdev)
 		return -ENODEV;
 
-#if defined(CONFIG_MALI_DEVFREQ) && \
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && \
 		(LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
 	if (kbdev->inited_subsys & inited_devfreq)
 		devfreq_suspend_device(kbdev->devfreq);
@@ -4739,7 +4739,7 @@ static int kbase_device_resume(struct device *dev)
 
 	kbase_pm_resume(kbdev);
 
-#if defined(CONFIG_MALI_DEVFREQ) && \
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && \
 		(LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
 	if (kbdev->inited_subsys & inited_devfreq)
 		devfreq_resume_device(kbdev->devfreq);
@@ -4766,7 +4766,7 @@ static int kbase_device_runtime_suspend(struct device *dev)
 	if (!kbdev)
 		return -ENODEV;
 
-#if defined(CONFIG_MALI_DEVFREQ) && \
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && \
 		(LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
 	if (kbdev->inited_subsys & inited_devfreq)
 		devfreq_suspend_device(kbdev->devfreq);
@@ -4804,7 +4804,7 @@ static int kbase_device_runtime_resume(struct device *dev)
 		dev_dbg(dev, "runtime resume\n");
 	}
 
-#if defined(CONFIG_MALI_DEVFREQ) && \
+#if defined(CONFIG_MALI_BIFROST_DEVFREQ) && \
 		(LINUX_VERSION_CODE >= KERNEL_VERSION(3, 8, 0))
 	if (kbdev->inited_subsys & inited_devfreq)
 		devfreq_resume_device(kbdev->devfreq);
@@ -4917,11 +4917,11 @@ MODULE_VERSION(MALI_RELEASE_NAME " (UK version " \
 		__stringify(BASE_UK_VERSION_MAJOR) "." \
 		__stringify(BASE_UK_VERSION_MINOR) ")");
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT) || defined(CONFIG_MALI_SYSTEM_TRACE)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT) || defined(CONFIG_MALI_BIFROST_SYSTEM_TRACE)
 #define CREATE_TRACE_POINTS
 #endif
 
-#ifdef CONFIG_MALI_GATOR_SUPPORT
+#ifdef CONFIG_MALI_BIFROST_GATOR_SUPPORT
 /* Create the trace points (otherwise we just get code to call a tracepoint) */
 #include "mali_linux_trace.h"
 
@@ -4973,7 +4973,7 @@ void kbase_trace_mali_total_alloc_pages_change(long long int event)
 {
 	trace_mali_total_alloc_pages_change(event);
 }
-#endif /* CONFIG_MALI_GATOR_SUPPORT */
-#ifdef CONFIG_MALI_SYSTEM_TRACE
+#endif /* CONFIG_MALI_BIFROST_GATOR_SUPPORT */
+#ifdef CONFIG_MALI_BIFROST_SYSTEM_TRACE
 #include "mali_linux_kbase_trace.h"
 #endif
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_debug.h b/drivers/gpu/arm/bifrost/mali_kbase_debug.h
index d7873c5eabf9..31b754c5507b 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_debug.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_debug.h
@@ -30,7 +30,7 @@
 
 /** @brief Disable the asserts tests if set to 1. Default is to disable the asserts in release. */
 #ifndef KBASE_DEBUG_DISABLE_ASSERTS
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define KBASE_DEBUG_DISABLE_ASSERTS 0
 #else
 #define KBASE_DEBUG_DISABLE_ASSERTS 1
@@ -71,7 +71,7 @@ struct kbasep_debug_assert_cb {
  * @note function parameter cannot be concatenated with other strings
  */
 /* Select the correct system output function*/
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define KBASEP_DEBUG_ASSERT_OUT(trace, function, ...)\
 		do { \
 			pr_err("Mali<ASSERT>: %s function:%s ", trace, function);\
@@ -82,7 +82,7 @@ struct kbasep_debug_assert_cb {
 #define KBASEP_DEBUG_ASSERT_OUT(trace, function, ...) CSTD_NOP()
 #endif
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define KBASE_CALL_ASSERT_HOOK() kbasep_debug_assert_call_hook()
 #else
 #define KBASE_CALL_ASSERT_HOOK() CSTD_NOP()
@@ -127,11 +127,11 @@ struct kbasep_debug_assert_cb {
  *
  * @param X Code to compile only in debug mode.
  */
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define KBASE_DEBUG_CODE(X) X
 #else
 #define KBASE_DEBUG_CODE(X) CSTD_NOP()
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 
 /** @} */
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_defs.h b/drivers/gpu/arm/bifrost/mali_kbase_defs.h
index 1ab64255d1a2..d957c1461440 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_defs.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_defs.h
@@ -61,9 +61,9 @@
 #include <linux/debugfs.h>
 #endif				/* CONFIG_DEBUG_FS */
 
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 #include <linux/devfreq.h>
-#endif /* CONFIG_MALI_DEVFREQ */
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
 
 #include <linux/clk.h>
 #include <linux/regulator/consumer.h>
@@ -74,16 +74,16 @@
 #endif
 
 /** Enable SW tracing when set */
-#ifdef CONFIG_MALI_MIDGARD_ENABLE_TRACE
+#ifdef CONFIG_MALI_BIFROST_ENABLE_TRACE
 #define KBASE_TRACE_ENABLE 1
 #endif
 
 #ifndef KBASE_TRACE_ENABLE
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 #define KBASE_TRACE_ENABLE 1
 #else
 #define KBASE_TRACE_ENABLE 0
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 #endif				/* KBASE_TRACE_ENABLE */
 
 /** Dump Job slot trace on error (only active if KBASE_TRACE_ENABLE != 0) */
@@ -450,7 +450,7 @@ struct kbase_jd_atom {
 	struct sync_fence *fence;
 	struct sync_fence_waiter sync_waiter;
 #endif				/* CONFIG_SYNC */
-#if defined(CONFIG_MALI_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
+#if defined(CONFIG_MALI_BIFROST_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
 	struct {
 		/* Use the functions/API defined in mali_kbase_fence.h to
 		 * when working with this sub struct */
@@ -516,7 +516,7 @@ struct kbase_jd_atom {
 		 */
 		atomic_t dep_count;
 	} dma_fence;
-#endif /* CONFIG_MALI_DMA_FENCE || CONFIG_SYNC_FILE*/
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE || CONFIG_SYNC_FILE*/
 
 	/* Note: refer to kbasep_js_atom_retained_state, which will take a copy of some of the following members */
 	enum base_jd_event_code event_code;
@@ -816,7 +816,7 @@ enum kbase_timeline_pm_event {
 	KBASEP_TIMELINE_PM_EVENT_LAST = KBASE_TIMELINE_PM_EVENT_CHANGE_GPU_STATE,
 };
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 struct kbase_trace_kctx_timeline {
 	atomic_t jd_atoms_in_flight;
 	u32 owner_tgid;
@@ -841,7 +841,7 @@ struct kbase_trace_kbdev_timeline {
 	 * Expected to be protected by hwaccess_lock */
 	bool l2_transitioning;
 };
-#endif /* CONFIG_MALI_TRACE_TIMELINE */
+#endif /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 
 
 struct kbasep_kctx_list_element {
@@ -997,7 +997,7 @@ struct kbase_device {
 #endif
 	char devname[DEVNAME_SIZE];
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	void *model;
 	struct kmem_cache *irq_slab;
 	struct workqueue_struct *irq_workq;
@@ -1005,7 +1005,7 @@ struct kbase_device {
 	atomic_t serving_gpu_irq;
 	atomic_t serving_mmu_irq;
 	spinlock_t reg_op_lock;
-#endif	/* CONFIG_MALI_NO_MALI */
+#endif	/* CONFIG_MALI_BIFROST_NO_MALI */
 
 	struct kbase_pm_device_data pm;
 	struct kbasep_js_device_data js_data;
@@ -1117,7 +1117,7 @@ struct kbase_device {
 	struct list_head        kctx_list;
 	struct mutex            kctx_list_lock;
 
-#ifdef CONFIG_MALI_DEVFREQ
+#ifdef CONFIG_MALI_BIFROST_DEVFREQ
 	struct devfreq_dev_profile devfreq_profile;
 	struct devfreq *devfreq;
 	unsigned long current_freq;
@@ -1141,10 +1141,10 @@ struct kbase_device {
 		struct kbase_ipa_model *fallback_model;
 	} ipa;
 #endif /* CONFIG_DEVFREQ_THERMAL */
-#endif /* CONFIG_MALI_DEVFREQ */
+#endif /* CONFIG_MALI_BIFROST_DEVFREQ */
 
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	struct kbase_trace_kbdev_timeline timeline;
 #endif
 
@@ -1160,10 +1160,10 @@ struct kbase_device {
 	/* Root directory for per context entry */
 	struct dentry *debugfs_ctx_directory;
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	/* bit for each as, set if there is new data to report */
 	u64 debugfs_as_read_bitmap;
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	/* failed job dump, used for separate debug process */
 	wait_queue_head_t job_fault_wq;
@@ -1263,10 +1263,10 @@ struct kbase_device {
 	bool protected_mode_support;
 
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	wait_queue_head_t driver_inactive_wait;
 	bool driver_inactive;
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 #ifdef CONFIG_MALI_FPGA_BUS_LOGGER
 	/*
@@ -1423,12 +1423,12 @@ struct kbase_context {
 #ifdef CONFIG_KDS
 	struct list_head waiting_kds_resource;
 #endif
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	struct {
 		struct list_head waiting_resource;
 		struct workqueue_struct *wq;
 	} dma_fence;
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 	/** This is effectively part of the Run Pool, because it only has a valid
 	 * setting (!=KBASEP_AS_NR_INVALID) whilst the context is scheduled in
 	 *
@@ -1460,7 +1460,7 @@ struct kbase_context {
 	/* End of the SAME_VA zone */
 	u64 same_va_end;
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	struct kbase_trace_kctx_timeline timeline;
 #endif
 #ifdef CONFIG_DEBUG_FS
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_device.c b/drivers/gpu/arm/bifrost/mali_kbase_device.c
index d635fccaea14..2d11f11f3be0 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_device.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_device.c
@@ -221,13 +221,13 @@ int kbase_device_init(struct kbase_device * const kbdev)
 
 	mutex_init(&kbdev->cacheclean_lock);
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 	for (i = 0; i < BASE_JM_MAX_NR_SLOTS; ++i)
 		kbdev->timeline.slot_atoms_submitted[i] = 0;
 
 	for (i = 0; i <= KBASEP_TIMELINE_PM_EVENT_LAST; ++i)
 		atomic_set(&kbdev->timeline.pm_event_uid[i], 0);
-#endif /* CONFIG_MALI_TRACE_TIMELINE */
+#endif /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 
 	/* fbdump profiling controls set to 0 - fbdump not enabled until changed by gator */
 	for (i = 0; i < FBDUMP_CONTROL_MAX; i++)
@@ -250,9 +250,9 @@ int kbase_device_init(struct kbase_device * const kbdev)
 	else
 		kbdev->mmu_mode = kbase_mmu_mode_get_lpae();
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	init_waitqueue_head(&kbdev->driver_inactive_wait);
-#endif /* CONFIG_MALI_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_DEBUG */
 
 	return 0;
 term_trace:
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.c b/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.c
index 9197743c81d4..8a571266534b 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.c
@@ -16,7 +16,7 @@
 
 
 
-/* Include mali_kbase_dma_fence.h before checking for CONFIG_MALI_DMA_FENCE as
+/* Include mali_kbase_dma_fence.h before checking for CONFIG_MALI_BIFROST_DMA_FENCE as
  * it will be set there.
  */
 #include "mali_kbase_dma_fence.h"
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.h b/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.h
index c9ab40350422..b02ea9774c4f 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_dma_fence.h
@@ -18,7 +18,7 @@
 #ifndef _KBASE_DMA_FENCE_H_
 #define _KBASE_DMA_FENCE_H_
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 
 #include <linux/list.h>
 #include <linux/reservation.h>
@@ -118,7 +118,7 @@ void kbase_dma_fence_term(struct kbase_context *kctx);
 int kbase_dma_fence_init(struct kbase_context *kctx);
 
 
-#else /* CONFIG_MALI_DMA_FENCE */
+#else /* CONFIG_MALI_BIFROST_DMA_FENCE */
 /* Dummy functions for when dma-buf fence isn't enabled. */
 
 static inline int kbase_dma_fence_init(struct kbase_context *kctx)
@@ -127,5 +127,5 @@ static inline int kbase_dma_fence_init(struct kbase_context *kctx)
 }
 
 static inline void kbase_dma_fence_term(struct kbase_context *kctx) {}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 #endif
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_fence.h b/drivers/gpu/arm/bifrost/mali_kbase_fence.h
index f3ed025f7f6c..9f59d30a1e2e 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_fence.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_fence.h
@@ -20,11 +20,11 @@
 
 /*
  * mali_kbase_fence.[hc] has common fence code used by both
- * - CONFIG_MALI_DMA_FENCE - implicit DMA fences
+ * - CONFIG_MALI_BIFROST_DMA_FENCE - implicit DMA fences
  * - CONFIG_SYNC_FILE      - explicit fences beginning with 4.9 kernel
  */
 
-#if defined(CONFIG_MALI_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
+#if defined(CONFIG_MALI_BIFROST_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
 
 #include <linux/list.h>
 #include "mali_kbase_fence_defs.h"
@@ -265,6 +265,6 @@ bool kbase_fence_free_callbacks(struct kbase_jd_atom *katom);
 #define kbase_fence_put(fence) dma_fence_put(fence)
 
 
-#endif /* CONFIG_MALI_DMA_FENCE || defined(CONFIG_SYNC_FILE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE || defined(CONFIG_SYNC_FILE */
 
 #endif /* _KBASE_FENCE_H_ */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_fence_defs.h b/drivers/gpu/arm/bifrost/mali_kbase_fence_defs.h
index fa2c6dfe999e..d2d7c436918c 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_fence_defs.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_fence_defs.h
@@ -23,7 +23,7 @@
  * This file hides the compatibility issues with this for the rest the driver
  */
 
-#if defined(CONFIG_MALI_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
+#if defined(CONFIG_MALI_BIFROST_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
 
 #include <linux/version.h>
 
@@ -46,6 +46,6 @@
 
 #endif /* < 4.10.0 */
 
-#endif /* CONFIG_MALI_DMA_FENCE || CONFIG_SYNC_FILE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE || CONFIG_SYNC_FILE */
 
 #endif /* _KBASE_FENCE_DEFS_H_ */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_gator.h b/drivers/gpu/arm/bifrost/mali_kbase_gator.h
index ce65b5562a2b..87697b15d986 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_gator.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_gator.h
@@ -25,7 +25,7 @@
 #ifndef _KBASE_GATOR_H_
 #define _KBASE_GATOR_H_
 
-#ifdef CONFIG_MALI_GATOR_SUPPORT
+#ifdef CONFIG_MALI_BIFROST_GATOR_SUPPORT
 #define GATOR_MAKE_EVENT(type, number) (((type) << 24) | ((number) << 16))
 #define GATOR_JOB_SLOT_START 1
 #define GATOR_JOB_SLOT_STOP  2
@@ -40,6 +40,6 @@ void kbase_trace_mali_mmu_as_in_use(int event);
 void kbase_trace_mali_mmu_as_released(int event);
 void kbase_trace_mali_total_alloc_pages_change(long long int event);
 
-#endif /* CONFIG_MALI_GATOR_SUPPORT */
+#endif /* CONFIG_MALI_BIFROST_GATOR_SUPPORT */
 
 #endif  /* _KBASE_GATOR_H_ */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_gpuprops.c b/drivers/gpu/arm/bifrost/mali_kbase_gpuprops.c
index baf3c491c719..4130810f1038 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_gpuprops.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_gpuprops.c
@@ -59,7 +59,7 @@ int kbase_gpuprops_uk_get_props(struct kbase_context *kctx, struct kbase_uk_gpup
 	get_gpu_speed_mhz = (kbase_gpu_clk_speed_func) GPU_SPEED_FUNC;
 	if (get_gpu_speed_mhz != NULL) {
 		rc = get_gpu_speed_mhz(&gpu_speed_mhz);
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 		/* Issue a warning message when the reported GPU speed falls outside the min/max range */
 		if (rc == 0) {
 			u32 gpu_speed_khz = gpu_speed_mhz * 1000;
@@ -71,7 +71,7 @@ int kbase_gpuprops_uk_get_props(struct kbase_context *kctx, struct kbase_uk_gpup
 						(unsigned long)kctx->kbdev->gpu_props.props.core_props.gpu_freq_khz_min,
 						(unsigned long)kctx->kbdev->gpu_props.props.core_props.gpu_freq_khz_max);
 		}
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 	}
 	if (kctx->kbdev->clock) {
 		gpu_speed_mhz = clk_get_rate(kctx->kbdev->clock) / 1000000;
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_hwaccess_time.h b/drivers/gpu/arm/bifrost/mali_kbase_hwaccess_time.h
index 89d26eaf09a4..b9fe8e669c63 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_hwaccess_time.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_hwaccess_time.h
@@ -46,7 +46,7 @@ void kbase_backend_get_gpu_time(struct kbase_device *kbdev, u64 *cycle_counter,
  *
  * This function is only in use for BASE_HW_ISSUE_6367
  */
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 void kbase_wait_write_flush(struct kbase_context *kctx);
 #endif
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_jd.c b/drivers/gpu/arm/bifrost/mali_kbase_jd.c
index 9f9e0c44bcb0..144ebfcdfc59 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_jd.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_jd.c
@@ -106,7 +106,7 @@ static int jd_run_atom(struct kbase_jd_atom *katom)
 	return kbasep_js_add_job(kctx, katom);
 }
 
-#if defined(CONFIG_KDS) || defined(CONFIG_MALI_DMA_FENCE)
+#if defined(CONFIG_KDS) || defined(CONFIG_MALI_BIFROST_DMA_FENCE)
 void kbase_jd_dep_clear_locked(struct kbase_jd_atom *katom)
 {
 	struct kbase_device *kbdev;
@@ -224,7 +224,7 @@ void kbase_jd_free_external_resources(struct kbase_jd_atom *katom)
 	}
 #endif				/* CONFIG_KDS */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	/* Flush dma-fence workqueue to ensure that any callbacks that may have
 	 * been queued are done before continuing.
 	 * Any successfully completed atom would have had all it's callbacks
@@ -232,7 +232,7 @@ void kbase_jd_free_external_resources(struct kbase_jd_atom *katom)
 	 */
 	if (katom->event_code != BASE_JD_EVENT_DONE)
 		flush_workqueue(katom->kctx->dma_fence.wq);
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 }
 
 static void kbase_jd_post_external_resources(struct kbase_jd_atom *katom)
@@ -246,9 +246,9 @@ static void kbase_jd_post_external_resources(struct kbase_jd_atom *katom)
 		katom->kds_dep_satisfied = true;
 #endif				/* CONFIG_KDS */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	kbase_dma_fence_signal(katom);
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 	kbase_gpu_vm_lock(katom->kctx);
 	/* only roll back if extres is non-NULL */
@@ -286,7 +286,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 	struct kds_resource **kds_resources = NULL;
 	unsigned long *kds_access_bitmap = NULL;
 #endif				/* CONFIG_KDS */
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	struct kbase_dma_fence_resv_info info = {
 		.dma_fence_resv_count = 0,
 	};
@@ -301,7 +301,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 #else /* CONFIG_SYNC */
 	const bool implicit_sync = true;
 #endif /* CONFIG_SYNC */
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 	struct base_external_resource *input_extres;
 
 	KBASE_DEBUG_ASSERT(katom);
@@ -352,7 +352,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 	}
 #endif				/* CONFIG_KDS */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	if (implicit_sync) {
 		info.resv_objs = kmalloc_array(katom->nr_extres,
 					sizeof(struct reservation_object *),
@@ -370,7 +370,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 			goto early_err_out;
 		}
 	}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 	/* Take the processes mmap lock */
 	down_read(&current->mm->mmap_sem);
@@ -412,7 +412,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 			goto failed_loop;
 		}
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 		if (implicit_sync &&
 		    reg->gpu_alloc->type == KBASE_MEM_TYPE_IMPORTED_UMM) {
 			struct reservation_object *resv;
@@ -422,7 +422,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 				kbase_dma_fence_add_reservation(resv, &info,
 								exclusive);
 		}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 		/* finish with updating out array with the data we found */
 		/* NOTE: It is important that this is the last thing we do (or
@@ -464,7 +464,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 	kfree(kds_access_bitmap);
 #endif				/* CONFIG_KDS */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	if (implicit_sync) {
 		if (info.dma_fence_resv_count) {
 			int ret;
@@ -477,14 +477,14 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 		kfree(info.resv_objs);
 		kfree(info.dma_fence_excl_bitmap);
 	}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 	/* all done OK */
 	return 0;
 
 /* error handling section */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 failed_dma_fence_setup:
 #ifdef CONFIG_KDS
 	/* If we are here, dma_fence setup failed but KDS didn't.
@@ -499,11 +499,11 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 		katom->kds_dep_satisfied = true;
 	}
 #endif /* CONFIG_KDS */
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 #ifdef CONFIG_KDS
 failed_kds_setup:
 #endif
-#if defined(CONFIG_KDS) || defined(CONFIG_MALI_DMA_FENCE)
+#if defined(CONFIG_KDS) || defined(CONFIG_MALI_BIFROST_DMA_FENCE)
 	/* Lock the processes mmap lock */
 	down_read(&current->mm->mmap_sem);
 
@@ -530,7 +530,7 @@ static int kbase_jd_pre_external_resources(struct kbase_jd_atom *katom, const st
 	kfree(kds_resources);
 	kfree(kds_access_bitmap);
 #endif				/* CONFIG_KDS */
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	if (implicit_sync) {
 		kfree(info.resv_objs);
 		kfree(info.dma_fence_excl_bitmap);
@@ -568,7 +568,7 @@ static inline void jd_resolve_dep(struct list_head *out_list,
 			}
 #endif
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 			kbase_dma_fence_cancel_callbacks(dep_atom);
 #endif
 
@@ -593,7 +593,7 @@ static inline void jd_resolve_dep(struct list_head *out_list,
 				!dep_atom->will_fail_event_code &&
 				!other_dep_atom->will_fail_event_code))) {
 			bool dep_satisfied = true;
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 			int dep_count;
 
 			dep_count = kbase_fence_dep_count_read(dep_atom);
@@ -615,7 +615,7 @@ static inline void jd_resolve_dep(struct list_head *out_list,
 				 */
 				dep_satisfied = false;
 			}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 #ifdef CONFIG_KDS
 			dep_satisfied = dep_satisfied && dep_atom->kds_dep_satisfied;
@@ -732,7 +732,7 @@ static void jd_try_submitting_deps(struct list_head *out_list,
 				bool dep1_valid = is_dep_valid(
 						dep_atom->dep[1].atom);
 				bool dep_satisfied = true;
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 				int dep_count;
 
 				dep_count = kbase_fence_dep_count_read(
@@ -755,7 +755,7 @@ static void jd_try_submitting_deps(struct list_head *out_list,
 				 */
 					dep_satisfied = false;
 				}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 #ifdef CONFIG_KDS
 				dep_satisfied = dep_satisfied &&
 						dep_atom->kds_dep_satisfied;
@@ -1010,7 +1010,7 @@ bool jd_submit_atom(struct kbase_context *kctx, const struct base_jd_atom_v2 *us
 	katom->kds_dep_satisfied = true;
 	katom->kds_rset = NULL;
 #endif				/* CONFIG_KDS */
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	kbase_fence_dep_count_set(katom, -1);
 #endif
 
@@ -1236,12 +1236,12 @@ bool jd_submit_atom(struct kbase_context *kctx, const struct base_jd_atom_v2 *us
 #endif				/* CONFIG_KDS */
 
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	if (kbase_fence_dep_count_read(katom) != -1) {
 		ret = false;
 		goto out;
 	}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 	if ((katom->core_req & BASE_JD_REQ_SOFT_JOB_TYPE)
 						  == BASE_JD_REQ_SOFT_REPLAY) {
@@ -1750,13 +1750,13 @@ void kbase_jd_zap_context(struct kbase_context *kctx)
 	}
 #endif
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	kbase_dma_fence_cancel_all_atoms(kctx);
 #endif
 
 	mutex_unlock(&kctx->jctx.lock);
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	/* Flush dma-fence workqueue to ensure that any callbacks that may have
 	 * been queued are done before continuing.
 	 */
@@ -1795,7 +1795,7 @@ int kbase_jd_init(struct kbase_context *kctx)
 		kctx->jctx.atoms[i].event_code = BASE_JD_EVENT_JOB_INVALID;
 		kctx->jctx.atoms[i].status = KBASE_JD_ATOM_STATE_UNUSED;
 
-#if defined(CONFIG_MALI_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
+#if defined(CONFIG_MALI_BIFROST_DMA_FENCE) || defined(CONFIG_SYNC_FILE)
 		kctx->jctx.atoms[i].dma_fence.context =
 						dma_fence_context_alloc(1);
 		atomic_set(&kctx->jctx.atoms[i].dma_fence.seqno, 0);
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_jd_debugfs.c b/drivers/gpu/arm/bifrost/mali_kbase_jd_debugfs.c
index c8b37c4e3291..fed4ad5816ab 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_jd_debugfs.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_jd_debugfs.c
@@ -57,7 +57,7 @@ static void kbase_jd_debugfs_fence_info(struct kbase_jd_atom *atom,
 	}
 #endif /* CONFIG_SYNC || CONFIG_SYNC_FILE */
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 	if (atom->core_req & BASE_JD_REQ_EXTERNAL_RESOURCES) {
 		struct kbase_fence_cb *cb;
 
@@ -100,7 +100,7 @@ static void kbase_jd_debugfs_fence_info(struct kbase_jd_atom *atom,
 						"signaled" : "active");
 		}
 	}
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 
 }
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_js.c b/drivers/gpu/arm/bifrost/mali_kbase_js.c
index 219e8c80146c..677e438aedfa 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_js.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_js.c
@@ -22,7 +22,7 @@
  */
 #include <mali_kbase.h>
 #include <mali_kbase_js.h>
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 #include <mali_kbase_gator.h>
 #endif
 #include <mali_kbase_tlstream.h>
@@ -425,11 +425,11 @@ int kbasep_js_devdata_init(struct kbase_device * const kbdev)
 
 	jsdd = &kbdev->js_data;
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	/* Soft-stop will be disabled on a single context by default unless
 	 * softstop_always is set */
 	jsdd->softstop_always = false;
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 	jsdd->nr_all_contexts_running = 0;
 	jsdd->nr_user_contexts_running = 0;
 	jsdd->nr_contexts_pullable = 0;
@@ -1417,7 +1417,7 @@ static kbasep_js_release_result kbasep_js_runpool_release_ctx_internal(
 				kctx, new_ref_count, js_kctx_info->ctx.nr_jobs,
 				kbasep_js_is_submit_allowed(js_devdata, kctx));
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 		kbase_trace_mali_mmu_as_released(kctx->as_nr);
 #endif
 		KBASE_TLSTREAM_TL_NRET_AS_CTX(&kbdev->as[kctx->as_nr], kctx);
@@ -1695,7 +1695,7 @@ static bool kbasep_js_schedule_ctx(struct kbase_device *kbdev,
 
 	kbdev->hwaccess.active_kctx = kctx;
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	kbase_trace_mali_mmu_as_in_use(kctx->as_nr);
 #endif
 	KBASE_TLSTREAM_TL_RET_AS_CTX(&kbdev->as[kctx->as_nr], kctx);
@@ -2408,7 +2408,7 @@ struct kbase_jd_atom *kbase_js_complete_atom(struct kbase_jd_atom *katom,
 				katom->sched_priority);
 	}
 
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	kbase_trace_mali_job_slots_event(GATOR_MAKE_EVENT(GATOR_JOB_SLOT_STOP,
 				katom->slot_nr), NULL, 0);
 #endif
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_js_defs.h b/drivers/gpu/arm/bifrost/mali_kbase_js_defs.h
index ba8b6441549b..0b4890d6b50e 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_js_defs.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_js_defs.h
@@ -257,10 +257,10 @@ struct kbasep_js_device_data {
 	/** List of suspended soft jobs */
 	struct list_head suspended_soft_jobs_list;
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	/* Support soft-stop on a single context */
 	bool softstop_always;
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 
 	/** The initalized-flag is placed at the end, to avoid cache-pollution (we should
 	 * only be using this during init/term paths).
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_mem.h b/drivers/gpu/arm/bifrost/mali_kbase_mem.h
index 820a9beeee78..9d98947390f6 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_mem.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_mem.h
@@ -40,7 +40,7 @@
 #include <mali_kbase_hw.h>
 #include "mali_kbase_pm.h"
 #include "mali_kbase_defs.h"
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 #include "mali_kbase_gator.h"
 #endif
 /* Required for kbase_mem_evictable_unmake */
@@ -449,7 +449,7 @@ static inline int kbase_reg_prepare_native(struct kbase_va_region *reg,
 static inline int kbase_atomic_add_pages(int num_pages, atomic_t *used_pages)
 {
 	int new_val = atomic_add_return(num_pages, used_pages);
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	kbase_trace_mali_total_alloc_pages_change((long long int)new_val);
 #endif
 	return new_val;
@@ -458,7 +458,7 @@ static inline int kbase_atomic_add_pages(int num_pages, atomic_t *used_pages)
 static inline int kbase_atomic_sub_pages(int num_pages, atomic_t *used_pages)
 {
 	int new_val = atomic_sub_return(num_pages, used_pages);
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 	kbase_trace_mali_total_alloc_pages_change((long long int)new_val);
 #endif
 	return new_val;
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_mmu.c b/drivers/gpu/arm/bifrost/mali_kbase_mmu.c
index 2dd20fc4a05b..c63269aed53c 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_mmu.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_mmu.c
@@ -27,7 +27,7 @@
 #include <linux/dma-mapping.h>
 #include <mali_kbase.h>
 #include <mali_midg_regmap.h>
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 #include <mali_kbase_gator.h>
 #endif
 #include <mali_kbase_tlstream.h>
@@ -341,7 +341,7 @@ void page_fault_worker(struct work_struct *data)
 					"Page table update failure");
 			goto fault_done;
 		}
-#if defined(CONFIG_MALI_GATOR_SUPPORT)
+#if defined(CONFIG_MALI_BIFROST_GATOR_SUPPORT)
 		kbase_trace_mali_page_fault_insert_pages(as_no, new_pages);
 #endif
 		KBASE_TLSTREAM_AUX_PAGEFAULT(kctx->id, (u64)new_pages);
@@ -923,7 +923,7 @@ static void kbase_mmu_flush_invalidate_noretain(struct kbase_context *kctx,
 	}
 #endif /* KBASE_GPU_RESET_EN */
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	/*
 	 * As this function could be called in interrupt context the sync
 	 * request can't block. Instead log the request and the next flush
@@ -932,7 +932,7 @@ static void kbase_mmu_flush_invalidate_noretain(struct kbase_context *kctx,
 	if ((!err) && sync &&
 			kbase_hw_has_issue(kctx->kbdev, BASE_HW_ISSUE_6367))
 		atomic_set(&kctx->drain_pending, 1);
-#endif /* !CONFIG_MALI_NO_MALI */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
 }
 
 static void kbase_mmu_flush_invalidate(struct kbase_context *kctx,
@@ -940,12 +940,12 @@ static void kbase_mmu_flush_invalidate(struct kbase_context *kctx,
 {
 	struct kbase_device *kbdev;
 	bool ctx_is_in_runpool;
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	bool drain_pending = false;
 
 	if (atomic_xchg(&kctx->drain_pending, 0))
 		drain_pending = true;
-#endif /* !CONFIG_MALI_NO_MALI */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
 
 	/* Early out if there is nothing to do */
 	if (nr == 0)
@@ -991,7 +991,7 @@ static void kbase_mmu_flush_invalidate(struct kbase_context *kctx,
 			mutex_unlock(&kbdev->mmu_hw_mutex);
 			/* AS transaction end */
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 			/*
 			 * The transaction lock must be dropped before here
 			 * as kbase_wait_write_flush could take it if
@@ -1005,7 +1005,7 @@ static void kbase_mmu_flush_invalidate(struct kbase_context *kctx,
 				/* Wait for GPU to flush write buffer */
 				kbase_wait_write_flush(kctx);
 			}
-#endif /* !CONFIG_MALI_NO_MALI */
+#endif /* !CONFIG_MALI_BIFROST_NO_MALI */
 
 			kbase_pm_context_idle(kbdev);
 		}
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.c b/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.c
index c970650069cd..9e73f9f4999e 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.c
@@ -19,7 +19,7 @@
 
 #include "mali_kbase_regs_history_debugfs.h"
 
-#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_NO_MALI)
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_BIFROST_NO_MALI)
 
 #include <linux/debugfs.h>
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.h b/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.h
index f10837002330..fbb36b3f22e4 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_regs_history_debugfs.h
@@ -32,7 +32,7 @@
 
 struct kbase_device;
 
-#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_NO_MALI)
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_MALI_BIFROST_NO_MALI)
 
 /**
  * kbasep_regs_history_debugfs_init - add debugfs entries for register history
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_replay.c b/drivers/gpu/arm/bifrost/mali_kbase_replay.c
index 2f8eccfc1757..9f4dc372770d 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_replay.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_replay.c
@@ -67,7 +67,7 @@ struct fragment_job {
 static void dump_job_head(struct kbase_context *kctx, char *head_str,
 		struct job_descriptor_header *job)
 {
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	dev_dbg(kctx->kbdev->dev, "%s\n", head_str);
 	dev_dbg(kctx->kbdev->dev,
 			"addr                  = %p\n"
@@ -128,7 +128,7 @@ static int kbasep_replay_reset_sfbd(struct kbase_context *kctx,
 		return -EINVAL;
 	}
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	dev_dbg(kctx->kbdev->dev,
 		"FBD tiler:\n"
 		"flags = %x\n"
@@ -211,7 +211,7 @@ static int kbasep_replay_reset_mfbd(struct kbase_context *kctx,
 		return -EINVAL;
 	}
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	dev_dbg(kctx->kbdev->dev, "FBD tiler:\n"
 			"flags = %x\n"
 			"heap_free_address = %llx\n",
@@ -713,7 +713,7 @@ static int kbasep_replay_create_atoms(struct kbase_context *kctx,
 	return 0;
 }
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 static void payload_dump(struct kbase_context *kctx, base_jd_replay_payload *payload)
 {
 	u64 next;
@@ -788,7 +788,7 @@ static int kbasep_replay_parse_payload(struct kbase_context *kctx,
 	}
 #endif /* BASE_LEGACY_UK10_2_SUPPORT */
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	dev_dbg(kctx->kbdev->dev, "kbasep_replay_parse_payload: payload=%p\n", payload);
 	dev_dbg(kctx->kbdev->dev, "Payload structure:\n"
 				  "tiler_jc_list            = %llx\n"
@@ -1028,7 +1028,7 @@ static bool kbase_replay_fault_check(struct kbase_jd_atom *katom)
 		return false;
 	}
 
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 	dev_dbg(dev, "kbase_replay_fault_check: payload=%p\n", payload);
 	dev_dbg(dev, "\nPayload structure:\n"
 		     "fragment_jc              = 0x%llx\n"
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_softjobs.c b/drivers/gpu/arm/bifrost/mali_kbase_softjobs.c
index cd86b983028b..cafc789ea253 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_softjobs.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_softjobs.c
@@ -250,7 +250,7 @@ void kbasep_complete_triggered_soft_events(struct kbase_context *kctx, u64 evt)
 				cancel_timer = 0;
 			}
 			break;
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 		case BASE_JD_REQ_SOFT_FENCE_WAIT:
 			/* Keep the timer running if fence debug is enabled and
 			 * there are waiting fence jobs.
@@ -266,7 +266,7 @@ void kbasep_complete_triggered_soft_events(struct kbase_context *kctx, u64 evt)
 	spin_unlock_irqrestore(&kctx->waiting_soft_jobs_lock, lflags);
 }
 
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 static void kbase_fence_debug_check_atom(struct kbase_jd_atom *katom)
 {
 	struct kbase_context *kctx = katom->kctx;
@@ -368,7 +368,7 @@ static void kbase_fence_debug_timeout(struct kbase_jd_atom *katom)
 		queue_work(kctx->jctx.job_done_wq, &work->work);
 	}
 }
-#endif /* CONFIG_MALI_FENCE_DEBUG */
+#endif /* CONFIG_MALI_BIFROST_FENCE_DEBUG */
 
 void kbasep_soft_job_timeout_worker(unsigned long data)
 {
@@ -404,7 +404,7 @@ void kbasep_soft_job_timeout_worker(unsigned long data)
 			INIT_WORK(&katom->work, kbasep_soft_event_complete_job);
 			queue_work(kctx->jctx.job_done_wq, &katom->work);
 			break;
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 		case BASE_JD_REQ_SOFT_FENCE_WAIT:
 			kbase_fence_debug_timeout(katom);
 			break;
@@ -1282,7 +1282,7 @@ int kbase_process_soft_job(struct kbase_jd_atom *katom)
 		int ret = kbase_sync_fence_in_wait(katom);
 
 		if (ret == 1) {
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 			kbasep_add_waiting_with_timeout(katom);
 #else
 			kbasep_add_waiting_soft_job(katom);
@@ -1390,7 +1390,7 @@ int kbase_prepare_soft_job(struct kbase_jd_atom *katom)
 			if (ret < 0)
 				return ret;
 
-#ifdef CONFIG_MALI_DMA_FENCE
+#ifdef CONFIG_MALI_BIFROST_DMA_FENCE
 			/*
 			 * Set KCTX_NO_IMPLICIT_FENCE in the context the first
 			 * time a soft fence wait job is observed. This will
@@ -1399,7 +1399,7 @@ int kbase_prepare_soft_job(struct kbase_jd_atom *katom)
 			 */
 			if (!kbase_ctx_flag(katom->kctx, KCTX_NO_IMPLICIT_SYNC))
 				kbase_ctx_flag_set(katom->kctx, KCTX_NO_IMPLICIT_SYNC);
-#endif /* CONFIG_MALI_DMA_FENCE */
+#endif /* CONFIG_MALI_BIFROST_DMA_FENCE */
 		}
 		break;
 #endif /* CONFIG_SYNC || CONFIG_SYNC_FILE */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_sync.h b/drivers/gpu/arm/bifrost/mali_kbase_sync.h
index de72147d67ad..ca855b8d1b53 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_sync.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_sync.h
@@ -192,7 +192,7 @@ const char *kbase_sync_status_string(int status);
  */
 void kbase_sync_fence_wait_worker(struct work_struct *data);
 
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 /**
  * kbase_sync_fence_in_dump() Trigger a debug dump of atoms input fence state
  * @katom: Atom to trigger fence debug dump for
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_sync_android.c b/drivers/gpu/arm/bifrost/mali_kbase_sync_android.c
index d7349dcae69a..e4528e2b9f25 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_sync_android.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_sync_android.c
@@ -353,9 +353,9 @@ static void kbase_sync_signal_pt(struct sync_pt *pt, int result)
 			 * The warning is only in debug builds to prevent
 			 * a malicious user being able to spam dmesg.
 			 */
-#ifdef CONFIG_MALI_DEBUG
+#ifdef CONFIG_MALI_BIFROST_DEBUG
 			pr_err("Fences were triggered in a different order to allocation!");
-#endif				/* CONFIG_MALI_DEBUG */
+#endif				/* CONFIG_MALI_BIFROST_DEBUG */
 			return;
 		}
 	} while (atomic_cmpxchg(&mtl->signaled,
@@ -524,7 +524,7 @@ int kbase_sync_fence_out_info_get(struct kbase_jd_atom *katom,
 	return 0;
 }
 
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 void kbase_sync_fence_in_dump(struct kbase_jd_atom *katom)
 {
 	/* Dump out the full state of all the Android sync fences.
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_sync_file.c b/drivers/gpu/arm/bifrost/mali_kbase_sync_file.c
index ef5b7ce478b4..509c0666f10f 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_sync_file.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_sync_file.c
@@ -340,7 +340,7 @@ int kbase_sync_fence_out_info_get(struct kbase_jd_atom *katom,
 }
 
 
-#ifdef CONFIG_MALI_FENCE_DEBUG
+#ifdef CONFIG_MALI_BIFROST_FENCE_DEBUG
 void kbase_sync_fence_in_dump(struct kbase_jd_atom *katom)
 {
 	/* Not implemented */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.c b/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.c
index 5830e87f0818..d9854749f45b 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.c
@@ -23,7 +23,7 @@
 
 #define CREATE_TRACE_POINTS
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 #include "mali_timeline.h"
 
 #include <linux/debugfs.h>
@@ -233,4 +233,4 @@ void kbase_timeline_pm_l2_transition_done(struct kbase_device *kbdev)
 	}
 }
 
-#endif /* CONFIG_MALI_TRACE_TIMELINE */
+#endif /* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.h b/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.h
index 619072f3215c..4b517f396f8c 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_trace_timeline.h
@@ -20,7 +20,7 @@
 #if !defined(_KBASE_TRACE_TIMELINE_H)
 #define _KBASE_TRACE_TIMELINE_H
 
-#ifdef CONFIG_MALI_TRACE_TIMELINE
+#ifdef CONFIG_MALI_BIFROST_TRACE_TIMELINE
 
 enum kbase_trace_timeline_code {
 	#define KBASE_TIMELINE_TRACE_CODE(enum_val, desc, format, format_desc) enum_val
@@ -357,7 +357,7 @@ static inline void kbase_timeline_pm_l2_transition_start(struct kbase_device *kb
 static inline void kbase_timeline_pm_l2_transition_done(struct kbase_device *kbdev)
 {
 }
-#endif				/* CONFIG_MALI_TRACE_TIMELINE */
+#endif				/* CONFIG_MALI_BIFROST_TRACE_TIMELINE */
 
 #endif				/* _KBASE_TRACE_TIMELINE_H */
 
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_uku.h b/drivers/gpu/arm/bifrost/mali_kbase_uku.h
index 2a69da7394ba..cf8ee0572dc5 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_uku.h
+++ b/drivers/gpu/arm/bifrost/mali_kbase_uku.h
@@ -24,13 +24,13 @@
 #include "mali_base_kernel.h"
 
 /* This file needs to support being included from kernel and userside (which use different defines) */
-#if defined(CONFIG_MALI_ERROR_INJECT) || MALI_ERROR_INJECT_ON
+#if defined(CONFIG_MALI_BIFROST_ERROR_INJECT) || MALI_ERROR_INJECT_ON
 #define SUPPORT_MALI_ERROR_INJECT
-#endif /* defined(CONFIG_MALI_ERROR_INJECT) || MALI_ERROR_INJECT_ON */
-#if defined(CONFIG_MALI_NO_MALI)
+#endif /* defined(CONFIG_MALI_BIFROST_ERROR_INJECT) || MALI_ERROR_INJECT_ON */
+#if defined(CONFIG_MALI_BIFROST_NO_MALI)
 #define SUPPORT_MALI_NO_MALI
-#elif defined(MALI_NO_MALI)
-#if MALI_NO_MALI
+#elif defined(MALI_BIFROST_NO_MALI)
+#if MALI_BIFROST_NO_MALI
 #define SUPPORT_MALI_NO_MALI
 #endif
 #endif
diff --git a/drivers/gpu/arm/bifrost/mali_kbase_vinstr.c b/drivers/gpu/arm/bifrost/mali_kbase_vinstr.c
index ed12945d81f1..9c5b2e46c0e5 100644
--- a/drivers/gpu/arm/bifrost/mali_kbase_vinstr.c
+++ b/drivers/gpu/arm/bifrost/mali_kbase_vinstr.c
@@ -295,7 +295,7 @@ size_t kbase_vinstr_dump_size(struct kbase_device *kbdev)
 {
 	size_t dump_size;
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	if (kbase_hw_has_feature(kbdev, BASE_HW_FEATURE_V4)) {
 		u32 nr_cg;
 
@@ -304,7 +304,7 @@ size_t kbase_vinstr_dump_size(struct kbase_device *kbdev)
 				NR_CNT_PER_BLOCK *
 				NR_BYTES_PER_CNT;
 	} else
-#endif /* CONFIG_MALI_NO_MALI */
+#endif /* CONFIG_MALI_BIFROST_NO_MALI */
 	{
 		/* assume v5 for now */
 		base_gpu_props *props = &kbdev->gpu_props.props;
@@ -853,7 +853,7 @@ static void accum_clients(struct kbase_vinstr_context *vinstr_ctx)
 	struct kbase_vinstr_client *iter;
 	int v4 = 0;
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	v4 = kbase_hw_has_feature(vinstr_ctx->kbdev, BASE_HW_FEATURE_V4);
 #endif
 
@@ -944,7 +944,7 @@ static int kbasep_vinstr_collect_and_accumulate(
 	unsigned long flags;
 	int rcode;
 
-#ifdef CONFIG_MALI_NO_MALI
+#ifdef CONFIG_MALI_BIFROST_NO_MALI
 	/* The dummy model needs the CPU mapping. */
 	gpu_model_set_dummy_prfcnt_base_cpu(vinstr_ctx->cpu_va);
 #endif
@@ -1524,13 +1524,13 @@ static long kbasep_vinstr_hwcnt_reader_ioctl_disable_event(
 static long kbasep_vinstr_hwcnt_reader_ioctl_get_hwver(
 		struct kbase_vinstr_client *cli, u32 __user *hwver)
 {
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	struct kbase_vinstr_context *vinstr_ctx = cli->vinstr_ctx;
 #endif
 
 	u32                         ver = 5;
 
-#ifndef CONFIG_MALI_NO_MALI
+#ifndef CONFIG_MALI_BIFROST_NO_MALI
 	KBASE_DEBUG_ASSERT(vinstr_ctx);
 	if (kbase_hw_has_feature(vinstr_ctx->kbdev, BASE_HW_FEATURE_V4))
 		ver = 4;
diff --git a/drivers/gpu/arm/bifrost/platform/rk/Kbuild b/drivers/gpu/arm/bifrost/platform/rk/Kbuild
index 700fd4341da5..7cc6c59d969f 100755
--- a/drivers/gpu/arm/bifrost/platform/rk/Kbuild
+++ b/drivers/gpu/arm/bifrost/platform/rk/Kbuild
@@ -12,14 +12,6 @@
 #
 #
 
-ccflags-y += -I$(srctree)/drivers/staging/android
+bifrost_kbase-y += \
+	$(MALI_PLATFORM_DIR)/mali_kbase_config_rk.o \
 
-ifeq ($(CONFIG_MALI_MIDGARD),y)
-obj-y += mali_kbase_config_rk.o
-# obj-y += mali_kbase_dvfs.o
-# obj-y += mali_kbase_platform.o
-else ifeq ($(CONFIG_MALI_MIDGARD),m)
-SRC += platform/rk/mali_kbase_config_rk.c
-# SRC += platform/rk/mali_kbase_dvfs.c
-# SRC += platform/rk/mali_kbase_platform.c
-endif
diff --git a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Kconfig b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Kconfig
index f4553d3aa08a..4caa8ec8a0e2 100644
--- a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Kconfig
+++ b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Kconfig
@@ -15,7 +15,7 @@
 
 config MALI_IRQ_LATENCY
  tristate "Mali GPU IRQ latency measurement"
- depends on MALI_MIDGARD && MALI_DEBUG && MALI_KUTF
+ depends on MALI_BIFROST && MALI_BIFROST_DEBUG && MALI_KUTF
  default m
  help
    This option will build a test module mali_kutf_irq_test that
diff --git a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Makefile b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Makefile
index 2ac4f97aa397..ced37b08e532 100644
--- a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Makefile
+++ b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/Makefile
@@ -23,9 +23,9 @@ $(error Must specify KDIR to point to the kernel to target))
 endif
 
 TEST_CCFLAGS := \
-	-DMALI_DEBUG=$(MALI_DEBUG) \
+	-DMALI_DEBUG=$(MALI_BIFROST_DEBUG) \
 	-DMALI_BACKEND_KERNEL=$(MALI_BACKEND_KERNEL) \
-	-DMALI_NO_MALI=$(MALI_NO_MALI) \
+	-DMALI_NO_MALI=$(MALI_BIFROST_NO_MALI) \
 	-DMALI_UNIT_TEST=$(MALI_UNIT_TEST) \
 	-DMALI_USE_UMP=$(MALI_USE_UMP) \
 	-DMALI_ERROR_INJECT_ON=$(MALI_ERROR_INJECT_ON) \
diff --git a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/sconscript b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/sconscript
index 280fa9866957..b06d9ea32924 100644
--- a/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/sconscript
+++ b/drivers/gpu/arm/bifrost/tests/mali_kutf_irq_test/sconscript
@@ -23,7 +23,7 @@ if env.GetOption('clean') :
 	cmd = env.Command('$STATIC_LIB_PATH/mali_kutf_irq_test.ko', src, [])
 	env.KernelObjTarget('mali_kutf_irq_test', cmd)
 else:
-	makeAction=Action("cd ${SOURCE.dir} && make MALI_DEBUG=${debug} MALI_BACKEND_KERNEL=1 MALI_ERROR_INJECT_ON=${error_inject} MALI_NO_MALI=${no_mali} MALI_UNIT_TEST=${unit} MALI_USE_UMP=${ump} MALI_CUSTOMER_RELEASE=${release} %s && ( ( [ -f mali_kutf_irq_test.ko ] && cp mali_kutf_irq_test.ko $STATIC_LIB_PATH/ ) || touch $STATIC_LIB_PATH/mali_kutf_irq_test.ko)" % env.kernel_get_config_defines(), '$MAKECOMSTR')
+	makeAction=Action("cd ${SOURCE.dir} && make MALI_BIFROST_DEBUG=${debug} MALI_BACKEND_KERNEL=1 MALI_ERROR_INJECT_ON=${error_inject} MALI_BIFROST_NO_MALI=${no_mali} MALI_UNIT_TEST=${unit} MALI_USE_UMP=${ump} MALI_CUSTOMER_RELEASE=${release} %s && ( ( [ -f mali_kutf_irq_test.ko ] && cp mali_kutf_irq_test.ko $STATIC_LIB_PATH/ ) || touch $STATIC_LIB_PATH/mali_kutf_irq_test.ko)" % env.kernel_get_config_defines(), '$MAKECOMSTR')
 	cmd = env.Command('$STATIC_LIB_PATH/mali_kutf_irq_test.ko', src, [makeAction])
 	env.Depends('$STATIC_LIB_PATH/mali_kutf_irq_test.ko', '$STATIC_LIB_PATH/kutf.ko')
 	env.Depends('$STATIC_LIB_PATH/mali_kutf_irq_test.ko', '$STATIC_LIB_PATH/mali_kbase.ko')
-- 
2.35.3

