From c99031ad04cc7ade732568b8c96040b51987542d Mon Sep 17 00:00:00 2001
From: Hu Kejun <william.hu@rock-chips.com>
Date: Mon, 14 Sep 2020 09:48:11 +0800
Subject: [PATCH] media: rockchip: cif: add more error log to debug

Signed-off-by: Hu Kejun <william.hu@rock-chips.com>
Change-Id: If0d89b1741dca0a5c6bbeb0ae66a472e3a75dc12
---
 drivers/media/platform/rockchip/cif/capture.c |  4 +-
 .../media/platform/rockchip/cif/mipi-csi2.c   | 57 ++++++++++++++-----
 drivers/media/platform/rockchip/cif/regs.h    |  4 +-
 3 files changed, 48 insertions(+), 17 deletions(-)

diff --git a/drivers/media/platform/rockchip/cif/capture.c b/drivers/media/platform/rockchip/cif/capture.c
index f2b758699e5d..72c6fca5a3c6 100644
--- a/drivers/media/platform/rockchip/cif/capture.c
+++ b/drivers/media/platform/rockchip/cif/capture.c
@@ -1184,8 +1184,8 @@ static void rkcif_assign_new_buffer_pingpong(struct rkcif_stream *stream,
 			rkcif_write_register(dev, frm_addr_y, dummy_buf->dma_addr);
 			if (stream->cif_fmt_out->fmt_type != CIF_FMT_TYPE_RAW)
 				rkcif_write_register(dev, frm_addr_uv, dummy_buf->dma_addr);
-			v4l2_dbg(1, rkcif_debug, &dev->v4l2_dev,
-				 "frame Drop to dummy buf\n");
+			v4l2_info(&dev->v4l2_dev,
+				 "frame drop to dummy buf, stream id %d\n", stream->id);
 		}
 	}
 }
diff --git a/drivers/media/platform/rockchip/cif/mipi-csi2.c b/drivers/media/platform/rockchip/cif/mipi-csi2.c
index ca4ebbe0a05a..9c96875850b8 100644
--- a/drivers/media/platform/rockchip/cif/mipi-csi2.c
+++ b/drivers/media/platform/rockchip/cif/mipi-csi2.c
@@ -117,6 +117,18 @@ struct csi2_dev {
 #define CSIHOST_MSK2		0x2c
 #define CSIHOST_CONTROL		0x40
 
+#define CSIHOST_ERR1_PHYERR_SPTSYNCHS	0x0000000f
+#define CSIHOST_ERR1_ERR_BNDRY_MATCH	0x000000f0
+#define CSIHOST_ERR1_ERR_SEQ		0x00000f00
+#define CSIHOST_ERR1_ERR_FRM_DATA	0x0000f000
+#define CSIHOST_ERR1_ERR_CRC		0x1f000000
+
+#define CSIHOST_ERR2_PHYERR_ESC		0x0000000f
+#define CSIHOST_ERR2_PHYERR_SOTHS	0x000000f0
+#define CSIHOST_ERR2_ECC_CORRECTED	0x00000f00
+#define CSIHOST_ERR2_ERR_ID		0x0000f000
+#define CSIHOST_ERR2_PHYERR_CODEHS	0x01000000
+
 #define SW_CPHY_EN(x)		((x) << 0)
 #define SW_DSI_EN(x)		((x) << 4)
 #define SW_DATATYPE_FS(x)	((x) << 8)
@@ -628,19 +640,27 @@ static irqreturn_t rk_csirx_irq1_handler(int irq, void *ctx)
 {
 	struct device *dev = ctx;
 	struct csi2_dev *csi2 = sd_to_dev(dev_get_drvdata(dev));
-	static int csi_err1_cnt;
 	u32 val;
 
 	val = read_csihost_reg(csi2->base, CSIHOST_ERR1);
 	if (val) {
 		write_csihost_reg(csi2->base,
 				  CSIHOST_ERR1, 0x0);
-		if (++csi_err1_cnt > CSIHOST_MAX_ERRINT_COUNT) {
-			v4l2_err(&csi2->sd, "mask csi2 host msk1!\n");
-			write_csihost_reg(csi2->base,
-					  CSIHOST_MSK1, 0xffffffff);
-			csi_err1_cnt = 0;
-		}
+		if (val & CSIHOST_ERR1_PHYERR_SPTSYNCHS)
+			v4l2_err(&csi2->sd,
+				 "start of transmission error(no synchronization achieved), reg: 0x%x\n",
+				 val);
+		if (val & CSIHOST_ERR1_ERR_BNDRY_MATCH)
+			v4l2_err(&csi2->sd,
+				 "error matching frame start with frame end, reg: 0x%x\n",
+				 val);
+		if (val & CSIHOST_ERR1_ERR_SEQ)
+			v4l2_err(&csi2->sd, "incorrect frame sequence detected, reg: 0x%x\n", val);
+		if (val & CSIHOST_ERR1_ERR_FRM_DATA)
+			v4l2_dbg(1, csi2_debug, &csi2->sd,
+				 "at least one crc error, reg: 0x%x\n", val);
+		if (val & CSIHOST_ERR1_ERR_CRC)
+			v4l2_err(&csi2->sd, "crc errors, reg: 0x%x\n", val);
 	}
 
 	return IRQ_HANDLED;
@@ -650,17 +670,26 @@ static irqreturn_t rk_csirx_irq2_handler(int irq, void *ctx)
 {
 	struct device *dev = ctx;
 	struct csi2_dev *csi2 = sd_to_dev(dev_get_drvdata(dev));
-	static int csi_err2_cnt;
 	u32 val;
 
 	val = read_csihost_reg(csi2->base, CSIHOST_ERR2);
 	if (val) {
-		if (++csi_err2_cnt > CSIHOST_MAX_ERRINT_COUNT) {
-			v4l2_err(&csi2->sd, "mask csi2 host msk2!\n");
-			write_csihost_reg(csi2->base,
-					  CSIHOST_MSK2, 0xffffffff);
-			csi_err2_cnt = 0;
-		}
+		if (val & CSIHOST_ERR2_PHYERR_ESC)
+			v4l2_err(&csi2->sd, "escape entry error(ULPM), reg: 0x%x\n", val);
+		if (val & CSIHOST_ERR2_PHYERR_SOTHS)
+			v4l2_err(&csi2->sd,
+				 "start of transmission error(synchronization can still be achieved), reg: 0x%x\n",
+				 val);
+		if (val & CSIHOST_ERR2_ECC_CORRECTED)
+			v4l2_dbg(1, csi2_debug, &csi2->sd,
+				 "header error detected and corrected, reg: 0x%x\n",
+				 val);
+		if (val & CSIHOST_ERR2_ERR_ID)
+			v4l2_err(&csi2->sd,
+				 "unrecognized or unimplemented data type detected, reg: 0x%x\n",
+				 val);
+		if (val & CSIHOST_ERR2_PHYERR_CODEHS)
+			v4l2_err(&csi2->sd, "receiv error code, reg: 0x%x\n", val);
 	}
 
 	return IRQ_HANDLED;
diff --git a/drivers/media/platform/rockchip/cif/regs.h b/drivers/media/platform/rockchip/cif/regs.h
index fba627f6ef12..17a0476d3dbc 100644
--- a/drivers/media/platform/rockchip/cif/regs.h
+++ b/drivers/media/platform/rockchip/cif/regs.h
@@ -470,7 +470,9 @@ enum cif_reg_index {
 #define CSI_FIFO_OVERFLOW	(CSI_DMA_Y_FIFO_OVERFLOW |	\
 				 CSI_DMA_UV_FIFO_OVERFLOW |	\
 				 CSI_CONFIG_FIFO_OVERFLOW |	\
-				 CSI_RX_FIFO_OVERFLOW)
+				 CSI_RX_FIFO_OVERFLOW |	\
+				 CSI_DMA_LVDS_ID2_FIFO_OVERFLOW |	\
+				 CSI_DMA_LVDS_ID3_FIFO_OVERFLOW)
 /* CIF_MIPI_LVDS_CTRL */
 #define CIF_MIPI_LVDS_SW_DMA_IDLE		(0x1 << 16)
 #define CIF_MIPI_LVDS_SW_PRESS_VALUE(val)	(((val) & 0x3) << 13)
-- 
2.35.3

