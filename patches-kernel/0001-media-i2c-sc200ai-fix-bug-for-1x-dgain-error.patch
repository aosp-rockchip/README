From 6e31f87379679ea1525572485f3d8359de94f6bd Mon Sep 17 00:00:00 2001
From: Zhenke Fan <fanzy.fan@rock-chips.com>
Date: Mon, 14 Dec 2020 15:50:31 +0800
Subject: [PATCH] media: i2c: sc200ai: fix bug for 1x dgain error

fix bug the hdr parameter reset by __v4l2_ctrl_handler_setup
fix the max gain
replace the hightemp function with write register 0x5799

Signed-off-by: Zhenke Fan <fanzy.fan@rock-chips.com>
Change-Id: Ie348b550583d7113e243115c5bbf944e80c0378d
---
 drivers/media/i2c/sc200ai.c | 151 +++++-------------------------------
 1 file changed, 21 insertions(+), 130 deletions(-)

diff --git a/drivers/media/i2c/sc200ai.c b/drivers/media/i2c/sc200ai.c
index 8bd2161f4739..9f5e098aaba2 100644
--- a/drivers/media/i2c/sc200ai.c
+++ b/drivers/media/i2c/sc200ai.c
@@ -71,7 +71,7 @@
 #define SC200AI_REG_SANA_GAIN		0x3e12
 #define SC200AI_REG_SANA_FINE_GAIN	0x3e13
 #define SC200AI_GAIN_MIN		0x0040
-#define SC200AI_GAIN_MAX		((4284 * 315 / 1000) * 64)
+#define SC200AI_GAIN_MAX		(54 * 32 * 64)       //53.975*31.75*64
 #define SC200AI_GAIN_STEP		1
 #define SC200AI_GAIN_DEFAULT		0x0800
 #define SC200AI_LGAIN			0
@@ -616,124 +616,6 @@ static int sc200ai_read_reg(struct i2c_client *client, u16 reg, unsigned int len
 	return 0;
 }
 
-static int sc200ai_set_hightemp_dpc(struct sc200ai *sc200ai, u32 gain)
-{
-	u32 temp_H1, temp_H2, temp_L, temp;
-	static int flag = 1;
-	static int frmcount = 1;
-	int ret = 0;
-
-	if (frmcount < 4) {
-		frmcount++;
-	} else {
-		ret = sc200ai_read_reg(sc200ai->client, SC200AI_REG_HIGH_TEMP_H,
-				       SC200AI_REG_VALUE_08BIT, &temp_H1);
-		ret |= sc200ai_read_reg(sc200ai->client, SC200AI_REG_HIGH_TEMP_L,
-					SC200AI_REG_VALUE_08BIT, &temp_L);
-		temp = (temp_H1 << 8) | temp_L;
-		ret |= sc200ai_read_reg(sc200ai->client, SC200AI_REG_HIGH_TEMP_H,
-					SC200AI_REG_VALUE_08BIT, &temp_H2);
-		if (temp_H1 == temp_H2) {
-			if (temp > 0x2040 || gain >= 53 * 1024) {
-				if (temp > 0x2040) {
-					if (flag != 2) {
-						ret |= sc200ai_write_reg(sc200ai->client,
-								SC200AI_REG_GROUP_HOLD,
-								SC200AI_REG_VALUE_08BIT,
-								SC200AI_GROUP_HOLD_START);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5787,
-								SC200AI_REG_VALUE_08BIT,
-								0x00);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5788,
-								SC200AI_REG_VALUE_08BIT,
-								0x00);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5790,
-								SC200AI_REG_VALUE_08BIT,
-								0x00);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5791,
-								SC200AI_REG_VALUE_08BIT,
-								0x00);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5799,
-								SC200AI_REG_VALUE_08BIT,
-								0x07);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								SC200AI_REG_GROUP_HOLD,
-								SC200AI_REG_VALUE_08BIT,
-								SC200AI_GROUP_HOLD_END);
-						flag = 2;
-					} else if (flag != 3) {
-						ret |= sc200ai_write_reg(sc200ai->client,
-								SC200AI_REG_GROUP_HOLD,
-								SC200AI_REG_VALUE_08BIT,
-								SC200AI_GROUP_HOLD_START);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5787,
-								SC200AI_REG_VALUE_08BIT,
-								0x10);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5788,
-								SC200AI_REG_VALUE_08BIT,
-								0x06);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5790,
-								SC200AI_REG_VALUE_08BIT,
-								0x10);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5791,
-								SC200AI_REG_VALUE_08BIT,
-								0x10);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								0x5799,
-								SC200AI_REG_VALUE_08BIT,
-								0x07);
-						ret |= sc200ai_write_reg(sc200ai->client,
-								SC200AI_REG_GROUP_HOLD,
-								SC200AI_REG_VALUE_08BIT,
-								SC200AI_GROUP_HOLD_END);
-						flag = 3;
-					}
-				}
-			} else if (temp < 0x2030 && gain <= 53 * 1024 && flag != 1) {
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 SC200AI_REG_GROUP_HOLD,
-							 SC200AI_REG_VALUE_08BIT,
-							 SC200AI_GROUP_HOLD_START);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 0x5787,
-							 SC200AI_REG_VALUE_08BIT,
-							 0x10);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 0x5788,
-							 SC200AI_REG_VALUE_08BIT,
-							 0x06);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 0x5790,
-							 SC200AI_REG_VALUE_08BIT,
-							 0x10);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 0x5791,
-							 SC200AI_REG_VALUE_08BIT,
-							 0x10);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 0x5799,
-							 SC200AI_REG_VALUE_08BIT,
-							 0x00);
-				ret |= sc200ai_write_reg(sc200ai->client,
-							 SC200AI_REG_GROUP_HOLD,
-							 SC200AI_REG_VALUE_08BIT,
-							SC200AI_GROUP_HOLD_END);
-				flag = 1;
-			}
-		}
-	}
-	return ret;
-}
-
 /* mode: 0 = lgain  1 = sgain */
 static int sc200ai_set_gain_reg(struct sc200ai *sc200ai, u32 gain, int mode)
 {
@@ -795,6 +677,7 @@ static int sc200ai_set_gain_reg(struct sc200ai *sc200ai, u32 gain, int mode)
 		Dcg_gainx100 = 340;
 		Coarse_gain = 8;
 		DIG_gain = 1;
+		ANA_Fine_gainx64 = 127;
 		Coarse_gain_reg = 0x3f;
 		DIG_gain_reg = 0x0;
 		ANA_Fine_gain_reg = 0x7f;
@@ -878,7 +761,16 @@ static int sc200ai_set_gain_reg(struct sc200ai *sc200ai, u32 gain, int mode)
 					 ANA_Fine_gain_reg);
 	}
 
-	ret |= sc200ai_set_hightemp_dpc(sc200ai, gain);
+	if (gain <= 20 * 1024)
+		ret |= sc200ai_write_reg(sc200ai->client,
+					 0x5799,
+					 SC200AI_REG_VALUE_08BIT,
+					 0x0);
+	else if (gain >= 30 * 1024)
+		ret |= sc200ai_write_reg(sc200ai->client,
+					 0x5799,
+					 SC200AI_REG_VALUE_08BIT,
+					 0x07);
 
 	return ret;
 }
@@ -1078,17 +970,19 @@ static int sc200ai_enum_frame_sizes(struct v4l2_subdev *sd,
 
 static int sc200ai_enable_test_pattern(struct sc200ai *sc200ai, u32 pattern)
 {
-	u32 val;
+	u32 val = 0;
+	int ret = 0;
 
-	sc200ai_read_reg(sc200ai->client, SC200AI_REG_TEST_PATTERN,
+	ret = sc200ai_read_reg(sc200ai->client, SC200AI_REG_TEST_PATTERN,
 			       SC200AI_REG_VALUE_08BIT, &val);
 	if (pattern)
 		val |= SC200AI_TEST_PATTERN_BIT_MASK;
 	else
 		val &= ~SC200AI_TEST_PATTERN_BIT_MASK;
 
-	return sc200ai_write_reg(sc200ai->client, SC200AI_REG_TEST_PATTERN,
+	ret |= sc200ai_write_reg(sc200ai->client, SC200AI_REG_TEST_PATTERN,
 				 SC200AI_REG_VALUE_08BIT, val);
+	return ret;
 }
 
 static int sc200ai_g_frame_interval(struct v4l2_subdev *sd,
@@ -1294,6 +1188,9 @@ static int __sc200ai_start_stream(struct sc200ai *sc200ai)
 		return ret;
 
 	/* In case these controls are set before streaming */
+	ret = __v4l2_ctrl_handler_setup(&sc200ai->ctrl_handler);
+	if (ret)
+		return ret;
 	if (sc200ai->has_init_exp && sc200ai->cur_mode->hdr_mode != NO_HDR) {
 		ret = sc200ai_ioctl(&sc200ai->subdev, PREISP_CMD_SET_HDRAE_EXP,
 			&sc200ai->init_hdrae_exp);
@@ -1303,12 +1200,6 @@ static int __sc200ai_start_stream(struct sc200ai *sc200ai)
 			return ret;
 		}
 	}
-	mutex_unlock(&sc200ai->mutex);
-	ret = v4l2_ctrl_handler_setup(&sc200ai->ctrl_handler);
-	mutex_lock(&sc200ai->mutex);
-	if (ret)
-		return ret;
-
 
 	return sc200ai_write_reg(sc200ai->client, SC200AI_REG_CTRL_MODE,
 				 SC200AI_REG_VALUE_08BIT, SC200AI_MODE_STREAMING);
@@ -1675,7 +1566,7 @@ static int sc200ai_initialize_controls(struct sc200ai *sc200ai)
 
 	handler = &sc200ai->ctrl_handler;
 	mode = sc200ai->cur_mode;
-	ret = v4l2_ctrl_handler_init(handler, 8);
+	ret = v4l2_ctrl_handler_init(handler, 9);
 	if (ret)
 		return ret;
 	handler->lock = &sc200ai->mutex;
-- 
2.35.3

