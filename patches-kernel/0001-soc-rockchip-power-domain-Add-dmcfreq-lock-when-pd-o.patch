From aea534352597b41be56f892277e57412c36a8fd7 Mon Sep 17 00:00:00 2001
From: Finley Xiao <finley.xiao@rock-chips.com>
Date: Mon, 21 Oct 2019 15:03:14 +0800
Subject: [PATCH] soc: rockchip: power-domain: Add dmcfreq lock when pd on/off

In order to fix deadlock between dmcfreq and vop on/off,
When change vop status and ddr frequency at the same time,
the following deadlock will happen:

vop no/off                            dmcfreq
vop_crtc_disable                      update_devfreq
->mutex_lock(&vop->vop_lock);         ->mutex_lock(&pd->pmu->mutex);
->pm_runtime_put(vop->dev);           ->mutex_lock(&vop->vop_lock);
  ->mutex_lock(&pd->pmu->mutex);      ...

Change-Id: I56a4ee944200826d2a09e3ae8d2f4837f6f769d6
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
---
 drivers/soc/rockchip/pm_domains.c | 37 +++++++++++++++++++++----------
 1 file changed, 25 insertions(+), 12 deletions(-)

diff --git a/drivers/soc/rockchip/pm_domains.c b/drivers/soc/rockchip/pm_domains.c
index 4c619496c68d..bcf67c5ca574 100644
--- a/drivers/soc/rockchip/pm_domains.c
+++ b/drivers/soc/rockchip/pm_domains.c
@@ -22,6 +22,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/regulator/consumer.h>
 #include <soc/rockchip/pm_domains.h>
+#include <soc/rockchip/rockchip_dmc.h>
 #include <dt-bindings/power/px30-power.h>
 #include <dt-bindings/power/rk1808-power.h>
 #include <dt-bindings/power/rk3036-power.h>
@@ -94,6 +95,18 @@ struct rockchip_pmu {
 
 static struct rockchip_pmu *g_pmu;
 
+static void rockchip_pmu_lock(struct rockchip_pm_domain *pd)
+{
+	mutex_lock(&pd->pmu->mutex);
+	rockchip_dmcfreq_lock();
+}
+
+static void rockchip_pmu_unlock(struct rockchip_pm_domain *pd)
+{
+	rockchip_dmcfreq_unlock();
+	mutex_unlock(&pd->pmu->mutex);
+}
+
 #define to_rockchip_pd(gpd) container_of(gpd, struct rockchip_pm_domain, genpd)
 
 #define DOMAIN(pwr, status, req, idle, ack, wakeup, keepon)	\
@@ -239,9 +252,9 @@ int rockchip_pmu_idle_request(struct device *dev, bool idle)
 	genpd = pd_to_genpd(dev->pm_domain);
 	pd = to_rockchip_pd(genpd);
 
-	mutex_lock(&pd->pmu->mutex);
+	rockchip_pmu_lock(pd);
 	ret = rockchip_pmu_set_idle_request(pd, idle);
-	mutex_unlock(&pd->pmu->mutex);
+	rockchip_pmu_unlock(pd);
 
 	return ret;
 }
@@ -311,9 +324,9 @@ int rockchip_save_qos(struct device *dev)
 	genpd = pd_to_genpd(dev->pm_domain);
 	pd = to_rockchip_pd(genpd);
 
-	mutex_lock(&pd->pmu->mutex);
+	rockchip_pmu_lock(pd);
 	ret = rockchip_pmu_save_qos(pd);
-	mutex_unlock(&pd->pmu->mutex);
+	rockchip_pmu_unlock(pd);
 
 	return ret;
 }
@@ -334,9 +347,9 @@ int rockchip_restore_qos(struct device *dev)
 	genpd = pd_to_genpd(dev->pm_domain);
 	pd = to_rockchip_pd(genpd);
 
-	mutex_lock(&pd->pmu->mutex);
+	rockchip_pmu_lock(pd);
 	ret = rockchip_pmu_restore_qos(pd);
-	mutex_unlock(&pd->pmu->mutex);
+	rockchip_pmu_unlock(pd);
 
 	return ret;
 }
@@ -398,7 +411,7 @@ static int rockchip_pd_power(struct rockchip_pm_domain *pd, bool power_on)
 	int ret = 0;
 	struct generic_pm_domain *genpd = &pd->genpd;
 
-	mutex_lock(&pmu->mutex);
+	rockchip_pmu_lock(pd);
 
 	if (rockchip_pmu_domain_is_on(pd) != power_on) {
 		if (IS_ERR_OR_NULL(pd->supply) &&
@@ -411,7 +424,7 @@ static int rockchip_pd_power(struct rockchip_pm_domain *pd, bool power_on)
 			if (ret < 0) {
 				dev_err(pd->pmu->dev, "failed to set vdd supply enable '%s',\n",
 					genpd->name);
-				mutex_unlock(&pmu->mutex);
+				rockchip_pmu_unlock(pd);
 				return ret;
 			}
 		}
@@ -419,7 +432,7 @@ static int rockchip_pd_power(struct rockchip_pm_domain *pd, bool power_on)
 		ret = clk_bulk_enable(pd->num_clks, pd->clks);
 		if (ret < 0) {
 			dev_err(pmu->dev, "failed to enable clocks\n");
-			mutex_unlock(&pmu->mutex);
+			rockchip_pmu_unlock(pd);
 			return ret;
 		}
 
@@ -463,7 +476,7 @@ static int rockchip_pd_power(struct rockchip_pm_domain *pd, bool power_on)
 			ret = regulator_disable(pd->supply);
 	}
 
-	mutex_unlock(&pmu->mutex);
+	rockchip_pmu_unlock(pd);
 	return ret;
 }
 
@@ -695,9 +708,9 @@ static void rockchip_pm_remove_one_domain(struct rockchip_pm_domain *pd)
 	clk_bulk_put(pd->num_clks, pd->clks);
 
 	/* protect the zeroing of pm->num_clks */
-	mutex_lock(&pd->pmu->mutex);
+	rockchip_pmu_lock(pd);
 	pd->num_clks = 0;
-	mutex_unlock(&pd->pmu->mutex);
+	rockchip_pmu_unlock(pd);
 
 	/* devm will free our memory */
 }
-- 
2.35.3

