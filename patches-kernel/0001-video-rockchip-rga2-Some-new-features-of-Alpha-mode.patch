From 3265071d3b0c870b34f5dc952f134a4a6d1225d9 Mon Sep 17 00:00:00 2001
From: Yu Qiaowei <cerf.yu@rock-chips.com>
Date: Tue, 8 Dec 2020 10:43:34 +0800
Subject: [PATCH] video/rockchip: rga2: Some new features of Alpha mode.

1. Support colorkey.
2. Support blend mode to restore real color.

Signed-off-by: Yu Qiaowei <cerf.yu@rock-chips.com>
Change-Id: I8eb6e60d4b9d3c5b6cc280e33edb9f0f3f08f2e2
---
 drivers/video/rockchip/rga2/rga2_reg_info.c | 26 +++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/drivers/video/rockchip/rga2/rga2_reg_info.c b/drivers/video/rockchip/rga2/rga2_reg_info.c
index 8caefb626cc4..cc4505b2bf94 100644
--- a/drivers/video/rockchip/rga2/rga2_reg_info.c
+++ b/drivers/video/rockchip/rga2/rga2_reg_info.c
@@ -1168,6 +1168,8 @@ void RGA_MSG_2_RGA2_MSG(struct rga_req *req_rga, struct rga2_req *req)
     req->rop_mode = req_rga->alpha_rop_mode;
 
     req->color_fill_mode = req_rga->color_fill_mode;
+    req->alpha_zero_key = req_rga->alpha_rop_mode >> 4;
+    req->src_trans_mode = req_rga->src_trans_mode;
     req->color_key_min   = req_rga->color_key_min;
     req->color_key_max   = req_rga->color_key_max;
 
@@ -1233,8 +1235,8 @@ void RGA_MSG_2_RGA2_MSG(struct rga_req *req_rga, struct rga2_req *req)
                     req->alpha_mode_1 = alpha_mode_1;
                     break;
                 case 4: //dst = (sc*(256-da) + 256*dc) >> 8
-                    req->alpha_mode_0 = 0x1232;
-                    req->alpha_mode_1 = 0x1232;
+                    req->alpha_mode_0 = 0x1A3A;
+                    req->alpha_mode_1 = 0x1A3A;
                     break;
                 case 5: //dst = (da*sc) >> 8
                     break;
@@ -1259,6 +1261,13 @@ void RGA_MSG_2_RGA2_MSG(struct rga_req *req_rga, struct rga2_req *req)
                 default:
                     break;
             }
+            /* Real color mode */
+            if ((req_rga->alpha_rop_flag >> 9) & 1) {
+                if (req->alpha_mode_0 & (0x01 << 1))
+                    req->alpha_mode_0 |= (1 << 7);
+                if (req->alpha_mode_0 & (0x01 << 9))
+                    req->alpha_mode_0 |= (1 << 15);
+            }
         }
         else {
             if((req_rga->alpha_rop_mode & 3) == 0) {
@@ -1391,6 +1400,8 @@ void RGA_MSG_2_RGA2_MSG_32(struct rga_req_32 *req_rga, struct rga2_req *req)
     req->rop_code = req_rga->rop_code;
     req->rop_mode = req_rga->alpha_rop_mode;
     req->color_fill_mode = req_rga->color_fill_mode;
+    req->alpha_zero_key = req_rga->alpha_rop_mode >> 4;
+    req->src_trans_mode = req_rga->src_trans_mode;
     req->color_key_min   = req_rga->color_key_min;
     req->color_key_max   = req_rga->color_key_max;
     req->fg_color = req_rga->fg_color;
@@ -1446,8 +1457,8 @@ void RGA_MSG_2_RGA2_MSG_32(struct rga_req_32 *req_rga, struct rga2_req *req)
                     req->alpha_mode_1 = alpha_mode_1;
                     break;
                 case 4: //dst = (sc*(256-da) + 256*dc) >> 8
-                    req->alpha_mode_0 = 0x1232;
-                    req->alpha_mode_1 = 0x1232;
+                    req->alpha_mode_0 = 0x1A3A;
+                    req->alpha_mode_1 = 0x1A3A;
                     break;
                 case 5: //dst = (da*sc) >> 8
                     break;
@@ -1472,6 +1483,13 @@ void RGA_MSG_2_RGA2_MSG_32(struct rga_req_32 *req_rga, struct rga2_req *req)
                 default:
                     break;
             }
+            /* Real color mode */
+            if ((req_rga->alpha_rop_flag >> 9) & 1) {
+                if (req->alpha_mode_0 & (0x01 << 1))
+                    req->alpha_mode_0 |= (1 << 7);
+                if (req->alpha_mode_0 & (0x01 << 9))
+                    req->alpha_mode_0 |= (1 << 15);
+            }
         }
         else {
             if((req_rga->alpha_rop_mode & 3) == 0) {
-- 
2.35.3

