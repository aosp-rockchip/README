From a35ac3b32cb0873410d45105774382160a0b6d6d Mon Sep 17 00:00:00 2001
From: Wyon Bi <bivvy.bi@rock-chips.com>
Date: Tue, 8 Oct 2019 09:46:06 +0800
Subject: [PATCH] drm/rockchip: lvds: Convert to generic phy interface

Change-Id: I93a60a89b7e84c69627e6d4f555af7a70f47e479
Signed-off-by: Wyon Bi <bivvy.bi@rock-chips.com>
---
 .../display/rockchip/rockchip-lvds.txt        |  75 +--
 drivers/gpu/drm/rockchip/rockchip_lvds.c      | 553 ++++++------------
 drivers/gpu/drm/rockchip/rockchip_lvds.h      | 114 ----
 3 files changed, 204 insertions(+), 538 deletions(-)
 delete mode 100644 drivers/gpu/drm/rockchip/rockchip_lvds.h

diff --git a/Documentation/devicetree/bindings/display/rockchip/rockchip-lvds.txt b/Documentation/devicetree/bindings/display/rockchip/rockchip-lvds.txt
index da6939efdb43..a1fcccbc5074 100644
--- a/Documentation/devicetree/bindings/display/rockchip/rockchip-lvds.txt
+++ b/Documentation/devicetree/bindings/display/rockchip/rockchip-lvds.txt
@@ -4,23 +4,12 @@ Rockchip RK3288 LVDS interface
 Required properties:
 - compatible: matching the soc type, one of
 	- "rockchip,rk3288-lvds";
-
-- reg: physical base address of the controller and length
-	of memory mapped region.
-- clocks: must include clock specifiers corresponding to entries in the
-	clock-names property.
-- clock-names: must contain "pclk_lvds"
-
-- avdd1v0-supply: regulator phandle for 1.0V analog power
-- avdd1v8-supply: regulator phandle for 1.8V analog power
-- avdd3v3-supply: regulator phandle for 3.3V analog power
-
-- rockchip,grf: phandle to the general register files syscon
-- rockchip,output: "rgb", "lvds" or "duallvds", This describes the output interface
+- phys : phandle for the PHY device
+- phy-names : should be "phy"
 
 Optional properties:
-- pinctrl-names: must contain a "lcdc" entry.
-- pinctrl-0: pin control group to be used for this controller.
+- dual-channel: boolean. if it exists, enable dual channel mode
+- rockchip,data-swap: boolean to enable odd/even data swap in dual channel mode
 
 Required nodes:
 
@@ -32,68 +21,36 @@ Their connections are modeled using the OF graph bindings specified in
 - video port 0 for the VOP input, the remote endpoint maybe vopb or vopl
 - video port 1 for either a panel or subsequent encoder
 
-the lvds panel described by
-	Documentation/devicetree/bindings/display/panel/simple-panel.txt
-
-Panel required properties:
-- ports for remote LVDS output
-
-Panel optional properties:
-- data-mapping: should be "vesa-24","jeida-24" or "jeida-18".
-This describes decribed by:
-	Documentation/devicetree/bindings/display/panel/panel-lvds.txt
-
 Example:
 
-lvds_panel: lvds-panel {
-	compatible = "auo,b101ean01";
-	enable-gpios = <&gpio7 21 GPIO_ACTIVE_HIGH>;
-	data-mapping = "jeida-24";
-
-	ports {
-		panel_in_lvds: endpoint {
-			remote-endpoint = <&lvds_out_panel>;
-		};
-	};
-};
-
-For Rockchip RK3288:
+&grf {
+	status = "okay";
 
-	lvds: lvds@ff96c000 {
+	lvds: lvds {
 		compatible = "rockchip,rk3288-lvds";
-		rockchip,grf = <&grf>;
-		reg = <0xff96c000 0x4000>;
-		clocks = <&cru PCLK_LVDS_PHY>;
-		clock-names = "pclk_lvds";
-		pinctrl-names = "lcdc";
-		pinctrl-0 = <&lcdc_ctl>;
-		avdd1v0-supply = <&vdd10_lcd>;
-		avdd1v8-supply = <&vcc18_lcd>;
-		avdd3v3-supply = <&vcca_33>;
-		rockchip,output = "rgb";
+		phys = <&video_phy>;
+		phy-names = "phy";
+		status = "disabled";
+
 		ports {
 			#address-cells = <1>;
 			#size-cells = <0>;
 
-			lvds_in: port@0 {
+			port@0 {
 				reg = <0>;
+				#address-cells = <1>;
+				#size-cells = <0>;
 
 				lvds_in_vopb: endpoint@0 {
 					reg = <0>;
 					remote-endpoint = <&vopb_out_lvds>;
 				};
+
 				lvds_in_vopl: endpoint@1 {
 					reg = <1>;
 					remote-endpoint = <&vopl_out_lvds>;
 				};
 			};
-
-			lvds_out: port@1 {
-				reg = <1>;
-
-				lvds_out_panel: endpoint {
-					remote-endpoint = <&panel_in_lvds>;
-				};
-			};
 		};
 	};
+};
diff --git a/drivers/gpu/drm/rockchip/rockchip_lvds.c b/drivers/gpu/drm/rockchip/rockchip_lvds.c
index 03b0c727765d..6d0aaf55417c 100644
--- a/drivers/gpu/drm/rockchip/rockchip_lvds.c
+++ b/drivers/gpu/drm/rockchip/rockchip_lvds.c
@@ -14,185 +14,77 @@
  * GNU General Public License for more details.
  */
 
-#include <drm/drmP.h>
 #include <drm/drm_atomic_helper.h>
 #include <drm/drm_crtc_helper.h>
-#include <drm/drm_dp_helper.h>
 #include <drm/drm_panel.h>
 #include <drm/drm_of.h>
 
 #include <linux/component.h>
-#include <linux/clk.h>
 #include <linux/mfd/syscon.h>
+#include <linux/of_device.h>
 #include <linux/of_graph.h>
-#include <linux/pinctrl/devinfo.h>
-#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
-#include <linux/reset.h>
+#include <linux/phy/phy.h>
 
 #include "rockchip_drm_drv.h"
 #include "rockchip_drm_vop.h"
-#include "rockchip_lvds.h"
 
-#define DISPLAY_OUTPUT_RGB		0
-#define DISPLAY_OUTPUT_LVDS		1
-#define DISPLAY_OUTPUT_DUAL_LVDS	2
-
-#define connector_to_lvds(c) \
-		container_of(c, struct rockchip_lvds, connector)
+#define HIWORD_UPDATE(v, h, l)  (((v) << (l)) | (GENMASK(h, l) << 16))
+
+#define RK3288_GRF_SOC_CON6		0x025c
+#define RK3288_LVDS_LCDC_SEL(x)		HIWORD_UPDATE(x,  3,  3)
+#define RK3288_GRF_SOC_CON7		0x0260
+#define RK3288_LVDS_PWRDWN(x)		HIWORD_UPDATE(x, 15, 15)
+#define RK3288_LVDS_CON_ENABLE_2(x)	HIWORD_UPDATE(x, 12, 12)
+#define RK3288_LVDS_CON_ENABLE_1(x)	HIWORD_UPDATE(x, 11, 11)
+#define RK3288_LVDS_CON_DEN_POL(x)	HIWORD_UPDATE(x, 10, 10)
+#define RK3288_LVDS_CON_HS_POL(x)	HIWORD_UPDATE(x,  9,  9)
+#define RK3288_LVDS_CON_CLKINV(x)	HIWORD_UPDATE(x,  8,  8)
+#define RK3288_LVDS_CON_STARTPHASE(x)	HIWORD_UPDATE(x,  7,  7)
+#define RK3288_LVDS_CON_TTL_EN(x)	HIWORD_UPDATE(x,  6,  6)
+#define RK3288_LVDS_CON_STARTSEL(x)	HIWORD_UPDATE(x,  5,  5)
+#define RK3288_LVDS_CON_CHASEL(x)	HIWORD_UPDATE(x,  4,  4)
+#define RK3288_LVDS_CON_MSBSEL(x)	HIWORD_UPDATE(x,  3,  3)
+#define RK3288_LVDS_CON_SELECT(x)	HIWORD_UPDATE(x,  2,  0)
+
+enum lvds_format {
+	LVDS_8BIT_MODE_FORMAT_1,
+	LVDS_8BIT_MODE_FORMAT_2,
+	LVDS_8BIT_MODE_FORMAT_3,
+	LVDS_6BIT_MODE,
+};
 
-#define encoder_to_lvds(c) \
-		container_of(c, struct rockchip_lvds, encoder)
+struct rockchip_lvds;
 
-/**
- * rockchip_lvds_soc_data - rockchip lvds Soc private data
- * @ch1_offset: lvds channel 1 registe offset
- * grf_soc_con6: general registe offset for LVDS contrl
- * grf_soc_con7: general registe offset for LVDS contrl
- * has_vop_sel: to indicate whether need to choose from different VOP.
- */
-struct rockchip_lvds_soc_data {
-	u32 ch1_offset;
-	int grf_soc_con6;
-	int grf_soc_con7;
-	bool has_vop_sel;
+struct rockchip_lvds_funcs {
+	void (*enable)(struct rockchip_lvds *lvds);
+	void (*disable)(struct rockchip_lvds *lvds);
 };
 
 struct rockchip_lvds {
 	struct device *dev;
-	void __iomem *regs;
+	struct phy *phy;
 	struct regmap *grf;
-	struct clk *pclk;
-	const struct rockchip_lvds_soc_data *soc_data;
-	int output; /* rgb lvds or dual lvds output */
-	int format; /* vesa or jeida format */
-	struct drm_device *drm_dev;
+	const struct rockchip_lvds_funcs *funcs;
+	enum lvds_format format;
+	bool data_swap;
+	bool dual_channel;
+
 	struct drm_panel *panel;
 	struct drm_bridge *bridge;
 	struct drm_connector connector;
 	struct drm_encoder encoder;
-	struct dev_pin_info *pins;
+	struct drm_display_mode mode;
 };
 
-static inline void lvds_writel(struct rockchip_lvds *lvds, u32 offset, u32 val)
-{
-	writel_relaxed(val, lvds->regs + offset);
-	if (lvds->output == DISPLAY_OUTPUT_LVDS)
-		return;
-	writel_relaxed(val, lvds->regs + offset + lvds->soc_data->ch1_offset);
-}
-
-static inline int lvds_name_to_format(const char *s)
-{
-	if (strncmp(s, "jeida-18", 8) == 0)
-		return LVDS_JEIDA_18;
-	else if (strncmp(s, "jeida-24", 8) == 0)
-		return LVDS_JEIDA_24;
-	else if (strncmp(s, "vesa-24", 7) == 0)
-		return LVDS_VESA_24;
-
-	return -EINVAL;
-}
-
-static inline int lvds_name_to_output(const char *s)
-{
-	if (strncmp(s, "rgb", 3) == 0)
-		return DISPLAY_OUTPUT_RGB;
-	else if (strncmp(s, "lvds", 4) == 0)
-		return DISPLAY_OUTPUT_LVDS;
-	else if (strncmp(s, "duallvds", 8) == 0)
-		return DISPLAY_OUTPUT_DUAL_LVDS;
-
-	return -EINVAL;
-}
-
-static int rockchip_lvds_poweron(struct rockchip_lvds *lvds)
+static inline struct rockchip_lvds *connector_to_lvds(struct drm_connector *c)
 {
-	int ret;
-	u32 val;
-
-	ret = clk_enable(lvds->pclk);
-	if (ret < 0) {
-		DRM_DEV_ERROR(lvds->dev, "failed to enable lvds pclk %d\n", ret);
-		return ret;
-	}
-	ret = pm_runtime_get_sync(lvds->dev);
-	if (ret < 0) {
-		DRM_DEV_ERROR(lvds->dev, "failed to get pm runtime: %d\n", ret);
-		clk_disable(lvds->pclk);
-		return ret;
-	}
-	val = RK3288_LVDS_CH0_REG0_LANE4_EN | RK3288_LVDS_CH0_REG0_LANE3_EN |
-		RK3288_LVDS_CH0_REG0_LANE2_EN | RK3288_LVDS_CH0_REG0_LANE1_EN |
-		RK3288_LVDS_CH0_REG0_LANE0_EN;
-	if (lvds->output == DISPLAY_OUTPUT_RGB) {
-		val |= RK3288_LVDS_CH0_REG0_TTL_EN |
-			RK3288_LVDS_CH0_REG0_LANECK_EN;
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG0, val);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG2,
-			    RK3288_LVDS_PLL_FBDIV_REG2(0x46));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG4,
-			    RK3288_LVDS_CH0_REG4_LANECK_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE4_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE3_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE2_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE1_TTL_MODE |
-			    RK3288_LVDS_CH0_REG4_LANE0_TTL_MODE);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG5,
-			    RK3288_LVDS_CH0_REG5_LANECK_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE4_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE3_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE2_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE1_TTL_DATA |
-			    RK3288_LVDS_CH0_REG5_LANE0_TTL_DATA);
-	} else {
-		val |= RK3288_LVDS_CH0_REG0_LVDS_EN |
-			    RK3288_LVDS_CH0_REG0_LANECK_EN;
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG0, val);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG1,
-			    RK3288_LVDS_CH0_REG1_LANECK_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE4_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE3_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE2_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE1_BIAS |
-			    RK3288_LVDS_CH0_REG1_LANE0_BIAS);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG2,
-			    RK3288_LVDS_CH0_REG2_RESERVE_ON |
-			    RK3288_LVDS_CH0_REG2_LANECK_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE4_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE3_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE2_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE1_LVDS_MODE |
-			    RK3288_LVDS_CH0_REG2_LANE0_LVDS_MODE |
-			    RK3288_LVDS_PLL_FBDIV_REG2(0x46));
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG4, 0x00);
-		lvds_writel(lvds, RK3288_LVDS_CH0_REG5, 0x00);
-	}
-	lvds_writel(lvds, RK3288_LVDS_CH0_REG3, RK3288_LVDS_PLL_FBDIV_REG3(0x46));
-	lvds_writel(lvds, RK3288_LVDS_CH0_REGD, RK3288_LVDS_PLL_PREDIV_REGD(0x0a));
-	lvds_writel(lvds, RK3288_LVDS_CH0_REG20, RK3288_LVDS_CH0_REG20_LSB);
-
-	lvds_writel(lvds, RK3288_LVDS_CFG_REGC, RK3288_LVDS_CFG_REGC_PLL_ENABLE);
-	lvds_writel(lvds, RK3288_LVDS_CFG_REG21, RK3288_LVDS_CFG_REG21_TX_ENABLE);
-
-	return 0;
+	return container_of(c, struct rockchip_lvds, connector);
 }
 
-static void rockchip_lvds_poweroff(struct rockchip_lvds *lvds)
+static inline struct rockchip_lvds *encoder_to_lvds(struct drm_encoder *e)
 {
-	int ret;
-	u32 val;
-
-	lvds_writel(lvds, RK3288_LVDS_CFG_REG21, RK3288_LVDS_CFG_REG21_TX_ENABLE);
-	lvds_writel(lvds, RK3288_LVDS_CFG_REGC, RK3288_LVDS_CFG_REGC_PLL_ENABLE);
-	val = LVDS_DUAL | LVDS_TTL_EN | LVDS_CH0_EN | LVDS_CH1_EN | LVDS_PWRDN;
-	val |= val << 16;
-	ret = regmap_write(lvds->grf, lvds->soc_data->grf_soc_con7, val);
-	if (ret != 0)
-		DRM_DEV_ERROR(lvds->dev, "Could not write to GRF: %d\n", ret);
-
-	pm_runtime_put(lvds->dev);
-	clk_disable(lvds->pclk);
+	return container_of(e, struct rockchip_lvds, encoder);
 }
 
 static const struct drm_connector_funcs rockchip_lvds_connector_funcs = {
@@ -216,60 +108,36 @@ struct drm_connector_helper_funcs rockchip_lvds_connector_helper_funcs = {
 	.get_modes = rockchip_lvds_connector_get_modes,
 };
 
-static void rockchip_lvds_grf_config(struct drm_encoder *encoder,
-				     struct drm_display_mode *mode)
+static void
+rockchip_lvds_encoder_atomic_mode_set(struct drm_encoder *encoder,
+				      struct drm_crtc_state *crtc_state,
+				      struct drm_connector_state *conn_state)
 {
 	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
-	u8 pin_hsync = (mode->flags & DRM_MODE_FLAG_PHSYNC) ? 1 : 0;
-	u8 pin_dclk = (mode->flags & DRM_MODE_FLAG_PCSYNC) ? 1 : 0;
-	u32 val;
-	int ret;
-
-	/* iomux to LCD data/sync mode */
-	if (lvds->output == DISPLAY_OUTPUT_RGB)
-		if (lvds->pins && !IS_ERR(lvds->pins->default_state))
-			pinctrl_select_state(lvds->pins->p,
-					     lvds->pins->default_state);
-	val = lvds->format | LVDS_CH0_EN;
-	if (lvds->output == DISPLAY_OUTPUT_RGB)
-		val |= LVDS_TTL_EN | LVDS_CH1_EN;
-	else if (lvds->output == DISPLAY_OUTPUT_DUAL_LVDS)
-		val |= LVDS_DUAL | LVDS_CH1_EN;
-
-	if ((mode->htotal - mode->hsync_start) & 0x01)
-		val |= LVDS_START_PHASE_RST_1;
-
-	val |= (pin_dclk << 8) | (pin_hsync << 9);
-	val |= (0xffff << 16);
-	ret = regmap_write(lvds->grf, lvds->soc_data->grf_soc_con7, val);
-	if (ret != 0) {
-		DRM_DEV_ERROR(lvds->dev, "Could not write to GRF: %d\n", ret);
-		return;
+	struct drm_connector *connector = &lvds->connector;
+	struct drm_display_info *info = &connector->display_info;
+	u32 bus_format = MEDIA_BUS_FMT_RGB888_1X7X4_SPWG;
+
+	if (info->num_bus_formats)
+		bus_format = info->bus_formats[0];
+
+	switch (bus_format) {
+	case MEDIA_BUS_FMT_RGB666_1X7X3_JEIDA:	/* jeida-18 */
+		lvds->format = LVDS_6BIT_MODE;
+		break;
+	case MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA:	/* jeida-24 */
+		lvds->format = LVDS_8BIT_MODE_FORMAT_2;
+		break;
+	case MEDIA_BUS_FMT_RGB666_1X7X3_SPWG:	/* vesa-18 */
+		lvds->format = LVDS_8BIT_MODE_FORMAT_3;
+		break;
+	case MEDIA_BUS_FMT_RGB888_1X7X4_SPWG:	/* vesa-24 */
+	default:
+		lvds->format = LVDS_8BIT_MODE_FORMAT_1;
+		break;
 	}
-}
-
-static int rockchip_lvds_set_vop_source(struct rockchip_lvds *lvds,
-					struct drm_encoder *encoder)
-{
-	u32 val;
-	int ret;
-
-	if (!lvds->soc_data->has_vop_sel)
-		return 0;
-
-	ret = drm_of_encoder_active_endpoint_id(lvds->dev->of_node, encoder);
-	if (ret < 0)
-		return ret;
-
-	val = RK3288_LVDS_SOC_CON6_SEL_VOP_LIT << 16;
-	if (ret)
-		val |= RK3288_LVDS_SOC_CON6_SEL_VOP_LIT;
-
-	ret = regmap_write(lvds->grf, lvds->soc_data->grf_soc_con6, val);
-	if (ret < 0)
-		return ret;
 
-	return 0;
+	drm_mode_copy(&lvds->mode, &crtc_state->adjusted_mode);
 }
 
 static int
@@ -278,6 +146,13 @@ rockchip_lvds_encoder_atomic_check(struct drm_encoder *encoder,
 				   struct drm_connector_state *conn_state)
 {
 	struct rockchip_crtc_state *s = to_rockchip_crtc_state(crtc_state);
+	struct drm_connector *connector = conn_state->connector;
+	struct drm_display_info *info = &connector->display_info;
+
+	if (info->num_bus_formats)
+		s->bus_format = info->bus_formats[0];
+	else
+		s->bus_format = MEDIA_BUS_FMT_RGB888_1X7X4_SPWG;
 
 	s->output_mode = ROCKCHIP_OUT_MODE_P888;
 	s->output_type = DRM_MODE_CONNECTOR_LVDS;
@@ -289,27 +164,40 @@ rockchip_lvds_encoder_atomic_check(struct drm_encoder *encoder,
 static void rockchip_lvds_encoder_enable(struct drm_encoder *encoder)
 {
 	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
-	struct drm_display_mode *mode = &encoder->crtc->state->adjusted_mode;
 	int ret;
 
-	drm_panel_prepare(lvds->panel);
-	ret = rockchip_lvds_poweron(lvds);
-	if (ret < 0) {
-		DRM_DEV_ERROR(lvds->dev, "failed to power on lvds: %d\n", ret);
-		drm_panel_unprepare(lvds->panel);
+	if (lvds->panel)
+		drm_panel_prepare(lvds->panel);
+
+	ret = phy_set_mode(lvds->phy, PHY_MODE_VIDEO_LVDS);
+	if (ret) {
+		DRM_DEV_ERROR(lvds->dev, "failed to set phy mode: %d\n", ret);
+		return;
 	}
-	rockchip_lvds_grf_config(encoder, mode);
-	rockchip_lvds_set_vop_source(lvds, encoder);
-	drm_panel_enable(lvds->panel);
+
+	phy_power_on(lvds->phy);
+
+	if (lvds->funcs->enable)
+		lvds->funcs->enable(lvds);
+
+	if (lvds->panel)
+		drm_panel_enable(lvds->panel);
 }
 
 static void rockchip_lvds_encoder_disable(struct drm_encoder *encoder)
 {
 	struct rockchip_lvds *lvds = encoder_to_lvds(encoder);
 
-	drm_panel_disable(lvds->panel);
-	rockchip_lvds_poweroff(lvds);
-	drm_panel_unprepare(lvds->panel);
+	if (lvds->panel)
+		drm_panel_disable(lvds->panel);
+
+	if (lvds->funcs->disable)
+		lvds->funcs->disable(lvds);
+
+	phy_power_off(lvds->phy);
+
+	if (lvds->panel)
+		drm_panel_unprepare(lvds->panel);
 }
 
 static const
@@ -317,113 +205,43 @@ struct drm_encoder_helper_funcs rockchip_lvds_encoder_helper_funcs = {
 	.enable = rockchip_lvds_encoder_enable,
 	.disable = rockchip_lvds_encoder_disable,
 	.atomic_check = rockchip_lvds_encoder_atomic_check,
+	.atomic_mode_set = rockchip_lvds_encoder_atomic_mode_set,
 };
 
 static const struct drm_encoder_funcs rockchip_lvds_encoder_funcs = {
 	.destroy = drm_encoder_cleanup,
 };
 
-static const struct rockchip_lvds_soc_data rk3288_lvds_data = {
-	.ch1_offset = 0x100,
-	.grf_soc_con6 = 0x025c,
-	.grf_soc_con7 = 0x0260,
-	.has_vop_sel = true,
-};
-
-static const struct of_device_id rockchip_lvds_dt_ids[] = {
-	{
-		.compatible = "rockchip,rk3288-lvds",
-		.data = &rk3288_lvds_data
-	},
-	{}
-};
-MODULE_DEVICE_TABLE(of, rockchip_lvds_dt_ids);
-
 static int rockchip_lvds_bind(struct device *dev, struct device *master,
 			      void *data)
 {
 	struct rockchip_lvds *lvds = dev_get_drvdata(dev);
 	struct drm_device *drm_dev = data;
-	struct drm_encoder *encoder;
-	struct drm_connector *connector;
-	struct device_node *remote = NULL;
-	struct device_node  *port, *endpoint;
-	int ret = 0, child_count = 0;
-	const char *name;
-	u32 endpoint_id;
-
-	lvds->drm_dev = drm_dev;
-	port = of_graph_get_port_by_id(dev->of_node, 1);
-	if (!port) {
-		DRM_DEV_ERROR(dev,
-			      "can't found port point, please init lvds panel port!\n");
-		return -EINVAL;
-	}
-	for_each_child_of_node(port, endpoint) {
-		child_count++;
-		of_property_read_u32(endpoint, "reg", &endpoint_id);
-		ret = drm_of_find_panel_or_bridge(dev->of_node, 1, endpoint_id,
-						  &lvds->panel, &lvds->bridge);
-		if (!ret) {
-			of_node_put(endpoint);
-			break;
-		}
-	}
-	if (!child_count) {
-		DRM_DEV_ERROR(dev, "lvds port does not have any children\n");
-		ret = -EINVAL;
-		goto err_put_port;
-	} else if (ret) {
-		DRM_DEV_ERROR(dev, "failed to find panel and bridge node\n");
-		ret = -EPROBE_DEFER;
-		goto err_put_port;
-	}
-	if (lvds->panel)
-		remote = lvds->panel->dev->of_node;
-	else
-		remote = lvds->bridge->of_node;
-	if (of_property_read_string(dev->of_node, "rockchip,output", &name))
-		/* default set it as output rgb */
-		lvds->output = DISPLAY_OUTPUT_RGB;
-	else
-		lvds->output = lvds_name_to_output(name);
-
-	if (lvds->output < 0) {
-		DRM_DEV_ERROR(dev, "invalid output type [%s]\n", name);
-		ret = lvds->output;
-		goto err_put_remote;
-	}
-
-	if (of_property_read_string(remote, "data-mapping", &name))
-		/* default set it as format vesa 18 */
-		lvds->format = LVDS_VESA_18;
-	else
-		lvds->format = lvds_name_to_format(name);
+	struct drm_encoder *encoder = &lvds->encoder;
+	struct drm_connector *connector = &lvds->connector;
+	int ret;
 
-	if (lvds->format < 0) {
-		DRM_DEV_ERROR(dev, "invalid data-mapping format [%s]\n", name);
-		ret = lvds->format;
-		goto err_put_remote;
-	}
+	ret = drm_of_find_panel_or_bridge(dev->of_node, 1, -1,
+					  &lvds->panel, &lvds->bridge);
+	if (ret)
+		return ret;
 
-	encoder = &lvds->encoder;
 	encoder->possible_crtcs = drm_of_find_possible_crtcs(drm_dev,
 							     dev->of_node);
 
 	ret = drm_encoder_init(drm_dev, encoder, &rockchip_lvds_encoder_funcs,
 			       DRM_MODE_ENCODER_LVDS, NULL);
 	if (ret < 0) {
-		DRM_DEV_ERROR(drm_dev->dev,
+		DRM_DEV_ERROR(lvds->dev,
 			      "failed to initialize encoder: %d\n", ret);
-		goto err_put_remote;
+		return ret;
 	}
 
 	drm_encoder_helper_add(encoder, &rockchip_lvds_encoder_helper_funcs);
 
 	if (lvds->panel) {
-		connector = &lvds->connector;
-		connector->dpms = DRM_MODE_DPMS_OFF;
 		connector->port = dev->of_node;
+
 		ret = drm_connector_init(drm_dev, connector,
 					 &rockchip_lvds_connector_funcs,
 					 DRM_MODE_CONNECTOR_LVDS);
@@ -438,41 +256,32 @@ static int rockchip_lvds_bind(struct device *dev, struct device *master,
 
 		ret = drm_connector_attach_encoder(connector, encoder);
 		if (ret < 0) {
-			DRM_DEV_ERROR(drm_dev->dev,
+			DRM_DEV_ERROR(lvds->dev,
 				      "failed to attach encoder: %d\n", ret);
 			goto err_free_connector;
 		}
 
 		ret = drm_panel_attach(lvds->panel, connector);
 		if (ret < 0) {
-			DRM_DEV_ERROR(drm_dev->dev,
+			DRM_DEV_ERROR(lvds->dev,
 				      "failed to attach panel: %d\n", ret);
 			goto err_free_connector;
 		}
 	} else {
 		ret = drm_bridge_attach(encoder, lvds->bridge, NULL);
 		if (ret) {
-			DRM_DEV_ERROR(drm_dev->dev,
+			DRM_DEV_ERROR(lvds->dev,
 				      "failed to attach bridge: %d\n", ret);
 			goto err_free_encoder;
 		}
 	}
 
-	pm_runtime_enable(dev);
-	of_node_put(remote);
-	of_node_put(port);
-
 	return 0;
 
 err_free_connector:
 	drm_connector_cleanup(connector);
 err_free_encoder:
 	drm_encoder_cleanup(encoder);
-err_put_remote:
-	of_node_put(remote);
-err_put_port:
-	of_node_put(port);
-
 	return ret;
 }
 
@@ -481,11 +290,11 @@ static void rockchip_lvds_unbind(struct device *dev, struct device *master,
 {
 	struct rockchip_lvds *lvds = dev_get_drvdata(dev);
 
-	rockchip_lvds_encoder_disable(&lvds->encoder);
-	if (lvds->panel)
+	if (lvds->panel) {
 		drm_panel_detach(lvds->panel);
-	pm_runtime_disable(dev);
-	drm_connector_cleanup(&lvds->connector);
+		drm_connector_cleanup(&lvds->connector);
+	}
+
 	drm_encoder_cleanup(&lvds->encoder);
 }
 
@@ -498,87 +307,101 @@ static int rockchip_lvds_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct rockchip_lvds *lvds;
-	const struct of_device_id *match;
-	struct resource *res;
 	int ret;
 
 	if (!dev->of_node)
 		return -ENODEV;
 
-	lvds = devm_kzalloc(&pdev->dev, sizeof(*lvds), GFP_KERNEL);
+	lvds = devm_kzalloc(dev, sizeof(*lvds), GFP_KERNEL);
 	if (!lvds)
 		return -ENOMEM;
 
 	lvds->dev = dev;
-	match = of_match_node(rockchip_lvds_dt_ids, dev->of_node);
-	if (!match)
-		return -ENODEV;
-	lvds->soc_data = match->data;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	lvds->regs = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(lvds->regs))
-		return PTR_ERR(lvds->regs);
-
-	lvds->pclk = devm_clk_get(&pdev->dev, "pclk_lvds");
-	if (IS_ERR(lvds->pclk)) {
-		DRM_DEV_ERROR(dev, "could not get pclk_lvds\n");
-		return PTR_ERR(lvds->pclk);
-	}
-
-	lvds->pins = devm_kzalloc(lvds->dev, sizeof(*lvds->pins),
-				  GFP_KERNEL);
-	if (!lvds->pins)
-		return -ENOMEM;
-
-	lvds->pins->p = devm_pinctrl_get(lvds->dev);
-	if (IS_ERR(lvds->pins->p)) {
-		DRM_DEV_ERROR(dev, "no pinctrl handle\n");
-		devm_kfree(lvds->dev, lvds->pins);
-		lvds->pins = NULL;
-	} else {
-		lvds->pins->default_state =
-			pinctrl_lookup_state(lvds->pins->p, "lcdc");
-		if (IS_ERR(lvds->pins->default_state)) {
-			DRM_DEV_ERROR(dev, "no default pinctrl state\n");
-			devm_kfree(lvds->dev, lvds->pins);
-			lvds->pins = NULL;
-		}
+	lvds->funcs = of_device_get_match_data(dev);
+	platform_set_drvdata(pdev, lvds);
+
+	lvds->dual_channel = of_property_read_bool(dev->of_node,
+						   "dual-channel");
+	lvds->data_swap = of_property_read_bool(dev->of_node,
+						"rockchip,data-swap");
+
+	lvds->phy = devm_phy_get(dev, "phy");
+	if (IS_ERR(lvds->phy)) {
+		ret = PTR_ERR(lvds->phy);
+		DRM_DEV_ERROR(dev, "failed to get phy: %d\n", ret);
+		return ret;
 	}
 
-	lvds->grf = syscon_regmap_lookup_by_phandle(dev->of_node,
-						    "rockchip,grf");
+	lvds->grf = syscon_node_to_regmap(dev->parent->of_node);
 	if (IS_ERR(lvds->grf)) {
-		DRM_DEV_ERROR(dev, "missing rockchip,grf property\n");
-		return PTR_ERR(lvds->grf);
-	}
-
-	dev_set_drvdata(dev, lvds);
-
-	ret = clk_prepare(lvds->pclk);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "failed to prepare pclk_lvds\n");
+		ret = PTR_ERR(lvds->grf);
+		DRM_DEV_ERROR(dev, "Unable to get grf: %d\n", ret);
 		return ret;
 	}
-	ret = component_add(&pdev->dev, &rockchip_lvds_component_ops);
-	if (ret < 0) {
-		DRM_DEV_ERROR(dev, "failed to add component\n");
-		clk_unprepare(lvds->pclk);
-	}
 
-	return ret;
+	return component_add(dev, &rockchip_lvds_component_ops);
 }
 
 static int rockchip_lvds_remove(struct platform_device *pdev)
 {
-	struct rockchip_lvds *lvds = dev_get_drvdata(&pdev->dev);
-
 	component_del(&pdev->dev, &rockchip_lvds_component_ops);
-	clk_unprepare(lvds->pclk);
 
 	return 0;
 }
 
+static void rk3288_lvds_enable(struct rockchip_lvds *lvds)
+{
+	struct drm_display_mode *mode = &lvds->mode;
+	int pipe;
+	u32 val;
+
+	pipe = drm_of_encoder_active_endpoint_id(lvds->dev->of_node,
+						 &lvds->encoder);
+	regmap_write(lvds->grf, RK3288_GRF_SOC_CON6,
+		     RK3288_LVDS_LCDC_SEL(pipe));
+
+	val = RK3288_LVDS_PWRDWN(0) | RK3288_LVDS_CON_CLKINV(0) |
+	      RK3288_LVDS_CON_CHASEL(lvds->dual_channel) |
+	      RK3288_LVDS_CON_SELECT(lvds->format);
+
+	if (lvds->dual_channel) {
+		u32 h_bp = mode->htotal - mode->hsync_start;
+
+		val |= RK3288_LVDS_CON_ENABLE_2(1) |
+		       RK3288_LVDS_CON_ENABLE_1(1) |
+		       RK3288_LVDS_CON_STARTSEL(lvds->data_swap);
+
+		if (h_bp % 2)
+			val |= RK3288_LVDS_CON_STARTPHASE(1);
+		else
+			val |= RK3288_LVDS_CON_STARTPHASE(0);
+
+	} else {
+		val |= RK3288_LVDS_CON_ENABLE_2(0) |
+		       RK3288_LVDS_CON_ENABLE_1(1);
+	}
+
+	regmap_write(lvds->grf, RK3288_GRF_SOC_CON7, val);
+
+	phy_set_bus_width(lvds->phy, lvds->dual_channel ? 2 : 1);
+}
+
+static void rk3288_lvds_disable(struct rockchip_lvds *lvds)
+{
+	regmap_write(lvds->grf, RK3288_GRF_SOC_CON7, RK3288_LVDS_PWRDWN(1));
+}
+
+static const struct rockchip_lvds_funcs rk3288_lvds_funcs = {
+	.enable = rk3288_lvds_enable,
+	.disable = rk3288_lvds_disable,
+};
+
+static const struct of_device_id rockchip_lvds_dt_ids[] = {
+	{ .compatible = "rockchip,rk3288-lvds", .data = &rk3288_lvds_funcs },
+	{}
+};
+MODULE_DEVICE_TABLE(of, rockchip_lvds_dt_ids);
+
 struct platform_driver rockchip_lvds_driver = {
 	.probe = rockchip_lvds_probe,
 	.remove = rockchip_lvds_remove,
diff --git a/drivers/gpu/drm/rockchip/rockchip_lvds.h b/drivers/gpu/drm/rockchip/rockchip_lvds.h
deleted file mode 100644
index 15810b737809..000000000000
--- a/drivers/gpu/drm/rockchip/rockchip_lvds.h
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) Fuzhou Rockchip Electronics Co.Ltd
- * Author:
- *      Sandy Huang <hjc@rock-chips.com>
- *      Mark Yao <mark.yao@rock-chips.com>
- *
- * This software is licensed under the terms of the GNU General Public
- * License version 2, as published by the Free Software Foundation, and
- * may be copied, distributed, and modified under those terms.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#ifndef _ROCKCHIP_LVDS_
-#define _ROCKCHIP_LVDS_
-
-#define RK3288_LVDS_CH0_REG0			0x00
-#define RK3288_LVDS_CH0_REG0_LVDS_EN		BIT(7)
-#define RK3288_LVDS_CH0_REG0_TTL_EN		BIT(6)
-#define RK3288_LVDS_CH0_REG0_LANECK_EN		BIT(5)
-#define RK3288_LVDS_CH0_REG0_LANE4_EN		BIT(4)
-#define RK3288_LVDS_CH0_REG0_LANE3_EN		BIT(3)
-#define RK3288_LVDS_CH0_REG0_LANE2_EN		BIT(2)
-#define RK3288_LVDS_CH0_REG0_LANE1_EN		BIT(1)
-#define RK3288_LVDS_CH0_REG0_LANE0_EN		BIT(0)
-
-#define RK3288_LVDS_CH0_REG1			0x04
-#define RK3288_LVDS_CH0_REG1_LANECK_BIAS	BIT(5)
-#define RK3288_LVDS_CH0_REG1_LANE4_BIAS		BIT(4)
-#define RK3288_LVDS_CH0_REG1_LANE3_BIAS		BIT(3)
-#define RK3288_LVDS_CH0_REG1_LANE2_BIAS		BIT(2)
-#define RK3288_LVDS_CH0_REG1_LANE1_BIAS		BIT(1)
-#define RK3288_LVDS_CH0_REG1_LANE0_BIAS		BIT(0)
-
-#define RK3288_LVDS_CH0_REG2			0x08
-#define RK3288_LVDS_CH0_REG2_RESERVE_ON		BIT(7)
-#define RK3288_LVDS_CH0_REG2_LANECK_LVDS_MODE	BIT(6)
-#define RK3288_LVDS_CH0_REG2_LANE4_LVDS_MODE	BIT(5)
-#define RK3288_LVDS_CH0_REG2_LANE3_LVDS_MODE	BIT(4)
-#define RK3288_LVDS_CH0_REG2_LANE2_LVDS_MODE	BIT(3)
-#define RK3288_LVDS_CH0_REG2_LANE1_LVDS_MODE	BIT(2)
-#define RK3288_LVDS_CH0_REG2_LANE0_LVDS_MODE	BIT(1)
-#define RK3288_LVDS_CH0_REG2_PLL_FBDIV8		BIT(0)
-
-#define RK3288_LVDS_CH0_REG3			0x0c
-#define RK3288_LVDS_CH0_REG3_PLL_FBDIV_MASK	0xff
-
-#define RK3288_LVDS_CH0_REG4			0x10
-#define RK3288_LVDS_CH0_REG4_LANECK_TTL_MODE	BIT(5)
-#define RK3288_LVDS_CH0_REG4_LANE4_TTL_MODE	BIT(4)
-#define RK3288_LVDS_CH0_REG4_LANE3_TTL_MODE	BIT(3)
-#define RK3288_LVDS_CH0_REG4_LANE2_TTL_MODE	BIT(2)
-#define RK3288_LVDS_CH0_REG4_LANE1_TTL_MODE	BIT(1)
-#define RK3288_LVDS_CH0_REG4_LANE0_TTL_MODE	BIT(0)
-
-#define RK3288_LVDS_CH0_REG5			0x14
-#define RK3288_LVDS_CH0_REG5_LANECK_TTL_DATA	BIT(5)
-#define RK3288_LVDS_CH0_REG5_LANE4_TTL_DATA	BIT(4)
-#define RK3288_LVDS_CH0_REG5_LANE3_TTL_DATA	BIT(3)
-#define RK3288_LVDS_CH0_REG5_LANE2_TTL_DATA	BIT(2)
-#define RK3288_LVDS_CH0_REG5_LANE1_TTL_DATA	BIT(1)
-#define RK3288_LVDS_CH0_REG5_LANE0_TTL_DATA	BIT(0)
-
-#define RK3288_LVDS_CFG_REGC			0x30
-#define RK3288_LVDS_CFG_REGC_PLL_ENABLE		0x00
-#define RK3288_LVDS_CFG_REGC_PLL_DISABLE	0xff
-
-#define RK3288_LVDS_CH0_REGD			0x34
-#define RK3288_LVDS_CH0_REGD_PLL_PREDIV_MASK	0x1f
-
-#define RK3288_LVDS_CH0_REG20			0x80
-#define RK3288_LVDS_CH0_REG20_MSB		0x45
-#define RK3288_LVDS_CH0_REG20_LSB		0x44
-
-#define RK3288_LVDS_CFG_REG21			0x84
-#define RK3288_LVDS_CFG_REG21_TX_ENABLE		0x92
-#define RK3288_LVDS_CFG_REG21_TX_DISABLE	0x00
-#define RK3288_LVDS_CH1_OFFSET                 0x100
-
-/* fbdiv value is split over 2 registers, with bit8 in reg2 */
-#define RK3288_LVDS_PLL_FBDIV_REG2(_fbd) \
-		(_fbd & BIT(8) ? RK3288_LVDS_CH0_REG2_PLL_FBDIV8 : 0)
-#define RK3288_LVDS_PLL_FBDIV_REG3(_fbd) \
-		(_fbd & RK3288_LVDS_CH0_REG3_PLL_FBDIV_MASK)
-#define RK3288_LVDS_PLL_PREDIV_REGD(_pd) \
-		(_pd & RK3288_LVDS_CH0_REGD_PLL_PREDIV_MASK)
-
-#define RK3288_LVDS_SOC_CON6_SEL_VOP_LIT	BIT(3)
-
-#define LVDS_FMT_MASK				(0x07 << 16)
-#define LVDS_MSB				BIT(3)
-#define LVDS_DUAL				BIT(4)
-#define LVDS_FMT_1				BIT(5)
-#define LVDS_TTL_EN				BIT(6)
-#define LVDS_START_PHASE_RST_1			BIT(7)
-#define LVDS_DCLK_INV				BIT(8)
-#define LVDS_CH0_EN				BIT(11)
-#define LVDS_CH1_EN				BIT(12)
-#define LVDS_PWRDN				BIT(15)
-
-#define LVDS_24BIT				(0 << 1)
-#define LVDS_18BIT				(1 << 1)
-#define LVDS_FORMAT_VESA			(0 << 0)
-#define LVDS_FORMAT_JEIDA			(1 << 0)
-
-#define LVDS_VESA_24				0
-#define LVDS_JEIDA_24				1
-#define LVDS_VESA_18				2
-#define LVDS_JEIDA_18				3
-
-#endif /* _ROCKCHIP_LVDS_ */
-- 
2.35.3

