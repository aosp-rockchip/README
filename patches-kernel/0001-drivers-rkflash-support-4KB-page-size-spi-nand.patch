From 30c6c39d9087131f421061da93ddb0313984a860 Mon Sep 17 00:00:00 2001
From: Jon Lin <jon.lin@rock-chips.com>
Date: Fri, 19 Apr 2019 15:32:07 +0800
Subject: [PATCH] drivers: rkflash: support 4KB page size spi nand

1.support 4KB page size spi nand
2.add new spi nand: ATO25D1GA, XT26G02B, XT26G01B, HYF4GQ4UAACBE

Change-Id: I35f357ccec4d7977bbb10f2d647d1a2a1f8cedca
Signed-off-by: Jon Lin <jon.lin@rock-chips.com>
---
 drivers/rkflash/rk_sftl_arm_v7.S       | 6448 +++++++++++------------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S | 6683 ++++++++++++------------
 drivers/rkflash/rk_sftl_arm_v8.S       | 4928 +++++++++--------
 drivers/rkflash/sfc_nand.c             |   51 +-
 drivers/rkflash/sfc_nand.h             |    3 +-
 5 files changed, 8913 insertions(+), 9200 deletions(-)

diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index 15b5561482fe..905f8627cd48 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -1,14 +1,10 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2019-03-26
+ * date: 2019-04-19
  */
 	.file	"rk_sftl.c"
-	.syntax divided
-	.syntax unified
 	.global	__udivsi3
-	.arm
-	.syntax unified
 	.text
 	.align	2
 	.syntax unified
@@ -251,54 +247,57 @@ FtlConstantsInit:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r3, r0
-	ldr	r4, .L28
-	movw	ip, #262
-	ldrh	r1, [r0]
-	ldrh	r6, [r0, #2]
+	ldr	r4, .L32
+	movw	r5, #262
+	ldrh	r0, [r0]
+	ldrh	r6, [r3, #2]
 	add	r2, r4, #256
-	ldrh	r0, [r0, #4]
-	strh	r1, [r2]	@ movhi
+	ldrh	ip, [r3, #14]
+	strh	r0, [r2]	@ movhi
 	movw	r2, #258
 	strh	r6, [r4, r2]	@ movhi
-	add	r2, r4, #260
-	ldrh	lr, [r3, #14]
-	strh	r0, [r2]	@ movhi
+	add	r1, r4, #260
+	ldrh	lr, [r3, #4]
+	cmp	ip, #4
 	ldrh	r2, [r3, #6]
-	cmp	lr, #4
-	strh	lr, [r4, ip]	@ movhi
+	strh	ip, [r4, r5]	@ movhi
+	strh	lr, [r1]	@ movhi
 	strh	r2, [r4, #246]	@ movhi
-	lsreq	r2, r2, #1
-	strheq	r2, [r4, #246]	@ movhi
-	moveq	r2, #8
-	strheq	r2, [r4, ip]	@ movhi
-	mov	r2, #0
-	ldr	ip, .L28+4
+	bne	.L19
+	lsr	r2, r2, #1
+	strh	r2, [r4, #246]	@ movhi
+	mov	r2, #8
+	strh	r2, [r4, r5]	@ movhi
 .L20:
+	ldr	ip, .L32+4
+	mov	r2, #0
+.L21:
 	strb	r2, [r2, ip]
 	add	r2, r2, #1
 	cmp	r2, #32
-	bne	.L20
-	ldrh	r5, [r4, #246]
-	smulbb	r6, r6, r0
-	ldr	r8, .L28+8
-	cmp	r1, #1
-	ldr	r2, .L28+12
+	bne	.L21
+	ldr	r2, .L32+8
+	cmp	r0, #1
 	mov	ip, #5
-	uxth	r6, r6
+	ldrh	r5, [r4, #246]
+	ldr	r8, .L32+12
 	mov	lr, #0
-	smulbb	r0, r0, r5
-	mov	r7, r8
 	strh	ip, [r2]	@ movhi
 	movw	ip, #298
-	strheq	r1, [r2]	@ movhi
+	strheq	r0, [r2]	@ movhi
 	mov	r2, #640
-	uxth	r0, r0
+	ldrh	r0, [r1]
+	mov	r7, r8
 	strh	r2, [r7], #4	@ movhi
 	movw	r2, #302
 	strh	lr, [r4, ip]	@ movhi
 	str	r3, [fp, #-44]
-	strh	r0, [r4, r2]	@ movhi
+	smulbb	r6, r6, r0
+	smulbb	r0, r0, r5
+	uxth	r6, r6
+	uxth	r0, r0
 	strh	r6, [r4, #236]	@ movhi
+	strh	r0, [r4, r2]	@ movhi
 	bl	Ftl_log2
 	ldr	r3, [fp, #-44]
 	movw	r2, #306
@@ -354,7 +353,7 @@ FtlConstantsInit:
 	ldrh	r0, [r8]
 	add	r3, r3, #2
 	strh	r3, [r4, r2]	@ movhi
-	ldr	r3, .L28+16
+	ldr	r3, .L32+16
 	strh	r5, [r3]	@ movhi
 	uxth	r5, r5
 	mul	r3, r6, r5
@@ -379,7 +378,7 @@ FtlConstantsInit:
 	ldrh	r2, [r7]
 	add	r2, r2, #9
 	lsr	r3, r3, r2
-	ldr	r2, .L28+20
+	ldr	r2, .L32+20
 	add	r3, r3, #2
 	strh	r3, [r2]	@ movhi
 	mov	r2, #32
@@ -393,13 +392,21 @@ FtlConstantsInit:
 	str	r3, [r4, #332]
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L29:
+.L19:
+	cmp	lr, #1
+	cmpeq	ip, #8
+	lsreq	r2, r2, #1
+	strheq	r2, [r4, #246]	@ movhi
+	moveq	r2, #2
+	strheq	r2, [r1]	@ movhi
+	b	.L20
+.L33:
 	.align	2
-.L28:
+.L32:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+264
-	.word	.LANCHOR0+300
 	.word	.LANCHOR0+296
+	.word	.LANCHOR0+300
 	.word	.LANCHOR0+328
 	.word	.LANCHOR0+340
 	.size	FtlConstantsInit, .-FtlConstantsInit
@@ -415,7 +422,7 @@ IsBlkInVendorPart:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L36
+	ldr	r3, .L40
 	uxth	r1, r0
 	add	r2, r3, #348
 	ldrh	r0, [r2]
@@ -425,20 +432,20 @@ IsBlkInVendorPart:
 	add	r3, r3, #324
 	ldrh	r3, [r3]
 	add	r3, r2, r3, lsl #1
-.L32:
+.L36:
 	cmp	r2, r3
-	bne	.L33
+	bne	.L37
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L33:
+.L37:
 	ldrh	r0, [r2], #2
 	cmp	r1, r0
-	bne	.L32
+	bne	.L36
 	mov	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L37:
+.L41:
 	.align	2
-.L36:
+.L40:
 	.word	.LANCHOR0
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
@@ -468,12 +475,12 @@ sftl_get_density:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L40
+	ldr	r3, .L44
 	ldr	r0, [r3, #344]
 	ldmfd	sp, {fp, sp, pc}
-.L41:
+.L45:
 	.align	2
-.L40:
+.L44:
 	.word	.LANCHOR0
 	.size	sftl_get_density, .-sftl_get_density
 	.global	__umodsi3
@@ -491,7 +498,7 @@ FtlBbmMapBadBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	movw	r3, #302
-	ldr	r4, .L43
+	ldr	r4, .L47
 	uxth	r5, r0
 	mov	r0, r5
 	ldrh	r7, [r4, r3]
@@ -514,16 +521,16 @@ FtlBbmMapBadBlock:
 	mov	r2, r6
 	str	r1, [sp]
 	mov	r1, r5
-	ldr	r0, .L43+4
+	ldr	r0, .L47+4
 	bl	sftl_printk
 	ldrh	r3, [r4, #6]
 	mov	r0, #0
 	add	r3, r3, #1
 	strh	r3, [r4, #6]	@ movhi
 	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L44:
+.L48:
 	.align	2
-.L43:
+.L47:
 	.word	.LANCHOR0
 	.word	.LC7
 	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
@@ -539,7 +546,7 @@ FtlBbmIsBadBlock:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L46
+	ldr	r5, .L50
 	movw	r3, #302
 	uxth	r6, r0
 	ldrh	r7, [r5, r3]
@@ -559,9 +566,9 @@ FtlBbmIsBadBlock:
 	lsr	r0, r0, r4
 	and	r0, r0, #1
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L47:
+.L51:
 	.align	2
-.L46:
+.L50:
 	.word	.LANCHOR0
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
 	.align	2
@@ -579,6 +586,34 @@ FtlBbtInfoPrint:
 	ldmfd	sp, {fp, sp, pc}
 	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
 	.align	2
+	.global	FtlBbtMemInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r0, .L54
+	mvn	r2, #0
+	mov	r1, #255
+	add	r3, r0, #356
+	add	r0, r0, #368
+	strh	r2, [r3]	@ movhi
+	mov	r2, #0
+	strh	r2, [r3, #6]	@ movhi
+	mov	r2, #16
+	bl	memset
+	ldmfd	sp, {fp, sp, pc}
+.L55:
+	.align	2
+.L54:
+	.word	.LANCHOR0
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
 	.global	FtlBbtCalcTotleCnt
 	.syntax unified
 	.arm
@@ -590,7 +625,7 @@ FtlBbtCalcTotleCnt:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L56
+	ldr	r3, .L63
 	movw	r2, #302
 	movw	r1, #258
 	mov	r5, #0
@@ -598,22 +633,22 @@ FtlBbtCalcTotleCnt:
 	mov	r4, r5
 	ldrh	r6, [r3, r1]
 	mul	r6, r6, r2
-.L50:
+.L57:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L52
+	blt	.L59
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L52:
+.L59:
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	add	r5, r5, #1
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	b	.L50
-.L57:
+	b	.L57
+.L64:
 	.align	2
-.L56:
+.L63:
 	.word	.LANCHOR0
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
 	.align	2
@@ -628,7 +663,7 @@ V2P_block:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L59
+	ldr	r4, .L66
 	uxth	r7, r0
 	uxth	r5, r1
 	add	r3, r4, #260
@@ -647,9 +682,9 @@ V2P_block:
 	add	r0, r4, r0
 	uxth	r0, r0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L60:
+.L67:
 	.align	2
-.L59:
+.L66:
 	.word	.LANCHOR0
 	.size	V2P_block, .-V2P_block
 	.align	2
@@ -664,7 +699,7 @@ P2V_plane:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L62
+	ldr	r3, .L69
 	uxth	r5, r0
 	add	r2, r3, #260
 	mov	r0, r5
@@ -679,9 +714,9 @@ P2V_plane:
 	add	r0, r4, r0
 	uxth	r0, r0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L63:
+.L70:
 	.align	2
-.L62:
+.L69:
 	.word	.LANCHOR0
 	.size	P2V_plane, .-P2V_plane
 	.align	2
@@ -696,7 +731,7 @@ P2V_block_in_plane:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L65
+	ldr	r4, .L72
 	movw	r3, #302
 	uxth	r0, r0
 	ldrh	r1, [r4, r3]
@@ -707,9 +742,9 @@ P2V_block_in_plane:
 	bl	__udivsi3
 	uxth	r0, r0
 	ldmfd	sp, {r4, fp, sp, pc}
-.L66:
+.L73:
 	.align	2
-.L65:
+.L72:
 	.word	.LANCHOR0
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
 	.align	2
@@ -725,13 +760,13 @@ ftl_cmp_data_ver:
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
 	cmp	r0, r1
-	bls	.L68
+	bls	.L75
 	sub	r0, r0, r1
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L68:
+.L75:
 	sub	r0, r1, r0
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -739,6 +774,35 @@ ftl_cmp_data_ver:
 	ldmfd	sp, {fp, sp, pc}
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r2, .L78
+	mov	r4, #0
+	mov	r1, #2048
+	add	r3, r2, #416
+	strh	r0, [r3]	@ movhi
+	add	r0, r2, #424
+	strh	r4, [r3, #2]	@ movhi
+	strh	r4, [r3, #4]	@ movhi
+	strh	r4, [r3, #6]	@ movhi
+	bl	__memzero
+	mov	r0, r4
+	ldmfd	sp, {r4, fp, sp, pc}
+.L79:
+	.align	2
+.L78:
+	.word	.LANCHOR0
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	2
 	.global	FtlFreeSysBlkQueueEmpty
 	.syntax unified
 	.arm
@@ -750,14 +814,14 @@ FtlFreeSysBlkQueueEmpty:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L71
+	ldr	r3, .L81
 	ldrh	r0, [r3, #6]
 	clz	r0, r0
 	lsr	r0, r0, #5
 	ldmfd	sp, {fp, sp, pc}
-.L72:
+.L82:
 	.align	2
-.L71:
+.L81:
 	.word	.LANCHOR0+416
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
 	.align	2
@@ -772,15 +836,15 @@ FtlFreeSysBlkQueueFull:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L74
+	ldr	r3, .L84
 	ldrh	r0, [r3, #6]
 	sub	r0, r0, #1024
 	clz	r0, r0
 	lsr	r0, r0, #5
 	ldmfd	sp, {fp, sp, pc}
-.L75:
+.L85:
 	.align	2
-.L74:
+.L84:
 	.word	.LANCHOR0+416
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
 	.align	2
@@ -795,27 +859,27 @@ FtlFreeSysBLkSort:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L85
+	ldr	r3, .L95
 	ldrh	r2, [r3, #6]
 	cmp	r2, #0
 	ldmfdeq	sp, {r4, fp, sp, pc}
-	ldr	r2, .L85+4
+	ldr	r2, .L95+4
 	mov	r4, #0
 	ldrh	r1, [r3, #2]
 	mov	lr, r4
 	ldrh	ip, [r2, #28]
 	ldrh	r2, [r3, #4]
 	and	ip, ip, #31
-.L78:
+.L88:
 	uxth	r0, r4
 	add	r4, r4, #1
 	cmp	ip, r0
-	bgt	.L79
+	bgt	.L89
 	cmp	lr, #0
 	strhne	r1, [r3, #2]	@ movhi
 	strhne	r2, [r3, #4]	@ movhi
 	ldmfd	sp, {r4, fp, sp, pc}
-.L79:
+.L89:
 	add	r0, r3, r1, lsl #1
 	add	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -825,10 +889,10 @@ FtlFreeSysBLkSort:
 	mov	lr, #1
 	add	r2, r2, lr
 	ubfx	r2, r2, #0, #10
-	b	.L78
-.L86:
+	b	.L88
+.L96:
 	.align	2
-.L85:
+.L95:
 	.word	.LANCHOR0+416
 	.word	.LANCHOR0+2472
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -844,34 +908,34 @@ IsInFreeQueue:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L93
+	ldr	r3, .L103
 	uxth	r0, r0
 	ldrh	ip, [r3, #6]
 	cmp	ip, #1024
 	ldrhne	lr, [r3, #2]
 	movne	r1, #0
-	bne	.L89
-.L91:
+	bne	.L99
+.L101:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L90:
+.L100:
 	add	r2, r1, lr
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #8]
 	cmp	r2, r0
-	beq	.L92
+	beq	.L102
 	add	r1, r1, #1
-.L89:
+.L99:
 	cmp	r1, ip
-	bcc	.L90
-	b	.L91
-.L92:
+	bcc	.L100
+	b	.L101
+.L102:
 	mov	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L94:
+.L104:
 	.align	2
-.L93:
+.L103:
 	.word	.LANCHOR0+416
 	.size	IsInFreeQueue, .-IsInFreeQueue
 	.align	2
@@ -888,11 +952,11 @@ insert_data_list:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	uxth	r0, r0
-	ldr	r1, .L110
+	ldr	r1, .L120
 	ldrh	r3, [r1, #244]
 	mov	lr, r1
 	cmp	r3, r0
-	bls	.L97
+	bls	.L107
 	ldr	r6, [r1, #2520]
 	lsl	r5, r0, #3
 	mvn	ip, #0
@@ -901,11 +965,11 @@ insert_data_list:
 	strh	ip, [r6, r5]	@ movhi
 	ldr	r3, [r1, #2524]
 	cmp	r3, #0
-	bne	.L98
-.L109:
+	bne	.L108
+.L119:
 	str	r2, [r1, #2524]
-	b	.L97
-.L98:
+	b	.L107
+.L108:
 	ldr	r8, [r1, #76]
 	lsl	r1, r0, #1
 	ldr	r7, [lr, #2520]
@@ -919,7 +983,7 @@ insert_data_list:
 	mulne	ip, r1, r4
 	sub	r1, r3, r7
 	ubfx	r1, r1, #3, #16
-.L103:
+.L113:
 	ldr	r4, [fp, #-44]
 	add	lr, lr, #1
 	uxth	lr, lr
@@ -929,48 +993,48 @@ insert_data_list:
 	cmp	r0, r1
 	orreq	r4, r4, #1
 	cmp	r4, #0
-	bne	.L97
+	bne	.L107
 	ldrh	r4, [r3, #4]
 	cmp	r4, #0
-	beq	.L101
+	beq	.L111
 	lsl	r10, r1, #1
 	ldrh	r10, [r8, r10]
 	mul	r4, r4, r10
 	cmp	r4, ip
-	bcs	.L101
+	bcs	.L111
 	ldrh	r4, [r3]
 	cmp	r4, r9
-	bne	.L102
+	bne	.L112
 	strh	r1, [r2, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	ldr	r3, .L110
+	ldr	r3, .L120
 	str	r2, [r3, #2528]
-.L97:
+.L107:
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L102:
+.L112:
 	add	r3, r7, r4, lsl #3
 	mov	r1, r4
-	b	.L103
-.L101:
+	b	.L113
+.L111:
 	strh	r1, [r6, r5]	@ movhi
 	ldrh	r1, [r3, #2]
 	strh	r1, [r2, #2]	@ movhi
-	ldr	r1, .L110
+	ldr	r1, .L120
 	ldr	ip, [r1, #2524]
 	cmp	r3, ip
 	strheq	r0, [r3, #2]	@ movhi
-	beq	.L109
-.L104:
+	beq	.L119
+.L114:
 	ldrh	r2, [r3, #2]
 	ldr	r1, [r1, #2520]
 	lsl	r2, r2, #3
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-	b	.L97
-.L111:
+	b	.L107
+.L121:
 	.align	2
-.L110:
+.L120:
 	.word	.LANCHOR0
 	.size	insert_data_list, .-insert_data_list
 	.align	2
@@ -987,7 +1051,7 @@ INSERT_DATA_LIST:
 	sub	fp, ip, #4
 	uxth	r0, r0
 	bl	insert_data_list
-	ldr	r2, .L114
+	ldr	r2, .L124
 	movw	r1, #2532
 	ldrh	r3, [r2, r1]
 	add	r3, r3, #1
@@ -997,13 +1061,13 @@ INSERT_DATA_LIST:
 	cmp	r2, r3
 	ldmfdcs	sp, {fp, sp, pc}
 	mov	r2, #214
-	ldr	r1, .L114+4
-	ldr	r0, .L114+8
+	ldr	r1, .L124+4
+	ldr	r0, .L124+8
 	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
-.L115:
+.L125:
 	.align	2
-.L114:
+.L124:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC8
@@ -1023,8 +1087,8 @@ insert_free_list:
 	uxth	r0, r0
 	movw	lr, #65535
 	cmp	r0, lr
-	beq	.L117
-	ldr	r2, .L123
+	beq	.L127
+	ldr	r2, .L133
 	lsl	r5, r0, #3
 	mvn	r3, #0
 	ldr	r6, [r2, #2520]
@@ -1035,7 +1099,7 @@ insert_free_list:
 	ldr	r3, [r2, #2536]
 	cmp	r3, #0
 	streq	ip, [r2, #2536]
-	beq	.L117
+	beq	.L127
 	ldr	r8, [r2, #2540]
 	lsl	r2, r0, #1
 	ldr	r7, [r1, #2520]
@@ -1043,24 +1107,24 @@ insert_free_list:
 	ldrh	r9, [r8, r2]
 	sub	r2, r3, r7
 	ubfx	r2, r2, #3, #16
-.L121:
+.L131:
 	lsl	lr, r2, #1
 	ldrh	lr, [r8, lr]
 	cmp	lr, r9
-	bcs	.L119
+	bcs	.L129
 	ldrh	lr, [r3]
 	cmp	lr, r4
-	bne	.L120
+	bne	.L130
 	strh	r2, [ip, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-.L117:
+.L127:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L120:
+.L130:
 	add	r3, r7, lr, lsl #3
 	mov	r2, lr
-	b	.L121
-.L119:
+	b	.L131
+.L129:
 	ldrh	lr, [r3, #2]
 	strh	lr, [ip, #2]	@ movhi
 	strh	r2, [r6, r5]	@ movhi
@@ -1073,10 +1137,10 @@ insert_free_list:
 	lslne	r2, r2, #3
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L117
-.L124:
+	b	.L127
+.L134:
 	.align	2
-.L123:
+.L133:
 	.word	.LANCHOR0
 	.size	insert_free_list, .-insert_free_list
 	.align	2
@@ -1093,7 +1157,7 @@ INSERT_FREE_LIST:
 	sub	fp, ip, #4
 	uxth	r0, r0
 	bl	insert_free_list
-	ldr	r2, .L127
+	ldr	r2, .L137
 	ldrh	r3, [r2, #228]
 	add	r3, r3, #1
 	uxth	r3, r3
@@ -1102,13 +1166,13 @@ INSERT_FREE_LIST:
 	cmp	r2, r3
 	ldmfdcs	sp, {fp, sp, pc}
 	mov	r2, #207
-	ldr	r1, .L127+4
-	ldr	r0, .L127+8
+	ldr	r1, .L137+4
+	ldr	r0, .L137+8
 	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
-.L128:
+.L138:
 	.align	2
-.L127:
+.L137:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC8
@@ -1125,7 +1189,7 @@ List_remove_node:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L136
+	ldr	r4, .L146
 	uxth	r1, r1
 	movw	r3, #65535
 	mov	r8, r0
@@ -1134,20 +1198,20 @@ List_remove_node:
 	add	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L130
+	bne	.L140
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L130
+	beq	.L140
 	mov	r2, #372
-	ldr	r1, .L136+4
-	ldr	r0, .L136+8
+	ldr	r1, .L146+4
+	ldr	r0, .L146+8
 	bl	sftl_printk
-.L130:
+.L140:
 	ldr	r3, [r8]
 	ldrh	r2, [r7, r6]
 	cmp	r5, r3
 	movw	r3, #65535
-	bne	.L131
+	bne	.L141
 	cmp	r2, r3
 	ldrne	r3, [r4, #2520]
 	moveq	r3, #0
@@ -1156,25 +1220,25 @@ List_remove_node:
 	mvnne	r3, #0
 	strne	r2, [r8]
 	strhne	r3, [r2, #2]	@ movhi
-.L133:
+.L143:
 	mvn	r3, #0
 	mov	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L131:
+.L141:
 	cmp	r2, r3
 	ldrh	r3, [r5, #2]
-	bne	.L134
+	bne	.L144
 	cmp	r3, r2
 	ldrne	r2, [r4, #2520]
 	lslne	r3, r3, #3
 	mvnne	r1, #0
-	beq	.L133
-.L135:
+	beq	.L143
+.L145:
 	strh	r1, [r2, r3]	@ movhi
-	b	.L133
-.L134:
+	b	.L143
+.L144:
 	ldr	r1, [r4, #2520]
 	add	r2, r1, r2, lsl #3
 	strh	r3, [r2, #2]	@ movhi
@@ -1182,10 +1246,10 @@ List_remove_node:
 	ldrh	r1, [r7, r6]
 	ldr	r2, [r4, #2520]
 	lsl	r3, r3, #3
-	b	.L135
-.L137:
+	b	.L145
+.L147:
 	.align	2
-.L136:
+.L146:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC8
@@ -1206,32 +1270,32 @@ List_pop_index_node:
 	uxth	r1, r1
 	cmp	r3, #0
 	movweq	r4, #65535
-	beq	.L138
-	ldr	r2, .L145
+	beq	.L148
+	ldr	r2, .L155
 	movw	ip, #65535
 	ldr	r4, [r2, #2520]
-.L140:
+.L150:
 	cmp	r1, #0
-	bne	.L141
-.L143:
+	bne	.L151
+.L153:
 	sub	r3, r3, r4
 	ubfx	r4, r3, #3, #16
 	mov	r1, r4
 	bl	List_remove_node
-.L138:
+.L148:
 	mov	r0, r4
 	ldmfd	sp, {r4, fp, sp, pc}
-.L141:
+.L151:
 	ldrh	r2, [r3]
 	cmp	r2, ip
-	beq	.L143
+	beq	.L153
 	sub	r1, r1, #1
 	add	r3, r4, r2, lsl #3
 	uxth	r1, r1
-	b	.L140
-.L146:
+	b	.L150
+.L156:
 	.align	2
-.L145:
+.L155:
 	.word	.LANCHOR0
 	.size	List_pop_index_node, .-List_pop_index_node
 	.align	2
@@ -1262,33 +1326,33 @@ List_get_gc_head_node:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r1, .L154
+	ldr	r1, .L164
 	uxth	r2, r0
 	ldr	r3, [r1, #2524]
 	cmp	r3, #0
 	ldrne	r1, [r1, #2520]
 	movwne	r0, #65535
-	bne	.L150
+	bne	.L160
 	movw	r0, #65535
 	ldmfd	sp, {fp, sp, pc}
-.L152:
+.L162:
 	sub	r2, r2, #1
 	add	r3, r1, r3, lsl #3
 	uxth	r2, r2
-.L150:
+.L160:
 	cmp	r2, #0
-	beq	.L151
+	beq	.L161
 	ldrh	r3, [r3]
 	cmp	r3, r0
-	bne	.L152
+	bne	.L162
 	ldmfd	sp, {fp, sp, pc}
-.L151:
+.L161:
 	sub	r3, r3, r1
 	ubfx	r0, r3, #3, #16
 	ldmfd	sp, {fp, sp, pc}
-.L155:
+.L165:
 	.align	2
-.L154:
+.L164:
 	.word	.LANCHOR0
 	.size	List_get_gc_head_node, .-List_get_gc_head_node
 	.align	2
@@ -1303,22 +1367,22 @@ List_update_data_list:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L169
+	ldr	r4, .L179
 	uxth	r5, r0
 	ldrh	r3, [r4, #28]
 	cmp	r3, r5
-	beq	.L158
+	beq	.L168
 	ldrh	r3, [r4, #80]
 	cmp	r3, r5
-	beq	.L158
+	beq	.L168
 	ldrh	r3, [r4, #128]
 	cmp	r3, r5
-	beq	.L158
+	beq	.L168
 	ldr	r8, [r4, #2520]
 	ldr	r3, [r4, #2524]
 	add	r7, r8, r5, lsl #3
 	cmp	r7, r3
-	beq	.L158
+	beq	.L168
 	ldr	r2, [r4, #76]
 	lsl	r3, r5, #1
 	ldrh	r6, [r7, #4]
@@ -1328,15 +1392,15 @@ List_update_data_list:
 	mulne	r6, r6, r3
 	ldr	r3, [r8, r5, lsl #3]
 	cmn	r3, #1
-	bne	.L161
+	bne	.L171
 	movw	r2, #463
-	ldr	r1, .L169+4
-	ldr	r0, .L169+8
+	ldr	r1, .L179+4
+	ldr	r0, .L179+8
 	bl	sftl_printk
-.L161:
+.L171:
 	ldr	r3, [r8, r5, lsl #3]
 	cmn	r3, #1
-	beq	.L158
+	beq	.L168
 	ldrh	r2, [r7, #2]
 	ldr	r1, [r4, #76]
 	lsl	r2, r2, #3
@@ -1349,31 +1413,31 @@ List_update_data_list:
 	mulne	r3, r3, r0
 	mvneq	r3, #0
 	cmp	r6, r3
-	bcs	.L158
+	bcs	.L168
 	mov	r1, r5
-	ldr	r0, .L169+12
+	ldr	r0, .L179+12
 	bl	List_remove_node
 	movw	r3, #2532
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L163
+	bne	.L173
 	movw	r2, #474
-	ldr	r1, .L169+4
-	ldr	r0, .L169+8
+	ldr	r1, .L179+4
+	ldr	r0, .L179+8
 	bl	sftl_printk
-.L163:
+.L173:
 	movw	r2, #2532
 	mov	r0, r5
 	ldrh	r3, [r4, r2]
 	sub	r3, r3, #1
 	strh	r3, [r4, r2]	@ movhi
 	bl	INSERT_DATA_LIST
-.L158:
+.L168:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L170:
+.L180:
 	.align	2
-.L169:
+.L179:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC8
@@ -1391,7 +1455,7 @@ select_l2p_ram_region:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L181
+	ldr	r0, .L191
 	movw	r3, #342
 	mov	r1, #0
 	movw	ip, #65535
@@ -1399,46 +1463,46 @@ select_l2p_ram_region:
 	mov	lr, r0
 	ldr	r3, [r0, #2544]
 	mov	r0, #12
-.L172:
+.L182:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L174
+	bcc	.L184
 	mov	r4, r2
 	mov	r1, #0
 	mov	r0, #-2147483648
 	mov	r6, #12
-.L175:
+.L185:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcc	.L177
+	bcc	.L187
 	cmp	r4, r2
-	bcc	.L173
+	bcc	.L183
 	movw	r1, #2548
 	mov	r4, r2
 	ldrh	r5, [lr, r1]
 	mvn	r0, #0
 	mov	r1, #0
-.L178:
+.L188:
 	uxth	ip, r1
 	cmp	ip, r2
-	bcc	.L180
+	bcc	.L190
 	cmp	r4, r2
-	bcc	.L173
+	bcc	.L183
 	movw	r2, #789
-	ldr	r1, .L181+4
-	ldr	r0, .L181+8
+	ldr	r1, .L191+4
+	ldr	r0, .L191+8
 	bl	sftl_printk
-	b	.L173
-.L174:
+	b	.L183
+.L184:
 	add	r1, r1, #1
 	mla	r5, r0, r1, r3
 	ldrh	r5, [r5, #-12]
 	cmp	r5, ip
-	bne	.L172
-.L173:
+	bne	.L182
+.L183:
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L177:
+.L187:
 	mla	ip, r6, r1, r3
 	add	r1, r1, #1
 	ldr	ip, [ip, #4]
@@ -1450,22 +1514,22 @@ select_l2p_ram_region:
 	cmp	r7, #0
 	movne	r0, ip
 	movne	r4, r5
-	b	.L175
-.L180:
+	b	.L185
+.L190:
 	ldr	lr, [r3, #4]
 	cmp	r0, lr
-	bls	.L179
+	bls	.L189
 	ldrh	r6, [r3]
 	cmp	r6, r5
 	movne	r0, lr
 	movne	r4, ip
-.L179:
+.L189:
 	add	r1, r1, #1
 	add	r3, r3, #12
-	b	.L178
-.L182:
+	b	.L188
+.L192:
 	.align	2
-.L181:
+.L191:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+73
 	.word	.LC8
@@ -1482,17 +1546,17 @@ FtlUpdateVaildLpn:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	ip, .L189
+	ldr	ip, .L199
 	movw	r1, #2550
 	ldrh	r2, [ip, r1]
 	mov	r3, ip
 	cmp	r2, #4
 	cmpls	r0, #0
-	bne	.L184
+	bne	.L194
 	add	r2, r2, #1
 	strh	r2, [ip, r1]	@ movhi
 	ldmfd	sp, {fp, sp, pc}
-.L184:
+.L194:
 	mov	r2, #0
 	movw	lr, #65535
 	strh	r2, [ip, r1]	@ movhi
@@ -1500,20 +1564,20 @@ FtlUpdateVaildLpn:
 	ldrh	r1, [ip, #244]
 	ldr	r2, [ip, #76]
 	add	r1, r2, r1, lsl #1
-.L185:
+.L195:
 	cmp	r2, r1
-	bne	.L187
+	bne	.L197
 	ldmfd	sp, {fp, sp, pc}
-.L187:
+.L197:
 	ldrh	ip, [r2], #2
 	cmp	ip, lr
 	ldrne	r0, [r3, #2552]
 	addne	r0, r0, ip
 	strne	r0, [r3, #2552]
-	b	.L185
-.L190:
+	b	.L195
+.L200:
 	.align	2
-.L189:
+.L199:
 	.word	.LANCHOR0
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
@@ -1530,11 +1594,11 @@ ftl_set_blk_mode:
 	sub	fp, ip, #4
 	cmp	r1, #0
 	uxth	r0, r0
-	beq	.L192
+	beq	.L202
 	bl	ftl_set_blk_mode.part.6
 	ldmfd	sp, {fp, sp, pc}
-.L192:
-	ldr	r3, .L194
+.L202:
+	ldr	r3, .L204
 	lsr	r1, r0, #5
 	mov	ip, #1
 	and	r0, r0, #31
@@ -1543,9 +1607,9 @@ ftl_set_blk_mode:
 	bic	r0, r3, ip, lsl r0
 	str	r0, [r2, r1, lsl #2]
 	ldmfd	sp, {fp, sp, pc}
-.L195:
+.L205:
 	.align	2
-.L194:
+.L204:
 	.word	.LANCHOR0
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
 	.align	2
@@ -1560,7 +1624,7 @@ ftl_get_blk_mode:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L197
+	ldr	r3, .L207
 	uxth	r0, r0
 	ldr	r3, [r3, #24]
 	lsr	r2, r0, #5
@@ -1569,9 +1633,9 @@ ftl_get_blk_mode:
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L198:
+.L208:
 	.align	2
-.L197:
+.L207:
 	.word	.LANCHOR0
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
 	.align	2
@@ -1590,14 +1654,14 @@ ftl_sb_update_avl_pages:
 	uxth	r2, r2
 	uxth	r5, r1
 	strh	r3, [r0, #4]	@ movhi
-	ldr	r3, .L206
+	ldr	r3, .L216
 	add	ip, r0, r2, lsl #1
 	movw	r1, #65535
 	add	ip, ip, #14
 	ldrh	lr, [r3, #236]
-.L200:
+.L210:
 	cmp	r2, lr
-	bcc	.L202
+	bcc	.L212
 	movw	r2, #306
 	add	ip, r0, #16
 	ldrh	r1, [r3, r2]
@@ -1606,12 +1670,12 @@ ftl_sb_update_avl_pages:
 	sub	r1, r1, #1
 	sub	r1, r1, r5
 	uxth	r1, r1
-.L203:
+.L213:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L205
+	bhi	.L215
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L202:
+.L212:
 	ldrh	r4, [ip, #2]!
 	add	r2, r2, #1
 	uxth	r2, r2
@@ -1619,18 +1683,18 @@ ftl_sb_update_avl_pages:
 	ldrhne	r4, [r0, #4]
 	addne	r4, r4, #1
 	strhne	r4, [r0, #4]	@ movhi
-	b	.L200
-.L205:
+	b	.L210
+.L215:
 	ldrh	r2, [ip], #2
 	add	r3, r3, #1
 	cmp	r2, r4
 	ldrhne	r2, [r0, #4]
 	addne	r2, r1, r2
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L203
-.L207:
+	b	.L213
+.L217:
 	.align	2
-.L206:
+.L216:
 	.word	.LANCHOR0
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
@@ -1656,14 +1720,14 @@ FtlSlcSuperblockCheck:
 	mov	lr, #0
 	add	r2, r0, r2, lsl #1
 	ldrh	r1, [r2, #16]
-	ldr	r2, .L214
+	ldr	r2, .L224
 	ldrh	ip, [r2, #236]
 	mov	r2, r3
-.L211:
+.L221:
 	cmp	r1, r2
-	beq	.L213
+	beq	.L223
 	ldmfd	sp, {fp, sp, pc}
-.L213:
+.L223:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -1676,10 +1740,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r0, r3, lsl #1
 	ldrh	r1, [r3, #16]
-	b	.L211
-.L215:
+	b	.L221
+.L225:
 	.align	2
-.L214:
+.L224:
 	.word	.LANCHOR0
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
@@ -1696,28 +1760,28 @@ make_superblock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r4, r0
-	ldr	r6, .L222
+	ldr	r6, .L232
 	ldrh	r2, [r0]
 	ldrh	r3, [r6, #244]
 	cmp	r2, r3
-	bcc	.L217
+	bcc	.L227
 	movw	r2, #2148
-	ldr	r1, .L222+4
-	ldr	r0, .L222+8
+	ldr	r1, .L232+4
+	ldr	r0, .L232+8
 	bl	sftl_printk
-.L217:
+.L227:
 	ldrh	r9, [r6, #236]
 	add	r8, r4, #16
-	ldr	r10, .L222+12
+	ldr	r10, .L232+12
 	mvn	r7, #0
 	mov	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L218:
+.L228:
 	uxth	r3, r5
 	ldrh	r1, [r4]
 	cmp	r9, r3
-	bhi	.L220
+	bhi	.L230
 	movw	r2, #306
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	ldrh	r2, [r6, r2]
@@ -1734,7 +1798,7 @@ make_superblock:
 	movhi	r3, #1
 	strbhi	r3, [r4, #9]
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L220:
+.L230:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	add	r8, r8, #2
 	bl	V2P_block
@@ -1748,10 +1812,10 @@ make_superblock:
 	ldrbeq	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	strbeq	r3, [r4, #7]
-	b	.L218
-.L223:
+	b	.L228
+.L233:
 	.align	2
-.L222:
+.L232:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC8
@@ -1769,7 +1833,7 @@ update_multiplier_value:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L230
+	ldr	r3, .L240
 	movw	r2, #306
 	mov	r5, #0
 	uxth	r6, r0
@@ -1778,23 +1842,23 @@ update_multiplier_value:
 	mov	r7, r3
 	ldrh	r9, [r3, r2]
 	add	r10, r3, #264
-.L225:
+.L235:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L227
+	bhi	.L237
 	cmp	r4, #0
 	moveq	r0, r4
-	beq	.L228
+	beq	.L238
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__divsi3
-.L228:
+.L238:
 	ldr	r1, [r7, #2520]
 	add	r1, r1, r6, lsl #3
 	strh	r0, [r1, #4]	@ movhi
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L227:
+.L237:
 	mov	r1, r6
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -1803,10 +1867,10 @@ update_multiplier_value:
 	add	r5, r5, #1
 	addeq	r4, r4, r9
 	uxtheq	r4, r4
-	b	.L225
-.L231:
+	b	.L235
+.L241:
 	.align	2
-.L230:
+.L240:
 	.word	.LANCHOR0
 	.size	update_multiplier_value, .-update_multiplier_value
 	.align	2
@@ -1821,7 +1885,7 @@ GetFreeBlockMinEraseCount:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L235
+	ldr	r3, .L245
 	ldr	r0, [r3, #2536]
 	cmp	r0, #0
 	ldrne	r2, [r3, #2520]
@@ -1831,9 +1895,9 @@ GetFreeBlockMinEraseCount:
 	lslne	r0, r0, #1
 	ldrhne	r0, [r3, r0]
 	ldmfd	sp, {fp, sp, pc}
-.L236:
+.L246:
 	.align	2
-.L235:
+.L245:
 	.word	.LANCHOR0
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
 	.align	2
@@ -1848,7 +1912,7 @@ GetFreeBlockMaxEraseCount:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L245
+	ldr	r2, .L255
 	uxth	r4, r0
 	ldr	r0, [r2, #2536]
 	cmp	r0, #0
@@ -1863,26 +1927,26 @@ GetFreeBlockMaxEraseCount:
 	uxthgt	r4, r3
 	sub	r3, r0, ip
 	ubfx	r3, r3, #3, #16
-.L240:
+.L250:
 	uxth	r0, r1
 	cmp	r4, r0
-	bls	.L242
+	bls	.L252
 	lsl	r0, r3, #3
 	add	r1, r1, #1
 	ldrh	lr, [ip, r0]
 	cmp	lr, r5
-	bne	.L244
-.L242:
+	bne	.L254
+.L252:
 	ldr	r2, [r2, #2540]
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L244:
+.L254:
 	mov	r3, lr
-	b	.L240
-.L246:
+	b	.L250
+.L256:
 	.align	2
-.L245:
+.L255:
 	.word	.LANCHOR0
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -1899,170 +1963,170 @@ FtlPrintInfo2buf:
 	sub	fp, ip, #4
 	sub	sp, sp, #16
 	mov	r6, r0
-	ldr	r5, .L259
+	ldr	r5, .L269
 	add	r4, r6, #12
-	ldr	r1, .L259+4
+	ldr	r1, .L269+4
 	bl	strcpy
 	ldr	r3, [r5, #320]
 	mov	r1, #64
-	ldr	r2, .L259+8
+	ldr	r2, .L269+8
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r1, .L259+12
+	ldr	r1, .L269+12
 	mov	r0, r4
 	add	r4, r4, #10
 	bl	strcpy
 	ldr	r3, [r5, #2556]
 	mov	r1, #64
-	ldr	r2, .L259+16
+	ldr	r2, .L269+16
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2552]
-	ldr	r2, .L259+20
+	ldr	r2, .L269+20
 	mov	r1, #64
 	mov	r0, r4
 	add	r7, r5, #356
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2560]
-	ldr	r2, .L259+24
+	ldr	r2, .L269+24
 	mov	r1, #64
 	mov	r0, r4
-	ldr	r8, .L259+28
+	ldr	r8, .L269+28
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2564]
-	ldr	r2, .L259+32
+	ldr	r2, .L269+32
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2568]
-	ldr	r2, .L259+36
+	ldr	r2, .L269+36
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2572]
-	ldr	r2, .L259+40
+	ldr	r2, .L269+40
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2576]
-	ldr	r2, .L259+44
+	ldr	r2, .L269+44
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2580]
-	ldr	r2, .L259+48
+	ldr	r2, .L269+48
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2584]
 	add	r4, r4, r0
-	ldr	r2, .L259+52
+	ldr	r2, .L269+52
 	mov	r1, #64
 	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
 	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	ldr	r2, .L259+56
+	ldr	r2, .L269+56
 	mov	r1, #64
 	mov	r0, r4
 	lsr	r3, r3, #11
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2592]
-	ldr	r2, .L259+60
+	ldr	r2, .L269+60
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2596]
-	ldr	r2, .L259+64
+	ldr	r2, .L269+64
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r7, #6]
-	ldr	r2, .L259+68
+	ldr	r2, .L269+68
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #228]
-	ldr	r2, .L259+72
+	ldr	r2, .L269+72
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2600]
-	ldr	r2, .L259+76
+	ldr	r2, .L269+76
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2604]
-	ldr	r2, .L259+80
+	ldr	r2, .L269+80
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2608]
-	ldr	r2, .L259+84
+	ldr	r2, .L269+84
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2612]
-	ldr	r2, .L259+88
+	ldr	r2, .L269+88
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2616]
-	ldr	r2, .L259+92
+	ldr	r2, .L269+92
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2620]
-	ldr	r2, .L259+96
+	ldr	r2, .L269+96
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r8, #30]
-	ldr	r2, .L259+100
+	ldr	r2, .L269+100
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r8, #28]
-	ldr	r2, .L259+104
+	ldr	r2, .L269+104
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #344]
-	ldr	r2, .L259+108
+	ldr	r2, .L269+108
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #336]
-	ldr	r2, .L259+112
+	ldr	r2, .L269+112
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #232]
-	ldr	r2, .L259+116
+	ldr	r2, .L269+116
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2070,12 +2134,12 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r3, #6]
 	mov	r1, #64
-	ldr	r2, .L259+120
+	ldr	r2, .L269+120
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #244]
-	ldr	r2, .L259+124
+	ldr	r2, .L269+124
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2083,12 +2147,12 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r3]
 	mov	r1, #64
-	ldr	r2, .L259+128
+	ldr	r2, .L269+128
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #248]
-	ldr	r2, .L259+132
+	ldr	r2, .L269+132
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2096,42 +2160,42 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L259+136
+	ldr	r2, .L269+136
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r7]
-	ldr	r2, .L259+140
+	ldr	r2, .L269+140
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #30]
-	ldr	r2, .L259+144
+	ldr	r2, .L269+144
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #34]	@ zero_extendqisi2
-	ldr	r2, .L259+148
+	ldr	r2, .L269+148
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #28]
-	ldr	r2, .L259+152
+	ldr	r2, .L269+152
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #36]	@ zero_extendqisi2
-	ldr	r2, .L259+156
+	ldr	r2, .L269+156
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #32]
-	ldr	r2, .L259+160
+	ldr	r2, .L269+160
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2142,35 +2206,35 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L259+164
+	ldr	r2, .L269+164
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #82]
-	ldr	r2, .L259+168
+	ldr	r2, .L269+168
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #86]	@ zero_extendqisi2
-	ldr	r2, .L259+172
+	ldr	r2, .L269+172
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #80]
-	ldr	r2, .L259+176
+	ldr	r2, .L269+176
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #88]	@ zero_extendqisi2
-	ldr	r2, .L259+180
+	ldr	r2, .L269+180
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #84]
-	ldr	r2, .L259+184
+	ldr	r2, .L269+184
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2181,71 +2245,71 @@ FtlPrintInfo2buf:
 	mov	r0, r4
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L259+188
+	ldr	r2, .L269+188
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #130]
-	ldr	r2, .L259+192
+	ldr	r2, .L269+192
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #134]	@ zero_extendqisi2
-	ldr	r2, .L259+196
+	ldr	r2, .L269+196
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #128]
-	ldr	r2, .L259+200
+	ldr	r2, .L269+200
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #136]	@ zero_extendqisi2
-	ldr	r2, .L259+204
+	ldr	r2, .L269+204
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #132]
-	ldr	r2, .L259+208
+	ldr	r2, .L269+208
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #178]
-	ldr	r2, .L259+212
+	ldr	r2, .L269+212
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #182]	@ zero_extendqisi2
-	ldr	r2, .L259+216
+	ldr	r2, .L269+216
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #176]
-	ldr	r2, .L259+220
+	ldr	r2, .L269+220
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #184]	@ zero_extendqisi2
-	ldr	r2, .L259+224
+	ldr	r2, .L269+224
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #180]
-	ldr	r2, .L259+228
+	ldr	r2, .L269+228
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r2, .L259+232
+	ldr	r2, .L269+232
 	mov	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
@@ -2255,13 +2319,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2716]
-	ldr	r2, .L259+236
+	ldr	r2, .L269+236
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2740]
-	ldr	r2, .L259+240
+	ldr	r2, .L269+240
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2269,19 +2333,19 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L259+244
+	ldr	r2, .L269+244
 	mov	r0, r4
 	bl	snprintf
 	movw	r3, #3158
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L259+248
+	ldr	r2, .L269+248
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #3160]
-	ldr	r2, .L259+252
+	ldr	r2, .L269+252
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2289,12 +2353,12 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r3, [r5, r3]
 	mov	r1, #64
-	ldr	r2, .L259+256
+	ldr	r2, .L269+256
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r2, .L259+260
+	ldr	r2, .L269+260
 	mov	r3, r0
 	mov	r1, #64
 	mov	r0, r4
@@ -2302,43 +2366,43 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r0, [r5, #228]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r2, .L259+264
+	ldr	r2, .L269+264
 	mov	r3, r0
 	mov	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, .L259+268
+	ldr	r3, .L269+268
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L248
-.L253:
+	beq	.L258
+.L263:
 	sub	r0, r4, r6
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L248:
+.L258:
 	ldrh	r3, [r5, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L250
+	beq	.L260
 	ldr	r2, [r5, #76]
 	lsl	r3, r3, #1
 	mov	r0, r4
 	mov	r1, #64
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L259+272
+	ldr	r2, .L269+272
 	bl	snprintf
 	add	r4, r4, r0
-.L250:
+.L260:
 	mov	r0, #0
-	ldr	r9, .L259+276
+	ldr	r9, .L269+276
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	mov	r7, #0
 	movw	r10, #65535
-.L252:
+.L262:
 	cmp	r0, r10
-	beq	.L251
+	beq	.L261
 	ldr	r3, [r5, #2540]
 	lsl	r2, r0, #1
 	lsl	r8, r0, #3
@@ -2361,18 +2425,18 @@ FtlPrintInfo2buf:
 	cmp	r7, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
-	bne	.L252
-.L251:
+	bne	.L262
+.L261:
 	ldr	r3, [r5, #2536]
 	mov	r7, #0
 	ldr	r2, [r5, #2520]
 	movw	r9, #65535
-	ldr	r10, .L259+280
+	ldr	r10, .L269+280
 	sub	r3, r3, r2
 	ubfx	r3, r3, #3, #16
-.L254:
+.L264:
 	cmp	r3, r9
-	beq	.L253
+	beq	.L263
 	ldr	r1, [r5, #2540]
 	lsl	r2, r3, #1
 	lsl	r8, r3, #3
@@ -2391,13 +2455,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L253
+	beq	.L263
 	ldr	r3, [r5, #2520]
 	ldrh	r3, [r3, r8]
-	b	.L254
-.L260:
+	b	.L264
+.L270:
 	.align	2
-.L259:
+.L269:
 	.word	.LANCHOR0
 	.word	.LC9
 	.word	.LC10
@@ -2484,10 +2548,10 @@ rknand_proc_ftlread:
 	sub	fp, ip, #4
 	cmp	r0, #2048
 	mov	r5, r1
-	blt	.L263
-	ldr	r3, .L264
+	blt	.L273
+	ldr	r3, .L274
 	mov	r1, #64
-	ldr	r2, .L264+4
+	ldr	r2, .L274+4
 	mov	r0, r5
 	bl	snprintf
 	add	r4, r5, r0
@@ -2496,12 +2560,12 @@ rknand_proc_ftlread:
 	add	r0, r4, r0
 	sub	r0, r0, r5
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L263:
+.L273:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L265:
+.L275:
 	.align	2
-.L264:
+.L274:
 	.word	.LC0
 	.word	.LC77
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
@@ -2518,71 +2582,71 @@ GetSwlReplaceBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #16
-	ldr	r4, .L290
+	ldr	r4, .L300
 	ldr	r2, [r4, #2608]
 	ldr	r3, [r4, #2620]
 	cmp	r2, r3
-	bcs	.L267
+	bcs	.L277
 	ldr	r2, [r4, #2540]
 	mov	r3, #0
 	ldrh	r1, [r4, #244]
 	str	r3, [r4, #2600]
 	sub	r2, r2, #2
-.L268:
+.L278:
 	cmp	r3, r1
-	bcc	.L269
+	bcc	.L279
 	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__udivsi3
-	ldr	r3, .L290+4
+	ldr	r3, .L300+4
 	str	r0, [r4, #2608]
 	ldr	r0, [r4, #2604]
 	ldrh	r1, [r3]
 	sub	r0, r5, r0
 	bl	__udivsi3
 	str	r0, [r4, #2600]
-.L270:
+.L280:
 	ldr	r6, [r4, #2620]
 	ldr	r7, [r4, #2608]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L275
+	bls	.L285
 	ldr	r2, [r4, #2616]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L275
-.L277:
+	bls	.L285
+.L287:
 	movw	r5, #65535
-.L276:
+.L286:
 	mov	r0, r5
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L269:
+.L279:
 	ldrh	r0, [r2, #2]!
 	add	r3, r3, #1
 	ldr	ip, [r4, #2600]
 	add	r0, r0, ip
 	str	r0, [r4, #2600]
-	b	.L268
-.L267:
+	b	.L278
+.L277:
 	ldr	r3, [r4, #2616]
 	cmp	r2, r3
 	addhi	r3, r3, #1
 	strhi	r3, [r4, #2616]
 	movhi	r3, #0
-	bls	.L270
-.L272:
+	bls	.L280
+.L282:
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	bcs	.L270
+	bcs	.L280
 	ldr	r0, [r4, #2540]
 	lsl	r1, r3, #1
 	add	r3, r3, #1
 	ldrh	r2, [r0, r1]
 	add	r2, r2, #1
 	strh	r2, [r0, r1]	@ movhi
-	b	.L272
-.L275:
+	b	.L282
+.L285:
 	ldrh	r0, [r4, #228]
 	add	r0, r0, r0, lsl #1
 	asr	r0, r0, #2
@@ -2590,53 +2654,53 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L277
+	bcc	.L287
 	ldr	r3, [r4, #2524]
 	cmp	r3, #0
-	beq	.L277
+	beq	.L287
 	ldrh	r10, [r4, #244]
 	movw	r1, #65535
 	ldr	lr, [r4, #2520]
 	mov	r0, #0
 	ldr	r8, [r4, #2540]
 	mov	r2, r1
-.L278:
+.L288:
 	ldrh	ip, [r3]
 	movw	r5, #65535
 	cmp	ip, r5
-	bne	.L281
+	bne	.L291
 	mov	r5, r2
-.L280:
+.L290:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L277
+	beq	.L287
 	lsl	r3, r5, #1
 	ldrh	r10, [r8, r3]
 	cmp	r6, r10
-	bcs	.L282
+	bcs	.L292
 	str	r3, [fp, #-44]
 	bl	GetFreeBlockMinEraseCount
 	ldr	r3, [fp, #-44]
 	cmp	r6, r0
 	strcc	r1, [r4, #2620]
-.L282:
+.L292:
 	cmp	r7, r10
-	bls	.L277
+	bls	.L287
 	add	r2, r10, #128
 	cmp	r9, r2
-	ble	.L277
+	ble	.L287
 	add	r2, r10, #256
 	cmp	r7, r2
-	bhi	.L283
+	bhi	.L293
 	ldr	r2, [r4, #2616]
 	add	r10, r10, #768
 	cmp	r10, r2
-	bcs	.L277
-.L283:
+	bcs	.L287
+.L293:
 	str	r9, [sp, #8]
 	mov	r1, r5
 	ldrh	r2, [r8, r3]
-	ldr	r0, .L290+8
+	ldr	r0, .L300+8
 	str	r2, [sp, #4]
 	ldr	r2, [r4, #76]
 	ldrh	r3, [r2, r3]
@@ -2646,31 +2710,31 @@ GetSwlReplaceBlock:
 	bl	sftl_printk
 	mov	r3, #1
 	str	r3, [r4, #3168]
-	b	.L276
-.L281:
+	b	.L286
+.L291:
 	add	r0, r0, #1
 	uxth	r0, r0
 	cmp	r0, r10
-	bhi	.L277
+	bhi	.L287
 	ldrh	r5, [r3, #4]
 	cmp	r5, #0
-	beq	.L279
+	beq	.L289
 	sub	r3, r3, lr
 	asr	r3, r3, #3
 	uxth	r5, r3
 	lsl	r3, r5, #1
 	ldrh	r3, [r8, r3]
 	cmp	r6, r3
-	bcs	.L280
+	bcs	.L290
 	cmp	r1, r3
 	movhi	r1, r3
 	movhi	r2, r5
-.L279:
+.L289:
 	add	r3, lr, ip, lsl #3
-	b	.L278
-.L291:
+	b	.L288
+.L301:
 	.align	2
-.L290:
+.L300:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+296
 	.word	.LC78
@@ -2690,19 +2754,19 @@ free_data_superblock:
 	uxth	r0, r0
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L293
-	ldr	r3, .L294
+	beq	.L303
+	ldr	r3, .L304
 	mov	r1, #0
 	ldr	r2, [r3, #76]
 	lsl	r3, r0, #1
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
-.L293:
+.L303:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L295:
+.L305:
 	.align	2
-.L294:
+.L304:
 	.word	.LANCHOR0
 	.size	free_data_superblock, .-free_data_superblock
 	.align	2
@@ -2721,31 +2785,31 @@ get_new_active_ppa:
 	movw	r3, #65535
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L297
+	bne	.L307
 	movw	r2, #2781
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L321
+	ldr	r0, .L321+4
 	bl	sftl_printk
-.L297:
-	ldr	r6, .L311+8
+.L307:
+	ldr	r6, .L321+8
 	movw	r3, #306
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r6, r3]
 	cmp	r2, r3
-	bne	.L298
+	bne	.L308
 	movw	r2, #2782
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L321
+	ldr	r0, .L321+4
 	bl	sftl_printk
-.L298:
+.L308:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L299
+	bne	.L309
 	movw	r2, #2783
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L321
+	ldr	r0, .L321+4
 	bl	sftl_printk
-.L299:
+.L309:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	mov	r3, #0
 	ldrh	r0, [r6, #236]
@@ -2754,15 +2818,15 @@ get_new_active_ppa:
 	add	r2, r4, r2, lsl #1
 	ldrh	r1, [r2, #16]
 	mov	r2, r3
-.L300:
+.L310:
 	cmp	r1, ip
-	beq	.L302
+	beq	.L312
 	movw	r3, #306
 	ldrh	r5, [r4, #2]
 	ldrh	ip, [r6, r3]
 	cmp	r5, ip
 	movwcs	r5, #65535
-	bcs	.L296
+	bcs	.L306
 	ldrh	r2, [r4, #4]
 	orr	r5, r5, r1, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
@@ -2770,7 +2834,7 @@ get_new_active_ppa:
 	sub	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #4]	@ movhi
-.L305:
+.L315:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r0, r3
@@ -2781,7 +2845,7 @@ get_new_active_ppa:
 	add	r1, r4, r3, lsl #1
 	ldrh	r1, [r1, #16]
 	cmp	r1, lr
-	beq	.L305
+	beq	.L315
 	strb	r3, [r4, #6]
 	cmp	r2, #0
 	ldrh	r3, [r4, #2]
@@ -2790,15 +2854,15 @@ get_new_active_ppa:
 	lsr	r3, r3, #5
 	moveq	r3, #0
 	cmp	r3, #0
-	beq	.L296
+	beq	.L306
 	movw	r2, #2806
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L321
+	ldr	r0, .L321+4
 	bl	sftl_printk
-.L296:
+.L306:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L302:
+.L312:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -2811,10 +2875,10 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, lsl #1
 	ldrh	r1, [r3, #16]
-	b	.L300
-.L312:
+	b	.L310
+.L322:
 	.align	2
-.L311:
+.L321:
 	.word	.LANCHOR1+111
 	.word	.LC8
 	.word	.LANCHOR0
@@ -2831,28 +2895,28 @@ FtlGcBufInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L318
+	ldr	r5, .L328
 	mov	lr, #12
 	mov	r4, #1
-	ldr	r2, .L318+4
+	ldr	r2, .L328+4
 	mov	r6, #20
 	mov	r3, #0
 	str	r3, [r2, #3172]
-.L314:
+.L324:
 	ldrh	r1, [r2, #236]
 	uxth	r0, r3
 	add	ip, r3, #1
 	cmp	r0, r1
-	bcc	.L315
-	ldr	lr, .L318
+	bcc	.L325
+	ldr	lr, .L328
 	mov	r0, #12
 	mov	ip, #0
-.L316:
+.L326:
 	ldr	r3, [r2, #3192]
 	cmp	r1, r3
-	bcc	.L317
+	bcc	.L327
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L315:
+.L325:
 	uxth	r3, r3
 	ldr	r7, [r2, #3176]
 	mul	r0, lr, r3
@@ -2867,7 +2931,7 @@ FtlGcBufInit:
 	bic	r1, r1, #3
 	add	r1, r8, r1
 	str	r1, [r7, r0]
-	ldr	r1, .L318+8
+	ldr	r1, .L328+8
 	ldr	r8, [r2, #3176]
 	ldrh	r1, [r1]
 	add	r7, r8, r0
@@ -2886,8 +2950,8 @@ FtlGcBufInit:
 	ldr	r1, [r7, #4]
 	str	r1, [r3, #12]
 	mov	r3, ip
-	b	.L314
-.L317:
+	b	.L324
+.L327:
 	mul	r4, r0, r1
 	ldr	r6, [r2, #3176]
 	add	r3, r6, r4
@@ -2903,7 +2967,7 @@ FtlGcBufInit:
 	str	r3, [r6, r4]
 	ldr	r3, [r2, #3176]
 	add	r4, r3, r4
-	ldr	r3, .L318+8
+	ldr	r3, .L328+8
 	ldrh	r3, [r3]
 	mul	r3, r1, r3
 	add	r1, r1, #1
@@ -2915,10 +2979,10 @@ FtlGcBufInit:
 	bic	r3, r3, #3
 	add	r3, r5, r3
 	str	r3, [r4, #4]
-	b	.L316
-.L319:
+	b	.L326
+.L329:
 	.align	2
-.L318:
+.L328:
 	.word	.LANCHOR0+314
 	.word	.LANCHOR0
 	.word	.LANCHOR0+316
@@ -2935,37 +2999,37 @@ FtlGcBufFree:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L327
+	ldr	r3, .L337
 	mov	lr, #0
 	mov	r5, #20
 	mov	r7, #12
 	mov	r8, lr
 	ldr	r6, [r3, #3192]
 	ldr	r4, [r3, #3176]
-.L321:
+.L331:
 	uxth	r3, lr
 	cmp	r1, r3
 	ldmfdls	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 	mla	ip, r5, r3, r0
 	mov	r2, #0
-.L322:
+.L332:
 	uxth	r3, r2
 	cmp	r6, r3
-	bls	.L323
+	bls	.L333
 	mul	r3, r7, r3
 	add	r2, r2, #1
 	ldr	r10, [r4, r3]
 	add	r9, r4, r3
 	ldr	r3, [ip, #8]
 	cmp	r10, r3
-	bne	.L322
+	bne	.L332
 	str	r8, [r9, #8]
-.L323:
+.L333:
 	add	lr, lr, #1
-	b	.L321
-.L328:
+	b	.L331
+.L338:
 	.align	2
-.L327:
+.L337:
 	.word	.LANCHOR0
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -2980,41 +3044,41 @@ FtlGcBufAlloc:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L336
+	ldr	r3, .L346
 	mov	ip, #0
 	mov	r6, #12
 	mov	r7, #1
 	mov	r8, #20
 	ldr	r4, [r3, #3192]
 	ldr	r5, [r3, #3176]
-.L330:
+.L340:
 	uxth	r2, ip
 	cmp	r1, r2
-	bhi	.L334
+	bhi	.L344
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L334:
+.L344:
 	mov	lr, #0
-.L331:
+.L341:
 	uxth	r3, lr
 	cmp	r4, r3
-	bls	.L332
+	bls	.L342
 	mla	r3, r6, r3, r5
 	add	lr, lr, #1
 	ldr	r9, [r3, #8]
 	cmp	r9, #0
-	bne	.L331
+	bne	.L341
 	mla	r2, r8, r2, r0
 	ldr	lr, [r3]
 	str	r7, [r3, #8]
 	str	lr, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L332:
+.L342:
 	add	ip, ip, #1
-	b	.L330
-.L337:
+	b	.L340
+.L347:
 	.align	2
-.L336:
+.L346:
 	.word	.LANCHOR0
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -3029,26 +3093,26 @@ IsBlkInGcList:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L343
+	ldr	r2, .L353
 	uxth	r0, r0
 	ldr	r3, [r2, #3196]
 	add	r2, r2, #3200
 	ldrh	r2, [r2]
 	add	r2, r3, r2, lsl #1
-.L339:
+.L349:
 	cmp	r3, r2
-	bne	.L341
+	bne	.L351
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L341:
+.L351:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L339
+	bne	.L349
 	mov	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L344:
+.L354:
 	.align	2
-.L343:
+.L353:
 	.word	.LANCHOR0
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -3068,29 +3132,29 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	r3, .L349
+	ldr	r3, .L359
 	mov	ip, #0
 	add	lr, r3, #3200
 	ldr	r1, [r3, #3196]
 	ldrh	r7, [lr]
 	sub	r2, r1, #2
-.L346:
+.L356:
 	uxth	r8, ip
 	cmp	r8, r7
-	bcc	.L348
+	bcc	.L358
 	moveq	ip, r8
 	lsleq	ip, ip, #1
 	strheq	r0, [r1, ip]	@ movhi
 	ldrheq	r2, [lr]
 	addeq	r2, r2, #1
 	strheq	r2, [lr]	@ movhi
-	b	.L347
-.L348:
+	b	.L357
+.L358:
 	ldrh	r8, [r2, #2]!
 	add	ip, ip, #1
 	cmp	r8, r0
-	bne	.L346
-.L347:
+	bne	.L356
+.L357:
 	movw	ip, #3208
 	mov	r0, #12
 	ldrh	r2, [r3, ip]
@@ -3103,9 +3167,9 @@ FtlGcUpdatePage:
 	add	r2, r2, #1
 	strh	r2, [r3, ip]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L350:
+.L360:
 	.align	2
-.L349:
+.L359:
 	.word	.LANCHOR0
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
 	.align	2
@@ -3121,28 +3185,28 @@ FtlGcRefreshBlock:
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	uxth	r4, r0
-	ldr	r0, .L354
+	ldr	r0, .L364
 	mov	r1, r4
 	bl	sftl_printk
-	ldr	r3, .L354+4
+	ldr	r3, .L364+4
 	ldrh	r0, [r3, #226]
 	cmp	r4, r0
-	beq	.L352
+	beq	.L362
 	ldrh	r1, [r3, #224]
 	cmp	r4, r1
-	beq	.L352
+	beq	.L362
 	movw	r2, #65535
 	cmp	r0, r2
 	strheq	r4, [r3, #226]	@ movhi
-	beq	.L352
+	beq	.L362
 	cmp	r1, r2
 	strheq	r4, [r3, #224]	@ movhi
-.L352:
+.L362:
 	mov	r0, #0
 	ldmfd	sp, {r4, fp, sp, pc}
-.L355:
+.L365:
 	.align	2
-.L354:
+.L364:
 	.word	.LC79
 	.word	.LANCHOR0
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
@@ -3158,7 +3222,7 @@ FtlGcMarkBadPhyBlk:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L360
+	ldr	r4, .L370
 	uxth	r5, r0
 	movw	r6, #3210
 	mov	r0, r5
@@ -3166,37 +3230,37 @@ FtlGcMarkBadPhyBlk:
 	mov	r2, r5
 	mov	r7, r0
 	ldrh	r1, [r4, r6]
-	ldr	r0, .L360+4
+	ldr	r0, .L370+4
 	bl	sftl_printk
 	mov	r0, r7
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, r6]
 	mov	r2, #0
-	ldr	r0, .L360+8
-.L357:
+	ldr	r0, .L370+8
+.L367:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L359
+	bhi	.L369
 	cmp	r3, #15
 	movwls	r2, #3210
 	addls	r1, r3, #1
 	strhls	r1, [r4, r2]	@ movhi
 	lslls	r3, r3, #1
-	ldrls	r2, .L360+8
+	ldrls	r2, .L370+8
 	strhls	r5, [r2, r3]	@ movhi
-	b	.L358
-.L359:
+	b	.L368
+.L369:
 	add	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L357
-.L358:
+	bne	.L367
+.L368:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L361:
+.L371:
 	.align	2
-.L360:
+.L370:
 	.word	.LANCHOR0
 	.word	.LC80
 	.word	.LANCHOR0+3212
@@ -3213,15 +3277,15 @@ FtlGcReFreshBadBlk:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L368
+	ldr	r4, .L378
 	movw	r3, #3210
 	ldrh	r2, [r4, r3]
 	cmp	r2, #0
-	beq	.L363
+	beq	.L373
 	ldrh	r1, [r4, #226]
 	movw	r3, #65535
 	cmp	r1, r3
-	bne	.L363
+	bne	.L373
 	movw	r3, #3246
 	movw	r5, #3246
 	ldrh	r1, [r4, r3]
@@ -3229,7 +3293,7 @@ FtlGcReFreshBadBlk:
 	movcs	r2, #0
 	strhcs	r2, [r4, r3]	@ movhi
 	ldrh	r3, [r4, r5]
-	ldr	r2, .L368+4
+	ldr	r2, .L378+4
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	bl	P2V_block_in_plane
@@ -3237,12 +3301,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, r5]
 	add	r3, r3, #1
 	strh	r3, [r4, r5]	@ movhi
-.L363:
+.L373:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L369:
+.L379:
 	.align	2
-.L368:
+.L378:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3212
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3258,13 +3322,13 @@ ftl_malloc:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r1, .L371
+	ldr	r1, .L381
 	bl	__kmalloc
 	ldmfd	sp, {fp, sp, pc}
-.L372:
+.L382:
 	.align	2
-.L371:
-	.word	6291649
+.L381:
+	.word	37748929
 	.size	ftl_malloc, .-ftl_malloc
 	.align	2
 	.global	ftl_free
@@ -3300,46 +3364,46 @@ rknand_print_hex:
 	mov	r9, r3
 	mov	r5, r6
 	mov	r4, r6
-.L375:
+.L385:
 	cmp	r4, r9
-	bcc	.L381
-	ldr	r0, .L383
+	bcc	.L391
+	ldr	r0, .L393
 	bl	sftl_printk
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L381:
+.L391:
 	cmp	r5, #0
-	bne	.L376
+	bne	.L386
 	mov	r3, r6
 	mov	r2, r7
 	mov	r1, r10
-	ldr	r0, .L383+4
+	ldr	r0, .L393+4
 	bl	sftl_printk
-.L376:
+.L386:
 	cmp	r8, #4
 	ldreq	r1, [r7, r4, lsl #2]
-	ldreq	r0, .L383+8
-	beq	.L382
+	ldreq	r0, .L393+8
+	beq	.L392
 	cmp	r8, #2
 	lsleq	r3, r4, #1
-	ldreq	r0, .L383+12
+	ldreq	r0, .L393+12
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
 	ldrheq	r1, [r7, r3]
-	ldrne	r0, .L383+16
-.L382:
+	ldrne	r0, .L393+16
+.L392:
 	add	r5, r5, #1
 	bl	sftl_printk
 	cmp	r5, #15
-	bls	.L380
+	bls	.L390
 	mov	r5, #0
-	ldr	r0, .L383
+	ldr	r0, .L393
 	bl	sftl_printk
-.L380:
+.L390:
 	add	r4, r4, #1
 	add	r6, r6, r8
-	b	.L375
-.L384:
+	b	.L385
+.L394:
 	.align	2
-.L383:
+.L393:
 	.word	.LC85
 	.word	.LC81
 	.word	.LC82
@@ -3360,29 +3424,29 @@ FlashEraseBlocks:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r7, #0
-	ldr	r6, .L401
+	ldr	r6, .L411
 	mov	r8, r2
 	mov	r4, r0
 	mov	r5, r0
 	ldrh	r9, [r6, #12]
 	lsl	r10, r9, #3
-.L386:
+.L396:
 	cmp	r7, r8
-	beq	.L390
+	beq	.L400
 	sub	r2, fp, #48
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	l2p_addr_tran
 	ldr	ip, [fp, #-48]
 	cmp	ip, #0
-	bne	.L387
+	bne	.L397
 	ldr	r3, [fp, #-44]
 	cmp	r10, r3
-	bls	.L387
-	ldr	r5, .L401+4
-	ldr	r6, .L401+8
-	b	.L400
-.L389:
+	bls	.L397
+	ldr	r5, .L411+4
+	ldr	r6, .L411+8
+	b	.L410
+.L399:
 	mvn	r3, #0
 	ldr	r2, [fp, #-44]
 	str	r3, [r4, #-20]
@@ -3393,25 +3457,25 @@ FlashEraseBlocks:
 	mov	r3, #16
 	mov	r2, #4
 	ldr	r1, [r4, #-12]
-	ldr	r0, .L401+12
+	ldr	r0, .L411+12
 	bl	rknand_print_hex
 	mov	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L401+16
+	ldr	r0, .L411+16
 	bl	rknand_print_hex
 	ldr	ip, [fp, #-52]
 	add	ip, ip, #1
-.L400:
+.L410:
 	cmp	ip, r8
 	add	r4, r4, #20
-	bne	.L389
+	bne	.L399
 	bl	dump_stack
-.L390:
+.L400:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L387:
+.L397:
 	ldr	r3, [r6, #3252]
 	uxtb	r0, ip
 	ldr	r1, [fp, #-44]
@@ -3422,7 +3486,7 @@ FlashEraseBlocks:
 	strne	r3, [r5]
 	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L394
+	bne	.L404
 	ldr	r1, [fp, #-44]
 	ldr	r3, [r6, #3252]
 	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
@@ -3431,13 +3495,13 @@ FlashEraseBlocks:
 	cmp	r0, #0
 	mvnne	r3, #0
 	strne	r3, [r5]
-.L394:
+.L404:
 	add	r7, r7, #1
 	add	r5, r5, #20
-	b	.L386
-.L402:
+	b	.L396
+.L412:
 	.align	2
-.L401:
+.L411:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
 	.word	.LC86
@@ -3463,13 +3527,13 @@ FtlFreeSysBlkQueueIn:
 	uxth	r3, r3
 	cmp	r3, r2
 	ldmfdhi	sp, {r4, r5, r6, r7, fp, sp, pc}
-	ldr	r5, .L412
+	ldr	r5, .L422
 	add	r4, r5, #416
 	ldrh	r3, [r4, #6]
 	cmp	r3, #1024
 	ldmfdeq	sp, {r4, r5, r6, r7, fp, sp, pc}
 	cmp	r1, #0
-	beq	.L405
+	beq	.L415
 	mov	r0, r6
 	bl	P2V_block_in_plane
 	mov	r7, r0
@@ -3487,7 +3551,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r5, #2612]
 	add	r3, r3, #1
 	str	r3, [r5, #2612]
-.L405:
+.L415:
 	ldrh	r3, [r4, #6]
 	add	r3, r3, #1
 	strh	r3, [r4, #6]	@ movhi
@@ -3498,9 +3562,9 @@ FtlFreeSysBlkQueueIn:
 	strh	r6, [r2, #8]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L413:
+.L423:
 	.align	2
-.L412:
+.L422:
 	.word	.LANCHOR0
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
@@ -3515,12 +3579,12 @@ FtlFreeSysBlkQueueOut:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r6, .L419
+	ldr	r6, .L429
 	add	r4, r6, #416
 	ldrh	r2, [r4, #6]
 	cmp	r2, #0
 	movweq	r5, #65535
-	beq	.L415
+	beq	.L425
 	ldrh	r3, [r4, #2]
 	sub	r2, r2, #1
 	ldr	r0, [r6, #3272]
@@ -3538,24 +3602,24 @@ FtlFreeSysBlkQueueOut:
 	ldr	r3, [r6, #2612]
 	add	r3, r3, #1
 	str	r3, [r6, #2612]
-.L415:
+.L425:
 	sub	r3, r5, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L416
+	bls	.L426
 	ldrh	r2, [r4, #6]
 	mov	r1, r5
-	ldr	r0, .L419+4
+	ldr	r0, .L429+4
 	bl	sftl_printk
-.L417:
-	b	.L417
-.L416:
+.L427:
+	b	.L427
+.L426:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L420:
+.L430:
 	.align	2
-.L419:
+.L429:
 	.word	.LANCHOR0
 	.word	.LC89
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
@@ -3575,16 +3639,16 @@ ftl_map_blk_alloc_new_blk:
 	mov	r4, r0
 	mov	r3, #0
 	ldr	r2, [r0, #12]
-.L422:
+.L432:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L425
+	bcs	.L435
 	mov	r7, r2
 	add	r3, r3, #1
 	ldrh	r6, [r7]
 	add	r2, r2, #2
 	cmp	r6, #0
-	bne	.L422
+	bne	.L432
 	bl	FtlFreeSysBlkQueueOut
 	sub	r3, r0, #1
 	movw	r2, #65533
@@ -3592,14 +3656,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L423
-	ldr	r3, .L429
-	ldr	r0, .L429+4
+	bls	.L433
+	ldr	r3, .L439
+	ldr	r0, .L439+4
 	ldrh	r2, [r3, #6]
 	bl	sftl_printk
-.L424:
-	b	.L424
-.L423:
+.L434:
+	b	.L434
+.L433:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -3608,26 +3672,76 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L425:
+.L435:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L427
+	bhi	.L437
 	movw	r2, #578
-	ldr	r1, .L429+8
-	ldr	r0, .L429+12
+	ldr	r1, .L439+8
+	ldr	r0, .L439+12
 	bl	sftl_printk
-.L427:
+.L437:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L430:
+.L440:
 	.align	2
-.L429:
+.L439:
 	.word	.LANCHOR0+416
 	.word	.LC90
 	.word	.LANCHOR1+147
 	.word	.LC8
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
+	.global	FlashGetBadBlockList
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r5, .L448
+	mov	r4, r0
+	mov	r6, r1
+	mov	r2, #256
+	mov	r1, #255
+	bl	memset
+	ldr	r3, [r5, #3248]
+	mov	r1, r6
+	mov	r0, r4
+	blx	r3
+	uxth	r0, r0
+	cmp	r0, #50
+	bls	.L442
+	mov	r2, #256
+	mov	r1, #255
+	mov	r0, r4
+	bl	memset
+	mov	r0, #0
+.L442:
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	moveq	r3, r4
+	addeq	r1, r3, r0, lsl #1
+	beq	.L444
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L445:
+	ldrh	r2, [r3]
+	lsr	r2, r2, #1
+	strh	r2, [r3], #2	@ movhi
+.L444:
+	cmp	r3, r1
+	bne	.L445
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L449:
+	.align	2
+.L448:
+	.word	.LANCHOR0
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
 	.global	ftl_memset
 	.syntax unified
 	.arm
@@ -3637,10 +3751,15 @@ ftl_memset:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{fp, ip, lr, pc}
+	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
+	cmp	r2, #0
+	mov	r4, r0
+	beq	.L451
 	bl	memset
-	ldmfd	sp, {fp, sp, pc}
+.L451:
+	mov	r0, r4
+	ldmfd	sp, {r4, fp, sp, pc}
 	.size	ftl_memset, .-ftl_memset
 	.align	2
 	.global	FtlMemInit
@@ -3654,7 +3773,7 @@ FtlMemInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L533
+	ldr	r4, .L556
 	movw	r3, #65535
 	movw	r6, #310
 	mov	r2, #32
@@ -3783,7 +3902,7 @@ FtlMemInit:
 	bl	ftl_malloc
 	str	r0, [r4, #3348]
 	ldrh	r0, [r6]
-	ldr	r3, .L533+4
+	ldr	r3, .L556+4
 	add	r0, r0, #544
 	add	r0, r0, #3
 	lsr	r0, r0, #9
@@ -3877,136 +3996,136 @@ FtlMemInit:
 	str	r0, [r4, #384]
 	lsl	r2, r2, #2
 	mov	r1, r2
-.L433:
+.L456:
 	cmp	r3, lr
-	bcc	.L434
-	ldr	r2, .L533+8
+	bcc	.L457
+	ldr	r2, .L556+8
 	mov	r1, #0
 	add	r3, r2, r3, lsl #2
 	add	r2, r2, #56
 	add	r3, r3, #24
-.L435:
+.L458:
 	cmp	r2, r3
-	bne	.L436
+	bne	.L459
 	ldr	r3, [r4, #3360]
 	cmp	r3, #0
-	bne	.L437
-.L439:
-	ldr	r1, .L533+12
-	ldr	r0, .L533+16
+	bne	.L460
+.L462:
+	ldr	r1, .L556+12
+	ldr	r0, .L556+16
 	bl	sftl_printk
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L434:
+.L457:
 	ldr	r0, [r4, #384]
 	add	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [ip, #4]!
-	b	.L433
-.L436:
+	b	.L456
+.L459:
 	str	r1, [r3, #4]!
-	b	.L435
-.L437:
+	b	.L458
+.L460:
 	ldr	r3, [r4, #3364]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3380]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3384]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #2544]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3388]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #2520]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #384]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #76]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3204]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3272]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3312]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3320]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3340]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3184]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #2540]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r4, #352]
 	cmp	r3, #0
-	beq	.L439
-	ldr	r3, .L533
+	beq	.L462
+	ldr	r3, .L556
 	ldr	r2, [r3, #3368]
 	cmp	r2, #0
-	beq	.L439
+	beq	.L462
 	ldr	r2, [r3, #3372]
 	cmp	r2, #0
-	beq	.L439
+	beq	.L462
 	ldr	r3, [r3, #3376]
 	cmp	r3, #0
-	beq	.L439
+	beq	.L462
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L534:
+.L557:
 	.align	2
-.L533:
+.L556:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+356
@@ -4025,32 +4144,32 @@ FtlBbt2Bitmap:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L541
+	ldr	r3, .L564
 	mov	r4, r0
 	mov	r6, r1
-	ldr	r7, .L541+4
+	ldr	r7, .L564+4
 	sub	r5, r4, #2
 	ldrh	r2, [r3]
 	add	r4, r4, #1020
-	ldr	r8, .L541+8
+	ldr	r8, .L564+8
 	add	r4, r4, #2
 	mov	r1, #0
 	mov	r0, r6
 	lsl	r2, r2, #2
 	bl	ftl_memset
-.L538:
+.L561:
 	ldrh	r3, [r5, #2]
 	movw	r2, #65535
 	cmp	r3, r2
 	ldmfdeq	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 	ldrh	r2, [r7]
 	cmp	r2, r3
-	bhi	.L537
+	bhi	.L560
 	mov	r2, #74
 	mov	r1, r8
-	ldr	r0, .L541+12
+	ldr	r0, .L564+12
 	bl	sftl_printk
-.L537:
+.L560:
 	ldrh	r3, [r5, #2]!
 	mov	r0, #1
 	cmp	r4, r5
@@ -4059,75 +4178,17 @@ FtlBbt2Bitmap:
 	ldr	r2, [r6, r1, lsl #2]
 	orr	r3, r2, r0, lsl r3
 	str	r3, [r6, r1, lsl #2]
-	bne	.L538
+	bne	.L561
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L542:
+.L565:
 	.align	2
-.L541:
+.L564:
 	.word	.LANCHOR0+3392
 	.word	.LANCHOR0+302
 	.word	.LANCHOR1+184
 	.word	.LC8
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	2
-	.global	FtlBbtMemInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlBbtMemInit, %function
-FtlBbtMemInit:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r0, .L544
-	mvn	r2, #0
-	mov	r1, #255
-	add	r3, r0, #356
-	add	r0, r0, #368
-	strh	r2, [r3]	@ movhi
-	mov	r2, #0
-	strh	r2, [r3, #6]	@ movhi
-	mov	r2, #16
-	bl	ftl_memset
-	ldmfd	sp, {fp, sp, pc}
-.L545:
-	.align	2
-.L544:
-	.word	.LANCHOR0
-	.size	FtlBbtMemInit, .-FtlBbtMemInit
-	.align	2
-	.global	FtlFreeSysBlkQueueInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlFreeSysBlkQueueInit, %function
-FtlFreeSysBlkQueueInit:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	ip, .L547
-	mov	r4, #0
-	mov	r2, #2048
-	mov	r1, r4
-	add	r3, ip, #416
-	strh	r0, [r3]	@ movhi
-	add	r0, ip, #424
-	strh	r4, [r3, #2]	@ movhi
-	strh	r4, [r3, #4]	@ movhi
-	strh	r4, [r3, #6]	@ movhi
-	bl	ftl_memset
-	mov	r0, r4
-	ldmfd	sp, {r4, fp, sp, pc}
-.L548:
-	.align	2
-.L547:
-	.word	.LANCHOR0
-	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
-	.align	2
 	.global	ftl_free_no_use_map_blk
 	.syntax unified
 	.arm
@@ -4150,12 +4211,12 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r2, #0
-.L550:
+.L567:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L554
-	ldr	r3, .L569
+	bhi	.L571
+	ldr	r3, .L586
 	mov	r6, #0
 	mov	r8, r6
 	mov	r10, r6
@@ -4164,25 +4225,25 @@ ftl_free_no_use_map_blk:
 	lsl	r3, r3, #1
 	strh	r2, [r5, r3]	@ movhi
 	ldrh	r9, [r5]
-.L555:
+.L572:
 	ldrh	r3, [r4, #10]
 	uxth	r1, r6
 	cmp	r3, r1
-	bhi	.L559
+	bhi	.L576
 	mov	r0, r8
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L554:
+.L571:
 	uxth	r3, r2
 	mov	r1, #0
 	ldr	r0, [r6, r3, lsl #2]
 	ubfx	r0, r0, #10, #16
-.L551:
+.L568:
 	ldrh	ip, [r4, #10]
 	uxth	r3, r1
 	cmp	ip, r3
 	addls	r2, r2, #1
-	bls	.L550
-.L553:
+	bls	.L567
+.L570:
 	uxth	r3, r1
 	add	r1, r1, #1
 	lsl	r3, r3, #1
@@ -4195,28 +4256,28 @@ ftl_free_no_use_map_blk:
 	ldrhne	ip, [r5, r3]
 	addne	ip, ip, #1
 	strhne	ip, [r5, r3]	@ movhi
-	b	.L551
-.L559:
+	b	.L568
+.L576:
 	uxth	r3, r6
 	lsl	r3, r3, #1
 	ldrh	r2, [r5, r3]
 	cmp	r9, r2
-	bls	.L556
+	bls	.L573
 	ldrh	r0, [r7, r3]
 	add	ip, r7, r3
 	cmp	r0, #0
-	bne	.L557
-.L558:
+	bne	.L574
+.L575:
 	add	r6, r6, #1
-	b	.L555
-.L556:
+	b	.L572
+.L573:
 	cmp	r2, #0
-	bne	.L558
+	bne	.L575
 	ldrh	r0, [r7, r3]
 	add	ip, r7, r3
 	cmp	r0, #0
-	beq	.L558
-.L560:
+	beq	.L575
+.L577:
 	mov	r1, #1
 	str	ip, [fp, #-44]
 	bl	FtlFreeSysBlkQueueIn
@@ -4225,15 +4286,15 @@ ftl_free_no_use_map_blk:
 	ldrh	r3, [r4, #8]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L558
-.L557:
+	b	.L575
+.L574:
 	subs	r9, r2, #0
 	mov	r8, r1
-	beq	.L560
-	b	.L558
-.L570:
+	beq	.L577
+	b	.L575
+.L587:
 	.align	2
-.L569:
+.L586:
 	.word	.LANCHOR0+308
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
@@ -4248,7 +4309,7 @@ FtlL2PDataInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L574
+	ldr	r4, .L591
 	mov	r1, #0
 	mvn	r5, #0
 	ldr	r2, [r4, #332]
@@ -4263,26 +4324,26 @@ FtlL2PDataInit:
 	ldr	r0, [r4, #3388]
 	mul	r2, r2, r3
 	bl	ftl_memset
-	ldr	r0, .L574+4
+	ldr	r0, .L591+4
 	mov	r2, #0
 	mov	r3, r4
 	mov	lr, #12
 	mov	r4, r2
 	sub	r6, r0, #28
-.L572:
+.L589:
 	ldrh	r7, [r0]
 	uxth	r1, r2
 	add	ip, r2, #1
 	cmp	r7, r1
-	bhi	.L573
-	ldr	r2, .L574+8
+	bhi	.L590
+	ldr	r2, .L591+8
 	mvn	r1, #0
 	movw	r0, #3396
 	strh	r1, [r3, r0]	@ movhi
 	strh	r1, [r2, #2]	@ movhi
 	ldr	r1, [r3, #332]
 	strh	r1, [r2, #10]	@ movhi
-	ldr	r1, .L574+12
+	ldr	r1, .L591+12
 	strh	r1, [r2, #4]	@ movhi
 	ldrh	r1, [r2, #44]
 	strh	r1, [r2, #8]	@ movhi
@@ -4298,7 +4359,7 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3380]
 	str	r2, [r3, #3420]
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L573:
+.L590:
 	uxth	r2, r2
 	ldr	r7, [r3, #2544]
 	mul	r1, lr, r2
@@ -4314,10 +4375,10 @@ FtlL2PDataInit:
 	add	r2, r7, r2
 	str	r2, [r1, #8]
 	mov	r2, ip
-	b	.L572
-.L575:
+	b	.L589
+.L592:
 	.align	2
-.L574:
+.L591:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+342
 	.word	.LANCHOR0+3396
@@ -4335,7 +4396,7 @@ FtlVariablesInit:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L577
+	ldr	r4, .L594
 	mvn	r3, #0
 	movw	r2, #3442
 	mov	r5, #0
@@ -4362,22 +4423,20 @@ FtlVariablesInit:
 	lsl	r2, r2, #1
 	bl	ftl_memset
 	add	r0, r4, #2464
-	mov	r1, r5
-	mov	r2, #48
+	mov	r1, #48
 	add	r0, r0, #8
-	bl	ftl_memset
+	bl	__memzero
 	add	r0, r4, #2640
-	mov	r2, #512
-	mov	r1, r5
+	mov	r1, #512
 	add	r0, r0, #4
-	bl	ftl_memset
+	bl	__memzero
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L578:
+.L595:
 	.align	2
-.L577:
+.L594:
 	.word	.LANCHOR0
 	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
@@ -4394,7 +4453,7 @@ SupperBlkListInit:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r5, #0
-	ldr	r4, .L590
+	ldr	r4, .L607
 	mov	r1, #0
 	mov	r8, r5
 	mov	r6, r5
@@ -4408,21 +4467,21 @@ SupperBlkListInit:
 	str	r5, [r4, #2528]
 	strh	r5, [r4, r3]	@ movhi
 	strh	r5, [r4, #228]	@ movhi
-.L580:
+.L597:
 	ldrh	r3, [r4, #244]
 	uxth	r10, r5
 	cmp	r10, r3
-	bcs	.L587
-	ldr	r3, .L590+4
+	bcs	.L604
+	ldr	r3, .L607+4
 	mov	r9, r10
 	ldrh	ip, [r4, #236]
 	ldrh	r3, [r3]
 	str	r3, [fp, #-44]
 	mov	r3, #0
 	mov	r7, r3
-	b	.L588
-.L582:
-	ldr	r2, .L590+8
+	b	.L605
+.L599:
+	ldr	r2, .L607+8
 	mov	r1, r9
 	str	ip, [fp, #-52]
 	str	r3, [fp, #-48]
@@ -4436,71 +4495,71 @@ SupperBlkListInit:
 	add	r3, r3, #1
 	addeq	r7, r7, r2
 	uxtheq	r7, r7
-.L588:
+.L605:
 	uxth	r1, r3
 	cmp	ip, r1
-	bhi	.L582
+	bhi	.L599
 	cmp	r7, #0
-	beq	.L583
+	beq	.L600
 	mov	r1, r7
 	mov	r0, #32768
 	bl	__divsi3
 	uxth	r7, r0
-.L584:
+.L601:
 	ldr	r3, [r4, #2520]
 	add	r3, r3, r9, lsl #3
 	strh	r7, [r3, #4]	@ movhi
 	ldrh	r3, [r4, #28]
 	cmp	r3, r10
-	beq	.L585
+	beq	.L602
 	ldrh	r3, [r4, #80]
 	cmp	r3, r10
-	beq	.L585
+	beq	.L602
 	ldrh	r3, [r4, #128]
 	cmp	r3, r10
-	beq	.L585
+	beq	.L602
 	ldr	r2, [r4, #76]
 	lsl	r3, r9, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L586
+	bne	.L603
 	add	r8, r8, #1
 	mov	r0, r9
 	uxth	r8, r8
 	bl	INSERT_FREE_LIST
-.L585:
+.L602:
 	add	r5, r5, #1
-	b	.L580
-.L583:
+	b	.L597
+.L600:
 	ldr	r1, [r4, #76]
 	lsl	r3, r9, #1
 	mvn	r0, #0
 	strh	r0, [r1, r3]	@ movhi
-	b	.L584
-.L586:
+	b	.L601
+.L603:
 	add	r6, r6, #1
 	mov	r0, r9
 	uxth	r6, r6
 	bl	INSERT_DATA_LIST
-	b	.L585
-.L587:
+	b	.L602
+.L604:
 	movw	r2, #2532
 	strh	r8, [r4, #228]	@ movhi
 	strh	r6, [r4, r2]	@ movhi
 	add	r6, r6, r8
 	cmp	r6, r3
-	ble	.L589
+	ble	.L606
 	movw	r2, #2210
-	ldr	r1, .L590+12
-	ldr	r0, .L590+16
+	ldr	r1, .L607+12
+	ldr	r0, .L607+16
 	bl	sftl_printk
-.L589:
+.L606:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L591:
+.L608:
 	.align	2
-.L590:
+.L607:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+306
 	.word	.LANCHOR0+264
@@ -4519,7 +4578,7 @@ FtlGcPageVarInit:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L593
+	ldr	r4, .L610
 	mov	r3, #0
 	movw	r5, #310
 	mov	r1, #255
@@ -4539,62 +4598,12 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L594:
+.L611:
 	.align	2
-.L593:
+.L610:
 	.word	.LANCHOR0
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
 	.align	2
-	.global	FlashGetBadBlockList
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r5, .L602
-	mov	r4, r0
-	mov	r6, r1
-	mov	r2, #256
-	mov	r1, #255
-	bl	ftl_memset
-	ldr	r3, [r5, #3248]
-	mov	r1, r6
-	mov	r0, r4
-	blx	r3
-	uxth	r0, r0
-	cmp	r0, #50
-	bls	.L596
-	mov	r2, #256
-	mov	r1, #255
-	mov	r0, r4
-	bl	ftl_memset
-	mov	r0, #0
-.L596:
-	ldrh	r3, [r5, #14]
-	cmp	r3, #4
-	moveq	r3, r4
-	addeq	r1, r3, r0, lsl #1
-	beq	.L598
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L599:
-	ldrh	r2, [r3]
-	lsr	r2, r2, #1
-	strh	r2, [r3], #2	@ movhi
-.L598:
-	cmp	r3, r1
-	bne	.L599
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L603:
-	.align	2
-.L602:
-	.word	.LANCHOR0
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
-	.align	2
 	.global	ftl_memcpy
 	.syntax unified
 	.arm
@@ -4623,32 +4632,32 @@ FlashReadPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r7, #0
-	ldr	r5, .L644
+	ldr	r5, .L652
 	mov	r8, r1
-	ldr	r9, .L644+4
+	ldr	r9, .L652+4
 	mov	r4, r0
-	ldr	r10, .L644+8
+	ldr	r10, .L652+8
 	ldrh	r3, [r5, #12]
 	str	r3, [fp, #-52]
-.L606:
+.L614:
 	cmp	r7, r8
-	bne	.L619
+	bne	.L627
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L619:
+.L627:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L607
+	beq	.L615
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	bne	.L608
-.L607:
+	bne	.L616
+.L615:
 	mov	r2, #96
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L608:
+.L616:
 	sub	r2, fp, #48
 	sub	r1, fp, #44
 	mov	r0, r4
@@ -4657,7 +4666,7 @@ FlashReadPages:
 	cmp	r0, #3
 	mvnhi	r3, #0
 	strhi	r3, [r4]
-	bhi	.L610
+	bhi	.L618
 	ldr	r6, [r4, #8]
 	ldr	r3, [r4, #12]
 	ldr	ip, [r5, #3260]
@@ -4669,7 +4678,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L613
+	bne	.L621
 	ldr	r0, [fp, #-52]
 	add	r2, r6, #2048
 	ldr	r3, [r4, #12]
@@ -4680,21 +4689,21 @@ FlashReadPages:
 	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
 	blx	ip
 	cmn	r0, #1
-	beq	.L614
+	beq	.L622
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	cmn	r2, #1
-	bne	.L615
+	bne	.L623
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L615
+	bne	.L623
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L615
-.L614:
+	beq	.L623
+.L622:
 	mvn	r3, #0
 	str	r3, [r4]
-.L615:
+.L623:
 	ldr	r3, [r4]
 	sub	r0, r0, #256
 	clz	r0, r0
@@ -4707,45 +4716,45 @@ FlashReadPages:
 	ldr	r3, [r4]
 	cmn	r3, #1
 	cmpne	r3, #256
-	bne	.L613
+	bne	.L621
 	ldr	r1, [r4, #4]
 	ldr	r2, [fp, #-44]
-	ldr	r0, .L644+12
+	ldr	r0, .L652+12
 	bl	sftl_printk
 	ldr	r1, [r4, #8]
 	cmp	r1, #0
-	beq	.L618
+	beq	.L626
 	mov	r3, #4
-	ldr	r0, .L644+16
+	ldr	r0, .L652+16
 	mov	r2, r3
 	bl	rknand_print_hex
-.L618:
+.L626:
 	ldr	r1, [r4, #12]
 	cmp	r1, #0
-	beq	.L613
+	beq	.L621
 	mov	r3, #4
-	ldr	r0, .L644+20
+	ldr	r0, .L652+20
 	mov	r2, r3
 	bl	rknand_print_hex
-.L613:
+.L621:
 	ldr	r3, [r5, #3324]
 	cmp	r6, r3
-	bne	.L610
+	bne	.L618
 	ldr	r0, [r4, #8]
 	cmp	r6, r0
-	beq	.L610
-	ldr	r3, .L644+24
+	beq	.L618
+	ldr	r3, .L652+24
 	mov	r1, r6
 	ldrh	r2, [r3]
 	lsl	r2, r2, #9
 	bl	ftl_memcpy
-.L610:
+.L618:
 	add	r7, r7, #1
 	add	r4, r4, #20
-	b	.L606
-.L645:
+	b	.L614
+.L653:
 	.align	2
-.L644:
+.L652:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+216
 	.word	.LC8
@@ -4766,7 +4775,7 @@ FtlLoadFactoryBbt:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L656
+	ldr	r5, .L664
 	mov	r7, #0
 	add	r6, r5, #364
 	ldr	r3, [r5, #3304]
@@ -4775,25 +4784,25 @@ FtlLoadFactoryBbt:
 	sub	r9, r6, #64
 	str	r3, [r5, #3464]
 	str	r8, [r5, #3468]
-.L647:
-	ldr	r3, .L656+4
+.L655:
+	ldr	r3, .L664+4
 	ldrh	r3, [r3]
 	cmp	r7, r3
-	bcc	.L652
+	bcc	.L660
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L652:
+.L660:
 	ldrh	r4, [r9]
 	mvn	r3, #0
-	ldr	r10, .L656+8
+	ldr	r10, .L664+8
 	strh	r3, [r6, #2]!	@ movhi
 	add	r4, r4, r3
 	uxth	r4, r4
-.L648:
+.L656:
 	ldrh	r3, [r9]
 	sub	r2, r3, #16
 	cmp	r4, r2
-	ble	.L650
+	ble	.L658
 	mla	r3, r7, r3, r4
 	mov	r2, #1
 	mov	r1, r2
@@ -4803,22 +4812,22 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	beq	.L649
+	beq	.L657
 	ldrh	r2, [r8]
 	movw	r3, #61664
 	cmp	r2, r3
-	bne	.L649
+	bne	.L657
 	strh	r4, [r6]	@ movhi
-.L650:
+.L658:
 	add	r7, r7, #1
-	b	.L647
-.L649:
+	b	.L655
+.L657:
 	sub	r4, r4, #1
 	uxth	r4, r4
-	b	.L648
-.L657:
+	b	.L656
+.L665:
 	.align	2
-.L656:
+.L664:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+258
 	.word	.LANCHOR0+3456
@@ -4837,7 +4846,7 @@ FtlGetLastWrittenPage:
 	sub	fp, ip, #4
 	sub	sp, sp, #84
 	cmp	r1, #1
-	ldr	r3, .L669
+	ldr	r3, .L677
 	movwne	r2, #306
 	lsl	r6, r0, #10
 	mov	r7, r1
@@ -4859,12 +4868,12 @@ FtlGetLastWrittenPage:
 	ldr	r3, [fp, #-96]
 	cmn	r3, #1
 	moveq	r8, #0
-	beq	.L662
-.L661:
+	beq	.L670
+.L669:
 	mov	r0, r5
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L665:
+.L673:
 	add	r3, r8, r5
 	mov	r2, r7
 	add	r3, r3, r3, lsr #31
@@ -4877,25 +4886,25 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-96]
 	cmn	r3, #1
-	bne	.L663
+	bne	.L671
 	ldr	r3, [fp, #-92]
 	cmn	r3, #1
-	bne	.L663
+	bne	.L671
 	ldr	r3, [fp, #-116]
 	cmn	r3, #1
 	subne	r4, r4, #1
 	sxthne	r5, r4
-	bne	.L662
-.L663:
+	bne	.L670
+.L671:
 	add	r4, r4, #1
 	sxth	r8, r4
-.L662:
-	cmp	r8, r5
-	ble	.L665
-	b	.L661
 .L670:
+	cmp	r8, r5
+	ble	.L673
+	b	.L669
+.L678:
 	.align	2
-.L669:
+.L677:
 	.word	.LANCHOR0
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
@@ -4912,7 +4921,7 @@ FtlScanSysBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	r5, #0
-	ldr	r4, .L753
+	ldr	r4, .L761
 	mov	r1, r5
 	ldr	r2, [r4, #332]
 	add	r3, r4, #3440
@@ -4943,15 +4952,15 @@ FtlScanSysBlk:
 	mov	r2, #16
 	mov	r1, #255
 	add	r0, r6, #2304
-	bl	ftl_memset
+	bl	memset
 	ldrh	r3, [r4, #244]
 	str	r3, [fp, #-44]
-.L672:
+.L680:
 	ldrh	r3, [r5, #246]
 	ldr	r2, [fp, #-44]
 	cmp	r3, r2
-	bls	.L713
-	ldr	r8, .L753+4
+	bls	.L721
+	ldr	r8, .L761+4
 	mov	r6, #0
 	ldrh	ip, [r5, #236]
 	mov	r10, r6
@@ -4960,8 +4969,8 @@ FtlScanSysBlk:
 	ldr	r2, [r5, #3180]
 	ldr	r3, [r5, #3184]
 	str	r1, [fp, #-48]
-	b	.L714
-.L674:
+	b	.L722
+.L682:
 	ldr	r1, [fp, #-44]
 	ldrb	r0, [r8, r6]	@ zero_extendqisi2
 	str	r3, [fp, #-64]
@@ -4974,7 +4983,7 @@ FtlScanSysBlk:
 	ldr	ip, [fp, #-56]
 	ldr	r2, [fp, #-60]
 	ldr	r3, [fp, #-64]
-	bne	.L673
+	bne	.L681
 	mov	r1, #20
 	mla	r0, r1, r10, r9
 	ldr	r1, [fp, #-52]
@@ -4990,31 +4999,31 @@ FtlScanSysBlk:
 	str	r1, [r0, #12]
 	add	r1, r10, #1
 	uxth	r10, r1
-.L673:
+.L681:
 	add	r6, r6, #1
-.L714:
+.L722:
 	uxth	r1, r6
 	cmp	ip, r1
-	bhi	.L674
+	bhi	.L682
 	cmp	r10, #0
-	bne	.L675
-.L712:
+	bne	.L683
+.L720:
 	ldr	r3, [fp, #-44]
 	add	r3, r3, #1
 	uxth	r3, r3
 	str	r3, [fp, #-44]
-	b	.L672
-.L675:
+	b	.L680
+.L683:
 	mov	r2, #1
 	mov	r1, r10
 	mov	r0, r9
 	bl	FlashReadPages
 	mov	r3, #0
-.L752:
+.L760:
 	str	r3, [fp, #-48]
 	ldrh	r3, [fp, #-48]
 	cmp	r10, r3
-	bls	.L712
+	bls	.L720
 	ldr	r3, [fp, #-48]
 	mov	r9, #20
 	mul	r9, r9, r3
@@ -5026,9 +5035,9 @@ FtlScanSysBlk:
 	cmn	r3, #1
 	lsr	ip, r1, #10
 	uxth	r8, ip
-	bne	.L679
+	bne	.L687
 	mov	r3, #16
-.L681:
+.L689:
 	ldr	r0, [r4, #3292]
 	str	ip, [fp, #-56]
 	str	r3, [fp, #-52]
@@ -5044,74 +5053,74 @@ FtlScanSysBlk:
 	ldr	ip, [fp, #-56]
 	cmp	r2, r3
 	ldr	r3, [fp, #-52]
-	bne	.L678
+	bne	.L686
 	ldr	r3, [r4, #3292]
 	mvn	r2, #0
 	str	r2, [r3, r9]
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r9]
 	cmp	r3, r2
-	bne	.L679
-.L680:
+	bne	.L687
+.L688:
 	mov	r1, #1
-	b	.L751
-.L678:
+	b	.L759
+.L686:
 	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r9]
 	cmn	r2, #1
-	bne	.L679
+	bne	.L687
 	sub	r3, r3, #1
 	uxth	r3, r3
 	cmp	r3, #0
-	bne	.L681
-	b	.L680
-.L679:
+	bne	.L689
+	b	.L688
+.L687:
 	ldr	r2, [r5, #2592]
 	ldr	r3, [r6, #4]
 	cmn	r2, #1
-	beq	.L682
+	beq	.L690
 	cmp	r2, r3
-	bhi	.L683
-.L682:
+	bhi	.L691
+.L690:
 	cmn	r3, #1
 	addne	r2, r3, #1
 	strne	r2, [r7, #2592]
-.L683:
+.L691:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L685
-	bhi	.L686
+	beq	.L693
+	bhi	.L694
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L687
-.L684:
+	beq	.L695
+.L692:
 	ldr	r3, [fp, #-48]
 	add	r3, r3, #1
-	b	.L752
-.L686:
+	b	.L760
+.L694:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L688
+	beq	.L696
 	movw	r3, #65535
 	cmp	r2, r3
 	moveq	r1, #0
-	bne	.L684
-.L751:
+	bne	.L692
+.L759:
 	uxth	r0, ip
 	bl	FtlFreeSysBlkQueueIn
-	b	.L684
-.L688:
-	ldr	r9, .L753+8
+	b	.L692
+.L696:
+	ldr	r9, .L761+8
 	ldr	r3, [r4, #332]
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	bls	.L690
+	bls	.L698
 	movw	r2, #1225
-	ldr	r1, .L753+12
-	ldr	r0, .L753+16
+	ldr	r1, .L761+12
+	ldr	r0, .L761+16
 	bl	sftl_printk
-.L690:
+.L698:
 	ldr	r0, [r4, #332]
 	ldrh	r2, [r9]
 	ldr	ip, [r4, #3384]
@@ -5122,34 +5131,34 @@ FtlScanSysBlk:
 	sxth	r3, r3
 	sxth	r1, r1
 	str	r1, [fp, #-52]
-.L691:
+.L699:
 	ldr	r1, [fp, #-52]
 	cmp	r3, r1
-	bgt	.L697
+	bgt	.L705
 	cmp	r3, #0
-	bge	.L729
-	b	.L684
-.L697:
+	bge	.L737
+	b	.L692
+.L705:
 	lsl	lr, r3, #2
 	ldr	r1, [r6, #4]
 	str	lr, [fp, #-56]
 	ldr	lr, [ip, r3, lsl #2]
 	cmp	r1, lr
-	bls	.L692
+	bls	.L700
 	ldr	r1, [ip]
 	cmp	r1, #0
-	bne	.L693
+	bne	.L701
 	cmp	r0, r2
 	addne	r2, r2, #1
 	strhne	r2, [r9]	@ movhi
-.L693:
+.L701:
 	uxth	ip, r3
 	mov	r1, #0
-.L694:
+.L702:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L695
+	bhi	.L703
 	ldr	r1, [r6, #4]
 	cmp	r3, #0
 	ldr	r2, [r7, #3384]
@@ -5158,16 +5167,16 @@ FtlScanSysBlk:
 	lsl	r2, r3, #1
 	ldr	r1, [r7, #3360]
 	strh	r8, [r1, r2]	@ movhi
-	blt	.L684
-	ldr	r2, .L753+8
+	blt	.L692
+	ldr	r2, .L761+8
 	ldr	r1, [r7, #332]
 	ldrh	r2, [r2]
 	sub	r1, r1, r2
 	sub	r1, r1, #1
 	sxth	r1, r1
 	cmp	r3, r1
-	bgt	.L684
-.L729:
+	bgt	.L692
+.L737:
 	add	r2, r2, #1
 	ldr	r1, [r6, #4]
 	strh	r2, [r9]	@ movhi
@@ -5175,10 +5184,10 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
 	ldr	r2, [r4, #3360]
-.L749:
+.L757:
 	strh	r8, [r2, r3]	@ movhi
-	b	.L684
-.L695:
+	b	.L692
+.L703:
 	ldr	r0, [r5, #3384]
 	add	r1, r1, #1
 	add	lr, r0, r2, lsl #2
@@ -5189,22 +5198,22 @@ FtlScanSysBlk:
 	add	lr, r0, r2
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r2]	@ movhi
-	b	.L694
-.L692:
+	b	.L702
+.L700:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L691
-.L687:
-	ldr	r9, .L753+20
+	b	.L699
+.L695:
+	ldr	r9, .L761+20
 	ldrh	r2, [r9]
 	ldrh	r3, [r9, #-24]
 	cmp	r2, r3
-	bls	.L700
+	bls	.L708
 	movw	r2, #1266
-	ldr	r1, .L753+12
-	ldr	r0, .L753+16
+	ldr	r1, .L761+12
+	ldr	r0, .L761+16
 	bl	sftl_printk
-.L700:
+.L708:
 	ldrh	r2, [r9, #-24]
 	ldrh	r1, [r9]
 	ldr	ip, [r4, #3372]
@@ -5212,16 +5221,16 @@ FtlScanSysBlk:
 	sxth	r3, r0
 	sub	r0, r0, r1
 	str	r0, [fp, #-52]
-.L701:
+.L709:
 	ldr	r0, [fp, #-52]
 	cmp	r3, r0
-	ble	.L706
+	ble	.L714
 	lsl	lr, r3, #2
 	ldr	r0, [r6, #4]
 	str	lr, [fp, #-56]
 	ldr	lr, [ip, r3, lsl #2]
 	cmp	r0, lr
-	bls	.L702
+	bls	.L710
 	sub	r2, r2, r1
 	ldr	r0, [ip]
 	clz	r2, r2
@@ -5233,11 +5242,11 @@ FtlScanSysBlk:
 	addeq	r1, r1, #1
 	strheq	r1, [r9]	@ movhi
 	mov	r1, #0
-.L704:
+.L712:
 	uxth	r0, r1
 	sxth	r2, r1
 	cmp	ip, r0
-	bhi	.L705
+	bhi	.L713
 	ldr	r1, [r6, #4]
 	ldr	r2, [r7, #3372]
 	ldr	r0, [fp, #-56]
@@ -5245,17 +5254,17 @@ FtlScanSysBlk:
 	lsl	r2, r3, #1
 	ldr	r1, [r7, #352]
 	strh	r8, [r1, r2]	@ movhi
-.L706:
+.L714:
 	cmp	r3, #0
-	blt	.L684
-	ldr	r0, .L753+20
+	blt	.L692
+	ldr	r0, .L761+20
 	ldrh	r2, [r0, #-24]
 	ldrh	r1, [r0]
 	sub	r2, r2, #1
 	sub	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L684
+	bgt	.L692
 	add	r1, r1, #1
 	ldr	r2, [r4, #3372]
 	strh	r1, [r0]	@ movhi
@@ -5263,8 +5272,8 @@ FtlScanSysBlk:
 	str	r1, [r2, r3, lsl #2]
 	lsl	r3, r3, #1
 	ldr	r2, [r4, #352]
-	b	.L749
-.L705:
+	b	.L757
+.L713:
 	ldr	r0, [r5, #3372]
 	add	r1, r1, #1
 	add	lr, r0, r2, lsl #2
@@ -5275,81 +5284,81 @@ FtlScanSysBlk:
 	add	lr, r0, r2
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r2]	@ movhi
-	b	.L704
-.L702:
+	b	.L712
+.L710:
 	sub	r3, r3, #1
 	sxth	r3, r3
-	b	.L701
-.L685:
-	ldr	r9, .L753+24
+	b	.L709
+.L693:
+	ldr	r9, .L761+24
 	movw	r2, #65535
 	ldrh	r1, [r9]
 	cmp	r1, r2
 	strheq	r8, [r9]	@ movhi
-	beq	.L750
+	beq	.L758
 	ldrh	r0, [r9, #4]
 	cmp	r0, r2
-	beq	.L709
+	beq	.L717
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L709:
+.L717:
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #2636]
 	cmp	r2, r3
 	strhcs	r8, [r9, #4]	@ movhi
-	bcs	.L684
+	bcs	.L692
 	ldrh	r3, [r9]
 	strh	r8, [r9]	@ movhi
 	strh	r3, [r9, #4]	@ movhi
 	ldr	r3, [r6, #4]
-.L750:
+.L758:
 	str	r3, [r4, #2636]
-	b	.L684
-.L713:
+	b	.L692
+.L721:
 	ldr	r2, [r5, #3360]
 	ldrh	r3, [r2]
 	cmp	r3, #0
-	beq	.L715
-.L718:
+	beq	.L723
+.L726:
 	ldr	r0, [r4, #352]
 	ldrh	r2, [r0]
 	cmp	r2, #0
-	beq	.L716
-.L717:
-	ldr	r3, .L753+8
+	beq	.L724
+.L725:
+	ldr	r3, .L761+8
 	ldrh	r2, [r3]
 	ldr	r3, [r4, #332]
 	cmp	r2, r3
-	bls	.L748
+	bls	.L756
 	movw	r2, #1391
-	ldr	r1, .L753+12
-	ldr	r0, .L753+16
+	ldr	r1, .L761+12
+	ldr	r0, .L761+16
 	bl	sftl_printk
-.L748:
+.L756:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L715:
-	ldr	r1, .L753+8
+.L723:
+	ldr	r1, .L761+8
 	ldrh	r1, [r1]
 	cmp	r1, #0
 	ldrne	r1, [r5, #332]
-	beq	.L718
-.L719:
+	beq	.L726
+.L727:
 	sxth	ip, r3
 	cmp	ip, r1
-	bcs	.L718
+	bcs	.L726
 	lsl	r0, ip, #1
 	add	r3, r3, #1
 	ldrh	r0, [r2, r0]
 	cmp	r0, #0
-	beq	.L719
+	beq	.L727
 	mov	r3, ip
 	mov	lr, #0
-.L720:
+.L728:
 	ldr	r2, [r7, #332]
 	cmp	r3, r2
-	bcs	.L718
+	bcs	.L726
 	ldr	r1, [r7, #3360]
 	lsl	r2, r3, #1
 	sub	r0, r3, ip
@@ -5363,29 +5372,29 @@ FtlScanSysBlk:
 	str	r5, [r1, r0, lsl #2]
 	ldr	r1, [r7, #3360]
 	strh	lr, [r1, r2]	@ movhi
-	b	.L720
-.L716:
-	ldr	r3, .L753+20
+	b	.L728
+.L724:
+	ldr	r3, .L761+20
 	ldrh	r1, [r3]
 	cmp	r1, #0
 	ldrhne	ip, [r3, #-24]!
 	movne	r1, r3
-	beq	.L717
-.L725:
+	beq	.L725
+.L733:
 	sxth	r3, r2
 	cmp	r3, ip
 	mov	lr, r3
-	bge	.L717
+	bge	.L725
 	lsl	r5, r3, #1
 	add	r2, r2, #1
 	ldrh	r5, [r0, r5]
 	cmp	r5, #0
-	beq	.L725
+	beq	.L733
 	mov	r5, #0
-.L726:
+.L734:
 	ldrh	r2, [r1]
 	cmp	r3, r2
-	bge	.L717
+	bge	.L725
 	ldr	r0, [r4, #352]
 	lsl	r2, r3, #1
 	sub	ip, r3, lr
@@ -5399,10 +5408,10 @@ FtlScanSysBlk:
 	str	r6, [r0, ip, lsl #2]
 	ldr	r0, [r4, #352]
 	strh	r5, [r0, r2]	@ movhi
-	b	.L726
-.L754:
+	b	.L734
+.L762:
 	.align	2
-.L753:
+.L761:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+316
 	.word	.LANCHOR0+3440
@@ -5423,8 +5432,8 @@ FtlLoadBbt:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L787
-	ldr	r8, .L787+4
+	ldr	r4, .L795
+	ldr	r8, .L795+4
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #3456
 	ldr	r6, [r4, #3336]
@@ -5435,11 +5444,11 @@ FtlLoadBbt:
 	ldrh	r5, [r4, r3]
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L756:
+.L764:
 	ldrh	r3, [r8]
 	sub	r3, r3, #16
 	cmp	r5, r3
-	ble	.L759
+	ble	.L767
 	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
@@ -5448,7 +5457,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	bne	.L757
+	bne	.L765
 	ldr	r3, [r4, #3460]
 	mov	r2, #1
 	mov	r1, r2
@@ -5456,42 +5465,42 @@ FtlLoadBbt:
 	add	r3, r3, #1
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
-.L757:
+.L765:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L758
+	beq	.L766
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L758
+	bne	.L766
 	ldr	r2, [r6, #4]
-	ldr	r3, .L787+8
+	ldr	r3, .L795+8
 	str	r2, [r4, #364]
 	ldrh	r2, [r6, #8]
 	strh	r5, [r3]	@ movhi
 	strh	r2, [r3, #4]	@ movhi
-.L759:
-	ldr	r5, .L787+8
+.L767:
+	ldr	r5, .L795+8
 	movw	r2, #65535
 	ldrh	r3, [r5]
 	cmp	r3, r2
-	beq	.L773
+	beq	.L781
 	ldrh	r3, [r5, #4]
 	cmp	r3, r2
-	beq	.L763
+	beq	.L771
 	lsl	r3, r3, #10
 	mov	r2, #1
 	mov	r1, r2
-	ldr	r0, .L787+12
+	ldr	r0, .L795+12
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L763
+	beq	.L771
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L763
+	bne	.L771
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #364]
 	cmp	r3, r2
@@ -5500,53 +5509,53 @@ FtlLoadBbt:
 	ldrhhi	r3, [r6, #8]
 	strhhi	r2, [r5]	@ movhi
 	strhhi	r3, [r5, #4]	@ movhi
-.L763:
-	ldr	r8, .L787+12
+.L771:
+	ldr	r8, .L795+12
 	mov	r1, #1
 	ldrh	r0, [r5]
 	bl	FtlGetLastWrittenPage
 	sxth	r7, r0
 	add	r0, r0, #1
 	strh	r0, [r5, #2]	@ movhi
-.L765:
+.L773:
 	cmp	r7, #0
-	bge	.L768
+	bge	.L776
 	mov	r2, #251
-	ldr	r1, .L787+16
-	ldr	r0, .L787+20
+	ldr	r1, .L795+16
+	ldr	r0, .L795+20
 	bl	sftl_printk
-.L767:
+.L775:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r5, #6]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L770
+	beq	.L778
 	ldr	r2, [r4, #232]
 	cmp	r0, r2
-	beq	.L770
+	beq	.L778
 	ldrh	r3, [r4, #246]
 	lsr	r3, r3, #2
 	cmp	r0, r3
 	cmpcc	r2, r3
-	bcs	.L770
+	bcs	.L778
 	bl	FtlSysBlkNumInit
-.L770:
-	ldr	r6, .L787+24
+.L778:
+	ldr	r6, .L795+24
 	mov	r5, #0
-	ldr	r8, .L787+28
+	ldr	r8, .L795+28
 	sub	r7, r6, #122
-.L771:
+.L779:
 	ldrh	r3, [r7]
 	cmp	r5, r3
-	bcc	.L772
+	bcc	.L780
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L758:
+.L766:
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L756
-.L768:
+	b	.L764
+.L776:
 	ldrh	r3, [r5]
 	mov	r2, #1
 	mov	r1, r2
@@ -5558,16 +5567,16 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L766
+	beq	.L774
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	beq	.L767
-.L766:
+	beq	.L775
+.L774:
 	sub	r7, r7, #1
 	sxth	r7, r7
-	b	.L765
-.L772:
+	b	.L773
+.L780:
 	ldrh	r2, [r8]
 	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
@@ -5575,13 +5584,13 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	add	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L771
-.L773:
+	b	.L779
+.L781:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L788:
+.L796:
 	.align	2
-.L787:
+.L795:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+302
 	.word	.LANCHOR0+356
@@ -5605,7 +5614,7 @@ FlashProgPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #48
 	mov	r8, #0
-	ldr	r6, .L828
+	ldr	r6, .L836
 	mov	r4, r0
 	str	r3, [fp, #-88]
 	mov	r5, r0
@@ -5617,52 +5626,52 @@ FlashProgPages:
 	str	r3, [fp, #-72]
 	lsl	r3, r3, #3
 	str	r3, [fp, #-80]
-.L790:
+.L798:
 	ldr	r3, [fp, #-76]
 	cmp	r8, r3
-	bne	.L804
+	bne	.L812
 	ldr	r3, [fp, #-88]
 	cmp	r3, #0
-	beq	.L798
+	beq	.L806
 	mov	r5, #0
-	ldr	r6, .L828+4
-	ldr	r7, .L828+8
-	b	.L805
-.L804:
+	ldr	r6, .L836+4
+	ldr	r7, .L836+8
+	b	.L813
+.L812:
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	beq	.L791
+	beq	.L799
 	ldr	r3, [r5, #12]
 	cmp	r3, #0
-	bne	.L792
-.L791:
+	bne	.L800
+.L799:
 	mov	r2, #148
-	ldr	r1, .L828+12
-	ldr	r0, .L828+16
+	ldr	r1, .L836+12
+	ldr	r0, .L836+16
 	bl	sftl_printk
-.L792:
+.L800:
 	sub	r2, fp, #68
 	sub	r1, fp, #64
 	mov	r0, r5
 	bl	l2p_addr_tran
 	ldr	r7, [fp, #-68]
 	cmp	r7, #3
-	bls	.L793
-.L827:
+	bls	.L801
+.L835:
 	mvn	r3, #0
 	str	r3, [r5]
-	b	.L794
-.L793:
+	b	.L802
+.L801:
 	cmp	r7, #0
-	bne	.L795
+	bne	.L803
 	ldr	r3, [fp, #-64]
 	ldr	r2, [fp, #-80]
 	cmp	r2, r3
-	bls	.L795
-	ldr	r5, .L828+12
-	ldr	r6, .L828+20
-	b	.L826
-.L797:
+	bls	.L803
+	ldr	r5, .L836+12
+	ldr	r6, .L836+20
+	b	.L834
+.L805:
 	mvn	r3, #0
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5673,37 +5682,37 @@ FlashProgPages:
 	mov	r3, #16
 	mov	r2, #4
 	ldr	r1, [r4, #-12]
-	ldr	r0, .L828+24
+	ldr	r0, .L836+24
 	bl	rknand_print_hex
 	mov	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L828+28
+	ldr	r0, .L836+28
 	bl	rknand_print_hex
-.L826:
+.L834:
 	ldr	r3, [fp, #-76]
 	add	r4, r4, #20
 	cmp	r7, r3
-	bne	.L797
+	bne	.L805
 	bl	dump_stack
-.L798:
+.L806:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L795:
+.L803:
 	ldr	r1, [r5, #8]
 	tst	r1, #63
 	moveq	r7, r1
-	beq	.L799
+	beq	.L807
 	ldr	r7, [r10, #3324]
 	cmp	r1, r7
-	beq	.L799
-	ldr	r3, .L828+32
+	beq	.L807
+	ldr	r3, .L836+32
 	mov	r0, r7
 	ldrh	r2, [r3]
 	lsl	r2, r2, #9
 	bl	ftl_memcpy
-.L799:
+.L807:
 	ldr	r3, [r5, #12]
 	mov	r2, r7
 	ldr	ip, [r10, #3256]
@@ -5716,7 +5725,7 @@ FlashProgPages:
 	strne	r3, [r5]
 	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L794
+	bne	.L802
 	ldr	r0, [fp, #-72]
 	add	r2, r7, #2048
 	ldr	r3, [r5, #12]
@@ -5727,12 +5736,12 @@ FlashProgPages:
 	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
 	blx	ip
 	cmp	r0, #0
-	bne	.L827
-.L794:
+	bne	.L835
+.L802:
 	add	r8, r8, #1
 	add	r5, r5, #20
-	b	.L790
-.L810:
+	b	.L798
+.L818:
 	ldr	r2, [r9, #3324]
 	mov	r3, #0
 	mov	r1, #1
@@ -5750,59 +5759,59 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	r10, [fp, #-60]
 	cmn	r10, #1
-	bne	.L806
+	bne	.L814
 	ldr	r1, [r4, #4]
 	mov	r0, r6
 	bl	sftl_printk
 	str	r10, [r4]
-.L806:
+.L814:
 	ldr	r10, [fp, #-60]
 	cmp	r10, #256
-	bne	.L807
+	bne	.L815
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
 	str	r10, [r4]
-.L807:
+.L815:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L808
+	beq	.L816
 	ldr	r2, [r3]
-	ldr	r3, .L828
+	ldr	r3, .L836
 	ldr	r3, [r3, #3332]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L808
+	beq	.L816
 	ldr	r1, [r4, #4]
-	ldr	r0, .L828+36
+	ldr	r0, .L836+36
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L808:
+.L816:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L809
+	beq	.L817
 	ldr	r2, [r3]
-	ldr	r3, .L828
+	ldr	r3, .L836
 	ldr	r3, [r3, #3324]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L809
+	beq	.L817
 	ldr	r1, [r4, #4]
-	ldr	r0, .L828+40
+	ldr	r0, .L836+40
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r4]
-.L809:
+.L817:
 	add	r5, r5, #1
 	add	r4, r4, #20
-.L805:
+.L813:
 	cmp	r8, r5
-	bne	.L810
-	b	.L798
-.L829:
+	bne	.L818
+	b	.L806
+.L837:
 	.align	2
-.L828:
+.L836:
 	.word	.LANCHOR0
 	.word	.LC95
 	.word	.LC96
@@ -5829,7 +5838,7 @@ FtlLowFormatEraseBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r10, #0
-	ldr	ip, .L872
+	ldr	ip, .L880
 	uxtb	r5, r1
 	uxth	r3, r0
 	mov	r6, r10
@@ -5838,27 +5847,27 @@ FtlLowFormatEraseBlock:
 	mov	r8, #20
 	str	r3, [fp, #-44]
 	str	r3, [ip, #3288]
-.L831:
+.L839:
 	ldrh	r1, [r9, #236]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L835
+	bhi	.L843
 	cmp	r6, #0
-	beq	.L830
+	beq	.L838
 	mov	r7, #0
 	mov	r8, #20
 	mov	r2, r6
 	mov	r1, #0
 	ldr	r0, [r9, #3272]
 	bl	FlashEraseBlocks
-.L838:
+.L846:
 	uxth	r3, r7
 	cmp	r6, r3
-	bhi	.L840
-.L841:
+	bhi	.L848
+.L849:
 	cmp	r5, #0
 	mov	r7, #0
-	ldrne	r3, .L872+4
+	ldrne	r3, .L880+4
 	moveq	r3, #2
 	streq	r5, [fp, #-48]
 	streq	r3, [fp, #-52]
@@ -5866,16 +5875,16 @@ FtlLowFormatEraseBlock:
 	strne	r3, [fp, #-52]
 	movne	r3, #1
 	strne	r3, [fp, #-48]
-.L850:
+.L858:
 	mov	r10, #0
 	mov	r6, r10
-.L842:
+.L850:
 	ldrh	r1, [r9, #236]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L845
+	bhi	.L853
 	cmp	r6, #0
-	beq	.L830
+	beq	.L838
 	mov	r8, #0
 	mov	r10, #20
 	mov	r3, #1
@@ -5883,37 +5892,37 @@ FtlLowFormatEraseBlock:
 	mov	r1, r6
 	ldr	r0, [r9, #3272]
 	bl	FlashProgPages
-.L847:
+.L855:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L849
+	bhi	.L857
 	add	r7, r7, #1
 	ldr	r2, [fp, #-52]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L850
+	bhi	.L858
 	mov	r7, #0
 	mov	r8, #20
-.L851:
+.L859:
 	uxth	r3, r7
 	cmp	r6, r3
-	bhi	.L853
+	bhi	.L861
 	ldr	r3, [fp, #-44]
 	adds	r5, r5, #0
 	movne	r5, #1
 	cmp	r3, #63
 	orrls	r5, r5, #1
 	cmp	r5, #0
-	beq	.L830
+	beq	.L838
 	mov	r2, r6
 	ldr	r1, [fp, #-48]
 	ldr	r0, [r9, #3272]
 	bl	FlashEraseBlocks
-.L830:
+.L838:
 	mov	r0, r4
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L835:
+.L843:
 	uxth	r3, r10
 	ldr	r0, [r9, #3272]
 	mov	r2, #0
@@ -5925,23 +5934,23 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r5, #0
 	mov	r7, r0
-	beq	.L832
+	beq	.L840
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L833
-.L832:
+	bne	.L841
+.L840:
 	mov	r0, r7
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	bne	.L833
+	bne	.L841
 	ldr	r1, [r9, #3272]
 	lsl	r7, r7, #10
 	ldr	r3, [r9, #3320]
 	mla	r1, r8, r6, r1
 	str	r3, [r1, #8]
-	ldr	r3, .L872+8
+	ldr	r3, .L880+8
 	str	r7, [r1, #4]
 	ldrh	r3, [r3]
 	mul	r3, r6, r3
@@ -5954,25 +5963,25 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L833:
+.L841:
 	add	r10, r10, #1
-	b	.L831
-.L840:
+	b	.L839
+.L848:
 	mul	r3, r8, r7
 	ldr	r2, [r9, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmn	r3, #1
-	bne	.L839
+	bne	.L847
 	ldr	r0, [r1, #4]
 	add	r4, r4, #1
 	uxth	r4, r4
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L839:
+.L847:
 	add	r7, r7, #1
-	b	.L838
-.L845:
+	b	.L846
+.L853:
 	uxth	r3, r10
 	mov	r2, #20
 	ldr	r0, [r9, #3272]
@@ -5985,22 +5994,22 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	cmp	r5, #0
 	mov	r8, r0
-	beq	.L843
+	beq	.L851
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L844
-.L843:
+	bne	.L852
+.L851:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L844
+	bne	.L852
 	ldr	r1, [r9, #3272]
 	mov	r3, #20
 	add	r8, r7, r8, lsl #10
 	mla	r1, r3, r6, r1
 	ldr	r3, [r9, #3316]
 	str	r3, [r1, #8]
-	ldr	r3, .L872+8
+	ldr	r3, .L880+8
 	str	r8, [r1, #4]
 	ldrh	r3, [r3]
 	mul	r3, r6, r3
@@ -6013,43 +6022,43 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r0, r3
 	str	r3, [r1, #12]
-.L844:
+.L852:
 	add	r10, r10, #1
-	b	.L842
-.L849:
+	b	.L850
+.L857:
 	mul	r3, r10, r8
 	ldr	r2, [r9, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L848
+	beq	.L856
 	ldr	r0, [r1, #4]
 	add	r4, r4, #1
 	uxth	r4, r4
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L848:
+.L856:
 	add	r8, r8, #1
-	b	.L847
-.L853:
+	b	.L855
+.L861:
 	cmp	r5, #0
-	beq	.L852
+	beq	.L860
 	mul	r3, r8, r7
 	ldr	r2, [r9, #3272]
 	add	r1, r2, r3
 	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L852
+	bne	.L860
 	ldr	r0, [r1, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L852:
+.L860:
 	add	r7, r7, #1
-	b	.L851
-.L873:
+	b	.L859
+.L881:
 	.align	2
-.L872:
+.L880:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+308
 	.word	.LANCHOR0+316
@@ -6070,23 +6079,22 @@ FlashTestBlk:
 	uxth	r5, r0
 	cmp	r5, #11
 	movls	r4, #0
-	bls	.L874
-	ldr	r4, .L879
+	bls	.L882
+	ldr	r3, .L887
 	sub	r0, fp, #84
 	mov	r2, #32
 	mov	r1, #165
 	str	r0, [fp, #-92]
 	lsl	r5, r5, #10
-	ldr	r3, [r4, #3328]
-	str	r3, [fp, #-96]
-	bl	ftl_memset
-	mov	r2, #8
-	mov	r1, #90
-	ldr	r0, [r4, #3328]
-	bl	ftl_memset
+	ldr	r4, [r3, #3328]
+	str	r4, [fp, #-96]
+	bl	memset
+	ldr	r3, .L887+4
 	mov	r2, #1
-	sub	r0, fp, #104
 	mov	r1, r2
+	sub	r0, fp, #104
+	str	r3, [r4]	@ unaligned
+	str	r3, [r4, #4]	@ unaligned
 	str	r5, [fp, #-100]
 	bl	FlashEraseBlocks
 	mov	r3, #1
@@ -6097,7 +6105,7 @@ FlashTestBlk:
 	ldr	r3, [fp, #-104]
 	cmp	r3, #0
 	mvnne	r4, #0
-	bne	.L876
+	bne	.L884
 	add	r3, r5, #1
 	sub	r0, fp, #104
 	str	r3, [fp, #-100]
@@ -6109,20 +6117,21 @@ FlashTestBlk:
 	adds	r4, r4, #0
 	movne	r4, #1
 	rsb	r4, r4, #0
-.L876:
+.L884:
 	mov	r2, #1
 	mov	r1, #0
 	sub	r0, fp, #104
 	str	r5, [fp, #-100]
 	bl	FlashEraseBlocks
-.L874:
+.L882:
 	mov	r0, r4
 	sub	sp, fp, #20
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L880:
+.L888:
 	.align	2
-.L879:
+.L887:
 	.word	.LANCHOR0
+	.word	1515870810
 	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
 	.global	FtlBbmTblFlush
@@ -6138,7 +6147,7 @@ FtlBbmTblFlush:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r5, #0
-	ldr	r4, .L893
+	ldr	r4, .L901
 	mov	r1, #0
 	ldr	r3, [r4, #3336]
 	add	r6, r4, #380
@@ -6150,20 +6159,20 @@ FtlBbmTblFlush:
 	ldrh	r2, [r4, r3]
 	str	r0, [r4, #3464]
 	bl	ftl_memset
-.L882:
+.L890:
 	ldrh	r3, [r7]
 	cmp	r5, r3
-	blt	.L883
+	blt	.L891
 	ldr	r6, [r4, #3468]
 	mov	r2, #16
 	mov	r1, #255
-	ldr	r5, .L893+4
-	ldr	r10, .L893+8
+	ldr	r5, .L901+4
+	ldr	r10, .L901+8
 	mov	r7, #0
 	mov	r0, r6
 	mov	r8, r7
-	bl	ftl_memset
-	ldr	r3, .L893+12
+	bl	memset
+	ldr	r3, .L901+12
 	sub	r9, r5, #48
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #364]
@@ -6178,7 +6187,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #12]	@ movhi
 	ldr	r3, [r4, #2608]
 	strh	r3, [r6, #14]	@ movhi
-.L884:
+.L892:
 	ldr	r3, [r4, #3304]
 	mov	ip, #0
 	ldrh	r2, [r5, #2]
@@ -6200,7 +6209,7 @@ FtlBbmTblFlush:
 	ldr	ip, [fp, #-44]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L885
+	blt	.L893
 	ldr	r3, [r4, #364]
 	ldrh	r2, [r5]
 	ldr	r0, [r4, #3272]
@@ -6218,9 +6227,9 @@ FtlBbmTblFlush:
 	str	r3, [r4, #3460]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-.L885:
+.L893:
 	mov	r3, #1
-	ldr	r0, .L893+16
+	ldr	r0, .L901+16
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
@@ -6229,21 +6238,21 @@ FtlBbmTblFlush:
 	strh	r3, [r5, #2]	@ movhi
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	bne	.L886
+	bne	.L894
 	add	r7, r7, #1
 	ldr	r1, [r4, #3460]
 	uxth	r7, r7
-	ldr	r0, .L893+20
+	ldr	r0, .L901+20
 	bl	sftl_printk
 	cmp	r7, #3
-	bls	.L884
+	bls	.L892
 	mov	r2, r7
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L893+24
+	ldr	r0, .L901+24
 	bl	sftl_printk
-.L888:
-	b	.L888
-.L883:
+.L896:
+	b	.L896
+.L891:
 	ldrh	r2, [r8]
 	ldr	r3, [r4, #3464]
 	ldr	r1, [r6, #4]!
@@ -6252,22 +6261,22 @@ FtlBbmTblFlush:
 	add	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L882
-.L889:
+	b	.L890
+.L897:
 	mov	r8, #1
-	b	.L884
-.L886:
+	b	.L892
+.L894:
 	add	r8, r8, #1
 	cmp	r8, #1
-	ble	.L889
+	ble	.L897
 	cmp	r3, #256
-	beq	.L884
+	beq	.L892
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L894:
+.L902:
 	.align	2
-.L893:
+.L901:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+356
 	.word	.LC99
@@ -6290,25 +6299,25 @@ allocate_data_superblock:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	mov	r4, r0
-	ldr	r9, .L931
-.L896:
-	ldr	r3, .L931
-	ldr	r10, .L931+4
+	ldr	r9, .L939
+.L904:
+	ldr	r3, .L939
+	ldr	r10, .L939+4
 	ldrh	r2, [r3, #228]
 	ldrh	r1, [r10]
 	add	r2, r2, r1
 	ldrh	r1, [r3, #244]
 	cmp	r2, r1
-	ble	.L897
+	ble	.L905
 	mov	r2, #2656
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L897:
-	ldr	r2, .L931+16
+.L905:
+	ldr	r2, .L939+16
 	cmp	r4, r2
 	movne	r1, #0
-	bne	.L898
+	bne	.L906
 	ldrh	r2, [r9, #228]
 	ldr	r1, [r9, #3168]
 	mul	r0, r1, r2
@@ -6319,37 +6328,37 @@ allocate_data_superblock:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-.L898:
-	ldr	r0, .L931+20
+.L906:
+	ldr	r0, .L939+20
 	bl	List_pop_index_node
 	ldrh	r2, [r9, #228]
 	mov	r7, r0
 	uxth	r8, r0
 	cmp	r2, #0
-	bne	.L899
+	bne	.L907
 	movw	r2, #2665
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L899:
+.L907:
 	ldrh	r2, [r9, #228]
 	sub	r2, r2, #1
 	strh	r2, [r9, #228]	@ movhi
 	ldrh	r2, [r9, #244]
 	cmp	r2, r8
-	bls	.L896
+	bls	.L904
 	uxth	r7, r7
 	ldr	r2, [r9, #76]
 	lsl	r6, r7, #1
 	ldrh	r5, [r2, r6]
 	cmp	r5, #0
-	bne	.L896
+	bne	.L904
 	strh	r8, [r4]	@ movhi
 	mov	r0, r4
 	bl	make_superblock
 	ldrb	r2, [r4, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L901
+	bne	.L909
 	ldr	r2, [r9, #76]
 	mvn	r1, #0
 	mov	r0, r7
@@ -6360,24 +6369,24 @@ allocate_data_superblock:
 	add	r2, r2, r1
 	ldrh	r1, [r9, #244]
 	cmp	r2, r1
-	ble	.L896
+	ble	.L904
 	movw	r2, #2679
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-	b	.L896
-.L901:
+	b	.L904
+.L909:
 	ldrh	r1, [r10]
 	ldrh	r2, [r9, #228]
 	add	r2, r2, r1
 	ldrh	r1, [r9, #244]
 	cmp	r2, r1
-	ble	.L903
+	ble	.L911
 	movw	r2, #2682
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L903:
+.L911:
 	ldr	r0, [r9, #3272]
 	mov	r1, #20
 	ldrh	lr, [r9, #236]
@@ -6386,30 +6395,30 @@ allocate_data_superblock:
 	mov	r2, r0
 	mla	r3, r1, lr, r0
 	mov	lr, #0
-.L904:
+.L912:
 	cmp	r3, r2
-	bne	.L906
+	bne	.L914
 	cmp	r5, #0
-	bne	.L907
+	bne	.L915
 	movw	r2, #2693
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L907:
+.L915:
 	ldrh	r2, [r9, #176]
 	cmp	r2, r8
-	bne	.L908
+	bne	.L916
 	movw	r2, #2695
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L908:
+.L916:
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	ldr	r1, [r9, #2540]
-	ldr	r10, .L931+24
+	ldr	r10, .L939+24
 	cmp	r2, #0
 	ldrh	r2, [r1, r6]
-	bne	.L909
+	bne	.L917
 	cmp	r2, #0
 	ldrhne	r0, [r10]
 	moveq	r2, #2
@@ -6421,7 +6430,7 @@ allocate_data_superblock:
 	add	r2, r2, #1
 	str	r2, [r9, #2600]
 	bl	ftl_set_blk_mode
-.L912:
+.L920:
 	ldr	r2, [r9, #2540]
 	ldr	r1, [r9, #2616]
 	ldr	ip, [r9, #2600]
@@ -6437,17 +6446,17 @@ allocate_data_superblock:
 	str	r0, [r9, #2608]
 	ldr	r0, [r9, #3272]
 	ldr	r2, [r1, #16]
-	ldr	ip, .L931+28
+	ldr	ip, .L939+28
 	add	r2, r2, #1
 	str	r2, [r1, #16]
 	mov	r1, #20
 	mla	r1, r1, r5, r0
 	add	r2, r0, #4
 	add	r1, r1, #24
-.L914:
+.L922:
 	add	r2, r2, #20
 	cmp	r1, r2
-	bne	.L915
+	bne	.L923
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	mov	r2, r5
 	ldr	r0, [r9, #3272]
@@ -6455,24 +6464,24 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r1, r10
 	mov	ip, #20
-.L916:
+.L924:
 	uxth	r2, r10
 	cmp	r5, r2
-	bhi	.L918
+	bhi	.L926
 	cmp	r1, #0
-	ble	.L919
+	ble	.L927
 	mov	r0, r7
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L919:
+.L927:
 	ldrb	r1, [r4, #7]	@ zero_extendqisi2
 	cmp	r1, #0
-	bne	.L920
+	bne	.L928
 	ldr	r2, [r9, #76]
 	mvn	r1, #0
 	strh	r1, [r2, r6]	@ movhi
-	b	.L896
-.L906:
+	b	.L904
+.L914:
 	str	lr, [r2, #8]
 	movw	r10, #65535
 	str	lr, [r2, #12]
@@ -6485,8 +6494,8 @@ allocate_data_superblock:
 	addne	r5, r5, #1
 	uxthne	r5, r5
 	strne	r1, [r10, #4]
-	b	.L904
-.L909:
+	b	.L912
+.L917:
 	add	r2, r2, #1
 	mov	r0, r7
 	strh	r2, [r1, r6]	@ movhi
@@ -6494,19 +6503,19 @@ allocate_data_superblock:
 	add	r2, r2, #1
 	str	r2, [r9, #2604]
 	bl	ftl_set_blk_mode.part.6
-	b	.L912
-.L915:
+	b	.L920
+.L923:
 	ldr	r0, [r2, #-20]
 	and	r0, r0, ip
 	str	r0, [r2, #-20]
-	b	.L914
-.L918:
+	b	.L922
+.L926:
 	mul	r2, ip, r10
 	ldr	lr, [r9, #3272]
 	add	r0, lr, r2
 	ldr	r2, [lr, r2]
 	cmn	r2, #1
-	bne	.L917
+	bne	.L925
 	ldr	r0, [r0, #4]
 	add	r1, r1, #1
 	str	ip, [fp, #-52]
@@ -6522,10 +6531,10 @@ allocate_data_superblock:
 	ldrb	r2, [r4, #7]	@ zero_extendqisi2
 	sub	r2, r2, #1
 	strb	r2, [r4, #7]
-.L917:
+.L925:
 	add	r10, r10, #1
-	b	.L916
-.L920:
+	b	.L924
+.L928:
 	movw	r2, #306
 	ldrh	r2, [r9, r2]
 	strh	r8, [r4]	@ movhi
@@ -6545,22 +6554,22 @@ allocate_data_superblock:
 	strh	r2, [r0, r3]	@ movhi
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L921
+	beq	.L929
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L922
-.L921:
+	bne	.L930
+.L929:
 	movw	r2, #2748
-	ldr	r1, .L931+8
-	ldr	r0, .L931+12
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
 	bl	sftl_printk
-.L922:
+.L930:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L932:
+.L940:
 	.align	2
-.L931:
+.L939:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2532
 	.word	.LANCHOR1+271
@@ -6584,47 +6593,47 @@ FtlGcFreeBadSuperBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	uxth	r3, r0
-	ldr	r6, .L945
+	ldr	r6, .L953
 	str	r3, [fp, #-44]
 	movw	r3, #3210
 	ldrh	r3, [r6, r3]
 	cmp	r3, #0
 	movne	r7, #0
-	ldrne	r10, .L945+4
-	bne	.L935
-.L934:
+	ldrne	r10, .L953+4
+	bne	.L943
+.L942:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L941:
+.L949:
 	uxtah	r3, r6, r7
 	ldr	r1, [fp, #-44]
 	mov	r8, #0
 	ldrb	r0, [r3, #264]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L936:
+.L944:
 	ldrh	r3, [r10]
 	uxth	r4, r8
 	cmp	r3, r4
-	bhi	.L940
+	bhi	.L948
 	add	r7, r7, #1
-.L935:
+.L943:
 	ldrh	r2, [r6, #236]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L941
+	bhi	.L949
 	bl	FtlGcReFreshBadBlk
-	b	.L934
-.L940:
+	b	.L942
+.L948:
 	uxth	r3, r8
-	ldr	r5, .L945+8
+	ldr	r5, .L953+8
 	lsl	r2, r3, #1
 	ldrh	r2, [r5, r2]
 	cmp	r2, r9
-	bne	.L937
+	bne	.L945
 	mov	r1, r9
-	ldr	r0, .L945+12
+	ldr	r0, .L953+12
 	str	r3, [fp, #-48]
 	bl	sftl_printk
 	mov	r0, r9
@@ -6633,23 +6642,23 @@ FtlGcFreeBadSuperBlk:
 	ldr	r3, [fp, #-48]
 	ldrh	r2, [r10]
 	add	r3, r5, r3, lsl #1
-.L938:
+.L946:
 	cmp	r4, r2
-	bcc	.L939
+	bcc	.L947
 	sub	r2, r2, #1
 	strh	r2, [r10]	@ movhi
-.L937:
+.L945:
 	add	r8, r8, #1
-	b	.L936
-.L939:
+	b	.L944
+.L947:
 	ldrh	r1, [r3, #2]!
 	add	r4, r4, #1
 	uxth	r4, r4
 	strh	r1, [r3, #-2]	@ movhi
-	b	.L938
-.L946:
+	b	.L946
+.L954:
 	.align	2
-.L945:
+.L953:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3210
 	.word	.LANCHOR0+3212
@@ -6667,13 +6676,13 @@ update_vpc_list:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L959
+	ldr	r4, .L967
 	uxth	r5, r0
 	ldr	r2, [r4, #76]
 	lsl	r3, r5, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L948
+	bne	.L956
 	ldrh	r3, [r4, #226]
 	cmp	r3, r5
 	mvneq	r3, #0
@@ -6686,29 +6695,29 @@ update_vpc_list:
 	cmp	r3, r5
 	mvneq	r3, #0
 	strheq	r3, [r4, #176]	@ movhi
-	beq	.L952
+	beq	.L960
 	ldrh	r3, [r4, #28]
 	cmp	r3, r5
-	beq	.L957
+	beq	.L965
 	ldrh	r3, [r4, #80]
 	cmp	r3, r5
-	beq	.L957
+	beq	.L965
 	ldrh	r3, [r4, #128]
 	cmp	r3, r5
-	beq	.L957
-.L952:
+	beq	.L965
+.L960:
 	mov	r1, r5
-	ldr	r0, .L959+4
+	ldr	r0, .L967+4
 	bl	List_remove_node
 	movw	r3, #2532
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L954
+	bne	.L962
 	movw	r2, #2824
-	ldr	r1, .L959+8
-	ldr	r0, .L959+12
+	ldr	r1, .L967+8
+	ldr	r0, .L967+12
 	bl	sftl_printk
-.L954:
+.L962:
 	movw	r6, #2532
 	mov	r0, r5
 	ldrh	r3, [r4, r6]
@@ -6722,23 +6731,23 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L958
+	ble	.L966
 	movw	r2, #2827
-	ldr	r1, .L959+8
-	ldr	r0, .L959+12
+	ldr	r1, .L967+8
+	ldr	r0, .L967+12
 	bl	sftl_printk
-.L958:
+.L966:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L948:
+.L956:
 	mov	r0, r5
 	bl	List_update_data_list
-.L957:
+.L965:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L960:
+.L968:
 	.align	2
-.L959:
+.L967:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2524
 	.word	.LANCHOR1+296
@@ -6759,44 +6768,44 @@ decrement_vpc_count:
 	uxth	r6, r0
 	movw	r3, #65535
 	cmp	r6, r3
-	ldr	r4, .L973
-	beq	.L962
+	ldr	r4, .L981
+	beq	.L970
 	ldr	r3, [r4, #76]
 	lsl	r5, r6, #1
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	subne	r2, r2, #1
 	strhne	r2, [r3, r5]	@ movhi
-	bne	.L962
+	bne	.L970
 	mov	r1, r6
-	ldr	r0, .L973+4
+	ldr	r0, .L981+4
 	bl	sftl_printk
 	ldr	r3, [r4, #76]
 	ldrh	r5, [r3, r5]
 	cmp	r5, #0
-	beq	.L964
-.L971:
+	beq	.L972
+.L979:
 	mov	r5, #0
-.L961:
+.L969:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L964:
-	movw	r2, #2842
 .L972:
-	ldr	r1, .L973+8
-	ldr	r0, .L973+12
+	movw	r2, #2842
+.L980:
+	ldr	r1, .L981+8
+	ldr	r0, .L981+12
 	bl	sftl_printk
-	b	.L961
-.L962:
+	b	.L969
+.L970:
 	movw	r7, #3442
 	movw	r3, #65535
 	ldrh	r0, [r4, r7]
 	cmp	r0, r3
 	strheq	r6, [r4, r7]	@ movhi
-	beq	.L971
-.L966:
+	beq	.L979
+.L974:
 	cmp	r6, r0
-	beq	.L971
+	beq	.L979
 	bl	update_vpc_list
 	ldr	r2, [r4, #2520]
 	adds	r5, r0, #0
@@ -6815,12 +6824,12 @@ decrement_vpc_count:
 	lsr	r2, r2, #5
 	moveq	r2, #0
 	cmp	r2, #0
-	beq	.L961
+	beq	.L969
 	movw	r2, #2858
-	b	.L972
-.L974:
+	b	.L980
+.L982:
 	.align	2
-.L973:
+.L981:
 	.word	.LANCHOR0
 	.word	.LC103
 	.word	.LANCHOR1+312
@@ -6842,7 +6851,7 @@ FtlSuperblockPowerLostFix:
 	mvn	r3, #0
 	str	r3, [fp, #-36]
 	mov	r6, #0
-	ldr	r3, .L988
+	ldr	r3, .L996
 	movw	r1, #61589
 	mov	r4, r0
 	ldr	r2, [r3, #3304]
@@ -6859,18 +6868,18 @@ FtlSuperblockPowerLostFix:
 	strh	r2, [r5, #2]	@ movhi
 	ldr	r2, [r3, #3304]
 	str	r1, [r2]
-	ldr	r1, .L988+4
+	ldr	r1, .L996+4
 	ldr	r2, [r3, #3304]
 	str	r1, [r2, #4]
 	ldrh	r2, [r0, #4]
 	tst	r2, #1
 	moveq	r7, #6
 	movne	r7, #7
-.L981:
+.L989:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L977
-.L978:
+	bne	.L985
+.L986:
 	ldrh	r3, [r4]
 	ldr	r1, [r8, #76]
 	ldrh	r0, [r4, #4]
@@ -6886,12 +6895,12 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L977:
+.L985:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	cmn	r0, #1
 	str	r0, [fp, #-48]
-	beq	.L978
+	beq	.L986
 	ldr	r3, [r8, #2596]
 	mov	r1, #1
 	sub	r0, fp, #52
@@ -6906,11 +6915,11 @@ FtlSuperblockPowerLostFix:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
 	subs	r7, r7, #1
-	bne	.L981
-	b	.L978
-.L989:
+	bne	.L989
+	b	.L986
+.L997:
 	.align	2
-.L988:
+.L996:
 	.word	.LANCHOR0
 	.word	305419896
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
@@ -6928,50 +6937,50 @@ FtlMakeBbt:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r8, #0
-	ldr	r6, .L1010
+	ldr	r6, .L1018
 	bl	FtlBbtMemInit
 	bl	FtlLoadFactoryBbt
 	sub	r7, r6, #384
 	sub	r9, r6, #18
 	sub	r4, r6, #28
 	mov	r5, r7
-.L991:
-	ldr	r3, .L1010+4
+.L999:
+	ldr	r3, .L1018+4
 	ldrh	r2, [r3]
 	cmp	r8, r2
-	bcc	.L997
+	bcc	.L1005
 	mov	r0, #0
 	add	r6, r3, #60
-.L998:
+.L1006:
 	ldrh	r2, [r6]
 	uxth	r3, r0
 	add	r7, r0, #1
 	cmp	r2, r3
-	bhi	.L999
+	bhi	.L1007
 	ldrh	r6, [r4, #12]
 	movw	r7, #65535
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1000:
+.L1008:
 	ldrh	r3, [r4, #12]
 	sub	r3, r3, #48
 	cmp	r6, r3
-	ble	.L1004
+	ble	.L1012
 	mov	r0, r6
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1001
+	beq	.L1009
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1002
+	beq	.L1010
 	mov	r0, r6
 	bl	FtlBbmMapBadBlock
-.L1001:
+.L1009:
 	sub	r6, r6, #1
 	uxth	r6, r6
-	b	.L1000
-.L997:
+	b	.L1008
+.L1005:
 	ldr	r2, [r7, #3336]
 	movw	r1, #65535
 	ldr	r0, [r7, #3304]
@@ -6980,9 +6989,9 @@ FtlMakeBbt:
 	ldrh	r2, [r9, #2]!
 	str	r0, [r7, #3464]
 	cmp	r2, r1
-	beq	.L992
+	beq	.L1000
 	ldrh	r10, [r3, #44]
-	ldr	r0, .L1010+8
+	ldr	r0, .L1018+8
 	str	r3, [fp, #-44]
 	mla	r10, r8, r10, r2
 	lsl	r2, r10, #10
@@ -6997,13 +7006,13 @@ FtlMakeBbt:
 	add	r2, r2, #7
 	asr	r2, r2, #3
 	bl	ftl_memcpy
-.L993:
+.L1001:
 	uxth	r0, r10
 	add	r8, r8, #1
 	add	r6, r6, #4
 	bl	FtlBbmMapBadBlock
-	b	.L991
-.L992:
+	b	.L999
+.L1000:
 	mov	r1, r8
 	str	r3, [fp, #-44]
 	bl	FlashGetBadBlockList
@@ -7012,31 +7021,29 @@ FtlMakeBbt:
 	bl	FtlBbt2Bitmap
 	ldr	r3, [fp, #-44]
 	ldrh	r3, [r3, #44]
-.L1009:
+.L1017:
 	sub	r3, r3, #1
 	uxth	r3, r3
 	str	r3, [fp, #-44]
-.L994:
-	ldr	r10, .L1010+12
+.L1002:
+	ldr	r10, .L1018+12
 	ldr	r3, [fp, #-44]
 	ldrh	r0, [r10]
 	smlabb	r0, r0, r8, r3
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L995
+	beq	.L1003
 	ldrh	r3, [fp, #-44]
-	mov	r2, #16
-	mov	r1, #0
+	mov	r1, #16
 	ldr	r0, [r5, #3336]
 	strh	r3, [r9]	@ movhi
-	bl	ftl_memset
-	mov	r2, #4096
-	mov	r1, #0
+	bl	__memzero
+	mov	r1, #4096
 	ldr	r0, [r5, #3304]
-	bl	ftl_memset
+	bl	__memzero
 	ldr	r2, [fp, #-48]
-	ldr	r3, .L1010+16
+	ldr	r3, .L1018+16
 	strh	r3, [r2]	@ movhi
 	mov	r3, #0
 	str	r3, [r2, #4]
@@ -7049,41 +7056,41 @@ FtlMakeBbt:
 	mla	r10, r8, r10, r3
 	lsl	r3, r10, #10
 	str	r3, [r5, #3460]
-	ldr	r3, .L1010+20
+	ldr	r3, .L1018+20
 	ldrh	r2, [r3]
 	lsl	r2, r2, #2
 	bl	ftl_memcpy
 	mov	r2, #1
-	ldr	r0, .L1010+8
+	ldr	r0, .L1018+8
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	mov	r3, #1
-	ldr	r0, .L1010+8
+	ldr	r0, .L1018+8
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r5, #3456]
 	cmn	r3, #1
-	bne	.L993
+	bne	.L1001
 	uxth	r0, r10
 	bl	FtlBbmMapBadBlock
-	b	.L994
-.L995:
+	b	.L1002
+.L1003:
 	ldr	r3, [fp, #-44]
-	b	.L1009
-.L999:
+	b	.L1017
+.L1007:
 	uxth	r0, r0
 	bl	FtlBbmMapBadBlock
 	mov	r0, r7
-	b	.L998
-.L1002:
+	b	.L1006
+.L1010:
 	ldrh	r3, [r4]
 	cmp	r3, r7
 	strheq	r6, [r4]	@ movhi
-	beq	.L1001
-.L1003:
+	beq	.L1009
+.L1011:
 	strh	r6, [r4, #4]	@ movhi
-.L1004:
+.L1012:
 	ldrh	r3, [r4]
 	mov	r6, #0
 	ldr	r0, [r5, #3272]
@@ -7114,9 +7121,9 @@ FtlMakeBbt:
 	mov	r0, r6
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1011:
+.L1019:
 	.align	2
-.L1010:
+.L1018:
 	.word	.LANCHOR0+384
 	.word	.LANCHOR0+258
 	.word	.LANCHOR0+3456
@@ -7151,23 +7158,23 @@ js_hash:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1016
+	ldr	r3, .L1024
 	add	r1, r0, r1
-.L1014:
+.L1022:
 	cmp	r0, r1
-	bne	.L1015
+	bne	.L1023
 	mov	r0, r3
 	ldmfd	sp, {fp, sp, pc}
-.L1015:
+.L1023:
 	lsr	r2, r3, #2
 	ldrb	ip, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsl #5
 	add	r2, r2, ip
 	eor	r3, r3, r2
-	b	.L1014
-.L1017:
+	b	.L1022
+.L1025:
 	.align	2
-.L1016:
+.L1024:
 	.word	1204201446
 	.size	js_hash, .-js_hash
 	.align	2
@@ -7187,15 +7194,15 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L1019
+	bne	.L1027
 	ldrh	r3, [r0, #8]
 	cmp	r3, #0
-	beq	.L1020
+	beq	.L1028
 	movw	r2, #641
-	ldr	r1, .L1028
-	ldr	r0, .L1028+4
+	ldr	r1, .L1036
+	ldr	r0, .L1036+4
 	bl	sftl_printk
-.L1020:
+.L1028:
 	ldrh	r3, [r4, #8]
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -7207,16 +7214,16 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	add	r3, r3, #1
 	str	r3, [r4, #28]
-.L1021:
+.L1029:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1019:
+.L1027:
 	lsl	r3, r3, #1
 	ldr	r7, [r0, #24]
 	mov	r1, #255
 	ldrh	r8, [r5, r3]
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1028+8
+	ldr	r5, .L1036+8
 	orr	r3, r3, r8, lsl #10
 	ldr	r6, [r5, #3336]
 	str	r3, [r5, #3460]
@@ -7225,7 +7232,7 @@ Ftl_write_map_blk_to_last_page:
 	str	r3, [r5, #3464]
 	ldr	r3, [r0, #28]
 	str	r3, [r6, #4]
-	ldr	r3, .L1028+12
+	ldr	r3, .L1036+12
 	strh	r3, [r6, #8]	@ movhi
 	ldrh	r3, [r0, #4]
 	strh	r8, [r6, #2]	@ movhi
@@ -7237,11 +7244,11 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	r2, #0
 	mov	r3, r2
-.L1022:
+.L1030:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L1024
+	bhi	.L1032
 	movw	r3, #314
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r5, r3]
@@ -7250,19 +7257,19 @@ Ftl_write_map_blk_to_last_page:
 	str	r0, [r6, #12]
 	mov	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1028+16
+	ldr	r0, .L1036+16
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L1021
-.L1024:
+	b	.L1029
+.L1032:
 	uxth	r1, r2
 	ldr	r0, [r7, r1, lsl #2]
 	cmp	r8, r0, lsr #10
-	bne	.L1023
+	bne	.L1031
 	ldr	r0, [r5, #3304]
 	add	r3, r3, #1
 	uxth	r3, r3
@@ -7271,12 +7278,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r1, [r5, #3304]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L1023:
+.L1031:
 	add	r2, r2, #1
-	b	.L1022
-.L1029:
+	b	.L1030
+.L1037:
 	.align	2
-.L1028:
+.L1036:
 	.word	.LANCHOR1+332
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7297,12 +7304,12 @@ FtlMapWritePage:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r6, #0
-	ldr	r5, .L1048
+	ldr	r5, .L1056
 	mov	r4, r0
 	mov	r7, r1
 	mov	r9, r2
 	add	r8, r5, #308
-.L1031:
+.L1039:
 	ldr	r3, [r5, #2576]
 	add	r3, r3, #1
 	str	r3, [r5, #2576]
@@ -7310,58 +7317,57 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1032
+	bge	.L1040
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1033
-.L1032:
+	bne	.L1041
+.L1040:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1033:
+.L1041:
 	ldrh	r3, [r4]
 	ldr	r2, [r4, #12]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L1034
+	bne	.L1042
 	mov	r2, #700
-	ldr	r1, .L1048+4
-	ldr	r0, .L1048+8
+	ldr	r1, .L1056+4
+	ldr	r0, .L1056+8
 	bl	sftl_printk
-.L1034:
+.L1042:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L1035
+	bcc	.L1043
 	movw	r2, #701
-	ldr	r1, .L1048+4
-	ldr	r0, .L1048+8
+	ldr	r1, .L1056+4
+	ldr	r0, .L1056+8
 	bl	sftl_printk
-.L1035:
+.L1043:
 	ldrh	r3, [r4]
-	mov	r1, #0
+	mov	r1, #16
 	ldr	r2, [r4, #12]
 	ldr	r0, [r5, #3336]
 	lsl	r3, r3, #1
-	ldrh	ip, [r2, r3]
-	mov	r2, #16
+	ldrh	r2, [r2, r3]
 	ldrh	r3, [r4, #2]
-	str	r9, [r5, #3464]
-	str	ip, [fp, #-44]
 	str	r0, [r5, #3468]
-	orr	r3, r3, ip, lsl #10
+	str	r2, [fp, #-44]
+	str	r9, [r5, #3464]
+	orr	r3, r3, r2, lsl #10
 	str	r3, [r5, #3460]
-	bl	ftl_memset
+	bl	__memzero
 	ldr	r3, [r4, #28]
 	ldr	r10, [r5, #3468]
-	ldr	ip, [fp, #-44]
+	ldr	r2, [fp, #-44]
 	str	r3, [r10, #4]
 	strh	r7, [r10, #8]	@ movhi
 	ldrh	r3, [r4, #4]
-	strh	ip, [r10, #2]	@ movhi
+	strh	r2, [r10, #2]	@ movhi
 	strh	r3, [r10]	@ movhi
-	ldr	r3, .L1048+12
+	ldr	r3, .L1056+12
 	ldr	r0, [r5, #3464]
 	ldrh	r1, [r3]
 	bl	js_hash
@@ -7369,7 +7375,7 @@ FtlMapWritePage:
 	str	r0, [r10, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1048+16
+	ldr	r0, .L1056+16
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
@@ -7377,10 +7383,10 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	bne	.L1036
+	bne	.L1044
 	ldr	r1, [r5, #3460]
 	add	r6, r6, #1
-	ldr	r0, .L1048+20
+	ldr	r0, .L1056+20
 	uxth	r6, r6
 	bl	sftl_printk
 	ldrh	r3, [r4, #2]
@@ -7389,38 +7395,38 @@ FtlMapWritePage:
 	subls	r3, r3, #1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1038
+	bls	.L1046
 	mov	r2, r6
 	ldr	r1, [r5, #3460]
-	ldr	r0, .L1048+24
+	ldr	r0, .L1056+24
 	bl	sftl_printk
-.L1039:
-	b	.L1039
-.L1038:
-	ldr	r3, [r4, #32]
-	cmp	r3, #0
-	beq	.L1031
 .L1047:
 	b	.L1047
-.L1036:
+.L1046:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L1039
+.L1055:
+	b	.L1055
+.L1044:
 	cmp	r3, #1
 	cmpne	r2, #256
-	beq	.L1042
+	beq	.L1050
 	ldr	r0, [r4, #36]
 	cmp	r0, #0
-	beq	.L1043
-.L1042:
+	beq	.L1051
+.L1050:
 	mov	r3, #0
 	str	r3, [r4, #36]
-	b	.L1031
-.L1043:
+	b	.L1039
+.L1051:
 	ldr	r2, [r5, #3460]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r7, lsl #2]
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1049:
+.L1057:
 	.align	2
-.L1048:
+.L1056:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+363
 	.word	.LC8
@@ -7441,24 +7447,24 @@ load_l2p_region:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r9, .L1057
+	ldr	r9, .L1065
 	uxth	r6, r0
 	uxth	r10, r1
 	ldrh	r3, [r9]
 	cmp	r3, r6
-	bcs	.L1051
+	bcs	.L1059
 	movw	r2, #485
-	ldr	r1, .L1057+4
-	ldr	r0, .L1057+8
+	ldr	r1, .L1065+4
+	ldr	r0, .L1065+8
 	bl	sftl_printk
-.L1051:
-	ldr	r7, .L1057+12
+.L1059:
+	ldr	r7, .L1065+12
 	mov	r5, #12
 	ldr	r3, [r7, #3380]
 	mov	r4, r7
 	ldr	r8, [r3, r6, lsl #2]
 	cmp	r8, #0
-	bne	.L1052
+	bne	.L1060
 	mul	r5, r5, r10
 	ldr	r3, [r7, #2544]
 	movw	r2, #314
@@ -7472,10 +7478,10 @@ load_l2p_region:
 	ldr	r3, [r7, #2544]
 	add	r5, r3, r5
 	str	r8, [r5, #4]
-.L1053:
+.L1061:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1052:
+.L1060:
 	mul	r5, r5, r10
 	ldr	r3, [r7, #2544]
 	mov	r2, #1
@@ -7491,54 +7497,54 @@ load_l2p_region:
 	ldr	r7, [r7, #3468]
 	ldrh	r3, [r7, #8]
 	cmp	r3, r6
-	beq	.L1054
+	beq	.L1062
 	mov	r2, r8
 	mov	r1, r6
-	ldr	r0, .L1057+16
+	ldr	r0, .L1065+16
 	bl	sftl_printk
 	mov	r3, #4
 	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	ldr	r0, .L1057+20
+	ldr	r0, .L1065+20
 	bl	rknand_print_hex
 	ldrh	r3, [r9]
 	mov	r2, #4
 	ldr	r1, [r4, #3380]
-	ldr	r0, .L1057+24
+	ldr	r0, .L1065+24
 	bl	rknand_print_hex
-.L1055:
+.L1063:
 	ldrh	r3, [r7, #8]
 	cmp	r3, r6
-	beq	.L1056
+	beq	.L1064
 	mov	r2, #508
-	ldr	r1, .L1057+4
-	ldr	r0, .L1057+8
+	ldr	r1, .L1065+4
+	ldr	r0, .L1065+8
 	bl	sftl_printk
-.L1056:
+.L1064:
 	ldr	r3, [r4, #2544]
 	mov	r1, #0
 	add	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L1053
-.L1054:
+	b	.L1061
+.L1062:
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	bne	.L1055
+	bne	.L1063
 	mov	r2, r8
 	mov	r1, r6
-	ldr	r0, .L1057+28
+	ldr	r0, .L1065+28
 	bl	sftl_printk
 	ldr	r3, [r4, #2544]
 	mov	r1, r6
-	ldr	r0, .L1057+32
+	ldr	r0, .L1065+32
 	add	r3, r3, r5
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	b	.L1055
-.L1058:
+	b	.L1063
+.L1066:
 	.align	2
-.L1057:
+.L1065:
 	.word	.LANCHOR0+340
 	.word	.LANCHOR1+379
 	.word	.LC8
@@ -7570,15 +7576,15 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #8]
 	sub	r3, r3, #5
 	cmp	r2, r3
-	blt	.L1060
+	blt	.L1068
 	uxth	r0, r0
 	lsl	r0, r0, #1
 	ldrh	r8, [r5, r0]
 	cmp	r8, #0
-	beq	.L1060
+	beq	.L1068
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L1060
+	bne	.L1068
 	mov	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r5, r0]	@ movhi
@@ -7586,46 +7592,46 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1075
+	ldr	r3, .L1083
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bcc	.L1061
+	bcc	.L1069
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1061:
-	ldr	r5, .L1075+4
+.L1069:
+	ldr	r5, .L1083+4
 	mov	r6, #0
-.L1062:
+.L1070:
 	ldrh	r3, [r4, #6]
 	uxth	r10, r6
 	cmp	r3, r10
-	bhi	.L1069
+	bhi	.L1077
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L1060:
-	ldr	r3, .L1075
+.L1068:
+	ldr	r3, .L1083
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bcc	.L1070
+	bcc	.L1078
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1070:
+.L1078:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1069:
+.L1077:
 	uxth	r7, r6
 	add	r3, r9, r7, lsl #2
 	str	r3, [fp, #-44]
 	ldr	r3, [r9, r7, lsl #2]
 	cmp	r8, r3, lsr #10
-	bne	.L1063
+	bne	.L1071
 	ldr	r3, [r5, #3308]
-	ldr	r0, .L1075+8
+	ldr	r0, .L1083+8
 	str	r3, [r5, #3464]
 	ldr	r3, [r5, #3336]
 	str	r3, [r5, #3468]
@@ -7638,40 +7644,40 @@ ftl_map_blk_gc:
 	ldr	r3, [fp, #-48]
 	ldrh	r2, [r3, #8]
 	cmp	r2, r10
-	beq	.L1064
+	beq	.L1072
 	movw	r2, #611
-	ldr	r1, .L1075+12
-	ldr	r0, .L1075+16
+	ldr	r1, .L1083+12
+	ldr	r0, .L1083+16
 	bl	sftl_printk
 	ldr	r3, [fp, #-48]
-.L1064:
+.L1072:
 	ldr	r2, [r5, #3456]
 	cmn	r2, #1
-	bne	.L1065
-.L1067:
+	bne	.L1073
+.L1075:
 	ldr	r2, [fp, #-44]
 	mov	r3, #0
 	str	r3, [r2]
-.L1066:
-	b	.L1066
-.L1065:
+.L1074:
+	b	.L1074
+.L1073:
 	ldrh	r2, [r3, #8]
 	cmp	r2, r10
-	bne	.L1067
+	bne	.L1075
 	ldrh	r2, [r3]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1067
+	bne	.L1075
 	ldr	r2, [r5, #3464]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L1063:
+.L1071:
 	add	r6, r6, #1
-	b	.L1062
-.L1076:
+	b	.L1070
+.L1084:
 	.align	2
-.L1075:
+.L1083:
 	.word	.LANCHOR0+308
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
@@ -7690,7 +7696,7 @@ flush_l2p_region:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L1078
+	ldr	r5, .L1086
 	uxth	r0, r0
 	mov	r4, #12
 	mul	r4, r4, r0
@@ -7708,9 +7714,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1079:
+.L1087:
 	.align	2
-.L1078:
+.L1086:
 	.word	.LANCHOR0
 	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
@@ -7727,22 +7733,22 @@ log2phys:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	mov	r6, r0
-	ldr	r4, .L1093
+	ldr	r4, .L1101
 	mov	r7, r1
 	mov	r10, r2
 	add	r3, r4, #312
 	ldrh	r5, [r3]
 	ldr	r3, [r4, #2556]
 	cmp	r0, r3
-	bcc	.L1081
+	bcc	.L1089
 	movw	r2, #813
-	ldr	r1, .L1093+4
-	ldr	r0, .L1093+8
+	ldr	r1, .L1101+4
+	ldr	r0, .L1101+8
 	bl	sftl_printk
-.L1081:
+.L1089:
 	ldr	r3, [r4, #2556]
 	cmp	r6, r3
-	bcs	.L1082
+	bcs	.L1090
 	add	r5, r5, #7
 	ldr	ip, [r4, #2544]
 	lsr	r3, r6, r5
@@ -7752,10 +7758,10 @@ log2phys:
 	movw	r3, #342
 	ldrh	r9, [fp, #-44]
 	ldrh	r0, [r4, r3]
-.L1083:
+.L1091:
 	uxth	r8, r1
 	cmp	r8, r0
-	bcc	.L1088
+	bcc	.L1096
 	str	r2, [fp, #-48]
 	bl	select_l2p_ram_region
 	ldr	r2, [fp, #-48]
@@ -7766,42 +7772,42 @@ log2phys:
 	ldrh	r1, [r1, r2]
 	movw	r2, #65535
 	cmp	r1, r2
-	beq	.L1089
+	beq	.L1097
 	ldr	r2, [ip, #4]
 	cmp	r2, #0
-	bge	.L1089
+	bge	.L1097
 	bl	flush_l2p_region
-.L1089:
+.L1097:
 	mov	r1, r8
 	ldrh	r0, [fp, #-44]
 	bl	load_l2p_region
-	b	.L1085
-.L1082:
+	b	.L1093
+.L1090:
 	cmp	r10, #0
 	mvn	r0, #0
 	streq	r0, [r7]
-.L1080:
+.L1088:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1088:
+.L1096:
 	add	r1, r1, #1
 	mla	lr, r2, r1, ip
 	ldrh	lr, [lr, #-12]
 	cmp	lr, r9
-	bne	.L1083
-.L1085:
+	bne	.L1091
+.L1093:
 	mvn	r2, #0
 	cmp	r10, #0
 	bic	r5, r6, r2, lsl r5
 	mov	r2, #12
 	uxth	r5, r5
-	bne	.L1086
+	bne	.L1094
 	ldr	r1, [r4, #2544]
 	mla	r2, r2, r8, r1
 	ldr	r2, [r2, #8]
 	ldr	r2, [r2, r5, lsl #2]
 	str	r2, [r7]
-.L1087:
+.L1095:
 	ldr	r1, [r4, #2544]
 	mov	r2, #12
 	mov	r0, #0
@@ -7810,8 +7816,8 @@ log2phys:
 	cmn	r2, #1
 	addne	r2, r2, #1
 	strne	r2, [r3, #4]
-	b	.L1080
-.L1086:
+	b	.L1088
+.L1094:
 	mul	r2, r2, r8
 	ldr	r1, [r4, #2544]
 	ldr	r0, [r7]
@@ -7825,10 +7831,10 @@ log2phys:
 	str	r1, [r2, #4]
 	movw	r2, #2548
 	strh	r9, [r4, r2]	@ movhi
-	b	.L1087
-.L1094:
+	b	.L1095
+.L1102:
 	.align	2
-.L1093:
+.L1101:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+410
 	.word	.LC8
@@ -7846,22 +7852,22 @@ FtlWriteDump_data:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #24
-	ldr	r4, .L1113
+	ldr	r4, .L1121
 	ldrh	r2, [r4, #32]
 	cmp	r2, #0
-	beq	.L1096
+	beq	.L1104
 	ldrb	r3, [r4, #36]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1096
+	bne	.L1104
 	movw	r3, #306
 	ldrb	r1, [r4, #35]	@ zero_extendqisi2
 	ldrh	r3, [r4, r3]
 	mul	r3, r3, r1
 	cmp	r2, r3
-	beq	.L1096
+	beq	.L1104
 	ldrb	r7, [r4, #38]	@ zero_extendqisi2
 	cmp	r7, #0
-	bne	.L1095
+	bne	.L1103
 	ldr	r6, [r4, #2556]
 	mov	r2, r7
 	sub	r1, fp, #64
@@ -7878,38 +7884,38 @@ FtlWriteDump_data:
 	str	r0, [fp, #-52]
 	str	r5, [fp, #-48]
 	str	r7, [r5, #4]
-	beq	.L1098
+	beq	.L1106
 	mov	r2, r7
 	mov	r1, #1
 	sub	r0, fp, #60
 	bl	FlashReadPages
-.L1099:
-	ldr	r10, .L1113+4
+.L1107:
+	ldr	r10, .L1121+4
 	mov	r7, #0
-	ldr	r3, .L1113+8
+	ldr	r3, .L1121+8
 	lsl	r8, r8, #2
 	mov	r9, r7
 	strh	r3, [r5]	@ movhi
-.L1100:
+.L1108:
 	cmp	r8, r7
-	bne	.L1104
-.L1101:
+	bne	.L1112
+.L1109:
 	mov	r3, #1
-.L1112:
+.L1120:
 	strb	r3, [r4, #38]
-.L1095:
+.L1103:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1098:
+.L1106:
 	movw	r3, #314
 	mov	r1, #255
 	ldrh	r2, [r4, r3]
 	bl	ftl_memset
-	b	.L1099
-.L1104:
+	b	.L1107
+.L1112:
 	ldrh	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1101
+	beq	.L1109
 	ldr	r3, [fp, #-56]
 	mov	r0, r10
 	str	r6, [r5, #8]
@@ -7932,13 +7938,13 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	r0, [r4, #28]
 	bl	decrement_vpc_count
-	b	.L1100
-.L1096:
+	b	.L1108
+.L1104:
 	mov	r3, #0
-	b	.L1112
-.L1114:
+	b	.L1120
+.L1122:
 	.align	2
-.L1113:
+.L1121:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+28
 	.word	-3947
@@ -7957,7 +7963,7 @@ FtlReUsePrevPpa:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r6, r0
-	ldr	r7, .L1125
+	ldr	r7, .L1133
 	ubfx	r0, r1, #10, #16
 	str	r1, [fp, #-32]
 	bl	P2V_block_in_plane
@@ -7965,32 +7971,32 @@ FtlReUsePrevPpa:
 	lsl	r5, r0, #1
 	ldrh	r3, [r2, r5]
 	cmp	r3, #0
-	bne	.L1116
+	bne	.L1124
 	ldr	r4, [r7, #2536]
 	cmp	r4, #0
-	beq	.L1117
+	beq	.L1125
 	ldr	r2, [r7, #2520]
 	movw	lr, #65535
 	ldrh	ip, [r7, #228]
 	sub	r4, r4, r2
 	ubfx	r4, r4, #3, #16
-.L1118:
+.L1126:
 	uxth	r1, r3
 	cmp	ip, r1
-	bls	.L1117
+	bls	.L1125
 	cmp	r4, r0
-	bne	.L1119
+	bne	.L1127
 	mov	r1, r4
-	ldr	r0, .L1125+4
+	ldr	r0, .L1133+4
 	bl	List_remove_node
 	ldrh	r3, [r7, #228]
 	cmp	r3, #0
-	bne	.L1120
+	bne	.L1128
 	movw	r2, #1733
-	ldr	r1, .L1125+8
-	ldr	r0, .L1125+12
+	ldr	r1, .L1133+8
+	ldr	r0, .L1133+12
 	bl	sftl_printk
-.L1120:
+.L1128:
 	ldrh	r3, [r7, #228]
 	mov	r0, r4
 	sub	r3, r3, #1
@@ -7998,25 +8004,25 @@ FtlReUsePrevPpa:
 	bl	INSERT_DATA_LIST
 	ldr	r2, [r7, #76]
 	ldrh	r3, [r2, r5]
-.L1116:
+.L1124:
 	add	r3, r3, #1
 	strh	r3, [r2, r5]	@ movhi
-	b	.L1117
-.L1119:
+	b	.L1125
+.L1127:
 	lsl	r4, r4, #3
 	add	r3, r3, #1
 	ldrh	r4, [r2, r4]
 	cmp	r4, lr
-	bne	.L1118
-.L1117:
+	bne	.L1126
+.L1125:
 	mov	r2, #1
 	sub	r1, fp, #32
 	mov	r0, r6
 	bl	log2phys
 	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1126:
+.L1134:
 	.align	2
-.L1125:
+.L1133:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2536
 	.word	.LANCHOR1+419
@@ -8039,9 +8045,9 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r0]
 	mov	r10, r0
 	cmp	r3, r2
-	beq	.L1251
+	beq	.L1259
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1259
+	ldr	r5, .L1267
 	str	r3, [fp, #-64]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [fp, #-64]
@@ -8052,27 +8058,27 @@ FtlRecoverySuperblock:
 	mov	r3, #0
 	strheq	r3, [r0, #4]	@ movhi
 	ldrhne	r0, [r0, #16]
-	bne	.L1131
-.L1257:
+	bne	.L1139
+.L1265:
 	strb	r3, [r10, #6]
-.L1251:
+.L1259:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1132:
+.L1140:
 	uxth	r1, r3
 	add	r1, r10, r1, lsl #1
 	ldrh	r0, [r1, #16]
-.L1131:
+.L1139:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1132
+	beq	.L1140
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r4, r0
-	beq	.L1133
+	beq	.L1141
 	ldrh	r3, [r5, #236]
 	mov	r2, #0
 	ldr	r0, [r5, #3292]
@@ -8086,17 +8092,17 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r5, r3]
 	mov	r5, r2
 	str	r3, [fp, #-68]
-	ldr	r3, .L1259+4
+	ldr	r3, .L1267+4
 	ldrh	r6, [r3]
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [fp, #-80]
-.L1134:
+.L1142:
 	ldr	r1, [fp, #-56]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L1138
-	ldr	r6, .L1259
+	bhi	.L1146
+	ldr	r6, .L1267
 	mov	r2, #0
 	mov	r1, r5
 	movw	r8, #65535
@@ -8109,15 +8115,15 @@ FtlRecoverySuperblock:
 	str	r3, [fp, #-56]
 	mov	r7, r9
 	mov	r3, #0
-.L1139:
+.L1147:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L1144
+	bhi	.L1152
 	addeq	r3, r4, #1
 	uxtheq	r3, r3
 	streq	r3, [fp, #-60]
-	bne	.L1142
-.L1252:
+	bne	.L1150
+.L1260:
 	ldr	r0, [r9, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -8138,14 +8144,14 @@ FtlRecoverySuperblock:
 	cmpeq	r1, r0
 	moveq	r2, r1
 	moveq	r1, r3
-	beq	.L1258
+	beq	.L1266
 	movw	r3, #65535
 	cmp	r8, r3
-	bne	.L1148
+	bne	.L1156
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1149
-.L1148:
+	bne	.L1157
+.L1156:
 	ldr	r3, [r6, #3452]
 	uxth	r7, r4
 	uxth	r4, r4
@@ -8153,15 +8159,15 @@ FtlRecoverySuperblock:
 	ldreq	r3, [fp, #-56]
 	streq	r3, [r6, #3452]
 	ldr	r3, [fp, #-64]
-	ldr	r6, .L1259
+	ldr	r6, .L1267
 	add	r3, r3, #7
 	cmp	r4, r3
 	subgt	r4, r7, #7
 	ldrle	r4, [fp, #-64]
 	uxthgt	r4, r4
-.L1152:
+.L1160:
 	cmp	r4, r7
-	bhi	.L1159
+	bhi	.L1167
 	mov	r3, #0
 	ldrh	r8, [r6, #236]
 	ldr	r0, [r6, #3292]
@@ -8169,32 +8175,32 @@ FtlRecoverySuperblock:
 	ldr	r1, [fp, #-80]
 	movw	lr, #65535
 	mov	ip, #20
-	b	.L1160
-.L1133:
+	b	.L1168
+.L1141:
 	ldr	r3, [fp, #-64]
 	cmp	r3, #0
-	beq	.L1135
+	beq	.L1143
 	movw	r2, #1800
-	ldr	r1, .L1259+8
-	ldr	r0, .L1259+12
+	ldr	r1, .L1267+8
+	ldr	r0, .L1267+12
 	bl	sftl_printk
-.L1135:
+.L1143:
 	ldr	r3, [fp, #-84]
 	cmp	r3, #0
 	cmpne	r6, r3
-	beq	.L1136
+	beq	.L1144
 	movw	r2, #1801
-	ldr	r1, .L1259+8
-	ldr	r0, .L1259+12
+	ldr	r1, .L1267+8
+	ldr	r0, .L1267+12
 	bl	sftl_printk
-.L1136:
+.L1144:
 	mov	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1257
-.L1138:
+	b	.L1265
+.L1146:
 	ldrh	r3, [ip], #2
 	cmp	r3, r7
-	beq	.L1137
+	beq	.L1145
 	mla	r1, r8, r5, r0
 	orr	r3, r4, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8216,45 +8222,45 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L1137:
+.L1145:
 	add	r2, r2, #1
-	b	.L1134
-.L1144:
+	b	.L1142
+.L1152:
 	ldr	r2, [r7]
 	cmp	r2, #0
-	bne	.L1140
+	bne	.L1148
 	ldr	ip, [r7, #12]
 	ldr	r2, [ip, #4]
 	cmn	r2, #1
-	beq	.L1141
-	ldr	r1, .L1259
+	beq	.L1149
+	ldr	r1, .L1267
 	mov	r0, r2
 	str	ip, [fp, #-68]
 	ldr	r1, [r1, #2596]
 	bl	ftl_cmp_data_ver
 	ldr	ip, [fp, #-68]
 	cmp	r0, #0
-	ldrne	r1, .L1259
+	ldrne	r1, .L1267
 	addne	r2, r2, #1
 	strne	r2, [r1, #2596]
-.L1141:
+.L1149:
 	ldr	r2, [ip]
 	cmn	r2, #1
-	bne	.L1143
-.L1142:
+	bne	.L1151
+.L1150:
 	uxth	r2, r4
 	uxth	r3, r3
 	str	r2, [fp, #-60]
 	mov	r2, #20
 	mla	r9, r2, r3, r9
-	b	.L1252
-.L1140:
+	b	.L1260
+.L1148:
 	ldr	r8, [fp, #-60]
-.L1143:
+.L1151:
 	add	r3, r3, #1
 	add	r7, r7, #20
-	b	.L1139
-.L1154:
+	b	.L1147
+.L1162:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8263,10 +8269,10 @@ FtlRecoverySuperblock:
 	orrne	r2, r4, r2, lsl #10
 	uxthne	r5, r5
 	strne	r2, [r9, #4]
-.L1160:
+.L1168:
 	uxth	r2, r3
 	cmp	r8, r2
-	bhi	.L1154
+	bhi	.L1162
 	mov	r1, r5
 	mov	r2, #0
 	bl	FlashReadPages
@@ -8274,36 +8280,36 @@ FtlRecoverySuperblock:
 	mov	r2, #20
 	movw	r1, #65535
 	mla	r5, r2, r5, r3
-.L1155:
+.L1163:
 	cmp	r5, r3
 	addeq	r4, r4, #1
 	uxtheq	r4, r4
-	beq	.L1152
-.L1158:
+	beq	.L1160
+.L1166:
 	ldr	r2, [r3]
 	cmp	r2, #0
-	bne	.L1149
+	bne	.L1157
 	ldr	r2, [r3, #12]
 	ldrh	r0, [r2]
 	cmp	r0, r1
-	beq	.L1157
+	beq	.L1165
 	ldr	r2, [r2, #4]
 	cmn	r2, #1
 	strne	r2, [r6, #3452]
-.L1157:
+.L1165:
 	add	r3, r3, #20
-	b	.L1155
-.L1159:
+	b	.L1163
+.L1167:
 	mvn	r3, #0
 	str	r3, [r6, #3452]
-.L1149:
-	ldr	r7, .L1259
+.L1157:
+	ldr	r7, .L1267
 	mov	r2, #1
 	ldr	r9, [fp, #-64]
 	movw	r3, #3476
 	mov	r4, r7
 	strh	r2, [r7, r3]	@ movhi
-.L1161:
+.L1169:
 	ldrh	ip, [r4, #236]
 	movw	lr, #65535
 	ldr	r0, [r4, #3292]
@@ -8311,47 +8317,47 @@ FtlRecoverySuperblock:
 	ldr	r1, [fp, #-80]
 	mov	r3, #0
 	str	r3, [fp, #-72]
-.L1162:
+.L1170:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1164
+	bhi	.L1172
 	mov	r2, #0
 	ldr	r1, [fp, #-72]
 	bl	FlashReadPages
 	mov	r3, #0
-.L1256:
+.L1264:
 	str	r3, [fp, #-76]
 	ldr	r2, [fp, #-72]
 	ldrh	r3, [fp, #-76]
 	cmp	r2, r3
-	bhi	.L1192
-	ldr	r3, .L1259+16
+	bhi	.L1200
+	ldr	r3, .L1267+16
 	add	r9, r9, #1
 	uxth	r9, r9
 	ldrh	r3, [r3]
 	cmp	r3, r9
-	bne	.L1161
+	bne	.L1169
 	ldrh	r2, [r4, #236]
 	movw	r0, #65535
 	mov	r3, #0
 	strh	r9, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1193:
+.L1201:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1251
+	bcs	.L1259
 	ldr	r1, [fp, #-80]
 	ldrh	ip, [r1], #2
 	cmp	ip, r0
 	str	r1, [fp, #-80]
 	add	r1, r3, #1
-	bne	.L1257
+	bne	.L1265
 	mov	r3, r1
-	b	.L1193
-.L1164:
+	b	.L1201
+.L1172:
 	ldrh	r2, [r1], #2
 	cmp	r2, lr
-	beq	.L1163
+	beq	.L1171
 	ldr	r6, [fp, #-72]
 	orr	r2, r9, r2, lsl #10
 	mla	r6, r5, r6, r0
@@ -8360,10 +8366,10 @@ FtlRecoverySuperblock:
 	add	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [fp, #-72]
-.L1163:
+.L1171:
 	add	r3, r3, #1
-	b	.L1162
-.L1192:
+	b	.L1170
+.L1200:
 	ldr	r3, [fp, #-76]
 	mov	r6, #20
 	ldr	r2, [r4, #3292]
@@ -8376,7 +8382,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [fp, #-64]
 	cmp	r9, r3
-	bcc	.L1166
+	bcc	.L1174
 	ldr	r2, [fp, #-84]
 	moveq	r3, #1
 	movne	r3, #0
@@ -8384,26 +8390,26 @@ FtlRecoverySuperblock:
 	movls	r3, #0
 	andhi	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1166
+	bne	.L1174
 	ldr	r3, [fp, #-60]
 	ldr	r2, [fp, #-68]
 	cmp	r9, r3
 	cmpeq	r2, r0
-	beq	.L1167
+	beq	.L1175
 	ldr	r2, [fp, #-88]
 	ldr	r3, [r2, r6]
 	cmn	r3, #1
-	beq	.L1168
+	beq	.L1176
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
 	ldrhne	r0, [r10]
-	bne	.L1253
+	bne	.L1261
 	ldr	r3, [r8, #4]
 	cmn	r3, #1
 	str	r3, [fp, #-56]
-	beq	.L1170
+	beq	.L1178
 	mov	r0, r3
 	ldr	r1, [r4, #2596]
 	bl	ftl_cmp_data_ver
@@ -8411,16 +8417,16 @@ FtlRecoverySuperblock:
 	ldrne	r3, [fp, #-56]
 	addne	r3, r3, #1
 	strne	r3, [r4, #2596]
-.L1170:
+.L1178:
 	ldrh	r2, [r8]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1171
+	beq	.L1179
 	mov	r2, #1952
-	ldr	r1, .L1259+8
-	ldr	r0, .L1259+12
+	ldr	r1, .L1267+8
+	ldr	r0, .L1267+12
 	bl	sftl_printk
-.L1171:
+.L1179:
 	ldr	r5, [r8, #8]
 	sub	r1, fp, #48
 	ldr	r3, [r8, #12]
@@ -8430,14 +8436,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #3452]
 	cmn	r1, #1
-	beq	.L1172
+	beq	.L1180
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1172
+	beq	.L1180
 	ldr	r2, [fp, #-52]
 	cmn	r2, #1
-	beq	.L1173
+	beq	.L1181
 	ldr	r0, [r4, #3292]
 	mov	r1, #1
 	add	r0, r0, r6
@@ -8449,132 +8455,132 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r6]
 	add	r3, r2, r6
 	cmn	r1, #1
-	bne	.L1174
-.L1175:
+	bne	.L1182
+.L1183:
 	mvn	r3, #0
 	str	r3, [fp, #-52]
-.L1182:
+.L1190:
 	ldr	r6, [fp, #-52]
 	cmn	r6, #1
-	beq	.L1166
-.L1196:
+	beq	.L1174
+.L1204:
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #244]
 	mov	r5, r0
 	cmp	r3, r0
-	bhi	.L1188
+	bhi	.L1196
 	movw	r2, #2057
-	ldr	r1, .L1259+8
-	ldr	r0, .L1259+12
+	ldr	r1, .L1267+8
+	ldr	r0, .L1267+12
 	bl	sftl_printk
-.L1188:
+.L1196:
 	ldr	r2, [r7, #76]
 	lsl	r3, r5, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1189
+	beq	.L1197
 	mov	r0, r5
-.L1253:
+.L1261:
 	bl	decrement_vpc_count
-	b	.L1166
-.L1173:
+	b	.L1174
+.L1181:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	bne	.L1166
+	bne	.L1174
 	mov	r2, #1
 	sub	r1, fp, #52
 	mov	r0, r5
 	bl	log2phys
-.L1166:
+.L1174:
 	ldr	r3, [fp, #-76]
 	add	r3, r3, #1
-	b	.L1256
-.L1174:
+	b	.L1264
+.L1182:
 	ldr	r1, [r8, #8]
 	cmp	r5, r1
-	bne	.L1175
+	bne	.L1183
 	ldr	r1, [r8, #4]
 	ldr	r0, [r4, #3452]
 	str	r1, [fp, #-88]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
+	beq	.L1183
 	ldr	r1, [fp, #-48]
 	ldr	r0, [fp, #-44]
 	cmp	r1, r0
-	bne	.L1177
-.L1180:
+	bne	.L1185
+.L1188:
 	ldr	r1, [fp, #-52]
 	mov	r0, r5
 	bl	FtlReUsePrevPpa
-	b	.L1175
-.L1177:
+	b	.L1183
+.L1185:
 	ldr	r0, [fp, #-52]
 	cmp	r1, r0
-	beq	.L1175
+	beq	.L1183
 	cmn	r1, #1
 	streq	r1, [r2, r6]
-	beq	.L1179
+	beq	.L1187
 	str	r1, [r3, #4]
 	mov	r2, #0
 	mov	r1, #1
 	mov	r0, r3
 	ldr	r8, [r3, #12]
 	bl	FlashReadPages
-.L1179:
+.L1187:
 	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r6]
 	cmn	r2, #1
-	beq	.L1180
+	beq	.L1188
 	ldr	r3, [r8, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1180
+	beq	.L1188
 	mov	r1, r3
 	ldr	r0, [fp, #-88]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
-	b	.L1180
-.L1172:
+	beq	.L1183
+	b	.L1188
+.L1180:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	beq	.L1182
+	beq	.L1190
 	ldr	r1, [fp, #-52]
 	cmn	r1, #1
-	beq	.L1184
+	beq	.L1192
 	ldr	r3, [r4, #252]
 	cmp	r3, r1, lsr #10
-	ldrls	r0, .L1259+20
-	bls	.L1255
-.L1184:
+	ldrls	r0, .L1267+20
+	bls	.L1263
+.L1192:
 	mov	r2, #1
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r6, [fp, #-48]
 	cmn	r6, #1
-	beq	.L1182
+	beq	.L1190
 	ldr	r3, [fp, #-52]
 	cmp	r6, r3
-	beq	.L1196
+	beq	.L1204
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1195
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1195
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	bne	.L1182
-.L1187:
+	bne	.L1190
+.L1195:
 	ldr	r0, [r7, #3292]
 	mov	r2, #0
 	mov	r1, #1
@@ -8584,24 +8590,24 @@ FtlRecoverySuperblock:
 	ldr	r3, [r7, #3292]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L1182
+	beq	.L1190
 	ldr	r1, [r8, #4]
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1182
+	bne	.L1190
 	mov	r2, #1
 	sub	r1, fp, #48
 	mov	r0, r5
 	bl	log2phys
-	b	.L1182
-.L1189:
-	ldr	r0, .L1259+24
+	b	.L1190
+.L1197:
+	ldr	r0, .L1267+24
 	mov	r1, r5
-.L1255:
+.L1263:
 	bl	sftl_printk
-	b	.L1166
-.L1168:
+	b	.L1174
+.L1176:
 	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	addls	r2, r4, r3, lsl #2
@@ -8613,28 +8619,28 @@ FtlRecoverySuperblock:
 	ldr	r3, [r4, #3452]
 	cmn	r3, #1
 	ldreq	r3, [fp, #-56]
-	beq	.L1254
+	beq	.L1262
 	ldr	r2, [fp, #-56]
 	cmp	r2, r3
-	bcs	.L1166
+	bcs	.L1174
 	mov	r3, r2
-.L1254:
+.L1262:
 	str	r3, [r4, #3452]
-	b	.L1166
-.L1167:
+	b	.L1174
+.L1175:
 	ldrb	r3, [fp, #-68]	@ zero_extendqisi2
 	ldr	r2, [fp, #-68]
 	ldr	r1, [fp, #-60]
 	strb	r3, [r10, #6]
 	ldrh	r3, [fp, #-60]
 	strh	r3, [r10, #2]	@ movhi
-.L1258:
+.L1266:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1251
-.L1260:
+	b	.L1259
+.L1268:
 	.align	2
-.L1259:
+.L1267:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+316
 	.word	.LANCHOR1+435
@@ -8657,110 +8663,109 @@ ftl_check_vpc:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r4, #0
-	ldr	r6, .L1285
-	ldr	r1, .L1285+4
-	ldr	r0, .L1285+8
+	ldr	r6, .L1293
+	ldr	r1, .L1293+4
+	ldr	r0, .L1293+8
 	mov	r5, r6
 	bl	sftl_printk
-	mov	r2, #8192
-	mov	r1, #0
-	ldr	r0, .L1285+12
-	bl	ftl_memset
-.L1262:
+	mov	r1, #8192
+	ldr	r0, .L1293+12
+	bl	__memzero
+.L1270:
 	ldr	r3, [r6, #2556]
 	cmp	r4, r3
-	bcc	.L1264
-	ldr	r8, .L1285+12
+	bcc	.L1272
+	ldr	r8, .L1293+12
 	mov	r4, #0
-	ldr	r9, .L1285+16
+	ldr	r9, .L1293+16
 	mov	r6, r4
-.L1265:
+.L1273:
 	ldrh	r2, [r5, #244]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1267
+	bhi	.L1275
 	ldr	r4, [r5, #2536]
 	cmp	r4, #0
-	beq	.L1268
+	beq	.L1276
 	ldr	r3, [r5, #2520]
 	mov	r7, #0
 	ldrh	r8, [r5, #228]
-	ldr	r9, .L1285+12
-	ldr	r10, .L1285+20
+	ldr	r9, .L1293+12
+	ldr	r10, .L1293+20
 	sub	r4, r4, r3
 	ubfx	r4, r4, #3, #16
-.L1269:
+.L1277:
 	uxth	r3, r7
 	cmp	r8, r3
-	bls	.L1268
+	bls	.L1276
 	ldr	r2, [r5, #76]
 	lsl	r3, r4, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	beq	.L1270
+	beq	.L1278
 	mov	r6, #1
 	ldrh	r3, [r9, r3]
 	mov	r1, r4
 	mov	r0, r10
 	bl	sftl_printk
-.L1270:
+.L1278:
 	ldr	r3, [r5, #2520]
 	lsl	r4, r4, #3
 	add	r7, r7, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L1269
-.L1268:
+	bne	.L1277
+.L1276:
 	cmp	r6, #0
 	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 	movw	r2, #2383
-	ldr	r1, .L1285+4
-	ldr	r0, .L1285+24
+	ldr	r1, .L1293+4
+	ldr	r0, .L1293+24
 	bl	sftl_printk
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1264:
+.L1272:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1263
+	beq	.L1271
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, .L1285+12
+	ldr	r2, .L1293+12
 	lsl	r0, r0, #1
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1263:
+.L1271:
 	add	r4, r4, #1
-	b	.L1262
-.L1267:
+	b	.L1270
+.L1275:
 	uxth	r1, r4
 	ldr	r3, [r5, #76]
 	lsl	r7, r1, #1
 	ldrh	r2, [r3, r7]
 	ldrh	r3, [r8, r7]
 	cmp	r2, r3
-	beq	.L1266
+	beq	.L1274
 	mov	r0, r9
 	bl	sftl_printk
 	ldr	r3, [r5, #76]
 	movw	r2, #65535
 	ldrh	r3, [r3, r7]
 	cmp	r3, r2
-	beq	.L1266
+	beq	.L1274
 	ldrh	r2, [r8, r7]
 	cmp	r2, r3
 	movhi	r6, #1
-.L1266:
+.L1274:
 	add	r4, r4, #1
-	b	.L1265
-.L1286:
+	b	.L1273
+.L1294:
 	.align	2
-.L1285:
+.L1293:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+457
 	.word	.LC111
@@ -8783,39 +8788,39 @@ ftl_scan_all_data:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	r5, #0
-	ldr	r6, .L1295
+	ldr	r6, .L1303
 	mov	r1, #0
-	ldr	r0, .L1295+4
+	ldr	r0, .L1303+4
 	bl	sftl_printk
 	mov	r4, r6
-.L1288:
+.L1296:
 	ldr	r3, [r6, #2556]
 	cmp	r5, r3
-	bcc	.L1294
+	bcc	.L1302
 	sub	sp, fp, #28
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1294:
+.L1302:
 	mov	r2, #0
 	sub	r1, fp, #32
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
 	cmp	r3, #0
-	bne	.L1289
+	bne	.L1297
 	ldr	r2, [fp, #-32]
 	mov	r1, r5
-	ldr	r0, .L1295+8
+	ldr	r0, .L1303+8
 	bl	sftl_printk
-.L1289:
+.L1297:
 	ldr	r3, [fp, #-32]
 	cmn	r3, #1
-	beq	.L1291
+	beq	.L1299
 	str	r3, [r4, #3460]
 	mov	r2, #0
 	ldr	r3, [r4, #3304]
 	mov	r1, #1
 	ldr	r7, [r4, #3336]
-	ldr	r0, .L1295+12
+	ldr	r0, .L1303+12
 	str	r3, [r4, #3464]
 	str	r5, [r4, #3472]
 	str	r7, [r4, #3468]
@@ -8824,14 +8829,14 @@ ftl_scan_all_data:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
 	cmpne	r3, #256
-	beq	.L1292
+	beq	.L1300
 	ldr	r3, [r7, #8]
 	cmp	r5, r3
-	beq	.L1291
-.L1292:
+	beq	.L1299
+.L1300:
 	ldr	r2, [r4, #3464]
 	ldr	r3, [r4, #3468]
-	ldr	r0, .L1295+16
+	ldr	r0, .L1303+16
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -8846,12 +8851,12 @@ ftl_scan_all_data:
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1291:
+.L1299:
 	add	r5, r5, #1
-	b	.L1288
-.L1296:
+	b	.L1296
+.L1304:
 	.align	2
-.L1295:
+.L1303:
 	.word	.LANCHOR0
 	.word	.LC114
 	.word	.LC115
@@ -8872,38 +8877,38 @@ FtlGcScanTempBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #48
 	mov	r4, r0
-	ldr	r3, .L1329
+	ldr	r3, .L1337
 	str	r1, [fp, #-76]
 	ldrh	r5, [r3, #4]
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1322
+	beq	.L1330
 	cmp	r5, #0
-	bne	.L1298
-.L1299:
+	bne	.L1306
+.L1307:
 	bl	FtlGcPageVarInit
-	b	.L1300
-.L1322:
+	b	.L1308
+.L1330:
 	mov	r5, #0
-.L1298:
-	ldr	r2, .L1329+4
+.L1306:
+	ldr	r2, .L1337+4
 	movw	r3, #306
 	ldrh	r3, [r2, r3]
 	ldr	r2, [fp, #-76]
 	cmp	r3, r2
-	beq	.L1299
-.L1300:
-	ldr	r6, .L1329+4
+	beq	.L1307
+.L1308:
+	ldr	r6, .L1337+4
 	mov	r3, #0
 	str	r3, [fp, #-68]
-.L1316:
+.L1324:
 	ldrh	r2, [r4]
 	mov	r3, #0
 	strb	r3, [r4, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1301
-.L1319:
+	beq	.L1309
+.L1327:
 	ldrh	r3, [r6, #236]
 	add	ip, r4, #16
 	ldr	r0, [r6, #3292]
@@ -8912,7 +8917,7 @@ FtlGcScanTempBlk:
 	str	r3, [fp, #-72]
 	ldr	r3, [r6, #3180]
 	str	r3, [fp, #-80]
-	ldr	r3, .L1329+8
+	ldr	r3, .L1337+8
 	ldrh	r2, [r3]
 	ldrh	r10, [r3, #2]
 	str	r2, [fp, #-84]
@@ -8920,19 +8925,19 @@ FtlGcScanTempBlk:
 	str	r2, [fp, #-88]
 	mov	r2, #0
 	mov	r7, r2
-.L1302:
+.L1310:
 	ldr	r1, [fp, #-72]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L1304
+	bhi	.L1312
 	mov	r8, #0
 	mov	r2, #0
 	mov	r1, r7
 	bl	FlashReadPages
-.L1305:
+.L1313:
 	uxth	r3, r8
 	cmp	r7, r3
-	bhi	.L1317
+	bhi	.L1325
 	ldr	r3, [fp, #-68]
 	add	r5, r5, #1
 	uxth	r5, r5
@@ -8941,14 +8946,14 @@ FtlGcScanTempBlk:
 	ldr	r2, [fp, #-68]
 	ldr	r3, [fp, #-76]
 	cmp	r3, r2
-	ldr	r2, .L1329+12
-	bls	.L1318
-.L1320:
+	ldr	r2, .L1337+12
+	bls	.L1326
+.L1328:
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bhi	.L1319
-.L1301:
-	ldr	r3, .L1329
+	bhi	.L1327
+.L1309:
+	ldr	r3, .L1337
 	mvn	r2, #0
 	strh	r5, [r4, #2]	@ movhi
 	mov	r1, r5
@@ -8957,11 +8962,11 @@ FtlGcScanTempBlk:
 	mov	r2, #0
 	strb	r2, [r4, #6]
 	bl	ftl_sb_update_avl_pages
-	b	.L1321
-.L1304:
+	b	.L1329
+.L1312:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1303
+	beq	.L1311
 	mla	r1, lr, r7, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8984,10 +8989,10 @@ FtlGcScanTempBlk:
 	bic	r3, r3, #3
 	add	r3, r8, r3
 	str	r3, [r1, #12]
-.L1303:
+.L1311:
 	add	r2, r2, #1
-	b	.L1302
-.L1317:
+	b	.L1310
+.L1325:
 	mov	ip, #20
 	ldr	r2, [r6, #3292]
 	mul	ip, ip, r8
@@ -8997,12 +9002,12 @@ FtlGcScanTempBlk:
 	ldr	r9, [r3, #12]
 	cmp	r10, #0
 	str	r1, [fp, #-72]
-	bne	.L1306
+	bne	.L1314
 	ldrh	r1, [r9]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1307
-.L1327:
+	bne	.L1315
+.L1335:
 	ldrh	r3, [r4]
 	mov	r1, #0
 	ldr	r2, [r6, #76]
@@ -9015,13 +9020,13 @@ FtlGcScanTempBlk:
 	strh	r3, [r4]	@ movhi
 	strh	r3, [r6, #176]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1316
-.L1307:
+	b	.L1324
+.L1315:
 	ldr	r0, [r9, #8]
 	ldr	r2, [r6, #2556]
 	str	ip, [fp, #-80]
 	cmp	r0, r2
-	bhi	.L1327
+	bhi	.L1335
 	mov	r2, r10
 	sub	r1, fp, #64
 	bl	log2phys
@@ -9034,16 +9039,16 @@ FtlGcScanTempBlk:
 	lsr	r0, r0, #5
 	moveq	r0, #0
 	cmp	r0, #0
-	bne	.L1310
-.L1315:
+	bne	.L1318
+.L1323:
 	ldr	r2, [r9, #8]
-.L1328:
+.L1336:
 	ldr	r1, [fp, #-72]
 	add	r8, r8, #1
 	ldr	r0, [r9, #12]
 	bl	FtlGcUpdatePage
-	b	.L1305
-.L1310:
+	b	.L1313
+.L1318:
 	str	r2, [fp, #-56]
 	mov	r1, #1
 	ldr	r2, [r6, #3320]
@@ -9054,7 +9059,7 @@ FtlGcScanTempBlk:
 	str	r2, [fp, #-48]
 	mov	r2, r10
 	bl	FlashReadPages
-	ldr	r2, .L1329+16
+	ldr	r2, .L1337+16
 	ldr	ip, [fp, #-80]
 	ldr	r0, [fp, #-52]
 	ldrh	r1, [r2]
@@ -9062,44 +9067,44 @@ FtlGcScanTempBlk:
 	lsl	r1, r1, #7
 	add	ip, r2, ip
 	mov	r2, r10
-.L1312:
+.L1320:
 	cmp	r2, r1
-	beq	.L1315
+	beq	.L1323
 	ldr	lr, [ip, #8]
 	ldr	r10, [lr, r2, lsl #2]
 	ldr	lr, [r0, r2, lsl #2]
 	cmp	r10, lr
-	beq	.L1313
+	beq	.L1321
 	ldr	r2, [fp, #-56]
 	ldrh	r1, [r4]
-	ldr	r0, .L1329+20
+	ldr	r0, .L1337+20
 	bl	sftl_printk
-	b	.L1327
-.L1313:
+	b	.L1335
+.L1321:
 	add	r2, r2, #1
-	b	.L1312
-.L1306:
+	b	.L1320
+.L1314:
 	mvn	r2, #0
-	b	.L1328
-.L1318:
-	ldr	r1, .L1329
+	b	.L1336
+.L1326:
+	ldr	r1, .L1337
 	movw	r0, #65535
 	ldrh	r3, [r1, #4]
 	cmp	r3, r0
-	beq	.L1320
+	beq	.L1328
 	ldr	r0, [fp, #-68]
 	add	r3, r3, r0
 	strh	r3, [r1, #4]	@ movhi
 	ldrh	r3, [r2]
 	cmp	r3, r5
-	bls	.L1320
-.L1321:
+	bls	.L1328
+.L1329:
 	mvn	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1330:
+.L1338:
 	.align	2
-.L1329:
+.L1337:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR0+314
@@ -9120,27 +9125,27 @@ FtlReadRefresh:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #88
-	ldr	r6, .L1347
+	ldr	r6, .L1355
 	ldr	r9, [r6, #2724]
 	mov	r5, r6
 	cmp	r9, #0
-	beq	.L1332
+	beq	.L1340
 	ldr	r2, [r6, #2728]
 	ldr	r3, [r6, #2556]
 	cmp	r2, r3
-	bcs	.L1333
+	bcs	.L1341
 	mov	r4, #2048
-.L1338:
+.L1346:
 	ldr	r0, [r5, #2728]
 	ldr	r3, [r5, #2556]
 	cmp	r0, r3
-	bcc	.L1334
-.L1337:
+	bcc	.L1342
+.L1345:
 	mvn	r0, #0
-.L1331:
+.L1339:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1334:
+.L1342:
 	mov	r2, #0
 	sub	r1, fp, #128
 	bl	log2phys
@@ -9149,7 +9154,7 @@ FtlReadRefresh:
 	cmn	r2, #1
 	add	r3, r3, #1
 	str	r3, [r5, #2728]
-	beq	.L1336
+	beq	.L1344
 	str	r3, [fp, #-108]
 	sub	r0, fp, #40
 	ldr	r3, [r5, #3328]
@@ -9163,35 +9168,35 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-124]
 	cmp	r3, #256
-	bne	.L1337
+	bne	.L1345
 	ldr	r0, [fp, #-128]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1337
-.L1336:
+	b	.L1345
+.L1344:
 	subs	r4, r4, #1
-	bne	.L1338
-	b	.L1337
-.L1333:
+	bne	.L1346
+	b	.L1345
+.L1341:
 	ldr	r3, [r6, #2560]
 	mov	r0, #0
 	str	r0, [r6, #2724]
 	str	r0, [r6, #2728]
 	str	r3, [r6, #2720]
-	b	.L1331
-.L1332:
+	b	.L1339
+.L1340:
 	ldr	r1, [r6, #2616]
 	movw	r4, #10000
 	ldr	r8, [r6, #2560]
 	ldr	r7, [r6, #2720]
 	cmp	r1, r4
-	ldr	r10, .L1347+4
+	ldr	r10, .L1355+4
 	add	r3, r8, #1048576
 	movhi	r4, #31
 	movls	r4, #63
 	cmp	r7, r3
-	bhi	.L1342
+	bhi	.L1350
 	ldr	r3, [r6, #2556]
 	lsr	r1, r1, #10
 	mov	r0, #1000
@@ -9200,15 +9205,15 @@ FtlReadRefresh:
 	bl	__udivsi3
 	add	r0, r0, r7
 	cmp	r8, r0
-	bhi	.L1342
+	bhi	.L1350
 	ldrh	r3, [r10, #28]
 	ands	r0, r4, r3
 	movne	r0, r9
-	bne	.L1331
+	bne	.L1339
 	ldr	r2, [r6, #2744]
 	cmp	r3, r2
-	beq	.L1331
-.L1342:
+	beq	.L1339
+.L1350:
 	ldrh	r3, [r10, #28]
 	mov	r0, #0
 	str	r0, [r5, #2728]
@@ -9216,10 +9221,10 @@ FtlReadRefresh:
 	str	r3, [r5, #2744]
 	mov	r3, #1
 	str	r3, [r5, #2724]
-	b	.L1331
-.L1348:
+	b	.L1339
+.L1356:
 	.align	2
-.L1347:
+.L1355:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2472
 	.size	FtlReadRefresh, .-FtlReadRefresh
@@ -9235,32 +9240,32 @@ l2p_flush:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r6, .L1353
+	ldr	r6, .L1361
 	mov	r4, #0
-	ldr	r5, .L1353+4
+	ldr	r5, .L1361+4
 	bl	FtlWriteDump_data
-.L1350:
+.L1358:
 	ldrh	r2, [r5]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1352
+	bhi	.L1360
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1352:
+.L1360:
 	ldr	r2, [r6, #2544]
 	uxth	r0, r4
 	mov	r3, #12
 	mla	r3, r3, r0, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1351
+	bge	.L1359
 	bl	flush_l2p_region
-.L1351:
+.L1359:
 	add	r4, r4, #1
-	b	.L1350
-.L1354:
+	b	.L1358
+.L1362:
 	.align	2
-.L1353:
+.L1361:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+342
 	.size	l2p_flush, .-l2p_flush
@@ -9278,7 +9283,7 @@ FtlVendorPartWrite:
 	sub	fp, ip, #4
 	sub	sp, sp, #100
 	mov	r7, r0
-	ldr	r4, .L1364
+	ldr	r4, .L1372
 	mov	r5, r1
 	str	r2, [fp, #-128]
 	add	r2, r0, r1
@@ -9286,24 +9291,24 @@ FtlVendorPartWrite:
 	sub	r4, r4, #300
 	cmp	r2, r3
 	mvnhi	r8, #0
-	bhi	.L1355
+	bhi	.L1363
 	add	r3, r4, #312
 	mov	r8, #0
 	ldrh	r6, [r3]
 	lsr	r6, r0, r6
 	lsl	r10, r6, #2
-.L1357:
+.L1365:
 	cmp	r5, #0
-	bne	.L1362
-.L1355:
+	bne	.L1370
+.L1363:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1362:
+.L1370:
 	ldr	r3, [r4, #3376]
 	mov	r0, r7
 	ldr	ip, [r3, r10]
-	ldr	r3, .L1364+4
+	ldr	r3, .L1372+4
 	str	ip, [fp, #-140]
 	ldrh	r2, [r3]
 	mov	r1, r2
@@ -9320,7 +9325,7 @@ FtlVendorPartWrite:
 	cmpne	r9, r2
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L1359
+	beq	.L1367
 	ldr	r2, [r4, #3312]
 	sub	r0, fp, #124
 	str	ip, [fp, #-120]
@@ -9330,7 +9335,7 @@ FtlVendorPartWrite:
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-.L1360:
+.L1368:
 	ldr	r3, [fp, #-132]
 	lsl	ip, r9, #9
 	ldr	r0, [r4, #3312]
@@ -9344,7 +9349,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r6
 	ldr	r2, [r4, #3312]
-	ldr	r0, .L1364+8
+	ldr	r0, .L1372+8
 	add	r6, r6, #1
 	bl	FtlMapWritePage
 	ldr	r3, [fp, #-128]
@@ -9353,16 +9358,16 @@ FtlVendorPartWrite:
 	mvneq	r8, #0
 	add	r3, r3, ip
 	str	r3, [fp, #-128]
-	b	.L1357
-.L1359:
-	ldr	r3, .L1364+12
+	b	.L1365
+.L1367:
+	ldr	r3, .L1372+12
 	ldr	r0, [r4, #3312]
 	ldrh	r2, [r3]
 	bl	ftl_memset
-	b	.L1360
-.L1365:
+	b	.L1368
+.L1373:
 	.align	2
-.L1364:
+.L1372:
 	.word	.LANCHOR0+300
 	.word	.LANCHOR0+262
 	.word	.LANCHOR0+3612
@@ -9380,12 +9385,12 @@ Ftl_save_ext_data:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1368
-	ldr	r2, .L1368+4
+	ldr	r3, .L1376
+	ldr	r2, .L1376+4
 	ldr	r1, [r3, #2644]
 	cmp	r1, r2
 	ldmfdne	sp, {fp, sp, pc}
-	ldr	r2, .L1368+8
+	ldr	r2, .L1376+8
 	mov	r1, #1
 	mov	r0, #0
 	str	r2, [r3, #2648]
@@ -9413,12 +9418,12 @@ Ftl_save_ext_data:
 	str	r2, [r3, #2688]
 	ldr	r2, [r3, #2620]
 	str	r2, [r3, #2692]
-	ldr	r2, .L1368+12
+	ldr	r2, .L1376+12
 	bl	FtlVendorPartWrite
 	ldmfd	sp, {fp, sp, pc}
-.L1369:
+.L1377:
 	.align	2
-.L1368:
+.L1376:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
@@ -9436,7 +9441,7 @@ FtlEctTblFlush:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1375
+	ldr	r3, .L1383
 	movw	r1, #3656
 	ldrh	r2, [r3, r1]
 	cmp	r2, #31
@@ -9445,22 +9450,22 @@ FtlEctTblFlush:
 	strhls	r2, [r3, r1]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	bne	.L1372
+	bne	.L1380
 	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1373
-.L1372:
+	bcc	.L1381
+.L1380:
 	ldr	r2, [r3, #3352]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1375+4
+	ldr	r1, .L1383+4
 	str	r1, [r2]
 	ldr	r2, [r3, #3352]
-	ldr	r3, .L1375+8
+	ldr	r3, .L1383+8
 	ldrh	r1, [r3]
 	lsl	r3, r1, #9
 	str	r3, [r2, #12]
@@ -9471,12 +9476,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1373:
+.L1381:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1376:
+.L1384:
 	.align	2
-.L1375:
+.L1383:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LANCHOR0+3344
@@ -9495,7 +9500,7 @@ FtlVendorPartRead:
 	sub	fp, ip, #4
 	sub	sp, sp, #96
 	mov	r10, r2
-	ldr	r5, .L1387
+	ldr	r5, .L1395
 	add	r2, r0, r1
 	mov	r8, r0
 	mov	r7, r1
@@ -9503,27 +9508,27 @@ FtlVendorPartRead:
 	sub	r5, r5, #300
 	cmp	r2, r3
 	mvnhi	r9, #0
-	bhi	.L1377
+	bhi	.L1385
 	add	r3, r5, #312
 	mov	r9, #0
 	ldrh	r6, [r3]
 	lsr	r6, r0, r6
 	lsl	r3, r6, #2
 	str	r3, [fp, #-128]
-.L1379:
+.L1387:
 	cmp	r7, #0
-	bne	.L1385
-.L1377:
+	bne	.L1393
+.L1385:
 	mov	r0, r9
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1385:
+.L1393:
 	ldr	r2, [fp, #-128]
 	mov	r0, r8
 	ldr	r3, [r5, #3376]
 	ldr	r3, [r3, r2]
 	str	r3, [fp, #-136]
-	ldr	r3, .L1387+4
+	ldr	r3, .L1395+4
 	ldrh	r4, [r3]
 	mov	r1, r4
 	bl	__umodsi3
@@ -9536,7 +9541,7 @@ FtlVendorPartRead:
 	cmp	r3, #0
 	lsl	r2, r4, #9
 	str	r2, [fp, #-136]
-	beq	.L1381
+	beq	.L1389
 	ldr	r2, [r5, #3312]
 	sub	r0, fp, #124
 	str	r3, [fp, #-120]
@@ -9553,23 +9558,23 @@ FtlVendorPartRead:
 	ldr	r2, [r5, #3456]
 	mvneq	r9, #0
 	cmp	r2, #256
-	bne	.L1383
+	bne	.L1391
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1387+8
+	ldr	r0, .L1395+8
 	bl	sftl_printk
 	ldr	r2, [r5, #3312]
 	mov	r1, r6
-	ldr	r0, .L1387+12
+	ldr	r0, .L1395+12
 	bl	FtlMapWritePage
-.L1383:
+.L1391:
 	ldr	r1, [r5, #3312]
 	lsl	r2, r4, #9
 	ldr	r3, [fp, #-132]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1384:
+.L1392:
 	ldr	r3, [fp, #-128]
 	add	r6, r6, #1
 	sub	r7, r7, r4
@@ -9577,16 +9582,16 @@ FtlVendorPartRead:
 	add	r10, r10, r4, lsl #9
 	add	r3, r3, #4
 	str	r3, [fp, #-128]
-	b	.L1379
-.L1381:
+	b	.L1387
+.L1389:
 	lsl	r2, r4, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1384
-.L1388:
+	b	.L1392
+.L1396:
 	.align	2
-.L1387:
+.L1395:
 	.word	.LANCHOR0+300
 	.word	.LANCHOR0+262
 	.word	.LC118
@@ -9604,7 +9609,7 @@ FtlLoadEctTbl:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1391
+	ldr	r4, .L1399
 	mov	r0, #64
 	add	r5, r4, #3344
 	ldr	r2, [r4, #3352]
@@ -9612,23 +9617,23 @@ FtlLoadEctTbl:
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1391+4
+	ldr	r3, .L1399+4
 	cmp	r2, r3
-	beq	.L1390
-	ldr	r1, .L1391+8
-	ldr	r0, .L1391+12
+	beq	.L1398
+	ldr	r1, .L1399+8
+	ldr	r0, .L1399+12
 	bl	sftl_printk
 	ldrh	r2, [r5]
 	mov	r1, #0
 	ldr	r0, [r4, #3352]
 	lsl	r2, r2, #9
 	bl	ftl_memset
-.L1390:
+.L1398:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1392:
+.L1400:
 	.align	2
-.L1391:
+.L1399:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC119
@@ -9646,24 +9651,23 @@ Ftl_load_ext_data:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1396
+	ldr	r4, .L1404
 	mov	r1, #1
 	mov	r0, #0
-	ldr	r2, .L1396+4
+	ldr	r2, .L1404+4
 	bl	FtlVendorPartRead
-	ldr	r5, .L1396+8
+	ldr	r5, .L1404+8
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	beq	.L1394
-	mov	r2, #512
-	mov	r1, #0
-	ldr	r0, .L1396+4
-	bl	ftl_memset
+	beq	.L1402
+	mov	r1, #512
+	ldr	r0, .L1404+4
+	bl	__memzero
 	str	r5, [r4, #2644]
-.L1394:
+.L1402:
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	bne	.L1395
+	bne	.L1403
 	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2584]
 	ldr	r3, [r4, #2736]
@@ -9688,8 +9692,8 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2616]
 	ldr	r3, [r4, #2692]
 	str	r3, [r4, #2620]
-.L1395:
-	ldr	r3, .L1396+12
+.L1403:
+	ldr	r3, .L1404+12
 	ldr	r0, [r4, #2600]
 	ldrh	r1, [r4, #244]
 	ldrh	r2, [r3]
@@ -9698,9 +9702,9 @@ Ftl_load_ext_data:
 	bl	__udivsi3
 	str	r0, [r4, #2608]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1397:
+.L1405:
 	.align	2
-.L1396:
+.L1404:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2644
 	.word	1179929683
@@ -9725,7 +9729,7 @@ FtlMapBlkWriteDump_data:
 	mov	r3, #0
 	ldrh	r5, [r0, #6]
 	str	r3, [r0, #36]
-	ldr	r3, .L1405
+	ldr	r3, .L1413
 	ldr	r2, [r0, #24]
 	sub	r5, r5, #1
 	uxth	r5, r5
@@ -9737,26 +9741,26 @@ FtlMapBlkWriteDump_data:
 	ldr	r2, [r2, r5, lsl #2]
 	cmp	r2, #0
 	str	r2, [r3, #3460]
-	beq	.L1400
+	beq	.L1408
 	mov	r2, #1
 	add	r0, r3, #3456
 	mov	r1, r2
 	bl	FlashReadPages
-.L1401:
+.L1409:
 	ldr	r2, [r4, #3464]
 	mov	r1, r5
 	mov	r0, r6
 	bl	FtlMapWritePage
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1400:
+.L1408:
 	movw	r3, #314
 	mov	r1, #255
 	ldrh	r2, [r4, r3]
 	bl	ftl_memset
-	b	.L1401
-.L1406:
+	b	.L1409
+.L1414:
 	.align	2
-.L1405:
+.L1413:
 	.word	.LANCHOR0
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
@@ -9771,10 +9775,10 @@ FtlVpcTblFlush:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1416
+	ldr	r4, .L1424
 	mov	r5, #0
 	mov	r1, #255
-	ldr	r6, .L1416+4
+	ldr	r6, .L1424+4
 	ldr	r3, [r4, #3304]
 	add	r9, r4, #308
 	ldr	r7, [r4, #3336]
@@ -9786,15 +9790,15 @@ FtlVpcTblFlush:
 	str	r7, [r4, #3468]
 	str	r5, [r7, #12]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, .L1416+8
+	ldr	r3, .L1424+8
 	strh	r3, [r7]	@ movhi
 	ldr	r3, [r4, #2636]
 	str	r5, [r7, #8]
 	ldrh	r2, [r4, #30]
 	str	r3, [r7, #4]
-	ldr	r3, .L1416+12
+	ldr	r3, .L1424+12
 	str	r3, [r4, #2472]
-	ldr	r3, .L1416+16
+	ldr	r3, .L1424+16
 	str	r3, [r4, #2476]
 	ldrh	r3, [r6, #6]
 	strh	r3, [r6, #-148]	@ movhi
@@ -9857,7 +9861,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1408:
+.L1416:
 	ldr	r3, [r4, #3304]
 	ldrh	r1, [r6, #2]
 	ldrh	r2, [r6]
@@ -9869,7 +9873,7 @@ FtlVpcTblFlush:
 	ldrh	r3, [r9]
 	sub	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1409
+	blt	.L1417
 	mov	r3, #0
 	ldrh	r8, [r6, #4]
 	strh	r3, [r6, #2]	@ movhi
@@ -9884,8 +9888,8 @@ FtlVpcTblFlush:
 	str	r2, [r4, #3460]
 	str	r3, [r7, #4]
 	strh	r0, [r7, #2]	@ movhi
-.L1409:
-	ldr	r3, .L1416+20
+.L1417:
+	ldr	r3, .L1424+20
 	ldr	r0, [r4, #3304]
 	ldrh	r1, [r3]
 	bl	js_hash
@@ -9893,7 +9897,7 @@ FtlVpcTblFlush:
 	str	r0, [r7, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1416+24
+	ldr	r0, .L1424+24
 	bl	FlashProgPages
 	ldrh	r3, [r6, #2]
 	ldr	r2, [r4, #3456]
@@ -9901,14 +9905,14 @@ FtlVpcTblFlush:
 	uxth	r3, r3
 	cmn	r2, #1
 	strh	r3, [r6, #2]	@ movhi
-	bne	.L1410
+	bne	.L1418
 	cmp	r3, #1
-	bne	.L1411
+	bne	.L1419
 	movw	r2, #1138
-	ldr	r1, .L1416+28
-	ldr	r0, .L1416+32
+	ldr	r1, .L1424+28
+	ldr	r0, .L1424+32
 	bl	sftl_printk
-.L1411:
+.L1419:
 	ldrh	r3, [r6, #2]
 	add	r5, r5, #1
 	uxth	r5, r5
@@ -9917,29 +9921,29 @@ FtlVpcTblFlush:
 	subeq	r3, r3, #1
 	strheq	r3, [r6, #2]	@ movhi
 	cmp	r5, #3
-	bls	.L1408
+	bls	.L1416
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L1416+36
+	ldr	r0, .L1424+36
 	bl	sftl_printk
-.L1414:
-	b	.L1414
-.L1410:
+.L1422:
+	b	.L1422
+.L1418:
 	cmp	r2, #256
 	cmpne	r3, #1
-	beq	.L1408
+	beq	.L1416
 	movw	r3, #65535
 	cmp	r8, r3
-	beq	.L1415
+	beq	.L1423
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
-.L1415:
+.L1423:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1417:
+.L1425:
 	.align	2
-.L1416:
+.L1424:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2628
 	.word	-3932
@@ -9982,17 +9986,17 @@ sftl_deinit:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1421
+	ldr	r3, .L1429
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1420
+	bne	.L1428
 	bl	FtlSysFlush
-.L1420:
+.L1428:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1422:
+.L1430:
 	.align	2
-.L1421:
+.L1429:
 	.word	.LANCHOR2
 	.size	sftl_deinit, .-sftl_deinit
 	.align	2
@@ -10009,21 +10013,21 @@ sftl_discard:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	add	r2, r0, r1
-	ldr	r4, .L1438
+	ldr	r4, .L1446
 	mov	r8, r0
 	mov	r6, r1
 	ldr	r3, [r4, #344]
 	cmp	r2, r3
 	mvnhi	r0, #0
-	bhi	.L1423
+	bhi	.L1431
 	cmp	r1, #31
-	bhi	.L1425
-.L1430:
+	bhi	.L1433
+.L1438:
 	mov	r0, #0
-.L1423:
+.L1431:
 	sub	sp, fp, #32
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1425:
+.L1433:
 	movw	r3, #262
 	ldrh	r5, [r4, r3]
 	mov	r1, r5
@@ -10033,38 +10037,38 @@ sftl_discard:
 	sub	r8, r8, r3
 	uxth	r8, r8
 	cmp	r8, #0
-	beq	.L1426
+	beq	.L1434
 	sub	r5, r5, r8
 	add	r7, r0, #1
 	cmp	r5, r6
 	movcs	r5, r6
 	uxth	r5, r5
 	sub	r6, r6, r5
-.L1426:
-	ldr	r5, .L1438+4
+.L1434:
+	ldr	r5, .L1446+4
 	mvn	r3, #0
 	str	r3, [fp, #-36]
 	mov	r8, r5
-.L1427:
+.L1435:
 	ldrh	r3, [r5]
 	cmp	r6, r3
-	bcs	.L1429
+	bcs	.L1437
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1430
+	bls	.L1438
 	mov	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1430
-.L1429:
+	b	.L1438
+.L1437:
 	mov	r2, #0
 	sub	r1, fp, #40
 	mov	r0, r7
 	bl	log2phys
 	ldr	r3, [fp, #-40]
 	cmn	r3, #1
-	beq	.L1428
+	beq	.L1436
 	ldr	r3, [r4, #3660]
 	mov	r2, #1
 	sub	r1, fp, #36
@@ -10079,14 +10083,14 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1428:
+.L1436:
 	ldrh	r3, [r8]
 	add	r7, r7, #1
 	sub	r6, r6, r3
-	b	.L1427
-.L1439:
+	b	.L1435
+.L1447:
 	.align	2
-.L1438:
+.L1446:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+262
 	.size	sftl_discard, .-sftl_discard
@@ -10104,38 +10108,38 @@ FtlVpcCheckAndModify:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1453
-	ldr	r1, .L1453+4
-	ldr	r0, .L1453+8
+	ldr	r4, .L1461
+	ldr	r1, .L1461+4
+	ldr	r0, .L1461+8
 	bl	sftl_printk
 	ldrh	r2, [r4, #246]
 	mov	r1, #0
 	ldr	r0, [r4, #3356]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-.L1441:
+.L1449:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1443
-	ldr	r10, .L1453+12
+	bcc	.L1451
+	ldr	r10, .L1461+12
 	mov	r7, #0
 	movw	r9, #65535
-.L1444:
+.L1452:
 	ldrh	r3, [r4, #244]
 	uxth	r6, r7
 	cmp	r3, r6
-	bhi	.L1449
+	bhi	.L1457
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1443:
+.L1451:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1442
+	beq	.L1450
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3356]
@@ -10143,10 +10147,10 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1442:
+.L1450:
 	add	r5, r5, #1
-	b	.L1441
-.L1449:
+	b	.L1449
+.L1457:
 	uxth	r8, r7
 	ldr	r3, [r4, #76]
 	lsl	r5, r8, #1
@@ -10155,36 +10159,36 @@ FtlVpcCheckAndModify:
 	ldrh	r3, [r3, r5]
 	cmp	r2, r9
 	cmpne	r2, r3
-	beq	.L1446
+	beq	.L1454
 	mov	r1, r8
 	mov	r0, r10
 	bl	sftl_printk
 	ldrh	r3, [r4, #28]
 	cmp	r3, r6
-	beq	.L1446
+	beq	.L1454
 	ldrh	r3, [r4, #128]
 	cmp	r3, r6
-	beq	.L1446
+	beq	.L1454
 	ldrh	r3, [r4, #80]
 	cmp	r3, r6
-	beq	.L1446
+	beq	.L1454
 	ldr	r3, [r4, #76]
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	ldr	r2, [r4, #3356]
 	ldrh	r2, [r2, r5]
 	strh	r2, [r3, r5]	@ movhi
-	bne	.L1448
-.L1446:
+	bne	.L1456
+.L1454:
 	add	r7, r7, #1
-	b	.L1444
-.L1448:
+	b	.L1452
+.L1456:
 	mov	r0, r8
 	bl	update_vpc_list
-	b	.L1446
-.L1454:
+	b	.L1454
+.L1462:
 	.align	2
-.L1453:
+.L1461:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+486
 	.word	.LC111
@@ -10202,49 +10206,49 @@ allocate_new_data_superblock:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1465
+	ldr	r4, .L1473
 	mov	r6, r0
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #244]
 	cmp	r3, r5
-	bcs	.L1456
+	bcs	.L1464
 	movw	r2, #2755
-	ldr	r1, .L1465+4
-	ldr	r0, .L1465+8
+	ldr	r1, .L1473+4
+	ldr	r0, .L1473+8
 	bl	sftl_printk
-.L1456:
+.L1464:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1457
+	beq	.L1465
 	ldr	r2, [r4, #76]
 	lsl	r3, r5, #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1458
+	beq	.L1466
 	bl	INSERT_DATA_LIST
-.L1457:
+.L1465:
 	mov	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #3442
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1459
+	beq	.L1467
 	cmp	r5, r0
-	bne	.L1460
+	bne	.L1468
 	ldr	r2, [r4, #76]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1461
-.L1460:
+	beq	.L1469
+.L1468:
 	bl	update_vpc_list
-.L1461:
+.L1469:
 	mvn	r2, #0
 	movw	r3, #3442
 	strh	r2, [r4, r3]	@ movhi
-.L1459:
+.L1467:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10253,12 +10257,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1458:
-	bl	INSERT_FREE_LIST
-	b	.L1457
 .L1466:
+	bl	INSERT_FREE_LIST
+	b	.L1465
+.L1474:
 	.align	2
-.L1465:
+.L1473:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+507
 	.word	.LC8
@@ -10277,19 +10281,19 @@ FtlProgPages:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r6, #0
-	ldr	r8, .L1480
+	ldr	r8, .L1488
 	mov	r5, r3
 	mov	r2, #0
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	mov	r4, r0
 	mov	r9, r1
 	bl	FlashProgPages
-.L1468:
+.L1476:
 	cmp	r6, r9
-	beq	.L1474
-	ldr	r7, .L1480+4
-	b	.L1475
-.L1470:
+	beq	.L1482
+	ldr	r7, .L1488+4
+	b	.L1483
+.L1478:
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
@@ -10299,10 +10303,10 @@ FtlProgPages:
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	bne	.L1469
+	bne	.L1477
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1469:
+.L1477:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	mov	r2, #0
@@ -10312,20 +10316,20 @@ FtlProgPages:
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	FlashProgPages
-.L1475:
+.L1483:
 	ldr	r2, [r4]
 	cmn	r2, #1
 	cmpne	r2, #256
-	beq	.L1470
+	beq	.L1478
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r8, #236]
 	cmp	r2, r3
-	bcc	.L1471
-	movw	r2, #982
-	ldr	r1, .L1480+8
-	ldr	r0, .L1480+12
+	bcc	.L1479
+	movw	r2, #985
+	ldr	r1, .L1488+8
+	ldr	r0, .L1488+12
 	bl	sftl_printk
-.L1471:
+.L1479:
 	ldr	r3, [r4, #4]
 	sub	r1, fp, #40
 	mov	r2, #1
@@ -10338,36 +10342,36 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	cmn	r10, #1
 	mov	r7, r0
-	beq	.L1472
+	beq	.L1480
 	ldr	r2, [r8, #76]
 	lsl	r3, r0, #1
 	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L1473
+	bne	.L1481
 	mov	r1, r0
-	ldr	r0, .L1480+16
+	ldr	r0, .L1488+16
 	bl	sftl_printk
-.L1473:
+.L1481:
 	mov	r0, r7
 	bl	decrement_vpc_count
-.L1472:
+.L1480:
 	add	r6, r6, #1
 	add	r4, r4, #20
-	b	.L1468
-.L1474:
-	ldr	r3, .L1480
+	b	.L1476
+.L1482:
+	ldr	r3, .L1488
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r3, #236]
 	cmp	r2, r3
 	ldmibcc	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-	movw	r2, #997
-	ldr	r1, .L1480+8
-	ldr	r0, .L1480+12
+	mov	r2, #1000
+	ldr	r1, .L1488+8
+	ldr	r0, .L1488+12
 	bl	sftl_printk
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1481:
+.L1489:
 	.align	2
-.L1480:
+.L1488:
 	.word	.LANCHOR0
 	.word	.LC122
 	.word	.LANCHOR1+536
@@ -10388,49 +10392,49 @@ FtlGcFreeTempBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	movw	r3, #306
-	ldr	r4, .L1506
+	ldr	r4, .L1514
 	ldrh	r2, [r4, #128]
 	ldrh	r1, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1483
-.L1490:
+	bne	.L1491
+.L1498:
 	ldrh	r2, [r4, #128]
 	mov	r3, #0
 	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1503
-.L1484:
+	bne	.L1511
+.L1492:
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1483:
+.L1491:
 	cmp	r0, #0
-	ldr	r5, .L1506+4
-	beq	.L1486
+	ldr	r5, .L1514+4
+	beq	.L1494
 	ldrh	r2, [r5, #4]
 	cmp	r2, r3
-	beq	.L1487
-.L1488:
+	beq	.L1495
+.L1496:
 	mov	r1, #2
-.L1486:
-	ldr	r0, .L1506+8
+.L1494:
+	ldr	r0, .L1514+8
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r5, #4]
 	movw	r3, #65535
 	str	r0, [fp, #-44]
 	cmp	r2, r3
-	beq	.L1490
+	beq	.L1498
 	mov	r0, #1
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1487:
+.L1495:
 	mov	r3, #0
 	strh	r3, [r5, #4]	@ movhi
 	ldrh	r3, [r4, #228]
 	cmp	r3, #17
-	bhi	.L1488
-	b	.L1486
-.L1503:
+	bhi	.L1496
+	b	.L1494
+.L1511:
 	movw	r3, #3208
 	ldrb	r1, [r4, #135]	@ zero_extendqisi2
 	ldrh	r2, [r4, r3]
@@ -10438,12 +10442,12 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, r3]
 	mul	r3, r3, r1
 	cmp	r2, r3
-	beq	.L1491
+	beq	.L1499
 	mov	r2, #164
-	ldr	r1, .L1506+12
-	ldr	r0, .L1506+16
+	ldr	r1, .L1514+12
+	ldr	r0, .L1514+16
 	bl	sftl_printk
-.L1491:
+.L1499:
 	movw	r0, #306
 	ldrb	r2, [r4, #135]	@ zero_extendqisi2
 	ldrh	r0, [r4, r0]
@@ -10451,7 +10455,7 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, #128]
 	mov	r9, #12
 	ldr	r1, [r4, #76]
-	ldr	r8, .L1506+20
+	ldr	r8, .L1514+20
 	smulbb	r2, r2, r0
 	lsl	r3, r3, #1
 	strh	r2, [r1, r3]	@ movhi
@@ -10460,11 +10464,11 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, r3]
 	add	r3, r3, r2
 	str	r3, [r4, #2580]
-.L1492:
+.L1500:
 	ldrh	r2, [r8]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1496
+	bhi	.L1504
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #128]
@@ -10472,10 +10476,10 @@ FtlGcFreeTempBlock:
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1497
+	beq	.L1505
 	bl	INSERT_DATA_LIST
-.L1498:
-	ldr	r6, .L1506+24
+.L1506:
+	ldr	r6, .L1514+24
 	movw	r3, #3208
 	mvn	r7, #0
 	mov	r5, #0
@@ -10493,8 +10497,8 @@ FtlGcFreeTempBlock:
 	movgt	r2, #20
 	movwgt	r3, #3156
 	strhgt	r2, [r4, r3]	@ movhi
-	b	.L1484
-.L1496:
+	b	.L1492
+.L1504:
 	uxth	r7, r5
 	ldr	r10, [r4, #3204]
 	ldr	r3, [r4, #2556]
@@ -10502,18 +10506,18 @@ FtlGcFreeTempBlock:
 	add	r6, r10, r7
 	ldr	r0, [r6, #8]
 	cmp	r0, r3
-	bcc	.L1493
-.L1504:
+	bcc	.L1501
+.L1512:
 	ldrh	r0, [r4, #128]
-	b	.L1505
-.L1493:
+	b	.L1513
+.L1501:
 	mov	r2, #0
 	sub	r1, fp, #44
 	bl	log2phys
 	ldr	r3, [fp, #-44]
 	ldr	r0, [r10, r7]
 	cmp	r0, r3
-	bne	.L1495
+	bne	.L1503
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r2, #1
@@ -10522,22 +10526,22 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r6, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1505:
+.L1513:
 	bl	decrement_vpc_count
-	b	.L1494
-.L1495:
+	b	.L1502
+.L1503:
 	ldr	r2, [r6, #4]
 	cmp	r3, r2
-	bne	.L1504
-.L1494:
+	bne	.L1512
+.L1502:
 	add	r5, r5, #1
-	b	.L1492
-.L1497:
+	b	.L1500
+.L1505:
 	bl	INSERT_FREE_LIST
-	b	.L1498
-.L1507:
+	b	.L1506
+.L1515:
 	.align	2
-.L1506:
+.L1514:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+128
@@ -10558,7 +10562,7 @@ FtlGcPageRecovery:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1510
+	ldr	r4, .L1518
 	movw	r5, #306
 	ldrh	r1, [r4, r5]
 	add	r0, r4, #128
@@ -10567,16 +10571,16 @@ FtlGcPageRecovery:
 	ldrh	r3, [r4, r5]
 	cmp	r2, r3
 	ldmfdcc	sp, {r4, r5, fp, sp, pc}
-	ldr	r0, .L1510+4
+	ldr	r0, .L1518+4
 	bl	FtlMapBlkWriteDump_data
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
 	str	r3, [r4, #3448]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1511:
+.L1519:
 	.align	2
-.L1510:
+.L1518:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3396
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10592,7 +10596,7 @@ FtlPowerLostRecovery:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1513
+	ldr	r4, .L1521
 	mov	r5, #0
 	add	r6, r4, #28
 	str	r5, [r4, #3480]
@@ -10610,9 +10614,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1514:
+.L1522:
 	.align	2
-.L1513:
+.L1521:
 	.word	.LANCHOR0
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -10627,7 +10631,7 @@ Ftl_gc_temp_data_write_back:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1523
+	ldr	r4, .L1531
 	mov	r3, #0
 	mov	r5, #0
 	mov	r6, #20
@@ -10635,11 +10639,11 @@ Ftl_gc_temp_data_write_back:
 	ldr	r1, [r4, #3172]
 	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1516:
+.L1524:
 	ldr	r1, [r4, #3172]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1519
+	bhi	.L1527
 	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #132]
@@ -10651,7 +10655,7 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlGcFreeTempBlock
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1519:
+.L1527:
 	mul	r3, r6, r3
 	ldr	r2, [r4, #3296]
 	add	r5, r5, #1
@@ -10663,10 +10667,10 @@ Ftl_gc_temp_data_write_back:
 	ldrne	r2, [r0, #8]
 	ldr	r0, [r0, #12]
 	bl	FtlGcUpdatePage
-	b	.L1516
-.L1524:
+	b	.L1524
+.L1532:
 	.align	2
-.L1523:
+.L1531:
 	.word	.LANCHOR0
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
@@ -10681,22 +10685,22 @@ Ftl_get_new_temp_ppa:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1528
+	ldr	r4, .L1536
 	movw	r3, #65535
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	beq	.L1526
+	beq	.L1534
 	ldrh	r3, [r4, #132]
 	cmp	r3, #0
-	bne	.L1527
-.L1526:
+	bne	.L1535
+.L1534:
 	mov	r0, #0
 	mov	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1528+4
+	ldr	r0, .L1536+4
 	strb	r5, [r4, #136]
 	bl	allocate_data_superblock
-	ldr	r3, .L1528+8
+	ldr	r3, .L1536+8
 	strh	r5, [r3]	@ movhi
 	movw	r3, #3208
 	strh	r5, [r4, r3]	@ movhi
@@ -10704,13 +10708,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1527:
-	ldr	r0, .L1528+4
+.L1535:
+	ldr	r0, .L1536+4
 	bl	get_new_active_ppa
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1529:
+.L1537:
 	.align	2
-.L1528:
+.L1536:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+128
 	.word	.LANCHOR0+3200
@@ -10728,28 +10732,28 @@ rk_ftl_garbage_collect:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #40
-	ldr	r3, .L1659
+	ldr	r3, .L1667
 	str	r0, [fp, #-64]
 	ldr	r0, [r3, #3276]
 	mov	r4, r3
 	cmp	r0, #0
 	movne	r0, #0
-	bne	.L1530
+	bne	.L1538
 	movw	r2, #2532
 	ldrh	r2, [r3, r2]
 	cmp	r2, #47
-	bls	.L1530
-	ldr	r2, .L1659+4
+	bls	.L1538
+	ldr	r2, .L1667+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1532
-.L1535:
+	bne	.L1540
+.L1543:
 	ldrh	r3, [r4, #224]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1533
-.L1534:
+	bne	.L1541
+.L1542:
 	bl	FtlReadRefresh
 	ldr	r3, [r4, #3160]
 	movw	r6, #65535
@@ -10759,22 +10763,22 @@ rk_ftl_garbage_collect:
 	ldrh	r2, [r4, #176]
 	str	r3, [r4, #3160]
 	cmp	r2, r6
-	bne	.L1536
+	bne	.L1544
 	ldrh	r6, [r4, #128]
 	cmp	r6, r2
 	movne	r6, r2
-	bne	.L1536
+	bne	.L1544
 	ldrh	r5, [r4, #226]
 	cmp	r5, r6
-	bne	.L1536
+	bne	.L1544
 	ldrh	r2, [r4, #228]
 	cmp	r2, #24
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
 	movls	r6, r5
-	bls	.L1536
-	ldr	r3, .L1659+8
+	bls	.L1544
+	ldr	r3, .L1667+8
 	mov	r8, #0
 	str	r8, [r4, #3160]
 	strh	r8, [r3]	@ movhi
@@ -10782,33 +10786,33 @@ rk_ftl_garbage_collect:
 	cmp	r0, r5
 	mov	r6, r0
 	movne	r5, r0
-	bne	.L1538
+	bne	.L1546
 	movw	r7, #3158
 	ldrh	r2, [r4, #228]
 	ldrh	r3, [r4, r7]
 	cmp	r2, r3
-	bcs	.L1539
+	bcs	.L1547
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r6
-	beq	.L1541
+	beq	.L1549
 	mov	r0, r3
 	ldr	r3, [r4, #76]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #7
-	bhi	.L1542
+	bhi	.L1550
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	mov	r3, #128
 	strh	r3, [r4, r7]	@ movhi
 	cmp	r5, r6
-	bne	.L1538
-.L1541:
+	bne	.L1546
+.L1549:
 	bl	FtlGcReFreshBadBlk
-.L1536:
+.L1544:
 	movw	r1, #65535
 	ldr	r2, [fp, #-64]
 	sub	r3, r6, r1
@@ -10818,82 +10822,82 @@ rk_ftl_garbage_collect:
 	movne	r2, #0
 	andeq	r2, r3, #1
 	cmp	r2, #0
-	beq	.L1544
+	beq	.L1552
 	ldrh	r3, [r4, #228]
 	cmp	r3, #24
 	movhi	r5, #1
-	bhi	.L1545
+	bhi	.L1553
 	movw	r2, #306
 	cmp	r3, #16
 	ldrh	r5, [r4, r2]
 	lsrhi	r5, r5, #5
-	bhi	.L1545
+	bhi	.L1553
 	cmp	r3, #12
 	lsrhi	r5, r5, #4
-	bhi	.L1545
+	bhi	.L1553
 	cmp	r3, #8
 	lsrhi	r5, r5, #2
-.L1545:
+.L1553:
 	movw	r2, #3156
 	ldrh	r1, [r4, r2]
 	cmp	r1, r3
-	bcs	.L1549
+	bcs	.L1557
 	ldrh	r3, [r4, #128]
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L1550
+	bne	.L1558
 	ldrh	r1, [r4, #226]
 	cmp	r1, r3
-	bne	.L1550
-	ldr	r3, .L1659+8
+	bne	.L1558
+	ldr	r3, .L1667+8
 	ldrh	r0, [r3]
 	cmp	r0, #0
-	bne	.L1551
+	bne	.L1559
 	ldr	r3, [r4, #2556]
 	ldr	r1, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1652
-.L1551:
-	ldr	r3, .L1659+12
+	bcs	.L1660
+.L1559:
+	ldr	r3, .L1667+12
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1652:
+.L1660:
 	strh	r3, [r4, r2]	@ movhi
 	mov	r3, #0
 	str	r3, [r4, #3168]
-.L1530:
+.L1538:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1532:
+.L1540:
 	ldrh	r3, [r3, #128]
 	cmp	r3, r2
-	beq	.L1535
+	beq	.L1543
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1535
+	beq	.L1543
 	mov	r0, #1
-	b	.L1530
-.L1533:
+	b	.L1538
+.L1541:
 	ldrh	r1, [r4, #226]
 	cmp	r1, r2
 	strheq	r3, [r4, #226]	@ movhi
 	mvneq	r3, #0
 	strheq	r3, [r4, #224]	@ movhi
-	b	.L1534
-.L1542:
+	b	.L1542
+.L1550:
 	mov	r3, #64
-.L1651:
+.L1659:
 	strh	r3, [r4, r7]	@ movhi
-	b	.L1541
-.L1539:
+	b	.L1549
+.L1547:
 	mov	r3, #80
-	b	.L1651
-.L1538:
+	b	.L1659
+.L1546:
 	movw	r0, #3156
 	ldr	r3, [r4, #76]
 	ldrh	r0, [r4, r0]
@@ -10904,36 +10908,36 @@ rk_ftl_garbage_collect:
 	str	r0, [sp, #4]
 	ldr	r0, [r4, #2540]
 	ldrh	r1, [r0, r1]
-	ldr	r0, .L1659+16
+	ldr	r0, .L1667+16
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1541
-.L1550:
-	ldr	r3, .L1659+12
+	b	.L1549
+.L1558:
+	ldr	r3, .L1667+12
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
 	strh	r3, [r4, r2]	@ movhi
-.L1549:
+.L1557:
 	movw	r3, #3210
 	movw	r6, #65535
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
 	addne	r5, r5, #32
 	uxthne	r5, r5
-.L1555:
+.L1563:
 	ldrh	r3, [r4, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1564
+	bne	.L1572
 	cmp	r6, r3
 	strhne	r6, [r4, #176]	@ movhi
-	bne	.L1566
+	bne	.L1574
 	ldrh	r3, [r4, #226]
 	cmp	r3, r6
-	beq	.L1566
+	beq	.L1574
 	ldr	r2, [r4, #76]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
@@ -10944,13 +10948,13 @@ rk_ftl_garbage_collect:
 	strh	r3, [r4, #176]	@ movhi
 	mvn	r3, #0
 	strh	r3, [r4, #226]	@ movhi
-.L1566:
+.L1574:
 	ldrh	r0, [r4, #176]
 	mov	r3, #0
 	strb	r3, [r4, #184]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1564
+	beq	.L1572
 	bl	IsBlkInGcList
 	cmp	r0, #0
 	mvnne	r3, #0
@@ -10958,8 +10962,8 @@ rk_ftl_garbage_collect:
 	movw	r3, #65535
 	ldrh	r2, [r4, #176]
 	cmp	r2, r3
-	beq	.L1564
-	ldr	r0, .L1659+20
+	beq	.L1572
+	ldr	r0, .L1667+20
 	bl	make_superblock
 	mov	r3, #0
 	movw	r2, #3666
@@ -10972,33 +10976,33 @@ rk_ftl_garbage_collect:
 	ldrh	r2, [r2, r3]
 	movw	r3, #3668
 	strh	r2, [r4, r3]	@ movhi
-.L1564:
+.L1572:
 	ldrh	r3, [r4, #176]
 	ldrh	r2, [r4, #28]
 	cmp	r2, r3
-	beq	.L1570
+	beq	.L1578
 	ldrh	r2, [r4, #80]
 	cmp	r2, r3
-	beq	.L1570
+	beq	.L1578
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	bne	.L1571
-.L1570:
+	bne	.L1579
+.L1578:
 	mvn	r3, #0
 	strh	r3, [r4, #176]	@ movhi
-.L1571:
-	ldr	r4, .L1659
+.L1579:
+	ldr	r4, .L1667
 	mov	r7, r4
-.L1606:
+.L1614:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1572
-	ldr	r10, .L1659+24
+	bne	.L1580
+	ldr	r10, .L1667+24
 	mov	r3, #0
 	str	r3, [r4, #3168]
 	mov	r9, r10
-.L1573:
+.L1581:
 	ldrh	r8, [r10]
 	mov	r0, r8
 	bl	List_get_gc_head_node
@@ -11006,53 +11010,53 @@ rk_ftl_garbage_collect:
 	movw	r3, #65535
 	cmp	r2, r3
 	strh	r2, [r7, #176]	@ movhi
-	bne	.L1574
+	bne	.L1582
 	mov	r3, #0
 	mov	r0, #8
 	strh	r3, [r10]	@ movhi
-	b	.L1530
-.L1544:
+	b	.L1538
+.L1552:
 	ldrh	r7, [r4, #128]
 	cmp	r7, r1
-	bne	.L1620
+	bne	.L1628
 	ldrh	r1, [r4, #226]
 	cmp	r1, r7
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L1620
+	beq	.L1628
 	ldrh	r3, [r4, #176]
 	cmp	r3, r7
-	beq	.L1556
-.L1561:
+	beq	.L1564
+.L1569:
 	mov	r6, r7
-.L1620:
+.L1628:
 	mov	r5, #1
-	b	.L1555
-.L1556:
+	b	.L1563
+.L1564:
 	str	r2, [r4, #3168]
 	movw	r2, #3156
 	ldrh	r1, [r4, #228]
 	ldrh	r3, [r4, r2]
-	ldr	r5, .L1659+8
+	ldr	r5, .L1667+8
 	cmp	r1, r3
-	bls	.L1557
+	bls	.L1565
 	ldrh	r3, [r5]
 	cmp	r3, #0
-	bne	.L1558
+	bne	.L1566
 	ldr	r3, [r4, #2556]
 	ldr	r1, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1653
-.L1558:
-	ldr	r3, .L1659+12
+	bcs	.L1661
+.L1566:
+	ldr	r3, .L1667+12
 	movw	r2, #3156
 	ldrh	r3, [r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1653:
+.L1661:
 	strh	r3, [r4, r2]	@ movhi
 	bl	FtlReadRefresh
 	mov	r0, #0
@@ -11062,15 +11066,15 @@ rk_ftl_garbage_collect:
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #4
-	bls	.L1557
-.L1656:
+	bls	.L1565
+.L1664:
 	ldrh	r0, [r5]
-	b	.L1530
-.L1557:
+	b	.L1538
+.L1565:
 	ldrh	r0, [r5]
 	cmp	r0, #0
-	bne	.L1561
-	ldr	r3, .L1659+12
+	bne	.L1569
+	ldr	r3, .L1667+12
 	movw	r2, #3156
 	ldrh	r6, [r3]
 	add	r3, r6, r6, lsl #1
@@ -11081,28 +11085,28 @@ rk_ftl_garbage_collect:
 	ldr	r3, [r4, #76]
 	lsl	r0, r0, #1
 	ldrh	r2, [r3, r0]
-	ldr	r3, .L1659+28
+	ldr	r3, .L1667+28
 	ldrh	r1, [r3]
 	ldrh	r3, [r4, #236]
 	mul	r3, r3, r1
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1562
+	ble	.L1570
 	ldrh	r3, [r4, #228]
 	sub	r6, r6, #1
 	cmp	r3, r6
-	blt	.L1562
+	blt	.L1570
 	bl	FtlReadRefresh
-	b	.L1656
-.L1562:
+	b	.L1664
+.L1570:
 	cmp	r2, #0
-	bne	.L1561
+	bne	.L1569
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #228]
 	add	r0, r0, #1
-	b	.L1530
-.L1574:
+	b	.L1538
+.L1582:
 	uxth	r3, r0
 	str	r2, [fp, #-56]
 	add	r8, r8, #1
@@ -11113,9 +11117,9 @@ rk_ftl_garbage_collect:
 	ldr	r3, [fp, #-52]
 	ldr	r2, [fp, #-56]
 	strhne	r8, [r10]	@ movhi
-	bne	.L1573
+	bne	.L1581
 	lsl	r0, r3, #1
-	ldr	r3, .L1659+32
+	ldr	r3, .L1667+32
 	ldrh	lr, [r7, #236]
 	uxth	r8, r8
 	ldr	r1, [r7, #76]
@@ -11125,76 +11129,76 @@ rk_ftl_garbage_collect:
 	mul	r3, lr, r3
 	add	lr, r3, r3, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1577
+	bgt	.L1585
 	cmp	r8, #48
 	cmphi	ip, #8
-	bls	.L1578
-	ldr	ip, .L1659+36
+	bls	.L1586
+	ldr	ip, .L1667+36
 	ldrh	ip, [ip]
 	cmp	ip, #35
-	bhi	.L1578
-.L1577:
+	bhi	.L1586
+.L1585:
 	mov	ip, #0
 	strh	ip, [r9]	@ movhi
-.L1578:
+.L1586:
 	ldrh	r1, [r1, r0]
 	movw	r0, #65535
 	cmp	r3, r1
 	cmple	r6, r0
-	bne	.L1579
+	bne	.L1587
 	ldrh	r3, [r9]
 	cmp	r3, #3
-	bhi	.L1579
+	bhi	.L1587
 	mvn	r3, #0
 	strh	r3, [r7, #176]	@ movhi
 	mov	r3, #0
 	strh	r3, [r9]	@ movhi
-.L1658:
-	ldr	r3, .L1659+8
-	b	.L1657
-.L1579:
+.L1666:
+	ldr	r3, .L1667+8
+	b	.L1665
+.L1587:
 	cmp	r1, #0
-	bne	.L1580
+	bne	.L1588
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r9]
 	add	r3, r3, #1
 	strh	r3, [r9]	@ movhi
-	b	.L1573
-.L1580:
+	b	.L1581
+.L1588:
 	mov	r3, #0
 	strb	r3, [r7, #184]
 	ldrh	r3, [r7, #28]
 	cmp	r3, r2
-	bne	.L1581
+	bne	.L1589
 	movw	r2, #717
-	ldr	r1, .L1659+40
-	ldr	r0, .L1659+44
+	ldr	r1, .L1667+40
+	ldr	r0, .L1667+44
 	bl	sftl_printk
-.L1581:
+.L1589:
 	ldrh	r2, [r7, #176]
 	ldrh	r3, [r7, #80]
 	cmp	r2, r3
-	bne	.L1582
+	bne	.L1590
 	movw	r2, #718
-	ldr	r1, .L1659+40
-	ldr	r0, .L1659+44
+	ldr	r1, .L1667+40
+	ldr	r0, .L1667+44
 	bl	sftl_printk
-.L1582:
+.L1590:
 	ldrh	r2, [r7, #176]
 	ldrh	r3, [r7, #128]
 	cmp	r2, r3
-	bne	.L1583
+	bne	.L1591
 	movw	r2, #719
-	ldr	r1, .L1659+40
-	ldr	r0, .L1659+44
+	ldr	r1, .L1667+40
+	ldr	r0, .L1667+44
 	bl	sftl_printk
-.L1583:
-	ldr	r0, .L1659+20
+.L1591:
+	ldr	r0, .L1667+20
 	bl	make_superblock
 	ldrh	r2, [r7, #176]
 	mov	r3, #0
-	ldr	r1, .L1659+48
+	ldr	r1, .L1667+48
 	ldr	r0, [r7, #76]
 	lsl	r2, r2, #1
 	strh	r3, [r1]	@ movhi
@@ -11202,15 +11206,15 @@ rk_ftl_garbage_collect:
 	strh	r3, [r7, #178]	@ movhi
 	strb	r3, [r7, #182]
 	strh	r2, [r1, #2]	@ movhi
-.L1572:
+.L1580:
 	mov	r3, #1
 	str	r3, [r7, #3276]
-	ldr	r3, .L1659+32
+	ldr	r3, .L1667+32
 	ldrh	r3, [r3]
 	str	r3, [fp, #-52]
 	ldr	r3, [fp, #-64]
 	cmp	r3, #0
-	beq	.L1584
+	beq	.L1592
 	ldr	r2, [fp, #-52]
 	ldrh	r3, [r7, #236]
 	ldr	r1, [r7, #76]
@@ -11224,7 +11228,7 @@ rk_ftl_garbage_collect:
 	movlt	r3, r2
 	add	r5, r5, r3, asr #2
 	uxth	r5, r5
-.L1584:
+.L1592:
 	ldrh	r3, [r7, #178]
 	ldr	r1, [fp, #-52]
 	add	r2, r3, r5
@@ -11233,11 +11237,11 @@ rk_ftl_garbage_collect:
 	subgt	r5, r2, r3
 	mov	r3, #0
 	uxthgt	r5, r5
-.L1655:
+.L1663:
 	str	r3, [fp, #-60]
 	ldrh	r3, [fp, #-60]
 	cmp	r5, r3
-	bls	.L1594
+	bls	.L1602
 	ldr	r3, [fp, #-60]
 	mov	lr, #20
 	ldrh	r1, [r4, #178]
@@ -11245,10 +11249,10 @@ rk_ftl_garbage_collect:
 	ldr	r0, [r4, #3188]
 	add	r1, r1, r3
 	mov	r3, #0
-	ldr	ip, .L1659+52
+	ldr	ip, .L1667+52
 	mov	r8, r3
-	b	.L1595
-.L1588:
+	b	.L1603
+.L1596:
 	ldrh	r2, [ip, #2]!
 	movw	r10, #65535
 	add	r3, r3, #1
@@ -11258,22 +11262,22 @@ rk_ftl_garbage_collect:
 	orrne	r2, r1, r2, lsl #10
 	uxthne	r8, r8
 	strne	r2, [r10, #4]
-.L1595:
+.L1603:
 	uxth	r2, r3
 	cmp	r9, r2
-	bhi	.L1588
+	bhi	.L1596
 	ldrb	r2, [r4, #184]	@ zero_extendqisi2
 	mov	r1, r8
 	bl	FlashReadPages
 	mov	r3, #0
-.L1654:
+.L1662:
 	str	r3, [fp, #-56]
 	ldrh	r3, [fp, #-56]
 	cmp	r8, r3
 	ldrls	r3, [fp, #-60]
 	addls	r3, r3, #1
-	bls	.L1655
-.L1593:
+	bls	.L1663
+.L1601:
 	ldr	r3, [fp, #-56]
 	mov	r9, #20
 	mul	r9, r9, r3
@@ -11281,22 +11285,22 @@ rk_ftl_garbage_collect:
 	add	r2, r3, r9
 	ldr	r3, [r3, r9]
 	cmn	r3, #1
-	beq	.L1590
+	beq	.L1598
 	ldr	r10, [r2, #12]
 	movw	r2, #61589
 	ldrh	r1, [r10]
 	cmp	r1, r2
-	bne	.L1590
+	bne	.L1598
 	ldr	ip, [r10, #8]
 	cmn	ip, #1
-	bne	.L1591
+	bne	.L1599
 	movw	r2, #753
-	ldr	r1, .L1659+40
-	ldr	r0, .L1659+44
+	ldr	r1, .L1667+40
+	ldr	r0, .L1667+44
 	str	ip, [fp, #-68]
 	bl	sftl_printk
 	ldr	ip, [fp, #-68]
-.L1591:
+.L1599:
 	mov	r2, #0
 	sub	r1, fp, #48
 	mov	r0, ip
@@ -11306,8 +11310,8 @@ rk_ftl_garbage_collect:
 	add	r2, r2, r9
 	ldr	r0, [r2, #4]
 	cmp	r0, r1
-	bne	.L1590
-	ldr	r3, .L1659+48
+	bne	.L1598
+	ldr	r3, .L1667+48
 	mov	ip, #20
 	ldr	r0, [r4, #3172]
 	ldr	r2, [r2, #16]
@@ -11348,75 +11352,75 @@ rk_ftl_garbage_collect:
 	ldrb	r2, [r4, #135]	@ zero_extendqisi2
 	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L1592
+	beq	.L1600
 	ldrh	r3, [r4, #132]
 	cmp	r3, #0
-	bne	.L1590
-.L1592:
+	bne	.L1598
+.L1600:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	beq	.L1590
-	ldr	r3, .L1659
+	beq	.L1598
+	ldr	r3, .L1667
 	mov	r2, #0
 	mvn	r1, #0
 	str	r2, [r3, #3276]
 	strh	r1, [r3, #176]	@ movhi
 	strh	r2, [r3, #178]	@ movhi
 	add	r3, r3, #3664
-.L1657:
+.L1665:
 	ldrh	r0, [r3]
-	b	.L1530
-.L1590:
+	b	.L1538
+.L1598:
 	ldr	r3, [fp, #-56]
 	add	r3, r3, #1
-	b	.L1654
-.L1594:
+	b	.L1662
+.L1602:
 	ldrh	r3, [r4, #178]
 	add	r5, r5, r3
 	ldr	r3, [fp, #-52]
 	uxth	r5, r5
 	cmp	r3, r5
 	strh	r5, [r4, #178]	@ movhi
-	bhi	.L1596
+	bhi	.L1604
 	ldr	r3, [r4, #3172]
 	cmp	r3, #0
-	beq	.L1597
+	beq	.L1605
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	movne	r3, #0
 	strne	r3, [r4, #3276]
-	bne	.L1658
-.L1597:
-	ldr	r3, .L1659+48
+	bne	.L1666
+.L1605:
+	ldr	r3, .L1667+48
 	ldrh	r5, [r3]
 	cmp	r5, #0
-	bne	.L1598
+	bne	.L1606
 	ldrh	r3, [r4, #176]
 	ldr	r2, [r4, #76]
 	lsl	r3, r3, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1598
-.L1599:
+	beq	.L1606
+.L1607:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcs	.L1604
+	bcs	.L1612
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1600
+	beq	.L1608
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #176]
 	cmp	r3, r0
-	bne	.L1600
-.L1604:
+	bne	.L1608
+.L1612:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1598
+	bcc	.L1606
 	ldrh	r3, [r4, #176]
 	mov	r1, #0
 	ldr	r2, [r4, #76]
@@ -11426,30 +11430,30 @@ rk_ftl_garbage_collect:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1598:
+.L1606:
 	mvn	r3, #0
 	strh	r3, [r4, #176]	@ movhi
-.L1596:
+.L1604:
 	mov	r3, #0
 	str	r3, [r4, #3276]
 	ldrh	r3, [r4, #228]
 	cmp	r3, #2
-	bhi	.L1605
-	ldr	r3, .L1659+32
+	bhi	.L1613
+	ldr	r3, .L1667+32
 	ldrh	r5, [r3]
-	b	.L1606
-.L1600:
+	b	.L1614
+.L1608:
 	add	r5, r5, #1
-	b	.L1599
-.L1605:
-	ldr	r2, .L1659+8
+	b	.L1607
+.L1613:
+	ldr	r2, .L1667+8
 	ldrh	r0, [r2]
 	cmp	r0, #0
 	addeq	r0, r3, #1
-	b	.L1530
-.L1660:
+	b	.L1538
+.L1668:
 	.align	2
-.L1659:
+.L1667:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+3664
@@ -11483,19 +11487,19 @@ FtlRead:
 	str	r2, [fp, #-52]
 	cmp	r0, #16
 	mov	r9, r3
-	bne	.L1662
+	bne	.L1670
 	mov	r2, r3
 	ldr	r1, [fp, #-52]
 	add	r0, r6, #256
 	bl	FtlVendorPartRead
 	str	r0, [fp, #-48]
-.L1661:
+.L1669:
 	ldr	r0, [fp, #-48]
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1662:
+.L1670:
 	ldr	r3, [fp, #-52]
-	ldr	r10, .L1697
+	ldr	r10, .L1705
 	add	r3, r1, r3
 	str	r3, [fp, #-60]
 	ldr	r2, [fp, #-60]
@@ -11503,12 +11507,12 @@ FtlRead:
 	cmp	r2, r3
 	mvnhi	r3, #0
 	strhi	r3, [fp, #-48]
-	bhi	.L1661
-	ldr	r3, .L1697+4
+	bhi	.L1669
+	ldr	r3, .L1705+4
 	ldr	r7, [r3]
 	cmn	r7, #1
 	streq	r7, [fp, #-48]
-	beq	.L1661
+	beq	.L1669
 	movw	r3, #262
 	mov	r0, r6
 	ldrh	r4, [r10, r3]
@@ -11539,24 +11543,24 @@ FtlRead:
 	ldr	r3, [r10, #2560]
 	add	r3, r3, r2
 	str	r3, [r10, #2560]
-.L1664:
+.L1672:
 	ldr	r3, [fp, #-56]
 	cmp	r3, #0
-	bne	.L1681
-	ldr	r3, .L1697
+	bne	.L1689
+	ldr	r3, .L1705
 	movw	r2, #3210
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	bne	.L1682
+	bne	.L1690
 	ldrh	r3, [r3, #228]
 	cmp	r3, #31
-	bhi	.L1661
-.L1682:
+	bhi	.L1669
+.L1690:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1661
-.L1681:
+	b	.L1669
+.L1689:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r4
@@ -11564,16 +11568,16 @@ FtlRead:
 	ldr	r2, [fp, #-44]
 	cmn	r2, #1
 	moveq	r10, #0
-	ldreq	ip, .L1697+8
-	beq	.L1666
+	ldreq	r2, .L1705+8
+	beq	.L1674
 	ldr	r1, [r7, #3292]
 	mov	r10, #20
 	ldr	r3, [fp, #-64]
 	mla	r10, r10, r5, r1
 	cmp	r4, r3
 	str	r2, [r10, #4]
-	ldr	r2, .L1697+8
-	bne	.L1670
+	ldr	r2, .L1705+8
+	bne	.L1678
 	ldrh	r2, [r2]
 	mov	r0, r6
 	ldr	r1, [r7, #3316]
@@ -11590,8 +11594,8 @@ FtlRead:
 	cmp	r3, r2
 	str	r3, [fp, #-76]
 	streq	r9, [r10, #8]
-.L1671:
-	ldr	r3, .L1697+12
+.L1679:
+	ldr	r3, .L1705+12
 	ldr	r1, [r7, #3340]
 	str	r4, [r10, #16]
 	ldrh	r2, [r3]
@@ -11600,42 +11604,41 @@ FtlRead:
 	bic	r2, r2, #3
 	add	r2, r1, r2
 	str	r2, [r10, #12]
-	b	.L1669
-.L1668:
+	b	.L1677
+.L1676:
 	mla	r0, r0, r4, r10
-	ldr	r3, [fp, #-60]
+	ldr	r1, [fp, #-60]
+	cmp	r1, r0
+	movhi	r1, #1
+	movls	r1, #0
 	cmp	r6, r0
-	movls	r2, #1
-	movhi	r2, #0
-	cmp	r3, r0
-	movls	r2, #0
-	cmp	r2, #0
-	beq	.L1667
+	movhi	r1, #0
+	cmp	r1, #0
+	beq	.L1675
 	sub	r0, r0, r6
-	mov	r2, #512
-	mov	r1, #0
+	mov	r1, #512
 	add	r0, r9, r0, lsl #9
-	str	ip, [fp, #-80]
-	bl	ftl_memset
-	ldr	ip, [fp, #-80]
-.L1667:
+	str	r2, [fp, #-80]
+	bl	__memzero
+	ldr	r2, [fp, #-80]
+.L1675:
 	add	r10, r10, #1
-.L1666:
-	ldrh	r0, [ip]
+.L1674:
+	ldrh	r0, [r2]
 	cmp	r10, r0
-	bcc	.L1668
-.L1669:
+	bcc	.L1676
+.L1677:
 	ldr	r3, [fp, #-56]
 	add	r4, r4, #1
 	subs	r3, r3, #1
 	str	r3, [fp, #-56]
-	beq	.L1673
+	beq	.L1681
 	ldrh	r2, [r7, #236]
 	cmp	r5, r2, lsl #2
-	bne	.L1664
-.L1673:
+	bne	.L1672
+.L1681:
 	cmp	r5, #0
-	beq	.L1664
+	beq	.L1672
 	mov	r2, #0
 	mov	r1, r5
 	ldr	r0, [r7, #3292]
@@ -11649,7 +11652,7 @@ FtlRead:
 	ldr	r3, [fp, #-76]
 	lsl	r3, r3, #9
 	str	r3, [fp, #-84]
-.L1680:
+.L1688:
 	mov	ip, #20
 	ldr	r2, [r7, #3292]
 	mul	ip, ip, r10
@@ -11657,20 +11660,20 @@ FtlRead:
 	add	r2, r2, ip
 	ldr	r1, [r2, #16]
 	cmp	r3, r1
-	bne	.L1675
+	bne	.L1683
 	ldr	r1, [r2, #8]
 	ldr	r2, [r7, #3316]
 	cmp	r1, r2
-	bne	.L1676
+	bne	.L1684
 	ldr	r3, [fp, #-80]
 	mov	r0, r9
 	ldr	r2, [fp, #-84]
 	str	ip, [fp, #-92]
 	add	r1, r1, r3
-.L1696:
+.L1704:
 	bl	ftl_memcpy
 	ldr	ip, [fp, #-92]
-.L1676:
+.L1684:
 	ldr	r1, [r7, #3292]
 	add	r2, r1, ip
 	ldr	r0, [r2, #12]
@@ -11688,23 +11691,23 @@ FtlRead:
 	streq	r0, [r7, #2716]
 	ldr	r1, [r1, ip]
 	cmp	r1, #256
-	bne	.L1679
+	bne	.L1687
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1679:
+.L1687:
 	add	r10, r10, #1
 	cmp	r5, r10
-	bne	.L1680
+	bne	.L1688
 	mov	r5, #0
-	b	.L1664
-.L1670:
+	b	.L1672
+.L1678:
 	ldr	r3, [fp, #-68]
 	cmp	r4, r3
 	ldrhne	r2, [r2]
 	mulne	r2, r4, r2
-	bne	.L1695
+	bne	.L1703
 	ldr	r1, [r7, #3320]
 	ldr	r3, [fp, #-60]
 	str	r1, [r10, #8]
@@ -11712,31 +11715,31 @@ FtlRead:
 	mul	r2, r1, r4
 	sub	r8, r3, r2
 	cmp	r1, r8
-	bne	.L1671
-.L1695:
+	bne	.L1679
+.L1703:
 	sub	r2, r2, r6
 	add	r2, r9, r2, lsl #9
 	str	r2, [r10, #8]
-	b	.L1671
-.L1675:
+	b	.L1679
+.L1683:
 	ldr	r3, [fp, #-68]
 	cmp	r3, r1
-	bne	.L1676
+	bne	.L1684
 	ldr	r1, [r2, #8]
 	ldr	r2, [r7, #3320]
 	cmp	r1, r2
-	bne	.L1676
-	ldr	r2, .L1697+8
+	bne	.L1684
+	ldr	r2, .L1705+8
 	str	ip, [fp, #-92]
 	ldrh	r0, [r2]
 	ldr	r2, [fp, #-88]
 	mul	r0, r3, r0
 	sub	r0, r0, r6
 	add	r0, r9, r0, lsl #9
-	b	.L1696
-.L1698:
+	b	.L1704
+.L1706:
 	.align	2
-.L1697:
+.L1705:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+262
@@ -11798,26 +11801,26 @@ FtlWrite:
 	str	r2, [fp, #-80]
 	cmp	r0, #16
 	str	r3, [fp, #-84]
-	bne	.L1702
+	bne	.L1710
 	mov	r2, r3
 	ldr	r1, [fp, #-80]
 	add	r0, r9, #256
 	bl	FtlVendorPartWrite
-.L1701:
+.L1709:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1702:
+.L1710:
 	ldr	r3, [fp, #-80]
-	ldr	r4, .L1753
+	ldr	r4, .L1761
 	add	r6, r1, r3
 	ldr	r3, [r4, #344]
 	cmp	r6, r3
 	mvnhi	r0, #0
-	bhi	.L1701
-	ldr	r5, .L1753+4
+	bhi	.L1709
+	ldr	r5, .L1761+4
 	ldr	r0, [r5]
 	cmn	r0, #1
-	beq	.L1701
+	beq	.L1709
 	mov	r3, #2048
 	mov	r0, r9
 	str	r3, [r4, #3672]
@@ -11846,67 +11849,67 @@ FtlWrite:
 	ldr	r3, [r5, #8]
 	cmp	r3, #0
 	addeq	r4, r4, #28
-	beq	.L1704
+	beq	.L1712
 	ldrh	r3, [r4, #32]
 	cmp	r3, #0
 	addne	r4, r4, #28
 	addeq	r4, r4, #80
-.L1704:
+.L1712:
 	ldr	r6, [fp, #-76]
-	ldr	r10, .L1753
-.L1705:
+	ldr	r10, .L1761
+.L1713:
 	ldr	r3, [fp, #-72]
 	cmp	r3, #0
-	bne	.L1733
+	bne	.L1741
 	mov	r0, r3
 	ldr	r1, [fp, #-96]
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r10, #228]
 	cmp	r3, #5
 	movls	r4, #256
-	ldrls	r5, .L1753+8
-	bls	.L1737
-.L1736:
+	ldrls	r5, .L1761+8
+	bls	.L1745
+.L1744:
 	mov	r0, #0
-	b	.L1701
-.L1733:
+	b	.L1709
+.L1741:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r10, #236]
 	cmp	r2, r3
-	bcc	.L1706
-	movw	r2, #1038
-	ldr	r1, .L1753+12
-	ldr	r0, .L1753+16
+	bcc	.L1714
+	movw	r2, #1041
+	ldr	r1, .L1761+12
+	ldr	r0, .L1761+16
 	bl	sftl_printk
-.L1706:
+.L1714:
 	ldrh	r2, [r4, #4]
 	cmp	r2, #0
-	bne	.L1707
-	ldr	r3, .L1753+20
-	ldr	r5, .L1753+4
+	bne	.L1715
+	ldr	r3, .L1761+20
+	ldr	r5, .L1761+4
 	cmp	r4, r3
-	bne	.L1708
+	bne	.L1716
 	ldrh	r7, [r10, #84]
 	cmp	r7, #0
-	bne	.L1709
+	bne	.L1717
 	add	r0, r4, #52
 	bl	allocate_new_data_superblock
 	str	r7, [r5, #8]
-.L1709:
-	ldr	r0, .L1753+20
+.L1717:
+	ldr	r0, .L1761+20
 	bl	allocate_new_data_superblock
-	ldr	r4, .L1753+20
+	ldr	r4, .L1761+20
 	ldr	r2, [r5, #8]
 	add	r3, r4, #52
 	cmp	r2, #0
 	movne	r4, r3
-.L1710:
+.L1718:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1707
+	bne	.L1715
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1707:
+.L1715:
 	ldrh	r3, [r4, #4]
 	ldr	r2, [fp, #-72]
 	cmp	r3, r2
@@ -11919,20 +11922,20 @@ FtlWrite:
 	str	r3, [fp, #-108]
 	ldrh	r3, [r10, #236]
 	cmp	r2, r3
-	bcc	.L1711
-	movw	r2, #1071
-	ldr	r1, .L1753+12
-	ldr	r0, .L1753+16
+	bcc	.L1719
+	movw	r2, #1074
+	ldr	r1, .L1761+12
+	ldr	r0, .L1761+16
 	bl	sftl_printk
-.L1711:
+.L1719:
 	mov	r3, #0
-.L1752:
+.L1760:
 	str	r3, [fp, #-68]
 	ldr	r3, [fp, #-68]
 	ldr	r2, [fp, #-108]
 	cmp	r3, r2
-	bne	.L1731
-.L1713:
+	bne	.L1739
+.L1721:
 	mov	r3, r4
 	mov	r2, #0
 	ldr	r1, [fp, #-68]
@@ -11941,30 +11944,30 @@ FtlWrite:
 	ldr	r3, [fp, #-68]
 	ldr	r2, [fp, #-72]
 	cmp	r3, r2
-	bls	.L1732
-	movw	r2, #1149
-	ldr	r1, .L1753+12
-	ldr	r0, .L1753+16
+	bls	.L1740
+	mov	r2, #1152
+	ldr	r1, .L1761+12
+	ldr	r0, .L1761+16
 	bl	sftl_printk
-.L1732:
+.L1740:
 	ldr	r3, [fp, #-72]
 	ldr	r2, [fp, #-68]
 	sub	r3, r3, r2
 	str	r3, [fp, #-72]
-	b	.L1705
-.L1708:
+	b	.L1713
+.L1716:
 	str	r2, [r5, #8]
 	ldrh	r2, [r10, #32]
 	cmp	r2, #0
 	movne	r4, r3
-	bne	.L1707
+	bne	.L1715
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-	b	.L1710
-.L1731:
+	b	.L1718
+.L1739:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1713
+	beq	.L1721
 	mov	r2, #0
 	sub	r1, fp, #64
 	mov	r0, r6
@@ -11972,7 +11975,7 @@ FtlWrite:
 	bl	log2phys
 	mov	r0, r4
 	bl	get_new_active_ppa
-	ldr	r2, .L1753+24
+	ldr	r2, .L1761+24
 	ldr	r1, [fp, #-68]
 	ldr	r3, [fp, #-68]
 	ldrh	r2, [r2]
@@ -11996,11 +11999,11 @@ FtlWrite:
 	ldr	r2, [fp, #-92]
 	cmp	r6, r2
 	cmpne	r6, r3
-	ldr	r3, .L1753+28
-	bne	.L1714
+	ldr	r3, .L1761+28
+	bne	.L1722
 	ldr	r2, [fp, #-76]
 	cmp	r6, r2
-	bne	.L1715
+	bne	.L1723
 	ldrh	r5, [r3]
 	mov	r0, r9
 	mov	r1, r5
@@ -12010,33 +12013,33 @@ FtlWrite:
 	str	r0, [fp, #-88]
 	cmp	r5, r3
 	movcs	r5, r3
-.L1716:
-	ldr	r3, .L1753+28
+.L1724:
+	ldr	r3, .L1761+28
 	ldrh	r3, [r3]
 	cmp	r5, r3
 	ldr	r3, [fp, #-76]
-	bne	.L1717
+	bne	.L1725
 	cmp	r6, r3
 	ldr	r3, [r10, #3300]
 	add	r7, r3, r7
 	ldreq	r3, [fp, #-84]
-	beq	.L1749
+	beq	.L1757
 	mul	r5, r5, r6
 	ldr	r3, [fp, #-84]
 	sub	r5, r5, r9
 	add	r5, r3, r5, lsl #9
 	str	r5, [r7, #8]
-.L1719:
+.L1727:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r10, #236]
 	cmp	r2, r3
-	bcc	.L1728
-	movw	r2, #1140
-	ldr	r1, .L1753+12
-	ldr	r0, .L1753+16
+	bcc	.L1736
+	movw	r2, #1143
+	ldr	r1, .L1761+12
+	ldr	r0, .L1761+16
 	bl	sftl_printk
-.L1728:
-	ldr	r3, .L1753+32
+.L1736:
+	ldr	r3, .L1761+32
 	ldr	r2, [fp, #-104]
 	ldr	r1, [fp, #-100]
 	strh	r3, [r2, r1]	@ movhi
@@ -12054,8 +12057,8 @@ FtlWrite:
 	strh	r3, [r8, #2]	@ movhi
 	ldr	r3, [fp, #-68]
 	add	r3, r3, #1
-	b	.L1752
-.L1715:
+	b	.L1760
+.L1723:
 	ldr	r2, [fp, #-80]
 	add	r5, r9, r2
 	ldrh	r2, [r3]
@@ -12064,8 +12067,8 @@ FtlWrite:
 	smulbb	r2, r2, r6
 	sub	r5, r5, r2
 	uxth	r5, r5
-	b	.L1716
-.L1717:
+	b	.L1724
+.L1725:
 	cmp	r6, r3
 	ldr	r3, [r10, #3300]
 	ldreq	r2, [r10, #3316]
@@ -12074,7 +12077,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [fp, #-64]
 	cmn	r3, #1
-	beq	.L1722
+	beq	.L1730
 	str	r3, [fp, #-56]
 	mov	r1, #1
 	ldr	r3, [r10, #3300]
@@ -12089,59 +12092,59 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-60]
 	cmn	r3, #1
-	bne	.L1723
+	bne	.L1731
 	ldr	r2, [r10, #2716]
-	ldr	r0, .L1753+36
+	ldr	r0, .L1761+36
 	add	r2, r2, #1
 	str	r2, [r10, #2716]
 	mov	r2, r6
 	ldr	r1, [r8, #8]
 	bl	sftl_printk
-.L1726:
+.L1734:
 	ldr	r3, [fp, #-76]
 	lsl	r2, r5, #9
 	cmp	r6, r3
-	bne	.L1727
+	bne	.L1735
 	ldr	r3, [r10, #3300]
 	ldr	r1, [fp, #-84]
 	add	r7, r3, r7
 	ldr	r3, [fp, #-88]
 	ldr	r0, [r7, #8]
 	add	r0, r0, r3, lsl #9
-.L1750:
+.L1758:
 	bl	ftl_memcpy
-	b	.L1719
-.L1723:
+	b	.L1727
+.L1731:
 	ldr	r3, [r8, #8]
 	cmp	r6, r3
-	beq	.L1725
+	beq	.L1733
 	ldr	r3, [r10, #2716]
 	mov	r2, r6
-	ldr	r0, .L1753+40
+	ldr	r0, .L1761+40
 	add	r3, r3, #1
 	str	r3, [r10, #2716]
 	ldr	r1, [r8, #8]
 	bl	sftl_printk
-.L1725:
+.L1733:
 	ldr	r3, [r8, #8]
 	cmp	r6, r3
-	beq	.L1726
-	movw	r2, #1125
-	ldr	r1, .L1753+12
-	ldr	r0, .L1753+16
+	beq	.L1734
+	movw	r2, #1128
+	ldr	r1, .L1761+12
+	ldr	r0, .L1761+16
 	bl	sftl_printk
-	b	.L1726
-.L1722:
+	b	.L1734
+.L1730:
 	ldr	r3, [r10, #3300]
 	mov	r1, #0
-	ldr	r2, .L1753+44
+	ldr	r2, .L1761+44
 	add	r3, r3, r7
 	ldrh	r2, [r2]
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1726
-.L1727:
-	ldr	r3, .L1753+28
+	b	.L1734
+.L1735:
+	ldr	r3, .L1761+28
 	ldrh	r1, [r3]
 	ldr	r3, [r10, #3300]
 	mul	r1, r6, r1
@@ -12150,8 +12153,8 @@ FtlWrite:
 	ldr	r0, [r7, #8]
 	sub	r1, r1, r9
 	add	r1, r3, r1, lsl #9
-	b	.L1750
-.L1714:
+	b	.L1758
+.L1722:
 	ldrh	r3, [r3]
 	ldr	r2, [r10, #3300]
 	mul	r3, r6, r3
@@ -12159,23 +12162,23 @@ FtlWrite:
 	ldr	r2, [fp, #-84]
 	sub	r3, r3, r9
 	add	r3, r2, r3, lsl #9
-.L1749:
+.L1757:
 	str	r3, [r7, #8]
-	b	.L1719
-.L1737:
+	b	.L1727
+.L1745:
 	ldrh	r3, [r10, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1735
+	bne	.L1743
 	ldrh	r2, [r10, #226]
 	cmp	r2, r3
-	bne	.L1735
+	bne	.L1743
 	mov	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1735:
-	ldr	r2, .L1753+48
+.L1743:
+	ldr	r2, .L1761+48
 	mov	r1, #1
 	mov	r3, #128
 	mov	r0, r1
@@ -12187,13 +12190,13 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r10, #228]
 	cmp	r3, #2
-	bhi	.L1736
+	bhi	.L1744
 	subs	r4, r4, #1
-	bne	.L1737
-	b	.L1736
-.L1754:
+	bne	.L1745
+	b	.L1744
+.L1762:
 	.align	2
-.L1753:
+.L1761:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+3158
@@ -12258,9 +12261,9 @@ FtlLoadSysInfo:
 	sub	fp, ip, #4
 	sub	sp, sp, #16
 	mov	r1, #0
-	ldr	r4, .L1787
+	ldr	r4, .L1795
 	movw	r7, #2628
-	ldr	r6, .L1787+4
+	ldr	r6, .L1795+4
 	ldr	r3, [r4, #3304]
 	ldrh	r2, [r4, #244]
 	ldr	r0, [r4, #76]
@@ -12272,41 +12275,41 @@ FtlLoadSysInfo:
 	ldrh	r0, [r4, r7]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1758
-.L1769:
+	bne	.L1766
+.L1777:
 	mvn	r0, #0
-.L1757:
+.L1765:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1758:
+.L1766:
 	mov	r1, #1
-	ldr	r9, .L1787+8
+	ldr	r9, .L1795+8
 	bl	FtlGetLastWrittenPage
 	ldrsh	r7, [r4, r7]
 	add	r8, r4, #3456
 	sxth	r5, r0
 	add	r0, r0, #1
 	strh	r0, [r6, #2]	@ movhi
-.L1760:
+.L1768:
 	cmp	r5, #0
-	bge	.L1766
+	bge	.L1774
 	movw	r2, #1465
-	ldr	r1, .L1787+12
-	ldr	r0, .L1787+16
+	ldr	r1, .L1795+12
+	ldr	r0, .L1795+16
 	bl	sftl_printk
-.L1765:
+.L1773:
 	movw	r2, #314
 	ldrh	r3, [r4, #244]
 	ldrh	r2, [r4, r2]
 	add	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1768
+	bcs	.L1776
 	movw	r2, #1467
-	ldr	r1, .L1787+12
-	ldr	r0, .L1787+16
+	ldr	r1, .L1795+12
+	ldr	r0, .L1795+16
 	bl	sftl_printk
-.L1768:
-	ldr	r5, .L1787+20
+.L1776:
+	ldr	r5, .L1795+20
 	mov	r2, #48
 	ldr	r1, [r4, #3464]
 	mov	r0, r5
@@ -12328,16 +12331,16 @@ FtlLoadSysInfo:
 	add	r1, r3, r1
 	bl	ftl_memcpy
 	ldr	r2, [r4, #2472]
-	ldr	r3, .L1787+8
+	ldr	r3, .L1795+8
 	cmp	r2, r3
-	bne	.L1769
+	bne	.L1777
 	movw	r3, #258
 	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
 	ldrh	r3, [r4, r3]
 	ldrh	r7, [r5, #8]
 	cmp	r2, r3
 	strh	r7, [r6, #6]	@ movhi
-	bne	.L1769
+	bne	.L1777
 	movw	r3, #306
 	movw	r2, #262
 	ldrh	r3, [r4, r3]
@@ -12349,19 +12352,19 @@ FtlLoadSysInfo:
 	str	r3, [r4, #2556]
 	mul	r3, r3, r2
 	str	r3, [r4, #344]
-	ldr	r3, .L1787+24
+	ldr	r3, .L1795+24
 	ldrh	r0, [r3, #6]
 	sub	r0, r6, r0
 	sub	r0, r0, r7
 	bl	__udivsi3
 	cmp	r7, r6
 	strh	r0, [r5, #152]	@ movhi
-	bls	.L1770
+	bls	.L1778
 	movw	r2, #1489
-	ldr	r1, .L1787+12
-	ldr	r0, .L1787+16
+	ldr	r1, .L1795+12
+	ldr	r0, .L1795+16
 	bl	sftl_printk
-.L1770:
+.L1778:
 	ldrh	r3, [r5, #16]
 	ldrh	r1, [r5, #14]
 	lsr	r2, r3, #6
@@ -12414,34 +12417,34 @@ FtlLoadSysInfo:
 	strhi	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1773
-	ldr	r0, .L1787+28
+	beq	.L1781
+	ldr	r0, .L1795+28
 	bl	make_superblock
-.L1773:
+.L1781:
 	ldrh	r2, [r4, #80]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1774
-	ldr	r0, .L1787+32
+	beq	.L1782
+	ldr	r0, .L1795+32
 	bl	make_superblock
-.L1774:
+.L1782:
 	ldrh	r2, [r4, #128]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1775
-	ldr	r0, .L1787+36
+	beq	.L1783
+	ldr	r0, .L1795+36
 	bl	make_superblock
-.L1775:
+.L1783:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1776
-	ldr	r0, .L1787+40
+	beq	.L1784
+	ldr	r0, .L1795+40
 	bl	make_superblock
-.L1776:
+.L1784:
 	mov	r0, #0
-	b	.L1757
-.L1766:
+	b	.L1765
+.L1774:
 	orr	r3, r5, r7, lsl #10
 	mov	r2, #1
 	mov	r1, r2
@@ -12454,56 +12457,56 @@ FtlLoadSysInfo:
 	ldr	r3, [r3, #12]
 	cmp	r3, #0
 	str	r3, [fp, #-44]
-	beq	.L1761
+	beq	.L1769
 	ldr	r2, [r4, #3456]
 	cmn	r2, #1
-	beq	.L1761
-	ldr	r10, .L1787+44
+	beq	.L1769
+	ldr	r10, .L1795+44
 	ldr	r0, [r4, #3464]
 	ldrh	r1, [r10]
 	bl	js_hash
 	ldr	r3, [fp, #-44]
 	cmp	r3, r0
-	beq	.L1761
+	beq	.L1769
 	str	r0, [sp, #8]
 	mov	r2, r7
 	str	r3, [sp, #4]
 	ldrh	r3, [r6, #4]
-	ldr	r1, .L1787+12
-	ldr	r0, .L1787+48
+	ldr	r1, .L1795+12
+	ldr	r0, .L1795+48
 	str	r3, [sp]
 	mov	r3, r5
 	bl	sftl_printk
 	cmp	r5, #0
-	bne	.L1762
+	bne	.L1770
 	ldrh	r3, [r6, #4]
 	cmp	r7, r3
 	sxthne	r7, r3
 	ldrhne	r5, [r10, #-6]
-	bne	.L1764
-.L1762:
+	bne	.L1772
+.L1770:
 	mvn	r3, #0
 	str	r3, [r4, #3456]
-.L1761:
+.L1769:
 	ldr	r3, [r4, #3456]
 	cmn	r3, #1
-	beq	.L1764
+	beq	.L1772
 	ldr	r3, [r4, #3304]
 	ldr	r3, [r3]
 	cmp	r3, r9
-	bne	.L1764
+	bne	.L1772
 	ldr	r3, [r4, #3336]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	beq	.L1765
-.L1764:
+	beq	.L1773
+.L1772:
 	sub	r5, r5, #1
 	sxth	r5, r5
-	b	.L1760
-.L1788:
+	b	.L1768
+.L1796:
 	.align	2
-.L1787:
+.L1795:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2628
 	.word	1179929683
@@ -12534,7 +12537,7 @@ FtlMapTblRecovery:
 	mov	r1, #0
 	ldr	r3, [r0, #24]
 	mov	r4, r0
-	ldr	r9, .L1830
+	ldr	r9, .L1838
 	mov	r7, #0
 	ldr	r8, [r0, #12]
 	str	r3, [fp, #-44]
@@ -12559,23 +12562,23 @@ FtlMapTblRecovery:
 	mov	r3, #1
 	str	r7, [r4, #28]
 	str	r3, [r4, #36]
-.L1790:
+.L1798:
 	ldr	r3, [fp, #-52]
 	sxth	r6, r7
 	cmp	r6, r3
-	bge	.L1809
+	bge	.L1817
 	ldr	r3, [fp, #-52]
 	sub	r3, r3, #1
 	cmp	r6, r3
 	lsl	r3, r6, #1
-	bne	.L1791
+	bne	.L1799
 	add	r2, r8, r3
 	ldrh	r0, [r8, r3]
 	mov	r1, #1
 	str	r2, [fp, #-52]
 	bl	FtlGetLastWrittenPage
 	sxth	r3, r0
-	ldr	r9, .L1830
+	ldr	r9, .L1838
 	add	r0, r0, #1
 	strh	r7, [r4]	@ movhi
 	str	r3, [fp, #-60]
@@ -12585,23 +12588,23 @@ FtlMapTblRecovery:
 	strh	r0, [r4, #2]	@ movhi
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r4, #28]
-.L1792:
+.L1800:
 	ldr	r3, [fp, #-60]
 	sxth	r8, r7
 	add	r2, r3, #1
 	cmp	r8, r2
-	blt	.L1795
-.L1809:
+	blt	.L1803
+.L1817:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
-	ldr	r3, .L1830+4
+	ldr	r3, .L1838+4
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1797
+	bne	.L1805
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1797:
+.L1805:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -12609,7 +12612,7 @@ FtlMapTblRecovery:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1795:
+.L1803:
 	ldr	r3, [fp, #-52]
 	mov	r0, r10
 	ldrh	r2, [r3]
@@ -12622,51 +12625,51 @@ FtlMapTblRecovery:
 	ldr	r2, [r2, #12]
 	cmp	r2, #0
 	str	r2, [fp, #-56]
-	beq	.L1793
+	beq	.L1801
 	ldr	r1, [r9, #3456]
 	cmn	r1, #1
-	beq	.L1793
-	ldr	r1, .L1830+8
+	beq	.L1801
+	ldr	r1, .L1838+8
 	ldr	r0, [r9, #3464]
 	ldrh	r1, [r1]
 	bl	js_hash
 	ldr	r2, [fp, #-56]
 	cmp	r2, r0
-	beq	.L1793
+	beq	.L1801
 	str	r0, [sp, #4]
 	mov	r3, r8
 	str	r2, [sp]
 	mov	r2, r6
-	ldr	r1, .L1830+12
-	ldr	r0, .L1830+16
+	ldr	r1, .L1838+12
+	ldr	r0, .L1838+16
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r9, #3456]
-.L1793:
+.L1801:
 	ldr	r3, [r9, #3456]
 	cmn	r3, #1
-	beq	.L1794
+	beq	.L1802
 	ldrh	r3, [r5, #8]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	bls	.L1794
+	bls	.L1802
 	ldrh	r1, [r5]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
 	ldreq	r2, [r9, #3460]
 	ldreq	r1, [fp, #-44]
 	streq	r2, [r1, r3, lsl #2]
-.L1794:
+.L1802:
 	add	r7, r7, #1
-	b	.L1792
-.L1791:
+	b	.L1800
+.L1799:
 	ldr	r2, [r9, #3304]
-	ldr	r0, .L1830+20
+	ldr	r0, .L1838+20
 	str	r2, [r9, #3464]
 	add	r2, r8, r3
 	str	r2, [fp, #-60]
 	ldrh	r2, [r8, r3]
-	ldr	r3, .L1830+4
+	ldr	r3, .L1838+4
 	ldrh	r3, [r3]
 	sub	r3, r3, #1
 	orr	r3, r3, r2, lsl #10
@@ -12676,25 +12679,25 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r9, #3456]
 	cmn	r3, #1
-	beq	.L1811
+	beq	.L1819
 	ldrh	r2, [r5]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1811
+	bne	.L1819
 	ldrh	r2, [r5, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	beq	.L1799
-.L1811:
+	beq	.L1807
+.L1819:
 	mov	r10, #0
-.L1800:
-	ldr	r2, .L1830+4
+.L1808:
+	ldr	r2, .L1838+4
 	sxth	r3, r10
 	ldrh	r2, [r2]
 	cmp	r3, r2
-	bge	.L1807
+	bge	.L1815
 	ldr	r2, [fp, #-60]
-	ldr	r0, .L1830+20
+	ldr	r0, .L1838+20
 	str	r3, [fp, #-68]
 	ldrh	r2, [r2]
 	orr	r2, r3, r2, lsl #10
@@ -12706,57 +12709,57 @@ FtlMapTblRecovery:
 	ldr	r2, [r2, #12]
 	cmp	r2, #0
 	str	r2, [fp, #-64]
-	beq	.L1804
+	beq	.L1812
 	ldr	r1, [r9, #3456]
 	cmn	r1, #1
-	beq	.L1804
-	ldr	r1, .L1830+8
+	beq	.L1812
+	ldr	r1, .L1838+8
 	ldr	r0, [r9, #3464]
 	ldrh	r1, [r1]
 	bl	js_hash
 	ldr	r2, [fp, #-64]
 	cmp	r2, r0
-	beq	.L1804
+	beq	.L1812
 	str	r0, [sp, #4]
 	str	r2, [sp]
 	mov	r2, r6
 	ldr	r3, [fp, #-68]
-	ldr	r1, .L1830+12
-	ldr	r0, .L1830+24
+	ldr	r1, .L1838+12
+	ldr	r0, .L1838+24
 	bl	sftl_printk
 	mvn	r3, #0
 	str	r3, [r9, #3456]
-.L1804:
+.L1812:
 	ldr	r3, [r9, #3456]
 	cmn	r3, #1
-	beq	.L1805
+	beq	.L1813
 	ldrh	r3, [r5, #8]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	bls	.L1805
+	bls	.L1813
 	ldrh	r1, [r5]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
 	ldreq	r2, [r9, #3460]
 	ldreq	r1, [fp, #-44]
 	streq	r2, [r1, r3, lsl #2]
-.L1805:
+.L1813:
 	add	r10, r10, #1
-	b	.L1800
-.L1799:
-	ldr	ip, .L1830+4
+	b	.L1808
+.L1807:
+	ldr	ip, .L1838+4
 	mov	r1, #0
 	mov	lr, #4
-.L1801:
+.L1809:
 	ldrh	r2, [ip]
 	sxth	r3, r1
 	sub	r2, r2, #1
 	cmp	r3, r2
-	blt	.L1803
-.L1807:
+	blt	.L1811
+.L1815:
 	add	r7, r7, #1
-	b	.L1790
-.L1803:
+	b	.L1798
+.L1811:
 	ldr	r0, [r9, #3304]
 	add	r1, r1, #1
 	ldr	r10, [fp, #-48]
@@ -12768,10 +12771,10 @@ FtlMapTblRecovery:
 	ldrhi	r3, [r0, r3]
 	ldrhi	r0, [fp, #-44]
 	strhi	r3, [r0, r2, lsl #2]
-	b	.L1801
-.L1831:
+	b	.L1809
+.L1839:
 	.align	2
-.L1830:
+.L1838:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+308
 	.word	.LANCHOR0+314
@@ -12792,13 +12795,13 @@ FtlLoadVonderInfo:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1833
+	ldr	r3, .L1841
 	add	r2, r3, #324
 	add	r0, r3, #3600
 	ldrh	r2, [r2]
 	add	r0, r0, #12
 	strh	r2, [r0, #10]	@ movhi
-	ldr	r2, .L1833+4
+	ldr	r2, .L1841+4
 	strh	r2, [r0, #4]	@ movhi
 	add	r2, r3, #348
 	ldrh	r2, [r2]
@@ -12817,9 +12820,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1834:
+.L1842:
 	.align	2
-.L1833:
+.L1841:
 	.word	.LANCHOR0
 	.word	-3962
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -12836,13 +12839,13 @@ FtlLoadMapInfo:
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
 	bl	FtlL2PDataInit
-	ldr	r0, .L1836
+	ldr	r0, .L1844
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1837:
+.L1845:
 	.align	2
-.L1836:
+.L1844:
 	.word	.LANCHOR0+3396
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	2
@@ -12857,7 +12860,7 @@ FtlSysBlkInit:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1854
+	ldr	r4, .L1862
 	mov	r2, #0
 	movw	r3, #3476
 	ldrh	r0, [r4, #240]
@@ -12868,16 +12871,16 @@ FtlSysBlkInit:
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1839
-.L1841:
+	bne	.L1847
+.L1849:
 	mvn	r6, #0
-.L1838:
+.L1846:
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1839:
+.L1847:
 	bl	FtlLoadSysInfo
 	subs	r6, r0, #0
-	bne	.L1841
+	bne	.L1849
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12892,24 +12895,24 @@ FtlSysBlkInit:
 	ldrh	r1, [r4, r3]
 	mov	r0, #12
 	mov	r3, r6
-.L1842:
+.L1850:
 	cmp	r3, r1
-	bge	.L1847
+	bge	.L1855
 	mla	ip, r0, r3, r2
 	ldr	ip, [ip, #4]
 	cmp	ip, #0
-	bge	.L1843
-.L1847:
-	ldr	r5, .L1854+4
+	bge	.L1851
+.L1855:
+	ldr	r5, .L1862+4
 	cmp	r3, r1
 	ldrh	r2, [r5, #28]
 	add	r2, r2, #1
 	strh	r2, [r5, #28]	@ movhi
-	bge	.L1853
-.L1844:
-	ldr	r0, .L1854+8
+	bge	.L1861
+.L1852:
+	ldr	r0, .L1862+8
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1854+12
+	ldr	r0, .L1862+12
 	bl	FtlSuperblockPowerLostFix
 	ldrh	r3, [r4, #28]
 	ldr	r1, [r4, #76]
@@ -12941,40 +12944,40 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1848
-.L1843:
+	b	.L1856
+.L1851:
 	add	r3, r3, #1
-	b	.L1842
-.L1853:
+	b	.L1850
+.L1861:
 	movw	r3, #3476
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L1844
-.L1848:
+	bne	.L1852
+.L1856:
 	ldrh	r0, [r4, #28]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1849
+	beq	.L1857
 	ldrh	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L1849
+	bne	.L1857
 	ldrh	r3, [r4, #84]
 	cmp	r3, #0
-	bne	.L1849
+	bne	.L1857
 	bl	FtlGcRefreshBlock
 	ldrh	r0, [r4, #80]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-	ldr	r0, .L1854+8
+	ldr	r0, .L1862+8
 	bl	allocate_new_data_superblock
-	ldr	r0, .L1854+12
+	ldr	r0, .L1862+12
 	bl	allocate_new_data_superblock
-.L1849:
+.L1857:
 	bl	FtlVpcCheckAndModify
-	b	.L1838
-.L1855:
+	b	.L1846
+.L1863:
 	.align	2
-.L1854:
+.L1862:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2472
 	.word	.LANCHOR0+28
@@ -12992,7 +12995,7 @@ ftl_low_format:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1880
+	ldr	r4, .L1888
 	mov	r3, #0
 	ldrh	r0, [r4, #240]
 	str	r3, [r4, #2592]
@@ -13001,43 +13004,43 @@ ftl_low_format:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L1857
+	beq	.L1865
 	bl	FtlMakeBbt
-.L1857:
-	ldr	r0, .L1880+4
+.L1865:
+	ldr	r0, .L1888+4
 	mov	r2, #0
-	ldr	ip, .L1880+8
-.L1858:
+	ldr	ip, .L1888+8
+.L1866:
 	ldrh	r1, [r0]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1859
+	blt	.L1867
 	ldrh	r6, [r4, #244]
 	mov	r5, #0
-.L1860:
+.L1868:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r6
-	bhi	.L1861
+	bhi	.L1869
 	ldrh	r1, [r4, #236]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1862
-.L1866:
+	bge	.L1870
+.L1874:
 	mov	r0, #0
 	mov	r7, r0
-.L1863:
+.L1871:
 	ldrh	r2, [r4, #244]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1867
+	bhi	.L1875
 	ldrh	r3, [r4, #246]
 	ldrh	r5, [r4, #236]
 	ldr	r10, [r4, #248]
 	str	r3, [r4, #3288]
 	mov	r1, r5
-	ldr	r6, .L1880+12
+	ldr	r6, .L1888+12
 	mov	r0, r10
 	bl	__udivsi3
 	ubfx	r8, r0, #5, #16
@@ -13048,7 +13051,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r7, r3
-	ble	.L1868
+	ble	.L1876
 	mov	r1, r5
 	sub	r0, r10, r7
 	bl	__udivsi3
@@ -13056,11 +13059,11 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r6]	@ movhi
-.L1868:
+.L1876:
 	movw	r3, #298
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	beq	.L1870
+	beq	.L1878
 	ldrh	r2, [r6]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r6]	@ movhi
@@ -13070,10 +13073,10 @@ ftl_low_format:
 	strlt	r9, [r4, #2556]
 	addlt	r3, r8, r3
 	strhlt	r3, [r6]	@ movhi
-.L1870:
+.L1878:
 	ldrh	r2, [r6]
 	ldr	r3, [r4, #2556]
-	ldr	r6, .L1880+16
+	ldr	r6, .L1888+16
 	sub	r3, r3, r2
 	mul	r5, r5, r3
 	movw	r3, #306
@@ -13108,29 +13111,29 @@ ftl_low_format:
 	strh	r5, [r4, #176]	@ movhi
 	strb	r3, [r4, #36]
 	bl	ftl_memset
-.L1872:
+.L1880:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #35]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r4, #28]
-	bne	.L1873
+	bne	.L1881
 	ldr	r2, [r4, #76]
 	lsl	r3, r3, #1
 	strh	r5, [r2, r3]	@ movhi
 	ldrh	r3, [r4, #28]
 	add	r3, r3, #1
 	strh	r3, [r4, #28]	@ movhi
-	b	.L1872
-.L1859:
+	b	.L1880
+.L1867:
 	ldr	lr, [r4, #3316]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [lr, r3, lsl #2]
 	ldr	r1, [r4, #3320]
 	str	ip, [r1, r3, lsl #2]
-	b	.L1858
-.L1861:
+	b	.L1866
+.L1869:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13138,8 +13141,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1860
-.L1862:
+	b	.L1868
+.L1870:
 	mov	r0, r5
 	bl	__udivsi3
 	ldr	r3, [r4, #336]
@@ -13149,30 +13152,30 @@ ftl_low_format:
 	ldrh	r0, [r4, #240]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #244]
-.L1864:
+.L1872:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r5
-	bls	.L1866
+	bls	.L1874
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1864
-.L1867:
+	b	.L1872
+.L1875:
 	mov	r1, #0
 	uxth	r0, r0
 	bl	FtlLowFormatEraseBlock
 	add	r7, r7, r0
 	mov	r0, r5
 	uxth	r7, r7
-	b	.L1863
-.L1873:
+	b	.L1871
+.L1881:
 	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
 	ldrh	r1, [r4, #32]
 	mvn	r5, #0
-	ldr	r6, .L1880+20
+	ldr	r6, .L1888+20
 	str	r2, [r4, #40]
 	add	r2, r2, #1
 	str	r2, [r4, #2592]
@@ -13186,21 +13189,21 @@ ftl_low_format:
 	strh	r3, [r4, #80]	@ movhi
 	mov	r3, #1
 	strb	r3, [r4, #88]
-.L1874:
+.L1882:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #87]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r4, #80]
-	bne	.L1875
+	bne	.L1883
 	ldr	r2, [r4, #76]
 	lsl	r3, r3, #1
 	strh	r5, [r2, r3]	@ movhi
 	ldrh	r3, [r4, #80]
 	add	r3, r3, #1
 	strh	r3, [r4, #80]	@ movhi
-	b	.L1874
-.L1875:
+	b	.L1882
+.L1883:
 	ldr	r2, [r4, #2592]
 	lsl	r3, r3, #1
 	ldrh	r1, [r4, #84]
@@ -13212,7 +13215,7 @@ ftl_low_format:
 	strh	r1, [r2, r3]	@ movhi
 	strh	r5, [r4, #128]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L1880+24
+	ldr	r3, .L1888+24
 	movw	r2, #2628
 	strh	r0, [r4, r2]	@ movhi
 	mov	r2, #0
@@ -13228,13 +13231,13 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L1880+28
+	ldreq	r3, .L1888+28
 	moveq	r2, #1
 	streq	r2, [r3]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1881:
+.L1889:
 	.align	2
-.L1880:
+.L1888:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+262
 	.word	168778952
@@ -13256,11 +13259,11 @@ sftl_init:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1888
+	ldr	r4, .L1896
 	mvn	r3, #0
-	ldr	r5, .L1888+4
-	ldr	r1, .L1888+8
-	ldr	r0, .L1888+12
+	ldr	r5, .L1896+4
+	ldr	r1, .L1896+8
+	ldr	r0, .L1896+12
 	str	r3, [r5]
 	bl	sftl_printk
 	mov	r0, r4
@@ -13271,28 +13274,28 @@ sftl_init:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L1886
+	bne	.L1894
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L1886
+	bne	.L1894
 	mov	r3, #1
 	str	r3, [r5]
 	ldrh	r3, [r4, #228]
 	cmp	r3, #15
-	bhi	.L1886
+	bhi	.L1894
 	movw	r4, #8129
-.L1885:
+.L1893:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1885
-.L1886:
+	bne	.L1893
+.L1894:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1889:
+.L1897:
 	.align	2
-.L1888:
+.L1896:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC0
@@ -13316,36 +13319,36 @@ FtlWriteToIDB:
 	mov	r5, r0
 	cmp	r9, #63
 	mov	r4, r1
-	movhi	r10, #0
-	movls	r10, #1
+	movhi	r3, #0
+	movls	r3, #1
 	cmp	r0, #576
-	orrcs	r10, r10, #1
+	orrcs	r3, r3, #1
 	mov	r7, r2
-	cmp	r10, #0
-	ldr	r6, .L1952
-	beq	.L1891
+	cmp	r3, #0
+	ldr	r6, .L1960
+	beq	.L1899
 	ldr	r3, [r6, #3680]
 	cmp	r3, #0
-	bne	.L1892
-.L1951:
+	bne	.L1900
+.L1959:
 	mov	r4, #0
-	b	.L1890
-.L1892:
+	b	.L1898
+.L1900:
 	ldr	r3, [r6, #3684]
 	ldr	r2, [r3]
 	str	r3, [fp, #-112]
-	ldr	r3, .L1952+4
+	ldr	r3, .L1960+4
 	cmp	r2, r3
-	bne	.L1894
+	bne	.L1902
 	ldr	r3, [fp, #-112]
 	mov	r2, #0
 	ldrh	r1, [r6, #10]
 	add	r0, r3, #262144
 	movw	r3, #65535
-.L1898:
+.L1906:
 	ldr	ip, [r0, #-4]
 	cmp	ip, #0
-	bne	.L1895
+	bne	.L1903
 	ldr	ip, [fp, #-112]
 	sub	r3, r3, #1
 	ldr	ip, [ip, r2, lsl #2]
@@ -13354,18 +13357,18 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	ip, [r0, #-4]!
-	bne	.L1898
+	bne	.L1906
 	mov	r3, #512
-	b	.L1949
-.L1895:
+	b	.L1957
+.L1903:
 	add	r3, r3, #127
 	lsr	r3, r3, #7
-.L1949:
+.L1957:
 	str	r3, [fp, #-116]
 	lsl	r1, r1, #2
 	ldr	r3, [fp, #-116]
 	uxth	r1, r1
-	ldr	r4, .L1952
+	ldr	r4, .L1960
 	add	r0, r3, #4
 	bl	__udivsi3
 	add	r3, r0, #1
@@ -13377,64 +13380,60 @@ FtlWriteToIDB:
 	mov	r3, #0
 	str	r3, [fp, #-124]
 	str	r3, [fp, #-108]
-.L1920:
-	mov	r2, #512
-	mov	r1, #0
+.L1928:
+	mov	r1, #512
 	ldr	r0, [r4, #3688]
-	bl	memset
+	bl	__memzero
 	ldr	r3, [fp, #-108]
 	ldrh	r7, [r4, #10]
 	mul	r8, r3, r7
 	ldr	r3, [r4, #3264]
 	cmp	r3, #0
 	moveq	r10, #6
-	beq	.L1899
+	beq	.L1907
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	moveq	r10, #6
 	movne	r10, #9
-.L1899:
+.L1907:
 	ldr	r3, [r6, #3252]
 	mov	r1, r8
 	mov	r0, #0
 	blx	r3
 	ldr	r3, [fp, #-120]
 	cmp	r3, #1
-	beq	.L1900
+	beq	.L1908
 	ldr	r3, [r6, #3252]
 	add	r1, r7, r8
 	mov	r0, #0
 	blx	r3
-.L1900:
+.L1908:
 	cmp	r10, #9
 	movne	r5, #0
-	bne	.L1901
+	bne	.L1909
 	ldr	r5, [r6, #3688]
-	mov	r2, #1024
-	mov	r1, #0
+	mov	r1, #1024
 	mov	r0, r5
-	bl	ftl_memset
-	ldr	r3, .L1952+8
+	bl	__memzero
+	ldr	r3, .L1960+8
 	mov	r1, #12
+	mov	r2, #4
 	str	r1, [r5, #4]
+	strb	r2, [r5, #17]
 	add	r0, r5, r1
 	str	r3, [r5]
 	mov	r3, #0
+	ldrh	r2, [r6, #10]
 	str	r3, [r5, #12]
 	strb	r3, [r5, #16]
-	mov	r3, #4
-	strb	r3, [r5, #17]
-	ldrh	r3, [r6, #10]
-	strh	r3, [r5, #18]	@ movhi
-	mov	r3, #0
+	strh	r2, [r5, #18]	@ movhi
+	mov	r2, #16
 	strb	r3, [r5, #20]
-	mov	r3, #16
-	strb	r3, [r5, #21]
-	mov	r3, #0	@ movhi
+	strb	r2, [r5, #21]
 	strh	r3, [r5, #22]	@ movhi
 	bl	js_hash
 	str	r0, [r5, #8]
-.L1901:
+.L1909:
 	ldr	r3, [fp, #-120]
 	mov	r9, r8
 	mul	r3, r7, r3
@@ -13442,10 +13441,10 @@ FtlWriteToIDB:
 	str	r3, [fp, #-136]
 	ldr	r3, [fp, #-112]
 	str	r3, [fp, #-128]
-.L1902:
+.L1910:
 	ldr	r3, [fp, #-136]
 	cmp	r7, r3
-	beq	.L1909
+	beq	.L1917
 	cmp	r10, #9
 	addne	r3, r8, r7
 	addeq	r3, r9, #1
@@ -13457,7 +13456,7 @@ FtlWriteToIDB:
 	movw	r3, #61424
 	str	r3, [fp, #-100]
 	movne	r0, #0
-	bne	.L1905
+	bne	.L1913
 	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
@@ -13473,8 +13472,8 @@ FtlWriteToIDB:
 	blx	r2
 	ldr	r3, [fp, #-140]
 	cmn	r3, #1
-	bne	.L1906
-.L1909:
+	bne	.L1914
+.L1917:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldrh	r10, [r4, #10]
 	ldr	r7, [r4, #3688]
@@ -13484,23 +13483,23 @@ FtlWriteToIDB:
 	ldr	r3, [r4, #3264]
 	cmp	r3, #0
 	moveq	r8, #6
-	beq	.L1908
+	beq	.L1916
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	moveq	r8, #6
 	movne	r8, #9
-.L1908:
+.L1916:
 	ldr	r3, [fp, #-120]
 	mov	r5, #0
 	mul	r10, r10, r3
-.L1911:
+.L1919:
 	cmp	r5, r10
-	beq	.L1915
+	beq	.L1923
 	cmp	r5, #0
 	cmpeq	r8, #9
 	moveq	r0, #1
 	movne	r0, #0
-	bne	.L1912
+	bne	.L1920
 	ldr	r3, [r4, #3264]
 	mov	r0, #70
 	blx	r3
@@ -13520,31 +13519,29 @@ FtlWriteToIDB:
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r7]
-	ldr	r2, .L1952+8
+	ldr	r2, .L1960+8
 	cmp	r3, r2
-	beq	.L1913
-.L1915:
+	beq	.L1921
+.L1923:
 	ldr	r0, [r4, #3688]
 	mov	r5, #0
 	ldr	r3, [fp, #-112]
-	mov	r2, r0
-.L1914:
-	mov	r7, r2
+.L1922:
 	mov	r8, r3
-	ldr	ip, [r7]
-	add	r2, r2, #4
-	ldr	r1, [r8]
+	ldr	r1, [r0, r5, lsl #2]
+	ldr	r2, [r8]
+	lsl	r7, r5, #2
 	add	r3, r3, #4
-	cmp	ip, r1
-	beq	.L1917
-	mov	r2, #512
-	mov	r1, #0
-	bl	memset
+	cmp	r1, r2
+	beq	.L1925
+	mov	r1, #512
+	bl	__memzero
+	ldr	r2, [r6, #3688]
 	ldr	r1, [fp, #-108]
 	str	r5, [sp]
-	ldr	r0, .L1952+12
+	ldr	r0, .L1960+12
 	ldr	r3, [r8]
-	ldr	r2, [r7]
+	ldr	r2, [r2, r7]
 	bl	sftl_printk
 	ldrh	r1, [r6, #10]
 	mov	r0, #0
@@ -13552,21 +13549,21 @@ FtlWriteToIDB:
 	ldr	r3, [r6, #3252]
 	mul	r1, r2, r1
 	blx	r3
-.L1918:
+.L1926:
 	ldr	r3, [fp, #-108]
 	ldr	r2, [fp, #-120]
 	add	r3, r3, r2
 	cmp	r3, #15
 	str	r3, [fp, #-108]
-	bls	.L1920
+	bls	.L1928
 	ldr	r3, [fp, #-124]
 	cmp	r3, #0
-	bne	.L1921
-.L1894:
+	bne	.L1929
+.L1902:
 	mvn	r3, #0
 	str	r3, [fp, #-116]
-.L1921:
-	ldr	r5, .L1952
+.L1929:
+	ldr	r5, .L1960
 	mov	r3, #0
 	ldr	r4, [fp, #-116]
 	ldr	r0, [r5, #3684]
@@ -13574,55 +13571,55 @@ FtlWriteToIDB:
 	bl	kfree
 	ldr	r0, [r5, #3688]
 	bl	kfree
-.L1890:
+.L1898:
 	mov	r0, r4
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1905:
+.L1913:
 	ldr	ip, [r4, #3256]
 	sub	r3, fp, #104
 	ldr	r2, [fp, #-128]
 	mov	r1, r9
 	blx	ip
 	cmn	r0, #1
-	beq	.L1909
+	beq	.L1917
 	ldr	r3, [fp, #-128]
 	add	r3, r3, #2048
 	str	r3, [fp, #-128]
-.L1906:
+.L1914:
 	add	r7, r7, #1
 	add	r9, r9, #1
-	b	.L1902
-.L1912:
+	b	.L1910
+.L1920:
 	ldr	ip, [r4, #3260]
 	sub	r3, fp, #104
 	mov	r2, r7
 	add	r1, r9, r5
 	blx	ip
 	cmn	r0, #1
-	beq	.L1915
+	beq	.L1923
 	ldr	r2, [fp, #-100]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1915
+	bne	.L1923
 	add	r7, r7, #2048
-.L1913:
+.L1921:
 	add	r5, r5, #1
-	b	.L1911
-.L1917:
-	ldr	r1, [fp, #-132]
+	b	.L1919
+.L1925:
+	ldr	r2, [fp, #-132]
 	add	r5, r5, #1
-	cmp	r5, r1
-	bne	.L1914
+	cmp	r5, r2
+	bne	.L1922
 	ldr	r3, [fp, #-124]
 	add	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [fp, #-124]
-	bls	.L1918
-	b	.L1921
-.L1891:
+	bls	.L1926
+	b	.L1929
+.L1899:
 	cmp	r0, #64
-	bne	.L1922
+	bne	.L1930
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r6, #3684]
@@ -13632,25 +13629,24 @@ FtlWriteToIDB:
 	str	r0, [r6, #3688]
 	cmp	r3, #0
 	cmpne	r0, #0
-	beq	.L1923
+	beq	.L1931
 	mov	r2, #1
-	mov	r1, r10
-	str	r2, [r6, #3680]
+	mov	r1, #262144
 	mov	r0, r3
-	mov	r2, #262144
-	bl	ftl_memset
-.L1922:
+	str	r2, [r6, #3680]
+	bl	__memzero
+.L1930:
 	ldr	r3, [r6, #3680]
 	cmp	r3, #0
-	beq	.L1951
+	beq	.L1959
 	cmp	r5, #63
 	ldr	r1, [r6, #3684]
-	ldrhi	r6, .L1952+16
+	ldrhi	r6, .L1960+16
 	rsbls	r5, r5, #64
 	subls	r4, r4, r5
 	addls	r7, r7, r5, lsl #9
 	movls	r6, r1
-	ldr	r0, .L1952+20
+	ldr	r0, .L1960+20
 	addhi	r6, r5, r6
 	mov	r2, #262144
 	addhi	r6, r1, r6, lsl #9
@@ -13665,15 +13661,15 @@ FtlWriteToIDB:
 	mov	r1, r7
 	mov	r0, r6
 	bl	ftl_memcpy
-	b	.L1951
-.L1923:
-	ldr	r1, .L1952+24
-	ldr	r0, .L1952+28
+	b	.L1959
+.L1931:
+	ldr	r1, .L1960+24
+	ldr	r0, .L1960+28
 	bl	sftl_printk
-	b	.L1922
-.L1953:
+	b	.L1930
+.L1961:
 	.align	2
-.L1952:
+.L1960:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	1179535694
@@ -13718,7 +13714,7 @@ rk_sftl_vendor_dev_ops_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1958
+	ldr	r2, .L1966
 	ldr	r3, [r2, #3692]
 	cmp	r3, #0
 	streq	r0, [r2, #3692]
@@ -13726,9 +13722,9 @@ rk_sftl_vendor_dev_ops_register:
 	streq	r1, [r2, #3696]
 	mvnne	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1959:
+.L1967:
 	.align	2
-.L1958:
+.L1966:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
@@ -13741,81 +13737,80 @@ rk_sftl_vendor_storage_init:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #65536
-	ldr	r5, .L1969
+	ldr	r4, .L1977
 	bl	ftl_malloc
 	cmp	r0, #0
-	str	r0, [r5, #3700]
+	str	r0, [r4, #3700]
 	mvneq	r9, #11
-	beq	.L1960
-	ldr	r10, .L1969+4
-	mov	r7, #0
-	mov	r6, r7
-	mov	r8, r7
-.L1964:
-	ldr	r3, [r5, #3692]
+	beq	.L1968
+	ldr	r8, .L1977+4
+	mov	r6, #0
+	mov	r5, r6
+	mov	r7, r6
+.L1972:
+	ldr	r3, [r4, #3692]
 	mov	r1, #128
-	ldr	r2, [r5, #3700]
-	lsl	r0, r8, #7
+	ldr	r2, [r4, #3700]
+	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L1962
-	ldr	r4, [r5, #3700]
-	ldr	r3, [r4]
-	cmp	r3, r10
-	bne	.L1963
-	add	r2, r4, #61440
-	ldr	r3, [r4, #4]
-	ldr	r2, [r2, #4092]
-	cmp	r3, r6
-	sub	r2, r2, r3
-	clz	r2, r2
-	lsr	r2, r2, #5
-	movls	r2, #0
-	cmp	r2, #0
-	movne	r7, r8
-	movne	r6, r3
-.L1963:
-	add	r8, r8, #1
-	cmp	r8, #2
-	bne	.L1964
-	cmp	r6, #0
-	beq	.L1965
-	ldr	r3, [r5, #3692]
-	mov	r2, r4
+	bne	.L1970
+	ldr	r2, [r4, #3700]
+	ldr	r3, [r2]
+	cmp	r3, r8
+	bne	.L1971
+	add	r1, r2, #61440
+	ldr	r3, [r2, #4]
+	ldr	r1, [r1, #4092]
+	cmp	r3, r5
+	sub	r1, r1, r3
+	clz	r1, r1
+	lsr	r1, r1, #5
+	movls	r1, #0
+	cmp	r1, #0
+	movne	r6, r7
+	movne	r5, r3
+.L1971:
+	add	r7, r7, #1
+	cmp	r7, #2
+	bne	.L1972
+	cmp	r5, #0
+	beq	.L1973
+	ldr	r3, [r4, #3692]
 	mov	r1, #128
-	lsl	r0, r7, #7
+	lsl	r0, r6, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L1960
-.L1962:
-	ldr	r0, [r5, #3700]
+	beq	.L1968
+.L1970:
+	ldr	r0, [r4, #3700]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
-	str	r3, [r5, #3700]
-	b	.L1960
-.L1965:
-	mov	r2, #65536
-	mov	r1, r6
-	mov	r0, r4
-	bl	memset
-	mov	r3, #1
-	add	r2, r4, #61440
-	str	r3, [r4, #4]
-	str	r10, [r4]
-	str	r3, [r2, #4092]
-	ldr	r3, .L1969+8
-	strh	r6, [r4, #12]	@ movhi
-	strh	r3, [r4, #14]	@ movhi
-.L1960:
+	str	r3, [r4, #3700]
+	b	.L1968
+.L1973:
+	mov	r1, #65536
+	mov	r0, r2
+	bl	__memzero
+	ldr	r3, [r4, #3700]
+	mov	r2, #1
+	add	r1, r3, #61440
+	str	r2, [r3, #4]
+	str	r8, [r3]
+	str	r2, [r1, #4092]
+	ldr	r2, .L1977+8
+	strh	r5, [r3, #12]	@ movhi
+	strh	r2, [r3, #14]	@ movhi
+.L1968:
 	mov	r0, r9
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1970:
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
+.L1978:
 	.align	2
-.L1969:
+.L1977:
 	.word	.LANCHOR0
 	.word	1380668996
 	.word	-1032
@@ -13832,26 +13827,26 @@ rk_sftl_vendor_read:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1977
+	ldr	r3, .L1985
 	mov	r4, r0
 	mov	r0, r1
 	ldr	ip, [r3, #3700]
 	cmp	ip, #0
 	ldrhne	lr, [ip, #10]
 	movne	r3, #0
-	bne	.L1973
-.L1976:
+	bne	.L1981
+.L1984:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1974:
+.L1982:
 	add	r3, r3, #1
-.L1973:
+.L1981:
 	cmp	r3, lr
-	bcs	.L1976
+	bcs	.L1984
 	add	r1, ip, r3, lsl #3
 	ldrh	r5, [r1, #16]
 	cmp	r5, r4
-	bne	.L1974
+	bne	.L1982
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13862,9 +13857,9 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1978:
+.L1986:
 	.align	2
-.L1977:
+.L1985:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
@@ -13881,23 +13876,23 @@ rk_sftl_vendor_write:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	ip, r1
-	ldr	r8, .L1998
+	ldr	r8, .L2006
 	mov	r9, r2
 	ldr	r4, [r8, #3700]
 	cmp	r4, #0
-	beq	.L1994
+	beq	.L2002
 	ldrh	r2, [r4, #10]
 	add	r7, r9, #63
 	ldrh	r3, [r4, #8]
 	bic	r7, r7, #63
 	mov	r5, #0
 	str	r3, [fp, #-44]
-.L1981:
+.L1989:
 	cmp	r5, r2
-	bcc	.L1989
+	bcc	.L1997
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1994
+	bhi	.L2002
 	add	r3, r4, r2, lsl #3
 	uxth	r7, r7
 	strh	r0, [r3, #16]	@ movhi
@@ -13929,31 +13924,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r8, #3696]
-	b	.L1997
-.L1989:
+	b	.L2005
+.L1997:
 	add	r6, r4, r5, lsl #3
 	ldrh	r3, [r6, #16]
 	cmp	r3, r0
 	str	r3, [fp, #-48]
-	bne	.L1982
+	bne	.L1990
 	ldrh	r1, [r6, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r9, r1
 	str	r1, [fp, #-52]
-	bls	.L1983
+	bls	.L1991
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1994
+	bhi	.L2002
 	ldrh	r8, [r6, #18]
 	sub	r2, r2, #1
 	str	r2, [fp, #-56]
-.L1984:
+.L1992:
 	ldr	r2, [fp, #-56]
 	add	r6, r6, #8
 	cmp	r5, r2
-	bcc	.L1985
+	bcc	.L1993
 	ldrh	r2, [fp, #-48]
 	add	r5, r4, r5, lsl #3
 	uxth	r8, r8
@@ -13972,7 +13967,7 @@ rk_sftl_vendor_write:
 	strh	r8, [r4, #12]	@ movhi
 	add	r7, r7, r3
 	strh	r7, [r4, #14]	@ movhi
-.L1986:
+.L1994:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -13984,19 +13979,19 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1998
+	ldr	r3, .L2006
 	ldr	r3, [r3, #3696]
-.L1997:
+.L2005:
 	ldr	r0, [fp, #-44]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L1979:
+.L1987:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1985:
+.L1993:
 	ldrh	r10, [r6, #20]
 	add	r0, r3, r8
 	ldrh	r2, [r6, #16]
@@ -14015,8 +14010,8 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	ip, [fp, #-64]
 	ldr	r3, [fp, #-60]
-	b	.L1984
-.L1983:
+	b	.L1992
+.L1991:
 	add	r5, r4, r5, lsl #3
 	mov	r2, r9
 	mov	r1, ip
@@ -14024,16 +14019,16 @@ rk_sftl_vendor_write:
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r9, [r6, #20]	@ movhi
-	b	.L1986
-.L1982:
+	b	.L1994
+.L1990:
 	add	r5, r5, #1
-	b	.L1981
-.L1994:
+	b	.L1989
+.L2002:
 	mvn	r0, #0
-	b	.L1979
-.L1999:
+	b	.L1987
+.L2007:
 	.align	2
-.L1998:
+.L2006:
 	.word	.LANCHOR0
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
@@ -14046,281 +14041,164 @@ rk_sftl_vendor_storage_ioctl:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #4096
-	mov	r5, r2
+	mov	r4, r2
 	mov	r6, r1
 	bl	ftl_malloc
-	subs	r4, r0, #0
-	mvneq	r5, #0
-	beq	.L2000
-	ldr	r3, .L2024
+	subs	r5, r0, #0
+	mvneq	r4, #0
+	beq	.L2008
+	ldr	r3, .L2036
 	cmp	r6, r3
-	beq	.L2003
+	beq	.L2011
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L2004
-.L2022:
-	mvn	r5, #13
-	b	.L2002
-.L2003:
-	ldr	r6, .L2024+4
+	beq	.L2012
+.L2031:
+	mvn	r4, #13
+	b	.L2010
+.L2011:
+	ldr	r6, .L2036+4
 	mov	r3, sp
-	and	r2, r3, r6
-	ldr	r3, [r2, #8]
+	and	r3, r3, r6
+	ldr	r3, [r3, #72]
 	.syntax divided
-@ 114 "include/linux/uaccess.h" 1
-	adds r1, r5, #8; sbcccs r1, r1, r3; movcc r3, #0
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2018
-	.syntax divided
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r7, c3, c0	@ get domain
-@ 0 "" 2
-	.arm
-	.syntax unified
-	bic	r3, r7, #12
-	orr	r3, r3, #4
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
+	bne	.L2013
 	mov	r2, #8
-	mov	r1, r5
+	mov	r1, r4
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r7, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
 	cmp	r0, #0
-	beq	.L2006
-.L2005:
-	rsb	r0, r2, #8
-	mov	r1, #0
-	add	r0, r4, r0
-	bl	memset
-	mov	r2, r5
+	beq	.L2032
+.L2014:
+	mov	r2, r4
 	mov	r1, #256
-.L2023:
-	ldr	r0, .L2024+8
+.L2035:
+	ldr	r0, .L2036+8
 	bl	sftl_printk
-	b	.L2022
-.L2018:
-	mov	r2, #8
-	b	.L2005
-.L2007:
+	b	.L2031
+.L2013:
+	mov	r1, #8
+	bl	__memzero
+	b	.L2014
+.L2032:
+	ldr	r2, [r5]
+	ldr	r3, .L2036+12
+	cmp	r2, r3
+	beq	.L2016
+.L2017:
+	mvn	r4, #0
+.L2010:
+	mov	r0, r5
+	bl	kfree
+.L2008:
+	mov	r0, r4
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L2016:
+	ldrh	r2, [r5, #6]
+	add	r1, r5, #8
+	ldrh	r0, [r5, #4]
+	bl	rk_sftl_vendor_read
+	cmn	r0, #1
+	beq	.L2017
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
-	strh	r0, [r4, #6]	@ movhi
+	strh	r0, [r5, #6]	@ movhi
 	add	r2, r2, #8
-	ldr	r3, [r6, #8]
+	ldr	r3, [r6, #72]
 	.syntax divided
-@ 132 "include/linux/uaccess.h" 1
-	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
+@ 573 "./arch/arm/include/asm/uaccess.h" 1
+	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2022
-	.syntax divided
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r6, c3, c0	@ get domain
-@ 0 "" 2
-	.arm
-	.syntax unified
-	bic	r3, r6, #12
-	orr	r3, r3, #4
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
-	mov	r1, r4
-	mov	r0, r5
+	bne	.L2031
+	mov	r0, r4
+	mov	r1, r5
 	bl	arm_copy_to_user
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r6, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
-	cmp	r0, #0
-	bne	.L2022
-.L2019:
-	mov	r5, r0
-	b	.L2002
-.L2004:
-	ldr	r7, .L2024+4
+	subs	r4, r0, #0
+	beq	.L2010
+	b	.L2031
+.L2012:
+	ldr	r6, .L2036+4
 	mov	r3, sp
-	and	r2, r3, r7
-	ldr	r3, [r2, #8]
+	and	r3, r3, r6
+	ldr	r3, [r3, #72]
 	.syntax divided
-@ 114 "include/linux/uaccess.h" 1
-	adds r1, r5, #8; sbcccs r1, r1, r3; movcc r3, #0
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2020
-	.syntax divided
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r6, c3, c0	@ get domain
-@ 0 "" 2
-	.arm
-	.syntax unified
-	bic	r3, r6, #12
-	orr	r3, r3, #4
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
+	bne	.L2019
 	mov	r2, #8
-	mov	r1, r5
+	mov	r1, r4
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r6, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
 	cmp	r0, #0
-	beq	.L2010
-.L2009:
-	rsb	r0, r2, #8
-	mov	r1, #0
-	add	r0, r4, r0
-	bl	memset
-	mov	r2, r5
-	mov	r1, #276
-	b	.L2023
+	beq	.L2033
 .L2020:
-	mov	r2, #8
-	b	.L2009
-.L2021:
-	mov	r2, r6
-	b	.L2012
-.L2006:
-	ldr	r2, [r4]
-	ldr	r3, .L2024+12
-	cmp	r2, r3
-	bne	.L2011
-	ldrh	r2, [r4, #6]
-	add	r1, r4, #8
-	ldrh	r0, [r4, #4]
-	bl	rk_sftl_vendor_read
-	cmn	r0, #1
-	bne	.L2007
-.L2011:
-	mvn	r5, #0
-.L2002:
-	mov	r0, r4
-	bl	kfree
-.L2000:
-	mov	r0, r5
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L2010:
-	ldr	r2, [r4]
-	ldr	r3, .L2024+12
+	mov	r2, r4
+	mov	r1, #276
+	b	.L2035
+.L2019:
+	mov	r1, #8
+	bl	__memzero
+	b	.L2020
+.L2033:
+	ldr	r2, [r5]
+	ldr	r3, .L2036+12
 	cmp	r2, r3
-	bne	.L2011
-	ldrh	r6, [r4, #6]
+	bne	.L2017
+	ldrh	r2, [r5, #6]
 	movw	r3, #4087
-	cmp	r6, r3
-	bhi	.L2011
+	cmp	r2, r3
+	bhi	.L2017
 	mov	r3, sp
-	add	r6, r6, #8
-	and	r7, r7, r3
-	ldr	r3, [r7, #8]
+	add	r2, r2, #8
+	and	r6, r6, r3
+	ldr	r3, [r6, #72]
 	.syntax divided
-@ 114 "include/linux/uaccess.h" 1
-	adds r2, r5, r6; sbcccs r2, r2, r3; movcc r3, #0
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2021
-	.syntax divided
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r7, c3, c0	@ get domain
-@ 0 "" 2
-	.arm
-	.syntax unified
-	bic	r3, r7, #12
-	orr	r3, r3, #4
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
-	mov	r2, r6
-	mov	r1, r5
-	mov	r0, r4
+	bne	.L2022
+	mov	r1, r4
+	mov	r0, r5
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax divided
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r7, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.arm
-	.syntax unified
 	cmp	r0, #0
-	beq	.L2013
-.L2012:
-	sub	r6, r6, r2
-	mov	r1, #0
-	add	r0, r4, r6
-	bl	memset
-	mov	r2, r5
+	beq	.L2034
+.L2023:
+	mov	r2, r4
 	movw	r1, #283
+	b	.L2035
+.L2022:
+	mov	r1, r2
+	mov	r0, r5
+	bl	__memzero
 	b	.L2023
-.L2013:
-	ldrh	r2, [r4, #6]
-	add	r1, r4, #8
-	ldrh	r0, [r4, #4]
+.L2034:
+	ldrh	r2, [r5, #6]
+	add	r1, r5, #8
+	ldrh	r0, [r5, #4]
 	bl	rk_sftl_vendor_write
-	b	.L2019
-.L2025:
+	mov	r4, r0
+	b	.L2010
+.L2037:
 	.align	2
-.L2024:
+.L2036:
 	.word	1074034177
 	.word	-8192
 	.word	.LC133
@@ -14338,12 +14216,12 @@ rk_sftl_vendor_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L2027
+	ldr	r0, .L2039
 	bl	misc_register
 	ldmfd	sp, {fp, sp, pc}
-.L2028:
+.L2040:
 	.align	2
-.L2027:
+.L2039:
 	.word	.LANCHOR2+12
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
 	.global	g_nand_ops
@@ -14498,162 +14376,162 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.4819, %object
-	.size	__func__.4819, 17
-__func__.4819:
+	.type	__func__.3968, %object
+	.size	__func__.3968, 17
+__func__.3968:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.4814, %object
-	.size	__func__.4814, 17
-__func__.4814:
+	.type	__func__.3963, %object
+	.size	__func__.3963, 17
+__func__.3963:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.4850, %object
-	.size	__func__.4850, 17
-__func__.4850:
+	.type	__func__.3999, %object
+	.size	__func__.3999, 17
+__func__.3999:
 	.ascii	"List_remove_node\000"
-	.type	__func__.4882, %object
-	.size	__func__.4882, 22
-__func__.4882:
+	.type	__func__.4031, %object
+	.size	__func__.4031, 22
+__func__.4031:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.4989, %object
-	.size	__func__.4989, 22
-__func__.4989:
+	.type	__func__.4138, %object
+	.size	__func__.4138, 22
+__func__.4138:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.5316, %object
-	.size	__func__.5316, 16
-__func__.5316:
+	.type	__func__.4465, %object
+	.size	__func__.4465, 16
+__func__.4465:
 	.ascii	"make_superblock\000"
-	.type	__func__.5491, %object
-	.size	__func__.5491, 19
-__func__.5491:
+	.type	__func__.4640, %object
+	.size	__func__.4640, 19
+__func__.4640:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.10740, %object
-	.size	__func__.10740, 17
-__func__.10740:
+	.type	__func__.15063, %object
+	.size	__func__.15063, 17
+__func__.15063:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.4924, %object
-	.size	__func__.4924, 26
-__func__.4924:
+	.type	__func__.4073, %object
+	.size	__func__.4073, 26
+__func__.4073:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.4429, %object
-	.size	__func__.4429, 11
-__func__.4429:
+	.type	__func__.3578, %object
+	.size	__func__.3578, 11
+__func__.3578:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.4656, %object
-	.size	__func__.4656, 14
-__func__.4656:
+	.type	__func__.3805, %object
+	.size	__func__.3805, 14
+__func__.3805:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.5337, %object
-	.size	__func__.5337, 18
-__func__.5337:
+	.type	__func__.4486, %object
+	.size	__func__.4486, 18
+__func__.4486:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.10697, %object
-	.size	__func__.10697, 15
-__func__.10697:
+	.type	__func__.15020, %object
+	.size	__func__.15020, 15
+__func__.15020:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.5101, %object
-	.size	__func__.5101, 14
-__func__.5101:
+	.type	__func__.4250, %object
+	.size	__func__.4250, 14
+__func__.4250:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.4699, %object
-	.size	__func__.4699, 11
-__func__.4699:
+	.type	__func__.3848, %object
+	.size	__func__.3848, 11
+__func__.3848:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.10716, %object
-	.size	__func__.10716, 15
-__func__.10716:
+	.type	__func__.15039, %object
+	.size	__func__.15039, 15
+__func__.15039:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.5463, %object
-	.size	__func__.5463, 25
-__func__.5463:
+	.type	__func__.4612, %object
+	.size	__func__.4612, 25
+__func__.4612:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.5504, %object
-	.size	__func__.5504, 16
-__func__.5504:
+	.type	__func__.4653, %object
+	.size	__func__.4653, 16
+__func__.4653:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.5511, %object
-	.size	__func__.5511, 20
-__func__.5511:
+	.type	__func__.4660, %object
+	.size	__func__.4660, 20
+__func__.4660:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.4950, %object
-	.size	__func__.4950, 31
-__func__.4950:
+	.type	__func__.4099, %object
+	.size	__func__.4099, 31
+__func__.4099:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.4964, %object
-	.size	__func__.4964, 16
-__func__.4964:
+	.type	__func__.4113, %object
+	.size	__func__.4113, 16
+__func__.4113:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.4891, %object
-	.size	__func__.4891, 16
-__func__.4891:
+	.type	__func__.4040, %object
+	.size	__func__.4040, 16
+__func__.4040:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.4935, %object
-	.size	__func__.4935, 15
-__func__.4935:
+	.type	__func__.4084, %object
+	.size	__func__.4084, 15
+__func__.4084:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.5006, %object
-	.size	__func__.5006, 9
-__func__.5006:
+	.type	__func__.4155, %object
+	.size	__func__.4155, 9
+__func__.4155:
 	.ascii	"log2phys\000"
-	.type	__func__.5225, %object
-	.size	__func__.5225, 16
-__func__.5225:
+	.type	__func__.4374, %object
+	.size	__func__.4374, 16
+__func__.4374:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.5259, %object
-	.size	__func__.5259, 22
-__func__.5259:
+	.type	__func__.4408, %object
+	.size	__func__.4408, 22
+__func__.4408:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.5378, %object
-	.size	__func__.5378, 14
-__func__.5378:
+	.type	__func__.4527, %object
+	.size	__func__.4527, 14
+__func__.4527:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.5079, %object
-	.size	__func__.5079, 15
-__func__.5079:
+	.type	__func__.4228, %object
+	.size	__func__.4228, 15
+__func__.4228:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.5362, %object
-	.size	__func__.5362, 21
-__func__.5362:
+	.type	__func__.4511, %object
+	.size	__func__.4511, 21
+__func__.4511:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.5484, %object
-	.size	__func__.5484, 29
-__func__.5484:
+	.type	__func__.4633, %object
+	.size	__func__.4633, 29
+__func__.4633:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.4553, %object
-	.size	__func__.4553, 13
-__func__.4553:
+	.type	__func__.3702, %object
+	.size	__func__.3702, 13
+__func__.3702:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.5581, %object
-	.size	__func__.5581, 19
-__func__.5581:
+	.type	__func__.4730, %object
+	.size	__func__.4730, 19
+__func__.4730:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.5694, %object
-	.size	__func__.5694, 23
-__func__.5694:
+	.type	__func__.4843, %object
+	.size	__func__.4843, 23
+__func__.4843:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.4581, %object
-	.size	__func__.4581, 9
-__func__.4581:
+	.type	__func__.3730, %object
+	.size	__func__.3730, 9
+__func__.3730:
 	.ascii	"FtlWrite\000"
-	.type	__func__.5157, %object
-	.size	__func__.5157, 15
-__func__.5157:
+	.type	__func__.4306, %object
+	.size	__func__.4306, 15
+__func__.4306:
 	.ascii	"FtlLoadSysInfo\000"
-	.type	__func__.5179, %object
-	.size	__func__.5179, 18
-__func__.5179:
+	.type	__func__.4328, %object
+	.size	__func__.4328, 18
+__func__.4328:
 	.ascii	"FtlMapTblRecovery\000"
-	.type	__func__.10855, %object
-	.size	__func__.10855, 14
-__func__.10855:
+	.type	__func__.15187, %object
+	.size	__func__.15187, 14
+__func__.15187:
 	.ascii	"FtlWriteToIDB\000"
 	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 128
+	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
-	.space	36
+	.space	32
 	.word	rk_sftl_vendor_storage_ioctl
 	.word	rk_sftl_vendor_storage_ioctl
-	.space	84
+	.space	68
 	.data
 	.align	2
 	.set	.LANCHOR2,. + 0
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index b2a1b07670c0..b3245787d7c8 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -1,7 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2019-03-26
+ * date: 2019-04-19
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -14,11 +14,7 @@
 	.eabi_attribute 34, 1
 	.eabi_attribute 18, 4
 	.file	"rk_sftl.c"
-	.syntax unified
-	.syntax unified
 	.global	__aeabi_uidiv
-	.thumb
-	.syntax unified
 	.text
 	.align	1
 	.syntax unified
@@ -269,46 +265,46 @@ FtlConstantsInit:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	fp, r0
-	ldrh	r3, [fp, #6]
 	ldrh	r1, [fp, #14]
-	ldr	r4, .L28
 	ldrh	r2, [r0]
+	ldr	r4, .L29
 	cmp	r1, #4
 	ldrh	r6, [r0, #2]
-	strh	r3, [r4, #246]	@ movhi
-	it	eq
-	lsreq	r3, r3, #1
-	strh	r1, [r4, #262]	@ movhi
-	ldr	r1, .L28+4
-	itt	eq
-	strheq	r3, [r4, #246]	@ movhi
-	moveq	r3, #8
+	ldrh	r3, [fp, #6]
 	ldrh	r0, [r0, #4]
-	it	eq
-	strheq	r3, [r4, #262]	@ movhi
-	movs	r3, #0
 	strh	r2, [r4, #256]	@ movhi
 	strh	r6, [r4, #258]	@ movhi
 	strh	r0, [r4, #260]	@ movhi
+	strh	r3, [r4, #246]	@ movhi
+	strh	r1, [r4, #262]	@ movhi
+	bne	.L19
+	lsrs	r3, r3, #1
+	strh	r3, [r4, #246]	@ movhi
+	movs	r3, #8
+	strh	r3, [r4, #262]	@ movhi
 .L20:
+	ldr	r1, .L29+4
+	movs	r3, #0
+.L21:
 	strb	r3, [r3, r1]
 	adds	r3, r3, #1
 	cmp	r3, #32
-	bne	.L20
+	bne	.L21
 	ldrh	r5, [r4, #246]
-	smulbb	r6, r6, r0
 	movs	r3, #5
+	ldrh	r0, [r4, #260]
 	cmp	r2, #1
 	strh	r3, [r4, #296]	@ movhi
-	uxth	r6, r6
-	mov	r3, #0
-	smulbb	r0, r0, r5
 	mov	r7, #640
+	mov	r3, #0
 	it	eq
 	strheq	r2, [r4, #296]	@ movhi
 	strh	r3, [r4, #298]	@ movhi
-	uxth	r0, r0
+	smulbb	r6, r6, r0
 	strh	r7, [r4, #300]	@ movhi
+	smulbb	r0, r0, r5
+	uxth	r6, r6
+	uxth	r0, r0
 	strh	r6, [r4, #236]	@ movhi
 	strh	r0, [r4, #302]	@ movhi
 	bl	Ftl_log2
@@ -388,9 +384,19 @@ FtlConstantsInit:
 	adds	r3, r3, #3
 	str	r3, [r4, #332]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L29:
+.L19:
+	cmp	r1, #8
+	bne	.L20
+	cmp	r0, #1
+	itttt	eq
+	lsreq	r3, r3, #1
+	strheq	r3, [r4, #246]	@ movhi
+	moveq	r3, #2
+	strheq	r3, [r4, #260]	@ movhi
+	b	.L20
+.L30:
 	.align	2
-.L28:
+.L29:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+264
 	.fnend
@@ -407,27 +413,27 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L37
+	ldr	r2, .L38
 	ldrh	r3, [r2, #348]
-	cbz	r3, .L36
+	cbz	r3, .L37
 	ldr	r3, [r2, #352]
 	ldrh	r2, [r2, #324]
 	add	r2, r3, r2, lsl #1
-.L32:
+.L33:
 	cmp	r3, r2
-	bne	.L33
-.L36:
+	bne	.L34
+.L37:
 	movs	r0, #0
 	bx	lr
-.L33:
+.L34:
 	ldrh	r1, [r3], #2
 	cmp	r0, r1
-	bne	.L32
+	bne	.L33
 	movs	r0, #1
 	bx	lr
-.L38:
+.L39:
 	.align	2
-.L37:
+.L38:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -459,12 +465,12 @@ sftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L41
+	ldr	r3, .L42
 	ldr	r0, [r3, #344]
 	bx	lr
-.L42:
+.L43:
 	.align	2
-.L41:
+.L42:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_get_density, .-sftl_get_density
@@ -484,7 +490,7 @@ FtlBbmMapBadBlock:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r5, r0
-	ldr	r4, .L44
+	ldr	r4, .L45
 	ldrh	r7, [r4, #302]
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -505,7 +511,7 @@ FtlBbmMapBadBlock:
 	mov	r2, r6
 	str	r0, [sp]
 	mov	r1, r5
-	ldr	r0, .L44+4
+	ldr	r0, .L45+4
 	bl	sftl_printk
 	ldrh	r3, [r4, #362]
 	movs	r0, #0
@@ -514,9 +520,9 @@ FtlBbmMapBadBlock:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L45:
+.L46:
 	.align	2
-.L44:
+.L45:
 	.word	.LANCHOR0
 	.word	.LC7
 	.fnend
@@ -535,7 +541,7 @@ FtlBbmIsBadBlock:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r5, .L47
+	ldr	r5, .L48
 	ldrh	r6, [r5, #302]
 	mov	r1, r6
 	bl	__aeabi_uidivmod
@@ -552,9 +558,9 @@ FtlBbmIsBadBlock:
 	lsrs	r0, r0, r4
 	and	r0, r0, #1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L48:
+.L49:
 	.align	2
-.L47:
+.L48:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -574,6 +580,33 @@ FtlBbtInfoPrint:
 	.fnend
 	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
 	.align	1
+	.global	FtlBbtMemInit
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, .L52
+	movw	r3, #65535
+	movs	r2, #16
+	movs	r1, #255
+	strh	r3, [r0, #356]	@ movhi
+	movs	r3, #0
+	strh	r3, [r0, #362]	@ movhi
+	add	r0, r0, #368
+	b	memset
+.L53:
+	.align	2
+.L52:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	1
 	.global	FtlBbtCalcTotleCnt
 	.syntax unified
 	.thumb
@@ -584,7 +617,7 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L57
+	ldr	r3, .L61
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
@@ -592,23 +625,23 @@ FtlBbtCalcTotleCnt:
 	ldrh	r2, [r3, #302]
 	ldrh	r6, [r3, #258]
 	muls	r6, r2, r6
-.L51:
+.L55:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L53
+	blt	.L57
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L53:
+.L57:
 	bl	FtlBbmIsBadBlock
-	cbz	r0, .L52
+	cbz	r0, .L56
 	adds	r4, r4, #1
 	uxth	r4, r4
-.L52:
+.L56:
 	adds	r5, r5, #1
-	b	.L51
-.L58:
+	b	.L55
+.L62:
 	.align	2
-.L57:
+.L61:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -626,7 +659,7 @@ V2P_block:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, r1
-	ldr	r4, .L60
+	ldr	r4, .L64
 	mov	r7, r0
 	ldrh	r6, [r4, #260]
 	mov	r1, r6
@@ -641,9 +674,9 @@ V2P_block:
 	add	r0, r0, r4
 	uxth	r0, r0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L61:
+.L65:
 	.align	2
-.L60:
+.L64:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -658,7 +691,7 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L63
+	ldr	r3, .L67
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
@@ -672,9 +705,9 @@ P2V_plane:
 	add	r1, r1, r4
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L64:
+.L68:
 	.align	2
-.L63:
+.L67:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -691,7 +724,7 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L66
+	ldr	r4, .L70
 	ldrh	r1, [r4, #302]
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
@@ -699,9 +732,9 @@ P2V_block_in_plane:
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L67:
+.L71:
 	.align	2
-.L66:
+.L70:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -718,14 +751,14 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L69
+	bls	.L73
 	subs	r0, r0, r1
 	cmp	r0, #-2147483648
 	ite	hi
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L69:
+.L73:
 	subs	r0, r1, r0
 	cmp	r0, #-2147483648
 	ite	ls
@@ -735,6 +768,36 @@ ftl_cmp_data_ver:
 	.fnend
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	1
+	.global	FtlFreeSysBlkQueueInit
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L76
+	mov	r1, #2048
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r4, #0
+	strh	r0, [r3, #416]	@ movhi
+	add	r0, r3, #424
+	strh	r4, [r3, #418]	@ movhi
+	strh	r4, [r3, #420]	@ movhi
+	strh	r4, [r3, #422]	@ movhi
+	bl	__memzero
+	mov	r0, r4
+	pop	{r4, pc}
+.L77:
+	.align	2
+.L76:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	1
 	.global	FtlFreeSysBlkQueueEmpty
 	.syntax unified
 	.thumb
@@ -746,14 +809,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L72
+	ldr	r3, .L79
 	ldrh	r0, [r3, #422]
 	clz	r0, r0
 	lsrs	r0, r0, #5
 	bx	lr
-.L73:
+.L80:
 	.align	2
-.L72:
+.L79:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -769,15 +832,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L75
+	ldr	r3, .L82
 	ldrh	r0, [r3, #422]
 	sub	r3, r0, #1024
 	rsbs	r0, r3, #0
 	adcs	r0, r0, r3
 	bx	lr
-.L76:
+.L83:
 	.align	2
-.L75:
+.L82:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -792,28 +855,28 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L86
+	ldr	r3, .L93
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldrh	r2, [r3, #422]
-	cbz	r2, .L77
+	cbz	r2, .L84
 	ldrh	r5, [r3, #2500]
 	movs	r0, #0
 	ldrh	r1, [r3, #418]
 	mov	r6, r0
 	ldrh	r2, [r3, #420]
 	and	r5, r5, #31
-.L79:
+.L86:
 	uxth	r4, r0
 	adds	r0, r0, #1
 	cmp	r5, r4
-	bgt	.L80
-	cbz	r6, .L77
+	bgt	.L87
+	cbz	r6, .L84
 	strh	r1, [r3, #418]	@ movhi
 	strh	r2, [r3, #420]	@ movhi
-.L77:
+.L84:
 	pop	{r4, r5, r6, pc}
-.L80:
+.L87:
 	add	r4, r3, r1, lsl #1
 	adds	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -823,10 +886,10 @@ FtlFreeSysBLkSort:
 	movs	r6, #1
 	add	r2, r2, r6
 	ubfx	r2, r2, #0, #10
-	b	.L79
-.L87:
+	b	.L86
+.L94:
 	.align	2
-.L86:
+.L93:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -841,35 +904,35 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L94
+	ldr	r3, .L101
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r4, [r3, #422]
 	cmp	r4, #1024
-	beq	.L92
+	beq	.L99
 	ldrh	r5, [r3, #418]
 	movs	r1, #0
-.L90:
+.L97:
 	cmp	r1, r4
-	bcc	.L91
-.L92:
+	bcc	.L98
+.L99:
 	movs	r0, #0
 	pop	{r4, r5, pc}
-.L91:
+.L98:
 	adds	r2, r1, r5
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #424]
 	cmp	r2, r0
-	beq	.L93
+	beq	.L100
 	adds	r1, r1, #1
-	b	.L90
-.L93:
+	b	.L97
+.L100:
 	movs	r0, #1
 	pop	{r4, r5, pc}
-.L95:
+.L102:
 	.align	2
-.L94:
+.L101:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -887,11 +950,11 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r2, .L111
+	ldr	r2, .L118
 	ldrh	r3, [r2, #244]
 	mov	r1, r2
 	cmp	r3, r0
-	bls	.L98
+	bls	.L105
 	movs	r5, #6
 	ldr	lr, [r2, #2520]
 	muls	r5, r0, r5
@@ -900,63 +963,63 @@ insert_data_list:
 	strh	r3, [r4, #2]	@ movhi
 	strh	r3, [lr, r5]	@ movhi
 	ldr	r3, [r2, #2524]
-	cbnz	r3, .L99
+	cbnz	r3, .L106
 	str	r4, [r2, #2524]
-.L98:
+.L105:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L99:
+.L106:
 	ldrh	r7, [r4, #4]
 	ldr	r9, [r2, #76]
 	ldrh	r2, [r9, r0, lsl #1]
-	cbz	r7, .L106
+	cbz	r7, .L113
 	muls	r2, r7, r2
-.L110:
+.L117:
 	ldr	r8, [r1, #2520]
 	movw	r10, #65535
 	str	r2, [sp]
 	sub	r2, r3, r8
 	asrs	r6, r2, #1
-	ldr	r2, .L111+4
+	ldr	r2, .L118+4
 	muls	r2, r6, r2
 	ldrh	r6, [r1, #244]
 	str	r6, [sp, #4]
 	movs	r6, #0
 	uxth	r2, r2
-.L104:
+.L111:
 	adds	r6, r6, #1
 	ldr	r7, [sp, #4]
 	uxth	r6, r6
 	cmp	r6, r7
-	bhi	.L98
+	bhi	.L105
 	cmp	r0, r2
-	beq	.L98
+	beq	.L105
 	ldrh	ip, [r3, #4]
 	cmp	ip, #0
-	beq	.L102
+	beq	.L109
 	ldrh	fp, [r9, r2, lsl #1]
 	ldr	r7, [sp]
 	mul	ip, ip, fp
 	cmp	ip, r7
-	bcs	.L102
+	bcs	.L109
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L103
+	bne	.L110
 	strh	r2, [r4, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
 	str	r4, [r1, #2528]
-	b	.L98
-.L106:
+	b	.L105
+.L113:
 	mov	r2, #-1
-	b	.L110
-.L103:
+	b	.L117
+.L110:
 	movs	r3, #6
 	mov	r2, ip
 	mla	r3, r3, ip, r8
-	b	.L104
-.L102:
+	b	.L111
+.L109:
 	strh	r2, [lr, r5]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [r4, #2]	@ movhi
@@ -972,10 +1035,10 @@ insert_data_list:
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L98
-.L112:
+	b	.L105
+.L119:
 	.align	2
-.L111:
+.L118:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -994,24 +1057,24 @@ INSERT_DATA_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L115
+	ldr	r2, .L122
 	ldrh	r3, [r2, #2532]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #2532]	@ movhi
 	ldrh	r2, [r2, #244]
 	cmp	r2, r3
-	bcs	.L113
+	bcs	.L120
 	movs	r2, #214
-	ldr	r1, .L115+4
-	ldr	r0, .L115+8
+	ldr	r1, .L122+4
+	ldr	r0, .L122+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L113:
+.L120:
 	pop	{r3, pc}
-.L116:
+.L123:
 	.align	2
-.L115:
+.L122:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC8
@@ -1032,8 +1095,8 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L118
-	ldr	r2, .L124
+	beq	.L125
+	ldr	r2, .L131
 	movs	r1, #6
 	mul	r7, r1, r0
 	ldr	ip, [r2, #2520]
@@ -1042,36 +1105,36 @@ insert_free_list:
 	strh	r4, [r6, #2]	@ movhi
 	strh	r4, [ip, r7]	@ movhi
 	ldr	r3, [r2, #2536]
-	cbnz	r3, .L119
+	cbnz	r3, .L126
 	str	r6, [r2, #2536]
-.L118:
+.L125:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L119:
+.L126:
 	ldr	lr, [r2, #2520]
 	ldr	r8, [r2, #2540]
 	sub	r2, r3, lr
 	asr	r10, r2, #1
-	ldr	r2, .L124+4
+	ldr	r2, .L131+4
 	ldrh	r9, [r8, r0, lsl #1]
 	mul	r2, r2, r10
 	mov	r10, r4
 	uxth	r2, r2
-.L122:
+.L129:
 	ldrh	r4, [r8, r2, lsl #1]
 	cmp	r4, r9
-	bcs	.L120
+	bcs	.L127
 	ldrh	r4, [r3]
 	cmp	r4, r10
-	bne	.L121
+	bne	.L128
 	strh	r2, [r6, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	b	.L118
-.L121:
+	b	.L125
+.L128:
 	mla	r3, r1, r4, lr
 	mov	r2, r4
-	b	.L122
-.L120:
+	b	.L129
+.L127:
 	ldrh	r1, [r3, #2]
 	strh	r1, [r6, #2]	@ movhi
 	strh	r2, [ip, r7]	@ movhi
@@ -1087,10 +1150,10 @@ insert_free_list:
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L118
-.L125:
+	b	.L125
+.L132:
 	.align	2
-.L124:
+.L131:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1109,24 +1172,24 @@ INSERT_FREE_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L128
+	ldr	r2, .L135
 	ldrh	r3, [r2, #228]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #228]	@ movhi
 	ldrh	r2, [r2, #244]
 	cmp	r2, r3
-	bcs	.L126
+	bcs	.L133
 	movs	r2, #207
-	ldr	r1, .L128+4
-	ldr	r0, .L128+8
+	ldr	r1, .L135+4
+	ldr	r0, .L135+8
 	pop	{r3, lr}
 	b	sftl_printk
-.L126:
+.L133:
 	pop	{r3, pc}
-.L129:
+.L136:
 	.align	2
-.L128:
+.L135:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC8
@@ -1146,7 +1209,7 @@ List_remove_node:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r6, #6
-	ldr	r4, .L136
+	ldr	r4, .L143
 	muls	r6, r1, r6
 	movw	r3, #65535
 	mov	r8, r0
@@ -1154,20 +1217,20 @@ List_remove_node:
 	adds	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L131
+	bne	.L138
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L131
+	beq	.L138
 	mov	r2, #372
-	ldr	r1, .L136+4
-	ldr	r0, .L136+8
+	ldr	r1, .L143+4
+	ldr	r0, .L143+8
 	bl	sftl_printk
-.L131:
+.L138:
 	ldr	r3, [r8]
 	movw	r1, #65535
 	cmp	r5, r3
 	ldrh	r3, [r7, r6]
-	bne	.L132
+	bne	.L139
 	cmp	r3, r1
 	ittee	ne
 	ldrne	r0, [r4, #2520]
@@ -1178,24 +1241,24 @@ List_remove_node:
 	mlane	r3, r2, r3, r0
 	strne	r3, [r8]
 	strhne	r1, [r3, #2]	@ movhi
-.L134:
+.L141:
 	movw	r3, #65535
 	movs	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L132:
+.L139:
 	cmp	r3, r1
 	ldrh	r1, [r5, #2]
-	bne	.L135
+	bne	.L142
 	cmp	r1, r3
-	beq	.L134
+	beq	.L141
 	movs	r2, #6
 	ldr	r0, [r4, #2520]
 	muls	r1, r2, r1
 	strh	r3, [r0, r1]	@ movhi
-	b	.L134
-.L135:
+	b	.L141
+.L142:
 	ldr	r0, [r4, #2520]
 	movs	r2, #6
 	mla	r3, r2, r3, r0
@@ -1205,10 +1268,10 @@ List_remove_node:
 	ldr	r3, [r4, #2520]
 	muls	r2, r0, r2
 	strh	r1, [r3, r2]	@ movhi
-	b	.L134
-.L137:
+	b	.L141
+.L144:
 	.align	2
-.L136:
+.L143:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC8
@@ -1228,15 +1291,15 @@ List_pop_index_node:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldr	r3, [r0]
-	cbz	r3, .L144
-	ldr	r2, .L145
+	cbz	r3, .L151
+	ldr	r2, .L152
 	movw	r5, #65535
 	movs	r6, #6
 	ldr	r2, [r2, #2520]
-.L140:
-	cbnz	r1, .L141
-.L143:
-	ldr	r4, .L145+4
+.L147:
+	cbnz	r1, .L148
+.L150:
+	ldr	r4, .L152+4
 	subs	r3, r3, r2
 	asrs	r3, r3, #1
 	muls	r4, r3, r4
@@ -1244,20 +1307,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, r5, r6, pc}
-.L141:
+.L148:
 	ldrh	r4, [r3]
 	cmp	r4, r5
-	beq	.L143
+	beq	.L150
 	subs	r1, r1, #1
 	mla	r3, r6, r4, r2
 	uxth	r1, r1
-	b	.L140
-.L144:
+	b	.L147
+.L151:
 	movw	r0, #65535
 	pop	{r4, r5, r6, pc}
-.L146:
+.L153:
 	.align	2
-.L145:
+.L152:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1289,37 +1352,37 @@ List_get_gc_head_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L154
+	ldr	r2, .L161
 	push	{r4, lr}
 	.save {r4, lr}
 	ldr	r3, [r2, #2524]
-	cbz	r3, .L153
+	cbz	r3, .L160
 	ldr	r1, [r2, #2520]
 	movs	r4, #6
 	movw	r2, #65535
-.L150:
-	cbz	r0, .L151
+.L157:
+	cbz	r0, .L158
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L152
-.L153:
+	bne	.L159
+.L160:
 	movw	r0, #65535
 	pop	{r4, pc}
-.L152:
+.L159:
 	subs	r0, r0, #1
 	mla	r3, r4, r3, r1
 	uxth	r0, r0
-	b	.L150
-.L151:
-	ldr	r0, .L154+4
+	b	.L157
+.L158:
+	ldr	r0, .L161+4
 	subs	r3, r3, r1
 	asrs	r3, r3, #1
 	muls	r3, r0, r3
 	uxth	r0, r3
 	pop	{r4, pc}
-.L155:
+.L162:
 	.align	2
-.L154:
+.L161:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1338,53 +1401,53 @@ List_update_data_list:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, r0
-	ldr	r4, .L167
+	ldr	r4, .L174
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L158
+	beq	.L165
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L158
+	beq	.L165
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	beq	.L158
+	beq	.L165
 	movs	r7, #6
 	ldr	r9, [r4, #2520]
 	muls	r7, r0, r7
 	ldr	r3, [r4, #2524]
 	add	r8, r9, r7
 	cmp	r8, r3
-	beq	.L158
+	beq	.L165
 	ldrh	r6, [r8, #4]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r6, #0
-	beq	.L165
+	beq	.L172
 	muls	r6, r3, r6
-.L160:
+.L167:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L161
+	bne	.L168
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	bne	.L161
+	bne	.L168
 	movw	r2, #463
-	ldr	r1, .L167+4
-	ldr	r0, .L167+8
+	ldr	r1, .L174+4
+	ldr	r0, .L174+8
 	bl	sftl_printk
-.L161:
+.L168:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L162
+	bne	.L169
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	beq	.L158
-.L162:
+	beq	.L165
+.L169:
 	movs	r2, #6
 	muls	r2, r3, r2
-	ldr	r3, .L167+12
+	ldr	r3, .L174+12
 	asrs	r1, r2, #1
 	muls	r3, r1, r3
 	ldr	r1, [r4, #76]
@@ -1392,38 +1455,38 @@ List_update_data_list:
 	ldr	r1, [r4, #2520]
 	add	r2, r2, r1
 	ldrh	r3, [r2, #4]
-	cbz	r3, .L166
+	cbz	r3, .L173
 	muls	r3, r0, r3
-.L163:
+.L170:
 	cmp	r6, r3
-	bcs	.L158
+	bcs	.L165
 	mov	r1, r5
-	ldr	r0, .L167+16
+	ldr	r0, .L174+16
 	bl	List_remove_node
 	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L164
+	cbnz	r3, .L171
 	mov	r2, #474
-	ldr	r1, .L167+4
-	ldr	r0, .L167+8
+	ldr	r1, .L174+4
+	ldr	r0, .L174+8
 	bl	sftl_printk
-.L164:
+.L171:
 	ldrh	r3, [r4, #2532]
 	mov	r0, r5
 	subs	r3, r3, #1
 	strh	r3, [r4, #2532]	@ movhi
 	bl	INSERT_DATA_LIST
-.L158:
+.L165:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L165:
+.L172:
 	mov	r6, #-1
-	b	.L160
-.L166:
+	b	.L167
+.L173:
 	mov	r3, #-1
-	b	.L163
-.L168:
+	b	.L170
+.L175:
 	.align	2
-.L167:
+.L174:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC8
@@ -1445,77 +1508,77 @@ select_l2p_ram_region:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r5, .L179
+	ldr	r5, .L186
 	movs	r0, #12
 	movw	r6, #65535
 	ldrh	r2, [r5, #342]
 	ldr	r3, [r5, #2544]
-.L170:
+.L177:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L172
+	bcc	.L179
 	mov	r4, r2
 	movs	r1, #0
 	mov	r7, #-2147483648
 	mov	ip, #12
-.L173:
+.L180:
 	uxth	r6, r1
 	cmp	r6, r2
-	bcc	.L175
+	bcc	.L182
 	cmp	r4, r2
-	bcc	.L171
+	bcc	.L178
 	ldrh	r7, [r5, #2548]
 	mov	r4, r2
 	movs	r1, #0
 	mov	r0, #-1
-.L176:
+.L183:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcc	.L178
+	bcc	.L185
 	cmp	r4, r2
-	bcc	.L171
+	bcc	.L178
 	movw	r2, #789
-	ldr	r1, .L179+4
-	ldr	r0, .L179+8
+	ldr	r1, .L186+4
+	ldr	r0, .L186+8
 	bl	sftl_printk
-	b	.L171
-.L172:
+	b	.L178
+.L179:
 	adds	r1, r1, #1
 	mla	r7, r0, r1, r3
 	ldrh	r7, [r7, #-12]
 	cmp	r7, r6
-	bne	.L170
-.L171:
+	bne	.L177
+.L178:
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L175:
+.L182:
 	mla	r0, ip, r1, r3
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L174
+	blt	.L181
 	cmp	r7, r0
 	itt	hi
 	movhi	r7, r0
 	movhi	r4, r6
-.L174:
+.L181:
 	adds	r1, r1, #1
-	b	.L173
-.L178:
+	b	.L180
+.L185:
 	ldr	r6, [r3, #4]
 	cmp	r0, r6
-	bls	.L177
+	bls	.L184
 	ldrh	ip, [r3]
 	cmp	ip, r7
 	itt	ne
 	movne	r0, r6
 	movne	r4, r5
-.L177:
+.L184:
 	adds	r1, r1, #1
 	adds	r3, r3, #12
-	b	.L176
-.L180:
+	b	.L183
+.L187:
 	.align	2
-.L179:
+.L186:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+73
 	.word	.LC8
@@ -1532,18 +1595,18 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L187
+	ldr	r1, .L194
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r3, r1
 	ldrh	r2, [r1, #2550]
 	cmp	r2, #4
-	bhi	.L182
-	cbnz	r0, .L182
+	bhi	.L189
+	cbnz	r0, .L189
 	adds	r2, r2, #1
 	strh	r2, [r1, #2550]	@ movhi
 	pop	{r4, r5, pc}
-.L182:
+.L189:
 	movs	r2, #0
 	ldrh	r1, [r3, #244]
 	strh	r2, [r3, #2550]	@ movhi
@@ -1551,21 +1614,21 @@ FtlUpdateVaildLpn:
 	str	r2, [r3, #2552]
 	ldr	r2, [r3, #76]
 	add	r1, r2, r1, lsl #1
-.L183:
+.L190:
 	cmp	r2, r1
-	bne	.L185
+	bne	.L192
 	pop	{r4, r5, pc}
-.L185:
+.L192:
 	ldrh	r4, [r2], #2
 	cmp	r4, r5
 	ittt	ne
 	ldrne	r0, [r3, #2552]
 	addne	r0, r0, r4
 	strne	r0, [r3, #2552]
-	b	.L183
-.L188:
+	b	.L190
+.L195:
 	.align	2
-.L187:
+.L194:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
@@ -1582,10 +1645,10 @@ ftl_set_blk_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	mov	r3, r0
-	cbz	r1, .L190
+	cbz	r1, .L197
 	b	ftl_set_blk_mode.part.6
-.L190:
-	ldr	r2, .L191
+.L197:
+	ldr	r2, .L198
 	lsrs	r0, r0, #5
 	and	r3, r3, #31
 	ldr	r1, [r2, #24]
@@ -1595,9 +1658,9 @@ ftl_set_blk_mode:
 	bic	r2, r2, r3
 	str	r2, [r1, r0, lsl #2]
 	bx	lr
-.L192:
+.L199:
 	.align	2
-.L191:
+.L198:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -1613,7 +1676,7 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L194
+	ldr	r3, .L201
 	lsrs	r2, r0, #5
 	and	r0, r0, #31
 	ldr	r3, [r3, #24]
@@ -1621,9 +1684,9 @@ ftl_get_blk_mode:
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-.L195:
+.L202:
 	.align	2
-.L194:
+.L201:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -1644,12 +1707,12 @@ ftl_sb_update_avl_pages:
 	strh	r3, [r0, #4]	@ movhi
 	add	r4, r0, r2, lsl #1
 	movw	r7, #65535
-	ldr	r3, .L203
+	ldr	r3, .L210
 	adds	r4, r4, #14
 	ldrh	r5, [r3, #236]
-.L197:
+.L204:
 	cmp	r2, r5
-	bcc	.L199
+	bcc	.L206
 	ldrh	r3, [r3, #306]
 	add	r4, r0, #16
 	movw	r6, #65535
@@ -1657,12 +1720,12 @@ ftl_sb_update_avl_pages:
 	subs	r1, r3, r1
 	movs	r3, #0
 	uxth	r1, r1
-.L200:
+.L207:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L202
+	bhi	.L209
 	pop	{r4, r5, r6, r7, pc}
-.L199:
+.L206:
 	ldrh	r6, [r4, #2]!
 	adds	r2, r2, #1
 	uxth	r2, r2
@@ -1671,8 +1734,8 @@ ftl_sb_update_avl_pages:
 	ldrhne	r6, [r0, #4]
 	addne	r6, r6, #1
 	strhne	r6, [r0, #4]	@ movhi
-	b	.L197
-.L202:
+	b	.L204
+.L209:
 	ldrh	r2, [r4], #2
 	adds	r3, r3, #1
 	cmp	r2, r6
@@ -1680,10 +1743,10 @@ ftl_sb_update_avl_pages:
 	ldrhne	r2, [r0, #4]
 	addne	r2, r2, r1
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L200
-.L204:
+	b	.L207
+.L211:
 	.align	2
-.L203:
+.L210:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -1701,24 +1764,24 @@ FtlSlcSuperblockCheck:
 	ldrh	r3, [r0, #4]
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	cbz	r3, .L205
+	cbz	r3, .L212
 	ldrh	r2, [r0]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L205
+	beq	.L212
 	ldrb	r2, [r0, #6]	@ zero_extendqisi2
 	movs	r5, #0
 	adds	r2, r2, #8
 	ldrh	r1, [r0, r2, lsl #1]
-	ldr	r2, .L211
+	ldr	r2, .L218
 	ldrh	r4, [r2, #236]
 	mov	r2, r3
-.L208:
+.L215:
 	cmp	r1, r2
-	beq	.L210
-.L205:
+	beq	.L217
+.L212:
 	pop	{r4, r5, pc}
-.L210:
+.L217:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -1732,10 +1795,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r1, [r0, r3, lsl #1]
-	b	.L208
-.L212:
+	b	.L215
+.L219:
 	.align	2
-.L211:
+.L218:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
@@ -1753,28 +1816,28 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r6, .L219
+	ldr	r6, .L226
 	ldrh	r2, [r0]
 	ldrh	r3, [r6, #244]
 	cmp	r2, r3
-	bcc	.L214
+	bcc	.L221
 	movw	r2, #2148
-	ldr	r1, .L219+4
-	ldr	r0, .L219+8
+	ldr	r1, .L226+4
+	ldr	r0, .L226+8
 	bl	sftl_printk
-.L214:
+.L221:
 	ldrh	r9, [r6, #236]
 	add	r7, r4, #16
-	ldr	r10, .L219+12
+	ldr	r10, .L226+12
 	movw	r8, #65535
 	movs	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L215:
+.L222:
 	uxth	r3, r5
 	ldrh	r1, [r4]
 	cmp	r9, r3
-	bhi	.L217
+	bhi	.L224
 	ldrh	r2, [r6, #306]
 	movs	r0, #0
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
@@ -1790,24 +1853,24 @@ make_superblock:
 	movhi	r3, #1
 	strbhi	r3, [r4, #9]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L217:
+.L224:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	strh	r8, [r7]	@ movhi
 	mov	fp, r0
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L216
+	cbnz	r0, .L223
 	strh	fp, [r7]	@ movhi
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	strb	r3, [r4, #7]
-.L216:
+.L223:
 	adds	r5, r5, #1
 	adds	r7, r7, #2
-	b	.L215
-.L220:
+	b	.L222
+.L227:
 	.align	2
-.L219:
+.L226:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC8
@@ -1828,44 +1891,44 @@ update_multiplier_value:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r6, .L227
+	ldr	r6, .L234
 	mov	r7, r0
 	mov	r4, r5
 	ldrh	r8, [r6, #236]
 	add	r10, r6, #264
 	ldrh	r9, [r6, #306]
-.L222:
+.L229:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L224
-	cbz	r4, .L226
+	bhi	.L231
+	cbz	r4, .L233
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L225:
+.L232:
 	ldr	r1, [r6, #2520]
 	movs	r3, #6
 	mla	r1, r3, r7, r1
 	strh	r0, [r1, #4]	@ movhi
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L224:
+.L231:
 	mov	r1, r7
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L223
+	cbnz	r0, .L230
 	add	r4, r4, r9
 	uxth	r4, r4
-.L223:
+.L230:
 	adds	r5, r5, #1
-	b	.L222
-.L226:
+	b	.L229
+.L233:
 	mov	r0, r4
-	b	.L225
-.L228:
+	b	.L232
+.L235:
 	.align	2
-.L227:
+.L234:
 	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
@@ -1881,22 +1944,22 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L232
+	ldr	r2, .L239
 	ldr	r0, [r2, #2536]
-	cbz	r0, .L230
+	cbz	r0, .L237
 	ldr	r3, [r2, #2520]
 	subs	r0, r0, r3
-	ldr	r3, .L232+4
+	ldr	r3, .L239+4
 	asrs	r0, r0, #1
 	muls	r0, r3, r0
 	ldr	r3, [r2, #2540]
 	uxth	r0, r0
 	ldrh	r0, [r3, r0, lsl #1]
-.L230:
+.L237:
 	bx	lr
-.L233:
+.L240:
 	.align	2
-.L232:
+.L239:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1912,11 +1975,11 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L242
+	ldr	r1, .L249
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	ldr	r3, [r1, #2536]
-	cbz	r3, .L240
+	cbz	r3, .L247
 	ldrh	r2, [r1, #228]
 	movs	r6, #6
 	ldr	r4, [r1, #2520]
@@ -1928,32 +1991,32 @@ GetFreeBlockMaxEraseCount:
 	cmp	r0, r2
 	it	gt
 	uxthgt	r0, r2
-	ldr	r2, .L242+4
+	ldr	r2, .L249+4
 	muls	r3, r2, r3
 	movs	r2, #0
 	uxth	r3, r3
-.L237:
+.L244:
 	uxth	r5, r2
 	cmp	r0, r5
-	bls	.L239
+	bls	.L246
 	mul	r5, r6, r3
 	adds	r2, r2, #1
 	ldrh	r5, [r4, r5]
 	cmp	r5, r7
-	bne	.L241
-.L239:
+	bne	.L248
+.L246:
 	ldr	r2, [r1, #2540]
 	ldrh	r0, [r2, r3, lsl #1]
 	pop	{r4, r5, r6, r7, pc}
-.L241:
+.L248:
 	mov	r3, r5
-	b	.L237
-.L240:
+	b	.L244
+.L247:
 	mov	r0, r3
 	pop	{r4, r5, r6, r7, pc}
-.L243:
+.L250:
 	.align	2
-.L242:
+.L249:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1972,236 +2035,236 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r6, r0
-	ldr	r5, .L256
+	ldr	r5, .L263
 	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, .L256+4
+	ldr	r1, .L263+4
 	bl	strcpy
 	ldr	r3, [r5, #320]
 	movs	r1, #64
-	ldr	r2, .L256+8
+	ldr	r2, .L263+8
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
-	ldr	r1, .L256+12
+	ldr	r1, .L263+12
 	mov	r0, r4
 	adds	r4, r4, #10
 	bl	strcpy
 	ldr	r3, [r5, #2556]
 	movs	r1, #64
-	ldr	r2, .L256+16
+	ldr	r2, .L263+16
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2552]
-	ldr	r2, .L256+20
+	ldr	r2, .L263+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2560]
-	ldr	r2, .L256+24
+	ldr	r2, .L263+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2564]
-	ldr	r2, .L256+28
+	ldr	r2, .L263+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2568]
-	ldr	r2, .L256+32
+	ldr	r2, .L263+32
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2572]
-	ldr	r2, .L256+36
+	ldr	r2, .L263+36
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2576]
-	ldr	r2, .L256+40
+	ldr	r2, .L263+40
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2580]
-	ldr	r2, .L256+44
+	ldr	r2, .L263+44
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2584]
 	add	r4, r4, r0
-	ldr	r2, .L256+48
+	ldr	r2, .L263+48
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	ldr	r3, [r5, #2588]
 	add	r4, r4, r0
-	ldr	r2, .L256+52
+	ldr	r2, .L263+52
 	movs	r1, #64
 	mov	r0, r4
 	lsrs	r3, r3, #11
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2592]
-	ldr	r2, .L256+56
+	ldr	r2, .L263+56
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2596]
-	ldr	r2, .L256+60
+	ldr	r2, .L263+60
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #362]
-	ldr	r2, .L256+64
+	ldr	r2, .L263+64
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #228]
-	ldr	r2, .L256+68
+	ldr	r2, .L263+68
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2600]
-	ldr	r2, .L256+72
+	ldr	r2, .L263+72
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2604]
-	ldr	r2, .L256+76
+	ldr	r2, .L263+76
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2608]
-	ldr	r2, .L256+80
+	ldr	r2, .L263+80
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2612]
-	ldr	r2, .L256+84
+	ldr	r2, .L263+84
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2616]
-	ldr	r2, .L256+88
+	ldr	r2, .L263+88
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2620]
-	ldr	r2, .L256+92
+	ldr	r2, .L263+92
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2502]
-	ldr	r2, .L256+96
+	ldr	r2, .L263+96
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2500]
-	ldr	r2, .L256+100
+	ldr	r2, .L263+100
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #344]
-	ldr	r2, .L256+104
+	ldr	r2, .L263+104
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #336]
-	ldr	r2, .L256+108
+	ldr	r2, .L263+108
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #232]
-	ldr	r2, .L256+112
+	ldr	r2, .L263+112
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #422]
-	ldr	r2, .L256+116
+	ldr	r2, .L263+116
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #244]
-	ldr	r2, .L256+120
+	ldr	r2, .L263+120
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2624]
-	ldr	r2, .L256+124
+	ldr	r2, .L263+124
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #248]
-	ldr	r2, .L256+128
+	ldr	r2, .L263+128
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #2628]
-	ldr	r2, .L256+132
+	ldr	r2, .L263+132
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #356]
-	ldr	r2, .L256+136
+	ldr	r2, .L263+136
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #30]
-	ldr	r2, .L256+140
+	ldr	r2, .L263+140
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #34]	@ zero_extendqisi2
-	ldr	r2, .L256+144
+	ldr	r2, .L263+144
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #28]
-	ldr	r2, .L256+148
+	ldr	r2, .L263+148
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #36]	@ zero_extendqisi2
-	ldr	r2, .L256+152
+	ldr	r2, .L263+152
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #32]
-	ldr	r2, .L256+156
+	ldr	r2, .L263+156
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2211,35 +2274,35 @@ FtlPrintInfo2buf:
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L256+160
+	ldr	r2, .L263+160
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #82]
-	ldr	r2, .L256+164
+	ldr	r2, .L263+164
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #86]	@ zero_extendqisi2
-	ldr	r2, .L256+168
+	ldr	r2, .L263+168
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #80]
-	ldr	r2, .L256+172
+	ldr	r2, .L263+172
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #88]	@ zero_extendqisi2
-	ldr	r2, .L256+176
+	ldr	r2, .L263+176
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #84]
-	ldr	r2, .L256+180
+	ldr	r2, .L263+180
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
@@ -2249,68 +2312,68 @@ FtlPrintInfo2buf:
 	movs	r1, #64
 	mov	r0, r4
 	ldrh	r3, [r3, r2, lsl #1]
-	ldr	r2, .L256+184
+	ldr	r2, .L263+184
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #130]
-	ldr	r2, .L256+188
+	ldr	r2, .L263+188
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #134]	@ zero_extendqisi2
-	ldr	r2, .L256+192
+	ldr	r2, .L263+192
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #128]
-	ldr	r2, .L256+196
+	ldr	r2, .L263+196
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #136]	@ zero_extendqisi2
-	ldr	r2, .L256+200
+	ldr	r2, .L263+200
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #132]
-	ldr	r2, .L256+204
+	ldr	r2, .L263+204
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #178]
-	ldr	r2, .L256+208
+	ldr	r2, .L263+208
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #182]	@ zero_extendqisi2
-	ldr	r2, .L256+212
+	ldr	r2, .L263+212
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #176]
-	ldr	r2, .L256+216
+	ldr	r2, .L263+216
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrb	r3, [r5, #184]	@ zero_extendqisi2
-	ldr	r2, .L256+220
+	ldr	r2, .L263+220
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #180]
-	b	.L257
-.L258:
+	b	.L264
+.L265:
 	.align	2
-.L256:
+.L263:
 	.word	.LANCHOR0
 	.word	.LC9
 	.word	.LC10
@@ -2367,14 +2430,14 @@ FtlPrintInfo2buf:
 	.word	.LC61
 	.word	.LC62
 	.word	.LC63
-.L257:
-	ldr	r2, .L259
+.L264:
+	ldr	r2, .L266
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	ldr	r3, [r5, #2720]
 	add	r4, r4, r0
-	ldr	r2, .L259+4
+	ldr	r2, .L266+4
 	movs	r1, #64
 	mov	r0, r4
 	str	r3, [sp, #4]
@@ -2384,43 +2447,43 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2716]
-	ldr	r2, .L259+8
+	ldr	r2, .L266+8
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #2740]
-	ldr	r2, .L259+12
+	ldr	r2, .L266+12
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3156]
-	ldr	r2, .L259+16
+	ldr	r2, .L266+16
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3158]
-	ldr	r2, .L259+20
+	ldr	r2, .L266+20
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldr	r3, [r5, #3160]
-	ldr	r2, .L259+24
+	ldr	r2, .L266+24
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	ldrh	r3, [r5, #3164]
-	ldr	r2, .L259+28
+	ldr	r2, .L266+28
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r2, .L259+32
+	ldr	r2, .L266+32
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
@@ -2428,44 +2491,44 @@ FtlPrintInfo2buf:
 	add	r4, r4, r0
 	ldrh	r0, [r5, #228]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r2, .L259+36
+	ldr	r2, .L266+36
 	mov	r3, r0
 	movs	r1, #64
 	mov	r0, r4
 	bl	snprintf
-	ldr	r3, .L259+40
+	ldr	r3, .L266+40
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L245
-.L250:
+	beq	.L252
+.L257:
 	subs	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L245:
+.L252:
 	ldrh	r3, [r5, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L247
+	beq	.L254
 	ldr	r2, [r5, #76]
 	mov	r0, r4
 	movs	r1, #64
 	ldrh	r3, [r2, r3, lsl #1]
-	ldr	r2, .L259+44
+	ldr	r2, .L266+44
 	bl	snprintf
 	add	r4, r4, r0
-.L247:
+.L254:
 	movs	r0, #0
-	ldr	r9, .L259+52
+	ldr	r9, .L266+52
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	movs	r7, #0
 	movw	fp, #65535
 	mov	r10, #6
-.L249:
+.L256:
 	cmp	r0, fp
-	beq	.L248
+	beq	.L255
 	ldr	r3, [r5, #2540]
 	mul	r8, r10, r0
 	mov	r2, r9
@@ -2487,22 +2550,22 @@ FtlPrintInfo2buf:
 	cmp	r7, #16
 	add	r4, r4, r0
 	ldrh	r0, [r3, r8]
-	bne	.L249
-.L248:
+	bne	.L256
+.L255:
 	ldr	r2, [r5, #2520]
 	movs	r7, #0
 	ldr	r3, [r5, #2536]
 	movw	r9, #65535
-	ldr	fp, .L259+56
+	ldr	fp, .L266+56
 	mov	r10, #6
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L259+48
+	ldr	r3, .L266+48
 	muls	r3, r2, r3
 	uxth	r3, r3
-.L251:
+.L258:
 	cmp	r3, r9
-	beq	.L250
+	beq	.L257
 	ldr	r2, [r5, #2540]
 	mul	r8, r10, r3
 	mov	r0, r4
@@ -2520,13 +2583,13 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L250
+	beq	.L257
 	ldr	r3, [r5, #2520]
 	ldrh	r3, [r3, r8]
-	b	.L251
-.L260:
+	b	.L258
+.L267:
 	.align	2
-.L259:
+.L266:
 	.word	.LC64
 	.word	.LC65
 	.word	.LC66
@@ -2559,10 +2622,10 @@ rknand_proc_ftlread:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r1
-	blt	.L263
-	ldr	r3, .L264
+	blt	.L270
+	ldr	r3, .L271
 	movs	r1, #64
-	ldr	r2, .L264+4
+	ldr	r2, .L271+4
 	mov	r0, r5
 	bl	snprintf
 	adds	r4, r5, r0
@@ -2571,12 +2634,12 @@ rknand_proc_ftlread:
 	add	r0, r0, r4
 	subs	r0, r0, r5
 	pop	{r3, r4, r5, pc}
-.L263:
+.L270:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L265:
+.L272:
 	.align	2
-.L264:
+.L271:
 	.word	.LC0
 	.word	.LC77
 	.fnend
@@ -2596,18 +2659,18 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L290
+	ldr	r4, .L297
 	ldr	r2, [r4, #2608]
 	ldr	r3, [r4, #2620]
 	cmp	r2, r3
-	bcs	.L267
+	bcs	.L274
 	ldrh	r1, [r4, #244]
 	movs	r3, #0
 	ldr	r0, [r4, #2540]
 	str	r3, [r4, #2600]
-.L268:
+.L275:
 	cmp	r3, r1
-	bcc	.L269
+	bcc	.L276
 	ldr	r5, [r4, #2600]
 	mov	r0, r5
 	bl	__aeabi_uidiv
@@ -2617,48 +2680,48 @@ GetSwlReplaceBlock:
 	subs	r0, r5, r0
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2600]
-.L270:
+.L277:
 	ldr	r6, [r4, #2620]
 	ldr	r7, [r4, #2608]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L275
+	bls	.L282
 	ldr	r2, [r4, #2616]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L275
-.L277:
+	bls	.L282
+.L284:
 	movw	r5, #65535
-.L276:
+.L283:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L269:
+.L276:
 	ldrh	r2, [r0, r3, lsl #1]
 	adds	r3, r3, #1
 	ldr	r5, [r4, #2600]
 	add	r2, r2, r5
 	str	r2, [r4, #2600]
-	b	.L268
-.L267:
+	b	.L275
+.L274:
 	ldr	r3, [r4, #2616]
 	cmp	r2, r3
-	bls	.L270
+	bls	.L277
 	adds	r3, r3, #1
 	str	r3, [r4, #2616]
 	movs	r3, #0
-.L272:
+.L279:
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	bcs	.L270
+	bcs	.L277
 	ldr	r1, [r4, #2540]
 	ldrh	r2, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	strh	r2, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
-	b	.L272
-.L275:
+	b	.L279
+.L282:
 	ldrh	r0, [r4, #228]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
@@ -2666,10 +2729,10 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L277
+	bcc	.L284
 	ldr	r3, [r4, #2524]
 	cmp	r3, #0
-	beq	.L277
+	beq	.L284
 	ldrh	r2, [r4, #244]
 	movw	r1, #65535
 	ldr	lr, [r4, #2520]
@@ -2679,42 +2742,42 @@ GetSwlReplaceBlock:
 	str	r2, [sp, #20]
 	mov	fp, #6
 	mov	r2, r1
-.L278:
+.L285:
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L281
+	bne	.L288
 	mov	r5, r2
-.L280:
+.L287:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L277
+	beq	.L284
 	ldrh	r10, [r8, r5, lsl #1]
 	lsl	fp, r5, #1
 	cmp	r6, r10
-	bcs	.L282
+	bcs	.L289
 	bl	GetFreeBlockMinEraseCount
 	cmp	r6, r0
 	it	cc
 	strcc	r1, [r4, #2620]
-.L282:
+.L289:
 	cmp	r7, r10
-	bls	.L277
+	bls	.L284
 	add	r3, r10, #128
 	cmp	r9, r3
-	ble	.L277
+	ble	.L284
 	add	r3, r10, #256
 	cmp	r7, r3
-	bhi	.L283
+	bhi	.L290
 	ldr	r3, [r4, #2616]
 	add	r10, r10, #768
 	cmp	r10, r3
-	bcs	.L277
-.L283:
+	bcs	.L284
+.L290:
 	str	r9, [sp, #8]
 	mov	r2, r7
 	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldr	r0, .L290+4
+	ldr	r0, .L297+4
 	str	r3, [sp, #4]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, fp]
@@ -2723,33 +2786,33 @@ GetSwlReplaceBlock:
 	bl	sftl_printk
 	movs	r3, #1
 	str	r3, [r4, #3168]
-	b	.L276
-.L281:
+	b	.L283
+.L288:
 	adds	r0, r0, #1
 	ldr	r5, [sp, #20]
 	uxth	r0, r0
 	cmp	r0, r5
-	bhi	.L277
+	bhi	.L284
 	ldrh	r5, [r3, #4]
-	cbz	r5, .L279
-	ldr	r5, .L290+8
+	cbz	r5, .L286
+	ldr	r5, .L297+8
 	sub	r3, r3, lr
 	asrs	r3, r3, #1
 	muls	r3, r5, r3
 	uxth	r5, r3
 	ldrh	r3, [r8, r5, lsl #1]
 	cmp	r6, r3
-	bcs	.L280
+	bcs	.L287
 	cmp	r1, r3
 	itt	hi
 	movhi	r1, r3
 	movhi	r2, r5
-.L279:
+.L286:
 	mla	r3, fp, ip, lr
-	b	.L278
-.L291:
+	b	.L285
+.L298:
 	.align	2
-.L290:
+.L297:
 	.word	.LANCHOR0
 	.word	.LC78
 	.word	-1431655765
@@ -2770,18 +2833,18 @@ free_data_superblock:
 	push	{r3, lr}
 	.save {r3, lr}
 	cmp	r0, r2
-	beq	.L293
-	ldr	r2, .L294
+	beq	.L300
+	ldr	r2, .L301
 	movs	r1, #0
 	ldr	r2, [r2, #76]
 	strh	r1, [r2, r0, lsl #1]	@ movhi
 	bl	INSERT_FREE_LIST
-.L293:
+.L300:
 	movs	r0, #0
 	pop	{r3, pc}
-.L295:
+.L302:
 	.align	2
-.L294:
+.L301:
 	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -2802,29 +2865,29 @@ get_new_active_ppa:
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L297
+	bne	.L304
 	movw	r2, #2781
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L318
+	ldr	r0, .L318+4
 	bl	sftl_printk
-.L297:
-	ldr	r6, .L311+8
+.L304:
+	ldr	r6, .L318+8
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r6, #306]
 	cmp	r2, r3
-	bne	.L298
+	bne	.L305
 	movw	r2, #2782
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L318
+	ldr	r0, .L318+4
 	bl	sftl_printk
-.L298:
+.L305:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L299
+	cbnz	r3, .L306
 	movw	r2, #2783
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L318
+	ldr	r0, .L318+4
 	bl	sftl_printk
-.L299:
+.L306:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	movs	r3, #0
 	ldrh	r1, [r6, #236]
@@ -2833,13 +2896,13 @@ get_new_active_ppa:
 	adds	r2, r2, #8
 	ldrh	r0, [r4, r2, lsl #1]
 	mov	r2, r3
-.L300:
+.L307:
 	cmp	r0, r5
-	beq	.L302
+	beq	.L309
 	ldrh	r5, [r4, #2]
 	ldrh	r6, [r6, #306]
 	cmp	r5, r6
-	bcs	.L306
+	bcs	.L313
 	ldrh	r2, [r4, #4]
 	orr	r5, r5, r0, lsl #10
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
@@ -2847,7 +2910,7 @@ get_new_active_ppa:
 	subs	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #4]	@ movhi
-.L305:
+.L312:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2859,20 +2922,20 @@ get_new_active_ppa:
 	add	r7, r3, #8
 	ldrh	r7, [r4, r7, lsl #1]
 	cmp	r7, r0
-	beq	.L305
+	beq	.L312
 	strb	r3, [r4, #6]
 	ldrh	r3, [r4, #2]
 	cmp	r3, r6
-	bne	.L296
-	cbz	r2, .L296
+	bne	.L303
+	cbz	r2, .L303
 	movw	r2, #2806
-	ldr	r1, .L311
-	ldr	r0, .L311+4
+	ldr	r1, .L318
+	ldr	r0, .L318+4
 	bl	sftl_printk
-.L296:
+.L303:
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, pc}
-.L302:
+.L309:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -2886,13 +2949,13 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
-	b	.L300
-.L306:
+	b	.L307
+.L313:
 	movw	r5, #65535
-	b	.L296
-.L312:
+	b	.L303
+.L319:
 	.align	2
-.L311:
+.L318:
 	.word	.LANCHOR1+111
 	.word	.LC8
 	.word	.LANCHOR0
@@ -2909,7 +2972,7 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L322
+	ldr	r3, .L329
 	mov	ip, #20
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -2918,21 +2981,21 @@ FtlGcBufInit:
 	movs	r2, #0
 	mov	r7, r3
 	str	r2, [r3, #3172]
-.L314:
+.L321:
 	ldrh	r1, [r3, #236]
 	uxth	r0, r2
 	adds	r4, r2, #1
 	cmp	r0, r1
-	bcc	.L317
-	ldr	r7, .L322
+	bcc	.L324
+	ldr	r7, .L329
 	mov	ip, #12
 	movs	r6, #0
-.L318:
+.L325:
 	ldr	r2, [r3, #3192]
 	cmp	r1, r2
-	bcc	.L321
+	bcc	.L328
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L317:
+.L324:
 	uxth	r2, r2
 	ldr	r8, [r3, #3176]
 	mul	lr, r9, r2
@@ -2963,8 +3026,8 @@ FtlGcBufInit:
 	ldr	r1, [r8, #4]
 	str	r1, [r2, #12]
 	mov	r2, r4
-	b	.L314
-.L321:
+	b	.L321
+.L328:
 	mul	r0, ip, r1
 	ldr	r4, [r3, #3176]
 	ldr	r5, [r3, #3180]
@@ -2989,10 +3052,10 @@ FtlGcBufInit:
 	add	r2, r2, r4
 	uxth	r1, r1
 	str	r2, [r0, #4]
-	b	.L318
-.L323:
+	b	.L325
+.L330:
 	.align	2
-.L322:
+.L329:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
@@ -3007,7 +3070,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L331
+	ldr	r3, .L338
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
@@ -3016,32 +3079,32 @@ FtlGcBufFree:
 	mov	r8, r5
 	ldr	ip, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L325:
+.L332:
 	uxth	r3, r5
 	cmp	r1, r3
-	bls	.L324
+	bls	.L331
 	mla	r4, r10, r3, r0
 	movs	r2, #0
-.L326:
+.L333:
 	uxth	r3, r2
 	cmp	ip, r3
-	bls	.L327
+	bls	.L334
 	mul	r3, lr, r3
 	ldr	r7, [r4, #8]
 	adds	r2, r2, #1
 	add	r9, r6, r3
 	ldr	r3, [r6, r3]
 	cmp	r3, r7
-	bne	.L326
+	bne	.L333
 	str	r8, [r9, #8]
-.L327:
+.L334:
 	adds	r5, r5, #1
-	b	.L325
-.L324:
+	b	.L332
+.L331:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L332:
+.L339:
 	.align	2
-.L331:
+.L338:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -3056,7 +3119,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L340
+	ldr	r3, .L347
 	mov	ip, #12
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -3065,34 +3128,34 @@ FtlGcBufAlloc:
 	mov	r8, #20
 	ldr	r5, [r3, #3192]
 	ldr	r6, [r3, #3176]
-.L334:
+.L341:
 	uxth	r2, r4
 	cmp	r1, r2
-	bhi	.L338
+	bhi	.L345
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L338:
+.L345:
 	mov	r9, #0
-.L335:
+.L342:
 	uxth	r3, r9
 	cmp	r5, r3
-	bls	.L336
+	bls	.L343
 	mla	r3, ip, r3, r6
 	add	r9, r9, #1
 	ldr	r7, [r3, #8]
 	cmp	r7, #0
-	bne	.L335
+	bne	.L342
 	mla	r2, r8, r2, r0
 	ldr	r7, [r3]
 	str	lr, [r3, #8]
 	str	r7, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L336:
+.L343:
 	adds	r4, r4, #1
-	b	.L334
-.L341:
+	b	.L341
+.L348:
 	.align	2
-.L340:
+.L347:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -3108,24 +3171,24 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L347
+	ldr	r2, .L354
 	ldr	r3, [r2, #3196]
 	ldrh	r2, [r2, #3200]
 	add	r2, r3, r2, lsl #1
-.L343:
+.L350:
 	cmp	r3, r2
-	bne	.L345
+	bne	.L352
 	movs	r0, #0
 	bx	lr
-.L345:
+.L352:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L343
+	bne	.L350
 	movs	r0, #1
 	bx	lr
-.L348:
+.L355:
 	.align	2
-.L347:
+.L354:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -3148,26 +3211,26 @@ FtlGcUpdatePage:
 	mov	r7, r2
 	movs	r4, #0
 	bl	P2V_block_in_plane
-	ldr	r3, .L353
+	ldr	r3, .L360
 	ldrh	r1, [r3, #3200]
 	ldr	r2, [r3, #3196]
-.L350:
+.L357:
 	uxth	ip, r4
 	cmp	ip, r1
-	bcc	.L352
-	bne	.L351
+	bcc	.L359
+	bne	.L358
 	strh	r0, [r2, ip, lsl #1]	@ movhi
 	ldrh	r0, [r3, #3200]
 	adds	r0, r0, #1
 	strh	r0, [r3, #3200]	@ movhi
-	b	.L351
-.L352:
+	b	.L358
+.L359:
 	adds	r4, r4, #1
 	add	ip, r2, r4, lsl #1
 	ldrh	ip, [ip, #-2]
 	cmp	ip, r0
-	bne	.L350
-.L351:
+	bne	.L357
+.L358:
 	ldrh	r2, [r3, #3208]
 	movs	r0, #12
 	muls	r0, r2, r0
@@ -3180,9 +3243,9 @@ FtlGcUpdatePage:
 	adds	r2, r2, #1
 	strh	r2, [r3, #3208]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
-.L354:
+.L361:
 	.align	2
-.L353:
+.L360:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -3201,30 +3264,30 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r1, r0
 	mov	r4, r0
-	ldr	r0, .L358
+	ldr	r0, .L365
 	bl	sftl_printk
-	ldr	r3, .L358+4
+	ldr	r3, .L365+4
 	ldrh	r0, [r3, #226]
 	cmp	r4, r0
-	beq	.L356
+	beq	.L363
 	ldrh	r1, [r3, #224]
 	cmp	r4, r1
-	beq	.L356
+	beq	.L363
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L357
+	bne	.L364
 	strh	r4, [r3, #226]	@ movhi
-.L356:
+.L363:
 	movs	r0, #0
 	pop	{r4, pc}
-.L357:
+.L364:
 	cmp	r1, r2
 	it	eq
 	strheq	r4, [r3, #224]	@ movhi
-	b	.L356
-.L359:
+	b	.L363
+.L366:
 	.align	2
-.L358:
+.L365:
 	.word	.LC79
 	.word	.LANCHOR0
 	.fnend
@@ -3243,41 +3306,41 @@ FtlGcMarkBadPhyBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
-	ldr	r4, .L364
+	ldr	r4, .L371
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r6, r0
 	ldrh	r1, [r4, #3210]
-	ldr	r0, .L364+4
+	ldr	r0, .L371+4
 	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, #3210]
 	movs	r2, #0
 	addw	r0, r4, #3212
-.L361:
+.L368:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L363
+	bhi	.L370
 	cmp	r3, #15
 	itttt	ls
 	addls	r2, r3, #1
 	strhls	r2, [r4, #3210]	@ movhi
 	addls	r4, r4, r3, lsl #1
 	strhls	r5, [r4, #3212]	@ movhi
-	b	.L362
-.L363:
+	b	.L369
+.L370:
 	adds	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L361
-.L362:
+	bne	.L368
+.L369:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L365:
+.L372:
 	.align	2
-.L364:
+.L371:
 	.word	.LANCHOR0
 	.word	.LC80
 	.fnend
@@ -3295,13 +3358,13 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L372
+	ldr	r4, .L379
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L367
+	cbz	r3, .L374
 	ldrh	r1, [r4, #226]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L367
+	bne	.L374
 	ldrh	r2, [r4, #3246]
 	cmp	r2, r3
 	itt	cs
@@ -3315,12 +3378,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, #3246]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3246]	@ movhi
-.L367:
+.L374:
 	movs	r0, #0
 	pop	{r4, pc}
-.L373:
+.L380:
 	.align	2
-.L372:
+.L379:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3336,12 +3399,12 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r1, .L375
+	ldr	r1, .L382
 	b	__kmalloc
-.L376:
+.L383:
 	.align	2
-.L375:
-	.word	6291649
+.L382:
+	.word	37748929
 	.fnend
 	.size	ftl_malloc, .-ftl_malloc
 	.align	1
@@ -3373,54 +3436,54 @@ rknand_print_hex:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	fp, .L387+16
+	ldr	fp, .L394+16
 	mov	r10, r0
 	mov	r7, r1
 	mov	r8, r2
 	mov	r9, r3
 	mov	r5, r6
 	mov	r4, r6
-.L379:
+.L386:
 	cmp	r4, r9
-	bcc	.L385
-	ldr	r0, .L387
+	bcc	.L392
+	ldr	r0, .L394
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	b	sftl_printk
-.L385:
-	cbnz	r5, .L380
+.L392:
+	cbnz	r5, .L387
 	mov	r3, r6
 	mov	r2, r7
 	mov	r1, r10
-	ldr	r0, .L387+4
+	ldr	r0, .L394+4
 	bl	sftl_printk
-.L380:
+.L387:
 	cmp	r8, #4
-	bne	.L381
+	bne	.L388
 	ldr	r1, [r7, r4, lsl #2]
-	ldr	r0, .L387+8
-.L386:
+	ldr	r0, .L394+8
+.L393:
 	adds	r5, r5, #1
 	bl	sftl_printk
 	cmp	r5, #15
-	bls	.L384
+	bls	.L391
 	movs	r5, #0
-	ldr	r0, .L387
+	ldr	r0, .L394
 	bl	sftl_printk
-.L384:
+.L391:
 	adds	r4, r4, #1
 	add	r6, r6, r8
-	b	.L379
-.L381:
+	b	.L386
+.L388:
 	cmp	r8, #2
 	ittee	eq
 	ldrheq	r1, [r7, r4, lsl #1]
 	moveq	r0, fp
 	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
-	ldrne	r0, .L387+12
-	b	.L386
-.L388:
+	ldrne	r0, .L394+12
+	b	.L393
+.L395:
 	.align	2
-.L387:
+.L394:
 	.word	.LC85
 	.word	.LC81
 	.word	.LC82
@@ -3442,7 +3505,7 @@ FlashEraseBlocks:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r5, .L405
+	ldr	r5, .L412
 	mov	r4, r0
 	mov	fp, r0
 	movs	r7, #0
@@ -3452,24 +3515,24 @@ FlashEraseBlocks:
 	ldrh	r9, [r5, #12]
 	lsl	r3, r9, #3
 	str	r3, [sp, #4]
-.L390:
+.L397:
 	cmp	r7, r8
-	beq	.L394
+	beq	.L401
 	add	r2, sp, #8
 	add	r1, sp, #12
 	mov	r0, fp
 	bl	l2p_addr_tran
 	ldr	r6, [sp, #8]
-	cbnz	r6, .L391
+	cbnz	r6, .L398
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #4]
 	cmp	r3, r2
-	bls	.L391
-	ldr	r5, .L405+4
-	ldr	r7, .L405+8
-	ldr	r9, .L405+16
-	b	.L404
-.L393:
+	bls	.L398
+	ldr	r5, .L412+4
+	ldr	r7, .L412+8
+	ldr	r9, .L412+16
+	b	.L411
+.L400:
 	mov	r3, #-1
 	ldr	r2, [sp, #12]
 	str	r3, [r4, #-20]
@@ -3485,19 +3548,19 @@ FlashEraseBlocks:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L405+12
+	ldr	r0, .L412+12
 	bl	rknand_print_hex
-.L404:
+.L411:
 	cmp	r6, r8
 	add	r4, r4, #20
-	bne	.L393
+	bne	.L400
 	bl	dump_stack
-.L394:
+.L401:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L391:
+.L398:
 	ldr	r2, [r5, #3252]
 	uxtb	r0, r6
 	ldr	r1, [sp, #12]
@@ -3509,21 +3572,21 @@ FlashEraseBlocks:
 	str	r2, [fp]
 	ldrh	r2, [r5, #14]
 	cmp	r2, #4
-	bne	.L398
+	bne	.L405
 	ldr	r1, [sp, #12]
 	ldr	r2, [r5, #3252]
 	ldrb	r0, [sp, #8]	@ zero_extendqisi2
 	add	r1, r1, r9
 	blx	r2
-	cbz	r0, .L398
+	cbz	r0, .L405
 	str	r10, [fp]
-.L398:
+.L405:
 	adds	r7, r7, #1
 	add	fp, fp, #20
-	b	.L390
-.L406:
+	b	.L397
+.L413:
 	.align	2
-.L405:
+.L412:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
 	.word	.LC86
@@ -3549,12 +3612,12 @@ FtlFreeSysBlkQueueIn:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	cmp	r3, r2
-	bhi	.L407
-	ldr	r4, .L416
+	bhi	.L414
+	ldr	r4, .L423
 	ldrh	r3, [r4, #422]
 	cmp	r3, #1024
-	beq	.L407
-	cbz	r1, .L409
+	beq	.L414
+	cbz	r1, .L416
 	bl	P2V_block_in_plane
 	mov	r6, r0
 	ldr	r0, [r4, #3272]
@@ -3570,7 +3633,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L409:
+.L416:
 	ldrh	r3, [r4, #422]
 	adds	r3, r3, #1
 	strh	r3, [r4, #422]	@ movhi
@@ -3580,11 +3643,11 @@ FtlFreeSysBlkQueueIn:
 	ubfx	r3, r3, #0, #10
 	strh	r5, [r2, #424]	@ movhi
 	strh	r3, [r4, #420]	@ movhi
-.L407:
+.L414:
 	pop	{r4, r5, r6, pc}
-.L417:
+.L424:
 	.align	2
-.L416:
+.L423:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
@@ -3601,9 +3664,9 @@ FtlFreeSysBlkQueueOut:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r4, .L423
+	ldr	r4, .L430
 	ldrh	r2, [r4, #422]
-	cbz	r2, .L422
+	cbz	r2, .L429
 	ldrh	r3, [r4, #418]
 	subs	r2, r2, #1
 	ldr	r0, [r4, #3272]
@@ -3621,27 +3684,27 @@ FtlFreeSysBlkQueueOut:
 	ldr	r3, [r4, #2612]
 	adds	r3, r3, #1
 	str	r3, [r4, #2612]
-.L419:
+.L426:
 	subs	r3, r5, #1
 	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L420
+	bls	.L427
 	ldrh	r2, [r4, #422]
 	mov	r1, r5
-	ldr	r0, .L423+4
+	ldr	r0, .L430+4
 	bl	sftl_printk
-.L421:
-	b	.L421
-.L422:
+.L428:
+	b	.L428
+.L429:
 	movw	r5, #65535
-	b	.L419
-.L420:
+	b	.L426
+.L427:
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L424:
+.L431:
 	.align	2
-.L423:
+.L430:
 	.word	.LANCHOR0
 	.word	.LC89
 	.fnend
@@ -3663,16 +3726,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	movs	r3, #0
 	ldr	r2, [r0, #12]
-.L426:
+.L433:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L429
+	bcs	.L436
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
 	adds	r2, r2, #2
 	cmp	r6, #0
-	bne	.L426
+	bne	.L433
 	bl	FtlFreeSysBlkQueueOut
 	subs	r3, r0, #1
 	movw	r2, #65533
@@ -3680,14 +3743,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L427
-	ldr	r3, .L433
-	ldr	r0, .L433+4
+	bls	.L434
+	ldr	r3, .L440
+	ldr	r0, .L440+4
 	ldrh	r2, [r3, #422]
 	bl	sftl_printk
-.L428:
-	b	.L428
-.L427:
+.L435:
+	b	.L435
+.L434:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -3696,20 +3759,20 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L429:
+.L436:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L431
+	bhi	.L438
 	movw	r2, #578
-	ldr	r1, .L433+8
-	ldr	r0, .L433+12
+	ldr	r1, .L440+8
+	ldr	r0, .L440+12
 	bl	sftl_printk
-.L431:
+.L438:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L434:
+.L441:
 	.align	2
-.L433:
+.L440:
 	.word	.LANCHOR0
 	.word	.LC90
 	.word	.LANCHOR1+147
@@ -3717,6 +3780,59 @@ ftl_map_blk_alloc_new_blk:
 	.fnend
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	1
+	.global	FlashGetBadBlockList
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r2, #256
+	ldr	r5, .L449
+	mov	r4, r0
+	mov	r6, r1
+	movs	r1, #255
+	bl	memset
+	ldr	r3, [r5, #3248]
+	mov	r1, r6
+	mov	r0, r4
+	blx	r3
+	uxth	r0, r0
+	cmp	r0, #50
+	bls	.L443
+	mov	r2, #256
+	movs	r1, #255
+	mov	r0, r4
+	bl	memset
+	movs	r0, #0
+.L443:
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	bne	.L448
+	add	r1, r4, r0, lsl #1
+	mov	r3, r4
+.L445:
+	cmp	r3, r1
+	bne	.L446
+.L448:
+	pop	{r4, r5, r6, pc}
+.L446:
+	ldrh	r2, [r3]
+	lsrs	r2, r2, #1
+	strh	r2, [r3], #2	@ movhi
+	b	.L445
+.L450:
+	.align	2
+.L449:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	1
 	.global	ftl_memset
 	.syntax unified
 	.thumb
@@ -3727,8 +3843,14 @@ ftl_memset:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memset
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	cbz	r2, .L452
+	bl	memset
+.L452:
+	mov	r0, r4
+	pop	{r4, pc}
 	.fnend
 	.size	ftl_memset, .-ftl_memset
 	.align	1
@@ -3745,7 +3867,7 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r3, #65535
-	ldr	r4, .L537
+	ldr	r4, .L557
 	movs	r5, #0
 	movs	r7, #12
 	movs	r6, #20
@@ -3862,7 +3984,7 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	r3, [r4, #3344]
 	str	r0, [r4, #3348]
-	ldr	r0, .L537+4
+	ldr	r0, .L557+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
@@ -3949,143 +4071,143 @@ FtlMemInit:
 	str	r0, [r4, #384]
 	lsls	r2, r2, #2
 	mov	r1, r2
-.L437:
+.L457:
 	cmp	r3, r6
-	bcc	.L438
-	ldr	r2, .L537+8
+	bcc	.L458
+	ldr	r2, .L557+8
 	movs	r1, #0
 	add	r3, r2, r3, lsl #2
 	adds	r2, r2, #56
 	adds	r3, r3, #24
-.L439:
+.L459:
 	cmp	r2, r3
-	bne	.L440
+	bne	.L460
 	ldr	r3, [r4, #3360]
-	cbnz	r3, .L441
-.L443:
-	ldr	r1, .L537+12
-	ldr	r0, .L537+16
+	cbnz	r3, .L461
+.L463:
+	ldr	r1, .L557+12
+	ldr	r0, .L557+16
 	bl	sftl_printk
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L438:
+.L458:
 	ldr	r0, [r4, #384]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r5, #4]!
-	b	.L437
-.L440:
+	b	.L457
+.L460:
 	str	r1, [r3, #4]!
-	b	.L439
-.L538:
+	b	.L459
+.L558:
 	.align	2
-.L537:
+.L557:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+356
 	.word	.LANCHOR1+173
 	.word	.LC91
-.L441:
+.L461:
 	ldr	r3, [r4, #3364]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3380]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3384]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #2544]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3388]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #2520]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #384]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #76]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3204]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3272]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3312]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3316]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3320]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3340]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3184]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #2540]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r4, #352]
 	cmp	r3, #0
-	beq	.L443
-	ldr	r3, .L539
+	beq	.L463
+	ldr	r3, .L559
 	ldr	r2, [r3, #3368]
 	cmp	r2, #0
-	beq	.L443
+	beq	.L463
 	ldr	r2, [r3, #3372]
 	cmp	r2, #0
-	beq	.L443
+	beq	.L463
 	ldr	r3, [r3, #3376]
 	cmp	r3, #0
-	beq	.L443
+	beq	.L463
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L540:
+.L560:
 	.align	2
-.L539:
+.L559:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMemInit, .-FtlMemInit
@@ -4103,30 +4225,30 @@ FtlBbt2Bitmap:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, r0
-	ldr	r6, .L547
+	ldr	r6, .L567
 	mov	r7, r1
 	subs	r4, r5, #2
 	movw	r8, #65535
-	ldr	r9, .L547+4
+	ldr	r9, .L567+4
 	addw	r5, r5, #1022
 	ldrh	r2, [r6, #3392]
 	movs	r1, #0
-	ldr	r10, .L547+8
+	ldr	r10, .L567+8
 	mov	r0, r7
 	lsls	r2, r2, #2
 	bl	ftl_memset
-.L544:
+.L564:
 	ldrh	r3, [r4, #2]
 	cmp	r3, r8
-	beq	.L541
+	beq	.L561
 	ldrh	r2, [r6, #302]
 	cmp	r2, r3
-	bhi	.L543
+	bhi	.L563
 	movs	r2, #74
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L543:
+.L563:
 	ldrh	r3, [r4, #2]!
 	movs	r2, #1
 	cmp	r5, r4
@@ -4136,76 +4258,18 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r2, r2, r3
 	str	r2, [r7, r1, lsl #2]
-	bne	.L544
-.L541:
+	bne	.L564
+.L561:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L548:
+.L568:
 	.align	2
-.L547:
+.L567:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+184
 	.word	.LC8
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	1
-	.global	FtlBbtMemInit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlBbtMemInit, %function
-FtlBbtMemInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r0, .L550
-	movw	r3, #65535
-	movs	r2, #16
-	movs	r1, #255
-	strh	r3, [r0, #356]	@ movhi
-	movs	r3, #0
-	strh	r3, [r0, #362]	@ movhi
-	add	r0, r0, #368
-	b	ftl_memset
-.L551:
-	.align	2
-.L550:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlBbtMemInit, .-FtlBbtMemInit
-	.align	1
-	.global	FtlFreeSysBlkQueueInit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlFreeSysBlkQueueInit, %function
-FtlFreeSysBlkQueueInit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L553
-	mov	r2, #2048
-	push	{r4, lr}
-	.save {r4, lr}
-	movs	r4, #0
-	mov	r1, r4
-	strh	r0, [r3, #416]	@ movhi
-	add	r0, r3, #424
-	strh	r4, [r3, #418]	@ movhi
-	strh	r4, [r3, #420]	@ movhi
-	strh	r4, [r3, #422]	@ movhi
-	bl	ftl_memset
-	mov	r0, r4
-	pop	{r4, pc}
-.L554:
-	.align	2
-.L553:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
-	.align	1
 	.global	ftl_free_no_use_map_blk
 	.syntax unified
 	.thumb
@@ -4228,12 +4292,12 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	movs	r3, #0
-.L556:
+.L570:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r3
 	cmp	r1, r2
-	bhi	.L560
-	ldr	r3, .L575
+	bhi	.L574
+	ldr	r3, .L589
 	movs	r6, #0
 	mov	r9, r6
 	mov	fp, r6
@@ -4241,73 +4305,73 @@ ftl_free_no_use_map_blk:
 	ldrh	r3, [r4]
 	strh	r2, [r5, r3, lsl #1]	@ movhi
 	ldrh	r10, [r5]
-.L561:
+.L575:
 	ldrh	r3, [r4, #10]
 	uxth	r1, r6
 	cmp	r3, r1
-	bhi	.L565
+	bhi	.L579
 	mov	r0, r9
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L560:
+.L574:
 	uxth	r2, r3
 	ldr	r1, [r6, r2, lsl #2]
 	movs	r2, #0
 	ubfx	r1, r1, #10, #16
-.L557:
+.L571:
 	ldrh	ip, [r4, #10]
 	uxth	r0, r2
 	cmp	ip, r0
-	bhi	.L559
+	bhi	.L573
 	adds	r3, r3, #1
-	b	.L556
-.L559:
+	b	.L570
+.L573:
 	uxth	r0, r2
 	ldrh	ip, [r7, r0, lsl #1]
 	cmp	ip, r1
-	bne	.L558
-	cbz	r1, .L558
+	bne	.L572
+	cbz	r1, .L572
 	ldrh	ip, [r5, r0, lsl #1]
 	add	ip, ip, #1
 	strh	ip, [r5, r0, lsl #1]	@ movhi
-.L558:
+.L572:
 	adds	r2, r2, #1
-	b	.L557
-.L565:
+	b	.L571
+.L579:
 	uxth	r2, r6
 	ldrh	r3, [r5, r2, lsl #1]
 	lsl	r8, r2, #1
 	cmp	r10, r3
-	bls	.L562
+	bls	.L576
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
-	cbnz	r0, .L563
-.L564:
+	cbnz	r0, .L577
+.L578:
 	adds	r6, r6, #1
-	b	.L561
-.L562:
+	b	.L575
+.L576:
 	cmp	r3, #0
-	bne	.L564
+	bne	.L578
 	ldrh	r0, [r7, r2, lsl #1]
 	add	r8, r8, r7
 	cmp	r0, #0
-	beq	.L564
-.L566:
+	beq	.L578
+.L580:
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	strh	fp, [r8]	@ movhi
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L564
-.L563:
+	b	.L578
+.L577:
 	mov	r9, r1
 	mov	r10, r3
 	cmp	r3, #0
-	beq	.L566
-	b	.L564
-.L576:
+	beq	.L580
+	b	.L578
+.L590:
 	.align	2
-.L575:
+.L589:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -4325,7 +4389,7 @@ FtlL2PDataInit:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L580
+	ldr	r4, .L594
 	movs	r6, #12
 	ldr	r2, [r4, #332]
 	ldr	r0, [r4, #3364]
@@ -4341,12 +4405,12 @@ FtlL2PDataInit:
 	mov	r3, r4
 	movw	r1, #65535
 	mov	r7, r2
-.L578:
+.L592:
 	ldrh	r4, [r3, #342]
 	uxth	r0, r2
 	adds	r5, r2, #1
 	cmp	r4, r0
-	bhi	.L579
+	bhi	.L593
 	ldr	r2, [r3, #332]
 	strh	r1, [r3, #3398]	@ movhi
 	strh	r1, [r3, #3396]	@ movhi
@@ -4366,7 +4430,7 @@ FtlL2PDataInit:
 	ldr	r2, [r3, #3380]
 	str	r2, [r3, #3420]
 	pop	{r3, r4, r5, r6, r7, pc}
-.L579:
+.L593:
 	uxth	r2, r2
 	ldr	r0, [r3, #2544]
 	mul	r4, r6, r2
@@ -4382,10 +4446,10 @@ FtlL2PDataInit:
 	add	r2, r2, r4
 	str	r2, [r0, #8]
 	mov	r2, r5
-	b	.L578
-.L581:
+	b	.L592
+.L595:
 	.align	2
-.L580:
+.L594:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
@@ -4403,7 +4467,7 @@ FtlVariablesInit:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r5, #0
-	ldr	r4, .L583
+	ldr	r4, .L597
 	movw	r3, #65535
 	mov	r1, r5
 	ldrh	r2, [r4, #324]
@@ -4426,21 +4490,19 @@ FtlVariablesInit:
 	ldr	r0, [r4, #3348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	mov	r1, r5
-	movs	r2, #48
 	addw	r0, r4, #2472
-	bl	ftl_memset
-	mov	r2, #512
-	mov	r1, r5
+	movs	r1, #48
+	bl	__memzero
 	addw	r0, r4, #2644
-	bl	ftl_memset
+	mov	r1, #512
+	bl	__memzero
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
 	mov	r0, r5
 	pop	{r3, r4, r5, pc}
-.L584:
+.L598:
 	.align	2
-.L583:
+.L597:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -4458,7 +4520,7 @@ SupperBlkListInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L596
+	ldr	r4, .L610
 	movs	r2, #6
 	mov	r9, r5
 	mov	r6, r5
@@ -4476,18 +4538,18 @@ SupperBlkListInit:
 	str	r5, [r4, #2528]
 	strh	r5, [r4, #2532]	@ movhi
 	strh	r5, [r4, #228]	@ movhi
-.L586:
+.L600:
 	ldrh	r3, [r4, #244]
 	uxth	r8, r5
 	cmp	r8, r3
-	bcs	.L593
+	bcs	.L607
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #236]
 	str	r3, [sp, #4]
 	movs	r3, #0
 	mov	r7, r3
-	b	.L594
-.L588:
+	b	.L608
+.L602:
 	ldrb	r0, [r10, r3]	@ zero_extendqisi2
 	mov	r1, r8
 	str	r2, [sp, #12]
@@ -4496,76 +4558,76 @@ SupperBlkListInit:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L587
+	cbnz	r0, .L601
 	ldr	r1, [sp, #4]
 	add	r7, r7, r1
 	uxth	r7, r7
-.L587:
+.L601:
 	adds	r3, r3, #1
-.L594:
+.L608:
 	uxth	r1, r3
 	cmp	r2, r1
-	bhi	.L588
+	bhi	.L602
 	uxth	r3, r5
-	cbz	r7, .L589
+	cbz	r7, .L603
 	mov	r1, r7
 	str	r3, [sp, #4]
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	ldr	r3, [sp, #4]
 	uxth	r7, r0
-.L590:
+.L604:
 	ldr	r1, [r4, #2520]
 	movs	r2, #6
 	mla	r2, r2, r3, r1
 	strh	r7, [r2, #4]	@ movhi
 	ldrh	r2, [r4, #28]
 	cmp	r2, r8
-	beq	.L591
+	beq	.L605
 	ldrh	r2, [r4, #80]
 	cmp	r2, r8
-	beq	.L591
+	beq	.L605
 	ldrh	r2, [r4, #128]
 	cmp	r2, r8
-	beq	.L591
+	beq	.L605
 	ldr	r2, [r4, #76]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L592
+	cbnz	r3, .L606
 	add	r9, r9, #1
 	mov	r0, r8
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-.L591:
+.L605:
 	adds	r5, r5, #1
-	b	.L586
-.L589:
+	b	.L600
+.L603:
 	ldr	r2, [r4, #76]
 	strh	fp, [r2, r3, lsl #1]	@ movhi
-	b	.L590
-.L592:
+	b	.L604
+.L606:
 	adds	r6, r6, #1
 	mov	r0, r8
 	uxth	r6, r6
 	bl	INSERT_DATA_LIST
-	b	.L591
-.L593:
+	b	.L605
+.L607:
 	strh	r6, [r4, #2532]	@ movhi
 	add	r6, r6, r9
 	cmp	r6, r3
 	strh	r9, [r4, #228]	@ movhi
-	ble	.L595
+	ble	.L609
 	movw	r2, #2210
-	ldr	r1, .L596+4
-	ldr	r0, .L596+8
+	ldr	r1, .L610+4
+	ldr	r0, .L610+8
 	bl	sftl_printk
-.L595:
+.L609:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L597:
+.L611:
 	.align	2
-.L596:
+.L610:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+198
 	.word	.LC8
@@ -4585,7 +4647,7 @@ FtlGcPageVarInit:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r3, #0
-	ldr	r4, .L599
+	ldr	r4, .L613
 	movs	r1, #255
 	ldrh	r2, [r4, #310]
 	ldr	r0, [r4, #3196]
@@ -4601,66 +4663,13 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	pop	{r4, lr}
 	b	FtlGcBufInit
-.L600:
+.L614:
 	.align	2
-.L599:
+.L613:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
 	.align	1
-	.global	FlashGetBadBlockList
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r2, #256
-	ldr	r5, .L608
-	mov	r4, r0
-	mov	r6, r1
-	movs	r1, #255
-	bl	ftl_memset
-	ldr	r3, [r5, #3248]
-	mov	r1, r6
-	mov	r0, r4
-	blx	r3
-	uxth	r0, r0
-	cmp	r0, #50
-	bls	.L602
-	mov	r2, #256
-	movs	r1, #255
-	mov	r0, r4
-	bl	ftl_memset
-	movs	r0, #0
-.L602:
-	ldrh	r3, [r5, #14]
-	cmp	r3, #4
-	bne	.L607
-	add	r1, r4, r0, lsl #1
-	mov	r3, r4
-.L604:
-	cmp	r3, r1
-	bne	.L605
-.L607:
-	pop	{r4, r5, r6, pc}
-.L605:
-	ldrh	r2, [r3]
-	lsrs	r2, r2, #1
-	strh	r2, [r3], #2	@ movhi
-	b	.L604
-.L609:
-	.align	2
-.L608:
-	.word	.LANCHOR0
-	.fnend
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
-	.align	1
 	.global	ftl_memcpy
 	.syntax unified
 	.thumb
@@ -4689,47 +4698,47 @@ FlashReadPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r1
-	ldr	r5, .L651
+	ldr	r5, .L656
 	mov	r4, r0
 	mov	r8, #0
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r10, .L651+16
-	ldr	fp, .L651+20
+	ldr	r10, .L656+16
+	ldr	fp, .L656+20
 	ldrh	r3, [r5, #12]
 	str	r3, [sp, #4]
-.L612:
+.L617:
 	cmp	r8, r9
-	bne	.L626
+	bne	.L631
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L626:
+.L631:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L613
+	cbz	r3, .L618
 	ldr	r3, [r4, #12]
-	cbnz	r3, .L614
-.L613:
+	cbnz	r3, .L619
+.L618:
 	movs	r2, #96
-	ldr	r1, .L651+4
+	ldr	r1, .L656+4
 	mov	r0, r10
 	bl	sftl_printk
-.L614:
+.L619:
 	add	r2, sp, #8
 	add	r1, sp, #12
 	mov	r0, r4
 	bl	l2p_addr_tran
 	ldr	r0, [sp, #8]
 	cmp	r0, #3
-	bls	.L615
+	bls	.L620
 	mov	r3, #-1
 	str	r3, [r4]
-.L616:
+.L621:
 	add	r8, r8, #1
 	adds	r4, r4, #20
-	b	.L612
-.L615:
+	b	.L617
+.L620:
 	ldr	r6, [r4, #8]
 	uxtb	r0, r0
 	ldr	r3, [r4, #12]
@@ -4743,7 +4752,7 @@ FlashReadPages:
 	str	r0, [r4]
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L619
+	bne	.L624
 	ldr	r0, [sp, #4]
 	add	r2, r6, #2048
 	ldr	r3, [r4, #12]
@@ -4754,66 +4763,66 @@ FlashReadPages:
 	ldrb	r0, [sp, #8]	@ zero_extendqisi2
 	blx	r7
 	adds	r1, r0, #1
-	beq	.L620
+	beq	.L625
 	ldr	r3, [r4, #12]
 	ldr	r2, [r3, #12]
 	adds	r2, r2, #1
-	bne	.L621
+	bne	.L626
 	ldr	r2, [r3, #8]
 	adds	r2, r2, #1
-	bne	.L621
+	bne	.L626
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L621
-.L620:
+	beq	.L626
+.L625:
 	mov	r3, #-1
 	str	r3, [r4]
-.L621:
+.L626:
 	ldr	r3, [r4]
 	adds	r3, r3, #1
-	beq	.L622
+	beq	.L627
 	cmp	r0, #256
 	it	eq
 	streq	r0, [r4]
-.L622:
+.L627:
 	ldr	r3, [r4]
 	adds	r2, r3, #1
-	beq	.L623
+	beq	.L628
 	cmp	r3, #256
-	bne	.L619
-.L623:
+	bne	.L624
+.L628:
 	ldr	r1, [r4, #4]
 	mov	r0, fp
 	ldr	r2, [sp, #12]
 	bl	sftl_printk
 	ldr	r1, [r4, #8]
-	cbz	r1, .L625
+	cbz	r1, .L630
 	movs	r3, #4
-	ldr	r0, .L651+8
+	ldr	r0, .L656+8
 	mov	r2, r3
 	bl	rknand_print_hex
-.L625:
+.L630:
 	ldr	r1, [r4, #12]
-	cbz	r1, .L619
+	cbz	r1, .L624
 	movs	r3, #4
-	ldr	r0, .L651+12
+	ldr	r0, .L656+12
 	mov	r2, r3
 	bl	rknand_print_hex
-.L619:
+.L624:
 	ldr	r3, [r5, #3324]
 	cmp	r6, r3
-	bne	.L616
+	bne	.L621
 	ldr	r0, [r4, #8]
 	cmp	r6, r0
-	beq	.L616
+	beq	.L621
 	ldrh	r2, [r5, #262]
 	mov	r1, r6
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-	b	.L616
-.L652:
+	b	.L621
+.L657:
 	.align	2
-.L651:
+.L656:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+216
 	.word	.LC93
@@ -4836,7 +4845,7 @@ FtlLoadFactoryBbt:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r6, #0
-	ldr	r4, .L663
+	ldr	r4, .L668
 	movw	r10, #61664
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #366
@@ -4844,23 +4853,23 @@ FtlLoadFactoryBbt:
 	add	r9, r4, #3456
 	str	r3, [r4, #3464]
 	str	r8, [r4, #3468]
-.L654:
+.L659:
 	ldrh	r3, [r4, #258]
 	cmp	r6, r3
-	bcc	.L659
+	bcc	.L664
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L659:
+.L664:
 	ldrh	r5, [r4, #302]
 	movw	r3, #65535
 	strh	r3, [r7, #2]!	@ movhi
-.L656:
+.L661:
 	ldrh	r3, [r4, #302]
 	subs	r5, r5, #1
 	uxth	r5, r5
 	sub	r2, r3, #16
 	cmp	r5, r2
-	ble	.L657
+	ble	.L662
 	mla	r3, r6, r3, r5
 	movs	r2, #1
 	mov	r1, r2
@@ -4870,17 +4879,17 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L656
+	beq	.L661
 	ldrh	r3, [r8]
 	cmp	r3, r10
-	bne	.L656
+	bne	.L661
 	strh	r5, [r7]	@ movhi
-.L657:
+.L662:
 	adds	r6, r6, #1
-	b	.L654
-.L664:
+	b	.L659
+.L669:
 	.align	2
-.L663:
+.L668:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
@@ -4895,7 +4904,7 @@ FtlGetLastWrittenPage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L676
+	ldr	r3, .L681
 	cmp	r1, #1
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
@@ -4921,17 +4930,17 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L668
+	bne	.L673
 	mov	r8, #0
-.L669:
+.L674:
 	cmp	r8, r5
-	ble	.L672
-.L668:
+	ble	.L677
+.L673:
 	mov	r0, r5
 	add	sp, sp, #88
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L672:
+.L677:
 	add	r3, r8, r5
 	mov	r2, r7
 	add	r3, r3, r3, lsr #31
@@ -4944,23 +4953,23 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	bne	.L670
+	bne	.L675
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	bne	.L670
+	bne	.L675
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L670
+	beq	.L675
 	subs	r4, r4, #1
 	sxth	r5, r4
-	b	.L669
-.L670:
+	b	.L674
+.L675:
 	adds	r4, r4, #1
 	sxth	r8, r4
-	b	.L669
-.L677:
+	b	.L674
+.L682:
 	.align	2
-.L676:
+.L681:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -4978,7 +4987,7 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L760
+	ldr	r4, .L765
 	mov	r1, r5
 	.pad #20
 	sub	sp, sp, #20
@@ -5006,12 +5015,12 @@ FtlScanSysBlk:
 	movs	r2, #16
 	movs	r1, #255
 	addw	r0, r4, #2628
-	bl	ftl_memset
+	bl	memset
 	ldrh	r8, [r4, #244]
-.L679:
+.L684:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r8
-	bls	.L721
+	bls	.L726
 	movs	r5, #0
 	ldrh	fp, [r4, #236]
 	ldr	r9, [r4, #3292]
@@ -5020,11 +5029,11 @@ FtlScanSysBlk:
 	mov	r10, #20
 	ldr	r2, [r4, #3184]
 	ldrh	r6, [r4, #316]
-	b	.L722
-.L682:
+	b	.L727
+.L687:
 	str	r3, [sp, #8]
 	mov	r1, r8
-	ldr	r3, .L760+4
+	ldr	r3, .L765+4
 	str	r2, [sp, #12]
 	ldrb	r0, [r3, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -5032,7 +5041,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L680
+	cbnz	r0, .L685
 	ldr	r1, [sp, #4]
 	mla	r0, r10, r7, r9
 	lsls	r1, r1, #10
@@ -5047,27 +5056,27 @@ FtlScanSysBlk:
 	bic	r1, r1, #3
 	add	r1, r1, r2
 	str	r1, [r0, #12]
-.L680:
+.L685:
 	adds	r5, r5, #1
-.L722:
+.L727:
 	uxth	r1, r5
 	cmp	fp, r1
-	bhi	.L682
-	cbnz	r7, .L683
-.L720:
+	bhi	.L687
+	cbnz	r7, .L688
+.L725:
 	add	r8, r8, #1
 	uxth	r8, r8
-	b	.L679
-.L683:
+	b	.L684
+.L688:
 	mov	r0, r9
 	mov	r9, #0
 	movs	r2, #1
 	mov	r1, r7
 	bl	FlashReadPages
-.L684:
+.L689:
 	uxth	r3, r9
 	cmp	r7, r3
-	bls	.L720
+	bls	.L725
 	movs	r3, #20
 	mul	r10, r3, r9
 	ldr	r3, [r4, #3292]
@@ -5077,10 +5086,10 @@ FtlScanSysBlk:
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #1
 	ubfx	r5, r5, #10, #16
-	bne	.L687
+	bne	.L692
 	mov	fp, #16
 	movw	r3, #65535
-.L689:
+.L694:
 	ldr	r0, [r4, #3292]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
@@ -5093,73 +5102,73 @@ FtlScanSysBlk:
 	ldrh	r2, [r6]
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
-	bne	.L686
+	bne	.L691
 	ldr	r3, [r4, #3292]
 	mov	r2, #-1
 	str	r2, [r3, r10]
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
-	bne	.L687
-.L688:
+	bne	.L692
+.L693:
 	movs	r1, #1
-	b	.L759
-.L686:
+	b	.L764
+.L691:
 	ldr	r2, [r4, #3292]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L687
+	bne	.L692
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L689
-	b	.L688
-.L687:
+	bne	.L694
+	b	.L693
+.L692:
 	ldr	r2, [r4, #2592]
 	ldr	r3, [r6, #4]
 	adds	r1, r2, #1
-	beq	.L690
+	beq	.L695
 	cmp	r2, r3
-	bhi	.L691
-.L690:
+	bhi	.L696
+.L695:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
 	strne	r2, [r4, #2592]
-.L691:
+.L696:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L693
-	bhi	.L694
+	beq	.L698
+	bhi	.L699
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L695
-.L692:
+	beq	.L700
+.L697:
 	add	r9, r9, #1
-	b	.L684
-.L694:
+	b	.L689
+.L699:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L696
+	beq	.L701
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L692
+	bne	.L697
 	movs	r1, #0
-.L759:
+.L764:
 	mov	r0, r5
 	bl	FtlFreeSysBlkQueueIn
-	b	.L692
-.L696:
+	b	.L697
+.L701:
 	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #332]
 	cmp	r2, r3
-	bls	.L698
+	bls	.L703
 	movw	r2, #1225
-	ldr	r1, .L760+8
-	ldr	r0, .L760+12
+	ldr	r1, .L765+8
+	ldr	r0, .L765+12
 	bl	sftl_printk
-.L698:
+.L703:
 	ldr	r1, [r4, #332]
 	ldrh	r0, [r4, #3440]
 	ldr	r10, [r4, #3384]
@@ -5169,58 +5178,58 @@ FtlScanSysBlk:
 	add	ip, ip, #-1
 	sxth	r3, r3
 	sxth	ip, ip
-.L699:
+.L704:
 	cmp	r3, ip
-	bgt	.L705
+	bgt	.L710
 	cmp	r3, #0
-	bge	.L737
-	b	.L692
-.L705:
+	bge	.L742
+	b	.L697
+.L710:
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	mov	lr, r2
 	ldr	r2, [r10, r3, lsl #2]
 	cmp	lr, r2
-	bls	.L700
+	bls	.L705
 	ldr	r2, [r10]
-	cbnz	r2, .L701
+	cbnz	r2, .L706
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #3440]	@ movhi
-.L701:
+.L706:
 	uxth	ip, r3
 	movs	r2, #0
-.L702:
+.L707:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L703
+	bhi	.L708
 	ldr	r2, [r4, #3384]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #3360]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	blt	.L692
+	blt	.L697
 	ldrh	r0, [r4, #3440]
 	ldr	r2, [r4, #332]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L692
-.L737:
+	bgt	.L697
+.L742:
 	ldr	r2, [r4, #3384]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
 	strh	r0, [r4, #3440]	@ movhi
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #3360]
-.L757:
+.L762:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	b	.L692
-.L703:
+	b	.L697
+.L708:
 	ldr	r0, [r4, #3384]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -5230,79 +5239,79 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L702
-.L700:
+	b	.L707
+.L705:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L699
-.L761:
+	b	.L704
+.L766:
 	.align	2
-.L760:
+.L765:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+264
 	.word	.LANCHOR1+231
 	.word	.LC8
-.L695:
+.L700:
 	ldrh	r2, [r4, #348]
 	ldrh	r3, [r4, #324]
 	cmp	r2, r3
-	bls	.L708
+	bls	.L713
 	movw	r2, #1266
-	ldr	r1, .L762
-	ldr	r0, .L762+4
+	ldr	r1, .L767
+	ldr	r0, .L767+4
 	bl	sftl_printk
-.L708:
+.L713:
 	ldrh	lr, [r4, #324]
 	ldrh	r0, [r4, #348]
 	ldr	r10, [r4, #3372]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
-.L709:
+.L714:
 	cmp	r3, ip
-	ble	.L714
+	ble	.L719
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	ldr	r1, [r10, r3, lsl #2]
 	cmp	r2, r1
-	bls	.L710
+	bls	.L715
 	ldr	r2, [r10]
-	cbnz	r2, .L711
+	cbnz	r2, .L716
 	cmp	lr, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #348]	@ movhi
-.L711:
+.L716:
 	uxth	ip, r3
 	movs	r2, #0
-.L712:
+.L717:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L713
+	bhi	.L718
 	ldr	r2, [r4, #3372]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #352]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-.L714:
+.L719:
 	cmp	r3, #0
-	blt	.L692
+	blt	.L697
 	ldrh	r2, [r4, #324]
 	ldrh	r1, [r4, #348]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L692
+	bgt	.L697
 	adds	r1, r1, #1
 	ldr	r2, [r4, #3372]
 	strh	r1, [r4, #348]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #352]
-	b	.L757
-.L713:
+	b	.L762
+.L718:
 	ldr	r0, [r4, #3372]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
@@ -5312,81 +5321,81 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L712
-.L710:
+	b	.L717
+.L715:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L709
-.L693:
+	b	.L714
+.L698:
 	ldrh	r1, [r4, #2628]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L716
+	bne	.L721
 	strh	r5, [r4, #2628]	@ movhi
-.L758:
+.L763:
 	str	r3, [r4, #2636]
-	b	.L692
-.L716:
+	b	.L697
+.L721:
 	ldrh	r0, [r4, #2632]
 	cmp	r0, r2
-	beq	.L717
+	beq	.L722
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L717:
+.L722:
 	ldr	r2, [r4, #2636]
 	ldr	r3, [r6, #4]
 	cmp	r2, r3
-	bcs	.L718
+	bcs	.L723
 	ldrh	r3, [r4, #2628]
 	strh	r5, [r4, #2628]	@ movhi
 	strh	r3, [r4, #2632]	@ movhi
 	ldr	r3, [r6, #4]
-	b	.L758
-.L718:
+	b	.L763
+.L723:
 	strh	r5, [r4, #2632]	@ movhi
-	b	.L692
-.L721:
+	b	.L697
+.L726:
 	ldr	r1, [r4, #3360]
 	ldrh	r3, [r1]
-	cbz	r3, .L723
-.L726:
+	cbz	r3, .L728
+.L731:
 	ldr	r1, [r4, #352]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L724
-.L725:
+	beq	.L729
+.L730:
 	ldrh	r2, [r4, #3440]
 	ldr	r3, [r4, #332]
 	cmp	r2, r3
-	bls	.L756
+	bls	.L761
 	movw	r2, #1391
-	ldr	r1, .L762
-	ldr	r0, .L762+4
+	ldr	r1, .L767
+	ldr	r0, .L767+4
 	bl	sftl_printk
-.L756:
+.L761:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L723:
+.L728:
 	ldrh	r2, [r4, #3440]
 	cmp	r2, #0
-	beq	.L726
+	beq	.L731
 	ldr	r0, [r4, #332]
-.L727:
+.L732:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L726
+	bcs	.L731
 	ldrh	r5, [r1, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r5, #0
-	beq	.L727
+	beq	.L732
 	mov	r3, r2
 	movs	r5, #0
-.L728:
+.L733:
 	ldr	r1, [r4, #332]
 	cmp	r3, r1
-	bcs	.L726
+	bcs	.L731
 	ldr	r1, [r4, #3360]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
@@ -5398,26 +5407,26 @@ FtlScanSysBlk:
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L728
-.L724:
+	b	.L733
+.L729:
 	ldrh	r3, [r4, #348]
 	cmp	r3, #0
-	beq	.L725
+	beq	.L730
 	ldrh	r0, [r4, #324]
-.L733:
+.L738:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	r5, r3
-	bge	.L725
+	bge	.L730
 	ldrh	r6, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	cmp	r6, #0
-	beq	.L733
+	beq	.L738
 	movs	r0, #0
-.L734:
+.L739:
 	ldrh	r2, [r4, #324]
 	cmp	r3, r2
-	bge	.L725
+	bge	.L730
 	ldr	r2, [r4, #352]
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
@@ -5429,10 +5438,10 @@ FtlScanSysBlk:
 	strh	r0, [r2, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L734
-.L763:
+	b	.L739
+.L768:
 	.align	2
-.L762:
+.L767:
 	.word	.LANCHOR1+231
 	.word	.LC8
 	.fnend
@@ -5451,7 +5460,7 @@ FtlLoadBbt:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r8, #61649
-	ldr	r4, .L793
+	ldr	r4, .L798
 	ldr	r3, [r4, #3304]
 	add	r7, r4, #3456
 	ldr	r6, [r4, #3336]
@@ -5461,11 +5470,11 @@ FtlLoadBbt:
 	ldrh	r5, [r4, #302]
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L765:
+.L770:
 	ldrh	r3, [r4, #302]
 	subs	r3, r3, #16
 	cmp	r5, r3
-	ble	.L768
+	ble	.L773
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -5474,7 +5483,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L766
+	bne	.L771
 	ldr	r3, [r4, #3460]
 	movs	r2, #1
 	mov	r1, r2
@@ -5482,50 +5491,50 @@ FtlLoadBbt:
 	adds	r3, r3, #1
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
-.L766:
+.L771:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L767
+	beq	.L772
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L767
+	bne	.L772
 	ldr	r3, [r6, #4]
 	strh	r5, [r4, #356]	@ movhi
 	str	r3, [r4, #364]
 	ldrh	r3, [r6, #8]
 	strh	r3, [r4, #360]	@ movhi
-.L768:
+.L773:
 	ldrh	r3, [r4, #356]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L782
+	beq	.L787
 	ldrh	r3, [r4, #360]
 	cmp	r3, r2
-	beq	.L772
+	beq	.L777
 	lsls	r3, r3, #10
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L793+4
+	ldr	r0, .L798+4
 	str	r3, [r4, #3460]
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L772
+	beq	.L777
 	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L772
+	bne	.L777
 	ldr	r3, [r6, #4]
 	ldr	r2, [r4, #364]
 	cmp	r3, r2
-	bls	.L772
+	bls	.L777
 	ldrh	r2, [r4, #360]
 	str	r3, [r4, #364]
 	ldrh	r3, [r6, #8]
 	strh	r2, [r4, #356]	@ movhi
 	strh	r3, [r4, #360]	@ movhi
-.L772:
-	ldr	r7, .L793+4
+.L777:
+	ldr	r7, .L798+4
 	movs	r1, #1
 	ldrh	r0, [r4, #356]
 	movw	r8, #61649
@@ -5533,44 +5542,44 @@ FtlLoadBbt:
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #358]	@ movhi
-.L774:
+.L779:
 	cmp	r5, #0
-	bge	.L777
+	bge	.L782
 	movs	r2, #251
-	ldr	r1, .L793+8
-	ldr	r0, .L793+12
+	ldr	r1, .L798+8
+	ldr	r0, .L798+12
 	bl	sftl_printk
-.L776:
+.L781:
 	ldrh	r3, [r6, #10]
 	ldrh	r0, [r6, #12]
 	strh	r3, [r4, #362]	@ movhi
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L779
+	beq	.L784
 	ldr	r2, [r4, #232]
 	cmp	r0, r2
-	beq	.L779
+	beq	.L784
 	ldrh	r3, [r4, #246]
 	lsrs	r3, r3, #2
 	cmp	r2, r3
-	bcs	.L779
+	bcs	.L784
 	cmp	r0, r3
-	bcs	.L779
+	bcs	.L784
 	bl	FtlSysBlkNumInit
-.L779:
-	ldr	r6, .L793+16
+.L784:
+	ldr	r6, .L798+16
 	movs	r5, #0
-.L780:
+.L785:
 	ldrh	r3, [r4, #258]
 	cmp	r5, r3
-	bcc	.L781
+	bcc	.L786
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L767:
+.L772:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L765
-.L777:
+	b	.L770
+.L782:
 	ldrh	r3, [r4, #356]
 	movs	r2, #1
 	mov	r1, r2
@@ -5582,15 +5591,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L775
+	beq	.L780
 	ldrh	r3, [r6]
 	cmp	r3, r8
-	beq	.L776
-.L775:
+	beq	.L781
+.L780:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L774
-.L781:
+	b	.L779
+.L786:
 	ldrh	r2, [r4, #3392]
 	ldr	r1, [r4, #3464]
 	ldr	r0, [r6, #4]!
@@ -5598,13 +5607,13 @@ FtlLoadBbt:
 	mla	r1, r5, r2, r1
 	adds	r5, r5, #1
 	bl	ftl_memcpy
-	b	.L780
-.L782:
+	b	.L785
+.L787:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L794:
+.L799:
 	.align	2
-.L793:
+.L798:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+245
@@ -5627,7 +5636,7 @@ FlashProgPages:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r6, .L834
+	ldr	r6, .L839
 	mov	fp, r1
 	mov	r4, r0
 	mov	r5, r0
@@ -5639,50 +5648,50 @@ FlashProgPages:
 	str	r3, [sp]
 	lsls	r3, r3, #3
 	str	r3, [sp, #4]
-.L796:
+.L801:
 	cmp	r10, fp
-	bne	.L810
+	bne	.L815
 	ldr	r3, [sp, #12]
 	cmp	r3, #0
-	beq	.L804
+	beq	.L809
 	movs	r5, #0
-	ldr	r7, .L834+4
-	ldr	r8, .L834+28
-	ldr	r9, .L834+32
-	b	.L811
-.L810:
+	ldr	r7, .L839+4
+	ldr	r8, .L839+28
+	ldr	r9, .L839+32
+	b	.L816
+.L815:
 	ldr	r3, [r5, #8]
-	cbz	r3, .L797
+	cbz	r3, .L802
 	ldr	r3, [r5, #12]
-	cbnz	r3, .L798
-.L797:
+	cbnz	r3, .L803
+.L802:
 	movs	r2, #148
-	ldr	r1, .L834+8
-	ldr	r0, .L834+12
+	ldr	r1, .L839+8
+	ldr	r0, .L839+12
 	bl	sftl_printk
-.L798:
+.L803:
 	add	r2, sp, #20
 	add	r1, sp, #24
 	mov	r0, r5
 	bl	l2p_addr_tran
 	ldr	r7, [sp, #20]
 	cmp	r7, #3
-	bls	.L799
-.L833:
+	bls	.L804
+.L838:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L800
-.L799:
-	cbnz	r7, .L801
+	b	.L805
+.L804:
+	cbnz	r7, .L806
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bls	.L801
-	ldr	r5, .L834+8
-	ldr	r6, .L834+16
-	ldr	r8, .L834+36
-	b	.L832
-.L803:
+	bls	.L806
+	ldr	r5, .L839+8
+	ldr	r6, .L839+16
+	ldr	r8, .L839+36
+	b	.L837
+.L808:
 	mov	r3, #-1
 	ldr	r2, [r4, #-16]
 	str	r3, [r4, #-20]
@@ -5698,42 +5707,42 @@ FlashProgPages:
 	movs	r3, #4
 	ldr	r1, [r4, #-8]
 	mov	r2, r3
-	ldr	r0, .L834+20
+	ldr	r0, .L839+20
 	bl	rknand_print_hex
-.L832:
+.L837:
 	cmp	r7, fp
 	add	r4, r4, #20
-	bne	.L803
+	bne	.L808
 	bl	dump_stack
-.L804:
+.L809:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L801:
+.L806:
 	ldr	r1, [r5, #8]
 	lsls	r3, r1, #26
-	beq	.L818
+	beq	.L823
 	ldr	r9, [r8, #3324]
 	cmp	r1, r9
-	beq	.L805
+	beq	.L810
 	ldrh	r2, [r8, #262]
 	mov	r0, r9
 	lsls	r2, r2, #9
 	bl	ftl_memcpy
-.L805:
+.L810:
 	ldr	r3, [r5, #12]
 	mov	r2, r9
 	ldr	r1, [sp, #24]
 	ldrb	r0, [sp, #20]	@ zero_extendqisi2
 	ldr	r7, [r8, #3256]
 	blx	r7
-	cbnz	r0, .L806
+	cbnz	r0, .L811
 	str	r0, [r5]
-.L807:
+.L812:
 	ldrh	r3, [r8, #14]
 	cmp	r3, #4
-	bne	.L800
+	bne	.L805
 	ldr	r0, [sp]
 	add	r2, r9, #2048
 	ldr	r3, [r5, #12]
@@ -5744,19 +5753,19 @@ FlashProgPages:
 	ldrb	r0, [sp, #20]	@ zero_extendqisi2
 	blx	r7
 	cmp	r0, #0
-	bne	.L833
-.L800:
+	bne	.L838
+.L805:
 	add	r10, r10, #1
 	adds	r5, r5, #20
-	b	.L796
-.L818:
+	b	.L801
+.L823:
 	mov	r9, r1
-	b	.L805
-.L806:
+	b	.L810
+.L811:
 	mov	r3, #-1
 	str	r3, [r5]
-	b	.L807
-.L816:
+	b	.L812
+.L821:
 	ldr	r2, [r6, #3324]
 	movs	r3, #0
 	movs	r1, #1
@@ -5774,55 +5783,55 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	fp, [sp, #28]
 	cmp	fp, #-1
-	bne	.L812
+	bne	.L817
 	ldr	r1, [r4, #4]
 	mov	r0, r7
 	bl	sftl_printk
 	str	fp, [r4]
-.L812:
+.L817:
 	ldr	fp, [sp, #28]
 	cmp	fp, #256
-	bne	.L813
+	bne	.L818
 	ldr	r1, [r4, #4]
 	mov	r0, r8
 	bl	sftl_printk
 	str	fp, [r4]
-.L813:
+.L818:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L814
+	cbz	r3, .L819
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3332]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L814
+	beq	.L819
 	ldr	r1, [r4, #4]
 	mov	r0, r9
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L814:
+.L819:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L815
+	cbz	r3, .L820
 	ldr	r2, [r3]
 	ldr	r3, [r6, #3324]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L815
+	beq	.L820
 	ldr	r1, [r4, #4]
-	ldr	r0, .L834+24
+	ldr	r0, .L839+24
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L815:
+.L820:
 	adds	r5, r5, #1
 	adds	r4, r4, #20
-.L811:
+.L816:
 	cmp	r10, r5
-	bne	.L816
-	b	.L804
-.L835:
+	bne	.L821
+	b	.L809
+.L840:
 	.align	2
-.L834:
+.L839:
 	.word	.LANCHOR0
 	.word	.LC95
 	.word	.LANCHOR1+256
@@ -5849,7 +5858,7 @@ FtlLowFormatEraseBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, #0
-	ldr	r4, .L881
+	ldr	r4, .L886
 	mov	r7, r1
 	mov	r6, r10
 	mov	r5, r10
@@ -5859,76 +5868,76 @@ FtlLowFormatEraseBlock:
 	mov	fp, r4
 	str	r0, [sp, #4]
 	str	r0, [r4, #3288]
-.L837:
+.L842:
 	ldrh	r1, [r4, #236]
 	uxth	r3, r10
 	cmp	r1, r3
-	bhi	.L842
+	bhi	.L847
 	cmp	r6, #0
-	beq	.L836
+	beq	.L841
 	mov	r8, #0
 	mov	r9, #20
 	mov	r2, r6
 	movs	r1, #0
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L845:
+.L850:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L847
+	bhi	.L852
 	cmp	r7, #0
-	beq	.L864
+	beq	.L869
 	ldrh	r3, [r4, #308]
 	mov	r10, #1
 	str	r3, [sp, #8]
-.L848:
+.L853:
 	mov	r8, #0
 	mov	fp, #20
-.L858:
+.L863:
 	mov	r9, #0
 	mov	r6, r9
-.L849:
+.L854:
 	ldrh	r1, [r4, #236]
 	uxth	r3, r9
 	cmp	r1, r3
-	bhi	.L853
-	cbz	r6, .L836
+	bhi	.L858
+	cbz	r6, .L841
 	mov	r9, #0
 	movs	r3, #1
 	mov	r2, r10
 	mov	r1, r6
 	ldr	r0, [r4, #3272]
 	bl	FlashProgPages
-.L855:
+.L860:
 	uxth	r3, r9
 	cmp	r6, r3
-	bhi	.L857
+	bhi	.L862
 	add	r8, r8, #1
 	ldr	r2, [sp, #8]
 	uxth	r3, r8
 	cmp	r2, r3
-	bhi	.L858
+	bhi	.L863
 	mov	r8, #0
 	mov	r9, #20
-.L859:
+.L864:
 	uxth	r3, r8
 	cmp	r6, r3
-	bhi	.L861
+	bhi	.L866
 	ldr	r3, [sp, #4]
 	cmp	r3, #63
-	bls	.L862
-	cbz	r7, .L836
-.L862:
+	bls	.L867
+	cbz	r7, .L841
+.L867:
 	mov	r2, r6
 	mov	r1, r10
 	ldr	r0, [r4, #3272]
 	bl	FlashEraseBlocks
-.L836:
+.L841:
 	mov	r0, r5
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L842:
+.L847:
 	uxth	r3, r10
 	ldr	r0, [r4, #3272]
 	movs	r2, #0
@@ -5939,13 +5948,13 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #264]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	cbz	r7, .L838
+	cbz	r7, .L843
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L839
-.L838:
+	cbnz	r0, .L844
+.L843:
 	mov	r0, r8
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L840
+	cbnz	r0, .L845
 	ldr	r1, [r4, #3272]
 	lsl	r3, r8, #10
 	ldr	r0, [fp, #3340]
@@ -5962,34 +5971,34 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L839:
+.L844:
 	add	r10, r10, #1
-	b	.L837
-.L840:
+	b	.L842
+.L845:
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L839
-.L847:
+	b	.L844
+.L852:
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
 	adds	r3, r3, #1
-	bne	.L846
+	bne	.L851
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L846:
+.L851:
 	add	r8, r8, #1
-	b	.L845
-.L864:
+	b	.L850
+.L869:
 	movs	r3, #2
 	mov	r10, r7
 	str	r3, [sp, #8]
-	b	.L848
-.L853:
+	b	.L853
+.L858:
 	uxth	r3, r9
 	ldr	r0, [r4, #3272]
 	movs	r2, #0
@@ -6000,16 +6009,16 @@ FtlLowFormatEraseBlock:
 	ldrb	r0, [r3, #264]	@ zero_extendqisi2
 	bl	V2P_block
 	str	r0, [sp, #12]
-	cbz	r7, .L850
+	cbz	r7, .L855
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L851
-.L850:
+	cbnz	r0, .L856
+.L855:
 	ldr	r0, [sp, #12]
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L851
+	cbnz	r0, .L856
 	ldr	r1, [r4, #3272]
 	ldr	r3, [sp, #12]
-	ldr	r2, .L881
+	ldr	r2, .L886
 	mla	r1, fp, r6, r1
 	ldr	r0, [r2, #3320]
 	add	r3, r8, r3, lsl #10
@@ -6025,40 +6034,40 @@ FtlLowFormatEraseBlock:
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	str	r3, [r1, #12]
-.L851:
+.L856:
 	add	r9, r9, #1
-	b	.L849
-.L857:
+	b	.L854
+.L862:
 	mul	r3, fp, r9
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbz	r3, .L856
+	cbz	r3, .L861
 	ldr	r0, [r1, #4]
 	adds	r5, r5, #1
 	uxth	r5, r5
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
-.L856:
-	add	r9, r9, #1
-	b	.L855
 .L861:
-	cbz	r7, .L860
+	add	r9, r9, #1
+	b	.L860
+.L866:
+	cbz	r7, .L865
 	mul	r3, r9, r8
 	ldr	r2, [r4, #3272]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbnz	r3, .L860
+	cbnz	r3, .L865
 	ldr	r0, [r1, #4]
 	movs	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L860:
+.L865:
 	add	r8, r8, #1
-	b	.L859
-.L882:
+	b	.L864
+.L887:
 	.align	2
-.L881:
+.L886:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
@@ -6079,23 +6088,22 @@ FlashTestBlk:
 	mov	r5, r0
 	.pad #92
 	sub	sp, sp, #92
-	bls	.L886
-	ldr	r4, .L888
+	bls	.L891
+	ldr	r3, .L893
 	add	r0, sp, #24
 	movs	r2, #32
 	movs	r1, #165
 	str	r0, [sp, #16]
 	lsls	r5, r5, #10
-	ldr	r3, [r4, #3328]
-	str	r3, [sp, #12]
-	bl	ftl_memset
-	movs	r2, #8
-	movs	r1, #90
-	ldr	r0, [r4, #3328]
-	bl	ftl_memset
+	ldr	r4, [r3, #3328]
+	str	r4, [sp, #12]
+	bl	memset
+	mov	r3, #1515870810
 	movs	r2, #1
-	add	r0, sp, #4
+	str	r3, [r4]	@ unaligned
 	mov	r1, r2
+	str	r3, [r4, #4]	@ unaligned
+	add	r0, sp, #4
 	str	r5, [sp, #8]
 	bl	FlashEraseBlocks
 	movs	r3, #1
@@ -6104,7 +6112,7 @@ FlashTestBlk:
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [sp, #4]
-	cbnz	r3, .L887
+	cbnz	r3, .L892
 	adds	r3, r5, #1
 	add	r0, sp, #4
 	str	r3, [sp, #8]
@@ -6117,26 +6125,26 @@ FlashTestBlk:
 	it	ne
 	movne	r4, #1
 	negs	r4, r4
-.L885:
+.L890:
 	movs	r2, #1
 	movs	r1, #0
 	add	r0, sp, #4
 	str	r5, [sp, #8]
 	bl	FlashEraseBlocks
-.L883:
+.L888:
 	mov	r0, r4
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, pc}
-.L887:
+.L892:
 	mov	r4, #-1
-	b	.L885
-.L886:
+	b	.L890
+.L891:
 	movs	r4, #0
-	b	.L883
-.L889:
+	b	.L888
+.L894:
 	.align	2
-.L888:
+.L893:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -6155,7 +6163,7 @@ FtlBbmTblFlush:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #8
 	movs	r5, #0
-	ldr	r4, .L902
+	ldr	r4, .L907
 	movs	r1, #0
 	ldr	r0, [r4, #3304]
 	add	r6, r4, #380
@@ -6164,19 +6172,19 @@ FtlBbmTblFlush:
 	str	r0, [r4, #3464]
 	str	r3, [r4, #3468]
 	bl	ftl_memset
-.L891:
+.L896:
 	ldrh	r3, [r4, #258]
 	cmp	r5, r3
-	blt	.L892
+	blt	.L897
 	ldr	r6, [r4, #3468]
 	movs	r2, #16
 	movs	r1, #255
-	ldr	r8, .L902+12
-	ldr	r9, .L902+16
+	ldr	r8, .L907+12
+	ldr	r9, .L907+16
 	movs	r5, #0
 	mov	r0, r6
 	mov	r7, r5
-	bl	ftl_memset
+	bl	memset
 	movw	r3, #61649
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #364]
@@ -6191,7 +6199,7 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #12]	@ movhi
 	ldr	r3, [r4, #2608]
 	strh	r3, [r6, #14]	@ movhi
-.L893:
+.L898:
 	ldr	r3, [r4, #3304]
 	mov	r10, #0
 	ldrh	r2, [r4, #358]
@@ -6211,7 +6219,7 @@ FtlBbmTblFlush:
 	ldrh	r2, [r4, #358]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L894
+	blt	.L899
 	ldr	r3, [r4, #364]
 	ldrh	r2, [r4, #356]
 	ldr	r0, [r4, #3272]
@@ -6229,7 +6237,7 @@ FtlBbmTblFlush:
 	str	r3, [r4, #3460]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-.L894:
+.L899:
 	movs	r3, #1
 	mov	r0, r9
 	mov	r2, r3
@@ -6240,21 +6248,21 @@ FtlBbmTblFlush:
 	strh	r3, [r4, #358]	@ movhi
 	ldr	r3, [r4, #3456]
 	adds	r2, r3, #1
-	bne	.L895
+	bne	.L900
 	adds	r5, r5, #1
 	ldr	r1, [r4, #3460]
 	uxth	r5, r5
-	ldr	r0, .L902+4
+	ldr	r0, .L907+4
 	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L893
+	bls	.L898
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L902+8
+	ldr	r0, .L907+8
 	bl	sftl_printk
+.L902:
+	b	.L902
 .L897:
-	b	.L897
-.L892:
 	ldrh	r2, [r4, #3392]
 	ldr	r3, [r4, #3464]
 	ldr	r1, [r6, #4]!
@@ -6263,23 +6271,23 @@ FtlBbmTblFlush:
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L891
-.L898:
+	b	.L896
+.L903:
 	movs	r7, #1
-	b	.L893
-.L895:
+	b	.L898
+.L900:
 	adds	r7, r7, #1
 	cmp	r7, #1
-	ble	.L898
+	ble	.L903
 	cmp	r3, #256
-	beq	.L893
+	beq	.L898
 	movs	r0, #0
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L903:
+.L908:
 	.align	2
-.L902:
+.L907:
 	.word	.LANCHOR0
 	.word	.LC100
 	.word	.LC101
@@ -6301,28 +6309,28 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L940
+	ldr	r4, .L945
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L940+20
-.L905:
-	ldr	r3, .L940
-	ldr	r2, .L940
+	ldr	r9, .L945+20
+.L910:
+	ldr	r3, .L945
+	ldr	r2, .L945
 	ldrh	r3, [r3, #228]
 	ldrh	r2, [r2, #2532]
 	add	r3, r3, r2
-	ldr	r2, .L940
+	ldr	r2, .L945
 	ldrh	r2, [r2, #244]
 	cmp	r3, r2
-	ble	.L906
+	ble	.L911
 	mov	r2, #2656
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L906:
-	ldr	r3, .L940+8
+.L911:
+	ldr	r3, .L945+8
 	cmp	r5, r3
-	bne	.L932
+	bne	.L937
 	ldrh	r3, [r4, #228]
 	ldr	r1, [r4, #3168]
 	mul	r2, r1, r3
@@ -6330,37 +6338,37 @@ allocate_data_superblock:
 	adds	r1, r1, #1
 	add	r1, r1, r2, lsr #2
 	uxth	r1, r1
-	cbz	r1, .L907
+	cbz	r1, .L912
 	subs	r1, r1, #1
 	uxth	r1, r1
-.L907:
-	ldr	r0, .L940+12
+.L912:
+	ldr	r0, .L945+12
 	bl	List_pop_index_node
 	ldrh	r3, [r4, #228]
 	mov	r6, r0
 	uxth	r8, r0
-	cbnz	r3, .L908
+	cbnz	r3, .L913
 	movw	r2, #2665
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L908:
+.L913:
 	ldrh	r3, [r4, #228]
 	subs	r3, r3, #1
 	strh	r3, [r4, #228]	@ movhi
 	ldrh	r3, [r4, #244]
 	cmp	r3, r8
-	bls	.L905
+	bls	.L910
 	ldr	r3, [r4, #76]
 	uxth	r6, r6
 	ldrh	r7, [r3, r6, lsl #1]
 	cmp	r7, #0
-	bne	.L905
+	bne	.L910
 	strh	r8, [r5]	@ movhi
 	mov	r0, r5
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L910
+	cbnz	r3, .L915
 	ldr	r3, [r4, #76]
 	movw	r2, #65535
 	mov	r0, r8
@@ -6371,27 +6379,27 @@ allocate_data_superblock:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L905
+	ble	.L910
 	movw	r2, #2679
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-	b	.L905
-.L932:
+	b	.L910
+.L937:
 	movs	r1, #0
-	b	.L907
-.L910:
+	b	.L912
+.L915:
 	ldrh	r2, [r4, #2532]
 	ldrh	r3, [r4, #228]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L912
+	ble	.L917
 	movw	r2, #2682
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L912:
+.L917:
 	ldr	r1, [r4, #3272]
 	mov	r10, #20
 	ldrh	r2, [r4, #236]
@@ -6401,34 +6409,34 @@ allocate_data_superblock:
 	mov	r3, r1
 	mla	r2, r10, r2, r1
 	str	r2, [sp, #4]
-.L913:
+.L918:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L915
-	cbnz	r7, .L916
+	bne	.L920
+	cbnz	r7, .L921
 	movw	r2, #2693
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L916:
+.L921:
 	ldrh	r3, [r4, #176]
 	cmp	r3, r8
-	bne	.L917
+	bne	.L922
 	movw	r2, #2695
 	mov	r1, r9
-	ldr	r0, .L940+4
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L917:
+.L922:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	ldr	r2, [r4, #2540]
 	cmp	r3, #0
-	bne	.L918
+	bne	.L923
 	ldrh	r3, [r2, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L919
+	beq	.L924
 	ldrh	r1, [r4, #296]
 	add	r3, r3, r1
-.L939:
+.L944:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	movs	r1, #0
 	ldr	r3, [r4, #2600]
@@ -6436,7 +6444,7 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2600]
 	bl	ftl_set_blk_mode
-.L921:
+.L926:
 	ldr	r3, [r4, #2540]
 	ldr	r2, [r4, #2616]
 	ldrh	r0, [r4, #296]
@@ -6453,17 +6461,17 @@ allocate_data_superblock:
 	ldr	r1, [r4, #3272]
 	str	r0, [r4, #2608]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L940+16
+	ldr	r0, .L945+16
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r2, #20
 	mla	r2, r2, r7, r1
 	adds	r3, r1, #4
 	adds	r2, r2, #24
-.L923:
+.L928:
 	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L924
+	bne	.L929
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
 	ldr	r0, [r4, #3272]
@@ -6471,42 +6479,42 @@ allocate_data_superblock:
 	bl	FlashEraseBlocks
 	mov	r3, r10
 	movs	r1, #20
-.L925:
+.L930:
 	uxth	r2, r10
 	cmp	r7, r2
-	bhi	.L927
+	bhi	.L932
 	cmp	r3, #0
-	ble	.L928
+	ble	.L933
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L928:
+.L933:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L929
+	bne	.L934
 	ldr	r3, [r4, #76]
 	movw	r2, #65535
 	strh	r2, [r3, r6, lsl #1]	@ movhi
-	b	.L905
-.L915:
+	b	.L910
+.L920:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
 	ldrh	r2, [r0], #2
 	cmp	r2, lr
-	beq	.L914
+	beq	.L919
 	mla	lr, r10, r7, r1
 	adds	r7, r7, #1
 	lsls	r2, r2, #10
 	uxth	r7, r7
 	str	r2, [lr, #4]
-.L914:
-	adds	r3, r3, #20
-	b	.L913
 .L919:
+	adds	r3, r3, #20
+	b	.L918
+.L924:
 	movs	r3, #2
-	b	.L939
-.L918:
+	b	.L944
+.L923:
 	ldrh	r3, [r2, r6, lsl #1]
 	mov	r0, r8
 	adds	r3, r3, #1
@@ -6515,19 +6523,19 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2604]
 	bl	ftl_set_blk_mode.part.6
-	b	.L921
-.L924:
+	b	.L926
+.L929:
 	ldr	r1, [r3, #-20]
 	ands	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L923
-.L927:
+	b	.L928
+.L932:
 	mul	r2, r1, r10
 	ldr	r0, [r4, #3272]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	adds	r0, r2, #1
-	bne	.L926
+	bne	.L931
 	ldr	r0, [ip, #4]
 	adds	r3, r3, #1
 	str	r1, [sp, #12]
@@ -6542,11 +6550,11 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
 	strb	r2, [r5, #7]
-.L926:
+.L931:
 	add	r10, r10, #1
 	add	fp, fp, #2
-	b	.L925
-.L929:
+	b	.L930
+.L934:
 	ldrh	r3, [r4, #306]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -6563,22 +6571,22 @@ allocate_data_superblock:
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #4]
-	cbz	r3, .L930
+	cbz	r3, .L935
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L931
-.L930:
+	cbnz	r3, .L936
+.L935:
 	movw	r2, #2748
-	ldr	r1, .L940+20
-	ldr	r0, .L940+4
+	ldr	r1, .L945+20
+	ldr	r0, .L945+4
 	bl	sftl_printk
-.L931:
+.L936:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L941:
+.L946:
 	.align	2
-.L940:
+.L945:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LANCHOR0+128
@@ -6601,65 +6609,65 @@ FtlGcFreeBadSuperBlk:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L954
+	ldr	r4, .L959
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L943
+	cbz	r3, .L948
 	movs	r7, #0
 	addw	r10, r4, #3212
-.L944:
+.L949:
 	ldrh	r2, [r4, #236]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L950
+	bhi	.L955
 	bl	FtlGcReFreshBadBlk
-.L943:
+.L948:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L950:
+.L955:
 	uxtah	r3, r4, r7
 	mov	r1, r8
 	mov	fp, #0
 	ldrb	r0, [r3, #264]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L945:
+.L950:
 	ldrh	r3, [r4, #3210]
 	uxth	r5, fp
 	cmp	r3, r5
-	bhi	.L949
+	bhi	.L954
 	adds	r7, r7, #1
-	b	.L944
-.L949:
+	b	.L949
+.L954:
 	uxth	r6, fp
 	add	r3, r4, r6, lsl #1
 	ldrh	r3, [r3, #3212]
 	cmp	r3, r9
-	bne	.L946
+	bne	.L951
 	mov	r1, r9
-	ldr	r0, .L954+4
+	ldr	r0, .L959+4
 	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [r4, #3210]
 	add	r3, r10, r6, lsl #1
-.L947:
+.L952:
 	cmp	r5, r1
-	bcc	.L948
+	bcc	.L953
 	subs	r1, r1, #1
 	strh	r1, [r4, #3210]	@ movhi
-.L946:
+.L951:
 	add	fp, fp, #1
-	b	.L945
-.L948:
+	b	.L950
+.L953:
 	ldrh	r0, [r3, #2]!
 	adds	r5, r5, #1
 	uxth	r5, r5
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L947
-.L955:
+	b	.L952
+.L960:
 	.align	2
-.L954:
+.L959:
 	.word	.LANCHOR0
 	.word	.LC102
 	.fnend
@@ -6678,11 +6686,11 @@ update_vpc_list:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L968
+	ldr	r4, .L973
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	bne	.L957
+	bne	.L962
 	ldrh	r3, [r4, #226]
 	cmp	r3, r0
 	itt	eq
@@ -6695,20 +6703,20 @@ update_vpc_list:
 	strheq	r3, [r4, #224]	@ movhi
 	ldrh	r3, [r4, #176]
 	cmp	r3, r0
-	bne	.L960
+	bne	.L965
 	movw	r3, #65535
 	strh	r3, [r4, #176]	@ movhi
-.L961:
+.L966:
 	mov	r1, r5
-	ldr	r0, .L968+4
+	ldr	r0, .L973+4
 	bl	List_remove_node
 	ldrh	r3, [r4, #2532]
-	cbnz	r3, .L963
+	cbnz	r3, .L968
 	movw	r2, #2824
-	ldr	r1, .L968+8
-	ldr	r0, .L968+12
+	ldr	r1, .L973+8
+	ldr	r0, .L973+12
 	bl	sftl_printk
-.L963:
+.L968:
 	ldrh	r3, [r4, #2532]
 	mov	r0, r5
 	subs	r3, r3, #1
@@ -6721,33 +6729,33 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #244]
 	cmp	r3, r2
-	ble	.L967
+	ble	.L972
 	movw	r2, #2827
-	ldr	r1, .L968+8
-	ldr	r0, .L968+12
+	ldr	r1, .L973+8
+	ldr	r0, .L973+12
 	bl	sftl_printk
-.L967:
+.L972:
 	movs	r0, #1
 	pop	{r3, r4, r5, pc}
-.L960:
+.L965:
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L966
+	beq	.L971
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L966
+	beq	.L971
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	bne	.L961
-.L966:
+	bne	.L966
+.L971:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L957:
+.L962:
 	bl	List_update_data_list
-	b	.L966
-.L969:
+	b	.L971
+.L974:
 	.align	2
-.L968:
+.L973:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2524
 	.word	.LANCHOR1+296
@@ -6770,42 +6778,42 @@ decrement_vpc_count:
 	.save {r4, r5, r6, lr}
 	cmp	r0, r3
 	mov	r4, r0
-	ldr	r5, .L979
-	beq	.L971
+	ldr	r5, .L984
+	beq	.L976
 	ldr	r3, [r5, #76]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L972
+	cbnz	r2, .L977
 	mov	r1, r0
-	ldr	r0, .L979+4
+	ldr	r0, .L984+4
 	bl	sftl_printk
 	ldr	r3, [r5, #76]
 	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L973
-.L977:
+	cbz	r6, .L978
+.L982:
 	movs	r6, #0
-.L970:
+.L975:
 	mov	r0, r6
 	pop	{r4, r5, r6, pc}
-.L973:
-	movw	r2, #2842
 .L978:
-	ldr	r1, .L979+8
-	ldr	r0, .L979+12
+	movw	r2, #2842
+.L983:
+	ldr	r1, .L984+8
+	ldr	r0, .L984+12
 	bl	sftl_printk
-	b	.L970
-.L972:
+	b	.L975
+.L977:
 	subs	r2, r2, #1
 	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L971:
+.L976:
 	ldrh	r0, [r5, #3442]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L975
+	bne	.L980
 	strh	r4, [r5, #3442]	@ movhi
-	b	.L977
-.L975:
+	b	.L982
+.L980:
 	cmp	r4, r0
-	beq	.L977
+	beq	.L982
 	bl	update_vpc_list
 	ldr	r2, [r5, #2520]
 	adds	r6, r0, #0
@@ -6815,20 +6823,20 @@ decrement_vpc_count:
 	strh	r4, [r5, #3442]	@ movhi
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L979+16
+	ldr	r3, .L984+16
 	muls	r3, r2, r3
 	ldr	r2, [r5, #76]
 	uxth	r1, r3
 	ldrh	r2, [r2, r1, lsl #1]
 	cmp	r2, #0
-	bne	.L970
+	bne	.L975
 	cmp	r4, r1
-	beq	.L970
+	beq	.L975
 	movw	r2, #2858
-	b	.L978
-.L980:
+	b	.L983
+.L985:
 	.align	2
-.L979:
+.L984:
 	.word	.LANCHOR0
 	.word	.LC103
 	.word	.LANCHOR1+312
@@ -6851,7 +6859,7 @@ FtlSuperblockPowerLostFix:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r5, .L994
+	ldr	r5, .L999
 	mov	r3, #-1
 	movs	r7, #0
 	movw	r1, #61589
@@ -6880,10 +6888,10 @@ FtlSuperblockPowerLostFix:
 	ite	eq
 	moveq	r8, #6
 	movne	r8, #7
-.L987:
+.L992:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L983
-.L984:
+	cbnz	r3, .L988
+.L989:
 	ldr	r2, [r5, #76]
 	ldrh	r1, [r4]
 	ldrh	r0, [r4, #4]
@@ -6898,12 +6906,12 @@ FtlSuperblockPowerLostFix:
 	add	sp, sp, #24
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L983:
+.L988:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	str	r0, [sp, #8]
 	adds	r0, r0, #1
-	beq	.L984
+	beq	.L989
 	ldr	r3, [r5, #2596]
 	movs	r1, #1
 	add	r0, sp, #4
@@ -6919,11 +6927,11 @@ FtlSuperblockPowerLostFix:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
 	subs	r8, r8, #1
-	bne	.L987
-	b	.L984
-.L995:
+	bne	.L992
+	b	.L989
+.L1000:
 	.align	2
-.L994:
+.L999:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
@@ -6941,47 +6949,47 @@ FtlMakeBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, #0
-	ldr	r9, .L1015+4
+	ldr	r9, .L1020+4
 	bl	FtlBbtMemInit
 	sub	r5, r9, #384
 	sub	r10, r9, #18
 	mov	r4, r5
 	bl	FtlLoadFactoryBbt
-.L997:
+.L1002:
 	ldrh	r3, [r5, #258]
 	cmp	r8, r3
-	bcc	.L1003
+	bcc	.L1008
 	movs	r5, #0
-.L1004:
+.L1009:
 	ldrh	r3, [r4, #318]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1005
+	bhi	.L1010
 	ldrh	r5, [r4, #368]
 	movw	r6, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L1006:
+.L1011:
 	ldrh	r3, [r4, #368]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L1010
+	ble	.L1015
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1007
+	beq	.L1012
 	mov	r0, r5
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1008
+	beq	.L1013
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-.L1007:
+.L1012:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L1006
-.L1003:
+	b	.L1011
+.L1008:
 	ldrh	r3, [r10, #2]!
 	movw	r2, #65535
 	ldr	r0, [r5, #3304]
@@ -6989,11 +6997,11 @@ FtlMakeBbt:
 	cmp	r3, r2
 	str	r0, [r5, #3464]
 	str	fp, [r5, #3468]
-	beq	.L998
+	beq	.L1003
 	ldrh	r7, [r5, #302]
 	movs	r2, #1
 	mov	r1, r2
-	ldr	r0, .L1015
+	ldr	r0, .L1020
 	mla	r7, r8, r7, r3
 	lsls	r3, r7, #10
 	str	r3, [r5, #3460]
@@ -7004,38 +7012,36 @@ FtlMakeBbt:
 	adds	r2, r2, #7
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
-.L999:
+.L1004:
 	uxth	r0, r7
 	add	r8, r8, #1
 	add	r9, r9, #4
 	bl	FtlBbmMapBadBlock
-	b	.L997
-.L998:
+	b	.L1002
+.L1003:
 	mov	r1, r8
 	bl	FlashGetBadBlockList
 	ldr	r1, [r9]
 	ldr	r0, [r5, #3464]
 	bl	FtlBbt2Bitmap
 	ldrh	r6, [r5, #302]
-.L1001:
+.L1006:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L1000:
+.L1005:
 	ldrh	r0, [r4, #302]
 	smlabb	r0, r0, r8, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L1001
-	movs	r2, #16
-	movs	r1, #0
-	strh	r6, [r10]	@ movhi
+	beq	.L1006
+	movs	r1, #16
 	ldr	r0, [r4, #3336]
-	bl	ftl_memset
-	mov	r2, #4096
-	movs	r1, #0
+	strh	r6, [r10]	@ movhi
+	bl	__memzero
+	mov	r1, #4096
 	ldr	r0, [r4, #3304]
-	bl	ftl_memset
+	bl	__memzero
 	movw	r3, #61664
 	strh	r3, [fp]	@ movhi
 	movs	r3, #0
@@ -7053,32 +7059,32 @@ FtlMakeBbt:
 	str	r3, [r4, #3460]
 	bl	ftl_memcpy
 	movs	r2, #1
-	ldr	r0, .L1015
+	ldr	r0, .L1020
 	mov	r1, r2
 	bl	FlashEraseBlocks
 	movs	r3, #1
-	ldr	r0, .L1015
+	ldr	r0, .L1020
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	bne	.L999
+	bne	.L1004
 	uxth	r0, r7
 	bl	FtlBbmMapBadBlock
-	b	.L1000
-.L1005:
+	b	.L1005
+.L1010:
 	bl	FtlBbmMapBadBlock
-	b	.L1004
-.L1008:
+	b	.L1009
+.L1013:
 	ldrh	r3, [r4, #356]
 	cmp	r3, r6
-	bne	.L1009
+	bne	.L1014
 	strh	r5, [r4, #356]	@ movhi
-	b	.L1007
-.L1009:
+	b	.L1012
+.L1014:
 	strh	r5, [r4, #360]	@ movhi
-.L1010:
+.L1015:
 	ldrh	r3, [r4, #356]
 	movs	r5, #0
 	ldr	r0, [r4, #3272]
@@ -7108,9 +7114,9 @@ FtlMakeBbt:
 	bl	FtlBbmTblFlush
 	mov	r0, r5
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1016:
+.L1021:
 	.align	2
-.L1015:
+.L1020:
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR0+384
 	.fnend
@@ -7141,25 +7147,25 @@ js_hash:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1021
+	ldr	r3, .L1026
 	add	r1, r1, r0
 	push	{r4, lr}
 	.save {r4, lr}
-.L1019:
+.L1024:
 	cmp	r0, r1
-	bne	.L1020
+	bne	.L1025
 	mov	r0, r3
 	pop	{r4, pc}
-.L1020:
+.L1025:
 	lsrs	r2, r3, #2
 	ldrb	r4, [r0], #1	@ zero_extendqisi2
 	add	r2, r2, r3, lsl #5
 	add	r2, r2, r4
 	eors	r3, r3, r2
-	b	.L1019
-.L1022:
+	b	.L1024
+.L1027:
 	.align	2
-.L1021:
+.L1026:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -7181,14 +7187,14 @@ Ftl_write_map_blk_to_last_page:
 	mov	r4, r0
 	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bne	.L1024
+	bne	.L1029
 	ldrh	r3, [r0, #8]
-	cbz	r3, .L1025
+	cbz	r3, .L1030
 	movw	r2, #641
-	ldr	r1, .L1033
-	ldr	r0, .L1033+4
+	ldr	r1, .L1038
+	ldr	r0, .L1038+4
 	bl	sftl_printk
-.L1025:
+.L1030:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
@@ -7200,14 +7206,14 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r3, [r4, #28]
 	adds	r3, r3, #1
 	str	r3, [r4, #28]
-.L1026:
+.L1031:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1024:
+.L1029:
 	ldrh	r7, [r5, r3, lsl #1]
 	movs	r1, #255
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1033+8
+	ldr	r5, .L1038+8
 	ldr	r8, [r0, #24]
 	orr	r3, r3, r7, lsl #10
 	ldr	r6, [r5, #3336]
@@ -7228,11 +7234,11 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	movs	r2, #0
 	mov	r3, r2
-.L1027:
+.L1032:
 	ldrh	r0, [r4, #6]
 	uxth	r1, r2
 	cmp	r0, r1
-	bhi	.L1029
+	bhi	.L1034
 	ldrh	r1, [r5, #314]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
@@ -7240,19 +7246,19 @@ Ftl_write_map_blk_to_last_page:
 	str	r0, [r6, #12]
 	movs	r3, #0
 	mov	r1, r2
-	ldr	r0, .L1033+12
+	ldr	r0, .L1038+12
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	mov	r0, r4
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-	b	.L1026
-.L1029:
+	b	.L1031
+.L1034:
 	uxth	r0, r2
 	ldr	r1, [r8, r0, lsl #2]
 	cmp	r7, r1, lsr #10
-	bne	.L1028
+	bne	.L1033
 	ldr	r1, [r5, #3304]
 	adds	r3, r3, #1
 	uxth	r3, r3
@@ -7261,12 +7267,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	r0, [r8, r0, lsl #2]
 	add	r1, r1, r3, lsl #3
 	str	r0, [r1, #4]
-.L1028:
+.L1033:
 	adds	r2, r2, #1
-	b	.L1027
-.L1034:
+	b	.L1032
+.L1039:
 	.align	2
-.L1033:
+.L1038:
 	.word	.LANCHOR1+332
 	.word	.LC8
 	.word	.LANCHOR0
@@ -7288,13 +7294,13 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r4, r0
-	ldr	r7, .L1059
+	ldr	r7, .L1064
 	mov	r8, r1
 	movs	r6, #0
-	ldr	r9, .L1059+20
+	ldr	r9, .L1064+20
 	mov	r5, r7
 	str	r2, [sp, #4]
-.L1036:
+.L1041:
 	ldr	r3, [r7, #2576]
 	adds	r3, r3, #1
 	str	r3, [r7, #2576]
@@ -7302,53 +7308,52 @@ FtlMapWritePage:
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1037
+	bge	.L1042
 	ldrh	r2, [r4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1038
-.L1037:
+	bne	.L1043
+.L1042:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1038:
+.L1043:
 	ldrh	r2, [r4]
 	ldr	r3, [r4, #12]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L1039
+	cbnz	r3, .L1044
 	mov	r2, #700
 	mov	r1, r9
-	ldr	r0, .L1059+4
+	ldr	r0, .L1064+4
 	bl	sftl_printk
-.L1039:
+.L1044:
 	ldrh	r2, [r4]
 	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bcc	.L1040
+	bcc	.L1045
 	movw	r2, #701
 	mov	r1, r9
-	ldr	r0, .L1059+4
+	ldr	r0, .L1064+4
 	bl	sftl_printk
-.L1040:
+.L1045:
 	ldrh	r2, [r4]
-	movs	r1, #0
+	movs	r1, #16
 	ldr	r3, [r4, #12]
 	ldr	r0, [r5, #3336]
 	ldrh	r10, [r3, r2, lsl #1]
-	ldrh	r2, [r4, #2]
-	ldr	r3, [sp, #4]
+	ldrh	r3, [r4, #2]
 	str	r0, [r5, #3468]
-	orr	r2, r2, r10, lsl #10
+	orr	r3, r3, r10, lsl #10
+	str	r3, [r5, #3460]
+	ldr	r3, [sp, #4]
 	str	r3, [r5, #3464]
-	str	r2, [r5, #3460]
-	movs	r2, #16
-	bl	ftl_memset
-	ldr	r2, [r4, #28]
+	bl	__memzero
+	ldr	r3, [r4, #28]
 	ldr	fp, [r5, #3468]
-	str	r2, [fp, #4]
+	str	r3, [fp, #4]
 	strh	r8, [fp, #8]	@ movhi
-	ldrh	r2, [r4, #4]
+	ldrh	r3, [r4, #4]
 	strh	r10, [fp, #2]	@ movhi
-	strh	r2, [fp]	@ movhi
+	strh	r3, [fp]	@ movhi
 	ldrh	r1, [r5, #314]
 	ldr	r0, [r5, #3464]
 	bl	js_hash
@@ -7356,7 +7361,7 @@ FtlMapWritePage:
 	str	r0, [fp, #12]
 	mov	r2, r3
 	mov	r1, r3
-	ldr	r0, .L1059+8
+	ldr	r0, .L1064+8
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
 	adds	r3, r3, #1
@@ -7364,10 +7369,10 @@ FtlMapWritePage:
 	strh	r3, [r4, #2]	@ movhi
 	ldr	r2, [r5, #3456]
 	adds	r1, r2, #1
-	bne	.L1041
+	bne	.L1046
 	ldr	r1, [r5, #3460]
 	adds	r6, r6, #1
-	ldr	r0, .L1059+12
+	ldr	r0, .L1064+12
 	uxth	r6, r6
 	bl	sftl_printk
 	ldrh	r3, [r4, #2]
@@ -7377,40 +7382,40 @@ FtlMapWritePage:
 	addls	r3, r3, #-1
 	strhls	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1043
+	bls	.L1048
 	mov	r2, r6
 	ldr	r1, [r5, #3460]
-	ldr	r0, .L1059+16
+	ldr	r0, .L1064+16
 	bl	sftl_printk
-.L1044:
-	b	.L1044
-.L1043:
+.L1049:
+	b	.L1049
+.L1048:
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1036
-.L1058:
-	b	.L1058
-.L1041:
+	beq	.L1041
+.L1063:
+	b	.L1063
+.L1046:
 	cmp	r3, #1
-	beq	.L1047
+	beq	.L1052
 	cmp	r2, #256
-	beq	.L1047
+	beq	.L1052
 	ldr	r0, [r4, #36]
-	cbz	r0, .L1048
-.L1047:
+	cbz	r0, .L1053
+.L1052:
 	movs	r3, #0
 	str	r3, [r4, #36]
-	b	.L1036
-.L1048:
+	b	.L1041
+.L1053:
 	ldr	r2, [r5, #3460]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, r8, lsl #2]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1060:
+.L1065:
 	.align	2
-.L1059:
+.L1064:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LANCHOR0+3456
@@ -7433,20 +7438,20 @@ load_l2p_region:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r6, r0
-	ldr	r4, .L1068
+	ldr	r4, .L1073
 	mov	r8, r1
 	ldrh	r3, [r4, #340]
 	cmp	r3, r0
-	bcs	.L1062
+	bcs	.L1067
 	movw	r2, #485
-	ldr	r1, .L1068+4
-	ldr	r0, .L1068+8
+	ldr	r1, .L1073+4
+	ldr	r0, .L1073+8
 	bl	sftl_printk
-.L1062:
+.L1067:
 	ldr	r3, [r4, #3380]
 	movs	r5, #12
 	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L1063
+	cbnz	r7, .L1068
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2544]
 	ldrh	r2, [r4, #314]
@@ -7459,14 +7464,14 @@ load_l2p_region:
 	ldr	r3, [r4, #2544]
 	add	r5, r5, r3
 	str	r7, [r5, #4]
-.L1064:
+.L1069:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1063:
+.L1068:
 	mul	r5, r5, r8
 	ldr	r3, [r4, #2544]
 	movs	r2, #1
-	ldr	r0, .L1068+12
+	ldr	r0, .L1073+12
 	mov	r1, r2
 	str	r7, [r4, #3460]
 	add	r3, r3, r5
@@ -7478,54 +7483,54 @@ load_l2p_region:
 	ldr	r8, [r4, #3468]
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1065
+	beq	.L1070
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1068+16
+	ldr	r0, .L1073+16
 	bl	sftl_printk
 	movs	r3, #4
 	ldr	r1, [r4, #3468]
 	mov	r2, r3
-	ldr	r0, .L1068+20
+	ldr	r0, .L1073+20
 	bl	rknand_print_hex
 	ldrh	r3, [r4, #340]
 	movs	r2, #4
 	ldr	r1, [r4, #3380]
-	ldr	r0, .L1068+24
+	ldr	r0, .L1073+24
 	bl	rknand_print_hex
-.L1066:
+.L1071:
 	ldrh	r3, [r8, #8]
 	cmp	r3, r6
-	beq	.L1067
+	beq	.L1072
 	mov	r2, #508
-	ldr	r1, .L1068+4
-	ldr	r0, .L1068+8
+	ldr	r1, .L1073+4
+	ldr	r0, .L1073+8
 	bl	sftl_printk
-.L1067:
+.L1072:
 	ldr	r3, [r4, #2544]
 	movs	r1, #0
 	adds	r2, r3, r5
 	str	r1, [r2, #4]
 	strh	r6, [r3, r5]	@ movhi
-	b	.L1064
-.L1065:
+	b	.L1069
+.L1070:
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	bne	.L1066
+	bne	.L1071
 	mov	r2, r7
 	mov	r1, r6
-	ldr	r0, .L1068+28
+	ldr	r0, .L1073+28
 	bl	sftl_printk
 	ldr	r3, [r4, #2544]
 	mov	r1, r6
-	ldr	r0, .L1068+32
+	ldr	r0, .L1073+32
 	add	r3, r3, r5
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	b	.L1066
-.L1069:
+	b	.L1071
+.L1074:
 	.align	2
-.L1068:
+.L1073:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+379
 	.word	.LC8
@@ -7557,16 +7562,16 @@ ftl_map_blk_gc:
 	bl	ftl_free_no_use_map_blk
 	ldrh	r3, [r4, #10]
 	ldrh	r2, [r4, #8]
-	ldr	r5, .L1086
+	ldr	r5, .L1091
 	subs	r3, r3, #5
 	cmp	r2, r3
-	blt	.L1071
+	blt	.L1076
 	uxth	r0, r0
 	ldrh	r9, [r6, r0, lsl #1]
 	cmp	r9, #0
-	beq	.L1071
+	beq	.L1076
 	ldr	r3, [r4, #32]
-	cbnz	r3, .L1071
+	cbnz	r3, .L1076
 	movs	r2, #1
 	str	r2, [r4, #32]
 	strh	r3, [r6, r0, lsl #1]	@ movhi
@@ -7576,43 +7581,43 @@ ftl_map_blk_gc:
 	strh	r3, [r4, #8]	@ movhi
 	ldrh	r3, [r5, #308]
 	cmp	r2, r3
-	bcc	.L1072
+	bcc	.L1077
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1072:
+.L1077:
 	movs	r6, #0
-.L1073:
+.L1078:
 	ldrh	r2, [r4, #6]
 	uxth	fp, r6
 	cmp	r2, fp
-	bhi	.L1080
+	bhi	.L1085
 	movs	r1, #1
 	mov	r0, r9
 	bl	FtlFreeSysBlkQueueIn
 	movs	r3, #0
 	str	r3, [r4, #32]
-.L1071:
+.L1076:
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #308]
 	cmp	r2, r3
-	bcc	.L1081
+	bcc	.L1086
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1081:
+.L1086:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1080:
+.L1085:
 	uxth	r7, r6
 	ldr	r2, [r10, r7, lsl #2]
 	add	r3, r10, r7, lsl #2
 	str	r3, [sp, #4]
 	cmp	r9, r2, lsr #10
-	bne	.L1074
+	bne	.L1079
 	ldr	r2, [r5, #3308]
 	ldr	r8, [r5, #3336]
-	ldr	r0, .L1086+4
+	ldr	r0, .L1091+4
 	str	r2, [r5, #3464]
 	str	r8, [r5, #3468]
 	ldr	r2, [r10, r7, lsl #2]
@@ -7622,39 +7627,39 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	beq	.L1075
+	beq	.L1080
 	movw	r2, #611
-	ldr	r1, .L1086+8
-	ldr	r0, .L1086+12
+	ldr	r1, .L1091+8
+	ldr	r0, .L1091+12
 	bl	sftl_printk
-.L1075:
+.L1080:
 	ldr	r2, [r5, #3456]
 	adds	r2, r2, #1
-	bne	.L1076
-.L1078:
+	bne	.L1081
+.L1083:
 	ldr	r2, [sp, #4]
 	movs	r3, #0
 	str	r3, [r2]
-.L1077:
-	b	.L1077
-.L1076:
+.L1082:
+	b	.L1082
+.L1081:
 	ldrh	r2, [r8, #8]
 	cmp	r2, fp
-	bne	.L1078
+	bne	.L1083
 	ldrh	r2, [r8]
 	ldrh	r3, [r4, #4]
 	cmp	r2, r3
-	bne	.L1078
+	bne	.L1083
 	ldr	r2, [r5, #3464]
 	mov	r1, r7
 	mov	r0, r4
 	bl	FtlMapWritePage
-.L1074:
+.L1079:
 	adds	r6, r6, #1
-	b	.L1073
-.L1087:
+	b	.L1078
+.L1092:
 	.align	2
-.L1086:
+.L1091:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+395
@@ -7675,7 +7680,7 @@ flush_l2p_region:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r4, #12
-	ldr	r5, .L1089
+	ldr	r5, .L1094
 	muls	r4, r0, r4
 	ldr	r3, [r5, #2544]
 	addw	r0, r5, #3396
@@ -7690,9 +7695,9 @@ flush_l2p_region:
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r3, r4, r5, pc}
-.L1090:
+.L1095:
 	.align	2
-.L1089:
+.L1094:
 	.word	.LANCHOR0
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
@@ -7710,21 +7715,21 @@ log2phys:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
-	ldr	r4, .L1104
+	ldr	r4, .L1109
 	mov	r5, r1
 	mov	r7, r2
 	ldr	r3, [r4, #2556]
 	ldrh	r10, [r4, #312]
 	cmp	r0, r3
-	bcc	.L1092
+	bcc	.L1097
 	movw	r2, #813
-	ldr	r1, .L1104+4
-	ldr	r0, .L1104+8
+	ldr	r1, .L1109+4
+	ldr	r0, .L1109+8
 	bl	sftl_printk
-.L1092:
+.L1097:
 	ldr	r3, [r4, #2556]
 	cmp	r9, r3
-	bcs	.L1093
+	bcs	.L1098
 	add	r10, r10, #7
 	ldrh	r2, [r4, #342]
 	lsr	r6, r9, r10
@@ -7732,10 +7737,10 @@ log2phys:
 	movs	r3, #0
 	uxth	r6, r6
 	mov	fp, #12
-.L1094:
+.L1099:
 	uxth	r8, r3
 	cmp	r8, r2
-	bcc	.L1099
+	bcc	.L1104
 	bl	select_l2p_ram_region
 	mul	fp, fp, r0
 	ldr	r3, [r4, #2544]
@@ -7744,54 +7749,54 @@ log2phys:
 	add	r2, r3, fp
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1100
+	beq	.L1105
 	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	bge	.L1100
+	bge	.L1105
 	bl	flush_l2p_region
-.L1100:
+.L1105:
 	mov	r1, r8
 	mov	r0, r6
 	bl	load_l2p_region
-	b	.L1096
-.L1093:
+	b	.L1101
+.L1098:
 	mov	r0, #-1
-	cbnz	r7, .L1091
+	cbnz	r7, .L1096
 	str	r0, [r5]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1099:
+.L1104:
 	adds	r3, r3, #1
 	mla	r0, fp, r3, r1
 	ldrh	r0, [r0, #-12]
 	cmp	r0, r6
-	bne	.L1094
-.L1096:
+	bne	.L1099
+.L1101:
 	movs	r0, #1
 	movs	r3, #12
 	lsl	r0, r0, r10
 	subs	r0, r0, #1
 	and	r0, r0, r9
 	uxth	r0, r0
-	cbnz	r7, .L1097
+	cbnz	r7, .L1102
 	ldr	r2, [r4, #2544]
 	mla	r3, r3, r8, r2
 	ldr	r3, [r3, #8]
 	ldr	r3, [r3, r0, lsl #2]
 	str	r3, [r5]
-.L1098:
+.L1103:
 	ldr	r2, [r4, #2544]
 	movs	r3, #12
 	mla	r8, r3, r8, r2
 	ldr	r3, [r8, #4]
 	adds	r2, r3, #1
-	beq	.L1102
+	beq	.L1107
 	adds	r3, r3, #1
 	str	r3, [r8, #4]
-.L1102:
+.L1107:
 	movs	r0, #0
-.L1091:
+.L1096:
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1097:
+.L1102:
 	mul	r3, r3, r8
 	ldr	r2, [r4, #2544]
 	ldr	r1, [r5]
@@ -7804,10 +7809,10 @@ log2phys:
 	ldr	r2, [r3, #4]
 	orr	r2, r2, #-2147483648
 	str	r2, [r3, #4]
-	b	.L1098
-.L1105:
+	b	.L1103
+.L1110:
 	.align	2
-.L1104:
+.L1109:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+410
 	.word	.LC8
@@ -7828,20 +7833,20 @@ FtlWriteDump_data:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r4, .L1124
+	ldr	r4, .L1129
 	ldrh	r2, [r4, #32]
 	cmp	r2, #0
-	beq	.L1107
+	beq	.L1112
 	ldrb	r3, [r4, #36]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1107
+	bne	.L1112
 	ldrb	r1, [r4, #35]	@ zero_extendqisi2
 	ldrh	r3, [r4, #306]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1107
+	beq	.L1112
 	ldrb	r7, [r4, #38]	@ zero_extendqisi2
-	cbnz	r7, .L1106
+	cbnz	r7, .L1111
 	ldr	r6, [r4, #2556]
 	mov	r2, r7
 	mov	r1, sp
@@ -7858,38 +7863,38 @@ FtlWriteDump_data:
 	str	r0, [sp, #12]
 	str	r5, [sp, #16]
 	str	r7, [r5, #4]
-	beq	.L1109
+	beq	.L1114
 	mov	r2, r7
 	movs	r1, #1
 	add	r0, sp, #4
 	bl	FlashReadPages
-.L1110:
-	ldr	r9, .L1124+4
+.L1115:
+	ldr	r9, .L1129+4
 	movs	r7, #0
 	lsl	r8, r8, #2
 	mov	r10, r7
 	movw	r3, #61589
 	strh	r3, [r5]	@ movhi
-.L1111:
+.L1116:
 	cmp	r8, r7
-	bne	.L1115
-.L1112:
+	bne	.L1120
+.L1117:
 	movs	r3, #1
-.L1123:
+.L1128:
 	strb	r3, [r4, #38]
-.L1106:
+.L1111:
 	add	sp, sp, #24
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1109:
+.L1114:
 	ldrh	r2, [r4, #314]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1110
-.L1115:
+	b	.L1115
+.L1120:
 	ldrh	r3, [r4, #32]
 	cmp	r3, #0
-	beq	.L1112
+	beq	.L1117
 	ldr	r3, [sp, #8]
 	mov	r0, r9
 	str	r6, [r5, #8]
@@ -7913,13 +7918,13 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	r0, [r4, #28]
 	bl	decrement_vpc_count
-	b	.L1111
-.L1107:
+	b	.L1116
+.L1112:
 	movs	r3, #0
-	b	.L1123
-.L1125:
+	b	.L1128
+.L1130:
 	.align	2
-.L1124:
+.L1129:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+28
 	.fnend
@@ -7939,41 +7944,41 @@ FtlReUsePrevPpa:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r6, r0
-	ldr	r5, .L1136
+	ldr	r5, .L1141
 	ubfx	r0, r1, #10, #16
 	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
 	ldr	r2, [r5, #76]
 	mov	r7, r0
 	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L1127
+	cbnz	r3, .L1132
 	ldr	r4, [r5, #2536]
-	cbz	r4, .L1128
+	cbz	r4, .L1133
 	ldr	r1, [r5, #2520]
 	mov	ip, #6
-	ldr	r2, .L1136+4
+	ldr	r2, .L1141+4
 	movw	lr, #65535
 	ldrh	r0, [r5, #228]
 	subs	r4, r4, r1
 	asrs	r4, r4, #1
 	muls	r4, r2, r4
 	uxth	r4, r4
-.L1129:
+.L1134:
 	uxth	r2, r3
 	cmp	r0, r2
-	bls	.L1128
+	bls	.L1133
 	cmp	r4, r7
-	bne	.L1130
+	bne	.L1135
 	mov	r1, r4
-	ldr	r0, .L1136+8
+	ldr	r0, .L1141+8
 	bl	List_remove_node
 	ldrh	r3, [r5, #228]
-	cbnz	r3, .L1131
+	cbnz	r3, .L1136
 	movw	r2, #1733
-	ldr	r1, .L1136+12
-	ldr	r0, .L1136+16
+	ldr	r1, .L1141+12
+	ldr	r0, .L1141+16
 	bl	sftl_printk
-.L1131:
+.L1136:
 	ldrh	r3, [r5, #228]
 	mov	r0, r4
 	subs	r3, r3, #1
@@ -7981,17 +7986,17 @@ FtlReUsePrevPpa:
 	bl	INSERT_DATA_LIST
 	ldr	r2, [r5, #76]
 	ldrh	r3, [r2, r7, lsl #1]
-.L1127:
+.L1132:
 	adds	r3, r3, #1
 	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L1128
-.L1130:
+	b	.L1133
+.L1135:
 	mul	r4, ip, r4
 	adds	r3, r3, #1
 	ldrh	r4, [r1, r4]
 	cmp	r4, lr
-	bne	.L1129
-.L1128:
+	bne	.L1134
+.L1133:
 	movs	r2, #1
 	add	r1, sp, #4
 	mov	r0, r6
@@ -7999,9 +8004,9 @@ FtlReUsePrevPpa:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L1137:
+.L1142:
 	.align	2
-.L1136:
+.L1141:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.word	.LANCHOR0+2536
@@ -8028,9 +8033,9 @@ FtlRecoverySuperblock:
 	sub	sp, sp, #52
 	mov	r10, r0
 	cmp	r3, r2
-	beq	.L1266
+	beq	.L1271
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1274
+	ldr	r4, .L1279
 	str	r3, [sp]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [sp]
@@ -8038,27 +8043,27 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r4, #306]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1141
+	bne	.L1146
 	strh	r3, [r0, #4]	@ movhi
-.L1272:
+.L1277:
 	strb	r3, [r10, #6]
-.L1266:
+.L1271:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1141:
+.L1146:
 	ldrh	r0, [r0, #16]
-.L1142:
+.L1147:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1143
+	beq	.L1148
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
 	mov	r5, r0
-	beq	.L1144
+	beq	.L1149
 	ldr	r3, [r4, #3180]
 	movs	r2, #0
 	ldrh	fp, [r4, #236]
@@ -8074,11 +8079,11 @@ FtlRecoverySuperblock:
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [sp, #16]
-.L1145:
+.L1150:
 	uxth	r3, r2
 	cmp	fp, r3
-	bhi	.L1151
-	ldr	r6, .L1274
+	bhi	.L1156
+	ldr	r6, .L1279
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
@@ -8090,15 +8095,15 @@ FtlRecoverySuperblock:
 	add	fp, r3, #-1
 	movs	r3, #0
 	mov	r7, r8
-.L1152:
+.L1157:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1157
-	bne	.L1155
+	bhi	.L1162
+	bne	.L1160
 	adds	r3, r5, #1
 	uxth	r3, r3
 	str	r3, [sp, #8]
-.L1267:
+.L1272:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -8106,56 +8111,56 @@ FtlRecoverySuperblock:
 	ldr	r2, [sp, #8]
 	str	r0, [sp, #4]
 	cmp	r3, r2
-	bne	.L1159
+	bne	.L1164
 	ldrh	r3, [sp, #8]
 	strh	r3, [r10, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [r10, #6]
 	strh	r3, [r10, #4]	@ movhi
-.L1159:
+.L1164:
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp]
 	cmp	r3, r2
-	bne	.L1160
+	bne	.L1165
 	ldr	r3, [sp, #4]
 	ldr	r2, [sp, #20]
 	cmp	r3, r2
-	bne	.L1160
+	bne	.L1165
 	ldr	r1, [sp, #8]
 	mov	r2, r3
-.L1273:
+.L1278:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1266
-.L1143:
+	b	.L1271
+.L1148:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [r10, r1, lsl #1]
-	b	.L1142
-.L1144:
+	b	.L1147
+.L1149:
 	ldr	r3, [sp]
-	cbz	r3, .L1146
+	cbz	r3, .L1151
 	mov	r2, #1800
-	ldr	r1, .L1274+4
-	ldr	r0, .L1274+8
+	ldr	r1, .L1279+4
+	ldr	r0, .L1279+8
 	bl	sftl_printk
-.L1146:
+.L1151:
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1147
+	cbz	r3, .L1152
 	cmp	r6, r3
-	beq	.L1147
+	beq	.L1152
 	movw	r2, #1801
-	ldr	r1, .L1274+4
-	ldr	r0, .L1274+8
+	ldr	r1, .L1279+4
+	ldr	r0, .L1279+8
 	bl	sftl_printk
-.L1147:
+.L1152:
 	movs	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1272
-.L1151:
+	b	.L1277
+.L1156:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1148
+	beq	.L1153
 	mla	r1, lr, r4, r0
 	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
@@ -8177,49 +8182,49 @@ FtlRecoverySuperblock:
 	str	r6, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1148:
+.L1153:
 	adds	r2, r2, #1
-	b	.L1145
-.L1157:
+	b	.L1150
+.L1162:
 	ldr	r2, [r7]
-	cbnz	r2, .L1153
+	cbnz	r2, .L1158
 	ldr	r2, [r7, #12]
 	str	r2, [sp, #4]
 	ldr	r2, [r2, #4]
 	adds	r0, r2, #1
-	beq	.L1154
+	beq	.L1159
 	ldr	r1, [r6, #2596]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1154
+	cbz	r0, .L1159
 	adds	r2, r2, #1
 	str	r2, [r6, #2596]
-.L1154:
+.L1159:
 	ldr	r2, [sp, #4]
 	ldr	r2, [r2]
 	adds	r2, r2, #1
-	bne	.L1156
-.L1155:
+	bne	.L1161
+.L1160:
 	uxth	r2, r5
 	uxth	r3, r3
 	str	r2, [sp, #8]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1267
-.L1153:
+	b	.L1272
+.L1158:
 	ldr	r9, [sp, #8]
-.L1156:
+.L1161:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1152
-.L1160:
+	b	.L1157
+.L1165:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1161
+	bne	.L1166
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1162
-.L1161:
+	bne	.L1167
+.L1166:
 	ldr	r3, [r6, #3452]
 	uxth	r7, r5
 	uxth	r5, r5
@@ -8228,74 +8233,74 @@ FtlRecoverySuperblock:
 	ldr	r3, [sp]
 	it	eq
 	streq	fp, [r6, #3452]
-	ldr	r6, .L1274
+	ldr	r6, .L1279
 	adds	r3, r3, #7
 	cmp	r5, r3
 	itet	gt
 	subgt	r4, r7, #7
 	ldrle	r4, [sp]
 	uxthgt	r4, r4
-.L1165:
+.L1170:
 	cmp	r4, r7
-	bhi	.L1172
+	bhi	.L1177
 	movs	r3, #0
 	ldrh	lr, [r6, #236]
 	ldr	r0, [r6, #3292]
 	mov	r5, r3
 	ldr	r1, [sp, #16]
 	mov	ip, #20
-	b	.L1173
-.L1167:
+	b	.L1178
+.L1172:
 	ldrh	r2, [r1], #2
 	cmp	r2, r8
-	beq	.L1166
+	beq	.L1171
 	mla	r9, ip, r5, r0
 	adds	r5, r5, #1
 	orr	r2, r4, r2, lsl #10
 	uxth	r5, r5
 	str	r2, [r9, #4]
-.L1166:
+.L1171:
 	adds	r3, r3, #1
-.L1173:
+.L1178:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L1167
+	bhi	.L1172
 	movs	r2, #0
 	mov	r1, r5
 	bl	FlashReadPages
 	ldr	r3, [r6, #3292]
 	movs	r2, #20
 	mla	r5, r2, r5, r3
-.L1168:
+.L1173:
 	cmp	r5, r3
-	bne	.L1171
+	bne	.L1176
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1165
-.L1171:
+	b	.L1170
+.L1176:
 	ldr	r2, [r3]
-	cbnz	r2, .L1162
+	cbnz	r2, .L1167
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
 	cmp	r1, r8
-	beq	.L1170
+	beq	.L1175
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
 	strne	r2, [r6, #3452]
-.L1170:
+.L1175:
 	adds	r3, r3, #20
-	b	.L1168
-.L1172:
+	b	.L1173
+.L1177:
 	mov	r3, #-1
 	str	r3, [r6, #3452]
-.L1162:
-	ldr	r8, .L1274
+.L1167:
+	ldr	r8, .L1279
 	movs	r3, #1
 	ldr	r5, [sp]
 	mov	r4, r8
 	strh	r3, [r8, #3476]	@ movhi
-.L1174:
+.L1179:
 	ldrh	r6, [r4, #236]
 	movw	r9, #65535
 	ldr	r0, [r4, #3292]
@@ -8303,46 +8308,46 @@ FtlRecoverySuperblock:
 	ldr	r1, [sp, #16]
 	movs	r3, #0
 	str	r3, [sp, #12]
-.L1175:
+.L1180:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1177
+	bhi	.L1182
 	movs	r2, #0
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
 	movs	r3, #0
-.L1271:
+.L1276:
 	str	r3, [sp, #24]
 	ldr	r2, [sp, #12]
 	ldrh	r3, [sp, #24]
 	cmp	r2, r3
-	bhi	.L1207
+	bhi	.L1212
 	adds	r5, r5, #1
 	ldrh	r3, [r4, #306]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1174
+	bne	.L1179
 	ldrh	r2, [r4, #236]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1208:
+.L1213:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1266
+	bcs	.L1271
 	ldr	r1, [sp, #16]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
 	str	r1, [sp, #16]
 	add	r1, r3, #1
-	bne	.L1272
+	bne	.L1277
 	mov	r3, r1
-	b	.L1208
-.L1177:
+	b	.L1213
+.L1182:
 	ldrh	r2, [r1], #2
 	cmp	r2, r9
-	beq	.L1176
+	beq	.L1181
 	ldr	r7, [sp, #12]
 	orr	r2, r5, r2, lsl #10
 	mla	lr, ip, r7, r0
@@ -8351,16 +8356,16 @@ FtlRecoverySuperblock:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1176:
+.L1181:
 	adds	r3, r3, #1
-	b	.L1175
-.L1275:
+	b	.L1180
+.L1280:
 	.align	2
-.L1274:
+.L1279:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+435
 	.word	.LC8
-.L1207:
+.L1212:
 	ldr	r3, [sp, #24]
 	movs	r7, #20
 	muls	r7, r3, r7
@@ -8373,52 +8378,52 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp]
 	cmp	r5, r3
-	bcc	.L1179
+	bcc	.L1184
 	ldr	r3, [sp, #28]
-	bne	.L1180
+	bne	.L1185
 	ldr	r2, [sp, #20]
 	cmp	r2, r0
-	bhi	.L1179
-.L1180:
+	bhi	.L1184
+.L1185:
 	ldr	r2, [sp, #8]
 	cmp	r5, r2
-	bne	.L1181
+	bne	.L1186
 	ldr	r2, [sp, #4]
 	cmp	r2, r0
-	beq	.L1182
-.L1181:
+	beq	.L1187
+.L1186:
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1183
+	beq	.L1188
 	ldr	r9, [r9, #12]
 	movw	r3, #61589
 	ldrh	r2, [r9]
 	cmp	r2, r3
-	beq	.L1184
+	beq	.L1189
 	ldrh	r0, [r10]
-.L1268:
+.L1273:
 	bl	decrement_vpc_count
-	b	.L1179
-.L1184:
+	b	.L1184
+.L1189:
 	ldr	fp, [r9, #4]
 	cmp	fp, #-1
-	beq	.L1185
+	beq	.L1190
 	ldr	r1, [r4, #2596]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1185
+	cbz	r0, .L1190
 	add	r3, fp, #1
 	str	r3, [r4, #2596]
-.L1185:
+.L1190:
 	ldrh	r2, [r9]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1186
+	beq	.L1191
 	mov	r2, #1952
-	ldr	r1, .L1276
-	ldr	r0, .L1276+4
+	ldr	r1, .L1281
+	ldr	r0, .L1281+4
 	bl	sftl_printk
-.L1186:
+.L1191:
 	ldr	r6, [r9, #8]
 	add	r1, sp, #40
 	ldr	r3, [r9, #12]
@@ -8428,14 +8433,14 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	ldr	r1, [r4, #3452]
 	adds	r0, r1, #1
-	beq	.L1187
+	beq	.L1192
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1187
+	beq	.L1192
 	ldr	r3, [sp, #36]
 	adds	r2, r3, #1
-	beq	.L1188
+	beq	.L1193
 	ldr	r0, [r4, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8447,134 +8452,134 @@ FtlRecoverySuperblock:
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1189
-.L1190:
+	bne	.L1194
+.L1195:
 	mov	r3, #-1
 	str	r3, [sp, #36]
-.L1197:
+.L1202:
 	ldr	r0, [sp, #36]
 	adds	r1, r0, #1
-	beq	.L1179
-.L1211:
+	beq	.L1184
+.L1216:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #244]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1203
+	bhi	.L1208
 	movw	r2, #2057
-	ldr	r1, .L1276
-	ldr	r0, .L1276+4
+	ldr	r1, .L1281
+	ldr	r0, .L1281+4
 	bl	sftl_printk
-.L1203:
+.L1208:
 	ldr	r3, [r8, #76]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1204
+	beq	.L1209
 	mov	r0, r6
-	b	.L1268
-.L1188:
+	b	.L1273
+.L1193:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	bne	.L1179
+	bne	.L1184
 	movs	r2, #1
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-.L1179:
+.L1184:
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
-	b	.L1271
-.L1189:
+	b	.L1276
+.L1194:
 	ldr	r1, [r9, #8]
 	cmp	r6, r1
-	bne	.L1190
+	bne	.L1195
 	ldr	r1, [r9, #4]
 	ldr	r0, [r4, #3452]
 	str	r1, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1190
+	beq	.L1195
 	ldr	r1, [sp, #40]
 	ldr	r0, [sp, #44]
 	cmp	r1, r0
-	bne	.L1192
-.L1195:
+	bne	.L1197
+.L1200:
 	ldr	r1, [sp, #36]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1190
-.L1192:
+	b	.L1195
+.L1197:
 	ldr	r0, [sp, #36]
 	cmp	r1, r0
-	beq	.L1190
+	beq	.L1195
 	adds	r0, r1, #1
-	beq	.L1193
+	beq	.L1198
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r9, [r3, #12]
 	bl	FlashReadPages
-.L1194:
+.L1199:
 	ldr	r3, [r4, #3292]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1195
+	beq	.L1200
 	ldr	r3, [r9, #4]
 	ldr	r0, [r4, #3452]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1195
+	beq	.L1200
 	mov	r1, r3
 	ldr	r0, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1190
-	b	.L1195
-.L1193:
+	beq	.L1195
+	b	.L1200
+.L1198:
 	str	r1, [r2, r7]
-	b	.L1194
-.L1187:
+	b	.L1199
+.L1192:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	beq	.L1197
+	beq	.L1202
 	ldr	r1, [sp, #36]
 	adds	r0, r1, #1
-	beq	.L1199
+	beq	.L1204
 	ldr	r3, [r8, #252]
 	cmp	r3, r1, lsr #10
-	bhi	.L1199
-	ldr	r0, .L1276+8
-.L1270:
+	bhi	.L1204
+	ldr	r0, .L1281+8
+.L1275:
 	bl	sftl_printk
-	b	.L1179
-.L1199:
+	b	.L1184
+.L1204:
 	movs	r2, #1
 	add	r1, sp, #44
 	mov	r0, r6
 	bl	log2phys
 	ldr	r9, [sp, #40]
 	cmp	r9, #-1
-	beq	.L1197
+	beq	.L1202
 	ldr	r3, [sp, #36]
 	cmp	r9, r3
-	beq	.L1201
+	beq	.L1206
 	ubfx	r0, r9, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #28]
 	cmp	r3, r0
-	beq	.L1202
+	beq	.L1207
 	ldrh	r3, [r4, #80]
 	cmp	r3, r0
-	beq	.L1202
+	beq	.L1207
 	ldrh	r3, [r4, #128]
 	cmp	r3, r0
-	bne	.L1197
-.L1202:
+	bne	.L1202
+.L1207:
 	ldr	r0, [r8, #3292]
 	movs	r2, #0
 	movs	r1, #1
@@ -8584,22 +8589,22 @@ FtlRecoverySuperblock:
 	ldr	r3, [r8, #3292]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1197
+	beq	.L1202
 	ldr	r1, [r7, #4]
 	mov	r0, fp
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1197
+	bne	.L1202
 	movs	r2, #1
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	b	.L1197
-.L1204:
+	b	.L1202
+.L1209:
 	mov	r1, r6
-	ldr	r0, .L1276+12
-	b	.L1270
-.L1183:
+	ldr	r0, .L1281+12
+	b	.L1275
+.L1188:
 	ldr	r3, [r4, #3480]
 	cmp	r3, #31
 	itttt	ls
@@ -8611,27 +8616,27 @@ FtlRecoverySuperblock:
 	bl	decrement_vpc_count
 	ldr	r3, [r4, #3452]
 	adds	r2, r3, #1
-	bne	.L1206
-.L1269:
+	bne	.L1211
+.L1274:
 	str	fp, [r4, #3452]
-	b	.L1179
-.L1206:
+	b	.L1184
+.L1211:
 	cmp	fp, r3
-	bcs	.L1179
-	b	.L1269
-.L1182:
+	bcs	.L1184
+	b	.L1274
+.L1187:
 	ldrb	r3, [sp, #4]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [r10, #2]	@ movhi
 	ldr	r2, [sp, #4]
 	strb	r3, [r10, #6]
-	b	.L1273
-.L1201:
+	b	.L1278
+.L1206:
 	mov	r0, r9
-	b	.L1211
-.L1277:
+	b	.L1216
+.L1282:
 	.align	2
-.L1276:
+.L1281:
 	.word	.LANCHOR1+435
 	.word	.LC8
 	.word	.LC109
@@ -8653,113 +8658,112 @@ ftl_check_vpc:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movs	r4, #0
-	ldr	r6, .L1302
-	ldr	r7, .L1302+4
-	ldr	r1, .L1302+8
+	ldr	r6, .L1307
+	ldr	r7, .L1307+4
+	ldr	r1, .L1307+8
 	mov	r5, r6
-	ldr	r0, .L1302+12
+	ldr	r0, .L1307+12
 	bl	sftl_printk
-	mov	r2, #8192
-	movs	r1, #0
-	ldr	r0, .L1302+4
-	bl	ftl_memset
-.L1279:
+	mov	r1, #8192
+	ldr	r0, .L1307+4
+	bl	__memzero
+.L1284:
 	ldr	r3, [r6, #2556]
 	cmp	r4, r3
-	bcc	.L1281
-	ldr	r8, .L1302+4
+	bcc	.L1286
+	ldr	r8, .L1307+4
 	movs	r4, #0
-	ldr	r10, .L1302+24
+	ldr	r10, .L1307+24
 	mov	r7, r4
 	movw	r9, #65535
-.L1282:
+.L1287:
 	ldrh	r2, [r5, #244]
 	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1284
+	bhi	.L1289
 	ldr	r4, [r5, #2536]
-	cbz	r4, .L1285
+	cbz	r4, .L1290
 	ldr	r3, [r5, #2520]
 	movs	r6, #0
 	ldrh	r8, [r5, #228]
 	mov	fp, #6
-	ldr	r9, .L1302+4
+	ldr	r9, .L1307+4
 	subs	r4, r4, r3
-	ldr	r3, .L1302+16
+	ldr	r3, .L1307+16
 	asrs	r4, r4, #1
-	ldr	r10, .L1302+28
+	ldr	r10, .L1307+28
 	muls	r4, r3, r4
 	uxth	r4, r4
-.L1286:
+.L1291:
 	uxth	r3, r6
 	cmp	r8, r3
-	bls	.L1285
+	bls	.L1290
 	ldr	r3, [r5, #76]
 	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L1287
+	cbz	r2, .L1292
 	movs	r7, #1
 	ldrh	r3, [r9, r4, lsl #1]
 	mov	r1, r4
 	mov	r0, r10
 	bl	sftl_printk
-.L1287:
+.L1292:
 	mul	r4, fp, r4
 	ldr	r3, [r5, #2520]
 	adds	r6, r6, #1
 	ldrh	r4, [r3, r4]
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L1286
-.L1285:
-	cbz	r7, .L1278
+	bne	.L1291
+.L1290:
+	cbz	r7, .L1283
 	movw	r2, #2383
-	ldr	r1, .L1302+8
-	ldr	r0, .L1302+20
+	ldr	r1, .L1307+8
+	ldr	r0, .L1307+20
 	bl	sftl_printk
-.L1278:
+.L1283:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1281:
+.L1286:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r4
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L1280
+	beq	.L1285
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r7, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L1280:
+.L1285:
 	adds	r4, r4, #1
-	b	.L1279
-.L1284:
+	b	.L1284
+.L1289:
 	ldr	r3, [r5, #76]
 	uxth	r6, r4
 	ldrh	r2, [r3, r6, lsl #1]
 	ldrh	r3, [r8, r6, lsl #1]
 	cmp	r2, r3
-	beq	.L1283
+	beq	.L1288
 	mov	r1, r6
 	mov	r0, r10
 	bl	sftl_printk
 	ldr	r3, [r5, #76]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, r9
-	beq	.L1283
+	beq	.L1288
 	ldrh	r2, [r8, r6, lsl #1]
 	cmp	r2, r3
 	it	hi
 	movhi	r7, #1
-.L1283:
+.L1288:
 	adds	r4, r4, #1
-	b	.L1282
-.L1303:
+	b	.L1287
+.L1308:
 	.align	2
-.L1302:
+.L1307:
 	.word	.LANCHOR0
 	.word	check_vpc_table
 	.word	.LANCHOR1+457
@@ -8784,42 +8788,42 @@ ftl_scan_all_data:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r5, #0
-	ldr	r6, .L1318
+	ldr	r6, .L1323
 	.pad #32
 	sub	sp, sp, #32
 	movs	r1, #0
-	ldr	r8, .L1318+16
+	ldr	r8, .L1323+16
 	mov	r4, r6
-	ldr	r0, .L1318+4
+	ldr	r0, .L1323+4
 	bl	sftl_printk
-.L1305:
+.L1310:
 	ldr	r3, [r6, #2556]
 	cmp	r5, r3
-	bcc	.L1311
+	bcc	.L1316
 	add	sp, sp, #32
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1311:
+.L1316:
 	movs	r2, #0
 	add	r1, sp, #28
 	mov	r0, r5
 	bl	log2phys
 	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L1306
+	cbnz	r3, .L1311
 	ldr	r2, [sp, #28]
 	mov	r1, r5
 	mov	r0, r8
 	bl	sftl_printk
-.L1306:
+.L1311:
 	ldr	r3, [sp, #28]
 	adds	r2, r3, #1
-	beq	.L1308
+	beq	.L1313
 	str	r3, [r4, #3460]
 	movs	r2, #0
 	ldr	r3, [r4, #3304]
 	movs	r1, #1
 	ldr	r7, [r4, #3336]
-	ldr	r0, .L1318+8
+	ldr	r0, .L1323+8
 	str	r3, [r4, #3464]
 	str	r5, [r4, #3472]
 	str	r7, [r4, #3468]
@@ -8827,16 +8831,16 @@ ftl_scan_all_data:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	cmp	r3, #256
-	beq	.L1309
+	beq	.L1314
 	adds	r3, r3, #1
-	beq	.L1309
+	beq	.L1314
 	ldr	r3, [r7, #8]
 	cmp	r5, r3
-	beq	.L1308
-.L1309:
+	beq	.L1313
+.L1314:
 	ldr	r2, [r4, #3464]
 	ldr	r3, [r4, #3468]
-	ldr	r0, .L1318+12
+	ldr	r0, .L1323+12
 	ldr	r1, [r2, #4]
 	str	r1, [sp, #16]
 	mov	r1, r5
@@ -8851,12 +8855,12 @@ ftl_scan_all_data:
 	ldr	r3, [r3]
 	ldr	r2, [r4, #3460]
 	bl	sftl_printk
-.L1308:
+.L1313:
 	adds	r5, r5, #1
-	b	.L1305
-.L1319:
+	b	.L1310
+.L1324:
 	.align	2
-.L1318:
+.L1323:
 	.word	.LANCHOR0
 	.word	.LC114
 	.word	.LANCHOR0+3456
@@ -8875,7 +8879,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1357
+	ldr	r3, .L1362
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #44
@@ -8885,30 +8889,30 @@ FtlGcScanTempBlk:
 	ldrh	r6, [r3, #4]
 	movw	r3, #65535
 	cmp	r6, r3
-	beq	.L1347
-	cbnz	r6, .L1321
-.L1322:
+	beq	.L1352
+	cbnz	r6, .L1326
+.L1327:
 	bl	FtlGcPageVarInit
-	b	.L1323
-.L1347:
+	b	.L1328
+.L1352:
 	movs	r6, #0
-.L1321:
-	ldr	r3, .L1357+4
+.L1326:
+	ldr	r3, .L1362+4
 	ldr	r2, [sp, #4]
 	ldrh	r3, [r3, #306]
 	cmp	r3, r2
-	beq	.L1322
-.L1323:
+	beq	.L1327
+.L1328:
 	mov	fp, #0
-.L1341:
+.L1346:
 	ldrh	r2, [r5]
 	movs	r3, #0
 	strb	r3, [r5, #8]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1324
-	ldr	r4, .L1357+4
-.L1344:
+	beq	.L1329
+	ldr	r4, .L1362+4
+.L1349:
 	ldr	r3, [r4, #3292]
 	movs	r2, #0
 	ldrh	ip, [r4, #236]
@@ -8922,31 +8926,31 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #8]
 	ldrh	r3, [r4, #316]
 	str	r3, [sp, #12]
-.L1325:
+.L1330:
 	uxth	r3, r2
 	cmp	ip, r3
-	bhi	.L1329
+	bhi	.L1334
 	mov	r10, #0
 	movs	r2, #0
 	mov	r1, r7
 	ldr	r0, [sp]
 	bl	FlashReadPages
-.L1330:
+.L1335:
 	uxth	r3, r10
 	cmp	r7, r3
-	bhi	.L1342
+	bhi	.L1347
 	ldr	r3, [sp, #4]
 	add	fp, fp, #1
 	adds	r6, r6, #1
 	uxth	r6, r6
 	cmp	r3, fp
-	bls	.L1343
-.L1345:
+	bls	.L1348
+.L1350:
 	ldrh	r3, [r4, #306]
 	cmp	r3, r6
-	bhi	.L1344
-.L1324:
-	ldr	r3, .L1357
+	bhi	.L1349
+.L1329:
+	ldr	r3, .L1362
 	movw	r2, #65535
 	strh	r6, [r5, #2]	@ movhi
 	mov	r1, r6
@@ -8955,11 +8959,11 @@ FtlGcScanTempBlk:
 	movs	r2, #0
 	strb	r2, [r5, #6]
 	bl	ftl_sb_update_avl_pages
-	b	.L1346
-.L1329:
+	b	.L1351
+.L1334:
 	ldrh	r3, [lr], #2
 	cmp	r3, r8
-	beq	.L1326
+	beq	.L1331
 	ldr	r0, [sp]
 	movs	r1, #20
 	orr	r3, r6, r3, lsl #10
@@ -8983,10 +8987,10 @@ FtlGcScanTempBlk:
 	str	r0, [r1, #8]
 	add	r3, r3, r9
 	str	r3, [r1, #12]
-.L1326:
+.L1331:
 	adds	r2, r2, #1
-	b	.L1325
-.L1342:
+	b	.L1330
+.L1347:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, r10
@@ -8996,12 +9000,12 @@ FtlGcScanTempBlk:
 	ldr	r9, [r1, #12]
 	str	r0, [sp]
 	cmp	r8, #0
-	bne	.L1331
+	bne	.L1336
 	ldrh	r1, [r9]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1332
-.L1355:
+	bne	.L1337
+.L1360:
 	ldrh	r2, [r5]
 	movs	r1, #0
 	ldr	r3, [r4, #76]
@@ -9013,13 +9017,13 @@ FtlGcScanTempBlk:
 	strh	r3, [r5]	@ movhi
 	strh	r3, [r4, #176]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1341
-.L1332:
+	b	.L1346
+.L1337:
 	ldr	r0, [r9, #8]
 	ldr	r2, [r4, #2556]
 	str	r3, [sp, #8]
 	cmp	r0, r2
-	bhi	.L1355
+	bhi	.L1360
 	mov	r2, r8
 	add	r1, sp, #16
 	bl	log2phys
@@ -9027,19 +9031,19 @@ FtlGcScanTempBlk:
 	ldr	r1, [sp, #16]
 	ldr	r3, [sp, #8]
 	cmp	r2, r1
-	beq	.L1335
-.L1337:
+	beq	.L1340
+.L1342:
 	ldr	r2, [r9, #8]
-.L1356:
+.L1361:
 	ldr	r1, [sp]
 	add	r10, r10, #1
 	ldr	r0, [r9, #12]
 	bl	FtlGcUpdatePage
-	b	.L1330
-.L1335:
+	b	.L1335
+.L1340:
 	str	r3, [sp, #8]
 	adds	r3, r2, #1
-	beq	.L1337
+	beq	.L1342
 	str	r2, [sp, #24]
 	movs	r1, #1
 	ldr	r2, [r4, #3320]
@@ -9055,44 +9059,44 @@ FtlGcScanTempBlk:
 	ldr	r0, [sp, #28]
 	lsls	r2, r2, #7
 	add	ip, r3, r1
-.L1338:
+.L1343:
 	cmp	r8, r2
-	beq	.L1337
+	beq	.L1342
 	ldr	r1, [ip, #8]
 	ldr	r3, [r0, r8, lsl #2]
 	ldr	r1, [r1, r8, lsl #2]
 	cmp	r1, r3
-	beq	.L1339
+	beq	.L1344
 	ldr	r2, [sp, #24]
 	ldrh	r1, [r5]
-	ldr	r0, .L1357+8
+	ldr	r0, .L1362+8
 	bl	sftl_printk
-	b	.L1355
-.L1339:
+	b	.L1360
+.L1344:
 	add	r8, r8, #1
-	b	.L1338
-.L1331:
+	b	.L1343
+.L1336:
 	mov	r2, #-1
-	b	.L1356
-.L1343:
-	ldr	r2, .L1357
+	b	.L1361
+.L1348:
+	ldr	r2, .L1362
 	movw	r1, #65535
 	ldrh	r3, [r2, #4]
 	cmp	r3, r1
-	beq	.L1345
+	beq	.L1350
 	add	r3, r3, fp
 	strh	r3, [r2, #4]	@ movhi
 	ldrh	r3, [r4, #306]
 	cmp	r3, r6
-	bls	.L1345
-.L1346:
+	bls	.L1350
+.L1351:
 	mov	r0, #-1
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1358:
+.L1363:
 	.align	2
-.L1357:
+.L1362:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LC117
@@ -9113,28 +9117,28 @@ FtlReadRefresh:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r6, .L1375
+	ldr	r6, .L1380
 	ldr	r9, [r6, #2724]
 	mov	r5, r6
 	cmp	r9, #0
-	beq	.L1360
+	beq	.L1365
 	ldr	r2, [r6, #2728]
 	ldr	r3, [r6, #2556]
 	cmp	r2, r3
-	bcs	.L1361
+	bcs	.L1366
 	mov	r4, #2048
-.L1366:
+.L1371:
 	ldr	r0, [r5, #2728]
 	ldr	r3, [r5, #2556]
 	cmp	r0, r3
-	bcc	.L1362
-.L1365:
+	bcc	.L1367
+.L1370:
 	mov	r0, #-1
-.L1359:
+.L1364:
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1362:
+.L1367:
 	movs	r2, #0
 	mov	r1, sp
 	bl	log2phys
@@ -9143,7 +9147,7 @@ FtlReadRefresh:
 	adds	r1, r2, #1
 	add	r3, r3, #1
 	str	r3, [r5, #2728]
-	beq	.L1364
+	beq	.L1369
 	str	r3, [sp, #20]
 	add	r0, sp, #88
 	ldr	r3, [r5, #3328]
@@ -9157,24 +9161,24 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	cmp	r3, #256
-	bne	.L1365
+	bne	.L1370
 	ldr	r0, [sp]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1365
-.L1364:
+	b	.L1370
+.L1369:
 	subs	r4, r4, #1
-	bne	.L1366
-	b	.L1365
-.L1361:
+	bne	.L1371
+	b	.L1370
+.L1366:
 	ldr	r3, [r6, #2560]
 	movs	r0, #0
 	str	r0, [r6, #2724]
 	str	r0, [r6, #2728]
 	str	r3, [r6, #2720]
-	b	.L1359
-.L1360:
+	b	.L1364
+.L1365:
 	ldr	r8, [r6, #2560]
 	movw	r4, #10000
 	ldr	r1, [r6, #2616]
@@ -9185,7 +9189,7 @@ FtlReadRefresh:
 	movhi	r4, #31
 	movls	r4, #63
 	cmp	r7, r3
-	bhi	.L1370
+	bhi	.L1375
 	ldr	r3, [r6, #2556]
 	lsrs	r1, r1, #10
 	mov	r0, #1000
@@ -9194,14 +9198,14 @@ FtlReadRefresh:
 	bl	__aeabi_uidiv
 	add	r0, r0, r7
 	cmp	r8, r0
-	bhi	.L1370
+	bhi	.L1375
 	ldrh	r3, [r6, #2500]
 	ands	r0, r4, r3
-	bne	.L1372
+	bne	.L1377
 	ldr	r2, [r6, #2744]
 	cmp	r3, r2
-	beq	.L1359
-.L1370:
+	beq	.L1364
+.L1375:
 	ldrh	r3, [r5, #2500]
 	movs	r0, #0
 	str	r0, [r5, #2728]
@@ -9209,13 +9213,13 @@ FtlReadRefresh:
 	str	r3, [r5, #2744]
 	movs	r3, #1
 	str	r3, [r5, #2724]
-	b	.L1359
-.L1372:
+	b	.L1364
+.L1377:
 	mov	r0, r9
-	b	.L1359
-.L1376:
+	b	.L1364
+.L1381:
 	.align	2
-.L1375:
+.L1380:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlReadRefresh, .-FtlReadRefresh
@@ -9233,30 +9237,30 @@ l2p_flush:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r4, #0
-	ldr	r5, .L1381
+	ldr	r5, .L1386
 	movs	r6, #12
 	bl	FtlWriteDump_data
-.L1378:
+.L1383:
 	ldrh	r3, [r5, #342]
 	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1380
+	bhi	.L1385
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1380:
+.L1385:
 	ldr	r2, [r5, #2544]
 	uxth	r3, r4
 	mla	r3, r6, r3, r2
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L1379
+	bge	.L1384
 	bl	flush_l2p_region
-.L1379:
+.L1384:
 	adds	r4, r4, #1
-	b	.L1378
-.L1382:
+	b	.L1383
+.L1387:
 	.align	2
-.L1381:
+.L1386:
 	.word	.LANCHOR0
 	.fnend
 	.size	l2p_flush, .-l2p_flush
@@ -9274,7 +9278,7 @@ FtlVendorPartWrite:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1395
+	ldr	r4, .L1400
 	adds	r2, r0, r1
 	.pad #108
 	sub	sp, sp, #108
@@ -9282,19 +9286,19 @@ FtlVendorPartWrite:
 	mov	r6, r1
 	ldrh	r3, [r4, #300]
 	cmp	r2, r3
-	bhi	.L1391
+	bhi	.L1396
 	ldrh	r7, [r4, #312]
 	mov	r9, #0
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1385:
-	cbnz	r6, .L1390
-.L1383:
+.L1390:
+	cbnz	r6, .L1395
+.L1388:
 	mov	r0, r9
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1390:
+.L1395:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
@@ -9311,9 +9315,9 @@ FtlVendorPartWrite:
 	cmp	r6, r5
 	it	cc
 	uxthcc	r5, r6
-	cbz	r2, .L1387
+	cbz	r2, .L1392
 	cmp	r5, r3
-	beq	.L1387
+	beq	.L1392
 	ldr	r3, [r4, #3312]
 	add	r0, sp, #20
 	str	r2, [sp, #24]
@@ -9323,7 +9327,7 @@ FtlVendorPartWrite:
 	add	r3, sp, #40
 	str	r3, [sp, #32]
 	bl	FlashReadPages
-.L1388:
+.L1393:
 	lsls	r3, r5, #9
 	ldr	r0, [r4, #3312]
 	mov	r1, r10
@@ -9337,7 +9341,7 @@ FtlVendorPartWrite:
 	bl	ftl_memcpy
 	mov	r1, r7
 	ldr	r2, [r4, #3312]
-	ldr	r0, .L1395+4
+	ldr	r0, .L1400+4
 	adds	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
@@ -9345,19 +9349,19 @@ FtlVendorPartWrite:
 	it	eq
 	moveq	r9, #-1
 	add	r10, r10, r3
-	b	.L1385
-.L1387:
+	b	.L1390
+.L1392:
 	ldrh	r2, [r4, #314]
 	movs	r1, #0
 	ldr	r0, [r4, #3312]
 	bl	ftl_memset
-	b	.L1388
-.L1391:
-	mov	r9, #-1
-	b	.L1383
+	b	.L1393
 .L1396:
+	mov	r9, #-1
+	b	.L1388
+.L1401:
 	.align	2
-.L1395:
+.L1400:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3612
 	.fnend
@@ -9374,12 +9378,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1399
-	ldr	r3, .L1399+4
+	ldr	r2, .L1404
+	ldr	r3, .L1404+4
 	ldr	r1, [r2, #2644]
 	cmp	r1, r3
-	bne	.L1397
-	ldr	r3, .L1399+8
+	bne	.L1402
+	ldr	r3, .L1404+8
 	addw	r2, r2, #2644
 	movs	r1, #1
 	movs	r0, #0
@@ -9409,11 +9413,11 @@ Ftl_save_ext_data:
 	ldr	r3, [r2, #-24]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1397:
+.L1402:
 	bx	lr
-.L1400:
+.L1405:
 	.align	2
-.L1399:
+.L1404:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
@@ -9432,7 +9436,7 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1406
+	ldr	r3, .L1411
 	ldrh	r2, [r3, #3656]
 	cmp	r2, #31
 	itett	ls
@@ -9440,19 +9444,19 @@ FtlEctTblFlush:
 	movhi	r2, #32
 	strhls	r2, [r3, #3656]	@ movhi
 	movls	r2, #1
-	cbnz	r0, .L1403
+	cbnz	r0, .L1408
 	ldr	r1, [r3, #3352]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1404
-.L1403:
+	bcc	.L1409
+.L1408:
 	ldr	r2, [r3, #3352]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1406+4
+	ldr	r1, .L1411+4
 	str	r1, [r2]
 	ldrh	r1, [r3, #3344]
 	ldr	r2, [r3, #3352]
@@ -9465,12 +9469,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1404:
+.L1409:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1407:
+.L1412:
 	.align	2
-.L1406:
+.L1411:
 	.word	.LANCHOR0
 	.word	1112818501
 	.fnend
@@ -9505,7 +9509,7 @@ FtlVendorPartRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1419
+	ldr	r4, .L1424
 	adds	r2, r0, r1
 	.pad #108
 	sub	sp, sp, #108
@@ -9513,19 +9517,19 @@ FtlVendorPartRead:
 	mov	r7, r1
 	ldrh	r3, [r4, #300]
 	cmp	r2, r3
-	bhi	.L1418
+	bhi	.L1423
 	ldrh	r6, [r4, #312]
 	mov	r9, #0
 	lsr	r6, r0, r6
 	lsl	fp, r6, #2
-.L1411:
-	cbnz	r7, .L1417
-.L1409:
+.L1416:
+	cbnz	r7, .L1422
+.L1414:
 	mov	r0, r9
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1417:
+.L1422:
 	ldr	r3, [r4, #3376]
 	mov	r0, r8
 	ldrh	r5, [r4, #262]
@@ -9542,7 +9546,7 @@ FtlVendorPartRead:
 	uxthcc	r5, r7
 	lsls	r2, r5, #9
 	str	r2, [sp, #8]
-	cbz	r3, .L1413
+	cbz	r3, .L1418
 	ldr	r2, [r4, #3312]
 	add	r0, sp, #20
 	str	r3, [sp, #24]
@@ -9560,42 +9564,42 @@ FtlVendorPartRead:
 	it	eq
 	moveq	r9, #-1
 	cmp	r2, #256
-	bne	.L1415
+	bne	.L1420
 	mov	r2, r3
 	mov	r1, r6
-	ldr	r0, .L1419+4
+	ldr	r0, .L1424+4
 	bl	sftl_printk
 	ldr	r2, [r4, #3312]
 	mov	r1, r6
-	ldr	r0, .L1419+8
+	ldr	r0, .L1424+8
 	bl	FtlMapWritePage
-.L1415:
+.L1420:
 	ldr	r1, [r4, #3312]
 	lsls	r2, r5, #9
 	ldr	r3, [sp, #4]
 	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1416:
+.L1421:
 	ldr	r3, [sp, #8]
 	adds	r6, r6, #1
 	subs	r7, r7, r5
 	add	r8, r8, r5
 	add	fp, fp, #4
 	add	r10, r10, r3
-	b	.L1411
-.L1413:
+	b	.L1416
+.L1418:
 	lsls	r2, r5, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1416
-.L1418:
+	b	.L1421
+.L1423:
 	mov	r9, #-1
-	b	.L1409
-.L1420:
+	b	.L1414
+.L1425:
 	.align	2
-.L1419:
+.L1424:
 	.word	.LANCHOR0
 	.word	.LC118
 	.word	.LANCHOR0+3612
@@ -9615,29 +9619,29 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1423
+	ldr	r4, .L1428
 	ldr	r2, [r4, #3352]
 	ldrh	r1, [r4, #3344]
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #3352]
 	ldr	r2, [r3]
-	ldr	r3, .L1423+4
+	ldr	r3, .L1428+4
 	cmp	r2, r3
-	beq	.L1422
-	ldr	r1, .L1423+8
-	ldr	r0, .L1423+12
+	beq	.L1427
+	ldr	r1, .L1428+8
+	ldr	r0, .L1428+12
 	bl	sftl_printk
 	ldrh	r2, [r4, #3344]
 	movs	r1, #0
 	ldr	r0, [r4, #3352]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1422:
+.L1427:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1424:
+.L1429:
 	.align	2
-.L1423:
+.L1428:
 	.word	.LANCHOR0
 	.word	1112818501
 	.word	.LC119
@@ -9658,23 +9662,22 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1428
+	ldr	r4, .L1433
 	movs	r0, #0
-	ldr	r5, .L1428+4
+	ldr	r5, .L1433+4
 	addw	r2, r4, #2644
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	beq	.L1426
-	mov	r2, #512
-	movs	r1, #0
+	beq	.L1431
+	mov	r1, #512
 	addw	r0, r4, #2644
-	bl	ftl_memset
+	bl	__memzero
 	str	r5, [r4, #2644]
-.L1426:
+.L1431:
 	ldr	r3, [r4, #2644]
 	cmp	r3, r5
-	bne	.L1427
+	bne	.L1432
 	ldr	r3, [r4, #2732]
 	str	r3, [r4, #2584]
 	ldr	r3, [r4, #2736]
@@ -9699,7 +9702,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2616]
 	ldr	r3, [r4, #2692]
 	str	r3, [r4, #2620]
-.L1427:
+.L1432:
 	ldrh	r2, [r4, #296]
 	ldr	r3, [r4, #2604]
 	ldr	r0, [r4, #2600]
@@ -9708,9 +9711,9 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2608]
 	pop	{r3, r4, r5, pc}
-.L1429:
+.L1434:
 	.align	2
-.L1428:
+.L1433:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9746,10 +9749,10 @@ FtlMapBlkWriteDump_data:
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
 	ldr	r3, [r0, #36]
-	cbz	r3, .L1431
+	cbz	r3, .L1436
 	ldrh	r5, [r0, #6]
 	movs	r3, #0
-	ldr	r4, .L1435
+	ldr	r4, .L1440
 	ldr	r2, [r0, #24]
 	str	r3, [r0, #36]
 	subs	r5, r5, #1
@@ -9760,27 +9763,27 @@ FtlMapBlkWriteDump_data:
 	str	r1, [r4, #3468]
 	ldr	r2, [r2, r5, lsl #2]
 	str	r2, [r4, #3460]
-	cbz	r2, .L1433
+	cbz	r2, .L1438
 	movs	r2, #1
 	add	r0, r4, #3456
 	mov	r1, r2
 	bl	FlashReadPages
-.L1434:
+.L1439:
 	ldr	r2, [r4, #3464]
 	mov	r1, r5
 	mov	r0, r6
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1433:
+.L1438:
 	ldrh	r2, [r4, #314]
 	movs	r1, #255
 	bl	ftl_memset
-	b	.L1434
-.L1431:
-	pop	{r4, r5, r6, pc}
+	b	.L1439
 .L1436:
+	pop	{r4, r5, r6, pc}
+.L1441:
 	.align	2
-.L1435:
+.L1440:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
@@ -9798,14 +9801,14 @@ FtlVpcTblFlush:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r4, .L1452
+	ldr	r4, .L1457
 	movs	r1, #255
 	movw	r7, #65535
-	ldr	r9, .L1452+16
+	ldr	r9, .L1457+16
 	ldr	r3, [r4, #3304]
 	add	r8, r4, #3456
 	ldr	r6, [r4, #3336]
-	ldr	r10, .L1452+20
+	ldr	r10, .L1457+20
 	str	r3, [r4, #3464]
 	ldrh	r3, [r4, #2628]
 	str	r6, [r4, #3468]
@@ -9817,9 +9820,9 @@ FtlVpcTblFlush:
 	str	r5, [r6, #8]
 	ldrh	r2, [r4, #30]
 	str	r3, [r6, #4]
-	ldr	r3, .L1452+4
+	ldr	r3, .L1457+4
 	str	r3, [r4, #2472]
-	ldr	r3, .L1452+8
+	ldr	r3, .L1457+8
 	str	r3, [r4, #2476]
 	ldrh	r3, [r4, #2634]
 	strh	r3, [r4, #2480]	@ movhi
@@ -9879,7 +9882,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1438:
+.L1443:
 	ldr	r3, [r4, #3304]
 	ldrh	r1, [r4, #2630]
 	ldrh	r2, [r4, #2628]
@@ -9891,7 +9894,7 @@ FtlVpcTblFlush:
 	ldrh	r3, [r4, #308]
 	subs	r3, r3, #1
 	cmp	r1, r3
-	blt	.L1439
+	blt	.L1444
 	movs	r3, #0
 	ldrh	r7, [r4, #2632]
 	strh	r3, [r4, #2630]	@ movhi
@@ -9906,7 +9909,7 @@ FtlVpcTblFlush:
 	str	r2, [r4, #3460]
 	str	r3, [r6, #4]
 	strh	r0, [r6, #2]	@ movhi
-.L1439:
+.L1444:
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3304]
 	bl	js_hash
@@ -9922,14 +9925,14 @@ FtlVpcTblFlush:
 	uxth	r3, r3
 	adds	r1, r2, #1
 	strh	r3, [r4, #2630]	@ movhi
-	bne	.L1440
+	bne	.L1445
 	cmp	r3, #1
-	bne	.L1441
+	bne	.L1446
 	movw	r2, #1138
 	mov	r1, r9
 	mov	r0, r10
 	bl	sftl_printk
-.L1441:
+.L1446:
 	ldrh	r3, [r4, #2630]
 	adds	r5, r5, #1
 	uxth	r5, r5
@@ -9939,30 +9942,30 @@ FtlVpcTblFlush:
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2630]	@ movhi
 	cmp	r5, #3
-	bls	.L1438
+	bls	.L1443
 	mov	r2, r5
 	ldr	r1, [r4, #3460]
-	ldr	r0, .L1452+12
+	ldr	r0, .L1457+12
 	bl	sftl_printk
-.L1444:
-	b	.L1444
-.L1440:
+.L1449:
+	b	.L1449
+.L1445:
 	cmp	r3, #1
-	beq	.L1438
+	beq	.L1443
 	cmp	r2, #256
-	beq	.L1438
+	beq	.L1443
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1445
+	beq	.L1450
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1445:
+.L1450:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1453:
+.L1458:
 	.align	2
-.L1452:
+.L1457:
 	.word	.LANCHOR0
 	.word	1179929683
 	.word	1342177352
@@ -10005,17 +10008,17 @@ sftl_deinit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1457
+	ldr	r3, .L1462
 	ldr	r3, [r3]
 	cmp	r3, #1
-	bne	.L1456
+	bne	.L1461
 	bl	FtlSysFlush
-.L1456:
+.L1461:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1458:
+.L1463:
 	.align	2
-.L1457:
+.L1462:
 	.word	.LANCHOR2
 	.fnend
 	.size	sftl_deinit, .-sftl_deinit
@@ -10034,21 +10037,21 @@ sftl_discard:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	adds	r2, r0, r1
-	ldr	r4, .L1474
+	ldr	r4, .L1479
 	mov	r8, r0
 	mov	r6, r1
 	ldr	r3, [r4, #344]
 	cmp	r2, r3
-	bhi	.L1467
+	bhi	.L1472
 	cmp	r1, #31
-	bhi	.L1461
-.L1466:
+	bhi	.L1466
+.L1471:
 	movs	r0, #0
-.L1459:
+.L1464:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1461:
+.L1466:
 	ldrh	r5, [r4, #262]
 	mov	r1, r5
 	bl	__aeabi_uidiv
@@ -10056,7 +10059,7 @@ sftl_discard:
 	mov	r7, r0
 	sub	r8, r8, r3
 	uxth	r3, r8
-	cbz	r3, .L1462
+	cbz	r3, .L1467
 	subs	r5, r5, r3
 	adds	r7, r7, #1
 	cmp	r5, r6
@@ -10064,29 +10067,29 @@ sftl_discard:
 	movcs	r5, r6
 	uxth	r5, r5
 	subs	r6, r6, r5
-.L1462:
+.L1467:
 	mov	r3, #-1
 	str	r3, [sp, #4]
-.L1463:
+.L1468:
 	ldrh	r3, [r4, #262]
 	cmp	r6, r3
-	bcs	.L1465
+	bcs	.L1470
 	ldr	r3, [r4, #3660]
 	cmp	r3, #32
-	bls	.L1466
+	bls	.L1471
 	movs	r5, #0
 	str	r5, [r4, #3660]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1466
-.L1465:
+	b	.L1471
+.L1470:
 	movs	r2, #0
 	mov	r1, sp
 	mov	r0, r7
 	bl	log2phys
 	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L1464
+	beq	.L1469
 	ldr	r3, [r4, #3660]
 	movs	r2, #1
 	add	r1, sp, #4
@@ -10101,17 +10104,17 @@ sftl_discard:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1464:
+.L1469:
 	ldrh	r3, [r4, #262]
 	adds	r7, r7, #1
 	subs	r6, r6, r3
-	b	.L1463
-.L1467:
+	b	.L1468
+.L1472:
 	mov	r0, #-1
-	b	.L1459
-.L1475:
+	b	.L1464
+.L1480:
 	.align	2
-.L1474:
+.L1479:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_discard, .-sftl_discard
@@ -10130,90 +10133,90 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movs	r5, #0
-	ldr	r4, .L1489
-	ldr	r1, .L1489+4
-	ldr	r0, .L1489+8
+	ldr	r4, .L1494
+	ldr	r1, .L1494+4
+	ldr	r0, .L1494+8
 	bl	sftl_printk
 	ldrh	r2, [r4, #246]
 	movs	r1, #0
 	ldr	r0, [r4, #3356]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1477:
+.L1482:
 	ldr	r3, [r4, #2556]
 	cmp	r5, r3
-	bcc	.L1479
-	ldr	r9, .L1489+12
+	bcc	.L1484
+	ldr	r9, .L1494+12
 	movs	r7, #0
 	movw	r8, #65535
-.L1480:
+.L1485:
 	ldrh	r3, [r4, #244]
 	uxth	r6, r7
 	cmp	r3, r6
-	bhi	.L1485
+	bhi	.L1490
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1479:
+.L1484:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L1478
+	beq	.L1483
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldr	r2, [r4, #3356]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1478:
+.L1483:
 	adds	r5, r5, #1
-	b	.L1477
-.L1485:
+	b	.L1482
+.L1490:
 	ldr	r3, [r4, #76]
 	uxth	r5, r7
 	ldrh	r2, [r3, r5, lsl #1]
 	ldr	r3, [r4, #3356]
 	ldrh	r3, [r3, r5, lsl #1]
 	cmp	r2, r3
-	beq	.L1482
+	beq	.L1487
 	cmp	r2, r8
-	beq	.L1482
+	beq	.L1487
 	mov	r1, r5
 	mov	r0, r9
 	bl	sftl_printk
 	ldrh	r3, [r4, #28]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1487
 	ldrh	r3, [r4, #128]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1487
 	ldrh	r3, [r4, #80]
 	cmp	r3, r6
-	beq	.L1482
+	beq	.L1487
 	ldr	r3, [r4, #76]
 	ldrh	r2, [r3, r5, lsl #1]
-	cbnz	r2, .L1484
+	cbnz	r2, .L1489
 	ldr	r2, [r4, #3356]
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
-.L1482:
+.L1487:
 	adds	r7, r7, #1
-	b	.L1480
-.L1484:
+	b	.L1485
+.L1489:
 	ldr	r2, [r4, #3356]
 	mov	r0, r6
 	ldrh	r2, [r2, r5, lsl #1]
 	strh	r2, [r3, r5, lsl #1]	@ movhi
 	bl	update_vpc_list
-	b	.L1482
-.L1490:
+	b	.L1487
+.L1495:
 	.align	2
-.L1489:
+.L1494:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+486
 	.word	.LC111
@@ -10234,42 +10237,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1501
+	ldr	r4, .L1506
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #244]
 	cmp	r3, r5
-	bcs	.L1492
+	bcs	.L1497
 	movw	r2, #2755
-	ldr	r1, .L1501+4
-	ldr	r0, .L1501+8
+	ldr	r1, .L1506+4
+	ldr	r0, .L1506+8
 	bl	sftl_printk
-.L1492:
+.L1497:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1493
+	beq	.L1498
 	ldr	r3, [r4, #76]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1494
+	cbz	r3, .L1499
 	bl	INSERT_DATA_LIST
-.L1493:
+.L1498:
 	ldrh	r0, [r4, #3442]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1495
+	beq	.L1500
 	cmp	r5, r0
-	bne	.L1496
+	bne	.L1501
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1497
-.L1496:
+	cbz	r3, .L1502
+.L1501:
 	bl	update_vpc_list
-.L1497:
+.L1502:
 	movw	r3, #65535
 	strh	r3, [r4, #3442]	@ movhi
-.L1495:
+.L1500:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -10278,12 +10281,12 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1494:
+.L1499:
 	bl	INSERT_FREE_LIST
-	b	.L1493
-.L1502:
+	b	.L1498
+.L1507:
 	.align	2
-.L1501:
+.L1506:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+507
 	.word	.LC8
@@ -10304,31 +10307,31 @@ FtlProgPages:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movs	r6, #0
-	ldr	r10, .L1522+16
+	ldr	r10, .L1527+16
 	mov	r5, r3
 	movs	r2, #0
 	mov	r4, r0
-	ldr	r8, .L1522
+	ldr	r8, .L1527
 	mov	r9, r1
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1504:
+.L1509:
 	cmp	r6, r9
-	bne	.L1511
-	ldr	r3, .L1522
+	bne	.L1516
+	ldr	r3, .L1527
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r3, #236]
 	cmp	r2, r3
-	bcc	.L1503
-	movw	r2, #997
-	ldr	r1, .L1522+4
-	ldr	r0, .L1522+8
+	bcc	.L1508
+	mov	r2, #1000
+	ldr	r1, .L1527+4
+	ldr	r0, .L1527+8
 	bl	sftl_printk
-.L1503:
+.L1508:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1506:
+.L1511:
 	ldr	r1, [r4, #4]
 	mov	r0, r10
 	bl	sftl_printk
@@ -10337,10 +10340,10 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1505
+	cbnz	r3, .L1510
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1505:
+.L1510:
 	mov	r0, r5
 	bl	get_new_active_ppa
 	movs	r2, #0
@@ -10350,21 +10353,21 @@ FtlProgPages:
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	FlashProgPages
-.L1511:
+.L1516:
 	ldr	r2, [r4]
 	adds	r3, r2, #1
-	beq	.L1506
+	beq	.L1511
 	cmp	r2, #256
-	beq	.L1506
+	beq	.L1511
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r8, #236]
 	cmp	r2, r3
-	bcc	.L1507
-	movw	r2, #982
-	ldr	r1, .L1522+4
-	ldr	r0, .L1522+8
+	bcc	.L1512
+	movw	r2, #985
+	ldr	r1, .L1527+4
+	ldr	r0, .L1527+8
 	bl	sftl_printk
-.L1507:
+.L1512:
 	ldr	r3, [r4, #4]
 	add	r1, sp, #8
 	movs	r2, #1
@@ -10377,23 +10380,23 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	cmp	fp, #-1
 	mov	r7, r0
-	beq	.L1508
+	beq	.L1513
 	ldr	r3, [r8, #76]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1509
+	cbnz	r2, .L1514
 	mov	r1, r0
-	ldr	r0, .L1522+12
+	ldr	r0, .L1527+12
 	bl	sftl_printk
-.L1509:
+.L1514:
 	mov	r0, r7
 	bl	decrement_vpc_count
-.L1508:
+.L1513:
 	adds	r6, r6, #1
 	adds	r4, r4, #20
-	b	.L1504
-.L1523:
+	b	.L1509
+.L1528:
 	.align	2
-.L1522:
+.L1527:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+536
 	.word	.LC8
@@ -10416,61 +10419,61 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movw	r3, #65535
-	ldr	r4, .L1548
+	ldr	r4, .L1553
 	ldrh	r2, [r4, #128]
 	ldrh	r1, [r4, #306]
 	cmp	r2, r3
-	bne	.L1525
-.L1532:
+	bne	.L1530
+.L1537:
 	ldrh	r2, [r4, #128]
 	movs	r3, #0
 	str	r3, [r4, #3448]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1545
-.L1526:
+	bne	.L1550
+.L1531:
 	movs	r0, #0
-.L1524:
+.L1529:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1525:
-	ldr	r5, .L1548+4
-	cbz	r0, .L1528
+.L1530:
+	ldr	r5, .L1553+4
+	cbz	r0, .L1533
 	ldrh	r2, [r5, #4]
 	cmp	r2, r3
-	beq	.L1529
-.L1530:
+	beq	.L1534
+.L1535:
 	movs	r1, #2
-.L1528:
-	ldr	r0, .L1548+8
+.L1533:
+	ldr	r0, .L1553+8
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r5, #4]
 	movw	r3, #65535
 	str	r0, [sp, #4]
 	cmp	r2, r3
-	beq	.L1532
+	beq	.L1537
 	movs	r0, #1
-	b	.L1524
-.L1529:
+	b	.L1529
+.L1534:
 	movs	r3, #0
 	strh	r3, [r5, #4]	@ movhi
 	ldrh	r3, [r4, #228]
 	cmp	r3, #17
-	bhi	.L1530
-	b	.L1528
-.L1545:
+	bhi	.L1535
+	b	.L1533
+.L1550:
 	ldrb	r1, [r4, #135]	@ zero_extendqisi2
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #3208]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1533
+	beq	.L1538
 	movs	r2, #164
-	ldr	r1, .L1548+12
-	ldr	r0, .L1548+16
+	ldr	r1, .L1553+12
+	ldr	r0, .L1553+16
 	bl	sftl_printk
-.L1533:
+.L1538:
 	ldrb	r3, [r4, #135]	@ zero_extendqisi2
 	movs	r5, #0
 	ldrh	r0, [r4, #306]
@@ -10483,20 +10486,20 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r4, #3208]
 	add	r3, r3, r2
 	str	r3, [r4, #2580]
-.L1534:
+.L1539:
 	ldrh	r2, [r4, #3208]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1538
+	bhi	.L1543
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #128]
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1539
+	beq	.L1544
 	bl	INSERT_DATA_LIST
-.L1540:
+.L1545:
 	movw	r6, #65535
 	movs	r5, #0
 	strh	r6, [r4, #128]	@ movhi
@@ -10509,11 +10512,11 @@ FtlGcFreeTempBlock:
 	strh	r6, [r4, #176]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1526
+	ble	.L1531
 	movs	r3, #20
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1526
-.L1538:
+	b	.L1531
+.L1543:
 	uxth	r7, r5
 	ldr	r9, [r4, #3204]
 	ldr	r3, [r4, #2556]
@@ -10521,18 +10524,18 @@ FtlGcFreeTempBlock:
 	add	r6, r9, r7
 	ldr	r0, [r6, #8]
 	cmp	r0, r3
-	bcc	.L1535
-.L1546:
+	bcc	.L1540
+.L1551:
 	ldrh	r0, [r4, #128]
-	b	.L1547
-.L1535:
+	b	.L1552
+.L1540:
 	movs	r2, #0
 	add	r1, sp, #4
 	bl	log2phys
 	ldr	r0, [r9, r7]
 	ldr	r3, [sp, #4]
 	cmp	r0, r3
-	bne	.L1537
+	bne	.L1542
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
@@ -10541,22 +10544,22 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r6, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1547:
+.L1552:
 	bl	decrement_vpc_count
-	b	.L1536
-.L1537:
+	b	.L1541
+.L1542:
 	ldr	r2, [r6, #4]
 	cmp	r3, r2
-	bne	.L1546
-.L1536:
+	bne	.L1551
+.L1541:
 	adds	r5, r5, #1
-	b	.L1534
-.L1539:
+	b	.L1539
+.L1544:
 	bl	INSERT_FREE_LIST
-	b	.L1540
-.L1549:
+	b	.L1545
+.L1554:
 	.align	2
-.L1548:
+.L1553:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+128
@@ -10577,25 +10580,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1552
+	ldr	r4, .L1557
 	ldrh	r1, [r4, #306]
 	add	r0, r4, #128
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #130]
 	ldrh	r3, [r4, #306]
 	cmp	r2, r3
-	bcc	.L1550
+	bcc	.L1555
 	addw	r0, r4, #3396
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
 	str	r3, [r4, #3448]
-.L1550:
+.L1555:
 	pop	{r4, pc}
-.L1553:
+.L1558:
 	.align	2
-.L1552:
+.L1557:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10613,7 +10616,7 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1555
+	ldr	r4, .L1560
 	add	r6, r4, #28
 	str	r5, [r4, #3480]
 	mov	r0, r6
@@ -10630,9 +10633,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1556:
+.L1561:
 	.align	2
-.L1555:
+.L1560:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10650,30 +10653,30 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1565
+	ldr	r4, .L1570
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3172]
 	ldr	r0, [r4, #3296]
 	bl	FlashProgPages
-.L1558:
+.L1563:
 	ldr	r1, [r4, #3172]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1561
+	bhi	.L1566
 	ldr	r0, [r4, #3296]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #132]
 	movs	r0, #0
 	str	r0, [r4, #3172]
-	cbnz	r3, .L1557
+	cbnz	r3, .L1562
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	movs	r0, #1
-.L1557:
+.L1562:
 	pop	{r4, r5, r6, pc}
-.L1561:
+.L1566:
 	muls	r3, r6, r3
 	ldr	r2, [r4, #3296]
 	adds	r5, r5, #1
@@ -10686,10 +10689,10 @@ Ftl_gc_temp_data_write_back:
 	ldrne	r2, [r0, #8]
 	ldr	r0, [r0, #12]
 	bl	FtlGcUpdatePage
-	b	.L1558
-.L1566:
+	b	.L1563
+.L1571:
 	.align	2
-.L1565:
+.L1570:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10707,17 +10710,17 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1570
+	ldr	r4, .L1575
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	beq	.L1568
+	beq	.L1573
 	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1569
-.L1568:
+	cbnz	r3, .L1574
+.L1573:
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1570+4
+	ldr	r0, .L1575+4
 	strb	r5, [r4, #136]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #3200]	@ movhi
@@ -10726,13 +10729,13 @@ Ftl_get_new_temp_ppa:
 	mov	r0, r5
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1569:
-	ldr	r0, .L1570+4
+.L1574:
+	ldr	r0, .L1575+4
 	pop	{r3, r4, r5, lr}
 	b	get_new_active_ppa
-.L1571:
+.L1576:
 	.align	2
-.L1570:
+.L1575:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+128
 	.fnend
@@ -10748,7 +10751,7 @@ rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1703
+	ldr	r3, .L1708
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
@@ -10757,21 +10760,21 @@ rk_ftl_garbage_collect:
 	mov	r4, r3
 	ldr	r0, [r3, #3276]
 	cmp	r0, #0
-	bne	.L1655
+	bne	.L1660
 	ldrh	r2, [r3, #2532]
 	cmp	r2, #47
-	bls	.L1572
-	ldr	r2, .L1703+4
+	bls	.L1577
+	ldr	r2, .L1708+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1574
-.L1577:
+	bne	.L1579
+.L1582:
 	ldrh	r2, [r4, #224]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1575
-.L1576:
+	bne	.L1580
+.L1581:
 	bl	FtlReadRefresh
 	ldr	r3, [r4, #3160]
 	movw	r7, #65535
@@ -10780,121 +10783,121 @@ rk_ftl_garbage_collect:
 	add	r3, r3, r9, lsl #7
 	cmp	r1, r7
 	str	r3, [r4, #3160]
-	bne	.L1578
+	bne	.L1583
 	ldrh	r2, [r4, #128]
 	cmp	r2, r1
-	bne	.L1579
+	bne	.L1584
 	ldrh	r6, [r4, #226]
 	cmp	r6, r2
-	bne	.L1580
+	bne	.L1585
 	ldrh	r2, [r4, #228]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1580
+	bls	.L1585
 	movs	r5, #0
 	str	r5, [r4, #3160]
 	strh	r5, [r4, #3664]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r6
 	mov	r7, r0
-	bne	.L1659
+	bne	.L1664
 	ldrh	r2, [r4, #228]
 	ldrh	r3, [r4, #3158]
 	cmp	r2, r3
-	bcs	.L1583
+	bcs	.L1588
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r7
-	beq	.L1585
+	beq	.L1590
 	mov	r0, r3
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1586
+	bhi	.L1591
 	mov	r0, r5
 	bl	List_get_gc_head_node
 	uxth	r5, r0
 	movs	r3, #128
 	strh	r3, [r4, #3158]	@ movhi
 	cmp	r5, r7
-	bne	.L1582
-.L1585:
+	bne	.L1587
+.L1590:
 	bl	FtlGcReFreshBadBlk
 	cmp	r9, #0
-	bne	.L1588
+	bne	.L1593
 	movw	r3, #65535
 	cmp	r7, r3
-	bne	.L1588
-.L1653:
+	bne	.L1593
+.L1658:
 	ldrh	r3, [r4, #228]
 	cmp	r3, #24
-	bhi	.L1660
+	bhi	.L1665
 	cmp	r3, #16
 	ldrh	r6, [r4, #306]
-	bls	.L1590
+	bls	.L1595
 	lsrs	r6, r6, #5
-.L1589:
+.L1594:
 	ldrh	r2, [r4, #3156]
 	cmp	r2, r3
-	bcs	.L1593
+	bcs	.L1598
 	ldrh	r3, [r4, #128]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1594
+	bne	.L1599
 	ldrh	r2, [r4, #226]
 	cmp	r2, r3
-	bne	.L1594
+	bne	.L1599
 	ldrh	r0, [r4, #3664]
-	cbnz	r0, .L1595
+	cbnz	r0, .L1600
 	ldr	r3, [r4, #2556]
 	ldr	r2, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1596
-.L1595:
+	bcs	.L1601
+.L1600:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1699:
+.L1704:
 	strh	r3, [r4, #3156]	@ movhi
 	movs	r3, #0
 	str	r3, [r4, #3168]
-.L1572:
+.L1577:
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1574:
+.L1579:
 	ldrh	r3, [r3, #128]
 	cmp	r3, r2
-	beq	.L1577
+	beq	.L1582
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L1577
+	beq	.L1582
 	movs	r0, #1
-	b	.L1572
-.L1575:
+	b	.L1577
+.L1580:
 	ldrh	r3, [r4, #226]
 	cmp	r3, r1
 	itt	eq
 	strheq	r2, [r4, #226]	@ movhi
 	strheq	r3, [r4, #224]	@ movhi
-	b	.L1576
-.L1586:
+	b	.L1581
+.L1591:
 	movs	r3, #64
-.L1698:
+.L1703:
 	strh	r3, [r4, #3158]	@ movhi
-	b	.L1585
-.L1583:
+	b	.L1590
+.L1588:
 	movs	r3, #80
-	b	.L1698
-.L1659:
+	b	.L1703
+.L1664:
 	mov	r5, r0
-.L1582:
+.L1587:
 	ldr	r3, [r4, #76]
 	mov	r7, r5
 	ldrh	r1, [r4, #3156]
@@ -10902,64 +10905,64 @@ rk_ftl_garbage_collect:
 	ldrh	r3, [r3, r5, lsl #1]
 	str	r1, [sp, #4]
 	ldr	r1, [r4, #2540]
-	ldr	r0, .L1703+8
+	ldr	r0, .L1708+8
 	ldrh	r1, [r1, r5, lsl #1]
 	str	r1, [sp]
 	mov	r1, r5
 	bl	sftl_printk
-	b	.L1585
-.L1590:
+	b	.L1590
+.L1595:
 	cmp	r3, #12
-	bls	.L1591
+	bls	.L1596
 	lsrs	r6, r6, #4
-	b	.L1589
-.L1591:
+	b	.L1594
+.L1596:
 	cmp	r3, #8
-	bls	.L1589
+	bls	.L1594
 	lsrs	r6, r6, #2
-	b	.L1589
-.L1660:
+	b	.L1594
+.L1665:
 	movs	r6, #1
-	b	.L1589
-.L1596:
+	b	.L1594
+.L1601:
 	movs	r3, #18
-	b	.L1699
-.L1594:
+	b	.L1704
+.L1599:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3156]	@ movhi
-.L1593:
+.L1598:
 	ldrh	r3, [r4, #3210]
-	cbz	r3, .L1661
+	cbz	r3, .L1666
 	adds	r6, r6, #32
 	uxth	r6, r6
-.L1661:
+.L1666:
 	movw	r7, #65535
-.L1599:
+.L1604:
 	ldrh	r3, [r4, #176]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1608
+	bne	.L1613
 	cmp	r7, r3
-	beq	.L1609
+	beq	.L1614
 	strh	r7, [r4, #176]	@ movhi
-.L1610:
+.L1615:
 	ldrh	r0, [r4, #176]
 	movw	r5, #65535
 	movs	r3, #0
 	strb	r3, [r4, #184]
 	cmp	r0, r5
-	beq	.L1608
+	beq	.L1613
 	bl	IsBlkInGcList
-	cbz	r0, .L1613
+	cbz	r0, .L1618
 	strh	r5, [r4, #176]	@ movhi
-.L1613:
+.L1618:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1608
-	ldr	r0, .L1703+12
+	beq	.L1613
+	ldr	r0, .L1708+12
 	bl	make_superblock
 	movs	r3, #0
 	ldrh	r2, [r4, #176]
@@ -10969,62 +10972,62 @@ rk_ftl_garbage_collect:
 	ldr	r3, [r4, #76]
 	ldrh	r3, [r3, r2, lsl #1]
 	strh	r3, [r4, #3668]	@ movhi
-.L1608:
+.L1613:
 	ldrh	r3, [r4, #176]
 	ldrh	r2, [r4, #28]
 	cmp	r2, r3
-	beq	.L1614
+	beq	.L1619
 	ldrh	r2, [r4, #80]
 	cmp	r2, r3
-	beq	.L1614
+	beq	.L1619
 	ldrh	r2, [r4, #128]
 	cmp	r2, r3
-	bne	.L1615
-.L1614:
+	bne	.L1620
+.L1619:
 	movw	r3, #65535
 	strh	r3, [r4, #176]	@ movhi
-.L1615:
-	ldr	r5, .L1703
+.L1620:
+	ldr	r5, .L1708
 	mov	r4, r5
-.L1651:
+.L1656:
 	ldrh	r10, [r5, #176]
 	movw	r3, #65535
 	cmp	r10, r3
-	bne	.L1616
+	bne	.L1621
 	movs	r3, #0
 	mov	fp, r3
 	str	r3, [r5, #3168]
-.L1617:
+.L1622:
 	ldrh	r8, [r4, #3164]
 	mov	r0, r8
 	bl	List_get_gc_head_node
 	uxth	r2, r0
 	cmp	r2, r10
 	strh	r2, [r4, #176]	@ movhi
-	bne	.L1618
+	bne	.L1623
 	movs	r3, #0
 	movs	r0, #8
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1572
-.L1600:
+	b	.L1577
+.L1605:
 	movs	r3, #0
 	ldrh	r2, [r4, #228]
 	str	r3, [r4, #3168]
 	ldrh	r3, [r4, #3156]
 	cmp	r2, r3
-	bls	.L1601
+	bls	.L1606
 	ldrh	r3, [r4, #3664]
-	cbnz	r3, .L1602
+	cbnz	r3, .L1607
 	ldr	r3, [r4, #2556]
 	ldr	r2, [r4, #2552]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1603
-.L1602:
+	bcs	.L1608
+.L1607:
 	ldrh	r3, [r4, #2624]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1700:
+.L1705:
 	strh	r3, [r4, #3156]	@ movhi
 	bl	FtlReadRefresh
 	movs	r0, #0
@@ -11033,17 +11036,17 @@ rk_ftl_garbage_collect:
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #4
-	bls	.L1601
-.L1702:
+	bls	.L1606
+.L1707:
 	ldrh	r0, [r4, #3664]
-	b	.L1572
-.L1603:
+	b	.L1577
+.L1608:
 	movs	r3, #18
-	b	.L1700
-.L1601:
+	b	.L1705
+.L1606:
 	ldrh	r0, [r4, #3664]
 	cmp	r0, #0
-	bne	.L1605
+	bne	.L1610
 	ldrh	r5, [r4, #2624]
 	add	r3, r5, r5, lsl #1
 	asrs	r3, r3, #2
@@ -11057,43 +11060,43 @@ rk_ftl_garbage_collect:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1606
+	ble	.L1611
 	ldrh	r3, [r4, #228]
 	subs	r5, r5, #1
 	cmp	r3, r5
-	blt	.L1606
+	blt	.L1611
 	bl	FtlReadRefresh
-	b	.L1702
-.L1606:
+	b	.L1707
+.L1611:
 	cmp	r2, #0
-	bne	.L1605
+	bne	.L1610
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #228]
 	adds	r0, r0, #1
-	b	.L1572
-.L1704:
+	b	.L1577
+.L1709:
 	.align	2
-.L1703:
+.L1708:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC124
 	.word	.LANCHOR0+176
-.L1609:
+.L1614:
 	ldrh	r3, [r4, #226]
 	cmp	r3, r7
-	beq	.L1610
+	beq	.L1615
 	ldr	r2, [r4, #76]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1611
+	cbnz	r3, .L1616
 	strh	r7, [r4, #226]	@ movhi
-.L1611:
+.L1616:
 	ldrh	r3, [r4, #226]
 	strh	r3, [r4, #176]	@ movhi
 	movw	r3, #65535
 	strh	r3, [r4, #226]	@ movhi
-	b	.L1610
-.L1618:
+	b	.L1615
+.L1623:
 	str	r0, [sp, #16]
 	mov	r0, r2
 	str	r2, [sp, #12]
@@ -11101,10 +11104,10 @@ rk_ftl_garbage_collect:
 	bl	IsBlkInGcList
 	ldr	r2, [sp, #12]
 	ldr	r3, [sp, #16]
-	cbz	r0, .L1619
+	cbz	r0, .L1624
 	strh	r8, [r4, #3164]	@ movhi
-	b	.L1617
-.L1619:
+	b	.L1622
+.L1624:
 	ldrh	lr, [r4, #236]
 	uxth	r8, r8
 	ldrh	r1, [r4, #306]
@@ -11115,67 +11118,67 @@ rk_ftl_garbage_collect:
 	ldrh	ip, [r0, r3, lsl #1]
 	add	lr, r1, r1, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1621
+	bgt	.L1626
 	cmp	r8, #48
-	bls	.L1622
+	bls	.L1627
 	cmp	ip, #8
-	bls	.L1622
+	bls	.L1627
 	ldrh	ip, [r4, #3200]
 	cmp	ip, #35
-	bhi	.L1622
-.L1621:
+	bhi	.L1627
+.L1626:
 	strh	fp, [r4, #3164]	@ movhi
-.L1622:
+.L1627:
 	ldrh	r3, [r0, r3, lsl #1]
 	cmp	r1, r3
-	bgt	.L1623
+	bgt	.L1628
 	cmp	r7, r10
-	bne	.L1623
+	bne	.L1628
 	ldrh	r1, [r4, #3164]
 	cmp	r1, #3
-	bhi	.L1623
+	bhi	.L1628
 	movs	r3, #0
 	strh	r7, [r4, #176]	@ movhi
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1702
-.L1623:
-	cbnz	r3, .L1624
+	b	.L1707
+.L1628:
+	cbnz	r3, .L1629
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #3164]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3164]	@ movhi
-	b	.L1617
-.L1624:
+	b	.L1622
+.L1629:
 	movs	r3, #0
 	strb	r3, [r4, #184]
 	ldrh	r3, [r4, #28]
 	cmp	r3, r2
-	bne	.L1625
+	bne	.L1630
 	movw	r2, #717
-	ldr	r1, .L1705
-	ldr	r0, .L1705+4
+	ldr	r1, .L1710
+	ldr	r0, .L1710+4
 	bl	sftl_printk
-.L1625:
+.L1630:
 	ldrh	r2, [r4, #176]
 	ldrh	r3, [r4, #80]
 	cmp	r2, r3
-	bne	.L1626
+	bne	.L1631
 	movw	r2, #718
-	ldr	r1, .L1705
-	ldr	r0, .L1705+4
+	ldr	r1, .L1710
+	ldr	r0, .L1710+4
 	bl	sftl_printk
-.L1626:
+.L1631:
 	ldrh	r2, [r4, #176]
 	ldrh	r3, [r4, #128]
 	cmp	r2, r3
-	bne	.L1627
+	bne	.L1632
 	movw	r2, #719
-	ldr	r1, .L1705
-	ldr	r0, .L1705+4
+	ldr	r1, .L1710
+	ldr	r0, .L1710+4
 	bl	sftl_printk
-.L1627:
-	ldr	r0, .L1705+8
+.L1632:
+	ldr	r0, .L1710+8
 	bl	make_superblock
 	ldrh	r1, [r4, #176]
 	movs	r3, #0
@@ -11185,13 +11188,13 @@ rk_ftl_garbage_collect:
 	strh	r3, [r4, #178]	@ movhi
 	strb	r3, [r4, #182]
 	strh	r2, [r4, #3668]	@ movhi
-.L1616:
+.L1621:
 	movs	r3, #1
 	str	r3, [r4, #3276]
 	ldrh	r3, [r4, #306]
 	str	r3, [sp, #16]
 	cmp	r9, #0
-	beq	.L1628
+	beq	.L1633
 	ldr	r2, [sp, #16]
 	ldrh	r3, [r4, #236]
 	ldrh	r1, [r4, #176]
@@ -11203,7 +11206,7 @@ rk_ftl_garbage_collect:
 	addmi	r3, r3, #3
 	add	r6, r6, r3, asr #2
 	uxth	r6, r6
-.L1628:
+.L1633:
 	ldrh	r3, [r4, #178]
 	ldr	r1, [sp, #16]
 	adds	r2, r3, r6
@@ -11214,11 +11217,11 @@ rk_ftl_garbage_collect:
 	mov	r3, #0
 	it	gt
 	uxthgt	r6, r6
-.L1701:
+.L1706:
 	str	r3, [sp, #20]
 	ldrh	r3, [sp, #20]
 	cmp	r6, r3
-	bls	.L1639
+	bls	.L1644
 	ldr	r3, [sp, #20]
 	movw	r10, #65535
 	ldrh	r8, [r5, #178]
@@ -11226,17 +11229,17 @@ rk_ftl_garbage_collect:
 	ldrh	ip, [r5, #236]
 	ldr	r0, [r5, #3188]
 	add	r8, r8, r3
-	ldr	r3, .L1705+12
+	ldr	r3, .L1710+12
 	str	r3, [sp, #24]
 	movs	r3, #0
 	str	r3, [sp, #12]
-	b	.L1640
-.L1633:
+	b	.L1645
+.L1638:
 	ldr	r1, [sp, #24]
 	ldrh	r2, [r1, #2]!
 	cmp	r2, r10
 	str	r1, [sp, #24]
-	beq	.L1632
+	beq	.L1637
 	ldr	r1, [sp, #12]
 	orr	r2, r8, r2, lsl #10
 	mla	lr, fp, r1, r0
@@ -11245,47 +11248,47 @@ rk_ftl_garbage_collect:
 	adds	r2, r2, #1
 	uxth	r2, r2
 	str	r2, [sp, #12]
-.L1632:
+.L1637:
 	adds	r3, r3, #1
-.L1640:
+.L1645:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1633
+	bhi	.L1638
 	mov	fp, #0
 	ldrb	r2, [r5, #184]	@ zero_extendqisi2
 	ldr	r1, [sp, #12]
 	bl	FlashReadPages
-.L1634:
+.L1639:
 	ldr	r2, [sp, #12]
 	uxth	r3, fp
 	cmp	r2, r3
-	bhi	.L1638
+	bhi	.L1643
 	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	b	.L1701
-.L1638:
+	b	.L1706
+.L1643:
 	mov	r8, #20
 	ldr	r3, [r5, #3188]
 	mul	r8, r8, fp
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L1635
+	beq	.L1640
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1635
+	bne	.L1640
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1636
+	bne	.L1641
 	movw	r2, #753
-	ldr	r1, .L1705
-	ldr	r0, .L1705+4
+	ldr	r1, .L1710
+	ldr	r0, .L1710+4
 	str	r3, [sp, #24]
 	bl	sftl_printk
 	ldr	r3, [sp, #24]
-.L1636:
+.L1641:
 	movs	r2, #0
 	mov	r0, r3
 	add	r1, sp, #32
@@ -11295,7 +11298,7 @@ rk_ftl_garbage_collect:
 	add	r0, r0, r8
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1635
+	bne	.L1640
 	ldrh	r3, [r4, #3666]
 	movs	r2, #20
 	ldr	r1, [r4, #3172]
@@ -11336,66 +11339,66 @@ rk_ftl_garbage_collect:
 	ldrb	r2, [r4, #135]	@ zero_extendqisi2
 	ldr	r3, [r4, #3172]
 	cmp	r2, r3
-	beq	.L1637
+	beq	.L1642
 	ldrh	r3, [r4, #132]
-	cbnz	r3, .L1635
-.L1637:
+	cbnz	r3, .L1640
+.L1642:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1635
-	ldr	r3, .L1705+16
+	cbz	r0, .L1640
+	ldr	r3, .L1710+16
 	movs	r2, #0
 	movw	r1, #65535
 	str	r2, [r3, #3276]
 	strh	r1, [r3, #176]	@ movhi
 	strh	r2, [r3, #178]	@ movhi
 	ldrh	r0, [r3, #3664]
-	b	.L1572
-.L1635:
+	b	.L1577
+.L1640:
 	add	fp, fp, #1
-	b	.L1634
-.L1639:
+	b	.L1639
+.L1644:
 	ldrh	r3, [r5, #178]
 	add	r6, r6, r3
 	ldr	r3, [sp, #16]
 	uxth	r6, r6
 	cmp	r3, r6
 	strh	r6, [r5, #178]	@ movhi
-	bhi	.L1641
+	bhi	.L1646
 	ldr	r3, [r5, #3172]
-	cbz	r3, .L1642
+	cbz	r3, .L1647
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1642
+	cbz	r0, .L1647
 	movs	r3, #0
 	ldrh	r0, [r5, #3664]
 	str	r3, [r5, #3276]
-	b	.L1572
-.L1642:
+	b	.L1577
+.L1647:
 	ldrh	r6, [r5, #3666]
-	cbnz	r6, .L1643
+	cbnz	r6, .L1648
 	ldrh	r2, [r5, #176]
 	ldr	r3, [r5, #76]
 	ldrh	r3, [r3, r2, lsl #1]
-	cbz	r3, .L1643
-.L1644:
+	cbz	r3, .L1648
+.L1649:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcs	.L1649
+	bcs	.L1654
 	movs	r2, #0
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
 	ldr	r0, [sp, #36]
 	adds	r3, r0, #1
-	beq	.L1645
+	beq	.L1650
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r5, #176]
 	cmp	r3, r0
-	bne	.L1645
-.L1649:
+	bne	.L1650
+.L1654:
 	ldr	r3, [r5, #2556]
 	cmp	r6, r3
-	bcc	.L1643
+	bcc	.L1648
 	ldrh	r2, [r5, #176]
 	movs	r1, #0
 	ldr	r3, [r5, #76]
@@ -11404,69 +11407,69 @@ rk_ftl_garbage_collect:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1643:
+.L1648:
 	movw	r3, #65535
 	strh	r3, [r5, #176]	@ movhi
-.L1641:
+.L1646:
 	movs	r3, #0
 	str	r3, [r5, #3276]
 	ldrh	r3, [r5, #228]
 	cmp	r3, #2
-	bhi	.L1650
+	bhi	.L1655
 	ldrh	r6, [r5, #306]
-	b	.L1651
-.L1645:
-	adds	r6, r6, #1
-	b	.L1644
+	b	.L1656
 .L1650:
+	adds	r6, r6, #1
+	b	.L1649
+.L1655:
 	ldrh	r0, [r5, #3664]
 	cmp	r0, #0
-	bne	.L1572
+	bne	.L1577
 	adds	r0, r3, #1
-	b	.L1572
-.L1655:
+	b	.L1577
+.L1660:
 	movs	r0, #0
-	b	.L1572
-.L1578:
+	b	.L1577
+.L1583:
 	cmp	r9, #0
-	beq	.L1653
-.L1588:
+	beq	.L1658
+.L1593:
 	ldrh	r2, [r4, #128]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1664
-.L1654:
+	bne	.L1669
+.L1659:
 	ldrh	r3, [r4, #226]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1664
+	bne	.L1669
 	cmp	r7, r3
-	bne	.L1664
+	bne	.L1669
 	ldrh	r3, [r4, #176]
 	cmp	r3, r7
-	beq	.L1600
-.L1605:
+	beq	.L1605
+.L1610:
 	movw	r7, #65535
-.L1664:
+.L1669:
 	movs	r6, #1
-	b	.L1599
-.L1580:
+	b	.L1604
+.L1585:
 	cmp	r9, #0
-	beq	.L1653
+	beq	.L1658
 	movw	r7, #65535
-	b	.L1654
-.L1706:
+	b	.L1659
+.L1711:
 	.align	2
-.L1705:
+.L1710:
 	.word	.LANCHOR1+568
 	.word	.LC8
 	.word	.LANCHOR0+176
 	.word	.LANCHOR0+190
 	.word	.LANCHOR0
-.L1579:
+.L1584:
 	cmp	r9, #0
-	bne	.L1605
-	b	.L1653
+	bne	.L1610
+	b	.L1658
 	.fnend
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	1
@@ -11488,30 +11491,30 @@ FtlRead:
 	mov	r7, r1
 	mov	r10, r3
 	str	r2, [sp, #20]
-	bne	.L1708
+	bne	.L1713
 	mov	r2, r3
 	ldr	r1, [sp, #20]
 	add	r0, r7, #256
 	bl	FtlVendorPartRead
 	mov	r8, r0
-.L1707:
+.L1712:
 	mov	r0, r8
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1708:
+.L1713:
 	ldr	r3, [sp, #20]
-	ldr	r4, .L1740
+	ldr	r4, .L1745
 	adds	r3, r1, r3
 	str	r3, [sp, #8]
 	ldr	r2, [sp, #8]
 	ldr	r3, [r4, #344]
 	cmp	r2, r3
-	bhi	.L1729
-	ldr	r3, .L1740+4
+	bhi	.L1734
+	ldr	r3, .L1745+4
 	ldr	r3, [r3]
 	adds	r5, r3, #1
-	beq	.L1730
+	beq	.L1735
 	ldrh	r5, [r4, #262]
 	mov	r0, r7
 	mov	r9, #0
@@ -11540,45 +11543,45 @@ FtlRead:
 	ldr	r3, [r4, #2560]
 	add	r3, r3, r2
 	str	r3, [r4, #2560]
-.L1710:
+.L1715:
 	ldr	r3, [sp, #4]
-	cbnz	r3, .L1727
-	ldr	r3, .L1740
+	cbnz	r3, .L1732
+	ldr	r3, .L1745
 	ldrh	r2, [r3, #3210]
-	cbnz	r2, .L1728
+	cbnz	r2, .L1733
 	ldrh	r3, [r3, #228]
 	cmp	r3, #31
-	bhi	.L1707
-.L1728:
+	bhi	.L1712
+.L1733:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1707
-.L1727:
+	b	.L1712
+.L1732:
 	movs	r2, #0
 	add	r1, sp, #52
 	mov	r0, r5
 	bl	log2phys
 	ldr	r2, [sp, #52]
 	adds	r0, r2, #1
-	bne	.L1711
+	bne	.L1716
 	mov	fp, #0
-.L1712:
+.L1717:
 	ldrh	r0, [r4, #262]
 	cmp	fp, r0
-	bcc	.L1714
-.L1715:
+	bcc	.L1719
+.L1720:
 	ldr	r3, [sp, #4]
 	adds	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #4]
-	beq	.L1719
+	beq	.L1724
 	ldrh	r3, [r4, #236]
 	cmp	r6, r3, lsl #2
-	bne	.L1710
-.L1719:
+	bne	.L1715
+.L1724:
 	cmp	r6, #0
-	beq	.L1710
+	beq	.L1715
 	movs	r2, #0
 	mov	r1, r6
 	ldr	r0, [r4, #3292]
@@ -11592,7 +11595,7 @@ FtlRead:
 	ldr	r3, [sp, #28]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1726:
+.L1731:
 	movs	r3, #20
 	ldr	r2, [r4, #3292]
 	mul	r3, r3, fp
@@ -11600,20 +11603,20 @@ FtlRead:
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1721
+	bne	.L1726
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3316]
 	cmp	r1, r2
-	bne	.L1722
+	bne	.L1727
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1739:
+.L1744:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1722:
+.L1727:
 	ldr	ip, [r4, #3292]
 	add	r2, ip, r3
 	ldr	r0, [r2, #12]
@@ -11633,33 +11636,32 @@ FtlRead:
 	streq	r1, [r4, #2716]
 	ldr	r3, [ip, r3]
 	cmp	r3, #256
-	bne	.L1725
+	bne	.L1730
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1725:
+.L1730:
 	add	fp, fp, #1
 	cmp	r6, fp
-	bne	.L1726
+	bne	.L1731
 	movs	r6, #0
-	b	.L1710
-.L1714:
+	b	.L1715
+.L1719:
 	mla	r0, r0, r5, fp
 	cmp	r7, r0
-	bhi	.L1713
+	bhi	.L1718
 	ldr	r3, [sp, #8]
 	cmp	r3, r0
-	bls	.L1713
+	bls	.L1718
 	subs	r0, r0, r7
-	mov	r2, #512
-	movs	r1, #0
+	mov	r1, #512
 	add	r0, r10, r0, lsl #9
-	bl	ftl_memset
-.L1713:
+	bl	__memzero
+.L1718:
 	add	fp, fp, #1
-	b	.L1712
-.L1711:
+	b	.L1717
+.L1716:
 	ldr	r3, [r4, #3292]
 	movs	r1, #20
 	ldrh	fp, [r4, #262]
@@ -11667,7 +11669,7 @@ FtlRead:
 	str	r2, [r3, #4]
 	ldr	r2, [sp, #12]
 	cmp	r5, r2
-	bne	.L1716
+	bne	.L1721
 	ldr	r2, [r4, #3316]
 	mov	r1, fp
 	mov	r0, r7
@@ -11684,9 +11686,9 @@ FtlRead:
 	cmp	r3, fp
 	str	r3, [sp, #28]
 	ldr	r3, [sp, #32]
-	bne	.L1717
+	bne	.L1722
 	str	r10, [r3, #8]
-.L1717:
+.L1722:
 	ldrh	r2, [r4, #316]
 	ldr	r1, [r4, #3340]
 	str	r5, [r3, #16]
@@ -11695,34 +11697,34 @@ FtlRead:
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1715
-.L1716:
+	b	.L1720
+.L1721:
 	ldr	r2, [sp, #16]
 	cmp	r5, r2
-	bne	.L1718
+	bne	.L1723
 	ldr	r2, [r4, #3320]
 	ldr	r1, [sp, #8]
 	str	r2, [r3, #8]
 	mul	r2, fp, r5
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1717
-.L1738:
+	bne	.L1722
+.L1743:
 	subs	r2, r2, r7
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1717
-.L1718:
+	b	.L1722
+.L1723:
 	mul	r2, r5, fp
-	b	.L1738
-.L1721:
+	b	.L1743
+.L1726:
 	ldr	r0, [sp, #16]
 	cmp	r0, r1
-	bne	.L1722
+	bne	.L1727
 	ldr	r1, [r2, #8]
 	ldr	r2, [r4, #3320]
 	cmp	r1, r2
-	bne	.L1722
+	bne	.L1727
 	str	r3, [sp, #44]
 	ldrh	r0, [r4, #262]
 	ldr	r3, [sp, #16]
@@ -11730,16 +11732,16 @@ FtlRead:
 	muls	r0, r3, r0
 	subs	r0, r0, r7
 	add	r0, r10, r0, lsl #9
-	b	.L1739
-.L1729:
+	b	.L1744
+.L1734:
 	mov	r8, #-1
-	b	.L1707
-.L1730:
+	b	.L1712
+.L1735:
 	mov	r8, r3
-	b	.L1707
-.L1741:
+	b	.L1712
+.L1746:
 	.align	2
-.L1740:
+.L1745:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11782,26 +11784,26 @@ FtlWrite:
 	mov	r10, r1
 	str	r2, [sp, #12]
 	str	r3, [sp, #8]
-	bne	.L1744
+	bne	.L1749
 	mov	r2, r3
 	ldr	r1, [sp, #12]
 	add	r0, r10, #256
 	bl	FtlVendorPartWrite
-.L1743:
+.L1748:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1744:
+.L1749:
 	ldr	r3, [sp, #12]
-	ldr	r5, .L1795
+	ldr	r5, .L1800
 	adds	r6, r1, r3
 	ldr	r3, [r5, #344]
 	cmp	r6, r3
-	bhi	.L1781
-	ldr	r4, .L1795+4
+	bhi	.L1786
+	ldr	r4, .L1800+4
 	ldr	r0, [r4]
 	adds	r7, r0, #1
-	beq	.L1743
+	beq	.L1748
 	ldrh	r7, [r5, #262]
 	mov	r3, #2048
 	str	r3, [r5, #3672]
@@ -11827,68 +11829,68 @@ FtlWrite:
 	add	r3, r3, r2
 	str	r3, [r5, #2568]
 	ldr	r3, [r4, #8]
-	cbz	r3, .L1783
+	cbz	r3, .L1788
 	ldrh	r2, [r5, #32]
 	add	r3, r5, #28
 	adds	r5, r5, #80
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1746:
+.L1751:
 	ldr	r7, [sp, #4]
-	ldr	r4, .L1795
-.L1747:
+	ldr	r4, .L1800
+.L1752:
 	ldr	r3, [sp]
-	cbnz	r3, .L1776
+	cbnz	r3, .L1781
 	mov	r0, r3
 	ldr	r1, [sp, #24]
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #228]
 	cmp	r3, #5
-	bls	.L1777
-.L1779:
+	bls	.L1782
+.L1784:
 	movs	r0, #0
-	b	.L1743
-.L1783:
+	b	.L1748
+.L1788:
 	adds	r5, r5, #28
-	b	.L1746
-.L1776:
+	b	.L1751
+.L1781:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #236]
 	cmp	r2, r3
-	bcc	.L1748
-	movw	r2, #1038
-	ldr	r1, .L1795+8
-	ldr	r0, .L1795+12
+	bcc	.L1753
+	movw	r2, #1041
+	ldr	r1, .L1800+8
+	ldr	r0, .L1800+12
 	bl	sftl_printk
-.L1748:
+.L1753:
 	ldrh	r2, [r5, #4]
-	cbnz	r2, .L1749
-	ldr	r3, .L1795+16
-	ldr	r6, .L1795+4
+	cbnz	r2, .L1754
+	ldr	r3, .L1800+16
+	ldr	r6, .L1800+4
 	cmp	r5, r3
-	bne	.L1750
+	bne	.L1755
 	ldrh	r8, [r4, #84]
 	cmp	r8, #0
-	bne	.L1751
+	bne	.L1756
 	add	r0, r5, #52
 	bl	allocate_new_data_superblock
 	str	r8, [r6, #8]
-.L1751:
-	ldr	r5, .L1795+16
-	ldr	r0, .L1795+16
+.L1756:
+	ldr	r5, .L1800+16
+	ldr	r0, .L1800+16
 	bl	allocate_new_data_superblock
 	ldr	r2, [r6, #8]
 	add	r3, r5, #52
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1752:
+.L1757:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1749
+	cbnz	r3, .L1754
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1749:
+.L1754:
 	ldrh	r2, [r5, #4]
 	ldr	r3, [sp]
 	cmp	r2, r3
@@ -11903,18 +11905,18 @@ FtlWrite:
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1753
-	movw	r2, #1071
-	ldr	r1, .L1795+8
-	ldr	r0, .L1795+12
+	bcc	.L1758
+	movw	r2, #1074
+	ldr	r1, .L1800+8
+	ldr	r0, .L1800+12
 	bl	sftl_printk
-.L1753:
+.L1758:
 	mov	fp, #0
-.L1754:
+.L1759:
 	ldr	r3, [sp, #36]
 	cmp	fp, r3
-	bne	.L1774
-.L1755:
+	bne	.L1779
+.L1760:
 	mov	r3, r5
 	movs	r2, #0
 	mov	r1, fp
@@ -11922,30 +11924,30 @@ FtlWrite:
 	bl	FtlProgPages
 	ldr	r3, [sp]
 	cmp	fp, r3
-	bls	.L1775
-	movw	r2, #1149
-	ldr	r1, .L1795+8
-	ldr	r0, .L1795+12
+	bls	.L1780
+	mov	r2, #1152
+	ldr	r1, .L1800+8
+	ldr	r0, .L1800+12
 	bl	sftl_printk
-.L1775:
+.L1780:
 	ldr	r3, [sp]
 	sub	r3, r3, fp
 	str	r3, [sp]
-	b	.L1747
-.L1750:
+	b	.L1752
+.L1755:
 	str	r2, [r6, #8]
 	ldrh	r2, [r4, #32]
-	cbnz	r2, .L1786
+	cbnz	r2, .L1791
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1752
-.L1786:
+	b	.L1757
+.L1791:
 	mov	r5, r3
-	b	.L1749
-.L1774:
+	b	.L1754
+.L1779:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1755
+	beq	.L1760
 	movs	r2, #0
 	add	r1, sp, #40
 	mov	r0, r7
@@ -11972,10 +11974,10 @@ FtlWrite:
 	bl	ftl_memset
 	ldr	r3, [sp, #4]
 	cmp	r7, r3
-	beq	.L1756
+	beq	.L1761
 	ldr	r3, [sp, #20]
 	cmp	r7, r3
-	bne	.L1791
+	bne	.L1796
 	ldrh	r2, [r4, #262]
 	ldr	r3, [sp, #12]
 	smulbb	r2, r2, r7
@@ -11984,8 +11986,8 @@ FtlWrite:
 	str	r3, [sp, #16]
 	subs	r6, r6, r2
 	uxth	r6, r6
-	b	.L1759
-.L1756:
+	b	.L1764
+.L1761:
 	ldrh	r6, [r4, #262]
 	mov	r0, r10
 	mov	r1, r6
@@ -11996,11 +11998,11 @@ FtlWrite:
 	cmp	r6, r3
 	it	cs
 	movcs	r6, r3
-.L1759:
+.L1764:
 	ldrh	r3, [r4, #262]
 	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	bne	.L1760
+	bne	.L1765
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	itte	ne
@@ -12013,16 +12015,16 @@ FtlWrite:
 	streq	r2, [r3, #8]
 	addne	r6, r2, r6, lsl #9
 	strne	r6, [r3, #8]
-.L1762:
+.L1767:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #236]
 	cmp	r2, r3
-	bcc	.L1771
-	movw	r2, #1140
-	ldr	r1, .L1795+8
-	ldr	r0, .L1795+12
+	bcc	.L1776
+	movw	r2, #1143
+	ldr	r1, .L1800+8
+	ldr	r0, .L1800+12
 	bl	sftl_printk
-.L1771:
+.L1776:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
@@ -12041,8 +12043,8 @@ FtlWrite:
 	str	r3, [r9, #12]
 	ldrh	r3, [r5]
 	strh	r3, [r9, #2]	@ movhi
-	b	.L1754
-.L1760:
+	b	.L1759
+.L1765:
 	cmp	r7, r3
 	ldr	r3, [r4, #3300]
 	ite	eq
@@ -12052,7 +12054,7 @@ FtlWrite:
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #40]
 	adds	r0, r3, #1
-	beq	.L1765
+	beq	.L1770
 	str	r3, [sp, #48]
 	movs	r1, #1
 	ldr	r3, [r4, #3300]
@@ -12067,66 +12069,66 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #44]
 	adds	r1, r3, #1
-	bne	.L1766
+	bne	.L1771
 	ldr	r2, [r4, #2716]
-	ldr	r0, .L1795+20
+	ldr	r0, .L1800+20
 	adds	r2, r2, #1
 	str	r2, [r4, #2716]
 	mov	r2, r7
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1769:
+.L1774:
 	ldr	r3, [sp, #4]
 	lsls	r2, r6, #9
 	cmp	r7, r3
-	bne	.L1770
+	bne	.L1775
 	ldr	r3, [r4, #3300]
 	ldr	r1, [sp, #8]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	ldr	r3, [sp, #16]
 	add	r0, r0, r3, lsl #9
-.L1793:
+.L1798:
 	bl	ftl_memcpy
-	b	.L1762
-.L1796:
+	b	.L1767
+.L1801:
 	.align	2
-.L1795:
+.L1800:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR1+591
 	.word	.LC8
 	.word	.LANCHOR0+28
 	.word	.LC125
-.L1766:
+.L1771:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1768
+	beq	.L1773
 	ldr	r3, [r4, #2716]
 	mov	r2, r7
-	ldr	r0, .L1797
+	ldr	r0, .L1802
 	adds	r3, r3, #1
 	str	r3, [r4, #2716]
 	ldr	r1, [r9, #8]
 	bl	sftl_printk
-.L1768:
+.L1773:
 	ldr	r3, [r9, #8]
 	cmp	r7, r3
-	beq	.L1769
-	movw	r2, #1125
-	ldr	r1, .L1797+4
-	ldr	r0, .L1797+8
+	beq	.L1774
+	mov	r2, #1128
+	ldr	r1, .L1802+4
+	ldr	r0, .L1802+8
 	bl	sftl_printk
-	b	.L1769
-.L1765:
+	b	.L1774
+.L1770:
 	ldr	r3, [r4, #3300]
 	movs	r1, #0
 	ldrh	r2, [r4, #314]
 	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1769
-.L1770:
+	b	.L1774
+.L1775:
 	ldrh	r1, [r4, #262]
 	ldr	r0, [sp, #8]
 	ldr	r3, [r4, #3300]
@@ -12135,8 +12137,8 @@ FtlWrite:
 	sub	r1, r1, r10
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1793
-.L1791:
+	b	.L1798
+.L1796:
 	ldr	r3, [r4, #3300]
 	ldr	r2, [sp, #8]
 	add	r8, r8, r3
@@ -12145,22 +12147,22 @@ FtlWrite:
 	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
 	str	r3, [r8, #8]
-	b	.L1762
-.L1777:
+	b	.L1767
+.L1782:
 	mov	r5, #256
 	movw	r6, #65535
-.L1780:
+.L1785:
 	ldrh	r3, [r4, #176]
 	cmp	r3, r6
-	bne	.L1778
+	bne	.L1783
 	ldrh	r3, [r4, #226]
 	cmp	r3, r6
-	bne	.L1778
+	bne	.L1783
 	movs	r0, #0
 	bl	List_get_gc_head_node
 	uxth	r0, r0
 	bl	FtlGcRefreshBlock
-.L1778:
+.L1783:
 	movs	r1, #1
 	movs	r3, #128
 	mov	r0, r1
@@ -12172,16 +12174,16 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	r3, [r4, #228]
 	cmp	r3, #2
-	bhi	.L1779
+	bhi	.L1784
 	subs	r5, r5, #1
-	bne	.L1780
-	b	.L1779
-.L1781:
+	bne	.L1785
+	b	.L1784
+.L1786:
 	mov	r0, #-1
-	b	.L1743
-.L1798:
+	b	.L1748
+.L1803:
 	.align	2
-.L1797:
+.L1802:
 	.word	.LC126
 	.word	.LANCHOR1+591
 	.word	.LC8
@@ -12219,7 +12221,7 @@ FtlLoadSysInfo:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #16
 	movs	r1, #0
-	ldr	r4, .L1830
+	ldr	r4, .L1835
 	ldr	r3, [r4, #3304]
 	ldrh	r2, [r4, #244]
 	ldr	r0, [r4, #76]
@@ -12231,32 +12233,32 @@ FtlLoadSysInfo:
 	ldrh	r0, [r4, #2628]
 	movw	r3, #65535
 	cmp	r0, r3
-	bne	.L1801
-.L1812:
+	bne	.L1806
+.L1817:
 	mov	r0, #-1
-.L1800:
+.L1805:
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1801:
+.L1806:
 	movs	r1, #1
-	ldr	r8, .L1830+20
+	ldr	r8, .L1835+20
 	bl	FtlGetLastWrittenPage
-	ldr	r9, .L1830+4
+	ldr	r9, .L1835+4
 	add	r7, r4, #3456
 	ldrsh	r6, [r4, #2628]
 	sxth	r5, r0
 	adds	r0, r0, #1
 	strh	r0, [r4, #2630]	@ movhi
-.L1803:
+.L1808:
 	cmp	r5, #0
-	bge	.L1809
+	bge	.L1814
 	movw	r2, #1465
-	ldr	r1, .L1830+4
-	ldr	r0, .L1830+8
+	ldr	r1, .L1835+4
+	ldr	r0, .L1835+8
 	bl	sftl_printk
-	b	.L1808
-.L1809:
+	b	.L1813
+.L1814:
 	orr	r3, r5, r6, lsl #10
 	movs	r2, #1
 	mov	r1, r2
@@ -12268,15 +12270,15 @@ FtlLoadSysInfo:
 	ldr	r3, [r4, #3468]
 	ldr	r10, [r3, #12]
 	cmp	r10, #0
-	beq	.L1804
+	beq	.L1809
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1804
+	beq	.L1809
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	cmp	r10, r0
-	beq	.L1804
+	beq	.L1809
 	ldrh	r3, [r4, #2632]
 	mov	r2, r6
 	str	r0, [sp, #8]
@@ -12284,48 +12286,48 @@ FtlLoadSysInfo:
 	str	r10, [sp, #4]
 	str	r3, [sp]
 	mov	r3, r5
-	ldr	r0, .L1830+12
+	ldr	r0, .L1835+12
 	bl	sftl_printk
-	cbnz	r5, .L1805
+	cbnz	r5, .L1810
 	ldrh	r3, [r4, #2632]
 	cmp	r6, r3
-	beq	.L1805
+	beq	.L1810
 	ldrh	r5, [r4, #308]
 	sxth	r6, r3
-.L1807:
+.L1812:
 	subs	r5, r5, #1
 	sxth	r5, r5
-	b	.L1803
-.L1805:
+	b	.L1808
+.L1810:
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1804:
+.L1809:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1807
+	beq	.L1812
 	ldr	r3, [r4, #3304]
 	ldr	r3, [r3]
 	cmp	r3, r8
-	bne	.L1807
+	bne	.L1812
 	ldr	r3, [r4, #3336]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L1807
-.L1808:
+	bne	.L1812
+.L1813:
 	ldrh	r3, [r4, #244]
 	ldrh	r2, [r4, #314]
 	adds	r3, r3, #24
 	cmp	r2, r3, lsl #1
-	bcs	.L1811
+	bcs	.L1816
 	movw	r2, #1467
-	ldr	r1, .L1830+4
-	ldr	r0, .L1830+8
+	ldr	r1, .L1835+4
+	ldr	r0, .L1835+8
 	bl	sftl_printk
-.L1811:
+.L1816:
 	movs	r2, #48
 	ldr	r1, [r4, #3464]
-	ldr	r0, .L1830+16
+	ldr	r0, .L1835+16
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #244]
 	ldr	r1, [r4, #3464]
@@ -12344,15 +12346,15 @@ FtlLoadSysInfo:
 	add	r1, r1, r3
 	bl	ftl_memcpy
 	ldr	r2, [r4, #2472]
-	ldr	r3, .L1830+20
+	ldr	r3, .L1835+20
 	cmp	r2, r3
-	bne	.L1812
+	bne	.L1817
 	ldrb	r2, [r4, #2482]	@ zero_extendqisi2
 	ldrh	r3, [r4, #258]
 	ldrh	r5, [r4, #2480]
 	cmp	r2, r3
 	strh	r5, [r4, #2634]	@ movhi
-	bne	.L1812
+	bne	.L1817
 	ldrh	r3, [r4, #306]
 	ldrh	r2, [r4, #262]
 	ldr	r6, [r4, #248]
@@ -12368,12 +12370,12 @@ FtlLoadSysInfo:
 	bl	__aeabi_uidiv
 	cmp	r5, r6
 	strh	r0, [r4, #2624]	@ movhi
-	bls	.L1813
+	bls	.L1818
 	movw	r2, #1489
-	ldr	r1, .L1830+4
-	ldr	r0, .L1830+8
+	ldr	r1, .L1835+4
+	ldr	r0, .L1835+8
 	bl	sftl_printk
-.L1813:
+.L1818:
 	ldrh	r3, [r4, #2488]
 	ldrh	r1, [r4, #2486]
 	lsrs	r2, r3, #6
@@ -12428,36 +12430,36 @@ FtlLoadSysInfo:
 	strhi	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1816
-	ldr	r0, .L1830+24
+	beq	.L1821
+	ldr	r0, .L1835+24
 	bl	make_superblock
-.L1816:
+.L1821:
 	ldrh	r2, [r4, #80]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1817
-	ldr	r0, .L1830+28
+	beq	.L1822
+	ldr	r0, .L1835+28
 	bl	make_superblock
-.L1817:
+.L1822:
 	ldrh	r2, [r4, #128]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1818
-	ldr	r0, .L1830+32
+	beq	.L1823
+	ldr	r0, .L1835+32
 	bl	make_superblock
-.L1818:
+.L1823:
 	ldrh	r2, [r4, #176]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1819
-	ldr	r0, .L1830+36
+	beq	.L1824
+	ldr	r0, .L1835+36
 	bl	make_superblock
-.L1819:
+.L1824:
 	movs	r0, #0
-	b	.L1800
-.L1831:
+	b	.L1805
+.L1836:
 	.align	2
-.L1830:
+.L1835:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+600
 	.word	.LC8
@@ -12491,7 +12493,7 @@ FtlMapTblRecovery:
 	ldrh	r10, [r0, #6]
 	str	r3, [sp, #8]
 	ldr	r3, [r0, #16]
-	ldr	r4, .L1873
+	ldr	r4, .L1878
 	ldr	r9, [r0, #12]
 	lsl	r2, r10, #2
 	str	r3, [sp, #16]
@@ -12512,16 +12514,16 @@ FtlMapTblRecovery:
 	mov	r8, r3
 	str	r3, [r5, #32]
 	str	r3, [r5, #28]
-.L1833:
+.L1838:
 	ldr	r3, [sp, #12]
 	sxth	r6, r8
 	cmp	r6, r3
-	bge	.L1852
+	bge	.L1857
 	ldr	r3, [sp, #12]
 	lsls	r7, r6, #1
 	subs	r3, r3, #1
 	cmp	r6, r3
-	bne	.L1834
+	bne	.L1839
 	movs	r1, #1
 	ldrh	r0, [r9, r6, lsl #1]
 	bl	FtlGetLastWrittenPage
@@ -12535,22 +12537,22 @@ FtlMapTblRecovery:
 	strh	r0, [r5, #2]	@ movhi
 	ldr	r3, [r3, r6, lsl #2]
 	str	r3, [r5, #28]
-.L1835:
+.L1840:
 	ldr	r3, [sp, #12]
 	sxth	r9, r8
 	adds	r2, r3, #1
 	cmp	r9, r2
-	blt	.L1838
-.L1852:
+	blt	.L1843
+.L1857:
 	mov	r0, r5
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r5, #2]
 	ldrh	r3, [r4, #308]
 	cmp	r2, r3
-	bne	.L1840
+	bne	.L1845
 	mov	r0, r5
 	bl	ftl_map_blk_alloc_new_blk
-.L1840:
+.L1845:
 	mov	r0, r5
 	bl	ftl_map_blk_gc
 	mov	r0, r5
@@ -12559,9 +12561,9 @@ FtlMapTblRecovery:
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1838:
+.L1843:
 	ldrh	r2, [r7]
-	ldr	r0, .L1873+4
+	ldr	r0, .L1878+4
 	orr	r2, r9, r2, lsl #10
 	str	r2, [r4, #3460]
 	movs	r2, #1
@@ -12570,32 +12572,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #16]
-	cbz	r2, .L1836
+	cbz	r2, .L1841
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1836
+	beq	.L1841
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #16]
 	cmp	r2, r0
-	beq	.L1836
+	beq	.L1841
 	str	r0, [sp, #4]
 	mov	r3, r9
 	str	r2, [sp]
 	mov	r2, r6
-	ldr	r1, .L1873+8
-	ldr	r0, .L1873+12
+	ldr	r1, .L1878+8
+	ldr	r0, .L1878+12
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1836:
+.L1841:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1837
+	beq	.L1842
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1837
+	bls	.L1842
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12603,12 +12605,12 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1837:
+.L1842:
 	add	r8, r8, #1
-	b	.L1835
-.L1834:
+	b	.L1840
+.L1839:
 	ldr	r3, [r4, #3304]
-	ldr	r0, .L1873+4
+	ldr	r0, .L1878+4
 	str	r3, [r4, #3464]
 	add	r3, r9, r7
 	ldrh	r2, [r9, r6, lsl #1]
@@ -12622,24 +12624,24 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1854
+	beq	.L1859
 	ldrh	r2, [fp]
 	ldrh	r3, [r5, #4]
 	cmp	r2, r3
-	bne	.L1854
+	bne	.L1859
 	ldrh	r2, [fp, #8]
 	movw	r3, #64245
 	cmp	r2, r3
-	beq	.L1842
-.L1854:
+	beq	.L1847
+.L1859:
 	movs	r7, #0
-.L1843:
+.L1848:
 	ldrh	r2, [r4, #308]
 	sxth	r3, r7
 	cmp	r3, r2
-	bge	.L1850
+	bge	.L1855
 	ldr	r2, [sp, #20]
-	ldr	r0, .L1873+4
+	ldr	r0, .L1878+4
 	str	r3, [sp, #28]
 	ldrh	r2, [r2]
 	orr	r2, r3, r2, lsl #10
@@ -12650,32 +12652,32 @@ FtlMapTblRecovery:
 	ldr	r2, [r4, #3468]
 	ldr	r2, [r2, #12]
 	str	r2, [sp, #24]
-	cbz	r2, .L1847
+	cbz	r2, .L1852
 	ldr	r1, [r4, #3456]
 	adds	r1, r1, #1
-	beq	.L1847
+	beq	.L1852
 	ldrh	r1, [r4, #314]
 	ldr	r0, [r4, #3464]
 	bl	js_hash
 	ldr	r2, [sp, #24]
 	cmp	r2, r0
-	beq	.L1847
+	beq	.L1852
 	str	r0, [sp, #4]
 	str	r2, [sp]
 	mov	r2, r6
 	ldr	r3, [sp, #28]
-	ldr	r1, .L1873+8
-	ldr	r0, .L1873+16
+	ldr	r1, .L1878+8
+	ldr	r0, .L1878+16
 	bl	sftl_printk
 	mov	r3, #-1
 	str	r3, [r4, #3456]
-.L1847:
+.L1852:
 	ldr	r3, [r4, #3456]
 	adds	r3, r3, #1
-	beq	.L1848
+	beq	.L1853
 	ldrh	r3, [fp, #8]
 	cmp	r10, r3
-	bls	.L1848
+	bls	.L1853
 	ldrh	r1, [fp]
 	ldrh	r2, [r5, #4]
 	cmp	r1, r2
@@ -12683,37 +12685,37 @@ FtlMapTblRecovery:
 	ldreq	r2, [r4, #3460]
 	ldreq	r1, [sp, #8]
 	streq	r2, [r1, r3, lsl #2]
-.L1848:
+.L1853:
 	adds	r7, r7, #1
-	b	.L1843
-.L1842:
+	b	.L1848
+.L1847:
 	movs	r1, #0
 	movs	r0, #4
-.L1844:
+.L1849:
 	ldrh	r2, [r4, #308]
 	sxth	r3, r1
 	subs	r2, r2, #1
 	cmp	r3, r2
-	blt	.L1846
-.L1850:
+	blt	.L1851
+.L1855:
 	add	r8, r8, #1
-	b	.L1833
-.L1846:
+	b	.L1838
+.L1851:
 	ldr	r6, [r4, #3304]
 	ldr	r2, [r6, r3, lsl #3]
 	uxth	r7, r2
 	cmp	r10, r7
-	bls	.L1845
+	bls	.L1850
 	add	r3, r0, r3, lsl #3
 	ldr	r3, [r6, r3]
 	ldr	r6, [sp, #8]
 	str	r3, [r6, r7, lsl #2]
-.L1845:
+.L1850:
 	adds	r1, r1, #1
-	b	.L1844
-.L1874:
+	b	.L1849
+.L1879:
 	.align	2
-.L1873:
+.L1878:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3456
 	.word	.LANCHOR1+615
@@ -12732,7 +12734,7 @@ FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L1876
+	ldr	r0, .L1881
 	push	{r3, lr}
 	.save {r3, lr}
 	ldrh	r3, [r0, #324]
@@ -12755,9 +12757,9 @@ FtlLoadVonderInfo:
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1877:
+.L1882:
 	.align	2
-.L1876:
+.L1881:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
@@ -12775,13 +12777,13 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L1879
+	ldr	r0, .L1884
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L1880:
+.L1885:
 	.align	2
-.L1879:
+.L1884:
 	.word	.LANCHOR0+3396
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
@@ -12799,7 +12801,7 @@ FtlSysBlkInit:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1897
+	ldr	r4, .L1902
 	ldrh	r0, [r4, #240]
 	strh	r3, [r4, #3476]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
@@ -12807,17 +12809,17 @@ FtlSysBlkInit:
 	ldrh	r2, [r4, #2628]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1882
-.L1884:
+	bne	.L1887
+.L1889:
 	mov	r5, #-1
-.L1881:
+.L1886:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1882:
+.L1887:
 	bl	FtlLoadSysInfo
 	mov	r5, r0
 	cmp	r0, #0
-	bne	.L1884
+	bne	.L1889
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -12831,23 +12833,23 @@ FtlSysBlkInit:
 	mov	r3, r5
 	ldr	r2, [r4, #2544]
 	movs	r0, #12
-.L1885:
+.L1890:
 	cmp	r3, r1
-	bge	.L1890
+	bge	.L1895
 	mla	r6, r0, r3, r2
 	ldr	r6, [r6, #4]
 	cmp	r6, #0
-	bge	.L1886
-.L1890:
+	bge	.L1891
+.L1895:
 	ldrh	r2, [r4, #2500]
 	cmp	r3, r1
 	add	r2, r2, #1
 	strh	r2, [r4, #2500]	@ movhi
-	bge	.L1896
-.L1887:
-	ldr	r0, .L1897+4
+	bge	.L1901
+.L1892:
+	ldr	r0, .L1902+4
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1897+8
+	ldr	r0, .L1902+8
 	bl	FtlSuperblockPowerLostFix
 	ldrh	r1, [r4, #28]
 	ldr	r2, [r4, #76]
@@ -12876,37 +12878,37 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1891
-.L1886:
+	b	.L1896
+.L1891:
 	adds	r3, r3, #1
-	b	.L1885
-.L1896:
+	b	.L1890
+.L1901:
 	ldrh	r3, [r4, #3476]
 	cmp	r3, #0
-	bne	.L1887
-.L1891:
+	bne	.L1892
+.L1896:
 	ldrh	r0, [r4, #28]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1892
+	beq	.L1897
 	ldrh	r3, [r4, #32]
-	cbnz	r3, .L1892
+	cbnz	r3, .L1897
 	ldrh	r3, [r4, #84]
-	cbnz	r3, .L1892
+	cbnz	r3, .L1897
 	bl	FtlGcRefreshBlock
 	ldrh	r0, [r4, #80]
 	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-	ldr	r0, .L1897+4
+	ldr	r0, .L1902+4
 	bl	allocate_new_data_superblock
-	ldr	r0, .L1897+8
+	ldr	r0, .L1902+8
 	bl	allocate_new_data_superblock
-.L1892:
+.L1897:
 	bl	FtlVpcCheckAndModify
-	b	.L1881
-.L1898:
+	b	.L1886
+.L1903:
 	.align	2
-.L1897:
+.L1902:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+28
 	.word	.LANCHOR0+80
@@ -12926,43 +12928,43 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1923
+	ldr	r4, .L1928
 	ldrh	r0, [r4, #240]
 	str	r3, [r4, #2592]
 	str	r3, [r4, #2596]
 	str	r3, [r4, #2608]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1900
+	cbz	r0, .L1905
 	bl	FtlMakeBbt
-.L1900:
-	ldr	r0, .L1923+4
+.L1905:
+	ldr	r0, .L1928+4
 	movs	r2, #0
-.L1901:
+.L1906:
 	ldrh	r1, [r4, #262]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1902
+	blt	.L1907
 	ldrh	r6, [r4, #244]
 	movs	r5, #0
-.L1903:
+.L1908:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r6
-	bhi	.L1904
+	bhi	.L1909
 	ldrh	r1, [r4, #236]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1905
-.L1909:
+	bge	.L1910
+.L1914:
 	movs	r5, #0
 	mov	r6, r5
-.L1906:
+.L1911:
 	ldrh	r3, [r4, #244]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1910
+	bhi	.L1915
 	ldrh	r3, [r4, #246]
 	ldrh	r5, [r4, #236]
 	ldr	r9, [r4, #248]
@@ -12978,7 +12980,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1911
+	ble	.L1916
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12986,9 +12988,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2624]	@ movhi
-.L1911:
+.L1916:
 	ldrh	r3, [r4, #298]
-	cbz	r3, .L1913
+	cbz	r3, .L1918
 	ldrh	r2, [r4, #2624]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2624]	@ movhi
@@ -12999,10 +13001,10 @@ ftl_low_format:
 	strlt	r8, [r4, #2556]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2624]	@ movhi
-.L1913:
+.L1918:
 	ldrh	r2, [r4, #2624]
 	ldr	r3, [r4, #2556]
-	ldr	r6, .L1923+8
+	ldr	r6, .L1928+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #306]
@@ -13035,28 +13037,28 @@ ftl_low_format:
 	strh	r5, [r4, #176]	@ movhi
 	strb	r3, [r4, #36]
 	bl	ftl_memset
-.L1915:
+.L1920:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #35]	@ zero_extendqisi2
 	ldrh	r2, [r4, #28]
 	cmp	r3, #0
-	bne	.L1916
+	bne	.L1921
 	ldr	r3, [r4, #76]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #28]
 	adds	r3, r3, #1
 	strh	r3, [r4, #28]	@ movhi
-	b	.L1915
-.L1902:
+	b	.L1920
+.L1907:
 	ldr	r5, [r4, #3316]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
 	ldr	r1, [r4, #3320]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1901
-.L1904:
+	b	.L1906
+.L1909:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -13064,8 +13066,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1903
-.L1905:
+	b	.L1908
+.L1910:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #336]
@@ -13075,27 +13077,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #240]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #244]
-.L1907:
+.L1912:
 	ldrh	r3, [r4, #246]
 	cmp	r3, r5
-	bls	.L1909
+	bls	.L1914
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1907
-.L1910:
+	b	.L1912
+.L1915:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1906
-.L1916:
+	b	.L1911
+.L1921:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
 	ldrh	r1, [r4, #32]
-	ldr	r6, .L1923+12
+	ldr	r6, .L1928+12
 	str	r3, [r4, #40]
 	adds	r3, r3, #1
 	str	r3, [r4, #2592]
@@ -13109,19 +13111,19 @@ ftl_low_format:
 	strh	r3, [r4, #80]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #88]
-.L1917:
+.L1922:
 	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #87]	@ zero_extendqisi2
 	ldrh	r2, [r4, #80]
-	cbnz	r3, .L1918
+	cbnz	r3, .L1923
 	ldr	r3, [r4, #76]
 	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #80]
 	adds	r3, r3, #1
 	strh	r3, [r4, #80]	@ movhi
-	b	.L1917
-.L1918:
+	b	.L1922
+.L1923:
 	ldr	r3, [r4, #2592]
 	movw	r5, #65535
 	ldrh	r1, [r4, #84]
@@ -13144,16 +13146,16 @@ ftl_low_format:
 	str	r3, [r4, #2592]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1919
-	ldr	r3, .L1923+16
+	cbnz	r0, .L1924
+	ldr	r3, .L1928+16
 	movs	r2, #1
 	str	r2, [r3]
-.L1919:
+.L1924:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1924:
+.L1929:
 	.align	2
-.L1923:
+.L1928:
 	.word	.LANCHOR0
 	.word	168778952
 	.word	.LANCHOR0+28
@@ -13175,10 +13177,10 @@ sftl_init:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r3, #-1
-	ldr	r4, .L1931
-	ldr	r5, .L1931+4
-	ldr	r1, .L1931+8
-	ldr	r0, .L1931+12
+	ldr	r4, .L1936
+	ldr	r5, .L1936+4
+	ldr	r1, .L1936+8
+	ldr	r0, .L1936+12
 	str	r3, [r5]
 	bl	sftl_printk
 	mov	r0, r4
@@ -13188,27 +13190,27 @@ sftl_init:
 	ldrh	r0, [r4, #240]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	r0, .L1929
+	cbnz	r0, .L1934
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1929
+	cbnz	r0, .L1934
 	movs	r3, #1
 	str	r3, [r5]
 	ldrh	r3, [r4, #228]
 	cmp	r3, #15
-	bhi	.L1929
+	bhi	.L1934
 	movw	r4, #8129
-.L1928:
+.L1933:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
 	subs	r4, r4, #1
-	bne	.L1928
-.L1929:
+	bne	.L1933
+.L1934:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L1932:
+.L1937:
 	.align	2
-.L1931:
+.L1936:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC0
@@ -13236,31 +13238,31 @@ FtlWriteToIDB:
 	mov	r4, r0
 	mov	r6, r1
 	mov	r9, r2
-	ldr	r5, .L2003
-	bls	.L1934
+	ldr	r5, .L2008
+	bls	.L1939
 	cmp	r0, #576
-	bcc	.L1935
-.L1934:
+	bcc	.L1940
+.L1939:
 	ldr	r3, [r5, #3680]
-	cbnz	r3, .L1936
-.L2002:
+	cbnz	r3, .L1941
+.L2007:
 	movs	r4, #0
-	b	.L1933
-.L1936:
+	b	.L1938
+.L1941:
 	ldr	r3, [r5, #3684]
 	ldr	r2, [r3]
 	str	r3, [sp, #8]
-	ldr	r3, .L2003+4
+	ldr	r3, .L2008+4
 	cmp	r2, r3
-	bne	.L1938
+	bne	.L1943
 	ldr	r3, [sp, #8]
 	movs	r2, #0
 	ldrh	r1, [r5, #10]
 	add	r0, r3, #262144
 	movw	r3, #65535
-.L1942:
+.L1947:
 	ldr	r4, [r0, #-4]
-	cbnz	r4, .L1939
+	cbnz	r4, .L1944
 	ldr	r4, [sp, #8]
 	subs	r3, r3, #1
 	ldr	r4, [r4, r2, lsl #2]
@@ -13270,18 +13272,18 @@ FtlWriteToIDB:
 	movhi	r2, #0
 	cmp	r3, #4096
 	str	r4, [r0, #-4]!
-	bne	.L1942
+	bne	.L1947
 	mov	r3, #512
-	b	.L1999
-.L1939:
+	b	.L2004
+.L1944:
 	adds	r3, r3, #127
 	lsrs	r3, r3, #7
-.L1999:
+.L2004:
 	str	r3, [sp, #12]
 	lsls	r1, r1, #2
 	ldr	r3, [sp, #12]
 	uxth	r1, r1
-	ldr	r4, .L2003
+	ldr	r4, .L2008
 	adds	r0, r3, #4
 	bl	__aeabi_uidiv
 	adds	r3, r0, #1
@@ -13292,51 +13294,49 @@ FtlWriteToIDB:
 	movs	r3, #0
 	mov	fp, r3
 	str	r3, [sp, #16]
-.L1964:
-	mov	r2, #512
-	movs	r1, #0
+.L1969:
+	mov	r1, #512
 	ldr	r0, [r4, #3688]
-	bl	memset
+	bl	__memzero
 	ldrh	r7, [r4, #10]
 	ldr	r3, [r4, #3264]
 	mul	r9, fp, r7
 	cmp	r3, #0
-	beq	.L1972
+	beq	.L1977
 	ldr	r3, [r4, #3268]
 	cmp	r3, #0
 	ite	eq
 	moveq	r3, #6
 	movne	r3, #9
-.L2000:
+.L2005:
 	str	r3, [sp, #24]
 	mov	r1, r9
-	ldr	r3, .L2003
+	ldr	r3, .L2008
 	movs	r0, #0
 	ldr	r3, [r3, #3252]
 	blx	r3
 	ldr	r3, [sp, #20]
 	cmp	r3, #1
-	beq	.L1944
-	ldr	r3, .L2003
+	beq	.L1949
+	ldr	r3, .L2008
 	add	r1, r7, r9
 	movs	r0, #0
 	ldr	r3, [r3, #3252]
 	blx	r3
-.L1944:
+.L1949:
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
-	bne	.L1974
-	ldr	r3, .L2003
-	mov	r2, #1024
-	movs	r1, #0
+	bne	.L1979
+	ldr	r3, .L2008
+	mov	r1, #1024
 	ldr	r5, [r3, #3688]
 	mov	r0, r5
-	bl	ftl_memset
+	bl	__memzero
 	movs	r2, #4
-	ldr	r3, .L2003+8
+	ldr	r3, .L2008+8
 	strb	r2, [r5, #17]
 	movs	r1, #12
-	ldr	r2, .L2003
+	ldr	r2, .L2008
 	adds	r0, r5, r1
 	str	r3, [r5]
 	movs	r3, #0
@@ -13351,17 +13351,17 @@ FtlWriteToIDB:
 	strh	r3, [r5, #22]	@ movhi
 	bl	js_hash
 	str	r0, [r5, #8]
-.L1945:
+.L1950:
 	ldr	r3, [sp, #20]
 	mov	r10, r9
 	mov	r8, #0
 	muls	r3, r7, r3
 	ldr	r7, [sp, #8]
 	str	r3, [sp, #32]
-.L1946:
+.L1951:
 	ldr	r3, [sp, #32]
 	cmp	r8, r3
-	beq	.L1953
+	beq	.L1958
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
 	itet	ne
@@ -13372,10 +13372,10 @@ FtlWriteToIDB:
 	movw	r3, #61424
 	str	r3, [sp, #44]
 	cmp	r8, #0
-	bne	.L1949
+	bne	.L1954
 	ldr	r3, [sp, #24]
 	cmp	r3, #9
-	bne	.L1949
+	bne	.L1954
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
@@ -13391,8 +13391,8 @@ FtlWriteToIDB:
 	blx	r3
 	ldr	r2, [sp, #36]
 	adds	r2, r2, #1
-	bne	.L1950
-.L1953:
+	bne	.L1955
+.L1958:
 	ldrb	r3, [r4, #14]	@ zero_extendqisi2
 	ldr	r2, [r4, #3264]
 	ldr	r8, [r4, #3688]
@@ -13400,19 +13400,19 @@ FtlWriteToIDB:
 	ldrh	r3, [r4, #10]
 	mul	r10, fp, r3
 	cmp	r2, #0
-	bne	.L1951
+	bne	.L1956
 	mov	r9, #6
-.L1952:
+.L1957:
 	ldr	r2, [sp, #20]
 	movs	r7, #0
 	mul	r5, r3, r2
-.L1955:
+.L1960:
 	cmp	r7, r5
-	beq	.L1959
+	beq	.L1964
 	cmp	r7, #0
-	bne	.L1956
+	bne	.L1961
 	cmp	r9, #9
-	bne	.L1956
+	bne	.L1961
 	ldr	r3, [r4, #3264]
 	movs	r0, #70
 	blx	r3
@@ -13432,50 +13432,49 @@ FtlWriteToIDB:
 	ldrb	r0, [r4, #22]	@ zero_extendqisi2
 	blx	r3
 	ldr	r3, [r8]
-	ldr	r2, .L2003+8
+	ldr	r2, .L2008+8
 	cmp	r3, r2
-	beq	.L1957
-.L1959:
+	beq	.L1962
+.L1964:
 	ldr	r0, [r4, #3688]
 	movs	r5, #0
 	ldr	r1, [sp, #8]
-	mov	ip, r0
-.L1958:
-	mov	r7, ip
+.L1963:
 	mov	r8, r1
-	ldr	r2, [r7]
-	add	ip, ip, #4
+	ldr	r2, [r0, r5, lsl #2]
 	ldr	r3, [r8]
+	lsls	r7, r5, #2
 	adds	r1, r1, #4
 	cmp	r2, r3
-	beq	.L1961
-	mov	r2, #512
-	movs	r1, #0
-	bl	memset
-	str	r5, [sp]
+	beq	.L1966
+	mov	r1, #512
+	bl	__memzero
+	ldr	r3, .L2008
 	mov	r1, fp
+	ldr	r0, .L2008+12
+	ldr	r2, [r3, #3688]
+	str	r5, [sp]
 	ldr	r3, [r8]
-	ldr	r0, .L2003+12
-	ldr	r2, [r7]
+	ldr	r2, [r2, r7]
 	bl	sftl_printk
-	ldr	r3, .L2003
+	ldr	r3, .L2008
 	movs	r0, #0
 	ldrh	r1, [r3, #10]
 	ldr	r3, [r3, #3252]
 	mul	r1, fp, r1
 	blx	r3
-.L1962:
+.L1967:
 	ldr	r3, [sp, #20]
 	add	fp, fp, r3
 	cmp	fp, #15
-	bls	.L1964
+	bls	.L1969
 	ldr	r3, [sp, #16]
-	cbnz	r3, .L1965
-.L1938:
+	cbnz	r3, .L1970
+.L1943:
 	mov	r3, #-1
 	str	r3, [sp, #12]
-.L1965:
-	ldr	r5, .L2003
+.L1970:
+	ldr	r5, .L2008
 	movs	r3, #0
 	ldr	r4, [sp, #12]
 	ldr	r0, [r5, #3684]
@@ -13483,18 +13482,18 @@ FtlWriteToIDB:
 	bl	kfree
 	ldr	r0, [r5, #3688]
 	bl	kfree
-.L1933:
+.L1938:
 	mov	r0, r4
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1972:
+.L1977:
 	movs	r3, #6
-	b	.L2000
-.L1974:
+	b	.L2005
+.L1979:
 	movs	r5, #0
-	b	.L1945
-.L1949:
+	b	.L1950
+.L1954:
 	add	r3, sp, #40
 	mov	r2, r7
 	mov	r1, r10
@@ -13502,20 +13501,20 @@ FtlWriteToIDB:
 	ldr	r6, [r4, #3256]
 	blx	r6
 	adds	r0, r0, #1
-	beq	.L1953
+	beq	.L1958
 	add	r7, r7, #2048
-.L1950:
+.L1955:
 	add	r8, r8, #1
 	add	r10, r10, #1
-	b	.L1946
-.L1951:
+	b	.L1951
+.L1956:
 	ldr	r2, [r4, #3268]
 	cmp	r2, #0
 	ite	eq
 	moveq	r9, #6
 	movne	r9, #9
-	b	.L1952
-.L1956:
+	b	.L1957
+.L1961:
 	add	r3, sp, #40
 	mov	r2, r8
 	add	r1, r10, r7
@@ -13523,36 +13522,36 @@ FtlWriteToIDB:
 	ldr	r6, [r4, #3260]
 	blx	r6
 	adds	r0, r0, #1
-	beq	.L1959
+	beq	.L1964
 	ldr	r2, [sp, #44]
 	movw	r3, #61424
 	cmp	r2, r3
-	bne	.L1959
+	bne	.L1964
 	add	r8, r8, #2048
-.L1957:
+.L1962:
 	adds	r7, r7, #1
-	b	.L1955
-.L1961:
+	b	.L1960
+.L1966:
 	ldr	r3, [sp, #28]
 	adds	r5, r5, #1
 	cmp	r5, r3
-	bne	.L1958
+	bne	.L1963
 	ldr	r3, [sp, #16]
 	adds	r3, r3, #1
 	cmp	r3, #5
 	str	r3, [sp, #16]
-	bls	.L1962
-	b	.L1965
-.L2004:
+	bls	.L1967
+	b	.L1970
+.L2009:
 	.align	2
-.L2003:
+.L2008:
 	.word	.LANCHOR0
 	.word	-52655045
 	.word	1179535694
 	.word	.LC130
-.L1935:
+.L1940:
 	cmp	r0, #64
-	bne	.L1966
+	bne	.L1971
 	mov	r0, #262144
 	bl	ftl_malloc
 	str	r0, [r5, #3684]
@@ -13560,28 +13559,27 @@ FtlWriteToIDB:
 	bl	ftl_malloc
 	ldr	r3, [r5, #3684]
 	str	r0, [r5, #3688]
-	cbz	r3, .L1967
-	cbz	r0, .L1967
+	cbz	r3, .L1972
+	cbz	r0, .L1972
 	movs	r2, #1
-	movs	r1, #0
-	str	r2, [r5, #3680]
+	mov	r1, #262144
 	mov	r0, r3
-	mov	r2, #262144
-	bl	ftl_memset
-.L1966:
+	str	r2, [r5, #3680]
+	bl	__memzero
+.L1971:
 	ldr	r3, [r5, #3680]
 	cmp	r3, #0
-	beq	.L2002
+	beq	.L2007
 	cmp	r4, #63
 	ldr	r1, [r5, #3684]
 	iteee	hi
-	ldrhi	r5, .L2005
+	ldrhi	r5, .L2010
 	rsbls	r4, r4, #64
 	subls	r6, r6, r4
 	addls	r9, r9, r4, lsl #9
 	it	ls
 	movls	r5, r1
-	ldr	r0, .L2005+4
+	ldr	r0, .L2010+4
 	it	hi
 	addhi	r5, r5, r4
 	mov	r2, #262144
@@ -13598,15 +13596,15 @@ FtlWriteToIDB:
 	mov	r1, r9
 	mov	r0, r5
 	bl	ftl_memcpy
-	b	.L2002
-.L1967:
-	ldr	r1, .L2005+8
-	ldr	r0, .L2005+12
+	b	.L2007
+.L1972:
+	ldr	r1, .L2010+8
+	ldr	r0, .L2010+12
 	bl	sftl_printk
-	b	.L1966
-.L2006:
+	b	.L1971
+.L2011:
 	.align	2
-.L2005:
+.L2010:
 	.word	8388544
 	.word	.LC132
 	.word	.LANCHOR1+633
@@ -13650,19 +13648,19 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L2011
+	ldr	r2, .L2016
 	ldr	r3, [r2, #3692]
-	cbnz	r3, .L2010
+	cbnz	r3, .L2015
 	str	r0, [r2, #3692]
 	mov	r0, r3
 	str	r1, [r2, #3696]
 	bx	lr
-.L2010:
+.L2015:
 	mov	r0, #-1
 	bx	lr
-.L2012:
+.L2017:
 	.align	2
-.L2011:
+.L2016:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -13677,80 +13675,79 @@ rk_sftl_vendor_storage_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r5, .L2021
+	ldr	r4, .L2026
 	bl	ftl_malloc
-	str	r0, [r5, #3700]
+	str	r0, [r4, #3700]
 	cmp	r0, #0
-	beq	.L2019
-	ldr	r10, .L2021+4
+	beq	.L2024
+	ldr	r8, .L2026+4
 	mov	r9, #0
 	mov	r7, r9
-	mov	r8, r9
-.L2017:
-	ldr	r3, [r5, #3692]
+	mov	r6, r9
+.L2022:
+	ldr	r3, [r4, #3692]
 	movs	r1, #128
-	ldr	r2, [r5, #3700]
-	lsl	r0, r8, #7
+	ldr	r2, [r4, #3700]
+	lsls	r0, r6, #7
 	blx	r3
-	mov	r6, r0
-	cbnz	r0, .L2015
-	ldr	r4, [r5, #3700]
-	ldr	r3, [r4]
-	cmp	r3, r10
-	bne	.L2016
+	mov	r5, r0
+	cbnz	r0, .L2020
+	ldr	r2, [r4, #3700]
+	ldr	r3, [r2]
+	cmp	r3, r8
+	bne	.L2021
 	movw	r3, #65532
-	ldr	r2, [r4, #4]
-	ldr	r3, [r4, r3]
-	cmp	r3, r2
-	bne	.L2016
-	cmp	r3, r7
+	ldr	r1, [r2, r3]
+	ldr	r3, [r2, #4]
+	cmp	r1, r3
+	bne	.L2021
+	cmp	r1, r7
 	itt	hi
-	movhi	r9, r8
-	movhi	r7, r3
-.L2016:
-	add	r8, r8, #1
-	cmp	r8, #2
-	bne	.L2017
-	cbz	r7, .L2018
-	ldr	r3, [r5, #3692]
-	mov	r2, r4
+	movhi	r9, r6
+	movhi	r7, r1
+.L2021:
+	adds	r6, r6, #1
+	cmp	r6, #2
+	bne	.L2022
+	cbz	r7, .L2023
+	ldr	r3, [r4, #3692]
 	movs	r1, #128
 	lsl	r0, r9, #7
 	blx	r3
-	mov	r6, r0
-	cbz	r0, .L2013
-.L2015:
-	ldr	r0, [r5, #3700]
-	mov	r6, #-1
+	mov	r5, r0
+	cbz	r0, .L2018
+.L2020:
+	ldr	r0, [r4, #3700]
+	mov	r5, #-1
 	bl	kfree
 	movs	r3, #0
-	str	r3, [r5, #3700]
-	b	.L2013
+	str	r3, [r4, #3700]
+	b	.L2018
+.L2023:
+	mov	r1, #65536
+	mov	r0, r2
+	bl	__memzero
+	ldr	r3, [r4, #3700]
+	movs	r2, #1
+	movw	r1, #65532
+	str	r2, [r3, #4]
+	str	r8, [r3]
+	str	r2, [r3, r1]
+	movw	r2, #64504
+	strh	r7, [r3, #12]	@ movhi
+	strh	r2, [r3, #14]	@ movhi
 .L2018:
-	mov	r2, #65536
-	mov	r1, r7
-	mov	r0, r4
-	bl	memset
-	movs	r3, #1
-	movw	r2, #65532
-	str	r3, [r4, #4]
-	str	r10, [r4]
-	str	r3, [r4, r2]
-	movw	r3, #64504
-	strh	r7, [r4, #12]	@ movhi
-	strh	r3, [r4, #14]	@ movhi
-.L2013:
-	mov	r0, r6
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2019:
-	mvn	r6, #11
-	b	.L2013
-.L2022:
+	mov	r0, r5
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L2024:
+	mvn	r5, #11
+	b	.L2018
+.L2027:
 	.align	2
-.L2021:
+.L2026:
 	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
@@ -13769,23 +13766,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L2029
+	ldr	r3, .L2034
 	mov	r0, r1
 	ldr	r5, [r3, #3700]
-	cbz	r5, .L2028
+	cbz	r5, .L2033
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L2025:
+.L2030:
 	cmp	r3, r6
-	bcc	.L2027
-.L2028:
+	bcc	.L2032
+.L2033:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2027:
+.L2032:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L2026
+	bne	.L2031
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -13797,12 +13794,12 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2026:
+.L2031:
 	adds	r3, r3, #1
-	b	.L2025
-.L2030:
+	b	.L2030
+.L2035:
 	.align	2
-.L2029:
+.L2034:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
@@ -13820,26 +13817,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L2050
+	ldr	r2, .L2055
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
 	ldr	r4, [r2, #3700]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L2046
+	beq	.L2051
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L2033:
+.L2038:
 	cmp	r7, r2
-	bcc	.L2041
+	bcc	.L2046
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2046
+	bhi	.L2051
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -13872,31 +13869,31 @@ rk_sftl_vendor_write:
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
 	ldr	r3, [r9, #3696]
-	b	.L2049
-.L2041:
+	b	.L2054
+.L2046:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L2034
+	bne	.L2039
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L2035
+	bls	.L2040
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L2046
+	bhi	.L2051
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L2036:
+.L2041:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L2037
+	bcc	.L2042
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -13915,7 +13912,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L2038:
+.L2043:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -13928,20 +13925,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L2050
+	ldr	r3, .L2055
 	ldr	r3, [r3, #3696]
-.L2049:
+.L2054:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L2031:
+.L2036:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2037:
+.L2042:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -13958,24 +13955,24 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L2036
-.L2035:
+	b	.L2041
+.L2040:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L2038
-.L2034:
+	b	.L2043
+.L2039:
 	adds	r7, r7, #1
-	b	.L2033
-.L2046:
-	mov	r0, #-1
-	b	.L2031
+	b	.L2038
 .L2051:
+	mov	r0, #-1
+	b	.L2036
+.L2056:
 	.align	2
-.L2050:
+.L2055:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
@@ -13990,280 +13987,162 @@ rk_sftl_vendor_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r0, #4096
 	mov	r6, r1
-	mov	r5, r2
+	mov	r4, r2
 	bl	ftl_malloc
-	mov	r4, r0
+	mov	r5, r0
 	cmp	r0, #0
-	beq	.L2068
-	ldr	r3, .L2076
+	beq	.L2074
+	ldr	r3, .L2085
 	cmp	r6, r3
-	beq	.L2055
+	beq	.L2060
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L2056
-.L2074:
-	mvn	r5, #13
-	b	.L2054
-.L2055:
-	ldr	r6, .L2076+4
+	beq	.L2061
+.L2080:
+	mvn	r4, #13
+	b	.L2059
+.L2060:
+	ldr	r6, .L2085+4
 	mov	r3, sp
-	and	r2, r3, r6
-	ldr	r3, [r2, #8]
-	.syntax unified
-@ 114 "include/linux/uaccess.h" 1
-	adds r1, r5, #8; sbcccs r1, r1, r3; movcc r3, #0
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cbnz	r3, .L2070
-	.syntax unified
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r7, c3, c0	@ get domain
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	bic	r3, r7, #12
-	orr	r3, r3, #4
+	ands	r3, r3, r6
+	ldr	r3, [r3, #72]
 	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
+	cbnz	r3, .L2062
 	movs	r2, #8
-	mov	r1, r5
+	mov	r1, r4
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r7, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cmp	r0, #0
-	beq	.L2058
-.L2057:
-	rsb	r0, r2, #8
-	movs	r1, #0
-	add	r0, r0, r4
-	bl	memset
-	mov	r2, r5
+	cbz	r0, .L2081
+.L2063:
+	mov	r2, r4
 	mov	r1, #256
-.L2075:
-	ldr	r0, .L2076+8
+.L2084:
+	ldr	r0, .L2085+8
 	bl	sftl_printk
-	b	.L2074
-.L2070:
-	movs	r2, #8
-	b	.L2057
+	b	.L2080
+.L2062:
+	movs	r1, #8
+	bl	__memzero
+	b	.L2063
+.L2081:
+	ldr	r2, [r5]
+	ldr	r3, .L2085+12
+	cmp	r2, r3
+	beq	.L2065
+.L2066:
+	mov	r4, #-1
 .L2059:
+	mov	r0, r5
+	bl	kfree
+.L2057:
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+.L2065:
+	ldrh	r2, [r5, #6]
+	add	r1, r5, #8
+	ldrh	r0, [r5, #4]
+	bl	rk_sftl_vendor_read
+	adds	r3, r0, #1
+	beq	.L2066
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
-	strh	r0, [r4, #6]	@ movhi
+	strh	r0, [r5, #6]	@ movhi
 	adds	r2, r2, #8
-	ldr	r3, [r6, #8]
+	ldr	r3, [r6, #72]
 	.syntax unified
-@ 132 "include/linux/uaccess.h" 1
-	adds r1, r5, r2; sbcccs r1, r1, r3; movcc r3, #0
+@ 573 "./arch/arm/include/asm/uaccess.h" 1
+	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L2074
-	.syntax unified
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r6, c3, c0	@ get domain
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	bic	r3, r6, #12
-	orr	r3, r3, #4
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	mov	r1, r4
-	mov	r0, r5
+	bne	.L2080
+	mov	r1, r5
+	mov	r0, r4
 	bl	arm_copy_to_user
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r6, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.thumb
-	.syntax unified
 	cmp	r0, #0
-	bne	.L2074
-.L2071:
-	mov	r5, r0
-	b	.L2054
-.L2056:
-	ldr	r7, .L2076+4
+	bne	.L2080
+.L2076:
+	mov	r4, r0
+	b	.L2059
+.L2061:
+	ldr	r6, .L2085+4
 	mov	r3, sp
-	and	r2, r3, r7
-	ldr	r3, [r2, #8]
-	.syntax unified
-@ 114 "include/linux/uaccess.h" 1
-	adds r1, r5, #8; sbcccs r1, r1, r3; movcc r3, #0
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cbnz	r3, .L2072
+	ands	r3, r3, r6
+	ldr	r3, [r3, #72]
 	.syntax unified
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r6, c3, c0	@ get domain
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	bic	r3, r6, #12
-	orr	r3, r3, #4
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r2, r4, #8; sbcccs r2, r2, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
+	cbnz	r3, .L2068
 	movs	r2, #8
-	mov	r1, r5
+	mov	r1, r4
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r6, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cbz	r0, .L2062
-.L2061:
-	rsb	r0, r2, #8
-	movs	r1, #0
-	add	r0, r0, r4
-	bl	memset
-	mov	r2, r5
+	cbz	r0, .L2082
+.L2069:
+	mov	r2, r4
 	mov	r1, #276
-	b	.L2075
-.L2072:
-	movs	r2, #8
-	b	.L2061
-.L2073:
-	mov	r2, r6
-	b	.L2064
+	b	.L2084
 .L2068:
-	mov	r5, #-1
-	b	.L2052
-.L2058:
-	ldr	r2, [r4]
-	ldr	r3, .L2076+12
-	cmp	r2, r3
-	bne	.L2063
-	ldrh	r2, [r4, #6]
-	add	r1, r4, #8
-	ldrh	r0, [r4, #4]
-	bl	rk_sftl_vendor_read
-	adds	r3, r0, #1
-	bne	.L2059
-.L2063:
-	mov	r5, #-1
-.L2054:
-	mov	r0, r4
-	bl	kfree
-.L2052:
-	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, pc}
-.L2062:
-	ldr	r2, [r4]
-	ldr	r3, .L2076+12
+	movs	r1, #8
+	bl	__memzero
+	b	.L2069
+.L2082:
+	ldr	r2, [r5]
+	ldr	r3, .L2085+12
 	cmp	r2, r3
-	bne	.L2063
-	ldrh	r6, [r4, #6]
+	bne	.L2066
+	ldrh	r2, [r5, #6]
 	movw	r3, #4087
-	cmp	r6, r3
-	bhi	.L2063
+	cmp	r2, r3
+	bhi	.L2066
 	mov	r3, sp
-	adds	r6, r6, #8
-	ands	r7, r7, r3
-	ldr	r3, [r7, #8]
-	.syntax unified
-@ 114 "include/linux/uaccess.h" 1
-	adds r2, r5, r6; sbcccs r2, r2, r3; movcc r3, #0
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cmp	r3, #0
-	bne	.L2073
-	.syntax unified
-@ 92 "./arch/arm/include/asm/domain.h" 1
-	mrc	p15, 0, r7, c3, c0	@ get domain
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	bic	r3, r7, #12
-	orr	r3, r3, #4
+	adds	r2, r2, #8
+	ands	r6, r6, r3
+	ldr	r3, [r6, #72]
 	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r3, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
+@ 564 "./arch/arm/include/asm/uaccess.h" 1
+	adds r1, r4, r2; sbcccs r1, r1, r3; movcc r3, #0
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	mov	r2, r6
-	mov	r1, r5
-	mov	r0, r4
+	cbnz	r3, .L2071
+	mov	r1, r4
+	mov	r0, r5
 	bl	arm_copy_from_user
-	mov	r2, r0
-	.syntax unified
-@ 102 "./arch/arm/include/asm/domain.h" 1
-	mcr	p15, 0, r7, c3, c0	@ set domain
-@ 0 "" 2
-@ 105 "./arch/arm/include/asm/domain.h" 1
-	isb 
-@ 0 "" 2
-	.thumb
-	.syntax unified
-	cbz	r0, .L2065
-.L2064:
-	subs	r6, r6, r2
-	movs	r1, #0
-	adds	r0, r4, r6
-	bl	memset
-	mov	r2, r5
+	cbz	r0, .L2083
+.L2072:
+	mov	r2, r4
 	movw	r1, #283
-	b	.L2075
-.L2065:
-	ldrh	r2, [r4, #6]
-	add	r1, r4, #8
-	ldrh	r0, [r4, #4]
+	b	.L2084
+.L2071:
+	mov	r1, r2
+	mov	r0, r5
+	bl	__memzero
+	b	.L2072
+.L2083:
+	ldrh	r2, [r5, #6]
+	add	r1, r5, #8
+	ldrh	r0, [r5, #4]
 	bl	rk_sftl_vendor_write
-	b	.L2071
-.L2077:
+	b	.L2076
+.L2074:
+	mov	r4, #-1
+	b	.L2057
+.L2086:
 	.align	2
-.L2076:
+.L2085:
 	.word	1074034177
 	.word	-8192
 	.word	.LC133
@@ -14282,11 +14161,11 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L2079
+	ldr	r0, .L2088
 	b	misc_register
-.L2080:
+.L2089:
 	.align	2
-.L2079:
+.L2088:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
@@ -14442,162 +14321,162 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.7558, %object
-	.size	__func__.7558, 17
-__func__.7558:
+	.type	__func__.6707, %object
+	.size	__func__.6707, 17
+__func__.6707:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.7553, %object
-	.size	__func__.7553, 17
-__func__.7553:
+	.type	__func__.6702, %object
+	.size	__func__.6702, 17
+__func__.6702:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.7589, %object
-	.size	__func__.7589, 17
-__func__.7589:
+	.type	__func__.6738, %object
+	.size	__func__.6738, 17
+__func__.6738:
 	.ascii	"List_remove_node\000"
-	.type	__func__.7621, %object
-	.size	__func__.7621, 22
-__func__.7621:
+	.type	__func__.6770, %object
+	.size	__func__.6770, 22
+__func__.6770:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.7728, %object
-	.size	__func__.7728, 22
-__func__.7728:
+	.type	__func__.6877, %object
+	.size	__func__.6877, 22
+__func__.6877:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.8055, %object
-	.size	__func__.8055, 16
-__func__.8055:
+	.type	__func__.7204, %object
+	.size	__func__.7204, 16
+__func__.7204:
 	.ascii	"make_superblock\000"
-	.type	__func__.8230, %object
-	.size	__func__.8230, 19
-__func__.8230:
+	.type	__func__.7379, %object
+	.size	__func__.7379, 19
+__func__.7379:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.13479, %object
-	.size	__func__.13479, 17
-__func__.13479:
+	.type	__func__.17802, %object
+	.size	__func__.17802, 17
+__func__.17802:
 	.ascii	"FlashEraseBlocks\000"
-	.type	__func__.7663, %object
-	.size	__func__.7663, 26
-__func__.7663:
+	.type	__func__.6812, %object
+	.size	__func__.6812, 26
+__func__.6812:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.7168, %object
-	.size	__func__.7168, 11
-__func__.7168:
+	.type	__func__.6317, %object
+	.size	__func__.6317, 11
+__func__.6317:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.7395, %object
-	.size	__func__.7395, 14
-__func__.7395:
+	.type	__func__.6544, %object
+	.size	__func__.6544, 14
+__func__.6544:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.8076, %object
-	.size	__func__.8076, 18
-__func__.8076:
+	.type	__func__.7225, %object
+	.size	__func__.7225, 18
+__func__.7225:
 	.ascii	"SupperBlkListInit\000"
-	.type	__func__.13436, %object
-	.size	__func__.13436, 15
-__func__.13436:
+	.type	__func__.17759, %object
+	.size	__func__.17759, 15
+__func__.17759:
 	.ascii	"FlashReadPages\000"
-	.type	__func__.7840, %object
-	.size	__func__.7840, 14
-__func__.7840:
+	.type	__func__.6989, %object
+	.size	__func__.6989, 14
+__func__.6989:
 	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.7438, %object
-	.size	__func__.7438, 11
-__func__.7438:
+	.type	__func__.6587, %object
+	.size	__func__.6587, 11
+__func__.6587:
 	.ascii	"FtlLoadBbt\000"
-	.type	__func__.13455, %object
-	.size	__func__.13455, 15
-__func__.13455:
+	.type	__func__.17778, %object
+	.size	__func__.17778, 15
+__func__.17778:
 	.ascii	"FlashProgPages\000"
-	.type	__func__.8202, %object
-	.size	__func__.8202, 25
-__func__.8202:
+	.type	__func__.7351, %object
+	.size	__func__.7351, 25
+__func__.7351:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.8243, %object
-	.size	__func__.8243, 16
-__func__.8243:
+	.type	__func__.7392, %object
+	.size	__func__.7392, 16
+__func__.7392:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.8250, %object
-	.size	__func__.8250, 20
-__func__.8250:
+	.type	__func__.7399, %object
+	.size	__func__.7399, 20
+__func__.7399:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7689, %object
-	.size	__func__.7689, 31
-__func__.7689:
+	.type	__func__.6838, %object
+	.size	__func__.6838, 31
+__func__.6838:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.7703, %object
-	.size	__func__.7703, 16
-__func__.7703:
+	.type	__func__.6852, %object
+	.size	__func__.6852, 16
+__func__.6852:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.7630, %object
-	.size	__func__.7630, 16
-__func__.7630:
+	.type	__func__.6779, %object
+	.size	__func__.6779, 16
+__func__.6779:
 	.ascii	"load_l2p_region\000"
-	.type	__func__.7674, %object
-	.size	__func__.7674, 15
-__func__.7674:
+	.type	__func__.6823, %object
+	.size	__func__.6823, 15
+__func__.6823:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.7745, %object
-	.size	__func__.7745, 9
-__func__.7745:
+	.type	__func__.6894, %object
+	.size	__func__.6894, 9
+__func__.6894:
 	.ascii	"log2phys\000"
-	.type	__func__.7964, %object
-	.size	__func__.7964, 16
-__func__.7964:
+	.type	__func__.7113, %object
+	.size	__func__.7113, 16
+__func__.7113:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.7998, %object
-	.size	__func__.7998, 22
-__func__.7998:
+	.type	__func__.7147, %object
+	.size	__func__.7147, 22
+__func__.7147:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.8117, %object
-	.size	__func__.8117, 14
-__func__.8117:
+	.type	__func__.7266, %object
+	.size	__func__.7266, 14
+__func__.7266:
 	.ascii	"ftl_check_vpc\000"
-	.type	__func__.7818, %object
-	.size	__func__.7818, 15
-__func__.7818:
+	.type	__func__.6967, %object
+	.size	__func__.6967, 15
+__func__.6967:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.8101, %object
-	.size	__func__.8101, 21
-__func__.8101:
+	.type	__func__.7250, %object
+	.size	__func__.7250, 21
+__func__.7250:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.8223, %object
-	.size	__func__.8223, 29
-__func__.8223:
+	.type	__func__.7372, %object
+	.size	__func__.7372, 29
+__func__.7372:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.7292, %object
-	.size	__func__.7292, 13
-__func__.7292:
+	.type	__func__.6441, %object
+	.size	__func__.6441, 13
+__func__.6441:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.8320, %object
-	.size	__func__.8320, 19
-__func__.8320:
+	.type	__func__.7469, %object
+	.size	__func__.7469, 19
+__func__.7469:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.8433, %object
-	.size	__func__.8433, 23
-__func__.8433:
+	.type	__func__.7582, %object
+	.size	__func__.7582, 23
+__func__.7582:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.7320, %object
-	.size	__func__.7320, 9
-__func__.7320:
+	.type	__func__.6469, %object
+	.size	__func__.6469, 9
+__func__.6469:
 	.ascii	"FtlWrite\000"
-	.type	__func__.7896, %object
-	.size	__func__.7896, 15
-__func__.7896:
+	.type	__func__.7045, %object
+	.size	__func__.7045, 15
+__func__.7045:
 	.ascii	"FtlLoadSysInfo\000"
-	.type	__func__.7918, %object
-	.size	__func__.7918, 18
-__func__.7918:
+	.type	__func__.7067, %object
+	.size	__func__.7067, 18
+__func__.7067:
 	.ascii	"FtlMapTblRecovery\000"
-	.type	__func__.13594, %object
-	.size	__func__.13594, 14
-__func__.13594:
+	.type	__func__.17926, %object
+	.size	__func__.17926, 14
+__func__.17926:
 	.ascii	"FtlWriteToIDB\000"
 	.space	1
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 128
+	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
-	.space	36
+	.space	32
 	.word	rk_sftl_vendor_storage_ioctl
 	.word	rk_sftl_vendor_storage_ioctl
-	.space	84
+	.space	68
 	.data
 	.align	2
 	.set	.LANCHOR2,. + 0
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index c6f59213d91e..4b02c513405b 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -1,24 +1,23 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 
 /* Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2019-03-26
+ * date: 2019-04-19
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
 #APP
-	.arch_extension	lse
 	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
 	.equ	.L__reg_num_x\num, \num
 	.endr
 	.equ	.L__reg_num_xzr, 31
 
 	.macro	mrs_s, rt, sreg
-.inst (0xd5200000|(\sreg)|(.L__reg_num_\rt))
-		.endm
+	.inst	0xd5200000|(\sreg)|(.L__reg_num_\rt)
+	.endm
 
 	.macro	msr_s, sreg, rt
-.inst (0xd5000000|(\sreg)|(.L__reg_num_\rt))
-		.endm
+	.inst	0xd5000000|(\sreg)|(.L__reg_num_\rt)
+	.endm
 
 #NO_APP
 	.text
@@ -181,51 +180,52 @@ FtlSysBlkNumInit:
 	.global	FtlConstantsInit
 	.type	FtlConstantsInit, %function
 FtlConstantsInit:
-	mov	x7, x0
 	stp	x29, x30, [sp, -16]!
+	mov	x7, x0
 	adrp	x4, .LANCHOR0
-	add	x1, x4, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	ldrh	w3, [x0]
-	ldrh	w6, [x0, 2]
-	ldrh	w5, [x7, 14]
-	ldrh	w0, [x0, 4]
-	ldrh	w2, [x7, 6]
-	cmp	w5, 4
-	strh	w3, [x1, 264]
-	strh	w6, [x1, 266]
-	strh	w0, [x1, 268]
-	strh	w2, [x1, 254]
-	strh	w5, [x1, 270]
+	ldrh	w2, [x0]
+	add	x0, x4, :lo12:.LANCHOR0
+	ldrh	w3, [x7, 14]
+	ldrh	w6, [x7, 2]
+	ldrh	w5, [x7, 4]
+	cmp	w3, 4
+	ldrh	w1, [x7, 6]
+	strh	w2, [x0, 264]
+	strh	w6, [x0, 266]
+	strh	w5, [x0, 268]
+	strh	w1, [x0, 254]
+	strh	w3, [x0, 270]
 	bne	.L12
-	lsr	w2, w2, 1
-	strh	w2, [x1, 254]
-	mov	w2, 8
-	strh	w2, [x1, 270]
-.L12:
-	add	x2, x4, :lo12:.LANCHOR0
-	mov	x1, 0
-	add	x5, x2, 272
+	lsr	w1, w1, 1
+	strh	w1, [x0, 254]
+	mov	w1, 8
+	strh	w1, [x0, 270]
 .L13:
-	strb	w1, [x1, x5]
-	add	x1, x1, 1
-	cmp	x1, 32
-	bne	.L13
-	mov	w1, 5
-	strh	wzr, [x2, 306]
-	strh	w1, [x2, 304]
-	cmp	w3, 1
-	bne	.L14
-	strh	w3, [x2, 304]
+	add	x1, x4, :lo12:.LANCHOR0
+	mov	x0, 0
+	add	x3, x1, 272
 .L14:
+	strb	w0, [x0, x3]
+	add	x0, x0, 1
+	cmp	x0, 32
+	bne	.L14
+	mov	w0, 5
+	strh	wzr, [x1, 306]
+	strh	w0, [x1, 304]
+	cmp	w2, 1
+	bne	.L15
+	strh	w2, [x1, 304]
+.L15:
 	add	x3, x4, :lo12:.LANCHOR0
+	mov	w0, 640
+	strh	w0, [x3, 308]
+	ldrh	w0, [x3, 268]
+	ldrh	w5, [x3, 254]
 	mul	w6, w6, w0
-	mov	w1, 640
+	mul	w0, w0, w5
 	and	w6, w6, 65535
-	ldrh	w5, [x3, 254]
-	strh	w1, [x3, 308]
 	strh	w6, [x3, 244]
-	mul	w0, w0, w5
 	and	w0, w0, 65535
 	strh	w0, [x3, 310]
 	bl	Ftl_log2
@@ -257,8 +257,8 @@ FtlConstantsInit:
 	sdiv	w0, w0, w8
 	and	w0, w0, 65535
 	cmp	w0, 4
-	bls	.L15
-.L21:
+	bls	.L16
+.L22:
 	add	x1, x4, :lo12:.LANCHOR0
 	strh	w0, [x3, 332]
 	mov	w0, 640
@@ -277,8 +277,8 @@ FtlConstantsInit:
 	ldrh	w0, [x1, 332]
 	udiv	w0, w0, w6
 	add	w5, w0, w5
-	beq	.L17
-.L22:
+	beq	.L18
+.L23:
 	add	x4, x4, :lo12:.LANCHOR0
 	str	w5, [x1, 240]
 	ldrh	w0, [x4, 240]
@@ -306,12 +306,22 @@ FtlConstantsInit:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L15:
+.L12:
+	cmp	w3, 8
+	bne	.L13
+	cmp	w5, 1
+	bne	.L13
+	lsr	w1, w1, 1
+	strh	w1, [x0, 254]
+	mov	w1, 2
+	strh	w1, [x0, 268]
+	b	.L13
+.L16:
 	mov	w0, 4
-	b	.L21
-.L17:
-	add	w5, w5, 4
 	b	.L22
+.L18:
+	add	w5, w5, 4
+	b	.L23
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
 	.global	IsBlkInVendorPart
@@ -321,22 +331,22 @@ IsBlkInVendorPart:
 	add	x1, x1, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	ldrh	w2, [x1, 356]
-	cbz	w2, .L27
+	cbz	w2, .L28
 	ldrh	w2, [x1, 332]
 	ldr	x3, [x1, 360]
 	mov	x1, 0
-.L25:
+.L26:
 	cmp	w2, w1, uxth
-	bhi	.L26
-.L27:
+	bhi	.L27
+.L28:
 	mov	w0, 0
 	ret
-.L26:
+.L27:
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4, -2]
 	cmp	w4, w0
-	bne	.L25
+	bne	.L26
 	mov	w0, 1
 	ret
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -428,23 +438,23 @@ FtlBbtCalcTotleCnt:
 	ldrh	w0, [x0, 266]
 	mul	w6, w6, w0
 	cmp	w4, w6
-	blt	.L45
+	blt	.L46
 	mov	w0, w5
 	ret
-.L45:
+.L46:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L38:
+.L39:
 	mov	w0, w4
 	bl	FtlBbmIsBadBlock
-	cbz	w0, .L37
+	cbz	w0, .L38
 	add	w5, w5, 1
 	and	w5, w5, 65535
-.L37:
+.L38:
 	add	w4, w4, 1
 	and	w4, w4, 65535
 	cmp	w4, w6
-	blt	.L38
+	blt	.L39
 	mov	w0, w5
 	ldp	x29, x30, [sp], 16
 	ret
@@ -501,12 +511,12 @@ P2V_block_in_plane:
 ftl_cmp_data_ver:
 	cmp	w0, w1
 	mov	w2, -2147483648
-	bls	.L50
+	bls	.L51
 	sub	w1, w0, w1
 	cmp	w1, w2
 	cset	w0, ls
 	ret
-.L50:
+.L51:
 	sub	w1, w1, w0
 	cmp	w1, w2
 	cset	w0, hi
@@ -540,23 +550,23 @@ FtlFreeSysBLkSort:
 	add	x2, x0, :lo12:.LANCHOR0
 	add	x1, x2, 464
 	ldrh	w3, [x1, 6]
-	cbz	w3, .L54
+	cbz	w3, .L55
 	ldrh	w5, [x2, 2548]
 	mov	w6, 0
 	ldrh	w3, [x1, 2]
 	mov	w4, 0
 	ldrh	w2, [x1, 4]
 	and	w5, w5, 31
-.L56:
+.L57:
 	cmp	w5, w4
-	bgt	.L57
-	cbz	w6, .L54
+	bgt	.L58
+	cbz	w6, .L55
 	add	x0, x0, :lo12:.LANCHOR0
 	strh	w3, [x0, 466]
 	strh	w2, [x0, 468]
-.L54:
+.L55:
 	ret
-.L57:
+.L58:
 	add	x6, x1, x3, sxtw 1
 	add	w4, w4, 1
 	add	w3, w3, 1
@@ -568,7 +578,7 @@ FtlFreeSysBLkSort:
 	mov	w6, 1
 	add	w2, w2, w6
 	and	w2, w2, 1023
-	b	.L56
+	b	.L57
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	2
 	.global	IsInFreeQueue
@@ -580,25 +590,25 @@ IsInFreeQueue:
 	and	w0, w0, 65535
 	ldrh	w4, [x1, 6]
 	cmp	w4, 1024
-	beq	.L67
+	beq	.L68
 	ldrh	w5, [x1, 2]
 	mov	w3, 0
-.L65:
+.L66:
 	cmp	w3, w4
-	bcc	.L66
-.L67:
+	bcc	.L67
+.L68:
 	mov	w0, 0
 	ret
-.L66:
+.L67:
 	add	w2, w3, w5
 	ubfiz	x2, x2, 1, 10
 	add	x2, x1, x2
 	ldrh	w2, [x2, 8]
 	cmp	w2, w0
-	beq	.L68
+	beq	.L69
 	add	w3, w3, 1
-	b	.L65
-.L68:
+	b	.L66
+.L69:
 	mov	w0, 1
 	ret
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -612,7 +622,7 @@ insert_data_list:
 	mov	x4, x2
 	ldrh	w1, [x3, 252]
 	cmp	w1, w0
-	bls	.L71
+	bls	.L72
 	mov	w6, 6
 	ldr	x8, [x3, 2568]
 	mov	w1, -1
@@ -621,12 +631,12 @@ insert_data_list:
 	strh	w1, [x13, 2]
 	strh	w1, [x8, x7]
 	ldr	x1, [x3, 2576]
-	cbnz	x1, .L72
+	cbnz	x1, .L73
 	str	x13, [x3, 2576]
-.L71:
+.L72:
 	mov	w0, 0
 	ret
-.L72:
+.L73:
 	ldr	x11, [x3, 80]
 	ubfiz	x2, x0, 1, 16
 	ldr	x10, [x3, 2568]
@@ -644,51 +654,51 @@ insert_data_list:
 	csinv	w5, w5, wzr, ne
 	mul	x2, x2, x9
 	and	w2, w2, 65535
-.L77:
+.L78:
 	add	w3, w3, 1
 	and	w3, w3, 65535
 	cmp	w3, w14
-	bhi	.L71
+	bhi	.L72
 	cmp	w0, w2
-	beq	.L71
+	beq	.L72
 	ldrh	w12, [x1, 4]
-	cbz	w12, .L75
+	cbz	w12, .L76
 	ubfiz	x9, x2, 1, 16
 	ldrh	w9, [x11, x9]
 	mul	w9, w9, w12
 	cmp	w9, w5
-	bcs	.L75
+	bcs	.L76
 	ldrh	w9, [x1]
 	cmp	w9, w15
-	bne	.L76
+	bne	.L77
 	strh	w2, [x13, 2]
 	add	x2, x4, :lo12:.LANCHOR0
 	strh	w0, [x1]
 	str	x13, [x2, 2584]
-	b	.L71
-.L76:
+	b	.L72
+.L77:
 	umaddl	x1, w9, w6, x10
 	mov	w2, w9
-	b	.L77
-.L75:
+	b	.L78
+.L76:
 	strh	w2, [x8, x7]
 	ldrh	w2, [x1, 2]
 	strh	w2, [x13, 2]
 	add	x2, x4, :lo12:.LANCHOR0
 	ldr	x3, [x2, 2576]
 	cmp	x1, x3
-	bne	.L78
+	bne	.L79
 	strh	w0, [x1, 2]
 	str	x13, [x2, 2576]
-	b	.L71
-.L78:
+	b	.L72
+.L79:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
 	ldr	x2, [x2, 2568]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L71
+	b	.L72
 	.size	insert_data_list, .-insert_data_list
 	.align	2
 	.global	INSERT_DATA_LIST
@@ -705,14 +715,14 @@ INSERT_DATA_LIST:
 	strh	w0, [x1, 2592]
 	ldrh	w1, [x1, 252]
 	cmp	w1, w0
-	bcs	.L83
+	bcs	.L84
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC8
 	mov	w2, 214
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L83:
+.L84:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -723,7 +733,7 @@ insert_free_list:
 	and	w0, w0, 65535
 	mov	w7, 65535
 	cmp	w0, w7
-	beq	.L87
+	beq	.L88
 	adrp	x2, .LANCHOR0
 	add	x5, x2, :lo12:.LANCHOR0
 	mov	w6, 6
@@ -735,12 +745,12 @@ insert_free_list:
 	strh	w1, [x4, 2]
 	strh	w1, [x9, x8]
 	ldr	x1, [x5, 2600]
-	cbnz	x1, .L88
+	cbnz	x1, .L89
 	str	x4, [x5, 2600]
-.L87:
+.L88:
 	mov	w0, 0
 	ret
-.L88:
+.L89:
 	ldr	x11, [x5, 2608]
 	ubfiz	x2, x0, 1, 16
 	ldr	x10, [x5, 2568]
@@ -751,40 +761,40 @@ insert_free_list:
 	asr	x2, x2, 1
 	mul	x2, x2, x5
 	and	w2, w2, 65535
-.L91:
+.L92:
 	ubfiz	x5, x2, 1, 16
 	ldrh	w5, [x11, x5]
 	cmp	w5, w12
-	bcs	.L89
+	bcs	.L90
 	ldrh	w5, [x1]
 	cmp	w5, w7
-	bne	.L90
+	bne	.L91
 	strh	w2, [x4, 2]
 	strh	w0, [x1]
-	b	.L87
-.L90:
+	b	.L88
+.L91:
 	umaddl	x1, w5, w6, x10
 	mov	w2, w5
-	b	.L91
-.L89:
+	b	.L92
+.L90:
 	ldrh	w5, [x1, 2]
 	strh	w5, [x4, 2]
 	strh	w2, [x9, x8]
 	add	x2, x3, :lo12:.LANCHOR0
 	ldr	x3, [x2, 2600]
 	cmp	x1, x3
-	bne	.L92
+	bne	.L93
 	strh	w0, [x1, 2]
 	str	x4, [x2, 2600]
-	b	.L87
-.L92:
+	b	.L88
+.L93:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
 	ldr	x2, [x2, 2568]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L87
+	b	.L88
 	.size	insert_free_list, .-insert_free_list
 	.align	2
 	.global	INSERT_FREE_LIST
@@ -801,7 +811,7 @@ INSERT_FREE_LIST:
 	strh	w0, [x1, 236]
 	ldrh	w1, [x1, 252]
 	cmp	w1, w0
-	bcs	.L93
+	bcs	.L94
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -809,7 +819,7 @@ INSERT_FREE_LIST:
 	add	x1, x1, 24
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L93:
+.L94:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -833,10 +843,10 @@ List_remove_node:
 	add	x20, x22, x21
 	ldrh	w1, [x20, 2]
 	cmp	w1, w0
-	bne	.L97
+	bne	.L98
 	ldr	x0, [x23]
 	cmp	x20, x0
-	beq	.L97
+	beq	.L98
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -844,16 +854,16 @@ List_remove_node:
 	add	x1, x1, 48
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L97:
+.L98:
 	ldr	x0, [x23]
 	mov	w1, 65535
 	cmp	x20, x0
 	ldrh	w0, [x22, x21]
-	bne	.L98
-	cmp	w0, w1
 	bne	.L99
+	cmp	w0, w1
+	bne	.L100
 	str	xzr, [x23]
-.L100:
+.L101:
 	mov	w0, -1
 	strh	w0, [x22, x21]
 	strh	w0, [x20, 2]
@@ -863,7 +873,7 @@ List_remove_node:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L99:
+.L100:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
 	ldr	x1, [x19, 2568]
@@ -871,21 +881,21 @@ List_remove_node:
 	mov	w1, -1
 	str	x0, [x23]
 	strh	w1, [x0, 2]
-	b	.L100
-.L98:
+	b	.L101
+.L99:
 	cmp	w0, w1
 	ldrh	w1, [x20, 2]
-	bne	.L101
+	bne	.L102
 	cmp	w1, w0
-	beq	.L100
+	beq	.L101
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 6
 	mov	w2, -1
 	umull	x1, w1, w0
 	ldr	x0, [x19, 2568]
 	strh	w2, [x0, x1]
-	b	.L100
-.L101:
+	b	.L101
+.L102:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
 	ldr	x3, [x19, 2568]
@@ -896,14 +906,14 @@ List_remove_node:
 	ldrh	w3, [x22, x21]
 	umull	x0, w0, w2
 	strh	w3, [x1, x0]
-	b	.L100
+	b	.L101
 	.size	List_remove_node, .-List_remove_node
 	.align	2
 	.global	List_pop_index_node
 	.type	List_pop_index_node, %function
 List_pop_index_node:
 	ldr	x2, [x0]
-	cbz	x2, .L109
+	cbz	x2, .L110
 	stp	x29, x30, [sp, -32]!
 	adrp	x3, .LANCHOR0+2568
 	and	w1, w1, 65535
@@ -912,9 +922,9 @@ List_pop_index_node:
 	str	x19, [sp, 16]
 	mov	w5, 6
 	ldr	x19, [x3, #:lo12:.LANCHOR0+2568]
-.L105:
-	cbnz	w1, .L106
-.L108:
+.L106:
+	cbnz	w1, .L107
+.L109:
 	sub	x19, x2, x19
 	mov	x2, -6148914691236517206
 	asr	x19, x19, 1
@@ -927,15 +937,15 @@ List_pop_index_node:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L106:
+.L107:
 	ldrh	w3, [x2]
 	cmp	w3, w4
-	beq	.L108
+	beq	.L109
 	sub	w1, w1, #1
 	umaddl	x2, w3, w5, x19
 	and	w1, w1, 65535
-	b	.L105
-.L109:
+	b	.L106
+.L110:
 	mov	w0, 65535
 	ret
 	.size	List_pop_index_node, .-List_pop_index_node
@@ -958,25 +968,25 @@ List_get_gc_head_node:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 2576]
-	cbz	x1, .L121
+	cbz	x1, .L122
 	ldr	x3, [x0, 2568]
 	mov	w4, 6
 	mov	w0, 65535
-.L118:
-	cbz	w2, .L119
+.L119:
+	cbz	w2, .L120
 	ldrh	w1, [x1]
 	cmp	w1, w0
-	bne	.L120
+	bne	.L121
 	ret
-.L120:
+.L121:
 	sub	w2, w2, #1
 	umaddl	x1, w1, w4, x3
 	and	w2, w2, 65535
-	b	.L118
-.L121:
+	b	.L119
+.L122:
 	mov	w0, 65535
 	ret
-.L119:
+.L120:
 	sub	x0, x1, x3
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
@@ -999,20 +1009,20 @@ List_update_data_list:
 	stp	x23, x24, [sp, 48]
 	ldrh	w1, [x0, 32]
 	cmp	w1, w20
-	beq	.L124
+	beq	.L125
 	ldrh	w1, [x0, 88]
 	cmp	w1, w20
-	beq	.L124
+	beq	.L125
 	ldrh	w1, [x0, 136]
 	cmp	w1, w20
-	beq	.L124
+	beq	.L125
 	mov	w22, 6
 	ldr	x24, [x0, 2568]
 	ldr	x1, [x0, 2576]
 	umull	x22, w20, w22
 	add	x23, x24, x22
 	cmp	x23, x1
-	beq	.L124
+	beq	.L125
 	ldr	x2, [x0, 80]
 	ubfiz	x1, x20, 1, 16
 	ldrh	w0, [x23, 4]
@@ -1023,10 +1033,10 @@ List_update_data_list:
 	ldrh	w0, [x23, 2]
 	csinv	w21, w21, wzr, ne
 	cmp	w0, w1
-	bne	.L127
+	bne	.L128
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	bne	.L127
+	bne	.L128
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -1034,15 +1044,15 @@ List_update_data_list:
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L127:
+.L128:
 	ldrh	w0, [x23, 2]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L128
+	bne	.L129
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	beq	.L124
-.L128:
+	beq	.L125
+.L129:
 	mov	w1, 6
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	x2, -6148914691236517206
@@ -1059,12 +1069,12 @@ List_update_data_list:
 	mul	w0, w1, w2
 	csinv	w0, w0, wzr, ne
 	cmp	w21, w0
-	bcs	.L124
+	bcs	.L125
 	mov	w1, w20
 	add	x0, x22, 2576
 	bl	List_remove_node
 	ldrh	w0, [x22, 2592]
-	cbnz	w0, .L130
+	cbnz	w0, .L131
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -1072,14 +1082,14 @@ List_update_data_list:
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L130:
+.L131:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2592]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2592]
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L124:
+.L125:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -1100,29 +1110,29 @@ select_l2p_ram_region:
 	mov	w4, 65535
 	ldrh	w2, [x0, 350]
 	ldr	x0, [x0, 2616]
-.L135:
+.L136:
 	and	w19, w3, 65535
 	cmp	w19, w2
-	bcc	.L137
+	bcc	.L138
 	add	x4, x0, 4
 	mov	w19, w2
 	mov	w6, -2147483648
 	mov	w3, 0
-.L138:
+.L139:
 	cmp	w3, w2
-	bne	.L140
+	bne	.L141
 	cmp	w19, w2
-	bcc	.L136
+	bcc	.L137
 	add	x1, x1, :lo12:.LANCHOR0
 	mov	w19, w2
 	mov	w3, -1
 	ldrh	w4, [x1, 2624]
 	mov	w1, 0
-.L141:
+.L142:
 	cmp	w1, w2
-	bne	.L143
+	bne	.L144
 	cmp	w19, w1
-	bcc	.L136
+	bcc	.L137
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 789
@@ -1130,43 +1140,43 @@ select_l2p_ram_region:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L136
-.L137:
+	b	.L137
+.L138:
 	add	x3, x3, 1
 	add	x5, x0, x3, lsl 4
 	ldrh	w5, [x5, -16]
 	cmp	w5, w4
-	bne	.L135
-.L136:
+	bne	.L136
+.L137:
 	mov	w0, w19
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L140:
+.L141:
 	ldr	w5, [x4]
-	tbnz	w5, #31, .L139
+	tbnz	w5, #31, .L140
 	cmp	w6, w5
-	bls	.L139
+	bls	.L140
 	mov	w6, w5
 	mov	w19, w3
-.L139:
+.L140:
 	add	w3, w3, 1
 	add	x4, x4, 16
 	and	w3, w3, 65535
-	b	.L138
-.L143:
+	b	.L139
+.L144:
 	ldr	w6, [x0, 4]
 	cmp	w3, w6
-	bls	.L142
+	bls	.L143
 	ldrh	w5, [x0]
 	cmp	w5, w4
 	csel	w3, w3, w6, eq
 	csel	w19, w19, w1, eq
-.L142:
+.L143:
 	add	w1, w1, 1
 	add	x0, x0, 16
 	and	w1, w1, 65535
-	b	.L141
+	b	.L142
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
 	.global	FtlUpdateVaildLpn
@@ -1176,12 +1186,12 @@ FtlUpdateVaildLpn:
 	add	x3, x1, :lo12:.LANCHOR0
 	ldrh	w2, [x3, 2626]
 	cmp	w2, 4
-	bhi	.L146
-	cbnz	w0, .L146
+	bhi	.L147
+	cbnz	w0, .L147
 	add	w2, w2, 1
 	strh	w2, [x3, 2626]
 	ret
-.L146:
+.L147:
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	w6, 65535
 	mov	x1, 0
@@ -1189,33 +1199,33 @@ FtlUpdateVaildLpn:
 	ldr	x5, [x0, 80]
 	strh	wzr, [x0, 2626]
 	str	wzr, [x0, 2628]
-.L147:
+.L148:
 	cmp	w4, w1, uxth
-	bhi	.L149
+	bhi	.L150
 	ret
-.L149:
+.L150:
 	ldrh	w3, [x5, x1, lsl 1]
 	cmp	w3, w6
-	beq	.L148
+	beq	.L149
 	ldr	w2, [x0, 2628]
 	add	w2, w2, w3
 	str	w2, [x0, 2628]
-.L148:
+.L149:
 	add	x1, x1, 1
-	b	.L147
+	b	.L148
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
 	.global	ftl_set_blk_mode
 	.type	ftl_set_blk_mode, %function
 ftl_set_blk_mode:
 	and	w0, w0, 65535
-	cbz	w1, .L152
+	cbz	w1, .L153
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	ftl_set_blk_mode.part.7
 	ldp	x29, x30, [sp], 16
 	ret
-.L152:
+.L153:
 	adrp	x1, .LANCHOR0+24
 	ubfx	x2, x0, 5, 11
 	lsl	x2, x2, 2
@@ -1251,9 +1261,9 @@ ftl_sb_update_avl_pages:
 	strh	wzr, [x0, 4]
 	ldrh	w3, [x1, 244]
 	mov	w1, 65535
-.L160:
+.L161:
 	cmp	w3, w2, uxth
-	bhi	.L162
+	bhi	.L163
 	add	x4, x4, :lo12:.LANCHOR0
 	ubfiz	x3, x3, 1, 16
 	add	x3, x3, 16
@@ -1264,69 +1274,69 @@ ftl_sb_update_avl_pages:
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	sub	w1, w1, w6
-.L163:
+.L164:
 	cmp	x2, x3
-	bne	.L165
+	bne	.L166
 	ret
-.L162:
+.L163:
 	add	x5, x0, x2, sxtw 1
 	ldrh	w5, [x5, 16]
 	cmp	w5, w1
-	beq	.L161
+	beq	.L162
 	ldrh	w5, [x0, 4]
 	add	w5, w5, 1
 	strh	w5, [x0, 4]
-.L161:
+.L162:
 	add	w2, w2, 1
-	b	.L160
-.L165:
+	b	.L161
+.L166:
 	ldrh	w4, [x2]
 	cmp	w4, w5
-	beq	.L164
+	beq	.L165
 	ldrh	w4, [x0, 4]
 	add	w4, w1, w4
 	strh	w4, [x0, 4]
-.L164:
+.L165:
 	add	x2, x2, 2
-	b	.L163
+	b	.L164
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
 	.global	FtlSlcSuperblockCheck
 	.type	FtlSlcSuperblockCheck, %function
 FtlSlcSuperblockCheck:
 	ldrh	w1, [x0, 4]
-	cbz	w1, .L166
+	cbz	w1, .L167
 	ldrh	w2, [x0]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L166
+	beq	.L167
 	ldrb	w2, [x0, 6]
 	add	x2, x2, 8
 	ldrh	w3, [x0, x2, lsl 1]
 	adrp	x2, .LANCHOR0+244
 	ldrh	w4, [x2, #:lo12:.LANCHOR0+244]
 	mov	w2, w1
-.L169:
+.L170:
 	cmp	w3, w2
-	beq	.L171
-.L166:
+	beq	.L172
+.L167:
 	ret
-.L171:
+.L172:
 	ldrb	w1, [x0, 6]
 	add	w1, w1, 1
 	and	w1, w1, 255
 	strb	w1, [x0, 6]
 	cmp	w1, w4
-	bne	.L170
+	bne	.L171
 	ldrh	w1, [x0, 2]
 	strb	wzr, [x0, 6]
 	add	w1, w1, 1
 	strh	w1, [x0, 2]
-.L170:
+.L171:
 	ldrb	w1, [x0, 6]
 	add	x1, x1, 8
 	ldrh	w3, [x0, x1, lsl 1]
-	b	.L169
+	b	.L170
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
 	.global	make_superblock
@@ -1341,7 +1351,7 @@ make_superblock:
 	ldrh	w1, [x19]
 	ldrh	w0, [x0, 252]
 	cmp	w1, w0
-	bcc	.L173
+	bcc	.L174
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -1349,7 +1359,7 @@ make_superblock:
 	add	x1, x1, 120
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L173:
+.L174:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x6, x19, 16
 	add	x7, x0, 272
@@ -1358,9 +1368,9 @@ make_superblock:
 	mov	x5, 0
 	ldrh	w8, [x0, 244]
 	mov	w9, -1
-.L174:
+.L175:
 	cmp	w8, w5, uxth
-	bhi	.L176
+	bhi	.L177
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x19, 7]
 	strb	wzr, [x19, 9]
@@ -1372,30 +1382,30 @@ make_superblock:
 	ldrh	w1, [x0, x1, lsl 1]
 	mov	w0, 10000
 	cmp	w1, w0
-	bls	.L177
+	bls	.L178
 	mov	w0, 1
 	strb	w0, [x19, 9]
-.L177:
+.L178:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L176:
+.L177:
 	ldrh	w1, [x19]
 	ldrb	w0, [x7, x5]
 	bl	V2P_block
 	mov	w4, w0
 	strh	w9, [x6]
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L175
+	cbnz	w0, .L176
 	strh	w4, [x6]
 	ldrb	w0, [x19, 7]
 	add	w0, w0, 1
 	strb	w0, [x19, 7]
-.L175:
+.L176:
 	add	x5, x5, 1
 	add	x6, x6, 2
-	b	.L174
+	b	.L175
 	.size	make_superblock, .-make_superblock
 	.align	2
 	.global	update_multiplier_value
@@ -1411,11 +1421,11 @@ update_multiplier_value:
 	ldrh	w10, [x1, 244]
 	ldrh	w11, [x1, 314]
 	cmp	w10, w9, uxth
-	bhi	.L191
-	cbz	w6, .L189
+	bhi	.L192
+	cbz	w6, .L190
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L190:
+.L191:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
 	ldr	x0, [x0, 2568]
@@ -1423,31 +1433,31 @@ update_multiplier_value:
 	mov	w0, 0
 	strh	w6, [x8, 4]
 	ret
-.L184:
+.L185:
 	mov	w6, 0
-	b	.L183
-.L189:
+	b	.L184
+.L190:
 	mov	w6, 0
-	b	.L190
-.L191:
+	b	.L191
+.L192:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L182:
+.L183:
 	ldrb	w0, [x7, x9]
 	mov	w1, w8
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L181
+	cbnz	w0, .L182
 	add	w6, w6, w11
 	and	w6, w6, 65535
-.L181:
+.L182:
 	add	x9, x9, 1
 	cmp	w10, w9, uxth
-	bhi	.L182
-	cbz	w6, .L184
+	bhi	.L183
+	cbz	w6, .L185
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L183:
+.L184:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
 	ldr	x0, [x0, 2568]
@@ -1464,7 +1474,7 @@ GetFreeBlockMinEraseCount:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldr	x0, [x1, 2600]
-	cbz	x0, .L194
+	cbz	x0, .L195
 	ldr	x2, [x1, 2568]
 	ldr	x1, [x1, 2608]
 	sub	x0, x0, x2
@@ -1475,7 +1485,7 @@ GetFreeBlockMinEraseCount:
 	and	x0, x0, 65535
 	ldrh	w0, [x1, x0, lsl 1]
 	ret
-.L194:
+.L195:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
@@ -1487,7 +1497,7 @@ GetFreeBlockMaxEraseCount:
 	add	x4, x2, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	ldr	x1, [x4, 2600]
-	cbz	x1, .L202
+	cbz	x1, .L203
 	ldrh	w3, [x4, 236]
 	mov	w5, 7
 	ldr	x4, [x4, 2568]
@@ -1504,25 +1514,25 @@ GetFreeBlockMaxEraseCount:
 	mul	x1, x1, x3
 	mov	w3, 0
 	and	w1, w1, 65535
-.L198:
+.L199:
 	cmp	w0, w3
-	beq	.L201
+	beq	.L202
 	umull	x5, w1, w6
 	ldrh	w5, [x4, x5]
 	cmp	w5, w7
-	bne	.L199
-.L201:
+	bne	.L200
+.L202:
 	add	x2, x2, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x0, [x2, 2608]
 	ldrh	w0, [x0, x1]
 	ret
-.L199:
+.L200:
 	add	w3, w3, 1
 	mov	w1, w5
 	and	w3, w3, 65535
-	b	.L198
-.L202:
+	b	.L199
+.L203:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
@@ -2004,8 +2014,8 @@ FtlPrintInfo2buf:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	beq	.L204
-.L209:
+	beq	.L205
+.L210:
 	sub	w0, w19, w22
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -2014,11 +2024,11 @@ FtlPrintInfo2buf:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L204:
+.L205:
 	ldrh	w0, [x21, 184]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L206
+	beq	.L207
 	ldr	x1, [x21, 80]
 	ubfiz	x0, x0, 1, 16
 	adrp	x2, .LC74
@@ -2028,7 +2038,7 @@ FtlPrintInfo2buf:
 	mov	x1, 64
 	bl	snprintf
 	add	x19, x19, x0, sxtw
-.L206:
+.L207:
 	mov	w0, 0
 	adrp	x24, .LC75
 	bl	List_get_gc_head_node
@@ -2038,9 +2048,9 @@ FtlPrintInfo2buf:
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-.L208:
+.L209:
 	cmp	w4, w27
-	beq	.L207
+	beq	.L208
 	umull	x25, w4, w26
 	ldr	x0, [x21, 2568]
 	ldr	x2, [x21, 80]
@@ -2060,8 +2070,8 @@ FtlPrintInfo2buf:
 	ldr	x0, [x21, 2568]
 	cmp	w20, 16
 	ldrh	w4, [x0, x25]
-	bne	.L208
-.L207:
+	bne	.L209
+.L208:
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x21, .LC76
 	add	x21, x21, :lo12:.LC76
@@ -2076,9 +2086,9 @@ FtlPrintInfo2buf:
 	movk	x0, 0xaaab, lsl 0
 	mul	x4, x4, x0
 	and	w4, w4, 65535
-.L210:
+.L211:
 	cmp	w4, w25
-	beq	.L209
+	beq	.L210
 	umull	x24, w4, w26
 	ldr	x0, [x23, 2568]
 	ldr	x2, [x23, 2608]
@@ -2094,17 +2104,17 @@ FtlPrintInfo2buf:
 	bl	snprintf
 	add	x19, x19, x0, sxtw
 	cmp	w20, 4
-	beq	.L209
+	beq	.L210
 	ldr	x0, [x23, 2568]
 	ldrh	w4, [x0, x24]
-	b	.L210
+	b	.L211
 	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
 	.align	2
 	.global	rknand_proc_ftlread
 	.type	rknand_proc_ftlread, %function
 rknand_proc_ftlread:
 	cmp	w0, 2047
-	ble	.L218
+	ble	.L219
 	stp	x29, x30, [sp, -32]!
 	adrp	x3, .LC0
 	adrp	x2, .LC77
@@ -2124,7 +2134,7 @@ rknand_proc_ftlread:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L218:
+.L219:
 	mov	w0, 0
 	ret
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
@@ -2140,14 +2150,14 @@ GetSwlReplaceBlock:
 	ldr	w2, [x0, 2684]
 	ldr	w1, [x0, 2696]
 	cmp	w2, w1
-	bcs	.L224
+	bcs	.L225
 	ldrh	w2, [x0, 252]
 	mov	x1, 0
 	ldr	x4, [x0, 2608]
 	str	wzr, [x0, 2676]
-.L225:
+.L226:
 	cmp	w2, w1
-	bhi	.L226
+	bhi	.L227
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w0, [x1, 2676]
 	udiv	w2, w0, w2
@@ -2157,50 +2167,50 @@ GetSwlReplaceBlock:
 	ldrh	w2, [x1, 304]
 	udiv	w0, w0, w2
 	str	w0, [x1, 2676]
-.L227:
+.L228:
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w9, [x1, 2696]
 	ldr	w11, [x1, 2684]
 	add	w0, w9, 256
 	cmp	w0, w11
-	bls	.L232
+	bls	.L233
 	ldr	w1, [x1, 2692]
 	add	w0, w9, 768
 	cmp	w0, w1
-	bls	.L232
-.L234:
+	bls	.L233
+.L235:
 	mov	w20, 65535
-.L233:
+.L234:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L226:
+.L227:
 	ldrh	w3, [x4, x1, lsl 1]
 	add	x1, x1, 1
 	ldr	w5, [x0, 2676]
 	add	w3, w3, w5
 	str	w3, [x0, 2676]
-	b	.L225
-.L224:
+	b	.L226
+.L225:
 	ldr	w1, [x0, 2692]
 	cmp	w2, w1
-	bls	.L227
+	bls	.L228
 	add	w1, w1, 1
 	str	w1, [x0, 2692]
 	mov	w1, 0
-.L229:
+.L230:
 	ldrh	w2, [x0, 252]
 	cmp	w1, w2
-	bcs	.L227
+	bcs	.L228
 	ldr	x4, [x0, 2608]
 	ubfiz	x3, x1, 1, 32
 	add	w1, w1, 1
 	ldrh	w2, [x4, x3]
 	add	w2, w2, 1
 	strh	w2, [x4, x3]
-	b	.L229
-.L232:
+	b	.L230
+.L233:
 	add	x10, x8, :lo12:.LANCHOR0
 	ldrh	w0, [x10, 236]
 	add	w0, w0, w0, lsl 1
@@ -2209,9 +2219,9 @@ GetSwlReplaceBlock:
 	and	w6, w0, 65535
 	add	w0, w9, 64
 	cmp	w6, w0
-	bcc	.L234
+	bcc	.L235
 	ldr	x0, [x10, 2576]
-	cbz	x0, .L234
+	cbz	x0, .L235
 	mov	w4, 65535
 	ldrh	w12, [x10, 252]
 	mov	x13, -6148914691236517206
@@ -2222,39 +2232,39 @@ GetSwlReplaceBlock:
 	mov	w1, 0
 	movk	x13, 0xaaab, lsl 0
 	mov	w14, 6
-.L235:
+.L236:
 	ldrh	w3, [x0]
 	cmp	w3, w10
-	bne	.L238
+	bne	.L239
 	mov	w20, w2
-.L237:
+.L238:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L234
+	beq	.L235
 	ubfiz	x7, x20, 1, 32
 	ldrh	w3, [x5, x7]
 	cmp	w9, w3
-	bcs	.L239
+	bcs	.L240
 	bl	GetFreeBlockMinEraseCount
 	cmp	w9, w0, uxth
-	bcs	.L239
+	bcs	.L240
 	add	x0, x8, :lo12:.LANCHOR0
 	str	w4, [x0, 2696]
-.L239:
+.L240:
 	cmp	w11, w3
-	bls	.L234
+	bls	.L235
 	add	w0, w3, 128
 	cmp	w6, w0
-	ble	.L234
+	ble	.L235
 	add	w0, w3, 256
 	cmp	w11, w0
-	bhi	.L240
+	bhi	.L241
 	add	x0, x8, :lo12:.LANCHOR0
 	add	w3, w3, 768
 	ldr	w0, [x0, 2692]
 	cmp	w3, w0
-	bcs	.L234
-.L240:
+	bcs	.L235
+.L241:
 	add	x19, x8, :lo12:.LANCHOR0
 	ldrh	w5, [x5, x7]
 	mov	w2, w11
@@ -2267,14 +2277,14 @@ GetSwlReplaceBlock:
 	bl	sftl_printk
 	mov	w0, 1
 	str	w0, [x19, 3244]
-	b	.L233
-.L238:
+	b	.L234
+.L239:
 	add	w1, w1, 1
 	and	w1, w1, 65535
 	cmp	w1, w12
-	bhi	.L234
+	bhi	.L235
 	ldrh	w15, [x0, 4]
-	cbz	w15, .L236
+	cbz	w15, .L237
 	sub	x0, x0, x7
 	asr	x0, x0, 1
 	mul	x0, x0, x13
@@ -2282,14 +2292,14 @@ GetSwlReplaceBlock:
 	and	x0, x0, 65535
 	ldrh	w0, [x5, x0, lsl 1]
 	cmp	w9, w0
-	bcs	.L237
+	bcs	.L238
 	cmp	w4, w0
-	bls	.L236
+	bls	.L237
 	mov	w4, w0
 	mov	w2, w20
-.L236:
+.L237:
 	umaddl	x0, w3, w14, x7
-	b	.L235
+	b	.L236
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	2
 	.global	free_data_superblock
@@ -2298,7 +2308,7 @@ free_data_superblock:
 	and	w0, w0, 65535
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L251
+	beq	.L252
 	stp	x29, x30, [sp, -16]!
 	adrp	x2, .LANCHOR0+80
 	ubfiz	x1, x0, 1, 16
@@ -2309,7 +2319,7 @@ free_data_superblock:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L251:
+.L252:
 	mov	w0, 0
 	ret
 	.size	free_data_superblock, .-free_data_superblock
@@ -2324,7 +2334,7 @@ get_new_active_ppa:
 	ldrh	w1, [x0]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L255
+	bne	.L256
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -2332,13 +2342,13 @@ get_new_active_ppa:
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L255:
+.L256:
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x0, 314]
 	cmp	w1, w0
-	bne	.L256
+	bne	.L257
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -2346,9 +2356,9 @@ get_new_active_ppa:
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L256:
+.L257:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L257
+	cbnz	w0, .L258
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -2356,7 +2366,7 @@ get_new_active_ppa:
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L257:
+.L258:
 	ldrb	w0, [x19, 6]
 	add	x1, x20, :lo12:.LANCHOR0
 	strb	wzr, [x19, 10]
@@ -2364,14 +2374,14 @@ get_new_active_ppa:
 	ldrh	w3, [x1, 244]
 	mov	w1, 65535
 	ldrh	w0, [x19, x0, lsl 1]
-.L258:
+.L259:
 	cmp	w0, w1
-	beq	.L260
+	beq	.L261
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w2, [x20, 314]
 	cmp	w1, w2
-	bcs	.L264
+	bcs	.L265
 	orr	w20, w1, w0, lsl 10
 	ldrh	w1, [x19, 4]
 	ldrb	w0, [x19, 6]
@@ -2379,25 +2389,25 @@ get_new_active_ppa:
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	strh	w1, [x19, 4]
-.L263:
+.L264:
 	add	w0, w0, 1
 	and	w0, w0, 255
 	cmp	w3, w0
-	bne	.L262
+	bne	.L263
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
 	mov	w0, 0
-.L262:
+.L263:
 	add	x5, x19, x0, sxtw 1
 	ldrh	w5, [x5, 16]
 	cmp	w5, w4
-	beq	.L263
+	beq	.L264
 	strb	w0, [x19, 6]
 	ldrh	w0, [x19, 2]
 	cmp	w0, w2
-	bne	.L254
-	cbz	w1, .L254
+	bne	.L255
+	cbz	w1, .L255
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -2405,30 +2415,30 @@ get_new_active_ppa:
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L254:
+.L255:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L260:
+.L261:
 	ldrb	w0, [x19, 6]
 	add	w0, w0, 1
 	and	w0, w0, 255
 	strb	w0, [x19, 6]
 	cmp	w0, w3
-	bne	.L259
+	bne	.L260
 	ldrh	w0, [x19, 2]
 	strb	wzr, [x19, 6]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
-.L259:
+.L260:
 	ldrb	w0, [x19, 6]
 	add	x0, x0, 8
 	ldrh	w0, [x19, x0, lsl 1]
-	b	.L258
-.L264:
+	b	.L259
+.L265:
 	mov	w20, 65535
-	b	.L254
+	b	.L255
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
 	.global	FtlGcBufInit
@@ -2441,19 +2451,19 @@ FtlGcBufInit:
 	mov	w9, 1
 	mov	w5, 4
 	str	wzr, [x1, 3248]
-.L271:
+.L272:
 	ldrh	w2, [x1, 244]
 	cmp	w3, w2
-	bcc	.L272
+	bcc	.L273
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w6, 24
 	mov	w5, 4
-.L273:
+.L274:
 	ldr	w1, [x0, 3288]
 	cmp	w2, w1
-	bcc	.L274
+	bcc	.L275
 	ret
-.L272:
+.L273:
 	umull	x4, w3, w8
 	ldr	x6, [x1, 3256]
 	ldr	x7, [x1, 3264]
@@ -2481,8 +2491,8 @@ FtlGcBufInit:
 	str	x4, [x2, 8]
 	ldr	x4, [x6, 8]
 	str	x4, [x2, 16]
-	b	.L271
-.L274:
+	b	.L272
+.L275:
 	umull	x4, w2, w6
 	ldr	x3, [x0, 3256]
 	ldr	x7, [x0, 3264]
@@ -2503,7 +2513,7 @@ FtlGcBufInit:
 	sdiv	w1, w1, w5
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x3, 8]
-	b	.L273
+	b	.L274
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
 	.global	FtlGcBufFree
@@ -2515,31 +2525,31 @@ FtlGcBufFree:
 	mov	w8, 24
 	ldr	w7, [x2, 3288]
 	ldr	x5, [x2, 3256]
-.L276:
+.L277:
 	cmp	w3, w1
-	bcs	.L275
+	bcs	.L276
 	ubfiz	x4, x3, 5, 16
 	mov	w2, 0
 	add	x4, x0, x4
-	b	.L281
-.L277:
+	b	.L282
+.L278:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L281:
+.L282:
 	cmp	w2, w7
-	bcs	.L278
+	bcs	.L279
 	umull	x6, w2, w8
 	add	x9, x5, x6
 	ldr	x10, [x5, x6]
 	ldr	x6, [x4, 8]
 	cmp	x10, x6
-	bne	.L277
+	bne	.L278
 	str	wzr, [x9, 16]
-.L278:
+.L279:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L276
-.L275:
+	b	.L277
+.L276:
 	ret
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -2553,20 +2563,20 @@ FtlGcBufAlloc:
 	mov	w8, 1
 	ldr	w5, [x2, 3288]
 	ldr	x6, [x2, 3256]
-.L283:
+.L284:
 	cmp	w3, w1
-	bcs	.L282
+	bcs	.L283
 	mov	w2, 0
-	b	.L288
-.L284:
+	b	.L289
+.L285:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L288:
+.L289:
 	cmp	w2, w5
-	bcs	.L285
+	bcs	.L286
 	umaddl	x4, w2, w7, x6
 	ldr	w9, [x4, 16]
-	cbnz	w9, .L284
+	cbnz	w9, .L285
 	ubfiz	x2, x3, 5, 16
 	ldr	x9, [x4]
 	add	x2, x0, x2
@@ -2574,11 +2584,11 @@ FtlGcBufAlloc:
 	str	x9, [x2, 8]
 	ldr	x4, [x4, 8]
 	str	x4, [x2, 16]
-.L285:
+.L286:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L283
-.L282:
+	b	.L284
+.L283:
 	ret
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -2591,17 +2601,17 @@ IsBlkInGcList:
 	ldrh	w2, [x1, 3292]
 	ldr	x3, [x1, 3296]
 	mov	x1, 0
-.L290:
+.L291:
 	cmp	w2, w1, uxth
-	bhi	.L292
+	bhi	.L293
 	mov	w0, 0
 	ret
-.L292:
+.L293:
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4, -2]
 	cmp	w4, w0
-	bne	.L290
+	bne	.L291
 	mov	w0, 1
 	ret
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -2622,25 +2632,25 @@ FtlGcUpdatePage:
 	ldrh	w1, [x4, 3292]
 	ldr	x6, [x4, 3296]
 	mov	x4, 0
-.L295:
+.L296:
 	and	w2, w4, 65535
 	cmp	w2, w1
-	bcc	.L297
-	bne	.L296
+	bcc	.L298
+	bne	.L297
 	and	x4, x4, 65535
 	strh	w0, [x6, x4, lsl 1]
 	add	x4, x3, :lo12:.LANCHOR0
 	ldrh	w0, [x4, 3292]
 	add	w0, w0, 1
 	strh	w0, [x4, 3292]
-	b	.L296
-.L297:
+	b	.L297
+.L298:
 	add	x4, x4, 1
 	add	x2, x6, x4, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w9
-	bne	.L295
-.L296:
+	bne	.L296
+.L297:
 	add	x0, x3, :lo12:.LANCHOR0
 	mov	w1, 12
 	ldrh	w3, [x0, 3304]
@@ -2674,24 +2684,24 @@ FtlGcRefreshBlock:
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w3, [x0, 234]
 	cmp	w19, w3
-	beq	.L300
+	beq	.L301
 	ldrh	w2, [x0, 232]
 	cmp	w19, w2
-	beq	.L300
+	beq	.L301
 	mov	w1, 65535
 	cmp	w3, w1
-	bne	.L301
+	bne	.L302
 	strh	w19, [x0, 234]
-.L300:
+.L301:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L301:
+.L302:
 	cmp	w2, w1
-	bne	.L300
+	bne	.L301
 	strh	w19, [x0, 232]
-	b	.L300
+	b	.L301
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
 	.global	FtlGcMarkBadPhyBlk
@@ -2717,24 +2727,24 @@ FtlGcMarkBadPhyBlk:
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x20, -8]
 	mov	x1, 0
-.L304:
+.L305:
 	cmp	w0, w1, uxth
-	bhi	.L306
+	bhi	.L307
 	cmp	w0, 15
-	bhi	.L305
+	bhi	.L306
 	add	x19, x19, :lo12:.LANCHOR0
 	add	w1, w0, 1
 	add	x19, x19, 3328
 	strh	w1, [x19, -8]
 	strh	w21, [x19, w0, sxtw 1]
-	b	.L305
-.L306:
+	b	.L306
+.L307:
 	add	x1, x1, 1
 	add	x2, x20, x1, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w21
-	bne	.L304
-.L305:
+	bne	.L305
+.L306:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -2751,16 +2761,16 @@ FtlGcReFreshBadBlk:
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
-	cbz	w1, .L309
+	cbz	w1, .L310
 	ldrh	w3, [x0, 234]
 	mov	w2, 65535
 	cmp	w3, w2
-	bne	.L309
+	bne	.L310
 	ldrh	w2, [x0, 3362]
 	cmp	w2, w1
-	bcc	.L310
+	bcc	.L311
 	strh	wzr, [x0, 3362]
-.L310:
+.L311:
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x19, 3328
 	ldrh	w1, [x19, 3362]
@@ -2770,7 +2780,7 @@ FtlGcReFreshBadBlk:
 	ldrh	w0, [x19, 3362]
 	add	w0, w0, 1
 	strh	w0, [x19, 3362]
-.L309:
+.L310:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -2782,7 +2792,7 @@ FtlGcReFreshBadBlk:
 ftl_malloc:
 	stp	x29, x30, [sp, -16]!
 	mov	w1, 193
-	movk	w1, 0x60, lsl 16
+	movk	w1, 0x240, lsl 16
 	sxtw	x0, w0
 	add	x29, sp, 0
 	bl	__kmalloc
@@ -2822,9 +2832,9 @@ rknand_print_hex:
 	mov	x19, 0
 	mov	w20, 0
 	adrp	x28, .LC83
-.L320:
+.L321:
 	cmp	w26, w19
-	bhi	.L326
+	bhi	.L327
 	adrp	x0, .LC85
 	add	x0, x0, :lo12:.LC85
 	bl	sftl_printk
@@ -2835,42 +2845,42 @@ rknand_print_hex:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L326:
-	cbnz	w20, .L321
+.L327:
+	cbnz	w20, .L322
 	mov	w3, w22
 	mov	x2, x21
 	mov	x1, x27
 	mov	x0, x24
 	bl	sftl_printk
-.L321:
+.L322:
 	cmp	w23, 4
-	bne	.L322
+	bne	.L323
 	ldr	w1, [x21, x19, lsl 2]
 	adrp	x0, .LC82
 	add	x0, x0, :lo12:.LC82
-.L328:
+.L329:
 	bl	sftl_printk
 	add	w20, w20, 1
 	cmp	w20, 15
-	bls	.L325
+	bls	.L326
 	mov	w20, 0
 	adrp	x0, .LC85
 	add	x0, x0, :lo12:.LC85
 	bl	sftl_printk
-.L325:
+.L326:
 	add	x19, x19, 1
 	add	w22, w22, w23
-	b	.L320
-.L322:
+	b	.L321
+.L323:
 	cmp	w23, 2
-	bne	.L324
+	bne	.L325
 	ldrh	w1, [x21, x19, lsl 1]
 	add	x0, x28, :lo12:.LC83
-	b	.L328
-.L324:
+	b	.L329
+.L325:
 	ldrb	w1, [x21, x19]
 	mov	x0, x25
-	b	.L328
+	b	.L329
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
 	.global	FlashEraseBlocks
@@ -2892,18 +2902,18 @@ FlashEraseBlocks:
 	add	x23, x0, x23
 	mov	w25, -1
 	lsl	w26, w24, 3
-.L330:
+.L331:
 	cmp	x21, x23
-	beq	.L334
+	beq	.L335
 	ldr	w0, [x21]
 	add	x2, x29, 88
 	add	x1, x29, 92
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 88]
-	cbnz	w0, .L331
+	cbnz	w0, .L332
 	ldr	w1, [x29, 92]
 	cmp	w26, w1
-	bls	.L331
+	bls	.L332
 	mov	x19, x20
 	add	x22, x20, x22
 	adrp	x20, .LANCHOR1
@@ -2911,11 +2921,11 @@ FlashEraseBlocks:
 	adrp	x21, .LC86
 	add	x20, x20, 160
 	add	x21, x21, :lo12:.LC86
-.L332:
+.L333:
 	cmp	x19, x22
-	bne	.L333
+	bne	.L334
 	bl	dump_stack
-.L334:
+.L335:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -2923,7 +2933,7 @@ FlashEraseBlocks:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L333:
+.L334:
 	ldr	w2, [x29, 92]
 	mov	w0, -1
 	str	w0, [x19]
@@ -2943,8 +2953,8 @@ FlashEraseBlocks:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC88
 	bl	rknand_print_hex
-	b	.L332
-.L331:
+	b	.L333
+.L332:
 	ldr	w1, [x29, 92]
 	ldr	x2, [x19, 3376]
 	blr	x2
@@ -2953,17 +2963,17 @@ FlashEraseBlocks:
 	str	w0, [x21, -4]
 	ldrh	w0, [x19, 14]
 	cmp	w0, 4
-	bne	.L338
+	bne	.L339
 	ldrb	w0, [x29, 88]
 	ldr	x2, [x19, 3376]
 	ldr	w1, [x29, 92]
 	add	w1, w24, w1
 	blr	x2
-	cbz	w0, .L338
+	cbz	w0, .L339
 	str	w25, [x21, -4]
-.L338:
+.L339:
 	add	x21, x21, 32
-	b	.L330
+	b	.L331
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
 	.global	FtlFreeSysBlkQueueIn
@@ -2977,15 +2987,15 @@ FtlFreeSysBlkQueueIn:
 	sub	w2, w21, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcc	.L345
+	bcc	.L346
 	adrp	x0, .LANCHOR0
 	add	x20, x0, :lo12:.LANCHOR0
 	mov	x19, x0
 	ldrh	w2, [x20, 470]
 	cmp	w2, 1024
-	beq	.L345
+	beq	.L346
 	and	w1, w1, 65535
-	cbz	w1, .L347
+	cbz	w1, .L348
 	mov	w0, w21
 	bl	P2V_block_in_plane
 	and	w22, w0, 65535
@@ -3004,7 +3014,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	w0, [x20, 2688]
 	add	w0, w0, 1
 	str	w0, [x20, 2688]
-.L347:
+.L348:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 464
 	ldrh	w1, [x0, 6]
@@ -3016,7 +3026,7 @@ FtlFreeSysBlkQueueIn:
 	and	w1, w1, 1023
 	strh	w1, [x0, 4]
 	strh	w21, [x2, 8]
-.L345:
+.L346:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
@@ -3034,7 +3044,7 @@ FtlFreeSysBlkQueueOut:
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
 	ldrh	w2, [x21, 470]
-	cbz	w2, .L359
+	cbz	w2, .L360
 	ldrh	w0, [x21, 466]
 	add	x1, x21, 464
 	sub	w2, w2, #1
@@ -3054,23 +3064,23 @@ FtlFreeSysBlkQueueOut:
 	ldr	w0, [x21, 2688]
 	add	w0, w0, 1
 	str	w0, [x21, 2688]
-.L356:
+.L357:
 	sub	w0, w20, #1
 	mov	w1, 65533
 	cmp	w1, w0, uxth
-	bcs	.L357
+	bcs	.L358
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w20
 	ldrh	w2, [x0, 470]
 	adrp	x0, .LC89
 	add	x0, x0, :lo12:.LC89
 	bl	sftl_printk
-.L358:
-	b	.L358
 .L359:
+	b	.L359
+.L360:
 	mov	w20, 65535
-	b	.L356
-.L357:
+	b	.L357
+.L358:
 	mov	w0, w20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
@@ -3089,27 +3099,27 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w1, [x0, 10]
 	ldr	x0, [x0, 16]
-.L362:
+.L363:
 	cmp	w20, w1
-	beq	.L366
+	beq	.L367
 	mov	x21, x0
 	ldrh	w2, [x0], 2
-	cbnz	w2, .L363
+	cbnz	w2, .L364
 	bl	FtlFreeSysBlkQueueOut
 	and	w1, w0, 65535
 	strh	w0, [x21]
 	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcs	.L364
+	bcs	.L365
 	adrp	x0, .LANCHOR0+470
 	ldrh	w2, [x0, #:lo12:.LANCHOR0+470]
 	adrp	x0, .LC90
 	add	x0, x0, :lo12:.LC90
 	bl	sftl_printk
+.L366:
+	b	.L366
 .L365:
-	b	.L365
-.L364:
 	ldr	w0, [x19, 48]
 	strh	wzr, [x19, 2]
 	add	w0, w0, 1
@@ -3118,10 +3128,10 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
-.L366:
+.L367:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L368
+	bhi	.L369
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -3129,16 +3139,16 @@ ftl_map_blk_alloc_new_blk:
 	add	x1, x1, 184
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L368:
+.L369:
 	mov	w0, 0
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L363:
+.L364:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L362
+	b	.L363
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
 	.global	ftl_memset
@@ -3361,23 +3371,23 @@ FtlMemInit:
 	str	x0, [x19, 400]
 	mov	w2, w4
 	mov	x0, x20
-.L373:
+.L374:
 	cmp	w1, w6
-	bcc	.L374
+	bcc	.L375
 	mov	w2, 8
 	add	x4, x0, :lo12:.LANCHOR0
 	sub	w2, w2, w1
 	add	x4, x4, 368
 	add	x2, x2, 1
 	mov	x3, 0
-.L375:
+.L376:
 	add	x3, x3, 1
 	cmp	x3, x2
-	bne	.L376
+	bne	.L377
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3576]
-	cbnz	x2, .L377
-.L379:
+	cbnz	x2, .L378
+.L380:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 216
@@ -3385,92 +3395,92 @@ FtlMemInit:
 	add	x0, x0, :lo12:.LC91
 	bl	sftl_printk
 	mov	w0, -1
-.L372:
+.L373:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L374:
+.L375:
 	ldr	x3, [x19, 400]
 	add	w1, w1, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x5], 8
-	b	.L373
-.L376:
+	b	.L374
+.L377:
 	add	x5, x1, x3
 	add	x5, x4, x5, lsl 3
 	str	xzr, [x5, 24]
-	b	.L375
-.L377:
+	b	.L376
+.L378:
 	ldr	x2, [x1, 3584]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3616]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3624]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 2616]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3632]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 2568]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 400]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x1, [x1, 80]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3296]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3312]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3440]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3456]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3416]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3280]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3448]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3464]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x2, [x1, 3472]
-	cbz	x2, .L379
+	cbz	x2, .L380
 	ldr	x1, [x1, 3480]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3264]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3488]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3496]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3256]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3528]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3536]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3272]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 2608]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3552]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x0, [x0, 360]
-	cbz	x0, .L379
+	cbz	x0, .L380
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3592]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x1, [x0, 3600]
-	cbz	x1, .L379
+	cbz	x1, .L380
 	ldr	x0, [x0, 3608]
-	cbz	x0, .L379
+	cbz	x0, .L380
 	mov	w0, 0
-	b	.L372
+	b	.L373
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -3496,20 +3506,20 @@ FtlBbt2Bitmap:
 	mov	w1, 0
 	lsl	w2, w2, 2
 	bl	ftl_memset
-.L477:
+.L478:
 	ldrh	w0, [x23, x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L474
+	beq	.L475
 	add	x1, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x1, 310]
 	cmp	w1, w0
-	bhi	.L476
+	bhi	.L477
 	mov	w2, 74
 	mov	x1, x20
 	mov	x0, x24
 	bl	sftl_printk
-.L476:
+.L477:
 	ldrh	w2, [x23, x19]
 	mov	w1, 1
 	add	x19, x19, 2
@@ -3520,8 +3530,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x22, x0]
 	orr	w1, w1, w2
 	str	w1, [x22, x0]
-	bne	.L477
-.L474:
+	bne	.L478
+.L475:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -3585,10 +3595,10 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L486:
+.L487:
 	ldrh	w1, [x19, 6]
 	cmp	w1, w0
-	bhi	.L490
+	bhi	.L491
 	adrp	x0, .LANCHOR0+316
 	mov	w23, 0
 	mov	w20, 0
@@ -3596,10 +3606,10 @@ ftl_free_no_use_map_blk:
 	ldrh	w0, [x19]
 	strh	w1, [x21, x0, lsl 1]
 	ldrh	w24, [x21]
-.L491:
+.L492:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L495
+	bhi	.L496
 	mov	w0, w23
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -3607,64 +3617,64 @@ ftl_free_no_use_map_blk:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L490:
+.L491:
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20, x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L487:
+.L488:
 	ldrh	w3, [x19, 10]
 	cmp	w3, w1
-	bhi	.L489
+	bhi	.L490
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L486
-.L489:
+	b	.L487
+.L490:
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x22, x3]
 	cmp	w4, w2
-	bne	.L488
-	cbz	w2, .L488
+	bne	.L489
+	cbz	w2, .L489
 	ldrh	w4, [x21, x3]
 	add	w4, w4, 1
 	strh	w4, [x21, x3]
-.L488:
+.L489:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L487
-.L495:
+	b	.L488
+.L496:
 	ubfiz	x0, x20, 1, 16
 	ldrh	w1, [x21, x0]
 	cmp	w24, w1
-	bls	.L492
+	bls	.L493
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbnz	w0, .L493
-.L494:
+	cbnz	w0, .L494
+.L495:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L491
-.L492:
-	cbnz	w1, .L494
+	b	.L492
+.L493:
+	cbnz	w1, .L495
 	add	x25, x22, x0
 	ldrh	w0, [x22, x0]
-	cbz	w0, .L494
-.L496:
+	cbz	w0, .L495
+.L497:
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	wzr, [x25]
 	ldrh	w0, [x19, 8]
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
-	b	.L494
-.L497:
+	b	.L495
+.L498:
 	mov	w24, 0
-	b	.L496
-.L493:
+	b	.L497
+.L494:
 	mov	w23, w20
-	cbz	w1, .L497
+	cbz	w1, .L498
 	mov	w24, w1
-	b	.L494
+	b	.L495
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
 	.global	FtlL2PDataInit
@@ -3689,10 +3699,10 @@ FtlL2PDataInit:
 	mov	x0, x19
 	mov	w1, 0
 	mov	w5, -1
-.L507:
+.L508:
 	ldrh	w2, [x0, 350]
 	cmp	w2, w1
-	bhi	.L508
+	bhi	.L509
 	mov	w2, -1
 	strh	w2, [x0, 3650]
 	strh	w2, [x0, 3648]
@@ -3716,7 +3726,7 @@ FtlL2PDataInit:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L508:
+.L509:
 	ldr	x3, [x0, 2616]
 	ubfiz	x2, x1, 4, 16
 	add	x3, x3, x2
@@ -3734,7 +3744,7 @@ FtlL2PDataInit:
 	and	x2, x2, -4
 	add	x2, x4, x2
 	str	x2, [x3, 8]
-	b	.L507
+	b	.L508
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
 	.global	FtlVariablesInit
@@ -3808,75 +3818,75 @@ SupperBlkListInit:
 	str	xzr, [x19, 2576]
 	str	xzr, [x19, 2584]
 	str	xzr, [x19, 2600]
-.L513:
+.L514:
 	ldrh	w0, [x19, 252]
 	cmp	w20, w0
-	bcs	.L520
+	bcs	.L521
 	ldrh	w8, [x19, 244]
 	mov	x6, 0
 	ldrh	w7, [x19, 314]
 	mov	w5, 0
-	b	.L521
-.L515:
+	b	.L522
+.L516:
 	ldrb	w0, [x23, x6]
 	mov	w1, w20
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L514
+	cbnz	w0, .L515
 	add	w5, w5, w7
 	and	w5, w5, 65535
-.L514:
+.L515:
 	add	x6, x6, 1
-.L521:
+.L522:
 	cmp	w8, w6, uxth
-	bhi	.L515
-	cbz	w5, .L516
+	bhi	.L516
+	cbz	w5, .L517
 	mov	w0, 32768
 	sdiv	w5, w0, w5
-.L517:
+.L518:
 	ldr	x1, [x19, 2568]
 	mov	w0, 6
 	umaddl	x0, w20, w0, x1
 	strh	w5, [x0, 4]
 	ldrh	w0, [x19, 32]
 	cmp	w0, w20
-	beq	.L518
+	beq	.L519
 	ldrh	w0, [x19, 88]
 	cmp	w0, w20
-	beq	.L518
+	beq	.L519
 	ldrh	w0, [x19, 136]
 	cmp	w0, w20
-	beq	.L518
+	beq	.L519
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x20, 1, 16
 	ldrh	w0, [x1, x0]
-	cbnz	w0, .L519
+	cbnz	w0, .L520
 	add	w22, w22, 1
 	mov	w0, w20
 	and	w22, w22, 65535
 	bl	INSERT_FREE_LIST
-.L518:
+.L519:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L513
-.L516:
+	b	.L514
+.L517:
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x20, 1, 16
 	mov	w2, -1
 	strh	w2, [x1, x0]
-	b	.L517
-.L519:
+	b	.L518
+.L520:
 	add	w21, w21, 1
 	mov	w0, w20
 	and	w21, w21, 65535
 	bl	INSERT_DATA_LIST
-	b	.L518
-.L520:
+	b	.L519
+.L521:
 	strh	w21, [x19, 2592]
 	add	w21, w21, w22
 	strh	w22, [x19, 236]
 	cmp	w21, w0
-	ble	.L522
+	ble	.L523
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -3884,7 +3894,7 @@ SupperBlkListInit:
 	add	x1, x1, 248
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L522:
+.L523:
 	mov	w0, 0
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
@@ -3940,32 +3950,32 @@ FlashGetBadBlockList:
 	blr	x2
 	and	w0, w0, 65535
 	cmp	w0, 50
-	bls	.L527
+	bls	.L528
 	mov	w2, 256
 	mov	w1, 255
 	mov	x0, x20
 	bl	ftl_memset
 	mov	w0, 0
-.L527:
+.L528:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 14]
 	cmp	w1, 4
-	bne	.L531
+	bne	.L532
 	mov	x1, 0
-.L529:
+.L530:
 	cmp	w0, w1, uxth
-	bhi	.L530
-.L531:
+	bhi	.L531
+.L532:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L530:
+.L531:
 	ldrh	w2, [x20, x1, lsl 1]
 	lsr	w2, w2, 1
 	strh	w2, [x20, x1, lsl 1]
 	add	x1, x1, 1
-	b	.L529
+	b	.L530
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
 	.global	ftl_memcpy
@@ -4000,9 +4010,9 @@ FlashReadPages:
 	ldrh	w25, [x2, 12]
 	add	x22, x22, 272
 	add	x24, x24, :lo12:.LC8
-.L536:
+.L537:
 	cmp	x23, x19
-	bne	.L549
+	bne	.L550
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -4011,36 +4021,36 @@ FlashReadPages:
 	ldr	x27, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L549:
+.L550:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L537
+	cbz	x0, .L538
 	ldr	x0, [x19, 16]
-	cbnz	x0, .L538
-.L537:
+	cbnz	x0, .L539
+.L538:
 	mov	w2, 96
 	mov	x1, x22
 	mov	x0, x24
 	bl	sftl_printk
-.L538:
+.L539:
 	ldr	w0, [x19, 4]
 	add	x2, x29, 104
 	add	x1, x29, 108
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 104]
 	cmp	w0, 3
-	bls	.L539
+	bls	.L540
 	mov	w0, -1
 	str	w0, [x19]
-.L540:
+.L541:
 	add	x19, x19, 32
-	b	.L536
-.L539:
+	b	.L537
+.L540:
 	ldr	x20, [x19, 8]
 	tst	x20, 63
-	beq	.L541
+	beq	.L542
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	x20, [x1, 3504]
-.L541:
+.L542:
 	add	x27, x21, :lo12:.LANCHOR0
 	ldr	w1, [x29, 108]
 	ldr	x3, [x19, 16]
@@ -4050,7 +4060,7 @@ FlashReadPages:
 	str	w0, [x19]
 	ldrh	w0, [x27, 14]
 	cmp	w0, 4
-	bne	.L543
+	bne	.L544
 	ldrb	w0, [x29, 104]
 	add	x2, x20, 2048
 	ldr	x4, [x27, 3392]
@@ -4060,65 +4070,65 @@ FlashReadPages:
 	add	x3, x3, 8
 	blr	x4
 	cmn	w0, #1
-	beq	.L544
+	beq	.L545
 	ldr	x1, [x19, 16]
 	ldr	w2, [x1, 12]
 	cmn	w2, #1
-	bne	.L545
+	bne	.L546
 	ldr	w2, [x1, 8]
 	cmn	w2, #1
-	bne	.L545
+	bne	.L546
 	ldr	w1, [x1]
 	cmn	w1, #1
-	beq	.L545
-.L544:
+	beq	.L546
+.L545:
 	mov	w1, -1
 	str	w1, [x19]
-.L545:
+.L546:
 	ldr	w1, [x19]
 	cmn	w1, #1
-	beq	.L546
+	beq	.L547
 	cmp	w0, 256
-	bne	.L546
+	bne	.L547
 	str	w0, [x19]
-.L546:
+.L547:
 	ldr	w3, [x19]
 	cmp	w3, 256
 	ccmn	w3, #1, 4, ne
-	bne	.L543
+	bne	.L544
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC92
 	ldr	w2, [x29, 108]
 	add	x0, x0, :lo12:.LC92
 	bl	sftl_printk
 	ldr	x1, [x19, 8]
-	cbz	x1, .L548
+	cbz	x1, .L549
 	mov	w3, 4
 	adrp	x0, .LC93
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC93
 	bl	rknand_print_hex
-.L548:
+.L549:
 	ldr	x1, [x19, 16]
-	cbz	x1, .L543
+	cbz	x1, .L544
 	mov	w3, 4
 	adrp	x0, .LC94
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC94
 	bl	rknand_print_hex
-.L543:
+.L544:
 	add	x1, x21, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3504]
 	cmp	x20, x0
-	bne	.L540
+	bne	.L541
 	ldr	x0, [x19, 8]
 	cmp	x20, x0
-	beq	.L540
+	beq	.L541
 	ldrh	w2, [x1, 270]
 	mov	x1, x20
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-	b	.L540
+	b	.L541
 	.size	FlashReadPages, .-FlashReadPages
 	.align	2
 	.global	FtlLoadFactoryBbt
@@ -4141,10 +4151,10 @@ FtlLoadFactoryBbt:
 	ldr	x1, [x0, 3464]
 	ldr	x24, [x0, 3528]
 	stp	x1, x24, [x23, 8]
-.L576:
+.L577:
 	ldrh	w0, [x19, 266]
 	cmp	w21, w0
-	bcc	.L581
+	bcc	.L582
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -4152,17 +4162,17 @@ FtlLoadFactoryBbt:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L581:
+.L582:
 	ldrh	w20, [x19, 310]
 	mov	w0, -1
 	strh	w0, [x22]
-.L578:
+.L579:
 	ldrh	w0, [x19, 310]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L579
+	ble	.L580
 	madd	w0, w0, w21, w20
 	mov	w2, 1
 	mov	w1, w2
@@ -4172,15 +4182,15 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L578
+	beq	.L579
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L578
+	bne	.L579
 	strh	w20, [x22]
-.L579:
+.L580:
 	add	w21, w21, 1
 	add	x22, x22, 2
-	b	.L576
+	b	.L577
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
 	.global	FtlGetLastWrittenPage
@@ -4195,9 +4205,9 @@ FtlGetLastWrittenPage:
 	adrp	x1, .LANCHOR0
 	stp	x21, x22, [sp, 32]
 	add	x2, x1, :lo12:.LANCHOR0
-	bne	.L587
+	bne	.L588
 	ldrh	w19, [x2, 316]
-.L588:
+.L589:
 	add	x1, x1, :lo12:.LANCHOR0
 	sub	w19, w19, #1
 	sxth	w19, w19
@@ -4214,23 +4224,23 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 96]
 	cmn	w0, #1
-	bne	.L589
+	bne	.L590
 	mov	w22, 0
 	mov	w24, 2
-.L590:
+.L591:
 	cmp	w22, w19
-	ble	.L593
-.L589:
+	ble	.L594
+.L590:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 160
 	ret
-.L587:
+.L588:
 	ldrh	w19, [x2, 314]
-	b	.L588
-.L593:
+	b	.L589
+.L594:
 	add	w20, w22, w19
 	mov	w2, w23
 	mov	w1, 1
@@ -4242,20 +4252,20 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29, 96]
 	cmn	w0, #1
-	bne	.L591
+	bne	.L592
 	ldr	w0, [x29, 100]
 	cmn	w0, #1
-	bne	.L591
+	bne	.L592
 	ldr	w0, [x29, 64]
 	cmn	w0, #1
-	beq	.L591
+	beq	.L592
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L590
-.L591:
+	b	.L591
+.L592:
 	add	w20, w20, 1
 	sxth	w22, w20
-	b	.L590
+	b	.L591
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
 	.global	FtlScanSysBlk
@@ -4300,24 +4310,24 @@ FtlScanSysBlk:
 	add	x0, x19, 2704
 	bl	ftl_memset
 	ldrh	w24, [x19, 252]
-.L599:
+.L600:
 	ldrh	w0, [x19, 254]
 	cmp	w0, w24
-	bls	.L639
+	bls	.L640
 	ldrh	w9, [x19, 244]
 	mov	x5, 0
 	ldrh	w8, [x19, 324]
 	mov	w20, 0
 	add	x7, x19, 272
 	mov	w6, 4
-	b	.L640
-.L601:
+	b	.L641
+.L602:
 	ldrb	w0, [x7, x5]
 	mov	w1, w24
 	bl	V2P_block
 	and	w4, w0, 65535
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L600
+	cbnz	w0, .L601
 	ldr	x0, [x19, 3440]
 	ubfiz	x2, x20, 5, 16
 	lsl	w4, w4, 10
@@ -4334,17 +4344,17 @@ FtlScanSysBlk:
 	sdiv	w0, w0, w6
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L600:
+.L601:
 	add	x5, x5, 1
-.L640:
+.L641:
 	cmp	w9, w5, uxth
-	bhi	.L601
-	cbnz	w20, .L602
-.L638:
+	bhi	.L602
+	cbnz	w20, .L603
+.L639:
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L599
-.L602:
+	b	.L600
+.L603:
 	ldr	x0, [x19, 3440]
 	mov	w1, w20
 	mov	w2, 1
@@ -4352,7 +4362,7 @@ FtlScanSysBlk:
 	mov	x23, 0
 	add	x27, x19, 2704
 	bl	FlashReadPages
-.L637:
+.L638:
 	ldr	x0, [x19, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
@@ -4360,10 +4370,10 @@ FtlScanSysBlk:
 	cmn	w0, #1
 	ldr	x26, [x1, 16]
 	ubfx	x22, x22, 10, 16
-	bne	.L605
+	bne	.L606
 	mov	w28, 16
 	mov	w3, 65535
-.L607:
+.L608:
 	ldr	x0, [x19, 3440]
 	mov	w2, 1
 	str	w3, [x29, 108]
@@ -4379,73 +4389,73 @@ FtlScanSysBlk:
 	ldr	w3, [x29, 108]
 	cmp	w0, w3
 	ldr	x0, [x19, 3440]
-	bne	.L604
+	bne	.L605
 	mov	w1, -1
 	str	w1, [x0, x23]
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0, x23]
 	cmp	w0, w1
-	bne	.L605
-.L606:
+	bne	.L606
+.L607:
 	mov	w1, 1
-	b	.L677
-.L604:
+	b	.L678
+.L605:
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L605
+	bne	.L606
 	sub	w28, w28, #1
 	ands	w28, w28, 65535
-	bne	.L607
-	b	.L606
-.L605:
+	bne	.L608
+	b	.L607
+.L606:
 	ldr	w1, [x19, 2668]
 	ldr	w0, [x26, 4]
 	cmn	w1, #1
-	beq	.L608
+	beq	.L609
 	cmp	w1, w0
-	bhi	.L609
-.L608:
+	bhi	.L610
+.L609:
 	cmn	w0, #1
-	beq	.L609
+	beq	.L610
 	add	w1, w0, 1
 	str	w1, [x19, 2668]
-.L609:
+.L610:
 	ldrh	w1, [x26]
 	mov	w2, 61604
 	cmp	w1, w2
-	beq	.L611
-	bhi	.L612
+	beq	.L612
+	bhi	.L613
 	mov	w0, 61574
 	cmp	w1, w0
-	beq	.L613
-.L610:
+	beq	.L614
+.L611:
 	add	x23, x23, 32
 	cmp	x20, x23
-	bne	.L637
-	b	.L638
-.L612:
+	bne	.L638
+	b	.L639
+.L613:
 	mov	w0, 61634
 	cmp	w1, w0
-	beq	.L614
+	beq	.L615
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L610
+	bne	.L611
 	mov	w1, 0
-.L677:
+.L678:
 	mov	w0, w22
 	bl	FtlFreeSysBlkQueueIn
-	b	.L610
-.L614:
+	b	.L611
+.L615:
 	ldrh	w1, [x19, 3712]
 	ldr	w0, [x19, 340]
 	cmp	w1, w0
-	bls	.L616
+	bls	.L617
 	adrp	x0, .LC8
 	mov	w2, 1225
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L616:
+.L617:
 	ldr	w3, [x19, 340]
 	ldrh	w1, [x19, 3712]
 	and	w2, w3, 65535
@@ -4455,52 +4465,52 @@ FtlScanSysBlk:
 	sub	w2, w2, #1
 	sxth	x0, w0
 	sxth	w2, w2
-.L617:
+.L618:
 	cmp	w0, w2
-	bgt	.L623
-	tbz	w0, #31, .L657
-	b	.L610
-.L623:
+	bgt	.L624
+	tbz	w0, #31, .L658
+	b	.L611
+.L624:
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L618
+	bls	.L619
 	ldr	w2, [x4]
-	cbnz	w2, .L619
+	cbnz	w2, .L620
 	cmp	w3, w1
-	beq	.L619
+	beq	.L620
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
-.L619:
-	mov	w1, 0
 .L620:
+	mov	w1, 0
+.L621:
 	cmp	w1, w0
-	bne	.L621
+	bne	.L622
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 3576]
 	strh	w22, [x1, x5, lsl 1]
-	tbnz	w0, #31, .L610
+	tbnz	w0, #31, .L611
 	ldrh	w1, [x19, 3712]
 	ldr	w2, [x19, 340]
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	cmp	w0, w2, sxth
-	bgt	.L610
-.L657:
+	bgt	.L611
+.L658:
 	add	w1, w1, 1
 	strh	w1, [x19, 3712]
 	ldr	x1, [x19, 3624]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 3576]
-.L675:
+.L676:
 	strh	w22, [x1, x0, lsl 1]
-	b	.L610
-.L621:
+	b	.L611
+.L622:
 	ldr	x4, [x19, 3624]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4514,69 +4524,69 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L620
-.L618:
+	b	.L621
+.L619:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L617
-.L613:
+	b	.L618
+.L614:
 	ldrh	w1, [x19, 356]
 	ldrh	w0, [x19, 332]
 	cmp	w1, w0
-	bls	.L626
+	bls	.L627
 	adrp	x0, .LC8
 	mov	w2, 1266
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L626:
+.L627:
 	ldrh	w3, [x19, 332]
 	ldrh	w1, [x19, 356]
 	sub	w2, w3, #1
 	ldr	x4, [x19, 3600]
 	sxth	x0, w2
 	sub	w2, w2, w1
-.L627:
+.L628:
 	cmp	w0, w2
-	ble	.L632
+	ble	.L633
 	sxtw	x5, w0
 	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L628
+	bls	.L629
 	ldr	w2, [x4]
-	cbnz	w2, .L629
+	cbnz	w2, .L630
 	cmp	w3, w1
-	beq	.L629
+	beq	.L630
 	add	w1, w1, 1
 	strh	w1, [x19, 356]
-.L629:
-	mov	w1, 0
 .L630:
+	mov	w1, 0
+.L631:
 	cmp	w1, w0
-	bne	.L631
+	bne	.L632
 	ldr	x1, [x19, 3600]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 360]
 	strh	w22, [x1, x5, lsl 1]
-.L632:
-	tbnz	w0, #31, .L610
+.L633:
+	tbnz	w0, #31, .L611
 	ldrh	w1, [x19, 332]
 	ldrh	w2, [x19, 356]
 	sub	w1, w1, #1
 	sub	w1, w1, w2
 	cmp	w0, w1, sxth
-	bgt	.L610
+	bgt	.L611
 	ldr	x1, [x19, 3600]
 	add	w2, w2, 1
 	strh	w2, [x19, 356]
 	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 360]
-	b	.L675
-.L631:
+	b	.L676
+.L632:
 	ldr	x4, [x19, 3600]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
@@ -4590,54 +4600,54 @@ FtlScanSysBlk:
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L630
-.L628:
+	b	.L631
+.L629:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L627
-.L611:
+	b	.L628
+.L612:
 	ldrh	w2, [x27]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L634
+	bne	.L635
 	strh	w22, [x27]
-.L676:
+.L677:
 	str	w0, [x27, 8]
-	b	.L610
-.L634:
+	b	.L611
+.L635:
 	ldrh	w0, [x27, 4]
 	cmp	w0, w1
-	beq	.L635
+	beq	.L636
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L635:
+.L636:
 	ldr	w0, [x26, 4]
 	ldr	w1, [x27, 8]
 	cmp	w1, w0
-	bcs	.L636
+	bcs	.L637
 	ldrh	w0, [x27]
 	strh	w0, [x27, 4]
 	strh	w22, [x27]
 	ldr	w0, [x26, 4]
-	b	.L676
-.L636:
+	b	.L677
+.L637:
 	strh	w22, [x27, 4]
-	b	.L610
-.L639:
+	b	.L611
+.L640:
 	ldr	x1, [x19, 3576]
 	ldrh	w0, [x1]
-	cbz	w0, .L641
-.L644:
+	cbz	w0, .L642
+.L645:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x1, [x0, 360]
 	ldrh	w2, [x1]
-	cbz	w2, .L642
-.L643:
+	cbz	w2, .L643
+.L644:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x21, 3712]
 	ldr	w0, [x21, 340]
 	cmp	w1, w0
-	bls	.L673
+	bls	.L674
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4645,7 +4655,7 @@ FtlScanSysBlk:
 	add	x1, x1, 288
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L673:
+.L674:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -4654,22 +4664,22 @@ FtlScanSysBlk:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L641:
+.L642:
 	ldrh	w0, [x19, 3712]
-	cbz	w0, .L644
+	cbz	w0, .L645
 	ldr	w2, [x19, 340]
 	mov	w0, 0
-.L645:
+.L646:
 	cmp	w0, w2
-	bcs	.L644
+	bcs	.L645
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L646
+	cbz	w3, .L647
 	mov	w1, w0
 	add	x2, x21, :lo12:.LANCHOR0
-.L647:
+.L648:
 	ldr	w3, [x2, 340]
 	cmp	w1, w3
-	bcs	.L644
+	bcs	.L645
 	ldr	x5, [x2, 3576]
 	sxtw	x6, w1
 	lsl	x4, x6, 1
@@ -4684,27 +4694,27 @@ FtlScanSysBlk:
 	str	w6, [x5, x3, lsl 2]
 	ldr	x3, [x2, 3576]
 	strh	wzr, [x3, x4]
-	b	.L647
-.L646:
+	b	.L648
+.L647:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L645
-.L642:
+	b	.L646
+.L643:
 	ldrh	w2, [x0, 356]
-	cbz	w2, .L643
+	cbz	w2, .L644
 	ldrh	w2, [x0, 332]
 	mov	w0, 0
-.L652:
+.L653:
 	mov	w6, w0
 	cmp	w0, w2
-	bge	.L643
+	bge	.L644
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L653
+	cbz	w3, .L654
 	add	x1, x21, :lo12:.LANCHOR0
-.L654:
+.L655:
 	ldrh	w2, [x1, 332]
 	cmp	w0, w2
-	bge	.L643
+	bge	.L644
 	ldr	x4, [x1, 360]
 	sxtw	x5, w0
 	lsl	x3, x5, 1
@@ -4719,11 +4729,11 @@ FtlScanSysBlk:
 	str	w5, [x4, x2, lsl 2]
 	ldr	x2, [x1, 360]
 	strh	wzr, [x2, x3]
-	b	.L654
-.L653:
+	b	.L655
+.L654:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L652
+	b	.L653
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
 	.global	FtlLoadBbt
@@ -4745,11 +4755,11 @@ FtlLoadBbt:
 	ldrh	w20, [x23, 310]
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-.L679:
+.L680:
 	ldrh	w0, [x23, 310]
 	sub	w0, w0, #16
 	cmp	w20, w0
-	ble	.L682
+	ble	.L683
 	lsl	w0, w20, 10
 	mov	w2, 1
 	str	w0, [x21, 4]
@@ -4758,7 +4768,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L680
+	bne	.L681
 	ldr	w0, [x21, 4]
 	mov	w2, 1
 	mov	w1, w2
@@ -4766,27 +4776,27 @@ FtlLoadBbt:
 	str	w0, [x21, 4]
 	mov	x0, x21
 	bl	FlashReadPages
-.L680:
+.L681:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L681
+	beq	.L682
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L681
+	bne	.L682
 	ldr	w1, [x22, 4]
 	str	w1, [x23, 376]
 	strh	w20, [x23, 368]
 	ldrh	w1, [x22, 8]
 	strh	w1, [x23, 372]
-.L682:
+.L683:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w1, [x21, 368]
 	cmp	w1, w0
-	beq	.L696
+	beq	.L697
 	ldrh	w1, [x21, 372]
 	cmp	w1, w0
-	beq	.L686
+	beq	.L687
 	add	x0, x21, 3728
 	lsl	w1, w1, 10
 	mov	w2, 1
@@ -4795,21 +4805,21 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21, 3728]
 	cmn	w0, #1
-	beq	.L686
+	beq	.L687
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L686
+	bne	.L687
 	ldr	w1, [x21, 376]
 	ldr	w0, [x22, 4]
 	cmp	w0, w1
-	bls	.L686
+	bls	.L687
 	str	w0, [x21, 376]
 	ldrh	w1, [x21, 372]
 	ldrh	w0, [x22, 8]
 	strh	w1, [x21, 368]
 	strh	w0, [x21, 372]
-.L686:
+.L687:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w1, 1
 	add	x23, x20, 3728
@@ -4819,8 +4829,8 @@ FtlLoadBbt:
 	sxth	w21, w0
 	add	w0, w0, 1
 	strh	w0, [x20, 370]
-.L688:
-	tbz	w21, #31, .L691
+.L689:
+	tbz	w21, #31, .L692
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -4828,44 +4838,44 @@ FtlLoadBbt:
 	add	x1, x1, 304
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L690:
+.L691:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 10]
 	mov	w2, 65535
 	strh	w0, [x1, 374]
 	ldrh	w0, [x22, 12]
 	cmp	w0, w2
-	beq	.L693
+	beq	.L694
 	ldr	w2, [x1, 240]
 	cmp	w0, w2
-	beq	.L693
+	beq	.L694
 	ldrh	w1, [x1, 254]
 	lsr	w1, w1, 2
 	cmp	w2, w1
-	bcs	.L693
+	bcs	.L694
 	cmp	w0, w1
-	bcs	.L693
+	bcs	.L694
 	bl	FtlSysBlkNumInit
-.L693:
+.L694:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, 0
 	add	x21, x19, 400
-.L694:
+.L695:
 	ldrh	w0, [x19, 266]
 	cmp	w20, w0
-	bcc	.L695
+	bcc	.L696
 	mov	w0, 0
-.L678:
+.L679:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L681:
+.L682:
 	sub	w20, w20, #1
 	and	w20, w20, 65535
-	b	.L679
-.L691:
+	b	.L680
+.L692:
 	ldrh	w0, [x20, 368]
 	mov	w2, 1
 	mov	w1, w2
@@ -4877,15 +4887,15 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x23]
 	cmn	w0, #1
-	beq	.L689
+	beq	.L690
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	beq	.L690
-.L689:
+	beq	.L691
+.L690:
 	sub	w21, w21, #1
 	sxth	w21, w21
-	b	.L688
-.L695:
+	b	.L689
+.L696:
 	ldrh	w2, [x19, 3640]
 	ldr	x0, [x19, 3736]
 	mul	w1, w2, w20
@@ -4894,10 +4904,10 @@ FtlLoadBbt:
 	add	x1, x0, x1, lsl 2
 	ldr	x0, [x21], 8
 	bl	ftl_memcpy
-	b	.L694
-.L696:
+	b	.L695
+.L697:
 	mov	w0, -1
-	b	.L678
+	b	.L679
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
 	.global	FlashProgPages
@@ -4925,49 +4935,49 @@ FlashProgPages:
 	add	x23, x23, 320
 	add	x24, x24, :lo12:.LC8
 	lsl	w28, w25, 3
-.L709:
+.L710:
 	cmp	x20, x22
-	bne	.L723
-	cbz	w27, .L717
+	bne	.L724
+	cbz	w27, .L718
 	adrp	x20, .LC95
 	adrp	x23, .LC96
 	add	x20, x20, :lo12:.LC95
 	add	x23, x23, :lo12:.LC96
-	b	.L745
-.L723:
+	b	.L746
+.L724:
 	ldr	x0, [x20, 8]
-	cbz	x0, .L710
+	cbz	x0, .L711
 	ldr	x0, [x20, 16]
-	cbnz	x0, .L711
-.L710:
+	cbnz	x0, .L712
+.L711:
 	mov	w2, 148
 	mov	x1, x23
 	mov	x0, x24
 	bl	sftl_printk
-.L711:
+.L712:
 	ldr	w0, [x20, 4]
 	add	x2, x29, 120
 	add	x1, x29, 124
 	bl	l2p_addr_tran.isra.0
 	ldr	w0, [x29, 120]
 	cmp	w0, 3
-	bls	.L712
-.L747:
+	bls	.L713
+.L748:
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L713
-.L712:
-	cbnz	w0, .L714
+	b	.L714
+.L713:
+	cbnz	w0, .L715
 	ldr	w0, [x29, 124]
 	cmp	w28, w0
-	bls	.L714
+	bls	.L715
 	adrp	x20, .LANCHOR1
 	add	x20, x20, :lo12:.LANCHOR1
 	adrp	x21, .LC86
 	add	x20, x20, 320
 	add	x21, x21, :lo12:.LC86
-	b	.L744
-.L716:
+	b	.L745
+.L717:
 	ldr	w2, [x19, 4]
 	mov	w0, -1
 	str	w0, [x19]
@@ -4987,11 +4997,11 @@ FlashProgPages:
 	mov	w2, w3
 	add	x0, x0, :lo12:.LC88
 	bl	rknand_print_hex
-.L744:
+.L745:
 	cmp	x19, x22
-	bne	.L716
+	bne	.L717
 	bl	dump_stack
-.L717:
+.L718:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5000,19 +5010,19 @@ FlashProgPages:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L714:
+.L715:
 	ldr	x1, [x20, 8]
 	tst	x1, 63
-	beq	.L731
+	beq	.L732
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x26, [x0, 3504]
 	cmp	x1, x26
-	beq	.L718
+	beq	.L719
 	ldrh	w2, [x0, 270]
 	mov	x0, x26
 	lsl	w2, w2, 9
 	bl	ftl_memcpy
-.L718:
+.L719:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w1, [x29, 124]
 	ldr	x3, [x20, 16]
@@ -5020,13 +5030,13 @@ FlashProgPages:
 	ldr	x5, [x0, 3384]
 	ldrb	w0, [x29, 120]
 	blr	x5
-	cbnz	w0, .L719
+	cbnz	w0, .L720
 	str	wzr, [x20]
-.L720:
+.L721:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 14]
 	cmp	w1, 4
-	bne	.L713
+	bne	.L714
 	ldr	x5, [x0, 3384]
 	add	x2, x26, 2048
 	ldrb	w0, [x29, 120]
@@ -5035,18 +5045,18 @@ FlashProgPages:
 	add	w1, w25, w1
 	add	x3, x3, 8
 	blr	x5
-	cbnz	w0, .L747
-.L713:
+	cbnz	w0, .L748
+.L714:
 	add	x20, x20, 32
-	b	.L709
-.L731:
+	b	.L710
+.L732:
 	mov	x26, x1
-	b	.L718
-.L719:
+	b	.L719
+.L720:
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L720
-.L729:
+	b	.L721
+.L730:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29, 108]
 	ldr	x1, [x0, 3504]
@@ -5063,55 +5073,55 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w24, [x29, 128]
 	cmn	w24, #1
-	bne	.L725
+	bne	.L726
 	ldr	w1, [x19, 4]
 	mov	x0, x20
 	bl	sftl_printk
 	str	w24, [x19]
-.L725:
+.L726:
 	ldr	w24, [x29, 128]
 	cmp	w24, 256
-	bne	.L726
+	bne	.L727
 	ldr	w1, [x19, 4]
 	mov	x0, x23
 	bl	sftl_printk
 	str	w24, [x19]
-.L726:
+.L727:
 	ldr	x0, [x19, 16]
-	cbz	x0, .L727
+	cbz	x0, .L728
 	ldr	w2, [x0]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3520]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L727
+	beq	.L728
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC97
 	add	x0, x0, :lo12:.LC97
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L727:
+.L728:
 	ldr	x0, [x19, 8]
-	cbz	x0, .L728
+	cbz	x0, .L729
 	ldr	w2, [x0]
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3504]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L728
+	beq	.L729
 	ldr	w1, [x19, 4]
 	adrp	x0, .LC98
 	add	x0, x0, :lo12:.LC98
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x19]
-.L728:
+.L729:
 	add	x19, x19, 32
-.L745:
+.L746:
 	cmp	x19, x22
-	bne	.L729
-	b	.L717
+	bne	.L730
+	b	.L718
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
 	.global	FtlLowFormatEraseBlock
@@ -5134,11 +5144,11 @@ FtlLowFormatEraseBlock:
 	mov	w20, 0
 	mov	w19, 0
 	str	w23, [x5, 3436]
-.L749:
+.L750:
 	ldrh	w0, [x5, 244]
 	cmp	w0, w10
-	bhi	.L753
-	cbz	w20, .L748
+	bhi	.L754
+	cbz	w20, .L749
 	ldr	x0, [x5, 3416]
 	mov	w2, w20
 	mov	w1, 0
@@ -5146,38 +5156,38 @@ FtlLowFormatEraseBlock:
 	mov	x24, 0
 	add	x25, x21, :lo12:.LANCHOR0
 	bl	FlashEraseBlocks
-.L757:
+.L758:
 	ldr	x0, [x25, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
 	cmn	w0, #1
-	bne	.L756
+	bne	.L757
 	ldr	w0, [x1, 4]
 	add	w19, w19, 1
 	and	w19, w19, 65535
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
-.L756:
+.L757:
 	add	x24, x24, 32
 	cmp	x24, x20
-	bne	.L757
-	cbz	w22, .L770
+	bne	.L758
+	cbz	w22, .L771
 	add	x0, x21, :lo12:.LANCHOR0
 	mov	w25, 1
 	ldrh	w26, [x0, 316]
-.L758:
+.L759:
 	add	x28, x21, :lo12:.LANCHOR0
 	mov	w24, 0
 	add	x0, x28, 272
 	str	x0, [x29, 104]
-.L766:
+.L767:
 	mov	w5, 0
 	mov	w20, 0
-.L759:
+.L760:
 	ldrh	w0, [x28, 244]
 	cmp	w0, w5
-	bhi	.L762
-	cbz	w20, .L748
+	bhi	.L763
+	cbz	w20, .L749
 	ldr	x0, [x28, 3416]
 	mov	w1, w20
 	mov	w3, 1
@@ -5185,11 +5195,11 @@ FtlLowFormatEraseBlock:
 	mov	x27, 0
 	bl	FlashProgPages
 	ubfiz	x1, x20, 5, 16
-.L765:
+.L766:
 	ldr	x0, [x28, 3416]
 	add	x3, x0, x27
 	ldr	w0, [x0, x27]
-	cbz	w0, .L764
+	cbz	w0, .L765
 	ldr	w0, [x3, 4]
 	add	w19, w19, 1
 	str	x1, [x29, 96]
@@ -5197,38 +5207,38 @@ FtlLowFormatEraseBlock:
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29, 96]
-.L764:
+.L765:
 	add	x27, x27, 32
 	cmp	x1, x27
-	bne	.L765
+	bne	.L766
 	add	w24, w24, 1
 	cmp	w26, w24, uxth
-	bhi	.L766
+	bhi	.L767
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	x24, 0
-.L768:
-	cbz	w22, .L767
+.L769:
+	cbz	w22, .L768
 	ldr	x0, [x26, 3416]
 	add	x1, x0, x24
 	ldr	w0, [x0, x24]
-	cbnz	w0, .L767
+	cbnz	w0, .L768
 	ldr	w0, [x1, 4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L767:
+.L768:
 	add	x24, x24, 32
 	cmp	x24, x27
-	bne	.L768
+	bne	.L769
 	cmp	w23, 63
 	ccmp	w22, 0, 0, hi
-	beq	.L748
+	beq	.L749
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, w20
 	mov	w1, w25
 	ldr	x0, [x21, 3416]
 	bl	FlashEraseBlocks
-.L748:
+.L749:
 	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5237,7 +5247,7 @@ FtlLowFormatEraseBlock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L753:
+.L754:
 	ldr	x1, [x5, 3416]
 	ubfiz	x0, x10, 5, 16
 	str	wzr, [x1, x0]
@@ -5246,13 +5256,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L750
+	cbz	w22, .L751
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L751
-.L750:
+	cbnz	w0, .L752
+.L751:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L752
+	cbnz	w0, .L753
 	ldr	x0, [x5, 3416]
 	ubfiz	x2, x20, 5, 16
 	lsl	w6, w6, 10
@@ -5270,19 +5280,19 @@ FtlLowFormatEraseBlock:
 	sdiv	w0, w0, w9
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L751:
+.L752:
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L749
-.L752:
+	b	.L750
+.L753:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L751
-.L770:
+	b	.L752
+.L771:
 	mov	w25, 0
 	mov	w26, 2
-	b	.L758
-.L762:
+	b	.L759
+.L763:
 	ldr	x1, [x28, 3416]
 	ubfiz	x0, x5, 5, 16
 	str	wzr, [x1, x0]
@@ -5292,13 +5302,13 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	and	w6, w0, 65535
 	mov	w7, w6
-	cbz	w22, .L760
+	cbz	w22, .L761
 	bl	IsBlkInVendorPart
-	cbnz	w0, .L761
-.L760:
+	cbnz	w0, .L762
+.L761:
 	mov	w0, w7
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L761
+	cbnz	w0, .L762
 	ldr	x0, [x28, 3416]
 	ubfiz	x2, x20, 5, 16
 	add	w6, w24, w6, lsl 10
@@ -5317,10 +5327,10 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x28, 3496]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L761:
+.L762:
 	add	w5, w5, 1
 	and	w5, w5, 65535
-	b	.L759
+	b	.L760
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
 	.global	FlashTestBlk
@@ -5331,7 +5341,7 @@ FlashTestBlk:
 	stp	x19, x20, [sp, 16]
 	and	w19, w0, 65535
 	cmp	w19, 11
-	bls	.L794
+	bls	.L795
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w2, 32
@@ -5357,7 +5367,7 @@ FlashTestBlk:
 	mov	w1, w3
 	bl	FlashProgPages
 	ldr	w0, [x29, 32]
-	cbnz	w0, .L795
+	cbnz	w0, .L796
 	add	w0, w19, 1
 	mov	w3, 1
 	str	w0, [x29, 36]
@@ -5368,23 +5378,23 @@ FlashTestBlk:
 	ldr	w0, [x29, 32]
 	cmp	w0, 0
 	csetm	w20, ne
-.L793:
+.L794:
 	mov	w2, 1
 	mov	w1, 0
 	add	x0, x29, 32
 	str	w19, [x29, 36]
 	bl	FlashEraseBlocks
-.L791:
+.L792:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 128
 	ret
-.L795:
+.L796:
 	mov	w20, -1
-	b	.L793
-.L794:
+	b	.L794
+.L795:
 	mov	w20, 0
-	b	.L791
+	b	.L792
 	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
 	.global	FtlBbmTblFlush
@@ -5407,11 +5417,11 @@ FtlBbmTblFlush:
 	ldrh	w2, [x20, 322]
 	str	x0, [x20, 3736]
 	bl	ftl_memset
-.L798:
+.L799:
 	ldrh	w0, [x20, 266]
 	add	x1, x20, 3728
 	cmp	w19, w0
-	blt	.L799
+	blt	.L800
 	ldr	x26, [x1, 16]
 	add	x19, x20, 368
 	mov	w2, 16
@@ -5438,7 +5448,7 @@ FtlBbmTblFlush:
 	strh	w0, [x26, 12]
 	ldr	w0, [x20, 2684]
 	strh	w0, [x26, 14]
-.L800:
+.L801:
 	ldr	x0, [x25, 3464]
 	str	x0, [x25, 3736]
 	ldr	x0, [x25, 3528]
@@ -5456,7 +5466,7 @@ FtlBbmTblFlush:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L801
+	blt	.L802
 	ldr	w0, [x19, 8]
 	mov	w2, 1
 	ldrh	w1, [x19]
@@ -5475,7 +5485,7 @@ FtlBbmTblFlush:
 	mov	w1, w2
 	ldr	x0, [x25, 3416]
 	bl	FlashEraseBlocks
-.L801:
+.L802:
 	add	x20, x25, 3728
 	mov	w3, 1
 	mov	x0, x20
@@ -5487,22 +5497,22 @@ FtlBbmTblFlush:
 	strh	w0, [x19, 2]
 	ldr	w0, [x25, 3728]
 	cmn	w0, #1
-	bne	.L802
+	bne	.L803
 	ldr	w1, [x25, 3732]
 	add	w21, w21, 1
 	add	x0, x24, :lo12:.LC100
 	and	w21, w21, 65535
 	bl	sftl_printk
 	cmp	w21, 3
-	bls	.L800
+	bls	.L801
 	ldr	w1, [x25, 3732]
 	adrp	x0, .LC101
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC101
 	bl	sftl_printk
-.L804:
-	b	.L804
-.L799:
+.L805:
+	b	.L805
+.L800:
 	ldrh	w2, [x20, 3640]
 	ldr	x0, [x1, 8]
 	ldr	x1, [x21], 8
@@ -5511,16 +5521,16 @@ FtlBbmTblFlush:
 	add	w19, w19, 1
 	add	x0, x0, x3, sxtw 2
 	bl	ftl_memcpy
-	b	.L798
-.L805:
+	b	.L799
+.L806:
 	mov	w22, 1
-	b	.L800
-.L802:
+	b	.L801
+.L803:
 	add	w22, w22, 1
 	cmp	w22, 1
-	ble	.L805
+	ble	.L806
 	cmp	w0, 256
-	beq	.L800
+	beq	.L801
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -5545,13 +5555,13 @@ allocate_data_superblock:
 	add	x23, x22, 136
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-.L811:
+.L812:
 	ldrh	w1, [x22, 2592]
 	ldrh	w0, [x22, 236]
 	add	w0, w0, w1
 	ldrh	w1, [x22, 252]
 	cmp	w0, w1
-	ble	.L812
+	ble	.L813
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5559,9 +5569,9 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L812:
+.L813:
 	cmp	x20, x23
-	bne	.L838
+	bne	.L839
 	ldrh	w0, [x19, 236]
 	ldr	w1, [x19, 3244]
 	mul	w1, w0, w1
@@ -5569,15 +5579,15 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	add	w1, w0, w1, lsr 2
 	ands	w1, w1, 65535
-	beq	.L813
+	beq	.L814
 	sub	w1, w1, #1
 	and	w1, w1, 65535
-.L813:
+.L814:
 	add	x0, x19, 2600
 	bl	List_pop_index_node
 	and	w25, w0, 65535
 	ldrh	w0, [x19, 236]
-	cbnz	w0, .L814
+	cbnz	w0, .L815
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5585,22 +5595,22 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L814:
+.L815:
 	ldrh	w0, [x19, 236]
 	sub	w0, w0, #1
 	strh	w0, [x19, 236]
 	ldrh	w0, [x19, 252]
 	cmp	w0, w25
-	bls	.L811
+	bls	.L812
 	ldr	x0, [x19, 80]
 	ubfiz	x26, x25, 1, 16
 	ldrh	w24, [x0, x26]
-	cbnz	w24, .L811
+	cbnz	w24, .L812
 	strh	w25, [x20]
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L816
+	cbnz	w0, .L817
 	ldr	x0, [x19, 80]
 	mov	w1, -1
 	strh	w1, [x0, x26]
@@ -5611,7 +5621,7 @@ allocate_data_superblock:
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L811
+	ble	.L812
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2679
@@ -5619,17 +5629,17 @@ allocate_data_superblock:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L811
-.L838:
+	b	.L812
+.L839:
 	mov	w1, 0
-	b	.L813
-.L816:
+	b	.L814
+.L817:
 	ldrh	w1, [x19, 2592]
 	ldrh	w0, [x19, 236]
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L818
+	ble	.L819
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5637,16 +5647,16 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L818:
+.L819:
 	add	x27, x20, 16
 	ldrh	w4, [x19, 244]
 	mov	x3, x27
 	mov	x0, 0
 	mov	w5, 65535
-.L819:
+.L820:
 	cmp	w4, w0, uxth
-	bhi	.L821
-	cbnz	w24, .L822
+	bhi	.L822
+	cbnz	w24, .L823
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5654,10 +5664,10 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L822:
+.L823:
 	ldrh	w0, [x19, 184]
 	cmp	w0, w25
-	bne	.L823
+	bne	.L824
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5665,15 +5675,15 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L823:
+.L824:
 	ldrb	w0, [x20, 8]
 	ldr	x1, [x19, 2608]
-	cbnz	w0, .L824
+	cbnz	w0, .L825
 	ldrh	w0, [x1, x26]
-	cbz	w0, .L825
+	cbz	w0, .L826
 	ldrh	w2, [x19, 304]
 	add	w0, w0, w2
-.L846:
+.L847:
 	strh	w0, [x1, x26]
 	mov	w1, 0
 	ldr	w0, [x19, 2676]
@@ -5681,14 +5691,14 @@ allocate_data_superblock:
 	str	w0, [x19, 2676]
 	mov	w0, w25
 	bl	ftl_set_blk_mode
-.L827:
+.L828:
 	ldr	x0, [x19, 2608]
 	ldr	w1, [x19, 2692]
 	ldrh	w0, [x0, x26]
 	cmp	w0, w1
-	bls	.L828
+	bls	.L829
 	str	w0, [x19, 2692]
-.L828:
+.L829:
 	ldr	w1, [x19, 2680]
 	ubfiz	x3, x24, 5, 16
 	ldrh	w0, [x19, 304]
@@ -5702,51 +5712,51 @@ allocate_data_superblock:
 	add	w0, w0, 1
 	str	w0, [x1, 16]
 	mov	x0, 0
-.L829:
+.L830:
 	cmp	x3, x0
-	bne	.L830
+	bne	.L831
 	ldrb	w1, [x20, 8]
 	mov	w2, w24
 	ldr	x0, [x19, 3416]
 	mov	x28, 0
 	bl	FlashEraseBlocks
 	mov	w1, 0
-.L831:
+.L832:
 	cmp	w24, w28, uxth
-	bhi	.L833
+	bhi	.L834
 	cmp	w1, 0
-	ble	.L834
+	ble	.L835
 	mov	w0, w25
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L834:
+.L835:
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L835
+	cbnz	w0, .L836
 	ldr	x0, [x19, 80]
 	mov	w1, -1
 	strh	w1, [x0, x26]
-	b	.L811
-.L821:
+	b	.L812
+.L822:
 	ldr	x1, [x19, 3416]
 	add	x2, x1, x0, lsl 5
 	stp	xzr, xzr, [x2, 8]
 	ldrh	w2, [x3]
 	cmp	w2, w5
-	beq	.L820
+	beq	.L821
 	ubfiz	x6, x24, 5, 16
 	add	w24, w24, 1
 	add	x1, x1, x6
 	and	w24, w24, 65535
 	lsl	w2, w2, 10
 	str	w2, [x1, 4]
-.L820:
+.L821:
 	add	x0, x0, 1
 	add	x3, x3, 2
-	b	.L819
-.L825:
+	b	.L820
+.L826:
 	mov	w0, 2
-	b	.L846
-.L824:
+	b	.L847
+.L825:
 	ldrh	w0, [x1, x26]
 	add	w0, w0, 1
 	strh	w0, [x1, x26]
@@ -5755,22 +5765,22 @@ allocate_data_superblock:
 	str	w0, [x19, 2680]
 	mov	w0, w25
 	bl	ftl_set_blk_mode.part.7
-	b	.L827
-.L830:
+	b	.L828
+.L831:
 	ldr	x1, [x19, 3416]
 	add	x1, x1, x0
 	add	x0, x0, 32
 	ldr	w2, [x1, 4]
 	and	w2, w2, -1024
 	str	w2, [x1, 4]
-	b	.L829
-.L833:
+	b	.L830
+.L834:
 	ldr	x2, [x19, 3416]
 	lsl	x0, x28, 5
 	add	x3, x2, x0
 	ldr	w2, [x2, x0]
 	cmn	w2, #1
-	bne	.L832
+	bne	.L833
 	add	w1, w1, 1
 	ldr	w0, [x3, 4]
 	stp	w2, w1, [x29, 104]
@@ -5781,11 +5791,11 @@ allocate_data_superblock:
 	ldrb	w0, [x20, 7]
 	sub	w0, w0, #1
 	strb	w0, [x20, 7]
-.L832:
+.L833:
 	add	x28, x28, 1
 	add	x27, x27, 2
-	b	.L831
-.L835:
+	b	.L832
+.L836:
 	add	x21, x21, :lo12:.LANCHOR0
 	strh	wzr, [x20, 2]
 	strb	wzr, [x20, 6]
@@ -5802,10 +5812,10 @@ allocate_data_superblock:
 	ldrh	w2, [x20]
 	strh	w0, [x1, x2, lsl 1]
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L836
+	cbz	w0, .L837
 	ldrb	w0, [x20, 7]
-	cbnz	w0, .L837
-.L836:
+	cbnz	w0, .L838
+.L837:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5813,7 +5823,7 @@ allocate_data_superblock:
 	add	x1, x1, 336
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L837:
+.L838:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5838,16 +5848,16 @@ FtlGcFreeBadSuperBlk:
 	stp	x25, x26, [sp, 64]
 	ldrh	w0, [x19, 3320]
 	str	x27, [sp, 80]
-	cbz	w0, .L848
+	cbz	w0, .L849
 	add	x23, x19, 272
 	add	x24, x19, 3328
 	mov	w21, 0
-.L849:
+.L850:
 	ldrh	w0, [x19, 244]
 	cmp	w0, w21
-	bhi	.L855
+	bhi	.L856
 	bl	FtlGcReFreshBadBlk
-.L848:
+.L849:
 	mov	w0, 0
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -5856,7 +5866,7 @@ FtlGcFreeBadSuperBlk:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L855:
+.L856:
 	ldrb	w0, [x23, w21, sxtw]
 	mov	w1, w22
 	adrp	x26, .LC102
@@ -5864,18 +5874,18 @@ FtlGcFreeBadSuperBlk:
 	mov	w20, 0
 	bl	V2P_block
 	and	w25, w0, 65535
-.L850:
+.L851:
 	ldrh	w0, [x19, 3320]
 	cmp	w0, w20
-	bhi	.L854
+	bhi	.L855
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	b	.L849
-.L854:
+	b	.L850
+.L855:
 	ldrh	w0, [x24, w20, sxtw 1]
 	add	w27, w20, 1
 	cmp	w0, w25
-	bne	.L851
+	bne	.L852
 	mov	w1, w25
 	mov	x0, x26
 	bl	sftl_printk
@@ -5884,22 +5894,22 @@ FtlGcFreeBadSuperBlk:
 	bl	FtlBbmTblFlush
 	ldrh	w0, [x19, 3320]
 	mov	w1, w27
-.L852:
+.L853:
 	cmp	w20, w0
-	bcc	.L853
+	bcc	.L854
 	sub	w0, w0, #1
 	strh	w0, [x19, 3320]
-.L851:
+.L852:
 	and	w20, w27, 65535
-	b	.L850
-.L853:
+	b	.L851
+.L854:
 	sub	w2, w1, #1
 	ldrh	w3, [x24, w1, sxtw 1]
 	add	w20, w20, 1
 	add	w1, w1, 1
 	and	w20, w20, 65535
 	strh	w3, [x24, w2, sxtw 1]
-	b	.L852
+	b	.L853
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -5915,33 +5925,33 @@ update_vpc_list:
 	ubfiz	x1, x20, 1, 16
 	ldr	x2, [x0, 80]
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L861
+	cbnz	w1, .L862
 	ldrh	w1, [x0, 234]
 	cmp	w1, w20
-	bne	.L862
+	bne	.L863
 	mov	w1, -1
 	strh	w1, [x0, 234]
-.L862:
+.L863:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 232]
 	cmp	w1, w20
-	bne	.L863
+	bne	.L864
 	mov	w1, -1
 	strh	w1, [x0, 232]
-.L863:
+.L864:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	cmp	w1, w20
-	bne	.L864
+	bne	.L865
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L865:
+.L866:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w1, w20
 	add	x0, x21, 2576
 	bl	List_remove_node
 	ldrh	w0, [x21, 2592]
-	cbnz	w0, .L867
+	cbnz	w0, .L868
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5949,7 +5959,7 @@ update_vpc_list:
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L867:
+.L868:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2592]
 	sub	w0, w0, #1
@@ -5963,7 +5973,7 @@ update_vpc_list:
 	add	w0, w0, w1
 	ldrh	w1, [x19, 252]
 	cmp	w0, w1
-	ble	.L871
+	ble	.L872
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -5971,30 +5981,30 @@ update_vpc_list:
 	add	x1, x1, 368
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L871:
+.L872:
 	mov	w0, 1
-	b	.L860
-.L864:
+	b	.L861
+.L865:
 	ldrh	w1, [x0, 32]
 	cmp	w1, w20
-	beq	.L870
+	beq	.L871
 	ldrh	w1, [x0, 88]
 	cmp	w1, w20
-	beq	.L870
+	beq	.L871
 	ldrh	w0, [x0, 136]
 	cmp	w0, w20
-	bne	.L865
-.L870:
+	bne	.L866
+.L871:
 	mov	w0, 0
-.L860:
+.L861:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L861:
+.L862:
 	mov	w0, w20
 	bl	List_update_data_list
-	b	.L870
+	b	.L871
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
 	.global	decrement_vpc_count
@@ -6008,12 +6018,12 @@ decrement_vpc_count:
 	mov	w0, 65535
 	adrp	x19, .LANCHOR0
 	cmp	w20, w0
-	beq	.L874
+	beq	.L875
 	add	x22, x19, :lo12:.LANCHOR0
 	ubfiz	x21, x20, 1, 16
 	ldr	x1, [x22, 80]
 	ldrh	w0, [x1, x21]
-	cbnz	w0, .L875
+	cbnz	w0, .L876
 	mov	w2, 0
 	mov	w1, w20
 	adrp	x0, .LC103
@@ -6021,16 +6031,16 @@ decrement_vpc_count:
 	bl	sftl_printk
 	ldr	x0, [x22, 80]
 	ldrh	w0, [x0, x21]
-	cbz	w0, .L876
-.L881:
+	cbz	w0, .L877
+.L882:
 	mov	w21, 0
-.L873:
+.L874:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L876:
+.L877:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2842
@@ -6038,21 +6048,21 @@ decrement_vpc_count:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L881
-.L875:
+	b	.L882
+.L876:
 	sub	w0, w0, #1
 	strh	w0, [x1, x21]
-.L874:
+.L875:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x19, 3714]
 	cmp	w0, w1
-	bne	.L878
+	bne	.L879
 	strh	w20, [x19, 3714]
-	b	.L881
-.L878:
+	b	.L882
+.L879:
 	cmp	w20, w0
-	beq	.L881
+	beq	.L882
 	bl	update_vpc_list
 	cmp	w0, 0
 	ldr	x1, [x19, 2568]
@@ -6067,9 +6077,9 @@ decrement_vpc_count:
 	ldr	x1, [x19, 80]
 	and	x2, x0, 65535
 	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L873
+	cbnz	w1, .L874
 	cmp	w20, w0, uxth
-	beq	.L873
+	beq	.L874
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 2858
@@ -6077,7 +6087,7 @@ decrement_vpc_count:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L873
+	b	.L874
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
 	.global	FtlSuperblockPowerLostFix
@@ -6114,10 +6124,10 @@ FtlSuperblockPowerLostFix:
 	ldrh	w22, [x19, 4]
 	and	w22, w22, 1
 	add	w22, w22, 6
-.L888:
+.L889:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L884
-.L885:
+	cbnz	w0, .L885
+.L886:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w0, [x19]
 	ldrh	w3, [x19, 4]
@@ -6135,12 +6145,12 @@ FtlSuperblockPowerLostFix:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 96
 	ret
-.L884:
+.L885:
 	mov	x0, x19
 	bl	get_new_active_ppa
 	str	w0, [x29, 68]
 	cmn	w0, #1
-	beq	.L885
+	beq	.L886
 	ldr	w0, [x20, 2672]
 	mov	w3, 0
 	str	w0, [x23, 4]
@@ -6155,8 +6165,8 @@ FtlSuperblockPowerLostFix:
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	subs	w22, w22, #1
-	bne	.L888
-	b	.L885
+	bne	.L889
+	b	.L886
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlMakeBbt
@@ -6180,47 +6190,47 @@ FtlMakeBbt:
 	add	x25, x0, 380
 	mov	x19, x0
 	add	x20, x0, 3728
-.L897:
+.L898:
 	ldrh	w0, [x19, 266]
 	cmp	w24, w0
-	bcc	.L903
+	bcc	.L904
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w19, 0
-.L904:
+.L905:
 	ldrh	w0, [x20, 326]
 	cmp	w0, w19
-	bhi	.L905
+	bhi	.L906
 	add	x20, x20, 368
 	ldrh	w19, [x20, 12]
 	mov	w22, 65535
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-.L906:
+.L907:
 	ldrh	w0, [x20, 12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L910
+	ble	.L911
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L907
+	beq	.L908
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L908
+	cbz	w0, .L909
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-.L907:
+.L908:
 	sub	w19, w19, #1
 	and	w19, w19, 65535
-	b	.L906
-.L903:
+	b	.L907
+.L904:
 	ldr	x0, [x19, 3464]
 	mov	w2, 65535
 	ldr	x27, [x19, 3528]
 	ldrh	w1, [x25]
 	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	beq	.L898
+	beq	.L899
 	ldrh	w23, [x19, 310]
 	mov	w2, 1
 	madd	w23, w23, w24, w1
@@ -6235,29 +6245,29 @@ FtlMakeBbt:
 	add	w2, w2, 7
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-.L899:
+.L900:
 	mov	w0, w23
 	add	w24, w24, 1
 	bl	FtlBbmMapBadBlock
 	add	x26, x26, 8
 	add	x25, x25, 2
-	b	.L897
-.L898:
+	b	.L898
+.L899:
 	mov	w1, w24
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20, 8]
 	ldr	x1, [x26]
 	bl	FtlBbt2Bitmap
 	ldrh	w22, [x19, 310]
-.L901:
+.L902:
 	sub	w22, w22, #1
 	and	w22, w22, 65535
-.L900:
+.L901:
 	ldrh	w0, [x19, 310]
 	madd	w0, w24, w0, w22
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L901
+	beq	.L902
 	ldr	x0, [x19, 3528]
 	mov	w2, 16
 	strh	w22, [x25]
@@ -6292,25 +6302,25 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L899
+	bne	.L900
 	mov	w0, w23
 	bl	FtlBbmMapBadBlock
-	b	.L900
-.L905:
+	b	.L901
+.L906:
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	and	w19, w19, 65535
-	b	.L904
-.L908:
+	b	.L905
+.L909:
 	ldrh	w0, [x20]
 	cmp	w0, w22
-	bne	.L909
+	bne	.L910
 	strh	w19, [x20]
-	b	.L907
-.L909:
-	strh	w19, [x20, 4]
+	b	.L908
 .L910:
+	strh	w19, [x20, 4]
+.L911:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w2, 2
 	ldr	x1, [x21, 3416]
@@ -6367,18 +6377,18 @@ js_hash:
 	mov	w0, 42982
 	mov	x3, 0
 	movk	w0, 0x47c6, lsl 16
-.L919:
+.L920:
 	cmp	w1, w3
-	bhi	.L920
+	bhi	.L921
 	ret
-.L920:
+.L921:
 	lsr	w2, w0, 2
 	ldrb	w5, [x4, x3]
 	add	w2, w2, w0, lsl 5
 	add	x3, x3, 1
 	add	w2, w2, w5
 	eor	w0, w0, w2
-	b	.L919
+	b	.L920
 	.size	js_hash, .-js_hash
 	.align	2
 	.global	Ftl_write_map_blk_to_last_page
@@ -6394,9 +6404,9 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x20, [x0, 16]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	bne	.L922
+	bne	.L923
 	ldrh	w0, [x19, 8]
-	cbz	w0, .L923
+	cbz	w0, .L924
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6404,7 +6414,7 @@ Ftl_write_map_blk_to_last_page:
 	add	x1, x1, 408
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L923:
+.L924:
 	ldrh	w0, [x19, 8]
 	add	w0, w0, 1
 	strh	w0, [x19, 8]
@@ -6415,14 +6425,14 @@ Ftl_write_map_blk_to_last_page:
 	strh	wzr, [x19]
 	add	w0, w0, 1
 	str	w0, [x19, 48]
-.L924:
+.L925:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L922:
+.L923:
 	ubfiz	x0, x0, 1, 16
 	adrp	x21, .LANCHOR0
 	ldrh	w1, [x19, 2]
@@ -6449,10 +6459,10 @@ Ftl_write_map_blk_to_last_page:
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w0, 0
-.L925:
+.L926:
 	ldrh	w2, [x19, 6]
 	cmp	w2, w0
-	bhi	.L927
+	bhi	.L928
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x6, x21, 3728
 	ldrh	w1, [x21, 322]
@@ -6469,12 +6479,12 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19, 2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-	b	.L924
-.L927:
+	b	.L925
+.L928:
 	ubfiz	x2, x0, 2, 16
 	ldr	w3, [x24, x2]
 	cmp	w23, w3, lsr 10
-	bne	.L926
+	bne	.L927
 	add	w1, w1, 1
 	ldr	x4, [x20, 3464]
 	and	w1, w1, 65535
@@ -6484,10 +6494,10 @@ Ftl_write_map_blk_to_last_page:
 	ldr	x2, [x20, 3464]
 	add	x2, x2, x3
 	str	w4, [x2, 4]
-.L926:
+.L927:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L925
+	b	.L926
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
 	.global	FtlMapWritePage
@@ -6510,7 +6520,7 @@ FtlMapWritePage:
 	mov	x25, x24
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x20, x22, 3728
-.L933:
+.L934:
 	add	x0, x24, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2652]
 	add	w1, w1, 1
@@ -6519,35 +6529,35 @@ FtlMapWritePage:
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	bge	.L934
+	bge	.L935
 	ldrh	w1, [x19]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L935
-.L934:
+	bne	.L936
+.L935:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L935:
+.L936:
 	ldrh	w1, [x19]
 	ldr	x0, [x19, 16]
 	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L936
+	cbnz	w0, .L937
 	adrp	x0, .LC8
 	mov	w2, 700
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L936:
+.L937:
 	ldrh	w1, [x19]
 	ldrh	w0, [x19, 10]
 	cmp	w1, w0
-	bcc	.L937
+	bcc	.L938
 	adrp	x0, .LC8
 	mov	w2, 701
 	add	x1, x23, 440
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L937:
+.L938:
 	ldrh	w1, [x19]
 	mov	w2, 16
 	ldr	x0, [x19, 16]
@@ -6582,7 +6592,7 @@ FtlMapWritePage:
 	strh	w0, [x19, 2]
 	ldr	w1, [x20]
 	cmn	w1, #1
-	bne	.L938
+	bne	.L939
 	ldr	w1, [x20, 4]
 	adrp	x0, .LC104
 	add	x0, x0, :lo12:.LC104
@@ -6591,37 +6601,37 @@ FtlMapWritePage:
 	bl	sftl_printk
 	ldrh	w0, [x19, 2]
 	cmp	w0, 2
-	bhi	.L939
+	bhi	.L940
 	ldrh	w0, [x22, 316]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2]
-.L939:
+.L940:
 	cmp	w21, 3
-	bls	.L940
+	bls	.L941
 	add	x25, x25, :lo12:.LANCHOR0
 	adrp	x0, .LC105
 	mov	w2, w21
 	add	x0, x0, :lo12:.LC105
 	ldr	w1, [x25, 3732]
 	bl	sftl_printk
+.L942:
+	b	.L942
 .L941:
-	b	.L941
-.L940:
 	ldr	w0, [x19, 52]
-	cbz	w0, .L933
-.L955:
-	b	.L955
-.L938:
+	cbz	w0, .L934
+.L956:
+	b	.L956
+.L939:
 	cmp	w0, 1
-	beq	.L944
+	beq	.L945
 	cmp	w1, 256
-	beq	.L944
+	beq	.L945
 	ldr	w0, [x19, 56]
-	cbz	w0, .L945
-.L944:
-	str	wzr, [x19, 56]
-	b	.L933
+	cbz	w0, .L946
 .L945:
+	str	wzr, [x19, 56]
+	b	.L934
+.L946:
 	ldr	x0, [x19, 40]
 	ldr	w1, [x20, 4]
 	str	w1, [x0, w26, uxtw 2]
@@ -6650,7 +6660,7 @@ load_l2p_region:
 	str	x25, [sp, 64]
 	ldrh	w0, [x0, 348]
 	cmp	w0, w22
-	bcs	.L958
+	bcs	.L959
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6658,12 +6668,12 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L958:
+.L959:
 	add	x20, x21, :lo12:.LANCHOR0
 	ubfiz	x0, x22, 2, 16
 	ldr	x1, [x20, 3616]
 	ldr	w24, [x1, x0]
-	cbnz	w24, .L959
+	cbnz	w24, .L960
 	ldr	x0, [x20, 2616]
 	lsl	x19, x19, 4
 	ldrh	w2, [x20, 322]
@@ -6676,7 +6686,7 @@ load_l2p_region:
 	ldr	x0, [x20, 2616]
 	add	x19, x0, x19
 	str	wzr, [x19, 4]
-.L960:
+.L961:
 	mov	w0, 0
 	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
@@ -6684,7 +6694,7 @@ load_l2p_region:
 	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L959:
+.L960:
 	ldr	x0, [x20, 2616]
 	lsl	x19, x19, 4
 	add	x23, x20, 3728
@@ -6701,7 +6711,7 @@ load_l2p_region:
 	ldr	x25, [x20, 3744]
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L961
+	beq	.L962
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC106
@@ -6719,10 +6729,10 @@ load_l2p_region:
 	mov	w2, 4
 	add	x0, x0, :lo12:.LC107
 	bl	rknand_print_hex
-.L962:
+.L963:
 	ldrh	w0, [x25, 8]
 	cmp	w0, w22
-	beq	.L963
+	beq	.L964
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6730,18 +6740,18 @@ load_l2p_region:
 	add	x1, x1, 456
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L963:
+.L964:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldr	x0, [x21, 2616]
 	add	x0, x0, x19
 	str	wzr, [x0, 4]
 	ldr	x0, [x21, 2616]
 	strh	w22, [x0, x19]
-	b	.L960
-.L961:
+	b	.L961
+.L962:
 	ldr	w0, [x20, 3728]
 	cmp	w0, 256
-	bne	.L962
+	bne	.L963
 	mov	w2, w24
 	mov	w1, w22
 	adrp	x0, .LC108
@@ -6753,7 +6763,7 @@ load_l2p_region:
 	ldr	x2, [x0, 8]
 	add	x0, x20, 3648
 	bl	FtlMapWritePage
-	b	.L962
+	b	.L963
 	.size	load_l2p_region, .-load_l2p_region
 	.align	2
 	.global	ftl_map_blk_gc
@@ -6775,12 +6785,12 @@ ftl_map_blk_gc:
 	ldrh	w2, [x19, 8]
 	sub	w1, w1, #5
 	cmp	w2, w1
-	blt	.L966
+	blt	.L967
 	ubfiz	x0, x0, 1, 16
 	ldrh	w26, [x20, x0]
-	cbz	w26, .L966
+	cbz	w26, .L967
 	ldr	w1, [x19, 52]
-	cbnz	w1, .L966
+	cbnz	w1, .L967
 	mov	w1, 1
 	str	w1, [x19, 52]
 	strh	wzr, [x20, x0]
@@ -6791,33 +6801,33 @@ ftl_map_blk_gc:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 316]
 	cmp	w1, w0
-	bcc	.L967
+	bcc	.L968
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L967:
+.L968:
 	add	x27, x22, :lo12:.LANCHOR0
 	adrp	x23, .LANCHOR1
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x21, x27, 3728
 	add	x23, x23, 472
 	mov	w20, 0
-.L968:
+.L969:
 	ldrh	w0, [x19, 6]
 	cmp	w0, w20
-	bhi	.L975
+	bhi	.L976
 	mov	w1, 1
 	mov	w0, w26
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19, 52]
-.L966:
+.L967:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x22, 316]
 	cmp	w1, w0
-	bcc	.L976
+	bcc	.L977
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L976:
+.L977:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -6826,12 +6836,12 @@ ftl_map_blk_gc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L975:
+.L976:
 	ubfiz	x0, x20, 2, 16
 	add	x28, x25, x0
 	ldr	w1, [x25, x0]
 	cmp	w26, w1, lsr 10
-	bne	.L969
+	bne	.L970
 	ldr	x1, [x27, 3472]
 	mov	w2, 1
 	ldr	x24, [x27, 3528]
@@ -6843,36 +6853,36 @@ ftl_map_blk_gc:
 	bl	FlashReadPages
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	beq	.L970
+	beq	.L971
 	adrp	x0, .LC8
 	mov	w2, 611
 	mov	x1, x23
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L970:
+.L971:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L971
-.L973:
+	bne	.L972
+.L974:
 	str	wzr, [x28]
+.L973:
+	b	.L973
 .L972:
-	b	.L972
-.L971:
 	ldrh	w0, [x24, 8]
 	cmp	w0, w20
-	bne	.L973
+	bne	.L974
 	ldrh	w1, [x24]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L973
+	bne	.L974
 	ldr	x2, [x21, 8]
 	mov	w1, w20
 	mov	x0, x19
 	bl	FtlMapWritePage
-.L969:
+.L970:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L968
+	b	.L969
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
 	.global	flush_l2p_region
@@ -6918,7 +6928,7 @@ log2phys:
 	ldrh	w24, [x0, 320]
 	ldr	w0, [x0, 2632]
 	cmp	w25, w0
-	bcc	.L985
+	bcc	.L986
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -6926,21 +6936,21 @@ log2phys:
 	add	x1, x1, 488
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L985:
+.L986:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w25, w1
-	bcs	.L986
+	bcs	.L987
 	add	w24, w24, 7
 	ldrh	w1, [x0, 350]
 	ldr	x2, [x0, 2616]
 	mov	x0, 0
 	lsr	w21, w25, w24
 	and	w21, w21, 65535
-.L987:
+.L988:
 	and	x19, x0, 65535
 	cmp	w19, w1
-	bcc	.L992
+	bcc	.L993
 	bl	select_l2p_ram_region
 	and	x19, x0, 65535
 	add	x2, x20, :lo12:.LANCHOR0
@@ -6951,58 +6961,58 @@ log2phys:
 	ldrh	w2, [x2, x1]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L993
+	beq	.L994
 	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L993
+	tbz	w1, #31, .L994
 	bl	flush_l2p_region
-.L993:
+.L994:
 	mov	w1, w26
 	mov	w0, w21
 	bl	load_l2p_region
-	b	.L989
-.L986:
+	b	.L990
+.L987:
 	mov	w0, -1
-	cbnz	w23, .L984
+	cbnz	w23, .L985
 	str	w0, [x22]
-.L984:
+.L985:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L992:
+.L993:
 	add	x0, x0, 1
 	add	x3, x2, x0, lsl 4
 	ldrh	w3, [x3, -16]
 	cmp	w3, w21
-	bne	.L987
-.L989:
+	bne	.L988
+.L990:
 	mov	x0, 1
 	lsl	x0, x0, x24
 	sub	w0, w0, #1
 	and	w0, w0, w25
 	and	x0, x0, 65535
-	cbnz	w23, .L990
+	cbnz	w23, .L991
 	add	x1, x20, :lo12:.LANCHOR0
 	ldr	x1, [x1, 2616]
 	add	x1, x1, x19, lsl 4
 	ldr	x1, [x1, 8]
 	ldr	w0, [x1, x0, lsl 2]
 	str	w0, [x22]
-.L991:
+.L992:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldr	x0, [x20, 2616]
 	add	x19, x0, x19, lsl 4
 	ldr	w0, [x19, 4]
 	cmn	w0, #1
-	beq	.L995
+	beq	.L996
 	add	w0, w0, 1
 	str	w0, [x19, 4]
-.L995:
+.L996:
 	mov	w0, 0
-	b	.L984
-.L990:
+	b	.L985
+.L991:
 	add	x2, x20, :lo12:.LANCHOR0
 	lsl	x1, x19, 4
 	ldr	w4, [x22]
@@ -7016,7 +7026,7 @@ log2phys:
 	ldr	w1, [x0, 4]
 	orr	w1, w1, -2147483648
 	str	w1, [x0, 4]
-	b	.L991
+	b	.L992
 	.size	log2phys, .-log2phys
 	.align	2
 	.global	FtlWriteDump_data
@@ -7031,16 +7041,16 @@ FtlWriteDump_data:
 	stp	x23, x24, [sp, 48]
 	str	x25, [sp, 64]
 	ldrh	w2, [x20, 36]
-	cbz	w2, .L999
+	cbz	w2, .L1000
 	ldrb	w1, [x20, 40]
-	cbnz	w1, .L999
+	cbnz	w1, .L1000
 	ldrb	w1, [x20, 39]
 	ldrh	w3, [x20, 314]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L999
+	beq	.L1000
 	ldrb	w0, [x20, 42]
-	cbnz	w0, .L998
+	cbnz	w0, .L999
 	ldr	w22, [x20, 2632]
 	add	x1, x29, 92
 	ldrh	w24, [x20, 244]
@@ -7056,41 +7066,41 @@ FtlWriteDump_data:
 	stp	x1, x21, [x29, 104]
 	str	w22, [x29, 120]
 	str	wzr, [x21, 4]
-	beq	.L1001
+	beq	.L1002
 	mov	w2, 0
 	mov	w1, 1
 	add	x0, x29, 96
 	bl	FlashReadPages
-.L1002:
+.L1003:
 	add	x25, x19, :lo12:.LANCHOR0
 	lsl	w24, w24, 2
 	add	x20, x25, 32
 	mov	w0, -3947
 	mov	w23, 0
 	strh	w0, [x21]
-.L1003:
-	cmp	w24, w23
-	bne	.L1007
 .L1004:
+	cmp	w24, w23
+	bne	.L1008
+.L1005:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x19, 42]
-.L998:
+.L999:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1001:
+.L1002:
 	ldrh	w2, [x20, 322]
 	mov	w1, 255
 	ldr	x0, [x20, 3464]
 	bl	ftl_memset
-	b	.L1002
-.L1007:
+	b	.L1003
+.L1008:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1004
+	cbz	w0, .L1005
 	ldr	w0, [x29, 100]
 	add	w23, w23, 1
 	stp	w22, w0, [x21, 8]
@@ -7112,11 +7122,11 @@ FtlWriteDump_data:
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L1003
-.L999:
+	b	.L1004
+.L1000:
 	add	x19, x19, :lo12:.LANCHOR0
 	strb	wzr, [x19, 42]
-	b	.L998
+	b	.L999
 	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
 	.global	FtlReUsePrevPpa
@@ -7137,9 +7147,9 @@ FtlReUsePrevPpa:
 	ubfiz	x20, x0, 1, 16
 	ldr	x3, [x2, 80]
 	ldrh	w1, [x3, x20]
-	cbnz	w1, .L1017
+	cbnz	w1, .L1018
 	ldr	x19, [x2, 2600]
-	cbz	x19, .L1018
+	cbz	x19, .L1019
 	ldrh	w3, [x2, 236]
 	mov	x4, -6148914691236517206
 	ldr	x2, [x2, 2568]
@@ -7150,17 +7160,17 @@ FtlReUsePrevPpa:
 	mul	x19, x19, x4
 	mov	w4, 6
 	and	w19, w19, 65535
-.L1019:
+.L1020:
 	cmp	w1, w3
-	beq	.L1018
+	beq	.L1019
 	cmp	w19, w0
-	bne	.L1020
+	bne	.L1021
 	add	x23, x22, :lo12:.LANCHOR0
 	mov	w1, w19
 	add	x0, x23, 2600
 	bl	List_remove_node
 	ldrh	w0, [x23, 236]
-	cbnz	w0, .L1021
+	cbnz	w0, .L1022
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7168,7 +7178,7 @@ FtlReUsePrevPpa:
 	add	x1, x1, 504
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1021:
+.L1022:
 	add	x22, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 236]
 	sub	w0, w0, #1
@@ -7179,7 +7189,7 @@ FtlReUsePrevPpa:
 	ldrh	w0, [x1, x20]
 	add	w0, w0, 1
 	strh	w0, [x1, x20]
-.L1018:
+.L1019:
 	add	x1, x29, 76
 	mov	w2, 1
 	mov	w0, w21
@@ -7189,18 +7199,18 @@ FtlReUsePrevPpa:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1020:
+.L1021:
 	umull	x19, w19, w4
 	ldrh	w19, [x2, x19]
 	cmp	w19, w5
-	beq	.L1018
+	beq	.L1019
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L1019
-.L1017:
+	b	.L1020
+.L1018:
 	add	w1, w1, 1
 	strh	w1, [x3, x20]
-	b	.L1018
+	b	.L1019
 	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
 	.global	FtlRecoverySuperblock
@@ -7217,7 +7227,7 @@ FtlRecoverySuperblock:
 	stp	x27, x28, [sp, 80]
 	ldrh	w0, [x0]
 	cmp	w0, w1
-	beq	.L1148
+	beq	.L1149
 	ldrb	w0, [x20, 6]
 	adrp	x19, .LANCHOR0
 	str	w0, [x29, 140]
@@ -7225,11 +7235,11 @@ FtlRecoverySuperblock:
 	ldrh	w26, [x20, 2]
 	ldrh	w0, [x0, 314]
 	cmp	w0, w26
-	bne	.L1030
+	bne	.L1031
 	strh	wzr, [x20, 4]
-.L1155:
+.L1156:
 	strb	wzr, [x20, 6]
-.L1148:
+.L1149:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -7238,17 +7248,17 @@ FtlRecoverySuperblock:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1030:
+.L1031:
 	ldrh	w0, [x20, 16]
 	mov	w21, 0
-.L1031:
+.L1032:
 	cmp	w0, w1
-	beq	.L1032
+	beq	.L1033
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	mov	w23, w0
 	cmn	w0, #1
-	beq	.L1033
+	beq	.L1034
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x28, x20, 16
 	mov	x3, x28
@@ -7260,9 +7270,9 @@ FtlRecoverySuperblock:
 	add	x1, x1, 8
 	ldrh	w9, [x0, 324]
 	add	x1, x20, x1, lsl 1
-.L1034:
+.L1035:
 	cmp	x1, x3
-	bne	.L1038
+	bne	.L1039
 	add	x24, x19, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w1, w22
@@ -7275,42 +7285,42 @@ FtlRecoverySuperblock:
 	mov	w7, 65535
 	mov	x6, x4
 	mov	w3, 0
-.L1039:
+.L1040:
 	cmp	w22, w3
-	bne	.L1044
+	bne	.L1045
 	add	w22, w23, 1
 	ldr	w0, [x4, 4]
 	and	w22, w22, 65535
-.L1150:
+.L1151:
 	lsr	w0, w0, 10
 	bl	P2V_plane
 	and	w27, w0, 65535
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 314]
 	cmp	w0, w22
-	bne	.L1046
+	bne	.L1047
 	strh	w22, [x20, 2]
 	strb	wzr, [x20, 6]
 	strh	wzr, [x20, 4]
-.L1046:
+.L1047:
 	ldr	w0, [x29, 140]
 	cmp	w22, w26
 	ccmp	w27, w0, 0, eq
-	bne	.L1047
-.L1156:
+	bne	.L1048
+.L1157:
 	mov	w2, w27
 	mov	w1, w22
 	mov	x0, x20
 	bl	ftl_sb_update_avl_pages
-	b	.L1148
-.L1032:
+	b	.L1149
+.L1033:
 	add	w21, w21, 1
 	and	w21, w21, 65535
 	add	x0, x20, x21, sxtw 1
 	ldrh	w0, [x0, 16]
-	b	.L1031
-.L1033:
-	cbz	w26, .L1035
+	b	.L1032
+.L1034:
+	cbz	w26, .L1036
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7318,11 +7328,11 @@ FtlRecoverySuperblock:
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1035:
+.L1036:
 	ldr	w0, [x29, 140]
 	cmp	w0, 0
 	ccmp	w21, w0, 4, ne
-	beq	.L1036
+	beq	.L1037
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -7330,13 +7340,13 @@ FtlRecoverySuperblock:
 	add	x1, x1, 520
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1036:
+.L1037:
 	strh	wzr, [x20, 2]
-	b	.L1155
-.L1038:
+	b	.L1156
+.L1039:
 	ldrh	w2, [x3]
 	cmp	w2, w10
-	beq	.L1037
+	beq	.L1038
 	ldr	x5, [x0, 3440]
 	ubfiz	x7, x22, 5, 16
 	orr	w2, w23, w2, lsl 10
@@ -7356,76 +7366,76 @@ FtlRecoverySuperblock:
 	sdiv	w2, w2, w6
 	add	x2, x5, x2, sxtw 2
 	str	x2, [x4, 16]
-.L1037:
+.L1038:
 	add	x3, x3, 2
-	b	.L1034
-.L1044:
+	b	.L1035
+.L1045:
 	ldr	w0, [x6]
-	cbnz	w0, .L1040
+	cbnz	w0, .L1041
 	ldr	x8, [x6, 16]
 	ldr	w5, [x8, 4]
 	cmn	w5, #1
-	beq	.L1041
+	beq	.L1042
 	ldr	w1, [x24, 2672]
 	mov	w0, w5
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1041
+	cbz	w0, .L1042
 	add	w5, w5, 1
 	str	w5, [x24, 2672]
-.L1041:
+.L1042:
 	ldr	w0, [x8]
 	cmn	w0, #1
-	bne	.L1043
+	bne	.L1044
 	ubfiz	x3, x3, 5, 16
 	and	w22, w23, 65535
 	add	x3, x4, x3
 	ldr	w0, [x3, 4]
-	b	.L1150
-.L1040:
+	b	.L1151
+.L1041:
 	mov	w7, w9
-.L1043:
+.L1044:
 	add	w3, w3, 1
 	add	x6, x6, 32
 	and	w3, w3, 65535
-	b	.L1039
-.L1047:
+	b	.L1040
+.L1048:
 	mov	w0, 65535
 	cmp	w7, w0
-	bne	.L1048
+	bne	.L1049
 	ldrb	w0, [x20, 8]
-	cbnz	w0, .L1049
-.L1048:
+	cbnz	w0, .L1050
+.L1049:
 	add	x0, x19, :lo12:.LANCHOR0
 	and	w3, w23, 65535
 	ldr	w1, [x0, 3724]
 	cmn	w1, #1
-	bne	.L1050
+	bne	.L1051
 	str	w21, [x0, 3724]
-.L1050:
+.L1051:
 	add	w0, w26, 7
 	cmp	w0, w23, uxth
-	bge	.L1098
+	bge	.L1099
 	sub	w24, w3, #7
 	and	w24, w24, 65535
-.L1051:
+.L1052:
 	add	x25, x19, :lo12:.LANCHOR0
 	mov	w4, 65535
-.L1052:
+.L1053:
 	cmp	w24, w3
-	bhi	.L1059
+	bhi	.L1060
 	ldrh	w0, [x25, 244]
 	mov	x1, x28
 	mov	w23, 0
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-	b	.L1060
-.L1098:
+	b	.L1061
+.L1099:
 	mov	w24, w26
-	b	.L1051
-.L1054:
+	b	.L1052
+.L1055:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1053
+	beq	.L1054
 	ldr	x5, [x25, 3440]
 	ubfiz	x6, x23, 5, 16
 	add	w23, w23, 1
@@ -7433,11 +7443,11 @@ FtlRecoverySuperblock:
 	add	x5, x5, x6
 	and	w23, w23, 65535
 	str	w2, [x5, 4]
-.L1053:
+.L1054:
 	add	x1, x1, 2
-.L1060:
+.L1061:
 	cmp	x0, x1
-	bne	.L1054
+	bne	.L1055
 	ldr	x0, [x25, 3440]
 	mov	w1, w23
 	str	w4, [x29, 120]
@@ -7451,47 +7461,47 @@ FtlRecoverySuperblock:
 	ldr	w3, [x29, 128]
 	add	x0, x1, 16
 	add	x23, x1, x23
-.L1055:
+.L1056:
 	cmp	x23, x0
-	bne	.L1058
+	bne	.L1059
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L1052
-.L1058:
+	b	.L1053
+.L1059:
 	ldr	w1, [x0, -16]
-	cbnz	w1, .L1049
+	cbnz	w1, .L1050
 	ldr	x1, [x0]
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1057
+	beq	.L1058
 	ldr	w1, [x1, 4]
 	cmn	w1, #1
-	beq	.L1057
+	beq	.L1058
 	str	w1, [x25, 3724]
-.L1057:
+.L1058:
 	add	x0, x0, 32
-	b	.L1055
-.L1059:
+	b	.L1056
+.L1060:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	str	w1, [x0, 3724]
-.L1049:
+.L1050:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	mov	w24, w26
 	strh	w0, [x19, 3760]
 	add	x0, x19, 3768
 	str	x0, [x29, 104]
-.L1061:
+.L1062:
 	ldrh	w0, [x19, 244]
 	mov	x1, x28
 	mov	w23, 0
 	mov	w4, 65535
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-.L1062:
+.L1063:
 	cmp	x0, x1
-	bne	.L1064
+	bne	.L1065
 	ldr	x0, [x19, 3440]
 	mov	w1, w23
 	mov	w2, 0
@@ -7503,32 +7513,32 @@ FtlRecoverySuperblock:
 	add	x0, x0, 520
 	mov	x23, 0
 	str	x0, [x29, 120]
-.L1065:
+.L1066:
 	ldr	x0, [x29, 112]
 	cmp	x0, x23
-	bne	.L1092
+	bne	.L1093
 	add	w24, w24, 1
 	ldrh	w0, [x19, 314]
 	and	w24, w24, 65535
 	cmp	w0, w24
-	bne	.L1061
+	bne	.L1062
 	ldrh	w1, [x19, 244]
 	mov	w0, 0
 	strh	w24, [x20, 2]
 	mov	w2, 65535
 	strh	wzr, [x20, 4]
-.L1093:
+.L1094:
 	cmp	w0, w1
-	beq	.L1148
+	beq	.L1149
 	ldrh	w3, [x28], 2
 	cmp	w3, w2
-	beq	.L1094
+	beq	.L1095
 	strb	w0, [x20, 6]
-	b	.L1148
-.L1064:
+	b	.L1149
+.L1065:
 	ldrh	w2, [x1]
 	cmp	w2, w4
-	beq	.L1063
+	beq	.L1064
 	ldr	x3, [x19, 3440]
 	ubfiz	x5, x23, 5, 16
 	add	w23, w23, 1
@@ -7536,10 +7546,10 @@ FtlRecoverySuperblock:
 	add	x3, x3, x5
 	and	w23, w23, 65535
 	str	w2, [x3, 4]
-.L1063:
+.L1064:
 	add	x1, x1, 2
-	b	.L1062
-.L1092:
+	b	.L1063
+.L1093:
 	ldr	x4, [x19, 3440]
 	add	x4, x4, x23
 	ldr	w5, [x4, 4]
@@ -7548,42 +7558,42 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	and	w0, w0, 65535
 	cmp	w24, w26
-	bcc	.L1066
+	bcc	.L1067
 	ldr	w1, [x29, 140]
 	ccmp	w1, w0, 0, eq
-	bhi	.L1066
+	bhi	.L1067
 	cmp	w24, w22
 	ccmp	w27, w0, 0, eq
-	beq	.L1067
+	beq	.L1068
 	ldr	w0, [x4]
 	cmn	w0, #1
-	beq	.L1068
+	beq	.L1069
 	ldr	x3, [x4, 16]
 	mov	w0, 61589
 	ldrh	w1, [x3]
 	cmp	w1, w0
-	beq	.L1069
+	beq	.L1070
 	ldrh	w0, [x20]
-.L1152:
+.L1153:
 	bl	decrement_vpc_count
-	b	.L1066
-.L1069:
+	b	.L1067
+.L1070:
 	ldr	w21, [x3, 4]
 	cmn	w21, #1
-	beq	.L1070
+	beq	.L1071
 	ldr	w1, [x19, 2672]
 	mov	w0, w21
 	str	x3, [x29, 128]
 	bl	ftl_cmp_data_ver
 	ldr	x3, [x29, 128]
-	cbz	w0, .L1070
+	cbz	w0, .L1071
 	add	w0, w21, 1
 	str	w0, [x19, 2672]
-.L1070:
+.L1071:
 	ldrh	w1, [x3]
 	mov	w0, 61589
 	cmp	w1, w0
-	beq	.L1071
+	beq	.L1072
 	ldr	x1, [x29, 120]
 	mov	w2, 1952
 	str	x3, [x29, 128]
@@ -7591,7 +7601,7 @@ FtlRecoverySuperblock:
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	x3, [x29, 128]
-.L1071:
+.L1072:
 	ldp	w25, w0, [x3, 8]
 	add	x1, x29, 152
 	str	w0, [x29, 148]
@@ -7601,12 +7611,12 @@ FtlRecoverySuperblock:
 	ldr	w1, [x19, 3724]
 	ldr	w3, [x29, 148]
 	cmn	w1, #1
-	beq	.L1072
+	beq	.L1073
 	mov	w0, w21
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1072
+	cbz	w0, .L1073
 	cmn	w3, #1
-	beq	.L1073
+	beq	.L1074
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
@@ -7622,22 +7632,22 @@ FtlRecoverySuperblock:
 	add	x3, x0, x23
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L1074
-.L1075:
+	bne	.L1075
+.L1076:
 	mov	w0, -1
 	str	w0, [x29, 148]
-.L1082:
+.L1083:
 	ldr	w4, [x29, 148]
 	cmn	w4, #1
-	beq	.L1066
-.L1097:
+	beq	.L1067
+.L1098:
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	and	w25, w0, 65535
 	ldrh	w0, [x19, 252]
 	mov	w3, w25
 	cmp	w0, w25
-	bhi	.L1088
+	bhi	.L1089
 	ldr	x1, [x29, 120]
 	mov	w2, 2057
 	adrp	x0, .LC8
@@ -7645,49 +7655,49 @@ FtlRecoverySuperblock:
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	w3, [x29, 128]
-.L1088:
+.L1089:
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x25, 1, 16
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1089
+	cbz	w0, .L1090
 	mov	w0, w3
-	b	.L1152
-.L1073:
+	b	.L1153
+.L1074:
 	ldp	w1, w0, [x29, 152]
 	cmp	w1, w0
-	bne	.L1066
+	bne	.L1067
 	mov	w2, 1
 	add	x1, x29, 148
 	mov	w0, w25
 	bl	log2phys
-.L1066:
+.L1067:
 	add	x23, x23, 32
-	b	.L1065
-.L1074:
+	b	.L1066
+.L1075:
 	ldr	w0, [x4, 8]
 	cmp	w25, w0
-	bne	.L1075
+	bne	.L1076
 	ldr	w0, [x4, 4]
 	str	w0, [x29, 128]
 	str	x4, [x29, 96]
 	uxtw	x1, w0
 	ldr	w0, [x19, 3724]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1075
+	cbz	w0, .L1076
 	ldp	w0, w1, [x29, 152]
 	ldr	x4, [x29, 96]
 	cmp	w0, w1
 	ldr	w1, [x29, 148]
-	bne	.L1077
-.L1151:
+	bne	.L1078
+.L1152:
 	mov	w0, w25
 	bl	FtlReUsePrevPpa
-	b	.L1075
-.L1077:
+	b	.L1076
+.L1078:
 	cmp	w0, w1
-	beq	.L1075
+	beq	.L1076
 	cmn	w0, #1
-	beq	.L1078
+	beq	.L1079
 	ldr	x4, [x3, 16]
 	mov	w2, 0
 	str	w0, [x3, 4]
@@ -7697,67 +7707,67 @@ FtlRecoverySuperblock:
 	add	x0, x0, x23
 	bl	FlashReadPages
 	ldr	x4, [x29, 96]
-.L1079:
+.L1080:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3440]
 	ldr	w1, [x1, x23]
 	cmn	w1, #1
-	beq	.L1080
+	beq	.L1081
 	ldr	w3, [x4, 4]
 	ldr	w0, [x0, 3724]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1080
+	cbz	w0, .L1081
 	ldr	w0, [x29, 128]
 	mov	w1, w3
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L1075
-.L1080:
+	cbz	w0, .L1076
+.L1081:
 	ldr	w1, [x29, 148]
-	b	.L1151
-.L1078:
+	b	.L1152
+.L1079:
 	str	w0, [x3]
-	b	.L1079
-.L1072:
+	b	.L1080
+.L1073:
 	ldp	w1, w0, [x29, 152]
 	cmp	w1, w0
-	beq	.L1082
+	beq	.L1083
 	cmn	w3, #1
-	beq	.L1084
+	beq	.L1085
 	ldr	w0, [x19, 260]
 	cmp	w0, w3, lsr 10
-	bhi	.L1084
+	bhi	.L1085
 	adrp	x0, .LC109
 	mov	w1, w3
 	add	x0, x0, :lo12:.LC109
-.L1154:
+.L1155:
 	bl	sftl_printk
-	b	.L1066
-.L1084:
+	b	.L1067
+.L1085:
 	mov	w2, 1
 	add	x1, x29, 156
 	mov	w0, w25
 	bl	log2phys
 	ldr	w4, [x29, 152]
 	cmn	w4, #1
-	beq	.L1082
+	beq	.L1083
 	ldr	w0, [x29, 148]
 	cmp	w4, w0
-	beq	.L1097
+	beq	.L1098
 	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x19, 32]
 	and	w0, w0, 65535
 	cmp	w1, w0
-	beq	.L1087
+	beq	.L1088
 	ldrh	w1, [x19, 88]
 	cmp	w1, w0
-	beq	.L1087
+	beq	.L1088
 	ldrh	w1, [x19, 136]
 	cmp	w1, w0
-	bne	.L1082
-.L1087:
+	bne	.L1083
+.L1088:
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, 1
@@ -7769,51 +7779,51 @@ FtlRecoverySuperblock:
 	ldr	x0, [x19, 3440]
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L1082
+	beq	.L1083
 	ldr	x3, [x29, 128]
 	mov	w0, w21
 	ldr	w1, [x3, 4]
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1082
+	cbnz	w0, .L1083
 	mov	w2, 1
 	add	x1, x29, 152
 	mov	w0, w25
 	bl	log2phys
-	b	.L1082
-.L1089:
+	b	.L1083
+.L1090:
 	adrp	x0, .LC110
 	mov	w1, w25
 	add	x0, x0, :lo12:.LC110
-	b	.L1154
-.L1068:
+	b	.L1155
+.L1069:
 	ldr	w0, [x19, 3764]
 	cmp	w0, 31
-	bhi	.L1090
+	bhi	.L1091
 	ldr	x1, [x29, 104]
 	str	w5, [x1, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w0, [x19, 3764]
-.L1090:
+.L1091:
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
 	ldr	w0, [x19, 3724]
 	cmn	w0, #1
-	bne	.L1091
-.L1153:
+	bne	.L1092
+.L1154:
 	str	w21, [x19, 3724]
-	b	.L1066
-.L1091:
+	b	.L1067
+.L1092:
 	cmp	w21, w0
-	bcs	.L1066
-	b	.L1153
-.L1094:
+	bcs	.L1067
+	b	.L1154
+.L1095:
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L1093
-.L1067:
+	b	.L1094
+.L1068:
 	strb	w27, [x20, 6]
 	strh	w22, [x20, 2]
-	b	.L1156
+	b	.L1157
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
 	.global	ftl_check_vpc
@@ -7841,10 +7851,10 @@ ftl_check_vpc:
 	mov	w1, 0
 	mov	x0, x19
 	bl	ftl_memset
-.L1158:
+.L1159:
 	ldr	w0, [x24, 2632]
 	cmp	w23, w0
-	bcc	.L1160
+	bcc	.L1161
 	adrp	x25, .LC112
 	add	x23, x20, :lo12:.LANCHOR0
 	add	x26, x22, :lo12:check_vpc_table
@@ -7852,12 +7862,12 @@ ftl_check_vpc:
 	mov	w24, 0
 	mov	w19, 0
 	mov	w4, 65535
-.L1161:
+.L1162:
 	ldrh	w0, [x23, 252]
 	cmp	w0, w19
-	bhi	.L1163
+	bhi	.L1164
 	ldr	x19, [x23, 2600]
-	cbz	x19, .L1164
+	cbz	x19, .L1165
 	ldr	x0, [x23, 2568]
 	adrp	x25, .LC113
 	add	x20, x20, :lo12:.LANCHOR0
@@ -7872,18 +7882,18 @@ ftl_check_vpc:
 	mov	w23, 0
 	mul	x19, x19, x0
 	and	w19, w19, 65535
-.L1165:
+.L1166:
 	cmp	w23, w26
-	bne	.L1167
-.L1164:
-	cbz	w24, .L1157
+	bne	.L1168
+.L1165:
+	cbz	w24, .L1158
 	add	x1, x21, :lo12:.LANCHOR1
 	adrp	x0, .LC8
 	mov	w2, 2383
 	add	x1, x1, 544
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1157:
+.L1158:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -7891,31 +7901,31 @@ ftl_check_vpc:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1160:
+.L1161:
 	mov	w2, 0
 	add	x1, x29, 124
 	mov	w0, w23
 	bl	log2phys
 	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	beq	.L1159
+	beq	.L1160
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	and	x0, x0, 65535
 	ldrh	w1, [x19, x0, lsl 1]
 	add	w1, w1, 1
 	strh	w1, [x19, x0, lsl 1]
-.L1159:
+.L1160:
 	add	w23, w23, 1
-	b	.L1158
-.L1163:
+	b	.L1159
+.L1164:
 	ldr	x0, [x23, 80]
 	ubfiz	x28, x19, 1, 16
 	sxtw	x27, w19
 	ldrh	w2, [x0, x28]
 	ldrh	w3, [x26, x27, lsl 1]
 	cmp	w2, w3
-	beq	.L1162
+	beq	.L1163
 	mov	x0, x25
 	str	w4, [x29, 108]
 	mov	w1, w19
@@ -7924,34 +7934,34 @@ ftl_check_vpc:
 	ldr	w4, [x29, 108]
 	ldrh	w0, [x0, x28]
 	cmp	w0, w4
-	beq	.L1162
+	beq	.L1163
 	ldrh	w1, [x26, x27, lsl 1]
 	cmp	w1, w0
 	csinc	w24, w24, wzr, ls
-.L1162:
+.L1163:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1161
-.L1167:
+	b	.L1162
+.L1168:
 	ldr	x1, [x20, 80]
 	ubfiz	x0, x19, 1, 16
 	ldrh	w2, [x1, x0]
-	cbz	w2, .L1166
+	cbz	w2, .L1167
 	ldrh	w3, [x22, w19, sxtw 1]
 	mov	w24, 1
 	mov	w1, w19
 	mov	x0, x25
 	bl	sftl_printk
-.L1166:
+.L1167:
 	ldr	x0, [x20, 2568]
 	umull	x19, w19, w27
 	ldrh	w19, [x0, x19]
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L1164
+	beq	.L1165
 	add	w23, w23, 1
 	and	w23, w23, 65535
-	b	.L1165
+	b	.L1166
 	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	2
 	.global	ftl_scan_all_data
@@ -7971,33 +7981,33 @@ ftl_scan_all_data:
 	mov	w20, 0
 	add	x19, x21, 3728
 	bl	sftl_printk
-.L1183:
+.L1184:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w0, [x0, 2632]
 	cmp	w20, w0
-	bcc	.L1189
+	bcc	.L1190
 	ldp	x19, x20, [sp, 32]
 	ldp	x21, x22, [sp, 48]
 	ldp	x29, x30, [sp, 16]
 	ldr	x23, [sp, 64]
 	add	sp, sp, 96
 	ret
-.L1189:
+.L1190:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w20
 	bl	log2phys
 	tst	x20, 2047
-	bne	.L1184
+	bne	.L1185
 	ldr	w2, [x29, 76]
 	adrp	x0, .LC115
 	mov	w1, w20
 	add	x0, x0, :lo12:.LC115
 	bl	sftl_printk
-.L1184:
+.L1185:
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1186
+	beq	.L1187
 	ldr	x23, [x21, 3528]
 	mov	w2, 0
 	stp	wzr, w0, [x19]
@@ -8011,11 +8021,11 @@ ftl_scan_all_data:
 	ldr	w0, [x19]
 	cmp	w0, 256
 	ccmn	w0, #1, 4, ne
-	beq	.L1187
+	beq	.L1188
 	ldr	w0, [x23, 8]
 	cmp	w20, w0
-	beq	.L1186
-.L1187:
+	beq	.L1187
+.L1188:
 	ldp	x1, x0, [x19, 8]
 	ldr	w2, [x1, 4]
 	str	w2, [sp]
@@ -8027,9 +8037,9 @@ ftl_scan_all_data:
 	ldr	w2, [x19, 4]
 	mov	w1, w20
 	bl	sftl_printk
-.L1186:
+.L1187:
 	add	w20, w20, 1
-	b	.L1183
+	b	.L1184
 	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	2
 	.global	FtlGcScanTempBlk
@@ -8049,29 +8059,29 @@ FtlGcScanTempBlk:
 	ldrh	w28, [x0, 4]
 	mov	w0, 65535
 	cmp	w28, w0
-	beq	.L1215
-	cbnz	w28, .L1192
-.L1193:
+	beq	.L1216
+	cbnz	w28, .L1193
+.L1194:
 	bl	FtlGcPageVarInit
-	b	.L1194
-.L1215:
+	b	.L1195
+.L1216:
 	mov	w28, 0
-.L1192:
+.L1193:
 	adrp	x0, .LANCHOR0+314
 	ldrh	w0, [x0, #:lo12:.LANCHOR0+314]
 	cmp	w0, w25
-	beq	.L1193
-.L1194:
+	beq	.L1194
+.L1195:
 	adrp	x26, .LANCHOR0
 	add	x19, x26, :lo12:.LANCHOR0
 	mov	w24, 0
-.L1209:
+.L1210:
 	ldrh	w1, [x20]
 	mov	w0, 65535
 	strb	wzr, [x20, 8]
 	cmp	w1, w0
-	beq	.L1195
-.L1212:
+	beq	.L1196
+.L1213:
 	add	x0, x26, :lo12:.LANCHOR0
 	add	x2, x20, 16
 	mov	w21, 0
@@ -8082,9 +8092,9 @@ FtlGcScanTempBlk:
 	ldrh	w0, [x0, 244]
 	add	x0, x0, 8
 	add	x0, x20, x0, lsl 1
-.L1196:
+.L1197:
 	cmp	x0, x2
-	bne	.L1198
+	bne	.L1199
 	ldr	x0, [x19, 3440]
 	mov	w2, 0
 	mov	w1, w21
@@ -8092,20 +8102,20 @@ FtlGcScanTempBlk:
 	bl	FlashReadPages
 	ubfiz	x0, x21, 5, 16
 	str	x0, [x29, 104]
-.L1199:
+.L1200:
 	ldr	x0, [x29, 104]
 	cmp	x0, x23
-	bne	.L1210
+	bne	.L1211
 	add	w3, w28, 1
 	add	w24, w24, 1
 	and	w28, w3, 65535
 	cmp	w25, w24
-	bls	.L1211
-.L1213:
+	bls	.L1212
+.L1214:
 	ldrh	w0, [x19, 314]
 	cmp	w0, w28
-	bhi	.L1212
-.L1195:
+	bhi	.L1213
+.L1196:
 	add	x22, x22, :lo12:.LANCHOR2
 	strh	w28, [x20, 2]
 	strb	wzr, [x20, 6]
@@ -8115,11 +8125,11 @@ FtlGcScanTempBlk:
 	strh	w0, [x22, 4]
 	mov	x0, x20
 	bl	ftl_sb_update_avl_pages
-	b	.L1214
-.L1198:
+	b	.L1215
+.L1199:
 	ldrh	w1, [x2]
 	cmp	w1, w10
-	beq	.L1197
+	beq	.L1198
 	ldr	x5, [x19, 3440]
 	ubfiz	x7, x21, 5, 16
 	orr	w1, w28, w1, lsl 10
@@ -8139,21 +8149,21 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w6
 	add	x1, x5, x1, sxtw 2
 	str	x1, [x4, 16]
-.L1197:
+.L1198:
 	add	x2, x2, 2
-	b	.L1196
-.L1210:
+	b	.L1197
+.L1211:
 	ldr	x0, [x19, 3440]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
 	ldr	w27, [x1, 4]
 	ldr	x21, [x1, 16]
-	cbnz	w0, .L1200
+	cbnz	w0, .L1201
 	ldrh	w0, [x21]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1201
-.L1225:
+	bne	.L1202
+.L1226:
 	ldrh	w1, [x20]
 	mov	w28, 0
 	ldr	x0, [x19, 80]
@@ -8164,30 +8174,30 @@ FtlGcScanTempBlk:
 	strh	w0, [x20]
 	strh	w0, [x19, 184]
 	bl	FtlGcPageVarInit
-	b	.L1209
-.L1201:
+	b	.L1210
+.L1202:
 	ldr	w1, [x19, 2632]
 	ldr	w0, [x21, 8]
 	cmp	w0, w1
-	bhi	.L1225
+	bhi	.L1226
 	add	x1, x29, 124
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x21, 12]
 	ldr	w1, [x29, 124]
 	cmp	w0, w1
-	beq	.L1204
-.L1206:
+	beq	.L1205
+.L1207:
 	ldr	w2, [x21, 8]
-.L1226:
+.L1227:
 	ldr	w0, [x21, 12]
 	mov	w1, w27
 	add	x23, x23, 32
 	bl	FtlGcUpdatePage
-	b	.L1199
-.L1204:
+	b	.L1200
+.L1205:
 	cmn	w0, #1
-	beq	.L1206
+	beq	.L1207
 	str	w0, [x29, 132]
 	mov	w2, 0
 	ldr	x0, [x19, 3496]
@@ -8203,37 +8213,37 @@ FtlGcScanTempBlk:
 	ldr	x5, [x29, 136]
 	ubfiz	x1, x1, 9, 16
 	add	x2, x2, x23
-.L1207:
+.L1208:
 	cmp	x0, x1
-	beq	.L1206
+	beq	.L1207
 	ldr	x6, [x2, 8]
 	ldr	w7, [x6, x0]
 	add	x0, x0, 4
 	add	x6, x5, x0
 	ldr	w6, [x6, -4]
 	cmp	w7, w6
-	beq	.L1207
+	beq	.L1208
 	ldrh	w1, [x20]
 	adrp	x0, .LC117
 	ldr	w2, [x29, 132]
 	add	x0, x0, :lo12:.LC117
 	bl	sftl_printk
-	b	.L1225
-.L1200:
-	mov	w2, -1
 	b	.L1226
-.L1211:
+.L1201:
+	mov	w2, -1
+	b	.L1227
+.L1212:
 	add	x1, x22, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w0, [x1, 4]
 	cmp	w0, w2
-	beq	.L1213
+	beq	.L1214
 	add	w0, w0, w24
 	strh	w0, [x1, 4]
 	ldrh	w0, [x19, 314]
 	cmp	w0, w28
-	bls	.L1213
-.L1214:
+	bls	.L1214
+.L1215:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, -1
 	ldp	x21, x22, [sp, 32]
@@ -8251,30 +8261,30 @@ FtlReadRefresh:
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x2, x0, 2720
 	ldr	w3, [x2, 80]
-	cbz	w3, .L1228
+	cbz	w3, .L1229
 	ldr	w1, [x0, 2632]
 	ldr	w3, [x2, 84]
 	cmp	w3, w1
-	bcs	.L1229
+	bcs	.L1230
 	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
 	mov	w20, 2048
 	str	x21, [sp, 32]
-.L1234:
+.L1235:
 	add	x21, x19, 2720
 	ldr	w1, [x19, 2632]
 	ldr	w0, [x21, 84]
 	cmp	w0, w1
-	bcc	.L1230
-.L1233:
+	bcc	.L1231
+.L1234:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, -1
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1230:
+.L1231:
 	add	x1, x29, 60
 	mov	w2, 0
 	bl	log2phys
@@ -8283,7 +8293,7 @@ FtlReadRefresh:
 	add	w0, w0, 1
 	str	w0, [x21, 84]
 	cmn	w1, #1
-	beq	.L1232
+	beq	.L1233
 	str	w0, [x29, 88]
 	mov	w2, 0
 	ldr	x0, [x19, 3512]
@@ -8297,24 +8307,24 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29, 64]
 	cmp	w0, 256
-	bne	.L1233
+	bne	.L1234
 	ldr	w0, [x29, 60]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L1233
-.L1232:
+	b	.L1234
+.L1233:
 	subs	w20, w20, #1
-	bne	.L1234
-	b	.L1233
-.L1229:
+	bne	.L1235
+	b	.L1234
+.L1230:
 	ldr	w0, [x0, 2636]
 	stp	w0, wzr, [x2, 76]
 	str	wzr, [x2, 84]
-.L1241:
+.L1242:
 	mov	w0, 0
 	ret
-.L1228:
+.L1229:
 	ldr	w4, [x0, 2692]
 	mov	w3, 10000
 	ldr	w5, [x0, 2636]
@@ -8325,7 +8335,7 @@ FtlReadRefresh:
 	csel	w6, w6, w3, hi
 	add	w3, w5, 1048576
 	cmp	w7, w3
-	bhi	.L1238
+	bhi	.L1239
 	ldr	w3, [x0, 2632]
 	mov	w8, 1000
 	lsr	w4, w4, 10
@@ -8334,14 +8344,14 @@ FtlReadRefresh:
 	udiv	w3, w3, w4
 	add	w3, w3, w7
 	cmp	w5, w3
-	bhi	.L1238
+	bhi	.L1239
 	ldrh	w0, [x0, 2548]
 	tst	w6, w0
-	bne	.L1241
+	bne	.L1242
 	ldr	w2, [x2, 100]
 	cmp	w0, w2
-	beq	.L1241
-.L1238:
+	beq	.L1242
+.L1239:
 	add	x0, x1, :lo12:.LANCHOR0
 	add	x1, x0, 2720
 	ldrh	w0, [x0, 2548]
@@ -8350,7 +8360,7 @@ FtlReadRefresh:
 	mov	w0, 1
 	str	wzr, [x1, 84]
 	str	w0, [x1, 80]
-	b	.L1241
+	b	.L1242
 	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
 	.global	l2p_flush
@@ -8363,26 +8373,26 @@ l2p_flush:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w19, 0
 	bl	FtlWriteDump_data
-.L1248:
+.L1249:
 	ldrh	w0, [x20, 350]
 	cmp	w0, w19
-	bhi	.L1250
+	bhi	.L1251
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1250:
+.L1251:
 	ldr	x1, [x20, 2616]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1249
+	tbz	w0, #31, .L1250
 	mov	w0, w19
 	bl	flush_l2p_region
-.L1249:
+.L1250:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1248
+	b	.L1249
 	.size	l2p_flush, .-l2p_flush
 	.align	2
 	.global	FtlVendorPartWrite
@@ -8402,16 +8412,16 @@ FtlVendorPartWrite:
 	ldrh	w0, [x19, 308]
 	stp	x25, x26, [sp, 64]
 	cmp	w1, w0
-	bhi	.L1260
+	bhi	.L1261
 	ldrh	w23, [x19, 320]
 	mov	x25, x2
 	add	x26, x29, 144
 	add	x27, x19, 3896
 	mov	w24, 0
 	lsr	w23, w28, w23
-.L1254:
-	cbnz	w22, .L1259
-.L1252:
+.L1255:
+	cbnz	w22, .L1260
+.L1253:
 	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8420,7 +8430,7 @@ FtlVendorPartWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1259:
+.L1260:
 	ldrh	w1, [x19, 270]
 	ldr	x0, [x19, 3608]
 	udiv	w21, w28, w1
@@ -8431,9 +8441,9 @@ FtlVendorPartWrite:
 	and	w20, w20, 65535
 	cmp	w22, w20
 	csel	w20, w0, w20, cc
-	cbz	w2, .L1256
+	cbz	w2, .L1257
 	cmp	w20, w1
-	beq	.L1256
+	beq	.L1257
 	ldr	x0, [x19, 3480]
 	str	w2, [x29, 116]
 	mov	w2, 1
@@ -8441,7 +8451,7 @@ FtlVendorPartWrite:
 	mov	w1, w2
 	add	x0, x29, 112
 	bl	FlashReadPages
-.L1257:
+.L1258:
 	lsl	w3, w20, 9
 	ldr	x0, [x19, 3480]
 	lsl	w21, w21, 9
@@ -8462,16 +8472,16 @@ FtlVendorPartWrite:
 	ldr	w3, [x29, 108]
 	csinv	w24, w24, wzr, ne
 	add	x25, x25, x3, sxtw
-	b	.L1254
-.L1256:
+	b	.L1255
+.L1257:
 	ldrh	w2, [x19, 322]
 	mov	w1, 0
 	ldr	x0, [x19, 3480]
 	bl	ftl_memset
-	b	.L1257
-.L1260:
+	b	.L1258
+.L1261:
 	mov	w24, -1
-	b	.L1252
+	b	.L1253
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8483,7 +8493,7 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1268
+	bne	.L1269
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
 	mov	w1, 72
@@ -8518,7 +8528,7 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1268:
+.L1269:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -8529,20 +8539,20 @@ FtlEctTblFlush:
 	add	x3, x1, :lo12:.LANCHOR0
 	ldrh	w2, [x3, 3960]
 	cmp	w2, 31
-	bhi	.L1275
+	bhi	.L1276
 	add	w2, w2, 1
 	strh	w2, [x3, 3960]
 	mov	w2, 1
-.L1272:
-	cbnz	w0, .L1273
+.L1273:
+	cbnz	w0, .L1274
 	add	x0, x1, :lo12:.LANCHOR0
 	ldr	x0, [x0, 3560]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1277
-.L1273:
+	bcc	.L1278
+.L1274:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
@@ -8567,10 +8577,10 @@ FtlEctTblFlush:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1275:
+.L1276:
 	mov	w2, 32
-	b	.L1272
-.L1277:
+	b	.L1273
+.L1278:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8603,7 +8613,7 @@ FtlVendorPartRead:
 	stp	x27, x28, [sp, 80]
 	ldrh	w0, [x3, 308]
 	cmp	w1, w0
-	bhi	.L1290
+	bhi	.L1291
 	ldrh	w21, [x3, 320]
 	adrp	x26, .LC118
 	mov	x25, x2
@@ -8611,9 +8621,9 @@ FtlVendorPartRead:
 	add	x26, x26, :lo12:.LC118
 	mov	w24, 0
 	lsr	w21, w23, w21
-.L1283:
-	cbnz	w22, .L1289
-.L1281:
+.L1284:
+	cbnz	w22, .L1290
+.L1282:
 	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8622,7 +8632,7 @@ FtlVendorPartRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1289:
+.L1290:
 	ldrh	w19, [x28, 270]
 	ldr	x0, [x28, 3608]
 	udiv	w20, w23, w19
@@ -8634,7 +8644,7 @@ FtlVendorPartRead:
 	cmp	w22, w19
 	csel	w19, w0, w19, cc
 	lsl	w27, w19, 9
-	cbz	w4, .L1285
+	cbz	w4, .L1286
 	ldr	x0, [x28, 3480]
 	mov	w2, 1
 	str	x0, [x29, 120]
@@ -8650,7 +8660,7 @@ FtlVendorPartRead:
 	ldr	w0, [x28, 3728]
 	csinv	w24, w24, wzr, ne
 	cmp	w0, 256
-	bne	.L1287
+	bne	.L1288
 	mov	w2, w4
 	mov	w1, w21
 	mov	x0, x26
@@ -8659,7 +8669,7 @@ FtlVendorPartRead:
 	mov	w1, w21
 	add	x0, x28, 3896
 	bl	FtlMapWritePage
-.L1287:
+.L1288:
 	ldr	x1, [x28, 3480]
 	lsl	w20, w20, 9
 	asr	w20, w20, 2
@@ -8667,21 +8677,21 @@ FtlVendorPartRead:
 	mov	x0, x25
 	add	x1, x1, x20, sxtw 2
 	bl	ftl_memcpy
-.L1288:
+.L1289:
 	add	w21, w21, 1
 	sub	w22, w22, w19
 	add	w23, w23, w19
 	add	x25, x25, x27, sxtw
-	b	.L1283
-.L1285:
+	b	.L1284
+.L1286:
 	mov	w2, w27
 	mov	w1, 0
 	mov	x0, x25
 	bl	ftl_memset
-	b	.L1288
-.L1290:
+	b	.L1289
+.L1291:
 	mov	w24, -1
-	b	.L1281
+	b	.L1282
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -8701,7 +8711,7 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1293
+	beq	.L1294
 	adrp	x1, .LC119
 	adrp	x0, .LC77
 	add	x1, x1, :lo12:.LC119
@@ -8712,7 +8722,7 @@ FtlLoadEctTbl:
 	ldrh	w2, [x19, 3544]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1293:
+.L1294:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8737,19 +8747,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1296
+	beq	.L1297
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1296:
+.L1297:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1297
+	bne	.L1298
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2660]
 	ldr	w2, [x0, 2812]
@@ -8774,7 +8784,7 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2696]
 	str	w2, [x0, 2692]
-.L1297:
+.L1298:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2680]
 	ldrh	w1, [x0, 304]
@@ -8804,7 +8814,7 @@ sftl_vendor_read:
 	.type	FtlMapBlkWriteDump_data, %function
 FtlMapBlkWriteDump_data:
 	ldr	w1, [x0, 56]
-	cbz	w1, .L1309
+	cbz	w1, .L1310
 	stp	x29, x30, [sp, -48]!
 	adrp	x1, .LANCHOR0
 	add	x2, x1, :lo12:.LANCHOR0
@@ -8825,11 +8835,11 @@ FtlMapBlkWriteDump_data:
 	str	wzr, [x19, 56]
 	ldr	w4, [x5, x4]
 	str	w4, [x0, 4]
-	cbz	w4, .L1303
+	cbz	w4, .L1304
 	mov	w2, 1
 	mov	w1, w2
 	bl	FlashReadPages
-.L1304:
+.L1305:
 	add	x1, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	ldr	x2, [x1, 3736]
@@ -8839,13 +8849,13 @@ FtlMapBlkWriteDump_data:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1303:
+.L1304:
 	ldrh	w2, [x2, 322]
 	mov	w1, 255
 	mov	x0, x3
 	bl	ftl_memset
-	b	.L1304
-.L1309:
+	b	.L1305
+.L1310:
 	ret
 	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
@@ -8945,7 +8955,7 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1313:
+.L1314:
 	ldrh	w2, [x20, 2]
 	ldrh	w1, [x20]
 	ldr	x0, [x19, 3464]
@@ -8957,7 +8967,7 @@ FtlVpcTblFlush:
 	ldrh	w0, [x19, 316]
 	sub	w0, w0, #1
 	cmp	w2, w0
-	blt	.L1314
+	blt	.L1315
 	ldrh	w24, [x20, 4]
 	strh	wzr, [x20, 2]
 	strh	w1, [x20, 4]
@@ -8971,7 +8981,7 @@ FtlVpcTblFlush:
 	strh	w0, [x20]
 	strh	w0, [x21, 2]
 	str	w1, [x21, 4]
-.L1314:
+.L1315:
 	ldrh	w1, [x19, 322]
 	ldr	x0, [x19, 3464]
 	bl	js_hash
@@ -8987,46 +8997,46 @@ FtlVpcTblFlush:
 	and	w0, w0, 65535
 	strh	w0, [x20, 2]
 	cmn	w1, #1
-	bne	.L1315
-	cmp	w0, 1
 	bne	.L1316
+	cmp	w0, 1
+	bne	.L1317
 	adrp	x0, .LC8
 	mov	w2, 1138
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1316:
+.L1317:
 	ldrh	w0, [x20, 2]
 	cmp	w0, 1
-	bne	.L1317
+	bne	.L1318
 	ldrh	w0, [x19, 316]
 	sub	w0, w0, #1
 	strh	w0, [x20, 2]
-.L1317:
+.L1318:
 	add	w22, w22, 1
 	and	w22, w22, 65535
 	cmp	w22, 3
-	bls	.L1313
+	bls	.L1314
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x0, .LC120
 	mov	w2, w22
 	add	x0, x0, :lo12:.LC120
 	ldr	w1, [x23, 3732]
 	bl	sftl_printk
-.L1319:
-	b	.L1319
-.L1315:
+.L1320:
+	b	.L1320
+.L1316:
 	cmp	w0, 1
-	beq	.L1313
+	beq	.L1314
 	cmp	w1, 256
-	beq	.L1313
+	beq	.L1314
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1320
+	beq	.L1321
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1320:
+.L1321:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -9056,14 +9066,14 @@ sftl_deinit:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	bne	.L1333
+	bne	.L1334
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	FtlSysFlush
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1333:
+.L1334:
 	mov	w0, 0
 	ret
 	.size	sftl_deinit, .-sftl_deinit
@@ -9081,50 +9091,50 @@ sftl_discard:
 	str	x21, [sp, 32]
 	ldr	w2, [x1, 352]
 	cmp	w3, w2
-	bhi	.L1344
+	bhi	.L1345
 	cmp	w20, 31
-	bhi	.L1338
-.L1352:
+	bhi	.L1339
+.L1353:
 	mov	w0, 0
-.L1336:
+.L1337:
 	ldp	x19, x20, [sp, 16]
 	ldr	x21, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1338:
+.L1339:
 	ldrh	w1, [x1, 270]
 	udiv	w21, w0, w1
 	msub	w0, w1, w21, w0
 	ands	w0, w0, 65535
-	beq	.L1339
+	beq	.L1340
 	sub	w1, w1, w0
 	add	w21, w21, 1
 	cmp	w1, w20
 	csel	w1, w1, w20, ls
 	sub	w20, w20, w1, uxth
-.L1339:
+.L1340:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	str	w0, [x29, 60]
-.L1340:
+.L1341:
 	ldrh	w0, [x19, 270]
 	cmp	w20, w0
-	bcs	.L1342
+	bcs	.L1343
 	ldr	w0, [x19, 3964]
 	cmp	w0, 32
-	bls	.L1352
+	bls	.L1353
 	str	wzr, [x19, 3964]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L1352
-.L1342:
+	b	.L1353
+.L1343:
 	mov	w2, 0
 	add	x1, x29, 56
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 56]
 	cmn	w0, #1
-	beq	.L1341
+	beq	.L1342
 	ldr	w0, [x19, 3964]
 	mov	w2, 1
 	add	x1, x29, 60
@@ -9139,14 +9149,14 @@ sftl_discard:
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L1341:
+.L1342:
 	ldrh	w0, [x19, 270]
 	add	w21, w21, 1
 	sub	w20, w20, w0
-	b	.L1340
-.L1344:
+	b	.L1341
+.L1345:
 	mov	w0, -1
-	b	.L1336
+	b	.L1337
 	.size	sftl_discard, .-sftl_discard
 	.align	2
 	.global	FtlVpcCheckAndModify
@@ -9171,19 +9181,19 @@ FtlVpcCheckAndModify:
 	mov	w1, 0
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1354:
+.L1355:
 	ldr	w0, [x19, 2632]
 	cmp	w21, w0
-	bcc	.L1356
+	bcc	.L1357
 	adrp	x22, .LC121
 	add	x20, x20, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:.LC121
 	mov	w19, 0
 	mov	w23, 65535
-.L1357:
+.L1358:
 	ldrh	w0, [x20, 252]
 	cmp	w0, w19
-	bhi	.L1362
+	bhi	.L1363
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	x23, [sp, 48]
@@ -9191,14 +9201,14 @@ FtlVpcCheckAndModify:
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1356:
+.L1357:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1355
+	beq	.L1356
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldr	x2, [x19, 3568]
@@ -9206,48 +9216,48 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1355:
+.L1356:
 	add	w21, w21, 1
-	b	.L1354
-.L1362:
+	b	.L1355
+.L1363:
 	ldr	x0, [x20, 80]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
 	ldr	x0, [x20, 3568]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1359
+	beq	.L1360
 	cmp	w2, w23
-	beq	.L1359
+	beq	.L1360
 	mov	x0, x22
 	mov	w1, w19
 	bl	sftl_printk
 	ldrh	w0, [x20, 32]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1360
 	ldrh	w0, [x20, 136]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1360
 	ldrh	w0, [x20, 88]
 	cmp	w0, w19
-	beq	.L1359
+	beq	.L1360
 	ldr	x0, [x20, 80]
 	ldrh	w1, [x0, x21]
-	cbnz	w1, .L1361
+	cbnz	w1, .L1362
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
-.L1359:
+.L1360:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1357
-.L1361:
+	b	.L1358
+.L1362:
 	ldr	x1, [x20, 3568]
 	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
 	mov	w0, w19
 	bl	update_vpc_list
-	b	.L1359
+	b	.L1360
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
@@ -9263,7 +9273,7 @@ allocate_new_data_superblock:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 252]
 	cmp	w0, w20
-	bcs	.L1368
+	bcs	.L1369
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9271,38 +9281,38 @@ allocate_new_data_superblock:
 	add	x1, x1, 600
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1368:
+.L1369:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L1369
+	beq	.L1370
 	add	x1, x19, :lo12:.LANCHOR0
 	ubfiz	x0, x20, 1, 16
 	ldr	x1, [x1, 80]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1370
+	cbz	w0, .L1371
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1369:
+.L1370:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	strb	w0, [x21, 8]
 	mov	w1, 65535
 	ldrh	w0, [x2, 3714]
 	cmp	w0, w1
-	beq	.L1371
+	beq	.L1372
 	cmp	w20, w0
-	bne	.L1372
+	bne	.L1373
 	ldr	x2, [x2, 80]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1373
-.L1372:
-	bl	update_vpc_list
+	cbz	w1, .L1374
 .L1373:
+	bl	update_vpc_list
+.L1374:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	w0, [x19, 3714]
-.L1371:
+.L1372:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9314,10 +9324,10 @@ allocate_new_data_superblock:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1370:
+.L1371:
 	mov	w0, w20
 	bl	INSERT_FREE_LIST
-	b	.L1369
+	b	.L1370
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
@@ -9342,12 +9352,12 @@ FtlProgPages:
 	add	x19, x0, 4
 	add	x21, x0, x21
 	bl	FlashProgPages
-.L1379:
+.L1380:
 	cmp	x21, x19
-	beq	.L1385
+	beq	.L1386
 	sub	x22, x19, #4
-	b	.L1386
-.L1381:
+	b	.L1387
+.L1382:
 	ldr	w1, [x19]
 	mov	x0, x23
 	bl	sftl_printk
@@ -9356,10 +9366,10 @@ FtlProgPages:
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1380
+	cbnz	w0, .L1381
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1380:
+.L1381:
 	mov	x0, x20
 	bl	get_new_active_ppa
 	str	w0, [x19]
@@ -9369,23 +9379,23 @@ FtlProgPages:
 	ldrb	w3, [x20, 9]
 	mov	x0, x22
 	bl	FlashProgPages
-.L1386:
+.L1387:
 	ldr	w2, [x19, -4]
 	cmp	w2, 256
 	ccmn	w2, #1, 4, ne
-	beq	.L1381
+	beq	.L1382
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x25, 244]
 	cmp	w1, w0
-	bcc	.L1382
+	bcc	.L1383
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 982
+	mov	w2, 985
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1382:
+.L1383:
 	add	x1, x29, 96
 	ldr	w0, [x22, 4]
 	mov	w2, 1
@@ -9399,36 +9409,36 @@ FtlProgPages:
 	and	w1, w0, 65535
 	mov	w22, w1
 	cmn	w4, #1
-	beq	.L1383
+	beq	.L1384
 	add	x2, x24, :lo12:.LANCHOR0
 	ubfiz	x0, x1, 1, 16
 	ldr	x2, [x2, 80]
 	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1384
+	cbnz	w0, .L1385
 	adrp	x0, .LC123
 	mov	w2, 0
 	add	x0, x0, :lo12:.LC123
 	bl	sftl_printk
-.L1384:
+.L1385:
 	mov	w0, w22
 	bl	decrement_vpc_count
-.L1383:
+.L1384:
 	add	x19, x19, 32
-	b	.L1379
-.L1385:
+	b	.L1380
+.L1386:
 	adrp	x0, .LANCHOR0+244
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, #:lo12:.LANCHOR0+244]
 	cmp	w1, w0
-	bcc	.L1378
+	bcc	.L1379
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
-	mov	w2, 997
+	mov	w2, 1000
 	add	x1, x1, 632
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1378:
+.L1379:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9452,34 +9462,34 @@ FtlGcFreeTempBlock:
 	ldrh	w4, [x2, 136]
 	ldrh	w1, [x2, 314]
 	cmp	w4, w3
-	bne	.L1393
-.L1400:
+	bne	.L1394
+.L1401:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	add	x1, x0, 136
 	ldrh	w3, [x0, 136]
 	str	wzr, [x0, 3720]
 	cmp	w3, w2
-	bne	.L1413
-.L1417:
+	bne	.L1414
+.L1418:
 	mov	w0, 0
-.L1392:
+.L1393:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L1393:
+.L1394:
 	adrp	x20, .LANCHOR2
-	cbz	w0, .L1396
+	cbz	w0, .L1397
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1397
-.L1398:
+	beq	.L1398
+.L1399:
 	mov	w1, 2
-.L1396:
+.L1397:
 	add	x20, x20, :lo12:.LANCHOR2
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 136
@@ -9488,22 +9498,22 @@ FtlGcFreeTempBlock:
 	mov	w0, 65535
 	ldrh	w1, [x20, 4]
 	cmp	w1, w0
-	beq	.L1400
+	beq	.L1401
 	mov	w0, 1
-	b	.L1392
-.L1397:
+	b	.L1393
+.L1398:
 	strh	wzr, [x0, 4]
 	ldrh	w0, [x2, 236]
 	cmp	w0, 17
-	bhi	.L1398
-	b	.L1396
-.L1413:
+	bhi	.L1399
+	b	.L1397
+.L1414:
 	ldrh	w2, [x0, 3304]
 	ldrb	w1, [x1, 7]
 	ldrh	w0, [x0, 314]
 	mul	w0, w1, w0
 	cmp	w2, w0
-	beq	.L1401
+	beq	.L1402
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -9511,7 +9521,7 @@ FtlGcFreeTempBlock:
 	add	x1, x1, 648
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1401:
+.L1402:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	x20, x0
@@ -9526,19 +9536,19 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2656]
-.L1402:
+.L1403:
 	ldrh	w0, [x20, 3304]
 	cmp	w0, w21
-	bhi	.L1406
+	bhi	.L1407
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x20, 136]
 	ldr	x2, [x20, 80]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1407
+	cbz	w1, .L1408
 	bl	INSERT_DATA_LIST
-.L1408:
+.L1409:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
@@ -9551,29 +9561,29 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x19, 236]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1417
+	ble	.L1418
 	mov	w0, 20
 	strh	w0, [x19, 3232]
-	b	.L1417
-.L1406:
+	b	.L1418
+.L1407:
 	umull	x23, w21, w25
 	ldr	x24, [x20, 3312]
 	ldr	w1, [x20, 2632]
 	add	x22, x24, x23
 	ldr	w0, [x22, 8]
 	cmp	w0, w1
-	bcc	.L1403
-.L1415:
+	bcc	.L1404
+.L1416:
 	ldrh	w0, [x20, 136]
-	b	.L1416
-.L1403:
+	b	.L1417
+.L1404:
 	add	x1, x29, 92
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x24, x23]
 	ldr	w1, [x29, 92]
 	cmp	w0, w1
-	bne	.L1405
+	bne	.L1406
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	mov	w23, w0
@@ -9582,20 +9592,20 @@ FtlGcFreeTempBlock:
 	add	x1, x22, 4
 	bl	log2phys
 	mov	w0, w23
-.L1416:
+.L1417:
 	bl	decrement_vpc_count
-	b	.L1404
-.L1405:
+	b	.L1405
+.L1406:
 	ldr	w0, [x22, 4]
 	cmp	w1, w0
-	bne	.L1415
-.L1404:
+	bne	.L1416
+.L1405:
 	add	w21, w21, 1
 	and	w21, w21, 65535
-	b	.L1402
-.L1407:
+	b	.L1403
+.L1408:
 	bl	INSERT_FREE_LIST
-	b	.L1408
+	b	.L1409
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -9613,13 +9623,13 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19, 138]
 	ldrh	w0, [x19, 314]
 	cmp	w1, w0
-	bcc	.L1418
+	bcc	.L1419
 	add	x0, x19, 3648
 	bl	FtlMapBlkWriteDump_data
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
 	str	wzr, [x19, 3720]
-.L1418:
+.L1419:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9667,43 +9677,43 @@ Ftl_gc_temp_data_write_back:
 	ldr	x0, [x19, 3448]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1424:
+.L1425:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1427
+	bcc	.L1428
 	ldr	x0, [x19, 3448]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
 	ldrh	w0, [x19, 140]
-	cbnz	w0, .L1429
+	cbnz	w0, .L1430
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w0, 1
-.L1423:
+.L1424:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1427:
+.L1428:
 	ldr	x2, [x19, 3448]
 	ubfiz	x0, x10, 5, 16
 	add	x1, x2, x0
 	ldr	w2, [x2, x0]
 	ldr	x3, [x1, 16]
 	cmn	w2, #1
-	bne	.L1425
-.L1431:
+	bne	.L1426
+.L1432:
 	ldr	w1, [x1, 4]
 	ldr	w0, [x3, 12]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1424
-.L1425:
+	b	.L1425
+.L1426:
 	ldr	w2, [x3, 8]
-	b	.L1431
-.L1429:
+	b	.L1432
+.L1430:
 	mov	w0, 0
-	b	.L1423
+	b	.L1424
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9718,10 +9728,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0, 136]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1433
+	beq	.L1434
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1434
-.L1433:
+	cbnz	w0, .L1435
+.L1434:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
@@ -9734,7 +9744,7 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1434:
+.L1435:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 136
 	bl	get_new_active_ppa
@@ -9756,23 +9766,23 @@ rk_ftl_garbage_collect:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	w2, [x1, 3424]
-	cbnz	w2, .L1515
+	cbnz	w2, .L1516
 	ldrh	w2, [x1, 2592]
 	cmp	w2, 47
-	bls	.L1515
+	bls	.L1516
 	mov	w23, w0
 	adrp	x0, .LANCHOR2+4
 	ldrh	w2, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L1438
-.L1441:
+	bne	.L1439
+.L1442:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 232]
 	cmp	w1, w2
-	bne	.L1439
-.L1440:
+	bne	.L1440
+.L1441:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	FtlReadRefresh
 	mov	w21, 65535
@@ -9782,91 +9792,91 @@ rk_ftl_garbage_collect:
 	add	w0, w0, w23, lsl 7
 	str	w0, [x20, 3236]
 	cmp	w1, w21
-	bne	.L1442
+	bne	.L1443
 	ldrh	w21, [x20, 136]
 	cmp	w21, w1
-	bne	.L1518
+	bne	.L1519
 	ldrh	w22, [x20, 234]
 	cmp	w22, w21
-	bne	.L1442
+	bne	.L1443
 	ldrh	w1, [x20, 236]
 	mov	w2, 1024
 	cmp	w1, 24
 	mov	w1, 5120
 	csel	w1, w1, w2, cc
 	cmp	w0, w1
-	bls	.L1521
+	bls	.L1522
 	strh	wzr, [x20, 3968]
 	str	wzr, [x20, 3236]
 	bl	GetSwlReplaceBlock
 	and	w21, w0, 65535
 	cmp	w21, w22
-	bne	.L1522
+	bne	.L1523
 	ldrh	w1, [x20, 236]
 	ldrh	w0, [x20, 3234]
 	cmp	w1, w0
-	bcs	.L1445
+	bcs	.L1446
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
 	cmp	w0, w21
-	beq	.L1447
+	beq	.L1448
 	ldr	x1, [x20, 80]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1448
+	bhi	.L1449
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
 	strh	w0, [x20, 3234]
 	cmp	w22, w21
-	bne	.L1444
-.L1447:
+	bne	.L1445
+.L1448:
 	bl	FtlGcReFreshBadBlk
-.L1442:
+.L1443:
 	cmp	w23, 0
 	mov	w0, 65535
 	add	x1, x19, :lo12:.LANCHOR0
 	ccmp	w21, w0, 0, eq
-	bne	.L1450
+	bne	.L1451
 	ldrh	w0, [x1, 236]
 	cmp	w0, 24
-	bhi	.L1523
+	bhi	.L1524
 	cmp	w0, 16
 	ldrh	w20, [x1, 314]
-	bls	.L1452
+	bls	.L1453
 	lsr	w20, w20, 5
-.L1451:
+.L1452:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1455
+	bcs	.L1456
 	ldrh	w0, [x1, 136]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1456
+	bne	.L1457
 	ldrh	w2, [x1, 234]
 	cmp	w2, w0
-	bne	.L1456
+	bne	.L1457
 	ldrh	w0, [x1, 3968]
-	cbnz	w0, .L1457
+	cbnz	w0, .L1458
 	ldr	w2, [x1, 2632]
 	ldr	w3, [x1, 2628]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1458
-.L1457:
+	bcs	.L1459
+.L1458:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2700]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1459:
+.L1460:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1436:
+.L1437:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9874,34 +9884,34 @@ rk_ftl_garbage_collect:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1438:
+.L1439:
 	ldrh	w1, [x1, 136]
 	cmp	w1, w0
-	beq	.L1441
+	beq	.L1442
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1441
+	cbz	w0, .L1442
 	mov	w0, 1
-	b	.L1436
-.L1439:
+	b	.L1437
+.L1440:
 	ldrh	w3, [x0, 234]
 	cmp	w3, w2
-	bne	.L1440
+	bne	.L1441
 	strh	w1, [x0, 234]
 	mov	w1, -1
 	strh	w1, [x0, 232]
-	b	.L1440
-.L1448:
+	b	.L1441
+.L1449:
 	mov	w0, 64
-.L1553:
+.L1554:
 	strh	w0, [x20, 3234]
-	b	.L1447
-.L1445:
+	b	.L1448
+.L1446:
 	mov	w0, 80
-	b	.L1553
-.L1522:
+	b	.L1554
+.L1523:
 	mov	w22, w21
-.L1444:
+.L1445:
 	add	x0, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x22, 1, 32
 	mov	w21, w22
@@ -9915,72 +9925,72 @@ rk_ftl_garbage_collect:
 	adrp	x0, .LC124
 	add	x0, x0, :lo12:.LC124
 	bl	sftl_printk
-	b	.L1447
-.L1518:
+	b	.L1448
+.L1519:
 	mov	w21, w1
-	b	.L1442
-.L1521:
+	b	.L1443
+.L1522:
 	mov	w21, w22
-	b	.L1442
-.L1452:
+	b	.L1443
+.L1453:
 	cmp	w0, 12
-	bls	.L1453
+	bls	.L1454
 	lsr	w20, w20, 4
-	b	.L1451
-.L1453:
+	b	.L1452
+.L1454:
 	mov	w1, w20
 	cmp	w0, 9
 	lsr	w20, w20, 2
 	csel	w20, w20, w1, cs
-	b	.L1451
-.L1523:
+	b	.L1452
+.L1524:
 	mov	w20, 1
-	b	.L1451
-.L1458:
+	b	.L1452
+.L1459:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1459
-.L1456:
+	b	.L1460
+.L1457:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1455:
+.L1456:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3320]
-	cbz	w0, .L1524
+	cbz	w0, .L1525
 	add	w20, w20, 32
 	and	w20, w20, 65535
-.L1524:
+.L1525:
 	mov	w21, 65535
-.L1461:
+.L1462:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 184]
 	cmp	w1, w2
-	bne	.L1470
+	bne	.L1471
 	cmp	w21, w1
-	beq	.L1471
+	beq	.L1472
 	strh	w21, [x0, 184]
-.L1472:
+.L1473:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x5, 184]
 	strb	wzr, [x5, 192]
 	cmp	w0, w1
-	beq	.L1470
+	beq	.L1471
 	bl	IsBlkInGcList
-	cbz	w0, .L1475
+	cbz	w0, .L1476
 	mov	w0, -1
 	strh	w0, [x5, 184]
-.L1475:
+.L1476:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	add	x24, x22, 184
 	ldrh	w1, [x22, 184]
 	cmp	w1, w0
-	beq	.L1470
+	beq	.L1471
 	mov	x0, x24
 	bl	make_superblock
 	ldrh	w1, [x22, 184]
@@ -9990,79 +10000,79 @@ rk_ftl_garbage_collect:
 	strh	wzr, [x22, 3970]
 	ldrh	w0, [x0, x1, lsl 1]
 	strh	w0, [x22, 3972]
-.L1470:
+.L1471:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w2, [x0, 32]
 	cmp	w2, w1
-	beq	.L1476
+	beq	.L1477
 	ldrh	w2, [x0, 88]
 	cmp	w2, w1
-	beq	.L1476
+	beq	.L1477
 	ldrh	w0, [x0, 136]
 	cmp	w0, w1
-	bne	.L1477
-.L1476:
+	bne	.L1478
+.L1477:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L1477:
+.L1478:
 	adrp	x25, .LANCHOR1
 	add	x25, x25, :lo12:.LANCHOR1
 	add	x25, x25, 672
-.L1512:
+.L1513:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
 	ldrh	w24, [x22, 184]
 	cmp	w24, w0
-	bne	.L1478
+	bne	.L1479
 	mov	w26, 2
 	str	wzr, [x22, 3244]
-.L1479:
+.L1480:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
 	strh	w6, [x22, 184]
 	cmp	w6, w24
-	bne	.L1480
+	bne	.L1481
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1436
-.L1450:
+	b	.L1437
+.L1451:
 	ldrh	w2, [x1, 136]
 	cmp	w2, w0
-	bne	.L1527
+	bne	.L1528
 	ldrh	w0, [x1, 234]
 	cmp	w0, w2
-	bne	.L1527
+	bne	.L1528
 	cmp	w21, w0
-	bne	.L1527
+	bne	.L1528
 	ldrh	w0, [x1, 184]
 	cmp	w0, w21
-	beq	.L1462
-.L1527:
+	beq	.L1463
+.L1528:
 	mov	w20, 1
-	b	.L1461
-.L1462:
+	b	.L1462
+.L1463:
 	ldrh	w2, [x1, 236]
 	ldrh	w0, [x1, 3232]
 	str	wzr, [x1, 3244]
 	cmp	w2, w0
-	bls	.L1463
+	bls	.L1464
 	ldrh	w0, [x1, 3968]
-	cbnz	w0, .L1464
+	cbnz	w0, .L1465
 	ldr	w0, [x1, 2632]
 	ldr	w2, [x1, 2628]
 	add	w0, w0, w0, lsl 1
 	cmp	w2, w0, lsr 2
-	bcs	.L1465
-.L1464:
+	bcs	.L1466
+.L1465:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2700]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-.L1554:
+.L1555:
 	strh	w0, [x1, 3232]
 	bl	FtlReadRefresh
 	mov	w0, 0
@@ -10072,16 +10082,16 @@ rk_ftl_garbage_collect:
 	ldr	x2, [x1, 80]
 	ldrh	w0, [x2, x0]
 	cmp	w0, 4
-	bls	.L1463
+	bls	.L1464
 	ldrh	w0, [x1, 3968]
-	b	.L1436
-.L1465:
+	b	.L1437
+.L1466:
 	mov	w0, 18
-	b	.L1554
-.L1463:
+	b	.L1555
+.L1464:
 	add	x20, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x20, 3968]
-	cbnz	w0, .L1527
+	cbnz	w0, .L1528
 	ldrh	w5, [x20, 2700]
 	add	w0, w5, w5, lsl 1
 	asr	w0, w0, 2
@@ -10097,47 +10107,47 @@ rk_ftl_garbage_collect:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1468
+	ble	.L1469
 	ldrh	w0, [x20, 236]
 	sub	w5, w5, #1
 	cmp	w0, w5
-	blt	.L1468
+	blt	.L1469
 	bl	FtlReadRefresh
 	ldrh	w0, [x20, 3968]
-	b	.L1436
-.L1468:
-	cbnz	w1, .L1527
+	b	.L1437
+.L1469:
+	cbnz	w1, .L1528
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x19, 236]
 	add	w0, w0, 1
-	b	.L1436
-.L1471:
+	b	.L1437
+.L1472:
 	ldrh	w1, [x0, 234]
 	cmp	w1, w21
-	beq	.L1472
+	beq	.L1473
 	ldr	x2, [x0, 80]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1473
+	cbnz	w1, .L1474
 	mov	w1, -1
 	strh	w1, [x0, 234]
-.L1473:
+.L1474:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 234]
 	strh	w1, [x0, 184]
 	mov	w1, -1
 	strh	w1, [x0, 234]
-	b	.L1472
-.L1480:
+	b	.L1473
+.L1481:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1481
+	cbz	w0, .L1482
 	strh	w5, [x22, 3240]
-	b	.L1479
-.L1481:
+	b	.L1480
+.L1482:
 	ldrh	w4, [x22, 244]
 	ubfiz	x1, x6, 1, 16
 	ldrh	w0, [x22, 314]
@@ -10148,73 +10158,73 @@ rk_ftl_garbage_collect:
 	ldrh	w3, [x2, x1]
 	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L1483
+	bgt	.L1484
 	cmp	w5, 48
-	bls	.L1484
+	bls	.L1485
 	cmp	w3, 8
-	bls	.L1484
+	bls	.L1485
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1484
-.L1483:
-	strh	wzr, [x22, 3240]
+	bhi	.L1485
 .L1484:
+	strh	wzr, [x22, 3240]
+.L1485:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1485
+	bgt	.L1486
 	cmp	w21, w24
-	bne	.L1485
+	bne	.L1486
 	ldrh	w0, [x22, 3240]
 	cmp	w0, 3
-	bhi	.L1485
+	bhi	.L1486
 	mov	w0, -1
 	strh	wzr, [x22, 3240]
 	strh	w0, [x22, 184]
-.L1555:
+.L1556:
 	ldrh	w0, [x22, 3968]
-	b	.L1436
-.L1485:
-	cbnz	w1, .L1486
+	b	.L1437
+.L1486:
+	cbnz	w1, .L1487
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1479
-.L1486:
+	b	.L1480
+.L1487:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0, 192]
 	ldrh	w0, [x0, 32]
 	cmp	w0, w6
-	bne	.L1487
+	bne	.L1488
 	adrp	x0, .LC8
 	mov	w2, 717
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1487:
+.L1488:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w0, [x0, 88]
 	cmp	w1, w0
-	bne	.L1488
+	bne	.L1489
 	adrp	x0, .LC8
 	mov	w2, 718
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1488:
+.L1489:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 184]
 	ldrh	w0, [x0, 136]
 	cmp	w1, w0
-	bne	.L1489
+	bne	.L1490
 	adrp	x0, .LC8
 	mov	w2, 719
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1489:
+.L1490:
 	add	x22, x19, :lo12:.LANCHOR0
 	add	x24, x22, 184
 	mov	x0, x24
@@ -10226,12 +10236,12 @@ rk_ftl_garbage_collect:
 	strh	w0, [x22, 3972]
 	strh	wzr, [x22, 186]
 	strb	wzr, [x22, 190]
-.L1478:
+.L1479:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 1
 	str	w0, [x1, 3424]
 	ldrh	w26, [x1, 314]
-	cbz	w23, .L1490
+	cbz	w23, .L1491
 	ldrh	w0, [x1, 244]
 	ldrh	w2, [x1, 184]
 	ldr	x1, [x1, 80]
@@ -10242,19 +10252,19 @@ rk_ftl_garbage_collect:
 	sdiv	w0, w0, w1
 	add	w20, w20, w0
 	and	w20, w20, 65535
-.L1490:
+.L1491:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 186]
 	add	w1, w0, w20
 	cmp	w1, w26
-	ble	.L1491
+	ble	.L1492
 	sub	w20, w26, w0
 	and	w20, w20, 65535
-.L1491:
-	mov	w27, 0
 .L1492:
+	mov	w27, 0
+.L1493:
 	cmp	w20, w27, uxth
-	bls	.L1500
+	bls	.L1501
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w24, 0
 	add	x3, x0, 200
@@ -10263,11 +10273,11 @@ rk_ftl_garbage_collect:
 	ldrh	w4, [x0, 186]
 	ldrh	w7, [x0, 244]
 	add	w4, w4, w27
-	b	.L1501
-.L1494:
+	b	.L1502
+.L1495:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1493
+	beq	.L1494
 	ldr	x5, [x0, 3280]
 	ubfiz	x8, x24, 5, 16
 	add	w24, w24, 1
@@ -10275,13 +10285,13 @@ rk_ftl_garbage_collect:
 	add	x5, x5, x8
 	and	w24, w24, 65535
 	str	w2, [x5, 4]
-.L1493:
+.L1494:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1501:
+.L1502:
 	cmp	w1, w7
-	bne	.L1494
+	bne	.L1495
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w1, w24
 	mov	x28, 0
@@ -10290,26 +10300,26 @@ rk_ftl_garbage_collect:
 	bl	FlashReadPages
 	ubfiz	x0, x24, 5, 16
 	str	x0, [x29, 104]
-.L1495:
+.L1496:
 	ldr	x0, [x29, 104]
 	cmp	x0, x28
-	bne	.L1499
+	bne	.L1500
 	add	w27, w27, 1
-	b	.L1492
-.L1499:
+	b	.L1493
+.L1500:
 	ldr	x0, [x22, 3280]
 	add	x1, x0, x28
 	ldr	w0, [x0, x28]
 	cmn	w0, #1
-	beq	.L1496
+	beq	.L1497
 	ldr	x24, [x1, 16]
 	mov	w0, 61589
 	ldrh	w1, [x24]
 	cmp	w1, w0
-	bne	.L1496
+	bne	.L1497
 	ldr	w4, [x24, 8]
 	cmn	w4, #1
-	bne	.L1497
+	bne	.L1498
 	str	w4, [x29, 96]
 	mov	w2, 753
 	mov	x1, x25
@@ -10317,7 +10327,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
 	ldr	w4, [x29, 96]
-.L1497:
+.L1498:
 	mov	w2, 0
 	add	x1, x29, 120
 	mov	w0, w4
@@ -10327,7 +10337,7 @@ rk_ftl_garbage_collect:
 	add	x0, x0, x28
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1496
+	bne	.L1497
 	ldrh	w1, [x22, 3970]
 	ldr	x2, [x22, 3448]
 	add	w1, w1, 1
@@ -10365,67 +10375,67 @@ rk_ftl_garbage_collect:
 	ldrb	w1, [x22, 143]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1498
+	beq	.L1499
 	ldrh	w0, [x22, 140]
-	cbnz	w0, .L1496
-.L1498:
+	cbnz	w0, .L1497
+.L1499:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1496
+	cbz	w0, .L1497
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	strh	wzr, [x19, 186]
 	strh	w0, [x19, 184]
 	str	wzr, [x19, 3424]
 	ldrh	w0, [x19, 3968]
-	b	.L1436
-.L1496:
+	b	.L1437
+.L1497:
 	add	x28, x28, 32
-	b	.L1495
-.L1500:
+	b	.L1496
+.L1501:
 	add	x22, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x22, 186]
 	add	w20, w20, w0
 	and	w20, w20, 65535
 	strh	w20, [x22, 186]
 	cmp	w26, w20
-	bhi	.L1502
+	bhi	.L1503
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1503
+	cbz	w0, .L1504
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1503
+	cbz	w0, .L1504
 	str	wzr, [x22, 3424]
-	b	.L1555
-.L1503:
+	b	.L1556
+.L1504:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3970]
-	cbnz	w1, .L1504
+	cbnz	w1, .L1505
 	ldrh	w2, [x0, 184]
 	ldr	x1, [x0, 80]
 	ldrh	w1, [x1, x2, lsl 1]
-	cbz	w1, .L1504
+	cbz	w1, .L1505
 	mov	x20, x0
 	mov	w22, 0
-.L1505:
+.L1506:
 	ldr	w0, [x20, 2632]
 	cmp	w22, w0
-	bcs	.L1510
+	bcs	.L1511
 	mov	w2, 0
 	add	x1, x29, 124
 	mov	w0, w22
 	bl	log2phys
 	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	beq	.L1506
+	beq	.L1507
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20, 184]
 	cmp	w1, w0, uxth
-	bne	.L1506
-.L1510:
+	bne	.L1507
+.L1511:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2632]
 	cmp	w22, w1
-	bcc	.L1504
+	bcc	.L1505
 	ldrh	w2, [x0, 184]
 	ldr	x1, [x0, 80]
 	strh	wzr, [x1, x2, lsl 1]
@@ -10433,29 +10443,29 @@ rk_ftl_garbage_collect:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1504:
+.L1505:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 184]
-.L1502:
+.L1503:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 236]
 	str	wzr, [x0, 3424]
 	cmp	w1, 2
-	bhi	.L1511
+	bhi	.L1512
 	ldrh	w20, [x0, 314]
-	b	.L1512
-.L1506:
+	b	.L1513
+.L1507:
 	add	w22, w22, 1
-	b	.L1505
-.L1511:
+	b	.L1506
+.L1512:
 	ldrh	w0, [x0, 3968]
 	cmp	w0, 0
 	csinc	w0, w0, w1, ne
-	b	.L1436
-.L1515:
+	b	.L1437
+.L1516:
 	mov	w0, 0
-	b	.L1436
+	b	.L1437
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
 	.global	FtlRead
@@ -10473,13 +10483,13 @@ FtlRead:
 	mov	w25, w2
 	stp	x21, x22, [sp, 32]
 	stp	x27, x28, [sp, 80]
-	bne	.L1557
+	bne	.L1558
 	mov	x2, x3
 	mov	w1, w25
 	add	w0, w19, 256
 	bl	FtlVendorPartRead
 	mov	w21, w0
-.L1556:
+.L1557:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -10488,7 +10498,7 @@ FtlRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1557:
+.L1558:
 	add	w0, w1, w2
 	str	w0, [x29, 128]
 	adrp	x0, .LANCHOR0
@@ -10497,11 +10507,11 @@ FtlRead:
 	str	x0, [x29, 96]
 	ldr	w1, [x3, 352]
 	cmp	w2, w1
-	bhi	.L1578
+	bhi	.L1579
 	adrp	x0, .LANCHOR2
 	ldr	w21, [x0, #:lo12:.LANCHOR2]
 	cmn	w21, #1
-	beq	.L1556
+	beq	.L1557
 	ldrh	w0, [x3, 270]
 	sub	w24, w2, #1
 	mov	x26, x3
@@ -10520,42 +10530,42 @@ FtlRead:
 	add	w22, w22, 1
 	add	w0, w0, w22
 	str	w0, [x3, 2636]
-.L1559:
-	cbnz	w22, .L1576
+.L1560:
+	cbnz	w22, .L1577
 	ldr	x0, [x29, 96]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
-	cbnz	w1, .L1577
+	cbnz	w1, .L1578
 	ldrh	w0, [x0, 236]
 	cmp	w0, 31
-	bhi	.L1556
-.L1577:
+	bhi	.L1557
+.L1578:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1556
-.L1576:
+	b	.L1557
+.L1577:
 	add	x1, x29, 156
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
 	ldr	w1, [x29, 156]
 	cmn	w1, #1
-	bne	.L1560
+	bne	.L1561
 	mov	w5, 0
-.L1561:
+.L1562:
 	ldrh	w0, [x26, 270]
 	cmp	w5, w0
-	bcc	.L1563
-.L1564:
+	bcc	.L1564
+.L1565:
 	add	w20, w20, 1
 	subs	w22, w22, #1
-	beq	.L1568
+	beq	.L1569
 	ldrh	w0, [x26, 244]
 	cmp	w28, w0, lsl 2
-	bne	.L1559
-.L1568:
-	cbz	w28, .L1559
+	bne	.L1560
+.L1569:
+	cbz	w28, .L1560
 	ldr	x0, [x26, 3440]
 	mov	w1, w28
 	mov	w2, 0
@@ -10572,63 +10582,63 @@ FtlRead:
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
 	str	x0, [x29, 104]
-.L1575:
+.L1576:
 	ldr	x0, [x26, 3440]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
 	cmp	w27, w1
-	bne	.L1570
+	bne	.L1571
 	ldr	x1, [x0, 8]
 	ldr	x0, [x26, 3488]
 	cmp	x1, x0
-	bne	.L1571
+	bne	.L1572
 	ldr	x0, [x29, 120]
 	ldr	w2, [x29, 116]
 	add	x1, x1, x0
 	mov	x0, x23
-.L1588:
+.L1589:
 	bl	ftl_memcpy
-.L1571:
+.L1572:
 	ldr	x0, [x26, 3440]
 	add	x0, x0, x28
 	ldr	x1, [x0, 16]
 	ldr	w2, [x0, 24]
 	ldr	w1, [x1, 8]
 	cmp	w2, w1
-	beq	.L1572
+	beq	.L1573
 	ldr	w1, [x26, 2792]
 	add	w1, w1, 1
 	str	w1, [x26, 2792]
-.L1572:
+.L1573:
 	ldr	w2, [x0]
 	cmn	w2, #1
-	bne	.L1573
+	bne	.L1574
 	ldr	w1, [x26, 2792]
 	mov	w21, w2
 	add	w1, w1, 1
 	str	w1, [x26, 2792]
-.L1573:
+.L1574:
 	ldr	w1, [x0]
 	cmp	w1, 256
-	bne	.L1574
+	bne	.L1575
 	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1574:
+.L1575:
 	ldr	x0, [x29, 104]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1575
+	bne	.L1576
 	mov	w28, 0
-	b	.L1559
-.L1563:
+	b	.L1560
+.L1564:
 	madd	w0, w20, w0, w5
 	cmp	w19, w0
-	bhi	.L1562
+	bhi	.L1563
 	ldr	w1, [x29, 128]
 	cmp	w1, w0
-	bls	.L1562
+	bls	.L1563
 	sub	w0, w0, w19
 	str	w5, [x29, 120]
 	lsl	w0, w0, 9
@@ -10637,17 +10647,17 @@ FtlRead:
 	add	x0, x23, x0
 	bl	ftl_memset
 	ldr	w5, [x29, 120]
-.L1562:
+.L1563:
 	add	w5, w5, 1
-	b	.L1561
-.L1560:
+	b	.L1562
+.L1561:
 	ldr	x0, [x26, 3440]
 	ubfiz	x2, x28, 5, 32
 	cmp	w20, w27
 	add	x0, x0, x2
 	str	w1, [x0, 4]
 	ldrh	w0, [x26, 270]
-	bne	.L1565
+	bne	.L1566
 	ldr	x1, [x26, 3440]
 	ldr	x5, [x26, 3488]
 	add	x1, x1, x2
@@ -10660,9 +10670,9 @@ FtlRead:
 	csel	w3, w25, w5, ls
 	str	w3, [x29, 136]
 	cmp	w3, w0
-	bne	.L1566
+	bne	.L1567
 	str	x23, [x1, 8]
-.L1566:
+.L1567:
 	ldr	x0, [x26, 3440]
 	ldr	x1, [x26, 3536]
 	add	x2, x0, x2
@@ -10673,10 +10683,10 @@ FtlRead:
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1564
-.L1565:
+	b	.L1565
+.L1566:
 	cmp	w20, w24
-	bne	.L1567
+	bne	.L1568
 	ldr	x5, [x26, 3440]
 	ldr	x1, [x26, 3496]
 	add	x5, x5, x2
@@ -10686,13 +10696,13 @@ FtlRead:
 	sub	w3, w3, w1
 	str	w3, [x29, 132]
 	cmp	w0, w3
-	bne	.L1566
+	bne	.L1567
 	sub	w1, w1, w19
 	lsl	w1, w1, 9
 	add	x1, x23, x1
 	str	x1, [x5, 8]
-	b	.L1566
-.L1567:
+	b	.L1567
+.L1568:
 	ldr	x1, [x26, 3440]
 	mul	w0, w0, w20
 	add	x1, x1, x2
@@ -10700,24 +10710,24 @@ FtlRead:
 	lsl	w0, w0, 9
 	add	x0, x23, x0
 	str	x0, [x1, 8]
-	b	.L1566
-.L1570:
+	b	.L1567
+.L1571:
 	cmp	w24, w1
-	bne	.L1571
+	bne	.L1572
 	ldr	x1, [x0, 8]
 	ldr	x0, [x26, 3496]
 	cmp	x1, x0
-	bne	.L1571
+	bne	.L1572
 	ldrh	w0, [x26, 270]
 	ldr	w2, [x29, 112]
 	mul	w0, w0, w24
 	sub	w0, w0, w19
 	lsl	w0, w0, 9
 	add	x0, x23, x0
-	b	.L1588
-.L1578:
+	b	.L1589
+.L1579:
 	mov	w21, -1
-	b	.L1556
+	b	.L1557
 	.size	FtlRead, .-FtlRead
 	.align	2
 	.global	sftl_read
@@ -10749,12 +10759,12 @@ FtlWrite:
 	stp	x21, x22, [sp, 32]
 	stp	x27, x28, [sp, 80]
 	str	w2, [x29, 172]
-	bne	.L1592
+	bne	.L1593
 	add	w0, w1, 256
 	ldr	w1, [x29, 172]
 	mov	x2, x3
 	bl	FtlVendorPartWrite
-.L1591:
+.L1592:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -10762,7 +10772,7 @@ FtlWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 224
 	ret
-.L1592:
+.L1593:
 	ldr	w0, [x29, 172]
 	adrp	x19, .LANCHOR0
 	add	x1, x19, :lo12:.LANCHOR0
@@ -10771,13 +10781,13 @@ FtlWrite:
 	ldr	w0, [x1, 352]
 	ldr	w2, [x29, 148]
 	cmp	w2, w0
-	bhi	.L1628
+	bhi	.L1629
 	adrp	x2, .LANCHOR2
 	str	x2, [x29, 136]
 	add	x3, x2, :lo12:.LANCHOR2
 	ldr	w0, [x2, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1591
+	beq	.L1592
 	mov	w0, 2048
 	ldr	w2, [x29, 148]
 	str	w0, [x1, 3976]
@@ -10798,55 +10808,55 @@ FtlWrite:
 	add	w0, w0, w24
 	str	w0, [x1, 2644]
 	ldr	w0, [x3, 8]
-	cbz	w0, .L1594
+	cbz	w0, .L1595
 	ldrh	w0, [x20, 4]
 	add	x1, x1, 88
 	cmp	w0, 0
 	csel	x20, x1, x20, eq
-.L1594:
+.L1595:
 	adrp	x0, .LANCHOR1
 	mov	w21, w25
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 696
 	str	x0, [x29, 160]
-.L1595:
-	cbnz	w24, .L1623
+.L1596:
+	cbnz	w24, .L1624
 	ldr	w1, [x29, 132]
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x19, 236]
 	cmp	w0, 5
-	bls	.L1624
-.L1626:
+	bls	.L1625
+.L1627:
 	mov	w0, 0
-	b	.L1591
-.L1623:
+	b	.L1592
+.L1624:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1596
+	bcc	.L1597
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC8
-	mov	w2, 1038
+	mov	w2, 1041
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1596:
+.L1597:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1597
+	cbnz	w0, .L1598
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x0, 32
 	cmp	x20, x1
-	bne	.L1598
+	bne	.L1599
 	add	x0, x0, 88
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1599
+	cbnz	w1, .L1600
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1599:
+.L1600:
 	add	x20, x19, :lo12:.LANCHOR0
 	add	x22, x20, 32
 	add	x20, x20, 88
@@ -10857,12 +10867,12 @@ FtlWrite:
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
 	csel	x20, x20, x22, ne
-.L1600:
+.L1601:
 	ldrh	w0, [x20, 4]
-	cbnz	w0, .L1597
+	cbnz	w0, .L1598
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1597:
+.L1598:
 	ldrh	w0, [x20, 4]
 	ldrb	w1, [x20, 7]
 	cmp	w0, w24
@@ -10875,21 +10885,21 @@ FtlWrite:
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1601
+	bcc	.L1602
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC8
-	mov	w2, 1071
+	mov	w2, 1074
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1601:
-	mov	x28, 0
 .L1602:
+	mov	x28, 0
+.L1603:
 	ldr	w0, [x29, 128]
 	mov	w22, w28
 	cmp	w28, w0
-	bcc	.L1621
+	bcc	.L1622
 	mov	x22, x0
-.L1603:
+.L1604:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	x3, x20
 	mov	w2, 0
@@ -10897,30 +10907,30 @@ FtlWrite:
 	ldr	x0, [x0, 3456]
 	bl	FtlProgPages
 	cmp	w24, w22
-	bcs	.L1622
+	bcs	.L1623
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC8
-	mov	w2, 1149
+	mov	w2, 1152
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1622:
+.L1623:
 	sub	w24, w24, w22
-	b	.L1595
-.L1598:
+	b	.L1596
+.L1599:
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1633
+	cbnz	w0, .L1634
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-	b	.L1600
-.L1633:
+	b	.L1601
+.L1634:
 	mov	x20, x1
-	b	.L1597
-.L1621:
+	b	.L1598
+.L1622:
 	ldrh	w0, [x20, 4]
-	cbz	w0, .L1603
+	cbz	w0, .L1604
 	add	x1, x29, 188
 	mov	w2, 0
 	mov	w0, w21
@@ -10952,9 +10962,9 @@ FtlWrite:
 	cmp	w21, w25
 	ldr	x3, [x29, 152]
 	ccmp	w21, w0, 4, ne
-	bne	.L1604
-	cmp	w21, w25
 	bne	.L1605
+	cmp	w21, w25
+	bne	.L1606
 	ldrh	w2, [x3, 270]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
@@ -10964,29 +10974,29 @@ FtlWrite:
 	cmp	w2, w0
 	csel	w0, w2, w0, ls
 	str	w0, [x29, 152]
-.L1606:
+.L1607:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x29, 152]
 	ldrh	w1, [x0, 270]
 	cmp	w2, w1
-	bne	.L1607
+	bne	.L1608
 	ldr	x0, [x0, 3456]
 	cmp	w21, w25
 	add	x4, x0, x27
-	bne	.L1608
+	bne	.L1609
 	str	x26, [x4, 8]
-.L1609:
+.L1610:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 244]
 	cmp	w1, w0
-	bcc	.L1618
+	bcc	.L1619
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC8
-	mov	w2, 1140
+	mov	w2, 1143
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1618:
+.L1619:
 	ldp	x1, x2, [x29, 112]
 	mov	w0, -3947
 	add	x28, x28, 1
@@ -11003,35 +11013,35 @@ FtlWrite:
 	str	w0, [x22, 12]
 	ldrh	w0, [x20]
 	strh	w0, [x22, 2]
-	b	.L1602
-.L1605:
+	b	.L1603
+.L1606:
 	ldr	w0, [x29, 148]
 	ldrh	w2, [x3, 270]
 	str	wzr, [x29, 168]
 	msub	w2, w21, w2, w0
 	and	w0, w2, 65535
 	str	w0, [x29, 152]
-	b	.L1606
-.L1608:
+	b	.L1607
+.L1609:
 	ldr	w0, [x29, 152]
-.L1640:
+.L1641:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
 	add	x0, x26, x0
 	str	x0, [x4, 8]
-	b	.L1609
-.L1607:
+	b	.L1610
+.L1608:
 	ldr	x1, [x0, 3456]
 	cmp	w21, w25
 	add	x1, x1, x27
-	bne	.L1610
+	bne	.L1611
 	ldr	x0, [x0, 3488]
-.L1639:
+.L1640:
 	str	x0, [x1, 8]
 	ldr	w0, [x29, 188]
 	cmn	w0, #1
-	beq	.L1612
+	beq	.L1613
 	add	x5, x19, :lo12:.LANCHOR0
 	str	w0, [x29, 196]
 	str	w21, [x29, 216]
@@ -11047,7 +11057,7 @@ FtlWrite:
 	ldr	w3, [x29, 192]
 	ldr	x5, [x29, 104]
 	cmn	w3, #1
-	bne	.L1613
+	bne	.L1614
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11056,12 +11066,12 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC125
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1616:
+.L1617:
 	ldr	w0, [x29, 152]
 	cmp	w21, w25
 	lsl	w2, w0, 9
 	add	x0, x19, :lo12:.LANCHOR0
-	bne	.L1617
+	bne	.L1618
 	ldr	x0, [x0, 3456]
 	mov	x1, x26
 	add	x4, x0, x27
@@ -11069,16 +11079,16 @@ FtlWrite:
 	ldr	x3, [x4, 8]
 	lsl	w0, w0, 9
 	add	x0, x3, x0
-.L1641:
+.L1642:
 	bl	ftl_memcpy
-	b	.L1609
-.L1610:
+	b	.L1610
+.L1611:
 	ldr	x0, [x0, 3496]
-	b	.L1639
-.L1613:
+	b	.L1640
+.L1614:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1615
+	beq	.L1616
 	ldr	w0, [x5, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
@@ -11087,17 +11097,17 @@ FtlWrite:
 	add	x0, x0, :lo12:.LC126
 	ldr	w1, [x22, 8]
 	bl	sftl_printk
-.L1615:
+.L1616:
 	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1616
+	beq	.L1617
 	ldr	x1, [x29, 160]
-	mov	w2, 1125
+	mov	w2, 1128
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1616
-.L1612:
+	b	.L1617
+.L1613:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldr	x0, [x1, 3456]
 	ldrh	w2, [x1, 322]
@@ -11105,8 +11115,8 @@ FtlWrite:
 	add	x0, x0, x27
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1616
-.L1617:
+	b	.L1617
+.L1618:
 	ldrh	w1, [x0, 270]
 	ldr	x0, [x0, 3456]
 	add	x4, x0, x27
@@ -11115,27 +11125,27 @@ FtlWrite:
 	ldr	x0, [x4, 8]
 	lsl	w1, w1, 9
 	add	x1, x26, x1
-	b	.L1641
-.L1604:
+	b	.L1642
+.L1605:
 	ldr	x0, [x3, 3456]
 	add	x4, x0, x27
 	ldrh	w0, [x3, 270]
-	b	.L1640
-.L1624:
+	b	.L1641
+.L1625:
 	mov	w20, 256
 	mov	w21, 65535
 	mov	w22, 128
-.L1627:
+.L1628:
 	ldrh	w0, [x19, 184]
 	cmp	w0, w21
-	bne	.L1625
+	bne	.L1626
 	ldrh	w0, [x19, 234]
 	cmp	w0, w21
-	bne	.L1625
+	bne	.L1626
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	bl	FtlGcRefreshBlock
-.L1625:
+.L1626:
 	mov	w1, 1
 	strh	w22, [x19, 3234]
 	mov	w0, w1
@@ -11146,13 +11156,13 @@ FtlWrite:
 	bl	rk_ftl_garbage_collect
 	ldrh	w0, [x19, 236]
 	cmp	w0, 2
-	bhi	.L1626
+	bhi	.L1627
 	subs	w20, w20, #1
-	bne	.L1627
-	b	.L1626
-.L1628:
+	bne	.L1628
+	b	.L1627
+.L1629:
 	mov	w0, -1
-	b	.L1591
+	b	.L1592
 	.size	FtlWrite, .-FtlWrite
 	.align	2
 	.global	sftl_gc
@@ -11191,17 +11201,17 @@ FtlLoadSysInfo:
 	ldrh	w0, [x21, 2704]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1645
-.L1656:
+	bne	.L1646
+.L1657:
 	mov	w0, -1
-.L1644:
+.L1645:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldr	x25, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1645:
+.L1646:
 	add	x23, x21, 2704
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
@@ -11212,8 +11222,8 @@ FtlLoadSysInfo:
 	strh	w0, [x23, 2]
 	ldrsh	w23, [x21, 2704]
 	add	x24, x1, 712
-.L1647:
-	tbz	w19, #31, .L1653
+.L1648:
+	tbz	w19, #31, .L1654
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	mov	w2, 1465
@@ -11221,8 +11231,8 @@ FtlLoadSysInfo:
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-	b	.L1652
-.L1653:
+	b	.L1653
+.L1654:
 	orr	w0, w19, w23, lsl 10
 	str	w0, [x20, 4]
 	ldr	x0, [x21, 3464]
@@ -11233,15 +11243,15 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	x0, [x20, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1648
+	cbz	w7, .L1649
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1648
+	beq	.L1649
 	ldrh	w1, [x21, 322]
 	ldr	x0, [x20, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1648
+	beq	.L1649
 	ldrh	w4, [x21, 2708]
 	mov	w6, w0
 	mov	w5, w7
@@ -11251,41 +11261,41 @@ FtlLoadSysInfo:
 	mov	x1, x24
 	add	x0, x0, :lo12:.LC127
 	bl	sftl_printk
-	cbnz	w19, .L1649
+	cbnz	w19, .L1650
 	ldrh	w0, [x21, 2708]
 	cmp	w23, w0
-	beq	.L1649
+	beq	.L1650
 	ldrh	w19, [x21, 316]
 	sxth	w23, w0
-.L1651:
+.L1652:
 	sub	w19, w19, #1
 	sxth	w19, w19
-	b	.L1647
-.L1649:
+	b	.L1648
+.L1650:
 	mov	w0, -1
 	str	w0, [x20]
-.L1648:
+.L1649:
 	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1651
+	beq	.L1652
 	ldr	x0, [x21, 3464]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1651
+	bne	.L1652
 	ldr	x0, [x21, 3528]
 	ldrh	w1, [x0]
 	mov	w0, 61604
 	cmp	w1, w0
-	bne	.L1651
-.L1652:
+	bne	.L1652
+.L1653:
 	add	x1, x22, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 252]
 	ldrh	w1, [x1, 322]
 	add	x0, x0, 24
 	cmp	x1, x0, lsl 1
-	bcs	.L1655
+	bcs	.L1656
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -11293,7 +11303,7 @@ FtlLoadSysInfo:
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1655:
+.L1656:
 	add	x19, x22, :lo12:.LANCHOR0
 	mov	w2, 48
 	add	x20, x19, 2520
@@ -11320,13 +11330,13 @@ FtlLoadSysInfo:
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1656
+	bne	.L1657
 	ldrh	w1, [x19, 2528]
 	ldrb	w2, [x19, 2530]
 	ldrh	w0, [x19, 266]
 	strh	w1, [x19, 2710]
 	cmp	w2, w0
-	bne	.L1656
+	bne	.L1657
 	ldrh	w0, [x19, 314]
 	ldrh	w2, [x19, 270]
 	ldrh	w3, [x19, 244]
@@ -11342,7 +11352,7 @@ FtlLoadSysInfo:
 	sub	w0, w0, w1
 	udiv	w0, w0, w3
 	strh	w0, [x19, 2700]
-	bls	.L1657
+	bls	.L1658
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC8
@@ -11350,7 +11360,7 @@ FtlLoadSysInfo:
 	add	x1, x1, 712
 	add	x0, x0, :lo12:.LC8
 	bl	sftl_printk
-.L1657:
+.L1658:
 	add	x0, x22, :lo12:.LANCHOR0
 	mov	w3, -1
 	ldrh	w2, [x0, 2536]
@@ -11396,49 +11406,49 @@ FtlLoadSysInfo:
 	ldr	w2, [x0, 2668]
 	str	wzr, [x0, 2648]
 	cmp	w1, w2
-	bls	.L1658
+	bls	.L1659
 	str	w1, [x0, 2668]
-.L1658:
+.L1659:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w1, [x0, 2556]
 	ldr	w2, [x0, 2672]
 	cmp	w1, w2
-	bls	.L1659
+	bls	.L1660
 	str	w1, [x0, 2672]
-.L1659:
+.L1660:
 	mov	w0, 65535
 	cmp	w4, w0
-	beq	.L1660
+	beq	.L1661
 	add	x0, x22, :lo12:.LANCHOR0
 	add	x0, x0, 32
 	bl	make_superblock
-.L1660:
+.L1661:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	x0, x1, 88
 	ldrh	w2, [x1, 88]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1661
+	beq	.L1662
 	bl	make_superblock
-.L1661:
+.L1662:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	x0, x1, 136
 	ldrh	w2, [x1, 136]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1662
+	beq	.L1663
 	bl	make_superblock
-.L1662:
+.L1663:
 	add	x22, x22, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x0, x22, 184
 	ldrh	w2, [x22, 184]
 	cmp	w2, w1
-	beq	.L1663
+	beq	.L1664
 	bl	make_superblock
-.L1663:
+.L1664:
 	mov	w0, 0
-	b	.L1644
+	b	.L1645
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
 	.global	FtlMapTblRecovery
@@ -11483,14 +11493,14 @@ FtlMapTblRecovery:
 	add	x0, x0, :lo12:.LANCHOR1
 	add	x0, x0, 728
 	str	x0, [x29, 104]
-.L1676:
+.L1677:
 	ldr	w0, [x29, 136]
 	cmp	w20, w0
-	bge	.L1695
+	bge	.L1696
 	ldr	w0, [x29, 116]
 	sxtw	x28, w20
 	cmp	w20, w0
-	bne	.L1677
+	bne	.L1678
 	lsl	x0, x28, 1
 	mov	w26, 0
 	add	x1, x24, x0
@@ -11511,22 +11521,22 @@ FtlMapTblRecovery:
 	add	x28, x21, :lo12:.LANCHOR0
 	add	x27, x28, 3728
 	str	w0, [x19, 48]
-.L1678:
+.L1679:
 	ldr	w0, [x29, 120]
 	add	w0, w0, 1
 	cmp	w26, w0
-	blt	.L1681
-.L1695:
+	blt	.L1682
+.L1696:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	x0, x19
 	bl	ftl_free_no_use_map_blk
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x21, 316]
 	cmp	w1, w0
-	bne	.L1683
+	bne	.L1684
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L1683:
+.L1684:
 	mov	x0, x19
 	bl	ftl_map_blk_gc
 	mov	x0, x19
@@ -11539,7 +11549,7 @@ FtlMapTblRecovery:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L1681:
+.L1682:
 	ldr	x0, [x29, 136]
 	mov	w2, 1
 	mov	w1, w2
@@ -11550,15 +11560,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x27, 16]
 	ldr	w8, [x0, 12]
-	cbz	w8, .L1679
+	cbz	w8, .L1680
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1679
+	beq	.L1680
 	ldrh	w1, [x28, 322]
 	ldr	x0, [x27, 8]
 	bl	js_hash
 	cmp	w8, w0
-	beq	.L1679
+	beq	.L1680
 	mov	w5, w0
 	mov	w4, w8
 	mov	w3, w26
@@ -11569,25 +11579,25 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x27]
-.L1679:
+.L1680:
 	ldr	w0, [x27]
 	cmn	w0, #1
-	beq	.L1680
+	beq	.L1681
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1680
+	bls	.L1681
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1680
+	bne	.L1681
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x27, 4]
 	str	w1, [x23, x0]
-.L1680:
+.L1681:
 	add	w7, w26, 1
 	sxth	w26, w7
-	b	.L1678
-.L1677:
+	b	.L1679
+.L1678:
 	add	x26, x21, :lo12:.LANCHOR0
 	lsl	x2, x28, 1
 	add	x0, x26, 3728
@@ -11605,23 +11615,23 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	w0, [x26, 3728]
 	cmn	w0, #1
-	beq	.L1697
+	beq	.L1698
 	ldrh	w1, [x22]
 	ldrh	w0, [x19, 4]
 	cmp	w1, w0
-	bne	.L1697
+	bne	.L1698
 	ldrh	w1, [x22, 8]
 	mov	w0, 64245
 	cmp	w1, w0
-	beq	.L1685
-.L1697:
+	beq	.L1686
+.L1698:
 	add	x26, x21, :lo12:.LANCHOR0
 	mov	w27, 0
 	add	x28, x26, 3728
-.L1686:
+.L1687:
 	ldrh	w0, [x26, 316]
 	cmp	w27, w0
-	bge	.L1693
+	bge	.L1694
 	ldr	x0, [x29, 120]
 	mov	w2, 1
 	mov	w1, w2
@@ -11632,15 +11642,15 @@ FtlMapTblRecovery:
 	bl	FlashReadPages
 	ldr	x0, [x28, 16]
 	ldr	w7, [x0, 12]
-	cbz	w7, .L1690
+	cbz	w7, .L1691
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1690
+	beq	.L1691
 	ldrh	w1, [x26, 322]
 	ldr	x0, [x28, 8]
 	bl	js_hash
 	cmp	w7, w0
-	beq	.L1690
+	beq	.L1691
 	ldr	x1, [x29, 104]
 	mov	w5, w0
 	mov	w4, w7
@@ -11651,49 +11661,49 @@ FtlMapTblRecovery:
 	bl	sftl_printk
 	mov	w0, -1
 	str	w0, [x28]
-.L1690:
+.L1691:
 	ldr	w0, [x28]
 	cmn	w0, #1
-	beq	.L1691
+	beq	.L1692
 	ldrh	w0, [x22, 8]
 	cmp	w25, w0
-	bls	.L1691
+	bls	.L1692
 	ldrh	w2, [x22]
 	ldrh	w1, [x19, 4]
 	cmp	w2, w1
-	bne	.L1691
+	bne	.L1692
 	ubfiz	x0, x0, 2, 16
 	ldr	w1, [x28, 4]
 	str	w1, [x23, x0]
-.L1691:
+.L1692:
 	add	w6, w27, 1
 	sxth	w27, w6
-	b	.L1686
-.L1685:
+	b	.L1687
+.L1686:
 	mov	w0, 0
-.L1687:
+.L1688:
 	ldrh	w1, [x26, 316]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L1689
-.L1693:
+	blt	.L1690
+.L1694:
 	add	w20, w20, 1
 	sxth	w20, w20
-	b	.L1676
-.L1689:
+	b	.L1677
+.L1690:
 	ldr	x2, [x26, 3464]
 	sbfiz	x3, x0, 3, 32
 	ldrh	w1, [x2, x3]
 	cmp	w25, w1
-	bls	.L1688
+	bls	.L1689
 	add	x2, x2, x3
 	ubfiz	x1, x1, 2, 16
 	ldr	w2, [x2, 4]
 	str	w2, [x23, x1]
-.L1688:
+.L1689:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1687
+	b	.L1688
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
 	.global	FtlLoadVonderInfo
@@ -11757,20 +11767,20 @@ FtlSysBlkInit:
 	ldrh	w1, [x21, 2704]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1722
-.L1724:
+	bne	.L1723
+.L1725:
 	mov	w23, -1
-.L1721:
+.L1722:
 	mov	w0, w23
 	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 64
 	ret
-.L1722:
+.L1723:
 	bl	FtlLoadSysInfo
 	mov	w23, w0
-	cbnz	w0, .L1724
+	cbnz	w0, .L1725
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -11784,19 +11794,19 @@ FtlSysBlkInit:
 	mov	w0, 0
 	ldrh	w3, [x21, 350]
 	add	x1, x1, 4
-.L1725:
+.L1726:
 	cmp	w0, w3
-	bge	.L1730
+	bge	.L1731
 	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1726
-.L1730:
+	tbz	w2, #31, .L1727
+.L1731:
 	add	x2, x20, :lo12:.LANCHOR0
 	cmp	w0, w3
 	ldrh	w1, [x2, 2548]
 	add	w1, w1, 1
 	strh	w1, [x2, 2548]
-	bge	.L1736
-.L1727:
+	bge	.L1737
+.L1728:
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x22, x19, 32
 	add	x21, x19, 88
@@ -11832,25 +11842,25 @@ FtlSysBlkInit:
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-	b	.L1731
-.L1726:
+	b	.L1732
+.L1727:
 	add	w0, w0, 1
-	b	.L1725
-.L1736:
+	b	.L1726
+.L1737:
 	ldrh	w0, [x2, 3760]
-	cbnz	w0, .L1727
-.L1731:
+	cbnz	w0, .L1728
+.L1732:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w1, 65535
 	add	x21, x19, 32
 	ldrh	w0, [x19, 32]
 	cmp	w0, w1
-	beq	.L1732
+	beq	.L1733
 	ldrh	w1, [x19, 36]
-	cbnz	w1, .L1732
+	cbnz	w1, .L1733
 	ldrh	w1, [x19, 92]
 	add	x20, x19, 88
-	cbnz	w1, .L1732
+	cbnz	w1, .L1733
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x19, 88]
 	bl	FtlGcRefreshBlock
@@ -11859,9 +11869,9 @@ FtlSysBlkInit:
 	bl	allocate_new_data_superblock
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1732:
+.L1733:
 	bl	FtlVpcCheckAndModify
-	b	.L1721
+	b	.L1722
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	ftl_low_format
@@ -11879,36 +11889,36 @@ ftl_low_format:
 	ldrh	w0, [x0, 248]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1739
+	cbz	w0, .L1740
 	bl	FtlMakeBbt
-.L1739:
+.L1740:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1740:
+.L1741:
 	ldrh	w2, [x1, 270]
 	cmp	w0, w2, lsl 7
-	blt	.L1741
+	blt	.L1742
 	ldrh	w21, [x1, 252]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1742:
+.L1743:
 	ldrh	w0, [x22, 254]
 	cmp	w0, w21
-	bhi	.L1743
+	bhi	.L1744
 	ldrh	w0, [x22, 244]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1744
-.L1748:
+	bge	.L1745
+.L1749:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1745:
+.L1746:
 	ldrh	w0, [x19, 252]
 	cmp	w0, w22
-	bhi	.L1749
+	bhi	.L1750
 	ldrh	w2, [x19, 244]
 	ldr	w1, [x19, 256]
 	ldrh	w0, [x19, 254]
@@ -11921,28 +11931,28 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1750
+	ble	.L1751
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2632]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2700]
-.L1750:
+.L1751:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 306]
-	cbz	w1, .L1752
+	cbz	w1, .L1753
 	ldrh	w5, [x0, 2700]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2700]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1752
+	bge	.L1753
 	add	w1, w1, 32
 	str	w4, [x0, 2632]
 	add	w1, w3, w1
 	strh	w1, [x0, 2700]
-.L1752:
+.L1753:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w22, -1
 	add	x21, x19, 32
@@ -11978,20 +11988,20 @@ ftl_low_format:
 	strh	wzr, [x19, 32]
 	str	wzr, [x19, 2628]
 	bl	ftl_memset
-.L1754:
+.L1755:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1755
+	cbnz	w1, .L1756
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x0, 1, 16
 	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1754
-.L1741:
+	b	.L1755
+.L1742:
 	ldr	x5, [x1, 3488]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
@@ -12001,8 +12011,8 @@ ftl_low_format:
 	str	w2, [x5, x3]
 	ldr	x2, [x1, 3496]
 	str	w4, [x2, x3]
-	b	.L1740
-.L1743:
+	b	.L1741
+.L1744:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -12010,8 +12020,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1742
-.L1744:
+	b	.L1743
+.L1745:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 344]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -12020,17 +12030,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 248]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 252]
-.L1746:
+.L1747:
 	ldrh	w0, [x21, 254]
 	cmp	w0, w19
-	bls	.L1748
+	bls	.L1749
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1746
-.L1749:
+	b	.L1747
+.L1750:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -12038,8 +12048,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1745
-.L1755:
+	b	.L1746
+.L1756:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -12059,20 +12069,20 @@ ftl_low_format:
 	strb	w1, [x19, 96]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1756:
+.L1757:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1757
+	cbnz	w1, .L1758
 	ldr	x1, [x19, 80]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1756
-.L1757:
+	b	.L1757
+.L1758:
 	ldr	w1, [x19, 2668]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
@@ -12095,11 +12105,11 @@ ftl_low_format:
 	str	w0, [x19, 2668]
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1758
+	cbnz	w0, .L1759
 	adrp	x0, .LANCHOR2
 	mov	w1, 1
 	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1758:
+.L1759:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12130,22 +12140,22 @@ sftl_init:
 	ldrh	w0, [x19, 248]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbnz	w0, .L1767
+	cbnz	w0, .L1768
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1767
+	cbnz	w0, .L1768
 	mov	w0, 1
 	str	w0, [x20, #:lo12:.LANCHOR2]
 	ldrh	w0, [x19, 236]
 	cmp	w0, 15
-	bhi	.L1767
+	bhi	.L1768
 	mov	w19, 8129
-.L1766:
+.L1767:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
 	subs	w19, w19, #1
-	bne	.L1766
-.L1767:
+	bne	.L1767
+.L1768:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -12166,33 +12176,33 @@ FtlWriteToIDB:
 	stp	x19, x20, [sp, 16]
 	cmp	w25, 63
 	stp	x27, x28, [sp, 80]
-	bls	.L1771
+	bls	.L1772
 	mov	w19, w0
 	cmp	w0, 575
-	bls	.L1772
-.L1771:
+	bls	.L1773
+.L1772:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w1, [x0, 3984]
-	cbnz	w1, .L1773
-.L1839:
+	cbnz	w1, .L1774
+.L1840:
 	mov	w20, 0
-	b	.L1770
-.L1773:
+	b	.L1771
+.L1774:
 	ldr	x26, [x0, 3992]
 	mov	w1, 35899
 	movk	w1, 0xfcdc, lsl 16
 	ldr	w2, [x26]
 	cmp	w2, w1
-	bne	.L1775
+	bne	.L1776
 	ldrh	w1, [x0, 10]
 	mov	x0, 262140
 	mov	w20, 65535
 	add	x2, x26, x0
 	mov	w3, 4097
 	mov	w0, 0
-.L1779:
+.L1780:
 	ldr	w4, [x2]
-	cbnz	w4, .L1776
+	cbnz	w4, .L1777
 	ldr	w4, [x26, w0, uxtw 2]
 	add	w0, w0, 1
 	str	w4, [x2], -4
@@ -12200,13 +12210,13 @@ FtlWriteToIDB:
 	sub	w20, w20, #1
 	csel	w0, w0, wzr, cc
 	cmp	w20, 4096
-	bne	.L1779
+	bne	.L1780
 	mov	w20, 512
-	b	.L1778
-.L1776:
+	b	.L1779
+.L1777:
 	add	w20, w20, 127
 	lsr	w20, w20, 7
-.L1778:
+.L1779:
 	ubfiz	w0, w1, 2, 14
 	add	w22, w20, 4
 	add	x19, x21, :lo12:.LANCHOR0
@@ -12216,7 +12226,7 @@ FtlWriteToIDB:
 	lsl	w0, w20, 7
 	str	w0, [x29, 128]
 	add	w22, w22, 1
-.L1801:
+.L1802:
 	ldr	x0, [x19, 4000]
 	mov	w1, 0
 	mov	x2, 512
@@ -12224,26 +12234,26 @@ FtlWriteToIDB:
 	ldrh	w28, [x19, 10]
 	ldr	x1, [x19, 3400]
 	mul	w24, w28, w23
-	cbz	x1, .L1809
+	cbz	x1, .L1810
 	ldr	x0, [x19, 3408]
 	mov	w25, 6
 	cmp	x0, 0
 	mov	w0, 9
 	csel	w25, w25, w0, eq
-.L1780:
+.L1781:
 	ldr	x3, [x19, 3376]
 	mov	w1, w24
 	mov	w0, 0
 	blr	x3
 	cmp	w22, 1
-	beq	.L1781
+	beq	.L1782
 	ldr	x2, [x19, 3376]
 	add	w1, w28, w24
 	mov	w0, 0
 	blr	x2
-.L1781:
+.L1782:
 	cmp	w25, 9
-	bne	.L1811
+	bne	.L1812
 	ldr	x27, [x19, 4000]
 	mov	w2, 1024
 	mov	w1, 0
@@ -12266,29 +12276,29 @@ FtlWriteToIDB:
 	str	wzr, [x27, 12]
 	bl	js_hash
 	str	w0, [x27, 8]
-.L1782:
+.L1783:
 	mul	w0, w22, w28
 	mov	x6, x26
 	str	w0, [x29, 136]
 	mov	x28, 0
 	add	w0, w24, 1
 	str	w0, [x29, 132]
-.L1783:
+.L1784:
 	ldr	w0, [x29, 136]
 	mov	w1, w28
 	cmp	w28, w0
-	bcs	.L1790
+	bcs	.L1791
 	cmp	w25, 9
-	bne	.L1784
+	bne	.L1785
 	ldr	w0, [x29, 132]
 	add	w0, w0, w1
-.L1837:
+.L1838:
 	str	w0, [x29, 144]
 	mov	w0, 61424
 	str	w0, [x29, 148]
 	cmp	w1, 0
 	ccmp	w25, 9, 0, eq
-	bne	.L1786
+	bne	.L1787
 	ldr	x1, [x19, 3400]
 	add	x7, x19, 3368
 	str	x6, [x29, 104]
@@ -12312,8 +12322,8 @@ FtlWriteToIDB:
 	ldr	w1, [x29, 120]
 	ldr	x6, [x29, 104]
 	cmn	w1, #1
-	bne	.L1787
-.L1790:
+	bne	.L1788
+.L1791:
 	ldrb	w0, [x19, 14]
 	str	w0, [x29, 120]
 	ldrh	w0, [x19, 10]
@@ -12322,23 +12332,23 @@ FtlWriteToIDB:
 	str	w1, [x29, 136]
 	add	x1, x19, 3368
 	ldr	x2, [x1, 32]
-	cbnz	x2, .L1788
+	cbnz	x2, .L1789
 	mov	w1, 6
-.L1838:
+.L1839:
 	mul	w0, w22, w0
 	mov	x28, 0
 	mov	w27, 61424
 	str	w0, [x29, 112]
 	str	w1, [x29, 132]
-.L1792:
+.L1793:
 	ldr	w0, [x29, 112]
 	mov	w1, w28
 	cmp	w28, w0
-	bcs	.L1796
+	bcs	.L1797
 	ldr	w0, [x29, 132]
 	cmp	w28, 0
 	ccmp	w0, 9, 0, eq
-	bne	.L1793
+	bne	.L1794
 	ldr	x1, [x19, 3400]
 	mov	w0, 70
 	blr	x1
@@ -12361,13 +12371,13 @@ FtlWriteToIDB:
 	mov	w1, 18766
 	movk	w1, 0x464e, lsl 16
 	cmp	w0, w1
-	beq	.L1794
-.L1796:
+	beq	.L1795
+.L1797:
 	ldr	x0, [x19, 4000]
 	mov	x1, x26
 	mov	w24, 0
 	mov	x2, x0
-.L1795:
+.L1796:
 	mov	x25, x2
 	mov	x28, x1
 	add	x2, x2, 4
@@ -12375,7 +12385,7 @@ FtlWriteToIDB:
 	ldr	w4, [x25]
 	ldr	w3, [x28]
 	cmp	w4, w3
-	beq	.L1798
+	beq	.L1799
 	mov	x2, 512
 	mov	w1, 0
 	bl	memset
@@ -12391,22 +12401,22 @@ FtlWriteToIDB:
 	ldr	x2, [x19, 3376]
 	mul	w1, w1, w23
 	blr	x2
-.L1799:
+.L1800:
 	add	w23, w23, w22
 	cmp	w23, 15
-	bls	.L1801
+	bls	.L1802
 	ldr	w0, [x29, 140]
-	cbnz	w0, .L1802
-.L1775:
+	cbnz	w0, .L1803
+.L1776:
 	mov	w20, -1
-.L1802:
+.L1803:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldr	x0, [x21, 3992]
 	str	wzr, [x21, 3984]
 	bl	kfree
 	ldr	x0, [x21, 4000]
 	bl	kfree
-.L1770:
+.L1771:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12415,17 +12425,17 @@ FtlWriteToIDB:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1809:
+.L1810:
 	mov	w25, 6
-	b	.L1780
-.L1811:
+	b	.L1781
+.L1812:
 	mov	x27, 0
-	b	.L1782
-.L1784:
+	b	.L1783
+.L1785:
 	add	w0, w1, w24
 	lsl	w0, w0, 2
-	b	.L1837
-.L1786:
+	b	.L1838
+.L1787:
 	ldr	x7, [x19, 3384]
 	add	x3, x29, 144
 	mov	x2, x6
@@ -12434,20 +12444,20 @@ FtlWriteToIDB:
 	str	x6, [x29, 120]
 	blr	x7
 	cmn	w0, #1
-	beq	.L1790
+	beq	.L1791
 	ldr	x6, [x29, 120]
 	add	x6, x6, 2048
-.L1787:
-	add	x28, x28, 1
-	b	.L1783
 .L1788:
+	add	x28, x28, 1
+	b	.L1784
+.L1789:
 	ldr	x1, [x1, 40]
 	mov	w24, 6
 	cmp	x1, 0
 	mov	w1, 9
 	csel	w1, w24, w1, eq
-	b	.L1838
-.L1793:
+	b	.L1839
+.L1794:
 	ldr	x6, [x19, 3392]
 	add	x3, x29, 144
 	ldr	w0, [x29, 136]
@@ -12456,30 +12466,30 @@ FtlWriteToIDB:
 	mov	w0, 0
 	blr	x6
 	cmn	w0, #1
-	beq	.L1796
+	beq	.L1797
 	ldr	w0, [x29, 148]
 	cmp	w0, w27
-	bne	.L1796
+	bne	.L1797
 	add	x25, x25, 2048
-.L1794:
+.L1795:
 	add	x28, x28, 1
-	b	.L1792
-.L1798:
+	b	.L1793
+.L1799:
 	ldr	w3, [x29, 128]
 	add	w24, w24, 1
 	cmp	w24, w3
-	bne	.L1795
+	bne	.L1796
 	ldr	w0, [x29, 140]
 	add	w0, w0, 1
 	str	w0, [x29, 140]
 	cmp	w0, 5
-	bls	.L1799
-	b	.L1802
-.L1772:
+	bls	.L1800
+	b	.L1803
+.L1773:
 	mov	w22, w1
 	mov	x23, x2
 	cmp	w0, 64
-	bne	.L1803
+	bne	.L1804
 	add	x20, x21, :lo12:.LANCHOR0
 	mov	w0, 262144
 	bl	ftl_malloc
@@ -12489,32 +12499,32 @@ FtlWriteToIDB:
 	mov	x1, x0
 	ldr	x0, [x20, 3992]
 	str	x1, [x20, 4000]
-	cbz	x0, .L1804
-	cbz	x1, .L1804
+	cbz	x0, .L1805
+	cbz	x1, .L1805
 	mov	w1, 1
 	mov	w2, 262144
 	str	w1, [x20, 3984]
 	mov	w1, 0
 	bl	ftl_memset
-.L1803:
+.L1804:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldr	w0, [x21, 3984]
-	cbz	w0, .L1839
+	cbz	w0, .L1840
 	cmp	w19, 63
 	ldr	x1, [x21, 3992]
-	bhi	.L1806
+	bhi	.L1807
 	mov	w0, 64
 	sub	w19, w0, w19
 	sub	w22, w22, w19
 	ubfiz	x19, x19, 9, 25
 	add	x23, x23, x19
 	mov	x20, x1
-.L1807:
+.L1808:
 	cmp	w25, 575
-	bls	.L1808
+	bls	.L1809
 	sub	w22, w22, w24
 	sub	w22, w22, #446
-.L1808:
+.L1809:
 	mov	w4, w22
 	mov	x3, x20
 	mov	w2, 262144
@@ -12525,20 +12535,20 @@ FtlWriteToIDB:
 	mov	x1, x23
 	mov	x0, x20
 	bl	ftl_memcpy
-	b	.L1839
-.L1804:
+	b	.L1840
+.L1805:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 752
 	adrp	x0, .LC131
 	add	x0, x0, :lo12:.LC131
 	bl	sftl_printk
-	b	.L1803
-.L1806:
+	b	.L1804
+.L1807:
 	lsl	w20, w19, 7
 	sub	w20, w20, #8192
 	add	x20, x1, x20, lsl 2
-	b	.L1807
+	b	.L1808
 	.size	FtlWriteToIDB, .-FtlWriteToIDB
 	.align	2
 	.global	sftl_write
@@ -12569,12 +12579,12 @@ rk_sftl_vendor_dev_ops_register:
 	adrp	x2, .LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR0
 	ldr	x3, [x2, 4008]
-	cbnz	x3, .L1844
+	cbnz	x3, .L1845
 	str	x0, [x2, 4008]
 	mov	w0, 0
 	str	x1, [x2, 4016]
 	ret
-.L1844:
+.L1845:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -12593,38 +12603,38 @@ rk_sftl_vendor_storage_init:
 	stp	x25, x26, [sp, 64]
 	bl	ftl_malloc
 	str	x0, [x22, 4024]
-	cbz	x0, .L1851
+	cbz	x0, .L1852
 	mov	w26, 22084
 	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
 	movk	w26, 0x524b, lsl 16
-.L1849:
+.L1850:
 	ldr	x3, [x22, 4008]
 	mov	w1, 128
 	ldr	x2, [x22, 4024]
 	lsl	w0, w23, 7
 	blr	x3
 	mov	w21, w0
-	cbnz	w0, .L1847
+	cbnz	w0, .L1848
 	ldr	x19, [x22, 4024]
 	ldr	w0, [x19]
 	cmp	w0, w26
-	bne	.L1848
+	bne	.L1849
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1848
+	bne	.L1849
 	cmp	w0, w24
-	bls	.L1848
+	bls	.L1849
 	mov	w25, w23
 	mov	w24, w0
-.L1848:
+.L1849:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1849
-	cbz	w24, .L1850
+	bne	.L1850
+	cbz	w24, .L1851
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
@@ -12632,15 +12642,15 @@ rk_sftl_vendor_storage_init:
 	lsl	w0, w25, 7
 	blr	x3
 	mov	w21, w0
-	cbz	w0, .L1845
-.L1847:
+	cbz	w0, .L1846
+.L1848:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, -1
 	ldr	x0, [x20, 4024]
 	bl	kfree
 	str	xzr, [x20, 4024]
-	b	.L1845
-.L1850:
+	b	.L1846
+.L1851:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -12653,7 +12663,7 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1845:
+.L1846:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -12661,9 +12671,9 @@ rk_sftl_vendor_storage_init:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1851:
+.L1852:
 	mov	w21, -12
-	b	.L1845
+	b	.L1846
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
@@ -12671,20 +12681,20 @@ rk_sftl_vendor_storage_init:
 rk_sftl_vendor_read:
 	adrp	x3, .LANCHOR0+4024
 	ldr	x4, [x3, #:lo12:.LANCHOR0+4024]
-	cbz	x4, .L1859
+	cbz	x4, .L1860
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1856:
+.L1857:
 	cmp	w3, w6
-	bcc	.L1858
-.L1859:
+	bcc	.L1859
+.L1860:
 	mov	w0, -1
 	ret
-.L1858:
+.L1859:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1857
+	bne	.L1858
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -12702,9 +12712,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1857:
+.L1858:
 	add	w3, w3, 1
-	b	.L1856
+	b	.L1857
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -12720,7 +12730,7 @@ rk_sftl_vendor_write:
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
 	ldr	x19, [x3, 4024]
-	cbz	x19, .L1879
+	cbz	x19, .L1880
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -12729,12 +12739,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1866:
+.L1867:
 	cmp	w20, w3
-	bcc	.L1874
+	bcc	.L1875
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1879
+	bhi	.L1880
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -12754,11 +12764,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1881
-.L1874:
+	b	.L1882
+.L1875:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1867
+	bne	.L1868
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -12766,17 +12776,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1868
+	bls	.L1869
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1879
+	bhi	.L1880
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1869:
+.L1870:
 	cmp	w20, w26
-	bcc	.L1870
+	bcc	.L1871
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -12793,7 +12803,7 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1881:
+.L1882:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
 	add	x23, x23, :lo12:.LANCHOR0
@@ -12812,7 +12822,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1864:
+.L1865:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -12820,7 +12830,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1870:
+.L1871:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -12844,21 +12854,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1869
-.L1868:
+	b	.L1870
+.L1869:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1881
-.L1867:
+	b	.L1882
+.L1868:
 	add	w20, w20, 1
-	b	.L1866
-.L1879:
+	b	.L1867
+.L1880:
 	mov	w0, -1
-	b	.L1864
+	b	.L1865
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12868,233 +12878,159 @@ rk_sftl_vendor_storage_ioctl:
 	mov	w0, 4096
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	w20, w1
-	stp	x21, x22, [sp, 32]
-	mov	x21, x2
+	mov	x20, x2
+	str	x21, [sp, 32]
+	mov	w21, w1
 	bl	ftl_malloc
-	cbz	x0, .L1898
+	cbz	x0, .L1900
 	mov	w1, 30209
 	mov	x19, x0
 	movk	w1, 0x4004, lsl 16
-	cmp	w20, w1
-	beq	.L1885
-	add	w1, w1, 1
-	cmp	w20, w1
+	cmp	w21, w1
 	beq	.L1886
-.L1908:
+	add	w1, w1, 1
+	cmp	w21, w1
+	beq	.L1887
+.L1910:
 	mov	x20, -14
-	b	.L1884
-.L1885:
-#APP
-// 19 "./arch/arm64/include/asm/current.h" 1
-	mrs x20, sp_el0
-// 0 "" 2
-#NO_APP
-	ldr	x3, [x20, 8]
-	mov	x1, x21
-	mov	x2, x3
+	b	.L1885
+.L1886:
 #APP
-// 80 "./arch/arm64/include/asm/uaccess.h" 1
-		adds	x1, x1, 8
-	csel	x2, xzr, x2, hi
-	csinv	x1, x1, xzr, cc
-	sbcs	xzr, x1, x2
-	cset	x1, ls
-
+// 21 "./arch/arm64/include/asm/current.h" 1
+	mrs x21, sp_el0
 // 0 "" 2
 #NO_APP
-	cbz	x1, .L1900
+	mov	x1, x20
+	ldr	x2, [x21, 8]
 #APP
-// 246 "./arch/arm64/include/asm/uaccess.h" 1
-		bics	xzr, x21, x3
-	csel	x1, x21, xzr, eq
-
-// 0 "" 2
-// 253 "./arch/arm64/include/asm/uaccess.h" 1
-	hint #20
+// 413 "./arch/arm64/include/asm/uaccess.h" 1
+	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
+	cbz	x3, .L1888
 	mov	x2, 8
+	mov	x1, x20
 	bl	__arch_copy_from_user
-	mov	x2, x0
-	cbz	x0, .L1888
-.L1887:
-	sub	x0, x19, x2
-	mov	w1, 0
-	add	x0, x0, 8
-	bl	memset
-	mov	x2, x21
+	cbz	x0, .L1911
+.L1889:
+	mov	x2, x20
 	mov	w1, 256
-.L1910:
+.L1915:
 	adrp	x0, .LC133
 	add	x0, x0, :lo12:.LC133
 	bl	sftl_printk
-	b	.L1908
-.L1900:
-	mov	x2, 8
-	b	.L1887
-.L1889:
+	b	.L1910
+.L1888:
+	str	xzr, [x0]
+	b	.L1889
+.L1911:
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	beq	.L1891
+.L1892:
+	mov	x20, -1
+.L1885:
+	mov	x0, x19
+	bl	kfree
+.L1883:
+	mov	x0, x20
+	ldr	x21, [sp, 32]
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 48
+	ret
+.L1891:
+	ldrh	w2, [x19, 6]
+	add	x1, x19, 8
+	ldrh	w0, [x19, 4]
+	bl	rk_sftl_vendor_read
+	cmn	w0, #1
+	beq	.L1892
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
-	mov	x0, x21
-	ldr	x3, [x20, 8]
-	mov	x1, x3
-#APP
-// 80 "./arch/arm64/include/asm/uaccess.h" 1
-		adds	x0, x0, x2
-	csel	x1, xzr, x1, hi
-	csinv	x0, x0, xzr, cc
-	sbcs	xzr, x0, x1
-	cset	x0, ls
-
-// 0 "" 2
-#NO_APP
-	cbz	x0, .L1908
+	mov	x0, x20
+	ldr	x1, [x21, 8]
 #APP
-// 246 "./arch/arm64/include/asm/uaccess.h" 1
-		bics	xzr, x21, x3
-	csel	x0, x21, xzr, eq
-
-// 0 "" 2
-// 253 "./arch/arm64/include/asm/uaccess.h" 1
-	hint #20
+// 423 "./arch/arm64/include/asm/uaccess.h" 1
+	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	mov	x20, 0
+	cbz	x3, .L1910
+	mov	x0, x20
 	mov	x1, x19
+	mov	x20, 0
 	bl	__arch_copy_to_user
-	cbz	x0, .L1884
-	b	.L1908
-.L1886:
-#APP
-// 19 "./arch/arm64/include/asm/current.h" 1
-	mrs x22, sp_el0
-// 0 "" 2
-#NO_APP
-	ldr	x3, [x22, 8]
-	mov	x1, x21
-	mov	x2, x3
+	cbz	x0, .L1885
+	b	.L1910
+.L1887:
 #APP
-// 80 "./arch/arm64/include/asm/uaccess.h" 1
-		adds	x1, x1, 8
-	csel	x2, xzr, x2, hi
-	csinv	x1, x1, xzr, cc
-	sbcs	xzr, x1, x2
-	cset	x1, ls
-
+// 21 "./arch/arm64/include/asm/current.h" 1
+	mrs x21, sp_el0
 // 0 "" 2
 #NO_APP
-	cbz	x1, .L1902
+	mov	x1, x20
+	ldr	x2, [x21, 8]
 #APP
-// 246 "./arch/arm64/include/asm/uaccess.h" 1
-		bics	xzr, x21, x3
-	csel	x1, x21, xzr, eq
-
-// 0 "" 2
-// 253 "./arch/arm64/include/asm/uaccess.h" 1
-	hint #20
+// 413 "./arch/arm64/include/asm/uaccess.h" 1
+	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
+	cbz	x3, .L1894
 	mov	x2, 8
+	mov	x1, x20
 	bl	__arch_copy_from_user
-	mov	x2, x0
-	cbz	x0, .L1892
-.L1891:
-	sub	x0, x19, x2
-	mov	w1, 0
-	add	x0, x0, 8
-	bl	memset
-	mov	x2, x21
+	cbz	x0, .L1912
+.L1895:
+	mov	x2, x20
 	mov	w1, 276
-	b	.L1910
-.L1902:
-	mov	x2, 8
-	b	.L1891
-.L1903:
-	mov	x0, x20
-	b	.L1894
-.L1898:
-	mov	x20, -1
-	b	.L1882
-.L1888:
+	b	.L1915
+.L1894:
+	str	xzr, [x0]
+	b	.L1895
+.L1912:
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1893
+	bne	.L1892
 	ldrh	w2, [x19, 6]
-	add	x1, x19, 8
-	ldrh	w0, [x19, 4]
-	bl	rk_sftl_vendor_read
-	cmn	w0, #1
-	bne	.L1889
-.L1893:
-	mov	x20, -1
-.L1884:
-	mov	x0, x19
-	bl	kfree
-.L1882:
+	cmp	w2, 4087
+	bhi	.L1892
+	add	w2, w2, 8
 	mov	x0, x20
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 48
-	ret
-.L1892:
-	ldr	w1, [x19]
-	mov	w0, 17745
-	movk	w0, 0x5652, lsl 16
-	cmp	w1, w0
-	bne	.L1893
-	ldrh	w20, [x19, 6]
-	cmp	w20, 4087
-	bhi	.L1893
-	ldr	x2, [x22, 8]
-	add	w20, w20, 8
-	sxtw	x20, w20
-	mov	x0, x21
-	mov	x1, x2
-#APP
-// 80 "./arch/arm64/include/asm/uaccess.h" 1
-		adds	x0, x0, x20
-	csel	x1, xzr, x1, hi
-	csinv	x0, x0, xzr, cc
-	sbcs	xzr, x0, x1
-	cset	x0, ls
-
-// 0 "" 2
-#NO_APP
-	cbz	x0, .L1903
+	sxtw	x2, w2
+	ldr	x1, [x21, 8]
 #APP
-// 246 "./arch/arm64/include/asm/uaccess.h" 1
-		bics	xzr, x21, x2
-	csel	x1, x21, xzr, eq
-
-// 0 "" 2
-// 253 "./arch/arm64/include/asm/uaccess.h" 1
-	hint #20
+// 413 "./arch/arm64/include/asm/uaccess.h" 1
+	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	mov	x2, x20
+	cbz	x3, .L1897
+	mov	x1, x20
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbz	x0, .L1895
-.L1894:
-	sub	x20, x20, x0
-	mov	x2, x0
+	cbz	x0, .L1913
+.L1898:
+	mov	x2, x20
+	mov	w1, 283
+	b	.L1915
+.L1897:
 	mov	w1, 0
-	add	x0, x19, x20
+	mov	x0, x19
 	bl	memset
-	mov	x2, x21
-	mov	w1, 283
-	b	.L1910
-.L1895:
+	b	.L1898
+.L1913:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1884
+	b	.L1885
+.L1900:
+	mov	x20, -1
+	b	.L1883
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -13261,193 +13197,193 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.5939, %object
-	.size	__func__.5939, 17
-__func__.5939:
+	.type	__func__.3803, %object
+	.size	__func__.3803, 17
+__func__.3803:
 	.string	"INSERT_DATA_LIST"
 	.zero	7
-	.type	__func__.5934, %object
-	.size	__func__.5934, 17
-__func__.5934:
+	.type	__func__.3798, %object
+	.size	__func__.3798, 17
+__func__.3798:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.5970, %object
-	.size	__func__.5970, 17
-__func__.5970:
+	.type	__func__.3834, %object
+	.size	__func__.3834, 17
+__func__.3834:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.6002, %object
-	.size	__func__.6002, 22
-__func__.6002:
+	.type	__func__.3866, %object
+	.size	__func__.3866, 22
+__func__.3866:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.6109, %object
-	.size	__func__.6109, 22
-__func__.6109:
+	.type	__func__.3973, %object
+	.size	__func__.3973, 22
+__func__.3973:
 	.string	"select_l2p_ram_region"
 	.zero	2
-	.type	__func__.6436, %object
-	.size	__func__.6436, 16
-__func__.6436:
+	.type	__func__.4300, %object
+	.size	__func__.4300, 16
+__func__.4300:
 	.string	"make_superblock"
-	.type	__func__.6611, %object
-	.size	__func__.6611, 19
-__func__.6611:
+	.type	__func__.4475, %object
+	.size	__func__.4475, 19
+__func__.4475:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.13423, %object
-	.size	__func__.13423, 17
-__func__.13423:
+	.type	__func__.16146, %object
+	.size	__func__.16146, 17
+__func__.16146:
 	.string	"FlashEraseBlocks"
 	.zero	7
-	.type	__func__.6044, %object
-	.size	__func__.6044, 26
-__func__.6044:
+	.type	__func__.3908, %object
+	.size	__func__.3908, 26
+__func__.3908:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.5549, %object
-	.size	__func__.5549, 11
-__func__.5549:
+	.type	__func__.3413, %object
+	.size	__func__.3413, 11
+__func__.3413:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.5776, %object
-	.size	__func__.5776, 14
-__func__.5776:
+	.type	__func__.3640, %object
+	.size	__func__.3640, 14
+__func__.3640:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
-	.type	__func__.6457, %object
-	.size	__func__.6457, 18
-__func__.6457:
+	.type	__func__.4321, %object
+	.size	__func__.4321, 18
+__func__.4321:
 	.string	"SupperBlkListInit"
 	.zero	6
-	.type	__func__.13380, %object
-	.size	__func__.13380, 15
-__func__.13380:
+	.type	__func__.16103, %object
+	.size	__func__.16103, 15
+__func__.16103:
 	.string	"FlashReadPages"
 	.zero	1
-	.type	__func__.6221, %object
-	.size	__func__.6221, 14
-__func__.6221:
+	.type	__func__.4085, %object
+	.size	__func__.4085, 14
+__func__.4085:
 	.string	"FtlScanSysBlk"
 	.zero	2
-	.type	__func__.5819, %object
-	.size	__func__.5819, 11
-__func__.5819:
+	.type	__func__.3683, %object
+	.size	__func__.3683, 11
+__func__.3683:
 	.string	"FtlLoadBbt"
 	.zero	5
-	.type	__func__.13399, %object
-	.size	__func__.13399, 15
-__func__.13399:
+	.type	__func__.16122, %object
+	.size	__func__.16122, 15
+__func__.16122:
 	.string	"FlashProgPages"
 	.zero	1
-	.type	__func__.6583, %object
-	.size	__func__.6583, 25
-__func__.6583:
+	.type	__func__.4447, %object
+	.size	__func__.4447, 25
+__func__.4447:
 	.string	"allocate_data_superblock"
 	.zero	7
-	.type	__func__.6624, %object
-	.size	__func__.6624, 16
-__func__.6624:
+	.type	__func__.4488, %object
+	.size	__func__.4488, 16
+__func__.4488:
 	.string	"update_vpc_list"
-	.type	__func__.6631, %object
-	.size	__func__.6631, 20
-__func__.6631:
+	.type	__func__.4495, %object
+	.size	__func__.4495, 20
+__func__.4495:
 	.string	"decrement_vpc_count"
 	.zero	4
-	.type	__func__.6070, %object
-	.size	__func__.6070, 31
-__func__.6070:
+	.type	__func__.3934, %object
+	.size	__func__.3934, 31
+__func__.3934:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.6084, %object
-	.size	__func__.6084, 16
-__func__.6084:
+	.type	__func__.3948, %object
+	.size	__func__.3948, 16
+__func__.3948:
 	.string	"FtlMapWritePage"
-	.type	__func__.6011, %object
-	.size	__func__.6011, 16
-__func__.6011:
+	.type	__func__.3875, %object
+	.size	__func__.3875, 16
+__func__.3875:
 	.string	"load_l2p_region"
-	.type	__func__.6055, %object
-	.size	__func__.6055, 15
-__func__.6055:
+	.type	__func__.3919, %object
+	.size	__func__.3919, 15
+__func__.3919:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.6126, %object
-	.size	__func__.6126, 9
-__func__.6126:
+	.type	__func__.3990, %object
+	.size	__func__.3990, 9
+__func__.3990:
 	.string	"log2phys"
 	.zero	7
-	.type	__func__.6345, %object
-	.size	__func__.6345, 16
-__func__.6345:
+	.type	__func__.4209, %object
+	.size	__func__.4209, 16
+__func__.4209:
 	.string	"FtlReUsePrevPpa"
-	.type	__func__.6379, %object
-	.size	__func__.6379, 22
-__func__.6379:
+	.type	__func__.4243, %object
+	.size	__func__.4243, 22
+__func__.4243:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.6498, %object
-	.size	__func__.6498, 14
-__func__.6498:
+	.type	__func__.4362, %object
+	.size	__func__.4362, 14
+__func__.4362:
 	.string	"ftl_check_vpc"
 	.zero	2
-	.type	__func__.6199, %object
-	.size	__func__.6199, 15
-__func__.6199:
+	.type	__func__.4063, %object
+	.size	__func__.4063, 15
+__func__.4063:
 	.string	"FtlVpcTblFlush"
 	.zero	1
-	.type	__func__.6482, %object
-	.size	__func__.6482, 21
-__func__.6482:
+	.type	__func__.4346, %object
+	.size	__func__.4346, 21
+__func__.4346:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.6604, %object
-	.size	__func__.6604, 29
-__func__.6604:
+	.type	__func__.4468, %object
+	.size	__func__.4468, 29
+__func__.4468:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.5673, %object
-	.size	__func__.5673, 13
-__func__.5673:
+	.type	__func__.3537, %object
+	.size	__func__.3537, 13
+__func__.3537:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.6701, %object
-	.size	__func__.6701, 19
-__func__.6701:
+	.type	__func__.4565, %object
+	.size	__func__.4565, 19
+__func__.4565:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.6814, %object
-	.size	__func__.6814, 23
-__func__.6814:
+	.type	__func__.4678, %object
+	.size	__func__.4678, 23
+__func__.4678:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.5701, %object
-	.size	__func__.5701, 9
-__func__.5701:
+	.type	__func__.3565, %object
+	.size	__func__.3565, 9
+__func__.3565:
 	.string	"FtlWrite"
 	.zero	7
-	.type	__func__.6277, %object
-	.size	__func__.6277, 15
-__func__.6277:
+	.type	__func__.4141, %object
+	.size	__func__.4141, 15
+__func__.4141:
 	.string	"FtlLoadSysInfo"
 	.zero	1
-	.type	__func__.6299, %object
-	.size	__func__.6299, 18
-__func__.6299:
+	.type	__func__.4163, %object
+	.size	__func__.4163, 18
+__func__.4163:
 	.string	"FtlMapTblRecovery"
 	.zero	6
-	.type	__func__.13538, %object
-	.size	__func__.13538, 14
-__func__.13538:
+	.type	__func__.16261, %object
+	.size	__func__.16261, 14
+__func__.16261:
 	.string	"FtlWriteToIDB"
 	.zero	2
 	.type	rk_sftl_vendor_storage_fops, %object
-	.size	rk_sftl_vendor_storage_fops, 256
+	.size	rk_sftl_vendor_storage_fops, 216
 rk_sftl_vendor_storage_fops:
-	.zero	72
+	.zero	64
 	.xword	rk_sftl_vendor_storage_ioctl
 	.xword	rk_sftl_vendor_storage_ioctl
-	.zero	168
+	.zero	136
 	.data
 	.align	3
 	.set	.LANCHOR2,. + 0
diff --git a/drivers/rkflash/sfc_nand.c b/drivers/rkflash/sfc_nand.c
index 24b3bdc41fd3..9e377c4d671c 100644
--- a/drivers/rkflash/sfc_nand.c
+++ b/drivers/rkflash/sfc_nand.c
@@ -59,7 +59,15 @@ static struct nand_info spi_nand_tbl[] = {
 	/* EM73C044SNC-G */
 	{0xD522, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0x0, 4, 20, NULL},
 	/* EM73D044SNB-G */
-	{0xD520, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 8, 0xB0, 0x0, 4, 20, NULL}
+	{0xD520, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 8, 0xB0, 0x0, 4, 20, NULL},
+	/* ATO25D1GA */
+	{0x9B12, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x40, 18, 1, 0xB0, 0x0, 20, 36, &sfc_nand_ecc_status_sp1},
+	/* XT26G02B */
+	{0x0BF2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 1, 0xB0, 0x0, 8, 12, &sfc_nand_ecc_status_sp4},
+	/* XT26G01B */
+	{0x0BF1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xB0, 0x0, 8, 12, &sfc_nand_ecc_status_sp4},
+	/* HYF4GQ4UAACBE */
+	{0xC9D4, 8, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 20, 4, 0xB0, 0, 32, 64, NULL},
 };
 
 static u8 id_byte[8];
@@ -382,15 +390,20 @@ static u32 sfc_nand_prog_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 	union SFCCMD_DATA sfcmd;
 	union SFCCTRL_DATA sfctrl;
 	u8 status;
-	u32 data_sz = 2048;
+	u32 sec_per_page = p_nand_info->sec_per_page;
 	u32 spare_offs_1 = p_nand_info->spare_offs_1;
 	u32 spare_offs_2 = p_nand_info->spare_offs_2;
-
-	memcpy(gp_page_buf, p_data, data_sz);
-	ftl_memset(&gp_page_buf[data_sz / 4], 0xff, 64);
-	gp_page_buf[(data_sz + spare_offs_1) / 4] = p_spare[0];
-	gp_page_buf[(data_sz + spare_offs_2) / 4] = p_spare[1];
-
+	u32 data_size = sec_per_page * 512;
+
+	PRINT_SFC_I("%s %x %x %x\n", __func__, addr, p_data[0], p_spare[0]);
+	memcpy(gp_page_buf, p_data, data_size);
+	ftl_memset(&gp_page_buf[data_size / 4], 0xff, sec_per_page * 16);
+	gp_page_buf[(data_size + spare_offs_1) / 4] = p_spare[0];
+	gp_page_buf[(data_size + spare_offs_2) / 4] = p_spare[1];
+	if (sec_per_page == 8) {
+		gp_page_buf[(data_size + spare_offs_1) / 4 + 1] = p_spare[2];
+		gp_page_buf[(data_size + spare_offs_2) / 4 + 1] = p_spare[3];
+	}
 	sfc_nand_write_en();
 	if (sfc_nand_dev.prog_lines == DATA_LINES_X4 &&
 	    p_nand_info->feature & FEA_SOFT_QOP_BIT &&
@@ -400,7 +413,7 @@ static u32 sfc_nand_prog_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 	sfcmd.d32 = 0;
 	sfcmd.b.cmd = sfc_nand_dev.page_prog_cmd;
 	sfcmd.b.addrbits = SFC_ADDR_XBITS;
-	sfcmd.b.datasize = SFC_NAND_PAGE_MAX_SIZE;
+	sfcmd.b.datasize = SFC_NAND_SECTOR_FULL_SIZE * sec_per_page;
 	sfcmd.b.rw = SFC_WRITE;
 
 	sfctrl.d32 = 0;
@@ -430,10 +443,12 @@ static u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 	union SFCCMD_DATA sfcmd;
 	union SFCCTRL_DATA sfctrl;
 	u32 ecc_result;
-	u32 data_sz = 2048;
 	u32 spare_offs_1 = p_nand_info->spare_offs_1;
 	u32 spare_offs_2 = p_nand_info->spare_offs_2;
+	u32 sec_per_page = p_nand_info->sec_per_page;
+	u32 data_size = sec_per_page * 512;
 
+	PRINT_SFC_I("%s %x %x %x\n", __func__, addr, p_data[0], p_spare[0]);
 	sfcmd.d32 = 0;
 	sfcmd.b.cmd = p_nand_info->page_read_cmd;
 	sfcmd.b.datasize = 0;
@@ -452,18 +467,20 @@ static u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 
 	sfcmd.d32 = 0;
 	sfcmd.b.cmd = sfc_nand_dev.page_read_cmd;
-	sfcmd.b.datasize = SFC_NAND_PAGE_MAX_SIZE;
+	sfcmd.b.datasize = SFC_NAND_SECTOR_FULL_SIZE * sec_per_page;
 	sfcmd.b.addrbits = SFC_ADDR_24BITS;
 	sfctrl.d32 = 0;
 	sfctrl.b.datalines = sfc_nand_dev.read_lines;
 
 	plane = p_nand_info->plane_per_die == 2 ? ((addr >> 6) & 0x1) << 12 : 0;
-	memset(gp_page_buf, 0, SFC_NAND_PAGE_MAX_SIZE);
 	ret = sfc_request(sfcmd.d32, sfctrl.d32, plane << 8, gp_page_buf);
-
-	memcpy(p_data, gp_page_buf, data_sz);
-	p_spare[0] = gp_page_buf[(data_sz + spare_offs_1) / 4];
-	p_spare[1] = gp_page_buf[(data_sz + spare_offs_2) / 4];
+	memcpy(p_data, gp_page_buf, data_size);
+	p_spare[0] = gp_page_buf[(data_size + spare_offs_1) / 4];
+	p_spare[1] = gp_page_buf[(data_size + spare_offs_2) / 4];
+	if (p_nand_info->sec_per_page == 8) {
+		p_spare[2] = gp_page_buf[(data_size + spare_offs_1) / 4 + 1];
+		p_spare[3] = gp_page_buf[(data_size + spare_offs_2) / 4 + 1];
+	}
 	if (ret != SFC_OK)
 		return SFC_NAND_ECC_ERROR;
 
@@ -474,6 +491,7 @@ static u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 		if (p_spare)
 			PRINT_SFC_HEX("spare:", p_spare, 4, 2);
 	}
+
 	return ecc_result;
 }
 
@@ -632,6 +650,7 @@ static void ftl_flash_init(void)
 	g_nand_ops.erase_blk		= sfc_nand_erase_block;
 	g_nand_ops.prog_page		= sfc_nand_prog_page;
 	g_nand_ops.read_page		= sfc_nand_read_page;
+	g_nand_ops.bch_sel		= NULL;
 }
 
 static int spi_nand_enable_QE(void)
diff --git a/drivers/rkflash/sfc_nand.h b/drivers/rkflash/sfc_nand.h
index a9119b26c6a2..f47ffcf5a9ff 100644
--- a/drivers/rkflash/sfc_nand.h
+++ b/drivers/rkflash/sfc_nand.h
@@ -13,7 +13,8 @@
 #define SFC_NAND_ECC_REFRESH		NAND_STS_REFRESH
 #define SFC_NAND_ECC_OK			NAND_STS_OK
 
-#define SFC_NAND_PAGE_MAX_SIZE		2112
+#define SFC_NAND_PAGE_MAX_SIZE		4224
+#define SFC_NAND_SECTOR_FULL_SIZE	528
 
 #define FEA_READ_STATUE_MASK    (0x3 << 0)
 #define FEA_STATUE_MODE1        0
-- 
2.35.3

